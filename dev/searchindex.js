Search.setIndex({"docnames": ["citing", "contributing/debug", "contributing/dependencies", "contributing/deprecations", "contributing/docstring", "contributing/documentation-style-guide", "contributing/index", "contributing/introduction-to-contributing", "contributing/new-contributors-guide/build-docs", "contributing/new-contributors-guide/dev-setup", "contributing/new-contributors-guide/index", "contributing/new-contributors-guide/workflow-process", "contributing/new-contributors-guide/writing-tests", "explanation/active-deprecations", "explanation/glossary", "explanation/gotchas", "explanation/index", "explanation/solve_output", "explanation/special_topics/classification", "explanation/special_topics/finite_diff_derivatives", "explanation/special_topics/index", "guides/assumptions", "guides/booleans", "guides/custom-functions", "guides/index", "guides/logo", "guides/physics/control_problems", "guides/physics/index", "guides/solving/find-roots-polynomial", "guides/solving/index", "guides/solving/reduce-inequalities-algebraically", "guides/solving/solve-diophantine-equation", "guides/solving/solve-equation-algebraically", "guides/solving/solve-matrix-equation", "guides/solving/solve-numerically", "guides/solving/solve-ode", "guides/solving/solve-system-of-equations-algebraically", "guides/solving/solving-guidance", "index", "install", "modules/abc", "modules/algebras", "modules/assumptions/ask", "modules/assumptions/assume", "modules/assumptions/index", "modules/assumptions/predicates", "modules/assumptions/refine", "modules/calculus/index", "modules/categories", "modules/codegen", "modules/combinatorics/fp_groups", "modules/combinatorics/galois", "modules/combinatorics/graycode", "modules/combinatorics/group_constructs", "modules/combinatorics/group_numbers", "modules/combinatorics/index", "modules/combinatorics/named_groups", "modules/combinatorics/partitions", "modules/combinatorics/pc_groups", "modules/combinatorics/perm_groups", "modules/combinatorics/permutations", "modules/combinatorics/polyhedron", "modules/combinatorics/prufer", "modules/combinatorics/subsets", "modules/combinatorics/tensor_can", "modules/combinatorics/testutil", "modules/combinatorics/util", "modules/concrete", "modules/core", "modules/crypto", "modules/diffgeom", "modules/discrete", "modules/evalf", "modules/functions/combinatorial", "modules/functions/elementary", "modules/functions/index", "modules/functions/special", "modules/geometry/curves", "modules/geometry/ellipses", "modules/geometry/entities", "modules/geometry/index", "modules/geometry/lines", "modules/geometry/plane", "modules/geometry/points", "modules/geometry/polygons", "modules/geometry/utils", "modules/holonomic/about", "modules/holonomic/convert", "modules/holonomic/index", "modules/holonomic/internal", "modules/holonomic/operations", "modules/holonomic/represent", "modules/holonomic/uses", "modules/integrals/g-functions", "modules/integrals/index", "modules/integrals/integrals", "modules/interactive", "modules/liealgebras/index", "modules/logic", "modules/matrices/common", "modules/matrices/dense", "modules/matrices/expressions", "modules/matrices/immutablematrices", "modules/matrices/index", "modules/matrices/matrices", "modules/matrices/normalforms", "modules/matrices/sparse", "modules/matrices/sparsetools", "modules/ntheory", "modules/numeric-computation", "modules/parsing", "modules/physics/continuum_mechanics/beam", "modules/physics/continuum_mechanics/beam_problems", "modules/physics/continuum_mechanics/cable", "modules/physics/continuum_mechanics/index", "modules/physics/continuum_mechanics/truss", "modules/physics/control/control", "modules/physics/control/control_plots", "modules/physics/control/index", "modules/physics/control/lti", "modules/physics/hep/index", "modules/physics/hydrogen", "modules/physics/matrices", "modules/physics/mechanics/advanced", "modules/physics/mechanics/api/body", "modules/physics/mechanics/api/expr_manip", "modules/physics/mechanics/api/index", "modules/physics/mechanics/api/joint", "modules/physics/mechanics/api/kane_lagrange", "modules/physics/mechanics/api/linearize", "modules/physics/mechanics/api/part_bod", "modules/physics/mechanics/api/pathway", "modules/physics/mechanics/api/printing", "modules/physics/mechanics/api/system", "modules/physics/mechanics/api/wrapping_geometry", "modules/physics/mechanics/autolev_parser", "modules/physics/mechanics/examples", "modules/physics/mechanics/examples/bicycle_example", "modules/physics/mechanics/examples/four_bar_linkage_example", "modules/physics/mechanics/examples/lin_pend_nonmin_example", "modules/physics/mechanics/examples/multi_degree_freedom_holonomic_system", "modules/physics/mechanics/examples/rollingdisc_example", "modules/physics/mechanics/examples/rollingdisc_example_kane", "modules/physics/mechanics/examples/rollingdisc_example_kane_constraints", "modules/physics/mechanics/examples/rollingdisc_example_lagrange", "modules/physics/mechanics/index", "modules/physics/mechanics/joints", "modules/physics/mechanics/kane", "modules/physics/mechanics/lagrange", "modules/physics/mechanics/linearize", "modules/physics/mechanics/masses", "modules/physics/mechanics/reference", "modules/physics/mechanics/sympy_mechanics_for_autolev_users", "modules/physics/mechanics/symsystem", "modules/physics/optics/gaussopt", "modules/physics/optics/index", "modules/physics/optics/medium", "modules/physics/optics/polarization", "modules/physics/optics/utils", "modules/physics/optics/waves", "modules/physics/paulialgebra", "modules/physics/qho_1d", "modules/physics/quantum/anticommutator", "modules/physics/quantum/cartesian", "modules/physics/quantum/cg", "modules/physics/quantum/circuitplot", "modules/physics/quantum/commutator", "modules/physics/quantum/constants", "modules/physics/quantum/dagger", "modules/physics/quantum/gate", "modules/physics/quantum/grover", "modules/physics/quantum/hilbert", "modules/physics/quantum/index", "modules/physics/quantum/innerproduct", "modules/physics/quantum/operator", "modules/physics/quantum/operatorset", "modules/physics/quantum/piab", "modules/physics/quantum/qapply", "modules/physics/quantum/qft", "modules/physics/quantum/qubit", "modules/physics/quantum/represent", "modules/physics/quantum/shor", "modules/physics/quantum/spin", "modules/physics/quantum/state", "modules/physics/quantum/tensorproduct", "modules/physics/secondquant", "modules/physics/sho", "modules/physics/units/dimensions", "modules/physics/units/examples", "modules/physics/units/index", "modules/physics/units/philosophy", "modules/physics/units/prefixes", "modules/physics/units/quantities", "modules/physics/units/unitsystem", "modules/physics/vector/advanced", "modules/physics/vector/api/classes", "modules/physics/vector/api/fieldfunctions", "modules/physics/vector/api/functions", "modules/physics/vector/api/index", "modules/physics/vector/api/kinematics", "modules/physics/vector/api/printing", "modules/physics/vector/fields", "modules/physics/vector/index", "modules/physics/vector/kinematics", "modules/physics/vector/vectors", "modules/physics/wigner", "modules/plotting", "modules/polys/agca", "modules/polys/basics", "modules/polys/domainmatrix", "modules/polys/domainsintro", "modules/polys/domainsref", "modules/polys/index", "modules/polys/internals", "modules/polys/literature", "modules/polys/numberfields", "modules/polys/reference", "modules/polys/ringseries", "modules/polys/solvers", "modules/polys/wester", "modules/printing", "modules/rewriting", "modules/series/formal", "modules/series/fourier", "modules/series/index", "modules/series/limitseq", "modules/series/sequences", "modules/series/series", "modules/sets", "modules/simplify/fu", "modules/simplify/hyperexpand", "modules/simplify/index", "modules/simplify/simplify", "modules/solvers/diophantine", "modules/solvers/index", "modules/solvers/inequalities", "modules/solvers/ode", "modules/solvers/pde", "modules/solvers/solvers", "modules/solvers/solveset", "modules/stats", "modules/tensor/array", "modules/tensor/array_expressions", "modules/tensor/index", "modules/tensor/index_methods", "modules/tensor/indexed", "modules/tensor/tensor", "modules/tensor/toperators", "modules/testing/index", "modules/testing/pytest", "modules/testing/randtest", "modules/testing/runtests", "modules/utilities/autowrap", "modules/utilities/codegen", "modules/utilities/decorator", "modules/utilities/enumerative", "modules/utilities/exceptions", "modules/utilities/index", "modules/utilities/iterables", "modules/utilities/lambdify", "modules/utilities/memoization", "modules/utilities/misc", "modules/utilities/pkgdata", "modules/utilities/source", "modules/utilities/timeutils", "modules/vector/api/classes", "modules/vector/api/index", "modules/vector/api/orienterclasses", "modules/vector/api/vectorfunctions", "modules/vector/basics", "modules/vector/coordsys", "modules/vector/examples", "modules/vector/fields", "modules/vector/index", "modules/vector/intro", "modules/vector/vector_integration", "reference/index", "reference/public/basics/index", "reference/public/codegeneration/index", "reference/public/logic/index", "reference/public/matrices/index", "reference/public/numbertheory/index", "reference/public/physics/index", "reference/public/topics/index", "reference/public/utilities/index", "tutorials/index", "tutorials/intro-tutorial/basic_operations", "tutorials/intro-tutorial/calculus", "tutorials/intro-tutorial/features", "tutorials/intro-tutorial/gotchas", "tutorials/intro-tutorial/index", "tutorials/intro-tutorial/intro", "tutorials/intro-tutorial/manipulation", "tutorials/intro-tutorial/matrices", "tutorials/intro-tutorial/next", "tutorials/intro-tutorial/preliminaries", "tutorials/intro-tutorial/printing", "tutorials/intro-tutorial/simplification", "tutorials/intro-tutorial/solvers"], "filenames": ["citing.md", "contributing/debug.rst", "contributing/dependencies.md", "contributing/deprecations.md", "contributing/docstring.rst", "contributing/documentation-style-guide.rst", "contributing/index.md", "contributing/introduction-to-contributing.md", "contributing/new-contributors-guide/build-docs.rst", "contributing/new-contributors-guide/dev-setup.md", "contributing/new-contributors-guide/index.md", "contributing/new-contributors-guide/workflow-process.md", "contributing/new-contributors-guide/writing-tests.md", "explanation/active-deprecations.md", "explanation/glossary.md", "explanation/gotchas.rst", "explanation/index.rst", "explanation/solve_output.rst", "explanation/special_topics/classification.rst", "explanation/special_topics/finite_diff_derivatives.rst", "explanation/special_topics/index.rst", "guides/assumptions.rst", "guides/booleans.rst", "guides/custom-functions.md", "guides/index.rst", "guides/logo.rst", "guides/physics/control_problems.rst", "guides/physics/index.rst", "guides/solving/find-roots-polynomial.md", "guides/solving/index.md", "guides/solving/reduce-inequalities-algebraically.md", "guides/solving/solve-diophantine-equation.md", "guides/solving/solve-equation-algebraically.md", "guides/solving/solve-matrix-equation.md", "guides/solving/solve-numerically.md", "guides/solving/solve-ode.md", "guides/solving/solve-system-of-equations-algebraically.md", "guides/solving/solving-guidance.md", "index.rst", "install.md", "modules/abc.rst", "modules/algebras.rst", "modules/assumptions/ask.rst", "modules/assumptions/assume.rst", "modules/assumptions/index.rst", "modules/assumptions/predicates.rst", "modules/assumptions/refine.rst", "modules/calculus/index.rst", "modules/categories.rst", "modules/codegen.rst", "modules/combinatorics/fp_groups.rst", "modules/combinatorics/galois.rst", "modules/combinatorics/graycode.rst", "modules/combinatorics/group_constructs.rst", "modules/combinatorics/group_numbers.rst", "modules/combinatorics/index.rst", "modules/combinatorics/named_groups.rst", "modules/combinatorics/partitions.rst", "modules/combinatorics/pc_groups.rst", "modules/combinatorics/perm_groups.rst", "modules/combinatorics/permutations.rst", "modules/combinatorics/polyhedron.rst", "modules/combinatorics/prufer.rst", "modules/combinatorics/subsets.rst", "modules/combinatorics/tensor_can.rst", "modules/combinatorics/testutil.rst", "modules/combinatorics/util.rst", "modules/concrete.rst", "modules/core.rst", "modules/crypto.rst", "modules/diffgeom.rst", "modules/discrete.rst", "modules/evalf.rst", "modules/functions/combinatorial.rst", "modules/functions/elementary.rst", "modules/functions/index.rst", "modules/functions/special.rst", "modules/geometry/curves.rst", "modules/geometry/ellipses.rst", "modules/geometry/entities.rst", "modules/geometry/index.rst", "modules/geometry/lines.rst", "modules/geometry/plane.rst", "modules/geometry/points.rst", "modules/geometry/polygons.rst", "modules/geometry/utils.rst", "modules/holonomic/about.rst", "modules/holonomic/convert.rst", "modules/holonomic/index.rst", "modules/holonomic/internal.rst", "modules/holonomic/operations.rst", "modules/holonomic/represent.rst", "modules/holonomic/uses.rst", "modules/integrals/g-functions.rst", "modules/integrals/index.rst", "modules/integrals/integrals.rst", "modules/interactive.rst", "modules/liealgebras/index.rst", "modules/logic.rst", "modules/matrices/common.rst", "modules/matrices/dense.rst", "modules/matrices/expressions.rst", "modules/matrices/immutablematrices.rst", "modules/matrices/index.rst", "modules/matrices/matrices.rst", "modules/matrices/normalforms.rst", "modules/matrices/sparse.rst", "modules/matrices/sparsetools.rst", "modules/ntheory.rst", "modules/numeric-computation.rst", "modules/parsing.rst", "modules/physics/continuum_mechanics/beam.rst", "modules/physics/continuum_mechanics/beam_problems.rst", "modules/physics/continuum_mechanics/cable.rst", "modules/physics/continuum_mechanics/index.rst", "modules/physics/continuum_mechanics/truss.rst", "modules/physics/control/control.rst", "modules/physics/control/control_plots.rst", "modules/physics/control/index.rst", "modules/physics/control/lti.rst", "modules/physics/hep/index.rst", "modules/physics/hydrogen.rst", "modules/physics/matrices.rst", "modules/physics/mechanics/advanced.rst", "modules/physics/mechanics/api/body.rst", "modules/physics/mechanics/api/expr_manip.rst", "modules/physics/mechanics/api/index.rst", "modules/physics/mechanics/api/joint.rst", "modules/physics/mechanics/api/kane_lagrange.rst", "modules/physics/mechanics/api/linearize.rst", "modules/physics/mechanics/api/part_bod.rst", "modules/physics/mechanics/api/pathway.rst", "modules/physics/mechanics/api/printing.rst", "modules/physics/mechanics/api/system.rst", "modules/physics/mechanics/api/wrapping_geometry.rst", "modules/physics/mechanics/autolev_parser.rst", "modules/physics/mechanics/examples.rst", "modules/physics/mechanics/examples/bicycle_example.rst", "modules/physics/mechanics/examples/four_bar_linkage_example.rst", "modules/physics/mechanics/examples/lin_pend_nonmin_example.rst", "modules/physics/mechanics/examples/multi_degree_freedom_holonomic_system.rst", "modules/physics/mechanics/examples/rollingdisc_example.rst", "modules/physics/mechanics/examples/rollingdisc_example_kane.rst", "modules/physics/mechanics/examples/rollingdisc_example_kane_constraints.rst", "modules/physics/mechanics/examples/rollingdisc_example_lagrange.rst", "modules/physics/mechanics/index.rst", "modules/physics/mechanics/joints.rst", "modules/physics/mechanics/kane.rst", "modules/physics/mechanics/lagrange.rst", "modules/physics/mechanics/linearize.rst", "modules/physics/mechanics/masses.rst", "modules/physics/mechanics/reference.rst", "modules/physics/mechanics/sympy_mechanics_for_autolev_users.rst", "modules/physics/mechanics/symsystem.rst", "modules/physics/optics/gaussopt.rst", "modules/physics/optics/index.rst", "modules/physics/optics/medium.rst", "modules/physics/optics/polarization.rst", "modules/physics/optics/utils.rst", "modules/physics/optics/waves.rst", "modules/physics/paulialgebra.rst", "modules/physics/qho_1d.rst", "modules/physics/quantum/anticommutator.rst", "modules/physics/quantum/cartesian.rst", "modules/physics/quantum/cg.rst", "modules/physics/quantum/circuitplot.rst", "modules/physics/quantum/commutator.rst", "modules/physics/quantum/constants.rst", "modules/physics/quantum/dagger.rst", "modules/physics/quantum/gate.rst", "modules/physics/quantum/grover.rst", "modules/physics/quantum/hilbert.rst", "modules/physics/quantum/index.rst", "modules/physics/quantum/innerproduct.rst", "modules/physics/quantum/operator.rst", "modules/physics/quantum/operatorset.rst", "modules/physics/quantum/piab.rst", "modules/physics/quantum/qapply.rst", "modules/physics/quantum/qft.rst", "modules/physics/quantum/qubit.rst", "modules/physics/quantum/represent.rst", "modules/physics/quantum/shor.rst", "modules/physics/quantum/spin.rst", "modules/physics/quantum/state.rst", "modules/physics/quantum/tensorproduct.rst", "modules/physics/secondquant.rst", "modules/physics/sho.rst", "modules/physics/units/dimensions.rst", "modules/physics/units/examples.rst", "modules/physics/units/index.rst", "modules/physics/units/philosophy.rst", "modules/physics/units/prefixes.rst", "modules/physics/units/quantities.rst", "modules/physics/units/unitsystem.rst", "modules/physics/vector/advanced.rst", "modules/physics/vector/api/classes.rst", "modules/physics/vector/api/fieldfunctions.rst", "modules/physics/vector/api/functions.rst", "modules/physics/vector/api/index.rst", "modules/physics/vector/api/kinematics.rst", "modules/physics/vector/api/printing.rst", "modules/physics/vector/fields.rst", "modules/physics/vector/index.rst", "modules/physics/vector/kinematics.rst", "modules/physics/vector/vectors.rst", "modules/physics/wigner.rst", "modules/plotting.rst", "modules/polys/agca.rst", "modules/polys/basics.rst", "modules/polys/domainmatrix.rst", "modules/polys/domainsintro.rst", "modules/polys/domainsref.rst", "modules/polys/index.rst", "modules/polys/internals.rst", "modules/polys/literature.rst", "modules/polys/numberfields.rst", "modules/polys/reference.rst", "modules/polys/ringseries.rst", "modules/polys/solvers.rst", "modules/polys/wester.rst", "modules/printing.rst", "modules/rewriting.rst", "modules/series/formal.rst", "modules/series/fourier.rst", "modules/series/index.rst", "modules/series/limitseq.rst", "modules/series/sequences.rst", "modules/series/series.rst", "modules/sets.rst", "modules/simplify/fu.rst", "modules/simplify/hyperexpand.rst", "modules/simplify/index.rst", "modules/simplify/simplify.rst", "modules/solvers/diophantine.rst", "modules/solvers/index.rst", "modules/solvers/inequalities.rst", "modules/solvers/ode.rst", "modules/solvers/pde.rst", "modules/solvers/solvers.rst", "modules/solvers/solveset.rst", "modules/stats.rst", "modules/tensor/array.rst", "modules/tensor/array_expressions.rst", "modules/tensor/index.rst", "modules/tensor/index_methods.rst", "modules/tensor/indexed.rst", "modules/tensor/tensor.rst", "modules/tensor/toperators.rst", "modules/testing/index.rst", "modules/testing/pytest.rst", "modules/testing/randtest.rst", "modules/testing/runtests.rst", "modules/utilities/autowrap.rst", "modules/utilities/codegen.rst", "modules/utilities/decorator.rst", "modules/utilities/enumerative.rst", "modules/utilities/exceptions.rst", "modules/utilities/index.rst", "modules/utilities/iterables.rst", "modules/utilities/lambdify.rst", "modules/utilities/memoization.rst", "modules/utilities/misc.rst", "modules/utilities/pkgdata.rst", "modules/utilities/source.rst", "modules/utilities/timeutils.rst", "modules/vector/api/classes.rst", "modules/vector/api/index.rst", "modules/vector/api/orienterclasses.rst", "modules/vector/api/vectorfunctions.rst", "modules/vector/basics.rst", "modules/vector/coordsys.rst", "modules/vector/examples.rst", "modules/vector/fields.rst", "modules/vector/index.rst", "modules/vector/intro.rst", "modules/vector/vector_integration.rst", "reference/index.rst", "reference/public/basics/index.rst", "reference/public/codegeneration/index.rst", "reference/public/logic/index.rst", "reference/public/matrices/index.rst", "reference/public/numbertheory/index.rst", "reference/public/physics/index.rst", "reference/public/topics/index.rst", "reference/public/utilities/index.rst", "tutorials/index.rst", "tutorials/intro-tutorial/basic_operations.rst", "tutorials/intro-tutorial/calculus.rst", "tutorials/intro-tutorial/features.rst", "tutorials/intro-tutorial/gotchas.rst", "tutorials/intro-tutorial/index.rst", "tutorials/intro-tutorial/intro.rst", "tutorials/intro-tutorial/manipulation.rst", "tutorials/intro-tutorial/matrices.rst", "tutorials/intro-tutorial/next.rst", "tutorials/intro-tutorial/preliminaries.rst", "tutorials/intro-tutorial/printing.rst", "tutorials/intro-tutorial/simplification.rst", "tutorials/intro-tutorial/solvers.rst"], "titles": ["Citing SymPy", "Debugging", "Dependencies", "Deprecation Policy", "SymPy Docstrings Style Guide", "Docstring Style Guide", "Contributing", "Introduction to Contributing", "Building the Documentation", "Setup Development Environment", "Guide for New Contributors", "Development Workflow Process", "Writing Tests", "List of active deprecations", "Glossary", "Gotchas and Pitfalls", "Explanations", "Solve Output by Type", "Classification of SymPy objects", "Finite Difference Approximations to Derivatives", "SymPy Special Topics", "Assumptions", "Symbolic and fuzzy booleans", "Writing Custom Functions", "How-to Guides", "SymPy Logo", "Control Package Examples", "Physics", "Find the Roots of a Polynomial Algebraically or Numerically", "Solve Equations", "Reduce One or a System of Inequalities for a Single Variable Algebraically", "Solve a Diophantine Equation Algebraically", "Solve an Equation Algebraically", "Solve a Matrix Equation Algebraically", "Solve One or a System of Equations Numerically", "Solve an Ordinary Differential Equation (ODE) Algebraically", "Solve a System of Equations Algebraically", "Solving Guidance", "Welcome to SymPy\u2019s documentation!", "Installation", "abc", "Algebras", "Ask", "Assume", "Assumptions", "Predicates", "Refine", "Calculus", "Category Theory", "Code Generation", "Finitely Presented Groups", "Galois Groups", "Gray Code", "Group constructors", "Nilpotent, Abelian and Cyclic Numbers", "Combinatorics", "Named Groups", "Partitions", "Polycyclic Groups", "Permutation Groups", "Permutations", "Polyhedron", "Prufer Sequences", "Subsets", "Tensor Canonicalization", "Test Utilities", "Utilities", "Concrete", "Core", "Cryptography", "Differential Geometry", "Discrete", "Numerical Evaluation", "Combinatorial", "Elementary", "Functions", "Special", "Curves", "Ellipses", "Entities", "Geometry", "Lines", "Plane", "Points", "Polygons", "Utils", "About Holonomic Functions", "Converting other representations to holonomic", "Holonomic", "Internal API", "Operations on holonomic functions", "Representation of holonomic functions in SymPy", "Uses and Current limitations", "Computing Integrals using Meijer G-Functions", "Integrals", "Integrals", "Interactive", "Lie Algebra", "Logic", "Common Matrices", "Dense Matrices", "Matrix Expressions", "Immutable Matrices", "Matrices", "Matrices (linear algebra)", "Matrix Normal Forms", "Sparse Matrices", "Sparse Tools", "Number Theory", "Numeric Computation", "Parsing", "Beam (Docstrings)", "Solving Beam Bending Problems using Singularity Functions", "Cable (Docstrings)", "Continuum Mechanics", "Truss (Docstrings)", "Control", "Control System Plots", "Control Module", "Control API", "High energy physics", "Hydrogen Wavefunctions", "Matrices", "Potential Issues/Advanced Topics/Future Features in Physics/Mechanics", "Body (Docstrings)", "Expression Manipulation (Docstrings)", "Mechanics API Reference", "Joints Framework (Docstrings)", "Kane\u2019s Method &amp; Lagrange\u2019s Method (Docstrings)", "Linearization (Docstrings)", "Bodies, Inertias, Loads &amp; Other Functions (Docstrings)", "Pathway (Docstrings)", "Printing (Docstrings)", "SymbolicSystem (Docstrings)", "Wrapping Geometry (Docstrings)", "Autolev Parser", "Examples for Physics/Mechanics", "A bicycle", "A four bar linkage", "Nonminimal Coordinates Pendulum", "Multi Degree of Freedom Holonomic System", "A rolling disc", "A rolling disc, with Kane\u2019s method", "A rolling disc, with Kane\u2019s method and constraint forces", "A rolling disc using Lagrange\u2019s Method", "Classical Mechanics", "Joints Framework in Physics/Mechanics", "Kane\u2019s Method in Physics/Mechanics", "Lagrange\u2019s Method in Physics/Mechanics", "Linearization in Physics/Mechanics", "Masses, Inertias, Particles and Rigid Bodies in Physics/Mechanics", "References for Physics/Mechanics", "SymPy Mechanics for Autolev Users", "Symbolic Systems in Physics/Mechanics", "Gaussian Optics", "Optics Module", "Medium", "Polarization", "Utilities", "Waves", "Pauli Algebra", "Quantum Harmonic Oscillator in 1-D", "Anticommutator", "Cartesian Operators and States", "Clebsch-Gordan Coefficients", "Circuit Plot", "Commutator", "Constants", "Dagger", "Gates", "Grover\u2019s Algorithm", "Hilbert Space", "Quantum Mechanics", "Inner Product", "Operator", "Operator/State Helper Functions", "Particle in a Box", "Qapply", "QFT", "Qubit", "Represent", "Shor\u2019s Algorithm", "Spin", "State", "Tensor Product", "Second Quantization", "Quantum Harmonic Oscillator in 3-D", "Dimensions and dimension systems", "More examples", "Unit systems", "Philosophy behind unit systems", "Unit prefixes", "Physical quantities", "Units and unit systems", "Potential Issues/Advanced Topics/Future Features in Physics/Vector Module", "Essential Classes", "Docstrings for basic field functions", "Essential Functions (Docstrings)", "Physics Vector API", "Kinematics (Docstrings)", "Printing (Docstrings)", "Scalar and Vector Field Functionality", "The Physics Vector Module", "Vector: Kinematics", "Vector &amp; ReferenceFrame", "Wigner Symbols", "Plotting", "AGCA - Algebraic Geometry and Commutative Algebra Module", "Basic functionality of the module", "Introducing the domainmatrix of the poly module", "Introducing the Domains of the poly module", "Reference docs for the Poly Domains", "Polynomial Manipulation", "Internals of the Polynomial Manipulation Module", "Literature", "Number Fields", "Polynomials Manipulation Module Reference", "Series Manipulation using Polynomials", "Poly solvers", "Examples from Wester\u2019s Article", "Printing", "Term Rewriting", "Formal Power Series", "Fourier Series", "Series", "Limits of Sequences", "Sequences", "Series Expansions", "Sets", "Hongguang Fu\u2019s Trigonometric Simplification", "Hypergeometric Expansion", "Simplify", "Simplify", "Diophantine", "Solvers", "Inequality Solvers", "ODE", "PDE", "Solvers", "Solveset", "Stats", "N-dim array", "N-dim array expressions", "Tensor", "Methods", "Indexed Objects", "Tensor", "Tensor Operators", "Testing", "pytest", "Randomised Testing", "Run Tests", "Autowrap Module", "Codegen", "Decorator", "Enumerative", "Exceptions and Warnings", "Utilities", "Iterables", "Lambdify", "Memoization", "Miscellaneous", "PKGDATA", "Source Code Inspection", "Timing Utilities", "Essential Classes in sympy.vector (docstrings)", "Vector API", "Orienter classes (docstrings)", "Essential Functions in sympy.vector (docstrings)", "Basic Implementation details", "More about Coordinate Systems", "General examples of usage", "Scalar and Vector Field Functionality", "Vector", "Introduction", "Applications of Vector Integrals", "API Reference", "Basics", "Code Generation", "Logic", "Matrices", "Number Theory", "Physics", "Topics", "Utilities", "Tutorials", "Basic Operations", "Calculus", "SymPy Features", "Gotchas", "Introductory Tutorial", "Introduction", "Advanced Expression Manipulation", "Matrices", "What\u2019s Next", "Preliminaries", "Printing", "Simplification", "Solvers"], "terms": {"To": [0, 1, 2, 3, 4, 5, 8, 9, 11, 12, 13, 14, 15, 19, 22, 23, 26, 30, 31, 32, 34, 35, 36, 37, 39, 40, 43, 44, 47, 48, 49, 50, 58, 59, 60, 64, 67, 68, 69, 70, 72, 73, 74, 75, 76, 81, 91, 93, 95, 97, 98, 99, 101, 104, 108, 110, 111, 112, 117, 119, 120, 122, 124, 127, 128, 131, 133, 134, 148, 149, 150, 152, 162, 166, 179, 188, 190, 201, 204, 206, 208, 209, 210, 211, 213, 215, 216, 217, 219, 220, 227, 228, 230, 233, 236, 237, 238, 239, 240, 241, 244, 245, 249, 251, 252, 255, 256, 258, 259, 265, 267, 269, 270, 272, 274, 275, 286, 287, 289, 290, 292, 293, 296, 297, 298], "public": [0, 4, 11, 12, 49, 68, 69, 90, 210, 211, 213, 214, 218, 233, 236, 240, 254, 265], "us": [0, 1, 3, 4, 8, 9, 10, 11, 12, 14, 15, 17, 18, 20, 21, 22, 23, 25, 26, 27, 29, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 107, 108, 110, 111, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 145, 146, 147, 148, 152, 153, 154, 157, 158, 160, 162, 164, 165, 166, 169, 171, 173, 174, 175, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 194, 195, 196, 197, 199, 200, 201, 203, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 232, 233, 235, 236, 237, 238, 240, 241, 242, 244, 245, 246, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 265, 268, 269, 271, 272, 274, 275, 277, 282, 283, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298], "meurer": 0, "A": [0, 2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 23, 26, 28, 30, 32, 33, 34, 35, 36, 37, 38, 41, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 90, 91, 93, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 107, 108, 110, 111, 112, 113, 115, 117, 119, 123, 124, 125, 127, 128, 129, 130, 131, 133, 134, 135, 136, 139, 140, 145, 146, 147, 150, 151, 152, 153, 154, 157, 159, 162, 164, 165, 166, 168, 169, 170, 171, 173, 174, 175, 177, 179, 180, 181, 182, 183, 184, 185, 187, 189, 190, 191, 193, 194, 195, 197, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 232, 233, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 251, 252, 253, 254, 255, 256, 258, 259, 265, 267, 269, 270, 271, 272, 274, 275, 282, 288, 290, 292, 293, 297], "smith": [0, 13, 105, 209], "cp": [0, 60, 109, 208, 209], "paprocki": 0, "m": [0, 8, 9, 11, 12, 13, 15, 19, 21, 23, 26, 39, 41, 45, 49, 50, 56, 57, 59, 60, 64, 67, 68, 69, 70, 71, 73, 76, 78, 80, 84, 85, 93, 95, 97, 99, 100, 101, 102, 104, 105, 107, 108, 110, 111, 112, 115, 119, 121, 122, 124, 127, 128, 129, 130, 133, 135, 139, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 156, 161, 168, 182, 183, 186, 188, 190, 201, 205, 207, 208, 209, 211, 213, 214, 215, 216, 217, 220, 221, 222, 223, 225, 226, 227, 228, 230, 232, 233, 236, 238, 239, 240, 241, 242, 245, 246, 252, 253, 255, 258, 260, 265, 268, 270, 274, 275, 287, 293, 296, 297, 298], "\u010dert\u00edk": 0, "o": [0, 4, 8, 11, 12, 14, 15, 19, 21, 40, 48, 49, 59, 60, 66, 68, 69, 74, 76, 78, 79, 81, 82, 84, 90, 93, 108, 112, 124, 128, 130, 131, 133, 135, 147, 148, 149, 150, 152, 153, 175, 185, 196, 199, 201, 203, 205, 213, 214, 216, 217, 220, 222, 227, 230, 236, 240, 245, 251, 258, 261, 262, 268, 271, 287], "kirpichev": 0, "sb": 0, "rocklin": 0, "kumar": [0, 239], "ivanov": 0, "": [0, 2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 60, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 76, 77, 78, 80, 81, 82, 84, 85, 86, 87, 90, 91, 93, 95, 96, 97, 98, 99, 101, 102, 104, 107, 108, 109, 110, 111, 112, 113, 115, 117, 119, 121, 123, 124, 126, 127, 129, 130, 131, 133, 134, 135, 137, 141, 145, 146, 150, 152, 156, 157, 158, 164, 165, 167, 169, 171, 172, 175, 179, 180, 182, 183, 185, 188, 189, 190, 194, 195, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 226, 227, 228, 230, 231, 232, 233, 235, 236, 237, 240, 246, 251, 252, 253, 254, 255, 256, 258, 259, 261, 265, 267, 271, 272, 274, 277, 282, 283, 285, 286, 287, 289, 290, 291, 292, 293, 297, 298], "moor": [0, 33, 101, 104], "jk": 0, "singh": 0, "rathnayak": 0, "t": [0, 3, 4, 5, 7, 8, 11, 12, 13, 14, 15, 22, 23, 26, 28, 35, 41, 44, 45, 47, 49, 50, 52, 59, 60, 61, 62, 64, 68, 69, 70, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 92, 93, 95, 97, 98, 99, 100, 101, 104, 108, 109, 110, 115, 119, 120, 123, 124, 125, 127, 128, 129, 130, 131, 133, 134, 135, 138, 139, 140, 147, 148, 149, 150, 152, 153, 157, 159, 165, 169, 181, 183, 185, 187, 188, 190, 194, 195, 197, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 219, 220, 223, 227, 228, 229, 230, 232, 233, 236, 237, 238, 239, 240, 241, 242, 246, 249, 251, 254, 258, 259, 265, 268, 270, 274, 286, 287, 291, 292, 293, 296, 297, 298], "vig": 0, "granger": [0, 171], "BE": [0, 12], "muller": 0, "rp": [0, 84, 157], "bonazzi": 0, "f": [0, 4, 8, 11, 12, 13, 14, 15, 19, 23, 26, 28, 31, 32, 34, 35, 47, 48, 49, 50, 51, 58, 59, 60, 64, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 86, 91, 92, 93, 95, 97, 99, 101, 104, 108, 109, 110, 112, 115, 117, 127, 128, 129, 131, 133, 140, 145, 147, 148, 152, 154, 158, 159, 170, 171, 174, 183, 185, 188, 195, 200, 201, 204, 205, 206, 207, 208, 210, 211, 213, 214, 215, 216, 217, 219, 220, 222, 223, 226, 227, 228, 229, 230, 232, 233, 236, 237, 238, 239, 240, 241, 245, 246, 251, 252, 253, 254, 255, 258, 259, 261, 271, 272, 275, 286, 287, 292, 296, 297, 298], "gupta": [0, 239], "h": [0, 15, 19, 47, 48, 49, 50, 51, 52, 59, 64, 67, 68, 69, 73, 76, 90, 93, 95, 99, 100, 104, 105, 110, 119, 127, 130, 150, 154, 157, 169, 171, 174, 179, 183, 190, 205, 206, 207, 208, 209, 211, 213, 214, 215, 216, 219, 220, 228, 232, 236, 238, 239, 240, 241, 246, 253, 275, 287, 296], "vat": 0, "johansson": 0, "pedregosa": 0, "curri": [0, 171], "mj": 0, "terrel": 0, "ar": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 26, 28, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 104, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 119, 120, 123, 124, 125, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 157, 158, 159, 160, 162, 164, 166, 169, 171, 173, 174, 175, 177, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 199, 200, 201, 203, 205, 206, 207, 208, 209, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 232, 233, 235, 236, 237, 238, 240, 241, 242, 244, 245, 246, 247, 249, 251, 252, 253, 255, 256, 257, 258, 259, 261, 265, 267, 268, 269, 270, 271, 272, 274, 276, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298], "rou\u010dka": 0, "\u0161": 0, "saboo": 0, "fernando": 0, "i": [0, 1, 2, 4, 5, 7, 8, 9, 10, 11, 13, 14, 17, 18, 19, 20, 21, 22, 23, 25, 26, 28, 29, 30, 31, 32, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 107, 108, 110, 111, 112, 113, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 165, 166, 168, 169, 171, 173, 174, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 225, 226, 227, 228, 229, 230, 232, 233, 235, 236, 237, 238, 240, 241, 242, 244, 245, 246, 247, 249, 251, 252, 253, 254, 255, 256, 258, 259, 261, 262, 264, 265, 267, 268, 269, 270, 271, 272, 274, 275, 286, 287, 289, 290, 292, 293, 295, 296, 297, 298], "kulal": 0, "cimrman": 0, "r": [0, 4, 5, 8, 12, 13, 15, 19, 21, 23, 28, 41, 48, 49, 50, 52, 59, 60, 68, 69, 70, 72, 73, 74, 81, 82, 84, 86, 90, 91, 93, 95, 104, 108, 110, 112, 115, 119, 121, 124, 127, 128, 129, 130, 131, 133, 134, 135, 137, 139, 142, 143, 144, 149, 150, 151, 152, 153, 154, 157, 181, 182, 185, 186, 188, 195, 196, 199, 201, 203, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 220, 221, 222, 227, 228, 230, 232, 233, 236, 238, 239, 240, 246, 251, 253, 255, 265, 268, 270, 271, 272, 275, 297], "scopatz": 0, "2017": [0, 7, 205], "symbol": [0, 2, 4, 5, 7, 11, 12, 13, 14, 17, 19, 24, 26, 27, 28, 29, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 58, 60, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 90, 91, 92, 93, 95, 96, 98, 99, 101, 104, 108, 109, 110, 111, 112, 113, 115, 116, 117, 119, 121, 123, 124, 125, 127, 128, 129, 130, 131, 133, 134, 135, 137, 138, 139, 140, 142, 143, 144, 145, 150, 152, 154, 157, 158, 159, 160, 162, 164, 165, 167, 169, 171, 173, 174, 177, 180, 182, 183, 184, 185, 186, 187, 188, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 203, 204, 206, 207, 208, 209, 211, 212, 213, 214, 215, 217, 218, 220, 221, 222, 223, 225, 226, 227, 228, 230, 232, 233, 235, 236, 237, 238, 240, 241, 243, 244, 245, 246, 247, 252, 258, 259, 265, 267, 268, 270, 271, 272, 275, 282, 286, 287, 290, 292, 293, 296, 297, 298], "comput": [0, 2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 19, 21, 22, 23, 26, 28, 29, 32, 33, 34, 39, 41, 47, 49, 50, 51, 52, 57, 59, 60, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 81, 83, 87, 90, 91, 92, 94, 95, 97, 99, 101, 104, 105, 107, 108, 110, 111, 112, 117, 119, 123, 127, 128, 129, 133, 135, 137, 138, 142, 145, 152, 169, 170, 171, 179, 184, 185, 187, 189, 190, 194, 195, 196, 201, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 222, 223, 225, 227, 228, 229, 230, 232, 233, 236, 238, 239, 240, 242, 252, 255, 258, 259, 265, 267, 268, 269, 270, 271, 272, 274, 277, 286, 287, 289, 290, 293, 297], "python": [0, 1, 2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 18, 21, 22, 23, 27, 28, 29, 32, 33, 35, 37, 38, 39, 42, 43, 44, 47, 60, 68, 69, 72, 74, 80, 96, 98, 99, 101, 104, 108, 109, 110, 111, 123, 135, 152, 195, 206, 207, 208, 209, 210, 211, 217, 219, 220, 228, 232, 236, 239, 241, 251, 252, 253, 254, 255, 258, 259, 265, 289, 290, 291, 292, 293, 295, 296, 297], "peerj": [0, 7], "scienc": [0, 60, 93, 104, 151, 152, 207, 214, 229, 230, 287], "3": [0, 3, 5, 7, 9, 11, 12, 13, 15, 17, 19, 21, 22, 23, 28, 30, 31, 32, 33, 34, 35, 37, 39, 41, 42, 44, 45, 46, 47, 49, 50, 52, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 113, 115, 117, 119, 120, 121, 122, 124, 125, 127, 130, 133, 137, 138, 139, 140, 142, 143, 144, 145, 146, 148, 149, 150, 152, 153, 154, 156, 158, 162, 164, 165, 166, 170, 174, 179, 180, 182, 184, 185, 188, 189, 191, 192, 195, 196, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 251, 252, 254, 255, 256, 258, 259, 261, 265, 267, 268, 269, 270, 272, 274, 275, 282, 286, 287, 289, 291, 292, 293, 296, 297, 298], "e103": 0, "http": [0, 2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 21, 23, 39, 41, 43, 44, 45, 47, 48, 49, 51, 52, 56, 57, 59, 60, 61, 62, 67, 68, 69, 70, 71, 72, 73, 74, 76, 78, 80, 84, 85, 86, 90, 93, 95, 96, 97, 98, 99, 101, 104, 108, 111, 117, 119, 121, 122, 154, 156, 157, 158, 160, 161, 162, 166, 167, 168, 171, 173, 174, 183, 185, 195, 197, 200, 202, 205, 209, 211, 214, 216, 219, 220, 223, 225, 227, 228, 229, 232, 233, 236, 239, 240, 252, 253, 254, 256, 258, 259, 261, 265, 267, 271, 273, 275, 293, 296], "doi": [0, 4, 41, 47, 60, 67, 104, 108, 129, 209, 211, 214, 229, 232, 240, 258], "org": [0, 2, 4, 5, 11, 12, 15, 21, 23, 41, 43, 44, 45, 47, 48, 49, 51, 52, 56, 57, 59, 60, 67, 68, 69, 70, 71, 73, 74, 76, 78, 80, 84, 85, 86, 95, 96, 97, 98, 99, 101, 104, 108, 117, 119, 121, 122, 154, 156, 157, 158, 160, 161, 162, 166, 167, 168, 171, 173, 174, 183, 185, 195, 197, 200, 202, 209, 211, 214, 216, 220, 223, 227, 228, 229, 232, 233, 236, 239, 240, 252, 253, 254, 256, 258, 265, 267, 271, 273, 275, 293, 296], "10": [0, 2, 4, 12, 15, 23, 26, 28, 34, 35, 37, 39, 41, 47, 49, 57, 59, 60, 64, 66, 67, 68, 69, 71, 72, 73, 74, 76, 81, 82, 84, 85, 93, 95, 96, 98, 99, 101, 104, 105, 108, 109, 110, 111, 113, 115, 117, 119, 120, 125, 129, 130, 135, 137, 152, 154, 158, 169, 179, 180, 191, 195, 196, 197, 199, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 219, 220, 223, 226, 227, 228, 229, 232, 233, 236, 239, 240, 241, 250, 251, 256, 258, 259, 261, 265, 268, 286, 293, 297], "7717": 0, "c": [0, 2, 7, 8, 12, 14, 15, 19, 21, 23, 26, 28, 29, 31, 33, 40, 41, 47, 48, 52, 53, 57, 59, 60, 61, 63, 64, 65, 67, 68, 69, 71, 73, 74, 76, 77, 78, 80, 81, 82, 84, 85, 91, 93, 95, 97, 98, 99, 101, 104, 108, 109, 110, 111, 112, 113, 115, 119, 121, 123, 125, 127, 128, 130, 135, 140, 142, 143, 144, 146, 148, 149, 152, 154, 158, 164, 165, 166, 169, 171, 174, 179, 182, 184, 185, 190, 194, 195, 199, 203, 204, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 219, 227, 228, 229, 230, 232, 233, 236, 237, 238, 239, 240, 241, 245, 246, 252, 253, 255, 258, 261, 262, 265, 267, 268, 269, 270, 271, 272, 275, 287, 289, 296, 297, 298], "103": [0, 7, 59], "bibtex": 0, "entri": [0, 11, 33, 45, 50, 58, 60, 66, 69, 80, 93, 97, 99, 100, 101, 107, 128, 130, 135, 137, 150, 157, 209, 213, 215, 216, 230, 240, 259], "latex": [0, 2, 4, 8, 12, 14, 23, 37, 39, 76, 96, 194, 195, 200, 204, 206, 211, 220, 291, 292], "user": [0, 2, 3, 4, 5, 8, 9, 11, 12, 13, 14, 18, 20, 21, 23, 48, 49, 50, 59, 60, 67, 68, 69, 70, 76, 80, 93, 97, 101, 104, 110, 111, 112, 115, 117, 119, 123, 131, 134, 135, 145, 148, 150, 153, 173, 174, 183, 189, 190, 195, 199, 203, 207, 210, 213, 215, 217, 218, 219, 220, 221, 229, 232, 238, 239, 240, 249, 252, 253, 255, 256, 259, 265, 269, 270, 275, 282, 286, 289, 290, 292, 293, 294], "articl": [0, 7, 9, 11, 68, 69, 101, 104, 212, 214, 215, 220, 229, 265, 283, 291], "titl": [0, 4, 5, 35, 206], "author": [0, 4, 7, 108, 171, 215], "aaron": 0, "christoph": [0, 265], "p": [0, 8, 12, 13, 14, 15, 19, 21, 22, 23, 26, 28, 29, 31, 41, 43, 44, 45, 49, 50, 51, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 68, 69, 70, 71, 73, 74, 76, 78, 81, 82, 83, 84, 85, 90, 91, 93, 95, 99, 101, 104, 108, 110, 111, 112, 113, 115, 119, 120, 124, 127, 128, 129, 130, 131, 133, 135, 139, 146, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 164, 183, 185, 190, 196, 199, 201, 203, 205, 206, 208, 209, 210, 213, 214, 216, 217, 220, 222, 223, 227, 228, 230, 232, 233, 236, 238, 239, 240, 241, 245, 246, 258, 265, 268, 269, 270, 271, 272, 274, 293, 297], "mateusz": 0, "v": [0, 8, 9, 17, 26, 28, 32, 37, 41, 49, 58, 64, 67, 68, 69, 70, 71, 72, 76, 82, 93, 95, 97, 99, 104, 108, 112, 124, 125, 127, 130, 134, 137, 149, 150, 152, 153, 157, 158, 170, 185, 190, 194, 195, 197, 199, 201, 203, 204, 206, 213, 214, 215, 216, 220, 230, 232, 233, 236, 238, 240, 251, 258, 265, 268, 269, 270, 271, 272, 274], "ert": 0, "k": [0, 5, 12, 15, 17, 21, 23, 26, 31, 41, 47, 48, 49, 50, 52, 54, 58, 59, 62, 63, 66, 67, 68, 69, 71, 72, 73, 74, 76, 86, 93, 95, 98, 99, 101, 104, 108, 119, 127, 128, 133, 140, 147, 149, 152, 159, 173, 174, 177, 181, 183, 185, 194, 201, 205, 207, 209, 210, 213, 214, 215, 216, 217, 220, 222, 223, 225, 226, 227, 228, 229, 230, 232, 233, 236, 238, 240, 241, 242, 244, 245, 246, 247, 251, 255, 258, 265, 267, 268, 269, 270, 271, 272, 274, 275, 296, 297], "ond": 0, "ej": 0, "sergei": 0, "b": [0, 11, 12, 14, 15, 17, 21, 22, 23, 26, 28, 29, 31, 33, 41, 48, 49, 50, 52, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 78, 79, 80, 81, 82, 83, 84, 91, 93, 95, 97, 98, 99, 100, 101, 104, 108, 110, 111, 112, 113, 115, 117, 119, 124, 125, 127, 128, 129, 130, 133, 135, 139, 140, 149, 150, 152, 154, 157, 162, 164, 166, 168, 173, 174, 177, 182, 183, 184, 185, 194, 195, 197, 199, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 220, 222, 223, 225, 226, 227, 228, 229, 230, 232, 233, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 251, 254, 255, 258, 261, 265, 267, 268, 269, 270, 271, 287, 289, 293, 297, 298], "matthew": 0, "amit": [0, 239], "sergiu": 0, "jason": [0, 220], "sartaj": 0, "thilina": 0, "sean": 0, "brian": [0, 171], "e": [0, 2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 21, 22, 23, 26, 29, 33, 34, 37, 39, 40, 41, 45, 47, 48, 49, 50, 57, 58, 59, 60, 61, 64, 66, 67, 68, 69, 70, 72, 73, 74, 76, 78, 80, 81, 82, 83, 84, 85, 90, 91, 93, 95, 97, 98, 99, 104, 108, 110, 111, 112, 115, 119, 120, 124, 127, 128, 130, 131, 133, 134, 135, 148, 149, 152, 153, 154, 157, 164, 165, 169, 174, 175, 177, 180, 182, 184, 185, 190, 191, 195, 200, 201, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 226, 227, 228, 229, 230, 232, 233, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 265, 269, 272, 274, 275, 286, 287, 291, 292, 297], "richard": [0, 108], "francesco": 0, "harsh": [0, 239], "shivam": 0, "fredrik": 0, "fabian": 0, "j": [0, 5, 12, 15, 26, 41, 45, 47, 49, 50, 54, 58, 59, 60, 64, 66, 67, 69, 70, 72, 73, 76, 90, 93, 95, 97, 99, 101, 104, 108, 117, 120, 127, 133, 151, 152, 157, 164, 165, 182, 185, 190, 194, 201, 205, 207, 209, 211, 213, 214, 215, 216, 217, 219, 220, 222, 228, 230, 232, 233, 236, 238, 239, 240, 241, 242, 244, 245, 246, 247, 252, 258, 265, 267, 268, 269, 270, 271, 272, 274, 275], "andi": [0, 151], "rou": 0, "ka": 0, "n": [0, 4, 5, 9, 12, 14, 15, 19, 21, 23, 28, 31, 32, 40, 45, 47, 49, 50, 51, 52, 54, 56, 57, 58, 59, 60, 62, 64, 66, 67, 68, 69, 70, 72, 73, 74, 76, 78, 81, 82, 83, 84, 85, 90, 91, 93, 95, 97, 98, 99, 101, 104, 105, 108, 110, 111, 112, 115, 117, 119, 121, 122, 124, 127, 128, 130, 131, 133, 134, 135, 137, 138, 139, 140, 142, 143, 144, 147, 148, 149, 150, 152, 153, 154, 156, 158, 159, 161, 165, 170, 171, 174, 179, 181, 182, 183, 185, 186, 188, 190, 192, 194, 195, 197, 199, 200, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 219, 220, 222, 223, 225, 226, 227, 228, 229, 230, 232, 233, 236, 238, 239, 240, 243, 245, 246, 249, 252, 258, 260, 261, 265, 267, 268, 269, 270, 274, 280, 287, 293, 296, 297, 298], "ashutosh": 0, "isuru": 0, "sumith": 0, "robert": [0, 108, 209, 240], "anthoni": 0, "year": [0, 3, 4, 13, 189], "month": 0, "jan": [0, 69], "keyword": [0, 3, 4, 12, 13, 14, 17, 23, 48, 49, 50, 59, 60, 68, 69, 72, 73, 81, 83, 84, 85, 99, 104, 108, 111, 117, 119, 128, 131, 147, 148, 179, 185, 200, 206, 208, 209, 210, 211, 213, 215, 216, 219, 220, 221, 227, 232, 233, 238, 245, 251, 252, 254, 256, 258, 259, 261, 270, 293], "algebra": [0, 5, 14, 15, 17, 21, 27, 29, 34, 37, 45, 50, 51, 59, 68, 69, 72, 74, 86, 89, 90, 91, 93, 95, 98, 99, 103, 105, 108, 109, 110, 133, 145, 152, 153, 205, 208, 209, 211, 212, 213, 214, 216, 217, 220, 222, 230, 233, 235, 236, 239, 276, 277, 280, 282, 283, 288, 289, 291, 293], "system": [0, 1, 2, 5, 7, 8, 9, 13, 14, 15, 17, 18, 19, 22, 23, 26, 27, 28, 29, 33, 35, 42, 44, 59, 68, 69, 70, 74, 93, 96, 97, 98, 99, 104, 109, 110, 111, 115, 116, 118, 119, 123, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 142, 144, 145, 146, 147, 148, 149, 150, 152, 163, 164, 179, 182, 183, 185, 188, 192, 195, 199, 200, 201, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 219, 220, 228, 229, 235, 239, 240, 251, 252, 265, 267, 268, 271, 273, 275, 280, 282, 289, 291, 293, 297, 298], "abstract": [0, 13, 47, 48, 57, 68, 70, 74, 76, 81, 86, 101, 127, 131, 134, 135, 169, 171, 180, 183, 184, 185, 207, 215, 239, 240, 242, 246, 253, 274], "an": [0, 2, 3, 4, 5, 7, 8, 9, 10, 12, 14, 15, 17, 18, 19, 21, 22, 23, 25, 26, 28, 29, 30, 31, 33, 36, 37, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 57, 58, 59, 60, 61, 62, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 115, 117, 119, 120, 121, 123, 124, 127, 128, 129, 130, 131, 133, 134, 137, 139, 145, 147, 149, 150, 152, 153, 156, 157, 158, 162, 164, 165, 166, 168, 169, 170, 171, 173, 174, 175, 178, 179, 180, 182, 183, 185, 186, 187, 189, 194, 195, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 232, 233, 235, 236, 237, 238, 240, 241, 244, 245, 246, 247, 249, 251, 252, 253, 254, 255, 256, 258, 259, 261, 262, 265, 267, 269, 270, 272, 273, 274, 275, 286, 287, 288, 289, 290, 291, 293, 296, 297, 298], "open": [0, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 32, 33, 34, 36, 39, 47, 68, 70, 74, 95, 98, 119, 135, 138, 152, 220, 228, 235, 239, 240, 262, 291, 293], "sourc": [0, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 23, 33, 34, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 87, 89, 90, 91, 93, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 113, 115, 117, 119, 120, 121, 122, 124, 125, 127, 128, 129, 130, 131, 133, 134, 135, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 191, 192, 193, 195, 196, 197, 199, 200, 201, 205, 206, 207, 209, 210, 211, 213, 215, 216, 217, 218, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 267, 268, 272, 284, 291], "written": [0, 2, 4, 5, 11, 12, 14, 21, 23, 45, 49, 56, 59, 60, 64, 68, 73, 76, 80, 86, 91, 93, 97, 98, 107, 108, 139, 145, 152, 185, 201, 202, 203, 204, 207, 208, 216, 220, 223, 227, 230, 233, 236, 253, 272, 274, 290, 291, 292, 297], "pure": [0, 2, 14, 32, 34, 41, 69, 74, 95, 98, 101, 119, 149, 190, 209, 210, 211, 213, 216, 220, 240, 258], "It": [0, 2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 19, 21, 22, 23, 28, 31, 32, 34, 35, 36, 39, 41, 42, 43, 44, 47, 48, 49, 56, 59, 60, 62, 63, 64, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 80, 84, 85, 91, 93, 95, 97, 98, 104, 108, 109, 110, 111, 112, 113, 115, 117, 119, 121, 123, 124, 125, 127, 128, 131, 133, 134, 135, 137, 143, 145, 146, 147, 148, 150, 152, 154, 158, 159, 169, 174, 175, 180, 181, 182, 183, 184, 185, 187, 190, 193, 195, 199, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 215, 216, 217, 220, 223, 227, 228, 229, 230, 232, 233, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 251, 252, 253, 254, 255, 256, 259, 265, 268, 269, 270, 272, 274, 275, 286, 287, 289, 290, 291, 292, 293, 295, 296, 297], "built": [0, 2, 4, 5, 8, 14, 15, 18, 42, 44, 50, 68, 74, 95, 104, 135, 152, 208, 211, 220, 221, 225, 236, 239, 240, 246, 255, 258, 259, 291, 292, 296], "focu": [0, 13, 21, 78, 238, 291], "extens": [0, 2, 4, 5, 7, 12, 21, 23, 59, 68, 73, 74, 80, 84, 95, 104, 130, 131, 152, 208, 210, 211, 213, 214, 215, 216, 220, 230, 232, 236, 238, 239, 252, 253, 262, 290, 297], "eas": [0, 135, 204, 206, 220, 223], "through": [0, 3, 4, 7, 8, 13, 14, 15, 21, 23, 28, 32, 33, 35, 37, 39, 47, 49, 59, 60, 62, 67, 68, 69, 72, 73, 76, 78, 79, 80, 81, 82, 84, 93, 97, 98, 104, 108, 111, 112, 113, 117, 124, 128, 131, 134, 135, 137, 145, 150, 156, 157, 195, 207, 213, 215, 220, 226, 230, 232, 236, 238, 239, 240, 241, 252, 258, 265, 267, 272, 275, 288, 289, 290, 295], "both": [0, 2, 3, 4, 5, 7, 11, 12, 13, 14, 15, 18, 21, 22, 23, 28, 30, 31, 32, 35, 40, 41, 47, 48, 49, 60, 63, 64, 66, 67, 68, 69, 73, 74, 76, 83, 92, 93, 95, 98, 99, 104, 108, 110, 111, 112, 119, 124, 127, 128, 130, 131, 133, 137, 139, 140, 146, 149, 157, 158, 169, 175, 182, 185, 189, 190, 195, 199, 203, 204, 206, 207, 208, 210, 211, 213, 215, 216, 218, 219, 220, 222, 227, 228, 229, 230, 232, 233, 236, 238, 239, 241, 245, 251, 253, 258, 259, 265, 267, 287, 290, 291, 292, 297, 298], "interact": [0, 11, 14, 17, 32, 40, 68, 82, 95, 102, 104, 131, 152, 182, 200, 204, 210, 211, 232, 240, 256, 263, 276, 284, 289, 291, 292, 296, 297], "programmat": [0, 14, 17, 18, 36, 37, 239, 270], "applic": [0, 5, 13, 29, 32, 50, 51, 52, 58, 59, 60, 61, 68, 69, 74, 95, 99, 104, 108, 111, 113, 115, 127, 128, 133, 135, 145, 149, 151, 152, 169, 170, 195, 199, 203, 208, 209, 213, 214, 215, 216, 220, 222, 227, 233, 236, 239, 253, 258, 265, 272, 273, 280, 291], "These": [0, 2, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 37, 38, 40, 48, 49, 59, 67, 68, 69, 70, 76, 93, 95, 98, 104, 108, 110, 112, 119, 127, 128, 129, 131, 134, 137, 139, 143, 149, 152, 175, 180, 181, 189, 195, 196, 201, 203, 204, 207, 208, 209, 210, 211, 213, 216, 220, 230, 233, 236, 237, 239, 240, 242, 247, 251, 252, 253, 258, 272, 287, 290, 293, 296, 297], "characterist": [0, 70, 86, 104, 203, 209, 211, 213, 214, 236, 238, 293], "have": [0, 3, 4, 5, 7, 8, 9, 10, 11, 12, 14, 15, 18, 19, 21, 22, 23, 25, 26, 28, 30, 31, 33, 34, 35, 37, 39, 41, 43, 44, 45, 47, 48, 49, 50, 51, 52, 58, 59, 60, 61, 64, 66, 67, 68, 69, 70, 72, 73, 74, 76, 78, 79, 83, 84, 86, 91, 92, 93, 95, 97, 98, 99, 100, 101, 104, 107, 108, 109, 110, 111, 112, 117, 119, 120, 122, 123, 127, 128, 129, 130, 133, 135, 136, 137, 143, 145, 149, 150, 152, 169, 171, 174, 178, 180, 182, 183, 184, 185, 187, 188, 190, 193, 194, 195, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 220, 222, 223, 225, 227, 228, 229, 230, 232, 233, 236, 238, 239, 240, 241, 242, 244, 246, 247, 249, 250, 251, 253, 254, 255, 258, 259, 261, 265, 267, 269, 270, 271, 272, 275, 286, 287, 289, 290, 291, 292, 293, 296, 297, 298], "led": 0, "becom": [0, 3, 4, 5, 11, 12, 13, 14, 15, 19, 21, 59, 64, 67, 68, 69, 72, 91, 96, 104, 110, 133, 200, 203, 207, 208, 210, 217, 220, 223, 229, 236, 239, 240, 246, 259, 261, 268, 270, 297], "popular": [0, 2, 69, 109, 152, 291], "librari": [0, 2, 3, 4, 12, 13, 14, 21, 23, 34, 38, 39, 49, 68, 69, 73, 93, 95, 96, 104, 109, 123, 133, 135, 152, 189, 206, 210, 211, 240, 251, 252, 253, 258, 259, 286, 289, 290, 291], "scientif": [0, 14, 39, 68, 152], "ecosystem": 0, "thi": [0, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 26, 28, 29, 30, 31, 32, 33, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 108, 109, 110, 111, 112, 113, 115, 116, 117, 119, 120, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 156, 157, 158, 159, 160, 162, 164, 165, 166, 168, 169, 171, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 194, 195, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 244, 245, 246, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 263, 265, 267, 268, 269, 270, 271, 272, 273, 274, 276, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298], "paper": [0, 4, 25, 108, 137, 204, 215, 216, 229, 230, 233, 236], "present": [0, 2, 5, 13, 14, 15, 19, 25, 47, 48, 52, 55, 59, 60, 62, 66, 68, 71, 95, 104, 108, 111, 115, 117, 119, 128, 133, 137, 185, 187, 195, 197, 200, 201, 206, 207, 213, 214, 215, 219, 220, 233, 239, 253, 259, 262, 268, 269, 270, 274, 277, 298], "architectur": [0, 12, 152, 210, 251], "descript": [0, 3, 4, 5, 13, 29, 38, 48, 50, 58, 76, 95, 108, 157, 175, 182, 193, 203, 204, 205, 220, 244, 251, 253, 255, 256, 276, 294], "its": [0, 2, 3, 4, 5, 7, 12, 13, 14, 15, 17, 19, 21, 22, 23, 28, 30, 31, 32, 33, 34, 35, 37, 41, 43, 44, 45, 48, 49, 50, 52, 56, 58, 59, 60, 67, 68, 69, 70, 73, 74, 76, 78, 80, 84, 86, 93, 95, 96, 98, 99, 101, 104, 108, 110, 111, 112, 113, 115, 119, 123, 124, 127, 128, 130, 131, 133, 134, 135, 137, 138, 139, 145, 146, 149, 150, 152, 153, 158, 164, 170, 171, 173, 174, 179, 180, 183, 185, 189, 190, 192, 195, 196, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 226, 227, 228, 232, 235, 236, 238, 239, 240, 242, 244, 245, 246, 251, 254, 255, 258, 259, 262, 265, 268, 269, 270, 272, 275, 291, 292, 293, 296, 297], "featur": [0, 2, 3, 5, 7, 11, 12, 13, 15, 16, 23, 38, 39, 68, 70, 72, 110, 135, 145, 152, 202, 220, 236, 240, 249, 253, 256, 273, 282, 285, 290, 291, 295, 297], "discuss": [0, 3, 4, 5, 7, 11, 12, 13, 15, 16, 17, 19, 21, 22, 23, 38, 50, 59, 69, 76, 108, 123, 128, 135, 145, 149, 150, 194, 202, 203, 204, 210, 246, 255, 276, 286, 288, 289, 291, 292, 294, 296, 297], "select": [0, 8, 16, 17, 33, 38, 49, 52, 59, 60, 67, 68, 69, 77, 82, 96, 98, 99, 108, 110, 125, 128, 190, 200, 210, 211, 213, 214, 216, 220, 229, 232, 238], "submodul": [0, 2, 3, 4, 11, 12, 14, 49, 123, 207, 211, 213, 215], "The": [0, 2, 4, 5, 6, 7, 8, 9, 11, 12, 14, 15, 17, 19, 20, 22, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 47, 48, 49, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 119, 120, 121, 123, 124, 125, 127, 128, 129, 130, 131, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 152, 153, 154, 156, 157, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 194, 195, 196, 197, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 249, 251, 252, 253, 254, 255, 256, 258, 259, 261, 262, 265, 267, 268, 269, 270, 273, 274, 275, 282, 286, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298], "supplementari": 0, "materi": [0, 25, 111, 156, 295], "provid": [0, 2, 3, 4, 5, 7, 8, 9, 11, 13, 16, 17, 19, 20, 21, 22, 23, 26, 29, 30, 34, 38, 41, 47, 48, 49, 50, 51, 57, 58, 59, 60, 66, 67, 68, 70, 72, 76, 77, 79, 84, 87, 90, 91, 95, 96, 98, 99, 101, 104, 105, 107, 108, 109, 110, 112, 115, 117, 123, 124, 127, 128, 130, 133, 137, 138, 139, 140, 145, 146, 147, 148, 149, 150, 152, 153, 158, 159, 179, 187, 188, 189, 193, 195, 196, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 215, 216, 217, 218, 219, 220, 223, 225, 228, 229, 230, 232, 236, 237, 238, 239, 240, 241, 245, 246, 251, 252, 253, 255, 256, 258, 259, 261, 265, 268, 269, 270, 272, 273, 275, 287, 291, 292, 293, 297], "addit": [0, 2, 3, 5, 9, 12, 13, 14, 15, 17, 19, 39, 41, 49, 58, 59, 60, 67, 68, 74, 76, 80, 86, 88, 92, 93, 95, 96, 98, 101, 104, 108, 110, 116, 117, 119, 123, 124, 128, 149, 153, 171, 183, 184, 187, 194, 200, 203, 204, 205, 206, 207, 208, 209, 210, 213, 215, 216, 220, 226, 229, 230, 232, 233, 236, 237, 238, 239, 240, 251, 252, 253, 255, 256, 258, 259, 261, 269, 289, 291, 292, 293, 296, 297], "exampl": [0, 1, 2, 3, 5, 7, 12, 13, 14, 15, 17, 18, 19, 21, 22, 27, 29, 32, 33, 35, 37, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 90, 91, 93, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 109, 110, 111, 113, 115, 117, 119, 121, 122, 124, 125, 127, 128, 130, 131, 133, 134, 135, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 150, 152, 154, 156, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 177, 179, 180, 182, 183, 184, 185, 186, 187, 191, 192, 194, 195, 196, 197, 199, 200, 201, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 221, 222, 223, 225, 226, 228, 229, 232, 233, 235, 236, 237, 238, 239, 244, 246, 247, 249, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 265, 267, 268, 270, 272, 273, 274, 275, 280, 282, 283, 286, 287, 288, 289, 290, 292, 293, 295, 296, 298], "further": [0, 2, 11, 21, 23, 28, 44, 48, 69, 74, 76, 80, 93, 95, 100, 101, 104, 110, 111, 116, 117, 124, 127, 128, 150, 157, 203, 205, 206, 207, 209, 213, 215, 216, 229, 230, 232, 236, 240, 246, 290, 291], "outlin": [0, 2, 3, 11, 21, 23, 66, 95, 207, 236], "detail": [0, 2, 3, 4, 5, 6, 9, 11, 12, 13, 14, 16, 18, 21, 23, 38, 48, 59, 68, 70, 73, 75, 76, 93, 94, 95, 96, 104, 108, 117, 127, 128, 135, 150, 152, 157, 175, 179, 195, 197, 205, 206, 207, 209, 213, 215, 222, 227, 232, 233, 234, 236, 237, 240, 245, 246, 251, 254, 256, 259, 270, 271, 272, 273, 276, 280, 287, 289, 293, 294, 296], "volum": [0, 4, 49, 67, 76, 93, 95, 205, 214, 230, 233, 236, 255, 265], "page": [0, 2, 3, 4, 5, 7, 8, 11, 12, 13, 14, 15, 21, 22, 28, 29, 31, 32, 36, 38, 49, 50, 51, 67, 73, 93, 108, 109, 127, 128, 152, 190, 206, 209, 210, 211, 214, 220, 230, 233, 256, 274, 297], "journal": [0, 4, 7, 41, 67, 73, 120, 214, 232, 255, 258], "issn": 0, "2376": 0, "5992": 0, "url": [0, 69, 256], "bsd": [0, 2, 25, 291], "licens": [0, 2, 25, 291], "soyou": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 45, 47, 49, 50, 51, 59, 60, 67, 68, 69, 70, 72, 74, 75, 76, 80, 82, 84, 86, 87, 92, 93, 95, 96, 98, 99, 101, 102, 104, 105, 108, 109, 110, 119, 121, 122, 123, 127, 128, 129, 130, 133, 135, 136, 146, 147, 149, 150, 152, 174, 179, 180, 183, 185, 189, 194, 195, 197, 201, 203, 204, 206, 207, 208, 209, 210, 211, 213, 215, 216, 217, 220, 221, 223, 227, 228, 232, 233, 236, 237, 238, 239, 240, 241, 244, 245, 246, 249, 251, 252, 253, 254, 256, 258, 259, 262, 269, 270, 271, 272, 285, 286, 287, 289, 291, 292, 293, 294, 295, 296, 297, 298], "free": [0, 9, 11, 12, 13, 14, 28, 33, 34, 39, 47, 48, 49, 58, 59, 64, 68, 80, 95, 99, 101, 104, 108, 111, 112, 117, 120, 127, 130, 145, 154, 174, 192, 195, 202, 206, 207, 209, 211, 213, 215, 216, 220, 222, 228, 230, 232, 233, 236, 238, 239, 246, 258, 291], "howev": [0, 2, 3, 4, 5, 8, 11, 12, 13, 14, 15, 17, 19, 21, 22, 23, 28, 31, 32, 35, 42, 44, 49, 51, 59, 60, 64, 67, 68, 69, 70, 73, 74, 76, 78, 93, 95, 98, 99, 104, 108, 109, 110, 111, 115, 127, 128, 130, 131, 133, 134, 135, 149, 153, 185, 204, 205, 206, 207, 208, 209, 210, 211, 213, 215, 216, 217, 219, 220, 221, 227, 228, 229, 230, 232, 236, 237, 238, 239, 251, 252, 259, 269, 270, 274, 286, 289, 291, 293, 297, 298], "like": [0, 1, 2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 18, 21, 22, 23, 25, 33, 35, 36, 37, 38, 39, 49, 50, 51, 53, 59, 60, 67, 68, 69, 72, 73, 74, 76, 78, 88, 91, 95, 96, 98, 99, 101, 102, 103, 104, 108, 109, 110, 115, 119, 123, 127, 131, 134, 135, 137, 146, 149, 152, 153, 167, 169, 179, 180, 183, 184, 185, 189, 190, 194, 195, 199, 201, 203, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 218, 219, 220, 223, 227, 228, 229, 230, 232, 233, 236, 237, 238, 239, 240, 241, 242, 244, 246, 247, 249, 251, 252, 253, 254, 258, 259, 261, 262, 269, 270, 272, 274, 286, 287, 289, 290, 291, 292, 293, 297], "academ": [0, 25, 48, 52, 214], "commerci": [0, 291], "creat": [0, 2, 4, 5, 7, 8, 12, 14, 21, 22, 30, 31, 32, 33, 35, 36, 37, 41, 43, 48, 49, 50, 57, 59, 60, 68, 69, 70, 72, 74, 75, 76, 78, 80, 81, 83, 84, 89, 91, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 108, 109, 110, 111, 115, 119, 124, 127, 128, 130, 131, 133, 134, 135, 138, 139, 140, 142, 144, 146, 148, 149, 150, 152, 153, 162, 164, 166, 170, 173, 174, 175, 179, 180, 182, 183, 185, 188, 191, 194, 195, 197, 199, 203, 204, 206, 207, 209, 210, 211, 213, 215, 216, 217, 220, 227, 232, 236, 239, 240, 241, 245, 246, 251, 252, 253, 255, 256, 258, 259, 265, 270, 272, 287, 289, 292, 293, 296, 297, 298], "fork": [0, 5, 13, 137], "deriv": [0, 4, 11, 12, 13, 14, 20, 23, 32, 47, 48, 49, 52, 58, 59, 68, 70, 74, 75, 76, 78, 85, 90, 91, 93, 95, 96, 98, 101, 104, 115, 119, 123, 125, 127, 128, 129, 130, 131, 133, 137, 139, 140, 142, 145, 147, 148, 149, 174, 183, 187, 190, 191, 194, 195, 197, 199, 200, 201, 203, 206, 207, 208, 209, 211, 213, 215, 216, 217, 220, 222, 230, 232, 236, 237, 238, 242, 247, 253, 265, 268, 269, 288, 291, 298], "long": [0, 4, 5, 11, 12, 28, 37, 49, 60, 67, 68, 69, 71, 81, 93, 95, 96, 98, 104, 108, 111, 112, 137, 150, 200, 216, 217, 220, 229, 230, 238, 240, 252, 259, 261, 268, 289, 292], "copi": [0, 9, 11, 12, 13, 15, 21, 25, 50, 60, 61, 68, 84, 104, 108, 109, 209, 211, 213, 215, 219, 220, 227, 238, 251, 258, 261, 296], "statement": [0, 4, 13, 21, 22, 23, 39, 48, 49, 68, 76, 93, 98, 101, 135, 164, 220, 240, 249, 253, 258], "redistribut": [0, 216], "see": [0, 2, 3, 5, 7, 8, 9, 11, 12, 13, 14, 15, 18, 19, 21, 22, 23, 24, 25, 42, 43, 44, 45, 47, 48, 49, 51, 54, 56, 59, 60, 61, 64, 67, 69, 70, 73, 74, 75, 76, 80, 84, 85, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 104, 105, 108, 109, 110, 117, 123, 127, 128, 129, 133, 141, 143, 147, 149, 154, 157, 160, 161, 170, 174, 175, 179, 180, 181, 182, 184, 185, 188, 190, 195, 200, 203, 205, 206, 207, 208, 209, 210, 211, 213, 215, 216, 217, 219, 220, 222, 223, 226, 227, 228, 229, 230, 232, 233, 236, 237, 238, 239, 240, 245, 246, 249, 251, 252, 253, 254, 255, 256, 259, 260, 265, 267, 275, 286, 287, 289, 291, 292, 293, 295, 296, 297, 298], "file": [0, 2, 3, 4, 5, 7, 8, 9, 12, 14, 15, 25, 49, 104, 135, 152, 174, 206, 220, 227, 230, 232, 240, 249, 251, 252, 253, 259, 262], "That": [0, 3, 5, 11, 12, 14, 15, 21, 22, 23, 68, 69, 74, 98, 104, 145, 182, 187, 193, 203, 204, 207, 208, 210, 211, 213, 215, 226, 227, 236, 240, 252, 253, 259, 286, 289, 292, 297], "said": [0, 3, 14, 41, 45, 49, 54, 108, 190, 201, 203, 204, 208, 236, 239, 240, 265, 272], "although": [0, 2, 3, 4, 5, 11, 12, 14, 15, 18, 19, 21, 23, 31, 60, 68, 69, 74, 80, 92, 93, 96, 98, 99, 101, 104, 108, 111, 123, 137, 152, 207, 209, 210, 211, 213, 215, 216, 228, 229, 232, 233, 238, 252, 258, 259, 289, 292, 297], "requir": [0, 2, 4, 5, 7, 9, 11, 12, 13, 14, 15, 23, 25, 33, 37, 39, 49, 59, 68, 69, 71, 72, 76, 78, 79, 81, 82, 85, 87, 98, 104, 107, 108, 109, 110, 111, 117, 123, 124, 127, 128, 130, 131, 133, 135, 137, 139, 146, 150, 159, 182, 194, 195, 197, 205, 206, 207, 209, 210, 211, 213, 215, 217, 220, 223, 229, 230, 233, 236, 238, 239, 240, 244, 251, 252, 253, 254, 256, 258, 259, 268, 269, 270, 293, 295], "conveni": [0, 8, 13, 14, 15, 30, 32, 37, 40, 47, 49, 60, 68, 69, 73, 76, 95, 98, 110, 135, 150, 152, 197, 203, 204, 206, 207, 208, 209, 210, 211, 215, 218, 227, 228, 232, 238, 244, 245, 252, 254, 255, 259, 272, 287, 289], "pleas": [0, 3, 4, 5, 7, 12, 13, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 45, 47, 68, 76, 80, 93, 108, 123, 128, 135, 145, 149, 150, 157, 158, 179, 194, 204, 205, 206, 207, 213, 214, 228, 232, 233, 238, 239, 259, 265, 270, 294, 298], "when": [0, 2, 4, 5, 7, 8, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 26, 28, 32, 34, 35, 36, 39, 41, 42, 43, 44, 45, 47, 48, 49, 50, 52, 59, 60, 61, 66, 67, 68, 69, 70, 72, 73, 74, 76, 77, 78, 80, 81, 82, 83, 84, 85, 92, 95, 96, 98, 99, 100, 104, 108, 109, 110, 115, 117, 119, 120, 123, 127, 130, 131, 133, 134, 135, 137, 143, 145, 146, 147, 148, 149, 150, 153, 158, 159, 164, 169, 170, 174, 177, 179, 187, 188, 189, 194, 200, 203, 204, 206, 207, 208, 209, 210, 211, 213, 215, 216, 217, 219, 220, 221, 222, 226, 227, 228, 229, 230, 232, 233, 236, 237, 238, 239, 240, 242, 244, 245, 249, 251, 252, 253, 254, 256, 258, 259, 261, 262, 264, 269, 287, 289, 291, 292, 297, 298], "your": [0, 2, 3, 4, 5, 8, 12, 13, 15, 23, 25, 28, 29, 30, 31, 33, 35, 36, 37, 39, 43, 68, 69, 95, 96, 104, 109, 110, 119, 123, 127, 147, 149, 204, 206, 220, 227, 232, 236, 239, 240, 258, 259, 287, 291, 293, 294, 296, 297], "work": [0, 2, 3, 4, 8, 9, 11, 12, 13, 14, 15, 18, 19, 21, 22, 23, 28, 34, 39, 42, 44, 47, 48, 49, 51, 59, 60, 61, 68, 69, 72, 76, 93, 95, 97, 98, 99, 101, 104, 105, 108, 110, 123, 127, 134, 135, 137, 146, 150, 152, 165, 169, 174, 178, 179, 180, 181, 184, 187, 197, 204, 205, 206, 207, 208, 209, 210, 211, 213, 215, 216, 220, 227, 228, 229, 230, 232, 233, 236, 238, 239, 240, 246, 251, 252, 253, 255, 258, 259, 260, 261, 269, 270, 289, 290, 291, 292, 293, 296, 297], "also": [0, 2, 3, 5, 7, 8, 9, 11, 12, 13, 14, 15, 17, 19, 21, 22, 23, 25, 26, 28, 29, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 47, 48, 49, 51, 57, 59, 60, 67, 69, 70, 72, 73, 74, 75, 76, 80, 84, 86, 88, 90, 91, 93, 95, 97, 98, 99, 102, 104, 105, 108, 109, 110, 111, 112, 115, 116, 117, 119, 123, 124, 125, 127, 128, 130, 131, 133, 134, 135, 137, 138, 139, 140, 143, 146, 147, 148, 149, 150, 152, 153, 154, 158, 168, 169, 171, 175, 179, 184, 185, 188, 189, 190, 194, 195, 197, 199, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 215, 216, 217, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 232, 233, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 249, 251, 252, 253, 254, 255, 256, 259, 261, 265, 268, 269, 270, 271, 272, 274, 275, 286, 287, 289, 291, 292, 293, 296, 297, 298], "consid": [0, 3, 5, 12, 13, 14, 15, 18, 21, 22, 23, 26, 37, 41, 45, 48, 49, 57, 60, 63, 67, 68, 69, 71, 72, 73, 74, 76, 78, 80, 84, 92, 93, 95, 96, 97, 98, 99, 101, 104, 108, 119, 123, 124, 130, 136, 147, 153, 175, 182, 185, 189, 190, 196, 200, 201, 203, 206, 207, 208, 209, 210, 211, 213, 215, 216, 217, 219, 220, 223, 227, 232, 233, 236, 237, 238, 239, 240, 251, 253, 258, 268, 270, 272, 274, 275, 289, 293, 297], "contribut": [0, 2, 3, 4, 5, 9, 10, 12, 39, 84, 108, 128, 140, 143, 210, 213, 215, 236, 275, 294], "all": [0, 2, 3, 4, 5, 8, 9, 11, 12, 13, 14, 15, 17, 19, 21, 22, 23, 25, 33, 37, 38, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 56, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 81, 83, 84, 85, 93, 95, 97, 98, 99, 100, 101, 104, 107, 108, 109, 110, 111, 112, 115, 117, 119, 120, 124, 125, 127, 128, 129, 130, 131, 133, 134, 135, 137, 138, 140, 145, 147, 149, 152, 153, 159, 164, 165, 169, 179, 181, 182, 183, 185, 187, 188, 189, 190, 192, 193, 200, 201, 204, 205, 206, 207, 208, 209, 210, 211, 213, 215, 216, 217, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 232, 233, 235, 236, 237, 238, 239, 240, 241, 244, 246, 247, 249, 251, 252, 253, 254, 256, 258, 259, 261, 265, 267, 269, 271, 272, 273, 274, 276, 286, 287, 289, 291, 292, 293, 296, 297, 298], "chang": [0, 4, 5, 7, 8, 12, 14, 15, 21, 39, 48, 49, 50, 59, 60, 64, 67, 68, 69, 72, 73, 74, 76, 82, 83, 93, 95, 98, 104, 108, 110, 111, 113, 115, 119, 127, 130, 133, 135, 137, 142, 159, 170, 180, 190, 191, 194, 201, 203, 204, 205, 206, 207, 208, 209, 213, 216, 217, 220, 227, 228, 229, 230, 232, 235, 236, 238, 239, 240, 241, 251, 258, 259, 270, 272, 286, 289, 292, 296], "back": [0, 23, 31, 32, 34, 48, 49, 64, 67, 68, 69, 74, 76, 83, 84, 90, 92, 93, 95, 96, 99, 108, 109, 119, 179, 200, 203, 206, 209, 210, 215, 216, 218, 220, 230, 236, 238, 241, 242], "we": [0, 2, 3, 4, 5, 7, 9, 11, 12, 13, 15, 19, 21, 22, 23, 25, 28, 29, 30, 31, 33, 35, 36, 37, 42, 43, 44, 47, 48, 49, 50, 51, 52, 57, 58, 59, 60, 61, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 76, 81, 86, 91, 92, 93, 95, 96, 97, 98, 99, 104, 105, 107, 108, 119, 122, 123, 124, 125, 127, 128, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 157, 160, 168, 171, 174, 175, 177, 178, 179, 180, 181, 182, 184, 185, 187, 188, 190, 194, 195, 197, 199, 201, 203, 204, 206, 207, 208, 209, 210, 211, 213, 215, 216, 217, 219, 220, 227, 228, 230, 232, 233, 235, 236, 237, 238, 240, 242, 244, 246, 251, 252, 253, 255, 256, 258, 259, 265, 269, 270, 271, 272, 274, 275, 286, 287, 289, 291, 292, 293, 296, 297, 298], "can": [0, 2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 29, 33, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 57, 58, 59, 60, 61, 63, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 104, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 119, 121, 123, 124, 125, 127, 128, 129, 130, 131, 133, 134, 135, 138, 139, 140, 143, 145, 146, 147, 148, 149, 150, 152, 153, 157, 158, 159, 164, 166, 169, 173, 174, 175, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 194, 195, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 232, 233, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 249, 251, 252, 253, 255, 256, 258, 259, 261, 268, 269, 270, 271, 272, 274, 275, 286, 287, 289, 291, 292, 293, 295, 296, 297, 298], "incorpor": [0, 2, 19, 208, 232], "u": [0, 8, 9, 15, 19, 21, 22, 23, 26, 32, 41, 47, 48, 49, 59, 64, 67, 68, 69, 71, 82, 85, 90, 93, 95, 101, 104, 108, 124, 127, 128, 129, 133, 135, 137, 139, 142, 145, 146, 147, 149, 152, 153, 157, 158, 169, 174, 180, 190, 194, 195, 199, 201, 203, 205, 206, 207, 208, 209, 213, 215, 216, 219, 220, 227, 230, 232, 233, 236, 237, 238, 239, 240, 245, 259, 272, 289, 291, 292, 293], "benefit": [0, 2, 23, 30, 49, 123, 149, 200, 209], "end": [0, 2, 4, 7, 11, 12, 13, 15, 19, 21, 22, 23, 26, 29, 33, 35, 41, 47, 48, 49, 58, 59, 64, 66, 67, 68, 69, 73, 74, 76, 78, 80, 84, 93, 96, 98, 99, 101, 104, 108, 110, 111, 112, 115, 131, 133, 134, 137, 139, 142, 147, 148, 149, 190, 194, 195, 200, 201, 204, 205, 209, 213, 220, 223, 226, 228, 229, 233, 236, 237, 238, 239, 240, 241, 242, 251, 253, 254, 256, 258, 261, 272, 287, 291, 293, 297], "develop": [0, 3, 4, 5, 6, 10, 14, 19, 21, 23, 47, 50, 66, 110, 113, 152, 189, 206, 207, 210, 213, 238, 239, 291, 294], "team": [0, 3, 11], "member": [0, 4, 13, 21, 28, 48, 57, 59, 69, 91, 113, 115, 207, 228, 245], "list": [0, 2, 3, 4, 5, 9, 11, 12, 16, 21, 31, 32, 33, 34, 35, 36, 37, 39, 41, 44, 47, 48, 49, 50, 51, 52, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 90, 91, 93, 95, 96, 97, 98, 99, 101, 104, 107, 108, 109, 110, 111, 119, 124, 127, 128, 131, 133, 137, 139, 142, 146, 147, 148, 152, 153, 158, 169, 171, 174, 175, 179, 180, 182, 183, 185, 187, 195, 199, 204, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 226, 228, 229, 230, 232, 233, 236, 237, 238, 239, 240, 241, 244, 245, 246, 249, 251, 252, 253, 254, 255, 256, 258, 259, 261, 286, 290, 291, 293, 296, 297, 298], "github": [0, 2, 3, 5, 7, 8, 10, 11, 13, 32, 36, 39, 47, 68, 72, 84, 95, 104, 189, 228, 239, 293], "found": [0, 2, 3, 4, 5, 8, 11, 12, 21, 22, 28, 32, 47, 50, 51, 59, 60, 62, 64, 66, 68, 69, 70, 78, 79, 84, 93, 95, 104, 108, 119, 125, 127, 128, 129, 149, 152, 189, 203, 207, 208, 209, 210, 215, 216, 217, 220, 222, 223, 226, 227, 230, 233, 236, 237, 238, 239, 240, 244, 258, 259, 261, 262, 296], "zotero": 0, "start": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 23, 34, 38, 39, 48, 49, 51, 52, 57, 58, 59, 60, 64, 67, 68, 69, 70, 76, 98, 99, 101, 104, 107, 108, 109, 111, 112, 115, 135, 137, 147, 148, 180, 181, 184, 188, 203, 204, 206, 210, 213, 215, 216, 220, 223, 226, 228, 229, 230, 233, 236, 238, 239, 240, 241, 244, 251, 252, 258, 260, 261, 271, 285, 286, 289, 291], "sympi": [1, 2, 3, 5, 6, 8, 10, 11, 12, 14, 16, 17, 21, 22, 23, 24, 26, 27, 28, 29, 31, 33, 34, 35, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 270, 271, 273, 274, 275, 276, 280, 282, 283, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298], "mode": [1, 8, 28, 68, 96, 110, 157, 180, 200, 216, 220, 251, 262], "set": [1, 2, 3, 4, 5, 7, 8, 11, 12, 14, 15, 17, 19, 20, 21, 22, 28, 30, 31, 37, 40, 41, 43, 47, 48, 49, 50, 51, 56, 57, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 81, 83, 85, 86, 87, 90, 91, 93, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 108, 110, 111, 112, 117, 119, 123, 127, 128, 129, 133, 134, 135, 137, 138, 139, 144, 146, 147, 148, 149, 152, 153, 169, 175, 180, 185, 187, 190, 192, 193, 194, 195, 197, 199, 200, 201, 203, 206, 207, 208, 209, 210, 213, 215, 216, 219, 220, 221, 222, 227, 229, 230, 232, 233, 235, 236, 237, 238, 240, 244, 245, 246, 249, 251, 252, 253, 254, 258, 259, 265, 268, 270, 276, 279, 286, 288, 297], "sympy_debug": [1, 95, 261], "variabl": [1, 2, 4, 5, 11, 12, 13, 14, 17, 19, 22, 23, 26, 28, 29, 31, 32, 34, 36, 40, 41, 42, 44, 45, 47, 49, 50, 63, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 85, 87, 93, 95, 96, 98, 99, 104, 110, 111, 112, 115, 117, 119, 129, 133, 135, 142, 144, 152, 153, 159, 174, 179, 183, 185, 188, 194, 195, 197, 201, 208, 209, 210, 211, 213, 215, 216, 217, 220, 221, 226, 227, 232, 233, 235, 236, 237, 238, 239, 247, 251, 253, 254, 255, 259, 265, 268, 269, 271, 272, 274, 287, 289, 291, 293, 298], "For": [1, 2, 3, 4, 5, 8, 9, 11, 12, 13, 14, 15, 18, 21, 22, 23, 24, 28, 30, 31, 32, 33, 34, 35, 36, 37, 39, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 59, 60, 61, 64, 67, 68, 69, 70, 71, 72, 73, 74, 76, 80, 82, 83, 86, 89, 91, 92, 93, 97, 98, 99, 104, 108, 109, 110, 111, 112, 113, 115, 119, 121, 125, 127, 128, 129, 133, 135, 139, 145, 146, 147, 148, 149, 150, 152, 154, 168, 169, 174, 178, 180, 182, 183, 184, 185, 187, 189, 190, 191, 194, 195, 199, 200, 201, 203, 204, 206, 207, 208, 209, 210, 211, 213, 215, 216, 217, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 232, 233, 235, 236, 238, 239, 240, 241, 244, 245, 246, 247, 251, 252, 253, 255, 256, 258, 259, 262, 263, 265, 267, 270, 272, 274, 275, 286, 287, 289, 292, 293, 297, 298], "instanc": [1, 3, 4, 5, 12, 13, 14, 18, 21, 22, 23, 42, 43, 44, 46, 48, 49, 51, 59, 61, 63, 68, 70, 72, 73, 74, 76, 81, 84, 85, 86, 91, 92, 95, 96, 99, 101, 104, 108, 110, 111, 120, 124, 128, 131, 133, 134, 135, 153, 158, 165, 169, 175, 179, 180, 182, 184, 185, 195, 197, 200, 201, 206, 209, 210, 211, 215, 216, 217, 218, 220, 228, 230, 232, 236, 238, 239, 240, 244, 245, 246, 251, 252, 253, 255, 258, 259, 265, 267, 268, 269, 270, 272, 274, 286, 287, 292, 297, 298], "unix": [1, 251, 252], "would": [1, 3, 4, 5, 9, 11, 12, 13, 14, 15, 17, 19, 21, 22, 23, 25, 29, 32, 34, 39, 48, 49, 50, 57, 59, 60, 67, 68, 69, 73, 74, 80, 84, 93, 95, 99, 104, 108, 110, 111, 119, 120, 121, 123, 125, 127, 135, 139, 149, 152, 180, 182, 185, 190, 194, 195, 201, 203, 206, 209, 210, 211, 213, 216, 217, 219, 220, 221, 223, 228, 229, 230, 232, 233, 236, 237, 238, 239, 240, 242, 244, 245, 251, 253, 255, 258, 259, 261, 262, 270, 271, 272, 274, 286, 287, 289, 291, 292, 293, 296, 297, 298], "do": [1, 2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 19, 21, 22, 23, 24, 25, 28, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 45, 47, 48, 49, 50, 51, 60, 64, 67, 68, 69, 70, 71, 74, 76, 78, 80, 83, 84, 87, 93, 95, 96, 98, 99, 101, 102, 104, 105, 108, 109, 116, 119, 123, 127, 128, 133, 135, 136, 138, 139, 143, 146, 147, 150, 152, 157, 160, 165, 169, 174, 177, 179, 181, 187, 189, 190, 193, 196, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 215, 216, 217, 219, 220, 221, 223, 227, 228, 229, 230, 232, 233, 236, 237, 238, 242, 245, 246, 249, 251, 252, 254, 256, 258, 259, 261, 268, 270, 271, 272, 274, 286, 287, 289, 290, 291, 292, 293, 295, 297], "true": [1, 2, 4, 12, 13, 14, 15, 17, 18, 21, 22, 23, 26, 28, 30, 31, 32, 33, 35, 36, 37, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 54, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 89, 90, 93, 95, 96, 98, 99, 100, 101, 104, 105, 108, 110, 111, 112, 117, 119, 120, 121, 122, 123, 125, 127, 128, 129, 130, 131, 133, 134, 135, 139, 152, 156, 157, 166, 169, 170, 177, 179, 180, 183, 184, 185, 188, 194, 195, 196, 197, 200, 201, 204, 205, 206, 207, 208, 209, 210, 211, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 249, 251, 252, 253, 254, 256, 258, 259, 261, 265, 268, 269, 270, 271, 272, 275, 286, 287, 289, 291, 292, 293, 296, 297, 298], "bin": [1, 2, 4, 8, 9, 11, 12, 96, 220, 251, 258], "isympi": [1, 2, 14, 15, 96], "window": [1, 9, 11, 261], "now": [1, 2, 5, 8, 9, 11, 12, 13, 15, 19, 21, 22, 23, 28, 39, 48, 49, 60, 68, 69, 73, 76, 79, 84, 85, 90, 92, 93, 97, 104, 108, 119, 124, 127, 131, 133, 135, 138, 140, 143, 145, 152, 153, 188, 190, 195, 200, 203, 204, 206, 207, 208, 209, 210, 213, 216, 217, 221, 228, 229, 230, 232, 233, 236, 238, 239, 240, 241, 246, 251, 252, 259, 270, 271, 289, 291, 292, 297, 298], "just": [1, 3, 4, 5, 11, 12, 13, 14, 15, 21, 22, 23, 30, 32, 35, 39, 45, 48, 49, 59, 66, 68, 69, 70, 74, 91, 93, 95, 96, 97, 98, 104, 108, 109, 121, 123, 124, 135, 139, 143, 149, 150, 152, 165, 170, 175, 185, 190, 194, 200, 201, 203, 206, 207, 209, 210, 211, 213, 215, 219, 220, 227, 228, 229, 230, 232, 236, 239, 241, 249, 251, 253, 254, 256, 271, 272, 274, 286, 287, 289, 290, 291, 292, 293, 297, 298], "limit": [1, 3, 13, 15, 26, 32, 33, 37, 39, 45, 47, 49, 67, 68, 70, 72, 73, 74, 76, 77, 80, 88, 90, 95, 96, 98, 104, 108, 117, 150, 174, 180, 183, 200, 206, 211, 213, 216, 217, 220, 223, 224, 226, 228, 232, 233, 235, 236, 237, 238, 240, 245, 252, 255, 258, 259, 261, 264, 265, 275, 277, 283, 288, 289, 291, 293], "function": [1, 2, 3, 5, 7, 11, 14, 17, 18, 19, 21, 22, 24, 26, 29, 31, 33, 36, 38, 42, 43, 44, 46, 47, 48, 50, 51, 59, 60, 63, 64, 66, 69, 70, 71, 72, 73, 77, 78, 79, 80, 85, 88, 89, 92, 94, 95, 96, 97, 99, 101, 103, 107, 109, 111, 114, 115, 116, 117, 119, 120, 121, 125, 126, 127, 132, 133, 135, 138, 139, 140, 141, 145, 147, 148, 152, 157, 158, 159, 160, 164, 169, 170, 171, 174, 179, 180, 181, 182, 183, 184, 185, 188, 189, 194, 195, 198, 199, 200, 202, 204, 205, 207, 209, 212, 213, 214, 215, 217, 218, 221, 222, 223, 224, 225, 226, 227, 228, 229, 232, 234, 235, 238, 239, 240, 242, 244, 245, 246, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 261, 262, 263, 264, 265, 266, 270, 271, 273, 274, 275, 276, 277, 280, 282, 283, 286, 287, 288, 289, 290, 291, 292, 293, 295, 298], "get": [1, 3, 4, 5, 8, 11, 12, 13, 18, 19, 21, 22, 23, 32, 34, 35, 36, 39, 40, 43, 44, 47, 48, 49, 51, 52, 57, 58, 60, 61, 63, 64, 67, 68, 69, 70, 72, 73, 74, 76, 81, 91, 93, 95, 97, 101, 104, 108, 110, 111, 117, 119, 122, 128, 135, 138, 139, 147, 148, 149, 150, 152, 157, 158, 165, 169, 174, 179, 180, 181, 182, 187, 189, 190, 204, 206, 208, 209, 210, 211, 213, 215, 216, 217, 218, 219, 220, 222, 228, 229, 230, 232, 233, 236, 237, 238, 239, 240, 241, 242, 246, 247, 252, 258, 259, 260, 262, 265, 269, 286, 289, 291, 292, 293, 296, 297, 298], "nice": [1, 4, 9, 39, 68, 80, 104, 108, 135, 149, 152, 206, 220, 230, 261, 292], "print": [1, 3, 4, 5, 7, 11, 12, 14, 15, 19, 21, 22, 26, 28, 31, 32, 34, 39, 42, 43, 44, 45, 47, 48, 50, 51, 52, 57, 59, 60, 67, 68, 69, 72, 73, 74, 76, 95, 97, 98, 101, 104, 105, 108, 109, 110, 111, 112, 119, 126, 128, 133, 135, 137, 145, 151, 157, 165, 178, 179, 183, 185, 195, 198, 202, 204, 206, 209, 210, 211, 213, 215, 216, 226, 227, 229, 230, 232, 236, 238, 245, 247, 251, 253, 258, 259, 261, 265, 269, 276, 282, 284, 287, 288, 289, 290, 291, 292, 293, 297], "tree": [1, 7, 13, 14, 18, 59, 62, 68, 110, 125, 135, 177, 180, 195, 216, 227, 229, 232, 239, 242, 244, 255, 258, 261, 288], "which": [1, 2, 3, 4, 5, 8, 9, 11, 12, 13, 14, 15, 19, 21, 22, 23, 25, 26, 28, 29, 31, 33, 34, 35, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 57, 58, 59, 60, 61, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 81, 82, 83, 84, 87, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 104, 107, 108, 110, 111, 112, 113, 115, 116, 117, 119, 120, 121, 123, 124, 125, 127, 128, 129, 130, 131, 133, 134, 135, 137, 138, 140, 143, 145, 146, 147, 148, 149, 150, 152, 153, 154, 156, 158, 159, 171, 174, 180, 181, 182, 183, 185, 189, 190, 191, 194, 195, 197, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 215, 216, 217, 218, 219, 221, 222, 223, 226, 227, 228, 229, 230, 232, 233, 235, 236, 237, 238, 239, 240, 241, 244, 246, 251, 252, 253, 254, 255, 256, 258, 259, 261, 265, 267, 270, 274, 275, 286, 287, 289, 290, 291, 292, 293, 294, 296, 297, 298], "veri": [1, 2, 3, 4, 11, 12, 13, 14, 15, 17, 18, 21, 23, 28, 49, 64, 68, 69, 72, 73, 78, 80, 86, 90, 93, 95, 98, 104, 108, 119, 123, 131, 135, 139, 152, 157, 190, 203, 204, 207, 209, 210, 213, 215, 216, 217, 219, 220, 221, 227, 228, 229, 230, 232, 233, 236, 238, 239, 240, 251, 252, 253, 259, 286, 289, 292, 297], "There": [2, 3, 4, 5, 7, 8, 11, 12, 13, 14, 15, 18, 21, 22, 23, 25, 28, 31, 32, 36, 49, 50, 59, 60, 61, 62, 65, 67, 68, 69, 72, 73, 76, 92, 93, 95, 96, 97, 98, 101, 104, 108, 111, 112, 115, 119, 123, 133, 145, 147, 149, 150, 158, 175, 180, 195, 200, 203, 204, 206, 210, 211, 212, 213, 215, 216, 217, 220, 221, 222, 228, 229, 230, 232, 233, 236, 238, 239, 240, 242, 245, 254, 255, 258, 259, 261, 270, 286, 287, 289, 291, 292, 296, 297], "sever": [2, 3, 4, 11, 12, 13, 14, 18, 21, 23, 28, 32, 39, 49, 53, 59, 60, 67, 68, 72, 73, 75, 76, 80, 93, 95, 108, 113, 125, 128, 129, 146, 190, 192, 206, 208, 209, 210, 213, 215, 219, 220, 221, 227, 228, 236, 240, 251, 253, 263, 276, 289, 293, 296], "packag": [2, 7, 8, 9, 11, 12, 27, 29, 33, 34, 39, 96, 109, 110, 116, 145, 152, 200, 220, 251, 262, 271, 272, 291], "instal": [2, 5, 12, 14, 15, 25, 72, 109, 209, 210, 211, 220, 252, 259, 290, 296], "enabl": [2, 5, 9, 14, 23, 39, 68, 95, 96, 108, 112, 135, 137, 185, 195, 200, 220, 236, 240, 251, 256, 259, 293, 296, 297], "certain": [2, 5, 12, 14, 23, 37, 39, 46, 48, 49, 51, 59, 66, 68, 72, 76, 84, 93, 95, 108, 110, 133, 149, 195, 196, 207, 210, 213, 215, 220, 221, 227, 230, 232, 233, 236, 238, 239, 240, 242, 253, 254, 259, 265, 268, 274, 297], "most": [2, 3, 4, 5, 7, 11, 12, 13, 14, 15, 18, 19, 21, 22, 23, 28, 30, 32, 33, 34, 35, 36, 37, 39, 42, 43, 44, 47, 48, 49, 50, 59, 60, 67, 68, 69, 72, 74, 78, 80, 95, 98, 99, 100, 101, 102, 104, 106, 107, 108, 109, 110, 119, 123, 127, 128, 135, 143, 146, 149, 150, 153, 187, 189, 194, 195, 199, 205, 206, 207, 208, 209, 210, 211, 213, 215, 216, 217, 218, 219, 220, 227, 228, 230, 233, 236, 237, 238, 239, 240, 249, 252, 253, 254, 255, 256, 258, 259, 261, 268, 270, 286, 289, 291, 292, 293, 295, 296, 297], "contributor": [2, 5, 6, 7, 8, 11, 13, 23], "need": [2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41, 43, 44, 47, 48, 49, 53, 59, 60, 64, 66, 67, 68, 69, 70, 73, 74, 76, 79, 83, 84, 91, 92, 93, 95, 96, 98, 99, 104, 108, 109, 110, 111, 112, 115, 119, 123, 128, 130, 133, 134, 135, 137, 138, 139, 140, 142, 143, 144, 146, 147, 148, 149, 150, 153, 154, 165, 169, 177, 183, 188, 194, 195, 200, 203, 204, 206, 207, 208, 209, 210, 211, 213, 215, 216, 217, 219, 220, 227, 228, 230, 232, 233, 235, 236, 238, 239, 240, 244, 245, 246, 247, 249, 252, 253, 254, 255, 256, 258, 261, 265, 269, 271, 272, 275, 286, 287, 289, 292, 293, 295, 297], "ani": [2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 17, 18, 21, 22, 23, 28, 30, 31, 32, 35, 39, 45, 46, 47, 48, 49, 50, 57, 58, 59, 60, 66, 67, 68, 69, 70, 72, 73, 74, 76, 78, 79, 80, 83, 84, 85, 93, 95, 96, 98, 99, 102, 104, 105, 108, 110, 111, 112, 115, 119, 121, 124, 127, 128, 129, 130, 131, 133, 135, 145, 148, 149, 150, 153, 154, 158, 171, 174, 179, 180, 183, 185, 187, 190, 195, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 215, 216, 217, 220, 221, 226, 227, 228, 229, 230, 232, 233, 236, 237, 238, 240, 242, 245, 246, 251, 252, 254, 255, 256, 258, 259, 265, 269, 270, 271, 272, 274, 275, 286, 287, 289, 292, 293, 296, 297, 298], "mention": [2, 3, 4, 23, 28, 35, 59, 93, 95, 113, 119, 137, 153, 154, 201, 230, 233, 236, 240, 269, 270, 271, 272, 293], "below": [2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 15, 21, 23, 26, 28, 32, 35, 36, 37, 39, 47, 48, 49, 58, 59, 60, 68, 69, 73, 75, 76, 77, 78, 84, 85, 91, 93, 95, 99, 104, 107, 108, 110, 111, 112, 113, 119, 124, 127, 128, 129, 130, 131, 133, 135, 137, 139, 140, 141, 146, 147, 148, 149, 150, 152, 179, 185, 190, 195, 204, 205, 206, 207, 209, 216, 220, 221, 223, 229, 232, 233, 235, 236, 237, 238, 239, 240, 251, 253, 258, 259, 261, 270, 272, 275, 276, 293, 297], "except": [2, 3, 4, 11, 13, 14, 15, 19, 21, 22, 23, 33, 37, 47, 49, 59, 60, 68, 69, 72, 73, 74, 76, 93, 95, 108, 143, 189, 191, 205, 207, 209, 210, 211, 215, 216, 217, 218, 220, 229, 232, 233, 236, 237, 239, 244, 249, 251, 253, 254, 257, 258, 259, 269, 272, 284, 286, 289, 292, 293], "unless": [2, 4, 11, 12, 14, 21, 23, 25, 42, 44, 47, 49, 59, 67, 68, 69, 73, 76, 83, 84, 93, 104, 107, 158, 203, 204, 208, 209, 210, 215, 216, 220, 225, 228, 229, 236, 238, 251, 255, 258, 259, 261, 265, 274, 287, 293, 297], "thei": [2, 3, 4, 5, 11, 12, 13, 14, 15, 17, 21, 22, 23, 28, 33, 35, 36, 37, 39, 45, 48, 49, 50, 56, 58, 59, 60, 66, 67, 68, 69, 70, 73, 74, 76, 78, 81, 82, 83, 84, 85, 90, 93, 95, 96, 98, 99, 101, 102, 104, 107, 108, 110, 123, 127, 128, 130, 133, 134, 135, 137, 143, 145, 147, 148, 149, 152, 153, 159, 164, 169, 174, 177, 182, 187, 188, 190, 191, 195, 199, 200, 201, 204, 205, 206, 207, 208, 209, 210, 211, 213, 215, 216, 217, 218, 220, 221, 226, 227, 229, 230, 232, 233, 236, 237, 238, 239, 240, 241, 242, 246, 249, 251, 253, 255, 258, 259, 261, 265, 272, 274, 287, 289, 290, 291, 292, 293, 297], "intend": [2, 3, 4, 7, 9, 11, 12, 13, 17, 21, 68, 69, 79, 88, 93, 108, 110, 125, 130, 180, 209, 210, 211, 215, 218, 233, 236, 237, 249, 254, 261, 286], "part": [2, 3, 4, 5, 7, 11, 12, 13, 14, 21, 22, 23, 28, 41, 46, 59, 60, 67, 68, 69, 73, 74, 76, 84, 91, 93, 95, 98, 99, 101, 108, 119, 123, 124, 127, 128, 133, 135, 137, 143, 145, 146, 150, 152, 169, 181, 185, 194, 204, 208, 209, 210, 211, 213, 215, 216, 217, 219, 220, 221, 228, 230, 232, 233, 236, 238, 251, 253, 255, 258, 287, 292, 297], "those": [2, 4, 11, 12, 13, 14, 15, 17, 21, 22, 28, 32, 36, 37, 40, 45, 48, 49, 50, 51, 59, 60, 66, 67, 68, 69, 72, 81, 82, 93, 95, 98, 104, 107, 108, 115, 123, 127, 128, 133, 137, 143, 146, 158, 182, 194, 197, 200, 203, 204, 206, 209, 210, 211, 213, 215, 216, 218, 219, 220, 226, 228, 232, 236, 237, 238, 239, 240, 246, 249, 251, 255, 258, 265, 268, 289, 291, 297], "everi": [2, 3, 4, 7, 11, 12, 14, 21, 23, 28, 32, 38, 43, 44, 45, 48, 54, 56, 59, 60, 68, 69, 83, 95, 97, 99, 104, 108, 119, 150, 189, 201, 203, 204, 206, 207, 208, 210, 211, 213, 215, 220, 225, 228, 230, 232, 233, 236, 239, 240, 242, 269, 272, 274, 290, 292, 293, 297], "conda": [2, 8, 9, 39, 110], "via": [2, 8, 9, 14, 19, 23, 33, 37, 39, 42, 43, 44, 59, 60, 68, 73, 76, 93, 95, 98, 104, 108, 109, 110, 111, 131, 195, 205, 207, 211, 213, 215, 216, 219, 220, 239, 249, 252, 253, 265, 274, 292], "forg": [2, 8, 110], "pip": [2, 8, 9, 12, 39, 110], "doe": [2, 4, 5, 7, 9, 11, 12, 13, 14, 18, 21, 22, 23, 28, 29, 35, 36, 37, 38, 39, 40, 43, 44, 47, 48, 49, 50, 59, 60, 64, 66, 67, 68, 69, 70, 72, 74, 76, 78, 79, 82, 84, 93, 95, 98, 99, 104, 107, 108, 110, 121, 123, 125, 128, 129, 133, 135, 137, 142, 146, 150, 165, 169, 175, 179, 181, 184, 203, 204, 206, 208, 209, 210, 211, 213, 215, 216, 217, 220, 227, 228, 229, 230, 232, 233, 235, 236, 238, 241, 245, 246, 249, 251, 253, 255, 258, 259, 261, 265, 267, 270, 286, 287, 289, 292, 293, 296, 297, 298], "themselv": [2, 5, 12, 13, 23, 45, 48, 60, 64, 66, 68, 95, 108, 145, 146, 210, 211, 215, 226, 240, 246, 255, 258, 261, 297], "incomplet": [2, 4, 5, 68, 73, 76, 208, 210, 216, 220, 222, 238, 239], "main": [2, 4, 5, 7, 9, 11, 13, 15, 34, 44, 45, 49, 68, 74, 93, 99, 104, 107, 135, 143, 183, 200, 204, 206, 207, 209, 211, 220, 227, 236, 239, 245, 252, 297, 298], "webpag": [2, 5], "more": [2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 25, 28, 30, 31, 32, 33, 34, 36, 37, 39, 40, 41, 44, 45, 47, 48, 49, 50, 51, 54, 58, 59, 60, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 80, 81, 82, 83, 84, 85, 86, 90, 93, 95, 98, 99, 101, 102, 104, 105, 107, 108, 109, 110, 117, 119, 123, 127, 128, 129, 133, 135, 137, 139, 141, 143, 145, 147, 148, 149, 150, 152, 154, 157, 169, 173, 174, 179, 182, 183, 184, 185, 190, 194, 195, 199, 200, 204, 205, 206, 207, 208, 209, 210, 211, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 229, 230, 232, 233, 236, 237, 238, 239, 240, 251, 253, 254, 255, 258, 259, 261, 265, 269, 273, 280, 282, 286, 287, 289, 290, 292, 293, 295, 296, 297, 298], "complet": [2, 3, 4, 9, 11, 12, 13, 14, 15, 21, 32, 35, 44, 49, 68, 69, 70, 72, 74, 75, 76, 84, 93, 95, 104, 108, 123, 128, 129, 139, 145, 152, 171, 174, 175, 204, 209, 213, 215, 216, 217, 221, 227, 232, 233, 236, 239, 240, 251, 253, 261, 291, 292, 297], "io": [2, 5, 96, 220, 259], "ha": [2, 3, 4, 5, 7, 11, 12, 13, 14, 15, 19, 21, 22, 23, 28, 29, 30, 32, 33, 34, 35, 36, 37, 45, 47, 48, 49, 50, 51, 52, 57, 58, 59, 60, 62, 64, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 80, 81, 83, 84, 85, 91, 93, 95, 97, 98, 99, 101, 104, 105, 107, 108, 109, 111, 112, 115, 119, 120, 124, 127, 128, 133, 135, 137, 139, 145, 150, 152, 158, 159, 169, 170, 179, 182, 187, 190, 194, 195, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 225, 227, 228, 230, 232, 233, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 251, 252, 253, 254, 255, 256, 258, 261, 265, 267, 269, 270, 272, 274, 275, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298], "one": [2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 17, 19, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 38, 40, 41, 44, 45, 47, 48, 49, 51, 52, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 74, 76, 78, 79, 80, 81, 82, 84, 85, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 103, 104, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 119, 120, 123, 124, 127, 128, 130, 131, 133, 134, 135, 136, 139, 149, 150, 152, 154, 157, 158, 159, 165, 170, 179, 183, 185, 187, 188, 189, 190, 193, 194, 195, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 215, 216, 217, 218, 219, 220, 221, 227, 228, 229, 230, 232, 233, 236, 237, 238, 239, 240, 241, 244, 246, 247, 251, 252, 253, 255, 258, 259, 261, 265, 270, 272, 274, 285, 286, 287, 289, 291, 292, 293, 295, 296, 297], "mpmath": [2, 8, 9, 12, 14, 23, 33, 34, 49, 73, 76, 104, 109, 152, 210, 211, 220, 228, 238, 254, 259], "arbitrari": [2, 4, 13, 14, 15, 21, 23, 28, 32, 34, 36, 37, 47, 53, 60, 61, 67, 68, 69, 72, 73, 76, 79, 80, 82, 98, 99, 104, 112, 129, 146, 150, 171, 174, 204, 206, 207, 210, 211, 213, 215, 217, 232, 236, 237, 238, 246, 256, 259, 265, 267, 286, 287, 292, 297, 298], "precis": [2, 3, 4, 14, 15, 21, 22, 23, 28, 32, 49, 59, 68, 71, 72, 73, 76, 84, 95, 104, 108, 117, 150, 205, 207, 210, 211, 215, 216, 217, 220, 227, 232, 233, 238, 239, 252, 253, 261, 286, 297], "arithmet": [2, 12, 49, 68, 69, 72, 99, 104, 108, 174, 181, 205, 206, 207, 209, 210, 211, 213, 214, 218, 221], "under": [2, 3, 4, 8, 11, 12, 14, 15, 21, 22, 43, 44, 46, 47, 49, 50, 58, 59, 64, 66, 76, 86, 93, 95, 97, 98, 104, 108, 110, 111, 112, 154, 180, 205, 207, 208, 215, 216, 220, 227, 228, 230, 233, 236, 238, 239, 240, 246, 249, 291, 297], "hood": [2, 11, 14], "whenev": [2, 3, 12, 13, 14, 15, 23, 66, 93, 95, 104, 192, 206, 207, 208, 209, 211, 222, 227, 230, 240, 287, 289, 292], "calcul": [2, 15, 19, 21, 34, 35, 41, 47, 50, 60, 66, 68, 69, 70, 71, 72, 74, 76, 78, 80, 81, 82, 84, 85, 95, 99, 101, 104, 108, 111, 112, 121, 123, 124, 127, 128, 133, 134, 137, 138, 139, 154, 157, 158, 161, 164, 180, 181, 182, 183, 185, 186, 194, 195, 196, 197, 199, 201, 203, 204, 205, 206, 207, 209, 210, 211, 213, 215, 216, 217, 222, 227, 236, 240, 244, 252, 253, 259, 265, 268, 272, 274, 293, 296], "float": [2, 12, 14, 21, 23, 30, 49, 59, 68, 74, 76, 83, 85, 95, 96, 99, 104, 108, 110, 117, 119, 152, 158, 200, 206, 209, 210, 211, 216, 220, 232, 238, 240, 251, 259, 261, 286, 289], "point": [2, 3, 4, 5, 12, 14, 15, 19, 21, 32, 34, 35, 39, 41, 47, 49, 50, 59, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 87, 90, 91, 92, 93, 95, 104, 108, 111, 112, 113, 115, 117, 124, 127, 128, 129, 130, 131, 133, 134, 135, 137, 139, 141, 142, 143, 144, 146, 147, 148, 149, 150, 152, 153, 165, 187, 190, 196, 199, 201, 204, 206, 207, 209, 210, 211, 213, 215, 216, 220, 222, 226, 227, 228, 236, 238, 239, 240, 252, 255, 258, 259, 261, 265, 268, 270, 271, 272, 274, 275, 283, 286, 287, 289, 292], "valu": [2, 3, 4, 5, 12, 13, 14, 15, 19, 21, 23, 26, 28, 31, 32, 33, 34, 35, 36, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 57, 59, 60, 64, 67, 68, 69, 70, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 90, 91, 93, 95, 96, 98, 99, 100, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 117, 119, 121, 124, 127, 128, 129, 130, 133, 134, 135, 137, 149, 152, 154, 158, 161, 164, 169, 171, 174, 177, 179, 180, 181, 182, 185, 186, 188, 190, 195, 196, 199, 201, 203, 204, 205, 206, 208, 209, 210, 211, 213, 215, 216, 217, 218, 220, 221, 226, 227, 228, 229, 232, 233, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 251, 253, 254, 258, 259, 261, 268, 270, 272, 275, 287, 289, 292], "g": [2, 3, 5, 8, 9, 11, 12, 13, 15, 21, 22, 23, 26, 34, 35, 37, 47, 48, 49, 50, 53, 56, 58, 59, 60, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 80, 84, 85, 86, 91, 94, 95, 97, 98, 99, 104, 108, 110, 111, 115, 119, 120, 124, 127, 129, 130, 131, 133, 135, 137, 139, 140, 142, 143, 144, 149, 150, 152, 153, 165, 169, 174, 180, 182, 183, 185, 188, 190, 191, 195, 201, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 232, 233, 236, 237, 238, 239, 240, 241, 244, 245, 246, 251, 252, 253, 254, 256, 258, 259, 260, 261, 274, 277, 287, 292, 296, 297, 298], "evalf": [2, 4, 14, 15, 21, 28, 34, 37, 49, 67, 72, 73, 74, 76, 87, 90, 91, 99, 104, 110, 135, 137, 152, 167, 211, 216, 220, 227, 228, 232, 240, 252, 259, 288], "cannot": [2, 3, 4, 5, 12, 13, 14, 15, 18, 22, 23, 28, 31, 34, 39, 42, 43, 44, 45, 46, 47, 49, 60, 65, 67, 68, 70, 72, 74, 78, 80, 81, 83, 85, 90, 95, 97, 100, 102, 104, 106, 108, 110, 119, 131, 134, 180, 188, 190, 203, 204, 206, 209, 211, 213, 215, 216, 217, 220, 227, 228, 232, 233, 235, 236, 238, 239, 240, 241, 249, 251, 252, 253, 258, 262, 265, 267, 291, 292, 293, 297, 298], "without": [2, 3, 4, 5, 11, 12, 13, 14, 15, 21, 23, 25, 26, 39, 43, 45, 46, 49, 67, 68, 69, 70, 72, 76, 93, 95, 96, 99, 101, 104, 119, 120, 127, 131, 135, 141, 143, 148, 149, 185, 189, 190, 194, 195, 196, 203, 206, 209, 210, 213, 216, 220, 222, 228, 229, 230, 232, 233, 236, 237, 238, 239, 240, 242, 245, 246, 249, 251, 252, 253, 256, 258, 259, 261, 268, 271, 293, 297], "fail": [2, 3, 4, 5, 8, 11, 13, 21, 22, 23, 28, 49, 59, 60, 64, 67, 68, 72, 74, 92, 93, 95, 96, 104, 105, 108, 110, 137, 175, 180, 200, 206, 209, 210, 211, 213, 215, 216, 220, 227, 230, 236, 238, 240, 249, 251, 258, 259, 293], "import": [2, 3, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 26, 28, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 117, 119, 120, 121, 122, 123, 124, 125, 127, 128, 130, 131, 133, 134, 135, 137, 138, 139, 140, 142, 143, 144, 146, 147, 148, 149, 150, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 177, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 249, 251, 252, 253, 254, 255, 256, 258, 259, 261, 262, 263, 265, 267, 268, 269, 270, 271, 272, 275, 286, 287, 289, 291, 292, 293, 295, 296, 297, 298], "If": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 25, 28, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 57, 59, 60, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 90, 91, 93, 95, 96, 97, 98, 99, 101, 104, 105, 107, 108, 109, 110, 111, 117, 119, 120, 122, 123, 124, 125, 127, 128, 129, 130, 131, 133, 134, 135, 136, 147, 148, 149, 150, 152, 153, 158, 162, 166, 169, 175, 179, 180, 181, 182, 183, 185, 189, 193, 194, 195, 196, 197, 199, 200, 201, 204, 206, 207, 208, 209, 210, 211, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 232, 233, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 249, 251, 252, 253, 254, 255, 256, 258, 259, 261, 265, 268, 270, 272, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298], "error": [2, 3, 4, 5, 8, 11, 12, 13, 17, 21, 22, 30, 31, 32, 33, 34, 35, 37, 40, 47, 49, 57, 60, 67, 68, 69, 74, 78, 83, 93, 95, 104, 107, 108, 110, 128, 133, 135, 204, 205, 208, 209, 210, 211, 213, 217, 220, 222, 228, 236, 237, 238, 239, 240, 251, 252, 253, 256, 258, 261, 265, 286], "importerror": 2, "extern": [2, 39, 68, 96, 110, 115, 117, 137, 145, 200, 210, 211, 221, 228, 232, 240, 251, 252], "doc": [2, 3, 4, 5, 7, 11, 12, 15, 25, 38, 49, 59, 67, 68, 84, 96, 187, 210, 212, 233, 236, 251, 252, 254, 256, 258, 265, 270, 283], "latest": [2, 9, 12, 39, 48, 254, 256, 259], "html": [2, 4, 5, 8, 11, 12, 45, 49, 52, 60, 61, 62, 68, 69, 71, 73, 74, 76, 78, 84, 85, 95, 96, 104, 108, 117, 214, 220, 223, 225, 228, 229, 233, 236, 240, 252, 254, 256, 258, 259, 293], "inform": [2, 3, 4, 5, 7, 9, 11, 14, 15, 18, 21, 22, 25, 28, 37, 38, 44, 45, 48, 49, 50, 54, 59, 60, 66, 68, 69, 73, 76, 80, 93, 95, 97, 101, 104, 109, 112, 124, 125, 127, 128, 130, 133, 135, 137, 145, 146, 147, 149, 150, 152, 153, 180, 185, 190, 195, 200, 204, 206, 209, 210, 215, 216, 220, 221, 227, 230, 232, 233, 238, 239, 240, 244, 245, 246, 251, 252, 253, 254, 255, 265, 270, 272, 297], "mean": [2, 3, 4, 5, 11, 12, 13, 14, 15, 21, 22, 23, 28, 36, 45, 50, 60, 67, 68, 69, 70, 86, 93, 95, 96, 98, 99, 102, 104, 108, 111, 123, 146, 185, 187, 190, 195, 200, 203, 206, 207, 208, 210, 213, 215, 219, 220, 230, 232, 233, 235, 236, 238, 239, 240, 241, 242, 244, 245, 251, 258, 270, 286, 287, 289, 291, 292, 293, 297, 298], "did": [2, 5, 11, 22, 68, 95, 108, 123, 142, 190, 213, 217, 228, 238, 249, 259, 289, 291, 297], "correctli": [2, 3, 4, 5, 8, 11, 12, 13, 22, 23, 47, 72, 93, 96, 104, 131, 135, 137, 149, 220, 227, 233, 236], "explain": [2, 3, 4, 5, 7, 12, 21, 28, 37, 48, 64, 68, 76, 86, 91, 131, 207, 210, 213, 215, 217, 227], "how": [2, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 28, 29, 48, 49, 51, 59, 60, 67, 68, 74, 75, 76, 80, 91, 95, 98, 99, 101, 104, 108, 110, 111, 123, 127, 128, 131, 135, 136, 142, 147, 148, 150, 152, 156, 157, 173, 177, 180, 181, 182, 187, 188, 195, 203, 206, 207, 210, 211, 213, 215, 219, 220, 223, 227, 228, 230, 232, 233, 236, 237, 238, 240, 246, 251, 252, 253, 254, 256, 258, 259, 261, 270, 287, 289, 291, 292, 293, 294, 296, 297], "method": [2, 3, 4, 5, 8, 11, 12, 14, 15, 20, 21, 28, 30, 31, 32, 34, 35, 36, 41, 43, 44, 45, 47, 48, 49, 50, 51, 52, 59, 60, 61, 67, 68, 69, 70, 71, 72, 74, 75, 76, 79, 80, 81, 82, 84, 87, 90, 92, 93, 95, 97, 99, 100, 101, 104, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 120, 123, 126, 127, 129, 130, 131, 133, 134, 135, 138, 140, 141, 145, 146, 150, 151, 152, 159, 162, 164, 166, 174, 175, 180, 182, 185, 187, 189, 192, 193, 194, 195, 197, 201, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 221, 222, 223, 225, 226, 227, 228, 232, 233, 236, 238, 240, 241, 243, 245, 246, 247, 251, 253, 255, 258, 259, 265, 269, 272, 275, 276, 280, 282, 286, 287, 288, 289, 292, 297], "ones": [2, 3, 13, 23, 39, 49, 59, 64, 68, 93, 95, 98, 99, 101, 104, 107, 108, 135, 158, 179, 185, 189, 209, 213, 223, 233, 236, 241, 247, 253, 261, 265, 270, 293, 296], "guid": [2, 6, 7, 8, 9, 11, 14, 16, 23, 33, 39, 48, 68, 75, 135, 149, 220, 233, 235, 236, 238, 239, 246, 290, 294, 295, 298], "automat": [2, 3, 4, 5, 8, 11, 12, 13, 14, 15, 17, 21, 31, 32, 35, 37, 48, 49, 50, 60, 68, 70, 71, 72, 73, 74, 76, 81, 83, 87, 93, 96, 98, 108, 110, 111, 128, 133, 135, 137, 143, 171, 173, 174, 183, 185, 189, 199, 203, 206, 207, 209, 210, 211, 215, 216, 217, 220, 223, 226, 227, 229, 230, 232, 233, 236, 238, 239, 245, 246, 251, 252, 253, 256, 259, 270, 275, 287, 289, 291, 292, 296, 297, 298], "typic": [2, 3, 12, 13, 14, 23, 64, 74, 93, 108, 119, 124, 130, 136, 150, 204, 206, 208, 213, 216, 217, 230, 252, 253, 270], "manual": [2, 3, 5, 8, 12, 13, 14, 23, 31, 49, 50, 59, 72, 78, 95, 96, 110, 119, 130, 133, 135, 138, 149, 153, 206, 213, 220, 236, 238, 239, 254, 287, 297], "actual": [2, 3, 4, 5, 8, 9, 11, 12, 14, 15, 19, 21, 22, 23, 26, 48, 49, 50, 57, 59, 66, 68, 69, 76, 80, 93, 95, 97, 101, 104, 108, 119, 123, 131, 134, 135, 137, 147, 148, 149, 200, 206, 207, 209, 210, 215, 220, 228, 230, 232, 233, 236, 239, 247, 251, 252, 255, 256, 258, 259, 291], "directli": [2, 3, 4, 11, 12, 13, 14, 15, 19, 21, 22, 23, 28, 39, 43, 44, 47, 48, 49, 59, 67, 68, 70, 74, 79, 99, 101, 104, 108, 131, 133, 134, 135, 168, 171, 183, 188, 195, 199, 206, 207, 209, 210, 211, 215, 216, 228, 229, 230, 232, 233, 236, 237, 238, 239, 240, 251, 252, 253, 254, 255, 256, 287, 298], "git": [2, 7, 10, 11, 12], "repositori": [2, 5, 9, 39, 233], "vast": [2, 37, 95, 212], "major": [2, 3, 5, 8, 13, 28, 37, 78, 123, 245, 291, 297], "them": [2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 18, 19, 21, 22, 23, 28, 31, 32, 33, 35, 37, 40, 43, 45, 48, 49, 57, 59, 60, 67, 68, 69, 70, 72, 73, 76, 79, 84, 86, 88, 90, 91, 93, 97, 98, 101, 104, 107, 108, 109, 123, 128, 130, 133, 135, 137, 139, 140, 145, 147, 149, 152, 158, 162, 178, 179, 185, 187, 190, 193, 194, 195, 201, 203, 204, 207, 208, 209, 210, 211, 213, 215, 216, 217, 219, 220, 221, 227, 228, 229, 230, 232, 233, 236, 238, 239, 241, 242, 251, 253, 255, 258, 268, 286, 287, 289, 291, 292, 297], "few": [2, 3, 8, 12, 13, 14, 21, 31, 37, 45, 58, 60, 68, 69, 95, 96, 108, 109, 137, 145, 188, 194, 200, 203, 204, 207, 215, 220, 228, 229, 230, 236, 239, 240, 253, 258, 297], "wrap": [2, 3, 4, 11, 12, 42, 43, 44, 45, 49, 57, 68, 74, 96, 109, 126, 131, 145, 200, 204, 206, 209, 210, 213, 220, 223, 239, 245, 252, 256, 259, 261, 282, 292], "addition": [2, 4, 11, 13, 68, 147, 183, 204, 213, 220, 240, 249, 256, 269], "some": [2, 3, 4, 7, 8, 9, 11, 12, 14, 15, 19, 21, 22, 23, 26, 28, 31, 32, 33, 34, 36, 37, 39, 40, 41, 45, 48, 49, 50, 51, 56, 59, 60, 66, 67, 68, 69, 72, 73, 74, 76, 78, 79, 80, 84, 93, 95, 97, 98, 99, 101, 104, 108, 109, 110, 117, 120, 123, 124, 127, 130, 133, 135, 136, 137, 138, 139, 140, 146, 147, 149, 153, 165, 170, 174, 182, 185, 189, 190, 191, 194, 196, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 215, 216, 217, 220, 222, 226, 227, 228, 229, 230, 232, 233, 235, 236, 237, 238, 240, 246, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 265, 267, 268, 270, 272, 276, 286, 287, 289, 291, 292, 293, 295, 296, 297], "skip": [2, 3, 4, 8, 15, 48, 52, 68, 99, 104, 108, 195, 215, 219, 220, 222, 236, 238, 249, 251, 287, 295, 296], "action": [2, 5, 8, 11, 59, 97, 130, 177, 180, 190, 216, 232, 239], "ci": [2, 5, 9, 11, 12, 76, 93, 220, 296], "pull": [2, 3, 4, 5, 8, 9, 12, 13, 23, 39, 49, 68, 73, 76, 184, 221, 232, 236, 239, 293, 297], "request": [2, 3, 4, 5, 8, 9, 12, 13, 21, 28, 39, 47, 68, 72, 84, 93, 108, 135, 185, 206, 213, 216, 244, 252], "mai": [2, 3, 4, 8, 9, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 45, 47, 48, 49, 50, 51, 59, 60, 61, 67, 68, 69, 70, 72, 73, 74, 76, 78, 80, 81, 83, 84, 85, 93, 95, 96, 98, 99, 100, 104, 105, 107, 108, 110, 115, 125, 128, 129, 133, 135, 139, 145, 149, 171, 180, 185, 186, 187, 189, 192, 195, 199, 201, 203, 206, 207, 208, 209, 211, 213, 215, 219, 220, 221, 228, 229, 230, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 244, 246, 249, 251, 252, 253, 254, 255, 256, 258, 259, 261, 262, 272, 274, 286, 287, 289, 292, 293, 297, 298], "wish": [2, 4, 11, 15, 23, 35, 39, 49, 68, 69, 72, 93, 108, 180, 194, 204, 255, 259, 287, 291, 293, 298], "local": [2, 11, 12, 25, 40, 42, 43, 44, 68, 70, 93, 110, 142, 144, 197, 207, 213, 238, 251], "improv": [2, 3, 7, 11, 12, 13, 22, 23, 68, 93, 133, 206, 210, 213, 214, 216, 217, 219, 221, 236, 239, 245, 287, 293], "perform": [2, 11, 12, 13, 14, 15, 18, 19, 21, 23, 46, 48, 49, 50, 59, 60, 63, 67, 68, 69, 71, 72, 74, 81, 85, 92, 95, 102, 104, 108, 109, 125, 128, 137, 139, 145, 149, 150, 152, 169, 170, 179, 182, 185, 201, 204, 208, 209, 210, 213, 215, 216, 221, 222, 223, 227, 232, 233, 236, 238, 239, 240, 241, 252, 258, 265, 267, 269, 272, 286, 287, 291, 292, 297], "gmpy2": [2, 210, 211], "wrapper": [2, 13, 14, 23, 43, 45, 49, 60, 68, 76, 104, 149, 197, 200, 206, 209, 210, 213, 220, 227, 236, 239, 240, 252, 256, 258], "gmp": 2, "multipl": [2, 3, 4, 11, 12, 13, 14, 15, 17, 21, 23, 26, 30, 32, 36, 37, 41, 43, 44, 45, 47, 48, 49, 50, 57, 59, 60, 64, 67, 68, 69, 73, 74, 76, 78, 83, 86, 88, 93, 95, 97, 98, 99, 101, 104, 105, 108, 110, 113, 115, 116, 119, 123, 137, 145, 152, 153, 169, 170, 171, 175, 182, 184, 187, 190, 191, 192, 195, 199, 203, 206, 207, 208, 209, 210, 211, 213, 214, 216, 217, 220, 225, 226, 228, 229, 230, 232, 233, 236, 237, 238, 239, 240, 241, 244, 246, 249, 253, 254, 255, 256, 258, 259, 261, 265, 270, 286, 287, 289, 290, 292, 293, 298], "larg": [2, 3, 4, 7, 11, 12, 15, 21, 28, 33, 59, 60, 68, 69, 78, 93, 95, 107, 108, 123, 129, 149, 152, 165, 190, 194, 205, 209, 210, 211, 213, 216, 219, 220, 221, 227, 230, 232, 240, 245, 252, 259, 261, 268, 286, 291, 297], "integ": [2, 4, 5, 12, 13, 14, 15, 21, 23, 30, 31, 32, 42, 43, 44, 45, 47, 49, 50, 57, 59, 60, 61, 62, 64, 67, 68, 69, 70, 71, 72, 73, 76, 78, 81, 92, 93, 95, 96, 97, 98, 99, 101, 104, 105, 108, 110, 111, 113, 119, 121, 127, 174, 179, 181, 182, 183, 185, 187, 195, 197, 200, 205, 206, 207, 208, 209, 211, 213, 214, 215, 216, 217, 219, 220, 222, 225, 226, 227, 228, 229, 230, 232, 233, 236, 238, 239, 240, 244, 245, 246, 252, 253, 255, 258, 261, 287, 289, 292, 296, 297], "faster": [2, 11, 21, 28, 33, 34, 49, 53, 68, 76, 99, 108, 109, 123, 125, 128, 129, 149, 209, 210, 211, 213, 215, 216, 217, 221, 223, 227, 232, 233, 236, 237, 239, 252, 255], "than": [2, 3, 4, 5, 8, 9, 11, 12, 13, 14, 15, 17, 19, 20, 21, 22, 23, 28, 30, 32, 33, 34, 35, 36, 37, 40, 41, 45, 49, 50, 51, 53, 59, 60, 61, 67, 68, 69, 72, 73, 74, 76, 77, 82, 83, 84, 86, 90, 93, 95, 97, 98, 99, 101, 104, 105, 107, 108, 109, 110, 115, 117, 119, 123, 128, 133, 135, 139, 142, 159, 165, 179, 182, 183, 185, 194, 204, 205, 208, 209, 210, 211, 213, 216, 217, 218, 220, 223, 227, 228, 229, 230, 232, 233, 235, 236, 237, 238, 239, 240, 247, 252, 253, 255, 258, 259, 261, 262, 286, 287, 289, 290, 291, 292, 293, 295, 297], "int": [2, 4, 5, 12, 13, 14, 15, 21, 22, 23, 41, 47, 49, 60, 68, 69, 70, 73, 74, 76, 77, 84, 93, 95, 96, 98, 99, 104, 105, 108, 110, 117, 119, 127, 165, 169, 170, 179, 195, 197, 199, 200, 205, 206, 210, 211, 215, 216, 217, 220, 222, 223, 225, 236, 237, 240, 252, 256, 258, 259, 261, 289, 291, 292, 296, 297], "core": [2, 3, 4, 7, 11, 12, 14, 15, 18, 21, 22, 23, 30, 45, 47, 49, 59, 69, 74, 75, 77, 85, 93, 99, 108, 110, 183, 184, 208, 209, 210, 211, 212, 213, 215, 216, 217, 220, 227, 228, 232, 233, 236, 240, 250, 251, 252, 258, 259, 263, 276, 277, 289, 292], "oper": [2, 4, 9, 14, 21, 22, 23, 33, 34, 35, 37, 41, 45, 49, 59, 60, 61, 67, 68, 69, 70, 71, 72, 74, 76, 78, 86, 88, 91, 93, 98, 99, 101, 108, 110, 119, 120, 123, 128, 129, 139, 143, 149, 150, 152, 157, 161, 162, 166, 168, 169, 170, 171, 176, 177, 180, 182, 183, 184, 185, 195, 197, 202, 207, 208, 209, 210, 211, 213, 215, 216, 217, 220, 223, 225, 228, 229, 232, 235, 236, 238, 239, 242, 243, 244, 245, 251, 252, 255, 258, 259, 265, 276, 280, 282, 283, 288, 289, 290, 292, 297], "poli": [2, 14, 28, 51, 67, 68, 69, 73, 74, 76, 77, 84, 90, 95, 99, 101, 104, 108, 152, 207, 208, 212, 213, 215, 216, 217, 219, 222, 235, 236, 238, 239, 251, 283], "refer": [2, 3, 5, 11, 12, 13, 14, 15, 19, 22, 23, 24, 28, 30, 31, 32, 33, 34, 36, 37, 39, 43, 44, 45, 47, 49, 52, 54, 56, 57, 59, 60, 61, 62, 66, 69, 71, 73, 74, 76, 78, 83, 84, 85, 90, 96, 97, 98, 99, 105, 109, 111, 117, 119, 120, 122, 124, 127, 128, 129, 130, 133, 135, 137, 145, 147, 150, 152, 153, 154, 156, 158, 162, 164, 166, 167, 168, 171, 173, 174, 182, 183, 185, 194, 195, 196, 197, 199, 201, 203, 209, 210, 212, 220, 222, 223, 225, 228, 232, 235, 236, 237, 238, 240, 246, 255, 258, 259, 261, 265, 269, 270, 274, 282, 283, 289, 293, 294, 297, 298], "domain": [2, 4, 11, 13, 14, 19, 23, 26, 28, 33, 47, 48, 68, 69, 71, 73, 74, 76, 87, 89, 90, 93, 95, 101, 104, 105, 108, 116, 119, 135, 152, 206, 207, 209, 212, 213, 215, 217, 218, 235, 236, 238, 240, 283, 293, 298], "No": [2, 4, 5, 11, 15, 37, 48, 68, 76, 83, 98, 108, 111, 120, 135, 180, 206, 209, 216, 222, 223, 232, 233, 238, 239, 240, 245, 249, 255, 256, 258, 286, 298], "mani": [2, 3, 4, 7, 12, 14, 15, 17, 19, 21, 22, 23, 28, 29, 30, 32, 34, 35, 37, 39, 47, 48, 49, 50, 56, 59, 64, 68, 69, 70, 72, 73, 74, 76, 80, 93, 95, 98, 99, 104, 108, 109, 128, 129, 135, 137, 145, 148, 149, 152, 169, 185, 193, 204, 207, 209, 210, 211, 213, 215, 216, 224, 227, 228, 230, 232, 233, 236, 237, 238, 239, 240, 244, 253, 258, 286, 287, 289, 290, 291, 292, 296, 297, 298], "integr": [2, 11, 12, 14, 15, 18, 29, 39, 41, 47, 60, 67, 68, 70, 73, 74, 86, 87, 88, 91, 97, 99, 104, 107, 108, 119, 121, 128, 133, 135, 145, 152, 171, 180, 183, 186, 189, 194, 196, 201, 205, 207, 210, 211, 213, 216, 217, 220, 222, 223, 230, 236, 237, 240, 253, 261, 265, 268, 269, 272, 273, 277, 280, 288, 291, 296], "algorithm": [2, 4, 14, 21, 28, 32, 34, 36, 37, 47, 52, 53, 58, 59, 60, 62, 64, 66, 67, 68, 69, 72, 73, 74, 80, 85, 93, 95, 98, 101, 104, 105, 108, 111, 120, 127, 149, 172, 190, 195, 205, 206, 207, 208, 209, 210, 211, 214, 215, 217, 221, 225, 228, 229, 232, 233, 236, 238, 239, 240, 246, 255, 258, 282, 287, 292, 293, 297], "simplif": [2, 14, 15, 21, 26, 42, 44, 46, 47, 49, 68, 70, 73, 74, 93, 99, 104, 110, 125, 135, 149, 152, 169, 185, 195, 216, 221, 231, 232, 236, 238, 239, 276, 277, 286, 288, 290, 291], "collect": [2, 5, 20, 25, 48, 49, 59, 68, 85, 95, 108, 111, 119, 133, 143, 152, 185, 192, 205, 211, 216, 229, 230, 232, 236, 240, 251, 258], "factor": [2, 12, 14, 15, 50, 59, 60, 67, 68, 69, 72, 73, 74, 76, 93, 95, 104, 108, 111, 119, 152, 154, 162, 166, 169, 181, 185, 189, 190, 191, 192, 207, 209, 210, 211, 212, 214, 215, 216, 223, 229, 230, 232, 233, 236, 238, 240, 244, 255, 269, 272, 291, 293], "matric": [2, 4, 14, 20, 21, 45, 49, 68, 69, 95, 105, 107, 119, 127, 128, 129, 135, 139, 149, 152, 154, 157, 158, 160, 168, 169, 179, 184, 195, 204, 205, 209, 215, 220, 221, 228, 230, 232, 233, 236, 238, 239, 241, 253, 254, 282, 288, 290, 291], "thu": [2, 3, 11, 13, 14, 15, 19, 30, 32, 33, 35, 45, 53, 59, 60, 68, 69, 70, 74, 76, 91, 93, 95, 99, 102, 104, 107, 108, 120, 128, 129, 133, 139, 145, 149, 190, 195, 208, 213, 215, 217, 221, 227, 230, 232, 253, 258, 259, 270, 271, 289, 292, 297, 298], "speed": [2, 4, 11, 13, 44, 49, 59, 68, 69, 72, 99, 108, 109, 121, 127, 128, 129, 133, 135, 137, 138, 139, 140, 142, 143, 144, 146, 147, 148, 152, 153, 156, 159, 189, 194, 195, 199, 204, 205, 217, 220, 221, 227, 232, 236, 252, 255, 258, 292, 293], "up": [2, 3, 7, 8, 9, 11, 12, 13, 14, 19, 21, 22, 23, 35, 39, 44, 47, 49, 51, 59, 60, 62, 68, 69, 70, 72, 73, 74, 76, 77, 84, 85, 89, 93, 95, 96, 98, 99, 104, 108, 109, 111, 121, 123, 130, 131, 133, 137, 138, 142, 144, 149, 150, 152, 153, 165, 180, 182, 199, 205, 206, 207, 209, 210, 211, 215, 217, 220, 221, 222, 227, 229, 230, 232, 233, 236, 237, 238, 239, 252, 253, 254, 255, 256, 259, 288, 289, 292, 293, 295], "becaus": [2, 3, 4, 5, 8, 11, 12, 13, 14, 15, 17, 21, 22, 23, 28, 31, 32, 33, 34, 35, 36, 37, 39, 40, 45, 49, 60, 67, 68, 69, 74, 80, 84, 85, 93, 95, 98, 102, 104, 108, 110, 127, 133, 134, 135, 139, 165, 173, 185, 187, 189, 190, 203, 206, 207, 209, 210, 211, 213, 215, 216, 217, 219, 220, 223, 227, 230, 232, 233, 236, 237, 238, 239, 249, 251, 252, 254, 258, 259, 261, 269, 287, 289, 291, 292, 293, 296, 297, 298], "make": [2, 3, 4, 5, 8, 9, 12, 13, 14, 15, 17, 19, 21, 22, 23, 25, 28, 33, 34, 36, 40, 43, 44, 45, 47, 49, 50, 58, 59, 67, 68, 69, 70, 71, 72, 73, 74, 76, 80, 84, 95, 96, 98, 104, 107, 108, 109, 110, 111, 112, 113, 115, 128, 133, 135, 137, 138, 142, 143, 147, 149, 150, 152, 165, 182, 187, 194, 200, 203, 206, 209, 210, 211, 213, 215, 216, 217, 219, 220, 223, 228, 229, 230, 232, 236, 237, 238, 239, 244, 246, 249, 251, 252, 253, 254, 256, 258, 259, 269, 274, 275, 289, 290, 291, 292, 293, 297], "non": [2, 3, 12, 14, 15, 21, 23, 28, 34, 35, 37, 40, 45, 47, 50, 58, 61, 67, 68, 69, 73, 74, 75, 76, 77, 78, 81, 82, 83, 95, 97, 98, 99, 100, 101, 104, 105, 107, 108, 123, 128, 130, 137, 139, 143, 147, 148, 152, 169, 174, 184, 185, 187, 201, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 219, 220, 223, 227, 228, 230, 232, 233, 235, 236, 238, 239, 240, 241, 244, 245, 246, 251, 253, 258, 261, 272, 292, 297, 298], "who": [2, 3, 4, 9, 11, 12, 19, 23, 69, 70, 152, 204, 213, 220, 290], "abl": [2, 3, 4, 11, 12, 14, 19, 21, 23, 31, 35, 48, 49, 59, 64, 68, 69, 70, 79, 87, 95, 101, 104, 108, 116, 135, 147, 149, 150, 152, 153, 207, 209, 210, 211, 216, 217, 236, 239, 251, 269, 291, 296, 298], "better": [2, 3, 4, 8, 11, 12, 13, 14, 15, 21, 22, 23, 41, 48, 49, 60, 68, 72, 76, 95, 98, 119, 135, 165, 193, 206, 209, 210, 211, 223, 227, 228, 229, 230, 236, 237, 238, 239, 240, 252, 258, 259, 291, 297], "experi": [2, 137, 239, 240], "design": [2, 3, 4, 13, 14, 16, 18, 22, 23, 26, 29, 34, 38, 45, 50, 58, 68, 104, 107, 110, 133, 152, 153, 209, 210, 214, 220, 225, 230, 236, 239, 291, 292, 296], "interfac": [2, 5, 7, 9, 11, 12, 14, 32, 47, 68, 96, 127, 154, 180, 200, 204, 209, 210, 213, 218, 239, 252, 253], "ipython": [2, 4, 14, 15, 39, 96, 152, 200, 259, 264, 295, 296], "jupyt": [2, 7, 11, 14, 23, 259], "notebook": [2, 14, 23, 39, 96, 200, 259, 295, 296], "init_sess": [2, 96, 296], "command": [2, 4, 8, 9, 11, 12, 14, 15, 28, 31, 37, 39, 49, 72, 96, 135, 147, 152, 200, 206, 220, 251, 252, 296], "In": [2, 3, 4, 5, 8, 9, 11, 12, 13, 14, 15, 17, 19, 21, 22, 23, 28, 32, 37, 39, 45, 47, 48, 49, 50, 51, 52, 57, 58, 59, 60, 67, 68, 69, 70, 72, 73, 74, 76, 81, 83, 84, 85, 86, 93, 95, 96, 97, 98, 99, 101, 104, 105, 108, 110, 112, 115, 119, 123, 127, 128, 130, 133, 135, 138, 139, 140, 145, 146, 147, 148, 149, 150, 152, 153, 171, 173, 174, 175, 180, 184, 185, 188, 189, 190, 194, 199, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 219, 220, 227, 228, 229, 230, 232, 233, 236, 237, 238, 239, 240, 241, 242, 244, 246, 249, 251, 253, 255, 256, 258, 259, 262, 265, 269, 270, 272, 274, 286, 289, 290, 291, 292, 293, 296, 297, 298], "usual": [2, 12, 13, 14, 15, 19, 21, 28, 48, 50, 59, 67, 68, 69, 86, 93, 95, 104, 145, 171, 183, 189, 190, 201, 203, 204, 207, 208, 209, 210, 211, 213, 216, 219, 220, 221, 227, 230, 236, 239, 240, 241, 245, 246, 253, 255, 259, 265, 274, 286, 289, 292, 296, 297], "matplotlib": [2, 4, 5, 8, 13, 35, 39, 91, 96, 117, 152, 165, 200, 206, 296], "flag": [2, 3, 17, 23, 28, 47, 49, 59, 60, 64, 66, 68, 83, 95, 98, 99, 100, 104, 108, 127, 135, 169, 206, 211, 213, 216, 217, 220, 221, 222, 228, 232, 233, 236, 238, 239, 246, 251, 252, 258, 261, 286, 297], "auto_symbol": [2, 96, 110], "auto_int_to_integ": [2, 96], "qt": 2, "consol": [2, 3, 15, 68, 96, 200, 206, 296], "express": [2, 3, 4, 5, 14, 17, 18, 21, 22, 23, 29, 30, 33, 35, 37, 41, 42, 43, 44, 45, 46, 47, 60, 67, 68, 69, 70, 71, 72, 73, 74, 76, 78, 81, 83, 84, 91, 92, 93, 95, 96, 99, 102, 103, 104, 107, 108, 109, 111, 119, 120, 122, 123, 124, 126, 127, 128, 129, 130, 131, 133, 134, 135, 139, 145, 146, 147, 148, 149, 150, 152, 153, 160, 164, 168, 169, 173, 174, 177, 180, 182, 183, 184, 185, 187, 188, 189, 190, 192, 194, 195, 197, 199, 200, 201, 204, 205, 206, 207, 208, 209, 211, 213, 215, 216, 217, 220, 221, 223, 225, 226, 227, 228, 229, 230, 232, 233, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 249, 252, 253, 254, 255, 256, 259, 261, 265, 267, 268, 269, 271, 272, 274, 280, 282, 287, 288, 289, 290, 291, 293, 296, 297, 298], "mathjax": [2, 5, 96, 200, 296], "preview": [2, 11, 48, 254], "convert": [2, 3, 8, 13, 14, 15, 17, 21, 22, 23, 26, 31, 33, 34, 35, 41, 45, 49, 52, 60, 64, 68, 69, 72, 73, 74, 81, 82, 83, 85, 88, 89, 92, 96, 98, 99, 104, 107, 108, 110, 119, 130, 150, 179, 182, 188, 189, 190, 192, 199, 206, 207, 209, 211, 213, 215, 216, 217, 218, 220, 221, 222, 228, 229, 230, 232, 233, 236, 237, 239, 240, 241, 242, 245, 251, 252, 258, 259, 261, 263, 268, 283, 288, 289, 292, 297], "imag": [2, 8, 25, 59, 127, 141, 146, 152, 154, 158, 207, 211, 213, 220, 228, 239], "render": [2, 4, 5, 8, 11, 12, 49, 68, 96, 200, 206, 220, 259, 296], "either": [2, 4, 5, 8, 11, 12, 13, 14, 15, 21, 22, 23, 28, 31, 32, 33, 34, 36, 41, 45, 47, 48, 52, 60, 67, 68, 69, 72, 73, 74, 76, 83, 85, 91, 93, 95, 96, 98, 99, 104, 108, 119, 124, 127, 128, 129, 131, 133, 134, 135, 148, 150, 152, 169, 175, 182, 185, 187, 189, 200, 204, 206, 208, 209, 210, 211, 213, 215, 216, 220, 222, 227, 228, 229, 230, 233, 236, 237, 238, 239, 240, 241, 244, 245, 252, 258, 259, 265, 274, 289, 292, 293], "save": [2, 9, 12, 13, 14, 47, 68, 104, 108, 206, 219, 238, 255], "show": [2, 3, 4, 5, 8, 11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 35, 49, 60, 67, 68, 72, 74, 91, 93, 95, 104, 108, 111, 112, 115, 117, 123, 131, 135, 141, 146, 150, 152, 180, 184, 188, 190, 195, 203, 204, 206, 207, 210, 211, 213, 215, 216, 220, 221, 223, 227, 228, 229, 230, 232, 233, 236, 238, 240, 241, 249, 252, 253, 256, 258, 259, 289, 291, 293, 296], "viewer": [2, 5, 48, 220, 254], "distribut": [2, 8, 39, 59, 66, 68, 76, 84, 95, 111, 112, 113, 184, 208, 211, 216, 220, 246], "texliv": [2, 8, 220], "miktex": [2, 8], "note": [2, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 17, 19, 21, 22, 25, 26, 29, 30, 31, 33, 34, 35, 36, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 58, 59, 60, 61, 64, 66, 67, 69, 72, 73, 74, 75, 76, 78, 79, 81, 82, 83, 84, 85, 93, 95, 96, 98, 99, 101, 104, 108, 110, 119, 120, 124, 125, 127, 128, 129, 131, 133, 134, 135, 137, 139, 142, 150, 152, 158, 161, 169, 179, 180, 182, 184, 185, 186, 188, 194, 195, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 215, 216, 217, 219, 220, 221, 222, 223, 226, 228, 230, 232, 233, 235, 236, 237, 238, 239, 240, 245, 246, 249, 251, 252, 253, 254, 255, 256, 258, 259, 261, 262, 270, 272, 274, 286, 287, 288, 290, 291, 292, 293, 297], "parser": [2, 101, 110, 145, 152, 251, 282], "modul": [2, 3, 4, 5, 7, 11, 12, 14, 15, 18, 21, 26, 31, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 58, 60, 68, 69, 71, 73, 74, 76, 80, 84, 88, 91, 94, 95, 96, 98, 101, 102, 103, 104, 109, 110, 111, 113, 114, 115, 117, 120, 123, 133, 135, 136, 141, 145, 147, 148, 150, 152, 154, 157, 159, 160, 172, 175, 188, 189, 190, 191, 201, 204, 206, 211, 212, 214, 217, 218, 220, 224, 227, 230, 234, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 251, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 268, 270, 272, 273, 274, 275, 276, 282, 283, 284, 286, 289, 291, 297, 298], "time": [2, 3, 5, 7, 8, 11, 12, 13, 14, 15, 19, 21, 22, 26, 28, 35, 37, 40, 44, 45, 49, 51, 59, 60, 64, 68, 69, 73, 76, 91, 93, 98, 99, 104, 105, 107, 108, 109, 110, 115, 116, 117, 119, 123, 128, 129, 131, 133, 135, 137, 139, 142, 143, 145, 147, 148, 149, 150, 152, 153, 159, 169, 174, 182, 183, 187, 188, 189, 190, 191, 194, 195, 197, 199, 200, 201, 202, 203, 204, 205, 207, 209, 210, 213, 214, 215, 216, 217, 219, 220, 227, 228, 229, 230, 232, 236, 238, 240, 249, 251, 252, 257, 258, 259, 272, 274, 284, 287, 291, 292, 293], "parse_expr": [2, 13, 21, 37, 110], "mathematca": 2, "parse_mathematica": [2, 13, 110], "maxima": [2, 32, 110, 239], "parse_maxima": [2, 110], "antlr": [2, 110, 135], "runtim": [2, 14, 49, 68, 129, 259], "autolev": [2, 137, 145, 282], "call": [2, 3, 4, 5, 7, 9, 11, 12, 14, 15, 18, 19, 21, 22, 23, 28, 29, 32, 33, 34, 35, 36, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 57, 58, 59, 60, 66, 68, 69, 71, 72, 73, 75, 76, 78, 83, 84, 86, 91, 93, 95, 97, 98, 99, 100, 101, 102, 104, 106, 107, 108, 110, 111, 112, 119, 123, 127, 131, 135, 137, 139, 146, 149, 150, 175, 177, 180, 185, 189, 190, 195, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 215, 216, 217, 218, 219, 220, 222, 227, 228, 230, 232, 233, 235, 236, 238, 239, 240, 241, 242, 244, 246, 247, 249, 251, 252, 253, 254, 255, 256, 258, 259, 261, 265, 268, 269, 272, 274, 287, 289, 291, 292, 293, 296, 297, 298], "antlr4": [2, 110], "python3": [2, 8, 49, 110, 220], "awar": [2, 3, 4, 12, 14, 15, 22, 47, 68, 72, 98, 104, 230, 240, 259], "version": [2, 3, 4, 5, 7, 8, 9, 11, 12, 21, 22, 23, 25, 37, 38, 39, 42, 48, 49, 59, 60, 66, 68, 69, 73, 74, 76, 95, 98, 100, 102, 104, 106, 108, 122, 124, 127, 135, 169, 183, 187, 195, 205, 206, 207, 209, 210, 211, 213, 215, 216, 220, 223, 232, 238, 240, 250, 251, 253, 254, 255, 256, 258, 259, 263, 265, 271, 289, 292, 293], "must": [2, 3, 4, 11, 12, 13, 14, 15, 21, 22, 35, 41, 42, 43, 44, 49, 59, 60, 62, 64, 66, 67, 68, 69, 70, 73, 74, 76, 78, 81, 84, 87, 90, 91, 93, 95, 98, 99, 100, 101, 104, 107, 108, 111, 112, 113, 115, 117, 119, 120, 127, 128, 129, 131, 133, 134, 135, 137, 145, 147, 148, 149, 150, 152, 165, 180, 182, 185, 195, 204, 205, 206, 207, 208, 209, 211, 213, 215, 216, 220, 221, 228, 229, 230, 232, 233, 236, 238, 239, 240, 244, 245, 251, 252, 253, 254, 255, 256, 258, 259, 262, 289, 291, 292, 296, 297], "match": [2, 3, 4, 11, 12, 13, 15, 21, 23, 35, 59, 60, 67, 68, 76, 81, 93, 95, 99, 104, 127, 133, 161, 186, 194, 195, 209, 216, 232, 233, 236, 237, 238, 240, 249, 251, 253, 258, 259, 271, 287], "wa": [2, 3, 9, 11, 12, 13, 15, 17, 21, 23, 35, 51, 57, 59, 60, 62, 68, 69, 70, 76, 81, 104, 108, 110, 123, 124, 130, 135, 137, 139, 149, 150, 180, 190, 203, 204, 205, 207, 209, 213, 215, 216, 217, 219, 220, 229, 230, 232, 236, 238, 240, 249, 251, 254, 256, 258, 259, 287, 289, 291, 292, 295], "compil": [2, 49, 96, 109, 123, 152, 200, 220, 232, 245, 251, 252, 253, 276, 291], "4": [2, 5, 11, 12, 15, 17, 19, 21, 22, 23, 28, 30, 31, 32, 33, 34, 35, 36, 37, 41, 42, 44, 45, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 81, 82, 83, 84, 85, 87, 90, 91, 93, 95, 97, 98, 99, 100, 101, 102, 104, 105, 107, 108, 110, 111, 113, 115, 117, 119, 120, 121, 125, 135, 137, 138, 139, 140, 142, 143, 144, 145, 146, 149, 150, 152, 153, 154, 157, 161, 164, 169, 179, 180, 182, 183, 184, 185, 186, 188, 195, 196, 199, 201, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 251, 252, 255, 258, 259, 265, 268, 269, 270, 272, 274, 275, 286, 287, 289, 291, 292, 293, 297, 298], "clang": [2, 110], "bind": [2, 49, 220, 252], "parse_c": 2, "lfortran": [2, 110], "fortran": [2, 14, 19, 23, 47, 109, 110, 123, 152, 205, 253, 296], "satisfi": [2, 5, 12, 13, 21, 31, 32, 36, 44, 45, 47, 50, 56, 59, 64, 68, 69, 73, 76, 78, 91, 93, 97, 98, 104, 108, 129, 149, 169, 174, 207, 208, 211, 213, 215, 216, 220, 226, 227, 228, 233, 236, 237, 238, 239, 240, 246, 292, 297], "includ": [2, 3, 4, 5, 8, 11, 12, 13, 14, 15, 21, 23, 25, 28, 31, 32, 36, 39, 44, 45, 47, 48, 49, 60, 64, 67, 68, 69, 70, 72, 73, 74, 76, 80, 86, 93, 95, 98, 99, 101, 103, 104, 108, 109, 110, 121, 123, 133, 135, 137, 139, 140, 145, 147, 149, 152, 165, 169, 174, 179, 182, 183, 193, 201, 204, 208, 209, 211, 212, 213, 215, 216, 219, 220, 221, 226, 227, 228, 230, 232, 235, 236, 237, 238, 240, 243, 246, 249, 251, 253, 254, 255, 256, 258, 265, 267, 269, 274, 276, 287, 291, 292, 293, 297, 298], "implement": [2, 4, 5, 11, 12, 13, 14, 16, 18, 22, 23, 32, 34, 36, 37, 38, 41, 42, 43, 44, 47, 48, 49, 50, 53, 58, 59, 60, 65, 68, 69, 71, 73, 74, 76, 79, 81, 88, 89, 91, 92, 95, 98, 99, 100, 104, 108, 109, 110, 123, 131, 135, 145, 150, 154, 156, 157, 160, 169, 170, 178, 179, 181, 189, 194, 196, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 221, 224, 227, 228, 229, 232, 233, 236, 237, 238, 239, 240, 244, 245, 255, 258, 259, 262, 273, 276, 280, 287, 291, 297], "dpll": 2, "But": [2, 3, 5, 7, 12, 13, 14, 15, 23, 28, 37, 67, 68, 76, 82, 92, 99, 104, 108, 173, 174, 185, 190, 195, 207, 208, 213, 217, 227, 229, 230, 232, 233, 236, 238, 239, 245, 255, 258, 259, 268, 287, 289, 291, 292, 297], "sat": [2, 43], "solver": [2, 4, 11, 12, 14, 31, 34, 43, 76, 104, 108, 128, 133, 145, 152, 153, 209, 212, 220, 232, 233, 237, 251, 276, 277, 283, 288, 290], "ask": [2, 4, 7, 9, 11, 14, 15, 18, 21, 22, 43, 44, 45, 46, 68, 80, 93, 135, 190, 207, 226, 232, 239, 258, 277, 289], "pycosat": 2, "forc": [2, 15, 19, 22, 23, 68, 72, 74, 78, 84, 93, 95, 98, 111, 112, 113, 115, 124, 127, 128, 130, 131, 133, 137, 139, 140, 141, 142, 145, 147, 148, 149, 150, 152, 173, 174, 188, 201, 204, 206, 208, 210, 229, 232, 233, 238, 251, 272, 274, 282, 296, 297], "pysat": 2, "minisat": 2, "minisat22": 2, "heavi": [2, 12, 240, 292], "primarili": [2, 14, 21, 49, 68, 74, 108, 111, 184, 216, 218, 252, 255, 261, 269], "support": [2, 3, 4, 5, 11, 13, 14, 15, 23, 34, 39, 41, 42, 43, 44, 47, 48, 49, 60, 68, 72, 75, 76, 78, 92, 95, 101, 104, 108, 109, 110, 111, 112, 113, 115, 116, 119, 123, 127, 135, 152, 180, 195, 203, 206, 208, 209, 210, 211, 213, 215, 216, 217, 220, 225, 226, 227, 228, 232, 236, 237, 238, 239, 240, 241, 245, 249, 251, 252, 253, 259, 270, 272, 287, 289, 292, 296], "give": [2, 3, 4, 7, 11, 15, 17, 21, 22, 23, 28, 30, 32, 33, 34, 35, 36, 37, 41, 42, 44, 49, 50, 57, 59, 60, 61, 62, 67, 68, 69, 70, 73, 74, 76, 78, 80, 81, 83, 84, 92, 93, 95, 96, 98, 101, 104, 107, 108, 109, 111, 115, 119, 127, 135, 152, 164, 179, 180, 182, 183, 187, 188, 190, 191, 193, 195, 199, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 215, 216, 217, 220, 221, 222, 223, 227, 228, 229, 230, 232, 233, 236, 238, 239, 240, 251, 252, 253, 258, 269, 274, 289, 290, 292, 297, 298], "rudimentari": [2, 23, 213], "text": [2, 3, 4, 5, 11, 12, 13, 14, 23, 25, 39, 49, 59, 69, 73, 74, 76, 86, 93, 96, 99, 104, 108, 150, 190, 200, 205, 206, 207, 220, 227, 233, 236, 239, 240, 251], "pyglet": [2, 220], "pygletplot": [2, 206], "2d": [2, 81, 82, 84, 111, 112, 113, 115, 163, 195, 206, 220, 233, 245, 291], "3d": [2, 41, 52, 81, 82, 111, 163, 186, 201, 206, 269, 271, 272, 273, 274], "evalu": [2, 4, 14, 19, 21, 22, 29, 35, 37, 41, 42, 43, 44, 47, 49, 68, 70, 73, 74, 76, 79, 83, 84, 93, 95, 98, 101, 104, 108, 109, 110, 119, 123, 125, 135, 149, 150, 160, 162, 164, 166, 168, 171, 174, 182, 185, 205, 206, 209, 210, 211, 213, 214, 216, 220, 221, 226, 227, 228, 230, 232, 233, 236, 238, 239, 240, 241, 242, 252, 253, 254, 259, 272, 277, 286, 287, 288, 289, 291, 293], "numer": [2, 4, 12, 13, 14, 15, 17, 19, 21, 29, 30, 31, 32, 33, 36, 41, 45, 47, 49, 67, 68, 73, 76, 80, 84, 91, 104, 108, 110, 115, 116, 117, 119, 127, 128, 129, 135, 137, 145, 149, 150, 153, 157, 164, 167, 182, 194, 204, 206, 209, 210, 211, 213, 214, 215, 216, 219, 220, 229, 230, 232, 236, 238, 239, 245, 251, 252, 258, 259, 277, 286, 289, 293, 297], "variou": [2, 4, 5, 14, 19, 23, 28, 31, 47, 49, 51, 52, 59, 67, 68, 73, 88, 93, 95, 98, 104, 130, 150, 164, 168, 169, 180, 182, 207, 208, 211, 212, 213, 215, 221, 227, 230, 233, 236, 237, 239, 253, 297], "primari": [2, 3, 4, 5, 12, 21, 23, 68, 80, 98, 204, 207, 209, 253, 259], "vehicl": 2, "between": [2, 3, 9, 12, 13, 14, 18, 22, 23, 28, 32, 48, 49, 58, 59, 60, 62, 66, 68, 70, 73, 76, 78, 80, 81, 82, 83, 84, 85, 95, 97, 98, 101, 102, 104, 108, 109, 110, 115, 116, 117, 119, 127, 130, 131, 133, 134, 135, 138, 142, 144, 146, 149, 150, 152, 153, 154, 157, 158, 164, 171, 173, 174, 175, 179, 182, 183, 184, 185, 188, 189, 190, 194, 195, 196, 197, 199, 201, 203, 204, 206, 207, 209, 211, 213, 215, 216, 220, 222, 232, 236, 237, 238, 239, 240, 241, 254, 259, 265, 268, 269, 272, 274, 289], "standard": [2, 5, 12, 13, 14, 15, 21, 23, 28, 32, 33, 35, 37, 49, 68, 72, 74, 76, 91, 93, 95, 96, 97, 98, 102, 104, 108, 109, 110, 122, 162, 166, 195, 201, 205, 207, 210, 211, 213, 220, 223, 228, 232, 233, 236, 239, 240, 242, 253, 259, 262, 269, 274, 286, 289, 297], "wai": [2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 28, 30, 32, 35, 40, 48, 50, 51, 52, 57, 59, 60, 61, 64, 68, 70, 73, 76, 84, 88, 92, 93, 95, 97, 101, 104, 107, 108, 110, 111, 115, 123, 128, 130, 133, 135, 139, 141, 142, 145, 149, 165, 179, 182, 183, 188, 190, 193, 194, 195, 197, 199, 201, 203, 206, 207, 208, 209, 210, 211, 213, 215, 216, 217, 219, 220, 227, 230, 232, 233, 236, 237, 239, 241, 242, 245, 246, 249, 253, 255, 258, 259, 262, 265, 269, 270, 271, 272, 274, 286, 287, 289, 290, 291, 292, 297, 298], "principl": [2, 69, 99, 108, 156, 205, 207, 208, 213, 229, 238], "pass": [2, 3, 4, 11, 12, 14, 15, 17, 18, 21, 22, 23, 30, 31, 34, 35, 37, 40, 41, 44, 47, 48, 49, 59, 60, 68, 69, 70, 72, 74, 75, 76, 78, 81, 82, 84, 95, 96, 98, 99, 101, 104, 105, 108, 110, 111, 117, 119, 124, 128, 131, 133, 134, 135, 139, 150, 152, 153, 157, 174, 175, 179, 180, 182, 183, 195, 200, 206, 207, 209, 210, 211, 213, 215, 216, 218, 220, 221, 227, 228, 232, 233, 236, 237, 238, 239, 240, 241, 244, 245, 246, 249, 251, 252, 253, 254, 256, 258, 259, 261, 264, 265, 286, 287, 292, 296, 297, 298], "appropri": [2, 4, 5, 11, 12, 13, 15, 19, 32, 36, 59, 68, 74, 83, 104, 123, 137, 174, 175, 185, 195, 203, 206, 209, 210, 216, 217, 220, 226, 227, 232, 233, 238, 240, 245, 253, 270, 296], "namespac": [2, 4, 13, 40, 49, 50, 68, 133, 211, 233, 236, 237, 251, 253, 254, 259], "dictionari": [2, 12, 13, 14, 31, 35, 37, 48, 49, 57, 59, 60, 66, 68, 73, 82, 84, 95, 97, 99, 104, 107, 108, 110, 111, 125, 128, 129, 133, 135, 137, 139, 142, 147, 149, 175, 185, 195, 204, 206, 208, 209, 211, 213, 215, 216, 218, 220, 227, 232, 233, 236, 237, 238, 239, 240, 244, 246, 251, 255, 258, 259, 265, 286, 293], "third": [2, 3, 17, 28, 41, 49, 59, 60, 68, 76, 78, 82, 104, 119, 127, 133, 182, 188, 189, 203, 208, 216, 230, 236, 239, 240, 242, 256, 258, 287, 292], "argument": [2, 3, 4, 11, 12, 14, 18, 21, 22, 23, 28, 30, 34, 35, 36, 37, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 59, 60, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 81, 84, 85, 93, 95, 96, 98, 99, 101, 104, 107, 108, 110, 111, 117, 119, 127, 128, 131, 133, 134, 135, 147, 148, 150, 152, 159, 162, 166, 168, 171, 174, 179, 180, 182, 183, 184, 185, 193, 200, 201, 205, 206, 207, 208, 209, 210, 211, 213, 215, 216, 219, 220, 221, 222, 226, 227, 228, 229, 230, 232, 233, 236, 237, 238, 240, 242, 244, 245, 251, 252, 253, 254, 255, 256, 258, 259, 261, 269, 270, 272, 286, 287, 292, 293, 297], "default": [2, 3, 4, 5, 11, 12, 13, 14, 15, 21, 23, 28, 32, 33, 35, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 58, 59, 66, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 81, 82, 83, 84, 85, 87, 90, 95, 96, 98, 99, 101, 104, 105, 108, 109, 110, 111, 112, 115, 117, 119, 121, 123, 124, 125, 127, 128, 129, 133, 135, 149, 158, 175, 177, 180, 182, 183, 185, 189, 191, 194, 195, 197, 199, 200, 205, 206, 208, 209, 210, 211, 213, 215, 216, 217, 219, 220, 221, 222, 223, 227, 228, 229, 232, 233, 236, 237, 238, 239, 240, 245, 246, 251, 252, 253, 255, 256, 258, 259, 261, 265, 286, 287, 291, 293, 296, 297], "translat": [2, 13, 49, 59, 68, 77, 79, 83, 85, 109, 110, 119, 122, 127, 128, 133, 142, 144, 146, 150, 203, 206, 220, 236, 238, 252, 253, 259, 261, 270], "numpi": [2, 4, 12, 13, 14, 23, 28, 33, 34, 35, 39, 49, 68, 91, 96, 109, 117, 135, 152, 169, 179, 206, 209, 220, 240, 245, 252, 253, 259, 286, 289], "By": [2, 15, 21, 23, 28, 32, 33, 35, 41, 42, 44, 49, 58, 67, 68, 70, 72, 73, 76, 82, 83, 87, 91, 93, 98, 99, 104, 107, 108, 109, 110, 111, 112, 117, 124, 180, 185, 206, 208, 209, 210, 211, 213, 215, 216, 217, 219, 220, 222, 227, 229, 232, 233, 236, 238, 239, 240, 244, 246, 247, 251, 254, 258, 259, 272, 286, 291, 292, 297], "produc": [2, 4, 5, 12, 14, 22, 23, 31, 33, 34, 35, 37, 48, 59, 68, 69, 81, 95, 98, 104, 131, 195, 209, 210, 215, 216, 220, 227, 236, 237, 238, 240, 249, 251, 255, 256, 258, 259, 296], "math": [2, 4, 8, 12, 23, 37, 41, 45, 48, 50, 59, 68, 73, 76, 78, 95, 104, 108, 109, 115, 135, 145, 201, 206, 209, 211, 214, 219, 220, 236, 237, 240, 252, 253, 259, 270, 271, 272, 273, 274, 286, 287, 291], "behavior": [2, 3, 12, 13, 14, 15, 23, 59, 68, 73, 76, 95, 110, 122, 123, 145, 149, 180, 207, 208, 215, 216, 220, 221, 225, 227, 229, 232, 249, 252, 254, 258, 259, 289], "backward": [2, 19, 47, 68, 99, 104, 119, 133, 220, 258, 297], "compat": [2, 3, 8, 18, 49, 68, 76, 96, 99, 104, 108, 109, 123, 133, 187, 192, 200, 206, 209, 211, 215, 216, 220, 240, 244, 247, 251, 253, 259], "scipi": [2, 7, 14, 28, 30, 33, 76, 123, 152, 179, 220, 240, 259, 286, 295], "special": [2, 4, 11, 14, 16, 21, 23, 33, 37, 40, 41, 51, 60, 68, 69, 71, 72, 73, 75, 83, 86, 93, 95, 99, 104, 152, 169, 174, 201, 207, 210, 213, 214, 215, 220, 229, 230, 232, 235, 236, 237, 238, 240, 251, 252, 253, 256, 258, 259, 269, 272, 274, 277, 287, 288, 292], "cupi": [2, 109], "cuda": [2, 109], "gpu": [2, 109, 152], "jax": [2, 109, 259], "xla": [2, 109], "program": [2, 5, 15, 21, 49, 52, 60, 152, 190, 205, 253, 255, 289, 291, 295, 297], "tpu": [2, 109], "compatibli": 2, "tensorflow": [2, 259], "machin": [2, 4, 7, 8, 9, 221, 232, 236, 286], "learn": [2, 5, 8, 29, 35, 37, 104, 150, 204, 229, 239, 286, 289, 290, 291, 295], "numexpr": [2, 259], "fast": [2, 21, 35, 49, 68, 103, 104, 108, 128, 129, 157, 211, 212, 213, 214, 215, 216, 217, 223, 227, 236, 238, 255, 258, 259], "alreadi": [2, 3, 7, 9, 10, 11, 12, 13, 15, 21, 23, 25, 31, 32, 35, 37, 39, 41, 59, 60, 68, 69, 77, 78, 81, 82, 84, 93, 95, 99, 105, 108, 115, 120, 124, 133, 135, 149, 154, 180, 182, 185, 201, 203, 204, 206, 209, 210, 213, 215, 219, 223, 229, 230, 232, 236, 239, 240, 246, 270, 272, 287, 289, 290, 291, 295, 296, 297, 298], "number": [2, 3, 4, 5, 11, 12, 13, 14, 17, 18, 21, 23, 26, 28, 31, 32, 33, 36, 37, 41, 43, 44, 47, 48, 49, 50, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 69, 70, 73, 74, 76, 78, 81, 82, 83, 84, 85, 87, 95, 96, 97, 98, 99, 101, 104, 105, 107, 109, 110, 112, 115, 117, 119, 120, 121, 123, 128, 129, 133, 135, 139, 149, 150, 152, 158, 161, 164, 165, 168, 169, 170, 171, 173, 174, 179, 180, 181, 182, 183, 185, 186, 187, 190, 193, 194, 195, 199, 200, 201, 203, 204, 205, 206, 208, 209, 211, 212, 213, 214, 216, 217, 220, 222, 226, 227, 228, 229, 230, 232, 233, 236, 238, 239, 240, 241, 245, 246, 251, 253, 255, 258, 259, 261, 265, 268, 269, 271, 272, 274, 277, 283, 286, 287, 289, 291, 292, 293, 297], "languag": [2, 5, 14, 15, 19, 23, 49, 74, 104, 110, 123, 135, 152, 220, 225, 240, 252, 253, 289, 291, 293, 295, 297], "valid": [2, 4, 5, 11, 13, 21, 22, 23, 31, 35, 42, 44, 46, 47, 48, 49, 61, 67, 68, 73, 74, 84, 104, 108, 110, 125, 127, 128, 129, 133, 135, 137, 154, 158, 177, 182, 189, 192, 194, 195, 200, 204, 210, 213, 216, 219, 220, 228, 232, 233, 236, 238, 239, 240, 259, 293, 297], "rather": [2, 3, 4, 5, 11, 12, 13, 14, 15, 17, 19, 21, 22, 23, 28, 32, 35, 36, 37, 40, 45, 49, 50, 51, 59, 60, 61, 68, 72, 74, 79, 84, 86, 93, 98, 99, 101, 104, 108, 110, 133, 142, 152, 165, 179, 183, 185, 189, 194, 203, 207, 209, 210, 213, 216, 218, 223, 230, 233, 235, 236, 239, 240, 242, 255, 258, 259, 262, 274, 289, 291, 292], "simpli": [2, 3, 5, 8, 12, 21, 22, 30, 31, 45, 50, 51, 67, 68, 70, 74, 78, 99, 101, 104, 108, 110, 111, 115, 120, 124, 135, 137, 149, 175, 180, 190, 201, 204, 210, 216, 217, 228, 229, 230, 235, 236, 239, 256, 258, 259, 272], "string": [2, 3, 4, 5, 7, 11, 12, 14, 15, 23, 41, 42, 48, 49, 52, 57, 68, 69, 70, 71, 72, 75, 81, 91, 96, 97, 98, 101, 104, 108, 110, 111, 113, 115, 117, 123, 124, 127, 128, 129, 130, 156, 165, 169, 179, 183, 187, 193, 194, 195, 199, 200, 201, 206, 209, 211, 215, 220, 221, 227, 232, 236, 240, 241, 244, 245, 246, 251, 252, 253, 258, 259, 261, 263, 265, 267, 269, 288, 289, 292, 296], "repres": [2, 12, 13, 14, 15, 18, 21, 22, 23, 26, 31, 33, 35, 41, 43, 45, 48, 49, 50, 51, 52, 57, 58, 59, 60, 61, 63, 64, 67, 68, 69, 70, 73, 74, 76, 78, 79, 81, 83, 84, 85, 90, 91, 95, 97, 98, 99, 101, 104, 108, 110, 111, 112, 116, 117, 119, 124, 127, 128, 130, 131, 133, 134, 135, 137, 138, 139, 140, 143, 145, 147, 148, 149, 150, 152, 154, 156, 157, 159, 171, 172, 174, 178, 179, 182, 183, 185, 187, 189, 190, 191, 192, 193, 194, 195, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 211, 213, 216, 218, 220, 222, 223, 226, 227, 228, 230, 232, 233, 236, 238, 239, 240, 241, 242, 244, 245, 246, 253, 255, 258, 259, 265, 268, 272, 274, 282, 287, 289, 291, 292, 297, 298], "take": [2, 3, 5, 9, 11, 12, 13, 14, 15, 19, 21, 22, 23, 30, 31, 32, 33, 35, 44, 47, 49, 50, 53, 58, 59, 63, 67, 68, 69, 70, 74, 76, 80, 81, 91, 95, 97, 98, 99, 104, 108, 109, 110, 111, 113, 115, 119, 123, 127, 128, 130, 133, 134, 135, 137, 149, 152, 154, 168, 171, 174, 175, 179, 181, 182, 183, 184, 185, 187, 190, 193, 194, 195, 196, 197, 200, 203, 204, 206, 207, 208, 209, 210, 211, 213, 216, 217, 220, 223, 226, 227, 228, 229, 230, 232, 233, 236, 238, 239, 240, 242, 245, 251, 252, 254, 255, 258, 259, 265, 267, 268, 286, 287, 289, 291, 292, 293, 297], "within": [2, 5, 12, 13, 14, 21, 34, 47, 48, 49, 51, 68, 74, 81, 84, 98, 99, 101, 108, 109, 111, 142, 150, 180, 195, 203, 204, 208, 210, 211, 216, 218, 228, 236, 238, 239, 240, 251, 252, 261], "case": [2, 3, 4, 5, 11, 12, 13, 14, 15, 19, 21, 22, 26, 28, 31, 32, 33, 34, 35, 36, 37, 41, 47, 48, 49, 50, 51, 53, 56, 59, 60, 64, 67, 68, 69, 70, 72, 73, 74, 76, 80, 83, 84, 85, 86, 90, 93, 95, 98, 99, 101, 104, 105, 108, 109, 110, 112, 119, 123, 127, 128, 134, 135, 137, 138, 139, 140, 146, 148, 150, 152, 158, 169, 175, 180, 182, 184, 185, 190, 191, 199, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 215, 216, 217, 219, 220, 225, 227, 228, 229, 230, 232, 233, 235, 236, 237, 238, 240, 241, 244, 246, 249, 251, 253, 254, 256, 258, 259, 260, 261, 262, 265, 268, 269, 287, 291, 292, 293, 296, 297, 298], "abov": [2, 3, 4, 5, 8, 11, 12, 13, 15, 17, 19, 22, 23, 25, 26, 28, 30, 34, 35, 37, 47, 48, 49, 50, 52, 58, 59, 60, 64, 67, 68, 72, 73, 76, 78, 81, 84, 85, 93, 95, 98, 99, 104, 109, 110, 112, 119, 123, 127, 128, 130, 131, 133, 135, 137, 138, 139, 140, 145, 146, 148, 149, 150, 153, 180, 182, 185, 195, 201, 203, 204, 206, 207, 208, 209, 210, 211, 213, 215, 216, 217, 219, 220, 221, 227, 230, 232, 233, 236, 238, 239, 240, 244, 245, 252, 253, 259, 269, 270, 271, 272, 275, 289, 291, 292, 293, 297], "subpackag": [2, 276], "f2py": [2, 49, 109, 252, 253], "ufuncifi": [2, 49, 252], "cython": [2, 49, 109, 152, 252], "codegen": [2, 23, 109, 220, 252, 257, 284], "relat": [2, 3, 4, 5, 11, 12, 14, 22, 42, 44, 45, 47, 50, 52, 58, 59, 66, 70, 73, 74, 84, 90, 93, 95, 104, 108, 113, 115, 122, 128, 139, 142, 145, 146, 152, 154, 159, 167, 169, 189, 195, 199, 203, 205, 206, 207, 209, 213, 215, 216, 217, 219, 220, 224, 226, 227, 230, 232, 233, 235, 236, 238, 239, 240, 258, 297], "reli": [2, 12, 13, 49, 104, 109, 116, 213, 219, 220, 227, 232, 239, 254, 259, 293], "llvm": 2, "gcc": [2, 253], "ifort": 2, "therefor": [2, 3, 4, 12, 23, 28, 32, 50, 59, 64, 68, 72, 76, 81, 84, 97, 108, 119, 127, 133, 201, 204, 205, 206, 210, 213, 216, 220, 236, 239, 240, 241, 246, 265, 267, 269, 270, 272, 274], "given": [2, 3, 5, 8, 12, 13, 14, 15, 17, 19, 21, 23, 26, 28, 30, 33, 35, 41, 43, 44, 47, 48, 49, 50, 52, 56, 57, 58, 59, 60, 61, 62, 64, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 95, 97, 98, 99, 101, 104, 107, 108, 110, 111, 115, 117, 119, 120, 124, 125, 127, 128, 130, 133, 135, 139, 150, 158, 175, 180, 182, 189, 190, 191, 193, 195, 196, 197, 199, 201, 204, 205, 206, 207, 208, 209, 210, 211, 213, 215, 216, 217, 218, 219, 220, 223, 225, 226, 227, 228, 229, 230, 232, 233, 235, 236, 237, 238, 239, 240, 241, 245, 246, 249, 251, 253, 255, 258, 259, 261, 262, 265, 268, 270, 272, 274, 286, 292, 295, 297, 298], "instead": [2, 3, 4, 5, 8, 11, 12, 13, 14, 15, 17, 21, 22, 23, 30, 32, 33, 35, 36, 37, 40, 41, 42, 44, 48, 49, 59, 61, 64, 68, 70, 71, 72, 73, 76, 95, 96, 98, 99, 101, 102, 104, 108, 117, 120, 122, 133, 135, 137, 139, 149, 152, 183, 187, 195, 200, 201, 203, 204, 206, 207, 209, 210, 211, 213, 215, 216, 218, 220, 222, 230, 232, 236, 238, 239, 240, 244, 245, 246, 249, 254, 255, 256, 258, 259, 272, 275, 286, 287, 289, 291, 292, 293, 297, 298], "aesara": [2, 13, 49, 152], "aesaracod": [2, 13, 49, 109, 220], "contain": [2, 3, 4, 5, 8, 11, 12, 13, 14, 15, 17, 21, 22, 23, 30, 31, 32, 33, 35, 36, 37, 40, 42, 43, 47, 48, 49, 50, 51, 59, 60, 64, 66, 67, 70, 71, 72, 74, 76, 77, 79, 81, 82, 83, 84, 85, 94, 95, 97, 98, 99, 101, 104, 107, 108, 109, 110, 111, 114, 115, 117, 118, 120, 124, 128, 129, 130, 133, 137, 139, 149, 150, 152, 153, 154, 155, 156, 158, 159, 160, 172, 175, 177, 180, 182, 185, 204, 205, 206, 207, 208, 209, 210, 211, 213, 215, 216, 220, 221, 222, 227, 228, 230, 232, 233, 234, 236, 237, 238, 239, 240, 244, 245, 246, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 265, 268, 276, 287, 289, 293, 297], "aeseara": 2, "previous": [2, 3, 11, 13, 67, 127, 143, 146, 201, 219, 232, 240, 272], "theano": [2, 13, 152, 296], "return": [2, 3, 4, 5, 11, 12, 13, 14, 15, 17, 19, 21, 22, 23, 28, 31, 32, 34, 36, 37, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 56, 57, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 90, 91, 93, 95, 97, 98, 99, 100, 101, 104, 105, 107, 108, 110, 111, 113, 115, 117, 119, 120, 121, 122, 124, 125, 127, 128, 129, 130, 131, 133, 134, 135, 137, 139, 143, 147, 149, 150, 152, 154, 156, 157, 158, 159, 161, 162, 166, 169, 170, 171, 174, 175, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 191, 192, 193, 194, 195, 196, 197, 199, 201, 204, 205, 206, 207, 208, 209, 210, 211, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 232, 233, 235, 236, 237, 238, 240, 241, 242, 244, 245, 246, 247, 249, 251, 252, 253, 254, 255, 256, 258, 259, 261, 262, 263, 265, 268, 270, 272, 286, 287, 292, 293, 296, 297, 298], "graph": [2, 4, 14, 60, 76, 97, 104, 109, 209, 220, 239, 240, 258, 292, 296], "object": [2, 3, 4, 5, 7, 11, 12, 14, 15, 20, 21, 22, 23, 26, 35, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 52, 58, 59, 60, 61, 62, 63, 67, 68, 70, 73, 74, 76, 78, 79, 80, 81, 83, 84, 85, 93, 95, 98, 99, 101, 102, 104, 109, 110, 111, 112, 115, 117, 119, 120, 123, 124, 127, 128, 129, 130, 131, 133, 134, 135, 139, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 158, 159, 160, 168, 169, 171, 179, 180, 184, 185, 187, 188, 189, 191, 192, 195, 199, 200, 203, 204, 206, 207, 208, 209, 210, 211, 213, 215, 216, 220, 222, 223, 226, 227, 228, 229, 232, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 251, 252, 253, 254, 255, 258, 259, 262, 263, 268, 269, 270, 275, 276, 280, 286, 287, 289, 291, 292, 293, 296, 297], "llvmlite": 2, "llvmjitcod": 2, "jit": [2, 229], "from": [2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 17, 18, 19, 21, 22, 23, 26, 28, 30, 34, 35, 36, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 133, 134, 135, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 177, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 232, 233, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 249, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 263, 265, 267, 268, 269, 270, 271, 272, 274, 275, 283, 286, 287, 289, 291, 292, 293, 296, 297, 298], "around": [2, 3, 4, 5, 7, 11, 12, 13, 14, 15, 22, 23, 39, 47, 57, 60, 68, 69, 70, 72, 74, 77, 84, 88, 104, 107, 108, 115, 124, 127, 131, 134, 145, 149, 153, 204, 210, 213, 215, 220, 222, 227, 233, 236, 239, 240, 251, 265, 267, 287, 289, 291], "llvm_callabl": 2, "callabl": [2, 15, 35, 49, 59, 104, 110, 128, 129, 170, 215, 220, 221, 232, 249, 252, 253, 258, 259, 260], "unlik": [2, 4, 12, 14, 15, 21, 22, 28, 35, 46, 69, 95, 104, 108, 110, 135, 203, 209, 213, 220, 233, 236, 239, 255, 256, 289, 291, 292, 293, 296], "two": [2, 3, 4, 5, 7, 8, 11, 12, 13, 14, 15, 17, 19, 21, 22, 23, 28, 30, 32, 35, 36, 41, 47, 48, 49, 50, 53, 57, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 72, 73, 74, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 93, 95, 97, 98, 99, 101, 104, 108, 109, 111, 112, 113, 115, 116, 119, 120, 123, 124, 127, 128, 131, 134, 138, 143, 145, 146, 147, 149, 150, 157, 158, 159, 164, 165, 169, 171, 174, 175, 180, 181, 182, 183, 184, 185, 187, 189, 190, 194, 195, 196, 197, 199, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 215, 216, 217, 219, 220, 221, 222, 227, 228, 229, 230, 232, 233, 236, 237, 238, 239, 240, 241, 242, 245, 255, 258, 259, 265, 268, 270, 271, 272, 274, 286, 287, 290, 292, 293, 297], "tensorflow_cod": 2, "avail": [2, 5, 7, 8, 9, 13, 14, 15, 21, 28, 34, 37, 38, 39, 48, 49, 59, 60, 67, 68, 73, 76, 95, 104, 108, 109, 110, 135, 149, 152, 206, 210, 211, 213, 216, 220, 221, 226, 228, 230, 232, 233, 238, 239, 240, 241, 245, 246, 251, 258, 259, 264, 265, 289, 296], "order": [2, 3, 4, 5, 11, 12, 13, 14, 15, 17, 19, 21, 22, 26, 28, 30, 35, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 78, 81, 84, 85, 87, 90, 93, 95, 96, 97, 98, 99, 104, 105, 108, 109, 110, 111, 112, 113, 119, 120, 123, 127, 128, 133, 135, 136, 137, 138, 146, 147, 148, 149, 150, 158, 162, 166, 169, 179, 180, 181, 182, 183, 184, 185, 189, 190, 194, 195, 197, 199, 200, 203, 204, 206, 207, 208, 209, 210, 211, 213, 215, 217, 219, 220, 221, 222, 223, 226, 228, 232, 233, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 251, 252, 253, 255, 258, 259, 261, 265, 267, 269, 270, 275, 287, 289, 290, 292, 296, 297, 298], "detect": [2, 8, 40, 47, 101, 104, 108, 206, 210, 220, 236, 237, 239, 241, 258, 296], "assum": [2, 4, 14, 15, 18, 21, 23, 32, 35, 36, 41, 44, 49, 50, 52, 57, 59, 67, 68, 69, 70, 73, 74, 76, 78, 85, 86, 93, 95, 104, 108, 111, 115, 119, 131, 133, 134, 135, 141, 147, 148, 149, 150, 152, 158, 180, 184, 185, 195, 199, 201, 207, 208, 210, 213, 216, 218, 220, 227, 228, 230, 232, 233, 236, 237, 239, 240, 244, 245, 246, 253, 258, 261, 268, 270, 274, 277, 290, 292, 295, 297, 298], "wurlitz": 2, "allow": [2, 3, 5, 11, 12, 13, 14, 15, 21, 23, 25, 28, 45, 48, 49, 50, 52, 59, 61, 64, 67, 68, 69, 72, 74, 76, 78, 79, 80, 93, 96, 98, 99, 101, 102, 104, 108, 109, 110, 112, 127, 128, 134, 135, 137, 145, 149, 150, 152, 157, 169, 185, 189, 190, 191, 204, 206, 207, 210, 211, 213, 215, 216, 217, 220, 225, 227, 228, 229, 232, 233, 236, 238, 239, 240, 241, 245, 251, 254, 256, 258, 259, 270, 289, 292], "captur": [2, 68, 258], "output": [2, 4, 5, 11, 12, 13, 15, 16, 19, 21, 23, 26, 32, 35, 37, 48, 49, 68, 69, 76, 92, 95, 96, 98, 99, 101, 104, 108, 109, 110, 116, 119, 128, 133, 135, 143, 149, 152, 153, 157, 158, 169, 181, 185, 194, 195, 199, 200, 201, 204, 210, 213, 216, 220, 221, 230, 232, 233, 235, 236, 238, 240, 245, 251, 252, 253, 255, 258, 259, 265, 289, 291, 292, 293, 296, 297, 298], "suit": [2, 3, 5, 11, 12, 21, 23, 32, 33, 48, 206, 216, 249, 251], "stat": [2, 9, 276, 283], "sampl": [2, 19, 59, 71, 117, 119, 169, 206, 220, 240, 287, 291], "At": [2, 12, 21, 23, 32, 47, 64, 74, 76, 95, 108, 111, 112, 123, 190, 194, 204, 209, 215, 230, 259], "least": [2, 3, 5, 7, 11, 12, 13, 17, 21, 35, 45, 47, 49, 59, 68, 74, 80, 92, 93, 95, 104, 108, 109, 128, 165, 179, 187, 189, 207, 208, 210, 211, 213, 215, 216, 227, 229, 232, 236, 238, 239, 240, 253, 297], "follow": [2, 3, 4, 5, 7, 8, 11, 12, 13, 15, 17, 19, 21, 22, 23, 26, 28, 30, 31, 32, 33, 34, 35, 36, 37, 39, 42, 44, 47, 48, 49, 50, 51, 57, 58, 59, 60, 61, 64, 67, 68, 69, 72, 73, 74, 76, 80, 82, 84, 91, 92, 93, 95, 98, 99, 101, 104, 108, 109, 111, 112, 115, 127, 128, 130, 131, 133, 134, 135, 137, 145, 146, 147, 148, 149, 150, 152, 154, 158, 177, 180, 182, 185, 188, 190, 194, 195, 201, 203, 204, 205, 206, 207, 208, 211, 213, 214, 215, 216, 218, 219, 220, 221, 222, 227, 229, 230, 232, 233, 236, 237, 238, 239, 240, 241, 244, 245, 246, 251, 254, 255, 258, 259, 262, 269, 270, 272, 286, 287, 289, 290, 292, 293, 297, 298], "random": [2, 4, 13, 51, 52, 57, 59, 60, 66, 69, 78, 81, 82, 103, 104, 108, 169, 181, 206, 211, 213, 215, 216, 220, 250, 251, 254, 258, 289, 293, 297], "pymc": [2, 240], "manipul": [2, 14, 18, 19, 21, 28, 31, 33, 35, 48, 49, 50, 59, 68, 74, 76, 93, 108, 109, 126, 135, 145, 150, 183, 203, 209, 210, 211, 214, 219, 220, 222, 229, 232, 243, 258, 276, 282, 283, 286, 287, 288, 289, 290, 291, 293, 296, 297], "first": [2, 4, 5, 7, 8, 9, 11, 12, 14, 15, 19, 21, 22, 23, 25, 28, 32, 35, 36, 39, 41, 48, 49, 50, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 81, 82, 84, 85, 92, 93, 95, 97, 98, 99, 104, 107, 108, 111, 112, 119, 120, 125, 127, 128, 130, 131, 133, 134, 135, 137, 138, 139, 140, 145, 146, 149, 150, 153, 157, 158, 162, 166, 169, 174, 175, 178, 179, 180, 181, 182, 184, 185, 188, 190, 195, 199, 203, 204, 206, 207, 209, 211, 213, 214, 215, 216, 217, 220, 221, 222, 223, 226, 227, 229, 230, 232, 233, 236, 237, 238, 239, 240, 244, 246, 249, 251, 252, 253, 254, 258, 259, 261, 270, 275, 286, 287, 289, 291, 292, 293, 295, 297, 298], "use_symengin": 2, "1": [2, 3, 5, 7, 8, 11, 12, 14, 15, 17, 18, 19, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 113, 115, 117, 119, 120, 121, 122, 123, 124, 125, 127, 128, 130, 131, 133, 134, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 150, 152, 153, 154, 156, 157, 158, 159, 160, 164, 167, 168, 169, 170, 171, 173, 174, 175, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 261, 265, 268, 269, 270, 272, 275, 282, 286, 287, 289, 291, 292, 293, 296, 297, 298], "environ": [2, 6, 8, 10, 11, 12, 13, 14, 68, 96, 200, 220, 240, 251, 261, 289, 291, 296], "physic": [2, 4, 19, 24, 26, 49, 61, 104, 108, 111, 112, 113, 115, 116, 117, 118, 119, 121, 122, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 142, 143, 144, 145, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 195, 196, 197, 199, 200, 205, 214, 240, 255, 258, 272, 291, 297], "mechan": [2, 23, 27, 68, 91, 95, 104, 111, 124, 125, 127, 128, 129, 130, 131, 133, 134, 135, 137, 138, 139, 140, 142, 143, 144, 167, 171, 174, 180, 182, 183, 184, 187, 194, 195, 202, 205, 282], "liealgebra": [2, 97], "thing": [2, 3, 4, 5, 7, 11, 12, 13, 14, 15, 16, 21, 22, 23, 28, 30, 38, 45, 49, 58, 59, 60, 68, 70, 80, 96, 97, 98, 99, 104, 109, 123, 135, 149, 152, 169, 185, 190, 203, 204, 209, 217, 219, 227, 228, 229, 232, 236, 239, 244, 254, 256, 258, 286, 287, 289, 291, 292, 293, 296, 297], "configur": [2, 3, 11, 12, 13, 26, 60, 98, 119, 127, 128, 138, 139, 142, 144, 145, 147, 149, 220], "otherwis": [2, 3, 12, 17, 21, 22, 23, 47, 48, 49, 59, 60, 64, 67, 68, 69, 72, 74, 76, 77, 78, 81, 82, 83, 84, 93, 95, 97, 98, 100, 104, 107, 108, 110, 117, 119, 121, 124, 133, 134, 135, 170, 175, 181, 199, 202, 203, 206, 207, 209, 211, 213, 215, 216, 218, 220, 222, 223, 225, 226, 228, 232, 233, 236, 237, 238, 239, 240, 241, 249, 251, 253, 258, 259, 286, 287, 296], "ordinari": [2, 21, 22, 29, 47, 49, 59, 68, 72, 73, 74, 76, 86, 90, 91, 95, 105, 119, 145, 207, 209, 210, 219, 226, 236, 241, 255, 291, 297], "x": [2, 3, 4, 5, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 57, 59, 60, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 104, 107, 108, 109, 110, 111, 112, 113, 115, 117, 119, 122, 123, 124, 125, 127, 128, 129, 130, 131, 133, 134, 135, 137, 138, 139, 140, 142, 143, 144, 146, 147, 148, 149, 150, 152, 153, 157, 159, 160, 161, 162, 163, 165, 166, 169, 174, 175, 180, 182, 183, 184, 185, 186, 194, 195, 196, 197, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 232, 233, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 251, 252, 253, 254, 256, 258, 259, 261, 265, 268, 269, 270, 271, 272, 274, 275, 286, 287, 289, 291, 292, 293, 296, 297, 298], "still": [2, 3, 4, 5, 12, 13, 14, 15, 21, 23, 39, 40, 41, 48, 60, 67, 68, 69, 76, 80, 95, 99, 104, 135, 185, 204, 206, 207, 208, 209, 213, 215, 220, 227, 229, 230, 232, 236, 238, 239, 245, 251, 258, 272, 293], "experiment": [2, 3, 133, 232], "mathemat": [2, 3, 5, 12, 13, 14, 18, 21, 23, 30, 32, 34, 35, 37, 38, 41, 43, 44, 47, 49, 50, 54, 58, 60, 67, 68, 69, 70, 73, 74, 75, 76, 81, 82, 93, 95, 98, 101, 104, 108, 109, 110, 119, 120, 123, 139, 151, 190, 201, 203, 204, 207, 208, 210, 211, 214, 219, 220, 228, 229, 233, 235, 236, 239, 240, 245, 252, 253, 259, 265, 269, 272, 274, 286, 289, 290, 291, 292, 295, 297], "softwar": [2, 5, 95, 214, 291], "itself": [2, 3, 4, 5, 7, 11, 12, 13, 14, 23, 45, 57, 59, 60, 66, 68, 70, 73, 74, 81, 85, 90, 108, 128, 133, 135, 150, 175, 182, 201, 203, 206, 207, 209, 210, 211, 213, 215, 216, 220, 228, 229, 232, 239, 244, 245, 246, 253, 255, 258, 274, 291], "_sage_": 2, "basic": [2, 3, 4, 5, 7, 10, 11, 13, 14, 21, 23, 37, 41, 43, 48, 49, 50, 56, 59, 63, 66, 67, 71, 74, 84, 86, 91, 92, 93, 98, 99, 102, 105, 119, 127, 133, 135, 147, 148, 150, 152, 153, 159, 169, 183, 190, 193, 198, 201, 202, 204, 206, 207, 209, 211, 212, 213, 215, 217, 218, 220, 221, 227, 232, 233, 236, 237, 238, 239, 240, 251, 253, 258, 259, 263, 271, 272, 273, 280, 282, 283, 287, 288, 289, 290, 295], "should": [2, 4, 5, 8, 9, 11, 12, 13, 14, 15, 18, 21, 22, 23, 25, 28, 35, 37, 40, 42, 44, 47, 48, 49, 50, 59, 60, 61, 62, 64, 67, 68, 69, 71, 72, 74, 76, 78, 79, 80, 81, 82, 83, 85, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 104, 108, 110, 111, 117, 119, 123, 128, 129, 133, 134, 135, 137, 139, 147, 149, 150, 152, 153, 154, 165, 168, 169, 173, 175, 177, 179, 180, 183, 185, 187, 188, 190, 191, 195, 200, 203, 204, 206, 207, 208, 209, 210, 211, 213, 215, 216, 219, 220, 222, 223, 226, 227, 228, 229, 230, 232, 233, 235, 236, 238, 239, 240, 244, 245, 249, 251, 252, 253, 254, 255, 256, 258, 259, 261, 265, 269, 286, 287, 289, 290, 293], "beyond": [2, 11, 12, 21, 30, 62, 84, 108, 149, 207, 210, 229, 232, 293], "control": [2, 7, 9, 13, 15, 17, 21, 23, 27, 48, 50, 68, 69, 72, 93, 98, 99, 149, 152, 165, 169, 180, 181, 185, 209, 216, 217, 221, 228, 233, 239, 258, 282, 286], "instruct": [2, 4, 5, 7, 8, 9, 11, 13, 15, 19, 24, 38, 49, 220, 238, 252, 253], "base": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 15, 21, 23, 28, 39, 41, 43, 44, 47, 49, 50, 57, 58, 59, 64, 65, 66, 68, 69, 71, 73, 74, 75, 76, 79, 81, 84, 91, 95, 96, 97, 98, 100, 101, 108, 109, 116, 124, 127, 130, 131, 133, 134, 135, 137, 152, 153, 154, 163, 165, 169, 170, 174, 180, 181, 183, 185, 187, 190, 191, 193, 195, 197, 200, 201, 204, 205, 206, 209, 210, 211, 212, 213, 214, 215, 216, 220, 222, 227, 228, 229, 230, 232, 233, 236, 238, 240, 244, 245, 246, 251, 252, 253, 254, 255, 256, 258, 259, 260, 265, 268, 269, 272, 292, 297], "pytest": [2, 3, 11, 12, 13, 248, 254, 256, 259, 284], "entir": [2, 3, 12, 21, 59, 68, 69, 72, 73, 76, 82, 84, 93, 107, 125, 133, 146, 150, 195, 207, 209, 215, 228, 245, 254, 256, 291, 297], "import_modul": [2, 12], "own": [2, 4, 9, 11, 12, 15, 23, 43, 52, 59, 60, 68, 84, 112, 127, 135, 152, 215, 220, 227, 232, 236, 255, 258, 259, 291], "runner": [2, 12, 251], "access": [2, 4, 5, 9, 14, 15, 21, 23, 42, 43, 44, 49, 68, 76, 97, 98, 101, 104, 109, 112, 119, 120, 127, 128, 131, 133, 135, 153, 194, 195, 201, 204, 206, 209, 210, 211, 213, 215, 232, 236, 241, 244, 252, 253, 269, 272, 292, 296], "script": [2, 4, 11, 14, 25, 40, 76, 200, 252], "directori": [2, 4, 5, 7, 8, 11, 12, 39, 44, 49, 236, 251, 252, 261], "prefer": [2, 4, 8, 9, 11, 12, 13, 14, 21, 23, 25, 28, 33, 34, 35, 49, 51, 60, 67, 68, 76, 108, 110, 127, 135, 185, 189, 190, 195, 206, 209, 211, 213, 215, 220, 228, 232, 236, 238, 245, 251, 253, 256, 259, 291, 293], "cloudpickl": 2, "effect": [2, 4, 7, 12, 23, 34, 39, 59, 61, 68, 85, 93, 95, 99, 104, 111, 135, 137, 149, 157, 185, 195, 206, 210, 213, 217, 219, 236, 289], "pickl": 2, "util": [2, 3, 4, 5, 7, 11, 30, 32, 47, 55, 57, 59, 60, 73, 74, 79, 80, 81, 84, 98, 99, 108, 109, 128, 131, 155, 189, 192, 209, 213, 217, 220, 232, 233, 249, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 277, 282, 283], "test_pickl": 2, "py": [2, 3, 4, 11, 12, 21, 25, 48, 68, 79, 93, 95, 104, 133, 163, 165, 206, 209, 211, 217, 220, 227, 230, 236, 237, 246, 249, 251, 256, 259], "hypothesi": 2, "necessari": [2, 3, 4, 6, 8, 11, 12, 13, 15, 21, 23, 38, 47, 48, 59, 60, 68, 78, 93, 95, 98, 104, 108, 128, 137, 145, 206, 208, 210, 215, 216, 220, 223, 229, 232, 236, 237, 238, 239, 240, 241, 246, 251, 253, 258, 259, 265, 290, 295], "want": [2, 3, 4, 8, 9, 11, 12, 13, 14, 15, 18, 19, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 37, 39, 45, 47, 49, 50, 51, 52, 60, 68, 69, 75, 80, 82, 84, 87, 93, 95, 99, 101, 104, 105, 108, 109, 117, 119, 122, 129, 135, 152, 168, 178, 179, 182, 185, 188, 190, 197, 199, 203, 204, 206, 208, 209, 210, 213, 215, 216, 217, 219, 220, 221, 227, 228, 230, 232, 233, 236, 237, 238, 239, 240, 241, 246, 249, 251, 253, 255, 258, 259, 270, 272, 275, 286, 287, 289, 291, 292, 293, 294, 296, 297], "check": [2, 3, 4, 5, 7, 8, 9, 11, 14, 15, 17, 18, 19, 21, 22, 23, 31, 35, 37, 43, 44, 47, 48, 49, 51, 54, 57, 59, 60, 61, 66, 67, 68, 69, 73, 76, 80, 91, 93, 97, 98, 99, 101, 104, 105, 108, 119, 124, 125, 133, 134, 135, 149, 152, 165, 173, 185, 187, 188, 193, 201, 206, 207, 209, 210, 211, 213, 215, 216, 222, 228, 230, 232, 236, 237, 238, 239, 240, 244, 245, 249, 251, 253, 256, 258, 268, 272, 289, 297], "pdf": [2, 5, 7, 26, 35, 38, 47, 48, 59, 69, 71, 73, 90, 95, 104, 108, 111, 112, 115, 117, 119, 206, 209, 211, 214, 219, 220, 223, 229, 232, 233, 236, 240, 258, 265], "view": [2, 4, 7, 11, 12, 14, 37, 49, 50, 51, 68, 104, 111, 187, 190, 204, 206, 213, 220, 236, 239, 253, 255, 258], "host": [2, 5], "onlin": [2, 4, 128, 233, 258], "dev": [2, 3, 8, 9, 11, 256], "index": [2, 8, 11, 12, 13, 15, 23, 28, 35, 36, 37, 41, 49, 57, 59, 60, 64, 67, 68, 69, 70, 73, 74, 76, 79, 84, 93, 95, 98, 99, 101, 104, 107, 108, 119, 133, 135, 152, 153, 154, 156, 158, 159, 169, 178, 180, 182, 185, 190, 195, 206, 207, 209, 211, 215, 216, 217, 220, 225, 226, 230, 238, 240, 241, 243, 244, 246, 247, 252, 280], "com": [2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 23, 26, 39, 41, 45, 47, 59, 61, 62, 68, 69, 71, 72, 73, 74, 76, 78, 84, 85, 93, 95, 99, 104, 108, 117, 205, 214, 223, 225, 228, 229, 232, 233, 236, 239, 240, 258, 261, 293], "sympy_benchmark": 2, "readm": 2, "yourself": [2, 7, 11, 12, 23, 25, 37, 49, 137, 254, 287], "reproduc": [2, 12, 28, 216, 251, 297], "result": [2, 4, 8, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 37, 41, 42, 43, 44, 45, 47, 48, 49, 58, 59, 60, 64, 67, 68, 69, 70, 72, 74, 76, 80, 85, 86, 90, 92, 93, 95, 97, 98, 99, 101, 104, 107, 108, 109, 110, 111, 119, 120, 123, 124, 125, 128, 129, 134, 135, 139, 145, 149, 152, 168, 170, 177, 179, 180, 182, 184, 185, 187, 188, 189, 190, 194, 195, 204, 206, 207, 209, 210, 211, 213, 214, 215, 216, 217, 218, 220, 222, 227, 228, 229, 230, 232, 233, 235, 236, 237, 238, 239, 240, 241, 244, 245, 247, 251, 252, 253, 255, 256, 258, 259, 261, 265, 268, 270, 289, 291, 292, 293, 297], "add": [2, 3, 4, 9, 12, 13, 14, 15, 18, 21, 35, 41, 43, 47, 49, 57, 59, 64, 69, 72, 75, 83, 85, 93, 97, 101, 104, 108, 111, 113, 115, 124, 133, 135, 152, 163, 169, 179, 184, 185, 188, 203, 204, 206, 209, 210, 211, 213, 215, 216, 217, 220, 221, 230, 232, 233, 236, 237, 239, 240, 242, 244, 245, 246, 254, 259, 263, 287, 289, 292, 296, 297], "new": [2, 3, 5, 6, 7, 8, 9, 12, 14, 21, 23, 31, 38, 43, 44, 48, 49, 50, 59, 60, 67, 68, 69, 70, 76, 81, 84, 93, 95, 96, 99, 104, 108, 111, 113, 115, 119, 124, 127, 135, 142, 144, 151, 152, 154, 175, 181, 182, 185, 187, 190, 191, 193, 194, 195, 199, 204, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 220, 227, 230, 232, 233, 236, 238, 239, 240, 241, 242, 251, 252, 256, 259, 265, 267, 269, 285, 286, 289, 292, 293, 295], "asv": 2, "airspe": 2, "veloc": [2, 104, 123, 124, 127, 128, 130, 131, 133, 137, 138, 139, 142, 143, 144, 146, 149, 150, 152, 159, 187, 189, 190, 194, 195, 199, 201, 204, 272, 274], "name": [2, 3, 4, 5, 8, 12, 13, 14, 15, 21, 23, 25, 35, 36, 40, 43, 44, 48, 49, 50, 51, 55, 58, 61, 64, 67, 68, 69, 70, 73, 74, 75, 76, 78, 81, 93, 95, 96, 97, 101, 104, 108, 110, 111, 115, 124, 127, 130, 133, 135, 137, 152, 156, 165, 180, 187, 190, 191, 192, 193, 194, 195, 197, 199, 201, 204, 206, 207, 208, 210, 211, 213, 215, 217, 220, 226, 230, 232, 233, 236, 237, 239, 240, 245, 246, 249, 251, 252, 253, 254, 259, 261, 262, 263, 265, 269, 272, 277, 286, 289, 292, 293, 297], "describ": [3, 4, 5, 7, 11, 13, 15, 21, 22, 23, 28, 35, 41, 48, 50, 58, 59, 60, 62, 63, 66, 67, 68, 69, 73, 76, 78, 83, 84, 93, 95, 99, 104, 107, 108, 119, 123, 127, 128, 129, 130, 131, 133, 135, 138, 139, 140, 142, 144, 145, 146, 147, 148, 149, 150, 164, 185, 190, 194, 195, 201, 203, 204, 207, 209, 210, 213, 215, 221, 227, 230, 232, 233, 236, 239, 240, 244, 253, 258, 259, 265, 267, 272, 287], "step": [3, 8, 9, 23, 24, 26, 38, 47, 49, 59, 63, 64, 67, 68, 69, 76, 92, 93, 95, 104, 108, 109, 128, 133, 142, 145, 147, 152, 153, 187, 199, 204, 205, 206, 209, 210, 211, 213, 215, 216, 220, 221, 222, 225, 228, 229, 230, 232, 233, 236, 238, 240, 245, 252, 258, 259, 287], "properli": [3, 11, 12, 14, 23, 48, 68, 74, 80, 93, 104, 129, 135, 147, 162, 166, 169, 183, 208, 210, 220, 236, 239, 249, 253, 259, 293, 298], "current": [3, 5, 11, 12, 13, 15, 21, 30, 31, 41, 44, 47, 48, 49, 50, 52, 59, 62, 63, 65, 66, 67, 68, 70, 74, 76, 78, 80, 83, 88, 91, 93, 95, 97, 99, 104, 108, 110, 111, 116, 123, 127, 135, 145, 179, 184, 185, 189, 193, 204, 206, 207, 208, 209, 211, 213, 216, 217, 219, 220, 221, 227, 230, 232, 233, 235, 236, 237, 238, 239, 240, 246, 251, 252, 253, 255, 269, 283, 293, 298], "activ": [3, 8, 9, 16, 137, 206, 249, 254, 256], "updat": [3, 11, 13, 15, 35, 39, 68, 133, 139, 165, 175, 178, 179, 181, 205, 209, 213, 216, 220, 233, 246, 256], "continu": [3, 4, 5, 12, 13, 19, 22, 23, 26, 47, 49, 58, 60, 62, 68, 73, 74, 76, 93, 96, 99, 108, 116, 117, 119, 180, 183, 200, 211, 213, 216, 233, 235, 236, 244, 288], "someon": [3, 11, 12, 236, 255, 290], "warn": [3, 4, 15, 23, 68, 69, 83, 110, 195, 204, 206, 208, 220, 236, 238, 249, 251, 253, 257, 258, 284, 293], "screen": [3, 14, 96, 200, 204, 251, 296], "indic": [3, 4, 11, 12, 15, 18, 21, 32, 35, 36, 47, 48, 49, 50, 52, 57, 59, 60, 61, 63, 64, 66, 67, 68, 71, 72, 73, 76, 78, 83, 84, 93, 95, 98, 99, 101, 104, 107, 108, 120, 133, 139, 169, 180, 182, 183, 185, 190, 194, 195, 205, 209, 210, 211, 215, 216, 217, 220, 227, 228, 229, 232, 233, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 251, 252, 253, 258, 293], "remov": [3, 11, 12, 13, 21, 30, 41, 42, 43, 59, 62, 66, 68, 72, 74, 83, 84, 93, 98, 104, 108, 111, 113, 115, 124, 127, 128, 142, 144, 149, 169, 185, 211, 213, 216, 218, 219, 220, 232, 233, 236, 238, 239, 241, 242, 252, 253, 254, 256, 258, 259, 286, 297], "futur": [3, 11, 12, 21, 22, 49, 50, 68, 93, 95, 104, 110, 127, 133, 137, 145, 149, 185, 189, 202, 206, 208, 209, 219, 220, 232, 236, 245, 251, 254, 256, 259, 282, 292, 298], "chanc": [3, 12, 15, 22, 68, 96, 104, 230, 240, 292], "break": [3, 4, 11, 12, 13, 23, 48, 49, 60, 68, 69, 108, 203, 217, 220, 228, 258], "opportun": [3, 4, 232], "messag": [3, 7, 12, 13, 69, 96, 249, 254, 256, 261], "wrong": [3, 5, 11, 12, 13, 59, 68, 69, 76, 78, 104, 195, 210, 236, 254, 289, 293], "answer": [3, 7, 12, 21, 23, 28, 59, 68, 72, 90, 93, 95, 98, 104, 108, 190, 213, 217, 229, 230, 232, 238, 240, 255, 261, 291, 293, 297], "made": [3, 5, 11, 12, 13, 14, 15, 21, 23, 36, 62, 64, 68, 69, 74, 77, 78, 81, 84, 85, 95, 98, 104, 108, 110, 131, 135, 146, 149, 152, 204, 207, 209, 211, 213, 215, 216, 220, 221, 227, 228, 229, 232, 236, 238, 239, 240, 253, 258, 261, 274, 292], "lightli": 3, "fix": [3, 4, 7, 12, 13, 49, 59, 61, 64, 66, 69, 73, 76, 80, 97, 104, 108, 111, 112, 124, 127, 130, 133, 137, 146, 152, 169, 174, 178, 181, 185, 190, 195, 199, 203, 204, 206, 210, 213, 215, 216, 217, 220, 226, 230, 238, 240, 258, 265, 267], "whether": [3, 7, 8, 12, 13, 14, 21, 22, 23, 28, 33, 35, 36, 37, 47, 48, 49, 54, 59, 67, 68, 69, 75, 76, 80, 83, 95, 96, 98, 99, 104, 108, 115, 123, 128, 129, 133, 135, 168, 173, 192, 197, 204, 206, 209, 210, 211, 215, 216, 220, 223, 227, 228, 232, 233, 236, 238, 239, 240, 241, 251, 253, 258, 259, 265, 268, 289, 293], "worth": [3, 21, 23, 128, 195, 270, 272], "pain": 3, "frustrat": 3, "go": [3, 4, 5, 7, 9, 11, 12, 23, 39, 48, 49, 59, 69, 73, 74, 93, 128, 135, 137, 150, 152, 153, 179, 190, 199, 206, 215, 216, 227, 230, 236, 289, 291, 292, 295, 297], "seek": [3, 238], "stabl": [3, 4, 5, 23, 26, 49, 68, 96, 104, 110, 115, 119, 252, 286], "altern": [3, 4, 8, 13, 14, 15, 22, 23, 39, 49, 56, 59, 60, 67, 68, 72, 73, 74, 75, 76, 99, 101, 105, 109, 135, 147, 149, 195, 203, 205, 206, 208, 209, 210, 215, 216, 220, 225, 227, 229, 238, 239, 241, 242, 258, 289, 291, 293], "done": [3, 4, 9, 11, 12, 13, 14, 15, 19, 23, 43, 44, 46, 47, 48, 49, 59, 61, 66, 68, 69, 70, 73, 76, 79, 80, 93, 95, 99, 104, 108, 127, 128, 133, 135, 137, 143, 150, 152, 171, 180, 181, 182, 185, 187, 188, 195, 201, 203, 204, 206, 207, 209, 213, 216, 217, 219, 220, 221, 229, 232, 233, 236, 238, 239, 240, 245, 246, 251, 252, 255, 259, 269, 270, 286, 289, 291, 292, 293], "exist": [3, 7, 11, 13, 14, 19, 21, 23, 34, 37, 47, 48, 49, 52, 59, 68, 72, 78, 80, 83, 84, 85, 86, 95, 98, 104, 108, 115, 129, 133, 175, 201, 204, 206, 207, 208, 209, 211, 213, 215, 220, 227, 228, 230, 233, 236, 238, 239, 251, 259, 270, 291, 293, 298], "necessarili": [3, 4, 21, 45, 68, 69, 70, 93, 95, 98, 128, 207, 208, 209, 215, 216, 218, 232, 236, 238, 239], "supplant": 3, "old": [3, 12, 13, 14, 15, 68, 69, 70, 96, 149, 154, 190, 200, 206, 207, 211, 220, 221, 232, 236, 239, 241, 286], "sometim": [3, 4, 5, 11, 12, 14, 15, 21, 23, 28, 35, 48, 49, 68, 73, 76, 92, 93, 119, 145, 149, 177, 185, 204, 207, 210, 215, 220, 222, 227, 229, 233, 236, 238, 249, 258, 286, 293], "alongsid": [3, 11, 12, 13, 23, 101], "newer": [3, 12, 14, 203, 238], "solveset": [3, 23, 34, 37, 128, 152, 218, 234, 235, 238, 277, 298], "superior": [3, 220], "replac": [3, 4, 9, 12, 13, 14, 15, 21, 47, 49, 59, 67, 68, 69, 72, 73, 74, 76, 78, 82, 95, 98, 99, 104, 108, 109, 110, 123, 125, 127, 152, 174, 180, 195, 206, 207, 213, 216, 217, 221, 227, 229, 230, 232, 236, 238, 239, 246, 247, 258, 259, 261, 286, 295], "older": [3, 5, 12, 14, 91, 135, 210, 220, 238], "solv": [3, 4, 11, 13, 14, 15, 16, 19, 21, 23, 24, 26, 27, 49, 52, 64, 67, 68, 76, 81, 93, 95, 99, 100, 104, 108, 111, 113, 114, 115, 127, 128, 129, 133, 135, 138, 139, 142, 144, 145, 147, 149, 152, 188, 209, 213, 217, 218, 219, 220, 222, 232, 233, 235, 236, 237, 240, 282, 287, 288, 291, 293, 296], "remain": [3, 12, 13, 14, 23, 43, 44, 49, 59, 60, 62, 64, 68, 69, 74, 93, 99, 108, 110, 120, 135, 184, 201, 203, 204, 215, 216, 217, 226, 229, 230, 236, 237, 238, 240, 242, 246, 255, 258, 259, 269, 274, 286, 289, 291, 292, 293], "intact": [3, 13, 49, 252], "cogniz": 3, "properti": [3, 12, 14, 18, 23, 28, 33, 35, 41, 43, 44, 47, 48, 49, 50, 51, 52, 56, 57, 59, 60, 61, 62, 63, 67, 68, 69, 70, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 91, 93, 95, 99, 101, 104, 108, 111, 112, 113, 115, 116, 119, 124, 127, 128, 130, 131, 133, 134, 150, 152, 154, 156, 159, 160, 163, 164, 169, 170, 171, 173, 174, 181, 183, 185, 187, 189, 190, 192, 193, 194, 195, 196, 197, 201, 204, 205, 206, 208, 209, 210, 211, 213, 215, 216, 219, 222, 223, 226, 227, 228, 230, 233, 236, 239, 240, 245, 246, 251, 253, 254, 265, 268, 269, 270, 272, 274, 293], "attr": [3, 49], "imposs": [3, 4, 12, 13, 14, 23, 35, 68, 210, 229, 236, 237, 249, 289, 297], "later": [3, 13, 19, 49, 59, 93, 98, 99, 123, 129, 130, 133, 137, 139, 140, 147, 149, 152, 159, 194, 203, 210, 213, 219, 220, 221, 230, 232, 236, 255, 269, 286, 287, 289, 291, 292, 297], "unsur": [3, 4, 12], "about": [3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 16, 19, 21, 22, 23, 28, 33, 35, 37, 38, 39, 41, 42, 44, 45, 48, 49, 59, 60, 61, 62, 68, 72, 74, 76, 78, 79, 80, 82, 83, 84, 88, 90, 94, 95, 97, 104, 108, 111, 112, 119, 123, 124, 125, 127, 128, 129, 130, 131, 133, 135, 139, 149, 150, 180, 182, 183, 185, 189, 194, 195, 203, 204, 205, 207, 209, 210, 215, 217, 220, 222, 227, 232, 233, 234, 236, 240, 244, 245, 251, 252, 253, 254, 255, 256, 265, 267, 269, 272, 273, 280, 283, 286, 288, 289, 291, 292, 293, 297], "option": [3, 4, 5, 8, 11, 12, 15, 23, 25, 28, 30, 42, 44, 47, 49, 59, 66, 67, 68, 69, 70, 71, 72, 74, 77, 78, 81, 82, 84, 85, 87, 95, 96, 99, 101, 104, 105, 108, 109, 110, 111, 117, 119, 123, 124, 125, 127, 128, 129, 130, 133, 150, 152, 158, 169, 174, 175, 177, 180, 182, 187, 189, 194, 195, 200, 206, 207, 208, 209, 210, 211, 215, 216, 217, 219, 220, 221, 222, 223, 225, 227, 228, 229, 232, 233, 236, 237, 238, 239, 240, 242, 245, 246, 251, 252, 253, 256, 258, 259, 265, 290, 296, 297], "mark": [3, 4, 5, 117, 158, 170, 233, 249, 254, 256], "explicitli": [3, 12, 13, 14, 21, 23, 49, 59, 60, 68, 69, 71, 74, 76, 81, 85, 101, 104, 109, 119, 135, 150, 195, 206, 208, 209, 210, 211, 213, 216, 220, 232, 236, 238, 256, 289, 293, 296, 298], "privat": [3, 4, 68, 69, 135, 206, 253], "With": [3, 13, 15, 22, 26, 39, 49, 51, 67, 68, 72, 93, 108, 133, 138, 139, 140, 146, 148, 149, 158, 182, 185, 204, 206, 207, 208, 209, 210, 211, 218, 219, 220, 227, 232, 241, 258, 291, 292], "being": [3, 5, 12, 14, 15, 17, 21, 22, 45, 47, 49, 59, 60, 66, 67, 68, 69, 73, 74, 76, 78, 80, 81, 84, 85, 93, 98, 99, 104, 105, 108, 111, 112, 115, 123, 131, 133, 135, 137, 149, 150, 152, 153, 181, 190, 194, 197, 201, 203, 204, 205, 206, 207, 209, 210, 211, 215, 216, 217, 219, 220, 229, 230, 232, 233, 236, 237, 238, 239, 240, 246, 249, 251, 255, 256, 258, 259, 261, 265, 270, 274, 291, 293], "decid": [3, 4, 9, 19, 21, 22, 23, 28, 48, 67, 99, 123, 149, 178, 210, 213, 215, 216, 220, 236, 239, 253, 293], "reason": [3, 5, 11, 12, 13, 14, 17, 21, 22, 23, 34, 35, 41, 49, 60, 66, 68, 72, 76, 93, 96, 102, 104, 128, 129, 135, 137, 142, 145, 149, 156, 190, 200, 204, 209, 210, 213, 214, 217, 220, 228, 230, 232, 236, 239, 249, 255, 256, 258, 259, 286, 287, 291, 292, 293], "confus": [3, 5, 12, 13, 14, 21, 31, 68, 73, 98, 158, 204, 208, 216, 239, 286, 287, 289], "unnecessari": [3, 4, 5, 12, 45, 49, 216, 219, 240, 251, 290], "redund": [3, 12, 21, 59, 66, 98, 104, 209, 236, 253], "usabl": [3, 35, 210, 211, 220, 239, 291], "breakag": 3, "serious": 3, "taken": [3, 12, 14, 49, 50, 51, 56, 59, 66, 67, 68, 73, 74, 76, 85, 99, 108, 119, 121, 123, 124, 149, 152, 182, 188, 195, 199, 205, 206, 210, 215, 216, 220, 223, 227, 229, 230, 239, 240, 245, 253, 258, 265], "commun": [3, 5, 7, 11, 39, 205, 236, 238, 240, 293], "Be": [3, 4, 8, 23, 47, 68, 98, 104, 213, 236, 239, 247, 259], "sure": [3, 4, 5, 8, 9, 11, 12, 23, 49, 59, 68, 80, 133, 135, 165, 190, 206, 216, 217, 227, 236, 238, 239, 252, 258, 289, 292, 297], "inde": [3, 12, 19, 23, 56, 59, 67, 93, 207, 230, 236, 247, 251, 291], "right": [3, 4, 5, 8, 11, 12, 13, 15, 19, 23, 26, 29, 30, 33, 35, 41, 47, 49, 50, 59, 60, 64, 68, 69, 71, 73, 74, 76, 84, 85, 93, 95, 98, 99, 104, 107, 108, 110, 111, 112, 113, 115, 119, 128, 133, 134, 135, 149, 152, 153, 157, 164, 169, 171, 173, 174, 179, 182, 185, 194, 195, 201, 204, 205, 206, 207, 209, 215, 216, 217, 218, 220, 222, 223, 227, 228, 230, 236, 237, 239, 240, 251, 253, 255, 258, 272, 287, 291, 293, 297], "again": [3, 8, 9, 12, 15, 19, 22, 51, 60, 68, 83, 108, 133, 135, 137, 180, 181, 194, 195, 203, 207, 208, 215, 223, 230, 236, 249, 269, 289, 297], "second": [3, 5, 9, 11, 12, 14, 15, 19, 21, 22, 23, 28, 30, 32, 33, 35, 37, 40, 41, 44, 47, 49, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 76, 78, 81, 82, 84, 95, 104, 108, 109, 111, 112, 117, 119, 120, 123, 124, 127, 128, 130, 131, 134, 135, 139, 142, 144, 145, 146, 148, 150, 156, 158, 159, 162, 166, 171, 174, 179, 180, 182, 183, 188, 189, 190, 192, 194, 195, 196, 203, 204, 206, 209, 210, 211, 213, 214, 215, 216, 220, 222, 230, 232, 233, 236, 238, 239, 240, 241, 242, 258, 259, 265, 268, 269, 270, 282, 286, 291, 292, 293], "know": [3, 4, 5, 12, 13, 14, 15, 21, 22, 23, 28, 35, 36, 37, 42, 44, 48, 51, 60, 68, 69, 72, 80, 85, 93, 95, 104, 108, 135, 150, 153, 179, 183, 187, 188, 190, 195, 203, 204, 206, 209, 216, 217, 219, 220, 230, 232, 236, 238, 239, 240, 254, 258, 259, 270, 286, 287, 289, 290, 291, 292, 295, 297], "stop": [3, 8, 11, 49, 50, 60, 68, 104, 108, 206, 226, 228, 236, 240], "after": [3, 4, 5, 8, 9, 11, 12, 13, 15, 39, 41, 43, 44, 48, 50, 56, 59, 60, 64, 66, 67, 68, 69, 70, 74, 83, 85, 90, 95, 99, 104, 108, 110, 111, 119, 133, 146, 147, 149, 152, 154, 158, 170, 182, 190, 194, 201, 204, 209, 213, 215, 216, 217, 218, 220, 221, 226, 233, 236, 237, 238, 239, 241, 251, 254, 259, 261, 265, 268, 272, 286, 287, 289, 293, 297], "count": [3, 5, 14, 60, 67, 68, 69, 73, 78, 98, 104, 107, 108, 180, 216, 228, 229, 232, 239, 240, 246, 255, 258], "basi": [3, 68, 70, 97, 101, 104, 124, 130, 142, 144, 170, 179, 180, 182, 185, 187, 190, 193, 194, 195, 201, 203, 205, 207, 209, 211, 216, 219, 230, 232, 238, 239, 241, 246, 268, 269, 272, 295], "exact": [3, 11, 12, 13, 14, 15, 21, 23, 26, 34, 45, 67, 68, 69, 72, 78, 83, 90, 93, 95, 99, 104, 111, 131, 152, 179, 209, 210, 211, 213, 216, 227, 232, 236, 238, 251, 261, 289, 291, 296], "rule": [3, 5, 11, 12, 13, 19, 21, 23, 49, 59, 60, 67, 68, 76, 91, 93, 95, 98, 99, 104, 111, 128, 134, 135, 166, 169, 190, 195, 201, 204, 205, 209, 211, 217, 219, 220, 221, 226, 230, 232, 236, 246, 258, 259, 272, 289, 292], "doesn": [3, 4, 12, 13, 15, 23, 28, 49, 92, 134, 135, 139, 149, 152, 204, 208, 217, 219, 229, 232, 239, 298], "constitut": [3, 5, 14, 95, 108, 220], "yet": [3, 9, 11, 15, 21, 23, 42, 44, 47, 48, 72, 95, 133, 149, 165, 207, 210, 211, 215, 217, 219, 228, 236, 239, 287], "fulli": [3, 4, 11, 13, 21, 59, 68, 85, 95, 98, 110, 111, 112, 127, 135, 152, 185, 203, 209, 210, 211, 217, 227, 240, 246, 262], "codifi": 3, "clean": [3, 251], "distinct": [3, 5, 14, 17, 21, 23, 36, 49, 59, 60, 68, 69, 73, 81, 93, 98, 104, 108, 133, 203, 210, 215, 216, 220, 228, 230, 297], "well": [3, 4, 5, 7, 11, 13, 14, 15, 17, 19, 21, 23, 39, 45, 47, 48, 49, 50, 51, 52, 60, 67, 68, 73, 74, 76, 95, 99, 102, 104, 115, 120, 123, 127, 133, 135, 137, 139, 140, 149, 150, 175, 184, 187, 188, 194, 203, 205, 206, 207, 209, 210, 211, 213, 215, 220, 227, 228, 229, 230, 232, 236, 238, 239, 251, 252, 269, 270, 274, 289, 291, 292, 297], "categor": [3, 28, 104, 207], "issu": [3, 5, 7, 12, 13, 14, 15, 22, 23, 28, 30, 31, 32, 33, 34, 35, 36, 39, 40, 47, 67, 68, 85, 95, 98, 104, 109, 145, 165, 202, 205, 214, 215, 217, 220, 228, 229, 238, 239, 251, 253, 255, 256, 258, 261, 282, 288, 289, 292, 297], "here": [3, 4, 5, 7, 9, 11, 12, 13, 14, 17, 19, 21, 22, 23, 28, 30, 31, 32, 33, 34, 35, 38, 39, 43, 44, 49, 50, 52, 57, 58, 59, 60, 66, 67, 68, 69, 70, 72, 73, 74, 76, 84, 85, 86, 90, 91, 93, 95, 98, 99, 104, 107, 108, 109, 110, 111, 115, 119, 123, 128, 135, 136, 137, 142, 143, 144, 147, 149, 150, 152, 153, 175, 180, 185, 194, 200, 201, 203, 204, 206, 207, 209, 210, 211, 213, 215, 216, 217, 220, 221, 227, 229, 230, 232, 233, 236, 238, 239, 240, 244, 245, 252, 253, 255, 256, 258, 259, 270, 272, 274, 285, 286, 287, 289, 291, 292, 293, 295, 296, 297], "gener": [3, 8, 11, 12, 13, 14, 15, 17, 19, 21, 22, 23, 25, 28, 30, 31, 32, 33, 34, 35, 36, 37, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 56, 57, 59, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 78, 82, 84, 86, 91, 93, 95, 96, 97, 98, 101, 104, 108, 109, 110, 119, 123, 124, 127, 128, 129, 131, 133, 134, 135, 137, 138, 139, 140, 142, 144, 145, 146, 148, 149, 150, 152, 153, 157, 168, 169, 170, 171, 174, 179, 180, 183, 184, 185, 190, 192, 195, 196, 199, 200, 201, 203, 205, 206, 207, 208, 209, 211, 213, 216, 217, 218, 219, 220, 221, 222, 226, 229, 230, 232, 233, 235, 236, 237, 238, 240, 245, 246, 252, 253, 255, 256, 257, 258, 259, 265, 269, 270, 272, 273, 274, 280, 287, 289, 290, 291, 292, 293, 297, 298], "guidelin": [3, 11, 37, 236], "exhaust": [3, 21, 230, 258, 290], "alwai": [3, 4, 5, 11, 12, 13, 14, 15, 21, 22, 23, 33, 39, 41, 48, 59, 60, 67, 68, 69, 70, 72, 74, 76, 78, 80, 83, 84, 92, 93, 95, 98, 99, 104, 107, 108, 113, 115, 119, 120, 131, 133, 134, 135, 137, 139, 143, 153, 185, 187, 190, 191, 201, 203, 207, 208, 209, 210, 211, 213, 215, 216, 220, 221, 222, 228, 229, 230, 232, 233, 236, 237, 238, 239, 240, 247, 251, 253, 258, 259, 265, 267, 272, 287, 289, 290, 291, 292, 297], "posit": [3, 11, 12, 13, 14, 15, 21, 22, 23, 26, 28, 32, 42, 43, 44, 45, 46, 48, 49, 50, 52, 57, 59, 60, 61, 63, 64, 67, 68, 69, 70, 72, 73, 74, 76, 78, 80, 81, 84, 93, 95, 97, 98, 99, 100, 104, 105, 107, 108, 111, 112, 113, 115, 119, 121, 127, 130, 131, 134, 135, 137, 139, 142, 144, 146, 149, 150, 152, 154, 157, 159, 163, 180, 183, 185, 196, 197, 199, 201, 203, 204, 207, 208, 209, 210, 211, 213, 215, 216, 217, 219, 220, 225, 226, 228, 229, 230, 232, 233, 236, 238, 239, 240, 241, 246, 258, 259, 265, 268, 269, 270, 272, 274, 275, 293, 297, 298], "convent": [3, 4, 5, 23, 35, 59, 60, 64, 67, 68, 69, 73, 74, 76, 78, 83, 93, 95, 98, 110, 111, 112, 115, 119, 122, 131, 137, 152, 154, 158, 179, 180, 182, 187, 188, 201, 206, 220, 236, 237, 239, 240, 246, 274, 289, 297], "defin": [3, 4, 5, 11, 12, 13, 14, 15, 17, 19, 21, 22, 37, 40, 41, 43, 44, 47, 49, 50, 51, 52, 58, 59, 60, 63, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 91, 93, 95, 96, 99, 101, 104, 108, 111, 112, 117, 123, 124, 127, 130, 131, 133, 134, 135, 137, 138, 142, 144, 145, 146, 150, 152, 153, 156, 162, 164, 166, 171, 174, 180, 182, 183, 187, 188, 189, 190, 191, 192, 193, 194, 195, 199, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 215, 216, 217, 219, 220, 222, 223, 226, 227, 228, 230, 232, 233, 236, 238, 239, 240, 241, 245, 246, 252, 253, 254, 258, 259, 260, 261, 265, 267, 268, 269, 270, 271, 272, 274, 275, 289, 291, 297], "And": [3, 11, 12, 13, 22, 23, 30, 43, 59, 60, 67, 68, 69, 76, 93, 98, 99, 104, 107, 127, 157, 204, 206, 208, 216, 217, 220, 228, 232, 233, 238, 239, 240, 258, 259, 270, 297], "aren": [3, 11, 12, 13, 14, 23, 49, 68, 135, 219, 239], "don": [3, 11, 12, 13, 15, 22, 23, 44, 49, 93, 98, 104, 109, 110, 123, 135, 194, 203, 204, 210, 220, 230, 239, 241, 249, 254, 274, 286, 287, 291, 292, 297], "onli": [3, 4, 5, 8, 9, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 28, 31, 32, 33, 34, 36, 37, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 54, 57, 58, 59, 60, 61, 62, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 78, 79, 81, 82, 84, 85, 86, 91, 93, 95, 96, 97, 98, 99, 104, 105, 108, 109, 110, 115, 117, 119, 125, 127, 128, 130, 131, 134, 135, 137, 138, 139, 141, 142, 144, 146, 147, 149, 150, 153, 158, 160, 179, 180, 184, 185, 187, 190, 194, 195, 197, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 215, 216, 217, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 232, 233, 236, 237, 238, 240, 241, 244, 245, 246, 247, 249, 251, 252, 253, 254, 255, 256, 258, 259, 260, 265, 268, 270, 272, 274, 275, 286, 287, 289, 290, 292, 293, 297, 298], "form": [3, 5, 11, 12, 13, 14, 19, 21, 23, 26, 33, 34, 41, 44, 45, 46, 47, 49, 50, 58, 59, 60, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 81, 84, 88, 90, 91, 93, 95, 97, 99, 101, 103, 104, 108, 110, 111, 112, 113, 115, 116, 119, 123, 124, 127, 128, 129, 131, 133, 135, 137, 139, 142, 144, 145, 146, 147, 148, 150, 152, 153, 162, 165, 166, 167, 169, 179, 180, 183, 185, 187, 190, 193, 194, 195, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 226, 228, 229, 230, 232, 233, 236, 237, 238, 239, 240, 245, 246, 251, 252, 258, 265, 268, 269, 271, 272, 274, 280, 287, 291, 292, 293, 296, 297, 298], "differ": [3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 17, 18, 20, 22, 23, 28, 30, 31, 32, 33, 34, 35, 36, 40, 48, 49, 50, 51, 57, 58, 59, 60, 64, 67, 68, 69, 70, 72, 73, 74, 76, 79, 81, 83, 84, 88, 90, 92, 93, 95, 96, 97, 98, 101, 104, 108, 109, 110, 111, 117, 119, 123, 124, 128, 130, 133, 135, 137, 141, 149, 153, 157, 158, 170, 171, 179, 180, 183, 185, 187, 189, 190, 194, 195, 196, 199, 200, 201, 204, 206, 207, 208, 209, 211, 213, 215, 216, 217, 219, 220, 221, 222, 223, 225, 227, 228, 229, 232, 233, 236, 237, 238, 239, 240, 241, 244, 246, 249, 251, 252, 253, 254, 255, 256, 258, 259, 265, 268, 272, 274, 288, 289, 291, 292, 293, 296, 297], "equival": [3, 12, 13, 14, 15, 17, 21, 22, 23, 26, 33, 35, 41, 45, 49, 50, 58, 59, 64, 68, 69, 72, 74, 76, 93, 95, 104, 108, 110, 116, 117, 119, 127, 135, 168, 179, 182, 185, 188, 189, 195, 200, 204, 206, 207, 208, 209, 210, 211, 215, 216, 220, 227, 228, 232, 233, 236, 238, 239, 241, 242, 245, 246, 255, 259, 261, 262], "same": [3, 4, 5, 11, 12, 13, 14, 15, 19, 21, 22, 23, 25, 28, 30, 32, 35, 41, 43, 44, 45, 47, 48, 49, 51, 57, 58, 59, 60, 64, 67, 68, 69, 70, 73, 75, 76, 78, 81, 82, 83, 84, 85, 90, 91, 93, 95, 97, 98, 99, 101, 104, 108, 110, 111, 112, 115, 119, 120, 123, 124, 127, 132, 135, 139, 142, 143, 146, 149, 169, 171, 179, 182, 183, 185, 187, 188, 189, 190, 192, 193, 194, 195, 197, 200, 201, 203, 204, 206, 207, 208, 209, 210, 211, 213, 215, 216, 217, 218, 219, 220, 221, 227, 228, 229, 230, 232, 233, 236, 237, 238, 239, 240, 241, 245, 246, 247, 249, 251, 253, 254, 255, 256, 258, 259, 261, 265, 267, 269, 270, 274, 287, 289, 292, 293, 296, 297], "intern": [3, 13, 14, 15, 21, 22, 30, 47, 49, 50, 59, 68, 71, 72, 73, 76, 84, 85, 88, 100, 104, 108, 112, 115, 117, 137, 149, 150, 158, 179, 180, 190, 207, 209, 211, 212, 214, 216, 218, 220, 230, 232, 235, 236, 237, 238, 239, 240, 244, 246, 249, 253, 255, 258, 283, 292, 296], "Such": [3, 4, 12, 21, 49, 68, 84, 139, 207, 208, 215, 221, 229, 230, 232, 286, 292], "prefix": [3, 11, 49, 68, 104, 108, 189, 192, 193, 210, 213, 217, 220, 233, 236, 252, 253, 258, 282], "underscor": [3, 4, 12, 13, 68, 104, 236, 246, 254], "_": [3, 4, 5, 13, 15, 17, 19, 23, 26, 43, 44, 48, 56, 57, 59, 60, 61, 64, 67, 68, 69, 70, 71, 72, 73, 74, 76, 79, 81, 82, 83, 84, 93, 95, 98, 99, 100, 101, 102, 104, 106, 108, 110, 119, 147, 150, 152, 164, 185, 190, 194, 200, 203, 205, 209, 211, 215, 216, 219, 220, 221, 223, 227, 228, 229, 230, 232, 233, 236, 237, 238, 241, 242, 258, 268, 270, 296], "univers": [3, 14, 49, 205, 211, 214, 228, 233, 238, 239], "adher": [3, 5, 93], "codebas": [3, 12, 13, 21, 210, 249], "anyth": [3, 4, 5, 12, 13, 15, 23, 47, 49, 68, 69, 79, 83, 104, 135, 159, 169, 217, 220, 226, 228, 232, 236, 238, 252, 258, 261, 289], "were": [3, 5, 11, 12, 13, 14, 15, 17, 21, 23, 48, 51, 60, 62, 68, 69, 74, 85, 93, 99, 104, 108, 109, 110, 123, 133, 149, 194, 201, 204, 207, 209, 211, 213, 214, 215, 216, 219, 220, 221, 229, 232, 238, 258, 259, 261, 289, 291, 292, 296, 297], "incorrect": [3, 5, 11, 12, 13, 22, 23, 34, 59, 68, 78, 108, 117, 199, 209, 211, 236, 239, 252, 255, 256], "bug": [3, 4, 7, 11, 12, 21, 23, 39, 47, 69, 210, 228, 236, 239, 289], "despit": [3, 28, 37, 68, 297], "sai": [3, 5, 11, 14, 19, 21, 50, 58, 67, 68, 69, 97, 108, 123, 128, 135, 145, 152, 190, 203, 204, 207, 208, 209, 213, 215, 219, 220, 227, 230, 233, 236, 238, 239, 240, 259, 286, 291, 297], "befor": [3, 4, 7, 9, 10, 11, 12, 13, 14, 15, 21, 22, 23, 35, 37, 39, 49, 59, 60, 62, 64, 68, 69, 70, 76, 96, 99, 104, 108, 110, 111, 112, 123, 129, 133, 135, 137, 138, 139, 142, 143, 149, 152, 154, 185, 194, 200, 204, 208, 209, 210, 215, 216, 220, 221, 227, 228, 232, 233, 236, 238, 239, 240, 247, 251, 254, 258, 259, 269, 290, 291, 292, 297], "recent": [3, 12, 13, 15, 18, 21, 22, 23, 28, 30, 32, 33, 34, 35, 36, 37, 42, 43, 44, 49, 50, 60, 68, 69, 72, 76, 78, 95, 98, 99, 100, 101, 102, 104, 106, 107, 110, 119, 205, 207, 209, 210, 211, 213, 216, 219, 227, 228, 236, 238, 239, 249, 252, 254, 256, 258, 259, 261, 289, 293], "best": [3, 7, 11, 12, 13, 28, 32, 34, 35, 38, 39, 49, 68, 76, 93, 95, 109, 184, 206, 217, 220, 229, 230, 232, 236, 239, 244, 252, 285, 289, 290, 296, 297], "determin": [3, 5, 13, 14, 17, 19, 21, 22, 23, 26, 28, 31, 32, 33, 36, 42, 44, 45, 46, 47, 49, 50, 51, 52, 59, 68, 69, 70, 71, 72, 74, 78, 79, 81, 83, 84, 95, 96, 97, 101, 104, 108, 110, 111, 112, 119, 125, 127, 129, 130, 131, 133, 144, 150, 153, 164, 177, 179, 181, 182, 185, 188, 190, 195, 201, 206, 207, 208, 209, 213, 215, 216, 220, 226, 227, 228, 230, 232, 233, 235, 236, 238, 239, 240, 244, 256, 258, 265, 272, 275, 289, 297], "someth": [3, 4, 5, 9, 11, 13, 14, 15, 21, 22, 23, 37, 47, 49, 68, 69, 72, 78, 93, 98, 99, 104, 108, 123, 135, 136, 152, 178, 191, 194, 206, 210, 211, 219, 227, 228, 232, 236, 239, 251, 253, 259, 286, 289, 291, 292, 295], "re": [3, 11, 15, 23, 46, 47, 49, 59, 60, 68, 69, 72, 74, 76, 93, 95, 104, 195, 197, 201, 207, 213, 220, 221, 222, 228, 229, 230, 236, 238, 251, 268, 270, 287, 289, 292], "harm": 3, "even": [3, 4, 5, 9, 11, 12, 14, 15, 18, 21, 23, 28, 31, 34, 35, 36, 37, 42, 43, 44, 45, 46, 49, 50, 51, 56, 59, 60, 67, 68, 69, 72, 73, 74, 76, 80, 84, 93, 95, 98, 99, 104, 107, 108, 120, 135, 145, 170, 181, 188, 190, 195, 205, 208, 209, 210, 211, 213, 215, 216, 217, 220, 221, 228, 229, 230, 232, 233, 236, 238, 239, 247, 251, 274, 286, 287, 289, 291, 292, 297, 298], "might": [3, 4, 9, 11, 12, 13, 14, 15, 17, 21, 22, 23, 30, 34, 47, 49, 68, 72, 74, 81, 90, 93, 101, 104, 108, 110, 123, 135, 136, 152, 165, 195, 203, 206, 209, 210, 211, 216, 217, 220, 221, 228, 229, 230, 232, 233, 238, 239, 240, 252, 253, 256, 258, 261, 286, 289, 291, 292, 294, 297], "while": [3, 4, 7, 11, 12, 14, 15, 21, 23, 25, 29, 30, 35, 37, 48, 49, 50, 59, 60, 61, 64, 67, 68, 69, 70, 72, 73, 74, 78, 82, 84, 92, 98, 99, 104, 108, 109, 110, 111, 113, 115, 124, 127, 128, 129, 131, 133, 135, 139, 149, 169, 189, 190, 195, 201, 207, 209, 215, 218, 220, 236, 239, 251, 253, 255, 258, 274, 286, 292, 293], "peopl": [3, 4, 7, 9, 11, 71, 76, 95, 104, 190, 240], "upgrad": [3, 40], "immedi": [3, 12, 21, 33, 51, 59, 68, 93, 98, 133, 185, 207, 210, 241, 252, 259], "fire": 3, "uncondition": [3, 12], "correct": [3, 4, 5, 11, 12, 13, 15, 22, 23, 31, 33, 35, 49, 57, 59, 65, 67, 68, 72, 74, 92, 93, 95, 104, 108, 119, 131, 135, 149, 203, 204, 213, 216, 227, 233, 236, 238, 239, 244, 252, 258, 289, 296], "question": [3, 4, 5, 7, 11, 12, 19, 21, 67, 70, 78, 85, 93, 95, 98, 108, 123, 187, 190, 194, 207, 210, 215, 230, 239, 258, 261], "read": [3, 4, 5, 9, 11, 12, 13, 23, 37, 60, 74, 93, 108, 112, 152, 203, 204, 206, 209, 210, 211, 217, 220, 233, 246, 247, 255, 259, 262, 290, 296, 297], "previou": [3, 4, 12, 13, 23, 52, 57, 58, 59, 60, 63, 68, 73, 74, 95, 98, 99, 107, 124, 149, 187, 203, 204, 213, 226, 233, 237, 241, 258, 290, 292, 297], "unchang": [3, 13, 14, 23, 59, 60, 68, 95, 104, 119, 189, 209, 216, 220, 226, 229, 232, 239, 286], "dure": [3, 12, 13, 15, 40, 49, 68, 69, 99, 104, 108, 110, 124, 128, 152, 153, 203, 215, 220, 229, 238, 239, 256, 258], "period": [3, 4, 11, 13, 32, 47, 68, 69, 74, 93, 108, 119, 149, 159, 181, 188, 215, 220, 223, 226, 235, 239, 240, 258], "silenc": [3, 249, 256], "filterwarn": [3, 13], "caus": [3, 5, 12, 13, 14, 23, 35, 39, 68, 69, 72, 74, 104, 135, 143, 149, 203, 220, 229, 236, 237, 238, 255, 256, 293], "anoth": [3, 4, 5, 11, 12, 13, 14, 18, 19, 21, 22, 23, 28, 30, 32, 33, 34, 35, 36, 45, 48, 49, 60, 65, 67, 68, 69, 70, 74, 76, 78, 79, 80, 81, 82, 83, 84, 85, 93, 95, 101, 104, 108, 111, 112, 124, 128, 130, 131, 134, 146, 150, 174, 189, 190, 192, 195, 199, 203, 204, 206, 208, 209, 210, 211, 213, 215, 216, 217, 220, 221, 227, 228, 230, 236, 238, 239, 240, 252, 253, 259, 265, 269, 270, 274, 286, 289, 291, 292, 297, 298], "over": [3, 5, 6, 7, 10, 11, 12, 13, 15, 18, 23, 28, 31, 38, 41, 47, 48, 49, 50, 59, 60, 63, 67, 68, 69, 70, 71, 72, 73, 82, 84, 91, 93, 97, 98, 101, 104, 105, 108, 111, 112, 115, 121, 127, 133, 135, 152, 153, 164, 180, 183, 185, 189, 190, 201, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 223, 225, 227, 232, 233, 235, 236, 238, 239, 240, 241, 242, 244, 245, 254, 258, 259, 265, 268, 272, 275, 291, 295, 297], "defeat": [3, 12, 236], "three": [3, 14, 15, 17, 19, 21, 23, 35, 36, 41, 45, 49, 59, 60, 61, 64, 68, 69, 73, 76, 78, 82, 83, 84, 93, 97, 98, 111, 112, 127, 133, 138, 141, 142, 143, 158, 180, 182, 187, 195, 199, 203, 204, 205, 206, 207, 208, 211, 213, 216, 220, 230, 232, 233, 238, 239, 240, 251, 265, 267, 272, 275, 289, 292, 297], "natur": [3, 12, 15, 21, 26, 33, 41, 45, 49, 50, 51, 59, 68, 69, 73, 74, 102, 108, 135, 187, 189, 190, 207, 210, 211, 213, 215, 217, 220, 228, 229, 233, 239, 240, 258, 275, 292, 297], "heavili": [3, 227, 237], "consider": [3, 12, 22, 68, 109, 123, 210, 219, 228, 233, 236, 269], "easi": [3, 7, 11, 12, 14, 25, 56, 60, 68, 76, 93, 95, 109, 139, 145, 203, 207, 210, 215, 220, 227, 230, 233, 236, 239, 244, 245, 246, 286, 287, 289, 290, 291, 292, 293, 296], "account": [3, 14, 74, 104, 223, 232, 236], "nonetheless": [3, 69, 187, 232, 236], "deprecat": 3, "won": [3, 11, 12, 15, 23, 49, 232, 239, 292], "until": [3, 12, 19, 21, 28, 30, 31, 32, 33, 34, 35, 36, 40, 60, 62, 68, 69, 78, 95, 104, 108, 149, 204, 213, 216, 229, 236, 289], "come": [3, 11, 12, 33, 39, 59, 64, 66, 67, 68, 74, 76, 93, 95, 104, 109, 123, 135, 137, 147, 188, 204, 207, 210, 213, 215, 216, 230, 233, 236, 239, 249, 251, 256, 259, 289, 291, 292, 295, 297], "minimum": [3, 13, 32, 47, 49, 59, 60, 62, 64, 68, 69, 72, 74, 104, 123, 128, 137, 169, 194, 206, 208, 213, 239, 240, 254, 287], "longer": [3, 4, 11, 12, 15, 20, 68, 78, 108, 139, 149, 208, 209, 213, 220, 229, 232, 258, 261, 289, 297], "especi": [3, 4, 12, 23, 37, 67, 104, 123, 135, 150, 152, 179, 204, 216, 232, 236, 238, 251, 286, 287], "hard": [3, 11, 12, 13, 14, 21, 60, 69, 104, 108, 135, 185, 210, 220, 227, 236, 239, 289, 291], "migrat": 3, "lengthen": 3, "impos": [3, 112], "signific": [3, 15, 21, 49, 68, 69, 72, 95, 104, 123, 179, 194, 210, 239, 259, 292], "mainten": [3, 44], "burden": [3, 220], "keep": [3, 4, 11, 12, 15, 18, 23, 64, 68, 69, 72, 73, 76, 93, 104, 128, 138, 146, 150, 169, 185, 194, 206, 209, 210, 211, 216, 227, 228, 230, 232, 236, 238, 241, 246, 274, 287, 292], "firstli": [3, 13, 21, 23, 134, 230], "regular": [3, 11, 12, 13, 15, 21, 22, 50, 56, 68, 69, 72, 76, 84, 90, 91, 95, 108, 135, 179, 210, 217, 236, 246, 251, 296, 297], "schedul": 3, "singl": [3, 5, 8, 11, 13, 14, 19, 21, 23, 29, 35, 40, 41, 48, 49, 52, 59, 68, 69, 73, 74, 76, 81, 82, 84, 85, 86, 93, 95, 98, 99, 104, 107, 110, 119, 120, 125, 127, 128, 139, 146, 165, 169, 171, 179, 182, 185, 192, 195, 199, 206, 207, 209, 210, 211, 213, 215, 216, 220, 221, 222, 229, 230, 232, 233, 235, 236, 237, 238, 239, 240, 241, 245, 251, 253, 255, 258, 259, 261, 287, 289, 292, 293, 298], "Being": [3, 64, 78, 84, 210], "assur": [3, 108, 216], "suffici": [3, 4, 11, 21, 48, 49, 59, 60, 64, 68, 104, 190, 211, 223, 227, 236, 240, 255, 297], "regardless": [3, 4, 23, 60, 68, 95, 108, 209, 213, 228, 232, 258, 269, 274, 297], "often": [3, 4, 11, 12, 14, 21, 22, 23, 28, 34, 48, 49, 50, 58, 68, 76, 78, 80, 93, 95, 104, 108, 109, 119, 128, 129, 145, 149, 150, 203, 204, 207, 208, 209, 210, 213, 216, 221, 227, 228, 233, 236, 240, 258, 259, 286, 291, 292, 293, 297], "happen": [3, 4, 7, 11, 12, 13, 14, 19, 21, 22, 23, 32, 41, 49, 60, 67, 68, 72, 80, 83, 92, 127, 180, 184, 190, 207, 213, 215, 216, 219, 228, 232, 236, 240, 259, 270, 289, 296, 297], "secondli": [3, 23, 230], "rigor": [3, 76, 204, 253], "scheme": [3, 8, 21, 60, 67, 72, 205, 206, 213, 216, 245], "semant": [3, 14, 21, 101, 238], "surfac": [3, 74, 76, 82, 93, 112, 127, 131, 134, 154, 158, 185, 206, 232, 265], "enough": [3, 4, 11, 30, 32, 59, 68, 72, 95, 104, 107, 108, 119, 135, 152, 211, 213, 220, 236, 287, 289], "virtual": [3, 8, 39, 68, 84, 204, 290], "encod": [3, 13, 52, 60, 66, 69, 98, 220, 251, 255, 258], "backport": 3, "prior": [3, 12, 13, 39, 199, 216, 232, 293], "extrem": [3, 12, 33, 59, 72, 78, 84, 95, 101, 115, 149, 204, 232, 240], "accur": [3, 13, 15, 19, 23, 28, 47, 59, 68, 72, 73, 90, 95, 116, 206, 227, 286, 293], "model": [3, 14, 72, 98, 108, 119, 129, 133, 137, 139, 140, 141, 157, 216, 229, 240], "final": [3, 4, 5, 11, 12, 13, 21, 23, 26, 35, 48, 60, 67, 68, 74, 76, 93, 95, 98, 104, 108, 112, 117, 127, 128, 137, 142, 144, 145, 147, 150, 165, 177, 180, 182, 183, 185, 187, 188, 190, 195, 203, 204, 207, 209, 210, 213, 215, 222, 228, 229, 230, 232, 233, 236, 238, 239, 246, 258, 259, 290, 291, 292], "temptat": [3, 229, 297], "fudg": 3, "down": [3, 4, 8, 11, 12, 21, 73, 101, 121, 139, 203, 204, 206, 211, 222, 228, 230, 232, 236, 255, 293, 297], "earli": [3, 11, 68, 108, 174, 233], "acceler": [3, 109, 128, 130, 133, 137, 142, 144, 149, 150, 152, 188, 195, 199, 201, 209, 255, 274], "each": [3, 8, 9, 11, 12, 13, 14, 15, 17, 21, 23, 28, 30, 31, 32, 33, 35, 38, 41, 44, 45, 47, 48, 49, 50, 51, 52, 59, 60, 64, 68, 69, 70, 71, 72, 73, 74, 76, 78, 83, 84, 85, 90, 91, 93, 95, 97, 98, 99, 101, 104, 108, 111, 115, 117, 119, 125, 127, 128, 131, 135, 137, 139, 142, 144, 146, 147, 150, 169, 182, 185, 194, 195, 199, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 215, 216, 218, 220, 228, 229, 230, 232, 233, 236, 237, 238, 239, 240, 241, 244, 245, 246, 249, 251, 253, 255, 258, 259, 261, 265, 267, 268, 270, 272, 274, 287, 290, 292, 297, 298], "ensur": [3, 11, 12, 15, 23, 28, 30, 31, 32, 33, 36, 39, 68, 69, 72, 100, 104, 127, 131, 215, 216, 220, 251, 256, 259], "realli": [3, 11, 12, 13, 14, 19, 21, 22, 23, 68, 80, 108, 137, 187, 209, 210, 219, 221, 227, 229, 230, 232, 236, 252, 261, 289, 291], "per": [3, 69, 104, 109, 115, 128, 131, 159, 189, 195, 201, 206, 211, 216, 217, 265, 269, 271, 274], "everywher": [3, 14, 15, 68, 76, 93, 119, 201, 258, 274], "doctest": [3, 4, 5, 11, 15, 23, 61, 76, 104, 108, 137, 174, 185, 210, 216, 236, 251, 254, 256, 296], "sympy_deprecation_warn": [3, 249, 254, 256], "write": [3, 6, 7, 9, 10, 13, 14, 19, 21, 22, 24, 28, 40, 49, 57, 68, 69, 75, 76, 93, 95, 101, 152, 165, 203, 204, 208, 209, 211, 213, 215, 220, 229, 230, 233, 236, 239, 245, 251, 252, 253, 259, 290, 291, 292, 297], "multilin": [3, 220], "deprecated_since_vers": [3, 249, 254, 256], "active_deprecations_target": [3, 249, 254, 256], "target": [3, 4, 14, 47, 48, 49, 51, 68, 108, 125, 165, 169, 170, 189, 229, 232, 235, 238, 239, 249, 252, 253, 256, 297], "md": [3, 5, 12, 249, 256], "stacklevel": [3, 12, 249, 254, 256], "line": [3, 4, 9, 11, 12, 13, 14, 15, 19, 21, 39, 48, 49, 51, 59, 60, 64, 69, 78, 79, 80, 82, 83, 84, 85, 90, 93, 95, 96, 97, 104, 108, 111, 113, 115, 117, 120, 130, 131, 134, 135, 137, 143, 165, 195, 200, 201, 203, 205, 206, 220, 223, 230, 232, 236, 240, 241, 249, 251, 252, 253, 256, 259, 261, 272, 275, 283, 289], "visual": [3, 13, 68, 108, 112, 119, 219, 232], "confirm": [3, 12, 13, 59, 108, 236], "look": [3, 4, 5, 7, 9, 11, 12, 13, 15, 21, 22, 23, 40, 48, 49, 59, 68, 73, 74, 76, 89, 104, 108, 128, 135, 137, 145, 169, 179, 180, 183, 199, 206, 210, 211, 215, 220, 222, 223, 227, 230, 232, 233, 236, 237, 242, 251, 255, 259, 261, 270, 287, 292, 295, 296], "good": [3, 5, 7, 12, 14, 21, 23, 31, 37, 49, 68, 69, 72, 80, 93, 104, 108, 137, 149, 152, 207, 210, 211, 220, 227, 229, 230, 232, 236, 258, 286, 290, 293], "top": [3, 4, 5, 12, 13, 14, 30, 49, 67, 68, 69, 84, 85, 95, 98, 104, 111, 112, 127, 133, 180, 187, 210, 220, 230, 236, 253, 254, 259, 275, 292], "relev": [3, 4, 5, 11, 12, 13, 21, 49, 66, 81, 96, 97, 124, 128, 130, 133, 137, 190, 200, 204, 210, 230, 236, 237, 246, 251, 273], "docstr": [3, 6, 7, 11, 12, 13, 15, 23, 30, 48, 49, 61, 68, 90, 93, 95, 104, 108, 114, 118, 120, 126, 145, 150, 155, 172, 178, 179, 181, 198, 202, 216, 223, 226, 227, 229, 232, 236, 237, 238, 239, 245, 246, 251, 254, 259, 261, 266, 273, 276, 280, 282], "section": [3, 5, 8, 10, 11, 12, 14, 21, 23, 24, 41, 48, 50, 59, 60, 67, 68, 69, 71, 75, 76, 78, 84, 93, 98, 104, 111, 112, 127, 134, 135, 150, 188, 190, 201, 204, 207, 210, 213, 215, 220, 223, 227, 230, 236, 246, 255, 256, 258, 269, 270, 271, 272, 276, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298], "src": [3, 4, 5, 7, 11, 12, 110, 236, 251, 256], "explan": [3, 5, 12, 15, 17, 21, 24, 41, 42, 43, 44, 45, 46, 48, 49, 53, 56, 57, 59, 60, 61, 63, 65, 66, 67, 68, 69, 70, 74, 76, 80, 90, 91, 93, 95, 99, 104, 108, 119, 122, 124, 125, 127, 128, 130, 131, 133, 134, 143, 154, 156, 159, 162, 164, 166, 168, 180, 185, 205, 206, 207, 209, 211, 215, 216, 218, 222, 223, 225, 226, 227, 228, 230, 232, 233, 236, 238, 240, 241, 242, 245, 246, 251, 254, 256, 258, 259, 294], "cross": [3, 5, 11, 12, 14, 68, 78, 84, 99, 104, 111, 112, 127, 130, 134, 143, 152, 165, 194, 195, 197, 203, 204, 233, 239, 265, 269, 271, 272], "xyz": [3, 41, 80, 110, 111, 115, 195, 204, 265, 267, 270], "header": [3, 12, 49, 252, 253], "why": [3, 12, 13, 15, 21, 49, 68, 204, 211, 217, 227, 230, 259, 290, 292, 293], "test": [3, 4, 5, 6, 9, 10, 14, 15, 20, 22, 23, 30, 31, 44, 45, 47, 48, 49, 55, 59, 60, 67, 68, 69, 75, 78, 83, 93, 99, 101, 104, 108, 133, 165, 174, 178, 179, 180, 188, 204, 210, 211, 213, 215, 217, 228, 230, 233, 236, 237, 238, 239, 249, 252, 253, 254, 255, 256, 258, 259, 261, 276, 277, 284, 289, 291, 292], "warns_deprecated_sympi": [3, 12, 249, 254, 256], "run": [3, 4, 5, 8, 14, 15, 19, 21, 23, 25, 50, 59, 60, 62, 68, 69, 93, 104, 109, 110, 128, 133, 137, 152, 185, 200, 206, 207, 220, 230, 232, 236, 237, 238, 248, 249, 252, 254, 255, 258, 259, 284, 289, 296], "other": [3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 17, 18, 19, 22, 24, 28, 30, 31, 32, 33, 35, 36, 37, 41, 45, 48, 49, 50, 51, 59, 60, 61, 64, 65, 67, 68, 69, 70, 72, 73, 74, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 88, 93, 95, 98, 99, 101, 104, 108, 109, 110, 111, 112, 113, 119, 123, 124, 126, 127, 128, 131, 133, 134, 135, 136, 139, 140, 145, 146, 149, 150, 152, 154, 157, 158, 159, 169, 180, 182, 183, 184, 185, 188, 189, 190, 191, 192, 194, 195, 197, 199, 203, 204, 206, 207, 208, 209, 210, 211, 213, 215, 216, 217, 220, 221, 222, 225, 226, 227, 228, 229, 230, 232, 233, 235, 236, 237, 238, 239, 240, 241, 246, 247, 249, 252, 253, 254, 255, 258, 259, 265, 268, 269, 272, 274, 276, 282, 283, 286, 287, 289, 291, 292, 293, 297], "pr": [3, 11, 12, 13, 67, 127, 211, 213, 214, 216, 239], "onc": [3, 8, 9, 11, 12, 14, 15, 21, 22, 23, 49, 51, 52, 59, 64, 68, 69, 73, 76, 84, 93, 95, 109, 112, 125, 127, 145, 149, 190, 195, 197, 204, 206, 208, 210, 216, 220, 221, 229, 230, 232, 236, 239, 246, 258, 269, 286, 287, 297, 298], "merg": [3, 7, 11, 12, 49, 59, 60, 68, 193, 220, 228, 240, 251, 258, 259], "wiki": [3, 4, 5, 11, 15, 21, 23, 41, 43, 44, 45, 47, 48, 49, 51, 56, 57, 59, 60, 67, 68, 69, 70, 71, 73, 74, 76, 78, 80, 84, 85, 86, 95, 96, 97, 98, 99, 101, 104, 108, 117, 119, 122, 154, 156, 157, 158, 160, 161, 162, 166, 167, 168, 171, 173, 174, 183, 185, 189, 195, 197, 202, 206, 209, 216, 223, 227, 228, 229, 233, 236, 239, 240, 253, 258, 265, 267, 271, 273, 275, 293], "decor": [3, 12, 23, 59, 68, 76, 249, 251, 256, 257, 260, 261, 284], "sympydeprecationwarn": [3, 12, 13, 249, 251, 254, 256], "class": [3, 5, 7, 11, 12, 14, 15, 20, 21, 22, 23, 26, 28, 32, 33, 37, 38, 41, 42, 43, 44, 45, 50, 51, 52, 57, 58, 59, 60, 61, 62, 63, 64, 68, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 90, 91, 93, 95, 96, 97, 98, 99, 100, 101, 110, 111, 113, 115, 116, 117, 119, 124, 127, 128, 129, 130, 131, 133, 134, 135, 139, 140, 145, 146, 150, 152, 153, 154, 156, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 187, 190, 191, 192, 193, 198, 199, 200, 202, 207, 209, 210, 211, 213, 216, 217, 218, 219, 221, 222, 223, 226, 227, 228, 230, 232, 236, 237, 238, 239, 240, 242, 245, 246, 247, 251, 252, 253, 254, 255, 256, 258, 259, 263, 266, 269, 270, 272, 273, 275, 276, 280, 282, 287, 289, 292, 297], "context": [3, 4, 5, 11, 12, 13, 17, 21, 23, 34, 42, 43, 44, 68, 70, 76, 98, 135, 190, 210, 211, 213, 215, 228, 249, 251, 256, 265], "manag": [3, 7, 9, 12, 39, 43, 44, 110, 165, 213, 232, 246, 249, 251, 256], "filter": [3, 12, 13, 18, 32, 68, 69, 93, 157, 216, 249, 251, 256, 258], "emit": [3, 12, 220, 249, 256], "assert": [3, 11, 12, 48, 57, 58, 59, 60, 68, 78, 80, 110, 149, 209, 220, 228, 236, 237, 249, 256, 258], "separ": [3, 4, 11, 12, 13, 14, 15, 19, 22, 23, 25, 30, 36, 48, 56, 68, 69, 74, 76, 93, 95, 104, 120, 127, 131, 133, 149, 150, 153, 158, 182, 185, 195, 206, 208, 209, 211, 213, 216, 217, 220, 229, 232, 233, 236, 237, 239, 244, 249, 251, 255, 259, 261, 265, 289], "block": [3, 4, 26, 37, 49, 57, 59, 69, 99, 104, 127, 133, 135, 137, 140, 195, 204, 209, 233, 259, 269], "behavior1": 3, "behavior2": 3, "everyth": [3, 5, 12, 15, 23, 49, 68, 70, 76, 95, 102, 121, 149, 181, 182, 206, 220, 292, 296], "els": [3, 7, 11, 12, 13, 14, 21, 22, 23, 30, 49, 58, 60, 64, 68, 69, 76, 78, 82, 84, 85, 93, 95, 98, 104, 108, 119, 185, 195, 206, 209, 211, 215, 216, 220, 221, 228, 232, 236, 238, 239, 244, 246, 251, 258, 261, 265, 268, 286, 292], "anywher": [3, 4, 13, 21, 49, 68, 76, 82, 185, 261, 291], "ignore_warn": [3, 249, 254, 256, 259], "prevent": [3, 7, 12, 15, 32, 37, 49, 68, 74, 105, 108, 123, 133, 209, 211, 216, 220, 232, 240, 249, 256, 288], "trigger": [3, 12, 23, 60, 110, 185, 249], "twice": [3, 15, 49, 68, 70, 82, 108, 195, 197, 203, 216, 220, 255, 256, 265, 267, 287], "similar": [3, 9, 11, 12, 13, 15, 19, 21, 23, 28, 60, 67, 68, 69, 72, 73, 74, 76, 79, 84, 85, 89, 98, 104, 109, 119, 135, 137, 139, 149, 150, 183, 194, 201, 203, 204, 208, 210, 211, 213, 217, 227, 229, 230, 232, 236, 238, 241, 246, 249, 252, 255, 256, 265, 267, 269, 270, 274, 286, 291, 292, 293, 295, 297], "somewher": [3, 4, 5, 12, 14, 49], "sign": [3, 4, 5, 9, 12, 14, 26, 28, 32, 37, 41, 46, 49, 64, 68, 69, 73, 74, 78, 84, 93, 95, 104, 108, 111, 112, 115, 119, 131, 137, 158, 170, 195, 201, 203, 205, 209, 213, 220, 225, 227, 232, 233, 238, 258, 272, 275, 290], "readi": [3, 11, 21, 133, 210, 220, 236], "paragraph": [3, 4, 5, 23, 48], "metadata": [3, 11, 48, 254, 256], "link": [3, 4, 5, 7, 11, 14, 15, 29, 33, 49, 69, 78, 84, 95, 120, 127, 138, 146, 252, 255, 256, 295], "rememb": [3, 4, 11, 12, 15, 23, 35, 98, 104, 120, 123, 152, 203, 204, 220, 232, 238, 241, 259, 292, 297], "shown": [3, 4, 12, 13, 14, 21, 22, 23, 57, 60, 67, 68, 72, 74, 76, 93, 110, 112, 117, 119, 123, 128, 130, 138, 139, 140, 146, 147, 148, 194, 195, 203, 204, 206, 209, 210, 211, 216, 220, 236, 240, 256, 258, 269, 270, 290], "plain": [3, 4, 11, 12, 21, 68, 76, 96, 200, 209, 216, 220], "rst": [3, 4, 5, 11, 14, 50, 236, 251], "markdown": [3, 11, 14], "markup": [3, 11, 220], "clearli": [3, 4, 23, 108, 204, 210, 230, 293], "delin": 3, "newlin": [3, 12, 104, 261], "80": [3, 4, 8, 12, 15, 23, 47, 59, 68, 71, 95, 104, 108, 111, 112, 117, 209, 216, 219, 236, 240, 256, 258], "charact": [3, 4, 5, 11, 12, 68, 69, 93, 96, 110, 165, 195, 200, 206, 220, 236, 251, 253, 256, 261, 289, 291, 296], "full": [3, 4, 5, 11, 12, 13, 15, 17, 21, 23, 31, 45, 47, 49, 59, 60, 68, 72, 76, 80, 81, 95, 101, 104, 110, 133, 147, 148, 195, 209, 210, 213, 214, 216, 220, 222, 232, 233, 259, 291, 297], "abc": [3, 4, 11, 12, 15, 17, 18, 23, 26, 28, 30, 32, 34, 35, 36, 37, 41, 42, 43, 44, 45, 46, 47, 49, 57, 59, 61, 67, 68, 69, 70, 73, 74, 76, 77, 78, 79, 81, 82, 83, 84, 85, 91, 92, 93, 95, 96, 98, 99, 101, 104, 107, 108, 109, 117, 119, 121, 156, 158, 160, 161, 166, 183, 185, 186, 207, 209, 211, 213, 215, 216, 217, 220, 221, 222, 223, 225, 226, 227, 228, 229, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 245, 247, 252, 253, 254, 255, 256, 258, 259, 261, 265, 268, 269, 270, 275, 277, 289, 292, 296], "func": [3, 4, 12, 14, 20, 23, 43, 47, 49, 68, 70, 73, 76, 87, 89, 108, 130, 174, 195, 209, 213, 216, 220, 221, 232, 236, 237, 238, 249, 254, 256, 258, 259, 261, 264], "larger": [3, 5, 14, 23, 33, 49, 59, 60, 67, 68, 69, 76, 93, 101, 104, 108, 139, 143, 209, 211, 217, 221, 227, 232, 238, 253, 255, 289, 297], "easier": [3, 9, 11, 12, 13, 14, 22, 36, 51, 68, 112, 135, 137, 203, 211, 215, 217, 230, 236, 239, 253, 259, 269, 291, 297, 298], "exactli": [3, 4, 5, 11, 12, 13, 14, 15, 23, 28, 35, 37, 45, 52, 59, 68, 71, 72, 104, 110, 150, 205, 216, 230, 232, 236, 239, 241, 255, 258, 259, 287, 289, 291, 296, 297], "sphinx": [3, 5, 8, 11, 74, 236, 251, 256], "direct": [3, 4, 5, 13, 14, 20, 35, 41, 43, 44, 48, 53, 56, 59, 64, 67, 68, 70, 72, 74, 77, 81, 82, 83, 84, 98, 99, 104, 111, 112, 113, 115, 123, 124, 127, 130, 131, 133, 134, 137, 139, 143, 152, 171, 195, 201, 203, 204, 207, 209, 210, 213, 217, 227, 230, 246, 249, 258, 265, 270, 271, 274], "syntax": [3, 4, 5, 11, 13, 14, 15, 23, 35, 42, 44, 60, 68, 95, 110, 135, 152, 182, 206, 210, 219, 220, 232, 238, 242, 261, 287, 289, 291, 296, 298], "paramet": [3, 5, 12, 13, 14, 15, 28, 34, 36, 41, 42, 44, 47, 49, 50, 51, 59, 60, 64, 66, 68, 69, 70, 71, 73, 74, 76, 77, 78, 79, 81, 82, 83, 84, 85, 87, 91, 93, 95, 96, 98, 99, 101, 104, 105, 107, 108, 110, 111, 113, 115, 117, 119, 120, 121, 123, 124, 125, 127, 128, 129, 130, 131, 133, 134, 135, 137, 152, 154, 156, 157, 158, 160, 161, 162, 164, 165, 166, 168, 169, 170, 173, 174, 175, 177, 179, 180, 182, 183, 184, 185, 186, 187, 189, 195, 196, 197, 199, 200, 201, 204, 205, 206, 208, 209, 211, 213, 215, 216, 217, 218, 220, 221, 222, 223, 225, 226, 227, 228, 232, 233, 235, 236, 237, 238, 240, 241, 242, 245, 246, 249, 251, 252, 253, 255, 256, 258, 259, 265, 267, 268, 269, 270, 275, 287, 292], "short": [3, 5, 11, 12, 15, 40, 50, 58, 60, 64, 68, 69, 70, 71, 74, 102, 108, 123, 134, 171, 190, 194, 204, 207, 214, 241, 251, 261, 292, 296], "format": [3, 8, 11, 12, 14, 17, 19, 32, 35, 36, 48, 60, 69, 90, 91, 95, 98, 104, 107, 108, 111, 128, 129, 133, 153, 158, 169, 179, 206, 209, 210, 215, 216, 218, 220, 230, 236, 239, 251, 261, 265, 269, 290, 293, 296], "renam": [3, 49, 95], "rest": [3, 13, 93, 96, 98, 102, 112, 121, 135, 139, 145, 190, 207, 210, 240, 258, 289, 290, 297], "left": [3, 5, 13, 19, 21, 23, 26, 29, 30, 33, 41, 47, 49, 50, 59, 60, 64, 68, 69, 70, 73, 74, 76, 84, 85, 91, 93, 95, 96, 98, 99, 104, 107, 108, 113, 119, 124, 133, 134, 157, 164, 169, 173, 174, 177, 182, 194, 195, 201, 205, 206, 207, 209, 216, 217, 218, 219, 220, 222, 223, 227, 228, 229, 230, 232, 236, 237, 238, 239, 240, 251, 252, 253, 255, 258, 272, 287, 291, 293, 297], "imaginari": [3, 4, 15, 21, 23, 28, 32, 34, 41, 45, 46, 68, 72, 74, 76, 99, 152, 210, 211, 216, 220, 221, 228, 232, 239], "simplify_thi": [3, 4, 254], "expr": [3, 4, 12, 14, 15, 21, 23, 32, 34, 37, 43, 44, 46, 47, 49, 60, 67, 70, 72, 74, 76, 78, 90, 93, 95, 98, 101, 104, 108, 109, 110, 119, 123, 125, 128, 130, 131, 133, 135, 149, 162, 166, 168, 170, 174, 177, 180, 182, 183, 185, 192, 195, 197, 200, 206, 208, 209, 210, 211, 213, 215, 216, 217, 218, 220, 221, 222, 223, 225, 227, 229, 232, 235, 236, 237, 238, 239, 240, 241, 242, 244, 246, 247, 252, 253, 254, 256, 259, 265, 267, 268, 269, 270, 272, 286, 287, 289, 291, 292, 296, 297, 298], "simplifi": [3, 4, 11, 12, 14, 15, 19, 21, 22, 23, 26, 33, 34, 35, 42, 44, 46, 47, 67, 68, 70, 72, 73, 74, 76, 80, 85, 90, 93, 95, 98, 99, 100, 101, 104, 111, 119, 120, 125, 127, 128, 129, 131, 133, 134, 138, 139, 142, 143, 144, 149, 157, 164, 169, 184, 185, 189, 192, 195, 201, 207, 209, 215, 217, 219, 221, 226, 228, 229, 230, 233, 236, 237, 238, 239, 240, 242, 254, 256, 259, 269, 271, 277, 286, 288, 289, 291, 292, 293], "def": [3, 4, 5, 11, 12, 13, 14, 15, 19, 21, 22, 23, 43, 44, 48, 68, 73, 80, 98, 104, 108, 110, 143, 180, 210, 216, 220, 229, 232, 239, 254, 256, 258, 259, 262, 286, 289, 292, 293, 297], "ref": [3, 59, 74, 104, 117, 152, 225, 240, 254, 293], "is_this_zero": [3, 256], "y": [3, 4, 11, 12, 13, 14, 15, 17, 18, 21, 22, 23, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 59, 60, 67, 68, 69, 70, 71, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 91, 93, 95, 96, 97, 98, 99, 100, 101, 104, 108, 109, 110, 111, 112, 113, 115, 117, 119, 124, 125, 127, 130, 131, 133, 134, 135, 137, 138, 139, 140, 142, 143, 144, 146, 150, 152, 153, 162, 163, 166, 169, 174, 180, 182, 183, 185, 186, 194, 195, 196, 197, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 226, 227, 228, 229, 230, 232, 233, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 252, 253, 256, 258, 259, 261, 265, 268, 269, 270, 271, 272, 274, 275, 286, 287, 289, 291, 292, 296, 297, 298], "0": [3, 4, 11, 12, 13, 14, 15, 17, 19, 21, 22, 23, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 117, 119, 120, 121, 122, 124, 125, 127, 128, 130, 133, 134, 135, 137, 138, 139, 140, 142, 144, 147, 148, 149, 150, 152, 153, 154, 157, 158, 159, 161, 164, 169, 170, 171, 174, 179, 180, 181, 182, 183, 184, 185, 186, 190, 192, 194, 195, 196, 197, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 215, 216, 217, 218, 219, 220, 222, 223, 225, 226, 227, 228, 229, 230, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 249, 251, 252, 254, 255, 256, 258, 259, 260, 265, 267, 268, 269, 270, 271, 272, 275, 286, 287, 289, 291, 292, 293, 296, 297, 298], "zero": [3, 14, 15, 17, 21, 22, 23, 26, 33, 34, 41, 45, 46, 49, 58, 59, 60, 64, 67, 68, 71, 72, 73, 74, 76, 78, 82, 83, 84, 93, 95, 97, 98, 99, 101, 103, 104, 107, 108, 110, 111, 119, 127, 128, 129, 130, 133, 134, 135, 137, 140, 143, 146, 147, 148, 152, 157, 179, 183, 185, 187, 199, 201, 203, 204, 205, 207, 208, 209, 210, 211, 215, 216, 218, 220, 223, 227, 228, 230, 232, 233, 236, 237, 238, 239, 240, 241, 256, 258, 259, 269, 271, 272, 292, 298], "is_zero": [3, 21, 23, 83, 104, 207, 211, 216, 256, 293], "where": [3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 19, 21, 22, 23, 26, 28, 31, 32, 33, 35, 37, 40, 41, 45, 47, 48, 49, 50, 57, 58, 59, 60, 62, 64, 66, 67, 68, 69, 70, 72, 73, 74, 76, 78, 81, 83, 84, 85, 86, 90, 91, 92, 93, 95, 97, 98, 99, 100, 101, 104, 108, 111, 113, 115, 116, 119, 123, 127, 128, 129, 130, 133, 134, 135, 137, 148, 149, 150, 152, 153, 159, 169, 174, 180, 182, 184, 185, 186, 187, 188, 194, 195, 199, 201, 203, 204, 205, 207, 208, 209, 210, 211, 213, 215, 216, 217, 218, 220, 221, 222, 223, 226, 227, 228, 229, 230, 232, 233, 236, 237, 238, 240, 241, 244, 246, 251, 252, 253, 254, 258, 259, 261, 265, 272, 274, 287, 289, 291, 293, 297, 298], "mail": [3, 9, 11, 13, 28, 30, 31, 32, 33, 34, 35, 36, 37, 39, 220, 290], "summar": [3, 11, 251, 297], "idea": [3, 7, 11, 12, 14, 21, 22, 23, 53, 59, 66, 68, 69, 80, 86, 93, 95, 108, 120, 135, 185, 189, 190, 207, 209, 210, 229, 232, 233, 236, 239, 253, 259, 297], "fit": [3, 14, 48, 93, 104, 107, 108, 204, 220, 236, 261, 292], "put": [3, 4, 11, 13, 14, 15, 19, 23, 30, 49, 64, 65, 68, 69, 70, 74, 98, 99, 104, 157, 162, 166, 181, 182, 216, 220, 221, 229, 230, 232, 236, 241, 247, 252, 293, 297], "word": [3, 5, 9, 12, 14, 23, 45, 64, 67, 68, 69, 74, 76, 98, 119, 128, 135, 150, 207, 210, 215, 232, 233, 236, 238, 253, 265, 270, 289], "global": [3, 4, 9, 12, 13, 42, 43, 44, 47, 49, 50, 68, 80, 93, 110, 131, 133, 169, 175, 195, 197, 206, 207, 210, 211, 213, 220, 233, 236, 237, 240, 251, 253, 254, 259, 268], "uniqu": [3, 13, 14, 47, 48, 50, 59, 62, 64, 68, 69, 70, 73, 76, 83, 86, 91, 95, 97, 98, 104, 108, 127, 128, 174, 183, 195, 204, 207, 208, 209, 210, 213, 215, 216, 221, 225, 232, 233, 236, 238, 239, 240, 244, 253, 258, 261, 269, 274, 289, 292], "across": [3, 5, 11, 59, 66, 68, 79, 95, 112, 184, 185, 192, 206, 220, 255, 257, 258, 259, 295], "level": [3, 4, 5, 7, 12, 13, 14, 15, 21, 22, 30, 32, 49, 59, 66, 68, 74, 76, 95, 98, 104, 108, 123, 139, 152, 180, 185, 190, 194, 197, 204, 206, 209, 210, 218, 220, 229, 233, 239, 240, 244, 252, 253, 258, 292, 293, 295], "correspond": [3, 4, 5, 7, 11, 12, 13, 19, 21, 22, 23, 26, 31, 35, 47, 48, 49, 50, 58, 59, 60, 62, 63, 64, 67, 68, 69, 70, 71, 74, 76, 78, 79, 81, 82, 83, 84, 91, 93, 95, 97, 98, 99, 104, 107, 108, 111, 112, 119, 125, 127, 128, 129, 130, 133, 135, 137, 139, 153, 157, 161, 175, 179, 180, 182, 186, 187, 190, 195, 199, 201, 205, 206, 208, 209, 210, 211, 213, 215, 216, 220, 226, 227, 230, 232, 233, 236, 237, 238, 239, 240, 242, 244, 245, 246, 253, 254, 255, 256, 258, 259, 261, 265, 267, 269, 270, 272, 274, 292, 298], "share": [3, 7, 21, 23, 69, 108, 211, 215, 220, 240, 253], "__init__": [3, 4, 23, 68, 128, 129, 215, 265, 267, 292], "func_nam": [3, 49, 74, 99, 261], "help": [3, 4, 5, 7, 9, 11, 12, 21, 32, 40, 49, 58, 68, 76, 93, 95, 104, 108, 109, 111, 117, 135, 152, 160, 170, 204, 206, 215, 217, 220, 229, 230, 233, 236, 237, 240, 251, 252, 253, 259, 282, 290, 293], "rais": [3, 11, 12, 13, 15, 17, 21, 22, 23, 42, 44, 47, 49, 57, 60, 68, 69, 70, 72, 74, 77, 78, 81, 83, 84, 85, 93, 95, 99, 101, 104, 105, 107, 108, 110, 117, 119, 134, 159, 171, 201, 204, 206, 207, 208, 209, 210, 211, 213, 215, 216, 217, 220, 222, 228, 232, 235, 236, 237, 238, 239, 240, 244, 246, 249, 251, 253, 256, 258, 259, 261, 262, 272, 293], "been": [3, 11, 15, 21, 23, 28, 47, 49, 50, 59, 60, 61, 64, 67, 68, 69, 74, 80, 93, 95, 104, 108, 109, 110, 127, 128, 133, 135, 137, 145, 149, 150, 158, 170, 180, 182, 190, 201, 202, 203, 204, 207, 210, 211, 215, 217, 218, 220, 222, 227, 230, 232, 237, 238, 239, 241, 242, 250, 251, 253, 254, 256, 258, 261, 269, 272, 289, 290, 292, 293, 297], "simplfiy_thi": 3, "ident": [3, 14, 15, 23, 25, 45, 48, 50, 58, 59, 60, 66, 68, 69, 73, 74, 84, 91, 97, 99, 101, 104, 120, 122, 127, 128, 150, 169, 171, 174, 190, 207, 208, 209, 213, 214, 215, 216, 220, 229, 232, 236, 239, 244, 246, 251, 258, 259, 261, 270, 289, 293, 297], "much": [3, 4, 11, 12, 19, 21, 22, 23, 28, 34, 48, 49, 53, 64, 68, 72, 76, 90, 93, 95, 149, 150, 193, 203, 204, 205, 207, 209, 210, 213, 216, 227, 230, 232, 236, 237, 238, 239, 253, 255, 289, 291, 297], "trivial": [3, 50, 59, 64, 67, 68, 69, 74, 83, 98, 101, 104, 108, 147, 185, 207, 208, 213, 216, 230, 233, 236, 239, 244], "furthermor": [3, 13, 23, 45, 68, 69, 98, 215, 229, 289, 291, 292], "particular": [3, 4, 11, 12, 13, 14, 15, 21, 22, 29, 31, 45, 50, 59, 68, 69, 72, 76, 79, 93, 95, 98, 101, 104, 108, 111, 115, 145, 169, 180, 208, 209, 210, 211, 213, 215, 216, 226, 228, 230, 232, 233, 236, 238, 239, 251, 253, 255, 293, 295, 297], "expr1": [3, 21, 119, 206, 238, 292], "expr2": [3, 21, 119, 206, 292], "dozen": [3, 14, 23, 297], "search": [3, 4, 29, 47, 51, 59, 60, 64, 66, 68, 74, 104, 108, 135, 207, 215, 216, 220, 229, 230, 232, 237, 240, 252], "upcom": 3, "bot": [3, 11], "liter": [4, 12, 15, 23, 49, 58, 68, 96, 98, 110, 185, 192, 232], "occur": [4, 13, 14, 15, 59, 60, 68, 72, 76, 85, 93, 99, 110, 123, 127, 149, 194, 195, 203, 215, 223, 232, 237, 238, 241, 242, 251, 258, 292], "definit": [4, 13, 14, 15, 22, 41, 45, 49, 50, 59, 60, 65, 67, 68, 70, 71, 73, 74, 76, 81, 84, 91, 93, 95, 99, 100, 101, 104, 108, 110, 127, 133, 137, 142, 143, 150, 187, 190, 193, 195, 203, 204, 207, 208, 211, 216, 217, 220, 227, 240, 241, 252, 253, 254, 258, 259, 265, 269, 270, 271, 272, 287, 297], "__doc__": [4, 15], "attribut": [4, 14, 18, 21, 23, 43, 44, 48, 49, 59, 60, 68, 76, 77, 78, 81, 82, 83, 84, 101, 104, 110, 112, 119, 124, 127, 128, 129, 130, 131, 133, 142, 150, 153, 174, 179, 183, 190, 194, 195, 201, 204, 206, 207, 210, 211, 215, 220, 228, 232, 233, 245, 246, 252, 254, 258, 259, 262, 269, 292], "fdiff": [4, 11, 23, 49, 68, 74, 75, 76], "self": [4, 11, 12, 21, 23, 33, 41, 43, 44, 48, 49, 59, 60, 65, 67, 68, 70, 74, 77, 78, 79, 81, 82, 83, 84, 95, 99, 104, 108, 124, 137, 180, 185, 195, 197, 199, 206, 207, 209, 211, 213, 215, 216, 220, 222, 227, 228, 246, 265], "argindex": [4, 11, 23, 49, 68, 74, 75, 76], "heavisid": [4, 11, 76, 93, 95, 220], "diff": [4, 9, 11, 12, 13, 14, 19, 23, 26, 32, 35, 47, 49, 68, 73, 74, 75, 76, 85, 90, 95, 101, 104, 123, 125, 130, 138, 139, 152, 183, 195, 197, 200, 201, 204, 206, 211, 216, 219, 220, 230, 236, 237, 238, 241, 242, 247, 269, 272, 287, 291, 298], "diracdelta": [4, 11, 76, 95, 180, 185, 220], "what": [4, 5, 7, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 28, 29, 38, 47, 49, 60, 62, 67, 68, 69, 70, 74, 75, 78, 79, 83, 93, 95, 97, 104, 108, 110, 124, 127, 128, 131, 133, 135, 139, 146, 152, 184, 185, 188, 190, 195, 203, 204, 206, 211, 213, 216, 219, 220, 221, 227, 229, 230, 232, 233, 236, 238, 245, 249, 251, 253, 254, 259, 269, 270, 275, 287, 289, 290, 292, 296, 297], "specif": [4, 5, 7, 8, 11, 12, 13, 14, 21, 23, 24, 31, 38, 59, 60, 68, 69, 70, 76, 80, 95, 97, 99, 104, 124, 127, 128, 133, 135, 145, 152, 154, 190, 204, 206, 207, 211, 213, 215, 216, 219, 220, 221, 226, 232, 233, 236, 237, 238, 240, 246, 251, 252, 253, 258, 293, 297], "purpos": [4, 5, 9, 12, 13, 14, 20, 21, 23, 35, 48, 49, 59, 65, 68, 69, 95, 104, 108, 135, 150, 152, 190, 204, 206, 210, 213, 217, 219, 220, 227, 236, 239, 245, 255, 257, 259, 269, 270, 287, 297], "scope": [4, 11, 49, 145, 149, 249, 297], "high": [4, 5, 7, 11, 12, 15, 19, 21, 27, 28, 32, 49, 68, 72, 73, 96, 108, 152, 200, 209, 210, 215, 216, 218, 220, 233, 238, 282, 293], "od": [4, 12, 14, 23, 91, 128, 133, 145, 152, 234, 237, 277, 298], "seen": [4, 11, 19, 21, 41, 60, 93, 95, 110, 115, 127, 130, 133, 146, 190, 203, 207, 210, 213, 216, 236, 239, 256, 258, 269, 289, 292, 296], "hand": [4, 12, 13, 19, 21, 23, 30, 35, 48, 49, 51, 60, 61, 68, 74, 76, 95, 98, 99, 104, 108, 111, 115, 128, 133, 134, 135, 149, 150, 153, 157, 174, 177, 189, 195, 201, 204, 205, 207, 210, 211, 213, 215, 218, 230, 239, 251, 253, 255, 259, 262, 272, 274, 291], "code": [4, 8, 10, 14, 19, 21, 22, 23, 31, 34, 35, 36, 37, 39, 40, 50, 55, 59, 62, 63, 68, 69, 70, 76, 80, 93, 95, 96, 104, 108, 109, 110, 124, 127, 135, 137, 143, 145, 146, 152, 153, 179, 185, 194, 200, 203, 205, 206, 207, 208, 209, 210, 213, 219, 230, 232, 236, 238, 239, 240, 242, 245, 248, 249, 251, 252, 253, 256, 257, 258, 259, 269, 277, 284, 289, 291, 294, 296], "less": [4, 5, 11, 14, 19, 28, 31, 33, 41, 45, 49, 50, 51, 59, 60, 67, 68, 69, 72, 73, 74, 76, 82, 83, 84, 99, 104, 108, 117, 119, 133, 135, 137, 185, 209, 210, 211, 213, 215, 216, 229, 230, 232, 233, 236, 238, 239, 240, 251, 253], "understand": [4, 11, 12, 15, 21, 22, 23, 37, 68, 69, 93, 135, 145, 147, 148, 152, 190, 203, 206, 209, 210, 215, 220, 230, 233, 252, 259, 288, 289, 296, 297], "clear": [4, 7, 11, 12, 13, 21, 43, 58, 68, 93, 97, 124, 203, 204, 206, 209, 211, 213, 216, 230, 238, 239, 246, 251, 255, 274, 289], "begin": [4, 7, 11, 12, 13, 15, 21, 23, 26, 29, 33, 35, 41, 68, 69, 73, 74, 76, 93, 99, 101, 104, 108, 139, 147, 148, 149, 150, 181, 190, 194, 195, 204, 205, 209, 220, 230, 233, 236, 237, 239, 240, 251, 261, 289, 291, 293, 297], "convers": [4, 5, 13, 21, 31, 49, 68, 88, 110, 149, 189, 208, 209, 210, 211, 213, 215, 217, 220, 233, 245, 252, 265], "aim": [4, 5, 12, 86, 93, 190, 207, 230, 236, 239, 290, 291], "comment": [4, 5, 11, 12, 49, 59, 135, 137, 217, 220, 253, 258], "distract": 4, "input": [4, 5, 11, 12, 14, 15, 23, 26, 32, 35, 41, 47, 50, 64, 68, 69, 71, 72, 73, 74, 82, 95, 97, 98, 104, 108, 110, 113, 115, 116, 117, 119, 123, 127, 129, 133, 135, 137, 138, 139, 149, 152, 153, 158, 181, 195, 197, 199, 209, 210, 211, 213, 216, 217, 218, 219, 220, 221, 228, 232, 233, 236, 238, 240, 242, 252, 253, 255, 256, 258, 259, 261, 286, 292, 293, 297], "consum": [4, 49, 76, 129, 149], "human": [4, 11, 17, 93, 187, 216, 220], "beings": 4, "english": [4, 11, 69], "likewis": [4, 21, 48, 111, 138, 139], "reader": [4, 5, 11, 12, 23, 48, 50, 150, 207, 220, 255, 290, 295], "machineri": [4, 68, 215, 259], "mind": [4, 11, 12, 15, 18, 21, 32, 68, 104, 150, 206, 227, 228, 274, 292], "platform": [4, 68, 113, 185, 204, 236, 252], "anyon": [4, 5, 13, 38, 216, 220, 285, 295, 296], "restructuredtext": [4, 5], "extend": [4, 5, 12, 21, 23, 31, 45, 49, 59, 60, 68, 69, 73, 80, 93, 95, 104, 108, 152, 193, 200, 206, 208, 211, 213, 215, 216, 217, 220, 227, 229, 233, 235, 236, 239, 240, 241, 253, 255, 289, 291], "concis": [4, 152], "quick": [4, 5, 11, 23, 68, 104, 108, 232, 238, 259], "depth": [4, 5, 15, 16, 38, 59, 68, 137, 206, 207, 220], "tripl": [4, 11, 31, 85, 104, 204, 205, 207, 211, 215, 261], "doubl": [4, 5, 8, 35, 47, 49, 64, 68, 69, 73, 104, 110, 127, 144, 145, 203, 209, 210, 220, 229, 230, 253, 297], "quot": [4, 11, 15, 49, 98, 220, 261], "raw": [4, 5, 49, 68, 69, 74, 109, 110, 179, 184, 209, 210, 211, 216, 228, 232, 296], "backslash": [4, 68, 220], "blank": [4, 11, 12, 110, 206], "close": [4, 11, 14, 26, 34, 49, 67, 68, 72, 73, 76, 84, 86, 93, 95, 97, 119, 138, 206, 207, 208, 214, 215, 228, 238, 239, 253, 287, 297], "rare": [4, 12, 23, 68, 236, 240, 249, 289], "underlin": [4, 5], "numpydoc": [4, 5], "build": [4, 5, 6, 10, 11, 12, 18, 43, 44, 49, 68, 70, 76, 98, 152, 179, 190, 195, 204, 207, 212, 215, 216, 217, 227, 240, 269, 286, 289, 292], "cd": [4, 8, 9, 25, 115, 209, 239, 242, 258], "_build": [4, 8, 25], "consist": [4, 5, 13, 14, 19, 21, 30, 32, 36, 48, 59, 60, 64, 68, 69, 73, 74, 76, 78, 84, 86, 93, 98, 108, 111, 115, 127, 130, 146, 150, 159, 179, 185, 190, 193, 199, 206, 208, 209, 210, 211, 213, 228, 236, 238, 239, 240, 244, 249, 252, 253, 258, 290, 292], "review": [4, 5, 11, 12, 151], "head": [4, 18, 48, 68, 238, 240, 246, 261, 292], "plural": [4, 5], "length": [4, 13, 41, 49, 52, 58, 59, 60, 62, 66, 68, 69, 71, 73, 74, 76, 77, 81, 83, 84, 85, 98, 99, 104, 107, 108, 111, 112, 113, 115, 123, 128, 131, 133, 134, 138, 139, 140, 150, 154, 158, 182, 187, 188, 189, 190, 195, 199, 204, 215, 216, 220, 226, 230, 232, 236, 240, 251, 252, 258, 261, 265, 267, 275], "equal": [4, 12, 13, 14, 17, 21, 22, 23, 28, 35, 37, 41, 45, 48, 49, 50, 57, 58, 59, 60, 64, 66, 67, 68, 69, 70, 72, 73, 74, 76, 81, 82, 83, 84, 85, 87, 93, 98, 99, 101, 104, 108, 111, 115, 119, 120, 124, 128, 130, 131, 133, 137, 147, 148, 169, 170, 185, 189, 190, 195, 199, 204, 207, 208, 209, 210, 211, 213, 215, 216, 218, 220, 226, 228, 230, 233, 236, 237, 238, 239, 240, 246, 251, 252, 253, 258, 261, 265, 270, 275, 287, 290, 298], "clutter": 4, "harder": [4, 12, 13, 21, 68, 93, 210, 251], "minim": [4, 21, 23, 47, 59, 60, 64, 67, 68, 69, 93, 95, 98, 104, 108, 124, 139, 154, 209, 210, 211, 213, 216, 219, 229, 232, 233, 238, 258, 262], "amount": [4, 12, 48, 68, 69, 80, 127, 145, 195, 201, 204, 213, 223, 251, 265, 267], "deprec": [4, 6, 16, 30, 42, 60, 68, 95, 99, 122, 127, 128, 149, 206, 216, 220, 240, 246, 249, 250, 254, 256, 259], "notifi": 4, "awai": [4, 48, 50, 69, 111, 112, 115, 131, 137, 215, 220], "encourag": [4, 13, 48, 147, 148, 215], "choos": [4, 8, 9, 11, 32, 35, 59, 64, 68, 70, 73, 104, 108, 112, 117, 139, 150, 185, 189, 195, 203, 204, 209, 216, 217, 220, 227, 229, 230, 236, 237, 240, 251, 256, 297], "label": [4, 7, 35, 48, 49, 62, 68, 78, 91, 95, 113, 115, 158, 165, 169, 174, 183, 185, 206, 220, 221, 223, 232, 245, 246, 296], "elabor": [4, 24, 201, 272], "suffic": [4, 208, 238], "clarifi": 4, "complic": [4, 12, 15, 17, 21, 23, 28, 34, 41, 49, 59, 67, 69, 70, 72, 73, 74, 76, 93, 95, 101, 145, 147, 185, 204, 209, 210, 213, 217, 219, 230, 232, 239, 240, 244, 245, 253, 255, 259, 261, 287, 289, 292, 293], "demonstr": [4, 5, 15, 21, 23, 26, 28, 32, 33, 34, 59, 60, 68, 95, 108, 124, 127, 135, 139, 140, 149, 207, 210, 271, 297], "api": [4, 5, 11, 13, 21, 24, 31, 33, 49, 68, 80, 88, 109, 110, 118, 145, 150, 152, 181, 202, 206, 213, 233, 235, 259, 262, 269, 270, 273, 280, 282, 283, 290, 291, 294], "simpl": [4, 11, 12, 14, 15, 19, 21, 23, 34, 39, 48, 49, 59, 67, 68, 72, 76, 80, 84, 86, 93, 95, 97, 104, 108, 109, 111, 112, 119, 120, 123, 127, 128, 130, 133, 134, 137, 139, 140, 142, 144, 145, 149, 153, 159, 173, 174, 182, 183, 184, 195, 203, 204, 209, 210, 211, 212, 216, 217, 220, 222, 227, 229, 230, 232, 233, 236, 239, 246, 252, 253, 258, 262, 264, 265, 267, 268, 272, 286, 289, 292, 293, 297], "too": [4, 7, 11, 12, 15, 23, 25, 37, 59, 60, 68, 74, 76, 78, 81, 83, 93, 98, 107, 108, 109, 128, 147, 154, 227, 228, 232, 233, 236, 238, 239, 240, 251, 252, 268, 269], "thought": [4, 12, 14, 68, 227, 236, 289, 292], "perfect": [4, 23, 35, 59, 68, 108, 233, 239, 291, 292], "tell": [4, 5, 11, 21, 22, 28, 32, 35, 49, 60, 69, 72, 76, 99, 110, 133, 190, 210, 215, 219, 227, 230, 236, 252, 289], "think": [4, 11, 12, 13, 14, 21, 22, 23, 32, 39, 47, 59, 137, 190, 255, 259, 289, 297], "test_": [4, 11, 12, 251], "coverage_doctest": 4, "coverag": 4, "ad": [4, 5, 7, 8, 9, 11, 12, 13, 21, 30, 32, 41, 48, 49, 52, 58, 59, 68, 69, 79, 83, 90, 93, 97, 108, 110, 115, 123, 124, 127, 133, 135, 136, 152, 159, 187, 190, 196, 205, 206, 215, 217, 219, 220, 222, 230, 233, 236, 239, 240, 242, 245, 246, 251, 268, 289], "6868680200532414": [4, 12], "prompt": [4, 8, 12, 14], "dsolv": [4, 12, 14, 35, 236, 237, 238, 287, 291, 298], "co": [4, 9, 12, 13, 15, 23, 26, 29, 30, 32, 34, 35, 36, 37, 41, 47, 49, 67, 68, 70, 72, 73, 74, 76, 77, 78, 81, 82, 84, 86, 90, 91, 92, 93, 95, 99, 104, 108, 110, 124, 125, 127, 131, 133, 134, 135, 137, 138, 140, 142, 143, 144, 149, 152, 157, 159, 195, 197, 199, 201, 203, 204, 205, 206, 210, 213, 216, 217, 219, 220, 221, 222, 223, 227, 228, 229, 230, 232, 236, 238, 239, 240, 241, 247, 259, 265, 267, 268, 269, 270, 275, 286, 287, 289, 291, 297, 298], "sin": [4, 5, 12, 13, 14, 15, 21, 23, 26, 29, 32, 34, 35, 37, 39, 41, 47, 49, 67, 68, 70, 72, 73, 74, 76, 77, 78, 82, 86, 87, 90, 91, 92, 93, 95, 96, 99, 104, 109, 110, 121, 124, 125, 127, 131, 133, 134, 135, 137, 138, 140, 142, 143, 144, 149, 152, 157, 159, 183, 195, 197, 199, 201, 203, 204, 205, 206, 208, 210, 216, 217, 219, 220, 221, 222, 223, 227, 228, 229, 230, 232, 235, 236, 238, 239, 241, 247, 253, 259, 265, 267, 268, 269, 270, 275, 286, 287, 289, 291, 292, 297, 298], "hint": [4, 12, 23, 48, 52, 59, 68, 71, 74, 95, 99, 104, 108, 119, 152, 162, 166, 182, 184, 185, 195, 216, 227, 230, 238, 297], "1st_exact": [4, 12, 236], "eq": [4, 12, 14, 15, 17, 21, 23, 30, 31, 35, 37, 45, 47, 49, 68, 73, 74, 76, 78, 81, 85, 93, 98, 188, 206, 207, 211, 216, 218, 220, 222, 226, 228, 229, 232, 233, 235, 236, 237, 238, 239, 240, 252, 253, 259, 265, 289, 291, 298], "c1": [4, 12, 19, 35, 69, 78, 85, 99, 101, 127, 171, 185, 228, 233, 236, 238, 271, 298], "comma": [4, 5, 12, 15, 49, 68, 220, 259, 289], "readabl": [4, 12, 40, 48, 96, 123, 216, 219, 220, 227, 229, 262], "accept": [4, 11, 12, 14, 23, 30, 37, 48, 49, 59, 68, 74, 81, 82, 95, 98, 99, 101, 104, 107, 110, 119, 135, 179, 189, 195, 200, 206, 215, 216, 219, 220, 221, 228, 230, 232, 238, 252, 259, 265, 267, 270, 293], "rang": [4, 13, 14, 19, 23, 28, 31, 32, 47, 49, 57, 58, 59, 60, 62, 64, 68, 69, 73, 74, 76, 82, 99, 104, 108, 112, 115, 117, 121, 154, 185, 206, 209, 210, 211, 212, 213, 215, 216, 217, 222, 223, 226, 228, 229, 232, 236, 239, 240, 241, 245, 251, 258, 286, 297], "30": [4, 41, 47, 49, 54, 68, 69, 71, 72, 73, 76, 82, 84, 95, 99, 104, 105, 108, 111, 112, 113, 135, 158, 209, 211, 215, 216, 220, 226, 229, 232, 240, 241, 297], "7": [4, 11, 12, 15, 21, 23, 26, 28, 31, 35, 41, 43, 44, 47, 49, 52, 54, 57, 58, 59, 60, 61, 62, 64, 66, 67, 68, 69, 71, 72, 73, 74, 76, 78, 81, 82, 83, 84, 90, 93, 95, 98, 99, 101, 102, 104, 108, 110, 111, 113, 117, 119, 137, 144, 147, 148, 152, 185, 190, 192, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 219, 220, 222, 223, 226, 227, 228, 229, 230, 232, 233, 235, 236, 237, 238, 239, 240, 241, 245, 246, 251, 252, 255, 258, 259, 265, 275, 287, 292, 293, 296], "8": [4, 11, 12, 19, 26, 28, 34, 39, 41, 42, 47, 49, 52, 59, 60, 61, 64, 66, 68, 69, 71, 72, 73, 74, 76, 78, 81, 82, 84, 90, 93, 95, 97, 98, 99, 101, 102, 104, 105, 107, 108, 110, 111, 115, 117, 119, 121, 137, 152, 157, 158, 169, 205, 206, 208, 209, 210, 211, 213, 215, 216, 217, 219, 220, 222, 223, 226, 228, 229, 230, 232, 233, 235, 236, 237, 238, 239, 240, 241, 245, 251, 253, 255, 258, 265, 268, 269, 275, 286, 287, 291, 293, 297], "9": [4, 11, 12, 17, 26, 35, 37, 39, 47, 49, 56, 58, 59, 60, 64, 66, 67, 68, 69, 71, 73, 74, 76, 77, 78, 81, 82, 84, 90, 93, 95, 99, 100, 101, 102, 104, 105, 107, 108, 110, 111, 113, 117, 119, 120, 121, 122, 124, 135, 137, 140, 146, 152, 154, 158, 190, 205, 206, 208, 209, 210, 211, 213, 215, 216, 217, 219, 220, 226, 228, 229, 230, 232, 233, 236, 238, 239, 240, 241, 251, 255, 258, 265, 268, 291, 293, 298], "11": [4, 21, 43, 44, 49, 59, 62, 64, 66, 68, 69, 71, 73, 76, 80, 81, 82, 84, 85, 93, 95, 98, 99, 100, 104, 108, 110, 119, 135, 137, 169, 179, 194, 205, 206, 208, 209, 211, 213, 214, 215, 216, 217, 219, 220, 227, 229, 233, 236, 238, 239, 240, 241, 251, 252, 258, 269], "12": [4, 12, 15, 23, 26, 28, 41, 47, 48, 49, 54, 56, 57, 59, 60, 61, 64, 66, 67, 68, 69, 71, 73, 74, 76, 78, 81, 82, 84, 93, 95, 99, 104, 105, 108, 111, 112, 113, 117, 119, 121, 127, 137, 138, 182, 194, 195, 205, 208, 209, 210, 213, 215, 216, 217, 219, 220, 226, 228, 229, 233, 235, 236, 240, 241, 252, 255, 258, 268, 293, 297], "13": [4, 12, 41, 49, 57, 59, 64, 68, 69, 71, 73, 76, 80, 81, 82, 83, 93, 98, 104, 108, 112, 117, 119, 135, 194, 206, 209, 213, 215, 216, 217, 219, 220, 226, 233, 235, 237, 238, 240, 241, 252, 258, 275], "14": [4, 26, 28, 49, 57, 59, 63, 64, 66, 68, 69, 73, 74, 76, 93, 104, 105, 108, 109, 111, 117, 135, 205, 206, 209, 211, 213, 214, 215, 216, 217, 219, 220, 229, 232, 233, 236, 238, 240, 241, 287], "15": [4, 15, 23, 47, 54, 57, 59, 64, 66, 68, 69, 71, 72, 73, 76, 78, 81, 82, 84, 85, 93, 95, 98, 99, 100, 104, 105, 108, 111, 124, 158, 205, 206, 208, 209, 210, 211, 215, 216, 217, 219, 220, 222, 226, 227, 229, 232, 233, 237, 238, 239, 240, 241, 258, 286, 287, 292, 293], "16": [4, 12, 26, 28, 37, 41, 47, 49, 51, 59, 60, 63, 67, 68, 69, 73, 76, 77, 78, 82, 93, 95, 98, 104, 105, 107, 108, 112, 201, 208, 209, 210, 213, 214, 215, 216, 219, 220, 226, 228, 229, 230, 233, 240, 241, 258, 265, 274, 293], "17": [4, 34, 35, 37, 57, 59, 60, 68, 69, 72, 73, 74, 78, 81, 84, 93, 104, 108, 119, 210, 211, 215, 216, 219, 220, 227, 229, 233, 236, 241, 255, 259, 291], "18": [4, 34, 51, 59, 60, 68, 71, 73, 76, 78, 81, 84, 100, 104, 108, 111, 112, 117, 119, 121, 196, 205, 209, 213, 214, 219, 220, 228, 229, 233, 236, 238, 239, 240, 241, 268], "19": [4, 26, 34, 59, 68, 71, 76, 78, 81, 84, 104, 108, 110, 111, 205, 211, 215, 216, 219, 229, 233, 235, 238, 252, 286], "20": [4, 15, 26, 34, 37, 45, 49, 57, 59, 60, 67, 68, 69, 72, 73, 76, 84, 85, 95, 104, 108, 111, 112, 113, 115, 119, 130, 190, 192, 205, 206, 209, 210, 214, 215, 216, 217, 219, 220, 226, 227, 228, 229, 232, 233, 236, 239, 240, 265, 287], "21": [4, 13, 54, 59, 68, 71, 73, 81, 82, 90, 104, 108, 110, 111, 194, 206, 209, 211, 213, 214, 215, 217, 219, 220, 226, 236, 240, 241, 297], "22": [4, 12, 15, 59, 68, 71, 72, 73, 76, 104, 108, 111, 112, 194, 214, 219, 232, 233, 238, 240], "23": [4, 47, 59, 60, 68, 71, 74, 76, 82, 84, 104, 108, 111, 194, 211, 213, 216, 219, 226, 233, 258], "24": [4, 11, 12, 31, 33, 34, 41, 47, 56, 60, 61, 68, 71, 73, 76, 82, 90, 95, 104, 108, 111, 112, 117, 119, 182, 192, 205, 211, 213, 215, 216, 217, 219, 222, 227, 233, 236, 240, 255, 258, 275, 287, 293], "25": [4, 15, 26, 31, 34, 59, 60, 69, 71, 73, 76, 78, 81, 83, 100, 104, 107, 108, 111, 112, 119, 124, 130, 199, 205, 209, 213, 215, 216, 219, 220, 226, 227, 229, 233, 235, 236, 237, 240, 252], "26": [4, 57, 68, 69, 71, 76, 80, 104, 108, 111, 112, 216, 233, 240], "27": [4, 11, 32, 49, 50, 59, 63, 73, 78, 104, 108, 111, 112, 119, 121, 213, 216, 238], "28": [4, 49, 59, 67, 71, 72, 76, 104, 108, 111, 137, 229, 233, 236, 292], "29": [4, 21, 41, 43, 44, 51, 57, 59, 60, 68, 69, 71, 73, 74, 81, 82, 104, 108, 119, 174, 210, 228, 240, 258], "assumpt": [4, 12, 14, 15, 20, 22, 24, 31, 32, 33, 42, 43, 45, 46, 48, 49, 59, 60, 62, 67, 70, 72, 74, 75, 95, 98, 99, 104, 105, 111, 119, 123, 152, 189, 192, 197, 209, 219, 220, 228, 229, 232, 236, 238, 239, 245, 253, 258, 276, 277, 297], "parenthes": [4, 12, 15, 68, 110, 123, 173, 174, 204, 220, 244, 261], "respect": [4, 9, 12, 13, 14, 15, 23, 26, 35, 42, 44, 45, 47, 48, 49, 50, 58, 59, 60, 63, 64, 66, 67, 68, 70, 73, 74, 76, 78, 80, 84, 85, 90, 91, 93, 95, 98, 99, 101, 104, 108, 110, 111, 112, 115, 119, 124, 125, 127, 130, 133, 134, 139, 146, 148, 150, 152, 159, 174, 187, 188, 194, 195, 199, 201, 204, 205, 206, 207, 209, 210, 211, 213, 215, 216, 217, 220, 222, 223, 226, 228, 232, 236, 237, 238, 239, 240, 241, 245, 246, 251, 253, 265, 267, 268, 269, 270, 271, 272, 273, 274, 287, 297], "type": [4, 7, 9, 11, 13, 14, 15, 16, 18, 21, 22, 23, 26, 29, 31, 32, 37, 43, 44, 47, 51, 59, 60, 64, 67, 68, 69, 70, 71, 72, 74, 78, 79, 80, 81, 82, 83, 86, 93, 95, 96, 97, 98, 99, 100, 101, 104, 108, 109, 110, 111, 112, 115, 117, 119, 123, 127, 128, 131, 133, 134, 135, 146, 152, 157, 171, 179, 180, 181, 183, 189, 195, 199, 200, 204, 206, 207, 209, 210, 211, 214, 215, 216, 217, 218, 220, 221, 222, 228, 229, 230, 232, 233, 235, 236, 238, 244, 245, 246, 249, 251, 252, 253, 258, 259, 261, 269, 272, 275, 287, 289, 291, 292, 293, 296, 297, 298], "enclos": [4, 78, 79, 84, 107, 120, 220, 230, 259], "backtick": [4, 5, 8], "colon": [4, 68], "preced": [4, 5, 15, 50, 60, 68, 69, 72, 73, 165, 232, 259], "space": [4, 12, 15, 23, 47, 48, 49, 68, 69, 70, 77, 78, 79, 81, 83, 84, 97, 104, 110, 111, 121, 127, 128, 129, 130, 154, 156, 159, 169, 172, 174, 180, 182, 195, 199, 201, 204, 205, 206, 207, 215, 239, 240, 251, 255, 265, 267, 269, 270, 271, 272, 274, 275, 282, 289, 292], "omit": [4, 13, 21, 23, 49, 60, 67, 68, 69, 73, 93, 95, 98, 104, 187, 209, 220, 221, 228, 230, 238, 244, 253, 258, 287], "absent": [4, 52, 238], "possibl": [4, 8, 11, 12, 13, 14, 17, 21, 22, 23, 26, 28, 31, 36, 39, 47, 49, 50, 51, 52, 57, 59, 60, 62, 63, 64, 68, 69, 73, 74, 76, 78, 80, 82, 83, 85, 90, 92, 93, 95, 97, 98, 99, 101, 104, 108, 120, 121, 123, 128, 131, 134, 137, 148, 179, 181, 185, 187, 189, 190, 194, 199, 201, 205, 206, 207, 208, 209, 210, 211, 213, 215, 216, 217, 219, 220, 221, 222, 226, 227, 228, 229, 232, 233, 236, 237, 238, 239, 240, 241, 246, 251, 253, 254, 255, 256, 258, 259, 269, 270, 272, 288, 289, 292, 297], "specifi": [4, 5, 13, 17, 21, 23, 28, 33, 34, 36, 37, 48, 49, 50, 63, 67, 68, 69, 70, 71, 74, 76, 77, 81, 84, 93, 95, 97, 98, 99, 101, 104, 108, 110, 111, 112, 113, 115, 119, 124, 127, 128, 133, 134, 135, 137, 139, 140, 142, 145, 147, 148, 149, 150, 152, 153, 169, 174, 179, 180, 182, 183, 188, 194, 195, 197, 199, 201, 203, 204, 207, 208, 209, 210, 211, 213, 215, 216, 217, 220, 222, 223, 226, 227, 228, 230, 232, 236, 237, 238, 239, 240, 241, 245, 246, 247, 251, 252, 253, 258, 259, 265, 267, 268, 271, 274, 293], "displai": [4, 5, 7, 11, 15, 21, 22, 35, 68, 69, 72, 93, 97, 111, 112, 117, 156, 189, 195, 199, 200, 206, 210, 211, 220, 228, 244, 251], "signatur": [4, 7, 23, 43, 44, 60, 68, 104, 253, 254, 258, 259], "brace": [4, 73, 135, 220], "appear": [4, 5, 11, 12, 14, 15, 17, 35, 48, 49, 52, 57, 59, 68, 69, 73, 74, 77, 78, 81, 84, 87, 91, 93, 95, 99, 104, 108, 110, 131, 135, 139, 169, 185, 187, 190, 206, 208, 210, 213, 215, 216, 220, 229, 232, 236, 237, 238, 240, 244, 246, 251, 258, 259, 265, 270], "shape": [4, 13, 49, 84, 99, 101, 104, 106, 107, 117, 119, 127, 133, 135, 195, 206, 207, 209, 220, 223, 230, 240, 241, 242, 244, 245, 246, 259, 296], "combin": [4, 11, 13, 15, 23, 28, 36, 48, 68, 72, 73, 76, 95, 97, 98, 99, 108, 112, 119, 127, 128, 133, 138, 145, 153, 164, 171, 179, 180, 182, 183, 184, 188, 189, 190, 191, 207, 208, 210, 211, 213, 215, 216, 220, 221, 229, 230, 232, 233, 236, 238, 240, 241, 255, 258, 286, 289, 292], "incorrectli": [4, 11, 13, 23, 77, 78, 104, 208], "opt_cs": [4, 232], "canon": [4, 14, 21, 30, 49, 52, 57, 59, 60, 64, 68, 69, 70, 74, 84, 93, 98, 104, 108, 110, 128, 162, 166, 185, 187, 190, 192, 209, 213, 221, 228, 229, 232, 236, 238, 240, 246, 258, 297], "find": [4, 9, 11, 12, 14, 15, 17, 19, 20, 23, 26, 29, 30, 31, 32, 33, 35, 36, 37, 41, 44, 47, 49, 50, 51, 59, 62, 63, 64, 67, 68, 72, 74, 76, 78, 80, 81, 82, 85, 90, 93, 95, 97, 104, 108, 110, 113, 125, 130, 136, 143, 150, 152, 154, 170, 177, 179, 180, 181, 185, 188, 190, 203, 206, 207, 208, 209, 210, 211, 213, 217, 219, 220, 225, 226, 227, 228, 229, 230, 232, 233, 235, 236, 238, 239, 240, 246, 255, 258, 259, 261, 265, 275, 287, 289, 291, 293, 298], "optim": [4, 14, 34, 49, 52, 59, 72, 98, 108, 123, 152, 165, 169, 209, 216, 220, 221, 229, 232, 240, 252], "mul": [4, 13, 14, 15, 18, 23, 41, 93, 95, 99, 108, 165, 169, 179, 180, 209, 210, 211, 215, 216, 220, 221, 222, 229, 232, 236, 237, 238, 239, 244, 292], "pow": [4, 13, 14, 15, 41, 46, 49, 68, 69, 74, 93, 99, 108, 184, 209, 210, 211, 216, 220, 222, 229, 232, 238, 239, 292, 296], "neg": [4, 14, 15, 21, 22, 26, 32, 45, 46, 49, 50, 63, 67, 68, 73, 74, 76, 78, 80, 81, 84, 93, 95, 97, 98, 99, 104, 107, 108, 111, 112, 115, 116, 117, 119, 127, 131, 185, 195, 205, 208, 209, 211, 213, 215, 216, 217, 220, 226, 228, 229, 230, 232, 233, 236, 238, 239, 240, 259], "coeffici": [4, 17, 19, 21, 28, 31, 33, 44, 47, 49, 67, 68, 70, 72, 73, 76, 81, 86, 87, 90, 91, 93, 97, 98, 101, 104, 105, 108, 119, 120, 128, 135, 158, 172, 182, 190, 205, 207, 208, 209, 210, 211, 212, 215, 216, 217, 218, 219, 222, 223, 226, 227, 230, 232, 233, 235, 236, 237, 238, 239, 240, 246, 252, 269, 272, 282, 292, 297], "none": [4, 5, 12, 13, 14, 21, 22, 23, 41, 42, 43, 44, 45, 47, 48, 49, 51, 57, 58, 59, 60, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 76, 77, 78, 79, 81, 82, 83, 84, 85, 87, 89, 90, 91, 93, 95, 96, 98, 99, 101, 104, 105, 108, 109, 110, 111, 115, 119, 124, 125, 127, 128, 129, 130, 133, 135, 154, 156, 158, 159, 165, 170, 175, 180, 182, 185, 187, 191, 192, 193, 195, 197, 199, 200, 204, 205, 206, 207, 209, 210, 211, 213, 215, 216, 218, 220, 221, 222, 223, 225, 226, 227, 228, 229, 232, 233, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 249, 251, 252, 253, 254, 258, 259, 261, 264, 265, 268, 293, 297, 298], "process": [4, 5, 6, 7, 9, 10, 12, 13, 14, 15, 21, 46, 49, 59, 60, 66, 68, 69, 74, 76, 84, 93, 95, 104, 108, 119, 128, 129, 133, 135, 137, 143, 146, 147, 149, 152, 206, 207, 213, 220, 221, 228, 232, 236, 238, 242, 251, 255, 297], "concern": [4, 12, 14, 21, 47, 50, 67, 72, 108, 201, 206, 208, 209, 210, 219, 220, 221, 232, 233, 238, 252, 253, 255, 261], "item": [4, 5, 14, 15, 17, 28, 35, 49, 57, 58, 60, 68, 73, 79, 85, 99, 104, 108, 128, 130, 131, 150, 206, 209, 210, 213, 216, 220, 228, 236, 237, 240, 251, 252, 255, 258, 259, 297], "fragment": [4, 69], "desir": [4, 13, 15, 19, 23, 30, 35, 37, 40, 59, 60, 68, 69, 71, 72, 73, 74, 78, 82, 84, 98, 99, 104, 107, 108, 109, 128, 129, 130, 133, 145, 149, 170, 195, 203, 204, 209, 211, 213, 215, 216, 217, 220, 221, 223, 228, 232, 236, 238, 239, 252, 254, 255, 258, 272, 286], "span": [4, 13, 97, 104, 111, 112, 127, 131, 215, 220, 256, 293], "subsequ": [4, 11, 12, 15, 35, 68, 74, 195, 211, 213, 216, 255, 258, 269, 272], "indent": [4, 15, 261], "embed": [4, 5, 47, 60, 68, 96, 215], "hyperlink": 4, "classnam": 4, "erf": [4, 76, 93, 95, 220, 230, 240], "gauss": [4, 33, 76, 95, 104, 154, 208, 209, 215, 218, 238, 239], "erfc": [4, 76, 93, 220, 240], "complementari": [4, 76, 119], "erfi": [4, 76, 93, 220], "erf2": [4, 76, 220], "erfinv": [4, 76, 220, 240], "invers": [4, 12, 33, 35, 41, 59, 60, 68, 69, 70, 76, 95, 101, 104, 108, 127, 128, 133, 174, 178, 179, 182, 187, 190, 207, 208, 209, 211, 213, 216, 217, 220, 222, 230, 232, 236, 238, 239, 240, 258, 293, 297], "erfcinv": [4, 76, 220], "erf2inv": [4, 76, 220], "besselj": [4, 76, 90, 220, 232, 236, 291], "besselbas": [4, 76], "bessel": [4, 5, 74, 86, 95, 216, 232, 236, 240, 291], "kind": [4, 5, 13, 14, 20, 21, 22, 23, 48, 49, 70, 73, 76, 88, 95, 99, 111, 115, 128, 135, 148, 189, 201, 208, 210, 211, 216, 221, 222, 228, 236, 237, 240, 258, 272, 274, 287, 297], "bess": [4, 76, 220, 232, 236, 240], "besselk": [4, 76, 220, 240], "cite": [4, 24], "resourc": [4, 5, 8, 23, 104, 214, 236, 252, 262], "citat": 4, "meant": [4, 5, 12, 13, 15, 21, 23, 49, 68, 76, 81, 95, 108, 135, 152, 206, 211, 228, 232, 237, 242, 270, 292], "augment": [4, 49, 104, 128, 133, 147, 148, 152, 218, 238, 239, 256, 259, 298], "freeli": [4, 40, 102, 127, 207], "wikipedia": [4, 14, 21, 23, 41, 43, 44, 45, 47, 48, 49, 51, 56, 57, 59, 60, 67, 68, 69, 70, 71, 73, 74, 76, 78, 80, 84, 85, 86, 95, 97, 98, 99, 101, 104, 108, 117, 119, 122, 154, 156, 157, 158, 160, 161, 162, 166, 167, 168, 171, 173, 174, 183, 185, 188, 195, 197, 202, 209, 216, 223, 227, 228, 229, 236, 239, 240, 253, 258, 265, 267, 271, 273, 275, 291, 293, 295], "wolfram": [4, 45, 61, 62, 68, 69, 71, 73, 74, 76, 78, 84, 95, 104, 108, 110, 214, 220, 222, 223, 225, 228, 233, 240, 258, 293], "mathworld": [4, 14, 45, 61, 62, 68, 69, 71, 73, 74, 76, 78, 84, 95, 104, 108, 214, 223, 228, 233, 240, 258], "nist": [4, 74, 76, 190], "digit": [4, 11, 14, 15, 34, 49, 68, 69, 71, 72, 78, 95, 98, 108, 145, 195, 210, 216, 227, 232, 258, 286], "dlmf": [4, 74, 76], "suffer": [4, 216], "rot": [4, 84, 182], "publish": [4, 93, 230], "identifi": [4, 12, 13, 21, 22, 47, 61, 68, 71, 72, 95, 104, 115, 133, 147, 173, 174, 207, 210, 211, 221, 229, 232, 236, 237, 239, 240, 259, 262], "clickabl": 4, "kozen89": [4, 213, 214], "d": [4, 5, 7, 8, 11, 12, 13, 14, 15, 19, 23, 26, 29, 31, 33, 35, 41, 48, 52, 57, 59, 60, 61, 63, 64, 66, 67, 68, 69, 70, 73, 76, 78, 82, 86, 91, 93, 95, 97, 98, 99, 100, 101, 104, 105, 107, 108, 110, 111, 115, 119, 127, 128, 129, 152, 154, 157, 158, 164, 174, 182, 184, 185, 190, 194, 195, 197, 203, 204, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 220, 222, 226, 230, 232, 233, 236, 237, 238, 239, 240, 241, 242, 244, 246, 258, 261, 265, 267, 268, 269, 270, 274, 282, 293, 298], "kozen": [4, 214], "landau": [4, 214, 287], "polynomi": [4, 5, 14, 19, 21, 29, 31, 37, 45, 59, 67, 68, 69, 72, 73, 86, 87, 89, 91, 95, 98, 99, 101, 104, 108, 112, 119, 152, 194, 207, 209, 214, 218, 222, 227, 229, 230, 232, 233, 235, 236, 239, 251, 276, 283, 288, 293, 298], "decomposit": [4, 28, 33, 59, 66, 100, 101, 104, 209, 211, 213, 214, 222, 297], "1989": [4, 214, 238], "pp": [4, 59, 60, 66, 67, 68, 69, 73, 74, 95, 99, 104, 108, 129, 139, 149, 205, 208, 209, 213, 214, 236, 237, 240], "445": [4, 214], "456": [4, 68, 214], "abramowitz": [4, 76], "milton": [4, 76], "stegun": [4, 76], "iren": [4, 76], "chapter": [4, 59, 76, 108, 135, 214], "handbook": [4, 50, 58, 59, 66, 76, 108], "formula": [4, 19, 28, 41, 47, 62, 67, 68, 72, 73, 74, 76, 81, 98, 104, 108, 134, 205, 207, 213, 216, 220, 222, 226, 229, 232, 233, 236, 291, 297], "tabl": [4, 21, 50, 59, 68, 73, 76, 89, 95, 104, 108, 127, 152, 205, 215, 242], "ed": [4, 60, 76, 95, 104, 214, 238, 240], "1965": [4, 76, 99], "luke": [4, 76, 93, 230], "l": [4, 13, 15, 47, 48, 49, 50, 57, 59, 60, 67, 69, 76, 79, 80, 81, 82, 83, 85, 86, 91, 93, 95, 97, 100, 101, 104, 108, 111, 112, 119, 121, 127, 128, 129, 130, 131, 133, 134, 135, 138, 139, 140, 142, 143, 144, 148, 149, 150, 151, 152, 153, 154, 157, 183, 186, 187, 188, 190, 203, 204, 205, 207, 209, 211, 213, 214, 220, 222, 223, 229, 230, 233, 236, 238, 240, 244, 245, 246, 247, 251, 253, 258, 275, 297], "Their": [4, 68, 76, 93, 205, 206, 210, 213, 230], "approxim": [4, 15, 20, 37, 47, 59, 67, 68, 69, 72, 76, 78, 84, 93, 95, 104, 108, 112, 116, 154, 188, 210, 211, 216, 223, 227, 230, 240, 287, 291], "1969": [4, 69, 76, 93, 214, 230], "en": [4, 5, 8, 9, 11, 12, 21, 23, 41, 43, 44, 45, 47, 48, 49, 51, 56, 57, 59, 60, 67, 68, 69, 70, 71, 73, 74, 76, 78, 80, 84, 85, 86, 95, 96, 97, 98, 99, 101, 104, 108, 117, 119, 122, 154, 156, 157, 158, 160, 161, 162, 166, 167, 168, 171, 173, 174, 183, 185, 195, 197, 202, 209, 216, 217, 223, 227, 228, 229, 236, 239, 240, 253, 258, 259, 265, 267, 271, 273, 275, 293], "bessel_funct": [4, 76], "typefunct": [4, 76], "gamma": [4, 5, 12, 15, 23, 67, 68, 70, 72, 73, 93, 95, 122, 152, 182, 204, 205, 220, 230, 232, 236, 240, 297], "infti": [4, 14, 21, 45, 67, 68, 69, 73, 74, 76, 93, 95, 207, 216, 223, 227, 230, 236, 239, 240, 287, 291, 297], "mathrm": [4, 39, 58, 67, 68, 69, 76, 93, 95, 104, 211, 213, 220, 228, 230, 236, 239, 240, 287, 291], "factori": [4, 12, 19, 23, 33, 67, 68, 72, 73, 76, 104, 108, 110, 205, 211, 213, 215, 216, 220, 222, 232, 238, 240, 253, 254, 258, 259, 297], "z": [4, 13, 14, 15, 17, 21, 23, 31, 34, 35, 36, 41, 45, 46, 49, 50, 59, 60, 67, 68, 69, 70, 71, 73, 74, 76, 80, 81, 82, 83, 84, 93, 95, 98, 99, 101, 104, 110, 111, 112, 113, 119, 121, 124, 125, 127, 130, 131, 133, 134, 135, 137, 138, 139, 140, 142, 143, 144, 146, 149, 150, 152, 153, 154, 163, 165, 169, 179, 180, 182, 186, 190, 194, 195, 196, 197, 199, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 219, 220, 221, 227, 228, 229, 230, 232, 233, 236, 237, 238, 239, 240, 241, 244, 245, 246, 252, 253, 259, 265, 268, 269, 270, 271, 272, 274, 275, 286, 287, 289, 291, 292, 296, 297, 298], "whole": [4, 12, 13, 21, 68, 70, 76, 95, 112, 121, 206, 207, 209, 215, 216, 220, 223, 228, 230, 236, 239, 258], "complex": [4, 7, 12, 13, 14, 15, 18, 21, 23, 31, 32, 33, 37, 41, 45, 46, 47, 49, 59, 68, 69, 71, 72, 73, 76, 80, 90, 93, 99, 100, 104, 108, 109, 110, 117, 119, 123, 128, 131, 133, 135, 152, 154, 158, 168, 171, 173, 174, 185, 194, 195, 204, 208, 209, 211, 215, 216, 220, 221, 225, 228, 230, 232, 236, 238, 239, 240, 253, 261, 297, 298], "plane": [4, 26, 41, 68, 76, 78, 80, 81, 83, 84, 95, 104, 117, 127, 137, 157, 158, 203, 204, 228, 239, 275, 283, 297], "pole": [4, 14, 26, 76, 93, 119, 127, 158, 227, 230, 236], "pi": [4, 12, 13, 14, 15, 18, 21, 23, 29, 30, 32, 35, 37, 40, 41, 42, 44, 45, 46, 47, 49, 60, 67, 68, 70, 72, 73, 74, 76, 77, 78, 79, 81, 82, 83, 84, 87, 93, 95, 104, 108, 121, 127, 134, 137, 152, 154, 156, 157, 158, 159, 161, 169, 180, 182, 183, 186, 188, 195, 205, 206, 208, 210, 211, 216, 220, 223, 227, 228, 229, 230, 232, 235, 236, 238, 239, 240, 258, 265, 268, 275, 286, 291, 297], "oo": [4, 14, 17, 21, 22, 26, 30, 45, 47, 67, 68, 72, 73, 74, 76, 81, 93, 95, 98, 104, 119, 121, 171, 183, 186, 211, 213, 216, 225, 226, 227, 228, 232, 235, 236, 238, 239, 240, 245, 258, 261, 287, 291], "known": [4, 11, 12, 14, 21, 22, 23, 26, 35, 44, 48, 49, 50, 51, 57, 59, 60, 68, 69, 72, 73, 76, 78, 81, 86, 93, 95, 96, 105, 108, 117, 119, 120, 122, 124, 130, 133, 149, 188, 195, 203, 209, 210, 211, 215, 216, 220, 223, 226, 228, 229, 230, 232, 235, 236, 237, 238, 240, 258, 259, 265, 272, 274, 297], "sqrt": [4, 12, 13, 14, 17, 21, 23, 26, 28, 29, 30, 31, 32, 36, 37, 41, 45, 46, 47, 49, 68, 70, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 91, 92, 93, 95, 96, 99, 100, 104, 108, 110, 111, 115, 119, 121, 131, 134, 137, 154, 156, 158, 159, 164, 169, 179, 180, 182, 183, 185, 186, 188, 189, 195, 201, 204, 205, 208, 210, 211, 213, 215, 216, 219, 220, 221, 226, 229, 230, 232, 233, 235, 236, 238, 239, 240, 258, 259, 261, 265, 274, 275, 286, 291, 296, 297, 298], "obei": [4, 76, 205, 220, 230], "mirror": [4, 76, 95, 158], "symmetri": [4, 13, 51, 56, 61, 64, 76, 99, 164, 205, 236, 244, 246, 286, 297], "conjug": [4, 28, 45, 57, 58, 59, 68, 74, 76, 99, 104, 121, 154, 168, 171, 185, 216, 220, 236, 246], "differenti": [4, 5, 12, 13, 14, 26, 29, 47, 68, 73, 74, 76, 85, 86, 88, 91, 95, 119, 127, 128, 133, 135, 137, 139, 142, 145, 146, 147, 148, 149, 152, 153, 174, 180, 194, 195, 197, 199, 201, 204, 207, 213, 217, 219, 220, 225, 230, 232, 236, 237, 265, 272, 273, 276, 283, 287, 288, 291], "polygamma": [4, 73, 76, 220], "seri": [4, 11, 12, 13, 19, 26, 35, 47, 48, 49, 50, 58, 59, 67, 68, 70, 72, 73, 74, 76, 91, 92, 93, 97, 108, 116, 117, 119, 135, 142, 144, 152, 199, 203, 212, 213, 220, 225, 226, 230, 236, 239, 277, 283, 288], "expans": [4, 11, 19, 23, 49, 68, 70, 73, 74, 76, 95, 104, 108, 149, 164, 166, 216, 217, 222, 223, 224, 229, 231, 232, 236, 238, 239, 277, 288, 297], "eulergamma": [4, 68, 72, 73, 76], "zeta": [4, 14, 15, 67, 68, 72, 73, 211, 215, 220, 227, 240], "40": [4, 37, 49, 71, 73, 76, 78, 85, 99, 104, 108, 111, 206, 217, 219, 220, 240, 261, 286], "288037795340032417959588909060233922890": [4, 76], "49801566811835604271": [4, 76], "15494982830181068512": [4, 76], "lowergamma": [4, 76, 240], "lower": [4, 14, 21, 30, 45, 47, 49, 59, 60, 67, 68, 70, 76, 77, 79, 84, 85, 95, 99, 100, 101, 104, 117, 122, 127, 185, 199, 205, 207, 209, 211, 213, 216, 220, 229, 230, 232, 236, 245, 246, 255, 265, 287, 295], "uppergamma": [4, 73, 76, 220, 240], "upper": [4, 45, 67, 69, 72, 76, 77, 84, 85, 99, 100, 101, 104, 107, 108, 117, 127, 178, 185, 205, 209, 211, 213, 215, 216, 220, 230, 238, 245, 265], "loggamma": [4, 5, 76, 220], "log": [4, 5, 9, 11, 12, 15, 23, 39, 41, 47, 49, 59, 67, 68, 72, 73, 74, 76, 86, 90, 92, 93, 95, 99, 104, 108, 206, 211, 220, 222, 227, 230, 232, 236, 239, 240, 247, 287, 297, 298], "digamma": [4, 73, 76, 220], "trigamma": [4, 76, 220], "beta": [4, 15, 49, 59, 68, 95, 182, 195, 205, 215, 217, 220, 236, 240], "euler": [4, 41, 47, 48, 67, 68, 69, 72, 73, 76, 84, 90, 96, 108, 127, 182, 195, 200, 204, 205, 216, 220, 236, 240, 265, 267], "gamma_funct": [4, 76], "gov": [4, 74, 76], "gammafunct": [4, 76], "gammabetaerf": [4, 73, 76], "unusu": [4, 21, 137, 251], "inlin": [4, 12, 96, 200, 220, 253], "pretti": [4, 9, 11, 12, 14, 23, 48, 49, 76, 95, 96, 104, 108, 112, 119, 137, 200, 230, 232, 239, 274, 288, 291, 293, 297], "As": [4, 18, 19, 22, 23, 28, 33, 34, 35, 40, 49, 59, 60, 68, 69, 72, 73, 74, 76, 92, 93, 98, 104, 107, 108, 110, 127, 131, 133, 135, 137, 139, 146, 149, 150, 185, 190, 203, 207, 208, 210, 211, 213, 216, 217, 219, 220, 227, 228, 230, 236, 239, 240, 258, 259, 269, 270, 286, 287, 289, 291, 292, 293, 296, 297], "literatur": [4, 14, 93, 212, 283], "fact": [4, 12, 13, 14, 21, 22, 23, 32, 44, 45, 68, 73, 76, 86, 93, 108, 115, 137, 149, 190, 207, 208, 209, 210, 213, 215, 217, 219, 230, 232, 236, 239, 251, 259, 274, 286, 289, 290, 291, 292, 297], "eval": [4, 13, 21, 43, 44, 49, 68, 74, 76, 171, 185, 211, 216, 220, 253, 286], "illumin": 4, "tone": 4, "narr": [4, 290], "excerpt": 4, "geometri": [4, 77, 78, 79, 81, 82, 83, 84, 85, 95, 126, 131, 145, 158, 212, 268, 275, 276, 282, 283, 291], "autofunct": [4, 11], "intersect": [4, 21, 32, 47, 48, 59, 78, 79, 81, 82, 83, 84, 85, 104, 131, 158, 207, 216, 220, 226, 227, 228, 239], "convex_hul": [4, 80, 84, 85], "are_similar": [4, 79, 80, 85], "autoclass": 4, "linearent": [4, 78, 81, 82, 83, 84], "rai": [4, 78, 80, 81, 82, 84, 85, 154, 158], "segment": [4, 13, 59, 78, 80, 81, 82, 83, 84, 85, 131, 203, 206, 236, 251], "curv": [4, 48, 70, 80, 95, 108, 111, 154, 206, 207, 236, 265, 275, 283, 287], "ellips": [4, 79, 80, 84, 157, 206, 220, 283, 296], "circl": [4, 23, 68, 78, 79, 80, 82, 83, 84, 85, 93, 134, 158, 165, 206, 239, 265, 268, 275], "polygon": [4, 78, 79, 80, 85, 206, 275, 283], "regularpolygon": [4, 79, 80, 84, 206], "triangl": [4, 23, 48, 73, 79, 80, 84, 85, 95, 99, 108, 134, 205, 206, 268, 275], "rel": [4, 5, 31, 48, 49, 58, 59, 60, 61, 65, 66, 67, 68, 69, 72, 79, 93, 104, 108, 124, 127, 128, 130, 131, 134, 140, 149, 150, 157, 184, 195, 199, 203, 204, 207, 209, 210, 213, 215, 228, 230, 235, 238, 240, 251, 258, 269, 270, 274, 291], "cumbersom": [4, 11, 37], "path": [4, 8, 12, 13, 59, 84, 90, 119, 131, 134, 143, 201, 203, 206, 229, 232, 236, 239, 251, 252, 255, 256, 258, 261, 262, 263, 272], "viewcod": 4, "aco": [4, 15, 41, 74, 81, 84, 137, 152, 158, 195, 220, 236, 265, 297], "obj": [4, 21, 68, 211, 216, 220, 254], "qualifi": [4, 262], "elementari": [4, 11, 12, 21, 22, 23, 59, 68, 69, 72, 75, 76, 90, 93, 95, 99, 104, 108, 150, 178, 181, 211, 216, 217, 258, 259, 269, 277], "trigonometr": [4, 23, 30, 37, 68, 95, 217, 223, 231, 232, 235, 236, 239, 259, 277, 288, 298], "trail": [4, 12, 60, 108, 211, 213, 216, 256, 261], "pair": [4, 15, 19, 28, 31, 48, 49, 59, 60, 68, 69, 74, 80, 85, 92, 104, 108, 131, 134, 135, 139, 150, 175, 177, 179, 180, 185, 205, 207, 209, 210, 211, 213, 215, 216, 221, 226, 227, 229, 230, 232, 233, 236, 239, 240, 253, 258, 269, 286, 293], "www": [4, 5, 26, 41, 47, 59, 60, 69, 71, 73, 95, 96, 108, 117, 119, 200, 209, 214, 219, 220, 229, 232, 233, 236, 240, 258, 293, 296], "master": [4, 5, 7, 11, 12, 39, 95, 251], "usag": [4, 5, 12, 14, 15, 21, 22, 23, 40, 43, 70, 74, 95, 108, 182, 201, 206, 207, 209, 213, 220, 228, 230, 233, 236, 237, 241, 255, 259, 260, 272, 273, 280, 292], "expect": [4, 5, 7, 15, 21, 23, 26, 48, 50, 53, 68, 74, 76, 80, 98, 108, 109, 119, 127, 135, 179, 210, 213, 215, 217, 218, 227, 232, 235, 238, 239, 240, 249, 251, 252, 255, 258, 259, 291, 292], "vector": [4, 13, 19, 27, 41, 45, 49, 52, 59, 60, 68, 70, 76, 81, 82, 83, 90, 91, 97, 99, 104, 109, 111, 113, 115, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 139, 142, 143, 144, 146, 147, 148, 149, 150, 152, 153, 157, 158, 171, 180, 182, 187, 190, 195, 197, 199, 200, 207, 209, 215, 220, 230, 236, 238, 240, 245, 246, 251, 252, 267, 271, 276, 280, 282, 293], "dynamicsymbol": [4, 104, 123, 124, 125, 127, 128, 130, 131, 133, 134, 135, 137, 138, 139, 140, 142, 143, 144, 146, 147, 148, 149, 150, 152, 153, 195, 197, 199, 200, 201, 203, 204], "custom": [4, 9, 13, 24, 49, 60, 68, 72, 75, 96, 99, 104, 125, 127, 131, 134, 194, 200, 201, 222, 226, 233, 240, 246, 252, 259, 265, 274, 291, 293], "sine": [4, 23, 68, 74, 76, 93, 95, 159, 217, 223, 229, 286], "expand": [4, 12, 13, 14, 15, 19, 21, 26, 28, 49, 68, 70, 72, 73, 74, 76, 93, 95, 99, 119, 135, 137, 152, 166, 174, 177, 184, 185, 208, 209, 210, 213, 215, 216, 217, 220, 223, 227, 229, 230, 232, 236, 239, 240, 244, 252, 259, 271, 286, 291], "troubleshoot": [4, 9, 149], "tip": [4, 7, 8, 12, 68, 149, 236, 237, 297], "spell": [4, 13, 14, 236], "try": [4, 5, 11, 12, 13, 14, 15, 21, 22, 23, 28, 30, 31, 34, 35, 37, 60, 67, 68, 72, 76, 78, 83, 93, 95, 98, 101, 104, 107, 108, 110, 133, 175, 177, 184, 185, 206, 210, 211, 215, 220, 225, 227, 228, 229, 230, 232, 233, 236, 238, 258, 259, 261, 286, 289, 292, 293, 297], "referencefram": [4, 13, 124, 125, 127, 128, 130, 131, 133, 134, 135, 137, 138, 139, 142, 143, 144, 147, 148, 149, 150, 152, 153, 195, 196, 197, 199, 200, 201, 202, 203, 282], "though": [4, 11, 14, 15, 21, 22, 23, 28, 34, 35, 36, 37, 40, 50, 68, 69, 70, 73, 80, 84, 93, 95, 99, 104, 108, 123, 128, 137, 147, 149, 180, 189, 194, 195, 203, 204, 208, 210, 211, 216, 217, 229, 230, 232, 236, 237, 238, 239, 251, 272, 287, 292, 297], "frame": [4, 123, 124, 125, 127, 128, 130, 131, 133, 135, 137, 138, 139, 140, 142, 144, 146, 147, 148, 149, 150, 152, 153, 194, 195, 196, 197, 199, 201, 203, 255, 265, 272], "notimplementederror": [4, 30, 32, 35, 36, 37, 47, 67, 78, 81, 85, 95, 104, 117, 209, 215, 216, 219, 228, 235, 236, 237, 238, 239], "outsid": [4, 32, 45, 59, 68, 76, 79, 84, 99, 108, 123, 190, 204, 216, 232, 287, 292], "plot": [4, 23, 26, 35, 39, 77, 78, 80, 81, 84, 91, 96, 104, 111, 112, 115, 118, 152, 169, 172, 178, 223, 276, 282, 283, 291, 296], "recommend": [4, 8, 9, 11, 13, 14, 15, 16, 21, 23, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 48, 49, 68, 69, 72, 99, 123, 147, 152, 179, 195, 203, 208, 209, 210, 211, 217, 233, 236, 239, 245, 249, 256, 269, 270, 295, 298], "ahead": [4, 108], "submit": [4, 11], "sub": [4, 12, 13, 14, 15, 17, 21, 22, 23, 26, 28, 31, 32, 34, 35, 49, 67, 68, 74, 76, 77, 78, 79, 80, 81, 82, 84, 95, 98, 99, 101, 104, 108, 110, 111, 112, 119, 123, 125, 135, 137, 138, 139, 142, 143, 149, 152, 182, 183, 188, 195, 205, 207, 209, 210, 211, 216, 220, 227, 228, 232, 233, 236, 237, 238, 240, 251, 252, 254, 286, 287, 289], "common": [4, 5, 9, 11, 12, 14, 15, 21, 22, 23, 29, 30, 31, 32, 35, 47, 49, 59, 60, 68, 69, 74, 79, 82, 85, 95, 101, 103, 104, 108, 109, 110, 117, 119, 124, 127, 129, 133, 138, 145, 150, 152, 157, 190, 195, 203, 204, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 218, 222, 228, 229, 230, 232, 233, 236, 238, 239, 240, 252, 253, 256, 258, 259, 272, 274, 280, 286, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298], "matrixcommon": [4, 99, 101, 104], "dyadic": [4, 71, 124, 130, 135, 137, 142, 144, 152, 195, 197, 200, 202, 265, 268, 273], "shorten": 4, "due": [4, 8, 12, 13, 19, 23, 34, 47, 49, 51, 58, 59, 68, 70, 85, 104, 108, 111, 115, 133, 135, 137, 149, 158, 185, 201, 204, 210, 211, 216, 220, 223, 233, 235, 237, 240, 256, 268, 274, 297], "highli": [5, 68, 72, 116, 210, 216, 225, 253], "aspect": [5, 7, 11, 12, 21, 104, 210], "project": [5, 9, 10, 11, 13, 25, 49, 51, 81, 82, 83, 97, 104, 151, 252, 253, 265], "teach": [5, 60, 69, 73, 240], "conduct": 5, "accord": [5, 15, 49, 56, 59, 60, 64, 67, 68, 69, 76, 98, 101, 104, 108, 110, 127, 133, 134, 136, 145, 179, 185, 206, 211, 213, 215, 216, 217, 233, 238, 239, 246, 251, 253, 258, 274], "survei": 5, "commonli": [5, 14, 60, 73, 76, 95, 104, 123, 203, 208, 236, 272], "encount": [5, 15, 19, 28, 68, 95, 104, 128, 177, 208, 213, 216, 238, 239, 253, 265, 293], "problem": [5, 9, 11, 12, 13, 14, 15, 19, 21, 22, 23, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 41, 52, 62, 64, 68, 69, 80, 93, 95, 99, 104, 108, 111, 113, 114, 115, 120, 123, 128, 135, 139, 140, 143, 145, 147, 194, 203, 204, 207, 208, 213, 230, 232, 233, 236, 239, 255, 258, 282, 287, 289, 293], "offer": [5, 48, 49, 59, 68, 109, 123, 152, 194, 204, 210, 215, 255, 273], "bring": [5, 93, 128, 143, 209, 223, 232, 293], "greater": [5, 28, 45, 60, 68, 73, 74, 76, 93, 97, 108, 119, 133, 211, 213, 216, 219, 227, 232, 236, 238, 240, 255, 258, 272, 287], "clariti": [5, 59, 199], "mission": [5, 48, 102], "ca": [5, 39, 69, 73, 76, 95, 108, 219, 220, 258], "dedic": [5, 49, 51, 150, 212, 235, 253, 270, 272], "tool": [5, 8, 9, 11, 12, 14, 23, 59, 96, 103, 104, 109, 119, 133, 152, 204, 207, 212, 213, 220, 252, 258, 264, 273, 280], "essenti": [5, 52, 63, 68, 72, 74, 75, 76, 93, 130, 137, 198, 201, 202, 204, 207, 208, 211, 215, 227, 230, 266, 269, 272, 273, 274, 280, 282], "element": [5, 13, 14, 15, 18, 21, 26, 31, 41, 45, 48, 49, 51, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 84, 91, 93, 95, 97, 98, 99, 100, 101, 104, 107, 108, 109, 111, 112, 119, 120, 130, 152, 154, 157, 171, 182, 190, 199, 202, 204, 206, 207, 208, 209, 211, 213, 216, 218, 219, 220, 226, 227, 228, 230, 232, 233, 236, 238, 239, 240, 241, 245, 252, 254, 255, 258, 259, 260, 268, 287, 292, 293, 296, 297], "deviat": [5, 158, 240], "advanc": [5, 18, 20, 23, 43, 59, 68, 72, 73, 104, 105, 145, 150, 202, 206, 209, 210, 212, 214, 215, 222, 229, 236, 251, 252, 253, 258, 282, 286, 288, 290, 294, 295, 296, 297], "docutil": 5, "sourceforg": [5, 48], "ext": [5, 207, 211], "autodoc": 5, "associ": [5, 9, 11, 14, 21, 31, 48, 50, 66, 68, 69, 75, 76, 90, 91, 93, 97, 130, 133, 134, 150, 152, 175, 183, 194, 195, 203, 204, 206, 208, 209, 210, 211, 213, 215, 220, 228, 230, 233, 246, 260], "graphviz": [5, 8, 292, 296], "graphic": [5, 35, 117], "info": [5, 9, 11, 15, 119, 220, 236, 237], "bear": [5, 21], "linkcod": 5, "readthedoc": [5, 96, 259], "subset": [5, 11, 12, 19, 21, 23, 28, 47, 48, 52, 55, 59, 60, 66, 73, 74, 80, 91, 93, 95, 97, 108, 129, 207, 209, 213, 215, 220, 228, 258, 277], "modifi": [5, 12, 14, 15, 48, 49, 59, 68, 74, 76, 108, 110, 148, 157, 206, 209, 213, 215, 216, 217, 220, 232, 238, 239, 240, 251, 254, 255, 258, 259, 286, 291, 293], "sphinx_math_dollar": 5, "delimit": [5, 68, 220], "dollar": [5, 12, 291], "2": [5, 7, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 36, 37, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 107, 108, 110, 111, 113, 115, 117, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 133, 134, 137, 138, 139, 140, 142, 143, 144, 146, 147, 148, 150, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 174, 175, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 194, 195, 196, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 249, 251, 252, 253, 254, 255, 258, 259, 261, 265, 267, 268, 269, 270, 271, 272, 274, 275, 286, 287, 289, 291, 292, 293, 296, 297, 298], "sphinxext": 5, "plot_direct": 5, "figur": [5, 11, 13, 68, 69, 78, 79, 81, 83, 84, 95, 112, 135, 180, 203, 204, 205, 206, 209, 217, 220, 275, 297], "devel": [5, 205], "supersed": [5, 135, 152], "pep": [5, 49, 68, 98], "257": [5, 108, 238], "our": [5, 11, 13, 19, 23, 39, 49, 68, 76, 93, 104, 108, 128, 133, 138, 190, 203, 204, 206, 207, 209, 211, 215, 216, 217, 220, 227, 230, 233, 236, 239, 251, 286, 289, 290, 292, 297], "introduct": [5, 6, 13, 20, 59, 60, 73, 76, 209, 211, 213, 214, 216, 220, 233, 236, 239, 273, 280, 290, 296], "four": [5, 33, 49, 51, 60, 68, 72, 76, 98, 101, 108, 115, 120, 136, 145, 150, 158, 195, 206, 207, 209, 213, 216, 220, 228, 233, 236, 238, 240, 241, 265, 267, 270, 282], "locat": [5, 11, 12, 13, 51, 60, 68, 82, 104, 108, 111, 112, 115, 127, 130, 131, 133, 134, 139, 146, 149, 150, 153, 199, 201, 215, 216, 220, 232, 240, 254, 263, 265, 269, 271, 274], "websit": [5, 7, 295], "advertis": 5, "serv": [5, 12, 14, 19, 23, 43, 44, 49, 51, 65, 68, 75, 91, 215, 236, 237, 261, 290], "initi": [5, 14, 21, 26, 34, 43, 59, 63, 68, 69, 70, 73, 76, 84, 86, 87, 90, 91, 92, 93, 95, 96, 108, 110, 112, 113, 115, 117, 119, 124, 128, 130, 133, 135, 137, 139, 144, 147, 148, 149, 152, 153, 157, 165, 174, 196, 197, 200, 204, 205, 213, 215, 216, 220, 226, 230, 232, 236, 238, 239, 245, 253, 260, 261, 265, 267, 268, 269, 270], "web": [5, 7, 8, 11, 52, 60, 69, 73, 76, 80, 85, 95, 108, 152, 202, 209, 214, 232, 233, 240, 258, 293], "obtain": [5, 14, 15, 17, 19, 26, 31, 32, 37, 43, 44, 48, 50, 52, 59, 60, 61, 64, 68, 69, 71, 72, 73, 74, 76, 78, 79, 81, 82, 84, 90, 93, 95, 97, 99, 104, 107, 108, 116, 119, 128, 145, 148, 158, 180, 185, 190, 194, 207, 208, 211, 213, 215, 216, 219, 221, 228, 229, 230, 232, 233, 236, 237, 238, 239, 258, 261, 269, 270], "technic": [5, 13, 16, 23, 38, 48, 68, 152, 171, 207, 236, 253, 258, 272, 289, 292], "download": [5, 7, 9, 39, 48, 90, 214, 229, 236, 265, 291], "place": [5, 7, 9, 11, 12, 13, 14, 15, 21, 23, 32, 38, 48, 60, 61, 68, 69, 74, 84, 100, 104, 107, 108, 110, 119, 152, 153, 209, 214, 215, 220, 221, 227, 229, 232, 236, 255, 258, 285, 286, 293, 297], "tutori": [5, 7, 8, 9, 11, 12, 14, 15, 19, 20, 39, 84, 135, 152, 208, 219, 220, 236, 259, 289, 292, 294, 295, 296, 297, 298], "site": [5, 108, 254], "upload": [5, 108], "belong": [5, 12, 21, 45, 48, 59, 64, 68, 91, 104, 130, 185, 195, 203, 206, 207, 209, 210, 211, 213, 215, 216, 227, 228, 232, 233, 239, 246], "insid": [5, 12, 13, 14, 15, 23, 59, 60, 65, 68, 78, 79, 84, 111, 123, 125, 139, 149, 184, 185, 189, 190, 200, 204, 216, 220, 228, 230, 233, 238, 239, 240, 242, 244, 255, 259, 292, 293], "spars": [5, 14, 101, 103, 104, 179, 209, 215, 216, 217, 240, 241, 280, 292], "substanti": [5, 109], "edit": [5, 9, 11, 12, 95, 104, 108, 213, 214, 216], "arg": [5, 11, 14, 21, 23, 30, 32, 35, 41, 43, 44, 45, 46, 47, 48, 49, 52, 59, 60, 62, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 81, 83, 84, 85, 90, 93, 95, 98, 99, 100, 101, 102, 104, 106, 108, 110, 113, 115, 119, 154, 160, 163, 165, 168, 169, 170, 171, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 195, 200, 204, 206, 209, 211, 213, 215, 216, 217, 220, 222, 223, 226, 227, 228, 229, 232, 236, 238, 239, 240, 241, 242, 245, 246, 251, 252, 253, 254, 258, 259, 261, 265, 267], "invari": [5, 13, 23, 59, 64, 116, 119, 205, 209, 211, 215, 216, 230, 236], "releas": [5, 8, 11, 13, 68, 95, 99, 110, 149, 206, 245, 256, 259, 292], "5": [5, 11, 12, 15, 17, 21, 23, 28, 30, 32, 34, 37, 41, 43, 44, 45, 47, 49, 50, 51, 52, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 78, 79, 80, 81, 82, 83, 84, 85, 90, 91, 93, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 107, 108, 110, 111, 113, 115, 117, 119, 121, 122, 124, 129, 130, 135, 137, 138, 142, 143, 144, 145, 147, 150, 154, 158, 179, 180, 183, 185, 192, 196, 199, 201, 204, 205, 206, 207, 208, 209, 210, 211, 213, 215, 216, 217, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 251, 252, 258, 259, 265, 268, 270, 272, 274, 275, 286, 287, 289, 292, 293, 296, 297], "center": [5, 7, 13, 19, 47, 59, 67, 68, 78, 82, 84, 85, 95, 104, 124, 127, 130, 134, 135, 137, 142, 144, 146, 150, 152, 158, 203, 206, 215, 220, 228, 275], "resid": 5, "standalon": [5, 152], "restructur": 5, "myst": 5, "appli": [5, 9, 11, 12, 13, 14, 22, 23, 26, 33, 37, 41, 42, 43, 44, 45, 49, 59, 60, 61, 66, 67, 68, 69, 70, 71, 74, 75, 78, 83, 84, 86, 95, 98, 99, 100, 104, 108, 110, 111, 112, 113, 115, 119, 120, 124, 125, 128, 130, 131, 133, 137, 140, 147, 149, 151, 162, 166, 169, 170, 174, 177, 178, 182, 185, 195, 204, 206, 208, 209, 210, 211, 213, 215, 216, 217, 219, 220, 221, 222, 226, 227, 228, 229, 232, 236, 237, 238, 239, 240, 241, 244, 251, 254, 258, 265, 267, 270, 293, 296, 297], "surround": [5, 12, 68, 85, 158, 228, 261], "nu": [5, 15, 76, 95, 108, 186, 208, 220, 232, 240, 246, 291], "equat": [5, 14, 15, 17, 19, 24, 26, 30, 47, 49, 64, 67, 68, 70, 74, 76, 78, 81, 82, 86, 90, 91, 92, 93, 95, 96, 99, 104, 108, 111, 115, 119, 121, 123, 127, 128, 129, 131, 133, 135, 137, 138, 139, 140, 142, 144, 145, 146, 151, 152, 153, 154, 158, 194, 199, 200, 203, 204, 205, 206, 207, 209, 211, 213, 214, 215, 218, 219, 220, 226, 230, 232, 235, 236, 237, 245, 265, 270, 271, 275, 287, 288, 291], "strip": [5, 12, 69, 95, 108, 213, 256, 261], "out": [5, 11, 12, 15, 21, 22, 23, 31, 48, 49, 59, 60, 68, 69, 70, 73, 76, 84, 93, 95, 101, 104, 108, 111, 119, 120, 135, 137, 139, 142, 150, 152, 162, 166, 177, 180, 182, 184, 185, 207, 208, 209, 210, 211, 215, 216, 217, 218, 220, 221, 227, 230, 232, 236, 241, 242, 251, 253, 258, 259, 289, 291, 292, 296, 297], "unimport": 5, "bullet": [5, 11, 12], "avoid": [5, 11, 12, 13, 14, 22, 23, 28, 31, 41, 49, 50, 68, 69, 74, 93, 95, 98, 104, 107, 110, 139, 149, 179, 203, 204, 208, 209, 210, 216, 220, 221, 228, 232, 236, 238, 240, 244, 253, 256, 259, 289, 290], "whitespac": [5, 12, 68, 256], "easiest": [5, 9, 11, 13, 14, 15, 68, 207, 210, 233, 259, 270, 286, 292, 297], "invalid": [5, 11, 12, 15, 37, 68, 69, 110, 137, 210, 213, 228], "dx": [5, 13, 14, 19, 23, 31, 47, 49, 64, 68, 70, 72, 76, 85, 87, 90, 91, 92, 93, 95, 104, 111, 122, 128, 174, 204, 216, 217, 223, 233, 236, 237, 241, 287, 291, 296, 298], "meta": [5, 68, 236, 237], "stackexchang": [5, 59, 78], "5020": 5, "wikibook": [5, 95, 96], "overleaf": 5, "mathematical_express": 5, "verbatim": [5, 220], "_rewrit": 5, "_expand": 5, "difficult": [5, 11, 12, 21, 35, 37, 68, 104, 135, 217, 230, 236, 237, 239, 252, 259, 275, 291, 297], "sentenc": [5, 11, 98], "thumb": [5, 98, 258], "greek": [5, 14, 40, 68, 108, 110, 207, 220], "letter": [5, 14, 15, 40, 61, 68, 69, 108, 185, 209, 220, 258, 287, 289], "\u03b1": [5, 205, 219], "alpha": [5, 15, 59, 68, 76, 95, 97, 119, 157, 161, 164, 182, 199, 203, 204, 205, 211, 213, 215, 216, 219, 220, 232, 236, 240], "logarithm": [5, 15, 41, 47, 49, 68, 69, 74, 93, 95, 104, 108, 211, 213, 217, 220, 230, 232, 239, 240, 288], "italic": 5, "emphasi": [5, 210], "asterisk": 5, "stirl": [5, 60, 73, 258], "fals": [5, 12, 14, 15, 21, 22, 23, 28, 30, 37, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 54, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 90, 93, 95, 96, 98, 99, 100, 101, 104, 105, 108, 110, 111, 112, 117, 119, 121, 122, 125, 128, 129, 130, 133, 135, 137, 138, 142, 143, 144, 146, 147, 148, 149, 150, 153, 157, 169, 170, 174, 177, 182, 183, 184, 185, 188, 192, 195, 196, 197, 199, 200, 203, 204, 206, 207, 208, 209, 210, 211, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 227, 228, 229, 232, 233, 235, 236, 237, 238, 239, 240, 245, 246, 249, 251, 252, 253, 254, 258, 259, 261, 265, 268, 289, 292, 293, 296], "permut": [5, 50, 51, 53, 55, 56, 58, 61, 64, 65, 66, 69, 73, 76, 99, 101, 104, 129, 185, 205, 209, 211, 216, 233, 241, 242, 246, 258, 277, 297], "cycl": [5, 13, 49, 56, 59, 60, 66, 68, 71, 73, 99, 108, 159, 228, 258], "partit": [5, 55, 59, 73, 108, 139, 149, 151, 233, 240, 255, 277], "reduc": [5, 15, 22, 26, 29, 36, 42, 44, 46, 50, 64, 68, 69, 71, 73, 74, 76, 83, 84, 93, 95, 104, 108, 119, 120, 149, 167, 185, 207, 209, 210, 211, 213, 214, 215, 216, 217, 221, 226, 228, 229, 230, 232, 233, 235, 236, 237, 238, 239, 240, 242, 258, 259, 293], "ge": [5, 21, 68, 73, 74, 76, 93, 99, 104, 108, 205, 208, 213, 216, 220, 230, 258], "consecut": [5, 49, 59, 64, 67, 69, 73, 84, 232, 238], "group": [5, 7, 48, 54, 55, 60, 61, 64, 65, 66, 68, 71, 73, 97, 98, 108, 164, 173, 174, 185, 205, 206, 207, 211, 216, 232, 236, 238, 239, 246, 258, 277], "pairwis": [5, 45, 48, 68, 73, 85, 104, 108, 233, 238], "ital": [5, 220], "last": [5, 11, 12, 13, 15, 17, 18, 19, 21, 22, 23, 28, 30, 32, 33, 34, 35, 36, 37, 42, 43, 44, 48, 49, 50, 58, 59, 60, 64, 67, 68, 69, 72, 78, 95, 98, 99, 100, 101, 102, 104, 106, 107, 108, 110, 119, 133, 157, 189, 190, 205, 206, 207, 208, 209, 210, 211, 213, 216, 219, 220, 227, 228, 233, 236, 238, 239, 240, 241, 242, 246, 249, 251, 252, 253, 254, 256, 258, 259, 261, 287, 289, 292, 293], "talk": [5, 11, 12, 16, 38, 69, 207, 215, 269], "handl": [5, 7, 11, 12, 19, 21, 22, 23, 47, 49, 56, 60, 68, 74, 95, 96, 98, 103, 108, 109, 110, 111, 120, 123, 135, 149, 165, 168, 174, 175, 180, 189, 209, 210, 216, 217, 226, 232, 236, 238, 241, 244, 252, 258, 259, 261, 292, 297], "referenc": [5, 11, 52, 57, 108, 133, 137, 182, 215], "overlin": [5, 21, 76], "normal": [5, 12, 13, 15, 21, 22, 23, 37, 41, 45, 49, 59, 67, 68, 72, 74, 78, 81, 82, 83, 95, 96, 98, 102, 103, 104, 108, 110, 121, 123, 127, 134, 135, 137, 143, 152, 158, 169, 179, 182, 183, 184, 185, 186, 190, 193, 195, 204, 207, 209, 210, 211, 213, 215, 216, 220, 221, 223, 228, 229, 233, 236, 240, 245, 251, 256, 258, 259, 265, 280], "assign": [5, 9, 21, 35, 48, 49, 50, 64, 68, 73, 84, 95, 97, 98, 104, 110, 128, 135, 142, 152, 190, 201, 204, 206, 208, 213, 220, 238, 239, 246, 253, 269, 272, 289], "structur": [5, 13, 14, 15, 18, 21, 23, 46, 48, 49, 56, 59, 60, 66, 68, 93, 95, 98, 99, 104, 111, 112, 113, 115, 133, 183, 185, 206, 207, 209, 210, 213, 215, 216, 217, 232, 236, 238, 239, 240, 244, 245, 253, 255, 258, 259, 289, 297], "success": [5, 8, 48, 59, 68, 76, 93, 95, 108, 127, 137, 195, 207, 213, 215, 228, 229, 236, 239, 240, 258, 265, 267], "suggest": [5, 7, 11, 13, 33, 50, 59, 95, 104, 108, 135, 218, 293], "american": [5, 54, 69], "color": [5, 9, 96, 117, 200, 220, 251, 258, 296], "colour": 5, "quotat": 5, "line_color": [5, 206, 223], "aesthet": [5, 14, 206], "ariti": [5, 206], "term": [5, 12, 14, 15, 19, 21, 23, 28, 31, 33, 35, 37, 49, 59, 68, 69, 70, 72, 73, 74, 76, 87, 91, 92, 93, 95, 98, 99, 104, 108, 112, 117, 119, 125, 128, 137, 139, 142, 145, 147, 149, 164, 169, 181, 182, 185, 187, 189, 190, 194, 195, 197, 201, 203, 205, 207, 208, 209, 210, 211, 213, 215, 216, 217, 220, 222, 223, 225, 226, 228, 229, 230, 232, 233, 236, 237, 238, 239, 240, 244, 245, 258, 265, 268, 272, 277, 287, 289, 291, 292, 297], "unrestrict": [5, 57, 258], "necklac": [5, 258], "bracelet": [5, 258], "impli": [5, 14, 15, 21, 41, 45, 49, 59, 98, 115, 185, 206, 211, 213, 220, 228, 230, 236, 238, 241, 244, 245, 258, 272], "turn": [5, 13, 14, 21, 37, 49, 68, 74, 76, 83, 93, 102, 127, 143, 147, 201, 207, 215, 216, 217, 220, 227, 228, 230, 232, 233, 236, 251, 258, 274, 289, 291], "sequenc": [5, 15, 41, 47, 49, 52, 55, 58, 59, 60, 64, 66, 67, 68, 69, 71, 73, 76, 78, 81, 82, 83, 84, 85, 92, 98, 99, 101, 104, 107, 108, 119, 152, 158, 184, 185, 209, 211, 214, 220, 222, 224, 227, 229, 230, 232, 233, 236, 237, 239, 246, 249, 252, 253, 258, 260, 261, 277], "revers": [5, 26, 52, 57, 60, 67, 68, 69, 74, 95, 96, 98, 104, 108, 119, 184, 195, 200, 207, 209, 213, 216, 217, 220, 221, 228, 232, 236, 258, 297], "ambigu": [5, 13, 15, 17, 68, 173, 179, 232, 244, 249], "person": [5, 14], "chebyshev": [5, 47, 68, 95, 213, 216], "pafnuti": 5, "lvovich": 5, "tchebychev": 5, "whose": [5, 13, 14, 21, 23, 28, 48, 50, 52, 57, 60, 67, 68, 69, 74, 78, 82, 84, 85, 91, 95, 98, 104, 108, 130, 147, 157, 180, 190, 196, 197, 201, 204, 208, 209, 211, 215, 216, 227, 228, 232, 236, 237, 238, 240, 246, 251, 255, 258, 259, 265, 268, 270, 272], "transliter": 5, "russian": 5, "chebyshevt": [5, 76, 220], "orthogonalpolynomi": 5, "t_n": [5, 73, 76, 95, 213, 216, 270], "tens": 5, "inclus": [5, 67, 113, 115, 178, 207, 226, 227, 228, 239], "pronoun": 5, "Or": [5, 8, 12, 13, 15, 22, 30, 32, 59, 68, 69, 70, 76, 93, 98, 108, 130, 207, 217, 219, 220, 232, 239, 240, 251, 259, 272, 292, 295], "gender": 5, "neutral": 5, "he": [5, 73, 93, 213], "she": [5, 239], "extran": [5, 236], "belittl": 5, "obvious": [5, 12, 50, 59, 188, 203, 210, 230], "easili": [5, 13, 21, 23, 35, 39, 51, 68, 69, 91, 93, 104, 108, 109, 127, 130, 131, 147, 183, 203, 216, 219, 220, 225, 232, 233, 236, 238, 239, 242, 252, 291], "straightforward": [5, 12, 23, 59, 69, 104, 230], "unwelcom": 5, "judgement": 5, "phrase": [5, 11, 14, 69], "friendli": [5, 49, 93, 233, 235, 236, 238, 239, 253, 298], "mistak": [5, 11, 12, 15, 31, 59, 110, 259], "goe": [6, 7, 10, 11, 12, 23, 38, 104, 115, 227, 230, 239, 289, 292], "content": [6, 16, 49, 68, 69, 103, 208, 209, 211, 213, 216, 219, 220, 248, 253, 256, 257, 277, 278, 279, 280, 281, 282, 283, 284, 288, 290], "setup": [6, 10, 11, 12, 13, 49, 68, 138, 139, 140, 154, 195, 213, 216, 218, 219, 230, 251, 252, 254, 264, 296], "workflow": [6, 7, 8, 9, 10, 12, 34, 35, 152, 210, 253, 259], "document": [6, 10, 12, 13, 14, 20, 23, 29, 43, 44, 45, 59, 64, 68, 69, 74, 75, 76, 80, 90, 93, 94, 96, 101, 104, 109, 112, 123, 128, 145, 147, 148, 150, 152, 160, 174, 180, 194, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 213, 214, 216, 220, 230, 234, 236, 238, 239, 249, 251, 253, 254, 256, 258, 265, 272, 273, 276, 287, 289, 290, 296, 297], "depend": [6, 9, 11, 13, 14, 15, 17, 21, 23, 25, 28, 33, 34, 35, 39, 47, 49, 50, 59, 60, 67, 68, 69, 70, 73, 74, 76, 80, 85, 92, 93, 95, 96, 97, 104, 108, 109, 110, 117, 121, 124, 128, 129, 133, 135, 137, 139, 145, 147, 157, 158, 159, 174, 183, 185, 187, 189, 190, 200, 201, 206, 208, 209, 211, 213, 215, 216, 217, 219, 220, 221, 226, 230, 232, 233, 236, 237, 238, 239, 240, 251, 252, 253, 254, 258, 259, 272, 274, 275, 289, 291], "debug": [6, 49, 68, 95, 137, 174, 251, 252, 261], "style": [6, 7, 8, 11, 48, 68, 96, 179, 200, 206, 220, 239, 296], "polici": [6, 13, 254, 256], "maintain": [7, 14, 15, 68, 69, 108, 112, 220, 228, 229, 236, 239, 255], "love": 7, "oil": 7, "daunt": 7, "acquaint": 7, "video": [7, 295], "2016": 7, "2014": [7, 239, 240], "capabl": [7, 13, 14, 21, 34, 47, 49, 68, 72, 80, 93, 108, 111, 112, 145, 152, 206, 217, 220, 239, 290, 291, 297, 298], "besid": [7, 51, 68, 213, 238], "lot": [7, 11, 13, 59, 68, 86, 93, 95, 104, 135, 152, 206, 209, 216, 219, 223, 233, 239, 251, 297], "probabl": [7, 11, 51, 59, 68, 73, 76, 80, 108, 135, 179, 183, 230, 236, 239, 240, 252, 289, 295], "brows": [7, 9], "topic": [7, 16, 24, 38, 49, 145, 150, 202, 203, 204, 205, 207, 209, 210, 215, 239, 282, 289, 294], "particip": 7, "abid": 7, "email": [7, 220], "googl": [7, 205, 206, 239], "spam": [7, 261], "post": [7, 13, 21, 28, 30, 31, 32, 33, 34, 35, 36, 37, 49, 62, 68, 220, 221, 232, 251, 292], "moder": [7, 95], "shakthimaan": 7, "book": [7, 9, 48, 59, 69, 74, 128, 135, 138, 146, 150, 151, 170, 214, 219, 220, 290], "chapter1": 7, "etiquett": 7, "track": [7, 9, 11, 13, 15, 59, 68, 72, 76, 133, 146, 169, 194, 204, 209, 227, 246, 287], "etc": [7, 11, 12, 13, 19, 21, 22, 44, 47, 49, 64, 68, 69, 73, 74, 86, 95, 97, 98, 103, 108, 135, 156, 165, 169, 182, 185, 197, 201, 203, 204, 206, 207, 208, 209, 210, 213, 215, 220, 221, 228, 229, 230, 232, 236, 239, 240, 244, 252, 253, 258, 270, 274], "interest": [7, 11, 15, 17, 23, 28, 31, 37, 64, 68, 70, 73, 74, 84, 93, 95, 104, 108, 131, 136, 137, 185, 190, 204, 207, 211, 215, 216, 217, 219, 227, 230, 232, 233, 238, 239, 252, 253, 270, 287, 290, 292, 293, 294, 297], "prepar": [7, 21, 128, 218], "chat": [7, 39], "room": [7, 207], "stackoverflow": [7, 11, 108, 258, 261], "tracker": [7, 11, 12, 47, 228, 239, 293], "isn": [7, 11, 13, 23, 35, 95, 123, 131, 135, 239, 291], "organ": [7, 11, 145], "termin": [7, 8, 9, 11, 59, 68, 74, 96, 108, 134, 200, 220, 227, 251, 296], "live": [7, 40, 50, 152, 215, 233], "click": [7, 8, 9, 11], "next": [7, 9, 11, 15, 19, 21, 23, 25, 40, 49, 50, 52, 57, 59, 60, 62, 63, 68, 69, 74, 93, 95, 98, 104, 108, 123, 124, 127, 128, 133, 138, 139, 140, 142, 144, 145, 146, 153, 203, 204, 207, 209, 211, 215, 216, 220, 228, 230, 233, 236, 255, 256, 258, 290, 291, 292], "function_nam": [7, 49, 252], "upon": [7, 12, 14, 21, 49, 68, 108, 130, 133, 137, 147, 148, 149, 152, 179, 185, 201, 203, 204, 228, 236, 245, 252, 272, 297], "undergo": [7, 158], "gain": [7, 15, 26, 69, 119, 147, 148, 152], "submiss": 7, "dockerfil": 8, "htmldoc": 8, "sympy_htmldoc": 8, "apt": [8, 9], "dvipng": 8, "librsvg2": 8, "imagemagick": 8, "docbook2x": 8, "sudo": [8, 9], "venv": [8, 9], "my": [8, 220, 286], "Then": [8, 9, 11, 12, 14, 19, 21, 59, 64, 67, 68, 93, 97, 104, 108, 125, 128, 142, 144, 145, 150, 154, 182, 190, 203, 207, 208, 210, 213, 215, 217, 220, 227, 230, 232, 233, 236, 238, 259], "rerun": [8, 11, 12, 216, 251], "txt": [8, 220], "mayb": [8, 12, 22, 30], "rpm": 8, "prerequisit": 8, "dnf": [8, 98], "medium": [8, 23, 154, 155, 158, 159, 169, 213, 282], "homebrew": 8, "brew": 8, "sh": 8, "docbook": 8, "librsvg": 8, "tricki": [8, 68, 93], "subsystem": [8, 220], "linux": [8, 9, 11, 39], "workaround": [8, 259], "solut": [8, 11, 13, 14, 15, 17, 19, 22, 23, 26, 29, 30, 49, 64, 68, 69, 74, 76, 78, 86, 90, 91, 92, 95, 104, 108, 111, 116, 123, 128, 129, 135, 139, 145, 149, 154, 190, 194, 207, 209, 213, 214, 215, 216, 217, 218, 219, 228, 233, 235, 236, 237, 238, 298], "shell": [8, 11, 15, 96, 152, 219], "microsoft": 8, "wsl": 8, "transfer": [8, 26, 116, 117, 119, 154, 239], "folder": 8, "prepend": [8, 48, 59, 104, 119, 192, 220, 246], "mnt": 8, "navig": [8, 13], "cygwin": 8, "msys2": 8, "partial": [8, 14, 47, 59, 66, 67, 68, 70, 72, 73, 74, 108, 110, 152, 179, 195, 199, 201, 209, 211, 214, 217, 220, 222, 229, 232, 236, 237, 241, 247, 265, 272, 287, 297], "viabl": [8, 69], "64": [8, 12, 53, 59, 108, 151, 205, 219, 229, 238, 240, 251, 258, 261, 296], "bit": [8, 12, 19, 23, 48, 49, 52, 68, 69, 71, 98, 99, 104, 108, 179, 190, 207, 209, 216, 230, 233, 239, 251, 258, 269, 270, 296], "chocolatei": 8, "choco": 8, "rsvg": 8, "chose": [8, 69], "rm": [8, 49], "absolut": [8, 12, 45, 46, 49, 67, 68, 74, 76, 83, 93, 95, 99, 104, 121, 183, 211, 215, 216, 230, 232, 235, 240, 251, 274, 275, 276], "substitut": [8, 14, 15, 19, 22, 28, 31, 35, 37, 49, 68, 69, 74, 76, 93, 95, 104, 109, 110, 119, 128, 129, 135, 137, 139, 149, 174, 183, 185, 188, 195, 197, 199, 217, 218, 221, 222, 227, 230, 232, 233, 236, 237, 238, 239, 259, 268, 288, 289], "filesystem": 8, "makefil": 8, "subdirectori": [8, 12, 25], "browser": 8, "drop": [8, 11, 74, 95, 109, 142, 211, 213], "menu": 8, "told": [8, 11], "load": [8, 13, 49, 68, 96, 111, 112, 113, 115, 124, 126, 127, 128, 131, 133, 138, 140, 145, 153, 165, 200, 282], "ll": [8, 48, 66, 104, 131, 139, 203, 204, 249], "repeat": [8, 9, 14, 15, 59, 62, 67, 68, 74, 76, 95, 97, 99, 104, 108, 110, 169, 171, 185, 206, 207, 208, 213, 215, 216, 220, 226, 236, 240, 244, 245, 252, 254, 258, 297], "reload": 8, "approach": [8, 19, 28, 31, 32, 33, 35, 36, 37, 48, 67, 68, 95, 119, 139, 145, 209, 210, 213, 214, 215, 217, 228, 237, 238, 240, 252, 255, 258, 287, 293], "monitor": 8, "procedur": [8, 31, 33, 50, 51, 53, 59, 65, 66, 67, 95, 104, 128, 150, 213, 215, 232, 233, 238, 239, 265, 293], "8000": [8, 111], "localhost": 8, "port": [8, 110, 137, 157], "finish": [8, 12, 49, 50, 179, 254, 294], "ctrl": 8, "detach": 8, "livehtml": 8, "tab": [8, 13, 15, 64, 152], "99": [8, 49, 68, 69, 104, 108, 213, 214], "bad": [8, 11, 12, 13, 67, 108, 187, 209, 220], "extra": [8, 13, 49, 51, 68, 69, 108, 109, 128, 143, 190, 201, 213, 220, 230, 236, 251, 252, 253, 272], "xelatex": 8, "latexmk": 8, "chrome": 8, "chromium": 8, "svg": [8, 25, 96, 200], "On": [8, 11, 13, 21, 44, 61, 68, 70, 76, 95, 98, 108, 135, 189, 190, 201, 210, 211, 213, 214, 215, 216, 236, 238, 255, 259, 272, 274], "xetex": 8, "font": [8, 96, 200, 220], "lmodern": 8, "cask": 8, "tap": 8, "dejavu": 8, "strawberryperl": 8, "dejavufont": 8, "appdata": 8, "never": [9, 10, 11, 12, 14, 21, 23, 35, 68, 74, 95, 187, 216, 217, 220, 228, 238, 240, 249, 269, 289, 290], "familiar": [9, 10, 11, 15, 23, 95, 135, 150, 169, 217, 287, 289, 295], "push": [9, 11, 12, 93, 131], "nativ": [9, 14, 68, 119, 211, 216, 251], "yum": 9, "maco": 9, "desktop": 9, "gui": [9, 96, 200], "sync": 9, "rebas": [9, 11], "disabl": [9, 12, 13, 14, 35, 68, 69, 93, 95, 108, 213, 216, 220, 228, 236, 238, 249, 251, 254, 258, 259], "commit": [9, 12], "enter": [9, 17, 60, 68, 69, 73, 81, 108, 110, 111, 115, 128, 133, 137, 147, 220, 230, 238, 251, 292, 296], "config": [9, 96], "firstnam": 9, "lastnam": 9, "your_email": 9, "youremail": 9, "usernam": [9, 11], "gitconfig": 9, "handi": [9, 67, 68, 104, 220, 292], "shortcut": [9, 48, 68, 100, 204, 220, 228, 232, 297], "alias": [9, 102, 211], "alia": [9, 49, 61, 68, 78, 84, 99, 100, 102, 106, 169, 178, 185, 207, 209, 210, 211, 215, 219, 228, 251, 261, 297], "di": [9, 216], "st": [9, 12, 69, 95, 185], "statu": [9, 11, 96], "checkout": [9, 11, 48], "log1": 9, "onelin": 9, "abbrev": [9, 191, 192, 220], "scm": 9, "sv": 9, "v2": [9, 70, 81, 104, 130, 195, 196, 199, 259, 265, 268, 269, 270, 271], "signup": 9, "presenc": [9, 68, 74, 98, 115, 133, 139, 149, 236, 244], "world": [9, 69, 115, 139, 149, 258], "profession": 9, "establish": [9, 19, 64, 93, 127, 131, 133, 140, 230], "secur": [9, 13], "connect": [9, 21, 62, 69, 70, 83, 84, 104, 109, 111, 115, 124, 127, 133, 134, 137, 140, 146, 207, 208, 209, 218, 236, 240, 258, 265], "button": [9, 12, 206, 252], "address": [9, 12, 68, 220, 239], "practic": [9, 19, 21, 28, 31, 34, 37, 57, 59, 68, 69, 78, 146, 149, 152, 206, 207, 208, 210, 215, 217, 244, 289, 290], "store": [9, 11, 13, 15, 21, 25, 48, 49, 58, 59, 68, 90, 92, 101, 104, 108, 110, 124, 128, 130, 133, 135, 150, 179, 185, 199, 203, 204, 206, 207, 209, 210, 215, 216, 217, 227, 230, 241, 244, 245, 253, 254, 255, 258, 270, 272, 292], "clone": [9, 39, 213], "origin": [9, 11, 12, 14, 15, 19, 21, 31, 39, 41, 59, 60, 61, 64, 67, 68, 69, 72, 73, 74, 76, 77, 79, 81, 83, 93, 95, 99, 104, 108, 117, 119, 120, 127, 133, 134, 139, 149, 152, 177, 180, 190, 196, 201, 206, 207, 209, 211, 215, 216, 219, 220, 228, 229, 230, 232, 233, 236, 237, 238, 239, 240, 246, 251, 258, 259, 265, 268, 269, 270, 271, 272, 274, 275, 297], "77": [9, 57, 76, 104, 108, 219, 220, 253], "mib": 9, "repo": [9, 11, 12, 135], "remot": [9, 68], "tune": [9, 72, 96, 200, 220], "fetch": 9, "advantag": [9, 13, 17, 21, 23, 28, 44, 47, 49, 68, 69, 73, 95, 98, 104, 108, 116, 189, 209, 210, 217, 228, 233, 236, 239, 255, 289, 291, 293, 297], "isol": [9, 28, 47, 74, 211, 215, 216, 217, 238, 253], "wide": [9, 21, 96, 104, 113, 152, 200, 209, 210, 216, 220, 240], "flake8": [9, 11, 12], "split": [10, 23, 49, 68, 69, 72, 93, 95, 110, 213, 215, 218, 219, 220, 238, 240, 246, 251, 258, 263, 292, 297], "experienc": [10, 13, 50], "regress": 11, "green": [11, 12, 59, 146, 206], "123": [11, 68, 73, 78, 98, 127, 182, 195, 258, 265, 267], "visibl": [11, 93, 206], "ok": [11, 12, 13, 49, 60, 220, 236], "field": [11, 21, 35, 41, 45, 49, 68, 69, 70, 76, 86, 95, 157, 158, 197, 198, 202, 207, 208, 209, 211, 212, 214, 216, 217, 218, 233, 238, 251, 265, 268, 270, 271, 273, 275, 280, 282, 283], "respond": [11, 68], "perus": 11, "feel": [11, 21, 39, 152, 153, 232, 236, 238], "fine": [11, 12, 13, 19, 23, 31, 68, 72, 96, 200, 209, 210, 220, 232], "upstream": 11, "highlight": 11, "accid": [11, 12, 69, 259], "reset": [11, 59, 61, 133, 206, 213, 216, 251, 254, 256], "somehow": [11, 12, 14, 23], "typo": [11, 230], "ultim": [11, 23, 74, 190], "spend": 11, "distinguish": [11, 18, 21, 22, 48, 59, 72, 97, 135, 184, 190, 207], "accident": [11, 12, 14], "failur": [11, 64, 72, 85, 93, 108, 240, 251, 297], "accompani": [11, 12, 48], "sqrtdenest": [11, 12, 232], "test_sqrtdenest": [11, 12], "pattern": [11, 12, 13, 14, 15, 21, 23, 68, 93, 95, 98, 99, 110, 179, 210, 230, 232, 236, 238, 287, 292], "appar": [11, 12, 14, 15, 68, 261, 297], "test_trigonometr": [11, 12], "test_cos_seri": [11, 12], "6": [11, 12, 15, 17, 19, 26, 28, 36, 37, 41, 43, 44, 47, 49, 50, 51, 52, 56, 57, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 78, 80, 81, 82, 83, 84, 90, 91, 93, 95, 97, 98, 99, 101, 102, 104, 105, 107, 108, 110, 111, 113, 115, 117, 119, 120, 121, 130, 137, 138, 142, 143, 144, 150, 154, 158, 164, 182, 195, 204, 205, 206, 208, 209, 210, 211, 213, 215, 216, 217, 219, 220, 222, 225, 226, 227, 228, 229, 232, 233, 236, 237, 238, 239, 240, 241, 251, 252, 255, 258, 259, 265, 268, 270, 275, 287, 293, 297, 298], "720": [11, 12, 222, 236, 258], "40320": [11, 12], "One": [11, 14, 15, 18, 21, 23, 47, 48, 49, 58, 60, 67, 68, 73, 74, 76, 87, 90, 92, 93, 95, 98, 104, 108, 111, 112, 133, 135, 150, 152, 161, 190, 194, 211, 213, 214, 216, 219, 222, 228, 232, 235, 238, 239, 240, 241, 246, 259, 272, 286, 287, 289, 292, 293, 297], "past": [11, 12, 15, 74, 108, 219, 220, 296], "session": [11, 12, 14, 40, 49, 68, 80, 95, 200, 204, 210, 256, 289, 296], "unclear": [11, 13, 21, 123], "kei": [11, 13, 14, 15, 17, 28, 30, 42, 45, 48, 57, 59, 60, 68, 69, 70, 73, 84, 97, 99, 104, 107, 108, 111, 133, 135, 177, 180, 185, 204, 206, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 220, 232, 236, 237, 238, 240, 244, 255, 258, 259, 261, 293, 294, 297], "corner": [11, 12, 59, 61, 99, 216, 236, 239, 259], "delta_funct": [11, 76, 95], "argumentindexerror": [11, 23], "scroll": [11, 37], "bottom": [11, 58, 59, 68, 69, 84, 99, 104, 107, 133, 215, 220, 229, 275], "test_bas": [11, 251], "similari": 11, "code_qu": 11, "total": [11, 37, 50, 57, 59, 68, 73, 84, 97, 98, 99, 101, 137, 139, 147, 154, 158, 164, 169, 182, 191, 205, 211, 213, 216, 229, 232, 236, 244, 246, 275], "new_fil": 11, "editor": [11, 12], "vim": 11, "pop": [11, 95, 233], "stage": [11, 21, 48, 67, 108, 227, 297], "affect": [11, 13, 21, 23, 67, 68, 104, 194, 216, 238, 239, 270], "binari": [11, 12, 15, 22, 23, 31, 45, 49, 52, 63, 68, 69, 95, 98, 108, 109, 179, 191, 207, 210, 216, 233, 252, 255, 258], "temporari": [11, 68, 252], "individu": [11, 12, 13, 21, 23, 26, 30, 33, 68, 74, 79, 84, 85, 97, 101, 104, 119, 150, 157, 175, 179, 205, 228, 236, 251, 293], "gitignor": 11, "agreement": 11, "exclud": [11, 30, 35, 37, 49, 67, 68, 95, 104, 125, 130, 152, 208, 209, 211, 213, 216, 226, 236, 238, 251, 254, 258], "22906851": 11, "ignor": [11, 12, 13, 15, 17, 23, 49, 59, 68, 69, 73, 74, 78, 83, 93, 98, 104, 108, 119, 125, 131, 137, 182, 185, 195, 206, 216, 220, 221, 232, 238, 239, 252, 297], "bodi": [11, 13, 15, 49, 93, 110, 122, 123, 126, 127, 128, 133, 135, 137, 138, 139, 140, 142, 145, 146, 147, 152, 153, 188, 195, 199, 203, 204, 265, 267, 282], "perman": [11, 104], "histori": [11, 152], "effort": [11, 109, 211, 213], "research": [11, 19, 60, 119, 209, 217, 232], "shortlog": 11, "ui": [11, 95, 108, 237], "convei": [11, 28], "71": [11, 59, 84, 104, 108, 188], "78": [11, 59, 82, 104, 108, 112, 190, 236, 240], "summari": [11, 138, 251, 276], "leav": [11, 14, 21, 23, 34, 36, 49, 68, 95, 104, 108, 129, 145, 169, 185, 209, 227, 255, 286, 292, 297], "heurisch": [11, 13, 95], "12345": [11, 49, 72], "brief": [11, 49, 239, 251, 274], "nearbi": 11, "similarli": [11, 12, 13, 21, 28, 35, 64, 68, 69, 76, 80, 104, 111, 112, 119, 128, 131, 150, 189, 194, 206, 207, 210, 215, 217, 227, 228, 230, 236, 251, 259, 270, 271, 293], "doubt": [11, 98, 135], "switch": [11, 13, 41, 59, 66, 95, 108, 119, 213, 216, 242], "let": [11, 12, 19, 21, 22, 23, 26, 47, 49, 59, 64, 68, 69, 78, 86, 91, 93, 97, 101, 104, 105, 108, 110, 124, 134, 135, 152, 190, 195, 203, 207, 208, 209, 213, 215, 216, 217, 220, 227, 230, 232, 233, 236, 238, 239, 246, 249, 252, 256, 259, 270, 271, 275, 286, 289, 291, 292, 297], "overview": [11, 208, 239, 273, 274], "concret": [11, 21, 48, 60, 68, 73, 74, 95, 97, 104, 108, 135, 190, 211, 215, 220, 277], "suitabl": [11, 95, 101, 110, 205, 208, 209, 210, 213, 215, 220, 230, 233, 236, 239, 241, 290], "unicod": [11, 12, 76, 96, 104, 200, 220, 251, 291], "printer": [11, 12, 13, 14, 23, 60, 68, 76, 96, 104, 109, 200, 242, 245, 252, 253, 259, 288, 292], "bf0e81e12a2f75711c30f0788daf4e58f72b2a41": 11, "revis": [11, 238], "anti": [11, 14, 41, 45, 64, 74, 95, 99, 157, 162, 246], "candid": [11, 32, 59, 68, 104, 108, 213, 232], "phase": [11, 26, 68, 95, 117, 154, 157, 159, 169, 170, 239], "explicit": [11, 13, 14, 21, 23, 28, 31, 32, 60, 67, 68, 72, 84, 85, 95, 107, 108, 128, 129, 133, 135, 139, 149, 153, 204, 207, 216, 219, 220, 222, 228, 230, 236, 237, 238, 239, 255], "solve_lin_si": [11, 13, 218], "upsid": 11, "monomi": [11, 68, 95, 98, 108, 208, 210, 211, 213, 219, 220, 297], "downsid": [11, 293], "involv": [11, 12, 13, 15, 19, 21, 28, 30, 32, 44, 46, 59, 67, 68, 69, 73, 80, 81, 93, 95, 108, 119, 124, 128, 134, 135, 164, 174, 180, 182, 192, 203, 204, 207, 208, 211, 213, 215, 216, 217, 221, 222, 227, 228, 229, 230, 232, 233, 236, 238, 241, 259, 297], "anymor": [11, 12, 206], "coincid": [11, 84, 104, 107, 127, 135, 207, 265, 270, 289], "investig": [11, 60, 93, 205, 207, 230, 258, 289], "exp": [11, 12, 13, 14, 15, 17, 21, 23, 26, 34, 35, 37, 41, 47, 49, 58, 67, 68, 70, 72, 73, 74, 76, 86, 87, 90, 93, 95, 99, 101, 104, 108, 121, 161, 164, 180, 186, 205, 210, 211, 216, 217, 220, 222, 227, 230, 232, 236, 237, 238, 239, 240, 241, 258, 275, 287, 291, 293, 298], "ratsimp": [11, 68, 232], "cpu": [11, 49, 109, 152], "sy": [11, 39, 49, 70, 135, 152, 220, 251, 262, 271, 289], "04": [11, 99, 240], "31": [11, 56, 68, 71, 72, 84, 108, 194, 205, 216, 233], "wall": [11, 127, 133, 140], "32": [11, 59, 71, 74, 76, 78, 95, 104, 108, 111, 117, 194, 214, 216, 217, 229, 230, 233, 240, 251], "\u212f": [11, 49, 157, 205, 220, 287, 291, 293, 297, 298], "took": [11, 217, 229], "450": [11, 104], "gb": [11, 59, 115], "ram": 11, "occasion": [11, 12, 68], "feedback": [11, 26, 69, 116, 119, 290], "draft": 11, "state": [11, 12, 14, 19, 21, 35, 59, 66, 68, 76, 108, 111, 119, 121, 127, 128, 129, 133, 137, 139, 153, 157, 161, 162, 164, 165, 166, 168, 169, 170, 174, 177, 179, 180, 181, 182, 184, 185, 209, 216, 220, 229, 230, 232, 240, 255, 282, 293], "wip": 11, "stand": [11, 14, 67, 68, 128, 152, 208, 209, 210, 211, 217], "progress": [11, 42, 44, 108, 253], "fill": [11, 15, 20, 59, 69, 99, 101, 104, 107, 185, 206, 251, 254, 258, 261, 293], "templat": [11, 13, 258], "undescript": 11, "tend": [11, 23, 40, 49, 68, 73, 131, 213, 215, 225, 227, 230, 290, 297], "henc": [11, 47, 49, 58, 59, 68, 70, 74, 76, 80, 93, 96, 98, 108, 115, 201, 206, 207, 208, 213, 220, 230, 233, 237, 239, 251, 255, 270, 271, 272, 292, 297], "transcendent": [11, 21, 32, 36, 37, 45, 68, 76, 95, 210, 215, 216, 220, 238, 239, 293, 298], "perhap": [11, 13, 17, 49, 68, 98, 108, 170, 209, 210, 238, 253, 286], "compar": [11, 12, 15, 21, 37, 47, 49, 60, 65, 68, 73, 74, 85, 98, 104, 108, 109, 137, 164, 188, 192, 210, 213, 216, 217, 220, 225, 227, 232, 236, 239, 241, 245, 251, 258, 289, 292, 297], "1234": [11, 108, 233], "auto": [11, 13, 15, 31, 47, 68, 69, 96, 206, 209, 213, 216, 220, 232, 236, 240], "record": [11, 51, 62, 68, 215, 220, 251], "joe": 11, "blogg": 11, "mailmap_check": 11, "unrecognis": 11, "3af6dc1": 11, "7fa63b1": 11, "100644": 11, "1307": [11, 37], "zsc347": 11, "gmail": [11, 205], "\u00f8yvind": 11, "jensen": [11, 49], "oyvind": 11, "\u0142ukasz": 11, "pankowski": 11, "lukpank": 11, "o2": [11, 227], "pl": 11, "\u5f6d\u4e8e\u658c": 11, "1931127624": 11, "qq": [11, 86, 87, 89, 90, 91, 95, 207, 208, 209, 210, 213, 215, 216, 217], "reorder": [11, 60, 67, 74, 185, 216, 236, 240, 258], "alphabet": [11, 68, 69, 119, 190, 208, 233, 253], "move": [11, 12, 23, 59, 60, 68, 69, 82, 84, 111, 127, 131, 133, 137, 139, 145, 173, 199, 203, 204, 232, 241, 250, 272], "7598d94": 11, "562": 11, "joannah": 11, "nanjeky": 11, "ibm": [11, 232], "jnanjeky": 11, "nanjekyejoannah": 11, "joaquim": 11, "monserrat": 11, "qmonserrat": 11, "mailoo": 11, "jochen": 11, "voss": 11, "seehuhn": 11, "de": [11, 48, 69, 73, 108, 115, 190, 205, 217, 222, 233, 236, 258], "jogi": 11, "miglani": 11, "jmig5776": 11, "johan": 11, "bl\u00e5b\u00e4ck": 11, "johan_bluecreek": 11, "riseup": 11, "net": [11, 48, 84, 214, 236, 240, 258], "blaback": 11, "cea": 11, "fr": [11, 90, 95, 108, 128, 135, 137, 139, 142, 143, 147, 149, 152, 240], "guzman": 11, "jguzm022": 11, "ucr": 11, "edu": [11, 47, 52, 59, 60, 69, 71, 73, 95, 104, 108, 119, 209, 214, 219, 229, 233, 236, 240, 265], "joeb": 11, "1785690389": 11, "norepli": 11, "map": [11, 14, 21, 23, 47, 48, 49, 51, 58, 59, 60, 68, 69, 80, 84, 91, 93, 95, 98, 99, 108, 117, 128, 139, 163, 174, 175, 180, 195, 204, 206, 207, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 227, 232, 236, 237, 238, 239, 240, 244, 245, 252, 255, 258, 259, 261, 265], "cost": [12, 47, 49, 108, 139, 209, 239, 291], "modular": [12, 69, 108, 181, 209, 214, 239], "consequ": [12, 13, 23, 45, 68, 208, 210, 289, 297], "cover": [12, 19, 74, 108, 110, 123, 135, 194, 203, 246, 253, 287, 289], "maxim": [12, 59, 69, 97, 207, 211, 215, 227, 229], "red": [12, 206], "advis": [12, 13, 21, 37, 48, 127, 135], "wait": [12, 204], "_____________________________________________________________________________________________________": 12, "_________________": [12, 112], "test_pretti": 12, "test_upretty_sub_sup": 12, "traceback": [12, 13, 15, 18, 21, 22, 23, 28, 30, 32, 33, 34, 35, 36, 37, 42, 43, 44, 49, 50, 60, 68, 69, 72, 78, 95, 98, 99, 100, 101, 102, 104, 106, 107, 110, 119, 205, 207, 209, 210, 211, 213, 216, 219, 227, 228, 236, 238, 239, 249, 251, 252, 254, 256, 258, 259, 261, 289, 293], "home": [12, 111, 215, 233], "oscar": [12, 205], "317": 12, "upretti": 12, "beta_1_2": 12, "\u03b2\u2081\u2082": 12, "assertionerror": [12, 249], "branch": [12, 22, 47, 68, 73, 74, 75, 76, 217, 230, 239, 292, 297], "ran": 12, "influenc": [12, 50, 111, 134, 207, 208], "suppos": [12, 13, 22, 23, 60, 67, 68, 69, 93, 207, 209, 213, 215, 216, 220, 227, 230, 236, 238, 249, 258, 270, 275, 289, 291, 297], "sneak": 12, "sporad": 12, "seed": [12, 57, 59, 68, 69, 78, 81, 82, 104, 108, 213, 240, 251, 258], "pythonhashse": [12, 251], "unrel": [12, 13, 33, 68, 75, 208, 289], "ideal": [12, 21, 49, 105, 130, 135, 145, 195, 203, 209, 211, 213, 214, 215, 216, 217, 232, 239, 265], "slip": [12, 137, 141, 143, 203], "wasn": 12, "notic": [12, 13, 15, 23, 59, 60, 66, 68, 104, 150, 173, 210, 230, 242, 246, 247, 258, 259, 289, 291, 292, 297], "broken": [12, 13, 57, 68, 203, 220, 236, 261], "seem": [12, 17, 21, 23, 92, 93, 135, 190, 207, 209, 232, 236, 297], "carefulli": [12, 22, 68, 195, 213, 222], "everyon": [12, 217], "expediti": 12, "21177": 12, "residu": [12, 64, 69, 108, 211, 213, 230], "cot": [12, 68, 74, 76, 110, 217, 220, 229], "tanh": [12, 68, 72, 74, 95, 217, 220, 232, 297], "as_leading_term": [12, 68, 227], "21253": 12, "test_tan": 12, "tan": [12, 47, 68, 73, 74, 95, 110, 125, 142, 143, 144, 149, 217, 219, 220, 227, 229, 236, 239, 297], "test_expr": [12, 68], "test_as_leading_term": 12, "ration": [12, 14, 21, 23, 28, 42, 44, 45, 47, 49, 67, 68, 72, 73, 74, 76, 78, 81, 83, 85, 89, 93, 95, 96, 101, 104, 108, 110, 119, 154, 187, 205, 208, 209, 213, 214, 215, 217, 220, 225, 228, 229, 230, 232, 233, 235, 238, 239, 240, 258, 265, 288, 289, 292, 296], "imaginaryunit": [12, 68, 220], "21245": 12, "fi": [12, 19], "36": [12, 28, 51, 62, 69, 73, 84, 95, 99, 104, 108, 112, 216, 220, 233, 236, 240, 275], "test_residu": 12, "test_issue_21177": 12, "cancel": [12, 19, 23, 26, 49, 68, 72, 76, 84, 93, 95, 104, 108, 119, 120, 209, 210, 211, 213, 216, 219, 232, 238, 291], "underli": [12, 14, 49, 60, 66, 68, 97, 104, 117, 135, 180, 193, 209, 216, 238, 239, 240], "report": [12, 40, 47, 59, 68, 81, 99, 108, 217, 228, 239, 251, 293, 298], "benefici": 12, "prudent": 12, "matter": [12, 23, 47, 57, 60, 67, 68, 73, 93, 95, 194, 227, 258, 291, 292], "reproduct": 12, "constant": [12, 13, 14, 26, 28, 30, 31, 33, 36, 47, 49, 67, 68, 72, 74, 76, 92, 93, 95, 111, 112, 119, 133, 134, 135, 137, 152, 153, 162, 166, 172, 188, 189, 191, 192, 193, 196, 199, 201, 206, 208, 211, 213, 215, 216, 217, 220, 222, 227, 230, 232, 233, 236, 237, 238, 239, 240, 251, 253, 258, 259, 268, 272, 275, 282, 287, 293, 298], "quickli": [12, 19, 23, 59, 60, 68, 69, 72, 73, 108, 209, 213, 216, 229, 239, 255], "newli": [12, 68, 93, 230], "lambda": [12, 14, 15, 23, 26, 30, 34, 43, 44, 47, 49, 59, 60, 68, 69, 70, 74, 95, 99, 100, 101, 104, 107, 108, 110, 128, 135, 148, 149, 152, 153, 170, 206, 209, 213, 215, 216, 220, 221, 228, 229, 232, 236, 238, 239, 240, 241, 249, 258, 259, 265, 267, 270, 286, 293], "typeerror": [12, 13, 15, 22, 23, 32, 35, 42, 43, 44, 60, 68, 78, 83, 98, 100, 102, 106, 119, 159, 210, 211, 227, 228, 252, 259], "execut": [12, 14, 21, 39, 49, 96, 99, 152, 206, 220, 236, 239, 249, 251, 253, 254, 259, 261, 264, 276, 291, 296], "care": [12, 14, 15, 22, 23, 59, 68, 76, 95, 98, 104, 111, 115, 123, 135, 149, 195, 204, 209, 210, 215, 232, 233, 236, 238, 239, 244, 247, 252, 286, 289, 291], "WILL": 12, "userwarn": [12, 195, 249, 256, 293], "function_that_emits_a_warn": 12, "sparingli": 12, "asid": [12, 15, 98, 236, 237, 291], "annoi": 12, "warrant": 12, "test_stacklevel": [12, 249], "expr_free_symbol": [12, 68], "test_deprecated_expr_free_symbol": 12, "nomin": 12, "closer": [12, 34, 131, 137, 239, 292], "inspect": [12, 13, 21, 104, 215, 226, 257, 259, 284], "could": [12, 13, 14, 15, 19, 21, 23, 32, 34, 36, 44, 49, 61, 68, 80, 93, 95, 98, 127, 130, 135, 145, 149, 185, 188, 190, 207, 210, 213, 215, 217, 220, 228, 230, 232, 236, 237, 238, 239, 240, 241, 244, 245, 252, 256, 270, 271, 289, 292, 297], "nonsens": [12, 67, 76], "unevalu": [12, 13, 14, 21, 22, 23, 26, 43, 44, 47, 60, 67, 68, 74, 76, 85, 95, 108, 119, 162, 166, 173, 174, 185, 216, 219, 227, 228, 232, 236, 238, 239, 240, 241, 287, 291, 292, 298], "helper": [12, 13, 31, 47, 49, 59, 63, 66, 68, 93, 95, 96, 97, 170, 172, 181, 217, 227, 230, 233, 236, 237, 239, 252, 282], "test_sin_1_unevalu": 12, "dummy_eq": [12, 68], "combinatori": [12, 23, 52, 60, 67, 68, 75, 76, 216, 222, 232, 258, 260, 277, 297], "test_comb_factori": 12, "test_factorial_rewrit": 12, "nonneg": [12, 21, 23, 45, 68, 69, 70, 73, 76, 101, 152, 208, 210, 216, 233, 240, 297], "rewrit": [12, 67, 68, 70, 73, 74, 76, 93, 95, 98, 111, 119, 182, 211, 216, 227, 228, 229, 232, 236, 237, 238, 239, 240, 277, 291, 293], "_i": [12, 95, 185, 190, 217], "product": [12, 13, 21, 41, 51, 53, 56, 59, 60, 64, 66, 67, 68, 69, 70, 72, 73, 76, 78, 81, 83, 84, 91, 93, 95, 97, 98, 99, 101, 104, 108, 109, 119, 120, 121, 123, 127, 137, 150, 152, 160, 164, 165, 168, 170, 171, 172, 174, 177, 179, 180, 182, 183, 185, 189, 190, 191, 194, 195, 197, 202, 203, 204, 205, 207, 208, 209, 211, 213, 215, 216, 217, 220, 221, 222, 225, 228, 229, 232, 233, 236, 237, 238, 239, 240, 242, 244, 245, 246, 252, 255, 258, 265, 269, 282], "far": [12, 15, 48, 68, 82, 95, 205, 207, 210, 220, 230, 259, 286, 287, 289], "boil": 12, "agre": [12, 68, 69, 76, 83, 93, 230], "indefinit": [12, 14, 41, 74, 92, 93, 95, 104, 211, 213, 214, 216, 225, 287], "integrand": [12, 72, 76, 92, 93, 95, 230], "Of": [12, 19, 21, 28, 67, 93, 104, 236, 239, 258, 297], "cours": [12, 19, 21, 25, 51, 52, 59, 67, 76, 93, 95, 104, 105, 108, 150, 201, 209, 210, 214, 215, 227, 229, 230, 272, 297], "hurt": 12, "checkodesol": [12, 35, 236], "truth": [12, 22, 42, 43, 44, 45, 46, 68, 99, 232], "verifi": [12, 21, 28, 33, 35, 39, 47, 59, 65, 69, 70, 135, 207, 213, 219, 236, 238, 239, 241, 242, 297], "logic": [12, 13, 14, 21, 23, 42, 43, 44, 45, 48, 68, 70, 93, 95, 108, 177, 179, 180, 184, 206, 220, 222, 228, 236, 240, 258, 289, 290, 291, 293], "duplic": [12, 15, 59, 62, 69, 74, 76, 104, 108, 133, 228, 236, 258, 290], "mistaken": 12, "aaronmeur": 12, "anaconda3": 12, "cpython": [12, 152], "cach": [12, 21, 73, 93, 207, 216, 220, 249, 254, 255], "ye": [12, 69, 98, 108, 236], "ground": [12, 87, 127, 137, 141, 142, 143, 144, 207, 209, 210, 211, 213, 215, 216, 238, 296], "gmpy": [12, 68, 72, 210, 211, 296], "7357232": 12, "hash": [12, 68, 211, 213, 221, 232, 236, 251, 253], "3923913114": 12, "situat": [12, 21, 37, 68, 72, 93, 204, 236, 238, 240, 256, 289], "randomli": [12, 59, 68, 69, 108, 179], "xfail": [12, 236, 249, 251], "almost": [12, 33, 93, 102, 110, 187, 207, 211, 216, 217, 236, 240, 254, 255, 258, 291], "useless": [12, 187, 211, 213], "test_func": 12, "sinc": [12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 26, 42, 47, 49, 50, 59, 60, 61, 64, 65, 66, 68, 69, 71, 73, 74, 76, 77, 78, 80, 84, 86, 92, 93, 95, 97, 98, 99, 104, 108, 122, 127, 150, 152, 161, 185, 186, 190, 201, 204, 206, 207, 208, 210, 211, 213, 215, 216, 220, 223, 228, 229, 230, 232, 233, 236, 238, 239, 240, 246, 250, 254, 255, 256, 258, 259, 269, 271, 272, 274, 286, 291, 293, 296, 297, 298], "xpass": [12, 249, 251], "test_failing_integr": 12, "atanh": [12, 74, 217, 220, 230], "mistyp": 12, "slightli": [12, 34, 40, 41, 49, 64, 108, 110, 137, 206, 207, 209, 211, 213, 216, 220, 230, 232], "robust": [12, 35, 65, 68, 72, 212, 232, 236], "against": [12, 13, 21, 23, 37, 69, 104, 111, 135, 252], "minut": [12, 15, 33, 123, 137, 194], "hang": [12, 35, 104, 139, 143, 236, 237], "job": [12, 19, 23, 60, 165, 217, 220], "skipp": 12, "test_optional_depend": 12, "runtest": [12, 13, 251], "yml": 12, "manner": [12, 52, 69, 76, 149, 183, 201, 233, 236, 241, 258, 274], "act": [12, 14, 48, 51, 58, 59, 60, 64, 68, 76, 84, 97, 98, 104, 111, 113, 115, 124, 127, 130, 131, 133, 135, 140, 148, 157, 169, 174, 177, 178, 228, 239, 241, 242, 270, 274, 286], "fresh": 12, "verbos": [12, 49, 68, 99, 108, 220, 251, 252, 296], "clipboard": 12, "contrast": [12, 14, 23, 67, 68, 139, 210, 216, 230, 236, 291], "foremost": 12, "tempt": [12, 21, 23, 68, 108], "indirect": [12, 68, 70, 76, 108, 185, 236], "trigsimp": [12, 15, 41, 68, 104, 127, 135, 143, 195, 229, 232, 269], "along": [12, 19, 23, 28, 49, 59, 68, 69, 70, 74, 76, 77, 78, 82, 83, 86, 88, 91, 93, 99, 101, 104, 111, 112, 113, 115, 122, 123, 127, 128, 130, 131, 133, 134, 137, 139, 142, 143, 144, 147, 148, 149, 150, 152, 154, 182, 194, 195, 201, 204, 206, 209, 210, 215, 216, 236, 239, 268, 272, 274], "clearer": [12, 13, 269], "unwieldi": [12, 17], "sort": [12, 14, 30, 43, 44, 48, 49, 57, 60, 64, 93, 95, 98, 104, 107, 108, 120, 123, 128, 169, 185, 190, 194, 206, 213, 216, 217, 227, 232, 233, 236, 237, 238, 242, 244, 246, 251, 253, 258, 269, 289, 291, 292], "judgment": 12, "convolut": [12, 76, 222], "uncommon": [12, 49], "valueerror": [12, 18, 21, 34, 35, 42, 44, 47, 49, 50, 60, 68, 69, 77, 78, 81, 83, 84, 95, 99, 101, 104, 107, 108, 111, 117, 119, 134, 159, 199, 201, 205, 207, 209, 213, 215, 228, 236, 238, 239, 258, 261, 272], "0x10e997790": 12, "memori": [12, 14, 49, 68, 108, 216, 241, 252, 255], "attempt": [12, 17, 19, 22, 23, 28, 31, 35, 37, 49, 59, 64, 66, 68, 72, 73, 80, 93, 95, 104, 108, 123, 125, 180, 209, 210, 211, 215, 220, 222, 229, 232, 233, 236, 238, 239, 240, 251, 289, 297], "proof": [12, 59, 62, 93, 95, 239], "45": [12, 48, 68, 73, 84, 104, 108, 115, 216, 217, 233], "120": [12, 19, 67, 68, 73, 74, 90, 108, 111, 112, 217, 219, 220, 222, 236, 287], "210": [12, 72, 108, 233], "252": 12, "hidden": [12, 14, 194], "outdat": 12, "doctest_depends_on": [12, 254], "blanklin": 12, "todo": [12, 163, 165, 169, 170, 174, 175, 177, 178, 179, 180, 181, 213, 220, 227, 245], "trick": [12, 13, 14, 15, 64, 230, 246], "tag": [12, 220, 238], "dotprint": [12, 292, 296], "pprint": [12, 14, 15, 23, 26, 32, 47, 48, 70, 76, 95, 104, 108, 119, 157, 205, 220, 221, 228, 232, 236, 237, 239, 240, 258, 296], "use_unicod": [12, 23, 33, 47, 48, 49, 72, 76, 95, 96, 104, 112, 119, 157, 200, 205, 207, 208, 219, 220, 221, 239, 240, 287, 291, 293, 296, 297, 298], "is_real": [12, 14, 21, 23, 28, 32, 68, 70, 74, 75, 104, 197, 216, 220, 245], "real": [12, 13, 14, 15, 18, 19, 21, 22, 23, 28, 31, 32, 41, 43, 45, 46, 47, 49, 60, 68, 69, 70, 72, 73, 74, 75, 76, 80, 84, 85, 90, 93, 95, 98, 99, 101, 104, 110, 115, 121, 130, 135, 152, 154, 157, 158, 165, 183, 197, 205, 208, 211, 215, 216, 217, 220, 221, 223, 227, 228, 230, 232, 235, 236, 238, 239, 240, 245, 249, 253, 262, 291, 297, 298], "is_posit": [12, 14, 21, 22, 23, 68, 197, 211], "noth": [12, 13, 28, 48, 59, 68, 95, 128, 169, 185, 207, 211, 219, 220, 232, 236, 238, 249, 251, 259, 261, 289], "didn": [12, 95, 104, 149], "unexpect": [12, 68, 251], "side": [12, 15, 19, 21, 30, 32, 35, 49, 59, 60, 68, 80, 84, 95, 104, 108, 111, 119, 128, 133, 134, 149, 153, 173, 174, 190, 194, 195, 205, 207, 213, 215, 218, 220, 237, 239, 240, 244, 251, 253, 275, 287], "broke": 12, "revisit": [12, 143, 203], "particularli": [12, 21, 72, 95, 210, 211, 230, 297, 298], "squar": [12, 15, 21, 28, 31, 32, 37, 41, 45, 49, 59, 68, 69, 74, 84, 85, 93, 95, 99, 100, 104, 107, 108, 111, 119, 121, 147, 148, 171, 187, 195, 205, 209, 211, 213, 215, 216, 217, 220, 228, 232, 233, 236, 239, 240, 291], "root": [12, 15, 21, 23, 29, 32, 37, 41, 47, 49, 67, 68, 69, 74, 76, 90, 91, 92, 93, 95, 97, 100, 104, 108, 152, 190, 205, 207, 208, 211, 215, 217, 219, 220, 230, 232, 236, 238, 239, 240, 251, 255, 258, 291, 293, 296, 298], "radic": [12, 15, 28, 68, 69, 104, 207, 215, 216, 232, 238, 239], "adjust": [12, 133, 223, 227], "simpler": [12, 14, 22, 23, 28, 41, 68, 72, 76, 92, 93, 142, 204, 209, 213, 229, 230, 232, 236, 238, 239, 297], "delet": [12, 52, 97, 99, 104, 217, 261, 297], "rational": 12, "pycodestyl": 12, "pyflak": 12, "pollut": 12, "strip_whitepac": 12, "undefin": [12, 14, 23, 32, 35, 43, 44, 47, 68, 74, 75, 76, 95, 101, 110, 124, 134, 204, 215, 226, 227, 230, 259, 287, 298], "restrict": [12, 14, 21, 23, 30, 49, 57, 68, 69, 76, 104, 111, 112, 185, 189, 207, 210, 215, 217, 235], "cfg": [12, 213, 216], "cosmet": [12, 220], "noqa": [12, 68, 96, 211, 254], "pycqa": 12, "multipledispatch": [12, 13, 42], "dispatch": [12, 14, 43, 44, 45, 68, 69, 180, 220, 239, 255], "funcnam": [12, 252], "arg1": [12, 240], "arg2": [12, 240], "f811": [12, 68], "redefin": [12, 23, 60, 68, 133, 147, 149, 208, 259], "stylist": 12, "reus": [12, 15, 23, 49, 185, 291], "str": [12, 13, 14, 23, 43, 48, 49, 50, 60, 68, 69, 70, 72, 77, 78, 81, 84, 85, 96, 98, 101, 104, 108, 110, 117, 127, 128, 129, 130, 133, 152, 169, 179, 185, 195, 197, 199, 206, 209, 211, 215, 220, 232, 236, 240, 256, 258, 259, 261, 265], "divis": [12, 15, 23, 68, 104, 108, 128, 187, 189, 207, 209, 210, 211, 212, 213, 216, 218, 220, 233, 236, 238, 251, 259, 289, 292, 296], "gotcha": [12, 14, 16, 68, 204, 259, 290, 298], "intent": [12, 21, 49, 67, 68, 110, 209, 253], "xp": 12, "test_symbol": 12, "ever": [12, 13, 14, 23, 74, 204, 207, 216, 230, 236, 253, 256, 292], "pars": [12, 13, 60, 68, 101, 135, 146, 217, 219, 276, 284], "cleaner": [12, 123, 152, 236], "sympifi": [12, 14, 15, 21, 22, 49, 72, 78, 98, 150, 158, 183, 185, 195, 196, 210, 211, 286, 292], "count_op": [12, 15, 68, 229, 232], "truthi": 12, "forget": [12, 31, 48, 297], "coverage_report": 12, "analyz": [12, 232, 245], "littl": [12, 21, 23, 48, 60, 78, 104, 108, 109, 137, 190, 209, 214, 216, 220, 230, 232, 240, 255, 269], "slower": [12, 13, 23, 28, 33, 64, 104, 128, 209, 210, 215, 216, 259, 286], "covhtml": 12, "100": [12, 15, 23, 26, 49, 52, 57, 67, 68, 69, 72, 76, 84, 91, 98, 99, 104, 108, 111, 206, 210, 215, 217, 219, 220, 227, 238, 239, 258, 286], "defens": 12, "gone": 12, "nedbatcheld": 12, "blog": [12, 13, 23, 49, 73, 99, 233, 239], "202008": 12, "you_should_include_your_tests_in_coverag": 12, "stori": [12, 190], "guarante": [12, 18, 21, 28, 34, 49, 59, 60, 68, 80, 93, 95, 104, 133, 209, 210, 213, 215, 216, 236, 238, 239, 256, 261, 293, 297], "condit": [12, 14, 21, 22, 26, 28, 30, 49, 59, 68, 70, 74, 76, 86, 87, 90, 91, 92, 95, 98, 104, 108, 110, 111, 112, 115, 119, 125, 129, 137, 145, 149, 152, 154, 199, 205, 217, 220, 223, 230, 233, 235, 236, 238, 239, 240, 245, 297], "200710": 12, "flaws_in_coverage_measur": 12, "test_hypothesi": 12, "strategi": [12, 50, 68, 95, 213, 214, 227, 230, 232, 237], "mod": [12, 69, 73, 74, 98, 104, 105, 108, 181, 207, 209, 210, 211, 213, 215, 216, 220, 222, 230, 233], "test_modular": 12, "regex": 13, "categori": [13, 207, 276, 283], "lead": [13, 14, 21, 22, 23, 28, 37, 67, 68, 74, 78, 95, 98, 104, 108, 121, 129, 169, 195, 204, 208, 209, 211, 213, 215, 216, 217, 220, 227, 229, 232, 236, 239, 253, 256, 261, 290, 297], "w": [13, 15, 26, 37, 41, 49, 52, 58, 60, 67, 68, 69, 70, 71, 74, 76, 93, 95, 98, 104, 105, 127, 130, 133, 143, 151, 154, 159, 170, 174, 183, 194, 199, 201, 202, 205, 206, 208, 209, 213, 214, 215, 216, 217, 221, 227, 228, 230, 232, 233, 236, 237, 239, 240, 251, 259, 261, 272, 298], "pythonwarn": 13, "NOT": [13, 26, 98, 119, 165, 169, 184, 187, 249, 252], "ned": 13, "batcheld": 13, "matplotlibbackend": [13, 206], "homonym": 13, "linestyl": 13, "xy": [13, 23, 47, 48, 82, 104, 130, 195, 204, 206, 207, 213, 220, 232, 239, 275, 292, 297], "y1": [13, 35, 68, 152], "width": [13, 48, 49, 96, 200, 206, 216, 220, 251], "height": [13, 48, 49, 84, 101, 154, 206, 207, 220, 227, 275], "motiv": [13, 16, 23, 38, 216], "horizont": [13, 23, 37, 48, 78, 81, 83, 99, 113, 115, 133, 157, 206, 209, 220], "vertic": [13, 48, 52, 61, 62, 78, 79, 81, 83, 84, 85, 95, 97, 99, 104, 112, 113, 115, 133, 140, 157, 165, 205, 206, 209, 215, 220, 228, 258, 275], "bar": [13, 49, 76, 136, 145, 174, 180, 261, 282], "reinvent": 13, "wheel": [13, 137], "facilit": [13, 109, 145, 156, 202, 251], "retriev": [13, 18, 51, 66, 99, 104, 133, 216, 232, 246], "ax": [13, 28, 29, 31, 33, 41, 69, 72, 78, 81, 93, 100, 104, 111, 117, 127, 128, 134, 157, 182, 195, 204, 205, 206, 209, 217, 233, 236, 239, 241, 242, 245, 265, 267, 269, 272, 274, 297], "fig": 13, "_backend": 13, "axhlin": 13, "inertia": [13, 111, 112, 122, 123, 124, 126, 133, 135, 137, 138, 140, 142, 143, 144, 145, 152, 194, 195, 203, 204, 215, 282], "circular": [13, 15, 21, 117, 134, 157, 213], "pariti": [13, 21, 60, 216], "inertia_of_point_mass": [13, 130], "graviti": [13, 133, 135, 139, 140, 142, 144, 152, 201, 274], "subclass": [13, 14, 21, 23, 43, 44, 49, 68, 75, 79, 81, 95, 98, 131, 133, 134, 154, 160, 169, 173, 174, 175, 180, 182, 183, 189, 206, 207, 209, 210, 211, 215, 216, 220, 240, 251, 252, 253, 256, 259, 265, 269, 292], "__init_subclass__": [13, 21], "kanesmethod": [13, 127, 128, 131, 133, 135, 137, 138, 139, 140, 142, 143, 146, 147, 149, 152], "pinjoint": [13, 127, 133, 138, 140, 146], "prismaticjoint": [13, 127, 133, 140, 146], "q_": [13, 68, 127, 200, 233, 236], "u_": [13, 104, 127], "had": [13, 23, 32, 33, 60, 68, 69, 104, 108, 135, 149, 215, 216, 217, 220, 228, 230, 236, 238, 239, 254, 259, 286, 289, 292, 293], "axi": [13, 35, 41, 61, 73, 74, 78, 79, 81, 82, 84, 90, 93, 95, 101, 104, 111, 115, 117, 122, 127, 131, 133, 134, 135, 137, 139, 142, 143, 144, 146, 149, 152, 153, 154, 157, 158, 182, 195, 197, 199, 201, 203, 204, 206, 211, 239, 265, 267, 270, 272, 275], "parent_axi": [13, 127], "child_axi": [13, 127], "parent": [13, 59, 68, 91, 127, 133, 146, 195, 199, 210, 211, 215, 251, 255, 265, 269, 270], "child": [13, 14, 127, 133, 146, 195, 210, 255], "parent_interfram": [13, 127, 146], "child_interfram": [13, 127, 133, 146], "rotat": [13, 41, 56, 59, 61, 68, 77, 78, 79, 81, 83, 84, 99, 111, 112, 127, 133, 134, 137, 140, 142, 144, 146, 150, 153, 169, 182, 195, 199, 201, 203, 204, 205, 206, 258, 265, 267, 270, 272, 274], "joint_axi": [13, 127, 133, 138, 140, 146], "transform": [13, 14, 37, 41, 46, 49, 64, 67, 68, 69, 70, 72, 73, 76, 83, 101, 104, 117, 119, 127, 137, 146, 157, 178, 180, 182, 187, 205, 208, 209, 211, 213, 215, 216, 222, 227, 228, 229, 232, 233, 235, 236, 237, 238, 239, 240, 242, 245, 253, 259, 265, 272, 291], "pin": [13, 41, 111, 112, 115, 127, 133], "dcm": [13, 124, 127, 135, 137, 152, 195, 203, 204, 265], "q_pin": [13, 133], "theta_pin": 13, "rad": [13, 69, 117, 135, 215], "int_fram": 13, "orient_axi": [13, 124, 127, 195, 197], "align": [13, 49, 78, 104, 127, 134, 204, 205, 220, 238, 251], "orient": [13, 41, 80, 84, 99, 127, 135, 137, 139, 142, 146, 150, 152, 195, 199, 201, 203, 204, 213, 258, 265, 266, 273, 274, 280], "parent_joint_po": [13, 127], "child_joint_po": [13, 127], "parent_point": [13, 127, 138, 140, 146], "child_point": [13, 127, 133, 138, 140, 146], "mass": [13, 26, 85, 121, 122, 123, 124, 127, 128, 130, 133, 135, 137, 138, 139, 140, 142, 144, 145, 146, 147, 148, 152, 153, 161, 186, 188, 189, 190, 201, 203, 251, 274, 282], "pos_from": [13, 127, 130, 131, 133, 134, 135, 137, 138, 139, 146, 152, 199, 203], "masscent": [13, 124, 127, 130, 133, 138, 146, 150, 152], "parent_fram": [13, 146], "child_fram": [13, 146], "locatenew": [13, 124, 130, 137, 139, 142, 143, 144, 149, 150, 152, 153, 196, 199, 201, 203], "conflict": [13, 74, 108, 119, 135, 253], "comprehens": [13, 21, 26, 32, 33, 35, 214, 228, 240, 286], "additional_transl": 13, "recogn": [13, 15, 28, 33, 35, 68, 69, 73, 83, 108, 111, 120, 208, 211, 219, 228, 229, 238, 245, 289], "node": [13, 14, 47, 62, 68, 95, 110, 115, 125, 161, 186, 195, 205, 210, 220, 227, 239, 244, 255, 259, 292, 296], "maximum": [13, 15, 32, 33, 47, 49, 50, 59, 60, 68, 74, 95, 104, 108, 111, 137, 182, 190, 206, 211, 213, 216, 220, 227, 228, 232, 233, 236, 239, 240, 255, 258], "multipli": [13, 15, 33, 41, 45, 49, 59, 68, 79, 83, 90, 97, 99, 104, 108, 128, 129, 139, 148, 149, 162, 171, 185, 190, 191, 194, 207, 208, 209, 211, 213, 215, 216, 220, 222, 229, 230, 233, 236, 241, 258, 269, 289, 292], "max": [13, 49, 59, 60, 68, 74, 76, 78, 104, 108, 110, 111, 205, 206, 215, 216, 220, 227, 229, 230, 259], "min": [13, 60, 64, 68, 73, 74, 104, 110, 205, 206, 215, 220, 226, 236, 258], "is_perfect_squar": 13, "ntheori": [13, 45, 59, 68, 69, 213, 216, 233, 258], "primetest": [13, 68, 108], "is_squar": [13, 68, 99, 108, 209, 211], "is_prim": [13, 21, 68, 207], "isprim": [13, 45, 69, 108], "divid": [13, 14, 59, 67, 68, 69, 84, 104, 108, 128, 129, 189, 190, 208, 209, 210, 211, 213, 215, 216, 220, 236, 255, 292], "bottom_up": [13, 68], "interactive_travers": 13, "postorder_travers": [13, 68, 292], "preorder_travers": [13, 68, 292], "refactor": [13, 236, 244, 255], "tr": [13, 50, 59, 220, 229], "quantum": [13, 27, 121, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 205, 282], "default_sort_kei": [13, 48, 57, 68, 244], "matrixel": [13, 49], "matrixsymbol": [13, 18, 21, 33, 45, 46, 49, 68, 99, 101, 104, 220, 240, 242], "layer": [13, 119, 213, 259], "imprecis": 13, "free_symbol": [13, 14, 31, 49, 68, 77, 95, 99, 174, 192, 195, 216, 226, 233], "atomicexpr": [13, 68], "concept": [13, 14, 21, 59, 137, 204, 210, 212, 215, 220, 239, 244, 274, 290, 295], "misappli": 13, "introduc": [13, 22, 31, 64, 67, 68, 76, 93, 104, 109, 112, 135, 137, 142, 143, 144, 148, 185, 190, 204, 211, 212, 216, 217, 220, 227, 230, 233, 240, 256, 283, 290, 293, 295, 297], "21494": 13, "size": [13, 19, 33, 49, 50, 52, 57, 59, 60, 61, 62, 63, 64, 68, 69, 71, 73, 96, 99, 101, 104, 107, 108, 117, 137, 147, 148, 149, 158, 180, 181, 200, 206, 209, 213, 220, 232, 233, 236, 240, 258, 287], "die": [13, 215, 240], "histor": [13, 14, 17, 23, 69, 209, 236, 240], "21563": 13, "revert": [13, 211, 216], "sample_it": [13, 240], "domainmatrix": [13, 33, 100, 104, 212, 215, 218, 283], "21402": 13, "earlier": [13, 123, 217, 221, 230, 232, 259, 270, 272, 292], "unsupport": [13, 15, 18, 119, 210, 211, 215, 220], "operand": [13, 15, 60, 68, 196, 210, 211, 215, 268], "dict": [13, 15, 17, 21, 28, 31, 32, 36, 37, 49, 51, 60, 68, 69, 70, 84, 85, 98, 99, 104, 108, 110, 128, 129, 165, 177, 180, 191, 193, 195, 206, 209, 210, 211, 213, 215, 216, 217, 218, 220, 232, 233, 236, 237, 238, 239, 240, 244, 251, 252, 258, 265, 298], "smith_normal_form": [13, 105, 209], "newmatrix": 13, "holonom": [13, 89, 92, 128, 133, 136, 137, 138, 139, 145, 147, 148, 276, 282, 283], "polymatrix": 13, "risch": [13, 95, 287], "20780": 13, "20759": 13, "20621": 13, "19882": 13, "18844": 13, "21441": 13, "21427": 13, "21496": 13, "potenti": [13, 21, 80, 101, 104, 108, 128, 130, 133, 144, 145, 196, 202, 209, 210, 215, 220, 227, 230, 232, 236, 254, 255, 268, 274, 282], "impact": 13, "downstream": [13, 21], "goal": [13, 14, 48, 123, 153, 215, 217, 251, 252, 254, 290, 291], "tableform": [13, 238, 261], "usecas": 13, "line2dbaseseri": [13, 206], "linecollect": [13, 206], "bokeh": 13, "plotli": 13, "mayavi": 13, "k3d": 13, "get_point": [13, 206], "uniformli": [13, 19, 59, 84, 85, 108, 111, 113, 117, 206, 254], "adapt": [13, 117, 206, 226, 238, 258, 264], "get_data": [13, 206, 262], "dft": [13, 71, 122], "fourier": [13, 68, 76, 95, 122, 178, 224, 277], "as_explicit": [13, 33, 101, 104, 122, 241, 242], "discret": [13, 47, 49, 50, 58, 60, 68, 69, 76, 108, 119, 185, 190, 206, 222, 225, 236, 238, 239, 277, 286], "represent": [13, 14, 23, 28, 32, 41, 48, 49, 50, 51, 59, 62, 68, 69, 74, 76, 80, 88, 90, 92, 93, 95, 97, 98, 99, 100, 101, 107, 108, 116, 117, 122, 123, 124, 133, 145, 149, 154, 169, 174, 179, 180, 182, 183, 185, 187, 194, 200, 201, 203, 206, 207, 209, 211, 213, 215, 216, 217, 218, 219, 220, 222, 230, 232, 233, 236, 239, 240, 245, 246, 259, 261, 265, 268, 275, 283, 287, 289, 292], "21626": 13, "expos": [13, 48, 240], "mutat": [13, 119, 209, 211, 240], "flat": [13, 82, 99, 209, 252], "todok": [13, 99], "ey": [13, 33, 99, 100, 101, 102, 103, 104, 106, 209, 215, 241, 261, 293], "converg": [13, 49, 67, 72, 76, 95, 108, 154, 216, 223, 227, 230, 287], "legacy_matrix": [13, 95], "discontinu": [13, 47, 72, 74, 95, 111, 223, 238], "theano_cod": 13, "aesara_cod": [13, 220], "theanoprint": 13, "aesaraprint": [13, 220], "predic": [13, 14, 42, 43, 47, 110, 216, 232, 258, 277], "big": [13, 15, 19, 21, 52, 68, 70, 108, 152, 165, 205, 219, 220, 227, 242, 261, 287, 289], "registr": 13, "add_handl": 13, "remove_handl": [13, 42], "regist": [13, 42, 43, 44, 69, 181], "register_mani": [13, 43, 44], "askprimehandl": 13, "staticmethod": [13, 251], "register_handl": [13, 42], "prime": [13, 21, 35, 42, 43, 44, 45, 59, 66, 67, 68, 69, 71, 73, 76, 108, 156, 207, 208, 209, 210, 211, 213, 216, 230, 232, 233, 240, 255], "Not": [13, 14, 22, 23, 33, 68, 73, 98, 119, 220, 239, 240, 258, 291, 298], "primepred": [13, 45], "q": [13, 14, 15, 18, 21, 29, 31, 40, 41, 42, 43, 44, 45, 46, 49, 60, 64, 67, 68, 69, 76, 85, 90, 91, 93, 95, 97, 99, 104, 110, 111, 113, 119, 120, 127, 128, 129, 131, 133, 134, 135, 137, 139, 144, 146, 147, 148, 149, 152, 153, 154, 165, 179, 185, 188, 195, 196, 197, 199, 200, 201, 203, 206, 207, 208, 210, 211, 213, 215, 216, 217, 219, 220, 222, 230, 233, 236, 238, 240, 245, 246, 261, 265, 268, 269, 271, 274, 293, 297], "20209": 13, "stochast": 13, "timestamp": 13, "wienerprocess": [13, 240], "normaldistribut": [13, 240], "20078": 13, "misspel": 13, "absorbing_prob": [13, 240], "absorb": [13, 14, 93, 236, 240, 287], "probabilit": 13, "shutil": 13, "power": [13, 15, 30, 35, 41, 46, 49, 58, 59, 60, 69, 71, 72, 73, 74, 90, 91, 93, 95, 97, 99, 101, 108, 109, 119, 135, 152, 157, 168, 171, 184, 187, 189, 190, 191, 195, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 219, 220, 221, 224, 227, 229, 232, 233, 236, 238, 239, 240, 244, 253, 258, 277, 286, 287, 288, 289, 290, 292, 293, 296], "immut": [13, 14, 68, 100, 103, 106, 204, 211, 236, 241, 280, 286, 293], "coordsystem": [13, 70], "patch": [13, 70, 220], "manifold": [13, 70], "coord_system": 13, "connect_to": 13, "coord_tuple_transform_to": [13, 70], "constructor": [13, 14, 23, 43, 44, 48, 49, 55, 59, 60, 61, 68, 75, 76, 97, 102, 104, 139, 178, 179, 183, 187, 206, 207, 209, 210, 211, 220, 228, 236, 245, 253, 269, 277, 288, 292], "unord": [13, 15, 68, 108, 211, 239, 258, 259], "lambidfi": 13, "guess": [13, 17, 48, 69, 72, 93, 96, 200, 213, 216, 230, 233, 292], "construct": [13, 19, 26, 30, 41, 43, 44, 48, 49, 51, 68, 70, 74, 76, 78, 82, 84, 96, 101, 104, 109, 112, 119, 123, 124, 128, 130, 131, 133, 135, 137, 170, 174, 183, 184, 187, 191, 207, 209, 210, 211, 213, 215, 216, 220, 233, 238, 240, 241, 245, 253, 255, 256, 269, 271, 272, 289, 292, 293, 297], "superclass": [13, 14, 21, 67, 95, 101, 211], "scalar": [13, 34, 41, 68, 70, 83, 97, 99, 101, 104, 109, 119, 130, 135, 184, 195, 196, 197, 202, 204, 207, 209, 213, 220, 236, 241, 253, 259, 265, 267, 268, 269, 270, 271, 273, 275, 280, 282], "quantiti": [13, 15, 60, 68, 73, 76, 80, 85, 112, 123, 128, 143, 150, 164, 187, 189, 193, 194, 201, 203, 204, 215, 232, 240, 269, 274, 282], "boolean": [13, 14, 23, 24, 30, 35, 42, 43, 44, 45, 46, 47, 49, 68, 74, 78, 82, 83, 84, 85, 96, 99, 104, 105, 108, 111, 117, 119, 128, 133, 170, 195, 197, 200, 206, 209, 211, 213, 215, 217, 220, 232, 236, 238, 240, 258, 268, 293], "sens": [13, 14, 19, 21, 23, 41, 45, 47, 48, 68, 70, 73, 76, 93, 98, 128, 131, 134, 137, 190, 195, 204, 207, 213, 215, 229, 230, 232, 239, 240, 252, 253, 258, 274, 297], "exponenti": [13, 15, 21, 35, 41, 49, 59, 64, 68, 69, 73, 95, 98, 99, 104, 108, 110, 171, 187, 217, 232, 236, 239, 240, 288, 289, 293], "treat": [13, 14, 21, 22, 23, 31, 35, 36, 41, 58, 59, 66, 68, 73, 76, 83, 84, 104, 110, 135, 158, 195, 201, 208, 210, 211, 213, 215, 216, 217, 219, 220, 227, 228, 230, 232, 233, 236, 238, 244, 252, 255, 272, 289, 293], "cdot": [13, 21, 26, 50, 67, 73, 76, 86, 90, 91, 93, 99, 101, 104, 108, 120, 122, 134, 150, 190, 194, 201, 203, 204, 205, 207, 208, 216, 223, 227, 230, 236, 238, 241, 242, 258, 271, 272, 291, 292, 297], "attributeerror": [13, 21, 68, 104, 239, 259, 293], "as_coeff_mul": [13, 68, 93, 101], "tri": [13, 14, 15, 21, 30, 32, 35, 48, 68, 76, 84, 93, 95, 137, 149, 180, 207, 208, 215, 220, 222, 232, 236, 237, 239, 251, 289, 297], "benchmark": [13, 137, 151], "tmpfile": 13, "random_complex_numb": [13, 68], "verify_numer": [13, 68], "test_derivative_numer": [13, 68], "_randrang": [13, 68, 69], "_randint": [13, 68, 213], "as_poli": [13, 68, 208, 216], "as_expr": [13, 68, 104, 209, 210, 215, 216, 217, 293], "combintor": 13, "perm_cycl": [13, 60, 220], "init_print": [13, 28, 33, 39, 49, 60, 72, 95, 96, 104, 112, 200, 207, 208, 219, 287, 291, 293, 296, 297, 298], "problemat": [13, 23, 210], "18056": 13, "15416": 13, "100x": 13, "slowdown": [13, 72], "significantli": [13, 33, 49, 72, 123, 147, 211, 222, 252, 255], "_sympifi": [13, 68, 101, 292], "strict": [13, 14, 28, 59, 60, 68, 72, 73, 99, 104, 110, 133, 213, 216, 238, 239, 258, 261, 297], "whatev": [13, 15, 23, 59, 68, 69, 232, 236, 237, 239, 259], "__repr__": [13, 220], "12524": 13, "repr": [13, 49, 95, 179, 210, 215, 220, 251, 296], "plenti": 13, "_sympy_": [13, 68], "lh": [13, 17, 30, 35, 49, 58, 68, 218, 220, 236, 238, 239, 271], "rh": [13, 17, 30, 33, 35, 49, 58, 60, 68, 99, 100, 104, 127, 128, 133, 135, 142, 143, 144, 209, 218, 220, 222, 236, 238, 239, 271], "tensexpr": [13, 120, 246], "substitute_indic": 13, "danger": [13, 208], "tensor_head": [13, 120, 246], "shorter": [13, 37, 68, 78, 123, 147, 194, 207, 211, 220, 253, 261], "creation": [13, 15, 23, 68, 70, 104, 124, 130, 142, 145, 146, 147, 148, 149, 159, 169, 173, 174, 175, 185, 203, 204, 220, 240, 245, 253, 259], "_dummy_fmt": 13, "l_": [13, 95, 104, 205], "obsolet": 13, "dummy_nam": [13, 246], "metric_symmetri": [13, 246], "set_metr": [13, 246], "delta": [13, 15, 49, 52, 62, 73, 91, 93, 97, 117, 149, 157, 185, 205, 209, 220, 227, 233, 236, 240, 241, 246], "epsilon": [13, 15, 67, 69, 76, 93, 95, 156, 220, 246], "latter": [13, 18, 23, 49, 59, 68, 73, 76, 93, 108, 207, 211, 215, 220, 230, 233, 246, 253, 258, 259, 289], "obscur": [13, 21], "young": [13, 111, 246], "tableau": 13, "favor": 13, "tensorindex": [13, 246], "tensor_indic": [13, 120, 246], "denot": [13, 14, 15, 19, 59, 60, 68, 70, 76, 90, 91, 93, 95, 97, 98, 99, 104, 108, 110, 115, 119, 134, 190, 195, 201, 206, 207, 208, 213, 215, 223, 227, 228, 230, 236, 240, 245, 246, 265, 267, 269, 270, 272, 274], "emptyset": [13, 21, 32, 47, 48, 98, 220, 228, 239, 265, 298], "is_empti": [13, 21, 60], "unknown": [13, 14, 18, 21, 22, 23, 26, 33, 35, 36, 41, 68, 69, 112, 170, 209, 218, 235, 236, 237, 238, 239, 258, 298], "empti": [13, 14, 21, 28, 31, 32, 36, 43, 47, 48, 49, 50, 59, 63, 67, 68, 80, 83, 84, 85, 98, 99, 104, 108, 128, 129, 149, 180, 193, 211, 215, 216, 220, 226, 227, 228, 230, 236, 238, 239, 251, 253, 258, 261, 292], "denest": [13, 68, 216, 232, 238, 258], "particl": [13, 124, 127, 128, 130, 133, 135, 139, 140, 145, 147, 149, 152, 153, 161, 164, 171, 172, 183, 185, 188, 190, 203, 246, 282], "rigidbodi": [13, 124, 127, 128, 130, 133, 137, 142, 143, 144, 150, 152], "potential_energi": [13, 127, 128, 130, 133, 144, 150], "energi": [13, 27, 121, 124, 128, 130, 135, 144, 161, 186, 190, 201, 246, 272, 282], "setter": [13, 135, 152], "getter": [13, 68, 135, 152], "set_": 13, "set_condit": 13, "17749": 13, "unpack": [13, 68, 99, 104, 258, 259], "emul": [13, 232, 239, 241, 259], "is_deriv": [13, 68], "as_finite_differ": [13, 47, 68, 287], "17881": 13, "get_matrix": [13, 246], "__getitem__": [13, 68, 99, 209, 245], "__iter__": [13, 60, 68, 232], "_components_data_full_destroi": 13, "__pow__": [13, 99, 211, 217], "flaw": 13, "replace_with_arrai": [13, 246, 247], "throughout": [14, 93, 98, 209, 213, 223, 239, 274, 289], "elsewher": [14, 21, 73, 97, 209, 251], "termnam": 14, "antideriv": [14, 74, 76, 95, 236, 287], "frac": [14, 19, 21, 23, 26, 28, 29, 33, 35, 47, 67, 68, 69, 70, 73, 74, 76, 93, 95, 104, 108, 110, 119, 139, 150, 188, 200, 201, 203, 204, 205, 209, 211, 213, 216, 220, 222, 223, 227, 230, 233, 236, 237, 239, 240, 241, 258, 272, 274, 287, 291, 292, 296, 297], "primit": [14, 59, 68, 69, 76, 108, 179, 183, 207, 208, 209, 210, 211, 213, 215, 216, 219, 220, 233, 287], "terminologi": [14, 29, 246], "tupl": [14, 23, 31, 34, 35, 36, 41, 43, 44, 47, 48, 49, 50, 59, 60, 67, 68, 69, 70, 74, 75, 76, 77, 78, 79, 81, 83, 84, 85, 90, 93, 95, 99, 104, 107, 108, 110, 111, 112, 113, 115, 117, 124, 127, 128, 130, 131, 133, 147, 148, 150, 152, 154, 169, 170, 171, 174, 179, 182, 183, 184, 185, 195, 199, 204, 206, 207, 209, 210, 211, 213, 217, 218, 220, 221, 222, 226, 228, 232, 233, 236, 237, 238, 239, 240, 241, 245, 246, 251, 252, 253, 254, 258, 259, 261, 265, 269, 287, 292, 293, 296], "subexpress": [14, 23, 49, 68, 74, 99, 123, 125, 215, 216, 220, 227, 232, 239, 253, 259, 286], "togeth": [14, 19, 49, 59, 68, 72, 97, 104, 108, 145, 171, 182, 190, 204, 207, 211, 213, 215, 216, 219, 220, 232, 236, 238, 240, 251, 252, 258, 291, 297], "walk": [14, 49, 52, 68, 177, 180, 230], "extract": [14, 28, 32, 36, 37, 47, 68, 95, 99, 101, 104, 108, 120, 137, 145, 150, 204, 209, 213, 215, 216, 238, 239, 240, 251, 253, 258], "rebuilt": [14, 292], "atom": [14, 30, 49, 60, 68, 95, 98, 99, 121, 186, 210, 217, 220, 238, 239, 245], "queri": [14, 21, 22, 23, 42, 45, 46, 47, 49, 68, 80, 216, 232, 240], "is_": [14, 23, 68], "recurs": [14, 15, 18, 21, 23, 47, 68, 73, 93, 95, 98, 99, 108, 137, 206, 213, 216, 217, 220, 221, 225, 227, 232, 238, 239, 244, 249, 251, 255, 256, 258, 288, 297], "canonic": [14, 55, 68, 229, 246, 277], "excess": 14, "discourag": [14, 21, 68, 232], "expens": [14, 23, 35, 68, 149, 229, 236, 237, 238, 254, 293], "matrix": [14, 18, 19, 21, 26, 29, 34, 36, 41, 49, 57, 60, 68, 69, 70, 76, 83, 93, 95, 97, 99, 100, 102, 103, 106, 107, 109, 110, 119, 120, 122, 124, 127, 128, 129, 130, 133, 135, 137, 138, 139, 140, 142, 143, 144, 146, 147, 148, 150, 152, 153, 154, 157, 158, 160, 168, 169, 174, 179, 180, 182, 184, 185, 187, 190, 195, 204, 205, 207, 209, 213, 215, 218, 220, 221, 228, 230, 232, 233, 236, 238, 239, 241, 242, 244, 245, 246, 247, 252, 253, 258, 259, 261, 265, 267, 268, 270, 274, 280, 288, 291, 292, 297, 298], "bound": [14, 30, 45, 49, 50, 67, 68, 77, 78, 79, 81, 83, 84, 95, 108, 130, 183, 206, 209, 211, 213, 215, 216, 220, 226, 236, 238, 239, 240, 245, 255, 261, 265], "dummi": [14, 49, 64, 67, 68, 74, 93, 95, 104, 135, 152, 180, 185, 206, 210, 211, 215, 216, 217, 226, 227, 228, 230, 232, 236, 239, 244, 246, 249, 253, 258, 259], "unequ": [14, 17, 68, 111, 220], "clash": [14, 40, 68, 104], "_eval_": 14, "_eval_deriv": [14, 23, 68, 76], "overrid": [14, 15, 49, 68, 77, 78, 84, 110, 183, 209, 220, 245, 252, 253, 258, 259], "pre": [14, 41, 48, 49, 68, 205, 206, 221, 229, 232, 238, 239, 251, 270, 274, 292], "shorthand": [14, 15, 21, 23, 68, 98, 179, 215, 228, 249], "reserv": [14, 21, 135, 246, 253, 293], "smaller": [14, 49, 59, 60, 68, 69, 73, 76, 84, 95, 101, 108, 147, 208, 209, 210, 213, 216, 223, 229, 230, 238, 258, 286, 297], "children": [14, 68, 69, 210, 255], "leaf": [14, 210, 220, 229, 292], "strictli": [14, 15, 18, 20, 21, 45, 47, 68, 76, 104, 108, 119, 211, 213, 232, 238, 259], "dag": 14, "rebuild": [14, 23, 68, 216, 292], "colloqui": [14, 29], "hyper": [14, 68, 73, 76, 87, 90, 220, 222, 230, 232, 238, 240, 297], "primepi": [14, 23, 108], "divisor_sigma": [14, 108], "interchang": [14, 64, 67, 93, 236], "mental": 14, "hashabl": [14, 65, 93, 258], "repl": [14, 246], "intermedi": [14, 49, 50, 91, 99, 127, 135, 137, 142, 146, 169, 179, 187, 188, 195, 199, 203, 239, 253, 294], "idiom": [14, 262, 289, 290], "frown": 14, "lowercas": [14, 15, 41, 236, 251, 287], "is_integ": [14, 21, 23, 68, 197, 220, 245], "capit": [14, 67, 69, 119, 236], "wherea": [14, 19, 21, 28, 33, 45, 49, 69, 78, 84, 93, 98, 119, 190, 207, 210, 216, 220, 238, 239, 258, 297], "is_capit": 14, "unneed": 14, "achiev": [14, 15, 23, 68, 72, 76, 101, 108, 135, 152, 219, 227, 230, 232, 239, 242, 254, 270], "isinst": [14, 18, 21, 23, 49, 68, 99, 101, 119, 210, 211, 220, 221, 232, 241, 244, 253, 292], "ship": [14, 109], "numberkind": [14, 18, 68, 99, 228], "matrixkind": [14, 18, 68, 99, 228], "booleankind": [14, 68], "ring": [14, 28, 71, 91, 104, 105, 203, 208, 209, 213, 215, 216, 217, 218, 219, 220, 258], "classif": [14, 20, 68, 236, 237], "lamda": [14, 101, 220, 228, 240, 293], "\u03bb": [14, 293], "lambdifi": [14, 23, 34, 35, 49, 76, 137, 220, 238, 252, 257, 284, 288], "matrixexpr": [14, 23, 99, 101, 102], "mutabl": [14, 15, 50, 68, 100, 101, 102, 111, 211, 220, 221, 232, 241, 293], "dens": [14, 99, 101, 103, 104, 209, 215, 216, 241, 259, 280, 292], "quit": [14, 19, 23, 76, 104, 108, 137, 203, 206, 217, 219, 230, 238, 258, 274, 289, 292], "rung": [14, 47, 90], "kutta": [14, 90], "loss": [14, 49, 93, 185, 252, 271], "stabil": [14, 59, 64, 66, 72, 119, 149, 244], "focus": [14, 34, 213, 233, 235, 236, 238, 239, 298], "is_numb": [14, 21, 68, 76, 95], "infin": [14, 21, 30, 45, 67, 68, 73, 74, 76, 81, 93, 95, 104, 158, 211, 213, 216, 220, 225, 226, 227, 228, 232, 235, 236, 240], "resembl": [14, 70, 76, 95, 245], "zoo": [14, 17, 21, 45, 68, 73, 74, 76, 95, 227, 229, 232], "data": [14, 19, 49, 59, 68, 69, 76, 95, 104, 109, 117, 128, 164, 206, 207, 209, 210, 211, 213, 216, 217, 220, 232, 245, 246, 251, 253, 255, 258, 262], "effici": [14, 19, 21, 28, 33, 41, 47, 49, 52, 59, 64, 68, 71, 72, 73, 84, 85, 101, 104, 108, 109, 119, 127, 128, 152, 205, 208, 209, 210, 211, 213, 216, 217, 218, 219, 232, 233, 238, 252, 259, 286, 292, 293, 297], "inequ": [14, 21, 22, 23, 29, 68, 206, 213, 228, 230, 234, 277], "neq": [14, 23, 68, 74, 76, 93, 95, 99, 108, 190, 204, 205, 213, 216, 233, 236, 238, 297], "ne": [14, 17, 21, 68, 69, 73, 74, 81, 93, 104, 108, 208, 210, 213, 230, 236, 240], "hold": [14, 15, 23, 44, 48, 59, 64, 68, 69, 70, 74, 76, 90, 93, 104, 107, 110, 119, 121, 127, 129, 130, 150, 181, 216, 230, 232, 236, 240, 253, 297], "singleton": [14, 60, 98, 239, 292], "adject": [14, 240], "heurist": [14, 21, 35, 60, 93, 95, 99, 213, 214, 227, 229, 232, 238, 239, 251, 287, 297], "commut": [14, 21, 41, 45, 48, 59, 60, 64, 68, 70, 91, 95, 104, 162, 169, 172, 173, 174, 184, 185, 190, 197, 204, 208, 209, 211, 212, 213, 214, 216, 220, 227, 228, 230, 236, 246, 282, 283, 292], "law": [14, 48, 145, 188, 204, 208, 240], "xreplac": [14, 68, 99, 104, 195], "knowledg": [14, 67, 68, 69, 215, 236, 292, 295], "round": [14, 23, 34, 47, 49, 68, 72, 73, 74, 104, 158, 209, 211, 215, 216, 227, 229, 240], "analyt": [14, 39, 73, 76, 93, 104, 131, 145, 236, 287], "implicitli": [14, 21, 22, 23, 60, 68, 95, 207, 210, 238], "independ": [14, 15, 23, 33, 45, 47, 49, 59, 67, 68, 70, 76, 85, 93, 95, 97, 104, 119, 128, 129, 133, 135, 137, 139, 147, 149, 183, 190, 201, 206, 208, 210, 215, 216, 222, 223, 230, 232, 233, 236, 237, 238, 239, 240, 246, 251, 252, 272, 291, 292], "parsabl": 14, "iter": [14, 28, 31, 32, 33, 37, 47, 49, 57, 59, 60, 63, 64, 68, 69, 70, 71, 73, 76, 84, 98, 108, 124, 125, 127, 128, 129, 130, 133, 149, 153, 170, 185, 199, 206, 207, 208, 209, 211, 213, 216, 220, 221, 222, 223, 226, 232, 233, 236, 238, 239, 240, 241, 244, 252, 253, 254, 255, 257, 259, 265, 270, 284], "fuzzi": [14, 21, 23, 24], "noncomput": 14, "philosoph": 14, "OR": [14, 47, 71, 98, 213], "unevaluatedexpr": [14, 68, 220, 292], "surpris": [14, 21, 239], "north": 14, "riemann": [14, 70, 73, 74, 93, 207, 232, 246], "sphere": [14, 134, 157, 265, 275], "behav": [15, 45, 47, 68, 69, 74, 76, 108, 216, 228, 232, 238, 241, 247, 293], "mapl": [15, 95, 209, 236, 291], "mathematica": [15, 49, 60, 110, 291, 293], "introductori": [15, 19, 38, 39, 152, 210, 211, 216], "remaind": [15, 67, 68, 69, 108, 208, 210, 211, 214, 216, 236], "offici": [15, 25, 39, 68, 123, 152, 194, 204, 239, 259, 295], "java": 15, "subtract": [15, 32, 41, 49, 60, 68, 72, 83, 108, 119, 127, 187, 208, 209, 210, 211, 213, 215, 216, 292, 297], "proper": [15, 59, 68, 95, 108, 123, 135, 194, 210, 211, 215, 220, 228, 236, 241, 252, 253, 272, 293], "glossari": [15, 16], "alter": [15, 50, 59, 68, 195, 210, 220, 222, 239], "afterward": [15, 49, 68, 130, 139], "simultan": [15, 68, 74, 81, 99, 108, 206, 229], "var": [15, 26, 31, 47, 49, 67, 68, 72, 73, 91, 95, 98, 104, 119, 195, 206, 215, 219, 220, 232, 233, 259, 298], "rate": [15, 137, 203, 240, 272, 287], "short_lif": 15, "haven": 15, "160": [15, 111, 214], "ctimesd": 15, "relationship": [15, 17, 21, 49, 68, 73, 75, 95, 108, 133, 146, 169, 195, 201, 204, 210, 238], "runtimeerror": [15, 47, 49, 228, 239, 258], "compileflag": [15, 251], "glob": [15, 251], "exceed": [15, 137, 215], "stdin": [15, 254, 256], "nameerror": [15, 96, 254, 289], "__future__": [15, 19, 289, 296], "cl": [15, 21, 23, 35, 49, 59, 68, 95, 99, 185, 199, 211, 215, 236, 245, 254, 258, 271, 287, 296, 298], "dir": [15, 68, 111, 222, 227, 258], "__builtins__": 15, "__file__": [15, 262], "__name__": [15, 220, 262], "__package__": 15, "_greek": 15, "_latin": 15, "chi": [15, 76, 93, 157, 220, 230, 236, 240, 246], "eta": [15, 76, 93, 215, 220, 236, 237, 240], "iota": [15, 220], "kappa": [15, 205, 220, 240], "mu": [15, 76, 93, 108, 120, 122, 156, 220, 240, 246], "omega": [15, 49, 50, 59, 93, 104, 108, 124, 130, 133, 150, 153, 159, 161, 186, 195, 199, 200, 203, 205, 220, 227, 240], "omicron": [15, 220], "phi": [15, 59, 68, 69, 73, 76, 93, 97, 104, 108, 121, 152, 159, 168, 170, 205, 207, 215, 220, 236, 265, 275], "psi": [15, 73, 76, 93, 157, 168, 169, 175, 183, 215, 220, 246], "rho": [15, 70, 93, 104, 108, 138, 179, 220, 240, 246, 275], "sigma": [15, 60, 91, 93, 99, 104, 220, 223, 240], "tau": [15, 49, 93, 95, 104, 215, 220, 236], "theta": [15, 41, 68, 70, 74, 76, 93, 96, 104, 110, 121, 133, 153, 157, 195, 204, 205, 211, 215, 220, 223, 228, 239, 240, 265, 267, 270, 272, 275], "upsilon": [15, 220], "xi": [15, 23, 70, 93, 220, 236, 237, 238], "lastli": [15, 95, 112, 153, 236], "unit": [15, 23, 26, 27, 41, 45, 48, 68, 69, 73, 81, 82, 83, 95, 104, 108, 111, 113, 117, 119, 121, 122, 127, 131, 133, 134, 135, 150, 152, 161, 186, 187, 188, 192, 194, 195, 201, 204, 206, 208, 209, 211, 213, 215, 216, 218, 220, 228, 230, 233, 239, 241, 265, 267, 269, 274, 275, 282], "mnemon": [15, 229, 258], "osineq": 15, "reimport": 15, "restor": [15, 210, 232], "__": [15, 76, 95, 220, 240, 245], "press": [15, 48, 50, 52, 60, 69, 95, 99, 205, 214, 233, 238], "autocomplet": 15, "lose": [15, 207, 209], "abil": [15, 21, 47, 104, 145, 215, 219, 236, 239, 291, 297], "f1": [15, 34, 59, 93, 95, 104, 119, 124, 135, 143, 152, 206, 211, 213, 216, 220, 222, 238], "f2": [15, 34, 68, 93, 104, 119, 124, 135, 143, 152, 188, 206, 213, 216, 220, 222, 238], "accuraci": [15, 19, 47, 68, 209, 216, 293], "2000000000000002": 15, "py3k": 15, "20000000000000": 15, "sympyifi": 15, "worri": [15, 68, 292], "142857142857143": 15, "receiv": [15, 37, 51, 68, 69, 108, 124, 180, 215, 245], "fraction": [15, 68, 69, 72, 74, 84, 95, 104, 108, 125, 191, 209, 210, 211, 213, 214, 217, 220, 222, 232, 233, 236, 238, 288], "interpret": [15, 22, 35, 37, 49, 59, 67, 68, 73, 74, 76, 81, 84, 95, 99, 101, 104, 108, 110, 123, 190, 206, 208, 215, 216, 220, 227, 233, 238, 239, 240, 245, 251, 252, 255, 261, 293], "000000000000": 15, "00": [15, 68, 108, 169, 179, 233, 258], "null": [15, 68, 104], "34": [15, 49, 60, 73, 81, 104, 108, 124, 167, 214, 219, 226, 232, 233], "3400000000000": 15, "250": [15, 108, 233], "143": [15, 129, 164, 205], "decim": [15, 23, 49, 68, 71, 72, 108, 110, 117, 210, 216, 291], "142857": 15, "25000000000000000000": 15, "14285278320312500000": 15, "realiz": [15, 51, 53, 59, 70, 98, 108, 139, 207, 208, 213, 240], "pad": [15, 49, 69, 70, 71, 83, 108], "inexact": [15, 37, 68, 209, 211], "low": [15, 21, 22, 49, 68, 69, 76, 108, 128, 210, 213, 218, 220, 232, 252, 253, 258], "higher": [15, 19, 28, 47, 49, 68, 70, 72, 76, 79, 104, 199, 205, 207, 209, 210, 213, 216, 222, 223, 227, 229, 232, 236, 238, 241, 259, 287], "engin": [15, 113, 115, 151, 152, 202, 236, 296], "increas": [15, 33, 47, 48, 60, 66, 67, 68, 71, 72, 76, 99, 108, 109, 123, 133, 136, 169, 194, 195, 197, 203, 204, 210, 213, 215, 216, 222, 225, 229, 236, 240, 256, 258], "2000061035": 15, "highest": [15, 49, 62, 97, 123, 207, 216, 223, 233, 236], "hopefulli": [15, 20, 93], "unsimplifi": [15, 229], "12345678901234567890": 15, "big_trig_ident": 15, "ab": [15, 46, 49, 50, 67, 68, 69, 72, 73, 74, 76, 80, 81, 91, 93, 98, 99, 104, 115, 121, 152, 185, 208, 211, 215, 216, 220, 233, 235, 238, 239, 240, 242, 246, 255, 258, 261, 271, 297], "1000": [15, 49, 52, 68, 69, 72, 101, 108, 152, 189, 190, 191, 192, 205, 219, 220, 229, 259], "gave": [15, 68, 258], "impress": 15, "91": [15, 50, 214, 219, 226, 240], "4e": [15, 49, 238], "nearli": [15, 108, 229], "snippet": [15, 49], "expr_modifi": 15, "__main__": [15, 49, 293], "declar": [15, 21, 32, 49, 81, 93, 104, 110, 120, 135, 137, 152, 164, 209, 220, 227, 230, 235, 236, 237, 240, 253], "2x": [15, 31, 68, 76, 93, 110, 232, 233, 239, 240, 286, 289, 297], "syntaxerror": [15, 110], "asin": [15, 74, 76, 82, 217, 220, 230, 232, 236, 240, 297], "arcsin": [15, 74, 217, 220, 240], "arcco": [15, 74, 134, 220], "expon": [15, 28, 37, 46, 49, 68, 69, 74, 75, 76, 93, 95, 101, 108, 117, 119, 191, 208, 209, 210, 216, 217, 220, 229, 232, 236, 239, 244, 255, 297], "half": [15, 23, 26, 49, 68, 69, 73, 74, 76, 78, 84, 95, 97, 104, 108, 110, 111, 133, 154, 157, 182, 205, 211, 213, 215, 216, 228, 229, 230, 232, 240, 251, 258], "denomin": [15, 68, 72, 76, 95, 108, 119, 125, 208, 209, 210, 211, 213, 215, 216, 219, 220, 229, 230, 232, 233, 236, 238, 297], "wild": [15, 68, 232, 258], "sq": [15, 233], "is_pow": [15, 49, 68, 74], "is_rat": [15, 21, 215, 258], "bracket": [15, 23, 34, 36, 60, 68, 76, 183, 185, 195, 220], "notat": [15, 19, 28, 32, 35, 37, 56, 60, 61, 67, 68, 69, 73, 76, 93, 101, 104, 110, 119, 129, 183, 194, 195, 200, 204, 207, 220, 227, 232, 239, 245, 246, 258, 272, 287], "curli": [15, 135, 220], "suppli": [15, 34, 35, 47, 48, 49, 59, 60, 68, 70, 78, 82, 104, 108, 124, 127, 128, 129, 130, 137, 139, 142, 147, 148, 150, 158, 185, 199, 204, 206, 215, 217, 222, 229, 236, 252, 258, 259, 265, 267, 270], "kwarg": [15, 43, 44, 45, 49, 59, 60, 67, 68, 69, 70, 74, 76, 78, 79, 81, 82, 83, 84, 85, 90, 93, 95, 99, 100, 101, 102, 104, 106, 107, 108, 117, 119, 125, 128, 130, 133, 139, 154, 163, 165, 169, 170, 174, 176, 178, 179, 181, 182, 183, 195, 199, 200, 206, 209, 211, 216, 220, 222, 226, 227, 228, 232, 236, 237, 238, 240, 241, 242, 246, 251, 252, 254, 258, 261, 270], "powsimp": [15, 68, 74, 229, 232], "deep": [15, 23, 68, 74, 98, 99, 216, 227, 232, 240, 292], "measur": [15, 41, 74, 76, 84, 100, 123, 150, 165, 174, 179, 187, 190, 192, 194, 195, 199, 201, 204, 216, 228, 229, 232, 240, 264, 265, 268, 269, 271, 272, 274], "join": [15, 30, 60, 68, 69, 81, 99, 111, 112, 220, 232, 236, 238, 241, 258, 262], "autoexpand": [15, 232], "violat": [15, 135, 205, 217, 232], "behind": [16, 38, 120, 135, 149, 189, 209, 229, 232, 236, 239, 282, 289], "decis": [16, 38, 68, 74, 95, 229, 238, 253], "opinion": [16, 38], "pitfal": [16, 23, 204, 210, 289, 294, 297], "arbitrarili": [17, 28, 47, 68, 81, 108, 213, 215, 227, 230, 236, 237, 240], "six": [17, 112, 220, 233, 239, 240], "bias": 17, "toward": [17, 49, 68, 76, 207, 227, 239], "unambigu": [17, 220, 236, 261], "univari": [17, 28, 37, 47, 67, 68, 74, 91, 95, 207, 208, 210, 211, 214, 215, 216, 217, 222, 233, 235, 238, 240], "linear": [17, 23, 29, 31, 33, 34, 37, 48, 49, 60, 67, 68, 69, 71, 72, 76, 81, 91, 93, 95, 97, 99, 101, 103, 111, 116, 119, 126, 127, 128, 130, 131, 137, 139, 140, 145, 147, 151, 152, 157, 179, 182, 183, 194, 199, 206, 207, 209, 211, 213, 215, 216, 218, 226, 228, 230, 233, 236, 237, 238, 239, 258, 280, 282, 298], "undetermin": [17, 68, 104, 216, 222, 236, 238], "nonlinear": [17, 29, 35, 37, 67, 152, 216, 236, 238, 239], "sol": [17, 34, 104, 233, 236, 237, 238], "insuffici": [17, 99], "elimin": [17, 19, 33, 49, 64, 68, 98, 100, 104, 123, 209, 211, 218, 219, 221, 223, 232, 236, 238, 239, 246, 253, 293], "nsolv": [17, 28, 34, 36, 37, 152, 238], "z_eq": 17, "zsol": 17, "906425478894557": 17, "sol0": 17, "90642547889456": 17, "reduce_inequ": [17, 30, 235, 238], "classifi": [18, 104, 210, 236, 237, 239, 240], "former": [18, 49, 68, 73, 135, 213, 215, 216, 233, 258], "catch": [18, 68, 236, 251, 293], "naiv": [18, 59, 65, 68, 93, 99, 104, 108, 190, 209, 230, 238, 239, 246], "theori": [18, 23, 50, 51, 57, 58, 59, 60, 66, 68, 69, 73, 76, 97, 105, 128, 135, 149, 151, 164, 182, 185, 195, 199, 209, 213, 214, 215, 219, 233, 255, 265, 283, 291], "is_subset": [18, 228], "odd": [18, 21, 31, 42, 44, 45, 46, 56, 60, 68, 69, 73, 74, 76, 98, 107, 108, 120, 205, 215, 216, 220, 238], "appliedpred": [18, 42, 43, 44], "analysi": [19, 49, 50, 59, 68, 69, 74, 116, 137, 149, 150, 153, 207, 216, 230, 233, 240], "vari": [19, 47, 49, 68, 82, 84, 111, 117, 123, 128, 131, 150, 183, 204, 227, 238, 258, 272], "hope": [19, 59, 123, 207], "envis": 19, "small": [19, 31, 49, 50, 51, 59, 60, 68, 72, 73, 95, 98, 104, 108, 119, 139, 143, 152, 182, 205, 206, 209, 211, 213, 214, 215, 232, 233, 238, 258, 286, 289, 291], "x_": [19, 31, 35, 49, 58, 68, 69, 73, 110, 211, 213, 216, 222, 233, 236, 241], "taylor": [19, 68, 74, 135, 149, 152, 211, 213, 216, 217, 227, 236], "df": [19, 70, 236], "c_": [19, 29, 35, 69, 91, 93, 204, 208, 236], "grid": [19, 47, 48, 117, 206], "f_": [19, 68, 73, 76, 95, 147, 148, 149, 213, 219, 220, 230, 236], "constraint": [19, 30, 104, 112, 119, 127, 128, 129, 133, 135, 137, 138, 139, 141, 145, 147, 148, 149, 152, 217, 282], "formul": [19, 33, 127, 138, 139, 145, 147, 148, 185, 204], "assess": 19, "brute": [19, 229, 233], "frequent": [19, 59, 215, 227, 239], "treatment": [19, 93, 216], "shall": [19, 59, 93, 135, 152, 227, 230, 292], "truncat": [19, 60, 68, 104, 108, 112, 190, 206, 217, 219, 222, 223], "approx": [19, 29, 34, 68, 95], "lowest": [19, 49, 59, 64, 108, 207, 209, 222, 239], "2h": 19, "print_funct": 19, "x0": [19, 35, 47, 49, 58, 68, 76, 87, 89, 91, 92, 108, 157, 210, 221, 222, 227, 232, 236, 238, 240, 258, 287], "x_0": [19, 58, 59, 69, 90, 91, 92, 213, 222, 233, 236, 240, 287], "fip1": 19, "fip2": 19, "c_0": [19, 69, 91], "c_1": [19, 35, 69, 91, 93, 227, 230, 236], "c_2": [19, 35, 51, 93, 227, 236], "2f": [19, 298], "sum": [19, 21, 31, 49, 57, 60, 67, 68, 71, 73, 76, 81, 83, 91, 93, 95, 97, 98, 99, 101, 104, 108, 115, 130, 147, 164, 168, 171, 179, 182, 184, 185, 205, 207, 208, 210, 211, 215, 216, 217, 220, 222, 223, 225, 227, 229, 230, 232, 233, 236, 238, 239, 240, 241, 242, 244, 246, 255, 258, 297], "c_i": [19, 93, 227, 230, 236], "nth": [19, 68, 73, 76, 97, 108, 211, 216, 217, 226, 232, 236, 240], "degre": [19, 28, 50, 51, 59, 66, 67, 73, 76, 84, 95, 99, 104, 111, 113, 115, 117, 119, 127, 128, 133, 135, 136, 139, 145, 153, 157, 204, 207, 208, 211, 213, 215, 216, 219, 223, 226, 229, 230, 232, 233, 236, 238, 240, 265, 282], "x_i": [19, 23, 58, 76, 95, 104, 208, 211, 213, 216, 217, 220, 239], "m11": [19, 240], "m12": [19, 240], "m13": 19, "m21": [19, 240], "m22": [19, 240], "m23": 19, "m31": 19, "m32": 19, "m33": [19, 108], "3x3": [19, 33, 83, 104, 209, 270], "invert": [19, 33, 37, 45, 68, 69, 99, 101, 104, 119, 139, 187, 208, 209, 210, 211, 215, 216, 236, 238, 239, 246, 293], "inv": [19, 33, 60, 100, 104, 127, 128, 133, 137, 142, 143, 152, 174, 209, 236], "fim1": 19, "eight": [19, 37, 220], "dfdxcheck": 19, "c3": [19, 35, 51, 71, 97, 99, 101, 108, 209, 236, 240, 271, 298], "c5": [19, 236], "c7": [19, 59], "5040": [19, 73, 90, 216, 217], "tediou": [19, 95], "certainli": [19, 80, 110, 255], "devis": 19, "xn": [19, 23, 211], "x_n": [19, 23, 50, 58, 69, 90, 104, 208, 211, 213, 216, 233, 239], "fn": [19, 35, 95, 104, 207, 216], "fnm1": 19, "fnm2": 19, "dth": 19, "discrit": 19, "bengt": [19, 47], "fornberg": [19, 47], "weight": [19, 68, 76, 83, 85, 95, 97, 104, 169, 232, 287], "gap": [20, 59, 108, 135, 217], "matur": [20, 21, 238, 239], "finit": [20, 21, 32, 45, 49, 54, 55, 56, 59, 67, 68, 69, 71, 72, 95, 97, 98, 171, 195, 205, 208, 211, 214, 216, 217, 220, 222, 223, 226, 228, 233, 235, 236, 239, 258, 265, 267, 277, 288, 291, 297], "obviou": [21, 22, 23, 33, 51, 59, 67, 207, 210, 219, 233, 291], "refus": [21, 297], "roughli": [21, 68, 69, 109, 136, 236, 259], "possibli": [21, 49, 60, 66, 68, 93, 95, 108, 188, 209, 211, 213, 227, 228, 238, 253, 258, 287, 293], "infinit": [21, 23, 30, 31, 45, 67, 68, 69, 72, 73, 74, 81, 82, 95, 104, 108, 119, 134, 141, 171, 190, 207, 215, 220, 221, 222, 225, 226, 227, 228, 232, 233, 235, 238, 245, 258, 297, 298], "is_neg": [21, 23, 211], "unknow": 21, "resolv": [21, 22, 28, 30, 31, 32, 33, 34, 35, 36, 68, 95, 229, 232, 238], "undecid": [21, 23, 32, 104, 210, 239, 293], "conclud": [21, 76, 91, 137, 201, 227, 238, 274], "mix": [21, 40, 67, 74, 99, 104, 110, 194, 210, 211, 216, 220, 239, 242, 244, 246, 259], "slow": [21, 23, 28, 33, 64, 68, 72, 95, 109, 123, 157, 194, 204, 210, 211, 220, 221, 222, 223, 232, 236, 238, 239, 251, 252, 297], "indetermin": [21, 22, 68, 104, 213, 225, 238], "contradict": 21, "infer": [21, 43, 44, 60, 68, 95, 210, 219, 220, 225, 230, 236, 252], "presum": [21, 93, 210, 230, 253], "singletonregistri": [21, 68], "x1": [21, 23, 34, 35, 58, 68, 73, 152, 157, 210, 211, 221, 222, 232, 236, 238, 240, 258], "x2": [21, 34, 58, 68, 73, 152, 157, 210, 222, 236, 238, 240], "posifi": [21, 232], "_x": [21, 23, 104, 146, 194, 200, 203, 204, 211, 217, 232, 236, 252], "rep": [21, 59, 64, 68, 169, 207, 209, 210, 211, 214, 215, 216, 229, 232, 261], "among": [21, 48, 49, 50, 52, 59, 60, 69, 96, 109, 216, 236, 241, 244, 246, 269], "behaviour": [21, 93, 98, 124, 210, 213, 217, 223, 226], "symbolc": 21, "aris": [21, 22, 68, 73, 93, 95, 182, 204, 209, 210, 215], "implicit": [21, 35, 49, 66, 68, 110, 128, 129, 133, 153, 206, 236, 238, 242, 245, 252, 253, 265, 268, 275, 289], "tailor": 21, "assumptions0": [21, 68], "extended_neg": [21, 68], "extended_nonneg": [21, 68], "extended_nonposit": [21, 68], "extended_nonzero": [21, 68, 220], "extended_posit": [21, 68], "extended_r": [21, 45, 68, 220, 235, 239], "hermitian": [21, 33, 45, 68, 99, 100, 104, 168, 174, 185, 220], "irrat": [21, 28, 45, 47, 68, 108, 210, 216, 220, 228, 291], "noninteg": [21, 45, 68, 210, 220], "nonposit": [21, 45, 68, 73, 76, 152], "nonzero": [21, 23, 45, 46, 67, 68, 83, 104, 121, 208, 209, 210, 211, 220, 223, 239], "antihermitian": [21, 45, 68], "mathbb": [21, 23, 31, 45, 50, 51, 59, 67, 68, 69, 74, 76, 93, 99, 104, 149, 205, 207, 208, 210, 211, 213, 215, 216, 219, 227, 228, 230, 233, 239, 240, 297], "ii": [21, 74, 93, 95, 108, 216, 220, 228, 236, 239, 242], "cup": [21, 216, 228, 239], "pm": [21, 28, 29, 31, 41, 67, 93, 95, 208, 219, 227, 233, 236], "yi": 21, "composit": [21, 45, 48, 57, 59, 60, 68, 69, 86, 88, 95, 108, 111, 211, 213, 216, 219, 232, 239, 254], "2k": [21, 68, 73, 93, 108, 233], "le": [21, 50, 64, 68, 76, 93, 99, 108, 144, 213, 220, 230, 240], "commutative_properti": [21, 68], "skew": [21, 91, 104, 108, 240], "hermitian_matrix": 21, "complex_numb": [21, 45, 68], "algebraic_numb": [21, 45, 68], "transcendental_numb": [21, 68], "extended_real_number_lin": 21, "real_numb": [21, 45], "imaginary_numb": [21, 45, 68], "rational_numb": [21, 45], "irrational_numb": [21, 45, 68], "parity_": [21, 68], "28mathemat": [21, 60, 68, 104, 228], "prime_numb": [21, 68, 108], "composite_numb": [21, 68], "positive_real_numb": 21, "negative_numb": [21, 68], "inconsist": [21, 23, 42, 44, 67, 190, 195, 199, 203, 232, 236, 239], "inconsistentassumpt": 21, "deal": [21, 49, 67, 68, 72, 80, 88, 93, 95, 116, 123, 128, 129, 135, 201, 203, 204, 208, 213, 216, 233, 238, 249, 259, 261, 269, 274, 289, 291, 297], "is_zero_matrix": [21, 99, 209], "generalis": [21, 73, 76, 93, 119, 207], "gaussian": [21, 76, 95, 104, 108, 155, 189, 213, 216, 233, 238, 240, 282, 293], "notion": [21, 48, 190, 193, 207, 239, 269, 274], "chain": [21, 23, 49, 59, 64, 68, 76, 85, 109, 203, 215, 240], "superset": [21, 47, 57, 63, 71, 152, 210, 228, 238], "vanilla": 21, "attach": [21, 60, 62, 93, 109, 111, 127, 128, 131, 146, 204, 252, 254, 259], "is_commut": [21, 95, 174, 183, 258], "is_complex": [21, 68], "is_finit": [21, 68], "permit": [21, 60, 70, 74, 98, 108, 206], "formal": [21, 31, 48, 67, 68, 76, 93, 98, 154, 190, 210, 213, 224, 227, 277], "n1": [21, 49, 59, 68, 69, 135, 152, 154, 158, 194, 206, 233, 240, 265], "n2": [21, 49, 59, 68, 69, 152, 154, 158, 206, 233, 240], "misunderstand": 21, "is_nonneg": [21, 23, 211], "meaning": [21, 42, 44, 48, 69], "neither": [21, 22, 45, 68, 159, 180, 206, 209, 216, 227, 228, 229, 236, 246, 259, 265, 274, 297], "alon": [21, 69, 96, 213, 236, 238, 245, 258, 291, 292], "meet": [21, 69, 227], "criteria": [21, 68, 292], "noncommut": [21, 68, 91, 292], "finiteset": [21, 32, 47, 48, 228, 239, 240, 298], "s1": [21, 51, 59, 67, 81, 84, 91, 119, 196, 207, 216, 223, 233, 258, 268], "s2": [21, 51, 59, 60, 67, 81, 84, 119, 196, 207, 216, 223, 227, 233, 258, 268], "bool": [21, 41, 47, 49, 51, 64, 66, 68, 69, 71, 74, 95, 96, 98, 99, 101, 104, 108, 110, 117, 128, 129, 133, 168, 169, 197, 200, 206, 209, 215, 216, 218, 220, 221, 222, 227, 228, 232, 235, 240, 252, 253, 258, 259, 265, 268, 289], "plai": [21, 67, 137, 147, 233, 289, 291, 292], "role": [21, 74, 218], "is_finite_set": 21, "zero_matrix": 21, "setsymbol": 21, "is_compar": [21, 68], "capitalis": 21, "4142135623731": [21, 34, 220, 238], "predict": [21, 185, 232, 258], "expreal": 21, "fuzzy_and": [21, 22, 23], "fuzzy_or": [21, 22], "is_extended_nonneg": 21, "classmethod": [21, 23, 41, 43, 44, 49, 52, 57, 59, 60, 62, 63, 68, 74, 75, 76, 83, 99, 104, 119, 130, 133, 171, 182, 183, 185, 209, 211, 215, 216, 220, 228, 246, 251], "is_extended_r": 21, "elif": [21, 22, 23, 74], "is_infinit": 21, "is_extended_neg": 21, "is_extended_posit": [21, 22], "_eval_is_finit": 21, "is_extended_nonposit": 21, "_eval_is_algebra": 21, "is_nonzero": [21, 83], "_eval_is_integ": 21, "_eval_is_zero": [21, 23], "pick": [21, 69, 73, 149, 179, 181, 297], "__new__": [21, 23, 49, 59, 68, 292], "importantli": [21, 23, 217, 255], "reject": [21, 22, 108, 233, 261], "_eval_is_": 21, "is_algebra": [21, 68, 211], "interfer": [21, 220], "determinist": [21, 59, 95, 108, 213, 214], "reach": [21, 108, 119, 215, 216, 236], "claus": [21, 98], "flow": [21, 215], "inner": [21, 35, 67, 93, 104, 168, 171, 172, 177, 179, 180, 183, 185, 195, 199, 209, 215, 222, 265, 282], "optimis": [21, 236], "briefli": [21, 208, 213], "default_assumpt": 21, "_ask": 21, "_eval_i": 21, "enumer": [21, 38, 52, 57, 60, 63, 71, 75, 93, 98, 108, 215, 216, 230, 255, 258, 277], "randomis": [21, 248, 284], "unresolv": 21, "factrul": 21, "_assume_rul": 21, "preprocess": [21, 95, 218], "defined_fact": 21, "full_impl": 21, "defaultdict": [21, 68, 258], "precomput": [21, 73, 108, 259], "static": [21, 41, 49, 59, 60, 62, 68, 74, 81, 82, 83, 84, 101, 112, 137, 145, 206, 220, 226, 228, 240, 252], "knowabl": 21, "stdfactkb": 21, "_eval_is_r": [21, 23, 216], "_assumpt": [21, 68], "amongst": [21, 238], "indirectli": 21, "manifest": [21, 208], "jointli": 21, "fundament": [21, 23, 47, 50, 58, 86, 93, 95, 104, 189, 190, 210, 215, 233, 236, 240, 293], "theoret": [21, 48, 50, 59, 69, 73, 214, 215, 230, 240, 289], "isposit": 22, "xpo": 22, "xneg": 22, "strictgreaterthan": [22, 68, 220], "analogu": [22, 45, 67, 82, 210, 211], "piecewis": [22, 23, 49, 67, 73, 76, 95, 98, 111, 183, 220, 222, 223, 238, 239, 240, 259, 287], "p2": [22, 59, 60, 67, 78, 80, 81, 82, 83, 84, 111, 119, 124, 127, 130, 134, 152, 199, 206, 210, 211, 213, 217, 229, 240], "nonetyp": [22, 49, 133], "quirk": 22, "both_posit": 22, "falsei": 22, "both_positive_bett": 22, "negat": [22, 23, 45, 68, 74, 98, 119, 195, 209, 211, 213, 216], "fuzzy_not": [22, 23], "both_positive_best": 22, "silent": [22, 72, 108, 252], "bitwis": [22, 71, 98], "footnot": [22, 190, 292, 293, 296], "si": [23, 76, 92, 93, 158, 187, 188, 189, 190, 191, 192, 220], "dig": [23, 49, 292], "handler": [23, 42, 43, 44, 45, 46, 68, 75, 104], "spectrum": 23, "np": [23, 35, 73, 91, 108, 135, 206, 252, 259], "arang": [23, 252, 286], "arrai": [23, 29, 33, 34, 35, 49, 59, 60, 64, 65, 69, 76, 95, 99, 101, 104, 108, 109, 117, 129, 152, 182, 206, 209, 211, 216, 220, 239, 240, 243, 245, 246, 247, 252, 253, 255, 259, 280, 293], "cosin": [23, 68, 74, 76, 83, 95, 124, 127, 195, 204, 216, 217, 223, 229, 240, 265, 297], "todai": [23, 207], "operatornam": [23, 41, 73, 74, 76, 93, 95, 205, 208, 216, 220, 223, 228, 230, 238], "modern": [23, 49, 207, 214, 220], "recal": [23, 68, 104, 213, 215, 230, 289, 291, 292, 298], "antipattern": [23, 290], "stai": [23, 215], "trig": [23, 68, 95, 216, 220, 229, 232, 297], "wouldn": 23, "cheap": [23, 68, 108], "as_two_term": [23, 68], "hadn": 23, "wors": [23, 98, 232], "expand_trig": [23, 68, 286], "mid": [23, 50, 69, 72, 112, 228, 233], "troubl": [23, 76], "bigger": [23, 49, 68, 73, 104, 230, 236, 297], "deduc": [23, 49, 93, 98, 230, 291], "disallow": [23, 68, 216, 221, 232, 254], "great": [23, 154, 217, 220, 233, 259], "simplest": [23, 35, 48, 98, 104, 108, 109, 131, 205, 206, 217, 221, 229, 232, 236, 287, 297], "\u03c0": [23, 72, 157, 220, 239, 287, 291, 297, 298], "as_independ": [23, 68, 239], "coeff": [23, 68, 70, 98, 152, 211, 215, 216, 226, 232, 236, 238, 246, 297], "apart": [23, 41, 59, 64, 68, 72, 74, 95, 131, 201, 208, 209, 211, 213, 216, 219, 222, 233, 239, 246, 270, 272, 292], "is_even": [23, 56, 59, 60], "nonreal": [23, 34, 238], "cosh": [23, 68, 74, 76, 87, 93, 217, 220, 221, 230, 232, 238, 293, 297], "5919532755215": 23, "_eval_is_nonneg": 23, "exercis": [23, 59, 255, 290, 297], "_eval_is_posit": 23, "as_add": [23, 68], "pi_": 23, "fuzzy_": 23, "deduct": [23, 49], "subtl": [23, 229], "nontrivi": [23, 59, 68, 108], "_eval_evalf": [23, 216], "prec": [23, 34, 68, 78, 84, 108, 117, 205, 211, 216, 217, 232, 238], "dp": [23, 49, 68, 71, 76, 108, 210, 211, 238, 254], "53": [23, 69, 71, 104, 154, 208, 210, 211], "459697694131860": 23, "hook": [23, 109, 220], "_eval_rewrit": [23, 68], "rewritten": [23, 68, 73, 74, 76, 95, 135, 182, 189, 227, 232, 236, 238, 297], "caller": [23, 209], "ve": [23, 137], "nonintegr": 23, "iff": [23, 45, 60, 69, 98, 104, 204, 207, 215, 230, 233, 251], "isint": 23, "happi": 23, "demand": [23, 40], "_eval_expand_": 23, "expand_": 23, "predefin": [23, 70, 152, 210, 220, 221, 232, 239, 246, 265, 270], "expand_log": [23, 49, 68, 232], "_eval_expand_trig": 23, "sophist": [23, 109, 238], "th": [23, 41, 50, 59, 60, 66, 69, 70, 72, 73, 74, 76, 97, 98, 104, 108, 128, 209, 211, 213, 215, 216, 222, 225, 230, 233, 236, 238, 240, 241, 246], "x_1": [23, 50, 58, 59, 69, 73, 90, 104, 180, 208, 211, 213, 216, 222, 233, 239], "ldot": [23, 31, 50, 58, 59, 67, 68, 69, 73, 76, 93, 108, 112, 190, 205, 207, 208, 211, 213, 215, 220, 223, 227, 230, 233, 238, 241, 297], "x_k": [23, 69, 213], "dy": [23, 26, 49, 70, 85, 104, 111, 122, 152, 216, 220, 233, 236, 237, 287], "dz": [23, 111, 122, 230], "varion": 23, "middl": [23, 76, 84, 93, 104, 112, 165, 206, 230, 297], "iverson": 23, "printmethod": [23, 220], "latexprint": 23, "_latex": [23, 220], "_print": [23, 220], "_m": [23, 76], "_n": [23, 69, 73, 76, 95, 216, 230, 239], "arcversin": 23, "aversin": 23, "im": [23, 46, 68, 74, 93, 102, 207, 220, 221, 228, 236, 293], "sinh": [23, 47, 68, 72, 74, 76, 87, 93, 217, 220, 221, 230, 297], "expand_complex": [23, 68], "analog": [23, 28, 33, 61, 67, 69, 73, 150, 203, 204, 207, 208, 209, 213, 225, 241, 258], "vers": 23, "geometr": [23, 70, 77, 78, 79, 80, 81, 82, 83, 84, 85, 104, 154, 204, 207, 214, 240, 293], "angl": [23, 41, 74, 76, 77, 78, 79, 81, 82, 83, 84, 113, 115, 121, 127, 133, 134, 135, 137, 138, 139, 140, 146, 149, 154, 157, 158, 159, 182, 190, 195, 203, 204, 205, 220, 229, 239, 265, 267, 270, 297], "distanc": [23, 48, 52, 60, 78, 81, 82, 83, 84, 111, 112, 122, 123, 127, 131, 134, 139, 140, 154, 158, 188, 199, 201, 274], "rightmost": [23, 185], "scientificamerican": 23, "uniti": [23, 74, 76, 93, 180, 215], "secret": [23, 69], "teacher": 23, "taught": [23, 95], "nr": 23, "sake": [23, 73, 233], "simplic": [23, 230, 236], "divisor": [23, 45, 59, 68, 69, 104, 108, 207, 208, 209, 210, 211, 213, 214, 215, 216, 219], "hardwar": [23, 49], "regard": [23, 50, 69, 76, 96, 153, 185, 207, 208, 222, 238, 239], "c99codeprint": [23, 49, 220], "cxx11codeprint": [23, 220], "cfunction": 23, "e2": [23, 47, 68, 71, 78, 85, 95, 104, 108, 117, 135, 209, 210, 215, 216, 227, 236, 239, 240, 258], "93accumulate_oper": 23, "fused_multipli": 23, "93add": 23, "ccode": [23, 49, 220, 245, 253], "cxxcode": [23, 49, 220], "_ccode": [23, 220], "_y": [23, 30, 146, 194, 200, 203, 204], "_z": [23, 95, 146, 194, 203, 204, 240], "_cxxcode": [23, 220], "std": [23, 49, 220, 240], "28318530717959": 23, "trigonometricfunct": 23, "inversetrigonometricfunct": 23, "reciprocaltrigonometricfunct": 23, "bypass": [23, 216, 236], "fragil": 23, "prone": [23, 31, 49, 68], "task": [24, 29, 38, 74, 145, 146, 152, 210, 215, 287, 294], "deeper": [24, 244, 292], "explor": [24, 147, 148, 206, 215, 255, 297], "logo": 24, "png": [25, 26, 35, 48, 96, 104, 111, 112, 115, 117, 200, 206, 220, 223], "generate_logo": 25, "wider": [25, 220], "varieti": [25, 37, 49, 50, 60, 68, 109, 112, 150, 207, 214, 216, 240, 258], "textbook": 26, "dc": [26, 119, 148], "transferfunct": [26, 116, 117, 119], "unstabl": [26, 115], "impuls": [26, 119], "respons": [26, 67, 68, 119, 135, 206, 253], "subpart": 26, "unknwon": 26, "tf": [26, 119, 259], "from_zpk": [26, 119], "dc_gain": [26, 119], "reconstruct": [26, 69, 104, 209, 213, 233, 292], "is_stabl": [26, 119], "lie": [26, 28, 60, 70, 82, 83, 84, 131, 134, 216, 240, 276, 283], "inverse_laplace_transform": [26, 95], "to_expr": [26, 90, 91, 92, 119], "impulse_respons": 26, "theorem": [26, 28, 37, 56, 69, 73, 76, 78, 84, 95, 99, 104, 108, 122, 123, 134, 137, 185, 194, 203, 207, 210, 213, 227, 230, 233, 239], "spring": [26, 108, 124, 127, 128, 133, 135, 140], "damper": [26, 127, 128, 133, 135, 140], "laplace_transform": [26, 95, 119], "laplace_initial_cond": [26, 95], "laplace_correspond": [26, 95], "2y": [26, 213, 233, 236, 239, 291], "dt": [26, 35, 70, 76, 139, 152, 194, 195, 197, 203, 204, 216, 236, 297], "ky": 26, "2u": 26, "quad": [26, 67, 68, 70, 72, 76, 95, 99], "bigg": 26, "nocond": [26, 95], "from_rational_express": [26, 119], "signal": [26, 76, 98, 108, 117, 119, 152, 213, 292], "bmatrix": [26, 35, 41, 99, 101, 104, 139, 147, 148, 149, 194, 195, 204, 233], "2t": [26, 73], "5e": 26, "laplac": [26, 95, 104, 116, 117, 119, 240], "mimo": [26, 116, 119], "visualis": 26, "1st": [26, 47, 60, 108, 119, 236, 237, 261, 287], "analys": [26, 48, 117, 119, 152, 240], "bode": 26, "magnitud": [26, 41, 49, 67, 68, 72, 76, 109, 111, 112, 113, 115, 117, 130, 131, 139, 152, 183, 192, 195, 201, 204, 206, 265, 272, 274], "2nd": [26, 47, 60, 69, 108, 119, 152, 236, 241, 258], "applyfunc": [26, 99, 100, 104, 143, 195, 209, 241], "transferfunctionmatrix": [26, 116, 119], "from_matrix": [26, 41, 119, 209], "lti": [26, 116, 117], "num_input": [26, 119], "num_output": [26, 119], "elem_pol": [26, 119], "elem_zero": [26, 119], "pole_zero_plot": [26, 117], "hire": [26, 35, 104, 111, 112, 115, 117, 206, 223], "tf1": [26, 117, 119], "step_response_plot": [26, 117], "tf2": [26, 119], "bode_magnitude_plot": [26, 117], "bode_phase_plot": [26, 117], "arrang": [26, 60, 119, 128, 150, 152, 216, 229, 233, 246], "loop": [26, 28, 31, 35, 48, 49, 108, 119, 138, 195, 206, 209, 217, 220, 236, 255, 258, 292], "ratio": [26, 45, 58, 59, 67, 68, 72, 73, 76, 78, 81, 82, 83, 84, 100, 108, 119, 158, 190, 209, 220, 229, 232, 238], "diagram": [26, 49, 57, 97, 111, 131, 138, 139, 140, 145, 165, 245, 270, 292], "plant": [26, 119], "p_mat": 26, "c_mat": 26, "opposit": [26, 28, 64, 84, 98, 99, 124, 131, 134, 208, 211, 228, 232, 239, 247, 258, 265, 267, 297], "doit": [26, 67, 68, 70, 73, 74, 76, 95, 101, 119, 162, 164, 166, 177, 179, 182, 183, 185, 195, 205, 216, 222, 227, 232, 236, 237, 240, 242, 265, 268, 269, 271, 272, 287, 292], "tfm_feedback": 26, "mimofeedback": [26, 116, 119], "g1": [26, 49, 53, 58, 59, 93, 104, 119], "g2": [26, 49, 53, 58, 59, 93, 97, 104, 119], "g3": [26, 59, 119], "g4": [26, 119], "h1": [26, 48, 130], "h2": [26, 130], "h3": 26, "sys1": [26, 119], "sys2": [26, 119], "sys3": 26, "sys4": 26, "sys5": 26, "sys6": 26, "193": [26, 104, 117], "873": [26, 108], "1644": 26, "1484": 26, "712": [26, 95], "testbook": 26, "vssut": 26, "ac": [26, 41, 49, 60, 80, 115, 130, 150, 162, 240, 258, 261], "classic": [27, 35, 47, 74, 76, 104, 171, 187, 195, 204, 207, 282], "continuum": [27, 39, 282], "optic": [27, 156, 157, 158, 159, 282], "bx": [28, 29, 93, 240, 246], "yield": [28, 30, 31, 32, 33, 35, 36, 47, 49, 59, 68, 69, 73, 76, 92, 93, 108, 111, 119, 125, 179, 205, 208, 213, 215, 216, 221, 222, 227, 228, 229, 232, 233, 238, 255, 258, 293], "4ac": [28, 29, 233], "2a": [28, 29, 240], "quadrat": [28, 31, 68, 69, 95, 108, 207, 211, 215, 216, 233, 238, 240], "five": [28, 31, 48, 57, 93, 115, 220, 233], "rootof": [28, 74, 216], "ill": [28, 188], "spuriou": [28, 213, 238], "interv": [28, 30, 32, 35, 45, 47, 59, 68, 72, 74, 76, 77, 78, 81, 84, 93, 95, 98, 108, 171, 180, 209, 211, 213, 215, 216, 223, 226, 228, 235, 239, 240, 298], "irreduc": [28, 208, 209, 211, 213, 215, 216, 219, 240, 246, 297], "reveal": [28, 31, 33, 49, 108, 209, 239, 292], "cubic": [28, 76, 207, 216, 233, 238], "quartic": [28, 78, 216, 238], "fourth": [28, 68, 69, 208, 236, 287], "687": 28, "144": [28, 37, 73, 95, 205, 209], "emphas": [28, 67], "quintic": [28, 216, 238], "fifth": 28, "techniqu": [28, 32, 33, 35, 50, 63, 93, 95, 216, 220, 222, 232, 236, 239, 293], "abel": [28, 37, 104, 216], "ruffini": [28, 37, 104], "expression_expand": 28, "symbolic_expand": 28, "cube": [28, 47, 49, 52, 59, 61, 74, 95, 213, 214, 233, 239, 275], "nois": 28, "neglig": 28, "compon": [28, 48, 49, 64, 68, 70, 83, 95, 101, 104, 120, 127, 130, 133, 145, 146, 150, 157, 182, 187, 194, 195, 201, 202, 203, 204, 205, 206, 207, 208, 209, 216, 218, 240, 242, 245, 246, 255, 258, 265, 268, 271, 272], "18482169793536e": 28, "55872552179222e": 28, "contrarili": 28, "rq0": 28, "rq1": 28, "rq2": 28, "rq3": 28, "237": [28, 214], "349745826211722": 28, "438990337475312": 28, "wilkinson": [28, 99], "expression_complex": 28, "symbolic_complex": 28, "expression_complex_poli": 28, "travers": [28, 84, 108, 125, 216, 229, 245, 255, 292], "my_real_root": 28, "my_root": 28, "324": [28, 108, 209, 214], "fifth_ord": 28, "16730397826142": 28, "181232444469875": 28, "08395410131771": 28, "764884433600585": 28, "352471546031726": 28, "polyerror": [28, 213, 216], "unsolvablefactorerror": [28, 216, 238], "complexrootof": [28, 68, 104, 211, 216, 236], "fifth_order_solv": 28, "167303978": 28, "1812324445": 28, "083954101": 28, "7648844336": 28, "352471546": 28, "sole": 28, "croot": 28, "r0": [28, 216], "r1": [28, 41, 78, 81, 97, 111, 112, 158, 195, 201, 216, 265], "r2": [28, 41, 70, 81, 97, 99, 111, 112, 158, 195, 216, 220, 232, 265], "r3": [28, 41, 97, 111, 112, 232], "r4": [28, 97, 111], "robustli": 28, "diophantin": [29, 30, 108, 213, 234, 277], "guidanc": 29, "2z": [29, 36, 76, 239, 240], "4z": [29, 36, 239], "6z": [29, 36], "739085133215161": [29, 34, 36, 37, 238], "9y": [29, 35], "3x": [29, 35, 68, 110, 213, 239, 289], "cc": [29, 33, 69, 84, 205, 208, 209, 210, 216, 293], "2e": [29, 33, 68], "ce": [29, 33, 115], "2pq": [29, 31], "linprog": 30, "as_set": [30, 98], "accomplish": [30, 95, 149, 152, 272], "rel_op": [30, 68], "relations_sort": 30, "append": [30, 35, 59, 68, 69, 104, 112, 152, 180, 206, 211, 220, 238, 241, 253, 254, 258, 297], "x_y_reduc": 30, "insight": [30, 290], "x_reduc": 30, "y_reduc": 30, "solve_univariate_inequ": [30, 235, 239], "calculu": [30, 32, 68, 73, 95, 104, 152, 201, 229, 240, 271, 272, 273, 276, 277, 288, 290, 295], "incompat": 30, "reflect": [30, 37, 52, 56, 60, 68, 78, 79, 84, 97, 115, 154, 157, 158, 195], "parameter": [31, 70, 77, 78, 81, 84, 233], "pythagorean": [31, 233], "sage": [31, 68, 108, 205, 291], "ellipticcurv": 31, "nest": [31, 35, 68, 70, 74, 76, 95, 99, 119, 208, 209, 210, 213, 220, 230, 232, 235, 239, 240, 241, 242, 244, 247, 258, 259, 292], "ineffici": [31, 68, 104, 210], "my_sym": 31, "pythag_eq": 31, "sym": [31, 47, 58, 59, 64, 68, 73, 195, 220, 223, 228, 232, 233, 238, 240, 246, 258, 297], "pythag": 31, "a_1x_1": [31, 233], "a_2x_2": [31, 233], "a_nx_n": [31, 233], "bxy": [31, 233], "cy": [31, 233], "ei": [31, 35, 76, 93, 215, 220, 230, 233, 236, 246], "homogen": [31, 41, 91, 95, 104, 119, 211, 213, 216, 233, 236, 237, 240], "ternari": [31, 49, 68, 220, 233], "cz": [31, 71, 119, 233], "dxy": [31, 233], "eyz": [31, 233], "fzx": [31, 233], "a_": [31, 64, 68, 69, 76, 93, 97, 99, 101, 119, 120, 194, 222, 230, 233, 236, 238, 240, 241, 242], "pythogorean": 31, "subscript": [31, 33, 60, 211, 220, 230, 233, 258], "solution_dict": [31, 35], "zip": [31, 47, 58, 69, 98, 108, 216, 226, 233, 236, 255, 258], "elegantli": 31, "solution_list": [31, 32], "solution_first": 31, "solution_p4q3": 31, "p_val": 31, "q_val": 31, "pythag_v": 31, "union": [31, 40, 45, 47, 49, 57, 59, 66, 98, 207, 215, 220, 226, 227, 228, 235, 239, 258], "4y": [31, 213, 239, 286], "rearrang": [32, 120, 128, 147, 148, 169, 236], "eqn": [32, 35, 47, 239], "solutions_set": 32, "solution_set": 32, "256": [32, 49, 59, 108, 216, 220], "solution_outside_2_3": 32, "critic": [32, 47, 158, 203, 215, 239], "minima": [32, 239], "critical_point": 32, "point1": [32, 196, 268], "point2": [32, 196, 268], "curvatur": [32, 154, 158], "membership": [32, 66, 215, 228], "solution_set_arg": 32, "linalg": [33, 34, 49], "lu_solv": [33, 104, 209], "linear_eq_to_matrix": [33, 236, 239], "matrixbas": [33, 99, 100, 101, 104, 128, 129, 209], "column": [33, 41, 45, 48, 49, 50, 96, 98, 99, 101, 104, 105, 107, 119, 128, 133, 137, 180, 187, 194, 195, 200, 205, 209, 215, 220, 236, 239, 245, 265], "row": [33, 45, 48, 49, 50, 57, 60, 68, 73, 99, 100, 101, 104, 105, 107, 108, 119, 133, 135, 137, 152, 153, 180, 194, 195, 204, 209, 215, 220, 230, 239, 240, 245, 259, 265, 267], "shapeerror": [33, 99, 101, 104], "penros": [33, 101, 104], "pseudoinvers": [33, 104], "jordan": [33, 93, 99, 104, 209, 218, 236, 238, 239], "lu": [33, 101, 104, 128, 129, 209, 214], "lusolv": [33, 100, 104, 127, 128, 129, 149, 153, 238, 293], "repeatedli": [33, 108, 120, 252], "b2": [33, 76, 108, 111, 112, 124, 135, 152, 195, 209, 211, 220, 230, 233, 236, 271], "solution2": 33, "prioriti": [33, 49, 91, 123, 135, 204, 259], "computation": [33, 64, 74, 127, 128, 129], "tractabl": [33, 239], "rapidli": [33, 68, 72, 93, 227], "dimens": [33, 49, 52, 69, 70, 76, 77, 79, 81, 82, 83, 85, 97, 99, 101, 104, 107, 111, 120, 139, 159, 169, 171, 174, 179, 188, 189, 192, 193, 195, 206, 209, 220, 233, 236, 238, 240, 241, 242, 245, 246, 253, 265, 268, 270, 282], "dimension": [33, 47, 49, 52, 70, 80, 81, 82, 83, 84, 101, 104, 112, 120, 152, 159, 161, 171, 187, 201, 202, 206, 207, 213, 215, 216, 219, 220, 238, 239, 241, 242, 246, 252, 274, 298], "4x4": [33, 41, 83, 107, 157, 209, 240], "a\u2080\u2080": 33, "a\u2080\u2081": 33, "a\u2080\u2082": 33, "a\u2080\u2083": 33, "a\u2081\u2080": 33, "a\u2081\u2081": 33, "a\u2081\u2082": 33, "a\u2081\u2083": 33, "a\u2082\u2080": 33, "a\u2082\u2081": 33, "a\u2082\u2082": 33, "a\u2082\u2083": 33, "a\u2083\u2080": 33, "a\u2083\u2081": 33, "a\u2083\u2082": 33, "a\u2083\u2083": 33, "det": [33, 41, 104, 105, 152, 204, 209, 293], "a\u2081": [33, 112, 297], "\u2083": [33, 220], "slowest": [33, 95, 109], "symmetr": [33, 45, 46, 50, 51, 56, 59, 60, 64, 84, 99, 100, 101, 104, 108, 150, 205, 211, 213, 216, 219, 228, 230, 246, 258], "triangular": [33, 45, 51, 99, 100, 104, 209, 215, 238, 240, 275], "prove": [33, 68, 93, 95, 104, 207, 227, 236, 271], "noninvertiblematrixerror": [33, 101, 293], "overli": [34, 131], "float64": [34, 49, 109, 240], "fsolv": 34, "findroot": [34, 76, 238], "overdetermin": [34, 209, 238, 239], "toler": [34, 49, 68, 72, 211, 232, 238], "18466446988997098217": 34, "16840434497100886801e": 34, "tweak": [34, 220, 238], "closest": [34, 68, 81], "00000000000000": [34, 68, 72, 186, 220, 240], "bisect": [34, 108, 216, 238], "multidimension": [34, 214, 251], "19287309935246": [34, 238], "27844411169911": [34, 238], "192873099352460791205211": 34, "278444111699106966687122": 34, "root_scalar": 34, "lam_f": [34, 259], "3416277185114782": 34, "x_valu": 34, "12757857962640e": 34, "73908513321516": 34, "4877893607115270300540019e": 34, "6543612251060553497428174e": 34, "solve_ivp": 35, "c2": [35, 51, 69, 78, 85, 99, 101, 127, 171, 185, 228, 236, 240, 268, 271, 298], "ypp": 35, "yp": 35, "classify_od": [35, 236], "choic": [35, 49, 60, 73, 76, 93, 95, 109, 149, 181, 190, 194, 195, 203, 211, 213, 216, 220, 232, 236, 258, 291], "ic": [35, 108, 236], "y0": [35, 68, 87, 89, 91, 236], "y_": [35, 49, 76, 93, 121, 205], "initialor": 35, "eqs_one_soln_set": 35, "solutions_one_soln_set": 35, "solution_one_soln_set_dict": 35, "outer": [35, 95, 130, 150, 152, 168, 173, 174, 194, 195, 197, 199, 204, 222, 228, 244, 265, 268, 269], "fashion": [35, 49, 68, 74, 101, 137, 147, 148, 150, 204, 207, 258], "solutions_list": 35, "leverag": [35, 49, 109, 220], "chemic": 35, "kinet": [35, 124, 128, 130], "r_f": [35, 216], "k_f": 35, "y_0": [35, 233, 236], "y_1": [35, 50, 233, 240], "r_b": 35, "k_b": 35, "y_2": [35, 50, 233, 240], "vec": [35, 99, 104, 127, 152, 195, 205, 213, 271, 272, 274], "pyplot": [35, 91, 152], "plt": [35, 91, 152], "y2": [35, 68, 152, 210], "kf": 35, "kb": 35, "rf": [35, 67, 73, 216], "rb": [35, 130, 150, 262], "speci": [35, 67, 68], "ydot": 35, "k_val": 35, "42": [35, 49, 57, 68, 71, 73, 81, 82, 84, 99, 100, 102, 104, 106, 108, 211, 213, 216, 233, 251], "t_eval": 35, "linspac": [35, 49, 91, 109, 135, 152], "50": [35, 50, 59, 71, 72, 73, 76, 84, 104, 108, 111, 112, 158, 189, 216, 220, 229, 238], "concentr": [35, 112, 240], "legend": [35, 152, 206, 223], "NO": [35, 185], "br": 35, "_2": [35, 104, 127, 134, 194, 195, 205, 236], "nobr": 35, "shadow": [35, 61], "xlabel": [35, 206], "ylabel": [35, 206], "annot": [35, 108, 206, 220], "_integr": [35, 236, 237], "separable_integr": [35, 236], "routin": [35, 49, 57, 67, 68, 69, 70, 93, 98, 99, 104, 108, 128, 157, 185, 209, 213, 216, 219, 220, 221, 232, 233, 236, 237, 238, 239, 252, 258, 272], "unintegr": 35, "all_integr": [35, 236, 237], "coupl": [35, 68, 104, 133, 149, 164, 179, 182, 205], "educ": [35, 69, 104], "chaotic": 35, "lorenz": 35, "pendulum": [35, 127, 133, 136, 140, 145, 149, 153, 203, 282], "scienceworld": 35, "theta_1": 35, "theta_2": 35, "2g": 35, "theta1": [35, 139], "theta2": 35, "eq1": [35, 78, 236, 238, 239], "eq2": [35, 78, 98, 236, 239], "interrog": 36, "overconstrain": 36, "solvabl": [37, 59, 115, 127, 233, 236, 239, 298], "groebnerbasi": [37, 208, 216, 219], "lambert": [37, 74, 95, 217], "decompos": [37, 59, 60, 66, 68, 70, 74, 79, 104, 108, 169, 178, 179, 181, 211, 216, 219, 240], "lack": [37, 49, 70, 72, 130, 220, 287], "crootof": [37, 68, 216, 236, 238], "765": [37, 216], "352": [37, 216], "181": [37, 216], "08": [37, 104, 137, 216], "56": [37, 71, 95, 108, 216], "432": [37, 81, 215], "434607": 37, "0509758447494279": 37, "313552108895239": 37, "14751999969868": 37, "estim": [37, 47, 67, 68, 72, 93, 287], "preserv": [37, 48, 49, 59, 68, 104, 183, 209, 211, 216, 221, 222, 232], "77245385090552": 37, "4142135623730951": 37, "risk": 37, "parse_latex": [37, 110], "central": [38, 59, 65, 76, 78, 84, 124, 130, 150, 215, 216, 233, 240], "pypi": 39, "qtconsol": [39, 296], "nicer": [39, 68, 143, 209], "enthought": 39, "deploy": 39, "activepython": 39, "spack": 39, "freshli": 39, "starter": 39, "wherev": [39, 135, 232, 239, 269], "visit": [39, 52, 59, 68, 73, 294], "gitter": [39, 293], "excel": [39, 72, 215, 295], "ticket": 39, "export": [40, 220], "latin": 40, "clunki": 40, "collid": [40, 246], "win": 40, "throwawai": 40, "surviv": 40, "foo": [40, 47, 49, 68, 180, 200, 258, 261], "stick": 40, "_clash1": [40, 68], "_clash2": [40, 68], "multi": [40, 68, 69, 136, 145, 152, 165, 169, 179, 206, 220, 239, 282], "_clash": [40, 68], "sympif": [40, 68], "real_field": 41, "norm": [41, 104, 183, 195, 211, 213, 215, 216], "instanti": [41, 48, 49, 60, 68, 76, 81, 83, 84, 101, 104, 128, 131, 134, 175, 183, 195, 207, 209, 211, 215, 240, 265, 269], "bi": [41, 68, 74, 76, 95, 204, 227, 236], "cj": 41, "dk": [41, 111, 215], "q1": [41, 104, 111, 123, 135, 137, 138, 139, 140, 142, 143, 144, 147, 148, 149, 153, 194, 195, 197, 199, 200, 203, 204, 210, 265, 267], "q2": [41, 111, 123, 135, 137, 138, 139, 140, 142, 143, 144, 147, 148, 153, 194, 195, 197, 199, 200, 203, 204, 210, 265, 267], "euclideanspac": 41, "realnormedalgebra": 41, "q3": [41, 123, 137, 138, 140, 142, 143, 144, 147, 195, 197, 199, 204, 265, 267], "atan_2": 41, "atan": [41, 46, 70, 72, 74, 79, 84, 92, 95, 139, 153, 154, 217, 220, 222], "arc_coplanar": 41, "arc": [41, 74, 134, 297], "coplanar": [41, 82, 204], "parallel": [41, 78, 81, 82, 84, 95, 116, 119, 122, 131, 134, 203, 204, 209, 213, 271, 275], "vector_coplanar": 41, "is_pur": 41, "mathbf": [41, 101, 128, 134, 145, 147, 148, 150, 190, 194, 195, 200, 201, 203, 204, 220, 230, 241, 269, 270, 272, 274, 275], "versor": 41, "0i": 41, "0j": [41, 210], "0k": 41, "vector_part": 41, "vector_onli": 41, "from_axis_angl": 41, "radian": [41, 74, 77, 78, 79, 81, 82, 83, 104, 117, 135, 158, 159, 195], "from_eul": 41, "seq": [41, 59, 68, 71, 104, 211, 213, 216, 226, 238, 258], "intrins": [41, 49], "extrins": 41, "uppercas": [41, 69, 230], "zyz": [41, 195], "from_rotation_matrix": 41, "orthogon": [41, 45, 83, 97, 104, 183, 195, 204, 265, 267], "index_vector": 41, "scalar_part": 41, "is_zero_quaternion": 41, "mensor": 41, "60": [41, 54, 59, 61, 67, 68, 73, 76, 95, 104, 108, 111, 112, 209, 219, 220, 233, 236, 258], "pth": 41, "668": 41, "224": [41, 188, 214], "336": 41, "448": 41, "pow_cos_sin": 41, "900": 41, "1800": [41, 69], "2700": [41, 111], "3600": [41, 73], "product_matrix_left": 41, "hamilton": [41, 52, 99], "to_matrix": [41, 124, 127, 130, 150, 195, 204, 209, 215, 265, 268, 270], "product_matrix_right": 41, "rotate_point": 41, "coordin": [41, 49, 69, 70, 74, 76, 77, 79, 83, 85, 101, 104, 111, 113, 115, 117, 121, 127, 128, 129, 131, 133, 134, 135, 136, 137, 138, 140, 142, 145, 146, 147, 148, 151, 153, 161, 163, 182, 183, 186, 194, 195, 196, 197, 199, 201, 204, 207, 215, 216, 228, 236, 265, 267, 268, 271, 273, 275, 280, 282], "to_axis_angl": 41, "set_norm": 41, "to_eul": 41, "angle_addit": 41, "avoid_square_root": 41, "degener": [41, 238, 239], "gymbal": 41, "lock": 41, "atan2": [41, 46, 70, 74, 159, 220, 265], "bc": [41, 80, 115, 258, 261, 271], "mp": [41, 182, 238, 254], "bd": [41, 115, 185], "1371": 41, "pone": 41, "0276302": 41, "to_rotation_matrix": 41, "assumptionkei": 42, "proposit": [42, 44, 98], "is_tru": [42, 44, 45], "assumptionscontext": [42, 43, 44], "global_assumpt": [42, 43, 44], "discern": [42, 44], "refin": [42, 44, 68, 99, 207, 211, 215, 216, 232, 253, 277], "inherit": [42, 68, 75, 98, 101, 102, 127, 131, 134, 174, 183, 205, 220, 240, 245, 253, 254], "askhandl": 42, "mere": [43, 44, 49, 51, 72, 180], "thin": [43, 104, 141, 154], "undefinedpred": [43, 44], "sexi": [43, 44], "sexyprimepred": [43, 44], "sexyprim": [43, 44], "int1": [43, 44], "int2": [43, 44], "assump": [43, 44], "r5": [43, 232], "predicate_": [43, 44], "28mathematical_log": [43, 44], "r6": 43, "sexy_prim": [43, 44], "resolut": [43, 44, 233], "askpredicatehandl": [43, 44], "r7": 44, "r8": 44, "notabl": [44, 49, 71, 76, 93, 109, 210], "truth_maintenance_system": 44, "istruepred": 45, "gt": [45, 49, 68, 220, 240, 258], "istruehandl": 45, "commutativepred": 45, "commutativehandl": 45, "finitepred": 45, "nor": [45, 47, 68, 98, 134, 159, 206, 209, 216, 227, 229, 236, 246, 265], "nan": [45, 46, 49, 68, 74, 76, 125, 128, 129, 232, 240, 287], "finitehandl": 45, "r9": 45, "infinitepred": 45, "infinitehandl": 45, "symmetricpred": 45, "transpos": [45, 48, 99, 101, 104, 119, 152, 168, 195, 204, 209, 215, 233, 241, 246, 247, 293], "diagon": [45, 73, 99, 100, 101, 104, 107, 133, 157, 209, 242], "symmetrichandl": 45, "r10": 45, "symmetric_matrix": 45, "invertiblepred": 45, "fullrank": [45, 49], "invertiblehandl": 45, "r11": 45, "invertible_matrix": 45, "orthogonalpred": 45, "tm": [45, 158], "mm": [45, 48, 108, 128, 137, 142, 143, 183, 209], "orthogonalhandl": 45, "r12": 45, "orthogonal_matrix": 45, "unitarypred": 45, "unitari": [45, 95, 108, 169, 174, 205], "unitaryhandl": 45, "r13": 45, "unitary_matrix": 45, "positivedefinitepred": 45, "tmz": 45, "positive_definit": 45, "positivedefinitehandl": 45, "r14": 45, "definite_matrix": 45, "uppertriangularpred": 45, "m_": [45, 148, 205, 213, 242], "ij": [45, 104, 185, 190, 205, 240, 242], "zeromatrix": [45, 101], "upper_triangular": [45, 99], "uppertriangularhandl": 45, "r15": 45, "uppertriangularmatrix": 45, "lowertriangularpred": 45, "lower_triangular": [45, 99], "lowertriangularhandl": 45, "r16": 45, "lowertriangularmatrix": 45, "diagonalpred": 45, "diagonalhandl": 45, "r17": 45, "diagonal_matrix": 45, "fullrankpred": 45, "rank": [45, 49, 50, 52, 57, 59, 60, 62, 63, 64, 83, 97, 104, 105, 195, 197, 207, 209, 211, 213, 215, 241, 245, 246, 293], "linearli": [45, 49, 76, 92, 104, 128, 209, 213, 236, 238, 246], "fullrankhandl": 45, "squarepred": 45, "squarehandl": 45, "r18": 45, "square_matrix": 45, "integerelementspred": 45, "integer_el": 45, "integerelementshandl": 45, "realelementspred": 45, "real_el": 45, "realelementshandl": 45, "complexelementspred": 45, "complex_el": 45, "complexelementshandl": 45, "singularpred": 45, "singular": [45, 49, 60, 68, 72, 74, 75, 76, 90, 91, 93, 95, 104, 111, 114, 149, 195, 207, 214, 227, 236, 239, 265, 282, 287], "singularhandl": 45, "fore": 45, "r19": 45, "singularmatrix": 45, "normalpred": 45, "normalhandl": 45, "r20": 45, "normal_matrix": 45, "triangularpred": 45, "triangularhandl": 45, "r21": 45, "triangular_matrix": 45, "unittriangularpred": 45, "unit_triangular": 45, "unittriangularhandl": 45, "evenpred": 45, "evenhandl": 45, "oddpred": 45, "oddhandl": 45, "primehandl": 45, "subject": [45, 68, 78, 84, 112, 123, 153, 215], "compositepred": 45, "compositehandl": 45, "positivepred": 45, "positivehandl": 45, "negativepred": 45, "negativehandl": 45, "zeropred": 45, "zerohandl": 45, "nonzeropred": 45, "nonzerohandl": 45, "nonpositivepred": 45, "nonpositivehandl": 45, "nonnegativepred": 45, "nonnegativehandl": 45, "integerpred": 45, "integerhandl": 45, "r22": 45, "rationalpred": 45, "rationalhandl": 45, "r23": 45, "irrationalpred": 45, "irrationalhandl": 45, "r24": 45, "realpred": 45, "disjoint": [45, 48, 57, 60, 216, 228, 258], "realhandl": 45, "r25": 45, "extendedrealpred": 45, "extendedrealhandl": 45, "hermitianpred": 45, "hermitianhandl": 45, "r26": 45, "hermitianoper": [45, 174], "complexpred": 45, "complexhandl": 45, "r27": 45, "imaginarypred": 45, "imaginaryhandl": 45, "r28": 45, "antihermitianpred": 45, "antihermitianhandl": 45, "r29": 45, "algebraicpred": 45, "askalgebraicpredicatehandl": 45, "r30": 45, "algebraichandl": 45, "transcendentalpred": 45, "transcedent": 45, "refine_pow": 46, "refine_ab": 46, "refine_arg": 46, "refine_atan2": 46, "refine_im": 46, "refine_matrixel": 46, "refine_r": 46, "refine_sign": 46, "lagrang": [47, 68, 126, 127, 129, 133, 141, 145, 216, 233, 282], "lagrangian": [47, 128, 130, 139, 144, 148, 149], "euler_equ": 47, "r31": 47, "93lagrange_equ": 47, "decreas": [47, 49, 60, 213], "monoton": [47, 49, 85], "is_decreas": 47, "lopen": [47, 68, 228, 235, 240], "ropen": [47, 74, 228, 240], "is_increas": 47, "72": [47, 51, 68, 81, 104, 108, 111, 205, 219], "is_monoton": 47, "is_strictly_decreas": 47, "is_strictly_increas": 47, "monotonicity_help": 47, "held": [47, 69, 149, 244, 297], "r32": 47, "mathematical_singular": 47, "interpol": [47, 73, 77, 152, 213, 216], "finite_diff_weight": [47, 68, 287], "apply_finite_diff": [47, 68, 287], "differentiate_finit": [47, 68, 287], "finite_diff": [47, 68], "x_list": [47, 287], "y_list": [47, 287], "xlist": 47, "55271367880050e": 47, "indexedbas": [47, 49, 67, 68, 220, 238, 244, 245, 252], "idx": [47, 49, 220, 244, 245, 252], "region": [47, 76, 85, 95, 206, 228, 236, 239, 240, 265, 268, 275], "bewar": [47, 76], "phenomenon": [47, 190, 213, 223, 292], "90": [47, 59, 66, 76, 99, 104, 110, 111, 115, 123, 135, 153, 220, 222, 232, 240, 253], "finitediff": 47, "wrt": [47, 49, 68, 70, 76, 85, 104, 135, 152, 195, 196, 213, 216, 265, 267, 268, 272], "len": [47, 56, 57, 58, 59, 60, 64, 66, 68, 69, 73, 76, 83, 93, 98, 139, 154, 158, 169, 179, 209, 216, 232, 236, 245, 258], "nearest": [47, 215], "furthest": [47, 69], "sublist": [47, 64, 69, 95, 182, 287], "fd": [47, 49, 185], "0th": [47, 60, 69, 76], "forward": [47, 49, 99, 119, 137, 145, 178, 203, 232, 251], "pai": 47, "attent": [47, 59, 74], "gridpoint": 47, "plan": [47, 123, 211, 296], "mycoeff": 47, "3rd": [47, 60, 74, 108, 152, 216, 238, 241, 258], "poorer": 47, "grand": 47, "r33": 47, "51": [47, 104, 108], "184": [47, 236], "1988": [47, 164, 182, 213, 214], "699": 47, "706": [47, 104], "1090": [47, 108, 216], "s0025": 47, "5718": [47, 108], "0935077": 47, "continuous_domain": [47, 235], "function_rang": 47, "is_convex": [47, 84], "convex": [47, 84, 85, 95], "unspecifi": [47, 68, 83, 287], "multivari": [47, 68, 76, 207, 208, 210, 211, 212, 214, 216, 217, 227, 232, 238, 239, 240, 297], "concav": [47, 154], "r34": 47, "convex_funct": 47, "r35": 47, "ifp": 47, "illinoi": 47, "angelia": 47, "l3_convfunc": 47, "r36": 47, "logarithmically_convex_funct": 47, "r37": 47, "logarithmically_concave_funct": 47, "r38": 47, "concave_funct": 47, "lcim": 47, "mixtur": [47, 49, 85, 207, 253], "incommensur": 47, "not_empty_in": [47, 239], "finset_intersect": 47, "finite_set": [47, 228], "aperiod": 47, "smallest": [47, 62, 74, 81, 83, 90, 98, 104, 108, 182, 195, 211, 256, 258], "verif": [47, 209, 238], "reliabl": [47, 68, 236, 256, 287], "stationary_point": 47, "stationari": [47, 240], "tikz": 48, "joyofcat": 48, "adamek": 48, "herrlich": 48, "strecker": 48, "joi": 48, "cat": [48, 194], "katmat": 48, "uni": [48, 95, 258], "bremen": 48, "acc": [48, 152, 199, 203], "embryon": 48, "morphism": [48, 207], "codomain": [48, 207, 215], "arrow": [48, 97, 111, 206, 220], "namedmorph": 48, "prohibit": [48, 60, 61, 195], "identitymorph": 48, "compositemorph": 48, "compos": [48, 68, 69, 139, 149, 187, 190, 203, 207, 211, 215, 216, 217, 220, 222, 232], "circ": [48, 68, 79, 85, 93, 101], "flatten": [48, 68, 210, 242, 247, 258, 259], "new_nam": 48, "id_a": 48, "id_b": 48, "commutative_diagram": 48, "quadrupl": [48, 216], "mbox": 48, "hom": 48, "id": [48, 64, 74, 242], "rightarrow": [48, 60, 64, 69, 73, 74, 76, 90, 91, 93, 95, 98, 99, 108, 206, 215, 227, 239, 242, 258, 287], "monoid": 48, "pare1970": 48, "premis": 48, "conclus": [48, 68], "carri": [48, 49, 68, 177, 183, 190, 207, 210, 213, 215, 217, 218, 259], "premises_kei": 48, "et": [48, 95, 164, 213, 216, 217, 229, 232], "pareigi": 48, "functor": 48, "1970": [48, 104], "is_subdiagram": 48, "subdiagram": 48, "d1": [48, 64, 195, 207, 227, 240, 265], "subdiagram_from_object": 48, "veryuniqu": 48, "diagram_draw": 48, "diagramgrid": 48, "drawn": [48, 59, 97, 206, 210, 218], "moprhism": 48, "strive": 48, "nevertheless": 48, "laid": [48, 135, 182], "emploi": [48, 67, 72, 95, 108, 216, 219, 236, 240], "lai": 48, "layout": 48, "sequenti": [48, 52, 69, 74, 265, 267], "test_draw": 48, "lemma": [48, 59, 93, 208], "fivelemma": 48, "five_lemma": 48, "arrowstringdescript": 48, "curving_amount": 48, "looping_start": 48, "looping_end": 48, "horizontal_direct": 48, "vertical_direct": 48, "label_posit": 48, "pic": 48, "princip": [48, 69, 74, 76, 93, 95, 105, 121, 137, 158, 207, 208, 209, 210, 211, 213, 215, 216, 217], "offset": [48, 49, 68, 73, 76, 245], "cell": 48, "disregard": 48, "unexplain": 48, "astr": 48, "dr": [48, 70, 220, 236], "12mm": 48, "correspondingli": 48, "label_displac": 48, "arrow_styl": 48, "dash": 48, "xypicdiagramdraw": 48, "formatt": 48, "utilis": 48, "xypic": 48, "drawer": 48, "xymatrix": 48, "ld": 48, "arrow_formatt": 48, "therebi": 48, "default_arrow_formatt": 48, "farther": 48, "centr": [48, 65, 206], "default_formatt": 48, "_3mm": 48, "default_curving_amount": 48, "cm": [48, 152, 240], "_1cm": 48, "default_curving_step": 48, "1cm": 48, "rr": [48, 68, 86, 209, 210, 216, 217], "h_": [48, 59, 64, 73, 76, 95], "_2cm": 48, "mask": [48, 220], "diagram_format": 48, "proceed": [48, 50, 93, 95, 151, 214, 230], "xypic_draw_diagram": 48, "insert": [48, 50, 99, 110, 111, 180, 185, 220, 240, 261], "preview_diagram": 48, "fab": [49, 220], "cse_main": [49, 221, 232], "cse": [49, 109, 123, 174, 221, 232, 253, 259], "meat": 49, "lightweight": [49, 215, 291], "pycod": [49, 220], "lambdarepr": [49, 220, 259], "aesara_funct": [49, 109, 220], "float80": [49, 220], "assign_to": [49, 220], "type_alias": [49, 220], "0l": [49, 220], "powl": [49, 220], "c99": [49, 220, 253], "expm1": [49, 220], "thrown": [49, 220], "fcode": [49, 220], "contract": [49, 70, 120, 185, 220, 229, 242, 244, 245, 246, 247], "len_i": [49, 220], "mat_1": 49, "mat_2": 49, "jscode": [49, 220], "user_funct": [49, 220], "argument_test": [49, 220], "cfunction_str": [49, 220], "octav": [49, 152, 253], "custom_funct": [49, 220], "existing_octave_fcn": [49, 220], "is_matrix": [49, 220], "my_mat_fcn": [49, 220], "my_fcn": [49, 220], "mat": [49, 101, 154, 179, 220], "octave_cod": [49, 220], "summat": [49, 67, 68, 72, 73, 76, 185, 214, 216, 220, 223, 232, 240, 241, 244, 245, 246, 252], "mathematica_cod": [49, 220], "gamma_1": [49, 122], "gamma_2": [49, 122], "\u03b3\u2081": 49, "\u03b3\u2082": 49, "\u03b2": [49, 205], "h_i": [49, 64], "c89": [49, 220, 253], "julia_cod": [49, 220], "rust_cod": [49, 220], "powi": [49, 220], "make_routin": [49, 253], "f95": [49, 252, 253], "matlab": [49, 123, 152, 253, 293], "breadth": [49, 68, 240], "c_name": [49, 253], "c_code": [49, 253], "h_name": [49, 253], "c_header": [49, 253], "volume_result": 49, "ifndef": [49, 253], "project__test__h": [49, 253], "endif": [49, 253], "preprocessor": [49, 221, 232, 253], "global_var": [49, 253], "insensit": [49, 104, 152, 220, 251, 253], "argument_sequ": [49, 253], "name_expr": [49, 253], "to_fil": [49, 253], "f_name": [49, 253], "f_code": [49, 253], "hydrogen": [49, 282], "r_nl": [49, 121, 186], "my_routin": 49, "result_var": [49, 253], "result\u2085\u2081\u2084\u2082\u2083\u2084\u2081\u2086\u2088\u2081\u2083\u2089\u2087\u2087\u2081\u2089\u2084\u2082\u2088": 49, "__________": [49, 208], "assoc_laguerr": [49, 76, 220], "fcn": [49, 253], "result_5397460570204848505": [49, 253], "out_8598435338387848786": [49, 253], "examin": [49, 69, 174, 251, 253, 297], "inputargu": [49, 253], "outputargu": [49, 253], "inoutargu": [49, 253], "disk": [49, 69, 228, 239, 259], "binary_funct": [49, 109, 252], "tensor": [49, 55, 70, 104, 120, 130, 150, 164, 170, 171, 172, 182, 185, 194, 195, 220, 241, 242, 244, 245, 252, 259, 269, 270, 276, 277, 280, 282], "binary_func": [49, 252], "servic": 49, "tempdir": [49, 252], "qho_1d": [49, 161], "psi_n": [49, 161], "qho": 49, "tmp": 49, "subroutin": [49, 59, 181, 213], "autofunc": 49, "hbar": [49, 161, 167, 180, 186, 190, 192, 205], "05457162d": 49, "14159265358979d0": 49, "0d0": [49, 220], "74126166983329d": 49, "33": [49, 68, 71, 104, 129, 158, 194, 209, 213, 217, 220, 240], "mute": [49, 252], "backend": [49, 96, 109, 110, 117, 133, 138, 140, 146, 200, 217, 252, 259], "auxiliari": [49, 95, 128, 135, 147, 236, 252], "sympy_express": [49, 252], "mandatori": [49, 220, 252], "illustr": [49, 104, 136, 139, 190, 210, 223, 227], "psi_nl": 49, "766": 49, "incur": [49, 109], "get_numpy_arrai": 49, "tight": 49, "temp": [49, 137], "alloc": [49, 74], "fuse": 49, "wise": [49, 50, 74, 99, 209, 213, 220, 226, 252], "unabl": [49, 81, 85, 110, 238, 265, 286, 287], "fortun": [49, 109, 139, 216, 217], "reconnect": 49, "autom": [49, 74, 109, 229, 252, 291], "ideologi": [49, 239], "broadcast": [49, 109, 220, 245, 252], "outperform": 49, "quantit": [49, 187], "ufunc": [49, 109, 252, 259], "fn_numpi": 49, "fn_fortran": 49, "xx": [49, 104, 130, 195, 204, 258], "21306132": 49, "98101184": 49, "44626032": 49, "timeit": [49, 217], "10000": [49, 72, 108, 109, 111, 238], "18891601900395472": 49, "004707066000264604": 49, "facil": 49, "comparison": [49, 67, 68, 98, 104, 135, 207, 215, 219, 238, 251, 258], "thereof": [49, 68, 207, 213, 215], "optims_c99": 49, "log1p": [49, 220], "expm1_opt": 49, "log1p_opt": 49, "exp2_opt": 49, "log2_opt": 49, "log2const_opt": 49, "funcminusoneoptim": 49, "func_m_1": 49, "opportunist": 49, "replaceoptim": 49, "catastroph": 49, "replace_in_add": 49, "cost_funct": 49, "__call__": [49, 60, 68, 215], "exp2": [49, 220], "create_expand_pow_optim": 49, "base_req": 49, "is_symbol": [49, 99], "expand_opt": 49, "opt2": 49, "is_funct": 49, "log2": [49, 76, 220], "matin_opt": 49, "matinv_opt": 49, "matrixsolv": [49, 220], "matrix_nod": 49, "numpyprint": 49, "doprint": [49, 220], "seriesapprox": 49, "reltol": 49, "max_ord": 49, "n_point_check": 49, "threshold": [49, 108], "largest": [49, 60, 62, 68, 74, 76, 104, 107, 108, 165, 207, 211, 238, 258], "series_approx2": 49, "1e": [49, 68, 72, 104, 117, 154, 216, 238], "series_approx3": 49, "series_approx8": 49, "sumapprox": 49, "neglect": 49, "2000": [49, 54, 95, 108, 214], "sum_approx3": 49, "sum_approx2": 49, "sum_approx1": 49, "token": [49, 93, 96, 110], "codegenast": 49, "assignmentbas": 49, "augmentedassign": 49, "addaugmentedassign": 49, "subaugmentedassign": 49, "mulaugmentedassign": 49, "divaugmentedassign": 49, "modaugmentedassign": 49, "codeblock": [49, 110], "quotedstr": 49, "intbasetyp": 49, "_sizedinttyp": 49, "signedinttyp": 49, "unsignedinttyp": 49, "floatbasetyp": 49, "floattyp": 49, "complexbasetyp": 49, "complextyp": 49, "pointer": [49, 253, 254], "functionprototyp": 49, "functiondefinit": [49, 110], "stream": [49, 69, 221, 232, 258], "functioncal": 49, "breaktoken": 49, "continuetoken": 49, "nonetoken": 49, "float32": [49, 109, 110, 259], "codeprint": 49, "complex_": 49, "bool_": 49, "intc": [49, 110], "intp": 49, "unsign": [49, 73, 232], "int8": 49, "int16": 49, "int32": 49, "int64": [49, 240], "uint8": 49, "uint16": 49, "uint32": 49, "uint64": 49, "x86": 49, "amd64": 49, "complex64": 49, "complex128": 49, "newton": [49, 76, 145, 188, 192, 213, 217], "aug_assign": 49, "tol": [49, 68, 211], "val": [49, 68, 80, 206, 211, 215, 259], "whl": 49, "py_str": 49, "inf": [49, 60, 68, 104, 211, 216, 228, 236, 240], "exec": [49, 68, 96, 259], "1121416371": 49, "909672693737": 49, "867263818209": 49, "865477135298": 49, "865474033111": 49, "1g": 49, "3e": 49, "2003": [49, 205, 214, 220, 233], "source_format": [49, 220], "op": [49, 68, 104, 174, 185, 199, 203, 229, 258, 259], "parametr": [49, 76, 77, 81, 104, 206, 233, 239, 265, 268, 275], "volatil": 49, "binop": 49, "exit": [49, 108, 251], "premad": 49, "break_": 49, "lift": [49, 64, 74, 76, 93, 211, 213, 216], "left_hand_sid": 49, "topological_sort": [49, 258], "postprocess": [49, 206, 216, 221, 232], "topolog": [49, 68, 70, 209, 258], "continue_": 49, "untyp": 49, "compliant": 49, "elem": [49, 59, 207], "ijk": [49, 245], "stride": [49, 245], "lmn": 49, "cast_nocheck": 49, "nbit": 49, "storag": [49, 68, 104, 179, 205, 213], "nmant": 49, "mantissa": 49, "nexp": 49, "half_precis": 49, "f16": 49, "65504": 49, "tini": [49, 68, 211], "ep": [49, 59, 67, 211, 215, 216], "decimal_dig": 49, "cast_check": 49, "1e5": 49, "cast": [49, 101, 289], "subnorm": [49, 59], "idempot": 49, "loos": [49, 68], "overflow": [49, 255], "max_expon": 49, "min_expon": 49, "for_i": 49, "for_ji": 49, "for_kji": 49, "function_arg": [49, 251], "fcall": 49, "baz": 49, "return_typ": 49, "fp": [49, 50, 68, 216, 222], "from_functionprototyp": 49, "prototyp": [49, 109, 253], "value_const": 49, "pointer_const": 49, "attr_param": 49, "looking_for": 49, "as_declar": 49, "formatstr": 49, "5g": 49, "throw": [49, 104, 110, 135, 209, 215, 233, 239], "runtimeerror_": 49, "runtime_error": 49, "stdout": [49, 51, 251], "stderr": 49, "oppos": [49, 259, 287], "_field": 49, "_construct_": 49, "not_in_arg": 49, "float16": 49, "inttyp": 49, "super": [49, 76, 211, 220, 265, 267], "from_expr": [49, 216], "v6": 49, "123456": [49, 68, 108], "v10": 49, "67894": 49, "boost_mp50": 49, "boost": 49, "multiprecis": [49, 210], "cpp_dec_float_50": 49, "r39": 49, "rtol": 49, "atol": 49, "precision_target": 49, "v18": 49, "123456789012345646": 49, "123456789012345649": 49, "Will": [49, 104, 110, 215, 220, 251], "decl1": 49, "decl2": 49, "alt": [49, 215], "secondarili": [49, 216], "mathcin": 49, "cbrt": [49, 74, 220], "minu": [49, 67, 68, 201, 209, 213, 220, 272], "0e": [49, 68], "fma": [49, 220], "hypot": [49, 220], "hypotenus": [49, 84, 134], "log10": [49, 220], "ten": [49, 109], "plu": [49, 67, 104, 110, 152, 165, 216, 220, 230, 258, 259], "famili": [49, 52, 86, 95, 208], "commaoper": 49, "goto": 49, "preincrement": 49, "postdecr": 49, "decrement": [49, 255], "postincr": 49, "increment": [49, 59, 60, 61, 67, 84, 108, 240], "predecr": 49, "alignof": 49, "sizeof": 49, "struct": [49, 205], "dsign": 49, "arrayconstructor": 49, "95": [49, 66, 108, 213, 220, 236, 238, 253], "do1": 49, "1d0": 49, "do2": 49, "extent": 49, "intent_out": 49, "dim": [49, 70, 83, 104, 109, 187, 193, 220, 243, 246, 280], "arr": 49, "fortranreturn": 49, "aid": [49, 137], "implieddoloop": 49, "idl": 49, "signallib": 49, "prog": [49, 164], "myprogram": 49, "mysub": 49, "subroutinecal": 49, "inout": 49, "bind_c": 49, "sum_": [49, 67, 68, 69, 73, 76, 93, 95, 99, 101, 108, 205, 216, 217, 222, 223, 230, 236, 240], "cmplx": [49, 220], "intent_in": 49, "isign": 49, "lbound": 49, "lb": [49, 90, 255], "literal_dp": 49, "num": [49, 59, 68, 108, 119, 211, 232, 236, 255, 261], "literal_sp": 49, "reshap": [49, 99, 135, 152, 241, 247, 258], "arrayexpr": 49, "shp": 49, "metric": [49, 60, 64, 70, 120, 232, 236, 239, 246], "snr": 49, "convolution2d": 49, "use_renam": 49, "ren": 49, "thingi": 49, "newtons_method": 49, "itermax": 49, "counter": [49, 68, 74, 80, 99, 112, 113, 115], "delta_fn": 49, "handle_nan": 49, "raphson": 49, "criterion": [49, 59, 151, 208, 213], "hallei": 49, "occurr": [49, 50, 68, 108, 135, 195, 232, 240], "netwon": 49, "algo": [49, 60], "r40": 49, "27s_method": 49, "newtons_method_funct": 49, "param": [49, 70, 104, 206, 233], "render_as_modul": 49, "py_mod": 49, "865474033102": 49, "render_as_source_fil": 49, "printer_set": 49, "fcodeprint": [49, 220], "fpgroup": [50, 59], "studi": [50, 58, 67, 70, 104, 204, 207, 213, 216, 233, 240], "combinator": [50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 73, 101, 108, 215, 222, 241, 246, 255, 258, 277, 291, 297], "free_group": [50, 58, 59], "vfree_group": 50, "xfree_group": 50, "fp_group": [50, 59], "coset_enumeration_r": 50, "fall": [50, 67, 68, 73, 96, 119, 200, 215, 220, 233, 237, 240], "famou": [50, 76, 95, 108, 233], "langl": [50, 59, 164, 205], "rangl": [50, 59, 164, 182, 205], "gen0": 50, "gen1": 50, "gen_": 50, "freegroup": 50, "x_2": [50, 58, 73, 90, 180, 208, 213, 216, 222, 233, 239], "x_3": [50, 58, 90, 180], "s_1": [50, 258], "r_1": [50, 207, 217], "s_2": 50, "r_2": 50, "s_k": 50, "r_k": [50, 178], "s_i": [50, 64, 95, 97], "r_i": [50, 217], "reduct": [50, 104, 129, 209, 213, 215, 233], "ho05": [50, 58], "cdhw73": 50, "consult": 50, "hav91": 50, "coset_enumeration_c": 50, "coset_enumer": 50, "relator_bas": 50, "coset_table_bas": 50, "coset_table_max_limit": 50, "4096000": 50, "safeti": [50, 60, 102], "max_coset": 50, "cox": [50, 214, 216], "c_r": [50, 230], "max_stack_s": 50, "500": [50, 72, 130], "deduction_stack": 50, "stack": [50, 85, 99, 133, 152, 209, 215, 220, 249, 255, 293], "exce": [50, 108, 246, 259], "modest": 50, "low_index_subgroup": 50, "conjugaci": [50, 51, 59], "coset_t": [50, 59], "reidemeister_present": 50, "p1": [50, 59, 60, 64, 67, 78, 80, 81, 82, 83, 84, 111, 119, 124, 127, 130, 134, 139, 152, 154, 199, 206, 210, 211, 213, 217, 229, 240, 241], "john": [50, 59, 76, 216, 233, 236], "cannon": 50, "lucien": 50, "dimino": [50, 59], "georg": [50, 207, 209, 236, 258], "hava": 50, "jane": 50, "watson": [50, 232], "comp": [50, 108, 236], "463": [50, 151], "490": [50, 60], "1973": [50, 69, 202], "derek": [50, 58], "holt": [50, 58, 59, 66], "chapman": [50, 58], "hall": [50, 58, 240], "crc": [50, 58, 60], "2005": [50, 58, 95, 108, 216], "xvi": [50, 58], "514": [50, 58, 214], "symposium": [50, 93, 213, 214, 230], "issac": [50, 95, 214, 238], "bonn": 50, "1991": [50, 214], "191": [50, 239], "199": 50, "acm": [50, 67, 93, 95, 209, 211, 214, 230, 232, 236, 238], "transit": [51, 59, 152, 213, 240], "subgroup": [51, 59, 60, 64, 66, 97, 108], "permutationgroup": [51, 53, 56, 58, 59, 60, 65, 66, 215], "s_n": [51, 67, 216, 258], "enum": [51, 215, 257, 284], "get_perm_group": [51, 215], "r41": 51, "cohen": [51, 105, 209, 214, 215], "s6transitivesubgroup": [51, 211], "qualnam": 51, "boundari": [51, 79, 81, 111, 112, 199, 217, 228, 236, 240], "s6": 51, "s5transitivesubgroup": 51, "s5": [51, 59], "s4transitivesubgroup": [51, 215, 216], "s4": [51, 60, 119], "s3transitivesubgroup": 51, "s3": [51, 59, 67, 119, 223, 233], "s2transitivesubgroup": [51, 215], "s1transitivesubgroup": [51, 215], "four_group": 51, "klein": [51, 60], "m20": 51, "metacycl": 51, "323": [51, 76, 108], "s3_in_s6": 51, "prism": 51, "a4_in_s6": 51, "a4": [51, 64, 68, 97, 152, 297], "find_transitive_subgroups_of_s6": 51, "s4m": 51, "s4p": 51, "a4xc2": 51, "s4xc2": 51, "g18": 51, "isomorph": [51, 59, 62, 207, 210, 213, 215], "semidirect": 51, "g36m": 51, "g36": 51, "g36p": 51, "c4": [51, 97, 99, 101, 236], "g72": 51, "d4": [51, 97, 216, 240], "325": 51, "psl2f5": 51, "psl_2": 51, "_5": [51, 207], "a_5": 51, "pgl2f5": 51, "pgl_2": 51, "s_5": 51, "print_report": 51, "s_6": 51, "dihedr": [51, 56, 59, 60], "d_6": 51, "s_4": 51, "absenc": [51, 64, 98], "a_4": 51, "engag": 51, "eleg": [51, 217, 219], "a_6": 51, "g_": [51, 59, 66, 67, 76, 93, 104, 233], "c_3": [51, 93, 236], "rtime": 51, "c_4": [51, 93], "d_4": 51, "r43": 51, "projective_linear_group": 51, "exceptional_isomorph": 51, "r44": [51, 52], "automorphisms_of_the_symmetric_and_alternating_group": 51, "pgl": 51, "282": 51, "graycod": 52, "kw_arg": [52, 62, 185, 245, 246], "hamiltonian": [52, 176], "edg": [52, 61, 62, 97, 209, 220, 239, 258, 296], "vertex": [52, 62, 79, 84, 95, 209], "000": [52, 72, 95, 98, 179, 258], "110": [52, 98, 236, 238, 252, 258], "010": [52, 98, 258], "011": [52, 98, 179, 258], "111": [52, 71, 78, 98, 104, 108, 258], "101": [52, 76, 98, 108, 179, 258], "001": [52, 72, 98, 154, 258], "statist": [52, 69, 76, 240, 251, 291], "generate_grai": 52, "0000": 52, "0001": [52, 72], "0011": [52, 63], "0010": 52, "0110": 52, "0111": [52, 179], "0101": [52, 179], "0100": 52, "1100": 52, "1101": 52, "1111": 52, "1110": 52, "1010": 52, "1011": 52, "1001": 52, "nijenhui": 52, "wilf": [52, 67, 238], "1978": [52, 59, 190, 214], "r45": 52, "knuth": [52, 60, 255], "2011": [52, 60, 93, 104, 108, 202, 229], "art": [52, 60, 207, 220, 222, 255], "vol": [52, 60, 69, 73, 76, 93, 104, 108, 120, 129, 215, 216, 230, 255, 258], "addison": [52, 60, 108, 214], "weslei": [52, 60, 108, 214], "r46": 52, "brgc": 52, "6th": [52, 108], "unrank": [52, 57, 59, 60, 62], "r47": 52, "archiv": [52, 60, 69, 73, 76, 85, 95, 108, 151, 209, 232, 233, 240, 258, 293], "20200224064753": 52, "statweb": 52, "stanford": 52, "susan": 52, "s208": 52, "node12": 52, "tail": [52, 67, 68, 211, 240], "00010": 52, "random_bitstr": 52, "bitlist": [52, 63], "gray_to_bin": 52, "endian": 52, "bin_to_grai": 52, "get_subset_from_bitstr": 52, "bitstr": 52, "graycode_subset": 52, "group_construct": 53, "directproduct": [53, 56], "__mul__": [53, 59, 99, 104, 211, 215], "shift": [53, 59, 60, 62, 69, 76, 79, 83, 85, 98, 206, 211, 213, 216, 223, 230, 238, 240], "gn": 53, "named_group": [53, 56, 58, 59, 65, 66], "cyclicgroup": [53, 56, 59], "perm_group": [53, 58, 59, 60, 65, 66], "group_numb": 54, "is_nilpotent_numb": 54, "r48": 54, "randprim": [54, 108], "pakianathan": 54, "shankar": 54, "monthli": [54, 69, 104], "107": [54, 214], "631": 54, "634": 54, "is_abelian_numb": 54, "r49": 54, "is_cyclic_numb": 54, "r50": 54, "polyhedron": [55, 59, 95, 258, 277], "prufer": [55, 277], "grai": [55, 63, 96, 154, 200, 206, 277], "galoi": [55, 210, 211, 213, 216, 277], "nilpot": [55, 59, 104, 277], "abelian": [55, 56, 59, 97, 190, 207, 277], "cyclic": [55, 56, 59, 60, 61, 71, 99, 108, 246, 258, 277], "polycycl": [55, 59, 277], "symmetricgroup": [56, 58, 59, 65, 66], "transposit": [56, 59, 60, 69, 99, 101, 242], "is_group": [56, 59], "generate_schreier_sim": [56, 59], "af": [56, 59, 65, 152], "dihedralgroup": [56, 59, 66], "alternatinggroup": [56, 59, 65], "r51": 56, "symmetric_group": 56, "generators_and_rel": 56, "d_n": [56, 97, 216], "gon": 56, "bab": 56, "generate_dimino": [56, 59], "perm": [56, 58, 59, 60, 61, 66, 73, 99, 101, 104, 241], "cyclic_form": [56, 60, 61], "r52": 56, "dihedral_group": [56, 59], "ex": [56, 95, 120, 133, 210, 215, 216, 246, 254], "r53": 56, "armstrong": 56, "abeliangroup": [56, 59], "cyclic_ord": 56, "r54": 56, "groupprop": [56, 59], "subwiki": [56, 59], "structure_theorem_for_finitely_generated_abelian_group": 56, "multiset_partit": [57, 73, 93, 255, 258], "rg": 57, "growth": [57, 108, 209, 213, 287], "from_rg": 57, "abcd": [57, 61, 185, 242, 258, 261], "cbead": 57, "sort_kei": [57, 68, 236], "ti": [57, 60, 68, 108], "integerpartit": [57, 258], "summand": [57, 215], "r55": 57, "partition_": [57, 73], "28number_theori": 57, "as_dict": [57, 210, 216], "as_ferr": 57, "char": 57, "ferrer": 57, "next_lex": [57, 60], "lexic": [57, 165, 258], "prev_lex": 57, "random_integer_partit": 57, "85": [57, 72, 73, 104, 108, 137, 183, 205, 240], "rgs_gener": 57, "37": [57, 69, 74, 78, 104, 108, 112, 205, 220, 233], "52": [57, 73, 108, 111, 112, 205, 219, 233, 236, 258, 287], "151": 57, "203": [57, 73, 209], "rgs_enum": 57, "rgs_unrank": 57, "rgs_rank": 57, "pcgroup": 58, "pcg": 58, "pc_seri": [58, 59], "polycyl": 58, "pc_present": 58, "pc_sequenc": [58, 59], "miss": [58, 59, 85, 209, 220, 238, 253, 297], "adjac": [58, 59, 60, 68, 73, 119, 157, 209, 258], "der": [58, 59], "relative_ord": [58, 59], "polycyclic_group": [58, 59], "gen": [58, 59, 64, 65, 66, 68, 104, 207, 210, 211, 213, 215, 216, 217, 218, 226, 232, 235, 238], "is_ident": [58, 60, 68], "poss": [58, 137, 204], "pc_group": 58, "a_j": [58, 76, 93, 190, 213, 222, 230], "notin": [58, 93, 228], "_order": 58, "minimal_uncollected_subword": 58, "subword_index": 58, "i_1": [58, 185, 216, 241], "a_1": [58, 59, 69, 76, 90, 93, 99, 104, 120, 185, 190, 208, 213, 230, 233, 236, 240, 297], "i_r": 58, "a_r": [58, 230], "i_2": [58, 185, 216], "s_": [58, 64, 135, 213], "s_j": [58, 97, 213], "x3": [58, 68, 73, 210, 236, 240], "collected_word": 58, "free_to_perm": 58, "pictur": [58, 220], "x_3x_2": 58, "x_3x_1": 58, "x_2x_1": 58, "x_3x_0": 58, "x_2x_0": 58, "x_1x_0": 58, "varii": 58, "derived_seri": [58, 59], "pc_resent": 58, "k_arrai": 58, "array_form": [58, 60, 61, 242], "v_arrai": 58, "e_1": [58, 104, 207, 213, 216], "e_n": [58, 73, 97, 104, 161, 207, 216], "exponent_vector": 58, "leading_expon": 58, "dup": [59, 211], "pn": [59, 139, 149], "motion": [59, 123, 127, 128, 129, 131, 133, 137, 138, 139, 140, 142, 144, 145, 146, 147, 148, 149, 152, 153, 199, 200, 203, 204, 240], "front": [59, 68, 137, 138, 154, 184, 211, 213, 216, 220, 232, 297], "face": [59, 61, 81, 95, 135, 213, 217, 220, 233, 275, 293], "rubik": 59, "3674160": 59, "pgroup": [59, 61], "p10": 59, "make_perm": 59, "r56": 59, "eick": [59, 66], "brien": [59, 66], "r57": 59, "seress": 59, "r58": 59, "schreier_vector": 59, "r59": 59, "nielsen_transform": 59, "product_replacement_algorithm": 59, "r60": 59, "frank": [59, 60, 104, 258], "celler": 59, "charl": 59, "leedham": 59, "scott": 59, "murrai": [59, 209], "alic": [59, 69], "niemey": 59, "r61": 59, "block_": 59, "28permutation_group_theori": 59, "r62": 59, "algorithmist": 59, "union_find": 59, "r63": 59, "multiply_transitive_group": 59, "r64": 59, "center_": 59, "28group_theori": 59, "centralizer_and_norm": 59, "derived_subgroup": 59, "nilpotent_group": 59, "colost": 59, "hulpk": 59, "cgt": 59, "cgtnote": 59, "__contains__": 59, "__weakref__": [59, 99], "weak": [59, 68, 99, 128, 210, 213], "_coset_repres": 59, "hg": 59, "transvers": [59, 64, 66, 113, 158, 159], "coset_transvers": 59, "_distinct_primes_lemma": 59, "_element": 59, "_eval_is_alt_sym_monte_carlo": 59, "05": [59, 90, 117, 202, 205], "mont": 59, "carlo": 59, "n_ep": 59, "_check_cycles_alt_sym": [59, 66], "_eval_is_alt_sym_na": 59, "only_sym": 59, "only_alt": 59, "_p_elements_group": 59, "_random_pr_init": 59, "_random_prec_n": 59, "modif": [59, 74, 104, 239, 240, 255], "69": [59, 104, 209, 238, 255], "_random_gen": 59, "accumul": [59, 251, 255], "random_pr": 59, "chosen": [59, 60, 69, 70, 81, 82, 104, 108, 111, 153, 187, 189, 190, 206, 207, 209, 211, 213, 215, 220, 227, 230, 236, 240, 251, 265], "gh": [59, 208, 239, 246], "eventu": [59, 76, 95, 206, 207, 227, 253, 258], "_sylow_alt_sym": 59, "sylow": 59, "p_1": [59, 64, 69, 86, 108, 203, 230, 233], "p_2": [59, 69, 86, 108, 203, 230], "p_p": 59, "sylow_subgroup": 59, "is_alt_sym": [59, 66], "_union_find_merg": 59, "not_rep": 59, "atkinson": 59, "83": [59, 219], "87": [59, 74, 104, 108], "minimal_block": 59, "_union_find_rep": 59, "r65": 59, "r71": 59, "compress": [59, 104, 107, 115], "r67": 59, "r73": [59, 60], "_verifi": 59, "_h": [59, 239], "gens_k": 59, "rels_k": 59, "gens_h": 59, "inject": [59, 68, 207, 211, 216, 293], "homomorph": 59, "rels_h": 59, "strong_present": 59, "abelian_invari": 59, "t_1": [59, 73, 233], "t_2": [59, 73, 233], "t_r": [59, 150, 246], "542": 59, "adopt": [59, 246], "schreier": [59, 64, 66], "sim": [59, 64, 66, 93], "b_1": [59, 66, 76, 90, 93, 207, 230, 233, 236, 297], "b_2": [59, 66, 76, 90, 230, 236], "dot": [59, 60, 64, 66, 69, 81, 83, 90, 99, 104, 119, 128, 130, 133, 137, 138, 139, 142, 143, 144, 147, 148, 149, 152, 169, 194, 195, 197, 200, 203, 204, 205, 207, 208, 213, 216, 220, 239, 240, 258, 265, 269, 271, 272], "b_k": [59, 66, 69, 73, 76, 222, 223], "strong": [59, 64, 65, 66, 108, 109], "89": [59, 66, 95], "55": [59, 71, 73, 104, 205, 206, 216, 233], "57": [59, 104, 108, 240], "coset": [59, 64, 215], "strong_gen": [59, 65, 66], "basic_transvers": [59, 66], "basic_orbit": [59, 66], "basic_stabil": 59, "baseswap": 59, "po": [59, 93, 98, 99, 130, 131, 134, 150, 152, 211, 238], "strong_gens_distr": [59, 66], "swap": [59, 60, 61, 99, 104, 165, 169, 178, 209, 240, 258], "orbit": [59, 66, 185, 186, 188], "b_": [59, 64, 66, 68, 73, 76, 93, 101, 119, 222, 230, 233, 241, 242], "b_i": [59, 64, 66, 93, 207, 230], "la": [59, 152, 190], "vega": 59, "testutil": [59, 65, 66], "_verify_bsg": [59, 65, 66], "schreier_sim": [59, 65, 66], "bsg": [59, 64, 66, 246], "102": [59, 104], "98": [59, 69, 151, 216, 236], "pseudocod": 59, "beta_": 59, "foral": [59, 67, 70, 190], "zg": 59, "gz": 59, "c_g": 59, "sg": [59, 240, 246], "is_subgroup": 59, "subgroup_search": 59, "hgh": 59, "closur": [59, 65, 91, 165, 211, 215, 228], "composition_seri": 59, "h_0": [59, 64], "h_1": [59, 64, 239], "h_2": [59, 239], "1024": [59, 220, 240], "512": [59, 76], "128": [59, 73, 76, 78, 108, 214, 220], "243": [59, 76, 238], "81": [59, 73, 78, 99, 104, 108, 135, 137, 205, 209, 219], "conjugacy_class": 59, "xax": 59, "s_3": 59, "feasibl": [59, 119], "resiz": [59, 60, 99, 101], "coset_factor": 59, "factor_index": 59, "_basic_orbit": 59, "u1": [59, 108, 135, 137, 138, 139, 140, 142, 143, 147, 149, 152, 195, 197, 199, 200, 203, 236], "u2": [59, 107, 108, 135, 137, 138, 139, 140, 142, 143, 147, 152, 195, 199, 203, 236], "_strip": [59, 66], "coset_rank": 59, "lexicograph": [59, 60, 63, 64, 68, 213, 216, 258], "coset_unrank": 59, "standardis": [59, 210], "subsect": [59, 272], "compris": [59, 69, 101, 119, 130, 150, 153, 216, 258], "g_0": [59, 233], "g_1": [59, 216, 227, 233, 236], "g_2": [59, 97, 227, 236], "g_i": [59, 227], "g_k": 59, "tetrahedron": [59, 61], "r69": 59, "axiom": [59, 207], "doy": 59, "sc": [59, 95], "thesi": [59, 68, 227, 265], "generator_product": 59, "sn": [59, 60, 67, 90], "is_abelian": 59, "_random_prec": 59, "82": [59, 95, 104, 240], "proport": [59, 69, 227, 259], "226": 59, "227": 59, "is_altern": 59, "quicker": [59, 108], "taxonomi": 59, "is_cycl": 59, "p_": [59, 64, 68, 95, 190, 233, 236, 241], "p_i": [59, 64, 108], "equiv": [59, 69, 73, 108, 215, 230, 233], "pmod": [59, 68, 69, 73, 104, 108, 230], "p_j": [59, 64], "r70": 59, "35": [59, 62, 71, 73, 81, 82, 95, 104, 108, 137, 215, 220, 233, 236, 240], "rose": 59, "is_dihedr": 59, "di1": 59, "827273": 59, "di2": 59, "kconrad": [59, 240], "uconn": [59, 240], "blurb": [59, 240], "grouptheori": 59, "di3": 59, "dihedral2": 59, "di4": 59, "is_elementari": 59, "is_nilpot": [59, 104], "lower_central_seri": 59, "is_solv": 59, "is_norm": [59, 183], "gr": 59, "is_perfect": [59, 108], "is_polycycl": 59, "is_primit": [59, 211, 216], "cardin": [59, 60, 63, 207, 228], "badli": 59, "random_stab": 59, "is_symmetr": [59, 99], "is_transit": 59, "is_trivi": 59, "cba": [59, 241, 258], "mainli": [59, 76, 104, 109, 190, 200, 213, 230, 233, 236], "max_div": 59, "siev": [59, 108], "nonempti": [59, 258], "moreov": [59, 69, 93, 201, 207, 208, 213, 221, 270], "congruenc": [59, 68, 108, 230, 233], "p_0": [59, 64, 86, 230, 233], "intransit": 59, "normal_closur": 59, "adjoin": [59, 208], "yx": [59, 195, 204], "73": [59, 67, 68, 81, 108, 236], "74": [59, 73, 108], "orb": 59, "orbit_transvers": 59, "orbit_rep": 59, "send": [59, 68, 69, 74, 108, 207, 236, 238], "79": [59, 60, 112], "pointwise_stabil": 59, "pointwis": [59, 66], "p_k": [59, 108], "p20": 59, "stab": 59, "schreier_sims_increment": [59, 66], "polycyclicgroup": 59, "eliminate_gen": 59, "gen_count": 59, "b1": [59, 64, 76, 108, 111, 112, 124, 135, 152, 195, 211, 220, 230, 233, 236, 271], "b_r": 59, "slp_dict": 59, "93": [59, 214], "schreier_sims_random": [59, 66], "consec_succ": 59, "consec": 59, "_succ": 59, "97": [59, 68, 69, 108, 213], "sift": [59, 66, 258], "amend": 59, "unsuccess": [59, 66], "accordingli": [59, 208, 215], "halt": 59, "signifi": [59, 68, 111, 216, 240], "g_t": 59, "leq": [59, 67, 69, 76, 93, 104, 108, 205, 213, 215, 226, 227, 233, 240], "prop": [59, 215], "init_subgroup": 59, "supergroup": 59, "sought": [59, 108, 170, 180, 209, 232, 238, 239], "prune": 59, "prop_even": 59, "lengthi": 59, "114": [59, 108], "117": [59, 76], "terribl": 59, "crucial": [59, 67, 210], "len1": 59, "len2": 59, "len3": 59, "transitivity_degre": 59, "fold": [59, 68, 74, 220, 227, 232], "a_2": [59, 69, 90, 104, 213, 230, 233, 236, 240, 297], "a_k": [59, 69, 217, 223], "r74": 60, "pretty_print": [60, 96, 130, 133, 137, 138, 142, 143, 144, 146, 147, 148, 150, 153, 195, 197, 199, 200, 203, 204, 220], "understood": [60, 108, 190, 207, 211, 216], "economi": 60, "caution": [60, 68, 74, 220, 232], "indexerror": [60, 104, 216], "autos": [60, 107], "watch": 60, "print_cycl": 60, "econom": [60, 95, 258], "retain": [60, 68, 74, 76, 95, 108, 110, 216, 221, 229, 232], "biject": [60, 62, 69, 99, 207], "full_cyclic_form": 60, "rmul": [60, 209], "unrank_lex": 60, "r78": 60, "zo42": 60, "from_sequ": 60, "a1": [60, 64, 68, 96, 99, 108, 112, 135, 152, 159, 236, 240, 241, 271, 297], "a2": [60, 64, 68, 97, 99, 108, 112, 135, 152, 159, 209, 240, 241, 271, 297], "a3": [60, 64, 68, 97, 99, 152, 271, 297], "perfectli": [60, 67, 68, 69, 213, 216, 219], "skiena": 60, "ma": [60, 67, 140], "1990": [60, 93, 230, 265], "r75": 60, "wendi": 60, "myrvold": 60, "ruskei": [60, 258], "2001": [60, 108, 214], "lett": [60, 104], "septemb": [60, 255], "281": 60, "284": [60, 108], "1016": [60, 104, 258], "s0020": 60, "0190": 60, "01": [60, 68, 72, 135, 179, 214, 232, 258], "00141": 60, "r76": 60, "kreher": 60, "stinson": 60, "1999": [60, 104, 214, 219, 236], "r77": 60, "graham": [60, 73, 74, 108], "patashnik": 60, "foundat": [60, 214, 215], "1994": [60, 213, 214, 216], "php": [60, 108, 233, 240], "oldid": 60, "499948155": 60, "product_and_invers": 60, "r79": 60, "lehmer_cod": 60, "appliedpermut": 60, "magic": [60, 232, 251, 289], "_array_form": 60, "ascent": 60, "ie": [60, 233], "descent": [60, 233], "fg": [60, 70, 236, 239], "gf": [60, 69, 115, 207, 209, 210, 213, 215], "r80": 60, "commutes_with": [60, 246], "cycle_structur": 60, "from_inversion_vector": 60, "get_adjacency_dist": 60, "n_adj": 60, "reev": 60, "colin": 60, "landscap": 60, "annal": 60, "86": [60, 104, 151, 219, 229], "473": 60, "josephu": 60, "get_precedence_matrix": 60, "get_precedence_dist": 60, "get_adjacency_matrix": 60, "get_positional_dist": 60, "inversion_vector": 60, "lesser": [60, 115, 216], "lehmer": 60, "ith": [60, 97, 108, 209, 211, 217, 239, 240], "variat": [60, 68, 213, 227, 236], "r81": 60, "eng": 60, "chula": 60, "prabha": 60, "algo2008": 60, "htm": [60, 76, 95, 233], "is_singleton": 60, "is_odd": 60, "shuffl": [60, 104, 297], "012345": 60, "345": 60, "253": 60, "2531": 60, "25314": 60, "253140": 60, "r82": 60, "flavius_josephu": 60, "r83": 60, "josephus_problem": 60, "r84": 60, "20171008094331": 60, "wou": 60, "burtonl": 60, "trim": [60, 149], "unmov": 60, "mul_inv": 60, "next_nonlex": 60, "nonlex": 60, "rank_nonlex": 60, "unrank_nonlex": 60, "next_trotterjohnson": [60, 258], "trotter": 60, "johnson": [60, 104], "generate_bel": [60, 258], "rank_trotterjohnson": 60, "unrank_trotterjohnson": 60, "_af_par": 60, "pseudo": [60, 104, 108, 211, 213, 216], "inv_perm": 60, "enforc": [60, 137], "rmul_with_af": 60, "ascend": [60, 95, 258], "r85": 60, "transposition_": 60, "flexibl": [60, 68, 133, 135, 152, 203, 206, 210, 239, 287], "cn": [60, 220, 296], "2n": [60, 67, 73, 76, 95, 99, 115, 120, 148, 205, 223, 230], "dn": [60, 240], "polyhedr": 61, "psg": 61, "platon": 61, "solid": [61, 82, 127, 134, 206, 275], "tetrahedr": 61, "octahedr": 61, "icosahedr": 61, "r86": 61, "polyhedralgroup": 61, "polyhedra": 61, "h5": 61, "heinz": 62, "caylei": [62, 99], "r87": 62, "labeledtre": 62, "tree_repr": 62, "prufer_rank": 62, "prev": [62, 68], "prufer_repr": 62, "to_pruf": 62, "778": 62, "779": 62, "777": [62, 71], "1296": 62, "to_tre": 62, "r88": 62, "hamberg": 62, "erlend": 62, "2010": [62, 237, 258], "06": [62, 68, 137, 205, 240], "compact": [62, 68, 116, 128, 152, 183, 200, 216, 220, 238, 255], "next_binari": 63, "prev_binari": 63, "bitlist_from_subset": 63, "subset_from_bitlist": 63, "superset_s": 63, "iterate_binari": 63, "iterate_graycod": 63, "prev_grai": 63, "next_grai": 63, "next_lexicograph": 63, "prev_lexicograph": 63, "rank_binari": 63, "unrank_binari": 63, "rank_grai": 63, "unrank_grai": 63, "rank_lexicograph": 63, "43": [63, 104, 108, 111, 112, 240, 297], "super_set": 63, "subset_indic": 63, "ksubset": 63, "itertool": [63, 258], "tensor_can": [64, 246], "msym": 64, "contravari": [64, 104, 246, 247], "covari": [64, 70, 104, 240, 246, 247], "d0": 64, "base_i": 64, "gens_i": 64, "n_i": [64, 213, 238], "sym_i": 64, "canonicalize_na": 64, "exchang": [64, 69, 104, 205, 209, 258], "anticommut": [64, 172, 174, 184, 185, 246, 282], "canonical_fre": 64, "slot": [64, 169, 241, 245, 246, 292], "tensor_gen": 64, "list_free_indic": 64, "double_coset_can_rep": 64, "reintroduc": 64, "antisymmetr": [64, 70, 99, 185, 246], "d2": [64, 195, 207, 227, 240, 258, 265], "ord": [64, 69, 104], "t_c": 64, "get_symmetric_group_sg": [64, 246], "bsgs_direct_product": 64, "base2a": 64, "gens2a": 64, "t0": 64, "t1": [64, 84, 85, 108, 124, 130, 233, 240], "a_m": [64, 236], "a_n": [64, 69, 76, 93, 97, 190, 208, 213, 215, 223, 233, 236, 297], "_a": [64, 76, 185, 216], "_b": [64, 76, 185], "base_f": 64, "gens_f": 64, "base1": 64, "gens1": 64, "base_a": 64, "gens_a": 64, "sgen": 64, "s_transvers": 64, "butler": [64, 246], "portug": [64, 246], "grow": [64, 68, 93, 104, 108, 210, 213], "observ": [64, 90, 93, 174, 204, 207, 230, 233, 236, 240, 274, 297], "ind": [64, 222, 246], "d3": [64, 227], "a0": [64, 236, 297], "a5": [64, 68], "leftrightarrow": 64, "_af_rmul": 64, "t_": [64, 73], "b0": [64, 76, 211, 230, 236], "d_": [64, 230], "p0": [64, 78, 215, 236], "dbase": 64, "recomput": [64, 216], "d_i": [64, 93, 190], "s_0": 64, "d_0": [64, 69], "b_0": [64, 69, 73, 230, 233, 236], "b_j": [64, 66, 76, 93, 230], "sx": 64, "trace": [64, 99, 101, 120, 152, 213, 220, 240, 241, 242, 244, 258, 293], "h_n": [64, 76, 95, 216, 239], "tab1": 64, "get_transvers": 64, "antisym": 64, "base2": 64, "gens2": 64, "_cmp_perm_list": 65, "ls1": 65, "ls2": 65, "_naive_list_centr": 65, "_verify_centr": 65, "_verify_normal_closur": 65, "_base_ord": 66, "base_ord": 66, "backtrack": 66, "108": [66, 112], "132": [66, 73, 195], "r89": 66, "_distribute_gens_by_bas": 66, "_strong_gens_from_distr": 66, "_orbits_transversals_from_bsg": 66, "_handle_precomputed_bsg": 66, "transversals_onli": 66, "slp": 66, "_remove_gen": 66, "new_gen": 66, "r90": 66, "r91": 66, "recurr": [67, 73, 90, 104, 215, 226, 232, 236, 240, 260], "annihil": [67, 86, 87, 91, 161, 185, 238], "is_hypergeometr": 67, "binomi": [67, 68, 72, 73, 76, 108, 216, 220, 225, 232, 236, 240, 258, 297], "ff": [67, 69, 73, 205, 208, 209, 210, 215, 216], "rise": [67, 73, 76, 205, 232, 236, 240, 269], "hypersimp": [67, 232], "quotient": [67, 68, 71, 74, 108, 207, 208, 210, 213, 216, 230, 232, 236], "dummy_vari": 67, "karr": 67, "exclus": [67, 68, 74, 98, 104, 213, 289], "typeset": [67, 220], "seemingli": [67, 239], "r92": 67, "michael": [67, 214, 219], "april": 67, "1981": [67, 214], "305": 67, "350": [67, 130], "dl": [67, 204, 209, 211, 214, 232], "1145": [67, 209, 211, 214, 232], "322248": 67, "322255": 67, "r93": 67, "sigma_not": 67, "r94": 67, "empty_sum": 67, "euler_maclaurin": [67, 72], "eval_integr": 67, "maclaurin": [67, 72], "endpoint": [67, 68, 72, 81, 201, 228, 272], "28333333333333": 67, "sstr": [67, 200, 220], "full_prec": [67, 220], "26629073187415": 67, "0175000000000000": 67, "soon": [67, 68, 135, 190, 217], "eval_zeta_funct": 67, "is_absolutely_converg": 67, "sequence_term": 67, "is_converg": 67, "r95": 67, "absolute_converg": 67, "analogi": [67, 213], "prod_": [67, 73, 76, 93, 108, 190, 230], "diverg": [67, 76, 154, 196, 265, 268], "dirichlet": [67, 76, 240], "r96": 67, "convergence_test": 67, "reverse_ord": 67, "selector": [67, 99, 232, 258], "s0": [67, 91, 93, 157], "expr_with_intlimit": [67, 95], "exprwithintlimit": [67, 95], "reorder_limit": 67, "r97": 67, "walli": 67, "w2": [67, 159], "w2e": 67, "risingfactori": [67, 73, 76, 220, 222], "combsimp": [67, 68, 73, 232], "pe": 67, "gammasimp": [67, 68, 232], "r98": 67, "r99": 67, "capital_pi_not": 67, "r100": 67, "empty_product": 67, "r101": 67, "infinite_product": 67, "r102": 67, "expr_with_limit": [67, 95], "exprwithlimit": [67, 95], "change_index": 67, "trafo": 67, "newvar": 67, "mapsto": [67, 93, 99, 215], "p3": [67, 78, 80, 81, 83, 84, 119, 130, 206, 210, 229, 240], "has_empty_sequ": [67, 95], "has_reversed_limit": [67, 95], "has_finite_limit": [67, 95], "____": [67, 72, 95, 157, 208, 221, 240, 258, 298], "___": [67, 72, 95, 96, 104, 208, 232, 240, 245, 258, 296], "rubric": [67, 68], "_____": [67, 240], "gosper": 67, "gosper_norm": 67, "monic": [67, 76, 207, 208, 211, 213, 215, 216, 219], "gcd": [67, 68, 69, 104, 108, 181, 209, 210, 211, 214, 215, 216, 220, 232, 233], "gosper_term": 67, "f_k": [67, 128, 147, 213], "g_n": [67, 73, 216], "f_n": [67, 73, 76, 207, 213, 216, 236], "gosper_sum": 67, "r103": 67, "marko": 67, "petkovsek": [67, 238], "herbert": 67, "doron": 67, "zeilberg": [67, 238], "ak": [67, 222], "peter": [67, 73, 76, 108, 151, 202, 209, 216, 258], "ltd": 67, "welleslei": 67, "usa": [67, 214], "1997": [67, 93, 108, 214, 230], "convert_xor": [68, 110], "09": [68, 117, 205], "xor": [68, 71, 98, 110, 220, 289], "sympifyerror": 68, "coerc": [68, 149, 213], "cooper": 68, "shouldn": [68, 217], "unsanit": [68, 259, 286], "bitcount": 68, "improperli": 68, "unbound": [68, 245], "23903": 68, "fallback": [68, 96, 185, 200, 210, 220, 238], "ast": [68, 220], "mylist1": 68, "mylist": 68, "mylist2": 68, "xxx": [68, 95, 104, 258, 260], "autosimplif": [68, 229, 232], "kern": 68, "r106": 68, "7649": 68, "r105": 68, "r109": 68, "r107": 68, "r108": 68, "r110": 68, "r111": 68, "r112": 68, "r104": 68, "negativeinfin": [68, 220], "complexinfin": [68, 119], "_assumptions_orig": 68, "recreat": [68, 127], "isfinit": 68, "__cacheit": 68, "maxsiz": 68, "cacheit": 68, "sympy_use_cach": 68, "_arg": [68, 74], "as_mut": [68, 100, 101], "as_content_primit": [68, 104, 208, 216], "stub": 68, "as_dummi": [68, 95], "_0": [68, 73, 93, 99, 104, 216, 259], "_r": [68, 185, 230, 239], "bound_symbol": [68, 95], "typeinfo": 68, "truli": [68, 76, 190], "piec": [68, 72, 230, 253], "numbersymbol": [68, 220], "scan": [68, 209], "appliedundef": 68, "canonical_vari": 68, "class_kei": 68, "sorted_class": 68, "eg": [68, 135, 192, 239], "fromit": 68, "has_fre": 68, "has_xfre": 68, "exp_polar": [68, 74, 76, 230], "dif": 68, "_prec": 68, "r_": [68, 121, 186, 217], "repl_dict": 68, "rcall": [68, 70], "simul": [68, 135, 152, 219], "abus": [68, 246], "succe": [68, 93, 98, 108, 175, 215, 238], "newtyp": 68, "intuit": [68, 150, 190, 236], "is_mul": 68, "is_add": [68, 239], "mysin": [68, 259, 286], "_eval_rewrite_as_": 68, "_eval_rewrite_as_co": 68, "tie": [68, 258], "delai": [68, 117, 149, 229, 251, 287], "unsort": [68, 123, 194], "333333333333333333333": 68, "333333333333333314830": 68, "wildcard": [68, 232], "evalfmixin": 68, "registri": 68, "metaprogram": 68, "mostli": [68, 74, 95, 104, 152, 180, 203, 207, 209, 219, 220, 230, 238, 296], "__truediv__": [68, 211], "metaclass": 68, "class_nam": 68, "mysingleton": 68, "_eval_is_g": 68, "_eval_is_eq": 68, "args_cnc": 68, "cset": 68, "split_1": 68, "suppress": [68, 110, 249, 256], "as_coeff_add": 68, "dep": [68, 236], "as_coeff_expon": 68, "as_coeffici": 68, "zz": [68, 73, 90, 91, 95, 101, 104, 105, 108, 130, 195, 204, 207, 208, 209, 210, 213, 215, 216, 217, 218, 235], "coeff_monomi": [68, 216], "polytool": [68, 209, 216, 239], "as_coefficients_dict": 68, "inquiri": 68, "expand_mul": [68, 93], "121": [68, 73, 108, 119, 195, 238], "84": [68, 72, 108], "separatevar": [68, 232, 236], "n3": [68, 135, 206], "logx": [68, 227], "cdir": 68, "_eval_as_leading_term": 68, "as_numer_denom": [68, 238], "as_ordered_factor": 68, "as_ordered_term": 68, "as_powers_dict": 68, "lost": 68, "as_real_imag": [68, 74, 99, 221], "as_term": 68, "aseri": 68, "hir": 68, "asymptot": [68, 93, 119, 287], "hierarch": 68, "normalis": [68, 222], "induc": [68, 99, 215, 229, 258], "gruntz": [68, 222], "majorli": 68, "mrv": [68, 227], "overal": [68, 192, 206, 238], "till": [68, 111, 112, 135, 236], "r113": 68, "dominik": [68, 222], "proc": [68, 211, 238], "1993": [68, 214], "symp": [68, 211], "239": 68, "244": [68, 213], "r114": 68, "p90": 68, "r115": 68, "asymptotic_expans": 68, "_first": [68, 74], "factor_term": [68, 143, 216, 229, 232], "distribute_order_term": [68, 232], "compute_leading_term": 68, "could_extract_minus_sign": 68, "signsimp": [68, 143, 232], "failing_express": 68, "modulu": [68, 69, 71, 76, 78, 84, 99, 108, 111, 112, 207, 211, 213, 215, 216, 219, 239], "power_bas": [68, 99], "power_exp": [68, 99], "multinomi": [68, 99, 108, 240], "extract_addit": 68, "extract_multipl": 68, "extract_branch_factor": 68, "allow_half": 68, "fourier_seri": [68, 223], "geto": 68, "getn": 68, "mod_invers": [68, 216], "is_algebraic_expr": 68, "is_rational_funct": 68, "r116": 68, "algebraic_express": 68, "is_const": 68, "constanc": 68, "failing_numb": 68, "is_meromorph": 68, "meromorph": [68, 76], "multivalu": [68, 74], "cut": [68, 73, 74, 76, 84, 93, 207, 230, 255, 261, 297], "hit": [68, 292], "is_polynomi": 68, "rational_funct": 68, "leadterm": 68, "xlim": [68, 206], "lseri": 68, "exaxmpl": 68, "nseri": 68, "_eval_nseri": 68, "innermost": 68, "disadvantag": 68, "met": [68, 115, 233, 239, 254, 297], "poleerror": 68, "nsimplifi": [68, 72, 232], "radsimp": [68, 232], "removeo": [68, 152, 220, 287], "chop": [68, 72, 76, 99, 104, 238, 286], "lazi": [68, 101, 216], "smooth": [68, 72, 108, 222], "taylor_term": [68, 74], "previous_term": [68, 74], "wildfunct": 68, "dummy_index": 68, "_dummy_10": 68, "contigu": [68, 230, 253], "x4": [68, 73, 210], "x5": [68, 73, 210], "x6": [68, 210], "x7": [68, 210], "x8": [68, 210], "x9": [68, 210], "x50": 68, "x51": 68, "y3": [68, 210], "y4": 68, "xa": [68, 208, 213], "xb": [68, 261], "xc": [68, 184, 261], "disambigu": 68, "x01": 68, "x02": 68, "x11": 68, "x12": 68, "escap": [68, 110, 206, 220, 261], "undefinedfunct": [68, 197, 220, 252, 259], "f821": [68, 254], "cofactor": [68, 104, 209, 211, 213, 216], "lcm": [68, 108, 211, 213, 216, 220], "50000000000000": [68, 72], "100000000000000000000": 68, "1e20": 68, "00000000000000e": 68, "23456789123456789": 68, "23456789123457": 68, "00100": 68, "sent": [68, 95, 232, 238], "789": [68, 108], "123_456": 68, "123456789": 68, "12e": 68, "012": 68, "60e2": 68, "6000": 68, "600e": 68, "125": [68, 72, 95, 108, 211, 226, 233], "099609": 68, "12500": 68, "12500000000000000000": 68, "5404319552844595": 68, "54": [68, 104, 112, 213, 219, 258], "29999999999999998890": 68, "30000000000000000000": 68, "_mpf_": [68, 210], "4915": 68, "70": [68, 69, 85, 95, 104, 108, 219, 220, 233, 240, 261], "307": 68, "mpf": [68, 210, 211], "is_float": 68, "unprejud": 68, "3602879701896397": 68, "18014398509481984": [68, 232], "limit_denomin": 68, "320": 68, "75": [68, 71, 209, 240, 265], "use_tri": [68, 108], "use_rho": [68, 108], "use_pm1": [68, 108], "factorint": [68, 108, 215, 216, 255], "trial": [68, 108, 213, 225, 229, 236, 240], "max_denomin": 68, "1000000": [68, 108], "141592653589793": 68, "311": [68, 108], "discard": [68, 209, 215, 220, 239], "99999999999999999999": 68, "algebraicnumb": [68, 211, 215, 219], "hookrightarrow": 68, "minpoli": [68, 210, 211, 215], "dmp": [68, 207, 211, 216], "anp": [68, 210, 211, 215, 216], "to_list": [68, 209, 211], "minpoly_of_el": 68, "414213562": 68, "scratch": [68, 190], "6x": [68, 213], "to_number_field": [68, 215], "to_root": 68, "primitive_el": [68, 210, 211, 215], "knew": [68, 297], "golden": [68, 72, 108], "5th": [68, 152, 213, 215], "cyclotom": [68, 211, 213, 214, 215, 216], "cyclotomic_poli": [68, 215, 216], "61803398874989": 68, "2i": 68, "a6": 68, "a6_wrong": 68, "309016994374947": 68, "951056516295154": 68, "field_el": 68, "is_alias": 68, "is_primitive_el": 68, "native_coeff": 68, "to_algebraic_integ": 68, "to_primitive_el": 68, "Its": [68, 74, 84, 152, 183, 209, 213, 220, 228], "a_prim": 68, "number_cl": 68, "realnumb": 68, "igcd": [68, 108, 208], "greatest": [68, 73, 78, 108, 208, 210, 211, 213, 214, 216, 219], "euclid": [68, 213, 214], "r117": 68, "euclidean_algorithm": 68, "ilcm": [68, 108], "seterr": 68, "r118": 68, "r119": 68, "1_": 68, "28number": 68, "negativeon": [68, 74, 292], "r120": 68, "88": [68, 104, 108], "921_": 68, "r121": 68, "one_half": 68, "holder": 68, "ieee": [68, 69], "754": 68, "r122": 68, "affin": [68, 69, 83, 207], "compactif": 68, "r123": 68, "tild": [68, 74, 241], "exp1": [68, 220], "718281828": 68, "napier": 68, "r124": 68, "e_": [68, 73, 104], "28mathematical_const": 68, "r125": 68, "imaginary_unit": [68, 220], "141592654": 68, "circumfer": [68, 78, 134], "diamet": [68, 78], "area": [68, 78, 80, 84, 85, 111, 112, 133], "is_irr": 68, "r126": 68, "mascheroni": [68, 76], "5772157": 68, "recur": 68, "harmon": [68, 73, 108, 121, 164, 205, 220, 282], "lim": [68, 227, 287], "limits_": [68, 205, 222, 291], "ln": [68, 74, 95, 220, 222, 236, 240, 297], "r127": 68, "93mascheroni_const": 68, "catalan": [68, 73, 220], "91596559": 68, "r128": 68, "27s_constant": 68, "goldenratio": [68, 72, 221, 232], "r129": 68, "golden_ratio": 68, "tribonacciconst": 68, "tribonacci": [68, 73], "fibonacci": [68, 72, 73, 108], "predetermin": [68, 251], "8392867552141611326": 68, "r130": 68, "generalizations_of_fibonacci_numb": [68, 73], "tribonacci_numb": [68, 73], "modulo": [68, 69, 73, 105, 108, 181, 207, 209, 210, 211, 213, 215, 216, 217, 219, 220, 223, 232], "r131": 68, "modular_multiplicative_invers": 68, "r132": 68, "extended_euclidean_algorithm": 68, "equal_valu": 68, "verion": 68, "compound": [68, 140, 183], "r133": 68, "20033": 68, "oscil": [68, 282], "conform": [68, 239, 244, 245, 258], "r134": 68, "r135": 68, "zero_to_the_power_of_zero": 68, "r136": 68, "indeterminate_form": 68, "as_base_exp": [68, 74, 75, 258], "expand_power_bas": [68, 232], "isqrt": [68, 108], "lfloor": [68, 74, 211, 239, 240], "rfloor": [68, 74, 211, 239, 240], "integer_nthroot": [68, 74, 108], "floor": [68, 74, 108, 127, 210, 211, 220, 240], "integer_log": 68, "geq": [68, 69, 76, 104, 216, 233, 240, 297], "factor_": [68, 69, 108, 216, 233], "perfect_pow": [68, 108], "infix": 68, "matmul": [68, 101, 209], "as_coef_mul": 68, "undesir": [68, 123, 135, 149, 208, 211, 230], "4596": 68, "5728": 68, "suspect": [68, 108], "5706": 68, "moot": 68, "off": [68, 78, 93, 99, 107, 109, 137, 146, 169, 207, 216, 220, 236, 251, 262, 265, 291], "nb": 68, "sensit": [68, 119, 152, 206, 213, 232, 251], "assocop": 68, "prod": [68, 210, 217, 229], "matadd": [68, 101, 220], "as_coef_add": 68, "extract_leading_ord": 68, "commutative_part": 68, "noncommutative_part": 68, "order_symbol": 68, "subprocess": [68, 220, 251, 252], "dividend": [68, 211], "eager": [68, 259], "61": [68, 69, 73, 84, 104, 108, 216, 222], "712524808": 68, "3744312326": [68, 73], "rop": 68, "validrelationoper": 68, "greaterthan": [68, 220], "lessthan": [68, 220], "strictlessthan": [68, 220, 261], "lt": [68, 216, 220, 261], "my_equ": 68, "my_inequ": 68, "reversedsign": 68, "_eval_eq": 68, "boolalg": [68, 98], "client": [68, 255], "counterpart": [68, 69, 236, 287], "litter": 68, "oddbal": 68, "minor": [68, 78, 104, 209, 220, 251], "caveat": [68, 216, 289], "succinctli": 68, "annoy": 68, "succinct": 68, "r137": 68, "operar": 68, "circuit": [68, 169, 172, 282], "greaterthanobject": 68, "__bool__": 68, "335": 68, "march": 68, "2012": 68, "r138": 68, "r139": 68, "r140": 68, "mdarg": 68, "fgh": 68, "vsin": 68, "vdiff": 68, "narg": [68, 213], "naturals0": [68, 220, 228, 239, 240], "evalul": 68, "fairli": [68, 76, 93, 137, 145, 194, 207], "conserv": [68, 128, 148, 196, 268, 274], "136": [68, 104], "temporarili": 68, "implic": [68, 98, 213], "fx": [68, 70, 206, 236, 237], "fxx": 68, "insconsist": 68, "nonvanish": 68, "_diff_wrt": 68, "_sort_variable_count": 68, "vc": 68, "vsort": 68, "collaps": [68, 179, 232], "vsort0": 68, "vi": 68, "dfx": 68, "equidist": 68, "sq2": 68, "xl": 68, "d2fdxdy": 68, "doit_numer": 68, "z0": [68, 227], "unifi": [68, 153, 209, 211, 213, 215, 216, 228], "zeroth": [68, 215], "idiff": [68, 85], "r141": 68, "legaci": [68, 95, 104, 240], "v5_2": 68, "infunct": 68, "algebraiccomput": 68, "functionclass": [68, 220, 259], "f_real": [68, 75], "f_real_inherit": [68, 75], "is_singular": [68, 75, 91], "holomorph": [68, 75, 93], "superfici": 68, "ss": [68, 211], "denom": [68, 209, 210, 211, 215, 232], "_eval_expand_bas": 68, "_eval_expand_complex": 68, "shut": [68, 216], "unwant": [68, 238, 258], "expand_hint": 68, "_eval_expand_hint": 68, "liabl": [68, 98], "metahint": 68, "myclass": 68, "_eval_expand_doubl": 68, "expand_multinomi": 68, "expand_power_exp": 68, "expand_func": [68, 73, 76], "hyperexpand": [68, 76, 90, 93, 230, 232], "div": [68, 208, 210, 211, 216, 220, 232, 292], "horner": [68, 152, 209, 213, 216], "untouch": 68, "unexpand": [68, 210, 219, 229, 252], "safe": [68, 108, 210, 216, 238, 244, 287], "nfloat": [68, 232], "dkei": 68, "mixin": [68, 258], "maxn": [68, 72, 99], "subresult": [68, 211, 214, 216], "000100000000000000": 68, "precisionexhaust": [68, 72], "maxprec": 68, "quadratur": [68, 72, 95, 236], "oscillatori": [68, 72, 225], "osc": [68, 72], "advers": 68, "1e16": 68, "291": 68, "builtin": [68, 211, 220, 228, 261, 296], "speedup": [68, 104, 109, 213, 217, 259], "framework": [68, 126, 135, 145, 245, 251, 253, 259, 282], "slice": [68, 98, 99, 104, 110, 209, 211, 216, 226, 228, 232, 241, 258], "tuplekind": [68, 99, 228], "parametris": [68, 228], "element_kind": [68, 99, 228], "tuple_count": 68, "setkind": [68, 99], "gcd_term": [68, 216], "isprimit": 68, "_gcd_term": 68, "terms_gcd": [68, 211, 216], "entiti": [68, 78, 81, 82, 84, 85, 93, 135, 150, 201, 239, 274, 283, 293], "broad": [68, 292], "undefinedkind": [68, 99, 228], "lex": [68, 96, 200, 208, 210, 211, 213, 216, 217, 219, 220, 232], "grlex": [68, 96, 200, 211, 216, 219, 220], "grevlex": [68, 96, 200, 208, 213, 216, 219, 220], "rev": 68, "unaffect": [68, 239], "_node": 68, "fastest": [68, 73, 95, 108, 109, 209, 217], "undecor": 68, "breaker": 68, "collis": [68, 107, 220], "wast": [68, 105, 209], "rng": 68, "getstat": 68, "intention": 68, "tn": 68, "td": [68, 220, 296], "randrang": 68, "999": [68, 72], "238": [68, 108], "randint": [68, 104, 213], "ri": [68, 220], "rv": [68, 229, 240, 258], "nonbas": 68, "postord": 68, "descend": [68, 207, 215, 253], "subtre": [68, 220, 255], "cryptograph": 69, "encrypt": 69, "hide": [69, 220], "cipher": 69, "vigener": 69, "hill": [69, 76, 95, 128, 151, 195, 202, 265], "bifid": 69, "rsa": 69, "kid": 69, "elgam": 69, "plaintext": [69, 220], "ciphertext": 69, "monoalphabet": 69, "polyalphabet": 69, "crypto": 69, "az": [69, 119, 233], "hello": [69, 258], "helloworld": 69, "check_and_join": 69, "padded_kei": 69, "puppi": 69, "opqrstuvwxi": 69, "puyoqrstvwx": 69, "artist": 69, "aphras": 69, "ara": 69, "hp": 69, "cycle_list": 69, "encipher_shift": 69, "msg": [69, 95], "decipher_shift": 69, "gonavybeatarmi": 69, "ct": [69, 97, 213], "hpobwzcfbubsnz": 69, "deciph": 69, "l1": [69, 78, 80, 81, 127, 130, 138, 150, 211, 213, 216, 233, 240], "l2": [69, 80, 81, 127, 130, 138, 171, 187, 211, 213, 240], "caesar": 69, "juliu": 69, "suetoniu": 69, "protect": [69, 220], "militari": 69, "nephew": 69, "augustu": 69, "reportedli": 69, "r142": 69, "caesar_ciph": 69, "r143": 69, "caesarsmethod": 69, "encipher_rot13": 69, "rot13": 69, "caeser": 69, "midwai": 69, "decipher_rot13": 69, "r144": 69, "decrypt": 69, "tbanilorngnezl": 69, "encipher_affin": 69, "_invers": 69, "cx": [69, 112], "recov": [69, 95, 110, 190, 213, 215, 216, 233, 236], "decipher_affin": 69, "r145": 69, "affine_ciph": 69, "reciph": 69, "navi": 69, "beat": 69, "armi": 69, "trobmvenbgbalv": 69, "encipher_atbash": 69, "enciph": 69, "atbash": 69, "hebrew": 69, "decipher_atbash": 69, "tlmzebyvzgzinb": 69, "r146": 69, "encipher_substitut": 69, "oeyag": 69, "034": 69, "60n": 69, "v4b3": 69, "rm4": 69, "immateri": 69, "anyv": 69, "wherebi": 69, "r147": 69, "substitution_ciph": 69, "encipher_vigener": 69, "me": [69, 135, 152, 195, 220, 242], "mondai": 69, "qrgkkthrzqebpr": 69, "krypto": 69, "sculptur": 69, "cia": 69, "headquart": 69, "r149": 69, "decipher_vigener": 69, "alp": 69, "palimpsest": 69, "emufphzlrfaxyusdjkzldkrnshgnfivj": 69, "betweensubtleshadingandtheabsenc": 69, "blais": 69, "sixteenth": 69, "centuri": [69, 207], "diplomat": 69, "invent": [69, 215, 238, 291], "giovan": 69, "batista": 69, "belaso": 69, "1553": 69, "civil": [69, 111], "war": 69, "confederaci": 69, "brass": 69, "nsa": 69, "museum": 69, "fort": 69, "mead": 69, "r148": 69, "sender": 69, "assembl": [69, 93, 227], "concaten": [69, 99, 131, 258], "frequenc": [69, 95, 117, 119, 159, 161, 169, 186], "kasiski": 69, "discov": [69, 93, 123, 244, 293], "babbag": 69, "unbreak": 69, "gonavybeatarmyyesyoucan": 69, "gold": 69, "auto_kei": 69, "goldbuggonavybeatarmyy": 69, "mcydwshkogamkzcelyfgayr": 69, "pt": [69, 77, 78, 79, 81, 82, 83, 84, 226], "vigenere_ciph": 69, "20071116100808": 69, "filebox": 69, "vt": 69, "batman": 69, "goo": 69, "gl": 69, "ijr22d": 69, "decod": 69, "qrgk": 69, "kt": [69, 140], "hrzqe": 69, "bpr": 69, "meetmeonmondai": 69, "encipher_hil": 69, "z_": [69, 232], "r150": 69, "lester": 69, "1920": 69, "r151": 69, "polygraph": 69, "bare": [69, 128], "ceil": [69, 74, 108, 127, 220], "l_1": [69, 73, 120, 205, 230, 246, 258], "l_t": 69, "c_t": 69, "l_i": [69, 205, 230], "decipher_hil": 69, "hill_ciph": 69, "june": [69, 104], "juli": [69, 233], "1929": 69, "306": 69, "312": [69, 195, 238, 265, 267], "ueqdueodoctcwq": 69, "hjeb": 69, "stqq": 69, "ispk": 69, "stzz": 69, "hd": 69, "ormv": 69, "uiki": 69, "encipher_bifid": 69, "polybiu": 69, "printabl": 69, "bifid5": 69, "decipher_bifid": 69, "encipher_bifid5": 69, "encipher_bifid6": 69, "r152": 69, "bifid_ciph": 69, "ieilhhfstsfqy": 69, "ieilh": 69, "hfst": 69, "fqyej": 69, "bmtwmg": 69, "bio": 69, "gold_bug": 69, "hg2sfuei7t": 69, "pug": 69, "heldo": 69, "wor6d": 69, "bifid5_squar": 69, "5x5": 69, "cap": [69, 72, 185, 228, 239], "tradition": [69, 76], "decipher_bifid5": 69, "round_trip": 69, "josi": 69, "osi": 69, "iosi": 69, "qiq": 69, "1901": 69, "felix": 69, "delastel": 69, "onto": [69, 81, 82, 83, 93, 97, 104, 107, 109, 215], "helen": 69, "cryptanalysi": 69, "german": 69, "fridai": 69, "ieilehfstsfxe": 69, "okai": 69, "decipher_bifid6": 69, "8am": 69, "kfkljjhf5mmmktfrgpl": 69, "meetmeonmondayat8am": 69, "bifid6_squar": 69, "6x6": 69, "rsa_public_kei": 69, "totient": [69, 108], "carmichael": [69, 108], "p_n": [69, 73, 76, 95, 216], "multiprim": 69, "land": 69, "reduced_toti": [69, 108], "uniquenss": 69, "rsa_private_kei": 69, "e_0": 69, "canonicalz": 69, "3233": 69, "797": 69, "1577": 69, "multipow": 69, "cryptosystem": 69, "coprim": [69, 95, 108, 181, 213, 233], "30030": 69, "becam": [69, 145], "hardest": 69, "claim": [69, 204, 230, 239], "encipher_rsa": 69, "decipher_rsa": 69, "r153": 69, "rsa_": 69, "28cryptosystem": 69, "r154": 69, "cacr": 69, "uwaterloo": 69, "techreport": 69, "2006": [69, 229], "cacr2006": 69, "r155": 69, "springer": [69, 95, 108, 213, 214, 236], "1007": [69, 129], "bfb0055738": 69, "r156": 69, "itii": 69, "manuscript": [69, 95], "1381": 69, "2753": 69, "413": 69, "1193": 69, "823": 69, "r157": 69, "r158": 69, "r159": 69, "r160": 69, "bmod": [69, 216, 220], "vice": [69, 95, 108, 111, 175, 195, 207, 211, 269, 270, 289], "versa": [69, 95, 108, 111, 175, 195, 207, 211, 269, 270, 289], "asymmetr": [69, 84], "puk": 69, "prk": 69, "chines": [69, 108, 213], "k_1": [69, 108, 213, 230], "k_2": 69, "k_n": [69, 76, 213], "p_3": [69, 203], "k_3": 69, "moduli": [69, 108, 209, 213], "2048": [69, 108, 220], "overhead": [69, 109, 217], "crt": [69, 108, 209, 213], "overcompens": 69, "new_msg": 69, "kid_rsa_public_kei": 69, "grade": [69, 96, 200, 216], "school": [69, 229], "bob": [69, 127, 133], "369": 69, "58": [69, 104, 246], "kid_rsa_private_kei": 69, "encipher_kid_rsa": 69, "200": [69, 99, 104, 108, 111, 117, 265], "161": [69, 129], "decipher_kid_rsa": 69, "pub": [69, 265], "pri": 69, "encode_mors": 69, "sep": [69, 220, 237, 251], "mors": 69, "attack": 69, "flank": 69, "r161": 69, "morse_cod": 69, "decode_mors": 69, "word_sep": 69, "mc": [69, 140], "east": 69, "r162": 69, "lfsr_sequenc": 69, "lfsr": 69, "c_k": 69, "golomb": [69, 108], "g162": 69, "autocorrel": 69, "lim_": [69, 74, 76, 93, 95, 227, 287, 291], "balanc": [69, 151, 207, 240, 251], "solomon": 69, "aegean": 69, "park": 69, "laguna": 69, "1967": [69, 214], "lfsr_autocorrel": 69, "lfsr_connection_polynomi": 69, "massei": 69, "m163": 69, "jame": [69, 213], "synthesi": 69, "bch": 69, "tran": 69, "122": [69, 71, 76], "127": [69, 108], "elgamal_public_kei": 69, "elgamal_private_kei": 69, "1031": 69, "636": 69, "212": [69, 95, 214], "dlp": 69, "is_primitive_root": [69, 108], "encipher_elgam": 69, "encryp": 69, "decipher_elgam": 69, "eucliden": 69, "dh_public_kei": 69, "dh_private_kei": 69, "_p": [69, 185, 211, 213, 215, 227, 230, 238], "_g": 69, "diffi": 69, "hellman": [69, 108], "publicli": 69, "secretli": 69, "dh_shared_kei": 69, "sk": 69, "gm_public_kei": 69, "goldwass": 69, "micali": 69, "gm_private_kei": 69, "b_n": [69, 73, 97, 207, 223], "jacobi_symbol": [69, 108], "residuos": 69, "entropi": [69, 240], "encipher_gm": 69, "public_kei": 69, "gm": [69, 188], "decipher_gm": 69, "encipher_railf": 69, "rail": [69, 133], "railfenc": 69, "horel": 69, "ollwd": 69, "r165": 69, "rail_fence_ciph": 69, "decipher_railf": 69, "diffgeom": 70, "euclidean": [70, 81, 83, 131, 195, 211, 213, 216], "r166": 70, "chart": [70, 206], "r167": 70, "sussman": 70, "wisdom": 70, "farr": 70, "2013": [70, 80, 99, 295], "cartesian": [70, 111, 115, 153, 158, 172, 175, 180, 201, 206, 207, 228, 239, 258, 269, 270, 272, 273, 282], "polar": [70, 74, 76, 78, 84, 111, 121, 155, 206, 228, 232, 239, 282], "relation_dict": 70, "car2d": 70, "pol": 70, "coordinatesymbol": 70, "jacobian": [70, 104, 149, 238], "jacobian_determin": 70, "r168": 70, "coordinate_system": 70, "base_oneform": 70, "coord_index": 70, "oneform": 70, "base_scalar": 70, "basescalarfield": 70, "base_vector": [70, 265], "coord_funct": 70, "to_si": 70, "coord": [70, 83, 85, 123, 183, 199], "immutabledensematrix": [70, 99, 100, 101, 102, 240], "rn": 70, "r2_r": 70, "r2_p": 70, "jacobian_matrix": 70, "point_to_coord": 70, "coord_si": [70, 268], "imbu": 70, "difficulti": [70, 108, 136], "arriv": [70, 213, 230, 232, 236, 240, 297], "inappropri": 70, "poin": 70, "unappropri": 70, "fy": [70, 206, 237], "ftheta": 70, "basevectorfield": 70, "point_p": 70, "point_r": 70, "s_field": 70, "dxi": 70, "v1": [70, 81, 104, 130, 152, 195, 196, 199, 240, 259, 265, 268, 269, 270, 271], "v_1": [70, 215, 238], "v_2": [70, 215], "e_x": [70, 246], "e_i": [70, 207, 230, 246], "e_r": 70, "c_xy": 70, "c_xr": 70, "unfortun": [70, 72, 109, 219, 233], "e_rho": 70, "form_field": 70, "exterior": [70, 84], "dg": 70, "tensorproduct": [70, 182, 184, 241, 242], "multilinear": 70, "wedg": [70, 93], "tp1": 70, "tp": [70, 157, 184, 211, 242], "wedgeproduct": 70, "wp1": 70, "liederiv": 70, "v_field": 70, "transport": 70, "pushforward": 70, "e_theta": 70, "basecovarderivativeop": 70, "christoffel": 70, "metric_to_christoffel_2nd": 70, "ch": [70, 104, 233], "cvd": 70, "covarderivativeop": 70, "intcurve_seri": 70, "vector_field": [70, 272], "start_point": 70, "f_i": [70, 93, 104, 213, 217], "movement": 70, "intcurve_diffequ": 70, "init_cond": 70, "f_1": [70, 73, 76, 93, 119, 129, 133, 153, 207, 213, 216, 236], "f_0": [70, 73, 129, 213], "vectors_in_basi": 70, "kept": [70, 187, 204, 258, 292], "twoform_to_matrix": 70, "twoform": 70, "e_j": 70, "metric_to_christoffel_1st": 70, "levi": [70, 76, 240, 246], "civita": [70, 76, 246], "metric_to_riemann_compon": 70, "non_trivial_metr": 70, "dtheta": 70, "drho": 70, "metric_to_ricci_compon": 70, "ricci": 70, "fft": [71, 152], "ifft": 71, "ntt": 71, "intt": 71, "fwht": 71, "ifwht": 71, "mobius_transform": 71, "inverse_mobius_transform": 71, "convolution_fft": 71, "convolution_ntt": 71, "convolution_fwht": 71, "convolution_subset": 71, "covering_product": 71, "intersecting_product": 71, "radix": 71, "r169": 71, "coolei": 71, "93tukey_fft_algorithm": 71, "r170": 71, "fastfouriertransform": 71, "r171": 71, "r172": 71, "pz": [71, 117, 246], "643": [71, 108], "767": 71, "387": 71, "415": 71, "384": 71, "353": [71, 104], "r173": 71, "apfloat": 71, "r174": 71, "numbertheoretictransform": 71, "r175": 71, "discrete_fourier_transform_": 71, "r176": 71, "r177": 71, "r178": 71, "wht": 71, "r179": 71, "hadamard_transform": 71, "r180": 71, "fast_walsh": 71, "93hadamard_transform": 71, "r181": 71, "r182": 71, "mobiu": [71, 108], "lattic": [71, 209, 233], "bitmask": 71, "r183": 71, "b6bius_inversion_formula": 71, "r184": 71, "csail": 71, "mit": 71, "rrw": 71, "conv": 71, "r185": 71, "arxiv": [71, 73, 76, 104, 121, 216, 258], "1211": 71, "0189": 71, "r186": 71, "r187": 71, "r188": 71, "888": 71, "444": 71, "1283": 71, "19351": 71, "14219": 71, "15502": 71, "44": [71, 73, 104, 108, 229, 240], "41": [71, 78, 104, 108, 211, 233], "63": [71, 104, 108], "r189": 71, "convolution_theorem": 71, "r190": 71, "333": [71, 108], "555": 71, "222": 71, "666": 71, "15555": 71, "19404": 71, "r191": 71, "r192": 71, "68": [71, 96, 104, 108, 209, 233], "48": [71, 78, 112, 233, 238, 240, 287], "2057": 71, "1870": 71, "r193": 71, "radioeng": 71, "fulltext": 71, "2002": [71, 207, 214, 217], "02_03_40_42": 71, "r194": 71, "r195": 71, "r196": 71, "AND": [71, 98], "327": [71, 236], "r197": 71, "44288293815837": 72, "4429": 72, "4428829381583662470158809900606936986146216893757": 72, "28902548222223624241": 72, "091999668350375232456": 72, "14159265358979": [72, 76, 238], "333333333333333": [72, 210, 232], "1415926535": 72, "7182818284": 72, "100000": [72, 108, 117], "951": 72, "95678796130331164628399634646042209010610577945815": 72, "aleaxit": 72, "100000000000000": 72, "1000000000": 72, "125000000000000000000000000000": 72, "100000000000000005551115123126": 72, "100000000000000000000000000000": 72, "1415": 72, "uncertainti": [72, 190], "003": 72, "31417": 72, "propag": [72, 81, 156, 159], "5000": [72, 111], "50000000000000000000000000000": 72, "varphi": [72, 76, 215, 220, 236], "erron": 72, "34665576869e": 72, "208": [72, 216], "64613129282185e": 72, "60123853010113e": 72, "thousand": [72, 108, 286], "43466557686937456435688527675040625802564660517371780402481729089536555417949051890403879840079255169295922593080322634775209689623239873322471161642996440906533187938298969649928516003704476137795166849228875": 72, "binet": 72, "104": 72, "1336": 72, "portion": [72, 84, 99, 104], "meaningless": 72, "012297": 72, "9562288417661": 72, "956": 72, "29128599706266": 72, "2912859970626635404072825905956005414986193682745": 72, "14159265358979323846264338328": 72, "struggl": [72, 219], "346": 72, "34635637913639": 72, "dealt": [72, 93], "504067061906928": 72, "50406706190692837199": 72, "wrap_lin": [72, 95, 96, 104, 112, 200, 207, 208, 219, 220, 236], "intgrl": 72, "extrapol": [72, 227], "richardson": [72, 227, 239], "slowli": [72, 227], "64493406684823": 72, "577215664901533": 72, "57721566490153286060651209008240243104215933593992": 72, "10000000": [72, 216], "20000000": [72, 216], "693147255559946": 72, "worthwhil": 72, "hypergeometr": [72, 73, 86, 92, 93, 214, 231, 232, 236, 238, 240, 277, 297], "ramanujan": [72, 73, 108], "9801": 72, "1103": 72, "26390": 72, "396": [72, 135], "141592653589793238462643383279502884197169399375105820974944592307816406286208": 72, "99862803482534211706798214808651328230664709384460955058223172535940812848111745": 72, "02841027019385211055596446229489549303819644288109756659334461284756482337867831": 72, "355": [72, 108, 214], "113": [72, 108, 233], "33333": [72, 95], "635": 72, "504": [72, 214], "130198866629986772369127970337": 72, "49": [72, 73, 108, 112, 213, 233], "___________": [72, 112, 236], "bell": [73, 169, 222, 258], "k_sym": 73, "binom": [73, 108, 240, 297], "dotsc": [73, 222], "j_1": [73, 164, 165, 182, 205, 222, 241], "j_2": [73, 164, 165, 182, 205, 222], "dotsb": [73, 222], "atop": [73, 76, 222, 230], "2j_2": [73, 222], "3j_2": [73, 222], "j_": [73, 76, 93, 95, 182, 222, 230, 291], "bernoulli": [73, 76, 216, 220, 236, 238, 240], "877": 73, "4140": 73, "21147": 73, "115975": 73, "846749014511809332450147": 73, "luca": [73, 108, 220, 226], "genocchi": [73, 76, 216], "r198": 73, "bell_numb": 73, "r199": 73, "bellnumb": 73, "r200": 73, "bellpolynomi": 73, "hurwitz": [73, 76], "6k": 73, "appel": [73, 76], "confer": [73, 109, 295], "r205": 73, "66": [73, 99, 104, 216, 220], "1000001": 73, "andr": [73, 216], "appellseq": [73, 216], "bernoulli_poli": [73, 216], "r201": 73, "bernoulli_numb": 73, "r202": 73, "bernoulli_polynomi": [73, 216], "r203": 73, "bernoullinumb": 73, "r204": 73, "bernoullipolynomi": 73, "luschni": [73, 76, 216], "manifesto": 73, "r206": 73, "2009": [73, 76, 108, 205, 216], "06743": [73, 76, 216], "_k": [73, 76, 95, 205, 215, 240], "6435": 73, "pascal": [73, 108], "4th": [73, 74, 90, 104, 108, 152], "195": 73, "r208": 73, "postpon": 73, "156675": 73, "4433": 73, "28625": 73, "granvil": [73, 108], "r209": 73, "r207": 73, "johndcook": 73, "binomial_coeffici": [73, 108], "27s_theorem": [73, 239], "andrew": [73, 85, 108], "20170202003812": [73, 108], "dm": [73, 108, 209, 215], "umontr": [73, 108], "bincoeff": [73, 108, 220], "c_n": [73, 76, 97, 216, 236], "429": [73, 220], "1430": 73, "4862": 73, "39764993382373624267": 73, "020884341620842555705": 73, "r210": 73, "catalan_numb": 73, "r211": 73, "catalannumb": [73, 220], "r212": 73, "r213": 73, "geomet": [73, 207], "mathcircl": 73, "2j": [73, 213, 240], "1385": [73, 216], "272": [73, 216], "7936": [73, 216], "2702765": 73, "4096": 73, "euler_poli": [73, 216], "r214": 73, "euler_numb": 73, "r215": 73, "eulernumb": 73, "r216": 73, "alternating_permut": 73, "r217": 73, "alternatingpermut": 73, "swing": 73, "factorial2": [73, 186, 220], "fallingfactori": [73, 220], "subfactori": [73, 220, 258], "derang": [73, 258], "r219": 73, "generate_derang": [73, 258], "r218": 73, "r220": 73, "double_factori": 73, "texttt": [73, 228], "r221": 73, "r222": 73, "paul": [73, 255], "235": 73, "268": 73, "1995": [73, 214, 232, 238], "f_z": [73, 201, 272], "f_2": [73, 93, 119, 129, 133, 153, 213, 230, 236], "r224": 73, "fibonacci_numb": 73, "r225": 73, "fibonaccinumb": 73, "t_0": [73, 233], "149": [73, 108], "r226": 73, "r227": 73, "tribonaccinumb": 73, "r228": 73, "oei": [73, 76, 108, 216], "a000073": 73, "137": [73, 104, 121], "205": [73, 93, 230], "5269": 73, "761": 73, "280": 73, "83711": 73, "27720": 73, "30247": 73, "9900": 73, "983697455232980674869851942390639915940": 73, "r229": 73, "harmonic_numb": 73, "r230": 73, "harmonicnumb": [73, 220], "r231": 73, "harmonicnumber2": 73, "l_0": [73, 120, 246, 247], "47": [73, 76, 104, 108, 121, 158, 190, 219], "76": [73, 76, 104, 108, 213, 216], "r232": 73, "lucas_numb": 73, "r233": 73, "lucasnumb": 73, "genocchi_poli": [73, 216], "r234": 73, "genocchi_numb": 73, "r235": 73, "genocchinumb": 73, "r236": 73, "mathcal": [73, 74, 93, 119, 150, 182, 205, 216, 228], "a000111": [73, 216], "zigzag": 73, "li": [73, 76, 84, 95, 108, 130, 134, 185, 220, 275], "50521": [73, 216], "691": 73, "2730": 73, "andre_poli": [73, 216], "r237": 73, "r238": 73, "eulerzigzagnumb": 73, "r239": 73, "irrelev": 73, "r240": 73, "number_theori": 73, "r241": 73, "pentagonal_number_theorem": 73, "multifactori": 73, "pochhamm": [73, 220, 232], "r242": 73, "r243": 73, "pochhammer_symbol": 73, "274": 73, "225": [73, 108, 214], "511": 73, "9330": 73, "34105": 73, "42525": 73, "22827": 73, "5880": 73, "750": 73, "r244": 73, "stirling_numbers_of_the_first_kind": 73, "r245": 73, "stirling_numbers_of_the_second_kind": 73, "multiset": [73, 93, 255, 258], "nc": 73, "nt": [73, 258], "babi": [73, 108, 258], "aa": [73, 205], "bb": [73, 205, 232, 258], "multiset_combin": [73, 258], "aab": [73, 258], "aabc": 73, "aaaabbbbcccc": 73, "m_1": [73, 119, 164, 182, 205, 233], "m_2": [73, 133, 153, 164, 182, 205], "m_k": 73, "r246": 73, "r247": 73, "tinyurl": 73, "cep849r": 73, "ba": [73, 258], "multiset_permut": [73, 258], "r248": 73, "aabbc": 73, "mississippi": [73, 258], "609": 73, "1521": 73, "1768": 73, "1224": [73, 108], "579": 73, "197": 73, "r249": 73, "20210507012732": 73, "csse": 73, "uwa": 73, "au": 73, "cits7209": 73, "707106781186548": 74, "tangent": [74, 78, 80, 84, 95, 217, 236], "643501108793284": 74, "r250": 74, "ib": [74, 140], "complex_conjug": 74, "polar_lift": [74, 76, 232], "periodic_argu": 74, "principal_branch": [74, 93], "r254": 74, "csc": [74, 110, 220, 229], "sec": [74, 95, 117, 215, 220, 229, 297], "acsc": [74, 220], "asec": [74, 220], "acot": [74, 220], "r251": 74, "trigonometric_funct": 74, "r252": 74, "r253": 74, "elementaryfunct": 74, "trigonometryangl": 74, "r255": 74, "r256": 74, "r257": 74, "r258": 74, "r259": 74, "r260": 74, "cotang": [74, 217], "r261": 74, "r262": 74, "r263": 74, "secant": [74, 216], "r264": 74, "r265": 74, "r266": 74, "cosec": 74, "r267": 74, "r268": 74, "r269": 74, "unnorm": [74, 76, 209], "qquad": [74, 190, 213], "jn": [74, 76, 182, 216, 220, 291], "spheric": [74, 121, 127, 134, 164, 205, 206, 216, 265, 269, 270, 291], "r270": 74, "sinc_funct": 74, "asinh": [74, 220], "r271": 74, "inverse_trigonometric_funct": 74, "r272": 74, "r273": 74, "r274": 74, "r275": 74, "r276": 74, "r277": 74, "r278": 74, "r279": 74, "arctan": [74, 217, 220], "acoth": [74, 220], "r280": 74, "r281": 74, "arccot": [74, 220], "r285": 74, "r282": 74, "r283": 74, "r284": 74, "arcsec": [74, 220], "r286": 74, "r287": 74, "r288": 74, "arccsc": [74, 220], "quadrant": [74, 211, 239], "clock": [74, 229], "reurn": 74, "r289": 74, "r290": 74, "r291": 74, "arctan2": [74, 220], "hyperbolicfunct": 74, "coth": [74, 220, 232], "acosh": [74, 220], "sech": [74, 220], "csch": [74, 220], "asech": [74, 220], "r292": 74, "hyperbolic_funct": 74, "r293": 74, "r294": 74, "arcsech": [74, 220], "acsch": [74, 220], "r295": 74, "r296": 74, "r297": 74, "arccsch": [74, 220], "567": 74, "r298": 74, "r299": 74, "ceilingfunct": 74, "r300": 74, "r301": 74, "floorfunct": 74, "roundfunct": 74, "r302": 74, "fractional_part": 74, "r303": 74, "fractionalpart": 74, "lambertw": [74, 217, 220, 238, 239, 298], "r304": 74, "w_k": 74, "635564016364870": 74, "34747534407696": 74, "41624341514535": 74, "lambert_w_funct": 74, "exprcondpair": 74, "cond": [74, 93, 95, 228], "piecewise_fold": 74, "folded_cond": 74, "ITE": [74, 98, 220], "piecewise_exclus": 74, "_eval_integr": [74, 95], "piecewise_integr": 74, "as_expr_set_pair": 74, "skip_nan": 74, "mutual": [74, 93, 204], "conjunct": [74, 98, 108, 206, 230, 251, 297], "identityfunct": 74, "supremum": [74, 228], "r305": 74, "directed_complete_partial_ord": 74, "r306": 74, "lattice_": 74, "28order": 74, "global_paramet": 74, "real_root": [74, 216, 238], "rootoftool": [74, 104, 216], "r307": 74, "square_root": 74, "r308": 74, "r309": 74, "root_of_un": 74, "r310": 74, "principal_valu": [74, 95], "r311": 74, "cuberoot": 74, "powdenest": [74, 232], "misc": [74, 99, 261], "r312": 74, "r313": 74, "r314": 74, "cube_root": 74, "r315": 74, "int_": [76, 92, 93, 95, 216, 223, 287, 291], "sum_i": [76, 227], "is_simpl": 76, "tensor_funct": 76, "kroneckerdelta": [76, 101, 185, 220, 232], "r316": 76, "deltafunct": [76, 95], "h0": 76, "electron": [76, 121, 229], "improp": [76, 95], "r317": 76, "heavisidestepfunct": 76, "r318": 76, "iv": [76, 217], "105": [76, 108, 216, 233], "parg": 76, "singularity_funct": 76, "singularityfunct": [76, 95, 111], "macaulai": 76, "heavisidediracdelta": 76, "r319": 76, "r320": 76, "r321": 76, "r322": 76, "r323": 76, "setminu": [76, 93], "17805383034794561964694160130": 76, "65092319930185633889": 76, "8724366472624298171": 76, "r324": 76, "r325": 76, "r326": 76, "loggammafunct": 76, "r327": 76, "espinosa": 76, "moll": 76, "r332": 76, "19093197": 76, "5173168": 76, "ni": [76, 108], "r328": 76, "polygamma_funct": 76, "r329": 76, "polygammafunct": 76, "r330": 76, "r331": 76, "polygamma2": 76, "2004": [76, 214, 233], "115": 76, "r333": 76, "digamma_funct": 76, "r334": 76, "digammafunct": 76, "r335": 76, "r336": 76, "trigamma_funct": 76, "r337": 76, "trigammafunct": 76, "r338": 76, "int_x": 76, "_1f_1": 76, "confluent": [76, 230], "xt": 76, "expint": [76, 220], "r339": 76, "incomplete_gamma_funct": 76, "upper_incomplete_gamma_funct": 76, "r340": 76, "r341": 76, "r342": 76, "gamma2": 76, "r343": 76, "gamma3": 76, "r344": 76, "exponential_integr": 76, "relation_with_other_funct": 76, "int_0": [76, 93, 95, 287, 297], "r345": 76, "lower_incomplete_gamma_funct": 76, "r346": 76, "r347": 76, "r348": 76, "r349": 76, "multigamma": 76, "gamma_p": 76, "r350": 76, "multivariate_gamma_funct": 76, "beta_funct": 76, "eulerian": 76, "02671848900111377452242355235388489324562": 76, "2112723729365330143": 76, "7655283165378005676": 76, "r351": 76, "r352": 76, "betafunct": 76, "r353": 76, "error_funct": 76, "999999984582742099719981147840": 76, "1296959": 76, "73071763923152794095062": 76, "r354": 76, "r355": 76, "r356": 76, "r357": 76, "0000000154172579002800188521596734869": 76, "r358": 76, "r359": 76, "r360": 76, "r361": 76, "5648024145755525987042919132": 76, "995322265018952734162069256367": 76, "r362": 76, "r363": 76, "r364": 76, "r365": 76, "179143454621291692285822705344": 76, "r366": 76, "inverse_funct": 76, "r367": 76, "inverseerf": [76, 220], "r368": 76, "r369": 76, "inverseerfc": [76, 220], "r370": 76, "inverseerf2": 76, "fresnelintegr": 76, "343415678363698242195300815958": 76, "fresnelc": [76, 220, 230], "r371": 76, "fresnel_integr": 76, "r372": 76, "r373": 76, "r374": 76, "r375": 76, "wrench": 76, "jr": 76, "vicki": 76, "allei": 76, "488253406075340754500223503357": 76, "r376": 76, "r377": 76, "r378": 76, "r379": 76, "r380": 76, "background": [76, 96, 200, 203, 295], "cauchi": [76, 93, 95, 211, 236, 240], "219383934395520": 76, "21938393439552": 76, "shi": [76, 93, 220, 230], "e1": [76, 78, 85, 135, 210, 215, 227, 236, 239], "hyperbol": [76, 217, 239, 293, 297], "r381": 76, "r382": 76, "r383": 76, "20201128173312": 76, "sfu": [76, 95], "cbm": [76, 95], "aand": [76, 95], "page_228": 76, "int_1": [76, 93], "zt": [76, 93], "unbranch": [76, 93], "meijerg": [76, 87, 93, 95, 220, 240, 297], "postiv": 76, "r384": 76, "r385": 76, "expintegral": [76, 220], "r386": 76, "04516378011749278484458888919": 76, "0652795784357498247001125598": 76, "08346052231061726610939702133": 76, "soldner": 76, "45136923488338": 76, "r387": 76, "logarithmic_integr": 76, "r388": 76, "logarithmicintegr": 76, "r389": 76, "r390": 76, "soldnersconst": 76, "92242131492155809316615998938": 76, "r391": 76, "r392": 76, "r393": 76, "r394": 76, "trigonometric_integr": 76, "_1": [76, 104, 127, 134, 195, 205, 230, 259], "somewhat": [76, 95, 135, 211], "r395": 76, "r396": 76, "r397": 76, "laurent": [76, 211, 217, 236], "j_n": [76, 182], "r398": 76, "r399": 76, "r400": 76, "r401": 76, "yn": [76, 220, 226], "r402": 76, "i_": [76, 93, 230, 240, 241], "iz": 76, "r403": 76, "k_": [76, 93, 128, 147, 148], "r404": 76, "hankel1": [76, 220], "hankel": [76, 95], "iy_": 76, "hankel2": [76, 220], "r405": 76, "hankelh1": [76, 220], "r406": 76, "hankelh2": [76, 220], "orthopoli": [76, 216], "spherical_bessel_fn": [76, 216], "3j": [76, 164, 205], "099419756723640344491": 76, "054525080242173562897": 76, "r407": 76, "y_n": [76, 233], "18525034196069722536": 76, "014895573969924817587": 76, "r408": 76, "jn_zero": 76, "besseljzero": 76, "sph_jn": 76, "7635": 76, "095": 76, "515": 76, "marcumq": 76, "marcum": 76, "q_m": 76, "r409": 76, "marcum_q": 76, "r410": 76, "airybas": 76, "airyai": [76, 220, 236], "ai": [76, 108, 216, 233, 242, 261, 297], "airyaiprim": [76, 220], "22740742820168557599192443603787379946077222541710": 76, "airybi": [76, 220, 236], "airybiprim": [76, 220], "r411": 76, "airy_funct": 76, "r412": 76, "r413": 76, "encyclopediaofmath": 76, "r414": 76, "airyfunct": 76, "41230258795639848808323405461146104203453483447240": 76, "r415": 76, "r416": 76, "r417": 76, "r418": 76, "61825902074169104140626429133247528291577794512415": 76, "r419": 76, "r420": 76, "r421": 76, "r422": 76, "27879516692116952268509756941098324140300059345163": 76, "r423": 76, "r424": 76, "r425": 76, "r426": 76, "bspline": 76, "bspline_basi": 76, "knot": 76, "bspline_basis_set": 76, "r427": 76, "interpolating_splin": 76, "131": [76, 195], "39": [76, 108, 219], "interpolating_poli": [76, 216], "zeta_funct": 76, "admit": [76, 236], "lerch": 76, "transcend": 76, "lerchphi": [76, 220], "dirichlet_eta": [76, 220], "20205690315959": 76, "polylog": [76, 220], "r428": 76, "r429": 76, "hurwitz_zeta_funct": 76, "r430": 76, "dirichlet_eta_funct": 76, "r431": 76, "polylogarithm": 76, "sheet": [76, 229], "phi_0": 76, "ze": 76, "r432": 76, "bateman": [76, 95], "erdelyi": [76, 95], "1953": [76, 215], "york": [76, 93, 151, 230, 238], "mcgraw": [76, 95, 128, 151, 195, 202, 265], "r433": 76, "r434": 76, "lerch_transcend": 76, "stieltj": [76, 220], "gamma_": [76, 120, 122], "r435": 76, "stieltjes_const": 76, "ap": [76, 80, 230], "bq": [76, 208, 209, 230], "a_p": [76, 93, 230, 297], "b_q": [76, 93, 230, 297], "_pf_q": [76, 230, 236, 297], "r436": 76, "r437": 76, "generalized_hypergeometric_funct": 76, "convergence_stat": 76, "radius_of_converg": 76, "radiu": [76, 78, 82, 84, 131, 134, 142, 144, 154, 158, 206, 239, 240, 275], "meijer": [76, 86, 94, 95, 277, 287, 297], "mellin": [76, 95], "barn": 76, "b_m": [76, 93, 238], "confusingli": 76, "int_l": [76, 93, 230], "contour": [76, 78, 93, 206, 230], "__1": 76, "subvector": 76, "aother": 76, "bm": 76, "bother": [76, 292], "slater": [76, 230], "allow_hyp": [76, 232], "subsum": 76, "r438": 76, "r439": 76, "meijer_g": 76, "get_period": [76, 93], "appellf1": [76, 220], "0063339426292673": 76, "172870711": 76, "659936": 76, "15605338197184": 76, "r440": 76, "appell_seri": 76, "r441": 76, "hypergeometricfunct": 76, "elliptic_integr": 76, "elliptic_k": [76, 220], "tfrac": [76, 236, 240], "eccentr": [76, 78], "50923695405127": 76, "625146415202697": 76, "elliptic_f": [76, 220], "r442": 76, "r443": 76, "ellipticintegr": 76, "elliptick": [76, 220], "909449841483": 76, "74720545502474": 76, "r444": 76, "r445": 76, "ellipticf": 76, "elliptic_": [76, 78, 220], "55203744279187": 76, "290764986058437": 76, "991052601328069": 76, "81879421395609": 76, "r446": 76, "r447": 76, "elliptice2": 76, "r448": 76, "elliptic": [76, 220], "elliptic_pi": [76, 220], "50232379629182": 76, "760939574180767": 76, "29136443417283": 76, "32555634906645": 76, "r449": 76, "r450": 76, "ellipticpi3": 76, "r451": 76, "ellipticpi": [76, 220], "mathieu_funct": 76, "mathieubas": 76, "mathieusprim": [76, 220], "mathieuc": [76, 220], "mathieucprim": [76, 220], "r452": 76, "r453": 76, "r454": 76, "mathieufunct": 76, "r455": 76, "mathieuandspheroidalfunct": 76, "r456": 76, "r457": 76, "r458": 76, "r459": 76, "r460": 76, "r461": 76, "r462": 76, "r463": 76, "r464": 76, "r465": 76, "r466": 76, "r467": 76, "chebyshevu": [76, 220], "chebyshevt_root": 76, "chebyshevu_root": 76, "assoc_legendr": [76, 220], "hermite_prob": 76, "jacobi_poli": [76, 216], "gegenbauer_poli": [76, 216], "chebyshevt_poli": [76, 216], "chebyshevu_poli": [76, 216], "hermite_poli": [76, 216], "legendre_poli": [76, 216], "laguerre_poli": [76, 216], "r468": 76, "jacobi_polynomi": 76, "r469": 76, "jacobipolynomi": 76, "r470": 76, "jacobip": [76, 220], "jacobi_norm": 76, "normilz": 76, "p_m": 76, "delta_": [76, 182, 190, 205], "r471": 76, "r472": 76, "r473": 76, "hermite_prob_poli": [76, 216], "r474": 76, "gegenbauer_polynomi": 76, "r475": 76, "gegenbauerpolynomi": 76, "r476": 76, "gegenbauerc3": 76, "r477": 76, "chebyshev_polynomi": 76, "r478": 76, "chebyshevpolynomialofthefirstkind": 76, "r479": 76, "chebyshevpolynomialofthesecondkind": 76, "r480": 76, "r481": 76, "u_n": [76, 95, 213, 215, 216], "r482": 76, "r483": 76, "r484": 76, "r485": 76, "r486": 76, "chebyshev_root": 76, "r487": 76, "legendre_polynomi": 76, "r488": 76, "legendrepolynomi": 76, "r489": 76, "legendrep": [76, 220], "r490": 76, "legendrep2": 76, "r491": 76, "associated_legendre_polynomi": 76, "r492": 76, "r493": 76, "r494": 76, "r495": 76, "hermite_polynomi": 76, "r496": 76, "hermitepolynomi": 76, "r497": 76, "hermiteh": [76, 220], "probabilist": [76, 216, 240], "he_n": [76, 216], "telephon": 76, "a000085": 76, "232": 76, "764": 76, "2620": 76, "9496": 76, "r498": 76, "r499": 76, "l_n": [76, 95, 216], "r500": 76, "laguerre_polynomi": 76, "r501": 76, "laguerrepolynomi": 76, "r502": 76, "laguerrel": [76, 220], "r503": 76, "laguerrel3": 76, "r504": 76, "generalized_laguerre_polynomi": 76, "r505": 76, "associatedlaguerrepolynomi": 76, "r506": 76, "r507": 76, "spherical_harmon": 76, "ynm": [76, 205], "ynm_c": 76, "znm": 76, "r508": 76, "r509": 76, "sphericalharmon": 76, "r510": 76, "sphericalharmonici": 76, "r511": 76, "r512": 76, "r513": 76, "r514": 76, "z_n": [76, 214], "r515": 76, "r516": 76, "r517": 76, "eijk": 76, "levicivita": [76, 104], "eval_levicivita": 76, "pseudotensor": 76, "delta_rang": [76, 185], "kroneck": [76, 108, 184, 185, 205, 241, 246], "r518": 76, "kronecker_delta": [76, 185], "indices_contain_equal_inform": [76, 185], "fermi": [76, 185], "above_fermi": [76, 185], "below_fermi": [76, 185], "is_above_fermi": [76, 185], "is_below_fermi": [76, 185], "is_only_below_fermi": [76, 185], "is_only_above_fermi": [76, 185], "killable_index": [76, 185], "preferred_index": [76, 185], "point2d": [77, 78, 79, 80, 81, 83, 84, 85], "arbitrary_point": [77, 78, 79, 80, 81, 82, 84], "polyfunc": [77, 211, 216], "ambient_dimens": [77, 79, 81, 83], "plot_interv": [77, 78, 81, 84], "lower_bound": [77, 78, 81, 84], "upper_bound": [77, 78, 81, 84], "counterclockwis": [77, 78, 79, 83, 104, 111, 112], "scale": [77, 78, 79, 83, 84, 85, 96, 111, 165, 186, 188, 189, 190, 192, 193, 200, 204, 206, 216, 223, 240, 272, 274], "geometryent": [77, 78, 79, 81, 83, 84, 85], "hradiu": 78, "vradiu": 78, "ellipt": [78, 108, 207], "geometryerror": [78, 81, 84, 85], "radii": 78, "foci": 78, "periapsi": 78, "apoapsi": 78, "focus_dist": 78, "shortest": [78, 81, 84, 131, 134, 203, 226, 232, 236, 258], "auxiliary_circl": 78, "xmin": [78, 79, 81, 83, 84, 206], "ymin": [78, 79, 81, 83, 84, 206], "xmax": [78, 79, 81, 83, 84, 206], "ymax": [78, 79, 81, 83, 84, 206], "rectangl": [78, 79, 81, 83, 84, 206, 216], "director_circl": 78, "perpendicular": [78, 81, 82, 84, 97, 127, 134, 143, 158, 204], "director": 78, "130": 78, "r519": 78, "encloses_point": [78, 79, 84], "border": [78, 84], "_slope": 78, "slope": [78, 79, 81, 84, 95, 111, 112, 117, 127], "r520": 78, "108270": 78, "r521": 78, "shifted_ellips": 78, "evolut": 78, "focal": [78, 154, 158], "100500": 78, "363": [78, 108, 214], "175": [78, 104, 213, 214], "is_tang": [78, 80], "tangent_lin": 78, "normal_lin": 78, "line2d": [78, 81, 84], "2020": [78, 164], "polar_second_moment_of_area": [78, 84], "moment": [78, 84, 111, 112, 137, 145, 148, 150, 206, 216, 233, 240], "constitu": [78, 84, 130, 195, 226, 265], "planar": [78, 84, 112, 127, 158], "resist": [78, 84, 111, 112, 113, 229], "deflect": [78, 84, 111, 112], "bend": [78, 84, 111, 114, 282], "r522": 78, "polar_moment_of_inertia": [78, 84], "random_point": [78, 81, 82], "arb": 78, "364": 78, "notimpl": [78, 215], "second_moment_of_area": [78, 84], "centroid": [78, 84, 85, 111], "i_xx": [78, 84], "i_yi": [78, 84], "i_xi": [78, 84], "ellis": 78, "r523": 78, "list_of_second_moments_of_area": 78, "section_modulu": [78, 84], "sympify": [78, 84, 111, 113, 115, 124, 130, 156, 159, 197], "farthest": [78, 84], "s_x": [78, 84], "s_y": [78, 84], "r524": 78, "semilatus_rectum": 78, "semi": [78, 81, 108], "latu": 78, "rectum": 78, "chord": 78, "conic": [78, 233, 265], "directrix": 78, "r525": 78, "semilatusrectum": 78, "r526": 78, "latus_rectum": 78, "collinear": [78, 80, 82, 83, 84], "gx": 78, "hy": 78, "synonym": [78, 215], "p4": [78, 81, 83, 84, 130, 206], "t2": [79, 84, 85, 108, 124, 130, 233, 240, 246], "ordering_of_class": 79, "is_similar": [79, 81, 84, 85], "uniform": [79, 206, 238, 240], "enlarg": 79, "shrink": [79, 93], "parameter_valu": [79, 82], "pent": 79, "rpent": 79, "rcirc": 79, "entity1": 80, "entity2": 80, "zp": 80, "is_collinear": [80, 83], "segment2d": [80, 81, 84, 85], "wikipappu": 80, "subs_point": 80, "p11": 80, "p12": 80, "p13": 80, "p21": 80, "p22": 80, "p23": 80, "ll1": 80, "ll2": 80, "ll3": 80, "ll4": 80, "ll5": 80, "ll6": 80, "pp1": 80, "pp2": 80, "pp3": 80, "encyclopedia": [80, 202], "apr": 80, "s_hexagon_theorem": 80, "clockwis": [80, 95, 99, 104, 111, 112, 113, 115], "overlap": [80, 85, 107, 207, 228, 261], "infanc": 80, "geometryresult": 80, "fair": [80, 240], "angle_between": [81, 82, 84, 195], "reflex": 81, "eman": 81, "readili": [81, 104], "sw": 81, "obtus": 81, "smallest_angle_between": 81, "point3d": [81, 82, 83, 158], "line3d": [81, 82, 83], "is_perpendicular": [81, 82, 83, 84], "ray2d": [81, 84], "closing_angl": 81, "are_concurr": [81, 82], "concurr": [81, 82, 217], "l3": [81, 138, 213], "l4": [81, 138], "bisector": [81, 84], "p5": [81, 83, 84, 206], "p6": [81, 84, 206], "p7": [81, 84, 206], "segment3d": [81, 82], "direction_ratio": [81, 83], "is_parallel": [81, 82], "parallel_lin": 81, "perpendicular_lin": [81, 82], "perpendicular_seg": 81, "reform": 81, "92": [81, 214, 236, 240, 258], "ccw": [81, 84], "ray3d": [81, 82, 158], "xdirect": 81, "ydirect": 81, "midpoint": [81, 83, 84, 95, 206, 271], "170": [81, 240], "341": 81, "perpendicular_bisector": 81, "linearentity2d": 81, "linearentity3d": [81, 82], "direction_cosin": [81, 83], "zdirect": 81, "normal_vector": [82, 158], "proce": [82, 149, 213, 215, 230, 238], "147": 82, "321": 82, "is_coplanar": 82, "perpendicualar": 82, "parallel_plan": 82, "on_circl": 82, "off_circl": 82, "perpendicular_plan": 82, "pt1": 82, "projection_lin": 82, "on_morph": 83, "affine_rank": 83, "are_coplanar": 83, "canberra_dist": 83, "canberra": 83, "geometricent": 83, "taxicab_dist": 83, "is_concycl": 83, "concycl": 83, "fewer": [83, 84, 149, 240, 287], "is_scalar_multipl": 83, "ambient": 83, "orthogonal_direct": 83, "taxicab": 83, "_nocheck": 83, "are_collinear": 83, "unrot": 84, "circumscrib": 84, "spin": [84, 121, 137, 171, 172, 180, 282], "perimet": 84, "contact": [84, 137, 141, 142, 143, 144, 203, 244], "38": [84, 104, 108, 220, 233, 235, 240], "cut_sect": 84, "upper_polygon": 84, "lower_polygon": 84, "upper_seg": 84, "lower_seg": 84, "r527": 84, "r528": 84, "paulbourk": 84, "polygonmesh": 84, "insidepoli": 84, "first_moment_of_area": 84, "q_x": [84, 203], "q_y": [84, 203], "625": [84, 275], "3125": [84, 240], "525": 84, "3000": [84, 111], "r529": 84, "skyciv": 84, "beam": [84, 115, 154, 157, 282], "bmd": 84, "r530": 84, "mechanicalc": 84, "poly1": 84, "poly2": 84, "interior": [84, 216, 228], "180": [84, 204, 214], "r531": 84, "r532": 84, "r533": 84, "apothem": 84, "interior_angl": 84, "exterior_angl": 84, "circumcircl": 84, "incircl": 84, "inradiu": 84, "inscrib": 84, "circumcent": 84, "circumradiu": 84, "leg": [84, 113], "square_in_unit_circl": 84, "kite": 84, "asa": 84, "sa": [84, 216], "sss": 84, "altitud": 84, "orthocent": 84, "exradii": 84, "median": [84, 240], "medial": 84, "nine_point_circl": 84, "straight": [84, 90, 117, 131, 134, 139, 203, 236], "eulerlin": 84, "equilater": 84, "excent": 84, "excircl": 84, "touch": [84, 137, 229], "r534": 84, "ly": [84, 104, 211], "exradiu": 84, "r535": 84, "r536": 84, "incent": 84, "is_equilater": 84, "is_isoscel": 84, "is_right": 84, "is_scalen": 84, "nine": [84, 220], "feet": 84, "real_num": 85, "hull": 85, "r537": 85, "graham_scan": 85, "r538": 85, "1979": [85, 190], "20210511015444": 85, "geomalgorithm": 85, "a10": 85, "_hull": 85, "t3": [85, 233], "averag": [85, 95, 108, 213, 240], "p_r": 86, "holonomic_funct": 86, "from_hyp": [87, 90], "holonomicfunct": [87, 90, 91], "from_meijerg": [87, 90], "initcond": [87, 89, 90], "expr_to_holonom": [87, 90, 91, 92], "lenic": [87, 89], "meijerint": [87, 89, 93, 95], "_rewrite1": [87, 93], "_convert_poly_rat_alg": [87, 89], "_create_t": [87, 89], "_create_lookup_t": [89, 93], "differentialoper": [90, 91, 174], "old_poly_r": [90, 91, 207, 210, 211], "to_sequ": 90, "n_0": [90, 213, 238, 239], "indici": [90, 91, 92, 236], "c_j": [90, 93, 230], "holonomicsequ": 90, "r539": 90, "hal": 90, "inria": [90, 95], "00070025": 90, "r540": 90, "www3": [90, 236, 265], "risc": [90, 236, 265], "jku": [90, 236, 265], "risc_2244": 90, "diplform": 90, "_recur": 90, "rk4": 90, "71828182845905": 90, "10517083333333": 90, "22140257085069": 90, "34985849706254": 90, "49182424008069": 90, "64872063859684": 90, "82211796209193": 90, "01375162659678": 90, "22553956329232": 90, "45960141378007": 90, "71827974413517": 90, "331": 90, "4641": 90, "61051": 90, "771561": 90, "9487171": 90, "14358881": 90, "357947691": 90, "5937424601": 90, "to_hyp": 90, "as_list": [90, 216], "to_meijerg": 90, "1_0": 91, "1_1": 91, "0_0": 91, "0_1": 91, "list_of_poli": 91, "weyl": [91, 97], "differentialoperatoralgebra": 91, "Ore": 91, "dxa": 91, "endomorph": [91, 215], "frobeniu": [92, 104, 108, 213, 214], "subtleti": 93, "recast": [93, 232, 238, 239], "branchpoint": 93, "crude": [93, 137, 206], "decre": 93, "biholomorph": 93, "topologi": [93, 228], "neighbourhood": 93, "evid": [93, 128, 143, 230, 242], "peculiar": [93, 204], "_split_mul": 93, "_mytyp": 93, "inequival": 93, "_mul_as_two_part": 93, "twist": 93, "recognis": [93, 210, 230, 232], "anywai": [93, 232, 236], "analyitc": 93, "_rewrite_singl": 93, "_rewrite2": 93, "_rewrite_saxena_1": 93, "_rewrite_saxena": 93, "blogpost": 93, "remedi": 93, "exploit": [93, 252], "transpar": [93, 96, 200], "nessgrh": 93, "wordpress": [93, 233], "07": 93, "stade": 93, "c_u": 93, "d_1": [93, 190, 216, 240], "d_v": 93, "amalgam": 93, "prudnikov1990": [93, 230], "luke1969": [93, 230], "fulfil": [93, 205], "vee": [93, 98, 104], "lceil": 93, "rceil": 93, "d_j": [93, 190, 230], "lambda_c": [93, 148], "lambda_": 93, "z_0": [93, 232], "z_1": 93, "a_i": [93, 190, 195, 204, 208, 213, 230], "c_5": 93, "c_6": 93, "c_7": 93, "c_8": 93, "lvert": 93, "rvert": 93, "c_9": 93, "versatil": 93, "bz": [93, 233, 246], "deform": [93, 112], "encircl": 93, "appeal": 93, "fox": 93, "obstacl": 93, "identif": [93, 239], "domin": [93, 99, 225, 227], "iT": 93, "omega_": 93, "disguis": 93, "meijerint_indefinit": 93, "meijerint_definit": 93, "meijerint_invers": 93, "kelli": [93, 230], "roach": [93, 230], "211": [93, 108, 216, 230, 236], "prudnikov": [93, 230], "yu": [93, 205, 230], "brychkov": [93, 230], "marichev": [93, 230], "gordon": [93, 164, 230], "breach": [93, 230], "_coeffexpvalueerror": 93, "_get_coeff_exp": 93, "_check_anteced": 93, "_check_antecedents_1": 93, "mt": 93, "_check_antecedents_invers": 93, "anteced": [93, 227], "_condsimp": 93, "hoc": 93, "simp": [93, 195], "_dummi": 93, "_dummy_": 93, "_eval_cond": 93, "_expon": 93, "_find_splitting_point": 93, "fsp": 93, "_flip_g": 93, "_function": 93, "_guess_expans": 93, "sensibl": [93, 95], "_inflate_fox_h": 93, "_inflate_g": 93, "_int0oo": 93, "_int0oo_1": 93, "_int_invers": 93, "_is_analyt": 93, "_meijerint_definite_2": 93, "trigexpand": 93, "_meijerint_definite_3": 93, "_meijerint_definite_4": 93, "only_doubl": 93, "_meijerint_indefinite_1": 93, "_mul_arg": 93, "_my_principal_branch": 93, "full_pb": 93, "nearer": 93, "superflu": 93, "opaqu": [93, 220], "fac": 93, "_rewrite_invers": 93, "costli": [93, 139, 209, 216, 293], "tx": [93, 295], "happili": [95, 244], "nonelementari": 95, "mellin_transform": 95, "bilater": 95, "mellintransform": 95, "integraltransform": 95, "inverse_mellin_transform": 95, "fourier_transform": 95, "hankel_transform": 95, "inverse_hankel_transform": 95, "inversemellintransform": 95, "laplacetransform": 95, "r541": 95, "prooject": 95, "1954": 95, "caltech": 95, "caltechauthor": 95, "20140123": 95, "101456353": 95, "fdict": 95, "inverselaplacetransform": 95, "singularit": [95, 149], "fouriertransform": 95, "_fourier_transform": 95, "inverse_fourier_transform": 95, "sine_transform": 95, "inverse_sine_transform": 95, "cosine_transform": 95, "inverse_cosine_transform": 95, "bixk": 95, "inversefouriertransform": 95, "sinetransform": 95, "inversesinetransform": 95, "cosinetransform": 95, "inversecosinetransform": 95, "hankeltransform": 95, "ht": 95, "inversehankeltransform": 95, "_compute_transform": 95, "_as_integr": 95, "integraltransformerror": 95, "_name": 95, "_collapse_extra": 95, "needev": 95, "function_vari": 95, "transform_vari": 95, "lazard": [95, 213, 216], "rioboo": 95, "trager": 95, "horowitz": 95, "ostrogradski": 95, "ratint": 95, "rationaltool": [95, 216], "ratint_logpart": 95, "ratint_ratpart": 95, "r542": 95, "bronstein": [95, 214, 216, 222, 238], "verlag": [95, 214], "deg": [95, 117, 135, 208, 211, 213, 215, 216], "q_i": [95, 129, 149], "_t": [95, 135, 138, 152, 185, 194, 195, 199, 230, 240], "trigintegr": 95, "trigonometri": 95, "r543": 95, "integration_techniqu": 95, "deltaintegr": 95, "couldn": 95, "singularityintegr": 95, "risch_integr": 95, "nonelementaryintegr": 95, "proven": [95, 108, 271, 289], "handle_first": 95, "separate_integr": 95, "rewrite_complex": 95, "forthcom": 95, "5109": 95, "manualintegr": 95, "integral_step": 95, "student": [95, 229, 233, 240], "rootsum": [95, 216, 222], "substep": 95, "sympy_gamma": 95, "blob": 95, "app": 95, "intstep": 95, "urul": 95, "u_var": 95, "_u": [95, 185], "u_func": 95, "arctanrul": 95, "sinrul": 95, "rewriterul": 95, "addrul": 95, "powerrul": 95, "constanttimesrul": 95, "constantrul": 95, "norman": 95, "retri": [95, 108], "degree_offset": 95, "unnecessary_permut": 95, "_try_heurisch": 95, "manuel": [95, 225], "poor": [95, 109], "man": [95, 214], "airi": [95, 236], "whittak": 95, "r544": 95, "sop": [95, 98], "cafe": 95, "pmint": 95, "r545": 95, "gedd": [95, 214], "stefanu": 95, "217": [95, 214], "r546": 95, "davenport": [95, 213, 214], "eurocam": 95, "lnc": [95, 214, 238], "157": [95, 108, 112, 214], "r547": 95, "iii": [95, 220, 236], "sigsam": 95, "bulletin": 95, "1982": [95, 205], "r548": 95, "transact": [95, 214], "1985": [95, 128, 151, 195, 265], "356": [95, 215, 238], "362": 95, "lookup": [95, 104, 108, 230], "huge": [95, 108, 216, 256], "entail": 95, "delic": [95, 207], "albeit": [95, 269], "mimic": [95, 96, 200, 259], "irrespect": [95, 233, 236, 261], "line_integr": 95, "as_sum": 95, "subinterv": 95, "trapezoid": [95, 104, 240], "730": 95, "809": 95, "decai": 95, "r549": 95, "riemann_sum": 95, "riemann_summation_method": 95, "r550": 95, "cauchy_principal_valu": 95, "r551": 95, "cauchyprincipalvalu": 95, "int_a": 95, "uvar": 95, "3aissu": 95, "3aopen": 95, "3aintegr": 95, "gauss_legendr": 95, "n_digit": 95, "legendr": [95, 108, 216, 220, 233], "r552": 95, "w_i": [95, 154, 216, 236], "7746": 95, "55556": 95, "88889": 95, "86114": 95, "33998": 95, "34785": 95, "65215": 95, "gauss_laguerr": 95, "gauss_gen_laguerr": 95, "gauss_hermit": 95, "gauss_chebyshev_t": 95, "gauss_chebyshev_u": 95, "gauss_jacobi": 95, "gauss_lobatto": 95, "gaussian_quadratur": 95, "r553": 95, "fsu": 95, "jburkardt": 95, "cpp_src": 95, "legendre_rul": 95, "laguerr": [95, 216, 220], "r554": 95, "41577": 95, "2943": 95, "2899": 95, "71109": 95, "27852": 95, "010389": 95, "22285": 95, "1889": 95, "9927": 95, "7751": 95, "8375": 95, "983": 95, "45896": 95, "417": [95, 232], "11337": 95, "010399": 95, "00026102": 95, "9855e": 95, "93laguerre_quadratur": 95, "r555": 95, "laguerre_rul": 95, "hermit": [95, 99, 104, 105, 209, 215, 216, 220, 240], "r556": 95, "2247": 95, "29541": 95, "1816": 95, "3506": 95, "3358": 95, "43608": 95, "00453": 95, "15707": 95, "72463": 95, "hermite_quadratur": 95, "r557": 95, "hermite_rul": 95, "r558": 95, "gen_hermite_rul": 95, "r559": 95, "19016": 95, "7845": 95, "5253": 95, "4493": 95, "31413": 95, "00906": 95, "97851": 95, "9904": 95, "3193": 95, "53087": 95, "67721": 95, "11895": 95, "0023152": 95, "r560": 95, "gen_laguerre_rul": 95, "r561": 95, "86602": 95, "0472": 95, "96593": 95, "70711": 95, "25882": 95, "5236": 95, "93gauss_quadratur": 95, "r562": 95, "chebyshev1_rul": 95, "r563": 95, "3927": 95, "7854": 95, "90097": 95, "62349": 95, "22252": 95, "084489": 95, "27433": 95, "42658": 95, "r564": 95, "chebyshev2_rul": 95, "jacobi": [95, 108, 121, 216, 220], "r565": 95, "7063": 95, "0973": 95, "33795": 95, "87174": 95, "5917": 95, "2093": 95, "050584": 95, "22169": 95, "39439": 95, "93jacobi_quadratur": 95, "r566": 95, "jacobi_rul": 95, "r567": 95, "gegenbauer_rul": 95, "lobatto": 95, "r568": 95, "3333": 95, "44721": 95, "16667": 95, "83333": 95, "93lobatto_rul": 95, "r569": 95, "20200118141346": 95, "page_888": 95, "intpoli": 95, "chin": 95, "al": [95, 135, 164, 213, 229, 232], "2015": [95, 129, 239], "unit_cub": 95, "polytope_integr": 95, "eric": [95, 214], "jean": 95, "lasserr": 95, "sukumar": 95, "nonconvex": 95, "967": 95, "981": 95, "dilbert": 95, "engr": 95, "ucdavi": 95, "suku": 95, "max_degre": [95, 216], "689": [95, 112], "21875": 95, "octahedron": 95, "trivari": 95, "enable_automatic_int_sympif": 96, "enable_automatic_symbol": 96, "init_ipython_sess": 96, "argv": [96, 251], "init_python_sess": 96, "use_latex": [96, 200, 206, 296], "quiet": 96, "str_printer": [96, 200], "latex_print": [96, 200], "pylab": 96, "stringifi": [96, 200], "sstrrepr": [96, 200, 220], "lexograph": [96, 200], "\u03b8": [96, 127, 157, 239], "int_to_integ": 96, "decistmt": 96, "f401": 96, "0x12": 96, "num_column": [96, 200, 220, 236], "no_glob": [96, 200], "ip": [96, 173, 179, 200], "forecolor": [96, 200], "backcolor": [96, 200], "fontsiz": [96, 200, 220], "10pt": [96, 200, 220], "latex_mod": [96, 200], "print_builtin": [96, 200], "interactiveconsol": [96, 200], "preambl": [96, 200, 220], "handwritten": [96, 200], "ctan": [96, 200], "pkg": [96, 200], "dvi": [96, 200, 220], "foreground": [96, 200], "black": [96, 170, 181, 200, 220, 296], "white": [96, 200, 240], "documentclass": [96, 200, 220], "dpi": [96, 200], "u03b8": 96, "dvip": 96, "r570": 96, "r571": 96, "the_68_standard_colors_known_to_dvip": 96, "root_system": 97, "rootsystem": 97, "cartantyp": 97, "cartan": 97, "subalgebra": 97, "adjoint": [97, 99, 104, 162, 166], "hyperplan": 97, "k_y": 97, "r572": 97, "r573": 97, "humphrei": 97, "add_as_root": 97, "root1": 97, "root2": 97, "add_simple_root": 97, "newroot": 97, "all_root": [97, 108, 216], "cartan_matrix": 97, "dynkin_diagram": 97, "dynkin": 97, "root_spac": 97, "simple_root": 97, "type_a": 97, "typea": 97, "basic_root": 97, "iin": 97, "jth": [97, 209, 239], "ijth": 97, "cartan_typ": 97, "highest_root": 97, "lie_algebra": 97, "positive_root": 97, "type_b": 97, "typeb": 97, "b4": 97, "b3": [97, 135, 152, 195, 271], "type_c": 97, "typec": 97, "type_d": 97, "dmension": 97, "type_": 97, "e6": 97, "type_f": 97, "typef": 97, "f_4": [97, 129], "f4": [97, 206], "type_g": 97, "typeg": 97, "weyl_group": 97, "weylgroup": 97, "semisimpl": 97, "isometri": 97, "coxet": 97, "coxeter_diagram": 97, "undirect": [97, 258], "s_is_j": 97, "delete_doubl": 97, "element_ord": 97, "weylelt": 97, "group_nam": 97, "group_ord": 97, "192": 97, "matrix_form": 97, "cartantype_gener": 97, "standard_cartan": 97, "dynkindiagram": 97, "cartanmatrix": 97, "sopform": 98, "minterm": 98, "dontcar": 98, "simplified_pair": 98, "combo": 98, "outcom": [98, 188, 240], "posform": 98, "r574": 98, "quin": 98, "mccluskey_algorithm": 98, "r575": 98, "27t": 98, "care_term": 98, "r576": 98, "r577": 98, "anfform": 98, "truthvalu": 98, "anf": 98, "zhegalkin": 98, "r578": 98, "zhegalkin_polynomi": 98, "booleantru": 98, "greet": 98, "booleanfals": 98, "universalset": [98, 228], "nand": 98, "xnor": 98, "gate": [98, 165, 170, 172, 178, 179, 181, 282], "perspect": [98, 108, 119, 190, 206, 253, 270, 274], "multiplex": 98, "disjunct": 98, "to_anf": 98, "oplu": [98, 169], "to_cnf": 98, "cnf": 98, "mccluskei": 98, "to_dnf": 98, "to_nnf": 98, "nnf": 98, "is_anf": 98, "is_cnf": 98, "is_dnf": 98, "is_nnf": 98, "gateinputcount": 98, "simplify_log": 98, "fewest": [98, 179], "r579": 98, "bool_map": 98, "bool1": 98, "bool2": 98, "function1": 98, "function2": 98, "distribute_and_over_or": 98, "distribute_or_over_and": 98, "distribute_xor_over_and": 98, "eliminate_impl": 98, "truth_tabl": 98, "ibin": [98, 258], "integer_to_term": 98, "0001111011": [98, 258], "1101111000": [98, 258], "term_to_integ": 98, "bool_maxterm": 98, "maxterm": 98, "complement": [98, 101, 216, 228, 239], "r580": 98, "canonical_normal_form": 98, "indexing_maxterm": 98, "bool_minterm": 98, "r581": 98, "indexing_minterm": 98, "bool_monomi": 98, "anf_coeff": 98, "to_int_repr": 98, "all_model": 98, "unsatisfi": 98, "use_model": 98, "unsat": 98, "dirac": [99, 104, 117, 121, 122, 183, 220], "__abs__": [99, 211], "__add__": [99, 211, 215], "__len__": 99, "96": [99, 104, 240], "mismatch": 99, "matrix_multiply_elementwis": [99, 104], "col": [99, 101, 104, 107, 119, 152, 209, 215, 293], "col_del": [99, 104, 293], "col_join": [99, 104, 137], "col_insert": [99, 293], "row_insert": [99, 293], "row_join": [99, 104, 137], "companion": [99, 101], "c0": [99, 101, 227, 236, 238], "sparsematrix": [99, 104, 107, 221, 232], "diag": [99, 101, 104, 107, 152, 209, 246, 293], "immutablematrix": [99, 100, 101, 119, 195, 240, 265, 268, 293], "blockmatrix": [99, 101, 104], "sparsetool": [99, 107], "band": [99, 107], "kth": [99, 108], "rowslist": [99, 209], "colslist": [99, 209], "submatrix": [99, 104, 209, 213, 240], "get_diag_block": [99, 101, 104], "decoupl": 99, "hstack": [99, 209], "is_anti_symmetr": 99, "is_diagon": [99, 104, 209], "is_low": [99, 209], "is_upp": [99, 209], "matrixeigen": [99, 104], "is_diagonaliz": [99, 104], "is_hermitian": [99, 104], "is_lower_hessenberg": 99, "hessenberg": [99, 104], "superdiagon": 99, "is_upper_hessenberg": 99, "is_strongly_diagonally_domin": 99, "strongli": [99, 104, 209, 258], "m1": [99, 104, 108, 111, 112, 156, 164, 182, 184, 188, 233, 236, 241, 246], "subdiagon": [99, 104], "is_weakly_diagonally_domin": 99, "weakli": [99, 258], "vacuou": 99, "jordan_block": [99, 104], "eigenvalu": [99, 104, 135, 137, 179, 182, 291], "eigenv": [99, 104, 135, 137, 152, 179, 291, 293], "r582": 99, "jordan_matrix": [99, 236], "dotprodsimp": 99, "blowup": [99, 209], "multiply_elementwis": [99, 104, 209], "hadamard": [99, 101, 104, 169, 170, 181, 220], "elementwis": [99, 101, 104, 209, 241], "300": [99, 104, 108, 111, 201, 206, 217, 274], "a_0": [99, 104, 223, 233, 236, 241, 297], "vdot": [99, 101, 104, 190], "alpha_0": 99, "alpha_1": [99, 108, 215], "alpha_": [99, 205], "permute_col": 99, "permute_row": 99, "mulsimp": 99, "rmultipli": 99, "__rmul__": 99, "rot90": 99, "anticlockwis": [99, 115], "row_del": [99, 104, 293], "todod": 99, "tolist": [99, 241], "vech": 99, "check_symmetri": 99, "vstack": [99, 209], "w_": [99, 215], "wminu": 99, "wplu": 99, "r583": 99, "mathwork": [99, 117, 240, 293], "cleve": 99, "r584": 99, "claredon": 99, "oxford": 99, "662": 99, "intm": 99, "mutabledensematrix": [100, 209, 261], "densematrix": [100, 104], "ldldecomposit": [100, 104], "ldl": [100, 104], "choleski": [100, 104], "ludecomposit": [100, 101, 104, 209, 293], "qrdecomposit": [100, 104], "as_immut": 100, "lower_triangular_solv": [100, 104], "upper_triangular_solv": [100, 104], "gauss_jordan_solv": [100, 104], "cholesky_solv": [100, 104], "diagonal_solv": [100, 104], "ldlsolv": [100, 104], "qrsolv": [100, 104], "pinv_solv": [100, 104], "cramer_solv": [100, 104], "permutedim": [101, 241, 242], "arraytensorproduct": [101, 241, 242], "from_index_summ": 101, "first_index": 101, "last_index": 101, "longrightarrow": 101, "matpow": [101, 220], "hadamard_product": 101, "aka": 101, "hadamardproduct": [101, 220], "hadamardpow": [101, 220], "ddot": [101, 104, 139, 148, 200, 203, 220, 297], "functionmatrix": 101, "lazili": [101, 226, 258], "342923500": 101, "permutationmatrix": [101, 104], "matrixpermut": 101, "companionmatrix": 101, "matrixset": [101, 228], "submatric": [101, 104, 209, 240], "block_collaps": 101, "dat": [101, 258], "irregular": [101, 104], "ldudecomposit": 101, "ldu": 101, "2x2": [101, 107, 154, 209, 236], "udldecomposit": 101, "udl": 101, "schur": 101, "pinv": [101, 104], "r585": 101, "schur_compl": 101, "blockdiagmatrix": [101, 104], "diag_block": 101, "bridg": [102, 113, 115, 135, 259], "tension": [102, 113], "gramschmidt": 104, "m2": [104, 108, 111, 112, 130, 156, 164, 182, 184, 188, 215, 233, 236, 241, 246], "126": [104, 108, 219], "150": [104, 119, 233], "v3": [104, 195, 199, 271], "glue": 104, "m3": [104, 164, 233, 241], "adj": [104, 209], "qr": 104, "cheat": 104, "soln": 104, "gram": [104, 189, 190, 192], "schmidt": 104, "out1": 104, "out2": 104, "1692": 104, "1551": 104, "423": 104, "6707": 104, "spot": [104, 153], "eigenvector": [104, 135, 179, 180, 205], "nullspac": [104, 209], "matrixdetermin": 104, "adjug": [104, 209], "berkowitz": [104, 209], "bareiss": [104, 209], "bird": 104, "cofactor_matrix": 104, "charpoli": [104, 209, 293], "_simplifi": 104, "purepoli": [104, 209, 216], "samuelson": [104, 209], "minor_submatrix": 104, "iszerofunc": [104, 293], "r586": 104, "barei": 104, "det_lu": 104, "functiontyp": 104, "_iszero": [104, 293], "_is_zero_after_expand_mul": 104, "unrecogn": 104, "nonsquarematrixerror": [104, 236], "i3": [104, 120, 135, 152, 246], "1072": 104, "1074": 104, "ipl": 104, "006": 104, "ryser": 104, "r587": 104, "prof": 104, "ben": 104, "berkelei": 104, "bernd": 104, "ban275": 104, "r588": 104, "permanent_": 104, "r589": 104, "r590": 104, "rectangular": [104, 206, 228, 239, 269], "0904": 104, "3251": 104, "matrixreduct": 104, "echelon_form": [104, 293], "with_pivot": 104, "echelon": [104, 209, 239, 293], "elementary_col_op": 104, "kn": [104, 111, 112, 113], "col1": 104, "col2": 104, "km": [104, 108, 123, 128, 137, 139, 142, 143, 147, 149, 152, 191], "elementary_row_op": 104, "row1": 104, "row2": 104, "is_echelon": [104, 293], "rref": [104, 209], "pivot": [104, 209, 293], "normalize_last": 104, "rref_matrix": [104, 209], "rref_pivot": [104, 209], "301369863013699": 104, "712328767123288": 104, "noramlize_last": 104, "matrixsubspac": 104, "subspac": [104, 215], "columnspac": [104, 209], "rowspac": [104, 209], "orthonorm": [104, 152, 180, 204, 269], "rankcheck": 104, "r591": 104, "93schmidt_process": 104, "eigen": [104, 161], "bidiagonal_decomposit": 104, "ubv": 104, "bidiagon": 104, "bidiagn": 104, "r592": 104, "golub": 104, "van": [104, 108, 214], "loan": 104, "r593": 104, "vslobodi": 104, "household": 104, "r594": 104, "r595": 104, "reals_onli": 104, "error_when_incomplet": 104, "eig": [104, 135, 152], "matrixerror": 104, "got": [104, 207, 210, 213, 216, 219, 251, 252, 258, 259, 289, 291, 292], "eigenvect": [104, 135, 152, 179, 293], "tidi": 104, "artifact": 104, "ret": 104, "eigenspac": 104, "rag": 104, "a_3": 104, "diagonaliz": [104, 293], "is_indefinit": 104, "semidefinit": [104, 240], "plot3d": [104, 206], "is_positive_definit": 104, "is_positive_semidefinit": 104, "is_negative_definit": 104, "is_negative_semidefinit": 104, "defer": [104, 262], "r596": 104, "definiteness_of_a_matrix": 104, "r597": 104, "positivedefinitematrix": 104, "r598": 104, "amer": 104, "259": 104, "264": [104, 238], "r599": 104, "r600": 104, "r601": 104, "r602": 104, "r603": 104, "r604": 104, "r605": 104, "r606": 104, "r607": 104, "r608": 104, "r609": 104, "r610": 104, "jordan_form": 104, "calc_transform": 104, "left_eigenvect": 104, "singular_valu": 104, "condition_numb": 104, "matrixcalculu": 104, "hessian": 104, "wronskian": [104, 236], "simpfunc": 104, "permutebkwd": 104, "permutefwd": 104, "lucombin": 104, "defici": [104, 108, 239], "matrixi": 104, "ludecomposition_simpl": [104, 293], "ludecompositionff": 104, "pa": [104, 128, 130, 131, 147, 150, 153], "r611": 104, "zhou": 104, "jeffrei": [104, 232], "frontier": [104, 228], "china": 104, "67": [104, 213, 214], "2008": [104, 205, 214, 216, 220], "row_swap": 104, "permute_backward": 104, "permute_forward": 104, "intiuit": 104, "lu_": 104, "_find_reasonable_pivot": 104, "qr_solv": 104, "167": 104, "158": [104, 112], "27261": 104, "30625": 104, "348": 104, "1914": 104, "6125": [104, 108], "30589": 104, "198": 104, "1225": 104, "q_aug": 104, "r_aug": 104, "analytic_func": 104, "connected_compon": [104, 258], "connected_components_decomposit": 104, "det_method": 104, "cramer": [104, 128, 209, 236], "46": [104, 108, 111, 190, 219, 238, 240], "r612": 104, "27s_rule": 104, "explicit_formulas_for_small_system": 104, "relax": [104, 110], "3x1": 104, "1x3": 104, "hat": [104, 127, 146, 194, 195, 200, 201, 203, 204, 269, 270, 272, 274, 275], "conjugate_convent": 104, "dual": [104, 177, 183], "anti_symmetr": 104, "speak": [104, 215, 272], "freevar": 104, "underdetermin": [104, 209, 238, 239], "free_var_index": 104, "tau0": [104, 239, 240], "tau1": 104, "taus_zero": 104, "sol_uniqu": 104, "r613": 104, "gaussian_elimin": 104, "try_block_diag": 104, "inverse_g": [104, 293], "inverse_lu": [104, 293], "inverse_adj": [104, 293], "inverse_ch": 104, "inverse_ldl": 104, "inverse_qr": 104, "inv_mod": 104, "cof": 104, "inverse_block": 104, "blockwis": 104, "ntop": 104, "key2bound": 104, "key2ij": 104, "reciproc": [104, 240, 297], "fro": 104, "sing": 104, "spectral": 104, "rd": [104, 135, 220], "r614": 104, "penrose_pseudoinvers": 104, "arbitrary_matrix": 104, "wn_m": 104, "_w0_0": 104, "_w1_0": 104, "_w2_0": 104, "59": [104, 236], "r615": 104, "obtaining_all_solutions_of_a_linear_system": 104, "print_nonzero": [104, 258], "symb": [104, 220], "rank_decomposit": 104, "r616": 104, "rank_factor": 104, "r617": 104, "piziak": 104, "odel": 104, "magazin": 104, "2307": 104, "2690882": 104, "singular_value_decomposit": 104, "condens": [104, 239], "v_aug": 104, "u_aug": 104, "s_aug": 104, "gj": [104, 209], "solve_least_squar": 104, "strongly_connected_compon": [104, 209, 258], "62": [104, 213], "strongly_connected_components_decomposit": 104, "rowstart": 104, "rowend": 104, "rowsep": 104, "colsep": 104, "strprinter": [104, 200], "upper_hessenberg_decomposit": 104, "213": 104, "134": 104, "216": [104, 213], "hessenbergdecomposit": 104, "angular": [104, 111, 121, 124, 127, 130, 137, 138, 139, 140, 142, 144, 146, 149, 152, 154, 158, 159, 161, 164, 182, 186, 195, 199, 205], "rot_ccw_axis3": 104, "retriv": 104, "jordan_cel": 104, "varlist": 104, "r618": 104, "hessian_matrix": 104, "vlist": 104, "r619": 104, "casoratian": 104, "kernel": [104, 207, 213, 215, 238], "vanish": [104, 185, 213, 216, 219, 236, 265], "rsolve_hyp": [104, 238], "randmatrix": 104, "percent": [104, 239], "prng": 104, "percentag": [104, 108], "rot_given": 104, "diment": 104, "kk": 104, "ji": [104, 242], "rot_axis1": 104, "rot_axis2": 104, "rot_axis3": 104, "rot_ccw_axis1": 104, "rot_ccw_axis2": 104, "r620": 104, "givens_rot": 104, "list2numpi": 104, "dtype": [104, 109, 207, 209, 210, 211, 220, 259], "matrix2numpi": 104, "symarrai": 104, "ndarrai": [104, 206, 240, 246, 252], "prefix_i1_i2_": 104, "a_0_0": 104, "a_0_1": 104, "a_0_2": 104, "a_1_0": 104, "a_1_1": 104, "a_1_2": 104, "a_0_0_0": 104, "a_0_0_1": 104, "a_0_1_0": 104, "a_0_1_1": 104, "a_0_2_0": 104, "a_0_2_1": 104, "a_1_0_0": 104, "a_1_0_1": 104, "a_1_1_0": 104, "a_1_1_1": 104, "a_1_2_0": 104, "a_1_2_1": 104, "a2idx": 104, "normalform": [105, 209], "hermite_normal_form": [105, 209, 215], "check_rank": [105, 209], "hnf": [105, 209, 215], "explos": [105, 209], "believ": [105, 108, 209], "dmdomainerror": [105, 209], "dmshapeerror": [105, 209], "r621": 105, "mutablesparsematrix": 106, "_doktocsr": 107, "csr": 107, "ja": 107, "ia": 107, "_csrtodok": 107, "dok": [107, 209], "1x1": [107, 240], "vert": [107, 201, 204, 274], "saw": [107, 210, 297], "sieve_interv": 108, "dynam": [108, 116, 117, 119, 123, 125, 128, 129, 130, 131, 133, 134, 137, 145, 147, 148, 149, 150, 151, 152, 153, 194, 195, 197, 199, 203, 204, 255, 256, 265], "eratosthen": 108, "_reset": [108, 216], "_list": 108, "extend_to_no": 108, "mobiusrang": 108, "primerang": 108, "10th": 108, "totientrang": 108, "1e11": 108, "50000": 108, "primal": [108, 207], "1299709": 108, "r622": 108, "prime_number_theorem": 108, "table_of_": 108, "cf": [108, 213], "28x": 108, "2c_x_": 108, "2f_log_x": 108, "2c_and_li": 108, "r623": 108, "approximations_for_the_nth_prime_numb": 108, "r624": 108, "27_number": 108, "arr1": 108, "arr2": 108, "prevprim": 108, "9th": 108, "nextprim": 108, "occupi": [108, 185, 246], "conjectur": [108, 213], "twin": 108, "bertrand": 108, "brocard": 108, "primori": 108, "r625": 108, "r626": 108, "utm": 108, "postul": 108, "112": [108, 213, 217], "r627": 108, "s_postul": 108, "primefactor": 108, "argu": 108, "cycle_length": 108, "nmax": 108, "brent": [108, 255], "floyd": 108, "cycle_detect": 108, "17737": 108, "20000": 108, "compositepi": 108, "831": 108, "smoothness_p": 108, "sm": [108, 135, 152, 207], "psm": 108, "govern": 108, "10431": 108, "21477639576571": 108, "4410317": 108, "1787": 108, "4869863": 108, "2434931": 108, "multiplicity_in_factori": 108, "nfac": 108, "52818775009509558395695966887": 108, "is2pow": 108, "pollard_rho": 108, "max_step": 108, "pollard": [108, 236], "leader": 108, "16843009": 108, "32767": 108, "4i": 108, "3i": 108, "2489": 108, "1482": 108, "285": [108, 238], "leadup": 108, "r628": 108, "crandal": 108, "carl": [108, 255], "pomer": [108, 255], "229": 108, "231": [108, 195], "pollard_pm1": 108, "likelihood": 108, "1009": 108, "am": [108, 190, 220], "255": 108, "crack": 108, "617": 108, "1786": 108, "worst": [108, 216, 236], "scenario": [108, 240], "divisisor": 108, "realist": 108, "r629": 108, "236": 108, "r630": 108, "20150716201437": 108, "washington": 108, "2007": [108, 151, 255], "ent": 108, "node81": 108, "r631": 108, "toronto": 108, "yuvalf": 108, "use_ecm": 108, "65537": [108, 219], "1407633717262338957430697921446883": 108, "991": 108, "202916782076162456022877024859": 108, "4200": 108, "1764": 108, "toggl": [108, 206], "12345678910111213141516": 108, "2507191691": 108, "1231026625769": 108, "factorrat": 108, "rat": 108, "987": 108, "10000000001": 108, "99009901": 108, "divisor_count": 108, "tim": [108, 258], "1010381": 108, "proper_divisor": 108, "proper_divisor_count": 108, "udivisor": 108, "udivisor_count": 108, "r632": 108, "unitary_divisor": 108, "r633": 108, "unitarydivisor": 108, "r634": 108, "unitarydivisorfunct": 108, "antidivisor": 108, "r635": 108, "margin": [108, 119, 206, 240], "antidivisor_count": 108, "a066272": 108, "a066272a": 108, "r636": 108, "r637": 108, "27s_totient_funct": 108, "r638": 108, "totientfunct": 108, "r639": 108, "carmichael_funct": 108, "r640": 108, "carmichaelfunct": 108, "sigma_k": 108, "m_i": [108, 205, 213], "m_ik": 108, "r641": 108, "divisor_funct": 108, "udivisor_sigma": 108, "47450": 108, "152": 108, "r642": 108, "core_t": 108, "core_2": 108, "squarefre": [108, 215], "cubefre": 108, "9424": 108, "1178": 108, "379238": 108, "square_factor": [108, 233], "r643": 108, "free_integ": 108, "squarefree_cor": 108, "primenu": 108, "r644": 108, "primeomega": 108, "r645": 108, "mersenne_prime_expon": 108, "mersenn": 108, "4423": 108, "r646": 108, "perfectnumb": 108, "r647": 108, "perfect_numb": 108, "is_mersenne_prim": 108, "r648": 108, "mersenneprim": 108, "abund": 108, "is_abund": 108, "r649": 108, "abundantnumb": 108, "is_defici": 108, "r650": 108, "deficientnumb": 108, "is_amic": 108, "amic": 108, "220": [108, 216], "r651": 108, "amicable_numb": 108, "symmetric_residu": 108, "v_i": [108, 215, 238], "65": [108, 119, 213, 240], "639985": [108, 213], "912285": [108, 213], "954": 108, "gf_crt": [108, 213], "solve_congru": [108, 213], "programm": [108, 220], "galoistool": [108, 213], "crt1": [108, 213], "crt2": [108, 213], "397042": 108, "803206": 108, "gf_crt1": [108, 213], "4536": 108, "gf_crt2": [108, 213], "remainder_modulus_pair": 108, "mi": [108, 220], "k1": [108, 152, 183, 210, 211, 213], "k2": [108, 152, 210], "c_kn": 108, "binomial_coefficients_list": 108, "multinomial_coeffici": 108, "k_m": 108, "k_i": [108, 213, 230], "yann": 108, "laigl": 108, "chapui": 108, "permiss": [108, 205], "multinomial_coefficients_iter": 108, "_tupl": 108, "m53": 108, "partitions_": 108, "npartit": 108, "hardi": 108, "rademach": [108, 240], "r652": 108, "1958": [108, 205], "partitionfunctionp": 108, "is_euler_pseudoprim": 108, "pseudoprim": 108, "r653": 108, "euler_pseudoprim": 108, "prep": [108, 236, 237], "r654": 108, "mersenneforum": 108, "showpost": 108, "110896": 108, "mr": 108, "miller": 108, "rabin": 108, "wit": 108, "1373651": 108, "479001599": 108, "r655": 108, "135": 108, "138": 108, "93rabin_primality_test": 108, "deterministic_vari": 108, "is_lucas_prp": 108, "selfridg": 108, "377": 108, "1159": 108, "1829": 108, "3827": 108, "5459": 108, "5777": 108, "9071": 108, "9179": 108, "r656": 108, "bailli": 108, "samuel": 108, "wagstaff": 108, "1980": [108, 258], "1391": 108, "1417": 108, "2fs0025": 108, "0583518": 108, "mpq": [108, 209, 210], "lucaspseudoprim": 108, "r657": 108, "a217120": 108, "r658": 108, "lucas_pseudoprim": 108, "is_strong_lucas_prp": 108, "bpsw": 108, "10877": 108, "16109": 108, "18971": 108, "r659": 108, "r660": 108, "a217255": 108, "r661": 108, "r662": 108, "psw_primality_test": 108, "is_extra_strong_lucas_prp": 108, "r663": 108, "mo": [108, 152, 220], "jone": [108, 157], "preprint": 108, "a217719": 108, "perl": 108, "989": 108, "3239": 108, "jon": 108, "grantham": 108, "234": 108, "891": 108, "01197": 108, "r664": 108, "r665": 108, "counterexampl": [108, 297], "1e3": 108, "1e23": [108, 261], "near_int": 108, "strong_pseudoprim": 108, "is_gaussian_prim": 108, "r666": 108, "gaussian_prim": 108, "residue_ntheori": [108, 213], "n_order": 108, "2q": 108, "primitive_root": [108, 215], "r667": 108, "stein": [108, 236], "r668": 108, "hackman": 108, "sqrt_mod": 108, "sqrt_mod_it": 108, "quadratic_residu": 108, "nthroot_mod": 108, "109": [108, 214, 233], "r669": 108, "is_nthpow_residu": 108, "r670": 108, "is_quad_residu": 108, "legendre_symbol": 108, "genfrac": 108, "nonresidu": 108, "alpha_2": [108, 215], "alpha_k": 108, "kronecker_symbol": 108, "r671": 108, "discrete_log": 108, "prime_ord": 108, "giant": [108, 239], "pohlig": 108, "r672": 108, "discretelogarithm": 108, "r673": 108, "cryptographi": [108, 276, 283], "menez": 108, "vanston": 108, "quadratic_congru": 108, "polynomial_congru": [108, 213], "3257": 108, "gf_csolv": [108, 213], "binomial_mod": 108, "r674": 108, "24310": 108, "continued_fract": 108, "continued_fraction_period": 108, "continued_fraction_reduc": 108, "continued_fraction_converg": 108, "continued_fraction_iter": 108, "106": 108, "103993": 108, "33102": 108, "104348": 108, "33215": 108, "208341": 108, "66317": 108, "292": 108, "r675": 108, "discrimin": [108, 211, 213, 215, 216], "r676": 108, "periodic_continued_fract": 108, "r677": 108, "rosen": 108, "379": [108, 216], "381": 108, "januari": 108, "1992": [108, 214, 238, 258], "233": [108, 214, 236], "718281835": 108, "287": 108, "count_digit": 108, "1111339": 108, "0xfa": 108, "c77": 108, "is_palindrom": [108, 258], "palindrom": 108, "0o121": 108, "oct": 108, "0o171": 108, "fermion": [108, 185], "r678": 108, "b6bius_funct": 108, "r679": 108, "thoma": [108, 151], "koshi": 108, "egyptian_fract": 108, "greedi": [108, 213, 229, 232], "egyptian": 108, "r680": 108, "jewett": 108, "takenouchi": 108, "3192": 108, "1118": 108, "2580": 108, "sylvest": [108, 213], "r681": 108, "seldom": 108, "blow": 108, "doubli": 108, "exhibit": [108, 205, 215, 229], "singli": 108, "tendenc": 108, "r682": 108, "1921": 108, "golumb": 108, "1962": 108, "propos": 108, "bleicher": 108, "1972": 108, "r683": 108, "420": [108, 233], "140": 108, "574": 108, "2788": 108, "6460": 108, "11590": 108, "33062": 108, "113820": 108, "greedy_algorithm_for_egyptian_fract": 108, "uci": 108, "eppstein": 108, "numth": 108, "egypt": 108, "20180413004012": 108, "ami": 108, "ektf": 108, "hu": [108, 209], "finalpdf": 108, "ami_42_from129to134": 108, "bbp_pi": 108, "pi_hex_digit": 108, "hex": 108, "3243f6a8885a30": 108, "0x3243f6a8885a30": 108, "0x324": 108, "r684": 108, "numberworld": 108, "subexponenti": 108, "comfort": [108, 109], "15154262241479": 108, "15423094826093": 108, "799333555511111": 108, "809709509409109": 108, "888888877777777": 108, "914148152112161": 108, "factoris": [108, 209, 210, 211, 216, 236], "max_curv": 108, "lenstra": [108, 209], "_ecm_one_factor": 108, "pseudorandom": [108, 258], "25645121643901801": 108, "5394769": 108, "4753701529": 108, "9804659461513846513": 108, "4641991": 108, "2112166839943": 108, "7060005655815754299976961394452809": 108, "6988699669998001": 108, "1010203040506070809": 108, "122921448543883967430908091422761898618349713604256384403202282756086473494959648313841": 108, "2709077133180915240135586837960864768806330782747": 108, "248": 108, "prime_bound": 108, "error_term": 108, "siq": 108, "modn": 108, "r685": 108, "semanticscholar": 108, "5c52": 108, "8a975c1405bd35c65993abf5a4edb667c1db": 108, "r686": 108, "rieselprim": 108, "ziki": 108, "initializing_quadratic_siev": 108, "5915587277": 108, "3267000013": 108, "000507214304613640": 109, "microsecond": 109, "000507214304614": 109, "hundr": [109, 259, 291], "nanosecond": 109, "84147098": [109, 259, 286], "84119981": 109, "84092844": 109, "05426074": 109, "05433146": 109, "05440211": 109, "nano": 109, "manufactur": 109, "asnumpi": 109, "jnp": 109, "asarrai": 109, "84147096": 109, "8411998": 109, "05426079": 109, "05433151": 109, "autowrap": [109, 245, 253, 257, 284], "implemented_funct": [109, 252, 259], "qualiti": [109, 220], "50u": 109, "1u": 109, "10n": 109, "sympy_pars": 110, "local_dict": 110, "lambda_not": 110, "repeated_decim": 110, "auto_numb": 110, "factorial_not": 110, "global_dict": 110, "standard_transform": 110, "implicit_multiplication_appl": 110, "implicit_appl": 110, "implicit_multipl": 110, "convert_equals_sign": 110, "function_exponenti": 110, "stringify_expr": 110, "eval_expr": 110, "name_dict": 110, "fullform": 110, "setdelai": 110, "datatyp": [110, 211, 220, 253], "split_symbol": 110, "split_symbols_custom": 110, "_token_splitt": 110, "can_split": 110, "unsplitt": 110, "10sin": 110, "3xyz": 110, "2111": 110, "latex2sympi": 110, "typograph": 110, "stricter": 110, "liber": [110, 123, 291], "gracefulli": [110, 220, 244], "618": 110, "latexparsingerror": 110, "sym_expr": 110, "sympyexpress": 110, "source_cod": 110, "return_expr": 110, "src2": 110, "convert_to_expr": 110, "convert_to_c": 110, "src3": 110, "convert_to_python": 110, "src_code": 110, "filenam": [110, 220, 251, 252, 253, 261], "convert_to_fortran": 110, "continuum_mechan": [111, 112, 113, 115], "elastic_modulu": 111, "second_mo": 111, "base_char": 111, "withstand": [111, 112], "character": [111, 112, 201, 204, 227, 240, 246, 274], "profil": [111, 119], "shear": [111, 112], "meter": [111, 112, 113, 156, 159, 188, 189, 190, 191, 192], "downward": [111, 112, 113, 115, 215], "apply_load": [111, 112, 113, 115], "bc_deflect": [111, 112], "boundary_condit": 111, "solve_for_reaction_load": [111, 112], "shear_forc": [111, 112], "bending_mo": [111, 112], "reaction": [111, 112, 113, 115], "upward": [111, 209, 215], "reaction_load": [111, 112, 113, 115], "applied_load": 111, "nm": [111, 112, 183, 241], "pointload": [111, 112], "ramp": [111, 112], "parabol": 111, "apply_support": [111, 115], "loc": 111, "freedom": [111, 127, 128, 133, 136, 139, 145, 240, 282], "roller": [111, 112, 115], "r_10": 111, "r_30": 111, "4000": [111, 112], "bc_slope": [111, 112], "cross_sect": 111, "elast": [111, 112], "12000": 111, "draw": [111, 115, 165, 220, 240], "pictori": 111, "ild_moment": 111, "ild_react": 111, "ild_shear": 111, "axial": [111, 154], "hing": [111, 112, 146], "cantilev": [111, 112], "666666666666667": [111, 112], "max_bmoment": 111, "max_deflect": 111, "max_shear_forc": 111, "plot_bending_mo": [111, 112], "gpa": 111, "400": [111, 206, 216], "13750": 111, "31250": 111, "plot_deflect": [111, 112], "00138541666666667": 111, "86458333333333e": 111, "04166666666667e": 111, "20833333333333e": 111, "51041666666667e": 111, "plot_ild_mo": 111, "solve_for_ild_mo": 111, "1kn": 111, "r_0": 111, "r_8": 111, "solve_for_ild_react": 111, "plot_ild_react": 111, "5kn": 111, "r_7": 111, "plotgrid": 111, "plot_ild_shear": 111, "solve_for_ild_shear": 111, "plot_loading_result": [111, 112], "subplot": [111, 206], "plot_shear_forc": [111, 112], "plot_shear_stress": 111, "stress": 111, "6875": 111, "2500": 111, "15625": [111, 192], "plot_slop": [111, 112], "59375e": 111, "125e": 111, "08333333333333e": 111, "0001953125": 111, "point_cflexur": 111, "overhang": [111, 112], "10kn": 111, "20kn": [111, 112], "3kn": 111, "remove_load": [111, 113, 115, 124], "shear_stress": 111, "beam3d": 111, "shear_modulu": 111, "apply_moment_load": 111, "solve_slope_deflect": 111, "r687": 111, "aau": 111, "jc": 111, "femtesemest": 111, "beams3d": 111, "angular_deflect": 111, "depict": [111, 201, 239, 274], "axial_forc": 111, "axial_stress": 111, "load_vector": 111, "max_bending_mo": 111, "16000": 111, "495": [111, 209], "10793": 111, "6400": 111, "301": [111, 230, 233], "560": 111, "2400": 111, "moment_load_vector": 111, "40000": 111, "4013": 111, "90300": 111, "1520": 111, "903": 111, "1600": [111, 112], "172": 111, "polar_mo": 111, "i1": [111, 120, 135, 152, 246], "1350": 111, "solve_for_tors": 111, "torsion": 111, "torqu": [111, 124, 128, 130, 133, 140, 147, 148, 150, 152], "torsional_mo": 111, "________________": [112, 236], "_______________v": 112, "_______________": 112, "equilibrium": [112, 115, 137, 149], "20e9": 112, "25e": 112, "______________________________________________": 112, "_______________________________________________": 112, "r\u2081": 112, "r\u2082": 112, "______________________": 112, "________________________": 112, "8kn": 112, "_____________": 112, "1m": 112, "3m": 112, "2m": 112, "5m": [112, 255], "679": 112, "12kn": 112, "________________________________": 112, "____________________________________________________": 112, "o____________________________________________________": 112, "4m": 112, "_____________________________________": 112, "m\u2081": 112, "m\u2082": 112, "connector": 112, "_____________________": 112, "_______________________": 112, "_____________________o_______________________": 112, "oooo": [112, 258], "r\u2083": 112, "_______i_______": 112, "flexur": 112, "rigid": [112, 115, 124, 128, 130, 135, 137, 140, 145, 152, 195, 203, 282], "____________": 112, "____________o________________________": 112, "a\u2082": [112, 297], "support_1": 113, "support_2": 113, "tensil": [113, 115], "suspens": 113, "offshor": 113, "transmiss": [113, 157, 158], "270": [113, 115], "point_load": 113, "loads_posit": 113, "apply_length": 113, "360": [113, 115], "inclin": [113, 207], "change_support": 113, "new_support": 113, "new_label": [113, 115], "left_support": 113, "right_support": 113, "assembli": [115, 137], "joint": [115, 126, 133, 138, 140, 145, 282], "add_nod": 115, "node_1": 115, "node_2": 115, "node_3": 115, "node_4": 115, "add_memb": 115, "member_1": 115, "member_2": 115, "member_3": 115, "member_4": 115, "member_5": 115, "change_member_label": 115, "change_node_label": 115, "bc_new": 115, "bd_new": 115, "subs_dict": 115, "ag": [115, 236], "bf": [115, 152], "fc": 115, "fe": 115, "internal_forc": 115, "member_length": 115, "node_label": 115, "node_posit": 115, "remove_memb": 115, "remove_nod": 115, "remove_support": 115, "revolv": 115, "r_node_1_x": 115, "r_node_1_i": 115, "r_node_2_i": 115, "interconnect": [116, 119, 127], "mimoseri": [116, 119], "mimoparallel": [116, 119], "control_plot": 117, "pole_color": 117, "blue": [117, 146, 206, 220], "pole_markers": 117, "zero_color": 117, "orang": 117, "zero_markers": 117, "show_ax": 117, "marker": [117, 206], "sisolineartimeinvari": [117, 119], "markers": 117, "pole_zero_numerical_data": 117, "r688": 117, "93zero_plot": 117, "siso": [117, 119], "8660254j": 117, "bode_plot": 117, "initial_exp": 117, "final_exp": 117, "freq_unit": 117, "phase_unit": 117, "phase_unwrap": 117, "semilog": 117, "hz": 117, "hertz": 117, "bode_magnitude_numerical_data": 117, "5148378120533502e": 117, "68437": 117, "36188804005": 117, "020599914256786": 117, "0205999155219505": 117, "4117304087953": 117, "00000000260573": 117, "bode_phase_numerical_data": 117, "4472354033813751e": 117, "035581932165858e": 117, "47577": 117, "3248186011": 117, "67884": 117, "09326036123": 117, "5000000000291665e": 117, "6180885085e": 117, "08895483066e": 117, "1415085799262523": 117, "14155265358979": 117, "impulse_response_plot": 117, "lower_limit": [117, 287], "upper_limit": [117, 287], "ramp_response_plot": 117, "r689": 117, "impulse_response_numerical_data": 117, "lineover1drangeseri": [117, 206], "amplitud": [117, 159], "06616480200395854": 117, "854500743565858": 117, "9999999799999999": 117, "7042848373025861": 117, "170748906965121e": 117, "1901263495547205e": 117, "r690": 117, "step_response_numerical_data": 117, "025413462339411542": 117, "0484508722725343": 117, "670250533855183": 117, "844291913708725": 117, "023844582399907256": 117, "042894276802320226": 117, "828770759094287e": 117, "456457160755703e": 117, "mx": [117, 165, 227], "r691": 117, "ramp_funct": 117, "ramp_response_numerical_data": 117, "12166980856813935": 117, "861246379582118": 117, "4504508011325967e": 117, "006046440489058766": 117, "12499999999568202": 117, "12499999999661349": 117, "den": [119, 209, 211, 232, 236], "superscript": [119, 220], "tf3": 119, "tf4": 119, "tf5": 119, "tf6": 119, "500000000000000": 119, "tf7": 119, "tf8": 119, "tf9": 119, "tf10": 119, "tf11": 119, "tf12": 119, "r692": 119, "transfer_funct": 119, "r693": 119, "from_coeff_list": 119, "num_list": 119, "den_list": 119, "zerodivisionerror": [119, 211, 249, 259], "1j": [119, 210], "is_biprop": 119, "is_prop": 119, "is_strictly_prop": 119, "feedforward": 119, "fed": 119, "sit": [119, 204], "compulsori": 119, "tf_1": 119, "tf_2": 119, "tf_3": 119, "tf_4": 119, "tfm_1": 119, "tfm_2": 119, "tf_5": 119, "tf_6": 119, "tf_7": 119, "tf_8": 119, "tfm_3": 119, "tfm_4": 119, "tfm_5": 119, "tfm_6": 119, "tf_9": 119, "tf_10": 119, "tfm_7": 119, "tfm_8": 119, "tfm_9": 119, "tfm_10": 119, "tfm_11": 119, "tfm_12": 119, "m_tf": 119, "tfm": 119, "tfm1": 119, "tfm2": 119, "tfm3": 119, "mimolineartimeinvari": 119, "mat_a": 119, "mat_b": 119, "mat_c": 119, "tfm_a": 119, "tfm_b": 119, "tfm_c": 119, "expr_1": 119, "expr_2": 119, "expr_3": 119, "expr_4": 119, "plant_mat": 119, "controller_mat": 119, "neg_feedback": 119, "gbt": 119, "sample_p": 119, "bilinear": 119, "numz": 119, "denz": 119, "r694": 119, "polyu": 119, "hk": [119, 233], "ama": 119, "gfzhang": 119, "zcc09_ijc": 119, "forward_diff": 119, "backward_diff": 119, "tz": 119, "hep": 120, "gamma_matric": [120, 122], "gammamatrix": 120, "lorentzindex": 120, "gammamatrixhead": 120, "extract_type_ten": 120, "gamma_trac": 120, "i0": [120, 157, 246], "i2": [120, 135, 152, 246], "i4": [120, 246], "i5": 120, "kahane_simplifi": 120, "spinor": 120, "ta": [120, 229], "tb": [120, 229, 251], "tc": [120, 211, 216, 229], "joseph": [120, 214], "kahan": 120, "octob": 120, "1968": 120, "simplify_gpgp": 120, "e_nl": [121, 186], "hartre": 121, "helium": 121, "2209": 121, "e_nl_dirac": 121, "spin_up": 121, "035999037000": 121, "relativist": 121, "momentum": [121, 130, 135, 152, 163, 164, 182, 186, 205, 246], "light": [121, 157, 189, 190, 200, 207], "035999037": 121, "1012": 121, "3627": 121, "500006656595360": 121, "125002080189006": 121, "125000416028342": 121, "0555562951740285": 121, "0555558020932949": 121, "0555556377366884": 121, "psi_nlm": 121, "wave": [121, 155, 156, 157, 223, 282], "psi_": [121, 161], "nlm": 121, "radial": [121, 139, 186], "nl": [121, 186], "magnet": [121, 156, 201, 274], "azimuth": 121, "wf": [121, 137], "abs_sqrd": 121, "silver": 121, "94": [121, 214], "141": 121, "4418": 121, "mdft": 122, "mgamma": 122, "gamma_5": 122, "gamma_0": 122, "gamma_3": 122, "r695": 122, "msigma": 122, "pauli": [122, 282], "sigma_i": [122, 240], "r696": 122, "pauli_matric": [122, 160], "pat_matrix": 122, "unansw": [123, 194], "kane": [123, 126, 127, 133, 135, 141, 145, 146, 151, 152, 194, 195, 265, 282], "q1d": [123, 135, 137, 139, 142, 143, 144, 147, 148, 149, 150, 194, 200, 204], "q2d": [123, 135, 137, 139, 142, 143, 144, 147, 148, 199, 200], "q3d": [123, 142, 143, 144, 147], "kinemat": [123, 127, 128, 133, 135, 137, 138, 139, 140, 142, 144, 146, 147, 149, 150, 152, 153, 195, 198, 202, 204, 282], "dyad": [123, 152, 195, 269], "mprint": [123, 142, 143, 144, 147], "mpprint": [123, 147], "mlatex": 123, "sub_dict": [123, 125, 137], "msub": [123, 125, 149], "gsl": [123, 253], "lsoda": 123, "penalti": 123, "central_inertia": [124, 130, 138, 140], "possess": [124, 150, 246], "name_of_bodi": 124, "ixx": [124, 130, 195], "body_inertia": 124, "ang_vel_in": [124, 127, 135, 142, 143, 152, 195, 203], "set_ang_vel": [124, 130, 135, 137, 142, 143, 149, 150, 152, 153, 195, 197, 199, 203], "apply_forc": [124, 127, 140], "reaction_bodi": [124, 127, 140], "reaction_point": 124, "oppposit": 124, "desri": 124, "force1": 124, "b_masscent": 124, "b_frame": [124, 127], "newtonion": [124, 127], "spring_forc": 124, "n_frame": 124, "apply_torqu": [124, 140], "torquess": 124, "torque1": 124, "b1_frame": 124, "b2_frame": 124, "clear_load": 124, "kinetic_energi": [124, 130, 150, 152], "inerti": [124, 127, 128, 130, 133, 137, 139, 142, 147, 148, 150, 152], "set_vel": [124, 128, 130, 134, 135, 137, 139, 142, 143, 144, 147, 148, 149, 150, 152, 153, 199, 203], "b_ixx": 124, "b_mass": [124, 127], "masscenter_vel": 124, "parallel_axi": [124, 130], "a_ixx": 124, "a_mass": 124, "a_ixi": 124, "a_izx": 124, "a_iyi": 124, "a_iyz": 124, "a_izz": 124, "smart": [125, 149, 227, 233, 236], "sub1": [125, 220], "sub2": [125, 220], "find_dynamicsymbol": [125, 130], "reference_fram": [125, 130, 195], "symbolicsystem": [126, 145, 282], "pathwai": [126, 134, 145, 282], "interfram": [127, 199], "_generate_coordin": 127, "_generate_spe": 127, "_orient_fram": 127, "_set_angular_veloc": 127, "_set_linear_veloc": 127, "kde": [127, 133, 138, 139, 146, 149], "revolut": 127, "\u03c9": 127, "pc": [127, 217], "p_masscent": 127, "c_masscent": 127, "p_frame": 127, "c_frame": 127, "q_pc": 127, "u_pc": 127, "upper_bob": 127, "lower_bob": 127, "ceiling_joint": 127, "pendulum_joint": 127, "q_p1": 127, "q_p2": 127, "u_fram": 127, "l_frame": 127, "u_p1": 127, "u_p2": 127, "vel": [127, 135, 137, 139, 143, 146, 152, 199, 203, 272], "prismat": 127, "slide": 127, "part1": 127, "part2": 127, "j1": [127, 138, 140, 164, 182], "j2": [127, 138, 140, 164, 182], "q_j1": 127, "w_frame": 127, "q_j2": 127, "p1_frame": 127, "u_j1": 127, "cylindricaljoint": 127, "rotation_coordin": 127, "translation_coordin": 127, "rotation_spe": 127, "translation_spe": 127, "cylindr": [127, 134, 206, 272], "q0_": 127, "q1_": 127, "u0_": 127, "u1_": 127, "q0_pc": 127, "q1_pc": 127, "u0_pc": 127, "u1_pc": 127, "tube": 127, "floor_joint": 127, "flag_joint": 127, "q0_c1": 127, "q0_c2": 127, "q1_c1": 127, "floor_fram": 127, "q1_c2": 127, "tube_fram": 127, "flag_fram": 127, "u0_c1": 127, "u0_c2": 127, "u1_c1": 127, "planarjoint": 127, "planar_coordin": 127, "planar_spe": 127, "q2_": 127, "u2_": 127, "nonparallel": 127, "q_1": [127, 138, 139, 140, 149, 165, 203, 216, 233], "q_2": [127, 138, 139, 140, 149, 203], "q_0": [127, 165, 233], "rotation_axi": 127, "planar_vector": 127, "q2_pc": 127, "u2_pc": 127, "parent_vector": 127, "plane_vector": 127, "g_frame": 127, "sphericaljoint": 127, "rot_typ": [127, 195, 199, 201], "rot_ord": [127, 195, 199, 267], "ball": 127, "socket": 127, "tait": [127, 195, 265, 267], "bryan": [127, 195, 265, 267], "joint_point": 127, "zxz": [127, 195, 204, 265, 267], "weldjoint": 127, "weld": 127, "quarter": [127, 134, 157], "rotated_fram": 127, "jointsmethod": [127, 138, 140], "form_eom": [127, 133, 140, 146], "mass_matrix_ful": [127, 128, 133, 135, 140, 147, 148], "forcing_ful": [127, 128, 133, 135, 140, 147, 148], "mass_matrix": [127, 128, 133, 137, 142, 143, 147, 148, 153], "lagrangesmethod": [127, 128, 131, 133, 139, 144, 148, 149], "qd": [127, 128, 133, 137, 147, 199], "inv_method": [127, 128, 133], "q_ind": [128, 129, 133, 135, 137, 138, 139, 142, 143, 147, 149, 152], "u_ind": [128, 129, 133, 135, 137, 138, 139, 142, 143, 147, 149, 152], "kd_eq": [128, 135, 137, 138, 139, 142, 143, 149, 152], "q_depend": [128, 137, 138, 139, 147, 152], "configuration_constraint": [128, 137, 138, 139, 147], "u_depend": [128, 137, 138, 139, 147, 152], "velocity_constraint": [128, 137, 138, 139, 147, 152], "acceleration_constraint": 128, "u_auxiliari": [128, 143, 147, 152], "forcelist": [128, 135, 138, 139, 142, 143, 148, 149, 152], "explicit_kinemat": 128, "kd_eqs_solv": 128, "constraint_solv": 128, "nonholonom": [128, 133, 137], "levinson": [128, 151, 195, 265], "udot": [128, 137], "linsolv": [128, 152, 218, 238, 239, 298], "ud": [128, 147], "kd": [128, 137, 142, 143, 147], "fl": [128, 137, 147, 148, 152, 214], "bl": [128, 137, 147, 152], "frstar": [128, 135, 137, 139, 142, 143, 147, 149, 152], "kanes_equ": [128, 131, 135, 137, 139, 142, 143, 147, 149, 152], "a_and_b": [128, 129, 139], "auxiliary_eq": [128, 143], "k_d": [128, 147], "k_dnh": 128, "f_d": [128, 133, 147, 148, 213], "f_dnh": 128, "mass_matrix_kin": 128, "k_kqdot": 128, "forcing_kin": 128, "k_ku": 128, "constrain": [128, 129, 139, 148, 152], "kindiffdict": [128, 137, 142, 143, 147, 152], "new_method": [128, 139], "linear_solv": [128, 129], "intens": [128, 129, 154, 157], "perm_mat": [128, 129, 149], "op_point": [128, 129, 139, 149], "beforehand": [128, 133, 253], "to_linear": [128, 149], "recalcul": [128, 216], "hol_coneq": [128, 139, 148], "nonhol_coneq": [128, 139, 148], "nonconserv": 128, "form_lagranges_equ": [128, 139, 144, 148, 149], "qdot": [128, 137, 138, 199], "qdoubledot": 128, "lam": [128, 129, 153], "lagranges_equ": 128, "qd_ind": [128, 149], "q_dep": [128, 133, 147, 149], "qd_dep": [128, 149], "solve_multipli": [128, 139], "sol_typ": 128, "array_lik": [128, 129], "f_3": [129, 133, 153, 236], "f_c": [129, 139], "f_v": [129, 139], "f_a": 129, "q_d": 129, "u_i": [129, 149, 203, 213], "u_d": [129, 152], "r697": 129, "peterson": 129, "gede": 129, "hubbard": 129, "multibodi": [129, 130, 135, 145, 151, 152, 153, 203], "syst": 129, "dyn": 129, "feb": 129, "s11044": 129, "014": 129, "9436": 129, "q_op": [129, 139], "u_op": [129, 139], "qd_op": 129, "ud_op": [129, 139], "spatial": [130, 159, 195, 220], "angular_momentum": [130, 150, 152], "init_vprint": [130, 132, 150, 153, 195, 197, 199, 200, 203, 204], "linear_momentum": [130, 150, 152], "inertia_tupl": 130, "from_tensor": 130, "from_inertia_scalar": 130, "iyi": [130, 195], "izz": [130, 195], "ixi": [130, 195], "iyz": [130, 195], "izx": 130, "yy": [130, 195, 204, 236], "yz": [130, 195, 204, 206], "zx": [130, 195, 204], "pos_vec": 130, "px": [130, 175, 180, 246], "center_of_mass": [130, 152], "p1_pt": 130, "p2_pt": 130, "p3_pt": 130, "p4_pt": 130, "b_f": [130, 135], "b_cm": [130, 135], "mb": [130, 140, 152], "set_po": [130, 131, 134, 135, 199, 203], "point_o": [130, 135], "body1": 130, "body2": 130, "body3": 130, "actuat": [131, 133], "linearpathwai": 131, "pb": [131, 157], "linear_pathwai": 131, "extension_veloc": 131, "compute_load": 131, "expansil": 131, "structr": 131, "pathwaybas": 131, "wrappingpathwai": 131, "attachment_1": 131, "attachment_2": 131, "wrappinggeometrybas": [131, 134], "smoothli": 131, "geodes": [131, 134], "cylind": [131, 134, 275], "wrappingcylind": [131, 134], "wrapping_pathwai": 131, "__class__": [131, 259], "vprint": [132, 194, 199, 200, 204], "vpprint": [132, 194, 200, 204], "vlatex": [132, 194, 195, 200, 204], "_system": 133, "parti": [133, 256], "cart": 133, "mechanics_print": [133, 137, 138, 142, 143, 144, 146, 147, 148], "bob_fram": 133, "newtonian": [133, 135, 152], "from_newtonian": 133, "add_joint": 133, "slider": [133, 140], "q_slider": 133, "u_slid": 133, "u_pin": 133, "apply_grav": 133, "add_load": 133, "rail_masscent": 133, "rail_mass": 133, "rail_fram": 133, "cart_masscent": 133, "cart_mass": 133, "bob_masscent": 133, "bob_mass": 133, "validate_system": 133, "eom_method": 133, "add_holonomic_constraint": 133, "get_joint": 133, "u_dep": [133, 147], "bodybas": 133, "loadbas": 133, "actuatorbas": 133, "holonomic_constraint": 133, "nonholonomic_constraint": 133, "add_actu": 133, "add_bodi": 133, "add_coordin": 133, "add_kd": 133, "add_nonholonomic_constraint": 133, "add_spe": 133, "get_bodi": 133, "m_d": [133, 148], "m_m": 133, "f_m": 133, "check_dupl": 133, "coord_stat": 133, "right_hand_sid": 133, "coordinate_deriv": [133, 153], "alg_con": [133, 153], "output_eqn": 133, "coord_idx": [133, 153], "speed_idx": [133, 153], "m_3": [133, 153, 164, 205], "exogen": [133, 153], "ref_fram": 133, "theta_dot": 133, "kin_explicit_rh": [133, 153], "dyn_implicit_mat": [133, 153], "dyn_implicit_rh": [133, 153], "symsystem": 133, "dae": [133, 153], "comb_implicit_mat": [133, 153], "comb_implicit_rh": [133, 153], "kinema": 133, "comb_explicit_rh": [133, 153], "compute_explicit_form": 133, "awhil": 133, "constant_symbol": 133, "dynamic_symbol": 133, "wrapping_geometri": 134, "geodet": [134, 214], "unwrap": 134, "longest": [134, 258], "wrappingspher": 134, "geodesic_end_vector": 134, "point_1": 134, "point_2": 134, "geodesic_length": 134, "pythagora": 134, "point_on_surfac": 134, "ascertain": 134, "motiongenesi": [135, 152], "double_pendulum": 135, "motionvari": [135, 152], "simprot": [135, 152], "n_a": 135, "n_b": 135, "w_a_n": 135, "w_b_n": [135, 152], "p_o_p": 135, "p_p_r": 135, "v_o_n": [135, 152], "v2pt": [135, 152], "v_p_n": 135, "v_r_n": 135, "force_p": 135, "force_r": 135, "tfinal": 135, "integstp": 135, "some_filenam": 135, "parse_autolev": 135, "sympy_cod": 135, "include_numer": 135, "include_pydi": 135, "pydi": [135, 152, 195], "u1d": [135, 137, 139, 142, 143, 147], "u2d": [135, 137, 139, 142, 143, 147], "frame_n": 135, "frame_a": 135, "frame_b": 135, "particle_p": 135, "p_pt": 135, "particle_r": 135, "r_pt": 135, "v2pt_theori": [135, 137, 142, 143, 144, 149, 150, 152, 153, 199, 203], "initial_condit": [135, 152], "overwritten": 135, "e2row": 135, "eigvec": [135, 152], "eigenvec": 135, "deg2rad": 135, "0174533": 135, "wo": 135, "coef": [135, 152], "u3": [135, 137, 138, 140, 142, 143, 147, 152, 195, 199, 203], "strai": 135, "reassign": 135, "inher": [135, 259, 289], "rhs_x": 135, "i_b_bo": 135, "body_b": 135, "body_b_f": 135, "scene": [135, 232, 289], "i_c_d": 135, "i_p_q": 135, "i_b_o": 135, "e3": [135, 227, 236], "i_p_o": 135, "e4": [135, 227], "p_so_o": 135, "nicheck": 135, "plug": [135, 190], "hurdl": 135, "gitlab": 135, "ch4": 135, "ch5": 135, "ch6": 135, "cst": 135, "grammar": [135, 232], "roll": [136, 137, 145, 203, 240, 282], "disc": [136, 145, 203, 282], "bicycl": [136, 145, 151, 282], "nonminim": [136, 145, 149, 282], "linkag": [136, 145, 282], "meijaard2007": [137, 151], "steer": [137, 151], "purposefulli": 137, "yaw": 137, "ang": 137, "rear": 137, "pitch": 137, "q4": [137, 147, 197], "q5": [137, 197], "q4d": [137, 147], "q5d": 137, "u4": [137, 143, 147, 152], "u5": [137, 143], "u6": [137, 143], "u3d": [137, 142, 143], "u4d": 137, "u5d": 137, "u6d": 137, "explanatori": 137, "wfrad": 137, "wrrad": 137, "htangl": 137, "forkoffset": 137, "forklength": 137, "framelength": 137, "forkcg1": 137, "forkcg3": 137, "framecg1": 137, "framecg3": 137, "iwr11": 137, "iwr22": 137, "iwf11": 137, "iwf22": 137, "iframe11": 137, "iframe22": 137, "iframe33": 137, "iframe31": 137, "ifork11": 137, "ifork22": 137, "ifork33": 137, "ifork31": 137, "mframe": 137, "mfork": 137, "mwf": 137, "mwr": 137, "wr": 137, "tempfram": 137, "tempfork": 137, "orientnew": [137, 139, 142, 143, 144, 149, 153, 195, 197, 199, 201, 203, 204], "wr_cont": 137, "wr_mc": 137, "frame_mc": 137, "fork_mc": 137, "wf_mc": 137, "wf_cont": 137, "flip": [137, 170, 179, 240], "frame_i": 137, "fork_i": 137, "wr_i": 137, "wf_i": 137, "bodyfram": 137, "bodyfork": 137, "bodywr": 137, "bodywf": 137, "replic": 137, "conlist_spe": 137, "conlist_coord": 137, "gravit": [137, 142, 188, 201, 274], "aforement": [137, 201, 233, 272], "paperradrear": 137, "paperradfront": 137, "hta": 137, "trailpap": 137, "rake": 137, "paperwb": 137, "02": 137, "paperframecgx": 137, "paperframecgz": 137, "paperforkcgx": 137, "paperforkcgz": 137, "framecgnorm": 137, "framecgpar": 137, "tempa": 137, "tempb": 137, "tempc": 137, "paperforkl": 137, "forkcgnorm": 137, "forkcgpar": 137, "upright": 137, "val_dict": 137, "0603": 137, "1405": 137, "05892": 137, "00708": 137, "00756": 137, "kdd": [137, 142, 143], "centripet": 137, "corioli": 137, "forcing_lin": 137, "mm_full": 137, "_k_kqdot": 137, "xdot": 137, "lean": [137, 142, 144], "amat": 137, "q_3": [138, 140, 203], "u_1": [138, 139, 140, 203, 215, 236], "u_2": [138, 139, 140, 203, 215, 236], "u_3": [138, 140, 203], "densiti": [138, 240, 251, 275], "link1": 138, "link2": 138, "link3": 138, "link4": 138, "joint1": 138, "joint2": 138, "joint3": 138, "j3": [138, 140, 164, 182], "fh": 138, "fhd": 138, "_method": 138, "_form_eom": 138, "eom": [139, 140, 149], "dq_dict": 139, "presimplifi": 139, "inp_vec": [139, 149], "lag": [139, 144, 149], "lm": [139, 148, 149, 213, 216], "lag_eq": [139, 149], "lam_op": 139, "ibzz": 140, "compound_pend": 140, "simple_pend": 140, "rev1": 140, "rev2": 140, "w_r_n_qd": [142, 143], "dmc": [142, 143, 144], "uv": [142, 143, 185], "bodyd": [142, 143, 144], "bodylist": [142, 143], "kane1985": [143, 147, 151, 194], "thorough": [143, 149, 233], "simplifc": 143, "f3": [143, 206, 220], "necessit": 143, "simplify_auxiliary_eq": 143, "lrh": 144, "planet": 145, "robot": 145, "fascin": 145, "trajectori": 145, "challeng": 145, "came": [145, 292], "tackl": [145, 253], "amen": 145, "arduou": 145, "child_izz": 146, "child_mass": 146, "f_h": 147, "nh": 147, "ku": [147, 220], "dnh": 147, "f_r": [147, 149, 213], "speed_con": 147, "coord_con": 147, "lam1": 148, "0_": 149, "blajer1994": [149, 151], "brought": [149, 240], "vel_p": 149, "a_op": 149, "b_op": 149, "m_op": 149, "a_lin": 149, "hasn": 149, "juxtaposit": [150, 194, 269], "rb_masscent": 150, "rb_frame": 150, "l_p": 150, "likins1973": [150, 202], "l_b": 150, "requisit": 150, "t_p": 150, "t_b": 150, "t_t": 150, "virtu": [150, 152], "blajer": 151, "wojciech": 151, "werner": 151, "schiehlen": 151, "walter": 151, "schirm": 151, "kane1983": [151, 204], "likin": [151, 202], "david": [151, 216], "spacecraft": 151, "1983": [151, 255], "meijaard": 151, "jim": 151, "papadopoulo": 151, "ruina": 151, "schwab": 151, "royal": 151, "societi": [151, 233], "2084": 151, "1955": 151, "982": 151, "lectur": [152, 214, 240], "rigibodi": 152, "proprietari": 152, "k3": [152, 210], "k4": 152, "b11": 152, "b12": 152, "b21": 152, "b22": 152, "xd": 152, "xd2": 152, "y1d": 152, "y2d": 152, "tina": 152, "overwrit": [152, 194], "dt2": 152, "dy2": 152, "ty": 152, "nonlinsolv": [152, 238, 239, 298], "rowmatrix": 152, "colmatrix": 152, "diagmat": 152, "eigval": 152, "row_matrix": 152, "col_matrix": 152, "ao": 152, "i12": 152, "i23": 152, "i31": 152, "p_o_q": 152, "mag": 152, "unitvec": 152, "qo": 152, "p_p_q": 152, "partial_veloc": [152, 195, 199], "a_o_n": 152, "set_acc": [152, 199, 203], "qb": [152, 208], "qbd": 152, "alf_b_n": 152, "set_ang_acc": [152, 195], "ang_acc_in": [152, 195], "force_o": 152, "torque_a": 152, "qa": 152, "qad": 152, "a_b": 152, "v1pt": 152, "v1pt_theori": [152, 199, 203], "a1pt": 152, "a1pt_theori": [152, 199], "a2pt": 152, "a2pt_theori": [152, 199, 203], "angvel": 152, "force_vector": 152, "kindiff": 152, "ke": 152, "configura": 152, "tion_constraint": 152, "pendent": 152, "velocity_con": 152, "traint": 152, "acceleration_": 152, "u_auxilia": 152, "ry": 152, "matlplotlib": 152, "stiff": 152, "damp": 152, "introspect": 152, "rich": [152, 232], "media": [152, 158], "esqu": 152, "pertin": [153, 207, 215], "alg_con_ful": 153, "symsystem1": 153, "symsystem2": 153, "symsystem3": 153, "raytransfermatrix": 154, "geometricrai": 154, "beamparamet": 154, "geometric_conj": 154, "gauss_conj": 154, "conjugate_gauss_beam": 154, "lens": 154, "gaussopt": 154, "wavelen": 154, "z_r": 154, "wavelength": [154, 159], "waist": 154, "rayleigh": [154, 240], "refract": [154, 156, 158, 159], "530e": 154, "88679245283019": 154, "92753330865999": 154, "w_0": [154, 233], "00100000000000000": 154, "freespac": 154, "00101413072159615": 154, "00210803120913829": 154, "r698": 154, "complex_beam_paramet": 154, "r699": 154, "gaussian_beam": 154, "spread": [154, 209, 220, 240, 255], "00053": 154, "goui": 154, "55998576005696": 154, "2809": 154, "peak": 154, "waist_approximation_limit": 154, "paraxi": [154, 158], "06e": 154, "curvedmirror": 154, "curvedrefract": 154, "flatmirror": 154, "flatrefract": 154, "2x1": 154, "thinlen": 154, "r700": 154, "ray_transfer_matrix_analysi": 154, "waist_in": 154, "waist_out": 154, "s_in": 154, "s_out": 154, "w_o": 154, "gaussian_conj": 154, "z_r_in": 154, "incid": [154, 158], "z_r_out": 154, "emerg": [154, 208], "geometric_conj_ab": 154, "geometric_conj_af": 154, "geometric_conj_bf": 154, "rayleigh2waist": 154, "waist2rayleigh": 154, "permitt": 156, "permeabl": 156, "fermat": 156, "electr": [156, 158, 201, 272, 274], "electromagnet": [156, 189, 201, 246, 274], "intrinsic_imped": 156, "149896229": [156, 159, 189], "kilogram": [156, 188, 190, 192], "1250000": 156, "amper": [156, 189], "refractive_index": 156, "299792458": [156, 159, 189, 192], "r701": 156, "optical_medium": 156, "travel": [156, 159, 201, 272, 274], "stoke": 157, "mueller": 157, "jones_vector": 157, "stokes_vector": 157, "half_wave_retard": 157, "polarizing_beam_splitt": 157, "jones_2_stok": 157, "\u2148": [157, 205, 219, 220, 239, 298], "\u03c7": 157, "\u03c8": 157, "i\u2080": 157, "plate": 157, "hwp": 157, "splitter": 157, "transmit": [157, 158], "transmitted_port": 157, "reflected_port": 157, "transmitted_pow": 157, "reflected_pow": 157, "r702": 157, "jones_calculu": 157, "r703": 157, "mueller_calculu": 157, "r704": 157, "stokes_paramet": 157, "retard": 157, "poincar\u00e9": 157, "tilt": 157, "mayor": 157, "linear_polar": 157, "mueller_matrix": 157, "quarter_wave_retard": 157, "phase_retard": 157, "\u03b4": 157, "phia": 157, "phib": 157, "4x1": [157, 240], "phi_a": 157, "phi_b": 157, "qwp": 157, "reflective_filt": 157, "unpolar": 157, "transmissive_filt": 157, "attenu": 157, "transmitt": 157, "ndf": 157, "refraction_angl": 158, "fresnel_coeffici": 158, "brewster_angl": 158, "critical_angl": 158, "lens_makers_formula": 158, "mirror_formula": 158, "lens_formula": 158, "hyperfocal_dist": 158, "transverse_magnif": 158, "medium1": 158, "medium2": 158, "brewster": 158, "926093295503462": 158, "onset": 158, "850908514477849": 158, "02005": 158, "angle_of_incid": 158, "fresnel": [158, 220, 230], "polaris": 158, "te": 158, "317843553417859": 158, "348645229818821": 158, "658921776708929": 158, "651354770181179": 158, "235625382192159": 158, "971843958291041": 158, "816477005968898": 158, "577377951366403": 158, "r705": 158, "fresnel_equ": 158, "coc": 158, "0033": 158, "focal_length": 158, "n_len": 158, "n_surr": 158, "thick": 158, "1515151515151": 158, "0000000000000": 158, "3418463277618": 158, "41152": 158, "magnif": 158, "twave": 159, "time_period": 159, "wavenumb": 159, "phi1": 159, "phi2": 159, "w1": [159, 232], "w3": [159, 220], "superposit": [159, 170, 181, 207], "angular_veloc": 159, "tempor": 159, "r706": 160, "paulialgebra": 160, "evaluate_pauli_product": 160, "paulimatric": 160, "sigma3": 160, "nodal": [161, 186, 207], "hw": [161, 186], "coherent_st": 161, "coher": [161, 187, 193], "1d": [161, 163, 176, 195, 245], "wavefunct": [161, 174, 183, 186, 282], "r707": 162, "__cmp__": [162, 166, 185], "dagger": [162, 166, 172, 174, 177, 179, 184, 185, 282], "operatorset": [163, 175], "positionbra3d": 163, "eigenbra": [163, 176, 182], "positionket3d": 163, "eigenket": [163, 176, 182], "positionstate3d": 163, "eigenst": [163, 175, 180, 182, 183], "position_x": 163, "position_i": 163, "position_z": 163, "pxbra": [163, 175], "pxket": [163, 175, 180], "pxop": [163, 175, 180], "xbra": [163, 175, 180], "xket": [163, 175, 180], "xop": [163, 175, 180], "yop": 163, "zop": 163, "cg": [164, 182, 189, 242], "momenta": 164, "uncoupl": [164, 182], "r708": 164, "j_3": [164, 182, 205], "r709": 164, "wigner3j": [164, 205], "wigner": [164, 182, 240, 282], "varshalovich": [164, 182], "zyla": 164, "theor": 164, "phy": [164, 190, 205], "083c01": 164, "r710": 164, "w3j": 164, "715": [164, 205, 220], "wigner6j": [164, 205], "j12": [164, 182], "j23": 164, "6j": [164, 205], "wigner9j": [164, 205], "j4": 164, "j34": 164, "j13": 164, "j24": 164, "9j": [164, 205], "cg_simp": 164, "r711": 164, "clebsh": 164, "rethink": 165, "figsiz": 165, "circuitplot": 165, "nqubit": [165, 169, 170, 179], "control_lin": 165, "gate_idx": [165, 169], "min_wir": 165, "max_wir": 165, "control_point": 165, "wire_idx": 165, "not_point": 165, "one_qubit_box": 165, "box": [165, 170, 172, 181, 183, 275, 282], "qubit": [165, 169, 170, 171, 172, 178, 282], "swap_point": 165, "two_qubit_box": 165, "createcg": 165, "latexnam": 165, "mock": 165, "mz": 165, "circuit_plot": 165, "min_qubit": [165, 169], "autogener": 165, "wire": 165, "j_0": 165, "r712": 166, "comm": [166, 185, 246], "plank": 167, "r713": 167, "05457162000000e": 167, "planck_const": 167, "hermetian": 168, "r714": 168, "r715": 168, "ket": [168, 173, 174, 175, 177, 179, 180, 183, 185], "bra": [168, 173, 174, 175, 177, 179, 180, 183, 185], "innerproduct": [168, 173, 174, 180, 182, 185], "outerproduct": [168, 174], "seamlessli": 168, "hermitian_adjoint": 168, "hermitian_transpos": 168, "_apply_operators_qubit": 169, "gate_sort": 169, "gate_simp": 169, "ugat": 169, "cgate": 169, "control_valu": 169, "cnot": 169, "eval_control": 169, "plot_gat": 169, "circ_plot": 169, "simplify_cg": 169, "cphase": 169, "cnotgat": 169, "qappli": [169, 170, 172, 174, 179, 282], "get_target_matrix": 169, "hadamardg": 169, "identityg": 169, "onequbitg": 169, "phaseg": 169, "swapgat": 169, "target1": 169, "target2": 169, "tgate": 169, "twoqubitg": 169, "xgate": 169, "ygate": 169, "zgate": 169, "bubbl": 169, "random_circuit": 169, "ngate": 169, "gate_spac": 169, "mermin": 170, "_represent_zg": 170, "oracleg": 170, "oracl": 170, "intqubit": [170, 179], "search_funct": 170, "wgate": 170, "apply_grov": 170, "grover_iter": 170, "qstate": 170, "wv": 170, "superposition_basi": 170, "numqubit": 170, "basis_st": 170, "matt": 171, "complexspac": 171, "directsumhilbertspac": 171, "r716": 171, "hilbertspac": 171, "fockspac": 171, "hilbert_spac": [171, 174, 183], "direct_sum": 171, "quantiz": [171, 282], "r717": 171, "mess": [171, 236, 239, 297], "fock_spac": 171, "r718": 171, "tensorpowerhilbertspac": 171, "r719": 171, "tensor_product": 171, "tensorproducthilbertspac": 171, "r720": 171, "clebsch": [172, 182, 205, 282], "gordan": [172, 182, 205, 282], "hilbert": [172, 174, 180, 282], "grover": [172, 282], "qft": [172, 181, 282], "shor": [172, 282], "brabas": [173, 174, 180, 183], "ketbas": [173, 174, 180, 183], "r721": 173, "inner_product": 173, "apply_oper": [174, 185], "identityoper": 174, "r722": 174, "r723": 174, "polymoni": 174, "operator_": 174, "28physic": 174, "old_assumpt": 174, "r724": 174, "outer_product": 174, "unitaryoper": 174, "operators_to_st": 175, "state_to_oper": 175, "_operators_to_st": 175, "state_map": 175, "_state_to_oper": 175, "statebas": [175, 180, 183], "piab": 176, "piabbra": 176, "piabhamiltonian": 176, "piabket": 176, "ip_doit": 177, "smarter": [178, 229], "rk": 178, "iqft": 178, "rkgate": 178, "qtf": 178, "povm": 179, "as_int": [179, 261], "qubit_valu": 179, "intqubitbra": 179, "00001": 179, "qubitbra": 179, "matrix_to_dens": 179, "matrix_to_qubit": 179, "measure_al": 179, "ensembl": 179, "measure_all_oneshot": 179, "oneshot": 179, "measure_parti": 179, "measure_partial_oneshot": 179, "qubit_to_matrix": 179, "enumerate_st": 180, "_enumerate_st": 180, "foo_1": 180, "foo_2": 180, "foo_3": 180, "test2": 180, "bar_4": 180, "bar_5": 180, "bar_10": 180, "get_basi": 180, "replace_non": 180, "operator_to_st": 180, "qexpr": 180, "integrate_result": 180, "orig_expr": 180, "x_ket": 180, "x_op": 180, "rep_expect": 180, "px_2": 180, "px_1": 180, "rep_innerproduct": 180, "_repres": 180, "_represent_foobasi": 180, "foobasi": 180, "_represent_szop": 180, "szupket": 180, "szop": 180, "sz": 180, "cmod": 181, "reformat": 181, "period_find": 181, "momemtum": 182, "j2op": 182, "jxbra": 182, "jx": 182, "jzket": 182, "jxbracoupl": 182, "jcoupl": 182, "jzketcoupl": 182, "jxket": 182, "jxketcoupl": 182, "jybra": 182, "jy": 182, "jybracoupl": 182, "jyket": 182, "jyketcoupl": 182, "jzbra": 182, "jz": 182, "jzbracoupl": 182, "j_4": [182, 205], "argular": 182, "jzop": 182, "passiv": 182, "r725": 182, "wignerd": 182, "jm": 182, "jj": 182, "r726": 182, "jcoupling_list": 182, "coupledspinst": 182, "spinstat": 182, "r727": 183, "dual_class": 183, "mn": [183, 220, 240], "ket_not": 183, "r728": 183, "k0": [183, 211, 213, 240], "orthogonalbra": 183, "orthogonalket": 183, "orthogonalst": 183, "_eval_adjoint": 183, "timedepbra": 183, "timedepst": 183, "timedepket": 183, "prob": [183, 240], "412214747707527": 183, "matrix_tensor_product": 184, "axb": 184, "xdagger": 184, "axc": 184, "bxc": 184, "tensor_product_simp": 184, "cxd": 184, "boson": 185, "fetter": 185, "welecka": 185, "secondqu": 185, "annihilateboson": 185, "fockstateket": 185, "bket": 185, "fockstatebosonket": 185, "annihilatefermion": 185, "createboson": 185, "is_only_q_annihil": 185, "destroi": [185, 229], "quasi": 185, "hole": 185, "is_only_q_cr": 185, "is_q_annihil": 185, "is_q_creat": 185, "antisymmetrictensor": 185, "bbra": 185, "fockstatebosonbra": 185, "bosonicbasi": 185, "fock": 185, "createfermion": 185, "wick": 185, "fbra": 185, "fockstatefermionbra": 185, "fket": 185, "fockstatefermionket": 185, "fixedbosonicbasi": 185, "n_particl": 185, "n_level": 185, "fockstat": 185, "occup": 185, "bosonbra": 185, "fockstatebra": 185, "fermi_level": 185, "r729": 185, "textwrap": [185, 261], "_q": 185, "get_subno": 185, "fermionicoper": 185, "has_q_annihil": 185, "q_annihil": 185, "has_q_creat": 185, "leftmost": 185, "q_creator": 185, "iter_q_annihil": 185, "iter_q_cr": 185, "0x": 185, "permutationoper": 185, "get_permut": 185, "varbosonicbasi": 185, "n_max": 185, "creator": 185, "evaluate_delta": 185, "einstein": [185, 246], "d_ij": 185, "_j": [185, 190, 205, 222], "d_ip": 185, "d_qp": 185, "matrix_rep": 185, "simplify_index_permut": 185, "permutation_oper": 185, "schemat": [185, 190], "abij": 185, "abji": 185, "baij": 185, "baji": 185, "permutlist": 185, "substitute_dummi": 185, "new_indic": 185, "pretty_indic": 185, "_get_ordered_dummi": 185, "_c": 185, "_d": 185, "index_group": 185, "string_of_lett": 185, "my_dummi": 185, "_v": [185, 204], "_p_0": 185, "_p_1": 185, "keep_only_fully_contract": 185, "sho": 186, "isotrop": 186, "mk": [187, 190], "legal": 187, "temperatur": [187, 201, 274], "dimensions": 187, "dimsys_si": [187, 188], "get_dimensional_depend": [187, 188], "has_integer_pow": 187, "dim_si": 187, "dimensionsystem": 187, "base_dim": 187, "derived_dim": 187, "dimensional_depend": 187, "can_transf_matrix": 187, "inv_can_transf_matrix": 187, "dim_can_vector": 187, "dim_vector": 187, "is_consist": [187, 193], "is_dimensionless": 187, "list_can_dim": 187, "print_dim_bas": 187, "gravitational_const": [188, 192], "equivalent_dim": 188, "grav_eq": 188, "kepler": [188, 265], "venu": 188, "701": 188, "dai": [188, 192, 236], "venus_a": 188, "set_quantity_dimens": 188, "set_quantity_scale_factor": 188, "108208000e3": 188, "solar": 188, "solar_mass": 188, "9891e30": 188, "convert_to": [188, 189, 192, 209, 215], "5112118495813": 188, "659097795948": 188, "astrophys": 188, "pound": 189, "boltzmann": 189, "physicalconst": 189, "unitsystem": [189, 193], "kilomet": [189, 191, 192], "unitless": 189, "dimensionless": [189, 190], "discrep": 189, "speed_of_light": [189, 192], "cgs_gauss": 189, "quantity_simplifi": 189, "philosophi": [189, 236, 239, 282], "rough": 190, "mole": 190, "unavoid": 190, "d_3": 190, "d_2": [190, 216, 240], "underbrac": [190, 203], "countabl": [190, 239], "pmatrix": 190, "kg": [190, 275], "glu": 190, "men": 190, "heat": 190, "joul": 190, "calori": 190, "chemistri": 190, "page52": 190, "1952": 190, "page78": 190, "deboer79": 190, "boer": 190, "818": 190, "levyleblond77": 190, "l\u00e9vy": 190, "leblond": 190, "conceptu": [190, 207, 274], "rivista": 190, "del": [190, 255, 265, 273, 297], "nuovo": [190, 205], "cimento": [190, 205], "1977": 190, "187": [190, 214], "214": 190, "anticip": 190, "bin_prefix": 191, "latex_repr": [191, 192], "encapsul": [191, 213, 239, 253], "kilo": 191, "pretty_unicode_repr": 192, "pretty_ascii_repr": 192, "mathml_presentation_repr": 192, "is_prefix": 192, "abbrevi": [192, 208, 220, 239, 241], "unit_system": 192, "scale_factor": 192, "set_global_relative_scale_factor": 192, "reference_quant": 192, "target_unit": 192, "mile": 192, "atomic_mass_const": 192, "centimet": 192, "25146": 192, "609344": 192, "86400": 192, "660539060e": 192, "300000": 192, "planck": [192, 240], "62963087839509e": 192, "base_unit": 193, "descr": 193, "dimension_system": 193, "derived_unit": 193, "overridden": [193, 207, 222, 297], "get_units_non_prefix": 193, "wikidyad": [194, 202], "wikidyadicproduct": [194, 202], "otim": [194, 241, 242], "rigidli": 194, "entireti": 194, "_str": 194, "coordinatesym": [195, 197], "otherfram": [195, 265], "n_alpha_b": 195, "ny": [195, 211], "_3": [195, 205], "orient_body_fix": 195, "orient_space_fix": 195, "orient_quaternion": 195, "quaternion": [195, 199, 204, 265, 267], "rotation_ord": [195, 265, 267], "xzx": 195, "xyx": [195, 265, 267], "yzy": 195, "yxy": [195, 204], "yzx": [195, 204], "zxy": 195, "xzy": 195, "zyx": 195, "yxz": 195, "orient_explicit": 195, "lambda_x": [195, 265, 267], "lambda_i": [195, 265, 267], "lambda_z": [195, 265, 267], "q0": [195, 236, 265, 267], "newnam": 195, "gen_spe": [195, 199], "variable_map": 195, "a_x": [195, 204, 220], "b_x": [195, 197, 204, 246], "b_y": [195, 197, 204, 246], "a_z": [195, 204], "b_z": [195, 204, 246], "xz": [195, 204, 206], "zy": [195, 204], "inlist": 195, "var_in_dcm": 195, "reexpress": [195, 270], "time_deriv": [195, 197, 201], "free_dynamicsymbol": 195, "codirect": 195, "dyadic_tensor": [195, 265], "frame1": 195, "frame2": [195, 197], "second_reference_fram": 195, "ixz": 195, "inertia_dyad": 195, "pertain": [196, 202], "fieldfunct": [196, 201], "curl": [196, 265, 268, 275], "vect": [196, 265, 268], "r_x": [196, 201], "r_y": [196, 201], "r_z": [196, 201], "gradient": [196, 205, 206, 265, 268, 274], "scalar_potenti": [196, 201, 268, 272], "scalar_field": [196, 201, 265, 268, 272], "grad_field": [196, 268], "scalar_potential_differ": [196, 201, 268, 272], "sympyfi": [196, 197, 199, 268], "position2": [196, 268], "vectfield": [196, 201, 268, 272], "is_conserv": [196, 201, 268, 272], "is_solenoid": [196, 201, 268, 272], "solenoid": [196, 268], "q6": 197, "vec1": 197, "vec2": 197, "n_x": 197, "rotating_reference_fram": 197, "time_derivatives_in_the_two_fram": 197, "otherpoint": 199, "outfram": 199, "fixedfram": 199, "get_motion_param": 199, "vectori": [199, 201, 269, 274], "timevalue1": 199, "timevalue2": 199, "313": 199, "vel_vec": 199, "q1dd": 200, "q2dd": 200, "charg": [201, 274], "displac": [201, 203, 274], "temper": 201, "earth": [201, 274], "4xy": [201, 274], "electric_potenti": [201, 272], "r1_x": 201, "r1_y": 201, "infinitesim": [201, 236, 272], "nabla": [201, 265, 271, 272], "f_y": [201, 272], "f_x": [201, 239, 272], "sink": [201, 272], "irrot": [201, 272], "conservative_field": [201, 272], "aug": [202, 239], "dyadic_product": [202, 273], "inc": [202, 214], "w_x": 203, "w_y": 203, "w_z": 203, "w_1": [203, 215], "w_2": [203, 215], "w_3": 203, "textrm": [203, 204, 228], "u_x": 203, "sp": 203, "oq": 203, "qp": 203, "rod": 203, "went": 203, "parallelogram": 204, "c_x": 204, "c_y": 204, "c_z": 204, "train": 204, "friend": 204, "undergon": [204, 239], "vastli": 204, "mold": 204, "bp": [204, 236], "bpp": 204, "zzx": 204, "multifram": 204, "direction": 204, "racah": 205, "gaunt": 205, "rasch03": 205, "regge58": 205, "regg": 205, "544": 205, "regge59": 205, "116": [205, 214], "1959": 205, "edmonds74": 205, "edmond": 205, "princeton": [205, 240], "1957": 205, "rasch": 205, "siam": [205, 258], "sci": 205, "1416": 205, "1428": 205, "liberatodebrito82": 205, "liberato": 205, "brito": 205, "homeier96": 205, "homeier": 205, "steinborn": 205, "mol": 205, "368": 205, "1996": [205, 214, 230, 238, 265], "forum": [205, 239], "m4nzdu": 205, "7o38": 205, "jen": 205, "03": [205, 240], "gerardo": 205, "lazo": 205, "arjona": 205, "phil": 205, "adam": [205, 216], "lemaitr": 205, "2022": 205, "jyr2000": 205, "clebsch_gordan": 205, "2j_3": 205, "dot_rot_grad_ynm": 205, "_l": 205, "l_2": 205, "l_3": 205, "drastic": 205, "2l_1": 205, "2l_2": 205, "2l_3": 205, "1200": 205, "00689500421922113448": 205, "inflect": 205, "unsuit": 205, "dd": [205, 225], "ee": [205, 215], "j_5": 205, "j_6": 205, "richer": 205, "real_gaunt": 205, "realgaunt": 205, "m0": [205, 246], "00002480019791932209313156167": 205, "wigner_3j": 205, "wigner_6j": 205, "wigner_9j": 205, "j_7": 205, "j_8": 205, "j_9": 205, "05555555": 205, "1666666": 205, "wigner_d": 205, "j_z": 205, "j_y": 205, "\u03b3": [205, 287, 297], "wigner_d_smal": 205, "textbackend": 206, "plot_parametr": 206, "plot_implicit": 206, "plot3d_parametric_lin": 206, "plot3d_parametric_surfac": 206, "zlabel": 206, "aspect_ratio": 206, "ylim": 206, "axis_cent": 206, "xscale": 206, "yscale": 206, "autoscal": 206, "textplot": 206, "_seri": [206, 217], "baseseri": 206, "nonparametr": 206, "basebackend": 206, "parametric2dlineseri": 206, "parametric3dlineseri": 206, "cyan": 206, "grayscal": 206, "integers_onli": 206, "surfaceover2drangeseri": 206, "parametricsurfaceseri": 206, "surface_color": 206, "instantia": 206, "centric": 206, "get_mesh": 206, "range1": 206, "range2": 206, "fill_between": 206, "nb_of_point": 206, "inch": 206, "expr_x": 206, "expr_i": 206, "canva": 206, "range_x": 206, "range_i": 206, "nb_of_points_x": 206, "nb_of_points_i": 206, "expr_z": 206, "range_u": 206, "range_v": 206, "nb_of_points_u": 206, "nb_of_points_v": 206, "x_var": 206, "y_var": 206, "mesh": 206, "p8": 206, "p9": 206, "nrow": [206, 209], "ncolumn": 206, "stuff": [206, 251, 253, 261], "is_2dlin": 206, "oblig": 206, "eval_color_func": 206, "get_label": 206, "discrat": 206, "only_integ": 206, "get_seg": 206, "get_color_arrai": 206, "parametric3dlineinteractiveseri": 206, "absarglineseri": 206, "var_start_end": 206, "line3dbaseseri": 206, "surfacebaseseri": 206, "var_start_end_x": 206, "var_start_end_i": 206, "mesh_x": 206, "mesh_i": 206, "mesh_z": 206, "var_start_end_u": 206, "var_start_end_v": 206, "mesh_u": 206, "mesh_v": 206, "implicitseri": 206, "interval_list": 206, "contourf": 206, "x_arrai": 206, "y_arrai": 206, "z_arrai": 206, "plot_typ": 206, "process_seri": 206, "_process_seri": 206, "keyboard": 206, "mous": 206, "pyglet_plot": 206, "screenshot": 206, "camera": 206, "zoom": 206, "numpad": 206, "ordin": [206, 236, 261], "f5": 206, "f6": 206, "f8": 206, "drag": 206, "curvilinear": [206, 269, 270], "__setitem__": 206, "zfade4": 206, "key1": 206, "value1": 206, "key2": 206, "value2": 206, "unbound_theta": 206, "wirefram": 206, "saddl": 206, "fz": 206, "_______________________________________________________": 206, "mediterranean": 207, "cultur": 207, "arab": 207, "lighten": 207, "tapestri": 207, "woven": 207, "european": 207, "soil": 207, "plausibl": 207, "teeter": 207, "totter": 207, "outweigh": 207, "excit": 207, "amus": 207, "kempf": 207, "1944": 207, "20th": 207, "dedekind": 207, "intim": 207, "disciplin": 207, "toolset": 207, "atiyah69": [207, 214], "gear": 207, "greuel2008": [207, 214], "interspers": 207, "lr": 207, "ilex": 207, "\u211a": [207, 220], "localis": 207, "abridg": 207, "free_modul": [207, 211], "quotient_r": [207, 211], "overload": [207, 210, 211, 269, 292], "polynomialr": [207, 211, 218], "domain_or_r": [207, 211], "quotientr": [207, 211], "base_id": [207, 211], "elbow": 207, "componentwis": [207, 220], "biproduct": 207, "quotient_modul": 207, "is_submodul": 207, "multiply_id": 207, "identity_hom": 207, "freemodul": 207, "freemoduleel": 207, "conicis": 207, "_contain": 207, "_syzygi": 207, "_in_terms_of_gener": 207, "_intersect": 207, "_module_quoti": 207, "reduce_el": [207, 215], "represantit": 207, "in_terms_of_gener": 207, "inclusion_hom": 207, "rela": 207, "relb": 207, "is_full_modul": 207, "module_quoti": 207, "opt": [207, 209, 213, 232, 251, 293], "coincis": 207, "syzygy_modul": 207, "r_n": 207, "_contains_elem": 207, "_contains_id": 207, "_quotient": 207, "_union": 207, "_product": 207, "is_whole_r": 207, "is_maxim": 207, "is_primari": 207, "is_rad": 207, "is_princip": 207, "xj": 207, "satur": 207, "subquoti": 207, "quotientmodul": 207, "subquotientmodul": 207, "killed_modul": 207, "quotientmoduleel": 207, "kill": [207, 211, 251], "quotient_hom": 207, "ker": 207, "surject": 207, "cokernel": 207, "coker": 207, "meaningfulli": 207, "restrict_domain": 207, "homomoprh": 207, "modulehomomorph": [207, 215], "_ker": 207, "_img": 207, "_kernel": 207, "_imag": 207, "_restrict_domain": 207, "_restrict_codomain": 207, "_quotient_domain": 207, "_quotient_codomain": 207, "_appli": 207, "_mul_scalar": 207, "_compos": 207, "_add": [207, 226], "is_inject": 207, "quotient_domain": 207, "is_isomorph": 207, "preimag": 207, "restrict_codomain": 207, "is_surject": 207, "quotient_codomain": 207, "induct": 207, "monogen": 207, "monogenicfiniteextens": [207, 211], "finiteextens": 207, "sqrt2": [207, 210], "extensionel": [207, 211], "notinvert": [207, 213, 216], "nu_1": 208, "nu_2": 208, "nu_n": 208, "nu_i": 208, "customarili": 208, "ua": 208, "endow": [208, 216], "resp": [208, 211, 236], "divmod": [208, 210, 211], "cb": [208, 258], "sqf_list": [208, 211, 216], "sqf": [208, 211, 216, 233], "buchberg": [208, 213, 214, 216], "solve_poly_system": [208, 216, 238, 239], "ddm": 209, "from_list": [209, 211, 216, 217], "fmt": [209, 211, 215], "matrix1": 209, "sdm": [209, 213], "adj_det": 209, "domainscalar": 209, "adja": 209, "deta": 209, "inv_den": 209, "adj_poly_det": 209, "p_a": 209, "eval_poli": 209, "to_dens": 209, "cancel_denom": 209, "solve_den": 209, "rref_den": 209, "minv": 209, "minv_reduc": 209, "den_reduc": 209, "to_field": [209, 211, 216], "_all_": 209, "_some_": 209, "cancel_denom_elementwis": 209, "m_frac": 209, "denoms_invert": 209, "charpoly_factor_list": 209, "domainel": [209, 210, 211, 218], "charpoly_factor_block": 209, "charpoly_bas": 209, "sparsiti": 209, "charpoly_berk": 209, "ddm_berk": 209, "sdm_berk": 209, "unfactor": 209, "choose_domain": 209, "construct_domain": [209, 210, 211, 216], "clear_denom": [209, 211, 216], "anum": 209, "to_sympi": [209, 210, 211], "get_r": [209, 211], "zz_i": [209, 210], "eval_poly_mul": 209, "p_a_b": 209, "303": 209, "solve_den_charpoli": 209, "from_dict_sympi": 209, "ncol": 209, "elemsdict": 209, "from_list_sympi": 209, "from_dok": 209, "to_dok": 209, "from_flat_nz": 209, "to_flat_nz": 209, "from_list_flat": 209, "element_list": 209, "to_list_flat": 209, "from_rep": 209, "drep": 209, "ownership": 209, "dmnonsquarematrixerror": 209, "ainv": 209, "lll": 209, "lov\u00e1sz": 209, "r730": 209, "r731": 209, "dmvalueerror": 209, "dmrankerror": [209, 215], "20160": 209, "33768": 209, "39578": 209, "47757": 209, "r732": 209, "lll_transform": 209, "93lenstra": 209, "93lov": 209, "a1sz_lattice_basis_reduction_algorithm": 209, "20221029115428": 209, "elt": [209, 215], "lovasz": 209, "bremner": 209, "nnz": 209, "divide_last": 209, "a_nul": 209, "nulliti": 209, "dmnotafield": 209, "to_dm": 209, "nullspace_from_rref": 209, "m_primit": 209, "exquo": [209, 210, 211, 216], "assoic": 209, "gj_dens": 209, "ff_dens": 209, "cd_dens": 209, "sdm_irref": 209, "sdm_rref_den": 209, "ddm_irref": 209, "ddm_irref_den": 209, "keep_domain": 209, "a_rref": 209, "scc": 209, "xnum": 209, "xden": 209, "dmnoninvertiblematrixerror": 209, "xsol": 209, "xsol_uncancel": 209, "solve_den_rref": 209, "frontend": 209, "to_ddm": 209, "to_sdm": 209, "to_dfm": 209, "dfm": 209, "_dfm": 209, "to_dfm_or_ddm": 209, "flint": [209, 210, 211], "to_spars": 209, "elements_doubl": 209, "aq": 209, "ddm_": 209, "ddm_idet": 209, "friendlier": 209, "nonpivot": 209, "mrref": 209, "typevar": 209, "ringel": 209, "r733": 209, "93berkowitz_algorithm": 209, "ddm_iadd": 209, "r734": 209, "bareiss_algorithm": 209, "r735": 209, "usm": 209, "perri": 209, "thesis_drl": 209, "ddm_iinv": 209, "ddm_imatmul": 209, "ddm_ilu": 209, "qq_i": [209, 210], "ddm_ilu_solv": 209, "ddm_ilu_split": 209, "ddm_imul": 209, "ddm_ineg": 209, "ddm_irmul": 209, "_partial_pivot": 209, "r736": 209, "row_echelon_form": 209, "reduced_row_echelon_form": 209, "ffgj": 209, "r737": 209, "nako": 209, "turner": 209, "william": 209, "271130": 209, "271133": 209, "ddm_isub": 209, "ddm_transpos": 209, "_type": 209, "ccc": [209, 239], "from_ddm": 209, "domainerror": [209, 213, 216], "r738": 209, "unmodifi": [209, 232], "arref": 209, "ddm_rref": 209, "sdm_nullspace_from_rref": 209, "nonzero_col": 209, "sdm_particular_from_rref": 209, "r739": 209, "_flint": [209, 210], "fmpz_mat": 209, "sympy_ground_typ": [209, 210, 211], "fmpz_mat_charpoli": 209, "fmpq_mat_charpoli": 209, "nmod_mat_charpoli": 209, "danilevski": 209, "fmpz_mat_det": 209, "fmpq_mat_det": 209, "25x25": 209, "60x60": 209, "extract_slic": 209, "rowslic": 209, "colslic": 209, "getitem": 209, "fmpz_mat_inv": 209, "fmpq_mat_inv": 209, "fmpz_mat_solv": 209, "m_lll": 209, "fmpq_mat_solv": 209, "fmpq_mat_solve_dixon": 209, "15x15": 209, "dixon": [209, 214], "multimodular": 209, "mul_elementwis": 209, "setitem": 209, "r740": 209, "pythonmpq": [210, 211], "srepr": [210, 292], "strength": 210, "richardon": 210, "dup_factor_list": 210, "factortool": [210, 213], "dup_": [210, 213], "dmp_": [210, 213], "z1": [210, 211, 238], "is_field": [210, 211], "fmpz": [210, 211], "quo": [210, 211, 213, 216], "rem": [210, 211, 213, 216], "exactquotientfail": [210, 211, 213, 216], "mpz": [210, 211], "of_typ": [210, 211], "z1_sympi": 210, "from_sympi": [210, 211], "forth": [210, 215], "z_sympi": 210, "z_zz": 210, "coercionfail": [210, 213], "sum_domain": 210, "expressions_sympi": 210, "expressions_dom": 210, "result_dom": 210, "e_dom": 210, "result_sympi": 210, "gaussianinteg": [210, 211], "gaussianrationalfield": [210, 211], "gaussianr": [210, 211], "finitefield": [210, 211], "pythonfinitefield": [210, 211], "gmpyfinitefield": [210, 211], "welcom": [210, 236, 290], "realel": [210, 211], "complexel": [210, 211], "mpc": 210, "xr": [210, 218], "zc": 210, "_mpc_": 210, "realfield": [210, 211], "rr100": 210, "33333333333333333333333333333": 210, "hack": [210, 236, 249], "algebraic_field": [210, 211, 213, 215], "algebraicfield": [210, 211, 213, 215], "sqrt3": 210, "x_dom": 210, "p_expr": [210, 211], "polyel": [210, 211, 213, 217, 218, 220], "p_dom": 210, "xk": [210, 211, 222], "yk": [210, 211], "poly_r": [210, 211], "old_polynomialr": 210, "globalpolynomialr": 210, "polyclass": [210, 211, 216], "yr": [210, 218], "broader": 210, "get_field": [210, 211], "frac_field": [210, 211], "rationalfield": [210, 211], "old_frac_field": [210, 211], "fractionfield": [210, 211], "old_fractionfield": 210, "xf": 210, "yf": 210, "fracfield": [210, 211], "expressiondomain": [210, 211], "elements_sympi": 210, "elements_k": 210, "convert_from": [210, 211], "num_zz": 210, "num_qq": 210, "encompass": 210, "all_coeff": [210, 211, 216], "dom": [210, 211, 213, 228], "strang": 210, "hybrid": 210, "unreli": 210, "usefulli": 211, "pythonr": [211, 218], "p_domain": 211, "ez": [211, 246], "has_assoc_field": 211, "has_assoc_r": 211, "alg_field_from_poli": [211, 215], "root_index": 211, "almosteq": 211, "cyclotomic_field": [211, 215], "zeta7": 211, "zeta_": 211, "exsqrt": 211, "lexord": [211, 216], "from_algebraicfield": 211, "from_complexfield": 211, "from_expressiondomain": 211, "from_expressionrawdomain": 211, "from_ff": 211, "modularinteg": 211, "from_ff_gmpi": 211, "from_ff_python": 211, "from_fractionfield": 211, "from_globalpolynomialr": 211, "from_monogenicfiniteextens": 211, "from_polynomialr": 211, "from_qq_gmpi": 211, "from_qq_python": 211, "from_realfield": 211, "from_zz_gmpi": 211, "from_zz_python": 211, "gcdex": [211, 216], "get_exact": 211, "half_gcdex": [211, 216], "is_pid": 211, "is_r": 211, "is_nonposit": 211, "is_on": [211, 216], "rersiv": 211, "__neg__": 211, "__pos__": 211, "__sub__": 211, "q_domain": 211, "q_expr": 211, "x_domain": 211, "alg": [211, 215, 219], "trait": 211, "is_unit": 211, "__divmod__": 211, "__floordiv__": 211, "__mod__": [211, 215], "simpledomain": 211, "compositedomain": 211, "from_qq": 211, "from_zz": 211, "gmpyinteg": 211, "pythoninteg": 211, "gmpyrationalfield": 211, "pythonrationalfield": 211, "from_gaussianrationalfield": 211, "gaussianel": 211, "gaussiandomain": 211, "qq_python": 211, "zz_python": 211, "z2": 211, "z3": 211, "z4": 211, "from_gaussianinteg": 211, "as_algebraicfield": 211, "orig_ext": 211, "integral_basi": [211, 215], "maximal_ord": [211, 215], "zeta5": 211, "primes_abov": [211, 215], "primeid": [211, 215], "galois_group": [211, 215, 216], "by_nam": [211, 215, 216], "c6": 211, "max_tri": [211, 215, 216], "numberfield": [211, 215, 216], "galoisgroup": [211, 215, 216], "to_alg_num": [211, 215], "legibl": 211, "inaccur": 211, "to_rat": 211, "mpelement": 211, "complexfield": 211, "lc": [211, 213, 216], "domain_or_field": 211, "dmf": 211, "coercibl": 211, "monomialord": [211, 216], "xring": 211, "vring": 211, "sring": [211, 217, 218], "polyr": [211, 213, 218], "factor_list": [211, 216, 297], "add_gen": 211, "drop_to_ground": 211, "monomial_basi": 211, "206": [211, 216], "744": 211, "945": [211, 217], "symmetric_poli": [211, 216], "is_monomi": [211, 216], "coeff_wrt": 211, "const": [211, 220], "inplac": 211, "shallow": [211, 227], "zero_monom": 211, "fv": 211, "clo": 211, "p64": 211, "qv": 211, "f0": 211, "imul_num": 211, "itercoeff": 211, "itermonom": 211, "iterterm": 211, "leading_expv": 211, "leading_monom": 211, "leading_term": 211, "listcoeff": 211, "listmonom": 211, "listterm": 211, "monom": [211, 216], "pdiv": [211, 216], "prem": [211, 216], "pquo": [211, 216], "pexquo": [211, 216], "differnc": 211, "strip_zero": 211, "r741": 211, "lauer": 211, "1976": 211, "242": 211, "247": [211, 214, 238], "800205": 211, "806342": 211, "tail_degre": 211, "xfield": 211, "vfield": [211, 271], "sfield": [211, 271], "fracel": [211, 220], "lev": 211, "add_ground": [211, 216], "all_monom": [211, 216], "all_term": [211, 216], "cauchy_lower_bound": 211, "cauchy_upper_bound": 211, "count_complex_root": 211, "sup": [211, 216, 220, 228], "count_real_root": 211, "deflat": [211, 216], "y_i": [211, 213, 215, 216, 236], "x_j": [211, 213, 216], "degree_list": [211, 216], "eject": [211, 216], "exquo_ground": [211, 216], "factor_list_includ": [211, 216], "from_dict": [211, 216], "from_sympy_list": 211, "gff_list": [211, 216], "homogeneous_ord": [211, 216, 233, 236], "is_cyclotom": [211, 216], "is_ground": [211, 216], "is_homogen": [211, 216], "is_irreduc": [211, 216], "is_linear": [211, 216], "is_mon": [211, 216], "is_quadrat": [211, 216], "is_sqf": [211, 216], "l1_norm": [211, 216], "l2_norm_squar": 211, "max_norm": [211, 216], "mignotte_sep_bound_squar": 211, "mignott": [211, 213], "mul_ground": [211, 216], "quo_ground": [211, 216], "refine_root": [211, 215, 216], "includepr": [211, 213, 216], "sqf_list_includ": [211, 216], "sqf_norm": [211, 216], "sqf_part": [211, 216], "sqr": [211, 216], "sturm": [211, 216], "sub_ground": [211, 216], "to_dict": 211, "to_exact": [211, 216], "to_r": [211, 216], "to_sympy_dict": 211, "to_sympy_list": 211, "to_tupl": 211, "total_degre": [211, 216, 233], "trunc": [211, 216, 219], "frac_unifi": 211, "half_per": 211, "poly_unifi": 211, "gr\u00f6bner": 212, "wester": [212, 283], "agca": [212, 283], "l0": 213, "legitim": 213, "uninterest": 213, "bulk": [213, 230], "x_u": 213, "dup__": 213, "densebas": 213, "dmp_lc": 213, "poly_lc": 213, "dmp_tc": 213, "poly_tc": 213, "dmp_ground_lc": 213, "dmp_ground_tc": 213, "dmp_true_lt": 213, "n_1": [213, 238, 240], "n_k": 213, "dmp_degre": 213, "dmp_degree_in": 213, "dmp_degree_list": 213, "dmp_strip": 213, "dmp_valid": 213, "dup_revers": 213, "dmp_copi": 213, "dmp_to_tupl": 213, "dmp_normal": 213, "dmp_convert": 213, "to_domain": 213, "dmp_from_sympi": 213, "dmp_nth": 213, "dmp_ground_nth": 213, "dmp_zero_p": 213, "dmp_zero": 213, "dmp_one_p": 213, "dmp_one": 213, "dmp_ground_p": 213, "dmp_ground": 213, "dmp_negative_p": 213, "dmp_positive_p": 213, "dmp_from_dict": 213, "dmp_to_dict": 213, "dmp_swap": 213, "dmp_permut": 213, "dmp_nest": 213, "dmp_rais": 213, "dmp_deflat": 213, "dmp_multi_defl": 213, "dmp_inflat": 213, "dmp_exclud": 213, "dmp_includ": 213, "dmp_inject": 213, "dmp_eject": 213, "dmp_terms_gcd": 213, "dmp_list_term": 213, "dmp_apply_pair": 213, "dmp_slice": 213, "dup_random": 213, "densearith": 213, "dmp_add_term": 213, "dmp_sub_term": 213, "dmp_mul_term": 213, "dmp_add_ground": 213, "dmp_sub_ground": 213, "dmp_mul_ground": 213, "dmp_quo_ground": 213, "dmp_exquo_ground": 213, "dup_lshift": 213, "dup_rshift": 213, "dmp_ab": 213, "dmp_neg": 213, "dmp_add": 213, "dmp_sub": 213, "dmp_add_mul": 213, "dmp_sub_mul": 213, "dmp_mul": 213, "dmp_sqr": 213, "dmp_pow": 213, "dmp_pdiv": 213, "dmp_prem": 213, "dmp_pquo": 213, "dmp_pexquo": 213, "dmp_rr_div": 213, "dmp_ff_div": 213, "dmp_div": 213, "dmp_rem": 213, "dmp_quo": 213, "dmp_exquo": 213, "dmp_max_norm": 213, "dmp_l1_norm": 213, "dmp_expand": 213, "densetool": 213, "dmp_integr": 213, "dmp_integrate_in": 213, "dmp_diff": 213, "dmp_diff_in": 213, "dmp_eval": 213, "dmp_eval_in": 213, "dmp_eval_tail": 213, "dmp_diff_eval_in": 213, "dmp_trunc": 213, "dmp_ground_trunc": 213, "dup_mon": 213, "dmp_ground_mon": 213, "dup_cont": 213, "dmp_ground_cont": 213, "dup_primit": 213, "dmp_ground_primit": 213, "dup_extract": 213, "dmp_ground_extract": 213, "dup_real_imag": 213, "bivari": [213, 219, 236, 240], "dup_mirror": 213, "dup_scal": 213, "dup_shift": 213, "dup_transform": 213, "dmp_compos": 213, "dup_decompos": 213, "t_m": 213, "r742": 213, "dmp_lift": 213, "dup_sign_vari": 213, "dmp_clear_denom": 213, "k_0": 213, "dmp_revert": 213, "gf_": 213, "justifi": 213, "necess": 213, "u_0": 213, "m_0": [213, 233], "m_n": 213, "236237": 213, "9215": 213, "9405": 213, "9603": 213, "gf_int": 213, "gf_degre": 213, "gf_lc": 213, "gf_tc": 213, "gf_strip": 213, "gf_trunc": 213, "gf_normal": 213, "gf_from_dict": 213, "gf_to_dict": 213, "gf_from_int_poli": 213, "gf_to_int_poli": 213, "gf_neg": 213, "gf_add_ground": 213, "gf_sub_ground": 213, "gf_mul_ground": 213, "gf_quo_ground": 213, "gf_add": 213, "gf_sub": 213, "gf_mul": 213, "gf_sqr": 213, "gf_add_mul": 213, "gf_sub_mul": 213, "gf_expand": 213, "gf_div": 213, "r743": 213, "monagan93": [213, 214], "r744": 213, "gathen99": [213, 214], "gf_rem": 213, "gf_quo": 213, "gf_exquo": 213, "gf_lshift": 213, "gf_rshift": 213, "gf_pow": 213, "gf_pow_mod": 213, "r745": 213, "gf_gcd": 213, "gf_lcm": 213, "gf_cofactor": 213, "gf_gcdex": 213, "eea": 213, "r746": 213, "gf_monic": 213, "gf_diff": 213, "gf_eval": 213, "gf_multi_ev": 213, "gf_compos": 213, "gf_compose_mod": 213, "gf_trace_map": 213, "r747": 213, "gathen92": [213, 214], "gf_random": 213, "gf_irreduc": 213, "gf_irreducible_p": 213, "gf_sqf_p": 213, "gf_sqf_part": 213, "gf_sqf_list": 213, "e_2": [213, 216], "e_k": 213, "f_j": [213, 230], "gf_sqf": 213, "r748": 213, "geddes92": [213, 214], "gf_qmatrix": 213, "berlekamp": 213, "gf_qbasi": 213, "gf_berlekamp": 213, "gf_zassenhau": 213, "gf_shoup": 213, "gf_factor_sqf": 213, "gf_factor": 213, "e_d": 213, "cantor": 213, "zassenhau": [213, 215], "shoup": [213, 214], "kaltofen": [213, 214], "gathen": [213, 214], "gf_factor_method": 213, "r749": 213, "gf_valu": 213, "2204": 213, "congruent": [213, 230, 233], "cong": 213, "189": 213, "139": 213, "r750": 213, "ivan": 213, "niven": 213, "zuckerman": 213, "montgomeri": 213, "infeas": [213, 216], "sdm_": 213, "distributedmodul": 213, "sdm_monomial_mul": 213, "sdm_monomial_deg": 213, "f_5": 213, "sdm_monomial_divid": 213, "sdm_lc": 213, "sdm_to_dict": 213, "sdm_from_dict": 213, "dic": 213, "sdm_add": 213, "2f_1": 213, "3f_1": 213, "yf_1": 213, "xf_1": 213, "sdm_lm": 213, "sdm_lt": 213, "sdm_mul_term": 213, "2xy": [213, 291], "8xy": 213, "sdm_zero": 213, "sdm_deg": 213, "sdm_from_vector": 213, "sdm_to_vector": 213, "variant": [213, 236, 239], "qg": 213, "remark": [213, 219, 230, 236], "uf": 213, "vg": 213, "zout": 213, "euclidtool": 213, "dmp_half_gcdex": 213, "dmp_gcdex": 213, "dmp_invert": 213, "dmp_euclidean_pr": 213, "dmp_primitive_pr": 213, "exceedingli": 213, "collin": [213, 214], "collins67": [213, 214], "subdomain": 213, "2l": 213, "remainin": 213, "subdetermin": 213, "n_2": [213, 240], "n_": [213, 233], "abnorm": 213, "gamma_i": 213, "brown": [213, 214, 240], "traub": [213, 214], "browntraub71": [213, 214], "brown78": [213, 214], "discoveri": [213, 293], "dmp_inner_subresult": 213, "729": 213, "sre": 213, "dmp_subresult": 213, "dmp_prs_result": 213, "dmp_zz_modular_result": 213, "dmp_zz_collins_result": 213, "dmp_qq_collins_result": 213, "dmp_result": 213, "dmp_discrimin": 213, "dmp_rr_prs_gcd": 213, "cff": [213, 216], "dmp_ff_prs_gcd": 213, "dmp_zz_heu_gcd": 213, "r751": 213, "liao95": [213, 214], "dmp_qq_heu_gcd": 213, "dmp_inner_gcd": 213, "dmp_gcd": 213, "dmp_lcm": 213, "dmp_content": 213, "dmp_primit": 213, "dmp_cancel": 213, "dmp_trial_divis": 213, "dmp_zz_mignotte_bound": 213, "dup_zz_hensel_step": 213, "hensel": 213, "r752": 213, "dup_zz_hensel_lift": 213, "f_list": 213, "multifactor": 213, "r753": 213, "dup_zz_zassenhau": 213, "dup_zz_irreducible_p": 213, "eisenstein": 213, "dup_cyclotomic_p": 213, "bradford": 213, "russel": 213, "251": 213, "berlin": 213, "heidelberg": 213, "dup_zz_cyclotomic_poli": 213, "dup_zz_cyclotomic_factor": 213, "r754": 213, "weisstein09": [213, 214], "dup_zz_factor_sqf": 213, "dup_zz_factor": 213, "r755": 213, "dmp_zz_wang_non_divisor": 213, "wang": [213, 214, 258], "eez": 213, "dmp_zz_wang_test_point": 213, "dmp_zz_wang_lead_coeff": 213, "dmp_zz_diophantin": 213, "dmp_zz_wang_hensel_lift": 213, "dmp_zz_wang": 213, "enhanc": [213, 240], "r756": 213, "wang78": [213, 214], "r757": 213, "dmp_zz_factor": 213, "r758": 213, "dmp_ext_factor": 213, "dup_gf_factor": 213, "dmp_factor_list": 213, "dmp_factor_list_includ": 213, "dmp_irreducible_p": 213, "groebnertool": 213, "polyconfig": [213, 216], "f5b": [213, 216], "spoli": 213, "red_groebn": 213, "beckerweispfenning93": 213, "is_groebn": 213, "is_minim": 213, "is_reduc": 213, "fglmtool": 213, "matrix_fglm": 213, "o_to": 213, "o_from": 213, "r759": 213, "fauger": [213, 216], "gianni": [213, 216, 238], "mora": [213, 214, 216, 238], "sdm_spoli": 213, "phantom": 213, "sca": 213, "defn": 213, "sdm_ecart": 213, "ecart": 213, "sdm_nf_mora": 213, "nf": 213, "sdm_groebner": 213, "sugar": [213, 214, 245], "giovini": [213, 214], "polyopt": [213, 217], "build_opt": 213, "basepolynomialerror": 213, "operationnotsupport": 213, "heuristicgcdfail": 213, "homomorphismfail": 213, "isomorphismfail": [213, 215], "extraneousfactor": 213, "evaluationfail": 213, "refinementfail": 213, "notrevers": [213, 216], "notalgebra": 213, "polynomialerror": [213, 216], "unificationfail": [213, 215], "generatorsneed": 213, "computationfail": 213, "exc": 213, "generatorserror": 213, "univariatepolynomialerror": 213, "multivariatepolynomialerror": [213, 216], "polificationfail": 213, "orig": 213, "optionerror": 213, "flagerror": 213, "modulargcd": 213, "modgcd_univari": 213, "monagan00": [213, 214], "modgcd_bivari": 213, "modgcd_multivari": 213, "_modgcd_multivariate_p": 213, "brown71": [213, 214], "degbound": 213, "contbound": 213, "func_field_modgcd": 213, "reconstuct": 213, "z_p": 213, "hoeij04": [213, 214], "scarc": 213, "hsin": 214, "chao": 214, "liao": 214, "fateman": 214, "montreal": 214, "quebec": 214, "canada": 214, "240": [214, 222, 268], "von": [214, 240], "zur": 214, "gerhard": 214, "cambridg": [214, 233], "weisstein": 214, "cyclotomicpolynomi": 214, "1215": 214, "1231": 214, "czapor": 214, "labahn": 214, "monagan": [214, 232], "disco": 214, "721": 214, "kaltofen98": 214, "subquadrat": 214, "223": 214, "1998": [214, 233], "1179": 214, "1197": 214, "shoup95": 214, "397": 214, "shoup91": 214, "cox97": [214, 216], "shea": [214, 216], "ajwa95": 214, "ajwa": 214, "liu": 214, "groebner": [214, 215, 216, 219, 232, 238, 239], "citeseerx": [214, 229], "ist": [214, 229], "psu": [214, 229], "repid": 214, "rep1": [214, 229], "2bb46c0852bf74c9d74d1a12af6d11f69f7e8363": 214, "bose03": 214, "bose": 214, "guiver": 214, "giovini91": 214, "bronstein93": [214, 216], "salvi": [214, 217], "kiev": 214, "ukrain": 214, "buchberger01": [214, 216], "theorist": 214, "moreno": 214, "diaz": 214, "freir": 214, "eurocast": 214, "februari": 214, "davenport88": 214, "siret": 214, "tournier": 214, "london": [214, 233], "124": [214, 286], "greuel": 214, "pfister": 214, "atiyah": 214, "macdonald": 214, "142": 214, "1971": [214, 236], "505": 214, "249": 214, "wittkopf": 214, "478": 214, "hoeij": 214, "297": [214, 216], "304": [214, 216], "wang81": 214, "adic": 214, "symsac": 214, "hoeij02": 214, "manwright94": [214, 216], "yiu": 214, "kwong": 214, "franci": 214, "wright": 214, "dispers": [214, 240], "190347": 214, "190413": 214, "koepf98": [214, 216], "koepf": [214, 222, 232], "vieweg": 214, "abramov71": [214, 216], "abramov": [214, 238], "ussr": 214, "330": 214, "man93": [214, 216], "376": 214, "sciencedirect": [214, 229], "pii": [214, 229], "s0747717183710539": 214, "kapur1994": 214, "deepak": 214, "kapur": 214, "tushar": 214, "saxena": 214, "yang": 214, "researchg": [214, 240], "2514261_algebraic_and_geometric_reasoning_using_dixon_result": 214, "palancz08": 214, "pal\u00e1ncz": 214, "zaletnyik": 214, "jl": [214, 253], "awang": 214, "ew": 214, "grafarend": 214, "geodesi": 214, "225607735_dixon_result": 214, "s_solution_of_systems_of_geodetic_polynomial_equ": 214, "bruce97": 214, "bruce": 214, "randal": 214, "donald": [214, 255], "mundi": 214, "artifici": [214, 223], "intellig": [214, 232, 236, 297], "orlando": 214, "www2": 214, "duke": 214, "donaldlab": 214, "symbolicnumericalcomput": 214, "045": 214, "087": 214, "stiller96": 214, "stiller": 214, "cites": 214, "viewdoc": [214, 229], "590": 214, "2021": 214, "cohen93": [214, 215], "henri": 214, "olga": 215, "tausski": 215, "zimmer": 215, "pohst": 215, "articul": 215, "mathfrak": 215, "regul": 215, "alpha_m": 215, "round_two": 215, "prime_decomp": 215, "prime_valu": 215, "minimal_polynomi": 215, "field_isomorph": 215, "nilrad": 215, "z_k": 215, "zk": 215, "ordinarili": 215, "503": 215, "r760": 215, "r761": 215, "powerbasisel": 215, "ramif": 215, "as_submodul": 215, "bundl": 215, "test_factor": 215, "deliber": 215, "is_inert": 215, "inert": [215, 236], "reduce_anp": 215, "reduce_alg_num": 215, "field_gen": 215, "just_gen": 215, "reagent": 215, "kummer": 215, "1847": 215, "ueber": 215, "zerlegung": 215, "crell": 215, "r762": 215, "poly_from_expr": [215, 216], "tschirnhausen": 215, "maxtriesexcept": 215, "g_name": 215, "_minpoly_compos": 215, "stall": 215, "alli": 215, "monomorph": 215, "alpha_i": 215, "alpha_n": 215, "lincomb": 215, "primtiiv": 215, "meanwhil": 215, "moduleel": 215, "powerbasi": 215, "submodule_from_matrix": 215, "ancestor": 215, "to_col": 215, "nca": 215, "circumst": [215, 291], "_mult_tab": 215, "successfulli": 215, "moduleendomorph": 215, "innerendomorph": 215, "endomorphismr": 215, "spec": [215, 216], "i_n": [215, 216, 241], "include_self": 215, "basis_el": 215, "element_from_r": 215, "endomorphism_r": 215, "is_compat_col": 215, "mult_tab": 215, "mult": 215, "closurefailur": 215, "nearest_common_ancestor": 215, "number_field": 215, "power_basis_ancestor": 215, "incom": [215, 240], "halv": 215, "submodule_from_gen": 215, "over_power_basi": 215, "starts_with_un": 215, "hnf_modulu": 215, "whole_submodul": 215, "element_from_anp": 215, "element_from_alg_num": 215, "element_from_poli": 215, "qq_matrix": 215, "basis_element_pullback": 215, "discard_befor": 215, "structureerror": 215, "cohen00": 215, "make_mod_elt": 215, "qq_col": 215, "from_int_list": 215, "is_compat": 215, "reduced_mod_p": 215, "to_ancestor": 215, "anc": 215, "to_par": 215, "to_anp": 215, "inner_endomorph": 215, "event": [215, 240], "find_min_poli": 215, "missingunityerror": 215, "is_int": 215, "get_num_denom": 215, "extract_fundamental_discrimin": 215, "r763": 215, "algintpow": 215, "zeta_pow": 215, "r764": 215, "coeff_search": 215, "supplement_a_subspac": 215, "v_n": 215, "w_r": 215, "w_j": 215, "u_j": 215, "r765": 215, "parallel_poly_from_expr": 216, "exprtool": 216, "gcd_list": 216, "lcm_list": 216, "destruct": 216, "2079": 216, "1401": 216, "2715": 216, "6720": 216, "1092": 216, "gff": 216, "check_sqf": 216, "count_root": 216, "ground_root": 216, "nroot": [216, 238], "4142": 216, "732": 216, "polyroot": 216, "r766": 216, "93ruffini_theorem": 216, "865": 216, "casu": 216, "irreducibili": 216, "r767": 216, "0365": 216, "33984": 216, "87636": 216, "casus_irreducibili": 216, "maxstep": 216, "cleanup": 216, "73205080756888": 216, "73205080756887729352744634151": 216, "nth_power_roots_poli": 216, "r_g": 216, "_signsimp": 216, "q_n": 216, "is_zero_dimension": [216, 239], "donal": 216, "230": [216, 238], "ec": 216, "em": 216, "dispersionset": 216, "gp": [216, 236], "free_symbols_in_domain": 216, "from_poli": 216, "get_domain": 216, "get_modulu": 216, "has_only_gen": 216, "vincent": [216, 258], "akrita": 216, "strzebonski": 216, "va": 216, "alkiviadi": 216, "panagioti": 216, "vigkla": 216, "265": 216, "279": 216, "polnomi": 216, "is_multivari": 216, "is_univari": 216, "ltrim": 216, "make_monic_over_integers_by_scaling_root": 216, "_only_": 216, "sturmian": 216, "subresultants_qq_zz": 216, "suffix": [216, 253], "_pg": 216, "_amv": 216, "rem_z": 216, "premultipli": 216, "rat_clear_denom": 216, "_ignor": 216, "retract": 216, "same_root": 216, "set_domain": 216, "set_modulu": 216, "termwis": 216, "fglm": 216, "r768": 216, "horner_schem": 216, "equispac": 216, "viet": 216, "itermonomi": 216, "min_degre": 216, "gib": 216, "monomial_kei": 216, "monomial_count": 216, "gradedlexord": 216, "reversedgradedlexord": 216, "clear_cach": 216, "_get_interv": 216, "165": [216, 240, 258], "169": 216, "eval_approx": 216, "evalf_r": 216, "eval_r": 216, "69629": 216, "71318": 216, "805": 216, "3275": 216, "65536": [216, 219, 220], "414645": 216, "131072": 216, "6545": 216, "104755": 216, "2097152": 216, "6634255": 216, "_all_root": 216, "use_cach": 216, "_complexes_index": 216, "_complexes_sort": 216, "_count_root": 216, "_ensure_complexes_init": 216, "_ensure_reals_init": 216, "_eval_is_imaginari": 216, "_get_complex": 216, "_get_complexes_sqf": 216, "currentfactor": 216, "_get_real": 216, "_get_reals_sqf": 216, "_get_root": 216, "_indexed_root": 216, "_new": 216, "_postprocess_root": 216, "_preprocess_root": 216, "heroic": [216, 238], "_real_root": 216, "_reals_index": 216, "_reals_sort": 216, "_refine_complex": 216, "_roots_trivi": 216, "_set_interv": 216, "return_mpmath": 216, "861136": 216, "86113631159405258": 216, "unread": [216, 256], "inexpress": 216, "unsolv": [216, 239], "r769": 216, "cubic_equ": 216, "trigonometric_and_hyperbolic_solut": 216, "specialpoli": 216, "swinnerton_dyer_poli": 216, "swinnerton": 216, "dyer": 216, "random_poli": 216, "gegenbau": [216, 220], "jakob": 216, "psum": 216, "3144337": 216, "r770": 216, "bernoulli_c_poli": 216, "reindex": 216, "swiss": 216, "knife": 216, "630": 216, "5124": 216, "12465": 216, "155": 216, "r771": 216, "partfrac": [216, 222], "undertermin": 216, "_w": [216, 227], "apart_list": 216, "assemble_partfrac_list": 216, "bunch": 216, "pfd": 216, "r772": 216, "partial_list": 216, "reassembl": 216, "pfda": 216, "r773": 216, "r774": 216, "r775": 216, "r776": 216, "r777": 216, "r778": 216, "r779": 216, "r780": 216, "widen": 217, "ring_seri": 217, "rs_sin": 217, "166666666666667": 217, "puiseux": 217, "rs_co": 217, "rs_tan": 217, "rs_exp": 217, "blazingli": 217, "promin": 217, "gradual": 217, "rs_": 217, "rs_log": 217, "rs_lambertw": 217, "rs_atan": 217, "arctang": 217, "rs_asin": 217, "_tan1": 217, "rs_cot": 217, "rs_cos_sin": 217, "rs_atanh": 217, "rs_sinh": 217, "rs_cosh": 217, "rs_tanh": 217, "rs_hadamard_exp": 217, "inver": 217, "rs_mul": 217, "rs_squar": 217, "rs_pow": 217, "rs_series_invers": 217, "rs_series_revers": 217, "a_kx_k": 217, "ar_i": 217, "ar_": 217, "ae": 217, "rs_trunc": 217, "rs_nth_root": 217, "160249952256379": 217, "44224957030741": 217, "rs_sub": 217, "rs_diff": 217, "rs_integr": 217, "rs_newton": 217, "rs_compose_add": 217, "r781": 217, "bostan": 217, "flajolet": 217, "schost": 217, "4579": 217, "institut": 217, "nation": 217, "recherch": 217, "informatiqu": 217, "automatiqu": 217, "rs_is_puiseux": 217, "rs_puiseux": 217, "rs_puiseux2": 217, "rs_series_from_list": 217, "concur": 217, "rs_fun": 217, "_tan": 217, "_nth": 217, "_root": 217, "_fun": 217, "mul_xin": 217, "pow_xin": 217, "_raw": 218, "sympy_eqs_to_r": 218, "eqs_r": 218, "eqs_to_matrix": 218, "eqs_coeff": 218, "eqs_rh": 218, "_solve_lin_si": 218, "_solve_lin_sys_compon": 218, "critiqu": 219, "wester1999": 219, "systemat": 219, "153": 219, "\u2124": [219, 220, 239, 298], "unm": 219, "driver": [220, 252], "adequ": 220, "emptyprint": 220, "_sympystr": 220, "mathml": 220, "inconveni": 220, "_print_": 220, "expr_class": 220, "hierarchi": [220, 240], "_print_rat": 220, "_print_numb": 220, "_print_atom": 220, "_print_bas": 220, "print_latex": 220, "mylatexprint": 220, "_print_deriv": 220, "print_my_latex": 220, "modop": 220, "subcompon": 220, "outermost": [220, 228, 232, 244], "modopmodewrong": 220, "modopnestedwrong": 220, "modopsettingswrong": 220, "subobject": 220, "infrastructur": [220, 237], "printer_exampl": 220, "set_global_set": 220, "stringpict": 220, "pretty_symbologi": 220, "prettyform": 220, "hline": 220, "vline": 220, "ascii": 220, "_pretti": 220, "use_unicode_sqrt_char": 220, "root_not": 220, "mat_symbol_styl": 220, "prettifi": 220, "bold": 220, "c89codeprint": 220, "print_ccod": 220, "tgamma": 220, "known_functions_c89": 220, "known_functions_c99": 220, "fmax": 220, "fmin": 220, "lgamma": 220, "indent_cod": 220, "cfunction_format": 220, "derefer": 220, "dereferenc": 220, "symbols_to_declar": 220, "not_supported_funct": 220, "code_text": 220, "m_sqrt2": 220, "math_macro": 220, "m_sqrt2l": 220, "cxx": 220, "cxx98codeprint": 220, "print_rcod": 220, "rcode": 220, "known_funct": 220, "_rcode": 220, "rfunction_str": 220, "rfunction_format": 220, "ifels": 220, "type_map": 220, "name_mangl": 220, "mangl": 220, "floor1": 220, "floor2": 220, "print_fcod": 220, "_fcode": 220, "conjg": 220, "32768": 220, "7182818284590452d0": 220, "1415926535897932d0": 220, "718281828459045235360287d0": 220, "141592653589793238462643d0": 220, "869604401089358618834491d0": 220, "mygamma": 220, "allow_unknown_funct": 220, "smtlib": 220, "smtlibprint": 220, "symbol_t": 220, "_smtlib": 220, "_default_set": 220, "known_const": 220, "ite": 220, "known_typ": 220, "smtlib_cod": 220, "auto_assert": 220, "auto_declar": 220, "prefix_express": 220, "suffix_express": 220, "log_warn": 220, "booleanfunct": 220, "dreal": 220, "14159": 220, "my_smt_variable_for_pi": 220, "postfix": [220, 258], "riski": 220, "sound": [220, 297], "pw": 220, "pythontyp": 220, "smt_builtin_func": 220, "existing_smtlib_fcn": 220, "user_def_func": 220, "fun": [220, 237, 290], "coshintegr": 220, "cosintegr": 220, "expintegralei": 220, "factorialpow": 220, "heavisidetheta": 220, "sinhintegr": 220, "sinintegr": 220, "arccosh": 220, "arccoth": 220, "arcsinh": 220, "arctanh": 220, "dirichleteta": 220, "gegenbauerc": 220, "hypergeometricpfq": 220, "sphericalbesselj": 220, "logintegr": 220, "lucasl": 220, "mathieu": 220, "riemann_xi": 220, "riemannxi": 220, "stieltjesgamma": 220, "sphericalbess": 220, "mcodeprint": 220, "_mcode": 220, "mcode": 220, "maplecodeprint": 220, "_mapl": 220, "maple_cod": 220, "print_maple_cod": 220, "javascriptcodeprint": 220, "_javascript": 220, "js_function_str": 220, "known_fcns_src1": 220, "known_fcns_src2": 220, "conj": 220, "juliacodeprint": 220, "_julia": 220, "harmless": [220, 293], "existing_julia_fcn": 220, "coshint": 220, "cosint": 220, "sinhint": 220, "sinint": 220, "logint": 220, "gammaln": 220, "octavecodeprint": 220, "_octav": 220, "recip": [220, 258], "powf": 220, "signum": 220, "rustcodeprint": 220, "_rust_cod": 220, "7_f64": 220, "_aesara": 220, "tensorvari": 220, "floatx": 220, "squeez": 220, "dim_handl": 220, "gtkmathview": 220, "widget": 220, "print_gtk": 220, "libgtkmathview": 220, "start_view": 220, "_lambdacod": 220, "accepted_latex_funct": 220, "parenthesize_sup": 220, "fold_frac_pow": 220, "fold_func_bracket": 220, "fold_short_frac": 220, "inv_trig_styl": 220, "itex": 220, "ln_notat": 220, "long_frac_ratio": 220, "mat_delim": 220, "mat_str": 220, "mul_symbol": 220, "symbol_nam": 220, "gothic_re_im": 220, "decimal_separ": 220, "diff_oper": 220, "smallmatrix": [220, 291], "amsmath": 220, "fracton": 220, "semicolon": 220, "monospac": 220, "mathtt": 220, "mathml2": 220, "mathmlprinterbas": 220, "mathmlcontentprint": 220, "mathmlpresentationprint": 220, "chapter4": 220, "_mathml_cont": 220, "mathml_tag": 220, "chapter3": 220, "_mathml_present": 220, "utf": 220, "mul_symbol_mathml_numb": 220, "xb7": 220, "print_mathml": [220, 296], "mrow": 220, "mpmathprint": 220, "fully_qualified_modul": 220, "print_python": 220, "textual": 220, "reprprint": 220, "_sympyrepr": 220, "reprifi": 220, "sympy_integ": 220, "displayhook": [220, 251], "pprint_nod": 220, "nb2": 220, "print_nod": 220, "asssumpt": 220, "determinisit": 220, "backtrac": 220, "print_tre": 220, "outputbuff": 220, "dvioption": 220, "outputtexfil": 220, "extra_preambl": 220, "latex_set": 220, "postscript": 220, "tex": 220, "eulervm": 220, "sty": 220, "debian": 220, "ubuntu": 220, "unset": [220, 232], "gimp": 220, "evinc": 220, "kdvi": 220, "xdvi": 220, "xdg": 220, "system_default_view": 220, "bytesio": 220, "usepackag": 220, "amsfont": 220, "renewcommand": 220, "popen": 220, "phidd": 220, "bitmap": 220, "split_super_sub": 220, "var_sub1__sup_sub2": 220, "assignmenterror": 220, "bitwiseand": 220, "bitwiseor": 220, "bitwisexor": 220, "precedence_valu": 220, "kroneckerproduct": 220, "tensadd": [220, 246], "tensmul": [220, 246], "precedence_funct": 220, "precedence_float": 220, "precedence_fracel": 220, "precedence_integ": 220, "precedence_mul": 220, "precedence_polyel": 220, "precedence_r": 220, "precedence_unevaluatedexpr": 220, "databas": [220, 230], "pretty_use_unicod": 220, "pretty_try_use_unicod": 220, "xstr": 220, "greek_lett": 220, "digit_2txt": 220, "ONE": 220, "seven": 220, "symb_2txt": 220, "parenthesi": [220, 244], "\u2080": 220, "\u2081": 220, "\u2082": 220, "\u2084": 220, "\u2085": 220, "\u2086": 220, "\u2087": 220, "\u2088": 220, "\u2089": 220, "\u2090": 220, "\u1d66": 220, "\u1d6a": 220, "\u2091": 220, "\u1d67": 220, "\u2095": 220, "\u1d62": 220, "\u2096": 220, "\u2097": 220, "\u2098": 220, "\u2099": 220, "\u2092": 220, "\u209a": 220, "\u1d69": 220, "\u1d63": 220, "\u1d68": 220, "\u209b": 220, "\u209c": 220, "\u1d64": 220, "\u1d65": 220, "\u2093": 220, "\u2070": 220, "\u00b9": 220, "\u00b2": 220, "\u00b3": 220, "\u2074": 220, "\u2075": 220, "\u2076": 220, "\u2077": 220, "\u2078": 220, "\u2079": 220, "\u2071": 220, "\u207f": 220, "xobj": 220, "vobj": 220, "hobj": 220, "vf": 220, "\u00bd": 220, "\u2153": 220, "\u00bc": 220, "\u2155": 220, "\u2159": 220, "\u215b": 220, "\u2154": 220, "\u2156": 220, "\u00be": 220, "\u2157": 220, "\u215c": 220, "\u2158": 220, "\u215a": 220, "\u215d": 220, "\u215e": 220, "xsym": 220, "symbologi": 220, "atoms_t": 220, "\u2102": [220, 298], "emptysequ": [220, 226], "\u2115": 220, "\u2115\u2080": 220, "\u211d": [220, 298], "symmetricdiffer": [220, 228, 239], "pretty_atom": 220, "atom_nam": 220, "pretty_symbol": 220, "symb_nam": 220, "bold_nam": 220, "stylis": 220, "_print_meijerg": 220, "_print_hyp": 220, "jurjen": 220, "bo": 220, "hate": 220, "spammer": 220, "pietjepuk314": 220, "oc": [220, 271], "oohai": 220, "gedg": 220, "mun": 220, "terminal_str": 220, "baselin": 220, "leftslash": 220, "slash": [220, 251], "paren": 220, "ifascii_nougli": 220, "line_break": 220, "ugli": 220, "terminal_width": 220, "maxdepth": 220, "labelfunc": 220, "digraph": [220, 258, 296], "rankdir": [220, 296], "_sparse_": 221, "flavor": 221, "________": [221, 240, 258], "x\u2080": 221, "greatli": 221, "numbered_symbol": [221, 232, 236, 258], "postprocessor": [221, 232], "reduced_expr": [221, 232], "formalpowerseri": 222, "coeff_bel": 222, "formalpowerseriescompos": 222, "r782": 222, "comtet": 222, "loui": 222, "reidel": 222, "1974": 222, "formalpowerseriesinvers": 222, "r783": 222, "upto": [222, 227, 236], "formalpowerseriesproduct": 222, "rational_algorithm": 222, "compute_fp": 222, "hyper_algorithm": 222, "omposit": 222, "bell_seq": 222, "finiteformalpowerseri": 222, "rational_independ": 222, "ra": 222, "admiss": [222, 225], "r784": 222, "r785": 222, "simpled": 222, "exp_r": 222, "explik": 222, "hyper_r": 222, "rsolve_hypergeometr": 222, "r786": 222, "r787": 222, "solve_d": 222, "fourierseri": 223, "scalex": 223, "shiftx": 223, "sigma_approxim": 223, "gibb": 223, "bigl": 223, "bigr": 223, "lanczo": 223, "r788": 223, "gibbs_phenomenon": 223, "r789": 223, "sawtooth": 223, "bn": 223, "r790": 223, "limitseq": 225, "difference_delta": 225, "r791": 225, "differencedelta": 225, "limit_seq": [225, 227], "safeguard": 225, "r792": 225, "kauer": 225, "seqper": 226, "seqformula": 226, "seqbas": 226, "coeff_mul": 226, "find_linear_recurr": 226, "gfvar": 226, "seqadd": 226, "seqmul": 226, "_mul": 226, "recursiveseq": 226, "fib": 226, "invok": [227, 251, 252], "workhors": 227, "succ": [227, 240], "asymp": 227, "exposit": 227, "gloss": 227, "wsym": 227, "test_rewrite1": 227, "build_expression_tre": 227, "mrv_leadterm": 227, "e0": 227, "calculate_seri": 227, "limitinf": 227, "constantli": 227, "subsset": 227, "mrv_max1": 227, "mrv_max3": 227, "expsf": 227, "expsg": 227, "expsboth": 227, "do_sub": 227, "r793": 227, "limsup_": 227, "7048138294": 227, "7182818285": 227, "6349839002": 227, "6449340668": 227, "shank": 227, "6881721793": 227, "6931396564": 227, "6931471806": 227, "6931471805599453094172321215": 227, "r794": 227, "residue_theorem": 227, "neighborhood": 228, "rim": 228, "conditionset": [228, 239, 240, 298], "affirm": 228, "infimum": 228, "imageset": [228, 239, 298], "is_clos": 228, "closed": 228, "is_disjoint": 228, "r795": 228, "disjoint_set": 228, "is_open": 228, "is_proper_subset": 228, "is_proper_superset": 228, "left_open": 228, "is_superset": 228, "isdisjoint": 228, "issubset": 228, "issuperset": 228, "productset": [228, 239], "powerset": 228, "fancyset": 228, "complexregion": [228, 239], "disjointunion": 228, "lebesgu": 228, "r796": 228, "power_set": 228, "symmetric_differ": 228, "r797": 228, "right_open": 228, "mpi": 228, "r798": 228, "interval_": 228, "as_rel": 228, "is_left_unbound": 228, "is_right_unbound": 228, "r799": 228, "r800": 228, "union_": 228, "28set_theori": 228, "r801": 228, "intersection_": 228, "coin": [228, 240], "r802": 228, "cartesian_product": 228, "is_iter": 228, "r803": 228, "complementset": 228, "r804": 228, "disjoint_union": 228, "r805": 228, "empty_set": 228, "r806": 228, "universal_set": 228, "flambda": 228, "square_iter": 228, "base_set": 228, "cartesiancomplexregion": 228, "polarcomplexregion": 228, "unit_disk": 228, "upper_half_unit_disk": 228, "a_interv": 228, "b_interv": 228, "from_real": 228, "pset": 228, "rset": 228, "thetaset": 228, "upper_half_plan": 228, "normalize_theta_set": 228, "r807": 228, "r808": 228, "axiom_of_power_set": 228, "sin_sol": 228, "r809": 228, "element_": 228, "varnoth": 228, "tr0": 229, "tr1": 229, "tr2": 229, "tr2i": 229, "tr3": 229, "tr4": 229, "tr5": 229, "tr6": 229, "tr7": 229, "tr8": 229, "tr9": 229, "tr10": 229, "tr10i": 229, "tr11": 229, "tr12": 229, "tr12i": 229, "tr13": 229, "trmorri": 229, "tr14": 229, "tr15": 229, "tr16": 229, "tr22": 229, "tr111": 229, "ctr1": 229, "ctr4": 229, "rl1": 229, "rl2": 229, "deem": 229, "932": 229, "016": 229, "serendipit": 229, "dead": 229, "newa": 229, "lucki": 229, "sqt": 229, "_tr56": 229, "un": [229, 230], "r810": 229, "morri": 229, "27s_law": 229, "trpower": 229, "r811": 229, "list_of_trigonometric_ident": 229, "reduction_formula": 229, "ctr2": 229, "ctr3": 229, "r812": 229, "s0895717706001609": 229, "dimitar": 229, "vlahovski": 229, "technolog": 229, "xiuqin": 229, "zhong": 229, "zhenb": 229, "zeng": 229, "1169": 229, "1177": 229, "657": 229, "2478": 229, "sosmath": 229, "trig5": 229, "symplifi": [230, 232], "roach1996": 230, "roach1997": 230, "p_q": 230, "reachabl": [230, 240], "f_q": 230, "undo": [230, 297], "whenc": 230, "game": 230, "twofold": 230, "incongru": 230, "wlog": 230, "alpha_r": 230, "beta_r": 230, "blindli": 230, "messi": 230, "k_u": 230, "l_v": 230, "k_j": 230, "c_w": 230, "r_j": 230, "l_u": 230, "res_": 230, "delta_i": 230, "add_formula": 230, "addb": 230, "sum_0": 230, "test_hyperexpand": 230, "test_formula": 230, "suboptim": 230, "imath": 230, "b1prime": 230, "vital": 230, "308": 230, "hongguang": [231, 277], "fu": [231, 232, 277], "logcombin": [232, 236, 239], "my_measur": 232, "nthroot": 232, "max_len": 232, "surd": 232, "kroneckersimp": 232, "besselsimp": 232, "strigonometr": 232, "399": 232, "hypersimilar": 232, "rational_convers": 232, "base10": 232, "6004799503160655": 232, "eq_x": 232, "max_term": 232, "collect_sqrt": 232, "polish": 232, "rad_ration": 232, "collect_const": 232, "rcollect": 232, "ratsimpmodprim": 232, "r813": 232, "pearc": 232, "1145768": 232, "1145809": 232, "trigsimp_groebn": 232, "bb1": 232, "be1": 232, "bb2": 232, "be2": 232, "bei": 232, "max_it": 232, "unrad": [232, 238], "r814": 232, "20210806201615": 232, "fagin": 232, "symb85": 232, "r815": 232, "cybertest": 232, "opt_sub": 232, "as_unevaluated_bas": 232, "tree_cs": 232, "hyperegeometr": 232, "epathtool": 232, "epath": 232, "ebnf": 232, "za": [232, 240], "xml": 232, "xpath": 232, "hasattr": [232, 254], "beginn": [233, 235, 236, 238, 239, 298], "diophantu": 233, "mathematician": [233, 239], "citi": 233, "alexandria": 233, "father": 233, "hi": 233, "arithmetica": 233, "diop_solv": 233, "classify_diop": 233, "diop_linear": 233, "diop_quadrat": 233, "diop_ternary_quadrat": 233, "diop_ternary_quadratic_norm": 233, "diop_general_pythagorean": 233, "diop_general_sum_of_squar": 233, "diop_general_sum_of_even_pow": 233, "merge_solut": 233, "3y": 233, "9369318": 233, "find_dn": 233, "diop_dn": 233, "transformation_to_dn": 233, "920": 233, "5y": 233, "BY": 233, "transformation_to_norm": 233, "t4": 233, "t5": 233, "sum_of_squar": 233, "providean": 233, "eqyptian": 233, "thilinaatsympi": 233, "andreescu": 233, "titu": 233, "andrica": 233, "dorin": 233, "cucurezeanu": 233, "ion": 233, "diophantineequ": 233, "alpertron": 233, "20160323033111": 233, "jpr2718": 233, "ax2p": 233, "permute_sign": [233, 258], "signed_permut": [233, 258], "_dict": 233, "base_solution_linear": 233, "r816": 233, "r817": 233, "pell": 233, "lmm": 233, "r818": 233, "393": 233, "13y": 233, "986": 233, "49299": 233, "1570": 233, "diop_bf_dn": 233, "robertson": 233, "20160323033128": 233, "cornacchia": 233, "r819": 233, "nitaj": 233, "r820": 233, "numbertheori": 233, "r821": 233, "r822": 233, "676": 233, "884": 233, "fxz": 233, "3xy": 233, "r823": 233, "fxy": 233, "gyz": 233, "hxz": 233, "r824": 233, "cremona": 233, "rusin": 233, "2x_": 233, "m4": 233, "general_sum_of_squar": 233, "8m": 233, "r825": 233, "2345": 233, "proofwiki": 233, "integer_as_sum_of_three_squar": 233, "general_sum_of_even_pow": 233, "power_represent": 233, "1729": 233, "stopiter": 233, "sum_of_three_squar": 233, "r826": 233, "44542": 233, "207": 233, "schorn": 233, "sum_of_four_squar": 233, "3456": 233, "1294585930293": 233, "2161": 233, "1137796": 233, "r827": 233, "sum_of_pow": 233, "evenli": 233, "var_t": 233, "pqa": 233, "r828": 233, "ur": 233, "dv": 233, "vr": 233, "r829": 233, "parametrize_ternary_quadrat": 233, "r830": 233, "nigel": 233, "ldescent": 233, "4x": [233, 239, 286], "7y": 233, "5x": 233, "r831": 233, "r832": 233, "nottingham": 233, "worktrib": 233, "1023265": 233, "gaussian_reduc": 233, "r833": 233, "20201021115213": 233, "cuhk": 233, "wkshum": 233, "404": 233, "r834": 233, "holzer": 233, "mordel": 233, "r835": 233, "r836": 233, "prime_as_sum_of_two_squar": 233, "r837": 233, "sqf_normal": 233, "r838": 233, "legrang": 233, "csusm": 233, "aitken_html": 233, "diophantinesolutionset": 233, "symbols_seq": 233, "dict_iter": 233, "diophantineequationtyp": 233, "binaryquadrat": 233, "r839": 233, "r840": 233, "inhomogeneousternaryquadrat": 233, "inhomogen": [233, 236, 238], "homogeneousternaryquadraticnorm": 233, "homogeneousternaryquadrat": 233, "inhomogeneousgeneralquadrat": 233, "homogeneousgeneralquadrat": 233, "generalsumofsquar": 233, "r841": 233, "generalpythagorean": 233, "cubicthu": 233, "thue": 233, "generalsumofevenpow": 233, "pde": [234, 236, 277], "subcategori": [235, 276], "solve_rational_inequ": 235, "solve_poly_inequ": 235, "reduce_rational_inequ": 235, "reduce_abs_inequ": 235, "solvifi": [235, 239], "autodetect": [236, 237], "odesimp": 236, "ode_ord": [236, 237, 238], "deutil": [236, 237], "best_hint": 236, "unevaluat": 236, "test_od": 236, "ode_": 236, "hintnam": [236, 237], "classify_sysod": 236, "almost_linear": 236, "dsolve_system": 236, "ode_hintnam": 236, "allhint": [236, 237], "tough": 236, "nth_linear_homogeneous_constant_coeff_integr": 236, "1st_linear": 236, "nth_linear": 236, "indep": 236, "indep_div_dep": 236, "undetermined_coeffici": 236, "_best": 236, "nth_algebra": 236, "1st_homogeneous_coeff_best": 236, "1st_homogeneous_coeff_subs_indep_div_dep": 236, "1st_homogeneous_coeff_subs_dep_div_indep": 236, "1st_power_seri": 236, "lie_group": 236, "nth_linear_constant_coeff_homogen": 236, "nth_linear_euler_eq_homogen": 236, "nth_algebraic_integr": 236, "1st_exact_integr": 236, "1st_linear_integr": 236, "bernoulli_integr": 236, "1st_homogeneous_coeff_subs_indep_div_dep_integr": 236, "1st_homogeneous_coeff_subs_dep_div_indep_integr": 236, "nth_linear_constant_coeff_undetermined_coeffici": 236, "nth_linear_constant_coeff_variation_of_paramet": 236, "nth_linear_constant_coeff_variation_of_parameters_integr": 236, "solve_for_func": [236, 237], "homogeneouscoeffsubsdepdivindep": 236, "homogeneouscoeffsubsindepdivdep": 236, "varepsilon": 236, "genform": [236, 237], "starrett": 236, "checkinfsol": 236, "constantsimp": 236, "symbolnam": 236, "startnumb": 236, "endnumb": 236, "renumb": 236, "absorpt": 236, "assist": 236, "constant_renumb": 236, "1st_rational_riccati": 236, "riccati_special_minus2": 236, "linear_coeffici": 236, "separable_reduc": 236, "nth_linear_euler_eq_nonhomogeneous_undetermined_coeffici": 236, "nth_linear_euler_eq_nonhomogeneous_variation_of_paramet": 236, "liouvil": 236, "2nd_linear_airi": 236, "2nd_linear_bessel": 236, "2nd_hypergeometr": 236, "2nd_hypergeometric_integr": 236, "nth_order_reduc": 236, "2nd_power_series_ordinari": 236, "2nd_power_series_regular": 236, "almost_linear_integr": 236, "linear_coefficients_integr": 236, "separable_reduced_integr": 236, "nth_linear_euler_eq_nonhomogeneous_variation_of_parameters_integr": 236, "liouville_integr": 236, "2nd_nonlinear_autonomous_conserv": 236, "2nd_nonlinear_autonomous_conserved_integr": 236, "newconst": 236, "ode_sol_simpl": 236, "trysolv": 236, "sola": 236, "solb": 236, "listofsolut": 236, "ode_problem": 236, "firstexact": 236, "exact_differential_equ": 236, "tenenbaum": 236, "dover": 236, "1963": 236, "homogeneouscoeffbest": 236, "ode_1st_homogeneous_coeff_best_integr": 236, "homogeneous_differential_equ": 236, "firstlinear": 236, "linear_differential_equ": 236, "order_equation_with_variable_coeffici": 236, "rationalriccati": 236, "atleast": 236, "riccati_equ": 236, "thieu": 236, "vo": 236, "risc_5387": 236, "phdthesisthieu": 236, "secondlinearairi": 236, "secondlinearbessel": 236, "math24": 236, "bernoulli_differential_equ": 236, "goldstein": 236, "braun": 236, "maplesoft": 236, "aspx": 236, "odeadvisor": 236, "riccatispeci": 236, "__________________": 236, "eqworld": 236, "ipmnet": 236, "ru": 236, "ode0106": 236, "ode0123": 236, "nthlinearconstantcoeffhomogen": 236, "nth_linear_constant_coeff_homogeneous_integr": 236, "nonhomogeneous_equation_with_constant_coeffici": 236, "nthlinearconstantcoeffundeterminedcoeffici": 236, "method_of_undetermined_coeffici": 236, "221": 236, "nthlinearconstantcoeffvariationofparamet": 236, "variation_of_paramet": 236, "planetmath": 236, "variationofparamet": 236, "nthlineareulereqhomogen": 236, "equidimension": 236, "nth_linear_euler_eq_homogeneous_integr": 236, "sollist": 236, "93euler_equ": 236, "bender": 236, "orszag": 236, "scientist": 236, "nthlineareulereqnonhomogeneousvariationofparamet": 236, "nthlineareulereqnonhomogeneousundeterminedcoeffici": 236, "nthalgebra": 236, "nthorderreduc": 236, "caught": 236, "fault": 236, "almostlinear": 236, "first_linear": 236, "joel": 236, "mose": 236, "stormi": 236, "decad": 236, "august": [236, 255], "558": 236, "linearcoeffici": 236, "separablereduc": 236, "liegroup": 236, "secondhypergeometr": 236, "2f1": 236, "1f1": 236, "0f1": 236, "liouvillian": 236, "pfq": 236, "chan": 236, "cheb": 236, "terrab": 236, "ode_1st_power_seri": 236, "travi": 236, "walker": 236, "ode_2nd_power_series_ordinari": 236, "lamar": 236, "seriessolut": 236, "simmon": 236, "176": 236, "ode_2nd_power_series_regular": 236, "lie_heuristic_abaco1_simpl": 236, "duart": 236, "da": 236, "mota": 236, "lie_heuristic_abaco1_product": 236, "roch": 236, "lie_heuristic_bivari": 236, "329": 236, "lie_heuristic_chi": 236, "lie_heuristic_abaco2_similar": 236, "lie_heuristic_function_sum": 236, "lie_heuristic_abaco2_unique_unknown": 236, "lie_heuristic_abaco2_unique_gener": 236, "lie_heuristic_linear": 236, "gy": 236, "bh": 236, "impract": 236, "riccati_norm": 236, "riccati_inverse_norm": 236, "riccati_reduc": 236, "construct_c": 236, "construct_d": 236, "val_inf": 236, "valuat": 236, "rational_laurent_seri": 236, "compute_m_ybar": 236, "ybar": 236, "solve_aux_eq": 236, "numa": 236, "dena": 236, "numi": 236, "deni": 236, "remove_redundant_sol": 236, "sol1": 236, "sol2": 236, "get_gen_sol_from_part_sol": 236, "part_sol": 236, "haaheim": 236, "solve_riccati": 236, "gensol": 236, "_linear_2eq_order1_type6": 236, "_linear_2eq_order1_type7": 236, "fgp": 236, "bg": 236, "linear_ode_to_matrix": 236, "odeordererror": 236, "odenonlinearerror": 236, "eqs_mat": 236, "r842": 236, "matrix_differential_equ": 236, "canonical_od": 236, "canonical_eq": 236, "canonical_system": 236, "linodesolve_typ": 236, "linodesolv": 236, "type1": 236, "type2": 236, "type3": 236, "type4": 236, "type5": 236, "type6": 236, "type_of_equ": 236, "a_t": 236, "a_non_commut": 236, "matrix_exp_jordan_form": 236, "expj": 236, "matrix_exp": 236, "defect": 236, "p_invers": 236, "r843": 236, "defective_matrix": 236, "r844": 236, "r845": 236, "jordan_normal_form": 236, "comupt": 236, "r846": 236, "r847": 236, "matrix_exponenti": 236, "antiderv": 236, "subscheck": 236, "system_info": 236, "sol_vector": 236, "sol_vector_evalu": 236, "_nonlinear_2eq_order1_type1": 236, "_nonlinear_2eq_order1_type2": 236, "_nonlinear_2eq_order1_type3": 236, "autonom": 236, "_nonlinear_2eq_order1_type4": 236, "_nonlinear_2eq_order1_type5": 236, "clairaut": 236, "envelop": 236, "_nonlinear_3eq_order1_type1": 236, "enspac": [236, 239], "sysod": 236, "sode0401": 236, "_nonlinear_3eq_order1_type2": 236, "sode0402": 236, "_nonlinear_3eq_order1_type3": 236, "sode0404": 236, "_nonlinear_3eq_order1_type4": 236, "sode0405": 236, "_nonlinear_3eq_order1_type5": 236, "sode0406": 236, "_handle_integr": 236, "gather": 236, "unhind": 236, "wolphramalpha": 236, "detool": 236, "hint_integr": 236, "alphanumer": 236, "hinder": 236, "matching_hint": 236, "matchdict": 236, "1st_homogeneous_coeff": 236, "your_hint": 236, "pde_separ": 237, "uxt": 237, "pde_separate_add": 237, "pde_separate_mul": 237, "uxi": 237, "pdsolv": 237, "solvefun": 237, "classify_pd": 237, "test_pd": 237, "pde_hintnam": 237, "ux": 237, "1st_linear_constant_coeff_homogen": 237, "checkpdesol": 237, "_preprocess": 237, "inabl": 237, "_xi_1": 237, "pde_1st_linear_constant_coeff_homogen": 237, "viktor": 237, "grigoryan": 237, "124a": 237, "pde_1st_linear_constant_coeff": 237, "substack": 237, "1st_linear_constant_coeff_integr": 237, "pde_1st_linear_variable_coeff": 237, "du": 237, "inspir": [237, 293], "pde_hint": 237, "checksol": 238, "ect": 238, "attain": [238, 270], "star": [238, 258], "052": 238, "cov": 238, "pval": 238, "xval": 238, "rsolv": 238, "solve_linear": 238, "solve_linear_system": 238, "msymbol": 238, "solve_linear_system_lu": 238, "solve_undetermined_coeff": 238, "equ": 238, "73908513321516064165531208767387340401341175890076": 238, "steep": 238, "39267e": 238, "1684e": 238, "588469032184": 238, "315": 238, "730061685774": 238, "46792545969349058": 238, "inconclus": 238, "init": 238, "dissimilar": 238, "v_0": 238, "n_m": 238, "v_m": 238, "rsolve_poli": 238, "rsolve_ratio": 238, "r848": 238, "levelt": 238, "290": [238, 268], "296": 238, "r849": 238, "r850": 238, "r851": 238, "289": 238, "alembertian": 238, "r852": 238, "r853": 238, "polysi": 238, "solve_triangul": 238, "kalkbrenn": 238, "patrizia": 238, "teo": 238, "aaecc": 238, "argand": 239, "uncount": 239, "bizarr": 239, "her": 239, "sol_f": 239, "solveset_r": 239, "solveset_complex": 239, "methodologi": [239, 290], "_solve_real_trig": 239, "invert_r": 239, "invert_complex": 239, "_solve_rad": 239, "_solve_ab": 239, "_solve_as_r": 239, "_solve_as_poly_r": 239, "_solve_as_poly_complex": 239, "_solve_as_poli": 239, "gsoc": 239, "7abb76ffed50425299b9065129ae87261668a0f7": 239, "iamit": 239, "2948": 239, "6659": 239, "7523": 239, "sibx0afl3q": 239, "9696": 239, "inftyright": 239, "nright": 239, "0right": 239, "domain_check": 239, "3z": 239, "9z": 239, "nonlinearerror": 239, "cccc": 239, "eq3": 239, "eq4": 239, "391": 239, "_solve_system": 239, "_solve_using_known_valu": 239, "_transolv": 239, "_tsolv": 239, "tsolv": 239, "outright": 239, "interf": 239, "add_typ": 239, "_is_exponenti": 239, "new_eq": 239, "_solve_exponenti": 239, "_is_class": 239, "_solve_class": 239, "_solve_expo": 239, "9x": 239, "solve_expo": 239, "log_b": 239, "_solve_logarithm": 239, "solve_log": 239, "_is_logarithm": 239, "prebuilt": 240, "finiterv": 240, "varianc": 240, "dice": 240, "continuousrv": 240, "continuousdistributionhandmad": 240, "dist": 240, "discreterv": 240, "discretedistributionhandmad": 240, "pmf": 240, "finitedistributionhandmad": 240, "discreteuniform": 240, "randomsymbol": 240, "r854": 240, "discrete_uniform_distribut": 240, "r855": 240, "discreteuniformdistribut": 240, "d6": 240, "diedistribut": 240, "toss": 240, "r856": 240, "bernoulli_distribut": 240, "r857": 240, "bernoullidistribut": 240, "unfair": 240, "r858": 240, "coin_flip": 240, "binomialdistribut": 240, "r859": 240, "binomial_distribut": 240, "r860": 240, "betabinomi": 240, "r861": 240, "r862": 240, "betabinomialdistribut": 240, "popul": 240, "marbl": 240, "r863": 240, "hypergeometric_distribut": 240, "r864": 240, "hypergeometricdistribut": 240, "700000000000000": 240, "r865": 240, "rademacher_distribut": 240, "r866": 240, "geometric_distribut": 240, "r867": 240, "geometricdistribut": 240, "r868": 240, "hermite_distribut": 240, "poisson": 240, "r869": 240, "poisson_distribut": 240, "r870": 240, "poissondistribut": 240, "r871": 240, "logarithmic_distribut": 240, "r872": 240, "logarithmicdistribut": 240, "negativebinomi": 240, "r873": 240, "negative_binomial_distribut": 240, "r874": 240, "negativebinomialdistribut": 240, "skellam": 240, "mu1": 240, "mu2": 240, "mu_1": 240, "mu_2": 240, "i_k": 240, "r875": 240, "skellam_distribut": 240, "yulesimon": 240, "yule": 240, "simon": 240, "r876": 240, "93simon_distribut": 240, "8100": 240, "r877": 240, "zeta_distribut": 240, "cdf": 240, "r878": 240, "arcsine_distribut": 240, "benini": 240, "r879": 240, "benini_distribut": 240, "r880": 240, "v8": 240, "beninidistribut": 240, "r881": 240, "beta_distribut": 240, "r882": 240, "betadistribut": 240, "betanoncentr": 240, "noncentr": 240, "r883": 240, "noncentral_beta_distribut": 240, "r884": 240, "noncentralbetadistribut": 240, "betaprim": 240, "r885": 240, "beta_prime_distribut": 240, "r886": 240, "betaprimedistribut": 240, "boundedpareto": 240, "pareto": 240, "r887": 240, "pareto_distribut": 240, "bounded_pareto_distribut": 240, "r888": 240, "cauchy_distribut": 240, "r889": 240, "cauchydistribut": 240, "r890": 240, "chi_distribut": 240, "r891": 240, "chidistribut": 240, "chinoncentr": 240, "r892": 240, "noncentral_chi_distribut": 240, "chisquar": 240, "r893": 240, "chi_squared_distribut": 240, "r894": 240, "squareddistribut": 240, "dagum": 240, "r895": 240, "dagum_distribut": 240, "davi": 240, "radiat": 240, "r896": 240, "davis_distribut": 240, "r897": 240, "davisdistribut": 240, "erlang": 240, "r898": 240, "erlang_distribut": 240, "r899": 240, "erlangdistribut": 240, "exgaussian": 240, "emg": 240, "r900": 240, "exponentially_modified_gaussian_distribut": 240, "quantil": 240, "r901": 240, "exponential_distribut": 240, "r902": 240, "exponentialdistribut": 240, "fdistribut": 240, "______________________________": 240, "r903": 240, "r904": 240, "fisherz": 240, "fisher": 240, "2d_1": 240, "d_1z": 240, "d_1e": 240, "r905": 240, "27s_z": 240, "r906": 240, "fishersz": 240, "frechet": 240, "r907": 240, "a9chet_distribut": 240, "r908": 240, "gamma_distribut": 240, "r909": 240, "gammadistribut": 240, "gammainvers": 240, "r910": 240, "gompertz": 240, "r911": 240, "gompertz_distribut": 240, "gumbel": 240, "dfrac": 240, "r912": 240, "gumbeldistribut": 240, "r913": 240, "gumbel_distribut": 240, "r914": 240, "20200628222206": 240, "mathwav": 240, "easyfit": 240, "gumbel_max": 240, "r915": 240, "20200628222212": 240, "gumbel_min": 240, "kumaraswami": 240, "r916": 240, "kumaraswamy_distribut": 240, "r917": 240, "laplace_distribut": 240, "r918": 240, "laplacedistribut": 240, "r919": 240, "a9vy_distribut": 240, "r920": 240, "levydistribut": 240, "logist": 240, "r921": 240, "logistic_distribut": 240, "r922": 240, "logisticdistribut": 240, "loglogist": 240, "unimod": 240, "r923": 240, "lognorm": 240, "r924": 240, "r925": 240, "lognormaldistribut": 240, "lomax": 240, "r926": 240, "lomax_distribut": 240, "maxwel": 240, "r927": 240, "maxwell_distribut": 240, "r928": 240, "maxwelldistribut": 240, "moyal": 240, "r929": 240, "moyaldistribut": 240, "r930": 240, "rice": 240, "dobelman": 240, "textfil": 240, "distributionshandbook": 240, "nakagami": 240, "r931": 240, "nakagami_distribut": 240, "marginal_distribut": 240, "r932": 240, "normal_distribut": 240, "r933": 240, "normaldistributionfunct": 240, "xm": 240, "x_m": 240, "r934": 240, "r935": 240, "paretodistribut": 240, "powerfunct": 240, "r936": 240, "20200204081320": 240, "power_func": 240, "quadraticu": 240, "r937": 240, "quadratic_distribut": 240, "raisedcosin": 240, "r938": 240, "raised_cosine_distribut": 240, "r939": 240, "rayleigh_distribut": 240, "r940": 240, "rayleighdistribut": 240, "r941": 240, "reciprocal_distribut": 240, "studentt": 240, "r942": 240, "student_t": 240, "r943": 240, "studentst": 240, "shiftedgompertz": 240, "r944": 240, "shifted_gompertz_distribut": 240, "r945": 240, "trapezoidal_distribut": 240, "r946": 240, "triangular_distribut": 240, "r947": 240, "triangulardistribut": 240, "r948": 240, "uniform_distribution_": 240, "28continu": 240, "r949": 240, "uniformdistribut": 240, "uniformsum": 240, "irwin": 240, "r950": 240, "uniform_sum_distribut": 240, "r951": 240, "uniformsumdistribut": 240, "vonmis": 240, "mise": 240, "i_0": 240, "r952": 240, "von_mises_distribut": 240, "r953": 240, "vonmisesdistribut": 240, "wald": 240, "gaussianinvers": 240, "r954": 240, "inverse_gaussian_distribut": 240, "r955": 240, "inversegaussiandistribut": 240, "weibul": 240, "geq0": 240, "r956": 240, "weibull_distribut": 240, "r957": 240, "weibulldistribut": 240, "wignersemicircl": 240, "semicircl": 240, "frac2": 240, "r958": 240, "wigner_semicircle_distribut": 240, "r959": 240, "wignerssemicirclelaw": 240, "jointrv": 240, "_set": 240, "multivariatenorm": 240, "noninvert": 240, "ob": 240, "r960": 240, "multivariate_normal_distribut": 240, "multivariatelaplac": 240, "r961": 240, "multivariate_laplace_distribut": 240, "generalizedmultivariateloggamma": 240, "joint_rv_typ": 240, "gd": 240, "y_3": 240, "gmvlg": 240, "generalizedmultivariateloggammaomega": 240, "r962": 240, "generalized_multivariate_log": 240, "r963": 240, "234137346_on_a_multivariate_log": 240, "gamma_distribution_and_the_use_of_the_distribution_in_the_bayesian_analysi": 240, "correl": 240, "gmvlgo": 240, "r964": 240, "r965": 240, "r966": 240, "multinomial_distribut": 240, "r967": 240, "multinomialdistribut": 240, "multivariatebeta": 240, "r968": 240, "dirichlet_distribut": 240, "r969": 240, "dirichletdistribut": 240, "multivariateewen": 240, "ewen": 240, "r970": 240, "27s_sampling_formula": 240, "r971": 240, "280311472_the_ubiquitous_ewens_sampling_formula": 240, "multivariatet": 240, "negativemultinomi": 240, "n_c": 240, "r972": 240, "negative_multinomial_distribut": 240, "r973": 240, "normalgamma": 240, "r974": 240, "discretemarkovchain": 240, "state_spac": 240, "trans_prob": 240, "markov": 240, "characteris": 240, "transitionmatrixof": 240, "transition_prob": 240, "sunni": 240, "cloudi": 240, "raini": 240, "randomindexedsymbol": 240, "409": 240, "6963328": 240, "3096": 240, "query_gt": 240, "64705": 240, "r975": 240, "markov_chain": 240, "time_markov_chain": 240, "r976": 240, "20201230182007": 240, "dartmouth": 240, "teaching_aid": 240, "books_articl": 240, "probability_book": 240, "chapter11": 240, "canonical_form": 240, "transient": 240, "p_new": 240, "new_matrix": 240, "communication_class": 240, "r977": 240, "onlinelibrari": 240, "wilei": 240, "1002": 240, "9780470316887": 240, "app1": 240, "r978": 240, "columbia": 240, "ww2040": 240, "6711f12": 240, "lect1023big": 240, "is_recurr": 240, "tarjan": [240, 258], "r979": 240, "20220207032113": 240, "4701sum07": 240, "4701": 240, "mcii": 240, "r980": 240, "ceca": 240, "clemson": 240, "shierd": 240, "shier": 240, "r981": 240, "ujcont": 240, "uj": 240, "esploro": 240, "graduat": 240, "999849107691": 240, "r982": 240, "econ": 240, "dtmc": 240, "reccur": 240, "r983": 240, "absorbing_markov_chain": 240, "r984": 240, "brandei": 240, "igusa": 240, "math56as08": 240, "math56a_s08_notes015": 240, "fixed_row_vector": 240, "stationary_distribut": 240, "fundamental_matrix": 240, "r985": 240, "lip": 240, "limiting_distribut": 240, "condition_set": 240, "wm": 240, "r986": 240, "probabilitycours": 240, "11_2_6_stationary_and_limiting_distribut": 240, "r987": 240, "20210508104430": 240, "galton": 240, "uchicago": 240, "yibi": 240, "stat317": 240, "lecture4_6up": 240, "continuousmarkovchain": 240, "gen_mat": 240, "generator_matrix": 240, "45279": 240, "58602": 240, "37933": 240, "34211": 240, "7143": 240, "4002723175": 240, "6832579186": 240, "r988": 240, "r989": 240, "biu": 240, "il": 240, "amirgi": 240, "ctmcnote": 240, "bernoulliprocess": 240, "joint_distribut": 240, "jointdistributionhandmad": 240, "r990": 240, "bernoulli_process": 240, "r991": 240, "mathc": 240, "clarku": 240, "djoyc": 240, "ma217": 240, "given_condit": 240, "poissonprocess": 240, "648": 240, "r992": 240, "11_0_0_intro": 240, "r993": 240, "poisson_point_process": 240, "wiener": 240, "brownian": 240, "scottish": 240, "botanist": 240, "r994": 240, "11_4_0_brownian_motion_wiener_process": 240, "r995": 240, "wiener_process": 240, "gammaprocess": 240, "jump": [240, 297], "472": 240, "r996": 240, "gamma_process": 240, "matrixgamma": 240, "scale_matrix": 240, "r997": 240, "matrix_gamma_distribut": 240, "wishart": 240, "r998": 240, "wishart_distribut": 240, "matrixnorm": 240, "location_matrix": 240, "scale_matrix_1": 240, "scale_matrix_2": 240, "r999": 240, "matrix_normal_distribut": 240, "compound_rv": 240, "compounddistribut": 240, "crv_type": 240, "r1000": 240, "compound_probability_distribut": 240, "numsampl": 240, "evaluate_integr": 240, "r1001": 240, "entropy_": 240, "28information_theori": 240, "r1002": 240, "crmarsh": 240, "charles_marsh_continuous_entropi": 240, "r1003": 240, "entropypost": 240, "cexpr": 240, "coskew": 240, "sigma_": 240, "r1004": 240, "r1005": 240, "probability_distribut": 240, "randomst": 240, "die_rol": 240, "samp": 240, "pspace": 240, "samp_list": 240, "sam": 240, "42519758": 240, "40207856": 240, "94991743": 240, "85819627": 240, "83403519": 240, "9412172": 240, "85768055": 240, "38954165": 240, "11163337": 240, "3176591": 240, "79115232": 240, "63232916": 240, "01747268": 240, "96716083": 240, "sampling_p": 240, "sampling_": 240, "factorial_mo": 240, "r1006": 240, "r1007": 240, "factorialmo": 240, "kurtosi": 240, "outlier": 240, "sigma_x": 240, "r1008": 240, "r1009": 240, "asymmetri": 240, "pearson": 240, "sampling_dens": 240, "centralmo": 240, "cmoment": 240, "expectationmatrix": 240, "randommatrixsymbol": 240, "n11": 240, "n12": 240, "n21": 240, "n22": 240, "variancematrix": 240, "crosscovariancematrix": 240, "randomdomain": 240, "singledomain": 240, "singlepspac": 240, "productdomain": 240, "productpspac": 240, "conditionaldomain": 240, "frv": 240, "finitedomain": 240, "finitepspac": 240, "crv": 240, "continuousdomain": 240, "continuouspspac": 240, "diepspac": 240, "singlefinitepspac": 240, "normalpspac": 240, "singlecontinuouspspac": 240, "frv_type": 240, "randomvari": 240, "tactic": 240, "random_symbol": 240, "rs_swap": 240, "pspace1": 240, "pspace2": 240, "immutabledensendimarrai": 241, "tomatrix": 241, "j_m": 241, "i_a": 241, "i_b": 241, "sum_k": 241, "tensorcontract": [241, 242], "arraycontract": [241, 242], "tensordiagon": [241, 242], "derive_by_arrai": 241, "sum_m": 241, "immutablesparsendimarrai": 241, "mutabledensendimarrai": 241, "mutablesparsendimarrai": 241, "array_der": [241, 242], "index_order_old": [241, 242], "index_order_new": [241, 242], "cab": 241, "array_express": 241, "contraction_ax": 241, "diagonal_ax": 241, "arraydiagon": [241, 242], "arraysymbol": 242, "convert_indexed_to_arrai": 242, "arrayadd": 242, "convert_matrix_to_arrai": 242, "convert_array_to_matrix": 242, "expr_tr": 242, "contraction_indic": 242, "diagonal_indic": 242, "adi": 242, "from_array_to_matrix": 242, "ijklm": 242, "kijml": 242, "perm1": 242, "perm2": 242, "index_method": 244, "get_contraction_structur": [244, 245], "deepest": 244, "nested_contract": 244, "get_indic": [244, 245, 246, 247], "indexconformanceexcept": 244, "______": 245, "stem": 245, "dim1": 245, "dim2": 245, "qwerti": 245, "a_ij": 245, "b_ij": 245, "syntact": 245, "a_real": 245, "c_inherit": 245, "c_explicit": 245, "unrol": 245, "tensorindextyp": [246, 247], "eps_dim": 246, "metric_nam": 246, "su": 246, "lorentz": 246, "tensor_index_typ": 246, "is_up": 246, "tensor_inde_typ": 246, "typ": 246, "tensorhead": [246, 247], "index_typ": 246, "tensorsymmetri": 246, "monoterm": 246, "_tensormanag": 246, "set_comm": 246, "asym2": 246, "fully_symmetr": 246, "tensori": [246, 247], "e_z": 246, "no_symmetri": 246, "p_x": 246, "p_y": 246, "p_z": 246, "ipos1": 246, "ipos2": 246, "icomp1": 246, "icomp2": 246, "nameless": 246, "replacement_dict": 246, "free_arg": 246, "addend": 246, "canon_bp": 246, "contract_metr": 246, "contract_al": 246, "ipo": 246, "icomp": 246, "nonrep": 246, "dum": 246, "ext_rank": 246, "is_canon_bp": 246, "get_free_indic": [246, 247], "perm2tensor": 246, "tid": 246, "sorted_compon": 246, "riemann_cyclic_replac": 246, "riemann_cycl": 246, "cadabra": 246, "multiterm": 246, "bianchi": 246, "sym2": 246, "direct_product": 246, "monotorem": 246, "tableaux": 246, "tensortyp": 246, "repetit": [246, 258], "tensormanag": 246, "comm_i2symbol": 246, "comm_symbols2i": 246, "get_comm": 246, "gcomm": 246, "ghcomm": 246, "toper": 247, "partialderiv": 247, "valenc": 247, "uncontract": 247, "compa": 247, "compb": 247, "derivand": 247, "nocache_fail": 249, "expectedexcept": 249, "exceptioninfo": 249, "abort": 249, "9999": 249, "skip_under_pyodid": 249, "pyodid": 249, "warningcl": [249, 256], "randtest": 250, "portabl": [251, 252], "pytestreport": 251, "force_color": 251, "readlin": 251, "sympydoctestfind": 251, "doctestpars": 251, "exclude_empti": 251, "sympydoctestrunn": 251, "checker": 251, "optionflag": 251, "5140": 251, "doctestrunn": 251, "clear_glob": 251, "writer": 251, "garbag": 251, "check_output": 251, "report_": 251, "sympyoutputcheck": 251, "outputcheck": 251, "stdlib": 251, "testrunn": 251, "sympytestresult": 251, "convert_to_native_path": 251, "lst": 251, "blacklist": 251, "get_sympy_dir": 251, "raise_on_deprec": 251, "deprecationwarn": [251, 256], "run_all_test": 251, "test_arg": 251, "test_kwarg": 251, "doctest_arg": 251, "doctest_kwarg": 251, "examples_arg": 251, "examples_kwarg": 251, "run_in_subprocess_with_hash_random": 251, "function_kwarg": 251, "hostedtoolcach": 251, "x64": 251, "_test": 251, "split_list": 251, "sympytestfil": 251, "module_rel": 251, "extraglob": 251, "raise_on_error": 251, "basenam": [251, 252, 253], "slate": 251, "dont_accept_true_for_1": 251, "dont_accept_blanklin": 251, "normalize_whitespac": 251, "ellipsi": [251, 259], "ignore_exception_detail": 251, "report_udiff": 251, "report_cdiff": 251, "report_ndiff": 251, "report_only_first_failur": 251, "mortem": 251, "tomfooleri": 251, "testmod": 251, "tester": 251, "fiddl": [251, 297], "timeout": 251, "keyboardinterrupt": 251, "interrupt": 251, "_basic": 251, "kw": 251, "test_equ": 251, "pdb": 251, "pipe": 251, "time_bal": 251, "tandem": 252, "matvec": 252, "codewrapp": 252, "distutil": 252, "fwrap": 252, "swig": 252, "binary_cal": 252, "22925376": 252, "25165824": 252, "_imp_": [252, 259], "filepath": 252, "cythoncodewrapp": 252, "dump_pyx": 252, "dummywrapp": 252, "f2pycodewrapp": 252, "ufuncifycodewrapp": 252, "dump_c": [252, 253], "code_gen": [252, 253], "argument_tupl": 252, "include_dir": 252, "library_dir": 252, "extra_compile_arg": 252, "extra_link_arg": 252, "symfunc": [252, 259], "funtion_nam": 252, "ndimension": 252, "f_fortran": 252, "f_cython": 252, "r1010": 252, "fortran77": 253, "fortran90": 253, "julia": 253, "rust": 253, "mileston": 253, "unsurmount": 253, "pyf": 253, "inputoutput": 253, "tcc": 253, "libtcc": 253, "date": 253, "hostnam": 253, "sha1": 253, "ccodegen": 253, "preprocessor_stat": 253, "dump_h": 253, "guard": 253, "get_prototyp": 253, "codegenerror": 253, "function_prototyp": 253, "dump_cod": 253, "cname": 253, "fname": 253, "pynam": 253, "jlname": 253, "octnam": 253, "rsname": 253, "fcodegen": 253, "f90": 253, "dump_f95": 253, "get_interfac": 253, "juliacodegen": 253, "dump_jl": 253, "octavecodegen": 253, "dump_m": 253, "returnvalu": 253, "destin": 253, "local_var": 253, "result_vari": 253, "unnam": 253, "rustcodegen": 253, "dump_r": 253, "f_result": 253, "myfcn": 253, "fcn2": 253, "myfcn_result": 253, "void": 253, "get_default_datatyp": 253, "complex_allow": 253, "agnost": 253, "conserve_mpmath_dp": 254, "disable_view": 254, "python_vers": 254, "ground_typ": 254, "memoize_properti": 254, "propfunc": 254, "no_attrs_in_subclass": 254, "__all__": 254, "some_funct": 254, "thread": 254, "xthread": 254, "threaded_factori": 254, "use_add": 254, "multiset_partitions_taocp": 255, "visitor": 255, "pstack": 255, "lpart": 255, "topmost": 255, "partcompon": 255, "peek": [255, 297], "unpredict": 255, "list_visitor": 255, "abb": [255, 258], "factoring_visitor": 255, "multisetpartitiontravers": 255, "aocp": 255, "count_partit": 255, "127750": 255, "686": 255, "4a": 255, "factorisatio": 255, "oppenheim": 255, "numerorum": 255, "canfield": 255, "erdo": 255, "OF": 255, "yorgei": 255, "monad": 255, "persist": 255, "288716": 255, "memoiz": [255, 257, 284], "dramat": 255, "hypothet": 255, "borrow": 255, "coalesc": 255, "_rang": 255, "stretch": 255, "brain": 255, "histogram": 255, "enum_al": 255, "enum_larg": 255, "enum_rang": 255, "enum_smal": 255, "ub": 255, "catch_warn": 256, "simplefilt": 256, "dedent": [256, 261], "miscellan": [257, 284], "pkgdata": [257, 284], "notiter": 258, "binary_partit": 258, "r1011": 258, "taocp": 258, "nx": 258, "common_prefix": 258, "common_suffix": 258, "unhash": 258, "r1012": 258, "component_": 258, "28graph_theori": 258, "r1013": 258, "27s_strongly_connected_components_algorithm": 258, "dict_merg": 258, "filter_symbol": 258, "myop": 258, "kog": 258, "informatik": 258, "hamburg": 258, "mein": 258, "python_trick": 258, "neighbor": 258, "xxxxxx": 258, "xxxx": 258, "r1014": 258, "method_ring": 258, "r1015": 258, "4856615": 258, "4857018": 258, "r1016": 258, "20160313023044": 258, "programminggeek": 258, "r1017": 258, "steinhau": 258, "93johnson": 258, "93trotter_algorithm": 258, "r1018": 258, "involut": 258, "eco": 258, "vajnovszki": 258, "dmtc": 258, "generate_involut": 258, "r1019": 258, "permutationinvolut": 258, "generate_oriented_forest": 258, "forest": 258, "acycl": 258, "r1020": 258, "beyer": 258, "hedetniemi": 258, "novemb": 258, "r1021": 258, "1633833": 258, "has_dup": 258, "has_varieti": 258, "iproduct": 258, "abcbb": 258, "is_sequ": 258, "generatortyp": 258, "_iter": 258, "kbin": 258, "ordered_flag": 258, "least_rot": 258, "rotate_left": 258, "r1022": 258, "lexicographically_minimal_string_rot": 258, "minlex": 258, "acb": 258, "11010011000": 258, "00011010011": 258, "00011001011": 258, "aaa": 258, "abi": 258, "bby": 258, "abracadabra": 258, "banana": 258, "multiset_derang": 258, "uniq": 258, "1233": 258, "3312": 258, "3321": 258, "aba": 258, "baa": 258, "bead": 258, "ooo": 258, "r1023": 258, "r1024": 258, "carla": 258, "savag": 258, "terri": 258, "yih": 258, "414": 258, "430": 258, "0196": 258, "6774": 258, "90047": 258, "ordered_partit": 258, "r1025": 258, "jeromekelleh": 258, "r1026": 258, "jerom": 258, "kelleh": 258, "barri": 258, "sullivan": 258, "0909": 258, "2331v2": 258, "r1027": 258, "activest": 258, "218332": 258, "random_derang": 258, "reseed": 258, "rotate_right": 258, "roundrobin": 258, "ef": 258, "credit": 258, "sakki": 258, "sequence_partit": 258, "l_m": 258, "kleen": 258, "enricogiampieri": 258, "13131491": 258, "sequence_partitions_empti": 258, "keyfunc": 258, "subgraph": 258, "r1028": 258, "r1029": 258, "r1030": 258, "unflatten": 258, "bcd": 258, "afunc": 259, "lambdastr": 259, "dummifi": 259, "use_imp": 259, "docstring_limit": 259, "custom_sin": 259, "spent": 259, "38177329": 259, "49315059": 259, "8414709848078965": 259, "enable_eager_execut": 259, "eagertensor": 259, "placehold": 259, "user_guid": 259, "runtimewarn": 259, "sin_cos_sympi": 259, "sin_co": 259, "sin_cos_numpi": 259, "38177329068": 259, "module_dictionari": 259, "getsourc": 259, "_lambdifygener": 259, "__globals__": 259, "lambdaprint": 259, "90929743": [259, 286], "assoc_recurrence_memo": 260, "base_seq": 260, "memo": 260, "pn0": 260, "recurrence_memo": 260, "specfun": 260, "__index__": 261, "sanit": 261, "99999999999999991611392": 261, "debug_decor": 261, "debugf": 261, "fillded": 261, "strline": 261, "rawlin": 261, "find_execut": 261, "pathsep": 261, "pastabl": 261, "bee": 261, "spamham": 261, "sha": 261, "egg": 261, "md5": 261, "eggsham": 261, "r1031": 261, "6116978": 261, "substr": 261, "roken": 261, "deletechar": 261, "multicharact": 261, "oldchar": 261, "newchar": 261, "acquir": 262, "getresourc": 262, "pkgname": 262, "pkgpath": 262, "dirnam": 262, "normpath": 262, "__loader__": 262, "stringio": 262, "get_resourc": 262, "ioerror": 262, "mydata": 262, "mypkgdata": 262, "jpg": 262, "get_class": 263, "lookup_view": 263, "get_mod_func": 263, "callback": 263, "timeutil": 264, "coordsysrect": 265, "coordsys3d": [265, 267, 268, 269, 271, 272, 275], "rotation_matrix": [265, 267, 270], "vector_nam": 265, "variable_nam": [265, 272], "latex_vect": 265, "pretty_vect": 265, "latex_scalar": 265, "pretty_scalar": 265, "new_system": 265, "create_new": [265, 270], "transformation_to_par": 265, "transformation_from_par": 265, "locate_new": [265, 268, 269, 270, 271, 272], "position_wrt": [265, 269, 270, 271], "orient_new": [265, 267], "axisorient": [265, 267, 270], "axis_orient": [265, 270], "bodyorient": [265, 267, 270], "body_orient": [265, 267, 270], "spaceorient": [265, 267, 270], "space_orient": [265, 267], "quaternionorient": [265, 267, 270], "q_orient": [265, 267], "orient_new_axi": [265, 268, 270], "orient_new_bodi": [265, 270], "angle1": [265, 267], "angle2": [265, 267], "angle3": [265, 267], "euler_angl": [265, 267], "orient_new_quaternion": [265, 270], "orient_new_spac": [265, 270], "coordsyrect": 265, "v_a": 265, "v_b": 265, "scalar_map": 265, "basevector": [265, 269, 270], "delop": [265, 271, 272], "r1032": 265, "r1033": 265, "basedyad": [265, 269], "second_system": 265, "deloper": [265, 273], "parametricregion": [265, 268, 275], "implicitregion": [265, 268, 275], "parabola": 265, "rational_parametr": 265, "singular_point": 265, "regular_point": 265, "reg_point": 265, "cubic_curv": 265, "calulc": 265, "hoffmann": 265, "purdu": 265, "lib": 265, "cgi": 265, "viewcont": 265, "1827": 265, "cstech": 265, "erik": 265, "hillgart": 265, "diploma": 265, "linz": 265, "universitat": 265, "risc_1355": 265, "20point": 265, "20on": 265, "20conic": 265, "parametricintegr": 265, "semispher": [265, 275], "axis_orienter1": 267, "axis_orienter2": 267, "axis_orienter3": 267, "body_orienter1": 267, "body_orienter2": 267, "body_orienter3": 267, "matrix_to_vector": 268, "system2": 268, "vector_integr": [268, 275], "essenc": 269, "vectormul": 269, "vectoradd": 269, "ofcours": 269, "vectorzero": 269, "expressli": 269, "express_coordin": [269, 270], "dyadicmul": 269, "dyadicadd": 269, "cleanest": 270, "orient_new_": 270, "basescalar": [270, 272], "oabc": 271, "oa": 271, "pq": 271, "sr": 271, "wikidel": 271, "ffield": 271, "gradient_field": 272, "instantan": 272, "directional_deriv": 272, "lame": 272, "dyadicproduct": 273, "quantifi": 274, "necesssari": 275, "param_circl": 275, "implicit_circl": 275, "obextj": 275, "solidspher": 275, "lamina": 275, "\ud835\udc45": 275, "vectorfield": 275, "hemispher": 275, "top_fac": 275, "bottom_fac": 275, "27_theorem": 275, "cone": 275, "divergence_theorem": 275, "12288": 275, "truss": 282, "cabl": 282, "str_expr": 286, "82842712474619": 286, "141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117068": 286, "0874989834394464": 286, "roundoff": 286, "14112001": 286, "7568025": 286, "95892427": 286, "2794155": 286, "6569866": 286, "98935825": 286, "41211849": 286, "0998334166468": 286, "sympy_nam": 286, "numerical_funct": 286, "rephras": 287, "oh": 287, "integration_vari": 287, "dfdx": 287, "equidistantli": 287, "d2fdx2": 287, "django": 289, "oop": 289, "crazi": 289, "abcdef": 289, "reevalu": 289, "infal": 289, "entertain": 290, "preliminari": 290, "82842712475": 291, "cass": 291, "wrote": [291, 292], "theme": 291, "expanded_expr": 291, "whet": 291, "appetit": 291, "c\u2082": [291, 298], "c\u2081": [291, 298], "\u03bd": 291, "sell": 291, "battl": 291, "confid": 291, "gigabyt": 291, "tear": 292, "stopper": 292, "uexpr": 292, "algebraic_multipl": 293, "pdp": 293, "undertest": 293, "underevalu": 293, "my_iszero": 293, "stronger": 293, "tradeoff": 293, "wonder": 293, "5b7c3e8ee5b40332abdb206c": 293, "15141": 293, "19548": 293, "10120": 293, "10279": 293, "constant_problem": 293, "possiblezeroq": 293, "20200307091449": 293, "mupad_ref": 293, "iszero": 293, "congratul": 294, "decent": 295, "austin": 295, "javascript": 296, "bvar": 296, "unnecessarili": 297, "whittl": 297, "catchal": 297, "collected_expr": 297, "cdot1": 297, "undertak": 297, "undon": 297, "cdot2": 297, "nck": 297, "pronounc": 297, "_2f_1": 297, "cfrac": 297, "list_to_frac": 297, "a\u2080": 297, "a\u2083": 297, "a\u2084": 297, "pointless": 297, "orig_frac": 297, "diffeq": 298}, "objects": {"": [[38, 0, 0, "-", "sympy"]], "sympy": [[40, 0, 0, "-", "abc"], [41, 0, 0, "-", "algebras"], [44, 0, 0, "-", "assumptions"], [47, 0, 0, "-", "calculus"], [48, 0, 0, "-", "categories"], [70, 0, 0, "-", "diffgeom"], [71, 0, 0, "-", "discrete"], [75, 0, 0, "-", "functions"], [88, 0, 0, "-", "holonomic"], [95, 0, 0, "-", "integrals"], [96, 0, 0, "-", "interactive"], [97, 0, 0, "-", "liealgebras"], [98, 0, 0, "-", "logic"], [103, 0, 0, "-", "matrices"], [110, 0, 0, "-", "parsing"], [282, 0, 0, "-", "physics"], [216, 0, 0, "-", "polys"], [238, 0, 0, "-", "solvers"], [240, 0, 0, "-", "stats"], [243, 0, 0, "-", "tensor"], [248, 0, 0, "-", "testing"], [257, 0, 0, "-", "utilities"], [273, 0, 0, "-", "vector"]], "sympy.algebras": [[41, 1, 1, "", "Quaternion"]], "sympy.algebras.Quaternion": [[41, 2, 1, "", "add"], [41, 2, 1, "", "angle"], [41, 2, 1, "", "arc_coplanar"], [41, 2, 1, "", "axis"], [41, 2, 1, "", "exp"], [41, 2, 1, "", "from_Matrix"], [41, 2, 1, "", "from_axis_angle"], [41, 2, 1, "", "from_euler"], [41, 2, 1, "", "from_rotation_matrix"], [41, 2, 1, "", "index_vector"], [41, 2, 1, "", "integrate"], [41, 2, 1, "", "inverse"], [41, 2, 1, "", "is_pure"], [41, 2, 1, "", "is_zero_quaternion"], [41, 2, 1, "", "mensor"], [41, 2, 1, "", "mul"], [41, 2, 1, "", "norm"], [41, 2, 1, "", "normalize"], [41, 2, 1, "", "orthogonal"], [41, 2, 1, "", "parallel"], [41, 2, 1, "", "pow"], [41, 2, 1, "", "pow_cos_sin"], [41, 3, 1, "", "product_matrix_left"], [41, 3, 1, "", "product_matrix_right"], [41, 2, 1, "", "rotate_point"], [41, 2, 1, "", "scalar_part"], [41, 2, 1, "", "set_norm"], [41, 2, 1, "", "to_Matrix"], [41, 2, 1, "", "to_axis_angle"], [41, 2, 1, "", "to_euler"], [41, 2, 1, "", "to_rotation_matrix"], [41, 2, 1, "", "vector_coplanar"], [41, 2, 1, "", "vector_part"]], "sympy.assumptions": [[42, 0, 0, "-", "ask"], [43, 0, 0, "-", "assume"], [45, 0, 0, "-", "predicates"], [46, 0, 0, "-", "refine"]], "sympy.assumptions.ask": [[42, 1, 1, "", "AssumptionKeys"], [42, 4, 1, "", "ask"], [42, 4, 1, "", "register_handler"], [42, 4, 1, "", "remove_handler"]], "sympy.assumptions.assume": [[43, 1, 1, "", "AppliedPredicate"], [43, 1, 1, "", "AssumptionsContext"], [43, 1, 1, "", "Predicate"], [43, 1, 1, "", "UndefinedPredicate"], [43, 4, 1, "", "assuming"]], "sympy.assumptions.assume.AppliedPredicate": [[43, 3, 1, "", "arg"], [43, 3, 1, "", "arguments"], [43, 3, 1, "", "function"]], "sympy.assumptions.assume.AssumptionsContext": [[43, 2, 1, "", "add"]], "sympy.assumptions.assume.Predicate": [[43, 2, 1, "", "eval"], [43, 5, 1, "", "handler"], [43, 2, 1, "", "register"], [43, 2, 1, "", "register_many"]], "sympy.assumptions.predicates.calculus": [[45, 1, 1, "", "FinitePredicate"], [45, 1, 1, "", "InfinitePredicate"]], "sympy.assumptions.predicates.calculus.FinitePredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.calculus.InfinitePredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.common": [[45, 1, 1, "", "CommutativePredicate"], [45, 1, 1, "", "IsTruePredicate"]], "sympy.assumptions.predicates.common.CommutativePredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.common.IsTruePredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices": [[45, 1, 1, "", "ComplexElementsPredicate"], [45, 1, 1, "", "DiagonalPredicate"], [45, 1, 1, "", "FullRankPredicate"], [45, 1, 1, "", "IntegerElementsPredicate"], [45, 1, 1, "", "InvertiblePredicate"], [45, 1, 1, "", "LowerTriangularPredicate"], [45, 1, 1, "", "NormalPredicate"], [45, 1, 1, "", "OrthogonalPredicate"], [45, 1, 1, "", "PositiveDefinitePredicate"], [45, 1, 1, "", "RealElementsPredicate"], [45, 1, 1, "", "SingularPredicate"], [45, 1, 1, "", "SquarePredicate"], [45, 1, 1, "", "SymmetricPredicate"], [45, 1, 1, "", "TriangularPredicate"], [45, 1, 1, "", "UnitTriangularPredicate"], [45, 1, 1, "", "UnitaryPredicate"], [45, 1, 1, "", "UpperTriangularPredicate"]], "sympy.assumptions.predicates.matrices.ComplexElementsPredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.DiagonalPredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.FullRankPredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.IntegerElementsPredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.InvertiblePredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.LowerTriangularPredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.NormalPredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.OrthogonalPredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.PositiveDefinitePredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.RealElementsPredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.SingularPredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.SquarePredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.SymmetricPredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.TriangularPredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.UnitTriangularPredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.UnitaryPredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.UpperTriangularPredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.ntheory": [[45, 1, 1, "", "CompositePredicate"], [45, 1, 1, "", "EvenPredicate"], [45, 1, 1, "", "OddPredicate"], [45, 1, 1, "", "PrimePredicate"]], "sympy.assumptions.predicates.ntheory.CompositePredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.ntheory.EvenPredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.ntheory.OddPredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.ntheory.PrimePredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order": [[45, 1, 1, "", "NegativePredicate"], [45, 1, 1, "", "NonNegativePredicate"], [45, 1, 1, "", "NonPositivePredicate"], [45, 1, 1, "", "NonZeroPredicate"], [45, 1, 1, "", "PositivePredicate"], [45, 1, 1, "", "ZeroPredicate"]], "sympy.assumptions.predicates.order.NegativePredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order.NonNegativePredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order.NonPositivePredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order.NonZeroPredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order.PositivePredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order.ZeroPredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets": [[45, 1, 1, "", "AlgebraicPredicate"], [45, 1, 1, "", "AntihermitianPredicate"], [45, 1, 1, "", "ComplexPredicate"], [45, 1, 1, "", "ExtendedRealPredicate"], [45, 1, 1, "", "HermitianPredicate"], [45, 1, 1, "", "ImaginaryPredicate"], [45, 1, 1, "", "IntegerPredicate"], [45, 1, 1, "", "IrrationalPredicate"], [45, 1, 1, "", "RationalPredicate"], [45, 1, 1, "", "RealPredicate"], [45, 1, 1, "", "TranscendentalPredicate"]], "sympy.assumptions.predicates.sets.AlgebraicPredicate": [[45, 5, 1, "", "AlgebraicHandler"], [45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.AntihermitianPredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.ComplexPredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.ExtendedRealPredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.HermitianPredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.ImaginaryPredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.IntegerPredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.IrrationalPredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.RationalPredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.RealPredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.TranscendentalPredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.refine": [[46, 4, 1, "", "refine"], [46, 4, 1, "", "refine_Pow"], [46, 4, 1, "", "refine_abs"], [46, 4, 1, "", "refine_arg"], [46, 4, 1, "", "refine_atan2"], [46, 4, 1, "", "refine_im"], [46, 4, 1, "", "refine_matrixelement"], [46, 4, 1, "", "refine_re"], [46, 4, 1, "", "refine_sign"]], "sympy.calculus": [[47, 0, 0, "-", "euler"], [47, 0, 0, "-", "finite_diff"], [47, 0, 0, "-", "singularities"], [47, 0, 0, "-", "util"]], "sympy.calculus.euler": [[47, 4, 1, "", "euler_equations"]], "sympy.calculus.finite_diff": [[47, 4, 1, "", "apply_finite_diff"], [47, 4, 1, "", "differentiate_finite"], [47, 4, 1, "", "finite_diff_weights"]], "sympy.calculus.singularities": [[47, 4, 1, "", "is_decreasing"], [47, 4, 1, "", "is_increasing"], [47, 4, 1, "", "is_monotonic"], [47, 4, 1, "", "is_strictly_decreasing"], [47, 4, 1, "", "is_strictly_increasing"], [47, 4, 1, "", "monotonicity_helper"], [47, 4, 1, "", "singularities"]], "sympy.calculus.util": [[47, 4, 1, "", "continuous_domain"], [47, 4, 1, "", "function_range"], [47, 4, 1, "", "is_convex"], [47, 4, 1, "", "lcim"], [47, 4, 1, "", "maximum"], [47, 4, 1, "", "minimum"], [47, 4, 1, "", "not_empty_in"], [47, 4, 1, "", "periodicity"], [47, 4, 1, "", "stationary_points"]], "sympy.categories": [[48, 1, 1, "", "Category"], [48, 1, 1, "", "CompositeMorphism"], [48, 1, 1, "", "Diagram"], [48, 1, 1, "", "IdentityMorphism"], [48, 1, 1, "", "Morphism"], [48, 1, 1, "", "NamedMorphism"], [48, 1, 1, "", "Object"], [48, 0, 0, "-", "diagram_drawing"]], "sympy.categories.Category": [[48, 3, 1, "", "commutative_diagrams"], [48, 3, 1, "", "name"], [48, 3, 1, "", "objects"]], "sympy.categories.CompositeMorphism": [[48, 3, 1, "", "codomain"], [48, 3, 1, "", "components"], [48, 3, 1, "", "domain"], [48, 2, 1, "", "flatten"]], "sympy.categories.Diagram": [[48, 3, 1, "", "conclusions"], [48, 2, 1, "", "hom"], [48, 2, 1, "", "is_subdiagram"], [48, 3, 1, "", "objects"], [48, 3, 1, "", "premises"], [48, 2, 1, "", "subdiagram_from_objects"]], "sympy.categories.Morphism": [[48, 3, 1, "", "codomain"], [48, 2, 1, "", "compose"], [48, 3, 1, "", "domain"]], "sympy.categories.NamedMorphism": [[48, 3, 1, "", "name"]], "sympy.categories.diagram_drawing": [[48, 1, 1, "", "ArrowStringDescription"], [48, 1, 1, "", "DiagramGrid"], [48, 1, 1, "", "XypicDiagramDrawer"], [48, 4, 1, "", "preview_diagram"], [48, 4, 1, "", "xypic_draw_diagram"]], "sympy.categories.diagram_drawing.DiagramGrid": [[48, 3, 1, "", "height"], [48, 3, 1, "", "morphisms"], [48, 3, 1, "", "width"]], "sympy.categories.diagram_drawing.XypicDiagramDrawer": [[48, 2, 1, "", "draw"]], "sympy.codegen": [[49, 0, 0, "-", "algorithms"], [49, 0, 0, "-", "approximations"], [49, 0, 0, "-", "ast"], [49, 0, 0, "-", "cfunctions"], [49, 0, 0, "-", "cnodes"], [49, 0, 0, "-", "cutils"], [49, 0, 0, "-", "cxxnodes"], [49, 0, 0, "-", "fnodes"], [49, 0, 0, "-", "futils"], [49, 0, 0, "-", "matrix_nodes"], [49, 0, 0, "-", "pyutils"], [49, 0, 0, "-", "rewriting"]], "sympy.codegen.algorithms": [[49, 4, 1, "", "newtons_method"], [49, 4, 1, "", "newtons_method_function"]], "sympy.codegen.approximations": [[49, 1, 1, "", "SeriesApprox"], [49, 1, 1, "", "SumApprox"]], "sympy.codegen.ast": [[49, 1, 1, "", "Assignment"], [49, 1, 1, "", "AssignmentBase"], [49, 1, 1, "", "Attribute"], [49, 1, 1, "", "AugmentedAssignment"], [49, 1, 1, "", "BreakToken"], [49, 1, 1, "", "CodeBlock"], [49, 1, 1, "", "Comment"], [49, 1, 1, "", "ComplexType"], [49, 1, 1, "", "ContinueToken"], [49, 1, 1, "", "Declaration"], [49, 1, 1, "", "Element"], [49, 1, 1, "", "FloatBaseType"], [49, 1, 1, "", "FloatType"], [49, 1, 1, "", "For"], [49, 1, 1, "", "FunctionCall"], [49, 1, 1, "", "FunctionDefinition"], [49, 1, 1, "", "FunctionPrototype"], [49, 1, 1, "", "IntBaseType"], [49, 1, 1, "", "Node"], [49, 1, 1, "", "NoneToken"], [49, 1, 1, "", "Pointer"], [49, 1, 1, "", "Print"], [49, 1, 1, "", "QuotedString"], [49, 1, 1, "", "Raise"], [49, 1, 1, "", "Return"], [49, 1, 1, "", "RuntimeError_"], [49, 1, 1, "", "Scope"], [49, 1, 1, "", "SignedIntType"], [49, 1, 1, "", "Stream"], [49, 1, 1, "", "String"], [49, 1, 1, "", "Token"], [49, 1, 1, "", "Type"], [49, 1, 1, "", "UnsignedIntType"], [49, 1, 1, "", "Variable"], [49, 1, 1, "", "While"], [49, 4, 1, "", "aug_assign"]], "sympy.codegen.ast.CodeBlock": [[49, 2, 1, "", "cse"], [49, 2, 1, "", "topological_sort"]], "sympy.codegen.ast.FloatBaseType": [[49, 5, 1, "", "cast_nocheck"]], "sympy.codegen.ast.FloatType": [[49, 2, 1, "", "cast_nocheck"], [49, 3, 1, "", "decimal_dig"], [49, 3, 1, "", "dig"], [49, 3, 1, "", "eps"], [49, 3, 1, "", "max"], [49, 3, 1, "", "max_exponent"], [49, 3, 1, "", "min_exponent"], [49, 3, 1, "", "tiny"]], "sympy.codegen.ast.Node": [[49, 2, 1, "", "attr_params"]], "sympy.codegen.ast.Token": [[49, 2, 1, "", "kwargs"]], "sympy.codegen.ast.Type": [[49, 2, 1, "", "cast_check"], [49, 2, 1, "", "from_expr"]], "sympy.codegen.ast.Variable": [[49, 2, 1, "", "as_Declaration"], [49, 2, 1, "", "deduced"]], "sympy.codegen.cfunctions": [[49, 1, 1, "", "Cbrt"], [49, 1, 1, "", "Sqrt"], [49, 1, 1, "", "exp2"], [49, 1, 1, "", "expm1"], [49, 1, 1, "", "fma"], [49, 1, 1, "", "hypot"], [49, 1, 1, "", "log10"], [49, 1, 1, "", "log1p"], [49, 1, 1, "", "log2"]], "sympy.codegen.cfunctions.Cbrt": [[49, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.Sqrt": [[49, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.exp2": [[49, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.expm1": [[49, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.fma": [[49, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.hypot": [[49, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.log10": [[49, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.log1p": [[49, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.log2": [[49, 2, 1, "", "fdiff"]], "sympy.codegen.cnodes": [[49, 1, 1, "", "CommaOperator"], [49, 1, 1, "", "Label"], [49, 1, 1, "", "PostDecrement"], [49, 1, 1, "", "PostIncrement"], [49, 1, 1, "", "PreDecrement"], [49, 1, 1, "", "PreIncrement"], [49, 4, 1, "", "alignof"], [49, 1, 1, "", "goto"], [49, 4, 1, "", "sizeof"], [49, 1, 1, "", "struct"], [49, 1, 1, "", "union"]], "sympy.codegen.cutils": [[49, 4, 1, "", "render_as_source_file"]], "sympy.codegen.cxxnodes": [[49, 1, 1, "", "using"]], "sympy.codegen.fnodes": [[49, 1, 1, "", "ArrayConstructor"], [49, 1, 1, "", "Do"], [49, 1, 1, "", "Extent"], [49, 1, 1, "", "FortranReturn"], [49, 1, 1, "", "GoTo"], [49, 1, 1, "", "ImpliedDoLoop"], [49, 1, 1, "", "Module"], [49, 1, 1, "", "Program"], [49, 1, 1, "", "Subroutine"], [49, 1, 1, "", "SubroutineCall"], [49, 4, 1, "", "allocated"], [49, 4, 1, "", "array"], [49, 4, 1, "", "bind_C"], [49, 1, 1, "", "cmplx"], [49, 4, 1, "", "dimension"], [49, 1, 1, "", "dsign"], [49, 1, 1, "", "isign"], [49, 1, 1, "", "kind"], [49, 4, 1, "", "lbound"], [49, 1, 1, "", "literal_dp"], [49, 1, 1, "", "literal_sp"], [49, 1, 1, "", "merge"], [49, 4, 1, "", "reshape"], [49, 4, 1, "", "shape"], [49, 4, 1, "", "size"], [49, 1, 1, "", "use"], [49, 1, 1, "", "use_rename"]], "sympy.codegen.futils": [[49, 4, 1, "", "render_as_module"]], "sympy.codegen.matrix_nodes": [[49, 1, 1, "", "MatrixSolve"]], "sympy.codegen.pyutils": [[49, 4, 1, "", "render_as_module"]], "sympy.codegen.rewriting": [[49, 1, 1, "", "FuncMinusOneOptim"], [49, 1, 1, "", "Optimization"], [49, 1, 1, "", "ReplaceOptim"], [49, 4, 1, "", "create_expand_pow_optimization"], [49, 4, 1, "", "optimize"]], "sympy.codegen.rewriting.FuncMinusOneOptim": [[49, 2, 1, "", "replace_in_Add"]], "sympy.combinatorics": [[51, 0, 0, "-", "galois"], [60, 0, 0, "-", "generators"], [52, 0, 0, "-", "graycode"], [53, 0, 0, "-", "group_constructs"], [54, 0, 0, "-", "group_numbers"], [56, 0, 0, "-", "named_groups"], [57, 0, 0, "-", "partitions"], [59, 0, 0, "-", "perm_groups"], [60, 0, 0, "-", "permutations"], [61, 0, 0, "-", "polyhedron"], [62, 0, 0, "-", "prufer"], [63, 0, 0, "-", "subsets"], [64, 0, 0, "-", "tensor_can"], [65, 0, 0, "-", "testutil"], [66, 0, 0, "-", "util"]], "sympy.combinatorics.galois": [[51, 4, 1, "", "A4_in_S6"], [51, 4, 1, "", "A4xC2"], [51, 4, 1, "", "G18"], [51, 4, 1, "", "G36m"], [51, 4, 1, "", "G36p"], [51, 4, 1, "", "G72"], [51, 4, 1, "", "M20"], [51, 4, 1, "", "PGL2F5"], [51, 4, 1, "", "PSL2F5"], [51, 1, 1, "", "S1TransitiveSubgroups"], [51, 1, 1, "", "S2TransitiveSubgroups"], [51, 1, 1, "", "S3TransitiveSubgroups"], [51, 4, 1, "", "S3_in_S6"], [51, 1, 1, "", "S4TransitiveSubgroups"], [51, 4, 1, "", "S4m"], [51, 4, 1, "", "S4p"], [51, 4, 1, "", "S4xC2"], [51, 1, 1, "", "S5TransitiveSubgroups"], [51, 1, 1, "", "S6TransitiveSubgroups"], [51, 4, 1, "", "find_transitive_subgroups_of_S6"], [51, 4, 1, "", "four_group"]], "sympy.combinatorics.generators": [[60, 2, 1, "", "alternating"], [60, 2, 1, "", "cyclic"], [60, 2, 1, "", "dihedral"], [60, 2, 1, "", "symmetric"]], "sympy.combinatorics.graycode": [[52, 1, 1, "", "GrayCode"], [52, 2, 1, "", "bin_to_gray"], [52, 2, 1, "", "get_subset_from_bitstring"], [52, 2, 1, "", "gray_to_bin"], [52, 2, 1, "", "graycode_subsets"], [52, 2, 1, "", "random_bitstring"]], "sympy.combinatorics.graycode.GrayCode": [[52, 3, 1, "", "current"], [52, 2, 1, "", "generate_gray"], [52, 3, 1, "", "n"], [52, 2, 1, "", "next"], [52, 3, 1, "", "rank"], [52, 3, 1, "", "selections"], [52, 2, 1, "", "skip"], [52, 2, 1, "", "unrank"]], "sympy.combinatorics.group_constructs": [[53, 4, 1, "", "DirectProduct"]], "sympy.combinatorics.group_numbers": [[54, 4, 1, "", "is_abelian_number"], [54, 4, 1, "", "is_cyclic_number"], [54, 4, 1, "", "is_nilpotent_number"]], "sympy.combinatorics.named_groups": [[56, 4, 1, "", "AbelianGroup"], [56, 4, 1, "", "AlternatingGroup"], [56, 4, 1, "", "CyclicGroup"], [56, 4, 1, "", "DihedralGroup"], [56, 4, 1, "", "SymmetricGroup"]], "sympy.combinatorics.partitions": [[57, 1, 1, "", "IntegerPartition"], [57, 1, 1, "", "Partition"], [57, 4, 1, "", "RGS_enum"], [57, 4, 1, "", "RGS_generalized"], [57, 4, 1, "", "RGS_rank"], [57, 4, 1, "", "RGS_unrank"], [57, 4, 1, "", "random_integer_partition"]], "sympy.combinatorics.partitions.IntegerPartition": [[57, 2, 1, "", "as_dict"], [57, 2, 1, "", "as_ferrers"], [57, 3, 1, "", "conjugate"], [57, 2, 1, "", "next_lex"], [57, 2, 1, "", "prev_lex"]], "sympy.combinatorics.partitions.Partition": [[57, 3, 1, "", "RGS"], [57, 2, 1, "", "from_rgs"], [57, 3, 1, "", "partition"], [57, 3, 1, "", "rank"], [57, 2, 1, "", "sort_key"]], "sympy.combinatorics.perm_groups": [[59, 1, 1, "", "PermutationGroup"]], "sympy.combinatorics.perm_groups.PermutationGroup": [[59, 2, 1, "", "__contains__"], [59, 2, 1, "", "__mul__"], [59, 2, 1, "", "__new__"], [59, 5, 1, "", "__weakref__"], [59, 2, 1, "", "_coset_representative"], [59, 2, 1, "", "_distinct_primes_lemma"], [59, 3, 1, "", "_elements"], [59, 2, 1, "", "_eval_is_alt_sym_monte_carlo"], [59, 2, 1, "", "_eval_is_alt_sym_naive"], [59, 2, 1, "", "_p_elements_group"], [59, 2, 1, "", "_random_pr_init"], [59, 2, 1, "", "_sylow_alt_sym"], [59, 2, 1, "", "_union_find_merge"], [59, 2, 1, "", "_union_find_rep"], [59, 2, 1, "", "_verify"], [59, 2, 1, "", "abelian_invariants"], [59, 3, 1, "", "base"], [59, 2, 1, "", "baseswap"], [59, 3, 1, "", "basic_orbits"], [59, 3, 1, "", "basic_stabilizers"], [59, 3, 1, "", "basic_transversals"], [59, 2, 1, "", "center"], [59, 2, 1, "", "centralizer"], [59, 2, 1, "", "commutator"], [59, 2, 1, "", "composition_series"], [59, 2, 1, "", "conjugacy_class"], [59, 2, 1, "", "conjugacy_classes"], [59, 2, 1, "", "contains"], [59, 2, 1, "", "coset_factor"], [59, 2, 1, "", "coset_rank"], [59, 2, 1, "", "coset_table"], [59, 2, 1, "", "coset_transversal"], [59, 2, 1, "", "coset_unrank"], [59, 3, 1, "", "degree"], [59, 2, 1, "", "derived_series"], [59, 2, 1, "", "derived_subgroup"], [59, 3, 1, "", "elements"], [59, 2, 1, "", "equals"], [59, 2, 1, "", "generate"], [59, 2, 1, "", "generate_dimino"], [59, 2, 1, "", "generate_schreier_sims"], [59, 2, 1, "", "generator_product"], [59, 3, 1, "", "generators"], [59, 3, 1, "", "identity"], [59, 2, 1, "", "index"], [59, 3, 1, "", "is_abelian"], [59, 2, 1, "", "is_alt_sym"], [59, 3, 1, "", "is_alternating"], [59, 3, 1, "", "is_cyclic"], [59, 3, 1, "", "is_dihedral"], [59, 2, 1, "", "is_elementary"], [59, 3, 1, "", "is_nilpotent"], [59, 2, 1, "", "is_normal"], [59, 3, 1, "", "is_perfect"], [59, 3, 1, "", "is_polycyclic"], [59, 2, 1, "", "is_primitive"], [59, 3, 1, "", "is_solvable"], [59, 2, 1, "", "is_subgroup"], [59, 3, 1, "", "is_symmetric"], [59, 2, 1, "", "is_transitive"], [59, 3, 1, "", "is_trivial"], [59, 2, 1, "", "lower_central_series"], [59, 2, 1, "", "make_perm"], [59, 3, 1, "", "max_div"], [59, 2, 1, "", "minimal_block"], [59, 2, 1, "", "minimal_blocks"], [59, 2, 1, "", "normal_closure"], [59, 2, 1, "", "orbit"], [59, 2, 1, "", "orbit_rep"], [59, 2, 1, "", "orbit_transversal"], [59, 2, 1, "", "orbits"], [59, 2, 1, "", "order"], [59, 2, 1, "", "pointwise_stabilizer"], [59, 2, 1, "", "polycyclic_group"], [59, 2, 1, "", "presentation"], [59, 2, 1, "", "random"], [59, 2, 1, "", "random_pr"], [59, 2, 1, "", "random_stab"], [59, 2, 1, "", "schreier_sims"], [59, 2, 1, "", "schreier_sims_incremental"], [59, 2, 1, "", "schreier_sims_random"], [59, 2, 1, "", "schreier_vector"], [59, 2, 1, "", "stabilizer"], [59, 3, 1, "", "strong_gens"], [59, 2, 1, "", "strong_presentation"], [59, 2, 1, "", "subgroup"], [59, 2, 1, "", "subgroup_search"], [59, 2, 1, "", "sylow_subgroup"], [59, 3, 1, "", "transitivity_degree"]], "sympy.combinatorics.permutations": [[60, 1, 1, "", "Cycle"], [60, 1, 1, "", "Permutation"], [60, 4, 1, "", "_af_parity"]], "sympy.combinatorics.permutations.Cycle": [[60, 2, 1, "", "list"]], "sympy.combinatorics.permutations.Permutation": [[60, 2, 1, "", "apply"], [60, 3, 1, "", "array_form"], [60, 2, 1, "", "ascents"], [60, 2, 1, "", "atoms"], [60, 3, 1, "", "cardinality"], [60, 2, 1, "", "commutator"], [60, 2, 1, "", "commutes_with"], [60, 3, 1, "", "cycle_structure"], [60, 3, 1, "", "cycles"], [60, 3, 1, "", "cyclic_form"], [60, 2, 1, "", "descents"], [60, 2, 1, "", "from_inversion_vector"], [60, 2, 1, "", "from_sequence"], [60, 3, 1, "", "full_cyclic_form"], [60, 2, 1, "", "get_adjacency_distance"], [60, 2, 1, "", "get_adjacency_matrix"], [60, 2, 1, "", "get_positional_distance"], [60, 2, 1, "", "get_precedence_distance"], [60, 2, 1, "", "get_precedence_matrix"], [60, 2, 1, "", "index"], [60, 2, 1, "", "inversion_vector"], [60, 2, 1, "", "inversions"], [60, 3, 1, "", "is_Empty"], [60, 3, 1, "", "is_Identity"], [60, 3, 1, "", "is_Singleton"], [60, 3, 1, "", "is_even"], [60, 3, 1, "", "is_odd"], [60, 2, 1, "", "josephus"], [60, 2, 1, "", "length"], [60, 2, 1, "", "list"], [60, 2, 1, "", "max"], [60, 2, 1, "", "min"], [60, 2, 1, "", "mul_inv"], [60, 2, 1, "", "next_lex"], [60, 2, 1, "", "next_nonlex"], [60, 2, 1, "", "next_trotterjohnson"], [60, 2, 1, "", "order"], [60, 2, 1, "", "parity"], [60, 2, 1, "", "random"], [60, 2, 1, "", "rank"], [60, 2, 1, "", "rank_nonlex"], [60, 2, 1, "", "rank_trotterjohnson"], [60, 2, 1, "", "resize"], [60, 2, 1, "", "rmul"], [60, 2, 1, "", "rmul_with_af"], [60, 2, 1, "", "runs"], [60, 2, 1, "", "signature"], [60, 3, 1, "", "size"], [60, 2, 1, "", "support"], [60, 2, 1, "", "transpositions"], [60, 2, 1, "", "unrank_lex"], [60, 2, 1, "", "unrank_nonlex"], [60, 2, 1, "", "unrank_trotterjohnson"]], "sympy.combinatorics.polyhedron": [[61, 1, 1, "", "Polyhedron"]], "sympy.combinatorics.polyhedron.Polyhedron": [[61, 3, 1, "", "array_form"], [61, 3, 1, "", "corners"], [61, 3, 1, "", "cyclic_form"], [61, 3, 1, "", "edges"], [61, 3, 1, "", "faces"], [61, 3, 1, "", "pgroup"], [61, 2, 1, "", "reset"], [61, 2, 1, "", "rotate"], [61, 3, 1, "", "size"], [61, 3, 1, "", "vertices"]], "sympy.combinatorics.prufer": [[62, 1, 1, "", "Prufer"]], "sympy.combinatorics.prufer.Prufer": [[62, 2, 1, "", "edges"], [62, 2, 1, "", "next"], [62, 3, 1, "", "nodes"], [62, 2, 1, "", "prev"], [62, 2, 1, "", "prufer_rank"], [62, 3, 1, "", "prufer_repr"], [62, 3, 1, "", "rank"], [62, 3, 1, "", "size"], [62, 2, 1, "", "to_prufer"], [62, 2, 1, "", "to_tree"], [62, 3, 1, "", "tree_repr"], [62, 2, 1, "", "unrank"]], "sympy.combinatorics.subsets": [[63, 1, 1, "", "Subset"], [63, 2, 1, "", "ksubsets"]], "sympy.combinatorics.subsets.Subset": [[63, 2, 1, "", "bitlist_from_subset"], [63, 3, 1, "", "cardinality"], [63, 2, 1, "", "iterate_binary"], [63, 2, 1, "", "iterate_graycode"], [63, 2, 1, "", "next_binary"], [63, 2, 1, "", "next_gray"], [63, 2, 1, "", "next_lexicographic"], [63, 2, 1, "", "prev_binary"], [63, 2, 1, "", "prev_gray"], [63, 2, 1, "", "prev_lexicographic"], [63, 3, 1, "", "rank_binary"], [63, 3, 1, "", "rank_gray"], [63, 3, 1, "", "rank_lexicographic"], [63, 3, 1, "", "size"], [63, 3, 1, "", "subset"], [63, 2, 1, "", "subset_from_bitlist"], [63, 2, 1, "", "subset_indices"], [63, 3, 1, "", "superset"], [63, 3, 1, "", "superset_size"], [63, 2, 1, "", "unrank_binary"], [63, 2, 1, "", "unrank_gray"]], "sympy.combinatorics.tensor_can": [[64, 4, 1, "", "bsgs_direct_product"], [64, 4, 1, "", "canonicalize"], [64, 4, 1, "", "double_coset_can_rep"], [64, 4, 1, "", "get_symmetric_group_sgs"]], "sympy.combinatorics.testutil": [[65, 4, 1, "", "_cmp_perm_lists"], [65, 4, 1, "", "_naive_list_centralizer"], [65, 4, 1, "", "_verify_bsgs"], [65, 4, 1, "", "_verify_centralizer"], [65, 4, 1, "", "_verify_normal_closure"]], "sympy.combinatorics.util": [[66, 4, 1, "", "_base_ordering"], [66, 4, 1, "", "_check_cycles_alt_sym"], [66, 4, 1, "", "_distribute_gens_by_base"], [66, 4, 1, "", "_handle_precomputed_bsgs"], [66, 4, 1, "", "_orbits_transversals_from_bsgs"], [66, 4, 1, "", "_remove_gens"], [66, 4, 1, "", "_strip"], [66, 4, 1, "", "_strong_gens_from_distr"]], "sympy.concrete.expr_with_intlimits": [[67, 1, 1, "", "ExprWithIntLimits"]], "sympy.concrete.expr_with_intlimits.ExprWithIntLimits": [[67, 2, 1, "", "change_index"], [67, 3, 1, "", "has_empty_sequence"], [67, 2, 1, "", "index"], [67, 2, 1, "", "reorder"], [67, 2, 1, "", "reorder_limit"]], "sympy.concrete.expr_with_limits": [[95, 1, 1, "", "ExprWithLimits"]], "sympy.concrete.expr_with_limits.ExprWithLimits": [[95, 3, 1, "", "bound_symbols"], [95, 3, 1, "", "free_symbols"], [95, 3, 1, "", "function"], [95, 3, 1, "", "has_finite_limits"], [95, 3, 1, "", "has_reversed_limits"], [95, 3, 1, "", "is_number"], [95, 3, 1, "", "limits"], [95, 3, 1, "", "variables"]], "sympy.concrete.gosper": [[67, 4, 1, "", "gosper_normal"], [67, 4, 1, "", "gosper_sum"], [67, 4, 1, "", "gosper_term"]], "sympy.concrete.products": [[67, 1, 1, "", "Product"], [67, 4, 1, "", "product"]], "sympy.concrete.products.Product": [[67, 2, 1, "", "is_convergent"], [67, 2, 1, "", "reverse_order"]], "sympy.concrete.summations": [[67, 1, 1, "", "Sum"], [67, 4, 1, "", "summation"]], "sympy.concrete.summations.Sum": [[67, 2, 1, "", "euler_maclaurin"], [67, 2, 1, "", "eval_zeta_function"], [67, 2, 1, "", "is_absolutely_convergent"], [67, 2, 1, "", "is_convergent"], [67, 2, 1, "", "reverse_order"]], "sympy.core": [[68, 0, 0, "-", "add"], [68, 0, 0, "-", "assumptions"], [68, 0, 0, "-", "basic"], [68, 0, 0, "-", "cache"], [68, 0, 0, "-", "containers"], [68, 0, 0, "-", "evalf"], [68, 0, 0, "-", "expr"], [68, 0, 0, "-", "exprtools"], [68, 0, 0, "-", "function"], [68, 0, 0, "-", "kind"], [68, 0, 0, "-", "mod"], [68, 0, 0, "-", "mul"], [68, 0, 0, "-", "multidimensional"], [68, 0, 0, "-", "numbers"], [68, 0, 0, "-", "power"], [68, 0, 0, "-", "random"], [68, 0, 0, "-", "relational"], [68, 0, 0, "-", "singleton"], [68, 0, 0, "-", "symbol"], [68, 0, 0, "-", "sympify"], [68, 0, 0, "-", "traversal"]], "sympy.core.add": [[68, 1, 1, "", "Add"]], "sympy.core.add.Add": [[68, 2, 1, "", "as_coeff_Add"], [68, 2, 1, "", "as_coeff_add"], [68, 2, 1, "", "as_content_primitive"], [68, 2, 1, "", "as_numer_denom"], [68, 2, 1, "", "as_real_imag"], [68, 2, 1, "", "as_two_terms"], [68, 2, 1, "", "extract_leading_order"], [68, 2, 1, "", "flatten"], [68, 2, 1, "", "primitive"]], "sympy.core.basic": [[68, 1, 1, "", "Atom"], [68, 1, 1, "", "Basic"]], "sympy.core.basic.Basic": [[68, 3, 1, "", "args"], [68, 2, 1, "", "as_content_primitive"], [68, 2, 1, "", "as_dummy"], [68, 3, 1, "", "assumptions0"], [68, 2, 1, "", "atoms"], [68, 3, 1, "", "canonical_variables"], [68, 2, 1, "", "class_key"], [68, 2, 1, "", "compare"], [68, 2, 1, "", "count"], [68, 2, 1, "", "count_ops"], [68, 2, 1, "", "doit"], [68, 2, 1, "", "dummy_eq"], [68, 2, 1, "", "find"], [68, 3, 1, "", "free_symbols"], [68, 2, 1, "", "fromiter"], [68, 3, 1, "", "func"], [68, 2, 1, "", "has"], [68, 2, 1, "", "has_free"], [68, 2, 1, "", "has_xfree"], [68, 3, 1, "", "is_comparable"], [68, 2, 1, "", "match"], [68, 2, 1, "", "matches"], [68, 2, 1, "", "rcall"], [68, 2, 1, "", "refine"], [68, 2, 1, "", "replace"], [68, 2, 1, "", "rewrite"], [68, 2, 1, "", "simplify"], [68, 2, 1, "", "sort_key"], [68, 2, 1, "", "subs"], [68, 2, 1, "", "xreplace"]], "sympy.core.cache": [[68, 4, 1, "", "__cacheit"]], "sympy.core.containers": [[68, 1, 1, "", "Dict"], [68, 1, 1, "", "Tuple"], [68, 1, 1, "", "TupleKind"]], "sympy.core.containers.Dict": [[68, 2, 1, "", "get"], [68, 2, 1, "", "items"], [68, 2, 1, "", "keys"], [68, 2, 1, "", "values"]], "sympy.core.containers.Tuple": [[68, 2, 1, "", "index"], [68, 3, 1, "", "kind"], [68, 2, 1, "", "tuple_count"]], "sympy.core.evalf": [[68, 1, 1, "", "EvalfMixin"], [68, 4, 1, "", "N"], [68, 1, 1, "", "PrecisionExhausted"]], "sympy.core.evalf.EvalfMixin": [[68, 2, 1, "", "evalf"], [68, 2, 1, "", "n"]], "sympy.core.expr": [[68, 1, 1, "", "AtomicExpr"], [68, 1, 1, "", "Expr"], [68, 1, 1, "", "UnevaluatedExpr"]], "sympy.core.expr.Expr": [[68, 2, 1, "", "apart"], [68, 2, 1, "", "args_cnc"], [68, 2, 1, "", "as_coeff_Add"], [68, 2, 1, "", "as_coeff_Mul"], [68, 2, 1, "", "as_coeff_add"], [68, 2, 1, "", "as_coeff_exponent"], [68, 2, 1, "", "as_coeff_mul"], [68, 2, 1, "", "as_coefficient"], [68, 2, 1, "", "as_coefficients_dict"], [68, 2, 1, "", "as_content_primitive"], [68, 2, 1, "", "as_expr"], [68, 2, 1, "", "as_independent"], [68, 2, 1, "", "as_leading_term"], [68, 2, 1, "", "as_numer_denom"], [68, 2, 1, "", "as_ordered_factors"], [68, 2, 1, "", "as_ordered_terms"], [68, 2, 1, "", "as_poly"], [68, 2, 1, "", "as_powers_dict"], [68, 2, 1, "", "as_real_imag"], [68, 2, 1, "", "as_terms"], [68, 2, 1, "", "aseries"], [68, 2, 1, "", "cancel"], [68, 2, 1, "", "coeff"], [68, 2, 1, "", "collect"], [68, 2, 1, "", "combsimp"], [68, 2, 1, "", "compute_leading_term"], [68, 2, 1, "", "conjugate"], [68, 2, 1, "", "could_extract_minus_sign"], [68, 2, 1, "", "equals"], [68, 2, 1, "", "expand"], [68, 3, 1, "", "expr_free_symbols"], [68, 2, 1, "", "extract_additively"], [68, 2, 1, "", "extract_branch_factor"], [68, 2, 1, "", "extract_multiplicatively"], [68, 2, 1, "", "factor"], [68, 2, 1, "", "fourier_series"], [68, 2, 1, "", "fps"], [68, 2, 1, "", "gammasimp"], [68, 2, 1, "", "getO"], [68, 2, 1, "", "getn"], [68, 2, 1, "", "integrate"], [68, 2, 1, "", "invert"], [68, 2, 1, "", "is_algebraic_expr"], [68, 2, 1, "", "is_constant"], [68, 2, 1, "", "is_meromorphic"], [68, 3, 1, "", "is_number"], [68, 2, 1, "", "is_polynomial"], [68, 2, 1, "", "is_rational_function"], [68, 2, 1, "", "leadterm"], [68, 2, 1, "", "limit"], [68, 2, 1, "", "lseries"], [68, 2, 1, "", "normal"], [68, 2, 1, "", "nseries"], [68, 2, 1, "", "nsimplify"], [68, 2, 1, "", "powsimp"], [68, 2, 1, "", "primitive"], [68, 2, 1, "", "radsimp"], [68, 2, 1, "", "ratsimp"], [68, 2, 1, "", "removeO"], [68, 2, 1, "", "round"], [68, 2, 1, "", "separate"], [68, 2, 1, "", "series"], [68, 2, 1, "", "taylor_term"], [68, 2, 1, "", "together"], [68, 2, 1, "", "trigsimp"]], "sympy.core.exprtools": [[68, 4, 1, "", "factor_terms"], [68, 4, 1, "", "gcd_terms"]], "sympy.core.function": [[68, 1, 1, "", "Derivative"], [68, 1, 1, "", "Function"], [68, 1, 1, "", "FunctionClass"], [68, 1, 1, "", "Lambda"], [68, 1, 1, "", "PoleError"], [68, 1, 1, "", "Subs"], [68, 1, 1, "", "WildFunction"], [68, 4, 1, "", "count_ops"], [68, 4, 1, "", "diff"], [68, 4, 1, "", "expand"], [68, 4, 1, "", "expand_complex"], [68, 4, 1, "", "expand_func"], [68, 4, 1, "", "expand_log"], [68, 4, 1, "", "expand_mul"], [68, 4, 1, "", "expand_multinomial"], [68, 4, 1, "", "expand_power_base"], [68, 4, 1, "", "expand_power_exp"], [68, 4, 1, "", "expand_trig"], [68, 4, 1, "", "nfloat"]], "sympy.core.function.Derivative": [[68, 3, 1, "", "_diff_wrt"], [68, 2, 1, "", "_sort_variable_count"], [68, 2, 1, "", "as_finite_difference"], [68, 2, 1, "", "doit_numerically"]], "sympy.core.function.Function": [[68, 2, 1, "", "as_base_exp"], [68, 2, 1, "", "fdiff"], [68, 2, 1, "", "is_singular"]], "sympy.core.function.FunctionClass": [[68, 3, 1, "", "nargs"]], "sympy.core.function.Lambda": [[68, 3, 1, "", "bound_symbols"], [68, 3, 1, "", "expr"], [68, 3, 1, "", "is_identity"], [68, 3, 1, "", "signature"], [68, 3, 1, "", "variables"]], "sympy.core.function.Subs": [[68, 3, 1, "", "bound_symbols"], [68, 3, 1, "", "expr"], [68, 3, 1, "", "point"], [68, 3, 1, "", "variables"]], "sympy.core.kind": [[68, 5, 1, "", "BooleanKind"], [68, 1, 1, "", "Kind"], [68, 5, 1, "", "NumberKind"], [68, 5, 1, "", "UndefinedKind"]], "sympy.core.mod": [[68, 1, 1, "", "Mod"]], "sympy.core.mul": [[68, 1, 1, "", "Mul"], [68, 4, 1, "", "prod"]], "sympy.core.mul.Mul": [[68, 2, 1, "", "as_coeff_Mul"], [68, 2, 1, "", "as_content_primitive"], [68, 2, 1, "", "as_ordered_factors"], [68, 2, 1, "", "as_two_terms"], [68, 2, 1, "", "flatten"]], "sympy.core.multidimensional": [[68, 1, 1, "", "vectorize"]], "sympy.core.numbers": [[68, 1, 1, "", "AlgebraicNumber"], [68, 1, 1, "", "Catalan"], [68, 1, 1, "", "ComplexInfinity"], [68, 1, 1, "", "EulerGamma"], [68, 1, 1, "", "Exp1"], [68, 1, 1, "", "Float"], [68, 1, 1, "", "GoldenRatio"], [68, 1, 1, "", "Half"], [68, 1, 1, "", "ImaginaryUnit"], [68, 1, 1, "", "Infinity"], [68, 1, 1, "", "Integer"], [68, 1, 1, "", "NaN"], [68, 1, 1, "", "NegativeInfinity"], [68, 1, 1, "", "NegativeOne"], [68, 1, 1, "", "Number"], [68, 1, 1, "", "NumberSymbol"], [68, 1, 1, "", "One"], [68, 1, 1, "", "Pi"], [68, 1, 1, "", "Rational"], [68, 5, 1, "", "RealNumber"], [68, 1, 1, "", "TribonacciConstant"], [68, 1, 1, "", "Zero"], [68, 4, 1, "", "equal_valued"], [68, 4, 1, "", "igcd"], [68, 4, 1, "", "ilcm"], [68, 4, 1, "", "mod_inverse"], [68, 4, 1, "", "seterr"]], "sympy.core.numbers.AlgebraicNumber": [[68, 2, 1, "", "__new__"], [68, 2, 1, "", "as_expr"], [68, 2, 1, "", "as_poly"], [68, 2, 1, "", "coeffs"], [68, 2, 1, "", "field_element"], [68, 3, 1, "", "is_aliased"], [68, 3, 1, "", "is_primitive_element"], [68, 2, 1, "", "minpoly_of_element"], [68, 2, 1, "", "native_coeffs"], [68, 2, 1, "", "primitive_element"], [68, 2, 1, "", "to_algebraic_integer"], [68, 2, 1, "", "to_primitive_element"], [68, 2, 1, "", "to_root"]], "sympy.core.numbers.Number": [[68, 2, 1, "", "as_coeff_Add"], [68, 2, 1, "", "as_coeff_Mul"], [68, 2, 1, "", "cofactors"], [68, 2, 1, "", "gcd"], [68, 2, 1, "", "lcm"]], "sympy.core.numbers.NumberSymbol": [[68, 2, 1, "", "approximation"]], "sympy.core.numbers.Rational": [[68, 2, 1, "", "as_coeff_Add"], [68, 2, 1, "", "as_coeff_Mul"], [68, 2, 1, "", "as_content_primitive"], [68, 2, 1, "", "factors"], [68, 2, 1, "", "limit_denominator"]], "sympy.core.power": [[68, 1, 1, "", "Pow"], [68, 4, 1, "", "integer_log"], [68, 4, 1, "", "integer_nthroot"], [68, 4, 1, "", "isqrt"]], "sympy.core.power.Pow": [[68, 2, 1, "", "as_base_exp"], [68, 2, 1, "", "as_content_primitive"]], "sympy.core.random": [[68, 4, 1, "", "_randint"], [68, 4, 1, "", "_randrange"], [68, 4, 1, "", "random_complex_number"], [68, 4, 1, "", "test_derivative_numerically"], [68, 4, 1, "", "verify_numerically"]], "sympy.core.relational": [[68, 5, 1, "", "Eq"], [68, 1, 1, "", "Equality"], [68, 5, 1, "", "Ge"], [68, 1, 1, "", "GreaterThan"], [68, 5, 1, "", "Gt"], [68, 5, 1, "", "Le"], [68, 1, 1, "", "LessThan"], [68, 5, 1, "", "Lt"], [68, 5, 1, "", "Ne"], [68, 5, 1, "", "Rel"], [68, 1, 1, "", "Relational"], [68, 1, 1, "", "StrictGreaterThan"], [68, 1, 1, "", "StrictLessThan"], [68, 1, 1, "", "Unequality"]], "sympy.core.relational.Equality": [[68, 2, 1, "", "as_poly"], [68, 2, 1, "", "integrate"]], "sympy.core.relational.Relational": [[68, 3, 1, "", "canonical"], [68, 2, 1, "", "equals"], [68, 3, 1, "", "lhs"], [68, 3, 1, "", "negated"], [68, 3, 1, "", "reversed"], [68, 3, 1, "", "reversedsign"], [68, 3, 1, "", "rhs"], [68, 3, 1, "", "strict"], [68, 3, 1, "", "weak"]], "sympy.core.singleton": [[68, 1, 1, "", "Singleton"], [68, 1, 1, "", "SingletonRegistry"]], "sympy.core.sorting": [[68, 4, 1, "", "default_sort_key"], [68, 4, 1, "", "ordered"]], "sympy.core.symbol": [[68, 1, 1, "", "Dummy"], [68, 1, 1, "", "Symbol"], [68, 1, 1, "", "Wild"], [68, 4, 1, "", "symbols"], [68, 4, 1, "", "var"]], "sympy.core.sympify": [[68, 4, 1, "", "sympify"]], "sympy.core.traversal": [[68, 4, 1, "", "bottom_up"], [68, 4, 1, "", "postorder_traversal"], [68, 4, 1, "", "preorder_traversal"], [68, 4, 1, "", "use"], [68, 4, 1, "", "walk"]], "sympy.crypto": [[69, 0, 0, "-", "crypto"]], "sympy.crypto.crypto": [[69, 4, 1, "", "AZ"], [69, 4, 1, "", "bifid5_square"], [69, 4, 1, "", "bifid6_square"], [69, 4, 1, "", "check_and_join"], [69, 4, 1, "", "cycle_list"], [69, 4, 1, "", "decipher_affine"], [69, 4, 1, "", "decipher_atbash"], [69, 4, 1, "", "decipher_bifid"], [69, 4, 1, "", "decipher_bifid5"], [69, 4, 1, "", "decipher_bifid6"], [69, 4, 1, "", "decipher_elgamal"], [69, 4, 1, "", "decipher_gm"], [69, 4, 1, "", "decipher_hill"], [69, 4, 1, "", "decipher_kid_rsa"], [69, 4, 1, "", "decipher_railfence"], [69, 4, 1, "", "decipher_rot13"], [69, 4, 1, "", "decipher_rsa"], [69, 4, 1, "", "decipher_shift"], [69, 4, 1, "", "decipher_vigenere"], [69, 4, 1, "", "decode_morse"], [69, 4, 1, "", "dh_private_key"], [69, 4, 1, "", "dh_public_key"], [69, 4, 1, "", "dh_shared_key"], [69, 4, 1, "", "elgamal_private_key"], [69, 4, 1, "", "elgamal_public_key"], [69, 4, 1, "", "encipher_affine"], [69, 4, 1, "", "encipher_atbash"], [69, 4, 1, "", "encipher_bifid"], [69, 4, 1, "", "encipher_bifid5"], [69, 4, 1, "", "encipher_bifid6"], [69, 4, 1, "", "encipher_elgamal"], [69, 4, 1, "", "encipher_gm"], [69, 4, 1, "", "encipher_hill"], [69, 4, 1, "", "encipher_kid_rsa"], [69, 4, 1, "", "encipher_railfence"], [69, 4, 1, "", "encipher_rot13"], [69, 4, 1, "", "encipher_rsa"], [69, 4, 1, "", "encipher_shift"], [69, 4, 1, "", "encipher_substitution"], [69, 4, 1, "", "encipher_vigenere"], [69, 4, 1, "", "encode_morse"], [69, 4, 1, "", "gm_private_key"], [69, 4, 1, "", "gm_public_key"], [69, 4, 1, "", "kid_rsa_private_key"], [69, 4, 1, "", "kid_rsa_public_key"], [69, 4, 1, "", "lfsr_autocorrelation"], [69, 4, 1, "", "lfsr_connection_polynomial"], [69, 4, 1, "", "lfsr_sequence"], [69, 4, 1, "", "padded_key"], [69, 4, 1, "", "rsa_private_key"], [69, 4, 1, "", "rsa_public_key"]], "sympy.diffgeom": [[70, 1, 1, "", "BaseCovarDerivativeOp"], [70, 1, 1, "", "BaseScalarField"], [70, 1, 1, "", "BaseVectorField"], [70, 1, 1, "", "Commutator"], [70, 1, 1, "", "CoordSystem"], [70, 1, 1, "", "CoordinateSymbol"], [70, 1, 1, "", "CovarDerivativeOp"], [70, 1, 1, "", "Differential"], [70, 1, 1, "", "LieDerivative"], [70, 1, 1, "", "Manifold"], [70, 1, 1, "", "Patch"], [70, 1, 1, "", "Point"], [70, 1, 1, "", "TensorProduct"], [70, 1, 1, "", "WedgeProduct"], [70, 4, 1, "", "intcurve_diffequ"], [70, 4, 1, "", "intcurve_series"], [70, 4, 1, "", "metric_to_Christoffel_1st"], [70, 4, 1, "", "metric_to_Christoffel_2nd"], [70, 4, 1, "", "metric_to_Ricci_components"], [70, 4, 1, "", "metric_to_Riemann_components"], [70, 4, 1, "", "twoform_to_matrix"], [70, 4, 1, "", "vectors_in_basis"]], "sympy.diffgeom.CoordSystem": [[70, 2, 1, "", "base_oneform"], [70, 2, 1, "", "base_oneforms"], [70, 2, 1, "", "base_scalar"], [70, 2, 1, "", "base_scalars"], [70, 2, 1, "", "base_vector"], [70, 2, 1, "", "base_vectors"], [70, 2, 1, "", "coord_function"], [70, 2, 1, "", "coord_functions"], [70, 2, 1, "", "coord_tuple_transform_to"], [70, 2, 1, "", "jacobian"], [70, 2, 1, "", "jacobian_determinant"], [70, 2, 1, "", "jacobian_matrix"], [70, 2, 1, "", "point"], [70, 2, 1, "", "point_to_coords"], [70, 2, 1, "", "transform"], [70, 2, 1, "", "transformation"]], "sympy.diffgeom.Point": [[70, 2, 1, "", "coords"]], "sympy.discrete": [[71, 0, 0, "-", "convolutions"], [71, 0, 0, "-", "transforms"]], "sympy.discrete.convolutions": [[71, 4, 1, "", "convolution"], [71, 4, 1, "", "convolution_fft"], [71, 4, 1, "", "convolution_fwht"], [71, 4, 1, "", "convolution_ntt"], [71, 4, 1, "", "convolution_subset"], [71, 4, 1, "", "covering_product"], [71, 4, 1, "", "intersecting_product"]], "sympy.discrete.transforms": [[71, 4, 1, "", "fft"], [71, 4, 1, "", "fwht"], [71, 4, 1, "", "ifft"], [71, 4, 1, "", "ifwht"], [71, 4, 1, "", "intt"], [71, 4, 1, "", "inverse_mobius_transform"], [71, 4, 1, "", "mobius_transform"], [71, 4, 1, "", "ntt"]], "sympy.external.pythonmpq": [[211, 1, 1, "", "PythonMPQ"]], "sympy.functions.combinatorial.factorials": [[73, 1, 1, "", "FallingFactorial"], [73, 1, 1, "", "MultiFactorial"], [73, 1, 1, "", "RisingFactorial"], [73, 1, 1, "", "binomial"], [73, 1, 1, "", "factorial"], [73, 1, 1, "", "factorial2"], [73, 1, 1, "", "subfactorial"]], "sympy.functions.combinatorial.numbers": [[73, 1, 1, "", "andre"], [73, 1, 1, "", "bell"], [73, 1, 1, "", "bernoulli"], [73, 1, 1, "", "catalan"], [73, 1, 1, "", "euler"], [73, 1, 1, "", "fibonacci"], [73, 1, 1, "", "genocchi"], [73, 1, 1, "", "harmonic"], [73, 1, 1, "", "lucas"], [73, 4, 1, "", "nC"], [73, 4, 1, "", "nP"], [73, 4, 1, "", "nT"], [73, 1, 1, "", "partition"], [73, 4, 1, "", "stirling"], [73, 1, 1, "", "tribonacci"]], "sympy.functions.elementary.complexes": [[74, 1, 1, "", "Abs"], [74, 1, 1, "", "arg"], [74, 1, 1, "", "conjugate"], [74, 1, 1, "", "im"], [74, 1, 1, "", "periodic_argument"], [74, 1, 1, "", "polar_lift"], [74, 1, 1, "", "principal_branch"], [74, 1, 1, "", "re"], [74, 1, 1, "", "sign"]], "sympy.functions.elementary.complexes.Abs": [[74, 2, 1, "", "fdiff"]], "sympy.functions.elementary.complexes.im": [[74, 2, 1, "", "as_real_imag"]], "sympy.functions.elementary.complexes.re": [[74, 2, 1, "", "as_real_imag"]], "sympy.functions.elementary.exponential": [[74, 1, 1, "", "LambertW"], [74, 1, 1, "", "exp"], [74, 1, 1, "", "exp_polar"], [74, 1, 1, "", "log"]], "sympy.functions.elementary.exponential.LambertW": [[74, 2, 1, "", "fdiff"]], "sympy.functions.elementary.exponential.exp": [[74, 2, 1, "", "as_real_imag"], [74, 3, 1, "", "base"], [74, 2, 1, "", "fdiff"], [74, 2, 1, "", "taylor_term"]], "sympy.functions.elementary.exponential.log": [[74, 2, 1, "", "as_base_exp"], [74, 2, 1, "", "as_real_imag"], [74, 2, 1, "", "fdiff"], [74, 2, 1, "", "inverse"], [74, 2, 1, "", "taylor_term"]], "sympy.functions.elementary.hyperbolic": [[74, 1, 1, "", "HyperbolicFunction"], [74, 1, 1, "", "acosh"], [74, 1, 1, "", "acoth"], [74, 1, 1, "", "acsch"], [74, 1, 1, "", "asech"], [74, 1, 1, "", "asinh"], [74, 1, 1, "", "atanh"], [74, 1, 1, "", "cosh"], [74, 1, 1, "", "coth"], [74, 1, 1, "", "csch"], [74, 1, 1, "", "sech"], [74, 1, 1, "", "sinh"], [74, 1, 1, "", "tanh"]], "sympy.functions.elementary.hyperbolic.acosh": [[74, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.acoth": [[74, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.acsch": [[74, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.asech": [[74, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.asinh": [[74, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.atanh": [[74, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.coth": [[74, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.csch": [[74, 2, 1, "", "fdiff"], [74, 2, 1, "", "taylor_term"]], "sympy.functions.elementary.hyperbolic.sinh": [[74, 2, 1, "", "as_real_imag"], [74, 2, 1, "", "fdiff"], [74, 2, 1, "", "inverse"], [74, 2, 1, "", "taylor_term"]], "sympy.functions.elementary.hyperbolic.tanh": [[74, 2, 1, "", "inverse"]], "sympy.functions.elementary.integers": [[74, 1, 1, "", "RoundFunction"], [74, 1, 1, "", "ceiling"], [74, 1, 1, "", "floor"], [74, 1, 1, "", "frac"]], "sympy.functions.elementary.miscellaneous": [[74, 1, 1, "", "IdentityFunction"], [74, 1, 1, "", "Max"], [74, 1, 1, "", "Min"], [74, 4, 1, "", "cbrt"], [74, 4, 1, "", "real_root"], [74, 4, 1, "", "root"], [74, 4, 1, "", "sqrt"]], "sympy.functions.elementary.piecewise": [[74, 1, 1, "", "ExprCondPair"], [74, 1, 1, "", "Piecewise"], [74, 4, 1, "", "piecewise_exclusive"], [74, 4, 1, "", "piecewise_fold"]], "sympy.functions.elementary.piecewise.ExprCondPair": [[74, 3, 1, "", "cond"], [74, 3, 1, "", "expr"]], "sympy.functions.elementary.piecewise.Piecewise": [[74, 2, 1, "", "_eval_integral"], [74, 2, 1, "", "as_expr_set_pairs"], [74, 2, 1, "", "doit"], [74, 2, 1, "", "eval"], [74, 2, 1, "", "piecewise_integrate"]], "sympy.functions.elementary.trigonometric": [[74, 1, 1, "", "acos"], [74, 1, 1, "", "acot"], [74, 1, 1, "", "acsc"], [74, 1, 1, "", "asec"], [74, 1, 1, "", "asin"], [74, 1, 1, "", "atan"], [74, 1, 1, "", "atan2"], [74, 1, 1, "", "cos"], [74, 1, 1, "", "cot"], [74, 1, 1, "", "csc"], [74, 1, 1, "", "sec"], [74, 1, 1, "", "sin"], [74, 1, 1, "", "sinc"], [74, 1, 1, "", "tan"]], "sympy.functions.elementary.trigonometric.acos": [[74, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.acot": [[74, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.acsc": [[74, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.asec": [[74, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.asin": [[74, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.atan": [[74, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.cot": [[74, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.tan": [[74, 2, 1, "", "inverse"]], "sympy.functions.special": [[76, 0, 0, "-", "bessel"], [76, 0, 0, "-", "beta_functions"], [76, 0, 0, "-", "elliptic_integrals"], [76, 0, 0, "-", "error_functions"], [76, 0, 0, "-", "gamma_functions"], [76, 0, 0, "-", "mathieu_functions"], [76, 0, 0, "-", "polynomials"], [76, 0, 0, "-", "singularity_functions"], [76, 0, 0, "-", "zeta_functions"]], "sympy.functions.special.bessel": [[76, 1, 1, "", "AiryBase"], [76, 1, 1, "", "BesselBase"], [76, 1, 1, "", "airyai"], [76, 1, 1, "", "airyaiprime"], [76, 1, 1, "", "airybi"], [76, 1, 1, "", "airybiprime"], [76, 1, 1, "", "besseli"], [76, 1, 1, "", "besselj"], [76, 1, 1, "", "besselk"], [76, 1, 1, "", "bessely"], [76, 1, 1, "", "hankel1"], [76, 1, 1, "", "hankel2"], [76, 1, 1, "", "jn"], [76, 4, 1, "", "jn_zeros"], [76, 1, 1, "", "marcumq"], [76, 1, 1, "", "yn"]], "sympy.functions.special.bessel.BesselBase": [[76, 3, 1, "", "argument"], [76, 3, 1, "", "order"]], "sympy.functions.special.beta_functions": [[76, 1, 1, "", "beta"]], "sympy.functions.special.bsplines": [[76, 4, 1, "", "bspline_basis"], [76, 4, 1, "", "bspline_basis_set"], [76, 4, 1, "", "interpolating_spline"]], "sympy.functions.special.delta_functions": [[76, 1, 1, "", "DiracDelta"], [76, 1, 1, "", "Heaviside"]], "sympy.functions.special.delta_functions.DiracDelta": [[76, 2, 1, "", "eval"], [76, 2, 1, "", "fdiff"], [76, 2, 1, "", "is_simple"]], "sympy.functions.special.delta_functions.Heaviside": [[76, 2, 1, "", "eval"], [76, 2, 1, "", "fdiff"], [76, 3, 1, "", "pargs"]], "sympy.functions.special.elliptic_integrals": [[76, 1, 1, "", "elliptic_e"], [76, 1, 1, "", "elliptic_f"], [76, 1, 1, "", "elliptic_k"], [76, 1, 1, "", "elliptic_pi"]], "sympy.functions.special.error_functions": [[76, 1, 1, "", "Chi"], [76, 1, 1, "", "Ci"], [76, 4, 1, "", "E1"], [76, 1, 1, "", "Ei"], [76, 1, 1, "", "FresnelIntegral"], [76, 1, 1, "", "Li"], [76, 1, 1, "", "Shi"], [76, 1, 1, "", "Si"], [76, 1, 1, "", "erf"], [76, 1, 1, "", "erf2"], [76, 1, 1, "", "erf2inv"], [76, 1, 1, "", "erfc"], [76, 1, 1, "", "erfcinv"], [76, 1, 1, "", "erfi"], [76, 1, 1, "", "erfinv"], [76, 1, 1, "", "expint"], [76, 1, 1, "", "fresnelc"], [76, 1, 1, "", "fresnels"], [76, 1, 1, "", "li"]], "sympy.functions.special.error_functions.erf": [[76, 2, 1, "", "inverse"]], "sympy.functions.special.error_functions.erfc": [[76, 2, 1, "", "inverse"]], "sympy.functions.special.error_functions.erfcinv": [[76, 2, 1, "", "inverse"]], "sympy.functions.special.error_functions.erfinv": [[76, 2, 1, "", "inverse"]], "sympy.functions.special.gamma_functions": [[76, 1, 1, "", "digamma"], [76, 1, 1, "", "gamma"], [76, 1, 1, "", "loggamma"], [76, 1, 1, "", "lowergamma"], [76, 1, 1, "", "multigamma"], [76, 1, 1, "", "polygamma"], [76, 1, 1, "", "trigamma"], [76, 1, 1, "", "uppergamma"]], "sympy.functions.special.hyper": [[76, 1, 1, "", "appellf1"], [76, 1, 1, "", "hyper"], [76, 1, 1, "", "meijerg"]], "sympy.functions.special.hyper.hyper": [[76, 3, 1, "", "ap"], [76, 3, 1, "", "argument"], [76, 3, 1, "", "bq"], [76, 3, 1, "", "convergence_statement"], [76, 3, 1, "", "eta"], [76, 3, 1, "", "radius_of_convergence"]], "sympy.functions.special.hyper.meijerg": [[76, 3, 1, "", "an"], [76, 3, 1, "", "aother"], [76, 3, 1, "", "ap"], [76, 3, 1, "", "argument"], [76, 3, 1, "", "bm"], [76, 3, 1, "", "bother"], [76, 3, 1, "", "bq"], [76, 3, 1, "", "delta"], [76, 2, 1, "", "get_period"], [76, 2, 1, "", "integrand"], [76, 3, 1, "", "is_number"], [76, 3, 1, "", "nu"]], "sympy.functions.special.mathieu_functions": [[76, 1, 1, "", "MathieuBase"], [76, 1, 1, "", "mathieuc"], [76, 1, 1, "", "mathieucprime"], [76, 1, 1, "", "mathieus"], [76, 1, 1, "", "mathieusprime"]], "sympy.functions.special.polynomials": [[76, 1, 1, "", "assoc_laguerre"], [76, 1, 1, "", "assoc_legendre"], [76, 1, 1, "", "chebyshevt"], [76, 1, 1, "", "chebyshevt_root"], [76, 1, 1, "", "chebyshevu"], [76, 1, 1, "", "chebyshevu_root"], [76, 1, 1, "", "gegenbauer"], [76, 1, 1, "", "hermite"], [76, 1, 1, "", "hermite_prob"], [76, 1, 1, "", "jacobi"], [76, 4, 1, "", "jacobi_normalized"], [76, 1, 1, "", "laguerre"], [76, 1, 1, "", "legendre"]], "sympy.functions.special.singularity_functions": [[76, 1, 1, "", "SingularityFunction"]], "sympy.functions.special.singularity_functions.SingularityFunction": [[76, 2, 1, "", "eval"], [76, 2, 1, "", "fdiff"]], "sympy.functions.special.spherical_harmonics": [[76, 1, 1, "", "Ynm"], [76, 4, 1, "", "Ynm_c"], [76, 1, 1, "", "Znm"]], "sympy.functions.special.tensor_functions": [[76, 4, 1, "", "Eijk"], [76, 1, 1, "", "KroneckerDelta"], [76, 1, 1, "", "LeviCivita"], [76, 4, 1, "", "eval_levicivita"]], "sympy.functions.special.tensor_functions.KroneckerDelta": [[76, 2, 1, "", "eval"], [76, 3, 1, "", "indices_contain_equal_information"], [76, 3, 1, "", "is_above_fermi"], [76, 3, 1, "", "is_below_fermi"], [76, 3, 1, "", "is_only_above_fermi"], [76, 3, 1, "", "is_only_below_fermi"], [76, 3, 1, "", "killable_index"], [76, 3, 1, "", "preferred_index"]], "sympy.functions.special.zeta_functions": [[76, 1, 1, "", "dirichlet_eta"], [76, 1, 1, "", "lerchphi"], [76, 1, 1, "", "polylog"], [76, 1, 1, "", "stieltjes"], [76, 1, 1, "", "zeta"]], "sympy.geometry": [[77, 0, 0, "-", "curve"], [78, 0, 0, "-", "ellipse"], [79, 0, 0, "-", "entity"], [81, 0, 0, "-", "line"], [82, 0, 0, "-", "plane"], [83, 0, 0, "-", "point"], [84, 0, 0, "-", "polygon"], [85, 0, 0, "-", "util"]], "sympy.geometry.curve": [[77, 1, 1, "", "Curve"]], "sympy.geometry.curve.Curve": [[77, 3, 1, "", "ambient_dimension"], [77, 2, 1, "", "arbitrary_point"], [77, 3, 1, "", "free_symbols"], [77, 3, 1, "", "functions"], [77, 3, 1, "", "length"], [77, 3, 1, "", "limits"], [77, 3, 1, "", "parameter"], [77, 2, 1, "", "plot_interval"], [77, 2, 1, "", "rotate"], [77, 2, 1, "", "scale"], [77, 2, 1, "", "translate"]], "sympy.geometry.ellipse": [[78, 1, 1, "", "Circle"], [78, 1, 1, "", "Ellipse"]], "sympy.geometry.ellipse.Circle": [[78, 3, 1, "", "circumference"], [78, 2, 1, "", "equation"], [78, 2, 1, "", "intersection"], [78, 3, 1, "", "radius"], [78, 2, 1, "", "reflect"], [78, 2, 1, "", "scale"], [78, 3, 1, "", "vradius"]], "sympy.geometry.ellipse.Ellipse": [[78, 3, 1, "", "apoapsis"], [78, 2, 1, "", "arbitrary_point"], [78, 3, 1, "", "area"], [78, 2, 1, "", "auxiliary_circle"], [78, 3, 1, "", "bounds"], [78, 3, 1, "", "center"], [78, 3, 1, "", "circumference"], [78, 2, 1, "", "director_circle"], [78, 3, 1, "", "eccentricity"], [78, 2, 1, "", "encloses_point"], [78, 2, 1, "", "equation"], [78, 2, 1, "", "evolute"], [78, 3, 1, "", "foci"], [78, 3, 1, "", "focus_distance"], [78, 3, 1, "", "hradius"], [78, 2, 1, "", "intersection"], [78, 2, 1, "", "is_tangent"], [78, 3, 1, "", "major"], [78, 3, 1, "", "minor"], [78, 2, 1, "", "normal_lines"], [78, 3, 1, "", "periapsis"], [78, 2, 1, "", "plot_interval"], [78, 2, 1, "", "polar_second_moment_of_area"], [78, 2, 1, "", "random_point"], [78, 2, 1, "", "reflect"], [78, 2, 1, "", "rotate"], [78, 2, 1, "", "scale"], [78, 2, 1, "", "second_moment_of_area"], [78, 2, 1, "", "section_modulus"], [78, 3, 1, "", "semilatus_rectum"], [78, 2, 1, "", "tangent_lines"], [78, 3, 1, "", "vradius"]], "sympy.geometry.entity": [[79, 1, 1, "", "GeometryEntity"]], "sympy.geometry.entity.GeometryEntity": [[79, 3, 1, "", "ambient_dimension"], [79, 3, 1, "", "bounds"], [79, 2, 1, "", "encloses"], [79, 2, 1, "", "intersection"], [79, 2, 1, "", "is_similar"], [79, 2, 1, "", "parameter_value"], [79, 2, 1, "", "reflect"], [79, 2, 1, "", "rotate"], [79, 2, 1, "", "scale"], [79, 2, 1, "", "translate"]], "sympy.geometry.line": [[81, 1, 1, "", "Line"], [81, 1, 1, "", "Line2D"], [81, 1, 1, "", "Line3D"], [81, 1, 1, "", "LinearEntity"], [81, 1, 1, "", "LinearEntity2D"], [81, 1, 1, "", "LinearEntity3D"], [81, 1, 1, "", "Ray"], [81, 1, 1, "", "Ray2D"], [81, 1, 1, "", "Ray3D"], [81, 1, 1, "", "Segment"], [81, 1, 1, "", "Segment2D"], [81, 1, 1, "", "Segment3D"]], "sympy.geometry.line.Line": [[81, 2, 1, "", "contains"], [81, 2, 1, "", "distance"], [81, 2, 1, "", "equals"], [81, 2, 1, "", "plot_interval"]], "sympy.geometry.line.Line2D": [[81, 3, 1, "", "coefficients"], [81, 2, 1, "", "equation"]], "sympy.geometry.line.Line3D": [[81, 2, 1, "", "distance"], [81, 2, 1, "", "equation"]], "sympy.geometry.line.LinearEntity": [[81, 3, 1, "", "ambient_dimension"], [81, 2, 1, "", "angle_between"], [81, 2, 1, "", "arbitrary_point"], [81, 2, 1, "", "are_concurrent"], [81, 2, 1, "", "bisectors"], [81, 2, 1, "", "contains"], [81, 3, 1, "", "direction"], [81, 2, 1, "", "intersection"], [81, 2, 1, "", "is_parallel"], [81, 2, 1, "", "is_perpendicular"], [81, 2, 1, "", "is_similar"], [81, 3, 1, "", "length"], [81, 3, 1, "", "p1"], [81, 3, 1, "", "p2"], [81, 2, 1, "", "parallel_line"], [81, 2, 1, "", "perpendicular_line"], [81, 2, 1, "", "perpendicular_segment"], [81, 3, 1, "", "points"], [81, 2, 1, "", "projection"], [81, 2, 1, "", "random_point"], [81, 2, 1, "", "smallest_angle_between"]], "sympy.geometry.line.LinearEntity2D": [[81, 3, 1, "", "bounds"], [81, 2, 1, "", "perpendicular_line"], [81, 3, 1, "", "slope"]], "sympy.geometry.line.LinearEntity3D": [[81, 3, 1, "", "direction_cosine"], [81, 3, 1, "", "direction_ratio"]], "sympy.geometry.line.Ray": [[81, 2, 1, "", "contains"], [81, 2, 1, "", "distance"], [81, 2, 1, "", "equals"], [81, 2, 1, "", "plot_interval"], [81, 3, 1, "", "source"]], "sympy.geometry.line.Ray2D": [[81, 2, 1, "", "closing_angle"], [81, 3, 1, "", "xdirection"], [81, 3, 1, "", "ydirection"]], "sympy.geometry.line.Ray3D": [[81, 3, 1, "", "xdirection"], [81, 3, 1, "", "ydirection"], [81, 3, 1, "", "zdirection"]], "sympy.geometry.line.Segment": [[81, 2, 1, "", "contains"], [81, 2, 1, "", "distance"], [81, 2, 1, "", "equals"], [81, 3, 1, "", "length"], [81, 3, 1, "", "midpoint"], [81, 2, 1, "", "perpendicular_bisector"], [81, 2, 1, "", "plot_interval"]], "sympy.geometry.plane": [[82, 1, 1, "", "Plane"]], "sympy.geometry.plane.Plane": [[82, 2, 1, "", "angle_between"], [82, 2, 1, "", "arbitrary_point"], [82, 2, 1, "", "are_concurrent"], [82, 2, 1, "", "distance"], [82, 2, 1, "", "equals"], [82, 2, 1, "", "equation"], [82, 2, 1, "", "intersection"], [82, 2, 1, "", "is_coplanar"], [82, 2, 1, "", "is_parallel"], [82, 2, 1, "", "is_perpendicular"], [82, 3, 1, "", "normal_vector"], [82, 3, 1, "", "p1"], [82, 2, 1, "", "parallel_plane"], [82, 2, 1, "", "parameter_value"], [82, 2, 1, "", "perpendicular_line"], [82, 2, 1, "", "perpendicular_plane"], [82, 2, 1, "", "projection"], [82, 2, 1, "", "projection_line"], [82, 2, 1, "", "random_point"]], "sympy.geometry.point": [[83, 1, 1, "", "Point"], [83, 1, 1, "", "Point2D"], [83, 1, 1, "", "Point3D"]], "sympy.geometry.point.Point": [[83, 2, 1, "", "affine_rank"], [83, 3, 1, "", "ambient_dimension"], [83, 2, 1, "", "are_coplanar"], [83, 2, 1, "", "canberra_distance"], [83, 2, 1, "", "distance"], [83, 2, 1, "", "dot"], [83, 2, 1, "", "equals"], [83, 2, 1, "", "intersection"], [83, 2, 1, "", "is_collinear"], [83, 2, 1, "", "is_concyclic"], [83, 3, 1, "", "is_nonzero"], [83, 2, 1, "", "is_scalar_multiple"], [83, 3, 1, "", "is_zero"], [83, 3, 1, "", "length"], [83, 2, 1, "", "midpoint"], [83, 3, 1, "", "origin"], [83, 3, 1, "", "orthogonal_direction"], [83, 2, 1, "", "project"], [83, 2, 1, "", "taxicab_distance"], [83, 3, 1, "", "unit"]], "sympy.geometry.point.Point2D": [[83, 3, 1, "", "bounds"], [83, 3, 1, "", "coordinates"], [83, 2, 1, "", "rotate"], [83, 2, 1, "", "scale"], [83, 2, 1, "", "transform"], [83, 2, 1, "", "translate"], [83, 3, 1, "", "x"], [83, 3, 1, "", "y"]], "sympy.geometry.point.Point3D": [[83, 2, 1, "", "are_collinear"], [83, 3, 1, "", "coordinates"], [83, 2, 1, "", "direction_cosine"], [83, 2, 1, "", "direction_ratio"], [83, 2, 1, "", "intersection"], [83, 2, 1, "", "scale"], [83, 2, 1, "", "transform"], [83, 2, 1, "", "translate"], [83, 3, 1, "", "x"], [83, 3, 1, "", "y"], [83, 3, 1, "", "z"]], "sympy.geometry.polygon": [[84, 1, 1, "", "Polygon"], [84, 1, 1, "", "RegularPolygon"], [84, 1, 1, "", "Triangle"]], "sympy.geometry.polygon.Polygon": [[84, 3, 1, "", "angles"], [84, 2, 1, "", "arbitrary_point"], [84, 3, 1, "", "area"], [84, 2, 1, "", "bisectors"], [84, 3, 1, "", "bounds"], [84, 3, 1, "", "centroid"], [84, 2, 1, "", "cut_section"], [84, 2, 1, "", "distance"], [84, 2, 1, "", "encloses_point"], [84, 2, 1, "", "first_moment_of_area"], [84, 2, 1, "", "intersection"], [84, 2, 1, "", "is_convex"], [84, 3, 1, "", "perimeter"], [84, 2, 1, "", "plot_interval"], [84, 2, 1, "", "polar_second_moment_of_area"], [84, 2, 1, "", "second_moment_of_area"], [84, 2, 1, "", "section_modulus"], [84, 3, 1, "", "sides"], [84, 3, 1, "", "vertices"]], "sympy.geometry.polygon.RegularPolygon": [[84, 3, 1, "", "angles"], [84, 3, 1, "", "apothem"], [84, 3, 1, "", "area"], [84, 3, 1, "", "args"], [84, 3, 1, "", "center"], [84, 3, 1, "", "centroid"], [84, 3, 1, "", "circumcenter"], [84, 3, 1, "", "circumcircle"], [84, 3, 1, "", "circumradius"], [84, 2, 1, "", "encloses_point"], [84, 3, 1, "", "exterior_angle"], [84, 3, 1, "", "incircle"], [84, 3, 1, "", "inradius"], [84, 3, 1, "", "interior_angle"], [84, 3, 1, "", "length"], [84, 3, 1, "", "radius"], [84, 2, 1, "", "reflect"], [84, 2, 1, "", "rotate"], [84, 3, 1, "", "rotation"], [84, 2, 1, "", "scale"], [84, 2, 1, "", "spin"], [84, 3, 1, "", "vertices"]], "sympy.geometry.polygon.Triangle": [[84, 3, 1, "", "altitudes"], [84, 2, 1, "", "bisectors"], [84, 3, 1, "", "circumcenter"], [84, 3, 1, "", "circumcircle"], [84, 3, 1, "", "circumradius"], [84, 3, 1, "", "eulerline"], [84, 3, 1, "", "excenters"], [84, 3, 1, "", "exradii"], [84, 3, 1, "", "incenter"], [84, 3, 1, "", "incircle"], [84, 3, 1, "", "inradius"], [84, 2, 1, "", "is_equilateral"], [84, 2, 1, "", "is_isosceles"], [84, 2, 1, "", "is_right"], [84, 2, 1, "", "is_scalene"], [84, 2, 1, "", "is_similar"], [84, 3, 1, "", "medial"], [84, 3, 1, "", "medians"], [84, 3, 1, "", "nine_point_circle"], [84, 3, 1, "", "orthocenter"], [84, 3, 1, "", "vertices"]], "sympy.geometry.util": [[85, 4, 1, "", "are_similar"], [85, 4, 1, "", "centroid"], [85, 4, 1, "", "convex_hull"], [85, 4, 1, "", "idiff"], [85, 4, 1, "", "intersection"]], "sympy.holonomic.holonomic": [[91, 1, 1, "", "DifferentialOperator"], [91, 1, 1, "", "DifferentialOperatorAlgebra"], [91, 4, 1, "", "DifferentialOperators"], [91, 1, 1, "", "HolonomicFunction"], [89, 4, 1, "", "_convert_poly_rat_alg"], [89, 4, 1, "", "_create_table"], [87, 4, 1, "", "expr_to_holonomic"], [87, 4, 1, "", "from_hyper"], [87, 4, 1, "", "from_meijerg"]], "sympy.holonomic.holonomic.DifferentialOperator": [[91, 2, 1, "", "is_singular"]], "sympy.holonomic.holonomic.HolonomicFunction": [[90, 2, 1, "", "composition"], [90, 2, 1, "", "diff"], [90, 2, 1, "", "evalf"], [90, 2, 1, "", "integrate"], [90, 2, 1, "", "series"], [90, 2, 1, "", "to_expr"], [90, 2, 1, "", "to_hyper"], [90, 2, 1, "", "to_meijerg"], [90, 2, 1, "", "to_sequence"]], "sympy.integrals.deltafunctions": [[95, 4, 1, "", "deltaintegrate"]], "sympy.integrals.heurisch": [[95, 4, 1, "", "components"], [95, 4, 1, "", "heurisch"]], "sympy.integrals.integrals": [[95, 1, 1, "", "Integral"], [95, 4, 1, "", "integrate"], [95, 4, 1, "", "line_integrate"]], "sympy.integrals.integrals.Integral": [[95, 2, 1, "", "as_sum"], [95, 2, 1, "", "doit"], [95, 3, 1, "", "free_symbols"], [95, 6, 1, "", "is_commutative"], [95, 2, 1, "", "principal_value"], [95, 2, 1, "", "transform"]], "sympy.integrals": [[95, 0, 0, "-", "intpoly"], [93, 0, 0, "-", "meijerint"], [93, 0, 0, "-", "meijerint_doc"], [95, 0, 0, "-", "transforms"]], "sympy.integrals.intpoly": [[95, 4, 1, "", "polytope_integrate"]], "sympy.integrals.manualintegrate": [[95, 4, 1, "", "integral_steps"], [95, 4, 1, "", "manualintegrate"]], "sympy.integrals.meijerint": [[93, 7, 1, "", "_CoeffExpValueError"], [93, 4, 1, "", "_check_antecedents"], [93, 4, 1, "", "_check_antecedents_1"], [93, 4, 1, "", "_check_antecedents_inversion"], [93, 4, 1, "", "_condsimp"], [93, 4, 1, "", "_create_lookup_table"], [93, 4, 1, "", "_dummy"], [93, 4, 1, "", "_dummy_"], [93, 4, 1, "", "_eval_cond"], [93, 4, 1, "", "_exponents"], [93, 4, 1, "", "_find_splitting_points"], [93, 4, 1, "", "_flip_g"], [93, 4, 1, "", "_functions"], [93, 4, 1, "", "_get_coeff_exp"], [93, 4, 1, "", "_guess_expansion"], [93, 4, 1, "", "_inflate_fox_h"], [93, 4, 1, "", "_inflate_g"], [93, 4, 1, "", "_int0oo"], [93, 4, 1, "", "_int0oo_1"], [93, 4, 1, "", "_int_inversion"], [93, 4, 1, "", "_is_analytic"], [93, 4, 1, "", "_meijerint_definite_2"], [93, 4, 1, "", "_meijerint_definite_3"], [93, 4, 1, "", "_meijerint_definite_4"], [93, 4, 1, "", "_meijerint_indefinite_1"], [93, 4, 1, "", "_mul_args"], [93, 4, 1, "", "_mul_as_two_parts"], [93, 4, 1, "", "_my_principal_branch"], [93, 4, 1, "", "_mytype"], [93, 4, 1, "", "_rewrite1"], [93, 4, 1, "", "_rewrite2"], [93, 4, 1, "", "_rewrite_inversion"], [93, 4, 1, "", "_rewrite_saxena"], [93, 4, 1, "", "_rewrite_saxena_1"], [93, 4, 1, "", "_rewrite_single"], [93, 4, 1, "", "_split_mul"], [93, 4, 1, "", "meijerint_definite"], [93, 4, 1, "", "meijerint_indefinite"], [93, 4, 1, "", "meijerint_inversion"]], "sympy.integrals.quadrature": [[95, 4, 1, "", "gauss_chebyshev_t"], [95, 4, 1, "", "gauss_chebyshev_u"], [95, 4, 1, "", "gauss_gen_laguerre"], [95, 4, 1, "", "gauss_hermite"], [95, 4, 1, "", "gauss_jacobi"], [95, 4, 1, "", "gauss_laguerre"], [95, 4, 1, "", "gauss_legendre"], [95, 4, 1, "", "gauss_lobatto"]], "sympy.integrals.rationaltools": [[95, 4, 1, "", "ratint"], [95, 4, 1, "", "ratint_logpart"], [95, 4, 1, "", "ratint_ratpart"]], "sympy.integrals.risch": [[95, 1, 1, "", "NonElementaryIntegral"], [95, 4, 1, "", "risch_integrate"]], "sympy.integrals.singularityfunctions": [[95, 4, 1, "", "singularityintegrate"]], "sympy.integrals.transforms": [[95, 1, 1, "", "CosineTransform"], [95, 1, 1, "", "FourierTransform"], [95, 1, 1, "", "HankelTransform"], [95, 1, 1, "", "IntegralTransform"], [95, 7, 1, "", "IntegralTransformError"], [95, 1, 1, "", "InverseCosineTransform"], [95, 1, 1, "", "InverseFourierTransform"], [95, 1, 1, "", "InverseHankelTransform"], [95, 1, 1, "", "InverseLaplaceTransform"], [95, 1, 1, "", "InverseMellinTransform"], [95, 1, 1, "", "InverseSineTransform"], [95, 1, 1, "", "LaplaceTransform"], [95, 1, 1, "", "MellinTransform"], [95, 1, 1, "", "SineTransform"], [95, 4, 1, "", "_fourier_transform"], [95, 4, 1, "", "cosine_transform"], [95, 4, 1, "", "fourier_transform"], [95, 4, 1, "", "hankel_transform"], [95, 4, 1, "", "inverse_cosine_transform"], [95, 4, 1, "", "inverse_fourier_transform"], [95, 4, 1, "", "inverse_hankel_transform"], [95, 4, 1, "", "inverse_laplace_transform"], [95, 4, 1, "", "inverse_mellin_transform"], [95, 4, 1, "", "inverse_sine_transform"], [95, 4, 1, "", "laplace_correspondence"], [95, 4, 1, "", "laplace_initial_conds"], [95, 4, 1, "", "laplace_transform"], [95, 4, 1, "", "mellin_transform"], [95, 4, 1, "", "sine_transform"]], "sympy.integrals.transforms.IntegralTransform": [[95, 2, 1, "", "doit"], [95, 3, 1, "", "function"], [95, 3, 1, "", "function_variable"], [95, 3, 1, "", "transform_variable"]], "sympy.integrals.transforms.InverseLaplaceTransform": [[95, 2, 1, "", "doit"]], "sympy.integrals.transforms.LaplaceTransform": [[95, 2, 1, "", "doit"]], "sympy.integrals.trigonometry": [[95, 4, 1, "", "trigintegrate"]], "sympy.interactive": [[96, 0, 0, "-", "printing"], [96, 0, 0, "-", "session"]], "sympy.interactive.printing": [[96, 4, 1, "", "init_printing"]], "sympy.interactive.session": [[96, 4, 1, "", "enable_automatic_int_sympification"], [96, 4, 1, "", "enable_automatic_symbols"], [96, 4, 1, "", "init_ipython_session"], [96, 4, 1, "", "init_python_session"], [96, 4, 1, "", "init_session"], [96, 4, 1, "", "int_to_Integer"]], "sympy.liealgebras.cartan_matrix": [[97, 4, 1, "", "CartanMatrix"]], "sympy.liealgebras.cartan_type": [[97, 1, 1, "", "CartanType_generator"], [97, 1, 1, "", "Standard_Cartan"]], "sympy.liealgebras.cartan_type.Standard_Cartan": [[97, 2, 1, "", "rank"], [97, 2, 1, "", "series"]], "sympy.liealgebras.dynkin_diagram": [[97, 4, 1, "", "DynkinDiagram"]], "sympy.liealgebras.root_system": [[97, 1, 1, "", "RootSystem"]], "sympy.liealgebras.root_system.RootSystem": [[97, 2, 1, "", "add_as_roots"], [97, 2, 1, "", "add_simple_roots"], [97, 2, 1, "", "all_roots"], [97, 2, 1, "", "cartan_matrix"], [97, 2, 1, "", "dynkin_diagram"], [97, 2, 1, "", "root_space"], [97, 2, 1, "", "simple_roots"]], "sympy.liealgebras.type_a": [[97, 1, 1, "", "TypeA"]], "sympy.liealgebras.type_a.TypeA": [[97, 2, 1, "", "basic_root"], [97, 2, 1, "", "basis"], [97, 2, 1, "", "cartan_matrix"], [97, 2, 1, "", "dimension"], [97, 2, 1, "", "highest_root"], [97, 2, 1, "", "lie_algebra"], [97, 2, 1, "", "positive_roots"], [97, 2, 1, "", "roots"], [97, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_b": [[97, 1, 1, "", "TypeB"]], "sympy.liealgebras.type_b.TypeB": [[97, 2, 1, "", "basic_root"], [97, 2, 1, "", "basis"], [97, 2, 1, "", "cartan_matrix"], [97, 2, 1, "", "dimension"], [97, 2, 1, "", "lie_algebra"], [97, 2, 1, "", "positive_roots"], [97, 2, 1, "", "roots"], [97, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_c": [[97, 1, 1, "", "TypeC"]], "sympy.liealgebras.type_c.TypeC": [[97, 2, 1, "", "basic_root"], [97, 2, 1, "", "basis"], [97, 2, 1, "", "cartan_matrix"], [97, 2, 1, "", "dimension"], [97, 2, 1, "", "lie_algebra"], [97, 2, 1, "", "positive_roots"], [97, 2, 1, "", "roots"], [97, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_d": [[97, 1, 1, "", "TypeD"]], "sympy.liealgebras.type_d.TypeD": [[97, 2, 1, "", "basic_root"], [97, 2, 1, "", "basis"], [97, 2, 1, "", "cartan_matrix"], [97, 2, 1, "", "dimension"], [97, 2, 1, "", "lie_algebra"], [97, 2, 1, "", "positive_roots"], [97, 2, 1, "", "roots"], [97, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_e": [[97, 1, 1, "", "TypeE"]], "sympy.liealgebras.type_e.TypeE": [[97, 2, 1, "", "basic_root"], [97, 2, 1, "", "basis"], [97, 2, 1, "", "cartan_matrix"], [97, 2, 1, "", "dimension"], [97, 2, 1, "", "positive_roots"], [97, 2, 1, "", "roots"], [97, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_f": [[97, 1, 1, "", "TypeF"]], "sympy.liealgebras.type_f.TypeF": [[97, 2, 1, "", "basic_root"], [97, 2, 1, "", "basis"], [97, 2, 1, "", "cartan_matrix"], [97, 2, 1, "", "dimension"], [97, 2, 1, "", "positive_roots"], [97, 2, 1, "", "roots"], [97, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_g": [[97, 1, 1, "", "TypeG"]], "sympy.liealgebras.type_g.TypeG": [[97, 2, 1, "", "basis"], [97, 2, 1, "", "cartan_matrix"], [97, 2, 1, "", "dimension"], [97, 2, 1, "", "positive_roots"], [97, 2, 1, "", "roots"], [97, 2, 1, "", "simple_root"]], "sympy.liealgebras.weyl_group": [[97, 1, 1, "", "WeylGroup"]], "sympy.liealgebras.weyl_group.WeylGroup": [[97, 2, 1, "", "coxeter_diagram"], [97, 2, 1, "", "delete_doubles"], [97, 2, 1, "", "element_order"], [97, 2, 1, "", "generators"], [97, 2, 1, "", "group_name"], [97, 2, 1, "", "group_order"], [97, 2, 1, "", "matrix_form"]], "sympy.logic.boolalg": [[98, 4, 1, "", "ANFform"], [98, 1, 1, "", "And"], [98, 1, 1, "", "Boolean"], [98, 1, 1, "", "BooleanFalse"], [98, 1, 1, "", "BooleanTrue"], [98, 1, 1, "", "Equivalent"], [98, 1, 1, "", "Exclusive"], [98, 1, 1, "", "ITE"], [98, 1, 1, "", "Implies"], [98, 1, 1, "", "Nand"], [98, 1, 1, "", "Nor"], [98, 1, 1, "", "Not"], [98, 1, 1, "", "Or"], [98, 4, 1, "", "POSform"], [98, 4, 1, "", "SOPform"], [98, 1, 1, "", "Xnor"], [98, 1, 1, "", "Xor"], [98, 4, 1, "", "anf_coeffs"], [98, 4, 1, "", "bool_map"], [98, 4, 1, "", "bool_maxterm"], [98, 4, 1, "", "bool_minterm"], [98, 4, 1, "", "bool_monomial"], [98, 4, 1, "", "distribute_and_over_or"], [98, 4, 1, "", "distribute_or_over_and"], [98, 4, 1, "", "distribute_xor_over_and"], [98, 4, 1, "", "eliminate_implications"], [98, 4, 1, "", "gateinputcount"], [98, 4, 1, "", "integer_to_term"], [98, 4, 1, "", "is_anf"], [98, 4, 1, "", "is_cnf"], [98, 4, 1, "", "is_dnf"], [98, 4, 1, "", "is_nnf"], [98, 4, 1, "", "simplify_logic"], [98, 4, 1, "", "term_to_integer"], [98, 4, 1, "", "to_anf"], [98, 4, 1, "", "to_cnf"], [98, 4, 1, "", "to_dnf"], [98, 4, 1, "", "to_int_repr"], [98, 4, 1, "", "to_nnf"], [98, 4, 1, "", "truth_table"]], "sympy.logic.boolalg.Boolean": [[98, 2, 1, "", "as_set"], [98, 2, 1, "", "equals"]], "sympy.logic.boolalg.BooleanFalse": [[98, 2, 1, "", "as_set"]], "sympy.logic.boolalg.BooleanTrue": [[98, 2, 1, "", "as_set"]], "sympy.logic": [[98, 0, 0, "-", "inference"]], "sympy.logic.inference": [[98, 4, 1, "", "satisfiable"]], "sympy.matrices": [[99, 0, 0, "-", "common"], [101, 0, 0, "-", "expressions"], [102, 0, 0, "-", "immutable"], [104, 0, 0, "-", "matrices"], [106, 0, 0, "-", "sparse"], [107, 0, 0, "-", "sparsetools"]], "sympy.matrices.common": [[99, 1, 1, "", "MatrixCommon"], [99, 1, 1, "", "MatrixKind"]], "sympy.matrices.common.MatrixCommon": [[99, 3, 1, "", "C"], [99, 3, 1, "", "H"], [99, 3, 1, "", "T"], [99, 2, 1, "", "__abs__"], [99, 2, 1, "", "__add__"], [99, 2, 1, "", "__getitem__"], [99, 2, 1, "", "__len__"], [99, 2, 1, "", "__mul__"], [99, 2, 1, "", "__pow__"], [99, 5, 1, "", "__weakref__"], [99, 2, 1, "", "adjoint"], [99, 2, 1, "", "applyfunc"], [99, 2, 1, "", "as_real_imag"], [99, 2, 1, "", "atoms"], [99, 2, 1, "", "col"], [99, 2, 1, "", "col_del"], [99, 2, 1, "", "col_insert"], [99, 2, 1, "", "col_join"], [99, 2, 1, "", "companion"], [99, 2, 1, "", "conjugate"], [99, 2, 1, "", "diag"], [99, 2, 1, "", "diagonal"], [99, 2, 1, "", "evalf"], [99, 2, 1, "", "expand"], [99, 2, 1, "", "extract"], [99, 2, 1, "", "eye"], [99, 3, 1, "", "free_symbols"], [99, 2, 1, "", "get_diag_blocks"], [99, 2, 1, "", "has"], [99, 2, 1, "", "hstack"], [99, 2, 1, "", "is_anti_symmetric"], [99, 2, 1, "", "is_diagonal"], [99, 3, 1, "", "is_hermitian"], [99, 3, 1, "", "is_lower"], [99, 3, 1, "", "is_lower_hessenberg"], [99, 3, 1, "", "is_square"], [99, 3, 1, "", "is_strongly_diagonally_dominant"], [99, 2, 1, "", "is_symbolic"], [99, 2, 1, "", "is_symmetric"], [99, 3, 1, "", "is_upper"], [99, 3, 1, "", "is_upper_hessenberg"], [99, 3, 1, "", "is_weakly_diagonally_dominant"], [99, 3, 1, "", "is_zero_matrix"], [99, 2, 1, "", "jordan_block"], [99, 2, 1, "", "lower_triangular"], [99, 2, 1, "", "multiply"], [99, 2, 1, "", "multiply_elementwise"], [99, 2, 1, "", "n"], [99, 2, 1, "", "ones"], [99, 2, 1, "", "permute"], [99, 2, 1, "", "permute_cols"], [99, 2, 1, "", "permute_rows"], [99, 2, 1, "", "pow"], [99, 2, 1, "", "refine"], [99, 2, 1, "", "replace"], [99, 2, 1, "", "reshape"], [99, 2, 1, "", "rmultiply"], [99, 2, 1, "", "rot90"], [99, 2, 1, "", "row"], [99, 2, 1, "", "row_del"], [99, 2, 1, "", "row_insert"], [99, 2, 1, "", "row_join"], [99, 3, 1, "", "shape"], [99, 2, 1, "", "simplify"], [99, 2, 1, "", "subs"], [99, 2, 1, "", "todod"], [99, 2, 1, "", "todok"], [99, 2, 1, "", "tolist"], [99, 2, 1, "", "trace"], [99, 2, 1, "", "transpose"], [99, 2, 1, "", "upper_triangular"], [99, 2, 1, "", "values"], [99, 2, 1, "", "vec"], [99, 2, 1, "", "vech"], [99, 2, 1, "", "vstack"], [99, 2, 1, "", "wilkinson"], [99, 2, 1, "", "xreplace"], [99, 2, 1, "", "zeros"]], "sympy.matrices.dense": [[100, 1, 1, "", "DenseMatrix"], [104, 4, 1, "", "GramSchmidt"], [100, 5, 1, "", "Matrix"], [100, 1, 1, "", "MutableDenseMatrix"], [104, 4, 1, "", "casoratian"], [104, 4, 1, "", "diag"], [104, 4, 1, "", "eye"], [104, 4, 1, "", "hessian"], [104, 4, 1, "", "jordan_cell"], [104, 4, 1, "", "list2numpy"], [104, 4, 1, "", "matrix2numpy"], [104, 4, 1, "", "matrix_multiply_elementwise"], [104, 4, 1, "", "ones"], [104, 4, 1, "", "randMatrix"], [104, 4, 1, "", "rot_axis1"], [104, 4, 1, "", "rot_axis2"], [104, 4, 1, "", "rot_axis3"], [104, 4, 1, "", "rot_ccw_axis1"], [104, 4, 1, "", "rot_ccw_axis2"], [104, 4, 1, "", "rot_ccw_axis3"], [104, 4, 1, "", "rot_givens"], [104, 4, 1, "", "symarray"], [104, 4, 1, "", "wronskian"], [104, 4, 1, "", "zeros"]], "sympy.matrices.dense.DenseMatrix": [[100, 2, 1, "", "LDLdecomposition"], [100, 2, 1, "", "as_immutable"], [100, 2, 1, "", "as_mutable"], [100, 2, 1, "", "cholesky"], [100, 2, 1, "", "lower_triangular_solve"], [100, 2, 1, "", "upper_triangular_solve"]], "sympy.matrices.dense.MutableDenseMatrix": [[100, 2, 1, "", "simplify"]], "sympy.matrices.expressions": [[101, 1, 1, "", "CompanionMatrix"], [101, 1, 1, "", "FunctionMatrix"], [101, 1, 1, "", "HadamardPower"], [101, 1, 1, "", "HadamardProduct"], [101, 1, 1, "", "Identity"], [101, 1, 1, "", "Inverse"], [101, 1, 1, "", "MatAdd"], [101, 1, 1, "", "MatMul"], [101, 1, 1, "", "MatPow"], [101, 1, 1, "", "MatrixExpr"], [101, 1, 1, "", "MatrixPermute"], [101, 1, 1, "", "MatrixSet"], [101, 1, 1, "", "MatrixSymbol"], [101, 1, 1, "", "PermutationMatrix"], [101, 1, 1, "", "Trace"], [101, 1, 1, "", "Transpose"], [101, 1, 1, "", "ZeroMatrix"], [101, 0, 0, "-", "blockmatrix"], [101, 4, 1, "", "hadamard_product"]], "sympy.matrices.expressions.MatrixExpr": [[101, 3, 1, "", "T"], [101, 2, 1, "", "as_coeff_Mul"], [101, 2, 1, "", "as_explicit"], [101, 2, 1, "", "as_mutable"], [101, 2, 1, "", "equals"], [101, 2, 1, "", "from_index_summation"]], "sympy.matrices.expressions.blockmatrix": [[101, 1, 1, "", "BlockDiagMatrix"], [101, 1, 1, "", "BlockMatrix"], [101, 4, 1, "", "block_collapse"]], "sympy.matrices.expressions.blockmatrix.BlockDiagMatrix": [[101, 2, 1, "", "get_diag_blocks"]], "sympy.matrices.expressions.blockmatrix.BlockMatrix": [[101, 2, 1, "", "LDUdecomposition"], [101, 2, 1, "", "LUdecomposition"], [101, 2, 1, "", "UDLdecomposition"], [101, 2, 1, "", "schur"], [101, 2, 1, "", "transpose"]], "sympy.matrices.immutable": [[102, 1, 1, "", "ImmutableDenseMatrix"], [102, 5, 1, "", "ImmutableMatrix"], [106, 1, 1, "", "ImmutableSparseMatrix"]], "sympy.matrices.matrices": [[104, 1, 1, "", "MatrixBase"], [104, 1, 1, "", "MatrixCalculus"], [104, 1, 1, "", "MatrixDeterminant"], [104, 1, 1, "", "MatrixEigen"], [104, 1, 1, "", "MatrixError"], [104, 1, 1, "", "MatrixReductions"], [104, 1, 1, "", "MatrixSubspaces"], [104, 1, 1, "", "NonSquareMatrixError"], [104, 1, 1, "", "ShapeError"], [104, 4, 1, "", "a2idx"]], "sympy.matrices.matrices.MatrixBase": [[104, 3, 1, "", "D"], [104, 2, 1, "", "LDLdecomposition"], [104, 2, 1, "", "LDLsolve"], [104, 2, 1, "", "LUdecomposition"], [104, 2, 1, "", "LUdecompositionFF"], [104, 2, 1, "", "LUdecomposition_Simple"], [104, 2, 1, "", "LUsolve"], [104, 2, 1, "", "QRdecomposition"], [104, 2, 1, "", "QRsolve"], [104, 2, 1, "", "add"], [104, 2, 1, "", "analytic_func"], [104, 2, 1, "", "cholesky"], [104, 2, 1, "", "cholesky_solve"], [104, 2, 1, "", "condition_number"], [104, 2, 1, "", "connected_components"], [104, 2, 1, "", "connected_components_decomposition"], [104, 2, 1, "", "copy"], [104, 2, 1, "", "cramer_solve"], [104, 2, 1, "", "cross"], [104, 2, 1, "", "diagonal_solve"], [104, 2, 1, "", "dot"], [104, 2, 1, "", "dual"], [104, 2, 1, "", "exp"], [104, 2, 1, "", "gauss_jordan_solve"], [104, 2, 1, "", "hat"], [104, 2, 1, "", "inv"], [104, 2, 1, "", "inv_mod"], [104, 2, 1, "", "inverse_ADJ"], [104, 2, 1, "", "inverse_BLOCK"], [104, 2, 1, "", "inverse_CH"], [104, 2, 1, "", "inverse_GE"], [104, 2, 1, "", "inverse_LDL"], [104, 2, 1, "", "inverse_LU"], [104, 2, 1, "", "inverse_QR"], [104, 2, 1, "", "irregular"], [104, 2, 1, "", "is_nilpotent"], [104, 2, 1, "", "key2bounds"], [104, 2, 1, "", "key2ij"], [104, 2, 1, "", "log"], [104, 2, 1, "", "lower_triangular_solve"], [104, 2, 1, "", "norm"], [104, 2, 1, "", "normalized"], [104, 2, 1, "", "pinv"], [104, 2, 1, "", "pinv_solve"], [104, 2, 1, "", "print_nonzero"], [104, 2, 1, "", "project"], [104, 2, 1, "", "rank_decomposition"], [104, 2, 1, "", "singular_value_decomposition"], [104, 2, 1, "", "solve"], [104, 2, 1, "", "solve_least_squares"], [104, 2, 1, "", "strongly_connected_components"], [104, 2, 1, "", "strongly_connected_components_decomposition"], [104, 2, 1, "", "table"], [104, 2, 1, "", "upper_hessenberg_decomposition"], [104, 2, 1, "", "upper_triangular_solve"], [104, 2, 1, "", "vee"]], "sympy.matrices.matrices.MatrixCalculus": [[104, 2, 1, "", "diff"], [104, 2, 1, "", "integrate"], [104, 2, 1, "", "jacobian"], [104, 2, 1, "", "limit"]], "sympy.matrices.matrices.MatrixDeterminant": [[104, 2, 1, "", "adjugate"], [104, 2, 1, "", "charpoly"], [104, 2, 1, "", "cofactor"], [104, 2, 1, "", "cofactor_matrix"], [104, 2, 1, "", "det"], [104, 2, 1, "", "minor"], [104, 2, 1, "", "minor_submatrix"], [104, 2, 1, "", "per"]], "sympy.matrices.matrices.MatrixEigen": [[104, 2, 1, "", "bidiagonal_decomposition"], [104, 2, 1, "", "bidiagonalize"], [104, 2, 1, "", "diagonalize"], [104, 2, 1, "", "eigenvals"], [104, 2, 1, "", "eigenvects"], [104, 2, 1, "", "is_diagonalizable"], [104, 3, 1, "", "is_indefinite"], [104, 3, 1, "", "is_negative_definite"], [104, 3, 1, "", "is_negative_semidefinite"], [104, 3, 1, "", "is_positive_definite"], [104, 3, 1, "", "is_positive_semidefinite"], [104, 2, 1, "", "jordan_form"], [104, 2, 1, "", "left_eigenvects"], [104, 2, 1, "", "singular_values"]], "sympy.matrices.matrices.MatrixReductions": [[104, 2, 1, "", "echelon_form"], [104, 2, 1, "", "elementary_col_op"], [104, 2, 1, "", "elementary_row_op"], [104, 3, 1, "", "is_echelon"], [104, 2, 1, "", "rank"], [104, 2, 1, "", "rref"]], "sympy.matrices.matrices.MatrixSubspaces": [[104, 2, 1, "", "columnspace"], [104, 2, 1, "", "nullspace"], [104, 2, 1, "", "orthogonalize"], [104, 2, 1, "", "rowspace"]], "sympy.matrices.normalforms": [[105, 4, 1, "", "hermite_normal_form"], [105, 4, 1, "", "smith_normal_form"]], "sympy.matrices.sparse": [[106, 1, 1, "", "MutableSparseMatrix"], [106, 5, 1, "", "SparseMatrix"]], "sympy.matrices.sparsetools": [[107, 2, 1, "", "_csrtodok"], [107, 2, 1, "", "_doktocsr"], [107, 2, 1, "", "banded"]], "sympy.ntheory": [[108, 0, 0, "-", "bbp_pi"], [108, 0, 0, "-", "continued_fraction"], [108, 0, 0, "-", "digits"], [108, 0, 0, "-", "ecm"], [108, 0, 0, "-", "egyptian_fraction"], [108, 0, 0, "-", "factor_"], [108, 0, 0, "-", "generate"], [108, 1, 1, "", "mobius"], [108, 0, 0, "-", "modular"], [108, 0, 0, "-", "multinomial"], [108, 0, 0, "-", "partitions_"], [108, 0, 0, "-", "primetest"], [108, 0, 0, "-", "qs"], [108, 0, 0, "-", "residue_ntheory"]], "sympy.ntheory.bbp_pi": [[108, 4, 1, "", "pi_hex_digits"]], "sympy.ntheory.continued_fraction": [[108, 4, 1, "", "continued_fraction"], [108, 4, 1, "", "continued_fraction_convergents"], [108, 4, 1, "", "continued_fraction_iterator"], [108, 4, 1, "", "continued_fraction_periodic"], [108, 4, 1, "", "continued_fraction_reduce"]], "sympy.ntheory.digits": [[108, 4, 1, "", "count_digits"], [108, 4, 1, "", "digits"], [108, 4, 1, "", "is_palindromic"]], "sympy.ntheory.ecm": [[108, 4, 1, "", "ecm"]], "sympy.ntheory.egyptian_fraction": [[108, 4, 1, "", "egyptian_fraction"]], "sympy.ntheory.factor_": [[108, 4, 1, "", "abundance"], [108, 4, 1, "", "antidivisor_count"], [108, 4, 1, "", "antidivisors"], [108, 4, 1, "", "core"], [108, 4, 1, "", "digits"], [108, 4, 1, "", "divisor_count"], [108, 1, 1, "", "divisor_sigma"], [108, 4, 1, "", "divisors"], [108, 4, 1, "", "factorint"], [108, 4, 1, "", "factorrat"], [108, 4, 1, "", "is_abundant"], [108, 4, 1, "", "is_amicable"], [108, 4, 1, "", "is_deficient"], [108, 4, 1, "", "is_mersenne_prime"], [108, 4, 1, "", "is_perfect"], [108, 4, 1, "", "mersenne_prime_exponent"], [108, 4, 1, "", "multiplicity"], [108, 4, 1, "", "perfect_power"], [108, 4, 1, "", "pollard_pm1"], [108, 4, 1, "", "pollard_rho"], [108, 4, 1, "", "primefactors"], [108, 1, 1, "", "primenu"], [108, 1, 1, "", "primeomega"], [108, 4, 1, "", "proper_divisor_count"], [108, 4, 1, "", "proper_divisors"], [108, 1, 1, "", "reduced_totient"], [108, 4, 1, "", "smoothness"], [108, 4, 1, "", "smoothness_p"], [108, 1, 1, "", "totient"], [108, 4, 1, "", "trailing"], [108, 4, 1, "", "udivisor_count"], [108, 1, 1, "", "udivisor_sigma"], [108, 4, 1, "", "udivisors"]], "sympy.ntheory.generate": [[108, 1, 1, "", "Sieve"], [108, 4, 1, "", "composite"], [108, 4, 1, "", "compositepi"], [108, 4, 1, "", "cycle_length"], [108, 4, 1, "", "nextprime"], [108, 4, 1, "", "prevprime"], [108, 4, 1, "", "prime"], [108, 4, 1, "", "primepi"], [108, 4, 1, "", "primerange"], [108, 4, 1, "", "primorial"], [108, 4, 1, "", "randprime"]], "sympy.ntheory.generate.Sieve": [[108, 2, 1, "", "extend"], [108, 2, 1, "", "extend_to_no"], [108, 2, 1, "", "mobiusrange"], [108, 2, 1, "", "primerange"], [108, 2, 1, "", "search"], [108, 2, 1, "", "totientrange"]], "sympy.ntheory.modular": [[108, 4, 1, "", "crt"], [108, 4, 1, "", "crt1"], [108, 4, 1, "", "crt2"], [108, 4, 1, "", "solve_congruence"], [108, 4, 1, "", "symmetric_residue"]], "sympy.ntheory.multinomial": [[108, 4, 1, "", "binomial_coefficients"], [108, 4, 1, "", "binomial_coefficients_list"], [108, 4, 1, "", "multinomial_coefficients"], [108, 4, 1, "", "multinomial_coefficients_iterator"]], "sympy.ntheory.partitions_": [[108, 4, 1, "", "npartitions"]], "sympy.ntheory.primetest": [[108, 4, 1, "", "is_euler_pseudoprime"], [108, 4, 1, "", "is_extra_strong_lucas_prp"], [108, 4, 1, "", "is_gaussian_prime"], [108, 4, 1, "", "is_lucas_prp"], [108, 4, 1, "", "is_square"], [108, 4, 1, "", "is_strong_lucas_prp"], [108, 4, 1, "", "isprime"], [108, 4, 1, "", "mr"]], "sympy.ntheory.qs": [[108, 4, 1, "", "qs"]], "sympy.ntheory.residue_ntheory": [[108, 4, 1, "", "binomial_mod"], [108, 4, 1, "", "discrete_log"], [108, 4, 1, "", "is_nthpow_residue"], [108, 4, 1, "", "is_primitive_root"], [108, 4, 1, "", "is_quad_residue"], [108, 4, 1, "", "jacobi_symbol"], [108, 4, 1, "", "kronecker_symbol"], [108, 4, 1, "", "legendre_symbol"], [108, 4, 1, "", "n_order"], [108, 4, 1, "", "nthroot_mod"], [108, 4, 1, "", "polynomial_congruence"], [108, 4, 1, "", "primitive_root"], [108, 4, 1, "", "quadratic_congruence"], [108, 4, 1, "", "quadratic_residues"], [108, 4, 1, "", "sqrt_mod"], [108, 4, 1, "", "sqrt_mod_iter"]], "sympy.parsing.latex": [[110, 1, 1, "", "LaTeXParsingError"], [110, 4, 1, "", "parse_latex"]], "sympy.parsing.mathematica": [[110, 4, 1, "", "parse_mathematica"]], "sympy.parsing.maxima": [[110, 4, 1, "", "parse_maxima"]], "sympy.parsing": [[110, 0, 0, "-", "sym_expr"]], "sympy.parsing.sym_expr": [[110, 1, 1, "", "SymPyExpression"]], "sympy.parsing.sym_expr.SymPyExpression": [[110, 2, 1, "", "convert_to_c"], [110, 2, 1, "", "convert_to_expr"], [110, 2, 1, "", "convert_to_fortran"], [110, 2, 1, "", "convert_to_python"], [110, 2, 1, "", "return_expr"]], "sympy.parsing.sympy_parser": [[110, 4, 1, "", "auto_number"], [110, 4, 1, "", "auto_symbol"], [110, 4, 1, "", "convert_xor"], [110, 4, 1, "", "eval_expr"], [110, 4, 1, "", "factorial_notation"], [110, 4, 1, "", "function_exponentiation"], [110, 4, 1, "", "implicit_application"], [110, 4, 1, "", "implicit_multiplication"], [110, 4, 1, "", "implicit_multiplication_application"], [110, 4, 1, "", "lambda_notation"], [110, 4, 1, "", "parse_expr"], [110, 4, 1, "", "rationalize"], [110, 4, 1, "", "repeated_decimals"], [110, 4, 1, "", "split_symbols"], [110, 4, 1, "", "split_symbols_custom"], [110, 6, 1, "", "standard_transformations"], [110, 4, 1, "", "stringify_expr"]], "sympy.physics.continuum_mechanics": [[111, 0, 0, "-", "beam"], [113, 0, 0, "-", "cable"], [115, 0, 0, "-", "truss"]], "sympy.physics.continuum_mechanics.beam": [[111, 1, 1, "", "Beam"], [111, 1, 1, "", "Beam3D"]], "sympy.physics.continuum_mechanics.beam.Beam": [[111, 3, 1, "", "applied_loads"], [111, 2, 1, "", "apply_load"], [111, 2, 1, "", "apply_support"], [111, 3, 1, "", "area"], [111, 2, 1, "", "bending_moment"], [111, 3, 1, "", "boundary_conditions"], [111, 3, 1, "", "cross_section"], [111, 2, 1, "", "deflection"], [111, 2, 1, "", "draw"], [111, 3, 1, "", "elastic_modulus"], [111, 3, 1, "", "ild_moment"], [111, 3, 1, "", "ild_reactions"], [111, 3, 1, "", "ild_shear"], [111, 2, 1, "", "join"], [111, 3, 1, "", "length"], [111, 3, 1, "", "load"], [111, 2, 1, "", "max_bmoment"], [111, 2, 1, "", "max_deflection"], [111, 2, 1, "", "max_shear_force"], [111, 2, 1, "", "plot_bending_moment"], [111, 2, 1, "", "plot_deflection"], [111, 2, 1, "", "plot_ild_moment"], [111, 2, 1, "", "plot_ild_reactions"], [111, 2, 1, "", "plot_ild_shear"], [111, 2, 1, "", "plot_loading_results"], [111, 2, 1, "", "plot_shear_force"], [111, 2, 1, "", "plot_shear_stress"], [111, 2, 1, "", "plot_slope"], [111, 2, 1, "", "point_cflexure"], [111, 3, 1, "", "reaction_loads"], [111, 2, 1, "", "remove_load"], [111, 3, 1, "", "second_moment"], [111, 2, 1, "", "shear_force"], [111, 2, 1, "", "shear_stress"], [111, 2, 1, "", "slope"], [111, 2, 1, "", "solve_for_ild_moment"], [111, 2, 1, "", "solve_for_ild_reactions"], [111, 2, 1, "", "solve_for_ild_shear"], [111, 2, 1, "", "solve_for_reaction_loads"], [111, 3, 1, "", "variable"]], "sympy.physics.continuum_mechanics.beam.Beam3D": [[111, 2, 1, "", "angular_deflection"], [111, 2, 1, "", "apply_load"], [111, 2, 1, "", "apply_moment_load"], [111, 3, 1, "", "area"], [111, 2, 1, "", "axial_force"], [111, 2, 1, "", "axial_stress"], [111, 2, 1, "", "bending_moment"], [111, 3, 1, "", "boundary_conditions"], [111, 2, 1, "", "deflection"], [111, 3, 1, "", "load_vector"], [111, 2, 1, "", "max_bending_moment"], [111, 2, 1, "", "max_bmoment"], [111, 2, 1, "", "max_deflection"], [111, 2, 1, "", "max_shear_force"], [111, 3, 1, "", "moment_load_vector"], [111, 2, 1, "", "plot_bending_moment"], [111, 2, 1, "", "plot_deflection"], [111, 2, 1, "", "plot_loading_results"], [111, 2, 1, "", "plot_shear_force"], [111, 2, 1, "", "plot_shear_stress"], [111, 2, 1, "", "plot_slope"], [111, 2, 1, "", "polar_moment"], [111, 3, 1, "", "second_moment"], [111, 2, 1, "", "shear_force"], [111, 3, 1, "", "shear_modulus"], [111, 2, 1, "", "shear_stress"], [111, 2, 1, "", "slope"], [111, 2, 1, "", "solve_for_reaction_loads"], [111, 2, 1, "", "solve_for_torsion"], [111, 2, 1, "", "torsional_moment"]], "sympy.physics.continuum_mechanics.cable": [[113, 1, 1, "", "Cable"]], "sympy.physics.continuum_mechanics.cable.Cable": [[113, 2, 1, "", "apply_length"], [113, 2, 1, "", "apply_load"], [113, 2, 1, "", "change_support"], [113, 3, 1, "", "left_support"], [113, 3, 1, "", "length"], [113, 3, 1, "", "loads"], [113, 3, 1, "", "loads_position"], [113, 3, 1, "", "reaction_loads"], [113, 2, 1, "", "remove_loads"], [113, 3, 1, "", "right_support"], [113, 3, 1, "", "supports"]], "sympy.physics.continuum_mechanics.truss": [[115, 1, 1, "", "Truss"]], "sympy.physics.continuum_mechanics.truss.Truss": [[115, 2, 1, "", "add_member"], [115, 2, 1, "", "add_node"], [115, 2, 1, "", "apply_load"], [115, 2, 1, "", "apply_support"], [115, 2, 1, "", "change_member_label"], [115, 2, 1, "", "change_node_label"], [115, 2, 1, "", "draw"], [115, 3, 1, "", "internal_forces"], [115, 3, 1, "", "loads"], [115, 3, 1, "", "member_lengths"], [115, 3, 1, "", "members"], [115, 3, 1, "", "node_labels"], [115, 3, 1, "", "node_positions"], [115, 3, 1, "", "nodes"], [115, 3, 1, "", "reaction_loads"], [115, 2, 1, "", "remove_load"], [115, 2, 1, "", "remove_member"], [115, 2, 1, "", "remove_node"], [115, 2, 1, "", "remove_support"], [115, 2, 1, "", "solve"], [115, 3, 1, "", "supports"]], "sympy.physics": [[118, 0, 0, "-", "control"], [121, 0, 0, "-", "hydrogen"], [122, 0, 0, "-", "matrices"], [145, 0, 0, "-", "mechanics"], [160, 0, 0, "-", "paulialgebra"], [161, 0, 0, "-", "qho_1d"], [185, 0, 0, "-", "secondquant"], [186, 0, 0, "-", "sho"], [202, 0, 0, "-", "vector"], [205, 0, 0, "-", "wigner"]], "sympy.physics.control.control_plots": [[117, 2, 1, "", "bode_magnitude_numerical_data"], [117, 2, 1, "", "bode_magnitude_plot"], [117, 2, 1, "", "bode_phase_numerical_data"], [117, 2, 1, "", "bode_phase_plot"], [117, 2, 1, "", "bode_plot"], [117, 2, 1, "", "impulse_response_numerical_data"], [117, 2, 1, "", "impulse_response_plot"], [117, 2, 1, "", "pole_zero_numerical_data"], [117, 2, 1, "", "pole_zero_plot"], [117, 2, 1, "", "ramp_response_numerical_data"], [117, 2, 1, "", "ramp_response_plot"], [117, 2, 1, "", "step_response_numerical_data"], [117, 2, 1, "", "step_response_plot"]], "sympy.physics.control": [[119, 0, 0, "-", "lti"]], "sympy.physics.control.lti": [[119, 1, 1, "", "Feedback"], [119, 1, 1, "", "MIMOFeedback"], [119, 1, 1, "", "MIMOParallel"], [119, 1, 1, "", "MIMOSeries"], [119, 1, 1, "", "Parallel"], [119, 1, 1, "", "Series"], [119, 1, 1, "", "TransferFunction"], [119, 1, 1, "", "TransferFunctionMatrix"], [119, 4, 1, "", "backward_diff"], [119, 4, 1, "", "bilinear"], [119, 4, 1, "", "forward_diff"], [119, 4, 1, "", "gbt"]], "sympy.physics.control.lti.Feedback": [[119, 2, 1, "", "doit"], [119, 3, 1, "", "sensitivity"], [119, 3, 1, "", "sign"], [119, 3, 1, "", "sys1"], [119, 3, 1, "", "sys2"], [119, 3, 1, "", "var"]], "sympy.physics.control.lti.MIMOFeedback": [[119, 2, 1, "", "doit"], [119, 3, 1, "", "sensitivity"], [119, 3, 1, "", "sign"], [119, 3, 1, "", "sys1"], [119, 3, 1, "", "sys2"], [119, 3, 1, "", "var"]], "sympy.physics.control.lti.MIMOParallel": [[119, 2, 1, "", "doit"], [119, 3, 1, "", "num_inputs"], [119, 3, 1, "", "num_outputs"], [119, 3, 1, "", "shape"], [119, 3, 1, "", "var"]], "sympy.physics.control.lti.MIMOSeries": [[119, 2, 1, "", "doit"], [119, 3, 1, "", "num_inputs"], [119, 3, 1, "", "num_outputs"], [119, 3, 1, "", "shape"], [119, 3, 1, "", "var"]], "sympy.physics.control.lti.Parallel": [[119, 2, 1, "", "doit"], [119, 3, 1, "", "is_biproper"], [119, 3, 1, "", "is_proper"], [119, 3, 1, "", "is_strictly_proper"], [119, 2, 1, "", "to_expr"], [119, 3, 1, "", "var"]], "sympy.physics.control.lti.Series": [[119, 2, 1, "", "doit"], [119, 3, 1, "", "is_biproper"], [119, 3, 1, "", "is_proper"], [119, 3, 1, "", "is_strictly_proper"], [119, 2, 1, "", "to_expr"], [119, 3, 1, "", "var"]], "sympy.physics.control.lti.TransferFunction": [[119, 2, 1, "", "dc_gain"], [119, 3, 1, "", "den"], [119, 2, 1, "", "expand"], [119, 2, 1, "", "from_coeff_lists"], [119, 2, 1, "", "from_rational_expression"], [119, 2, 1, "", "from_zpk"], [119, 3, 1, "", "is_biproper"], [119, 3, 1, "", "is_proper"], [119, 2, 1, "", "is_stable"], [119, 3, 1, "", "is_strictly_proper"], [119, 3, 1, "", "num"], [119, 2, 1, "", "poles"], [119, 2, 1, "", "to_expr"], [119, 3, 1, "", "var"], [119, 2, 1, "", "zeros"]], "sympy.physics.control.lti.TransferFunctionMatrix": [[119, 2, 1, "", "elem_poles"], [119, 2, 1, "", "elem_zeros"], [119, 2, 1, "", "expand"], [119, 2, 1, "", "from_Matrix"], [119, 3, 1, "", "num_inputs"], [119, 3, 1, "", "num_outputs"], [119, 3, 1, "", "shape"], [119, 2, 1, "", "transpose"], [119, 3, 1, "", "var"]], "sympy.physics.hep": [[120, 0, 0, "-", "gamma_matrices"]], "sympy.physics.hep.gamma_matrices": [[120, 4, 1, "", "extract_type_tens"], [120, 4, 1, "", "gamma_trace"], [120, 4, 1, "", "kahane_simplify"], [120, 4, 1, "", "simplify_gpgp"]], "sympy.physics.hydrogen": [[121, 4, 1, "", "E_nl"], [121, 4, 1, "", "E_nl_dirac"], [121, 4, 1, "", "Psi_nlm"], [121, 4, 1, "", "R_nl"]], "sympy.physics.matrices": [[122, 4, 1, "", "mdft"], [122, 4, 1, "", "mgamma"], [122, 4, 1, "", "msigma"], [122, 4, 1, "", "pat_matrix"]], "sympy.physics.mechanics._system": [[133, 1, 1, "", "System"]], "sympy.physics.mechanics._system.System": [[133, 3, 1, "", "actuators"], [133, 2, 1, "", "add_actuators"], [133, 2, 1, "", "add_bodies"], [133, 2, 1, "", "add_coordinates"], [133, 2, 1, "", "add_holonomic_constraints"], [133, 2, 1, "", "add_joints"], [133, 2, 1, "", "add_kdes"], [133, 2, 1, "", "add_loads"], [133, 2, 1, "", "add_nonholonomic_constraints"], [133, 2, 1, "", "add_speeds"], [133, 2, 1, "", "apply_gravity"], [133, 3, 1, "", "bodies"], [133, 3, 1, "", "eom_method"], [133, 3, 1, "", "forcing"], [133, 3, 1, "", "forcing_full"], [133, 2, 1, "", "form_eoms"], [133, 3, 1, "", "frame"], [133, 2, 1, "", "from_newtonian"], [133, 2, 1, "", "get_body"], [133, 2, 1, "", "get_joint"], [133, 3, 1, "", "holonomic_constraints"], [133, 3, 1, "", "joints"], [133, 3, 1, "", "kdes"], [133, 3, 1, "", "loads"], [133, 3, 1, "", "mass_matrix"], [133, 3, 1, "", "mass_matrix_full"], [133, 3, 1, "", "nonholonomic_constraints"], [133, 3, 1, "", "origin"], [133, 3, 1, "", "q"], [133, 3, 1, "", "q_dep"], [133, 3, 1, "", "q_ind"], [133, 2, 1, "", "rhs"], [133, 3, 1, "", "u"], [133, 3, 1, "", "u_dep"], [133, 3, 1, "", "u_ind"], [133, 2, 1, "", "validate_system"], [133, 3, 1, "", "x"], [133, 3, 1, "", "y"], [133, 3, 1, "", "z"]], "sympy.physics.mechanics": [[124, 0, 0, "-", "body"], [125, 4, 1, "", "find_dynamicsymbols"], [127, 0, 0, "-", "joint"], [127, 0, 0, "-", "jointsmethod"], [128, 0, 0, "-", "kane"], [128, 0, 0, "-", "lagrange"], [129, 0, 0, "-", "linearize"], [125, 4, 1, "", "msubs"], [131, 0, 0, "-", "pathway"], [133, 0, 0, "-", "system"], [134, 0, 0, "-", "wrapping_geometry"]], "sympy.physics.mechanics.body": [[124, 1, 1, "", "Body"]], "sympy.physics.mechanics.body.Body": [[124, 2, 1, "", "ang_vel_in"], [124, 2, 1, "", "apply_force"], [124, 2, 1, "", "apply_torque"], [124, 2, 1, "", "clear_loads"], [124, 2, 1, "", "dcm"], [124, 3, 1, "", "inertia"], [124, 2, 1, "", "kinetic_energy"], [124, 2, 1, "", "masscenter_vel"], [124, 2, 1, "", "parallel_axis"], [124, 2, 1, "", "remove_load"], [124, 3, 1, "", "x"], [124, 3, 1, "", "y"], [124, 3, 1, "", "z"]], "sympy.physics.mechanics.functions": [[130, 4, 1, "", "Lagrangian"], [130, 4, 1, "", "angular_momentum"], [130, 4, 1, "", "center_of_mass"], [130, 4, 1, "", "find_dynamicsymbols"], [130, 4, 1, "", "kinetic_energy"], [130, 4, 1, "", "linear_momentum"], [130, 4, 1, "", "potential_energy"]], "sympy.physics.mechanics.inertia": [[130, 1, 1, "", "Inertia"], [130, 4, 1, "", "inertia"], [130, 4, 1, "", "inertia_of_point_mass"]], "sympy.physics.mechanics.inertia.Inertia": [[130, 2, 1, "", "from_inertia_scalars"]], "sympy.physics.mechanics.joint": [[127, 1, 1, "", "CylindricalJoint"], [127, 1, 1, "", "Joint"], [127, 1, 1, "", "PinJoint"], [127, 1, 1, "", "PlanarJoint"], [127, 1, 1, "", "PrismaticJoint"], [127, 1, 1, "", "SphericalJoint"], [127, 1, 1, "", "WeldJoint"]], "sympy.physics.mechanics.joint.CylindricalJoint": [[127, 3, 1, "", "joint_axis"], [127, 3, 1, "", "rotation_coordinate"], [127, 3, 1, "", "rotation_speed"], [127, 3, 1, "", "translation_coordinate"], [127, 3, 1, "", "translation_speed"]], "sympy.physics.mechanics.joint.Joint": [[127, 3, 1, "", "child"], [127, 3, 1, "", "child_axis"], [127, 3, 1, "", "child_point"], [127, 3, 1, "", "coordinates"], [127, 3, 1, "", "kdes"], [127, 3, 1, "", "name"], [127, 3, 1, "", "parent"], [127, 3, 1, "", "parent_axis"], [127, 3, 1, "", "parent_point"], [127, 3, 1, "", "speeds"]], "sympy.physics.mechanics.joint.PinJoint": [[127, 3, 1, "", "joint_axis"]], "sympy.physics.mechanics.joint.PlanarJoint": [[127, 3, 1, "", "planar_coordinates"], [127, 3, 1, "", "planar_speeds"], [127, 3, 1, "", "planar_vectors"], [127, 3, 1, "", "rotation_axis"], [127, 3, 1, "", "rotation_coordinate"], [127, 3, 1, "", "rotation_speed"]], "sympy.physics.mechanics.joint.PrismaticJoint": [[127, 3, 1, "", "joint_axis"]], "sympy.physics.mechanics.jointsmethod": [[127, 1, 1, "", "JointsMethod"]], "sympy.physics.mechanics.jointsmethod.JointsMethod": [[127, 3, 1, "", "bodies"], [127, 3, 1, "", "forcing"], [127, 3, 1, "", "forcing_full"], [127, 2, 1, "", "form_eoms"], [127, 3, 1, "", "kdes"], [127, 3, 1, "", "loads"], [127, 3, 1, "", "mass_matrix"], [127, 3, 1, "", "mass_matrix_full"], [127, 3, 1, "", "method"], [127, 3, 1, "", "q"], [127, 2, 1, "", "rhs"], [127, 3, 1, "", "u"]], "sympy.physics.mechanics.kane": [[128, 1, 1, "", "KanesMethod"]], "sympy.physics.mechanics.kane.KanesMethod": [[128, 3, 1, "", "auxiliary_eqs"], [128, 3, 1, "", "forcing"], [128, 3, 1, "", "forcing_full"], [128, 3, 1, "", "forcing_kin"], [128, 2, 1, "", "kanes_equations"], [128, 2, 1, "", "kindiffdict"], [128, 2, 1, "", "linearize"], [128, 3, 1, "", "mass_matrix"], [128, 3, 1, "", "mass_matrix_full"], [128, 3, 1, "", "mass_matrix_kin"], [128, 2, 1, "", "rhs"], [128, 2, 1, "", "to_linearizer"]], "sympy.physics.mechanics.lagrange": [[128, 1, 1, "", "LagrangesMethod"]], "sympy.physics.mechanics.lagrange.LagrangesMethod": [[128, 3, 1, "", "forcing"], [128, 3, 1, "", "forcing_full"], [128, 2, 1, "", "form_lagranges_equations"], [128, 2, 1, "", "linearize"], [128, 3, 1, "", "mass_matrix"], [128, 3, 1, "", "mass_matrix_full"], [128, 2, 1, "", "rhs"], [128, 2, 1, "", "solve_multipliers"], [128, 2, 1, "", "to_linearizer"]], "sympy.physics.mechanics.linearize": [[129, 1, 1, "", "Linearizer"]], "sympy.physics.mechanics.linearize.Linearizer": [[129, 2, 1, "", "__init__"], [129, 2, 1, "", "linearize"]], "sympy.physics.mechanics.loads": [[130, 1, 1, "", "Force"], [130, 1, 1, "", "Torque"]], "sympy.physics.mechanics.particle": [[130, 1, 1, "", "Particle"]], "sympy.physics.mechanics.particle.Particle": [[130, 2, 1, "", "angular_momentum"], [130, 2, 1, "", "kinetic_energy"], [130, 2, 1, "", "linear_momentum"], [130, 3, 1, "", "mass"], [130, 3, 1, "", "masscenter"], [130, 3, 1, "", "name"], [130, 2, 1, "", "parallel_axis"], [130, 3, 1, "", "point"], [130, 3, 1, "", "potential_energy"]], "sympy.physics.mechanics.pathway": [[131, 1, 1, "", "LinearPathway"], [131, 1, 1, "", "PathwayBase"], [131, 1, 1, "", "WrappingPathway"]], "sympy.physics.mechanics.pathway.LinearPathway": [[131, 2, 1, "", "compute_loads"], [131, 3, 1, "", "extension_velocity"], [131, 3, 1, "", "length"]], "sympy.physics.mechanics.pathway.PathwayBase": [[131, 3, 1, "", "attachments"], [131, 2, 1, "", "compute_loads"], [131, 3, 1, "", "extension_velocity"], [131, 3, 1, "", "length"]], "sympy.physics.mechanics.pathway.WrappingPathway": [[131, 2, 1, "", "compute_loads"], [131, 3, 1, "", "extension_velocity"], [131, 3, 1, "", "geometry"], [131, 3, 1, "", "length"]], "sympy.physics.mechanics.rigidbody": [[130, 1, 1, "", "RigidBody"]], "sympy.physics.mechanics.rigidbody.RigidBody": [[130, 2, 1, "", "angular_momentum"], [130, 3, 1, "", "central_inertia"], [130, 3, 1, "", "frame"], [130, 3, 1, "", "inertia"], [130, 2, 1, "", "kinetic_energy"], [130, 2, 1, "", "linear_momentum"], [130, 3, 1, "", "mass"], [130, 3, 1, "", "masscenter"], [130, 3, 1, "", "name"], [130, 2, 1, "", "parallel_axis"], [130, 3, 1, "", "potential_energy"], [130, 3, 1, "", "x"], [130, 3, 1, "", "y"], [130, 3, 1, "", "z"]], "sympy.physics.mechanics.system": [[133, 1, 1, "", "SymbolicSystem"]], "sympy.physics.mechanics.system.SymbolicSystem": [[133, 3, 1, "", "alg_con"], [133, 3, 1, "", "bodies"], [133, 3, 1, "", "comb_explicit_rhs"], [133, 3, 1, "", "comb_implicit_mat"], [133, 3, 1, "", "comb_implicit_rhs"], [133, 2, 1, "", "compute_explicit_form"], [133, 2, 1, "", "constant_symbols"], [133, 3, 1, "", "coordinates"], [133, 3, 1, "", "dyn_implicit_mat"], [133, 3, 1, "", "dyn_implicit_rhs"], [133, 2, 1, "", "dynamic_symbols"], [133, 3, 1, "", "kin_explicit_rhs"], [133, 3, 1, "", "loads"], [133, 3, 1, "", "speeds"], [133, 3, 1, "", "states"]], "sympy.physics.mechanics.wrapping_geometry": [[134, 1, 1, "", "WrappingCylinder"], [134, 1, 1, "", "WrappingGeometryBase"], [134, 1, 1, "", "WrappingSphere"]], "sympy.physics.mechanics.wrapping_geometry.WrappingCylinder": [[134, 3, 1, "", "axis"], [134, 2, 1, "", "geodesic_end_vectors"], [134, 2, 1, "", "geodesic_length"], [134, 3, 1, "", "point"], [134, 2, 1, "", "point_on_surface"], [134, 3, 1, "", "radius"]], "sympy.physics.mechanics.wrapping_geometry.WrappingGeometryBase": [[134, 2, 1, "", "geodesic_end_vectors"], [134, 2, 1, "", "geodesic_length"], [134, 3, 1, "", "point"], [134, 2, 1, "", "point_on_surface"]], "sympy.physics.mechanics.wrapping_geometry.WrappingSphere": [[134, 2, 1, "", "geodesic_end_vectors"], [134, 2, 1, "", "geodesic_length"], [134, 3, 1, "", "point"], [134, 2, 1, "", "point_on_surface"], [134, 3, 1, "", "radius"]], "sympy.physics.optics": [[154, 0, 0, "-", "gaussopt"], [156, 0, 0, "-", "medium"], [157, 0, 0, "-", "polarization"], [158, 0, 0, "-", "utils"], [159, 0, 0, "-", "waves"]], "sympy.physics.optics.gaussopt": [[154, 1, 1, "", "BeamParameter"], [154, 1, 1, "", "CurvedMirror"], [154, 1, 1, "", "CurvedRefraction"], [154, 1, 1, "", "FlatMirror"], [154, 1, 1, "", "FlatRefraction"], [154, 1, 1, "", "FreeSpace"], [154, 1, 1, "", "GeometricRay"], [154, 1, 1, "", "RayTransferMatrix"], [154, 1, 1, "", "ThinLens"], [154, 4, 1, "", "conjugate_gauss_beams"], [154, 4, 1, "", "gaussian_conj"], [154, 4, 1, "", "geometric_conj_ab"], [154, 4, 1, "", "geometric_conj_af"], [154, 4, 1, "", "geometric_conj_bf"], [154, 4, 1, "", "rayleigh2waist"], [154, 4, 1, "", "waist2rayleigh"]], "sympy.physics.optics.gaussopt.BeamParameter": [[154, 3, 1, "", "divergence"], [154, 3, 1, "", "gouy"], [154, 3, 1, "", "q"], [154, 3, 1, "", "radius"], [154, 3, 1, "", "w"], [154, 3, 1, "", "w_0"], [154, 3, 1, "", "waist_approximation_limit"]], "sympy.physics.optics.gaussopt.GeometricRay": [[154, 3, 1, "", "angle"], [154, 3, 1, "", "height"]], "sympy.physics.optics.gaussopt.RayTransferMatrix": [[154, 3, 1, "", "A"], [154, 3, 1, "", "B"], [154, 3, 1, "", "C"], [154, 3, 1, "", "D"]], "sympy.physics.optics.medium": [[156, 1, 1, "", "Medium"]], "sympy.physics.optics.medium.Medium": [[156, 3, 1, "", "refractive_index"], [156, 3, 1, "", "speed"]], "sympy.physics.optics.polarization": [[157, 4, 1, "", "half_wave_retarder"], [157, 4, 1, "", "jones_2_stokes"], [157, 4, 1, "", "jones_vector"], [157, 4, 1, "", "linear_polarizer"], [157, 4, 1, "", "mueller_matrix"], [157, 4, 1, "", "phase_retarder"], [157, 4, 1, "", "polarizing_beam_splitter"], [157, 4, 1, "", "quarter_wave_retarder"], [157, 4, 1, "", "reflective_filter"], [157, 4, 1, "", "stokes_vector"], [157, 4, 1, "", "transmissive_filter"]], "sympy.physics.optics.utils": [[158, 4, 1, "", "brewster_angle"], [158, 4, 1, "", "critical_angle"], [158, 4, 1, "", "deviation"], [158, 4, 1, "", "fresnel_coefficients"], [158, 4, 1, "", "hyperfocal_distance"], [158, 4, 1, "", "lens_formula"], [158, 4, 1, "", "lens_makers_formula"], [158, 4, 1, "", "mirror_formula"], [158, 4, 1, "", "refraction_angle"], [158, 4, 1, "", "transverse_magnification"]], "sympy.physics.optics.waves": [[159, 1, 1, "", "TWave"]], "sympy.physics.optics.waves.TWave": [[159, 3, 1, "", "amplitude"], [159, 3, 1, "", "angular_velocity"], [159, 3, 1, "", "frequency"], [159, 3, 1, "", "n"], [159, 3, 1, "", "phase"], [159, 3, 1, "", "speed"], [159, 3, 1, "", "time_period"], [159, 3, 1, "", "wavelength"], [159, 3, 1, "", "wavenumber"]], "sympy.physics.paulialgebra": [[160, 4, 1, "", "evaluate_pauli_product"]], "sympy.physics.qho_1d": [[161, 4, 1, "", "E_n"], [161, 4, 1, "", "coherent_state"], [161, 4, 1, "", "psi_n"]], "sympy.physics.quantum": [[162, 0, 0, "-", "anticommutator"], [163, 0, 0, "-", "cartesian"], [164, 0, 0, "-", "cg"], [165, 0, 0, "-", "circuitplot"], [166, 0, 0, "-", "commutator"], [167, 0, 0, "-", "constants"], [168, 0, 0, "-", "dagger"], [169, 0, 0, "-", "gate"], [170, 0, 0, "-", "grover"], [171, 0, 0, "-", "hilbert"], [173, 0, 0, "-", "innerproduct"], [174, 0, 0, "-", "operator"], [175, 0, 0, "-", "operatorset"], [176, 0, 0, "-", "piab"], [177, 0, 0, "-", "qapply"], [178, 0, 0, "-", "qft"], [179, 0, 0, "-", "qubit"], [180, 0, 0, "-", "represent"], [181, 0, 0, "-", "shor"], [182, 0, 0, "-", "spin"], [183, 0, 0, "-", "state"], [184, 0, 0, "-", "tensorproduct"]], "sympy.physics.quantum.anticommutator": [[162, 1, 1, "", "AntiCommutator"]], "sympy.physics.quantum.anticommutator.AntiCommutator": [[162, 2, 1, "", "doit"]], "sympy.physics.quantum.cartesian": [[163, 1, 1, "", "PositionBra3D"], [163, 1, 1, "", "PositionKet3D"], [163, 1, 1, "", "PositionState3D"], [163, 1, 1, "", "PxBra"], [163, 1, 1, "", "PxKet"], [163, 1, 1, "", "PxOp"], [163, 1, 1, "", "XBra"], [163, 1, 1, "", "XKet"], [163, 1, 1, "", "XOp"], [163, 1, 1, "", "YOp"], [163, 1, 1, "", "ZOp"]], "sympy.physics.quantum.cartesian.PositionState3D": [[163, 3, 1, "", "position_x"], [163, 3, 1, "", "position_y"], [163, 3, 1, "", "position_z"]], "sympy.physics.quantum.cartesian.PxBra": [[163, 3, 1, "", "momentum"]], "sympy.physics.quantum.cartesian.PxKet": [[163, 3, 1, "", "momentum"]], "sympy.physics.quantum.cartesian.XBra": [[163, 3, 1, "", "position"]], "sympy.physics.quantum.cartesian.XKet": [[163, 3, 1, "", "position"]], "sympy.physics.quantum.cg": [[164, 1, 1, "", "CG"], [164, 1, 1, "", "Wigner3j"], [164, 1, 1, "", "Wigner6j"], [164, 1, 1, "", "Wigner9j"], [164, 4, 1, "", "cg_simp"]], "sympy.physics.quantum.circuitplot": [[165, 1, 1, "", "CircuitPlot"], [165, 4, 1, "", "CreateCGate"], [165, 1, 1, "", "Mx"], [165, 1, 1, "", "Mz"], [165, 4, 1, "", "circuit_plot"], [165, 4, 1, "", "labeller"]], "sympy.physics.quantum.circuitplot.CircuitPlot": [[165, 2, 1, "", "control_line"], [165, 2, 1, "", "control_point"], [165, 2, 1, "", "not_point"], [165, 2, 1, "", "one_qubit_box"], [165, 2, 1, "", "swap_point"], [165, 2, 1, "", "two_qubit_box"], [165, 2, 1, "", "update"]], "sympy.physics.quantum.commutator": [[166, 1, 1, "", "Commutator"]], "sympy.physics.quantum.commutator.Commutator": [[166, 2, 1, "", "doit"]], "sympy.physics.quantum.constants": [[167, 1, 1, "", "HBar"]], "sympy.physics.quantum.dagger": [[168, 1, 1, "", "Dagger"]], "sympy.physics.quantum.gate": [[169, 1, 1, "", "CGate"], [169, 1, 1, "", "CGateS"], [169, 5, 1, "", "CNOT"], [169, 1, 1, "", "CNotGate"], [169, 1, 1, "", "Gate"], [169, 5, 1, "", "H"], [169, 1, 1, "", "HadamardGate"], [169, 1, 1, "", "IdentityGate"], [169, 1, 1, "", "OneQubitGate"], [169, 5, 1, "", "Phase"], [169, 1, 1, "", "PhaseGate"], [169, 5, 1, "", "S"], [169, 5, 1, "", "SWAP"], [169, 1, 1, "", "SwapGate"], [169, 5, 1, "", "T"], [169, 1, 1, "", "TGate"], [169, 1, 1, "", "TwoQubitGate"], [169, 1, 1, "", "UGate"], [169, 5, 1, "", "X"], [169, 1, 1, "", "XGate"], [169, 5, 1, "", "Y"], [169, 1, 1, "", "YGate"], [169, 5, 1, "", "Z"], [169, 1, 1, "", "ZGate"], [169, 4, 1, "", "gate_simp"], [169, 4, 1, "", "gate_sort"], [169, 4, 1, "", "normalized"], [169, 4, 1, "", "random_circuit"]], "sympy.physics.quantum.gate.CGate": [[169, 3, 1, "", "controls"], [169, 2, 1, "", "decompose"], [169, 2, 1, "", "eval_controls"], [169, 3, 1, "", "gate"], [169, 3, 1, "", "min_qubits"], [169, 3, 1, "", "nqubits"], [169, 2, 1, "", "plot_gate"], [169, 3, 1, "", "targets"]], "sympy.physics.quantum.gate.CNotGate": [[169, 3, 1, "", "controls"], [169, 3, 1, "", "gate"], [169, 3, 1, "", "min_qubits"], [169, 3, 1, "", "targets"]], "sympy.physics.quantum.gate.Gate": [[169, 2, 1, "", "get_target_matrix"], [169, 3, 1, "", "min_qubits"], [169, 3, 1, "", "nqubits"], [169, 3, 1, "", "targets"]], "sympy.physics.quantum.gate.SwapGate": [[169, 2, 1, "", "decompose"]], "sympy.physics.quantum.gate.UGate": [[169, 2, 1, "", "get_target_matrix"], [169, 3, 1, "", "targets"]], "sympy.physics.quantum.grover": [[170, 1, 1, "", "OracleGate"], [170, 1, 1, "", "WGate"], [170, 4, 1, "", "apply_grover"], [170, 4, 1, "", "grover_iteration"], [170, 4, 1, "", "superposition_basis"]], "sympy.physics.quantum.grover.OracleGate": [[170, 3, 1, "", "search_function"], [170, 3, 1, "", "targets"]], "sympy.physics.quantum.hilbert": [[171, 1, 1, "", "ComplexSpace"], [171, 1, 1, "", "DirectSumHilbertSpace"], [171, 1, 1, "", "FockSpace"], [171, 1, 1, "", "HilbertSpace"], [171, 1, 1, "", "L2"], [171, 1, 1, "", "TensorPowerHilbertSpace"], [171, 1, 1, "", "TensorProductHilbertSpace"]], "sympy.physics.quantum.hilbert.DirectSumHilbertSpace": [[171, 2, 1, "", "eval"], [171, 3, 1, "", "spaces"]], "sympy.physics.quantum.hilbert.HilbertSpace": [[171, 3, 1, "", "dimension"]], "sympy.physics.quantum.hilbert.TensorProductHilbertSpace": [[171, 2, 1, "", "eval"], [171, 3, 1, "", "spaces"]], "sympy.physics.quantum.innerproduct": [[173, 1, 1, "", "InnerProduct"]], "sympy.physics.quantum.operator": [[174, 1, 1, "", "DifferentialOperator"], [174, 1, 1, "", "HermitianOperator"], [174, 1, 1, "", "IdentityOperator"], [174, 1, 1, "", "Operator"], [174, 1, 1, "", "OuterProduct"], [174, 1, 1, "", "UnitaryOperator"]], "sympy.physics.quantum.operator.DifferentialOperator": [[174, 3, 1, "", "expr"], [174, 3, 1, "", "free_symbols"], [174, 3, 1, "", "function"], [174, 3, 1, "", "variables"]], "sympy.physics.quantum.operator.OuterProduct": [[174, 3, 1, "", "bra"], [174, 3, 1, "", "ket"]], "sympy.physics.quantum.operatorset": [[175, 4, 1, "", "operators_to_state"], [175, 4, 1, "", "state_to_operators"]], "sympy.physics.quantum.piab": [[176, 1, 1, "", "PIABBra"], [176, 1, 1, "", "PIABHamiltonian"], [176, 1, 1, "", "PIABKet"]], "sympy.physics.quantum.qapply": [[177, 4, 1, "", "qapply"]], "sympy.physics.quantum.qft": [[178, 1, 1, "", "IQFT"], [178, 1, 1, "", "QFT"], [178, 5, 1, "", "Rk"], [178, 1, 1, "", "RkGate"]], "sympy.physics.quantum.qft.IQFT": [[178, 2, 1, "", "decompose"]], "sympy.physics.quantum.qft.QFT": [[178, 2, 1, "", "decompose"]], "sympy.physics.quantum.qubit": [[179, 1, 1, "", "IntQubit"], [179, 1, 1, "", "IntQubitBra"], [179, 1, 1, "", "Qubit"], [179, 1, 1, "", "QubitBra"], [179, 4, 1, "", "matrix_to_density"], [179, 4, 1, "", "matrix_to_qubit"], [179, 4, 1, "", "measure_all"], [179, 4, 1, "", "measure_all_oneshot"], [179, 4, 1, "", "measure_partial"], [179, 4, 1, "", "measure_partial_oneshot"], [179, 4, 1, "", "qubit_to_matrix"]], "sympy.physics.quantum.represent": [[180, 4, 1, "", "enumerate_states"], [180, 4, 1, "", "get_basis"], [180, 4, 1, "", "integrate_result"], [180, 4, 1, "", "rep_expectation"], [180, 4, 1, "", "rep_innerproduct"], [180, 4, 1, "", "represent"]], "sympy.physics.quantum.shor": [[181, 1, 1, "", "CMod"], [181, 4, 1, "", "period_find"], [181, 4, 1, "", "shor"]], "sympy.physics.quantum.shor.CMod": [[181, 3, 1, "", "N"], [181, 3, 1, "", "a"], [181, 3, 1, "", "t"]], "sympy.physics.quantum.spin": [[182, 1, 1, "", "J2Op"], [182, 1, 1, "", "JxBra"], [182, 1, 1, "", "JxBraCoupled"], [182, 1, 1, "", "JxKet"], [182, 1, 1, "", "JxKetCoupled"], [182, 1, 1, "", "JyBra"], [182, 1, 1, "", "JyBraCoupled"], [182, 1, 1, "", "JyKet"], [182, 1, 1, "", "JyKetCoupled"], [182, 1, 1, "", "JzBra"], [182, 1, 1, "", "JzBraCoupled"], [182, 1, 1, "", "JzKet"], [182, 1, 1, "", "JzKetCoupled"], [182, 1, 1, "", "JzOp"], [182, 1, 1, "", "Rotation"], [182, 1, 1, "", "WignerD"], [182, 4, 1, "", "couple"], [182, 4, 1, "", "uncouple"]], "sympy.physics.quantum.spin.Rotation": [[182, 2, 1, "", "D"], [182, 2, 1, "", "d"]], "sympy.physics.quantum.state": [[183, 1, 1, "", "Bra"], [183, 1, 1, "", "BraBase"], [183, 1, 1, "", "Ket"], [183, 1, 1, "", "KetBase"], [183, 1, 1, "", "OrthogonalBra"], [183, 1, 1, "", "OrthogonalKet"], [183, 1, 1, "", "OrthogonalState"], [183, 1, 1, "", "State"], [183, 1, 1, "", "StateBase"], [183, 1, 1, "", "TimeDepBra"], [183, 1, 1, "", "TimeDepKet"], [183, 1, 1, "", "TimeDepState"], [183, 1, 1, "", "Wavefunction"]], "sympy.physics.quantum.state.StateBase": [[183, 3, 1, "", "dual"], [183, 2, 1, "", "dual_class"], [183, 3, 1, "", "operators"]], "sympy.physics.quantum.state.TimeDepState": [[183, 3, 1, "", "label"], [183, 3, 1, "", "time"]], "sympy.physics.quantum.state.Wavefunction": [[183, 3, 1, "", "expr"], [183, 3, 1, "", "is_commutative"], [183, 3, 1, "", "is_normalized"], [183, 3, 1, "", "limits"], [183, 3, 1, "", "norm"], [183, 2, 1, "", "normalize"], [183, 2, 1, "", "prob"], [183, 3, 1, "", "variables"]], "sympy.physics.quantum.tensorproduct": [[184, 1, 1, "", "TensorProduct"], [184, 4, 1, "", "tensor_product_simp"]], "sympy.physics.secondquant": [[185, 1, 1, "", "AnnihilateBoson"], [185, 1, 1, "", "AnnihilateFermion"], [185, 1, 1, "", "AntiSymmetricTensor"], [185, 5, 1, "", "B"], [185, 5, 1, "", "BBra"], [185, 5, 1, "", "BKet"], [185, 5, 1, "", "Bd"], [185, 1, 1, "", "BosonicBasis"], [185, 1, 1, "", "Commutator"], [185, 1, 1, "", "CreateBoson"], [185, 1, 1, "", "CreateFermion"], [185, 1, 1, "", "Dagger"], [185, 5, 1, "", "F"], [185, 5, 1, "", "FBra"], [185, 5, 1, "", "FKet"], [185, 5, 1, "", "Fd"], [185, 1, 1, "", "FixedBosonicBasis"], [185, 1, 1, "", "FockState"], [185, 1, 1, "", "FockStateBosonBra"], [185, 1, 1, "", "FockStateBosonKet"], [185, 1, 1, "", "FockStateBra"], [185, 1, 1, "", "FockStateFermionBra"], [185, 1, 1, "", "FockStateFermionKet"], [185, 1, 1, "", "FockStateKet"], [185, 1, 1, "", "InnerProduct"], [185, 1, 1, "", "KroneckerDelta"], [185, 1, 1, "", "NO"], [185, 1, 1, "", "PermutationOperator"], [185, 1, 1, "", "VarBosonicBasis"], [185, 4, 1, "", "apply_operators"], [185, 4, 1, "", "contraction"], [185, 4, 1, "", "evaluate_deltas"], [185, 4, 1, "", "matrix_rep"], [185, 4, 1, "", "simplify_index_permutations"], [185, 4, 1, "", "substitute_dummies"], [185, 4, 1, "", "wicks"]], "sympy.physics.secondquant.AnnihilateBoson": [[185, 2, 1, "", "apply_operator"]], "sympy.physics.secondquant.AnnihilateFermion": [[185, 2, 1, "", "apply_operator"], [185, 3, 1, "", "is_only_q_annihilator"], [185, 3, 1, "", "is_only_q_creator"], [185, 3, 1, "", "is_q_annihilator"], [185, 3, 1, "", "is_q_creator"]], "sympy.physics.secondquant.AntiSymmetricTensor": [[185, 3, 1, "", "lower"], [185, 3, 1, "", "symbol"], [185, 3, 1, "", "upper"]], "sympy.physics.secondquant.Commutator": [[185, 2, 1, "", "doit"], [185, 2, 1, "", "eval"]], "sympy.physics.secondquant.CreateBoson": [[185, 2, 1, "", "apply_operator"]], "sympy.physics.secondquant.CreateFermion": [[185, 2, 1, "", "apply_operator"], [185, 3, 1, "", "is_only_q_annihilator"], [185, 3, 1, "", "is_only_q_creator"], [185, 3, 1, "", "is_q_annihilator"], [185, 3, 1, "", "is_q_creator"]], "sympy.physics.secondquant.Dagger": [[185, 2, 1, "", "eval"]], "sympy.physics.secondquant.FixedBosonicBasis": [[185, 2, 1, "", "index"], [185, 2, 1, "", "state"]], "sympy.physics.secondquant.InnerProduct": [[185, 3, 1, "", "bra"], [185, 3, 1, "", "ket"]], "sympy.physics.secondquant.KroneckerDelta": [[185, 2, 1, "", "eval"], [185, 3, 1, "", "indices_contain_equal_information"], [185, 3, 1, "", "is_above_fermi"], [185, 3, 1, "", "is_below_fermi"], [185, 3, 1, "", "is_only_above_fermi"], [185, 3, 1, "", "is_only_below_fermi"], [185, 3, 1, "", "killable_index"], [185, 3, 1, "", "preferred_index"]], "sympy.physics.secondquant.NO": [[185, 2, 1, "", "doit"], [185, 2, 1, "", "get_subNO"], [185, 3, 1, "", "has_q_annihilators"], [185, 3, 1, "", "has_q_creators"], [185, 2, 1, "", "iter_q_annihilators"], [185, 2, 1, "", "iter_q_creators"]], "sympy.physics.secondquant.PermutationOperator": [[185, 2, 1, "", "get_permuted"]], "sympy.physics.secondquant.VarBosonicBasis": [[185, 2, 1, "", "index"], [185, 2, 1, "", "state"]], "sympy.physics.sho": [[186, 4, 1, "", "E_nl"], [186, 4, 1, "", "R_nl"]], "sympy.physics.units": [[187, 0, 0, "-", "dimensions"], [191, 0, 0, "-", "prefixes"], [192, 0, 0, "-", "quantities"], [193, 0, 0, "-", "unitsystem"], [192, 0, 0, "-", "util"]], "sympy.physics.units.dimensions": [[187, 1, 1, "", "Dimension"], [187, 1, 1, "", "DimensionSystem"]], "sympy.physics.units.dimensions.Dimension": [[187, 2, 1, "", "has_integer_powers"]], "sympy.physics.units.dimensions.DimensionSystem": [[187, 3, 1, "", "can_transf_matrix"], [187, 3, 1, "", "dim"], [187, 2, 1, "", "dim_can_vector"], [187, 2, 1, "", "dim_vector"], [187, 3, 1, "", "inv_can_transf_matrix"], [187, 3, 1, "", "is_consistent"], [187, 2, 1, "", "is_dimensionless"], [187, 3, 1, "", "list_can_dims"], [187, 2, 1, "", "print_dim_base"]], "sympy.physics.units.prefixes": [[191, 1, 1, "", "Prefix"]], "sympy.physics.units.quantities": [[192, 1, 1, "", "Quantity"]], "sympy.physics.units.quantities.Quantity": [[192, 3, 1, "", "abbrev"], [192, 2, 1, "", "convert_to"], [192, 3, 1, "", "free_symbols"], [192, 3, 1, "", "is_prefixed"], [192, 3, 1, "", "scale_factor"], [192, 2, 1, "", "set_global_relative_scale_factor"]], "sympy.physics.units.unitsystem": [[193, 1, 1, "", "UnitSystem"]], "sympy.physics.units.unitsystem.UnitSystem": [[193, 3, 1, "", "dim"], [193, 2, 1, "", "extend"], [193, 2, 1, "", "get_units_non_prefixed"], [193, 3, 1, "", "is_consistent"]], "sympy.physics.units.util": [[192, 4, 1, "", "convert_to"]], "sympy.physics.vector.dyadic": [[195, 1, 1, "", "Dyadic"]], "sympy.physics.vector.dyadic.Dyadic": [[195, 2, 1, "", "applyfunc"], [195, 2, 1, "", "cross"], [195, 2, 1, "", "doit"], [195, 2, 1, "", "dot"], [195, 2, 1, "", "dt"], [195, 2, 1, "", "express"], [195, 3, 1, "", "func"], [195, 2, 1, "", "simplify"], [195, 2, 1, "", "subs"], [195, 2, 1, "", "to_matrix"], [195, 2, 1, "", "xreplace"]], "sympy.physics.vector": [[197, 4, 1, "", "dynamicsymbols"], [199, 0, 0, "-", "functions"], [199, 0, 0, "-", "point"]], "sympy.physics.vector.fieldfunctions": [[196, 4, 1, "", "curl"], [196, 4, 1, "", "divergence"], [196, 4, 1, "", "gradient"], [196, 4, 1, "", "is_conservative"], [196, 4, 1, "", "is_solenoidal"], [196, 4, 1, "", "scalar_potential"], [196, 4, 1, "", "scalar_potential_difference"]], "sympy.physics.vector.frame": [[195, 1, 1, "", "CoordinateSym"], [195, 1, 1, "", "ReferenceFrame"]], "sympy.physics.vector.frame.ReferenceFrame": [[195, 2, 1, "", "ang_acc_in"], [195, 2, 1, "", "ang_vel_in"], [195, 2, 1, "", "dcm"], [195, 2, 1, "", "orient"], [195, 2, 1, "", "orient_axis"], [195, 2, 1, "", "orient_body_fixed"], [195, 2, 1, "", "orient_explicit"], [195, 2, 1, "", "orient_quaternion"], [195, 2, 1, "", "orient_space_fixed"], [195, 2, 1, "", "orientnew"], [195, 2, 1, "", "partial_velocity"], [195, 2, 1, "", "set_ang_acc"], [195, 2, 1, "", "set_ang_vel"], [195, 3, 1, "", "u"], [195, 2, 1, "", "variable_map"], [195, 3, 1, "", "x"], [195, 3, 1, "", "xx"], [195, 3, 1, "", "xy"], [195, 3, 1, "", "xz"], [195, 3, 1, "", "y"], [195, 3, 1, "", "yx"], [195, 3, 1, "", "yy"], [195, 3, 1, "", "yz"], [195, 3, 1, "", "z"], [195, 3, 1, "", "zx"], [195, 3, 1, "", "zy"], [195, 3, 1, "", "zz"]], "sympy.physics.vector.functions": [[197, 4, 1, "", "cross"], [197, 4, 1, "", "dot"], [197, 4, 1, "", "express"], [199, 4, 1, "", "get_motion_params"], [199, 4, 1, "", "kinematic_equations"], [197, 4, 1, "", "outer"], [199, 4, 1, "", "partial_velocity"], [197, 4, 1, "", "time_derivative"]], "sympy.physics.vector.point": [[199, 1, 1, "", "Point"]], "sympy.physics.vector.point.Point": [[199, 2, 1, "", "a1pt_theory"], [199, 2, 1, "", "a2pt_theory"], [199, 2, 1, "", "acc"], [199, 2, 1, "", "locatenew"], [199, 2, 1, "", "partial_velocity"], [199, 2, 1, "", "pos_from"], [199, 2, 1, "", "set_acc"], [199, 2, 1, "", "set_pos"], [199, 2, 1, "", "set_vel"], [199, 2, 1, "", "v1pt_theory"], [199, 2, 1, "", "v2pt_theory"], [199, 2, 1, "", "vel"]], "sympy.physics.vector.printing": [[200, 4, 1, "", "init_vprinting"], [200, 4, 1, "", "vlatex"], [200, 4, 1, "", "vpprint"], [200, 4, 1, "", "vprint"]], "sympy.physics.vector.vector": [[195, 1, 1, "", "Vector"]], "sympy.physics.vector.vector.Vector": [[195, 2, 1, "", "angle_between"], [195, 2, 1, "", "applyfunc"], [195, 2, 1, "", "cross"], [195, 2, 1, "", "diff"], [195, 2, 1, "", "doit"], [195, 2, 1, "", "dot"], [195, 2, 1, "", "dt"], [195, 2, 1, "", "express"], [195, 2, 1, "", "free_dynamicsymbols"], [195, 2, 1, "", "free_symbols"], [195, 3, 1, "", "func"], [195, 2, 1, "", "magnitude"], [195, 2, 1, "", "normalize"], [195, 2, 1, "", "outer"], [195, 2, 1, "", "separate"], [195, 2, 1, "", "simplify"], [195, 2, 1, "", "subs"], [195, 2, 1, "", "to_matrix"], [195, 2, 1, "", "xreplace"]], "sympy.physics.wigner": [[205, 4, 1, "", "clebsch_gordan"], [205, 4, 1, "", "dot_rot_grad_Ynm"], [205, 4, 1, "", "gaunt"], [205, 4, 1, "", "racah"], [205, 4, 1, "", "real_gaunt"], [205, 4, 1, "", "wigner_3j"], [205, 4, 1, "", "wigner_6j"], [205, 4, 1, "", "wigner_9j"], [205, 4, 1, "", "wigner_d"], [205, 4, 1, "", "wigner_d_small"]], "sympy.plotting": [[206, 0, 0, "-", "plot"], [206, 0, 0, "-", "pygletplot"]], "sympy.plotting.plot": [[206, 1, 1, "", "MatplotlibBackend"], [206, 1, 1, "", "Plot"], [206, 1, 1, "", "PlotGrid"], [206, 1, 1, "", "TextBackend"], [206, 4, 1, "", "plot"], [206, 4, 1, "", "plot3d"], [206, 4, 1, "", "plot3d_parametric_line"], [206, 4, 1, "", "plot3d_parametric_surface"], [206, 4, 1, "", "plot_parametric"]], "sympy.plotting.plot.MatplotlibBackend": [[206, 2, 1, "", "get_segments"], [206, 2, 1, "", "process_series"]], "sympy.plotting.plot.Plot": [[206, 3, 1, "", "annotations"], [206, 2, 1, "", "append"], [206, 2, 1, "", "extend"], [206, 3, 1, "", "fill"], [206, 3, 1, "", "markers"], [206, 3, 1, "", "rectangles"]], "sympy.plotting.plot_implicit": [[206, 4, 1, "", "plot_implicit"]], "sympy.plotting.series": [[206, 1, 1, "", "BaseSeries"], [206, 1, 1, "", "ImplicitSeries"], [206, 1, 1, "", "Line2DBaseSeries"], [206, 1, 1, "", "Line3DBaseSeries"], [206, 1, 1, "", "LineOver1DRangeSeries"], [206, 1, 1, "", "Parametric2DLineSeries"], [206, 1, 1, "", "Parametric3DLineSeries"], [206, 1, 1, "", "ParametricSurfaceSeries"], [206, 1, 1, "", "SurfaceBaseSeries"], [206, 1, 1, "", "SurfaceOver2DRangeSeries"]], "sympy.plotting.series.BaseSeries": [[206, 2, 1, "", "eval_color_func"], [206, 3, 1, "", "expr"], [206, 2, 1, "", "get_data"], [206, 2, 1, "", "get_label"], [206, 3, 1, "", "n"], [206, 3, 1, "", "params"]], "sympy.plotting.series.ImplicitSeries": [[206, 2, 1, "", "get_data"], [206, 2, 1, "", "get_label"]], "sympy.plotting.series.Line2DBaseSeries": [[206, 2, 1, "", "get_data"]], "sympy.plotting.series.LineOver1DRangeSeries": [[206, 2, 1, "", "get_points"]], "sympy.plotting.series.ParametricSurfaceSeries": [[206, 2, 1, "", "get_data"], [206, 2, 1, "", "get_meshes"]], "sympy.plotting.series.SurfaceOver2DRangeSeries": [[206, 2, 1, "", "get_data"], [206, 2, 1, "", "get_meshes"]], "sympy.plotting.textplot": [[206, 4, 1, "", "textplot"]], "sympy.polys.agca.extensions": [[207, 1, 1, "", "ExtensionElement"], [207, 1, 1, "", "MonogenicFiniteExtension"]], "sympy.polys.agca.extensions.ExtensionElement": [[207, 2, 1, "", "inverse"]], "sympy.polys.agca.extensions.MonogenicFiniteExtension": [[207, 5, 1, "", "dtype"]], "sympy.polys.agca.homomorphisms": [[207, 1, 1, "", "ModuleHomomorphism"], [207, 4, 1, "", "homomorphism"]], "sympy.polys.agca.homomorphisms.ModuleHomomorphism": [[207, 2, 1, "", "image"], [207, 2, 1, "", "is_injective"], [207, 2, 1, "", "is_isomorphism"], [207, 2, 1, "", "is_surjective"], [207, 2, 1, "", "is_zero"], [207, 2, 1, "", "kernel"], [207, 2, 1, "", "quotient_codomain"], [207, 2, 1, "", "quotient_domain"], [207, 2, 1, "", "restrict_codomain"], [207, 2, 1, "", "restrict_domain"]], "sympy.polys.agca.ideals": [[207, 1, 1, "", "Ideal"]], "sympy.polys.agca.ideals.Ideal": [[207, 2, 1, "", "contains"], [207, 2, 1, "", "depth"], [207, 2, 1, "", "height"], [207, 2, 1, "", "intersect"], [207, 2, 1, "", "is_maximal"], [207, 2, 1, "", "is_primary"], [207, 2, 1, "", "is_prime"], [207, 2, 1, "", "is_principal"], [207, 2, 1, "", "is_radical"], [207, 2, 1, "", "is_whole_ring"], [207, 2, 1, "", "is_zero"], [207, 2, 1, "", "product"], [207, 2, 1, "", "quotient"], [207, 2, 1, "", "radical"], [207, 2, 1, "", "reduce_element"], [207, 2, 1, "", "saturate"], [207, 2, 1, "", "subset"], [207, 2, 1, "", "union"]], "sympy.polys.agca.modules": [[207, 1, 1, "", "FreeModule"], [207, 1, 1, "", "FreeModuleElement"], [207, 1, 1, "", "Module"], [207, 1, 1, "", "QuotientModule"], [207, 1, 1, "", "QuotientModuleElement"], [207, 1, 1, "", "SubModule"], [207, 1, 1, "", "SubQuotientModule"]], "sympy.polys.agca.modules.FreeModule": [[207, 2, 1, "", "basis"], [207, 2, 1, "", "convert"], [207, 5, 1, "", "dtype"], [207, 2, 1, "", "identity_hom"], [207, 2, 1, "", "is_submodule"], [207, 2, 1, "", "is_zero"], [207, 2, 1, "", "multiply_ideal"], [207, 2, 1, "", "quotient_module"]], "sympy.polys.agca.modules.Module": [[207, 2, 1, "", "contains"], [207, 2, 1, "", "convert"], [207, 2, 1, "", "identity_hom"], [207, 2, 1, "", "is_submodule"], [207, 2, 1, "", "is_zero"], [207, 2, 1, "", "multiply_ideal"], [207, 2, 1, "", "quotient_module"], [207, 2, 1, "", "submodule"], [207, 2, 1, "", "subset"]], "sympy.polys.agca.modules.QuotientModule": [[207, 2, 1, "", "convert"], [207, 5, 1, "", "dtype"], [207, 2, 1, "", "identity_hom"], [207, 2, 1, "", "is_submodule"], [207, 2, 1, "", "is_zero"], [207, 2, 1, "", "quotient_hom"], [207, 2, 1, "", "submodule"]], "sympy.polys.agca.modules.QuotientModuleElement": [[207, 2, 1, "", "eq"]], "sympy.polys.agca.modules.SubModule": [[207, 2, 1, "", "convert"], [207, 2, 1, "", "identity_hom"], [207, 2, 1, "", "in_terms_of_generators"], [207, 2, 1, "", "inclusion_hom"], [207, 2, 1, "", "intersect"], [207, 2, 1, "", "is_full_module"], [207, 2, 1, "", "is_submodule"], [207, 2, 1, "", "is_zero"], [207, 2, 1, "", "module_quotient"], [207, 2, 1, "", "multiply_ideal"], [207, 2, 1, "", "quotient_module"], [207, 2, 1, "", "reduce_element"], [207, 2, 1, "", "submodule"], [207, 2, 1, "", "syzygy_module"], [207, 2, 1, "", "union"]], "sympy.polys.agca.modules.SubQuotientModule": [[207, 2, 1, "", "is_full_module"], [207, 2, 1, "", "quotient_hom"]], "sympy.polys.appellseqs": [[216, 4, 1, "", "andre_poly"], [216, 4, 1, "", "bernoulli_c_poly"], [216, 4, 1, "", "bernoulli_poly"], [216, 4, 1, "", "euler_poly"], [216, 4, 1, "", "genocchi_poly"]], "sympy.polys.constructor": [[216, 4, 1, "", "construct_domain"]], "sympy.polys.densearith": [[213, 4, 1, "", "dmp_abs"], [213, 4, 1, "", "dmp_add"], [213, 4, 1, "", "dmp_add_ground"], [213, 4, 1, "", "dmp_add_mul"], [213, 4, 1, "", "dmp_add_term"], [213, 4, 1, "", "dmp_div"], [213, 4, 1, "", "dmp_expand"], [213, 4, 1, "", "dmp_exquo"], [213, 4, 1, "", "dmp_exquo_ground"], [213, 4, 1, "", "dmp_ff_div"], [213, 4, 1, "", "dmp_l1_norm"], [213, 4, 1, "", "dmp_max_norm"], [213, 4, 1, "", "dmp_mul"], [213, 4, 1, "", "dmp_mul_ground"], [213, 4, 1, "", "dmp_mul_term"], [213, 4, 1, "", "dmp_neg"], [213, 4, 1, "", "dmp_pdiv"], [213, 4, 1, "", "dmp_pexquo"], [213, 4, 1, "", "dmp_pow"], [213, 4, 1, "", "dmp_pquo"], [213, 4, 1, "", "dmp_prem"], [213, 4, 1, "", "dmp_quo"], [213, 4, 1, "", "dmp_quo_ground"], [213, 4, 1, "", "dmp_rem"], [213, 4, 1, "", "dmp_rr_div"], [213, 4, 1, "", "dmp_sqr"], [213, 4, 1, "", "dmp_sub"], [213, 4, 1, "", "dmp_sub_ground"], [213, 4, 1, "", "dmp_sub_mul"], [213, 4, 1, "", "dmp_sub_term"], [213, 4, 1, "", "dup_lshift"], [213, 4, 1, "", "dup_rshift"]], "sympy.polys.densebasic": [[213, 4, 1, "", "dmp_LC"], [213, 4, 1, "", "dmp_TC"], [213, 4, 1, "", "dmp_apply_pairs"], [213, 4, 1, "", "dmp_convert"], [213, 4, 1, "", "dmp_copy"], [213, 4, 1, "", "dmp_deflate"], [213, 4, 1, "", "dmp_degree"], [213, 4, 1, "", "dmp_degree_in"], [213, 4, 1, "", "dmp_degree_list"], [213, 4, 1, "", "dmp_eject"], [213, 4, 1, "", "dmp_exclude"], [213, 4, 1, "", "dmp_from_dict"], [213, 4, 1, "", "dmp_from_sympy"], [213, 4, 1, "", "dmp_ground"], [213, 4, 1, "", "dmp_ground_LC"], [213, 4, 1, "", "dmp_ground_TC"], [213, 4, 1, "", "dmp_ground_nth"], [213, 4, 1, "", "dmp_ground_p"], [213, 4, 1, "", "dmp_grounds"], [213, 4, 1, "", "dmp_include"], [213, 4, 1, "", "dmp_inflate"], [213, 4, 1, "", "dmp_inject"], [213, 4, 1, "", "dmp_list_terms"], [213, 4, 1, "", "dmp_multi_deflate"], [213, 4, 1, "", "dmp_negative_p"], [213, 4, 1, "", "dmp_nest"], [213, 4, 1, "", "dmp_normal"], [213, 4, 1, "", "dmp_nth"], [213, 4, 1, "", "dmp_one"], [213, 4, 1, "", "dmp_one_p"], [213, 4, 1, "", "dmp_permute"], [213, 4, 1, "", "dmp_positive_p"], [213, 4, 1, "", "dmp_raise"], [213, 4, 1, "", "dmp_slice"], [213, 4, 1, "", "dmp_strip"], [213, 4, 1, "", "dmp_swap"], [213, 4, 1, "", "dmp_terms_gcd"], [213, 4, 1, "", "dmp_to_dict"], [213, 4, 1, "", "dmp_to_tuple"], [213, 4, 1, "", "dmp_true_LT"], [213, 4, 1, "", "dmp_validate"], [213, 4, 1, "", "dmp_zero"], [213, 4, 1, "", "dmp_zero_p"], [213, 4, 1, "", "dmp_zeros"], [213, 4, 1, "", "dup_random"], [213, 4, 1, "", "dup_reverse"]], "sympy.polys.densetools": [[213, 4, 1, "", "dmp_clear_denoms"], [213, 4, 1, "", "dmp_compose"], [213, 4, 1, "", "dmp_diff"], [213, 4, 1, "", "dmp_diff_eval_in"], [213, 4, 1, "", "dmp_diff_in"], [213, 4, 1, "", "dmp_eval"], [213, 4, 1, "", "dmp_eval_in"], [213, 4, 1, "", "dmp_eval_tail"], [213, 4, 1, "", "dmp_ground_content"], [213, 4, 1, "", "dmp_ground_extract"], [213, 4, 1, "", "dmp_ground_monic"], [213, 4, 1, "", "dmp_ground_primitive"], [213, 4, 1, "", "dmp_ground_trunc"], [213, 4, 1, "", "dmp_integrate"], [213, 4, 1, "", "dmp_integrate_in"], [213, 4, 1, "", "dmp_lift"], [213, 4, 1, "", "dmp_revert"], [213, 4, 1, "", "dmp_trunc"], [213, 4, 1, "", "dup_content"], [213, 4, 1, "", "dup_decompose"], [213, 4, 1, "", "dup_extract"], [213, 4, 1, "", "dup_mirror"], [213, 4, 1, "", "dup_monic"], [213, 4, 1, "", "dup_primitive"], [213, 4, 1, "", "dup_real_imag"], [213, 4, 1, "", "dup_scale"], [213, 4, 1, "", "dup_shift"], [213, 4, 1, "", "dup_sign_variations"], [213, 4, 1, "", "dup_transform"]], "sympy.polys.dispersion": [[216, 4, 1, "", "dispersion"], [216, 4, 1, "", "dispersionset"]], "sympy.polys.distributedmodules": [[213, 4, 1, "", "sdm_LC"], [213, 4, 1, "", "sdm_LM"], [213, 4, 1, "", "sdm_LT"], [213, 4, 1, "", "sdm_add"], [213, 4, 1, "", "sdm_deg"], [213, 4, 1, "", "sdm_ecart"], [213, 4, 1, "", "sdm_from_dict"], [213, 4, 1, "", "sdm_from_vector"], [213, 4, 1, "", "sdm_groebner"], [213, 4, 1, "", "sdm_monomial_deg"], [213, 4, 1, "", "sdm_monomial_divides"], [213, 4, 1, "", "sdm_monomial_mul"], [213, 4, 1, "", "sdm_mul_term"], [213, 4, 1, "", "sdm_nf_mora"], [213, 4, 1, "", "sdm_spoly"], [213, 4, 1, "", "sdm_to_dict"], [213, 4, 1, "", "sdm_to_vector"], [213, 4, 1, "", "sdm_zero"]], "sympy.polys.domains": [[211, 1, 1, "", "AlgebraicField"], [211, 1, 1, "", "ComplexField"], [211, 1, 1, "", "ExpressionDomain"], [211, 1, 1, "", "FiniteField"], [211, 1, 1, "", "FractionField"], [211, 1, 1, "", "GMPYFiniteField"], [211, 1, 1, "", "GMPYIntegerRing"], [211, 1, 1, "", "GMPYRationalField"], [211, 1, 1, "", "IntegerRing"], [211, 1, 1, "", "PolynomialRing"], [211, 1, 1, "", "PythonFiniteField"], [211, 1, 1, "", "PythonIntegerRing"], [211, 1, 1, "", "PythonRationalField"], [211, 1, 1, "", "RationalField"], [211, 1, 1, "", "RealField"]], "sympy.polys.domains.AlgebraicField": [[211, 2, 1, "", "algebraic_field"], [211, 2, 1, "", "denom"], [211, 2, 1, "", "discriminant"], [211, 5, 1, "", "dtype"], [211, 5, 1, "", "ext"], [211, 2, 1, "", "from_AlgebraicField"], [211, 2, 1, "", "from_GaussianIntegerRing"], [211, 2, 1, "", "from_GaussianRationalField"], [211, 2, 1, "", "from_QQ"], [211, 2, 1, "", "from_QQ_gmpy"], [211, 2, 1, "", "from_QQ_python"], [211, 2, 1, "", "from_RealField"], [211, 2, 1, "", "from_ZZ"], [211, 2, 1, "", "from_ZZ_gmpy"], [211, 2, 1, "", "from_ZZ_python"], [211, 2, 1, "", "from_sympy"], [211, 2, 1, "", "galois_group"], [211, 2, 1, "", "get_ring"], [211, 2, 1, "", "integral_basis"], [211, 2, 1, "", "is_negative"], [211, 2, 1, "", "is_nonnegative"], [211, 2, 1, "", "is_nonpositive"], [211, 2, 1, "", "is_positive"], [211, 2, 1, "", "maximal_order"], [211, 5, 1, "", "mod"], [211, 2, 1, "", "numer"], [211, 5, 1, "", "orig_ext"], [211, 2, 1, "", "primes_above"], [211, 2, 1, "", "to_alg_num"], [211, 2, 1, "", "to_sympy"]], "sympy.polys.domains.ComplexField": [[211, 2, 1, "", "almosteq"], [211, 2, 1, "", "exsqrt"], [211, 2, 1, "", "from_sympy"], [211, 2, 1, "", "gcd"], [211, 2, 1, "", "get_exact"], [211, 2, 1, "", "get_ring"], [211, 2, 1, "", "is_negative"], [211, 2, 1, "", "is_nonnegative"], [211, 2, 1, "", "is_nonpositive"], [211, 2, 1, "", "is_positive"], [211, 2, 1, "", "is_square"], [211, 2, 1, "", "lcm"], [211, 2, 1, "", "to_sympy"]], "sympy.polys.domains.ExpressionDomain": [[211, 1, 1, "", "Expression"], [211, 2, 1, "", "denom"], [211, 5, 1, "", "dtype"], [211, 2, 1, "", "from_ExpressionDomain"], [211, 2, 1, "", "from_FractionField"], [211, 2, 1, "", "from_GaussianIntegerRing"], [211, 2, 1, "", "from_GaussianRationalField"], [211, 2, 1, "", "from_PolynomialRing"], [211, 2, 1, "", "from_QQ"], [211, 2, 1, "", "from_QQ_gmpy"], [211, 2, 1, "", "from_QQ_python"], [211, 2, 1, "", "from_RealField"], [211, 2, 1, "", "from_ZZ"], [211, 2, 1, "", "from_ZZ_gmpy"], [211, 2, 1, "", "from_ZZ_python"], [211, 2, 1, "", "from_sympy"], [211, 2, 1, "", "get_field"], [211, 2, 1, "", "get_ring"], [211, 2, 1, "", "is_negative"], [211, 2, 1, "", "is_nonnegative"], [211, 2, 1, "", "is_nonpositive"], [211, 2, 1, "", "is_positive"], [211, 2, 1, "", "numer"], [211, 2, 1, "", "to_sympy"]], "sympy.polys.domains.FiniteField": [[211, 2, 1, "", "characteristic"], [211, 2, 1, "", "exsqrt"], [211, 2, 1, "", "from_FF"], [211, 2, 1, "", "from_FF_gmpy"], [211, 2, 1, "", "from_FF_python"], [211, 2, 1, "", "from_QQ"], [211, 2, 1, "", "from_QQ_gmpy"], [211, 2, 1, "", "from_QQ_python"], [211, 2, 1, "", "from_RealField"], [211, 2, 1, "", "from_ZZ"], [211, 2, 1, "", "from_ZZ_gmpy"], [211, 2, 1, "", "from_ZZ_python"], [211, 2, 1, "", "from_sympy"], [211, 2, 1, "", "get_field"], [211, 2, 1, "", "is_square"], [211, 2, 1, "", "to_sympy"]], "sympy.polys.domains.FractionField": [[211, 2, 1, "", "denom"], [211, 2, 1, "", "factorial"], [211, 2, 1, "", "from_AlgebraicField"], [211, 2, 1, "", "from_ComplexField"], [211, 2, 1, "", "from_FractionField"], [211, 2, 1, "", "from_GaussianIntegerRing"], [211, 2, 1, "", "from_GaussianRationalField"], [211, 2, 1, "", "from_PolynomialRing"], [211, 2, 1, "", "from_QQ"], [211, 2, 1, "", "from_QQ_gmpy"], [211, 2, 1, "", "from_QQ_python"], [211, 2, 1, "", "from_RealField"], [211, 2, 1, "", "from_ZZ"], [211, 2, 1, "", "from_ZZ_gmpy"], [211, 2, 1, "", "from_ZZ_python"], [211, 2, 1, "", "from_sympy"], [211, 2, 1, "", "get_ring"], [211, 2, 1, "", "is_negative"], [211, 2, 1, "", "is_nonnegative"], [211, 2, 1, "", "is_nonpositive"], [211, 2, 1, "", "is_positive"], [211, 2, 1, "", "numer"], [211, 2, 1, "", "to_sympy"]], "sympy.polys.domains.GMPYIntegerRing": [[211, 2, 1, "", "factorial"], [211, 2, 1, "", "from_FF_gmpy"], [211, 2, 1, "", "from_FF_python"], [211, 2, 1, "", "from_QQ"], [211, 2, 1, "", "from_QQ_gmpy"], [211, 2, 1, "", "from_QQ_python"], [211, 2, 1, "", "from_RealField"], [211, 2, 1, "", "from_ZZ_gmpy"], [211, 2, 1, "", "from_ZZ_python"], [211, 2, 1, "", "from_sympy"], [211, 2, 1, "", "gcd"], [211, 2, 1, "", "gcdex"], [211, 2, 1, "", "lcm"], [211, 2, 1, "", "sqrt"], [211, 2, 1, "", "to_sympy"]], "sympy.polys.domains.GMPYRationalField": [[211, 2, 1, "", "denom"], [211, 2, 1, "", "div"], [211, 2, 1, "", "exquo"], [211, 2, 1, "", "factorial"], [211, 2, 1, "", "from_GaussianRationalField"], [211, 2, 1, "", "from_QQ_gmpy"], [211, 2, 1, "", "from_QQ_python"], [211, 2, 1, "", "from_RealField"], [211, 2, 1, "", "from_ZZ_gmpy"], [211, 2, 1, "", "from_ZZ_python"], [211, 2, 1, "", "from_sympy"], [211, 2, 1, "", "get_ring"], [211, 2, 1, "", "numer"], [211, 2, 1, "", "quo"], [211, 2, 1, "", "rem"], [211, 2, 1, "", "to_sympy"]], "sympy.polys.domains.IntegerRing": [[211, 2, 1, "", "algebraic_field"], [211, 2, 1, "", "exsqrt"], [211, 2, 1, "", "factorial"], [211, 2, 1, "", "from_AlgebraicField"], [211, 2, 1, "", "from_FF"], [211, 2, 1, "", "from_FF_gmpy"], [211, 2, 1, "", "from_FF_python"], [211, 2, 1, "", "from_QQ"], [211, 2, 1, "", "from_QQ_gmpy"], [211, 2, 1, "", "from_QQ_python"], [211, 2, 1, "", "from_RealField"], [211, 2, 1, "", "from_ZZ"], [211, 2, 1, "", "from_ZZ_gmpy"], [211, 2, 1, "", "from_ZZ_python"], [211, 2, 1, "", "from_sympy"], [211, 2, 1, "", "gcd"], [211, 2, 1, "", "gcdex"], [211, 2, 1, "", "get_field"], [211, 2, 1, "", "is_square"], [211, 2, 1, "", "lcm"], [211, 2, 1, "", "log"], [211, 2, 1, "", "sqrt"], [211, 2, 1, "", "to_sympy"]], "sympy.polys.domains.PolynomialRing": [[211, 2, 1, "", "factorial"], [211, 2, 1, "", "from_AlgebraicField"], [211, 2, 1, "", "from_ComplexField"], [211, 2, 1, "", "from_FractionField"], [211, 2, 1, "", "from_GaussianIntegerRing"], [211, 2, 1, "", "from_GaussianRationalField"], [211, 2, 1, "", "from_GlobalPolynomialRing"], [211, 2, 1, "", "from_PolynomialRing"], [211, 2, 1, "", "from_QQ"], [211, 2, 1, "", "from_QQ_gmpy"], [211, 2, 1, "", "from_QQ_python"], [211, 2, 1, "", "from_RealField"], [211, 2, 1, "", "from_ZZ"], [211, 2, 1, "", "from_ZZ_gmpy"], [211, 2, 1, "", "from_ZZ_python"], [211, 2, 1, "", "from_sympy"], [211, 2, 1, "", "gcd"], [211, 2, 1, "", "gcdex"], [211, 2, 1, "", "get_field"], [211, 2, 1, "", "is_negative"], [211, 2, 1, "", "is_nonnegative"], [211, 2, 1, "", "is_nonpositive"], [211, 2, 1, "", "is_positive"], [211, 2, 1, "", "is_unit"], [211, 2, 1, "", "lcm"], [211, 2, 1, "", "to_sympy"]], "sympy.polys.domains.RationalField": [[211, 2, 1, "", "algebraic_field"], [211, 2, 1, "", "denom"], [211, 2, 1, "", "div"], [211, 2, 1, "", "exquo"], [211, 2, 1, "", "exsqrt"], [211, 2, 1, "", "from_AlgebraicField"], [211, 2, 1, "", "from_GaussianRationalField"], [211, 2, 1, "", "from_QQ"], [211, 2, 1, "", "from_QQ_gmpy"], [211, 2, 1, "", "from_QQ_python"], [211, 2, 1, "", "from_RealField"], [211, 2, 1, "", "from_ZZ"], [211, 2, 1, "", "from_ZZ_gmpy"], [211, 2, 1, "", "from_ZZ_python"], [211, 2, 1, "", "from_sympy"], [211, 2, 1, "", "get_ring"], [211, 2, 1, "", "is_square"], [211, 2, 1, "", "numer"], [211, 2, 1, "", "quo"], [211, 2, 1, "", "rem"], [211, 2, 1, "", "to_sympy"]], "sympy.polys.domains.RealField": [[211, 2, 1, "", "almosteq"], [211, 2, 1, "", "exsqrt"], [211, 2, 1, "", "from_sympy"], [211, 2, 1, "", "gcd"], [211, 2, 1, "", "get_exact"], [211, 2, 1, "", "get_ring"], [211, 2, 1, "", "is_square"], [211, 2, 1, "", "lcm"], [211, 2, 1, "", "to_rational"], [211, 2, 1, "", "to_sympy"]], "sympy.polys.domains.compositedomain": [[211, 1, 1, "", "CompositeDomain"]], "sympy.polys.domains.compositedomain.CompositeDomain": [[211, 2, 1, "", "drop"], [211, 2, 1, "", "inject"]], "sympy.polys.domains.domain": [[211, 1, 1, "", "Domain"]], "sympy.polys.domains.domain.Domain": [[211, 2, 1, "", "abs"], [211, 2, 1, "", "add"], [211, 2, 1, "", "alg_field_from_poly"], [211, 2, 1, "", "algebraic_field"], [211, 2, 1, "", "almosteq"], [211, 2, 1, "", "characteristic"], [211, 2, 1, "", "cofactors"], [211, 2, 1, "", "convert"], [211, 2, 1, "", "convert_from"], [211, 2, 1, "", "cyclotomic_field"], [211, 2, 1, "", "denom"], [211, 2, 1, "", "div"], [211, 2, 1, "", "drop"], [211, 5, 1, "", "dtype"], [211, 2, 1, "", "evalf"], [211, 2, 1, "", "exquo"], [211, 2, 1, "", "exsqrt"], [211, 2, 1, "", "frac_field"], [211, 2, 1, "", "from_AlgebraicField"], [211, 2, 1, "", "from_ComplexField"], [211, 2, 1, "", "from_ExpressionDomain"], [211, 2, 1, "", "from_ExpressionRawDomain"], [211, 2, 1, "", "from_FF"], [211, 2, 1, "", "from_FF_gmpy"], [211, 2, 1, "", "from_FF_python"], [211, 2, 1, "", "from_FractionField"], [211, 2, 1, "", "from_GlobalPolynomialRing"], [211, 2, 1, "", "from_MonogenicFiniteExtension"], [211, 2, 1, "", "from_PolynomialRing"], [211, 2, 1, "", "from_QQ_gmpy"], [211, 2, 1, "", "from_QQ_python"], [211, 2, 1, "", "from_RealField"], [211, 2, 1, "", "from_ZZ_gmpy"], [211, 2, 1, "", "from_ZZ_python"], [211, 2, 1, "", "from_sympy"], [211, 2, 1, "", "gcd"], [211, 2, 1, "", "gcdex"], [211, 2, 1, "", "get_exact"], [211, 2, 1, "", "get_field"], [211, 2, 1, "", "get_ring"], [211, 2, 1, "", "half_gcdex"], [211, 5, 1, "", "has_assoc_Field"], [211, 5, 1, "", "has_assoc_Ring"], [211, 2, 1, "", "inject"], [211, 2, 1, "", "invert"], [211, 5, 1, "", "is_Field"], [211, 5, 1, "", "is_PID"], [211, 5, 1, "", "is_Ring"], [211, 2, 1, "", "is_negative"], [211, 2, 1, "", "is_nonnegative"], [211, 2, 1, "", "is_nonpositive"], [211, 2, 1, "", "is_one"], [211, 2, 1, "", "is_positive"], [211, 2, 1, "", "is_square"], [211, 2, 1, "", "is_zero"], [211, 2, 1, "", "lcm"], [211, 2, 1, "", "log"], [211, 2, 1, "", "map"], [211, 2, 1, "", "mul"], [211, 2, 1, "", "n"], [211, 2, 1, "", "neg"], [211, 2, 1, "", "numer"], [211, 2, 1, "", "of_type"], [211, 2, 1, "", "old_frac_field"], [211, 2, 1, "", "old_poly_ring"], [211, 5, 1, "", "one"], [211, 2, 1, "", "poly_ring"], [211, 2, 1, "", "pos"], [211, 2, 1, "", "pow"], [211, 2, 1, "", "quo"], [211, 2, 1, "", "rem"], [211, 2, 1, "", "revert"], [211, 2, 1, "", "sqrt"], [211, 2, 1, "", "sub"], [211, 2, 1, "", "to_sympy"], [211, 3, 1, "", "tp"], [211, 2, 1, "", "unify"], [211, 5, 1, "", "zero"]], "sympy.polys.domains.domainelement": [[211, 1, 1, "", "DomainElement"]], "sympy.polys.domains.domainelement.DomainElement": [[211, 2, 1, "", "parent"]], "sympy.polys.domains.expressiondomain.ExpressionDomain": [[211, 1, 1, "", "Expression"]], "sympy.polys.domains.field": [[211, 1, 1, "", "Field"]], "sympy.polys.domains.field.Field": [[211, 2, 1, "", "div"], [211, 2, 1, "", "exquo"], [211, 2, 1, "", "gcd"], [211, 2, 1, "", "get_field"], [211, 2, 1, "", "get_ring"], [211, 2, 1, "", "is_unit"], [211, 2, 1, "", "lcm"], [211, 2, 1, "", "quo"], [211, 2, 1, "", "rem"], [211, 2, 1, "", "revert"]], "sympy.polys.domains.gaussiandomains": [[211, 1, 1, "", "GaussianDomain"], [211, 1, 1, "", "GaussianElement"], [211, 1, 1, "", "GaussianInteger"], [211, 1, 1, "", "GaussianIntegerRing"], [211, 1, 1, "", "GaussianRational"], [211, 1, 1, "", "GaussianRationalField"]], "sympy.polys.domains.gaussiandomains.GaussianDomain": [[211, 2, 1, "", "from_AlgebraicField"], [211, 2, 1, "", "from_QQ"], [211, 2, 1, "", "from_QQ_gmpy"], [211, 2, 1, "", "from_QQ_python"], [211, 2, 1, "", "from_ZZ"], [211, 2, 1, "", "from_ZZ_gmpy"], [211, 2, 1, "", "from_ZZ_python"], [211, 2, 1, "", "from_sympy"], [211, 2, 1, "", "inject"], [211, 2, 1, "", "is_negative"], [211, 2, 1, "", "is_nonnegative"], [211, 2, 1, "", "is_nonpositive"], [211, 2, 1, "", "is_positive"], [211, 2, 1, "", "to_sympy"]], "sympy.polys.domains.gaussiandomains.GaussianElement": [[211, 2, 1, "", "new"], [211, 2, 1, "", "parent"], [211, 2, 1, "", "quadrant"]], "sympy.polys.domains.gaussiandomains.GaussianIntegerRing": [[211, 5, 1, "", "dtype"], [211, 2, 1, "", "from_GaussianIntegerRing"], [211, 2, 1, "", "from_GaussianRationalField"], [211, 2, 1, "", "gcd"], [211, 2, 1, "", "get_field"], [211, 2, 1, "", "get_ring"], [211, 2, 1, "", "lcm"], [211, 2, 1, "", "normalize"]], "sympy.polys.domains.gaussiandomains.GaussianRationalField": [[211, 2, 1, "", "as_AlgebraicField"], [211, 2, 1, "", "denom"], [211, 5, 1, "", "dtype"], [211, 2, 1, "", "from_GaussianIntegerRing"], [211, 2, 1, "", "from_GaussianRationalField"], [211, 2, 1, "", "get_field"], [211, 2, 1, "", "get_ring"], [211, 2, 1, "", "numer"]], "sympy.polys.domains.mpelements": [[211, 1, 1, "", "ComplexElement"], [211, 1, 1, "", "RealElement"]], "sympy.polys.domains.quotientring": [[211, 1, 1, "", "QuotientRing"]], "sympy.polys.domains.ring": [[211, 1, 1, "", "Ring"]], "sympy.polys.domains.ring.Ring": [[211, 2, 1, "", "denom"], [211, 2, 1, "", "div"], [211, 2, 1, "", "exquo"], [211, 2, 1, "", "free_module"], [211, 2, 1, "", "get_ring"], [211, 2, 1, "", "ideal"], [211, 2, 1, "", "invert"], [211, 2, 1, "", "numer"], [211, 2, 1, "", "quo"], [211, 2, 1, "", "quotient_ring"], [211, 2, 1, "", "rem"], [211, 2, 1, "", "revert"]], "sympy.polys.domains.simpledomain": [[211, 1, 1, "", "SimpleDomain"]], "sympy.polys.domains.simpledomain.SimpleDomain": [[211, 2, 1, "", "inject"]], "sympy.polys.euclidtools": [[213, 4, 1, "", "dmp_cancel"], [213, 4, 1, "", "dmp_content"], [213, 4, 1, "", "dmp_discriminant"], [213, 4, 1, "", "dmp_euclidean_prs"], [213, 4, 1, "", "dmp_ff_prs_gcd"], [213, 4, 1, "", "dmp_gcd"], [213, 4, 1, "", "dmp_gcdex"], [213, 4, 1, "", "dmp_half_gcdex"], [213, 4, 1, "", "dmp_inner_gcd"], [213, 4, 1, "", "dmp_inner_subresultants"], [213, 4, 1, "", "dmp_invert"], [213, 4, 1, "", "dmp_lcm"], [213, 4, 1, "", "dmp_primitive"], [213, 4, 1, "", "dmp_primitive_prs"], [213, 4, 1, "", "dmp_prs_resultant"], [213, 4, 1, "", "dmp_qq_collins_resultant"], [213, 4, 1, "", "dmp_qq_heu_gcd"], [213, 4, 1, "", "dmp_resultant"], [213, 4, 1, "", "dmp_rr_prs_gcd"], [213, 4, 1, "", "dmp_subresultants"], [213, 4, 1, "", "dmp_zz_collins_resultant"], [213, 4, 1, "", "dmp_zz_heu_gcd"], [213, 4, 1, "", "dmp_zz_modular_resultant"]], "sympy.polys.factortools": [[213, 4, 1, "", "dmp_ext_factor"], [213, 4, 1, "", "dmp_factor_list"], [213, 4, 1, "", "dmp_factor_list_include"], [213, 4, 1, "", "dmp_irreducible_p"], [213, 4, 1, "", "dmp_trial_division"], [213, 4, 1, "", "dmp_zz_diophantine"], [213, 4, 1, "", "dmp_zz_factor"], [213, 4, 1, "", "dmp_zz_mignotte_bound"], [213, 4, 1, "", "dmp_zz_wang"], [213, 4, 1, "", "dmp_zz_wang_hensel_lifting"], [213, 4, 1, "", "dmp_zz_wang_lead_coeffs"], [213, 4, 1, "", "dmp_zz_wang_non_divisors"], [213, 4, 1, "", "dmp_zz_wang_test_points"], [213, 4, 1, "", "dup_cyclotomic_p"], [213, 4, 1, "", "dup_gf_factor"], [213, 4, 1, "", "dup_zz_cyclotomic_factor"], [213, 4, 1, "", "dup_zz_cyclotomic_poly"], [213, 4, 1, "", "dup_zz_factor"], [213, 4, 1, "", "dup_zz_factor_sqf"], [213, 4, 1, "", "dup_zz_hensel_lift"], [213, 4, 1, "", "dup_zz_hensel_step"], [213, 4, 1, "", "dup_zz_irreducible_p"], [213, 4, 1, "", "dup_zz_zassenhaus"]], "sympy.polys.fglmtools": [[213, 4, 1, "", "matrix_fglm"]], "sympy.polys.fields": [[211, 1, 1, "", "FracElement"], [211, 1, 1, "", "FracField"], [211, 4, 1, "", "field"], [211, 4, 1, "", "sfield"], [211, 4, 1, "", "vfield"], [211, 4, 1, "", "xfield"]], "sympy.polys.fields.FracElement": [[211, 2, 1, "", "diff"]], "sympy.polys.galoistools": [[213, 4, 1, "", "gf_LC"], [213, 4, 1, "", "gf_Qbasis"], [213, 4, 1, "", "gf_Qmatrix"], [213, 4, 1, "", "gf_TC"], [213, 4, 1, "", "gf_add"], [213, 4, 1, "", "gf_add_ground"], [213, 4, 1, "", "gf_add_mul"], [213, 4, 1, "", "gf_berlekamp"], [213, 4, 1, "", "gf_cofactors"], [213, 4, 1, "", "gf_compose"], [213, 4, 1, "", "gf_compose_mod"], [213, 4, 1, "", "gf_crt"], [213, 4, 1, "", "gf_crt1"], [213, 4, 1, "", "gf_crt2"], [213, 4, 1, "", "gf_csolve"], [213, 4, 1, "", "gf_degree"], [213, 4, 1, "", "gf_diff"], [213, 4, 1, "", "gf_div"], [213, 4, 1, "", "gf_eval"], [213, 4, 1, "", "gf_expand"], [213, 4, 1, "", "gf_exquo"], [213, 4, 1, "", "gf_factor"], [213, 4, 1, "", "gf_factor_sqf"], [213, 4, 1, "", "gf_from_dict"], [213, 4, 1, "", "gf_from_int_poly"], [213, 4, 1, "", "gf_gcd"], [213, 4, 1, "", "gf_gcdex"], [213, 4, 1, "", "gf_int"], [213, 4, 1, "", "gf_irreducible"], [213, 4, 1, "", "gf_irreducible_p"], [213, 4, 1, "", "gf_lcm"], [213, 4, 1, "", "gf_lshift"], [213, 4, 1, "", "gf_monic"], [213, 4, 1, "", "gf_mul"], [213, 4, 1, "", "gf_mul_ground"], [213, 4, 1, "", "gf_multi_eval"], [213, 4, 1, "", "gf_neg"], [213, 4, 1, "", "gf_normal"], [213, 4, 1, "", "gf_pow"], [213, 4, 1, "", "gf_pow_mod"], [213, 4, 1, "", "gf_quo"], [213, 4, 1, "", "gf_quo_ground"], [213, 4, 1, "", "gf_random"], [213, 4, 1, "", "gf_rem"], [213, 4, 1, "", "gf_rshift"], [213, 4, 1, "", "gf_shoup"], [213, 4, 1, "", "gf_sqf_list"], [213, 4, 1, "", "gf_sqf_p"], [213, 4, 1, "", "gf_sqf_part"], [213, 4, 1, "", "gf_sqr"], [213, 4, 1, "", "gf_strip"], [213, 4, 1, "", "gf_sub"], [213, 4, 1, "", "gf_sub_ground"], [213, 4, 1, "", "gf_sub_mul"], [213, 4, 1, "", "gf_to_dict"], [213, 4, 1, "", "gf_to_int_poly"], [213, 4, 1, "", "gf_trace_map"], [213, 4, 1, "", "gf_trunc"], [213, 4, 1, "", "gf_value"], [213, 4, 1, "", "gf_zassenhaus"]], "sympy.polys.groebnertools": [[213, 4, 1, "", "groebner"], [213, 4, 1, "", "is_groebner"], [213, 4, 1, "", "is_minimal"], [213, 4, 1, "", "is_reduced"], [213, 4, 1, "", "red_groebner"], [213, 4, 1, "", "spoly"]], "sympy.polys.matrices": [[209, 0, 0, "-", "_dfm"], [209, 0, 0, "-", "_typing"], [209, 0, 0, "-", "ddm"], [209, 0, 0, "-", "dense"], [209, 0, 0, "-", "domainmatrix"], [209, 0, 0, "-", "sdm"]], "sympy.polys.matrices._dfm": [[209, 1, 1, "", "DFM"]], "sympy.polys.matrices._dfm.DFM": [[209, 2, 1, "", "add"], [209, 2, 1, "", "applyfunc"], [209, 2, 1, "", "charpoly"], [209, 2, 1, "", "convert_to"], [209, 2, 1, "", "copy"], [209, 2, 1, "", "det"], [209, 2, 1, "", "diag"], [209, 2, 1, "", "diagonal"], [209, 2, 1, "", "extract"], [209, 2, 1, "", "extract_slice"], [209, 2, 1, "", "eye"], [209, 2, 1, "", "from_ddm"], [209, 2, 1, "", "from_flat_nz"], [209, 2, 1, "", "from_list"], [209, 2, 1, "", "from_list_flat"], [209, 2, 1, "", "getitem"], [209, 2, 1, "", "hstack"], [209, 2, 1, "", "inv"], [209, 2, 1, "", "is_diagonal"], [209, 2, 1, "", "is_lower"], [209, 2, 1, "", "is_upper"], [209, 2, 1, "", "is_zero_matrix"], [209, 2, 1, "", "lll"], [209, 2, 1, "", "lll_transform"], [209, 2, 1, "", "lu"], [209, 2, 1, "", "lu_solve"], [209, 2, 1, "", "matmul"], [209, 2, 1, "", "mul"], [209, 2, 1, "", "mul_elementwise"], [209, 2, 1, "", "neg"], [209, 2, 1, "", "nnz"], [209, 2, 1, "", "nullspace"], [209, 2, 1, "", "nullspace_from_rref"], [209, 2, 1, "", "ones"], [209, 2, 1, "", "particular"], [209, 2, 1, "", "rmul"], [209, 2, 1, "", "scc"], [209, 2, 1, "", "setitem"], [209, 2, 1, "", "sub"], [209, 2, 1, "", "to_ddm"], [209, 2, 1, "", "to_dfm"], [209, 2, 1, "", "to_dfm_or_ddm"], [209, 2, 1, "", "to_dok"], [209, 2, 1, "", "to_flat_nz"], [209, 2, 1, "", "to_list"], [209, 2, 1, "", "to_list_flat"], [209, 2, 1, "", "to_sdm"], [209, 2, 1, "", "transpose"], [209, 2, 1, "", "vstack"], [209, 2, 1, "", "zeros"]], "sympy.polys.matrices._typing": [[209, 1, 1, "", "RingElement"]], "sympy.polys.matrices.ddm": [[209, 1, 1, "", "DDM"]], "sympy.polys.matrices.ddm.DDM": [[209, 2, 1, "", "add"], [209, 2, 1, "", "charpoly"], [209, 2, 1, "", "det"], [209, 2, 1, "", "diag"], [209, 2, 1, "", "diagonal"], [209, 2, 1, "", "from_dok"], [209, 2, 1, "", "from_flat_nz"], [209, 2, 1, "", "from_list"], [209, 2, 1, "", "from_list_flat"], [209, 2, 1, "", "hstack"], [209, 2, 1, "", "inv"], [209, 2, 1, "", "is_diagonal"], [209, 2, 1, "", "is_lower"], [209, 2, 1, "", "is_upper"], [209, 2, 1, "", "is_zero_matrix"], [209, 2, 1, "", "lu"], [209, 2, 1, "", "lu_solve"], [209, 2, 1, "", "matmul"], [209, 2, 1, "", "neg"], [209, 2, 1, "", "nnz"], [209, 2, 1, "", "nullspace"], [209, 2, 1, "", "nullspace_from_rref"], [209, 2, 1, "", "rref"], [209, 2, 1, "", "rref_den"], [209, 2, 1, "", "scc"], [209, 2, 1, "", "sub"], [209, 2, 1, "", "to_ddm"], [209, 2, 1, "", "to_dfm"], [209, 2, 1, "", "to_dfm_or_ddm"], [209, 2, 1, "", "to_dok"], [209, 2, 1, "", "to_flat_nz"], [209, 2, 1, "", "to_list"], [209, 2, 1, "", "to_list_flat"], [209, 2, 1, "", "to_sdm"], [209, 2, 1, "", "vstack"]], "sympy.polys.matrices.dense": [[209, 1, 1, "", "R"], [209, 1, 1, "", "T"], [209, 4, 1, "", "ddm_berk"], [209, 4, 1, "", "ddm_iadd"], [209, 4, 1, "", "ddm_idet"], [209, 4, 1, "", "ddm_iinv"], [209, 4, 1, "", "ddm_ilu"], [209, 4, 1, "", "ddm_ilu_solve"], [209, 4, 1, "", "ddm_ilu_split"], [209, 4, 1, "", "ddm_imatmul"], [209, 4, 1, "", "ddm_imul"], [209, 4, 1, "", "ddm_ineg"], [209, 4, 1, "", "ddm_irmul"], [209, 4, 1, "", "ddm_irref"], [209, 4, 1, "", "ddm_irref_den"], [209, 4, 1, "", "ddm_isub"], [209, 4, 1, "", "ddm_transpose"]], "sympy.polys.matrices.domainmatrix": [[209, 4, 1, "", "DM"], [209, 1, 1, "", "DomainMatrix"]], "sympy.polys.matrices.domainmatrix.DomainMatrix": [[209, 2, 1, "", "add"], [209, 2, 1, "", "adj_det"], [209, 2, 1, "", "adj_poly_det"], [209, 2, 1, "", "adjugate"], [209, 2, 1, "", "cancel_denom"], [209, 2, 1, "", "cancel_denom_elementwise"], [209, 2, 1, "", "charpoly"], [209, 2, 1, "", "charpoly_base"], [209, 2, 1, "", "charpoly_berk"], [209, 2, 1, "", "charpoly_factor_blocks"], [209, 2, 1, "", "charpoly_factor_list"], [209, 2, 1, "", "choose_domain"], [209, 2, 1, "", "clear_denoms"], [209, 2, 1, "", "columnspace"], [209, 2, 1, "", "content"], [209, 2, 1, "", "convert_to"], [209, 2, 1, "", "det"], [209, 2, 1, "", "diag"], [209, 2, 1, "", "diagonal"], [209, 2, 1, "", "eval_poly"], [209, 2, 1, "", "eval_poly_mul"], [209, 2, 1, "", "eye"], [209, 2, 1, "", "from_Matrix"], [209, 2, 1, "", "from_dict_sympy"], [209, 2, 1, "", "from_dok"], [209, 2, 1, "", "from_flat_nz"], [209, 2, 1, "", "from_list"], [209, 2, 1, "", "from_list_flat"], [209, 2, 1, "", "from_list_sympy"], [209, 2, 1, "", "from_rep"], [209, 2, 1, "", "hstack"], [209, 2, 1, "", "inv"], [209, 2, 1, "", "inv_den"], [209, 3, 1, "", "is_diagonal"], [209, 3, 1, "", "is_lower"], [209, 3, 1, "", "is_square"], [209, 3, 1, "", "is_upper"], [209, 2, 1, "", "lll"], [209, 2, 1, "", "lll_transform"], [209, 2, 1, "", "lu"], [209, 2, 1, "", "lu_solve"], [209, 2, 1, "", "matmul"], [209, 2, 1, "", "mul"], [209, 2, 1, "", "neg"], [209, 2, 1, "", "nnz"], [209, 2, 1, "", "nullspace"], [209, 2, 1, "", "nullspace_from_rref"], [209, 2, 1, "", "ones"], [209, 2, 1, "", "pow"], [209, 2, 1, "", "primitive"], [209, 2, 1, "", "rowspace"], [209, 2, 1, "", "rref"], [209, 2, 1, "", "rref_den"], [209, 2, 1, "", "scc"], [209, 2, 1, "", "solve_den"], [209, 2, 1, "", "solve_den_charpoly"], [209, 2, 1, "", "solve_den_rref"], [209, 2, 1, "", "sub"], [209, 2, 1, "", "to_Matrix"], [209, 2, 1, "", "to_ddm"], [209, 2, 1, "", "to_dense"], [209, 2, 1, "", "to_dfm"], [209, 2, 1, "", "to_dfm_or_ddm"], [209, 2, 1, "", "to_dok"], [209, 2, 1, "", "to_field"], [209, 2, 1, "", "to_flat_nz"], [209, 2, 1, "", "to_list"], [209, 2, 1, "", "to_list_flat"], [209, 2, 1, "", "to_sdm"], [209, 2, 1, "", "to_sparse"], [209, 2, 1, "", "transpose"], [209, 2, 1, "", "unify"], [209, 2, 1, "", "vstack"], [209, 2, 1, "", "zeros"]], "sympy.polys.matrices.normalforms": [[209, 4, 1, "", "hermite_normal_form"], [209, 4, 1, "", "smith_normal_form"]], "sympy.polys.matrices.sdm": [[209, 1, 1, "", "SDM"], [209, 4, 1, "", "sdm_berk"], [209, 4, 1, "", "sdm_irref"], [209, 4, 1, "", "sdm_nullspace_from_rref"], [209, 4, 1, "", "sdm_particular_from_rref"], [209, 4, 1, "", "sdm_rref_den"]], "sympy.polys.matrices.sdm.SDM": [[209, 2, 1, "", "add"], [209, 2, 1, "", "charpoly"], [209, 2, 1, "", "convert_to"], [209, 2, 1, "", "copy"], [209, 2, 1, "", "det"], [209, 2, 1, "", "diagonal"], [209, 2, 1, "", "eye"], [209, 2, 1, "", "from_ddm"], [209, 2, 1, "", "from_dok"], [209, 2, 1, "", "from_flat_nz"], [209, 2, 1, "", "from_list"], [209, 2, 1, "", "from_list_flat"], [209, 2, 1, "", "hstack"], [209, 2, 1, "", "inv"], [209, 2, 1, "", "is_diagonal"], [209, 2, 1, "", "is_lower"], [209, 2, 1, "", "is_upper"], [209, 2, 1, "", "is_zero_matrix"], [209, 2, 1, "", "lll"], [209, 2, 1, "", "lll_transform"], [209, 2, 1, "", "lu"], [209, 2, 1, "", "lu_solve"], [209, 2, 1, "", "matmul"], [209, 2, 1, "", "mul"], [209, 2, 1, "", "neg"], [209, 2, 1, "", "new"], [209, 2, 1, "", "nnz"], [209, 2, 1, "", "nullspace"], [209, 2, 1, "", "nullspace_from_rref"], [209, 2, 1, "", "rref"], [209, 2, 1, "", "rref_den"], [209, 2, 1, "", "scc"], [209, 2, 1, "", "sub"], [209, 2, 1, "", "to_ddm"], [209, 2, 1, "", "to_dfm"], [209, 2, 1, "", "to_dfm_or_ddm"], [209, 2, 1, "", "to_dok"], [209, 2, 1, "", "to_flat_nz"], [209, 2, 1, "", "to_list"], [209, 2, 1, "", "to_list_flat"], [209, 2, 1, "", "to_sdm"], [209, 2, 1, "", "transpose"], [209, 2, 1, "", "vstack"], [209, 2, 1, "", "zeros"]], "sympy.polys.modulargcd": [[213, 4, 1, "", "_modgcd_multivariate_p"], [213, 4, 1, "", "func_field_modgcd"], [213, 4, 1, "", "modgcd_bivariate"], [213, 4, 1, "", "modgcd_multivariate"], [213, 4, 1, "", "modgcd_univariate"]], "sympy.polys.monomials": [[216, 1, 1, "", "Monomial"], [216, 4, 1, "", "itermonomials"], [216, 4, 1, "", "monomial_count"]], "sympy.polys.monomials.Monomial": [[216, 2, 1, "", "as_expr"], [216, 2, 1, "", "gcd"], [216, 2, 1, "", "lcm"]], "sympy.polys.numberfields.basis": [[215, 4, 1, "", "round_two"]], "sympy.polys.numberfields.galoisgroups": [[215, 4, 1, "", "galois_group"]], "sympy.polys.numberfields.minpoly": [[215, 4, 1, "", "minimal_polynomial"], [215, 4, 1, "", "minpoly"]], "sympy.polys.numberfields": [[215, 0, 0, "-", "modules"], [215, 0, 0, "-", "subfield"]], "sympy.polys.numberfields.modules": [[215, 1, 1, "", "EndomorphismRing"], [215, 1, 1, "", "InnerEndomorphism"], [215, 1, 1, "", "Module"], [215, 1, 1, "", "ModuleElement"], [215, 1, 1, "", "ModuleEndomorphism"], [215, 1, 1, "", "ModuleHomomorphism"], [215, 1, 1, "", "PowerBasis"], [215, 1, 1, "", "PowerBasisElement"], [215, 1, 1, "", "Submodule"], [215, 4, 1, "", "find_min_poly"], [215, 4, 1, "", "make_mod_elt"]], "sympy.polys.numberfields.modules.EndomorphismRing": [[215, 2, 1, "", "__init__"], [215, 2, 1, "", "inner_endomorphism"], [215, 2, 1, "", "represent"]], "sympy.polys.numberfields.modules.InnerEndomorphism": [[215, 2, 1, "", "__init__"]], "sympy.polys.numberfields.modules.Module": [[215, 2, 1, "", "__call__"], [215, 2, 1, "", "ancestors"], [215, 2, 1, "", "basis_elements"], [215, 2, 1, "", "element_from_rational"], [215, 2, 1, "", "endomorphism_ring"], [215, 2, 1, "", "is_compat_col"], [215, 2, 1, "", "mult_tab"], [215, 3, 1, "", "n"], [215, 2, 1, "", "nearest_common_ancestor"], [215, 3, 1, "", "number_field"], [215, 2, 1, "", "one"], [215, 3, 1, "", "parent"], [215, 2, 1, "", "power_basis_ancestor"], [215, 2, 1, "", "represent"], [215, 2, 1, "", "starts_with_unity"], [215, 2, 1, "", "submodule_from_gens"], [215, 2, 1, "", "submodule_from_matrix"], [215, 2, 1, "", "whole_submodule"], [215, 2, 1, "", "zero"]], "sympy.polys.numberfields.modules.ModuleElement": [[215, 3, 1, "", "QQ_col"], [215, 2, 1, "", "__add__"], [215, 2, 1, "", "__init__"], [215, 2, 1, "", "__mod__"], [215, 2, 1, "", "__mul__"], [215, 2, 1, "", "column"], [215, 2, 1, "", "equiv"], [215, 2, 1, "", "from_int_list"], [215, 2, 1, "", "is_compat"], [215, 3, 1, "", "n"], [215, 2, 1, "", "over_power_basis"], [215, 2, 1, "", "reduced"], [215, 2, 1, "", "reduced_mod_p"], [215, 2, 1, "", "to_ancestor"], [215, 2, 1, "", "to_parent"], [215, 2, 1, "", "unify"]], "sympy.polys.numberfields.modules.ModuleEndomorphism": [[215, 2, 1, "", "__init__"]], "sympy.polys.numberfields.modules.ModuleHomomorphism": [[215, 2, 1, "", "__init__"], [215, 2, 1, "", "kernel"], [215, 2, 1, "", "matrix"]], "sympy.polys.numberfields.modules.PowerBasis": [[215, 2, 1, "", "__init__"], [215, 2, 1, "", "element_from_ANP"], [215, 2, 1, "", "element_from_alg_num"], [215, 2, 1, "", "element_from_poly"], [215, 2, 1, "", "represent"]], "sympy.polys.numberfields.modules.PowerBasisElement": [[215, 3, 1, "", "T"], [215, 2, 1, "", "as_expr"], [215, 3, 1, "", "generator"], [215, 3, 1, "", "is_rational"], [215, 2, 1, "", "norm"], [215, 2, 1, "", "numerator"], [215, 2, 1, "", "poly"], [215, 2, 1, "", "to_ANP"], [215, 2, 1, "", "to_alg_num"]], "sympy.polys.numberfields.modules.Submodule": [[215, 3, 1, "", "QQ_matrix"], [215, 2, 1, "", "__init__"], [215, 2, 1, "", "add"], [215, 2, 1, "", "basis_element_pullbacks"], [215, 2, 1, "", "discard_before"], [215, 2, 1, "", "mul"], [215, 2, 1, "", "reduce_element"], [215, 2, 1, "", "reduced"], [215, 2, 1, "", "represent"]], "sympy.polys.numberfields.primes": [[215, 1, 1, "", "PrimeIdeal"], [215, 4, 1, "", "prime_decomp"], [215, 4, 1, "", "prime_valuation"]], "sympy.polys.numberfields.primes.PrimeIdeal": [[215, 2, 1, "", "__add__"], [215, 2, 1, "", "__init__"], [215, 2, 1, "", "__mul__"], [215, 2, 1, "", "as_submodule"], [215, 3, 1, "", "is_inert"], [215, 2, 1, "", "reduce_ANP"], [215, 2, 1, "", "reduce_alg_num"], [215, 2, 1, "", "reduce_element"], [215, 2, 1, "", "repr"], [215, 2, 1, "", "test_factor"], [215, 2, 1, "", "valuation"]], "sympy.polys.numberfields.subfield": [[215, 4, 1, "", "field_isomorphism"], [215, 4, 1, "", "primitive_element"], [215, 4, 1, "", "to_number_field"]], "sympy.polys.numberfields.utilities": [[215, 1, 1, "", "AlgIntPowers"], [215, 4, 1, "", "coeff_search"], [215, 4, 1, "", "extract_fundamental_discriminant"], [215, 4, 1, "", "get_num_denom"], [215, 4, 1, "", "is_int"], [215, 4, 1, "", "is_rat"], [215, 4, 1, "", "isolate"], [215, 4, 1, "", "supplement_a_subspace"]], "sympy.polys.numberfields.utilities.AlgIntPowers": [[215, 2, 1, "", "__init__"]], "sympy.polys.orderings": [[216, 1, 1, "", "GradedLexOrder"], [216, 1, 1, "", "LexOrder"], [216, 1, 1, "", "MonomialOrder"], [216, 1, 1, "", "ReversedGradedLexOrder"]], "sympy.polys.orthopolys": [[216, 4, 1, "", "chebyshevt_poly"], [216, 4, 1, "", "chebyshevu_poly"], [216, 4, 1, "", "gegenbauer_poly"], [216, 4, 1, "", "hermite_poly"], [216, 4, 1, "", "hermite_prob_poly"], [216, 4, 1, "", "jacobi_poly"], [216, 4, 1, "", "laguerre_poly"], [216, 4, 1, "", "legendre_poly"], [216, 4, 1, "", "spherical_bessel_fn"]], "sympy.polys.partfrac": [[216, 4, 1, "", "apart"], [216, 4, 1, "", "apart_list"], [216, 4, 1, "", "assemble_partfrac_list"]], "sympy.polys.polyclasses": [[211, 1, 1, "", "ANP"], [211, 1, 1, "", "DMF"], [211, 1, 1, "", "DMP"]], "sympy.polys.polyclasses.ANP": [[211, 2, 1, "", "LC"], [211, 2, 1, "", "TC"], [211, 3, 1, "", "is_ground"], [211, 3, 1, "", "is_one"], [211, 3, 1, "", "is_zero"], [211, 2, 1, "", "pow"], [211, 2, 1, "", "to_dict"], [211, 2, 1, "", "to_list"], [211, 2, 1, "", "to_sympy_dict"], [211, 2, 1, "", "to_sympy_list"], [211, 2, 1, "", "to_tuple"], [211, 2, 1, "", "unify"]], "sympy.polys.polyclasses.DMF": [[211, 2, 1, "", "add"], [211, 2, 1, "", "cancel"], [211, 2, 1, "", "denom"], [211, 2, 1, "", "exquo"], [211, 2, 1, "", "frac_unify"], [211, 2, 1, "", "half_per"], [211, 2, 1, "", "invert"], [211, 3, 1, "", "is_one"], [211, 3, 1, "", "is_zero"], [211, 2, 1, "", "mul"], [211, 2, 1, "", "neg"], [211, 2, 1, "", "numer"], [211, 2, 1, "", "per"], [211, 2, 1, "", "poly_unify"], [211, 2, 1, "", "pow"], [211, 2, 1, "", "quo"], [211, 2, 1, "", "sub"]], "sympy.polys.polyclasses.DMP": [[211, 2, 1, "", "LC"], [211, 2, 1, "", "TC"], [211, 2, 1, "", "abs"], [211, 2, 1, "", "add"], [211, 2, 1, "", "add_ground"], [211, 2, 1, "", "all_coeffs"], [211, 2, 1, "", "all_monoms"], [211, 2, 1, "", "all_terms"], [211, 2, 1, "", "cancel"], [211, 2, 1, "", "cauchy_lower_bound"], [211, 2, 1, "", "cauchy_upper_bound"], [211, 2, 1, "", "clear_denoms"], [211, 2, 1, "", "coeffs"], [211, 2, 1, "", "cofactors"], [211, 2, 1, "", "compose"], [211, 2, 1, "", "content"], [211, 2, 1, "", "convert"], [211, 2, 1, "", "count_complex_roots"], [211, 2, 1, "", "count_real_roots"], [211, 2, 1, "", "decompose"], [211, 2, 1, "", "deflate"], [211, 2, 1, "", "degree"], [211, 2, 1, "", "degree_list"], [211, 2, 1, "", "diff"], [211, 2, 1, "", "discriminant"], [211, 2, 1, "", "div"], [211, 2, 1, "", "eject"], [211, 2, 1, "", "eval"], [211, 2, 1, "", "exclude"], [211, 2, 1, "", "exquo"], [211, 2, 1, "", "exquo_ground"], [211, 2, 1, "", "factor_list"], [211, 2, 1, "", "factor_list_include"], [211, 2, 1, "", "from_dict"], [211, 2, 1, "", "from_list"], [211, 2, 1, "", "from_sympy_list"], [211, 2, 1, "", "gcd"], [211, 2, 1, "", "gcdex"], [211, 2, 1, "", "gff_list"], [211, 2, 1, "", "half_gcdex"], [211, 2, 1, "", "homogeneous_order"], [211, 2, 1, "", "homogenize"], [211, 2, 1, "", "inject"], [211, 2, 1, "", "integrate"], [211, 2, 1, "", "intervals"], [211, 2, 1, "", "invert"], [211, 3, 1, "", "is_cyclotomic"], [211, 3, 1, "", "is_ground"], [211, 3, 1, "", "is_homogeneous"], [211, 3, 1, "", "is_irreducible"], [211, 3, 1, "", "is_linear"], [211, 3, 1, "", "is_monic"], [211, 3, 1, "", "is_monomial"], [211, 3, 1, "", "is_one"], [211, 3, 1, "", "is_primitive"], [211, 3, 1, "", "is_quadratic"], [211, 3, 1, "", "is_sqf"], [211, 3, 1, "", "is_zero"], [211, 2, 1, "", "l1_norm"], [211, 2, 1, "", "l2_norm_squared"], [211, 2, 1, "", "lcm"], [211, 2, 1, "", "lift"], [211, 2, 1, "", "max_norm"], [211, 2, 1, "", "mignotte_sep_bound_squared"], [211, 2, 1, "", "monic"], [211, 2, 1, "", "monoms"], [211, 2, 1, "", "mul"], [211, 2, 1, "", "mul_ground"], [211, 2, 1, "", "neg"], [211, 2, 1, "", "norm"], [211, 2, 1, "", "nth"], [211, 2, 1, "", "pdiv"], [211, 2, 1, "", "per"], [211, 2, 1, "", "permute"], [211, 2, 1, "", "pexquo"], [211, 2, 1, "", "pow"], [211, 2, 1, "", "pquo"], [211, 2, 1, "", "prem"], [211, 2, 1, "", "primitive"], [211, 2, 1, "", "quo"], [211, 2, 1, "", "quo_ground"], [211, 2, 1, "", "refine_root"], [211, 2, 1, "", "rem"], [211, 2, 1, "", "resultant"], [211, 2, 1, "", "revert"], [211, 2, 1, "", "shift"], [211, 2, 1, "", "slice"], [211, 2, 1, "", "sqf_list"], [211, 2, 1, "", "sqf_list_include"], [211, 2, 1, "", "sqf_norm"], [211, 2, 1, "", "sqf_part"], [211, 2, 1, "", "sqr"], [211, 2, 1, "", "sturm"], [211, 2, 1, "", "sub"], [211, 2, 1, "", "sub_ground"], [211, 2, 1, "", "subresultants"], [211, 2, 1, "", "terms"], [211, 2, 1, "", "terms_gcd"], [211, 2, 1, "", "to_dict"], [211, 2, 1, "", "to_exact"], [211, 2, 1, "", "to_field"], [211, 2, 1, "", "to_list"], [211, 2, 1, "", "to_ring"], [211, 2, 1, "", "to_sympy_dict"], [211, 2, 1, "", "to_sympy_list"], [211, 2, 1, "", "to_tuple"], [211, 2, 1, "", "total_degree"], [211, 2, 1, "", "transform"], [211, 2, 1, "", "trunc"], [211, 2, 1, "", "unify"]], "sympy.polys": [[213, 0, 0, "-", "polyconfig"], [213, 0, 0, "-", "polyoptions"], [218, 0, 0, "-", "solvers"]], "sympy.polys.polyconfig": [[213, 4, 1, "", "setup"]], "sympy.polys.polyerrors": [[213, 1, 1, "", "BasePolynomialError"], [213, 1, 1, "", "CoercionFailed"], [213, 1, 1, "", "ComputationFailed"], [213, 1, 1, "", "DomainError"], [213, 1, 1, "", "EvaluationFailed"], [213, 1, 1, "", "ExactQuotientFailed"], [213, 1, 1, "", "ExtraneousFactors"], [213, 1, 1, "", "FlagError"], [213, 1, 1, "", "GeneratorsError"], [213, 1, 1, "", "GeneratorsNeeded"], [213, 1, 1, "", "HeuristicGCDFailed"], [213, 1, 1, "", "HomomorphismFailed"], [213, 1, 1, "", "IsomorphismFailed"], [213, 1, 1, "", "MultivariatePolynomialError"], [213, 1, 1, "", "NotAlgebraic"], [213, 1, 1, "", "NotInvertible"], [213, 1, 1, "", "NotReversible"], [213, 1, 1, "", "OperationNotSupported"], [213, 1, 1, "", "OptionError"], [213, 1, 1, "", "PolificationFailed"], [213, 1, 1, "", "PolynomialError"], [213, 1, 1, "", "RefinementFailed"], [213, 1, 1, "", "UnificationFailed"], [213, 1, 1, "", "UnivariatePolynomialError"]], "sympy.polys.polyfuncs": [[216, 4, 1, "", "horner"], [216, 4, 1, "", "interpolate"], [216, 4, 1, "", "symmetrize"], [216, 4, 1, "", "viete"]], "sympy.polys.polyoptions": [[213, 1, 1, "", "Options"], [213, 4, 1, "", "build_options"]], "sympy.polys.polyoptions.Options": [[213, 2, 1, "", "clone"]], "sympy.polys.polyroots": [[216, 4, 1, "", "roots"]], "sympy.polys.polytools": [[216, 1, 1, "", "GroebnerBasis"], [216, 4, 1, "", "LC"], [216, 4, 1, "", "LM"], [216, 4, 1, "", "LT"], [216, 1, 1, "", "Poly"], [216, 1, 1, "", "PurePoly"], [216, 4, 1, "", "all_roots"], [216, 4, 1, "", "cancel"], [216, 4, 1, "", "cofactors"], [216, 4, 1, "", "compose"], [216, 4, 1, "", "content"], [216, 4, 1, "", "count_roots"], [216, 4, 1, "", "decompose"], [216, 4, 1, "", "degree"], [216, 4, 1, "", "degree_list"], [216, 4, 1, "", "discriminant"], [216, 4, 1, "", "div"], [216, 4, 1, "", "exquo"], [216, 4, 1, "", "factor"], [216, 4, 1, "", "factor_list"], [216, 4, 1, "", "gcd"], [216, 4, 1, "", "gcd_list"], [216, 4, 1, "", "gcdex"], [216, 4, 1, "", "gff"], [216, 4, 1, "", "gff_list"], [216, 4, 1, "", "groebner"], [216, 4, 1, "", "ground_roots"], [216, 4, 1, "", "half_gcdex"], [216, 4, 1, "", "intervals"], [216, 4, 1, "", "invert"], [216, 4, 1, "", "is_zero_dimensional"], [216, 4, 1, "", "lcm"], [216, 4, 1, "", "lcm_list"], [216, 4, 1, "", "monic"], [216, 4, 1, "", "nroots"], [216, 4, 1, "", "nth_power_roots_poly"], [216, 4, 1, "", "parallel_poly_from_expr"], [216, 4, 1, "", "pdiv"], [216, 4, 1, "", "pexquo"], [216, 4, 1, "", "poly"], [216, 4, 1, "", "poly_from_expr"], [216, 4, 1, "", "pquo"], [216, 4, 1, "", "prem"], [216, 4, 1, "", "primitive"], [216, 4, 1, "", "quo"], [216, 4, 1, "", "real_roots"], [216, 4, 1, "", "reduced"], [216, 4, 1, "", "refine_root"], [216, 4, 1, "", "rem"], [216, 4, 1, "", "resultant"], [216, 4, 1, "", "sqf"], [216, 4, 1, "", "sqf_list"], [216, 4, 1, "", "sqf_norm"], [216, 4, 1, "", "sqf_part"], [216, 4, 1, "", "sturm"], [216, 4, 1, "", "subresultants"], [216, 4, 1, "", "terms_gcd"], [216, 4, 1, "", "trunc"]], "sympy.polys.polytools.GroebnerBasis": [[216, 2, 1, "", "contains"], [216, 2, 1, "", "fglm"], [216, 3, 1, "", "is_zero_dimensional"], [216, 2, 1, "", "reduce"]], "sympy.polys.polytools.Poly": [[216, 2, 1, "", "EC"], [216, 2, 1, "", "EM"], [216, 2, 1, "", "ET"], [216, 2, 1, "", "LC"], [216, 2, 1, "", "LM"], [216, 2, 1, "", "LT"], [216, 2, 1, "", "TC"], [216, 2, 1, "", "abs"], [216, 2, 1, "", "add"], [216, 2, 1, "", "add_ground"], [216, 2, 1, "", "all_coeffs"], [216, 2, 1, "", "all_monoms"], [216, 2, 1, "", "all_roots"], [216, 2, 1, "", "all_terms"], [216, 2, 1, "", "as_dict"], [216, 2, 1, "", "as_expr"], [216, 2, 1, "", "as_list"], [216, 2, 1, "", "as_poly"], [216, 2, 1, "", "cancel"], [216, 2, 1, "", "clear_denoms"], [216, 2, 1, "", "coeff_monomial"], [216, 2, 1, "", "coeffs"], [216, 2, 1, "", "cofactors"], [216, 2, 1, "", "compose"], [216, 2, 1, "", "content"], [216, 2, 1, "", "count_roots"], [216, 2, 1, "", "decompose"], [216, 2, 1, "", "deflate"], [216, 2, 1, "", "degree"], [216, 2, 1, "", "degree_list"], [216, 2, 1, "", "diff"], [216, 2, 1, "", "discriminant"], [216, 2, 1, "", "dispersion"], [216, 2, 1, "", "dispersionset"], [216, 2, 1, "", "div"], [216, 3, 1, "", "domain"], [216, 2, 1, "", "eject"], [216, 2, 1, "", "eval"], [216, 2, 1, "", "exclude"], [216, 2, 1, "", "exquo"], [216, 2, 1, "", "exquo_ground"], [216, 2, 1, "", "factor_list"], [216, 2, 1, "", "factor_list_include"], [216, 3, 1, "", "free_symbols"], [216, 3, 1, "", "free_symbols_in_domain"], [216, 2, 1, "", "from_dict"], [216, 2, 1, "", "from_expr"], [216, 2, 1, "", "from_list"], [216, 2, 1, "", "from_poly"], [216, 2, 1, "", "galois_group"], [216, 2, 1, "", "gcd"], [216, 2, 1, "", "gcdex"], [216, 3, 1, "", "gen"], [216, 2, 1, "", "get_domain"], [216, 2, 1, "", "get_modulus"], [216, 2, 1, "", "gff_list"], [216, 2, 1, "", "ground_roots"], [216, 2, 1, "", "half_gcdex"], [216, 2, 1, "", "has_only_gens"], [216, 2, 1, "", "homogeneous_order"], [216, 2, 1, "", "homogenize"], [216, 2, 1, "", "inject"], [216, 2, 1, "", "integrate"], [216, 2, 1, "", "intervals"], [216, 2, 1, "", "invert"], [216, 3, 1, "", "is_cyclotomic"], [216, 3, 1, "", "is_ground"], [216, 3, 1, "", "is_homogeneous"], [216, 3, 1, "", "is_irreducible"], [216, 3, 1, "", "is_linear"], [216, 3, 1, "", "is_monic"], [216, 3, 1, "", "is_monomial"], [216, 3, 1, "", "is_multivariate"], [216, 3, 1, "", "is_one"], [216, 3, 1, "", "is_primitive"], [216, 3, 1, "", "is_quadratic"], [216, 3, 1, "", "is_sqf"], [216, 3, 1, "", "is_univariate"], [216, 3, 1, "", "is_zero"], [216, 2, 1, "", "l1_norm"], [216, 2, 1, "", "lcm"], [216, 2, 1, "", "length"], [216, 2, 1, "", "lift"], [216, 2, 1, "", "ltrim"], [216, 2, 1, "", "make_monic_over_integers_by_scaling_roots"], [216, 2, 1, "", "match"], [216, 2, 1, "", "max_norm"], [216, 2, 1, "", "monic"], [216, 2, 1, "", "monoms"], [216, 2, 1, "", "mul"], [216, 2, 1, "", "mul_ground"], [216, 2, 1, "", "neg"], [216, 2, 1, "", "new"], [216, 2, 1, "", "norm"], [216, 2, 1, "", "nroots"], [216, 2, 1, "", "nth"], [216, 2, 1, "", "nth_power_roots_poly"], [216, 3, 1, "", "one"], [216, 2, 1, "", "pdiv"], [216, 2, 1, "", "per"], [216, 2, 1, "", "pexquo"], [216, 2, 1, "", "pow"], [216, 2, 1, "", "pquo"], [216, 2, 1, "", "prem"], [216, 2, 1, "", "primitive"], [216, 2, 1, "", "quo"], [216, 2, 1, "", "quo_ground"], [216, 2, 1, "", "rat_clear_denoms"], [216, 2, 1, "", "real_roots"], [216, 2, 1, "", "refine_root"], [216, 2, 1, "", "rem"], [216, 2, 1, "", "reorder"], [216, 2, 1, "", "replace"], [216, 2, 1, "", "resultant"], [216, 2, 1, "", "retract"], [216, 2, 1, "", "revert"], [216, 2, 1, "", "root"], [216, 2, 1, "", "same_root"], [216, 2, 1, "", "set_domain"], [216, 2, 1, "", "set_modulus"], [216, 2, 1, "", "shift"], [216, 2, 1, "", "slice"], [216, 2, 1, "", "sqf_list"], [216, 2, 1, "", "sqf_list_include"], [216, 2, 1, "", "sqf_norm"], [216, 2, 1, "", "sqf_part"], [216, 2, 1, "", "sqr"], [216, 2, 1, "", "sturm"], [216, 2, 1, "", "sub"], [216, 2, 1, "", "sub_ground"], [216, 2, 1, "", "subresultants"], [216, 2, 1, "", "terms"], [216, 2, 1, "", "terms_gcd"], [216, 2, 1, "", "termwise"], [216, 2, 1, "", "to_exact"], [216, 2, 1, "", "to_field"], [216, 2, 1, "", "to_ring"], [216, 2, 1, "", "total_degree"], [216, 2, 1, "", "transform"], [216, 2, 1, "", "trunc"], [216, 2, 1, "", "unify"], [216, 3, 1, "", "unit"], [216, 3, 1, "", "zero"]], "sympy.polys.polytools.PurePoly": [[216, 3, 1, "", "free_symbols"]], "sympy.polys.rationaltools": [[216, 4, 1, "", "together"]], "sympy.polys.ring_series": [[217, 4, 1, "", "_tan1"], [217, 4, 1, "", "mul_xin"], [217, 4, 1, "", "pow_xin"], [217, 4, 1, "", "rs_LambertW"], [217, 4, 1, "", "rs_asin"], [217, 4, 1, "", "rs_atan"], [217, 4, 1, "", "rs_atanh"], [217, 4, 1, "", "rs_compose_add"], [217, 4, 1, "", "rs_cos"], [217, 4, 1, "", "rs_cos_sin"], [217, 4, 1, "", "rs_cosh"], [217, 4, 1, "", "rs_cot"], [217, 4, 1, "", "rs_diff"], [217, 4, 1, "", "rs_exp"], [217, 4, 1, "", "rs_fun"], [217, 4, 1, "", "rs_hadamard_exp"], [217, 4, 1, "", "rs_integrate"], [217, 4, 1, "", "rs_is_puiseux"], [217, 4, 1, "", "rs_log"], [217, 4, 1, "", "rs_mul"], [217, 4, 1, "", "rs_newton"], [217, 4, 1, "", "rs_nth_root"], [217, 4, 1, "", "rs_pow"], [217, 4, 1, "", "rs_puiseux"], [217, 4, 1, "", "rs_puiseux2"], [217, 4, 1, "", "rs_series_from_list"], [217, 4, 1, "", "rs_series_inversion"], [217, 4, 1, "", "rs_series_reversion"], [217, 4, 1, "", "rs_sin"], [217, 4, 1, "", "rs_sinh"], [217, 4, 1, "", "rs_square"], [217, 4, 1, "", "rs_subs"], [217, 4, 1, "", "rs_tan"], [217, 4, 1, "", "rs_tanh"], [217, 4, 1, "", "rs_trunc"]], "sympy.polys.rings": [[211, 1, 1, "", "PolyElement"], [211, 1, 1, "", "PolyRing"], [211, 4, 1, "", "ring"], [211, 4, 1, "", "sring"], [211, 4, 1, "", "vring"], [211, 4, 1, "", "xring"]], "sympy.polys.rings.PolyElement": [[211, 2, 1, "", "almosteq"], [211, 2, 1, "", "cancel"], [211, 2, 1, "", "coeff"], [211, 2, 1, "", "coeff_wrt"], [211, 2, 1, "", "coeffs"], [211, 2, 1, "", "const"], [211, 2, 1, "", "content"], [211, 2, 1, "", "copy"], [211, 2, 1, "", "degree"], [211, 2, 1, "", "degrees"], [211, 2, 1, "", "diff"], [211, 2, 1, "", "div"], [211, 2, 1, "", "imul_num"], [211, 2, 1, "", "itercoeffs"], [211, 2, 1, "", "itermonoms"], [211, 2, 1, "", "iterterms"], [211, 2, 1, "", "leading_expv"], [211, 2, 1, "", "leading_monom"], [211, 2, 1, "", "leading_term"], [211, 2, 1, "", "listcoeffs"], [211, 2, 1, "", "listmonoms"], [211, 2, 1, "", "listterms"], [211, 2, 1, "", "monic"], [211, 2, 1, "", "monoms"], [211, 2, 1, "", "pdiv"], [211, 2, 1, "", "pexquo"], [211, 2, 1, "", "pquo"], [211, 2, 1, "", "prem"], [211, 2, 1, "", "primitive"], [211, 2, 1, "", "square"], [211, 2, 1, "", "strip_zero"], [211, 2, 1, "", "subresultants"], [211, 2, 1, "", "symmetrize"], [211, 2, 1, "", "tail_degree"], [211, 2, 1, "", "tail_degrees"], [211, 2, 1, "", "terms"]], "sympy.polys.rings.PolyRing": [[211, 2, 1, "", "add"], [211, 2, 1, "", "add_gens"], [211, 2, 1, "", "compose"], [211, 2, 1, "", "drop"], [211, 2, 1, "", "drop_to_ground"], [211, 2, 1, "", "index"], [211, 2, 1, "", "monomial_basis"], [211, 2, 1, "", "mul"], [211, 2, 1, "", "symmetric_poly"]], "sympy.polys.rootoftools": [[216, 1, 1, "", "ComplexRootOf"], [216, 1, 1, "", "RootOf"], [216, 1, 1, "", "RootSum"], [216, 4, 1, "", "rootof"]], "sympy.polys.rootoftools.ComplexRootOf": [[216, 2, 1, "", "_all_roots"], [216, 2, 1, "", "_complexes_index"], [216, 2, 1, "", "_complexes_sorted"], [216, 2, 1, "", "_count_roots"], [216, 2, 1, "", "_ensure_complexes_init"], [216, 2, 1, "", "_ensure_reals_init"], [216, 2, 1, "", "_eval_evalf"], [216, 2, 1, "", "_eval_is_imaginary"], [216, 2, 1, "", "_eval_is_real"], [216, 2, 1, "", "_get_complexes"], [216, 2, 1, "", "_get_complexes_sqf"], [216, 2, 1, "", "_get_interval"], [216, 2, 1, "", "_get_reals"], [216, 2, 1, "", "_get_reals_sqf"], [216, 2, 1, "", "_get_roots"], [216, 2, 1, "", "_indexed_root"], [216, 2, 1, "", "_new"], [216, 2, 1, "", "_postprocess_root"], [216, 2, 1, "", "_preprocess_roots"], [216, 2, 1, "", "_real_roots"], [216, 2, 1, "", "_reals_index"], [216, 2, 1, "", "_reals_sorted"], [216, 2, 1, "", "_refine_complexes"], [216, 2, 1, "", "_reset"], [216, 2, 1, "", "_roots_trivial"], [216, 2, 1, "", "_set_interval"], [216, 2, 1, "", "all_roots"], [216, 2, 1, "", "clear_cache"], [216, 2, 1, "", "eval_approx"], [216, 2, 1, "", "eval_rational"], [216, 2, 1, "", "real_roots"]], "sympy.polys.rootoftools.RootSum": [[216, 2, 1, "", "new"]], "sympy.polys.solvers": [[218, 4, 1, "", "_solve_lin_sys"], [218, 4, 1, "", "_solve_lin_sys_component"], [218, 4, 1, "", "eqs_to_matrix"], [218, 4, 1, "", "solve_lin_sys"], [218, 4, 1, "", "sympy_eqs_to_ring"]], "sympy.polys.specialpolys": [[216, 4, 1, "", "cyclotomic_poly"], [216, 4, 1, "", "interpolating_poly"], [216, 4, 1, "", "random_poly"], [216, 4, 1, "", "swinnerton_dyer_poly"], [216, 4, 1, "", "symmetric_poly"]], "sympy.printing": [[220, 0, 0, "-", "aesaracode"], [220, 0, 0, "-", "c"], [220, 0, 0, "-", "codeprinter"], [220, 0, 0, "-", "conventions"], [220, 0, 0, "-", "cxx"], [220, 0, 0, "-", "fortran"], [220, 0, 0, "-", "gtk"], [220, 0, 0, "-", "jscode"], [220, 0, 0, "-", "julia"], [220, 0, 0, "-", "lambdarepr"], [220, 0, 0, "-", "latex"], [220, 0, 0, "-", "maple"], [220, 0, 0, "-", "mathematica"], [220, 0, 0, "-", "mathml"], [220, 0, 0, "-", "octave"], [220, 0, 0, "-", "precedence"], [220, 0, 0, "-", "pretty"], [220, 0, 0, "-", "preview"], [220, 0, 0, "-", "printer"], [220, 0, 0, "-", "pycode"], [220, 0, 0, "-", "python"], [220, 0, 0, "-", "rcode"], [220, 0, 0, "-", "repr"], [220, 0, 0, "-", "rust"], [220, 0, 0, "-", "smtlib"], [220, 0, 0, "-", "str"], [220, 0, 0, "-", "tree"]], "sympy.printing.aesaracode": [[220, 1, 1, "", "AesaraPrinter"], [220, 4, 1, "", "aesara_code"], [220, 4, 1, "", "aesara_function"], [220, 4, 1, "", "dim_handling"]], "sympy.printing.aesaracode.AesaraPrinter": [[220, 2, 1, "", "doprint"], [220, 5, 1, "", "printmethod"]], "sympy.printing.c": [[220, 1, 1, "", "C89CodePrinter"], [220, 1, 1, "", "C99CodePrinter"], [220, 4, 1, "", "ccode"], [220, 6, 1, "", "known_functions_C89"], [220, 6, 1, "", "known_functions_C99"], [220, 4, 1, "", "print_ccode"]], "sympy.printing.c.C89CodePrinter": [[220, 2, 1, "", "indent_code"], [220, 5, 1, "", "printmethod"]], "sympy.printing.c.C99CodePrinter": [[220, 5, 1, "", "printmethod"]], "sympy.printing.codeprinter": [[220, 7, 1, "", "AssignmentError"], [220, 1, 1, "", "CodePrinter"], [220, 4, 1, "", "cxxcode"]], "sympy.printing.codeprinter.CodePrinter": [[220, 2, 1, "", "doprint"], [220, 5, 1, "", "printmethod"]], "sympy.printing.conventions": [[220, 4, 1, "", "split_super_sub"]], "sympy.printing.cxx": [[220, 1, 1, "", "CXX11CodePrinter"], [220, 1, 1, "", "CXX98CodePrinter"]], "sympy.printing.cxx.CXX11CodePrinter": [[220, 5, 1, "", "printmethod"]], "sympy.printing.cxx.CXX98CodePrinter": [[220, 5, 1, "", "printmethod"]], "sympy.printing.dot": [[220, 4, 1, "", "dotprint"]], "sympy.printing.fortran": [[220, 1, 1, "", "FCodePrinter"], [220, 4, 1, "", "fcode"], [220, 4, 1, "", "print_fcode"]], "sympy.printing.fortran.FCodePrinter": [[220, 2, 1, "", "indent_code"], [220, 5, 1, "", "printmethod"]], "sympy.printing.gtk": [[220, 4, 1, "", "print_gtk"]], "sympy.printing.jscode": [[220, 1, 1, "", "JavascriptCodePrinter"], [220, 4, 1, "", "jscode"], [220, 6, 1, "", "known_functions"]], "sympy.printing.jscode.JavascriptCodePrinter": [[220, 2, 1, "", "indent_code"], [220, 5, 1, "", "printmethod"]], "sympy.printing.julia": [[220, 1, 1, "", "JuliaCodePrinter"], [220, 4, 1, "", "julia_code"], [220, 6, 1, "", "known_fcns_src1"], [220, 6, 1, "", "known_fcns_src2"]], "sympy.printing.julia.JuliaCodePrinter": [[220, 2, 1, "", "indent_code"], [220, 5, 1, "", "printmethod"]], "sympy.printing.lambdarepr": [[220, 1, 1, "", "LambdaPrinter"], [220, 4, 1, "", "lambdarepr"]], "sympy.printing.lambdarepr.LambdaPrinter": [[220, 5, 1, "", "printmethod"]], "sympy.printing.latex": [[220, 1, 1, "", "LatexPrinter"], [220, 6, 1, "", "accepted_latex_functions"], [220, 4, 1, "", "latex"], [220, 4, 1, "", "print_latex"]], "sympy.printing.latex.LatexPrinter": [[220, 2, 1, "", "parenthesize_super"], [220, 5, 1, "", "printmethod"]], "sympy.printing.maple": [[220, 1, 1, "", "MapleCodePrinter"], [220, 4, 1, "", "maple_code"], [220, 4, 1, "", "print_maple_code"]], "sympy.printing.maple.MapleCodePrinter": [[220, 5, 1, "", "printmethod"]], "sympy.printing.mathematica": [[220, 1, 1, "", "MCodePrinter"], [220, 6, 1, "", "known_functions"], [220, 4, 1, "", "mathematica_code"]], "sympy.printing.mathematica.MCodePrinter": [[220, 5, 1, "", "printmethod"]], "sympy.printing.mathml": [[220, 1, 1, "", "MathMLContentPrinter"], [220, 1, 1, "", "MathMLPresentationPrinter"], [220, 1, 1, "", "MathMLPrinterBase"], [220, 4, 1, "", "mathml"], [220, 4, 1, "", "print_mathml"]], "sympy.printing.mathml.MathMLContentPrinter": [[220, 2, 1, "", "mathml_tag"], [220, 5, 1, "", "printmethod"]], "sympy.printing.mathml.MathMLPresentationPrinter": [[220, 2, 1, "", "mathml_tag"], [220, 5, 1, "", "printmethod"]], "sympy.printing.mathml.MathMLPrinterBase": [[220, 2, 1, "", "doprint"]], "sympy.printing.octave": [[220, 1, 1, "", "OctaveCodePrinter"], [220, 6, 1, "", "known_fcns_src1"], [220, 6, 1, "", "known_fcns_src2"], [220, 4, 1, "", "octave_code"]], "sympy.printing.octave.OctaveCodePrinter": [[220, 2, 1, "", "indent_code"], [220, 5, 1, "", "printmethod"]], "sympy.printing.precedence": [[220, 6, 1, "", "PRECEDENCE"], [220, 6, 1, "", "PRECEDENCE_FUNCTIONS"], [220, 6, 1, "", "PRECEDENCE_VALUES"], [220, 4, 1, "", "precedence"]], "sympy.printing.pretty": [[220, 0, 0, "-", "pretty"], [220, 0, 0, "-", "pretty_symbology"], [220, 0, 0, "-", "stringpict"]], "sympy.printing.pretty.pretty": [[220, 1, 1, "", "PrettyPrinter"], [220, 4, 1, "", "pretty"], [220, 4, 1, "", "pretty_print"]], "sympy.printing.pretty.pretty.PrettyPrinter": [[220, 5, 1, "", "printmethod"]], "sympy.printing.pretty.pretty_symbology": [[220, 4, 1, "", "G"], [220, 4, 1, "", "U"], [220, 4, 1, "", "VF"], [220, 4, 1, "", "annotated"], [220, 6, 1, "", "atoms_table"], [220, 6, 1, "", "digit_2txt"], [220, 6, 1, "", "frac"], [220, 4, 1, "", "g"], [220, 6, 1, "", "greek_letters"], [220, 4, 1, "", "hobj"], [220, 4, 1, "", "pretty_atom"], [220, 4, 1, "", "pretty_symbol"], [220, 4, 1, "", "pretty_try_use_unicode"], [220, 4, 1, "", "pretty_use_unicode"], [220, 6, 1, "", "root"], [220, 6, 1, "", "sub"], [220, 6, 1, "", "sup"], [220, 6, 1, "", "symb_2txt"], [220, 4, 1, "", "vobj"], [220, 4, 1, "", "xobj"], [220, 4, 1, "", "xstr"], [220, 4, 1, "", "xsym"]], "sympy.printing.pretty.stringpict": [[220, 1, 1, "", "prettyForm"], [220, 1, 1, "", "stringPict"]], "sympy.printing.pretty.stringpict.prettyForm": [[220, 2, 1, "", "apply"]], "sympy.printing.pretty.stringpict.stringPict": [[220, 2, 1, "", "above"], [220, 2, 1, "", "below"], [220, 2, 1, "", "height"], [220, 2, 1, "", "left"], [220, 2, 1, "", "leftslash"], [220, 2, 1, "", "next"], [220, 2, 1, "", "parens"], [220, 2, 1, "", "render"], [220, 2, 1, "", "right"], [220, 2, 1, "", "root"], [220, 2, 1, "", "stack"], [220, 2, 1, "", "terminal_width"], [220, 2, 1, "", "width"]], "sympy.printing.preview": [[220, 4, 1, "", "preview"]], "sympy.printing.printer": [[220, 1, 1, "", "Printer"]], "sympy.printing.printer.Printer": [[220, 2, 1, "", "_print"], [220, 2, 1, "", "doprint"], [220, 5, 1, "", "printmethod"], [220, 2, 1, "", "set_global_settings"]], "sympy.printing.pycode": [[220, 1, 1, "", "MpmathPrinter"], [220, 4, 1, "", "pycode"]], "sympy.printing.rcode": [[220, 1, 1, "", "RCodePrinter"], [220, 6, 1, "", "known_functions"], [220, 4, 1, "", "print_rcode"], [220, 4, 1, "", "rcode"]], "sympy.printing.rcode.RCodePrinter": [[220, 2, 1, "", "indent_code"], [220, 5, 1, "", "printmethod"]], "sympy.printing.repr": [[220, 1, 1, "", "ReprPrinter"], [220, 4, 1, "", "srepr"]], "sympy.printing.repr.ReprPrinter": [[220, 2, 1, "", "emptyPrinter"], [220, 5, 1, "", "printmethod"], [220, 2, 1, "", "reprify"]], "sympy.printing.rust": [[220, 1, 1, "", "RustCodePrinter"], [220, 6, 1, "", "known_functions"], [220, 4, 1, "", "rust_code"]], "sympy.printing.rust.RustCodePrinter": [[220, 2, 1, "", "indent_code"], [220, 5, 1, "", "printmethod"]], "sympy.printing.smtlib": [[220, 1, 1, "", "SMTLibPrinter"], [220, 4, 1, "", "smtlib_code"]], "sympy.printing.smtlib.SMTLibPrinter": [[220, 5, 1, "", "_default_settings"], [220, 5, 1, "", "printmethod"]], "sympy.printing.str": [[220, 1, 1, "", "StrPrinter"], [220, 4, 1, "", "sstr"], [220, 4, 1, "", "sstrrepr"]], "sympy.printing.str.StrPrinter": [[220, 5, 1, "", "printmethod"]], "sympy.printing.tree": [[220, 4, 1, "", "pprint_nodes"], [220, 4, 1, "", "print_node"], [220, 4, 1, "", "print_tree"], [220, 4, 1, "", "tree"]], "sympy.series.acceleration": [[227, 4, 1, "", "richardson"], [227, 4, 1, "", "shanks"]], "sympy.series.formal": [[222, 1, 1, "", "FiniteFormalPowerSeries"], [222, 1, 1, "", "FormalPowerSeries"], [222, 1, 1, "", "FormalPowerSeriesCompose"], [222, 1, 1, "", "FormalPowerSeriesInverse"], [222, 1, 1, "", "FormalPowerSeriesProduct"], [222, 4, 1, "", "compute_fps"], [222, 4, 1, "", "exp_re"], [222, 4, 1, "", "fps"], [222, 4, 1, "", "hyper_algorithm"], [222, 4, 1, "", "hyper_re"], [222, 4, 1, "", "rational_algorithm"], [222, 4, 1, "", "rational_independent"], [222, 4, 1, "", "rsolve_hypergeometric"], [222, 4, 1, "", "simpleDE"], [222, 4, 1, "", "solve_de"]], "sympy.series.formal.FormalPowerSeries": [[222, 2, 1, "", "coeff_bell"], [222, 2, 1, "", "compose"], [222, 3, 1, "", "infinite"], [222, 2, 1, "", "integrate"], [222, 2, 1, "", "inverse"], [222, 2, 1, "", "polynomial"], [222, 2, 1, "", "product"], [222, 2, 1, "", "truncate"]], "sympy.series.formal.FormalPowerSeriesCompose": [[222, 3, 1, "", "function"]], "sympy.series.formal.FormalPowerSeriesInverse": [[222, 3, 1, "", "function"]], "sympy.series.formal.FormalPowerSeriesProduct": [[222, 3, 1, "", "function"]], "sympy.series.fourier": [[223, 1, 1, "", "FourierSeries"], [223, 4, 1, "", "fourier_series"]], "sympy.series.fourier.FourierSeries": [[223, 2, 1, "", "scale"], [223, 2, 1, "", "scalex"], [223, 2, 1, "", "shift"], [223, 2, 1, "", "shiftx"], [223, 2, 1, "", "sigma_approximation"], [223, 2, 1, "", "truncate"]], "sympy.series.gruntz": [[227, 1, 1, "", "SubsSet"], [227, 4, 1, "", "build_expression_tree"], [227, 4, 1, "", "calculate_series"], [227, 4, 1, "", "compare"], [227, 4, 1, "", "gruntz"], [227, 4, 1, "", "limitinf"], [227, 4, 1, "", "mrv"], [227, 4, 1, "", "mrv_leadterm"], [227, 4, 1, "", "mrv_max1"], [227, 4, 1, "", "mrv_max3"], [227, 4, 1, "", "rewrite"], [227, 4, 1, "", "sign"]], "sympy.series.gruntz.SubsSet": [[227, 2, 1, "", "copy"], [227, 2, 1, "", "do_subs"], [227, 2, 1, "", "meets"], [227, 2, 1, "", "union"]], "sympy.series.limits": [[227, 1, 1, "", "Limit"], [227, 4, 1, "", "limit"]], "sympy.series.limits.Limit": [[227, 2, 1, "", "doit"]], "sympy.series.limitseq": [[225, 4, 1, "", "difference_delta"], [225, 4, 1, "", "dominant"], [225, 4, 1, "", "limit_seq"]], "sympy.series.order": [[227, 1, 1, "", "Order"]], "sympy.series.order.Order": [[227, 2, 1, "", "contains"]], "sympy.series.residues": [[227, 4, 1, "", "residue"]], "sympy.series.sequences": [[226, 1, 1, "", "EmptySequence"], [226, 1, 1, "", "RecursiveSeq"], [226, 1, 1, "", "SeqAdd"], [226, 1, 1, "", "SeqBase"], [226, 1, 1, "", "SeqFormula"], [226, 1, 1, "", "SeqMul"], [226, 1, 1, "", "SeqPer"], [226, 4, 1, "", "sequence"]], "sympy.series.sequences.EmptySequence": [[226, 2, 1, "", "coeff_mul"]], "sympy.series.sequences.RecursiveSeq": [[226, 3, 1, "", "initial"], [226, 3, 1, "", "interval"], [226, 3, 1, "", "n"], [226, 3, 1, "", "recurrence"], [226, 3, 1, "", "start"], [226, 3, 1, "", "stop"], [226, 3, 1, "", "y"], [226, 3, 1, "", "yn"]], "sympy.series.sequences.SeqAdd": [[226, 2, 1, "", "reduce"]], "sympy.series.sequences.SeqBase": [[226, 2, 1, "", "coeff"], [226, 2, 1, "", "coeff_mul"], [226, 2, 1, "", "find_linear_recurrence"], [226, 3, 1, "", "free_symbols"], [226, 3, 1, "", "gen"], [226, 3, 1, "", "interval"], [226, 3, 1, "", "length"], [226, 3, 1, "", "start"], [226, 3, 1, "", "stop"], [226, 3, 1, "", "variables"]], "sympy.series.sequences.SeqFormula": [[226, 2, 1, "", "coeff_mul"]], "sympy.series.sequences.SeqMul": [[226, 2, 1, "", "reduce"]], "sympy.series.sequences.SeqPer": [[226, 2, 1, "", "coeff_mul"]], "sympy.series.series": [[227, 4, 1, "", "series"]], "sympy.sets": [[228, 0, 0, "-", "conditionset"], [228, 0, 0, "-", "fancysets"], [228, 0, 0, "-", "powerset"], [228, 0, 0, "-", "sets"]], "sympy.sets.conditionset": [[228, 1, 1, "", "ConditionSet"], [228, 1, 1, "", "Contains"], [228, 1, 1, "", "SetKind"]], "sympy.sets.fancysets": [[228, 1, 1, "", "CartesianComplexRegion"], [228, 1, 1, "", "ComplexRegion"], [228, 1, 1, "", "Complexes"], [228, 1, 1, "", "ImageSet"], [228, 1, 1, "", "Integers"], [228, 1, 1, "", "Naturals"], [228, 1, 1, "", "Naturals0"], [228, 1, 1, "", "PolarComplexRegion"], [228, 1, 1, "", "Range"], [228, 1, 1, "", "Rationals"], [228, 1, 1, "", "Reals"], [228, 4, 1, "", "normalize_theta_set"]], "sympy.sets.fancysets.ComplexRegion": [[228, 3, 1, "", "a_interval"], [228, 3, 1, "", "b_interval"], [228, 2, 1, "", "from_real"], [228, 3, 1, "", "psets"], [228, 3, 1, "", "sets"]], "sympy.sets.fancysets.Range": [[228, 2, 1, "", "as_relational"], [228, 3, 1, "", "reversed"]], "sympy.sets.powerset": [[228, 1, 1, "", "PowerSet"]], "sympy.sets.sets": [[228, 1, 1, "", "Complement"], [228, 1, 1, "", "DisjointUnion"], [228, 1, 1, "", "EmptySet"], [228, 1, 1, "", "FiniteSet"], [228, 1, 1, "", "Intersection"], [228, 1, 1, "", "Interval"], [228, 1, 1, "", "ProductSet"], [228, 1, 1, "", "Set"], [228, 1, 1, "", "SymmetricDifference"], [228, 1, 1, "", "Union"], [228, 1, 1, "", "UniversalSet"], [228, 4, 1, "", "imageset"]], "sympy.sets.sets.Complement": [[228, 2, 1, "", "as_relational"], [228, 2, 1, "", "reduce"]], "sympy.sets.sets.FiniteSet": [[228, 2, 1, "", "as_relational"]], "sympy.sets.sets.Intersection": [[228, 2, 1, "", "as_relational"]], "sympy.sets.sets.Interval": [[228, 2, 1, "", "Lopen"], [228, 2, 1, "", "Ropen"], [228, 2, 1, "", "as_relational"], [228, 3, 1, "", "end"], [228, 3, 1, "", "is_left_unbounded"], [228, 3, 1, "", "is_right_unbounded"], [228, 3, 1, "", "left_open"], [228, 2, 1, "", "open"], [228, 3, 1, "", "right_open"], [228, 3, 1, "", "start"]], "sympy.sets.sets.ProductSet": [[228, 3, 1, "", "is_iterable"]], "sympy.sets.sets.Set": [[228, 3, 1, "", "boundary"], [228, 3, 1, "", "closure"], [228, 2, 1, "", "complement"], [228, 2, 1, "", "contains"], [228, 3, 1, "", "inf"], [228, 3, 1, "", "interior"], [228, 2, 1, "", "intersect"], [228, 2, 1, "", "intersection"], [228, 3, 1, "", "is_closed"], [228, 2, 1, "", "is_disjoint"], [228, 3, 1, "", "is_open"], [228, 2, 1, "", "is_proper_subset"], [228, 2, 1, "", "is_proper_superset"], [228, 2, 1, "", "is_subset"], [228, 2, 1, "", "is_superset"], [228, 2, 1, "", "isdisjoint"], [228, 2, 1, "", "issubset"], [228, 2, 1, "", "issuperset"], [228, 3, 1, "", "kind"], [228, 3, 1, "", "measure"], [228, 2, 1, "", "powerset"], [228, 3, 1, "", "sup"], [228, 2, 1, "", "symmetric_difference"], [228, 2, 1, "", "union"]], "sympy.sets.sets.SymmetricDifference": [[228, 2, 1, "", "as_relational"]], "sympy.sets.sets.Union": [[228, 2, 1, "", "as_relational"]], "sympy.simplify": [[232, 0, 0, "-", "combsimp"], [232, 0, 0, "-", "cse_main"], [232, 0, 0, "-", "epathtools"], [232, 0, 0, "-", "hyperexpand"], [230, 0, 0, "-", "hyperexpand_doc"], [232, 0, 0, "-", "powsimp"], [232, 0, 0, "-", "radsimp"], [232, 0, 0, "-", "ratsimp"], [15, 0, 0, "-", "simplify"], [232, 0, 0, "-", "sqrtdenest"], [232, 0, 0, "-", "trigsimp"]], "sympy.simplify.combsimp": [[232, 4, 1, "", "combsimp"]], "sympy.simplify.cse_main": [[232, 4, 1, "", "cse"], [232, 4, 1, "", "opt_cse"], [232, 4, 1, "", "tree_cse"]], "sympy.simplify.epathtools": [[232, 1, 1, "", "EPath"], [232, 4, 1, "", "epath"]], "sympy.simplify.epathtools.EPath": [[232, 2, 1, "", "apply"], [232, 2, 1, "", "select"]], "sympy.simplify.fu": [[229, 4, 1, "", "TR0"], [229, 4, 1, "", "TR1"], [229, 4, 1, "", "TR10"], [229, 4, 1, "", "TR10i"], [229, 4, 1, "", "TR11"], [229, 4, 1, "", "TR111"], [229, 4, 1, "", "TR12"], [229, 4, 1, "", "TR12i"], [229, 4, 1, "", "TR13"], [229, 4, 1, "", "TR14"], [229, 4, 1, "", "TR15"], [229, 4, 1, "", "TR16"], [229, 4, 1, "", "TR2"], [229, 4, 1, "", "TR22"], [229, 4, 1, "", "TR2i"], [229, 4, 1, "", "TR3"], [229, 4, 1, "", "TR4"], [229, 4, 1, "", "TR5"], [229, 4, 1, "", "TR6"], [229, 4, 1, "", "TR7"], [229, 4, 1, "", "TR8"], [229, 4, 1, "", "TR9"], [229, 4, 1, "", "TRmorrie"], [229, 4, 1, "", "TRpower"], [229, 4, 1, "", "fu"]], "sympy.simplify.hyperexpand": [[232, 4, 1, "", "hyperexpand"]], "sympy.simplify.powsimp": [[232, 4, 1, "", "powdenest"], [232, 4, 1, "", "powsimp"]], "sympy.simplify.radsimp": [[232, 4, 1, "", "collect"], [232, 4, 1, "", "collect_const"], [232, 4, 1, "", "collect_sqrt"], [232, 4, 1, "", "fraction"], [232, 4, 1, "", "rad_rationalize"], [232, 4, 1, "", "radsimp"], [232, 4, 1, "", "rcollect"]], "sympy.simplify.ratsimp": [[232, 4, 1, "", "ratsimp"], [232, 4, 1, "", "ratsimpmodprime"]], "sympy.simplify.simplify": [[232, 4, 1, "", "besselsimp"], [232, 4, 1, "", "hypersimilar"], [232, 4, 1, "", "hypersimp"], [232, 4, 1, "", "kroneckersimp"], [232, 4, 1, "", "logcombine"], [232, 4, 1, "", "nsimplify"], [232, 4, 1, "", "nthroot"], [232, 4, 1, "", "posify"], [232, 4, 1, "", "separatevars"], [232, 4, 1, "", "simplify"]], "sympy.simplify.sqrtdenest": [[232, 4, 1, "", "sqrtdenest"]], "sympy.simplify.trigsimp": [[232, 4, 1, "", "trigsimp"]], "sympy.solvers.deutils": [[238, 4, 1, "", "ode_order"]], "sympy.solvers.diophantine.diophantine": [[233, 1, 1, "", "BinaryQuadratic"], [233, 1, 1, "", "CubicThue"], [233, 1, 1, "", "DiophantineEquationType"], [233, 1, 1, "", "DiophantineSolutionSet"], [233, 1, 1, "", "GeneralPythagorean"], [233, 1, 1, "", "GeneralSumOfEvenPowers"], [233, 1, 1, "", "GeneralSumOfSquares"], [233, 1, 1, "", "HomogeneousGeneralQuadratic"], [233, 1, 1, "", "HomogeneousTernaryQuadratic"], [233, 1, 1, "", "HomogeneousTernaryQuadraticNormal"], [233, 1, 1, "", "InhomogeneousGeneralQuadratic"], [233, 1, 1, "", "InhomogeneousTernaryQuadratic"], [233, 1, 1, "", "Linear"], [233, 4, 1, "", "PQa"], [233, 1, 1, "", "Univariate"], [233, 4, 1, "", "base_solution_linear"], [233, 4, 1, "", "classify_diop"], [233, 4, 1, "", "cornacchia"], [233, 4, 1, "", "descent"], [233, 4, 1, "", "diop_DN"], [233, 4, 1, "", "diop_bf_DN"], [233, 4, 1, "", "diop_general_pythagorean"], [233, 4, 1, "", "diop_general_sum_of_even_powers"], [233, 4, 1, "", "diop_general_sum_of_squares"], [233, 4, 1, "", "diop_linear"], [233, 4, 1, "", "diop_quadratic"], [233, 4, 1, "", "diop_solve"], [233, 4, 1, "", "diop_ternary_quadratic"], [233, 4, 1, "", "diop_ternary_quadratic_normal"], [233, 4, 1, "", "diophantine"], [233, 4, 1, "", "divisible"], [233, 4, 1, "", "equivalent"], [233, 4, 1, "", "find_DN"], [233, 4, 1, "", "gaussian_reduce"], [233, 4, 1, "", "holzer"], [233, 4, 1, "", "ldescent"], [233, 4, 1, "", "merge_solution"], [233, 4, 1, "", "parametrize_ternary_quadratic"], [233, 4, 1, "", "partition"], [233, 4, 1, "", "power_representation"], [233, 4, 1, "", "prime_as_sum_of_two_squares"], [233, 4, 1, "", "reconstruct"], [233, 4, 1, "", "sqf_normal"], [233, 4, 1, "", "square_factor"], [233, 4, 1, "", "sum_of_four_squares"], [233, 4, 1, "", "sum_of_powers"], [233, 4, 1, "", "sum_of_squares"], [233, 4, 1, "", "sum_of_three_squares"], [233, 4, 1, "", "transformation_to_DN"], [233, 4, 1, "", "transformation_to_normal"]], "sympy.solvers.diophantine.diophantine.DiophantineEquationType": [[233, 2, 1, "", "matches"]], "sympy.solvers": [[235, 0, 0, "-", "inequalities"], [236, 0, 0, "-", "ode"], [237, 0, 0, "-", "pde"], [238, 0, 0, "-", "recurr"], [239, 0, 0, "-", "solveset"]], "sympy.solvers.inequalities": [[235, 4, 1, "", "reduce_abs_inequalities"], [235, 4, 1, "", "reduce_abs_inequality"], [235, 4, 1, "", "reduce_inequalities"], [235, 4, 1, "", "reduce_rational_inequalities"], [235, 4, 1, "", "solve_poly_inequalities"], [235, 4, 1, "", "solve_poly_inequality"], [235, 4, 1, "", "solve_rational_inequalities"], [235, 4, 1, "", "solve_univariate_inequality"]], "sympy.solvers.ode": [[236, 6, 1, "", "allhints"], [236, 4, 1, "", "checkinfsol"], [236, 4, 1, "", "checkodesol"], [236, 4, 1, "", "classify_ode"], [236, 4, 1, "", "constantsimp"], [236, 4, 1, "", "dsolve"], [236, 4, 1, "", "homogeneous_order"], [236, 4, 1, "", "infinitesimals"], [236, 0, 0, "-", "ode"]], "sympy.solvers.ode.lie_group": [[236, 4, 1, "", "lie_heuristic_abaco1_product"], [236, 4, 1, "", "lie_heuristic_abaco1_simple"], [236, 4, 1, "", "lie_heuristic_abaco2_similar"], [236, 4, 1, "", "lie_heuristic_abaco2_unique_general"], [236, 4, 1, "", "lie_heuristic_abaco2_unique_unknown"], [236, 4, 1, "", "lie_heuristic_bivariate"], [236, 4, 1, "", "lie_heuristic_chi"], [236, 4, 1, "", "lie_heuristic_function_sum"], [236, 4, 1, "", "lie_heuristic_linear"]], "sympy.solvers.ode.ode": [[236, 4, 1, "", "_handle_Integral"], [236, 4, 1, "", "_linear_2eq_order1_type6"], [236, 4, 1, "", "_linear_2eq_order1_type7"], [236, 4, 1, "", "_nonlinear_2eq_order1_type1"], [236, 4, 1, "", "_nonlinear_2eq_order1_type2"], [236, 4, 1, "", "_nonlinear_2eq_order1_type3"], [236, 4, 1, "", "_nonlinear_2eq_order1_type4"], [236, 4, 1, "", "_nonlinear_2eq_order1_type5"], [236, 4, 1, "", "_nonlinear_3eq_order1_type1"], [236, 4, 1, "", "_nonlinear_3eq_order1_type2"], [236, 4, 1, "", "_nonlinear_3eq_order1_type3"], [236, 4, 1, "", "_nonlinear_3eq_order1_type4"], [236, 4, 1, "", "_nonlinear_3eq_order1_type5"], [236, 4, 1, "", "constant_renumber"], [236, 4, 1, "", "ode_1st_power_series"], [236, 4, 1, "", "ode_2nd_power_series_ordinary"], [236, 4, 1, "", "ode_2nd_power_series_regular"], [236, 4, 1, "", "ode_sol_simplicity"], [236, 4, 1, "", "odesimp"]], "sympy.solvers.ode.riccati": [[236, 4, 1, "", "compute_m_ybar"], [236, 4, 1, "", "construct_c"], [236, 4, 1, "", "construct_d"], [236, 4, 1, "", "get_gen_sol_from_part_sol"], [236, 4, 1, "", "rational_laurent_series"], [236, 4, 1, "", "remove_redundant_sols"], [236, 4, 1, "", "riccati_inverse_normal"], [236, 4, 1, "", "riccati_normal"], [236, 4, 1, "", "riccati_reduced"], [236, 4, 1, "", "solve_aux_eq"], [236, 4, 1, "", "solve_riccati"]], "sympy.solvers.ode.single": [[236, 1, 1, "", "AlmostLinear"], [236, 1, 1, "", "Bernoulli"], [236, 1, 1, "", "Factorable"], [236, 1, 1, "", "FirstExact"], [236, 1, 1, "", "FirstLinear"], [236, 1, 1, "", "HomogeneousCoeffBest"], [236, 1, 1, "", "HomogeneousCoeffSubsDepDivIndep"], [236, 1, 1, "", "HomogeneousCoeffSubsIndepDivDep"], [236, 1, 1, "", "LieGroup"], [236, 1, 1, "", "LinearCoefficients"], [236, 1, 1, "", "Liouville"], [236, 1, 1, "", "NthAlgebraic"], [236, 1, 1, "", "NthLinearConstantCoeffHomogeneous"], [236, 1, 1, "", "NthLinearConstantCoeffUndeterminedCoefficients"], [236, 1, 1, "", "NthLinearConstantCoeffVariationOfParameters"], [236, 1, 1, "", "NthLinearEulerEqHomogeneous"], [236, 1, 1, "", "NthLinearEulerEqNonhomogeneousUndeterminedCoefficients"], [236, 1, 1, "", "NthLinearEulerEqNonhomogeneousVariationOfParameters"], [236, 1, 1, "", "NthOrderReducible"], [236, 1, 1, "", "RationalRiccati"], [236, 1, 1, "", "RiccatiSpecial"], [236, 1, 1, "", "SecondHypergeometric"], [236, 1, 1, "", "SecondLinearAiry"], [236, 1, 1, "", "SecondLinearBessel"], [236, 1, 1, "", "Separable"], [236, 1, 1, "", "SeparableReduced"]], "sympy.solvers.ode.systems": [[236, 4, 1, "", "canonical_odes"], [236, 4, 1, "", "dsolve_system"], [236, 4, 1, "", "linear_ode_to_matrix"], [236, 4, 1, "", "linodesolve"], [236, 4, 1, "", "linodesolve_type"], [236, 4, 1, "", "matrix_exp"], [236, 4, 1, "", "matrix_exp_jordan_form"]], "sympy.solvers.pde": [[237, 4, 1, "", "checkpdesol"], [237, 4, 1, "", "classify_pde"], [237, 4, 1, "", "pde_1st_linear_constant_coeff"], [237, 4, 1, "", "pde_1st_linear_constant_coeff_homogeneous"], [237, 4, 1, "", "pde_1st_linear_variable_coeff"], [237, 4, 1, "", "pde_separate"], [237, 4, 1, "", "pde_separate_add"], [237, 4, 1, "", "pde_separate_mul"], [237, 4, 1, "", "pdsolve"]], "sympy.solvers.polysys": [[238, 4, 1, "", "solve_poly_system"], [238, 4, 1, "", "solve_triangulated"]], "sympy.solvers.recurr": [[238, 4, 1, "", "rsolve"], [238, 4, 1, "", "rsolve_hyper"], [238, 4, 1, "", "rsolve_poly"], [238, 4, 1, "", "rsolve_ratio"]], "sympy.solvers.solvers": [[238, 4, 1, "", "checksol"], [238, 4, 1, "", "nsolve"], [238, 4, 1, "", "solve"], [238, 4, 1, "", "solve_linear"], [238, 4, 1, "", "solve_linear_system"], [238, 4, 1, "", "solve_linear_system_LU"], [238, 4, 1, "", "solve_undetermined_coeffs"], [238, 4, 1, "", "unrad"]], "sympy.solvers.solveset": [[239, 4, 1, "", "_is_exponential"], [239, 4, 1, "", "_is_logarithmic"], [239, 4, 1, "", "_solve_exponential"], [239, 4, 1, "", "_solve_logarithm"], [239, 4, 1, "", "_transolve"], [239, 4, 1, "", "domain_check"], [239, 4, 1, "", "invert_complex"], [239, 4, 1, "", "invert_real"], [239, 4, 1, "", "linear_eq_to_matrix"], [239, 4, 1, "", "linsolve"], [239, 4, 1, "", "nonlinsolve"], [239, 4, 1, "", "solveset"], [239, 4, 1, "", "solveset_complex"], [239, 4, 1, "", "solveset_real"], [239, 4, 1, "", "solvify"]], "sympy.stats": [[240, 4, 1, "", "Arcsin"], [240, 4, 1, "", "Benini"], [240, 4, 1, "", "Bernoulli"], [240, 1, 1, "", "BernoulliProcess"], [240, 4, 1, "", "Beta"], [240, 4, 1, "", "BetaBinomial"], [240, 4, 1, "", "BetaNoncentral"], [240, 4, 1, "", "BetaPrime"], [240, 4, 1, "", "Binomial"], [240, 4, 1, "", "BoundedPareto"], [240, 4, 1, "", "Cauchy"], [240, 1, 1, "", "CentralMoment"], [240, 4, 1, "", "Chi"], [240, 4, 1, "", "ChiNoncentral"], [240, 4, 1, "", "ChiSquared"], [240, 4, 1, "", "Coin"], [240, 1, 1, "", "ContinuousMarkovChain"], [240, 4, 1, "", "ContinuousRV"], [240, 1, 1, "", "Covariance"], [240, 1, 1, "", "CrossCovarianceMatrix"], [240, 4, 1, "", "Dagum"], [240, 4, 1, "", "Davis"], [240, 4, 1, "", "Die"], [240, 1, 1, "", "DiscreteMarkovChain"], [240, 4, 1, "", "DiscreteUniform"], [240, 4, 1, "", "E"], [240, 4, 1, "", "Erlang"], [240, 4, 1, "", "ExGaussian"], [240, 1, 1, "", "Expectation"], [240, 1, 1, "", "ExpectationMatrix"], [240, 4, 1, "", "Exponential"], [240, 4, 1, "", "FDistribution"], [240, 4, 1, "", "FiniteRV"], [240, 4, 1, "", "FisherZ"], [240, 4, 1, "", "Frechet"], [240, 4, 1, "", "Gamma"], [240, 4, 1, "", "GammaInverse"], [240, 1, 1, "", "GammaProcess"], [240, 4, 1, "", "GeneralizedMultivariateLogGamma"], [240, 4, 1, "", "GeneralizedMultivariateLogGammaOmega"], [240, 4, 1, "", "Geometric"], [240, 4, 1, "", "Gompertz"], [240, 4, 1, "", "Gumbel"], [240, 4, 1, "", "Hermite"], [240, 4, 1, "", "Hypergeometric"], [240, 4, 1, "", "JointRV"], [240, 4, 1, "", "Kumaraswamy"], [240, 4, 1, "", "Laplace"], [240, 4, 1, "", "Levy"], [240, 4, 1, "", "LogLogistic"], [240, 4, 1, "", "LogNormal"], [240, 4, 1, "", "Logarithmic"], [240, 4, 1, "", "Logistic"], [240, 4, 1, "", "Lomax"], [240, 4, 1, "", "MatrixGamma"], [240, 4, 1, "", "MatrixNormal"], [240, 4, 1, "", "Maxwell"], [240, 1, 1, "", "Moment"], [240, 4, 1, "", "Moyal"], [240, 4, 1, "", "Multinomial"], [240, 4, 1, "", "MultivariateBeta"], [240, 4, 1, "", "MultivariateEwens"], [240, 4, 1, "", "MultivariateLaplace"], [240, 4, 1, "", "MultivariateNormal"], [240, 4, 1, "", "MultivariateT"], [240, 4, 1, "", "Nakagami"], [240, 4, 1, "", "NegativeBinomial"], [240, 4, 1, "", "NegativeMultinomial"], [240, 4, 1, "", "Normal"], [240, 4, 1, "", "NormalGamma"], [240, 4, 1, "", "P"], [240, 4, 1, "", "Pareto"], [240, 4, 1, "", "Poisson"], [240, 1, 1, "", "PoissonProcess"], [240, 4, 1, "", "PowerFunction"], [240, 1, 1, "", "Probability"], [240, 4, 1, "", "QuadraticU"], [240, 4, 1, "", "Rademacher"], [240, 4, 1, "", "RaisedCosine"], [240, 4, 1, "", "Rayleigh"], [240, 4, 1, "", "Reciprocal"], [240, 4, 1, "", "ShiftedGompertz"], [240, 4, 1, "", "Skellam"], [240, 4, 1, "", "StudentT"], [240, 4, 1, "", "Trapezoidal"], [240, 4, 1, "", "Triangular"], [240, 4, 1, "", "Uniform"], [240, 4, 1, "", "UniformSum"], [240, 1, 1, "", "Variance"], [240, 1, 1, "", "VarianceMatrix"], [240, 4, 1, "", "VonMises"], [240, 4, 1, "", "Wald"], [240, 4, 1, "", "Weibull"], [240, 1, 1, "", "WienerProcess"], [240, 4, 1, "", "WignerSemicircle"], [240, 4, 1, "", "Wishart"], [240, 4, 1, "", "YuleSimon"], [240, 4, 1, "", "Zeta"], [240, 4, 1, "", "cmoment"], [240, 4, 1, "", "correlation"], [240, 4, 1, "", "coskewness"], [240, 4, 1, "", "covariance"], [240, 0, 0, "-", "crv"], [240, 0, 0, "-", "crv_types"], [240, 4, 1, "", "density"], [240, 4, 1, "", "entropy"], [240, 4, 1, "", "factorial_moment"], [240, 0, 0, "-", "frv"], [240, 0, 0, "-", "frv_types"], [240, 4, 1, "", "given"], [240, 4, 1, "", "kurtosis"], [240, 4, 1, "", "marginal_distribution"], [240, 4, 1, "", "median"], [240, 4, 1, "", "moment"], [240, 4, 1, "", "quantile"], [240, 0, 0, "-", "rv"], [240, 4, 1, "", "sample"], [240, 4, 1, "", "sample_iter"], [240, 4, 1, "", "skewness"], [240, 4, 1, "", "std"], [240, 4, 1, "", "variance"], [240, 4, 1, "", "where"]], "sympy.stats.BernoulliProcess": [[240, 2, 1, "", "expectation"], [240, 2, 1, "", "probability"]], "sympy.stats.DiscreteMarkovChain": [[240, 2, 1, "", "absorbing_probabilities"], [240, 2, 1, "", "canonical_form"], [240, 2, 1, "", "communication_classes"], [240, 2, 1, "", "decompose"], [240, 2, 1, "", "fixed_row_vector"], [240, 2, 1, "", "fundamental_matrix"], [240, 3, 1, "", "limiting_distribution"], [240, 2, 1, "", "sample"], [240, 2, 1, "", "stationary_distribution"], [240, 3, 1, "", "transition_probabilities"]], "sympy.stats.compound_rv": [[240, 1, 1, "", "CompoundDistribution"]], "sympy.stats.crv": [[240, 1, 1, "", "ContinuousDomain"], [240, 1, 1, "", "ContinuousPSpace"]], "sympy.stats.crv_types": [[240, 1, 1, "", "NormalPSpace"]], "sympy.stats.crv_types.sympy.stats": [[240, 4, 1, "", "Die"], [240, 4, 1, "", "Normal"]], "sympy.stats.frv": [[240, 1, 1, "", "FiniteDomain"], [240, 1, 1, "", "FinitePSpace"]], "sympy.stats.frv_types": [[240, 1, 1, "", "DiePSpace"]], "sympy.stats.rv": [[240, 1, 1, "", "ConditionalDomain"], [240, 1, 1, "", "PSpace"], [240, 1, 1, "", "ProductDomain"], [240, 1, 1, "", "ProductPSpace"], [240, 1, 1, "", "RandomDomain"], [240, 1, 1, "", "RandomSymbol"], [240, 1, 1, "", "SingleDomain"], [240, 1, 1, "", "SinglePSpace"], [240, 4, 1, "", "pspace"], [240, 4, 1, "", "random_symbols"], [240, 4, 1, "", "rs_swap"], [240, 4, 1, "", "sampling_E"], [240, 4, 1, "", "sampling_P"], [240, 4, 1, "", "sampling_density"]], "sympy.tensor": [[241, 0, 0, "-", "array"], [244, 0, 0, "-", "index_methods"], [245, 0, 0, "-", "indexed"], [246, 0, 0, "-", "tensor"], [247, 0, 0, "-", "toperators"]], "sympy.tensor.array": [[241, 1, 1, "", "ImmutableDenseNDimArray"], [241, 1, 1, "", "ImmutableSparseNDimArray"], [241, 1, 1, "", "MutableDenseNDimArray"], [241, 1, 1, "", "MutableSparseNDimArray"], [241, 4, 1, "", "derive_by_array"], [242, 0, 0, "-", "expressions"], [241, 4, 1, "", "permutedims"], [241, 4, 1, "", "tensorcontraction"], [241, 4, 1, "", "tensordiagonal"], [241, 4, 1, "", "tensorproduct"]], "sympy.tensor.array.expressions": [[242, 1, 1, "", "ArrayContraction"], [242, 1, 1, "", "ArrayDiagonal"], [242, 1, 1, "", "ArrayTensorProduct"], [242, 1, 1, "", "PermuteDims"]], "sympy.tensor.index_methods": [[244, 4, 1, "", "get_contraction_structure"], [244, 4, 1, "", "get_indices"]], "sympy.tensor.indexed": [[245, 1, 1, "", "Idx"], [245, 1, 1, "", "Indexed"], [245, 1, 1, "", "IndexedBase"]], "sympy.tensor.indexed.Idx": [[245, 3, 1, "", "label"], [245, 3, 1, "", "lower"], [245, 3, 1, "", "upper"]], "sympy.tensor.indexed.Indexed": [[245, 3, 1, "", "base"], [245, 3, 1, "", "indices"], [245, 3, 1, "", "ranges"], [245, 3, 1, "", "rank"], [245, 3, 1, "", "shape"]], "sympy.tensor.indexed.IndexedBase": [[245, 3, 1, "", "label"], [245, 3, 1, "", "offset"], [245, 3, 1, "", "shape"], [245, 3, 1, "", "strides"]], "sympy.tensor.tensor": [[246, 1, 1, "", "TensAdd"], [246, 1, 1, "", "TensExpr"], [246, 1, 1, "", "TensMul"], [246, 1, 1, "", "TensorHead"], [246, 1, 1, "", "TensorIndex"], [246, 1, 1, "", "TensorIndexType"], [246, 1, 1, "", "TensorSymmetry"], [246, 1, 1, "", "TensorType"], [246, 1, 1, "", "_TensorManager"], [246, 4, 1, "", "canon_bp"], [246, 4, 1, "", "riemann_cyclic"], [246, 4, 1, "", "riemann_cyclic_replace"], [246, 4, 1, "", "tensor_heads"], [246, 4, 1, "", "tensorsymmetry"]], "sympy.tensor.tensor.TensAdd": [[246, 2, 1, "", "canon_bp"], [246, 2, 1, "", "contract_metric"]], "sympy.tensor.tensor.TensExpr": [[246, 2, 1, "", "get_matrix"], [246, 2, 1, "", "replace_with_arrays"]], "sympy.tensor.tensor.TensMul": [[246, 2, 1, "", "canon_bp"], [246, 2, 1, "", "contract_metric"], [246, 2, 1, "", "get_free_indices"], [246, 2, 1, "", "get_indices"], [246, 2, 1, "", "perm2tensor"], [246, 2, 1, "", "sorted_components"], [246, 2, 1, "", "split"]], "sympy.tensor.tensor.TensorHead": [[246, 2, 1, "", "commutes_with"]], "sympy.tensor.tensor.TensorSymmetry": [[246, 2, 1, "", "direct_product"], [246, 2, 1, "", "fully_symmetric"], [246, 2, 1, "", "no_symmetry"], [246, 2, 1, "", "riemann"]], "sympy.tensor.tensor._TensorManager": [[246, 2, 1, "", "clear"], [246, 2, 1, "", "comm_i2symbol"], [246, 2, 1, "", "comm_symbols2i"], [246, 2, 1, "", "get_comm"], [246, 2, 1, "", "set_comm"], [246, 2, 1, "", "set_comms"]], "sympy.tensor.toperators": [[247, 1, 1, "", "PartialDerivative"]], "sympy.testing": [[249, 0, 0, "-", "pytest"], [250, 0, 0, "-", "randtest"], [251, 0, 0, "-", "runtests"]], "sympy.testing.pytest": [[249, 4, 1, "", "SKIP"], [249, 4, 1, "", "nocache_fail"], [249, 4, 1, "", "raises"], [249, 4, 1, "", "skip_under_pyodide"], [249, 4, 1, "", "warns"], [249, 4, 1, "", "warns_deprecated_sympy"]], "sympy.testing.runtests": [[251, 1, 1, "", "PyTestReporter"], [251, 1, 1, "", "Reporter"], [251, 1, 1, "", "SymPyDocTestFinder"], [251, 1, 1, "", "SymPyDocTestRunner"], [251, 1, 1, "", "SymPyOutputChecker"], [251, 1, 1, "", "SymPyTestResults"], [251, 4, 1, "", "convert_to_native_paths"], [251, 4, 1, "", "doctest"], [251, 4, 1, "", "get_sympy_dir"], [251, 4, 1, "", "raise_on_deprecated"], [251, 4, 1, "", "run_all_tests"], [251, 4, 1, "", "run_in_subprocess_with_hash_randomization"], [251, 4, 1, "", "split_list"], [251, 4, 1, "", "sympytestfile"], [251, 4, 1, "", "test"]], "sympy.testing.runtests.PyTestReporter": [[251, 2, 1, "", "write"]], "sympy.testing.runtests.SymPyDocTestRunner": [[251, 2, 1, "", "run"]], "sympy.testing.runtests.SymPyOutputChecker": [[251, 2, 1, "", "check_output"]], "sympy.testing.runtests.SymPyTestResults": [[251, 5, 1, "", "attempted"], [251, 5, 1, "", "failed"]], "sympy.utilities": [[252, 0, 0, "-", "autowrap"], [253, 0, 0, "-", "codegen"], [254, 0, 0, "-", "decorator"], [255, 0, 0, "-", "enumerative"], [256, 0, 0, "-", "exceptions"], [258, 0, 0, "-", "iterables"], [259, 0, 0, "-", "lambdify"], [260, 0, 0, "-", "memoization"], [261, 0, 0, "-", "misc"], [262, 0, 0, "-", "pkgdata"], [263, 0, 0, "-", "source"], [264, 0, 0, "-", "timeutils"]], "sympy.utilities.autowrap": [[252, 1, 1, "", "CodeWrapper"], [252, 1, 1, "", "CythonCodeWrapper"], [252, 1, 1, "", "DummyWrapper"], [252, 1, 1, "", "F2PyCodeWrapper"], [252, 1, 1, "", "UfuncifyCodeWrapper"], [252, 4, 1, "", "autowrap"], [252, 4, 1, "", "binary_function"], [252, 4, 1, "", "ufuncify"]], "sympy.utilities.autowrap.CythonCodeWrapper": [[252, 2, 1, "", "dump_pyx"]], "sympy.utilities.autowrap.UfuncifyCodeWrapper": [[252, 2, 1, "", "dump_c"]], "sympy.utilities.codegen": [[253, 1, 1, "", "Argument"], [253, 1, 1, "", "CCodeGen"], [253, 1, 1, "", "CodeGen"], [253, 1, 1, "", "DataType"], [253, 1, 1, "", "FCodeGen"], [253, 1, 1, "", "JuliaCodeGen"], [253, 1, 1, "", "OctaveCodeGen"], [253, 1, 1, "", "OutputArgument"], [253, 1, 1, "", "Result"], [253, 1, 1, "", "Routine"], [253, 1, 1, "", "RustCodeGen"], [253, 4, 1, "", "codegen"], [253, 4, 1, "", "get_default_datatype"], [253, 4, 1, "", "make_routine"]], "sympy.utilities.codegen.CCodeGen": [[253, 2, 1, "", "dump_c"], [253, 2, 1, "", "dump_h"], [253, 2, 1, "", "get_prototype"]], "sympy.utilities.codegen.CodeGen": [[253, 2, 1, "", "dump_code"], [253, 2, 1, "", "routine"], [253, 2, 1, "", "write"]], "sympy.utilities.codegen.FCodeGen": [[253, 2, 1, "", "dump_f95"], [253, 2, 1, "", "dump_h"], [253, 2, 1, "", "get_interface"]], "sympy.utilities.codegen.JuliaCodeGen": [[253, 2, 1, "", "dump_jl"], [253, 2, 1, "", "routine"]], "sympy.utilities.codegen.OctaveCodeGen": [[253, 2, 1, "", "dump_m"], [253, 2, 1, "", "routine"]], "sympy.utilities.codegen.Routine": [[253, 3, 1, "", "result_variables"], [253, 3, 1, "", "variables"]], "sympy.utilities.codegen.RustCodeGen": [[253, 2, 1, "", "dump_rs"], [253, 2, 1, "", "get_prototype"], [253, 2, 1, "", "routine"]], "sympy.utilities.decorator": [[254, 4, 1, "", "conserve_mpmath_dps"], [254, 4, 1, "", "deprecated"], [254, 4, 1, "", "doctest_depends_on"], [254, 4, 1, "", "memoize_property"], [254, 1, 1, "", "no_attrs_in_subclass"], [254, 4, 1, "", "public"], [254, 4, 1, "", "threaded"], [254, 4, 1, "", "threaded_factory"], [254, 4, 1, "", "xthreaded"]], "sympy.utilities.enumerative": [[255, 1, 1, "", "MultisetPartitionTraverser"], [255, 4, 1, "", "factoring_visitor"], [255, 4, 1, "", "list_visitor"], [255, 4, 1, "", "multiset_partitions_taocp"]], "sympy.utilities.enumerative.MultisetPartitionTraverser": [[255, 2, 1, "", "count_partitions"], [255, 2, 1, "", "enum_all"], [255, 2, 1, "", "enum_large"], [255, 2, 1, "", "enum_range"], [255, 2, 1, "", "enum_small"]], "sympy.utilities.exceptions": [[256, 7, 1, "", "SymPyDeprecationWarning"], [256, 4, 1, "", "ignore_warnings"], [256, 4, 1, "", "sympy_deprecation_warning"]], "sympy.utilities.iterables": [[258, 1, 1, "", "NotIterable"], [258, 4, 1, "", "binary_partitions"], [258, 4, 1, "", "bracelets"], [258, 4, 1, "", "capture"], [258, 4, 1, "", "common_prefix"], [258, 4, 1, "", "common_suffix"], [258, 4, 1, "", "connected_components"], [258, 4, 1, "", "dict_merge"], [258, 4, 1, "", "filter_symbols"], [258, 4, 1, "", "flatten"], [258, 4, 1, "", "generate_bell"], [258, 4, 1, "", "generate_derangements"], [258, 4, 1, "", "generate_involutions"], [258, 4, 1, "", "generate_oriented_forest"], [258, 4, 1, "", "group"], [258, 4, 1, "", "has_dups"], [258, 4, 1, "", "has_variety"], [258, 4, 1, "", "ibin"], [258, 4, 1, "", "iproduct"], [258, 4, 1, "", "is_palindromic"], [258, 4, 1, "", "is_sequence"], [258, 4, 1, "", "iterable"], [258, 4, 1, "", "kbins"], [258, 4, 1, "", "least_rotation"], [258, 4, 1, "", "minlex"], [258, 4, 1, "", "multiset"], [258, 4, 1, "", "multiset_combinations"], [258, 4, 1, "", "multiset_derangements"], [258, 4, 1, "", "multiset_partitions"], [258, 4, 1, "", "multiset_permutations"], [258, 4, 1, "", "necklaces"], [258, 4, 1, "", "numbered_symbols"], [258, 4, 1, "", "ordered_partitions"], [258, 4, 1, "", "partitions"], [258, 4, 1, "", "permute_signs"], [258, 4, 1, "", "postfixes"], [258, 4, 1, "", "prefixes"], [258, 4, 1, "", "random_derangement"], [258, 4, 1, "", "reshape"], [258, 4, 1, "", "rotate_left"], [258, 4, 1, "", "rotate_right"], [258, 4, 1, "", "rotations"], [258, 4, 1, "", "roundrobin"], [258, 4, 1, "", "runs"], [258, 4, 1, "", "sequence_partitions"], [258, 4, 1, "", "sequence_partitions_empty"], [258, 4, 1, "", "sift"], [258, 4, 1, "", "signed_permutations"], [258, 4, 1, "", "strongly_connected_components"], [258, 4, 1, "", "subsets"], [258, 4, 1, "", "take"], [258, 4, 1, "", "topological_sort"], [258, 4, 1, "", "unflatten"], [258, 4, 1, "", "uniq"], [258, 4, 1, "", "variations"]], "sympy.utilities.lambdify": [[259, 4, 1, "", "implemented_function"], [259, 4, 1, "", "lambdastr"], [259, 4, 1, "", "lambdify"]], "sympy.utilities.memoization": [[260, 4, 1, "", "assoc_recurrence_memo"], [260, 4, 1, "", "recurrence_memo"]], "sympy.utilities.misc": [[261, 4, 1, "", "as_int"], [261, 4, 1, "", "debug"], [261, 4, 1, "", "debug_decorator"], [261, 4, 1, "", "debugf"], [261, 4, 1, "", "filldedent"], [261, 4, 1, "", "find_executable"], [261, 4, 1, "", "func_name"], [261, 4, 1, "", "ordinal"], [261, 4, 1, "", "rawlines"], [261, 4, 1, "", "replace"], [261, 4, 1, "", "strlines"], [261, 4, 1, "", "translate"]], "sympy.utilities.pkgdata": [[262, 4, 1, "", "get_resource"]], "sympy.utilities.source": [[263, 4, 1, "", "get_class"], [263, 4, 1, "", "get_mod_func"]], "sympy.utilities.timeutils": [[264, 4, 1, "", "timed"]], "sympy.vector.coordsysrect": [[265, 1, 1, "", "CoordSys3D"]], "sympy.vector.coordsysrect.CoordSys3D": [[265, 2, 1, "", "__init__"], [265, 2, 1, "", "create_new"], [265, 2, 1, "", "locate_new"], [265, 2, 1, "", "orient_new"], [265, 2, 1, "", "orient_new_axis"], [265, 2, 1, "", "orient_new_body"], [265, 2, 1, "", "orient_new_quaternion"], [265, 2, 1, "", "orient_new_space"], [265, 2, 1, "", "position_wrt"], [265, 2, 1, "", "rotation_matrix"], [265, 2, 1, "", "scalar_map"]], "sympy.vector": [[268, 4, 1, "", "curl"], [268, 4, 1, "", "divergence"], [268, 4, 1, "", "express"], [268, 4, 1, "", "gradient"], [268, 4, 1, "", "is_conservative"], [268, 4, 1, "", "is_solenoidal"], [268, 4, 1, "", "matrix_to_vector"], [268, 4, 1, "", "scalar_potential"], [268, 4, 1, "", "scalar_potential_difference"]], "sympy.vector.deloperator": [[265, 1, 1, "", "Del"]], "sympy.vector.deloperator.Del": [[265, 2, 1, "", "cross"], [265, 2, 1, "", "dot"], [265, 2, 1, "", "gradient"]], "sympy.vector.dyadic": [[265, 1, 1, "", "Dyadic"]], "sympy.vector.dyadic.Dyadic": [[265, 3, 1, "", "components"], [265, 2, 1, "", "cross"], [265, 2, 1, "", "dot"], [265, 2, 1, "", "to_matrix"]], "sympy.vector.implicitregion": [[265, 1, 1, "", "ImplicitRegion"]], "sympy.vector.implicitregion.ImplicitRegion": [[265, 2, 1, "", "multiplicity"], [265, 2, 1, "", "rational_parametrization"], [265, 2, 1, "", "regular_point"], [265, 2, 1, "", "singular_points"]], "sympy.vector.integrals": [[265, 1, 1, "", "ParametricIntegral"], [268, 4, 1, "", "vector_integrate"]], "sympy.vector.orienters": [[267, 1, 1, "", "AxisOrienter"], [267, 1, 1, "", "BodyOrienter"], [267, 1, 1, "", "Orienter"], [267, 1, 1, "", "QuaternionOrienter"], [267, 1, 1, "", "SpaceOrienter"]], "sympy.vector.orienters.AxisOrienter": [[267, 2, 1, "", "__init__"], [267, 2, 1, "", "rotation_matrix"]], "sympy.vector.orienters.BodyOrienter": [[267, 2, 1, "", "__init__"]], "sympy.vector.orienters.Orienter": [[267, 2, 1, "", "rotation_matrix"]], "sympy.vector.orienters.QuaternionOrienter": [[267, 2, 1, "", "__init__"]], "sympy.vector.orienters.SpaceOrienter": [[267, 2, 1, "", "__init__"]], "sympy.vector.parametricregion": [[265, 1, 1, "", "ParametricRegion"]], "sympy.vector.vector": [[265, 1, 1, "", "Vector"]], "sympy.vector.vector.Vector": [[265, 3, 1, "", "components"], [265, 2, 1, "", "cross"], [265, 2, 1, "", "dot"], [265, 2, 1, "", "magnitude"], [265, 2, 1, "", "normalize"], [265, 2, 1, "", "outer"], [265, 2, 1, "", "projection"], [265, 2, 1, "", "separate"], [265, 2, 1, "", "to_matrix"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function", "5": "py:attribute", "6": "py:data", "7": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"], "5": ["py", "attribute", "Python attribute"], "6": ["py", "data", "Python data"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"cite": 0, "sympi": [0, 4, 7, 9, 13, 15, 18, 19, 20, 25, 30, 32, 36, 38, 39, 49, 91, 110, 152, 201, 210, 265, 268, 269, 272, 286, 288, 291], "debug": [1, 12], "depend": [2, 8, 12, 149, 210, 270], "hard": 2, "option": [2, 9, 32, 35, 36, 37, 213], "recommend": [2, 5], "interact": [2, 96, 206], "us": [2, 5, 7, 13, 19, 28, 30, 31, 32, 33, 34, 35, 36, 37, 49, 71, 92, 93, 109, 112, 144, 149, 150, 204, 206, 217, 239, 270], "print": [2, 13, 23, 49, 96, 123, 132, 194, 200, 220, 296], "pars": [2, 37, 110], "logic": [2, 22, 98, 276, 279], "plot": [2, 13, 117, 165, 206], "lambdifi": [2, 13, 109, 259, 286], "code": [2, 3, 5, 7, 9, 11, 12, 13, 49, 52, 123, 204, 220, 263, 276, 278], "gener": [2, 4, 5, 49, 58, 60, 210, 215, 239, 271, 276, 278], "autowrap": [2, 49, 252], "printer": [2, 49, 220, 296], "test": [2, 11, 12, 13, 65, 98, 219, 248, 250, 251, 293], "onli": [2, 30, 35, 239], "statist": 2, "symengin": 2, "backend": [2, 206], "sage": 2, "develop": [2, 7, 9, 11, 68], "get": [2, 7, 9, 15, 28], "sourc": [2, 263], "run": [2, 11, 12, 39, 251], "build": [2, 8], "document": [2, 3, 4, 5, 7, 8, 11, 38], "benchmark": 2, "deprec": [3, 12, 13], "polici": [3, 12], "what": [3, 149, 209, 210, 239, 291, 294], "i": [3, 12, 15, 34, 35, 93, 109, 149, 209, 220, 239, 291], "try": 3, "avoid": 3, "backward": 3, "incompat": 3, "chang": [3, 11, 13], "first": [3, 13], "place": 3, "when": [3, 37, 93], "doe": [3, 15, 239], "requir": [3, 8], "public": 3, "api": [3, 38, 89, 93, 95, 119, 126, 198, 239, 252, 253, 266, 276], "Not": [3, 28, 30, 31, 32, 34, 35, 36, 37], "The": [3, 13, 21, 23, 50, 58, 93, 149, 190, 202, 215, 227, 230, 271, 272, 291], "purpos": 3, "technic": 3, "possibl": [3, 32, 293], "how": [3, 24, 38, 93, 204, 239], "long": 3, "should": [3, 109], "last": 3, "checklist": [3, 11], "ad": 3, "releas": 3, "note": [3, 23, 68, 80, 149, 227, 229, 289, 298], "entri": [3, 104], "docstr": [4, 5, 111, 113, 115, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 196, 197, 199, 200, 265, 267, 268], "style": [4, 5, 12], "guid": [4, 5, 10, 12, 24, 38, 145, 202, 273], "guidelin": [4, 5], "format": [4, 5, 13, 37], "section": 4, "1": [4, 13, 26, 35, 93, 112, 135, 149, 161], "singl": [4, 15, 17, 30], "sentenc": 4, "summari": 4, "2": [4, 26, 35, 93, 112, 135, 149], "explan": [4, 16, 38], "3": [4, 26, 95, 112, 135, 186], "exampl": [4, 11, 23, 26, 28, 30, 31, 34, 36, 40, 68, 80, 92, 95, 108, 112, 120, 136, 149, 153, 157, 188, 189, 190, 204, 219, 220, 227, 230, 240, 241, 242, 245, 271, 291, 297], "4": [4, 13, 26, 112], "paramet": [4, 31, 230, 239], "5": [4, 13, 26, 112], "see": [4, 68, 258, 271], "also": [4, 68, 258], "6": [4, 13, 112], "refer": [4, 21, 26, 38, 41, 48, 51, 67, 68, 70, 80, 86, 93, 95, 101, 102, 104, 106, 108, 110, 126, 151, 157, 160, 190, 202, 204, 205, 206, 207, 211, 213, 215, 216, 217, 227, 229, 230, 233, 239, 252, 253, 273, 276], "sampl": [4, 13], "class": [4, 13, 18, 48, 49, 67, 70, 102, 104, 106, 108, 149, 195, 206, 215, 220, 233, 241, 265, 267], "ar": [4, 30, 35, 204, 210, 239], "mathemat": [4, 15, 28, 152], "function": [4, 12, 13, 15, 23, 28, 30, 32, 34, 35, 37, 49, 58, 67, 68, 74, 75, 76, 86, 87, 90, 91, 93, 98, 104, 108, 110, 112, 123, 130, 150, 172, 175, 196, 197, 201, 206, 208, 210, 211, 216, 219, 220, 230, 233, 236, 237, 241, 268, 272, 296, 297], "best": [4, 5, 23], "practic": [4, 5, 23], "write": [4, 5, 11, 12, 23], "import": 4, "sphinx": 4, "cross": 4, "referenc": 4, "type": [5, 12, 17, 30, 49, 76, 196, 239, 240], "narr": 5, "markdown": 5, "prefer": [5, 37], "math": [5, 49], "latex": [5, 110, 296], "head": 5, "spell": 5, "punctuat": 5, "capit": 5, "tone": 5, "contribut": [6, 7, 11, 38, 217], "introduct": [7, 15, 19, 41, 48, 49, 50, 58, 70, 80, 98, 135, 152, 190, 201, 203, 206, 207, 208, 215, 219, 274, 291], "familiar": 7, "softwar": 7, "read": [7, 289], "paper": 7, "perus": 7, "review": 7, "conduct": 7, "join": 7, "our": 7, "mail": 7, "list": [7, 13, 15, 17, 28, 30], "setup": [7, 9], "your": [7, 9, 11, 32], "environ": [7, 9], "identifi": 7, "someth": [7, 12], "work": [7, 31, 33, 35, 80, 219], "codebas": 7, "pull": [7, 11], "request": [7, 11], "docker": 8, "debian": 8, "ubuntu": 8, "fedora": 8, "mac": 8, "window": [8, 206], "10": [8, 13, 112], "doc": [8, 211], "local": 8, "instal": [8, 9, 38, 39, 110, 295], "view": 8, "auto": 8, "rebuild": 8, "live": 8, "server": 8, "pdf": 8, "git": [9, 39], "configur": [9, 213], "name": [9, 11, 56], "email": [9, 11], "set": [9, 13, 18, 32, 35, 36, 45, 80, 204, 228, 239, 296], "github": [9, 12], "creat": [9, 11, 13, 15, 23, 34, 104], "account": 9, "ssh": 9, "kei": [9, 23, 152, 292], "fork": 9, "virtual": 9, "new": [10, 11, 13, 270], "contributor": 10, "index": [10, 50, 58, 242, 245], "workflow": 11, "process": [11, 240], "pick": 11, "an": [11, 13, 32, 34, 35, 80, 135, 190, 230, 239, 292], "issu": [11, 123, 135, 149, 194, 293], "fix": [11, 135], "branch": [11, 93], "modifi": 11, "qualiti": [11, 12], "add": [11, 23, 68], "commit": 11, "delet": [11, 293], "junk": 11, "file": 11, "messag": 11, "good": 11, "co": 11, "author": [11, 205], "make": [11, 32, 37], "titl": 11, "descript": 11, "address": 11, "mailmap": 11, "basic": [12, 68, 72, 104, 196, 208, 210, 216, 228, 269, 276, 277, 286, 293], "failur": 12, "action": 12, "regress": 12, "special": [12, 15, 20, 49, 76, 216, 228, 297], "except": [12, 104, 110, 213, 256], "warn": [12, 13, 256], "unchang": 12, "express": [12, 13, 15, 28, 31, 32, 34, 49, 80, 87, 90, 98, 101, 110, 125, 210, 219, 242, 270, 286, 292], "dummi": 12, "consist": [12, 37], "check": [12, 13, 196], "random": [12, 68, 240], "skip": 12, "mark": 12, "expect": 12, "fail": 12, "slow": [12, 149], "extern": 12, "doctest": 12, "updat": 12, "exist": [12, 93], "coverag": 12, "hypothesi": 12, "activ": 13, "silenc": 13, "version": 13, "13": 13, "marker": 13, "annot": 13, "fill": 13, "rectangl": 13, "move": [13, 230], "mechan": [13, 21, 114, 123, 126, 136, 145, 146, 147, 148, 149, 150, 151, 152, 153, 172, 240], "12": 13, "managedproperti": 13, "metaclass": 13, "joint": [13, 127, 146, 240], "coordin": [13, 123, 139, 149, 206, 269, 270, 272, 274], "intermedi": 13, "frame": [13, 204], "attach": 13, "point": [13, 23, 72, 83, 123, 194, 203, 269], "argument": [13, 15, 239], "11": [13, 112], "modul": [13, 118, 155, 194, 202, 207, 208, 209, 210, 213, 215, 216, 233, 236, 237, 239, 252], "tensor": [13, 64, 76, 184, 243, 246, 247], "arrai": [13, 241, 242], "conv_": 13, "renam": 13, "from_": 13, "mathematica": [13, 220], "parser": [13, 135], "redund": 13, "static": 13, "method": [13, 19, 23, 33, 39, 128, 139, 142, 143, 144, 147, 148, 149, 220, 237, 239, 244, 270, 293], "carmichael": 13, "hadamardproduct": 13, "matadd": 13, "matmul": 13, "some": [13, 35, 152, 239], "travers": [13, 68], "have": [13, 32, 36, 219], "been": 13, "core": [13, 68, 101], "trace": 13, "compat": [13, 242], "submodul": [13, 80], "9": [13, 112], "expr_free_symbol": 13, "stat": [13, 240], "numsampl": 13, "n": [13, 241, 242], "poli": [13, 209, 210, 211, 218], "solver": [13, 35, 218, 234, 235, 236, 238, 239, 298], "rawmatrix": 13, "non": 13, "expr": [13, 68], "object": [13, 18, 245], "matrix": [13, 33, 45, 101, 104, 105, 149, 240, 293], "get_seg": 13, "attribut": [13, 50, 58], "mdft": 13, "physic": [13, 27, 120, 123, 136, 146, 147, 148, 149, 150, 151, 152, 153, 192, 194, 198, 201, 202, 203, 204, 276, 282], "matric": [13, 19, 33, 99, 100, 101, 102, 103, 104, 106, 120, 122, 242, 276, 280, 293], "privat": 13, "sparsematrix": [13, 106], "_smat": 13, "densematrix": 13, "_mat": 13, "laplace_transform": 13, "nocond": 13, "fals": 13, "8": [13, 112], "theanocod": 13, "assumpt": [13, 18, 21, 23, 44, 68], "handler": [13, 21], "askhandl": 13, "relat": [13, 15, 17, 21, 30, 68, 76, 98, 201, 204, 272], "7": [13, 112], "call": [13, 30, 37], "stochasticprocess": 13, "distribut": [13, 213, 240], "randomindexedsymbol": 13, "discretemarkovchain": 13, "absorbing_probabilit": 13, "util": [13, 49, 65, 66, 85, 104, 158, 215, 238, 257, 264, 276, 284], "misc": [13, 44], "find_execut": 13, "mutabl": 13, "diffgeom": 13, "unicod": [13, 296], "pretti": [13, 220, 296], "stringpict": 13, "prettyform": 13, "pretty_symbologi": 13, "xstr": 13, "pass": 13, "oper": [13, 15, 90, 104, 163, 172, 174, 175, 196, 201, 204, 230, 241, 247, 269, 271, 272, 286, 293], "longer": 13, "accept": 13, "arg": [13, 292], "variou": [13, 219], "randtest": 13, "mix": 13, "polynomi": [13, 28, 76, 90, 208, 210, 211, 212, 213, 215, 216, 217, 219, 238, 297], "binari": 13, "print_cycl": 13, "flag": 13, "combinator": [13, 55], "permut": [13, 59, 60], "integr": [13, 35, 72, 76, 90, 92, 93, 94, 95, 123, 208, 215, 275, 287], "string": [13, 21, 37, 286], "fallback": 13, "sympifi": [13, 68], "indefinit": 13, "eq": [13, 32], "fun_ev": 13, "__call__": 13, "tensortyp": 13, "dummy_fmt": 13, "tensorindextyp": 13, "metric": 13, "get_kronecker_delta": 13, "get_epsilon": 13, "tensorsymmetri": 13, "tensorhead": 13, "is_emptyset": 13, "productset": 13, "iter": [13, 228, 258], "set_potential_energi": 13, "condit": [13, 35, 93, 228], "conditionset": 13, "max_degre": 13, "get_upper_degre": 13, "properti": [13, 21, 207], "multivariate_result": 13, "dixonresult": 13, "tupl": [13, 15, 17, 30, 216], "lambda": 13, "evalu": [13, 15, 23, 28, 72, 90, 152, 292], "differentiate_finit": 13, "data": 13, "glossari": 14, "gotcha": [15, 21, 135, 289], "pitfal": 15, "equal": [15, 31, 32, 289], "sign": [15, 289], "doubl": 15, "variabl": [15, 30, 35, 37, 206, 240, 270], "assign": 15, "between": [15, 21, 192, 210], "symbol": [15, 21, 22, 23, 30, 31, 33, 68, 87, 149, 153, 205, 210, 216, 219, 239, 289, 291], "python": [15, 49], "number": [15, 45, 54, 68, 71, 72, 93, 108, 210, 215, 219, 276, 281], "v": [15, 22, 210], "float": [15, 72], "ration": [15, 210, 211, 216, 219, 222, 236, 297], "immut": [15, 102], "invers": [15, 23, 74, 93], "trig": 15, "sqrt": 15, "dictionari": [15, 17, 28, 36], "keyword": 15, "help": 15, "from": [15, 31, 32, 33, 37, 219, 242], "within": 15, "solv": [17, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 112, 208, 215, 238, 239, 298], "output": [17, 123, 239], "empti": 17, "Of": 17, "valu": [17, 22, 37], "boolean": [17, 22, 98], "classif": 18, "kind": [18, 68], "func": [18, 292], "finit": [19, 47, 50, 207, 210, 213, 215, 219, 230, 240, 287], "differ": [19, 21, 47, 152, 210, 270, 287], "approxim": [19, 28, 49], "deriv": [19, 35, 204, 241, 272, 287], "A": [19, 137, 138, 141, 142, 143, 144, 149, 291, 298], "direct": [19, 272], "topic": [20, 123, 194, 276, 283], "old": [21, 210], "system": [21, 30, 34, 36, 117, 140, 153, 187, 189, 190, 193, 236, 238, 269, 270, 272, 274], "appli": [21, 93, 230], "input": [21, 239], "predic": [21, 44, 45], "abov": 21, "definit": [21, 23, 86], "implic": 21, "interpret": 21, "other": [21, 23, 39, 87, 130, 201, 270], "is_": 21, "implement": [21, 93, 201, 220, 230, 252, 253, 269, 272], "limit": [21, 30, 31, 92, 135, 225, 227, 287], "combin": [21, 90], "fuzzi": 22, "three": [22, 80], "bool": 22, "custom": [23, 206, 220], "easi": 23, "case": [23, 239], "fulli": 23, "defin": [23, 35], "automat": [23, 219], "eval": 23, "remind": 23, "numer": [23, 28, 34, 35, 37, 72, 90, 95, 109, 123, 152], "evalf": [23, 68, 109, 286], "rewrit": [23, 49, 221, 297], "simplif": [23, 72, 98, 229, 297], "doit": 23, "expand": [23, 219, 221, 297], "differenti": [23, 35, 70, 90, 123, 238, 239, 298], "as_real_imag": 23, "miscellan": [23, 74, 80, 261], "_eval_": 23, "complet": [23, 28, 135], "versin": 23, "divid": 23, "fuse": 23, "multipli": 23, "fma": 23, "addit": [23, 90], "tip": [23, 286, 287, 289, 292, 293], "logo": 25, "control": [26, 116, 117, 118, 119, 206], "packag": 26, "find": [28, 34, 215, 216], "root": [28, 34, 216], "algebra": [28, 30, 31, 32, 33, 35, 36, 41, 97, 104, 160, 204, 207, 210, 215, 219, 238, 298], "altern": [28, 30, 31, 32, 33, 34, 35, 36, 204], "consid": [28, 30, 31, 32, 33, 34, 35, 36], "guidanc": [28, 30, 31, 32, 33, 34, 35, 36, 37], "solut": [28, 31, 32, 33, 34, 35, 36, 37, 172, 239, 271], "without": [28, 35], "multipl": [28, 35, 90, 204, 215], "With": [28, 31, 32, 33, 34, 35, 36, 37], "factor": [28, 208, 213, 219, 297], "equat": [28, 29, 31, 32, 33, 34, 35, 36, 37, 147, 148, 149, 188, 208, 233, 238, 239, 298], "exact": [28, 37], "real_root": 28, "nroot": 28, "complex": [28, 34, 74, 210], "result": [28, 30, 31, 32, 33, 34, 35, 36, 219], "all_root": 28, "tradeoff": 28, "speed": [28, 32, 33, 36, 37, 123, 149], "all": [28, 30, 31, 32, 34, 35, 36], "perhap": 28, "implicitli": [28, 35], "crootof": 28, "repres": [28, 32, 37, 93, 180, 210, 215], "can": [28, 30, 31, 32, 34, 35, 36, 37], "Be": [28, 30, 31, 32, 33, 34, 35], "No": [28, 31, 32, 33, 35], "close": [28, 32, 35, 36, 37], "form": [28, 32, 35, 36, 37, 98, 105, 149, 242], "report": [28, 30, 31, 32, 33, 34, 35, 36, 37], "bug": [28, 30, 31, 32, 33, 34, 35, 36, 37, 95], "reduc": [30, 219], "One": [30, 34, 35], "inequ": [30, 235, 238, 239], "includ": [30, 35, 37], "extract": [30, 31, 33, 35], "decompos": 30, "reduct": [30, 230], "interest": [30, 291], "per": 30, "That": [30, 31, 32, 34, 36, 37], "return": [30, 35, 239], "period": 30, "which": [30, 32, 36, 109, 220], "cannot": [30, 32, 35, 36], "satisfi": 30, "analyt": [30, 172], "diophantin": [31, 233, 238, 239], "zero": [31, 32, 37, 117, 213, 219, 293], "specifi": [31, 35, 206], "order": [31, 45, 216, 227, 230], "verifi": [31, 275], "programmat": [31, 32], "Into": [32, 34, 36], "put": 32, "restrict": 32, "domain": [32, 208, 210, 211, 216, 219, 239], "explicitli": [32, 35], "infinit": [32, 239], "substitut": [32, 34, 123, 194, 286], "solveset": [32, 239], "necessarili": 32, "interrog": 32, "up": [32, 33, 36, 37, 296], "usual": 33, "must": 33, "squar": [33, 208], "sever": 33, "same": 33, "vector": [33, 58, 145, 194, 196, 198, 201, 202, 203, 204, 213, 265, 266, 268, 269, 270, 272, 273, 274, 275], "element": [33, 149, 210, 215], "real": [34, 210], "ensur": [34, 37, 239], "found": 34, "given": [34, 36], "interv": [34, 206], "increas": 34, "precis": 34, "scipi": [34, 35], "ordinari": [35, 238, 239], "od": [35, 236, 238, 239], "Its": 35, "independ": 35, "initi": 35, "boundari": 35, "bewar": 35, "copi": 35, "past": 35, "pair": 35, "If": 35, "There": 35, "arbitrari": 35, "constant": [35, 167, 190], "hint": [35, 236, 237], "unevalu": 35, "select": 35, "specif": [35, 49], "linear": [36, 90, 104, 123, 129, 149, 150, 190, 219], "nonlinear": 36, "you": 37, "might": 37, "ani": [37, 239], "denomin": 37, "do": [37, 239], "simplifi": [37, 49, 213, 231, 232, 297], "welcom": 38, "": [38, 128, 139, 142, 143, 144, 147, 148, 149, 170, 181, 219, 229, 238, 239, 270, 275, 294], "tutori": [38, 233, 285, 290], "anaconda": 39, "mpmath": 39, "question": 39, "abc": 40, "caveat": [40, 110], "quaternion": 41, "ask": 42, "assum": 43, "queri": 44, "content": [44, 55, 75, 88, 94, 212, 224, 234, 243], "perform": 44, "improv": [44, 135], "common": [45, 99, 123, 194, 219, 220, 221], "calculu": [45, 47, 204, 287], "theori": [45, 48, 108, 276, 281], "refin": 46, "singular": [47, 112], "weight": 47, "categori": 48, "base": [48, 70, 104, 207, 208, 219, 226, 239], "diagram": 48, "draw": 48, "codegen": [49, 253], "tool": [49, 107], "abstract": [49, 114, 118, 120, 145, 155, 172, 202, 211], "syntax": 49, "tree": [49, 210, 220, 292], "ast": [49, 135], "predefin": 49, "node": 49, "c": [49, 220], "cfunction": 49, "cnode": 49, "cxxnode": 49, "fortran": [49, 220], "fnode": 49, "algorithm": [49, 50, 170, 181, 213, 216, 222, 227, 230], "pyutil": 49, "cutil": 49, "futil": 49, "present": [50, 58], "group": [50, 51, 53, 56, 58, 59, 190, 215], "overview": [50, 58, 93], "facil": 50, "construct": [50, 58, 242], "free": [50, 208], "word": [50, 58], "coset": 50, "enumer": [50, 73], "todd": 50, "coxet": 50, "cosett": 50, "compress": 50, "standard": 50, "subgroup": 50, "low": 50, "reidemeist": 50, "schreier": 50, "bibliographi": [50, 58], "galoi": [51, 215], "grai": 52, "constructor": [53, 216, 293], "nilpot": 54, "abelian": 54, "cyclic": 54, "partit": [57, 258], "polycycl": 58, "polycyclicgroup": 58, "collector": 58, "comput": [58, 93, 109, 172, 219, 291], "minim": [58, 215], "uncollect": 58, "subword": 58, "collect": [58, 221, 297], "expon": [58, 219], "depth": [58, 80], "lead": 58, "polyhedron": 61, "prufer": 62, "sequenc": [62, 90, 213, 216, 225, 226], "subset": [63, 71], "canonic": 64, "concret": 67, "hypergeometr": [67, 76, 87, 90, 222, 230], "term": [67, 219, 221, 227], "cach": 68, "singleton": [68, 226, 228], "power": [68, 222, 228, 291, 297], "mul": 68, "mod": 68, "multidimension": 68, "contain": 68, "exprtool": 68, "sort": 68, "cryptographi": 69, "geometri": [70, 80, 134, 207], "discret": [71, 240], "transform": [71, 93, 95, 110, 270], "fast": 71, "fourier": [71, 223], "theoret": 71, "walsh": 71, "hadamard": 71, "m\u00f6biu": 71, "convolut": 71, "cover": 71, "product": [71, 173, 184, 241, 271], "intersect": [71, 80], "accuraci": 72, "error": [72, 76], "handl": [72, 239], "sum": 72, "combinatori": 73, "elementari": [74, 207, 226, 228], "trigonometr": [74, 76, 229, 297], "hyperbol": 74, "integ": [74, 210], "exponenti": [74, 76, 297], "piecewis": 74, "dirac": 76, "delta": 76, "discontinu": 76, "gamma": [76, 120], "beta": 76, "fresnel": 76, "logarithm": [76, 297], "bessel": 76, "airi": 76, "b": 76, "spline": 76, "riemann": 76, "zeta": 76, "ellipt": 76, "mathieu": 76, "orthogon": [76, 216, 272], "jacobi": 76, "gegenbau": 76, "chebyshev": 76, "legendr": 76, "hermit": 76, "laguerr": 76, "spheric": 76, "harmon": [76, 161, 186], "curv": 77, "ellips": 78, "entiti": [79, 80, 206], "avail": 80, "usag": [80, 135, 153, 210, 271], "median": 80, "pappu": 80, "hexagon": 80, "theorem": [80, 93, 275], "futur": [80, 123, 135, 194], "truth": [80, 98], "dimens": [80, 187, 190], "beyond": 80, "visual": [80, 152], "line": 81, "plane": [82, 93], "polygon": [84, 95], "about": [86, 239, 270, 298], "holonom": [86, 87, 88, 90, 91, 140], "convert": [87, 90, 210, 286], "represent": [87, 91, 190, 204, 210], "meijer": [87, 90, 93, 230], "g": [87, 90, 93, 230], "intern": [89, 93, 95, 210, 213, 215, 233], "composit": 90, "seri": [90, 206, 217, 222, 223, 224, 227, 287], "expans": [90, 227, 230, 287], "current": 92, "polar": [93, 157], "argand": 93, "tabl": [93, 98, 230], "lookup": 93, "mellin": 93, "converg": 93, "laplac": 93, "thi": [93, 239], "valid": 93, "formula": [93, 230], "todo": 95, "over": [95, 219, 228], "polytop": 95, "For": 95, "2d": 95, "polyhedra": 95, "session": 96, "lie": [97, 236], "equival": [98, 152], "manipul": [98, 104, 125, 212, 213, 216, 217, 239, 292], "infer": 98, "dens": [100, 210, 211, 213], "block": 101, "immutablematrix": 102, "rotat": 104, "numpi": 104, "normal": [105, 219], "spars": [106, 107, 210, 211, 213], "immutablesparsematrix": 106, "ntheori": 108, "ecm": 108, "q": 108, "sub": 109, "ufuncifi": 109, "aesara": [109, 220], "so": 109, "experiment": 110, "mathrm": [110, 296], "runtim": 110, "beam": [111, 112, 114], "bend": 112, "problem": [112, 215, 271], "cabl": [113, 114], "continuum": 114, "truss": [114, 115], "pole": 117, "bode": 117, "impuls": 117, "respons": [117, 220], "step": [117, 239], "ramp": 117, "lti": 119, "high": 120, "energi": [120, 150], "hydrogen": 121, "wavefunct": 121, "potenti": [123, 149, 150, 194, 201, 272], "advanc": [123, 194, 219, 292, 293], "featur": [123, 194, 288], "choic": 123, "acceler": [123, 194, 203, 227], "interfac": [123, 194, 206, 240], "bodi": [124, 130, 150, 275], "framework": [127, 146], "kane": [128, 139, 142, 143, 147, 149], "lagrang": [128, 139, 144, 148, 149], "inertia": [130, 150], "load": [130, 150], "pathwai": 131, "mechanics_print": 132, "mprint": 132, "mpprint": 132, "mlatex": 132, "symbolicsystem": [133, 153], "wrap": 134, "autolev": [135, 152], "dynam": 135, "onlin": 135, "switch": 135, "bicycl": 137, "four": 138, "bar": 138, "linkag": 138, "nonminim": 139, "pendulum": 139, "multi": 140, "degre": 140, "freedom": 140, "roll": [141, 142, 143, 144], "disc": [141, 142, 143, 144], "constraint": 143, "forc": 143, "classic": [145, 213], "jointsmethod": 146, "structur": [147, 148, 190, 233], "background": 149, "directli": [149, 270], "new_method": 149, "kwarg": 149, "a_and_b": 149, "true": 149, "ha": 149, "nan": 149, "zoo": 149, "oo": 149, "further": [149, 289], "mass": [150, 275], "particl": [150, 176], "rigid": 150, "dyadic": [150, 194, 269, 270], "momentum": 150, "angular": [150, 203], "momenta": 150, "kinet": 150, "lagrangian": 150, "user": [152, 233, 236, 237], "rough": 152, "link": 152, "gaussian": [154, 210, 211, 219], "optic": [154, 155], "medium": 156, "wave": 159, "pauli": 160, "quantum": [161, 172, 186], "oscil": [161, 186], "d": [161, 186], "anticommut": 162, "cartesian": 163, "state": [163, 172, 175, 183], "clebsch": 164, "gordan": 164, "coeffici": [164, 213], "circuit": 165, "commut": [166, 207], "dagger": 168, "gate": 169, "grover": 170, "hilbert": 171, "space": [171, 190, 230], "inner": 173, "helper": [175, 220], "box": 176, "qappli": 177, "qft": 178, "qubit": 179, "shor": 181, "spin": 182, "second": 185, "quantiz": 185, "more": [188, 189, 227, 270, 291], "dimension": 188, "analysi": 188, "quantiti": [188, 190, 192, 270], "unit": [189, 190, 191, 193], "philosophi": 190, "behind": 190, "need": 190, "literatur": [190, 214, 219], "prefix": 191, "convers": 192, "referencefram": [194, 204], "dynamicsymbol": 194, "essenti": [195, 197, 265, 268], "field": [196, 201, 210, 213, 215, 219, 272, 274], "kinemat": [199, 203], "kinematic_equ": 199, "scalar": [201, 272, 274], "curl": [201, 272], "diverg": [201, 272, 275], "gradient": [201, 272], "conserv": [201, 272], "solenoid": [201, 272], "veloc": 203, "basi": [204, 213, 215], "wigner": 205, "credit": 205, "copyright": 205, "plotgrid": 206, "pyglet": 206, "mode": 206, "color": 206, "geometr": 206, "ascii": [206, 296], "art": 206, "agca": 207, "ring": [207, 210, 211], "ideal": 207, "homomorph": [207, 215], "syzygi": 207, "extens": [207, 219], "concept": 208, "divis": 208, "factori": 208, "euclidean": 208, "gcd": [208, 213, 219], "lcm": 208, "groebner": [208, 213], "introduc": [209, 210], "domainmatrix": 209, "dup": 210, "dmp": 210, "polyr": 210, "polynomialr": 210, "choos": 210, "unifi": 210, "gf": 211, "p": [211, 215], "zz": 211, "qq": 211, "mpq": 211, "zz_i": 211, "qq_i": 211, "rr": 211, "cc": 211, "k": 211, "x": 211, "ex": 211, "quotient": 211, "level": 213, "multivari": [213, 219], "univari": [213, 219], "remaind": 213, "subresult": 213, "modular": 213, "undocu": 213, "main": 215, "prime": 215, "decomposit": [215, 216, 219], "adic": 215, "valuat": 215, "subfield": 215, "As": 215, "arithmet": 215, "extra": 216, "monomi": 216, "encod": 216, "formal": [216, 222], "appel": 216, "partial": [216, 219, 238, 239], "fraction": [216, 219, 297], "dispers": 216, "rs_seri": 217, "wester": 219, "articl": 219, "simpl": 219, "support": 219, "back": 219, "cyclotom": 219, "gr\u00f6bner": 219, "mistak": 220, "prettyprint": 220, "rcodeprint": 220, "smt": 220, "lib": 220, "mapl": 220, "javascript": 220, "julia": 220, "octav": 220, "matlab": 220, "rust": 220, "gtk": 220, "lambdaprint": 220, "latexprint": 220, "mathmlprint": 220, "pythoncodeprint": 220, "pythonprint": 220, "srepr": [220, 296], "strprinter": 220, "preview": 220, "codeprint": 220, "preced": 220, "dotprint": 220, "subexpress": 221, "detect": 221, "compound": [226, 228, 240], "recurs": [226, 292], "gruntz": 227, "intuit": 227, "residu": 227, "setkind": 228, "hongguang": 229, "fu": 229, "rule": [229, 271], "notat": 230, "increment": 230, "decrement": 230, "indic": 230, "around": 230, "loos": 230, "end": 230, "confluenc": 230, "extend": 230, "heurist": 236, "riccati": 236, "inform": [236, 237], "pde": [237, 238, 239], "deutil": 238, "recurr": 238, "de": [238, 239], "wrong": 239, "why": [239, 291], "we": 239, "emploi": 239, "search": 239, "deal": 239, "where": 239, "known": 239, "plan": 239, "transolv": 239, "continu": [240, 297], "stochast": 240, "dim": [241, 242], "contract": 241, "diagon": [241, 293], "explicit": 242, "pytest": 249, "randomis": 250, "detail": [252, 253, 269], "routin": 253, "decor": 254, "enum": 255, "variat": 258, "memoiz": 260, "pkgdata": 262, "inspect": 263, "time": 264, "orient": [267, 270], "locat": 270, "coordsys3d": 270, "orient_new": 270, "AND": 270, "quadrilater": 271, "third": 271, "del": [271, 272], "curvilinear": 272, "applic": 275, "calcul": 275, "perimet": 275, "surfac": 275, "area": 275, "volum": 275, "flux": 275, "stoke": 275, "introductori": [285, 290], "quick": [286, 287, 289, 292, 293], "two": 289, "final": 289, "understand": 292, "through": 292, "invari": 292, "walk": 292, "prevent": 292, "shape": 293, "access": 293, "row": 293, "column": 293, "insert": 293, "determin": 293, "rref": 293, "nullspac": 293, "columnspac": 293, "eigenvalu": 293, "eigenvector": 293, "next": 294, "preliminari": 295, "exercis": 295, "str": 296, "mathml": 296, "dot": 296, "cancel": 297, "apart": 297, "trigsimp": 297, "expand_trig": 297, "powsimp": 297, "expand_power_exp": 297, "expand_power_bas": 297, "powdenest": 297, "expand_log": 297, "logcombin": 297, "expand_func": 297, "hyperexpand": 297, "combsimp": 297, "gammasimp": 297}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 58}, "alltitles": {"Citing SymPy": [[0, "citing-sympy"]], "Debugging": [[1, "debugging"]], "Dependencies": [[2, "dependencies"]], "Hard Dependencies": [[2, "hard-dependencies"]], "Optional Dependencies": [[2, "optional-dependencies"]], "Recommended Optional Dependencies": [[2, "recommended-optional-dependencies"]], "Interactive Use": [[2, "interactive-use"]], "Printing": [[2, "printing"], [23, "printing"], [96, "module-sympy.interactive.printing"], [123, "printing"], [194, "printing"], [220, "printing"], [296, "printing"]], "Parsing": [[2, "parsing"], [110, "module-sympy.parsing"]], "Logic": [[2, "logic"], [98, "module-sympy.logic"], [276, "logic"], [279, "logic"]], "Plotting": [[2, "plotting"], [206, "module-sympy.plotting.plot"]], "lambdify": [[2, "lambdify"], [286, "lambdify"]], "Code Generation": [[2, "code-generation"], [49, "code-generation"], [276, "code-generation"], [278, "code-generation"]], "Autowrap": [[2, "autowrap"], [49, "autowrap"]], "Code Printers": [[2, "code-printers"]], "Testing-Only Dependencies": [[2, "testing-only-dependencies"]], "Statistics": [[2, "statistics"]], "Optional SymEngine Backend": [[2, "optional-symengine-backend"]], "Sage": [[2, "sage"]], "Development Dependencies": [[2, "development-dependencies"]], "Getting the Source Code": [[2, "getting-the-source-code"]], "Running the Tests": [[2, "running-the-tests"]], "Building the Documentation": [[2, "building-the-documentation"], [8, "building-the-documentation"]], "Running the Benchmarks": [[2, "running-the-benchmarks"]], "Deprecation Policy": [[3, "deprecation-policy"]], "What is a deprecation?": [[3, "what-is-a-deprecation"]], "Try to avoid backwards incompatible changes in the first place": [[3, "try-to-avoid-backwards-incompatible-changes-in-the-first-place"]], "When does a change require deprecation?": [[3, "when-does-a-change-require-deprecation"]], "Public API": [[3, null]], "Not Public API": [[3, null]], "The purpose of deprecation": [[3, "the-purpose-of-deprecation"]], "When it is not technically possible to deprecate": [[3, "when-it-is-not-technically-possible-to-deprecate"]], "How long should deprecations last?": [[3, "how-long-should-deprecations-last"]], "How to deprecate code": [[3, "how-to-deprecate-code"]], "Checklist": [[3, "checklist"]], "Adding the deprecation to the code": [[3, "adding-the-deprecation-to-the-code"]], "Documenting a deprecation": [[3, "documenting-a-deprecation"]], "Release notes entry": [[3, "release-notes-entry"]], "SymPy Docstrings Style Guide": [[4, "sympy-docstrings-style-guide"]], "General Guidelines": [[4, "general-guidelines"], [5, "general-guidelines"]], "Formatting": [[4, "formatting"]], "Sections": [[4, "sections"]], "1. Single-Sentence Summary": [[4, "single-sentence-summary"]], "2. Explanation Section": [[4, "explanation-section"]], "3. Examples Section": [[4, "examples-section"]], "4. Parameters Section": [[4, "parameters-section"]], "5. See Also Section": [[4, "see-also-section"]], "6. References Section": [[4, "references-section"]], "Sample Docstring": [[4, "sample-docstring"]], "Docstrings for Classes that are Mathematical Functions": [[4, "docstrings-for-classes-that-are-mathematical-functions"]], "Best Practices for Writing Docstrings": [[4, "best-practices-for-writing-docstrings"]], "Importing Docstrings into the Sphinx Documentation": [[4, "importing-docstrings-into-the-sphinx-documentation"]], "Cross-Referencing": [[4, "cross-referencing"]], "Docstring Style Guide": [[5, "docstring-style-guide"]], "Types of Documentation": [[5, "types-of-documentation"]], "Narrative Documentation Guidelines": [[5, "narrative-documentation-guidelines"]], "Documentation using Markdown": [[5, "documentation-using-markdown"]], "Best Practices for Writing Documentation": [[5, "best-practices-for-writing-documentation"]], "Formatting Preferences": [[5, "formatting-preferences"]], "Math": [[5, "math"]], "LaTeX Recommendations": [[5, "latex-recommendations"]], "Code": [[5, "code"]], "Headings": [[5, "headings"]], "Style Preferences": [[5, "style-preferences"]], "Spelling and Punctuation": [[5, "spelling-and-punctuation"]], "Capitalization": [[5, "capitalization"]], "Tone Preferences": [[5, "tone-preferences"]], "Contributing": [[6, "contributing"], [38, "contributing"]], "Introduction to Contributing": [[7, "introduction-to-contributing"]], "Get familiar using the software": [[7, "get-familiar-using-the-software"]], "Read the paper": [[7, "read-the-paper"]], "Peruse the documentation": [[7, "peruse-the-documentation"]], "Review the Code of Conduct": [[7, "review-the-code-of-conduct"]], "Join our mailing list": [[7, "join-our-mailing-list"]], "Setup your development environment": [[7, "setup-your-development-environment"]], "Identify something to work on": [[7, "identify-something-to-work-on"]], "SymPy Codebase": [[7, "sympy-codebase"]], "Documentation": [[7, "documentation"], [11, "documentation"]], "Review pull requests": [[7, "review-pull-requests"]], "Required dependencies": [[8, "required-dependencies"]], "Docker": [[8, "docker"], [8, "id2"], [8, "id3"]], "Debian/Ubuntu": [[8, "debian-ubuntu"]], "Fedora": [[8, "fedora"]], "Mac": [[8, "mac"]], "Windows 10": [[8, "windows-10"]], "Build the Docs": [[8, "build-the-docs"]], "Local Installation": [[8, "local-installation"], [8, "id4"]], "View the Docs": [[8, "view-the-docs"]], "Auto-Rebuild with the Live Server": [[8, "auto-rebuild-with-the-live-server"]], "PDF Documentation": [[8, "pdf-documentation"]], "Setup Development Environment": [[9, "setup-development-environment"]], "Install Git": [[9, "install-git"]], "Configure Your Name and Email in Git": [[9, "configure-your-name-and-email-in-git"]], "(Optional) Configure Git Settings": [[9, "optional-configure-git-settings"]], "Setup GitHub": [[9, "setup-github"]], "Create a GitHub Account": [[9, "create-a-github-account"]], "Setup SSH Keys": [[9, "setup-ssh-keys"]], "Fork SymPy": [[9, "fork-sympy"]], "Get the SymPy Code": [[9, "get-the-sympy-code"]], "Virtual Environment Setup": [[9, "virtual-environment-setup"]], "Guide for New Contributors": [[10, "guide-for-new-contributors"]], "Index": [[10, "index"]], "Development Workflow Process": [[11, "development-workflow-process"]], "Checklist for Contributions": [[11, "checklist-for-contributions"]], "Pick an issue to fix": [[11, "pick-an-issue-to-fix"]], "Create a new branch": [[11, "create-a-new-branch"]], "Branch names": [[11, "branch-names"]], "Modify code": [[11, "modify-code"]], "Code Quality": [[11, "code-quality"]], "Add Tests": [[11, "add-tests"]], "Run the Tests": [[11, "run-the-tests"]], "Commit the changes": [[11, "commit-the-changes"]], "Deleting junk files": [[11, "deleting-junk-files"]], "Writing commit messages": [[11, "writing-commit-messages"]], "Example of a good commit message": [[11, "example-of-a-good-commit-message"]], "Co-Author": [[11, "co-author"]], "Make a Pull Request": [[11, "make-a-pull-request"]], "Writing pull request title and description": [[11, "writing-pull-request-title-and-description"]], "Add your name and email address to the .mailmap file.": [[11, "add-your-name-and-email-address-to-the-mailmap-file"]], "Writing Tests": [[12, "writing-tests"]], "Testing Policies": [[12, "testing-policies"]], "Basics for Writing Tests": [[12, "basics-for-writing-tests"]], "Running Tests": [[12, "running-tests"]], "Debugging Test Failures on GitHub Actions": [[12, "debugging-test-failures-on-github-actions"]], "Regression Tests": [[12, "regression-tests"]], "Special Types of Tests": [[12, "special-types-of-tests"]], "Testing Exceptions": [[12, "testing-exceptions"]], "Testing Warnings": [[12, "testing-warnings"]], "Test Deprecated Functionality": [[12, "test-deprecated-functionality"]], "Testing that Something is Unchanged": [[12, "testing-that-something-is-unchanged"]], "Testing Expressions with Dummy": [[12, "testing-expressions-with-dummy"]], "Consistency Checks": [[12, "consistency-checks"]], "Random Tests": [[12, "random-tests"]], "Skipping Tests": [[12, "skipping-tests"]], "Marking Tests as Expected to Fail": [[12, "marking-tests-as-expected-to-fail"]], "Marking Tests as Slow": [[12, "marking-tests-as-slow"]], "Writing Tests with External Dependencies": [[12, "writing-tests-with-external-dependencies"]], "Doctests": [[12, "doctests"]], "Updating Existing Tests": [[12, "updating-existing-tests"]], "Code Quality Checks": [[12, "code-quality-checks"]], "Tests Style Guide": [[12, "tests-style-guide"]], "Test Coverage": [[12, "test-coverage"]], "Hypothesis Testing": [[12, "hypothesis-testing"]], "List of active deprecations": [[13, "list-of-active-deprecations"]], "Silencing SymPy Deprecation Warnings": [[13, "silencing-sympy-deprecation-warnings"]], "Version 1.13": [[13, "version-1-13"]], "Deprecate markers, annotations, fill, rectangles of the Plot class": [[13, "deprecate-markers-annotations-fill-rectangles-of-the-plot-class"]], "Moved mechanics functions": [[13, "moved-mechanics-functions"]], "Version 1.12": [[13, "version-1-12"]], "The ManagedProperties metaclass": [[13, "the-managedproperties-metaclass"]], "New Joint coordinate format": [[13, "new-joint-coordinate-format"]], "New Joint intermediate frames": [[13, "new-joint-intermediate-frames"]], "Change in joint attachment point argument": [[13, "change-in-joint-attachment-point-argument"]], "Version 1.11": [[13, "version-1-11"]], "Modules sympy.tensor.array.expressions.conv_* renamed to sympy.tensor.array.expressions.from_*": [[13, "modules-sympy-tensor-array-expressions-conv-renamed-to-sympy-tensor-array-expressions-from"]], "New Mathematica code parser": [[13, "new-mathematica-code-parser"]], "Redundant static methods in carmichael": [[13, "redundant-static-methods-in-carmichael"]], "The check argument to HadamardProduct, MatAdd and MatMul": [[13, "the-check-argument-to-hadamardproduct-matadd-and-matmul"]], "Version 1.10": [[13, "version-1-10"]], "Some traversal functions have been moved": [[13, "some-traversal-functions-have-been-moved"]], "sympy.core.trace": [[13, "sympy-core-trace"]], "The sympy.core.compatibility submodule": [[13, "the-sympy-core-compatibility-submodule"]], "Version 1.9": [[13, "version-1-9"]], "expr_free_symbols": [[13, "expr-free-symbols"]], "sympy.stats.sample(numsamples=n)": [[13, "sympy-stats-sample-numsamples-n"]], "sympy.polys.solvers.RawMatrix": [[13, "sympy-polys-solvers-rawmatrix"]], "Non-Expr objects in a Matrix": [[13, "non-expr-objects-in-a-matrix"]], "The get_segments attribute of plotting objects": [[13, "the-get-segments-attribute-of-plotting-objects"]], "The mdft function in sympy.physics.matrices": [[13, "the-mdft-function-in-sympy-physics-matrices"]], "The private SparseMatrix._smat and DenseMatrix._mat attributes": [[13, "the-private-sparsematrix-smat-and-densematrix-mat-attributes"]], "laplace_transform of a Matrix with noconds=False": [[13, "laplace-transform-of-a-matrix-with-noconds-false"]], "Version 1.8": [[13, "version-1-8"]], "sympy.printing.theanocode": [[13, "sympy-printing-theanocode"]], "sympy.assumptions.handlers.AskHandler and related methods": [[13, "sympy-assumptions-handlers-askhandler-and-related-methods"]], "Version 1.7.1": [[13, "version-1-7-1"]], "Calling sympy.stats.StochasticProcess.distribution with RandomIndexedSymbol": [[13, "calling-sympy-stats-stochasticprocess-distribution-with-randomindexedsymbol"]], "Version 1.7": [[13, "version-1-7"]], "sympy.stats.DiscreteMarkovChain.absorbing_probabilites()": [[13, "sympy-stats-discretemarkovchain-absorbing-probabilites"]], "sympy.utilities.misc.find_executable()": [[13, "sympy-utilities-misc-find-executable"]], "Mutable attributes in sympy.diffgeom": [[13, "mutable-attributes-in-sympy-diffgeom"]], "The unicode argument and attribute to sympy.printing.pretty.stringpict.prettyForm and the sympy.printing.pretty.pretty_symbology.xstr function": [[13, "the-unicode-argument-and-attribute-to-sympy-printing-pretty-stringpict-prettyform-and-the-sympy-printing-pretty-pretty-symbology-xstr-function"]], "Passing the arguments to lambdify as a set": [[13, "passing-the-arguments-to-lambdify-as-a-set"]], "Core operators no longer accept non-Expr args": [[13, "core-operators-no-longer-accept-non-expr-args"]], "Version 1.6": [[13, "version-1-6"]], "Various sympy.utilities submodules have moved": [[13, "various-sympy-utilities-submodules-have-moved"]], "sympy.testing.randtest": [[13, "sympy-testing-randtest"]], "Mixing Poly and non-polynomial expressions in binary operations": [[13, "mixing-poly-and-non-polynomial-expressions-in-binary-operations"]], "The print_cyclic flag of sympy.combinatorics.Permutation": [[13, "the-print-cyclic-flag-of-sympy-combinatorics-permutation"]], "Using integrate with Poly": [[13, "using-integrate-with-poly"]], "The string fallback in sympify()": [[13, "the-string-fallback-in-sympify"]], "Creating an indefinite Integral with an Eq argument": [[13, "creating-an-indefinite-integral-with-an-eq-argument"]], "Version 1.5": [[13, "version-1-5"]], "Tensor.fun_eval and Tensor.__call__": [[13, "tensor-fun-eval-and-tensor-call"]], "TensorType": [[13, "tensortype"]], "The dummy_fmt argument to TensorIndexType": [[13, "the-dummy-fmt-argument-to-tensorindextype"]], "The metric argument to TensorIndexType": [[13, "the-metric-argument-to-tensorindextype"]], "The get_kronecker_delta() and get_epsilon() methods of TensorIndexType": [[13, "the-get-kronecker-delta-and-get-epsilon-methods-of-tensorindextype"]], "The tensorsymmetry() function": [[13, "the-tensorsymmetry-function"]], "The tensorhead() function": [[13, "the-tensorhead-function"]], "The is_EmptySet attribute of sets": [[13, "the-is-emptyset-attribute-of-sets"]], "ProductSet(iterable)": [[13, "productset-iterable"]], "The set_potential_energy method in sympy.physics.mechanics": [[13, "the-set-potential-energy-method-in-sympy-physics-mechanics"]], "Using a set for the condition in ConditionSet": [[13, "using-a-set-for-the-condition-in-conditionset"]], "The max_degree and get_upper_degree properties of sympy.polys.multivariate_resultants.DixonResultant": [[13, "the-max-degree-and-get-upper-degree-properties-of-sympy-polys-multivariate-resultants-dixonresultant"]], "Non-tuple iterable for the first argument to Lambda": [[13, "non-tuple-iterable-for-the-first-argument-to-lambda"]], "The evaluate flag to differentiate_finite": [[13, "the-evaluate-flag-to-differentiate-finite"]], "Version 1.4": [[13, "version-1-4"]], "TensorIndexType.data and related methods": [[13, "tensorindextype-data-and-related-methods"]], "Glossary": [[14, "glossary"]], "Gotchas and Pitfalls": [[15, "gotchas-and-pitfalls"]], "Introduction": [[15, "introduction"], [19, "introduction"], [41, "introduction"], [48, "introduction"], [49, "introduction"], [50, "introduction"], [58, "introduction"], [70, "introduction"], [80, "introduction"], [98, "introduction"], [135, "introduction"], [152, "introduction"], [190, "introduction"], [201, "introduction"], [206, "introduction"], [207, "introduction"], [208, "introduction"], [215, "introduction"], [219, "introduction"], [274, "introduction"], [291, "introduction"]], "Equals Signs (=)": [[15, "equals-signs"]], "Single Equals Sign": [[15, "single-equals-sign"]], "Double Equals Signs": [[15, "double-equals-signs"]], "Variables": [[15, "variables"]], "Variables Assignment does not Create a Relation Between Expressions": [[15, "variables-assignment-does-not-create-a-relation-between-expressions"]], "Symbols": [[15, "symbols"], [289, "symbols"]], "Functions": [[15, "functions"], [75, "functions"], [241, "functions"]], "Symbolic Expressions": [[15, "symbolic-expressions"]], "Python numbers vs. SymPy Numbers": [[15, "python-numbers-vs-sympy-numbers"]], "Evaluating Expressions with Floats and Rationals": [[15, "evaluating-expressions-with-floats-and-rationals"]], "Immutability of Expressions": [[15, "immutability-of-expressions"]], "Mathematical Operators": [[15, "mathematical-operators"]], "Inverse Trig Functions": [[15, "inverse-trig-functions"]], "Sqrt is not a Function": [[15, "sqrt-is-not-a-function"]], "Special Symbols": [[15, "special-symbols"]], "Lists": [[15, "lists"]], "Dictionaries": [[15, "dictionaries"]], "Tuples": [[15, "tuples"]], "Keyword Arguments": [[15, "keyword-arguments"]], "Getting help from within SymPy": [[15, "getting-help-from-within-sympy"]], "help()": [[15, "help"]], "Explanations": [[16, "explanations"], [38, "explanations"]], "Solve Output by Type": [[17, "solve-output-by-type"]], "Empty List": [[17, "empty-list"]], "List Of Values": [[17, "list-of-values"]], "Single Dictionary": [[17, "single-dictionary"]], "List of Tuples": [[17, "list-of-tuples"]], "List of Dictionaries": [[17, "list-of-dictionaries"]], "Boolean or Relational": [[17, "boolean-or-relational"]], "Classification of SymPy objects": [[18, "classification-of-sympy-objects"]], "class": [[18, "class"]], "kind": [[18, "kind"], [68, "module-sympy.core.kind"]], "sets and assumptions": [[18, "sets-and-assumptions"]], "func": [[18, "func"], [292, "func"]], "Finite Difference Approximations to Derivatives": [[19, "finite-difference-approximations-to-derivatives"]], "A Direct Method Using SymPy Matrices": [[19, "a-direct-method-using-sympy-matrices"]], "SymPy Special Topics": [[20, "sympy-special-topics"]], "Assumptions": [[21, "assumptions"], [23, "assumptions"], [44, "module-sympy.assumptions"]], "The (old) assumptions system": [[21, "the-old-assumptions-system"]], "Gotcha: symbols with different assumptions": [[21, "gotcha-symbols-with-different-assumptions"]], "Applying assumptions to string inputs": [[21, "applying-assumptions-to-string-inputs"]], "Predicates": [[21, "predicates"], [45, "id1"]], "Assumptions predicates for the (old) assumptions": [[21, "id28"]], "References for the above definitions": [[21, "references-for-the-above-definitions"]], "Implications": [[21, "implications"]], "Interpretation of the predicates": [[21, "interpretation-of-the-predicates"]], "Other is_* properties": [[21, "other-is-properties"]], "Implementing assumptions handlers": [[21, "implementing-assumptions-handlers"]], "Mechanism of the assumptions system": [[21, "mechanism-of-the-assumptions-system"]], "Limitations": [[21, "limitations"], [31, "limitations"], [92, "limitations"]], "Combining predicates with or": [[21, "combining-predicates-with-or"]], "Relations between different symbols": [[21, "relations-between-different-symbols"]], "Symbolic and fuzzy booleans": [[22, "symbolic-and-fuzzy-booleans"]], "Symbolic Boolean vs three valued bool": [[22, "symbolic-boolean-vs-three-valued-bool"]], "Three-valued logic with fuzzy bools": [[22, "three-valued-logic-with-fuzzy-bools"]], "Three-valued logic with symbolic Booleans": [[22, "three-valued-logic-with-symbolic-booleans"]], "Writing Custom Functions": [[23, "writing-custom-functions"]], "Easy Cases: Fully Symbolic or Fully Evaluated": [[23, "easy-cases-fully-symbolic-or-fully-evaluated"]], "The Fully Symbolic Case": [[23, "the-fully-symbolic-case"]], "The Fully Evaluated Case": [[23, "the-fully-evaluated-case"]], "Creating a Custom Function": [[23, "creating-a-custom-function"]], "Defining Automatic Evaluation with eval()": [[23, "defining-automatic-evaluation-with-eval"]], "Reminder": [[23, null]], "Best Practices for eval()": [[23, "best-practices-for-eval"]], "Key Point": [[23, null]], "Note": [[23, null]], "Numerical Evaluation with evalf()": [[23, "numerical-evaluation-with-evalf"]], "Rewriting and Simplification": [[23, "rewriting-and-simplification"]], "rewrite()": [[23, "rewrite"]], "doit()": [[23, "doit"]], "expand()": [[23, "expand"]], "Differentiation": [[23, "differentiation"]], "Other Methods": [[23, "other-methods"], [39, "other-methods"]], "inverse()": [[23, "inverse"]], "as_real_imag()": [[23, "as-real-imag"]], "Miscellaneous _eval_* methods": [[23, "miscellaneous-eval-methods"]], "Complete Examples": [[23, "complete-examples"]], "Versine": [[23, "versine"]], "Definition": [[23, "definition"], [23, "id2"], [23, "id4"], [86, "definition"]], "Examples": [[23, "examples"], [23, "id3"], [23, "id5"], [30, "examples"], [40, "examples"], [68, "examples"], [68, "id48"], [92, "examples"], [95, "examples"], [95, "id38"], [108, "examples"], [108, "id76"], [112, "examples"], [120, "examples"], [157, "examples"], [189, "examples"], [204, "examples"], [204, "id1"], [219, "examples"], [227, "examples"], [227, "id3"], [240, "examples"], [241, "examples"], [242, "examples"], [245, "examples"]], "divides": [[23, "divides"]], "Fused Multiply-Add (FMA)": [[23, "fused-multiply-add-fma"]], "Additional Tips": [[23, "additional-tips"]], "How-to Guides": [[24, "how-to-guides"], [38, "how-to-guides"]], "SymPy Logo": [[25, "sympy-logo"]], "Control Package Examples": [[26, "control-package-examples"]], "Example 1": [[26, "example-1"], [112, "example-1"]], "Example 2": [[26, "example-2"], [112, "example-2"]], "Example 3": [[26, "example-3"], [112, "example-3"]], "Example 4": [[26, "example-4"], [112, "example-4"]], "Example 5": [[26, "example-5"], [112, "example-5"]], "References": [[26, "references"], [51, "references"], [68, "references"], [80, "references"], [86, "references"], [95, "references"], [157, "references"], [160, "references"], [205, "references"], [229, "references"], [230, "references"], [233, "references"], [239, "references"]], "Physics": [[27, "physics"], [276, "physics"], [282, "module-sympy.physics"]], "Find the Roots of a Polynomial Algebraically or Numerically": [[28, "find-the-roots-of-a-polynomial-algebraically-or-numerically"]], "Alternatives to Consider": [[28, "alternatives-to-consider"], [30, "alternatives-to-consider"], [31, "alternatives-to-consider"], [33, "alternatives-to-consider"], [34, "alternatives-to-consider"], [35, "alternatives-to-consider"], [36, "alternatives-to-consider"]], "Example of Finding the Roots of a Polynomial Algebraically": [[28, "example-of-finding-the-roots-of-a-polynomial-algebraically"]], "Functions to Find the Roots of a Polynomial": [[28, "functions-to-find-the-roots-of-a-polynomial"]], "Guidance": [[28, "guidance"], [30, "guidance"], [31, "guidance"], [32, "guidance"], [33, "guidance"], [34, "guidance"], [35, "guidance"], [36, "guidance"]], "Find the Roots of a Polynomial": [[28, "find-the-roots-of-a-polynomial"]], "Algebraic Solution Without Root Multiplicities": [[28, "algebraic-solution-without-root-multiplicities"]], "Algebraic Solution With Root Multiplicities": [[28, "algebraic-solution-with-root-multiplicities"]], "roots": [[28, "roots"]], "Factor the Equation": [[28, "factor-the-equation"]], "Exact Numeric Solution With Root Multiplicities": [[28, "exact-numeric-solution-with-root-multiplicities"]], "real_roots": [[28, "real-roots"]], "Approximate Numeric Solution With Root Multiplicities": [[28, "approximate-numeric-solution-with-root-multiplicities"]], "nroots": [[28, "nroots"]], "Complex Roots": [[28, "complex-roots"]], "Use the Solution Result": [[28, "use-the-solution-result"], [31, "use-the-solution-result"], [32, "use-the-solution-result"], [33, "use-the-solution-result"], [34, "use-the-solution-result"], [35, "use-the-solution-result"]], "List (all_roots, real_roots, nroots)": [[28, "list-all-roots-real-roots-nroots"]], "List of dictionaries (solve)": [[28, "list-of-dictionaries-solve"]], "Dictionary (roots)": [[28, "dictionary-roots"]], "Expression (factor)": [[28, "expression-factor"]], "Tradeoffs": [[28, "tradeoffs"]], "Mathematical Exactness, Completeness of List of Roots, and Speed": [[28, "mathematical-exactness-completeness-of-list-of-roots-and-speed"]], "Get All Roots, Perhaps Implicitly": [[28, "get-all-roots-perhaps-implicitly"]], "Numerically Evaluate CRootOf Roots": [[28, "numerically-evaluate-crootof-roots"]], "Representing Roots": [[28, "representing-roots"]], "Not All Equations Can Be Solved": [[28, "not-all-equations-can-be-solved"], [31, "not-all-equations-can-be-solved"], [32, "not-all-equations-can-be-solved"], [35, "not-all-equations-can-be-solved"]], "Equations With No Closed-Form Solution": [[28, "equations-with-no-closed-form-solution"], [32, "equations-with-no-closed-form-solution"], [35, "equations-with-no-closed-form-solution"]], "Report a Bug": [[28, "report-a-bug"], [30, "report-a-bug"], [31, "report-a-bug"], [32, "report-a-bug"], [33, "report-a-bug"], [34, "report-a-bug"], [35, "report-a-bug"], [36, "report-a-bug"], [37, "report-a-bug"]], "Solve Equations": [[29, "solve-equations"]], "Reduce One or a System of Inequalities for a Single Variable Algebraically": [[30, "reduce-one-or-a-system-of-inequalities-for-a-single-variable-algebraically"]], "Reducing a System of Inequalities for a Single Variable Algebraically": [[30, "reducing-a-system-of-inequalities-for-a-single-variable-algebraically"]], "Reducing One Inequality for a Single Variable Algebraically": [[30, "reducing-one-inequality-for-a-single-variable-algebraically"]], "Include the Variable to Be Reduced for in the Function Call": [[30, "include-the-variable-to-be-reduced-for-in-the-function-call"]], "Reduce a System of Inequalities Algebraically": [[30, "reduce-a-system-of-inequalities-algebraically"]], "Use the Result": [[30, "use-the-result"]], "Extract a List of Decomposed Relations": [[30, "extract-a-list-of-decomposed-relations"]], "Extract a Tuple of Relations": [[30, "extract-a-tuple-of-relations"]], "Limitations of Inequality Reduction Using SymPy": [[30, "limitations-of-inequality-reduction-using-sympy"]], "SymPy Can Reduce for Only One Symbol of Interest Per Inequality": [[30, "sympy-can-reduce-for-only-one-symbol-of-interest-per-inequality"]], "Limitations on Types of Inequalities That SymPy Can Solve": [[30, "limitations-on-types-of-inequalities-that-sympy-can-solve"]], "Not All Results Are Returned for Periodic Functions": [[30, "not-all-results-are-returned-for-periodic-functions"]], "Not All Systems of Inequalities Can Be Reduced": [[30, "not-all-systems-of-inequalities-can-be-reduced"]], "Systems of Inequalities Which Cannot Be Satisfied": [[30, "systems-of-inequalities-which-cannot-be-satisfied"]], "Systems of Inequalities That Cannot Be Reduced Analytically": [[30, "systems-of-inequalities-that-cannot-be-reduced-analytically"]], "Inequalities Which Can Be Reduced Analytically, and SymPy Cannot Reduce": [[30, "inequalities-which-can-be-reduced-analytically-and-sympy-cannot-reduce"]], "Solve a Diophantine Equation Algebraically": [[31, "solve-a-diophantine-equation-algebraically"]], "Example of Solving a Diophantine Equation": [[31, "example-of-solving-a-diophantine-equation"]], "Diophantine Equation Can be Expressed as Expression That Equals Zero": [[31, "diophantine-equation-can-be-expressed-as-expression-that-equals-zero"]], "Specify the Order of Symbols in the Result": [[31, "specify-the-order-of-symbols-in-the-result"]], "Extract Expressions From the Result": [[31, "extract-expressions-from-the-result"]], "Work With Parameters": [[31, "work-with-parameters"]], "Verify a Solution": [[31, "verify-a-solution"]], "Programmatically Extract Parameter Symbols": [[31, "programmatically-extract-parameter-symbols"]], "Equations With No Solution": [[31, "equations-with-no-solution"], [33, "equations-with-no-solution"], [35, "equations-with-no-solution"]], "Solve an Equation Algebraically": [[32, "solve-an-equation-algebraically"], [32, "id1"]], "Alternatives to consider": [[32, "alternatives-to-consider"]], "Solving Functions": [[32, "solving-functions"]], "Make Your Equation Into an Expression That Equals Zero": [[32, "make-your-equation-into-an-expression-that-equals-zero"]], "Put Your Equation Into Eq Form": [[32, "put-your-equation-into-eq-form"]], "Restrict the Domain of Solutions": [[32, "restrict-the-domain-of-solutions"]], "Explicitly Represent Infinite Sets of Possible Solutions": [[32, "explicitly-represent-infinite-sets-of-possible-solutions"]], "Substitute Solutions From solve() Into an Expression": [[32, "substitute-solutions-from-solve-into-an-expression"]], "solveset() Solution Sets Cannot Necessarily Be Interrogated Programmatically": [[32, "solveset-solution-sets-cannot-necessarily-be-interrogated-programmatically"]], "Options That Can Speed up solve()": [[32, "options-that-can-speed-up-solve"], [36, "options-that-can-speed-up-solve"], [37, "options-that-can-speed-up-solve"]], "Equations Which Have a Closed-Form Solution, and SymPy Cannot Solve": [[32, "equations-which-have-a-closed-form-solution-and-sympy-cannot-solve"], [36, "equations-which-have-a-closed-form-solution-and-sympy-cannot-solve"]], "Solve a Matrix Equation Algebraically": [[33, "solve-a-matrix-equation-algebraically"]], "Solve a Matrix Equation": [[33, "solve-a-matrix-equation"]], "Matrix Usually Must Be Square": [[33, "matrix-usually-must-be-square"]], "Methods for Solving Matrix Equations": [[33, "methods-for-solving-matrix-equations"]], "Solving Several Matrix Equations With the Same Matrix": [[33, "solving-several-matrix-equations-with-the-same-matrix"]], "Work With Symbolic Matrices": [[33, "work-with-symbolic-matrices"]], "Speed up Solving Matrix Equations": [[33, "speed-up-solving-matrix-equations"]], "Use the Solution as a Vector": [[33, "use-the-solution-as-a-vector"]], "Extract Elements From the Solution": [[33, "extract-elements-from-the-solution"]], "Solve One or a System of Equations Numerically": [[34, "solve-one-or-a-system-of-equations-numerically"]], "Example of Numerically Solving an Equation": [[34, "example-of-numerically-solving-an-equation"]], "Find Complex Roots of a Real Function": [[34, "find-complex-roots-of-a-real-function"]], "Ensure the Root Found is in a Given Interval": [[34, "ensure-the-root-found-is-in-a-given-interval"]], "Solve a System of Equations Numerically": [[34, "solve-a-system-of-equations-numerically"]], "Increase Precision of the Solution": [[34, "increase-precision-of-the-solution"]], "Create a Function That Can Be Solved With SciPy": [[34, "create-a-function-that-can-be-solved-with-scipy"]], "Substitute the Result Into an Expression": [[34, "substitute-the-result-into-an-expression"]], "Not all Equations Can be Solved": [[34, "not-all-equations-can-be-solved"]], "Equations With no Solution": [[34, "equations-with-no-solution"]], "Solve an Ordinary Differential Equation (ODE) Algebraically": [[35, "solve-an-ordinary-differential-equation-ode-algebraically"]], "Solve an Ordinary Differential Equation (ODE)": [[35, "solve-an-ordinary-differential-equation-ode"]], "Defining Derivatives": [[35, "defining-derivatives"]], "Options to Define an ODE": [[35, "options-to-define-an-ode"]], "Option 1: Define a Function Without Including Its Independent Variable": [[35, "option-1-define-a-function-without-including-its-independent-variable"]], "Specify Initial Conditions or Boundary Conditions": [[35, "specify-initial-conditions-or-boundary-conditions"], [35, "id1"]], "Option 2: Define a Function of an Independent Variable": [[35, "option-2-define-a-function-of-an-independent-variable"]], "Beware Copying and Pasting Results": [[35, "beware-copying-and-pasting-results"]], "Extract the Result for One Solution and Function": [[35, "extract-the-result-for-one-solution-and-function"]], "Some ODEs Cannot Be Solved Explicitly, Only Implicitly": [[35, "some-odes-cannot-be-solved-explicitly-only-implicitly"]], "Extract the Result for Multiple Function-Solution Pairs": [[35, "extract-the-result-for-multiple-function-solution-pairs"]], "If There is One Solution Set": [[35, "if-there-is-one-solution-set"]], "If There are Multiple Solution Sets": [[35, "if-there-are-multiple-solution-sets"]], "Work With Arbitrary Constants": [[35, "work-with-arbitrary-constants"]], "Numerically Solve an ODE in SciPy": [[35, "numerically-solve-an-ode-in-scipy"]], "Ordinary Differential Equation Solving Hints": [[35, "ordinary-differential-equation-solving-hints"]], "Return Unevaluated Integrals": [[35, "return-unevaluated-integrals"]], "Select a Specific Solver": [[35, "select-a-specific-solver"]], "Solve a System of Equations Algebraically": [[36, "solve-a-system-of-equations-algebraically"]], "Examples of Solving a System of Equations Algebraically": [[36, "examples-of-solving-a-system-of-equations-algebraically"]], "Solve a System of Linear Equations Algebraically": [[36, "solve-a-system-of-linear-equations-algebraically"]], "Solve a System of Nonlinear Equations Algebraically": [[36, "solve-a-system-of-nonlinear-equations-algebraically"]], "Solve and Use Results in a Dictionary": [[36, "solve-and-use-results-in-a-dictionary"]], "Solve Into a Solution Given as a Dictionary": [[36, "solve-into-a-solution-given-as-a-dictionary"]], "Use a Solution Given as a Dictionary": [[36, "use-a-solution-given-as-a-dictionary"]], "Solve Results in a Set": [[36, "solve-results-in-a-set"]], "Not All Systems of Equations Can be Solved": [[36, "not-all-systems-of-equations-can-be-solved"]], "Systems of Equations With no Solution": [[36, "systems-of-equations-with-no-solution"]], "Systems of Equations With no Closed-Form Solution": [[36, "systems-of-equations-with-no-closed-form-solution"]], "Solving Guidance": [[37, "solving-guidance"]], "Numeric Solutions": [[37, "numeric-solutions"]], "Equations With no Closed-Form Solution": [[37, "equations-with-no-closed-form-solution"]], "When You Might Prefer a Numeric Solution": [[37, "when-you-might-prefer-a-numeric-solution"]], "Use Exact Values": [[37, "use-exact-values"]], "Include the Variable to be Solved for in the Function Call": [[37, "include-the-variable-to-be-solved-for-in-the-function-call"]], "Ensure Consistent Formatting From solve()": [[37, "ensure-consistent-formatting-from-solve"]], "Include Solutions Making Any Denominator Zero": [[37, "include-solutions-making-any-denominator-zero"]], "Do Not Simplify Solutions": [[37, "do-not-simplify-solutions"]], "Parse a String Representing the Equation": [[37, "parse-a-string-representing-the-equation"]], "Welcome to SymPy\u2019s documentation!": [[38, "welcome-to-sympy-s-documentation"]], "Installation": [[38, "installation"], [39, "installation"], [295, "installation"]], "Tutorials": [[38, "tutorials"], [285, "tutorials"]], "API Reference": [[38, "api-reference"], [252, "module-sympy.utilities.autowrap"], [253, "module-sympy.utilities.codegen"], [276, "api-reference"]], "Anaconda": [[39, "anaconda"]], "Git": [[39, "git"]], "Run SymPy": [[39, "run-sympy"]], "mpmath": [[39, "mpmath"]], "Questions": [[39, "questions"]], "abc": [[40, "module-sympy.abc"]], "Caveats": [[40, "caveats"]], "Algebras": [[41, "algebras"]], "Quaternion Reference": [[41, "module-sympy.algebras"]], "Ask": [[42, "module-sympy.assumptions.ask"]], "Assume": [[43, "module-sympy.assumptions.assume"]], "Predicate": [[44, "predicate"]], "Querying": [[44, "querying"]], "Contents": [[44, "contents"], [55, "contents"], [75, "contents"], [88, "contents"], [94, "contents"], [212, "contents"], [224, "contents"], [234, "contents"], [243, "contents"]], "Performance improvements": [[44, "performance-improvements"]], "Misc": [[44, "misc"]], "Common": [[45, "common"]], "Calculus": [[45, "calculus"], [47, "module-sympy.calculus"], [287, "calculus"]], "Matrix": [[45, "matrix"]], "Number Theory": [[45, "number-theory"], [108, "module-sympy.ntheory.generate"], [276, "number-theory"], [281, "number-theory"]], "Order": [[45, "order"]], "Sets": [[45, "sets"], [228, "sets"]], "Refine": [[46, "module-sympy.assumptions.refine"]], "Singularities": [[47, "singularities"]], "Finite difference weights": [[47, "finite-difference-weights"]], "Category Theory": [[48, "category-theory"]], "Base Class Reference": [[48, "module-sympy.categories"], [70, "base-class-reference"]], "Diagram Drawing": [[48, "module-sympy.categories.diagram_drawing"]], "Code printers (sympy.printing)": [[49, "code-printers-sympy-printing"]], "Codegen (sympy.utilities.codegen)": [[49, "codegen-sympy-utilities-codegen"]], "Classes and functions for rewriting expressions (sympy.codegen.rewriting)": [[49, "module-sympy.codegen.rewriting"]], "Tools for simplifying expressions using approximations (sympy.codegen.approximations)": [[49, "module-sympy.codegen.approximations"]], "Classes for abstract syntax trees (sympy.codegen.ast)": [[49, "module-sympy.codegen.ast"]], "AST Type Tree": [[49, "ast-type-tree"]], "Predefined types": [[49, "predefined-types"]], "Using the nodes": [[49, "using-the-nodes"]], "Special C math functions (sympy.codegen.cfunctions)": [[49, "module-sympy.codegen.cfunctions"]], "C specific AST nodes (sympy.codegen.cnodes)": [[49, "module-sympy.codegen.cnodes"]], "C++ specific AST nodes (sympy.codegen.cxxnodes)": [[49, "module-sympy.codegen.cxxnodes"]], "Fortran specific AST nodes (sympy.codegen.fnodes)": [[49, "module-sympy.codegen.fnodes"]], "Algorithms (sympy.codegen.algorithms)": [[49, "module-sympy.codegen.algorithms"]], "Python utilities (sympy.codegen.pyutils)": [[49, "module-sympy.codegen.pyutils"]], "C utilities (sympy.codegen.cutils)": [[49, "module-sympy.codegen.cutils"]], "Fortran utilities (sympy.codegen.futils)": [[49, "module-sympy.codegen.futils"]], "Finitely Presented Groups": [[50, "finitely-presented-groups"]], "Overview of Facilities": [[50, "overview-of-facilities"]], "The Construction of Finitely Presented Groups": [[50, "the-construction-of-finitely-presented-groups"]], "Free Groups and Words": [[50, "free-groups-and-words"]], "Construction of a Free Group": [[50, "construction-of-a-free-group"]], "Construction of words": [[50, "construction-of-words"]], "Coset Enumeration: The Todd-Coxeter Algorithm": [[50, "coset-enumeration-the-todd-coxeter-algorithm"]], "CosetTable": [[50, "cosettable"]], "Attributes of CosetTable": [[50, "attributes-of-cosettable"]], "Compression and Standardization": [[50, "compression-and-standardization"]], "Subgroups of Finite Index": [[50, "subgroups-of-finite-index"]], "Low Index Subgroups": [[50, "low-index-subgroups"]], "Constructing a presentation for a subgroup": [[50, "constructing-a-presentation-for-a-subgroup"]], "Reidemeister Schreier algorithm": [[50, "reidemeister-schreier-algorithm"]], "Bibliography": [[50, "bibliography"], [58, "bibliography"]], "Galois Groups": [[51, "module-sympy.combinatorics.galois"], [215, "galois-groups"]], "Gray Code": [[52, "module-sympy.combinatorics.graycode"]], "Group constructors": [[53, "module-sympy.combinatorics.group_constructs"]], "Nilpotent, Abelian and Cyclic Numbers": [[54, "module-sympy.combinatorics.group_numbers"]], "Combinatorics": [[55, "combinatorics"]], "Named Groups": [[56, "module-sympy.combinatorics.named_groups"]], "Partitions": [[57, "module-sympy.combinatorics.partitions"]], "Polycyclic Groups": [[58, "polycyclic-groups"]], "Overview of functionalities": [[58, "overview-of-functionalities"]], "The Construction of Polycyclic Groups": [[58, "the-construction-of-polycyclic-groups"]], "Attributes of PolycyclicGroup": [[58, "attributes-of-polycyclicgroup"]], "The Construction of Collector": [[58, "the-construction-of-collector"]], "Attributes of Collector": [[58, "attributes-of-collector"]], "Computation of Minimal Uncollected Subword": [[58, "computation-of-minimal-uncollected-subword"]], "Computation of Subword Index": [[58, "computation-of-subword-index"]], "Computation of Collected Word": [[58, "computation-of-collected-word"]], "Computation of Polycyclic Presentation": [[58, "computation-of-polycyclic-presentation"]], "Computation of Exponent Vector": [[58, "computation-of-exponent-vector"]], "Depth of Polycyclic generator": [[58, "depth-of-polycyclic-generator"]], "Computation of Leading Exponent": [[58, "computation-of-leading-exponent"]], "Permutation Groups": [[59, "module-sympy.combinatorics.perm_groups"]], "Permutations": [[60, "module-sympy.combinatorics.permutations"]], "Generators": [[60, "module-sympy.combinatorics.generators"]], "Polyhedron": [[61, "module-sympy.combinatorics.polyhedron"]], "Prufer Sequences": [[62, "module-sympy.combinatorics.prufer"]], "Subsets": [[63, "module-sympy.combinatorics.subsets"]], "Tensor Canonicalization": [[64, "module-sympy.combinatorics.tensor_can"]], "Test Utilities": [[65, "module-sympy.combinatorics.testutil"]], "Utilities": [[66, "module-sympy.combinatorics.util"], [158, "module-sympy.physics.optics.utils"], [215, "utilities"], [257, "module-sympy.utilities"], [276, "utilities"], [284, "utilities"]], "Concrete": [[67, "concrete"]], "Hypergeometric terms": [[67, "hypergeometric-terms"]], "Concrete Class Reference": [[67, "concrete-class-reference"]], "Concrete Functions Reference": [[67, "concrete-functions-reference"]], "Core": [[68, "core"]], "sympify": [[68, "module-sympy.core.sympify"]], "assumptions": [[68, "module-sympy.core.assumptions"]], "See Also": [[68, "see-also"], [258, "see-also"]], "Notes": [[68, "notes"], [227, "notes"], [229, "notes"]], "Developers Notes": [[68, "developers-notes"]], "cache": [[68, "module-sympy.core.cache"]], "basic": [[68, "module-sympy.core.basic"]], "singleton": [[68, "module-sympy.core.singleton"]], "expr": [[68, "module-sympy.core.expr"]], "symbol": [[68, "module-sympy.core.symbol"]], "numbers": [[68, "module-sympy.core.numbers"]], "power": [[68, "module-sympy.core.power"]], "mul": [[68, "module-sympy.core.mul"]], "add": [[68, "module-sympy.core.add"]], "mod": [[68, "module-sympy.core.mod"]], "relational": [[68, "module-sympy.core.relational"]], "multidimensional": [[68, "module-sympy.core.multidimensional"]], "function": [[68, "module-sympy.core.function"]], "evalf": [[68, "module-sympy.core.evalf"], [286, "evalf"]], "containers": [[68, "module-sympy.core.containers"]], "exprtools": [[68, "module-sympy.core.exprtools"]], "Sorting": [[68, "sorting"]], "Random": [[68, "module-sympy.core.random"]], "Traversal": [[68, "module-sympy.core.traversal"]], "Cryptography": [[69, "cryptography"]], "Differential Geometry": [[70, "module-sympy.diffgeom"]], "Discrete": [[71, "discrete"]], "Transforms": [[71, "module-sympy.discrete.transforms"]], "Fast Fourier Transform": [[71, "fast-fourier-transform"]], "Number Theoretic Transform": [[71, "number-theoretic-transform"]], "Fast Walsh Hadamard Transform": [[71, "fast-walsh-hadamard-transform"]], "M\u00f6bius Transform": [[71, "mobius-transform"]], "Convolutions": [[71, "module-sympy.discrete.convolutions"]], "Convolution": [[71, "convolution"]], "Convolution using Fast Fourier Transform": [[71, "convolution-using-fast-fourier-transform"]], "Convolution using Number Theoretic Transform": [[71, "convolution-using-number-theoretic-transform"]], "Convolution using Fast Walsh Hadamard Transform": [[71, "convolution-using-fast-walsh-hadamard-transform"]], "Subset Convolution": [[71, "subset-convolution"]], "Covering Product": [[71, "covering-product"]], "Intersecting Product": [[71, "intersecting-product"]], "Numerical Evaluation": [[72, "numerical-evaluation"]], "Basics": [[72, "basics"], [276, "basics"], [277, "basics"]], "Floating-point numbers": [[72, "floating-point-numbers"]], "Accuracy and error handling": [[72, "accuracy-and-error-handling"]], "Sums and integrals": [[72, "sums-and-integrals"]], "Numerical simplification": [[72, "numerical-simplification"]], "Combinatorial": [[73, "combinatorial"]], "Enumeration": [[73, "enumeration"]], "Elementary": [[74, "elementary"]], "Complex Functions": [[74, "complex-functions"]], "Trigonometric": [[74, "trigonometric"]], "Trigonometric Functions": [[74, "trigonometric-functions"]], "Trigonometric Inverses": [[74, "trigonometric-inverses"]], "Hyperbolic": [[74, "hyperbolic"]], "Hyperbolic Functions": [[74, "hyperbolic-functions"]], "Hyperbolic Inverses": [[74, "hyperbolic-inverses"]], "Integer Functions": [[74, "integer-functions"]], "Exponential": [[74, "exponential"]], "Piecewise": [[74, "piecewise"]], "Miscellaneous": [[74, "miscellaneous"], [261, "module-sympy.utilities.misc"]], "Special": [[76, "special"]], "Dirac Delta and Related Discontinuous Functions": [[76, "dirac-delta-and-related-discontinuous-functions"]], "Gamma, Beta and Related Functions": [[76, "module-sympy.functions.special.gamma_functions"]], "Error Functions and Fresnel Integrals": [[76, "module-sympy.functions.special.error_functions"]], "Exponential, Logarithmic and Trigonometric Integrals": [[76, "exponential-logarithmic-and-trigonometric-integrals"]], "Bessel Type Functions": [[76, "module-sympy.functions.special.bessel"]], "Airy Functions": [[76, "airy-functions"]], "B-Splines": [[76, "b-splines"]], "Riemann Zeta and Related Functions": [[76, "module-sympy.functions.special.zeta_functions"]], "Hypergeometric Functions": [[76, "hypergeometric-functions"]], "Elliptic integrals": [[76, "module-sympy.functions.special.elliptic_integrals"]], "Mathieu Functions": [[76, "module-sympy.functions.special.mathieu_functions"]], "Orthogonal Polynomials": [[76, "module-sympy.functions.special.polynomials"]], "Jacobi Polynomials": [[76, "jacobi-polynomials"]], "Gegenbauer Polynomials": [[76, "gegenbauer-polynomials"]], "Chebyshev Polynomials": [[76, "chebyshev-polynomials"]], "Legendre Polynomials": [[76, "legendre-polynomials"]], "Hermite Polynomials": [[76, "hermite-polynomials"]], "Laguerre Polynomials": [[76, "laguerre-polynomials"]], "Spherical Harmonics": [[76, "spherical-harmonics"]], "Tensor Functions": [[76, "tensor-functions"]], "Curves": [[77, "module-sympy.geometry.curve"]], "Ellipses": [[78, "module-sympy.geometry.ellipse"]], "Entities": [[79, "module-sympy.geometry.entity"]], "Geometry": [[80, "geometry"]], "Available Entities": [[80, "available-entities"]], "Example Usage": [[80, "example-usage"]], "Intersection of medians": [[80, "intersection-of-medians"]], "An in-depth example: Pappus\u2019 Hexagon Theorem": [[80, "an-in-depth-example-pappus-hexagon-theorem"]], "Miscellaneous Notes": [[80, "miscellaneous-notes"]], "Future Work": [[80, "future-work"]], "Truth Setting Expressions": [[80, "truth-setting-expressions"]], "Three Dimensions and Beyond": [[80, "three-dimensions-and-beyond"]], "Geometry Visualization": [[80, "geometry-visualization"]], "Submodules": [[80, "submodules"]], "Lines": [[81, "module-sympy.geometry.line"]], "Plane": [[82, "module-sympy.geometry.plane"]], "Points": [[83, "module-sympy.geometry.point"], [269, "points"]], "Polygons": [[84, "module-sympy.geometry.polygon"]], "Utils": [[85, "module-sympy.geometry.util"]], "About Holonomic Functions": [[86, "about-holonomic-functions"]], "Converting other representations to holonomic": [[87, "converting-other-representations-to-holonomic"]], "Converting hypergeometric functions": [[87, "converting-hypergeometric-functions"]], "Converting Meijer G-functions": [[87, "converting-meijer-g-functions"]], "Converting symbolic expressions": [[87, "converting-symbolic-expressions"]], "Holonomic": [[88, "module-sympy.holonomic"]], "Internal API": [[89, "internal-api"]], "Operations on holonomic functions": [[90, "operations-on-holonomic-functions"]], "Addition and Multiplication": [[90, "addition-and-multiplication"]], "Integration and Differentiation": [[90, "integration-and-differentiation"]], "Composition with polynomials": [[90, "composition-with-polynomials"]], "Convert to holonomic sequence": [[90, "convert-to-holonomic-sequence"]], "Series expansion": [[90, "series-expansion"]], "Numerical evaluation": [[90, "numerical-evaluation"]], "Convert to a linear combination of hypergeometric functions": [[90, "convert-to-a-linear-combination-of-hypergeometric-functions"]], "Convert to a linear combination of Meijer G-functions": [[90, "convert-to-a-linear-combination-of-meijer-g-functions"]], "Convert to expressions": [[90, "convert-to-expressions"]], "Representation of holonomic functions in SymPy": [[91, "representation-of-holonomic-functions-in-sympy"]], "Uses and Current limitations": [[92, "uses-and-current-limitations"]], "Integration": [[92, "integration"]], "Computing Integrals using Meijer G-Functions": [[93, "computing-integrals-using-meijer-g-functions"]], "Overview": [[93, "overview"]], "Polar Numbers and Branched Functions": [[93, "polar-numbers-and-branched-functions"]], "Representing Branched Functions on the Argand Plane": [[93, "representing-branched-functions-on-the-argand-plane"]], "Table Lookups and Inverse Mellin Transforms": [[93, "table-lookups-and-inverse-mellin-transforms"]], "Applying the Integral Theorems": [[93, "applying-the-integral-theorems"]], "The G-Function Integration Theorems": [[93, "the-g-function-integration-theorems"]], "Conditions of Convergence for Integral (1)": [[93, "conditions-of-convergence-for-integral-1"]], "Conditions of Convergence for Integral (2)": [[93, "conditions-of-convergence-for-integral-2"]], "The Inverse Laplace Transform of a G-function": [[93, "the-inverse-laplace-transform-of-a-g-function"]], "How to compute the integral": [[93, "how-to-compute-the-integral"]], "When this computation is valid": [[93, "when-this-computation-is-valid"]], "When the integral exists": [[93, "when-the-integral-exists"]], "Implemented G-Function Formulae": [[93, "implemented-g-function-formulae"]], "Internal API Reference": [[93, "module-sympy.integrals.meijerint"]], "Integrals": [[94, "integrals"], [95, "module-sympy.integrals"], [287, "integrals"]], "Integral Transforms": [[95, "module-sympy.integrals.transforms"]], "Internals": [[95, "internals"], [215, "internals"]], "API reference": [[95, "api-reference"], [95, "id39"]], "TODO and Bugs": [[95, "todo-and-bugs"]], "Numeric Integrals": [[95, "numeric-integrals"]], "Integration over Polytopes": [[95, "module-sympy.integrals.intpoly"]], "For 2D Polygons": [[95, "for-2d-polygons"]], "For 3-Polytopes/Polyhedra": [[95, "for-3-polytopes-polyhedra"]], "Interactive": [[96, "module-sympy.interactive"]], "Session": [[96, "module-sympy.interactive.session"]], "Lie Algebra": [[97, "module-sympy.liealgebras"]], "Forming logical expressions": [[98, "forming-logical-expressions"]], "Boolean functions": [[98, "boolean-functions"]], "Simplification and equivalence-testing": [[98, "simplification-and-equivalence-testing"]], "Manipulating expressions": [[98, "manipulating-expressions"]], "Truth tables and related functions": [[98, "truth-tables-and-related-functions"]], "Inference": [[98, "module-sympy.logic.inference"]], "Common Matrices": [[99, "module-sympy.matrices.common"]], "Dense Matrices": [[100, "dense-matrices"]], "Matrix Expressions": [[101, "module-sympy.matrices.expressions"]], "Matrix Expressions Core Reference": [[101, "matrix-expressions-core-reference"]], "Block Matrices": [[101, "block-matrices"]], "Immutable Matrices": [[102, "immutable-matrices"]], "ImmutableMatrix Class Reference": [[102, "module-sympy.matrices.immutable"]], "Matrices": [[103, "module-sympy.matrices"], [122, "module-sympy.physics.matrices"], [276, "matrices"], [280, "matrices"], [293, "matrices"]], "Matrices (linear algebra)": [[104, "module-sympy.matrices.matrices"]], "Creating Matrices": [[104, "creating-matrices"]], "Basic Manipulation": [[104, "basic-manipulation"]], "Operations on entries": [[104, "operations-on-entries"]], "Linear algebra": [[104, "linear-algebra"]], "Reference": [[104, "reference"], [207, "reference"], [213, "reference"], [217, "reference"], [227, "reference"], [227, "id2"], [227, "id4"], [227, "id7"], [227, "id8"]], "Matrix Base Classes": [[104, "matrix-base-classes"]], "Matrix Exceptions": [[104, "matrix-exceptions"]], "Matrix Functions": [[104, "matrix-functions"]], "Rotation matrices": [[104, "rotation-matrices"]], "Numpy Utility Functions": [[104, "numpy-utility-functions"]], "Matrix Normal Forms": [[105, "matrix-normal-forms"]], "Sparse Matrices": [[106, "module-sympy.matrices.sparse"]], "SparseMatrix Class Reference": [[106, "sparsematrix-class-reference"]], "ImmutableSparseMatrix Class Reference": [[106, "immutablesparsematrix-class-reference"]], "Sparse Tools": [[107, "module-sympy.matrices.sparsetools"]], "Ntheory Class Reference": [[108, "ntheory-class-reference"]], "Ntheory Functions Reference": [[108, "ntheory-functions-reference"]], "ECM function": [[108, "ecm-function"]], "QS function": [[108, "qs-function"]], "Numeric Computation": [[109, "numeric-computation"]], "Subs/evalf": [[109, "subs-evalf"]], "Lambdify": [[109, "lambdify"], [259, "module-sympy.utilities.lambdify"]], "uFuncify": [[109, "ufuncify"]], "Aesara": [[109, "aesara"]], "So Which Should I Use?": [[109, "so-which-should-i-use"]], "Parsing Functions Reference": [[110, "parsing-functions-reference"]], "Parsing Transformations Reference": [[110, "parsing-transformations-reference"]], "Experimental \\mathrm{\\LaTeX} Parsing": [[110, "experimental-mathrm-latex-parsing"]], "\\mathrm{\\LaTeX} Parsing Caveats": [[110, "mathrm-latex-parsing-caveats"]], "\\mathrm{\\LaTeX} Parsing Functions Reference": [[110, "mathrm-latex-parsing-functions-reference"]], "\\mathrm{\\LaTeX} Parsing Exceptions Reference": [[110, "mathrm-latex-parsing-exceptions-reference"]], "SymPy Expression Reference": [[110, "module-sympy.parsing.sym_expr"]], "Runtime Installation": [[110, "runtime-installation"]], "Beam (Docstrings)": [[111, "module-sympy.physics.continuum_mechanics.beam"]], "Solving Beam Bending Problems using Singularity Functions": [[112, "solving-beam-bending-problems-using-singularity-functions"]], "Beam": [[112, "beam"], [114, "beam"]], "Example 6": [[112, "example-6"]], "Example 7": [[112, "example-7"]], "Example 8": [[112, "example-8"]], "Example 9": [[112, "example-9"]], "Example 10": [[112, "example-10"]], "Example 11": [[112, "example-11"]], "Cable (Docstrings)": [[113, "cable-docstrings"]], "Cable": [[113, "module-sympy.physics.continuum_mechanics.cable"], [114, "cable"]], "Continuum Mechanics": [[114, "continuum-mechanics"]], "Abstract": [[114, null], [118, null], [120, null], [145, null], [155, null], [172, null], [202, null]], "Truss": [[114, "truss"]], "Truss (Docstrings)": [[115, "module-sympy.physics.continuum_mechanics.truss"]], "Control": [[116, "control"]], "Control System Plots": [[117, "control-system-plots"]], "Pole-Zero Plot": [[117, "pole-zero-plot"]], "Bode Plot": [[117, "bode-plot"]], "Impulse-Response Plot": [[117, "impulse-response-plot"]], "Step-Response Plot": [[117, "step-response-plot"]], "Ramp-Response Plot": [[117, "ramp-response-plot"]], "Control Module": [[118, "module-sympy.physics.control"]], "Control API": [[119, "control-api"]], "lti": [[119, "module-sympy.physics.control.lti"]], "High energy physics": [[120, "high-energy-physics"]], "Gamma matrices": [[120, "module-sympy.physics.hep.gamma_matrices"]], "Hydrogen Wavefunctions": [[121, "module-sympy.physics.hydrogen"]], "Potential Issues/Advanced Topics/Future Features in Physics/Mechanics": [[123, "potential-issues-advanced-topics-future-features-in-physics-mechanics"]], "Common Issues": [[123, "common-issues"], [194, "common-issues"]], "Numerically Integrating Code": [[123, "numerically-integrating-code"]], "Differentiating": [[123, "differentiating"]], "Choice of Coordinates and Speeds": [[123, "choice-of-coordinates-and-speeds"]], "Substitution": [[123, "substitution"], [194, "substitution"], [286, "substitution"]], "Linearization": [[123, "linearization"]], "Acceleration of Points": [[123, "acceleration-of-points"], [194, "acceleration-of-points"]], "Advanced Interfaces": [[123, "advanced-interfaces"], [194, "advanced-interfaces"]], "Advanced Functionality": [[123, "advanced-functionality"]], "Future Features": [[123, "future-features"]], "Code Output": [[123, "code-output"]], "Body (Docstrings)": [[124, "module-sympy.physics.mechanics.body"]], "Expression Manipulation (Docstrings)": [[125, "expression-manipulation-docstrings"]], "Mechanics API Reference": [[126, "mechanics-api-reference"]], "Joints Framework (Docstrings)": [[127, "joints-framework-docstrings"]], "Joint (Docstrings)": [[127, "module-sympy.physics.mechanics.joint"]], "Kane\u2019s Method & Lagrange\u2019s Method (Docstrings)": [[128, "module-sympy.physics.mechanics.kane"]], "Linearization (Docstrings)": [[129, "module-sympy.physics.mechanics.linearize"]], "Bodies, Inertias, Loads & Other Functions (Docstrings)": [[130, "bodies-inertias-loads-other-functions-docstrings"]], "Bodies": [[130, "bodies"]], "Inertias": [[130, "inertias"]], "Loads": [[130, "loads"], [150, "loads"]], "Other Functions": [[130, "other-functions"]], "Pathway (Docstrings)": [[131, "module-sympy.physics.mechanics.pathway"]], "Printing (Docstrings)": [[132, "printing-docstrings"], [200, "printing-docstrings"]], "mechanics_printing": [[132, "mechanics-printing"]], "mprint": [[132, "mprint"]], "mpprint": [[132, "mpprint"]], "mlatex": [[132, "mlatex"]], "SymbolicSystem (Docstrings)": [[133, "symbolicsystem-docstrings"]], "Wrapping Geometry (Docstrings)": [[134, "module-sympy.physics.mechanics.wrapping_geometry"]], "Autolev Parser": [[135, "autolev-parser"]], "Usage": [[135, "usage"]], "Gotchas": [[135, "gotchas"], [289, "gotchas"]], "Limitations and Issues": [[135, "limitations-and-issues"]], "Future Improvements": [[135, "future-improvements"]], "1. Completing Dynamics Online": [[135, "completing-dynamics-online"]], "2. Fixing Issues": [[135, "fixing-issues"]], "3. Switching to an AST": [[135, "switching-to-an-ast"]], "Examples for Physics/Mechanics": [[136, "examples-for-physics-mechanics"]], "A bicycle": [[137, "a-bicycle"]], "A four bar linkage": [[138, "a-four-bar-linkage"]], "Nonminimal Coordinates Pendulum": [[139, "nonminimal-coordinates-pendulum"]], "Kane\u2019s Method": [[139, "kane-s-method"]], "Lagrange\u2019s Method": [[139, "lagrange-s-method"]], "Multi Degree of Freedom Holonomic System": [[140, "multi-degree-of-freedom-holonomic-system"]], "A rolling disc": [[141, "a-rolling-disc"]], "A rolling disc, with Kane\u2019s method": [[142, "a-rolling-disc-with-kane-s-method"]], "A rolling disc, with Kane\u2019s method and constraint forces": [[143, "a-rolling-disc-with-kane-s-method-and-constraint-forces"]], "A rolling disc using Lagrange\u2019s Method": [[144, "a-rolling-disc-using-lagrange-s-method"]], "Classical Mechanics": [[145, "classical-mechanics"]], "Vector": [[145, "vector"], [204, "vector"], [273, "vector"]], "Mechanics": [[145, "mechanics"], [240, "module-sympy.stats.rv"]], "Guide to Mechanics": [[145, "guide-to-mechanics"]], "Joints Framework in Physics/Mechanics": [[146, "joints-framework-in-physics-mechanics"]], "Joints in Physics/Mechanics": [[146, "joints-in-physics-mechanics"]], "JointsMethod in Physics/Mechanics": [[146, "jointsmethod-in-physics-mechanics"]], "Kane\u2019s Method in Physics/Mechanics": [[147, "kane-s-method-in-physics-mechanics"], [147, "id2"]], "Structure of Equations": [[147, "structure-of-equations"], [148, "structure-of-equations"]], "Lagrange\u2019s Method in Physics/Mechanics": [[148, "lagrange-s-method-in-physics-mechanics"], [148, "id1"]], "Linearization in Physics/Mechanics": [[149, "linearization-in-physics-mechanics"]], "Background": [[149, "background"]], "A Note on Dependent Coordinates and Speeds": [[149, null]], "Linearizing Kane\u2019s Equations": [[149, "linearizing-kane-s-equations"]], "1. Using the Linearizer class directly:": [[149, "using-the-linearizer-class-directly"], [149, "id2"]], "2. Using the linearize class method:": [[149, "using-the-linearize-class-method"], [149, "id3"]], "What\u2019s with the new_method kwarg?": [[149, null]], "Linearizing Lagrange\u2019s Equations": [[149, "linearizing-lagrange-s-equations"]], "Potential Issues": [[149, "potential-issues"]], "1. Symbolic linearization with A_and_B=True is slow": [[149, "symbolic-linearization-with-a-and-b-true-is-slow"]], "2. The linearized form has nan, zoo, or oo as matrix elements": [[149, "the-linearized-form-has-nan-zoo-or-oo-as-matrix-elements"]], "Further Examples": [[149, "further-examples"]], "Masses, Inertias, Particles and Rigid Bodies in Physics/Mechanics": [[150, "masses-inertias-particles-and-rigid-bodies-in-physics-mechanics"]], "Mass": [[150, "mass"]], "Particle": [[150, "particle"]], "Inertia": [[150, "inertia"]], "Inertia (Dyadics)": [[150, "inertia-dyadics"]], "Rigid Body": [[150, "rigid-body"]], "Linear Momentum": [[150, "linear-momentum"]], "Angular Momentum": [[150, "angular-momentum"]], "Using momenta functions in Mechanics": [[150, "using-momenta-functions-in-mechanics"]], "Kinetic Energy": [[150, "kinetic-energy"]], "Potential Energy": [[150, "potential-energy"]], "Lagrangian": [[150, "lagrangian"]], "Using energy functions in Mechanics": [[150, "using-energy-functions-in-mechanics"]], "References for Physics/Mechanics": [[151, "references-for-physics-mechanics"]], "SymPy Mechanics for Autolev Users": [[152, "sympy-mechanics-for-autolev-users"]], "Some Key Differences": [[152, "some-key-differences"]], "Rough Autolev-SymPy Equivalents": [[152, "rough-autolev-sympy-equivalents"]], "Mathematical Equivalents": [[152, "mathematical-equivalents"]], "Physical Equivalents": [[152, "physical-equivalents"]], "Numerical Evaluation and Visualization": [[152, "numerical-evaluation-and-visualization"]], "Links": [[152, "links"]], "Symbolic Systems in Physics/Mechanics": [[153, "symbolic-systems-in-physics-mechanics"]], "SymbolicSystem Example Usage": [[153, "symbolicsystem-example-usage"]], "Gaussian Optics": [[154, "module-sympy.physics.optics.gaussopt"]], "Optics Module": [[155, "optics-module"]], "Medium": [[156, "module-sympy.physics.optics.medium"]], "Polarization": [[157, "module-sympy.physics.optics.polarization"]], "Waves": [[159, "module-sympy.physics.optics.waves"]], "Pauli Algebra": [[160, "module-sympy.physics.paulialgebra"]], "Quantum Harmonic Oscillator in 1-D": [[161, "module-sympy.physics.qho_1d"]], "Anticommutator": [[162, "module-sympy.physics.quantum.anticommutator"]], "Cartesian Operators and States": [[163, "module-sympy.physics.quantum.cartesian"]], "Clebsch-Gordan Coefficients": [[164, "module-sympy.physics.quantum.cg"]], "Circuit Plot": [[165, "module-sympy.physics.quantum.circuitplot"]], "Commutator": [[166, "module-sympy.physics.quantum.commutator"]], "Constants": [[167, "module-sympy.physics.quantum.constants"], [190, "constants"]], "Dagger": [[168, "module-sympy.physics.quantum.dagger"]], "Gates": [[169, "module-sympy.physics.quantum.gate"]], "Grover\u2019s Algorithm": [[170, "module-sympy.physics.quantum.grover"]], "Hilbert Space": [[171, "module-sympy.physics.quantum.hilbert"]], "Quantum Mechanics": [[172, "quantum-mechanics"]], "Quantum Functions": [[172, "quantum-functions"]], "States and Operators": [[172, "states-and-operators"]], "Quantum Computation": [[172, "quantum-computation"]], "Analytic Solutions": [[172, "analytic-solutions"]], "Inner Product": [[173, "module-sympy.physics.quantum.innerproduct"]], "Operator": [[174, "module-sympy.physics.quantum.operator"]], "Operator/State Helper Functions": [[175, "module-sympy.physics.quantum.operatorset"]], "Particle in a Box": [[176, "module-sympy.physics.quantum.piab"]], "Qapply": [[177, "module-sympy.physics.quantum.qapply"]], "QFT": [[178, "module-sympy.physics.quantum.qft"]], "Qubit": [[179, "module-sympy.physics.quantum.qubit"]], "Represent": [[180, "module-sympy.physics.quantum.represent"]], "Shor\u2019s Algorithm": [[181, "module-sympy.physics.quantum.shor"]], "Spin": [[182, "module-sympy.physics.quantum.spin"]], "State": [[183, "module-sympy.physics.quantum.state"]], "Tensor Product": [[184, "module-sympy.physics.quantum.tensorproduct"]], "Second Quantization": [[185, "module-sympy.physics.secondquant"]], "Quantum Harmonic Oscillator in 3-D": [[186, "module-sympy.physics.sho"]], "Dimensions and dimension systems": [[187, "module-sympy.physics.units.dimensions"]], "More examples": [[188, "more-examples"]], "Dimensional analysis": [[188, "dimensional-analysis"]], "Equation with quantities": [[188, "equation-with-quantities"]], "Unit systems": [[189, "unit-systems"]], "More": [[189, "more"]], "Philosophy behind unit systems": [[190, "philosophy-behind-unit-systems"]], "Dimensions": [[190, "dimensions"]], "Group structure": [[190, "group-structure"]], "Linear space representation": [[190, "linear-space-representation"]], "An example": [[190, "an-example"], [230, "an-example"]], "Quantities": [[190, "quantities"]], "Units": [[190, "units"]], "The need for a reference": [[190, "the-need-for-a-reference"]], "Literature": [[190, "literature"], [214, "literature"], [219, "literature"]], "Unit prefixes": [[191, "module-sympy.physics.units.prefixes"]], "Physical quantities": [[192, "module-sympy.physics.units.quantities"]], "Conversion between quantities": [[192, "module-sympy.physics.units.util"]], "Units and unit systems": [[193, "module-sympy.physics.units.unitsystem"]], "Potential Issues/Advanced Topics/Future Features in Physics/Vector Module": [[194, "potential-issues-advanced-topics-future-features-in-physics-vector-module"]], "Dyadic": [[194, "dyadic"]], "ReferenceFrame": [[194, "referenceframe"]], "dynamicsymbols": [[194, "dynamicsymbols"]], "Essential Classes": [[195, "essential-classes"]], "Docstrings for basic field functions": [[196, "docstrings-for-basic-field-functions"]], "Field operation functions": [[196, "field-operation-functions"]], "Checking the type of vector field": [[196, "checking-the-type-of-vector-field"]], "Essential Functions (Docstrings)": [[197, "essential-functions-docstrings"]], "Physics Vector API": [[198, "physics-vector-api"]], "Kinematics (Docstrings)": [[199, "module-sympy.physics.vector.point"]], "kinematic_equations": [[199, "module-sympy.physics.vector.functions"]], "Scalar and Vector Field Functionality": [[201, "scalar-and-vector-field-functionality"], [272, "scalar-and-vector-field-functionality"]], "Vectors and Scalars": [[201, "vectors-and-scalars"], [274, "vectors-and-scalars"]], "Fields": [[201, "fields"], [274, "fields"]], "Implementation of fields in sympy.physics.vector": [[201, "implementation-of-fields-in-sympy-physics-vector"]], "Field operators and other related functions": [[201, "field-operators-and-other-related-functions"]], "Curl": [[201, "curl"], [272, "curl"]], "Divergence": [[201, "divergence"], [272, "divergence"]], "Gradient": [[201, "gradient"], [272, "gradient"]], "Conservative and Solenoidal fields": [[201, "conservative-and-solenoidal-fields"], [272, "conservative-and-solenoidal-fields"]], "Scalar potential functions": [[201, "scalar-potential-functions"], [272, "scalar-potential-functions"]], "The Physics Vector Module": [[202, "the-physics-vector-module"]], "References for Physics/Vector": [[202, "references-for-physics-vector"]], "Guide to Vector": [[202, "guide-to-vector"], [273, "guide-to-vector"]], "Vector: Kinematics": [[203, "vector-kinematics"]], "Introduction to Kinematics": [[203, "introduction-to-kinematics"]], "Angular Velocity": [[203, "angular-velocity"]], "Angular Acceleration": [[203, "angular-acceleration"]], "Point Velocity & Acceleration": [[203, "point-velocity-acceleration"]], "Kinematics in physics.vector": [[203, "kinematics-in-physics-vector"]], "Vector & ReferenceFrame": [[204, "vector-referenceframe"]], "Vector Algebra": [[204, "vector-algebra"]], "Vector Operations": [[204, "vector-operations"]], "Alternative Representation": [[204, "alternative-representation"]], "Vector Calculus": [[204, "vector-calculus"]], "Derivatives of Vectors": [[204, "derivatives-of-vectors"]], "Relating Sets of Basis Vectors": [[204, "relating-sets-of-basis-vectors"]], "Derivatives with Multiple Frames": [[204, "derivatives-with-multiple-frames"]], "Using Vectors and Reference Frames": [[204, "using-vectors-and-reference-frames"]], "Vector Algebra, in physics.vector": [[204, "vector-algebra-in-physics-vector"]], "Vector Calculus, in physics.vector": [[204, "vector-calculus-in-physics-vector"]], "How Vectors are Coded": [[204, "how-vectors-are-coded"]], "Wigner Symbols": [[205, "module-sympy.physics.wigner"]], "Credits and Copyright": [[205, "credits-and-copyright"]], "Authors": [[205, "authors"]], "Plot Class": [[206, "plot-class"]], "Plotting Function Reference": [[206, "plotting-function-reference"]], "PlotGrid Class": [[206, "plotgrid-class"]], "Series Classes": [[206, "series-classes"]], "Backends": [[206, "backends"]], "Pyglet Plotting": [[206, "module-sympy.plotting.pygletplot"]], "Plot Window Controls": [[206, "plot-window-controls"]], "Coordinate Modes": [[206, "coordinate-modes"]], "Specifying Intervals for Variables": [[206, "specifying-intervals-for-variables"]], "Using the Interactive Interface": [[206, "using-the-interactive-interface"]], "Using Custom Color Functions": [[206, "using-custom-color-functions"]], "Plotting Geometric Entities": [[206, "plotting-geometric-entities"]], "Plotting with ASCII art": [[206, "plotting-with-ascii-art"]], "AGCA - Algebraic Geometry and Commutative Algebra Module": [[207, "agca-algebraic-geometry-and-commutative-algebra-module"]], "Base Rings": [[207, "base-rings"]], "Modules, Ideals and their Elementary Properties": [[207, "modules-ideals-and-their-elementary-properties"]], "Module Homomorphisms and Syzygies": [[207, "module-homomorphisms-and-syzygies"]], "Finite Extensions": [[207, "finite-extensions"]], "Basic functionality of the module": [[208, "basic-functionality-of-the-module"]], "Basic concepts": [[208, "basic-concepts"]], "Polynomials": [[208, "polynomials"]], "Divisibility": [[208, "divisibility"]], "Integral domains": [[208, "integral-domains"]], "Factorial domains": [[208, "factorial-domains"]], "Euclidean domains": [[208, "euclidean-domains"]], "Divisibility of polynomials": [[208, "divisibility-of-polynomials"]], "Basic functionality": [[208, "basic-functionality"]], "Division": [[208, "division"]], "GCD and LCM": [[208, "gcd-and-lcm"]], "Square-free factorization": [[208, "square-free-factorization"]], "Factorization": [[208, "factorization"]], "Groebner bases": [[208, "groebner-bases"]], "Solving Equations": [[208, "solving-equations"]], "Introducing the domainmatrix of the poly module": [[209, "introducing-the-domainmatrix-of-the-poly-module"]], "What is domainmatrix?": [[209, "what-is-domainmatrix"]], "Introducing the Domains of the poly module": [[210, "introducing-the-domains-of-the-poly-module"]], "What are the domains?": [[210, "what-are-the-domains"]], "Representing expressions symbolically": [[210, "representing-expressions-symbolically"]], "Tree representation": [[210, "tree-representation"]], "DUP representation": [[210, "dup-representation"]], "DMP representation": [[210, "dmp-representation"]], "Sparse polynomial representation": [[210, "sparse-polynomial-representation"]], "Basic usage of domains": [[210, "basic-usage-of-domains"]], "Domain elements vs sympy expressions": [[210, "domain-elements-vs-sympy-expressions"]], "Gaussian integers and Gaussian rationals": [[210, "gaussian-integers-and-gaussian-rationals"]], "Finite fields": [[210, "finite-fields"]], "Real and complex fields": [[210, "real-and-complex-fields"]], "Algebraic number fields": [[210, "algebraic-number-fields"], [215, "algebraic-number-fields"]], "Polynomial ring domains": [[210, "polynomial-ring-domains"]], "Old (dense) polynomial rings": [[210, "old-dense-polynomial-rings"]], "PolyRing vs PolynomialRing": [[210, "polyring-vs-polynomialring"]], "Rational function fields": [[210, "rational-function-fields"]], "Expression domain": [[210, "expression-domain"]], "Choosing a domain": [[210, "choosing-a-domain"]], "Converting elements between different domains": [[210, "converting-elements-between-different-domains"]], "Unifying domains": [[210, "unifying-domains"]], "Internals of a Poly": [[210, "internals-of-a-poly"]], "Choosing a domain for a Poly": [[210, "choosing-a-domain-for-a-poly"]], "Choosing generators": [[210, "choosing-generators"]], "Algebraically dependent generators": [[210, "algebraically-dependent-generators"]], "Reference docs for the Poly Domains": [[211, "reference-docs-for-the-poly-domains"]], "Domains": [[211, "domains"]], "Abstract Domains": [[211, "abstract-domains"]], "GF(p)": [[211, "gf-p"]], "ZZ": [[211, "zz"]], "QQ": [[211, "qq"]], "MPQ": [[211, "mpq"]], "Gaussian domains": [[211, "gaussian-domains"]], "ZZ_I": [[211, "zz-i"]], "QQ_I": [[211, "qq-i"]], "QQ<a>": [[211, "qq-a"]], "RR": [[211, "rr"]], "CC": [[211, "cc"]], "K[x]": [[211, "k-x"]], "K(x)": [[211, "id11"]], "EX": [[211, "ex"]], "Quotient ring": [[211, "quotient-ring"]], "Sparse polynomials": [[211, "sparse-polynomials"]], "Sparse rational functions": [[211, "sparse-rational-functions"]], "Dense polynomials": [[211, "dense-polynomials"]], "Polynomial Manipulation": [[212, "polynomial-manipulation"]], "Internals of the Polynomial Manipulation Module": [[213, "internals-of-the-polynomial-manipulation-module"]], "Level Zero": [[213, "level-zero"]], "Manipulation of dense, multivariate polynomials": [[213, "manipulation-of-dense-multivariate-polynomials"]], "Manipulation of dense, univariate polynomials with finite field coefficients": [[213, "manipulation-of-dense-univariate-polynomials-with-finite-field-coefficients"]], "Manipulation of sparse, distributed polynomials and vectors": [[213, "manipulation-of-sparse-distributed-polynomials-and-vectors"]], "Polynomial factorization algorithms": [[213, "polynomial-factorization-algorithms"]], "Classical remainder sequence": [[213, "classical-remainder-sequence"]], "Simplified remainder sequences": [[213, "simplified-remainder-sequences"]], "Subresultant sequence": [[213, "subresultant-sequence"]], "Groebner basis algorithms": [[213, "groebner-basis-algorithms"]], "Options": [[213, "module-sympy.polys.polyoptions"]], "Configuration": [[213, "module-sympy.polys.polyconfig"]], "Exceptions": [[213, "exceptions"]], "Modular GCD": [[213, "modular-gcd"]], "Undocumented": [[213, "undocumented"]], "Number Fields": [[215, "number-fields"]], "Solving the Main Problems": [[215, "solving-the-main-problems"]], "Integral Basis": [[215, "integral-basis"]], "Prime Decomposition": [[215, "prime-decomposition"]], "p-adic Valuation": [[215, "p-adic-valuation"]], "Finding Minimal Polynomials": [[215, "finding-minimal-polynomials"]], "The Subfield Problem": [[215, "the-subfield-problem"]], "Representing algebraic numbers": [[215, "representing-algebraic-numbers"]], "As number field elements": [[215, "as-number-field-elements"]], "As elements of finitely-generated modules": [[215, "as-elements-of-finitely-generated-modules"]], "Finitely-generated modules": [[215, "module-sympy.polys.numberfields.modules"]], "Arithmetic with module elements": [[215, "arithmetic-with-module-elements"]], "Multiplication": [[215, "multiplication"]], "Module Homomorphisms": [[215, "module-homomorphisms"]], "Class Reference": [[215, "class-reference"]], "Polynomials Manipulation Module Reference": [[216, "module-sympy.polys"]], "Basic polynomial manipulation functions": [[216, "basic-polynomial-manipulation-functions"]], "Extra polynomial manipulation functions": [[216, "extra-polynomial-manipulation-functions"]], "Domain constructors": [[216, "domain-constructors"]], "Monomials encoded as tuples": [[216, "monomials-encoded-as-tuples"]], "Orderings of monomials": [[216, "orderings-of-monomials"]], "Formal manipulation of roots of polynomials": [[216, "formal-manipulation-of-roots-of-polynomials"]], "Symbolic root-finding algorithms": [[216, "symbolic-root-finding-algorithms"]], "Special polynomials": [[216, "special-polynomials"]], "Orthogonal polynomials": [[216, "orthogonal-polynomials"]], "Appell sequences": [[216, "appell-sequences"]], "Manipulation of rational functions": [[216, "manipulation-of-rational-functions"]], "Partial fraction decomposition": [[216, "partial-fraction-decomposition"], [219, "partial-fraction-decomposition"]], "Dispersion of Polynomials": [[216, "dispersion-of-polynomials"]], "Series Manipulation using Polynomials": [[217, "series-manipulation-using-polynomials"]], "rs_series": [[217, "rs-series"]], "Contribute": [[217, "contribute"]], "Poly solvers": [[218, "poly-solvers"]], "Examples from Wester\u2019s Article": [[219, "examples-from-wester-s-article"]], "Simple univariate polynomial factorization": [[219, "simple-univariate-polynomial-factorization"]], "Univariate GCD, resultant and factorization": [[219, "univariate-gcd-resultant-and-factorization"]], "Multivariate GCD and factorization": [[219, "multivariate-gcd-and-factorization"]], "Support for symbols in exponents": [[219, "support-for-symbols-in-exponents"]], "Testing if polynomials have common zeros": [[219, "testing-if-polynomials-have-common-zeros"]], "Normalizing simple rational functions": [[219, "normalizing-simple-rational-functions"]], "Expanding expressions and factoring back": [[219, "expanding-expressions-and-factoring-back"]], "Factoring in terms of cyclotomic polynomials": [[219, "factoring-in-terms-of-cyclotomic-polynomials"]], "Univariate factoring over Gaussian numbers": [[219, "univariate-factoring-over-gaussian-numbers"]], "Computing with automatic field extensions": [[219, "computing-with-automatic-field-extensions"]], "Univariate factoring over various domains": [[219, "univariate-factoring-over-various-domains"]], "Factoring polynomials into linear factors": [[219, "factoring-polynomials-into-linear-factors"]], "Advanced factoring over finite fields": [[219, "advanced-factoring-over-finite-fields"]], "Working with expressions as polynomials": [[219, "working-with-expressions-as-polynomials"]], "Computing reduced Gr\u00f6bner bases": [[219, "computing-reduced-grobner-bases"]], "Multivariate factoring over algebraic numbers": [[219, "multivariate-factoring-over-algebraic-numbers"]], "Printer Class": [[220, "module-sympy.printing.printer"]], "Which Method is Responsible for Printing?": [[220, "which-method-is-responsible-for-printing"]], "Example of Custom Printer": [[220, "example-of-custom-printer"]], "Example of Custom Printing Method": [[220, "example-of-custom-printing-method"]], "Common mistakes": [[220, "common-mistakes"]], "PrettyPrinter Class": [[220, "prettyprinter-class"]], "C code printers": [[220, "module-sympy.printing.c"]], "C++ code printers": [[220, "module-sympy.printing.cxx"]], "RCodePrinter": [[220, "module-sympy.printing.rcode"]], "Fortran Printing": [[220, "fortran-printing"]], "SMT-Lib printing": [[220, "module-sympy.printing.smtlib"]], "Mathematica code printing": [[220, "module-sympy.printing.mathematica"]], "Maple code printing": [[220, "module-sympy.printing.maple"]], "Javascript Code printing": [[220, "module-sympy.printing.jscode"]], "Julia code printing": [[220, "module-sympy.printing.julia"]], "Octave (and Matlab) Code printing": [[220, "module-sympy.printing.octave"]], "Rust code printing": [[220, "module-sympy.printing.rust"]], "Aesara Code printing": [[220, "module-sympy.printing.aesaracode"]], "Gtk": [[220, "module-sympy.printing.gtk"]], "LambdaPrinter": [[220, "module-sympy.printing.lambdarepr"]], "LatexPrinter": [[220, "module-sympy.printing.latex"]], "MathMLPrinter": [[220, "module-sympy.printing.mathml"]], "PythonCodePrinter": [[220, "module-sympy.printing.pycode"]], "PythonPrinter": [[220, "module-sympy.printing.python"]], "srepr": [[220, "module-sympy.printing.repr"], [296, "srepr"]], "StrPrinter": [[220, "module-sympy.printing.str"]], "Tree Printing": [[220, "module-sympy.printing.tree"]], "Preview": [[220, "preview"]], "Implementation - Helper Classes/Functions": [[220, "module-sympy.printing.conventions"]], "CodePrinter": [[220, "module-sympy.printing.codeprinter"]], "Precedence": [[220, "module-sympy.printing.precedence"]], "Pretty-Printing Implementation Helpers": [[220, "module-sympy.printing.pretty.pretty_symbology"]], "dotprint": [[220, "dotprint"]], "Term Rewriting": [[221, "term-rewriting"]], "Expanding": [[221, "expanding"]], "Common Subexpression Detection and Collection": [[221, "common-subexpression-detection-and-collection"]], "Formal Power Series": [[222, "formal-power-series"]], "Rational Algorithm": [[222, "rational-algorithm"]], "Hypergeometric Algorithm": [[222, "hypergeometric-algorithm"]], "Fourier Series": [[223, "fourier-series"]], "Series": [[224, "series"]], "Limits of Sequences": [[225, "limits-of-sequences"]], "Sequences": [[226, "sequences"]], "Sequences Base": [[226, "sequences-base"]], "Elementary Sequences": [[226, "elementary-sequences"]], "Singleton Sequences": [[226, "singleton-sequences"]], "Compound Sequences": [[226, "compound-sequences"]], "Recursive Sequences": [[226, "recursive-sequences"]], "Series Expansions": [[227, "series-expansions"]], "Limits": [[227, "limits"], [287, "limits"]], "The Gruntz Algorithm": [[227, "the-gruntz-algorithm"]], "More Intuitive Series Expansion": [[227, "more-intuitive-series-expansion"]], "Order Terms": [[227, "order-terms"]], "Series Acceleration": [[227, "series-acceleration"]], "Residues": [[227, "residues"]], "Basic Sets": [[228, "module-sympy.sets.sets"]], "Elementary Sets": [[228, "elementary-sets"]], "Compound Sets": [[228, "compound-sets"]], "Singleton Sets": [[228, "singleton-sets"]], "Special Sets": [[228, "module-sympy.sets.fancysets"]], "Power sets": [[228, "module-sympy.sets.powerset"]], "Condition Sets": [[228, "module-sympy.sets.conditionset"]], "SetKind": [[228, "setkind"]], "Iteration over sets": [[228, "iteration-over-sets"]], "Hongguang Fu\u2019s Trigonometric Simplification": [[229, "hongguang-fu-s-trigonometric-simplification"]], "Rules": [[229, "rules"]], "Hypergeometric Expansion": [[230, "hypergeometric-expansion"]], "Hypergeometric Function Expansion Algorithm": [[230, "hypergeometric-function-expansion-algorithm"]], "Notation": [[230, "notation"]], "Incrementing and decrementing indices": [[230, "incrementing-and-decrementing-indices"]], "Reduction of Order": [[230, "reduction-of-order"]], "Moving Around in the Parameter Space": [[230, "moving-around-in-the-parameter-space"]], "Applying the Operators": [[230, "applying-the-operators"]], "Loose Ends": [[230, "loose-ends"]], "Meijer G-Functions of Finite Confluence": [[230, "meijer-g-functions-of-finite-confluence"]], "Extending The Hypergeometric Tables": [[230, "extending-the-hypergeometric-tables"]], "Implemented Hypergeometric Formulae": [[230, "implemented-hypergeometric-formulae"]], "Simplify": [[231, "simplify"], [232, "simplify"]], "Diophantine": [[233, "diophantine"]], "Diophantine equations": [[233, "diophantine-equations"]], "Module structure": [[233, "module-structure"]], "Tutorial": [[233, "tutorial"]], "User Functions": [[233, "user-functions"], [236, "user-functions"], [237, "user-functions"]], "Internal Functions": [[233, "internal-functions"]], "Internal Classes": [[233, "internal-classes"]], "Solvers": [[234, "solvers"], [238, "module-sympy.solvers"], [298, "solvers"]], "Inequality Solvers": [[235, "inequality-solvers"]], "ODE": [[236, "ode"]], "Hint Functions": [[236, "hint-functions"]], "Lie heuristics": [[236, "lie-heuristics"]], "Rational Riccati Solver": [[236, "rational-riccati-solver"]], "System of ODEs": [[236, "system-of-odes"]], "Information on the ode module": [[236, "module-sympy.solvers.ode.ode"]], "PDE": [[237, "pde"]], "Hint Methods": [[237, "hint-methods"]], "Information on the pde module": [[237, "module-sympy.solvers.pde"]], "Algebraic equations": [[238, "algebraic-equations"]], "Ordinary Differential equations (ODEs)": [[238, "ordinary-differential-equations-odes"], [239, "ordinary-differential-equations-odes"]], "Partial Differential Equations (PDEs)": [[238, "partial-differential-equations-pdes"], [239, "partial-differential-equations-pdes"]], "Deutils (Utilities for solving ODE\u2019s and PDE\u2019s)": [[238, "deutils-utilities-for-solving-ode-s-and-pde-s"]], "Recurrence Equations": [[238, "module-sympy.solvers.recurr"]], "Systems of Polynomial Equations": [[238, "systems-of-polynomial-equations"]], "Diophantine Equations (DEs)": [[238, "diophantine-equations-des"], [239, "diophantine-equations-des"]], "Inequalities": [[238, "inequalities"], [239, "inequalities"]], "Solveset": [[239, "solveset"]], "What\u2019s wrong with solve():": [[239, "what-s-wrong-with-solve"]], "Why Solveset?": [[239, "why-solveset"]], "Why do we use Sets as an output type?": [[239, "why-do-we-use-sets-as-an-output-type"]], "Input API of solveset": [[239, "input-api-of-solveset"]], "What is this domain argument about?": [[239, "what-is-this-domain-argument-about"]], "What are the general methods employed by solveset to solve an equation?": [[239, "what-are-the-general-methods-employed-by-solveset-to-solve-an-equation"]], "How do we manipulate and return an infinite solution?": [[239, "how-do-we-manipulate-and-return-an-infinite-solution"]], "How does solveset ensure that it is not returning any wrong solution?": [[239, "how-does-solveset-ensure-that-it-is-not-returning-any-wrong-solution"]], "Search based solver and step-by-step solution": [[239, "search-based-solver-and-step-by-step-solution"]], "How do we deal with cases where only some of the solutions are known?": [[239, "how-do-we-deal-with-cases-where-only-some-of-the-solutions-are-known"]], "What is the plan for solve and solveset?": [[239, "what-is-the-plan-for-solve-and-solveset"]], "How are symbolic parameters handled in solveset?": [[239, "how-are-symbolic-parameters-handled-in-solveset"]], "Solveset Module Reference": [[239, "solveset-module-reference"]], "transolve": [[239, "transolve"]], "Stats": [[240, "module-sympy.stats"]], "Random Variable Types": [[240, "random-variable-types"]], "Finite Types": [[240, "finite-types"]], "Discrete Types": [[240, "discrete-types"]], "Continuous Types": [[240, "continuous-types"]], "Joint Types": [[240, "joint-types"]], "Stochastic Processes": [[240, "stochastic-processes"]], "Matrix Distributions": [[240, "matrix-distributions"]], "Compound Distribution": [[240, "compound-distribution"]], "Interface": [[240, "interface"]], "N-dim array": [[241, "module-sympy.tensor.array"]], "Products and contractions": [[241, "products-and-contractions"]], "Diagonal operator": [[241, "diagonal-operator"]], "Derivatives by array": [[241, "derivatives-by-array"]], "Classes": [[241, "classes"]], "N-dim array expressions": [[242, "module-sympy.tensor.array.expressions"]], "Constructing array expressions from index-explicit forms": [[242, "constructing-array-expressions-from-index-explicit-forms"]], "Compatibility with matrices": [[242, "compatibility-with-matrices"]], "Tensor": [[243, "module-sympy.tensor"], [246, "module-sympy.tensor.tensor"]], "Methods": [[244, "module-sympy.tensor.index_methods"]], "Indexed Objects": [[245, "module-sympy.tensor.indexed"]], "Tensor Operators": [[247, "module-sympy.tensor.toperators"]], "Testing": [[248, "testing"]], "pytest": [[249, "module-sympy.testing.pytest"]], "Randomised Testing": [[250, "module-sympy.testing.randtest"]], "Run Tests": [[251, "module-sympy.testing.runtests"]], "Autowrap Module": [[252, "autowrap-module"]], "Implementation details": [[252, "implementation-details"]], "Codegen": [[253, "codegen"]], "Implementation Details": [[253, "implementation-details"]], "Routine": [[253, "routine"]], "Decorator": [[254, "module-sympy.utilities.decorator"]], "Enumerative": [[255, "module-sympy.utilities.enumerative"]], "Exceptions and Warnings": [[256, "module-sympy.utilities.exceptions"]], "Iterables": [[258, "module-sympy.utilities.iterables"]], "variations": [[258, "variations"]], "partitions": [[258, "partitions"]], "Memoization": [[260, "module-sympy.utilities.memoization"]], "PKGDATA": [[262, "module-sympy.utilities.pkgdata"]], "Source Code Inspection": [[263, "module-sympy.utilities.source"]], "Timing Utilities": [[264, "module-sympy.utilities.timeutils"]], "Essential Classes in sympy.vector (docstrings)": [[265, "essential-classes-in-sympy-vector-docstrings"]], "Vector API": [[266, "vector-api"]], "Orienter classes (docstrings)": [[267, "orienter-classes-docstrings"]], "Essential Functions in sympy.vector (docstrings)": [[268, "essential-functions-in-sympy-vector-docstrings"]], "Basic Implementation details": [[269, "basic-implementation-details"]], "Coordinate Systems and Vectors": [[269, "coordinate-systems-and-vectors"]], "SymPy operations on Vectors": [[269, "sympy-operations-on-vectors"]], "Dyadics": [[269, "dyadics"]], "More about Coordinate Systems": [[270, "more-about-coordinate-systems"]], "Locating new systems": [[270, "locating-new-systems"]], "Orienting new systems": [[270, "orienting-new-systems"]], "Using a method of CoordSys3D directly": [[270, "using-a-method-of-coordsys3d-directly"]], "Using Orienter(s) and the orient_new method": [[270, "using-orienter-s-and-the-orient-new-method"]], "Orienting AND Locating new systems": [[270, "orienting-and-locating-new-systems"]], "Transforming new system": [[270, "transforming-new-system"]], "Expression of quantities in different coordinate systems": [[270, "expression-of-quantities-in-different-coordinate-systems"]], "Vectors and Dyadics": [[270, "vectors-and-dyadics"]], "Coordinate Variables": [[270, "coordinate-variables"]], "Other expression-dependent methods": [[270, "other-expression-dependent-methods"]], "General examples of usage": [[271, "general-examples-of-usage"]], "Quadrilateral problem": [[271, "quadrilateral-problem"]], "The Problem": [[271, "the-problem"], [271, "id1"]], "Solution": [[271, "solution"], [271, "id2"]], "Third product rule for Del operator": [[271, "third-product-rule-for-del-operator"]], "See": [[271, "see"]], "Implementation in sympy.vector": [[272, "implementation-in-sympy-vector"]], "Scalar and vector fields": [[272, "scalar-and-vector-fields"]], "The Del operator": [[272, "the-del-operator"]], "Field operators and related functions": [[272, "field-operators-and-related-functions"]], "Directional Derivative": [[272, "directional-derivative"]], "Field operator in orthogonal curvilinear coordinate system": [[272, "field-operator-in-orthogonal-curvilinear-coordinate-system"]], "References for Vector": [[273, "references-for-vector"]], "Coordinate Systems": [[274, "coordinate-systems"]], "Applications of Vector Integrals": [[275, "applications-of-vector-integrals"]], "Calculation of Perimeter, Surface Area, and Volume": [[275, "calculation-of-perimeter-surface-area-and-volume"]], "Calculation of mass of a body": [[275, "calculation-of-mass-of-a-body"]], "Calculation of Flux": [[275, "calculation-of-flux"]], "Verifying Stoke\u2019s Theorem": [[275, "verifying-stoke-s-theorem"]], "Verifying Divergence Theorem": [[275, "verifying-divergence-theorem"]], "Topics": [[276, "topics"], [283, "topics"]], "Introductory Tutorial": [[285, "introductory-tutorial"], [290, "introductory-tutorial"]], "Basic Operations": [[286, "basic-operations"], [293, "basic-operations"]], "Quick Tip": [[286, null], [287, null], [289, null], [292, null], [293, null]], "Converting Strings to SymPy Expressions": [[286, "converting-strings-to-sympy-expressions"]], "Derivatives": [[287, "derivatives"]], "Series Expansion": [[287, "series-expansion"]], "Finite differences": [[287, "finite-differences"]], "SymPy Features": [[288, "sympy-features"]], "Equals signs": [[289, "equals-signs"]], "Two Final Notes: ^ and /": [[289, "two-final-notes-and"]], "Further Reading": [[289, "further-reading"]], "What is Symbolic Computation?": [[291, "what-is-symbolic-computation"]], "A More Interesting Example": [[291, "a-more-interesting-example"]], "The Power of Symbolic Computation": [[291, "the-power-of-symbolic-computation"]], "Why SymPy?": [[291, "why-sympy"]], "Advanced Expression Manipulation": [[292, "advanced-expression-manipulation"]], "Understanding Expression Trees": [[292, "understanding-expression-trees"]], "Recursing through an Expression Tree": [[292, "recursing-through-an-expression-tree"]], "args": [[292, "args"]], "Key Invariant": [[292, null]], "Walking the Tree": [[292, "walking-the-tree"]], "Prevent expression evaluation": [[292, "prevent-expression-evaluation"]], "Shape": [[293, "shape"]], "Accessing Rows and Columns": [[293, "accessing-rows-and-columns"]], "Deleting and Inserting Rows and Columns": [[293, "deleting-and-inserting-rows-and-columns"]], "Basic Methods": [[293, "basic-methods"]], "Matrix Constructors": [[293, "matrix-constructors"]], "Advanced Methods": [[293, "advanced-methods"]], "Determinant": [[293, "determinant"]], "RREF": [[293, "rref"]], "Nullspace": [[293, "nullspace"]], "Columnspace": [[293, "columnspace"]], "Eigenvalues, Eigenvectors, and Diagonalization": [[293, "eigenvalues-eigenvectors-and-diagonalization"]], "Possible Issues": [[293, "possible-issues"]], "Zero Testing": [[293, "zero-testing"]], "What\u2019s Next": [[294, "whats-next"]], "Preliminaries": [[295, "preliminaries"]], "Exercises": [[295, "exercises"]], "Printers": [[296, "printers"]], "Setting up Pretty Printing": [[296, "setting-up-pretty-printing"]], "Printing Functions": [[296, "printing-functions"]], "str": [[296, "str"]], "ASCII Pretty Printer": [[296, "ascii-pretty-printer"]], "Unicode Pretty Printer": [[296, "unicode-pretty-printer"]], "\\mathrm{\\LaTeX}": [[296, "mathrm-latex"]], "MathML": [[296, "mathml"]], "Dot": [[296, "dot"]], "Simplification": [[297, "simplification"]], "simplify": [[297, "simplify"]], "Polynomial/Rational Function Simplification": [[297, "polynomial-rational-function-simplification"]], "expand": [[297, "expand"]], "factor": [[297, "factor"]], "collect": [[297, "collect"]], "cancel": [[297, "cancel"]], "apart": [[297, "apart"]], "Trigonometric Simplification": [[297, "trigonometric-simplification"]], "trigsimp": [[297, "trigsimp"]], "expand_trig": [[297, "expand-trig"]], "Powers": [[297, "powers"]], "powsimp": [[297, "powsimp"]], "expand_power_exp / expand_power_base": [[297, "expand-power-exp-expand-power-base"]], "powdenest": [[297, "powdenest"]], "Exponentials and logarithms": [[297, "exponentials-and-logarithms"]], "expand_log": [[297, "expand-log"]], "logcombine": [[297, "logcombine"]], "Special Functions": [[297, "special-functions"]], "rewrite": [[297, "rewrite"]], "expand_func": [[297, "expand-func"]], "hyperexpand": [[297, "hyperexpand"]], "combsimp": [[297, "combsimp"]], "gammasimp": [[297, "gammasimp"]], "Example: Continued Fractions": [[297, "example-continued-fractions"]], "A Note about Equations": [[298, "a-note-about-equations"]], "Solving Equations Algebraically": [[298, "solving-equations-algebraically"]], "Solving Differential Equations": [[298, "solving-differential-equations"]]}, "indexentries": {"antiderivative": [[14, "term-Antiderivative"]], "assumptions": [[14, "term-Assumptions"]], "atom": [[14, "term-Atom"]], "automatic simplification": [[14, "term-Automatic-Simplification"]], "basic": [[14, "term-Basic"]], "boolean": [[14, "term-Boolean"]], "bound symbols": [[14, "term-Bound-symbols"]], "canonical form": [[14, "term-Canonical-Form"]], "canonicalize": [[14, "term-Canonicalize"]], "code generation": [[14, "term-Code-Generation"]], "core": [[14, "term-Core"]], "dummy": [[14, "term-Dummy"]], "equation": [[14, "term-Equation"]], "evaluate": [[14, "term-Evaluate"]], "expr": [[14, "term-Expr"]], "expression": [[14, "term-Expression"]], "expression tree": [[14, "term-Expression-Tree"]], "free symbols": [[14, "term-Free-symbols"]], "function": [[14, "term-Function"]], "function (class)": [[14, "term-Function-class"]], "immutable": [[14, "term-Immutable"]], "interactive": [[14, "term-Interactive"]], "kind": [[14, "term-Kind"]], "matrix": [[14, "term-Matrix"]], "number": [[14, "term-Number"]], "numeric": [[14, "term-Numeric"]], "polys": [[14, "term-Polys"]], "printing": [[14, "term-Printing"]], "relational": [[14, "term-Relational"]], "s": [[14, "term-S"]], "simplification": [[14, "term-Simplification"]], "solve": [[14, "term-Solve"]], "solvers": [[14, "term-Solvers"]], "structural equality": [[14, "term-Structural-Equality"]], "subexpression": [[14, "term-Subexpression"]], "substitution": [[14, "term-Substitution"]], "symbol": [[14, "term-Symbol"]], "symbolic": [[14, "term-Symbolic"]], "three-valued logic": [[14, "term-Three-valued-logic"]], "undefined function": [[14, "term-Undefined-Function"]], "unevaluated": [[14, "term-Unevaluated"]], "_eval_*": [[14, "term-_eval_"]], "args": [[14, "term-args"]], "evalf": [[14, "term-evalf"]], "func": [[14, "term-func"]], "is_*": [[14, "term-is_"]], "isympy": [[14, "term-isympy"]], "lambdify()": [[14, "term-lambdify"]], "lamda": [[14, "term-lamda"]], "mpmath": [[14, "term-mpmath"]], "oo": [[14, "term-oo"]], "sympify()": [[14, "term-sympify"]], "zoo": [[14, "term-zoo"]], "module": [[15, "module-sympy.simplify.simplify"], [38, "module-sympy"], [40, "module-sympy.abc"], [41, "module-sympy.algebras"], [42, "module-sympy.assumptions.ask"], [43, "module-sympy.assumptions.assume"], [44, "module-sympy.assumptions"], [45, "module-sympy.assumptions.predicates"], [46, "module-sympy.assumptions.refine"], [47, "module-sympy.calculus"], [47, "module-sympy.calculus.euler"], [47, "module-sympy.calculus.finite_diff"], [47, "module-sympy.calculus.singularities"], [47, "module-sympy.calculus.util"], [48, "module-sympy.categories"], [48, "module-sympy.categories.diagram_drawing"], [49, "module-sympy.codegen.algorithms"], [49, "module-sympy.codegen.approximations"], [49, "module-sympy.codegen.ast"], [49, "module-sympy.codegen.cfunctions"], [49, "module-sympy.codegen.cnodes"], [49, "module-sympy.codegen.cutils"], [49, "module-sympy.codegen.cxxnodes"], [49, "module-sympy.codegen.fnodes"], [49, "module-sympy.codegen.futils"], [49, "module-sympy.codegen.matrix_nodes"], [49, "module-sympy.codegen.pyutils"], [49, "module-sympy.codegen.rewriting"], [51, "module-sympy.combinatorics.galois"], [52, "module-sympy.combinatorics.graycode"], [53, "module-sympy.combinatorics.group_constructs"], [54, "module-sympy.combinatorics.group_numbers"], [56, "module-sympy.combinatorics.named_groups"], [57, "module-sympy.combinatorics.partitions"], [59, "module-sympy.combinatorics.perm_groups"], [60, "module-sympy.combinatorics.generators"], [60, "module-sympy.combinatorics.permutations"], [61, "module-sympy.combinatorics.polyhedron"], [62, "module-sympy.combinatorics.prufer"], [63, "module-sympy.combinatorics.subsets"], [64, "module-sympy.combinatorics.tensor_can"], [65, "module-sympy.combinatorics.testutil"], [66, "module-sympy.combinatorics.util"], [68, "module-sympy.core.add"], [68, "module-sympy.core.assumptions"], [68, "module-sympy.core.basic"], [68, "module-sympy.core.cache"], [68, "module-sympy.core.containers"], [68, "module-sympy.core.evalf"], [68, "module-sympy.core.expr"], [68, "module-sympy.core.exprtools"], [68, "module-sympy.core.function"], [68, "module-sympy.core.kind"], [68, "module-sympy.core.mod"], [68, "module-sympy.core.mul"], [68, "module-sympy.core.multidimensional"], [68, "module-sympy.core.numbers"], [68, "module-sympy.core.power"], [68, "module-sympy.core.random"], [68, "module-sympy.core.relational"], [68, "module-sympy.core.singleton"], [68, "module-sympy.core.symbol"], [68, "module-sympy.core.sympify"], [68, "module-sympy.core.traversal"], [69, "module-sympy.crypto.crypto"], [70, "module-sympy.diffgeom"], [71, "module-sympy.discrete"], [71, "module-sympy.discrete.convolutions"], [71, "module-sympy.discrete.transforms"], [75, "module-sympy.functions"], [76, "module-sympy.functions.special.bessel"], [76, "module-sympy.functions.special.beta_functions"], [76, "module-sympy.functions.special.elliptic_integrals"], [76, "module-sympy.functions.special.error_functions"], [76, "module-sympy.functions.special.gamma_functions"], [76, "module-sympy.functions.special.mathieu_functions"], [76, "module-sympy.functions.special.polynomials"], [76, "module-sympy.functions.special.singularity_functions"], [76, "module-sympy.functions.special.zeta_functions"], [77, "module-sympy.geometry.curve"], [78, "module-sympy.geometry.ellipse"], [79, "module-sympy.geometry.entity"], [81, "module-sympy.geometry.line"], [82, "module-sympy.geometry.plane"], [83, "module-sympy.geometry.point"], [84, "module-sympy.geometry.polygon"], [85, "module-sympy.geometry.util"], [88, "module-sympy.holonomic"], [93, "module-sympy.integrals.meijerint"], [93, "module-sympy.integrals.meijerint_doc"], [95, "module-sympy.integrals"], [95, "module-sympy.integrals.intpoly"], [95, "module-sympy.integrals.transforms"], [96, "module-sympy.interactive"], [96, "module-sympy.interactive.printing"], [96, "module-sympy.interactive.session"], [97, "module-sympy.liealgebras"], [98, "module-sympy.logic"], [98, "module-sympy.logic.inference"], [99, "module-sympy.matrices.common"], [101, "module-sympy.matrices.expressions"], [101, "module-sympy.matrices.expressions.blockmatrix"], [102, "module-sympy.matrices.immutable"], [103, "module-sympy.matrices"], [104, "module-sympy.matrices.matrices"], [106, "module-sympy.matrices.sparse"], [107, "module-sympy.matrices.sparsetools"], [108, "module-sympy.ntheory.bbp_pi"], [108, "module-sympy.ntheory.continued_fraction"], [108, "module-sympy.ntheory.digits"], [108, "module-sympy.ntheory.ecm"], [108, "module-sympy.ntheory.egyptian_fraction"], [108, "module-sympy.ntheory.factor_"], [108, "module-sympy.ntheory.generate"], [108, "module-sympy.ntheory.modular"], [108, "module-sympy.ntheory.multinomial"], [108, "module-sympy.ntheory.partitions_"], [108, "module-sympy.ntheory.primetest"], [108, "module-sympy.ntheory.qs"], [108, "module-sympy.ntheory.residue_ntheory"], [110, "module-sympy.parsing"], [110, "module-sympy.parsing.sym_expr"], [111, "module-sympy.physics.continuum_mechanics.beam"], [113, "module-sympy.physics.continuum_mechanics.cable"], [115, "module-sympy.physics.continuum_mechanics.truss"], [118, "module-sympy.physics.control"], [119, "module-sympy.physics.control.lti"], [120, "module-sympy.physics.hep.gamma_matrices"], [121, "module-sympy.physics.hydrogen"], [122, "module-sympy.physics.matrices"], [124, "module-sympy.physics.mechanics.body"], [127, "module-sympy.physics.mechanics.joint"], [127, "module-sympy.physics.mechanics.jointsmethod"], [128, "module-sympy.physics.mechanics.kane"], [128, "module-sympy.physics.mechanics.lagrange"], [129, "module-sympy.physics.mechanics.linearize"], [131, "module-sympy.physics.mechanics.pathway"], [133, "module-sympy.physics.mechanics.system"], [134, "module-sympy.physics.mechanics.wrapping_geometry"], [145, "module-sympy.physics.mechanics"], [154, "module-sympy.physics.optics.gaussopt"], [156, "module-sympy.physics.optics.medium"], [157, "module-sympy.physics.optics.polarization"], [158, "module-sympy.physics.optics.utils"], [159, "module-sympy.physics.optics.waves"], [160, "module-sympy.physics.paulialgebra"], [161, "module-sympy.physics.qho_1d"], [162, "module-sympy.physics.quantum.anticommutator"], [163, "module-sympy.physics.quantum.cartesian"], [164, "module-sympy.physics.quantum.cg"], [165, "module-sympy.physics.quantum.circuitplot"], [166, "module-sympy.physics.quantum.commutator"], [167, "module-sympy.physics.quantum.constants"], [168, "module-sympy.physics.quantum.dagger"], [169, "module-sympy.physics.quantum.gate"], [170, "module-sympy.physics.quantum.grover"], [171, "module-sympy.physics.quantum.hilbert"], [173, "module-sympy.physics.quantum.innerproduct"], [174, "module-sympy.physics.quantum.operator"], [175, "module-sympy.physics.quantum.operatorset"], [176, "module-sympy.physics.quantum.piab"], [177, "module-sympy.physics.quantum.qapply"], [178, "module-sympy.physics.quantum.qft"], [179, "module-sympy.physics.quantum.qubit"], [180, "module-sympy.physics.quantum.represent"], [181, "module-sympy.physics.quantum.shor"], [182, "module-sympy.physics.quantum.spin"], [183, "module-sympy.physics.quantum.state"], [184, "module-sympy.physics.quantum.tensorproduct"], [185, "module-sympy.physics.secondquant"], [186, "module-sympy.physics.sho"], [187, "module-sympy.physics.units.dimensions"], [191, "module-sympy.physics.units.prefixes"], [192, "module-sympy.physics.units.quantities"], [192, "module-sympy.physics.units.util"], [193, "module-sympy.physics.units.unitsystem"], [199, "module-sympy.physics.vector.functions"], [199, "module-sympy.physics.vector.point"], [202, "module-sympy.physics.vector"], [205, "module-sympy.physics.wigner"], [206, "module-sympy.plotting.plot"], [206, "module-sympy.plotting.pygletplot"], [209, "module-sympy.polys.matrices._dfm"], [209, "module-sympy.polys.matrices._typing"], [209, "module-sympy.polys.matrices.ddm"], [209, "module-sympy.polys.matrices.dense"], [209, "module-sympy.polys.matrices.domainmatrix"], [209, "module-sympy.polys.matrices.sdm"], [213, "module-sympy.polys.polyconfig"], [213, "module-sympy.polys.polyoptions"], [215, "module-sympy.polys.numberfields.modules"], [215, "module-sympy.polys.numberfields.subfield"], [216, "module-sympy.polys"], [218, "module-sympy.polys.solvers"], [220, "module-sympy.printing.aesaracode"], [220, "module-sympy.printing.c"], [220, "module-sympy.printing.codeprinter"], [220, "module-sympy.printing.conventions"], [220, "module-sympy.printing.cxx"], [220, "module-sympy.printing.fortran"], [220, "module-sympy.printing.gtk"], [220, "module-sympy.printing.jscode"], [220, "module-sympy.printing.julia"], [220, "module-sympy.printing.lambdarepr"], [220, "module-sympy.printing.latex"], [220, "module-sympy.printing.maple"], [220, "module-sympy.printing.mathematica"], [220, "module-sympy.printing.mathml"], [220, "module-sympy.printing.octave"], [220, "module-sympy.printing.precedence"], [220, "module-sympy.printing.pretty"], [220, "module-sympy.printing.pretty.pretty"], [220, "module-sympy.printing.pretty.pretty_symbology"], [220, "module-sympy.printing.pretty.stringpict"], [220, "module-sympy.printing.preview"], [220, "module-sympy.printing.printer"], [220, "module-sympy.printing.pycode"], [220, "module-sympy.printing.python"], [220, "module-sympy.printing.rcode"], [220, "module-sympy.printing.repr"], [220, "module-sympy.printing.rust"], [220, "module-sympy.printing.smtlib"], [220, "module-sympy.printing.str"], [220, "module-sympy.printing.tree"], [228, "module-sympy.sets.conditionset"], [228, "module-sympy.sets.fancysets"], [228, "module-sympy.sets.powerset"], [228, "module-sympy.sets.sets"], [230, "module-sympy.simplify.hyperexpand_doc"], [232, "module-sympy.simplify.combsimp"], [232, "module-sympy.simplify.cse_main"], [232, "module-sympy.simplify.epathtools"], [232, "module-sympy.simplify.hyperexpand"], [232, "module-sympy.simplify.powsimp"], [232, "module-sympy.simplify.radsimp"], [232, "module-sympy.simplify.ratsimp"], [232, "module-sympy.simplify.sqrtdenest"], [232, "module-sympy.simplify.trigsimp"], [235, "module-sympy.solvers.inequalities"], [236, "module-sympy.solvers.ode"], [236, "module-sympy.solvers.ode.ode"], [237, "module-sympy.solvers.pde"], [238, "module-sympy.solvers"], [238, "module-sympy.solvers.recurr"], [239, "module-sympy.solvers.solveset"], [240, "module-sympy.stats"], [240, "module-sympy.stats.crv"], [240, "module-sympy.stats.crv_types"], [240, "module-sympy.stats.frv"], [240, "module-sympy.stats.frv_types"], [240, "module-sympy.stats.rv"], [241, "module-sympy.tensor.array"], [242, "module-sympy.tensor.array.expressions"], [243, "module-sympy.tensor"], [244, "module-sympy.tensor.index_methods"], [245, "module-sympy.tensor.indexed"], [246, "module-sympy.tensor.tensor"], [247, "module-sympy.tensor.toperators"], [248, "module-sympy.testing"], [249, "module-sympy.testing.pytest"], [250, "module-sympy.testing.randtest"], [251, "module-sympy.testing.runtests"], [252, "module-sympy.utilities.autowrap"], [253, "module-sympy.utilities.codegen"], [254, "module-sympy.utilities.decorator"], [255, "module-sympy.utilities.enumerative"], [256, "module-sympy.utilities.exceptions"], [257, "module-sympy.utilities"], [258, "module-sympy.utilities.iterables"], [259, "module-sympy.utilities.lambdify"], [260, "module-sympy.utilities.memoization"], [261, "module-sympy.utilities.misc"], [262, "module-sympy.utilities.pkgdata"], [263, "module-sympy.utilities.source"], [264, "module-sympy.utilities.timeutils"], [273, "module-sympy.vector"], [282, "module-sympy.physics"]], "sympy.simplify.simplify": [[15, "module-sympy.simplify.simplify"]], "sympy": [[38, "module-sympy"]], "sympy.abc": [[40, "module-sympy.abc"]], "quaternion (class in sympy.algebras)": [[41, "sympy.algebras.Quaternion"]], "add() (sympy.algebras.quaternion method)": [[41, "sympy.algebras.Quaternion.add"]], "angle() (sympy.algebras.quaternion method)": [[41, "sympy.algebras.Quaternion.angle"]], "arc_coplanar() (sympy.algebras.quaternion method)": [[41, "sympy.algebras.Quaternion.arc_coplanar"]], "axis() (sympy.algebras.quaternion method)": [[41, "sympy.algebras.Quaternion.axis"]], "exp() (sympy.algebras.quaternion method)": [[41, "sympy.algebras.Quaternion.exp"]], "from_matrix() (sympy.algebras.quaternion class method)": [[41, "sympy.algebras.Quaternion.from_Matrix"]], "from_axis_angle() (sympy.algebras.quaternion class method)": [[41, "sympy.algebras.Quaternion.from_axis_angle"]], "from_euler() (sympy.algebras.quaternion class method)": [[41, "sympy.algebras.Quaternion.from_euler"]], "from_rotation_matrix() (sympy.algebras.quaternion class method)": [[41, "sympy.algebras.Quaternion.from_rotation_matrix"]], "index_vector() (sympy.algebras.quaternion method)": [[41, "sympy.algebras.Quaternion.index_vector"]], "integrate() (sympy.algebras.quaternion method)": [[41, "sympy.algebras.Quaternion.integrate"]], "inverse() (sympy.algebras.quaternion method)": [[41, "sympy.algebras.Quaternion.inverse"]], "is_pure() (sympy.algebras.quaternion method)": [[41, "sympy.algebras.Quaternion.is_pure"]], "is_zero_quaternion() (sympy.algebras.quaternion method)": [[41, "sympy.algebras.Quaternion.is_zero_quaternion"]], "mensor() (sympy.algebras.quaternion method)": [[41, "sympy.algebras.Quaternion.mensor"]], "mul() (sympy.algebras.quaternion method)": [[41, "sympy.algebras.Quaternion.mul"]], "norm() (sympy.algebras.quaternion method)": [[41, "sympy.algebras.Quaternion.norm"]], "normalize() (sympy.algebras.quaternion method)": [[41, "sympy.algebras.Quaternion.normalize"]], "orthogonal() (sympy.algebras.quaternion method)": [[41, "sympy.algebras.Quaternion.orthogonal"]], "parallel() (sympy.algebras.quaternion method)": [[41, "sympy.algebras.Quaternion.parallel"]], "pow() (sympy.algebras.quaternion method)": [[41, "sympy.algebras.Quaternion.pow"]], "pow_cos_sin() (sympy.algebras.quaternion method)": [[41, "sympy.algebras.Quaternion.pow_cos_sin"]], "product_matrix_left (sympy.algebras.quaternion property)": [[41, "sympy.algebras.Quaternion.product_matrix_left"]], "product_matrix_right (sympy.algebras.quaternion property)": [[41, "sympy.algebras.Quaternion.product_matrix_right"]], "rotate_point() (sympy.algebras.quaternion static method)": [[41, "sympy.algebras.Quaternion.rotate_point"]], "scalar_part() (sympy.algebras.quaternion method)": [[41, "sympy.algebras.Quaternion.scalar_part"]], "set_norm() (sympy.algebras.quaternion method)": [[41, "sympy.algebras.Quaternion.set_norm"]], "sympy.algebras": [[41, "module-sympy.algebras"]], "to_matrix() (sympy.algebras.quaternion method)": [[41, "sympy.algebras.Quaternion.to_Matrix"]], "to_axis_angle() (sympy.algebras.quaternion method)": [[41, "sympy.algebras.Quaternion.to_axis_angle"]], "to_euler() (sympy.algebras.quaternion method)": [[41, "sympy.algebras.Quaternion.to_euler"]], "to_rotation_matrix() (sympy.algebras.quaternion method)": [[41, "sympy.algebras.Quaternion.to_rotation_matrix"]], "vector_coplanar() (sympy.algebras.quaternion class method)": [[41, "sympy.algebras.Quaternion.vector_coplanar"]], "vector_part() (sympy.algebras.quaternion method)": [[41, "sympy.algebras.Quaternion.vector_part"]], "assumptionkeys (class in sympy.assumptions.ask)": [[42, "sympy.assumptions.ask.AssumptionKeys"]], "ask() (in module sympy.assumptions.ask)": [[42, "sympy.assumptions.ask.ask"]], "register_handler() (in module sympy.assumptions.ask)": [[42, "sympy.assumptions.ask.register_handler"]], "remove_handler() (in module sympy.assumptions.ask)": [[42, "sympy.assumptions.ask.remove_handler"]], "sympy.assumptions.ask": [[42, "module-sympy.assumptions.ask"]], "appliedpredicate (class in sympy.assumptions.assume)": [[43, "sympy.assumptions.assume.AppliedPredicate"]], "assumptionscontext (class in sympy.assumptions.assume)": [[43, "sympy.assumptions.assume.AssumptionsContext"]], "predicate (class in sympy.assumptions.assume)": [[43, "sympy.assumptions.assume.Predicate"]], "undefinedpredicate (class in sympy.assumptions.assume)": [[43, "sympy.assumptions.assume.UndefinedPredicate"]], "add() (sympy.assumptions.assume.assumptionscontext method)": [[43, "sympy.assumptions.assume.AssumptionsContext.add"]], "arg (sympy.assumptions.assume.appliedpredicate property)": [[43, "sympy.assumptions.assume.AppliedPredicate.arg"]], "arguments (sympy.assumptions.assume.appliedpredicate property)": [[43, "sympy.assumptions.assume.AppliedPredicate.arguments"]], "assuming() (in module sympy.assumptions.assume)": [[43, "sympy.assumptions.assume.assuming"]], "eval() (sympy.assumptions.assume.predicate method)": [[43, "sympy.assumptions.assume.Predicate.eval"]], "function (sympy.assumptions.assume.appliedpredicate property)": [[43, "sympy.assumptions.assume.AppliedPredicate.function"]], "handler (sympy.assumptions.assume.predicate attribute)": [[43, "sympy.assumptions.assume.Predicate.handler"]], "register() (sympy.assumptions.assume.predicate class method)": [[43, "sympy.assumptions.assume.Predicate.register"]], "register_many() (sympy.assumptions.assume.predicate class method)": [[43, "sympy.assumptions.assume.Predicate.register_many"]], "sympy.assumptions.assume": [[43, "module-sympy.assumptions.assume"]], "sympy.assumptions": [[44, "module-sympy.assumptions"]], "algebraichandler (sympy.assumptions.predicates.sets.algebraicpredicate attribute)": [[45, "sympy.assumptions.predicates.sets.AlgebraicPredicate.AlgebraicHandler"]], "algebraicpredicate (class in sympy.assumptions.predicates.sets)": [[45, "sympy.assumptions.predicates.sets.AlgebraicPredicate"]], "antihermitianpredicate (class in sympy.assumptions.predicates.sets)": [[45, "sympy.assumptions.predicates.sets.AntihermitianPredicate"]], "commutativepredicate (class in sympy.assumptions.predicates.common)": [[45, "sympy.assumptions.predicates.common.CommutativePredicate"]], "complexelementspredicate (class in sympy.assumptions.predicates.matrices)": [[45, "sympy.assumptions.predicates.matrices.ComplexElementsPredicate"]], "complexpredicate (class in sympy.assumptions.predicates.sets)": [[45, "sympy.assumptions.predicates.sets.ComplexPredicate"]], "compositepredicate (class in sympy.assumptions.predicates.ntheory)": [[45, "sympy.assumptions.predicates.ntheory.CompositePredicate"]], "diagonalpredicate (class in sympy.assumptions.predicates.matrices)": [[45, "sympy.assumptions.predicates.matrices.DiagonalPredicate"]], "evenpredicate (class in sympy.assumptions.predicates.ntheory)": [[45, "sympy.assumptions.predicates.ntheory.EvenPredicate"]], "extendedrealpredicate (class in sympy.assumptions.predicates.sets)": [[45, "sympy.assumptions.predicates.sets.ExtendedRealPredicate"]], "finitepredicate (class in sympy.assumptions.predicates.calculus)": [[45, "sympy.assumptions.predicates.calculus.FinitePredicate"]], "fullrankpredicate (class in sympy.assumptions.predicates.matrices)": [[45, "sympy.assumptions.predicates.matrices.FullRankPredicate"]], "hermitianpredicate (class in sympy.assumptions.predicates.sets)": [[45, "sympy.assumptions.predicates.sets.HermitianPredicate"]], "imaginarypredicate (class in sympy.assumptions.predicates.sets)": [[45, "sympy.assumptions.predicates.sets.ImaginaryPredicate"]], "infinitepredicate (class in sympy.assumptions.predicates.calculus)": [[45, "sympy.assumptions.predicates.calculus.InfinitePredicate"]], "integerelementspredicate (class in sympy.assumptions.predicates.matrices)": [[45, "sympy.assumptions.predicates.matrices.IntegerElementsPredicate"]], "integerpredicate (class in sympy.assumptions.predicates.sets)": [[45, "sympy.assumptions.predicates.sets.IntegerPredicate"]], "invertiblepredicate (class in sympy.assumptions.predicates.matrices)": [[45, "sympy.assumptions.predicates.matrices.InvertiblePredicate"]], "irrationalpredicate (class in sympy.assumptions.predicates.sets)": [[45, "sympy.assumptions.predicates.sets.IrrationalPredicate"]], "istruepredicate (class in sympy.assumptions.predicates.common)": [[45, "sympy.assumptions.predicates.common.IsTruePredicate"]], "lowertriangularpredicate (class in sympy.assumptions.predicates.matrices)": [[45, "sympy.assumptions.predicates.matrices.LowerTriangularPredicate"]], "negativepredicate (class in sympy.assumptions.predicates.order)": [[45, "sympy.assumptions.predicates.order.NegativePredicate"]], "nonnegativepredicate (class in sympy.assumptions.predicates.order)": [[45, "sympy.assumptions.predicates.order.NonNegativePredicate"]], "nonpositivepredicate (class in sympy.assumptions.predicates.order)": [[45, "sympy.assumptions.predicates.order.NonPositivePredicate"]], "nonzeropredicate (class in sympy.assumptions.predicates.order)": [[45, "sympy.assumptions.predicates.order.NonZeroPredicate"]], "normalpredicate (class in sympy.assumptions.predicates.matrices)": [[45, "sympy.assumptions.predicates.matrices.NormalPredicate"]], "oddpredicate (class in sympy.assumptions.predicates.ntheory)": [[45, "sympy.assumptions.predicates.ntheory.OddPredicate"]], "orthogonalpredicate (class in sympy.assumptions.predicates.matrices)": [[45, "sympy.assumptions.predicates.matrices.OrthogonalPredicate"]], "positivedefinitepredicate (class in sympy.assumptions.predicates.matrices)": [[45, "sympy.assumptions.predicates.matrices.PositiveDefinitePredicate"]], "positivepredicate (class in sympy.assumptions.predicates.order)": [[45, "sympy.assumptions.predicates.order.PositivePredicate"]], "primepredicate (class in sympy.assumptions.predicates.ntheory)": [[45, "sympy.assumptions.predicates.ntheory.PrimePredicate"]], "rationalpredicate (class in sympy.assumptions.predicates.sets)": [[45, "sympy.assumptions.predicates.sets.RationalPredicate"]], "realelementspredicate (class in sympy.assumptions.predicates.matrices)": [[45, "sympy.assumptions.predicates.matrices.RealElementsPredicate"]], "realpredicate (class in sympy.assumptions.predicates.sets)": [[45, "sympy.assumptions.predicates.sets.RealPredicate"]], "singularpredicate (class in sympy.assumptions.predicates.matrices)": [[45, "sympy.assumptions.predicates.matrices.SingularPredicate"]], "squarepredicate (class in sympy.assumptions.predicates.matrices)": [[45, "sympy.assumptions.predicates.matrices.SquarePredicate"]], "symmetricpredicate (class in sympy.assumptions.predicates.matrices)": [[45, "sympy.assumptions.predicates.matrices.SymmetricPredicate"]], "transcendentalpredicate (class in sympy.assumptions.predicates.sets)": [[45, "sympy.assumptions.predicates.sets.TranscendentalPredicate"]], "triangularpredicate (class in sympy.assumptions.predicates.matrices)": [[45, "sympy.assumptions.predicates.matrices.TriangularPredicate"]], "unittriangularpredicate (class in sympy.assumptions.predicates.matrices)": [[45, "sympy.assumptions.predicates.matrices.UnitTriangularPredicate"]], "unitarypredicate (class in sympy.assumptions.predicates.matrices)": [[45, "sympy.assumptions.predicates.matrices.UnitaryPredicate"]], "uppertriangularpredicate (class in sympy.assumptions.predicates.matrices)": [[45, "sympy.assumptions.predicates.matrices.UpperTriangularPredicate"]], "zeropredicate (class in sympy.assumptions.predicates.order)": [[45, "sympy.assumptions.predicates.order.ZeroPredicate"]], "handler (sympy.assumptions.predicates.calculus.finitepredicate attribute)": [[45, "sympy.assumptions.predicates.calculus.FinitePredicate.handler"]], "handler (sympy.assumptions.predicates.calculus.infinitepredicate attribute)": [[45, "sympy.assumptions.predicates.calculus.InfinitePredicate.handler"]], "handler (sympy.assumptions.predicates.common.commutativepredicate attribute)": [[45, "sympy.assumptions.predicates.common.CommutativePredicate.handler"]], "handler (sympy.assumptions.predicates.common.istruepredicate attribute)": [[45, "sympy.assumptions.predicates.common.IsTruePredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.complexelementspredicate attribute)": [[45, "sympy.assumptions.predicates.matrices.ComplexElementsPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.diagonalpredicate attribute)": [[45, "sympy.assumptions.predicates.matrices.DiagonalPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.fullrankpredicate attribute)": [[45, "sympy.assumptions.predicates.matrices.FullRankPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.integerelementspredicate attribute)": [[45, "sympy.assumptions.predicates.matrices.IntegerElementsPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.invertiblepredicate attribute)": [[45, "sympy.assumptions.predicates.matrices.InvertiblePredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.lowertriangularpredicate attribute)": [[45, "sympy.assumptions.predicates.matrices.LowerTriangularPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.normalpredicate attribute)": [[45, "sympy.assumptions.predicates.matrices.NormalPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.orthogonalpredicate attribute)": [[45, "sympy.assumptions.predicates.matrices.OrthogonalPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.positivedefinitepredicate attribute)": [[45, "sympy.assumptions.predicates.matrices.PositiveDefinitePredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.realelementspredicate attribute)": [[45, "sympy.assumptions.predicates.matrices.RealElementsPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.singularpredicate attribute)": [[45, "sympy.assumptions.predicates.matrices.SingularPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.squarepredicate attribute)": [[45, "sympy.assumptions.predicates.matrices.SquarePredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.symmetricpredicate attribute)": [[45, "sympy.assumptions.predicates.matrices.SymmetricPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.triangularpredicate attribute)": [[45, "sympy.assumptions.predicates.matrices.TriangularPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.unittriangularpredicate attribute)": [[45, "sympy.assumptions.predicates.matrices.UnitTriangularPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.unitarypredicate attribute)": [[45, "sympy.assumptions.predicates.matrices.UnitaryPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.uppertriangularpredicate attribute)": [[45, "sympy.assumptions.predicates.matrices.UpperTriangularPredicate.handler"]], "handler (sympy.assumptions.predicates.ntheory.compositepredicate attribute)": [[45, "sympy.assumptions.predicates.ntheory.CompositePredicate.handler"]], "handler (sympy.assumptions.predicates.ntheory.evenpredicate attribute)": [[45, "sympy.assumptions.predicates.ntheory.EvenPredicate.handler"]], "handler (sympy.assumptions.predicates.ntheory.oddpredicate attribute)": [[45, "sympy.assumptions.predicates.ntheory.OddPredicate.handler"]], "handler (sympy.assumptions.predicates.ntheory.primepredicate attribute)": [[45, "sympy.assumptions.predicates.ntheory.PrimePredicate.handler"]], "handler (sympy.assumptions.predicates.order.negativepredicate attribute)": [[45, "sympy.assumptions.predicates.order.NegativePredicate.handler"]], "handler (sympy.assumptions.predicates.order.nonnegativepredicate attribute)": [[45, "sympy.assumptions.predicates.order.NonNegativePredicate.handler"]], "handler (sympy.assumptions.predicates.order.nonpositivepredicate attribute)": [[45, "sympy.assumptions.predicates.order.NonPositivePredicate.handler"]], "handler (sympy.assumptions.predicates.order.nonzeropredicate attribute)": [[45, "sympy.assumptions.predicates.order.NonZeroPredicate.handler"]], "handler (sympy.assumptions.predicates.order.positivepredicate attribute)": [[45, "sympy.assumptions.predicates.order.PositivePredicate.handler"]], "handler (sympy.assumptions.predicates.order.zeropredicate attribute)": [[45, "sympy.assumptions.predicates.order.ZeroPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.algebraicpredicate attribute)": [[45, "sympy.assumptions.predicates.sets.AlgebraicPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.antihermitianpredicate attribute)": [[45, "sympy.assumptions.predicates.sets.AntihermitianPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.complexpredicate attribute)": [[45, "sympy.assumptions.predicates.sets.ComplexPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.extendedrealpredicate attribute)": [[45, "sympy.assumptions.predicates.sets.ExtendedRealPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.hermitianpredicate attribute)": [[45, "sympy.assumptions.predicates.sets.HermitianPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.imaginarypredicate attribute)": [[45, "sympy.assumptions.predicates.sets.ImaginaryPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.integerpredicate attribute)": [[45, "sympy.assumptions.predicates.sets.IntegerPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.irrationalpredicate attribute)": [[45, "sympy.assumptions.predicates.sets.IrrationalPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.rationalpredicate attribute)": [[45, "sympy.assumptions.predicates.sets.RationalPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.realpredicate attribute)": [[45, "sympy.assumptions.predicates.sets.RealPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.transcendentalpredicate attribute)": [[45, "sympy.assumptions.predicates.sets.TranscendentalPredicate.handler"]], "sympy.assumptions.predicates": [[45, "module-sympy.assumptions.predicates"]], "refine() (in module sympy.assumptions.refine)": [[46, "sympy.assumptions.refine.refine"]], "refine_pow() (in module sympy.assumptions.refine)": [[46, "sympy.assumptions.refine.refine_Pow"]], "refine_abs() (in module sympy.assumptions.refine)": [[46, "sympy.assumptions.refine.refine_abs"]], "refine_arg() (in module sympy.assumptions.refine)": [[46, "sympy.assumptions.refine.refine_arg"]], "refine_atan2() (in module sympy.assumptions.refine)": [[46, "sympy.assumptions.refine.refine_atan2"]], "refine_im() (in module sympy.assumptions.refine)": [[46, "sympy.assumptions.refine.refine_im"]], "refine_matrixelement() (in module sympy.assumptions.refine)": [[46, "sympy.assumptions.refine.refine_matrixelement"]], "refine_re() (in module sympy.assumptions.refine)": [[46, "sympy.assumptions.refine.refine_re"]], "refine_sign() (in module sympy.assumptions.refine)": [[46, "sympy.assumptions.refine.refine_sign"]], "sympy.assumptions.refine": [[46, "module-sympy.assumptions.refine"]], "apply_finite_diff() (in module sympy.calculus.finite_diff)": [[47, "sympy.calculus.finite_diff.apply_finite_diff"]], "continuous_domain() (in module sympy.calculus.util)": [[47, "sympy.calculus.util.continuous_domain"]], "differentiate_finite() (in module sympy.calculus.finite_diff)": [[47, "sympy.calculus.finite_diff.differentiate_finite"]], "euler_equations() (in module sympy.calculus.euler)": [[47, "sympy.calculus.euler.euler_equations"]], "finite_diff_weights() (in module sympy.calculus.finite_diff)": [[47, "sympy.calculus.finite_diff.finite_diff_weights"]], "function_range() (in module sympy.calculus.util)": [[47, "sympy.calculus.util.function_range"]], "is_convex() (in module sympy.calculus.util)": [[47, "sympy.calculus.util.is_convex"]], "is_decreasing() (in module sympy.calculus.singularities)": [[47, "sympy.calculus.singularities.is_decreasing"]], "is_increasing() (in module sympy.calculus.singularities)": [[47, "sympy.calculus.singularities.is_increasing"]], "is_monotonic() (in module sympy.calculus.singularities)": [[47, "sympy.calculus.singularities.is_monotonic"]], "is_strictly_decreasing() (in module sympy.calculus.singularities)": [[47, "sympy.calculus.singularities.is_strictly_decreasing"]], "is_strictly_increasing() (in module sympy.calculus.singularities)": [[47, "sympy.calculus.singularities.is_strictly_increasing"]], "lcim() (in module sympy.calculus.util)": [[47, "sympy.calculus.util.lcim"]], "maximum() (in module sympy.calculus.util)": [[47, "sympy.calculus.util.maximum"]], "minimum() (in module sympy.calculus.util)": [[47, "sympy.calculus.util.minimum"]], "monotonicity_helper() (in module sympy.calculus.singularities)": [[47, "sympy.calculus.singularities.monotonicity_helper"]], "not_empty_in() (in module sympy.calculus.util)": [[47, "sympy.calculus.util.not_empty_in"]], "periodicity() (in module sympy.calculus.util)": [[47, "sympy.calculus.util.periodicity"]], "singularities() (in module sympy.calculus.singularities)": [[47, "sympy.calculus.singularities.singularities"]], "stationary_points() (in module sympy.calculus.util)": [[47, "sympy.calculus.util.stationary_points"]], "sympy.calculus": [[47, "module-sympy.calculus"]], "sympy.calculus.euler": [[47, "module-sympy.calculus.euler"]], "sympy.calculus.finite_diff": [[47, "module-sympy.calculus.finite_diff"]], "sympy.calculus.singularities": [[47, "module-sympy.calculus.singularities"]], "sympy.calculus.util": [[47, "module-sympy.calculus.util"]], "arrowstringdescription (class in sympy.categories.diagram_drawing)": [[48, "sympy.categories.diagram_drawing.ArrowStringDescription"]], "category (class in sympy.categories)": [[48, "sympy.categories.Category"]], "compositemorphism (class in sympy.categories)": [[48, "sympy.categories.CompositeMorphism"]], "diagram (class in sympy.categories)": [[48, "sympy.categories.Diagram"]], "diagramgrid (class in sympy.categories.diagram_drawing)": [[48, "sympy.categories.diagram_drawing.DiagramGrid"]], "identitymorphism (class in sympy.categories)": [[48, "sympy.categories.IdentityMorphism"]], "morphism (class in sympy.categories)": [[48, "sympy.categories.Morphism"]], "namedmorphism (class in sympy.categories)": [[48, "sympy.categories.NamedMorphism"]], "object (class in sympy.categories)": [[48, "sympy.categories.Object"]], "xypicdiagramdrawer (class in sympy.categories.diagram_drawing)": [[48, "sympy.categories.diagram_drawing.XypicDiagramDrawer"]], "codomain (sympy.categories.compositemorphism property)": [[48, "sympy.categories.CompositeMorphism.codomain"]], "codomain (sympy.categories.morphism property)": [[48, "sympy.categories.Morphism.codomain"]], "commutative_diagrams (sympy.categories.category property)": [[48, "sympy.categories.Category.commutative_diagrams"]], "components (sympy.categories.compositemorphism property)": [[48, "sympy.categories.CompositeMorphism.components"]], "compose() (sympy.categories.morphism method)": [[48, "sympy.categories.Morphism.compose"]], "conclusions (sympy.categories.diagram property)": [[48, "sympy.categories.Diagram.conclusions"]], "domain (sympy.categories.compositemorphism property)": [[48, "sympy.categories.CompositeMorphism.domain"]], "domain (sympy.categories.morphism property)": [[48, "sympy.categories.Morphism.domain"]], "draw() (sympy.categories.diagram_drawing.xypicdiagramdrawer method)": [[48, "sympy.categories.diagram_drawing.XypicDiagramDrawer.draw"]], "flatten() (sympy.categories.compositemorphism method)": [[48, "sympy.categories.CompositeMorphism.flatten"]], "height (sympy.categories.diagram_drawing.diagramgrid property)": [[48, "sympy.categories.diagram_drawing.DiagramGrid.height"]], "hom() (sympy.categories.diagram method)": [[48, "sympy.categories.Diagram.hom"]], "is_subdiagram() (sympy.categories.diagram method)": [[48, "sympy.categories.Diagram.is_subdiagram"]], "morphisms (sympy.categories.diagram_drawing.diagramgrid property)": [[48, "sympy.categories.diagram_drawing.DiagramGrid.morphisms"]], "name (sympy.categories.category property)": [[48, "sympy.categories.Category.name"]], "name (sympy.categories.namedmorphism property)": [[48, "sympy.categories.NamedMorphism.name"]], "objects (sympy.categories.category property)": [[48, "sympy.categories.Category.objects"]], "objects (sympy.categories.diagram property)": [[48, "sympy.categories.Diagram.objects"]], "premises (sympy.categories.diagram property)": [[48, "sympy.categories.Diagram.premises"]], "preview_diagram() (in module sympy.categories.diagram_drawing)": [[48, "sympy.categories.diagram_drawing.preview_diagram"]], "subdiagram_from_objects() (sympy.categories.diagram method)": [[48, "sympy.categories.Diagram.subdiagram_from_objects"]], "sympy.categories": [[48, "module-sympy.categories"]], "sympy.categories.diagram_drawing": [[48, "module-sympy.categories.diagram_drawing"]], "width (sympy.categories.diagram_drawing.diagramgrid property)": [[48, "sympy.categories.diagram_drawing.DiagramGrid.width"]], "xypic_draw_diagram() (in module sympy.categories.diagram_drawing)": [[48, "sympy.categories.diagram_drawing.xypic_draw_diagram"]], "arrayconstructor (class in sympy.codegen.fnodes)": [[49, "sympy.codegen.fnodes.ArrayConstructor"]], "assignment (class in sympy.codegen.ast)": [[49, "sympy.codegen.ast.Assignment"]], "assignmentbase (class in sympy.codegen.ast)": [[49, "sympy.codegen.ast.AssignmentBase"]], "attribute (class in sympy.codegen.ast)": [[49, "sympy.codegen.ast.Attribute"]], "augmentedassignment (class in sympy.codegen.ast)": [[49, "sympy.codegen.ast.AugmentedAssignment"]], "breaktoken (class in sympy.codegen.ast)": [[49, "sympy.codegen.ast.BreakToken"]], "cbrt (class in sympy.codegen.cfunctions)": [[49, "sympy.codegen.cfunctions.Cbrt"]], "codeblock (class in sympy.codegen.ast)": [[49, "sympy.codegen.ast.CodeBlock"]], "commaoperator (class in sympy.codegen.cnodes)": [[49, "sympy.codegen.cnodes.CommaOperator"]], "comment (class in sympy.codegen.ast)": [[49, "sympy.codegen.ast.Comment"]], "complextype (class in sympy.codegen.ast)": [[49, "sympy.codegen.ast.ComplexType"]], "continuetoken (class in sympy.codegen.ast)": [[49, "sympy.codegen.ast.ContinueToken"]], "declaration (class in sympy.codegen.ast)": [[49, "sympy.codegen.ast.Declaration"]], "do (class in sympy.codegen.fnodes)": [[49, "sympy.codegen.fnodes.Do"]], "element (class in sympy.codegen.ast)": [[49, "sympy.codegen.ast.Element"]], "extent (class in sympy.codegen.fnodes)": [[49, "sympy.codegen.fnodes.Extent"]], "floatbasetype (class in sympy.codegen.ast)": [[49, "sympy.codegen.ast.FloatBaseType"]], "floattype (class in sympy.codegen.ast)": [[49, "sympy.codegen.ast.FloatType"]], "for (class in sympy.codegen.ast)": [[49, "sympy.codegen.ast.For"]], "fortranreturn (class in sympy.codegen.fnodes)": [[49, "sympy.codegen.fnodes.FortranReturn"]], "funcminusoneoptim (class in sympy.codegen.rewriting)": [[49, "sympy.codegen.rewriting.FuncMinusOneOptim"]], "functioncall (class in sympy.codegen.ast)": [[49, "sympy.codegen.ast.FunctionCall"]], "functiondefinition (class in sympy.codegen.ast)": [[49, "sympy.codegen.ast.FunctionDefinition"]], "functionprototype (class in sympy.codegen.ast)": [[49, "sympy.codegen.ast.FunctionPrototype"]], "goto (class in sympy.codegen.fnodes)": [[49, "sympy.codegen.fnodes.GoTo"]], "implieddoloop (class in sympy.codegen.fnodes)": [[49, "sympy.codegen.fnodes.ImpliedDoLoop"]], "intbasetype (class in sympy.codegen.ast)": [[49, "sympy.codegen.ast.IntBaseType"]], "label (class in sympy.codegen.cnodes)": [[49, "sympy.codegen.cnodes.Label"]], "matrixsolve (class in sympy.codegen.matrix_nodes)": [[49, "sympy.codegen.matrix_nodes.MatrixSolve"]], "module (class in sympy.codegen.fnodes)": [[49, "sympy.codegen.fnodes.Module"]], "node (class in sympy.codegen.ast)": [[49, "sympy.codegen.ast.Node"]], "nonetoken (class in sympy.codegen.ast)": [[49, "sympy.codegen.ast.NoneToken"]], "optimization (class in sympy.codegen.rewriting)": [[49, "sympy.codegen.rewriting.Optimization"]], "pointer (class in sympy.codegen.ast)": [[49, "sympy.codegen.ast.Pointer"]], "postdecrement (class in sympy.codegen.cnodes)": [[49, "sympy.codegen.cnodes.PostDecrement"]], "postincrement (class in sympy.codegen.cnodes)": [[49, "sympy.codegen.cnodes.PostIncrement"]], "predecrement (class in sympy.codegen.cnodes)": [[49, "sympy.codegen.cnodes.PreDecrement"]], "preincrement (class in sympy.codegen.cnodes)": [[49, "sympy.codegen.cnodes.PreIncrement"]], "print (class in sympy.codegen.ast)": [[49, "sympy.codegen.ast.Print"]], "program (class in sympy.codegen.fnodes)": [[49, "sympy.codegen.fnodes.Program"]], "quotedstring (class in sympy.codegen.ast)": [[49, "sympy.codegen.ast.QuotedString"]], "raise (class in sympy.codegen.ast)": [[49, "sympy.codegen.ast.Raise"]], "replaceoptim (class in sympy.codegen.rewriting)": [[49, "sympy.codegen.rewriting.ReplaceOptim"]], "return (class in sympy.codegen.ast)": [[49, "sympy.codegen.ast.Return"]], "runtimeerror_ (class in sympy.codegen.ast)": [[49, "sympy.codegen.ast.RuntimeError_"]], "scope (class in sympy.codegen.ast)": [[49, "sympy.codegen.ast.Scope"]], "seriesapprox (class in sympy.codegen.approximations)": [[49, "sympy.codegen.approximations.SeriesApprox"]], "signedinttype (class in sympy.codegen.ast)": [[49, "sympy.codegen.ast.SignedIntType"]], "sqrt (class in sympy.codegen.cfunctions)": [[49, "sympy.codegen.cfunctions.Sqrt"]], "stream (class in sympy.codegen.ast)": [[49, "sympy.codegen.ast.Stream"]], "string (class in sympy.codegen.ast)": [[49, "sympy.codegen.ast.String"]], "subroutine (class in sympy.codegen.fnodes)": [[49, "sympy.codegen.fnodes.Subroutine"]], "subroutinecall (class in sympy.codegen.fnodes)": [[49, "sympy.codegen.fnodes.SubroutineCall"]], "sumapprox (class in sympy.codegen.approximations)": [[49, "sympy.codegen.approximations.SumApprox"]], "token (class in sympy.codegen.ast)": [[49, "sympy.codegen.ast.Token"]], "type (class in sympy.codegen.ast)": [[49, "sympy.codegen.ast.Type"]], "unsignedinttype (class in sympy.codegen.ast)": [[49, "sympy.codegen.ast.UnsignedIntType"]], "variable (class in sympy.codegen.ast)": [[49, "sympy.codegen.ast.Variable"]], "while (class in sympy.codegen.ast)": [[49, "sympy.codegen.ast.While"]], "alignof() (in module sympy.codegen.cnodes)": [[49, "sympy.codegen.cnodes.alignof"]], "allocated() (in module sympy.codegen.fnodes)": [[49, "sympy.codegen.fnodes.allocated"]], "array() (in module sympy.codegen.fnodes)": [[49, "sympy.codegen.fnodes.array"]], "as_declaration() (sympy.codegen.ast.variable method)": [[49, "sympy.codegen.ast.Variable.as_Declaration"]], "attr_params() (sympy.codegen.ast.node method)": [[49, "sympy.codegen.ast.Node.attr_params"]], "aug_assign() (in module sympy.codegen.ast)": [[49, "sympy.codegen.ast.aug_assign"]], "bind_c() (in module sympy.codegen.fnodes)": [[49, "sympy.codegen.fnodes.bind_C"]], "cast_check() (sympy.codegen.ast.type method)": [[49, "sympy.codegen.ast.Type.cast_check"]], "cast_nocheck (sympy.codegen.ast.floatbasetype attribute)": [[49, "sympy.codegen.ast.FloatBaseType.cast_nocheck"]], "cast_nocheck() (sympy.codegen.ast.floattype method)": [[49, "sympy.codegen.ast.FloatType.cast_nocheck"]], "cmplx (class in sympy.codegen.fnodes)": [[49, "sympy.codegen.fnodes.cmplx"]], "create_expand_pow_optimization() (in module sympy.codegen.rewriting)": [[49, "sympy.codegen.rewriting.create_expand_pow_optimization"]], "cse() (sympy.codegen.ast.codeblock method)": [[49, "sympy.codegen.ast.CodeBlock.cse"]], "decimal_dig (sympy.codegen.ast.floattype property)": [[49, "sympy.codegen.ast.FloatType.decimal_dig"]], "deduced() (sympy.codegen.ast.variable class method)": [[49, "sympy.codegen.ast.Variable.deduced"]], "dig (sympy.codegen.ast.floattype property)": [[49, "sympy.codegen.ast.FloatType.dig"]], "dimension() (in module sympy.codegen.fnodes)": [[49, "sympy.codegen.fnodes.dimension"]], "dsign (class in sympy.codegen.fnodes)": [[49, "sympy.codegen.fnodes.dsign"]], "eps (sympy.codegen.ast.floattype property)": [[49, "sympy.codegen.ast.FloatType.eps"]], "exp2 (class in sympy.codegen.cfunctions)": [[49, "sympy.codegen.cfunctions.exp2"]], "expm1 (class in sympy.codegen.cfunctions)": [[49, "sympy.codegen.cfunctions.expm1"]], "fdiff() (sympy.codegen.cfunctions.cbrt method)": [[49, "sympy.codegen.cfunctions.Cbrt.fdiff"]], "fdiff() (sympy.codegen.cfunctions.sqrt method)": [[49, "sympy.codegen.cfunctions.Sqrt.fdiff"]], "fdiff() (sympy.codegen.cfunctions.exp2 method)": [[49, "sympy.codegen.cfunctions.exp2.fdiff"]], "fdiff() (sympy.codegen.cfunctions.expm1 method)": [[49, "sympy.codegen.cfunctions.expm1.fdiff"]], "fdiff() (sympy.codegen.cfunctions.fma method)": [[49, "sympy.codegen.cfunctions.fma.fdiff"]], "fdiff() (sympy.codegen.cfunctions.hypot method)": [[49, "sympy.codegen.cfunctions.hypot.fdiff"]], "fdiff() (sympy.codegen.cfunctions.log10 method)": [[49, "sympy.codegen.cfunctions.log10.fdiff"]], "fdiff() (sympy.codegen.cfunctions.log1p method)": [[49, "sympy.codegen.cfunctions.log1p.fdiff"]], "fdiff() (sympy.codegen.cfunctions.log2 method)": [[49, "sympy.codegen.cfunctions.log2.fdiff"]], "fma (class in sympy.codegen.cfunctions)": [[49, "sympy.codegen.cfunctions.fma"]], "from_expr() (sympy.codegen.ast.type class method)": [[49, "sympy.codegen.ast.Type.from_expr"]], "goto (class in sympy.codegen.cnodes)": [[49, "sympy.codegen.cnodes.goto"]], "hypot (class in sympy.codegen.cfunctions)": [[49, "sympy.codegen.cfunctions.hypot"]], "isign (class in sympy.codegen.fnodes)": [[49, "sympy.codegen.fnodes.isign"]], "kind (class in sympy.codegen.fnodes)": [[49, "sympy.codegen.fnodes.kind"]], "kwargs() (sympy.codegen.ast.token method)": [[49, "sympy.codegen.ast.Token.kwargs"]], "lbound() (in module sympy.codegen.fnodes)": [[49, "sympy.codegen.fnodes.lbound"]], "literal_dp (class in sympy.codegen.fnodes)": [[49, "sympy.codegen.fnodes.literal_dp"]], "literal_sp (class in sympy.codegen.fnodes)": [[49, "sympy.codegen.fnodes.literal_sp"]], "log10 (class in sympy.codegen.cfunctions)": [[49, "sympy.codegen.cfunctions.log10"]], "log1p (class in sympy.codegen.cfunctions)": [[49, "sympy.codegen.cfunctions.log1p"]], "log2 (class in sympy.codegen.cfunctions)": [[49, "sympy.codegen.cfunctions.log2"]], "max (sympy.codegen.ast.floattype property)": [[49, "sympy.codegen.ast.FloatType.max"]], "max_exponent (sympy.codegen.ast.floattype property)": [[49, "sympy.codegen.ast.FloatType.max_exponent"]], "merge (class in sympy.codegen.fnodes)": [[49, "sympy.codegen.fnodes.merge"]], "min_exponent (sympy.codegen.ast.floattype property)": [[49, "sympy.codegen.ast.FloatType.min_exponent"]], "newtons_method() (in module sympy.codegen.algorithms)": [[49, "sympy.codegen.algorithms.newtons_method"]], "newtons_method_function() (in module sympy.codegen.algorithms)": [[49, "sympy.codegen.algorithms.newtons_method_function"]], "optimize() (in module sympy.codegen.rewriting)": [[49, "sympy.codegen.rewriting.optimize"]], "render_as_module() (in module sympy.codegen.futils)": [[49, "sympy.codegen.futils.render_as_module"]], "render_as_module() (in module sympy.codegen.pyutils)": [[49, "sympy.codegen.pyutils.render_as_module"]], "render_as_source_file() (in module sympy.codegen.cutils)": [[49, "sympy.codegen.cutils.render_as_source_file"]], "replace_in_add() (sympy.codegen.rewriting.funcminusoneoptim method)": [[49, "sympy.codegen.rewriting.FuncMinusOneOptim.replace_in_Add"]], "reshape() (in module sympy.codegen.fnodes)": [[49, "sympy.codegen.fnodes.reshape"]], "shape() (in module sympy.codegen.fnodes)": [[49, "sympy.codegen.fnodes.shape"]], "size() (in module sympy.codegen.fnodes)": [[49, "sympy.codegen.fnodes.size"]], "sizeof() (in module sympy.codegen.cnodes)": [[49, "sympy.codegen.cnodes.sizeof"]], "struct (class in sympy.codegen.cnodes)": [[49, "sympy.codegen.cnodes.struct"]], "sympy.codegen.algorithms": [[49, "module-sympy.codegen.algorithms"]], "sympy.codegen.approximations": [[49, "module-sympy.codegen.approximations"]], "sympy.codegen.ast": [[49, "module-sympy.codegen.ast"]], "sympy.codegen.cfunctions": [[49, "module-sympy.codegen.cfunctions"]], "sympy.codegen.cnodes": [[49, "module-sympy.codegen.cnodes"]], "sympy.codegen.cutils": [[49, "module-sympy.codegen.cutils"]], "sympy.codegen.cxxnodes": [[49, "module-sympy.codegen.cxxnodes"]], "sympy.codegen.fnodes": [[49, "module-sympy.codegen.fnodes"]], "sympy.codegen.futils": [[49, "module-sympy.codegen.futils"]], "sympy.codegen.matrix_nodes": [[49, "module-sympy.codegen.matrix_nodes"]], "sympy.codegen.pyutils": [[49, "module-sympy.codegen.pyutils"]], "sympy.codegen.rewriting": [[49, "module-sympy.codegen.rewriting"]], "tiny (sympy.codegen.ast.floattype property)": [[49, "sympy.codegen.ast.FloatType.tiny"]], "topological_sort() (sympy.codegen.ast.codeblock class method)": [[49, "sympy.codegen.ast.CodeBlock.topological_sort"]], "union (class in sympy.codegen.cnodes)": [[49, "sympy.codegen.cnodes.union"]], "use (class in sympy.codegen.fnodes)": [[49, "sympy.codegen.fnodes.use"]], "use_rename (class in sympy.codegen.fnodes)": [[49, "sympy.codegen.fnodes.use_rename"]], "using (class in sympy.codegen.cxxnodes)": [[49, "sympy.codegen.cxxnodes.using"]], "a4_in_s6() (in module sympy.combinatorics.galois)": [[51, "sympy.combinatorics.galois.A4_in_S6"]], "a4xc2() (in module sympy.combinatorics.galois)": [[51, "sympy.combinatorics.galois.A4xC2"]], "g18() (in module sympy.combinatorics.galois)": [[51, "sympy.combinatorics.galois.G18"]], "g36m() (in module sympy.combinatorics.galois)": [[51, "sympy.combinatorics.galois.G36m"]], "g36p() (in module sympy.combinatorics.galois)": [[51, "sympy.combinatorics.galois.G36p"]], "g72() (in module sympy.combinatorics.galois)": [[51, "sympy.combinatorics.galois.G72"]], "m20() (in module sympy.combinatorics.galois)": [[51, "sympy.combinatorics.galois.M20"]], "pgl2f5() (in module sympy.combinatorics.galois)": [[51, "sympy.combinatorics.galois.PGL2F5"]], "psl2f5() (in module sympy.combinatorics.galois)": [[51, "sympy.combinatorics.galois.PSL2F5"]], "s1transitivesubgroups (class in sympy.combinatorics.galois)": [[51, "sympy.combinatorics.galois.S1TransitiveSubgroups"]], "s2transitivesubgroups (class in sympy.combinatorics.galois)": [[51, "sympy.combinatorics.galois.S2TransitiveSubgroups"]], "s3transitivesubgroups (class in sympy.combinatorics.galois)": [[51, "sympy.combinatorics.galois.S3TransitiveSubgroups"]], "s3_in_s6() (in module sympy.combinatorics.galois)": [[51, "sympy.combinatorics.galois.S3_in_S6"]], "s4transitivesubgroups (class in sympy.combinatorics.galois)": [[51, "sympy.combinatorics.galois.S4TransitiveSubgroups"]], "s4m() (in module sympy.combinatorics.galois)": [[51, "sympy.combinatorics.galois.S4m"]], "s4p() (in module sympy.combinatorics.galois)": [[51, "sympy.combinatorics.galois.S4p"]], "s4xc2() (in module sympy.combinatorics.galois)": [[51, "sympy.combinatorics.galois.S4xC2"]], "s5transitivesubgroups (class in sympy.combinatorics.galois)": [[51, "sympy.combinatorics.galois.S5TransitiveSubgroups"]], "s6transitivesubgroups (class in sympy.combinatorics.galois)": [[51, "sympy.combinatorics.galois.S6TransitiveSubgroups"]], "find_transitive_subgroups_of_s6() (in module sympy.combinatorics.galois)": [[51, "sympy.combinatorics.galois.find_transitive_subgroups_of_S6"]], "four_group() (in module sympy.combinatorics.galois)": [[51, "sympy.combinatorics.galois.four_group"]], "sympy.combinatorics.galois": [[51, "module-sympy.combinatorics.galois"]], "graycode (class in sympy.combinatorics.graycode)": [[52, "sympy.combinatorics.graycode.GrayCode"]], "bin_to_gray() (sympy.combinatorics.graycode method)": [[52, "sympy.combinatorics.graycode.bin_to_gray"]], "current (sympy.combinatorics.graycode.graycode property)": [[52, "sympy.combinatorics.graycode.GrayCode.current"]], "generate_gray() (sympy.combinatorics.graycode.graycode method)": [[52, "sympy.combinatorics.graycode.GrayCode.generate_gray"]], "get_subset_from_bitstring() (sympy.combinatorics.graycode method)": [[52, "sympy.combinatorics.graycode.get_subset_from_bitstring"]], "gray_to_bin() (sympy.combinatorics.graycode method)": [[52, "sympy.combinatorics.graycode.gray_to_bin"]], "graycode_subsets() (sympy.combinatorics.graycode method)": [[52, "sympy.combinatorics.graycode.graycode_subsets"]], "n (sympy.combinatorics.graycode.graycode property)": [[52, "sympy.combinatorics.graycode.GrayCode.n"]], "next() (sympy.combinatorics.graycode.graycode method)": [[52, "sympy.combinatorics.graycode.GrayCode.next"]], "random_bitstring() (sympy.combinatorics.graycode method)": [[52, "sympy.combinatorics.graycode.random_bitstring"]], "rank (sympy.combinatorics.graycode.graycode property)": [[52, "sympy.combinatorics.graycode.GrayCode.rank"]], "selections (sympy.combinatorics.graycode.graycode property)": [[52, "sympy.combinatorics.graycode.GrayCode.selections"]], "skip() (sympy.combinatorics.graycode.graycode method)": [[52, "sympy.combinatorics.graycode.GrayCode.skip"]], "sympy.combinatorics.graycode": [[52, "module-sympy.combinatorics.graycode"]], "unrank() (sympy.combinatorics.graycode.graycode class method)": [[52, "sympy.combinatorics.graycode.GrayCode.unrank"]], "directproduct() (in module sympy.combinatorics.group_constructs)": [[53, "sympy.combinatorics.group_constructs.DirectProduct"]], "sympy.combinatorics.group_constructs": [[53, "module-sympy.combinatorics.group_constructs"]], "is_abelian_number() (in module sympy.combinatorics.group_numbers)": [[54, "sympy.combinatorics.group_numbers.is_abelian_number"]], "is_cyclic_number() (in module sympy.combinatorics.group_numbers)": [[54, "sympy.combinatorics.group_numbers.is_cyclic_number"]], "is_nilpotent_number() (in module sympy.combinatorics.group_numbers)": [[54, "sympy.combinatorics.group_numbers.is_nilpotent_number"]], "sympy.combinatorics.group_numbers": [[54, "module-sympy.combinatorics.group_numbers"]], "abeliangroup() (in module sympy.combinatorics.named_groups)": [[56, "sympy.combinatorics.named_groups.AbelianGroup"]], "alternatinggroup() (in module sympy.combinatorics.named_groups)": [[56, "sympy.combinatorics.named_groups.AlternatingGroup"]], "cyclicgroup() (in module sympy.combinatorics.named_groups)": [[56, "sympy.combinatorics.named_groups.CyclicGroup"]], "dihedralgroup() (in module sympy.combinatorics.named_groups)": [[56, "sympy.combinatorics.named_groups.DihedralGroup"]], "symmetricgroup() (in module sympy.combinatorics.named_groups)": [[56, "sympy.combinatorics.named_groups.SymmetricGroup"]], "sympy.combinatorics.named_groups": [[56, "module-sympy.combinatorics.named_groups"]], "integerpartition (class in sympy.combinatorics.partitions)": [[57, "sympy.combinatorics.partitions.IntegerPartition"]], "partition (class in sympy.combinatorics.partitions)": [[57, "sympy.combinatorics.partitions.Partition"]], "rgs (sympy.combinatorics.partitions.partition property)": [[57, "sympy.combinatorics.partitions.Partition.RGS"]], "rgs_enum() (in module sympy.combinatorics.partitions)": [[57, "sympy.combinatorics.partitions.RGS_enum"]], "rgs_generalized() (in module sympy.combinatorics.partitions)": [[57, "sympy.combinatorics.partitions.RGS_generalized"]], "rgs_rank() (in module sympy.combinatorics.partitions)": [[57, "sympy.combinatorics.partitions.RGS_rank"]], "rgs_unrank() (in module sympy.combinatorics.partitions)": [[57, "sympy.combinatorics.partitions.RGS_unrank"]], "as_dict() (sympy.combinatorics.partitions.integerpartition method)": [[57, "sympy.combinatorics.partitions.IntegerPartition.as_dict"]], "as_ferrers() (sympy.combinatorics.partitions.integerpartition method)": [[57, "sympy.combinatorics.partitions.IntegerPartition.as_ferrers"]], "conjugate (sympy.combinatorics.partitions.integerpartition property)": [[57, "sympy.combinatorics.partitions.IntegerPartition.conjugate"]], "from_rgs() (sympy.combinatorics.partitions.partition class method)": [[57, "sympy.combinatorics.partitions.Partition.from_rgs"]], "next_lex() (sympy.combinatorics.partitions.integerpartition method)": [[57, "sympy.combinatorics.partitions.IntegerPartition.next_lex"]], "partition (sympy.combinatorics.partitions.partition property)": [[57, "sympy.combinatorics.partitions.Partition.partition"]], "prev_lex() (sympy.combinatorics.partitions.integerpartition method)": [[57, "sympy.combinatorics.partitions.IntegerPartition.prev_lex"]], "random_integer_partition() (in module sympy.combinatorics.partitions)": [[57, "sympy.combinatorics.partitions.random_integer_partition"]], "rank (sympy.combinatorics.partitions.partition property)": [[57, "sympy.combinatorics.partitions.Partition.rank"]], "sort_key() (sympy.combinatorics.partitions.partition method)": [[57, "sympy.combinatorics.partitions.Partition.sort_key"]], "sympy.combinatorics.partitions": [[57, "module-sympy.combinatorics.partitions"]], "permutationgroup (class in sympy.combinatorics.perm_groups)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup"]], "__contains__() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.__contains__"]], "__mul__() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.__mul__"]], "__new__() (sympy.combinatorics.perm_groups.permutationgroup static method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.__new__"]], "__weakref__ (sympy.combinatorics.perm_groups.permutationgroup attribute)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.__weakref__"]], "_coset_representative() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup._coset_representative"]], "_distinct_primes_lemma() (sympy.combinatorics.perm_groups.permutationgroup class method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup._distinct_primes_lemma"]], "_elements (sympy.combinatorics.perm_groups.permutationgroup property)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup._elements"]], "_eval_is_alt_sym_monte_carlo() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup._eval_is_alt_sym_monte_carlo"]], "_eval_is_alt_sym_naive() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup._eval_is_alt_sym_naive"]], "_p_elements_group() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup._p_elements_group"]], "_random_pr_init() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup._random_pr_init"]], "_sylow_alt_sym() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup._sylow_alt_sym"]], "_union_find_merge() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup._union_find_merge"]], "_union_find_rep() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup._union_find_rep"]], "_verify() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup._verify"]], "abelian_invariants() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.abelian_invariants"]], "base (sympy.combinatorics.perm_groups.permutationgroup property)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.base"]], "baseswap() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.baseswap"]], "basic_orbits (sympy.combinatorics.perm_groups.permutationgroup property)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.basic_orbits"]], "basic_stabilizers (sympy.combinatorics.perm_groups.permutationgroup property)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.basic_stabilizers"]], "basic_transversals (sympy.combinatorics.perm_groups.permutationgroup property)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.basic_transversals"]], "center() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.center"]], "centralizer() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.centralizer"]], "commutator() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.commutator"]], "composition_series() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.composition_series"]], "conjugacy_class() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.conjugacy_class"]], "conjugacy_classes() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.conjugacy_classes"]], "contains() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.contains"]], "coset_factor() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.coset_factor"]], "coset_rank() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.coset_rank"]], "coset_table() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.coset_table"]], "coset_transversal() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.coset_transversal"]], "coset_unrank() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.coset_unrank"]], "degree (sympy.combinatorics.perm_groups.permutationgroup property)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.degree"]], "derived_series() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.derived_series"]], "derived_subgroup() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.derived_subgroup"]], "elements (sympy.combinatorics.perm_groups.permutationgroup property)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.elements"]], "equals() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.equals"]], "generate() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.generate"]], "generate_dimino() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.generate_dimino"]], "generate_schreier_sims() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.generate_schreier_sims"]], "generator_product() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.generator_product"]], "generators (sympy.combinatorics.perm_groups.permutationgroup property)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.generators"]], "identity (sympy.combinatorics.perm_groups.permutationgroup property)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.identity"]], "index() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.index"]], "is_abelian (sympy.combinatorics.perm_groups.permutationgroup property)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.is_abelian"]], "is_alt_sym() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.is_alt_sym"]], "is_alternating (sympy.combinatorics.perm_groups.permutationgroup property)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.is_alternating"]], "is_cyclic (sympy.combinatorics.perm_groups.permutationgroup property)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.is_cyclic"]], "is_dihedral (sympy.combinatorics.perm_groups.permutationgroup property)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.is_dihedral"]], "is_elementary() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.is_elementary"]], "is_nilpotent (sympy.combinatorics.perm_groups.permutationgroup property)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.is_nilpotent"]], "is_normal() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.is_normal"]], "is_perfect (sympy.combinatorics.perm_groups.permutationgroup property)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.is_perfect"]], "is_polycyclic (sympy.combinatorics.perm_groups.permutationgroup property)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.is_polycyclic"]], "is_primitive() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.is_primitive"]], "is_solvable (sympy.combinatorics.perm_groups.permutationgroup property)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.is_solvable"]], "is_subgroup() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.is_subgroup"]], "is_symmetric (sympy.combinatorics.perm_groups.permutationgroup property)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.is_symmetric"]], "is_transitive() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.is_transitive"]], "is_trivial (sympy.combinatorics.perm_groups.permutationgroup property)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.is_trivial"]], "lower_central_series() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.lower_central_series"]], "make_perm() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.make_perm"]], "max_div (sympy.combinatorics.perm_groups.permutationgroup property)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.max_div"]], "minimal_block() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.minimal_block"]], "minimal_blocks() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.minimal_blocks"]], "normal_closure() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.normal_closure"]], "orbit() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.orbit"]], "orbit_rep() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.orbit_rep"]], "orbit_transversal() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.orbit_transversal"]], "orbits() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.orbits"]], "order() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.order"]], "pointwise_stabilizer() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.pointwise_stabilizer"]], "polycyclic_group() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.polycyclic_group"]], "presentation() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.presentation"]], "random() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.random"]], "random_pr() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.random_pr"]], "random_stab() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.random_stab"]], "schreier_sims() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims"]], "schreier_sims_incremental() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims_incremental"]], "schreier_sims_random() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims_random"]], "schreier_vector() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.schreier_vector"]], "stabilizer() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.stabilizer"]], "strong_gens (sympy.combinatorics.perm_groups.permutationgroup property)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.strong_gens"]], "strong_presentation() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.strong_presentation"]], "subgroup() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.subgroup"]], "subgroup_search() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.subgroup_search"]], "sylow_subgroup() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.sylow_subgroup"]], "sympy.combinatorics.perm_groups": [[59, "module-sympy.combinatorics.perm_groups"]], "transitivity_degree (sympy.combinatorics.perm_groups.permutationgroup property)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.transitivity_degree"]], "cycle (class in sympy.combinatorics.permutations)": [[60, "sympy.combinatorics.permutations.Cycle"]], "permutation (class in sympy.combinatorics.permutations)": [[60, "sympy.combinatorics.permutations.Permutation"]], "_af_parity() (in module sympy.combinatorics.permutations)": [[60, "sympy.combinatorics.permutations._af_parity"]], "alternating() (sympy.combinatorics.generators method)": [[60, "sympy.combinatorics.generators.alternating"]], "apply() (sympy.combinatorics.permutations.permutation method)": [[60, "sympy.combinatorics.permutations.Permutation.apply"]], "array_form (sympy.combinatorics.permutations.permutation property)": [[60, "sympy.combinatorics.permutations.Permutation.array_form"]], "ascents() (sympy.combinatorics.permutations.permutation method)": [[60, "sympy.combinatorics.permutations.Permutation.ascents"]], "atoms() (sympy.combinatorics.permutations.permutation method)": [[60, "sympy.combinatorics.permutations.Permutation.atoms"]], "cardinality (sympy.combinatorics.permutations.permutation property)": [[60, "sympy.combinatorics.permutations.Permutation.cardinality"]], "commutator() (sympy.combinatorics.permutations.permutation method)": [[60, "sympy.combinatorics.permutations.Permutation.commutator"]], "commutes_with() (sympy.combinatorics.permutations.permutation method)": [[60, "sympy.combinatorics.permutations.Permutation.commutes_with"]], "cycle_structure (sympy.combinatorics.permutations.permutation property)": [[60, "sympy.combinatorics.permutations.Permutation.cycle_structure"]], "cycles (sympy.combinatorics.permutations.permutation property)": [[60, "sympy.combinatorics.permutations.Permutation.cycles"]], "cyclic() (sympy.combinatorics.generators method)": [[60, "sympy.combinatorics.generators.cyclic"]], "cyclic_form (sympy.combinatorics.permutations.permutation property)": [[60, "sympy.combinatorics.permutations.Permutation.cyclic_form"]], "descents() (sympy.combinatorics.permutations.permutation method)": [[60, "sympy.combinatorics.permutations.Permutation.descents"]], "dihedral() (sympy.combinatorics.generators method)": [[60, "sympy.combinatorics.generators.dihedral"]], "from_inversion_vector() (sympy.combinatorics.permutations.permutation class method)": [[60, "sympy.combinatorics.permutations.Permutation.from_inversion_vector"]], "from_sequence() (sympy.combinatorics.permutations.permutation class method)": [[60, "sympy.combinatorics.permutations.Permutation.from_sequence"]], "full_cyclic_form (sympy.combinatorics.permutations.permutation property)": [[60, "sympy.combinatorics.permutations.Permutation.full_cyclic_form"]], "get_adjacency_distance() (sympy.combinatorics.permutations.permutation method)": [[60, "sympy.combinatorics.permutations.Permutation.get_adjacency_distance"]], "get_adjacency_matrix() (sympy.combinatorics.permutations.permutation method)": [[60, "sympy.combinatorics.permutations.Permutation.get_adjacency_matrix"]], "get_positional_distance() (sympy.combinatorics.permutations.permutation method)": [[60, "sympy.combinatorics.permutations.Permutation.get_positional_distance"]], "get_precedence_distance() (sympy.combinatorics.permutations.permutation method)": [[60, "sympy.combinatorics.permutations.Permutation.get_precedence_distance"]], "get_precedence_matrix() (sympy.combinatorics.permutations.permutation method)": [[60, "sympy.combinatorics.permutations.Permutation.get_precedence_matrix"]], "index() (sympy.combinatorics.permutations.permutation method)": [[60, "sympy.combinatorics.permutations.Permutation.index"]], "inversion_vector() (sympy.combinatorics.permutations.permutation method)": [[60, "sympy.combinatorics.permutations.Permutation.inversion_vector"]], "inversions() (sympy.combinatorics.permutations.permutation method)": [[60, "sympy.combinatorics.permutations.Permutation.inversions"]], "is_empty (sympy.combinatorics.permutations.permutation property)": [[60, "sympy.combinatorics.permutations.Permutation.is_Empty"]], "is_identity (sympy.combinatorics.permutations.permutation property)": [[60, "sympy.combinatorics.permutations.Permutation.is_Identity"]], "is_singleton (sympy.combinatorics.permutations.permutation property)": [[60, "sympy.combinatorics.permutations.Permutation.is_Singleton"]], "is_even (sympy.combinatorics.permutations.permutation property)": [[60, "sympy.combinatorics.permutations.Permutation.is_even"]], "is_odd (sympy.combinatorics.permutations.permutation property)": [[60, "sympy.combinatorics.permutations.Permutation.is_odd"]], "josephus() (sympy.combinatorics.permutations.permutation class method)": [[60, "sympy.combinatorics.permutations.Permutation.josephus"]], "length() (sympy.combinatorics.permutations.permutation method)": [[60, "sympy.combinatorics.permutations.Permutation.length"]], "list() (sympy.combinatorics.permutations.cycle method)": [[60, "sympy.combinatorics.permutations.Cycle.list"]], "list() (sympy.combinatorics.permutations.permutation method)": [[60, "sympy.combinatorics.permutations.Permutation.list"]], "max() (sympy.combinatorics.permutations.permutation method)": [[60, "sympy.combinatorics.permutations.Permutation.max"]], "min() (sympy.combinatorics.permutations.permutation method)": [[60, "sympy.combinatorics.permutations.Permutation.min"]], "mul_inv() (sympy.combinatorics.permutations.permutation method)": [[60, "sympy.combinatorics.permutations.Permutation.mul_inv"]], "next_lex() (sympy.combinatorics.permutations.permutation method)": [[60, "sympy.combinatorics.permutations.Permutation.next_lex"]], "next_nonlex() (sympy.combinatorics.permutations.permutation method)": [[60, "sympy.combinatorics.permutations.Permutation.next_nonlex"]], "next_trotterjohnson() (sympy.combinatorics.permutations.permutation method)": [[60, "sympy.combinatorics.permutations.Permutation.next_trotterjohnson"]], "order() (sympy.combinatorics.permutations.permutation method)": [[60, "sympy.combinatorics.permutations.Permutation.order"]], "parity() (sympy.combinatorics.permutations.permutation method)": [[60, "sympy.combinatorics.permutations.Permutation.parity"]], "random() (sympy.combinatorics.permutations.permutation class method)": [[60, "sympy.combinatorics.permutations.Permutation.random"]], "rank() (sympy.combinatorics.permutations.permutation method)": [[60, "sympy.combinatorics.permutations.Permutation.rank"]], "rank_nonlex() (sympy.combinatorics.permutations.permutation method)": [[60, "sympy.combinatorics.permutations.Permutation.rank_nonlex"]], "rank_trotterjohnson() (sympy.combinatorics.permutations.permutation method)": [[60, "sympy.combinatorics.permutations.Permutation.rank_trotterjohnson"]], "resize() (sympy.combinatorics.permutations.permutation method)": [[60, "sympy.combinatorics.permutations.Permutation.resize"]], "rmul() (sympy.combinatorics.permutations.permutation static method)": [[60, "sympy.combinatorics.permutations.Permutation.rmul"]], "rmul_with_af() (sympy.combinatorics.permutations.permutation class method)": [[60, "sympy.combinatorics.permutations.Permutation.rmul_with_af"]], "runs() (sympy.combinatorics.permutations.permutation method)": [[60, "sympy.combinatorics.permutations.Permutation.runs"]], "signature() (sympy.combinatorics.permutations.permutation method)": [[60, "sympy.combinatorics.permutations.Permutation.signature"]], "size (sympy.combinatorics.permutations.permutation property)": [[60, "sympy.combinatorics.permutations.Permutation.size"]], "support() (sympy.combinatorics.permutations.permutation method)": [[60, "sympy.combinatorics.permutations.Permutation.support"]], "symmetric() (sympy.combinatorics.generators method)": [[60, "sympy.combinatorics.generators.symmetric"]], "sympy.combinatorics.generators": [[60, "module-sympy.combinatorics.generators"]], "sympy.combinatorics.permutations": [[60, "module-sympy.combinatorics.permutations"]], "transpositions() (sympy.combinatorics.permutations.permutation method)": [[60, "sympy.combinatorics.permutations.Permutation.transpositions"]], "unrank_lex() (sympy.combinatorics.permutations.permutation class method)": [[60, "sympy.combinatorics.permutations.Permutation.unrank_lex"]], "unrank_nonlex() (sympy.combinatorics.permutations.permutation class method)": [[60, "sympy.combinatorics.permutations.Permutation.unrank_nonlex"]], "unrank_trotterjohnson() (sympy.combinatorics.permutations.permutation class method)": [[60, "sympy.combinatorics.permutations.Permutation.unrank_trotterjohnson"]], "polyhedron (class in sympy.combinatorics.polyhedron)": [[61, "sympy.combinatorics.polyhedron.Polyhedron"]], "array_form (sympy.combinatorics.polyhedron.polyhedron property)": [[61, "sympy.combinatorics.polyhedron.Polyhedron.array_form"]], "corners (sympy.combinatorics.polyhedron.polyhedron property)": [[61, "sympy.combinatorics.polyhedron.Polyhedron.corners"]], "cyclic_form (sympy.combinatorics.polyhedron.polyhedron property)": [[61, "sympy.combinatorics.polyhedron.Polyhedron.cyclic_form"]], "edges (sympy.combinatorics.polyhedron.polyhedron property)": [[61, "sympy.combinatorics.polyhedron.Polyhedron.edges"]], "faces (sympy.combinatorics.polyhedron.polyhedron property)": [[61, "sympy.combinatorics.polyhedron.Polyhedron.faces"]], "pgroup (sympy.combinatorics.polyhedron.polyhedron property)": [[61, "sympy.combinatorics.polyhedron.Polyhedron.pgroup"]], "reset() (sympy.combinatorics.polyhedron.polyhedron method)": [[61, "sympy.combinatorics.polyhedron.Polyhedron.reset"]], "rotate() (sympy.combinatorics.polyhedron.polyhedron method)": [[61, "sympy.combinatorics.polyhedron.Polyhedron.rotate"]], "size (sympy.combinatorics.polyhedron.polyhedron property)": [[61, "sympy.combinatorics.polyhedron.Polyhedron.size"]], "sympy.combinatorics.polyhedron": [[61, "module-sympy.combinatorics.polyhedron"]], "vertices (sympy.combinatorics.polyhedron.polyhedron property)": [[61, "sympy.combinatorics.polyhedron.Polyhedron.vertices"]], "prufer (class in sympy.combinatorics.prufer)": [[62, "sympy.combinatorics.prufer.Prufer"]], "edges() (sympy.combinatorics.prufer.prufer static method)": [[62, "sympy.combinatorics.prufer.Prufer.edges"]], "next() (sympy.combinatorics.prufer.prufer method)": [[62, "sympy.combinatorics.prufer.Prufer.next"]], "nodes (sympy.combinatorics.prufer.prufer property)": [[62, "sympy.combinatorics.prufer.Prufer.nodes"]], "prev() (sympy.combinatorics.prufer.prufer method)": [[62, "sympy.combinatorics.prufer.Prufer.prev"]], "prufer_rank() (sympy.combinatorics.prufer.prufer method)": [[62, "sympy.combinatorics.prufer.Prufer.prufer_rank"]], "prufer_repr (sympy.combinatorics.prufer.prufer property)": [[62, "sympy.combinatorics.prufer.Prufer.prufer_repr"]], "rank (sympy.combinatorics.prufer.prufer property)": [[62, "sympy.combinatorics.prufer.Prufer.rank"]], "size (sympy.combinatorics.prufer.prufer property)": [[62, "sympy.combinatorics.prufer.Prufer.size"]], "sympy.combinatorics.prufer": [[62, "module-sympy.combinatorics.prufer"]], "to_prufer() (sympy.combinatorics.prufer.prufer static method)": [[62, "sympy.combinatorics.prufer.Prufer.to_prufer"]], "to_tree() (sympy.combinatorics.prufer.prufer static method)": [[62, "sympy.combinatorics.prufer.Prufer.to_tree"]], "tree_repr (sympy.combinatorics.prufer.prufer property)": [[62, "sympy.combinatorics.prufer.Prufer.tree_repr"]], "unrank() (sympy.combinatorics.prufer.prufer class method)": [[62, "sympy.combinatorics.prufer.Prufer.unrank"]], "subset (class in sympy.combinatorics.subsets)": [[63, "sympy.combinatorics.subsets.Subset"]], "bitlist_from_subset() (sympy.combinatorics.subsets.subset class method)": [[63, "sympy.combinatorics.subsets.Subset.bitlist_from_subset"]], "cardinality (sympy.combinatorics.subsets.subset property)": [[63, "sympy.combinatorics.subsets.Subset.cardinality"]], "iterate_binary() (sympy.combinatorics.subsets.subset method)": [[63, "sympy.combinatorics.subsets.Subset.iterate_binary"]], "iterate_graycode() (sympy.combinatorics.subsets.subset method)": [[63, "sympy.combinatorics.subsets.Subset.iterate_graycode"]], "ksubsets() (sympy.combinatorics.subsets method)": [[63, "sympy.combinatorics.subsets.ksubsets"]], "next_binary() (sympy.combinatorics.subsets.subset method)": [[63, "sympy.combinatorics.subsets.Subset.next_binary"]], "next_gray() (sympy.combinatorics.subsets.subset method)": [[63, "sympy.combinatorics.subsets.Subset.next_gray"]], "next_lexicographic() (sympy.combinatorics.subsets.subset method)": [[63, "sympy.combinatorics.subsets.Subset.next_lexicographic"]], "prev_binary() (sympy.combinatorics.subsets.subset method)": [[63, "sympy.combinatorics.subsets.Subset.prev_binary"]], "prev_gray() (sympy.combinatorics.subsets.subset method)": [[63, "sympy.combinatorics.subsets.Subset.prev_gray"]], "prev_lexicographic() (sympy.combinatorics.subsets.subset method)": [[63, "sympy.combinatorics.subsets.Subset.prev_lexicographic"]], "rank_binary (sympy.combinatorics.subsets.subset property)": [[63, "sympy.combinatorics.subsets.Subset.rank_binary"]], "rank_gray (sympy.combinatorics.subsets.subset property)": [[63, "sympy.combinatorics.subsets.Subset.rank_gray"]], "rank_lexicographic (sympy.combinatorics.subsets.subset property)": [[63, "sympy.combinatorics.subsets.Subset.rank_lexicographic"]], "size (sympy.combinatorics.subsets.subset property)": [[63, "sympy.combinatorics.subsets.Subset.size"]], "subset (sympy.combinatorics.subsets.subset property)": [[63, "sympy.combinatorics.subsets.Subset.subset"]], "subset_from_bitlist() (sympy.combinatorics.subsets.subset class method)": [[63, "sympy.combinatorics.subsets.Subset.subset_from_bitlist"]], "subset_indices() (sympy.combinatorics.subsets.subset class method)": [[63, "sympy.combinatorics.subsets.Subset.subset_indices"]], "superset (sympy.combinatorics.subsets.subset property)": [[63, "sympy.combinatorics.subsets.Subset.superset"]], "superset_size (sympy.combinatorics.subsets.subset property)": [[63, "sympy.combinatorics.subsets.Subset.superset_size"]], "sympy.combinatorics.subsets": [[63, "module-sympy.combinatorics.subsets"]], "unrank_binary() (sympy.combinatorics.subsets.subset class method)": [[63, "sympy.combinatorics.subsets.Subset.unrank_binary"]], "unrank_gray() (sympy.combinatorics.subsets.subset class method)": [[63, "sympy.combinatorics.subsets.Subset.unrank_gray"]], "bsgs_direct_product() (in module sympy.combinatorics.tensor_can)": [[64, "sympy.combinatorics.tensor_can.bsgs_direct_product"]], "canonicalize() (in module sympy.combinatorics.tensor_can)": [[64, "sympy.combinatorics.tensor_can.canonicalize"]], "double_coset_can_rep() (in module sympy.combinatorics.tensor_can)": [[64, "sympy.combinatorics.tensor_can.double_coset_can_rep"]], "get_symmetric_group_sgs() (in module sympy.combinatorics.tensor_can)": [[64, "sympy.combinatorics.tensor_can.get_symmetric_group_sgs"]], "sympy.combinatorics.tensor_can": [[64, "module-sympy.combinatorics.tensor_can"]], "_cmp_perm_lists() (in module sympy.combinatorics.testutil)": [[65, "sympy.combinatorics.testutil._cmp_perm_lists"]], "_naive_list_centralizer() (in module sympy.combinatorics.testutil)": [[65, "sympy.combinatorics.testutil._naive_list_centralizer"]], "_verify_bsgs() (in module sympy.combinatorics.testutil)": [[65, "sympy.combinatorics.testutil._verify_bsgs"]], "_verify_centralizer() (in module sympy.combinatorics.testutil)": [[65, "sympy.combinatorics.testutil._verify_centralizer"]], "_verify_normal_closure() (in module sympy.combinatorics.testutil)": [[65, "sympy.combinatorics.testutil._verify_normal_closure"]], "sympy.combinatorics.testutil": [[65, "module-sympy.combinatorics.testutil"]], "_base_ordering() (in module sympy.combinatorics.util)": [[66, "sympy.combinatorics.util._base_ordering"]], "_check_cycles_alt_sym() (in module sympy.combinatorics.util)": [[66, "sympy.combinatorics.util._check_cycles_alt_sym"]], "_distribute_gens_by_base() (in module sympy.combinatorics.util)": [[66, "sympy.combinatorics.util._distribute_gens_by_base"]], "_handle_precomputed_bsgs() (in module sympy.combinatorics.util)": [[66, "sympy.combinatorics.util._handle_precomputed_bsgs"]], "_orbits_transversals_from_bsgs() (in module sympy.combinatorics.util)": [[66, "sympy.combinatorics.util._orbits_transversals_from_bsgs"]], "_remove_gens() (in module sympy.combinatorics.util)": [[66, "sympy.combinatorics.util._remove_gens"]], "_strip() (in module sympy.combinatorics.util)": [[66, "sympy.combinatorics.util._strip"]], "_strong_gens_from_distr() (in module sympy.combinatorics.util)": [[66, "sympy.combinatorics.util._strong_gens_from_distr"]], "sympy.combinatorics.util": [[66, "module-sympy.combinatorics.util"]], "exprwithintlimits (class in sympy.concrete.expr_with_intlimits)": [[67, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits"]], "product (class in sympy.concrete.products)": [[67, "sympy.concrete.products.Product"]], "sum (class in sympy.concrete.summations)": [[67, "sympy.concrete.summations.Sum"]], "change_index() (sympy.concrete.expr_with_intlimits.exprwithintlimits method)": [[67, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits.change_index"]], "euler_maclaurin() (sympy.concrete.summations.sum method)": [[67, "sympy.concrete.summations.Sum.euler_maclaurin"]], "eval_zeta_function() (sympy.concrete.summations.sum method)": [[67, "sympy.concrete.summations.Sum.eval_zeta_function"]], "gosper_normal() (in module sympy.concrete.gosper)": [[67, "sympy.concrete.gosper.gosper_normal"]], "gosper_sum() (in module sympy.concrete.gosper)": [[67, "sympy.concrete.gosper.gosper_sum"]], "gosper_term() (in module sympy.concrete.gosper)": [[67, "sympy.concrete.gosper.gosper_term"]], "has_empty_sequence (sympy.concrete.expr_with_intlimits.exprwithintlimits property)": [[67, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits.has_empty_sequence"]], "index() (sympy.concrete.expr_with_intlimits.exprwithintlimits method)": [[67, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits.index"]], "is_absolutely_convergent() (sympy.concrete.summations.sum method)": [[67, "sympy.concrete.summations.Sum.is_absolutely_convergent"]], "is_convergent() (sympy.concrete.products.product method)": [[67, "sympy.concrete.products.Product.is_convergent"]], "is_convergent() (sympy.concrete.summations.sum method)": [[67, "sympy.concrete.summations.Sum.is_convergent"]], "product() (in module sympy.concrete.products)": [[67, "sympy.concrete.products.product"]], "reorder() (sympy.concrete.expr_with_intlimits.exprwithintlimits method)": [[67, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits.reorder"]], "reorder_limit() (sympy.concrete.expr_with_intlimits.exprwithintlimits method)": [[67, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits.reorder_limit"]], "reverse_order() (sympy.concrete.products.product method)": [[67, "sympy.concrete.products.Product.reverse_order"]], "reverse_order() (sympy.concrete.summations.sum method)": [[67, "sympy.concrete.summations.Sum.reverse_order"]], "summation() (in module sympy.concrete.summations)": [[67, "sympy.concrete.summations.summation"]], "add (class in sympy.core.add)": [[68, "sympy.core.add.Add"]], "algebraicnumber (class in sympy.core.numbers)": [[68, "sympy.core.numbers.AlgebraicNumber"]], "atom (class in sympy.core.basic)": [[68, "sympy.core.basic.Atom"]], "atomicexpr (class in sympy.core.expr)": [[68, "sympy.core.expr.AtomicExpr"]], "basic (class in sympy.core.basic)": [[68, "sympy.core.basic.Basic"]], "booleankind (in module sympy.core.kind)": [[68, "sympy.core.kind.BooleanKind"]], "catalan (class in sympy.core.numbers)": [[68, "sympy.core.numbers.Catalan"]], "complexinfinity (class in sympy.core.numbers)": [[68, "sympy.core.numbers.ComplexInfinity"]], "derivative (class in sympy.core.function)": [[68, "sympy.core.function.Derivative"]], "dict (class in sympy.core.containers)": [[68, "sympy.core.containers.Dict"]], "dummy (class in sympy.core.symbol)": [[68, "sympy.core.symbol.Dummy"]], "eq (in module sympy.core.relational)": [[68, "sympy.core.relational.Eq"]], "equality (class in sympy.core.relational)": [[68, "sympy.core.relational.Equality"]], "eulergamma (class in sympy.core.numbers)": [[68, "sympy.core.numbers.EulerGamma"]], "evalfmixin (class in sympy.core.evalf)": [[68, "sympy.core.evalf.EvalfMixin"]], "exp1 (class in sympy.core.numbers)": [[68, "sympy.core.numbers.Exp1"]], "expr (class in sympy.core.expr)": [[68, "sympy.core.expr.Expr"]], "float (class in sympy.core.numbers)": [[68, "sympy.core.numbers.Float"]], "function (class in sympy.core.function)": [[68, "sympy.core.function.Function"]], "functionclass (class in sympy.core.function)": [[68, "sympy.core.function.FunctionClass"]], "ge (in module sympy.core.relational)": [[68, "sympy.core.relational.Ge"]], "goldenratio (class in sympy.core.numbers)": [[68, "sympy.core.numbers.GoldenRatio"]], "greaterthan (class in sympy.core.relational)": [[68, "sympy.core.relational.GreaterThan"]], "gt (in module sympy.core.relational)": [[68, "sympy.core.relational.Gt"]], "half (class in sympy.core.numbers)": [[68, "sympy.core.numbers.Half"]], "imaginaryunit (class in sympy.core.numbers)": [[68, "sympy.core.numbers.ImaginaryUnit"]], "infinity (class in sympy.core.numbers)": [[68, "sympy.core.numbers.Infinity"]], "integer (class in sympy.core.numbers)": [[68, "sympy.core.numbers.Integer"]], "kind (class in sympy.core.kind)": [[68, "sympy.core.kind.Kind"]], "lambda (class in sympy.core.function)": [[68, "sympy.core.function.Lambda"]], "le (in module sympy.core.relational)": [[68, "sympy.core.relational.Le"]], "lessthan (class in sympy.core.relational)": [[68, "sympy.core.relational.LessThan"]], "lt (in module sympy.core.relational)": [[68, "sympy.core.relational.Lt"]], "mod (class in sympy.core.mod)": [[68, "sympy.core.mod.Mod"]], "mul (class in sympy.core.mul)": [[68, "sympy.core.mul.Mul"]], "n() (in module sympy.core.evalf)": [[68, "sympy.core.evalf.N"]], "nan (class in sympy.core.numbers)": [[68, "sympy.core.numbers.NaN"]], "ne (in module sympy.core.relational)": [[68, "sympy.core.relational.Ne"]], "negativeinfinity (class in sympy.core.numbers)": [[68, "sympy.core.numbers.NegativeInfinity"]], "negativeone (class in sympy.core.numbers)": [[68, "sympy.core.numbers.NegativeOne"]], "number (class in sympy.core.numbers)": [[68, "sympy.core.numbers.Number"]], "numberkind (in module sympy.core.kind)": [[68, "sympy.core.kind.NumberKind"]], "numbersymbol (class in sympy.core.numbers)": [[68, "sympy.core.numbers.NumberSymbol"]], "one (class in sympy.core.numbers)": [[68, "sympy.core.numbers.One"]], "pep 335": [[68, "index-0"], [68, "index-1"], [68, "index-2"], [68, "index-3"]], "pi (class in sympy.core.numbers)": [[68, "sympy.core.numbers.Pi"]], "poleerror (class in sympy.core.function)": [[68, "sympy.core.function.PoleError"]], "pow (class in sympy.core.power)": [[68, "sympy.core.power.Pow"]], "precisionexhausted (class in sympy.core.evalf)": [[68, "sympy.core.evalf.PrecisionExhausted"]], "python enhancement proposals": [[68, "index-0"], [68, "index-1"], [68, "index-2"], [68, "index-3"]], "rational (class in sympy.core.numbers)": [[68, "sympy.core.numbers.Rational"]], "realnumber (in module sympy.core.numbers)": [[68, "sympy.core.numbers.RealNumber"]], "rel (in module sympy.core.relational)": [[68, "sympy.core.relational.Rel"]], "relational (class in sympy.core.relational)": [[68, "sympy.core.relational.Relational"]], "singleton (class in sympy.core.singleton)": [[68, "sympy.core.singleton.Singleton"]], "singletonregistry (class in sympy.core.singleton)": [[68, "sympy.core.singleton.SingletonRegistry"]], "strictgreaterthan (class in sympy.core.relational)": [[68, "sympy.core.relational.StrictGreaterThan"]], "strictlessthan (class in sympy.core.relational)": [[68, "sympy.core.relational.StrictLessThan"]], "subs (class in sympy.core.function)": [[68, "sympy.core.function.Subs"]], "symbol (class in sympy.core.symbol)": [[68, "sympy.core.symbol.Symbol"]], "tribonacciconstant (class in sympy.core.numbers)": [[68, "sympy.core.numbers.TribonacciConstant"]], "tuple (class in sympy.core.containers)": [[68, "sympy.core.containers.Tuple"]], "tuplekind (class in sympy.core.containers)": [[68, "sympy.core.containers.TupleKind"]], "undefinedkind (in module sympy.core.kind)": [[68, "sympy.core.kind.UndefinedKind"]], "unequality (class in sympy.core.relational)": [[68, "sympy.core.relational.Unequality"]], "unevaluatedexpr (class in sympy.core.expr)": [[68, "sympy.core.expr.UnevaluatedExpr"]], "wild (class in sympy.core.symbol)": [[68, "sympy.core.symbol.Wild"]], "wildfunction (class in sympy.core.function)": [[68, "sympy.core.function.WildFunction"]], "zero (class in sympy.core.numbers)": [[68, "sympy.core.numbers.Zero"]], "__cacheit() (in module sympy.core.cache)": [[68, "sympy.core.cache.__cacheit"]], "__new__() (sympy.core.numbers.algebraicnumber static method)": [[68, "sympy.core.numbers.AlgebraicNumber.__new__"]], "_diff_wrt (sympy.core.function.derivative property)": [[68, "sympy.core.function.Derivative._diff_wrt"]], "_randint() (in module sympy.core.random)": [[68, "sympy.core.random._randint"]], "_randrange() (in module sympy.core.random)": [[68, "sympy.core.random._randrange"]], "_sort_variable_count() (sympy.core.function.derivative class method)": [[68, "sympy.core.function.Derivative._sort_variable_count"]], "algebraic": [[68, "term-algebraic"]], "antihermitian": [[68, "term-antihermitian"]], "apart() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.apart"]], "approximation() (sympy.core.numbers.numbersymbol method)": [[68, "sympy.core.numbers.NumberSymbol.approximation"]], "args (sympy.core.basic.basic property)": [[68, "sympy.core.basic.Basic.args"]], "args_cnc() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.args_cnc"]], "as_base_exp() (sympy.core.function.function method)": [[68, "sympy.core.function.Function.as_base_exp"]], "as_base_exp() (sympy.core.power.pow method)": [[68, "sympy.core.power.Pow.as_base_exp"]], "as_coeff_add() (sympy.core.add.add method)": [[68, "sympy.core.add.Add.as_coeff_Add"], [68, "sympy.core.add.Add.as_coeff_add"]], "as_coeff_add() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.as_coeff_Add"], [68, "sympy.core.expr.Expr.as_coeff_add"]], "as_coeff_add() (sympy.core.numbers.number method)": [[68, "sympy.core.numbers.Number.as_coeff_Add"]], "as_coeff_add() (sympy.core.numbers.rational method)": [[68, "sympy.core.numbers.Rational.as_coeff_Add"]], "as_coeff_mul() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.as_coeff_Mul"], [68, "sympy.core.expr.Expr.as_coeff_mul"]], "as_coeff_mul() (sympy.core.mul.mul method)": [[68, "sympy.core.mul.Mul.as_coeff_Mul"]], "as_coeff_mul() (sympy.core.numbers.number method)": [[68, "sympy.core.numbers.Number.as_coeff_Mul"]], "as_coeff_mul() (sympy.core.numbers.rational method)": [[68, "sympy.core.numbers.Rational.as_coeff_Mul"]], "as_coeff_exponent() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.as_coeff_exponent"]], "as_coefficient() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.as_coefficient"]], "as_coefficients_dict() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.as_coefficients_dict"]], "as_content_primitive() (sympy.core.add.add method)": [[68, "sympy.core.add.Add.as_content_primitive"]], "as_content_primitive() (sympy.core.basic.basic method)": [[68, "sympy.core.basic.Basic.as_content_primitive"]], "as_content_primitive() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.as_content_primitive"]], "as_content_primitive() (sympy.core.mul.mul method)": [[68, "sympy.core.mul.Mul.as_content_primitive"]], "as_content_primitive() (sympy.core.numbers.rational method)": [[68, "sympy.core.numbers.Rational.as_content_primitive"]], "as_content_primitive() (sympy.core.power.pow method)": [[68, "sympy.core.power.Pow.as_content_primitive"]], "as_dummy() (sympy.core.basic.basic method)": [[68, "sympy.core.basic.Basic.as_dummy"]], "as_expr() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.as_expr"]], "as_expr() (sympy.core.numbers.algebraicnumber method)": [[68, "sympy.core.numbers.AlgebraicNumber.as_expr"]], "as_finite_difference() (sympy.core.function.derivative method)": [[68, "sympy.core.function.Derivative.as_finite_difference"]], "as_independent() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.as_independent"]], "as_leading_term() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.as_leading_term"]], "as_numer_denom() (sympy.core.add.add method)": [[68, "sympy.core.add.Add.as_numer_denom"]], "as_numer_denom() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.as_numer_denom"]], "as_ordered_factors() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.as_ordered_factors"]], "as_ordered_factors() (sympy.core.mul.mul method)": [[68, "sympy.core.mul.Mul.as_ordered_factors"]], "as_ordered_terms() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.as_ordered_terms"]], "as_poly() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.as_poly"]], "as_poly() (sympy.core.numbers.algebraicnumber method)": [[68, "sympy.core.numbers.AlgebraicNumber.as_poly"]], "as_poly() (sympy.core.relational.equality method)": [[68, "sympy.core.relational.Equality.as_poly"]], "as_powers_dict() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.as_powers_dict"]], "as_real_imag() (sympy.core.add.add method)": [[68, "sympy.core.add.Add.as_real_imag"]], "as_real_imag() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.as_real_imag"]], "as_terms() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.as_terms"]], "as_two_terms() (sympy.core.add.add method)": [[68, "sympy.core.add.Add.as_two_terms"]], "as_two_terms() (sympy.core.mul.mul method)": [[68, "sympy.core.mul.Mul.as_two_terms"]], "aseries() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.aseries"]], "assumptions0 (sympy.core.basic.basic property)": [[68, "sympy.core.basic.Basic.assumptions0"]], "atoms() (sympy.core.basic.basic method)": [[68, "sympy.core.basic.Basic.atoms"]], "bottom_up() (in module sympy.core.traversal)": [[68, "sympy.core.traversal.bottom_up"]], "bound_symbols (sympy.core.function.lambda property)": [[68, "sympy.core.function.Lambda.bound_symbols"]], "bound_symbols (sympy.core.function.subs property)": [[68, "sympy.core.function.Subs.bound_symbols"]], "cancel() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.cancel"]], "canonical (sympy.core.relational.relational property)": [[68, "sympy.core.relational.Relational.canonical"]], "canonical_variables (sympy.core.basic.basic property)": [[68, "sympy.core.basic.Basic.canonical_variables"]], "class_key() (sympy.core.basic.basic class method)": [[68, "sympy.core.basic.Basic.class_key"]], "coeff() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.coeff"]], "coeffs() (sympy.core.numbers.algebraicnumber method)": [[68, "sympy.core.numbers.AlgebraicNumber.coeffs"]], "cofactors() (sympy.core.numbers.number method)": [[68, "sympy.core.numbers.Number.cofactors"]], "collect() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.collect"]], "combsimp() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.combsimp"]], "commutative": [[68, "term-commutative"]], "compare() (sympy.core.basic.basic method)": [[68, "sympy.core.basic.Basic.compare"]], "complex": [[68, "term-complex"]], "composite": [[68, "term-composite"]], "compute_leading_term() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.compute_leading_term"]], "conjugate() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.conjugate"]], "could_extract_minus_sign() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.could_extract_minus_sign"]], "count() (sympy.core.basic.basic method)": [[68, "sympy.core.basic.Basic.count"]], "count_ops() (in module sympy.core.function)": [[68, "sympy.core.function.count_ops"]], "count_ops() (sympy.core.basic.basic method)": [[68, "sympy.core.basic.Basic.count_ops"]], "default_sort_key() (in module sympy.core.sorting)": [[68, "sympy.core.sorting.default_sort_key"]], "diff() (in module sympy.core.function)": [[68, "sympy.core.function.diff"]], "doit() (sympy.core.basic.basic method)": [[68, "sympy.core.basic.Basic.doit"]], "doit_numerically() (sympy.core.function.derivative method)": [[68, "sympy.core.function.Derivative.doit_numerically"]], "dummy_eq() (sympy.core.basic.basic method)": [[68, "sympy.core.basic.Basic.dummy_eq"]], "equal_valued() (in module sympy.core.numbers)": [[68, "sympy.core.numbers.equal_valued"]], "equals() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.equals"]], "equals() (sympy.core.relational.relational method)": [[68, "sympy.core.relational.Relational.equals"]], "evalf() (sympy.core.evalf.evalfmixin method)": [[68, "sympy.core.evalf.EvalfMixin.evalf"]], "even": [[68, "term-even"]], "expand() (in module sympy.core.function)": [[68, "sympy.core.function.expand"]], "expand() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.expand"]], "expand_complex() (in module sympy.core.function)": [[68, "sympy.core.function.expand_complex"]], "expand_func() (in module sympy.core.function)": [[68, "sympy.core.function.expand_func"]], "expand_log() (in module sympy.core.function)": [[68, "sympy.core.function.expand_log"]], "expand_mul() (in module sympy.core.function)": [[68, "sympy.core.function.expand_mul"]], "expand_multinomial() (in module sympy.core.function)": [[68, "sympy.core.function.expand_multinomial"]], "expand_power_base() (in module sympy.core.function)": [[68, "sympy.core.function.expand_power_base"]], "expand_power_exp() (in module sympy.core.function)": [[68, "sympy.core.function.expand_power_exp"]], "expand_trig() (in module sympy.core.function)": [[68, "sympy.core.function.expand_trig"]], "expr (sympy.core.function.lambda property)": [[68, "sympy.core.function.Lambda.expr"]], "expr (sympy.core.function.subs property)": [[68, "sympy.core.function.Subs.expr"]], "expr_free_symbols (sympy.core.expr.expr property)": [[68, "sympy.core.expr.Expr.expr_free_symbols"]], "extended_negative": [[68, "term-extended_negative"]], "extended_nonnegative": [[68, "term-extended_nonnegative"]], "extended_nonpositive": [[68, "term-extended_nonpositive"]], "extended_nonzero": [[68, "term-extended_nonzero"]], "extended_positive": [[68, "term-extended_positive"]], "extended_real": [[68, "term-extended_real"]], "extract_additively() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.extract_additively"]], "extract_branch_factor() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.extract_branch_factor"]], "extract_leading_order() (sympy.core.add.add method)": [[68, "sympy.core.add.Add.extract_leading_order"]], "extract_multiplicatively() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.extract_multiplicatively"]], "factor() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.factor"]], "factor_terms() (in module sympy.core.exprtools)": [[68, "sympy.core.exprtools.factor_terms"]], "factors() (sympy.core.numbers.rational method)": [[68, "sympy.core.numbers.Rational.factors"]], "fdiff() (sympy.core.function.function method)": [[68, "sympy.core.function.Function.fdiff"]], "field_element() (sympy.core.numbers.algebraicnumber method)": [[68, "sympy.core.numbers.AlgebraicNumber.field_element"]], "find() (sympy.core.basic.basic method)": [[68, "sympy.core.basic.Basic.find"]], "finite": [[68, "term-finite"]], "flatten() (sympy.core.add.add class method)": [[68, "sympy.core.add.Add.flatten"]], "flatten() (sympy.core.mul.mul class method)": [[68, "sympy.core.mul.Mul.flatten"]], "fourier_series() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.fourier_series"]], "fps() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.fps"]], "free_symbols (sympy.core.basic.basic property)": [[68, "sympy.core.basic.Basic.free_symbols"]], "fromiter() (sympy.core.basic.basic class method)": [[68, "sympy.core.basic.Basic.fromiter"]], "func (sympy.core.basic.basic property)": [[68, "sympy.core.basic.Basic.func"]], "gammasimp() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.gammasimp"]], "gcd() (sympy.core.numbers.number method)": [[68, "sympy.core.numbers.Number.gcd"]], "gcd_terms() (in module sympy.core.exprtools)": [[68, "sympy.core.exprtools.gcd_terms"]], "get() (sympy.core.containers.dict method)": [[68, "sympy.core.containers.Dict.get"]], "geto() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.getO"]], "getn() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.getn"]], "has() (sympy.core.basic.basic method)": [[68, "sympy.core.basic.Basic.has"]], "has_free() (sympy.core.basic.basic method)": [[68, "sympy.core.basic.Basic.has_free"]], "has_xfree() (sympy.core.basic.basic method)": [[68, "sympy.core.basic.Basic.has_xfree"]], "hermitian": [[68, "term-hermitian"]], "igcd() (in module sympy.core.numbers)": [[68, "sympy.core.numbers.igcd"]], "ilcm() (in module sympy.core.numbers)": [[68, "sympy.core.numbers.ilcm"]], "imaginary": [[68, "term-imaginary"]], "index() (sympy.core.containers.tuple method)": [[68, "sympy.core.containers.Tuple.index"]], "infinite": [[68, "term-infinite"]], "integer": [[68, "term-integer"]], "integer_log() (in module sympy.core.power)": [[68, "sympy.core.power.integer_log"]], "integer_nthroot() (in module sympy.core.power)": [[68, "sympy.core.power.integer_nthroot"]], "integrate() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.integrate"]], "integrate() (sympy.core.relational.equality method)": [[68, "sympy.core.relational.Equality.integrate"]], "invert() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.invert"]], "irrational": [[68, "term-irrational"]], "is_algebraic_expr() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.is_algebraic_expr"]], "is_aliased (sympy.core.numbers.algebraicnumber property)": [[68, "sympy.core.numbers.AlgebraicNumber.is_aliased"]], "is_comparable (sympy.core.basic.basic property)": [[68, "sympy.core.basic.Basic.is_comparable"]], "is_constant() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.is_constant"]], "is_identity (sympy.core.function.lambda property)": [[68, "sympy.core.function.Lambda.is_identity"]], "is_meromorphic() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.is_meromorphic"]], "is_number (sympy.core.expr.expr property)": [[68, "sympy.core.expr.Expr.is_number"]], "is_polynomial() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.is_polynomial"]], "is_primitive_element (sympy.core.numbers.algebraicnumber property)": [[68, "sympy.core.numbers.AlgebraicNumber.is_primitive_element"]], "is_rational_function() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.is_rational_function"]], "is_singular() (sympy.core.function.function class method)": [[68, "sympy.core.function.Function.is_singular"]], "isqrt() (in module sympy.core.power)": [[68, "sympy.core.power.isqrt"]], "items() (sympy.core.containers.dict method)": [[68, "sympy.core.containers.Dict.items"]], "keys() (sympy.core.containers.dict method)": [[68, "sympy.core.containers.Dict.keys"]], "kind (sympy.core.containers.tuple property)": [[68, "sympy.core.containers.Tuple.kind"]], "lcm() (sympy.core.numbers.number method)": [[68, "sympy.core.numbers.Number.lcm"]], "leadterm() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.leadterm"]], "lhs (sympy.core.relational.relational property)": [[68, "sympy.core.relational.Relational.lhs"]], "limit() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.limit"]], "limit_denominator() (sympy.core.numbers.rational method)": [[68, "sympy.core.numbers.Rational.limit_denominator"]], "lseries() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.lseries"]], "match() (sympy.core.basic.basic method)": [[68, "sympy.core.basic.Basic.match"]], "matches() (sympy.core.basic.basic method)": [[68, "sympy.core.basic.Basic.matches"]], "minpoly_of_element() (sympy.core.numbers.algebraicnumber method)": [[68, "sympy.core.numbers.AlgebraicNumber.minpoly_of_element"]], "mod_inverse() (in module sympy.core.numbers)": [[68, "sympy.core.numbers.mod_inverse"]], "n() (sympy.core.evalf.evalfmixin method)": [[68, "sympy.core.evalf.EvalfMixin.n"]], "nargs (sympy.core.function.functionclass property)": [[68, "sympy.core.function.FunctionClass.nargs"]], "native_coeffs() (sympy.core.numbers.algebraicnumber method)": [[68, "sympy.core.numbers.AlgebraicNumber.native_coeffs"]], "negated (sympy.core.relational.relational property)": [[68, "sympy.core.relational.Relational.negated"]], "negative": [[68, "term-negative"]], "nfloat() (in module sympy.core.function)": [[68, "sympy.core.function.nfloat"]], "nonnegative": [[68, "term-nonnegative"]], "nonpositive": [[68, "term-nonpositive"]], "nonzero": [[68, "term-nonzero"]], "normal() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.normal"]], "nseries() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.nseries"]], "nsimplify() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.nsimplify"]], "odd": [[68, "term-odd"]], "ordered() (in module sympy.core.sorting)": [[68, "sympy.core.sorting.ordered"]], "point (sympy.core.function.subs property)": [[68, "sympy.core.function.Subs.point"]], "positive": [[68, "term-positive"]], "postorder_traversal() (in module sympy.core.traversal)": [[68, "sympy.core.traversal.postorder_traversal"]], "powsimp() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.powsimp"]], "preorder_traversal() (in module sympy.core.traversal)": [[68, "sympy.core.traversal.preorder_traversal"]], "prime": [[68, "term-prime"]], "primitive() (sympy.core.add.add method)": [[68, "sympy.core.add.Add.primitive"]], "primitive() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.primitive"]], "primitive_element() (sympy.core.numbers.algebraicnumber method)": [[68, "sympy.core.numbers.AlgebraicNumber.primitive_element"]], "prod() (in module sympy.core.mul)": [[68, "sympy.core.mul.prod"]], "radsimp() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.radsimp"]], "random_complex_number() (in module sympy.core.random)": [[68, "sympy.core.random.random_complex_number"]], "rational": [[68, "term-rational"]], "ratsimp() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.ratsimp"]], "rcall() (sympy.core.basic.basic method)": [[68, "sympy.core.basic.Basic.rcall"]], "real": [[68, "term-real"]], "refine() (sympy.core.basic.basic method)": [[68, "sympy.core.basic.Basic.refine"]], "removeo() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.removeO"]], "replace() (sympy.core.basic.basic method)": [[68, "sympy.core.basic.Basic.replace"]], "reversed (sympy.core.relational.relational property)": [[68, "sympy.core.relational.Relational.reversed"]], "reversedsign (sympy.core.relational.relational property)": [[68, "sympy.core.relational.Relational.reversedsign"]], "rewrite() (sympy.core.basic.basic method)": [[68, "sympy.core.basic.Basic.rewrite"]], "rhs (sympy.core.relational.relational property)": [[68, "sympy.core.relational.Relational.rhs"]], "round() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.round"]], "separate() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.separate"]], "series() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.series"]], "seterr() (in module sympy.core.numbers)": [[68, "sympy.core.numbers.seterr"]], "signature (sympy.core.function.lambda property)": [[68, "sympy.core.function.Lambda.signature"]], "simplify() (sympy.core.basic.basic method)": [[68, "sympy.core.basic.Basic.simplify"]], "sort_key() (sympy.core.basic.basic method)": [[68, "sympy.core.basic.Basic.sort_key"]], "strict (sympy.core.relational.relational property)": [[68, "sympy.core.relational.Relational.strict"]], "subs() (sympy.core.basic.basic method)": [[68, "sympy.core.basic.Basic.subs"]], "symbols() (in module sympy.core.symbol)": [[68, "sympy.core.symbol.symbols"]], "sympify() (in module sympy.core.sympify)": [[68, "sympy.core.sympify.sympify"]], "sympy.core.add": [[68, "module-sympy.core.add"]], "sympy.core.assumptions": [[68, "module-sympy.core.assumptions"]], "sympy.core.basic": [[68, "module-sympy.core.basic"]], "sympy.core.cache": [[68, "module-sympy.core.cache"]], "sympy.core.containers": [[68, "module-sympy.core.containers"]], "sympy.core.evalf": [[68, "module-sympy.core.evalf"]], "sympy.core.expr": [[68, "module-sympy.core.expr"]], "sympy.core.exprtools": [[68, "module-sympy.core.exprtools"]], "sympy.core.function": [[68, "module-sympy.core.function"]], "sympy.core.kind": [[68, "module-sympy.core.kind"]], "sympy.core.mod": [[68, "module-sympy.core.mod"]], "sympy.core.mul": [[68, "module-sympy.core.mul"]], "sympy.core.multidimensional": [[68, "module-sympy.core.multidimensional"]], "sympy.core.numbers": [[68, "module-sympy.core.numbers"]], "sympy.core.power": [[68, "module-sympy.core.power"]], "sympy.core.random": [[68, "module-sympy.core.random"]], "sympy.core.relational": [[68, "module-sympy.core.relational"]], "sympy.core.singleton": [[68, "module-sympy.core.singleton"]], "sympy.core.symbol": [[68, "module-sympy.core.symbol"]], "sympy.core.sympify": [[68, "module-sympy.core.sympify"]], "sympy.core.traversal": [[68, "module-sympy.core.traversal"]], "taylor_term() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.taylor_term"]], "test_derivative_numerically() (in module sympy.core.random)": [[68, "sympy.core.random.test_derivative_numerically"]], "to_algebraic_integer() (sympy.core.numbers.algebraicnumber method)": [[68, "sympy.core.numbers.AlgebraicNumber.to_algebraic_integer"]], "to_primitive_element() (sympy.core.numbers.algebraicnumber method)": [[68, "sympy.core.numbers.AlgebraicNumber.to_primitive_element"]], "to_root() (sympy.core.numbers.algebraicnumber method)": [[68, "sympy.core.numbers.AlgebraicNumber.to_root"]], "together() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.together"]], "transcendental": [[68, "term-transcendental"]], "trigsimp() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.trigsimp"]], "tuple_count() (sympy.core.containers.tuple method)": [[68, "sympy.core.containers.Tuple.tuple_count"]], "use() (in module sympy.core.traversal)": [[68, "sympy.core.traversal.use"]], "values() (sympy.core.containers.dict method)": [[68, "sympy.core.containers.Dict.values"]], "var() (in module sympy.core.symbol)": [[68, "sympy.core.symbol.var"]], "variables (sympy.core.function.lambda property)": [[68, "sympy.core.function.Lambda.variables"]], "variables (sympy.core.function.subs property)": [[68, "sympy.core.function.Subs.variables"]], "vectorize (class in sympy.core.multidimensional)": [[68, "sympy.core.multidimensional.vectorize"]], "verify_numerically() (in module sympy.core.random)": [[68, "sympy.core.random.verify_numerically"]], "walk() (in module sympy.core.traversal)": [[68, "sympy.core.traversal.walk"]], "weak (sympy.core.relational.relational property)": [[68, "sympy.core.relational.Relational.weak"]], "xreplace() (sympy.core.basic.basic method)": [[68, "sympy.core.basic.Basic.xreplace"]], "zero": [[68, "term-zero"]], "az() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.AZ"]], "bifid5_square() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.bifid5_square"]], "bifid6_square() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.bifid6_square"]], "check_and_join() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.check_and_join"]], "cycle_list() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.cycle_list"]], "decipher_affine() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.decipher_affine"]], "decipher_atbash() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.decipher_atbash"]], "decipher_bifid() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.decipher_bifid"]], "decipher_bifid5() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.decipher_bifid5"]], "decipher_bifid6() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.decipher_bifid6"]], "decipher_elgamal() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.decipher_elgamal"]], "decipher_gm() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.decipher_gm"]], "decipher_hill() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.decipher_hill"]], "decipher_kid_rsa() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.decipher_kid_rsa"]], "decipher_railfence() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.decipher_railfence"]], "decipher_rot13() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.decipher_rot13"]], "decipher_rsa() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.decipher_rsa"]], "decipher_shift() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.decipher_shift"]], "decipher_vigenere() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.decipher_vigenere"]], "decode_morse() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.decode_morse"]], "dh_private_key() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.dh_private_key"]], "dh_public_key() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.dh_public_key"]], "dh_shared_key() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.dh_shared_key"]], "elgamal_private_key() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.elgamal_private_key"]], "elgamal_public_key() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.elgamal_public_key"]], "encipher_affine() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.encipher_affine"]], "encipher_atbash() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.encipher_atbash"]], "encipher_bifid() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.encipher_bifid"]], "encipher_bifid5() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.encipher_bifid5"]], "encipher_bifid6() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.encipher_bifid6"]], "encipher_elgamal() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.encipher_elgamal"]], "encipher_gm() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.encipher_gm"]], "encipher_hill() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.encipher_hill"]], "encipher_kid_rsa() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.encipher_kid_rsa"]], "encipher_railfence() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.encipher_railfence"]], "encipher_rot13() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.encipher_rot13"]], "encipher_rsa() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.encipher_rsa"]], "encipher_shift() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.encipher_shift"]], "encipher_substitution() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.encipher_substitution"]], "encipher_vigenere() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.encipher_vigenere"]], "encode_morse() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.encode_morse"]], "gm_private_key() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.gm_private_key"]], "gm_public_key() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.gm_public_key"]], "kid_rsa_private_key() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.kid_rsa_private_key"]], "kid_rsa_public_key() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.kid_rsa_public_key"]], "lfsr_autocorrelation() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.lfsr_autocorrelation"]], "lfsr_connection_polynomial() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.lfsr_connection_polynomial"]], "lfsr_sequence() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.lfsr_sequence"]], "padded_key() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.padded_key"]], "rsa_private_key() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.rsa_private_key"]], "rsa_public_key() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.rsa_public_key"]], "sympy.crypto.crypto": [[69, "module-sympy.crypto.crypto"]], "basecovarderivativeop (class in sympy.diffgeom)": [[70, "sympy.diffgeom.BaseCovarDerivativeOp"]], "basescalarfield (class in sympy.diffgeom)": [[70, "sympy.diffgeom.BaseScalarField"]], "basevectorfield (class in sympy.diffgeom)": [[70, "sympy.diffgeom.BaseVectorField"]], "commutator (class in sympy.diffgeom)": [[70, "sympy.diffgeom.Commutator"]], "coordsystem (class in sympy.diffgeom)": [[70, "sympy.diffgeom.CoordSystem"]], "coordinatesymbol (class in sympy.diffgeom)": [[70, "sympy.diffgeom.CoordinateSymbol"]], "covarderivativeop (class in sympy.diffgeom)": [[70, "sympy.diffgeom.CovarDerivativeOp"]], "differential (class in sympy.diffgeom)": [[70, "sympy.diffgeom.Differential"]], "liederivative (class in sympy.diffgeom)": [[70, "sympy.diffgeom.LieDerivative"]], "manifold (class in sympy.diffgeom)": [[70, "sympy.diffgeom.Manifold"]], "patch (class in sympy.diffgeom)": [[70, "sympy.diffgeom.Patch"]], "point (class in sympy.diffgeom)": [[70, "sympy.diffgeom.Point"]], "tensorproduct (class in sympy.diffgeom)": [[70, "sympy.diffgeom.TensorProduct"]], "wedgeproduct (class in sympy.diffgeom)": [[70, "sympy.diffgeom.WedgeProduct"]], "base_oneform() (sympy.diffgeom.coordsystem method)": [[70, "sympy.diffgeom.CoordSystem.base_oneform"]], "base_oneforms() (sympy.diffgeom.coordsystem method)": [[70, "sympy.diffgeom.CoordSystem.base_oneforms"]], "base_scalar() (sympy.diffgeom.coordsystem method)": [[70, "sympy.diffgeom.CoordSystem.base_scalar"]], "base_scalars() (sympy.diffgeom.coordsystem method)": [[70, "sympy.diffgeom.CoordSystem.base_scalars"]], "base_vector() (sympy.diffgeom.coordsystem method)": [[70, "sympy.diffgeom.CoordSystem.base_vector"]], "base_vectors() (sympy.diffgeom.coordsystem method)": [[70, "sympy.diffgeom.CoordSystem.base_vectors"]], "coord_function() (sympy.diffgeom.coordsystem method)": [[70, "sympy.diffgeom.CoordSystem.coord_function"]], "coord_functions() (sympy.diffgeom.coordsystem method)": [[70, "sympy.diffgeom.CoordSystem.coord_functions"]], "coord_tuple_transform_to() (sympy.diffgeom.coordsystem method)": [[70, "sympy.diffgeom.CoordSystem.coord_tuple_transform_to"]], "coords() (sympy.diffgeom.point method)": [[70, "sympy.diffgeom.Point.coords"]], "intcurve_diffequ() (in module sympy.diffgeom)": [[70, "sympy.diffgeom.intcurve_diffequ"]], "intcurve_series() (in module sympy.diffgeom)": [[70, "sympy.diffgeom.intcurve_series"]], "jacobian() (sympy.diffgeom.coordsystem method)": [[70, "sympy.diffgeom.CoordSystem.jacobian"]], "jacobian_determinant() (sympy.diffgeom.coordsystem method)": [[70, "sympy.diffgeom.CoordSystem.jacobian_determinant"]], "jacobian_matrix() (sympy.diffgeom.coordsystem method)": [[70, "sympy.diffgeom.CoordSystem.jacobian_matrix"]], "metric_to_christoffel_1st() (in module sympy.diffgeom)": [[70, "sympy.diffgeom.metric_to_Christoffel_1st"]], "metric_to_christoffel_2nd() (in module sympy.diffgeom)": [[70, "sympy.diffgeom.metric_to_Christoffel_2nd"]], "metric_to_ricci_components() (in module sympy.diffgeom)": [[70, "sympy.diffgeom.metric_to_Ricci_components"]], "metric_to_riemann_components() (in module sympy.diffgeom)": [[70, "sympy.diffgeom.metric_to_Riemann_components"]], "point() (sympy.diffgeom.coordsystem method)": [[70, "sympy.diffgeom.CoordSystem.point"]], "point_to_coords() (sympy.diffgeom.coordsystem method)": [[70, "sympy.diffgeom.CoordSystem.point_to_coords"]], "sympy.diffgeom": [[70, "module-sympy.diffgeom"]], "transform() (sympy.diffgeom.coordsystem method)": [[70, "sympy.diffgeom.CoordSystem.transform"]], "transformation() (sympy.diffgeom.coordsystem method)": [[70, "sympy.diffgeom.CoordSystem.transformation"]], "twoform_to_matrix() (in module sympy.diffgeom)": [[70, "sympy.diffgeom.twoform_to_matrix"]], "vectors_in_basis() (in module sympy.diffgeom)": [[70, "sympy.diffgeom.vectors_in_basis"]], "convolution() (in module sympy.discrete.convolutions)": [[71, "sympy.discrete.convolutions.convolution"]], "convolution_fft() (in module sympy.discrete.convolutions)": [[71, "sympy.discrete.convolutions.convolution_fft"]], "convolution_fwht() (in module sympy.discrete.convolutions)": [[71, "sympy.discrete.convolutions.convolution_fwht"]], "convolution_ntt() (in module sympy.discrete.convolutions)": [[71, "sympy.discrete.convolutions.convolution_ntt"]], "convolution_subset() (in module sympy.discrete.convolutions)": [[71, "sympy.discrete.convolutions.convolution_subset"]], "covering_product() (in module sympy.discrete.convolutions)": [[71, "sympy.discrete.convolutions.covering_product"]], "fft() (in module sympy.discrete.transforms)": [[71, "sympy.discrete.transforms.fft"]], "fwht() (in module sympy.discrete.transforms)": [[71, "sympy.discrete.transforms.fwht"]], "ifft() (in module sympy.discrete.transforms)": [[71, "sympy.discrete.transforms.ifft"]], "ifwht() (in module sympy.discrete.transforms)": [[71, "sympy.discrete.transforms.ifwht"]], "intersecting_product() (in module sympy.discrete.convolutions)": [[71, "sympy.discrete.convolutions.intersecting_product"]], "intt() (in module sympy.discrete.transforms)": [[71, "sympy.discrete.transforms.intt"]], "inverse_mobius_transform() (in module sympy.discrete.transforms)": [[71, "sympy.discrete.transforms.inverse_mobius_transform"]], "mobius_transform() (in module sympy.discrete.transforms)": [[71, "sympy.discrete.transforms.mobius_transform"]], "ntt() (in module sympy.discrete.transforms)": [[71, "sympy.discrete.transforms.ntt"]], "sympy.discrete": [[71, "module-sympy.discrete"]], "sympy.discrete.convolutions": [[71, "module-sympy.discrete.convolutions"]], "sympy.discrete.transforms": [[71, "module-sympy.discrete.transforms"]], "fallingfactorial (class in sympy.functions.combinatorial.factorials)": [[73, "sympy.functions.combinatorial.factorials.FallingFactorial"]], "multifactorial (class in sympy.functions.combinatorial.factorials)": [[73, "sympy.functions.combinatorial.factorials.MultiFactorial"]], "risingfactorial (class in sympy.functions.combinatorial.factorials)": [[73, "sympy.functions.combinatorial.factorials.RisingFactorial"]], "andre (class in sympy.functions.combinatorial.numbers)": [[73, "sympy.functions.combinatorial.numbers.andre"]], "bell (class in sympy.functions.combinatorial.numbers)": [[73, "sympy.functions.combinatorial.numbers.bell"]], "bernoulli (class in sympy.functions.combinatorial.numbers)": [[73, "sympy.functions.combinatorial.numbers.bernoulli"]], "binomial (class in sympy.functions.combinatorial.factorials)": [[73, "sympy.functions.combinatorial.factorials.binomial"]], "catalan (class in sympy.functions.combinatorial.numbers)": [[73, "sympy.functions.combinatorial.numbers.catalan"]], "euler (class in sympy.functions.combinatorial.numbers)": [[73, "sympy.functions.combinatorial.numbers.euler"]], "factorial (class in sympy.functions.combinatorial.factorials)": [[73, "sympy.functions.combinatorial.factorials.factorial"]], "factorial2 (class in sympy.functions.combinatorial.factorials)": [[73, "sympy.functions.combinatorial.factorials.factorial2"]], "fibonacci (class in sympy.functions.combinatorial.numbers)": [[73, "sympy.functions.combinatorial.numbers.fibonacci"]], "genocchi (class in sympy.functions.combinatorial.numbers)": [[73, "sympy.functions.combinatorial.numbers.genocchi"]], "harmonic (class in sympy.functions.combinatorial.numbers)": [[73, "sympy.functions.combinatorial.numbers.harmonic"]], "lucas (class in sympy.functions.combinatorial.numbers)": [[73, "sympy.functions.combinatorial.numbers.lucas"]], "nc() (in module sympy.functions.combinatorial.numbers)": [[73, "sympy.functions.combinatorial.numbers.nC"]], "np() (in module sympy.functions.combinatorial.numbers)": [[73, "sympy.functions.combinatorial.numbers.nP"]], "nt() (in module sympy.functions.combinatorial.numbers)": [[73, "sympy.functions.combinatorial.numbers.nT"]], "partition (class in sympy.functions.combinatorial.numbers)": [[73, "sympy.functions.combinatorial.numbers.partition"]], "stirling() (in module sympy.functions.combinatorial.numbers)": [[73, "sympy.functions.combinatorial.numbers.stirling"]], "subfactorial (class in sympy.functions.combinatorial.factorials)": [[73, "sympy.functions.combinatorial.factorials.subfactorial"]], "tribonacci (class in sympy.functions.combinatorial.numbers)": [[73, "sympy.functions.combinatorial.numbers.tribonacci"]], "abs (class in sympy.functions.elementary.complexes)": [[74, "sympy.functions.elementary.complexes.Abs"]], "exprcondpair (class in sympy.functions.elementary.piecewise)": [[74, "sympy.functions.elementary.piecewise.ExprCondPair"]], "hyperbolicfunction (class in sympy.functions.elementary.hyperbolic)": [[74, "sympy.functions.elementary.hyperbolic.HyperbolicFunction"]], "identityfunction (class in sympy.functions.elementary.miscellaneous)": [[74, "sympy.functions.elementary.miscellaneous.IdentityFunction"]], "lambertw (class in sympy.functions.elementary.exponential)": [[74, "sympy.functions.elementary.exponential.LambertW"]], "max (class in sympy.functions.elementary.miscellaneous)": [[74, "sympy.functions.elementary.miscellaneous.Max"]], "min (class in sympy.functions.elementary.miscellaneous)": [[74, "sympy.functions.elementary.miscellaneous.Min"]], "piecewise (class in sympy.functions.elementary.piecewise)": [[74, "sympy.functions.elementary.piecewise.Piecewise"]], "roundfunction (class in sympy.functions.elementary.integers)": [[74, "sympy.functions.elementary.integers.RoundFunction"]], "_eval_integral() (sympy.functions.elementary.piecewise.piecewise method)": [[74, "sympy.functions.elementary.piecewise.Piecewise._eval_integral"]], "acos (class in sympy.functions.elementary.trigonometric)": [[74, "sympy.functions.elementary.trigonometric.acos"]], "acosh (class in sympy.functions.elementary.hyperbolic)": [[74, "sympy.functions.elementary.hyperbolic.acosh"]], "acot (class in sympy.functions.elementary.trigonometric)": [[74, "sympy.functions.elementary.trigonometric.acot"]], "acoth (class in sympy.functions.elementary.hyperbolic)": [[74, "sympy.functions.elementary.hyperbolic.acoth"]], "acsc (class in sympy.functions.elementary.trigonometric)": [[74, "sympy.functions.elementary.trigonometric.acsc"]], "acsch (class in sympy.functions.elementary.hyperbolic)": [[74, "sympy.functions.elementary.hyperbolic.acsch"]], "arg (class in sympy.functions.elementary.complexes)": [[74, "sympy.functions.elementary.complexes.arg"]], "as_base_exp() (sympy.functions.elementary.exponential.log method)": [[74, "sympy.functions.elementary.exponential.log.as_base_exp"]], "as_expr_set_pairs() (sympy.functions.elementary.piecewise.piecewise method)": [[74, "sympy.functions.elementary.piecewise.Piecewise.as_expr_set_pairs"]], "as_real_imag() (sympy.functions.elementary.complexes.im method)": [[74, "sympy.functions.elementary.complexes.im.as_real_imag"]], "as_real_imag() (sympy.functions.elementary.complexes.re method)": [[74, "sympy.functions.elementary.complexes.re.as_real_imag"]], "as_real_imag() (sympy.functions.elementary.exponential.exp method)": [[74, "sympy.functions.elementary.exponential.exp.as_real_imag"]], "as_real_imag() (sympy.functions.elementary.exponential.log method)": [[74, "sympy.functions.elementary.exponential.log.as_real_imag"]], "as_real_imag() (sympy.functions.elementary.hyperbolic.sinh method)": [[74, "sympy.functions.elementary.hyperbolic.sinh.as_real_imag"]], "asec (class in sympy.functions.elementary.trigonometric)": [[74, "sympy.functions.elementary.trigonometric.asec"]], "asech (class in sympy.functions.elementary.hyperbolic)": [[74, "sympy.functions.elementary.hyperbolic.asech"]], "asin (class in sympy.functions.elementary.trigonometric)": [[74, "sympy.functions.elementary.trigonometric.asin"]], "asinh (class in sympy.functions.elementary.hyperbolic)": [[74, "sympy.functions.elementary.hyperbolic.asinh"]], "atan (class in sympy.functions.elementary.trigonometric)": [[74, "sympy.functions.elementary.trigonometric.atan"]], "atan2 (class in sympy.functions.elementary.trigonometric)": [[74, "sympy.functions.elementary.trigonometric.atan2"]], "atanh (class in sympy.functions.elementary.hyperbolic)": [[74, "sympy.functions.elementary.hyperbolic.atanh"]], "base (sympy.functions.elementary.exponential.exp property)": [[74, "sympy.functions.elementary.exponential.exp.base"]], "cbrt() (in module sympy.functions.elementary.miscellaneous)": [[74, "sympy.functions.elementary.miscellaneous.cbrt"]], "ceiling (class in sympy.functions.elementary.integers)": [[74, "sympy.functions.elementary.integers.ceiling"]], "cond (sympy.functions.elementary.piecewise.exprcondpair property)": [[74, "sympy.functions.elementary.piecewise.ExprCondPair.cond"]], "conjugate (class in sympy.functions.elementary.complexes)": [[74, "sympy.functions.elementary.complexes.conjugate"]], "cos (class in sympy.functions.elementary.trigonometric)": [[74, "sympy.functions.elementary.trigonometric.cos"]], "cosh (class in sympy.functions.elementary.hyperbolic)": [[74, "sympy.functions.elementary.hyperbolic.cosh"]], "cot (class in sympy.functions.elementary.trigonometric)": [[74, "sympy.functions.elementary.trigonometric.cot"]], "coth (class in sympy.functions.elementary.hyperbolic)": [[74, "sympy.functions.elementary.hyperbolic.coth"]], "csc (class in sympy.functions.elementary.trigonometric)": [[74, "sympy.functions.elementary.trigonometric.csc"]], "csch (class in sympy.functions.elementary.hyperbolic)": [[74, "sympy.functions.elementary.hyperbolic.csch"]], "doit() (sympy.functions.elementary.piecewise.piecewise method)": [[74, "sympy.functions.elementary.piecewise.Piecewise.doit"]], "eval() (sympy.functions.elementary.piecewise.piecewise class method)": [[74, "sympy.functions.elementary.piecewise.Piecewise.eval"]], "exp (class in sympy.functions.elementary.exponential)": [[74, "sympy.functions.elementary.exponential.exp"]], "exp_polar (class in sympy.functions.elementary.exponential)": [[74, "sympy.functions.elementary.exponential.exp_polar"]], "expr (sympy.functions.elementary.piecewise.exprcondpair property)": [[74, "sympy.functions.elementary.piecewise.ExprCondPair.expr"]], "fdiff() (sympy.functions.elementary.complexes.abs method)": [[74, "sympy.functions.elementary.complexes.Abs.fdiff"]], "fdiff() (sympy.functions.elementary.exponential.lambertw method)": [[74, "sympy.functions.elementary.exponential.LambertW.fdiff"]], "fdiff() (sympy.functions.elementary.exponential.exp method)": [[74, "sympy.functions.elementary.exponential.exp.fdiff"]], "fdiff() (sympy.functions.elementary.exponential.log method)": [[74, "sympy.functions.elementary.exponential.log.fdiff"]], "fdiff() (sympy.functions.elementary.hyperbolic.csch method)": [[74, "sympy.functions.elementary.hyperbolic.csch.fdiff"]], "fdiff() (sympy.functions.elementary.hyperbolic.sinh method)": [[74, "sympy.functions.elementary.hyperbolic.sinh.fdiff"]], "floor (class in sympy.functions.elementary.integers)": [[74, "sympy.functions.elementary.integers.floor"]], "frac (class in sympy.functions.elementary.integers)": [[74, "sympy.functions.elementary.integers.frac"]], "im (class in sympy.functions.elementary.complexes)": [[74, "sympy.functions.elementary.complexes.im"]], "inverse() (sympy.functions.elementary.exponential.log method)": [[74, "sympy.functions.elementary.exponential.log.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.acosh method)": [[74, "sympy.functions.elementary.hyperbolic.acosh.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.acoth method)": [[74, "sympy.functions.elementary.hyperbolic.acoth.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.acsch method)": [[74, "sympy.functions.elementary.hyperbolic.acsch.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.asech method)": [[74, "sympy.functions.elementary.hyperbolic.asech.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.asinh method)": [[74, "sympy.functions.elementary.hyperbolic.asinh.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.atanh method)": [[74, "sympy.functions.elementary.hyperbolic.atanh.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.coth method)": [[74, "sympy.functions.elementary.hyperbolic.coth.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.sinh method)": [[74, "sympy.functions.elementary.hyperbolic.sinh.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.tanh method)": [[74, "sympy.functions.elementary.hyperbolic.tanh.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.acos method)": [[74, "sympy.functions.elementary.trigonometric.acos.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.acot method)": [[74, "sympy.functions.elementary.trigonometric.acot.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.acsc method)": [[74, "sympy.functions.elementary.trigonometric.acsc.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.asec method)": [[74, "sympy.functions.elementary.trigonometric.asec.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.asin method)": [[74, "sympy.functions.elementary.trigonometric.asin.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.atan method)": [[74, "sympy.functions.elementary.trigonometric.atan.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.cot method)": [[74, "sympy.functions.elementary.trigonometric.cot.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.tan method)": [[74, "sympy.functions.elementary.trigonometric.tan.inverse"]], "log (class in sympy.functions.elementary.exponential)": [[74, "sympy.functions.elementary.exponential.log"]], "periodic_argument (class in sympy.functions.elementary.complexes)": [[74, "sympy.functions.elementary.complexes.periodic_argument"]], "piecewise_exclusive() (in module sympy.functions.elementary.piecewise)": [[74, "sympy.functions.elementary.piecewise.piecewise_exclusive"]], "piecewise_fold() (in module sympy.functions.elementary.piecewise)": [[74, "sympy.functions.elementary.piecewise.piecewise_fold"]], "piecewise_integrate() (sympy.functions.elementary.piecewise.piecewise method)": [[74, "sympy.functions.elementary.piecewise.Piecewise.piecewise_integrate"]], "polar_lift (class in sympy.functions.elementary.complexes)": [[74, "sympy.functions.elementary.complexes.polar_lift"]], "principal_branch (class in sympy.functions.elementary.complexes)": [[74, "sympy.functions.elementary.complexes.principal_branch"]], "re (class in sympy.functions.elementary.complexes)": [[74, "sympy.functions.elementary.complexes.re"]], "real_root() (in module sympy.functions.elementary.miscellaneous)": [[74, "sympy.functions.elementary.miscellaneous.real_root"]], "root() (in module sympy.functions.elementary.miscellaneous)": [[74, "sympy.functions.elementary.miscellaneous.root"]], "sec (class in sympy.functions.elementary.trigonometric)": [[74, "sympy.functions.elementary.trigonometric.sec"]], "sech (class in sympy.functions.elementary.hyperbolic)": [[74, "sympy.functions.elementary.hyperbolic.sech"]], "sign (class in sympy.functions.elementary.complexes)": [[74, "sympy.functions.elementary.complexes.sign"]], "sin (class in sympy.functions.elementary.trigonometric)": [[74, "sympy.functions.elementary.trigonometric.sin"]], "sinc (class in sympy.functions.elementary.trigonometric)": [[74, "sympy.functions.elementary.trigonometric.sinc"]], "sinh (class in sympy.functions.elementary.hyperbolic)": [[74, "sympy.functions.elementary.hyperbolic.sinh"]], "sqrt() (in module sympy.functions.elementary.miscellaneous)": [[74, "sympy.functions.elementary.miscellaneous.sqrt"]], "tan (class in sympy.functions.elementary.trigonometric)": [[74, "sympy.functions.elementary.trigonometric.tan"]], "tanh (class in sympy.functions.elementary.hyperbolic)": [[74, "sympy.functions.elementary.hyperbolic.tanh"]], "taylor_term() (sympy.functions.elementary.exponential.exp static method)": [[74, "sympy.functions.elementary.exponential.exp.taylor_term"]], "taylor_term() (sympy.functions.elementary.exponential.log static method)": [[74, "sympy.functions.elementary.exponential.log.taylor_term"]], "taylor_term() (sympy.functions.elementary.hyperbolic.csch static method)": [[74, "sympy.functions.elementary.hyperbolic.csch.taylor_term"]], "taylor_term() (sympy.functions.elementary.hyperbolic.sinh static method)": [[74, "sympy.functions.elementary.hyperbolic.sinh.taylor_term"]], "sympy.functions": [[75, "module-sympy.functions"]], "airybase (class in sympy.functions.special.bessel)": [[76, "sympy.functions.special.bessel.AiryBase"]], "besselbase (class in sympy.functions.special.bessel)": [[76, "sympy.functions.special.bessel.BesselBase"]], "chi (class in sympy.functions.special.error_functions)": [[76, "sympy.functions.special.error_functions.Chi"]], "ci (class in sympy.functions.special.error_functions)": [[76, "sympy.functions.special.error_functions.Ci"]], "diracdelta (class in sympy.functions.special.delta_functions)": [[76, "sympy.functions.special.delta_functions.DiracDelta"]], "e1() (in module sympy.functions.special.error_functions)": [[76, "sympy.functions.special.error_functions.E1"]], "ei (class in sympy.functions.special.error_functions)": [[76, "sympy.functions.special.error_functions.Ei"]], "eijk() (in module sympy.functions.special.tensor_functions)": [[76, "sympy.functions.special.tensor_functions.Eijk"]], "fresnelintegral (class in sympy.functions.special.error_functions)": [[76, "sympy.functions.special.error_functions.FresnelIntegral"]], "heaviside (class in sympy.functions.special.delta_functions)": [[76, "sympy.functions.special.delta_functions.Heaviside"]], "kroneckerdelta (class in sympy.functions.special.tensor_functions)": [[76, "sympy.functions.special.tensor_functions.KroneckerDelta"]], "levicivita (class in sympy.functions.special.tensor_functions)": [[76, "sympy.functions.special.tensor_functions.LeviCivita"]], "li (class in sympy.functions.special.error_functions)": [[76, "sympy.functions.special.error_functions.Li"], [76, "sympy.functions.special.error_functions.li"]], "mathieubase (class in sympy.functions.special.mathieu_functions)": [[76, "sympy.functions.special.mathieu_functions.MathieuBase"]], "shi (class in sympy.functions.special.error_functions)": [[76, "sympy.functions.special.error_functions.Shi"]], "si (class in sympy.functions.special.error_functions)": [[76, "sympy.functions.special.error_functions.Si"]], "singularityfunction (class in sympy.functions.special.singularity_functions)": [[76, "sympy.functions.special.singularity_functions.SingularityFunction"]], "ynm (class in sympy.functions.special.spherical_harmonics)": [[76, "sympy.functions.special.spherical_harmonics.Ynm"]], "ynm_c() (in module sympy.functions.special.spherical_harmonics)": [[76, "sympy.functions.special.spherical_harmonics.Ynm_c"]], "znm (class in sympy.functions.special.spherical_harmonics)": [[76, "sympy.functions.special.spherical_harmonics.Znm"]], "airyai (class in sympy.functions.special.bessel)": [[76, "sympy.functions.special.bessel.airyai"]], "airyaiprime (class in sympy.functions.special.bessel)": [[76, "sympy.functions.special.bessel.airyaiprime"]], "airybi (class in sympy.functions.special.bessel)": [[76, "sympy.functions.special.bessel.airybi"]], "airybiprime (class in sympy.functions.special.bessel)": [[76, "sympy.functions.special.bessel.airybiprime"]], "an (sympy.functions.special.hyper.meijerg property)": [[76, "sympy.functions.special.hyper.meijerg.an"]], "aother (sympy.functions.special.hyper.meijerg property)": [[76, "sympy.functions.special.hyper.meijerg.aother"]], "ap (sympy.functions.special.hyper.hyper property)": [[76, "sympy.functions.special.hyper.hyper.ap"]], "ap (sympy.functions.special.hyper.meijerg property)": [[76, "sympy.functions.special.hyper.meijerg.ap"]], "appellf1 (class in sympy.functions.special.hyper)": [[76, "sympy.functions.special.hyper.appellf1"]], "argument (sympy.functions.special.bessel.besselbase property)": [[76, "sympy.functions.special.bessel.BesselBase.argument"]], "argument (sympy.functions.special.hyper.hyper property)": [[76, "sympy.functions.special.hyper.hyper.argument"]], "argument (sympy.functions.special.hyper.meijerg property)": [[76, "sympy.functions.special.hyper.meijerg.argument"]], "assoc_laguerre (class in sympy.functions.special.polynomials)": [[76, "sympy.functions.special.polynomials.assoc_laguerre"]], "assoc_legendre (class in sympy.functions.special.polynomials)": [[76, "sympy.functions.special.polynomials.assoc_legendre"]], "besseli (class in sympy.functions.special.bessel)": [[76, "sympy.functions.special.bessel.besseli"]], "besselj (class in sympy.functions.special.bessel)": [[76, "sympy.functions.special.bessel.besselj"]], "besselk (class in sympy.functions.special.bessel)": [[76, "sympy.functions.special.bessel.besselk"]], "bessely (class in sympy.functions.special.bessel)": [[76, "sympy.functions.special.bessel.bessely"]], "beta (class in sympy.functions.special.beta_functions)": [[76, "sympy.functions.special.beta_functions.beta"]], "bm (sympy.functions.special.hyper.meijerg property)": [[76, "sympy.functions.special.hyper.meijerg.bm"]], "bother (sympy.functions.special.hyper.meijerg property)": [[76, "sympy.functions.special.hyper.meijerg.bother"]], "bq (sympy.functions.special.hyper.hyper property)": [[76, "sympy.functions.special.hyper.hyper.bq"]], "bq (sympy.functions.special.hyper.meijerg property)": [[76, "sympy.functions.special.hyper.meijerg.bq"]], "bspline_basis() (in module sympy.functions.special.bsplines)": [[76, "sympy.functions.special.bsplines.bspline_basis"]], "bspline_basis_set() (in module sympy.functions.special.bsplines)": [[76, "sympy.functions.special.bsplines.bspline_basis_set"]], "chebyshevt (class in sympy.functions.special.polynomials)": [[76, "sympy.functions.special.polynomials.chebyshevt"]], "chebyshevt_root (class in sympy.functions.special.polynomials)": [[76, "sympy.functions.special.polynomials.chebyshevt_root"]], "chebyshevu (class in sympy.functions.special.polynomials)": [[76, "sympy.functions.special.polynomials.chebyshevu"]], "chebyshevu_root (class in sympy.functions.special.polynomials)": [[76, "sympy.functions.special.polynomials.chebyshevu_root"]], "convergence_statement (sympy.functions.special.hyper.hyper property)": [[76, "sympy.functions.special.hyper.hyper.convergence_statement"]], "delta (sympy.functions.special.hyper.meijerg property)": [[76, "sympy.functions.special.hyper.meijerg.delta"]], "digamma (class in sympy.functions.special.gamma_functions)": [[76, "sympy.functions.special.gamma_functions.digamma"]], "dirichlet_eta (class in sympy.functions.special.zeta_functions)": [[76, "sympy.functions.special.zeta_functions.dirichlet_eta"]], "elliptic_e (class in sympy.functions.special.elliptic_integrals)": [[76, "sympy.functions.special.elliptic_integrals.elliptic_e"]], "elliptic_f (class in sympy.functions.special.elliptic_integrals)": [[76, "sympy.functions.special.elliptic_integrals.elliptic_f"]], "elliptic_k (class in sympy.functions.special.elliptic_integrals)": [[76, "sympy.functions.special.elliptic_integrals.elliptic_k"]], "elliptic_pi (class in sympy.functions.special.elliptic_integrals)": [[76, "sympy.functions.special.elliptic_integrals.elliptic_pi"]], "erf (class in sympy.functions.special.error_functions)": [[76, "sympy.functions.special.error_functions.erf"]], "erf2 (class in sympy.functions.special.error_functions)": [[76, "sympy.functions.special.error_functions.erf2"]], "erf2inv (class in sympy.functions.special.error_functions)": [[76, "sympy.functions.special.error_functions.erf2inv"]], "erfc (class in sympy.functions.special.error_functions)": [[76, "sympy.functions.special.error_functions.erfc"]], "erfcinv (class in sympy.functions.special.error_functions)": [[76, "sympy.functions.special.error_functions.erfcinv"]], "erfi (class in sympy.functions.special.error_functions)": [[76, "sympy.functions.special.error_functions.erfi"]], "erfinv (class in sympy.functions.special.error_functions)": [[76, "sympy.functions.special.error_functions.erfinv"]], "eta (sympy.functions.special.hyper.hyper property)": [[76, "sympy.functions.special.hyper.hyper.eta"]], "eval() (sympy.functions.special.delta_functions.diracdelta class method)": [[76, "sympy.functions.special.delta_functions.DiracDelta.eval"]], "eval() (sympy.functions.special.delta_functions.heaviside class method)": [[76, "sympy.functions.special.delta_functions.Heaviside.eval"]], "eval() (sympy.functions.special.singularity_functions.singularityfunction class method)": [[76, "sympy.functions.special.singularity_functions.SingularityFunction.eval"]], "eval() (sympy.functions.special.tensor_functions.kroneckerdelta class method)": [[76, "sympy.functions.special.tensor_functions.KroneckerDelta.eval"]], "eval_levicivita() (in module sympy.functions.special.tensor_functions)": [[76, "sympy.functions.special.tensor_functions.eval_levicivita"]], "expint (class in sympy.functions.special.error_functions)": [[76, "sympy.functions.special.error_functions.expint"]], "fdiff() (sympy.functions.special.delta_functions.diracdelta method)": [[76, "sympy.functions.special.delta_functions.DiracDelta.fdiff"]], "fdiff() (sympy.functions.special.delta_functions.heaviside method)": [[76, "sympy.functions.special.delta_functions.Heaviside.fdiff"]], "fdiff() (sympy.functions.special.singularity_functions.singularityfunction method)": [[76, "sympy.functions.special.singularity_functions.SingularityFunction.fdiff"]], "fresnelc (class in sympy.functions.special.error_functions)": [[76, "sympy.functions.special.error_functions.fresnelc"]], "fresnels (class in sympy.functions.special.error_functions)": [[76, "sympy.functions.special.error_functions.fresnels"]], "gamma (class in sympy.functions.special.gamma_functions)": [[76, "sympy.functions.special.gamma_functions.gamma"]], "gegenbauer (class in sympy.functions.special.polynomials)": [[76, "sympy.functions.special.polynomials.gegenbauer"]], "get_period() (sympy.functions.special.hyper.meijerg method)": [[76, "sympy.functions.special.hyper.meijerg.get_period"]], "hankel1 (class in sympy.functions.special.bessel)": [[76, "sympy.functions.special.bessel.hankel1"]], "hankel2 (class in sympy.functions.special.bessel)": [[76, "sympy.functions.special.bessel.hankel2"]], "hermite (class in sympy.functions.special.polynomials)": [[76, "sympy.functions.special.polynomials.hermite"]], "hermite_prob (class in sympy.functions.special.polynomials)": [[76, "sympy.functions.special.polynomials.hermite_prob"]], "hyper (class in sympy.functions.special.hyper)": [[76, "sympy.functions.special.hyper.hyper"]], "indices_contain_equal_information (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[76, "sympy.functions.special.tensor_functions.KroneckerDelta.indices_contain_equal_information"]], "integrand() (sympy.functions.special.hyper.meijerg method)": [[76, "sympy.functions.special.hyper.meijerg.integrand"]], "interpolating_spline() (in module sympy.functions.special.bsplines)": [[76, "sympy.functions.special.bsplines.interpolating_spline"]], "inverse() (sympy.functions.special.error_functions.erf method)": [[76, "sympy.functions.special.error_functions.erf.inverse"]], "inverse() (sympy.functions.special.error_functions.erfc method)": [[76, "sympy.functions.special.error_functions.erfc.inverse"]], "inverse() (sympy.functions.special.error_functions.erfcinv method)": [[76, "sympy.functions.special.error_functions.erfcinv.inverse"]], "inverse() (sympy.functions.special.error_functions.erfinv method)": [[76, "sympy.functions.special.error_functions.erfinv.inverse"]], "is_above_fermi (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[76, "sympy.functions.special.tensor_functions.KroneckerDelta.is_above_fermi"]], "is_below_fermi (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[76, "sympy.functions.special.tensor_functions.KroneckerDelta.is_below_fermi"]], "is_number (sympy.functions.special.hyper.meijerg property)": [[76, "sympy.functions.special.hyper.meijerg.is_number"]], "is_only_above_fermi (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[76, "sympy.functions.special.tensor_functions.KroneckerDelta.is_only_above_fermi"]], "is_only_below_fermi (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[76, "sympy.functions.special.tensor_functions.KroneckerDelta.is_only_below_fermi"]], "is_simple() (sympy.functions.special.delta_functions.diracdelta method)": [[76, "sympy.functions.special.delta_functions.DiracDelta.is_simple"]], "jacobi (class in sympy.functions.special.polynomials)": [[76, "sympy.functions.special.polynomials.jacobi"]], "jacobi_normalized() (in module sympy.functions.special.polynomials)": [[76, "sympy.functions.special.polynomials.jacobi_normalized"]], "jn (class in sympy.functions.special.bessel)": [[76, "sympy.functions.special.bessel.jn"]], "jn_zeros() (in module sympy.functions.special.bessel)": [[76, "sympy.functions.special.bessel.jn_zeros"]], "killable_index (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[76, "sympy.functions.special.tensor_functions.KroneckerDelta.killable_index"]], "laguerre (class in sympy.functions.special.polynomials)": [[76, "sympy.functions.special.polynomials.laguerre"]], "legendre (class in sympy.functions.special.polynomials)": [[76, "sympy.functions.special.polynomials.legendre"]], "lerchphi (class in sympy.functions.special.zeta_functions)": [[76, "sympy.functions.special.zeta_functions.lerchphi"]], "loggamma (class in sympy.functions.special.gamma_functions)": [[76, "sympy.functions.special.gamma_functions.loggamma"]], "lowergamma (class in sympy.functions.special.gamma_functions)": [[76, "sympy.functions.special.gamma_functions.lowergamma"]], "marcumq (class in sympy.functions.special.bessel)": [[76, "sympy.functions.special.bessel.marcumq"]], "mathieuc (class in sympy.functions.special.mathieu_functions)": [[76, "sympy.functions.special.mathieu_functions.mathieuc"]], "mathieucprime (class in sympy.functions.special.mathieu_functions)": [[76, "sympy.functions.special.mathieu_functions.mathieucprime"]], "mathieus (class in sympy.functions.special.mathieu_functions)": [[76, "sympy.functions.special.mathieu_functions.mathieus"]], "mathieusprime (class in sympy.functions.special.mathieu_functions)": [[76, "sympy.functions.special.mathieu_functions.mathieusprime"]], "meijerg (class in sympy.functions.special.hyper)": [[76, "sympy.functions.special.hyper.meijerg"]], "multigamma (class in sympy.functions.special.gamma_functions)": [[76, "sympy.functions.special.gamma_functions.multigamma"]], "nu (sympy.functions.special.hyper.meijerg property)": [[76, "sympy.functions.special.hyper.meijerg.nu"]], "order (sympy.functions.special.bessel.besselbase property)": [[76, "sympy.functions.special.bessel.BesselBase.order"]], "pargs (sympy.functions.special.delta_functions.heaviside property)": [[76, "sympy.functions.special.delta_functions.Heaviside.pargs"]], "polygamma (class in sympy.functions.special.gamma_functions)": [[76, "sympy.functions.special.gamma_functions.polygamma"]], "polylog (class in sympy.functions.special.zeta_functions)": [[76, "sympy.functions.special.zeta_functions.polylog"]], "preferred_index (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[76, "sympy.functions.special.tensor_functions.KroneckerDelta.preferred_index"]], "radius_of_convergence (sympy.functions.special.hyper.hyper property)": [[76, "sympy.functions.special.hyper.hyper.radius_of_convergence"]], "stieltjes (class in sympy.functions.special.zeta_functions)": [[76, "sympy.functions.special.zeta_functions.stieltjes"]], "sympy.functions.special.bessel": [[76, "module-sympy.functions.special.bessel"]], "sympy.functions.special.beta_functions": [[76, "module-sympy.functions.special.beta_functions"]], "sympy.functions.special.elliptic_integrals": [[76, "module-sympy.functions.special.elliptic_integrals"]], "sympy.functions.special.error_functions": [[76, "module-sympy.functions.special.error_functions"]], "sympy.functions.special.gamma_functions": [[76, "module-sympy.functions.special.gamma_functions"]], "sympy.functions.special.mathieu_functions": [[76, "module-sympy.functions.special.mathieu_functions"]], "sympy.functions.special.polynomials": [[76, "module-sympy.functions.special.polynomials"]], "sympy.functions.special.singularity_functions": [[76, "module-sympy.functions.special.singularity_functions"]], "sympy.functions.special.zeta_functions": [[76, "module-sympy.functions.special.zeta_functions"]], "trigamma (class in sympy.functions.special.gamma_functions)": [[76, "sympy.functions.special.gamma_functions.trigamma"]], "uppergamma (class in sympy.functions.special.gamma_functions)": [[76, "sympy.functions.special.gamma_functions.uppergamma"]], "yn (class in sympy.functions.special.bessel)": [[76, "sympy.functions.special.bessel.yn"]], "zeta (class in sympy.functions.special.zeta_functions)": [[76, "sympy.functions.special.zeta_functions.zeta"]], "curve (class in sympy.geometry.curve)": [[77, "sympy.geometry.curve.Curve"]], "ambient_dimension (sympy.geometry.curve.curve property)": [[77, "sympy.geometry.curve.Curve.ambient_dimension"]], "arbitrary_point() (sympy.geometry.curve.curve method)": [[77, "sympy.geometry.curve.Curve.arbitrary_point"]], "free_symbols (sympy.geometry.curve.curve property)": [[77, "sympy.geometry.curve.Curve.free_symbols"]], "functions (sympy.geometry.curve.curve property)": [[77, "sympy.geometry.curve.Curve.functions"]], "length (sympy.geometry.curve.curve property)": [[77, "sympy.geometry.curve.Curve.length"]], "limits (sympy.geometry.curve.curve property)": [[77, "sympy.geometry.curve.Curve.limits"]], "parameter (sympy.geometry.curve.curve property)": [[77, "sympy.geometry.curve.Curve.parameter"]], "plot_interval() (sympy.geometry.curve.curve method)": [[77, "sympy.geometry.curve.Curve.plot_interval"]], "rotate() (sympy.geometry.curve.curve method)": [[77, "sympy.geometry.curve.Curve.rotate"]], "scale() (sympy.geometry.curve.curve method)": [[77, "sympy.geometry.curve.Curve.scale"]], "sympy.geometry.curve": [[77, "module-sympy.geometry.curve"]], "translate() (sympy.geometry.curve.curve method)": [[77, "sympy.geometry.curve.Curve.translate"]], "circle (class in sympy.geometry.ellipse)": [[78, "sympy.geometry.ellipse.Circle"]], "ellipse (class in sympy.geometry.ellipse)": [[78, "sympy.geometry.ellipse.Ellipse"]], "apoapsis (sympy.geometry.ellipse.ellipse property)": [[78, "sympy.geometry.ellipse.Ellipse.apoapsis"]], "arbitrary_point() (sympy.geometry.ellipse.ellipse method)": [[78, "sympy.geometry.ellipse.Ellipse.arbitrary_point"]], "area (sympy.geometry.ellipse.ellipse property)": [[78, "sympy.geometry.ellipse.Ellipse.area"]], "auxiliary_circle() (sympy.geometry.ellipse.ellipse method)": [[78, "sympy.geometry.ellipse.Ellipse.auxiliary_circle"]], "bounds (sympy.geometry.ellipse.ellipse property)": [[78, "sympy.geometry.ellipse.Ellipse.bounds"]], "center (sympy.geometry.ellipse.ellipse property)": [[78, "sympy.geometry.ellipse.Ellipse.center"]], "circumference (sympy.geometry.ellipse.circle property)": [[78, "sympy.geometry.ellipse.Circle.circumference"]], "circumference (sympy.geometry.ellipse.ellipse property)": [[78, "sympy.geometry.ellipse.Ellipse.circumference"]], "director_circle() (sympy.geometry.ellipse.ellipse method)": [[78, "sympy.geometry.ellipse.Ellipse.director_circle"]], "eccentricity (sympy.geometry.ellipse.ellipse property)": [[78, "sympy.geometry.ellipse.Ellipse.eccentricity"]], "encloses_point() (sympy.geometry.ellipse.ellipse method)": [[78, "sympy.geometry.ellipse.Ellipse.encloses_point"]], "equation() (sympy.geometry.ellipse.circle method)": [[78, "sympy.geometry.ellipse.Circle.equation"]], "equation() (sympy.geometry.ellipse.ellipse method)": [[78, "sympy.geometry.ellipse.Ellipse.equation"]], "evolute() (sympy.geometry.ellipse.ellipse method)": [[78, "sympy.geometry.ellipse.Ellipse.evolute"]], "foci (sympy.geometry.ellipse.ellipse property)": [[78, "sympy.geometry.ellipse.Ellipse.foci"]], "focus_distance (sympy.geometry.ellipse.ellipse property)": [[78, "sympy.geometry.ellipse.Ellipse.focus_distance"]], "hradius (sympy.geometry.ellipse.ellipse property)": [[78, "sympy.geometry.ellipse.Ellipse.hradius"]], "intersection() (sympy.geometry.ellipse.circle method)": [[78, "sympy.geometry.ellipse.Circle.intersection"]], "intersection() (sympy.geometry.ellipse.ellipse method)": [[78, "sympy.geometry.ellipse.Ellipse.intersection"]], "is_tangent() (sympy.geometry.ellipse.ellipse method)": [[78, "sympy.geometry.ellipse.Ellipse.is_tangent"]], "major (sympy.geometry.ellipse.ellipse property)": [[78, "sympy.geometry.ellipse.Ellipse.major"]], "minor (sympy.geometry.ellipse.ellipse property)": [[78, "sympy.geometry.ellipse.Ellipse.minor"]], "normal_lines() (sympy.geometry.ellipse.ellipse method)": [[78, "sympy.geometry.ellipse.Ellipse.normal_lines"]], "periapsis (sympy.geometry.ellipse.ellipse property)": [[78, "sympy.geometry.ellipse.Ellipse.periapsis"]], "plot_interval() (sympy.geometry.ellipse.ellipse method)": [[78, "sympy.geometry.ellipse.Ellipse.plot_interval"]], "polar_second_moment_of_area() (sympy.geometry.ellipse.ellipse method)": [[78, "sympy.geometry.ellipse.Ellipse.polar_second_moment_of_area"]], "radius (sympy.geometry.ellipse.circle property)": [[78, "sympy.geometry.ellipse.Circle.radius"]], "random_point() (sympy.geometry.ellipse.ellipse method)": [[78, "sympy.geometry.ellipse.Ellipse.random_point"]], "reflect() (sympy.geometry.ellipse.circle method)": [[78, "sympy.geometry.ellipse.Circle.reflect"]], "reflect() (sympy.geometry.ellipse.ellipse method)": [[78, "sympy.geometry.ellipse.Ellipse.reflect"]], "rotate() (sympy.geometry.ellipse.ellipse method)": [[78, "sympy.geometry.ellipse.Ellipse.rotate"]], "scale() (sympy.geometry.ellipse.circle method)": [[78, "sympy.geometry.ellipse.Circle.scale"]], "scale() (sympy.geometry.ellipse.ellipse method)": [[78, "sympy.geometry.ellipse.Ellipse.scale"]], "second_moment_of_area() (sympy.geometry.ellipse.ellipse method)": [[78, "sympy.geometry.ellipse.Ellipse.second_moment_of_area"]], "section_modulus() (sympy.geometry.ellipse.ellipse method)": [[78, "sympy.geometry.ellipse.Ellipse.section_modulus"]], "semilatus_rectum (sympy.geometry.ellipse.ellipse property)": [[78, "sympy.geometry.ellipse.Ellipse.semilatus_rectum"]], "sympy.geometry.ellipse": [[78, "module-sympy.geometry.ellipse"]], "tangent_lines() (sympy.geometry.ellipse.ellipse method)": [[78, "sympy.geometry.ellipse.Ellipse.tangent_lines"]], "vradius (sympy.geometry.ellipse.circle property)": [[78, "sympy.geometry.ellipse.Circle.vradius"]], "vradius (sympy.geometry.ellipse.ellipse property)": [[78, "sympy.geometry.ellipse.Ellipse.vradius"]], "geometryentity (class in sympy.geometry.entity)": [[79, "sympy.geometry.entity.GeometryEntity"]], "ambient_dimension (sympy.geometry.entity.geometryentity property)": [[79, "sympy.geometry.entity.GeometryEntity.ambient_dimension"]], "bounds (sympy.geometry.entity.geometryentity property)": [[79, "sympy.geometry.entity.GeometryEntity.bounds"]], "encloses() (sympy.geometry.entity.geometryentity method)": [[79, "sympy.geometry.entity.GeometryEntity.encloses"]], "intersection() (sympy.geometry.entity.geometryentity method)": [[79, "sympy.geometry.entity.GeometryEntity.intersection"]], "is_similar() (sympy.geometry.entity.geometryentity method)": [[79, "sympy.geometry.entity.GeometryEntity.is_similar"]], "parameter_value() (sympy.geometry.entity.geometryentity method)": [[79, "sympy.geometry.entity.GeometryEntity.parameter_value"]], "reflect() (sympy.geometry.entity.geometryentity method)": [[79, "sympy.geometry.entity.GeometryEntity.reflect"]], "rotate() (sympy.geometry.entity.geometryentity method)": [[79, "sympy.geometry.entity.GeometryEntity.rotate"]], "scale() (sympy.geometry.entity.geometryentity method)": [[79, "sympy.geometry.entity.GeometryEntity.scale"]], "sympy.geometry.entity": [[79, "module-sympy.geometry.entity"]], "translate() (sympy.geometry.entity.geometryentity method)": [[79, "sympy.geometry.entity.GeometryEntity.translate"]], "line (class in sympy.geometry.line)": [[81, "sympy.geometry.line.Line"]], "line2d (class in sympy.geometry.line)": [[81, "sympy.geometry.line.Line2D"]], "line3d (class in sympy.geometry.line)": [[81, "sympy.geometry.line.Line3D"]], "linearentity (class in sympy.geometry.line)": [[81, "sympy.geometry.line.LinearEntity"]], "linearentity2d (class in sympy.geometry.line)": [[81, "sympy.geometry.line.LinearEntity2D"]], "linearentity3d (class in sympy.geometry.line)": [[81, "sympy.geometry.line.LinearEntity3D"]], "ray (class in sympy.geometry.line)": [[81, "sympy.geometry.line.Ray"]], "ray2d (class in sympy.geometry.line)": [[81, "sympy.geometry.line.Ray2D"]], "ray3d (class in sympy.geometry.line)": [[81, "sympy.geometry.line.Ray3D"]], "segment (class in sympy.geometry.line)": [[81, "sympy.geometry.line.Segment"]], "segment2d (class in sympy.geometry.line)": [[81, "sympy.geometry.line.Segment2D"]], "segment3d (class in sympy.geometry.line)": [[81, "sympy.geometry.line.Segment3D"]], "ambient_dimension (sympy.geometry.line.linearentity property)": [[81, "sympy.geometry.line.LinearEntity.ambient_dimension"]], "angle_between() (sympy.geometry.line.linearentity method)": [[81, "sympy.geometry.line.LinearEntity.angle_between"]], "arbitrary_point() (sympy.geometry.line.linearentity method)": [[81, "sympy.geometry.line.LinearEntity.arbitrary_point"]], "are_concurrent() (sympy.geometry.line.linearentity static method)": [[81, "sympy.geometry.line.LinearEntity.are_concurrent"]], "bisectors() (sympy.geometry.line.linearentity method)": [[81, "sympy.geometry.line.LinearEntity.bisectors"]], "bounds (sympy.geometry.line.linearentity2d property)": [[81, "sympy.geometry.line.LinearEntity2D.bounds"]], "closing_angle() (sympy.geometry.line.ray2d method)": [[81, "sympy.geometry.line.Ray2D.closing_angle"]], "coefficients (sympy.geometry.line.line2d property)": [[81, "sympy.geometry.line.Line2D.coefficients"]], "contains() (sympy.geometry.line.line method)": [[81, "sympy.geometry.line.Line.contains"]], "contains() (sympy.geometry.line.linearentity method)": [[81, "sympy.geometry.line.LinearEntity.contains"]], "contains() (sympy.geometry.line.ray method)": [[81, "sympy.geometry.line.Ray.contains"]], "contains() (sympy.geometry.line.segment method)": [[81, "sympy.geometry.line.Segment.contains"]], "direction (sympy.geometry.line.linearentity property)": [[81, "sympy.geometry.line.LinearEntity.direction"]], "direction_cosine (sympy.geometry.line.linearentity3d property)": [[81, "sympy.geometry.line.LinearEntity3D.direction_cosine"]], "direction_ratio (sympy.geometry.line.linearentity3d property)": [[81, "sympy.geometry.line.LinearEntity3D.direction_ratio"]], "distance() (sympy.geometry.line.line method)": [[81, "sympy.geometry.line.Line.distance"]], "distance() (sympy.geometry.line.line3d method)": [[81, "sympy.geometry.line.Line3D.distance"]], "distance() (sympy.geometry.line.ray method)": [[81, "sympy.geometry.line.Ray.distance"]], "distance() (sympy.geometry.line.segment method)": [[81, "sympy.geometry.line.Segment.distance"]], "equals() (sympy.geometry.line.line method)": [[81, "sympy.geometry.line.Line.equals"]], "equals() (sympy.geometry.line.ray method)": [[81, "sympy.geometry.line.Ray.equals"]], "equals() (sympy.geometry.line.segment method)": [[81, "sympy.geometry.line.Segment.equals"]], "equation() (sympy.geometry.line.line2d method)": [[81, "sympy.geometry.line.Line2D.equation"]], "equation() (sympy.geometry.line.line3d method)": [[81, "sympy.geometry.line.Line3D.equation"]], "intersection() (sympy.geometry.line.linearentity method)": [[81, "sympy.geometry.line.LinearEntity.intersection"]], "is_parallel() (sympy.geometry.line.linearentity method)": [[81, "sympy.geometry.line.LinearEntity.is_parallel"]], "is_perpendicular() (sympy.geometry.line.linearentity method)": [[81, "sympy.geometry.line.LinearEntity.is_perpendicular"]], "is_similar() (sympy.geometry.line.linearentity method)": [[81, "sympy.geometry.line.LinearEntity.is_similar"]], "length (sympy.geometry.line.linearentity property)": [[81, "sympy.geometry.line.LinearEntity.length"]], "length (sympy.geometry.line.segment property)": [[81, "sympy.geometry.line.Segment.length"]], "midpoint (sympy.geometry.line.segment property)": [[81, "sympy.geometry.line.Segment.midpoint"]], "p1 (sympy.geometry.line.linearentity property)": [[81, "sympy.geometry.line.LinearEntity.p1"]], "p2 (sympy.geometry.line.linearentity property)": [[81, "sympy.geometry.line.LinearEntity.p2"]], "parallel_line() (sympy.geometry.line.linearentity method)": [[81, "sympy.geometry.line.LinearEntity.parallel_line"]], "perpendicular_bisector() (sympy.geometry.line.segment method)": [[81, "sympy.geometry.line.Segment.perpendicular_bisector"]], "perpendicular_line() (sympy.geometry.line.linearentity method)": [[81, "sympy.geometry.line.LinearEntity.perpendicular_line"]], "perpendicular_line() (sympy.geometry.line.linearentity2d method)": [[81, "sympy.geometry.line.LinearEntity2D.perpendicular_line"]], "perpendicular_segment() (sympy.geometry.line.linearentity method)": [[81, "sympy.geometry.line.LinearEntity.perpendicular_segment"]], "plot_interval() (sympy.geometry.line.line method)": [[81, "sympy.geometry.line.Line.plot_interval"]], "plot_interval() (sympy.geometry.line.ray method)": [[81, "sympy.geometry.line.Ray.plot_interval"]], "plot_interval() (sympy.geometry.line.segment method)": [[81, "sympy.geometry.line.Segment.plot_interval"]], "points (sympy.geometry.line.linearentity property)": [[81, "sympy.geometry.line.LinearEntity.points"]], "projection() (sympy.geometry.line.linearentity method)": [[81, "sympy.geometry.line.LinearEntity.projection"]], "random_point() (sympy.geometry.line.linearentity method)": [[81, "sympy.geometry.line.LinearEntity.random_point"]], "slope (sympy.geometry.line.linearentity2d property)": [[81, "sympy.geometry.line.LinearEntity2D.slope"]], "smallest_angle_between() (sympy.geometry.line.linearentity method)": [[81, "sympy.geometry.line.LinearEntity.smallest_angle_between"]], "source (sympy.geometry.line.ray property)": [[81, "sympy.geometry.line.Ray.source"]], "sympy.geometry.line": [[81, "module-sympy.geometry.line"]], "xdirection (sympy.geometry.line.ray2d property)": [[81, "sympy.geometry.line.Ray2D.xdirection"]], "xdirection (sympy.geometry.line.ray3d property)": [[81, "sympy.geometry.line.Ray3D.xdirection"]], "ydirection (sympy.geometry.line.ray2d property)": [[81, "sympy.geometry.line.Ray2D.ydirection"]], "ydirection (sympy.geometry.line.ray3d property)": [[81, "sympy.geometry.line.Ray3D.ydirection"]], "zdirection (sympy.geometry.line.ray3d property)": [[81, "sympy.geometry.line.Ray3D.zdirection"]], "plane (class in sympy.geometry.plane)": [[82, "sympy.geometry.plane.Plane"]], "angle_between() (sympy.geometry.plane.plane method)": [[82, "sympy.geometry.plane.Plane.angle_between"]], "arbitrary_point() (sympy.geometry.plane.plane method)": [[82, "sympy.geometry.plane.Plane.arbitrary_point"]], "are_concurrent() (sympy.geometry.plane.plane static method)": [[82, "sympy.geometry.plane.Plane.are_concurrent"]], "distance() (sympy.geometry.plane.plane method)": [[82, "sympy.geometry.plane.Plane.distance"]], "equals() (sympy.geometry.plane.plane method)": [[82, "sympy.geometry.plane.Plane.equals"]], "equation() (sympy.geometry.plane.plane method)": [[82, "sympy.geometry.plane.Plane.equation"]], "intersection() (sympy.geometry.plane.plane method)": [[82, "sympy.geometry.plane.Plane.intersection"]], "is_coplanar() (sympy.geometry.plane.plane method)": [[82, "sympy.geometry.plane.Plane.is_coplanar"]], "is_parallel() (sympy.geometry.plane.plane method)": [[82, "sympy.geometry.plane.Plane.is_parallel"]], "is_perpendicular() (sympy.geometry.plane.plane method)": [[82, "sympy.geometry.plane.Plane.is_perpendicular"]], "normal_vector (sympy.geometry.plane.plane property)": [[82, "sympy.geometry.plane.Plane.normal_vector"]], "p1 (sympy.geometry.plane.plane property)": [[82, "sympy.geometry.plane.Plane.p1"]], "parallel_plane() (sympy.geometry.plane.plane method)": [[82, "sympy.geometry.plane.Plane.parallel_plane"]], "parameter_value() (sympy.geometry.plane.plane method)": [[82, "sympy.geometry.plane.Plane.parameter_value"]], "perpendicular_line() (sympy.geometry.plane.plane method)": [[82, "sympy.geometry.plane.Plane.perpendicular_line"]], "perpendicular_plane() (sympy.geometry.plane.plane method)": [[82, "sympy.geometry.plane.Plane.perpendicular_plane"]], "projection() (sympy.geometry.plane.plane method)": [[82, "sympy.geometry.plane.Plane.projection"]], "projection_line() (sympy.geometry.plane.plane method)": [[82, "sympy.geometry.plane.Plane.projection_line"]], "random_point() (sympy.geometry.plane.plane method)": [[82, "sympy.geometry.plane.Plane.random_point"]], "sympy.geometry.plane": [[82, "module-sympy.geometry.plane"]], "point (class in sympy.geometry.point)": [[83, "sympy.geometry.point.Point"]], "point2d (class in sympy.geometry.point)": [[83, "sympy.geometry.point.Point2D"]], "point3d (class in sympy.geometry.point)": [[83, "sympy.geometry.point.Point3D"]], "affine_rank() (sympy.geometry.point.point static method)": [[83, "sympy.geometry.point.Point.affine_rank"]], "ambient_dimension (sympy.geometry.point.point property)": [[83, "sympy.geometry.point.Point.ambient_dimension"]], "are_collinear() (sympy.geometry.point.point3d static method)": [[83, "sympy.geometry.point.Point3D.are_collinear"]], "are_coplanar() (sympy.geometry.point.point class method)": [[83, "sympy.geometry.point.Point.are_coplanar"]], "bounds (sympy.geometry.point.point2d property)": [[83, "sympy.geometry.point.Point2D.bounds"]], "canberra_distance() (sympy.geometry.point.point method)": [[83, "sympy.geometry.point.Point.canberra_distance"]], "coordinates (sympy.geometry.point.point2d property)": [[83, "sympy.geometry.point.Point2D.coordinates"]], "coordinates (sympy.geometry.point.point3d property)": [[83, "sympy.geometry.point.Point3D.coordinates"]], "direction_cosine() (sympy.geometry.point.point3d method)": [[83, "sympy.geometry.point.Point3D.direction_cosine"]], "direction_ratio() (sympy.geometry.point.point3d method)": [[83, "sympy.geometry.point.Point3D.direction_ratio"]], "distance() (sympy.geometry.point.point method)": [[83, "sympy.geometry.point.Point.distance"]], "dot() (sympy.geometry.point.point method)": [[83, "sympy.geometry.point.Point.dot"]], "equals() (sympy.geometry.point.point method)": [[83, "sympy.geometry.point.Point.equals"]], "intersection() (sympy.geometry.point.point method)": [[83, "sympy.geometry.point.Point.intersection"]], "intersection() (sympy.geometry.point.point3d method)": [[83, "sympy.geometry.point.Point3D.intersection"]], "is_collinear() (sympy.geometry.point.point method)": [[83, "sympy.geometry.point.Point.is_collinear"]], "is_concyclic() (sympy.geometry.point.point method)": [[83, "sympy.geometry.point.Point.is_concyclic"]], "is_nonzero (sympy.geometry.point.point property)": [[83, "sympy.geometry.point.Point.is_nonzero"]], "is_scalar_multiple() (sympy.geometry.point.point method)": [[83, "sympy.geometry.point.Point.is_scalar_multiple"]], "is_zero (sympy.geometry.point.point property)": [[83, "sympy.geometry.point.Point.is_zero"]], "length (sympy.geometry.point.point property)": [[83, "sympy.geometry.point.Point.length"]], "midpoint() (sympy.geometry.point.point method)": [[83, "sympy.geometry.point.Point.midpoint"]], "origin (sympy.geometry.point.point property)": [[83, "sympy.geometry.point.Point.origin"]], "orthogonal_direction (sympy.geometry.point.point property)": [[83, "sympy.geometry.point.Point.orthogonal_direction"]], "project() (sympy.geometry.point.point static method)": [[83, "sympy.geometry.point.Point.project"]], "rotate() (sympy.geometry.point.point2d method)": [[83, "sympy.geometry.point.Point2D.rotate"]], "scale() (sympy.geometry.point.point2d method)": [[83, "sympy.geometry.point.Point2D.scale"]], "scale() (sympy.geometry.point.point3d method)": [[83, "sympy.geometry.point.Point3D.scale"]], "sympy.geometry.point": [[83, "module-sympy.geometry.point"]], "taxicab_distance() (sympy.geometry.point.point method)": [[83, "sympy.geometry.point.Point.taxicab_distance"]], "transform() (sympy.geometry.point.point2d method)": [[83, "sympy.geometry.point.Point2D.transform"]], "transform() (sympy.geometry.point.point3d method)": [[83, "sympy.geometry.point.Point3D.transform"]], "translate() (sympy.geometry.point.point2d method)": [[83, "sympy.geometry.point.Point2D.translate"]], "translate() (sympy.geometry.point.point3d method)": [[83, "sympy.geometry.point.Point3D.translate"]], "unit (sympy.geometry.point.point property)": [[83, "sympy.geometry.point.Point.unit"]], "x (sympy.geometry.point.point2d property)": [[83, "sympy.geometry.point.Point2D.x"]], "x (sympy.geometry.point.point3d property)": [[83, "sympy.geometry.point.Point3D.x"]], "y (sympy.geometry.point.point2d property)": [[83, "sympy.geometry.point.Point2D.y"]], "y (sympy.geometry.point.point3d property)": [[83, "sympy.geometry.point.Point3D.y"]], "z (sympy.geometry.point.point3d property)": [[83, "sympy.geometry.point.Point3D.z"]], "polygon (class in sympy.geometry.polygon)": [[84, "sympy.geometry.polygon.Polygon"]], "regularpolygon (class in sympy.geometry.polygon)": [[84, "sympy.geometry.polygon.RegularPolygon"]], "triangle (class in sympy.geometry.polygon)": [[84, "sympy.geometry.polygon.Triangle"]], "altitudes (sympy.geometry.polygon.triangle property)": [[84, "sympy.geometry.polygon.Triangle.altitudes"]], "angles (sympy.geometry.polygon.polygon property)": [[84, "sympy.geometry.polygon.Polygon.angles"]], "angles (sympy.geometry.polygon.regularpolygon property)": [[84, "sympy.geometry.polygon.RegularPolygon.angles"]], "apothem (sympy.geometry.polygon.regularpolygon property)": [[84, "sympy.geometry.polygon.RegularPolygon.apothem"]], "arbitrary_point() (sympy.geometry.polygon.polygon method)": [[84, "sympy.geometry.polygon.Polygon.arbitrary_point"]], "area (sympy.geometry.polygon.polygon property)": [[84, "sympy.geometry.polygon.Polygon.area"]], "area (sympy.geometry.polygon.regularpolygon property)": [[84, "sympy.geometry.polygon.RegularPolygon.area"]], "args (sympy.geometry.polygon.regularpolygon property)": [[84, "sympy.geometry.polygon.RegularPolygon.args"]], "bisectors() (sympy.geometry.polygon.polygon method)": [[84, "sympy.geometry.polygon.Polygon.bisectors"]], "bisectors() (sympy.geometry.polygon.triangle method)": [[84, "sympy.geometry.polygon.Triangle.bisectors"]], "bounds (sympy.geometry.polygon.polygon property)": [[84, "sympy.geometry.polygon.Polygon.bounds"]], "center (sympy.geometry.polygon.regularpolygon property)": [[84, "sympy.geometry.polygon.RegularPolygon.center"]], "centroid (sympy.geometry.polygon.polygon property)": [[84, "sympy.geometry.polygon.Polygon.centroid"]], "centroid (sympy.geometry.polygon.regularpolygon property)": [[84, "sympy.geometry.polygon.RegularPolygon.centroid"]], "circumcenter (sympy.geometry.polygon.regularpolygon property)": [[84, "sympy.geometry.polygon.RegularPolygon.circumcenter"]], "circumcenter (sympy.geometry.polygon.triangle property)": [[84, "sympy.geometry.polygon.Triangle.circumcenter"]], "circumcircle (sympy.geometry.polygon.regularpolygon property)": [[84, "sympy.geometry.polygon.RegularPolygon.circumcircle"]], "circumcircle (sympy.geometry.polygon.triangle property)": [[84, "sympy.geometry.polygon.Triangle.circumcircle"]], "circumradius (sympy.geometry.polygon.regularpolygon property)": [[84, "sympy.geometry.polygon.RegularPolygon.circumradius"]], "circumradius (sympy.geometry.polygon.triangle property)": [[84, "sympy.geometry.polygon.Triangle.circumradius"]], "cut_section() (sympy.geometry.polygon.polygon method)": [[84, "sympy.geometry.polygon.Polygon.cut_section"]], "distance() (sympy.geometry.polygon.polygon method)": [[84, "sympy.geometry.polygon.Polygon.distance"]], "encloses_point() (sympy.geometry.polygon.polygon method)": [[84, "sympy.geometry.polygon.Polygon.encloses_point"]], "encloses_point() (sympy.geometry.polygon.regularpolygon method)": [[84, "sympy.geometry.polygon.RegularPolygon.encloses_point"]], "eulerline (sympy.geometry.polygon.triangle property)": [[84, "sympy.geometry.polygon.Triangle.eulerline"]], "excenters (sympy.geometry.polygon.triangle property)": [[84, "sympy.geometry.polygon.Triangle.excenters"]], "exradii (sympy.geometry.polygon.triangle property)": [[84, "sympy.geometry.polygon.Triangle.exradii"]], "exterior_angle (sympy.geometry.polygon.regularpolygon property)": [[84, "sympy.geometry.polygon.RegularPolygon.exterior_angle"]], "first_moment_of_area() (sympy.geometry.polygon.polygon method)": [[84, "sympy.geometry.polygon.Polygon.first_moment_of_area"]], "incenter (sympy.geometry.polygon.triangle property)": [[84, "sympy.geometry.polygon.Triangle.incenter"]], "incircle (sympy.geometry.polygon.regularpolygon property)": [[84, "sympy.geometry.polygon.RegularPolygon.incircle"]], "incircle (sympy.geometry.polygon.triangle property)": [[84, "sympy.geometry.polygon.Triangle.incircle"]], "inradius (sympy.geometry.polygon.regularpolygon property)": [[84, "sympy.geometry.polygon.RegularPolygon.inradius"]], "inradius (sympy.geometry.polygon.triangle property)": [[84, "sympy.geometry.polygon.Triangle.inradius"]], "interior_angle (sympy.geometry.polygon.regularpolygon property)": [[84, "sympy.geometry.polygon.RegularPolygon.interior_angle"]], "intersection() (sympy.geometry.polygon.polygon method)": [[84, "sympy.geometry.polygon.Polygon.intersection"]], "is_convex() (sympy.geometry.polygon.polygon method)": [[84, "sympy.geometry.polygon.Polygon.is_convex"]], "is_equilateral() (sympy.geometry.polygon.triangle method)": [[84, "sympy.geometry.polygon.Triangle.is_equilateral"]], "is_isosceles() (sympy.geometry.polygon.triangle method)": [[84, "sympy.geometry.polygon.Triangle.is_isosceles"]], "is_right() (sympy.geometry.polygon.triangle method)": [[84, "sympy.geometry.polygon.Triangle.is_right"]], "is_scalene() (sympy.geometry.polygon.triangle method)": [[84, "sympy.geometry.polygon.Triangle.is_scalene"]], "is_similar() (sympy.geometry.polygon.triangle method)": [[84, "sympy.geometry.polygon.Triangle.is_similar"]], "length (sympy.geometry.polygon.regularpolygon property)": [[84, "sympy.geometry.polygon.RegularPolygon.length"]], "medial (sympy.geometry.polygon.triangle property)": [[84, "sympy.geometry.polygon.Triangle.medial"]], "medians (sympy.geometry.polygon.triangle property)": [[84, "sympy.geometry.polygon.Triangle.medians"]], "nine_point_circle (sympy.geometry.polygon.triangle property)": [[84, "sympy.geometry.polygon.Triangle.nine_point_circle"]], "orthocenter (sympy.geometry.polygon.triangle property)": [[84, "sympy.geometry.polygon.Triangle.orthocenter"]], "perimeter (sympy.geometry.polygon.polygon property)": [[84, "sympy.geometry.polygon.Polygon.perimeter"]], "plot_interval() (sympy.geometry.polygon.polygon method)": [[84, "sympy.geometry.polygon.Polygon.plot_interval"]], "polar_second_moment_of_area() (sympy.geometry.polygon.polygon method)": [[84, "sympy.geometry.polygon.Polygon.polar_second_moment_of_area"]], "radius (sympy.geometry.polygon.regularpolygon property)": [[84, "sympy.geometry.polygon.RegularPolygon.radius"]], "reflect() (sympy.geometry.polygon.regularpolygon method)": [[84, "sympy.geometry.polygon.RegularPolygon.reflect"]], "rotate() (sympy.geometry.polygon.regularpolygon method)": [[84, "sympy.geometry.polygon.RegularPolygon.rotate"]], "rotation (sympy.geometry.polygon.regularpolygon property)": [[84, "sympy.geometry.polygon.RegularPolygon.rotation"]], "scale() (sympy.geometry.polygon.regularpolygon method)": [[84, "sympy.geometry.polygon.RegularPolygon.scale"]], "second_moment_of_area() (sympy.geometry.polygon.polygon method)": [[84, "sympy.geometry.polygon.Polygon.second_moment_of_area"]], "section_modulus() (sympy.geometry.polygon.polygon method)": [[84, "sympy.geometry.polygon.Polygon.section_modulus"]], "sides (sympy.geometry.polygon.polygon property)": [[84, "sympy.geometry.polygon.Polygon.sides"]], "spin() (sympy.geometry.polygon.regularpolygon method)": [[84, "sympy.geometry.polygon.RegularPolygon.spin"]], "sympy.geometry.polygon": [[84, "module-sympy.geometry.polygon"]], "vertices (sympy.geometry.polygon.polygon property)": [[84, "sympy.geometry.polygon.Polygon.vertices"]], "vertices (sympy.geometry.polygon.regularpolygon property)": [[84, "sympy.geometry.polygon.RegularPolygon.vertices"]], "vertices (sympy.geometry.polygon.triangle property)": [[84, "sympy.geometry.polygon.Triangle.vertices"]], "are_similar() (in module sympy.geometry.util)": [[85, "sympy.geometry.util.are_similar"]], "centroid() (in module sympy.geometry.util)": [[85, "sympy.geometry.util.centroid"]], "convex_hull() (in module sympy.geometry.util)": [[85, "sympy.geometry.util.convex_hull"]], "idiff() (in module sympy.geometry.util)": [[85, "sympy.geometry.util.idiff"]], "intersection() (in module sympy.geometry.util)": [[85, "sympy.geometry.util.intersection"]], "sympy.geometry.util": [[85, "module-sympy.geometry.util"]], "expr_to_holonomic() (in module sympy.holonomic.holonomic)": [[87, "sympy.holonomic.holonomic.expr_to_holonomic"]], "from_hyper() (in module sympy.holonomic.holonomic)": [[87, "sympy.holonomic.holonomic.from_hyper"]], "from_meijerg() (in module sympy.holonomic.holonomic)": [[87, "sympy.holonomic.holonomic.from_meijerg"]], "sympy.holonomic": [[88, "module-sympy.holonomic"]], "_convert_poly_rat_alg() (in module sympy.holonomic.holonomic)": [[89, "sympy.holonomic.holonomic._convert_poly_rat_alg"]], "_create_table() (in module sympy.holonomic.holonomic)": [[89, "sympy.holonomic.holonomic._create_table"]], "composition() (sympy.holonomic.holonomic.holonomicfunction method)": [[90, "sympy.holonomic.holonomic.HolonomicFunction.composition"]], "diff() (sympy.holonomic.holonomic.holonomicfunction method)": [[90, "sympy.holonomic.holonomic.HolonomicFunction.diff"]], "evalf() (sympy.holonomic.holonomic.holonomicfunction method)": [[90, "sympy.holonomic.holonomic.HolonomicFunction.evalf"]], "integrate() (sympy.holonomic.holonomic.holonomicfunction method)": [[90, "sympy.holonomic.holonomic.HolonomicFunction.integrate"]], "series() (sympy.holonomic.holonomic.holonomicfunction method)": [[90, "sympy.holonomic.holonomic.HolonomicFunction.series"]], "to_expr() (sympy.holonomic.holonomic.holonomicfunction method)": [[90, "sympy.holonomic.holonomic.HolonomicFunction.to_expr"]], "to_hyper() (sympy.holonomic.holonomic.holonomicfunction method)": [[90, "sympy.holonomic.holonomic.HolonomicFunction.to_hyper"]], "to_meijerg() (sympy.holonomic.holonomic.holonomicfunction method)": [[90, "sympy.holonomic.holonomic.HolonomicFunction.to_meijerg"]], "to_sequence() (sympy.holonomic.holonomic.holonomicfunction method)": [[90, "sympy.holonomic.holonomic.HolonomicFunction.to_sequence"]], "differentialoperator (class in sympy.holonomic.holonomic)": [[91, "sympy.holonomic.holonomic.DifferentialOperator"]], "differentialoperatoralgebra (class in sympy.holonomic.holonomic)": [[91, "sympy.holonomic.holonomic.DifferentialOperatorAlgebra"]], "differentialoperators() (in module sympy.holonomic.holonomic)": [[91, "sympy.holonomic.holonomic.DifferentialOperators"]], "holonomicfunction (class in sympy.holonomic.holonomic)": [[91, "sympy.holonomic.holonomic.HolonomicFunction"]], "is_singular() (sympy.holonomic.holonomic.differentialoperator method)": [[91, "sympy.holonomic.holonomic.DifferentialOperator.is_singular"]], "_coeffexpvalueerror": [[93, "sympy.integrals.meijerint._CoeffExpValueError"]], "_check_antecedents() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint._check_antecedents"]], "_check_antecedents_1() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint._check_antecedents_1"]], "_check_antecedents_inversion() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint._check_antecedents_inversion"]], "_condsimp() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint._condsimp"]], "_create_lookup_table() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint._create_lookup_table"]], "_dummy() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint._dummy"]], "_dummy_() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint._dummy_"]], "_eval_cond() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint._eval_cond"]], "_exponents() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint._exponents"]], "_find_splitting_points() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint._find_splitting_points"]], "_flip_g() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint._flip_g"]], "_functions() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint._functions"]], "_get_coeff_exp() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint._get_coeff_exp"]], "_guess_expansion() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint._guess_expansion"]], "_inflate_fox_h() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint._inflate_fox_h"]], "_inflate_g() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint._inflate_g"]], "_int0oo() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint._int0oo"]], "_int0oo_1() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint._int0oo_1"]], "_int_inversion() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint._int_inversion"]], "_is_analytic() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint._is_analytic"]], "_meijerint_definite_2() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint._meijerint_definite_2"]], "_meijerint_definite_3() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint._meijerint_definite_3"]], "_meijerint_definite_4() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint._meijerint_definite_4"]], "_meijerint_indefinite_1() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint._meijerint_indefinite_1"]], "_mul_args() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint._mul_args"]], "_mul_as_two_parts() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint._mul_as_two_parts"]], "_my_principal_branch() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint._my_principal_branch"]], "_mytype() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint._mytype"]], "_rewrite1() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint._rewrite1"]], "_rewrite2() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint._rewrite2"]], "_rewrite_inversion() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint._rewrite_inversion"]], "_rewrite_saxena() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint._rewrite_saxena"]], "_rewrite_saxena_1() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint._rewrite_saxena_1"]], "_rewrite_single() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint._rewrite_single"]], "_split_mul() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint._split_mul"]], "meijerint_definite() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint.meijerint_definite"]], "meijerint_indefinite() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint.meijerint_indefinite"]], "meijerint_inversion() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint.meijerint_inversion"]], "sympy.integrals.meijerint": [[93, "module-sympy.integrals.meijerint"]], "sympy.integrals.meijerint_doc": [[93, "module-sympy.integrals.meijerint_doc"]], "cosinetransform (class in sympy.integrals.transforms)": [[95, "sympy.integrals.transforms.CosineTransform"]], "exprwithlimits (class in sympy.concrete.expr_with_limits)": [[95, "sympy.concrete.expr_with_limits.ExprWithLimits"]], "fouriertransform (class in sympy.integrals.transforms)": [[95, "sympy.integrals.transforms.FourierTransform"]], "hankeltransform (class in sympy.integrals.transforms)": [[95, "sympy.integrals.transforms.HankelTransform"]], "integral (class in sympy.integrals.integrals)": [[95, "sympy.integrals.integrals.Integral"]], "integral.is_commutative (in module sympy.integrals.integrals)": [[95, "sympy.integrals.integrals.Integral.is_commutative"]], "integraltransform (class in sympy.integrals.transforms)": [[95, "sympy.integrals.transforms.IntegralTransform"]], "integraltransformerror": [[95, "sympy.integrals.transforms.IntegralTransformError"]], "inversecosinetransform (class in sympy.integrals.transforms)": [[95, "sympy.integrals.transforms.InverseCosineTransform"]], "inversefouriertransform (class in sympy.integrals.transforms)": [[95, "sympy.integrals.transforms.InverseFourierTransform"]], "inversehankeltransform (class in sympy.integrals.transforms)": [[95, "sympy.integrals.transforms.InverseHankelTransform"]], "inverselaplacetransform (class in sympy.integrals.transforms)": [[95, "sympy.integrals.transforms.InverseLaplaceTransform"]], "inversemellintransform (class in sympy.integrals.transforms)": [[95, "sympy.integrals.transforms.InverseMellinTransform"]], "inversesinetransform (class in sympy.integrals.transforms)": [[95, "sympy.integrals.transforms.InverseSineTransform"]], "laplacetransform (class in sympy.integrals.transforms)": [[95, "sympy.integrals.transforms.LaplaceTransform"]], "mellintransform (class in sympy.integrals.transforms)": [[95, "sympy.integrals.transforms.MellinTransform"]], "nonelementaryintegral (class in sympy.integrals.risch)": [[95, "sympy.integrals.risch.NonElementaryIntegral"]], "sinetransform (class in sympy.integrals.transforms)": [[95, "sympy.integrals.transforms.SineTransform"]], "_fourier_transform() (in module sympy.integrals.transforms)": [[95, "sympy.integrals.transforms._fourier_transform"]], "as_sum() (sympy.integrals.integrals.integral method)": [[95, "sympy.integrals.integrals.Integral.as_sum"]], "bound_symbols (sympy.concrete.expr_with_limits.exprwithlimits property)": [[95, "sympy.concrete.expr_with_limits.ExprWithLimits.bound_symbols"]], "components() (in module sympy.integrals.heurisch)": [[95, "sympy.integrals.heurisch.components"]], "cosine_transform() (in module sympy.integrals.transforms)": [[95, "sympy.integrals.transforms.cosine_transform"]], "deltaintegrate() (in module sympy.integrals.deltafunctions)": [[95, "sympy.integrals.deltafunctions.deltaintegrate"]], "doit() (sympy.integrals.integrals.integral method)": [[95, "sympy.integrals.integrals.Integral.doit"]], "doit() (sympy.integrals.transforms.integraltransform method)": [[95, "sympy.integrals.transforms.IntegralTransform.doit"]], "doit() (sympy.integrals.transforms.inverselaplacetransform method)": [[95, "sympy.integrals.transforms.InverseLaplaceTransform.doit"]], "doit() (sympy.integrals.transforms.laplacetransform method)": [[95, "sympy.integrals.transforms.LaplaceTransform.doit"]], "fourier_transform() (in module sympy.integrals.transforms)": [[95, "sympy.integrals.transforms.fourier_transform"]], "free_symbols (sympy.concrete.expr_with_limits.exprwithlimits property)": [[95, "sympy.concrete.expr_with_limits.ExprWithLimits.free_symbols"]], "free_symbols (sympy.integrals.integrals.integral property)": [[95, "sympy.integrals.integrals.Integral.free_symbols"]], "function (sympy.concrete.expr_with_limits.exprwithlimits property)": [[95, "sympy.concrete.expr_with_limits.ExprWithLimits.function"]], "function (sympy.integrals.transforms.integraltransform property)": [[95, "sympy.integrals.transforms.IntegralTransform.function"]], "function_variable (sympy.integrals.transforms.integraltransform property)": [[95, "sympy.integrals.transforms.IntegralTransform.function_variable"]], "gauss_chebyshev_t() (in module sympy.integrals.quadrature)": [[95, "sympy.integrals.quadrature.gauss_chebyshev_t"]], "gauss_chebyshev_u() (in module sympy.integrals.quadrature)": [[95, "sympy.integrals.quadrature.gauss_chebyshev_u"]], "gauss_gen_laguerre() (in module sympy.integrals.quadrature)": [[95, "sympy.integrals.quadrature.gauss_gen_laguerre"]], "gauss_hermite() (in module sympy.integrals.quadrature)": [[95, "sympy.integrals.quadrature.gauss_hermite"]], "gauss_jacobi() (in module sympy.integrals.quadrature)": [[95, "sympy.integrals.quadrature.gauss_jacobi"]], "gauss_laguerre() (in module sympy.integrals.quadrature)": [[95, "sympy.integrals.quadrature.gauss_laguerre"]], "gauss_legendre() (in module sympy.integrals.quadrature)": [[95, "sympy.integrals.quadrature.gauss_legendre"]], "gauss_lobatto() (in module sympy.integrals.quadrature)": [[95, "sympy.integrals.quadrature.gauss_lobatto"]], "hankel_transform() (in module sympy.integrals.transforms)": [[95, "sympy.integrals.transforms.hankel_transform"]], "has_finite_limits (sympy.concrete.expr_with_limits.exprwithlimits property)": [[95, "sympy.concrete.expr_with_limits.ExprWithLimits.has_finite_limits"]], "has_reversed_limits (sympy.concrete.expr_with_limits.exprwithlimits property)": [[95, "sympy.concrete.expr_with_limits.ExprWithLimits.has_reversed_limits"]], "heurisch() (in module sympy.integrals.heurisch)": [[95, "sympy.integrals.heurisch.heurisch"]], "integral_steps() (in module sympy.integrals.manualintegrate)": [[95, "sympy.integrals.manualintegrate.integral_steps"]], "integrate() (in module sympy.integrals.integrals)": [[95, "sympy.integrals.integrals.integrate"]], "inverse_cosine_transform() (in module sympy.integrals.transforms)": [[95, "sympy.integrals.transforms.inverse_cosine_transform"]], "inverse_fourier_transform() (in module sympy.integrals.transforms)": [[95, "sympy.integrals.transforms.inverse_fourier_transform"]], "inverse_hankel_transform() (in module sympy.integrals.transforms)": [[95, "sympy.integrals.transforms.inverse_hankel_transform"]], "inverse_laplace_transform() (in module sympy.integrals.transforms)": [[95, "sympy.integrals.transforms.inverse_laplace_transform"]], "inverse_mellin_transform() (in module sympy.integrals.transforms)": [[95, "sympy.integrals.transforms.inverse_mellin_transform"]], "inverse_sine_transform() (in module sympy.integrals.transforms)": [[95, "sympy.integrals.transforms.inverse_sine_transform"]], "is_number (sympy.concrete.expr_with_limits.exprwithlimits property)": [[95, "sympy.concrete.expr_with_limits.ExprWithLimits.is_number"]], "laplace_correspondence() (in module sympy.integrals.transforms)": [[95, "sympy.integrals.transforms.laplace_correspondence"]], "laplace_initial_conds() (in module sympy.integrals.transforms)": [[95, "sympy.integrals.transforms.laplace_initial_conds"]], "laplace_transform() (in module sympy.integrals.transforms)": [[95, "sympy.integrals.transforms.laplace_transform"]], "limits (sympy.concrete.expr_with_limits.exprwithlimits property)": [[95, "sympy.concrete.expr_with_limits.ExprWithLimits.limits"]], "line_integrate() (in module sympy.integrals.integrals)": [[95, "sympy.integrals.integrals.line_integrate"]], "manualintegrate() (in module sympy.integrals.manualintegrate)": [[95, "sympy.integrals.manualintegrate.manualintegrate"]], "mellin_transform() (in module sympy.integrals.transforms)": [[95, "sympy.integrals.transforms.mellin_transform"]], "polytope_integrate() (in module sympy.integrals.intpoly)": [[95, "sympy.integrals.intpoly.polytope_integrate"]], "principal_value() (sympy.integrals.integrals.integral method)": [[95, "sympy.integrals.integrals.Integral.principal_value"]], "ratint() (in module sympy.integrals.rationaltools)": [[95, "sympy.integrals.rationaltools.ratint"]], "ratint_logpart() (in module sympy.integrals.rationaltools)": [[95, "sympy.integrals.rationaltools.ratint_logpart"]], "ratint_ratpart() (in module sympy.integrals.rationaltools)": [[95, "sympy.integrals.rationaltools.ratint_ratpart"]], "risch_integrate() (in module sympy.integrals.risch)": [[95, "sympy.integrals.risch.risch_integrate"]], "sine_transform() (in module sympy.integrals.transforms)": [[95, "sympy.integrals.transforms.sine_transform"]], "singularityintegrate() (in module sympy.integrals.singularityfunctions)": [[95, "sympy.integrals.singularityfunctions.singularityintegrate"]], "sympy.integrals": [[95, "module-sympy.integrals"]], "sympy.integrals.intpoly": [[95, "module-sympy.integrals.intpoly"]], "sympy.integrals.transforms": [[95, "module-sympy.integrals.transforms"]], "transform() (sympy.integrals.integrals.integral method)": [[95, "sympy.integrals.integrals.Integral.transform"]], "transform_variable (sympy.integrals.transforms.integraltransform property)": [[95, "sympy.integrals.transforms.IntegralTransform.transform_variable"]], "trigintegrate() (in module sympy.integrals.trigonometry)": [[95, "sympy.integrals.trigonometry.trigintegrate"]], "variables (sympy.concrete.expr_with_limits.exprwithlimits property)": [[95, "sympy.concrete.expr_with_limits.ExprWithLimits.variables"]], "enable_automatic_int_sympification() (in module sympy.interactive.session)": [[96, "sympy.interactive.session.enable_automatic_int_sympification"]], "enable_automatic_symbols() (in module sympy.interactive.session)": [[96, "sympy.interactive.session.enable_automatic_symbols"]], "init_ipython_session() (in module sympy.interactive.session)": [[96, "sympy.interactive.session.init_ipython_session"]], "init_printing() (in module sympy.interactive.printing)": [[96, "sympy.interactive.printing.init_printing"]], "init_python_session() (in module sympy.interactive.session)": [[96, "sympy.interactive.session.init_python_session"]], "init_session() (in module sympy.interactive.session)": [[96, "sympy.interactive.session.init_session"]], "int_to_integer() (in module sympy.interactive.session)": [[96, "sympy.interactive.session.int_to_Integer"]], "sympy.interactive": [[96, "module-sympy.interactive"]], "sympy.interactive.printing": [[96, "module-sympy.interactive.printing"]], "sympy.interactive.session": [[96, "module-sympy.interactive.session"]], "cartanmatrix() (in module sympy.liealgebras.cartan_matrix)": [[97, "sympy.liealgebras.cartan_matrix.CartanMatrix"]], "cartantype_generator (class in sympy.liealgebras.cartan_type)": [[97, "sympy.liealgebras.cartan_type.CartanType_generator"]], "dynkindiagram() (in module sympy.liealgebras.dynkin_diagram)": [[97, "sympy.liealgebras.dynkin_diagram.DynkinDiagram"]], "rootsystem (class in sympy.liealgebras.root_system)": [[97, "sympy.liealgebras.root_system.RootSystem"]], "standard_cartan (class in sympy.liealgebras.cartan_type)": [[97, "sympy.liealgebras.cartan_type.Standard_Cartan"]], "typea (class in sympy.liealgebras.type_a)": [[97, "sympy.liealgebras.type_a.TypeA"]], "typeb (class in sympy.liealgebras.type_b)": [[97, "sympy.liealgebras.type_b.TypeB"]], "typec (class in sympy.liealgebras.type_c)": [[97, "sympy.liealgebras.type_c.TypeC"]], "typed (class in sympy.liealgebras.type_d)": [[97, "sympy.liealgebras.type_d.TypeD"]], "typee (class in sympy.liealgebras.type_e)": [[97, "sympy.liealgebras.type_e.TypeE"]], "typef (class in sympy.liealgebras.type_f)": [[97, "sympy.liealgebras.type_f.TypeF"]], "typeg (class in sympy.liealgebras.type_g)": [[97, "sympy.liealgebras.type_g.TypeG"]], "weylgroup (class in sympy.liealgebras.weyl_group)": [[97, "sympy.liealgebras.weyl_group.WeylGroup"]], "add_as_roots() (sympy.liealgebras.root_system.rootsystem method)": [[97, "sympy.liealgebras.root_system.RootSystem.add_as_roots"]], "add_simple_roots() (sympy.liealgebras.root_system.rootsystem method)": [[97, "sympy.liealgebras.root_system.RootSystem.add_simple_roots"]], "all_roots() (sympy.liealgebras.root_system.rootsystem method)": [[97, "sympy.liealgebras.root_system.RootSystem.all_roots"]], "basic_root() (sympy.liealgebras.type_a.typea method)": [[97, "sympy.liealgebras.type_a.TypeA.basic_root"]], "basic_root() (sympy.liealgebras.type_b.typeb method)": [[97, "sympy.liealgebras.type_b.TypeB.basic_root"]], "basic_root() (sympy.liealgebras.type_c.typec method)": [[97, "sympy.liealgebras.type_c.TypeC.basic_root"]], "basic_root() (sympy.liealgebras.type_d.typed method)": [[97, "sympy.liealgebras.type_d.TypeD.basic_root"]], "basic_root() (sympy.liealgebras.type_e.typee method)": [[97, "sympy.liealgebras.type_e.TypeE.basic_root"]], "basic_root() (sympy.liealgebras.type_f.typef method)": [[97, "sympy.liealgebras.type_f.TypeF.basic_root"]], "basis() (sympy.liealgebras.type_a.typea method)": [[97, "sympy.liealgebras.type_a.TypeA.basis"]], "basis() (sympy.liealgebras.type_b.typeb method)": [[97, "sympy.liealgebras.type_b.TypeB.basis"]], "basis() (sympy.liealgebras.type_c.typec method)": [[97, "sympy.liealgebras.type_c.TypeC.basis"]], "basis() (sympy.liealgebras.type_d.typed method)": [[97, "sympy.liealgebras.type_d.TypeD.basis"]], "basis() (sympy.liealgebras.type_e.typee method)": [[97, "sympy.liealgebras.type_e.TypeE.basis"]], "basis() (sympy.liealgebras.type_f.typef method)": [[97, "sympy.liealgebras.type_f.TypeF.basis"]], "basis() (sympy.liealgebras.type_g.typeg method)": [[97, "sympy.liealgebras.type_g.TypeG.basis"]], "cartan_matrix() (sympy.liealgebras.root_system.rootsystem method)": [[97, "sympy.liealgebras.root_system.RootSystem.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_a.typea method)": [[97, "sympy.liealgebras.type_a.TypeA.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_b.typeb method)": [[97, "sympy.liealgebras.type_b.TypeB.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_c.typec method)": [[97, "sympy.liealgebras.type_c.TypeC.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_d.typed method)": [[97, "sympy.liealgebras.type_d.TypeD.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_e.typee method)": [[97, "sympy.liealgebras.type_e.TypeE.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_f.typef method)": [[97, "sympy.liealgebras.type_f.TypeF.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_g.typeg method)": [[97, "sympy.liealgebras.type_g.TypeG.cartan_matrix"]], "coxeter_diagram() (sympy.liealgebras.weyl_group.weylgroup method)": [[97, "sympy.liealgebras.weyl_group.WeylGroup.coxeter_diagram"]], "delete_doubles() (sympy.liealgebras.weyl_group.weylgroup method)": [[97, "sympy.liealgebras.weyl_group.WeylGroup.delete_doubles"]], "dimension() (sympy.liealgebras.type_a.typea method)": [[97, "sympy.liealgebras.type_a.TypeA.dimension"]], "dimension() (sympy.liealgebras.type_b.typeb method)": [[97, "sympy.liealgebras.type_b.TypeB.dimension"]], "dimension() (sympy.liealgebras.type_c.typec method)": [[97, "sympy.liealgebras.type_c.TypeC.dimension"]], "dimension() (sympy.liealgebras.type_d.typed method)": [[97, "sympy.liealgebras.type_d.TypeD.dimension"]], "dimension() (sympy.liealgebras.type_e.typee method)": [[97, "sympy.liealgebras.type_e.TypeE.dimension"]], "dimension() (sympy.liealgebras.type_f.typef method)": [[97, "sympy.liealgebras.type_f.TypeF.dimension"]], "dimension() (sympy.liealgebras.type_g.typeg method)": [[97, "sympy.liealgebras.type_g.TypeG.dimension"]], "dynkin_diagram() (sympy.liealgebras.root_system.rootsystem method)": [[97, "sympy.liealgebras.root_system.RootSystem.dynkin_diagram"]], "element_order() (sympy.liealgebras.weyl_group.weylgroup method)": [[97, "sympy.liealgebras.weyl_group.WeylGroup.element_order"]], "generators() (sympy.liealgebras.weyl_group.weylgroup method)": [[97, "sympy.liealgebras.weyl_group.WeylGroup.generators"]], "group_name() (sympy.liealgebras.weyl_group.weylgroup method)": [[97, "sympy.liealgebras.weyl_group.WeylGroup.group_name"]], "group_order() (sympy.liealgebras.weyl_group.weylgroup method)": [[97, "sympy.liealgebras.weyl_group.WeylGroup.group_order"]], "highest_root() (sympy.liealgebras.type_a.typea method)": [[97, "sympy.liealgebras.type_a.TypeA.highest_root"]], "lie_algebra() (sympy.liealgebras.type_a.typea method)": [[97, "sympy.liealgebras.type_a.TypeA.lie_algebra"]], "lie_algebra() (sympy.liealgebras.type_b.typeb method)": [[97, "sympy.liealgebras.type_b.TypeB.lie_algebra"]], "lie_algebra() (sympy.liealgebras.type_c.typec method)": [[97, "sympy.liealgebras.type_c.TypeC.lie_algebra"]], "lie_algebra() (sympy.liealgebras.type_d.typed method)": [[97, "sympy.liealgebras.type_d.TypeD.lie_algebra"]], "matrix_form() (sympy.liealgebras.weyl_group.weylgroup method)": [[97, "sympy.liealgebras.weyl_group.WeylGroup.matrix_form"]], "positive_roots() (sympy.liealgebras.type_a.typea method)": [[97, "sympy.liealgebras.type_a.TypeA.positive_roots"]], "positive_roots() (sympy.liealgebras.type_b.typeb method)": [[97, "sympy.liealgebras.type_b.TypeB.positive_roots"]], "positive_roots() (sympy.liealgebras.type_c.typec method)": [[97, "sympy.liealgebras.type_c.TypeC.positive_roots"]], "positive_roots() (sympy.liealgebras.type_d.typed method)": [[97, "sympy.liealgebras.type_d.TypeD.positive_roots"]], "positive_roots() (sympy.liealgebras.type_e.typee method)": [[97, "sympy.liealgebras.type_e.TypeE.positive_roots"]], "positive_roots() (sympy.liealgebras.type_f.typef method)": [[97, "sympy.liealgebras.type_f.TypeF.positive_roots"]], "positive_roots() (sympy.liealgebras.type_g.typeg method)": [[97, "sympy.liealgebras.type_g.TypeG.positive_roots"]], "rank() (sympy.liealgebras.cartan_type.standard_cartan method)": [[97, "sympy.liealgebras.cartan_type.Standard_Cartan.rank"]], "root_space() (sympy.liealgebras.root_system.rootsystem method)": [[97, "sympy.liealgebras.root_system.RootSystem.root_space"]], "roots() (sympy.liealgebras.type_a.typea method)": [[97, "sympy.liealgebras.type_a.TypeA.roots"]], "roots() (sympy.liealgebras.type_b.typeb method)": [[97, "sympy.liealgebras.type_b.TypeB.roots"]], "roots() (sympy.liealgebras.type_c.typec method)": [[97, "sympy.liealgebras.type_c.TypeC.roots"]], "roots() (sympy.liealgebras.type_d.typed method)": [[97, "sympy.liealgebras.type_d.TypeD.roots"]], "roots() (sympy.liealgebras.type_e.typee method)": [[97, "sympy.liealgebras.type_e.TypeE.roots"]], "roots() (sympy.liealgebras.type_f.typef method)": [[97, "sympy.liealgebras.type_f.TypeF.roots"]], "roots() (sympy.liealgebras.type_g.typeg method)": [[97, "sympy.liealgebras.type_g.TypeG.roots"]], "series() (sympy.liealgebras.cartan_type.standard_cartan method)": [[97, "sympy.liealgebras.cartan_type.Standard_Cartan.series"]], "simple_root() (sympy.liealgebras.type_a.typea method)": [[97, "sympy.liealgebras.type_a.TypeA.simple_root"]], "simple_root() (sympy.liealgebras.type_b.typeb method)": [[97, "sympy.liealgebras.type_b.TypeB.simple_root"]], "simple_root() (sympy.liealgebras.type_c.typec method)": [[97, "sympy.liealgebras.type_c.TypeC.simple_root"]], "simple_root() (sympy.liealgebras.type_d.typed method)": [[97, "sympy.liealgebras.type_d.TypeD.simple_root"]], "simple_root() (sympy.liealgebras.type_e.typee method)": [[97, "sympy.liealgebras.type_e.TypeE.simple_root"]], "simple_root() (sympy.liealgebras.type_f.typef method)": [[97, "sympy.liealgebras.type_f.TypeF.simple_root"]], "simple_root() (sympy.liealgebras.type_g.typeg method)": [[97, "sympy.liealgebras.type_g.TypeG.simple_root"]], "simple_roots() (sympy.liealgebras.root_system.rootsystem method)": [[97, "sympy.liealgebras.root_system.RootSystem.simple_roots"]], "sympy.liealgebras": [[97, "module-sympy.liealgebras"]], "anfform() (in module sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.ANFform"]], "and (class in sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.And"]], "boolean (class in sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.Boolean"]], "booleanfalse (class in sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.BooleanFalse"]], "booleantrue (class in sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.BooleanTrue"]], "equivalent (class in sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.Equivalent"]], "exclusive (class in sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.Exclusive"]], "ite (class in sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.ITE"]], "implies (class in sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.Implies"]], "nand (class in sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.Nand"]], "nor (class in sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.Nor"]], "not (class in sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.Not"]], "or (class in sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.Or"]], "posform() (in module sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.POSform"]], "sopform() (in module sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.SOPform"]], "xnor (class in sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.Xnor"]], "xor (class in sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.Xor"]], "anf_coeffs() (in module sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.anf_coeffs"]], "as_set() (sympy.logic.boolalg.boolean method)": [[98, "sympy.logic.boolalg.Boolean.as_set"]], "as_set() (sympy.logic.boolalg.booleanfalse method)": [[98, "sympy.logic.boolalg.BooleanFalse.as_set"]], "as_set() (sympy.logic.boolalg.booleantrue method)": [[98, "sympy.logic.boolalg.BooleanTrue.as_set"]], "bool_map() (in module sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.bool_map"]], "bool_maxterm() (in module sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.bool_maxterm"]], "bool_minterm() (in module sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.bool_minterm"]], "bool_monomial() (in module sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.bool_monomial"]], "distribute_and_over_or() (in module sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.distribute_and_over_or"]], "distribute_or_over_and() (in module sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.distribute_or_over_and"]], "distribute_xor_over_and() (in module sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.distribute_xor_over_and"]], "eliminate_implications() (in module sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.eliminate_implications"]], "equals() (sympy.logic.boolalg.boolean method)": [[98, "sympy.logic.boolalg.Boolean.equals"]], "gateinputcount() (in module sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.gateinputcount"]], "integer_to_term() (in module sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.integer_to_term"]], "is_anf() (in module sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.is_anf"]], "is_cnf() (in module sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.is_cnf"]], "is_dnf() (in module sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.is_dnf"]], "is_nnf() (in module sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.is_nnf"]], "satisfiable() (in module sympy.logic.inference)": [[98, "sympy.logic.inference.satisfiable"]], "simplify_logic() (in module sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.simplify_logic"]], "sympy.logic": [[98, "module-sympy.logic"]], "sympy.logic.inference": [[98, "module-sympy.logic.inference"]], "term_to_integer() (in module sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.term_to_integer"]], "to_anf() (in module sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.to_anf"]], "to_cnf() (in module sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.to_cnf"]], "to_dnf() (in module sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.to_dnf"]], "to_int_repr() (in module sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.to_int_repr"]], "to_nnf() (in module sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.to_nnf"]], "truth_table() (in module sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.truth_table"]], "c (sympy.matrices.common.matrixcommon property)": [[99, "sympy.matrices.common.MatrixCommon.C"]], "h (sympy.matrices.common.matrixcommon property)": [[99, "sympy.matrices.common.MatrixCommon.H"]], "matrixcommon (class in sympy.matrices.common)": [[99, "sympy.matrices.common.MatrixCommon"]], "matrixkind (class in sympy.matrices.common)": [[99, "sympy.matrices.common.MatrixKind"]], "t (sympy.matrices.common.matrixcommon property)": [[99, "sympy.matrices.common.MatrixCommon.T"]], "__abs__() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.__abs__"]], "__add__() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.__add__"]], "__getitem__() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.__getitem__"]], "__len__() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.__len__"]], "__mul__() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.__mul__"]], "__pow__() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.__pow__"]], "__weakref__ (sympy.matrices.common.matrixcommon attribute)": [[99, "sympy.matrices.common.MatrixCommon.__weakref__"]], "adjoint() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.adjoint"]], "applyfunc() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.applyfunc"]], "as_real_imag() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.as_real_imag"]], "atoms() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.atoms"]], "col() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.col"]], "col_del() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.col_del"]], "col_insert() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.col_insert"]], "col_join() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.col_join"]], "companion() (sympy.matrices.common.matrixcommon class method)": [[99, "sympy.matrices.common.MatrixCommon.companion"]], "conjugate() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.conjugate"]], "diag() (sympy.matrices.common.matrixcommon class method)": [[99, "sympy.matrices.common.MatrixCommon.diag"]], "diagonal() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.diagonal"]], "evalf() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.evalf"]], "expand() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.expand"]], "extract() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.extract"]], "eye() (sympy.matrices.common.matrixcommon class method)": [[99, "sympy.matrices.common.MatrixCommon.eye"]], "free_symbols (sympy.matrices.common.matrixcommon property)": [[99, "sympy.matrices.common.MatrixCommon.free_symbols"]], "get_diag_blocks() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.get_diag_blocks"]], "has() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.has"]], "hstack() (sympy.matrices.common.matrixcommon class method)": [[99, "sympy.matrices.common.MatrixCommon.hstack"]], "is_anti_symmetric() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.is_anti_symmetric"]], "is_diagonal() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.is_diagonal"]], "is_hermitian (sympy.matrices.common.matrixcommon property)": [[99, "sympy.matrices.common.MatrixCommon.is_hermitian"]], "is_lower (sympy.matrices.common.matrixcommon property)": [[99, "sympy.matrices.common.MatrixCommon.is_lower"]], "is_lower_hessenberg (sympy.matrices.common.matrixcommon property)": [[99, "sympy.matrices.common.MatrixCommon.is_lower_hessenberg"]], "is_square (sympy.matrices.common.matrixcommon property)": [[99, "sympy.matrices.common.MatrixCommon.is_square"]], "is_strongly_diagonally_dominant (sympy.matrices.common.matrixcommon property)": [[99, "sympy.matrices.common.MatrixCommon.is_strongly_diagonally_dominant"]], "is_symbolic() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.is_symbolic"]], "is_symmetric() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.is_symmetric"]], "is_upper (sympy.matrices.common.matrixcommon property)": [[99, "sympy.matrices.common.MatrixCommon.is_upper"]], "is_upper_hessenberg (sympy.matrices.common.matrixcommon property)": [[99, "sympy.matrices.common.MatrixCommon.is_upper_hessenberg"]], "is_weakly_diagonally_dominant (sympy.matrices.common.matrixcommon property)": [[99, "sympy.matrices.common.MatrixCommon.is_weakly_diagonally_dominant"]], "is_zero_matrix (sympy.matrices.common.matrixcommon property)": [[99, "sympy.matrices.common.MatrixCommon.is_zero_matrix"]], "jordan_block() (sympy.matrices.common.matrixcommon class method)": [[99, "sympy.matrices.common.MatrixCommon.jordan_block"]], "lower_triangular() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.lower_triangular"]], "multiply() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.multiply"]], "multiply_elementwise() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.multiply_elementwise"]], "n() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.n"]], "ones() (sympy.matrices.common.matrixcommon class method)": [[99, "sympy.matrices.common.MatrixCommon.ones"]], "permute() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.permute"]], "permute_cols() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.permute_cols"]], "permute_rows() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.permute_rows"]], "pow() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.pow"]], "refine() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.refine"]], "replace() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.replace"]], "reshape() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.reshape"]], "rmultiply() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.rmultiply"]], "rot90() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.rot90"]], "row() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.row"]], "row_del() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.row_del"]], "row_insert() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.row_insert"]], "row_join() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.row_join"]], "shape (sympy.matrices.common.matrixcommon property)": [[99, "sympy.matrices.common.MatrixCommon.shape"]], "simplify() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.simplify"]], "subs() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.subs"]], "sympy.matrices.common": [[99, "module-sympy.matrices.common"]], "todod() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.todod"]], "todok() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.todok"]], "tolist() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.tolist"]], "trace() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.trace"]], "transpose() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.transpose"]], "upper_triangular() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.upper_triangular"]], "values() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.values"]], "vec() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.vec"]], "vech() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.vech"]], "vstack() (sympy.matrices.common.matrixcommon class method)": [[99, "sympy.matrices.common.MatrixCommon.vstack"]], "wilkinson() (sympy.matrices.common.matrixcommon class method)": [[99, "sympy.matrices.common.MatrixCommon.wilkinson"]], "xreplace() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.xreplace"]], "zeros() (sympy.matrices.common.matrixcommon class method)": [[99, "sympy.matrices.common.MatrixCommon.zeros"]], "densematrix (class in sympy.matrices.dense)": [[100, "sympy.matrices.dense.DenseMatrix"]], "ldldecomposition() (sympy.matrices.dense.densematrix method)": [[100, "sympy.matrices.dense.DenseMatrix.LDLdecomposition"]], "matrix (in module sympy.matrices.dense)": [[100, "sympy.matrices.dense.Matrix"]], "mutabledensematrix (class in sympy.matrices.dense)": [[100, "sympy.matrices.dense.MutableDenseMatrix"]], "as_immutable() (sympy.matrices.dense.densematrix method)": [[100, "sympy.matrices.dense.DenseMatrix.as_immutable"]], "as_mutable() (sympy.matrices.dense.densematrix method)": [[100, "sympy.matrices.dense.DenseMatrix.as_mutable"]], "cholesky() (sympy.matrices.dense.densematrix method)": [[100, "sympy.matrices.dense.DenseMatrix.cholesky"]], "lower_triangular_solve() (sympy.matrices.dense.densematrix method)": [[100, "sympy.matrices.dense.DenseMatrix.lower_triangular_solve"]], "simplify() (sympy.matrices.dense.mutabledensematrix method)": [[100, "sympy.matrices.dense.MutableDenseMatrix.simplify"]], "upper_triangular_solve() (sympy.matrices.dense.densematrix method)": [[100, "sympy.matrices.dense.DenseMatrix.upper_triangular_solve"]], "blockdiagmatrix (class in sympy.matrices.expressions.blockmatrix)": [[101, "sympy.matrices.expressions.blockmatrix.BlockDiagMatrix"]], "blockmatrix (class in sympy.matrices.expressions.blockmatrix)": [[101, "sympy.matrices.expressions.blockmatrix.BlockMatrix"]], "companionmatrix (class in sympy.matrices.expressions)": [[101, "sympy.matrices.expressions.CompanionMatrix"]], "functionmatrix (class in sympy.matrices.expressions)": [[101, "sympy.matrices.expressions.FunctionMatrix"]], "hadamardpower (class in sympy.matrices.expressions)": [[101, "sympy.matrices.expressions.HadamardPower"]], "hadamardproduct (class in sympy.matrices.expressions)": [[101, "sympy.matrices.expressions.HadamardProduct"]], "identity (class in sympy.matrices.expressions)": [[101, "sympy.matrices.expressions.Identity"]], "inverse (class in sympy.matrices.expressions)": [[101, "sympy.matrices.expressions.Inverse"]], "ldudecomposition() (sympy.matrices.expressions.blockmatrix.blockmatrix method)": [[101, "sympy.matrices.expressions.blockmatrix.BlockMatrix.LDUdecomposition"]], "ludecomposition() (sympy.matrices.expressions.blockmatrix.blockmatrix method)": [[101, "sympy.matrices.expressions.blockmatrix.BlockMatrix.LUdecomposition"]], "matadd (class in sympy.matrices.expressions)": [[101, "sympy.matrices.expressions.MatAdd"]], "matmul (class in sympy.matrices.expressions)": [[101, "sympy.matrices.expressions.MatMul"]], "matpow (class in sympy.matrices.expressions)": [[101, "sympy.matrices.expressions.MatPow"]], "matrixexpr (class in sympy.matrices.expressions)": [[101, "sympy.matrices.expressions.MatrixExpr"]], "matrixpermute (class in sympy.matrices.expressions)": [[101, "sympy.matrices.expressions.MatrixPermute"]], "matrixset (class in sympy.matrices.expressions)": [[101, "sympy.matrices.expressions.MatrixSet"]], "matrixsymbol (class in sympy.matrices.expressions)": [[101, "sympy.matrices.expressions.MatrixSymbol"]], "permutationmatrix (class in sympy.matrices.expressions)": [[101, "sympy.matrices.expressions.PermutationMatrix"]], "t (sympy.matrices.expressions.matrixexpr property)": [[101, "sympy.matrices.expressions.MatrixExpr.T"]], "trace (class in sympy.matrices.expressions)": [[101, "sympy.matrices.expressions.Trace"]], "transpose (class in sympy.matrices.expressions)": [[101, "sympy.matrices.expressions.Transpose"]], "udldecomposition() (sympy.matrices.expressions.blockmatrix.blockmatrix method)": [[101, "sympy.matrices.expressions.blockmatrix.BlockMatrix.UDLdecomposition"]], "zeromatrix (class in sympy.matrices.expressions)": [[101, "sympy.matrices.expressions.ZeroMatrix"]], "as_coeff_mul() (sympy.matrices.expressions.matrixexpr method)": [[101, "sympy.matrices.expressions.MatrixExpr.as_coeff_Mul"]], "as_explicit() (sympy.matrices.expressions.matrixexpr method)": [[101, "sympy.matrices.expressions.MatrixExpr.as_explicit"]], "as_mutable() (sympy.matrices.expressions.matrixexpr method)": [[101, "sympy.matrices.expressions.MatrixExpr.as_mutable"]], "block_collapse() (in module sympy.matrices.expressions.blockmatrix)": [[101, "sympy.matrices.expressions.blockmatrix.block_collapse"]], "equals() (sympy.matrices.expressions.matrixexpr method)": [[101, "sympy.matrices.expressions.MatrixExpr.equals"]], "from_index_summation() (sympy.matrices.expressions.matrixexpr static method)": [[101, "sympy.matrices.expressions.MatrixExpr.from_index_summation"]], "get_diag_blocks() (sympy.matrices.expressions.blockmatrix.blockdiagmatrix method)": [[101, "sympy.matrices.expressions.blockmatrix.BlockDiagMatrix.get_diag_blocks"]], "hadamard_product() (in module sympy.matrices.expressions)": [[101, "sympy.matrices.expressions.hadamard_product"]], "schur() (sympy.matrices.expressions.blockmatrix.blockmatrix method)": [[101, "sympy.matrices.expressions.blockmatrix.BlockMatrix.schur"]], "sympy.matrices.expressions": [[101, "module-sympy.matrices.expressions"]], "sympy.matrices.expressions.blockmatrix": [[101, "module-sympy.matrices.expressions.blockmatrix"]], "transpose() (sympy.matrices.expressions.blockmatrix.blockmatrix method)": [[101, "sympy.matrices.expressions.blockmatrix.BlockMatrix.transpose"]], "immutabledensematrix (class in sympy.matrices.immutable)": [[102, "sympy.matrices.immutable.ImmutableDenseMatrix"]], "immutablematrix (in module sympy.matrices.immutable)": [[102, "sympy.matrices.immutable.ImmutableMatrix"]], "sympy.matrices.immutable": [[102, "module-sympy.matrices.immutable"]], "sympy.matrices": [[103, "module-sympy.matrices"]], "d (sympy.matrices.matrices.matrixbase property)": [[104, "sympy.matrices.matrices.MatrixBase.D"]], "gramschmidt() (in module sympy.matrices.dense)": [[104, "sympy.matrices.dense.GramSchmidt"]], "ldldecomposition() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.LDLdecomposition"]], "ldlsolve() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.LDLsolve"]], "ludecomposition() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.LUdecomposition"]], "ludecompositionff() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.LUdecompositionFF"]], "ludecomposition_simple() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.LUdecomposition_Simple"]], "lusolve() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.LUsolve"]], "matrixbase (class in sympy.matrices.matrices)": [[104, "sympy.matrices.matrices.MatrixBase"]], "matrixcalculus (class in sympy.matrices.matrices)": [[104, "sympy.matrices.matrices.MatrixCalculus"]], "matrixdeterminant (class in sympy.matrices.matrices)": [[104, "sympy.matrices.matrices.MatrixDeterminant"]], "matrixeigen (class in sympy.matrices.matrices)": [[104, "sympy.matrices.matrices.MatrixEigen"]], "matrixerror (class in sympy.matrices.matrices)": [[104, "sympy.matrices.matrices.MatrixError"]], "matrixreductions (class in sympy.matrices.matrices)": [[104, "sympy.matrices.matrices.MatrixReductions"]], "matrixsubspaces (class in sympy.matrices.matrices)": [[104, "sympy.matrices.matrices.MatrixSubspaces"]], "nonsquarematrixerror (class in sympy.matrices.matrices)": [[104, "sympy.matrices.matrices.NonSquareMatrixError"]], "qrdecomposition() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.QRdecomposition"]], "qrsolve() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.QRsolve"]], "shapeerror (class in sympy.matrices.matrices)": [[104, "sympy.matrices.matrices.ShapeError"]], "a2idx() (in module sympy.matrices.matrices)": [[104, "sympy.matrices.matrices.a2idx"]], "add() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.add"]], "adjugate() (sympy.matrices.matrices.matrixdeterminant method)": [[104, "sympy.matrices.matrices.MatrixDeterminant.adjugate"]], "analytic_func() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.analytic_func"]], "bidiagonal_decomposition() (sympy.matrices.matrices.matrixeigen method)": [[104, "sympy.matrices.matrices.MatrixEigen.bidiagonal_decomposition"]], "bidiagonalize() (sympy.matrices.matrices.matrixeigen method)": [[104, "sympy.matrices.matrices.MatrixEigen.bidiagonalize"]], "casoratian() (in module sympy.matrices.dense)": [[104, "sympy.matrices.dense.casoratian"]], "charpoly() (sympy.matrices.matrices.matrixdeterminant method)": [[104, "sympy.matrices.matrices.MatrixDeterminant.charpoly"]], "cholesky() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.cholesky"]], "cholesky_solve() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.cholesky_solve"]], "cofactor() (sympy.matrices.matrices.matrixdeterminant method)": [[104, "sympy.matrices.matrices.MatrixDeterminant.cofactor"]], "cofactor_matrix() (sympy.matrices.matrices.matrixdeterminant method)": [[104, "sympy.matrices.matrices.MatrixDeterminant.cofactor_matrix"]], "columnspace() (sympy.matrices.matrices.matrixsubspaces method)": [[104, "sympy.matrices.matrices.MatrixSubspaces.columnspace"]], "condition_number() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.condition_number"]], "connected_components() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.connected_components"]], "connected_components_decomposition() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.connected_components_decomposition"]], "copy() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.copy"]], "cramer_solve() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.cramer_solve"]], "cross() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.cross"]], "det() (sympy.matrices.matrices.matrixdeterminant method)": [[104, "sympy.matrices.matrices.MatrixDeterminant.det"]], "diag() (in module sympy.matrices.dense)": [[104, "sympy.matrices.dense.diag"]], "diagonal_solve() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.diagonal_solve"]], "diagonalize() (sympy.matrices.matrices.matrixeigen method)": [[104, "sympy.matrices.matrices.MatrixEigen.diagonalize"]], "diff() (sympy.matrices.matrices.matrixcalculus method)": [[104, "sympy.matrices.matrices.MatrixCalculus.diff"]], "dot() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.dot"]], "dual() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.dual"]], "echelon_form() (sympy.matrices.matrices.matrixreductions method)": [[104, "sympy.matrices.matrices.MatrixReductions.echelon_form"]], "eigenvals() (sympy.matrices.matrices.matrixeigen method)": [[104, "sympy.matrices.matrices.MatrixEigen.eigenvals"]], "eigenvects() (sympy.matrices.matrices.matrixeigen method)": [[104, "sympy.matrices.matrices.MatrixEigen.eigenvects"]], "elementary_col_op() (sympy.matrices.matrices.matrixreductions method)": [[104, "sympy.matrices.matrices.MatrixReductions.elementary_col_op"]], "elementary_row_op() (sympy.matrices.matrices.matrixreductions method)": [[104, "sympy.matrices.matrices.MatrixReductions.elementary_row_op"]], "exp() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.exp"]], "eye() (in module sympy.matrices.dense)": [[104, "sympy.matrices.dense.eye"]], "gauss_jordan_solve() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.gauss_jordan_solve"]], "hat() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.hat"]], "hessian() (in module sympy.matrices.dense)": [[104, "sympy.matrices.dense.hessian"]], "integrate() (sympy.matrices.matrices.matrixcalculus method)": [[104, "sympy.matrices.matrices.MatrixCalculus.integrate"]], "inv() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.inv"]], "inv_mod() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.inv_mod"]], "inverse_adj() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.inverse_ADJ"]], "inverse_block() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.inverse_BLOCK"]], "inverse_ch() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.inverse_CH"]], "inverse_ge() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.inverse_GE"]], "inverse_ldl() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.inverse_LDL"]], "inverse_lu() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.inverse_LU"]], "inverse_qr() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.inverse_QR"]], "irregular() (sympy.matrices.matrices.matrixbase class method)": [[104, "sympy.matrices.matrices.MatrixBase.irregular"]], "is_diagonalizable() (sympy.matrices.matrices.matrixeigen method)": [[104, "sympy.matrices.matrices.MatrixEigen.is_diagonalizable"]], "is_echelon (sympy.matrices.matrices.matrixreductions property)": [[104, "sympy.matrices.matrices.MatrixReductions.is_echelon"]], "is_indefinite (sympy.matrices.matrices.matrixeigen property)": [[104, "sympy.matrices.matrices.MatrixEigen.is_indefinite"]], "is_negative_definite (sympy.matrices.matrices.matrixeigen property)": [[104, "sympy.matrices.matrices.MatrixEigen.is_negative_definite"]], "is_negative_semidefinite (sympy.matrices.matrices.matrixeigen property)": [[104, "sympy.matrices.matrices.MatrixEigen.is_negative_semidefinite"]], "is_nilpotent() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.is_nilpotent"]], "is_positive_definite (sympy.matrices.matrices.matrixeigen property)": [[104, "sympy.matrices.matrices.MatrixEigen.is_positive_definite"]], "is_positive_semidefinite (sympy.matrices.matrices.matrixeigen property)": [[104, "sympy.matrices.matrices.MatrixEigen.is_positive_semidefinite"]], "jacobian() (sympy.matrices.matrices.matrixcalculus method)": [[104, "sympy.matrices.matrices.MatrixCalculus.jacobian"]], "jordan_cell() (in module sympy.matrices.dense)": [[104, "sympy.matrices.dense.jordan_cell"]], "jordan_form() (sympy.matrices.matrices.matrixeigen method)": [[104, "sympy.matrices.matrices.MatrixEigen.jordan_form"]], "key2bounds() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.key2bounds"]], "key2ij() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.key2ij"]], "left_eigenvects() (sympy.matrices.matrices.matrixeigen method)": [[104, "sympy.matrices.matrices.MatrixEigen.left_eigenvects"]], "limit() (sympy.matrices.matrices.matrixcalculus method)": [[104, "sympy.matrices.matrices.MatrixCalculus.limit"]], "list2numpy() (in module sympy.matrices.dense)": [[104, "sympy.matrices.dense.list2numpy"]], "log() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.log"]], "lower_triangular_solve() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.lower_triangular_solve"]], "matrix2numpy() (in module sympy.matrices.dense)": [[104, "sympy.matrices.dense.matrix2numpy"]], "matrix_multiply_elementwise() (in module sympy.matrices.dense)": [[104, "sympy.matrices.dense.matrix_multiply_elementwise"]], "minor() (sympy.matrices.matrices.matrixdeterminant method)": [[104, "sympy.matrices.matrices.MatrixDeterminant.minor"]], "minor_submatrix() (sympy.matrices.matrices.matrixdeterminant method)": [[104, "sympy.matrices.matrices.MatrixDeterminant.minor_submatrix"]], "norm() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.norm"]], "normalized() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.normalized"]], "nullspace() (sympy.matrices.matrices.matrixsubspaces method)": [[104, "sympy.matrices.matrices.MatrixSubspaces.nullspace"]], "ones() (in module sympy.matrices.dense)": [[104, "sympy.matrices.dense.ones"]], "orthogonalize() (sympy.matrices.matrices.matrixsubspaces class method)": [[104, "sympy.matrices.matrices.MatrixSubspaces.orthogonalize"]], "per() (sympy.matrices.matrices.matrixdeterminant method)": [[104, "sympy.matrices.matrices.MatrixDeterminant.per"]], "pinv() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.pinv"]], "pinv_solve() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.pinv_solve"]], "print_nonzero() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.print_nonzero"]], "project() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.project"]], "randmatrix() (in module sympy.matrices.dense)": [[104, "sympy.matrices.dense.randMatrix"]], "rank() (sympy.matrices.matrices.matrixreductions method)": [[104, "sympy.matrices.matrices.MatrixReductions.rank"]], "rank_decomposition() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.rank_decomposition"]], "rot_axis1() (in module sympy.matrices.dense)": [[104, "sympy.matrices.dense.rot_axis1"]], "rot_axis2() (in module sympy.matrices.dense)": [[104, "sympy.matrices.dense.rot_axis2"]], "rot_axis3() (in module sympy.matrices.dense)": [[104, "sympy.matrices.dense.rot_axis3"]], "rot_ccw_axis1() (in module sympy.matrices.dense)": [[104, "sympy.matrices.dense.rot_ccw_axis1"]], "rot_ccw_axis2() (in module sympy.matrices.dense)": [[104, "sympy.matrices.dense.rot_ccw_axis2"]], "rot_ccw_axis3() (in module sympy.matrices.dense)": [[104, "sympy.matrices.dense.rot_ccw_axis3"]], "rot_givens() (in module sympy.matrices.dense)": [[104, "sympy.matrices.dense.rot_givens"]], "rowspace() (sympy.matrices.matrices.matrixsubspaces method)": [[104, "sympy.matrices.matrices.MatrixSubspaces.rowspace"]], "rref() (sympy.matrices.matrices.matrixreductions method)": [[104, "sympy.matrices.matrices.MatrixReductions.rref"]], "singular_value_decomposition() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.singular_value_decomposition"]], "singular_values() (sympy.matrices.matrices.matrixeigen method)": [[104, "sympy.matrices.matrices.MatrixEigen.singular_values"]], "solve() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.solve"]], "solve_least_squares() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.solve_least_squares"]], "strongly_connected_components() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.strongly_connected_components"]], "strongly_connected_components_decomposition() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.strongly_connected_components_decomposition"]], "symarray() (in module sympy.matrices.dense)": [[104, "sympy.matrices.dense.symarray"]], "sympy.matrices.matrices": [[104, "module-sympy.matrices.matrices"]], "table() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.table"]], "upper_hessenberg_decomposition() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.upper_hessenberg_decomposition"]], "upper_triangular_solve() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.upper_triangular_solve"]], "vee() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.vee"]], "wronskian() (in module sympy.matrices.dense)": [[104, "sympy.matrices.dense.wronskian"]], "zeros() (in module sympy.matrices.dense)": [[104, "sympy.matrices.dense.zeros"]], "hermite_normal_form() (in module sympy.matrices.normalforms)": [[105, "sympy.matrices.normalforms.hermite_normal_form"]], "smith_normal_form() (in module sympy.matrices.normalforms)": [[105, "sympy.matrices.normalforms.smith_normal_form"]], "immutablesparsematrix (class in sympy.matrices.immutable)": [[106, "sympy.matrices.immutable.ImmutableSparseMatrix"]], "mutablesparsematrix (class in sympy.matrices.sparse)": [[106, "sympy.matrices.sparse.MutableSparseMatrix"]], "sparsematrix (in module sympy.matrices.sparse)": [[106, "sympy.matrices.sparse.SparseMatrix"]], "sympy.matrices.sparse": [[106, "module-sympy.matrices.sparse"]], "_csrtodok() (in module sympy.matrices.sparsetools)": [[107, "sympy.matrices.sparsetools._csrtodok"]], "_doktocsr() (in module sympy.matrices.sparsetools)": [[107, "sympy.matrices.sparsetools._doktocsr"]], "banded() (in module sympy.matrices.sparsetools)": [[107, "sympy.matrices.sparsetools.banded"]], "sympy.matrices.sparsetools": [[107, "module-sympy.matrices.sparsetools"]], "sieve (class in sympy.ntheory.generate)": [[108, "sympy.ntheory.generate.Sieve"]], "abundance() (in module sympy.ntheory.factor_)": [[108, "sympy.ntheory.factor_.abundance"]], "antidivisor_count() (in module sympy.ntheory.factor_)": [[108, "sympy.ntheory.factor_.antidivisor_count"]], "antidivisors() (in module sympy.ntheory.factor_)": [[108, "sympy.ntheory.factor_.antidivisors"]], "binomial_coefficients() (in module sympy.ntheory.multinomial)": [[108, "sympy.ntheory.multinomial.binomial_coefficients"]], "binomial_coefficients_list() (in module sympy.ntheory.multinomial)": [[108, "sympy.ntheory.multinomial.binomial_coefficients_list"]], "binomial_mod() (in module sympy.ntheory.residue_ntheory)": [[108, "sympy.ntheory.residue_ntheory.binomial_mod"]], "composite() (in module sympy.ntheory.generate)": [[108, "sympy.ntheory.generate.composite"]], "compositepi() (in module sympy.ntheory.generate)": [[108, "sympy.ntheory.generate.compositepi"]], "continued_fraction() (in module sympy.ntheory.continued_fraction)": [[108, "sympy.ntheory.continued_fraction.continued_fraction"]], "continued_fraction_convergents() (in module sympy.ntheory.continued_fraction)": [[108, "sympy.ntheory.continued_fraction.continued_fraction_convergents"]], "continued_fraction_iterator() (in module sympy.ntheory.continued_fraction)": [[108, "sympy.ntheory.continued_fraction.continued_fraction_iterator"]], "continued_fraction_periodic() (in module sympy.ntheory.continued_fraction)": [[108, "sympy.ntheory.continued_fraction.continued_fraction_periodic"]], "continued_fraction_reduce() (in module sympy.ntheory.continued_fraction)": [[108, "sympy.ntheory.continued_fraction.continued_fraction_reduce"]], "core() (in module sympy.ntheory.factor_)": [[108, "sympy.ntheory.factor_.core"]], "count_digits() (in module sympy.ntheory.digits)": [[108, "sympy.ntheory.digits.count_digits"]], "crt() (in module sympy.ntheory.modular)": [[108, "sympy.ntheory.modular.crt"]], "crt1() (in module sympy.ntheory.modular)": [[108, "sympy.ntheory.modular.crt1"]], "crt2() (in module sympy.ntheory.modular)": [[108, "sympy.ntheory.modular.crt2"]], "cycle_length() (in module sympy.ntheory.generate)": [[108, "sympy.ntheory.generate.cycle_length"]], "digits() (in module sympy.ntheory.digits)": [[108, "sympy.ntheory.digits.digits"]], "digits() (in module sympy.ntheory.factor_)": [[108, "sympy.ntheory.factor_.digits"]], "discrete_log() (in module sympy.ntheory.residue_ntheory)": [[108, "sympy.ntheory.residue_ntheory.discrete_log"]], "divisor_count() (in module sympy.ntheory.factor_)": [[108, "sympy.ntheory.factor_.divisor_count"]], "divisor_sigma (class in sympy.ntheory.factor_)": [[108, "sympy.ntheory.factor_.divisor_sigma"]], "divisors() (in module sympy.ntheory.factor_)": [[108, "sympy.ntheory.factor_.divisors"]], "ecm() (in module sympy.ntheory.ecm)": [[108, "sympy.ntheory.ecm.ecm"]], "egyptian_fraction() (in module sympy.ntheory.egyptian_fraction)": [[108, "sympy.ntheory.egyptian_fraction.egyptian_fraction"]], "extend() (sympy.ntheory.generate.sieve method)": [[108, "sympy.ntheory.generate.Sieve.extend"]], "extend_to_no() (sympy.ntheory.generate.sieve method)": [[108, "sympy.ntheory.generate.Sieve.extend_to_no"]], "factorint() (in module sympy.ntheory.factor_)": [[108, "sympy.ntheory.factor_.factorint"]], "factorrat() (in module sympy.ntheory.factor_)": [[108, "sympy.ntheory.factor_.factorrat"]], "is_abundant() (in module sympy.ntheory.factor_)": [[108, "sympy.ntheory.factor_.is_abundant"]], "is_amicable() (in module sympy.ntheory.factor_)": [[108, "sympy.ntheory.factor_.is_amicable"]], "is_deficient() (in module sympy.ntheory.factor_)": [[108, "sympy.ntheory.factor_.is_deficient"]], "is_euler_pseudoprime() (in module sympy.ntheory.primetest)": [[108, "sympy.ntheory.primetest.is_euler_pseudoprime"]], "is_extra_strong_lucas_prp() (in module sympy.ntheory.primetest)": [[108, "sympy.ntheory.primetest.is_extra_strong_lucas_prp"]], "is_gaussian_prime() (in module sympy.ntheory.primetest)": [[108, "sympy.ntheory.primetest.is_gaussian_prime"]], "is_lucas_prp() (in module sympy.ntheory.primetest)": [[108, "sympy.ntheory.primetest.is_lucas_prp"]], "is_mersenne_prime() (in module sympy.ntheory.factor_)": [[108, "sympy.ntheory.factor_.is_mersenne_prime"]], "is_nthpow_residue() (in module sympy.ntheory.residue_ntheory)": [[108, "sympy.ntheory.residue_ntheory.is_nthpow_residue"]], "is_palindromic() (in module sympy.ntheory.digits)": [[108, "sympy.ntheory.digits.is_palindromic"]], "is_perfect() (in module sympy.ntheory.factor_)": [[108, "sympy.ntheory.factor_.is_perfect"]], "is_primitive_root() (in module sympy.ntheory.residue_ntheory)": [[108, "sympy.ntheory.residue_ntheory.is_primitive_root"]], "is_quad_residue() (in module sympy.ntheory.residue_ntheory)": [[108, "sympy.ntheory.residue_ntheory.is_quad_residue"]], "is_square() (in module sympy.ntheory.primetest)": [[108, "sympy.ntheory.primetest.is_square"]], "is_strong_lucas_prp() (in module sympy.ntheory.primetest)": [[108, "sympy.ntheory.primetest.is_strong_lucas_prp"]], "isprime() (in module sympy.ntheory.primetest)": [[108, "sympy.ntheory.primetest.isprime"]], "jacobi_symbol() (in module sympy.ntheory.residue_ntheory)": [[108, "sympy.ntheory.residue_ntheory.jacobi_symbol"]], "kronecker_symbol() (in module sympy.ntheory.residue_ntheory)": [[108, "sympy.ntheory.residue_ntheory.kronecker_symbol"]], "legendre_symbol() (in module sympy.ntheory.residue_ntheory)": [[108, "sympy.ntheory.residue_ntheory.legendre_symbol"]], "mersenne_prime_exponent() (in module sympy.ntheory.factor_)": [[108, "sympy.ntheory.factor_.mersenne_prime_exponent"]], "mobius (class in sympy.ntheory)": [[108, "sympy.ntheory.mobius"]], "mobiusrange() (sympy.ntheory.generate.sieve method)": [[108, "sympy.ntheory.generate.Sieve.mobiusrange"]], "mr() (in module sympy.ntheory.primetest)": [[108, "sympy.ntheory.primetest.mr"]], "multinomial_coefficients() (in module sympy.ntheory.multinomial)": [[108, "sympy.ntheory.multinomial.multinomial_coefficients"]], "multinomial_coefficients_iterator() (in module sympy.ntheory.multinomial)": [[108, "sympy.ntheory.multinomial.multinomial_coefficients_iterator"]], "multiplicity() (in module sympy.ntheory.factor_)": [[108, "sympy.ntheory.factor_.multiplicity"]], "n_order() (in module sympy.ntheory.residue_ntheory)": [[108, "sympy.ntheory.residue_ntheory.n_order"]], "nextprime() (in module sympy.ntheory.generate)": [[108, "sympy.ntheory.generate.nextprime"]], "npartitions() (in module sympy.ntheory.partitions_)": [[108, "sympy.ntheory.partitions_.npartitions"]], "nthroot_mod() (in module sympy.ntheory.residue_ntheory)": [[108, "sympy.ntheory.residue_ntheory.nthroot_mod"]], "perfect_power() (in module sympy.ntheory.factor_)": [[108, "sympy.ntheory.factor_.perfect_power"]], "pi_hex_digits() (in module sympy.ntheory.bbp_pi)": [[108, "sympy.ntheory.bbp_pi.pi_hex_digits"]], "pollard_pm1() (in module sympy.ntheory.factor_)": [[108, "sympy.ntheory.factor_.pollard_pm1"]], "pollard_rho() (in module sympy.ntheory.factor_)": [[108, "sympy.ntheory.factor_.pollard_rho"]], "polynomial_congruence() (in module sympy.ntheory.residue_ntheory)": [[108, "sympy.ntheory.residue_ntheory.polynomial_congruence"]], "prevprime() (in module sympy.ntheory.generate)": [[108, "sympy.ntheory.generate.prevprime"]], "prime() (in module sympy.ntheory.generate)": [[108, "sympy.ntheory.generate.prime"]], "primefactors() (in module sympy.ntheory.factor_)": [[108, "sympy.ntheory.factor_.primefactors"]], "primenu (class in sympy.ntheory.factor_)": [[108, "sympy.ntheory.factor_.primenu"]], "primeomega (class in sympy.ntheory.factor_)": [[108, "sympy.ntheory.factor_.primeomega"]], "primepi() (in module sympy.ntheory.generate)": [[108, "sympy.ntheory.generate.primepi"]], "primerange() (in module sympy.ntheory.generate)": [[108, "sympy.ntheory.generate.primerange"]], "primerange() (sympy.ntheory.generate.sieve method)": [[108, "sympy.ntheory.generate.Sieve.primerange"]], "primitive_root() (in module sympy.ntheory.residue_ntheory)": [[108, "sympy.ntheory.residue_ntheory.primitive_root"]], "primorial() (in module sympy.ntheory.generate)": [[108, "sympy.ntheory.generate.primorial"]], "proper_divisor_count() (in module sympy.ntheory.factor_)": [[108, "sympy.ntheory.factor_.proper_divisor_count"]], "proper_divisors() (in module sympy.ntheory.factor_)": [[108, "sympy.ntheory.factor_.proper_divisors"]], "qs() (in module sympy.ntheory.qs)": [[108, "sympy.ntheory.qs.qs"]], "quadratic_congruence() (in module sympy.ntheory.residue_ntheory)": [[108, "sympy.ntheory.residue_ntheory.quadratic_congruence"]], "quadratic_residues() (in module sympy.ntheory.residue_ntheory)": [[108, "sympy.ntheory.residue_ntheory.quadratic_residues"]], "randprime() (in module sympy.ntheory.generate)": [[108, "sympy.ntheory.generate.randprime"]], "reduced_totient (class in sympy.ntheory.factor_)": [[108, "sympy.ntheory.factor_.reduced_totient"]], "search() (sympy.ntheory.generate.sieve method)": [[108, "sympy.ntheory.generate.Sieve.search"]], "smoothness() (in module sympy.ntheory.factor_)": [[108, "sympy.ntheory.factor_.smoothness"]], "smoothness_p() (in module sympy.ntheory.factor_)": [[108, "sympy.ntheory.factor_.smoothness_p"]], "solve_congruence() (in module sympy.ntheory.modular)": [[108, "sympy.ntheory.modular.solve_congruence"]], "sqrt_mod() (in module sympy.ntheory.residue_ntheory)": [[108, "sympy.ntheory.residue_ntheory.sqrt_mod"]], "sqrt_mod_iter() (in module sympy.ntheory.residue_ntheory)": [[108, "sympy.ntheory.residue_ntheory.sqrt_mod_iter"]], "symmetric_residue() (in module sympy.ntheory.modular)": [[108, "sympy.ntheory.modular.symmetric_residue"]], "sympy.ntheory.bbp_pi": [[108, "module-sympy.ntheory.bbp_pi"]], "sympy.ntheory.continued_fraction": [[108, "module-sympy.ntheory.continued_fraction"]], "sympy.ntheory.digits": [[108, "module-sympy.ntheory.digits"]], "sympy.ntheory.ecm": [[108, "module-sympy.ntheory.ecm"]], "sympy.ntheory.egyptian_fraction": [[108, "module-sympy.ntheory.egyptian_fraction"]], "sympy.ntheory.factor_": [[108, "module-sympy.ntheory.factor_"]], "sympy.ntheory.generate": [[108, "module-sympy.ntheory.generate"]], "sympy.ntheory.modular": [[108, "module-sympy.ntheory.modular"]], "sympy.ntheory.multinomial": [[108, "module-sympy.ntheory.multinomial"]], "sympy.ntheory.partitions_": [[108, "module-sympy.ntheory.partitions_"]], "sympy.ntheory.primetest": [[108, "module-sympy.ntheory.primetest"]], "sympy.ntheory.qs": [[108, "module-sympy.ntheory.qs"]], "sympy.ntheory.residue_ntheory": [[108, "module-sympy.ntheory.residue_ntheory"]], "totient (class in sympy.ntheory.factor_)": [[108, "sympy.ntheory.factor_.totient"]], "totientrange() (sympy.ntheory.generate.sieve method)": [[108, "sympy.ntheory.generate.Sieve.totientrange"]], "trailing() (in module sympy.ntheory.factor_)": [[108, "sympy.ntheory.factor_.trailing"]], "udivisor_count() (in module sympy.ntheory.factor_)": [[108, "sympy.ntheory.factor_.udivisor_count"]], "udivisor_sigma (class in sympy.ntheory.factor_)": [[108, "sympy.ntheory.factor_.udivisor_sigma"]], "udivisors() (in module sympy.ntheory.factor_)": [[108, "sympy.ntheory.factor_.udivisors"]], "latexparsingerror (class in sympy.parsing.latex)": [[110, "sympy.parsing.latex.LaTeXParsingError"]], "sympyexpression (class in sympy.parsing.sym_expr)": [[110, "sympy.parsing.sym_expr.SymPyExpression"]], "auto_number() (in module sympy.parsing.sympy_parser)": [[110, "sympy.parsing.sympy_parser.auto_number"]], "auto_symbol() (in module sympy.parsing.sympy_parser)": [[110, "sympy.parsing.sympy_parser.auto_symbol"]], "convert_to_c() (sympy.parsing.sym_expr.sympyexpression method)": [[110, "sympy.parsing.sym_expr.SymPyExpression.convert_to_c"]], "convert_to_expr() (sympy.parsing.sym_expr.sympyexpression method)": [[110, "sympy.parsing.sym_expr.SymPyExpression.convert_to_expr"]], "convert_to_fortran() (sympy.parsing.sym_expr.sympyexpression method)": [[110, "sympy.parsing.sym_expr.SymPyExpression.convert_to_fortran"]], "convert_to_python() (sympy.parsing.sym_expr.sympyexpression method)": [[110, "sympy.parsing.sym_expr.SymPyExpression.convert_to_python"]], "convert_xor() (in module sympy.parsing.sympy_parser)": [[110, "sympy.parsing.sympy_parser.convert_xor"]], "eval_expr() (in module sympy.parsing.sympy_parser)": [[110, "sympy.parsing.sympy_parser.eval_expr"]], "factorial_notation() (in module sympy.parsing.sympy_parser)": [[110, "sympy.parsing.sympy_parser.factorial_notation"]], "function_exponentiation() (in module sympy.parsing.sympy_parser)": [[110, "sympy.parsing.sympy_parser.function_exponentiation"]], "implicit_application() (in module sympy.parsing.sympy_parser)": [[110, "sympy.parsing.sympy_parser.implicit_application"]], "implicit_multiplication() (in module sympy.parsing.sympy_parser)": [[110, "sympy.parsing.sympy_parser.implicit_multiplication"]], "implicit_multiplication_application() (in module sympy.parsing.sympy_parser)": [[110, "sympy.parsing.sympy_parser.implicit_multiplication_application"]], "lambda_notation() (in module sympy.parsing.sympy_parser)": [[110, "sympy.parsing.sympy_parser.lambda_notation"]], "parse_expr() (in module sympy.parsing.sympy_parser)": [[110, "sympy.parsing.sympy_parser.parse_expr"]], "parse_latex() (in module sympy.parsing.latex)": [[110, "sympy.parsing.latex.parse_latex"]], "parse_mathematica() (in module sympy.parsing.mathematica)": [[110, "sympy.parsing.mathematica.parse_mathematica"]], "parse_maxima() (in module sympy.parsing.maxima)": [[110, "sympy.parsing.maxima.parse_maxima"]], "rationalize() (in module sympy.parsing.sympy_parser)": [[110, "sympy.parsing.sympy_parser.rationalize"]], "repeated_decimals() (in module sympy.parsing.sympy_parser)": [[110, "sympy.parsing.sympy_parser.repeated_decimals"]], "return_expr() (sympy.parsing.sym_expr.sympyexpression method)": [[110, "sympy.parsing.sym_expr.SymPyExpression.return_expr"]], "split_symbols() (in module sympy.parsing.sympy_parser)": [[110, "sympy.parsing.sympy_parser.split_symbols"]], "split_symbols_custom() (in module sympy.parsing.sympy_parser)": [[110, "sympy.parsing.sympy_parser.split_symbols_custom"]], "standard_transformations (in module sympy.parsing.sympy_parser)": [[110, "sympy.parsing.sympy_parser.standard_transformations"]], "stringify_expr() (in module sympy.parsing.sympy_parser)": [[110, "sympy.parsing.sympy_parser.stringify_expr"]], "sympy.parsing": [[110, "module-sympy.parsing"]], "sympy.parsing.sym_expr": [[110, "module-sympy.parsing.sym_expr"]], "beam (class in sympy.physics.continuum_mechanics.beam)": [[111, "sympy.physics.continuum_mechanics.beam.Beam"]], "beam3d (class in sympy.physics.continuum_mechanics.beam)": [[111, "sympy.physics.continuum_mechanics.beam.Beam3D"]], "angular_deflection() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[111, "sympy.physics.continuum_mechanics.beam.Beam3D.angular_deflection"]], "applied_loads (sympy.physics.continuum_mechanics.beam.beam property)": [[111, "sympy.physics.continuum_mechanics.beam.Beam.applied_loads"]], "apply_load() (sympy.physics.continuum_mechanics.beam.beam method)": [[111, "sympy.physics.continuum_mechanics.beam.Beam.apply_load"]], "apply_load() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[111, "sympy.physics.continuum_mechanics.beam.Beam3D.apply_load"]], "apply_moment_load() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[111, "sympy.physics.continuum_mechanics.beam.Beam3D.apply_moment_load"]], "apply_support() (sympy.physics.continuum_mechanics.beam.beam method)": [[111, "sympy.physics.continuum_mechanics.beam.Beam.apply_support"]], "area (sympy.physics.continuum_mechanics.beam.beam property)": [[111, "sympy.physics.continuum_mechanics.beam.Beam.area"]], "area (sympy.physics.continuum_mechanics.beam.beam3d property)": [[111, "sympy.physics.continuum_mechanics.beam.Beam3D.area"]], "axial_force() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[111, "sympy.physics.continuum_mechanics.beam.Beam3D.axial_force"]], "axial_stress() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[111, "sympy.physics.continuum_mechanics.beam.Beam3D.axial_stress"]], "bending_moment() (sympy.physics.continuum_mechanics.beam.beam method)": [[111, "sympy.physics.continuum_mechanics.beam.Beam.bending_moment"]], "bending_moment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[111, "sympy.physics.continuum_mechanics.beam.Beam3D.bending_moment"]], "boundary_conditions (sympy.physics.continuum_mechanics.beam.beam property)": [[111, "sympy.physics.continuum_mechanics.beam.Beam.boundary_conditions"]], "boundary_conditions (sympy.physics.continuum_mechanics.beam.beam3d property)": [[111, "sympy.physics.continuum_mechanics.beam.Beam3D.boundary_conditions"]], "cross_section (sympy.physics.continuum_mechanics.beam.beam property)": [[111, "sympy.physics.continuum_mechanics.beam.Beam.cross_section"]], "deflection() (sympy.physics.continuum_mechanics.beam.beam method)": [[111, "sympy.physics.continuum_mechanics.beam.Beam.deflection"]], "deflection() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[111, "sympy.physics.continuum_mechanics.beam.Beam3D.deflection"]], "draw() (sympy.physics.continuum_mechanics.beam.beam method)": [[111, "sympy.physics.continuum_mechanics.beam.Beam.draw"]], "elastic_modulus (sympy.physics.continuum_mechanics.beam.beam property)": [[111, "sympy.physics.continuum_mechanics.beam.Beam.elastic_modulus"]], "ild_moment (sympy.physics.continuum_mechanics.beam.beam property)": [[111, "sympy.physics.continuum_mechanics.beam.Beam.ild_moment"]], "ild_reactions (sympy.physics.continuum_mechanics.beam.beam property)": [[111, "sympy.physics.continuum_mechanics.beam.Beam.ild_reactions"]], "ild_shear (sympy.physics.continuum_mechanics.beam.beam property)": [[111, "sympy.physics.continuum_mechanics.beam.Beam.ild_shear"]], "join() (sympy.physics.continuum_mechanics.beam.beam method)": [[111, "sympy.physics.continuum_mechanics.beam.Beam.join"]], "length (sympy.physics.continuum_mechanics.beam.beam property)": [[111, "sympy.physics.continuum_mechanics.beam.Beam.length"]], "load (sympy.physics.continuum_mechanics.beam.beam property)": [[111, "sympy.physics.continuum_mechanics.beam.Beam.load"]], "load_vector (sympy.physics.continuum_mechanics.beam.beam3d property)": [[111, "sympy.physics.continuum_mechanics.beam.Beam3D.load_vector"]], "max_bending_moment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[111, "sympy.physics.continuum_mechanics.beam.Beam3D.max_bending_moment"]], "max_bmoment() (sympy.physics.continuum_mechanics.beam.beam method)": [[111, "sympy.physics.continuum_mechanics.beam.Beam.max_bmoment"]], "max_bmoment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[111, "sympy.physics.continuum_mechanics.beam.Beam3D.max_bmoment"]], "max_deflection() (sympy.physics.continuum_mechanics.beam.beam method)": [[111, "sympy.physics.continuum_mechanics.beam.Beam.max_deflection"]], "max_deflection() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[111, "sympy.physics.continuum_mechanics.beam.Beam3D.max_deflection"]], "max_shear_force() (sympy.physics.continuum_mechanics.beam.beam method)": [[111, "sympy.physics.continuum_mechanics.beam.Beam.max_shear_force"]], "max_shear_force() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[111, "sympy.physics.continuum_mechanics.beam.Beam3D.max_shear_force"]], "moment_load_vector (sympy.physics.continuum_mechanics.beam.beam3d property)": [[111, "sympy.physics.continuum_mechanics.beam.Beam3D.moment_load_vector"]], "plot_bending_moment() (sympy.physics.continuum_mechanics.beam.beam method)": [[111, "sympy.physics.continuum_mechanics.beam.Beam.plot_bending_moment"]], "plot_bending_moment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[111, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_bending_moment"]], "plot_deflection() (sympy.physics.continuum_mechanics.beam.beam method)": [[111, "sympy.physics.continuum_mechanics.beam.Beam.plot_deflection"]], "plot_deflection() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[111, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_deflection"]], "plot_ild_moment() (sympy.physics.continuum_mechanics.beam.beam method)": [[111, "sympy.physics.continuum_mechanics.beam.Beam.plot_ild_moment"]], "plot_ild_reactions() (sympy.physics.continuum_mechanics.beam.beam method)": [[111, "sympy.physics.continuum_mechanics.beam.Beam.plot_ild_reactions"]], "plot_ild_shear() (sympy.physics.continuum_mechanics.beam.beam method)": [[111, "sympy.physics.continuum_mechanics.beam.Beam.plot_ild_shear"]], "plot_loading_results() (sympy.physics.continuum_mechanics.beam.beam method)": [[111, "sympy.physics.continuum_mechanics.beam.Beam.plot_loading_results"]], "plot_loading_results() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[111, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_loading_results"]], "plot_shear_force() (sympy.physics.continuum_mechanics.beam.beam method)": [[111, "sympy.physics.continuum_mechanics.beam.Beam.plot_shear_force"]], "plot_shear_force() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[111, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_shear_force"]], "plot_shear_stress() (sympy.physics.continuum_mechanics.beam.beam method)": [[111, "sympy.physics.continuum_mechanics.beam.Beam.plot_shear_stress"]], "plot_shear_stress() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[111, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_shear_stress"]], "plot_slope() (sympy.physics.continuum_mechanics.beam.beam method)": [[111, "sympy.physics.continuum_mechanics.beam.Beam.plot_slope"]], "plot_slope() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[111, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_slope"]], "point_cflexure() (sympy.physics.continuum_mechanics.beam.beam method)": [[111, "sympy.physics.continuum_mechanics.beam.Beam.point_cflexure"]], "polar_moment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[111, "sympy.physics.continuum_mechanics.beam.Beam3D.polar_moment"]], "reaction_loads (sympy.physics.continuum_mechanics.beam.beam property)": [[111, "sympy.physics.continuum_mechanics.beam.Beam.reaction_loads"]], "remove_load() (sympy.physics.continuum_mechanics.beam.beam method)": [[111, "sympy.physics.continuum_mechanics.beam.Beam.remove_load"]], "second_moment (sympy.physics.continuum_mechanics.beam.beam property)": [[111, "sympy.physics.continuum_mechanics.beam.Beam.second_moment"]], "second_moment (sympy.physics.continuum_mechanics.beam.beam3d property)": [[111, "sympy.physics.continuum_mechanics.beam.Beam3D.second_moment"]], "shear_force() (sympy.physics.continuum_mechanics.beam.beam method)": [[111, "sympy.physics.continuum_mechanics.beam.Beam.shear_force"]], "shear_force() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[111, "sympy.physics.continuum_mechanics.beam.Beam3D.shear_force"]], "shear_modulus (sympy.physics.continuum_mechanics.beam.beam3d property)": [[111, "sympy.physics.continuum_mechanics.beam.Beam3D.shear_modulus"]], "shear_stress() (sympy.physics.continuum_mechanics.beam.beam method)": [[111, "sympy.physics.continuum_mechanics.beam.Beam.shear_stress"]], "shear_stress() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[111, "sympy.physics.continuum_mechanics.beam.Beam3D.shear_stress"]], "slope() (sympy.physics.continuum_mechanics.beam.beam method)": [[111, "sympy.physics.continuum_mechanics.beam.Beam.slope"]], "slope() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[111, "sympy.physics.continuum_mechanics.beam.Beam3D.slope"]], "solve_for_ild_moment() (sympy.physics.continuum_mechanics.beam.beam method)": [[111, "sympy.physics.continuum_mechanics.beam.Beam.solve_for_ild_moment"]], "solve_for_ild_reactions() (sympy.physics.continuum_mechanics.beam.beam method)": [[111, "sympy.physics.continuum_mechanics.beam.Beam.solve_for_ild_reactions"]], "solve_for_ild_shear() (sympy.physics.continuum_mechanics.beam.beam method)": [[111, "sympy.physics.continuum_mechanics.beam.Beam.solve_for_ild_shear"]], "solve_for_reaction_loads() (sympy.physics.continuum_mechanics.beam.beam method)": [[111, "sympy.physics.continuum_mechanics.beam.Beam.solve_for_reaction_loads"]], "solve_for_reaction_loads() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[111, "sympy.physics.continuum_mechanics.beam.Beam3D.solve_for_reaction_loads"]], "solve_for_torsion() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[111, "sympy.physics.continuum_mechanics.beam.Beam3D.solve_for_torsion"]], "sympy.physics.continuum_mechanics.beam": [[111, "module-sympy.physics.continuum_mechanics.beam"]], "torsional_moment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[111, "sympy.physics.continuum_mechanics.beam.Beam3D.torsional_moment"]], "variable (sympy.physics.continuum_mechanics.beam.beam property)": [[111, "sympy.physics.continuum_mechanics.beam.Beam.variable"]], "cable (class in sympy.physics.continuum_mechanics.cable)": [[113, "sympy.physics.continuum_mechanics.cable.Cable"]], "apply_length() (sympy.physics.continuum_mechanics.cable.cable method)": [[113, "sympy.physics.continuum_mechanics.cable.Cable.apply_length"]], "apply_load() (sympy.physics.continuum_mechanics.cable.cable method)": [[113, "sympy.physics.continuum_mechanics.cable.Cable.apply_load"]], "change_support() (sympy.physics.continuum_mechanics.cable.cable method)": [[113, "sympy.physics.continuum_mechanics.cable.Cable.change_support"]], "left_support (sympy.physics.continuum_mechanics.cable.cable property)": [[113, "sympy.physics.continuum_mechanics.cable.Cable.left_support"]], "length (sympy.physics.continuum_mechanics.cable.cable property)": [[113, "sympy.physics.continuum_mechanics.cable.Cable.length"]], "loads (sympy.physics.continuum_mechanics.cable.cable property)": [[113, "sympy.physics.continuum_mechanics.cable.Cable.loads"]], "loads_position (sympy.physics.continuum_mechanics.cable.cable property)": [[113, "sympy.physics.continuum_mechanics.cable.Cable.loads_position"]], "reaction_loads (sympy.physics.continuum_mechanics.cable.cable property)": [[113, "sympy.physics.continuum_mechanics.cable.Cable.reaction_loads"]], "remove_loads() (sympy.physics.continuum_mechanics.cable.cable method)": [[113, "sympy.physics.continuum_mechanics.cable.Cable.remove_loads"]], "right_support (sympy.physics.continuum_mechanics.cable.cable property)": [[113, "sympy.physics.continuum_mechanics.cable.Cable.right_support"]], "supports (sympy.physics.continuum_mechanics.cable.cable property)": [[113, "sympy.physics.continuum_mechanics.cable.Cable.supports"]], "sympy.physics.continuum_mechanics.cable": [[113, "module-sympy.physics.continuum_mechanics.cable"]], "truss (class in sympy.physics.continuum_mechanics.truss)": [[115, "sympy.physics.continuum_mechanics.truss.Truss"]], "add_member() (sympy.physics.continuum_mechanics.truss.truss method)": [[115, "sympy.physics.continuum_mechanics.truss.Truss.add_member"]], "add_node() (sympy.physics.continuum_mechanics.truss.truss method)": [[115, "sympy.physics.continuum_mechanics.truss.Truss.add_node"]], "apply_load() (sympy.physics.continuum_mechanics.truss.truss method)": [[115, "sympy.physics.continuum_mechanics.truss.Truss.apply_load"]], "apply_support() (sympy.physics.continuum_mechanics.truss.truss method)": [[115, "sympy.physics.continuum_mechanics.truss.Truss.apply_support"]], "change_member_label() (sympy.physics.continuum_mechanics.truss.truss method)": [[115, "sympy.physics.continuum_mechanics.truss.Truss.change_member_label"]], "change_node_label() (sympy.physics.continuum_mechanics.truss.truss method)": [[115, "sympy.physics.continuum_mechanics.truss.Truss.change_node_label"]], "draw() (sympy.physics.continuum_mechanics.truss.truss method)": [[115, "sympy.physics.continuum_mechanics.truss.Truss.draw"]], "internal_forces (sympy.physics.continuum_mechanics.truss.truss property)": [[115, "sympy.physics.continuum_mechanics.truss.Truss.internal_forces"]], "loads (sympy.physics.continuum_mechanics.truss.truss property)": [[115, "sympy.physics.continuum_mechanics.truss.Truss.loads"]], "member_lengths (sympy.physics.continuum_mechanics.truss.truss property)": [[115, "sympy.physics.continuum_mechanics.truss.Truss.member_lengths"]], "members (sympy.physics.continuum_mechanics.truss.truss property)": [[115, "sympy.physics.continuum_mechanics.truss.Truss.members"]], "node_labels (sympy.physics.continuum_mechanics.truss.truss property)": [[115, "sympy.physics.continuum_mechanics.truss.Truss.node_labels"]], "node_positions (sympy.physics.continuum_mechanics.truss.truss property)": [[115, "sympy.physics.continuum_mechanics.truss.Truss.node_positions"]], "nodes (sympy.physics.continuum_mechanics.truss.truss property)": [[115, "sympy.physics.continuum_mechanics.truss.Truss.nodes"]], "reaction_loads (sympy.physics.continuum_mechanics.truss.truss property)": [[115, "sympy.physics.continuum_mechanics.truss.Truss.reaction_loads"]], "remove_load() (sympy.physics.continuum_mechanics.truss.truss method)": [[115, "sympy.physics.continuum_mechanics.truss.Truss.remove_load"]], "remove_member() (sympy.physics.continuum_mechanics.truss.truss method)": [[115, "sympy.physics.continuum_mechanics.truss.Truss.remove_member"]], "remove_node() (sympy.physics.continuum_mechanics.truss.truss method)": [[115, "sympy.physics.continuum_mechanics.truss.Truss.remove_node"]], "remove_support() (sympy.physics.continuum_mechanics.truss.truss method)": [[115, "sympy.physics.continuum_mechanics.truss.Truss.remove_support"]], "solve() (sympy.physics.continuum_mechanics.truss.truss method)": [[115, "sympy.physics.continuum_mechanics.truss.Truss.solve"]], "supports (sympy.physics.continuum_mechanics.truss.truss property)": [[115, "sympy.physics.continuum_mechanics.truss.Truss.supports"]], "sympy.physics.continuum_mechanics.truss": [[115, "module-sympy.physics.continuum_mechanics.truss"]], "bode_magnitude_numerical_data() (sympy.physics.control.control_plots method)": [[117, "sympy.physics.control.control_plots.bode_magnitude_numerical_data"]], "bode_magnitude_plot() (sympy.physics.control.control_plots method)": [[117, "sympy.physics.control.control_plots.bode_magnitude_plot"]], "bode_phase_numerical_data() (sympy.physics.control.control_plots method)": [[117, "sympy.physics.control.control_plots.bode_phase_numerical_data"]], "bode_phase_plot() (sympy.physics.control.control_plots method)": [[117, "sympy.physics.control.control_plots.bode_phase_plot"]], "bode_plot() (sympy.physics.control.control_plots method)": [[117, "sympy.physics.control.control_plots.bode_plot"]], "impulse_response_numerical_data() (sympy.physics.control.control_plots method)": [[117, "sympy.physics.control.control_plots.impulse_response_numerical_data"]], "impulse_response_plot() (sympy.physics.control.control_plots method)": [[117, "sympy.physics.control.control_plots.impulse_response_plot"]], "pole_zero_numerical_data() (sympy.physics.control.control_plots method)": [[117, "sympy.physics.control.control_plots.pole_zero_numerical_data"]], "pole_zero_plot() (sympy.physics.control.control_plots method)": [[117, "sympy.physics.control.control_plots.pole_zero_plot"]], "ramp_response_numerical_data() (sympy.physics.control.control_plots method)": [[117, "sympy.physics.control.control_plots.ramp_response_numerical_data"]], "ramp_response_plot() (sympy.physics.control.control_plots method)": [[117, "sympy.physics.control.control_plots.ramp_response_plot"]], "step_response_numerical_data() (sympy.physics.control.control_plots method)": [[117, "sympy.physics.control.control_plots.step_response_numerical_data"]], "step_response_plot() (sympy.physics.control.control_plots method)": [[117, "sympy.physics.control.control_plots.step_response_plot"]], "sympy.physics.control": [[118, "module-sympy.physics.control"]], "feedback (class in sympy.physics.control.lti)": [[119, "sympy.physics.control.lti.Feedback"]], "mimofeedback (class in sympy.physics.control.lti)": [[119, "sympy.physics.control.lti.MIMOFeedback"]], "mimoparallel (class in sympy.physics.control.lti)": [[119, "sympy.physics.control.lti.MIMOParallel"]], "mimoseries (class in sympy.physics.control.lti)": [[119, "sympy.physics.control.lti.MIMOSeries"]], "parallel (class in sympy.physics.control.lti)": [[119, "sympy.physics.control.lti.Parallel"]], "series (class in sympy.physics.control.lti)": [[119, "sympy.physics.control.lti.Series"]], "transferfunction (class in sympy.physics.control.lti)": [[119, "sympy.physics.control.lti.TransferFunction"]], "transferfunctionmatrix (class in sympy.physics.control.lti)": [[119, "sympy.physics.control.lti.TransferFunctionMatrix"]], "backward_diff() (in module sympy.physics.control.lti)": [[119, "sympy.physics.control.lti.backward_diff"]], "bilinear() (in module sympy.physics.control.lti)": [[119, "sympy.physics.control.lti.bilinear"]], "dc_gain() (sympy.physics.control.lti.transferfunction method)": [[119, "sympy.physics.control.lti.TransferFunction.dc_gain"]], "den (sympy.physics.control.lti.transferfunction property)": [[119, "sympy.physics.control.lti.TransferFunction.den"]], "doit() (sympy.physics.control.lti.feedback method)": [[119, "sympy.physics.control.lti.Feedback.doit"]], "doit() (sympy.physics.control.lti.mimofeedback method)": [[119, "sympy.physics.control.lti.MIMOFeedback.doit"]], "doit() (sympy.physics.control.lti.mimoparallel method)": [[119, "sympy.physics.control.lti.MIMOParallel.doit"]], "doit() (sympy.physics.control.lti.mimoseries method)": [[119, "sympy.physics.control.lti.MIMOSeries.doit"]], "doit() (sympy.physics.control.lti.parallel method)": [[119, "sympy.physics.control.lti.Parallel.doit"]], "doit() (sympy.physics.control.lti.series method)": [[119, "sympy.physics.control.lti.Series.doit"]], "elem_poles() (sympy.physics.control.lti.transferfunctionmatrix method)": [[119, "sympy.physics.control.lti.TransferFunctionMatrix.elem_poles"]], "elem_zeros() (sympy.physics.control.lti.transferfunctionmatrix method)": [[119, "sympy.physics.control.lti.TransferFunctionMatrix.elem_zeros"]], "expand() (sympy.physics.control.lti.transferfunction method)": [[119, "sympy.physics.control.lti.TransferFunction.expand"]], "expand() (sympy.physics.control.lti.transferfunctionmatrix method)": [[119, "sympy.physics.control.lti.TransferFunctionMatrix.expand"]], "forward_diff() (in module sympy.physics.control.lti)": [[119, "sympy.physics.control.lti.forward_diff"]], "from_matrix() (sympy.physics.control.lti.transferfunctionmatrix class method)": [[119, "sympy.physics.control.lti.TransferFunctionMatrix.from_Matrix"]], "from_coeff_lists() (sympy.physics.control.lti.transferfunction class method)": [[119, "sympy.physics.control.lti.TransferFunction.from_coeff_lists"]], "from_rational_expression() (sympy.physics.control.lti.transferfunction class method)": [[119, "sympy.physics.control.lti.TransferFunction.from_rational_expression"]], "from_zpk() (sympy.physics.control.lti.transferfunction class method)": [[119, "sympy.physics.control.lti.TransferFunction.from_zpk"]], "gbt() (in module sympy.physics.control.lti)": [[119, "sympy.physics.control.lti.gbt"]], "is_biproper (sympy.physics.control.lti.parallel property)": [[119, "sympy.physics.control.lti.Parallel.is_biproper"]], "is_biproper (sympy.physics.control.lti.series property)": [[119, "sympy.physics.control.lti.Series.is_biproper"]], "is_biproper (sympy.physics.control.lti.transferfunction property)": [[119, "sympy.physics.control.lti.TransferFunction.is_biproper"]], "is_proper (sympy.physics.control.lti.parallel property)": [[119, "sympy.physics.control.lti.Parallel.is_proper"]], "is_proper (sympy.physics.control.lti.series property)": [[119, "sympy.physics.control.lti.Series.is_proper"]], "is_proper (sympy.physics.control.lti.transferfunction property)": [[119, "sympy.physics.control.lti.TransferFunction.is_proper"]], "is_stable() (sympy.physics.control.lti.transferfunction method)": [[119, "sympy.physics.control.lti.TransferFunction.is_stable"]], "is_strictly_proper (sympy.physics.control.lti.parallel property)": [[119, "sympy.physics.control.lti.Parallel.is_strictly_proper"]], "is_strictly_proper (sympy.physics.control.lti.series property)": [[119, "sympy.physics.control.lti.Series.is_strictly_proper"]], "is_strictly_proper (sympy.physics.control.lti.transferfunction property)": [[119, "sympy.physics.control.lti.TransferFunction.is_strictly_proper"]], "num (sympy.physics.control.lti.transferfunction property)": [[119, "sympy.physics.control.lti.TransferFunction.num"]], "num_inputs (sympy.physics.control.lti.mimoparallel property)": [[119, "sympy.physics.control.lti.MIMOParallel.num_inputs"]], "num_inputs (sympy.physics.control.lti.mimoseries property)": [[119, "sympy.physics.control.lti.MIMOSeries.num_inputs"]], "num_inputs (sympy.physics.control.lti.transferfunctionmatrix property)": [[119, "sympy.physics.control.lti.TransferFunctionMatrix.num_inputs"]], "num_outputs (sympy.physics.control.lti.mimoparallel property)": [[119, "sympy.physics.control.lti.MIMOParallel.num_outputs"]], "num_outputs (sympy.physics.control.lti.mimoseries property)": [[119, "sympy.physics.control.lti.MIMOSeries.num_outputs"]], "num_outputs (sympy.physics.control.lti.transferfunctionmatrix property)": [[119, "sympy.physics.control.lti.TransferFunctionMatrix.num_outputs"]], "poles() (sympy.physics.control.lti.transferfunction method)": [[119, "sympy.physics.control.lti.TransferFunction.poles"]], "sensitivity (sympy.physics.control.lti.feedback property)": [[119, "sympy.physics.control.lti.Feedback.sensitivity"]], "sensitivity (sympy.physics.control.lti.mimofeedback property)": [[119, "sympy.physics.control.lti.MIMOFeedback.sensitivity"]], "shape (sympy.physics.control.lti.mimoparallel property)": [[119, "sympy.physics.control.lti.MIMOParallel.shape"]], "shape (sympy.physics.control.lti.mimoseries property)": [[119, "sympy.physics.control.lti.MIMOSeries.shape"]], "shape (sympy.physics.control.lti.transferfunctionmatrix property)": [[119, "sympy.physics.control.lti.TransferFunctionMatrix.shape"]], "sign (sympy.physics.control.lti.feedback property)": [[119, "sympy.physics.control.lti.Feedback.sign"]], "sign (sympy.physics.control.lti.mimofeedback property)": [[119, "sympy.physics.control.lti.MIMOFeedback.sign"]], "sympy.physics.control.lti": [[119, "module-sympy.physics.control.lti"]], "sys1 (sympy.physics.control.lti.feedback property)": [[119, "sympy.physics.control.lti.Feedback.sys1"]], "sys1 (sympy.physics.control.lti.mimofeedback property)": [[119, "sympy.physics.control.lti.MIMOFeedback.sys1"]], "sys2 (sympy.physics.control.lti.feedback property)": [[119, "sympy.physics.control.lti.Feedback.sys2"]], "sys2 (sympy.physics.control.lti.mimofeedback property)": [[119, "sympy.physics.control.lti.MIMOFeedback.sys2"]], "to_expr() (sympy.physics.control.lti.parallel method)": [[119, "sympy.physics.control.lti.Parallel.to_expr"]], "to_expr() (sympy.physics.control.lti.series method)": [[119, "sympy.physics.control.lti.Series.to_expr"]], "to_expr() (sympy.physics.control.lti.transferfunction method)": [[119, "sympy.physics.control.lti.TransferFunction.to_expr"]], "transpose() (sympy.physics.control.lti.transferfunctionmatrix method)": [[119, "sympy.physics.control.lti.TransferFunctionMatrix.transpose"]], "var (sympy.physics.control.lti.feedback property)": [[119, "sympy.physics.control.lti.Feedback.var"]], "var (sympy.physics.control.lti.mimofeedback property)": [[119, "sympy.physics.control.lti.MIMOFeedback.var"]], "var (sympy.physics.control.lti.mimoparallel property)": [[119, "sympy.physics.control.lti.MIMOParallel.var"]], "var (sympy.physics.control.lti.mimoseries property)": [[119, "sympy.physics.control.lti.MIMOSeries.var"]], "var (sympy.physics.control.lti.parallel property)": [[119, "sympy.physics.control.lti.Parallel.var"]], "var (sympy.physics.control.lti.series property)": [[119, "sympy.physics.control.lti.Series.var"]], "var (sympy.physics.control.lti.transferfunction property)": [[119, "sympy.physics.control.lti.TransferFunction.var"]], "var (sympy.physics.control.lti.transferfunctionmatrix property)": [[119, "sympy.physics.control.lti.TransferFunctionMatrix.var"]], "zeros() (sympy.physics.control.lti.transferfunction method)": [[119, "sympy.physics.control.lti.TransferFunction.zeros"]], "extract_type_tens() (in module sympy.physics.hep.gamma_matrices)": [[120, "sympy.physics.hep.gamma_matrices.extract_type_tens"]], "gamma_trace() (in module sympy.physics.hep.gamma_matrices)": [[120, "sympy.physics.hep.gamma_matrices.gamma_trace"]], "kahane_simplify() (in module sympy.physics.hep.gamma_matrices)": [[120, "sympy.physics.hep.gamma_matrices.kahane_simplify"]], "simplify_gpgp() (in module sympy.physics.hep.gamma_matrices)": [[120, "sympy.physics.hep.gamma_matrices.simplify_gpgp"]], "sympy.physics.hep.gamma_matrices": [[120, "module-sympy.physics.hep.gamma_matrices"]], "e_nl() (in module sympy.physics.hydrogen)": [[121, "sympy.physics.hydrogen.E_nl"]], "e_nl_dirac() (in module sympy.physics.hydrogen)": [[121, "sympy.physics.hydrogen.E_nl_dirac"]], "psi_nlm() (in module sympy.physics.hydrogen)": [[121, "sympy.physics.hydrogen.Psi_nlm"]], "r_nl() (in module sympy.physics.hydrogen)": [[121, "sympy.physics.hydrogen.R_nl"]], "sympy.physics.hydrogen": [[121, "module-sympy.physics.hydrogen"]], "mdft() (in module sympy.physics.matrices)": [[122, "sympy.physics.matrices.mdft"]], "mgamma() (in module sympy.physics.matrices)": [[122, "sympy.physics.matrices.mgamma"]], "msigma() (in module sympy.physics.matrices)": [[122, "sympy.physics.matrices.msigma"]], "pat_matrix() (in module sympy.physics.matrices)": [[122, "sympy.physics.matrices.pat_matrix"]], "sympy.physics.matrices": [[122, "module-sympy.physics.matrices"]], "body (class in sympy.physics.mechanics.body)": [[124, "sympy.physics.mechanics.body.Body"]], "ang_vel_in() (sympy.physics.mechanics.body.body method)": [[124, "sympy.physics.mechanics.body.Body.ang_vel_in"]], "apply_force() (sympy.physics.mechanics.body.body method)": [[124, "sympy.physics.mechanics.body.Body.apply_force"]], "apply_torque() (sympy.physics.mechanics.body.body method)": [[124, "sympy.physics.mechanics.body.Body.apply_torque"]], "clear_loads() (sympy.physics.mechanics.body.body method)": [[124, "sympy.physics.mechanics.body.Body.clear_loads"]], "dcm() (sympy.physics.mechanics.body.body method)": [[124, "sympy.physics.mechanics.body.Body.dcm"]], "inertia (sympy.physics.mechanics.body.body property)": [[124, "sympy.physics.mechanics.body.Body.inertia"]], "kinetic_energy() (sympy.physics.mechanics.body.body method)": [[124, "sympy.physics.mechanics.body.Body.kinetic_energy"]], "masscenter_vel() (sympy.physics.mechanics.body.body method)": [[124, "sympy.physics.mechanics.body.Body.masscenter_vel"]], "parallel_axis() (sympy.physics.mechanics.body.body method)": [[124, "sympy.physics.mechanics.body.Body.parallel_axis"]], "remove_load() (sympy.physics.mechanics.body.body method)": [[124, "sympy.physics.mechanics.body.Body.remove_load"]], "sympy.physics.mechanics.body": [[124, "module-sympy.physics.mechanics.body"]], "x (sympy.physics.mechanics.body.body property)": [[124, "sympy.physics.mechanics.body.Body.x"]], "y (sympy.physics.mechanics.body.body property)": [[124, "sympy.physics.mechanics.body.Body.y"]], "z (sympy.physics.mechanics.body.body property)": [[124, "sympy.physics.mechanics.body.Body.z"]], "find_dynamicsymbols() (in module sympy.physics.mechanics)": [[125, "sympy.physics.mechanics.find_dynamicsymbols"]], "msubs() (in module sympy.physics.mechanics)": [[125, "sympy.physics.mechanics.msubs"]], "cylindricaljoint (class in sympy.physics.mechanics.joint)": [[127, "sympy.physics.mechanics.joint.CylindricalJoint"]], "joint (class in sympy.physics.mechanics.joint)": [[127, "sympy.physics.mechanics.joint.Joint"]], "jointsmethod (class in sympy.physics.mechanics.jointsmethod)": [[127, "sympy.physics.mechanics.jointsmethod.JointsMethod"]], "pinjoint (class in sympy.physics.mechanics.joint)": [[127, "sympy.physics.mechanics.joint.PinJoint"]], "planarjoint (class in sympy.physics.mechanics.joint)": [[127, "sympy.physics.mechanics.joint.PlanarJoint"]], "prismaticjoint (class in sympy.physics.mechanics.joint)": [[127, "sympy.physics.mechanics.joint.PrismaticJoint"]], "sphericaljoint (class in sympy.physics.mechanics.joint)": [[127, "sympy.physics.mechanics.joint.SphericalJoint"]], "weldjoint (class in sympy.physics.mechanics.joint)": [[127, "sympy.physics.mechanics.joint.WeldJoint"]], "bodies (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[127, "sympy.physics.mechanics.jointsmethod.JointsMethod.bodies"]], "child (sympy.physics.mechanics.joint.joint property)": [[127, "sympy.physics.mechanics.joint.Joint.child"]], "child_axis (sympy.physics.mechanics.joint.joint property)": [[127, "sympy.physics.mechanics.joint.Joint.child_axis"]], "child_point (sympy.physics.mechanics.joint.joint property)": [[127, "sympy.physics.mechanics.joint.Joint.child_point"]], "coordinates (sympy.physics.mechanics.joint.joint property)": [[127, "sympy.physics.mechanics.joint.Joint.coordinates"]], "forcing (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[127, "sympy.physics.mechanics.jointsmethod.JointsMethod.forcing"]], "forcing_full (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[127, "sympy.physics.mechanics.jointsmethod.JointsMethod.forcing_full"]], "form_eoms() (sympy.physics.mechanics.jointsmethod.jointsmethod method)": [[127, "sympy.physics.mechanics.jointsmethod.JointsMethod.form_eoms"]], "joint_axis (sympy.physics.mechanics.joint.cylindricaljoint property)": [[127, "sympy.physics.mechanics.joint.CylindricalJoint.joint_axis"]], "joint_axis (sympy.physics.mechanics.joint.pinjoint property)": [[127, "sympy.physics.mechanics.joint.PinJoint.joint_axis"]], "joint_axis (sympy.physics.mechanics.joint.prismaticjoint property)": [[127, "sympy.physics.mechanics.joint.PrismaticJoint.joint_axis"]], "kdes (sympy.physics.mechanics.joint.joint property)": [[127, "sympy.physics.mechanics.joint.Joint.kdes"]], "kdes (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[127, "sympy.physics.mechanics.jointsmethod.JointsMethod.kdes"]], "loads (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[127, "sympy.physics.mechanics.jointsmethod.JointsMethod.loads"]], "mass_matrix (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[127, "sympy.physics.mechanics.jointsmethod.JointsMethod.mass_matrix"]], "mass_matrix_full (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[127, "sympy.physics.mechanics.jointsmethod.JointsMethod.mass_matrix_full"]], "method (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[127, "sympy.physics.mechanics.jointsmethod.JointsMethod.method"]], "name (sympy.physics.mechanics.joint.joint property)": [[127, "sympy.physics.mechanics.joint.Joint.name"]], "parent (sympy.physics.mechanics.joint.joint property)": [[127, "sympy.physics.mechanics.joint.Joint.parent"]], "parent_axis (sympy.physics.mechanics.joint.joint property)": [[127, "sympy.physics.mechanics.joint.Joint.parent_axis"]], "parent_point (sympy.physics.mechanics.joint.joint property)": [[127, "sympy.physics.mechanics.joint.Joint.parent_point"]], "planar_coordinates (sympy.physics.mechanics.joint.planarjoint property)": [[127, "sympy.physics.mechanics.joint.PlanarJoint.planar_coordinates"]], "planar_speeds (sympy.physics.mechanics.joint.planarjoint property)": [[127, "sympy.physics.mechanics.joint.PlanarJoint.planar_speeds"]], "planar_vectors (sympy.physics.mechanics.joint.planarjoint property)": [[127, "sympy.physics.mechanics.joint.PlanarJoint.planar_vectors"]], "q (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[127, "sympy.physics.mechanics.jointsmethod.JointsMethod.q"]], "rhs() (sympy.physics.mechanics.jointsmethod.jointsmethod method)": [[127, "sympy.physics.mechanics.jointsmethod.JointsMethod.rhs"]], "rotation_axis (sympy.physics.mechanics.joint.planarjoint property)": [[127, "sympy.physics.mechanics.joint.PlanarJoint.rotation_axis"]], "rotation_coordinate (sympy.physics.mechanics.joint.cylindricaljoint property)": [[127, "sympy.physics.mechanics.joint.CylindricalJoint.rotation_coordinate"]], "rotation_coordinate (sympy.physics.mechanics.joint.planarjoint property)": [[127, "sympy.physics.mechanics.joint.PlanarJoint.rotation_coordinate"]], "rotation_speed (sympy.physics.mechanics.joint.cylindricaljoint property)": [[127, "sympy.physics.mechanics.joint.CylindricalJoint.rotation_speed"]], "rotation_speed (sympy.physics.mechanics.joint.planarjoint property)": [[127, "sympy.physics.mechanics.joint.PlanarJoint.rotation_speed"]], "speeds (sympy.physics.mechanics.joint.joint property)": [[127, "sympy.physics.mechanics.joint.Joint.speeds"]], "sympy.physics.mechanics.joint": [[127, "module-sympy.physics.mechanics.joint"]], "sympy.physics.mechanics.jointsmethod": [[127, "module-sympy.physics.mechanics.jointsmethod"]], "translation_coordinate (sympy.physics.mechanics.joint.cylindricaljoint property)": [[127, "sympy.physics.mechanics.joint.CylindricalJoint.translation_coordinate"]], "translation_speed (sympy.physics.mechanics.joint.cylindricaljoint property)": [[127, "sympy.physics.mechanics.joint.CylindricalJoint.translation_speed"]], "u (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[127, "sympy.physics.mechanics.jointsmethod.JointsMethod.u"]], "kanesmethod (class in sympy.physics.mechanics.kane)": [[128, "sympy.physics.mechanics.kane.KanesMethod"]], "lagrangesmethod (class in sympy.physics.mechanics.lagrange)": [[128, "sympy.physics.mechanics.lagrange.LagrangesMethod"]], "auxiliary_eqs (sympy.physics.mechanics.kane.kanesmethod property)": [[128, "sympy.physics.mechanics.kane.KanesMethod.auxiliary_eqs"]], "forcing (sympy.physics.mechanics.kane.kanesmethod property)": [[128, "sympy.physics.mechanics.kane.KanesMethod.forcing"]], "forcing (sympy.physics.mechanics.lagrange.lagrangesmethod property)": [[128, "sympy.physics.mechanics.lagrange.LagrangesMethod.forcing"]], "forcing_full (sympy.physics.mechanics.kane.kanesmethod property)": [[128, "sympy.physics.mechanics.kane.KanesMethod.forcing_full"]], "forcing_full (sympy.physics.mechanics.lagrange.lagrangesmethod property)": [[128, "sympy.physics.mechanics.lagrange.LagrangesMethod.forcing_full"]], "forcing_kin (sympy.physics.mechanics.kane.kanesmethod property)": [[128, "sympy.physics.mechanics.kane.KanesMethod.forcing_kin"]], "form_lagranges_equations() (sympy.physics.mechanics.lagrange.lagrangesmethod method)": [[128, "sympy.physics.mechanics.lagrange.LagrangesMethod.form_lagranges_equations"]], "kanes_equations() (sympy.physics.mechanics.kane.kanesmethod method)": [[128, "sympy.physics.mechanics.kane.KanesMethod.kanes_equations"]], "kindiffdict() (sympy.physics.mechanics.kane.kanesmethod method)": [[128, "sympy.physics.mechanics.kane.KanesMethod.kindiffdict"]], "linearize() (sympy.physics.mechanics.kane.kanesmethod method)": [[128, "sympy.physics.mechanics.kane.KanesMethod.linearize"]], "linearize() (sympy.physics.mechanics.lagrange.lagrangesmethod method)": [[128, "sympy.physics.mechanics.lagrange.LagrangesMethod.linearize"]], "mass_matrix (sympy.physics.mechanics.kane.kanesmethod property)": [[128, "sympy.physics.mechanics.kane.KanesMethod.mass_matrix"]], "mass_matrix (sympy.physics.mechanics.lagrange.lagrangesmethod property)": [[128, "sympy.physics.mechanics.lagrange.LagrangesMethod.mass_matrix"]], "mass_matrix_full (sympy.physics.mechanics.kane.kanesmethod property)": [[128, "sympy.physics.mechanics.kane.KanesMethod.mass_matrix_full"]], "mass_matrix_full (sympy.physics.mechanics.lagrange.lagrangesmethod property)": [[128, "sympy.physics.mechanics.lagrange.LagrangesMethod.mass_matrix_full"]], "mass_matrix_kin (sympy.physics.mechanics.kane.kanesmethod property)": [[128, "sympy.physics.mechanics.kane.KanesMethod.mass_matrix_kin"]], "rhs() (sympy.physics.mechanics.kane.kanesmethod method)": [[128, "sympy.physics.mechanics.kane.KanesMethod.rhs"]], "rhs() (sympy.physics.mechanics.lagrange.lagrangesmethod method)": [[128, "sympy.physics.mechanics.lagrange.LagrangesMethod.rhs"]], "solve_multipliers() (sympy.physics.mechanics.lagrange.lagrangesmethod method)": [[128, "sympy.physics.mechanics.lagrange.LagrangesMethod.solve_multipliers"]], "sympy.physics.mechanics.kane": [[128, "module-sympy.physics.mechanics.kane"]], "sympy.physics.mechanics.lagrange": [[128, "module-sympy.physics.mechanics.lagrange"]], "to_linearizer() (sympy.physics.mechanics.kane.kanesmethod method)": [[128, "sympy.physics.mechanics.kane.KanesMethod.to_linearizer"]], "to_linearizer() (sympy.physics.mechanics.lagrange.lagrangesmethod method)": [[128, "sympy.physics.mechanics.lagrange.LagrangesMethod.to_linearizer"]], "linearizer (class in sympy.physics.mechanics.linearize)": [[129, "sympy.physics.mechanics.linearize.Linearizer"]], "__init__() (sympy.physics.mechanics.linearize.linearizer method)": [[129, "sympy.physics.mechanics.linearize.Linearizer.__init__"]], "linearize() (sympy.physics.mechanics.linearize.linearizer method)": [[129, "sympy.physics.mechanics.linearize.Linearizer.linearize"]], "sympy.physics.mechanics.linearize": [[129, "module-sympy.physics.mechanics.linearize"]], "force (class in sympy.physics.mechanics.loads)": [[130, "sympy.physics.mechanics.loads.Force"]], "inertia (class in sympy.physics.mechanics.inertia)": [[130, "sympy.physics.mechanics.inertia.Inertia"]], "lagrangian() (in module sympy.physics.mechanics.functions)": [[130, "sympy.physics.mechanics.functions.Lagrangian"]], "particle (class in sympy.physics.mechanics.particle)": [[130, "sympy.physics.mechanics.particle.Particle"]], "rigidbody (class in sympy.physics.mechanics.rigidbody)": [[130, "sympy.physics.mechanics.rigidbody.RigidBody"]], "torque (class in sympy.physics.mechanics.loads)": [[130, "sympy.physics.mechanics.loads.Torque"]], "angular_momentum() (in module sympy.physics.mechanics.functions)": [[130, "sympy.physics.mechanics.functions.angular_momentum"]], "angular_momentum() (sympy.physics.mechanics.particle.particle method)": [[130, "sympy.physics.mechanics.particle.Particle.angular_momentum"]], "angular_momentum() (sympy.physics.mechanics.rigidbody.rigidbody method)": [[130, "sympy.physics.mechanics.rigidbody.RigidBody.angular_momentum"]], "center_of_mass() (in module sympy.physics.mechanics.functions)": [[130, "sympy.physics.mechanics.functions.center_of_mass"]], "central_inertia (sympy.physics.mechanics.rigidbody.rigidbody property)": [[130, "sympy.physics.mechanics.rigidbody.RigidBody.central_inertia"]], "find_dynamicsymbols() (in module sympy.physics.mechanics.functions)": [[130, "sympy.physics.mechanics.functions.find_dynamicsymbols"]], "frame (sympy.physics.mechanics.rigidbody.rigidbody property)": [[130, "sympy.physics.mechanics.rigidbody.RigidBody.frame"]], "from_inertia_scalars() (sympy.physics.mechanics.inertia.inertia class method)": [[130, "sympy.physics.mechanics.inertia.Inertia.from_inertia_scalars"]], "inertia (sympy.physics.mechanics.rigidbody.rigidbody property)": [[130, "sympy.physics.mechanics.rigidbody.RigidBody.inertia"]], "inertia() (in module sympy.physics.mechanics.inertia)": [[130, "sympy.physics.mechanics.inertia.inertia"]], "inertia_of_point_mass() (in module sympy.physics.mechanics.inertia)": [[130, "sympy.physics.mechanics.inertia.inertia_of_point_mass"]], "kinetic_energy() (in module sympy.physics.mechanics.functions)": [[130, "sympy.physics.mechanics.functions.kinetic_energy"]], "kinetic_energy() (sympy.physics.mechanics.particle.particle method)": [[130, "sympy.physics.mechanics.particle.Particle.kinetic_energy"]], "kinetic_energy() (sympy.physics.mechanics.rigidbody.rigidbody method)": [[130, "sympy.physics.mechanics.rigidbody.RigidBody.kinetic_energy"]], "linear_momentum() (in module sympy.physics.mechanics.functions)": [[130, "sympy.physics.mechanics.functions.linear_momentum"]], "linear_momentum() (sympy.physics.mechanics.particle.particle method)": [[130, "sympy.physics.mechanics.particle.Particle.linear_momentum"]], "linear_momentum() (sympy.physics.mechanics.rigidbody.rigidbody method)": [[130, "sympy.physics.mechanics.rigidbody.RigidBody.linear_momentum"]], "mass (sympy.physics.mechanics.particle.particle property)": [[130, "sympy.physics.mechanics.particle.Particle.mass"]], "mass (sympy.physics.mechanics.rigidbody.rigidbody property)": [[130, "sympy.physics.mechanics.rigidbody.RigidBody.mass"]], "masscenter (sympy.physics.mechanics.particle.particle property)": [[130, "sympy.physics.mechanics.particle.Particle.masscenter"]], "masscenter (sympy.physics.mechanics.rigidbody.rigidbody property)": [[130, "sympy.physics.mechanics.rigidbody.RigidBody.masscenter"]], "name (sympy.physics.mechanics.particle.particle property)": [[130, "sympy.physics.mechanics.particle.Particle.name"]], "name (sympy.physics.mechanics.rigidbody.rigidbody property)": [[130, "sympy.physics.mechanics.rigidbody.RigidBody.name"]], "parallel_axis() (sympy.physics.mechanics.particle.particle method)": [[130, "sympy.physics.mechanics.particle.Particle.parallel_axis"]], "parallel_axis() (sympy.physics.mechanics.rigidbody.rigidbody method)": [[130, "sympy.physics.mechanics.rigidbody.RigidBody.parallel_axis"]], "point (sympy.physics.mechanics.particle.particle property)": [[130, "sympy.physics.mechanics.particle.Particle.point"]], "potential_energy (sympy.physics.mechanics.particle.particle property)": [[130, "sympy.physics.mechanics.particle.Particle.potential_energy"]], "potential_energy (sympy.physics.mechanics.rigidbody.rigidbody property)": [[130, "sympy.physics.mechanics.rigidbody.RigidBody.potential_energy"]], "potential_energy() (in module sympy.physics.mechanics.functions)": [[130, "sympy.physics.mechanics.functions.potential_energy"]], "x (sympy.physics.mechanics.rigidbody.rigidbody property)": [[130, "sympy.physics.mechanics.rigidbody.RigidBody.x"]], "y (sympy.physics.mechanics.rigidbody.rigidbody property)": [[130, "sympy.physics.mechanics.rigidbody.RigidBody.y"]], "z (sympy.physics.mechanics.rigidbody.rigidbody property)": [[130, "sympy.physics.mechanics.rigidbody.RigidBody.z"]], "linearpathway (class in sympy.physics.mechanics.pathway)": [[131, "sympy.physics.mechanics.pathway.LinearPathway"]], "pathwaybase (class in sympy.physics.mechanics.pathway)": [[131, "sympy.physics.mechanics.pathway.PathwayBase"]], "wrappingpathway (class in sympy.physics.mechanics.pathway)": [[131, "sympy.physics.mechanics.pathway.WrappingPathway"]], "attachments (sympy.physics.mechanics.pathway.pathwaybase property)": [[131, "sympy.physics.mechanics.pathway.PathwayBase.attachments"]], "compute_loads() (sympy.physics.mechanics.pathway.linearpathway method)": [[131, "sympy.physics.mechanics.pathway.LinearPathway.compute_loads"]], "compute_loads() (sympy.physics.mechanics.pathway.pathwaybase method)": [[131, "sympy.physics.mechanics.pathway.PathwayBase.compute_loads"]], "compute_loads() (sympy.physics.mechanics.pathway.wrappingpathway method)": [[131, "sympy.physics.mechanics.pathway.WrappingPathway.compute_loads"]], "extension_velocity (sympy.physics.mechanics.pathway.linearpathway property)": [[131, "sympy.physics.mechanics.pathway.LinearPathway.extension_velocity"]], "extension_velocity (sympy.physics.mechanics.pathway.pathwaybase property)": [[131, "sympy.physics.mechanics.pathway.PathwayBase.extension_velocity"]], "extension_velocity (sympy.physics.mechanics.pathway.wrappingpathway property)": [[131, "sympy.physics.mechanics.pathway.WrappingPathway.extension_velocity"]], "geometry (sympy.physics.mechanics.pathway.wrappingpathway property)": [[131, "sympy.physics.mechanics.pathway.WrappingPathway.geometry"]], "length (sympy.physics.mechanics.pathway.linearpathway property)": [[131, "sympy.physics.mechanics.pathway.LinearPathway.length"]], "length (sympy.physics.mechanics.pathway.pathwaybase property)": [[131, "sympy.physics.mechanics.pathway.PathwayBase.length"]], "length (sympy.physics.mechanics.pathway.wrappingpathway property)": [[131, "sympy.physics.mechanics.pathway.WrappingPathway.length"]], "sympy.physics.mechanics.pathway": [[131, "module-sympy.physics.mechanics.pathway"]], "symbolicsystem (class in sympy.physics.mechanics.system)": [[133, "sympy.physics.mechanics.system.SymbolicSystem"]], "system (class in sympy.physics.mechanics._system)": [[133, "sympy.physics.mechanics._system.System"]], "actuators (sympy.physics.mechanics._system.system property)": [[133, "sympy.physics.mechanics._system.System.actuators"]], "add_actuators() (sympy.physics.mechanics._system.system method)": [[133, "sympy.physics.mechanics._system.System.add_actuators"]], "add_bodies() (sympy.physics.mechanics._system.system method)": [[133, "sympy.physics.mechanics._system.System.add_bodies"]], "add_coordinates() (sympy.physics.mechanics._system.system method)": [[133, "sympy.physics.mechanics._system.System.add_coordinates"]], "add_holonomic_constraints() (sympy.physics.mechanics._system.system method)": [[133, "sympy.physics.mechanics._system.System.add_holonomic_constraints"]], "add_joints() (sympy.physics.mechanics._system.system method)": [[133, "sympy.physics.mechanics._system.System.add_joints"]], "add_kdes() (sympy.physics.mechanics._system.system method)": [[133, "sympy.physics.mechanics._system.System.add_kdes"]], "add_loads() (sympy.physics.mechanics._system.system method)": [[133, "sympy.physics.mechanics._system.System.add_loads"]], "add_nonholonomic_constraints() (sympy.physics.mechanics._system.system method)": [[133, "sympy.physics.mechanics._system.System.add_nonholonomic_constraints"]], "add_speeds() (sympy.physics.mechanics._system.system method)": [[133, "sympy.physics.mechanics._system.System.add_speeds"]], "alg_con (sympy.physics.mechanics.system.symbolicsystem property)": [[133, "sympy.physics.mechanics.system.SymbolicSystem.alg_con"]], "apply_gravity() (sympy.physics.mechanics._system.system method)": [[133, "sympy.physics.mechanics._system.System.apply_gravity"]], "bodies (sympy.physics.mechanics._system.system property)": [[133, "sympy.physics.mechanics._system.System.bodies"]], "bodies (sympy.physics.mechanics.system.symbolicsystem property)": [[133, "sympy.physics.mechanics.system.SymbolicSystem.bodies"]], "comb_explicit_rhs (sympy.physics.mechanics.system.symbolicsystem property)": [[133, "sympy.physics.mechanics.system.SymbolicSystem.comb_explicit_rhs"]], "comb_implicit_mat (sympy.physics.mechanics.system.symbolicsystem property)": [[133, "sympy.physics.mechanics.system.SymbolicSystem.comb_implicit_mat"]], "comb_implicit_rhs (sympy.physics.mechanics.system.symbolicsystem property)": [[133, "sympy.physics.mechanics.system.SymbolicSystem.comb_implicit_rhs"]], "compute_explicit_form() (sympy.physics.mechanics.system.symbolicsystem method)": [[133, "sympy.physics.mechanics.system.SymbolicSystem.compute_explicit_form"]], "constant_symbols() (sympy.physics.mechanics.system.symbolicsystem method)": [[133, "sympy.physics.mechanics.system.SymbolicSystem.constant_symbols"]], "coordinates (sympy.physics.mechanics.system.symbolicsystem property)": [[133, "sympy.physics.mechanics.system.SymbolicSystem.coordinates"]], "dyn_implicit_mat (sympy.physics.mechanics.system.symbolicsystem property)": [[133, "sympy.physics.mechanics.system.SymbolicSystem.dyn_implicit_mat"]], "dyn_implicit_rhs (sympy.physics.mechanics.system.symbolicsystem property)": [[133, "sympy.physics.mechanics.system.SymbolicSystem.dyn_implicit_rhs"]], "dynamic_symbols() (sympy.physics.mechanics.system.symbolicsystem method)": [[133, "sympy.physics.mechanics.system.SymbolicSystem.dynamic_symbols"]], "eom_method (sympy.physics.mechanics._system.system property)": [[133, "sympy.physics.mechanics._system.System.eom_method"]], "forcing (sympy.physics.mechanics._system.system property)": [[133, "sympy.physics.mechanics._system.System.forcing"]], "forcing_full (sympy.physics.mechanics._system.system property)": [[133, "sympy.physics.mechanics._system.System.forcing_full"]], "form_eoms() (sympy.physics.mechanics._system.system method)": [[133, "sympy.physics.mechanics._system.System.form_eoms"]], "frame (sympy.physics.mechanics._system.system property)": [[133, "sympy.physics.mechanics._system.System.frame"]], "from_newtonian() (sympy.physics.mechanics._system.system class method)": [[133, "sympy.physics.mechanics._system.System.from_newtonian"]], "get_body() (sympy.physics.mechanics._system.system method)": [[133, "sympy.physics.mechanics._system.System.get_body"]], "get_joint() (sympy.physics.mechanics._system.system method)": [[133, "sympy.physics.mechanics._system.System.get_joint"]], "holonomic_constraints (sympy.physics.mechanics._system.system property)": [[133, "sympy.physics.mechanics._system.System.holonomic_constraints"]], "joints (sympy.physics.mechanics._system.system property)": [[133, "sympy.physics.mechanics._system.System.joints"]], "kdes (sympy.physics.mechanics._system.system property)": [[133, "sympy.physics.mechanics._system.System.kdes"]], "kin_explicit_rhs (sympy.physics.mechanics.system.symbolicsystem property)": [[133, "sympy.physics.mechanics.system.SymbolicSystem.kin_explicit_rhs"]], "loads (sympy.physics.mechanics._system.system property)": [[133, "sympy.physics.mechanics._system.System.loads"]], "loads (sympy.physics.mechanics.system.symbolicsystem property)": [[133, "sympy.physics.mechanics.system.SymbolicSystem.loads"]], "mass_matrix (sympy.physics.mechanics._system.system property)": [[133, "sympy.physics.mechanics._system.System.mass_matrix"]], "mass_matrix_full (sympy.physics.mechanics._system.system property)": [[133, "sympy.physics.mechanics._system.System.mass_matrix_full"]], "nonholonomic_constraints (sympy.physics.mechanics._system.system property)": [[133, "sympy.physics.mechanics._system.System.nonholonomic_constraints"]], "origin (sympy.physics.mechanics._system.system property)": [[133, "sympy.physics.mechanics._system.System.origin"]], "q (sympy.physics.mechanics._system.system property)": [[133, "sympy.physics.mechanics._system.System.q"]], "q_dep (sympy.physics.mechanics._system.system property)": [[133, "sympy.physics.mechanics._system.System.q_dep"]], "q_ind (sympy.physics.mechanics._system.system property)": [[133, "sympy.physics.mechanics._system.System.q_ind"]], "rhs() (sympy.physics.mechanics._system.system method)": [[133, "sympy.physics.mechanics._system.System.rhs"]], "speeds (sympy.physics.mechanics.system.symbolicsystem property)": [[133, "sympy.physics.mechanics.system.SymbolicSystem.speeds"]], "states (sympy.physics.mechanics.system.symbolicsystem property)": [[133, "sympy.physics.mechanics.system.SymbolicSystem.states"]], "sympy.physics.mechanics.system": [[133, "module-sympy.physics.mechanics.system"]], "u (sympy.physics.mechanics._system.system property)": [[133, "sympy.physics.mechanics._system.System.u"]], "u_dep (sympy.physics.mechanics._system.system property)": [[133, "sympy.physics.mechanics._system.System.u_dep"]], "u_ind (sympy.physics.mechanics._system.system property)": [[133, "sympy.physics.mechanics._system.System.u_ind"]], "validate_system() (sympy.physics.mechanics._system.system method)": [[133, "sympy.physics.mechanics._system.System.validate_system"]], "x (sympy.physics.mechanics._system.system property)": [[133, "sympy.physics.mechanics._system.System.x"]], "y (sympy.physics.mechanics._system.system property)": [[133, "sympy.physics.mechanics._system.System.y"]], "z (sympy.physics.mechanics._system.system property)": [[133, "sympy.physics.mechanics._system.System.z"]], "wrappingcylinder (class in sympy.physics.mechanics.wrapping_geometry)": [[134, "sympy.physics.mechanics.wrapping_geometry.WrappingCylinder"]], "wrappinggeometrybase (class in sympy.physics.mechanics.wrapping_geometry)": [[134, "sympy.physics.mechanics.wrapping_geometry.WrappingGeometryBase"]], "wrappingsphere (class in sympy.physics.mechanics.wrapping_geometry)": [[134, "sympy.physics.mechanics.wrapping_geometry.WrappingSphere"]], "axis (sympy.physics.mechanics.wrapping_geometry.wrappingcylinder property)": [[134, "sympy.physics.mechanics.wrapping_geometry.WrappingCylinder.axis"]], "geodesic_end_vectors() (sympy.physics.mechanics.wrapping_geometry.wrappingcylinder method)": [[134, "sympy.physics.mechanics.wrapping_geometry.WrappingCylinder.geodesic_end_vectors"]], "geodesic_end_vectors() (sympy.physics.mechanics.wrapping_geometry.wrappinggeometrybase method)": [[134, "sympy.physics.mechanics.wrapping_geometry.WrappingGeometryBase.geodesic_end_vectors"]], "geodesic_end_vectors() (sympy.physics.mechanics.wrapping_geometry.wrappingsphere method)": [[134, "sympy.physics.mechanics.wrapping_geometry.WrappingSphere.geodesic_end_vectors"]], "geodesic_length() (sympy.physics.mechanics.wrapping_geometry.wrappingcylinder method)": [[134, "sympy.physics.mechanics.wrapping_geometry.WrappingCylinder.geodesic_length"]], "geodesic_length() (sympy.physics.mechanics.wrapping_geometry.wrappinggeometrybase method)": [[134, "sympy.physics.mechanics.wrapping_geometry.WrappingGeometryBase.geodesic_length"]], "geodesic_length() (sympy.physics.mechanics.wrapping_geometry.wrappingsphere method)": [[134, "sympy.physics.mechanics.wrapping_geometry.WrappingSphere.geodesic_length"]], "point (sympy.physics.mechanics.wrapping_geometry.wrappingcylinder property)": [[134, "sympy.physics.mechanics.wrapping_geometry.WrappingCylinder.point"]], "point (sympy.physics.mechanics.wrapping_geometry.wrappinggeometrybase property)": [[134, "sympy.physics.mechanics.wrapping_geometry.WrappingGeometryBase.point"]], "point (sympy.physics.mechanics.wrapping_geometry.wrappingsphere property)": [[134, "sympy.physics.mechanics.wrapping_geometry.WrappingSphere.point"]], "point_on_surface() (sympy.physics.mechanics.wrapping_geometry.wrappingcylinder method)": [[134, "sympy.physics.mechanics.wrapping_geometry.WrappingCylinder.point_on_surface"]], "point_on_surface() (sympy.physics.mechanics.wrapping_geometry.wrappinggeometrybase method)": [[134, "sympy.physics.mechanics.wrapping_geometry.WrappingGeometryBase.point_on_surface"]], "point_on_surface() (sympy.physics.mechanics.wrapping_geometry.wrappingsphere method)": [[134, "sympy.physics.mechanics.wrapping_geometry.WrappingSphere.point_on_surface"]], "radius (sympy.physics.mechanics.wrapping_geometry.wrappingcylinder property)": [[134, "sympy.physics.mechanics.wrapping_geometry.WrappingCylinder.radius"]], "radius (sympy.physics.mechanics.wrapping_geometry.wrappingsphere property)": [[134, "sympy.physics.mechanics.wrapping_geometry.WrappingSphere.radius"]], "sympy.physics.mechanics.wrapping_geometry": [[134, "module-sympy.physics.mechanics.wrapping_geometry"]], "sympy.physics.mechanics": [[145, "module-sympy.physics.mechanics"]], "a (sympy.physics.optics.gaussopt.raytransfermatrix property)": [[154, "sympy.physics.optics.gaussopt.RayTransferMatrix.A"]], "b (sympy.physics.optics.gaussopt.raytransfermatrix property)": [[154, "sympy.physics.optics.gaussopt.RayTransferMatrix.B"]], "beamparameter (class in sympy.physics.optics.gaussopt)": [[154, "sympy.physics.optics.gaussopt.BeamParameter"]], "c (sympy.physics.optics.gaussopt.raytransfermatrix property)": [[154, "sympy.physics.optics.gaussopt.RayTransferMatrix.C"]], "curvedmirror (class in sympy.physics.optics.gaussopt)": [[154, "sympy.physics.optics.gaussopt.CurvedMirror"]], "curvedrefraction (class in sympy.physics.optics.gaussopt)": [[154, "sympy.physics.optics.gaussopt.CurvedRefraction"]], "d (sympy.physics.optics.gaussopt.raytransfermatrix property)": [[154, "sympy.physics.optics.gaussopt.RayTransferMatrix.D"]], "flatmirror (class in sympy.physics.optics.gaussopt)": [[154, "sympy.physics.optics.gaussopt.FlatMirror"]], "flatrefraction (class in sympy.physics.optics.gaussopt)": [[154, "sympy.physics.optics.gaussopt.FlatRefraction"]], "freespace (class in sympy.physics.optics.gaussopt)": [[154, "sympy.physics.optics.gaussopt.FreeSpace"]], "geometricray (class in sympy.physics.optics.gaussopt)": [[154, "sympy.physics.optics.gaussopt.GeometricRay"]], "raytransfermatrix (class in sympy.physics.optics.gaussopt)": [[154, "sympy.physics.optics.gaussopt.RayTransferMatrix"]], "thinlens (class in sympy.physics.optics.gaussopt)": [[154, "sympy.physics.optics.gaussopt.ThinLens"]], "angle (sympy.physics.optics.gaussopt.geometricray property)": [[154, "sympy.physics.optics.gaussopt.GeometricRay.angle"]], "conjugate_gauss_beams() (in module sympy.physics.optics.gaussopt)": [[154, "sympy.physics.optics.gaussopt.conjugate_gauss_beams"]], "divergence (sympy.physics.optics.gaussopt.beamparameter property)": [[154, "sympy.physics.optics.gaussopt.BeamParameter.divergence"]], "gaussian_conj() (in module sympy.physics.optics.gaussopt)": [[154, "sympy.physics.optics.gaussopt.gaussian_conj"]], "geometric_conj_ab() (in module sympy.physics.optics.gaussopt)": [[154, "sympy.physics.optics.gaussopt.geometric_conj_ab"]], "geometric_conj_af() (in module sympy.physics.optics.gaussopt)": [[154, "sympy.physics.optics.gaussopt.geometric_conj_af"]], "geometric_conj_bf() (in module sympy.physics.optics.gaussopt)": [[154, "sympy.physics.optics.gaussopt.geometric_conj_bf"]], "gouy (sympy.physics.optics.gaussopt.beamparameter property)": [[154, "sympy.physics.optics.gaussopt.BeamParameter.gouy"]], "height (sympy.physics.optics.gaussopt.geometricray property)": [[154, "sympy.physics.optics.gaussopt.GeometricRay.height"]], "q (sympy.physics.optics.gaussopt.beamparameter property)": [[154, "sympy.physics.optics.gaussopt.BeamParameter.q"]], "radius (sympy.physics.optics.gaussopt.beamparameter property)": [[154, "sympy.physics.optics.gaussopt.BeamParameter.radius"]], "rayleigh2waist() (in module sympy.physics.optics.gaussopt)": [[154, "sympy.physics.optics.gaussopt.rayleigh2waist"]], "sympy.physics.optics.gaussopt": [[154, "module-sympy.physics.optics.gaussopt"]], "w (sympy.physics.optics.gaussopt.beamparameter property)": [[154, "sympy.physics.optics.gaussopt.BeamParameter.w"]], "w_0 (sympy.physics.optics.gaussopt.beamparameter property)": [[154, "sympy.physics.optics.gaussopt.BeamParameter.w_0"]], "waist2rayleigh() (in module sympy.physics.optics.gaussopt)": [[154, "sympy.physics.optics.gaussopt.waist2rayleigh"]], "waist_approximation_limit (sympy.physics.optics.gaussopt.beamparameter property)": [[154, "sympy.physics.optics.gaussopt.BeamParameter.waist_approximation_limit"]], "medium (class in sympy.physics.optics.medium)": [[156, "sympy.physics.optics.medium.Medium"]], "refractive_index (sympy.physics.optics.medium.medium property)": [[156, "sympy.physics.optics.medium.Medium.refractive_index"]], "speed (sympy.physics.optics.medium.medium property)": [[156, "sympy.physics.optics.medium.Medium.speed"]], "sympy.physics.optics.medium": [[156, "module-sympy.physics.optics.medium"]], "half_wave_retarder() (in module sympy.physics.optics.polarization)": [[157, "sympy.physics.optics.polarization.half_wave_retarder"]], "jones_2_stokes() (in module sympy.physics.optics.polarization)": [[157, "sympy.physics.optics.polarization.jones_2_stokes"]], "jones_vector() (in module sympy.physics.optics.polarization)": [[157, "sympy.physics.optics.polarization.jones_vector"]], "linear_polarizer() (in module sympy.physics.optics.polarization)": [[157, "sympy.physics.optics.polarization.linear_polarizer"]], "mueller_matrix() (in module sympy.physics.optics.polarization)": [[157, "sympy.physics.optics.polarization.mueller_matrix"]], "phase_retarder() (in module sympy.physics.optics.polarization)": [[157, "sympy.physics.optics.polarization.phase_retarder"]], "polarizing_beam_splitter() (in module sympy.physics.optics.polarization)": [[157, "sympy.physics.optics.polarization.polarizing_beam_splitter"]], "quarter_wave_retarder() (in module sympy.physics.optics.polarization)": [[157, "sympy.physics.optics.polarization.quarter_wave_retarder"]], "reflective_filter() (in module sympy.physics.optics.polarization)": [[157, "sympy.physics.optics.polarization.reflective_filter"]], "stokes_vector() (in module sympy.physics.optics.polarization)": [[157, "sympy.physics.optics.polarization.stokes_vector"]], "sympy.physics.optics.polarization": [[157, "module-sympy.physics.optics.polarization"]], "transmissive_filter() (in module sympy.physics.optics.polarization)": [[157, "sympy.physics.optics.polarization.transmissive_filter"]], "brewster_angle() (in module sympy.physics.optics.utils)": [[158, "sympy.physics.optics.utils.brewster_angle"]], "critical_angle() (in module sympy.physics.optics.utils)": [[158, "sympy.physics.optics.utils.critical_angle"]], "deviation() (in module sympy.physics.optics.utils)": [[158, "sympy.physics.optics.utils.deviation"]], "fresnel_coefficients() (in module sympy.physics.optics.utils)": [[158, "sympy.physics.optics.utils.fresnel_coefficients"]], "hyperfocal_distance() (in module sympy.physics.optics.utils)": [[158, "sympy.physics.optics.utils.hyperfocal_distance"]], "lens_formula() (in module sympy.physics.optics.utils)": [[158, "sympy.physics.optics.utils.lens_formula"]], "lens_makers_formula() (in module sympy.physics.optics.utils)": [[158, "sympy.physics.optics.utils.lens_makers_formula"]], "mirror_formula() (in module sympy.physics.optics.utils)": [[158, "sympy.physics.optics.utils.mirror_formula"]], "refraction_angle() (in module sympy.physics.optics.utils)": [[158, "sympy.physics.optics.utils.refraction_angle"]], "sympy.physics.optics.utils": [[158, "module-sympy.physics.optics.utils"]], "transverse_magnification() (in module sympy.physics.optics.utils)": [[158, "sympy.physics.optics.utils.transverse_magnification"]], "twave (class in sympy.physics.optics.waves)": [[159, "sympy.physics.optics.waves.TWave"]], "amplitude (sympy.physics.optics.waves.twave property)": [[159, "sympy.physics.optics.waves.TWave.amplitude"]], "angular_velocity (sympy.physics.optics.waves.twave property)": [[159, "sympy.physics.optics.waves.TWave.angular_velocity"]], "frequency (sympy.physics.optics.waves.twave property)": [[159, "sympy.physics.optics.waves.TWave.frequency"]], "n (sympy.physics.optics.waves.twave property)": [[159, "sympy.physics.optics.waves.TWave.n"]], "phase (sympy.physics.optics.waves.twave property)": [[159, "sympy.physics.optics.waves.TWave.phase"]], "speed (sympy.physics.optics.waves.twave property)": [[159, "sympy.physics.optics.waves.TWave.speed"]], "sympy.physics.optics.waves": [[159, "module-sympy.physics.optics.waves"]], "time_period (sympy.physics.optics.waves.twave property)": [[159, "sympy.physics.optics.waves.TWave.time_period"]], "wavelength (sympy.physics.optics.waves.twave property)": [[159, "sympy.physics.optics.waves.TWave.wavelength"]], "wavenumber (sympy.physics.optics.waves.twave property)": [[159, "sympy.physics.optics.waves.TWave.wavenumber"]], "evaluate_pauli_product() (in module sympy.physics.paulialgebra)": [[160, "sympy.physics.paulialgebra.evaluate_pauli_product"]], "sympy.physics.paulialgebra": [[160, "module-sympy.physics.paulialgebra"]], "e_n() (in module sympy.physics.qho_1d)": [[161, "sympy.physics.qho_1d.E_n"]], "coherent_state() (in module sympy.physics.qho_1d)": [[161, "sympy.physics.qho_1d.coherent_state"]], "psi_n() (in module sympy.physics.qho_1d)": [[161, "sympy.physics.qho_1d.psi_n"]], "sympy.physics.qho_1d": [[161, "module-sympy.physics.qho_1d"]], "anticommutator (class in sympy.physics.quantum.anticommutator)": [[162, "sympy.physics.quantum.anticommutator.AntiCommutator"]], "doit() (sympy.physics.quantum.anticommutator.anticommutator method)": [[162, "sympy.physics.quantum.anticommutator.AntiCommutator.doit"]], "sympy.physics.quantum.anticommutator": [[162, "module-sympy.physics.quantum.anticommutator"]], "positionbra3d (class in sympy.physics.quantum.cartesian)": [[163, "sympy.physics.quantum.cartesian.PositionBra3D"]], "positionket3d (class in sympy.physics.quantum.cartesian)": [[163, "sympy.physics.quantum.cartesian.PositionKet3D"]], "positionstate3d (class in sympy.physics.quantum.cartesian)": [[163, "sympy.physics.quantum.cartesian.PositionState3D"]], "pxbra (class in sympy.physics.quantum.cartesian)": [[163, "sympy.physics.quantum.cartesian.PxBra"]], "pxket (class in sympy.physics.quantum.cartesian)": [[163, "sympy.physics.quantum.cartesian.PxKet"]], "pxop (class in sympy.physics.quantum.cartesian)": [[163, "sympy.physics.quantum.cartesian.PxOp"]], "xbra (class in sympy.physics.quantum.cartesian)": [[163, "sympy.physics.quantum.cartesian.XBra"]], "xket (class in sympy.physics.quantum.cartesian)": [[163, "sympy.physics.quantum.cartesian.XKet"]], "xop (class in sympy.physics.quantum.cartesian)": [[163, "sympy.physics.quantum.cartesian.XOp"]], "yop (class in sympy.physics.quantum.cartesian)": [[163, "sympy.physics.quantum.cartesian.YOp"]], "zop (class in sympy.physics.quantum.cartesian)": [[163, "sympy.physics.quantum.cartesian.ZOp"]], "momentum (sympy.physics.quantum.cartesian.pxbra property)": [[163, "sympy.physics.quantum.cartesian.PxBra.momentum"]], "momentum (sympy.physics.quantum.cartesian.pxket property)": [[163, "sympy.physics.quantum.cartesian.PxKet.momentum"]], "position (sympy.physics.quantum.cartesian.xbra property)": [[163, "sympy.physics.quantum.cartesian.XBra.position"]], "position (sympy.physics.quantum.cartesian.xket property)": [[163, "sympy.physics.quantum.cartesian.XKet.position"]], "position_x (sympy.physics.quantum.cartesian.positionstate3d property)": [[163, "sympy.physics.quantum.cartesian.PositionState3D.position_x"]], "position_y (sympy.physics.quantum.cartesian.positionstate3d property)": [[163, "sympy.physics.quantum.cartesian.PositionState3D.position_y"]], "position_z (sympy.physics.quantum.cartesian.positionstate3d property)": [[163, "sympy.physics.quantum.cartesian.PositionState3D.position_z"]], "sympy.physics.quantum.cartesian": [[163, "module-sympy.physics.quantum.cartesian"]], "cg (class in sympy.physics.quantum.cg)": [[164, "sympy.physics.quantum.cg.CG"]], "wigner3j (class in sympy.physics.quantum.cg)": [[164, "sympy.physics.quantum.cg.Wigner3j"]], "wigner6j (class in sympy.physics.quantum.cg)": [[164, "sympy.physics.quantum.cg.Wigner6j"]], "wigner9j (class in sympy.physics.quantum.cg)": [[164, "sympy.physics.quantum.cg.Wigner9j"]], "cg_simp() (in module sympy.physics.quantum.cg)": [[164, "sympy.physics.quantum.cg.cg_simp"]], "sympy.physics.quantum.cg": [[164, "module-sympy.physics.quantum.cg"]], "circuitplot (class in sympy.physics.quantum.circuitplot)": [[165, "sympy.physics.quantum.circuitplot.CircuitPlot"]], "createcgate() (in module sympy.physics.quantum.circuitplot)": [[165, "sympy.physics.quantum.circuitplot.CreateCGate"]], "mx (class in sympy.physics.quantum.circuitplot)": [[165, "sympy.physics.quantum.circuitplot.Mx"]], "mz (class in sympy.physics.quantum.circuitplot)": [[165, "sympy.physics.quantum.circuitplot.Mz"]], "circuit_plot() (in module sympy.physics.quantum.circuitplot)": [[165, "sympy.physics.quantum.circuitplot.circuit_plot"]], "control_line() (sympy.physics.quantum.circuitplot.circuitplot method)": [[165, "sympy.physics.quantum.circuitplot.CircuitPlot.control_line"]], "control_point() (sympy.physics.quantum.circuitplot.circuitplot method)": [[165, "sympy.physics.quantum.circuitplot.CircuitPlot.control_point"]], "labeller() (in module sympy.physics.quantum.circuitplot)": [[165, "sympy.physics.quantum.circuitplot.labeller"]], "not_point() (sympy.physics.quantum.circuitplot.circuitplot method)": [[165, "sympy.physics.quantum.circuitplot.CircuitPlot.not_point"]], "one_qubit_box() (sympy.physics.quantum.circuitplot.circuitplot method)": [[165, "sympy.physics.quantum.circuitplot.CircuitPlot.one_qubit_box"]], "swap_point() (sympy.physics.quantum.circuitplot.circuitplot method)": [[165, "sympy.physics.quantum.circuitplot.CircuitPlot.swap_point"]], "sympy.physics.quantum.circuitplot": [[165, "module-sympy.physics.quantum.circuitplot"]], "two_qubit_box() (sympy.physics.quantum.circuitplot.circuitplot method)": [[165, "sympy.physics.quantum.circuitplot.CircuitPlot.two_qubit_box"]], "update() (sympy.physics.quantum.circuitplot.circuitplot method)": [[165, "sympy.physics.quantum.circuitplot.CircuitPlot.update"]], "commutator (class in sympy.physics.quantum.commutator)": [[166, "sympy.physics.quantum.commutator.Commutator"]], "doit() (sympy.physics.quantum.commutator.commutator method)": [[166, "sympy.physics.quantum.commutator.Commutator.doit"]], "sympy.physics.quantum.commutator": [[166, "module-sympy.physics.quantum.commutator"]], "hbar (class in sympy.physics.quantum.constants)": [[167, "sympy.physics.quantum.constants.HBar"]], "sympy.physics.quantum.constants": [[167, "module-sympy.physics.quantum.constants"]], "dagger (class in sympy.physics.quantum.dagger)": [[168, "sympy.physics.quantum.dagger.Dagger"]], "sympy.physics.quantum.dagger": [[168, "module-sympy.physics.quantum.dagger"]], "cgate (class in sympy.physics.quantum.gate)": [[169, "sympy.physics.quantum.gate.CGate"]], "cgates (class in sympy.physics.quantum.gate)": [[169, "sympy.physics.quantum.gate.CGateS"]], "cnot (in module sympy.physics.quantum.gate)": [[169, "sympy.physics.quantum.gate.CNOT"]], "cnotgate (class in sympy.physics.quantum.gate)": [[169, "sympy.physics.quantum.gate.CNotGate"]], "gate (class in sympy.physics.quantum.gate)": [[169, "sympy.physics.quantum.gate.Gate"]], "h (in module sympy.physics.quantum.gate)": [[169, "sympy.physics.quantum.gate.H"]], "hadamardgate (class in sympy.physics.quantum.gate)": [[169, "sympy.physics.quantum.gate.HadamardGate"]], "identitygate (class in sympy.physics.quantum.gate)": [[169, "sympy.physics.quantum.gate.IdentityGate"]], "onequbitgate (class in sympy.physics.quantum.gate)": [[169, "sympy.physics.quantum.gate.OneQubitGate"]], "phase (in module sympy.physics.quantum.gate)": [[169, "sympy.physics.quantum.gate.Phase"]], "phasegate (class in sympy.physics.quantum.gate)": [[169, "sympy.physics.quantum.gate.PhaseGate"]], "s (in module sympy.physics.quantum.gate)": [[169, "sympy.physics.quantum.gate.S"]], "swap (in module sympy.physics.quantum.gate)": [[169, "sympy.physics.quantum.gate.SWAP"]], "swapgate (class in sympy.physics.quantum.gate)": [[169, "sympy.physics.quantum.gate.SwapGate"]], "t (in module sympy.physics.quantum.gate)": [[169, "sympy.physics.quantum.gate.T"]], "tgate (class in sympy.physics.quantum.gate)": [[169, "sympy.physics.quantum.gate.TGate"]], "twoqubitgate (class in sympy.physics.quantum.gate)": [[169, "sympy.physics.quantum.gate.TwoQubitGate"]], "ugate (class in sympy.physics.quantum.gate)": [[169, "sympy.physics.quantum.gate.UGate"]], "x (in module sympy.physics.quantum.gate)": [[169, "sympy.physics.quantum.gate.X"]], "xgate (class in sympy.physics.quantum.gate)": [[169, "sympy.physics.quantum.gate.XGate"]], "y (in module sympy.physics.quantum.gate)": [[169, "sympy.physics.quantum.gate.Y"]], "ygate (class in sympy.physics.quantum.gate)": [[169, "sympy.physics.quantum.gate.YGate"]], "z (in module sympy.physics.quantum.gate)": [[169, "sympy.physics.quantum.gate.Z"]], "zgate (class in sympy.physics.quantum.gate)": [[169, "sympy.physics.quantum.gate.ZGate"]], "controls (sympy.physics.quantum.gate.cgate property)": [[169, "sympy.physics.quantum.gate.CGate.controls"]], "controls (sympy.physics.quantum.gate.cnotgate property)": [[169, "sympy.physics.quantum.gate.CNotGate.controls"]], "decompose() (sympy.physics.quantum.gate.cgate method)": [[169, "sympy.physics.quantum.gate.CGate.decompose"]], "decompose() (sympy.physics.quantum.gate.swapgate method)": [[169, "sympy.physics.quantum.gate.SwapGate.decompose"]], "eval_controls() (sympy.physics.quantum.gate.cgate method)": [[169, "sympy.physics.quantum.gate.CGate.eval_controls"]], "gate (sympy.physics.quantum.gate.cgate property)": [[169, "sympy.physics.quantum.gate.CGate.gate"]], "gate (sympy.physics.quantum.gate.cnotgate property)": [[169, "sympy.physics.quantum.gate.CNotGate.gate"]], "gate_simp() (in module sympy.physics.quantum.gate)": [[169, "sympy.physics.quantum.gate.gate_simp"]], "gate_sort() (in module sympy.physics.quantum.gate)": [[169, "sympy.physics.quantum.gate.gate_sort"]], "get_target_matrix() (sympy.physics.quantum.gate.gate method)": [[169, "sympy.physics.quantum.gate.Gate.get_target_matrix"]], "get_target_matrix() (sympy.physics.quantum.gate.ugate method)": [[169, "sympy.physics.quantum.gate.UGate.get_target_matrix"]], "min_qubits (sympy.physics.quantum.gate.cgate property)": [[169, "sympy.physics.quantum.gate.CGate.min_qubits"]], "min_qubits (sympy.physics.quantum.gate.cnotgate property)": [[169, "sympy.physics.quantum.gate.CNotGate.min_qubits"]], "min_qubits (sympy.physics.quantum.gate.gate property)": [[169, "sympy.physics.quantum.gate.Gate.min_qubits"]], "normalized() (in module sympy.physics.quantum.gate)": [[169, "sympy.physics.quantum.gate.normalized"]], "nqubits (sympy.physics.quantum.gate.cgate property)": [[169, "sympy.physics.quantum.gate.CGate.nqubits"]], "nqubits (sympy.physics.quantum.gate.gate property)": [[169, "sympy.physics.quantum.gate.Gate.nqubits"]], "plot_gate() (sympy.physics.quantum.gate.cgate method)": [[169, "sympy.physics.quantum.gate.CGate.plot_gate"]], "random_circuit() (in module sympy.physics.quantum.gate)": [[169, "sympy.physics.quantum.gate.random_circuit"]], "sympy.physics.quantum.gate": [[169, "module-sympy.physics.quantum.gate"]], "targets (sympy.physics.quantum.gate.cgate property)": [[169, "sympy.physics.quantum.gate.CGate.targets"]], "targets (sympy.physics.quantum.gate.cnotgate property)": [[169, "sympy.physics.quantum.gate.CNotGate.targets"]], "targets (sympy.physics.quantum.gate.gate property)": [[169, "sympy.physics.quantum.gate.Gate.targets"]], "targets (sympy.physics.quantum.gate.ugate property)": [[169, "sympy.physics.quantum.gate.UGate.targets"]], "oraclegate (class in sympy.physics.quantum.grover)": [[170, "sympy.physics.quantum.grover.OracleGate"]], "wgate (class in sympy.physics.quantum.grover)": [[170, "sympy.physics.quantum.grover.WGate"]], "apply_grover() (in module sympy.physics.quantum.grover)": [[170, "sympy.physics.quantum.grover.apply_grover"]], "grover_iteration() (in module sympy.physics.quantum.grover)": [[170, "sympy.physics.quantum.grover.grover_iteration"]], "search_function (sympy.physics.quantum.grover.oraclegate property)": [[170, "sympy.physics.quantum.grover.OracleGate.search_function"]], "superposition_basis() (in module sympy.physics.quantum.grover)": [[170, "sympy.physics.quantum.grover.superposition_basis"]], "sympy.physics.quantum.grover": [[170, "module-sympy.physics.quantum.grover"]], "targets (sympy.physics.quantum.grover.oraclegate property)": [[170, "sympy.physics.quantum.grover.OracleGate.targets"]], "complexspace (class in sympy.physics.quantum.hilbert)": [[171, "sympy.physics.quantum.hilbert.ComplexSpace"]], "directsumhilbertspace (class in sympy.physics.quantum.hilbert)": [[171, "sympy.physics.quantum.hilbert.DirectSumHilbertSpace"]], "fockspace (class in sympy.physics.quantum.hilbert)": [[171, "sympy.physics.quantum.hilbert.FockSpace"]], "hilbertspace (class in sympy.physics.quantum.hilbert)": [[171, "sympy.physics.quantum.hilbert.HilbertSpace"]], "l2 (class in sympy.physics.quantum.hilbert)": [[171, "sympy.physics.quantum.hilbert.L2"]], "tensorpowerhilbertspace (class in sympy.physics.quantum.hilbert)": [[171, "sympy.physics.quantum.hilbert.TensorPowerHilbertSpace"]], "tensorproducthilbertspace (class in sympy.physics.quantum.hilbert)": [[171, "sympy.physics.quantum.hilbert.TensorProductHilbertSpace"]], "dimension (sympy.physics.quantum.hilbert.hilbertspace property)": [[171, "sympy.physics.quantum.hilbert.HilbertSpace.dimension"]], "eval() (sympy.physics.quantum.hilbert.directsumhilbertspace class method)": [[171, "sympy.physics.quantum.hilbert.DirectSumHilbertSpace.eval"]], "eval() (sympy.physics.quantum.hilbert.tensorproducthilbertspace class method)": [[171, "sympy.physics.quantum.hilbert.TensorProductHilbertSpace.eval"]], "spaces (sympy.physics.quantum.hilbert.directsumhilbertspace property)": [[171, "sympy.physics.quantum.hilbert.DirectSumHilbertSpace.spaces"]], "spaces (sympy.physics.quantum.hilbert.tensorproducthilbertspace property)": [[171, "sympy.physics.quantum.hilbert.TensorProductHilbertSpace.spaces"]], "sympy.physics.quantum.hilbert": [[171, "module-sympy.physics.quantum.hilbert"]], "innerproduct (class in sympy.physics.quantum.innerproduct)": [[173, "sympy.physics.quantum.innerproduct.InnerProduct"]], "sympy.physics.quantum.innerproduct": [[173, "module-sympy.physics.quantum.innerproduct"]], "differentialoperator (class in sympy.physics.quantum.operator)": [[174, "sympy.physics.quantum.operator.DifferentialOperator"]], "hermitianoperator (class in sympy.physics.quantum.operator)": [[174, "sympy.physics.quantum.operator.HermitianOperator"]], "identityoperator (class in sympy.physics.quantum.operator)": [[174, "sympy.physics.quantum.operator.IdentityOperator"]], "operator (class in sympy.physics.quantum.operator)": [[174, "sympy.physics.quantum.operator.Operator"]], "outerproduct (class in sympy.physics.quantum.operator)": [[174, "sympy.physics.quantum.operator.OuterProduct"]], "unitaryoperator (class in sympy.physics.quantum.operator)": [[174, "sympy.physics.quantum.operator.UnitaryOperator"]], "bra (sympy.physics.quantum.operator.outerproduct property)": [[174, "sympy.physics.quantum.operator.OuterProduct.bra"]], "expr (sympy.physics.quantum.operator.differentialoperator property)": [[174, "sympy.physics.quantum.operator.DifferentialOperator.expr"]], "free_symbols (sympy.physics.quantum.operator.differentialoperator property)": [[174, "sympy.physics.quantum.operator.DifferentialOperator.free_symbols"]], "function (sympy.physics.quantum.operator.differentialoperator property)": [[174, "sympy.physics.quantum.operator.DifferentialOperator.function"]], "ket (sympy.physics.quantum.operator.outerproduct property)": [[174, "sympy.physics.quantum.operator.OuterProduct.ket"]], "sympy.physics.quantum.operator": [[174, "module-sympy.physics.quantum.operator"]], "variables (sympy.physics.quantum.operator.differentialoperator property)": [[174, "sympy.physics.quantum.operator.DifferentialOperator.variables"]], "operators_to_state() (in module sympy.physics.quantum.operatorset)": [[175, "sympy.physics.quantum.operatorset.operators_to_state"]], "state_to_operators() (in module sympy.physics.quantum.operatorset)": [[175, "sympy.physics.quantum.operatorset.state_to_operators"]], "sympy.physics.quantum.operatorset": [[175, "module-sympy.physics.quantum.operatorset"]], "piabbra (class in sympy.physics.quantum.piab)": [[176, "sympy.physics.quantum.piab.PIABBra"]], "piabhamiltonian (class in sympy.physics.quantum.piab)": [[176, "sympy.physics.quantum.piab.PIABHamiltonian"]], "piabket (class in sympy.physics.quantum.piab)": [[176, "sympy.physics.quantum.piab.PIABKet"]], "sympy.physics.quantum.piab": [[176, "module-sympy.physics.quantum.piab"]], "qapply() (in module sympy.physics.quantum.qapply)": [[177, "sympy.physics.quantum.qapply.qapply"]], "sympy.physics.quantum.qapply": [[177, "module-sympy.physics.quantum.qapply"]], "iqft (class in sympy.physics.quantum.qft)": [[178, "sympy.physics.quantum.qft.IQFT"]], "qft (class in sympy.physics.quantum.qft)": [[178, "sympy.physics.quantum.qft.QFT"]], "rk (in module sympy.physics.quantum.qft)": [[178, "sympy.physics.quantum.qft.Rk"]], "rkgate (class in sympy.physics.quantum.qft)": [[178, "sympy.physics.quantum.qft.RkGate"]], "decompose() (sympy.physics.quantum.qft.iqft method)": [[178, "sympy.physics.quantum.qft.IQFT.decompose"]], "decompose() (sympy.physics.quantum.qft.qft method)": [[178, "sympy.physics.quantum.qft.QFT.decompose"]], "sympy.physics.quantum.qft": [[178, "module-sympy.physics.quantum.qft"]], "intqubit (class in sympy.physics.quantum.qubit)": [[179, "sympy.physics.quantum.qubit.IntQubit"]], "intqubitbra (class in sympy.physics.quantum.qubit)": [[179, "sympy.physics.quantum.qubit.IntQubitBra"]], "qubit (class in sympy.physics.quantum.qubit)": [[179, "sympy.physics.quantum.qubit.Qubit"]], "qubitbra (class in sympy.physics.quantum.qubit)": [[179, "sympy.physics.quantum.qubit.QubitBra"]], "matrix_to_density() (in module sympy.physics.quantum.qubit)": [[179, "sympy.physics.quantum.qubit.matrix_to_density"]], "matrix_to_qubit() (in module sympy.physics.quantum.qubit)": [[179, "sympy.physics.quantum.qubit.matrix_to_qubit"]], "measure_all() (in module sympy.physics.quantum.qubit)": [[179, "sympy.physics.quantum.qubit.measure_all"]], "measure_all_oneshot() (in module sympy.physics.quantum.qubit)": [[179, "sympy.physics.quantum.qubit.measure_all_oneshot"]], "measure_partial() (in module sympy.physics.quantum.qubit)": [[179, "sympy.physics.quantum.qubit.measure_partial"]], "measure_partial_oneshot() (in module sympy.physics.quantum.qubit)": [[179, "sympy.physics.quantum.qubit.measure_partial_oneshot"]], "qubit_to_matrix() (in module sympy.physics.quantum.qubit)": [[179, "sympy.physics.quantum.qubit.qubit_to_matrix"]], "sympy.physics.quantum.qubit": [[179, "module-sympy.physics.quantum.qubit"]], "enumerate_states() (in module sympy.physics.quantum.represent)": [[180, "sympy.physics.quantum.represent.enumerate_states"]], "get_basis() (in module sympy.physics.quantum.represent)": [[180, "sympy.physics.quantum.represent.get_basis"]], "integrate_result() (in module sympy.physics.quantum.represent)": [[180, "sympy.physics.quantum.represent.integrate_result"]], "rep_expectation() (in module sympy.physics.quantum.represent)": [[180, "sympy.physics.quantum.represent.rep_expectation"]], "rep_innerproduct() (in module sympy.physics.quantum.represent)": [[180, "sympy.physics.quantum.represent.rep_innerproduct"]], "represent() (in module sympy.physics.quantum.represent)": [[180, "sympy.physics.quantum.represent.represent"]], "sympy.physics.quantum.represent": [[180, "module-sympy.physics.quantum.represent"]], "cmod (class in sympy.physics.quantum.shor)": [[181, "sympy.physics.quantum.shor.CMod"]], "n (sympy.physics.quantum.shor.cmod property)": [[181, "sympy.physics.quantum.shor.CMod.N"]], "a (sympy.physics.quantum.shor.cmod property)": [[181, "sympy.physics.quantum.shor.CMod.a"]], "period_find() (in module sympy.physics.quantum.shor)": [[181, "sympy.physics.quantum.shor.period_find"]], "shor() (in module sympy.physics.quantum.shor)": [[181, "sympy.physics.quantum.shor.shor"]], "sympy.physics.quantum.shor": [[181, "module-sympy.physics.quantum.shor"]], "t (sympy.physics.quantum.shor.cmod property)": [[181, "sympy.physics.quantum.shor.CMod.t"]], "d() (sympy.physics.quantum.spin.rotation class method)": [[182, "sympy.physics.quantum.spin.Rotation.D"], [182, "sympy.physics.quantum.spin.Rotation.d"]], "j2op (class in sympy.physics.quantum.spin)": [[182, "sympy.physics.quantum.spin.J2Op"]], "jxbra (class in sympy.physics.quantum.spin)": [[182, "sympy.physics.quantum.spin.JxBra"]], "jxbracoupled (class in sympy.physics.quantum.spin)": [[182, "sympy.physics.quantum.spin.JxBraCoupled"]], "jxket (class in sympy.physics.quantum.spin)": [[182, "sympy.physics.quantum.spin.JxKet"]], "jxketcoupled (class in sympy.physics.quantum.spin)": [[182, "sympy.physics.quantum.spin.JxKetCoupled"]], "jybra (class in sympy.physics.quantum.spin)": [[182, "sympy.physics.quantum.spin.JyBra"]], "jybracoupled (class in sympy.physics.quantum.spin)": [[182, "sympy.physics.quantum.spin.JyBraCoupled"]], "jyket (class in sympy.physics.quantum.spin)": [[182, "sympy.physics.quantum.spin.JyKet"]], "jyketcoupled (class in sympy.physics.quantum.spin)": [[182, "sympy.physics.quantum.spin.JyKetCoupled"]], "jzbra (class in sympy.physics.quantum.spin)": [[182, "sympy.physics.quantum.spin.JzBra"]], "jzbracoupled (class in sympy.physics.quantum.spin)": [[182, "sympy.physics.quantum.spin.JzBraCoupled"]], "jzket (class in sympy.physics.quantum.spin)": [[182, "sympy.physics.quantum.spin.JzKet"]], "jzketcoupled (class in sympy.physics.quantum.spin)": [[182, "sympy.physics.quantum.spin.JzKetCoupled"]], "jzop (class in sympy.physics.quantum.spin)": [[182, "sympy.physics.quantum.spin.JzOp"]], "rotation (class in sympy.physics.quantum.spin)": [[182, "sympy.physics.quantum.spin.Rotation"]], "wignerd (class in sympy.physics.quantum.spin)": [[182, "sympy.physics.quantum.spin.WignerD"]], "couple() (in module sympy.physics.quantum.spin)": [[182, "sympy.physics.quantum.spin.couple"]], "sympy.physics.quantum.spin": [[182, "module-sympy.physics.quantum.spin"]], "uncouple() (in module sympy.physics.quantum.spin)": [[182, "sympy.physics.quantum.spin.uncouple"]], "bra (class in sympy.physics.quantum.state)": [[183, "sympy.physics.quantum.state.Bra"]], "brabase (class in sympy.physics.quantum.state)": [[183, "sympy.physics.quantum.state.BraBase"]], "ket (class in sympy.physics.quantum.state)": [[183, "sympy.physics.quantum.state.Ket"]], "ketbase (class in sympy.physics.quantum.state)": [[183, "sympy.physics.quantum.state.KetBase"]], "orthogonalbra (class in sympy.physics.quantum.state)": [[183, "sympy.physics.quantum.state.OrthogonalBra"]], "orthogonalket (class in sympy.physics.quantum.state)": [[183, "sympy.physics.quantum.state.OrthogonalKet"]], "orthogonalstate (class in sympy.physics.quantum.state)": [[183, "sympy.physics.quantum.state.OrthogonalState"]], "state (class in sympy.physics.quantum.state)": [[183, "sympy.physics.quantum.state.State"]], "statebase (class in sympy.physics.quantum.state)": [[183, "sympy.physics.quantum.state.StateBase"]], "timedepbra (class in sympy.physics.quantum.state)": [[183, "sympy.physics.quantum.state.TimeDepBra"]], "timedepket (class in sympy.physics.quantum.state)": [[183, "sympy.physics.quantum.state.TimeDepKet"]], "timedepstate (class in sympy.physics.quantum.state)": [[183, "sympy.physics.quantum.state.TimeDepState"]], "wavefunction (class in sympy.physics.quantum.state)": [[183, "sympy.physics.quantum.state.Wavefunction"]], "dual (sympy.physics.quantum.state.statebase property)": [[183, "sympy.physics.quantum.state.StateBase.dual"]], "dual_class() (sympy.physics.quantum.state.statebase class method)": [[183, "sympy.physics.quantum.state.StateBase.dual_class"]], "expr (sympy.physics.quantum.state.wavefunction property)": [[183, "sympy.physics.quantum.state.Wavefunction.expr"]], "is_commutative (sympy.physics.quantum.state.wavefunction property)": [[183, "sympy.physics.quantum.state.Wavefunction.is_commutative"]], "is_normalized (sympy.physics.quantum.state.wavefunction property)": [[183, "sympy.physics.quantum.state.Wavefunction.is_normalized"]], "label (sympy.physics.quantum.state.timedepstate property)": [[183, "sympy.physics.quantum.state.TimeDepState.label"]], "limits (sympy.physics.quantum.state.wavefunction property)": [[183, "sympy.physics.quantum.state.Wavefunction.limits"]], "norm (sympy.physics.quantum.state.wavefunction property)": [[183, "sympy.physics.quantum.state.Wavefunction.norm"]], "normalize() (sympy.physics.quantum.state.wavefunction method)": [[183, "sympy.physics.quantum.state.Wavefunction.normalize"]], "operators (sympy.physics.quantum.state.statebase property)": [[183, "sympy.physics.quantum.state.StateBase.operators"]], "prob() (sympy.physics.quantum.state.wavefunction method)": [[183, "sympy.physics.quantum.state.Wavefunction.prob"]], "sympy.physics.quantum.state": [[183, "module-sympy.physics.quantum.state"]], "time (sympy.physics.quantum.state.timedepstate property)": [[183, "sympy.physics.quantum.state.TimeDepState.time"]], "variables (sympy.physics.quantum.state.wavefunction property)": [[183, "sympy.physics.quantum.state.Wavefunction.variables"]], "tensorproduct (class in sympy.physics.quantum.tensorproduct)": [[184, "sympy.physics.quantum.tensorproduct.TensorProduct"]], "sympy.physics.quantum.tensorproduct": [[184, "module-sympy.physics.quantum.tensorproduct"]], "tensor_product_simp() (in module sympy.physics.quantum.tensorproduct)": [[184, "sympy.physics.quantum.tensorproduct.tensor_product_simp"]], "annihilateboson (class in sympy.physics.secondquant)": [[185, "sympy.physics.secondquant.AnnihilateBoson"]], "annihilatefermion (class in sympy.physics.secondquant)": [[185, "sympy.physics.secondquant.AnnihilateFermion"]], "antisymmetrictensor (class in sympy.physics.secondquant)": [[185, "sympy.physics.secondquant.AntiSymmetricTensor"]], "b (in module sympy.physics.secondquant)": [[185, "sympy.physics.secondquant.B"]], "bbra (in module sympy.physics.secondquant)": [[185, "sympy.physics.secondquant.BBra"]], "bket (in module sympy.physics.secondquant)": [[185, "sympy.physics.secondquant.BKet"]], "bd (in module sympy.physics.secondquant)": [[185, "sympy.physics.secondquant.Bd"]], "bosonicbasis (class in sympy.physics.secondquant)": [[185, "sympy.physics.secondquant.BosonicBasis"]], "commutator (class in sympy.physics.secondquant)": [[185, "sympy.physics.secondquant.Commutator"]], "createboson (class in sympy.physics.secondquant)": [[185, "sympy.physics.secondquant.CreateBoson"]], "createfermion (class in sympy.physics.secondquant)": [[185, "sympy.physics.secondquant.CreateFermion"]], "dagger (class in sympy.physics.secondquant)": [[185, "sympy.physics.secondquant.Dagger"]], "f (in module sympy.physics.secondquant)": [[185, "sympy.physics.secondquant.F"]], "fbra (in module sympy.physics.secondquant)": [[185, "sympy.physics.secondquant.FBra"]], "fket (in module sympy.physics.secondquant)": [[185, "sympy.physics.secondquant.FKet"]], "fd (in module sympy.physics.secondquant)": [[185, "sympy.physics.secondquant.Fd"]], "fixedbosonicbasis (class in sympy.physics.secondquant)": [[185, "sympy.physics.secondquant.FixedBosonicBasis"]], "fockstate (class in sympy.physics.secondquant)": [[185, "sympy.physics.secondquant.FockState"]], "fockstatebosonbra (class in sympy.physics.secondquant)": [[185, "sympy.physics.secondquant.FockStateBosonBra"]], "fockstatebosonket (class in sympy.physics.secondquant)": [[185, "sympy.physics.secondquant.FockStateBosonKet"]], "fockstatebra (class in sympy.physics.secondquant)": [[185, "sympy.physics.secondquant.FockStateBra"]], "fockstatefermionbra (class in sympy.physics.secondquant)": [[185, "sympy.physics.secondquant.FockStateFermionBra"]], "fockstatefermionket (class in sympy.physics.secondquant)": [[185, "sympy.physics.secondquant.FockStateFermionKet"]], "fockstateket (class in sympy.physics.secondquant)": [[185, "sympy.physics.secondquant.FockStateKet"]], "innerproduct (class in sympy.physics.secondquant)": [[185, "sympy.physics.secondquant.InnerProduct"]], "kroneckerdelta (class in sympy.physics.secondquant)": [[185, "sympy.physics.secondquant.KroneckerDelta"]], "no (class in sympy.physics.secondquant)": [[185, "sympy.physics.secondquant.NO"]], "permutationoperator (class in sympy.physics.secondquant)": [[185, "sympy.physics.secondquant.PermutationOperator"]], "varbosonicbasis (class in sympy.physics.secondquant)": [[185, "sympy.physics.secondquant.VarBosonicBasis"]], "apply_operator() (sympy.physics.secondquant.annihilateboson method)": [[185, "sympy.physics.secondquant.AnnihilateBoson.apply_operator"]], "apply_operator() (sympy.physics.secondquant.annihilatefermion method)": [[185, "sympy.physics.secondquant.AnnihilateFermion.apply_operator"]], "apply_operator() (sympy.physics.secondquant.createboson method)": [[185, "sympy.physics.secondquant.CreateBoson.apply_operator"]], "apply_operator() (sympy.physics.secondquant.createfermion method)": [[185, "sympy.physics.secondquant.CreateFermion.apply_operator"]], "apply_operators() (in module sympy.physics.secondquant)": [[185, "sympy.physics.secondquant.apply_operators"]], "bra (sympy.physics.secondquant.innerproduct property)": [[185, "sympy.physics.secondquant.InnerProduct.bra"]], "contraction() (in module sympy.physics.secondquant)": [[185, "sympy.physics.secondquant.contraction"]], "doit() (sympy.physics.secondquant.commutator method)": [[185, "sympy.physics.secondquant.Commutator.doit"]], "doit() (sympy.physics.secondquant.no method)": [[185, "sympy.physics.secondquant.NO.doit"]], "eval() (sympy.physics.secondquant.commutator class method)": [[185, "sympy.physics.secondquant.Commutator.eval"]], "eval() (sympy.physics.secondquant.dagger class method)": [[185, "sympy.physics.secondquant.Dagger.eval"]], "eval() (sympy.physics.secondquant.kroneckerdelta class method)": [[185, "sympy.physics.secondquant.KroneckerDelta.eval"]], "evaluate_deltas() (in module sympy.physics.secondquant)": [[185, "sympy.physics.secondquant.evaluate_deltas"]], "get_permuted() (sympy.physics.secondquant.permutationoperator method)": [[185, "sympy.physics.secondquant.PermutationOperator.get_permuted"]], "get_subno() (sympy.physics.secondquant.no method)": [[185, "sympy.physics.secondquant.NO.get_subNO"]], "has_q_annihilators (sympy.physics.secondquant.no property)": [[185, "sympy.physics.secondquant.NO.has_q_annihilators"]], "has_q_creators (sympy.physics.secondquant.no property)": [[185, "sympy.physics.secondquant.NO.has_q_creators"]], "index() (sympy.physics.secondquant.fixedbosonicbasis method)": [[185, "sympy.physics.secondquant.FixedBosonicBasis.index"]], "index() (sympy.physics.secondquant.varbosonicbasis method)": [[185, "sympy.physics.secondquant.VarBosonicBasis.index"]], "indices_contain_equal_information (sympy.physics.secondquant.kroneckerdelta property)": [[185, "sympy.physics.secondquant.KroneckerDelta.indices_contain_equal_information"]], "is_above_fermi (sympy.physics.secondquant.kroneckerdelta property)": [[185, "sympy.physics.secondquant.KroneckerDelta.is_above_fermi"]], "is_below_fermi (sympy.physics.secondquant.kroneckerdelta property)": [[185, "sympy.physics.secondquant.KroneckerDelta.is_below_fermi"]], "is_only_above_fermi (sympy.physics.secondquant.kroneckerdelta property)": [[185, "sympy.physics.secondquant.KroneckerDelta.is_only_above_fermi"]], "is_only_below_fermi (sympy.physics.secondquant.kroneckerdelta property)": [[185, "sympy.physics.secondquant.KroneckerDelta.is_only_below_fermi"]], "is_only_q_annihilator (sympy.physics.secondquant.annihilatefermion property)": [[185, "sympy.physics.secondquant.AnnihilateFermion.is_only_q_annihilator"]], "is_only_q_annihilator (sympy.physics.secondquant.createfermion property)": [[185, "sympy.physics.secondquant.CreateFermion.is_only_q_annihilator"]], "is_only_q_creator (sympy.physics.secondquant.annihilatefermion property)": [[185, "sympy.physics.secondquant.AnnihilateFermion.is_only_q_creator"]], "is_only_q_creator (sympy.physics.secondquant.createfermion property)": [[185, "sympy.physics.secondquant.CreateFermion.is_only_q_creator"]], "is_q_annihilator (sympy.physics.secondquant.annihilatefermion property)": [[185, "sympy.physics.secondquant.AnnihilateFermion.is_q_annihilator"]], "is_q_annihilator (sympy.physics.secondquant.createfermion property)": [[185, "sympy.physics.secondquant.CreateFermion.is_q_annihilator"]], "is_q_creator (sympy.physics.secondquant.annihilatefermion property)": [[185, "sympy.physics.secondquant.AnnihilateFermion.is_q_creator"]], "is_q_creator (sympy.physics.secondquant.createfermion property)": [[185, "sympy.physics.secondquant.CreateFermion.is_q_creator"]], "iter_q_annihilators() (sympy.physics.secondquant.no method)": [[185, "sympy.physics.secondquant.NO.iter_q_annihilators"]], "iter_q_creators() (sympy.physics.secondquant.no method)": [[185, "sympy.physics.secondquant.NO.iter_q_creators"]], "ket (sympy.physics.secondquant.innerproduct property)": [[185, "sympy.physics.secondquant.InnerProduct.ket"]], "killable_index (sympy.physics.secondquant.kroneckerdelta property)": [[185, "sympy.physics.secondquant.KroneckerDelta.killable_index"]], "lower (sympy.physics.secondquant.antisymmetrictensor property)": [[185, "sympy.physics.secondquant.AntiSymmetricTensor.lower"]], "matrix_rep() (in module sympy.physics.secondquant)": [[185, "sympy.physics.secondquant.matrix_rep"]], "preferred_index (sympy.physics.secondquant.kroneckerdelta property)": [[185, "sympy.physics.secondquant.KroneckerDelta.preferred_index"]], "simplify_index_permutations() (in module sympy.physics.secondquant)": [[185, "sympy.physics.secondquant.simplify_index_permutations"]], "state() (sympy.physics.secondquant.fixedbosonicbasis method)": [[185, "sympy.physics.secondquant.FixedBosonicBasis.state"]], "state() (sympy.physics.secondquant.varbosonicbasis method)": [[185, "sympy.physics.secondquant.VarBosonicBasis.state"]], "substitute_dummies() (in module sympy.physics.secondquant)": [[185, "sympy.physics.secondquant.substitute_dummies"]], "symbol (sympy.physics.secondquant.antisymmetrictensor property)": [[185, "sympy.physics.secondquant.AntiSymmetricTensor.symbol"]], "sympy.physics.secondquant": [[185, "module-sympy.physics.secondquant"]], "upper (sympy.physics.secondquant.antisymmetrictensor property)": [[185, "sympy.physics.secondquant.AntiSymmetricTensor.upper"]], "wicks() (in module sympy.physics.secondquant)": [[185, "sympy.physics.secondquant.wicks"]], "e_nl() (in module sympy.physics.sho)": [[186, "sympy.physics.sho.E_nl"]], "r_nl() (in module sympy.physics.sho)": [[186, "sympy.physics.sho.R_nl"]], "sympy.physics.sho": [[186, "module-sympy.physics.sho"]], "dimension (class in sympy.physics.units.dimensions)": [[187, "sympy.physics.units.dimensions.Dimension"]], "dimensionsystem (class in sympy.physics.units.dimensions)": [[187, "sympy.physics.units.dimensions.DimensionSystem"]], "can_transf_matrix (sympy.physics.units.dimensions.dimensionsystem property)": [[187, "sympy.physics.units.dimensions.DimensionSystem.can_transf_matrix"]], "dim (sympy.physics.units.dimensions.dimensionsystem property)": [[187, "sympy.physics.units.dimensions.DimensionSystem.dim"]], "dim_can_vector() (sympy.physics.units.dimensions.dimensionsystem method)": [[187, "sympy.physics.units.dimensions.DimensionSystem.dim_can_vector"]], "dim_vector() (sympy.physics.units.dimensions.dimensionsystem method)": [[187, "sympy.physics.units.dimensions.DimensionSystem.dim_vector"]], "has_integer_powers() (sympy.physics.units.dimensions.dimension method)": [[187, "sympy.physics.units.dimensions.Dimension.has_integer_powers"]], "inv_can_transf_matrix (sympy.physics.units.dimensions.dimensionsystem property)": [[187, "sympy.physics.units.dimensions.DimensionSystem.inv_can_transf_matrix"]], "is_consistent (sympy.physics.units.dimensions.dimensionsystem property)": [[187, "sympy.physics.units.dimensions.DimensionSystem.is_consistent"]], "is_dimensionless() (sympy.physics.units.dimensions.dimensionsystem method)": [[187, "sympy.physics.units.dimensions.DimensionSystem.is_dimensionless"]], "list_can_dims (sympy.physics.units.dimensions.dimensionsystem property)": [[187, "sympy.physics.units.dimensions.DimensionSystem.list_can_dims"]], "print_dim_base() (sympy.physics.units.dimensions.dimensionsystem method)": [[187, "sympy.physics.units.dimensions.DimensionSystem.print_dim_base"]], "sympy.physics.units.dimensions": [[187, "module-sympy.physics.units.dimensions"]], "prefix (class in sympy.physics.units.prefixes)": [[191, "sympy.physics.units.prefixes.Prefix"]], "sympy.physics.units.prefixes": [[191, "module-sympy.physics.units.prefixes"]], "quantity (class in sympy.physics.units.quantities)": [[192, "sympy.physics.units.quantities.Quantity"]], "abbrev (sympy.physics.units.quantities.quantity property)": [[192, "sympy.physics.units.quantities.Quantity.abbrev"]], "convert_to() (in module sympy.physics.units.util)": [[192, "sympy.physics.units.util.convert_to"]], "convert_to() (sympy.physics.units.quantities.quantity method)": [[192, "sympy.physics.units.quantities.Quantity.convert_to"]], "free_symbols (sympy.physics.units.quantities.quantity property)": [[192, "sympy.physics.units.quantities.Quantity.free_symbols"]], "is_prefixed (sympy.physics.units.quantities.quantity property)": [[192, "sympy.physics.units.quantities.Quantity.is_prefixed"]], "scale_factor (sympy.physics.units.quantities.quantity property)": [[192, "sympy.physics.units.quantities.Quantity.scale_factor"]], "set_global_relative_scale_factor() (sympy.physics.units.quantities.quantity method)": [[192, "sympy.physics.units.quantities.Quantity.set_global_relative_scale_factor"]], "sympy.physics.units.quantities": [[192, "module-sympy.physics.units.quantities"]], "sympy.physics.units.util": [[192, "module-sympy.physics.units.util"]], "unitsystem (class in sympy.physics.units.unitsystem)": [[193, "sympy.physics.units.unitsystem.UnitSystem"]], "dim (sympy.physics.units.unitsystem.unitsystem property)": [[193, "sympy.physics.units.unitsystem.UnitSystem.dim"]], "extend() (sympy.physics.units.unitsystem.unitsystem method)": [[193, "sympy.physics.units.unitsystem.UnitSystem.extend"]], "get_units_non_prefixed() (sympy.physics.units.unitsystem.unitsystem method)": [[193, "sympy.physics.units.unitsystem.UnitSystem.get_units_non_prefixed"]], "is_consistent (sympy.physics.units.unitsystem.unitsystem property)": [[193, "sympy.physics.units.unitsystem.UnitSystem.is_consistent"]], "sympy.physics.units.unitsystem": [[193, "module-sympy.physics.units.unitsystem"]], "coordinatesym (class in sympy.physics.vector.frame)": [[195, "sympy.physics.vector.frame.CoordinateSym"]], "dyadic (class in sympy.physics.vector.dyadic)": [[195, "sympy.physics.vector.dyadic.Dyadic"]], "referenceframe (class in sympy.physics.vector.frame)": [[195, "sympy.physics.vector.frame.ReferenceFrame"]], "vector (class in sympy.physics.vector.vector)": [[195, "sympy.physics.vector.vector.Vector"]], "ang_acc_in() (sympy.physics.vector.frame.referenceframe method)": [[195, "sympy.physics.vector.frame.ReferenceFrame.ang_acc_in"]], "ang_vel_in() (sympy.physics.vector.frame.referenceframe method)": [[195, "sympy.physics.vector.frame.ReferenceFrame.ang_vel_in"]], "angle_between() (sympy.physics.vector.vector.vector method)": [[195, "sympy.physics.vector.vector.Vector.angle_between"]], "applyfunc() (sympy.physics.vector.dyadic.dyadic method)": [[195, "sympy.physics.vector.dyadic.Dyadic.applyfunc"]], "applyfunc() (sympy.physics.vector.vector.vector method)": [[195, "sympy.physics.vector.vector.Vector.applyfunc"]], "cross() (sympy.physics.vector.dyadic.dyadic method)": [[195, "sympy.physics.vector.dyadic.Dyadic.cross"]], "cross() (sympy.physics.vector.vector.vector method)": [[195, "sympy.physics.vector.vector.Vector.cross"]], "dcm() (sympy.physics.vector.frame.referenceframe method)": [[195, "sympy.physics.vector.frame.ReferenceFrame.dcm"]], "diff() (sympy.physics.vector.vector.vector method)": [[195, "sympy.physics.vector.vector.Vector.diff"]], "doit() (sympy.physics.vector.dyadic.dyadic method)": [[195, "sympy.physics.vector.dyadic.Dyadic.doit"]], "doit() (sympy.physics.vector.vector.vector method)": [[195, "sympy.physics.vector.vector.Vector.doit"]], "dot() (sympy.physics.vector.dyadic.dyadic method)": [[195, "sympy.physics.vector.dyadic.Dyadic.dot"]], "dot() (sympy.physics.vector.vector.vector method)": [[195, "sympy.physics.vector.vector.Vector.dot"]], "dt() (sympy.physics.vector.dyadic.dyadic method)": [[195, "sympy.physics.vector.dyadic.Dyadic.dt"]], "dt() (sympy.physics.vector.vector.vector method)": [[195, "sympy.physics.vector.vector.Vector.dt"]], "express() (sympy.physics.vector.dyadic.dyadic method)": [[195, "sympy.physics.vector.dyadic.Dyadic.express"]], "express() (sympy.physics.vector.vector.vector method)": [[195, "sympy.physics.vector.vector.Vector.express"]], "free_dynamicsymbols() (sympy.physics.vector.vector.vector method)": [[195, "sympy.physics.vector.vector.Vector.free_dynamicsymbols"]], "free_symbols() (sympy.physics.vector.vector.vector method)": [[195, "sympy.physics.vector.vector.Vector.free_symbols"]], "func (sympy.physics.vector.dyadic.dyadic property)": [[195, "sympy.physics.vector.dyadic.Dyadic.func"]], "func (sympy.physics.vector.vector.vector property)": [[195, "sympy.physics.vector.vector.Vector.func"]], "magnitude() (sympy.physics.vector.vector.vector method)": [[195, "sympy.physics.vector.vector.Vector.magnitude"]], "normalize() (sympy.physics.vector.vector.vector method)": [[195, "sympy.physics.vector.vector.Vector.normalize"]], "orient() (sympy.physics.vector.frame.referenceframe method)": [[195, "sympy.physics.vector.frame.ReferenceFrame.orient"]], "orient_axis() (sympy.physics.vector.frame.referenceframe method)": [[195, "sympy.physics.vector.frame.ReferenceFrame.orient_axis"]], "orient_body_fixed() (sympy.physics.vector.frame.referenceframe method)": [[195, "sympy.physics.vector.frame.ReferenceFrame.orient_body_fixed"]], "orient_explicit() (sympy.physics.vector.frame.referenceframe method)": [[195, "sympy.physics.vector.frame.ReferenceFrame.orient_explicit"]], "orient_quaternion() (sympy.physics.vector.frame.referenceframe method)": [[195, "sympy.physics.vector.frame.ReferenceFrame.orient_quaternion"]], "orient_space_fixed() (sympy.physics.vector.frame.referenceframe method)": [[195, "sympy.physics.vector.frame.ReferenceFrame.orient_space_fixed"]], "orientnew() (sympy.physics.vector.frame.referenceframe method)": [[195, "sympy.physics.vector.frame.ReferenceFrame.orientnew"]], "outer() (sympy.physics.vector.vector.vector method)": [[195, "sympy.physics.vector.vector.Vector.outer"]], "partial_velocity() (sympy.physics.vector.frame.referenceframe method)": [[195, "sympy.physics.vector.frame.ReferenceFrame.partial_velocity"]], "separate() (sympy.physics.vector.vector.vector method)": [[195, "sympy.physics.vector.vector.Vector.separate"]], "set_ang_acc() (sympy.physics.vector.frame.referenceframe method)": [[195, "sympy.physics.vector.frame.ReferenceFrame.set_ang_acc"]], "set_ang_vel() (sympy.physics.vector.frame.referenceframe method)": [[195, "sympy.physics.vector.frame.ReferenceFrame.set_ang_vel"]], "simplify() (sympy.physics.vector.dyadic.dyadic method)": [[195, "sympy.physics.vector.dyadic.Dyadic.simplify"]], "simplify() (sympy.physics.vector.vector.vector method)": [[195, "sympy.physics.vector.vector.Vector.simplify"]], "subs() (sympy.physics.vector.dyadic.dyadic method)": [[195, "sympy.physics.vector.dyadic.Dyadic.subs"]], "subs() (sympy.physics.vector.vector.vector method)": [[195, "sympy.physics.vector.vector.Vector.subs"]], "to_matrix() (sympy.physics.vector.dyadic.dyadic method)": [[195, "sympy.physics.vector.dyadic.Dyadic.to_matrix"]], "to_matrix() (sympy.physics.vector.vector.vector method)": [[195, "sympy.physics.vector.vector.Vector.to_matrix"]], "u (sympy.physics.vector.frame.referenceframe property)": [[195, "sympy.physics.vector.frame.ReferenceFrame.u"]], "variable_map() (sympy.physics.vector.frame.referenceframe method)": [[195, "sympy.physics.vector.frame.ReferenceFrame.variable_map"]], "x (sympy.physics.vector.frame.referenceframe property)": [[195, "sympy.physics.vector.frame.ReferenceFrame.x"]], "xreplace() (sympy.physics.vector.dyadic.dyadic method)": [[195, "sympy.physics.vector.dyadic.Dyadic.xreplace"]], "xreplace() (sympy.physics.vector.vector.vector method)": [[195, "sympy.physics.vector.vector.Vector.xreplace"]], "xx (sympy.physics.vector.frame.referenceframe property)": [[195, "sympy.physics.vector.frame.ReferenceFrame.xx"]], "xy (sympy.physics.vector.frame.referenceframe property)": [[195, "sympy.physics.vector.frame.ReferenceFrame.xy"]], "xz (sympy.physics.vector.frame.referenceframe property)": [[195, "sympy.physics.vector.frame.ReferenceFrame.xz"]], "y (sympy.physics.vector.frame.referenceframe property)": [[195, "sympy.physics.vector.frame.ReferenceFrame.y"]], "yx (sympy.physics.vector.frame.referenceframe property)": [[195, "sympy.physics.vector.frame.ReferenceFrame.yx"]], "yy (sympy.physics.vector.frame.referenceframe property)": [[195, "sympy.physics.vector.frame.ReferenceFrame.yy"]], "yz (sympy.physics.vector.frame.referenceframe property)": [[195, "sympy.physics.vector.frame.ReferenceFrame.yz"]], "z (sympy.physics.vector.frame.referenceframe property)": [[195, "sympy.physics.vector.frame.ReferenceFrame.z"]], "zx (sympy.physics.vector.frame.referenceframe property)": [[195, "sympy.physics.vector.frame.ReferenceFrame.zx"]], "zy (sympy.physics.vector.frame.referenceframe property)": [[195, "sympy.physics.vector.frame.ReferenceFrame.zy"]], "zz (sympy.physics.vector.frame.referenceframe property)": [[195, "sympy.physics.vector.frame.ReferenceFrame.zz"]], "curl() (in module sympy.physics.vector.fieldfunctions)": [[196, "sympy.physics.vector.fieldfunctions.curl"]], "divergence() (in module sympy.physics.vector.fieldfunctions)": [[196, "sympy.physics.vector.fieldfunctions.divergence"]], "gradient() (in module sympy.physics.vector.fieldfunctions)": [[196, "sympy.physics.vector.fieldfunctions.gradient"]], "is_conservative() (in module sympy.physics.vector.fieldfunctions)": [[196, "sympy.physics.vector.fieldfunctions.is_conservative"]], "is_solenoidal() (in module sympy.physics.vector.fieldfunctions)": [[196, "sympy.physics.vector.fieldfunctions.is_solenoidal"]], "scalar_potential() (in module sympy.physics.vector.fieldfunctions)": [[196, "sympy.physics.vector.fieldfunctions.scalar_potential"]], "scalar_potential_difference() (in module sympy.physics.vector.fieldfunctions)": [[196, "sympy.physics.vector.fieldfunctions.scalar_potential_difference"]], "cross() (in module sympy.physics.vector.functions)": [[197, "sympy.physics.vector.functions.cross"]], "dot() (in module sympy.physics.vector.functions)": [[197, "sympy.physics.vector.functions.dot"]], "dynamicsymbols() (in module sympy.physics.vector)": [[197, "sympy.physics.vector.dynamicsymbols"]], "express() (in module sympy.physics.vector.functions)": [[197, "sympy.physics.vector.functions.express"]], "outer() (in module sympy.physics.vector.functions)": [[197, "sympy.physics.vector.functions.outer"]], "time_derivative() (in module sympy.physics.vector.functions)": [[197, "sympy.physics.vector.functions.time_derivative"]], "point (class in sympy.physics.vector.point)": [[199, "sympy.physics.vector.point.Point"]], "a1pt_theory() (sympy.physics.vector.point.point method)": [[199, "sympy.physics.vector.point.Point.a1pt_theory"]], "a2pt_theory() (sympy.physics.vector.point.point method)": [[199, "sympy.physics.vector.point.Point.a2pt_theory"]], "acc() (sympy.physics.vector.point.point method)": [[199, "sympy.physics.vector.point.Point.acc"]], "get_motion_params() (in module sympy.physics.vector.functions)": [[199, "sympy.physics.vector.functions.get_motion_params"]], "kinematic_equations() (in module sympy.physics.vector.functions)": [[199, "sympy.physics.vector.functions.kinematic_equations"]], "locatenew() (sympy.physics.vector.point.point method)": [[199, "sympy.physics.vector.point.Point.locatenew"]], "partial_velocity() (in module sympy.physics.vector.functions)": [[199, "sympy.physics.vector.functions.partial_velocity"]], "partial_velocity() (sympy.physics.vector.point.point method)": [[199, "sympy.physics.vector.point.Point.partial_velocity"]], "pos_from() (sympy.physics.vector.point.point method)": [[199, "sympy.physics.vector.point.Point.pos_from"]], "set_acc() (sympy.physics.vector.point.point method)": [[199, "sympy.physics.vector.point.Point.set_acc"]], "set_pos() (sympy.physics.vector.point.point method)": [[199, "sympy.physics.vector.point.Point.set_pos"]], "set_vel() (sympy.physics.vector.point.point method)": [[199, "sympy.physics.vector.point.Point.set_vel"]], "sympy.physics.vector.functions": [[199, "module-sympy.physics.vector.functions"]], "sympy.physics.vector.point": [[199, "module-sympy.physics.vector.point"]], "v1pt_theory() (sympy.physics.vector.point.point method)": [[199, "sympy.physics.vector.point.Point.v1pt_theory"]], "v2pt_theory() (sympy.physics.vector.point.point method)": [[199, "sympy.physics.vector.point.Point.v2pt_theory"]], "vel() (sympy.physics.vector.point.point method)": [[199, "sympy.physics.vector.point.Point.vel"]], "init_vprinting() (in module sympy.physics.vector.printing)": [[200, "sympy.physics.vector.printing.init_vprinting"]], "vlatex() (in module sympy.physics.vector.printing)": [[200, "sympy.physics.vector.printing.vlatex"]], "vpprint() (in module sympy.physics.vector.printing)": [[200, "sympy.physics.vector.printing.vpprint"]], "vprint() (in module sympy.physics.vector.printing)": [[200, "sympy.physics.vector.printing.vprint"]], "sympy.physics.vector": [[202, "module-sympy.physics.vector"]], "clebsch_gordan() (in module sympy.physics.wigner)": [[205, "sympy.physics.wigner.clebsch_gordan"]], "dot_rot_grad_ynm() (in module sympy.physics.wigner)": [[205, "sympy.physics.wigner.dot_rot_grad_Ynm"]], "gaunt() (in module sympy.physics.wigner)": [[205, "sympy.physics.wigner.gaunt"]], "racah() (in module sympy.physics.wigner)": [[205, "sympy.physics.wigner.racah"]], "real_gaunt() (in module sympy.physics.wigner)": [[205, "sympy.physics.wigner.real_gaunt"]], "sympy.physics.wigner": [[205, "module-sympy.physics.wigner"]], "wigner_3j() (in module sympy.physics.wigner)": [[205, "sympy.physics.wigner.wigner_3j"]], "wigner_6j() (in module sympy.physics.wigner)": [[205, "sympy.physics.wigner.wigner_6j"]], "wigner_9j() (in module sympy.physics.wigner)": [[205, "sympy.physics.wigner.wigner_9j"]], "wigner_d() (in module sympy.physics.wigner)": [[205, "sympy.physics.wigner.wigner_d"]], "wigner_d_small() (in module sympy.physics.wigner)": [[205, "sympy.physics.wigner.wigner_d_small"]], "baseseries (class in sympy.plotting.series)": [[206, "sympy.plotting.series.BaseSeries"]], "implicitseries (class in sympy.plotting.series)": [[206, "sympy.plotting.series.ImplicitSeries"]], "line2dbaseseries (class in sympy.plotting.series)": [[206, "sympy.plotting.series.Line2DBaseSeries"]], "line3dbaseseries (class in sympy.plotting.series)": [[206, "sympy.plotting.series.Line3DBaseSeries"]], "lineover1drangeseries (class in sympy.plotting.series)": [[206, "sympy.plotting.series.LineOver1DRangeSeries"]], "matplotlibbackend (class in sympy.plotting.plot)": [[206, "sympy.plotting.plot.MatplotlibBackend"]], "parametric2dlineseries (class in sympy.plotting.series)": [[206, "sympy.plotting.series.Parametric2DLineSeries"]], "parametric3dlineseries (class in sympy.plotting.series)": [[206, "sympy.plotting.series.Parametric3DLineSeries"]], "parametricsurfaceseries (class in sympy.plotting.series)": [[206, "sympy.plotting.series.ParametricSurfaceSeries"]], "plot (class in sympy.plotting.plot)": [[206, "sympy.plotting.plot.Plot"]], "plotgrid (class in sympy.plotting.plot)": [[206, "sympy.plotting.plot.PlotGrid"]], "surfacebaseseries (class in sympy.plotting.series)": [[206, "sympy.plotting.series.SurfaceBaseSeries"]], "surfaceover2drangeseries (class in sympy.plotting.series)": [[206, "sympy.plotting.series.SurfaceOver2DRangeSeries"]], "textbackend (class in sympy.plotting.plot)": [[206, "sympy.plotting.plot.TextBackend"]], "annotations (sympy.plotting.plot.plot property)": [[206, "sympy.plotting.plot.Plot.annotations"]], "append() (sympy.plotting.plot.plot method)": [[206, "sympy.plotting.plot.Plot.append"]], "eval_color_func() (sympy.plotting.series.baseseries method)": [[206, "sympy.plotting.series.BaseSeries.eval_color_func"]], "expr (sympy.plotting.series.baseseries property)": [[206, "sympy.plotting.series.BaseSeries.expr"]], "extend() (sympy.plotting.plot.plot method)": [[206, "sympy.plotting.plot.Plot.extend"]], "fill (sympy.plotting.plot.plot property)": [[206, "sympy.plotting.plot.Plot.fill"]], "get_data() (sympy.plotting.series.baseseries method)": [[206, "sympy.plotting.series.BaseSeries.get_data"]], "get_data() (sympy.plotting.series.implicitseries method)": [[206, "sympy.plotting.series.ImplicitSeries.get_data"]], "get_data() (sympy.plotting.series.line2dbaseseries method)": [[206, "sympy.plotting.series.Line2DBaseSeries.get_data"]], "get_data() (sympy.plotting.series.parametricsurfaceseries method)": [[206, "sympy.plotting.series.ParametricSurfaceSeries.get_data"]], "get_data() (sympy.plotting.series.surfaceover2drangeseries method)": [[206, "sympy.plotting.series.SurfaceOver2DRangeSeries.get_data"]], "get_label() (sympy.plotting.series.baseseries method)": [[206, "sympy.plotting.series.BaseSeries.get_label"]], "get_label() (sympy.plotting.series.implicitseries method)": [[206, "sympy.plotting.series.ImplicitSeries.get_label"]], "get_meshes() (sympy.plotting.series.parametricsurfaceseries method)": [[206, "sympy.plotting.series.ParametricSurfaceSeries.get_meshes"]], "get_meshes() (sympy.plotting.series.surfaceover2drangeseries method)": [[206, "sympy.plotting.series.SurfaceOver2DRangeSeries.get_meshes"]], "get_points() (sympy.plotting.series.lineover1drangeseries method)": [[206, "sympy.plotting.series.LineOver1DRangeSeries.get_points"]], "get_segments() (sympy.plotting.plot.matplotlibbackend static method)": [[206, "sympy.plotting.plot.MatplotlibBackend.get_segments"]], "markers (sympy.plotting.plot.plot property)": [[206, "sympy.plotting.plot.Plot.markers"]], "n (sympy.plotting.series.baseseries property)": [[206, "sympy.plotting.series.BaseSeries.n"]], "params (sympy.plotting.series.baseseries property)": [[206, "sympy.plotting.series.BaseSeries.params"]], "plot() (in module sympy.plotting.plot)": [[206, "sympy.plotting.plot.plot"]], "plot3d() (in module sympy.plotting.plot)": [[206, "sympy.plotting.plot.plot3d"]], "plot3d_parametric_line() (in module sympy.plotting.plot)": [[206, "sympy.plotting.plot.plot3d_parametric_line"]], "plot3d_parametric_surface() (in module sympy.plotting.plot)": [[206, "sympy.plotting.plot.plot3d_parametric_surface"]], "plot_implicit() (in module sympy.plotting.plot_implicit)": [[206, "sympy.plotting.plot_implicit.plot_implicit"]], "plot_parametric() (in module sympy.plotting.plot)": [[206, "sympy.plotting.plot.plot_parametric"]], "process_series() (sympy.plotting.plot.matplotlibbackend method)": [[206, "sympy.plotting.plot.MatplotlibBackend.process_series"]], "rectangles (sympy.plotting.plot.plot property)": [[206, "sympy.plotting.plot.Plot.rectangles"]], "sympy.plotting.plot": [[206, "module-sympy.plotting.plot"]], "sympy.plotting.pygletplot": [[206, "module-sympy.plotting.pygletplot"]], "textplot() (in module sympy.plotting.textplot)": [[206, "sympy.plotting.textplot.textplot"]], "extensionelement (class in sympy.polys.agca.extensions)": [[207, "sympy.polys.agca.extensions.ExtensionElement"]], "freemodule (class in sympy.polys.agca.modules)": [[207, "sympy.polys.agca.modules.FreeModule"]], "freemoduleelement (class in sympy.polys.agca.modules)": [[207, "sympy.polys.agca.modules.FreeModuleElement"]], "ideal (class in sympy.polys.agca.ideals)": [[207, "sympy.polys.agca.ideals.Ideal"]], "module (class in sympy.polys.agca.modules)": [[207, "sympy.polys.agca.modules.Module"]], "modulehomomorphism (class in sympy.polys.agca.homomorphisms)": [[207, "sympy.polys.agca.homomorphisms.ModuleHomomorphism"]], "monogenicfiniteextension (class in sympy.polys.agca.extensions)": [[207, "sympy.polys.agca.extensions.MonogenicFiniteExtension"]], "quotientmodule (class in sympy.polys.agca.modules)": [[207, "sympy.polys.agca.modules.QuotientModule"]], "quotientmoduleelement (class in sympy.polys.agca.modules)": [[207, "sympy.polys.agca.modules.QuotientModuleElement"]], "submodule (class in sympy.polys.agca.modules)": [[207, "sympy.polys.agca.modules.SubModule"]], "subquotientmodule (class in sympy.polys.agca.modules)": [[207, "sympy.polys.agca.modules.SubQuotientModule"]], "basis() (sympy.polys.agca.modules.freemodule method)": [[207, "sympy.polys.agca.modules.FreeModule.basis"]], "contains() (sympy.polys.agca.ideals.ideal method)": [[207, "sympy.polys.agca.ideals.Ideal.contains"]], "contains() (sympy.polys.agca.modules.module method)": [[207, "sympy.polys.agca.modules.Module.contains"]], "convert() (sympy.polys.agca.modules.freemodule method)": [[207, "sympy.polys.agca.modules.FreeModule.convert"]], "convert() (sympy.polys.agca.modules.module method)": [[207, "sympy.polys.agca.modules.Module.convert"]], "convert() (sympy.polys.agca.modules.quotientmodule method)": [[207, "sympy.polys.agca.modules.QuotientModule.convert"]], "convert() (sympy.polys.agca.modules.submodule method)": [[207, "sympy.polys.agca.modules.SubModule.convert"]], "depth() (sympy.polys.agca.ideals.ideal method)": [[207, "sympy.polys.agca.ideals.Ideal.depth"]], "dtype (sympy.polys.agca.extensions.monogenicfiniteextension attribute)": [[207, "sympy.polys.agca.extensions.MonogenicFiniteExtension.dtype"]], "dtype (sympy.polys.agca.modules.freemodule attribute)": [[207, "sympy.polys.agca.modules.FreeModule.dtype"]], "dtype (sympy.polys.agca.modules.quotientmodule attribute)": [[207, "sympy.polys.agca.modules.QuotientModule.dtype"]], "eq() (sympy.polys.agca.modules.quotientmoduleelement method)": [[207, "sympy.polys.agca.modules.QuotientModuleElement.eq"]], "height() (sympy.polys.agca.ideals.ideal method)": [[207, "sympy.polys.agca.ideals.Ideal.height"]], "homomorphism() (in module sympy.polys.agca.homomorphisms)": [[207, "sympy.polys.agca.homomorphisms.homomorphism"]], "identity_hom() (sympy.polys.agca.modules.freemodule method)": [[207, "sympy.polys.agca.modules.FreeModule.identity_hom"]], "identity_hom() (sympy.polys.agca.modules.module method)": [[207, "sympy.polys.agca.modules.Module.identity_hom"]], "identity_hom() (sympy.polys.agca.modules.quotientmodule method)": [[207, "sympy.polys.agca.modules.QuotientModule.identity_hom"]], "identity_hom() (sympy.polys.agca.modules.submodule method)": [[207, "sympy.polys.agca.modules.SubModule.identity_hom"]], "image() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[207, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.image"]], "in_terms_of_generators() (sympy.polys.agca.modules.submodule method)": [[207, "sympy.polys.agca.modules.SubModule.in_terms_of_generators"]], "inclusion_hom() (sympy.polys.agca.modules.submodule method)": [[207, "sympy.polys.agca.modules.SubModule.inclusion_hom"]], "intersect() (sympy.polys.agca.ideals.ideal method)": [[207, "sympy.polys.agca.ideals.Ideal.intersect"]], "intersect() (sympy.polys.agca.modules.submodule method)": [[207, "sympy.polys.agca.modules.SubModule.intersect"]], "inverse() (sympy.polys.agca.extensions.extensionelement method)": [[207, "sympy.polys.agca.extensions.ExtensionElement.inverse"]], "is_full_module() (sympy.polys.agca.modules.submodule method)": [[207, "sympy.polys.agca.modules.SubModule.is_full_module"]], "is_full_module() (sympy.polys.agca.modules.subquotientmodule method)": [[207, "sympy.polys.agca.modules.SubQuotientModule.is_full_module"]], "is_injective() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[207, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.is_injective"]], "is_isomorphism() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[207, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.is_isomorphism"]], "is_maximal() (sympy.polys.agca.ideals.ideal method)": [[207, "sympy.polys.agca.ideals.Ideal.is_maximal"]], "is_primary() (sympy.polys.agca.ideals.ideal method)": [[207, "sympy.polys.agca.ideals.Ideal.is_primary"]], "is_prime() (sympy.polys.agca.ideals.ideal method)": [[207, "sympy.polys.agca.ideals.Ideal.is_prime"]], "is_principal() (sympy.polys.agca.ideals.ideal method)": [[207, "sympy.polys.agca.ideals.Ideal.is_principal"]], "is_radical() (sympy.polys.agca.ideals.ideal method)": [[207, "sympy.polys.agca.ideals.Ideal.is_radical"]], "is_submodule() (sympy.polys.agca.modules.freemodule method)": [[207, "sympy.polys.agca.modules.FreeModule.is_submodule"]], "is_submodule() (sympy.polys.agca.modules.module method)": [[207, "sympy.polys.agca.modules.Module.is_submodule"]], "is_submodule() (sympy.polys.agca.modules.quotientmodule method)": [[207, "sympy.polys.agca.modules.QuotientModule.is_submodule"]], "is_submodule() (sympy.polys.agca.modules.submodule method)": [[207, "sympy.polys.agca.modules.SubModule.is_submodule"]], "is_surjective() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[207, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.is_surjective"]], "is_whole_ring() (sympy.polys.agca.ideals.ideal method)": [[207, "sympy.polys.agca.ideals.Ideal.is_whole_ring"]], "is_zero() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[207, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.is_zero"]], "is_zero() (sympy.polys.agca.ideals.ideal method)": [[207, "sympy.polys.agca.ideals.Ideal.is_zero"]], "is_zero() (sympy.polys.agca.modules.freemodule method)": [[207, "sympy.polys.agca.modules.FreeModule.is_zero"]], "is_zero() (sympy.polys.agca.modules.module method)": [[207, "sympy.polys.agca.modules.Module.is_zero"]], "is_zero() (sympy.polys.agca.modules.quotientmodule method)": [[207, "sympy.polys.agca.modules.QuotientModule.is_zero"]], "is_zero() (sympy.polys.agca.modules.submodule method)": [[207, "sympy.polys.agca.modules.SubModule.is_zero"]], "kernel() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[207, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.kernel"]], "module_quotient() (sympy.polys.agca.modules.submodule method)": [[207, "sympy.polys.agca.modules.SubModule.module_quotient"]], "multiply_ideal() (sympy.polys.agca.modules.freemodule method)": [[207, "sympy.polys.agca.modules.FreeModule.multiply_ideal"]], "multiply_ideal() (sympy.polys.agca.modules.module method)": [[207, "sympy.polys.agca.modules.Module.multiply_ideal"]], "multiply_ideal() (sympy.polys.agca.modules.submodule method)": [[207, "sympy.polys.agca.modules.SubModule.multiply_ideal"]], "product() (sympy.polys.agca.ideals.ideal method)": [[207, "sympy.polys.agca.ideals.Ideal.product"]], "quotient() (sympy.polys.agca.ideals.ideal method)": [[207, "sympy.polys.agca.ideals.Ideal.quotient"]], "quotient_codomain() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[207, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.quotient_codomain"]], "quotient_domain() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[207, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.quotient_domain"]], "quotient_hom() (sympy.polys.agca.modules.quotientmodule method)": [[207, "sympy.polys.agca.modules.QuotientModule.quotient_hom"]], "quotient_hom() (sympy.polys.agca.modules.subquotientmodule method)": [[207, "sympy.polys.agca.modules.SubQuotientModule.quotient_hom"]], "quotient_module() (sympy.polys.agca.modules.freemodule method)": [[207, "sympy.polys.agca.modules.FreeModule.quotient_module"]], "quotient_module() (sympy.polys.agca.modules.module method)": [[207, "sympy.polys.agca.modules.Module.quotient_module"]], "quotient_module() (sympy.polys.agca.modules.submodule method)": [[207, "sympy.polys.agca.modules.SubModule.quotient_module"]], "radical() (sympy.polys.agca.ideals.ideal method)": [[207, "sympy.polys.agca.ideals.Ideal.radical"]], "reduce_element() (sympy.polys.agca.ideals.ideal method)": [[207, "sympy.polys.agca.ideals.Ideal.reduce_element"]], "reduce_element() (sympy.polys.agca.modules.submodule method)": [[207, "sympy.polys.agca.modules.SubModule.reduce_element"]], "restrict_codomain() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[207, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.restrict_codomain"]], "restrict_domain() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[207, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.restrict_domain"]], "saturate() (sympy.polys.agca.ideals.ideal method)": [[207, "sympy.polys.agca.ideals.Ideal.saturate"]], "submodule() (sympy.polys.agca.modules.module method)": [[207, "sympy.polys.agca.modules.Module.submodule"]], "submodule() (sympy.polys.agca.modules.quotientmodule method)": [[207, "sympy.polys.agca.modules.QuotientModule.submodule"]], "submodule() (sympy.polys.agca.modules.submodule method)": [[207, "sympy.polys.agca.modules.SubModule.submodule"]], "subset() (sympy.polys.agca.ideals.ideal method)": [[207, "sympy.polys.agca.ideals.Ideal.subset"]], "subset() (sympy.polys.agca.modules.module method)": [[207, "sympy.polys.agca.modules.Module.subset"]], "syzygy_module() (sympy.polys.agca.modules.submodule method)": [[207, "sympy.polys.agca.modules.SubModule.syzygy_module"]], "union() (sympy.polys.agca.ideals.ideal method)": [[207, "sympy.polys.agca.ideals.Ideal.union"]], "union() (sympy.polys.agca.modules.submodule method)": [[207, "sympy.polys.agca.modules.SubModule.union"]], "ddm (class in sympy.polys.matrices.ddm)": [[209, "sympy.polys.matrices.ddm.DDM"]], "dfm (class in sympy.polys.matrices._dfm)": [[209, "sympy.polys.matrices._dfm.DFM"]], "dm() (in module sympy.polys.matrices.domainmatrix)": [[209, "sympy.polys.matrices.domainmatrix.DM"]], "domainmatrix (class in sympy.polys.matrices.domainmatrix)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix"]], "r (class in sympy.polys.matrices.dense)": [[209, "sympy.polys.matrices.dense.R"]], "ringelement (class in sympy.polys.matrices._typing)": [[209, "sympy.polys.matrices._typing.RingElement"]], "sdm (class in sympy.polys.matrices.sdm)": [[209, "sympy.polys.matrices.sdm.SDM"]], "t (class in sympy.polys.matrices.dense)": [[209, "sympy.polys.matrices.dense.T"]], "add() (sympy.polys.matrices._dfm.dfm method)": [[209, "sympy.polys.matrices._dfm.DFM.add"]], "add() (sympy.polys.matrices.ddm.ddm method)": [[209, "sympy.polys.matrices.ddm.DDM.add"]], "add() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.add"]], "add() (sympy.polys.matrices.sdm.sdm method)": [[209, "sympy.polys.matrices.sdm.SDM.add"]], "adj_det() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.adj_det"]], "adj_poly_det() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.adj_poly_det"]], "adjugate() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.adjugate"]], "applyfunc() (sympy.polys.matrices._dfm.dfm method)": [[209, "sympy.polys.matrices._dfm.DFM.applyfunc"]], "cancel_denom() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.cancel_denom"]], "cancel_denom_elementwise() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.cancel_denom_elementwise"]], "charpoly() (sympy.polys.matrices._dfm.dfm method)": [[209, "sympy.polys.matrices._dfm.DFM.charpoly"]], "charpoly() (sympy.polys.matrices.ddm.ddm method)": [[209, "sympy.polys.matrices.ddm.DDM.charpoly"]], "charpoly() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly"]], "charpoly() (sympy.polys.matrices.sdm.sdm method)": [[209, "sympy.polys.matrices.sdm.SDM.charpoly"]], "charpoly_base() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly_base"]], "charpoly_berk() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly_berk"]], "charpoly_factor_blocks() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly_factor_blocks"]], "charpoly_factor_list() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly_factor_list"]], "choose_domain() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.choose_domain"]], "clear_denoms() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.clear_denoms"]], "columnspace() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.columnspace"]], "content() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.content"]], "convert_to() (sympy.polys.matrices._dfm.dfm method)": [[209, "sympy.polys.matrices._dfm.DFM.convert_to"]], "convert_to() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.convert_to"]], "convert_to() (sympy.polys.matrices.sdm.sdm method)": [[209, "sympy.polys.matrices.sdm.SDM.convert_to"]], "copy() (sympy.polys.matrices._dfm.dfm method)": [[209, "sympy.polys.matrices._dfm.DFM.copy"]], "copy() (sympy.polys.matrices.sdm.sdm method)": [[209, "sympy.polys.matrices.sdm.SDM.copy"]], "ddm_berk() (in module sympy.polys.matrices.dense)": [[209, "sympy.polys.matrices.dense.ddm_berk"]], "ddm_iadd() (in module sympy.polys.matrices.dense)": [[209, "sympy.polys.matrices.dense.ddm_iadd"]], "ddm_idet() (in module sympy.polys.matrices.dense)": [[209, "sympy.polys.matrices.dense.ddm_idet"]], "ddm_iinv() (in module sympy.polys.matrices.dense)": [[209, "sympy.polys.matrices.dense.ddm_iinv"]], "ddm_ilu() (in module sympy.polys.matrices.dense)": [[209, "sympy.polys.matrices.dense.ddm_ilu"]], "ddm_ilu_solve() (in module sympy.polys.matrices.dense)": [[209, "sympy.polys.matrices.dense.ddm_ilu_solve"]], "ddm_ilu_split() (in module sympy.polys.matrices.dense)": [[209, "sympy.polys.matrices.dense.ddm_ilu_split"]], "ddm_imatmul() (in module sympy.polys.matrices.dense)": [[209, "sympy.polys.matrices.dense.ddm_imatmul"]], "ddm_imul() (in module sympy.polys.matrices.dense)": [[209, "sympy.polys.matrices.dense.ddm_imul"]], "ddm_ineg() (in module sympy.polys.matrices.dense)": [[209, "sympy.polys.matrices.dense.ddm_ineg"]], "ddm_irmul() (in module sympy.polys.matrices.dense)": [[209, "sympy.polys.matrices.dense.ddm_irmul"]], "ddm_irref() (in module sympy.polys.matrices.dense)": [[209, "sympy.polys.matrices.dense.ddm_irref"]], "ddm_irref_den() (in module sympy.polys.matrices.dense)": [[209, "sympy.polys.matrices.dense.ddm_irref_den"]], "ddm_isub() (in module sympy.polys.matrices.dense)": [[209, "sympy.polys.matrices.dense.ddm_isub"]], "ddm_transpose() (in module sympy.polys.matrices.dense)": [[209, "sympy.polys.matrices.dense.ddm_transpose"]], "det() (sympy.polys.matrices._dfm.dfm method)": [[209, "sympy.polys.matrices._dfm.DFM.det"]], "det() (sympy.polys.matrices.ddm.ddm method)": [[209, "sympy.polys.matrices.ddm.DDM.det"]], "det() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.det"]], "det() (sympy.polys.matrices.sdm.sdm method)": [[209, "sympy.polys.matrices.sdm.SDM.det"]], "diag() (sympy.polys.matrices._dfm.dfm class method)": [[209, "sympy.polys.matrices._dfm.DFM.diag"]], "diag() (sympy.polys.matrices.ddm.ddm class method)": [[209, "sympy.polys.matrices.ddm.DDM.diag"]], "diag() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.diag"]], "diagonal() (sympy.polys.matrices._dfm.dfm method)": [[209, "sympy.polys.matrices._dfm.DFM.diagonal"]], "diagonal() (sympy.polys.matrices.ddm.ddm method)": [[209, "sympy.polys.matrices.ddm.DDM.diagonal"]], "diagonal() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.diagonal"]], "diagonal() (sympy.polys.matrices.sdm.sdm method)": [[209, "sympy.polys.matrices.sdm.SDM.diagonal"]], "eval_poly() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.eval_poly"]], "eval_poly_mul() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.eval_poly_mul"]], "extract() (sympy.polys.matrices._dfm.dfm method)": [[209, "sympy.polys.matrices._dfm.DFM.extract"]], "extract_slice() (sympy.polys.matrices._dfm.dfm method)": [[209, "sympy.polys.matrices._dfm.DFM.extract_slice"]], "eye() (sympy.polys.matrices._dfm.dfm class method)": [[209, "sympy.polys.matrices._dfm.DFM.eye"]], "eye() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.eye"]], "eye() (sympy.polys.matrices.sdm.sdm class method)": [[209, "sympy.polys.matrices.sdm.SDM.eye"]], "from_matrix() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_Matrix"]], "from_ddm() (sympy.polys.matrices._dfm.dfm class method)": [[209, "sympy.polys.matrices._dfm.DFM.from_ddm"]], "from_ddm() (sympy.polys.matrices.sdm.sdm class method)": [[209, "sympy.polys.matrices.sdm.SDM.from_ddm"]], "from_dict_sympy() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_dict_sympy"]], "from_dok() (sympy.polys.matrices.ddm.ddm class method)": [[209, "sympy.polys.matrices.ddm.DDM.from_dok"]], "from_dok() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_dok"]], "from_dok() (sympy.polys.matrices.sdm.sdm class method)": [[209, "sympy.polys.matrices.sdm.SDM.from_dok"]], "from_flat_nz() (sympy.polys.matrices._dfm.dfm class method)": [[209, "sympy.polys.matrices._dfm.DFM.from_flat_nz"]], "from_flat_nz() (sympy.polys.matrices.ddm.ddm class method)": [[209, "sympy.polys.matrices.ddm.DDM.from_flat_nz"]], "from_flat_nz() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_flat_nz"]], "from_flat_nz() (sympy.polys.matrices.sdm.sdm class method)": [[209, "sympy.polys.matrices.sdm.SDM.from_flat_nz"]], "from_list() (sympy.polys.matrices._dfm.dfm class method)": [[209, "sympy.polys.matrices._dfm.DFM.from_list"]], "from_list() (sympy.polys.matrices.ddm.ddm class method)": [[209, "sympy.polys.matrices.ddm.DDM.from_list"]], "from_list() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_list"]], "from_list() (sympy.polys.matrices.sdm.sdm class method)": [[209, "sympy.polys.matrices.sdm.SDM.from_list"]], "from_list_flat() (sympy.polys.matrices._dfm.dfm class method)": [[209, "sympy.polys.matrices._dfm.DFM.from_list_flat"]], "from_list_flat() (sympy.polys.matrices.ddm.ddm class method)": [[209, "sympy.polys.matrices.ddm.DDM.from_list_flat"]], "from_list_flat() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_list_flat"]], "from_list_flat() (sympy.polys.matrices.sdm.sdm class method)": [[209, "sympy.polys.matrices.sdm.SDM.from_list_flat"]], "from_list_sympy() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_list_sympy"]], "from_rep() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_rep"]], "getitem() (sympy.polys.matrices._dfm.dfm method)": [[209, "sympy.polys.matrices._dfm.DFM.getitem"]], "hermite_normal_form() (in module sympy.polys.matrices.normalforms)": [[209, "sympy.polys.matrices.normalforms.hermite_normal_form"]], "hstack() (sympy.polys.matrices._dfm.dfm method)": [[209, "sympy.polys.matrices._dfm.DFM.hstack"]], "hstack() (sympy.polys.matrices.ddm.ddm method)": [[209, "sympy.polys.matrices.ddm.DDM.hstack"]], "hstack() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.hstack"]], "hstack() (sympy.polys.matrices.sdm.sdm method)": [[209, "sympy.polys.matrices.sdm.SDM.hstack"]], "inv() (sympy.polys.matrices._dfm.dfm method)": [[209, "sympy.polys.matrices._dfm.DFM.inv"]], "inv() (sympy.polys.matrices.ddm.ddm method)": [[209, "sympy.polys.matrices.ddm.DDM.inv"]], "inv() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.inv"]], "inv() (sympy.polys.matrices.sdm.sdm method)": [[209, "sympy.polys.matrices.sdm.SDM.inv"]], "inv_den() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.inv_den"]], "is_diagonal (sympy.polys.matrices.domainmatrix.domainmatrix property)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.is_diagonal"]], "is_diagonal() (sympy.polys.matrices._dfm.dfm method)": [[209, "sympy.polys.matrices._dfm.DFM.is_diagonal"]], "is_diagonal() (sympy.polys.matrices.ddm.ddm method)": [[209, "sympy.polys.matrices.ddm.DDM.is_diagonal"]], "is_diagonal() (sympy.polys.matrices.sdm.sdm method)": [[209, "sympy.polys.matrices.sdm.SDM.is_diagonal"]], "is_lower (sympy.polys.matrices.domainmatrix.domainmatrix property)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.is_lower"]], "is_lower() (sympy.polys.matrices._dfm.dfm method)": [[209, "sympy.polys.matrices._dfm.DFM.is_lower"]], "is_lower() (sympy.polys.matrices.ddm.ddm method)": [[209, "sympy.polys.matrices.ddm.DDM.is_lower"]], "is_lower() (sympy.polys.matrices.sdm.sdm method)": [[209, "sympy.polys.matrices.sdm.SDM.is_lower"]], "is_square (sympy.polys.matrices.domainmatrix.domainmatrix property)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.is_square"]], "is_upper (sympy.polys.matrices.domainmatrix.domainmatrix property)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.is_upper"]], "is_upper() (sympy.polys.matrices._dfm.dfm method)": [[209, "sympy.polys.matrices._dfm.DFM.is_upper"]], "is_upper() (sympy.polys.matrices.ddm.ddm method)": [[209, "sympy.polys.matrices.ddm.DDM.is_upper"]], "is_upper() (sympy.polys.matrices.sdm.sdm method)": [[209, "sympy.polys.matrices.sdm.SDM.is_upper"]], "is_zero_matrix() (sympy.polys.matrices._dfm.dfm method)": [[209, "sympy.polys.matrices._dfm.DFM.is_zero_matrix"]], "is_zero_matrix() (sympy.polys.matrices.ddm.ddm method)": [[209, "sympy.polys.matrices.ddm.DDM.is_zero_matrix"]], "is_zero_matrix() (sympy.polys.matrices.sdm.sdm method)": [[209, "sympy.polys.matrices.sdm.SDM.is_zero_matrix"]], "lll() (sympy.polys.matrices._dfm.dfm method)": [[209, "sympy.polys.matrices._dfm.DFM.lll"]], "lll() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.lll"]], "lll() (sympy.polys.matrices.sdm.sdm method)": [[209, "sympy.polys.matrices.sdm.SDM.lll"]], "lll_transform() (sympy.polys.matrices._dfm.dfm method)": [[209, "sympy.polys.matrices._dfm.DFM.lll_transform"]], "lll_transform() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.lll_transform"]], "lll_transform() (sympy.polys.matrices.sdm.sdm method)": [[209, "sympy.polys.matrices.sdm.SDM.lll_transform"]], "lu() (sympy.polys.matrices._dfm.dfm method)": [[209, "sympy.polys.matrices._dfm.DFM.lu"]], "lu() (sympy.polys.matrices.ddm.ddm method)": [[209, "sympy.polys.matrices.ddm.DDM.lu"]], "lu() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.lu"]], "lu() (sympy.polys.matrices.sdm.sdm method)": [[209, "sympy.polys.matrices.sdm.SDM.lu"]], "lu_solve() (sympy.polys.matrices._dfm.dfm method)": [[209, "sympy.polys.matrices._dfm.DFM.lu_solve"]], "lu_solve() (sympy.polys.matrices.ddm.ddm method)": [[209, "sympy.polys.matrices.ddm.DDM.lu_solve"]], "lu_solve() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.lu_solve"]], "lu_solve() (sympy.polys.matrices.sdm.sdm method)": [[209, "sympy.polys.matrices.sdm.SDM.lu_solve"]], "matmul() (sympy.polys.matrices._dfm.dfm method)": [[209, "sympy.polys.matrices._dfm.DFM.matmul"]], "matmul() (sympy.polys.matrices.ddm.ddm method)": [[209, "sympy.polys.matrices.ddm.DDM.matmul"]], "matmul() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.matmul"]], "matmul() (sympy.polys.matrices.sdm.sdm method)": [[209, "sympy.polys.matrices.sdm.SDM.matmul"]], "mul() (sympy.polys.matrices._dfm.dfm method)": [[209, "sympy.polys.matrices._dfm.DFM.mul"]], "mul() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.mul"]], "mul() (sympy.polys.matrices.sdm.sdm method)": [[209, "sympy.polys.matrices.sdm.SDM.mul"]], "mul_elementwise() (sympy.polys.matrices._dfm.dfm method)": [[209, "sympy.polys.matrices._dfm.DFM.mul_elementwise"]], "neg() (sympy.polys.matrices._dfm.dfm method)": [[209, "sympy.polys.matrices._dfm.DFM.neg"]], "neg() (sympy.polys.matrices.ddm.ddm method)": [[209, "sympy.polys.matrices.ddm.DDM.neg"]], "neg() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.neg"]], "neg() (sympy.polys.matrices.sdm.sdm method)": [[209, "sympy.polys.matrices.sdm.SDM.neg"]], "new() (sympy.polys.matrices.sdm.sdm class method)": [[209, "sympy.polys.matrices.sdm.SDM.new"]], "nnz() (sympy.polys.matrices._dfm.dfm method)": [[209, "sympy.polys.matrices._dfm.DFM.nnz"]], "nnz() (sympy.polys.matrices.ddm.ddm method)": [[209, "sympy.polys.matrices.ddm.DDM.nnz"]], "nnz() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.nnz"]], "nnz() (sympy.polys.matrices.sdm.sdm method)": [[209, "sympy.polys.matrices.sdm.SDM.nnz"]], "nullspace() (sympy.polys.matrices._dfm.dfm method)": [[209, "sympy.polys.matrices._dfm.DFM.nullspace"]], "nullspace() (sympy.polys.matrices.ddm.ddm method)": [[209, "sympy.polys.matrices.ddm.DDM.nullspace"]], "nullspace() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.nullspace"]], "nullspace() (sympy.polys.matrices.sdm.sdm method)": [[209, "sympy.polys.matrices.sdm.SDM.nullspace"]], "nullspace_from_rref() (sympy.polys.matrices._dfm.dfm method)": [[209, "sympy.polys.matrices._dfm.DFM.nullspace_from_rref"]], "nullspace_from_rref() (sympy.polys.matrices.ddm.ddm method)": [[209, "sympy.polys.matrices.ddm.DDM.nullspace_from_rref"]], "nullspace_from_rref() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.nullspace_from_rref"]], "nullspace_from_rref() (sympy.polys.matrices.sdm.sdm method)": [[209, "sympy.polys.matrices.sdm.SDM.nullspace_from_rref"]], "ones() (sympy.polys.matrices._dfm.dfm class method)": [[209, "sympy.polys.matrices._dfm.DFM.ones"]], "ones() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.ones"]], "particular() (sympy.polys.matrices._dfm.dfm method)": [[209, "sympy.polys.matrices._dfm.DFM.particular"]], "pow() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.pow"]], "primitive() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.primitive"]], "rmul() (sympy.polys.matrices._dfm.dfm method)": [[209, "sympy.polys.matrices._dfm.DFM.rmul"]], "rowspace() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.rowspace"]], "rref() (sympy.polys.matrices.ddm.ddm method)": [[209, "sympy.polys.matrices.ddm.DDM.rref"]], "rref() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.rref"]], "rref() (sympy.polys.matrices.sdm.sdm method)": [[209, "sympy.polys.matrices.sdm.SDM.rref"]], "rref_den() (sympy.polys.matrices.ddm.ddm method)": [[209, "sympy.polys.matrices.ddm.DDM.rref_den"]], "rref_den() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.rref_den"]], "rref_den() (sympy.polys.matrices.sdm.sdm method)": [[209, "sympy.polys.matrices.sdm.SDM.rref_den"]], "scc() (sympy.polys.matrices._dfm.dfm method)": [[209, "sympy.polys.matrices._dfm.DFM.scc"]], "scc() (sympy.polys.matrices.ddm.ddm method)": [[209, "sympy.polys.matrices.ddm.DDM.scc"]], "scc() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.scc"]], "scc() (sympy.polys.matrices.sdm.sdm method)": [[209, "sympy.polys.matrices.sdm.SDM.scc"]], "sdm_berk() (in module sympy.polys.matrices.sdm)": [[209, "sympy.polys.matrices.sdm.sdm_berk"]], "sdm_irref() (in module sympy.polys.matrices.sdm)": [[209, "sympy.polys.matrices.sdm.sdm_irref"]], "sdm_nullspace_from_rref() (in module sympy.polys.matrices.sdm)": [[209, "sympy.polys.matrices.sdm.sdm_nullspace_from_rref"]], "sdm_particular_from_rref() (in module sympy.polys.matrices.sdm)": [[209, "sympy.polys.matrices.sdm.sdm_particular_from_rref"]], "sdm_rref_den() (in module sympy.polys.matrices.sdm)": [[209, "sympy.polys.matrices.sdm.sdm_rref_den"]], "setitem() (sympy.polys.matrices._dfm.dfm method)": [[209, "sympy.polys.matrices._dfm.DFM.setitem"]], "smith_normal_form() (in module sympy.polys.matrices.normalforms)": [[209, "sympy.polys.matrices.normalforms.smith_normal_form"]], "solve_den() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.solve_den"]], "solve_den_charpoly() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.solve_den_charpoly"]], "solve_den_rref() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.solve_den_rref"]], "sub() (sympy.polys.matrices._dfm.dfm method)": [[209, "sympy.polys.matrices._dfm.DFM.sub"]], "sub() (sympy.polys.matrices.ddm.ddm method)": [[209, "sympy.polys.matrices.ddm.DDM.sub"]], "sub() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.sub"]], "sub() (sympy.polys.matrices.sdm.sdm method)": [[209, "sympy.polys.matrices.sdm.SDM.sub"]], "sympy.polys.matrices._dfm": [[209, "module-sympy.polys.matrices._dfm"]], "sympy.polys.matrices._typing": [[209, "module-sympy.polys.matrices._typing"]], "sympy.polys.matrices.ddm": [[209, "module-sympy.polys.matrices.ddm"]], "sympy.polys.matrices.dense": [[209, "module-sympy.polys.matrices.dense"]], "sympy.polys.matrices.domainmatrix": [[209, "module-sympy.polys.matrices.domainmatrix"]], "sympy.polys.matrices.sdm": [[209, "module-sympy.polys.matrices.sdm"]], "to_matrix() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_Matrix"]], "to_ddm() (sympy.polys.matrices._dfm.dfm method)": [[209, "sympy.polys.matrices._dfm.DFM.to_ddm"]], "to_ddm() (sympy.polys.matrices.ddm.ddm method)": [[209, "sympy.polys.matrices.ddm.DDM.to_ddm"]], "to_ddm() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_ddm"]], "to_ddm() (sympy.polys.matrices.sdm.sdm method)": [[209, "sympy.polys.matrices.sdm.SDM.to_ddm"]], "to_dense() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_dense"]], "to_dfm() (sympy.polys.matrices._dfm.dfm method)": [[209, "sympy.polys.matrices._dfm.DFM.to_dfm"]], "to_dfm() (sympy.polys.matrices.ddm.ddm method)": [[209, "sympy.polys.matrices.ddm.DDM.to_dfm"]], "to_dfm() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_dfm"]], "to_dfm() (sympy.polys.matrices.sdm.sdm method)": [[209, "sympy.polys.matrices.sdm.SDM.to_dfm"]], "to_dfm_or_ddm() (sympy.polys.matrices._dfm.dfm method)": [[209, "sympy.polys.matrices._dfm.DFM.to_dfm_or_ddm"]], "to_dfm_or_ddm() (sympy.polys.matrices.ddm.ddm method)": [[209, "sympy.polys.matrices.ddm.DDM.to_dfm_or_ddm"]], "to_dfm_or_ddm() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_dfm_or_ddm"]], "to_dfm_or_ddm() (sympy.polys.matrices.sdm.sdm method)": [[209, "sympy.polys.matrices.sdm.SDM.to_dfm_or_ddm"]], "to_dok() (sympy.polys.matrices._dfm.dfm method)": [[209, "sympy.polys.matrices._dfm.DFM.to_dok"]], "to_dok() (sympy.polys.matrices.ddm.ddm method)": [[209, "sympy.polys.matrices.ddm.DDM.to_dok"]], "to_dok() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_dok"]], "to_dok() (sympy.polys.matrices.sdm.sdm method)": [[209, "sympy.polys.matrices.sdm.SDM.to_dok"]], "to_field() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_field"]], "to_flat_nz() (sympy.polys.matrices._dfm.dfm method)": [[209, "sympy.polys.matrices._dfm.DFM.to_flat_nz"]], "to_flat_nz() (sympy.polys.matrices.ddm.ddm method)": [[209, "sympy.polys.matrices.ddm.DDM.to_flat_nz"]], "to_flat_nz() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_flat_nz"]], "to_flat_nz() (sympy.polys.matrices.sdm.sdm method)": [[209, "sympy.polys.matrices.sdm.SDM.to_flat_nz"]], "to_list() (sympy.polys.matrices._dfm.dfm method)": [[209, "sympy.polys.matrices._dfm.DFM.to_list"]], "to_list() (sympy.polys.matrices.ddm.ddm method)": [[209, "sympy.polys.matrices.ddm.DDM.to_list"]], "to_list() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_list"]], "to_list() (sympy.polys.matrices.sdm.sdm method)": [[209, "sympy.polys.matrices.sdm.SDM.to_list"]], "to_list_flat() (sympy.polys.matrices._dfm.dfm method)": [[209, "sympy.polys.matrices._dfm.DFM.to_list_flat"]], "to_list_flat() (sympy.polys.matrices.ddm.ddm method)": [[209, "sympy.polys.matrices.ddm.DDM.to_list_flat"]], "to_list_flat() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_list_flat"]], "to_list_flat() (sympy.polys.matrices.sdm.sdm method)": [[209, "sympy.polys.matrices.sdm.SDM.to_list_flat"]], "to_sdm() (sympy.polys.matrices._dfm.dfm method)": [[209, "sympy.polys.matrices._dfm.DFM.to_sdm"]], "to_sdm() (sympy.polys.matrices.ddm.ddm method)": [[209, "sympy.polys.matrices.ddm.DDM.to_sdm"]], "to_sdm() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_sdm"]], "to_sdm() (sympy.polys.matrices.sdm.sdm method)": [[209, "sympy.polys.matrices.sdm.SDM.to_sdm"]], "to_sparse() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_sparse"]], "transpose() (sympy.polys.matrices._dfm.dfm method)": [[209, "sympy.polys.matrices._dfm.DFM.transpose"]], "transpose() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.transpose"]], "transpose() (sympy.polys.matrices.sdm.sdm method)": [[209, "sympy.polys.matrices.sdm.SDM.transpose"]], "unify() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.unify"]], "vstack() (sympy.polys.matrices._dfm.dfm method)": [[209, "sympy.polys.matrices._dfm.DFM.vstack"]], "vstack() (sympy.polys.matrices.ddm.ddm method)": [[209, "sympy.polys.matrices.ddm.DDM.vstack"]], "vstack() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.vstack"]], "vstack() (sympy.polys.matrices.sdm.sdm method)": [[209, "sympy.polys.matrices.sdm.SDM.vstack"]], "zeros() (sympy.polys.matrices._dfm.dfm class method)": [[209, "sympy.polys.matrices._dfm.DFM.zeros"]], "zeros() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[209, "sympy.polys.matrices.domainmatrix.DomainMatrix.zeros"]], "zeros() (sympy.polys.matrices.sdm.sdm class method)": [[209, "sympy.polys.matrices.sdm.SDM.zeros"]], "anp (class in sympy.polys.polyclasses)": [[211, "sympy.polys.polyclasses.ANP"]], "algebraicfield (class in sympy.polys.domains)": [[211, "sympy.polys.domains.AlgebraicField"]], "complexelement (class in sympy.polys.domains.mpelements)": [[211, "sympy.polys.domains.mpelements.ComplexElement"]], "complexfield (class in sympy.polys.domains)": [[211, "sympy.polys.domains.ComplexField"]], "compositedomain (class in sympy.polys.domains.compositedomain)": [[211, "sympy.polys.domains.compositedomain.CompositeDomain"]], "dmf (class in sympy.polys.polyclasses)": [[211, "sympy.polys.polyclasses.DMF"]], "dmp (class in sympy.polys.polyclasses)": [[211, "sympy.polys.polyclasses.DMP"]], "domain (class in sympy.polys.domains.domain)": [[211, "sympy.polys.domains.domain.Domain"]], "domainelement (class in sympy.polys.domains.domainelement)": [[211, "sympy.polys.domains.domainelement.DomainElement"]], "expressiondomain (class in sympy.polys.domains)": [[211, "sympy.polys.domains.ExpressionDomain"]], "expressiondomain.expression (class in sympy.polys.domains)": [[211, "sympy.polys.domains.ExpressionDomain.Expression"]], "expressiondomain.expression (class in sympy.polys.domains.expressiondomain)": [[211, "sympy.polys.domains.expressiondomain.ExpressionDomain.Expression"]], "field (class in sympy.polys.domains.field)": [[211, "sympy.polys.domains.field.Field"]], "finitefield (class in sympy.polys.domains)": [[211, "sympy.polys.domains.FiniteField"]], "fracelement (class in sympy.polys.fields)": [[211, "sympy.polys.fields.FracElement"]], "fracfield (class in sympy.polys.fields)": [[211, "sympy.polys.fields.FracField"]], "fractionfield (class in sympy.polys.domains)": [[211, "sympy.polys.domains.FractionField"]], "gmpyfinitefield (class in sympy.polys.domains)": [[211, "sympy.polys.domains.GMPYFiniteField"]], "gmpyintegerring (class in sympy.polys.domains)": [[211, "sympy.polys.domains.GMPYIntegerRing"]], "gmpyrationalfield (class in sympy.polys.domains)": [[211, "sympy.polys.domains.GMPYRationalField"]], "gaussiandomain (class in sympy.polys.domains.gaussiandomains)": [[211, "sympy.polys.domains.gaussiandomains.GaussianDomain"]], "gaussianelement (class in sympy.polys.domains.gaussiandomains)": [[211, "sympy.polys.domains.gaussiandomains.GaussianElement"]], "gaussianinteger (class in sympy.polys.domains.gaussiandomains)": [[211, "sympy.polys.domains.gaussiandomains.GaussianInteger"]], "gaussianintegerring (class in sympy.polys.domains.gaussiandomains)": [[211, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing"]], "gaussianrational (class in sympy.polys.domains.gaussiandomains)": [[211, "sympy.polys.domains.gaussiandomains.GaussianRational"]], "gaussianrationalfield (class in sympy.polys.domains.gaussiandomains)": [[211, "sympy.polys.domains.gaussiandomains.GaussianRationalField"]], "integerring (class in sympy.polys.domains)": [[211, "sympy.polys.domains.IntegerRing"]], "lc() (sympy.polys.polyclasses.anp method)": [[211, "sympy.polys.polyclasses.ANP.LC"]], "lc() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.LC"]], "polyelement (class in sympy.polys.rings)": [[211, "sympy.polys.rings.PolyElement"]], "polyring (class in sympy.polys.rings)": [[211, "sympy.polys.rings.PolyRing"]], "polynomialring (class in sympy.polys.domains)": [[211, "sympy.polys.domains.PolynomialRing"]], "pythonfinitefield (class in sympy.polys.domains)": [[211, "sympy.polys.domains.PythonFiniteField"]], "pythonintegerring (class in sympy.polys.domains)": [[211, "sympy.polys.domains.PythonIntegerRing"]], "pythonmpq (class in sympy.external.pythonmpq)": [[211, "sympy.external.pythonmpq.PythonMPQ"]], "pythonrationalfield (class in sympy.polys.domains)": [[211, "sympy.polys.domains.PythonRationalField"]], "quotientring (class in sympy.polys.domains.quotientring)": [[211, "sympy.polys.domains.quotientring.QuotientRing"]], "rationalfield (class in sympy.polys.domains)": [[211, "sympy.polys.domains.RationalField"]], "realelement (class in sympy.polys.domains.mpelements)": [[211, "sympy.polys.domains.mpelements.RealElement"]], "realfield (class in sympy.polys.domains)": [[211, "sympy.polys.domains.RealField"]], "ring (class in sympy.polys.domains.ring)": [[211, "sympy.polys.domains.ring.Ring"]], "simpledomain (class in sympy.polys.domains.simpledomain)": [[211, "sympy.polys.domains.simpledomain.SimpleDomain"]], "tc() (sympy.polys.polyclasses.anp method)": [[211, "sympy.polys.polyclasses.ANP.TC"]], "tc() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.TC"]], "abs() (sympy.polys.domains.domain.domain method)": [[211, "sympy.polys.domains.domain.Domain.abs"]], "abs() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.abs"]], "add() (sympy.polys.domains.domain.domain method)": [[211, "sympy.polys.domains.domain.Domain.add"]], "add() (sympy.polys.polyclasses.dmf method)": [[211, "sympy.polys.polyclasses.DMF.add"]], "add() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.add"]], "add() (sympy.polys.rings.polyring method)": [[211, "sympy.polys.rings.PolyRing.add"]], "add_gens() (sympy.polys.rings.polyring method)": [[211, "sympy.polys.rings.PolyRing.add_gens"]], "add_ground() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.add_ground"]], "alg_field_from_poly() (sympy.polys.domains.domain.domain method)": [[211, "sympy.polys.domains.domain.Domain.alg_field_from_poly"]], "algebraic_field() (sympy.polys.domains.algebraicfield method)": [[211, "sympy.polys.domains.AlgebraicField.algebraic_field"]], "algebraic_field() (sympy.polys.domains.integerring method)": [[211, "sympy.polys.domains.IntegerRing.algebraic_field"]], "algebraic_field() (sympy.polys.domains.rationalfield method)": [[211, "sympy.polys.domains.RationalField.algebraic_field"]], "algebraic_field() (sympy.polys.domains.domain.domain method)": [[211, "sympy.polys.domains.domain.Domain.algebraic_field"]], "all_coeffs() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.all_coeffs"]], "all_monoms() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.all_monoms"]], "all_terms() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.all_terms"]], "almosteq() (sympy.polys.domains.complexfield method)": [[211, "sympy.polys.domains.ComplexField.almosteq"]], "almosteq() (sympy.polys.domains.realfield method)": [[211, "sympy.polys.domains.RealField.almosteq"]], "almosteq() (sympy.polys.domains.domain.domain method)": [[211, "sympy.polys.domains.domain.Domain.almosteq"]], "almosteq() (sympy.polys.rings.polyelement method)": [[211, "sympy.polys.rings.PolyElement.almosteq"]], "as_algebraicfield() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[211, "sympy.polys.domains.gaussiandomains.GaussianRationalField.as_AlgebraicField"]], "cancel() (sympy.polys.polyclasses.dmf method)": [[211, "sympy.polys.polyclasses.DMF.cancel"]], "cancel() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.cancel"]], "cancel() (sympy.polys.rings.polyelement method)": [[211, "sympy.polys.rings.PolyElement.cancel"]], "cauchy_lower_bound() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.cauchy_lower_bound"]], "cauchy_upper_bound() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.cauchy_upper_bound"]], "characteristic() (sympy.polys.domains.finitefield method)": [[211, "sympy.polys.domains.FiniteField.characteristic"]], "characteristic() (sympy.polys.domains.domain.domain method)": [[211, "sympy.polys.domains.domain.Domain.characteristic"]], "clear_denoms() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.clear_denoms"]], "coeff() (sympy.polys.rings.polyelement method)": [[211, "sympy.polys.rings.PolyElement.coeff"]], "coeff_wrt() (sympy.polys.rings.polyelement method)": [[211, "sympy.polys.rings.PolyElement.coeff_wrt"]], "coeffs() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.coeffs"]], "coeffs() (sympy.polys.rings.polyelement method)": [[211, "sympy.polys.rings.PolyElement.coeffs"]], "cofactors() (sympy.polys.domains.domain.domain method)": [[211, "sympy.polys.domains.domain.Domain.cofactors"]], "cofactors() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.cofactors"]], "compose() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.compose"]], "compose() (sympy.polys.rings.polyring method)": [[211, "sympy.polys.rings.PolyRing.compose"]], "const() (sympy.polys.rings.polyelement method)": [[211, "sympy.polys.rings.PolyElement.const"]], "content() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.content"]], "content() (sympy.polys.rings.polyelement method)": [[211, "sympy.polys.rings.PolyElement.content"]], "convert() (sympy.polys.domains.domain.domain method)": [[211, "sympy.polys.domains.domain.Domain.convert"]], "convert() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.convert"]], "convert_from() (sympy.polys.domains.domain.domain method)": [[211, "sympy.polys.domains.domain.Domain.convert_from"]], "copy() (sympy.polys.rings.polyelement method)": [[211, "sympy.polys.rings.PolyElement.copy"]], "count_complex_roots() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.count_complex_roots"]], "count_real_roots() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.count_real_roots"]], "cyclotomic_field() (sympy.polys.domains.domain.domain method)": [[211, "sympy.polys.domains.domain.Domain.cyclotomic_field"]], "decompose() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.decompose"]], "deflate() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.deflate"]], "degree() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.degree"]], "degree() (sympy.polys.rings.polyelement method)": [[211, "sympy.polys.rings.PolyElement.degree"]], "degree_list() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.degree_list"]], "degrees() (sympy.polys.rings.polyelement method)": [[211, "sympy.polys.rings.PolyElement.degrees"]], "denom() (sympy.polys.domains.algebraicfield method)": [[211, "sympy.polys.domains.AlgebraicField.denom"]], "denom() (sympy.polys.domains.expressiondomain method)": [[211, "sympy.polys.domains.ExpressionDomain.denom"]], "denom() (sympy.polys.domains.fractionfield method)": [[211, "sympy.polys.domains.FractionField.denom"]], "denom() (sympy.polys.domains.gmpyrationalfield method)": [[211, "sympy.polys.domains.GMPYRationalField.denom"]], "denom() (sympy.polys.domains.rationalfield method)": [[211, "sympy.polys.domains.RationalField.denom"]], "denom() (sympy.polys.domains.domain.domain method)": [[211, "sympy.polys.domains.domain.Domain.denom"]], "denom() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[211, "sympy.polys.domains.gaussiandomains.GaussianRationalField.denom"]], "denom() (sympy.polys.domains.ring.ring method)": [[211, "sympy.polys.domains.ring.Ring.denom"]], "denom() (sympy.polys.polyclasses.dmf method)": [[211, "sympy.polys.polyclasses.DMF.denom"]], "diff() (sympy.polys.fields.fracelement method)": [[211, "sympy.polys.fields.FracElement.diff"]], "diff() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.diff"]], "diff() (sympy.polys.rings.polyelement method)": [[211, "sympy.polys.rings.PolyElement.diff"]], "discriminant() (sympy.polys.domains.algebraicfield method)": [[211, "sympy.polys.domains.AlgebraicField.discriminant"]], "discriminant() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.discriminant"]], "div() (sympy.polys.domains.gmpyrationalfield method)": [[211, "sympy.polys.domains.GMPYRationalField.div"]], "div() (sympy.polys.domains.rationalfield method)": [[211, "sympy.polys.domains.RationalField.div"]], "div() (sympy.polys.domains.domain.domain method)": [[211, "sympy.polys.domains.domain.Domain.div"]], "div() (sympy.polys.domains.field.field method)": [[211, "sympy.polys.domains.field.Field.div"]], "div() (sympy.polys.domains.ring.ring method)": [[211, "sympy.polys.domains.ring.Ring.div"]], "div() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.div"]], "div() (sympy.polys.rings.polyelement method)": [[211, "sympy.polys.rings.PolyElement.div"]], "drop() (sympy.polys.domains.compositedomain.compositedomain method)": [[211, "sympy.polys.domains.compositedomain.CompositeDomain.drop"]], "drop() (sympy.polys.domains.domain.domain method)": [[211, "sympy.polys.domains.domain.Domain.drop"]], "drop() (sympy.polys.rings.polyring method)": [[211, "sympy.polys.rings.PolyRing.drop"]], "drop_to_ground() (sympy.polys.rings.polyring method)": [[211, "sympy.polys.rings.PolyRing.drop_to_ground"]], "dtype (sympy.polys.domains.algebraicfield attribute)": [[211, "sympy.polys.domains.AlgebraicField.dtype"]], "dtype (sympy.polys.domains.expressiondomain attribute)": [[211, "sympy.polys.domains.ExpressionDomain.dtype"]], "dtype (sympy.polys.domains.domain.domain attribute)": [[211, "sympy.polys.domains.domain.Domain.dtype"]], "dtype (sympy.polys.domains.gaussiandomains.gaussianintegerring attribute)": [[211, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.dtype"]], "dtype (sympy.polys.domains.gaussiandomains.gaussianrationalfield attribute)": [[211, "sympy.polys.domains.gaussiandomains.GaussianRationalField.dtype"]], "eject() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.eject"]], "eval() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.eval"]], "evalf() (sympy.polys.domains.domain.domain method)": [[211, "sympy.polys.domains.domain.Domain.evalf"]], "exclude() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.exclude"]], "exquo() (sympy.polys.domains.gmpyrationalfield method)": [[211, "sympy.polys.domains.GMPYRationalField.exquo"]], "exquo() (sympy.polys.domains.rationalfield method)": [[211, "sympy.polys.domains.RationalField.exquo"]], "exquo() (sympy.polys.domains.domain.domain method)": [[211, "sympy.polys.domains.domain.Domain.exquo"]], "exquo() (sympy.polys.domains.field.field method)": [[211, "sympy.polys.domains.field.Field.exquo"]], "exquo() (sympy.polys.domains.ring.ring method)": [[211, "sympy.polys.domains.ring.Ring.exquo"]], "exquo() (sympy.polys.polyclasses.dmf method)": [[211, "sympy.polys.polyclasses.DMF.exquo"]], "exquo() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.exquo"]], "exquo_ground() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.exquo_ground"]], "exsqrt() (sympy.polys.domains.complexfield method)": [[211, "sympy.polys.domains.ComplexField.exsqrt"]], "exsqrt() (sympy.polys.domains.finitefield method)": [[211, "sympy.polys.domains.FiniteField.exsqrt"]], "exsqrt() (sympy.polys.domains.integerring method)": [[211, "sympy.polys.domains.IntegerRing.exsqrt"]], "exsqrt() (sympy.polys.domains.rationalfield method)": [[211, "sympy.polys.domains.RationalField.exsqrt"]], "exsqrt() (sympy.polys.domains.realfield method)": [[211, "sympy.polys.domains.RealField.exsqrt"]], "exsqrt() (sympy.polys.domains.domain.domain method)": [[211, "sympy.polys.domains.domain.Domain.exsqrt"]], "ext (sympy.polys.domains.algebraicfield attribute)": [[211, "sympy.polys.domains.AlgebraicField.ext"]], "factor_list() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.factor_list"]], "factor_list_include() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.factor_list_include"]], "factorial() (sympy.polys.domains.fractionfield method)": [[211, "sympy.polys.domains.FractionField.factorial"]], "factorial() (sympy.polys.domains.gmpyintegerring method)": [[211, "sympy.polys.domains.GMPYIntegerRing.factorial"]], "factorial() (sympy.polys.domains.gmpyrationalfield method)": [[211, "sympy.polys.domains.GMPYRationalField.factorial"]], "factorial() (sympy.polys.domains.integerring method)": [[211, "sympy.polys.domains.IntegerRing.factorial"]], "factorial() (sympy.polys.domains.polynomialring method)": [[211, "sympy.polys.domains.PolynomialRing.factorial"]], "field() (in module sympy.polys.fields)": [[211, "sympy.polys.fields.field"]], "frac_field() (sympy.polys.domains.domain.domain method)": [[211, "sympy.polys.domains.domain.Domain.frac_field"]], "frac_unify() (sympy.polys.polyclasses.dmf method)": [[211, "sympy.polys.polyclasses.DMF.frac_unify"]], "free_module() (sympy.polys.domains.ring.ring method)": [[211, "sympy.polys.domains.ring.Ring.free_module"]], "from_algebraicfield() (sympy.polys.domains.algebraicfield method)": [[211, "sympy.polys.domains.AlgebraicField.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.fractionfield method)": [[211, "sympy.polys.domains.FractionField.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.integerring method)": [[211, "sympy.polys.domains.IntegerRing.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.polynomialring method)": [[211, "sympy.polys.domains.PolynomialRing.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.rationalfield method)": [[211, "sympy.polys.domains.RationalField.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.domain.domain method)": [[211, "sympy.polys.domains.domain.Domain.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[211, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_AlgebraicField"]], "from_complexfield() (sympy.polys.domains.fractionfield method)": [[211, "sympy.polys.domains.FractionField.from_ComplexField"]], "from_complexfield() (sympy.polys.domains.polynomialring method)": [[211, "sympy.polys.domains.PolynomialRing.from_ComplexField"]], "from_complexfield() (sympy.polys.domains.domain.domain method)": [[211, "sympy.polys.domains.domain.Domain.from_ComplexField"]], "from_expressiondomain() (sympy.polys.domains.expressiondomain method)": [[211, "sympy.polys.domains.ExpressionDomain.from_ExpressionDomain"]], "from_expressiondomain() (sympy.polys.domains.domain.domain method)": [[211, "sympy.polys.domains.domain.Domain.from_ExpressionDomain"]], "from_expressionrawdomain() (sympy.polys.domains.domain.domain method)": [[211, "sympy.polys.domains.domain.Domain.from_ExpressionRawDomain"]], "from_ff() (sympy.polys.domains.finitefield method)": [[211, "sympy.polys.domains.FiniteField.from_FF"]], "from_ff() (sympy.polys.domains.integerring method)": [[211, "sympy.polys.domains.IntegerRing.from_FF"]], "from_ff() (sympy.polys.domains.domain.domain method)": [[211, "sympy.polys.domains.domain.Domain.from_FF"]], "from_ff_gmpy() (sympy.polys.domains.finitefield method)": [[211, "sympy.polys.domains.FiniteField.from_FF_gmpy"]], "from_ff_gmpy() (sympy.polys.domains.gmpyintegerring method)": [[211, "sympy.polys.domains.GMPYIntegerRing.from_FF_gmpy"]], "from_ff_gmpy() (sympy.polys.domains.integerring method)": [[211, "sympy.polys.domains.IntegerRing.from_FF_gmpy"]], "from_ff_gmpy() (sympy.polys.domains.domain.domain method)": [[211, "sympy.polys.domains.domain.Domain.from_FF_gmpy"]], "from_ff_python() (sympy.polys.domains.finitefield method)": [[211, "sympy.polys.domains.FiniteField.from_FF_python"]], "from_ff_python() (sympy.polys.domains.gmpyintegerring method)": [[211, "sympy.polys.domains.GMPYIntegerRing.from_FF_python"]], "from_ff_python() (sympy.polys.domains.integerring method)": [[211, "sympy.polys.domains.IntegerRing.from_FF_python"]], "from_ff_python() (sympy.polys.domains.domain.domain method)": [[211, "sympy.polys.domains.domain.Domain.from_FF_python"]], "from_fractionfield() (sympy.polys.domains.expressiondomain method)": [[211, "sympy.polys.domains.ExpressionDomain.from_FractionField"]], "from_fractionfield() (sympy.polys.domains.fractionfield method)": [[211, "sympy.polys.domains.FractionField.from_FractionField"]], "from_fractionfield() (sympy.polys.domains.polynomialring method)": [[211, "sympy.polys.domains.PolynomialRing.from_FractionField"]], "from_fractionfield() (sympy.polys.domains.domain.domain method)": [[211, "sympy.polys.domains.domain.Domain.from_FractionField"]], "from_gaussianintegerring() (sympy.polys.domains.algebraicfield method)": [[211, "sympy.polys.domains.AlgebraicField.from_GaussianIntegerRing"]], "from_gaussianintegerring() (sympy.polys.domains.expressiondomain method)": [[211, "sympy.polys.domains.ExpressionDomain.from_GaussianIntegerRing"]], "from_gaussianintegerring() (sympy.polys.domains.fractionfield method)": [[211, "sympy.polys.domains.FractionField.from_GaussianIntegerRing"]], "from_gaussianintegerring() (sympy.polys.domains.polynomialring method)": [[211, "sympy.polys.domains.PolynomialRing.from_GaussianIntegerRing"]], "from_gaussianintegerring() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[211, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.from_GaussianIntegerRing"]], "from_gaussianintegerring() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[211, "sympy.polys.domains.gaussiandomains.GaussianRationalField.from_GaussianIntegerRing"]], "from_gaussianrationalfield() (sympy.polys.domains.algebraicfield method)": [[211, "sympy.polys.domains.AlgebraicField.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.expressiondomain method)": [[211, "sympy.polys.domains.ExpressionDomain.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.fractionfield method)": [[211, "sympy.polys.domains.FractionField.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.gmpyrationalfield method)": [[211, "sympy.polys.domains.GMPYRationalField.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.polynomialring method)": [[211, "sympy.polys.domains.PolynomialRing.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.rationalfield method)": [[211, "sympy.polys.domains.RationalField.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[211, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[211, "sympy.polys.domains.gaussiandomains.GaussianRationalField.from_GaussianRationalField"]], "from_globalpolynomialring() (sympy.polys.domains.polynomialring method)": [[211, "sympy.polys.domains.PolynomialRing.from_GlobalPolynomialRing"]], "from_globalpolynomialring() (sympy.polys.domains.domain.domain method)": [[211, "sympy.polys.domains.domain.Domain.from_GlobalPolynomialRing"]], "from_monogenicfiniteextension() (sympy.polys.domains.domain.domain method)": [[211, "sympy.polys.domains.domain.Domain.from_MonogenicFiniteExtension"]], "from_polynomialring() (sympy.polys.domains.expressiondomain method)": [[211, "sympy.polys.domains.ExpressionDomain.from_PolynomialRing"]], "from_polynomialring() (sympy.polys.domains.fractionfield method)": [[211, "sympy.polys.domains.FractionField.from_PolynomialRing"]], "from_polynomialring() (sympy.polys.domains.polynomialring method)": [[211, "sympy.polys.domains.PolynomialRing.from_PolynomialRing"]], "from_polynomialring() (sympy.polys.domains.domain.domain method)": [[211, "sympy.polys.domains.domain.Domain.from_PolynomialRing"]], "from_qq() (sympy.polys.domains.algebraicfield method)": [[211, "sympy.polys.domains.AlgebraicField.from_QQ"]], "from_qq() (sympy.polys.domains.expressiondomain method)": [[211, "sympy.polys.domains.ExpressionDomain.from_QQ"]], "from_qq() (sympy.polys.domains.finitefield method)": [[211, "sympy.polys.domains.FiniteField.from_QQ"]], "from_qq() (sympy.polys.domains.fractionfield method)": [[211, "sympy.polys.domains.FractionField.from_QQ"]], "from_qq() (sympy.polys.domains.gmpyintegerring method)": [[211, "sympy.polys.domains.GMPYIntegerRing.from_QQ"]], "from_qq() (sympy.polys.domains.integerring method)": [[211, "sympy.polys.domains.IntegerRing.from_QQ"]], "from_qq() (sympy.polys.domains.polynomialring method)": [[211, "sympy.polys.domains.PolynomialRing.from_QQ"]], "from_qq() (sympy.polys.domains.rationalfield method)": [[211, "sympy.polys.domains.RationalField.from_QQ"]], "from_qq() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[211, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_QQ"]], "from_qq_gmpy() (sympy.polys.domains.algebraicfield method)": [[211, "sympy.polys.domains.AlgebraicField.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.expressiondomain method)": [[211, "sympy.polys.domains.ExpressionDomain.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.finitefield method)": [[211, "sympy.polys.domains.FiniteField.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.fractionfield method)": [[211, "sympy.polys.domains.FractionField.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.gmpyintegerring method)": [[211, "sympy.polys.domains.GMPYIntegerRing.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.gmpyrationalfield method)": [[211, "sympy.polys.domains.GMPYRationalField.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.integerring method)": [[211, "sympy.polys.domains.IntegerRing.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.polynomialring method)": [[211, "sympy.polys.domains.PolynomialRing.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.rationalfield method)": [[211, "sympy.polys.domains.RationalField.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.domain.domain method)": [[211, "sympy.polys.domains.domain.Domain.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[211, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_QQ_gmpy"]], "from_qq_python() (sympy.polys.domains.algebraicfield method)": [[211, "sympy.polys.domains.AlgebraicField.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.expressiondomain method)": [[211, "sympy.polys.domains.ExpressionDomain.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.finitefield method)": [[211, "sympy.polys.domains.FiniteField.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.fractionfield method)": [[211, "sympy.polys.domains.FractionField.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.gmpyintegerring method)": [[211, "sympy.polys.domains.GMPYIntegerRing.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.gmpyrationalfield method)": [[211, "sympy.polys.domains.GMPYRationalField.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.integerring method)": [[211, "sympy.polys.domains.IntegerRing.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.polynomialring method)": [[211, "sympy.polys.domains.PolynomialRing.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.rationalfield method)": [[211, "sympy.polys.domains.RationalField.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.domain.domain method)": [[211, "sympy.polys.domains.domain.Domain.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[211, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_QQ_python"]], "from_realfield() (sympy.polys.domains.algebraicfield method)": [[211, "sympy.polys.domains.AlgebraicField.from_RealField"]], "from_realfield() (sympy.polys.domains.expressiondomain method)": [[211, "sympy.polys.domains.ExpressionDomain.from_RealField"]], "from_realfield() (sympy.polys.domains.finitefield method)": [[211, "sympy.polys.domains.FiniteField.from_RealField"]], "from_realfield() (sympy.polys.domains.fractionfield method)": [[211, "sympy.polys.domains.FractionField.from_RealField"]], "from_realfield() (sympy.polys.domains.gmpyintegerring method)": [[211, "sympy.polys.domains.GMPYIntegerRing.from_RealField"]], "from_realfield() (sympy.polys.domains.gmpyrationalfield method)": [[211, "sympy.polys.domains.GMPYRationalField.from_RealField"]], "from_realfield() (sympy.polys.domains.integerring method)": [[211, "sympy.polys.domains.IntegerRing.from_RealField"]], "from_realfield() (sympy.polys.domains.polynomialring method)": [[211, "sympy.polys.domains.PolynomialRing.from_RealField"]], "from_realfield() (sympy.polys.domains.rationalfield method)": [[211, "sympy.polys.domains.RationalField.from_RealField"]], "from_realfield() (sympy.polys.domains.domain.domain method)": [[211, "sympy.polys.domains.domain.Domain.from_RealField"]], "from_zz() (sympy.polys.domains.algebraicfield method)": [[211, "sympy.polys.domains.AlgebraicField.from_ZZ"]], "from_zz() (sympy.polys.domains.expressiondomain method)": [[211, "sympy.polys.domains.ExpressionDomain.from_ZZ"]], "from_zz() (sympy.polys.domains.finitefield method)": [[211, "sympy.polys.domains.FiniteField.from_ZZ"]], "from_zz() (sympy.polys.domains.fractionfield method)": [[211, "sympy.polys.domains.FractionField.from_ZZ"]], "from_zz() (sympy.polys.domains.integerring method)": [[211, "sympy.polys.domains.IntegerRing.from_ZZ"]], "from_zz() (sympy.polys.domains.polynomialring method)": [[211, "sympy.polys.domains.PolynomialRing.from_ZZ"]], "from_zz() (sympy.polys.domains.rationalfield method)": [[211, "sympy.polys.domains.RationalField.from_ZZ"]], "from_zz() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[211, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_ZZ"]], "from_zz_gmpy() (sympy.polys.domains.algebraicfield method)": [[211, "sympy.polys.domains.AlgebraicField.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.expressiondomain method)": [[211, "sympy.polys.domains.ExpressionDomain.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.finitefield method)": [[211, "sympy.polys.domains.FiniteField.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.fractionfield method)": [[211, "sympy.polys.domains.FractionField.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.gmpyintegerring method)": [[211, "sympy.polys.domains.GMPYIntegerRing.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.gmpyrationalfield method)": [[211, "sympy.polys.domains.GMPYRationalField.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.integerring method)": [[211, "sympy.polys.domains.IntegerRing.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.polynomialring method)": [[211, "sympy.polys.domains.PolynomialRing.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.rationalfield method)": [[211, "sympy.polys.domains.RationalField.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.domain.domain method)": [[211, "sympy.polys.domains.domain.Domain.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[211, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_ZZ_gmpy"]], "from_zz_python() (sympy.polys.domains.algebraicfield method)": [[211, "sympy.polys.domains.AlgebraicField.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.expressiondomain method)": [[211, "sympy.polys.domains.ExpressionDomain.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.finitefield method)": [[211, "sympy.polys.domains.FiniteField.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.fractionfield method)": [[211, "sympy.polys.domains.FractionField.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.gmpyintegerring method)": [[211, "sympy.polys.domains.GMPYIntegerRing.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.gmpyrationalfield method)": [[211, "sympy.polys.domains.GMPYRationalField.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.integerring method)": [[211, "sympy.polys.domains.IntegerRing.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.polynomialring method)": [[211, "sympy.polys.domains.PolynomialRing.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.rationalfield method)": [[211, "sympy.polys.domains.RationalField.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.domain.domain method)": [[211, "sympy.polys.domains.domain.Domain.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[211, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_ZZ_python"]], "from_dict() (sympy.polys.polyclasses.dmp class method)": [[211, "sympy.polys.polyclasses.DMP.from_dict"]], "from_list() (sympy.polys.polyclasses.dmp class method)": [[211, "sympy.polys.polyclasses.DMP.from_list"]], "from_sympy() (sympy.polys.domains.algebraicfield method)": [[211, "sympy.polys.domains.AlgebraicField.from_sympy"]], "from_sympy() (sympy.polys.domains.complexfield method)": [[211, "sympy.polys.domains.ComplexField.from_sympy"]], "from_sympy() (sympy.polys.domains.expressiondomain method)": [[211, "sympy.polys.domains.ExpressionDomain.from_sympy"]], "from_sympy() (sympy.polys.domains.finitefield method)": [[211, "sympy.polys.domains.FiniteField.from_sympy"]], "from_sympy() (sympy.polys.domains.fractionfield method)": [[211, "sympy.polys.domains.FractionField.from_sympy"]], "from_sympy() (sympy.polys.domains.gmpyintegerring method)": [[211, "sympy.polys.domains.GMPYIntegerRing.from_sympy"]], "from_sympy() (sympy.polys.domains.gmpyrationalfield method)": [[211, "sympy.polys.domains.GMPYRationalField.from_sympy"]], "from_sympy() (sympy.polys.domains.integerring method)": [[211, "sympy.polys.domains.IntegerRing.from_sympy"]], "from_sympy() (sympy.polys.domains.polynomialring method)": [[211, "sympy.polys.domains.PolynomialRing.from_sympy"]], "from_sympy() (sympy.polys.domains.rationalfield method)": [[211, "sympy.polys.domains.RationalField.from_sympy"]], "from_sympy() (sympy.polys.domains.realfield method)": [[211, "sympy.polys.domains.RealField.from_sympy"]], "from_sympy() (sympy.polys.domains.domain.domain method)": [[211, "sympy.polys.domains.domain.Domain.from_sympy"]], "from_sympy() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[211, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_sympy"]], "from_sympy_list() (sympy.polys.polyclasses.dmp class method)": [[211, "sympy.polys.polyclasses.DMP.from_sympy_list"]], "galois_group() (sympy.polys.domains.algebraicfield method)": [[211, "sympy.polys.domains.AlgebraicField.galois_group"]], "gcd() (sympy.polys.domains.complexfield method)": [[211, "sympy.polys.domains.ComplexField.gcd"]], "gcd() (sympy.polys.domains.gmpyintegerring method)": [[211, "sympy.polys.domains.GMPYIntegerRing.gcd"]], "gcd() (sympy.polys.domains.integerring method)": [[211, "sympy.polys.domains.IntegerRing.gcd"]], "gcd() (sympy.polys.domains.polynomialring method)": [[211, "sympy.polys.domains.PolynomialRing.gcd"]], "gcd() (sympy.polys.domains.realfield method)": [[211, "sympy.polys.domains.RealField.gcd"]], "gcd() (sympy.polys.domains.domain.domain method)": [[211, "sympy.polys.domains.domain.Domain.gcd"]], "gcd() (sympy.polys.domains.field.field method)": [[211, "sympy.polys.domains.field.Field.gcd"]], "gcd() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[211, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.gcd"]], "gcd() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.gcd"]], "gcdex() (sympy.polys.domains.gmpyintegerring method)": [[211, "sympy.polys.domains.GMPYIntegerRing.gcdex"]], "gcdex() (sympy.polys.domains.integerring method)": [[211, "sympy.polys.domains.IntegerRing.gcdex"]], "gcdex() (sympy.polys.domains.polynomialring method)": [[211, "sympy.polys.domains.PolynomialRing.gcdex"]], "gcdex() (sympy.polys.domains.domain.domain method)": [[211, "sympy.polys.domains.domain.Domain.gcdex"]], "gcdex() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.gcdex"]], "get_exact() (sympy.polys.domains.complexfield method)": [[211, "sympy.polys.domains.ComplexField.get_exact"]], "get_exact() (sympy.polys.domains.realfield method)": [[211, "sympy.polys.domains.RealField.get_exact"]], "get_exact() (sympy.polys.domains.domain.domain method)": [[211, "sympy.polys.domains.domain.Domain.get_exact"]], "get_field() (sympy.polys.domains.expressiondomain method)": [[211, "sympy.polys.domains.ExpressionDomain.get_field"]], "get_field() (sympy.polys.domains.finitefield method)": [[211, "sympy.polys.domains.FiniteField.get_field"]], "get_field() (sympy.polys.domains.integerring method)": [[211, "sympy.polys.domains.IntegerRing.get_field"]], "get_field() (sympy.polys.domains.polynomialring method)": [[211, "sympy.polys.domains.PolynomialRing.get_field"]], "get_field() (sympy.polys.domains.domain.domain method)": [[211, "sympy.polys.domains.domain.Domain.get_field"]], "get_field() (sympy.polys.domains.field.field method)": [[211, "sympy.polys.domains.field.Field.get_field"]], "get_field() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[211, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.get_field"]], "get_field() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[211, "sympy.polys.domains.gaussiandomains.GaussianRationalField.get_field"]], "get_ring() (sympy.polys.domains.algebraicfield method)": [[211, "sympy.polys.domains.AlgebraicField.get_ring"]], "get_ring() (sympy.polys.domains.complexfield method)": [[211, "sympy.polys.domains.ComplexField.get_ring"]], "get_ring() (sympy.polys.domains.expressiondomain method)": [[211, "sympy.polys.domains.ExpressionDomain.get_ring"]], "get_ring() (sympy.polys.domains.fractionfield method)": [[211, "sympy.polys.domains.FractionField.get_ring"]], "get_ring() (sympy.polys.domains.gmpyrationalfield method)": [[211, "sympy.polys.domains.GMPYRationalField.get_ring"]], "get_ring() (sympy.polys.domains.rationalfield method)": [[211, "sympy.polys.domains.RationalField.get_ring"]], "get_ring() (sympy.polys.domains.realfield method)": [[211, "sympy.polys.domains.RealField.get_ring"]], "get_ring() (sympy.polys.domains.domain.domain method)": [[211, "sympy.polys.domains.domain.Domain.get_ring"]], "get_ring() (sympy.polys.domains.field.field method)": [[211, "sympy.polys.domains.field.Field.get_ring"]], "get_ring() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[211, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.get_ring"]], "get_ring() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[211, "sympy.polys.domains.gaussiandomains.GaussianRationalField.get_ring"]], "get_ring() (sympy.polys.domains.ring.ring method)": [[211, "sympy.polys.domains.ring.Ring.get_ring"]], "gff_list() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.gff_list"]], "half_gcdex() (sympy.polys.domains.domain.domain method)": [[211, "sympy.polys.domains.domain.Domain.half_gcdex"]], "half_gcdex() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.half_gcdex"]], "half_per() (sympy.polys.polyclasses.dmf method)": [[211, "sympy.polys.polyclasses.DMF.half_per"]], "has_assoc_field (sympy.polys.domains.domain.domain attribute)": [[211, "sympy.polys.domains.domain.Domain.has_assoc_Field"]], "has_assoc_ring (sympy.polys.domains.domain.domain attribute)": [[211, "sympy.polys.domains.domain.Domain.has_assoc_Ring"]], "homogeneous_order() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.homogeneous_order"]], "homogenize() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.homogenize"]], "ideal() (sympy.polys.domains.ring.ring method)": [[211, "sympy.polys.domains.ring.Ring.ideal"]], "imul_num() (sympy.polys.rings.polyelement method)": [[211, "sympy.polys.rings.PolyElement.imul_num"]], "index() (sympy.polys.rings.polyring method)": [[211, "sympy.polys.rings.PolyRing.index"]], "inject() (sympy.polys.domains.compositedomain.compositedomain method)": [[211, "sympy.polys.domains.compositedomain.CompositeDomain.inject"]], "inject() (sympy.polys.domains.domain.domain method)": [[211, "sympy.polys.domains.domain.Domain.inject"]], "inject() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[211, "sympy.polys.domains.gaussiandomains.GaussianDomain.inject"]], "inject() (sympy.polys.domains.simpledomain.simpledomain method)": [[211, "sympy.polys.domains.simpledomain.SimpleDomain.inject"]], "inject() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.inject"]], "integral_basis() (sympy.polys.domains.algebraicfield method)": [[211, "sympy.polys.domains.AlgebraicField.integral_basis"]], "integrate() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.integrate"]], "intervals() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.intervals"]], "invert() (sympy.polys.domains.domain.domain method)": [[211, "sympy.polys.domains.domain.Domain.invert"]], "invert() (sympy.polys.domains.ring.ring method)": [[211, "sympy.polys.domains.ring.Ring.invert"]], "invert() (sympy.polys.polyclasses.dmf method)": [[211, "sympy.polys.polyclasses.DMF.invert"]], "invert() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.invert"]], "is_field (sympy.polys.domains.domain.domain attribute)": [[211, "sympy.polys.domains.domain.Domain.is_Field"]], "is_pid (sympy.polys.domains.domain.domain attribute)": [[211, "sympy.polys.domains.domain.Domain.is_PID"]], "is_ring (sympy.polys.domains.domain.domain attribute)": [[211, "sympy.polys.domains.domain.Domain.is_Ring"]], "is_cyclotomic (sympy.polys.polyclasses.dmp property)": [[211, "sympy.polys.polyclasses.DMP.is_cyclotomic"]], "is_ground (sympy.polys.polyclasses.anp property)": [[211, "sympy.polys.polyclasses.ANP.is_ground"]], "is_ground (sympy.polys.polyclasses.dmp property)": [[211, "sympy.polys.polyclasses.DMP.is_ground"]], "is_homogeneous (sympy.polys.polyclasses.dmp property)": [[211, "sympy.polys.polyclasses.DMP.is_homogeneous"]], "is_irreducible (sympy.polys.polyclasses.dmp property)": [[211, "sympy.polys.polyclasses.DMP.is_irreducible"]], "is_linear (sympy.polys.polyclasses.dmp property)": [[211, "sympy.polys.polyclasses.DMP.is_linear"]], "is_monic (sympy.polys.polyclasses.dmp property)": [[211, "sympy.polys.polyclasses.DMP.is_monic"]], "is_monomial (sympy.polys.polyclasses.dmp property)": [[211, "sympy.polys.polyclasses.DMP.is_monomial"]], "is_negative() (sympy.polys.domains.algebraicfield method)": [[211, "sympy.polys.domains.AlgebraicField.is_negative"]], "is_negative() (sympy.polys.domains.complexfield method)": [[211, "sympy.polys.domains.ComplexField.is_negative"]], "is_negative() (sympy.polys.domains.expressiondomain method)": [[211, "sympy.polys.domains.ExpressionDomain.is_negative"]], "is_negative() (sympy.polys.domains.fractionfield method)": [[211, "sympy.polys.domains.FractionField.is_negative"]], "is_negative() (sympy.polys.domains.polynomialring method)": [[211, "sympy.polys.domains.PolynomialRing.is_negative"]], "is_negative() (sympy.polys.domains.domain.domain method)": [[211, "sympy.polys.domains.domain.Domain.is_negative"]], "is_negative() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[211, "sympy.polys.domains.gaussiandomains.GaussianDomain.is_negative"]], "is_nonnegative() (sympy.polys.domains.algebraicfield method)": [[211, "sympy.polys.domains.AlgebraicField.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.complexfield method)": [[211, "sympy.polys.domains.ComplexField.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.expressiondomain method)": [[211, "sympy.polys.domains.ExpressionDomain.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.fractionfield method)": [[211, "sympy.polys.domains.FractionField.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.polynomialring method)": [[211, "sympy.polys.domains.PolynomialRing.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.domain.domain method)": [[211, "sympy.polys.domains.domain.Domain.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[211, "sympy.polys.domains.gaussiandomains.GaussianDomain.is_nonnegative"]], "is_nonpositive() (sympy.polys.domains.algebraicfield method)": [[211, "sympy.polys.domains.AlgebraicField.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.complexfield method)": [[211, "sympy.polys.domains.ComplexField.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.expressiondomain method)": [[211, "sympy.polys.domains.ExpressionDomain.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.fractionfield method)": [[211, "sympy.polys.domains.FractionField.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.polynomialring method)": [[211, "sympy.polys.domains.PolynomialRing.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.domain.domain method)": [[211, "sympy.polys.domains.domain.Domain.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[211, "sympy.polys.domains.gaussiandomains.GaussianDomain.is_nonpositive"]], "is_one (sympy.polys.polyclasses.anp property)": [[211, "sympy.polys.polyclasses.ANP.is_one"]], "is_one (sympy.polys.polyclasses.dmf property)": [[211, "sympy.polys.polyclasses.DMF.is_one"]], "is_one (sympy.polys.polyclasses.dmp property)": [[211, "sympy.polys.polyclasses.DMP.is_one"]], "is_one() (sympy.polys.domains.domain.domain method)": [[211, "sympy.polys.domains.domain.Domain.is_one"]], "is_positive() (sympy.polys.domains.algebraicfield method)": [[211, "sympy.polys.domains.AlgebraicField.is_positive"]], "is_positive() (sympy.polys.domains.complexfield method)": [[211, "sympy.polys.domains.ComplexField.is_positive"]], "is_positive() (sympy.polys.domains.expressiondomain method)": [[211, "sympy.polys.domains.ExpressionDomain.is_positive"]], "is_positive() (sympy.polys.domains.fractionfield method)": [[211, "sympy.polys.domains.FractionField.is_positive"]], "is_positive() (sympy.polys.domains.polynomialring method)": [[211, "sympy.polys.domains.PolynomialRing.is_positive"]], "is_positive() (sympy.polys.domains.domain.domain method)": [[211, "sympy.polys.domains.domain.Domain.is_positive"]], "is_positive() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[211, "sympy.polys.domains.gaussiandomains.GaussianDomain.is_positive"]], "is_primitive (sympy.polys.polyclasses.dmp property)": [[211, "sympy.polys.polyclasses.DMP.is_primitive"]], "is_quadratic (sympy.polys.polyclasses.dmp property)": [[211, "sympy.polys.polyclasses.DMP.is_quadratic"]], "is_sqf (sympy.polys.polyclasses.dmp property)": [[211, "sympy.polys.polyclasses.DMP.is_sqf"]], "is_square() (sympy.polys.domains.complexfield method)": [[211, "sympy.polys.domains.ComplexField.is_square"]], "is_square() (sympy.polys.domains.finitefield method)": [[211, "sympy.polys.domains.FiniteField.is_square"]], "is_square() (sympy.polys.domains.integerring method)": [[211, "sympy.polys.domains.IntegerRing.is_square"]], "is_square() (sympy.polys.domains.rationalfield method)": [[211, "sympy.polys.domains.RationalField.is_square"]], "is_square() (sympy.polys.domains.realfield method)": [[211, "sympy.polys.domains.RealField.is_square"]], "is_square() (sympy.polys.domains.domain.domain method)": [[211, "sympy.polys.domains.domain.Domain.is_square"]], "is_unit() (sympy.polys.domains.polynomialring method)": [[211, "sympy.polys.domains.PolynomialRing.is_unit"]], "is_unit() (sympy.polys.domains.field.field method)": [[211, "sympy.polys.domains.field.Field.is_unit"]], "is_zero (sympy.polys.polyclasses.anp property)": [[211, "sympy.polys.polyclasses.ANP.is_zero"]], "is_zero (sympy.polys.polyclasses.dmf property)": [[211, "sympy.polys.polyclasses.DMF.is_zero"]], "is_zero (sympy.polys.polyclasses.dmp property)": [[211, "sympy.polys.polyclasses.DMP.is_zero"]], "is_zero() (sympy.polys.domains.domain.domain method)": [[211, "sympy.polys.domains.domain.Domain.is_zero"]], "itercoeffs() (sympy.polys.rings.polyelement method)": [[211, "sympy.polys.rings.PolyElement.itercoeffs"]], "itermonoms() (sympy.polys.rings.polyelement method)": [[211, "sympy.polys.rings.PolyElement.itermonoms"]], "iterterms() (sympy.polys.rings.polyelement method)": [[211, "sympy.polys.rings.PolyElement.iterterms"]], "l1_norm() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.l1_norm"]], "l2_norm_squared() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.l2_norm_squared"]], "lcm() (sympy.polys.domains.complexfield method)": [[211, "sympy.polys.domains.ComplexField.lcm"]], "lcm() (sympy.polys.domains.gmpyintegerring method)": [[211, "sympy.polys.domains.GMPYIntegerRing.lcm"]], "lcm() (sympy.polys.domains.integerring method)": [[211, "sympy.polys.domains.IntegerRing.lcm"]], "lcm() (sympy.polys.domains.polynomialring method)": [[211, "sympy.polys.domains.PolynomialRing.lcm"]], "lcm() (sympy.polys.domains.realfield method)": [[211, "sympy.polys.domains.RealField.lcm"]], "lcm() (sympy.polys.domains.domain.domain method)": [[211, "sympy.polys.domains.domain.Domain.lcm"]], "lcm() (sympy.polys.domains.field.field method)": [[211, "sympy.polys.domains.field.Field.lcm"]], "lcm() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[211, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.lcm"]], "lcm() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.lcm"]], "leading_expv() (sympy.polys.rings.polyelement method)": [[211, "sympy.polys.rings.PolyElement.leading_expv"]], "leading_monom() (sympy.polys.rings.polyelement method)": [[211, "sympy.polys.rings.PolyElement.leading_monom"]], "leading_term() (sympy.polys.rings.polyelement method)": [[211, "sympy.polys.rings.PolyElement.leading_term"]], "lift() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.lift"]], "listcoeffs() (sympy.polys.rings.polyelement method)": [[211, "sympy.polys.rings.PolyElement.listcoeffs"]], "listmonoms() (sympy.polys.rings.polyelement method)": [[211, "sympy.polys.rings.PolyElement.listmonoms"]], "listterms() (sympy.polys.rings.polyelement method)": [[211, "sympy.polys.rings.PolyElement.listterms"]], "log() (sympy.polys.domains.integerring method)": [[211, "sympy.polys.domains.IntegerRing.log"]], "log() (sympy.polys.domains.domain.domain method)": [[211, "sympy.polys.domains.domain.Domain.log"]], "map() (sympy.polys.domains.domain.domain method)": [[211, "sympy.polys.domains.domain.Domain.map"]], "max_norm() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.max_norm"]], "maximal_order() (sympy.polys.domains.algebraicfield method)": [[211, "sympy.polys.domains.AlgebraicField.maximal_order"]], "mignotte_sep_bound_squared() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.mignotte_sep_bound_squared"]], "mod (sympy.polys.domains.algebraicfield attribute)": [[211, "sympy.polys.domains.AlgebraicField.mod"]], "monic() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.monic"]], "monic() (sympy.polys.rings.polyelement method)": [[211, "sympy.polys.rings.PolyElement.monic"]], "monomial_basis() (sympy.polys.rings.polyring method)": [[211, "sympy.polys.rings.PolyRing.monomial_basis"]], "monoms() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.monoms"]], "monoms() (sympy.polys.rings.polyelement method)": [[211, "sympy.polys.rings.PolyElement.monoms"]], "mul() (sympy.polys.domains.domain.domain method)": [[211, "sympy.polys.domains.domain.Domain.mul"]], "mul() (sympy.polys.polyclasses.dmf method)": [[211, "sympy.polys.polyclasses.DMF.mul"]], "mul() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.mul"]], "mul() (sympy.polys.rings.polyring method)": [[211, "sympy.polys.rings.PolyRing.mul"]], "mul_ground() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.mul_ground"]], "n() (sympy.polys.domains.domain.domain method)": [[211, "sympy.polys.domains.domain.Domain.n"]], "neg() (sympy.polys.domains.domain.domain method)": [[211, "sympy.polys.domains.domain.Domain.neg"]], "neg() (sympy.polys.polyclasses.dmf method)": [[211, "sympy.polys.polyclasses.DMF.neg"]], "neg() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.neg"]], "new() (sympy.polys.domains.gaussiandomains.gaussianelement class method)": [[211, "sympy.polys.domains.gaussiandomains.GaussianElement.new"]], "norm() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.norm"]], "normalize() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[211, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.normalize"]], "nth() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.nth"]], "numer() (sympy.polys.domains.algebraicfield method)": [[211, "sympy.polys.domains.AlgebraicField.numer"]], "numer() (sympy.polys.domains.expressiondomain method)": [[211, "sympy.polys.domains.ExpressionDomain.numer"]], "numer() (sympy.polys.domains.fractionfield method)": [[211, "sympy.polys.domains.FractionField.numer"]], "numer() (sympy.polys.domains.gmpyrationalfield method)": [[211, "sympy.polys.domains.GMPYRationalField.numer"]], "numer() (sympy.polys.domains.rationalfield method)": [[211, "sympy.polys.domains.RationalField.numer"]], "numer() (sympy.polys.domains.domain.domain method)": [[211, "sympy.polys.domains.domain.Domain.numer"]], "numer() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[211, "sympy.polys.domains.gaussiandomains.GaussianRationalField.numer"]], "numer() (sympy.polys.domains.ring.ring method)": [[211, "sympy.polys.domains.ring.Ring.numer"]], "numer() (sympy.polys.polyclasses.dmf method)": [[211, "sympy.polys.polyclasses.DMF.numer"]], "of_type() (sympy.polys.domains.domain.domain method)": [[211, "sympy.polys.domains.domain.Domain.of_type"]], "old_frac_field() (sympy.polys.domains.domain.domain method)": [[211, "sympy.polys.domains.domain.Domain.old_frac_field"]], "old_poly_ring() (sympy.polys.domains.domain.domain method)": [[211, "sympy.polys.domains.domain.Domain.old_poly_ring"]], "one (sympy.polys.domains.domain.domain attribute)": [[211, "sympy.polys.domains.domain.Domain.one"]], "orig_ext (sympy.polys.domains.algebraicfield attribute)": [[211, "sympy.polys.domains.AlgebraicField.orig_ext"]], "parent() (sympy.polys.domains.domainelement.domainelement method)": [[211, "sympy.polys.domains.domainelement.DomainElement.parent"]], "parent() (sympy.polys.domains.gaussiandomains.gaussianelement method)": [[211, "sympy.polys.domains.gaussiandomains.GaussianElement.parent"]], "pdiv() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.pdiv"]], "pdiv() (sympy.polys.rings.polyelement method)": [[211, "sympy.polys.rings.PolyElement.pdiv"]], "per() (sympy.polys.polyclasses.dmf method)": [[211, "sympy.polys.polyclasses.DMF.per"]], "per() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.per"]], "permute() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.permute"]], "pexquo() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.pexquo"]], "pexquo() (sympy.polys.rings.polyelement method)": [[211, "sympy.polys.rings.PolyElement.pexquo"]], "poly_ring() (sympy.polys.domains.domain.domain method)": [[211, "sympy.polys.domains.domain.Domain.poly_ring"]], "poly_unify() (sympy.polys.polyclasses.dmf method)": [[211, "sympy.polys.polyclasses.DMF.poly_unify"]], "pos() (sympy.polys.domains.domain.domain method)": [[211, "sympy.polys.domains.domain.Domain.pos"]], "pow() (sympy.polys.domains.domain.domain method)": [[211, "sympy.polys.domains.domain.Domain.pow"]], "pow() (sympy.polys.polyclasses.anp method)": [[211, "sympy.polys.polyclasses.ANP.pow"]], "pow() (sympy.polys.polyclasses.dmf method)": [[211, "sympy.polys.polyclasses.DMF.pow"]], "pow() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.pow"]], "pquo() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.pquo"]], "pquo() (sympy.polys.rings.polyelement method)": [[211, "sympy.polys.rings.PolyElement.pquo"]], "prem() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.prem"]], "prem() (sympy.polys.rings.polyelement method)": [[211, "sympy.polys.rings.PolyElement.prem"]], "primes_above() (sympy.polys.domains.algebraicfield method)": [[211, "sympy.polys.domains.AlgebraicField.primes_above"]], "primitive() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.primitive"]], "primitive() (sympy.polys.rings.polyelement method)": [[211, "sympy.polys.rings.PolyElement.primitive"]], "quadrant() (sympy.polys.domains.gaussiandomains.gaussianelement method)": [[211, "sympy.polys.domains.gaussiandomains.GaussianElement.quadrant"]], "quo() (sympy.polys.domains.gmpyrationalfield method)": [[211, "sympy.polys.domains.GMPYRationalField.quo"]], "quo() (sympy.polys.domains.rationalfield method)": [[211, "sympy.polys.domains.RationalField.quo"]], "quo() (sympy.polys.domains.domain.domain method)": [[211, "sympy.polys.domains.domain.Domain.quo"]], "quo() (sympy.polys.domains.field.field method)": [[211, "sympy.polys.domains.field.Field.quo"]], "quo() (sympy.polys.domains.ring.ring method)": [[211, "sympy.polys.domains.ring.Ring.quo"]], "quo() (sympy.polys.polyclasses.dmf method)": [[211, "sympy.polys.polyclasses.DMF.quo"]], "quo() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.quo"]], "quo_ground() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.quo_ground"]], "quotient_ring() (sympy.polys.domains.ring.ring method)": [[211, "sympy.polys.domains.ring.Ring.quotient_ring"]], "refine_root() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.refine_root"]], "rem() (sympy.polys.domains.gmpyrationalfield method)": [[211, "sympy.polys.domains.GMPYRationalField.rem"]], "rem() (sympy.polys.domains.rationalfield method)": [[211, "sympy.polys.domains.RationalField.rem"]], "rem() (sympy.polys.domains.domain.domain method)": [[211, "sympy.polys.domains.domain.Domain.rem"]], "rem() (sympy.polys.domains.field.field method)": [[211, "sympy.polys.domains.field.Field.rem"]], "rem() (sympy.polys.domains.ring.ring method)": [[211, "sympy.polys.domains.ring.Ring.rem"]], "rem() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.rem"]], "resultant() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.resultant"]], "revert() (sympy.polys.domains.domain.domain method)": [[211, "sympy.polys.domains.domain.Domain.revert"]], "revert() (sympy.polys.domains.field.field method)": [[211, "sympy.polys.domains.field.Field.revert"]], "revert() (sympy.polys.domains.ring.ring method)": [[211, "sympy.polys.domains.ring.Ring.revert"]], "revert() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.revert"]], "ring() (in module sympy.polys.rings)": [[211, "sympy.polys.rings.ring"]], "sfield() (in module sympy.polys.fields)": [[211, "sympy.polys.fields.sfield"]], "shift() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.shift"]], "slice() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.slice"]], "sqf_list() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.sqf_list"]], "sqf_list_include() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.sqf_list_include"]], "sqf_norm() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.sqf_norm"]], "sqf_part() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.sqf_part"]], "sqr() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.sqr"]], "sqrt() (sympy.polys.domains.gmpyintegerring method)": [[211, "sympy.polys.domains.GMPYIntegerRing.sqrt"]], "sqrt() (sympy.polys.domains.integerring method)": [[211, "sympy.polys.domains.IntegerRing.sqrt"]], "sqrt() (sympy.polys.domains.domain.domain method)": [[211, "sympy.polys.domains.domain.Domain.sqrt"]], "square() (sympy.polys.rings.polyelement method)": [[211, "sympy.polys.rings.PolyElement.square"]], "sring() (in module sympy.polys.rings)": [[211, "sympy.polys.rings.sring"]], "strip_zero() (sympy.polys.rings.polyelement method)": [[211, "sympy.polys.rings.PolyElement.strip_zero"]], "sturm() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.sturm"]], "sub() (sympy.polys.domains.domain.domain method)": [[211, "sympy.polys.domains.domain.Domain.sub"]], "sub() (sympy.polys.polyclasses.dmf method)": [[211, "sympy.polys.polyclasses.DMF.sub"]], "sub() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.sub"]], "sub_ground() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.sub_ground"]], "subresultants() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.subresultants"]], "subresultants() (sympy.polys.rings.polyelement method)": [[211, "sympy.polys.rings.PolyElement.subresultants"]], "symmetric_poly() (sympy.polys.rings.polyring method)": [[211, "sympy.polys.rings.PolyRing.symmetric_poly"]], "symmetrize() (sympy.polys.rings.polyelement method)": [[211, "sympy.polys.rings.PolyElement.symmetrize"]], "tail_degree() (sympy.polys.rings.polyelement method)": [[211, "sympy.polys.rings.PolyElement.tail_degree"]], "tail_degrees() (sympy.polys.rings.polyelement method)": [[211, "sympy.polys.rings.PolyElement.tail_degrees"]], "terms() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.terms"]], "terms() (sympy.polys.rings.polyelement method)": [[211, "sympy.polys.rings.PolyElement.terms"]], "terms_gcd() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.terms_gcd"]], "to_alg_num() (sympy.polys.domains.algebraicfield method)": [[211, "sympy.polys.domains.AlgebraicField.to_alg_num"]], "to_dict() (sympy.polys.polyclasses.anp method)": [[211, "sympy.polys.polyclasses.ANP.to_dict"]], "to_dict() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.to_dict"]], "to_exact() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.to_exact"]], "to_field() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.to_field"]], "to_list() (sympy.polys.polyclasses.anp method)": [[211, "sympy.polys.polyclasses.ANP.to_list"]], "to_list() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.to_list"]], "to_rational() (sympy.polys.domains.realfield method)": [[211, "sympy.polys.domains.RealField.to_rational"]], "to_ring() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.to_ring"]], "to_sympy() (sympy.polys.domains.algebraicfield method)": [[211, "sympy.polys.domains.AlgebraicField.to_sympy"]], "to_sympy() (sympy.polys.domains.complexfield method)": [[211, "sympy.polys.domains.ComplexField.to_sympy"]], "to_sympy() (sympy.polys.domains.expressiondomain method)": [[211, "sympy.polys.domains.ExpressionDomain.to_sympy"]], "to_sympy() (sympy.polys.domains.finitefield method)": [[211, "sympy.polys.domains.FiniteField.to_sympy"]], "to_sympy() (sympy.polys.domains.fractionfield method)": [[211, "sympy.polys.domains.FractionField.to_sympy"]], "to_sympy() (sympy.polys.domains.gmpyintegerring method)": [[211, "sympy.polys.domains.GMPYIntegerRing.to_sympy"]], "to_sympy() (sympy.polys.domains.gmpyrationalfield method)": [[211, "sympy.polys.domains.GMPYRationalField.to_sympy"]], "to_sympy() (sympy.polys.domains.integerring method)": [[211, "sympy.polys.domains.IntegerRing.to_sympy"]], "to_sympy() (sympy.polys.domains.polynomialring method)": [[211, "sympy.polys.domains.PolynomialRing.to_sympy"]], "to_sympy() (sympy.polys.domains.rationalfield method)": [[211, "sympy.polys.domains.RationalField.to_sympy"]], "to_sympy() (sympy.polys.domains.realfield method)": [[211, "sympy.polys.domains.RealField.to_sympy"]], "to_sympy() (sympy.polys.domains.domain.domain method)": [[211, "sympy.polys.domains.domain.Domain.to_sympy"]], "to_sympy() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[211, "sympy.polys.domains.gaussiandomains.GaussianDomain.to_sympy"]], "to_sympy_dict() (sympy.polys.polyclasses.anp method)": [[211, "sympy.polys.polyclasses.ANP.to_sympy_dict"]], "to_sympy_dict() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.to_sympy_dict"]], "to_sympy_list() (sympy.polys.polyclasses.anp method)": [[211, "sympy.polys.polyclasses.ANP.to_sympy_list"]], "to_sympy_list() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.to_sympy_list"]], "to_tuple() (sympy.polys.polyclasses.anp method)": [[211, "sympy.polys.polyclasses.ANP.to_tuple"]], "to_tuple() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.to_tuple"]], "total_degree() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.total_degree"]], "tp (sympy.polys.domains.domain.domain property)": [[211, "sympy.polys.domains.domain.Domain.tp"]], "transform() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.transform"]], "trunc() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.trunc"]], "unify() (sympy.polys.domains.domain.domain method)": [[211, "sympy.polys.domains.domain.Domain.unify"]], "unify() (sympy.polys.polyclasses.anp method)": [[211, "sympy.polys.polyclasses.ANP.unify"]], "unify() (sympy.polys.polyclasses.dmp method)": [[211, "sympy.polys.polyclasses.DMP.unify"]], "vfield() (in module sympy.polys.fields)": [[211, "sympy.polys.fields.vfield"]], "vring() (in module sympy.polys.rings)": [[211, "sympy.polys.rings.vring"]], "xfield() (in module sympy.polys.fields)": [[211, "sympy.polys.fields.xfield"]], "xring() (in module sympy.polys.rings)": [[211, "sympy.polys.rings.xring"]], "zero (sympy.polys.domains.domain.domain attribute)": [[211, "sympy.polys.domains.domain.Domain.zero"]], "basepolynomialerror (class in sympy.polys.polyerrors)": [[213, "sympy.polys.polyerrors.BasePolynomialError"]], "coercionfailed (class in sympy.polys.polyerrors)": [[213, "sympy.polys.polyerrors.CoercionFailed"]], "computationfailed (class in sympy.polys.polyerrors)": [[213, "sympy.polys.polyerrors.ComputationFailed"]], "domainerror (class in sympy.polys.polyerrors)": [[213, "sympy.polys.polyerrors.DomainError"]], "evaluationfailed (class in sympy.polys.polyerrors)": [[213, "sympy.polys.polyerrors.EvaluationFailed"]], "exactquotientfailed (class in sympy.polys.polyerrors)": [[213, "sympy.polys.polyerrors.ExactQuotientFailed"]], "extraneousfactors (class in sympy.polys.polyerrors)": [[213, "sympy.polys.polyerrors.ExtraneousFactors"]], "flagerror (class in sympy.polys.polyerrors)": [[213, "sympy.polys.polyerrors.FlagError"]], "generatorserror (class in sympy.polys.polyerrors)": [[213, "sympy.polys.polyerrors.GeneratorsError"]], "generatorsneeded (class in sympy.polys.polyerrors)": [[213, "sympy.polys.polyerrors.GeneratorsNeeded"]], "heuristicgcdfailed (class in sympy.polys.polyerrors)": [[213, "sympy.polys.polyerrors.HeuristicGCDFailed"]], "homomorphismfailed (class in sympy.polys.polyerrors)": [[213, "sympy.polys.polyerrors.HomomorphismFailed"]], "isomorphismfailed (class in sympy.polys.polyerrors)": [[213, "sympy.polys.polyerrors.IsomorphismFailed"]], "multivariatepolynomialerror (class in sympy.polys.polyerrors)": [[213, "sympy.polys.polyerrors.MultivariatePolynomialError"]], "notalgebraic (class in sympy.polys.polyerrors)": [[213, "sympy.polys.polyerrors.NotAlgebraic"]], "notinvertible (class in sympy.polys.polyerrors)": [[213, "sympy.polys.polyerrors.NotInvertible"]], "notreversible (class in sympy.polys.polyerrors)": [[213, "sympy.polys.polyerrors.NotReversible"]], "operationnotsupported (class in sympy.polys.polyerrors)": [[213, "sympy.polys.polyerrors.OperationNotSupported"]], "optionerror (class in sympy.polys.polyerrors)": [[213, "sympy.polys.polyerrors.OptionError"]], "options (class in sympy.polys.polyoptions)": [[213, "sympy.polys.polyoptions.Options"]], "polificationfailed (class in sympy.polys.polyerrors)": [[213, "sympy.polys.polyerrors.PolificationFailed"]], "polynomialerror (class in sympy.polys.polyerrors)": [[213, "sympy.polys.polyerrors.PolynomialError"]], "refinementfailed (class in sympy.polys.polyerrors)": [[213, "sympy.polys.polyerrors.RefinementFailed"]], "unificationfailed (class in sympy.polys.polyerrors)": [[213, "sympy.polys.polyerrors.UnificationFailed"]], "univariatepolynomialerror (class in sympy.polys.polyerrors)": [[213, "sympy.polys.polyerrors.UnivariatePolynomialError"]], "_modgcd_multivariate_p() (in module sympy.polys.modulargcd)": [[213, "sympy.polys.modulargcd._modgcd_multivariate_p"]], "build_options() (in module sympy.polys.polyoptions)": [[213, "sympy.polys.polyoptions.build_options"]], "clone() (sympy.polys.polyoptions.options method)": [[213, "sympy.polys.polyoptions.Options.clone"]], "dmp_lc() (in module sympy.polys.densebasic)": [[213, "sympy.polys.densebasic.dmp_LC"]], "dmp_tc() (in module sympy.polys.densebasic)": [[213, "sympy.polys.densebasic.dmp_TC"]], "dmp_abs() (in module sympy.polys.densearith)": [[213, "sympy.polys.densearith.dmp_abs"]], "dmp_add() (in module sympy.polys.densearith)": [[213, "sympy.polys.densearith.dmp_add"]], "dmp_add_ground() (in module sympy.polys.densearith)": [[213, "sympy.polys.densearith.dmp_add_ground"]], "dmp_add_mul() (in module sympy.polys.densearith)": [[213, "sympy.polys.densearith.dmp_add_mul"]], "dmp_add_term() (in module sympy.polys.densearith)": [[213, "sympy.polys.densearith.dmp_add_term"]], "dmp_apply_pairs() (in module sympy.polys.densebasic)": [[213, "sympy.polys.densebasic.dmp_apply_pairs"]], "dmp_cancel() (in module sympy.polys.euclidtools)": [[213, "sympy.polys.euclidtools.dmp_cancel"]], "dmp_clear_denoms() (in module sympy.polys.densetools)": [[213, "sympy.polys.densetools.dmp_clear_denoms"]], "dmp_compose() (in module sympy.polys.densetools)": [[213, "sympy.polys.densetools.dmp_compose"]], "dmp_content() (in module sympy.polys.euclidtools)": [[213, "sympy.polys.euclidtools.dmp_content"]], "dmp_convert() (in module sympy.polys.densebasic)": [[213, "sympy.polys.densebasic.dmp_convert"]], "dmp_copy() (in module sympy.polys.densebasic)": [[213, "sympy.polys.densebasic.dmp_copy"]], "dmp_deflate() (in module sympy.polys.densebasic)": [[213, "sympy.polys.densebasic.dmp_deflate"]], "dmp_degree() (in module sympy.polys.densebasic)": [[213, "sympy.polys.densebasic.dmp_degree"]], "dmp_degree_in() (in module sympy.polys.densebasic)": [[213, "sympy.polys.densebasic.dmp_degree_in"]], "dmp_degree_list() (in module sympy.polys.densebasic)": [[213, "sympy.polys.densebasic.dmp_degree_list"]], "dmp_diff() (in module sympy.polys.densetools)": [[213, "sympy.polys.densetools.dmp_diff"]], "dmp_diff_eval_in() (in module sympy.polys.densetools)": [[213, "sympy.polys.densetools.dmp_diff_eval_in"]], "dmp_diff_in() (in module sympy.polys.densetools)": [[213, "sympy.polys.densetools.dmp_diff_in"]], "dmp_discriminant() (in module sympy.polys.euclidtools)": [[213, "sympy.polys.euclidtools.dmp_discriminant"]], "dmp_div() (in module sympy.polys.densearith)": [[213, "sympy.polys.densearith.dmp_div"]], "dmp_eject() (in module sympy.polys.densebasic)": [[213, "sympy.polys.densebasic.dmp_eject"]], "dmp_euclidean_prs() (in module sympy.polys.euclidtools)": [[213, "sympy.polys.euclidtools.dmp_euclidean_prs"]], "dmp_eval() (in module sympy.polys.densetools)": [[213, "sympy.polys.densetools.dmp_eval"]], "dmp_eval_in() (in module sympy.polys.densetools)": [[213, "sympy.polys.densetools.dmp_eval_in"]], "dmp_eval_tail() (in module sympy.polys.densetools)": [[213, "sympy.polys.densetools.dmp_eval_tail"]], "dmp_exclude() (in module sympy.polys.densebasic)": [[213, "sympy.polys.densebasic.dmp_exclude"]], "dmp_expand() (in module sympy.polys.densearith)": [[213, "sympy.polys.densearith.dmp_expand"]], "dmp_exquo() (in module sympy.polys.densearith)": [[213, "sympy.polys.densearith.dmp_exquo"]], "dmp_exquo_ground() (in module sympy.polys.densearith)": [[213, "sympy.polys.densearith.dmp_exquo_ground"]], "dmp_ext_factor() (in module sympy.polys.factortools)": [[213, "sympy.polys.factortools.dmp_ext_factor"]], "dmp_factor_list() (in module sympy.polys.factortools)": [[213, "sympy.polys.factortools.dmp_factor_list"]], "dmp_factor_list_include() (in module sympy.polys.factortools)": [[213, "sympy.polys.factortools.dmp_factor_list_include"]], "dmp_ff_div() (in module sympy.polys.densearith)": [[213, "sympy.polys.densearith.dmp_ff_div"]], "dmp_ff_prs_gcd() (in module sympy.polys.euclidtools)": [[213, "sympy.polys.euclidtools.dmp_ff_prs_gcd"]], "dmp_from_dict() (in module sympy.polys.densebasic)": [[213, "sympy.polys.densebasic.dmp_from_dict"]], "dmp_from_sympy() (in module sympy.polys.densebasic)": [[213, "sympy.polys.densebasic.dmp_from_sympy"]], "dmp_gcd() (in module sympy.polys.euclidtools)": [[213, "sympy.polys.euclidtools.dmp_gcd"]], "dmp_gcdex() (in module sympy.polys.euclidtools)": [[213, "sympy.polys.euclidtools.dmp_gcdex"]], "dmp_ground() (in module sympy.polys.densebasic)": [[213, "sympy.polys.densebasic.dmp_ground"]], "dmp_ground_lc() (in module sympy.polys.densebasic)": [[213, "sympy.polys.densebasic.dmp_ground_LC"]], "dmp_ground_tc() (in module sympy.polys.densebasic)": [[213, "sympy.polys.densebasic.dmp_ground_TC"]], "dmp_ground_content() (in module sympy.polys.densetools)": [[213, "sympy.polys.densetools.dmp_ground_content"]], "dmp_ground_extract() (in module sympy.polys.densetools)": [[213, "sympy.polys.densetools.dmp_ground_extract"]], "dmp_ground_monic() (in module sympy.polys.densetools)": [[213, "sympy.polys.densetools.dmp_ground_monic"]], "dmp_ground_nth() (in module sympy.polys.densebasic)": [[213, "sympy.polys.densebasic.dmp_ground_nth"]], "dmp_ground_p() (in module sympy.polys.densebasic)": [[213, "sympy.polys.densebasic.dmp_ground_p"]], "dmp_ground_primitive() (in module sympy.polys.densetools)": [[213, "sympy.polys.densetools.dmp_ground_primitive"]], "dmp_ground_trunc() (in module sympy.polys.densetools)": [[213, "sympy.polys.densetools.dmp_ground_trunc"]], "dmp_grounds() (in module sympy.polys.densebasic)": [[213, "sympy.polys.densebasic.dmp_grounds"]], "dmp_half_gcdex() (in module sympy.polys.euclidtools)": [[213, "sympy.polys.euclidtools.dmp_half_gcdex"]], "dmp_include() (in module sympy.polys.densebasic)": [[213, "sympy.polys.densebasic.dmp_include"]], "dmp_inflate() (in module sympy.polys.densebasic)": [[213, "sympy.polys.densebasic.dmp_inflate"]], "dmp_inject() (in module sympy.polys.densebasic)": [[213, "sympy.polys.densebasic.dmp_inject"]], "dmp_inner_gcd() (in module sympy.polys.euclidtools)": [[213, "sympy.polys.euclidtools.dmp_inner_gcd"]], "dmp_inner_subresultants() (in module sympy.polys.euclidtools)": [[213, "sympy.polys.euclidtools.dmp_inner_subresultants"]], "dmp_integrate() (in module sympy.polys.densetools)": [[213, "sympy.polys.densetools.dmp_integrate"]], "dmp_integrate_in() (in module sympy.polys.densetools)": [[213, "sympy.polys.densetools.dmp_integrate_in"]], "dmp_invert() (in module sympy.polys.euclidtools)": [[213, "sympy.polys.euclidtools.dmp_invert"]], "dmp_irreducible_p() (in module sympy.polys.factortools)": [[213, "sympy.polys.factortools.dmp_irreducible_p"]], "dmp_l1_norm() (in module sympy.polys.densearith)": [[213, "sympy.polys.densearith.dmp_l1_norm"]], "dmp_lcm() (in module sympy.polys.euclidtools)": [[213, "sympy.polys.euclidtools.dmp_lcm"]], "dmp_lift() (in module sympy.polys.densetools)": [[213, "sympy.polys.densetools.dmp_lift"]], "dmp_list_terms() (in module sympy.polys.densebasic)": [[213, "sympy.polys.densebasic.dmp_list_terms"]], "dmp_max_norm() (in module sympy.polys.densearith)": [[213, "sympy.polys.densearith.dmp_max_norm"]], "dmp_mul() (in module sympy.polys.densearith)": [[213, "sympy.polys.densearith.dmp_mul"]], "dmp_mul_ground() (in module sympy.polys.densearith)": [[213, "sympy.polys.densearith.dmp_mul_ground"]], "dmp_mul_term() (in module sympy.polys.densearith)": [[213, "sympy.polys.densearith.dmp_mul_term"]], "dmp_multi_deflate() (in module sympy.polys.densebasic)": [[213, "sympy.polys.densebasic.dmp_multi_deflate"]], "dmp_neg() (in module sympy.polys.densearith)": [[213, "sympy.polys.densearith.dmp_neg"]], "dmp_negative_p() (in module sympy.polys.densebasic)": [[213, "sympy.polys.densebasic.dmp_negative_p"]], "dmp_nest() (in module sympy.polys.densebasic)": [[213, "sympy.polys.densebasic.dmp_nest"]], "dmp_normal() (in module sympy.polys.densebasic)": [[213, "sympy.polys.densebasic.dmp_normal"]], "dmp_nth() (in module sympy.polys.densebasic)": [[213, "sympy.polys.densebasic.dmp_nth"]], "dmp_one() (in module sympy.polys.densebasic)": [[213, "sympy.polys.densebasic.dmp_one"]], "dmp_one_p() (in module sympy.polys.densebasic)": [[213, "sympy.polys.densebasic.dmp_one_p"]], "dmp_pdiv() (in module sympy.polys.densearith)": [[213, "sympy.polys.densearith.dmp_pdiv"]], "dmp_permute() (in module sympy.polys.densebasic)": [[213, "sympy.polys.densebasic.dmp_permute"]], "dmp_pexquo() (in module sympy.polys.densearith)": [[213, "sympy.polys.densearith.dmp_pexquo"]], "dmp_positive_p() (in module sympy.polys.densebasic)": [[213, "sympy.polys.densebasic.dmp_positive_p"]], "dmp_pow() (in module sympy.polys.densearith)": [[213, "sympy.polys.densearith.dmp_pow"]], "dmp_pquo() (in module sympy.polys.densearith)": [[213, "sympy.polys.densearith.dmp_pquo"]], "dmp_prem() (in module sympy.polys.densearith)": [[213, "sympy.polys.densearith.dmp_prem"]], "dmp_primitive() (in module sympy.polys.euclidtools)": [[213, "sympy.polys.euclidtools.dmp_primitive"]], "dmp_primitive_prs() (in module sympy.polys.euclidtools)": [[213, "sympy.polys.euclidtools.dmp_primitive_prs"]], "dmp_prs_resultant() (in module sympy.polys.euclidtools)": [[213, "sympy.polys.euclidtools.dmp_prs_resultant"]], "dmp_qq_collins_resultant() (in module sympy.polys.euclidtools)": [[213, "sympy.polys.euclidtools.dmp_qq_collins_resultant"]], "dmp_qq_heu_gcd() (in module sympy.polys.euclidtools)": [[213, "sympy.polys.euclidtools.dmp_qq_heu_gcd"]], "dmp_quo() (in module sympy.polys.densearith)": [[213, "sympy.polys.densearith.dmp_quo"]], "dmp_quo_ground() (in module sympy.polys.densearith)": [[213, "sympy.polys.densearith.dmp_quo_ground"]], "dmp_raise() (in module sympy.polys.densebasic)": [[213, "sympy.polys.densebasic.dmp_raise"]], "dmp_rem() (in module sympy.polys.densearith)": [[213, "sympy.polys.densearith.dmp_rem"]], "dmp_resultant() (in module sympy.polys.euclidtools)": [[213, "sympy.polys.euclidtools.dmp_resultant"]], "dmp_revert() (in module sympy.polys.densetools)": [[213, "sympy.polys.densetools.dmp_revert"]], "dmp_rr_div() (in module sympy.polys.densearith)": [[213, "sympy.polys.densearith.dmp_rr_div"]], "dmp_rr_prs_gcd() (in module sympy.polys.euclidtools)": [[213, "sympy.polys.euclidtools.dmp_rr_prs_gcd"]], "dmp_slice() (in module sympy.polys.densebasic)": [[213, "sympy.polys.densebasic.dmp_slice"]], "dmp_sqr() (in module sympy.polys.densearith)": [[213, "sympy.polys.densearith.dmp_sqr"]], "dmp_strip() (in module sympy.polys.densebasic)": [[213, "sympy.polys.densebasic.dmp_strip"]], "dmp_sub() (in module sympy.polys.densearith)": [[213, "sympy.polys.densearith.dmp_sub"]], "dmp_sub_ground() (in module sympy.polys.densearith)": [[213, "sympy.polys.densearith.dmp_sub_ground"]], "dmp_sub_mul() (in module sympy.polys.densearith)": [[213, "sympy.polys.densearith.dmp_sub_mul"]], "dmp_sub_term() (in module sympy.polys.densearith)": [[213, "sympy.polys.densearith.dmp_sub_term"]], "dmp_subresultants() (in module sympy.polys.euclidtools)": [[213, "sympy.polys.euclidtools.dmp_subresultants"]], "dmp_swap() (in module sympy.polys.densebasic)": [[213, "sympy.polys.densebasic.dmp_swap"]], "dmp_terms_gcd() (in module sympy.polys.densebasic)": [[213, "sympy.polys.densebasic.dmp_terms_gcd"]], "dmp_to_dict() (in module sympy.polys.densebasic)": [[213, "sympy.polys.densebasic.dmp_to_dict"]], "dmp_to_tuple() (in module sympy.polys.densebasic)": [[213, "sympy.polys.densebasic.dmp_to_tuple"]], "dmp_trial_division() (in module sympy.polys.factortools)": [[213, "sympy.polys.factortools.dmp_trial_division"]], "dmp_true_lt() (in module sympy.polys.densebasic)": [[213, "sympy.polys.densebasic.dmp_true_LT"]], "dmp_trunc() (in module sympy.polys.densetools)": [[213, "sympy.polys.densetools.dmp_trunc"]], "dmp_validate() (in module sympy.polys.densebasic)": [[213, "sympy.polys.densebasic.dmp_validate"]], "dmp_zero() (in module sympy.polys.densebasic)": [[213, "sympy.polys.densebasic.dmp_zero"]], "dmp_zero_p() (in module sympy.polys.densebasic)": [[213, "sympy.polys.densebasic.dmp_zero_p"]], "dmp_zeros() (in module sympy.polys.densebasic)": [[213, "sympy.polys.densebasic.dmp_zeros"]], "dmp_zz_collins_resultant() (in module sympy.polys.euclidtools)": [[213, "sympy.polys.euclidtools.dmp_zz_collins_resultant"]], "dmp_zz_diophantine() (in module sympy.polys.factortools)": [[213, "sympy.polys.factortools.dmp_zz_diophantine"]], "dmp_zz_factor() (in module sympy.polys.factortools)": [[213, "sympy.polys.factortools.dmp_zz_factor"]], "dmp_zz_heu_gcd() (in module sympy.polys.euclidtools)": [[213, "sympy.polys.euclidtools.dmp_zz_heu_gcd"]], "dmp_zz_mignotte_bound() (in module sympy.polys.factortools)": [[213, "sympy.polys.factortools.dmp_zz_mignotte_bound"]], "dmp_zz_modular_resultant() (in module sympy.polys.euclidtools)": [[213, "sympy.polys.euclidtools.dmp_zz_modular_resultant"]], "dmp_zz_wang() (in module sympy.polys.factortools)": [[213, "sympy.polys.factortools.dmp_zz_wang"]], "dmp_zz_wang_hensel_lifting() (in module sympy.polys.factortools)": [[213, "sympy.polys.factortools.dmp_zz_wang_hensel_lifting"]], "dmp_zz_wang_lead_coeffs() (in module sympy.polys.factortools)": [[213, "sympy.polys.factortools.dmp_zz_wang_lead_coeffs"]], "dmp_zz_wang_non_divisors() (in module sympy.polys.factortools)": [[213, "sympy.polys.factortools.dmp_zz_wang_non_divisors"]], "dmp_zz_wang_test_points() (in module sympy.polys.factortools)": [[213, "sympy.polys.factortools.dmp_zz_wang_test_points"]], "dup_content() (in module sympy.polys.densetools)": [[213, "sympy.polys.densetools.dup_content"]], "dup_cyclotomic_p() (in module sympy.polys.factortools)": [[213, "sympy.polys.factortools.dup_cyclotomic_p"]], "dup_decompose() (in module sympy.polys.densetools)": [[213, "sympy.polys.densetools.dup_decompose"]], "dup_extract() (in module sympy.polys.densetools)": [[213, "sympy.polys.densetools.dup_extract"]], "dup_gf_factor() (in module sympy.polys.factortools)": [[213, "sympy.polys.factortools.dup_gf_factor"]], "dup_lshift() (in module sympy.polys.densearith)": [[213, "sympy.polys.densearith.dup_lshift"]], "dup_mirror() (in module sympy.polys.densetools)": [[213, "sympy.polys.densetools.dup_mirror"]], "dup_monic() (in module sympy.polys.densetools)": [[213, "sympy.polys.densetools.dup_monic"]], "dup_primitive() (in module sympy.polys.densetools)": [[213, "sympy.polys.densetools.dup_primitive"]], "dup_random() (in module sympy.polys.densebasic)": [[213, "sympy.polys.densebasic.dup_random"]], "dup_real_imag() (in module sympy.polys.densetools)": [[213, "sympy.polys.densetools.dup_real_imag"]], "dup_reverse() (in module sympy.polys.densebasic)": [[213, "sympy.polys.densebasic.dup_reverse"]], "dup_rshift() (in module sympy.polys.densearith)": [[213, "sympy.polys.densearith.dup_rshift"]], "dup_scale() (in module sympy.polys.densetools)": [[213, "sympy.polys.densetools.dup_scale"]], "dup_shift() (in module sympy.polys.densetools)": [[213, "sympy.polys.densetools.dup_shift"]], "dup_sign_variations() (in module sympy.polys.densetools)": [[213, "sympy.polys.densetools.dup_sign_variations"]], "dup_transform() (in module sympy.polys.densetools)": [[213, "sympy.polys.densetools.dup_transform"]], "dup_zz_cyclotomic_factor() (in module sympy.polys.factortools)": [[213, "sympy.polys.factortools.dup_zz_cyclotomic_factor"]], "dup_zz_cyclotomic_poly() (in module sympy.polys.factortools)": [[213, "sympy.polys.factortools.dup_zz_cyclotomic_poly"]], "dup_zz_factor() (in module sympy.polys.factortools)": [[213, "sympy.polys.factortools.dup_zz_factor"]], "dup_zz_factor_sqf() (in module sympy.polys.factortools)": [[213, "sympy.polys.factortools.dup_zz_factor_sqf"]], "dup_zz_hensel_lift() (in module sympy.polys.factortools)": [[213, "sympy.polys.factortools.dup_zz_hensel_lift"]], "dup_zz_hensel_step() (in module sympy.polys.factortools)": [[213, "sympy.polys.factortools.dup_zz_hensel_step"]], "dup_zz_irreducible_p() (in module sympy.polys.factortools)": [[213, "sympy.polys.factortools.dup_zz_irreducible_p"]], "dup_zz_zassenhaus() (in module sympy.polys.factortools)": [[213, "sympy.polys.factortools.dup_zz_zassenhaus"]], "func_field_modgcd() (in module sympy.polys.modulargcd)": [[213, "sympy.polys.modulargcd.func_field_modgcd"]], "gf_lc() (in module sympy.polys.galoistools)": [[213, "sympy.polys.galoistools.gf_LC"]], "gf_qbasis() (in module sympy.polys.galoistools)": [[213, "sympy.polys.galoistools.gf_Qbasis"]], "gf_qmatrix() (in module sympy.polys.galoistools)": [[213, "sympy.polys.galoistools.gf_Qmatrix"]], "gf_tc() (in module sympy.polys.galoistools)": [[213, "sympy.polys.galoistools.gf_TC"]], "gf_add() (in module sympy.polys.galoistools)": [[213, "sympy.polys.galoistools.gf_add"]], "gf_add_ground() (in module sympy.polys.galoistools)": [[213, "sympy.polys.galoistools.gf_add_ground"]], "gf_add_mul() (in module sympy.polys.galoistools)": [[213, "sympy.polys.galoistools.gf_add_mul"]], "gf_berlekamp() (in module sympy.polys.galoistools)": [[213, "sympy.polys.galoistools.gf_berlekamp"]], "gf_cofactors() (in module sympy.polys.galoistools)": [[213, "sympy.polys.galoistools.gf_cofactors"]], "gf_compose() (in module sympy.polys.galoistools)": [[213, "sympy.polys.galoistools.gf_compose"]], "gf_compose_mod() (in module sympy.polys.galoistools)": [[213, "sympy.polys.galoistools.gf_compose_mod"]], "gf_crt() (in module sympy.polys.galoistools)": [[213, "sympy.polys.galoistools.gf_crt"]], "gf_crt1() (in module sympy.polys.galoistools)": [[213, "sympy.polys.galoistools.gf_crt1"]], "gf_crt2() (in module sympy.polys.galoistools)": [[213, "sympy.polys.galoistools.gf_crt2"]], "gf_csolve() (in module sympy.polys.galoistools)": [[213, "sympy.polys.galoistools.gf_csolve"]], "gf_degree() (in module sympy.polys.galoistools)": [[213, "sympy.polys.galoistools.gf_degree"]], "gf_diff() (in module sympy.polys.galoistools)": [[213, "sympy.polys.galoistools.gf_diff"]], "gf_div() (in module sympy.polys.galoistools)": [[213, "sympy.polys.galoistools.gf_div"]], "gf_eval() (in module sympy.polys.galoistools)": [[213, "sympy.polys.galoistools.gf_eval"]], "gf_expand() (in module sympy.polys.galoistools)": [[213, "sympy.polys.galoistools.gf_expand"]], "gf_exquo() (in module sympy.polys.galoistools)": [[213, "sympy.polys.galoistools.gf_exquo"]], "gf_factor() (in module sympy.polys.galoistools)": [[213, "sympy.polys.galoistools.gf_factor"]], "gf_factor_sqf() (in module sympy.polys.galoistools)": [[213, "sympy.polys.galoistools.gf_factor_sqf"]], "gf_from_dict() (in module sympy.polys.galoistools)": [[213, "sympy.polys.galoistools.gf_from_dict"]], "gf_from_int_poly() (in module sympy.polys.galoistools)": [[213, "sympy.polys.galoistools.gf_from_int_poly"]], "gf_gcd() (in module sympy.polys.galoistools)": [[213, "sympy.polys.galoistools.gf_gcd"]], "gf_gcdex() (in module sympy.polys.galoistools)": [[213, "sympy.polys.galoistools.gf_gcdex"]], "gf_int() (in module sympy.polys.galoistools)": [[213, "sympy.polys.galoistools.gf_int"]], "gf_irreducible() (in module sympy.polys.galoistools)": [[213, "sympy.polys.galoistools.gf_irreducible"]], "gf_irreducible_p() (in module sympy.polys.galoistools)": [[213, "sympy.polys.galoistools.gf_irreducible_p"]], "gf_lcm() (in module sympy.polys.galoistools)": [[213, "sympy.polys.galoistools.gf_lcm"]], "gf_lshift() (in module sympy.polys.galoistools)": [[213, "sympy.polys.galoistools.gf_lshift"]], "gf_monic() (in module sympy.polys.galoistools)": [[213, "sympy.polys.galoistools.gf_monic"]], "gf_mul() (in module sympy.polys.galoistools)": [[213, "sympy.polys.galoistools.gf_mul"]], "gf_mul_ground() (in module sympy.polys.galoistools)": [[213, "sympy.polys.galoistools.gf_mul_ground"]], "gf_multi_eval() (in module sympy.polys.galoistools)": [[213, "sympy.polys.galoistools.gf_multi_eval"]], "gf_neg() (in module sympy.polys.galoistools)": [[213, "sympy.polys.galoistools.gf_neg"]], "gf_normal() (in module sympy.polys.galoistools)": [[213, "sympy.polys.galoistools.gf_normal"]], "gf_pow() (in module sympy.polys.galoistools)": [[213, "sympy.polys.galoistools.gf_pow"]], "gf_pow_mod() (in module sympy.polys.galoistools)": [[213, "sympy.polys.galoistools.gf_pow_mod"]], "gf_quo() (in module sympy.polys.galoistools)": [[213, "sympy.polys.galoistools.gf_quo"]], "gf_quo_ground() (in module sympy.polys.galoistools)": [[213, "sympy.polys.galoistools.gf_quo_ground"]], "gf_random() (in module sympy.polys.galoistools)": [[213, "sympy.polys.galoistools.gf_random"]], "gf_rem() (in module sympy.polys.galoistools)": [[213, "sympy.polys.galoistools.gf_rem"]], "gf_rshift() (in module sympy.polys.galoistools)": [[213, "sympy.polys.galoistools.gf_rshift"]], "gf_shoup() (in module sympy.polys.galoistools)": [[213, "sympy.polys.galoistools.gf_shoup"]], "gf_sqf_list() (in module sympy.polys.galoistools)": [[213, "sympy.polys.galoistools.gf_sqf_list"]], "gf_sqf_p() (in module sympy.polys.galoistools)": [[213, "sympy.polys.galoistools.gf_sqf_p"]], "gf_sqf_part() (in module sympy.polys.galoistools)": [[213, "sympy.polys.galoistools.gf_sqf_part"]], "gf_sqr() (in module sympy.polys.galoistools)": [[213, "sympy.polys.galoistools.gf_sqr"]], "gf_strip() (in module sympy.polys.galoistools)": [[213, "sympy.polys.galoistools.gf_strip"]], "gf_sub() (in module sympy.polys.galoistools)": [[213, "sympy.polys.galoistools.gf_sub"]], "gf_sub_ground() (in module sympy.polys.galoistools)": [[213, "sympy.polys.galoistools.gf_sub_ground"]], "gf_sub_mul() (in module sympy.polys.galoistools)": [[213, "sympy.polys.galoistools.gf_sub_mul"]], "gf_to_dict() (in module sympy.polys.galoistools)": [[213, "sympy.polys.galoistools.gf_to_dict"]], "gf_to_int_poly() (in module sympy.polys.galoistools)": [[213, "sympy.polys.galoistools.gf_to_int_poly"]], "gf_trace_map() (in module sympy.polys.galoistools)": [[213, "sympy.polys.galoistools.gf_trace_map"]], "gf_trunc() (in module sympy.polys.galoistools)": [[213, "sympy.polys.galoistools.gf_trunc"]], "gf_value() (in module sympy.polys.galoistools)": [[213, "sympy.polys.galoistools.gf_value"]], "gf_zassenhaus() (in module sympy.polys.galoistools)": [[213, "sympy.polys.galoistools.gf_zassenhaus"]], "groebner() (in module sympy.polys.groebnertools)": [[213, "sympy.polys.groebnertools.groebner"]], "is_groebner() (in module sympy.polys.groebnertools)": [[213, "sympy.polys.groebnertools.is_groebner"]], "is_minimal() (in module sympy.polys.groebnertools)": [[213, "sympy.polys.groebnertools.is_minimal"]], "is_reduced() (in module sympy.polys.groebnertools)": [[213, "sympy.polys.groebnertools.is_reduced"]], "matrix_fglm() (in module sympy.polys.fglmtools)": [[213, "sympy.polys.fglmtools.matrix_fglm"]], "modgcd_bivariate() (in module sympy.polys.modulargcd)": [[213, "sympy.polys.modulargcd.modgcd_bivariate"]], "modgcd_multivariate() (in module sympy.polys.modulargcd)": [[213, "sympy.polys.modulargcd.modgcd_multivariate"]], "modgcd_univariate() (in module sympy.polys.modulargcd)": [[213, "sympy.polys.modulargcd.modgcd_univariate"]], "red_groebner() (in module sympy.polys.groebnertools)": [[213, "sympy.polys.groebnertools.red_groebner"]], "sdm_lc() (in module sympy.polys.distributedmodules)": [[213, "sympy.polys.distributedmodules.sdm_LC"]], "sdm_lm() (in module sympy.polys.distributedmodules)": [[213, "sympy.polys.distributedmodules.sdm_LM"]], "sdm_lt() (in module sympy.polys.distributedmodules)": [[213, "sympy.polys.distributedmodules.sdm_LT"]], "sdm_add() (in module sympy.polys.distributedmodules)": [[213, "sympy.polys.distributedmodules.sdm_add"]], "sdm_deg() (in module sympy.polys.distributedmodules)": [[213, "sympy.polys.distributedmodules.sdm_deg"]], "sdm_ecart() (in module sympy.polys.distributedmodules)": [[213, "sympy.polys.distributedmodules.sdm_ecart"]], "sdm_from_dict() (in module sympy.polys.distributedmodules)": [[213, "sympy.polys.distributedmodules.sdm_from_dict"]], "sdm_from_vector() (in module sympy.polys.distributedmodules)": [[213, "sympy.polys.distributedmodules.sdm_from_vector"]], "sdm_groebner() (in module sympy.polys.distributedmodules)": [[213, "sympy.polys.distributedmodules.sdm_groebner"]], "sdm_monomial_deg() (in module sympy.polys.distributedmodules)": [[213, "sympy.polys.distributedmodules.sdm_monomial_deg"]], "sdm_monomial_divides() (in module sympy.polys.distributedmodules)": [[213, "sympy.polys.distributedmodules.sdm_monomial_divides"]], "sdm_monomial_mul() (in module sympy.polys.distributedmodules)": [[213, "sympy.polys.distributedmodules.sdm_monomial_mul"]], "sdm_mul_term() (in module sympy.polys.distributedmodules)": [[213, "sympy.polys.distributedmodules.sdm_mul_term"]], "sdm_nf_mora() (in module sympy.polys.distributedmodules)": [[213, "sympy.polys.distributedmodules.sdm_nf_mora"]], "sdm_spoly() (in module sympy.polys.distributedmodules)": [[213, "sympy.polys.distributedmodules.sdm_spoly"]], "sdm_to_dict() (in module sympy.polys.distributedmodules)": [[213, "sympy.polys.distributedmodules.sdm_to_dict"]], "sdm_to_vector() (in module sympy.polys.distributedmodules)": [[213, "sympy.polys.distributedmodules.sdm_to_vector"]], "sdm_zero() (in module sympy.polys.distributedmodules)": [[213, "sympy.polys.distributedmodules.sdm_zero"]], "setup() (in module sympy.polys.polyconfig)": [[213, "sympy.polys.polyconfig.setup"]], "spoly() (in module sympy.polys.groebnertools)": [[213, "sympy.polys.groebnertools.spoly"]], "sympy.polys.polyconfig": [[213, "module-sympy.polys.polyconfig"]], "sympy.polys.polyoptions": [[213, "module-sympy.polys.polyoptions"]], "algintpowers (class in sympy.polys.numberfields.utilities)": [[215, "sympy.polys.numberfields.utilities.AlgIntPowers"]], "endomorphismring (class in sympy.polys.numberfields.modules)": [[215, "sympy.polys.numberfields.modules.EndomorphismRing"]], "innerendomorphism (class in sympy.polys.numberfields.modules)": [[215, "sympy.polys.numberfields.modules.InnerEndomorphism"]], "module (class in sympy.polys.numberfields.modules)": [[215, "sympy.polys.numberfields.modules.Module"]], "moduleelement (class in sympy.polys.numberfields.modules)": [[215, "sympy.polys.numberfields.modules.ModuleElement"]], "moduleendomorphism (class in sympy.polys.numberfields.modules)": [[215, "sympy.polys.numberfields.modules.ModuleEndomorphism"]], "modulehomomorphism (class in sympy.polys.numberfields.modules)": [[215, "sympy.polys.numberfields.modules.ModuleHomomorphism"]], "powerbasis (class in sympy.polys.numberfields.modules)": [[215, "sympy.polys.numberfields.modules.PowerBasis"]], "powerbasiselement (class in sympy.polys.numberfields.modules)": [[215, "sympy.polys.numberfields.modules.PowerBasisElement"]], "primeideal (class in sympy.polys.numberfields.primes)": [[215, "sympy.polys.numberfields.primes.PrimeIdeal"]], "qq_col (sympy.polys.numberfields.modules.moduleelement property)": [[215, "sympy.polys.numberfields.modules.ModuleElement.QQ_col"]], "qq_matrix (sympy.polys.numberfields.modules.submodule property)": [[215, "sympy.polys.numberfields.modules.Submodule.QQ_matrix"]], "submodule (class in sympy.polys.numberfields.modules)": [[215, "sympy.polys.numberfields.modules.Submodule"]], "t (sympy.polys.numberfields.modules.powerbasiselement property)": [[215, "sympy.polys.numberfields.modules.PowerBasisElement.T"]], "__add__() (sympy.polys.numberfields.modules.moduleelement method)": [[215, "sympy.polys.numberfields.modules.ModuleElement.__add__"]], "__add__() (sympy.polys.numberfields.primes.primeideal method)": [[215, "sympy.polys.numberfields.primes.PrimeIdeal.__add__"]], "__call__() (sympy.polys.numberfields.modules.module method)": [[215, "sympy.polys.numberfields.modules.Module.__call__"]], "__init__() (sympy.polys.numberfields.modules.endomorphismring method)": [[215, "sympy.polys.numberfields.modules.EndomorphismRing.__init__"]], "__init__() (sympy.polys.numberfields.modules.innerendomorphism method)": [[215, "sympy.polys.numberfields.modules.InnerEndomorphism.__init__"]], "__init__() (sympy.polys.numberfields.modules.moduleelement method)": [[215, "sympy.polys.numberfields.modules.ModuleElement.__init__"]], "__init__() (sympy.polys.numberfields.modules.moduleendomorphism method)": [[215, "sympy.polys.numberfields.modules.ModuleEndomorphism.__init__"]], "__init__() (sympy.polys.numberfields.modules.modulehomomorphism method)": [[215, "sympy.polys.numberfields.modules.ModuleHomomorphism.__init__"]], "__init__() (sympy.polys.numberfields.modules.powerbasis method)": [[215, "sympy.polys.numberfields.modules.PowerBasis.__init__"]], "__init__() (sympy.polys.numberfields.modules.submodule method)": [[215, "sympy.polys.numberfields.modules.Submodule.__init__"]], "__init__() (sympy.polys.numberfields.primes.primeideal method)": [[215, "sympy.polys.numberfields.primes.PrimeIdeal.__init__"]], "__init__() (sympy.polys.numberfields.utilities.algintpowers method)": [[215, "sympy.polys.numberfields.utilities.AlgIntPowers.__init__"]], "__mod__() (sympy.polys.numberfields.modules.moduleelement method)": [[215, "sympy.polys.numberfields.modules.ModuleElement.__mod__"]], "__mul__() (sympy.polys.numberfields.modules.moduleelement method)": [[215, "sympy.polys.numberfields.modules.ModuleElement.__mul__"]], "__mul__() (sympy.polys.numberfields.primes.primeideal method)": [[215, "sympy.polys.numberfields.primes.PrimeIdeal.__mul__"]], "add() (sympy.polys.numberfields.modules.submodule method)": [[215, "sympy.polys.numberfields.modules.Submodule.add"]], "ancestors() (sympy.polys.numberfields.modules.module method)": [[215, "sympy.polys.numberfields.modules.Module.ancestors"]], "as_expr() (sympy.polys.numberfields.modules.powerbasiselement method)": [[215, "sympy.polys.numberfields.modules.PowerBasisElement.as_expr"]], "as_submodule() (sympy.polys.numberfields.primes.primeideal method)": [[215, "sympy.polys.numberfields.primes.PrimeIdeal.as_submodule"]], "basis_element_pullbacks() (sympy.polys.numberfields.modules.submodule method)": [[215, "sympy.polys.numberfields.modules.Submodule.basis_element_pullbacks"]], "basis_elements() (sympy.polys.numberfields.modules.module method)": [[215, "sympy.polys.numberfields.modules.Module.basis_elements"]], "coeff_search() (in module sympy.polys.numberfields.utilities)": [[215, "sympy.polys.numberfields.utilities.coeff_search"]], "column() (sympy.polys.numberfields.modules.moduleelement method)": [[215, "sympy.polys.numberfields.modules.ModuleElement.column"]], "discard_before() (sympy.polys.numberfields.modules.submodule method)": [[215, "sympy.polys.numberfields.modules.Submodule.discard_before"]], "element_from_anp() (sympy.polys.numberfields.modules.powerbasis method)": [[215, "sympy.polys.numberfields.modules.PowerBasis.element_from_ANP"]], "element_from_alg_num() (sympy.polys.numberfields.modules.powerbasis method)": [[215, "sympy.polys.numberfields.modules.PowerBasis.element_from_alg_num"]], "element_from_poly() (sympy.polys.numberfields.modules.powerbasis method)": [[215, "sympy.polys.numberfields.modules.PowerBasis.element_from_poly"]], "element_from_rational() (sympy.polys.numberfields.modules.module method)": [[215, "sympy.polys.numberfields.modules.Module.element_from_rational"]], "endomorphism_ring() (sympy.polys.numberfields.modules.module method)": [[215, "sympy.polys.numberfields.modules.Module.endomorphism_ring"]], "equiv() (sympy.polys.numberfields.modules.moduleelement method)": [[215, "sympy.polys.numberfields.modules.ModuleElement.equiv"]], "extract_fundamental_discriminant() (in module sympy.polys.numberfields.utilities)": [[215, "sympy.polys.numberfields.utilities.extract_fundamental_discriminant"]], "field_isomorphism() (in module sympy.polys.numberfields.subfield)": [[215, "sympy.polys.numberfields.subfield.field_isomorphism"]], "find_min_poly() (in module sympy.polys.numberfields.modules)": [[215, "sympy.polys.numberfields.modules.find_min_poly"]], "from_int_list() (sympy.polys.numberfields.modules.moduleelement class method)": [[215, "sympy.polys.numberfields.modules.ModuleElement.from_int_list"]], "galois_group() (in module sympy.polys.numberfields.galoisgroups)": [[215, "sympy.polys.numberfields.galoisgroups.galois_group"]], "generator (sympy.polys.numberfields.modules.powerbasiselement property)": [[215, "sympy.polys.numberfields.modules.PowerBasisElement.generator"]], "get_num_denom() (in module sympy.polys.numberfields.utilities)": [[215, "sympy.polys.numberfields.utilities.get_num_denom"]], "inner_endomorphism() (sympy.polys.numberfields.modules.endomorphismring method)": [[215, "sympy.polys.numberfields.modules.EndomorphismRing.inner_endomorphism"]], "is_compat() (sympy.polys.numberfields.modules.moduleelement method)": [[215, "sympy.polys.numberfields.modules.ModuleElement.is_compat"]], "is_compat_col() (sympy.polys.numberfields.modules.module method)": [[215, "sympy.polys.numberfields.modules.Module.is_compat_col"]], "is_inert (sympy.polys.numberfields.primes.primeideal property)": [[215, "sympy.polys.numberfields.primes.PrimeIdeal.is_inert"]], "is_int() (in module sympy.polys.numberfields.utilities)": [[215, "sympy.polys.numberfields.utilities.is_int"]], "is_rat() (in module sympy.polys.numberfields.utilities)": [[215, "sympy.polys.numberfields.utilities.is_rat"]], "is_rational (sympy.polys.numberfields.modules.powerbasiselement property)": [[215, "sympy.polys.numberfields.modules.PowerBasisElement.is_rational"]], "isolate() (in module sympy.polys.numberfields.utilities)": [[215, "sympy.polys.numberfields.utilities.isolate"]], "kernel() (sympy.polys.numberfields.modules.modulehomomorphism method)": [[215, "sympy.polys.numberfields.modules.ModuleHomomorphism.kernel"]], "make_mod_elt() (in module sympy.polys.numberfields.modules)": [[215, "sympy.polys.numberfields.modules.make_mod_elt"]], "matrix() (sympy.polys.numberfields.modules.modulehomomorphism method)": [[215, "sympy.polys.numberfields.modules.ModuleHomomorphism.matrix"]], "minimal_polynomial() (in module sympy.polys.numberfields.minpoly)": [[215, "sympy.polys.numberfields.minpoly.minimal_polynomial"]], "minpoly() (in module sympy.polys.numberfields.minpoly)": [[215, "sympy.polys.numberfields.minpoly.minpoly"]], "mul() (sympy.polys.numberfields.modules.submodule method)": [[215, "sympy.polys.numberfields.modules.Submodule.mul"]], "mult_tab() (sympy.polys.numberfields.modules.module method)": [[215, "sympy.polys.numberfields.modules.Module.mult_tab"]], "n (sympy.polys.numberfields.modules.module property)": [[215, "sympy.polys.numberfields.modules.Module.n"]], "n (sympy.polys.numberfields.modules.moduleelement property)": [[215, "sympy.polys.numberfields.modules.ModuleElement.n"]], "nearest_common_ancestor() (sympy.polys.numberfields.modules.module method)": [[215, "sympy.polys.numberfields.modules.Module.nearest_common_ancestor"]], "norm() (sympy.polys.numberfields.modules.powerbasiselement method)": [[215, "sympy.polys.numberfields.modules.PowerBasisElement.norm"]], "number_field (sympy.polys.numberfields.modules.module property)": [[215, "sympy.polys.numberfields.modules.Module.number_field"]], "numerator() (sympy.polys.numberfields.modules.powerbasiselement method)": [[215, "sympy.polys.numberfields.modules.PowerBasisElement.numerator"]], "one() (sympy.polys.numberfields.modules.module method)": [[215, "sympy.polys.numberfields.modules.Module.one"]], "over_power_basis() (sympy.polys.numberfields.modules.moduleelement method)": [[215, "sympy.polys.numberfields.modules.ModuleElement.over_power_basis"]], "parent (sympy.polys.numberfields.modules.module property)": [[215, "sympy.polys.numberfields.modules.Module.parent"]], "poly() (sympy.polys.numberfields.modules.powerbasiselement method)": [[215, "sympy.polys.numberfields.modules.PowerBasisElement.poly"]], "power_basis_ancestor() (sympy.polys.numberfields.modules.module method)": [[215, "sympy.polys.numberfields.modules.Module.power_basis_ancestor"]], "prime_decomp() (in module sympy.polys.numberfields.primes)": [[215, "sympy.polys.numberfields.primes.prime_decomp"]], "prime_valuation() (in module sympy.polys.numberfields.primes)": [[215, "sympy.polys.numberfields.primes.prime_valuation"]], "primitive_element() (in module sympy.polys.numberfields.subfield)": [[215, "sympy.polys.numberfields.subfield.primitive_element"]], "reduce_anp() (sympy.polys.numberfields.primes.primeideal method)": [[215, "sympy.polys.numberfields.primes.PrimeIdeal.reduce_ANP"]], "reduce_alg_num() (sympy.polys.numberfields.primes.primeideal method)": [[215, "sympy.polys.numberfields.primes.PrimeIdeal.reduce_alg_num"]], "reduce_element() (sympy.polys.numberfields.modules.submodule method)": [[215, "sympy.polys.numberfields.modules.Submodule.reduce_element"]], "reduce_element() (sympy.polys.numberfields.primes.primeideal method)": [[215, "sympy.polys.numberfields.primes.PrimeIdeal.reduce_element"]], "reduced() (sympy.polys.numberfields.modules.moduleelement method)": [[215, "sympy.polys.numberfields.modules.ModuleElement.reduced"]], "reduced() (sympy.polys.numberfields.modules.submodule method)": [[215, "sympy.polys.numberfields.modules.Submodule.reduced"]], "reduced_mod_p() (sympy.polys.numberfields.modules.moduleelement method)": [[215, "sympy.polys.numberfields.modules.ModuleElement.reduced_mod_p"]], "repr() (sympy.polys.numberfields.primes.primeideal method)": [[215, "sympy.polys.numberfields.primes.PrimeIdeal.repr"]], "represent() (sympy.polys.numberfields.modules.endomorphismring method)": [[215, "sympy.polys.numberfields.modules.EndomorphismRing.represent"]], "represent() (sympy.polys.numberfields.modules.module method)": [[215, "sympy.polys.numberfields.modules.Module.represent"]], "represent() (sympy.polys.numberfields.modules.powerbasis method)": [[215, "sympy.polys.numberfields.modules.PowerBasis.represent"]], "represent() (sympy.polys.numberfields.modules.submodule method)": [[215, "sympy.polys.numberfields.modules.Submodule.represent"]], "round_two() (in module sympy.polys.numberfields.basis)": [[215, "sympy.polys.numberfields.basis.round_two"]], "starts_with_unity() (sympy.polys.numberfields.modules.module method)": [[215, "sympy.polys.numberfields.modules.Module.starts_with_unity"]], "submodule_from_gens() (sympy.polys.numberfields.modules.module method)": [[215, "sympy.polys.numberfields.modules.Module.submodule_from_gens"]], "submodule_from_matrix() (sympy.polys.numberfields.modules.module method)": [[215, "sympy.polys.numberfields.modules.Module.submodule_from_matrix"]], "supplement_a_subspace() (in module sympy.polys.numberfields.utilities)": [[215, "sympy.polys.numberfields.utilities.supplement_a_subspace"]], "sympy.polys.numberfields.modules": [[215, "module-sympy.polys.numberfields.modules"]], "sympy.polys.numberfields.subfield": [[215, "module-sympy.polys.numberfields.subfield"]], "test_factor() (sympy.polys.numberfields.primes.primeideal method)": [[215, "sympy.polys.numberfields.primes.PrimeIdeal.test_factor"]], "to_anp() (sympy.polys.numberfields.modules.powerbasiselement method)": [[215, "sympy.polys.numberfields.modules.PowerBasisElement.to_ANP"]], "to_alg_num() (sympy.polys.numberfields.modules.powerbasiselement method)": [[215, "sympy.polys.numberfields.modules.PowerBasisElement.to_alg_num"]], "to_ancestor() (sympy.polys.numberfields.modules.moduleelement method)": [[215, "sympy.polys.numberfields.modules.ModuleElement.to_ancestor"]], "to_number_field() (in module sympy.polys.numberfields.subfield)": [[215, "sympy.polys.numberfields.subfield.to_number_field"]], "to_parent() (sympy.polys.numberfields.modules.moduleelement method)": [[215, "sympy.polys.numberfields.modules.ModuleElement.to_parent"]], "unify() (sympy.polys.numberfields.modules.moduleelement method)": [[215, "sympy.polys.numberfields.modules.ModuleElement.unify"]], "valuation() (sympy.polys.numberfields.primes.primeideal method)": [[215, "sympy.polys.numberfields.primes.PrimeIdeal.valuation"]], "whole_submodule() (sympy.polys.numberfields.modules.module method)": [[215, "sympy.polys.numberfields.modules.Module.whole_submodule"]], "zero() (sympy.polys.numberfields.modules.module method)": [[215, "sympy.polys.numberfields.modules.Module.zero"]], "complexrootof (class in sympy.polys.rootoftools)": [[216, "sympy.polys.rootoftools.ComplexRootOf"]], "ec() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.EC"]], "em() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.EM"]], "et() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.ET"]], "gradedlexorder (class in sympy.polys.orderings)": [[216, "sympy.polys.orderings.GradedLexOrder"]], "groebnerbasis (class in sympy.polys.polytools)": [[216, "sympy.polys.polytools.GroebnerBasis"]], "lc() (in module sympy.polys.polytools)": [[216, "sympy.polys.polytools.LC"]], "lc() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.LC"]], "lm() (in module sympy.polys.polytools)": [[216, "sympy.polys.polytools.LM"]], "lm() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.LM"]], "lt() (in module sympy.polys.polytools)": [[216, "sympy.polys.polytools.LT"]], "lt() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.LT"]], "lexorder (class in sympy.polys.orderings)": [[216, "sympy.polys.orderings.LexOrder"]], "monomial (class in sympy.polys.monomials)": [[216, "sympy.polys.monomials.Monomial"]], "monomialorder (class in sympy.polys.orderings)": [[216, "sympy.polys.orderings.MonomialOrder"]], "poly (class in sympy.polys.polytools)": [[216, "sympy.polys.polytools.Poly"]], "purepoly (class in sympy.polys.polytools)": [[216, "sympy.polys.polytools.PurePoly"]], "reversedgradedlexorder (class in sympy.polys.orderings)": [[216, "sympy.polys.orderings.ReversedGradedLexOrder"]], "rootof (class in sympy.polys.rootoftools)": [[216, "sympy.polys.rootoftools.RootOf"]], "rootsum (class in sympy.polys.rootoftools)": [[216, "sympy.polys.rootoftools.RootSum"]], "tc() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.TC"]], "_all_roots() (sympy.polys.rootoftools.complexrootof class method)": [[216, "sympy.polys.rootoftools.ComplexRootOf._all_roots"]], "_complexes_index() (sympy.polys.rootoftools.complexrootof class method)": [[216, "sympy.polys.rootoftools.ComplexRootOf._complexes_index"]], "_complexes_sorted() (sympy.polys.rootoftools.complexrootof class method)": [[216, "sympy.polys.rootoftools.ComplexRootOf._complexes_sorted"]], "_count_roots() (sympy.polys.rootoftools.complexrootof class method)": [[216, "sympy.polys.rootoftools.ComplexRootOf._count_roots"]], "_ensure_complexes_init() (sympy.polys.rootoftools.complexrootof method)": [[216, "sympy.polys.rootoftools.ComplexRootOf._ensure_complexes_init"]], "_ensure_reals_init() (sympy.polys.rootoftools.complexrootof method)": [[216, "sympy.polys.rootoftools.ComplexRootOf._ensure_reals_init"]], "_eval_evalf() (sympy.polys.rootoftools.complexrootof method)": [[216, "sympy.polys.rootoftools.ComplexRootOf._eval_evalf"]], "_eval_is_imaginary() (sympy.polys.rootoftools.complexrootof method)": [[216, "sympy.polys.rootoftools.ComplexRootOf._eval_is_imaginary"]], "_eval_is_real() (sympy.polys.rootoftools.complexrootof method)": [[216, "sympy.polys.rootoftools.ComplexRootOf._eval_is_real"]], "_get_complexes() (sympy.polys.rootoftools.complexrootof class method)": [[216, "sympy.polys.rootoftools.ComplexRootOf._get_complexes"]], "_get_complexes_sqf() (sympy.polys.rootoftools.complexrootof class method)": [[216, "sympy.polys.rootoftools.ComplexRootOf._get_complexes_sqf"]], "_get_interval() (sympy.polys.rootoftools.complexrootof method)": [[216, "sympy.polys.rootoftools.ComplexRootOf._get_interval"]], "_get_reals() (sympy.polys.rootoftools.complexrootof class method)": [[216, "sympy.polys.rootoftools.ComplexRootOf._get_reals"]], "_get_reals_sqf() (sympy.polys.rootoftools.complexrootof class method)": [[216, "sympy.polys.rootoftools.ComplexRootOf._get_reals_sqf"]], "_get_roots() (sympy.polys.rootoftools.complexrootof class method)": [[216, "sympy.polys.rootoftools.ComplexRootOf._get_roots"]], "_indexed_root() (sympy.polys.rootoftools.complexrootof class method)": [[216, "sympy.polys.rootoftools.ComplexRootOf._indexed_root"]], "_new() (sympy.polys.rootoftools.complexrootof class method)": [[216, "sympy.polys.rootoftools.ComplexRootOf._new"]], "_postprocess_root() (sympy.polys.rootoftools.complexrootof class method)": [[216, "sympy.polys.rootoftools.ComplexRootOf._postprocess_root"]], "_preprocess_roots() (sympy.polys.rootoftools.complexrootof class method)": [[216, "sympy.polys.rootoftools.ComplexRootOf._preprocess_roots"]], "_real_roots() (sympy.polys.rootoftools.complexrootof class method)": [[216, "sympy.polys.rootoftools.ComplexRootOf._real_roots"]], "_reals_index() (sympy.polys.rootoftools.complexrootof class method)": [[216, "sympy.polys.rootoftools.ComplexRootOf._reals_index"]], "_reals_sorted() (sympy.polys.rootoftools.complexrootof class method)": [[216, "sympy.polys.rootoftools.ComplexRootOf._reals_sorted"]], "_refine_complexes() (sympy.polys.rootoftools.complexrootof class method)": [[216, "sympy.polys.rootoftools.ComplexRootOf._refine_complexes"]], "_reset() (sympy.polys.rootoftools.complexrootof method)": [[216, "sympy.polys.rootoftools.ComplexRootOf._reset"]], "_roots_trivial() (sympy.polys.rootoftools.complexrootof class method)": [[216, "sympy.polys.rootoftools.ComplexRootOf._roots_trivial"]], "_set_interval() (sympy.polys.rootoftools.complexrootof method)": [[216, "sympy.polys.rootoftools.ComplexRootOf._set_interval"]], "abs() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.abs"]], "add() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.add"]], "add_ground() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.add_ground"]], "all_coeffs() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.all_coeffs"]], "all_monoms() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.all_monoms"]], "all_roots() (in module sympy.polys.polytools)": [[216, "sympy.polys.polytools.all_roots"]], "all_roots() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.all_roots"]], "all_roots() (sympy.polys.rootoftools.complexrootof class method)": [[216, "sympy.polys.rootoftools.ComplexRootOf.all_roots"]], "all_terms() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.all_terms"]], "andre_poly() (in module sympy.polys.appellseqs)": [[216, "sympy.polys.appellseqs.andre_poly"]], "apart() (in module sympy.polys.partfrac)": [[216, "sympy.polys.partfrac.apart"]], "apart_list() (in module sympy.polys.partfrac)": [[216, "sympy.polys.partfrac.apart_list"]], "as_dict() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.as_dict"]], "as_expr() (sympy.polys.monomials.monomial method)": [[216, "sympy.polys.monomials.Monomial.as_expr"]], "as_expr() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.as_expr"]], "as_list() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.as_list"]], "as_poly() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.as_poly"]], "assemble_partfrac_list() (in module sympy.polys.partfrac)": [[216, "sympy.polys.partfrac.assemble_partfrac_list"]], "bernoulli_c_poly() (in module sympy.polys.appellseqs)": [[216, "sympy.polys.appellseqs.bernoulli_c_poly"]], "bernoulli_poly() (in module sympy.polys.appellseqs)": [[216, "sympy.polys.appellseqs.bernoulli_poly"]], "cancel() (in module sympy.polys.polytools)": [[216, "sympy.polys.polytools.cancel"]], "cancel() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.cancel"]], "chebyshevt_poly() (in module sympy.polys.orthopolys)": [[216, "sympy.polys.orthopolys.chebyshevt_poly"]], "chebyshevu_poly() (in module sympy.polys.orthopolys)": [[216, "sympy.polys.orthopolys.chebyshevu_poly"]], "clear_cache() (sympy.polys.rootoftools.complexrootof class method)": [[216, "sympy.polys.rootoftools.ComplexRootOf.clear_cache"]], "clear_denoms() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.clear_denoms"]], "coeff_monomial() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.coeff_monomial"]], "coeffs() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.coeffs"]], "cofactors() (in module sympy.polys.polytools)": [[216, "sympy.polys.polytools.cofactors"]], "cofactors() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.cofactors"]], "compose() (in module sympy.polys.polytools)": [[216, "sympy.polys.polytools.compose"]], "compose() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.compose"]], "construct_domain() (in module sympy.polys.constructor)": [[216, "sympy.polys.constructor.construct_domain"]], "contains() (sympy.polys.polytools.groebnerbasis method)": [[216, "sympy.polys.polytools.GroebnerBasis.contains"]], "content() (in module sympy.polys.polytools)": [[216, "sympy.polys.polytools.content"]], "content() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.content"]], "count_roots() (in module sympy.polys.polytools)": [[216, "sympy.polys.polytools.count_roots"]], "count_roots() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.count_roots"]], "cyclotomic_poly() (in module sympy.polys.specialpolys)": [[216, "sympy.polys.specialpolys.cyclotomic_poly"]], "decompose() (in module sympy.polys.polytools)": [[216, "sympy.polys.polytools.decompose"]], "decompose() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.decompose"]], "deflate() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.deflate"]], "degree() (in module sympy.polys.polytools)": [[216, "sympy.polys.polytools.degree"]], "degree() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.degree"]], "degree_list() (in module sympy.polys.polytools)": [[216, "sympy.polys.polytools.degree_list"]], "degree_list() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.degree_list"]], "diff() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.diff"]], "discriminant() (in module sympy.polys.polytools)": [[216, "sympy.polys.polytools.discriminant"]], "discriminant() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.discriminant"]], "dispersion() (in module sympy.polys.dispersion)": [[216, "sympy.polys.dispersion.dispersion"]], "dispersion() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.dispersion"]], "dispersionset() (in module sympy.polys.dispersion)": [[216, "sympy.polys.dispersion.dispersionset"]], "dispersionset() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.dispersionset"]], "div() (in module sympy.polys.polytools)": [[216, "sympy.polys.polytools.div"]], "div() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.div"]], "domain (sympy.polys.polytools.poly property)": [[216, "sympy.polys.polytools.Poly.domain"]], "eject() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.eject"]], "euler_poly() (in module sympy.polys.appellseqs)": [[216, "sympy.polys.appellseqs.euler_poly"]], "eval() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.eval"]], "eval_approx() (sympy.polys.rootoftools.complexrootof method)": [[216, "sympy.polys.rootoftools.ComplexRootOf.eval_approx"]], "eval_rational() (sympy.polys.rootoftools.complexrootof method)": [[216, "sympy.polys.rootoftools.ComplexRootOf.eval_rational"]], "exclude() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.exclude"]], "exquo() (in module sympy.polys.polytools)": [[216, "sympy.polys.polytools.exquo"]], "exquo() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.exquo"]], "exquo_ground() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.exquo_ground"]], "factor() (in module sympy.polys.polytools)": [[216, "sympy.polys.polytools.factor"]], "factor_list() (in module sympy.polys.polytools)": [[216, "sympy.polys.polytools.factor_list"]], "factor_list() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.factor_list"]], "factor_list_include() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.factor_list_include"]], "fglm() (sympy.polys.polytools.groebnerbasis method)": [[216, "sympy.polys.polytools.GroebnerBasis.fglm"]], "free_symbols (sympy.polys.polytools.poly property)": [[216, "sympy.polys.polytools.Poly.free_symbols"]], "free_symbols (sympy.polys.polytools.purepoly property)": [[216, "sympy.polys.polytools.PurePoly.free_symbols"]], "free_symbols_in_domain (sympy.polys.polytools.poly property)": [[216, "sympy.polys.polytools.Poly.free_symbols_in_domain"]], "from_dict() (sympy.polys.polytools.poly class method)": [[216, "sympy.polys.polytools.Poly.from_dict"]], "from_expr() (sympy.polys.polytools.poly class method)": [[216, "sympy.polys.polytools.Poly.from_expr"]], "from_list() (sympy.polys.polytools.poly class method)": [[216, "sympy.polys.polytools.Poly.from_list"]], "from_poly() (sympy.polys.polytools.poly class method)": [[216, "sympy.polys.polytools.Poly.from_poly"]], "galois_group() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.galois_group"]], "gcd() (in module sympy.polys.polytools)": [[216, "sympy.polys.polytools.gcd"]], "gcd() (sympy.polys.monomials.monomial method)": [[216, "sympy.polys.monomials.Monomial.gcd"]], "gcd() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.gcd"]], "gcd_list() (in module sympy.polys.polytools)": [[216, "sympy.polys.polytools.gcd_list"]], "gcdex() (in module sympy.polys.polytools)": [[216, "sympy.polys.polytools.gcdex"]], "gcdex() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.gcdex"]], "gegenbauer_poly() (in module sympy.polys.orthopolys)": [[216, "sympy.polys.orthopolys.gegenbauer_poly"]], "gen (sympy.polys.polytools.poly property)": [[216, "sympy.polys.polytools.Poly.gen"]], "genocchi_poly() (in module sympy.polys.appellseqs)": [[216, "sympy.polys.appellseqs.genocchi_poly"]], "get_domain() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.get_domain"]], "get_modulus() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.get_modulus"]], "gff() (in module sympy.polys.polytools)": [[216, "sympy.polys.polytools.gff"]], "gff_list() (in module sympy.polys.polytools)": [[216, "sympy.polys.polytools.gff_list"]], "gff_list() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.gff_list"]], "groebner() (in module sympy.polys.polytools)": [[216, "sympy.polys.polytools.groebner"]], "ground_roots() (in module sympy.polys.polytools)": [[216, "sympy.polys.polytools.ground_roots"]], "ground_roots() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.ground_roots"]], "half_gcdex() (in module sympy.polys.polytools)": [[216, "sympy.polys.polytools.half_gcdex"]], "half_gcdex() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.half_gcdex"]], "has_only_gens() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.has_only_gens"]], "hermite_poly() (in module sympy.polys.orthopolys)": [[216, "sympy.polys.orthopolys.hermite_poly"]], "hermite_prob_poly() (in module sympy.polys.orthopolys)": [[216, "sympy.polys.orthopolys.hermite_prob_poly"]], "homogeneous_order() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.homogeneous_order"]], "homogenize() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.homogenize"]], "horner() (in module sympy.polys.polyfuncs)": [[216, "sympy.polys.polyfuncs.horner"]], "inject() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.inject"]], "integrate() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.integrate"]], "interpolate() (in module sympy.polys.polyfuncs)": [[216, "sympy.polys.polyfuncs.interpolate"]], "interpolating_poly() (in module sympy.polys.specialpolys)": [[216, "sympy.polys.specialpolys.interpolating_poly"]], "intervals() (in module sympy.polys.polytools)": [[216, "sympy.polys.polytools.intervals"]], "intervals() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.intervals"]], "invert() (in module sympy.polys.polytools)": [[216, "sympy.polys.polytools.invert"]], "invert() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.invert"]], "is_cyclotomic (sympy.polys.polytools.poly property)": [[216, "sympy.polys.polytools.Poly.is_cyclotomic"]], "is_ground (sympy.polys.polytools.poly property)": [[216, "sympy.polys.polytools.Poly.is_ground"]], "is_homogeneous (sympy.polys.polytools.poly property)": [[216, "sympy.polys.polytools.Poly.is_homogeneous"]], "is_irreducible (sympy.polys.polytools.poly property)": [[216, "sympy.polys.polytools.Poly.is_irreducible"]], "is_linear (sympy.polys.polytools.poly property)": [[216, "sympy.polys.polytools.Poly.is_linear"]], "is_monic (sympy.polys.polytools.poly property)": [[216, "sympy.polys.polytools.Poly.is_monic"]], "is_monomial (sympy.polys.polytools.poly property)": [[216, "sympy.polys.polytools.Poly.is_monomial"]], "is_multivariate (sympy.polys.polytools.poly property)": [[216, "sympy.polys.polytools.Poly.is_multivariate"]], "is_one (sympy.polys.polytools.poly property)": [[216, "sympy.polys.polytools.Poly.is_one"]], "is_primitive (sympy.polys.polytools.poly property)": [[216, "sympy.polys.polytools.Poly.is_primitive"]], "is_quadratic (sympy.polys.polytools.poly property)": [[216, "sympy.polys.polytools.Poly.is_quadratic"]], "is_sqf (sympy.polys.polytools.poly property)": [[216, "sympy.polys.polytools.Poly.is_sqf"]], "is_univariate (sympy.polys.polytools.poly property)": [[216, "sympy.polys.polytools.Poly.is_univariate"]], "is_zero (sympy.polys.polytools.poly property)": [[216, "sympy.polys.polytools.Poly.is_zero"]], "is_zero_dimensional (sympy.polys.polytools.groebnerbasis property)": [[216, "sympy.polys.polytools.GroebnerBasis.is_zero_dimensional"]], "is_zero_dimensional() (in module sympy.polys.polytools)": [[216, "sympy.polys.polytools.is_zero_dimensional"]], "itermonomials() (in module sympy.polys.monomials)": [[216, "sympy.polys.monomials.itermonomials"]], "jacobi_poly() (in module sympy.polys.orthopolys)": [[216, "sympy.polys.orthopolys.jacobi_poly"]], "l1_norm() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.l1_norm"]], "laguerre_poly() (in module sympy.polys.orthopolys)": [[216, "sympy.polys.orthopolys.laguerre_poly"]], "lcm() (in module sympy.polys.polytools)": [[216, "sympy.polys.polytools.lcm"]], "lcm() (sympy.polys.monomials.monomial method)": [[216, "sympy.polys.monomials.Monomial.lcm"]], "lcm() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.lcm"]], "lcm_list() (in module sympy.polys.polytools)": [[216, "sympy.polys.polytools.lcm_list"]], "legendre_poly() (in module sympy.polys.orthopolys)": [[216, "sympy.polys.orthopolys.legendre_poly"]], "length() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.length"]], "lift() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.lift"]], "ltrim() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.ltrim"]], "make_monic_over_integers_by_scaling_roots() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.make_monic_over_integers_by_scaling_roots"]], "match() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.match"]], "max_norm() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.max_norm"]], "monic() (in module sympy.polys.polytools)": [[216, "sympy.polys.polytools.monic"]], "monic() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.monic"]], "monomial_count() (in module sympy.polys.monomials)": [[216, "sympy.polys.monomials.monomial_count"]], "monoms() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.monoms"]], "mul() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.mul"]], "mul_ground() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.mul_ground"]], "neg() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.neg"]], "new() (sympy.polys.polytools.poly class method)": [[216, "sympy.polys.polytools.Poly.new"]], "new() (sympy.polys.rootoftools.rootsum class method)": [[216, "sympy.polys.rootoftools.RootSum.new"]], "norm() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.norm"]], "nroots() (in module sympy.polys.polytools)": [[216, "sympy.polys.polytools.nroots"]], "nroots() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.nroots"]], "nth() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.nth"]], "nth_power_roots_poly() (in module sympy.polys.polytools)": [[216, "sympy.polys.polytools.nth_power_roots_poly"]], "nth_power_roots_poly() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.nth_power_roots_poly"]], "one (sympy.polys.polytools.poly property)": [[216, "sympy.polys.polytools.Poly.one"]], "parallel_poly_from_expr() (in module sympy.polys.polytools)": [[216, "sympy.polys.polytools.parallel_poly_from_expr"]], "pdiv() (in module sympy.polys.polytools)": [[216, "sympy.polys.polytools.pdiv"]], "pdiv() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.pdiv"]], "per() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.per"]], "pexquo() (in module sympy.polys.polytools)": [[216, "sympy.polys.polytools.pexquo"]], "pexquo() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.pexquo"]], "poly() (in module sympy.polys.polytools)": [[216, "sympy.polys.polytools.poly"]], "poly_from_expr() (in module sympy.polys.polytools)": [[216, "sympy.polys.polytools.poly_from_expr"]], "pow() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.pow"]], "pquo() (in module sympy.polys.polytools)": [[216, "sympy.polys.polytools.pquo"]], "pquo() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.pquo"]], "prem() (in module sympy.polys.polytools)": [[216, "sympy.polys.polytools.prem"]], "prem() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.prem"]], "primitive() (in module sympy.polys.polytools)": [[216, "sympy.polys.polytools.primitive"]], "primitive() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.primitive"]], "quo() (in module sympy.polys.polytools)": [[216, "sympy.polys.polytools.quo"]], "quo() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.quo"]], "quo_ground() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.quo_ground"]], "random_poly() (in module sympy.polys.specialpolys)": [[216, "sympy.polys.specialpolys.random_poly"]], "rat_clear_denoms() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.rat_clear_denoms"]], "real_roots() (in module sympy.polys.polytools)": [[216, "sympy.polys.polytools.real_roots"]], "real_roots() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.real_roots"]], "real_roots() (sympy.polys.rootoftools.complexrootof class method)": [[216, "sympy.polys.rootoftools.ComplexRootOf.real_roots"]], "reduce() (sympy.polys.polytools.groebnerbasis method)": [[216, "sympy.polys.polytools.GroebnerBasis.reduce"]], "reduced() (in module sympy.polys.polytools)": [[216, "sympy.polys.polytools.reduced"]], "refine_root() (in module sympy.polys.polytools)": [[216, "sympy.polys.polytools.refine_root"]], "refine_root() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.refine_root"]], "rem() (in module sympy.polys.polytools)": [[216, "sympy.polys.polytools.rem"]], "rem() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.rem"]], "reorder() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.reorder"]], "replace() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.replace"]], "resultant() (in module sympy.polys.polytools)": [[216, "sympy.polys.polytools.resultant"]], "resultant() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.resultant"]], "retract() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.retract"]], "revert() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.revert"]], "root() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.root"]], "rootof() (in module sympy.polys.rootoftools)": [[216, "sympy.polys.rootoftools.rootof"]], "roots() (in module sympy.polys.polyroots)": [[216, "sympy.polys.polyroots.roots"]], "same_root() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.same_root"]], "set_domain() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.set_domain"]], "set_modulus() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.set_modulus"]], "shift() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.shift"]], "slice() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.slice"]], "spherical_bessel_fn() (in module sympy.polys.orthopolys)": [[216, "sympy.polys.orthopolys.spherical_bessel_fn"]], "sqf() (in module sympy.polys.polytools)": [[216, "sympy.polys.polytools.sqf"]], "sqf_list() (in module sympy.polys.polytools)": [[216, "sympy.polys.polytools.sqf_list"]], "sqf_list() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.sqf_list"]], "sqf_list_include() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.sqf_list_include"]], "sqf_norm() (in module sympy.polys.polytools)": [[216, "sympy.polys.polytools.sqf_norm"]], "sqf_norm() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.sqf_norm"]], "sqf_part() (in module sympy.polys.polytools)": [[216, "sympy.polys.polytools.sqf_part"]], "sqf_part() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.sqf_part"]], "sqr() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.sqr"]], "sturm() (in module sympy.polys.polytools)": [[216, "sympy.polys.polytools.sturm"]], "sturm() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.sturm"]], "sub() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.sub"]], "sub_ground() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.sub_ground"]], "subresultants() (in module sympy.polys.polytools)": [[216, "sympy.polys.polytools.subresultants"]], "subresultants() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.subresultants"]], "swinnerton_dyer_poly() (in module sympy.polys.specialpolys)": [[216, "sympy.polys.specialpolys.swinnerton_dyer_poly"]], "symmetric_poly() (in module sympy.polys.specialpolys)": [[216, "sympy.polys.specialpolys.symmetric_poly"]], "symmetrize() (in module sympy.polys.polyfuncs)": [[216, "sympy.polys.polyfuncs.symmetrize"]], "sympy.polys": [[216, "module-sympy.polys"]], "terms() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.terms"]], "terms_gcd() (in module sympy.polys.polytools)": [[216, "sympy.polys.polytools.terms_gcd"]], "terms_gcd() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.terms_gcd"]], "termwise() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.termwise"]], "to_exact() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.to_exact"]], "to_field() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.to_field"]], "to_ring() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.to_ring"]], "together() (in module sympy.polys.rationaltools)": [[216, "sympy.polys.rationaltools.together"]], "total_degree() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.total_degree"]], "transform() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.transform"]], "trunc() (in module sympy.polys.polytools)": [[216, "sympy.polys.polytools.trunc"]], "trunc() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.trunc"]], "unify() (sympy.polys.polytools.poly method)": [[216, "sympy.polys.polytools.Poly.unify"]], "unit (sympy.polys.polytools.poly property)": [[216, "sympy.polys.polytools.Poly.unit"]], "viete() (in module sympy.polys.polyfuncs)": [[216, "sympy.polys.polyfuncs.viete"]], "zero (sympy.polys.polytools.poly property)": [[216, "sympy.polys.polytools.Poly.zero"]], "_tan1() (in module sympy.polys.ring_series)": [[217, "sympy.polys.ring_series._tan1"]], "mul_xin() (in module sympy.polys.ring_series)": [[217, "sympy.polys.ring_series.mul_xin"]], "pow_xin() (in module sympy.polys.ring_series)": [[217, "sympy.polys.ring_series.pow_xin"]], "rs_lambertw() (in module sympy.polys.ring_series)": [[217, "sympy.polys.ring_series.rs_LambertW"]], "rs_asin() (in module sympy.polys.ring_series)": [[217, "sympy.polys.ring_series.rs_asin"]], "rs_atan() (in module sympy.polys.ring_series)": [[217, "sympy.polys.ring_series.rs_atan"]], "rs_atanh() (in module sympy.polys.ring_series)": [[217, "sympy.polys.ring_series.rs_atanh"]], "rs_compose_add() (in module sympy.polys.ring_series)": [[217, "sympy.polys.ring_series.rs_compose_add"]], "rs_cos() (in module sympy.polys.ring_series)": [[217, "sympy.polys.ring_series.rs_cos"]], "rs_cos_sin() (in module sympy.polys.ring_series)": [[217, "sympy.polys.ring_series.rs_cos_sin"]], "rs_cosh() (in module sympy.polys.ring_series)": [[217, "sympy.polys.ring_series.rs_cosh"]], "rs_cot() (in module sympy.polys.ring_series)": [[217, "sympy.polys.ring_series.rs_cot"]], "rs_diff() (in module sympy.polys.ring_series)": [[217, "sympy.polys.ring_series.rs_diff"]], "rs_exp() (in module sympy.polys.ring_series)": [[217, "sympy.polys.ring_series.rs_exp"]], "rs_fun() (in module sympy.polys.ring_series)": [[217, "sympy.polys.ring_series.rs_fun"]], "rs_hadamard_exp() (in module sympy.polys.ring_series)": [[217, "sympy.polys.ring_series.rs_hadamard_exp"]], "rs_integrate() (in module sympy.polys.ring_series)": [[217, "sympy.polys.ring_series.rs_integrate"]], "rs_is_puiseux() (in module sympy.polys.ring_series)": [[217, "sympy.polys.ring_series.rs_is_puiseux"]], "rs_log() (in module sympy.polys.ring_series)": [[217, "sympy.polys.ring_series.rs_log"]], "rs_mul() (in module sympy.polys.ring_series)": [[217, "sympy.polys.ring_series.rs_mul"]], "rs_newton() (in module sympy.polys.ring_series)": [[217, "sympy.polys.ring_series.rs_newton"]], "rs_nth_root() (in module sympy.polys.ring_series)": [[217, "sympy.polys.ring_series.rs_nth_root"]], "rs_pow() (in module sympy.polys.ring_series)": [[217, "sympy.polys.ring_series.rs_pow"]], "rs_puiseux() (in module sympy.polys.ring_series)": [[217, "sympy.polys.ring_series.rs_puiseux"]], "rs_puiseux2() (in module sympy.polys.ring_series)": [[217, "sympy.polys.ring_series.rs_puiseux2"]], "rs_series_from_list() (in module sympy.polys.ring_series)": [[217, "sympy.polys.ring_series.rs_series_from_list"]], "rs_series_inversion() (in module sympy.polys.ring_series)": [[217, "sympy.polys.ring_series.rs_series_inversion"]], "rs_series_reversion() (in module sympy.polys.ring_series)": [[217, "sympy.polys.ring_series.rs_series_reversion"]], "rs_sin() (in module sympy.polys.ring_series)": [[217, "sympy.polys.ring_series.rs_sin"]], "rs_sinh() (in module sympy.polys.ring_series)": [[217, "sympy.polys.ring_series.rs_sinh"]], "rs_square() (in module sympy.polys.ring_series)": [[217, "sympy.polys.ring_series.rs_square"]], "rs_subs() (in module sympy.polys.ring_series)": [[217, "sympy.polys.ring_series.rs_subs"]], "rs_tan() (in module sympy.polys.ring_series)": [[217, "sympy.polys.ring_series.rs_tan"]], "rs_tanh() (in module sympy.polys.ring_series)": [[217, "sympy.polys.ring_series.rs_tanh"]], "rs_trunc() (in module sympy.polys.ring_series)": [[217, "sympy.polys.ring_series.rs_trunc"]], "_solve_lin_sys() (in module sympy.polys.solvers)": [[218, "sympy.polys.solvers._solve_lin_sys"]], "_solve_lin_sys_component() (in module sympy.polys.solvers)": [[218, "sympy.polys.solvers._solve_lin_sys_component"]], "eqs_to_matrix() (in module sympy.polys.solvers)": [[218, "sympy.polys.solvers.eqs_to_matrix"]], "solve_lin_sys() (in module sympy.polys.solvers)": [[218, "sympy.polys.solvers.solve_lin_sys"]], "sympy.polys.solvers": [[218, "module-sympy.polys.solvers"]], "sympy_eqs_to_ring() (in module sympy.polys.solvers)": [[218, "sympy.polys.solvers.sympy_eqs_to_ring"]], "aesaraprinter (class in sympy.printing.aesaracode)": [[220, "sympy.printing.aesaracode.AesaraPrinter"]], "assignmenterror": [[220, "sympy.printing.codeprinter.AssignmentError"]], "c89codeprinter (class in sympy.printing.c)": [[220, "sympy.printing.c.C89CodePrinter"]], "c99codeprinter (class in sympy.printing.c)": [[220, "sympy.printing.c.C99CodePrinter"]], "cxx11codeprinter (class in sympy.printing.cxx)": [[220, "sympy.printing.cxx.CXX11CodePrinter"]], "cxx98codeprinter (class in sympy.printing.cxx)": [[220, "sympy.printing.cxx.CXX98CodePrinter"]], "codeprinter (class in sympy.printing.codeprinter)": [[220, "sympy.printing.codeprinter.CodePrinter"]], "fcodeprinter (class in sympy.printing.fortran)": [[220, "sympy.printing.fortran.FCodePrinter"]], "g() (in module sympy.printing.pretty.pretty_symbology)": [[220, "sympy.printing.pretty.pretty_symbology.G"], [220, "sympy.printing.pretty.pretty_symbology.g"]], "javascriptcodeprinter (class in sympy.printing.jscode)": [[220, "sympy.printing.jscode.JavascriptCodePrinter"]], "juliacodeprinter (class in sympy.printing.julia)": [[220, "sympy.printing.julia.JuliaCodePrinter"]], "lambdaprinter (class in sympy.printing.lambdarepr)": [[220, "sympy.printing.lambdarepr.LambdaPrinter"]], "latexprinter (class in sympy.printing.latex)": [[220, "sympy.printing.latex.LatexPrinter"]], "mcodeprinter (class in sympy.printing.mathematica)": [[220, "sympy.printing.mathematica.MCodePrinter"]], "maplecodeprinter (class in sympy.printing.maple)": [[220, "sympy.printing.maple.MapleCodePrinter"]], "mathmlcontentprinter (class in sympy.printing.mathml)": [[220, "sympy.printing.mathml.MathMLContentPrinter"]], "mathmlpresentationprinter (class in sympy.printing.mathml)": [[220, "sympy.printing.mathml.MathMLPresentationPrinter"]], "mathmlprinterbase (class in sympy.printing.mathml)": [[220, "sympy.printing.mathml.MathMLPrinterBase"]], "mpmathprinter (class in sympy.printing.pycode)": [[220, "sympy.printing.pycode.MpmathPrinter"]], "octavecodeprinter (class in sympy.printing.octave)": [[220, "sympy.printing.octave.OctaveCodePrinter"]], "precedence (in module sympy.printing.precedence)": [[220, "sympy.printing.precedence.PRECEDENCE"]], "precedence_functions (in module sympy.printing.precedence)": [[220, "sympy.printing.precedence.PRECEDENCE_FUNCTIONS"]], "precedence_values (in module sympy.printing.precedence)": [[220, "sympy.printing.precedence.PRECEDENCE_VALUES"]], "prettyprinter (class in sympy.printing.pretty.pretty)": [[220, "sympy.printing.pretty.pretty.PrettyPrinter"]], "printer (class in sympy.printing.printer)": [[220, "sympy.printing.printer.Printer"]], "rcodeprinter (class in sympy.printing.rcode)": [[220, "sympy.printing.rcode.RCodePrinter"]], "reprprinter (class in sympy.printing.repr)": [[220, "sympy.printing.repr.ReprPrinter"]], "rustcodeprinter (class in sympy.printing.rust)": [[220, "sympy.printing.rust.RustCodePrinter"]], "smtlibprinter (class in sympy.printing.smtlib)": [[220, "sympy.printing.smtlib.SMTLibPrinter"]], "strprinter (class in sympy.printing.str)": [[220, "sympy.printing.str.StrPrinter"]], "u() (in module sympy.printing.pretty.pretty_symbology)": [[220, "sympy.printing.pretty.pretty_symbology.U"]], "vf() (in module sympy.printing.pretty.pretty_symbology)": [[220, "sympy.printing.pretty.pretty_symbology.VF"]], "_default_settings (sympy.printing.smtlib.smtlibprinter attribute)": [[220, "sympy.printing.smtlib.SMTLibPrinter._default_settings"]], "_print() (sympy.printing.printer.printer method)": [[220, "sympy.printing.printer.Printer._print"]], "above() (sympy.printing.pretty.stringpict.stringpict method)": [[220, "sympy.printing.pretty.stringpict.stringPict.above"]], "accepted_latex_functions (in module sympy.printing.latex)": [[220, "sympy.printing.latex.accepted_latex_functions"]], "aesara_code() (in module sympy.printing.aesaracode)": [[220, "sympy.printing.aesaracode.aesara_code"]], "aesara_function() (in module sympy.printing.aesaracode)": [[220, "sympy.printing.aesaracode.aesara_function"]], "annotated() (in module sympy.printing.pretty.pretty_symbology)": [[220, "sympy.printing.pretty.pretty_symbology.annotated"]], "apply() (sympy.printing.pretty.stringpict.prettyform static method)": [[220, "sympy.printing.pretty.stringpict.prettyForm.apply"]], "atoms_table (in module sympy.printing.pretty.pretty_symbology)": [[220, "sympy.printing.pretty.pretty_symbology.atoms_table"]], "below() (sympy.printing.pretty.stringpict.stringpict method)": [[220, "sympy.printing.pretty.stringpict.stringPict.below"]], "ccode() (in module sympy.printing.c)": [[220, "sympy.printing.c.ccode"]], "cxxcode() (in module sympy.printing.codeprinter)": [[220, "sympy.printing.codeprinter.cxxcode"]], "digit_2txt (in module sympy.printing.pretty.pretty_symbology)": [[220, "sympy.printing.pretty.pretty_symbology.digit_2txt"]], "dim_handling() (in module sympy.printing.aesaracode)": [[220, "sympy.printing.aesaracode.dim_handling"]], "doprint() (sympy.printing.aesaracode.aesaraprinter method)": [[220, "sympy.printing.aesaracode.AesaraPrinter.doprint"]], "doprint() (sympy.printing.codeprinter.codeprinter method)": [[220, "sympy.printing.codeprinter.CodePrinter.doprint"]], "doprint() (sympy.printing.mathml.mathmlprinterbase method)": [[220, "sympy.printing.mathml.MathMLPrinterBase.doprint"]], "doprint() (sympy.printing.printer.printer method)": [[220, "sympy.printing.printer.Printer.doprint"]], "dotprint() (in module sympy.printing.dot)": [[220, "sympy.printing.dot.dotprint"]], "emptyprinter() (sympy.printing.repr.reprprinter method)": [[220, "sympy.printing.repr.ReprPrinter.emptyPrinter"]], "fcode() (in module sympy.printing.fortran)": [[220, "sympy.printing.fortran.fcode"]], "frac (in module sympy.printing.pretty.pretty_symbology)": [[220, "sympy.printing.pretty.pretty_symbology.frac"]], "greek_letters (in module sympy.printing.pretty.pretty_symbology)": [[220, "sympy.printing.pretty.pretty_symbology.greek_letters"]], "height() (sympy.printing.pretty.stringpict.stringpict method)": [[220, "sympy.printing.pretty.stringpict.stringPict.height"]], "hobj() (in module sympy.printing.pretty.pretty_symbology)": [[220, "sympy.printing.pretty.pretty_symbology.hobj"]], "indent_code() (sympy.printing.c.c89codeprinter method)": [[220, "sympy.printing.c.C89CodePrinter.indent_code"]], "indent_code() (sympy.printing.fortran.fcodeprinter method)": [[220, "sympy.printing.fortran.FCodePrinter.indent_code"]], "indent_code() (sympy.printing.jscode.javascriptcodeprinter method)": [[220, "sympy.printing.jscode.JavascriptCodePrinter.indent_code"]], "indent_code() (sympy.printing.julia.juliacodeprinter method)": [[220, "sympy.printing.julia.JuliaCodePrinter.indent_code"]], "indent_code() (sympy.printing.octave.octavecodeprinter method)": [[220, "sympy.printing.octave.OctaveCodePrinter.indent_code"]], "indent_code() (sympy.printing.rcode.rcodeprinter method)": [[220, "sympy.printing.rcode.RCodePrinter.indent_code"]], "indent_code() (sympy.printing.rust.rustcodeprinter method)": [[220, "sympy.printing.rust.RustCodePrinter.indent_code"]], "jscode() (in module sympy.printing.jscode)": [[220, "sympy.printing.jscode.jscode"]], "julia_code() (in module sympy.printing.julia)": [[220, "sympy.printing.julia.julia_code"]], "known_fcns_src1 (in module sympy.printing.julia)": [[220, "sympy.printing.julia.known_fcns_src1"]], "known_fcns_src1 (in module sympy.printing.octave)": [[220, "sympy.printing.octave.known_fcns_src1"]], "known_fcns_src2 (in module sympy.printing.julia)": [[220, "sympy.printing.julia.known_fcns_src2"]], "known_fcns_src2 (in module sympy.printing.octave)": [[220, "sympy.printing.octave.known_fcns_src2"]], "known_functions (in module sympy.printing.jscode)": [[220, "sympy.printing.jscode.known_functions"]], "known_functions (in module sympy.printing.mathematica)": [[220, "sympy.printing.mathematica.known_functions"]], "known_functions (in module sympy.printing.rcode)": [[220, "sympy.printing.rcode.known_functions"]], "known_functions (in module sympy.printing.rust)": [[220, "sympy.printing.rust.known_functions"]], "known_functions_c89 (in module sympy.printing.c)": [[220, "sympy.printing.c.known_functions_C89"]], "known_functions_c99 (in module sympy.printing.c)": [[220, "sympy.printing.c.known_functions_C99"]], "lambdarepr() (in module sympy.printing.lambdarepr)": [[220, "sympy.printing.lambdarepr.lambdarepr"]], "latex() (in module sympy.printing.latex)": [[220, "sympy.printing.latex.latex"]], "left() (sympy.printing.pretty.stringpict.stringpict method)": [[220, "sympy.printing.pretty.stringpict.stringPict.left"]], "leftslash() (sympy.printing.pretty.stringpict.stringpict method)": [[220, "sympy.printing.pretty.stringpict.stringPict.leftslash"]], "maple_code() (in module sympy.printing.maple)": [[220, "sympy.printing.maple.maple_code"]], "mathematica_code() (in module sympy.printing.mathematica)": [[220, "sympy.printing.mathematica.mathematica_code"]], "mathml() (in module sympy.printing.mathml)": [[220, "sympy.printing.mathml.mathml"]], "mathml_tag() (sympy.printing.mathml.mathmlcontentprinter method)": [[220, "sympy.printing.mathml.MathMLContentPrinter.mathml_tag"]], "mathml_tag() (sympy.printing.mathml.mathmlpresentationprinter method)": [[220, "sympy.printing.mathml.MathMLPresentationPrinter.mathml_tag"]], "next() (sympy.printing.pretty.stringpict.stringpict static method)": [[220, "sympy.printing.pretty.stringpict.stringPict.next"]], "octave_code() (in module sympy.printing.octave)": [[220, "sympy.printing.octave.octave_code"]], "parens() (sympy.printing.pretty.stringpict.stringpict method)": [[220, "sympy.printing.pretty.stringpict.stringPict.parens"]], "parenthesize_super() (sympy.printing.latex.latexprinter method)": [[220, "sympy.printing.latex.LatexPrinter.parenthesize_super"]], "pprint_nodes() (in module sympy.printing.tree)": [[220, "sympy.printing.tree.pprint_nodes"]], "precedence() (in module sympy.printing.precedence)": [[220, "sympy.printing.precedence.precedence"]], "pretty() (in module sympy.printing.pretty.pretty)": [[220, "sympy.printing.pretty.pretty.pretty"]], "prettyform (class in sympy.printing.pretty.stringpict)": [[220, "sympy.printing.pretty.stringpict.prettyForm"]], "pretty_atom() (in module sympy.printing.pretty.pretty_symbology)": [[220, "sympy.printing.pretty.pretty_symbology.pretty_atom"]], "pretty_print() (in module sympy.printing.pretty.pretty)": [[220, "sympy.printing.pretty.pretty.pretty_print"]], "pretty_symbol() (in module sympy.printing.pretty.pretty_symbology)": [[220, "sympy.printing.pretty.pretty_symbology.pretty_symbol"]], "pretty_try_use_unicode() (in module sympy.printing.pretty.pretty_symbology)": [[220, "sympy.printing.pretty.pretty_symbology.pretty_try_use_unicode"]], "pretty_use_unicode() (in module sympy.printing.pretty.pretty_symbology)": [[220, "sympy.printing.pretty.pretty_symbology.pretty_use_unicode"]], "preview() (in module sympy.printing.preview)": [[220, "sympy.printing.preview.preview"]], "print_ccode() (in module sympy.printing.c)": [[220, "sympy.printing.c.print_ccode"]], "print_fcode() (in module sympy.printing.fortran)": [[220, "sympy.printing.fortran.print_fcode"]], "print_gtk() (in module sympy.printing.gtk)": [[220, "sympy.printing.gtk.print_gtk"]], "print_latex() (in module sympy.printing.latex)": [[220, "sympy.printing.latex.print_latex"]], "print_maple_code() (in module sympy.printing.maple)": [[220, "sympy.printing.maple.print_maple_code"]], "print_mathml() (in module sympy.printing.mathml)": [[220, "sympy.printing.mathml.print_mathml"]], "print_node() (in module sympy.printing.tree)": [[220, "sympy.printing.tree.print_node"]], "print_rcode() (in module sympy.printing.rcode)": [[220, "sympy.printing.rcode.print_rcode"]], "print_tree() (in module sympy.printing.tree)": [[220, "sympy.printing.tree.print_tree"]], "printmethod (sympy.printing.aesaracode.aesaraprinter attribute)": [[220, "sympy.printing.aesaracode.AesaraPrinter.printmethod"]], "printmethod (sympy.printing.c.c89codeprinter attribute)": [[220, "sympy.printing.c.C89CodePrinter.printmethod"]], "printmethod (sympy.printing.c.c99codeprinter attribute)": [[220, "sympy.printing.c.C99CodePrinter.printmethod"]], "printmethod (sympy.printing.codeprinter.codeprinter attribute)": [[220, "sympy.printing.codeprinter.CodePrinter.printmethod"]], "printmethod (sympy.printing.cxx.cxx11codeprinter attribute)": [[220, "sympy.printing.cxx.CXX11CodePrinter.printmethod"]], "printmethod (sympy.printing.cxx.cxx98codeprinter attribute)": [[220, "sympy.printing.cxx.CXX98CodePrinter.printmethod"]], "printmethod (sympy.printing.fortran.fcodeprinter attribute)": [[220, "sympy.printing.fortran.FCodePrinter.printmethod"]], "printmethod (sympy.printing.jscode.javascriptcodeprinter attribute)": [[220, "sympy.printing.jscode.JavascriptCodePrinter.printmethod"]], "printmethod (sympy.printing.julia.juliacodeprinter attribute)": [[220, "sympy.printing.julia.JuliaCodePrinter.printmethod"]], "printmethod (sympy.printing.lambdarepr.lambdaprinter attribute)": [[220, "sympy.printing.lambdarepr.LambdaPrinter.printmethod"]], "printmethod (sympy.printing.latex.latexprinter attribute)": [[220, "sympy.printing.latex.LatexPrinter.printmethod"]], "printmethod (sympy.printing.maple.maplecodeprinter attribute)": [[220, "sympy.printing.maple.MapleCodePrinter.printmethod"]], "printmethod (sympy.printing.mathematica.mcodeprinter attribute)": [[220, "sympy.printing.mathematica.MCodePrinter.printmethod"]], "printmethod (sympy.printing.mathml.mathmlcontentprinter attribute)": [[220, "sympy.printing.mathml.MathMLContentPrinter.printmethod"]], "printmethod (sympy.printing.mathml.mathmlpresentationprinter attribute)": [[220, "sympy.printing.mathml.MathMLPresentationPrinter.printmethod"]], "printmethod (sympy.printing.octave.octavecodeprinter attribute)": [[220, "sympy.printing.octave.OctaveCodePrinter.printmethod"]], "printmethod (sympy.printing.pretty.pretty.prettyprinter attribute)": [[220, "sympy.printing.pretty.pretty.PrettyPrinter.printmethod"]], "printmethod (sympy.printing.printer.printer attribute)": [[220, "sympy.printing.printer.Printer.printmethod"]], "printmethod (sympy.printing.rcode.rcodeprinter attribute)": [[220, "sympy.printing.rcode.RCodePrinter.printmethod"]], "printmethod (sympy.printing.repr.reprprinter attribute)": [[220, "sympy.printing.repr.ReprPrinter.printmethod"]], "printmethod (sympy.printing.rust.rustcodeprinter attribute)": [[220, "sympy.printing.rust.RustCodePrinter.printmethod"]], "printmethod (sympy.printing.smtlib.smtlibprinter attribute)": [[220, "sympy.printing.smtlib.SMTLibPrinter.printmethod"]], "printmethod (sympy.printing.str.strprinter attribute)": [[220, "sympy.printing.str.StrPrinter.printmethod"]], "pycode() (in module sympy.printing.pycode)": [[220, "sympy.printing.pycode.pycode"]], "rcode() (in module sympy.printing.rcode)": [[220, "sympy.printing.rcode.rcode"]], "render() (sympy.printing.pretty.stringpict.stringpict method)": [[220, "sympy.printing.pretty.stringpict.stringPict.render"]], "reprify() (sympy.printing.repr.reprprinter method)": [[220, "sympy.printing.repr.ReprPrinter.reprify"]], "right() (sympy.printing.pretty.stringpict.stringpict method)": [[220, "sympy.printing.pretty.stringpict.stringPict.right"]], "root (in module sympy.printing.pretty.pretty_symbology)": [[220, "sympy.printing.pretty.pretty_symbology.root"]], "root() (sympy.printing.pretty.stringpict.stringpict method)": [[220, "sympy.printing.pretty.stringpict.stringPict.root"]], "rust_code() (in module sympy.printing.rust)": [[220, "sympy.printing.rust.rust_code"]], "set_global_settings() (sympy.printing.printer.printer class method)": [[220, "sympy.printing.printer.Printer.set_global_settings"]], "smtlib_code() (in module sympy.printing.smtlib)": [[220, "sympy.printing.smtlib.smtlib_code"]], "split_super_sub() (in module sympy.printing.conventions)": [[220, "sympy.printing.conventions.split_super_sub"]], "srepr() (in module sympy.printing.repr)": [[220, "sympy.printing.repr.srepr"]], "sstr() (in module sympy.printing.str)": [[220, "sympy.printing.str.sstr"]], "sstrrepr() (in module sympy.printing.str)": [[220, "sympy.printing.str.sstrrepr"]], "stack() (sympy.printing.pretty.stringpict.stringpict static method)": [[220, "sympy.printing.pretty.stringpict.stringPict.stack"]], "stringpict (class in sympy.printing.pretty.stringpict)": [[220, "sympy.printing.pretty.stringpict.stringPict"]], "sub (in module sympy.printing.pretty.pretty_symbology)": [[220, "sympy.printing.pretty.pretty_symbology.sub"]], "sup (in module sympy.printing.pretty.pretty_symbology)": [[220, "sympy.printing.pretty.pretty_symbology.sup"]], "symb_2txt (in module sympy.printing.pretty.pretty_symbology)": [[220, "sympy.printing.pretty.pretty_symbology.symb_2txt"]], "sympy.printing.aesaracode": [[220, "module-sympy.printing.aesaracode"]], "sympy.printing.c": [[220, "module-sympy.printing.c"]], "sympy.printing.codeprinter": [[220, "module-sympy.printing.codeprinter"]], "sympy.printing.conventions": [[220, "module-sympy.printing.conventions"]], "sympy.printing.cxx": [[220, "module-sympy.printing.cxx"]], "sympy.printing.fortran": [[220, "module-sympy.printing.fortran"]], "sympy.printing.gtk": [[220, "module-sympy.printing.gtk"]], "sympy.printing.jscode": [[220, "module-sympy.printing.jscode"]], "sympy.printing.julia": [[220, "module-sympy.printing.julia"]], "sympy.printing.lambdarepr": [[220, "module-sympy.printing.lambdarepr"]], "sympy.printing.latex": [[220, "module-sympy.printing.latex"]], "sympy.printing.maple": [[220, "module-sympy.printing.maple"]], "sympy.printing.mathematica": [[220, "module-sympy.printing.mathematica"]], "sympy.printing.mathml": [[220, "module-sympy.printing.mathml"]], "sympy.printing.octave": [[220, "module-sympy.printing.octave"]], "sympy.printing.precedence": [[220, "module-sympy.printing.precedence"]], "sympy.printing.pretty": [[220, "module-sympy.printing.pretty"]], "sympy.printing.pretty.pretty": [[220, "module-sympy.printing.pretty.pretty"]], "sympy.printing.pretty.pretty_symbology": [[220, "module-sympy.printing.pretty.pretty_symbology"]], "sympy.printing.pretty.stringpict": [[220, "module-sympy.printing.pretty.stringpict"]], "sympy.printing.preview": [[220, "module-sympy.printing.preview"]], "sympy.printing.printer": [[220, "module-sympy.printing.printer"]], "sympy.printing.pycode": [[220, "module-sympy.printing.pycode"]], "sympy.printing.python": [[220, "module-sympy.printing.python"]], "sympy.printing.rcode": [[220, "module-sympy.printing.rcode"]], "sympy.printing.repr": [[220, "module-sympy.printing.repr"]], "sympy.printing.rust": [[220, "module-sympy.printing.rust"]], "sympy.printing.smtlib": [[220, "module-sympy.printing.smtlib"]], "sympy.printing.str": [[220, "module-sympy.printing.str"]], "sympy.printing.tree": [[220, "module-sympy.printing.tree"]], "terminal_width() (sympy.printing.pretty.stringpict.stringpict method)": [[220, "sympy.printing.pretty.stringpict.stringPict.terminal_width"]], "tree() (in module sympy.printing.tree)": [[220, "sympy.printing.tree.tree"]], "vobj() (in module sympy.printing.pretty.pretty_symbology)": [[220, "sympy.printing.pretty.pretty_symbology.vobj"]], "width() (sympy.printing.pretty.stringpict.stringpict method)": [[220, "sympy.printing.pretty.stringpict.stringPict.width"]], "xobj() (in module sympy.printing.pretty.pretty_symbology)": [[220, "sympy.printing.pretty.pretty_symbology.xobj"]], "xstr() (in module sympy.printing.pretty.pretty_symbology)": [[220, "sympy.printing.pretty.pretty_symbology.xstr"]], "xsym() (in module sympy.printing.pretty.pretty_symbology)": [[220, "sympy.printing.pretty.pretty_symbology.xsym"]], "finiteformalpowerseries (class in sympy.series.formal)": [[222, "sympy.series.formal.FiniteFormalPowerSeries"]], "formalpowerseries (class in sympy.series.formal)": [[222, "sympy.series.formal.FormalPowerSeries"]], "formalpowerseriescompose (class in sympy.series.formal)": [[222, "sympy.series.formal.FormalPowerSeriesCompose"]], "formalpowerseriesinverse (class in sympy.series.formal)": [[222, "sympy.series.formal.FormalPowerSeriesInverse"]], "formalpowerseriesproduct (class in sympy.series.formal)": [[222, "sympy.series.formal.FormalPowerSeriesProduct"]], "coeff_bell() (sympy.series.formal.formalpowerseries method)": [[222, "sympy.series.formal.FormalPowerSeries.coeff_bell"]], "compose() (sympy.series.formal.formalpowerseries method)": [[222, "sympy.series.formal.FormalPowerSeries.compose"]], "compute_fps() (in module sympy.series.formal)": [[222, "sympy.series.formal.compute_fps"]], "exp_re() (in module sympy.series.formal)": [[222, "sympy.series.formal.exp_re"]], "fps() (in module sympy.series.formal)": [[222, "sympy.series.formal.fps"]], "function (sympy.series.formal.formalpowerseriescompose property)": [[222, "sympy.series.formal.FormalPowerSeriesCompose.function"]], "function (sympy.series.formal.formalpowerseriesinverse property)": [[222, "sympy.series.formal.FormalPowerSeriesInverse.function"]], "function (sympy.series.formal.formalpowerseriesproduct property)": [[222, "sympy.series.formal.FormalPowerSeriesProduct.function"]], "hyper_algorithm() (in module sympy.series.formal)": [[222, "sympy.series.formal.hyper_algorithm"]], "hyper_re() (in module sympy.series.formal)": [[222, "sympy.series.formal.hyper_re"]], "infinite (sympy.series.formal.formalpowerseries property)": [[222, "sympy.series.formal.FormalPowerSeries.infinite"]], "integrate() (sympy.series.formal.formalpowerseries method)": [[222, "sympy.series.formal.FormalPowerSeries.integrate"]], "inverse() (sympy.series.formal.formalpowerseries method)": [[222, "sympy.series.formal.FormalPowerSeries.inverse"]], "polynomial() (sympy.series.formal.formalpowerseries method)": [[222, "sympy.series.formal.FormalPowerSeries.polynomial"]], "product() (sympy.series.formal.formalpowerseries method)": [[222, "sympy.series.formal.FormalPowerSeries.product"]], "rational_algorithm() (in module sympy.series.formal)": [[222, "sympy.series.formal.rational_algorithm"]], "rational_independent() (in module sympy.series.formal)": [[222, "sympy.series.formal.rational_independent"]], "rsolve_hypergeometric() (in module sympy.series.formal)": [[222, "sympy.series.formal.rsolve_hypergeometric"]], "simplede() (in module sympy.series.formal)": [[222, "sympy.series.formal.simpleDE"]], "solve_de() (in module sympy.series.formal)": [[222, "sympy.series.formal.solve_de"]], "truncate() (sympy.series.formal.formalpowerseries method)": [[222, "sympy.series.formal.FormalPowerSeries.truncate"]], "fourierseries (class in sympy.series.fourier)": [[223, "sympy.series.fourier.FourierSeries"]], "fourier_series() (in module sympy.series.fourier)": [[223, "sympy.series.fourier.fourier_series"]], "scale() (sympy.series.fourier.fourierseries method)": [[223, "sympy.series.fourier.FourierSeries.scale"]], "scalex() (sympy.series.fourier.fourierseries method)": [[223, "sympy.series.fourier.FourierSeries.scalex"]], "shift() (sympy.series.fourier.fourierseries method)": [[223, "sympy.series.fourier.FourierSeries.shift"]], "shiftx() (sympy.series.fourier.fourierseries method)": [[223, "sympy.series.fourier.FourierSeries.shiftx"]], "sigma_approximation() (sympy.series.fourier.fourierseries method)": [[223, "sympy.series.fourier.FourierSeries.sigma_approximation"]], "truncate() (sympy.series.fourier.fourierseries method)": [[223, "sympy.series.fourier.FourierSeries.truncate"]], "difference_delta() (in module sympy.series.limitseq)": [[225, "sympy.series.limitseq.difference_delta"]], "dominant() (in module sympy.series.limitseq)": [[225, "sympy.series.limitseq.dominant"]], "limit_seq() (in module sympy.series.limitseq)": [[225, "sympy.series.limitseq.limit_seq"]], "emptysequence (class in sympy.series.sequences)": [[226, "sympy.series.sequences.EmptySequence"]], "recursiveseq (class in sympy.series.sequences)": [[226, "sympy.series.sequences.RecursiveSeq"]], "seqadd (class in sympy.series.sequences)": [[226, "sympy.series.sequences.SeqAdd"]], "seqbase (class in sympy.series.sequences)": [[226, "sympy.series.sequences.SeqBase"]], "seqformula (class in sympy.series.sequences)": [[226, "sympy.series.sequences.SeqFormula"]], "seqmul (class in sympy.series.sequences)": [[226, "sympy.series.sequences.SeqMul"]], "seqper (class in sympy.series.sequences)": [[226, "sympy.series.sequences.SeqPer"]], "coeff() (sympy.series.sequences.seqbase method)": [[226, "sympy.series.sequences.SeqBase.coeff"]], "coeff_mul() (sympy.series.sequences.emptysequence method)": [[226, "sympy.series.sequences.EmptySequence.coeff_mul"]], "coeff_mul() (sympy.series.sequences.seqbase method)": [[226, "sympy.series.sequences.SeqBase.coeff_mul"]], "coeff_mul() (sympy.series.sequences.seqformula method)": [[226, "sympy.series.sequences.SeqFormula.coeff_mul"]], "coeff_mul() (sympy.series.sequences.seqper method)": [[226, "sympy.series.sequences.SeqPer.coeff_mul"]], "find_linear_recurrence() (sympy.series.sequences.seqbase method)": [[226, "sympy.series.sequences.SeqBase.find_linear_recurrence"]], "free_symbols (sympy.series.sequences.seqbase property)": [[226, "sympy.series.sequences.SeqBase.free_symbols"]], "gen (sympy.series.sequences.seqbase property)": [[226, "sympy.series.sequences.SeqBase.gen"]], "initial (sympy.series.sequences.recursiveseq property)": [[226, "sympy.series.sequences.RecursiveSeq.initial"]], "interval (sympy.series.sequences.recursiveseq property)": [[226, "sympy.series.sequences.RecursiveSeq.interval"]], "interval (sympy.series.sequences.seqbase property)": [[226, "sympy.series.sequences.SeqBase.interval"]], "length (sympy.series.sequences.seqbase property)": [[226, "sympy.series.sequences.SeqBase.length"]], "n (sympy.series.sequences.recursiveseq property)": [[226, "sympy.series.sequences.RecursiveSeq.n"]], "recurrence (sympy.series.sequences.recursiveseq property)": [[226, "sympy.series.sequences.RecursiveSeq.recurrence"]], "reduce() (sympy.series.sequences.seqadd static method)": [[226, "sympy.series.sequences.SeqAdd.reduce"]], "reduce() (sympy.series.sequences.seqmul static method)": [[226, "sympy.series.sequences.SeqMul.reduce"]], "sequence() (in module sympy.series.sequences)": [[226, "sympy.series.sequences.sequence"]], "start (sympy.series.sequences.recursiveseq property)": [[226, "sympy.series.sequences.RecursiveSeq.start"]], "start (sympy.series.sequences.seqbase property)": [[226, "sympy.series.sequences.SeqBase.start"]], "stop (sympy.series.sequences.recursiveseq property)": [[226, "sympy.series.sequences.RecursiveSeq.stop"]], "stop (sympy.series.sequences.seqbase property)": [[226, "sympy.series.sequences.SeqBase.stop"]], "variables (sympy.series.sequences.seqbase property)": [[226, "sympy.series.sequences.SeqBase.variables"]], "y (sympy.series.sequences.recursiveseq property)": [[226, "sympy.series.sequences.RecursiveSeq.y"]], "yn (sympy.series.sequences.recursiveseq property)": [[226, "sympy.series.sequences.RecursiveSeq.yn"]], "limit (class in sympy.series.limits)": [[227, "sympy.series.limits.Limit"]], "order (class in sympy.series.order)": [[227, "sympy.series.order.Order"]], "subsset (class in sympy.series.gruntz)": [[227, "sympy.series.gruntz.SubsSet"]], "build_expression_tree() (in module sympy.series.gruntz)": [[227, "sympy.series.gruntz.build_expression_tree"]], "calculate_series() (in module sympy.series.gruntz)": [[227, "sympy.series.gruntz.calculate_series"]], "compare() (in module sympy.series.gruntz)": [[227, "sympy.series.gruntz.compare"]], "contains() (sympy.series.order.order method)": [[227, "sympy.series.order.Order.contains"]], "copy() (sympy.series.gruntz.subsset method)": [[227, "sympy.series.gruntz.SubsSet.copy"]], "do_subs() (sympy.series.gruntz.subsset method)": [[227, "sympy.series.gruntz.SubsSet.do_subs"]], "doit() (sympy.series.limits.limit method)": [[227, "sympy.series.limits.Limit.doit"]], "gruntz() (in module sympy.series.gruntz)": [[227, "sympy.series.gruntz.gruntz"]], "limit() (in module sympy.series.limits)": [[227, "sympy.series.limits.limit"]], "limitinf() (in module sympy.series.gruntz)": [[227, "sympy.series.gruntz.limitinf"]], "meets() (sympy.series.gruntz.subsset method)": [[227, "sympy.series.gruntz.SubsSet.meets"]], "mrv() (in module sympy.series.gruntz)": [[227, "sympy.series.gruntz.mrv"]], "mrv_leadterm() (in module sympy.series.gruntz)": [[227, "sympy.series.gruntz.mrv_leadterm"]], "mrv_max1() (in module sympy.series.gruntz)": [[227, "sympy.series.gruntz.mrv_max1"]], "mrv_max3() (in module sympy.series.gruntz)": [[227, "sympy.series.gruntz.mrv_max3"]], "residue() (in module sympy.series.residues)": [[227, "sympy.series.residues.residue"]], "rewrite() (in module sympy.series.gruntz)": [[227, "sympy.series.gruntz.rewrite"]], "richardson() (in module sympy.series.acceleration)": [[227, "sympy.series.acceleration.richardson"]], "series() (in module sympy.series.series)": [[227, "sympy.series.series.series"]], "shanks() (in module sympy.series.acceleration)": [[227, "sympy.series.acceleration.shanks"]], "sign() (in module sympy.series.gruntz)": [[227, "sympy.series.gruntz.sign"]], "union() (sympy.series.gruntz.subsset method)": [[227, "sympy.series.gruntz.SubsSet.union"]], "cartesiancomplexregion (class in sympy.sets.fancysets)": [[228, "sympy.sets.fancysets.CartesianComplexRegion"]], "complement (class in sympy.sets.sets)": [[228, "sympy.sets.sets.Complement"]], "complexregion (class in sympy.sets.fancysets)": [[228, "sympy.sets.fancysets.ComplexRegion"]], "complexes (class in sympy.sets.fancysets)": [[228, "sympy.sets.fancysets.Complexes"]], "conditionset (class in sympy.sets.conditionset)": [[228, "sympy.sets.conditionset.ConditionSet"]], "contains (class in sympy.sets.conditionset)": [[228, "sympy.sets.conditionset.Contains"]], "disjointunion (class in sympy.sets.sets)": [[228, "sympy.sets.sets.DisjointUnion"]], "emptyset (class in sympy.sets.sets)": [[228, "sympy.sets.sets.EmptySet"]], "finiteset (class in sympy.sets.sets)": [[228, "sympy.sets.sets.FiniteSet"]], "imageset (class in sympy.sets.fancysets)": [[228, "sympy.sets.fancysets.ImageSet"]], "integers (class in sympy.sets.fancysets)": [[228, "sympy.sets.fancysets.Integers"]], "intersection (class in sympy.sets.sets)": [[228, "sympy.sets.sets.Intersection"]], "interval (class in sympy.sets.sets)": [[228, "sympy.sets.sets.Interval"]], "lopen() (sympy.sets.sets.interval class method)": [[228, "sympy.sets.sets.Interval.Lopen"]], "naturals (class in sympy.sets.fancysets)": [[228, "sympy.sets.fancysets.Naturals"]], "naturals0 (class in sympy.sets.fancysets)": [[228, "sympy.sets.fancysets.Naturals0"]], "polarcomplexregion (class in sympy.sets.fancysets)": [[228, "sympy.sets.fancysets.PolarComplexRegion"]], "powerset (class in sympy.sets.powerset)": [[228, "sympy.sets.powerset.PowerSet"]], "productset (class in sympy.sets.sets)": [[228, "sympy.sets.sets.ProductSet"]], "range (class in sympy.sets.fancysets)": [[228, "sympy.sets.fancysets.Range"]], "rationals (class in sympy.sets.fancysets)": [[228, "sympy.sets.fancysets.Rationals"]], "reals (class in sympy.sets.fancysets)": [[228, "sympy.sets.fancysets.Reals"]], "ropen() (sympy.sets.sets.interval class method)": [[228, "sympy.sets.sets.Interval.Ropen"]], "set (class in sympy.sets.sets)": [[228, "sympy.sets.sets.Set"]], "setkind (class in sympy.sets.conditionset)": [[228, "sympy.sets.conditionset.SetKind"]], "symmetricdifference (class in sympy.sets.sets)": [[228, "sympy.sets.sets.SymmetricDifference"]], "union (class in sympy.sets.sets)": [[228, "sympy.sets.sets.Union"]], "universalset (class in sympy.sets.sets)": [[228, "sympy.sets.sets.UniversalSet"]], "a_interval (sympy.sets.fancysets.complexregion property)": [[228, "sympy.sets.fancysets.ComplexRegion.a_interval"]], "as_relational() (sympy.sets.fancysets.range method)": [[228, "sympy.sets.fancysets.Range.as_relational"]], "as_relational() (sympy.sets.sets.complement method)": [[228, "sympy.sets.sets.Complement.as_relational"]], "as_relational() (sympy.sets.sets.finiteset method)": [[228, "sympy.sets.sets.FiniteSet.as_relational"]], "as_relational() (sympy.sets.sets.intersection method)": [[228, "sympy.sets.sets.Intersection.as_relational"]], "as_relational() (sympy.sets.sets.interval method)": [[228, "sympy.sets.sets.Interval.as_relational"]], "as_relational() (sympy.sets.sets.symmetricdifference method)": [[228, "sympy.sets.sets.SymmetricDifference.as_relational"]], "as_relational() (sympy.sets.sets.union method)": [[228, "sympy.sets.sets.Union.as_relational"]], "b_interval (sympy.sets.fancysets.complexregion property)": [[228, "sympy.sets.fancysets.ComplexRegion.b_interval"]], "boundary (sympy.sets.sets.set property)": [[228, "sympy.sets.sets.Set.boundary"]], "closure (sympy.sets.sets.set property)": [[228, "sympy.sets.sets.Set.closure"]], "complement() (sympy.sets.sets.set method)": [[228, "sympy.sets.sets.Set.complement"]], "contains() (sympy.sets.sets.set method)": [[228, "sympy.sets.sets.Set.contains"]], "end (sympy.sets.sets.interval property)": [[228, "sympy.sets.sets.Interval.end"]], "from_real() (sympy.sets.fancysets.complexregion class method)": [[228, "sympy.sets.fancysets.ComplexRegion.from_real"]], "imageset() (in module sympy.sets.sets)": [[228, "sympy.sets.sets.imageset"]], "inf (sympy.sets.sets.set property)": [[228, "sympy.sets.sets.Set.inf"]], "interior (sympy.sets.sets.set property)": [[228, "sympy.sets.sets.Set.interior"]], "intersect() (sympy.sets.sets.set method)": [[228, "sympy.sets.sets.Set.intersect"]], "intersection() (sympy.sets.sets.set method)": [[228, "sympy.sets.sets.Set.intersection"]], "is_closed (sympy.sets.sets.set property)": [[228, "sympy.sets.sets.Set.is_closed"]], "is_disjoint() (sympy.sets.sets.set method)": [[228, "sympy.sets.sets.Set.is_disjoint"]], "is_iterable (sympy.sets.sets.productset property)": [[228, "sympy.sets.sets.ProductSet.is_iterable"]], "is_left_unbounded (sympy.sets.sets.interval property)": [[228, "sympy.sets.sets.Interval.is_left_unbounded"]], "is_open (sympy.sets.sets.set property)": [[228, "sympy.sets.sets.Set.is_open"]], "is_proper_subset() (sympy.sets.sets.set method)": [[228, "sympy.sets.sets.Set.is_proper_subset"]], "is_proper_superset() (sympy.sets.sets.set method)": [[228, "sympy.sets.sets.Set.is_proper_superset"]], "is_right_unbounded (sympy.sets.sets.interval property)": [[228, "sympy.sets.sets.Interval.is_right_unbounded"]], "is_subset() (sympy.sets.sets.set method)": [[228, "sympy.sets.sets.Set.is_subset"]], "is_superset() (sympy.sets.sets.set method)": [[228, "sympy.sets.sets.Set.is_superset"]], "isdisjoint() (sympy.sets.sets.set method)": [[228, "sympy.sets.sets.Set.isdisjoint"]], "issubset() (sympy.sets.sets.set method)": [[228, "sympy.sets.sets.Set.issubset"]], "issuperset() (sympy.sets.sets.set method)": [[228, "sympy.sets.sets.Set.issuperset"]], "kind (sympy.sets.sets.set property)": [[228, "sympy.sets.sets.Set.kind"]], "left_open (sympy.sets.sets.interval property)": [[228, "sympy.sets.sets.Interval.left_open"]], "measure (sympy.sets.sets.set property)": [[228, "sympy.sets.sets.Set.measure"]], "normalize_theta_set() (in module sympy.sets.fancysets)": [[228, "sympy.sets.fancysets.normalize_theta_set"]], "open() (sympy.sets.sets.interval class method)": [[228, "sympy.sets.sets.Interval.open"]], "powerset() (sympy.sets.sets.set method)": [[228, "sympy.sets.sets.Set.powerset"]], "psets (sympy.sets.fancysets.complexregion property)": [[228, "sympy.sets.fancysets.ComplexRegion.psets"]], "reduce() (sympy.sets.sets.complement static method)": [[228, "sympy.sets.sets.Complement.reduce"]], "reversed (sympy.sets.fancysets.range property)": [[228, "sympy.sets.fancysets.Range.reversed"]], "right_open (sympy.sets.sets.interval property)": [[228, "sympy.sets.sets.Interval.right_open"]], "sets (sympy.sets.fancysets.complexregion property)": [[228, "sympy.sets.fancysets.ComplexRegion.sets"]], "start (sympy.sets.sets.interval property)": [[228, "sympy.sets.sets.Interval.start"]], "sup (sympy.sets.sets.set property)": [[228, "sympy.sets.sets.Set.sup"]], "symmetric_difference() (sympy.sets.sets.set method)": [[228, "sympy.sets.sets.Set.symmetric_difference"]], "sympy.sets.conditionset": [[228, "module-sympy.sets.conditionset"]], "sympy.sets.fancysets": [[228, "module-sympy.sets.fancysets"]], "sympy.sets.powerset": [[228, "module-sympy.sets.powerset"]], "sympy.sets.sets": [[228, "module-sympy.sets.sets"]], "union() (sympy.sets.sets.set method)": [[228, "sympy.sets.sets.Set.union"]], "tr0() (in module sympy.simplify.fu)": [[229, "sympy.simplify.fu.TR0"]], "tr1() (in module sympy.simplify.fu)": [[229, "sympy.simplify.fu.TR1"]], "tr10() (in module sympy.simplify.fu)": [[229, "sympy.simplify.fu.TR10"]], "tr10i() (in module sympy.simplify.fu)": [[229, "sympy.simplify.fu.TR10i"]], "tr11() (in module sympy.simplify.fu)": [[229, "sympy.simplify.fu.TR11"]], "tr111() (in module sympy.simplify.fu)": [[229, "sympy.simplify.fu.TR111"]], "tr12() (in module sympy.simplify.fu)": [[229, "sympy.simplify.fu.TR12"]], "tr12i() (in module sympy.simplify.fu)": [[229, "sympy.simplify.fu.TR12i"]], "tr13() (in module sympy.simplify.fu)": [[229, "sympy.simplify.fu.TR13"]], "tr14() (in module sympy.simplify.fu)": [[229, "sympy.simplify.fu.TR14"]], "tr15() (in module sympy.simplify.fu)": [[229, "sympy.simplify.fu.TR15"]], "tr16() (in module sympy.simplify.fu)": [[229, "sympy.simplify.fu.TR16"]], "tr2() (in module sympy.simplify.fu)": [[229, "sympy.simplify.fu.TR2"]], "tr22() (in module sympy.simplify.fu)": [[229, "sympy.simplify.fu.TR22"]], "tr2i() (in module sympy.simplify.fu)": [[229, "sympy.simplify.fu.TR2i"]], "tr3() (in module sympy.simplify.fu)": [[229, "sympy.simplify.fu.TR3"]], "tr4() (in module sympy.simplify.fu)": [[229, "sympy.simplify.fu.TR4"]], "tr5() (in module sympy.simplify.fu)": [[229, "sympy.simplify.fu.TR5"]], "tr6() (in module sympy.simplify.fu)": [[229, "sympy.simplify.fu.TR6"]], "tr7() (in module sympy.simplify.fu)": [[229, "sympy.simplify.fu.TR7"]], "tr8() (in module sympy.simplify.fu)": [[229, "sympy.simplify.fu.TR8"]], "tr9() (in module sympy.simplify.fu)": [[229, "sympy.simplify.fu.TR9"]], "trmorrie() (in module sympy.simplify.fu)": [[229, "sympy.simplify.fu.TRmorrie"]], "trpower() (in module sympy.simplify.fu)": [[229, "sympy.simplify.fu.TRpower"]], "fu() (in module sympy.simplify.fu)": [[229, "sympy.simplify.fu.fu"]], "sympy.simplify.hyperexpand_doc": [[230, "module-sympy.simplify.hyperexpand_doc"]], "epath (class in sympy.simplify.epathtools)": [[232, "sympy.simplify.epathtools.EPath"]], "apply() (sympy.simplify.epathtools.epath method)": [[232, "sympy.simplify.epathtools.EPath.apply"]], "besselsimp() (in module sympy.simplify.simplify)": [[232, "sympy.simplify.simplify.besselsimp"]], "collect() (in module sympy.simplify.radsimp)": [[232, "sympy.simplify.radsimp.collect"]], "collect_const() (in module sympy.simplify.radsimp)": [[232, "sympy.simplify.radsimp.collect_const"]], "collect_sqrt() (in module sympy.simplify.radsimp)": [[232, "sympy.simplify.radsimp.collect_sqrt"]], "combsimp() (in module sympy.simplify.combsimp)": [[232, "sympy.simplify.combsimp.combsimp"]], "cse() (in module sympy.simplify.cse_main)": [[232, "sympy.simplify.cse_main.cse"]], "epath() (in module sympy.simplify.epathtools)": [[232, "sympy.simplify.epathtools.epath"]], "fraction() (in module sympy.simplify.radsimp)": [[232, "sympy.simplify.radsimp.fraction"]], "hyperexpand() (in module sympy.simplify.hyperexpand)": [[232, "sympy.simplify.hyperexpand.hyperexpand"]], "hypersimilar() (in module sympy.simplify.simplify)": [[232, "sympy.simplify.simplify.hypersimilar"]], "hypersimp() (in module sympy.simplify.simplify)": [[232, "sympy.simplify.simplify.hypersimp"]], "kroneckersimp() (in module sympy.simplify.simplify)": [[232, "sympy.simplify.simplify.kroneckersimp"]], "logcombine() (in module sympy.simplify.simplify)": [[232, "sympy.simplify.simplify.logcombine"]], "nsimplify() (in module sympy.simplify.simplify)": [[232, "sympy.simplify.simplify.nsimplify"]], "nthroot() (in module sympy.simplify.simplify)": [[232, "sympy.simplify.simplify.nthroot"]], "opt_cse() (in module sympy.simplify.cse_main)": [[232, "sympy.simplify.cse_main.opt_cse"]], "posify() (in module sympy.simplify.simplify)": [[232, "sympy.simplify.simplify.posify"]], "powdenest() (in module sympy.simplify.powsimp)": [[232, "sympy.simplify.powsimp.powdenest"]], "powsimp() (in module sympy.simplify.powsimp)": [[232, "sympy.simplify.powsimp.powsimp"]], "rad_rationalize() (in module sympy.simplify.radsimp)": [[232, "sympy.simplify.radsimp.rad_rationalize"]], "radsimp() (in module sympy.simplify.radsimp)": [[232, "sympy.simplify.radsimp.radsimp"]], "ratsimp() (in module sympy.simplify.ratsimp)": [[232, "sympy.simplify.ratsimp.ratsimp"]], "ratsimpmodprime() (in module sympy.simplify.ratsimp)": [[232, "sympy.simplify.ratsimp.ratsimpmodprime"]], "rcollect() (in module sympy.simplify.radsimp)": [[232, "sympy.simplify.radsimp.rcollect"]], "select() (sympy.simplify.epathtools.epath method)": [[232, "sympy.simplify.epathtools.EPath.select"]], "separatevars() (in module sympy.simplify.simplify)": [[232, "sympy.simplify.simplify.separatevars"]], "simplify() (in module sympy.simplify.simplify)": [[232, "sympy.simplify.simplify.simplify"]], "sqrtdenest() (in module sympy.simplify.sqrtdenest)": [[232, "sympy.simplify.sqrtdenest.sqrtdenest"]], "sympy.simplify.combsimp": [[232, "module-sympy.simplify.combsimp"]], "sympy.simplify.cse_main": [[232, "module-sympy.simplify.cse_main"]], "sympy.simplify.epathtools": [[232, "module-sympy.simplify.epathtools"]], "sympy.simplify.hyperexpand": [[232, "module-sympy.simplify.hyperexpand"]], "sympy.simplify.powsimp": [[232, "module-sympy.simplify.powsimp"]], "sympy.simplify.radsimp": [[232, "module-sympy.simplify.radsimp"]], "sympy.simplify.ratsimp": [[232, "module-sympy.simplify.ratsimp"]], "sympy.simplify.sqrtdenest": [[232, "module-sympy.simplify.sqrtdenest"]], "sympy.simplify.trigsimp": [[232, "module-sympy.simplify.trigsimp"]], "tree_cse() (in module sympy.simplify.cse_main)": [[232, "sympy.simplify.cse_main.tree_cse"]], "trigsimp() (in module sympy.simplify.trigsimp)": [[232, "sympy.simplify.trigsimp.trigsimp"]], "binaryquadratic (class in sympy.solvers.diophantine.diophantine)": [[233, "sympy.solvers.diophantine.diophantine.BinaryQuadratic"]], "cubicthue (class in sympy.solvers.diophantine.diophantine)": [[233, "sympy.solvers.diophantine.diophantine.CubicThue"]], "diophantineequationtype (class in sympy.solvers.diophantine.diophantine)": [[233, "sympy.solvers.diophantine.diophantine.DiophantineEquationType"]], "diophantinesolutionset (class in sympy.solvers.diophantine.diophantine)": [[233, "sympy.solvers.diophantine.diophantine.DiophantineSolutionSet"]], "generalpythagorean (class in sympy.solvers.diophantine.diophantine)": [[233, "sympy.solvers.diophantine.diophantine.GeneralPythagorean"]], "generalsumofevenpowers (class in sympy.solvers.diophantine.diophantine)": [[233, "sympy.solvers.diophantine.diophantine.GeneralSumOfEvenPowers"]], "generalsumofsquares (class in sympy.solvers.diophantine.diophantine)": [[233, "sympy.solvers.diophantine.diophantine.GeneralSumOfSquares"]], "homogeneousgeneralquadratic (class in sympy.solvers.diophantine.diophantine)": [[233, "sympy.solvers.diophantine.diophantine.HomogeneousGeneralQuadratic"]], "homogeneousternaryquadratic (class in sympy.solvers.diophantine.diophantine)": [[233, "sympy.solvers.diophantine.diophantine.HomogeneousTernaryQuadratic"]], "homogeneousternaryquadraticnormal (class in sympy.solvers.diophantine.diophantine)": [[233, "sympy.solvers.diophantine.diophantine.HomogeneousTernaryQuadraticNormal"]], "inhomogeneousgeneralquadratic (class in sympy.solvers.diophantine.diophantine)": [[233, "sympy.solvers.diophantine.diophantine.InhomogeneousGeneralQuadratic"]], "inhomogeneousternaryquadratic (class in sympy.solvers.diophantine.diophantine)": [[233, "sympy.solvers.diophantine.diophantine.InhomogeneousTernaryQuadratic"]], "linear (class in sympy.solvers.diophantine.diophantine)": [[233, "sympy.solvers.diophantine.diophantine.Linear"]], "pqa() (in module sympy.solvers.diophantine.diophantine)": [[233, "sympy.solvers.diophantine.diophantine.PQa"]], "univariate (class in sympy.solvers.diophantine.diophantine)": [[233, "sympy.solvers.diophantine.diophantine.Univariate"]], "base_solution_linear() (in module sympy.solvers.diophantine.diophantine)": [[233, "sympy.solvers.diophantine.diophantine.base_solution_linear"]], "classify_diop() (in module sympy.solvers.diophantine.diophantine)": [[233, "sympy.solvers.diophantine.diophantine.classify_diop"]], "cornacchia() (in module sympy.solvers.diophantine.diophantine)": [[233, "sympy.solvers.diophantine.diophantine.cornacchia"]], "descent() (in module sympy.solvers.diophantine.diophantine)": [[233, "sympy.solvers.diophantine.diophantine.descent"]], "diop_dn() (in module sympy.solvers.diophantine.diophantine)": [[233, "sympy.solvers.diophantine.diophantine.diop_DN"]], "diop_bf_dn() (in module sympy.solvers.diophantine.diophantine)": [[233, "sympy.solvers.diophantine.diophantine.diop_bf_DN"]], "diop_general_pythagorean() (in module sympy.solvers.diophantine.diophantine)": [[233, "sympy.solvers.diophantine.diophantine.diop_general_pythagorean"]], "diop_general_sum_of_even_powers() (in module sympy.solvers.diophantine.diophantine)": [[233, "sympy.solvers.diophantine.diophantine.diop_general_sum_of_even_powers"]], "diop_general_sum_of_squares() (in module sympy.solvers.diophantine.diophantine)": [[233, "sympy.solvers.diophantine.diophantine.diop_general_sum_of_squares"]], "diop_linear() (in module sympy.solvers.diophantine.diophantine)": [[233, "sympy.solvers.diophantine.diophantine.diop_linear"]], "diop_quadratic() (in module sympy.solvers.diophantine.diophantine)": [[233, "sympy.solvers.diophantine.diophantine.diop_quadratic"]], "diop_solve() (in module sympy.solvers.diophantine.diophantine)": [[233, "sympy.solvers.diophantine.diophantine.diop_solve"]], "diop_ternary_quadratic() (in module sympy.solvers.diophantine.diophantine)": [[233, "sympy.solvers.diophantine.diophantine.diop_ternary_quadratic"]], "diop_ternary_quadratic_normal() (in module sympy.solvers.diophantine.diophantine)": [[233, "sympy.solvers.diophantine.diophantine.diop_ternary_quadratic_normal"]], "diophantine() (in module sympy.solvers.diophantine.diophantine)": [[233, "sympy.solvers.diophantine.diophantine.diophantine"]], "divisible() (in module sympy.solvers.diophantine.diophantine)": [[233, "sympy.solvers.diophantine.diophantine.divisible"]], "equivalent() (in module sympy.solvers.diophantine.diophantine)": [[233, "sympy.solvers.diophantine.diophantine.equivalent"]], "find_dn() (in module sympy.solvers.diophantine.diophantine)": [[233, "sympy.solvers.diophantine.diophantine.find_DN"]], "gaussian_reduce() (in module sympy.solvers.diophantine.diophantine)": [[233, "sympy.solvers.diophantine.diophantine.gaussian_reduce"]], "holzer() (in module sympy.solvers.diophantine.diophantine)": [[233, "sympy.solvers.diophantine.diophantine.holzer"]], "ldescent() (in module sympy.solvers.diophantine.diophantine)": [[233, "sympy.solvers.diophantine.diophantine.ldescent"]], "matches() (sympy.solvers.diophantine.diophantine.diophantineequationtype method)": [[233, "sympy.solvers.diophantine.diophantine.DiophantineEquationType.matches"]], "merge_solution() (in module sympy.solvers.diophantine.diophantine)": [[233, "sympy.solvers.diophantine.diophantine.merge_solution"]], "parametrize_ternary_quadratic() (in module sympy.solvers.diophantine.diophantine)": [[233, "sympy.solvers.diophantine.diophantine.parametrize_ternary_quadratic"]], "partition() (in module sympy.solvers.diophantine.diophantine)": [[233, "sympy.solvers.diophantine.diophantine.partition"]], "power_representation() (in module sympy.solvers.diophantine.diophantine)": [[233, "sympy.solvers.diophantine.diophantine.power_representation"]], "prime_as_sum_of_two_squares() (in module sympy.solvers.diophantine.diophantine)": [[233, "sympy.solvers.diophantine.diophantine.prime_as_sum_of_two_squares"]], "reconstruct() (in module sympy.solvers.diophantine.diophantine)": [[233, "sympy.solvers.diophantine.diophantine.reconstruct"]], "sqf_normal() (in module sympy.solvers.diophantine.diophantine)": [[233, "sympy.solvers.diophantine.diophantine.sqf_normal"]], "square_factor() (in module sympy.solvers.diophantine.diophantine)": [[233, "sympy.solvers.diophantine.diophantine.square_factor"]], "sum_of_four_squares() (in module sympy.solvers.diophantine.diophantine)": [[233, "sympy.solvers.diophantine.diophantine.sum_of_four_squares"]], "sum_of_powers() (in module sympy.solvers.diophantine.diophantine)": [[233, "sympy.solvers.diophantine.diophantine.sum_of_powers"]], "sum_of_squares() (in module sympy.solvers.diophantine.diophantine)": [[233, "sympy.solvers.diophantine.diophantine.sum_of_squares"]], "sum_of_three_squares() (in module sympy.solvers.diophantine.diophantine)": [[233, "sympy.solvers.diophantine.diophantine.sum_of_three_squares"]], "transformation_to_dn() (in module sympy.solvers.diophantine.diophantine)": [[233, "sympy.solvers.diophantine.diophantine.transformation_to_DN"]], "transformation_to_normal() (in module sympy.solvers.diophantine.diophantine)": [[233, "sympy.solvers.diophantine.diophantine.transformation_to_normal"]], "reduce_abs_inequalities() (in module sympy.solvers.inequalities)": [[235, "sympy.solvers.inequalities.reduce_abs_inequalities"]], "reduce_abs_inequality() (in module sympy.solvers.inequalities)": [[235, "sympy.solvers.inequalities.reduce_abs_inequality"]], "reduce_inequalities() (in module sympy.solvers.inequalities)": [[235, "sympy.solvers.inequalities.reduce_inequalities"]], "reduce_rational_inequalities() (in module sympy.solvers.inequalities)": [[235, "sympy.solvers.inequalities.reduce_rational_inequalities"]], "solve_poly_inequalities() (in module sympy.solvers.inequalities)": [[235, "sympy.solvers.inequalities.solve_poly_inequalities"]], "solve_poly_inequality() (in module sympy.solvers.inequalities)": [[235, "sympy.solvers.inequalities.solve_poly_inequality"]], "solve_rational_inequalities() (in module sympy.solvers.inequalities)": [[235, "sympy.solvers.inequalities.solve_rational_inequalities"]], "solve_univariate_inequality() (in module sympy.solvers.inequalities)": [[235, "sympy.solvers.inequalities.solve_univariate_inequality"]], "sympy.solvers.inequalities": [[235, "module-sympy.solvers.inequalities"]], "almostlinear (class in sympy.solvers.ode.single)": [[236, "sympy.solvers.ode.single.AlmostLinear"]], "bernoulli (class in sympy.solvers.ode.single)": [[236, "sympy.solvers.ode.single.Bernoulli"]], "factorable (class in sympy.solvers.ode.single)": [[236, "sympy.solvers.ode.single.Factorable"]], "firstexact (class in sympy.solvers.ode.single)": [[236, "sympy.solvers.ode.single.FirstExact"]], "firstlinear (class in sympy.solvers.ode.single)": [[236, "sympy.solvers.ode.single.FirstLinear"]], "homogeneouscoeffbest (class in sympy.solvers.ode.single)": [[236, "sympy.solvers.ode.single.HomogeneousCoeffBest"]], "homogeneouscoeffsubsdepdivindep (class in sympy.solvers.ode.single)": [[236, "sympy.solvers.ode.single.HomogeneousCoeffSubsDepDivIndep"]], "homogeneouscoeffsubsindepdivdep (class in sympy.solvers.ode.single)": [[236, "sympy.solvers.ode.single.HomogeneousCoeffSubsIndepDivDep"]], "liegroup (class in sympy.solvers.ode.single)": [[236, "sympy.solvers.ode.single.LieGroup"]], "linearcoefficients (class in sympy.solvers.ode.single)": [[236, "sympy.solvers.ode.single.LinearCoefficients"]], "liouville (class in sympy.solvers.ode.single)": [[236, "sympy.solvers.ode.single.Liouville"]], "nthalgebraic (class in sympy.solvers.ode.single)": [[236, "sympy.solvers.ode.single.NthAlgebraic"]], "nthlinearconstantcoeffhomogeneous (class in sympy.solvers.ode.single)": [[236, "sympy.solvers.ode.single.NthLinearConstantCoeffHomogeneous"]], "nthlinearconstantcoeffundeterminedcoefficients (class in sympy.solvers.ode.single)": [[236, "sympy.solvers.ode.single.NthLinearConstantCoeffUndeterminedCoefficients"]], "nthlinearconstantcoeffvariationofparameters (class in sympy.solvers.ode.single)": [[236, "sympy.solvers.ode.single.NthLinearConstantCoeffVariationOfParameters"]], "nthlineareulereqhomogeneous (class in sympy.solvers.ode.single)": [[236, "sympy.solvers.ode.single.NthLinearEulerEqHomogeneous"]], "nthlineareulereqnonhomogeneousundeterminedcoefficients (class in sympy.solvers.ode.single)": [[236, "sympy.solvers.ode.single.NthLinearEulerEqNonhomogeneousUndeterminedCoefficients"]], "nthlineareulereqnonhomogeneousvariationofparameters (class in sympy.solvers.ode.single)": [[236, "sympy.solvers.ode.single.NthLinearEulerEqNonhomogeneousVariationOfParameters"]], "nthorderreducible (class in sympy.solvers.ode.single)": [[236, "sympy.solvers.ode.single.NthOrderReducible"]], "rationalriccati (class in sympy.solvers.ode.single)": [[236, "sympy.solvers.ode.single.RationalRiccati"]], "riccatispecial (class in sympy.solvers.ode.single)": [[236, "sympy.solvers.ode.single.RiccatiSpecial"]], "secondhypergeometric (class in sympy.solvers.ode.single)": [[236, "sympy.solvers.ode.single.SecondHypergeometric"]], "secondlinearairy (class in sympy.solvers.ode.single)": [[236, "sympy.solvers.ode.single.SecondLinearAiry"]], "secondlinearbessel (class in sympy.solvers.ode.single)": [[236, "sympy.solvers.ode.single.SecondLinearBessel"]], "separable (class in sympy.solvers.ode.single)": [[236, "sympy.solvers.ode.single.Separable"]], "separablereduced (class in sympy.solvers.ode.single)": [[236, "sympy.solvers.ode.single.SeparableReduced"]], "_handle_integral() (in module sympy.solvers.ode.ode)": [[236, "sympy.solvers.ode.ode._handle_Integral"]], "_linear_2eq_order1_type6() (in module sympy.solvers.ode.ode)": [[236, "sympy.solvers.ode.ode._linear_2eq_order1_type6"]], "_linear_2eq_order1_type7() (in module sympy.solvers.ode.ode)": [[236, "sympy.solvers.ode.ode._linear_2eq_order1_type7"]], "_nonlinear_2eq_order1_type1() (in module sympy.solvers.ode.ode)": [[236, "sympy.solvers.ode.ode._nonlinear_2eq_order1_type1"]], "_nonlinear_2eq_order1_type2() (in module sympy.solvers.ode.ode)": [[236, "sympy.solvers.ode.ode._nonlinear_2eq_order1_type2"]], "_nonlinear_2eq_order1_type3() (in module sympy.solvers.ode.ode)": [[236, "sympy.solvers.ode.ode._nonlinear_2eq_order1_type3"]], "_nonlinear_2eq_order1_type4() (in module sympy.solvers.ode.ode)": [[236, "sympy.solvers.ode.ode._nonlinear_2eq_order1_type4"]], "_nonlinear_2eq_order1_type5() (in module sympy.solvers.ode.ode)": [[236, "sympy.solvers.ode.ode._nonlinear_2eq_order1_type5"]], "_nonlinear_3eq_order1_type1() (in module sympy.solvers.ode.ode)": [[236, "sympy.solvers.ode.ode._nonlinear_3eq_order1_type1"]], "_nonlinear_3eq_order1_type2() (in module sympy.solvers.ode.ode)": [[236, "sympy.solvers.ode.ode._nonlinear_3eq_order1_type2"]], "_nonlinear_3eq_order1_type3() (in module sympy.solvers.ode.ode)": [[236, "sympy.solvers.ode.ode._nonlinear_3eq_order1_type3"]], "_nonlinear_3eq_order1_type4() (in module sympy.solvers.ode.ode)": [[236, "sympy.solvers.ode.ode._nonlinear_3eq_order1_type4"]], "_nonlinear_3eq_order1_type5() (in module sympy.solvers.ode.ode)": [[236, "sympy.solvers.ode.ode._nonlinear_3eq_order1_type5"]], "allhints (in module sympy.solvers.ode)": [[236, "sympy.solvers.ode.allhints"]], "canonical_odes() (in module sympy.solvers.ode.systems)": [[236, "sympy.solvers.ode.systems.canonical_odes"]], "checkinfsol() (in module sympy.solvers.ode)": [[236, "sympy.solvers.ode.checkinfsol"]], "checkodesol() (in module sympy.solvers.ode)": [[236, "sympy.solvers.ode.checkodesol"]], "classify_ode() (in module sympy.solvers.ode)": [[236, "sympy.solvers.ode.classify_ode"]], "compute_m_ybar() (in module sympy.solvers.ode.riccati)": [[236, "sympy.solvers.ode.riccati.compute_m_ybar"]], "constant_renumber() (in module sympy.solvers.ode.ode)": [[236, "sympy.solvers.ode.ode.constant_renumber"]], "constantsimp() (in module sympy.solvers.ode)": [[236, "sympy.solvers.ode.constantsimp"]], "construct_c() (in module sympy.solvers.ode.riccati)": [[236, "sympy.solvers.ode.riccati.construct_c"]], "construct_d() (in module sympy.solvers.ode.riccati)": [[236, "sympy.solvers.ode.riccati.construct_d"]], "dsolve() (in module sympy.solvers.ode)": [[236, "sympy.solvers.ode.dsolve"]], "dsolve_system() (in module sympy.solvers.ode.systems)": [[236, "sympy.solvers.ode.systems.dsolve_system"]], "get_gen_sol_from_part_sol() (in module sympy.solvers.ode.riccati)": [[236, "sympy.solvers.ode.riccati.get_gen_sol_from_part_sol"]], "homogeneous_order() (in module sympy.solvers.ode)": [[236, "sympy.solvers.ode.homogeneous_order"]], "infinitesimals() (in module sympy.solvers.ode)": [[236, "sympy.solvers.ode.infinitesimals"]], "lie_heuristic_abaco1_product() (in module sympy.solvers.ode.lie_group)": [[236, "sympy.solvers.ode.lie_group.lie_heuristic_abaco1_product"]], "lie_heuristic_abaco1_simple() (in module sympy.solvers.ode.lie_group)": [[236, "sympy.solvers.ode.lie_group.lie_heuristic_abaco1_simple"]], "lie_heuristic_abaco2_similar() (in module sympy.solvers.ode.lie_group)": [[236, "sympy.solvers.ode.lie_group.lie_heuristic_abaco2_similar"]], "lie_heuristic_abaco2_unique_general() (in module sympy.solvers.ode.lie_group)": [[236, "sympy.solvers.ode.lie_group.lie_heuristic_abaco2_unique_general"]], "lie_heuristic_abaco2_unique_unknown() (in module sympy.solvers.ode.lie_group)": [[236, "sympy.solvers.ode.lie_group.lie_heuristic_abaco2_unique_unknown"]], "lie_heuristic_bivariate() (in module sympy.solvers.ode.lie_group)": [[236, "sympy.solvers.ode.lie_group.lie_heuristic_bivariate"]], "lie_heuristic_chi() (in module sympy.solvers.ode.lie_group)": [[236, "sympy.solvers.ode.lie_group.lie_heuristic_chi"]], "lie_heuristic_function_sum() (in module sympy.solvers.ode.lie_group)": [[236, "sympy.solvers.ode.lie_group.lie_heuristic_function_sum"]], "lie_heuristic_linear() (in module sympy.solvers.ode.lie_group)": [[236, "sympy.solvers.ode.lie_group.lie_heuristic_linear"]], "linear_ode_to_matrix() (in module sympy.solvers.ode.systems)": [[236, "sympy.solvers.ode.systems.linear_ode_to_matrix"]], "linodesolve() (in module sympy.solvers.ode.systems)": [[236, "sympy.solvers.ode.systems.linodesolve"]], "linodesolve_type() (in module sympy.solvers.ode.systems)": [[236, "sympy.solvers.ode.systems.linodesolve_type"]], "matrix_exp() (in module sympy.solvers.ode.systems)": [[236, "sympy.solvers.ode.systems.matrix_exp"]], "matrix_exp_jordan_form() (in module sympy.solvers.ode.systems)": [[236, "sympy.solvers.ode.systems.matrix_exp_jordan_form"]], "ode_1st_power_series() (in module sympy.solvers.ode.ode)": [[236, "sympy.solvers.ode.ode.ode_1st_power_series"]], "ode_2nd_power_series_ordinary() (in module sympy.solvers.ode.ode)": [[236, "sympy.solvers.ode.ode.ode_2nd_power_series_ordinary"]], "ode_2nd_power_series_regular() (in module sympy.solvers.ode.ode)": [[236, "sympy.solvers.ode.ode.ode_2nd_power_series_regular"]], "ode_sol_simplicity() (in module sympy.solvers.ode.ode)": [[236, "sympy.solvers.ode.ode.ode_sol_simplicity"]], "odesimp() (in module sympy.solvers.ode.ode)": [[236, "sympy.solvers.ode.ode.odesimp"]], "rational_laurent_series() (in module sympy.solvers.ode.riccati)": [[236, "sympy.solvers.ode.riccati.rational_laurent_series"]], "remove_redundant_sols() (in module sympy.solvers.ode.riccati)": [[236, "sympy.solvers.ode.riccati.remove_redundant_sols"]], "riccati_inverse_normal() (in module sympy.solvers.ode.riccati)": [[236, "sympy.solvers.ode.riccati.riccati_inverse_normal"]], "riccati_normal() (in module sympy.solvers.ode.riccati)": [[236, "sympy.solvers.ode.riccati.riccati_normal"]], "riccati_reduced() (in module sympy.solvers.ode.riccati)": [[236, "sympy.solvers.ode.riccati.riccati_reduced"]], "solve_aux_eq() (in module sympy.solvers.ode.riccati)": [[236, "sympy.solvers.ode.riccati.solve_aux_eq"]], "solve_riccati() (in module sympy.solvers.ode.riccati)": [[236, "sympy.solvers.ode.riccati.solve_riccati"]], "sympy.solvers.ode": [[236, "module-sympy.solvers.ode"]], "sympy.solvers.ode.ode": [[236, "module-sympy.solvers.ode.ode"]], "checkpdesol() (in module sympy.solvers.pde)": [[237, "sympy.solvers.pde.checkpdesol"]], "classify_pde() (in module sympy.solvers.pde)": [[237, "sympy.solvers.pde.classify_pde"]], "pde_1st_linear_constant_coeff() (in module sympy.solvers.pde)": [[237, "sympy.solvers.pde.pde_1st_linear_constant_coeff"]], "pde_1st_linear_constant_coeff_homogeneous() (in module sympy.solvers.pde)": [[237, "sympy.solvers.pde.pde_1st_linear_constant_coeff_homogeneous"]], "pde_1st_linear_variable_coeff() (in module sympy.solvers.pde)": [[237, "sympy.solvers.pde.pde_1st_linear_variable_coeff"]], "pde_separate() (in module sympy.solvers.pde)": [[237, "sympy.solvers.pde.pde_separate"]], "pde_separate_add() (in module sympy.solvers.pde)": [[237, "sympy.solvers.pde.pde_separate_add"]], "pde_separate_mul() (in module sympy.solvers.pde)": [[237, "sympy.solvers.pde.pde_separate_mul"]], "pdsolve() (in module sympy.solvers.pde)": [[237, "sympy.solvers.pde.pdsolve"]], "sympy.solvers.pde": [[237, "module-sympy.solvers.pde"]], "checksol() (in module sympy.solvers.solvers)": [[238, "sympy.solvers.solvers.checksol"]], "nsolve() (in module sympy.solvers.solvers)": [[238, "sympy.solvers.solvers.nsolve"]], "ode_order() (in module sympy.solvers.deutils)": [[238, "sympy.solvers.deutils.ode_order"]], "rsolve() (in module sympy.solvers.recurr)": [[238, "sympy.solvers.recurr.rsolve"]], "rsolve_hyper() (in module sympy.solvers.recurr)": [[238, "sympy.solvers.recurr.rsolve_hyper"]], "rsolve_poly() (in module sympy.solvers.recurr)": [[238, "sympy.solvers.recurr.rsolve_poly"]], "rsolve_ratio() (in module sympy.solvers.recurr)": [[238, "sympy.solvers.recurr.rsolve_ratio"]], "solve() (in module sympy.solvers.solvers)": [[238, "sympy.solvers.solvers.solve"]], "solve_linear() (in module sympy.solvers.solvers)": [[238, "sympy.solvers.solvers.solve_linear"]], "solve_linear_system() (in module sympy.solvers.solvers)": [[238, "sympy.solvers.solvers.solve_linear_system"]], "solve_linear_system_lu() (in module sympy.solvers.solvers)": [[238, "sympy.solvers.solvers.solve_linear_system_LU"]], "solve_poly_system() (in module sympy.solvers.polysys)": [[238, "sympy.solvers.polysys.solve_poly_system"]], "solve_triangulated() (in module sympy.solvers.polysys)": [[238, "sympy.solvers.polysys.solve_triangulated"]], "solve_undetermined_coeffs() (in module sympy.solvers.solvers)": [[238, "sympy.solvers.solvers.solve_undetermined_coeffs"]], "sympy.solvers": [[238, "module-sympy.solvers"]], "sympy.solvers.recurr": [[238, "module-sympy.solvers.recurr"]], "unrad() (in module sympy.solvers.solvers)": [[238, "sympy.solvers.solvers.unrad"]], "_is_exponential() (in module sympy.solvers.solveset)": [[239, "sympy.solvers.solveset._is_exponential"]], "_is_logarithmic() (in module sympy.solvers.solveset)": [[239, "sympy.solvers.solveset._is_logarithmic"]], "_solve_exponential() (in module sympy.solvers.solveset)": [[239, "sympy.solvers.solveset._solve_exponential"]], "_solve_logarithm() (in module sympy.solvers.solveset)": [[239, "sympy.solvers.solveset._solve_logarithm"]], "_transolve() (in module sympy.solvers.solveset)": [[239, "sympy.solvers.solveset._transolve"]], "domain_check() (in module sympy.solvers.solveset)": [[239, "sympy.solvers.solveset.domain_check"]], "invert_complex() (in module sympy.solvers.solveset)": [[239, "sympy.solvers.solveset.invert_complex"]], "invert_real() (in module sympy.solvers.solveset)": [[239, "sympy.solvers.solveset.invert_real"]], "linear_eq_to_matrix() (in module sympy.solvers.solveset)": [[239, "sympy.solvers.solveset.linear_eq_to_matrix"]], "linsolve() (in module sympy.solvers.solveset)": [[239, "sympy.solvers.solveset.linsolve"]], "nonlinsolve() (in module sympy.solvers.solveset)": [[239, "sympy.solvers.solveset.nonlinsolve"]], "solveset() (in module sympy.solvers.solveset)": [[239, "sympy.solvers.solveset.solveset"]], "solveset_complex() (in module sympy.solvers.solveset)": [[239, "sympy.solvers.solveset.solveset_complex"]], "solveset_real() (in module sympy.solvers.solveset)": [[239, "sympy.solvers.solveset.solveset_real"]], "solvify() (in module sympy.solvers.solveset)": [[239, "sympy.solvers.solveset.solvify"]], "sympy.solvers.solveset": [[239, "module-sympy.solvers.solveset"]], "arcsin() (in module sympy.stats)": [[240, "sympy.stats.Arcsin"]], "benini() (in module sympy.stats)": [[240, "sympy.stats.Benini"]], "bernoulli() (in module sympy.stats)": [[240, "sympy.stats.Bernoulli"]], "bernoulliprocess (class in sympy.stats)": [[240, "sympy.stats.BernoulliProcess"]], "beta() (in module sympy.stats)": [[240, "sympy.stats.Beta"]], "betabinomial() (in module sympy.stats)": [[240, "sympy.stats.BetaBinomial"]], "betanoncentral() (in module sympy.stats)": [[240, "sympy.stats.BetaNoncentral"]], "betaprime() (in module sympy.stats)": [[240, "sympy.stats.BetaPrime"]], "binomial() (in module sympy.stats)": [[240, "sympy.stats.Binomial"]], "boundedpareto() (in module sympy.stats)": [[240, "sympy.stats.BoundedPareto"]], "cauchy() (in module sympy.stats)": [[240, "sympy.stats.Cauchy"]], "centralmoment (class in sympy.stats)": [[240, "sympy.stats.CentralMoment"]], "chi() (in module sympy.stats)": [[240, "sympy.stats.Chi"]], "chinoncentral() (in module sympy.stats)": [[240, "sympy.stats.ChiNoncentral"]], "chisquared() (in module sympy.stats)": [[240, "sympy.stats.ChiSquared"]], "coin() (in module sympy.stats)": [[240, "sympy.stats.Coin"]], "compounddistribution (class in sympy.stats.compound_rv)": [[240, "sympy.stats.compound_rv.CompoundDistribution"]], "conditionaldomain (class in sympy.stats.rv)": [[240, "sympy.stats.rv.ConditionalDomain"]], "continuousdomain (class in sympy.stats.crv)": [[240, "sympy.stats.crv.ContinuousDomain"]], "continuousmarkovchain (class in sympy.stats)": [[240, "sympy.stats.ContinuousMarkovChain"]], "continuouspspace (class in sympy.stats.crv)": [[240, "sympy.stats.crv.ContinuousPSpace"]], "continuousrv() (in module sympy.stats)": [[240, "sympy.stats.ContinuousRV"]], "covariance (class in sympy.stats)": [[240, "sympy.stats.Covariance"]], "crosscovariancematrix (class in sympy.stats)": [[240, "sympy.stats.CrossCovarianceMatrix"]], "dagum() (in module sympy.stats)": [[240, "sympy.stats.Dagum"]], "davis() (in module sympy.stats)": [[240, "sympy.stats.Davis"]], "die() (in module sympy.stats)": [[240, "sympy.stats.Die"]], "diepspace (class in sympy.stats.frv_types)": [[240, "sympy.stats.frv_types.DiePSpace"]], "discretemarkovchain (class in sympy.stats)": [[240, "sympy.stats.DiscreteMarkovChain"]], "discreteuniform() (in module sympy.stats)": [[240, "sympy.stats.DiscreteUniform"]], "e() (in module sympy.stats)": [[240, "sympy.stats.E"]], "erlang() (in module sympy.stats)": [[240, "sympy.stats.Erlang"]], "exgaussian() (in module sympy.stats)": [[240, "sympy.stats.ExGaussian"]], "expectation (class in sympy.stats)": [[240, "sympy.stats.Expectation"]], "expectationmatrix (class in sympy.stats)": [[240, "sympy.stats.ExpectationMatrix"]], "exponential() (in module sympy.stats)": [[240, "sympy.stats.Exponential"]], "fdistribution() (in module sympy.stats)": [[240, "sympy.stats.FDistribution"]], "finitedomain (class in sympy.stats.frv)": [[240, "sympy.stats.frv.FiniteDomain"]], "finitepspace (class in sympy.stats.frv)": [[240, "sympy.stats.frv.FinitePSpace"]], "finiterv() (in module sympy.stats)": [[240, "sympy.stats.FiniteRV"]], "fisherz() (in module sympy.stats)": [[240, "sympy.stats.FisherZ"]], "frechet() (in module sympy.stats)": [[240, "sympy.stats.Frechet"]], "gamma() (in module sympy.stats)": [[240, "sympy.stats.Gamma"]], "gammainverse() (in module sympy.stats)": [[240, "sympy.stats.GammaInverse"]], "gammaprocess (class in sympy.stats)": [[240, "sympy.stats.GammaProcess"]], "generalizedmultivariateloggamma() (in module sympy.stats)": [[240, "sympy.stats.GeneralizedMultivariateLogGamma"]], "generalizedmultivariateloggammaomega() (in module sympy.stats)": [[240, "sympy.stats.GeneralizedMultivariateLogGammaOmega"]], "geometric() (in module sympy.stats)": [[240, "sympy.stats.Geometric"]], "gompertz() (in module sympy.stats)": [[240, "sympy.stats.Gompertz"]], "gumbel() (in module sympy.stats)": [[240, "sympy.stats.Gumbel"]], "hermite() (in module sympy.stats)": [[240, "sympy.stats.Hermite"]], "hypergeometric() (in module sympy.stats)": [[240, "sympy.stats.Hypergeometric"]], "jointrv() (in module sympy.stats)": [[240, "sympy.stats.JointRV"]], "kumaraswamy() (in module sympy.stats)": [[240, "sympy.stats.Kumaraswamy"]], "laplace() (in module sympy.stats)": [[240, "sympy.stats.Laplace"]], "levy() (in module sympy.stats)": [[240, "sympy.stats.Levy"]], "loglogistic() (in module sympy.stats)": [[240, "sympy.stats.LogLogistic"]], "lognormal() (in module sympy.stats)": [[240, "sympy.stats.LogNormal"]], "logarithmic() (in module sympy.stats)": [[240, "sympy.stats.Logarithmic"]], "logistic() (in module sympy.stats)": [[240, "sympy.stats.Logistic"]], "lomax() (in module sympy.stats)": [[240, "sympy.stats.Lomax"]], "matrixgamma() (in module sympy.stats)": [[240, "sympy.stats.MatrixGamma"]], "matrixnormal() (in module sympy.stats)": [[240, "sympy.stats.MatrixNormal"]], "maxwell() (in module sympy.stats)": [[240, "sympy.stats.Maxwell"]], "moment (class in sympy.stats)": [[240, "sympy.stats.Moment"]], "moyal() (in module sympy.stats)": [[240, "sympy.stats.Moyal"]], "multinomial() (in module sympy.stats)": [[240, "sympy.stats.Multinomial"]], "multivariatebeta() (in module sympy.stats)": [[240, "sympy.stats.MultivariateBeta"]], "multivariateewens() (in module sympy.stats)": [[240, "sympy.stats.MultivariateEwens"]], "multivariatelaplace() (in module sympy.stats)": [[240, "sympy.stats.MultivariateLaplace"]], "multivariatenormal() (in module sympy.stats)": [[240, "sympy.stats.MultivariateNormal"]], "multivariatet() (in module sympy.stats)": [[240, "sympy.stats.MultivariateT"]], "nakagami() (in module sympy.stats)": [[240, "sympy.stats.Nakagami"]], "negativebinomial() (in module sympy.stats)": [[240, "sympy.stats.NegativeBinomial"]], "negativemultinomial() (in module sympy.stats)": [[240, "sympy.stats.NegativeMultinomial"]], "normal() (in module sympy.stats)": [[240, "sympy.stats.Normal"]], "normalgamma() (in module sympy.stats)": [[240, "sympy.stats.NormalGamma"]], "normalpspace (class in sympy.stats.crv_types)": [[240, "sympy.stats.crv_types.NormalPSpace"]], "p() (in module sympy.stats)": [[240, "sympy.stats.P"]], "pspace (class in sympy.stats.rv)": [[240, "sympy.stats.rv.PSpace"]], "pareto() (in module sympy.stats)": [[240, "sympy.stats.Pareto"]], "poisson() (in module sympy.stats)": [[240, "sympy.stats.Poisson"]], "poissonprocess (class in sympy.stats)": [[240, "sympy.stats.PoissonProcess"]], "powerfunction() (in module sympy.stats)": [[240, "sympy.stats.PowerFunction"]], "probability (class in sympy.stats)": [[240, "sympy.stats.Probability"]], "productdomain (class in sympy.stats.rv)": [[240, "sympy.stats.rv.ProductDomain"]], "productpspace (class in sympy.stats.rv)": [[240, "sympy.stats.rv.ProductPSpace"]], "quadraticu() (in module sympy.stats)": [[240, "sympy.stats.QuadraticU"]], "rademacher() (in module sympy.stats)": [[240, "sympy.stats.Rademacher"]], "raisedcosine() (in module sympy.stats)": [[240, "sympy.stats.RaisedCosine"]], "randomdomain (class in sympy.stats.rv)": [[240, "sympy.stats.rv.RandomDomain"]], "randomsymbol (class in sympy.stats.rv)": [[240, "sympy.stats.rv.RandomSymbol"]], "rayleigh() (in module sympy.stats)": [[240, "sympy.stats.Rayleigh"]], "reciprocal() (in module sympy.stats)": [[240, "sympy.stats.Reciprocal"]], "shiftedgompertz() (in module sympy.stats)": [[240, "sympy.stats.ShiftedGompertz"]], "singledomain (class in sympy.stats.rv)": [[240, "sympy.stats.rv.SingleDomain"]], "singlepspace (class in sympy.stats.rv)": [[240, "sympy.stats.rv.SinglePSpace"]], "skellam() (in module sympy.stats)": [[240, "sympy.stats.Skellam"]], "studentt() (in module sympy.stats)": [[240, "sympy.stats.StudentT"]], "trapezoidal() (in module sympy.stats)": [[240, "sympy.stats.Trapezoidal"]], "triangular() (in module sympy.stats)": [[240, "sympy.stats.Triangular"]], "uniform() (in module sympy.stats)": [[240, "sympy.stats.Uniform"]], "uniformsum() (in module sympy.stats)": [[240, "sympy.stats.UniformSum"]], "variance (class in sympy.stats)": [[240, "sympy.stats.Variance"]], "variancematrix (class in sympy.stats)": [[240, "sympy.stats.VarianceMatrix"]], "vonmises() (in module sympy.stats)": [[240, "sympy.stats.VonMises"]], "wald() (in module sympy.stats)": [[240, "sympy.stats.Wald"]], "weibull() (in module sympy.stats)": [[240, "sympy.stats.Weibull"]], "wienerprocess (class in sympy.stats)": [[240, "sympy.stats.WienerProcess"]], "wignersemicircle() (in module sympy.stats)": [[240, "sympy.stats.WignerSemicircle"]], "wishart() (in module sympy.stats)": [[240, "sympy.stats.Wishart"]], "yulesimon() (in module sympy.stats)": [[240, "sympy.stats.YuleSimon"]], "zeta() (in module sympy.stats)": [[240, "sympy.stats.Zeta"]], "absorbing_probabilities() (sympy.stats.discretemarkovchain method)": [[240, "sympy.stats.DiscreteMarkovChain.absorbing_probabilities"]], "canonical_form() (sympy.stats.discretemarkovchain method)": [[240, "sympy.stats.DiscreteMarkovChain.canonical_form"]], "cmoment() (in module sympy.stats)": [[240, "sympy.stats.cmoment"]], "communication_classes() (sympy.stats.discretemarkovchain method)": [[240, "sympy.stats.DiscreteMarkovChain.communication_classes"]], "correlation() (in module sympy.stats)": [[240, "sympy.stats.correlation"]], "coskewness() (in module sympy.stats)": [[240, "sympy.stats.coskewness"]], "covariance() (in module sympy.stats)": [[240, "sympy.stats.covariance"]], "decompose() (sympy.stats.discretemarkovchain method)": [[240, "sympy.stats.DiscreteMarkovChain.decompose"]], "density() (in module sympy.stats)": [[240, "sympy.stats.density"]], "entropy() (in module sympy.stats)": [[240, "sympy.stats.entropy"]], "expectation() (sympy.stats.bernoulliprocess method)": [[240, "sympy.stats.BernoulliProcess.expectation"]], "factorial_moment() (in module sympy.stats)": [[240, "sympy.stats.factorial_moment"]], "fixed_row_vector() (sympy.stats.discretemarkovchain method)": [[240, "sympy.stats.DiscreteMarkovChain.fixed_row_vector"]], "fundamental_matrix() (sympy.stats.discretemarkovchain method)": [[240, "sympy.stats.DiscreteMarkovChain.fundamental_matrix"]], "given() (in module sympy.stats)": [[240, "sympy.stats.given"]], "kurtosis() (in module sympy.stats)": [[240, "sympy.stats.kurtosis"]], "limiting_distribution (sympy.stats.discretemarkovchain property)": [[240, "sympy.stats.DiscreteMarkovChain.limiting_distribution"]], "marginal_distribution() (in module sympy.stats)": [[240, "sympy.stats.marginal_distribution"]], "median() (in module sympy.stats)": [[240, "sympy.stats.median"]], "moment() (in module sympy.stats)": [[240, "sympy.stats.moment"]], "probability() (sympy.stats.bernoulliprocess method)": [[240, "sympy.stats.BernoulliProcess.probability"]], "pspace() (in module sympy.stats.rv)": [[240, "sympy.stats.rv.pspace"]], "quantile() (in module sympy.stats)": [[240, "sympy.stats.quantile"]], "random_symbols() (in module sympy.stats.rv)": [[240, "sympy.stats.rv.random_symbols"]], "rs_swap() (in module sympy.stats.rv)": [[240, "sympy.stats.rv.rs_swap"]], "sample() (in module sympy.stats)": [[240, "sympy.stats.sample"]], "sample() (sympy.stats.discretemarkovchain method)": [[240, "sympy.stats.DiscreteMarkovChain.sample"]], "sample_iter() (in module sympy.stats)": [[240, "sympy.stats.sample_iter"]], "sampling_e() (in module sympy.stats.rv)": [[240, "sympy.stats.rv.sampling_E"]], "sampling_p() (in module sympy.stats.rv)": [[240, "sympy.stats.rv.sampling_P"]], "sampling_density() (in module sympy.stats.rv)": [[240, "sympy.stats.rv.sampling_density"]], "skewness() (in module sympy.stats)": [[240, "sympy.stats.skewness"]], "stationary_distribution() (sympy.stats.discretemarkovchain method)": [[240, "sympy.stats.DiscreteMarkovChain.stationary_distribution"]], "std() (in module sympy.stats)": [[240, "sympy.stats.std"]], "sympy.stats": [[240, "module-sympy.stats"]], "sympy.stats.die() (in module sympy.stats.crv_types)": [[240, "sympy.stats.crv_types.sympy.stats.Die"]], "sympy.stats.normal() (in module sympy.stats.crv_types)": [[240, "sympy.stats.crv_types.sympy.stats.Normal"]], "sympy.stats.crv": [[240, "module-sympy.stats.crv"]], "sympy.stats.crv_types": [[240, "module-sympy.stats.crv_types"]], "sympy.stats.frv": [[240, "module-sympy.stats.frv"]], "sympy.stats.frv_types": [[240, "module-sympy.stats.frv_types"]], "sympy.stats.rv": [[240, "module-sympy.stats.rv"]], "transition_probabilities (sympy.stats.discretemarkovchain property)": [[240, "sympy.stats.DiscreteMarkovChain.transition_probabilities"]], "variance() (in module sympy.stats)": [[240, "sympy.stats.variance"]], "where() (in module sympy.stats)": [[240, "sympy.stats.where"]], "immutabledensendimarray (class in sympy.tensor.array)": [[241, "sympy.tensor.array.ImmutableDenseNDimArray"]], "immutablesparsendimarray (class in sympy.tensor.array)": [[241, "sympy.tensor.array.ImmutableSparseNDimArray"]], "mutabledensendimarray (class in sympy.tensor.array)": [[241, "sympy.tensor.array.MutableDenseNDimArray"]], "mutablesparsendimarray (class in sympy.tensor.array)": [[241, "sympy.tensor.array.MutableSparseNDimArray"]], "derive_by_array() (in module sympy.tensor.array)": [[241, "sympy.tensor.array.derive_by_array"]], "permutedims() (in module sympy.tensor.array)": [[241, "sympy.tensor.array.permutedims"]], "sympy.tensor.array": [[241, "module-sympy.tensor.array"]], "tensorcontraction() (in module sympy.tensor.array)": [[241, "sympy.tensor.array.tensorcontraction"]], "tensordiagonal() (in module sympy.tensor.array)": [[241, "sympy.tensor.array.tensordiagonal"]], "tensorproduct() (in module sympy.tensor.array)": [[241, "sympy.tensor.array.tensorproduct"]], "arraycontraction (class in sympy.tensor.array.expressions)": [[242, "sympy.tensor.array.expressions.ArrayContraction"]], "arraydiagonal (class in sympy.tensor.array.expressions)": [[242, "sympy.tensor.array.expressions.ArrayDiagonal"]], "arraytensorproduct (class in sympy.tensor.array.expressions)": [[242, "sympy.tensor.array.expressions.ArrayTensorProduct"]], "permutedims (class in sympy.tensor.array.expressions)": [[242, "sympy.tensor.array.expressions.PermuteDims"]], "sympy.tensor.array.expressions": [[242, "module-sympy.tensor.array.expressions"]], "sympy.tensor": [[243, "module-sympy.tensor"]], "get_contraction_structure() (in module sympy.tensor.index_methods)": [[244, "sympy.tensor.index_methods.get_contraction_structure"]], "get_indices() (in module sympy.tensor.index_methods)": [[244, "sympy.tensor.index_methods.get_indices"]], "sympy.tensor.index_methods": [[244, "module-sympy.tensor.index_methods"]], "idx (class in sympy.tensor.indexed)": [[245, "sympy.tensor.indexed.Idx"]], "indexed (class in sympy.tensor.indexed)": [[245, "sympy.tensor.indexed.Indexed"]], "indexedbase (class in sympy.tensor.indexed)": [[245, "sympy.tensor.indexed.IndexedBase"]], "base (sympy.tensor.indexed.indexed property)": [[245, "sympy.tensor.indexed.Indexed.base"]], "indices (sympy.tensor.indexed.indexed property)": [[245, "sympy.tensor.indexed.Indexed.indices"]], "label (sympy.tensor.indexed.idx property)": [[245, "sympy.tensor.indexed.Idx.label"]], "label (sympy.tensor.indexed.indexedbase property)": [[245, "sympy.tensor.indexed.IndexedBase.label"]], "lower (sympy.tensor.indexed.idx property)": [[245, "sympy.tensor.indexed.Idx.lower"]], "offset (sympy.tensor.indexed.indexedbase property)": [[245, "sympy.tensor.indexed.IndexedBase.offset"]], "ranges (sympy.tensor.indexed.indexed property)": [[245, "sympy.tensor.indexed.Indexed.ranges"]], "rank (sympy.tensor.indexed.indexed property)": [[245, "sympy.tensor.indexed.Indexed.rank"]], "shape (sympy.tensor.indexed.indexed property)": [[245, "sympy.tensor.indexed.Indexed.shape"]], "shape (sympy.tensor.indexed.indexedbase property)": [[245, "sympy.tensor.indexed.IndexedBase.shape"]], "strides (sympy.tensor.indexed.indexedbase property)": [[245, "sympy.tensor.indexed.IndexedBase.strides"]], "sympy.tensor.indexed": [[245, "module-sympy.tensor.indexed"]], "upper (sympy.tensor.indexed.idx property)": [[245, "sympy.tensor.indexed.Idx.upper"]], "tensadd (class in sympy.tensor.tensor)": [[246, "sympy.tensor.tensor.TensAdd"]], "tensexpr (class in sympy.tensor.tensor)": [[246, "sympy.tensor.tensor.TensExpr"]], "tensmul (class in sympy.tensor.tensor)": [[246, "sympy.tensor.tensor.TensMul"]], "tensorhead (class in sympy.tensor.tensor)": [[246, "sympy.tensor.tensor.TensorHead"]], "tensorindex (class in sympy.tensor.tensor)": [[246, "sympy.tensor.tensor.TensorIndex"]], "tensorindextype (class in sympy.tensor.tensor)": [[246, "sympy.tensor.tensor.TensorIndexType"]], "tensorsymmetry (class in sympy.tensor.tensor)": [[246, "sympy.tensor.tensor.TensorSymmetry"]], "tensortype (class in sympy.tensor.tensor)": [[246, "sympy.tensor.tensor.TensorType"]], "_tensormanager (class in sympy.tensor.tensor)": [[246, "sympy.tensor.tensor._TensorManager"]], "canon_bp() (in module sympy.tensor.tensor)": [[246, "sympy.tensor.tensor.canon_bp"]], "canon_bp() (sympy.tensor.tensor.tensadd method)": [[246, "sympy.tensor.tensor.TensAdd.canon_bp"]], "canon_bp() (sympy.tensor.tensor.tensmul method)": [[246, "sympy.tensor.tensor.TensMul.canon_bp"]], "clear() (sympy.tensor.tensor._tensormanager method)": [[246, "sympy.tensor.tensor._TensorManager.clear"]], "comm_i2symbol() (sympy.tensor.tensor._tensormanager method)": [[246, "sympy.tensor.tensor._TensorManager.comm_i2symbol"]], "comm_symbols2i() (sympy.tensor.tensor._tensormanager method)": [[246, "sympy.tensor.tensor._TensorManager.comm_symbols2i"]], "commutes_with() (sympy.tensor.tensor.tensorhead method)": [[246, "sympy.tensor.tensor.TensorHead.commutes_with"]], "contract_metric() (sympy.tensor.tensor.tensadd method)": [[246, "sympy.tensor.tensor.TensAdd.contract_metric"]], "contract_metric() (sympy.tensor.tensor.tensmul method)": [[246, "sympy.tensor.tensor.TensMul.contract_metric"]], "direct_product() (sympy.tensor.tensor.tensorsymmetry class method)": [[246, "sympy.tensor.tensor.TensorSymmetry.direct_product"]], "fully_symmetric() (sympy.tensor.tensor.tensorsymmetry class method)": [[246, "sympy.tensor.tensor.TensorSymmetry.fully_symmetric"]], "get_comm() (sympy.tensor.tensor._tensormanager method)": [[246, "sympy.tensor.tensor._TensorManager.get_comm"]], "get_free_indices() (sympy.tensor.tensor.tensmul method)": [[246, "sympy.tensor.tensor.TensMul.get_free_indices"]], "get_indices() (sympy.tensor.tensor.tensmul method)": [[246, "sympy.tensor.tensor.TensMul.get_indices"]], "get_matrix() (sympy.tensor.tensor.tensexpr method)": [[246, "sympy.tensor.tensor.TensExpr.get_matrix"]], "no_symmetry() (sympy.tensor.tensor.tensorsymmetry class method)": [[246, "sympy.tensor.tensor.TensorSymmetry.no_symmetry"]], "perm2tensor() (sympy.tensor.tensor.tensmul method)": [[246, "sympy.tensor.tensor.TensMul.perm2tensor"]], "replace_with_arrays() (sympy.tensor.tensor.tensexpr method)": [[246, "sympy.tensor.tensor.TensExpr.replace_with_arrays"]], "riemann() (sympy.tensor.tensor.tensorsymmetry class method)": [[246, "sympy.tensor.tensor.TensorSymmetry.riemann"]], "riemann_cyclic() (in module sympy.tensor.tensor)": [[246, "sympy.tensor.tensor.riemann_cyclic"]], "riemann_cyclic_replace() (in module sympy.tensor.tensor)": [[246, "sympy.tensor.tensor.riemann_cyclic_replace"]], "set_comm() (sympy.tensor.tensor._tensormanager method)": [[246, "sympy.tensor.tensor._TensorManager.set_comm"]], "set_comms() (sympy.tensor.tensor._tensormanager method)": [[246, "sympy.tensor.tensor._TensorManager.set_comms"]], "sorted_components() (sympy.tensor.tensor.tensmul method)": [[246, "sympy.tensor.tensor.TensMul.sorted_components"]], "split() (sympy.tensor.tensor.tensmul method)": [[246, "sympy.tensor.tensor.TensMul.split"]], "sympy.tensor.tensor": [[246, "module-sympy.tensor.tensor"]], "tensor_heads() (in module sympy.tensor.tensor)": [[246, "sympy.tensor.tensor.tensor_heads"]], "tensorsymmetry() (in module sympy.tensor.tensor)": [[246, "sympy.tensor.tensor.tensorsymmetry"]], "partialderivative (class in sympy.tensor.toperators)": [[247, "sympy.tensor.toperators.PartialDerivative"]], "sympy.tensor.toperators": [[247, "module-sympy.tensor.toperators"]], "sympy.testing": [[248, "module-sympy.testing"]], "skip() (in module sympy.testing.pytest)": [[249, "sympy.testing.pytest.SKIP"]], "nocache_fail() (in module sympy.testing.pytest)": [[249, "sympy.testing.pytest.nocache_fail"]], "raises() (in module sympy.testing.pytest)": [[249, "sympy.testing.pytest.raises"]], "skip_under_pyodide() (in module sympy.testing.pytest)": [[249, "sympy.testing.pytest.skip_under_pyodide"]], "sympy.testing.pytest": [[249, "module-sympy.testing.pytest"]], "warns() (in module sympy.testing.pytest)": [[249, "sympy.testing.pytest.warns"]], "warns_deprecated_sympy() (in module sympy.testing.pytest)": [[249, "sympy.testing.pytest.warns_deprecated_sympy"]], "sympy.testing.randtest": [[250, "module-sympy.testing.randtest"]], "pytestreporter (class in sympy.testing.runtests)": [[251, "sympy.testing.runtests.PyTestReporter"]], "reporter (class in sympy.testing.runtests)": [[251, "sympy.testing.runtests.Reporter"]], "sympydoctestfinder (class in sympy.testing.runtests)": [[251, "sympy.testing.runtests.SymPyDocTestFinder"]], "sympydoctestrunner (class in sympy.testing.runtests)": [[251, "sympy.testing.runtests.SymPyDocTestRunner"]], "sympyoutputchecker (class in sympy.testing.runtests)": [[251, "sympy.testing.runtests.SymPyOutputChecker"]], "sympytestresults (class in sympy.testing.runtests)": [[251, "sympy.testing.runtests.SymPyTestResults"]], "attempted (sympy.testing.runtests.sympytestresults attribute)": [[251, "sympy.testing.runtests.SymPyTestResults.attempted"]], "check_output() (sympy.testing.runtests.sympyoutputchecker method)": [[251, "sympy.testing.runtests.SymPyOutputChecker.check_output"]], "convert_to_native_paths() (in module sympy.testing.runtests)": [[251, "sympy.testing.runtests.convert_to_native_paths"]], "doctest() (in module sympy.testing.runtests)": [[251, "sympy.testing.runtests.doctest"]], "failed (sympy.testing.runtests.sympytestresults attribute)": [[251, "sympy.testing.runtests.SymPyTestResults.failed"]], "get_sympy_dir() (in module sympy.testing.runtests)": [[251, "sympy.testing.runtests.get_sympy_dir"]], "raise_on_deprecated() (in module sympy.testing.runtests)": [[251, "sympy.testing.runtests.raise_on_deprecated"]], "run() (sympy.testing.runtests.sympydoctestrunner method)": [[251, "sympy.testing.runtests.SymPyDocTestRunner.run"]], "run_all_tests() (in module sympy.testing.runtests)": [[251, "sympy.testing.runtests.run_all_tests"]], "run_in_subprocess_with_hash_randomization() (in module sympy.testing.runtests)": [[251, "sympy.testing.runtests.run_in_subprocess_with_hash_randomization"]], "split_list() (in module sympy.testing.runtests)": [[251, "sympy.testing.runtests.split_list"]], "sympy.testing.runtests": [[251, "module-sympy.testing.runtests"]], "sympytestfile() (in module sympy.testing.runtests)": [[251, "sympy.testing.runtests.sympytestfile"]], "test() (in module sympy.testing.runtests)": [[251, "sympy.testing.runtests.test"]], "write() (sympy.testing.runtests.pytestreporter method)": [[251, "sympy.testing.runtests.PyTestReporter.write"]], "codewrapper (class in sympy.utilities.autowrap)": [[252, "sympy.utilities.autowrap.CodeWrapper"]], "cythoncodewrapper (class in sympy.utilities.autowrap)": [[252, "sympy.utilities.autowrap.CythonCodeWrapper"]], "dummywrapper (class in sympy.utilities.autowrap)": [[252, "sympy.utilities.autowrap.DummyWrapper"]], "f2pycodewrapper (class in sympy.utilities.autowrap)": [[252, "sympy.utilities.autowrap.F2PyCodeWrapper"]], "ufuncifycodewrapper (class in sympy.utilities.autowrap)": [[252, "sympy.utilities.autowrap.UfuncifyCodeWrapper"]], "autowrap() (in module sympy.utilities.autowrap)": [[252, "sympy.utilities.autowrap.autowrap"]], "binary_function() (in module sympy.utilities.autowrap)": [[252, "sympy.utilities.autowrap.binary_function"]], "dump_c() (sympy.utilities.autowrap.ufuncifycodewrapper method)": [[252, "sympy.utilities.autowrap.UfuncifyCodeWrapper.dump_c"]], "dump_pyx() (sympy.utilities.autowrap.cythoncodewrapper method)": [[252, "sympy.utilities.autowrap.CythonCodeWrapper.dump_pyx"]], "sympy.utilities.autowrap": [[252, "module-sympy.utilities.autowrap"]], "ufuncify() (in module sympy.utilities.autowrap)": [[252, "sympy.utilities.autowrap.ufuncify"]], "argument (class in sympy.utilities.codegen)": [[253, "sympy.utilities.codegen.Argument"]], "ccodegen (class in sympy.utilities.codegen)": [[253, "sympy.utilities.codegen.CCodeGen"]], "codegen (class in sympy.utilities.codegen)": [[253, "sympy.utilities.codegen.CodeGen"]], "datatype (class in sympy.utilities.codegen)": [[253, "sympy.utilities.codegen.DataType"]], "fcodegen (class in sympy.utilities.codegen)": [[253, "sympy.utilities.codegen.FCodeGen"]], "juliacodegen (class in sympy.utilities.codegen)": [[253, "sympy.utilities.codegen.JuliaCodeGen"]], "octavecodegen (class in sympy.utilities.codegen)": [[253, "sympy.utilities.codegen.OctaveCodeGen"]], "outputargument (class in sympy.utilities.codegen)": [[253, "sympy.utilities.codegen.OutputArgument"]], "result (class in sympy.utilities.codegen)": [[253, "sympy.utilities.codegen.Result"]], "routine (class in sympy.utilities.codegen)": [[253, "sympy.utilities.codegen.Routine"]], "rustcodegen (class in sympy.utilities.codegen)": [[253, "sympy.utilities.codegen.RustCodeGen"]], "codegen() (in module sympy.utilities.codegen)": [[253, "sympy.utilities.codegen.codegen"]], "dump_c() (sympy.utilities.codegen.ccodegen method)": [[253, "sympy.utilities.codegen.CCodeGen.dump_c"]], "dump_code() (sympy.utilities.codegen.codegen method)": [[253, "sympy.utilities.codegen.CodeGen.dump_code"]], "dump_f95() (sympy.utilities.codegen.fcodegen method)": [[253, "sympy.utilities.codegen.FCodeGen.dump_f95"]], "dump_h() (sympy.utilities.codegen.ccodegen method)": [[253, "sympy.utilities.codegen.CCodeGen.dump_h"]], "dump_h() (sympy.utilities.codegen.fcodegen method)": [[253, "sympy.utilities.codegen.FCodeGen.dump_h"]], "dump_jl() (sympy.utilities.codegen.juliacodegen method)": [[253, "sympy.utilities.codegen.JuliaCodeGen.dump_jl"]], "dump_m() (sympy.utilities.codegen.octavecodegen method)": [[253, "sympy.utilities.codegen.OctaveCodeGen.dump_m"]], "dump_rs() (sympy.utilities.codegen.rustcodegen method)": [[253, "sympy.utilities.codegen.RustCodeGen.dump_rs"]], "get_default_datatype() (in module sympy.utilities.codegen)": [[253, "sympy.utilities.codegen.get_default_datatype"]], "get_interface() (sympy.utilities.codegen.fcodegen method)": [[253, "sympy.utilities.codegen.FCodeGen.get_interface"]], "get_prototype() (sympy.utilities.codegen.ccodegen method)": [[253, "sympy.utilities.codegen.CCodeGen.get_prototype"]], "get_prototype() (sympy.utilities.codegen.rustcodegen method)": [[253, "sympy.utilities.codegen.RustCodeGen.get_prototype"]], "make_routine() (in module sympy.utilities.codegen)": [[253, "sympy.utilities.codegen.make_routine"]], "result_variables (sympy.utilities.codegen.routine property)": [[253, "sympy.utilities.codegen.Routine.result_variables"]], "routine() (sympy.utilities.codegen.codegen method)": [[253, "sympy.utilities.codegen.CodeGen.routine"]], "routine() (sympy.utilities.codegen.juliacodegen method)": [[253, "sympy.utilities.codegen.JuliaCodeGen.routine"]], "routine() (sympy.utilities.codegen.octavecodegen method)": [[253, "sympy.utilities.codegen.OctaveCodeGen.routine"]], "routine() (sympy.utilities.codegen.rustcodegen method)": [[253, "sympy.utilities.codegen.RustCodeGen.routine"]], "sympy.utilities.codegen": [[253, "module-sympy.utilities.codegen"]], "variables (sympy.utilities.codegen.routine property)": [[253, "sympy.utilities.codegen.Routine.variables"]], "write() (sympy.utilities.codegen.codegen method)": [[253, "sympy.utilities.codegen.CodeGen.write"]], "conserve_mpmath_dps() (in module sympy.utilities.decorator)": [[254, "sympy.utilities.decorator.conserve_mpmath_dps"]], "deprecated() (in module sympy.utilities.decorator)": [[254, "sympy.utilities.decorator.deprecated"]], "doctest_depends_on() (in module sympy.utilities.decorator)": [[254, "sympy.utilities.decorator.doctest_depends_on"]], "memoize_property() (in module sympy.utilities.decorator)": [[254, "sympy.utilities.decorator.memoize_property"]], "no_attrs_in_subclass (class in sympy.utilities.decorator)": [[254, "sympy.utilities.decorator.no_attrs_in_subclass"]], "public() (in module sympy.utilities.decorator)": [[254, "sympy.utilities.decorator.public"]], "sympy.utilities.decorator": [[254, "module-sympy.utilities.decorator"]], "threaded() (in module sympy.utilities.decorator)": [[254, "sympy.utilities.decorator.threaded"]], "threaded_factory() (in module sympy.utilities.decorator)": [[254, "sympy.utilities.decorator.threaded_factory"]], "xthreaded() (in module sympy.utilities.decorator)": [[254, "sympy.utilities.decorator.xthreaded"]], "multisetpartitiontraverser (class in sympy.utilities.enumerative)": [[255, "sympy.utilities.enumerative.MultisetPartitionTraverser"]], "count_partitions() (sympy.utilities.enumerative.multisetpartitiontraverser method)": [[255, "sympy.utilities.enumerative.MultisetPartitionTraverser.count_partitions"]], "enum_all() (sympy.utilities.enumerative.multisetpartitiontraverser method)": [[255, "sympy.utilities.enumerative.MultisetPartitionTraverser.enum_all"]], "enum_large() (sympy.utilities.enumerative.multisetpartitiontraverser method)": [[255, "sympy.utilities.enumerative.MultisetPartitionTraverser.enum_large"]], "enum_range() (sympy.utilities.enumerative.multisetpartitiontraverser method)": [[255, "sympy.utilities.enumerative.MultisetPartitionTraverser.enum_range"]], "enum_small() (sympy.utilities.enumerative.multisetpartitiontraverser method)": [[255, "sympy.utilities.enumerative.MultisetPartitionTraverser.enum_small"]], "factoring_visitor() (in module sympy.utilities.enumerative)": [[255, "sympy.utilities.enumerative.factoring_visitor"]], "list_visitor() (in module sympy.utilities.enumerative)": [[255, "sympy.utilities.enumerative.list_visitor"]], "multiset_partitions_taocp() (in module sympy.utilities.enumerative)": [[255, "sympy.utilities.enumerative.multiset_partitions_taocp"]], "sympy.utilities.enumerative": [[255, "module-sympy.utilities.enumerative"]], "sympydeprecationwarning": [[256, "sympy.utilities.exceptions.SymPyDeprecationWarning"]], "ignore_warnings() (in module sympy.utilities.exceptions)": [[256, "sympy.utilities.exceptions.ignore_warnings"]], "sympy.utilities.exceptions": [[256, "module-sympy.utilities.exceptions"]], "sympy_deprecation_warning() (in module sympy.utilities.exceptions)": [[256, "sympy.utilities.exceptions.sympy_deprecation_warning"]], "sympy.utilities": [[257, "module-sympy.utilities"]], "notiterable (class in sympy.utilities.iterables)": [[258, "sympy.utilities.iterables.NotIterable"]], "binary_partitions() (in module sympy.utilities.iterables)": [[258, "sympy.utilities.iterables.binary_partitions"]], "bracelets() (in module sympy.utilities.iterables)": [[258, "sympy.utilities.iterables.bracelets"]], "capture() (in module sympy.utilities.iterables)": [[258, "sympy.utilities.iterables.capture"]], "common_prefix() (in module sympy.utilities.iterables)": [[258, "sympy.utilities.iterables.common_prefix"]], "common_suffix() (in module sympy.utilities.iterables)": [[258, "sympy.utilities.iterables.common_suffix"]], "connected_components() (in module sympy.utilities.iterables)": [[258, "sympy.utilities.iterables.connected_components"]], "dict_merge() (in module sympy.utilities.iterables)": [[258, "sympy.utilities.iterables.dict_merge"]], "filter_symbols() (in module sympy.utilities.iterables)": [[258, "sympy.utilities.iterables.filter_symbols"]], "flatten() (in module sympy.utilities.iterables)": [[258, "sympy.utilities.iterables.flatten"]], "generate_bell() (in module sympy.utilities.iterables)": [[258, "sympy.utilities.iterables.generate_bell"]], "generate_derangements() (in module sympy.utilities.iterables)": [[258, "sympy.utilities.iterables.generate_derangements"]], "generate_involutions() (in module sympy.utilities.iterables)": [[258, "sympy.utilities.iterables.generate_involutions"]], "generate_oriented_forest() (in module sympy.utilities.iterables)": [[258, "sympy.utilities.iterables.generate_oriented_forest"]], "group() (in module sympy.utilities.iterables)": [[258, "sympy.utilities.iterables.group"]], "has_dups() (in module sympy.utilities.iterables)": [[258, "sympy.utilities.iterables.has_dups"]], "has_variety() (in module sympy.utilities.iterables)": [[258, "sympy.utilities.iterables.has_variety"]], "ibin() (in module sympy.utilities.iterables)": [[258, "sympy.utilities.iterables.ibin"]], "iproduct() (in module sympy.utilities.iterables)": [[258, "sympy.utilities.iterables.iproduct"]], "is_palindromic() (in module sympy.utilities.iterables)": [[258, "sympy.utilities.iterables.is_palindromic"]], "is_sequence() (in module sympy.utilities.iterables)": [[258, "sympy.utilities.iterables.is_sequence"]], "iterable() (in module sympy.utilities.iterables)": [[258, "sympy.utilities.iterables.iterable"]], "kbins() (in module sympy.utilities.iterables)": [[258, "sympy.utilities.iterables.kbins"]], "least_rotation() (in module sympy.utilities.iterables)": [[258, "sympy.utilities.iterables.least_rotation"]], "minlex() (in module sympy.utilities.iterables)": [[258, "sympy.utilities.iterables.minlex"]], "multiset() (in module sympy.utilities.iterables)": [[258, "sympy.utilities.iterables.multiset"]], "multiset_combinations() (in module sympy.utilities.iterables)": [[258, "sympy.utilities.iterables.multiset_combinations"]], "multiset_derangements() (in module sympy.utilities.iterables)": [[258, "sympy.utilities.iterables.multiset_derangements"]], "multiset_partitions() (in module sympy.utilities.iterables)": [[258, "sympy.utilities.iterables.multiset_partitions"]], "multiset_permutations() (in module sympy.utilities.iterables)": [[258, "sympy.utilities.iterables.multiset_permutations"]], "necklaces() (in module sympy.utilities.iterables)": [[258, "sympy.utilities.iterables.necklaces"]], "numbered_symbols() (in module sympy.utilities.iterables)": [[258, "sympy.utilities.iterables.numbered_symbols"]], "ordered_partitions() (in module sympy.utilities.iterables)": [[258, "sympy.utilities.iterables.ordered_partitions"]], "partitions() (in module sympy.utilities.iterables)": [[258, "sympy.utilities.iterables.partitions"]], "permute_signs() (in module sympy.utilities.iterables)": [[258, "sympy.utilities.iterables.permute_signs"]], "postfixes() (in module sympy.utilities.iterables)": [[258, "sympy.utilities.iterables.postfixes"]], "prefixes() (in module sympy.utilities.iterables)": [[258, "sympy.utilities.iterables.prefixes"]], "random_derangement() (in module sympy.utilities.iterables)": [[258, "sympy.utilities.iterables.random_derangement"]], "reshape() (in module sympy.utilities.iterables)": [[258, "sympy.utilities.iterables.reshape"]], "rotate_left() (in module sympy.utilities.iterables)": [[258, "sympy.utilities.iterables.rotate_left"]], "rotate_right() (in module sympy.utilities.iterables)": [[258, "sympy.utilities.iterables.rotate_right"]], "rotations() (in module sympy.utilities.iterables)": [[258, "sympy.utilities.iterables.rotations"]], "roundrobin() (in module sympy.utilities.iterables)": [[258, "sympy.utilities.iterables.roundrobin"]], "runs() (in module sympy.utilities.iterables)": [[258, "sympy.utilities.iterables.runs"]], "sequence_partitions() (in module sympy.utilities.iterables)": [[258, "sympy.utilities.iterables.sequence_partitions"]], "sequence_partitions_empty() (in module sympy.utilities.iterables)": [[258, "sympy.utilities.iterables.sequence_partitions_empty"]], "sift() (in module sympy.utilities.iterables)": [[258, "sympy.utilities.iterables.sift"]], "signed_permutations() (in module sympy.utilities.iterables)": [[258, "sympy.utilities.iterables.signed_permutations"]], "strongly_connected_components() (in module sympy.utilities.iterables)": [[258, "sympy.utilities.iterables.strongly_connected_components"]], "subsets() (in module sympy.utilities.iterables)": [[258, "sympy.utilities.iterables.subsets"]], "sympy.utilities.iterables": [[258, "module-sympy.utilities.iterables"]], "take() (in module sympy.utilities.iterables)": [[258, "sympy.utilities.iterables.take"]], "topological_sort() (in module sympy.utilities.iterables)": [[258, "sympy.utilities.iterables.topological_sort"]], "unflatten() (in module sympy.utilities.iterables)": [[258, "sympy.utilities.iterables.unflatten"]], "uniq() (in module sympy.utilities.iterables)": [[258, "sympy.utilities.iterables.uniq"]], "variations() (in module sympy.utilities.iterables)": [[258, "sympy.utilities.iterables.variations"]], "implemented_function() (in module sympy.utilities.lambdify)": [[259, "sympy.utilities.lambdify.implemented_function"]], "lambdastr() (in module sympy.utilities.lambdify)": [[259, "sympy.utilities.lambdify.lambdastr"]], "lambdify() (in module sympy.utilities.lambdify)": [[259, "sympy.utilities.lambdify.lambdify"]], "sympy.utilities.lambdify": [[259, "module-sympy.utilities.lambdify"]], "assoc_recurrence_memo() (in module sympy.utilities.memoization)": [[260, "sympy.utilities.memoization.assoc_recurrence_memo"]], "recurrence_memo() (in module sympy.utilities.memoization)": [[260, "sympy.utilities.memoization.recurrence_memo"]], "sympy.utilities.memoization": [[260, "module-sympy.utilities.memoization"]], "as_int() (in module sympy.utilities.misc)": [[261, "sympy.utilities.misc.as_int"]], "debug() (in module sympy.utilities.misc)": [[261, "sympy.utilities.misc.debug"]], "debug_decorator() (in module sympy.utilities.misc)": [[261, "sympy.utilities.misc.debug_decorator"]], "debugf() (in module sympy.utilities.misc)": [[261, "sympy.utilities.misc.debugf"]], "filldedent() (in module sympy.utilities.misc)": [[261, "sympy.utilities.misc.filldedent"]], "find_executable() (in module sympy.utilities.misc)": [[261, "sympy.utilities.misc.find_executable"]], "func_name() (in module sympy.utilities.misc)": [[261, "sympy.utilities.misc.func_name"]], "ordinal() (in module sympy.utilities.misc)": [[261, "sympy.utilities.misc.ordinal"]], "rawlines() (in module sympy.utilities.misc)": [[261, "sympy.utilities.misc.rawlines"]], "replace() (in module sympy.utilities.misc)": [[261, "sympy.utilities.misc.replace"]], "strlines() (in module sympy.utilities.misc)": [[261, "sympy.utilities.misc.strlines"]], "sympy.utilities.misc": [[261, "module-sympy.utilities.misc"]], "translate() (in module sympy.utilities.misc)": [[261, "sympy.utilities.misc.translate"]], "get_resource() (in module sympy.utilities.pkgdata)": [[262, "sympy.utilities.pkgdata.get_resource"]], "sympy.utilities.pkgdata": [[262, "module-sympy.utilities.pkgdata"]], "get_class() (in module sympy.utilities.source)": [[263, "sympy.utilities.source.get_class"]], "get_mod_func() (in module sympy.utilities.source)": [[263, "sympy.utilities.source.get_mod_func"]], "sympy.utilities.source": [[263, "module-sympy.utilities.source"]], "sympy.utilities.timeutils": [[264, "module-sympy.utilities.timeutils"]], "timed() (in module sympy.utilities.timeutils)": [[264, "sympy.utilities.timeutils.timed"]], "coordsys3d (class in sympy.vector.coordsysrect)": [[265, "sympy.vector.coordsysrect.CoordSys3D"]], "del (class in sympy.vector.deloperator)": [[265, "sympy.vector.deloperator.Del"]], "dyadic (class in sympy.vector.dyadic)": [[265, "sympy.vector.dyadic.Dyadic"]], "implicitregion (class in sympy.vector.implicitregion)": [[265, "sympy.vector.implicitregion.ImplicitRegion"]], "parametricintegral (class in sympy.vector.integrals)": [[265, "sympy.vector.integrals.ParametricIntegral"]], "parametricregion (class in sympy.vector.parametricregion)": [[265, "sympy.vector.parametricregion.ParametricRegion"]], "vector (class in sympy.vector.vector)": [[265, "sympy.vector.vector.Vector"]], "__init__() (sympy.vector.coordsysrect.coordsys3d method)": [[265, "sympy.vector.coordsysrect.CoordSys3D.__init__"]], "components (sympy.vector.dyadic.dyadic property)": [[265, "sympy.vector.dyadic.Dyadic.components"]], "components (sympy.vector.vector.vector property)": [[265, "sympy.vector.vector.Vector.components"]], "create_new() (sympy.vector.coordsysrect.coordsys3d method)": [[265, "sympy.vector.coordsysrect.CoordSys3D.create_new"]], "cross() (sympy.vector.deloperator.del method)": [[265, "sympy.vector.deloperator.Del.cross"]], "cross() (sympy.vector.dyadic.dyadic method)": [[265, "sympy.vector.dyadic.Dyadic.cross"]], "cross() (sympy.vector.vector.vector method)": [[265, "sympy.vector.vector.Vector.cross"]], "dot() (sympy.vector.deloperator.del method)": [[265, "sympy.vector.deloperator.Del.dot"]], "dot() (sympy.vector.dyadic.dyadic method)": [[265, "sympy.vector.dyadic.Dyadic.dot"]], "dot() (sympy.vector.vector.vector method)": [[265, "sympy.vector.vector.Vector.dot"]], "gradient() (sympy.vector.deloperator.del method)": [[265, "sympy.vector.deloperator.Del.gradient"]], "locate_new() (sympy.vector.coordsysrect.coordsys3d method)": [[265, "sympy.vector.coordsysrect.CoordSys3D.locate_new"]], "magnitude() (sympy.vector.vector.vector method)": [[265, "sympy.vector.vector.Vector.magnitude"]], "multiplicity() (sympy.vector.implicitregion.implicitregion method)": [[265, "sympy.vector.implicitregion.ImplicitRegion.multiplicity"]], "normalize() (sympy.vector.vector.vector method)": [[265, "sympy.vector.vector.Vector.normalize"]], "orient_new() (sympy.vector.coordsysrect.coordsys3d method)": [[265, "sympy.vector.coordsysrect.CoordSys3D.orient_new"]], "orient_new_axis() (sympy.vector.coordsysrect.coordsys3d method)": [[265, "sympy.vector.coordsysrect.CoordSys3D.orient_new_axis"]], "orient_new_body() (sympy.vector.coordsysrect.coordsys3d method)": [[265, "sympy.vector.coordsysrect.CoordSys3D.orient_new_body"]], "orient_new_quaternion() (sympy.vector.coordsysrect.coordsys3d method)": [[265, "sympy.vector.coordsysrect.CoordSys3D.orient_new_quaternion"]], "orient_new_space() (sympy.vector.coordsysrect.coordsys3d method)": [[265, "sympy.vector.coordsysrect.CoordSys3D.orient_new_space"]], "outer() (sympy.vector.vector.vector method)": [[265, "sympy.vector.vector.Vector.outer"]], "position_wrt() (sympy.vector.coordsysrect.coordsys3d method)": [[265, "sympy.vector.coordsysrect.CoordSys3D.position_wrt"]], "projection() (sympy.vector.vector.vector method)": [[265, "sympy.vector.vector.Vector.projection"]], "rational_parametrization() (sympy.vector.implicitregion.implicitregion method)": [[265, "sympy.vector.implicitregion.ImplicitRegion.rational_parametrization"]], "regular_point() (sympy.vector.implicitregion.implicitregion method)": [[265, "sympy.vector.implicitregion.ImplicitRegion.regular_point"]], "rotation_matrix() (sympy.vector.coordsysrect.coordsys3d method)": [[265, "sympy.vector.coordsysrect.CoordSys3D.rotation_matrix"]], "scalar_map() (sympy.vector.coordsysrect.coordsys3d method)": [[265, "sympy.vector.coordsysrect.CoordSys3D.scalar_map"]], "separate() (sympy.vector.vector.vector method)": [[265, "sympy.vector.vector.Vector.separate"]], "singular_points() (sympy.vector.implicitregion.implicitregion method)": [[265, "sympy.vector.implicitregion.ImplicitRegion.singular_points"]], "to_matrix() (sympy.vector.dyadic.dyadic method)": [[265, "sympy.vector.dyadic.Dyadic.to_matrix"]], "to_matrix() (sympy.vector.vector.vector method)": [[265, "sympy.vector.vector.Vector.to_matrix"]], "axisorienter (class in sympy.vector.orienters)": [[267, "sympy.vector.orienters.AxisOrienter"]], "bodyorienter (class in sympy.vector.orienters)": [[267, "sympy.vector.orienters.BodyOrienter"]], "orienter (class in sympy.vector.orienters)": [[267, "sympy.vector.orienters.Orienter"]], "quaternionorienter (class in sympy.vector.orienters)": [[267, "sympy.vector.orienters.QuaternionOrienter"]], "spaceorienter (class in sympy.vector.orienters)": [[267, "sympy.vector.orienters.SpaceOrienter"]], "__init__() (sympy.vector.orienters.axisorienter method)": [[267, "sympy.vector.orienters.AxisOrienter.__init__"]], "__init__() (sympy.vector.orienters.bodyorienter method)": [[267, "sympy.vector.orienters.BodyOrienter.__init__"]], "__init__() (sympy.vector.orienters.quaternionorienter method)": [[267, "sympy.vector.orienters.QuaternionOrienter.__init__"]], "__init__() (sympy.vector.orienters.spaceorienter method)": [[267, "sympy.vector.orienters.SpaceOrienter.__init__"]], "rotation_matrix() (sympy.vector.orienters.axisorienter method)": [[267, "sympy.vector.orienters.AxisOrienter.rotation_matrix"]], "rotation_matrix() (sympy.vector.orienters.orienter method)": [[267, "sympy.vector.orienters.Orienter.rotation_matrix"]], "curl() (in module sympy.vector)": [[268, "sympy.vector.curl"]], "divergence() (in module sympy.vector)": [[268, "sympy.vector.divergence"]], "express() (in module sympy.vector)": [[268, "sympy.vector.express"]], "gradient() (in module sympy.vector)": [[268, "sympy.vector.gradient"]], "is_conservative() (in module sympy.vector)": [[268, "sympy.vector.is_conservative"]], "is_solenoidal() (in module sympy.vector)": [[268, "sympy.vector.is_solenoidal"]], "matrix_to_vector() (in module sympy.vector)": [[268, "sympy.vector.matrix_to_vector"]], "scalar_potential() (in module sympy.vector)": [[268, "sympy.vector.scalar_potential"]], "scalar_potential_difference() (in module sympy.vector)": [[268, "sympy.vector.scalar_potential_difference"]], "vector_integrate() (in module sympy.vector.integrals)": [[268, "sympy.vector.integrals.vector_integrate"]], "sympy.vector": [[273, "module-sympy.vector"]], "sympy.physics": [[282, "module-sympy.physics"]]}})
Search.setIndex({"docnames": ["citing", "contributing/debug", "contributing/dependencies", "contributing/deprecations", "contributing/docstring", "contributing/documentation-style-guide", "contributing/index", "contributing/introduction-to-contributing", "contributing/new-contributors-guide/build-docs", "contributing/new-contributors-guide/dev-setup", "contributing/new-contributors-guide/index", "contributing/new-contributors-guide/workflow-process", "contributing/new-contributors-guide/writing-tests", "explanation/active-deprecations", "explanation/glossary", "explanation/gotchas", "explanation/index", "explanation/solve_output", "explanation/special_topics/classification", "explanation/special_topics/finite_diff_derivatives", "explanation/special_topics/index", "guides/assumptions", "guides/booleans", "guides/custom-functions", "guides/index", "guides/logo", "guides/physics/control_problems", "guides/physics/index", "guides/solving/find-roots-polynomial", "guides/solving/index", "guides/solving/reduce-inequalities-algebraically", "guides/solving/solve-diophantine-equation", "guides/solving/solve-equation-algebraically", "guides/solving/solve-matrix-equation", "guides/solving/solve-numerically", "guides/solving/solve-ode", "guides/solving/solve-system-of-equations-algebraically", "guides/solving/solving-guidance", "index", "install", "modules/abc", "modules/algebras", "modules/assumptions/ask", "modules/assumptions/assume", "modules/assumptions/index", "modules/assumptions/predicates", "modules/assumptions/refine", "modules/calculus/index", "modules/categories", "modules/codegen", "modules/combinatorics/fp_groups", "modules/combinatorics/galois", "modules/combinatorics/graycode", "modules/combinatorics/group_constructs", "modules/combinatorics/group_numbers", "modules/combinatorics/index", "modules/combinatorics/named_groups", "modules/combinatorics/partitions", "modules/combinatorics/pc_groups", "modules/combinatorics/perm_groups", "modules/combinatorics/permutations", "modules/combinatorics/polyhedron", "modules/combinatorics/prufer", "modules/combinatorics/subsets", "modules/combinatorics/tensor_can", "modules/combinatorics/testutil", "modules/combinatorics/util", "modules/concrete", "modules/core", "modules/crypto", "modules/diffgeom", "modules/discrete", "modules/evalf", "modules/functions/combinatorial", "modules/functions/elementary", "modules/functions/index", "modules/functions/special", "modules/geometry/curves", "modules/geometry/ellipses", "modules/geometry/entities", "modules/geometry/index", "modules/geometry/lines", "modules/geometry/plane", "modules/geometry/points", "modules/geometry/polygons", "modules/geometry/utils", "modules/holonomic/about", "modules/holonomic/convert", "modules/holonomic/index", "modules/holonomic/internal", "modules/holonomic/operations", "modules/holonomic/represent", "modules/holonomic/uses", "modules/integrals/g-functions", "modules/integrals/index", "modules/integrals/integrals", "modules/interactive", "modules/liealgebras/index", "modules/logic", "modules/matrices/common", "modules/matrices/dense", "modules/matrices/expressions", "modules/matrices/immutablematrices", "modules/matrices/index", "modules/matrices/matrices", "modules/matrices/normalforms", "modules/matrices/sparse", "modules/matrices/sparsetools", "modules/ntheory", "modules/numeric-computation", "modules/parsing", "modules/physics/biomechanics/api/activation", "modules/physics/biomechanics/api/curve", "modules/physics/biomechanics/api/index", "modules/physics/biomechanics/api/musculotendon", "modules/physics/biomechanics/index", "modules/physics/continuum_mechanics/beam", "modules/physics/continuum_mechanics/beam_problems", "modules/physics/continuum_mechanics/cable", "modules/physics/continuum_mechanics/index", "modules/physics/continuum_mechanics/truss", "modules/physics/control/control", "modules/physics/control/control_plots", "modules/physics/control/index", "modules/physics/control/lti", "modules/physics/hep/index", "modules/physics/hydrogen", "modules/physics/matrices", "modules/physics/mechanics/advanced", "modules/physics/mechanics/api/actuator", "modules/physics/mechanics/api/body", "modules/physics/mechanics/api/expr_manip", "modules/physics/mechanics/api/index", "modules/physics/mechanics/api/joint", "modules/physics/mechanics/api/kane_lagrange", "modules/physics/mechanics/api/linearize", "modules/physics/mechanics/api/part_bod", "modules/physics/mechanics/api/pathway", "modules/physics/mechanics/api/printing", "modules/physics/mechanics/api/system", "modules/physics/mechanics/api/wrapping_geometry", "modules/physics/mechanics/autolev_parser", "modules/physics/mechanics/examples", "modules/physics/mechanics/examples/bicycle_example", "modules/physics/mechanics/examples/four_bar_linkage_example", "modules/physics/mechanics/examples/lin_pend_nonmin_example", "modules/physics/mechanics/examples/multi_degree_freedom_holonomic_system", "modules/physics/mechanics/examples/rollingdisc_example", "modules/physics/mechanics/examples/rollingdisc_example_kane", "modules/physics/mechanics/examples/rollingdisc_example_kane_constraints", "modules/physics/mechanics/examples/rollingdisc_example_lagrange", "modules/physics/mechanics/index", "modules/physics/mechanics/joints", "modules/physics/mechanics/kane", "modules/physics/mechanics/lagrange", "modules/physics/mechanics/linearize", "modules/physics/mechanics/masses", "modules/physics/mechanics/reference", "modules/physics/mechanics/sympy_mechanics_for_autolev_users", "modules/physics/mechanics/symsystem", "modules/physics/optics/gaussopt", "modules/physics/optics/index", "modules/physics/optics/medium", "modules/physics/optics/polarization", "modules/physics/optics/utils", "modules/physics/optics/waves", "modules/physics/paulialgebra", "modules/physics/qho_1d", "modules/physics/quantum/anticommutator", "modules/physics/quantum/cartesian", "modules/physics/quantum/cg", "modules/physics/quantum/circuitplot", "modules/physics/quantum/commutator", "modules/physics/quantum/constants", "modules/physics/quantum/dagger", "modules/physics/quantum/gate", "modules/physics/quantum/grover", "modules/physics/quantum/hilbert", "modules/physics/quantum/index", "modules/physics/quantum/innerproduct", "modules/physics/quantum/operator", "modules/physics/quantum/operatorset", "modules/physics/quantum/piab", "modules/physics/quantum/qapply", "modules/physics/quantum/qft", "modules/physics/quantum/qubit", "modules/physics/quantum/represent", "modules/physics/quantum/shor", "modules/physics/quantum/spin", "modules/physics/quantum/state", "modules/physics/quantum/tensorproduct", "modules/physics/secondquant", "modules/physics/sho", "modules/physics/units/dimensions", "modules/physics/units/examples", "modules/physics/units/index", "modules/physics/units/philosophy", "modules/physics/units/prefixes", "modules/physics/units/quantities", "modules/physics/units/unitsystem", "modules/physics/vector/advanced", "modules/physics/vector/api/classes", "modules/physics/vector/api/fieldfunctions", "modules/physics/vector/api/functions", "modules/physics/vector/api/index", "modules/physics/vector/api/kinematics", "modules/physics/vector/api/printing", "modules/physics/vector/fields", "modules/physics/vector/index", "modules/physics/vector/kinematics", "modules/physics/vector/vectors", "modules/physics/wigner", "modules/plotting", "modules/polys/agca", "modules/polys/basics", "modules/polys/domainmatrix", "modules/polys/domainsintro", "modules/polys/domainsref", "modules/polys/index", "modules/polys/internals", "modules/polys/literature", "modules/polys/numberfields", "modules/polys/reference", "modules/polys/ringseries", "modules/polys/solvers", "modules/polys/wester", "modules/printing", "modules/rewriting", "modules/series/formal", "modules/series/fourier", "modules/series/index", "modules/series/limitseq", "modules/series/sequences", "modules/series/series", "modules/sets", "modules/simplify/fu", "modules/simplify/hyperexpand", "modules/simplify/index", "modules/simplify/simplify", "modules/solvers/diophantine", "modules/solvers/index", "modules/solvers/inequalities", "modules/solvers/ode", "modules/solvers/pde", "modules/solvers/solvers", "modules/solvers/solveset", "modules/stats", "modules/tensor/array", "modules/tensor/array_expressions", "modules/tensor/index", "modules/tensor/index_methods", "modules/tensor/indexed", "modules/tensor/tensor", "modules/tensor/toperators", "modules/testing/index", "modules/testing/pytest", "modules/testing/randtest", "modules/testing/runtests", "modules/utilities/autowrap", "modules/utilities/codegen", "modules/utilities/decorator", "modules/utilities/enumerative", "modules/utilities/exceptions", "modules/utilities/index", "modules/utilities/iterables", "modules/utilities/lambdify", "modules/utilities/memoization", "modules/utilities/misc", "modules/utilities/source", "modules/utilities/timeutils", "modules/vector/api/classes", "modules/vector/api/index", "modules/vector/api/orienterclasses", "modules/vector/api/vectorfunctions", "modules/vector/basics", "modules/vector/coordsys", "modules/vector/examples", "modules/vector/fields", "modules/vector/index", "modules/vector/intro", "modules/vector/vector_integration", "reference/index", "reference/public/basics/index", "reference/public/codegeneration/index", "reference/public/logic/index", "reference/public/matrices/index", "reference/public/numbertheory/index", "reference/public/physics/index", "reference/public/topics/index", "reference/public/utilities/index", "tutorials/index", "tutorials/intro-tutorial/basic_operations", "tutorials/intro-tutorial/calculus", "tutorials/intro-tutorial/features", "tutorials/intro-tutorial/gotchas", "tutorials/intro-tutorial/index", "tutorials/intro-tutorial/intro", "tutorials/intro-tutorial/manipulation", "tutorials/intro-tutorial/matrices", "tutorials/intro-tutorial/next", "tutorials/intro-tutorial/preliminaries", "tutorials/intro-tutorial/printing", "tutorials/intro-tutorial/simplification", "tutorials/intro-tutorial/solvers"], "filenames": ["citing.md", "contributing/debug.rst", "contributing/dependencies.md", "contributing/deprecations.md", "contributing/docstring.rst", "contributing/documentation-style-guide.rst", "contributing/index.md", "contributing/introduction-to-contributing.md", "contributing/new-contributors-guide/build-docs.rst", "contributing/new-contributors-guide/dev-setup.md", "contributing/new-contributors-guide/index.md", "contributing/new-contributors-guide/workflow-process.md", "contributing/new-contributors-guide/writing-tests.md", "explanation/active-deprecations.md", "explanation/glossary.md", "explanation/gotchas.rst", "explanation/index.rst", "explanation/solve_output.rst", "explanation/special_topics/classification.rst", "explanation/special_topics/finite_diff_derivatives.rst", "explanation/special_topics/index.rst", "guides/assumptions.rst", "guides/booleans.rst", "guides/custom-functions.md", "guides/index.rst", "guides/logo.rst", "guides/physics/control_problems.rst", "guides/physics/index.rst", "guides/solving/find-roots-polynomial.md", "guides/solving/index.md", "guides/solving/reduce-inequalities-algebraically.md", "guides/solving/solve-diophantine-equation.md", "guides/solving/solve-equation-algebraically.md", "guides/solving/solve-matrix-equation.md", "guides/solving/solve-numerically.md", "guides/solving/solve-ode.md", "guides/solving/solve-system-of-equations-algebraically.md", "guides/solving/solving-guidance.md", "index.rst", "install.md", "modules/abc.rst", "modules/algebras.rst", "modules/assumptions/ask.rst", "modules/assumptions/assume.rst", "modules/assumptions/index.rst", "modules/assumptions/predicates.rst", "modules/assumptions/refine.rst", "modules/calculus/index.rst", "modules/categories.rst", "modules/codegen.rst", "modules/combinatorics/fp_groups.rst", "modules/combinatorics/galois.rst", "modules/combinatorics/graycode.rst", "modules/combinatorics/group_constructs.rst", "modules/combinatorics/group_numbers.rst", "modules/combinatorics/index.rst", "modules/combinatorics/named_groups.rst", "modules/combinatorics/partitions.rst", "modules/combinatorics/pc_groups.rst", "modules/combinatorics/perm_groups.rst", "modules/combinatorics/permutations.rst", "modules/combinatorics/polyhedron.rst", "modules/combinatorics/prufer.rst", "modules/combinatorics/subsets.rst", "modules/combinatorics/tensor_can.rst", "modules/combinatorics/testutil.rst", "modules/combinatorics/util.rst", "modules/concrete.rst", "modules/core.rst", "modules/crypto.rst", "modules/diffgeom.rst", "modules/discrete.rst", "modules/evalf.rst", "modules/functions/combinatorial.rst", "modules/functions/elementary.rst", "modules/functions/index.rst", "modules/functions/special.rst", "modules/geometry/curves.rst", "modules/geometry/ellipses.rst", "modules/geometry/entities.rst", "modules/geometry/index.rst", "modules/geometry/lines.rst", "modules/geometry/plane.rst", "modules/geometry/points.rst", "modules/geometry/polygons.rst", "modules/geometry/utils.rst", "modules/holonomic/about.rst", "modules/holonomic/convert.rst", "modules/holonomic/index.rst", "modules/holonomic/internal.rst", "modules/holonomic/operations.rst", "modules/holonomic/represent.rst", "modules/holonomic/uses.rst", "modules/integrals/g-functions.rst", "modules/integrals/index.rst", "modules/integrals/integrals.rst", "modules/interactive.rst", "modules/liealgebras/index.rst", "modules/logic.rst", "modules/matrices/common.rst", "modules/matrices/dense.rst", "modules/matrices/expressions.rst", "modules/matrices/immutablematrices.rst", "modules/matrices/index.rst", "modules/matrices/matrices.rst", "modules/matrices/normalforms.rst", "modules/matrices/sparse.rst", "modules/matrices/sparsetools.rst", "modules/ntheory.rst", "modules/numeric-computation.rst", "modules/parsing.rst", "modules/physics/biomechanics/api/activation.rst", "modules/physics/biomechanics/api/curve.rst", "modules/physics/biomechanics/api/index.rst", "modules/physics/biomechanics/api/musculotendon.rst", "modules/physics/biomechanics/index.rst", "modules/physics/continuum_mechanics/beam.rst", "modules/physics/continuum_mechanics/beam_problems.rst", "modules/physics/continuum_mechanics/cable.rst", "modules/physics/continuum_mechanics/index.rst", "modules/physics/continuum_mechanics/truss.rst", "modules/physics/control/control.rst", "modules/physics/control/control_plots.rst", "modules/physics/control/index.rst", "modules/physics/control/lti.rst", "modules/physics/hep/index.rst", "modules/physics/hydrogen.rst", "modules/physics/matrices.rst", "modules/physics/mechanics/advanced.rst", "modules/physics/mechanics/api/actuator.rst", "modules/physics/mechanics/api/body.rst", "modules/physics/mechanics/api/expr_manip.rst", "modules/physics/mechanics/api/index.rst", "modules/physics/mechanics/api/joint.rst", "modules/physics/mechanics/api/kane_lagrange.rst", "modules/physics/mechanics/api/linearize.rst", "modules/physics/mechanics/api/part_bod.rst", "modules/physics/mechanics/api/pathway.rst", "modules/physics/mechanics/api/printing.rst", "modules/physics/mechanics/api/system.rst", "modules/physics/mechanics/api/wrapping_geometry.rst", "modules/physics/mechanics/autolev_parser.rst", "modules/physics/mechanics/examples.rst", "modules/physics/mechanics/examples/bicycle_example.rst", "modules/physics/mechanics/examples/four_bar_linkage_example.rst", "modules/physics/mechanics/examples/lin_pend_nonmin_example.rst", "modules/physics/mechanics/examples/multi_degree_freedom_holonomic_system.rst", "modules/physics/mechanics/examples/rollingdisc_example.rst", "modules/physics/mechanics/examples/rollingdisc_example_kane.rst", "modules/physics/mechanics/examples/rollingdisc_example_kane_constraints.rst", "modules/physics/mechanics/examples/rollingdisc_example_lagrange.rst", "modules/physics/mechanics/index.rst", "modules/physics/mechanics/joints.rst", "modules/physics/mechanics/kane.rst", "modules/physics/mechanics/lagrange.rst", "modules/physics/mechanics/linearize.rst", "modules/physics/mechanics/masses.rst", "modules/physics/mechanics/reference.rst", "modules/physics/mechanics/sympy_mechanics_for_autolev_users.rst", "modules/physics/mechanics/symsystem.rst", "modules/physics/optics/gaussopt.rst", "modules/physics/optics/index.rst", "modules/physics/optics/medium.rst", "modules/physics/optics/polarization.rst", "modules/physics/optics/utils.rst", "modules/physics/optics/waves.rst", "modules/physics/paulialgebra.rst", "modules/physics/qho_1d.rst", "modules/physics/quantum/anticommutator.rst", "modules/physics/quantum/cartesian.rst", "modules/physics/quantum/cg.rst", "modules/physics/quantum/circuitplot.rst", "modules/physics/quantum/commutator.rst", "modules/physics/quantum/constants.rst", "modules/physics/quantum/dagger.rst", "modules/physics/quantum/gate.rst", "modules/physics/quantum/grover.rst", "modules/physics/quantum/hilbert.rst", "modules/physics/quantum/index.rst", "modules/physics/quantum/innerproduct.rst", "modules/physics/quantum/operator.rst", "modules/physics/quantum/operatorset.rst", "modules/physics/quantum/piab.rst", "modules/physics/quantum/qapply.rst", "modules/physics/quantum/qft.rst", "modules/physics/quantum/qubit.rst", "modules/physics/quantum/represent.rst", "modules/physics/quantum/shor.rst", "modules/physics/quantum/spin.rst", "modules/physics/quantum/state.rst", "modules/physics/quantum/tensorproduct.rst", "modules/physics/secondquant.rst", "modules/physics/sho.rst", "modules/physics/units/dimensions.rst", "modules/physics/units/examples.rst", "modules/physics/units/index.rst", "modules/physics/units/philosophy.rst", "modules/physics/units/prefixes.rst", "modules/physics/units/quantities.rst", "modules/physics/units/unitsystem.rst", "modules/physics/vector/advanced.rst", "modules/physics/vector/api/classes.rst", "modules/physics/vector/api/fieldfunctions.rst", "modules/physics/vector/api/functions.rst", "modules/physics/vector/api/index.rst", "modules/physics/vector/api/kinematics.rst", "modules/physics/vector/api/printing.rst", "modules/physics/vector/fields.rst", "modules/physics/vector/index.rst", "modules/physics/vector/kinematics.rst", "modules/physics/vector/vectors.rst", "modules/physics/wigner.rst", "modules/plotting.rst", "modules/polys/agca.rst", "modules/polys/basics.rst", "modules/polys/domainmatrix.rst", "modules/polys/domainsintro.rst", "modules/polys/domainsref.rst", "modules/polys/index.rst", "modules/polys/internals.rst", "modules/polys/literature.rst", "modules/polys/numberfields.rst", "modules/polys/reference.rst", "modules/polys/ringseries.rst", "modules/polys/solvers.rst", "modules/polys/wester.rst", "modules/printing.rst", "modules/rewriting.rst", "modules/series/formal.rst", "modules/series/fourier.rst", "modules/series/index.rst", "modules/series/limitseq.rst", "modules/series/sequences.rst", "modules/series/series.rst", "modules/sets.rst", "modules/simplify/fu.rst", "modules/simplify/hyperexpand.rst", "modules/simplify/index.rst", "modules/simplify/simplify.rst", "modules/solvers/diophantine.rst", "modules/solvers/index.rst", "modules/solvers/inequalities.rst", "modules/solvers/ode.rst", "modules/solvers/pde.rst", "modules/solvers/solvers.rst", "modules/solvers/solveset.rst", "modules/stats.rst", "modules/tensor/array.rst", "modules/tensor/array_expressions.rst", "modules/tensor/index.rst", "modules/tensor/index_methods.rst", "modules/tensor/indexed.rst", "modules/tensor/tensor.rst", "modules/tensor/toperators.rst", "modules/testing/index.rst", "modules/testing/pytest.rst", "modules/testing/randtest.rst", "modules/testing/runtests.rst", "modules/utilities/autowrap.rst", "modules/utilities/codegen.rst", "modules/utilities/decorator.rst", "modules/utilities/enumerative.rst", "modules/utilities/exceptions.rst", "modules/utilities/index.rst", "modules/utilities/iterables.rst", "modules/utilities/lambdify.rst", "modules/utilities/memoization.rst", "modules/utilities/misc.rst", "modules/utilities/source.rst", "modules/utilities/timeutils.rst", "modules/vector/api/classes.rst", "modules/vector/api/index.rst", "modules/vector/api/orienterclasses.rst", "modules/vector/api/vectorfunctions.rst", "modules/vector/basics.rst", "modules/vector/coordsys.rst", "modules/vector/examples.rst", "modules/vector/fields.rst", "modules/vector/index.rst", "modules/vector/intro.rst", "modules/vector/vector_integration.rst", "reference/index.rst", "reference/public/basics/index.rst", "reference/public/codegeneration/index.rst", "reference/public/logic/index.rst", "reference/public/matrices/index.rst", "reference/public/numbertheory/index.rst", "reference/public/physics/index.rst", "reference/public/topics/index.rst", "reference/public/utilities/index.rst", "tutorials/index.rst", "tutorials/intro-tutorial/basic_operations.rst", "tutorials/intro-tutorial/calculus.rst", "tutorials/intro-tutorial/features.rst", "tutorials/intro-tutorial/gotchas.rst", "tutorials/intro-tutorial/index.rst", "tutorials/intro-tutorial/intro.rst", "tutorials/intro-tutorial/manipulation.rst", "tutorials/intro-tutorial/matrices.rst", "tutorials/intro-tutorial/next.rst", "tutorials/intro-tutorial/preliminaries.rst", "tutorials/intro-tutorial/printing.rst", "tutorials/intro-tutorial/simplification.rst", "tutorials/intro-tutorial/solvers.rst"], "titles": ["Citing SymPy", "Debugging", "Dependencies", "Deprecation Policy", "SymPy Docstrings Style Guide", "Docstring Style Guide", "Contributing", "Introduction to Contributing", "Building the Documentation", "Setup Development Environment", "Guide for New Contributors", "Development Workflow Process", "Writing Tests", "List of active deprecations", "Glossary", "Gotchas and Pitfalls", "Explanations", "Solve Output by Type", "Classification of SymPy objects", "Finite Difference Approximations to Derivatives", "SymPy Special Topics", "Assumptions", "Symbolic and fuzzy booleans", "Writing Custom Functions", "How-to Guides", "SymPy Logo", "Control Package Examples", "Physics", "Find the Roots of a Polynomial Algebraically or Numerically", "Solve Equations", "Reduce One or a System of Inequalities for a Single Variable Algebraically", "Solve a Diophantine Equation Algebraically", "Solve an Equation Algebraically", "Solve a Matrix Equation Algebraically", "Solve One or a System of Equations Numerically", "Solve an Ordinary Differential Equation (ODE) Algebraically", "Solve a System of Equations Algebraically", "Solving Guidance", "Welcome to SymPy\u2019s documentation!", "Installation", "abc", "Algebras", "Ask", "Assume", "Assumptions", "Predicates", "Refine", "Calculus", "Category Theory", "Code Generation", "Finitely Presented Groups", "Galois Groups", "Gray Code", "Group constructors", "Nilpotent, Abelian and Cyclic Numbers", "Combinatorics", "Named Groups", "Partitions", "Polycyclic Groups", "Permutation Groups", "Permutations", "Polyhedron", "Prufer Sequences", "Subsets", "Tensor Canonicalization", "Test Utilities", "Utilities", "Concrete", "Core", "Cryptography", "Differential Geometry", "Discrete", "Numerical Evaluation", "Combinatorial", "Elementary", "Functions", "Special", "Curves", "Ellipses", "Entities", "Geometry", "Lines", "Plane", "Points", "Polygons", "Utils", "About Holonomic Functions", "Converting other representations to holonomic", "Holonomic", "Internal API", "Operations on holonomic functions", "Representation of holonomic functions in SymPy", "Uses and Current limitations", "Computing Integrals using Meijer G-Functions", "Integrals", "Integrals", "Interactive", "Lie Algebra", "Logic", "Common Matrices", "Dense Matrices", "Matrix Expressions", "Immutable Matrices", "Matrices", "Matrices (linear algebra)", "Matrix Normal Forms", "Sparse Matrices", "Sparse Tools", "Number Theory", "Numeric Computation", "Parsing", "Activation (Docstrings)", "Curve (Docstrings)", "Biomechanics API Reference", "Musculotendon (Docstrings)", "Biomechanics", "Beam (Docstrings)", "Solving Beam Bending Problems using Singularity Functions", "Cable (Docstrings)", "Continuum Mechanics", "Truss (Docstrings)", "Control", "Control System Plots", "Control Module", "Control API", "High energy physics", "Hydrogen Wavefunctions", "Matrices", "Potential Issues/Advanced Topics/Future Features in Physics/Mechanics", "Actuator (Docstrings)", "Body (Docstrings)", "Expression Manipulation (Docstrings)", "Mechanics API Reference", "Joints Framework (Docstrings)", "Kane\u2019s Method &amp; Lagrange\u2019s Method (Docstrings)", "Linearization (Docstrings)", "Bodies, Inertias, Loads &amp; Other Functions (Docstrings)", "Pathway (Docstrings)", "Printing (Docstrings)", "SymbolicSystem (Docstrings)", "Wrapping Geometry (Docstrings)", "Autolev Parser", "Examples for Physics/Mechanics", "A bicycle", "A four bar linkage", "Nonminimal Coordinates Pendulum", "Multi Degree of Freedom Holonomic System", "A rolling disc", "A rolling disc, with Kane\u2019s method", "A rolling disc, with Kane\u2019s method and constraint forces", "A rolling disc using Lagrange\u2019s Method", "Classical Mechanics", "Joints Framework in Physics/Mechanics", "Kane\u2019s Method in Physics/Mechanics", "Lagrange\u2019s Method in Physics/Mechanics", "Linearization in Physics/Mechanics", "Masses, Inertias, Particles and Rigid Bodies in Physics/Mechanics", "References for Physics/Mechanics", "SymPy Mechanics for Autolev Users", "Symbolic Systems in Physics/Mechanics", "Gaussian Optics", "Optics Module", "Medium", "Polarization", "Utilities", "Waves", "Pauli Algebra", "Quantum Harmonic Oscillator in 1-D", "Anticommutator", "Cartesian Operators and States", "Clebsch-Gordan Coefficients", "Circuit Plot", "Commutator", "Constants", "Dagger", "Gates", "Grover\u2019s Algorithm", "Hilbert Space", "Quantum Mechanics", "Inner Product", "Operator", "Operator/State Helper Functions", "Particle in a Box", "Qapply", "QFT", "Qubit", "Represent", "Shor\u2019s Algorithm", "Spin", "State", "Tensor Product", "Second Quantization", "Quantum Harmonic Oscillator in 3-D", "Dimensions and dimension systems", "More examples", "Unit systems", "Philosophy behind unit systems", "Unit prefixes", "Physical quantities", "Units and unit systems", "Potential Issues/Advanced Topics/Future Features in Physics/Vector Module", "Essential Classes", "Docstrings for basic field functions", "Essential Functions (Docstrings)", "Physics Vector API", "Kinematics (Docstrings)", "Printing (Docstrings)", "Scalar and Vector Field Functionality", "The Physics Vector Module", "Vector: Kinematics", "Vector &amp; ReferenceFrame", "Wigner Symbols", "Plotting", "AGCA - Algebraic Geometry and Commutative Algebra Module", "Basic functionality of the module", "Introducing the domainmatrix of the poly module", "Introducing the Domains of the poly module", "Reference docs for the Poly Domains", "Polynomial Manipulation", "Internals of the Polynomial Manipulation Module", "Literature", "Number Fields", "Polynomials Manipulation Module Reference", "Series Manipulation using Polynomials", "Poly solvers", "Examples from Wester\u2019s Article", "Printing", "Term Rewriting", "Formal Power Series", "Fourier Series", "Series", "Limits of Sequences", "Sequences", "Series Expansions", "Sets", "Hongguang Fu\u2019s Trigonometric Simplification", "Hypergeometric Expansion", "Simplify", "Simplify", "Diophantine", "Solvers", "Inequality Solvers", "ODE", "PDE", "Solvers", "Solveset", "Stats", "N-dim array", "N-dim array expressions", "Tensor", "Methods", "Indexed Objects", "Tensor", "Tensor Operators", "Testing", "pytest", "Randomised Testing", "Run Tests", "Autowrap Module", "Codegen", "Decorator", "Enumerative", "Exceptions and Warnings", "Utilities", "Iterables", "Lambdify", "Memoization", "Miscellaneous", "Source Code Inspection", "Timing Utilities", "Essential Classes in sympy.vector (docstrings)", "Vector API", "Orienter classes (docstrings)", "Essential Functions in sympy.vector (docstrings)", "Basic Implementation details", "More about Coordinate Systems", "General examples of usage", "Scalar and Vector Field Functionality", "Vector", "Introduction", "Applications of Vector Integrals", "API Reference", "Basics", "Code Generation", "Logic", "Matrices", "Number Theory", "Physics", "Topics", "Utilities", "Tutorials", "Basic Operations", "Calculus", "SymPy Features", "Gotchas", "Introductory Tutorial", "Introduction", "Advanced Expression Manipulation", "Matrices", "What\u2019s Next", "Preliminaries", "Printing", "Simplification", "Solvers"], "terms": {"To": [0, 1, 2, 3, 4, 5, 8, 9, 11, 12, 13, 14, 15, 19, 22, 23, 26, 30, 31, 32, 34, 35, 36, 37, 39, 40, 43, 44, 47, 48, 49, 50, 58, 59, 60, 64, 67, 68, 69, 70, 72, 73, 74, 75, 76, 81, 91, 93, 95, 97, 98, 99, 101, 104, 108, 110, 112, 114, 116, 117, 122, 124, 125, 127, 129, 130, 133, 134, 137, 139, 140, 154, 155, 156, 158, 168, 172, 185, 194, 196, 207, 210, 212, 214, 215, 216, 217, 219, 221, 222, 223, 225, 226, 233, 234, 236, 239, 242, 243, 244, 245, 246, 247, 250, 251, 255, 257, 258, 261, 262, 264, 265, 270, 272, 274, 275, 277, 279, 280, 291, 292, 294, 295, 297, 298, 301, 302, 303], "public": [0, 4, 11, 12, 49, 68, 69, 90, 111, 112, 114, 216, 217, 219, 220, 224, 239, 242, 246, 260, 270], "us": [0, 1, 3, 4, 8, 9, 10, 11, 12, 14, 15, 17, 18, 20, 21, 22, 23, 25, 26, 27, 29, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 107, 108, 110, 111, 112, 114, 115, 116, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 158, 159, 160, 163, 164, 166, 168, 170, 171, 172, 175, 177, 179, 180, 181, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 200, 201, 202, 203, 205, 206, 207, 209, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 238, 239, 241, 242, 243, 244, 246, 247, 248, 250, 251, 252, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 270, 273, 274, 276, 277, 279, 280, 282, 287, 288, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303], "meurer": 0, "A": [0, 2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 23, 26, 28, 30, 32, 33, 34, 35, 36, 37, 38, 41, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 90, 91, 93, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 107, 108, 110, 111, 112, 114, 116, 117, 118, 120, 122, 124, 128, 129, 130, 131, 133, 134, 135, 136, 137, 139, 140, 141, 142, 145, 146, 151, 152, 153, 156, 157, 158, 159, 160, 163, 165, 168, 170, 171, 172, 174, 175, 176, 177, 179, 180, 181, 183, 185, 186, 187, 188, 189, 190, 191, 193, 195, 196, 197, 199, 200, 201, 203, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 238, 239, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 257, 258, 259, 260, 261, 262, 264, 265, 270, 272, 274, 275, 276, 277, 279, 280, 287, 293, 295, 297, 298, 302], "smith": [0, 13, 105, 215], "cp": [0, 60, 109, 214, 215], "paprocki": 0, "m": [0, 8, 9, 11, 12, 13, 15, 19, 21, 23, 26, 39, 41, 45, 49, 50, 56, 57, 59, 60, 64, 67, 68, 69, 70, 71, 73, 76, 78, 80, 84, 85, 93, 95, 97, 99, 100, 101, 102, 104, 105, 107, 108, 110, 111, 112, 114, 116, 117, 120, 124, 126, 127, 130, 133, 134, 135, 136, 139, 141, 145, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 162, 167, 174, 188, 189, 192, 194, 196, 207, 211, 213, 214, 215, 217, 219, 220, 221, 222, 223, 226, 227, 228, 229, 231, 232, 233, 234, 236, 238, 239, 242, 244, 245, 246, 247, 248, 251, 252, 258, 259, 261, 264, 266, 270, 273, 275, 279, 280, 292, 298, 301, 302, 303], "\u010dert\u00edk": 0, "o": [0, 4, 8, 11, 12, 14, 15, 19, 21, 40, 48, 49, 59, 60, 66, 68, 69, 74, 76, 78, 79, 81, 82, 84, 90, 93, 108, 114, 117, 129, 130, 134, 136, 137, 139, 141, 153, 154, 155, 156, 158, 159, 181, 191, 202, 205, 207, 209, 211, 219, 220, 222, 223, 226, 228, 233, 236, 242, 246, 251, 257, 264, 267, 273, 276, 292], "kirpichev": 0, "sb": 0, "rocklin": 0, "kumar": [0, 245], "ivanov": 0, "": [0, 2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 60, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 76, 77, 78, 80, 81, 82, 84, 85, 86, 87, 90, 91, 93, 95, 96, 97, 98, 99, 101, 102, 104, 107, 108, 109, 110, 112, 114, 116, 117, 118, 120, 122, 124, 126, 128, 129, 130, 132, 133, 135, 136, 137, 139, 140, 141, 143, 147, 151, 152, 156, 158, 162, 163, 164, 170, 171, 173, 175, 177, 178, 181, 185, 186, 188, 189, 191, 194, 195, 196, 200, 201, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 232, 233, 234, 236, 237, 238, 239, 241, 242, 243, 246, 252, 257, 258, 259, 260, 261, 262, 264, 265, 267, 270, 272, 276, 277, 279, 282, 287, 288, 290, 291, 292, 294, 295, 296, 297, 298, 302, 303], "moor": [0, 33, 101, 104], "jk": 0, "singh": 0, "rathnayak": 0, "t": [0, 3, 4, 5, 7, 8, 11, 12, 13, 14, 15, 22, 23, 26, 28, 35, 41, 44, 45, 47, 49, 50, 52, 59, 60, 61, 62, 64, 68, 69, 70, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 92, 93, 95, 97, 98, 99, 100, 101, 104, 108, 109, 110, 111, 112, 114, 120, 124, 125, 128, 129, 130, 131, 133, 134, 135, 136, 137, 139, 140, 141, 144, 145, 146, 153, 154, 155, 156, 158, 159, 163, 165, 171, 175, 187, 189, 191, 193, 194, 196, 200, 201, 203, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 225, 226, 229, 233, 234, 235, 236, 238, 239, 242, 243, 244, 245, 246, 247, 248, 252, 255, 257, 260, 264, 265, 270, 273, 275, 279, 291, 292, 296, 297, 298, 301, 302, 303], "vig": 0, "granger": [0, 177], "BE": [0, 12], "muller": 0, "rp": [0, 84, 163], "bonazzi": 0, "f": [0, 4, 8, 11, 12, 13, 14, 15, 19, 23, 26, 28, 31, 32, 34, 35, 47, 48, 49, 50, 51, 58, 59, 60, 64, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 86, 91, 92, 93, 95, 97, 99, 101, 104, 108, 109, 110, 111, 112, 114, 117, 120, 122, 129, 133, 134, 135, 137, 139, 146, 151, 153, 154, 158, 160, 164, 165, 176, 177, 180, 189, 191, 194, 201, 206, 207, 210, 211, 212, 213, 214, 216, 217, 219, 220, 221, 222, 223, 225, 226, 228, 229, 232, 233, 234, 235, 236, 238, 239, 242, 243, 244, 245, 246, 247, 251, 252, 257, 258, 259, 260, 261, 264, 265, 267, 276, 277, 280, 291, 292, 297, 301, 302, 303], "gupta": [0, 245], "h": [0, 15, 19, 47, 48, 49, 50, 51, 52, 59, 64, 67, 68, 69, 73, 76, 90, 93, 95, 99, 100, 104, 105, 110, 124, 133, 136, 156, 160, 163, 175, 177, 180, 185, 189, 196, 211, 212, 213, 214, 215, 217, 219, 220, 221, 222, 225, 226, 234, 238, 242, 244, 245, 246, 247, 252, 259, 280, 292, 301], "vat": 0, "johansson": 0, "pedregosa": 0, "curri": [0, 177], "mj": 0, "terrel": 0, "ar": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 26, 28, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 104, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 120, 121, 122, 124, 125, 128, 129, 130, 131, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 163, 164, 165, 166, 168, 170, 172, 175, 177, 179, 180, 181, 183, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 205, 206, 207, 209, 211, 212, 213, 214, 215, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 238, 239, 241, 242, 243, 244, 246, 247, 248, 250, 251, 252, 253, 255, 257, 258, 259, 261, 262, 263, 264, 265, 267, 270, 272, 273, 274, 275, 276, 277, 279, 281, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303], "rou\u010dka": 0, "\u0161": 0, "saboo": 0, "fernando": 0, "i": [0, 1, 2, 4, 5, 7, 8, 9, 10, 11, 13, 14, 17, 18, 19, 20, 21, 22, 23, 25, 26, 28, 29, 30, 31, 32, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 107, 108, 110, 111, 112, 114, 115, 116, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 171, 172, 174, 175, 177, 179, 180, 181, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 231, 232, 233, 234, 235, 236, 238, 239, 241, 242, 243, 244, 246, 247, 248, 250, 251, 252, 253, 255, 257, 258, 259, 260, 261, 262, 264, 265, 267, 269, 270, 272, 273, 274, 275, 276, 277, 279, 280, 291, 292, 294, 295, 297, 298, 300, 301, 302, 303], "kulal": 0, "cimrman": 0, "r": [0, 4, 5, 8, 9, 12, 13, 15, 19, 21, 23, 28, 41, 48, 49, 50, 52, 59, 60, 68, 69, 70, 72, 73, 74, 81, 82, 84, 86, 90, 91, 93, 95, 104, 108, 110, 111, 114, 117, 120, 124, 126, 130, 133, 134, 135, 136, 137, 139, 140, 141, 143, 145, 148, 149, 150, 155, 156, 157, 158, 159, 160, 163, 187, 188, 191, 192, 194, 201, 202, 205, 207, 209, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 226, 227, 228, 233, 234, 236, 238, 239, 242, 244, 245, 246, 252, 257, 259, 261, 270, 273, 275, 276, 277, 280, 302], "scopatz": 0, "2017": [0, 7, 211], "symbol": [0, 2, 4, 5, 7, 11, 12, 13, 14, 17, 19, 24, 26, 27, 28, 29, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 58, 60, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 90, 91, 92, 93, 95, 96, 98, 99, 101, 104, 108, 109, 110, 111, 112, 114, 116, 117, 118, 120, 121, 122, 124, 126, 128, 129, 130, 131, 133, 134, 135, 136, 137, 139, 140, 141, 143, 144, 145, 146, 148, 149, 150, 151, 156, 158, 160, 163, 164, 165, 166, 168, 170, 171, 173, 175, 177, 179, 180, 183, 186, 188, 189, 190, 191, 192, 193, 194, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 209, 210, 212, 213, 214, 215, 217, 218, 219, 220, 221, 223, 224, 226, 227, 228, 229, 231, 232, 233, 234, 236, 238, 239, 241, 242, 243, 244, 246, 247, 249, 250, 251, 252, 253, 258, 264, 265, 270, 272, 273, 275, 276, 277, 280, 287, 291, 292, 295, 297, 298, 301, 302, 303], "comput": [0, 2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 19, 21, 22, 23, 26, 28, 29, 32, 33, 34, 39, 41, 47, 49, 50, 51, 52, 57, 59, 60, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 81, 83, 87, 90, 91, 92, 94, 95, 97, 99, 101, 104, 105, 107, 108, 110, 116, 117, 122, 124, 128, 133, 134, 135, 139, 141, 143, 144, 148, 151, 158, 175, 176, 177, 185, 190, 191, 193, 195, 196, 200, 201, 202, 207, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 228, 229, 231, 233, 234, 235, 236, 238, 239, 242, 244, 245, 246, 248, 258, 261, 264, 265, 270, 272, 273, 274, 275, 276, 277, 279, 282, 291, 292, 294, 295, 298, 302], "python": [0, 1, 2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 18, 21, 22, 23, 27, 28, 29, 32, 33, 35, 37, 38, 39, 42, 43, 44, 47, 60, 68, 69, 72, 74, 80, 96, 98, 99, 101, 104, 108, 109, 110, 116, 128, 141, 158, 201, 212, 213, 214, 215, 216, 217, 223, 225, 226, 234, 238, 242, 245, 247, 257, 258, 259, 260, 261, 264, 265, 270, 294, 295, 296, 297, 298, 300, 301, 302], "peerj": [0, 7], "scienc": [0, 60, 93, 104, 157, 158, 213, 220, 235, 236, 292], "3": [0, 3, 5, 7, 11, 12, 13, 15, 17, 19, 21, 22, 23, 28, 30, 31, 32, 33, 34, 35, 37, 39, 41, 42, 44, 45, 46, 47, 49, 50, 52, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 112, 114, 116, 118, 120, 122, 124, 125, 126, 127, 130, 131, 133, 136, 139, 143, 144, 145, 146, 148, 149, 150, 151, 152, 154, 155, 156, 158, 159, 160, 162, 164, 168, 170, 171, 172, 176, 180, 185, 186, 188, 190, 191, 194, 195, 197, 198, 201, 202, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 257, 258, 260, 261, 262, 264, 265, 267, 270, 272, 273, 274, 275, 277, 279, 280, 287, 291, 292, 294, 296, 297, 298, 301, 302, 303], "e103": 0, "http": [0, 2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 21, 23, 39, 41, 43, 44, 45, 47, 48, 49, 51, 52, 56, 57, 59, 60, 61, 62, 67, 68, 69, 70, 71, 72, 73, 74, 76, 78, 80, 84, 85, 86, 90, 93, 95, 96, 97, 98, 99, 101, 104, 108, 116, 122, 124, 126, 127, 160, 162, 163, 164, 166, 167, 168, 172, 173, 174, 177, 179, 180, 189, 191, 201, 203, 206, 208, 211, 215, 217, 220, 222, 225, 226, 229, 231, 233, 234, 235, 238, 239, 242, 245, 246, 258, 259, 260, 262, 264, 265, 267, 270, 272, 276, 278, 280, 298, 301], "doi": [0, 4, 41, 47, 60, 67, 104, 108, 135, 215, 217, 220, 235, 238, 246, 264], "org": [0, 2, 4, 5, 11, 12, 15, 21, 23, 41, 43, 44, 45, 47, 48, 49, 51, 52, 56, 57, 59, 60, 67, 68, 69, 70, 71, 73, 74, 76, 78, 80, 84, 85, 86, 95, 96, 97, 98, 99, 101, 104, 108, 122, 124, 126, 127, 160, 162, 163, 164, 166, 167, 168, 172, 173, 174, 177, 179, 180, 189, 191, 201, 203, 206, 208, 215, 217, 220, 222, 226, 229, 233, 234, 235, 238, 239, 242, 245, 246, 258, 259, 260, 262, 264, 270, 272, 276, 278, 280, 298, 301], "10": [0, 2, 4, 12, 15, 23, 26, 28, 34, 35, 37, 39, 41, 47, 49, 57, 59, 60, 64, 66, 67, 68, 69, 71, 72, 73, 74, 76, 81, 82, 84, 85, 93, 95, 96, 98, 99, 101, 104, 105, 108, 109, 110, 111, 112, 114, 116, 118, 120, 122, 124, 125, 131, 135, 136, 141, 143, 158, 160, 164, 175, 185, 186, 197, 201, 202, 203, 205, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 225, 226, 229, 232, 233, 234, 235, 238, 239, 242, 245, 246, 247, 256, 257, 262, 264, 265, 267, 270, 273, 291, 298, 302], "7717": 0, "c": [0, 2, 7, 8, 9, 12, 14, 15, 19, 21, 23, 26, 28, 29, 31, 33, 40, 41, 47, 48, 52, 53, 57, 59, 60, 61, 63, 64, 65, 67, 68, 69, 71, 73, 74, 76, 77, 78, 80, 81, 82, 84, 85, 91, 93, 95, 97, 98, 99, 101, 104, 108, 109, 110, 116, 117, 118, 120, 124, 126, 128, 129, 131, 133, 134, 136, 141, 146, 148, 149, 150, 152, 154, 155, 158, 160, 164, 170, 171, 172, 175, 177, 180, 185, 188, 190, 191, 196, 200, 201, 205, 209, 210, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 225, 233, 234, 235, 236, 238, 239, 242, 243, 244, 245, 246, 247, 251, 252, 258, 259, 261, 264, 267, 270, 272, 273, 274, 275, 276, 277, 280, 292, 294, 301, 302, 303], "103": [0, 7, 59], "bibtex": 0, "entri": [0, 11, 33, 45, 50, 58, 60, 66, 69, 80, 93, 97, 99, 100, 101, 107, 111, 134, 136, 141, 143, 156, 163, 215, 219, 221, 222, 236, 246, 265], "latex": [0, 2, 4, 8, 12, 14, 23, 37, 39, 76, 96, 200, 201, 206, 210, 212, 217, 226, 296, 297], "user": [0, 2, 3, 4, 5, 8, 9, 11, 12, 13, 14, 18, 20, 21, 23, 48, 49, 50, 59, 60, 67, 68, 69, 70, 76, 80, 93, 97, 101, 104, 110, 111, 115, 116, 117, 120, 122, 124, 128, 129, 137, 140, 141, 151, 154, 156, 159, 179, 180, 189, 195, 196, 201, 205, 209, 213, 216, 219, 221, 223, 224, 225, 226, 227, 235, 238, 244, 245, 246, 255, 258, 259, 261, 262, 265, 270, 274, 275, 280, 287, 291, 294, 295, 297, 298, 299], "articl": [0, 7, 9, 11, 68, 69, 101, 104, 218, 220, 221, 226, 235, 270, 288, 296], "titl": [0, 4, 5, 35, 212], "author": [0, 4, 7, 108, 177, 221], "aaron": 0, "christoph": [0, 270], "p": [0, 8, 12, 13, 14, 15, 19, 21, 22, 23, 26, 28, 29, 31, 41, 43, 44, 45, 49, 50, 51, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 68, 69, 70, 71, 73, 74, 76, 78, 81, 82, 83, 84, 85, 90, 91, 93, 95, 99, 101, 104, 108, 110, 111, 114, 116, 117, 118, 120, 124, 125, 129, 130, 133, 134, 135, 136, 137, 139, 141, 145, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 170, 189, 191, 196, 202, 205, 207, 209, 211, 212, 214, 215, 216, 219, 220, 222, 223, 226, 228, 229, 233, 234, 236, 238, 239, 242, 244, 245, 246, 247, 251, 252, 264, 270, 273, 274, 275, 276, 277, 279, 298, 302], "mateusz": 0, "v": [0, 8, 9, 17, 26, 28, 32, 37, 41, 49, 58, 64, 67, 68, 69, 70, 71, 72, 76, 82, 93, 95, 97, 99, 104, 108, 111, 112, 114, 117, 129, 130, 131, 133, 136, 140, 143, 155, 156, 158, 159, 163, 164, 176, 191, 196, 200, 201, 203, 205, 207, 209, 210, 212, 219, 220, 221, 222, 226, 236, 238, 239, 242, 244, 246, 257, 264, 270, 273, 274, 275, 276, 277, 279], "ert": 0, "k": [0, 5, 12, 13, 15, 17, 21, 23, 26, 31, 41, 47, 48, 49, 50, 52, 54, 58, 59, 62, 63, 66, 67, 68, 69, 71, 72, 73, 74, 76, 86, 93, 95, 98, 99, 101, 104, 108, 110, 124, 129, 133, 134, 139, 146, 153, 155, 158, 165, 179, 180, 183, 187, 189, 191, 200, 207, 211, 213, 215, 216, 219, 220, 221, 222, 223, 226, 228, 229, 231, 232, 233, 234, 235, 236, 238, 239, 242, 244, 246, 247, 248, 250, 251, 252, 253, 257, 261, 264, 270, 272, 273, 274, 275, 276, 277, 279, 280, 301, 302], "ond": 0, "ej": 0, "sergei": 0, "b": [0, 11, 12, 14, 15, 17, 21, 22, 23, 26, 28, 29, 31, 33, 41, 48, 49, 50, 52, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 78, 79, 80, 81, 82, 83, 84, 91, 93, 95, 97, 98, 99, 100, 101, 104, 108, 110, 111, 112, 114, 116, 117, 118, 120, 122, 124, 130, 131, 133, 134, 135, 136, 137, 139, 141, 145, 146, 155, 156, 158, 160, 163, 168, 170, 172, 174, 179, 180, 183, 188, 189, 190, 191, 200, 201, 203, 205, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 226, 228, 229, 231, 232, 233, 234, 235, 236, 238, 239, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 257, 260, 261, 264, 267, 270, 272, 273, 274, 275, 276, 292, 294, 298, 302, 303], "matthew": 0, "amit": [0, 245], "sergiu": 0, "jason": [0, 226], "sartaj": 0, "thilina": 0, "sean": 0, "brian": [0, 177], "e": [0, 2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 21, 22, 23, 26, 29, 33, 34, 37, 39, 40, 41, 45, 47, 48, 49, 50, 57, 58, 59, 60, 61, 64, 66, 67, 68, 69, 70, 72, 73, 74, 76, 78, 80, 81, 82, 83, 84, 85, 90, 91, 93, 95, 97, 98, 99, 104, 108, 110, 111, 114, 115, 116, 117, 120, 124, 125, 129, 130, 133, 134, 136, 137, 139, 140, 141, 154, 155, 158, 159, 160, 163, 170, 171, 175, 180, 181, 183, 186, 188, 190, 191, 196, 197, 201, 206, 207, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 232, 233, 234, 235, 236, 238, 239, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 270, 274, 277, 279, 280, 291, 292, 296, 297, 302], "richard": [0, 108], "francesco": 0, "harsh": [0, 245], "shivam": 0, "fredrik": 0, "fabian": 0, "j": [0, 5, 12, 15, 26, 41, 45, 47, 49, 50, 54, 58, 59, 60, 64, 66, 67, 69, 70, 72, 73, 76, 90, 93, 95, 97, 99, 101, 104, 108, 111, 112, 114, 122, 125, 133, 139, 157, 158, 163, 170, 171, 188, 191, 196, 200, 207, 211, 213, 215, 217, 219, 220, 221, 222, 223, 225, 226, 228, 234, 236, 238, 239, 242, 244, 245, 246, 247, 248, 250, 251, 252, 253, 258, 264, 270, 272, 273, 274, 275, 276, 277, 279, 280], "andi": [0, 157], "rou": 0, "ka": 0, "n": [0, 4, 5, 9, 12, 14, 15, 19, 21, 23, 28, 31, 32, 40, 45, 47, 49, 50, 51, 52, 54, 56, 57, 58, 59, 60, 62, 64, 66, 67, 68, 69, 70, 72, 73, 74, 76, 78, 81, 82, 83, 84, 85, 90, 91, 93, 95, 97, 98, 99, 101, 104, 105, 108, 110, 114, 116, 117, 120, 122, 124, 126, 127, 129, 130, 133, 134, 136, 137, 139, 140, 141, 143, 144, 145, 146, 148, 149, 150, 153, 154, 155, 156, 158, 159, 160, 162, 164, 165, 167, 171, 176, 177, 180, 185, 187, 188, 189, 191, 192, 194, 196, 198, 200, 201, 203, 205, 206, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 225, 226, 228, 229, 231, 232, 233, 234, 235, 236, 238, 239, 242, 244, 245, 246, 249, 251, 252, 255, 258, 264, 266, 267, 270, 272, 273, 274, 275, 279, 285, 292, 298, 301, 302, 303], "ashutosh": 0, "isuru": 0, "sumith": 0, "robert": [0, 108, 215, 246], "anthoni": 0, "year": [0, 3, 4, 13, 195], "month": 0, "jan": [0, 69], "keyword": [0, 3, 4, 12, 13, 14, 17, 23, 48, 49, 50, 59, 60, 68, 69, 72, 73, 81, 83, 84, 85, 99, 104, 108, 112, 116, 122, 124, 129, 134, 137, 153, 154, 185, 191, 206, 212, 214, 215, 216, 217, 219, 221, 222, 225, 226, 227, 233, 238, 239, 244, 251, 257, 258, 260, 262, 264, 265, 267, 275, 298], "algebra": [0, 5, 14, 15, 17, 21, 27, 29, 34, 37, 45, 50, 51, 59, 68, 69, 72, 74, 86, 89, 90, 91, 93, 95, 98, 99, 103, 105, 108, 109, 110, 139, 151, 158, 159, 211, 214, 215, 217, 218, 219, 220, 222, 223, 226, 228, 236, 239, 241, 242, 245, 281, 282, 285, 287, 288, 293, 294, 296, 298], "system": [0, 1, 2, 5, 7, 8, 9, 13, 14, 15, 17, 18, 19, 22, 23, 26, 27, 28, 29, 33, 35, 42, 44, 59, 68, 69, 70, 74, 93, 96, 97, 98, 99, 104, 109, 110, 111, 114, 115, 116, 120, 121, 123, 124, 128, 129, 133, 134, 135, 136, 137, 139, 141, 142, 143, 144, 145, 148, 150, 151, 152, 153, 154, 155, 156, 158, 169, 170, 185, 188, 189, 191, 194, 198, 201, 205, 206, 207, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 224, 225, 226, 234, 235, 241, 245, 246, 257, 258, 270, 272, 273, 276, 278, 280, 285, 287, 294, 296, 298, 302, 303], "abstract": [0, 13, 47, 48, 57, 68, 70, 74, 76, 81, 86, 101, 111, 114, 129, 133, 137, 140, 141, 175, 177, 186, 189, 190, 191, 213, 221, 245, 246, 248, 252, 259, 279], "an": [0, 2, 3, 4, 5, 7, 8, 9, 10, 12, 14, 15, 17, 18, 19, 21, 22, 23, 25, 26, 28, 29, 30, 31, 33, 36, 37, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 57, 58, 59, 60, 61, 62, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 120, 122, 124, 125, 126, 128, 129, 130, 133, 134, 135, 136, 137, 139, 140, 143, 145, 151, 153, 155, 156, 158, 159, 162, 163, 164, 168, 170, 171, 172, 174, 175, 176, 177, 179, 180, 181, 184, 185, 186, 188, 189, 191, 192, 193, 195, 200, 201, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 238, 239, 241, 242, 243, 244, 246, 247, 250, 251, 252, 253, 255, 257, 258, 259, 260, 261, 262, 264, 265, 267, 270, 272, 274, 275, 277, 278, 279, 280, 291, 292, 293, 294, 295, 296, 298, 301, 302, 303], "open": [0, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 32, 33, 34, 36, 39, 47, 68, 70, 74, 95, 98, 124, 141, 144, 158, 226, 234, 241, 245, 246, 296, 298], "sourc": [0, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 23, 33, 34, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 87, 89, 90, 91, 93, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 114, 116, 118, 120, 122, 124, 125, 126, 127, 129, 130, 131, 133, 134, 135, 136, 137, 139, 140, 141, 158, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 197, 198, 199, 201, 202, 203, 205, 206, 207, 211, 212, 213, 215, 216, 217, 219, 221, 222, 223, 224, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 270, 272, 273, 277, 289, 296], "written": [0, 2, 4, 5, 11, 12, 13, 14, 21, 23, 45, 49, 56, 59, 60, 64, 68, 73, 76, 80, 86, 91, 93, 97, 98, 107, 108, 145, 151, 158, 191, 207, 208, 209, 210, 213, 214, 222, 226, 229, 233, 236, 239, 242, 259, 277, 279, 295, 296, 297, 302], "pure": [0, 2, 13, 14, 32, 34, 41, 69, 74, 95, 98, 101, 114, 124, 155, 196, 215, 216, 217, 219, 222, 226, 246, 264], "It": [0, 2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 19, 21, 22, 23, 28, 31, 32, 34, 35, 36, 39, 41, 42, 43, 44, 47, 48, 49, 56, 59, 60, 62, 63, 64, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 80, 84, 85, 91, 93, 95, 97, 98, 104, 108, 109, 110, 112, 114, 115, 116, 117, 118, 120, 122, 124, 126, 128, 129, 130, 131, 133, 134, 137, 139, 140, 141, 143, 149, 151, 152, 153, 154, 156, 158, 160, 164, 165, 175, 180, 181, 186, 187, 188, 189, 190, 191, 193, 196, 199, 201, 205, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 221, 222, 223, 226, 229, 233, 234, 235, 236, 238, 239, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 257, 258, 259, 260, 261, 262, 265, 270, 273, 274, 275, 277, 279, 280, 291, 292, 294, 295, 296, 297, 298, 300, 301, 302], "built": [0, 2, 4, 5, 8, 14, 15, 18, 42, 44, 50, 68, 74, 95, 104, 141, 158, 214, 217, 226, 227, 231, 242, 245, 246, 252, 261, 264, 265, 296, 297, 301], "focu": [0, 13, 21, 78, 244, 296], "extens": [0, 2, 4, 5, 7, 12, 21, 23, 59, 68, 73, 74, 80, 84, 95, 104, 112, 114, 115, 129, 136, 137, 158, 214, 216, 217, 219, 220, 221, 222, 226, 236, 238, 242, 244, 245, 258, 259, 295, 302], "eas": [0, 141, 210, 212, 226, 229], "through": [0, 3, 4, 7, 8, 13, 14, 15, 21, 23, 28, 32, 33, 35, 37, 39, 47, 49, 59, 60, 62, 67, 68, 69, 72, 73, 76, 78, 79, 80, 81, 82, 84, 93, 97, 98, 104, 108, 111, 116, 117, 118, 122, 129, 130, 134, 137, 140, 141, 143, 151, 156, 162, 163, 201, 213, 219, 221, 226, 232, 236, 238, 242, 244, 245, 246, 247, 258, 264, 270, 272, 277, 280, 293, 294, 295, 300], "both": [0, 2, 3, 4, 5, 7, 11, 12, 13, 14, 15, 18, 21, 22, 23, 28, 30, 31, 32, 35, 40, 41, 47, 48, 49, 60, 63, 64, 66, 67, 68, 69, 73, 74, 76, 83, 92, 93, 95, 98, 99, 104, 108, 110, 114, 115, 116, 117, 124, 129, 130, 133, 134, 136, 137, 139, 143, 145, 146, 152, 155, 163, 164, 175, 181, 188, 191, 195, 196, 201, 205, 209, 210, 212, 213, 214, 216, 217, 219, 221, 222, 224, 225, 226, 228, 233, 234, 235, 236, 238, 239, 242, 244, 245, 247, 251, 257, 259, 264, 265, 270, 272, 292, 295, 296, 297, 302, 303], "interact": [0, 11, 14, 17, 32, 40, 68, 82, 95, 102, 104, 137, 158, 188, 206, 210, 216, 217, 238, 246, 262, 268, 281, 289, 294, 296, 297, 301, 302], "programmat": [0, 14, 17, 18, 36, 37, 245, 275], "applic": [0, 5, 13, 29, 32, 50, 51, 52, 58, 59, 60, 61, 68, 69, 74, 95, 99, 104, 108, 116, 118, 120, 129, 133, 134, 139, 141, 151, 155, 157, 158, 175, 176, 201, 205, 209, 214, 215, 219, 220, 221, 222, 226, 228, 233, 239, 242, 245, 259, 264, 270, 277, 278, 285, 296], "These": [0, 2, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 37, 38, 40, 48, 49, 59, 67, 68, 69, 70, 76, 93, 95, 98, 104, 108, 110, 111, 112, 114, 115, 117, 124, 129, 133, 134, 135, 137, 140, 143, 145, 149, 155, 158, 181, 186, 187, 195, 201, 202, 207, 209, 210, 213, 214, 215, 216, 217, 219, 222, 226, 236, 239, 242, 243, 245, 246, 248, 253, 257, 258, 259, 264, 277, 292, 295, 298, 301, 302], "characterist": [0, 70, 86, 104, 112, 114, 209, 215, 217, 219, 220, 242, 244, 298], "have": [0, 3, 4, 5, 7, 8, 9, 10, 11, 12, 14, 15, 18, 19, 21, 22, 23, 25, 26, 28, 30, 31, 33, 34, 35, 37, 39, 41, 43, 44, 45, 47, 48, 49, 50, 51, 52, 58, 59, 60, 61, 64, 66, 67, 68, 69, 70, 72, 73, 74, 76, 78, 79, 83, 84, 86, 91, 92, 93, 95, 97, 98, 99, 100, 101, 104, 107, 108, 109, 110, 111, 112, 114, 116, 117, 122, 124, 125, 127, 128, 133, 134, 135, 136, 139, 141, 142, 143, 149, 151, 155, 156, 158, 175, 177, 180, 184, 186, 188, 189, 190, 191, 193, 194, 196, 199, 200, 201, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 226, 228, 229, 231, 233, 234, 235, 236, 238, 239, 242, 244, 245, 246, 247, 248, 250, 252, 253, 255, 256, 257, 259, 260, 261, 264, 265, 267, 270, 272, 274, 275, 276, 277, 280, 291, 292, 294, 295, 296, 297, 298, 301, 302, 303], "led": 0, "becom": [0, 3, 4, 5, 11, 12, 13, 14, 15, 19, 21, 59, 64, 67, 68, 69, 72, 91, 96, 104, 110, 129, 139, 206, 209, 213, 214, 216, 217, 223, 226, 229, 235, 242, 245, 246, 252, 265, 267, 273, 275, 302], "popular": [0, 2, 69, 109, 158, 296], "librari": [0, 2, 3, 4, 12, 13, 14, 21, 23, 34, 38, 39, 49, 68, 69, 73, 93, 95, 96, 104, 109, 128, 139, 141, 158, 195, 212, 216, 217, 246, 257, 258, 259, 264, 265, 291, 294, 295, 296], "scientif": [0, 14, 39, 68, 158], "ecosystem": 0, "thi": [0, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 26, 28, 29, 30, 31, 32, 33, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 120, 121, 122, 124, 125, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 162, 163, 164, 165, 166, 168, 170, 171, 172, 174, 175, 177, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 200, 201, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 250, 251, 252, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 270, 272, 273, 274, 275, 276, 277, 278, 279, 281, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303], "paper": [0, 4, 25, 108, 143, 210, 221, 222, 235, 236, 239, 242], "present": [0, 2, 5, 13, 14, 15, 19, 25, 47, 48, 52, 55, 59, 60, 62, 66, 68, 71, 95, 104, 108, 111, 114, 116, 120, 122, 124, 134, 139, 143, 191, 193, 201, 203, 206, 207, 212, 213, 219, 220, 221, 225, 226, 239, 245, 259, 265, 273, 274, 275, 279, 282, 303], "architectur": [0, 12, 158, 216, 257], "descript": [0, 3, 4, 5, 13, 29, 38, 48, 50, 58, 76, 95, 108, 163, 181, 188, 199, 209, 210, 211, 226, 250, 257, 259, 261, 262, 281, 299], "its": [0, 2, 3, 4, 5, 7, 12, 13, 14, 15, 17, 19, 21, 22, 23, 28, 30, 31, 32, 33, 34, 35, 37, 41, 43, 44, 45, 48, 49, 50, 52, 56, 58, 59, 60, 67, 68, 69, 70, 73, 74, 76, 78, 80, 84, 86, 93, 95, 96, 98, 99, 101, 104, 108, 110, 111, 112, 114, 115, 116, 117, 118, 120, 124, 128, 129, 130, 133, 134, 136, 137, 139, 140, 141, 143, 144, 145, 151, 152, 155, 156, 158, 159, 164, 170, 176, 177, 179, 180, 185, 186, 189, 191, 195, 196, 198, 201, 202, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 232, 233, 234, 238, 241, 242, 244, 245, 246, 248, 250, 251, 252, 257, 260, 261, 264, 265, 270, 273, 274, 275, 277, 280, 296, 297, 298, 301, 302], "featur": [0, 2, 3, 5, 7, 11, 12, 13, 15, 16, 23, 38, 39, 68, 70, 72, 141, 151, 158, 208, 226, 242, 246, 255, 259, 262, 278, 287, 290, 295, 296, 300, 302], "discuss": [0, 3, 4, 5, 7, 11, 12, 13, 15, 16, 17, 19, 21, 22, 23, 38, 50, 59, 69, 76, 108, 115, 128, 134, 141, 151, 155, 156, 200, 208, 209, 210, 216, 252, 261, 281, 291, 293, 294, 296, 297, 299, 301, 302], "select": [0, 8, 16, 17, 33, 38, 49, 52, 59, 60, 67, 68, 69, 77, 82, 96, 98, 99, 108, 110, 112, 114, 131, 134, 196, 206, 216, 217, 219, 220, 222, 226, 235, 238, 244], "submodul": [0, 2, 3, 4, 11, 12, 14, 49, 128, 213, 217, 219, 221], "The": [0, 2, 4, 5, 6, 7, 8, 9, 11, 12, 14, 15, 17, 19, 20, 22, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 47, 48, 49, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 120, 121, 122, 124, 125, 126, 128, 129, 130, 131, 133, 134, 135, 136, 137, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 160, 162, 163, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 200, 201, 202, 203, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 255, 257, 258, 259, 260, 261, 262, 264, 265, 267, 270, 272, 273, 274, 275, 278, 279, 280, 287, 291, 292, 294, 295, 297, 298, 299, 300, 301, 302, 303], "supplementari": 0, "materi": [0, 25, 116, 162, 300], "provid": [0, 2, 3, 4, 5, 7, 8, 9, 11, 13, 16, 17, 19, 20, 21, 22, 23, 26, 29, 30, 34, 38, 41, 47, 48, 49, 50, 51, 57, 58, 59, 60, 66, 67, 68, 70, 72, 76, 77, 79, 84, 87, 90, 91, 95, 96, 98, 99, 101, 104, 105, 107, 108, 109, 110, 111, 114, 115, 117, 120, 122, 128, 130, 133, 134, 136, 139, 143, 144, 145, 146, 151, 152, 153, 154, 155, 156, 158, 159, 164, 165, 185, 193, 194, 195, 199, 201, 202, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 221, 222, 223, 224, 225, 226, 229, 231, 234, 235, 236, 238, 242, 243, 244, 245, 246, 247, 251, 252, 257, 258, 259, 261, 262, 264, 265, 267, 270, 273, 274, 275, 277, 278, 280, 292, 296, 297, 298, 302], "addit": [0, 2, 3, 5, 9, 12, 13, 14, 15, 17, 19, 39, 41, 49, 58, 59, 60, 67, 68, 74, 76, 80, 86, 88, 92, 93, 95, 96, 98, 101, 104, 108, 110, 111, 112, 114, 121, 122, 124, 128, 130, 134, 155, 159, 177, 189, 190, 193, 200, 206, 209, 210, 211, 212, 213, 214, 215, 216, 219, 221, 222, 226, 232, 235, 236, 238, 239, 242, 243, 244, 245, 246, 257, 258, 259, 261, 262, 264, 265, 267, 274, 294, 296, 297, 298, 301, 302], "exampl": [0, 1, 2, 3, 5, 7, 12, 13, 14, 15, 17, 18, 19, 21, 22, 27, 29, 32, 33, 35, 37, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 90, 91, 93, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 109, 110, 112, 114, 116, 118, 120, 122, 124, 126, 127, 129, 130, 131, 133, 134, 136, 137, 139, 140, 141, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 156, 158, 160, 162, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 183, 185, 186, 188, 189, 190, 191, 192, 193, 197, 198, 200, 201, 202, 203, 205, 206, 207, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 227, 228, 229, 231, 232, 234, 235, 238, 239, 241, 242, 243, 244, 245, 250, 252, 253, 255, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 270, 272, 273, 275, 277, 278, 279, 280, 285, 287, 288, 291, 292, 293, 294, 295, 297, 298, 300, 301, 303], "further": [0, 2, 11, 21, 23, 28, 44, 48, 68, 69, 74, 76, 80, 93, 95, 100, 101, 104, 110, 116, 121, 122, 130, 133, 134, 156, 163, 209, 211, 212, 213, 215, 219, 221, 222, 235, 236, 238, 242, 246, 252, 295, 296], "outlin": [0, 2, 3, 11, 21, 23, 66, 95, 213, 242], "detail": [0, 2, 3, 4, 5, 6, 9, 11, 12, 13, 14, 16, 18, 21, 23, 38, 48, 59, 68, 70, 73, 75, 76, 93, 94, 95, 96, 104, 108, 122, 133, 134, 141, 156, 158, 163, 181, 185, 201, 203, 211, 212, 213, 215, 219, 221, 228, 233, 238, 239, 240, 242, 243, 246, 251, 252, 257, 260, 262, 265, 275, 276, 277, 278, 281, 285, 292, 294, 298, 299, 301], "volum": [0, 4, 49, 67, 76, 93, 95, 211, 220, 236, 239, 242, 261, 270], "page": [0, 2, 3, 4, 5, 7, 8, 11, 12, 13, 14, 15, 21, 22, 28, 29, 31, 32, 36, 38, 49, 50, 51, 67, 73, 93, 108, 109, 133, 134, 158, 196, 212, 215, 216, 217, 220, 226, 236, 239, 262, 279, 302], "journal": [0, 4, 7, 41, 67, 73, 125, 220, 238, 261, 264], "issn": 0, "2376": 0, "5992": 0, "url": [0, 69, 262], "bsd": [0, 2, 25, 296], "licens": [0, 2, 25, 296], "so": [0, 2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 18, 19, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 52, 56, 57, 59, 60, 62, 64, 66, 68, 69, 72, 74, 76, 78, 80, 81, 82, 84, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 104, 105, 108, 110, 111, 114, 116, 117, 124, 128, 129, 133, 134, 137, 139, 141, 143, 145, 151, 152, 153, 155, 156, 158, 159, 164, 175, 177, 185, 187, 188, 189, 191, 193, 195, 196, 200, 201, 210, 211, 212, 213, 214, 215, 216, 217, 219, 221, 222, 223, 224, 225, 226, 227, 228, 233, 234, 235, 236, 238, 239, 241, 242, 243, 244, 245, 246, 250, 251, 255, 257, 258, 261, 262, 264, 265, 267, 276, 280, 291, 292, 294, 296, 297, 298, 301, 302, 303], "you": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 45, 47, 49, 50, 51, 59, 60, 67, 68, 69, 70, 72, 74, 75, 76, 80, 82, 84, 86, 87, 92, 93, 95, 96, 98, 99, 101, 102, 104, 105, 108, 109, 110, 111, 112, 114, 124, 126, 127, 128, 133, 134, 135, 136, 139, 141, 142, 152, 153, 155, 156, 158, 180, 185, 186, 189, 191, 195, 200, 201, 203, 207, 209, 210, 212, 213, 214, 215, 216, 217, 219, 221, 222, 223, 226, 227, 229, 233, 234, 238, 239, 242, 243, 244, 245, 246, 247, 250, 251, 252, 255, 257, 258, 259, 260, 262, 264, 265, 274, 275, 276, 277, 290, 291, 292, 294, 296, 297, 298, 299, 300, 301, 302, 303], "free": [0, 9, 11, 12, 13, 14, 28, 33, 34, 39, 47, 48, 49, 58, 59, 64, 68, 80, 95, 99, 101, 104, 108, 111, 114, 116, 117, 122, 125, 133, 136, 151, 160, 180, 198, 201, 208, 212, 213, 215, 217, 219, 221, 222, 226, 228, 234, 236, 238, 239, 242, 244, 245, 252, 264, 296], "howev": [0, 2, 3, 4, 5, 8, 11, 12, 13, 14, 15, 17, 19, 21, 22, 23, 28, 31, 32, 35, 42, 44, 49, 51, 59, 60, 64, 67, 68, 69, 70, 73, 74, 76, 78, 93, 95, 98, 99, 104, 108, 109, 110, 111, 114, 116, 120, 129, 133, 134, 136, 137, 139, 140, 141, 155, 159, 191, 210, 211, 212, 213, 214, 215, 216, 217, 219, 221, 222, 223, 225, 226, 227, 233, 234, 235, 236, 238, 242, 243, 244, 245, 257, 258, 265, 274, 275, 279, 291, 294, 296, 298, 302, 303], "like": [0, 1, 2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 18, 21, 22, 23, 25, 33, 35, 36, 37, 38, 39, 49, 50, 51, 53, 59, 60, 67, 68, 69, 72, 73, 74, 76, 78, 88, 91, 95, 96, 98, 99, 101, 102, 103, 104, 108, 109, 110, 114, 120, 124, 128, 133, 137, 140, 141, 143, 152, 155, 158, 159, 173, 175, 185, 186, 189, 190, 191, 195, 196, 200, 201, 205, 207, 209, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 224, 225, 226, 229, 233, 234, 235, 236, 238, 239, 242, 243, 244, 245, 246, 247, 248, 250, 252, 253, 255, 257, 258, 259, 260, 264, 265, 267, 274, 275, 277, 279, 291, 292, 294, 295, 296, 297, 298, 302], "academ": [0, 25, 48, 52, 220], "commerci": [0, 296], "creat": [0, 2, 4, 5, 7, 8, 12, 14, 21, 22, 30, 31, 32, 33, 35, 36, 37, 41, 43, 48, 49, 50, 57, 59, 60, 68, 69, 70, 72, 74, 75, 76, 78, 80, 81, 83, 84, 89, 91, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 108, 109, 110, 111, 112, 114, 116, 120, 124, 129, 130, 133, 134, 136, 137, 139, 140, 141, 144, 145, 146, 148, 150, 152, 154, 155, 156, 158, 159, 168, 170, 172, 176, 179, 180, 181, 185, 186, 188, 189, 191, 194, 197, 200, 201, 203, 205, 209, 210, 212, 213, 215, 216, 217, 219, 221, 222, 223, 226, 233, 238, 242, 245, 246, 247, 251, 252, 257, 258, 259, 261, 262, 264, 265, 270, 275, 277, 292, 294, 297, 298, 301, 302, 303], "fork": [0, 5, 13, 143], "deriv": [0, 4, 11, 12, 13, 14, 20, 23, 32, 47, 48, 49, 52, 58, 59, 68, 70, 74, 75, 76, 78, 85, 90, 91, 93, 95, 96, 98, 101, 104, 110, 112, 114, 120, 124, 128, 129, 131, 133, 134, 135, 136, 137, 139, 143, 145, 146, 148, 151, 153, 154, 155, 180, 189, 193, 196, 197, 200, 201, 203, 205, 206, 207, 209, 212, 213, 214, 215, 217, 219, 221, 222, 223, 226, 228, 236, 238, 242, 243, 244, 248, 253, 259, 270, 273, 274, 293, 296, 303], "long": [0, 4, 5, 11, 12, 28, 37, 49, 60, 67, 68, 69, 71, 81, 93, 95, 96, 98, 104, 108, 110, 116, 117, 143, 156, 206, 222, 223, 226, 235, 236, 244, 246, 258, 265, 267, 273, 294, 297], "copi": [0, 9, 11, 12, 13, 15, 21, 25, 50, 60, 61, 68, 84, 104, 108, 109, 215, 217, 219, 221, 225, 226, 233, 244, 257, 264, 267, 301], "statement": [0, 4, 13, 21, 22, 23, 39, 48, 49, 68, 76, 93, 98, 101, 141, 170, 226, 246, 255, 259, 264], "redistribut": [0, 222], "see": [0, 2, 3, 5, 7, 8, 9, 11, 12, 13, 14, 15, 18, 19, 21, 22, 23, 24, 25, 42, 43, 44, 45, 47, 48, 49, 51, 54, 56, 59, 60, 61, 64, 67, 69, 70, 73, 74, 75, 76, 80, 84, 85, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 104, 105, 108, 109, 110, 114, 122, 128, 133, 134, 135, 139, 147, 149, 153, 155, 160, 163, 166, 167, 176, 180, 181, 185, 186, 187, 188, 190, 191, 194, 196, 201, 206, 209, 211, 212, 213, 214, 215, 216, 217, 219, 221, 222, 223, 225, 226, 228, 229, 232, 233, 234, 235, 236, 238, 239, 242, 243, 244, 245, 246, 251, 252, 255, 257, 258, 259, 260, 261, 262, 265, 266, 270, 272, 280, 291, 292, 294, 296, 297, 298, 300, 301, 302, 303], "file": [0, 2, 3, 4, 5, 7, 8, 9, 12, 14, 15, 25, 49, 104, 110, 141, 158, 180, 212, 226, 233, 236, 238, 246, 255, 257, 258, 259, 265], "That": [0, 3, 5, 11, 12, 14, 15, 21, 22, 23, 68, 69, 74, 98, 104, 108, 151, 188, 193, 199, 209, 210, 213, 214, 216, 217, 219, 221, 232, 233, 242, 246, 258, 259, 265, 291, 294, 297, 302], "said": [0, 3, 14, 41, 45, 49, 54, 108, 196, 207, 209, 210, 214, 242, 245, 246, 270, 277], "although": [0, 2, 3, 4, 5, 11, 12, 14, 15, 18, 19, 21, 23, 31, 60, 68, 69, 74, 80, 92, 93, 96, 98, 99, 101, 104, 108, 128, 143, 158, 213, 215, 216, 217, 219, 221, 222, 234, 235, 238, 239, 244, 258, 264, 265, 294, 297, 302], "requir": [0, 2, 4, 5, 7, 9, 11, 12, 13, 14, 15, 23, 25, 33, 37, 39, 49, 59, 68, 69, 71, 72, 76, 78, 79, 81, 82, 85, 87, 98, 104, 107, 108, 109, 110, 111, 112, 114, 116, 122, 128, 129, 130, 133, 134, 136, 137, 139, 141, 143, 145, 152, 156, 165, 188, 200, 201, 203, 211, 212, 213, 215, 216, 217, 219, 221, 223, 226, 229, 235, 236, 239, 242, 244, 245, 246, 250, 257, 258, 259, 260, 262, 264, 265, 273, 274, 275, 298, 300], "conveni": [0, 8, 13, 14, 15, 30, 32, 37, 40, 47, 49, 60, 68, 69, 73, 76, 95, 98, 110, 141, 156, 158, 203, 209, 210, 212, 213, 214, 215, 216, 217, 221, 224, 233, 234, 238, 244, 250, 251, 258, 260, 261, 265, 277, 292, 294], "pleas": [0, 3, 4, 5, 7, 12, 13, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 45, 47, 68, 76, 80, 93, 108, 128, 134, 141, 151, 155, 156, 163, 164, 185, 200, 210, 211, 212, 213, 219, 220, 234, 238, 239, 244, 245, 265, 270, 275, 299, 303], "when": [0, 2, 4, 5, 7, 8, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 26, 28, 32, 34, 35, 36, 39, 41, 42, 43, 44, 45, 47, 48, 49, 50, 52, 59, 60, 61, 66, 67, 68, 69, 70, 72, 73, 74, 76, 77, 78, 80, 81, 82, 83, 84, 85, 92, 95, 96, 98, 99, 100, 104, 108, 109, 110, 111, 112, 114, 120, 122, 124, 125, 128, 129, 133, 136, 137, 139, 140, 141, 143, 149, 151, 152, 153, 154, 155, 156, 159, 164, 165, 170, 175, 176, 180, 183, 185, 193, 194, 195, 200, 206, 209, 210, 212, 213, 214, 215, 216, 217, 219, 221, 222, 223, 225, 226, 227, 228, 232, 233, 234, 235, 236, 238, 239, 242, 243, 244, 245, 246, 248, 250, 251, 255, 257, 258, 259, 260, 262, 264, 265, 267, 269, 274, 292, 294, 296, 297, 302, 303], "your": [0, 2, 3, 4, 5, 8, 12, 13, 15, 23, 25, 28, 29, 30, 31, 33, 35, 36, 37, 39, 43, 68, 69, 95, 96, 104, 109, 110, 111, 112, 124, 128, 133, 153, 155, 210, 212, 226, 233, 238, 242, 245, 246, 264, 265, 292, 296, 298, 299, 301, 302], "work": [0, 2, 3, 4, 8, 9, 11, 12, 13, 14, 15, 18, 19, 21, 22, 23, 28, 34, 39, 42, 44, 47, 48, 49, 51, 59, 60, 61, 68, 69, 72, 76, 93, 95, 97, 98, 99, 101, 104, 105, 108, 110, 128, 133, 140, 141, 143, 152, 156, 158, 171, 175, 180, 184, 185, 186, 187, 190, 193, 203, 210, 211, 212, 213, 214, 215, 216, 217, 219, 221, 222, 226, 233, 234, 235, 236, 238, 239, 242, 244, 245, 246, 252, 257, 258, 259, 261, 264, 265, 266, 267, 274, 275, 294, 295, 296, 297, 298, 301, 302], "also": [0, 2, 3, 5, 7, 8, 9, 11, 12, 13, 14, 15, 17, 19, 21, 22, 23, 25, 26, 28, 29, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 47, 48, 49, 51, 57, 59, 60, 67, 69, 70, 72, 73, 74, 75, 76, 80, 84, 86, 88, 90, 91, 93, 95, 97, 98, 99, 102, 104, 105, 108, 109, 110, 111, 112, 114, 116, 117, 120, 121, 122, 124, 128, 129, 130, 131, 133, 134, 136, 137, 139, 140, 141, 143, 144, 145, 146, 149, 152, 153, 154, 155, 156, 158, 159, 160, 164, 174, 175, 177, 181, 185, 190, 191, 194, 195, 196, 200, 201, 203, 205, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 221, 222, 223, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 238, 239, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 255, 257, 258, 259, 260, 261, 262, 265, 267, 270, 273, 274, 275, 276, 277, 279, 280, 291, 292, 294, 296, 297, 298, 301, 302, 303], "consid": [0, 3, 5, 12, 13, 14, 15, 18, 21, 22, 23, 26, 37, 41, 45, 48, 49, 57, 60, 63, 67, 68, 69, 71, 72, 73, 74, 76, 78, 80, 84, 92, 93, 95, 96, 97, 98, 99, 101, 104, 108, 124, 128, 129, 130, 136, 142, 153, 159, 181, 188, 191, 195, 196, 202, 206, 207, 209, 212, 213, 214, 215, 216, 217, 219, 221, 222, 223, 225, 226, 229, 233, 238, 239, 242, 243, 244, 245, 246, 257, 259, 264, 273, 275, 277, 279, 280, 294, 298, 302], "contribut": [0, 2, 3, 4, 5, 9, 10, 12, 39, 84, 108, 134, 146, 149, 216, 219, 221, 242, 280, 299], "all": [0, 2, 3, 4, 5, 8, 9, 11, 12, 13, 14, 15, 17, 19, 21, 22, 23, 25, 33, 37, 38, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 56, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 81, 83, 84, 85, 93, 95, 97, 98, 99, 100, 101, 104, 107, 108, 109, 110, 111, 112, 114, 116, 117, 120, 122, 124, 125, 129, 130, 131, 133, 134, 135, 136, 137, 139, 140, 141, 143, 144, 146, 151, 153, 155, 158, 159, 165, 170, 171, 175, 185, 187, 188, 189, 191, 193, 194, 195, 196, 198, 199, 206, 207, 210, 211, 212, 213, 214, 215, 216, 217, 219, 221, 222, 223, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 238, 239, 241, 242, 243, 244, 245, 246, 247, 250, 252, 253, 255, 257, 258, 259, 260, 262, 264, 265, 267, 270, 272, 274, 276, 277, 278, 279, 281, 291, 292, 294, 296, 297, 298, 301, 302, 303], "chang": [0, 4, 5, 7, 8, 12, 14, 15, 21, 39, 48, 49, 50, 59, 60, 64, 67, 68, 69, 72, 73, 74, 76, 82, 83, 93, 95, 98, 104, 108, 110, 111, 112, 116, 118, 120, 124, 129, 133, 136, 139, 141, 143, 148, 165, 176, 186, 196, 197, 200, 207, 209, 210, 211, 212, 213, 214, 215, 217, 219, 222, 223, 226, 233, 234, 235, 236, 238, 241, 242, 244, 245, 246, 247, 257, 264, 265, 275, 277, 291, 294, 297, 301], "back": [0, 23, 31, 32, 34, 48, 49, 64, 67, 68, 69, 74, 76, 83, 84, 90, 92, 93, 95, 96, 99, 108, 109, 124, 185, 206, 209, 212, 215, 216, 221, 222, 224, 226, 236, 242, 244, 247, 248], "we": [0, 2, 3, 4, 5, 7, 9, 11, 12, 13, 15, 19, 21, 22, 23, 25, 28, 29, 30, 31, 33, 35, 36, 37, 42, 43, 44, 47, 48, 49, 50, 51, 52, 57, 58, 59, 60, 61, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 76, 81, 86, 91, 92, 93, 95, 96, 97, 98, 99, 104, 105, 107, 108, 110, 112, 114, 124, 127, 128, 129, 130, 131, 133, 134, 136, 137, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 163, 166, 174, 177, 180, 181, 183, 184, 185, 186, 187, 188, 190, 191, 193, 194, 196, 200, 201, 203, 205, 207, 209, 210, 212, 213, 214, 215, 216, 217, 219, 221, 222, 223, 225, 226, 233, 234, 236, 238, 239, 241, 242, 243, 244, 246, 248, 250, 252, 257, 258, 259, 261, 262, 264, 265, 270, 274, 275, 276, 277, 279, 280, 291, 292, 294, 296, 297, 298, 301, 302, 303], "can": [0, 2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 29, 33, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 57, 58, 59, 60, 61, 63, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 104, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 120, 121, 122, 124, 126, 128, 129, 130, 131, 133, 134, 135, 136, 137, 139, 140, 141, 144, 145, 146, 149, 151, 152, 153, 154, 155, 156, 158, 159, 163, 164, 165, 170, 172, 175, 179, 180, 181, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 200, 201, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 238, 239, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 255, 257, 258, 259, 261, 262, 264, 265, 267, 273, 274, 275, 276, 277, 279, 280, 291, 292, 294, 296, 297, 298, 300, 301, 302, 303], "incorpor": [0, 2, 19, 115, 214, 238], "u": [0, 8, 9, 15, 19, 21, 22, 23, 26, 32, 41, 47, 48, 49, 59, 64, 67, 68, 69, 71, 82, 85, 90, 93, 95, 101, 104, 108, 114, 129, 130, 133, 134, 135, 139, 141, 143, 145, 148, 151, 152, 153, 155, 158, 159, 163, 164, 175, 180, 186, 196, 200, 201, 205, 207, 209, 211, 212, 213, 214, 215, 219, 221, 222, 225, 226, 233, 236, 238, 239, 242, 243, 244, 245, 246, 251, 265, 277, 294, 296, 297, 298], "benefit": [0, 2, 23, 30, 49, 128, 155, 206, 215], "end": [0, 2, 4, 7, 11, 12, 13, 15, 19, 21, 22, 23, 26, 29, 33, 35, 41, 47, 48, 49, 58, 59, 64, 66, 67, 68, 69, 73, 74, 76, 78, 80, 84, 93, 96, 98, 99, 101, 104, 108, 110, 116, 117, 120, 129, 137, 139, 140, 143, 145, 148, 153, 154, 155, 196, 200, 201, 206, 207, 210, 211, 215, 219, 226, 229, 232, 234, 235, 239, 242, 243, 244, 245, 246, 247, 248, 257, 259, 260, 262, 264, 267, 277, 292, 296, 298, 302], "develop": [0, 3, 4, 5, 6, 10, 14, 19, 21, 23, 47, 50, 66, 110, 118, 158, 195, 212, 213, 216, 219, 244, 245, 296, 299], "team": [0, 3, 11], "member": [0, 4, 13, 21, 28, 48, 57, 59, 69, 91, 114, 118, 120, 213, 234, 251], "list": [0, 2, 3, 4, 5, 9, 11, 12, 16, 21, 31, 32, 33, 34, 35, 36, 37, 39, 41, 44, 47, 48, 49, 50, 51, 52, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 90, 91, 93, 95, 96, 97, 98, 99, 101, 104, 107, 108, 109, 110, 116, 124, 129, 130, 133, 134, 137, 139, 143, 145, 148, 152, 153, 154, 158, 159, 164, 175, 177, 180, 181, 185, 186, 188, 189, 191, 193, 201, 205, 210, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 232, 234, 235, 236, 238, 239, 242, 243, 244, 245, 246, 247, 250, 251, 252, 255, 257, 258, 259, 260, 261, 262, 264, 265, 267, 291, 295, 296, 298, 301, 302, 303], "github": [0, 2, 3, 5, 7, 8, 10, 11, 13, 32, 36, 39, 47, 68, 72, 84, 95, 104, 195, 234, 245, 298], "found": [0, 2, 3, 4, 5, 8, 11, 12, 21, 22, 28, 32, 47, 50, 51, 59, 60, 62, 64, 66, 68, 69, 70, 78, 79, 84, 93, 95, 104, 108, 110, 124, 131, 133, 134, 135, 155, 158, 195, 209, 213, 214, 215, 216, 221, 222, 223, 226, 228, 229, 232, 233, 236, 239, 242, 243, 244, 245, 246, 250, 264, 265, 267, 301], "zotero": 0, "start": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 23, 34, 38, 39, 48, 49, 51, 52, 57, 58, 59, 60, 64, 67, 68, 69, 70, 76, 98, 99, 101, 104, 107, 108, 109, 112, 114, 116, 117, 120, 141, 143, 153, 154, 186, 187, 190, 194, 209, 210, 212, 216, 219, 221, 222, 226, 229, 232, 234, 235, 236, 239, 242, 244, 245, 246, 247, 250, 257, 258, 264, 266, 267, 276, 290, 291, 294, 296], "sympi": [1, 2, 3, 5, 6, 8, 10, 11, 12, 14, 16, 17, 21, 22, 23, 24, 26, 27, 28, 29, 31, 33, 34, 35, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 114, 115, 116, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 275, 276, 278, 279, 280, 281, 285, 287, 288, 290, 292, 294, 295, 297, 298, 299, 300, 301, 302, 303], "mode": [1, 8, 28, 68, 96, 110, 163, 186, 206, 222, 226, 257], "set": [1, 2, 3, 4, 5, 7, 8, 11, 12, 14, 15, 17, 19, 20, 21, 22, 28, 30, 31, 37, 40, 41, 43, 47, 48, 49, 50, 51, 56, 57, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 81, 83, 85, 86, 87, 90, 91, 93, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 108, 110, 114, 116, 117, 122, 124, 128, 129, 133, 134, 135, 137, 139, 140, 141, 143, 144, 145, 150, 152, 153, 154, 155, 158, 159, 175, 181, 186, 191, 193, 196, 198, 199, 200, 201, 203, 205, 206, 207, 209, 212, 213, 214, 215, 216, 219, 221, 222, 225, 226, 227, 228, 233, 235, 236, 238, 239, 241, 242, 243, 244, 246, 250, 251, 252, 255, 257, 258, 259, 260, 264, 265, 270, 273, 275, 281, 284, 291, 293, 302], "sympy_debug": [1, 95, 267], "variabl": [1, 2, 4, 5, 11, 12, 13, 14, 17, 19, 22, 23, 26, 28, 29, 31, 32, 34, 36, 40, 41, 42, 44, 45, 47, 49, 50, 63, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 85, 87, 93, 95, 96, 98, 99, 104, 110, 111, 114, 116, 117, 120, 122, 124, 129, 135, 139, 141, 148, 150, 158, 159, 165, 180, 185, 189, 191, 194, 200, 201, 203, 207, 214, 215, 216, 217, 219, 221, 222, 223, 226, 227, 232, 233, 238, 239, 241, 242, 243, 244, 245, 253, 257, 259, 260, 261, 265, 270, 273, 274, 276, 277, 279, 292, 294, 296, 298, 303], "For": [1, 2, 3, 4, 5, 8, 9, 11, 12, 13, 14, 15, 18, 21, 22, 23, 24, 28, 30, 31, 32, 33, 34, 35, 36, 37, 39, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 59, 60, 61, 64, 67, 68, 69, 70, 71, 72, 73, 74, 76, 80, 82, 83, 86, 89, 91, 92, 93, 97, 98, 99, 104, 108, 109, 110, 112, 114, 116, 117, 118, 120, 124, 126, 131, 133, 134, 135, 139, 141, 145, 151, 152, 153, 154, 155, 156, 158, 160, 174, 175, 180, 184, 186, 188, 189, 190, 191, 193, 195, 196, 197, 200, 201, 205, 206, 207, 209, 210, 212, 213, 214, 215, 216, 217, 219, 221, 222, 223, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 238, 239, 241, 242, 244, 245, 246, 247, 250, 251, 252, 253, 257, 258, 259, 261, 262, 264, 265, 268, 270, 272, 275, 277, 279, 280, 291, 292, 294, 297, 298, 302, 303], "instanc": [1, 3, 4, 5, 12, 13, 14, 18, 21, 22, 23, 42, 43, 44, 46, 48, 49, 51, 59, 61, 63, 68, 70, 72, 73, 74, 76, 81, 84, 85, 86, 91, 92, 95, 96, 99, 101, 104, 108, 110, 111, 112, 114, 116, 125, 129, 130, 134, 137, 139, 140, 141, 159, 164, 171, 175, 181, 185, 186, 188, 190, 191, 201, 203, 206, 207, 212, 215, 216, 217, 221, 222, 223, 224, 226, 234, 236, 238, 242, 244, 245, 246, 250, 251, 252, 257, 258, 259, 261, 264, 265, 270, 272, 273, 274, 275, 277, 279, 291, 292, 297, 302, 303], "unix": [1, 257, 258], "would": [1, 3, 4, 5, 9, 11, 12, 13, 14, 15, 17, 19, 21, 22, 23, 25, 29, 32, 34, 39, 48, 49, 50, 57, 59, 60, 67, 68, 69, 73, 74, 80, 84, 93, 95, 99, 104, 108, 110, 115, 116, 124, 125, 126, 128, 131, 133, 141, 145, 155, 158, 186, 188, 191, 196, 200, 201, 207, 209, 212, 215, 216, 217, 219, 222, 223, 225, 226, 227, 229, 234, 235, 236, 238, 239, 242, 243, 244, 245, 246, 248, 250, 251, 257, 259, 261, 264, 265, 267, 275, 276, 277, 279, 291, 292, 294, 296, 297, 298, 301, 302, 303], "do": [1, 2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 19, 21, 22, 23, 24, 25, 28, 31, 32, 33, 34, 35, 36, 38, 39, 40, 43, 44, 45, 47, 48, 49, 50, 51, 60, 64, 67, 68, 69, 70, 71, 74, 76, 78, 80, 83, 84, 87, 93, 95, 96, 98, 99, 101, 102, 104, 105, 108, 109, 110, 121, 124, 128, 133, 134, 139, 141, 142, 144, 145, 149, 152, 153, 156, 158, 163, 166, 171, 175, 180, 183, 185, 187, 193, 195, 196, 199, 202, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 221, 222, 223, 225, 226, 227, 229, 233, 234, 235, 236, 238, 239, 242, 243, 244, 248, 251, 252, 255, 257, 258, 260, 262, 264, 265, 267, 273, 275, 276, 277, 279, 291, 292, 294, 295, 296, 297, 298, 300, 302], "true": [1, 2, 4, 12, 13, 14, 15, 17, 18, 21, 22, 23, 26, 28, 30, 31, 32, 33, 35, 36, 37, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 54, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 89, 90, 93, 95, 96, 98, 99, 100, 101, 104, 105, 108, 110, 112, 114, 116, 117, 122, 124, 125, 126, 127, 128, 131, 133, 134, 135, 136, 137, 139, 140, 141, 145, 158, 162, 163, 172, 175, 176, 183, 185, 186, 189, 190, 191, 194, 200, 201, 202, 203, 206, 207, 210, 211, 212, 213, 214, 215, 216, 217, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 233, 234, 235, 236, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 255, 257, 258, 259, 260, 262, 264, 265, 267, 270, 273, 274, 275, 276, 277, 280, 291, 292, 294, 296, 297, 298, 301, 302, 303], "bin": [1, 2, 4, 8, 9, 11, 12, 96, 226, 257, 264], "isympi": [1, 2, 14, 15, 96], "window": [1, 9, 11, 267], "now": [1, 2, 5, 8, 9, 11, 12, 13, 15, 19, 21, 22, 23, 28, 39, 48, 49, 60, 68, 69, 73, 76, 79, 84, 85, 90, 92, 93, 97, 104, 108, 124, 129, 130, 133, 137, 139, 141, 144, 146, 149, 151, 158, 159, 194, 196, 201, 206, 209, 210, 212, 213, 214, 215, 216, 219, 222, 223, 227, 234, 235, 236, 238, 239, 242, 244, 245, 246, 247, 252, 257, 258, 265, 275, 276, 294, 296, 297, 302, 303], "just": [1, 3, 4, 5, 11, 12, 13, 14, 15, 21, 22, 23, 30, 32, 35, 39, 45, 48, 49, 59, 66, 68, 69, 70, 74, 91, 93, 95, 96, 97, 98, 104, 108, 109, 112, 126, 128, 129, 130, 141, 145, 149, 155, 156, 158, 171, 176, 181, 191, 196, 200, 206, 207, 209, 212, 213, 215, 216, 217, 219, 221, 225, 226, 233, 234, 235, 236, 238, 242, 245, 247, 255, 257, 259, 260, 262, 276, 277, 279, 291, 292, 294, 295, 296, 297, 298, 302, 303], "limit": [1, 3, 13, 15, 26, 32, 33, 37, 39, 45, 47, 49, 67, 68, 70, 72, 73, 74, 76, 77, 80, 88, 90, 95, 96, 98, 104, 108, 110, 122, 156, 180, 186, 189, 206, 212, 217, 219, 222, 223, 226, 229, 230, 232, 234, 238, 239, 241, 242, 243, 244, 246, 251, 258, 261, 264, 265, 267, 269, 270, 280, 282, 288, 293, 294, 296, 298], "function": [1, 2, 3, 5, 7, 11, 14, 17, 18, 19, 21, 22, 24, 26, 29, 31, 33, 36, 38, 42, 43, 44, 46, 47, 48, 50, 51, 59, 60, 63, 64, 66, 69, 70, 71, 72, 73, 77, 78, 79, 80, 85, 88, 89, 92, 94, 95, 96, 97, 99, 101, 103, 107, 109, 111, 112, 114, 115, 116, 119, 120, 121, 122, 124, 125, 126, 129, 131, 132, 133, 138, 139, 141, 144, 145, 146, 147, 151, 153, 154, 158, 163, 164, 165, 166, 170, 175, 176, 177, 180, 185, 186, 187, 188, 189, 190, 191, 194, 195, 200, 201, 204, 205, 206, 208, 210, 211, 213, 215, 218, 219, 220, 221, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 238, 240, 241, 244, 245, 246, 248, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 267, 268, 269, 270, 271, 275, 276, 278, 279, 280, 281, 282, 285, 287, 288, 291, 292, 293, 294, 295, 296, 297, 298, 300, 303], "get": [1, 3, 4, 5, 8, 11, 12, 13, 18, 19, 21, 22, 23, 32, 34, 35, 36, 39, 40, 43, 44, 47, 48, 49, 51, 52, 57, 58, 60, 61, 63, 64, 67, 68, 69, 70, 72, 73, 74, 76, 81, 91, 93, 95, 97, 101, 104, 108, 110, 114, 116, 122, 124, 127, 134, 141, 144, 145, 153, 154, 155, 156, 158, 163, 164, 171, 175, 180, 185, 186, 187, 188, 193, 195, 196, 210, 212, 214, 215, 216, 217, 219, 221, 222, 223, 224, 225, 226, 228, 234, 235, 236, 238, 239, 242, 243, 244, 245, 246, 247, 248, 252, 253, 258, 264, 265, 266, 270, 274, 291, 294, 296, 297, 298, 301, 302, 303], "nice": [1, 4, 9, 39, 68, 80, 104, 108, 141, 155, 158, 212, 226, 236, 267, 297], "print": [1, 3, 4, 5, 7, 11, 12, 14, 15, 19, 21, 22, 26, 28, 31, 32, 34, 39, 42, 43, 44, 45, 47, 48, 50, 51, 52, 57, 59, 60, 67, 68, 69, 72, 73, 74, 76, 95, 97, 98, 101, 104, 105, 108, 109, 110, 116, 117, 124, 132, 134, 139, 141, 143, 151, 157, 163, 171, 184, 185, 189, 191, 201, 204, 208, 210, 212, 215, 216, 217, 219, 221, 222, 232, 233, 235, 236, 238, 242, 244, 251, 253, 257, 259, 264, 265, 267, 270, 274, 281, 287, 289, 292, 293, 294, 295, 296, 297, 298, 302], "tree": [1, 7, 13, 14, 18, 59, 62, 68, 110, 131, 141, 183, 186, 201, 222, 233, 235, 238, 245, 248, 250, 261, 264, 267, 293], "which": [1, 2, 3, 4, 5, 8, 9, 11, 12, 13, 14, 15, 19, 21, 22, 23, 25, 26, 28, 29, 31, 33, 34, 35, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 57, 58, 59, 60, 61, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 81, 82, 83, 84, 87, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 104, 107, 108, 110, 111, 112, 114, 116, 117, 118, 120, 121, 122, 124, 125, 126, 128, 129, 130, 131, 133, 134, 135, 136, 137, 139, 140, 141, 143, 144, 146, 149, 151, 152, 153, 154, 155, 156, 158, 159, 160, 162, 164, 165, 177, 180, 186, 187, 188, 189, 191, 195, 196, 197, 200, 201, 203, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 221, 222, 223, 224, 225, 227, 228, 229, 232, 233, 234, 235, 236, 238, 239, 241, 242, 243, 244, 245, 246, 247, 250, 252, 257, 258, 259, 260, 261, 262, 264, 265, 267, 270, 272, 275, 279, 280, 291, 292, 294, 295, 296, 297, 298, 299, 301, 302, 303], "veri": [1, 2, 3, 4, 11, 12, 13, 14, 15, 17, 18, 21, 23, 28, 49, 64, 68, 69, 72, 73, 78, 80, 86, 90, 93, 95, 98, 104, 108, 112, 124, 128, 137, 141, 145, 158, 163, 196, 209, 210, 213, 215, 216, 219, 221, 222, 223, 225, 226, 227, 233, 234, 235, 236, 238, 239, 242, 244, 245, 246, 257, 258, 259, 265, 291, 294, 297, 302], "There": [2, 3, 4, 5, 7, 8, 11, 12, 13, 14, 15, 18, 21, 22, 23, 25, 28, 31, 32, 36, 49, 50, 59, 60, 61, 62, 65, 67, 68, 69, 72, 73, 76, 92, 93, 95, 96, 97, 98, 101, 104, 108, 114, 116, 117, 120, 124, 128, 139, 151, 153, 155, 156, 164, 181, 186, 201, 206, 209, 210, 212, 216, 217, 218, 219, 221, 222, 223, 226, 227, 228, 234, 235, 236, 238, 239, 242, 244, 245, 246, 248, 251, 260, 261, 264, 265, 267, 275, 291, 292, 294, 296, 297, 301, 302], "sever": [2, 3, 4, 11, 12, 13, 14, 18, 21, 23, 28, 32, 39, 49, 53, 59, 60, 67, 68, 72, 73, 75, 76, 80, 93, 95, 108, 118, 131, 134, 135, 152, 196, 198, 212, 214, 215, 216, 219, 221, 225, 226, 227, 233, 234, 242, 246, 257, 259, 268, 281, 294, 298, 301], "packag": [2, 7, 8, 9, 11, 12, 27, 29, 33, 34, 39, 96, 109, 110, 121, 151, 158, 206, 226, 257, 276, 277, 296], "instal": [2, 5, 12, 14, 15, 25, 72, 109, 215, 216, 217, 226, 258, 265, 295, 301], "enabl": [2, 5, 9, 14, 23, 39, 68, 95, 96, 108, 117, 141, 143, 191, 201, 206, 226, 242, 246, 257, 262, 265, 298, 301, 302], "certain": [2, 5, 12, 14, 23, 37, 39, 46, 48, 49, 51, 59, 66, 68, 72, 76, 84, 93, 95, 108, 110, 139, 155, 201, 202, 213, 216, 219, 221, 226, 227, 233, 236, 238, 239, 242, 244, 245, 246, 248, 259, 260, 265, 270, 273, 279, 302], "most": [2, 3, 4, 5, 7, 11, 12, 13, 14, 15, 18, 19, 21, 22, 23, 28, 30, 32, 33, 34, 35, 36, 37, 39, 42, 43, 44, 47, 48, 49, 50, 59, 60, 67, 68, 69, 72, 74, 78, 80, 95, 98, 99, 100, 101, 102, 104, 106, 107, 108, 109, 110, 124, 128, 133, 134, 141, 149, 152, 155, 156, 159, 193, 195, 200, 201, 205, 211, 212, 213, 214, 215, 216, 217, 219, 221, 222, 223, 224, 225, 226, 233, 234, 236, 239, 242, 243, 244, 245, 246, 255, 258, 259, 260, 261, 262, 264, 265, 267, 273, 275, 291, 294, 296, 297, 298, 300, 301, 302], "contributor": [2, 5, 6, 7, 8, 11, 13, 23], "need": [2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41, 43, 44, 47, 48, 49, 53, 59, 60, 64, 66, 67, 68, 69, 70, 73, 74, 76, 79, 83, 84, 91, 92, 93, 95, 96, 98, 99, 104, 108, 109, 110, 114, 116, 117, 120, 124, 128, 129, 134, 136, 139, 140, 141, 143, 144, 145, 146, 148, 149, 150, 152, 153, 154, 155, 156, 159, 160, 171, 175, 183, 189, 194, 200, 201, 206, 209, 210, 212, 213, 214, 215, 216, 217, 219, 221, 222, 223, 225, 226, 233, 234, 236, 238, 239, 241, 242, 244, 245, 246, 250, 251, 252, 253, 255, 258, 259, 260, 261, 262, 264, 267, 270, 274, 276, 277, 280, 291, 292, 294, 297, 298, 300, 302], "ani": [2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 17, 18, 21, 22, 23, 28, 30, 31, 32, 35, 39, 45, 46, 47, 48, 49, 50, 57, 58, 59, 60, 66, 67, 68, 69, 70, 72, 73, 74, 76, 78, 79, 80, 83, 84, 85, 93, 95, 96, 98, 99, 102, 104, 105, 108, 110, 111, 112, 114, 116, 117, 120, 124, 126, 129, 130, 133, 134, 135, 136, 137, 139, 141, 151, 154, 155, 156, 159, 160, 164, 177, 180, 185, 186, 189, 191, 193, 196, 201, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 221, 222, 223, 226, 227, 232, 233, 234, 235, 236, 238, 239, 242, 243, 244, 246, 248, 251, 252, 257, 258, 260, 261, 262, 264, 265, 270, 274, 275, 276, 277, 279, 280, 291, 292, 294, 297, 298, 301, 302, 303], "mention": [2, 3, 4, 23, 28, 35, 59, 93, 95, 110, 118, 124, 143, 159, 160, 207, 236, 239, 242, 246, 274, 275, 276, 277, 298], "below": [2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 15, 21, 23, 26, 28, 32, 35, 36, 37, 39, 47, 48, 49, 58, 59, 60, 68, 69, 73, 75, 76, 77, 78, 84, 85, 91, 93, 95, 99, 104, 107, 108, 110, 114, 116, 117, 118, 124, 129, 130, 133, 134, 135, 136, 137, 139, 141, 143, 145, 146, 147, 152, 153, 154, 155, 156, 158, 185, 191, 196, 201, 210, 211, 212, 213, 215, 222, 226, 227, 229, 235, 238, 239, 241, 242, 243, 244, 245, 246, 257, 259, 264, 265, 267, 275, 277, 280, 281, 298, 302], "except": [2, 3, 4, 11, 13, 14, 15, 19, 21, 22, 23, 33, 37, 47, 49, 59, 60, 68, 69, 72, 73, 74, 76, 93, 95, 108, 149, 195, 197, 211, 213, 215, 216, 217, 221, 222, 223, 224, 226, 235, 238, 239, 242, 243, 245, 250, 255, 257, 259, 260, 263, 264, 274, 277, 289, 291, 294, 297], "unless": [2, 4, 11, 12, 14, 21, 23, 25, 42, 44, 47, 49, 59, 67, 68, 69, 73, 76, 83, 84, 93, 104, 107, 164, 209, 210, 214, 215, 216, 221, 222, 226, 231, 234, 235, 242, 244, 257, 261, 264, 265, 267, 270, 279, 292, 298, 302], "thei": [2, 3, 4, 5, 11, 12, 13, 14, 15, 17, 21, 22, 23, 28, 33, 35, 36, 37, 39, 45, 48, 49, 50, 56, 58, 59, 60, 66, 67, 68, 69, 70, 73, 74, 76, 78, 81, 82, 83, 84, 85, 90, 93, 95, 96, 98, 99, 101, 102, 104, 107, 108, 110, 111, 112, 116, 128, 129, 133, 134, 136, 139, 140, 141, 143, 149, 151, 153, 154, 155, 158, 159, 165, 170, 175, 180, 183, 188, 193, 194, 196, 197, 201, 205, 206, 207, 210, 211, 212, 213, 214, 215, 216, 217, 219, 221, 222, 223, 224, 226, 227, 232, 233, 235, 236, 238, 239, 242, 243, 244, 245, 246, 247, 248, 252, 255, 257, 259, 261, 264, 265, 267, 270, 277, 279, 292, 294, 295, 296, 297, 298, 302], "intend": [2, 3, 4, 7, 9, 11, 12, 13, 17, 21, 68, 69, 79, 88, 93, 108, 110, 115, 131, 136, 186, 215, 216, 217, 221, 224, 239, 242, 243, 255, 260, 267, 291], "part": [2, 3, 4, 5, 7, 11, 12, 13, 14, 21, 22, 23, 28, 41, 46, 59, 60, 67, 68, 69, 73, 74, 76, 84, 91, 93, 95, 98, 99, 101, 108, 111, 114, 124, 128, 130, 133, 134, 139, 141, 143, 149, 151, 152, 156, 158, 175, 187, 191, 200, 210, 214, 215, 216, 217, 219, 221, 222, 223, 225, 226, 227, 234, 236, 238, 239, 242, 244, 257, 259, 261, 264, 292, 297, 302], "those": [2, 4, 11, 12, 13, 14, 15, 17, 21, 22, 28, 32, 36, 37, 40, 45, 48, 49, 50, 51, 59, 60, 66, 67, 68, 69, 72, 81, 82, 93, 95, 98, 104, 107, 108, 115, 120, 128, 133, 134, 139, 143, 149, 152, 164, 188, 200, 203, 206, 209, 210, 212, 215, 216, 217, 219, 221, 222, 224, 225, 226, 232, 234, 238, 242, 243, 244, 245, 246, 252, 255, 257, 261, 264, 270, 273, 294, 296, 302], "everi": [2, 3, 4, 7, 11, 12, 14, 21, 23, 28, 32, 38, 43, 44, 45, 48, 54, 56, 59, 60, 68, 69, 83, 95, 97, 99, 104, 108, 124, 156, 195, 207, 209, 210, 212, 213, 214, 216, 217, 219, 221, 226, 231, 234, 236, 238, 239, 242, 245, 246, 248, 274, 277, 279, 295, 297, 298, 302], "conda": [2, 8, 9, 39, 110], "via": [2, 8, 9, 14, 19, 23, 33, 37, 39, 42, 43, 44, 59, 60, 68, 73, 76, 93, 95, 98, 104, 108, 109, 110, 116, 137, 201, 211, 213, 217, 219, 221, 222, 225, 226, 245, 255, 258, 259, 270, 279, 297], "forg": [2, 8, 9, 110], "pip": [2, 8, 9, 12, 39, 110], "doe": [2, 4, 5, 7, 9, 11, 12, 13, 14, 18, 21, 22, 23, 28, 29, 35, 36, 37, 38, 39, 40, 43, 44, 47, 48, 49, 50, 59, 60, 64, 66, 67, 68, 69, 70, 72, 74, 76, 78, 79, 82, 84, 93, 95, 98, 99, 104, 107, 108, 110, 126, 128, 131, 134, 135, 139, 141, 143, 148, 152, 156, 171, 175, 181, 185, 187, 190, 209, 210, 212, 214, 215, 216, 217, 219, 221, 222, 223, 226, 233, 234, 235, 236, 238, 239, 241, 242, 244, 247, 251, 252, 255, 257, 259, 261, 264, 265, 267, 270, 272, 275, 291, 292, 294, 297, 298, 301, 302, 303], "themselv": [2, 5, 12, 13, 23, 45, 48, 60, 64, 66, 68, 95, 108, 151, 152, 216, 217, 221, 232, 246, 252, 261, 264, 267, 302], "incomplet": [2, 4, 5, 68, 73, 76, 110, 214, 216, 222, 226, 228, 244, 245], "main": [2, 4, 5, 7, 9, 11, 13, 15, 34, 44, 45, 49, 68, 74, 93, 99, 104, 107, 141, 149, 189, 206, 210, 212, 213, 215, 217, 226, 233, 242, 245, 251, 258, 302, 303], "webpag": [2, 5], "more": [2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 25, 28, 30, 31, 32, 33, 34, 36, 37, 39, 40, 41, 44, 45, 47, 48, 49, 50, 51, 54, 58, 59, 60, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 80, 81, 82, 83, 84, 85, 86, 90, 93, 95, 98, 99, 101, 102, 104, 105, 107, 108, 109, 110, 112, 116, 122, 124, 128, 133, 134, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 154, 155, 156, 158, 160, 163, 175, 179, 180, 185, 188, 189, 190, 191, 196, 200, 201, 205, 206, 210, 211, 212, 213, 214, 215, 216, 217, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 235, 236, 238, 239, 242, 243, 244, 245, 246, 257, 259, 260, 261, 264, 265, 267, 270, 274, 278, 285, 287, 291, 292, 294, 295, 297, 298, 300, 301, 302, 303], "complet": [2, 3, 4, 9, 11, 12, 13, 14, 15, 21, 32, 35, 44, 49, 68, 69, 70, 72, 74, 75, 76, 84, 93, 95, 104, 108, 110, 128, 134, 135, 145, 151, 158, 177, 180, 181, 210, 215, 219, 221, 222, 223, 227, 233, 238, 239, 242, 245, 246, 257, 259, 267, 296, 297, 302], "io": [2, 5, 96, 226, 265], "ha": [2, 3, 4, 5, 7, 11, 12, 13, 14, 15, 19, 21, 22, 23, 28, 29, 30, 32, 33, 34, 35, 36, 37, 45, 47, 48, 49, 50, 51, 52, 57, 58, 59, 60, 62, 64, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 80, 81, 83, 84, 85, 91, 93, 95, 97, 98, 99, 101, 104, 105, 107, 108, 109, 110, 111, 114, 115, 116, 117, 120, 124, 125, 130, 133, 134, 139, 141, 143, 145, 151, 156, 158, 164, 165, 175, 176, 185, 188, 193, 196, 200, 201, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 231, 233, 234, 236, 238, 239, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 257, 258, 259, 260, 261, 262, 264, 265, 267, 270, 272, 274, 275, 277, 279, 280, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303], "one": [2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 17, 19, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 38, 40, 41, 44, 45, 47, 48, 49, 51, 52, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 74, 76, 78, 79, 80, 81, 82, 84, 85, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 103, 104, 107, 108, 109, 110, 111, 114, 116, 117, 118, 120, 121, 122, 124, 125, 128, 129, 130, 133, 134, 136, 137, 139, 140, 141, 142, 145, 155, 156, 158, 160, 163, 164, 165, 171, 176, 185, 189, 191, 193, 194, 195, 196, 199, 200, 201, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 221, 222, 223, 224, 225, 226, 227, 233, 234, 235, 236, 238, 239, 242, 243, 244, 245, 246, 247, 250, 252, 253, 257, 258, 259, 261, 264, 265, 267, 270, 275, 277, 279, 290, 291, 292, 294, 296, 297, 298, 300, 301, 302], "mpmath": [2, 8, 12, 14, 23, 33, 34, 49, 73, 76, 104, 109, 158, 216, 217, 226, 234, 244, 260, 265], "arbitrari": [2, 4, 13, 14, 15, 21, 23, 28, 32, 34, 36, 37, 47, 53, 60, 61, 67, 68, 69, 72, 73, 76, 79, 80, 82, 98, 99, 104, 117, 135, 152, 156, 177, 180, 210, 212, 213, 216, 217, 219, 221, 223, 238, 242, 243, 244, 252, 262, 265, 270, 272, 291, 292, 297, 302, 303], "precis": [2, 3, 4, 14, 15, 21, 22, 23, 28, 32, 49, 59, 68, 71, 72, 73, 76, 84, 95, 104, 108, 122, 156, 211, 213, 216, 217, 221, 222, 223, 226, 233, 238, 239, 244, 245, 258, 259, 267, 291, 302], "arithmet": [2, 12, 49, 68, 69, 72, 99, 104, 108, 180, 187, 211, 212, 213, 215, 216, 217, 219, 220, 224, 227], "under": [2, 3, 4, 8, 11, 12, 14, 15, 21, 22, 43, 44, 46, 47, 49, 50, 58, 59, 64, 66, 76, 86, 93, 95, 97, 98, 104, 108, 110, 112, 116, 117, 160, 186, 211, 213, 214, 221, 222, 226, 233, 234, 236, 239, 242, 244, 245, 246, 252, 255, 296, 302], "hood": [2, 11, 14], "whenev": [2, 3, 12, 13, 14, 15, 23, 66, 93, 95, 104, 198, 212, 213, 214, 215, 217, 228, 233, 236, 246, 292, 294, 297], "calcul": [2, 15, 19, 21, 34, 35, 41, 47, 50, 60, 66, 68, 69, 70, 71, 72, 74, 76, 78, 80, 81, 82, 84, 85, 95, 99, 101, 104, 108, 116, 117, 126, 128, 129, 130, 133, 134, 139, 140, 143, 144, 145, 160, 163, 164, 167, 170, 186, 187, 188, 189, 191, 192, 200, 201, 202, 203, 205, 207, 209, 210, 211, 212, 213, 215, 216, 217, 219, 221, 222, 223, 228, 233, 242, 246, 250, 258, 259, 265, 270, 273, 277, 279, 298, 301], "float": [2, 12, 14, 21, 23, 30, 49, 59, 68, 74, 76, 83, 85, 95, 96, 99, 104, 108, 110, 111, 112, 114, 122, 124, 158, 164, 206, 212, 215, 216, 217, 219, 222, 226, 238, 244, 246, 257, 265, 267, 291, 294], "point": [2, 3, 4, 5, 12, 14, 15, 19, 21, 32, 34, 35, 39, 41, 47, 49, 50, 59, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 87, 90, 91, 92, 93, 95, 104, 108, 110, 112, 114, 116, 117, 118, 120, 122, 124, 129, 130, 133, 134, 135, 136, 137, 139, 140, 141, 143, 145, 147, 148, 149, 150, 152, 153, 154, 155, 156, 158, 159, 171, 193, 196, 202, 205, 207, 210, 212, 213, 215, 216, 217, 219, 221, 222, 226, 228, 232, 233, 234, 242, 244, 245, 246, 258, 261, 264, 265, 267, 270, 273, 275, 276, 277, 279, 280, 288, 291, 292, 294, 297], "valu": [2, 3, 4, 5, 12, 13, 14, 15, 19, 21, 23, 26, 28, 31, 32, 33, 34, 35, 36, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 57, 59, 60, 64, 67, 68, 69, 70, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 90, 91, 93, 95, 96, 98, 99, 100, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 116, 117, 118, 120, 122, 124, 126, 129, 130, 133, 134, 135, 136, 139, 140, 141, 143, 155, 158, 160, 164, 167, 170, 175, 177, 180, 183, 185, 186, 187, 188, 191, 192, 194, 196, 201, 202, 205, 207, 209, 210, 211, 212, 214, 215, 216, 217, 219, 221, 222, 223, 224, 226, 227, 232, 233, 234, 235, 238, 239, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 257, 259, 260, 264, 265, 267, 273, 275, 277, 280, 292, 294, 297], "g": [2, 3, 5, 8, 9, 11, 12, 13, 15, 21, 22, 23, 26, 34, 35, 37, 47, 48, 49, 50, 53, 56, 58, 59, 60, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 80, 84, 85, 86, 91, 94, 95, 97, 98, 99, 104, 108, 110, 111, 114, 115, 116, 120, 124, 125, 129, 130, 133, 135, 136, 137, 139, 141, 143, 145, 146, 148, 149, 150, 155, 156, 158, 159, 171, 175, 180, 186, 188, 189, 191, 194, 196, 197, 201, 207, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 238, 239, 242, 243, 244, 245, 246, 247, 250, 251, 252, 257, 258, 259, 260, 262, 264, 265, 266, 267, 279, 282, 292, 297, 301, 302, 303], "evalf": [2, 4, 14, 15, 21, 28, 34, 37, 49, 67, 72, 73, 74, 76, 87, 90, 91, 99, 104, 110, 141, 143, 158, 173, 217, 222, 226, 233, 234, 238, 246, 258, 265, 293], "cannot": [2, 3, 4, 5, 12, 13, 14, 15, 18, 22, 23, 28, 31, 34, 39, 42, 43, 44, 45, 46, 47, 49, 60, 65, 67, 68, 70, 72, 74, 78, 80, 81, 83, 85, 90, 95, 97, 100, 102, 104, 106, 108, 110, 111, 124, 129, 137, 140, 186, 194, 196, 209, 210, 212, 215, 217, 219, 221, 222, 223, 226, 233, 234, 238, 239, 241, 242, 244, 245, 246, 247, 255, 257, 258, 259, 264, 270, 272, 296, 297, 298, 302, 303], "without": [2, 3, 4, 5, 11, 12, 13, 14, 15, 21, 23, 25, 26, 39, 43, 45, 46, 49, 67, 68, 69, 70, 72, 76, 93, 95, 96, 99, 101, 104, 124, 125, 129, 133, 137, 141, 147, 149, 154, 155, 191, 195, 196, 200, 201, 202, 209, 212, 215, 216, 219, 222, 226, 228, 234, 235, 236, 238, 239, 242, 243, 244, 245, 246, 248, 251, 252, 255, 257, 258, 259, 262, 264, 265, 267, 273, 276, 298, 302], "fail": [2, 3, 4, 5, 8, 11, 13, 21, 22, 23, 28, 49, 59, 60, 64, 67, 68, 72, 74, 92, 93, 95, 96, 104, 105, 108, 110, 143, 181, 186, 206, 212, 215, 216, 217, 219, 221, 222, 226, 233, 236, 242, 244, 246, 255, 257, 264, 265, 298], "import": [2, 3, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 26, 28, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 112, 114, 115, 116, 117, 118, 120, 122, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 136, 137, 139, 140, 141, 143, 144, 145, 146, 148, 149, 150, 152, 153, 154, 155, 156, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 183, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 200, 201, 202, 203, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 255, 257, 258, 259, 260, 261, 262, 264, 265, 267, 268, 270, 272, 273, 274, 275, 276, 277, 280, 291, 292, 294, 296, 297, 298, 300, 301, 302, 303], "If": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 25, 28, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 57, 59, 60, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 90, 91, 93, 95, 96, 97, 98, 99, 101, 104, 105, 107, 108, 109, 110, 111, 112, 114, 116, 122, 124, 125, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 139, 140, 141, 142, 153, 154, 155, 156, 158, 159, 164, 168, 172, 175, 181, 185, 186, 187, 188, 189, 191, 195, 199, 200, 201, 202, 203, 205, 206, 207, 210, 212, 213, 214, 215, 216, 217, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 238, 239, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 255, 257, 258, 259, 260, 261, 262, 264, 265, 267, 270, 273, 275, 277, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303], "error": [2, 3, 4, 5, 8, 11, 12, 13, 17, 21, 22, 30, 31, 32, 33, 34, 35, 37, 40, 47, 49, 57, 60, 67, 68, 69, 74, 78, 83, 93, 95, 104, 107, 108, 110, 134, 137, 139, 141, 210, 211, 214, 215, 216, 217, 219, 223, 226, 228, 234, 242, 243, 244, 245, 246, 257, 258, 259, 262, 264, 267, 270, 291], "importerror": 2, "extern": [2, 39, 68, 96, 110, 120, 122, 143, 151, 206, 216, 217, 227, 234, 238, 246, 257, 258], "doc": [2, 3, 4, 5, 7, 11, 12, 15, 25, 38, 49, 59, 67, 68, 84, 96, 193, 216, 218, 239, 242, 257, 258, 260, 262, 264, 270, 275, 288], "latest": [2, 9, 12, 39, 48, 260, 262, 265], "html": [2, 4, 5, 8, 11, 12, 45, 49, 52, 60, 61, 62, 68, 69, 71, 73, 74, 76, 78, 84, 85, 95, 96, 104, 108, 122, 220, 226, 229, 231, 234, 235, 239, 242, 246, 258, 260, 262, 264, 265, 298], "inform": [2, 3, 4, 5, 7, 9, 11, 14, 15, 18, 21, 22, 25, 28, 37, 38, 44, 45, 48, 49, 50, 54, 59, 60, 66, 68, 69, 73, 76, 80, 93, 95, 97, 101, 104, 109, 110, 117, 130, 131, 133, 134, 136, 139, 141, 143, 151, 152, 153, 155, 156, 158, 159, 186, 191, 196, 201, 206, 210, 212, 215, 216, 221, 222, 226, 227, 233, 236, 238, 239, 244, 245, 246, 250, 251, 252, 257, 258, 259, 260, 261, 270, 275, 277, 302], "mean": [2, 3, 4, 5, 11, 12, 13, 14, 15, 21, 22, 23, 28, 36, 45, 50, 60, 67, 68, 69, 70, 86, 93, 95, 96, 98, 99, 102, 104, 108, 116, 128, 129, 152, 191, 193, 196, 201, 206, 209, 212, 213, 214, 216, 219, 221, 225, 226, 236, 238, 239, 241, 242, 244, 245, 246, 247, 248, 250, 251, 257, 264, 275, 291, 292, 294, 296, 297, 298, 302, 303], "did": [2, 5, 11, 22, 68, 95, 108, 128, 148, 196, 219, 223, 234, 244, 255, 265, 294, 296, 302], "correctli": [2, 3, 4, 5, 8, 11, 12, 13, 22, 23, 47, 72, 93, 96, 104, 110, 115, 129, 137, 141, 143, 155, 226, 233, 239, 242], "explain": [2, 3, 4, 5, 7, 12, 21, 28, 37, 48, 64, 68, 76, 86, 91, 137, 213, 216, 219, 221, 223, 233], "how": [2, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 28, 29, 48, 49, 51, 59, 60, 67, 68, 74, 75, 76, 80, 91, 95, 98, 99, 101, 104, 108, 110, 116, 128, 129, 133, 134, 137, 141, 142, 148, 153, 154, 156, 158, 162, 163, 179, 183, 186, 187, 188, 193, 194, 201, 209, 212, 213, 216, 217, 219, 221, 225, 226, 229, 233, 234, 236, 238, 239, 242, 243, 244, 246, 252, 257, 258, 259, 260, 262, 264, 265, 267, 275, 292, 294, 296, 297, 298, 299, 301, 302], "method": [2, 3, 4, 5, 8, 11, 12, 14, 15, 20, 21, 28, 30, 31, 32, 34, 35, 36, 41, 43, 44, 45, 47, 48, 49, 50, 51, 52, 59, 60, 61, 67, 68, 69, 70, 71, 72, 74, 75, 76, 79, 80, 81, 82, 84, 87, 90, 92, 93, 95, 97, 99, 100, 101, 104, 108, 109, 110, 111, 112, 114, 116, 117, 118, 119, 120, 121, 124, 125, 128, 129, 132, 133, 135, 136, 137, 139, 140, 141, 144, 146, 147, 151, 152, 156, 157, 158, 165, 168, 170, 172, 180, 181, 186, 188, 191, 193, 195, 198, 199, 200, 201, 203, 207, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 227, 228, 229, 231, 232, 233, 234, 238, 239, 242, 244, 246, 247, 249, 251, 252, 253, 257, 259, 261, 264, 265, 270, 274, 277, 280, 281, 285, 287, 291, 292, 293, 294, 297, 302], "ones": [2, 3, 13, 23, 39, 49, 59, 64, 68, 93, 95, 98, 99, 101, 104, 107, 108, 114, 141, 164, 185, 191, 195, 215, 219, 229, 239, 242, 247, 253, 259, 267, 270, 275, 298, 301], "guid": [2, 6, 7, 8, 9, 11, 14, 16, 23, 33, 39, 48, 68, 75, 141, 155, 226, 239, 241, 242, 244, 245, 252, 295, 299, 300, 303], "automat": [2, 3, 4, 5, 8, 11, 12, 13, 14, 15, 17, 21, 31, 32, 35, 37, 48, 49, 50, 60, 68, 70, 71, 72, 73, 74, 76, 81, 83, 87, 93, 96, 98, 108, 110, 112, 114, 116, 134, 139, 141, 143, 149, 177, 179, 180, 189, 191, 195, 205, 209, 212, 213, 215, 216, 217, 221, 222, 223, 226, 229, 232, 233, 235, 236, 238, 239, 242, 244, 245, 251, 252, 257, 258, 259, 262, 265, 275, 280, 292, 294, 296, 297, 301, 302, 303], "typic": [2, 3, 12, 13, 14, 23, 64, 74, 93, 108, 115, 124, 130, 136, 142, 156, 210, 212, 214, 219, 222, 223, 236, 258, 259, 275], "manual": [2, 3, 5, 8, 12, 13, 14, 23, 31, 49, 50, 59, 72, 78, 95, 96, 110, 124, 136, 139, 141, 144, 155, 159, 212, 219, 226, 242, 244, 245, 260, 292, 302], "actual": [2, 3, 4, 5, 8, 9, 11, 12, 14, 15, 19, 21, 22, 23, 26, 48, 49, 50, 57, 59, 66, 68, 69, 76, 80, 93, 95, 97, 101, 104, 108, 112, 114, 124, 128, 129, 137, 140, 141, 143, 153, 154, 155, 206, 212, 213, 215, 216, 221, 226, 234, 236, 238, 239, 242, 245, 253, 257, 258, 261, 262, 264, 265, 296], "directli": [2, 3, 4, 11, 12, 13, 14, 15, 19, 21, 22, 23, 28, 39, 43, 44, 47, 48, 49, 59, 67, 68, 70, 74, 79, 99, 101, 104, 108, 110, 111, 129, 137, 139, 140, 141, 174, 177, 189, 194, 201, 205, 212, 213, 215, 216, 217, 221, 222, 234, 235, 236, 238, 239, 242, 243, 244, 245, 246, 257, 258, 259, 260, 261, 262, 292, 303], "git": [2, 7, 10, 11, 12], "repositori": [2, 5, 9, 39, 239], "vast": [2, 37, 95, 218], "major": [2, 3, 5, 8, 13, 28, 37, 78, 128, 251, 296, 302], "them": [2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 18, 19, 21, 22, 23, 28, 31, 32, 33, 35, 37, 40, 43, 45, 48, 49, 57, 59, 60, 67, 68, 69, 70, 72, 73, 76, 79, 84, 86, 88, 90, 91, 93, 97, 98, 101, 104, 107, 108, 109, 111, 114, 116, 128, 134, 136, 139, 141, 143, 145, 146, 151, 153, 155, 158, 164, 168, 184, 185, 191, 193, 196, 199, 200, 201, 207, 209, 210, 213, 214, 215, 216, 217, 219, 221, 222, 223, 225, 226, 227, 233, 234, 235, 236, 238, 239, 242, 244, 245, 247, 248, 257, 259, 261, 264, 273, 291, 292, 294, 296, 297, 302], "few": [2, 3, 8, 12, 13, 14, 21, 31, 37, 45, 58, 60, 68, 69, 95, 96, 108, 109, 143, 151, 194, 200, 206, 209, 210, 213, 221, 226, 234, 235, 236, 242, 244, 245, 246, 259, 264, 302], "wrap": [2, 3, 4, 11, 12, 13, 42, 43, 44, 45, 49, 57, 68, 74, 96, 109, 110, 132, 137, 151, 206, 210, 212, 215, 216, 219, 226, 229, 245, 251, 258, 262, 265, 267, 287, 297], "addition": [2, 4, 11, 13, 68, 153, 189, 210, 219, 226, 246, 255, 262, 274], "some": [2, 3, 4, 7, 8, 9, 11, 12, 14, 15, 19, 21, 22, 23, 26, 28, 31, 32, 33, 34, 36, 37, 39, 40, 41, 45, 48, 49, 50, 51, 56, 59, 60, 66, 67, 68, 69, 72, 73, 74, 76, 78, 79, 80, 84, 93, 95, 97, 98, 99, 101, 104, 108, 109, 110, 122, 125, 128, 130, 133, 136, 139, 141, 142, 143, 144, 145, 146, 152, 153, 155, 159, 171, 176, 180, 188, 191, 195, 196, 197, 200, 202, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 221, 222, 223, 226, 228, 232, 233, 234, 235, 236, 238, 239, 241, 242, 243, 244, 246, 252, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 270, 272, 273, 275, 277, 281, 291, 292, 294, 296, 297, 298, 300, 301, 302], "skip": [2, 3, 4, 8, 15, 48, 52, 68, 99, 104, 108, 201, 221, 225, 226, 228, 242, 244, 255, 257, 292, 300, 301], "action": [2, 5, 8, 11, 59, 97, 114, 129, 136, 183, 186, 196, 222, 238, 245], "ci": [2, 5, 9, 11, 12, 76, 93, 226, 301], "pull": [2, 3, 4, 5, 8, 9, 12, 13, 23, 39, 49, 68, 73, 76, 129, 190, 227, 238, 242, 245, 298, 302], "request": [2, 3, 4, 5, 8, 9, 12, 13, 21, 28, 39, 47, 68, 72, 84, 93, 108, 141, 191, 212, 219, 222, 250, 258], "mai": [2, 3, 4, 8, 9, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 45, 47, 48, 49, 50, 51, 59, 60, 61, 67, 68, 69, 70, 72, 73, 74, 76, 78, 80, 81, 83, 84, 85, 93, 95, 96, 98, 99, 100, 104, 105, 107, 108, 110, 120, 131, 134, 135, 139, 141, 145, 151, 155, 177, 186, 191, 192, 193, 195, 198, 201, 205, 207, 209, 212, 213, 214, 215, 217, 219, 221, 225, 226, 227, 234, 235, 236, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 250, 252, 255, 257, 258, 259, 260, 261, 262, 264, 265, 267, 277, 279, 291, 292, 294, 297, 298, 302, 303], "wish": [2, 4, 11, 15, 23, 35, 39, 49, 68, 69, 72, 93, 108, 186, 200, 210, 261, 265, 292, 296, 298, 303], "local": [2, 11, 12, 25, 40, 42, 43, 44, 68, 70, 93, 110, 148, 150, 203, 213, 219, 244, 257], "improv": [2, 3, 7, 11, 12, 13, 22, 23, 68, 93, 139, 212, 216, 219, 220, 222, 223, 225, 227, 242, 245, 251, 292, 298], "perform": [2, 11, 12, 13, 14, 15, 18, 19, 21, 23, 46, 48, 49, 50, 59, 60, 63, 67, 68, 69, 71, 72, 74, 81, 85, 92, 95, 102, 104, 108, 109, 131, 134, 143, 145, 151, 155, 156, 158, 175, 176, 185, 188, 191, 207, 210, 214, 215, 216, 219, 221, 222, 227, 228, 229, 233, 238, 239, 242, 244, 245, 246, 247, 258, 264, 270, 272, 274, 277, 291, 292, 296, 297, 302], "gmpy2": [2, 216, 217], "wrapper": [2, 13, 14, 23, 43, 45, 49, 60, 68, 76, 104, 155, 203, 206, 212, 215, 216, 219, 226, 233, 242, 245, 246, 258, 262, 264], "gmp": 2, "multipl": [2, 3, 4, 11, 12, 13, 14, 15, 17, 21, 23, 26, 30, 32, 36, 37, 41, 43, 44, 45, 47, 48, 49, 50, 57, 59, 60, 64, 67, 68, 69, 73, 74, 76, 78, 83, 86, 88, 93, 95, 97, 98, 99, 101, 104, 105, 108, 110, 118, 120, 121, 124, 128, 137, 143, 151, 158, 159, 175, 176, 177, 181, 188, 190, 193, 196, 197, 198, 201, 205, 209, 212, 213, 214, 215, 216, 217, 219, 220, 222, 223, 226, 231, 232, 234, 235, 236, 238, 239, 242, 243, 244, 245, 246, 247, 250, 252, 255, 259, 260, 261, 262, 264, 265, 267, 270, 275, 291, 292, 294, 295, 297, 298, 303], "larg": [2, 3, 4, 7, 11, 12, 15, 21, 28, 33, 59, 60, 68, 69, 78, 93, 95, 107, 108, 128, 135, 155, 158, 171, 196, 200, 211, 215, 216, 217, 219, 222, 225, 226, 227, 233, 236, 238, 244, 246, 251, 258, 265, 267, 273, 291, 296, 302], "integ": [2, 4, 5, 12, 13, 14, 15, 21, 23, 30, 31, 32, 42, 43, 44, 45, 47, 49, 50, 57, 59, 60, 61, 62, 64, 67, 68, 69, 70, 71, 72, 73, 76, 78, 81, 92, 93, 95, 96, 97, 98, 99, 101, 104, 105, 108, 110, 114, 116, 118, 124, 126, 133, 180, 185, 187, 188, 189, 191, 193, 201, 203, 206, 211, 212, 213, 214, 215, 217, 219, 220, 221, 222, 223, 225, 226, 228, 231, 232, 233, 234, 235, 236, 238, 239, 242, 244, 245, 246, 250, 251, 252, 258, 259, 261, 264, 267, 292, 294, 297, 301, 302], "faster": [2, 11, 13, 21, 28, 33, 34, 49, 53, 68, 76, 99, 108, 109, 128, 131, 134, 135, 155, 215, 216, 217, 219, 221, 222, 223, 227, 229, 233, 238, 239, 242, 243, 245, 258, 261], "than": [2, 3, 4, 5, 8, 9, 11, 12, 13, 14, 15, 17, 19, 20, 21, 22, 23, 28, 30, 32, 33, 34, 35, 36, 37, 40, 41, 45, 49, 50, 51, 53, 59, 60, 61, 67, 68, 69, 72, 73, 74, 76, 77, 82, 83, 84, 86, 90, 93, 95, 97, 98, 99, 101, 104, 105, 107, 108, 109, 110, 114, 120, 122, 124, 128, 129, 134, 139, 141, 145, 148, 165, 171, 185, 188, 189, 191, 200, 210, 211, 214, 215, 216, 217, 219, 222, 223, 224, 226, 229, 233, 234, 235, 236, 238, 239, 241, 242, 243, 244, 245, 246, 253, 258, 259, 261, 264, 265, 267, 291, 292, 294, 295, 296, 297, 298, 300, 302], "int": [2, 4, 5, 12, 13, 14, 15, 21, 22, 23, 41, 47, 49, 60, 68, 69, 70, 73, 74, 76, 77, 84, 93, 95, 96, 98, 99, 104, 105, 108, 110, 112, 114, 122, 124, 133, 171, 175, 176, 185, 201, 203, 205, 206, 211, 212, 216, 217, 221, 222, 223, 226, 228, 229, 231, 242, 243, 246, 258, 262, 264, 265, 267, 294, 296, 297, 301, 302], "core": [2, 3, 4, 7, 11, 12, 14, 15, 18, 21, 22, 23, 30, 45, 47, 49, 59, 69, 74, 75, 77, 85, 99, 108, 110, 189, 190, 214, 215, 216, 217, 218, 219, 221, 222, 223, 226, 233, 234, 238, 239, 242, 246, 256, 257, 258, 264, 265, 268, 281, 282, 294, 297], "oper": [2, 4, 9, 14, 21, 22, 23, 33, 34, 35, 37, 41, 45, 49, 59, 60, 61, 67, 68, 69, 70, 71, 72, 74, 76, 78, 86, 88, 91, 93, 98, 99, 101, 108, 110, 112, 124, 125, 128, 134, 135, 145, 149, 155, 156, 158, 163, 167, 168, 172, 174, 175, 176, 177, 182, 183, 186, 188, 189, 190, 191, 201, 203, 208, 213, 214, 215, 216, 217, 219, 221, 222, 223, 226, 229, 231, 234, 235, 238, 241, 242, 244, 245, 248, 249, 250, 251, 257, 258, 261, 264, 265, 270, 281, 285, 287, 288, 293, 294, 295, 297, 302], "poli": [2, 14, 28, 51, 67, 68, 69, 73, 74, 76, 77, 84, 90, 95, 99, 101, 104, 108, 158, 213, 214, 218, 219, 221, 222, 223, 225, 228, 241, 242, 244, 245, 257, 288], "refer": [2, 3, 5, 11, 12, 13, 14, 15, 19, 22, 23, 24, 28, 30, 31, 32, 33, 34, 36, 37, 39, 43, 44, 45, 47, 49, 52, 54, 56, 57, 59, 60, 61, 62, 66, 69, 71, 73, 74, 76, 78, 83, 84, 85, 90, 96, 97, 98, 99, 105, 109, 111, 112, 114, 115, 116, 122, 124, 125, 127, 129, 130, 133, 134, 135, 136, 137, 139, 141, 143, 151, 153, 156, 158, 159, 160, 162, 164, 168, 170, 172, 173, 174, 177, 179, 180, 188, 189, 191, 200, 201, 202, 203, 205, 207, 209, 215, 216, 218, 226, 228, 229, 231, 234, 238, 241, 242, 243, 244, 246, 252, 261, 264, 265, 267, 270, 274, 275, 279, 287, 288, 294, 298, 299, 302, 303], "domain": [2, 4, 11, 13, 14, 19, 23, 26, 28, 33, 47, 48, 68, 69, 71, 73, 74, 76, 87, 89, 90, 93, 95, 101, 104, 105, 108, 121, 124, 141, 158, 212, 213, 215, 218, 219, 221, 223, 224, 241, 242, 244, 246, 288, 298, 303], "No": [2, 4, 5, 11, 15, 37, 48, 68, 76, 83, 98, 108, 116, 125, 141, 186, 212, 215, 222, 228, 229, 238, 239, 244, 245, 246, 251, 255, 261, 262, 264, 291, 303], "mani": [2, 3, 4, 7, 12, 14, 15, 17, 19, 21, 22, 23, 28, 29, 30, 32, 34, 35, 37, 39, 47, 48, 49, 50, 56, 59, 64, 68, 69, 70, 72, 73, 74, 76, 80, 93, 95, 98, 99, 104, 108, 109, 110, 115, 134, 135, 141, 143, 151, 154, 155, 158, 175, 191, 199, 210, 213, 215, 216, 217, 219, 221, 222, 230, 233, 234, 236, 238, 239, 242, 243, 244, 245, 246, 250, 259, 264, 291, 292, 294, 295, 296, 297, 301, 302, 303], "integr": [2, 11, 12, 14, 15, 18, 29, 39, 41, 47, 60, 67, 68, 70, 73, 74, 86, 87, 88, 91, 97, 99, 104, 107, 108, 110, 124, 126, 134, 139, 141, 151, 158, 177, 186, 189, 192, 195, 200, 202, 207, 211, 213, 216, 217, 219, 222, 223, 226, 228, 229, 236, 242, 243, 246, 259, 267, 270, 273, 274, 277, 278, 282, 285, 293, 296, 301], "algorithm": [2, 4, 14, 21, 28, 32, 34, 36, 37, 47, 52, 53, 58, 59, 60, 62, 64, 66, 67, 68, 69, 72, 73, 74, 80, 85, 93, 95, 98, 101, 104, 105, 108, 116, 125, 133, 155, 178, 196, 201, 211, 212, 213, 214, 215, 216, 217, 220, 221, 223, 227, 231, 234, 235, 238, 239, 242, 244, 245, 246, 252, 261, 264, 287, 292, 297, 298, 302], "simplif": [2, 14, 15, 21, 26, 42, 44, 46, 47, 49, 68, 70, 73, 74, 93, 99, 104, 110, 131, 141, 155, 158, 175, 191, 201, 222, 227, 237, 238, 242, 244, 245, 281, 282, 291, 293, 295, 296], "collect": [2, 5, 20, 25, 48, 49, 59, 68, 85, 95, 108, 116, 124, 139, 149, 158, 191, 198, 211, 217, 222, 235, 236, 238, 242, 246, 257, 264], "factor": [2, 12, 14, 15, 50, 59, 60, 67, 68, 69, 72, 73, 74, 76, 93, 95, 104, 108, 116, 124, 158, 160, 168, 172, 175, 187, 191, 195, 196, 197, 198, 213, 215, 216, 217, 218, 220, 221, 222, 229, 235, 236, 238, 239, 242, 244, 246, 250, 261, 274, 277, 296, 298], "matric": [2, 4, 14, 20, 21, 45, 49, 68, 69, 95, 105, 107, 110, 124, 133, 134, 135, 141, 145, 155, 158, 160, 163, 164, 166, 174, 175, 185, 190, 201, 210, 211, 215, 221, 226, 227, 234, 236, 238, 239, 242, 244, 245, 247, 259, 260, 287, 293, 295, 296], "thu": [2, 3, 11, 13, 14, 15, 19, 30, 32, 33, 35, 45, 53, 59, 60, 68, 69, 70, 74, 76, 91, 93, 95, 99, 102, 104, 107, 108, 125, 134, 135, 139, 145, 151, 155, 196, 201, 214, 219, 221, 223, 227, 233, 236, 238, 259, 264, 265, 275, 276, 294, 297, 302, 303], "speed": [2, 4, 11, 13, 44, 49, 59, 68, 69, 72, 99, 108, 109, 126, 133, 134, 135, 139, 141, 143, 144, 145, 146, 148, 149, 150, 152, 153, 154, 158, 159, 162, 165, 195, 200, 201, 205, 210, 211, 223, 226, 227, 233, 238, 242, 258, 261, 264, 297, 298], "up": [2, 3, 7, 8, 9, 11, 12, 13, 14, 19, 21, 22, 23, 35, 39, 44, 47, 49, 51, 59, 60, 62, 68, 69, 70, 72, 73, 74, 76, 77, 84, 85, 89, 93, 95, 96, 98, 99, 104, 108, 109, 116, 126, 128, 129, 136, 137, 139, 143, 144, 148, 150, 155, 156, 158, 159, 171, 186, 188, 205, 211, 212, 213, 215, 216, 217, 221, 223, 226, 227, 228, 233, 235, 236, 238, 239, 242, 243, 244, 245, 258, 259, 260, 261, 262, 265, 293, 294, 297, 298, 300], "becaus": [2, 3, 4, 5, 8, 11, 12, 13, 14, 15, 17, 21, 22, 23, 28, 31, 32, 33, 34, 35, 36, 37, 39, 40, 45, 49, 60, 67, 68, 69, 74, 80, 84, 85, 93, 95, 98, 102, 104, 108, 110, 111, 112, 114, 129, 133, 139, 140, 141, 145, 171, 179, 191, 193, 195, 196, 209, 212, 213, 215, 216, 217, 219, 221, 222, 223, 225, 226, 229, 233, 236, 238, 239, 242, 243, 244, 245, 255, 257, 258, 260, 264, 265, 267, 274, 292, 294, 296, 297, 298, 301, 302, 303], "make": [2, 3, 4, 5, 8, 9, 12, 13, 14, 15, 17, 19, 21, 22, 23, 25, 28, 33, 34, 36, 40, 43, 44, 45, 47, 49, 50, 58, 59, 67, 68, 69, 70, 71, 72, 73, 74, 76, 80, 84, 95, 96, 98, 104, 107, 108, 109, 110, 114, 116, 117, 118, 120, 134, 139, 141, 143, 144, 148, 149, 153, 155, 156, 158, 171, 188, 193, 200, 206, 209, 212, 215, 216, 217, 219, 221, 222, 223, 225, 226, 229, 234, 235, 236, 238, 242, 243, 244, 245, 250, 252, 255, 257, 258, 259, 260, 262, 264, 265, 274, 279, 280, 294, 295, 296, 297, 298, 302], "non": [2, 3, 12, 14, 15, 21, 23, 28, 34, 35, 37, 40, 45, 47, 50, 58, 61, 67, 68, 69, 73, 74, 75, 76, 77, 78, 81, 82, 83, 95, 97, 98, 99, 100, 101, 104, 105, 107, 108, 111, 114, 128, 129, 134, 136, 143, 145, 149, 153, 154, 158, 175, 180, 190, 191, 193, 207, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 225, 226, 229, 233, 234, 236, 238, 239, 241, 242, 244, 245, 246, 247, 250, 251, 252, 257, 259, 264, 267, 277, 297, 302, 303], "who": [2, 3, 4, 9, 11, 12, 19, 23, 69, 70, 158, 210, 219, 226, 295], "abl": [2, 3, 4, 11, 12, 14, 19, 21, 23, 31, 35, 48, 49, 59, 64, 68, 69, 70, 79, 87, 95, 101, 104, 108, 111, 121, 141, 153, 155, 156, 158, 159, 213, 215, 216, 217, 222, 223, 242, 245, 257, 274, 296, 301, 303], "better": [2, 3, 4, 8, 11, 12, 13, 14, 15, 21, 22, 23, 41, 48, 49, 60, 68, 72, 76, 95, 98, 124, 141, 171, 199, 212, 215, 216, 217, 229, 233, 234, 235, 236, 242, 243, 244, 245, 246, 258, 264, 265, 296, 302], "experi": [2, 143, 245, 246], "design": [2, 3, 4, 13, 14, 16, 18, 22, 23, 26, 29, 34, 38, 45, 50, 58, 68, 104, 107, 110, 114, 115, 139, 158, 159, 215, 216, 220, 226, 231, 236, 242, 245, 296, 297, 301], "interfac": [2, 5, 7, 9, 11, 12, 14, 32, 47, 68, 96, 111, 115, 133, 160, 186, 206, 210, 215, 216, 219, 224, 245, 258, 259], "ipython": [2, 4, 14, 15, 39, 96, 158, 206, 265, 269, 300, 301], "jupyt": [2, 7, 11, 14, 23, 265], "notebook": [2, 14, 23, 39, 96, 206, 265, 300, 301], "init_sess": [2, 96, 301], "command": [2, 4, 8, 9, 11, 12, 14, 15, 28, 31, 37, 39, 49, 72, 96, 141, 153, 158, 206, 212, 226, 257, 258, 301], "In": [2, 3, 4, 5, 8, 9, 11, 12, 13, 14, 15, 17, 19, 21, 22, 23, 28, 32, 37, 39, 45, 47, 48, 49, 50, 51, 52, 57, 58, 59, 60, 67, 68, 69, 70, 72, 73, 74, 76, 81, 83, 84, 85, 86, 93, 95, 96, 97, 98, 99, 101, 104, 105, 108, 110, 114, 115, 116, 117, 120, 124, 128, 129, 133, 134, 136, 139, 141, 144, 145, 146, 151, 152, 153, 154, 155, 156, 158, 159, 177, 179, 180, 181, 186, 190, 191, 194, 195, 196, 200, 205, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 225, 226, 233, 234, 235, 236, 238, 239, 242, 243, 244, 245, 246, 247, 248, 250, 252, 255, 257, 259, 261, 262, 264, 265, 270, 274, 275, 277, 279, 291, 294, 295, 296, 297, 298, 301, 302, 303], "usual": [2, 12, 13, 14, 15, 19, 21, 28, 48, 50, 59, 67, 68, 69, 86, 93, 95, 104, 151, 177, 189, 195, 196, 207, 209, 210, 213, 214, 215, 216, 217, 219, 222, 225, 226, 227, 233, 236, 242, 245, 246, 247, 251, 252, 259, 261, 265, 270, 279, 291, 294, 297, 301, 302], "matplotlib": [2, 4, 5, 8, 13, 35, 39, 91, 96, 122, 158, 171, 206, 212, 301], "flag": [2, 3, 17, 23, 28, 47, 49, 59, 60, 64, 66, 68, 83, 95, 98, 99, 100, 104, 108, 133, 141, 175, 212, 217, 219, 222, 223, 226, 227, 228, 234, 238, 239, 242, 244, 245, 252, 257, 258, 264, 267, 291, 302], "auto_symbol": [2, 96, 110], "auto_int_to_integ": [2, 96], "qt": 2, "consol": [2, 3, 15, 68, 96, 206, 212, 301], "express": [2, 3, 4, 5, 14, 17, 18, 21, 22, 23, 29, 30, 33, 35, 37, 41, 42, 43, 44, 45, 46, 47, 60, 67, 68, 69, 70, 71, 72, 73, 74, 76, 78, 81, 83, 84, 91, 92, 93, 95, 96, 99, 102, 103, 104, 107, 108, 109, 112, 114, 116, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 139, 140, 141, 145, 151, 152, 153, 154, 155, 156, 158, 159, 166, 170, 174, 175, 179, 180, 183, 186, 188, 189, 190, 191, 193, 194, 195, 196, 198, 200, 201, 203, 205, 206, 207, 210, 211, 212, 213, 214, 215, 217, 219, 221, 222, 223, 226, 227, 229, 231, 232, 233, 234, 235, 236, 238, 239, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 255, 258, 259, 260, 261, 262, 265, 267, 270, 272, 273, 274, 276, 277, 279, 285, 287, 292, 293, 294, 295, 296, 298, 301, 302, 303], "mathjax": [2, 5, 96, 206, 301], "preview": [2, 11, 48, 260], "convert": [2, 3, 8, 13, 14, 15, 17, 21, 22, 23, 26, 31, 33, 34, 35, 41, 45, 49, 52, 60, 64, 68, 69, 72, 73, 74, 81, 82, 83, 85, 88, 89, 92, 96, 98, 99, 104, 107, 108, 110, 124, 129, 136, 156, 185, 188, 194, 195, 196, 198, 205, 212, 213, 215, 217, 219, 221, 222, 223, 224, 226, 227, 228, 234, 235, 236, 238, 239, 242, 243, 245, 246, 247, 248, 251, 257, 258, 264, 265, 267, 268, 273, 288, 293, 294, 297, 302], "imag": [2, 8, 25, 59, 133, 147, 152, 158, 160, 164, 213, 217, 219, 226, 234, 245], "render": [2, 4, 5, 8, 11, 12, 49, 68, 96, 206, 212, 226, 265, 301], "either": [2, 4, 5, 8, 11, 12, 13, 14, 15, 21, 22, 23, 28, 31, 32, 33, 34, 36, 41, 45, 47, 48, 52, 60, 67, 68, 69, 72, 73, 74, 76, 83, 85, 91, 93, 95, 96, 98, 99, 104, 108, 114, 124, 129, 130, 133, 134, 135, 137, 139, 140, 141, 154, 156, 158, 175, 181, 188, 191, 193, 195, 206, 210, 212, 214, 215, 216, 217, 219, 221, 222, 226, 228, 233, 234, 235, 236, 239, 242, 243, 244, 245, 246, 247, 250, 251, 258, 264, 265, 270, 279, 294, 297, 298], "save": [2, 9, 12, 13, 14, 47, 68, 104, 108, 212, 225, 244, 261], "show": [2, 3, 4, 5, 8, 11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 35, 49, 60, 67, 68, 72, 74, 91, 93, 95, 104, 108, 116, 117, 120, 122, 128, 129, 137, 141, 147, 152, 156, 158, 186, 190, 194, 196, 201, 209, 210, 212, 213, 216, 217, 219, 221, 222, 226, 227, 229, 233, 234, 235, 236, 238, 239, 242, 244, 246, 247, 255, 258, 259, 262, 264, 265, 294, 296, 298, 301], "viewer": [2, 5, 48, 226, 260], "mathrm": [2, 4, 39, 58, 67, 68, 69, 76, 93, 95, 104, 217, 219, 226, 234, 236, 242, 245, 246, 292, 296], "distribut": [2, 8, 39, 59, 66, 68, 76, 84, 95, 116, 117, 118, 190, 214, 217, 222, 226, 252], "texliv": [2, 8, 226], "miktex": [2, 8], "note": [2, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 17, 19, 21, 22, 25, 26, 29, 30, 31, 33, 34, 35, 36, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 58, 59, 60, 61, 64, 66, 67, 69, 72, 73, 74, 75, 76, 78, 79, 81, 82, 83, 84, 85, 93, 95, 96, 98, 99, 101, 104, 108, 110, 111, 114, 124, 125, 129, 130, 131, 133, 134, 135, 137, 139, 140, 141, 143, 145, 148, 156, 158, 164, 167, 175, 185, 186, 188, 190, 191, 192, 194, 200, 201, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 221, 222, 223, 225, 226, 227, 228, 229, 232, 234, 236, 238, 239, 241, 242, 243, 244, 245, 246, 251, 252, 255, 257, 258, 259, 260, 261, 262, 264, 265, 267, 275, 277, 279, 291, 292, 293, 295, 296, 297, 298, 302], "parser": [2, 101, 151, 158, 257, 287], "modul": [2, 3, 4, 5, 7, 11, 12, 14, 15, 18, 21, 26, 31, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 58, 60, 68, 69, 71, 73, 74, 76, 80, 84, 88, 91, 94, 95, 96, 98, 101, 102, 103, 104, 109, 110, 111, 114, 115, 116, 118, 119, 120, 122, 125, 128, 139, 141, 142, 147, 151, 153, 154, 156, 158, 160, 163, 165, 166, 178, 181, 194, 195, 196, 197, 207, 210, 212, 217, 218, 220, 223, 224, 226, 230, 233, 236, 240, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 257, 259, 260, 261, 262, 263, 264, 265, 266, 268, 273, 275, 277, 278, 279, 280, 281, 287, 288, 289, 291, 294, 296, 302, 303], "time": [2, 3, 5, 7, 8, 11, 12, 13, 14, 15, 19, 21, 22, 26, 28, 35, 37, 40, 44, 45, 49, 51, 59, 60, 64, 68, 69, 73, 76, 91, 93, 98, 99, 104, 105, 107, 108, 109, 110, 111, 114, 120, 121, 122, 124, 128, 129, 134, 135, 137, 139, 141, 143, 145, 148, 149, 151, 153, 154, 155, 156, 158, 159, 165, 175, 180, 188, 189, 193, 194, 195, 196, 197, 200, 201, 203, 205, 206, 207, 208, 209, 210, 211, 213, 215, 216, 219, 220, 221, 222, 223, 225, 226, 233, 234, 235, 236, 238, 242, 244, 246, 255, 257, 258, 263, 264, 265, 277, 279, 289, 292, 296, 297, 298], "parse_expr": [2, 13, 21, 37, 110], "mathematica": [2, 15, 49, 60, 110, 296, 298], "parse_mathematica": [2, 13, 110], "maxima": [2, 32, 110, 245], "parse_maxima": [2, 110], "antlr": [2, 141], "runtim": [2, 14, 49, 68, 135, 265], "autolev": [2, 143, 151, 287], "call": [2, 3, 4, 5, 7, 9, 11, 12, 14, 15, 18, 19, 21, 22, 23, 28, 29, 32, 33, 34, 35, 36, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 57, 58, 59, 60, 66, 68, 69, 71, 72, 73, 75, 76, 78, 83, 84, 86, 91, 93, 95, 97, 98, 99, 100, 101, 102, 104, 106, 107, 108, 110, 112, 114, 115, 116, 117, 124, 128, 129, 133, 137, 141, 143, 145, 152, 155, 156, 181, 183, 186, 191, 195, 196, 201, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 221, 222, 223, 224, 225, 226, 228, 233, 234, 236, 238, 239, 241, 242, 244, 245, 246, 247, 248, 250, 252, 253, 255, 257, 258, 259, 260, 261, 262, 264, 265, 267, 270, 273, 274, 277, 279, 292, 294, 296, 297, 298, 301, 302, 303], "antlr4": [2, 110], "python3": [2, 8, 49, 110, 226], "awar": [2, 3, 4, 12, 14, 15, 22, 47, 68, 72, 98, 104, 236, 246, 265], "version": [2, 3, 4, 5, 7, 8, 9, 11, 12, 21, 22, 23, 25, 37, 38, 39, 42, 48, 49, 59, 60, 66, 68, 69, 73, 74, 76, 95, 98, 100, 102, 104, 106, 108, 127, 130, 133, 141, 175, 189, 193, 201, 211, 212, 213, 215, 216, 217, 219, 221, 222, 226, 229, 238, 244, 246, 256, 257, 259, 260, 261, 262, 264, 265, 268, 270, 276, 294, 297, 298], "must": [2, 3, 4, 11, 12, 13, 14, 15, 21, 22, 35, 41, 42, 43, 44, 49, 59, 60, 62, 64, 66, 67, 68, 69, 70, 73, 74, 76, 78, 81, 84, 87, 90, 91, 93, 95, 98, 99, 100, 101, 104, 107, 108, 110, 114, 116, 117, 118, 120, 122, 124, 125, 129, 133, 134, 135, 137, 139, 140, 141, 143, 151, 153, 154, 155, 156, 158, 171, 186, 188, 191, 201, 210, 211, 212, 213, 214, 215, 217, 219, 221, 222, 226, 227, 234, 235, 236, 238, 239, 242, 244, 245, 246, 250, 251, 257, 258, 259, 260, 261, 262, 264, 265, 294, 296, 297, 301, 302], "match": [2, 3, 4, 11, 12, 13, 15, 21, 23, 35, 59, 60, 67, 68, 76, 81, 93, 95, 99, 104, 133, 139, 167, 192, 200, 201, 215, 222, 238, 239, 242, 243, 244, 246, 255, 257, 259, 264, 265, 276, 292], "wa": [2, 3, 9, 11, 12, 13, 15, 17, 21, 23, 35, 51, 57, 59, 60, 62, 68, 69, 70, 76, 81, 104, 108, 110, 128, 130, 136, 141, 143, 145, 155, 156, 186, 196, 209, 210, 211, 213, 215, 219, 221, 222, 223, 225, 226, 235, 236, 238, 242, 244, 246, 255, 257, 260, 262, 264, 265, 292, 294, 296, 297, 300], "compil": [2, 49, 96, 109, 128, 158, 206, 226, 238, 251, 257, 258, 259, 281, 296], "4": [2, 5, 11, 12, 15, 17, 19, 21, 22, 23, 28, 30, 31, 32, 33, 34, 35, 36, 37, 41, 42, 44, 45, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 81, 82, 83, 84, 85, 87, 90, 91, 93, 95, 97, 98, 99, 100, 101, 102, 104, 105, 107, 108, 110, 112, 114, 116, 118, 120, 122, 124, 125, 126, 131, 141, 143, 144, 145, 146, 148, 149, 150, 151, 152, 155, 156, 158, 159, 160, 163, 167, 170, 175, 185, 186, 188, 189, 190, 191, 192, 194, 201, 202, 205, 207, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 251, 252, 257, 258, 261, 264, 265, 270, 273, 274, 275, 277, 279, 280, 291, 292, 294, 296, 297, 298, 302, 303], "lark": 2, "altern": [2, 3, 4, 8, 13, 14, 15, 22, 23, 39, 49, 56, 59, 60, 67, 68, 72, 73, 74, 75, 76, 99, 101, 105, 109, 110, 111, 114, 129, 141, 153, 155, 201, 209, 211, 212, 214, 215, 216, 221, 222, 226, 231, 233, 235, 244, 245, 247, 248, 264, 294, 296, 298], "clang": [2, 110], "bind": [2, 49, 226, 258], "parse_c": 2, "lfortran": [2, 110], "fortran": [2, 14, 19, 23, 47, 109, 110, 128, 158, 211, 259, 301], "satisfi": [2, 5, 12, 13, 21, 31, 32, 36, 44, 45, 47, 50, 56, 59, 64, 68, 69, 73, 76, 78, 91, 93, 97, 98, 104, 108, 135, 155, 175, 180, 213, 214, 217, 219, 221, 222, 226, 232, 233, 234, 239, 242, 243, 244, 245, 246, 252, 297, 302], "includ": [2, 3, 4, 5, 8, 11, 12, 13, 14, 15, 21, 23, 25, 28, 31, 32, 36, 39, 44, 45, 47, 48, 49, 60, 64, 67, 68, 69, 70, 72, 73, 74, 76, 80, 86, 93, 95, 98, 99, 101, 103, 104, 108, 109, 110, 111, 114, 116, 126, 128, 139, 141, 143, 145, 146, 151, 153, 155, 158, 171, 175, 180, 185, 188, 189, 199, 207, 210, 214, 215, 217, 218, 219, 221, 222, 225, 226, 227, 232, 233, 234, 236, 238, 241, 242, 243, 244, 246, 249, 252, 255, 257, 259, 260, 261, 262, 264, 270, 272, 274, 279, 281, 292, 296, 297, 298, 302, 303], "implement": [2, 4, 5, 11, 12, 13, 14, 16, 18, 22, 23, 32, 34, 36, 37, 38, 41, 42, 43, 44, 47, 48, 49, 50, 53, 58, 59, 60, 65, 68, 69, 71, 73, 74, 76, 79, 81, 88, 89, 91, 92, 95, 98, 99, 100, 104, 108, 109, 110, 111, 112, 114, 128, 129, 137, 141, 151, 156, 160, 162, 163, 166, 175, 176, 184, 185, 187, 195, 200, 202, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 230, 233, 234, 235, 238, 239, 242, 243, 244, 245, 246, 250, 251, 261, 264, 265, 278, 281, 285, 292, 296, 302], "dpll": 2, "But": [2, 3, 5, 7, 12, 13, 14, 15, 23, 28, 37, 67, 68, 76, 82, 92, 99, 104, 108, 179, 180, 191, 196, 201, 213, 214, 219, 223, 233, 235, 236, 238, 239, 242, 244, 245, 251, 261, 264, 265, 273, 292, 294, 296, 297, 302], "sat": [2, 43], "solver": [2, 4, 11, 12, 14, 31, 34, 43, 76, 104, 108, 134, 139, 151, 158, 159, 215, 218, 226, 238, 239, 243, 257, 281, 282, 288, 293, 295], "ask": [2, 4, 7, 9, 11, 14, 15, 18, 21, 22, 43, 44, 45, 46, 68, 80, 93, 141, 196, 213, 232, 238, 245, 264, 282, 294], "pycosat": 2, "forc": [2, 15, 19, 22, 23, 68, 72, 74, 78, 84, 93, 95, 98, 111, 112, 114, 116, 117, 118, 120, 129, 130, 133, 134, 136, 137, 139, 143, 145, 146, 147, 148, 151, 153, 154, 155, 156, 158, 179, 180, 194, 207, 210, 212, 214, 216, 235, 238, 239, 244, 257, 277, 279, 287, 301, 302], "pysat": 2, "minisat": 2, "minisat22": 2, "heavi": [2, 12, 246, 297], "primarili": [2, 14, 21, 49, 68, 74, 108, 116, 190, 222, 224, 258, 261, 267, 274], "support": [2, 3, 4, 5, 11, 13, 14, 15, 23, 34, 39, 41, 42, 43, 44, 47, 48, 49, 60, 68, 72, 75, 76, 78, 92, 95, 101, 104, 108, 109, 110, 114, 116, 117, 118, 120, 121, 124, 128, 133, 141, 158, 186, 201, 209, 212, 214, 215, 216, 217, 219, 221, 222, 223, 226, 231, 232, 233, 234, 238, 242, 243, 244, 245, 246, 247, 251, 255, 257, 258, 259, 265, 275, 277, 292, 294, 297, 301], "give": [2, 3, 4, 7, 11, 13, 15, 17, 21, 22, 23, 28, 30, 32, 33, 34, 35, 36, 37, 41, 42, 44, 49, 50, 57, 59, 60, 61, 62, 67, 68, 69, 70, 73, 74, 76, 78, 80, 81, 83, 84, 92, 93, 95, 96, 98, 101, 104, 107, 108, 109, 111, 112, 114, 116, 120, 124, 133, 141, 158, 170, 185, 186, 188, 189, 193, 194, 196, 197, 199, 201, 205, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 221, 222, 223, 226, 227, 228, 229, 233, 234, 235, 236, 238, 239, 242, 244, 245, 246, 257, 258, 259, 264, 274, 279, 294, 295, 297, 302, 303], "rudimentari": [2, 23, 219], "text": [2, 3, 4, 5, 11, 12, 13, 14, 23, 25, 39, 49, 59, 69, 73, 74, 76, 86, 93, 96, 99, 104, 108, 110, 156, 196, 206, 211, 212, 213, 226, 233, 239, 242, 245, 246, 257], "pyglet": [2, 226], "pygletplot": [2, 212], "2d": [2, 81, 82, 84, 116, 117, 118, 120, 169, 201, 212, 226, 239, 251, 296], "3d": [2, 41, 52, 81, 82, 116, 169, 192, 207, 212, 274, 276, 277, 278, 279], "evalu": [2, 4, 14, 19, 21, 22, 29, 35, 37, 41, 42, 43, 44, 47, 49, 68, 70, 73, 74, 76, 79, 83, 84, 93, 95, 98, 101, 104, 108, 109, 110, 111, 112, 114, 124, 128, 131, 141, 155, 156, 166, 168, 170, 172, 174, 177, 180, 188, 191, 211, 212, 215, 216, 217, 219, 220, 222, 226, 227, 232, 233, 234, 236, 238, 239, 242, 244, 245, 246, 247, 248, 258, 259, 260, 265, 277, 282, 291, 292, 293, 294, 296, 298], "numer": [2, 4, 12, 13, 14, 15, 17, 19, 21, 29, 30, 31, 32, 33, 36, 41, 45, 47, 49, 67, 68, 73, 76, 80, 84, 91, 104, 108, 110, 111, 112, 114, 115, 120, 121, 122, 124, 133, 134, 135, 141, 143, 151, 155, 156, 159, 163, 170, 173, 188, 200, 210, 212, 215, 216, 217, 219, 220, 221, 222, 225, 226, 235, 236, 238, 242, 244, 245, 251, 257, 258, 264, 265, 282, 291, 294, 298, 302], "variou": [2, 4, 5, 14, 19, 23, 28, 31, 47, 49, 51, 52, 59, 67, 68, 73, 88, 93, 95, 98, 104, 114, 136, 156, 170, 174, 175, 186, 188, 213, 214, 217, 218, 219, 221, 227, 233, 236, 239, 242, 243, 245, 259, 302], "primari": [2, 3, 4, 5, 12, 21, 23, 68, 80, 98, 111, 114, 129, 210, 213, 215, 259, 265], "vehicl": 2, "between": [2, 3, 9, 12, 13, 14, 18, 22, 23, 28, 32, 48, 49, 58, 59, 60, 62, 66, 68, 70, 73, 76, 78, 80, 81, 82, 83, 84, 85, 95, 97, 98, 101, 102, 104, 108, 109, 110, 111, 112, 114, 120, 121, 122, 124, 129, 133, 136, 137, 139, 140, 141, 144, 148, 150, 152, 155, 156, 158, 159, 160, 163, 164, 170, 177, 179, 180, 181, 185, 188, 189, 190, 191, 194, 195, 196, 200, 201, 202, 203, 205, 207, 209, 210, 212, 213, 215, 217, 219, 221, 222, 226, 228, 238, 242, 243, 244, 245, 246, 247, 260, 265, 270, 273, 274, 277, 279, 294], "standard": [2, 5, 12, 13, 14, 15, 21, 23, 28, 32, 33, 35, 37, 49, 68, 72, 74, 76, 91, 93, 95, 96, 97, 98, 102, 104, 108, 109, 110, 111, 127, 168, 172, 201, 207, 211, 213, 216, 217, 219, 226, 229, 234, 238, 239, 242, 245, 246, 248, 259, 265, 274, 279, 291, 294, 302], "wai": [2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 28, 30, 32, 35, 40, 48, 50, 51, 52, 57, 59, 60, 61, 64, 68, 70, 73, 76, 84, 88, 92, 93, 95, 97, 101, 104, 107, 108, 110, 112, 115, 116, 120, 128, 129, 134, 136, 139, 141, 145, 147, 148, 151, 155, 171, 185, 188, 189, 194, 196, 199, 200, 201, 203, 205, 207, 209, 212, 213, 214, 215, 216, 217, 219, 221, 222, 223, 225, 226, 233, 236, 238, 239, 242, 243, 245, 247, 248, 251, 252, 255, 259, 261, 264, 265, 270, 274, 275, 276, 277, 279, 291, 292, 294, 295, 296, 297, 302, 303], "principl": [2, 69, 99, 108, 162, 211, 213, 214, 219, 235, 244], "pass": [2, 3, 4, 11, 12, 14, 15, 17, 18, 21, 22, 23, 30, 31, 34, 35, 37, 40, 41, 44, 47, 48, 49, 59, 60, 68, 69, 70, 72, 74, 75, 76, 78, 81, 82, 84, 95, 96, 98, 99, 101, 104, 105, 108, 110, 112, 114, 116, 122, 124, 129, 130, 134, 137, 139, 140, 141, 145, 156, 158, 159, 163, 180, 181, 185, 186, 188, 189, 201, 206, 212, 213, 215, 216, 217, 219, 221, 222, 224, 226, 227, 233, 234, 238, 239, 242, 243, 244, 245, 246, 247, 250, 251, 252, 255, 257, 258, 259, 260, 262, 264, 265, 267, 269, 270, 291, 292, 297, 301, 302, 303], "appropri": [2, 4, 5, 11, 12, 13, 15, 19, 32, 36, 59, 68, 74, 83, 104, 128, 143, 180, 181, 191, 201, 209, 212, 215, 216, 222, 223, 226, 232, 233, 238, 239, 244, 246, 251, 259, 275, 301], "namespac": [2, 4, 13, 40, 49, 50, 68, 139, 217, 239, 242, 243, 257, 259, 260, 265], "dictionari": [2, 12, 13, 14, 31, 35, 37, 48, 49, 57, 59, 60, 66, 68, 73, 82, 84, 95, 97, 99, 104, 107, 108, 110, 116, 131, 134, 135, 139, 141, 143, 145, 148, 153, 155, 181, 191, 201, 210, 212, 214, 215, 217, 219, 221, 222, 224, 226, 233, 238, 239, 242, 243, 244, 245, 246, 250, 252, 257, 261, 264, 265, 270, 291, 298], "third": [2, 3, 17, 28, 41, 49, 59, 60, 68, 76, 78, 82, 104, 112, 124, 133, 139, 188, 194, 195, 209, 214, 222, 236, 242, 245, 246, 248, 262, 264, 292, 297], "argument": [2, 3, 4, 11, 12, 14, 18, 21, 22, 23, 28, 30, 34, 35, 36, 37, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 59, 60, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 81, 84, 85, 93, 95, 96, 98, 99, 101, 104, 107, 108, 110, 112, 114, 116, 122, 124, 129, 133, 134, 137, 139, 140, 141, 153, 154, 156, 158, 165, 168, 172, 174, 177, 180, 185, 186, 188, 189, 190, 191, 199, 206, 207, 211, 212, 213, 214, 215, 216, 217, 219, 221, 222, 225, 226, 227, 228, 232, 233, 234, 235, 236, 238, 239, 242, 243, 244, 246, 248, 250, 251, 257, 258, 259, 260, 261, 262, 264, 265, 267, 274, 275, 277, 291, 292, 297, 298, 302], "default": [2, 3, 4, 5, 11, 12, 13, 14, 15, 21, 23, 28, 32, 33, 35, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 58, 59, 66, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 81, 82, 83, 84, 85, 87, 90, 95, 96, 98, 99, 101, 104, 105, 108, 109, 110, 111, 112, 114, 116, 117, 120, 122, 124, 126, 128, 129, 130, 131, 133, 134, 135, 139, 141, 155, 164, 181, 183, 186, 188, 189, 191, 195, 197, 200, 201, 203, 205, 206, 211, 212, 214, 215, 216, 217, 219, 221, 222, 223, 225, 226, 227, 228, 229, 233, 234, 235, 238, 239, 242, 243, 244, 245, 246, 251, 252, 257, 258, 259, 261, 262, 264, 265, 267, 270, 291, 292, 296, 298, 301, 302], "translat": [2, 13, 49, 59, 68, 77, 79, 83, 85, 109, 110, 124, 127, 133, 134, 139, 148, 150, 152, 156, 209, 212, 226, 242, 244, 258, 259, 265, 267, 275], "numpi": [2, 4, 12, 13, 14, 23, 28, 33, 34, 35, 39, 49, 68, 91, 96, 109, 122, 141, 158, 175, 185, 212, 215, 226, 246, 251, 258, 259, 265, 291, 294], "By": [2, 15, 21, 23, 28, 32, 33, 35, 41, 42, 44, 49, 58, 67, 68, 70, 72, 73, 76, 82, 83, 87, 91, 93, 98, 99, 104, 107, 108, 109, 110, 114, 116, 117, 122, 130, 186, 191, 212, 214, 215, 216, 217, 219, 221, 222, 223, 225, 226, 228, 233, 235, 238, 239, 242, 244, 245, 246, 250, 252, 253, 257, 260, 264, 265, 277, 291, 296, 297, 302], "produc": [2, 4, 5, 12, 14, 22, 23, 31, 33, 34, 35, 37, 48, 59, 68, 69, 81, 95, 98, 104, 111, 112, 114, 129, 137, 201, 215, 216, 221, 222, 226, 233, 242, 243, 244, 246, 255, 257, 261, 262, 264, 265, 301], "math": [2, 4, 8, 12, 23, 37, 41, 45, 48, 50, 59, 68, 73, 76, 78, 95, 104, 108, 109, 120, 141, 151, 207, 212, 215, 217, 220, 225, 226, 242, 243, 246, 258, 259, 265, 275, 276, 277, 278, 279, 291, 292, 296], "behavior": [2, 3, 12, 13, 14, 15, 23, 59, 68, 73, 76, 95, 110, 127, 128, 151, 155, 186, 213, 214, 221, 222, 226, 227, 231, 233, 235, 238, 255, 258, 260, 264, 265, 294], "backward": [2, 19, 47, 68, 99, 104, 124, 139, 226, 264, 302], "compat": [2, 3, 8, 18, 49, 68, 76, 96, 99, 104, 108, 109, 128, 139, 193, 198, 206, 212, 215, 217, 221, 222, 226, 246, 250, 253, 257, 259, 265], "scipi": [2, 7, 14, 28, 30, 33, 76, 128, 158, 185, 226, 246, 265, 291, 300], "special": [2, 4, 11, 14, 16, 21, 23, 33, 37, 40, 41, 51, 60, 68, 69, 71, 72, 73, 75, 83, 86, 93, 95, 99, 104, 158, 175, 180, 207, 213, 216, 219, 220, 221, 226, 235, 236, 238, 241, 242, 243, 244, 246, 257, 258, 259, 262, 264, 265, 274, 277, 279, 282, 292, 293, 297], "cupi": [2, 109], "cuda": [2, 109], "gpu": [2, 109, 158], "jax": [2, 109, 265], "xla": [2, 109], "program": [2, 5, 15, 21, 49, 52, 60, 158, 196, 211, 259, 261, 294, 296, 300, 302], "tpu": [2, 109], "compatibli": 2, "tensorflow": [2, 265], "machin": [2, 4, 7, 8, 9, 227, 238, 242, 291], "learn": [2, 5, 8, 29, 35, 37, 104, 156, 210, 235, 245, 291, 294, 295, 296, 300], "numexpr": [2, 265], "fast": [2, 21, 35, 49, 68, 103, 104, 108, 134, 135, 163, 217, 218, 219, 220, 221, 222, 223, 229, 233, 242, 244, 261, 264, 265], "alreadi": [2, 3, 7, 9, 10, 11, 12, 13, 15, 21, 23, 25, 31, 32, 35, 37, 39, 41, 59, 60, 68, 69, 77, 78, 81, 82, 84, 93, 95, 99, 105, 108, 120, 125, 130, 139, 141, 155, 160, 186, 188, 191, 207, 209, 210, 212, 215, 216, 219, 221, 225, 229, 235, 236, 238, 242, 245, 246, 252, 275, 277, 292, 294, 295, 296, 300, 301, 302, 303], "number": [2, 3, 4, 5, 11, 12, 13, 14, 17, 18, 21, 23, 26, 28, 31, 32, 33, 36, 37, 41, 43, 44, 47, 48, 49, 50, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 69, 70, 73, 74, 76, 78, 81, 82, 83, 84, 85, 87, 95, 96, 97, 98, 99, 101, 104, 105, 107, 109, 110, 114, 115, 117, 120, 122, 124, 125, 126, 128, 129, 134, 135, 139, 141, 145, 155, 156, 158, 164, 167, 170, 171, 174, 175, 176, 177, 179, 180, 185, 186, 187, 188, 189, 191, 192, 193, 196, 199, 200, 201, 205, 206, 207, 209, 210, 211, 212, 214, 215, 217, 218, 219, 220, 222, 223, 226, 228, 232, 233, 234, 235, 236, 238, 239, 242, 244, 245, 246, 247, 251, 252, 257, 259, 261, 264, 265, 267, 270, 273, 274, 276, 277, 279, 282, 288, 291, 292, 294, 296, 297, 298, 302], "languag": [2, 5, 14, 15, 19, 23, 49, 74, 104, 110, 128, 141, 158, 226, 231, 246, 258, 259, 294, 296, 298, 300, 302], "valid": [2, 4, 5, 11, 13, 21, 22, 23, 31, 35, 42, 44, 46, 47, 48, 49, 61, 67, 68, 73, 74, 84, 104, 108, 110, 131, 133, 134, 135, 139, 141, 143, 160, 164, 183, 188, 195, 198, 200, 201, 206, 210, 216, 219, 222, 225, 226, 234, 238, 239, 242, 244, 245, 246, 265, 298, 302], "rather": [2, 3, 4, 5, 11, 12, 13, 14, 15, 17, 19, 21, 22, 23, 28, 32, 35, 36, 37, 40, 45, 49, 50, 51, 59, 60, 61, 68, 72, 74, 79, 84, 86, 93, 98, 99, 101, 104, 108, 110, 114, 115, 139, 148, 158, 171, 185, 189, 191, 195, 200, 209, 213, 215, 216, 219, 222, 224, 229, 236, 239, 241, 242, 245, 246, 248, 261, 264, 265, 279, 294, 296, 297], "simpli": [2, 3, 5, 8, 12, 21, 22, 30, 31, 45, 50, 51, 67, 68, 70, 74, 78, 99, 101, 104, 108, 110, 111, 116, 120, 125, 130, 141, 143, 155, 181, 186, 196, 207, 210, 216, 222, 223, 234, 235, 236, 241, 242, 245, 262, 264, 265, 277], "string": [2, 3, 4, 5, 7, 11, 12, 14, 15, 23, 41, 42, 48, 49, 52, 57, 68, 69, 70, 71, 72, 75, 81, 91, 96, 97, 98, 101, 104, 108, 110, 114, 116, 118, 120, 122, 128, 130, 133, 134, 135, 136, 162, 171, 175, 185, 189, 193, 199, 200, 201, 205, 206, 207, 212, 215, 217, 221, 226, 227, 233, 238, 242, 246, 247, 250, 251, 252, 257, 258, 259, 264, 265, 267, 268, 270, 272, 274, 293, 294, 297, 301], "repres": [2, 12, 13, 14, 15, 18, 21, 22, 23, 26, 31, 33, 35, 41, 43, 45, 48, 49, 50, 51, 52, 57, 58, 59, 60, 61, 63, 64, 67, 68, 69, 70, 73, 74, 76, 78, 79, 81, 83, 84, 85, 90, 91, 95, 97, 98, 99, 101, 104, 108, 110, 111, 112, 114, 116, 117, 121, 122, 124, 129, 130, 133, 134, 136, 137, 139, 140, 141, 143, 144, 145, 146, 149, 151, 153, 154, 155, 156, 158, 160, 162, 163, 165, 177, 178, 180, 184, 185, 188, 189, 191, 193, 195, 196, 197, 198, 199, 200, 201, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 217, 219, 222, 224, 226, 228, 229, 232, 233, 234, 236, 238, 239, 242, 244, 245, 246, 247, 248, 250, 251, 252, 259, 261, 264, 265, 270, 273, 277, 279, 287, 292, 294, 296, 297, 302, 303], "take": [2, 3, 5, 9, 11, 12, 13, 14, 15, 19, 21, 22, 23, 30, 31, 32, 33, 35, 44, 47, 49, 50, 53, 58, 59, 63, 67, 68, 69, 70, 74, 76, 80, 81, 91, 95, 97, 98, 99, 104, 108, 109, 110, 112, 114, 116, 118, 120, 124, 128, 133, 134, 136, 139, 140, 141, 143, 155, 158, 160, 174, 177, 180, 181, 185, 187, 188, 189, 190, 191, 193, 196, 199, 200, 201, 202, 203, 206, 209, 210, 212, 213, 214, 215, 216, 217, 219, 222, 223, 226, 229, 232, 233, 234, 235, 236, 238, 239, 242, 244, 245, 246, 248, 251, 257, 258, 260, 261, 264, 265, 270, 272, 273, 291, 292, 294, 296, 297, 298, 302], "within": [2, 5, 12, 13, 14, 21, 34, 47, 48, 49, 51, 68, 74, 81, 84, 98, 99, 101, 108, 109, 111, 112, 114, 116, 148, 156, 186, 201, 209, 210, 214, 216, 217, 222, 224, 234, 242, 244, 245, 246, 257, 258, 267], "case": [2, 3, 4, 5, 11, 12, 13, 14, 15, 19, 21, 22, 26, 28, 31, 32, 33, 34, 35, 36, 37, 41, 47, 48, 49, 50, 51, 53, 56, 59, 60, 64, 67, 68, 69, 70, 72, 73, 74, 76, 80, 83, 84, 85, 86, 90, 93, 95, 98, 99, 101, 104, 105, 108, 109, 110, 114, 117, 124, 128, 129, 133, 134, 140, 141, 143, 144, 145, 146, 152, 154, 156, 158, 164, 175, 181, 186, 188, 190, 191, 196, 197, 205, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 221, 222, 223, 225, 226, 231, 233, 234, 235, 236, 238, 239, 241, 242, 243, 244, 246, 247, 250, 252, 255, 257, 259, 260, 262, 264, 265, 266, 267, 270, 273, 274, 292, 296, 297, 298, 301, 302, 303], "abov": [2, 3, 4, 5, 8, 11, 12, 13, 15, 17, 19, 22, 23, 25, 26, 28, 30, 34, 35, 37, 47, 48, 49, 50, 52, 58, 59, 60, 64, 67, 68, 72, 73, 76, 78, 81, 84, 85, 93, 95, 98, 99, 104, 109, 110, 117, 124, 128, 133, 134, 136, 137, 139, 141, 143, 144, 145, 146, 151, 152, 154, 155, 156, 159, 186, 188, 191, 201, 207, 209, 210, 212, 213, 214, 215, 216, 217, 219, 221, 222, 223, 225, 226, 227, 233, 236, 238, 239, 242, 244, 245, 246, 250, 251, 258, 259, 265, 274, 275, 276, 277, 280, 294, 296, 297, 298, 302], "subpackag": [2, 281], "f2py": [2, 49, 109, 258, 259], "ufuncifi": [2, 49, 258], "cython": [2, 49, 109, 158, 258], "codegen": [2, 23, 109, 226, 258, 263, 289], "relat": [2, 3, 4, 5, 11, 12, 14, 22, 42, 44, 45, 47, 50, 52, 58, 59, 66, 70, 73, 74, 84, 90, 93, 95, 104, 108, 110, 111, 112, 114, 115, 118, 120, 127, 134, 137, 145, 148, 151, 152, 158, 160, 165, 173, 175, 195, 201, 205, 209, 211, 212, 213, 215, 219, 221, 222, 223, 225, 226, 230, 232, 233, 236, 238, 239, 241, 242, 244, 245, 246, 264, 302], "reli": [2, 12, 13, 49, 104, 109, 121, 219, 225, 226, 233, 238, 245, 260, 265, 298], "llvm": 2, "gcc": [2, 259], "ifort": 2, "therefor": [2, 3, 4, 12, 23, 28, 32, 50, 59, 64, 68, 72, 76, 81, 84, 97, 108, 111, 114, 124, 133, 139, 207, 210, 211, 212, 216, 219, 222, 226, 242, 245, 246, 247, 252, 270, 272, 274, 275, 277, 279], "given": [2, 3, 5, 8, 12, 13, 14, 15, 17, 19, 21, 23, 26, 28, 30, 33, 35, 41, 43, 44, 47, 48, 49, 50, 52, 56, 57, 58, 59, 60, 61, 62, 64, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 95, 97, 98, 99, 101, 104, 107, 108, 110, 114, 116, 120, 122, 124, 125, 130, 131, 133, 134, 136, 139, 141, 145, 156, 164, 181, 186, 188, 195, 196, 197, 199, 201, 202, 203, 205, 207, 210, 211, 212, 213, 214, 215, 216, 217, 219, 221, 222, 223, 224, 225, 226, 229, 231, 232, 233, 234, 235, 236, 238, 239, 241, 242, 243, 244, 245, 246, 247, 251, 252, 255, 257, 259, 261, 264, 265, 267, 270, 273, 275, 277, 279, 291, 297, 300, 302, 303], "instead": [2, 3, 4, 5, 8, 11, 12, 13, 14, 15, 17, 21, 22, 23, 30, 32, 33, 35, 36, 37, 40, 41, 42, 44, 48, 49, 59, 61, 64, 68, 70, 71, 72, 73, 76, 95, 96, 98, 99, 101, 102, 104, 108, 111, 114, 122, 125, 127, 129, 139, 141, 143, 145, 155, 158, 189, 193, 201, 206, 207, 209, 210, 212, 213, 215, 216, 217, 219, 221, 222, 224, 226, 228, 236, 238, 242, 244, 245, 246, 250, 251, 252, 255, 260, 261, 262, 264, 265, 277, 280, 291, 292, 294, 296, 297, 298, 302, 303], "aesara": [2, 13, 49, 158], "aesaracod": [2, 13, 49, 109, 226], "contain": [2, 3, 4, 5, 8, 11, 12, 13, 14, 15, 17, 21, 22, 23, 30, 31, 32, 33, 35, 36, 37, 40, 42, 43, 47, 48, 49, 50, 51, 59, 60, 64, 66, 67, 70, 71, 72, 74, 76, 77, 79, 81, 82, 83, 84, 85, 94, 95, 97, 98, 99, 101, 104, 107, 108, 109, 110, 112, 114, 116, 119, 120, 122, 123, 125, 129, 130, 134, 135, 136, 139, 143, 145, 155, 156, 158, 159, 160, 161, 162, 164, 165, 166, 178, 181, 183, 186, 188, 191, 210, 211, 212, 213, 214, 215, 216, 217, 219, 221, 222, 226, 227, 228, 233, 234, 236, 238, 239, 240, 242, 243, 244, 245, 246, 250, 251, 252, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 270, 273, 281, 292, 294, 298, 302], "aeseara": 2, "previous": [2, 3, 11, 13, 67, 114, 129, 133, 149, 152, 207, 225, 238, 246, 277], "theano": [2, 13, 158, 301], "return": [2, 3, 4, 5, 11, 12, 13, 14, 15, 17, 19, 21, 22, 23, 28, 31, 32, 34, 36, 37, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 56, 57, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 90, 91, 93, 95, 97, 98, 99, 100, 101, 104, 105, 107, 108, 110, 111, 112, 114, 115, 116, 118, 120, 122, 124, 125, 126, 127, 129, 130, 131, 133, 134, 135, 136, 137, 139, 140, 141, 143, 145, 149, 153, 155, 156, 158, 160, 162, 163, 164, 165, 167, 168, 172, 175, 176, 177, 180, 181, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 205, 207, 210, 211, 212, 213, 214, 215, 216, 217, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 238, 239, 241, 242, 243, 244, 246, 247, 248, 250, 251, 252, 253, 255, 257, 258, 259, 260, 261, 262, 264, 265, 267, 268, 270, 273, 275, 277, 291, 292, 297, 298, 301, 302, 303], "graph": [2, 4, 14, 60, 76, 97, 104, 109, 215, 226, 245, 246, 264, 297, 301], "object": [2, 3, 4, 5, 7, 11, 12, 14, 15, 20, 21, 22, 23, 26, 35, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 52, 58, 59, 60, 61, 62, 63, 67, 68, 70, 73, 74, 76, 78, 79, 80, 81, 83, 84, 85, 93, 95, 98, 99, 101, 102, 104, 109, 110, 114, 115, 116, 117, 120, 122, 124, 125, 128, 130, 133, 134, 135, 136, 137, 139, 140, 141, 145, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 164, 165, 166, 174, 175, 177, 185, 186, 190, 191, 193, 194, 195, 197, 198, 201, 205, 206, 209, 210, 212, 213, 214, 215, 216, 217, 219, 221, 222, 226, 228, 229, 232, 233, 234, 235, 238, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 257, 258, 259, 260, 261, 264, 265, 268, 273, 274, 275, 280, 281, 285, 291, 292, 294, 296, 297, 298, 301, 302], "llvmlite": 2, "llvmjitcod": 2, "jit": [2, 235], "from": [2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 17, 18, 19, 21, 22, 23, 26, 28, 30, 34, 35, 36, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 139, 140, 141, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 183, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 238, 239, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 255, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 270, 272, 273, 274, 275, 276, 277, 279, 280, 288, 291, 292, 294, 296, 297, 298, 301, 302, 303], "around": [2, 3, 4, 5, 7, 11, 12, 13, 14, 15, 22, 23, 39, 47, 57, 60, 68, 69, 70, 72, 74, 77, 84, 88, 104, 107, 108, 120, 130, 133, 137, 140, 151, 155, 159, 210, 216, 219, 221, 226, 228, 233, 239, 242, 245, 246, 257, 270, 272, 292, 294, 296], "llvm_callabl": 2, "callabl": [2, 15, 35, 49, 59, 104, 110, 134, 135, 176, 221, 226, 227, 238, 255, 258, 259, 264, 265, 266], "unlik": [2, 4, 12, 14, 15, 21, 22, 28, 35, 46, 68, 69, 95, 104, 108, 110, 141, 209, 215, 219, 226, 239, 242, 245, 261, 262, 294, 296, 297, 298, 301], "two": [2, 3, 4, 5, 7, 8, 11, 12, 13, 14, 15, 17, 19, 21, 22, 23, 28, 30, 32, 35, 36, 41, 47, 48, 49, 50, 53, 57, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 72, 73, 74, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 93, 95, 97, 98, 99, 101, 104, 108, 109, 110, 112, 114, 116, 117, 118, 120, 121, 124, 125, 128, 129, 130, 133, 134, 137, 140, 144, 149, 151, 152, 153, 155, 156, 163, 164, 165, 170, 171, 175, 177, 180, 181, 186, 187, 188, 189, 190, 191, 193, 195, 196, 200, 201, 202, 203, 205, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 221, 222, 223, 225, 226, 227, 228, 233, 234, 235, 236, 238, 239, 242, 243, 244, 245, 246, 247, 248, 251, 261, 264, 265, 270, 273, 275, 276, 277, 279, 291, 292, 295, 297, 298, 302], "tensorflow_cod": 2, "avail": [2, 5, 7, 8, 9, 13, 14, 15, 21, 28, 34, 37, 38, 39, 48, 49, 59, 60, 67, 68, 73, 76, 95, 104, 108, 109, 110, 141, 155, 158, 212, 216, 217, 219, 222, 226, 227, 232, 234, 236, 238, 239, 244, 245, 246, 247, 251, 252, 257, 264, 265, 269, 270, 294, 301], "order": [2, 3, 4, 5, 11, 12, 13, 14, 15, 17, 19, 21, 22, 26, 28, 30, 35, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 78, 81, 84, 85, 87, 90, 93, 95, 96, 97, 98, 99, 104, 105, 108, 109, 110, 111, 114, 116, 117, 118, 124, 125, 128, 129, 133, 134, 139, 141, 142, 143, 144, 152, 153, 154, 155, 156, 164, 168, 172, 175, 185, 186, 187, 188, 189, 190, 191, 195, 196, 200, 201, 203, 205, 206, 209, 210, 212, 213, 214, 215, 216, 217, 219, 221, 223, 225, 226, 227, 228, 229, 232, 234, 238, 239, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 257, 258, 259, 261, 264, 265, 267, 270, 272, 274, 275, 280, 292, 294, 295, 297, 301, 302, 303], "detect": [2, 8, 40, 47, 101, 104, 108, 110, 212, 216, 226, 242, 243, 245, 247, 264, 301], "assum": [2, 4, 14, 15, 18, 21, 23, 32, 35, 36, 41, 44, 49, 50, 52, 57, 59, 67, 68, 69, 70, 73, 74, 76, 78, 85, 86, 93, 95, 104, 108, 116, 120, 124, 129, 137, 139, 140, 141, 147, 153, 154, 155, 156, 158, 164, 186, 190, 191, 201, 205, 207, 213, 214, 216, 219, 222, 224, 226, 233, 234, 236, 238, 239, 242, 243, 244, 245, 246, 250, 251, 252, 259, 264, 267, 273, 275, 279, 282, 295, 297, 300, 302, 303], "wurlitz": 2, "allow": [2, 3, 5, 11, 12, 13, 14, 15, 21, 23, 25, 28, 45, 48, 49, 50, 52, 59, 61, 64, 67, 68, 69, 72, 74, 76, 78, 79, 80, 93, 96, 98, 99, 101, 102, 104, 108, 109, 110, 114, 117, 133, 134, 140, 141, 143, 151, 155, 156, 158, 163, 175, 191, 195, 196, 197, 210, 212, 213, 216, 217, 219, 221, 222, 223, 226, 231, 233, 234, 235, 238, 239, 242, 244, 245, 246, 247, 251, 257, 260, 262, 264, 265, 275, 294, 297], "captur": [2, 13, 68, 264], "output": [2, 4, 5, 11, 12, 13, 15, 16, 19, 21, 23, 26, 32, 35, 37, 48, 49, 68, 69, 76, 92, 95, 96, 98, 99, 101, 104, 108, 109, 110, 121, 124, 134, 139, 141, 149, 155, 158, 159, 163, 164, 175, 187, 191, 200, 201, 205, 206, 207, 210, 216, 219, 222, 226, 227, 236, 238, 239, 241, 242, 244, 246, 251, 257, 258, 259, 261, 264, 265, 270, 294, 296, 297, 298, 301, 302, 303], "suit": [2, 3, 5, 11, 12, 21, 23, 32, 33, 48, 212, 222, 255, 257], "stat": [2, 9, 281, 288], "sampl": [2, 19, 59, 71, 122, 124, 175, 212, 226, 246, 292, 296], "At": [2, 12, 21, 23, 32, 47, 64, 74, 76, 95, 108, 116, 117, 128, 196, 200, 210, 215, 221, 236, 265], "least": [2, 3, 5, 7, 11, 12, 13, 17, 21, 35, 45, 47, 49, 59, 68, 74, 80, 92, 93, 95, 104, 108, 109, 134, 171, 185, 193, 195, 213, 214, 216, 217, 219, 221, 222, 233, 235, 238, 242, 244, 245, 246, 259, 302], "follow": [2, 3, 4, 5, 7, 8, 11, 12, 13, 15, 17, 19, 21, 22, 23, 26, 28, 30, 31, 32, 33, 34, 35, 36, 37, 39, 42, 44, 47, 48, 49, 50, 51, 57, 58, 59, 60, 61, 64, 67, 68, 69, 72, 73, 74, 76, 80, 82, 84, 91, 92, 93, 95, 98, 99, 101, 104, 108, 109, 114, 116, 117, 120, 129, 133, 134, 136, 137, 139, 140, 141, 143, 151, 152, 153, 154, 155, 156, 158, 160, 164, 183, 186, 188, 191, 194, 196, 200, 201, 207, 209, 210, 211, 212, 213, 214, 217, 219, 220, 221, 222, 224, 225, 226, 227, 228, 233, 235, 236, 238, 239, 242, 243, 244, 245, 246, 247, 250, 251, 252, 257, 260, 261, 264, 265, 274, 275, 277, 291, 292, 294, 295, 297, 298, 302, 303], "random": [2, 4, 13, 51, 52, 57, 59, 60, 66, 69, 78, 81, 82, 103, 104, 108, 175, 187, 212, 217, 219, 221, 222, 226, 256, 257, 260, 264, 294, 298, 302], "pymc": [2, 246], "manipul": [2, 14, 18, 19, 21, 28, 31, 33, 35, 48, 49, 50, 59, 68, 74, 76, 93, 108, 109, 132, 141, 151, 156, 189, 209, 215, 216, 217, 220, 225, 226, 228, 235, 238, 249, 264, 281, 287, 288, 291, 292, 293, 294, 295, 296, 298, 301, 302], "first": [2, 4, 5, 7, 8, 9, 11, 12, 14, 15, 19, 21, 22, 23, 25, 28, 32, 35, 36, 39, 41, 48, 49, 50, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 81, 82, 84, 85, 92, 93, 95, 97, 98, 99, 104, 107, 108, 111, 112, 114, 116, 117, 124, 125, 129, 131, 133, 134, 136, 137, 139, 140, 141, 143, 144, 145, 146, 151, 152, 155, 156, 159, 163, 164, 168, 172, 175, 180, 181, 184, 185, 186, 187, 188, 190, 191, 194, 196, 201, 205, 209, 210, 212, 213, 215, 217, 219, 220, 221, 222, 223, 226, 227, 228, 229, 232, 233, 235, 236, 238, 239, 242, 243, 244, 245, 246, 250, 252, 255, 257, 258, 259, 260, 264, 265, 267, 275, 280, 291, 292, 294, 296, 297, 298, 300, 302, 303], "use_symengin": 2, "1": [2, 3, 5, 7, 8, 11, 12, 14, 15, 17, 18, 19, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 116, 118, 120, 122, 124, 125, 126, 127, 128, 130, 131, 133, 134, 136, 137, 139, 140, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 156, 158, 159, 160, 162, 163, 164, 165, 166, 170, 173, 174, 175, 176, 177, 179, 180, 181, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 267, 270, 273, 274, 275, 277, 280, 287, 291, 292, 294, 296, 297, 298, 301, 302, 303], "environ": [2, 6, 8, 10, 11, 12, 13, 14, 68, 96, 206, 226, 246, 257, 267, 294, 296, 301], "physic": [2, 4, 19, 24, 26, 49, 61, 104, 108, 111, 112, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 126, 127, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 148, 149, 150, 151, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 201, 202, 203, 205, 206, 211, 220, 246, 261, 264, 277, 296, 302], "mechan": [2, 23, 27, 68, 91, 95, 104, 114, 116, 129, 130, 131, 133, 134, 135, 136, 137, 139, 140, 141, 143, 144, 145, 146, 148, 149, 150, 173, 177, 180, 186, 188, 189, 190, 193, 200, 201, 208, 211, 287], "liealgebra": [2, 97], "thing": [2, 3, 4, 5, 7, 11, 12, 13, 14, 15, 16, 21, 22, 23, 28, 30, 38, 45, 49, 58, 59, 60, 68, 70, 80, 96, 97, 98, 99, 104, 109, 110, 128, 141, 155, 158, 175, 191, 196, 209, 210, 215, 223, 225, 233, 234, 235, 238, 242, 245, 250, 260, 262, 264, 291, 292, 294, 296, 297, 298, 301, 302], "configur": [2, 3, 11, 12, 13, 26, 60, 98, 124, 133, 134, 144, 145, 148, 150, 151, 153, 155, 226], "otherwis": [2, 3, 12, 17, 21, 22, 23, 47, 48, 49, 59, 60, 64, 67, 68, 69, 72, 74, 76, 77, 78, 81, 82, 83, 84, 93, 95, 97, 98, 100, 104, 107, 108, 110, 122, 124, 126, 130, 139, 140, 141, 176, 181, 187, 205, 208, 209, 212, 213, 215, 217, 219, 221, 222, 224, 226, 228, 229, 231, 232, 234, 238, 239, 242, 243, 244, 245, 246, 247, 255, 257, 259, 264, 265, 291, 292, 301], "ordinari": [2, 21, 22, 29, 47, 49, 59, 68, 72, 73, 74, 76, 86, 90, 91, 95, 105, 111, 114, 124, 151, 213, 215, 216, 225, 232, 242, 247, 261, 296, 302], "x": [2, 3, 4, 5, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 57, 59, 60, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 104, 107, 108, 109, 110, 111, 114, 116, 117, 118, 120, 122, 124, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 139, 140, 141, 143, 144, 145, 146, 148, 149, 150, 152, 153, 154, 155, 156, 158, 159, 163, 165, 166, 167, 168, 169, 171, 172, 175, 180, 181, 186, 188, 189, 190, 191, 192, 200, 201, 202, 203, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 238, 239, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 257, 258, 259, 260, 262, 264, 265, 267, 270, 273, 274, 275, 276, 277, 279, 280, 291, 292, 294, 296, 297, 298, 301, 302, 303], "still": [2, 3, 4, 5, 12, 13, 14, 15, 21, 23, 39, 40, 41, 48, 60, 67, 68, 69, 76, 80, 95, 99, 104, 110, 111, 114, 141, 191, 210, 212, 213, 214, 215, 219, 221, 226, 233, 235, 236, 238, 242, 244, 245, 251, 257, 264, 277, 298], "experiment": [2, 3, 139, 238], "mathemat": [2, 3, 5, 12, 13, 14, 18, 21, 23, 30, 32, 34, 35, 37, 38, 41, 43, 44, 47, 49, 50, 54, 58, 60, 67, 68, 69, 70, 73, 74, 75, 76, 81, 82, 93, 95, 98, 101, 104, 108, 109, 110, 124, 125, 128, 145, 157, 196, 207, 209, 210, 213, 214, 216, 217, 220, 225, 226, 234, 235, 239, 241, 242, 245, 246, 251, 258, 259, 265, 270, 274, 277, 279, 291, 294, 295, 296, 297, 300, 302], "softwar": [2, 5, 95, 220, 296], "itself": [2, 3, 4, 5, 7, 11, 12, 13, 14, 23, 45, 57, 59, 60, 66, 68, 70, 73, 74, 81, 85, 90, 108, 115, 134, 139, 141, 156, 181, 188, 207, 209, 212, 213, 215, 216, 217, 219, 221, 222, 226, 234, 235, 238, 245, 250, 251, 252, 259, 261, 264, 279, 296], "_sage_": 2, "basic": [2, 3, 4, 5, 7, 10, 11, 13, 14, 21, 23, 37, 41, 43, 48, 49, 50, 56, 59, 63, 66, 67, 71, 74, 84, 86, 91, 92, 93, 98, 99, 102, 105, 112, 124, 133, 139, 141, 153, 154, 156, 158, 159, 165, 175, 189, 196, 199, 204, 207, 208, 210, 212, 213, 215, 217, 218, 219, 221, 223, 224, 226, 227, 233, 238, 239, 242, 243, 244, 245, 246, 257, 259, 264, 265, 268, 276, 277, 278, 285, 287, 288, 292, 293, 294, 295, 300], "should": [2, 4, 5, 8, 9, 11, 12, 13, 14, 15, 18, 21, 22, 23, 25, 28, 35, 37, 40, 42, 44, 47, 48, 49, 50, 59, 60, 61, 62, 64, 67, 68, 69, 71, 72, 74, 76, 78, 79, 80, 81, 82, 83, 85, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 104, 108, 110, 112, 114, 116, 122, 124, 128, 129, 134, 135, 139, 140, 141, 143, 145, 153, 155, 156, 158, 159, 160, 171, 174, 175, 179, 181, 183, 185, 186, 189, 191, 193, 194, 196, 197, 201, 206, 209, 210, 212, 213, 214, 215, 216, 217, 219, 221, 222, 225, 226, 228, 229, 232, 233, 234, 235, 236, 238, 239, 241, 242, 244, 245, 246, 250, 251, 255, 257, 258, 259, 260, 261, 262, 264, 265, 267, 270, 274, 291, 292, 294, 295, 298], "beyond": [2, 11, 12, 21, 30, 62, 84, 108, 155, 213, 216, 235, 238, 298], "control": [2, 7, 9, 13, 15, 17, 21, 23, 27, 48, 50, 68, 69, 72, 93, 98, 99, 111, 112, 114, 129, 155, 158, 171, 175, 186, 187, 191, 215, 222, 223, 227, 234, 239, 245, 264, 287, 291], "instruct": [2, 4, 5, 7, 8, 9, 11, 13, 15, 19, 24, 38, 49, 226, 244, 258, 259], "base": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 15, 21, 23, 28, 39, 41, 43, 44, 47, 49, 50, 57, 58, 59, 64, 65, 66, 68, 69, 71, 73, 74, 75, 76, 79, 81, 84, 91, 95, 96, 97, 98, 100, 101, 108, 109, 110, 111, 112, 114, 121, 129, 130, 133, 136, 137, 139, 140, 141, 143, 158, 159, 160, 169, 171, 175, 176, 180, 186, 187, 189, 191, 193, 196, 197, 199, 201, 203, 206, 207, 210, 211, 212, 215, 216, 217, 218, 219, 220, 221, 222, 226, 228, 233, 234, 235, 236, 238, 239, 242, 244, 246, 250, 251, 252, 257, 258, 259, 260, 261, 262, 264, 265, 266, 270, 273, 274, 277, 297, 302], "pytest": [2, 3, 11, 12, 13, 254, 260, 262, 265, 289], "entir": [2, 3, 12, 21, 59, 68, 69, 72, 73, 76, 82, 84, 93, 107, 131, 139, 152, 156, 201, 213, 215, 221, 234, 251, 260, 262, 296, 302], "import_modul": [2, 12], "own": [2, 4, 9, 11, 12, 15, 23, 43, 52, 59, 60, 68, 84, 110, 112, 117, 133, 141, 158, 221, 226, 233, 238, 242, 261, 264, 265, 296], "runner": [2, 12, 257], "access": [2, 4, 5, 9, 13, 14, 15, 21, 23, 42, 43, 44, 49, 68, 76, 97, 98, 101, 104, 109, 111, 114, 117, 124, 125, 133, 134, 137, 139, 141, 159, 200, 201, 207, 210, 212, 215, 216, 217, 219, 221, 238, 242, 247, 250, 258, 259, 274, 277, 297, 301], "script": [2, 4, 11, 14, 25, 40, 76, 206, 258], "directori": [2, 4, 5, 7, 8, 11, 12, 39, 44, 49, 110, 242, 257, 258, 267], "prefer": [2, 4, 8, 9, 11, 12, 13, 14, 21, 23, 25, 28, 33, 34, 35, 49, 51, 60, 67, 68, 76, 108, 110, 112, 133, 141, 191, 195, 196, 201, 212, 215, 217, 219, 221, 226, 234, 238, 242, 244, 251, 257, 259, 262, 265, 296, 298], "cloudpickl": 2, "effect": [2, 4, 7, 12, 23, 34, 39, 59, 61, 68, 85, 93, 95, 99, 104, 116, 141, 143, 155, 163, 191, 201, 212, 216, 219, 223, 225, 242, 294], "pickl": 2, "util": [2, 3, 4, 5, 7, 11, 30, 32, 47, 55, 57, 59, 60, 73, 74, 79, 80, 81, 84, 98, 99, 108, 109, 115, 129, 134, 137, 161, 195, 198, 215, 219, 223, 226, 238, 239, 255, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 282, 287, 288], "test_pickl": 2, "py": [2, 3, 4, 11, 12, 21, 25, 48, 68, 79, 93, 95, 104, 110, 139, 169, 171, 212, 215, 217, 223, 226, 233, 236, 242, 243, 252, 255, 257, 262, 265], "hypothesi": 2, "necessari": [2, 3, 4, 6, 8, 11, 12, 13, 15, 21, 23, 38, 47, 48, 59, 60, 68, 78, 93, 95, 98, 104, 108, 110, 134, 143, 151, 212, 214, 216, 221, 222, 226, 229, 235, 238, 242, 243, 244, 245, 246, 247, 252, 257, 259, 264, 265, 270, 295, 300], "want": [2, 3, 4, 8, 9, 11, 12, 13, 14, 15, 18, 19, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 37, 39, 45, 47, 49, 50, 51, 52, 60, 68, 69, 75, 80, 82, 84, 87, 93, 95, 99, 101, 104, 105, 108, 109, 111, 114, 122, 124, 127, 135, 141, 158, 174, 184, 185, 188, 191, 194, 196, 203, 205, 209, 210, 212, 214, 215, 216, 219, 221, 222, 223, 225, 226, 227, 233, 234, 236, 238, 239, 242, 243, 244, 245, 246, 247, 252, 255, 257, 259, 261, 264, 265, 275, 277, 280, 291, 292, 294, 296, 297, 298, 299, 301, 302], "check": [2, 3, 4, 5, 7, 8, 9, 11, 14, 15, 17, 18, 19, 21, 22, 23, 31, 35, 37, 43, 44, 47, 48, 49, 51, 54, 57, 59, 60, 61, 66, 67, 68, 69, 73, 76, 80, 91, 93, 97, 98, 99, 101, 104, 105, 108, 124, 130, 131, 139, 140, 141, 155, 158, 171, 179, 191, 193, 194, 199, 207, 212, 213, 215, 216, 217, 219, 221, 222, 228, 234, 236, 238, 242, 243, 244, 245, 246, 250, 251, 255, 257, 259, 262, 264, 273, 277, 294, 302], "pdf": [2, 5, 7, 26, 35, 38, 47, 48, 59, 69, 71, 73, 90, 95, 104, 108, 116, 117, 120, 122, 124, 212, 215, 217, 220, 225, 226, 229, 235, 238, 239, 242, 246, 264, 270], "view": [2, 4, 7, 11, 12, 14, 37, 49, 50, 51, 68, 104, 116, 193, 196, 210, 212, 219, 226, 242, 245, 259, 261, 264], "host": [2, 5], "onlin": [2, 4, 134, 239, 264], "dev": [2, 3, 8, 9, 11, 262], "index": [2, 8, 11, 12, 13, 15, 23, 28, 35, 36, 37, 41, 49, 57, 59, 60, 64, 67, 68, 69, 70, 73, 74, 76, 79, 84, 93, 95, 98, 99, 101, 104, 107, 108, 110, 112, 124, 139, 141, 158, 159, 160, 162, 164, 165, 175, 184, 186, 188, 191, 196, 201, 212, 213, 215, 217, 221, 222, 223, 226, 231, 232, 236, 244, 246, 247, 249, 250, 252, 253, 258, 285], "com": [2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 23, 26, 39, 41, 45, 47, 59, 61, 62, 68, 69, 71, 72, 73, 74, 76, 78, 84, 85, 93, 95, 99, 104, 108, 122, 211, 220, 229, 231, 234, 235, 238, 239, 242, 245, 246, 264, 267, 298], "sympy_benchmark": 2, "readm": 2, "yourself": [2, 7, 11, 12, 23, 25, 37, 49, 143, 260, 292], "reproduc": [2, 12, 28, 222, 257, 302], "result": [2, 4, 8, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 37, 41, 42, 43, 44, 45, 47, 48, 49, 58, 59, 60, 64, 67, 68, 69, 70, 72, 74, 76, 80, 85, 86, 90, 92, 93, 95, 97, 98, 99, 101, 104, 107, 108, 109, 110, 111, 116, 124, 125, 128, 129, 130, 131, 134, 135, 140, 141, 145, 151, 155, 158, 174, 176, 183, 185, 186, 188, 190, 191, 193, 194, 195, 196, 200, 201, 210, 212, 213, 215, 216, 217, 219, 220, 221, 222, 223, 224, 226, 228, 233, 234, 235, 236, 238, 239, 241, 242, 243, 244, 245, 246, 247, 250, 251, 253, 257, 258, 259, 261, 262, 264, 265, 267, 270, 273, 275, 294, 296, 297, 298, 302], "add": [2, 3, 4, 9, 12, 14, 15, 18, 21, 35, 41, 43, 47, 49, 57, 59, 64, 69, 72, 75, 83, 85, 93, 97, 101, 104, 108, 116, 118, 120, 130, 139, 141, 158, 169, 175, 185, 190, 191, 194, 209, 210, 212, 215, 216, 217, 219, 221, 222, 223, 226, 227, 236, 238, 239, 242, 243, 245, 246, 248, 250, 251, 252, 260, 265, 268, 292, 294, 297, 301, 302], "new": [2, 3, 5, 6, 7, 8, 9, 12, 14, 21, 23, 31, 38, 43, 44, 48, 49, 50, 59, 60, 67, 68, 69, 70, 76, 81, 84, 93, 95, 96, 99, 104, 108, 110, 112, 114, 116, 118, 120, 124, 129, 130, 133, 141, 148, 150, 157, 158, 160, 181, 187, 188, 191, 193, 196, 197, 199, 200, 201, 205, 210, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 226, 233, 236, 238, 239, 242, 244, 245, 246, 247, 248, 257, 258, 262, 265, 270, 272, 274, 290, 291, 294, 297, 298, 300], "asv": 2, "airspe": 2, "veloc": [2, 104, 112, 114, 128, 129, 130, 133, 134, 136, 137, 139, 143, 144, 145, 148, 149, 150, 152, 155, 156, 158, 165, 193, 195, 196, 200, 201, 205, 207, 210, 277, 279], "name": [2, 3, 4, 5, 8, 12, 13, 14, 15, 21, 23, 25, 35, 36, 40, 43, 44, 48, 49, 50, 51, 55, 58, 61, 64, 67, 68, 69, 70, 73, 74, 75, 76, 78, 81, 93, 95, 96, 97, 101, 104, 108, 110, 111, 114, 115, 116, 120, 129, 130, 133, 136, 139, 141, 143, 158, 162, 171, 186, 193, 196, 197, 198, 199, 200, 201, 203, 205, 207, 210, 212, 213, 214, 216, 217, 219, 221, 223, 226, 232, 236, 238, 239, 242, 243, 245, 246, 251, 252, 255, 257, 258, 259, 260, 265, 267, 268, 270, 274, 277, 282, 291, 294, 297, 298, 302], "describ": [3, 4, 5, 7, 11, 13, 15, 21, 22, 23, 28, 35, 41, 48, 50, 58, 59, 60, 62, 63, 66, 67, 68, 69, 73, 76, 78, 83, 84, 93, 95, 99, 104, 107, 108, 114, 124, 128, 129, 133, 134, 135, 136, 137, 139, 141, 144, 145, 146, 148, 150, 151, 152, 153, 154, 155, 156, 170, 191, 196, 200, 201, 207, 209, 210, 213, 215, 216, 219, 221, 227, 233, 236, 238, 239, 242, 245, 246, 250, 259, 264, 265, 270, 272, 277, 292], "step": [3, 8, 9, 23, 24, 26, 38, 47, 49, 59, 63, 64, 67, 68, 69, 76, 92, 93, 95, 104, 108, 109, 134, 139, 148, 151, 153, 158, 159, 193, 205, 210, 211, 212, 215, 216, 217, 219, 221, 222, 226, 227, 228, 231, 234, 235, 236, 238, 239, 242, 244, 246, 251, 258, 264, 265, 292], "properli": [3, 11, 12, 14, 23, 48, 68, 74, 80, 93, 104, 135, 141, 153, 168, 172, 175, 189, 214, 216, 226, 242, 245, 255, 259, 265, 298, 303], "current": [3, 5, 11, 12, 13, 15, 21, 30, 31, 41, 44, 47, 48, 49, 50, 52, 59, 62, 63, 65, 66, 67, 68, 70, 74, 76, 78, 80, 83, 88, 91, 93, 95, 97, 99, 104, 108, 110, 116, 121, 128, 133, 141, 151, 185, 190, 191, 195, 199, 210, 212, 213, 214, 215, 217, 219, 222, 223, 225, 226, 227, 233, 236, 238, 239, 241, 242, 243, 244, 245, 246, 252, 257, 258, 259, 261, 274, 288, 298, 303], "activ": [3, 8, 9, 16, 112, 113, 114, 115, 143, 212, 255, 260, 262, 287], "updat": [3, 11, 13, 15, 35, 39, 68, 139, 145, 171, 181, 184, 185, 187, 211, 215, 219, 222, 226, 239, 252, 262], "continu": [3, 4, 5, 12, 13, 19, 22, 23, 26, 47, 49, 58, 60, 62, 68, 73, 74, 76, 93, 96, 99, 108, 121, 122, 124, 186, 189, 206, 217, 219, 222, 239, 241, 242, 250, 293], "someon": [3, 11, 12, 242, 261, 295], "warn": [3, 4, 15, 23, 68, 69, 83, 110, 201, 210, 212, 214, 226, 242, 244, 255, 257, 259, 263, 264, 289, 298], "screen": [3, 14, 96, 206, 210, 257, 301], "indic": [3, 4, 11, 12, 15, 18, 21, 32, 35, 36, 47, 48, 49, 50, 52, 57, 59, 60, 61, 63, 64, 66, 67, 68, 71, 72, 73, 76, 78, 83, 84, 93, 95, 98, 99, 101, 104, 107, 108, 125, 139, 145, 175, 186, 188, 189, 191, 196, 200, 201, 211, 215, 216, 217, 221, 222, 223, 226, 233, 234, 235, 238, 239, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 257, 258, 259, 264, 298], "remov": [3, 11, 12, 13, 21, 30, 41, 42, 43, 59, 62, 66, 68, 72, 74, 76, 83, 84, 93, 98, 104, 108, 111, 116, 118, 120, 130, 133, 134, 148, 150, 155, 175, 191, 217, 219, 222, 224, 225, 226, 238, 239, 242, 244, 245, 247, 248, 258, 259, 260, 262, 264, 265, 291, 302], "futur": [3, 11, 12, 21, 22, 49, 50, 68, 93, 95, 104, 110, 133, 139, 143, 151, 155, 191, 195, 208, 212, 214, 215, 225, 226, 238, 242, 251, 257, 260, 262, 265, 287, 297, 303], "chanc": [3, 12, 15, 22, 68, 96, 104, 236, 246, 297], "break": [3, 4, 11, 12, 13, 23, 48, 49, 60, 68, 69, 108, 209, 223, 226, 234, 264], "opportun": [3, 4, 238], "messag": [3, 7, 12, 13, 69, 96, 255, 260, 262, 267], "wrong": [3, 5, 11, 12, 13, 59, 68, 69, 76, 78, 104, 201, 216, 242, 260, 294, 298], "answer": [3, 7, 12, 21, 23, 28, 59, 68, 72, 90, 93, 95, 98, 104, 108, 196, 219, 223, 235, 236, 238, 244, 246, 261, 267, 296, 298, 302], "made": [3, 5, 11, 12, 13, 14, 15, 21, 23, 36, 62, 64, 68, 69, 74, 77, 78, 81, 84, 85, 95, 98, 104, 108, 110, 129, 137, 141, 152, 155, 158, 210, 213, 215, 217, 219, 221, 222, 226, 227, 233, 234, 235, 238, 242, 244, 245, 246, 259, 264, 267, 279, 297], "lightli": 3, "fix": [3, 4, 7, 12, 13, 49, 59, 61, 64, 66, 69, 73, 76, 80, 97, 104, 108, 110, 116, 117, 129, 130, 133, 136, 139, 143, 152, 158, 175, 180, 184, 187, 191, 196, 201, 205, 209, 210, 212, 216, 219, 221, 222, 223, 226, 232, 236, 244, 246, 264, 270, 272], "whether": [3, 7, 8, 12, 13, 14, 21, 22, 23, 28, 33, 35, 36, 37, 47, 48, 49, 54, 59, 67, 68, 69, 75, 76, 80, 83, 95, 96, 98, 99, 104, 108, 112, 114, 120, 128, 134, 135, 139, 141, 174, 179, 198, 203, 210, 212, 215, 216, 217, 221, 222, 226, 229, 233, 234, 238, 239, 242, 244, 245, 246, 247, 257, 259, 264, 265, 270, 273, 294, 298], "worth": [3, 21, 23, 134, 201, 275, 277], "pain": 3, "frustrat": 3, "go": [3, 4, 5, 7, 9, 11, 12, 23, 39, 48, 49, 59, 69, 73, 74, 93, 134, 141, 143, 156, 158, 159, 185, 196, 205, 212, 221, 222, 233, 236, 242, 294, 296, 297, 300, 302], "seek": [3, 244], "stabl": [3, 4, 5, 23, 26, 49, 68, 96, 104, 110, 112, 120, 124, 258, 291], "done": [3, 4, 9, 11, 12, 13, 14, 15, 19, 23, 43, 44, 46, 47, 48, 49, 59, 61, 66, 68, 69, 70, 73, 76, 79, 80, 93, 95, 99, 104, 108, 115, 133, 134, 139, 141, 143, 149, 156, 158, 177, 186, 187, 188, 191, 193, 194, 201, 207, 209, 210, 212, 213, 215, 219, 222, 223, 225, 226, 227, 235, 238, 239, 242, 244, 245, 246, 251, 252, 257, 258, 261, 265, 274, 275, 291, 294, 296, 297, 298], "exist": [3, 7, 11, 13, 14, 19, 21, 23, 34, 37, 47, 48, 49, 52, 59, 68, 72, 78, 80, 83, 84, 85, 86, 95, 98, 104, 108, 120, 135, 139, 181, 207, 210, 212, 213, 214, 215, 217, 219, 221, 226, 233, 234, 236, 239, 242, 244, 245, 257, 265, 275, 296, 298, 303], "necessarili": [3, 4, 21, 45, 68, 69, 70, 93, 95, 98, 134, 213, 214, 215, 221, 222, 224, 238, 242, 244, 245], "supplant": 3, "old": [3, 12, 13, 14, 15, 68, 69, 70, 96, 155, 160, 196, 206, 212, 213, 217, 226, 227, 238, 242, 245, 247, 291], "sometim": [3, 4, 5, 11, 12, 13, 14, 15, 21, 23, 28, 35, 48, 49, 68, 73, 76, 92, 93, 124, 151, 155, 183, 191, 210, 213, 216, 221, 226, 228, 233, 235, 239, 242, 244, 255, 264, 291, 298], "alongsid": [3, 11, 12, 13, 23, 101, 129], "newer": [3, 12, 14, 110, 209, 244], "solveset": [3, 23, 34, 37, 134, 158, 224, 240, 241, 244, 282, 303], "superior": [3, 226], "replac": [3, 4, 9, 12, 13, 14, 15, 21, 47, 49, 59, 67, 68, 69, 72, 73, 74, 76, 78, 82, 95, 98, 99, 104, 108, 109, 110, 128, 131, 133, 158, 180, 186, 201, 212, 213, 219, 222, 223, 227, 233, 235, 236, 238, 242, 244, 245, 252, 253, 264, 265, 267, 291, 300], "older": [3, 5, 12, 14, 91, 141, 216, 226, 244], "solv": [3, 4, 11, 13, 14, 15, 16, 19, 21, 23, 24, 26, 27, 49, 52, 64, 67, 68, 76, 81, 93, 95, 99, 100, 104, 108, 111, 112, 114, 116, 118, 119, 120, 133, 134, 135, 139, 141, 144, 145, 148, 150, 151, 153, 155, 158, 194, 215, 219, 223, 224, 225, 226, 228, 238, 239, 241, 242, 243, 246, 287, 292, 293, 296, 298, 301], "remain": [3, 12, 13, 14, 23, 43, 44, 49, 59, 60, 62, 64, 68, 69, 74, 93, 99, 108, 110, 125, 141, 190, 207, 209, 210, 221, 222, 223, 232, 235, 236, 242, 243, 244, 246, 248, 252, 261, 264, 265, 274, 279, 291, 294, 296, 297, 298], "intact": [3, 13, 49, 258], "cogniz": 3, "properti": [3, 12, 14, 18, 23, 28, 33, 35, 41, 43, 44, 47, 48, 49, 50, 51, 52, 56, 57, 59, 60, 61, 62, 63, 67, 68, 69, 70, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 91, 93, 95, 99, 101, 104, 108, 111, 112, 114, 116, 117, 118, 120, 121, 124, 129, 130, 133, 134, 136, 137, 139, 140, 156, 158, 160, 162, 165, 166, 169, 170, 175, 176, 177, 179, 180, 187, 189, 191, 193, 195, 196, 198, 199, 200, 201, 202, 203, 207, 210, 211, 212, 214, 215, 216, 217, 219, 221, 222, 225, 228, 229, 232, 233, 234, 236, 239, 242, 245, 246, 251, 252, 257, 259, 260, 270, 273, 274, 275, 277, 279, 298], "attr": [3, 49], "imposs": [3, 4, 12, 13, 14, 23, 35, 68, 216, 235, 242, 243, 255, 294, 302], "later": [3, 13, 19, 49, 59, 93, 98, 99, 128, 135, 136, 139, 143, 145, 146, 153, 155, 158, 165, 200, 209, 216, 219, 225, 226, 227, 236, 238, 242, 261, 274, 291, 292, 294, 296, 297, 302], "unsur": [3, 4, 12], "about": [3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 16, 19, 21, 22, 23, 28, 33, 35, 37, 38, 39, 41, 42, 44, 45, 48, 49, 59, 60, 61, 62, 68, 72, 74, 76, 78, 79, 80, 82, 83, 84, 88, 90, 94, 95, 97, 104, 108, 110, 116, 117, 124, 128, 129, 130, 131, 133, 134, 135, 136, 137, 139, 141, 145, 155, 156, 186, 188, 189, 191, 195, 200, 201, 209, 210, 211, 213, 215, 216, 221, 223, 226, 228, 233, 238, 239, 240, 242, 246, 250, 251, 257, 258, 259, 260, 261, 262, 270, 272, 274, 277, 278, 285, 288, 291, 293, 294, 296, 297, 298, 302], "option": [3, 4, 5, 8, 11, 12, 15, 23, 25, 28, 30, 42, 44, 47, 49, 59, 66, 67, 68, 69, 70, 71, 72, 74, 77, 78, 81, 82, 84, 85, 87, 95, 96, 99, 101, 104, 105, 108, 109, 110, 116, 122, 124, 128, 129, 130, 131, 133, 134, 135, 136, 139, 156, 158, 164, 175, 180, 181, 183, 186, 188, 193, 195, 200, 201, 206, 212, 213, 214, 215, 216, 217, 221, 222, 223, 225, 226, 227, 228, 229, 231, 233, 234, 235, 238, 239, 242, 243, 244, 245, 246, 248, 251, 252, 257, 258, 259, 262, 264, 265, 270, 295, 301, 302], "mark": [3, 4, 5, 122, 164, 176, 239, 255, 260, 262], "explicitli": [3, 12, 13, 14, 21, 23, 49, 59, 60, 68, 69, 71, 74, 76, 81, 85, 101, 104, 109, 124, 141, 156, 201, 212, 214, 215, 216, 217, 219, 222, 226, 238, 242, 244, 262, 294, 298, 301, 303], "privat": [3, 4, 68, 69, 141, 212, 259], "With": [3, 13, 15, 22, 26, 39, 49, 51, 67, 68, 72, 93, 108, 139, 144, 145, 146, 152, 154, 155, 164, 188, 191, 210, 212, 213, 214, 215, 216, 217, 224, 225, 226, 233, 238, 247, 264, 296, 297], "being": [3, 5, 12, 14, 15, 17, 21, 22, 45, 47, 49, 59, 60, 66, 67, 68, 69, 73, 74, 76, 78, 80, 81, 84, 85, 93, 98, 99, 104, 105, 108, 116, 117, 120, 128, 129, 137, 139, 141, 143, 155, 156, 158, 159, 187, 196, 200, 203, 207, 209, 210, 211, 212, 213, 215, 216, 217, 221, 222, 223, 225, 226, 235, 236, 238, 239, 242, 243, 244, 245, 246, 252, 255, 257, 261, 262, 264, 265, 267, 270, 275, 279, 296, 298], "decid": [3, 4, 9, 19, 21, 22, 23, 28, 48, 67, 99, 128, 155, 184, 216, 219, 221, 222, 226, 242, 245, 259, 298], "reason": [3, 5, 11, 12, 13, 14, 17, 21, 22, 23, 34, 35, 41, 49, 60, 66, 68, 72, 76, 93, 96, 102, 104, 134, 135, 141, 143, 148, 151, 155, 162, 196, 206, 210, 215, 216, 219, 220, 223, 226, 234, 236, 238, 242, 245, 255, 261, 262, 264, 265, 291, 292, 296, 297, 298], "confus": [3, 5, 12, 13, 14, 21, 31, 68, 73, 98, 164, 210, 214, 222, 245, 291, 292, 294], "unnecessari": [3, 4, 5, 12, 45, 49, 222, 225, 246, 257, 295], "redund": [3, 12, 21, 59, 66, 98, 104, 111, 112, 114, 215, 242, 259], "usabl": [3, 35, 216, 217, 226, 245, 296], "breakag": 3, "serious": 3, "taken": [3, 12, 14, 49, 50, 51, 56, 59, 66, 67, 68, 73, 74, 76, 85, 99, 108, 111, 112, 124, 126, 128, 130, 155, 158, 188, 194, 201, 205, 211, 212, 216, 221, 222, 226, 229, 233, 235, 236, 245, 246, 251, 259, 264, 270], "commun": [3, 5, 7, 11, 39, 211, 242, 244, 246, 298], "Be": [3, 4, 8, 23, 47, 68, 98, 104, 219, 242, 245, 253, 265], "sure": [3, 4, 5, 8, 9, 11, 12, 23, 49, 59, 68, 80, 139, 141, 171, 196, 212, 222, 223, 233, 242, 244, 245, 258, 264, 294, 297, 302], "inde": [3, 12, 19, 23, 56, 59, 67, 93, 108, 213, 236, 242, 253, 257, 296], "right": [3, 4, 5, 8, 11, 12, 13, 15, 19, 23, 26, 29, 30, 33, 35, 41, 47, 49, 50, 59, 60, 64, 68, 69, 71, 73, 74, 76, 84, 85, 93, 95, 98, 99, 104, 107, 108, 110, 111, 112, 116, 117, 118, 120, 124, 134, 139, 140, 141, 155, 158, 159, 163, 170, 175, 177, 179, 180, 185, 188, 191, 200, 201, 207, 210, 211, 212, 213, 215, 221, 222, 223, 224, 226, 228, 229, 233, 234, 236, 242, 243, 245, 246, 257, 259, 261, 264, 277, 292, 296, 298, 302], "again": [3, 8, 9, 12, 15, 19, 22, 51, 60, 68, 83, 108, 129, 139, 141, 143, 186, 187, 200, 201, 209, 213, 214, 221, 229, 236, 242, 255, 274, 294, 302], "second": [3, 5, 9, 11, 12, 14, 15, 19, 21, 22, 23, 28, 30, 32, 33, 35, 37, 40, 41, 44, 47, 49, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 76, 78, 81, 82, 84, 95, 104, 108, 109, 112, 116, 117, 122, 124, 125, 128, 130, 133, 134, 136, 137, 140, 141, 145, 148, 150, 151, 152, 154, 156, 162, 164, 165, 168, 172, 177, 180, 185, 186, 188, 189, 194, 195, 196, 198, 200, 201, 202, 209, 210, 212, 215, 216, 217, 219, 220, 221, 222, 226, 228, 236, 238, 239, 242, 244, 245, 246, 247, 248, 264, 265, 270, 273, 274, 275, 287, 291, 296, 297, 298], "know": [3, 4, 5, 12, 13, 14, 15, 21, 22, 23, 28, 35, 36, 37, 42, 44, 48, 51, 60, 68, 69, 72, 80, 85, 93, 95, 104, 108, 110, 141, 156, 159, 185, 189, 193, 194, 196, 201, 209, 210, 212, 215, 222, 223, 225, 226, 236, 238, 242, 244, 245, 246, 260, 264, 265, 275, 291, 292, 294, 295, 296, 297, 300, 302], "stop": [3, 8, 11, 49, 50, 60, 68, 104, 108, 212, 232, 234, 242, 246], "after": [3, 4, 5, 8, 9, 11, 12, 13, 15, 39, 41, 43, 44, 48, 50, 56, 59, 60, 64, 66, 67, 68, 69, 70, 74, 83, 85, 90, 95, 99, 104, 108, 110, 116, 124, 139, 152, 153, 155, 158, 160, 164, 176, 188, 196, 200, 207, 210, 215, 219, 221, 222, 223, 224, 226, 227, 232, 239, 242, 243, 244, 245, 247, 257, 260, 265, 267, 270, 273, 277, 291, 292, 294, 298, 302], "count": [3, 5, 14, 60, 67, 68, 69, 73, 78, 98, 104, 107, 108, 186, 222, 234, 235, 238, 245, 246, 252, 261, 264], "basi": [3, 68, 70, 97, 101, 104, 130, 136, 148, 150, 176, 185, 186, 188, 191, 193, 196, 199, 200, 201, 207, 209, 211, 213, 215, 217, 222, 225, 236, 238, 244, 245, 247, 252, 273, 274, 277, 300], "exact": [3, 11, 12, 13, 14, 15, 21, 23, 26, 34, 45, 67, 68, 69, 72, 78, 83, 90, 93, 95, 99, 104, 112, 116, 137, 158, 185, 215, 216, 217, 219, 222, 233, 238, 242, 244, 257, 267, 294, 296, 301], "rule": [3, 5, 11, 12, 13, 19, 21, 23, 49, 59, 60, 67, 68, 76, 91, 93, 95, 98, 99, 104, 116, 134, 140, 141, 172, 175, 196, 201, 207, 210, 211, 215, 217, 223, 225, 226, 227, 232, 236, 238, 242, 252, 264, 265, 277, 294, 297], "doesn": [3, 4, 12, 13, 15, 23, 28, 49, 92, 111, 140, 141, 145, 155, 158, 210, 214, 223, 225, 235, 238, 245, 303], "constitut": [3, 5, 14, 95, 108, 226], "yet": [3, 9, 11, 15, 21, 23, 42, 44, 47, 48, 72, 95, 110, 139, 155, 171, 213, 216, 217, 221, 223, 225, 234, 242, 245, 292], "fulli": [3, 4, 11, 13, 21, 59, 68, 85, 95, 98, 110, 116, 117, 133, 141, 158, 191, 209, 215, 216, 217, 223, 233, 246, 252], "codifi": 3, "clean": [3, 257], "distinct": [3, 5, 14, 17, 21, 23, 36, 49, 59, 60, 68, 69, 73, 81, 93, 98, 104, 108, 139, 209, 216, 221, 222, 226, 234, 236, 302], "well": [3, 4, 5, 7, 11, 13, 14, 15, 17, 19, 21, 23, 39, 45, 47, 48, 49, 50, 51, 52, 60, 67, 68, 73, 74, 76, 95, 99, 102, 104, 120, 125, 128, 133, 139, 141, 143, 145, 146, 155, 156, 181, 190, 193, 194, 200, 209, 211, 212, 213, 215, 216, 217, 219, 221, 226, 233, 234, 235, 236, 238, 242, 244, 245, 257, 258, 274, 275, 279, 294, 296, 297, 302], "categor": [3, 28, 104, 213], "issu": [3, 5, 7, 12, 13, 14, 15, 22, 23, 28, 30, 31, 32, 33, 34, 35, 36, 39, 40, 47, 67, 68, 85, 95, 98, 104, 109, 151, 171, 208, 211, 220, 221, 223, 226, 234, 235, 244, 245, 257, 259, 261, 262, 264, 267, 287, 293, 294, 297, 302], "here": [3, 4, 5, 7, 9, 11, 12, 13, 14, 17, 19, 21, 22, 23, 28, 30, 31, 32, 33, 34, 35, 38, 39, 43, 44, 49, 50, 52, 57, 58, 59, 60, 66, 67, 68, 69, 70, 72, 73, 74, 76, 84, 85, 86, 90, 91, 93, 95, 98, 99, 104, 107, 108, 109, 110, 114, 116, 120, 124, 128, 134, 141, 142, 143, 148, 149, 150, 153, 155, 156, 158, 159, 181, 186, 191, 200, 206, 207, 209, 210, 212, 213, 215, 216, 217, 219, 221, 222, 223, 226, 227, 233, 235, 236, 238, 239, 242, 244, 245, 246, 250, 251, 258, 259, 261, 262, 264, 265, 275, 277, 279, 290, 291, 292, 294, 296, 297, 298, 300, 301, 302], "gener": [3, 8, 11, 12, 13, 14, 15, 17, 19, 21, 22, 23, 25, 28, 30, 31, 32, 33, 34, 35, 36, 37, 39, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 56, 57, 59, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 78, 82, 84, 86, 91, 93, 95, 96, 97, 98, 101, 104, 108, 109, 110, 111, 114, 115, 124, 128, 129, 130, 133, 134, 135, 137, 139, 140, 141, 143, 144, 145, 146, 148, 150, 151, 152, 154, 155, 156, 158, 159, 163, 174, 175, 176, 177, 180, 185, 186, 189, 190, 191, 196, 198, 201, 202, 205, 206, 207, 209, 211, 212, 213, 214, 215, 217, 219, 222, 223, 224, 225, 226, 227, 228, 232, 235, 236, 238, 239, 241, 242, 243, 244, 246, 251, 252, 258, 259, 261, 262, 263, 264, 265, 270, 274, 275, 277, 278, 279, 285, 292, 294, 295, 296, 297, 298, 302, 303], "guidelin": [3, 11, 37, 242], "exhaust": [3, 21, 236, 264, 295], "alwai": [3, 4, 5, 11, 12, 13, 14, 15, 21, 22, 23, 33, 39, 41, 48, 59, 60, 67, 68, 69, 70, 72, 74, 76, 78, 80, 83, 84, 92, 93, 95, 98, 99, 104, 107, 108, 118, 120, 124, 125, 137, 139, 140, 141, 143, 145, 149, 159, 191, 193, 196, 197, 207, 209, 213, 214, 215, 216, 217, 219, 221, 222, 226, 227, 228, 234, 235, 236, 238, 239, 242, 243, 244, 245, 246, 253, 257, 259, 264, 265, 270, 272, 277, 292, 294, 295, 296, 297, 302], "posit": [3, 11, 12, 13, 14, 15, 21, 22, 23, 26, 28, 32, 42, 43, 44, 45, 46, 48, 49, 50, 52, 57, 59, 60, 61, 63, 64, 67, 68, 69, 70, 72, 73, 74, 76, 78, 80, 81, 84, 93, 95, 97, 98, 99, 100, 104, 105, 107, 108, 112, 116, 117, 118, 120, 124, 126, 129, 133, 136, 137, 140, 141, 143, 145, 148, 150, 152, 155, 156, 158, 160, 163, 165, 169, 186, 189, 191, 202, 203, 205, 207, 209, 210, 213, 214, 215, 216, 217, 219, 221, 222, 223, 225, 226, 231, 232, 234, 235, 236, 238, 239, 242, 244, 245, 246, 247, 252, 264, 265, 270, 273, 274, 275, 277, 279, 280, 298, 302, 303], "convent": [3, 4, 5, 23, 35, 59, 60, 64, 67, 68, 69, 73, 74, 76, 78, 83, 93, 95, 98, 110, 116, 117, 120, 124, 127, 129, 137, 143, 158, 160, 164, 185, 186, 188, 193, 194, 207, 212, 226, 242, 243, 245, 246, 252, 279, 294, 302], "defin": [3, 4, 5, 11, 12, 13, 14, 15, 17, 19, 21, 22, 37, 40, 41, 43, 44, 47, 49, 50, 51, 52, 58, 59, 60, 63, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 91, 93, 95, 96, 99, 101, 104, 108, 111, 112, 114, 116, 117, 122, 128, 129, 130, 133, 136, 137, 139, 140, 141, 143, 144, 148, 150, 151, 152, 156, 158, 159, 162, 168, 170, 172, 177, 180, 186, 188, 189, 193, 194, 195, 196, 197, 198, 199, 200, 201, 205, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 221, 222, 223, 225, 226, 228, 229, 232, 233, 234, 236, 238, 239, 242, 244, 245, 246, 247, 251, 252, 258, 259, 260, 264, 265, 266, 267, 270, 272, 273, 274, 275, 276, 277, 279, 280, 294, 296, 302], "And": [3, 11, 12, 13, 22, 23, 30, 43, 59, 60, 67, 68, 69, 76, 93, 98, 99, 104, 107, 133, 163, 210, 212, 214, 222, 223, 226, 234, 238, 239, 244, 245, 246, 264, 265, 275, 302], "aren": [3, 11, 12, 13, 14, 23, 49, 68, 141, 225, 245], "don": [3, 11, 12, 13, 15, 22, 23, 44, 49, 76, 93, 98, 104, 109, 110, 112, 128, 141, 200, 209, 210, 216, 226, 236, 245, 247, 255, 260, 279, 291, 292, 296, 297, 302], "onli": [3, 4, 5, 8, 9, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 28, 31, 32, 33, 34, 36, 37, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 54, 57, 58, 59, 60, 61, 62, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 78, 79, 81, 82, 84, 85, 86, 91, 93, 95, 96, 97, 98, 99, 104, 105, 108, 109, 110, 111, 114, 120, 122, 124, 131, 133, 134, 136, 137, 140, 141, 143, 144, 145, 147, 148, 150, 152, 153, 155, 156, 159, 164, 166, 185, 186, 190, 191, 193, 196, 200, 201, 203, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 221, 222, 223, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 238, 239, 242, 243, 244, 246, 247, 250, 251, 252, 253, 255, 257, 258, 259, 260, 261, 262, 264, 265, 266, 270, 273, 275, 277, 279, 280, 291, 292, 294, 295, 297, 298, 302, 303], "form": [3, 5, 11, 12, 13, 14, 19, 21, 23, 26, 33, 34, 41, 44, 45, 46, 47, 49, 50, 58, 59, 60, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 81, 84, 88, 90, 91, 93, 95, 97, 99, 101, 103, 104, 108, 110, 111, 112, 114, 116, 117, 118, 120, 121, 124, 128, 129, 130, 133, 134, 135, 137, 139, 141, 143, 145, 148, 150, 151, 152, 153, 154, 156, 158, 159, 168, 171, 172, 173, 175, 185, 186, 189, 191, 193, 196, 199, 200, 201, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 232, 234, 235, 236, 238, 239, 242, 243, 244, 245, 246, 251, 252, 257, 258, 264, 270, 273, 274, 276, 277, 279, 285, 292, 296, 297, 298, 301, 302, 303], "differ": [3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 17, 18, 20, 22, 23, 28, 30, 31, 32, 33, 34, 35, 36, 40, 48, 49, 50, 51, 57, 58, 59, 60, 64, 67, 68, 69, 70, 72, 73, 74, 76, 79, 81, 83, 84, 88, 90, 92, 93, 95, 96, 97, 98, 101, 104, 108, 109, 110, 114, 116, 122, 124, 128, 130, 134, 136, 139, 141, 143, 147, 155, 159, 163, 164, 176, 177, 185, 186, 189, 191, 193, 195, 196, 200, 201, 202, 205, 206, 207, 210, 212, 213, 214, 215, 217, 219, 221, 222, 223, 225, 226, 227, 228, 229, 231, 233, 234, 235, 238, 239, 242, 243, 244, 245, 246, 247, 250, 252, 255, 257, 258, 259, 260, 261, 262, 264, 265, 270, 273, 277, 279, 293, 294, 296, 297, 298, 301, 302], "equival": [3, 12, 13, 14, 15, 17, 21, 22, 23, 26, 33, 35, 41, 45, 49, 50, 58, 59, 64, 68, 69, 72, 74, 76, 93, 95, 104, 108, 110, 121, 122, 124, 133, 141, 174, 185, 188, 191, 194, 195, 201, 206, 210, 212, 213, 214, 215, 216, 217, 221, 222, 226, 233, 234, 238, 239, 242, 244, 245, 247, 248, 251, 252, 261, 265, 267], "same": [3, 4, 5, 11, 12, 13, 14, 15, 19, 21, 22, 23, 25, 28, 30, 32, 35, 41, 43, 44, 45, 47, 48, 49, 51, 57, 58, 59, 60, 64, 67, 68, 69, 70, 73, 75, 76, 78, 81, 82, 83, 84, 85, 90, 91, 93, 95, 97, 98, 99, 101, 104, 108, 110, 111, 114, 116, 117, 120, 124, 125, 128, 129, 130, 133, 138, 141, 145, 148, 149, 152, 155, 175, 177, 185, 188, 189, 191, 193, 194, 195, 196, 198, 199, 200, 201, 203, 206, 207, 209, 210, 212, 213, 214, 215, 216, 217, 219, 221, 222, 223, 224, 225, 226, 227, 233, 234, 235, 236, 238, 239, 242, 243, 244, 245, 246, 247, 251, 252, 253, 255, 257, 259, 260, 261, 262, 264, 265, 267, 270, 272, 274, 275, 279, 292, 294, 297, 298, 301, 302], "intern": [3, 13, 14, 15, 21, 22, 30, 47, 49, 50, 59, 68, 71, 72, 73, 76, 84, 85, 88, 100, 104, 108, 110, 114, 117, 120, 122, 143, 155, 156, 164, 185, 186, 196, 213, 215, 217, 218, 220, 222, 224, 226, 236, 238, 241, 242, 243, 244, 245, 246, 250, 252, 255, 259, 261, 264, 288, 297, 301], "Such": [3, 4, 12, 21, 49, 68, 84, 145, 213, 214, 221, 227, 235, 236, 238, 291, 297], "prefix": [3, 11, 49, 68, 104, 108, 195, 198, 199, 216, 219, 223, 226, 239, 242, 258, 259, 264, 287], "underscor": [3, 4, 12, 13, 68, 104, 242, 252, 260], "_": [3, 4, 5, 13, 15, 17, 19, 23, 26, 43, 44, 48, 56, 57, 59, 60, 61, 64, 67, 68, 69, 70, 71, 72, 73, 74, 76, 79, 81, 82, 83, 84, 93, 95, 98, 99, 100, 101, 102, 104, 106, 108, 110, 124, 153, 156, 158, 170, 191, 196, 200, 206, 209, 211, 215, 217, 221, 222, 225, 226, 227, 229, 233, 234, 235, 236, 238, 239, 242, 243, 244, 247, 248, 264, 273, 275, 301], "univers": [3, 14, 49, 211, 217, 220, 234, 239, 244, 245], "adher": [3, 5, 93], "codebas": [3, 12, 13, 21, 216, 255], "anyth": [3, 4, 5, 12, 13, 15, 23, 47, 49, 68, 69, 79, 83, 104, 141, 165, 175, 223, 226, 232, 234, 238, 242, 244, 258, 264, 267, 294], "were": [3, 5, 11, 12, 13, 14, 15, 17, 21, 23, 48, 51, 60, 62, 68, 69, 74, 85, 93, 99, 104, 108, 109, 110, 112, 128, 139, 155, 200, 207, 210, 213, 215, 217, 219, 220, 221, 222, 225, 226, 227, 235, 238, 244, 264, 265, 267, 294, 296, 297, 301, 302], "incorrect": [3, 5, 11, 12, 13, 22, 23, 34, 59, 68, 78, 108, 122, 205, 215, 217, 242, 245, 258, 261, 262], "bug": [3, 4, 7, 11, 12, 21, 23, 39, 47, 69, 216, 234, 242, 245, 294], "despit": [3, 28, 37, 68, 302], "sai": [3, 5, 11, 14, 19, 21, 50, 58, 67, 68, 69, 97, 108, 128, 134, 141, 151, 158, 196, 209, 210, 213, 214, 215, 219, 221, 225, 226, 233, 236, 239, 242, 244, 245, 246, 265, 291, 296, 302], "befor": [3, 4, 7, 9, 10, 11, 12, 13, 14, 15, 21, 22, 23, 35, 37, 39, 49, 59, 60, 62, 64, 68, 69, 70, 76, 96, 99, 104, 108, 110, 116, 117, 128, 135, 139, 141, 143, 144, 145, 148, 149, 155, 158, 160, 191, 200, 206, 210, 214, 215, 216, 221, 222, 226, 227, 233, 234, 238, 239, 242, 244, 245, 246, 253, 257, 260, 264, 265, 274, 295, 296, 297, 302], "recent": [3, 12, 13, 15, 18, 21, 22, 23, 28, 30, 32, 33, 34, 35, 36, 37, 42, 43, 44, 49, 50, 60, 68, 69, 72, 76, 78, 95, 98, 99, 100, 101, 102, 104, 106, 107, 110, 124, 211, 213, 215, 216, 217, 219, 222, 225, 233, 234, 242, 244, 245, 255, 258, 260, 262, 264, 265, 267, 294, 298], "best": [3, 7, 11, 12, 13, 28, 32, 34, 35, 38, 39, 49, 68, 76, 93, 95, 109, 190, 212, 223, 226, 235, 236, 238, 242, 245, 250, 258, 290, 294, 295, 301, 302], "determin": [3, 5, 13, 14, 17, 19, 21, 22, 23, 26, 28, 31, 32, 33, 36, 42, 44, 45, 46, 47, 49, 50, 51, 52, 59, 68, 69, 70, 71, 72, 74, 78, 79, 81, 83, 84, 95, 96, 97, 101, 104, 108, 110, 116, 117, 124, 129, 131, 133, 135, 136, 137, 139, 150, 156, 159, 170, 183, 185, 187, 188, 191, 194, 196, 201, 207, 212, 213, 214, 215, 219, 221, 222, 226, 232, 233, 234, 236, 238, 239, 241, 242, 244, 245, 246, 250, 262, 264, 270, 277, 280, 294, 302], "someth": [3, 4, 5, 9, 11, 13, 14, 15, 21, 22, 23, 37, 47, 49, 68, 69, 72, 78, 93, 98, 99, 104, 108, 128, 141, 142, 158, 184, 197, 200, 212, 216, 217, 225, 233, 234, 238, 242, 245, 257, 259, 265, 291, 294, 296, 297, 300], "re": [3, 11, 13, 15, 23, 46, 47, 49, 59, 60, 68, 69, 72, 74, 76, 93, 95, 104, 201, 203, 207, 213, 219, 226, 227, 228, 234, 235, 236, 242, 244, 257, 273, 275, 292, 294, 297], "harm": 3, "even": [3, 4, 5, 9, 11, 12, 14, 15, 18, 21, 23, 28, 31, 34, 35, 36, 37, 42, 43, 44, 45, 46, 49, 50, 51, 56, 59, 60, 67, 68, 69, 72, 73, 74, 76, 80, 84, 93, 95, 98, 99, 104, 107, 108, 110, 125, 141, 151, 176, 187, 194, 196, 201, 211, 214, 215, 216, 217, 219, 221, 222, 223, 226, 227, 234, 235, 236, 238, 239, 242, 244, 245, 253, 257, 279, 291, 292, 294, 296, 297, 302, 303], "might": [3, 4, 9, 11, 12, 13, 14, 15, 17, 21, 22, 23, 30, 34, 47, 49, 68, 72, 74, 81, 90, 93, 101, 104, 108, 110, 116, 128, 141, 142, 158, 171, 201, 209, 212, 215, 216, 217, 222, 223, 226, 227, 234, 235, 236, 238, 239, 244, 245, 246, 258, 259, 262, 264, 267, 291, 294, 296, 297, 299, 302], "while": [3, 4, 7, 11, 12, 14, 15, 21, 23, 25, 29, 30, 35, 37, 48, 49, 50, 59, 60, 61, 64, 67, 68, 69, 70, 72, 73, 74, 78, 82, 84, 92, 98, 99, 104, 108, 109, 110, 112, 116, 118, 120, 129, 130, 133, 134, 135, 137, 139, 141, 145, 155, 175, 195, 196, 201, 207, 213, 215, 221, 224, 226, 242, 244, 245, 257, 259, 261, 264, 279, 291, 297, 298], "peopl": [3, 4, 7, 9, 11, 71, 76, 95, 104, 196, 246], "upgrad": [3, 40], "immedi": [3, 12, 21, 33, 51, 59, 68, 93, 98, 139, 191, 213, 216, 247, 258, 265], "fire": 3, "uncondition": [3, 12], "correct": [3, 4, 5, 11, 12, 13, 15, 22, 23, 31, 33, 35, 49, 57, 59, 65, 67, 68, 72, 74, 92, 93, 95, 104, 108, 124, 129, 137, 141, 155, 209, 210, 219, 222, 233, 239, 242, 244, 245, 250, 258, 264, 294, 301], "question": [3, 4, 5, 7, 11, 12, 19, 21, 67, 70, 78, 85, 93, 95, 98, 108, 128, 193, 196, 200, 213, 216, 221, 236, 245, 264, 267], "read": [3, 4, 5, 9, 11, 12, 13, 23, 37, 60, 74, 93, 108, 117, 158, 209, 210, 212, 215, 216, 217, 223, 226, 239, 252, 253, 261, 265, 295, 301, 302], "previou": [3, 4, 12, 13, 23, 52, 57, 58, 59, 60, 63, 68, 73, 74, 95, 98, 99, 107, 110, 130, 155, 193, 209, 210, 219, 232, 239, 243, 247, 264, 295, 297, 302], "unchang": [3, 13, 14, 23, 59, 60, 68, 95, 104, 124, 195, 215, 222, 226, 232, 235, 238, 245, 291], "dure": [3, 12, 13, 15, 40, 49, 68, 69, 99, 104, 108, 110, 111, 114, 130, 134, 158, 159, 209, 221, 226, 235, 244, 245, 262, 264], "period": [3, 4, 11, 13, 32, 47, 68, 69, 74, 93, 108, 124, 155, 165, 187, 194, 221, 226, 229, 232, 241, 245, 246, 264], "silenc": [3, 255, 262], "filterwarn": [3, 13], "caus": [3, 5, 12, 13, 14, 23, 35, 39, 68, 69, 72, 74, 104, 111, 129, 137, 141, 149, 155, 209, 226, 235, 242, 243, 244, 261, 262, 298], "anoth": [3, 4, 5, 11, 12, 13, 14, 18, 19, 21, 22, 23, 28, 30, 32, 33, 34, 35, 36, 45, 48, 49, 60, 65, 67, 68, 69, 70, 74, 76, 78, 79, 80, 81, 82, 83, 84, 85, 93, 95, 101, 104, 108, 114, 116, 117, 129, 130, 134, 136, 137, 140, 152, 156, 180, 195, 196, 198, 201, 205, 209, 210, 212, 214, 215, 216, 217, 219, 221, 222, 223, 226, 227, 233, 234, 236, 242, 244, 245, 246, 258, 259, 265, 270, 274, 275, 279, 291, 294, 296, 297, 302, 303], "over": [3, 5, 6, 7, 10, 11, 12, 13, 15, 18, 23, 28, 31, 38, 41, 47, 48, 49, 50, 59, 60, 63, 67, 68, 69, 70, 71, 72, 73, 82, 84, 91, 93, 97, 98, 101, 104, 105, 108, 116, 117, 120, 126, 133, 139, 141, 158, 159, 170, 186, 189, 191, 195, 196, 207, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 226, 229, 231, 233, 238, 239, 241, 242, 244, 245, 246, 247, 248, 250, 251, 260, 264, 265, 270, 273, 277, 280, 296, 300, 302], "defeat": [3, 12, 242], "three": [3, 14, 15, 17, 19, 21, 23, 35, 36, 41, 45, 49, 59, 60, 61, 64, 68, 69, 73, 76, 78, 82, 83, 84, 93, 97, 98, 111, 116, 117, 133, 137, 139, 144, 147, 148, 149, 164, 186, 188, 193, 201, 205, 209, 210, 211, 212, 213, 214, 217, 219, 222, 226, 236, 238, 239, 244, 245, 246, 257, 270, 272, 277, 280, 294, 297, 302], "natur": [3, 12, 15, 21, 26, 33, 41, 45, 49, 50, 51, 59, 68, 69, 73, 74, 102, 108, 141, 193, 195, 196, 213, 216, 217, 219, 221, 223, 226, 234, 235, 239, 245, 246, 264, 280, 297, 302], "heavili": [3, 233, 243], "consider": [3, 12, 22, 68, 109, 128, 216, 225, 234, 239, 242, 274], "easi": [3, 7, 11, 12, 14, 25, 56, 60, 68, 76, 93, 95, 109, 145, 151, 209, 213, 216, 221, 226, 233, 236, 239, 242, 245, 250, 251, 252, 291, 292, 294, 295, 296, 297, 298, 301], "account": [3, 14, 74, 104, 229, 238, 242], "nonetheless": [3, 69, 193, 238, 242], "deprecat": 3, "won": [3, 11, 12, 15, 23, 49, 112, 238, 245, 297], "until": [3, 12, 19, 21, 28, 30, 31, 32, 33, 34, 35, 36, 40, 60, 62, 68, 69, 78, 95, 104, 108, 155, 210, 219, 222, 235, 242, 294], "come": [3, 11, 12, 33, 39, 59, 64, 66, 67, 68, 74, 76, 93, 95, 104, 109, 128, 141, 143, 153, 194, 210, 213, 216, 219, 221, 222, 236, 239, 242, 245, 255, 257, 262, 265, 294, 296, 297, 300, 302], "minimum": [3, 13, 32, 47, 49, 59, 60, 62, 64, 68, 69, 72, 74, 104, 128, 134, 143, 175, 200, 212, 214, 219, 244, 245, 246, 260, 292], "longer": [3, 4, 11, 12, 15, 20, 68, 78, 108, 145, 155, 214, 215, 219, 226, 235, 238, 264, 267, 294, 302], "especi": [3, 4, 12, 23, 37, 67, 68, 104, 128, 141, 156, 158, 185, 210, 222, 238, 242, 244, 257, 291, 292], "hard": [3, 11, 12, 13, 14, 21, 60, 69, 104, 108, 141, 191, 216, 226, 233, 242, 245, 294, 296], "migrat": 3, "lengthen": [3, 114], "impos": [3, 117], "signific": [3, 15, 21, 49, 68, 69, 72, 95, 104, 128, 185, 200, 216, 245, 265, 297], "mainten": [3, 44], "burden": [3, 226], "keep": [3, 4, 11, 12, 15, 18, 23, 64, 68, 69, 72, 73, 76, 93, 104, 112, 134, 144, 152, 156, 175, 191, 200, 212, 215, 216, 217, 222, 233, 234, 236, 238, 242, 244, 247, 252, 279, 292, 297], "firstli": [3, 13, 21, 23, 140, 236], "regular": [3, 11, 12, 13, 15, 21, 22, 50, 56, 68, 69, 72, 76, 84, 90, 91, 95, 108, 141, 185, 216, 223, 242, 252, 257, 301, 302], "schedul": 3, "singl": [3, 5, 8, 11, 13, 14, 19, 21, 23, 29, 35, 40, 41, 48, 49, 52, 59, 68, 69, 73, 74, 76, 81, 82, 84, 85, 86, 93, 95, 98, 99, 104, 107, 110, 112, 114, 124, 125, 129, 131, 133, 134, 145, 152, 171, 175, 177, 185, 188, 191, 198, 201, 205, 212, 213, 215, 216, 217, 219, 221, 222, 226, 227, 228, 235, 236, 238, 239, 241, 242, 243, 244, 245, 246, 247, 251, 257, 259, 261, 264, 265, 267, 292, 294, 297, 298, 303], "Being": [3, 64, 78, 84, 216], "assur": [3, 108, 222], "suffici": [3, 4, 11, 21, 48, 49, 59, 60, 64, 68, 104, 196, 217, 229, 233, 242, 246, 261, 302], "regardless": [3, 4, 23, 60, 68, 95, 108, 215, 219, 234, 238, 264, 274, 279, 302], "often": [3, 4, 11, 12, 14, 21, 22, 23, 28, 34, 48, 49, 50, 58, 68, 76, 78, 80, 93, 95, 104, 108, 109, 124, 134, 135, 151, 155, 156, 209, 210, 213, 214, 215, 216, 219, 222, 227, 233, 234, 239, 242, 246, 264, 265, 291, 296, 297, 298, 302], "happen": [3, 4, 7, 11, 12, 13, 14, 19, 21, 22, 23, 32, 41, 49, 60, 67, 68, 72, 80, 83, 92, 133, 186, 190, 196, 213, 219, 221, 222, 225, 234, 238, 242, 246, 265, 275, 294, 301, 302], "secondli": [3, 23, 236], "rigor": [3, 76, 210, 259], "scheme": [3, 8, 21, 60, 67, 72, 211, 212, 219, 222, 251], "semant": [3, 14, 21, 101, 244], "surfac": [3, 74, 76, 82, 93, 117, 133, 137, 140, 160, 164, 191, 212, 238, 270], "enough": [3, 4, 11, 30, 32, 59, 68, 72, 95, 104, 107, 108, 124, 141, 158, 217, 219, 226, 242, 292, 294], "virtual": [3, 8, 39, 68, 84, 210, 295], "encod": [3, 13, 52, 60, 66, 69, 98, 226, 257, 261, 264], "backport": 3, "prior": [3, 12, 13, 39, 205, 222, 238, 298], "extrem": [3, 12, 33, 59, 72, 78, 84, 95, 101, 120, 155, 210, 238, 246], "accur": [3, 13, 15, 19, 23, 28, 47, 59, 68, 72, 73, 90, 95, 121, 212, 233, 291, 298], "model": [3, 14, 72, 98, 108, 111, 112, 114, 115, 124, 129, 135, 139, 143, 145, 146, 147, 163, 222, 235, 246], "final": [3, 4, 5, 11, 12, 13, 21, 23, 26, 35, 48, 60, 67, 68, 74, 76, 93, 95, 98, 104, 108, 114, 117, 122, 133, 134, 143, 148, 150, 151, 153, 156, 171, 183, 186, 188, 189, 191, 193, 194, 196, 201, 209, 210, 213, 215, 216, 219, 221, 228, 234, 235, 236, 238, 239, 242, 244, 245, 252, 264, 265, 295, 296, 297], "temptat": [3, 235, 302], "fudg": 3, "down": [3, 4, 8, 11, 12, 21, 73, 101, 126, 145, 209, 210, 212, 217, 228, 234, 236, 238, 242, 261, 298, 302], "earli": [3, 11, 68, 108, 180, 239], "acceler": [3, 109, 134, 136, 139, 143, 148, 150, 155, 156, 158, 194, 201, 205, 207, 215, 261, 279], "each": [3, 8, 9, 11, 12, 13, 14, 15, 17, 21, 23, 28, 30, 31, 32, 33, 35, 38, 41, 44, 45, 47, 48, 49, 50, 51, 52, 59, 60, 64, 68, 69, 70, 71, 72, 73, 74, 76, 78, 83, 84, 85, 90, 91, 93, 95, 97, 98, 99, 101, 104, 108, 110, 114, 116, 120, 122, 124, 129, 131, 133, 134, 137, 141, 143, 145, 148, 150, 152, 153, 156, 175, 188, 191, 200, 201, 205, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 221, 222, 224, 226, 234, 235, 236, 238, 239, 242, 243, 244, 245, 246, 247, 250, 251, 252, 255, 257, 259, 261, 264, 265, 267, 270, 272, 273, 275, 277, 279, 292, 295, 297, 302, 303], "ensur": [3, 11, 12, 15, 23, 28, 30, 31, 32, 33, 36, 39, 68, 69, 72, 100, 104, 111, 114, 133, 137, 221, 222, 226, 257, 262, 265], "realli": [3, 11, 12, 13, 14, 19, 21, 22, 23, 68, 80, 108, 143, 193, 215, 216, 225, 227, 233, 235, 236, 238, 242, 258, 267, 294, 296], "per": [3, 69, 104, 109, 120, 134, 137, 165, 195, 201, 207, 212, 217, 222, 223, 270, 274, 276, 279], "everywher": [3, 14, 15, 68, 76, 93, 124, 207, 264, 279], "doctest": [3, 4, 5, 11, 15, 23, 61, 76, 104, 108, 143, 180, 191, 216, 222, 242, 257, 260, 262, 301], "sympy_deprecation_warn": [3, 255, 260, 262], "write": [3, 6, 7, 9, 10, 13, 14, 19, 21, 22, 24, 28, 40, 49, 57, 68, 69, 75, 76, 93, 95, 101, 158, 171, 209, 210, 214, 215, 217, 219, 221, 226, 235, 236, 239, 242, 245, 251, 257, 258, 259, 265, 295, 296, 297, 302], "multilin": [3, 226], "deprecated_since_vers": [3, 255, 260, 262], "active_deprecations_target": [3, 255, 260, 262], "target": [3, 4, 14, 47, 48, 49, 51, 68, 108, 129, 131, 171, 175, 176, 195, 235, 238, 241, 244, 245, 255, 258, 259, 262, 302], "md": [3, 5, 12, 255, 262], "stacklevel": [3, 12, 255, 260, 262], "line": [3, 4, 9, 11, 12, 13, 14, 15, 19, 21, 39, 48, 49, 51, 59, 60, 64, 69, 78, 79, 80, 82, 83, 84, 85, 90, 93, 95, 96, 97, 104, 108, 114, 116, 118, 120, 122, 125, 129, 136, 137, 140, 141, 143, 149, 171, 201, 206, 207, 209, 211, 212, 226, 229, 236, 238, 242, 246, 247, 255, 257, 258, 259, 262, 265, 267, 277, 280, 288, 294], "visual": [3, 13, 68, 108, 117, 124, 225, 238], "confirm": [3, 12, 13, 59, 108, 242], "look": [3, 4, 5, 7, 9, 11, 12, 13, 15, 21, 22, 23, 40, 48, 49, 59, 68, 73, 74, 76, 89, 104, 108, 134, 141, 143, 151, 175, 185, 186, 189, 205, 212, 216, 217, 221, 226, 228, 229, 233, 236, 238, 239, 242, 243, 248, 257, 261, 265, 267, 275, 292, 297, 300, 301], "good": [3, 5, 7, 12, 14, 21, 23, 31, 37, 49, 68, 69, 72, 80, 93, 104, 108, 143, 155, 158, 213, 216, 217, 226, 233, 235, 236, 238, 242, 264, 291, 295, 298], "top": [3, 4, 5, 12, 13, 14, 30, 49, 67, 68, 69, 84, 85, 95, 98, 104, 116, 117, 133, 139, 186, 193, 216, 226, 236, 242, 259, 260, 265, 280, 297], "relev": [3, 4, 5, 11, 12, 13, 21, 49, 66, 81, 96, 97, 130, 134, 136, 139, 143, 196, 206, 210, 216, 236, 242, 243, 252, 257, 278], "docstr": [3, 6, 7, 11, 12, 13, 15, 23, 30, 48, 49, 61, 68, 90, 93, 95, 104, 108, 113, 115, 119, 123, 125, 132, 151, 156, 161, 178, 184, 185, 187, 204, 208, 222, 229, 232, 233, 235, 238, 242, 243, 244, 245, 251, 252, 257, 260, 265, 267, 271, 278, 281, 285, 287], "section": [3, 5, 8, 10, 11, 12, 14, 21, 23, 24, 41, 48, 50, 59, 60, 67, 68, 69, 71, 75, 76, 78, 84, 93, 98, 104, 110, 116, 117, 133, 140, 141, 156, 194, 196, 207, 210, 213, 216, 219, 221, 226, 229, 233, 236, 242, 252, 261, 262, 264, 274, 275, 276, 277, 281, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303], "src": [3, 4, 5, 7, 11, 12, 110, 242, 257, 262], "explan": [3, 5, 12, 15, 17, 21, 24, 41, 42, 43, 44, 45, 46, 48, 49, 53, 56, 57, 59, 60, 61, 63, 65, 66, 67, 68, 69, 70, 74, 76, 80, 90, 91, 93, 95, 99, 104, 108, 111, 112, 114, 124, 127, 129, 130, 131, 133, 134, 136, 137, 139, 140, 149, 160, 162, 165, 168, 170, 172, 174, 186, 191, 211, 212, 213, 215, 217, 221, 222, 224, 228, 229, 231, 232, 233, 234, 236, 238, 239, 242, 244, 246, 247, 248, 251, 252, 257, 260, 262, 264, 265, 299], "cross": [3, 5, 11, 12, 14, 68, 78, 84, 99, 104, 116, 117, 133, 136, 140, 149, 158, 171, 200, 201, 203, 209, 210, 239, 245, 270, 274, 276, 277], "xyz": [3, 41, 80, 110, 116, 120, 201, 210, 270, 272, 275], "header": [3, 12, 49, 258, 259], "why": [3, 12, 13, 15, 21, 49, 68, 210, 217, 223, 233, 236, 265, 295, 297, 298], "test": [3, 4, 5, 6, 9, 10, 14, 15, 20, 22, 23, 30, 31, 44, 45, 47, 48, 49, 55, 59, 60, 67, 68, 69, 75, 78, 83, 93, 99, 101, 104, 108, 139, 171, 180, 184, 185, 186, 194, 210, 216, 217, 219, 221, 223, 234, 236, 239, 242, 243, 244, 245, 255, 258, 259, 260, 261, 262, 264, 265, 267, 281, 282, 289, 294, 296, 297], "warns_deprecated_sympi": [3, 12, 255, 260, 262], "run": [3, 4, 5, 8, 14, 15, 19, 21, 23, 25, 50, 59, 60, 62, 68, 69, 93, 104, 109, 110, 134, 139, 143, 158, 191, 206, 212, 213, 226, 236, 238, 242, 243, 244, 254, 255, 258, 260, 261, 264, 265, 289, 294, 301], "other": [3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 17, 18, 19, 22, 24, 28, 30, 31, 32, 33, 35, 36, 37, 41, 45, 48, 49, 50, 51, 59, 60, 61, 64, 65, 67, 68, 69, 70, 72, 73, 74, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 88, 93, 95, 98, 99, 101, 104, 108, 109, 110, 115, 116, 117, 118, 124, 128, 129, 130, 132, 133, 134, 137, 139, 140, 141, 142, 145, 146, 151, 152, 155, 156, 158, 160, 163, 164, 165, 175, 186, 188, 189, 190, 191, 194, 195, 196, 197, 198, 200, 201, 203, 205, 209, 210, 212, 213, 214, 215, 216, 217, 219, 221, 222, 223, 226, 227, 228, 231, 232, 233, 234, 235, 236, 238, 239, 241, 242, 243, 244, 245, 246, 247, 252, 253, 255, 258, 259, 260, 261, 264, 265, 270, 273, 274, 277, 279, 281, 287, 288, 291, 292, 294, 296, 297, 298, 302], "pr": [3, 11, 12, 13, 67, 133, 217, 219, 220, 222, 245], "onc": [3, 8, 9, 11, 12, 14, 15, 21, 22, 23, 49, 51, 52, 59, 64, 68, 69, 73, 76, 84, 93, 95, 109, 117, 131, 133, 151, 155, 196, 201, 203, 210, 212, 214, 216, 222, 226, 227, 235, 236, 238, 242, 245, 252, 264, 274, 291, 292, 302, 303], "merg": [3, 7, 11, 12, 49, 59, 60, 68, 199, 226, 234, 246, 257, 264, 265], "wiki": [3, 4, 5, 11, 15, 21, 23, 41, 43, 44, 45, 47, 48, 49, 51, 56, 57, 59, 60, 67, 68, 69, 70, 71, 73, 74, 76, 78, 80, 84, 85, 86, 95, 96, 97, 98, 99, 101, 104, 108, 122, 124, 127, 160, 162, 163, 164, 166, 167, 168, 172, 173, 174, 177, 179, 180, 189, 191, 195, 201, 203, 208, 212, 215, 222, 229, 233, 234, 235, 239, 242, 245, 246, 259, 264, 270, 272, 276, 278, 280, 298], "decor": [3, 12, 23, 59, 68, 76, 255, 257, 262, 263, 266, 267, 289], "sympydeprecationwarn": [3, 12, 13, 255, 257, 260, 262], "class": [3, 5, 7, 11, 12, 14, 15, 20, 21, 22, 23, 26, 28, 32, 33, 37, 38, 41, 42, 43, 44, 45, 50, 51, 52, 57, 58, 59, 60, 61, 62, 63, 64, 68, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 90, 91, 93, 95, 96, 97, 98, 99, 100, 101, 111, 112, 114, 115, 116, 118, 120, 121, 122, 124, 129, 130, 133, 134, 135, 136, 137, 139, 140, 141, 145, 146, 151, 152, 156, 158, 159, 160, 162, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 193, 196, 197, 198, 199, 204, 205, 206, 208, 213, 215, 216, 217, 219, 222, 223, 224, 225, 227, 228, 229, 232, 233, 234, 236, 238, 242, 243, 244, 245, 246, 248, 251, 252, 253, 257, 258, 259, 260, 261, 262, 264, 265, 268, 271, 274, 275, 277, 278, 280, 281, 285, 287, 292, 294, 297, 302], "context": [3, 4, 5, 11, 12, 13, 17, 21, 23, 34, 42, 43, 44, 68, 70, 76, 98, 129, 141, 196, 216, 217, 219, 221, 234, 255, 257, 262, 270], "manag": [3, 7, 9, 12, 39, 43, 44, 110, 171, 219, 238, 252, 255, 257, 262], "filter": [3, 12, 13, 18, 32, 68, 69, 93, 163, 222, 255, 257, 262, 264], "emit": [3, 12, 226, 255, 262], "assert": [3, 11, 12, 48, 57, 58, 59, 60, 68, 78, 80, 110, 155, 215, 226, 234, 242, 243, 244, 255, 262, 264], "separ": [3, 4, 11, 12, 13, 14, 15, 19, 22, 23, 25, 30, 36, 48, 56, 68, 69, 74, 76, 93, 95, 104, 125, 129, 133, 137, 139, 155, 156, 159, 164, 188, 191, 201, 212, 214, 215, 217, 219, 222, 223, 226, 235, 238, 239, 242, 243, 245, 250, 255, 257, 261, 265, 267, 270, 294], "block": [3, 4, 26, 37, 49, 57, 59, 69, 99, 104, 133, 139, 141, 143, 146, 201, 210, 215, 239, 265, 274], "behavior1": 3, "behavior2": 3, "everyth": [3, 5, 12, 15, 23, 49, 68, 70, 76, 95, 102, 126, 155, 187, 188, 212, 226, 297, 301], "els": [3, 7, 11, 12, 13, 14, 21, 22, 23, 30, 49, 58, 60, 64, 68, 69, 76, 78, 82, 84, 85, 93, 95, 98, 104, 108, 124, 191, 201, 212, 215, 217, 221, 222, 226, 227, 234, 238, 242, 244, 245, 250, 252, 257, 264, 267, 270, 273, 291, 297], "anywher": [3, 4, 13, 21, 49, 68, 76, 82, 191, 267, 296], "ignore_warn": [3, 255, 260, 262, 265], "prevent": [3, 7, 12, 15, 32, 37, 49, 68, 74, 105, 108, 128, 139, 215, 217, 222, 226, 238, 246, 255, 262, 293], "trigger": [3, 12, 23, 60, 110, 191, 255], "twice": [3, 15, 49, 68, 70, 82, 108, 201, 203, 209, 222, 226, 261, 262, 270, 272, 292], "similar": [3, 9, 11, 12, 13, 15, 19, 21, 23, 28, 60, 67, 68, 69, 72, 73, 74, 76, 79, 84, 85, 89, 98, 104, 109, 124, 129, 141, 143, 145, 155, 156, 189, 200, 207, 209, 210, 214, 216, 217, 219, 223, 233, 235, 236, 238, 242, 244, 247, 252, 255, 258, 261, 262, 270, 272, 274, 275, 279, 291, 296, 297, 298, 300, 302], "somewher": [3, 4, 5, 12, 14, 49], "sign": [3, 4, 5, 9, 12, 14, 26, 28, 32, 37, 41, 46, 49, 64, 68, 69, 73, 74, 78, 84, 93, 95, 104, 108, 114, 116, 117, 120, 124, 129, 137, 143, 164, 176, 201, 207, 209, 211, 215, 219, 226, 231, 233, 238, 239, 244, 264, 277, 280, 295], "readi": [3, 11, 21, 139, 216, 226, 242], "paragraph": [3, 4, 5, 23, 48], "metadata": [3, 11, 48, 260, 262], "link": [3, 4, 5, 7, 11, 14, 15, 29, 33, 49, 69, 78, 84, 95, 125, 129, 133, 144, 152, 258, 261, 262, 300], "rememb": [3, 4, 11, 12, 15, 23, 35, 98, 104, 125, 128, 158, 209, 210, 226, 238, 244, 247, 265, 297, 302], "shown": [3, 4, 12, 13, 14, 21, 22, 23, 57, 60, 67, 68, 72, 74, 76, 93, 110, 116, 117, 122, 124, 128, 134, 136, 144, 145, 146, 152, 153, 154, 200, 201, 209, 210, 212, 215, 216, 217, 222, 226, 242, 246, 262, 264, 274, 275, 295], "plain": [3, 4, 11, 12, 21, 68, 76, 96, 206, 215, 222, 226], "rst": [3, 4, 5, 11, 14, 50, 242, 257], "markdown": [3, 11, 14], "markup": [3, 11, 226], "clearli": [3, 4, 23, 108, 210, 216, 236, 298], "delin": 3, "newlin": [3, 12, 104, 267], "80": [3, 4, 8, 12, 15, 23, 47, 59, 68, 71, 95, 104, 108, 116, 117, 122, 215, 222, 225, 242, 246, 262, 264], "charact": [3, 4, 5, 11, 12, 68, 69, 93, 96, 110, 171, 201, 206, 212, 226, 242, 257, 259, 262, 267, 294, 296, 301], "full": [3, 4, 5, 11, 12, 13, 15, 17, 21, 23, 31, 45, 47, 49, 59, 60, 68, 72, 76, 80, 81, 95, 101, 104, 110, 139, 153, 154, 201, 215, 216, 219, 220, 222, 226, 228, 238, 239, 265, 296, 302], "abc": [3, 4, 11, 12, 15, 17, 18, 23, 26, 28, 30, 32, 34, 35, 36, 37, 41, 42, 43, 44, 45, 46, 47, 49, 57, 59, 61, 67, 68, 69, 70, 73, 74, 76, 77, 78, 79, 81, 82, 83, 84, 85, 91, 92, 93, 95, 96, 98, 99, 101, 104, 107, 108, 109, 122, 124, 126, 162, 164, 166, 167, 172, 189, 191, 192, 213, 215, 217, 219, 221, 222, 223, 226, 227, 228, 229, 231, 232, 233, 234, 235, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 251, 253, 258, 259, 260, 261, 262, 264, 265, 267, 270, 273, 274, 275, 280, 282, 294, 297, 301], "func": [3, 4, 12, 14, 20, 23, 43, 47, 49, 68, 70, 73, 76, 87, 89, 108, 110, 136, 180, 201, 215, 219, 222, 226, 227, 238, 242, 243, 244, 255, 260, 262, 264, 265, 267, 269], "larger": [3, 5, 14, 23, 33, 49, 59, 60, 67, 68, 69, 76, 93, 101, 104, 108, 145, 149, 215, 217, 223, 227, 233, 238, 244, 259, 261, 294, 302], "easier": [3, 9, 11, 12, 13, 14, 22, 36, 51, 68, 117, 141, 143, 209, 217, 221, 223, 236, 242, 245, 259, 265, 274, 296, 302, 303], "exactli": [3, 4, 5, 11, 12, 13, 14, 15, 23, 28, 35, 37, 45, 52, 59, 68, 71, 72, 104, 110, 156, 211, 222, 236, 238, 242, 245, 247, 261, 264, 265, 292, 294, 296, 301, 302], "sphinx": [3, 5, 8, 11, 74, 242, 257, 262], "direct": [3, 4, 5, 13, 14, 20, 35, 41, 43, 44, 48, 53, 56, 59, 64, 67, 68, 70, 72, 74, 77, 81, 82, 83, 84, 98, 99, 104, 111, 112, 114, 116, 117, 118, 120, 128, 129, 130, 133, 136, 137, 139, 140, 143, 145, 149, 158, 177, 201, 207, 209, 210, 213, 215, 216, 219, 223, 233, 236, 244, 252, 255, 264, 270, 275, 276, 279], "syntax": [3, 4, 5, 11, 13, 14, 15, 23, 35, 42, 44, 60, 68, 95, 110, 141, 158, 188, 212, 216, 225, 226, 238, 244, 248, 267, 292, 294, 296, 301, 303], "paramet": [3, 5, 12, 13, 14, 15, 28, 34, 36, 41, 42, 44, 47, 49, 50, 51, 59, 60, 64, 66, 68, 69, 70, 71, 73, 74, 76, 77, 78, 79, 81, 82, 83, 84, 85, 87, 91, 93, 95, 96, 98, 99, 101, 104, 105, 107, 108, 110, 112, 114, 116, 118, 120, 122, 124, 125, 126, 128, 129, 130, 131, 133, 134, 135, 136, 137, 139, 140, 141, 143, 158, 160, 162, 163, 164, 166, 167, 168, 170, 171, 172, 174, 175, 176, 179, 180, 181, 183, 185, 186, 188, 189, 190, 191, 192, 193, 195, 201, 202, 203, 205, 206, 207, 210, 211, 212, 214, 215, 217, 219, 221, 222, 223, 224, 226, 227, 228, 229, 231, 232, 233, 234, 238, 239, 241, 242, 243, 244, 246, 247, 248, 251, 252, 255, 257, 258, 259, 261, 262, 264, 265, 270, 272, 273, 274, 275, 280, 292, 297], "short": [3, 5, 11, 12, 15, 40, 50, 58, 60, 64, 68, 69, 70, 71, 74, 102, 108, 128, 140, 177, 196, 200, 210, 213, 220, 247, 257, 267, 297, 301], "format": [3, 8, 11, 12, 14, 17, 19, 32, 35, 36, 48, 60, 69, 90, 91, 95, 98, 104, 107, 108, 116, 134, 135, 139, 159, 164, 175, 185, 212, 215, 216, 221, 222, 224, 226, 236, 242, 245, 257, 267, 270, 274, 295, 298, 301], "renam": [3, 49, 95], "rest": [3, 13, 93, 96, 98, 102, 117, 126, 141, 145, 151, 196, 213, 216, 246, 264, 294, 295, 302], "left": [3, 5, 13, 19, 21, 23, 26, 29, 30, 33, 41, 47, 49, 50, 59, 60, 64, 68, 69, 70, 73, 74, 76, 84, 85, 91, 93, 95, 96, 98, 99, 104, 107, 108, 111, 112, 118, 124, 130, 139, 140, 163, 170, 175, 179, 180, 183, 188, 200, 201, 207, 211, 212, 213, 215, 222, 223, 224, 225, 226, 228, 229, 233, 234, 235, 236, 238, 242, 243, 244, 245, 246, 257, 258, 259, 261, 264, 277, 292, 296, 298, 302], "imaginari": [3, 4, 15, 21, 23, 28, 32, 34, 41, 45, 46, 68, 72, 74, 76, 99, 158, 216, 217, 222, 226, 227, 234, 238, 245], "simplify_thi": [3, 4, 260], "expr": [3, 4, 12, 14, 15, 21, 23, 32, 34, 37, 43, 44, 46, 47, 49, 60, 67, 70, 72, 74, 76, 78, 90, 93, 95, 98, 101, 104, 108, 109, 110, 114, 124, 128, 129, 131, 134, 136, 137, 139, 141, 155, 168, 172, 174, 176, 180, 183, 186, 188, 189, 191, 198, 201, 203, 206, 212, 214, 215, 216, 217, 219, 221, 222, 223, 224, 226, 227, 228, 229, 231, 233, 235, 238, 241, 242, 243, 244, 245, 246, 247, 248, 250, 252, 253, 258, 259, 260, 262, 265, 270, 272, 273, 274, 275, 277, 291, 292, 294, 296, 297, 301, 302, 303], "simplifi": [3, 4, 11, 12, 14, 15, 19, 21, 22, 23, 26, 33, 34, 35, 42, 44, 46, 47, 67, 68, 70, 72, 73, 74, 76, 80, 85, 90, 93, 95, 98, 99, 100, 101, 104, 112, 116, 124, 125, 131, 133, 134, 135, 137, 139, 140, 144, 145, 148, 149, 150, 155, 163, 170, 175, 190, 191, 195, 198, 201, 207, 213, 215, 221, 223, 225, 227, 232, 234, 235, 236, 239, 242, 243, 244, 245, 246, 248, 260, 262, 265, 274, 276, 282, 291, 293, 294, 296, 297, 298], "def": [3, 4, 5, 11, 12, 13, 14, 15, 19, 21, 22, 23, 43, 44, 48, 68, 73, 80, 98, 104, 108, 110, 149, 186, 216, 222, 226, 235, 238, 245, 260, 262, 264, 265, 291, 294, 297, 298, 302], "ref": [3, 59, 74, 104, 122, 158, 231, 246, 260, 298], "is_this_zero": [3, 262], "y": [3, 4, 11, 12, 13, 14, 15, 17, 18, 21, 22, 23, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 59, 60, 67, 68, 69, 70, 71, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 91, 93, 95, 96, 97, 98, 99, 100, 101, 104, 108, 109, 110, 116, 117, 118, 120, 122, 124, 130, 131, 133, 136, 137, 139, 140, 141, 143, 144, 145, 146, 148, 149, 150, 152, 156, 158, 159, 168, 169, 172, 175, 180, 186, 188, 189, 191, 192, 200, 201, 202, 203, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 232, 233, 234, 235, 236, 238, 239, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 258, 259, 262, 264, 265, 267, 270, 273, 274, 275, 276, 277, 279, 280, 291, 292, 294, 296, 297, 301, 302, 303], "0": [3, 4, 11, 12, 13, 14, 15, 17, 19, 21, 22, 23, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 116, 117, 118, 120, 122, 124, 125, 126, 127, 129, 130, 131, 133, 134, 136, 137, 139, 140, 141, 143, 144, 145, 146, 148, 150, 153, 154, 155, 156, 158, 159, 160, 163, 164, 165, 167, 170, 175, 176, 177, 180, 185, 186, 187, 188, 189, 190, 191, 192, 196, 198, 200, 201, 202, 203, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 221, 222, 223, 224, 225, 226, 228, 229, 231, 232, 233, 234, 235, 236, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 255, 257, 258, 260, 261, 262, 264, 265, 266, 270, 272, 273, 274, 275, 276, 277, 280, 291, 292, 294, 296, 297, 298, 301, 302, 303], "zero": [3, 14, 15, 17, 21, 22, 23, 26, 33, 34, 41, 45, 46, 49, 58, 59, 60, 64, 67, 68, 71, 72, 73, 74, 76, 78, 82, 83, 84, 93, 95, 97, 98, 99, 101, 103, 104, 107, 108, 110, 116, 124, 129, 133, 134, 135, 136, 139, 140, 141, 143, 146, 149, 152, 153, 154, 158, 163, 185, 189, 191, 193, 205, 207, 209, 210, 211, 213, 214, 215, 216, 217, 221, 222, 224, 226, 229, 233, 234, 236, 238, 239, 242, 243, 244, 245, 246, 247, 262, 264, 265, 274, 276, 277, 297, 303], "is_zero": [3, 21, 23, 83, 104, 213, 217, 222, 262, 298], "where": [3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 19, 21, 22, 23, 26, 28, 31, 32, 33, 35, 37, 40, 41, 45, 47, 48, 49, 50, 57, 58, 59, 60, 62, 64, 66, 67, 68, 69, 70, 72, 73, 74, 76, 78, 81, 83, 84, 85, 86, 90, 91, 92, 93, 95, 97, 98, 99, 100, 101, 104, 108, 110, 111, 114, 116, 118, 120, 121, 124, 128, 129, 133, 134, 135, 136, 139, 140, 141, 143, 154, 155, 156, 158, 159, 165, 175, 180, 186, 188, 190, 191, 192, 193, 194, 200, 201, 205, 207, 209, 210, 211, 213, 214, 215, 216, 217, 219, 221, 222, 223, 224, 226, 227, 228, 229, 232, 233, 234, 235, 236, 238, 239, 242, 243, 244, 246, 247, 250, 252, 257, 258, 259, 260, 264, 265, 267, 270, 277, 279, 292, 294, 296, 298, 302, 303], "mail": [3, 9, 11, 13, 28, 30, 31, 32, 33, 34, 35, 36, 37, 39, 226, 295], "summar": [3, 11, 257, 302], "idea": [3, 7, 11, 12, 14, 21, 22, 23, 53, 59, 66, 68, 69, 80, 86, 93, 95, 108, 125, 141, 191, 195, 196, 213, 215, 216, 235, 238, 239, 242, 245, 259, 265, 302], "fit": [3, 14, 48, 93, 104, 107, 108, 210, 226, 242, 267, 297], "put": [3, 4, 11, 13, 14, 15, 19, 23, 30, 49, 64, 65, 68, 69, 70, 74, 98, 99, 104, 163, 168, 172, 187, 188, 222, 226, 227, 235, 236, 238, 242, 247, 253, 258, 298, 302], "word": [3, 5, 9, 12, 14, 23, 45, 64, 67, 68, 69, 74, 76, 98, 124, 134, 141, 156, 213, 216, 221, 238, 239, 242, 244, 259, 270, 275, 294], "global": [3, 4, 9, 12, 13, 42, 43, 44, 47, 49, 50, 68, 80, 93, 110, 129, 137, 139, 175, 181, 201, 203, 212, 213, 216, 217, 219, 226, 239, 242, 243, 246, 257, 259, 260, 265, 273], "uniqu": [3, 13, 14, 47, 48, 50, 59, 62, 64, 68, 69, 70, 73, 76, 83, 86, 91, 95, 97, 98, 104, 108, 133, 134, 180, 189, 201, 210, 213, 214, 215, 216, 219, 221, 222, 227, 231, 238, 239, 242, 244, 245, 246, 250, 259, 264, 267, 274, 279, 294, 297], "across": [3, 5, 11, 59, 66, 68, 79, 95, 117, 190, 191, 198, 212, 226, 261, 263, 264, 265, 300], "level": [3, 4, 5, 7, 12, 13, 14, 15, 21, 22, 30, 32, 49, 59, 66, 68, 74, 76, 95, 98, 104, 108, 111, 114, 128, 145, 158, 186, 191, 196, 200, 203, 210, 212, 215, 216, 217, 224, 226, 235, 239, 245, 246, 250, 258, 259, 264, 297, 298, 300], "correspond": [3, 4, 5, 7, 11, 12, 13, 19, 21, 22, 23, 26, 31, 35, 47, 48, 49, 50, 58, 59, 60, 62, 63, 64, 67, 68, 69, 70, 71, 74, 76, 78, 79, 81, 82, 83, 84, 91, 93, 95, 97, 98, 99, 104, 107, 108, 112, 114, 116, 117, 124, 131, 133, 134, 135, 136, 139, 141, 143, 145, 159, 163, 167, 181, 185, 186, 188, 192, 193, 196, 201, 205, 207, 211, 212, 214, 215, 216, 217, 219, 221, 222, 226, 232, 233, 236, 238, 239, 242, 243, 244, 245, 246, 248, 250, 251, 252, 259, 260, 261, 262, 264, 265, 267, 270, 272, 274, 275, 277, 279, 297, 303], "share": [3, 7, 21, 23, 69, 108, 217, 221, 226, 246, 259], "__init__": [3, 4, 23, 68, 134, 135, 221, 270, 272, 297], "func_nam": [3, 49, 74, 99, 267], "help": [3, 4, 5, 7, 9, 11, 12, 21, 32, 40, 49, 58, 68, 76, 93, 95, 104, 108, 109, 110, 116, 122, 141, 158, 166, 176, 210, 212, 221, 223, 226, 235, 236, 239, 242, 243, 246, 257, 258, 259, 265, 287, 295, 298], "rais": [3, 11, 12, 13, 15, 17, 21, 22, 23, 42, 44, 47, 49, 57, 60, 68, 69, 70, 72, 74, 77, 78, 81, 83, 84, 85, 93, 95, 99, 101, 104, 105, 107, 108, 110, 122, 124, 140, 165, 177, 207, 210, 212, 213, 214, 215, 216, 217, 219, 221, 222, 223, 226, 228, 234, 238, 241, 242, 243, 244, 245, 246, 250, 252, 255, 257, 259, 262, 264, 267, 277, 298], "been": [3, 11, 15, 21, 23, 28, 47, 49, 50, 59, 60, 61, 64, 67, 68, 69, 74, 80, 93, 95, 104, 108, 109, 110, 111, 114, 115, 116, 133, 134, 139, 141, 143, 151, 155, 156, 164, 176, 186, 188, 196, 207, 208, 209, 210, 213, 216, 217, 221, 223, 224, 226, 228, 233, 236, 238, 243, 244, 245, 247, 248, 256, 257, 259, 260, 262, 264, 267, 274, 277, 294, 295, 297, 298, 302], "simplfiy_thi": 3, "ident": [3, 14, 15, 23, 25, 45, 48, 50, 58, 59, 60, 66, 68, 69, 73, 74, 84, 91, 97, 99, 101, 104, 125, 127, 133, 134, 156, 175, 177, 180, 196, 213, 214, 215, 219, 220, 221, 222, 226, 235, 238, 242, 245, 250, 252, 257, 264, 265, 267, 275, 294, 298, 302], "much": [3, 4, 11, 12, 13, 19, 21, 22, 23, 28, 34, 48, 49, 53, 64, 68, 72, 76, 90, 93, 95, 155, 156, 199, 209, 210, 211, 213, 215, 216, 219, 222, 233, 236, 238, 242, 243, 244, 245, 259, 261, 294, 296, 302], "trivial": [3, 50, 59, 64, 67, 68, 69, 74, 83, 98, 101, 104, 108, 153, 191, 213, 214, 219, 222, 236, 239, 242, 245, 250], "furthermor": [3, 13, 23, 45, 68, 69, 98, 221, 235, 294, 296, 297], "particular": [3, 4, 11, 12, 13, 14, 15, 21, 22, 29, 31, 45, 50, 59, 68, 69, 72, 76, 79, 93, 95, 98, 101, 104, 108, 116, 120, 151, 175, 186, 214, 215, 216, 217, 219, 221, 222, 232, 234, 236, 238, 239, 242, 244, 245, 257, 259, 261, 298, 300, 302], "expr1": [3, 21, 124, 212, 244, 297], "expr2": [3, 21, 124, 212, 297], "dozen": [3, 14, 23, 302], "search": [3, 4, 29, 47, 51, 59, 60, 64, 66, 68, 74, 104, 108, 141, 213, 221, 222, 226, 235, 236, 238, 243, 246, 258], "upcom": 3, "bot": [3, 11], "liter": [4, 12, 15, 23, 49, 58, 68, 96, 98, 110, 191, 198, 238], "occur": [4, 13, 14, 15, 59, 60, 68, 72, 76, 85, 93, 99, 110, 128, 133, 155, 200, 201, 209, 221, 229, 238, 243, 244, 247, 248, 257, 264, 297], "definit": [4, 13, 14, 15, 22, 41, 45, 49, 50, 59, 60, 65, 67, 68, 70, 71, 73, 74, 76, 81, 84, 91, 93, 95, 99, 100, 101, 104, 108, 110, 133, 139, 143, 148, 149, 156, 193, 196, 199, 201, 209, 210, 213, 214, 217, 222, 223, 226, 233, 246, 247, 258, 259, 260, 264, 265, 270, 274, 275, 276, 277, 292, 302], "__doc__": [4, 15], "attribut": [4, 14, 18, 21, 23, 43, 44, 48, 49, 59, 60, 68, 76, 77, 78, 81, 82, 83, 84, 101, 104, 110, 111, 114, 115, 117, 124, 130, 133, 134, 135, 136, 137, 139, 148, 156, 159, 180, 185, 189, 196, 200, 201, 207, 210, 212, 213, 216, 217, 221, 226, 234, 238, 239, 251, 252, 258, 260, 264, 265, 274, 297], "fdiff": [4, 11, 23, 49, 68, 74, 75, 76, 112], "self": [4, 11, 12, 21, 23, 33, 41, 43, 44, 48, 49, 59, 60, 65, 67, 68, 70, 74, 77, 78, 79, 81, 82, 83, 84, 95, 99, 104, 108, 130, 143, 186, 191, 201, 203, 205, 212, 213, 215, 217, 219, 221, 222, 226, 228, 233, 234, 252, 270], "argindex": [4, 11, 23, 49, 68, 74, 75, 76, 112], "heavisid": [4, 11, 76, 93, 95, 226], "diff": [4, 9, 11, 12, 13, 14, 19, 23, 26, 32, 35, 47, 49, 68, 73, 74, 75, 76, 85, 90, 95, 101, 104, 112, 128, 131, 136, 144, 145, 158, 189, 201, 203, 206, 207, 210, 212, 217, 222, 225, 226, 236, 242, 243, 244, 247, 248, 253, 274, 277, 292, 296, 303], "diracdelta": [4, 11, 76, 95, 186, 191, 226], "what": [4, 5, 7, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 28, 29, 38, 47, 49, 60, 62, 67, 68, 69, 70, 74, 75, 78, 79, 83, 93, 95, 97, 104, 108, 110, 130, 133, 134, 137, 139, 141, 145, 152, 158, 190, 191, 194, 196, 201, 209, 210, 212, 217, 219, 222, 225, 226, 227, 233, 235, 236, 238, 239, 242, 244, 251, 255, 257, 259, 260, 265, 274, 275, 280, 292, 294, 295, 297, 301, 302], "specif": [4, 5, 7, 8, 11, 12, 13, 14, 21, 23, 24, 31, 38, 59, 60, 68, 69, 70, 76, 80, 95, 97, 99, 104, 112, 114, 130, 133, 134, 139, 141, 151, 158, 160, 196, 210, 212, 213, 217, 219, 221, 222, 225, 226, 227, 232, 238, 239, 242, 243, 244, 246, 252, 257, 258, 259, 264, 298, 302], "purpos": [4, 5, 9, 12, 13, 14, 20, 21, 23, 35, 48, 49, 59, 65, 68, 69, 95, 104, 108, 141, 156, 158, 196, 210, 212, 216, 219, 223, 225, 226, 233, 242, 245, 251, 261, 263, 265, 274, 275, 292, 302], "scope": [4, 11, 49, 151, 155, 255, 302], "high": [4, 5, 7, 11, 12, 15, 19, 21, 27, 28, 32, 49, 68, 72, 73, 96, 108, 158, 206, 215, 216, 221, 222, 224, 226, 239, 244, 287, 298], "od": [4, 12, 14, 23, 91, 134, 139, 151, 158, 240, 243, 282, 303], "seen": [4, 11, 19, 21, 41, 60, 93, 95, 110, 120, 133, 136, 139, 152, 196, 209, 213, 216, 219, 222, 242, 245, 262, 264, 274, 294, 297, 301], "hand": [4, 12, 13, 19, 21, 23, 30, 35, 48, 49, 51, 60, 61, 68, 74, 76, 95, 98, 99, 104, 108, 116, 120, 134, 139, 140, 141, 155, 156, 159, 163, 180, 183, 195, 201, 207, 210, 211, 213, 216, 217, 219, 221, 224, 236, 245, 257, 259, 261, 265, 277, 279, 296], "code": [4, 8, 10, 14, 19, 21, 22, 23, 31, 34, 35, 36, 37, 39, 40, 50, 55, 59, 62, 63, 68, 69, 70, 76, 80, 93, 95, 96, 104, 108, 109, 110, 111, 114, 130, 133, 141, 143, 149, 151, 152, 158, 159, 185, 191, 200, 206, 209, 211, 212, 213, 214, 215, 216, 219, 225, 236, 238, 242, 244, 245, 246, 248, 251, 254, 255, 257, 258, 259, 262, 263, 264, 265, 274, 282, 289, 294, 296, 299, 301], "less": [4, 5, 11, 14, 19, 28, 31, 33, 41, 45, 49, 50, 51, 59, 60, 67, 68, 69, 72, 73, 74, 76, 82, 83, 84, 99, 104, 108, 122, 124, 129, 139, 141, 143, 191, 215, 216, 217, 219, 221, 222, 235, 236, 238, 239, 242, 244, 245, 246, 257, 259], "understand": [4, 11, 12, 15, 21, 22, 23, 37, 68, 69, 93, 141, 151, 153, 154, 158, 196, 209, 212, 215, 216, 221, 226, 236, 239, 258, 265, 293, 294, 301, 302], "clear": [4, 7, 11, 12, 13, 21, 43, 58, 68, 93, 97, 130, 209, 210, 212, 215, 217, 219, 222, 236, 244, 245, 252, 257, 261, 279, 294], "begin": [4, 7, 11, 12, 13, 15, 21, 23, 26, 29, 33, 35, 41, 68, 69, 73, 74, 76, 93, 99, 101, 104, 108, 110, 114, 145, 153, 154, 155, 156, 187, 196, 200, 201, 210, 211, 215, 226, 236, 239, 242, 243, 245, 246, 257, 267, 294, 296, 298, 302], "convers": [4, 5, 13, 21, 31, 49, 68, 88, 110, 155, 195, 214, 215, 216, 217, 219, 221, 223, 226, 239, 251, 258, 270], "aim": [4, 5, 12, 86, 93, 196, 213, 236, 242, 245, 295, 296], "comment": [4, 5, 11, 12, 49, 59, 141, 143, 223, 226, 259, 264], "distract": 4, "input": [4, 5, 11, 12, 14, 15, 23, 26, 32, 35, 41, 47, 50, 64, 68, 69, 71, 72, 73, 74, 82, 95, 97, 98, 104, 108, 110, 111, 112, 114, 118, 120, 121, 122, 124, 128, 133, 135, 139, 141, 143, 144, 145, 155, 158, 159, 164, 187, 201, 203, 205, 215, 216, 217, 219, 222, 223, 224, 225, 226, 227, 234, 238, 239, 242, 244, 246, 248, 258, 259, 261, 262, 264, 265, 267, 291, 297, 298, 302], "consum": [4, 49, 76, 135, 155], "human": [4, 11, 17, 93, 193, 222, 226], "beings": 4, "english": [4, 11, 69], "likewis": [4, 21, 48, 116, 144, 145], "reader": [4, 5, 11, 12, 23, 48, 50, 156, 213, 226, 261, 295, 300], "machineri": [4, 68, 221, 265], "mind": [4, 11, 12, 15, 18, 21, 32, 68, 104, 156, 212, 233, 234, 279, 297], "platform": [4, 68, 118, 191, 210, 242, 258], "anyon": [4, 5, 13, 38, 222, 226, 290, 300, 301], "restructuredtext": [4, 5], "extend": [4, 5, 12, 21, 23, 31, 45, 49, 59, 60, 68, 69, 73, 80, 93, 95, 104, 108, 115, 158, 199, 206, 212, 214, 217, 219, 221, 222, 223, 226, 233, 235, 239, 241, 242, 245, 246, 247, 259, 261, 294, 296], "concis": [4, 158], "quick": [4, 5, 11, 23, 68, 104, 108, 238, 244, 265], "depth": [4, 5, 15, 16, 38, 59, 68, 143, 212, 213, 226], "tripl": [4, 11, 31, 85, 104, 110, 210, 211, 213, 217, 221, 267], "doubl": [4, 5, 8, 35, 47, 49, 64, 68, 69, 73, 104, 110, 133, 150, 151, 209, 215, 216, 226, 235, 236, 259, 302], "quot": [4, 11, 15, 49, 98, 226, 267], "raw": [4, 5, 49, 68, 69, 74, 109, 110, 185, 190, 215, 216, 217, 222, 234, 238, 301], "backslash": [4, 68, 226], "blank": [4, 11, 12, 110, 212], "close": [4, 11, 14, 26, 34, 49, 67, 68, 72, 73, 76, 84, 86, 93, 95, 97, 112, 124, 144, 212, 213, 214, 220, 221, 234, 244, 245, 259, 292, 302], "rare": [4, 12, 23, 68, 242, 246, 255, 294], "underlin": [4, 5], "numpydoc": [4, 5], "build": [4, 5, 6, 10, 11, 12, 18, 43, 44, 49, 68, 70, 76, 98, 158, 185, 196, 201, 210, 213, 218, 221, 222, 223, 233, 246, 274, 291, 294, 297], "cd": [4, 8, 9, 25, 120, 215, 245, 248, 264], "_build": [4, 8, 25], "consist": [4, 5, 13, 14, 19, 21, 30, 32, 36, 48, 59, 60, 64, 68, 69, 73, 74, 76, 78, 84, 86, 93, 98, 108, 110, 111, 116, 120, 133, 136, 152, 156, 165, 185, 191, 196, 199, 205, 212, 214, 215, 216, 217, 219, 234, 242, 244, 245, 246, 250, 255, 258, 259, 264, 295, 297], "review": [4, 5, 11, 12, 157], "head": [4, 18, 48, 68, 244, 246, 252, 267, 297], "plural": [4, 5], "length": [4, 13, 41, 49, 52, 58, 59, 60, 62, 66, 68, 69, 71, 73, 74, 76, 77, 81, 83, 84, 85, 98, 99, 104, 107, 108, 112, 114, 116, 117, 118, 120, 128, 129, 134, 137, 139, 140, 144, 145, 146, 156, 160, 164, 188, 193, 194, 195, 196, 201, 205, 210, 221, 222, 226, 232, 236, 238, 242, 244, 246, 257, 258, 264, 267, 270, 272, 280], "equal": [4, 12, 13, 14, 17, 21, 22, 23, 28, 35, 37, 41, 45, 48, 49, 50, 57, 58, 59, 60, 64, 66, 67, 68, 69, 70, 72, 73, 74, 76, 81, 82, 83, 84, 85, 87, 93, 98, 99, 101, 104, 108, 112, 114, 116, 120, 124, 125, 129, 130, 134, 136, 137, 139, 143, 153, 154, 175, 176, 191, 195, 196, 201, 205, 210, 213, 214, 215, 216, 217, 219, 221, 222, 224, 226, 232, 234, 236, 239, 242, 243, 244, 245, 246, 252, 257, 258, 259, 264, 267, 270, 275, 280, 292, 295, 303], "clutter": 4, "harder": [4, 12, 13, 21, 68, 93, 216, 257], "minim": [4, 21, 23, 47, 59, 60, 64, 67, 68, 69, 93, 95, 98, 104, 108, 130, 145, 160, 215, 216, 217, 219, 222, 225, 235, 238, 239, 244, 264], "amount": [4, 12, 48, 68, 69, 80, 133, 151, 201, 207, 210, 219, 229, 257, 270, 272], "deprec": [4, 6, 16, 30, 42, 60, 68, 95, 99, 127, 133, 134, 155, 212, 222, 226, 246, 252, 255, 256, 260, 262, 265], "notifi": [4, 110], "awai": [4, 48, 50, 69, 116, 117, 120, 129, 137, 143, 221, 226], "encourag": [4, 13, 48, 153, 154, 221], "choos": [4, 8, 9, 11, 32, 35, 59, 64, 68, 70, 73, 104, 108, 114, 117, 122, 145, 156, 191, 195, 201, 209, 210, 215, 222, 223, 226, 233, 235, 236, 242, 243, 246, 257, 262, 302], "label": [4, 7, 35, 48, 49, 62, 68, 78, 91, 95, 118, 120, 164, 171, 175, 180, 189, 191, 212, 226, 227, 229, 238, 251, 252, 301], "elabor": [4, 24, 207, 277], "suffic": [4, 214, 244], "clarifi": 4, "complic": [4, 12, 15, 17, 21, 23, 28, 34, 41, 49, 59, 67, 69, 70, 72, 73, 74, 76, 93, 95, 101, 110, 151, 153, 191, 210, 215, 216, 219, 223, 225, 236, 238, 245, 246, 250, 251, 259, 261, 265, 267, 292, 294, 297, 298], "demonstr": [4, 5, 15, 21, 23, 26, 28, 32, 33, 34, 59, 60, 68, 95, 108, 130, 133, 141, 145, 146, 155, 213, 216, 276, 302], "api": [4, 5, 11, 13, 21, 24, 31, 33, 49, 68, 80, 88, 109, 110, 115, 123, 151, 156, 158, 187, 208, 212, 219, 239, 241, 265, 274, 275, 278, 285, 287, 288, 295, 296, 299], "simpl": [4, 11, 12, 14, 15, 19, 21, 23, 34, 39, 48, 49, 59, 67, 68, 72, 76, 80, 84, 86, 93, 95, 97, 104, 108, 109, 110, 111, 112, 114, 116, 117, 124, 125, 128, 129, 133, 134, 136, 139, 140, 143, 145, 146, 148, 150, 151, 155, 159, 165, 179, 180, 188, 189, 190, 201, 209, 210, 215, 216, 217, 218, 222, 223, 226, 228, 233, 235, 236, 238, 239, 242, 245, 252, 258, 259, 264, 269, 270, 272, 273, 277, 291, 294, 297, 298, 302], "too": [4, 7, 11, 12, 15, 23, 25, 37, 59, 60, 68, 74, 76, 78, 81, 83, 93, 98, 107, 108, 109, 112, 134, 153, 160, 233, 234, 238, 239, 242, 244, 245, 246, 257, 258, 273, 274], "thought": [4, 12, 14, 68, 233, 242, 294, 297], "perfect": [4, 23, 35, 59, 68, 108, 239, 245, 296, 297], "tell": [4, 5, 11, 21, 22, 28, 32, 35, 49, 60, 69, 72, 76, 99, 110, 139, 196, 216, 221, 225, 233, 236, 242, 258, 294], "think": [4, 11, 12, 13, 14, 21, 22, 23, 32, 39, 47, 59, 143, 196, 261, 265, 294, 302], "test_": [4, 11, 12, 257], "coverage_doctest": 4, "coverag": 4, "ad": [4, 5, 7, 8, 9, 11, 12, 13, 21, 30, 32, 41, 48, 49, 52, 58, 59, 68, 69, 79, 83, 90, 93, 97, 108, 110, 116, 120, 128, 130, 133, 139, 141, 142, 158, 165, 193, 196, 202, 211, 212, 221, 223, 225, 226, 228, 236, 239, 242, 244, 245, 246, 248, 251, 252, 257, 273, 294], "6868680200532414": [4, 12], "prompt": [4, 8, 12, 14], "dsolv": [4, 12, 14, 35, 242, 243, 244, 292, 296, 303], "co": [4, 9, 12, 13, 15, 23, 26, 29, 30, 32, 34, 35, 36, 37, 41, 47, 49, 67, 68, 70, 72, 73, 74, 76, 77, 78, 81, 82, 84, 86, 90, 91, 92, 93, 95, 99, 104, 108, 110, 130, 131, 133, 137, 139, 140, 141, 143, 144, 146, 148, 149, 150, 155, 158, 163, 165, 201, 203, 205, 207, 209, 210, 211, 212, 216, 219, 222, 223, 225, 226, 227, 228, 229, 233, 234, 235, 236, 238, 242, 244, 245, 246, 247, 253, 265, 270, 272, 273, 274, 275, 280, 291, 292, 294, 296, 302, 303], "sin": [4, 5, 12, 13, 14, 15, 21, 23, 26, 29, 32, 34, 35, 37, 39, 41, 47, 49, 67, 68, 70, 72, 73, 74, 76, 77, 78, 82, 86, 87, 90, 91, 92, 93, 95, 96, 99, 104, 109, 110, 126, 130, 131, 133, 137, 139, 140, 141, 143, 144, 146, 148, 149, 150, 155, 158, 163, 165, 189, 201, 203, 205, 207, 209, 210, 211, 212, 214, 216, 222, 223, 225, 226, 227, 228, 229, 233, 234, 235, 236, 238, 241, 242, 244, 245, 247, 253, 259, 265, 270, 272, 273, 274, 275, 280, 291, 292, 294, 296, 297, 302, 303], "hint": [4, 12, 23, 48, 52, 59, 68, 71, 74, 95, 99, 104, 108, 112, 124, 158, 168, 172, 188, 190, 191, 201, 222, 233, 236, 244, 302], "1st_exact": [4, 12, 242], "eq": [4, 12, 14, 15, 17, 21, 23, 30, 31, 35, 37, 45, 47, 49, 68, 73, 74, 76, 78, 81, 85, 93, 98, 194, 212, 213, 217, 222, 224, 226, 228, 232, 234, 235, 238, 239, 241, 242, 243, 244, 245, 246, 258, 259, 265, 270, 294, 296, 303], "c1": [4, 12, 19, 35, 69, 78, 85, 99, 101, 112, 133, 177, 191, 234, 239, 242, 244, 276, 303], "comma": [4, 5, 12, 15, 49, 68, 226, 265, 294], "readabl": [4, 12, 40, 48, 96, 128, 222, 225, 226, 233, 235], "accept": [4, 11, 12, 14, 23, 30, 37, 48, 49, 59, 68, 74, 81, 82, 95, 98, 99, 101, 104, 107, 110, 124, 141, 185, 195, 201, 206, 212, 221, 222, 225, 226, 227, 234, 236, 238, 244, 258, 265, 270, 272, 275, 298], "rang": [4, 13, 14, 19, 23, 28, 31, 32, 47, 49, 57, 58, 59, 60, 62, 64, 68, 69, 73, 74, 76, 82, 99, 104, 108, 112, 117, 120, 122, 126, 160, 191, 212, 215, 216, 217, 218, 219, 221, 222, 223, 228, 229, 232, 234, 235, 238, 242, 244, 245, 246, 247, 251, 257, 264, 291, 302], "30": [4, 41, 47, 49, 54, 68, 69, 71, 72, 73, 76, 82, 84, 95, 99, 104, 105, 108, 116, 117, 118, 141, 164, 215, 217, 221, 222, 226, 232, 235, 238, 246, 247, 302], "7": [4, 11, 12, 15, 21, 23, 26, 28, 31, 35, 41, 43, 44, 47, 49, 52, 54, 57, 58, 59, 60, 61, 62, 64, 66, 67, 68, 69, 71, 72, 73, 74, 76, 78, 81, 82, 83, 84, 90, 93, 95, 98, 99, 101, 102, 104, 108, 110, 116, 118, 122, 124, 143, 150, 153, 154, 158, 191, 196, 198, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 225, 226, 228, 229, 232, 233, 234, 235, 236, 238, 239, 241, 242, 243, 244, 245, 246, 247, 251, 252, 257, 258, 261, 264, 265, 270, 280, 292, 297, 298, 301], "8": [4, 11, 12, 19, 26, 28, 34, 39, 41, 42, 47, 49, 52, 59, 60, 61, 64, 66, 68, 69, 71, 72, 73, 74, 76, 78, 81, 82, 84, 90, 93, 95, 97, 98, 99, 101, 102, 104, 105, 107, 108, 110, 112, 116, 120, 122, 124, 126, 143, 158, 163, 164, 175, 211, 212, 214, 215, 216, 217, 219, 221, 222, 223, 225, 226, 228, 229, 232, 234, 235, 236, 238, 239, 241, 242, 243, 244, 245, 246, 247, 251, 257, 259, 261, 264, 270, 273, 274, 280, 291, 292, 296, 298, 302], "9": [4, 11, 12, 17, 26, 35, 37, 39, 47, 49, 56, 58, 59, 60, 64, 66, 67, 68, 69, 71, 73, 74, 76, 77, 78, 81, 82, 84, 90, 93, 95, 99, 100, 101, 102, 104, 105, 107, 108, 110, 116, 118, 122, 124, 125, 126, 127, 130, 141, 143, 146, 152, 158, 160, 164, 196, 211, 212, 214, 215, 216, 217, 219, 221, 222, 223, 225, 226, 232, 234, 235, 236, 238, 239, 242, 244, 245, 246, 247, 257, 261, 264, 270, 273, 296, 298, 303], "11": [4, 21, 43, 44, 49, 59, 62, 64, 66, 68, 69, 71, 73, 76, 80, 81, 82, 84, 85, 93, 95, 98, 99, 100, 104, 108, 110, 112, 124, 141, 143, 175, 185, 200, 211, 212, 214, 215, 217, 219, 220, 221, 222, 223, 225, 226, 233, 235, 239, 242, 244, 245, 246, 247, 257, 258, 264, 274], "12": [4, 12, 15, 23, 26, 28, 41, 47, 48, 49, 54, 56, 57, 59, 60, 61, 64, 66, 67, 68, 69, 71, 73, 74, 76, 78, 81, 82, 84, 93, 95, 99, 104, 105, 108, 112, 116, 117, 118, 122, 124, 126, 133, 143, 144, 188, 200, 201, 211, 214, 215, 216, 219, 221, 222, 223, 225, 226, 232, 234, 235, 239, 241, 242, 246, 247, 258, 261, 264, 273, 298, 302], "13": [4, 12, 41, 49, 57, 59, 64, 68, 69, 71, 73, 76, 80, 81, 82, 83, 93, 98, 104, 108, 112, 117, 122, 124, 141, 200, 212, 215, 219, 221, 222, 223, 225, 226, 232, 239, 241, 243, 244, 246, 247, 258, 264, 280], "14": [4, 26, 28, 49, 57, 59, 63, 64, 66, 68, 69, 73, 74, 76, 93, 104, 105, 108, 109, 116, 122, 141, 211, 212, 215, 217, 219, 220, 221, 222, 223, 225, 226, 235, 238, 239, 242, 244, 246, 247, 292], "15": [4, 15, 23, 47, 54, 57, 59, 64, 66, 68, 69, 71, 72, 73, 76, 78, 81, 82, 84, 85, 93, 95, 98, 99, 100, 104, 105, 108, 116, 130, 164, 211, 212, 214, 215, 216, 217, 221, 222, 223, 225, 226, 228, 232, 233, 235, 238, 239, 243, 244, 245, 246, 247, 264, 291, 292, 297, 298], "16": [4, 12, 26, 28, 37, 41, 47, 49, 51, 59, 60, 63, 67, 68, 69, 73, 76, 77, 78, 82, 93, 95, 98, 104, 105, 107, 108, 117, 207, 214, 215, 216, 219, 220, 221, 222, 225, 226, 232, 234, 235, 236, 239, 246, 247, 264, 270, 279, 298], "17": [4, 34, 35, 37, 57, 59, 60, 68, 69, 72, 73, 74, 78, 81, 84, 93, 104, 108, 124, 216, 217, 221, 222, 225, 226, 233, 235, 239, 242, 247, 261, 296], "18": [4, 34, 51, 59, 60, 68, 71, 73, 76, 78, 81, 84, 100, 104, 108, 116, 117, 122, 124, 126, 202, 211, 215, 219, 220, 225, 226, 234, 235, 239, 242, 244, 245, 246, 247, 273], "19": [4, 26, 34, 59, 68, 71, 76, 78, 81, 84, 104, 108, 110, 112, 116, 211, 217, 221, 222, 225, 235, 239, 241, 244, 258, 291], "20": [4, 15, 26, 34, 37, 45, 49, 57, 59, 60, 67, 68, 69, 72, 73, 76, 84, 85, 95, 104, 108, 116, 117, 118, 120, 124, 136, 196, 198, 211, 212, 215, 216, 220, 221, 222, 223, 225, 226, 232, 233, 234, 235, 238, 239, 242, 245, 246, 270, 292], "21": [4, 13, 54, 59, 68, 71, 73, 81, 82, 90, 104, 108, 110, 112, 116, 200, 212, 215, 217, 219, 220, 221, 223, 225, 226, 232, 242, 246, 247, 302], "22": [4, 12, 15, 59, 68, 71, 72, 73, 76, 104, 108, 116, 117, 200, 220, 225, 238, 239, 244, 246], "23": [4, 47, 59, 60, 68, 71, 74, 76, 82, 84, 104, 108, 116, 124, 200, 217, 219, 222, 225, 232, 239, 264], "24": [4, 11, 12, 31, 33, 34, 41, 47, 56, 60, 61, 68, 71, 73, 76, 82, 90, 95, 104, 108, 116, 117, 122, 124, 188, 198, 211, 217, 219, 221, 222, 223, 225, 228, 233, 239, 242, 246, 261, 264, 280, 292, 298], "25": [4, 15, 26, 31, 34, 59, 60, 69, 71, 73, 76, 78, 81, 83, 100, 104, 107, 108, 112, 116, 117, 124, 130, 136, 205, 211, 215, 219, 221, 222, 225, 226, 232, 233, 235, 239, 241, 242, 243, 246, 258], "26": [4, 57, 68, 69, 71, 76, 80, 104, 108, 116, 117, 222, 239, 246], "27": [4, 11, 32, 49, 50, 59, 63, 73, 78, 104, 108, 116, 117, 124, 126, 219, 222, 244], "28": [4, 49, 59, 67, 71, 72, 76, 104, 108, 116, 143, 235, 239, 242, 297], "29": [4, 21, 41, 43, 44, 51, 57, 59, 60, 68, 69, 71, 73, 74, 81, 82, 104, 108, 124, 180, 216, 234, 246, 264], "assumpt": [4, 12, 14, 15, 20, 22, 24, 31, 32, 33, 42, 43, 45, 46, 48, 49, 59, 60, 62, 67, 70, 72, 74, 75, 95, 98, 99, 104, 105, 116, 124, 128, 158, 195, 198, 203, 215, 225, 226, 234, 235, 238, 242, 244, 245, 251, 259, 264, 281, 282, 302], "parenthes": [4, 12, 15, 68, 110, 128, 179, 180, 210, 226, 250, 267], "respect": [4, 9, 12, 13, 14, 15, 23, 26, 35, 42, 44, 45, 47, 48, 49, 50, 58, 59, 60, 63, 64, 66, 67, 68, 70, 73, 74, 76, 78, 80, 84, 85, 90, 91, 93, 95, 98, 99, 101, 104, 108, 110, 111, 112, 114, 116, 117, 120, 124, 130, 131, 133, 136, 139, 140, 145, 152, 154, 156, 158, 165, 180, 193, 194, 200, 201, 205, 207, 210, 211, 212, 213, 215, 216, 217, 219, 221, 222, 223, 226, 228, 229, 232, 234, 238, 242, 243, 244, 245, 246, 247, 251, 252, 257, 259, 270, 272, 273, 274, 275, 276, 277, 278, 279, 292, 302], "type": [4, 7, 9, 11, 13, 14, 15, 16, 18, 21, 22, 23, 26, 29, 31, 32, 37, 43, 44, 47, 51, 59, 60, 64, 67, 68, 69, 70, 71, 72, 74, 78, 79, 80, 81, 82, 83, 86, 93, 95, 96, 97, 98, 99, 100, 101, 104, 108, 109, 110, 111, 114, 115, 116, 117, 120, 122, 124, 128, 129, 133, 134, 137, 139, 140, 141, 152, 158, 163, 177, 185, 186, 187, 189, 195, 201, 205, 206, 210, 212, 213, 215, 216, 217, 220, 221, 222, 223, 224, 226, 227, 228, 234, 235, 236, 238, 239, 241, 242, 244, 250, 251, 252, 255, 257, 258, 259, 264, 265, 267, 274, 277, 280, 292, 294, 296, 297, 298, 301, 302, 303], "enclos": [4, 78, 79, 84, 107, 125, 226, 236, 265], "backtick": [4, 5, 8], "colon": [4, 68], "preced": [4, 5, 15, 50, 60, 68, 69, 72, 73, 171, 238, 265], "space": [4, 12, 15, 23, 47, 48, 49, 68, 69, 70, 77, 78, 79, 81, 83, 84, 97, 104, 110, 116, 126, 133, 134, 135, 136, 160, 162, 165, 175, 178, 180, 186, 188, 201, 205, 207, 210, 211, 212, 213, 221, 245, 246, 257, 261, 270, 272, 274, 275, 276, 277, 279, 280, 287, 294, 297], "omit": [4, 13, 21, 23, 49, 60, 67, 68, 69, 73, 93, 95, 98, 104, 193, 215, 226, 227, 234, 236, 244, 250, 259, 264, 292], "absent": [4, 52, 244], "possibl": [4, 8, 11, 12, 13, 14, 17, 21, 22, 23, 26, 28, 31, 36, 39, 47, 49, 50, 51, 52, 57, 59, 60, 62, 63, 64, 68, 69, 73, 74, 76, 78, 80, 82, 83, 85, 90, 92, 93, 95, 97, 98, 99, 101, 104, 108, 110, 112, 114, 125, 126, 128, 129, 134, 137, 140, 143, 154, 185, 187, 191, 193, 195, 196, 200, 205, 207, 211, 212, 213, 214, 215, 216, 217, 219, 221, 222, 223, 225, 226, 227, 228, 232, 233, 234, 235, 238, 239, 242, 243, 244, 245, 246, 247, 252, 257, 259, 260, 261, 262, 264, 265, 274, 275, 277, 293, 294, 297, 302], "specifi": [4, 5, 13, 17, 21, 23, 28, 33, 34, 36, 37, 48, 49, 50, 63, 67, 68, 69, 70, 71, 74, 76, 77, 81, 84, 93, 95, 97, 98, 99, 101, 104, 108, 110, 111, 112, 114, 116, 117, 118, 120, 124, 129, 130, 133, 134, 139, 140, 141, 143, 145, 146, 148, 151, 153, 154, 155, 156, 158, 159, 175, 180, 185, 186, 188, 189, 194, 200, 201, 203, 205, 207, 209, 210, 213, 214, 215, 216, 217, 219, 221, 222, 223, 226, 228, 229, 232, 233, 234, 236, 238, 242, 243, 244, 245, 246, 247, 251, 252, 253, 257, 258, 259, 264, 265, 270, 272, 273, 276, 279, 298], "displai": [4, 5, 7, 11, 15, 21, 22, 35, 68, 69, 72, 93, 97, 116, 117, 122, 162, 195, 201, 205, 206, 212, 216, 217, 226, 234, 250, 257], "signatur": [4, 7, 23, 43, 44, 60, 68, 104, 115, 259, 260, 264, 265], "brace": [4, 73, 141, 226], "appear": [4, 5, 11, 12, 14, 15, 17, 35, 48, 49, 52, 57, 59, 68, 69, 73, 74, 77, 78, 81, 84, 87, 91, 93, 95, 99, 104, 108, 110, 137, 141, 145, 175, 191, 193, 196, 212, 214, 216, 219, 221, 222, 226, 235, 238, 242, 243, 244, 246, 250, 252, 257, 264, 265, 270, 275], "shape": [4, 13, 49, 84, 99, 101, 104, 106, 107, 111, 114, 122, 124, 133, 139, 141, 201, 212, 213, 215, 226, 229, 236, 246, 247, 248, 250, 251, 252, 265, 301], "combin": [4, 11, 13, 15, 23, 28, 36, 48, 68, 72, 73, 76, 95, 97, 98, 99, 108, 117, 124, 133, 134, 139, 144, 151, 159, 170, 177, 185, 186, 188, 189, 190, 194, 195, 196, 197, 213, 214, 216, 217, 219, 221, 222, 226, 227, 235, 236, 238, 239, 242, 244, 246, 247, 261, 264, 291, 294, 297], "incorrectli": [4, 11, 13, 23, 77, 78, 104, 214], "opt_cs": [4, 238], "canon": [4, 14, 21, 30, 49, 52, 57, 59, 60, 64, 68, 69, 70, 74, 84, 93, 98, 104, 108, 110, 112, 134, 168, 172, 191, 193, 196, 198, 215, 219, 227, 234, 235, 238, 242, 244, 246, 252, 264, 302], "find": [4, 9, 11, 12, 14, 15, 17, 19, 20, 23, 26, 29, 30, 31, 32, 33, 35, 36, 37, 41, 44, 47, 49, 50, 51, 59, 62, 63, 64, 67, 68, 72, 74, 76, 78, 80, 81, 82, 85, 90, 93, 95, 97, 104, 108, 110, 118, 131, 136, 142, 149, 156, 158, 160, 176, 183, 185, 186, 187, 191, 194, 196, 209, 212, 213, 214, 215, 216, 217, 219, 223, 225, 226, 231, 232, 233, 234, 235, 236, 238, 239, 241, 242, 244, 245, 246, 252, 261, 264, 265, 267, 270, 280, 292, 294, 296, 298, 303], "optim": [4, 14, 34, 49, 52, 59, 72, 98, 108, 111, 112, 114, 128, 158, 171, 175, 215, 222, 226, 227, 235, 238, 246, 258], "mul": [4, 13, 14, 15, 18, 23, 41, 93, 95, 99, 108, 171, 175, 185, 186, 215, 216, 217, 221, 222, 226, 227, 228, 235, 238, 242, 243, 244, 245, 250, 297], "pow": [4, 13, 14, 15, 41, 46, 49, 68, 69, 74, 93, 99, 108, 190, 215, 216, 217, 222, 226, 228, 235, 238, 244, 245, 297, 301], "neg": [4, 13, 14, 15, 21, 22, 26, 32, 45, 46, 49, 50, 63, 67, 68, 73, 74, 76, 78, 80, 81, 84, 93, 95, 97, 98, 99, 104, 107, 108, 116, 117, 120, 121, 122, 124, 129, 133, 137, 191, 201, 211, 214, 215, 217, 219, 221, 222, 223, 226, 232, 234, 235, 236, 238, 239, 242, 244, 245, 246, 265], "coeffici": [4, 13, 17, 19, 21, 28, 31, 33, 44, 47, 49, 67, 68, 70, 72, 73, 76, 81, 86, 87, 90, 91, 93, 97, 98, 101, 104, 105, 108, 111, 114, 124, 125, 129, 134, 141, 164, 178, 188, 196, 211, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 228, 229, 232, 233, 236, 238, 239, 241, 242, 243, 244, 245, 246, 252, 258, 274, 277, 287, 297, 302], "none": [4, 5, 12, 13, 14, 21, 22, 23, 41, 42, 43, 44, 45, 47, 48, 49, 51, 57, 58, 59, 60, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 76, 77, 78, 79, 81, 82, 83, 84, 85, 87, 89, 90, 91, 93, 95, 96, 98, 99, 101, 104, 105, 108, 109, 110, 111, 114, 116, 120, 124, 129, 130, 131, 133, 134, 135, 136, 139, 141, 160, 162, 164, 165, 171, 176, 181, 186, 188, 191, 193, 197, 198, 199, 201, 203, 205, 206, 210, 211, 212, 213, 215, 217, 219, 221, 222, 224, 226, 227, 228, 229, 231, 232, 233, 234, 235, 238, 239, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 255, 257, 258, 259, 260, 264, 265, 267, 269, 270, 273, 298, 302, 303], "process": [4, 5, 6, 7, 9, 10, 12, 13, 14, 15, 21, 46, 49, 59, 60, 66, 68, 69, 74, 76, 84, 93, 95, 104, 108, 111, 124, 134, 135, 139, 141, 143, 149, 152, 153, 155, 158, 212, 213, 219, 226, 227, 234, 238, 242, 244, 248, 257, 261, 302], "concern": [4, 12, 14, 21, 47, 50, 67, 72, 108, 207, 212, 214, 215, 216, 225, 226, 227, 238, 239, 244, 258, 259, 261, 267], "item": [4, 5, 14, 15, 17, 28, 35, 49, 57, 58, 60, 68, 73, 79, 85, 99, 104, 108, 129, 134, 136, 137, 156, 212, 215, 216, 219, 222, 226, 234, 242, 243, 246, 257, 258, 261, 264, 265, 302], "fragment": [4, 69], "desir": [4, 13, 15, 19, 23, 30, 35, 37, 40, 59, 60, 68, 69, 71, 72, 73, 74, 78, 82, 84, 98, 99, 104, 107, 108, 109, 134, 135, 136, 139, 151, 155, 176, 201, 209, 210, 215, 217, 219, 221, 222, 223, 226, 227, 229, 234, 238, 242, 244, 245, 258, 260, 261, 264, 277, 291], "span": [4, 13, 97, 104, 116, 117, 133, 137, 221, 226, 262, 298], "subsequ": [4, 11, 12, 15, 35, 68, 74, 201, 217, 219, 222, 261, 264, 274, 277], "indent": [4, 15, 267], "embed": [4, 5, 47, 60, 68, 96, 221], "hyperlink": 4, "classnam": 4, "erf": [4, 76, 93, 95, 226, 236, 246], "gauss": [4, 33, 76, 95, 104, 160, 214, 215, 221, 224, 244, 245], "erfc": [4, 76, 93, 226, 246], "complementari": [4, 76, 124], "erfi": [4, 76, 93, 226], "erf2": [4, 76, 226], "erfinv": [4, 76, 226, 246], "invers": [4, 12, 33, 35, 41, 59, 60, 68, 69, 70, 76, 95, 101, 104, 108, 110, 112, 133, 134, 139, 180, 184, 185, 188, 193, 196, 213, 214, 215, 217, 219, 222, 223, 226, 228, 236, 238, 242, 244, 245, 246, 264, 298, 302], "erfcinv": [4, 76, 226], "erf2inv": [4, 76, 226], "besselj": [4, 76, 90, 226, 238, 242, 296], "besselbas": [4, 76], "bessel": [4, 5, 74, 86, 95, 222, 238, 242, 246, 296], "kind": [4, 5, 13, 14, 20, 21, 22, 23, 48, 49, 70, 73, 76, 88, 95, 99, 116, 120, 134, 141, 154, 195, 207, 214, 216, 217, 222, 227, 228, 234, 242, 243, 246, 264, 277, 279, 292, 302], "bess": [4, 76, 226, 238, 242, 246], "besselk": [4, 76, 226, 246], "cite": [4, 24], "resourc": [4, 5, 8, 13, 23, 104, 220, 242, 258], "citat": 4, "meant": [4, 5, 12, 13, 15, 21, 23, 49, 68, 76, 81, 95, 108, 141, 158, 212, 217, 234, 238, 243, 248, 275, 297], "augment": [4, 49, 104, 134, 139, 153, 154, 158, 224, 244, 245, 262, 265, 303], "freeli": [4, 40, 102, 129, 133, 213], "wikipedia": [4, 14, 21, 23, 41, 43, 44, 45, 47, 48, 49, 51, 56, 57, 59, 60, 67, 68, 69, 70, 71, 73, 74, 76, 78, 80, 84, 85, 86, 95, 97, 98, 99, 101, 104, 108, 122, 124, 127, 160, 162, 163, 164, 166, 167, 168, 172, 173, 174, 177, 179, 180, 189, 191, 194, 201, 203, 208, 215, 222, 229, 233, 234, 235, 242, 245, 246, 259, 264, 270, 272, 276, 278, 280, 296, 298, 300], "wolfram": [4, 45, 61, 62, 68, 69, 71, 73, 74, 76, 78, 84, 95, 104, 108, 110, 220, 226, 228, 229, 231, 234, 239, 246, 264, 298], "mathworld": [4, 14, 45, 61, 62, 68, 69, 71, 73, 74, 76, 78, 84, 95, 104, 108, 220, 229, 234, 239, 246, 264], "nist": [4, 74, 76, 196], "digit": [4, 11, 14, 15, 34, 49, 68, 69, 71, 72, 78, 95, 98, 108, 151, 201, 216, 222, 233, 238, 264, 291], "dlmf": [4, 74, 76], "suffer": [4, 222], "rot": [4, 84, 188], "publish": [4, 93, 111, 112, 114, 236], "identifi": [4, 12, 13, 21, 22, 47, 61, 68, 71, 72, 95, 104, 114, 120, 139, 153, 179, 180, 213, 216, 217, 227, 235, 238, 242, 243, 245, 246, 265], "clickabl": 4, "kozen89": [4, 219, 220], "d": [4, 5, 7, 8, 11, 12, 13, 14, 15, 19, 23, 26, 29, 31, 33, 35, 41, 48, 52, 57, 59, 60, 61, 63, 64, 66, 67, 68, 69, 70, 73, 76, 78, 82, 86, 91, 93, 95, 97, 98, 99, 100, 101, 104, 105, 107, 108, 110, 116, 120, 124, 133, 134, 135, 158, 160, 163, 164, 170, 180, 188, 190, 191, 196, 200, 201, 203, 209, 210, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 226, 228, 232, 236, 238, 239, 242, 243, 244, 245, 246, 247, 248, 250, 252, 264, 267, 270, 272, 273, 274, 275, 279, 287, 298, 303], "kozen": [4, 220], "landau": [4, 220, 292], "polynomi": [4, 5, 14, 19, 21, 29, 31, 37, 45, 59, 67, 68, 69, 72, 73, 86, 87, 89, 91, 95, 98, 99, 101, 104, 108, 117, 124, 158, 200, 213, 215, 220, 224, 228, 233, 235, 236, 238, 239, 241, 242, 245, 257, 281, 288, 293, 298, 303], "decomposit": [4, 28, 33, 59, 66, 100, 101, 104, 215, 217, 219, 220, 228, 302], "1989": [4, 220, 244], "pp": [4, 59, 60, 66, 67, 68, 69, 73, 74, 95, 99, 104, 108, 111, 112, 114, 135, 145, 155, 211, 214, 215, 219, 220, 242, 243, 246], "445": [4, 220], "456": [4, 68, 220], "abramowitz": [4, 76], "milton": [4, 76], "stegun": [4, 76], "iren": [4, 76], "chapter": [4, 59, 76, 108, 141, 220], "handbook": [4, 50, 58, 59, 66, 76, 108], "formula": [4, 19, 28, 41, 47, 62, 67, 68, 72, 73, 74, 76, 81, 98, 104, 108, 140, 211, 213, 219, 222, 226, 228, 232, 235, 238, 239, 242, 296, 302], "tabl": [4, 21, 50, 59, 68, 73, 76, 89, 95, 104, 108, 133, 158, 211, 221, 248], "ed": [4, 60, 76, 95, 104, 220, 244, 246], "1965": [4, 76, 99], "luke": [4, 76, 93, 236], "l": [4, 13, 15, 47, 48, 49, 50, 57, 59, 60, 67, 69, 76, 79, 80, 81, 82, 83, 85, 86, 91, 93, 95, 97, 100, 101, 104, 108, 111, 112, 114, 116, 117, 124, 126, 129, 133, 134, 135, 136, 137, 139, 140, 141, 144, 145, 146, 148, 149, 150, 154, 155, 156, 157, 158, 159, 160, 163, 189, 192, 193, 194, 196, 209, 210, 211, 213, 215, 217, 219, 220, 226, 228, 229, 235, 236, 239, 242, 244, 246, 250, 251, 252, 253, 257, 259, 264, 280, 302], "Their": [4, 68, 76, 93, 211, 212, 216, 219, 236], "approxim": [4, 15, 20, 37, 47, 59, 67, 68, 69, 72, 76, 78, 84, 93, 95, 104, 108, 117, 121, 160, 194, 216, 217, 222, 229, 233, 236, 246, 292, 296], "1969": [4, 69, 76, 93, 220, 236], "en": [4, 5, 8, 9, 11, 12, 21, 23, 41, 43, 44, 45, 47, 48, 49, 51, 56, 57, 59, 60, 67, 68, 69, 70, 71, 73, 74, 76, 78, 80, 84, 85, 86, 95, 96, 97, 98, 99, 101, 104, 108, 122, 124, 127, 160, 162, 163, 164, 166, 167, 168, 172, 173, 174, 177, 179, 180, 189, 191, 201, 203, 208, 215, 222, 223, 229, 233, 234, 235, 242, 245, 246, 259, 264, 265, 270, 272, 276, 278, 280, 298], "bessel_funct": [4, 76], "typefunct": [4, 76], "gamma": [4, 5, 12, 15, 23, 67, 68, 70, 72, 73, 93, 95, 127, 158, 188, 210, 211, 226, 236, 238, 242, 246, 302], "infti": [4, 14, 21, 45, 67, 68, 69, 73, 74, 76, 93, 95, 110, 213, 222, 229, 233, 236, 242, 245, 246, 292, 296, 302], "factori": [4, 12, 19, 23, 33, 67, 68, 72, 73, 76, 104, 108, 110, 211, 217, 219, 221, 222, 226, 228, 238, 244, 246, 259, 260, 264, 265, 302], "z": [4, 13, 14, 15, 17, 21, 23, 31, 34, 35, 36, 41, 45, 46, 49, 50, 59, 60, 67, 68, 69, 70, 71, 73, 74, 76, 80, 81, 82, 83, 84, 93, 95, 98, 99, 101, 104, 110, 116, 117, 118, 124, 126, 129, 130, 131, 133, 136, 137, 139, 140, 141, 143, 144, 145, 146, 148, 149, 150, 152, 155, 156, 158, 159, 160, 169, 171, 175, 185, 186, 188, 192, 196, 200, 201, 202, 203, 205, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 225, 226, 227, 233, 234, 235, 236, 238, 239, 242, 243, 244, 245, 246, 247, 250, 251, 252, 258, 259, 265, 270, 273, 274, 275, 276, 277, 279, 280, 291, 292, 294, 296, 297, 301, 302, 303], "whole": [4, 12, 13, 21, 68, 70, 76, 95, 117, 126, 212, 213, 215, 221, 222, 226, 229, 234, 236, 242, 245, 264], "complex": [4, 7, 12, 13, 14, 15, 18, 21, 23, 31, 32, 33, 37, 41, 45, 46, 47, 49, 59, 68, 69, 71, 72, 73, 76, 80, 90, 93, 99, 100, 104, 108, 109, 110, 111, 122, 124, 128, 134, 137, 139, 141, 158, 160, 164, 174, 177, 179, 180, 191, 200, 201, 210, 214, 215, 217, 221, 222, 226, 227, 231, 234, 236, 238, 242, 244, 245, 246, 259, 267, 302, 303], "plane": [4, 26, 41, 68, 76, 78, 80, 81, 83, 84, 95, 104, 122, 124, 133, 143, 163, 164, 209, 210, 234, 245, 280, 288, 302], "pole": [4, 14, 26, 76, 93, 124, 133, 164, 233, 236, 242], "pi": [4, 12, 13, 14, 15, 18, 21, 23, 29, 30, 32, 35, 37, 40, 41, 42, 44, 45, 46, 47, 49, 60, 67, 68, 70, 72, 73, 74, 76, 77, 78, 79, 81, 82, 83, 84, 87, 93, 95, 104, 108, 126, 133, 140, 143, 158, 160, 162, 163, 164, 165, 167, 175, 186, 188, 189, 192, 194, 201, 211, 212, 214, 216, 217, 222, 226, 229, 233, 234, 235, 236, 238, 241, 242, 244, 245, 246, 264, 270, 273, 280, 291, 296, 302], "oo": [4, 14, 17, 21, 22, 26, 30, 45, 47, 67, 68, 72, 73, 74, 76, 81, 93, 95, 98, 104, 124, 126, 177, 189, 192, 222, 231, 232, 233, 234, 238, 241, 242, 244, 245, 246, 251, 264, 267, 292, 296], "known": [4, 11, 12, 14, 21, 22, 23, 26, 35, 44, 48, 49, 50, 51, 57, 59, 60, 68, 69, 72, 73, 76, 78, 81, 86, 93, 95, 96, 105, 108, 122, 124, 125, 127, 130, 136, 139, 155, 194, 201, 209, 215, 216, 217, 221, 222, 226, 229, 232, 234, 235, 236, 238, 241, 242, 243, 244, 246, 264, 265, 270, 277, 279, 302], "sqrt": [4, 12, 13, 14, 17, 21, 23, 26, 28, 29, 30, 31, 32, 36, 37, 41, 45, 46, 47, 49, 68, 70, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 91, 92, 93, 95, 96, 99, 100, 104, 108, 110, 112, 114, 116, 120, 124, 126, 129, 137, 140, 143, 160, 162, 164, 165, 170, 175, 185, 186, 188, 189, 191, 192, 194, 195, 201, 207, 210, 211, 214, 216, 217, 219, 221, 222, 225, 226, 227, 232, 235, 236, 238, 239, 241, 242, 244, 245, 246, 264, 265, 267, 270, 279, 280, 291, 296, 301, 302, 303], "obei": [4, 76, 211, 226, 236], "mirror": [4, 76, 95, 164], "symmetri": [4, 13, 51, 56, 61, 64, 76, 99, 170, 211, 242, 250, 252, 291, 302], "conjug": [4, 28, 45, 57, 58, 59, 68, 74, 76, 99, 104, 110, 126, 160, 174, 177, 191, 222, 226, 242, 252], "differenti": [4, 5, 12, 13, 14, 26, 29, 47, 68, 73, 74, 76, 85, 86, 88, 91, 95, 110, 111, 112, 114, 124, 133, 134, 139, 141, 143, 145, 148, 151, 152, 153, 154, 155, 158, 159, 180, 186, 200, 201, 203, 205, 207, 210, 213, 219, 223, 225, 226, 231, 236, 238, 242, 243, 270, 277, 278, 281, 288, 292, 293, 296], "polygamma": [4, 73, 76, 226], "seri": [4, 11, 12, 13, 19, 26, 35, 47, 48, 49, 50, 58, 59, 67, 68, 70, 72, 73, 74, 76, 91, 92, 93, 97, 108, 121, 122, 124, 137, 141, 148, 150, 158, 205, 209, 218, 219, 226, 231, 232, 236, 242, 245, 282, 288, 293], "expans": [4, 11, 19, 23, 49, 68, 70, 73, 74, 76, 95, 104, 108, 155, 170, 172, 222, 223, 228, 229, 230, 235, 237, 238, 242, 244, 245, 282, 293, 302], "eulergamma": [4, 68, 72, 73, 76], "zeta": [4, 14, 15, 67, 68, 72, 73, 217, 221, 226, 233, 246], "40": [4, 37, 49, 71, 73, 76, 78, 85, 99, 104, 108, 116, 212, 223, 225, 226, 246, 267, 291], "288037795340032417959588909060233922890": [4, 76], "49801566811835604271": [4, 76], "15494982830181068512": [4, 76], "lowergamma": [4, 76, 246], "lower": [4, 14, 21, 30, 45, 47, 49, 59, 60, 67, 68, 70, 76, 77, 79, 84, 85, 95, 99, 100, 101, 104, 116, 122, 127, 133, 191, 205, 211, 213, 215, 217, 219, 222, 226, 235, 236, 238, 242, 251, 252, 261, 270, 292, 300], "uppergamma": [4, 73, 76, 226, 246], "upper": [4, 45, 67, 69, 72, 76, 77, 84, 85, 99, 100, 101, 104, 107, 108, 116, 122, 133, 184, 191, 211, 215, 217, 219, 221, 222, 226, 236, 244, 251, 270], "loggamma": [4, 5, 76, 226], "log": [4, 5, 9, 11, 12, 15, 23, 39, 41, 47, 49, 59, 67, 68, 72, 73, 74, 76, 86, 90, 92, 93, 95, 99, 104, 108, 110, 112, 212, 217, 226, 228, 233, 236, 238, 242, 245, 246, 253, 292, 302, 303], "digamma": [4, 73, 76, 226], "trigamma": [4, 76, 226], "beta": [4, 15, 49, 59, 68, 95, 114, 188, 201, 211, 221, 223, 226, 242, 246], "euler": [4, 41, 47, 48, 67, 68, 69, 72, 73, 76, 84, 90, 96, 108, 133, 188, 201, 206, 210, 211, 222, 226, 242, 246, 270, 272], "gamma_funct": [4, 76], "gov": [4, 74, 76], "gammafunct": [4, 76], "gammabetaerf": [4, 73, 76], "unusu": [4, 21, 143, 257], "inlin": [4, 12, 96, 206, 226, 259], "pretti": [4, 9, 11, 12, 14, 23, 48, 49, 76, 95, 96, 104, 108, 117, 124, 143, 206, 236, 238, 245, 279, 293, 296, 298, 302], "As": [4, 13, 18, 19, 22, 23, 28, 33, 34, 35, 40, 49, 59, 60, 68, 69, 72, 73, 74, 76, 92, 93, 98, 104, 107, 108, 110, 111, 114, 133, 137, 139, 141, 143, 145, 152, 155, 156, 191, 196, 209, 213, 214, 216, 217, 219, 222, 223, 225, 226, 233, 234, 236, 242, 245, 246, 264, 265, 274, 275, 291, 292, 294, 296, 297, 298, 301, 302], "literatur": [4, 14, 93, 218, 288], "fact": [4, 12, 13, 14, 21, 22, 23, 32, 44, 45, 68, 73, 76, 86, 93, 108, 120, 129, 143, 155, 196, 213, 214, 215, 216, 219, 221, 223, 225, 236, 238, 242, 245, 257, 265, 279, 291, 294, 295, 296, 297, 302], "eval": [4, 13, 21, 43, 44, 49, 68, 74, 76, 112, 177, 191, 217, 222, 226, 259, 291], "illumin": 4, "tone": 4, "narr": [4, 295], "excerpt": 4, "geometri": [4, 77, 78, 79, 81, 82, 83, 84, 85, 95, 132, 137, 151, 164, 218, 273, 280, 281, 287, 288, 296], "autofunct": [4, 11], "intersect": [4, 21, 32, 47, 48, 59, 78, 79, 81, 82, 83, 84, 85, 104, 137, 164, 213, 222, 226, 232, 233, 234, 245], "convex_hul": [4, 80, 84, 85], "are_similar": [4, 79, 80, 85], "autoclass": 4, "linearent": [4, 78, 81, 82, 83, 84], "rai": [4, 78, 80, 81, 82, 84, 85, 160, 164], "segment": [4, 13, 59, 78, 80, 81, 82, 83, 84, 85, 137, 209, 212, 242, 257], "curv": [4, 48, 70, 80, 95, 108, 113, 114, 115, 116, 160, 212, 213, 242, 270, 280, 287, 288, 292], "ellips": [4, 79, 80, 84, 163, 212, 226, 288, 301], "circl": [4, 23, 68, 78, 79, 80, 82, 83, 84, 85, 93, 140, 164, 171, 212, 245, 270, 273, 280], "polygon": [4, 78, 79, 80, 85, 212, 280, 288], "regularpolygon": [4, 79, 80, 84, 212], "triangl": [4, 23, 48, 73, 79, 80, 84, 85, 95, 99, 108, 140, 211, 212, 273, 280], "rel": [4, 5, 31, 48, 49, 58, 59, 60, 61, 65, 66, 67, 68, 69, 72, 79, 93, 104, 108, 110, 129, 130, 133, 134, 136, 137, 140, 146, 155, 156, 163, 190, 201, 205, 209, 210, 213, 215, 216, 219, 221, 234, 236, 241, 244, 246, 257, 264, 274, 275, 279, 296], "cumbersom": [4, 11, 37], "path": [4, 8, 12, 13, 59, 84, 90, 110, 124, 137, 140, 149, 207, 209, 212, 235, 238, 242, 245, 257, 258, 261, 262, 264, 267, 268, 277], "viewcod": 4, "aco": [4, 15, 41, 74, 81, 84, 143, 158, 164, 201, 226, 242, 270, 302], "obj": [4, 21, 68, 217, 222, 226, 260], "qualifi": 4, "elementari": [4, 11, 12, 21, 22, 23, 59, 68, 69, 72, 75, 76, 90, 93, 95, 99, 104, 108, 156, 184, 187, 217, 222, 223, 264, 265, 274, 282], "trigonometr": [4, 23, 30, 37, 68, 95, 110, 223, 229, 237, 238, 241, 242, 245, 265, 282, 293, 303], "trail": [4, 12, 60, 68, 108, 217, 219, 222, 262, 267], "pair": [4, 15, 19, 28, 31, 48, 49, 59, 60, 68, 69, 74, 80, 85, 92, 104, 108, 112, 129, 137, 140, 141, 145, 156, 181, 183, 185, 186, 191, 211, 213, 215, 216, 217, 219, 221, 222, 227, 232, 233, 235, 236, 238, 239, 242, 245, 246, 259, 264, 274, 291, 298], "www": [4, 5, 26, 41, 47, 59, 60, 69, 71, 73, 95, 96, 108, 122, 124, 206, 215, 220, 225, 226, 235, 238, 239, 242, 246, 264, 298, 301], "master": [4, 5, 7, 11, 12, 39, 95, 257], "usag": [4, 5, 12, 14, 15, 21, 22, 23, 40, 43, 70, 74, 95, 108, 188, 207, 212, 213, 215, 219, 226, 234, 236, 239, 242, 243, 247, 261, 265, 266, 277, 278, 285, 297], "expect": [4, 5, 7, 13, 15, 21, 23, 26, 48, 50, 53, 68, 74, 76, 80, 98, 108, 109, 124, 129, 133, 137, 141, 185, 216, 219, 221, 223, 224, 233, 238, 241, 244, 245, 246, 255, 257, 258, 261, 264, 265, 296, 297], "vector": [4, 13, 19, 27, 41, 45, 49, 52, 59, 60, 68, 70, 76, 81, 82, 83, 90, 91, 97, 99, 104, 109, 114, 116, 118, 120, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 145, 148, 149, 150, 152, 153, 154, 155, 156, 158, 159, 163, 164, 177, 186, 188, 193, 196, 201, 203, 205, 206, 213, 215, 221, 226, 236, 242, 244, 246, 251, 252, 257, 258, 272, 276, 281, 285, 287, 298], "dynamicsymbol": [4, 104, 114, 128, 129, 130, 131, 133, 134, 136, 137, 139, 140, 141, 143, 144, 145, 146, 148, 149, 150, 152, 153, 154, 155, 156, 158, 159, 201, 203, 205, 206, 207, 209, 210], "custom": [4, 9, 13, 24, 49, 60, 68, 72, 75, 96, 99, 104, 110, 111, 129, 131, 133, 137, 140, 200, 206, 207, 228, 232, 239, 246, 252, 258, 265, 270, 279, 296, 298], "sine": [4, 23, 68, 74, 76, 93, 95, 165, 223, 229, 235, 291], "expand": [4, 12, 13, 14, 15, 19, 21, 26, 28, 49, 68, 70, 72, 73, 74, 76, 93, 95, 99, 124, 141, 143, 158, 172, 180, 183, 190, 191, 214, 215, 216, 219, 221, 222, 223, 226, 229, 233, 235, 236, 238, 242, 245, 246, 250, 258, 265, 276, 291, 296], "troubleshoot": [4, 9, 155], "tip": [4, 7, 8, 12, 68, 155, 242, 243, 302], "spell": [4, 13, 14, 242], "try": [4, 5, 11, 12, 13, 14, 15, 21, 22, 23, 28, 30, 31, 34, 35, 37, 60, 67, 68, 72, 76, 78, 83, 93, 95, 98, 101, 104, 107, 108, 110, 139, 181, 183, 190, 191, 212, 216, 217, 221, 226, 231, 233, 234, 235, 236, 238, 239, 242, 244, 264, 265, 267, 291, 294, 297, 302], "referencefram": [4, 13, 114, 129, 130, 131, 133, 134, 136, 137, 139, 140, 141, 143, 144, 145, 148, 149, 150, 153, 154, 155, 156, 158, 159, 201, 202, 203, 205, 206, 207, 208, 209, 287], "though": [4, 11, 14, 15, 21, 22, 23, 28, 34, 35, 36, 37, 40, 50, 68, 69, 70, 73, 80, 84, 93, 95, 99, 104, 108, 128, 134, 143, 153, 155, 186, 195, 200, 201, 209, 210, 214, 216, 217, 222, 223, 235, 236, 238, 242, 243, 244, 245, 257, 277, 292, 297, 302], "frame": [4, 128, 129, 130, 131, 133, 134, 136, 137, 139, 141, 143, 144, 145, 146, 148, 150, 152, 153, 154, 155, 156, 158, 159, 200, 201, 202, 203, 205, 207, 209, 261, 270, 277], "notimplementederror": [4, 30, 32, 35, 36, 37, 47, 67, 78, 81, 85, 95, 104, 122, 215, 221, 222, 225, 234, 241, 242, 243, 244, 245], "outsid": [4, 32, 45, 59, 68, 76, 79, 84, 99, 108, 128, 196, 210, 222, 238, 292, 297], "plot": [4, 23, 26, 35, 39, 77, 78, 80, 81, 84, 91, 96, 104, 116, 117, 120, 123, 158, 175, 178, 184, 229, 281, 287, 288, 296, 301], "recommend": [4, 8, 9, 11, 13, 14, 15, 16, 21, 23, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 48, 49, 68, 69, 72, 99, 111, 112, 114, 128, 153, 158, 185, 201, 209, 214, 215, 216, 217, 223, 239, 242, 245, 251, 255, 262, 274, 275, 300, 303], "ahead": [4, 108], "submit": [4, 11], "sub": [4, 12, 13, 14, 15, 17, 21, 22, 23, 26, 28, 31, 32, 34, 35, 49, 67, 68, 74, 76, 77, 78, 79, 80, 81, 82, 84, 95, 98, 99, 101, 104, 108, 110, 116, 117, 124, 128, 131, 141, 143, 144, 145, 148, 149, 155, 158, 188, 189, 194, 201, 211, 213, 215, 216, 217, 222, 226, 233, 234, 238, 239, 242, 243, 244, 246, 257, 258, 260, 291, 292, 294], "common": [4, 5, 9, 11, 12, 14, 15, 21, 22, 23, 29, 30, 31, 32, 35, 47, 49, 59, 60, 68, 69, 74, 79, 82, 85, 95, 101, 103, 104, 108, 109, 110, 122, 124, 130, 133, 135, 139, 144, 151, 156, 158, 163, 196, 201, 209, 210, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 224, 228, 234, 235, 236, 238, 239, 242, 244, 245, 246, 258, 259, 262, 264, 265, 277, 279, 285, 291, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303], "matrixcommon": [4, 99, 101, 104], "dyadic": [4, 71, 130, 136, 141, 143, 148, 150, 158, 201, 203, 206, 208, 270, 273, 278], "shorten": [4, 114, 129], "due": [4, 8, 12, 13, 19, 23, 34, 47, 49, 51, 58, 59, 68, 70, 85, 104, 108, 116, 120, 139, 141, 143, 155, 164, 191, 207, 210, 216, 217, 222, 226, 229, 239, 241, 243, 246, 262, 273, 279, 302], "highli": [5, 68, 72, 121, 216, 222, 231, 259], "aspect": [5, 7, 11, 12, 21, 104, 115, 216], "project": [5, 9, 10, 11, 13, 25, 49, 51, 81, 82, 83, 97, 104, 157, 258, 259, 270], "teach": [5, 60, 69, 73, 246], "conduct": [5, 112], "accord": [5, 15, 49, 56, 59, 60, 64, 67, 68, 69, 76, 98, 101, 104, 108, 110, 133, 139, 140, 142, 151, 185, 191, 212, 217, 219, 221, 222, 223, 239, 244, 245, 252, 257, 259, 264, 279], "survei": 5, "commonli": [5, 14, 60, 73, 76, 95, 104, 110, 128, 209, 214, 242, 277], "encount": [5, 15, 19, 28, 68, 95, 104, 134, 183, 214, 219, 222, 244, 245, 259, 270, 298], "problem": [5, 9, 11, 12, 13, 14, 15, 19, 21, 22, 23, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 41, 52, 62, 64, 68, 69, 80, 93, 95, 99, 104, 108, 111, 112, 114, 116, 118, 119, 120, 125, 128, 134, 141, 145, 146, 149, 151, 153, 200, 209, 210, 213, 214, 219, 236, 238, 239, 242, 244, 245, 261, 264, 287, 292, 294, 298], "offer": [5, 48, 49, 59, 68, 109, 128, 158, 200, 210, 216, 221, 261, 278], "bring": [5, 93, 134, 149, 215, 229, 238, 298], "greater": [5, 28, 45, 60, 68, 73, 74, 76, 93, 97, 108, 124, 139, 217, 219, 222, 225, 233, 238, 242, 244, 246, 261, 264, 277, 292], "clariti": [5, 13, 59, 205], "mission": [5, 48, 102], "ca": [5, 39, 69, 73, 76, 95, 108, 111, 225, 226, 264], "dedic": [5, 49, 51, 156, 218, 241, 259, 275, 277], "tool": [5, 8, 9, 11, 12, 14, 23, 59, 96, 103, 104, 109, 124, 139, 158, 210, 213, 218, 219, 226, 258, 264, 269, 278, 285], "essenti": [5, 52, 63, 68, 72, 74, 75, 76, 93, 136, 143, 204, 207, 208, 210, 213, 214, 217, 221, 233, 236, 271, 274, 277, 278, 279, 285, 287], "element": [5, 13, 14, 15, 18, 21, 26, 31, 41, 45, 48, 49, 51, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 84, 91, 93, 95, 97, 98, 99, 100, 101, 104, 107, 108, 109, 114, 116, 117, 124, 125, 136, 158, 160, 163, 177, 188, 196, 205, 208, 210, 212, 213, 214, 215, 217, 219, 222, 224, 225, 226, 232, 233, 234, 236, 238, 239, 242, 244, 245, 246, 247, 251, 258, 260, 261, 264, 265, 266, 273, 292, 297, 298, 301, 302], "deviat": [5, 164, 246], "advanc": [5, 18, 20, 23, 43, 59, 68, 72, 73, 104, 105, 151, 156, 208, 212, 215, 216, 218, 220, 221, 228, 235, 242, 257, 258, 259, 264, 287, 291, 293, 295, 299, 300, 301, 302], "docutil": 5, "sourceforg": [5, 48], "ext": [5, 213, 217], "autodoc": 5, "associ": [5, 9, 11, 14, 21, 31, 48, 50, 66, 68, 69, 75, 76, 90, 91, 93, 97, 111, 114, 129, 136, 139, 140, 156, 158, 181, 189, 200, 201, 209, 210, 212, 214, 215, 216, 217, 219, 221, 226, 234, 236, 239, 252, 266], "graphviz": [5, 8, 297, 301], "graphic": [5, 35, 122], "info": [5, 9, 11, 15, 124, 226, 242, 243], "bear": [5, 21], "linkcod": 5, "readthedoc": [5, 96, 265], "subset": [5, 11, 12, 19, 21, 23, 28, 47, 48, 52, 55, 59, 60, 66, 73, 74, 80, 91, 93, 95, 97, 108, 135, 213, 215, 219, 221, 226, 234, 264, 282], "modifi": [5, 12, 14, 15, 48, 49, 59, 68, 74, 76, 108, 110, 154, 163, 212, 215, 219, 221, 222, 223, 226, 238, 244, 245, 246, 257, 260, 261, 264, 265, 291, 296, 298], "sphinx_math_dollar": 5, "delimit": [5, 68, 226], "dollar": [5, 12, 296], "2": [5, 7, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 36, 37, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 107, 108, 110, 111, 112, 114, 116, 118, 120, 122, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 139, 140, 143, 144, 145, 146, 148, 149, 150, 152, 153, 154, 156, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 174, 175, 176, 177, 180, 181, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 200, 201, 202, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 255, 257, 258, 259, 260, 261, 264, 265, 267, 270, 272, 273, 274, 275, 276, 277, 279, 280, 291, 292, 294, 296, 297, 298, 301, 302, 303], "sphinxext": 5, "plot_direct": 5, "figur": [5, 11, 13, 68, 69, 78, 79, 81, 83, 84, 95, 117, 141, 186, 209, 210, 211, 212, 215, 223, 226, 280, 302], "devel": [5, 211], "supersed": [5, 141, 158], "pep": [5, 49, 68, 98], "257": [5, 108, 244], "our": [5, 11, 13, 19, 23, 39, 49, 68, 76, 93, 104, 108, 114, 134, 139, 144, 196, 209, 210, 212, 213, 215, 217, 221, 222, 223, 226, 233, 236, 239, 242, 245, 257, 291, 294, 295, 297, 302], "introduct": [5, 6, 13, 20, 59, 60, 73, 76, 215, 217, 219, 220, 222, 226, 239, 242, 245, 278, 285, 295, 301], "four": [5, 33, 49, 51, 60, 68, 72, 76, 98, 101, 108, 112, 114, 120, 125, 137, 142, 151, 156, 164, 201, 212, 213, 215, 219, 222, 226, 234, 239, 242, 244, 246, 247, 270, 272, 275, 287], "locat": [5, 11, 12, 13, 51, 60, 68, 82, 104, 108, 116, 117, 120, 133, 136, 137, 139, 140, 145, 152, 155, 156, 159, 205, 207, 221, 222, 226, 238, 246, 260, 268, 270, 274, 276, 279], "websit": [5, 7, 300], "advertis": 5, "serv": [5, 12, 14, 19, 23, 43, 44, 49, 51, 65, 68, 75, 91, 221, 242, 243, 267, 295], "initi": [5, 14, 21, 26, 34, 43, 59, 63, 68, 69, 70, 73, 76, 84, 86, 87, 90, 91, 92, 93, 95, 96, 108, 110, 117, 118, 120, 122, 124, 130, 134, 136, 139, 141, 143, 145, 150, 153, 154, 155, 158, 159, 163, 171, 180, 202, 203, 206, 210, 211, 219, 221, 222, 226, 232, 236, 238, 242, 244, 245, 251, 259, 266, 267, 270, 272, 273, 274, 275], "web": [5, 7, 8, 11, 52, 60, 69, 73, 76, 80, 85, 95, 108, 158, 208, 215, 220, 238, 239, 246, 264, 298], "obtain": [5, 14, 15, 17, 19, 26, 31, 32, 37, 43, 44, 48, 50, 52, 59, 60, 61, 64, 68, 69, 71, 72, 73, 74, 76, 78, 79, 81, 82, 84, 90, 93, 95, 97, 99, 104, 107, 108, 121, 124, 134, 151, 154, 164, 186, 191, 196, 200, 213, 214, 217, 219, 221, 222, 225, 227, 234, 235, 236, 238, 239, 242, 243, 244, 245, 264, 267, 274, 275], "technic": [5, 13, 16, 23, 38, 48, 68, 110, 158, 177, 213, 242, 259, 264, 277, 294, 297], "download": [5, 7, 9, 39, 48, 90, 220, 235, 242, 270, 296], "place": [5, 7, 9, 11, 12, 13, 14, 15, 21, 23, 32, 38, 48, 60, 61, 68, 69, 74, 84, 100, 104, 107, 108, 110, 111, 124, 158, 159, 215, 220, 221, 226, 227, 233, 235, 238, 242, 261, 264, 290, 291, 298, 302], "tutori": [5, 7, 8, 9, 11, 12, 14, 15, 19, 20, 39, 84, 141, 158, 214, 225, 226, 242, 265, 294, 297, 299, 300, 301, 302, 303], "site": [5, 108, 260], "upload": [5, 108], "belong": [5, 12, 21, 45, 48, 59, 64, 68, 91, 104, 136, 191, 201, 209, 212, 213, 215, 216, 217, 219, 221, 222, 233, 234, 238, 239, 245, 252], "insid": [5, 12, 13, 14, 15, 23, 59, 60, 65, 68, 78, 79, 84, 116, 128, 131, 145, 155, 190, 191, 195, 196, 206, 210, 222, 226, 234, 236, 239, 244, 245, 246, 248, 250, 261, 265, 297, 298], "spars": [5, 14, 101, 103, 104, 185, 215, 221, 222, 223, 246, 247, 285, 297], "substanti": [5, 109], "edit": [5, 9, 11, 12, 95, 104, 108, 219, 220, 222], "arg": [5, 11, 14, 21, 23, 30, 32, 35, 41, 43, 44, 45, 46, 47, 48, 49, 52, 59, 60, 62, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 81, 83, 84, 85, 90, 93, 95, 98, 99, 100, 101, 102, 104, 106, 108, 110, 118, 120, 124, 160, 166, 169, 171, 174, 175, 176, 177, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 201, 206, 210, 212, 215, 217, 219, 221, 222, 223, 226, 228, 229, 232, 233, 234, 235, 238, 242, 244, 245, 246, 247, 248, 251, 252, 257, 258, 259, 260, 264, 265, 267, 270, 272], "invari": [5, 13, 23, 59, 64, 121, 124, 211, 215, 217, 221, 222, 236, 242], "releas": [5, 8, 11, 13, 68, 95, 99, 110, 155, 212, 251, 262, 297], "5": [5, 11, 12, 15, 17, 21, 23, 28, 30, 32, 34, 37, 41, 43, 44, 45, 47, 49, 50, 51, 52, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 78, 79, 80, 81, 82, 83, 84, 85, 90, 91, 93, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 107, 108, 110, 112, 116, 118, 120, 122, 124, 126, 127, 130, 135, 136, 141, 143, 144, 148, 149, 150, 151, 153, 156, 160, 164, 185, 186, 189, 191, 198, 202, 205, 207, 210, 211, 212, 213, 214, 215, 216, 217, 219, 221, 222, 223, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 251, 252, 257, 258, 264, 265, 270, 273, 275, 277, 279, 280, 291, 292, 294, 297, 298, 301, 302], "center": [5, 7, 13, 19, 47, 59, 67, 68, 78, 82, 84, 85, 95, 104, 130, 133, 136, 140, 141, 143, 148, 150, 152, 156, 158, 164, 209, 212, 221, 226, 234, 280], "resid": 5, "standalon": [5, 158], "restructur": 5, "myst": 5, "appli": [5, 9, 11, 12, 13, 14, 22, 23, 26, 33, 37, 41, 42, 43, 44, 45, 49, 59, 60, 61, 66, 67, 68, 69, 70, 71, 74, 75, 78, 83, 84, 86, 95, 98, 99, 100, 104, 108, 110, 116, 117, 118, 120, 124, 125, 129, 130, 131, 134, 136, 137, 139, 143, 146, 153, 155, 157, 168, 172, 175, 176, 180, 183, 184, 188, 191, 201, 210, 212, 214, 215, 216, 217, 219, 221, 222, 223, 225, 226, 227, 228, 232, 233, 234, 235, 238, 242, 243, 244, 245, 246, 247, 250, 257, 260, 264, 270, 272, 275, 298, 301, 302], "surround": [5, 12, 68, 85, 164, 234, 267], "nu": [5, 15, 76, 95, 108, 192, 214, 226, 238, 246, 252, 296], "equat": [5, 14, 15, 17, 19, 24, 26, 30, 47, 49, 64, 67, 68, 70, 74, 76, 78, 81, 82, 86, 90, 91, 92, 93, 95, 96, 99, 104, 108, 111, 112, 114, 115, 116, 120, 124, 126, 128, 129, 133, 134, 135, 137, 139, 141, 143, 144, 145, 146, 148, 150, 151, 152, 157, 158, 159, 160, 164, 200, 205, 206, 209, 210, 211, 212, 213, 215, 217, 219, 220, 221, 224, 225, 226, 232, 236, 238, 241, 242, 243, 251, 270, 275, 276, 280, 292, 293, 296], "strip": [5, 12, 69, 95, 108, 219, 262, 267], "out": [5, 11, 12, 15, 21, 22, 23, 31, 48, 49, 59, 60, 68, 69, 70, 73, 76, 84, 93, 95, 101, 104, 108, 110, 116, 124, 125, 141, 143, 145, 148, 156, 158, 168, 172, 183, 186, 188, 190, 191, 213, 214, 215, 216, 217, 221, 222, 223, 224, 226, 227, 233, 236, 238, 242, 247, 248, 257, 259, 264, 265, 294, 296, 297, 301, 302], "unimport": 5, "bullet": [5, 11, 12], "avoid": [5, 11, 12, 13, 14, 22, 23, 28, 31, 41, 49, 50, 68, 69, 74, 93, 95, 98, 104, 107, 110, 145, 155, 185, 209, 210, 214, 215, 216, 222, 226, 227, 234, 238, 242, 244, 246, 250, 259, 262, 265, 294, 295], "whitespac": [5, 12, 68, 262], "easiest": [5, 9, 11, 13, 14, 15, 68, 213, 216, 239, 265, 275, 291, 297, 302], "invalid": [5, 11, 12, 15, 37, 68, 69, 110, 143, 216, 219, 234], "dx": [5, 13, 14, 19, 23, 31, 47, 49, 64, 68, 70, 72, 76, 85, 87, 90, 91, 92, 93, 95, 104, 110, 116, 127, 134, 180, 210, 222, 223, 229, 239, 242, 243, 247, 292, 296, 301, 303], "meta": [5, 68, 242, 243], "stackexchang": [5, 59, 78], "5020": 5, "wikibook": [5, 95, 96], "overleaf": 5, "mathematical_express": 5, "verbatim": [5, 226], "_rewrit": 5, "_expand": 5, "difficult": [5, 11, 12, 21, 35, 37, 68, 104, 141, 223, 236, 242, 243, 245, 258, 265, 280, 296, 302], "sentenc": [5, 11, 98], "thumb": [5, 98, 264], "greek": [5, 14, 40, 68, 108, 110, 213, 226], "letter": [5, 14, 15, 40, 61, 68, 69, 108, 110, 191, 215, 226, 264, 292, 294], "\u03b1": [5, 211, 225], "alpha": [5, 15, 59, 68, 76, 95, 97, 110, 124, 163, 167, 170, 188, 205, 209, 210, 211, 217, 219, 221, 222, 225, 226, 238, 242, 246], "logarithm": [5, 15, 41, 47, 49, 68, 69, 74, 93, 95, 104, 108, 217, 219, 223, 226, 236, 238, 245, 246, 293], "italic": 5, "emphasi": [5, 216], "asterisk": 5, "stirl": [5, 60, 73, 264], "fals": [5, 12, 14, 15, 21, 22, 23, 28, 30, 37, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 54, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 90, 93, 95, 96, 98, 99, 100, 101, 104, 105, 108, 110, 112, 114, 116, 117, 122, 124, 126, 127, 131, 134, 135, 136, 139, 141, 143, 144, 148, 149, 150, 152, 153, 154, 155, 156, 159, 163, 175, 176, 180, 183, 188, 189, 190, 191, 194, 198, 201, 202, 203, 205, 206, 209, 210, 212, 213, 214, 215, 216, 217, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 233, 234, 235, 238, 239, 241, 242, 243, 244, 245, 246, 251, 252, 255, 257, 258, 259, 260, 264, 265, 267, 270, 273, 294, 297, 298, 301], "permut": [5, 50, 51, 53, 55, 56, 58, 61, 64, 65, 66, 69, 73, 76, 99, 101, 104, 135, 191, 211, 215, 217, 222, 239, 247, 248, 252, 264, 282, 302], "cycl": [5, 13, 49, 56, 59, 60, 66, 68, 71, 73, 99, 108, 165, 234, 264], "partit": [5, 55, 59, 73, 108, 145, 155, 157, 239, 246, 261, 282], "reduc": [5, 15, 22, 26, 29, 36, 42, 44, 46, 50, 64, 68, 69, 71, 73, 74, 76, 83, 84, 93, 95, 104, 108, 111, 124, 125, 155, 173, 191, 213, 215, 216, 217, 219, 220, 221, 222, 223, 227, 232, 234, 235, 236, 238, 239, 241, 242, 243, 244, 245, 246, 248, 264, 265, 298], "ge": [5, 21, 68, 73, 74, 76, 93, 99, 104, 108, 110, 211, 214, 219, 222, 226, 236, 244, 264], "consecut": [5, 49, 59, 64, 67, 68, 69, 73, 84, 137, 238, 244], "group": [5, 7, 48, 54, 55, 60, 61, 64, 65, 66, 68, 71, 73, 97, 98, 108, 112, 170, 179, 180, 191, 211, 212, 213, 217, 222, 238, 242, 244, 245, 252, 264, 282], "pairwis": [5, 45, 48, 68, 73, 85, 104, 108, 239, 244], "ital": [5, 226], "last": [5, 11, 12, 13, 15, 17, 18, 19, 21, 22, 23, 28, 30, 32, 33, 34, 35, 36, 37, 42, 43, 44, 48, 49, 50, 58, 59, 60, 64, 67, 68, 69, 72, 78, 95, 98, 99, 100, 101, 102, 104, 106, 107, 108, 110, 124, 139, 163, 195, 196, 211, 212, 213, 214, 215, 216, 217, 219, 222, 225, 226, 233, 234, 239, 242, 244, 245, 246, 247, 248, 252, 255, 257, 258, 259, 260, 262, 264, 265, 267, 292, 294, 297, 298], "talk": [5, 11, 12, 16, 38, 69, 213, 221, 274], "handl": [5, 7, 11, 12, 19, 21, 22, 23, 47, 49, 56, 60, 68, 74, 95, 96, 98, 103, 108, 109, 110, 116, 125, 128, 141, 155, 171, 174, 180, 181, 186, 195, 215, 216, 222, 223, 232, 238, 242, 244, 247, 250, 258, 264, 265, 267, 297, 302], "referenc": [5, 11, 52, 57, 108, 139, 143, 188, 221], "overlin": [5, 21, 76, 110], "normal": [5, 12, 13, 15, 21, 22, 23, 37, 41, 45, 49, 59, 67, 68, 72, 74, 78, 81, 82, 83, 95, 96, 98, 102, 103, 104, 108, 110, 111, 112, 114, 126, 128, 133, 140, 141, 143, 149, 158, 164, 175, 185, 188, 189, 190, 191, 192, 196, 199, 201, 210, 213, 215, 216, 217, 219, 221, 222, 226, 227, 229, 234, 235, 239, 242, 246, 251, 257, 262, 264, 265, 270, 285], "assign": [5, 9, 21, 35, 48, 49, 50, 64, 68, 73, 84, 95, 97, 98, 104, 110, 134, 141, 148, 158, 196, 207, 210, 212, 214, 219, 226, 244, 245, 252, 259, 274, 277, 294], "structur": [5, 13, 14, 15, 18, 21, 23, 46, 48, 49, 56, 59, 60, 66, 68, 93, 95, 98, 99, 104, 116, 117, 118, 120, 139, 189, 191, 212, 213, 215, 216, 219, 221, 222, 223, 238, 242, 244, 245, 246, 250, 251, 259, 261, 264, 265, 294, 302], "success": [5, 8, 48, 59, 68, 76, 93, 95, 108, 133, 143, 201, 213, 219, 221, 234, 235, 242, 245, 246, 264, 270, 272], "suggest": [5, 7, 11, 13, 33, 50, 59, 95, 104, 108, 141, 224, 298], "american": [5, 54, 69], "color": [5, 9, 96, 122, 206, 226, 257, 264, 301], "colour": 5, "quotat": 5, "line_color": [5, 212, 229], "aesthet": [5, 14, 212], "ariti": [5, 212], "term": [5, 12, 14, 15, 19, 21, 23, 28, 31, 33, 35, 37, 49, 59, 68, 69, 70, 72, 73, 74, 76, 87, 91, 92, 93, 95, 98, 99, 104, 108, 111, 117, 122, 124, 131, 134, 143, 145, 148, 151, 153, 155, 170, 175, 187, 188, 191, 193, 195, 196, 200, 201, 203, 207, 209, 211, 213, 214, 215, 216, 217, 219, 221, 222, 223, 226, 228, 229, 231, 232, 234, 235, 236, 238, 239, 242, 243, 244, 245, 246, 250, 251, 264, 270, 273, 277, 282, 292, 294, 296, 297, 302], "unrestrict": [5, 57, 264], "necklac": [5, 264], "bracelet": [5, 264], "impli": [5, 14, 15, 21, 41, 45, 49, 59, 98, 120, 191, 212, 217, 219, 226, 234, 236, 242, 244, 247, 250, 251, 264, 277], "turn": [5, 13, 14, 21, 37, 49, 68, 74, 76, 83, 93, 102, 133, 149, 153, 207, 213, 221, 222, 223, 226, 233, 234, 236, 238, 239, 242, 257, 264, 279, 294, 296], "sequenc": [5, 15, 41, 47, 49, 52, 55, 58, 59, 60, 64, 66, 67, 68, 69, 71, 73, 76, 78, 81, 82, 83, 84, 85, 92, 98, 99, 101, 104, 107, 108, 111, 114, 124, 158, 164, 190, 191, 215, 217, 220, 226, 228, 230, 233, 235, 236, 238, 239, 242, 243, 245, 252, 255, 258, 259, 264, 266, 267, 282], "revers": [5, 26, 52, 57, 60, 67, 68, 69, 74, 95, 96, 98, 104, 108, 124, 190, 201, 206, 213, 215, 219, 222, 223, 226, 227, 234, 238, 242, 264, 302], "ambigu": [5, 13, 15, 17, 68, 110, 179, 185, 238, 250, 255], "person": [5, 14], "chebyshev": [5, 47, 68, 95, 219, 222], "pafnuti": 5, "lvovich": 5, "tchebychev": 5, "whose": [5, 13, 14, 21, 23, 28, 48, 50, 52, 57, 60, 67, 68, 69, 74, 78, 82, 84, 85, 91, 95, 98, 104, 108, 129, 136, 153, 163, 186, 196, 202, 203, 207, 210, 214, 215, 217, 221, 222, 233, 234, 238, 242, 243, 244, 246, 252, 257, 261, 264, 265, 270, 273, 275, 277], "transliter": 5, "russian": 5, "chebyshevt": [5, 76, 226], "orthogonalpolynomi": 5, "t_n": [5, 73, 76, 95, 219, 222, 275], "tens": 5, "inclus": [5, 13, 67, 118, 120, 184, 213, 232, 233, 234, 245], "pronoun": 5, "Or": [5, 8, 12, 13, 15, 22, 30, 32, 59, 68, 69, 70, 76, 93, 98, 108, 136, 213, 223, 225, 226, 238, 245, 246, 257, 265, 277, 297, 300], "gender": 5, "neutral": 5, "he": [5, 73, 93, 219], "she": [5, 245], "extran": [5, 242], "belittl": 5, "obvious": [5, 12, 50, 59, 194, 209, 216, 236], "easili": [5, 13, 21, 23, 35, 39, 51, 68, 69, 91, 93, 104, 108, 109, 129, 133, 136, 137, 153, 189, 209, 222, 225, 226, 231, 238, 239, 242, 244, 245, 248, 258, 296], "straightforward": [5, 12, 23, 59, 69, 104, 236], "unwelcom": 5, "judgement": 5, "phrase": [5, 11, 14, 69], "friendli": [5, 49, 93, 239, 241, 242, 244, 245, 259, 303], "mistak": [5, 11, 12, 15, 31, 59, 110, 265], "goe": [6, 7, 10, 11, 12, 23, 38, 104, 120, 233, 236, 245, 294, 297], "content": [6, 16, 49, 68, 69, 103, 214, 215, 217, 219, 222, 225, 226, 254, 259, 262, 263, 282, 283, 284, 285, 286, 287, 288, 289, 293, 295], "setup": [6, 10, 11, 12, 13, 49, 68, 144, 145, 146, 160, 201, 219, 222, 224, 225, 236, 257, 258, 260, 269, 301], "workflow": [6, 7, 8, 9, 10, 12, 34, 35, 158, 216, 259, 265], "document": [6, 10, 12, 13, 14, 20, 23, 29, 43, 44, 45, 59, 64, 68, 69, 74, 75, 76, 80, 90, 93, 94, 96, 101, 104, 109, 115, 117, 128, 134, 151, 153, 154, 156, 158, 166, 180, 186, 200, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 219, 220, 222, 226, 236, 240, 242, 244, 245, 255, 257, 259, 260, 262, 264, 270, 277, 278, 281, 292, 294, 295, 301, 302], "depend": [6, 9, 11, 13, 14, 15, 17, 21, 23, 25, 28, 33, 34, 35, 39, 47, 49, 50, 59, 60, 67, 68, 69, 70, 73, 74, 76, 80, 85, 92, 93, 95, 96, 97, 104, 108, 109, 110, 114, 122, 126, 130, 134, 135, 139, 141, 143, 145, 151, 153, 163, 164, 165, 180, 189, 191, 193, 195, 196, 206, 207, 212, 214, 215, 217, 219, 221, 222, 223, 225, 226, 227, 232, 236, 238, 239, 242, 243, 244, 245, 246, 257, 258, 259, 260, 264, 265, 277, 279, 280, 294, 296], "debug": [6, 49, 68, 95, 110, 143, 180, 257, 258, 267], "style": [6, 7, 8, 11, 48, 68, 96, 185, 206, 212, 226, 245, 301], "polici": [6, 13, 260, 262], "maintain": [7, 14, 15, 68, 69, 108, 117, 226, 234, 235, 242, 245, 261], "love": 7, "oil": 7, "daunt": 7, "acquaint": 7, "video": [7, 300], "2016": [7, 111, 112, 114], "2014": [7, 245, 246], "capabl": [7, 13, 14, 21, 34, 47, 49, 68, 72, 80, 93, 108, 116, 117, 151, 158, 212, 223, 226, 245, 295, 296, 302, 303], "besid": [7, 51, 68, 219, 244], "lot": [7, 11, 13, 59, 68, 86, 93, 95, 104, 141, 158, 212, 215, 222, 225, 229, 239, 245, 257, 302], "probabl": [7, 11, 51, 59, 68, 73, 76, 80, 108, 141, 185, 189, 236, 242, 245, 246, 258, 294, 300], "brows": [7, 9], "topic": [7, 16, 24, 38, 49, 151, 156, 208, 209, 210, 211, 213, 215, 216, 221, 245, 287, 294, 299], "particip": 7, "abid": 7, "email": [7, 226], "googl": [7, 211, 212, 245], "spam": [7, 267], "post": [7, 13, 21, 28, 30, 31, 32, 33, 34, 35, 36, 37, 49, 62, 68, 226, 227, 238, 257, 297], "moder": [7, 95], "shakthimaan": 7, "book": [7, 9, 48, 59, 69, 74, 134, 141, 144, 152, 156, 157, 176, 220, 225, 226, 295], "chapter1": 7, "etiquett": 7, "track": [7, 9, 11, 13, 15, 59, 68, 72, 76, 139, 152, 175, 200, 210, 215, 233, 252, 292], "etc": [7, 11, 12, 13, 19, 21, 22, 44, 47, 49, 64, 68, 69, 73, 74, 86, 95, 97, 98, 103, 108, 110, 114, 141, 162, 171, 175, 188, 191, 203, 207, 209, 210, 212, 213, 214, 215, 216, 219, 221, 226, 227, 234, 235, 236, 238, 242, 245, 246, 250, 258, 259, 264, 275, 279], "interest": [7, 11, 15, 17, 23, 28, 31, 37, 64, 68, 70, 73, 74, 84, 93, 95, 104, 108, 110, 137, 142, 143, 191, 196, 210, 213, 217, 221, 222, 223, 225, 233, 236, 238, 239, 244, 245, 258, 259, 275, 292, 295, 297, 298, 299, 302], "prepar": [7, 21, 134, 224], "chat": [7, 39], "room": [7, 213], "stackoverflow": [7, 11, 108, 264, 267], "tracker": [7, 11, 12, 47, 234, 245, 298], "isn": [7, 11, 13, 23, 35, 95, 128, 137, 141, 245, 296], "organ": [7, 11, 151], "termin": [7, 8, 9, 11, 59, 68, 74, 96, 108, 140, 206, 226, 233, 257, 301], "live": [7, 40, 50, 158, 221, 239], "click": [7, 8, 9, 11], "next": [7, 9, 11, 15, 19, 21, 23, 25, 40, 49, 50, 52, 57, 59, 60, 62, 63, 68, 69, 74, 93, 95, 98, 104, 108, 110, 128, 130, 133, 134, 139, 144, 145, 146, 148, 150, 151, 152, 159, 209, 210, 213, 215, 217, 221, 222, 226, 234, 236, 239, 242, 261, 262, 264, 295, 296, 297], "function_nam": [7, 49, 258], "upon": [7, 12, 14, 21, 49, 68, 108, 129, 136, 139, 143, 153, 154, 155, 158, 185, 191, 207, 209, 210, 234, 242, 251, 258, 277, 302], "undergo": [7, 114, 164], "gain": [7, 15, 26, 69, 124, 153, 154, 158], "submiss": 7, "dockerfil": 8, "htmldoc": 8, "sympy_htmldoc": 8, "apt": [8, 9], "dvipng": 8, "librsvg2": 8, "imagemagick": 8, "docbook2x": 8, "sudo": [8, 9], "venv": [8, 9], "my": [8, 226, 291], "Then": [8, 9, 11, 12, 14, 19, 21, 59, 64, 67, 68, 93, 97, 104, 108, 131, 134, 148, 150, 151, 156, 160, 188, 196, 209, 213, 214, 216, 219, 221, 223, 226, 233, 236, 238, 239, 242, 244, 265], "rerun": [8, 11, 12, 222, 257], "txt": [8, 9, 226], "mayb": [8, 12, 22, 30], "rpm": 8, "prerequisit": 8, "dnf": [8, 98], "medium": [8, 23, 160, 161, 164, 165, 175, 219, 287], "homebrew": 8, "brew": 8, "sh": 8, "docbook": 8, "librsvg": 8, "tricki": [8, 68, 93], "subsystem": [8, 226], "linux": [8, 9, 11, 39], "workaround": [8, 265], "solut": [8, 11, 13, 14, 15, 17, 19, 22, 23, 26, 29, 30, 49, 64, 68, 69, 74, 76, 78, 86, 90, 91, 92, 95, 104, 108, 111, 114, 116, 121, 128, 134, 135, 141, 145, 151, 155, 160, 196, 200, 213, 215, 219, 220, 221, 222, 223, 224, 225, 234, 239, 241, 242, 243, 244, 303], "shell": [8, 11, 15, 96, 158, 225], "microsoft": 8, "wsl": 8, "transfer": [8, 26, 121, 122, 124, 160, 245], "folder": 8, "prepend": [8, 48, 59, 104, 124, 198, 226, 252], "mnt": 8, "navig": [8, 13], "cygwin": 8, "msys2": 8, "partial": [8, 14, 47, 59, 66, 67, 68, 70, 72, 73, 74, 108, 110, 158, 185, 201, 205, 207, 215, 217, 220, 223, 226, 228, 235, 238, 242, 243, 247, 253, 270, 277, 292, 302], "viabl": [8, 69], "64": [8, 12, 53, 59, 68, 108, 157, 211, 225, 235, 244, 246, 257, 264, 267, 301], "bit": [8, 12, 19, 23, 48, 49, 52, 68, 69, 71, 98, 99, 104, 108, 185, 196, 213, 215, 222, 236, 239, 245, 257, 264, 274, 275, 301], "chocolatei": 8, "choco": 8, "rsvg": 8, "chose": [8, 69], "rm": [8, 49], "absolut": [8, 12, 45, 46, 49, 67, 68, 74, 76, 83, 93, 95, 99, 104, 110, 126, 189, 217, 221, 222, 236, 238, 241, 246, 257, 279, 280, 281], "substitut": [8, 14, 15, 19, 22, 28, 31, 35, 37, 49, 68, 69, 74, 76, 93, 95, 104, 109, 110, 124, 134, 135, 141, 143, 145, 155, 180, 189, 191, 194, 201, 203, 205, 223, 224, 227, 228, 233, 236, 238, 239, 242, 243, 244, 245, 265, 273, 293, 294], "filesystem": 8, "makefil": 8, "subdirectori": [8, 12, 25], "browser": 8, "drop": [8, 11, 74, 95, 109, 148, 217, 219], "menu": 8, "told": [8, 11], "load": [8, 13, 49, 68, 96, 116, 117, 118, 120, 129, 130, 132, 133, 134, 137, 139, 144, 146, 151, 159, 171, 206, 287], "ll": [8, 48, 66, 104, 112, 114, 129, 137, 145, 209, 210, 255], "repeat": [8, 9, 14, 15, 59, 62, 67, 68, 74, 76, 95, 97, 99, 104, 108, 110, 175, 177, 191, 212, 213, 214, 219, 221, 222, 226, 232, 242, 246, 250, 251, 258, 260, 264, 302], "reload": 8, "approach": [8, 19, 28, 31, 32, 33, 35, 36, 37, 48, 67, 68, 95, 124, 145, 151, 215, 216, 219, 220, 221, 223, 234, 243, 244, 246, 258, 261, 264, 292, 298], "monitor": 8, "procedur": [8, 31, 33, 50, 51, 53, 59, 65, 66, 67, 95, 104, 134, 156, 219, 221, 238, 239, 244, 245, 270, 298], "8000": [8, 116], "localhost": 8, "port": [8, 110, 143, 163], "finish": [8, 12, 49, 50, 185, 260, 299], "ctrl": 8, "detach": 8, "livehtml": 8, "tab": [8, 13, 15, 64, 158], "99": [8, 49, 68, 69, 104, 108, 124, 219, 220], "bad": [8, 11, 12, 13, 67, 108, 193, 215, 226], "extra": [8, 13, 49, 51, 68, 69, 108, 109, 110, 134, 149, 196, 207, 219, 226, 236, 242, 257, 258, 259, 277], "xelatex": 8, "latexmk": 8, "chrome": 8, "chromium": 8, "svg": [8, 25, 96, 206], "On": [8, 11, 13, 21, 44, 61, 68, 70, 76, 95, 98, 108, 116, 141, 195, 196, 207, 216, 217, 219, 220, 221, 222, 242, 244, 261, 265, 277, 279], "xetex": 8, "font": [8, 96, 206, 226], "lmodern": 8, "cask": 8, "tap": 8, "dejavu": 8, "strawberryperl": 8, "dejavufont": 8, "appdata": 8, "never": [9, 10, 11, 12, 14, 21, 23, 35, 68, 74, 95, 110, 193, 222, 223, 226, 234, 244, 246, 255, 274, 294, 295], "familiar": [9, 10, 11, 15, 23, 95, 141, 156, 175, 223, 292, 294, 300], "push": [9, 11, 12, 93, 129, 137], "nativ": [9, 14, 68, 124, 217, 222, 257], "yum": 9, "maco": 9, "desktop": 9, "gui": [9, 96, 206], "sync": 9, "rebas": [9, 11], "disabl": [9, 12, 14, 35, 68, 69, 93, 95, 108, 219, 222, 226, 234, 242, 244, 255, 257, 260, 264, 265], "commit": [9, 12], "enter": [9, 17, 60, 68, 69, 73, 81, 108, 110, 116, 120, 134, 139, 143, 153, 226, 236, 244, 257, 297, 301], "config": [9, 96], "firstnam": 9, "lastnam": 9, "your_email": 9, "youremail": 9, "usernam": [9, 11], "gitconfig": 9, "handi": [9, 67, 68, 104, 226, 297], "shortcut": [9, 48, 68, 100, 210, 226, 234, 238, 302], "alias": [9, 102, 217], "alia": [9, 49, 61, 68, 78, 84, 99, 100, 102, 106, 111, 114, 175, 184, 191, 213, 215, 216, 217, 221, 225, 234, 257, 267, 302], "di": [9, 222], "st": [9, 12, 69, 95, 191], "statu": [9, 11, 96], "checkout": [9, 11, 48], "log1": 9, "onelin": 9, "abbrev": [9, 197, 198, 226], "scm": 9, "sv": 9, "v2": [9, 70, 81, 104, 136, 201, 202, 205, 265, 270, 273, 274, 275, 276], "signup": 9, "presenc": [9, 68, 74, 98, 120, 139, 145, 155, 242, 250], "world": [9, 69, 120, 145, 155, 264], "profession": 9, "establish": [9, 19, 64, 93, 129, 133, 137, 139, 146, 236], "secur": [9, 13], "connect": [9, 21, 62, 69, 70, 83, 84, 104, 109, 116, 120, 130, 133, 139, 140, 143, 146, 152, 213, 214, 215, 224, 242, 246, 264, 270], "button": [9, 12, 212, 258], "address": [9, 12, 68, 226, 245], "practic": [9, 19, 21, 28, 31, 34, 37, 57, 59, 68, 69, 78, 152, 155, 158, 212, 213, 214, 216, 221, 223, 250, 294, 295], "store": [9, 11, 13, 15, 21, 25, 48, 49, 58, 59, 68, 90, 92, 101, 104, 108, 110, 130, 134, 136, 139, 141, 156, 185, 191, 205, 209, 210, 212, 213, 215, 216, 221, 222, 223, 233, 236, 247, 250, 251, 259, 260, 261, 264, 275, 277, 297], "clone": [9, 39, 219], "origin": [9, 11, 12, 14, 15, 19, 21, 31, 39, 41, 59, 60, 61, 64, 67, 68, 69, 72, 73, 74, 76, 77, 79, 81, 83, 93, 95, 99, 104, 108, 111, 112, 114, 122, 124, 125, 133, 139, 140, 145, 155, 158, 183, 186, 196, 202, 207, 212, 213, 215, 217, 221, 222, 225, 226, 234, 235, 236, 238, 239, 242, 243, 244, 245, 246, 252, 257, 264, 265, 270, 273, 274, 275, 276, 277, 279, 280, 302], "77": [9, 57, 76, 104, 108, 225, 226, 259], "mib": 9, "repo": [9, 11, 12, 141], "remot": [9, 68], "tune": [9, 72, 96, 206, 226], "fetch": 9, "advantag": [9, 13, 17, 21, 23, 28, 44, 47, 49, 68, 69, 73, 95, 98, 104, 108, 121, 195, 215, 216, 223, 234, 239, 242, 245, 261, 294, 296, 298, 302], "isol": [9, 28, 47, 74, 217, 221, 222, 223, 244, 259], "wide": [9, 21, 96, 104, 118, 158, 206, 215, 216, 222, 226, 246], "split": [10, 23, 49, 68, 69, 72, 93, 95, 110, 219, 221, 224, 225, 226, 244, 246, 252, 257, 264, 268, 297, 302], "experienc": [10, 13, 50], "flake8": [11, 12], "regress": 11, "green": [11, 12, 59, 152, 212], "123": [11, 68, 73, 78, 98, 133, 188, 201, 264, 270, 272], "visibl": [11, 93, 212], "ok": [11, 12, 13, 49, 60, 226, 242], "field": [11, 21, 35, 41, 45, 49, 68, 69, 70, 76, 86, 95, 163, 164, 203, 204, 208, 213, 214, 215, 217, 218, 220, 222, 223, 224, 239, 244, 257, 270, 273, 275, 276, 278, 280, 285, 287, 288], "respond": [11, 68], "perus": 11, "feel": [11, 21, 39, 158, 159, 238, 242, 244], "fine": [11, 12, 13, 19, 23, 31, 68, 72, 96, 206, 215, 216, 226, 238], "upstream": 11, "highlight": 11, "accid": [11, 12, 69, 265], "reset": [11, 59, 61, 139, 212, 219, 222, 257, 260, 262], "somehow": [11, 12, 14, 23], "typo": [11, 236], "ultim": [11, 23, 74, 196], "spend": 11, "distinguish": [11, 18, 21, 22, 48, 59, 72, 97, 141, 190, 196, 213], "accident": [11, 12, 14], "failur": [11, 13, 64, 72, 85, 93, 108, 246, 257, 302], "accompani": [11, 12, 48], "sqrtdenest": [11, 12, 238], "test_sqrtdenest": [11, 12], "pattern": [11, 12, 13, 14, 15, 21, 23, 68, 93, 95, 98, 99, 110, 185, 216, 236, 238, 242, 244, 292, 297], "appar": [11, 12, 14, 15, 68, 267, 302], "test_trigonometr": [11, 12], "test_cos_seri": [11, 12], "6": [11, 12, 15, 17, 19, 26, 28, 36, 37, 41, 43, 44, 47, 49, 50, 51, 52, 56, 57, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 78, 80, 81, 82, 83, 84, 90, 91, 93, 95, 97, 98, 99, 101, 102, 104, 105, 107, 108, 110, 112, 116, 118, 120, 122, 124, 125, 126, 136, 143, 144, 148, 149, 150, 156, 160, 164, 170, 188, 201, 210, 211, 212, 214, 215, 216, 217, 219, 221, 222, 223, 225, 226, 228, 231, 232, 233, 234, 235, 238, 239, 242, 243, 244, 245, 246, 247, 257, 258, 261, 264, 265, 270, 273, 275, 280, 292, 298, 302, 303], "720": [11, 12, 228, 242, 264], "40320": [11, 12], "One": [11, 14, 15, 18, 21, 23, 47, 48, 49, 58, 60, 67, 68, 73, 74, 76, 87, 90, 92, 93, 95, 98, 104, 108, 110, 116, 117, 139, 141, 156, 158, 167, 196, 200, 217, 219, 220, 222, 225, 228, 234, 238, 241, 244, 245, 246, 247, 252, 265, 277, 291, 292, 294, 297, 298, 302], "past": [11, 12, 15, 74, 108, 225, 226, 301], "session": [11, 12, 14, 40, 49, 68, 80, 95, 206, 210, 216, 262, 294, 301], "unclear": [11, 13, 21, 128], "kei": [11, 13, 14, 15, 17, 28, 30, 42, 45, 48, 57, 59, 60, 68, 69, 70, 73, 84, 97, 99, 104, 107, 108, 116, 139, 141, 183, 186, 191, 210, 212, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 226, 238, 242, 243, 244, 246, 250, 261, 264, 265, 267, 298, 299, 302], "corner": [11, 12, 59, 61, 99, 222, 242, 245, 265], "delta_funct": [11, 76, 95], "argumentindexerror": [11, 23], "scroll": [11, 37], "bottom": [11, 58, 59, 68, 69, 84, 99, 104, 107, 139, 221, 226, 235, 280], "test_bas": [11, 257], "similari": 11, "code_qu": 11, "total": [11, 37, 50, 57, 59, 68, 73, 84, 97, 98, 99, 101, 143, 145, 153, 160, 164, 170, 175, 188, 197, 211, 217, 219, 222, 235, 238, 242, 250, 252, 280], "new_fil": 11, "editor": [11, 12], "vim": 11, "pop": [11, 95, 239], "stage": [11, 21, 48, 67, 108, 233, 302], "affect": [11, 13, 21, 23, 67, 68, 104, 200, 222, 244, 245, 275], "binari": [11, 12, 15, 22, 23, 31, 45, 49, 52, 63, 68, 69, 95, 98, 108, 109, 185, 197, 213, 216, 222, 239, 258, 261, 264], "temporari": [11, 68, 258], "individu": [11, 12, 13, 21, 23, 26, 30, 33, 68, 74, 79, 84, 85, 97, 101, 104, 124, 156, 163, 181, 185, 211, 234, 242, 244, 257, 298], "gitignor": 11, "agreement": 11, "exclud": [11, 30, 35, 37, 49, 67, 68, 95, 104, 131, 136, 158, 214, 215, 217, 219, 222, 232, 242, 244, 257, 260, 264], "22906851": 11, "ignor": [11, 12, 13, 15, 17, 23, 49, 59, 68, 69, 73, 74, 78, 83, 93, 98, 104, 108, 124, 131, 137, 143, 188, 191, 201, 212, 222, 226, 227, 238, 244, 245, 258, 302], "bodi": [11, 13, 15, 49, 93, 110, 127, 128, 129, 132, 133, 134, 139, 141, 143, 144, 145, 146, 148, 151, 152, 153, 158, 159, 194, 201, 205, 209, 210, 270, 272, 287], "perman": [11, 104], "histori": [11, 158], "effort": [11, 109, 217, 219], "research": [11, 19, 60, 124, 215, 223, 238], "shortlog": 11, "ui": [11, 95, 108, 243], "convei": [11, 28], "71": [11, 59, 84, 104, 108, 194], "78": [11, 59, 82, 104, 108, 117, 196, 242, 246], "summari": [11, 144, 257, 281], "leav": [11, 14, 21, 23, 34, 36, 49, 68, 95, 104, 108, 112, 135, 151, 175, 191, 215, 233, 261, 291, 297, 302], "heurisch": [11, 13, 95], "12345": [11, 49, 72], "brief": [11, 49, 245, 257, 279], "nearbi": 11, "similarli": [11, 12, 13, 21, 28, 35, 64, 68, 69, 76, 80, 104, 116, 117, 124, 134, 137, 156, 195, 200, 212, 213, 216, 221, 223, 233, 234, 236, 242, 257, 265, 275, 276, 298], "doubt": [11, 98, 141], "switch": [11, 13, 41, 59, 66, 95, 108, 124, 219, 222, 248], "let": [11, 12, 19, 21, 22, 23, 26, 47, 49, 59, 64, 68, 69, 78, 86, 91, 93, 97, 101, 104, 105, 108, 110, 112, 129, 130, 140, 141, 158, 196, 201, 209, 213, 214, 215, 219, 221, 222, 223, 226, 233, 236, 238, 239, 242, 244, 245, 252, 255, 258, 262, 265, 275, 276, 280, 291, 294, 296, 297, 302], "overview": [11, 214, 245, 278, 279], "concret": [11, 21, 48, 60, 68, 73, 74, 95, 97, 104, 108, 111, 114, 129, 141, 196, 217, 221, 226, 282], "suitabl": [11, 95, 101, 110, 211, 214, 215, 216, 219, 221, 226, 236, 239, 242, 245, 247, 295], "unicod": [11, 12, 76, 96, 104, 206, 226, 257, 296], "printer": [11, 12, 13, 14, 23, 60, 68, 76, 96, 104, 109, 206, 248, 251, 258, 259, 265, 293, 297], "bf0e81e12a2f75711c30f0788daf4e58f72b2a41": 11, "revis": [11, 244], "anti": [11, 14, 41, 45, 64, 74, 95, 99, 163, 168, 252], "candid": [11, 32, 59, 68, 104, 108, 219, 238], "phase": [11, 26, 68, 95, 122, 160, 163, 165, 175, 176, 245], "explicit": [11, 13, 14, 21, 23, 28, 31, 32, 60, 67, 68, 72, 84, 85, 95, 107, 108, 114, 134, 135, 139, 141, 145, 155, 159, 210, 213, 222, 225, 226, 228, 234, 236, 242, 243, 244, 245, 261], "solve_lin_si": [11, 13, 224], "upsid": 11, "monomi": [11, 68, 95, 98, 108, 214, 216, 217, 219, 225, 226, 302], "downsid": [11, 298], "involv": [11, 12, 13, 15, 19, 21, 28, 30, 32, 44, 46, 59, 67, 68, 69, 73, 80, 81, 93, 95, 108, 115, 124, 130, 134, 140, 141, 170, 180, 186, 188, 198, 209, 210, 213, 214, 217, 219, 221, 222, 223, 227, 228, 233, 234, 235, 236, 238, 239, 242, 244, 247, 265, 302], "anymor": [11, 12, 212], "coincid": [11, 84, 104, 107, 133, 141, 213, 270, 275, 294], "investig": [11, 60, 93, 211, 213, 236, 264, 294], "exp": [11, 12, 13, 14, 15, 17, 21, 23, 26, 34, 35, 37, 41, 47, 49, 58, 67, 68, 70, 72, 73, 74, 76, 86, 87, 90, 93, 95, 99, 101, 104, 108, 110, 112, 126, 167, 170, 186, 192, 211, 216, 217, 222, 223, 226, 228, 233, 236, 238, 242, 243, 244, 245, 246, 247, 264, 280, 292, 296, 298, 303], "ratsimp": [11, 68, 238], "cpu": [11, 49, 109, 158], "sy": [11, 39, 49, 70, 141, 158, 226, 257, 276, 294], "04": [11, 99, 246], "31": [11, 56, 68, 71, 72, 84, 108, 112, 200, 211, 222, 239], "wall": [11, 133, 139, 146], "32": [11, 59, 71, 74, 76, 78, 95, 104, 108, 116, 122, 200, 220, 222, 223, 235, 236, 239, 246, 257], "\u212f": [11, 49, 163, 211, 226, 292, 296, 298, 302, 303], "took": [11, 223, 235], "450": [11, 104], "gb": [11, 59, 120], "ram": 11, "occasion": [11, 12, 68], "feedback": [11, 26, 69, 121, 124, 295], "draft": 11, "state": [11, 12, 14, 19, 21, 35, 59, 66, 68, 76, 108, 111, 112, 114, 116, 124, 126, 133, 134, 135, 139, 143, 145, 159, 163, 167, 168, 170, 171, 172, 174, 175, 176, 180, 183, 185, 186, 187, 188, 190, 191, 215, 222, 226, 235, 236, 238, 246, 261, 287, 298], "wip": 11, "stand": [11, 14, 67, 68, 134, 158, 214, 215, 216, 217, 223], "progress": [11, 42, 44, 108, 259], "fill": [11, 15, 20, 59, 69, 99, 101, 104, 107, 191, 212, 257, 260, 264, 267, 298], "templat": [11, 13, 264], "undescript": 11, "tend": [11, 23, 40, 49, 68, 73, 129, 137, 219, 221, 231, 233, 236, 295, 302], "henc": [11, 47, 49, 58, 59, 68, 70, 74, 76, 80, 93, 96, 98, 108, 120, 207, 212, 213, 214, 219, 226, 236, 239, 243, 245, 257, 261, 275, 276, 277, 297, 302], "transcendent": [11, 21, 32, 36, 37, 45, 68, 76, 95, 216, 221, 222, 226, 244, 245, 298, 303], "perhap": [11, 13, 17, 49, 68, 98, 108, 176, 215, 216, 244, 259, 291], "compar": [11, 12, 15, 21, 37, 47, 49, 60, 65, 68, 73, 74, 85, 98, 104, 108, 109, 143, 170, 194, 198, 216, 219, 222, 223, 226, 231, 233, 238, 242, 245, 247, 251, 257, 264, 294, 297, 302], "1234": [11, 108, 239], "auto": [11, 13, 15, 31, 47, 68, 69, 96, 212, 215, 219, 222, 226, 238, 242, 246], "record": [11, 51, 62, 68, 221, 226, 257], "joe": 11, "blogg": 11, "mailmap_check": 11, "unrecognis": 11, "3af6dc1": 11, "7fa63b1": 11, "100644": 11, "1307": [11, 37], "zsc347": 11, "gmail": [11, 211], "\u00f8yvind": 11, "jensen": [11, 49], "oyvind": 11, "\u0142ukasz": 11, "pankowski": 11, "lukpank": 11, "o2": [11, 233], "pl": 11, "\u5f6d\u4e8e\u658c": 11, "1931127624": 11, "qq": [11, 86, 87, 89, 90, 91, 95, 213, 214, 215, 216, 219, 221, 222, 223], "reorder": [11, 60, 67, 74, 191, 222, 242, 246, 264], "alphabet": [11, 68, 69, 124, 196, 214, 239, 259], "move": [11, 12, 23, 59, 60, 68, 69, 82, 84, 116, 129, 133, 137, 139, 143, 145, 151, 179, 205, 209, 210, 238, 247, 256, 277], "7598d94": 11, "562": 11, "joannah": 11, "nanjeky": 11, "ibm": [11, 238], "jnanjeky": 11, "nanjekyejoannah": 11, "joaquim": 11, "monserrat": 11, "qmonserrat": 11, "mailoo": 11, "jochen": 11, "voss": 11, "seehuhn": 11, "de": [11, 48, 69, 73, 108, 111, 112, 114, 120, 196, 211, 223, 228, 239, 242, 264], "jogi": 11, "miglani": 11, "jmig5776": 11, "johan": 11, "bl\u00e5b\u00e4ck": 11, "johan_bluecreek": 11, "riseup": 11, "net": [11, 48, 84, 220, 242, 246, 264], "blaback": 11, "cea": 11, "fr": [11, 90, 95, 108, 134, 141, 143, 145, 148, 149, 153, 155, 158, 246], "guzman": 11, "jguzm022": 11, "ucr": 11, "edu": [11, 47, 52, 59, 60, 69, 71, 73, 95, 104, 108, 124, 215, 220, 225, 235, 239, 242, 246, 270], "joeb": 11, "1785690389": 11, "norepli": 11, "map": [11, 14, 21, 23, 47, 48, 49, 51, 58, 59, 60, 68, 69, 80, 84, 91, 93, 95, 98, 99, 108, 111, 122, 134, 145, 169, 180, 181, 186, 201, 210, 212, 213, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 233, 238, 242, 243, 244, 245, 246, 250, 251, 258, 261, 264, 265, 267, 270], "cost": [12, 47, 49, 108, 145, 215, 245, 296], "modular": [12, 13, 69, 108, 187, 215, 220, 245], "consequ": [12, 13, 23, 45, 68, 114, 214, 216, 294, 302], "cover": [12, 19, 74, 108, 110, 128, 141, 200, 209, 252, 259, 292, 294], "maxim": [12, 59, 69, 97, 114, 213, 217, 221, 233, 235], "red": [12, 212], "advis": [12, 13, 21, 37, 48, 133, 141], "wait": [12, 210], "_____________________________________________________________________________________________________": 12, "_________________": [12, 117], "test_pretti": 12, "test_upretty_sub_sup": 12, "traceback": [12, 13, 15, 18, 21, 22, 23, 28, 30, 32, 33, 34, 35, 36, 37, 42, 43, 44, 49, 50, 60, 68, 69, 72, 78, 95, 98, 99, 100, 101, 102, 104, 106, 107, 110, 124, 211, 213, 215, 216, 217, 219, 222, 225, 233, 234, 242, 244, 245, 255, 257, 258, 260, 262, 264, 265, 267, 294, 298], "home": [12, 116, 221, 239], "oscar": [12, 211], "317": 12, "upretti": 12, "beta_1_2": 12, "\u03b2\u2081\u2082": 12, "assertionerror": [12, 255], "branch": [12, 22, 47, 68, 73, 74, 75, 76, 223, 236, 245, 297, 302], "ran": 12, "influenc": [12, 50, 116, 140, 213, 214], "suppos": [12, 13, 22, 23, 60, 67, 68, 69, 93, 110, 213, 215, 219, 221, 222, 226, 233, 236, 242, 244, 255, 264, 275, 280, 294, 296, 302], "sneak": 12, "sporad": 12, "seed": [12, 57, 59, 68, 69, 78, 81, 82, 104, 108, 219, 246, 257, 264], "pythonhashse": [12, 257], "unrel": [12, 13, 33, 68, 75, 214, 294], "ideal": [12, 21, 49, 105, 136, 141, 151, 201, 209, 215, 217, 219, 220, 221, 222, 223, 238, 245, 270], "slip": [12, 143, 147, 149, 209], "wasn": [12, 13], "notic": [12, 13, 15, 23, 59, 60, 66, 68, 104, 156, 179, 216, 236, 248, 252, 253, 264, 265, 294, 296, 297, 302], "broken": [12, 13, 57, 68, 209, 226, 242, 267], "seem": [12, 17, 21, 23, 92, 93, 141, 196, 213, 215, 238, 242, 302], "carefulli": [12, 22, 68, 112, 201, 219, 228], "everyon": [12, 223], "expediti": 12, "21177": 12, "residu": [12, 64, 69, 108, 217, 219, 236], "cot": [12, 68, 74, 76, 110, 223, 226, 235], "tanh": [12, 68, 72, 74, 95, 110, 111, 114, 223, 226, 238, 302], "as_leading_term": [12, 68, 233], "21253": 12, "test_tan": 12, "tan": [12, 47, 68, 73, 74, 95, 110, 131, 148, 149, 150, 155, 223, 225, 226, 233, 235, 242, 245, 302], "test_expr": [12, 68], "test_as_leading_term": 12, "ration": [12, 14, 21, 23, 28, 42, 44, 45, 47, 49, 67, 68, 72, 73, 74, 76, 78, 81, 83, 85, 89, 93, 95, 96, 101, 104, 108, 110, 124, 160, 193, 211, 214, 215, 219, 220, 221, 223, 226, 231, 234, 235, 236, 238, 239, 241, 244, 245, 246, 264, 270, 293, 294, 297, 301], "imaginaryunit": [12, 68, 226], "21245": 12, "fi": [12, 19], "36": [12, 28, 51, 62, 69, 73, 84, 95, 99, 104, 108, 117, 222, 226, 239, 242, 246, 280], "test_residu": 12, "test_issue_21177": 12, "cancel": [12, 19, 23, 26, 49, 68, 72, 76, 84, 93, 95, 104, 108, 124, 125, 129, 215, 216, 217, 219, 222, 225, 238, 244, 296], "underli": [12, 14, 49, 60, 66, 68, 97, 104, 122, 141, 186, 199, 215, 222, 244, 245, 246], "report": [12, 40, 47, 59, 68, 81, 99, 108, 223, 234, 245, 257, 298, 303], "benefici": 12, "prudent": 12, "matter": [12, 23, 47, 57, 60, 67, 68, 73, 93, 95, 200, 233, 264, 296, 297], "reproduct": 12, "constant": [12, 13, 14, 26, 28, 30, 31, 33, 36, 47, 49, 67, 68, 72, 74, 76, 92, 93, 95, 111, 112, 114, 116, 117, 124, 129, 139, 140, 141, 143, 158, 159, 168, 172, 178, 194, 195, 197, 198, 199, 202, 205, 207, 212, 214, 217, 219, 221, 222, 223, 226, 228, 233, 236, 238, 239, 242, 243, 244, 245, 246, 257, 259, 264, 265, 273, 277, 280, 287, 292, 298, 303], "quickli": [12, 19, 23, 59, 60, 68, 69, 72, 73, 108, 215, 219, 222, 235, 245, 261], "newli": [12, 68, 93, 236], "lambda": [12, 14, 15, 23, 26, 30, 34, 43, 44, 47, 49, 59, 60, 68, 69, 70, 74, 95, 99, 100, 101, 104, 107, 108, 110, 134, 141, 154, 155, 158, 159, 176, 212, 215, 219, 221, 222, 226, 227, 234, 235, 238, 242, 244, 245, 246, 247, 255, 264, 265, 270, 272, 275, 291, 298], "typeerror": [12, 13, 15, 22, 23, 32, 35, 42, 43, 44, 60, 68, 78, 83, 98, 100, 102, 106, 124, 165, 216, 217, 233, 234, 258, 265], "execut": [12, 14, 21, 39, 49, 96, 99, 116, 158, 212, 226, 242, 245, 255, 257, 259, 260, 265, 267, 269, 281, 296, 301], "care": [12, 14, 15, 22, 23, 59, 68, 76, 95, 98, 104, 116, 120, 128, 141, 155, 201, 210, 215, 216, 221, 238, 239, 242, 244, 245, 250, 253, 258, 291, 294, 296], "WILL": 12, "userwarn": [12, 201, 255, 262, 298], "function_that_emits_a_warn": 12, "sparingli": 12, "asid": [12, 15, 98, 242, 243, 296], "annoi": 12, "warrant": 12, "test_stacklevel": [12, 255], "expr_free_symbol": [12, 68], "test_deprecated_expr_free_symbol": 12, "nomin": 12, "closer": [12, 34, 129, 137, 143, 245, 297], "inspect": [12, 13, 21, 104, 112, 114, 221, 232, 263, 265, 289], "could": [12, 13, 14, 15, 19, 21, 23, 32, 34, 36, 44, 49, 61, 68, 80, 93, 95, 98, 133, 136, 141, 151, 155, 191, 194, 196, 213, 216, 219, 221, 223, 226, 234, 236, 238, 242, 243, 244, 245, 246, 247, 250, 251, 258, 262, 275, 276, 294, 297, 302], "nonsens": [12, 67, 76], "unevalu": [12, 13, 14, 21, 22, 23, 26, 43, 44, 47, 60, 67, 68, 74, 76, 85, 95, 108, 124, 168, 172, 179, 180, 191, 222, 225, 233, 234, 238, 242, 244, 245, 246, 247, 292, 296, 297, 303], "helper": [12, 13, 31, 47, 49, 59, 63, 66, 68, 93, 95, 96, 97, 176, 178, 187, 223, 233, 236, 239, 242, 243, 245, 258, 287], "test_sin_1_unevalu": 12, "dummy_eq": [12, 68], "combinatori": [12, 23, 52, 60, 67, 68, 75, 76, 222, 228, 238, 264, 266, 282, 302], "test_comb_factori": 12, "test_factorial_rewrit": 12, "nonneg": [12, 13, 21, 23, 45, 68, 69, 70, 73, 76, 101, 158, 214, 216, 222, 239, 244, 246, 302], "rewrit": [12, 67, 68, 70, 73, 74, 76, 93, 95, 98, 116, 124, 188, 217, 222, 233, 234, 235, 238, 242, 243, 244, 245, 246, 282, 296, 298], "_i": [12, 95, 191, 196, 223], "product": [12, 13, 21, 41, 51, 53, 56, 59, 60, 64, 66, 67, 68, 69, 70, 72, 73, 76, 78, 81, 83, 84, 91, 93, 95, 97, 98, 99, 101, 104, 108, 109, 110, 114, 124, 125, 126, 128, 133, 143, 156, 158, 166, 170, 171, 174, 176, 177, 178, 180, 183, 185, 186, 188, 189, 191, 195, 196, 197, 200, 201, 203, 208, 209, 210, 211, 213, 214, 215, 217, 219, 221, 222, 223, 226, 227, 228, 231, 234, 235, 238, 239, 242, 243, 244, 245, 246, 248, 250, 251, 252, 258, 261, 264, 270, 274, 287], "far": [12, 15, 48, 68, 82, 95, 211, 213, 216, 226, 236, 265, 291, 292, 294], "boil": 12, "agre": [12, 68, 69, 76, 83, 93, 236], "indefinit": [12, 14, 41, 74, 92, 93, 95, 104, 110, 217, 219, 220, 222, 231, 292], "integrand": [12, 72, 76, 92, 93, 95, 110, 236], "Of": [12, 19, 21, 28, 67, 93, 104, 242, 245, 264, 302], "cours": [12, 19, 21, 25, 51, 52, 59, 67, 76, 93, 95, 104, 105, 108, 156, 207, 215, 216, 220, 221, 233, 235, 236, 277, 302], "hurt": 12, "checkodesol": [12, 35, 242], "truth": [12, 22, 42, 43, 44, 45, 46, 68, 99, 238], "verifi": [12, 21, 28, 33, 35, 39, 47, 59, 65, 69, 70, 141, 213, 219, 225, 242, 244, 245, 247, 248, 302], "logic": [12, 13, 14, 21, 23, 42, 43, 44, 45, 48, 68, 70, 93, 95, 108, 183, 185, 186, 190, 212, 226, 228, 234, 242, 246, 264, 294, 295, 296, 298], "duplic": [12, 15, 59, 62, 69, 74, 76, 104, 108, 139, 234, 242, 264, 295], "mistaken": 12, "aaronmeur": 12, "anaconda3": 12, "cpython": [12, 158], "cach": [12, 21, 73, 93, 213, 222, 226, 255, 260, 261], "ye": [12, 69, 98, 108, 242], "ground": [12, 87, 133, 143, 147, 148, 149, 150, 213, 215, 216, 217, 219, 221, 222, 244, 301], "gmpy": [12, 68, 72, 216, 217, 301], "7357232": 12, "hash": [12, 68, 217, 219, 227, 238, 242, 257, 259], "3923913114": 12, "situat": [12, 21, 37, 68, 72, 93, 210, 242, 244, 246, 262, 294], "randomli": [12, 59, 68, 69, 108, 185], "xfail": [12, 242, 255, 257], "almost": [12, 33, 93, 102, 110, 193, 213, 217, 222, 223, 242, 246, 260, 261, 264, 296], "useless": [12, 193, 217, 219], "test_func": 12, "sinc": [12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 26, 42, 47, 49, 50, 59, 60, 61, 64, 65, 66, 68, 69, 71, 73, 74, 76, 77, 78, 80, 84, 86, 92, 93, 95, 97, 98, 99, 104, 108, 127, 133, 156, 158, 167, 191, 192, 196, 207, 210, 212, 213, 214, 216, 217, 219, 221, 222, 226, 229, 234, 235, 236, 238, 239, 242, 244, 245, 246, 252, 256, 260, 261, 262, 264, 265, 274, 276, 277, 279, 291, 296, 298, 301, 302, 303], "xpass": [12, 255, 257], "test_failing_integr": 12, "atanh": [12, 74, 223, 226, 236], "mistyp": 12, "slightli": [12, 34, 40, 41, 49, 64, 108, 110, 143, 212, 213, 215, 217, 219, 222, 226, 236, 238], "robust": [12, 35, 65, 68, 72, 218, 238, 242], "against": [12, 13, 21, 23, 37, 69, 104, 116, 141, 258], "minut": [12, 15, 33, 128, 143, 200], "hang": [12, 35, 104, 145, 149, 242, 243], "job": [12, 19, 23, 60, 171, 223, 226], "skipp": 12, "test_optional_depend": 12, "runtest": [12, 13, 257], "yml": 12, "manner": [12, 52, 69, 76, 155, 189, 207, 239, 242, 247, 264, 279], "act": [12, 14, 48, 51, 58, 59, 60, 64, 68, 76, 84, 97, 98, 104, 112, 115, 116, 118, 120, 129, 130, 133, 136, 137, 139, 141, 146, 154, 163, 175, 180, 183, 184, 234, 245, 247, 248, 275, 279, 291], "fresh": 12, "verbos": [12, 49, 68, 99, 108, 226, 257, 258, 301], "clipboard": 12, "contrast": [12, 14, 23, 67, 68, 145, 216, 222, 236, 242, 296], "foremost": 12, "tempt": [12, 21, 23, 68, 108], "indirect": [12, 68, 70, 76, 108, 191, 242], "trigsimp": [12, 15, 41, 68, 104, 133, 141, 149, 201, 235, 238, 274], "along": [12, 19, 23, 28, 49, 59, 68, 69, 70, 74, 76, 77, 78, 82, 83, 86, 88, 91, 93, 99, 101, 104, 116, 117, 118, 120, 127, 128, 129, 133, 134, 136, 137, 139, 140, 143, 145, 148, 149, 150, 153, 154, 155, 156, 158, 160, 188, 200, 201, 207, 210, 212, 215, 216, 221, 222, 242, 245, 273, 277, 279], "clearer": [12, 13, 114, 274], "unwieldi": [12, 17], "sort": [12, 14, 30, 43, 44, 48, 49, 57, 60, 64, 93, 95, 98, 104, 107, 108, 110, 125, 128, 134, 175, 191, 196, 200, 212, 219, 222, 223, 233, 238, 239, 242, 243, 244, 248, 250, 252, 257, 259, 264, 274, 294, 296, 297], "judgment": 12, "convolut": [12, 76, 228], "uncommon": [12, 49], "valueerror": [12, 18, 21, 34, 35, 42, 44, 47, 49, 50, 60, 68, 69, 77, 78, 81, 83, 84, 95, 99, 101, 104, 107, 108, 116, 122, 124, 140, 165, 205, 207, 211, 213, 215, 219, 221, 234, 242, 244, 245, 264, 267, 277], "0x10e997790": 12, "memori": [12, 14, 49, 68, 108, 222, 247, 258, 261], "attempt": [12, 17, 19, 22, 23, 28, 31, 35, 37, 49, 59, 64, 66, 68, 72, 73, 80, 93, 95, 104, 108, 128, 131, 186, 215, 216, 217, 221, 226, 228, 235, 238, 239, 242, 244, 245, 246, 257, 294, 302], "proof": [12, 59, 62, 93, 95, 245], "45": [12, 48, 68, 73, 84, 104, 108, 120, 222, 223, 239], "120": [12, 19, 67, 68, 73, 74, 90, 108, 116, 117, 223, 225, 226, 228, 242, 292], "210": [12, 72, 108, 239], "252": 12, "hidden": [12, 14, 200], "outdat": 12, "doctest_depends_on": [12, 260], "blanklin": 12, "todo": [12, 169, 171, 175, 176, 180, 181, 183, 184, 185, 186, 187, 219, 226, 233, 251], "trick": [12, 13, 14, 15, 64, 236, 252], "tag": [12, 226, 244], "dotprint": [12, 297, 301], "pprint": [12, 14, 15, 23, 26, 32, 47, 48, 70, 76, 95, 104, 108, 124, 163, 211, 226, 227, 234, 238, 242, 243, 245, 246, 264, 301], "use_unicod": [12, 23, 33, 47, 48, 49, 72, 76, 95, 96, 104, 117, 124, 163, 206, 211, 213, 214, 225, 226, 227, 245, 246, 292, 296, 298, 301, 302, 303], "is_real": [12, 14, 21, 23, 28, 32, 68, 70, 74, 75, 104, 203, 222, 226, 251], "real": [12, 13, 14, 15, 18, 19, 21, 22, 23, 28, 31, 32, 41, 43, 45, 46, 47, 49, 60, 68, 69, 70, 72, 73, 74, 75, 76, 80, 84, 85, 90, 93, 95, 98, 99, 101, 104, 110, 114, 120, 124, 126, 136, 141, 158, 160, 163, 164, 171, 189, 203, 211, 214, 217, 221, 222, 223, 226, 227, 229, 233, 234, 236, 238, 241, 242, 244, 245, 246, 251, 255, 259, 296, 302, 303], "is_posit": [12, 14, 21, 22, 23, 68, 203, 217], "noth": [12, 13, 28, 48, 59, 68, 95, 134, 175, 191, 213, 217, 225, 226, 238, 242, 244, 255, 257, 265, 267, 294], "didn": [12, 95, 104, 155], "unexpect": [12, 68, 257], "side": [12, 15, 19, 21, 30, 32, 35, 49, 59, 60, 68, 80, 84, 95, 104, 108, 114, 116, 124, 134, 139, 140, 155, 159, 179, 180, 196, 200, 201, 211, 213, 219, 221, 224, 226, 243, 245, 246, 250, 257, 259, 280, 292], "broke": 12, "revisit": [12, 149, 209], "particularli": [12, 21, 72, 95, 216, 217, 236, 302, 303], "squar": [12, 15, 21, 28, 31, 32, 37, 41, 45, 49, 59, 68, 69, 74, 84, 85, 93, 95, 99, 100, 104, 107, 108, 110, 111, 114, 116, 124, 126, 153, 154, 177, 193, 201, 211, 215, 217, 219, 221, 222, 223, 226, 234, 238, 239, 242, 245, 246, 296], "root": [12, 15, 21, 23, 29, 32, 37, 41, 47, 49, 67, 68, 69, 74, 76, 90, 91, 92, 93, 95, 97, 100, 104, 108, 110, 158, 196, 211, 213, 214, 217, 221, 223, 225, 226, 236, 238, 242, 244, 245, 246, 257, 261, 264, 296, 298, 301, 303], "radic": [12, 15, 28, 68, 69, 104, 213, 221, 222, 238, 244, 245], "adjust": [12, 139, 229, 233], "simpler": [12, 14, 22, 23, 28, 41, 68, 72, 76, 92, 93, 148, 210, 215, 219, 235, 236, 238, 242, 244, 245, 302], "delet": [12, 52, 97, 99, 104, 223, 267, 302], "rational": 12, "pycodestyl": 12, "pyflak": 12, "pollut": 12, "strip_whitepac": 12, "undefin": [12, 14, 23, 32, 35, 43, 44, 47, 68, 74, 75, 76, 95, 101, 110, 130, 140, 210, 221, 232, 233, 236, 265, 292, 303], "restrict": [12, 14, 21, 23, 30, 49, 57, 68, 69, 76, 104, 116, 117, 191, 195, 213, 216, 221, 223, 241], "cfg": [12, 219, 222], "cosmet": [12, 226], "noqa": [12, 68, 96, 217, 260], "pycqa": 12, "multipledispatch": [12, 13, 42], "dispatch": [12, 14, 43, 44, 45, 68, 69, 186, 226, 245, 261], "funcnam": [12, 258], "arg1": [12, 246], "arg2": [12, 246], "f811": [12, 68], "redefin": [12, 23, 60, 68, 139, 153, 155, 214, 265], "stylist": 12, "reus": [12, 15, 23, 49, 191, 296], "str": [12, 13, 14, 23, 43, 48, 49, 50, 60, 68, 69, 70, 72, 77, 78, 81, 84, 85, 96, 98, 101, 104, 108, 110, 112, 114, 122, 133, 134, 135, 136, 139, 158, 175, 185, 191, 201, 203, 205, 212, 215, 217, 221, 226, 238, 242, 246, 262, 264, 265, 267, 270], "divis": [12, 15, 23, 68, 104, 108, 134, 193, 195, 213, 215, 216, 217, 218, 219, 222, 224, 226, 239, 242, 244, 257, 265, 294, 297, 301], "gotcha": [12, 14, 16, 68, 210, 265, 295, 303], "intent": [12, 21, 49, 67, 68, 110, 215, 259], "xp": 12, "test_symbol": 12, "ever": [12, 13, 14, 23, 74, 210, 213, 222, 236, 242, 259, 262, 297], "pars": [12, 13, 60, 68, 101, 141, 152, 223, 225, 281, 289], "cleaner": [12, 128, 158, 242], "sympifi": [12, 14, 15, 21, 22, 49, 72, 78, 98, 112, 156, 164, 189, 191, 201, 202, 216, 217, 291, 297], "count_op": [12, 15, 68, 235, 238], "truthi": 12, "forget": [12, 31, 48, 302], "coverage_report": 12, "analyz": [12, 238, 251], "littl": [12, 21, 23, 48, 60, 78, 104, 108, 109, 143, 196, 215, 220, 222, 226, 236, 238, 246, 261, 274], "slower": [12, 13, 23, 28, 33, 64, 104, 134, 215, 216, 221, 222, 265, 291], "covhtml": 12, "100": [12, 15, 23, 26, 49, 52, 57, 67, 68, 69, 72, 76, 84, 91, 98, 99, 104, 108, 116, 212, 216, 221, 223, 225, 226, 233, 244, 245, 264, 291], "defens": 12, "gone": 12, "nedbatcheld": 12, "blog": [12, 13, 23, 49, 73, 99, 239, 245], "202008": 12, "you_should_include_your_tests_in_coverag": 12, "stori": [12, 196], "guarante": [12, 18, 21, 28, 34, 49, 59, 60, 68, 80, 93, 95, 104, 139, 215, 216, 219, 221, 222, 242, 244, 245, 262, 267, 298, 302], "condit": [12, 14, 21, 22, 26, 28, 30, 49, 59, 68, 70, 74, 76, 86, 87, 90, 91, 92, 95, 98, 104, 108, 110, 116, 117, 120, 124, 131, 135, 143, 151, 155, 158, 160, 205, 211, 223, 226, 229, 236, 239, 241, 242, 244, 245, 246, 251, 302], "200710": 12, "flaws_in_coverage_measur": 12, "test_hypothesi": 12, "strategi": [12, 50, 68, 95, 219, 220, 233, 236, 238, 243], "mod": [12, 13, 69, 73, 74, 98, 104, 105, 108, 187, 213, 215, 216, 217, 219, 221, 222, 226, 228, 236, 239], "test_modular": 12, "regex": 13, "categori": [13, 213, 281, 288], "lead": [13, 14, 21, 22, 23, 28, 37, 67, 68, 74, 78, 95, 98, 104, 108, 126, 135, 175, 201, 210, 214, 215, 217, 219, 221, 222, 223, 226, 233, 235, 238, 242, 245, 259, 262, 267, 295, 302], "w": [13, 15, 26, 37, 41, 49, 52, 58, 60, 67, 68, 69, 70, 71, 74, 76, 93, 95, 98, 104, 105, 133, 136, 139, 149, 157, 160, 165, 176, 180, 189, 200, 205, 207, 208, 211, 212, 214, 215, 219, 220, 221, 222, 223, 227, 233, 234, 236, 238, 239, 242, 243, 245, 246, 257, 265, 267, 277, 303], "pythonwarn": 13, "NOT": [13, 26, 98, 124, 171, 175, 190, 193, 255, 258], "ned": 13, "batcheld": 13, "unrecogn": [13, 104], "retri": [13, 95, 108], "sympif": [13, 40, 68], "tri": [13, 14, 15, 21, 30, 32, 35, 48, 68, 76, 84, 93, 95, 143, 155, 186, 213, 214, 221, 226, 228, 238, 242, 243, 245, 257, 294, 302], "behaviour": [13, 21, 93, 98, 130, 216, 219, 223, 229, 232], "problemat": [13, 23, 216], "18056": 13, "15416": 13, "100x": 13, "slowdown": [13, 72], "significantli": [13, 33, 49, 72, 128, 153, 217, 228, 258, 261], "_sympifi": [13, 68, 101, 297], "strict": [13, 14, 28, 59, 60, 68, 72, 73, 99, 104, 110, 139, 219, 222, 244, 245, 264, 267, 302], "whatev": [13, 15, 23, 59, 68, 69, 238, 242, 243, 245, 265], "__repr__": [13, 226], "12524": 13, "repr": [13, 49, 95, 185, 216, 221, 226, 257, 301], "plenti": 13, "subclass": [13, 14, 21, 23, 43, 44, 49, 68, 75, 79, 81, 95, 98, 110, 111, 114, 129, 137, 139, 140, 160, 166, 175, 179, 180, 181, 186, 188, 189, 195, 212, 213, 215, 216, 217, 221, 222, 226, 246, 257, 258, 259, 262, 265, 270, 274, 297], "_sympy_": [13, 68], "zz": [13, 68, 73, 90, 91, 95, 101, 104, 105, 108, 136, 201, 210, 213, 214, 215, 216, 219, 221, 222, 223, 224, 241], "dmp_python": [13, 213, 216, 217], "represent": [13, 14, 23, 28, 32, 41, 48, 49, 50, 51, 59, 62, 68, 69, 74, 76, 80, 88, 90, 92, 93, 95, 97, 98, 99, 100, 101, 107, 108, 121, 122, 127, 128, 130, 139, 151, 155, 160, 175, 180, 185, 186, 188, 189, 191, 193, 200, 206, 207, 209, 212, 213, 215, 217, 219, 221, 222, 223, 224, 225, 226, 228, 236, 238, 239, 242, 245, 246, 251, 252, 265, 267, 270, 273, 280, 288, 292, 294, 297], "dup_flint": [13, 217], "flint": [13, 215, 216, 217], "analog": [13, 23, 28, 33, 61, 67, 69, 73, 156, 209, 210, 213, 214, 215, 219, 231, 247, 264], "to_list": [13, 68, 215, 217], "pkdata": 13, "unsuit": [13, 211], "downstream": [13, 21], "stdlib": [13, 257], "importlib": 13, "abil": [13, 15, 21, 47, 104, 151, 221, 225, 242, 245, 296, 302], "favor": 13, "lh": [13, 17, 30, 35, 49, 58, 68, 111, 114, 224, 226, 242, 244, 245, 276], "rh": [13, 17, 30, 33, 35, 49, 58, 60, 68, 99, 100, 104, 111, 114, 133, 134, 139, 141, 148, 149, 150, 215, 224, 226, 228, 242, 244, 245, 276], "deem": [13, 235], "apparatu": 13, "node": [13, 14, 47, 62, 68, 95, 110, 120, 131, 167, 192, 201, 211, 216, 226, 233, 245, 250, 261, 265, 297, 301], "boolean": [13, 14, 23, 24, 30, 35, 42, 43, 44, 45, 46, 47, 49, 68, 74, 78, 82, 83, 84, 85, 96, 99, 104, 105, 108, 116, 122, 124, 134, 139, 176, 201, 203, 206, 212, 215, 217, 219, 221, 223, 226, 238, 242, 244, 246, 264, 273, 298], "matplotlibbackend": [13, 212], "homonym": 13, "linestyl": 13, "xy": [13, 23, 47, 48, 82, 104, 110, 136, 201, 210, 212, 213, 219, 226, 238, 245, 280, 297, 302], "y1": [13, 35, 68, 158], "width": [13, 48, 49, 96, 206, 212, 222, 226, 257], "height": [13, 48, 49, 84, 101, 160, 212, 213, 226, 233, 280], "motiv": [13, 16, 23, 38, 222], "horizont": [13, 23, 37, 48, 78, 81, 83, 99, 118, 120, 139, 163, 212, 215, 226], "vertic": [13, 48, 52, 61, 62, 78, 79, 81, 83, 84, 85, 95, 97, 99, 104, 116, 117, 118, 120, 139, 146, 163, 171, 211, 212, 215, 221, 226, 234, 264, 280], "bar": [13, 49, 76, 142, 151, 180, 186, 267, 287], "reinvent": 13, "wheel": [13, 143], "facilit": [13, 109, 115, 151, 162, 208, 257], "retriev": [13, 18, 51, 66, 99, 104, 139, 222, 238, 252], "ax": [13, 28, 29, 31, 33, 41, 69, 72, 78, 81, 93, 100, 104, 116, 122, 133, 134, 140, 163, 188, 201, 210, 211, 212, 215, 223, 239, 242, 245, 247, 248, 251, 270, 272, 274, 277, 279, 302], "fig": 13, "_backend": 13, "axhlin": 13, "inertia": [13, 116, 117, 127, 128, 130, 132, 139, 141, 143, 144, 146, 148, 149, 150, 151, 158, 200, 201, 209, 210, 221, 287], "circular": [13, 15, 21, 116, 122, 140, 163, 219], "pariti": [13, 21, 60, 68, 222], "inertia_of_point_mass": [13, 136], "graviti": [13, 139, 141, 145, 146, 148, 150, 158, 207, 279], "gf": [13, 60, 69, 120, 213, 215, 216, 219, 221], "modulo": [13, 68, 69, 73, 105, 108, 187, 213, 215, 216, 217, 219, 221, 222, 223, 225, 226, 229, 238], "achiev": [13, 14, 15, 23, 68, 72, 76, 101, 108, 141, 158, 225, 233, 236, 238, 245, 248, 260, 275], "symmetr": [13, 33, 45, 46, 50, 51, 56, 59, 60, 64, 84, 99, 100, 101, 104, 108, 156, 211, 217, 219, 222, 225, 234, 236, 252, 264], "ku": [13, 153, 226], "behav": [13, 15, 45, 47, 68, 69, 74, 76, 108, 222, 234, 238, 244, 247, 253, 298], "hasattr": [13, 238, 260], "nmod": 13, "notion": [13, 21, 48, 196, 199, 213, 245, 274, 279], "__init_subclass__": [13, 21], "kanesmethod": [13, 129, 133, 134, 137, 139, 141, 143, 144, 145, 146, 148, 149, 152, 153, 155, 158], "pinjoint": [13, 129, 133, 139, 144, 146, 152], "prismaticjoint": [13, 133, 139, 146, 152], "q_": [13, 68, 133, 206, 239, 242], "u_": [13, 104, 133], "had": [13, 23, 32, 33, 60, 68, 69, 104, 108, 141, 155, 221, 222, 223, 226, 234, 236, 242, 244, 245, 260, 265, 291, 294, 297, 298], "axi": [13, 35, 41, 61, 73, 74, 78, 79, 81, 82, 84, 90, 93, 95, 101, 104, 116, 120, 122, 127, 129, 133, 137, 139, 140, 141, 143, 145, 148, 149, 150, 152, 155, 158, 159, 160, 163, 164, 188, 201, 203, 205, 207, 209, 210, 212, 217, 245, 270, 272, 275, 277, 280], "parent_axi": [13, 133], "child_axi": [13, 133], "parent": [13, 59, 68, 91, 129, 133, 139, 152, 201, 205, 216, 217, 221, 257, 261, 270, 274, 275], "child": [13, 14, 114, 129, 133, 139, 152, 201, 216, 261], "parent_interfram": [13, 133, 152], "child_interfram": [13, 133, 139, 152], "rotat": [13, 41, 56, 59, 61, 68, 77, 78, 79, 81, 83, 84, 99, 116, 117, 133, 137, 139, 140, 143, 146, 148, 150, 152, 156, 159, 175, 188, 201, 205, 207, 209, 210, 211, 212, 264, 270, 272, 275, 277, 279], "joint_axi": [13, 129, 133, 139, 144, 146, 152], "transform": [13, 14, 37, 41, 46, 49, 64, 67, 68, 69, 70, 72, 73, 76, 83, 101, 104, 122, 124, 133, 143, 152, 163, 184, 186, 188, 193, 211, 214, 215, 217, 219, 221, 222, 228, 233, 234, 235, 238, 239, 241, 242, 243, 244, 245, 246, 248, 251, 259, 265, 270, 277, 296], "pin": [13, 41, 116, 117, 120, 129, 133, 139], "dcm": [13, 130, 133, 141, 143, 158, 201, 209, 210, 270], "q_pin": [13, 139], "theta_pin": 13, "rad": [13, 69, 122, 141, 221], "int_fram": 13, "orient_axi": [13, 130, 133, 201, 203], "align": [13, 49, 78, 104, 133, 140, 210, 211, 226, 244, 257], "orient": [13, 41, 80, 84, 99, 133, 137, 141, 143, 145, 148, 152, 156, 158, 201, 205, 207, 209, 210, 219, 264, 270, 271, 278, 279, 285], "parent_joint_po": [13, 133], "child_joint_po": [13, 133], "parent_point": [13, 133, 144, 146, 152], "child_point": [13, 133, 139, 144, 146, 152], "mass": [13, 26, 85, 126, 127, 128, 130, 133, 134, 136, 139, 141, 143, 144, 145, 146, 148, 150, 151, 152, 153, 154, 158, 159, 167, 192, 194, 195, 196, 207, 209, 257, 279, 287], "pos_from": [13, 129, 133, 136, 137, 139, 140, 141, 143, 144, 145, 152, 158, 205, 209], "masscent": [13, 130, 133, 136, 139, 144, 152, 156, 158], "parent_fram": [13, 152], "child_fram": [13, 152], "locatenew": [13, 130, 136, 143, 145, 148, 149, 150, 155, 156, 158, 159, 202, 205, 207, 209], "conflict": [13, 74, 108, 124, 141, 259], "comprehens": [13, 21, 26, 32, 33, 35, 220, 234, 246, 291], "additional_transl": 13, "recogn": [13, 15, 28, 33, 35, 68, 69, 73, 83, 108, 116, 125, 214, 217, 225, 234, 235, 244, 251, 294], "maximum": [13, 15, 32, 33, 47, 49, 50, 59, 60, 68, 74, 95, 104, 108, 112, 114, 116, 143, 188, 196, 212, 217, 219, 222, 226, 233, 234, 238, 239, 242, 244, 245, 246, 261, 264], "multipli": [13, 15, 33, 41, 45, 49, 59, 68, 79, 83, 90, 97, 99, 104, 108, 129, 134, 135, 145, 154, 155, 168, 177, 191, 196, 197, 200, 213, 214, 215, 217, 219, 221, 222, 226, 228, 235, 236, 239, 242, 247, 264, 274, 294, 297], "max": [13, 49, 59, 60, 68, 74, 76, 78, 104, 108, 110, 114, 116, 211, 212, 221, 222, 226, 233, 235, 236, 265], "min": [13, 60, 64, 68, 73, 74, 104, 110, 211, 212, 221, 226, 232, 242, 264], "is_perfect_squar": 13, "ntheori": [13, 45, 59, 68, 69, 219, 222, 239, 264], "primetest": [13, 68, 108], "is_squar": [13, 68, 99, 108, 215, 217], "is_prim": [13, 21, 68, 213], "isprim": [13, 45, 69, 108], "divid": [13, 14, 59, 67, 68, 69, 84, 104, 108, 134, 135, 195, 196, 214, 215, 216, 217, 219, 221, 222, 226, 242, 261, 297], "bottom_up": [13, 68], "interactive_travers": 13, "postorder_travers": [13, 68, 297], "preorder_travers": [13, 68, 297], "refactor": [13, 242, 250, 261], "tr": [13, 50, 59, 226, 235], "quantum": [13, 27, 126, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 211, 287], "default_sort_kei": [13, 48, 57, 68, 250], "matrixel": [13, 49], "matrixsymbol": [13, 18, 21, 33, 45, 46, 49, 68, 99, 101, 104, 226, 246, 248], "layer": [13, 124, 219, 265], "imprecis": 13, "free_symbol": [13, 14, 31, 49, 68, 77, 95, 99, 180, 198, 201, 222, 232, 239], "atomicexpr": [13, 68], "concept": [13, 14, 21, 59, 143, 210, 216, 218, 221, 226, 245, 250, 279, 295, 300], "misappli": 13, "introduc": [13, 22, 31, 64, 67, 68, 76, 93, 104, 109, 111, 114, 117, 141, 143, 148, 149, 150, 154, 191, 196, 210, 217, 218, 222, 223, 226, 233, 236, 239, 246, 262, 288, 295, 298, 300, 302], "21494": 13, "size": [13, 19, 33, 49, 50, 52, 57, 59, 60, 61, 62, 63, 64, 68, 69, 71, 73, 96, 99, 101, 104, 107, 108, 122, 143, 153, 154, 155, 164, 186, 187, 206, 212, 215, 219, 226, 238, 239, 242, 246, 264, 292], "die": [13, 221, 246], "histor": [13, 14, 17, 23, 69, 215, 242, 246], "21563": 13, "revert": [13, 217, 222], "sample_it": [13, 246], "domainmatrix": [13, 33, 100, 104, 218, 221, 224, 288], "21402": 13, "earlier": [13, 110, 128, 223, 227, 236, 238, 265, 275, 277, 297], "unsupport": [13, 15, 18, 124, 216, 217, 221, 226], "operand": [13, 15, 60, 68, 202, 216, 217, 221, 273], "dict": [13, 15, 17, 21, 28, 31, 32, 36, 37, 49, 51, 60, 68, 69, 70, 84, 85, 98, 99, 104, 108, 110, 112, 134, 135, 171, 183, 186, 197, 199, 201, 212, 215, 216, 217, 219, 221, 222, 223, 224, 226, 238, 239, 242, 243, 244, 245, 246, 250, 257, 258, 264, 270, 303], "smith_normal_form": [13, 105, 215], "newmatrix": 13, "holonom": [13, 89, 92, 134, 139, 142, 143, 144, 145, 151, 153, 154, 281, 287, 288], "polymatrix": 13, "risch": [13, 95, 292], "20780": 13, "20759": 13, "20621": 13, "19882": 13, "18844": 13, "21441": 13, "21427": 13, "21496": 13, "potenti": [13, 21, 80, 101, 104, 108, 111, 134, 136, 139, 150, 151, 202, 208, 215, 216, 217, 221, 226, 233, 236, 238, 242, 260, 261, 273, 279, 287], "impact": 13, "goal": [13, 14, 48, 128, 159, 221, 223, 257, 258, 260, 295, 296], "tableform": [13, 244, 267], "usecas": 13, "line2dbaseseri": [13, 212], "linecollect": [13, 212], "bokeh": 13, "plotli": 13, "mayavi": 13, "k3d": 13, "get_point": [13, 212], "uniformli": [13, 19, 59, 84, 85, 108, 116, 118, 122, 212, 260], "adapt": [13, 122, 212, 232, 244, 264, 269], "get_data": [13, 212], "dft": [13, 71, 127], "fourier": [13, 68, 76, 95, 127, 184, 230, 282], "as_explicit": [13, 33, 101, 104, 127, 247, 248], "discret": [13, 47, 49, 50, 58, 60, 68, 69, 76, 108, 124, 191, 196, 212, 228, 231, 242, 244, 245, 282, 291], "21626": 13, "expos": [13, 48, 110, 246], "mutat": [13, 124, 215, 217, 246], "flat": [13, 82, 99, 215, 258], "todok": [13, 99], "ey": [13, 33, 68, 99, 100, 101, 102, 103, 104, 106, 215, 221, 247, 267, 298], "converg": [13, 49, 67, 72, 76, 95, 108, 160, 222, 229, 233, 236, 292], "legacy_matrix": [13, 95], "discontinu": [13, 47, 72, 74, 95, 116, 229, 244], "theano_cod": 13, "aesara_cod": [13, 226], "theanoprint": 13, "aesaraprint": [13, 226], "predic": [13, 14, 42, 43, 47, 110, 222, 238, 264, 282], "big": [13, 15, 19, 21, 52, 68, 70, 108, 158, 171, 211, 225, 226, 233, 248, 267, 292, 294], "registr": 13, "add_handl": 13, "remove_handl": [13, 42], "regist": [13, 42, 43, 44, 69, 187], "register_mani": [13, 43, 44], "askprimehandl": 13, "staticmethod": [13, 257], "register_handl": [13, 42], "prime": [13, 21, 35, 42, 43, 44, 45, 59, 66, 67, 68, 69, 71, 73, 76, 108, 162, 213, 214, 215, 216, 217, 219, 222, 236, 238, 239, 246, 261], "Not": [13, 14, 22, 23, 33, 68, 73, 98, 124, 226, 245, 246, 264, 296, 303], "primepred": [13, 45], "q": [13, 14, 15, 18, 21, 29, 31, 40, 41, 42, 43, 44, 45, 46, 49, 60, 64, 67, 68, 69, 76, 85, 90, 91, 93, 95, 97, 99, 104, 110, 114, 116, 118, 124, 125, 129, 133, 134, 135, 137, 139, 140, 141, 143, 145, 150, 152, 153, 154, 155, 158, 159, 160, 171, 185, 191, 194, 201, 202, 203, 205, 206, 207, 209, 212, 213, 214, 216, 217, 219, 221, 222, 223, 225, 226, 228, 236, 239, 242, 244, 246, 251, 252, 267, 270, 273, 274, 276, 279, 298, 302], "20209": 13, "stochast": 13, "timestamp": 13, "wienerprocess": [13, 246], "normaldistribut": [13, 246], "20078": 13, "misspel": 13, "absorbing_prob": [13, 246], "absorb": [13, 14, 93, 242, 246, 292], "probabilit": 13, "shutil": 13, "power": [13, 15, 30, 35, 41, 46, 49, 58, 59, 60, 69, 71, 72, 73, 90, 91, 93, 95, 97, 99, 101, 108, 109, 110, 124, 141, 158, 163, 174, 177, 190, 193, 195, 196, 197, 201, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 225, 226, 227, 230, 233, 235, 238, 239, 242, 244, 245, 246, 250, 259, 264, 282, 291, 292, 293, 294, 295, 297, 298, 301], "immut": [13, 14, 68, 100, 103, 106, 210, 217, 242, 247, 285, 291, 298], "coordsystem": [13, 70], "patch": [13, 70, 226], "manifold": [13, 70], "coord_system": 13, "connect_to": 13, "coord_tuple_transform_to": [13, 70], "constructor": [13, 14, 23, 43, 44, 48, 49, 55, 59, 60, 61, 68, 75, 76, 97, 102, 104, 110, 111, 112, 114, 129, 137, 145, 184, 185, 189, 193, 212, 213, 215, 216, 217, 226, 234, 242, 251, 259, 274, 282, 293, 297], "unord": [13, 15, 68, 108, 217, 245, 264, 265], "lambidfi": 13, "guess": [13, 17, 48, 69, 72, 93, 96, 206, 219, 222, 236, 239, 297], "construct": [13, 19, 26, 30, 41, 43, 44, 48, 49, 51, 68, 70, 74, 76, 78, 82, 84, 96, 101, 104, 109, 112, 114, 117, 124, 128, 129, 130, 134, 136, 137, 139, 141, 143, 176, 180, 189, 190, 193, 197, 213, 215, 216, 217, 219, 221, 222, 226, 239, 244, 246, 247, 251, 259, 261, 262, 274, 276, 277, 294, 297, 298, 302], "superclass": [13, 14, 21, 67, 95, 101, 129, 217], "scalar": [13, 34, 41, 68, 70, 83, 97, 99, 101, 104, 109, 110, 124, 129, 136, 141, 190, 201, 202, 203, 208, 210, 213, 215, 219, 226, 242, 247, 259, 265, 270, 272, 273, 274, 275, 276, 278, 280, 285, 287], "quantiti": [13, 15, 60, 68, 73, 76, 80, 85, 117, 128, 129, 134, 149, 156, 170, 193, 195, 199, 200, 207, 209, 210, 221, 238, 246, 274, 279, 287], "sens": [13, 14, 19, 21, 23, 41, 45, 47, 48, 68, 70, 73, 76, 93, 98, 129, 134, 137, 140, 143, 196, 201, 210, 213, 219, 221, 235, 236, 238, 245, 246, 258, 259, 264, 279, 302], "exponenti": [13, 15, 21, 35, 41, 49, 59, 64, 68, 69, 73, 95, 98, 99, 104, 108, 110, 177, 193, 223, 238, 242, 245, 246, 293, 294, 298], "treat": [13, 14, 21, 22, 23, 31, 35, 36, 41, 58, 59, 66, 68, 73, 76, 83, 84, 104, 110, 114, 141, 164, 201, 207, 214, 216, 217, 219, 221, 222, 223, 225, 226, 233, 234, 236, 238, 239, 242, 244, 250, 258, 261, 277, 294, 298], "cdot": [13, 21, 26, 50, 67, 73, 76, 86, 90, 91, 93, 99, 101, 104, 108, 110, 125, 127, 140, 156, 196, 200, 207, 209, 210, 211, 213, 214, 222, 229, 233, 236, 242, 244, 247, 248, 264, 276, 277, 296, 297, 302], "attributeerror": [13, 21, 68, 104, 245], "as_coeff_mul": [13, 68, 93, 101], "benchmark": [13, 143, 157], "tmpfile": 13, "random_complex_numb": [13, 68], "verify_numer": [13, 68], "test_derivative_numer": [13, 68], "_randrang": [13, 68, 69], "_randint": [13, 68, 219], "as_poli": [13, 68, 214, 222], "as_expr": [13, 68, 104, 215, 216, 221, 222, 223, 298], "combintor": 13, "perm_cycl": [13, 60, 226], "init_print": [13, 28, 33, 39, 49, 60, 72, 95, 96, 104, 117, 206, 213, 214, 225, 292, 296, 298, 301, 302, 303], "tensexpr": [13, 125, 252], "substitute_indic": 13, "danger": [13, 214], "tensor_head": [13, 125, 252], "shorter": [13, 37, 68, 78, 128, 153, 200, 213, 217, 226, 259, 267], "creation": [13, 15, 23, 68, 70, 104, 115, 130, 136, 148, 151, 152, 153, 154, 155, 165, 175, 179, 180, 181, 191, 209, 210, 226, 246, 251, 259, 265], "_dummy_fmt": 13, "l_": [13, 95, 104, 211], "obsolet": 13, "dummy_nam": [13, 252], "metric_symmetri": [13, 252], "set_metr": [13, 252], "delta": [13, 15, 49, 52, 62, 73, 91, 93, 97, 122, 155, 163, 191, 211, 215, 226, 233, 239, 242, 246, 247, 252], "epsilon": [13, 15, 67, 69, 76, 93, 95, 162, 226, 252], "latter": [13, 18, 23, 49, 59, 68, 73, 76, 93, 108, 116, 213, 217, 221, 226, 236, 239, 252, 259, 264, 265, 294], "obscur": [13, 21], "young": [13, 116, 252], "tableau": 13, "tensorindex": [13, 252], "tensor_indic": [13, 125, 252], "denot": [13, 14, 15, 19, 59, 60, 68, 70, 76, 90, 91, 93, 95, 97, 98, 99, 104, 108, 110, 120, 124, 129, 140, 196, 201, 207, 212, 213, 214, 219, 221, 229, 233, 234, 236, 242, 246, 251, 252, 270, 272, 274, 275, 277, 279], "emptyset": [13, 21, 32, 47, 48, 98, 226, 234, 245, 270, 303], "is_empti": [13, 21, 60], "unknown": [13, 14, 18, 21, 22, 23, 26, 33, 35, 36, 41, 68, 69, 117, 176, 215, 224, 241, 242, 243, 244, 245, 264, 303], "empti": [13, 14, 21, 28, 31, 32, 36, 43, 47, 48, 49, 50, 59, 63, 67, 68, 80, 83, 84, 85, 98, 99, 104, 108, 111, 114, 134, 135, 155, 186, 199, 217, 221, 222, 226, 232, 233, 234, 236, 242, 244, 245, 257, 259, 264, 267, 297], "denest": [13, 68, 222, 238, 244, 264], "particl": [13, 130, 133, 134, 136, 139, 141, 145, 146, 151, 153, 155, 158, 159, 167, 170, 177, 178, 189, 191, 194, 196, 209, 252, 287], "rigidbodi": [13, 129, 130, 133, 134, 136, 139, 143, 148, 149, 150, 156, 158], "potential_energi": [13, 133, 134, 136, 139, 150, 156], "energi": [13, 27, 126, 130, 134, 136, 141, 150, 167, 192, 196, 207, 252, 277, 287], "setter": [13, 141, 158], "getter": [13, 68, 141, 158], "set_": 13, "set_condit": 13, "17749": 13, "unpack": [13, 68, 99, 104, 264, 265], "emul": [13, 238, 245, 247, 265], "is_deriv": [13, 68], "as_finite_differ": [13, 47, 68, 292], "17881": 13, "get_matrix": [13, 252], "__getitem__": [13, 68, 99, 215, 251], "__iter__": [13, 60, 68, 238], "_components_data_full_destroi": 13, "__pow__": [13, 99, 217, 223], "flaw": 13, "replace_with_arrai": [13, 252, 253], "throughout": [14, 93, 98, 215, 219, 229, 245, 279, 294], "elsewher": [14, 21, 73, 97, 215, 257], "termnam": 14, "antideriv": [14, 74, 76, 95, 242, 292], "frac": [14, 19, 21, 23, 26, 28, 29, 33, 35, 47, 67, 68, 69, 70, 73, 74, 76, 93, 95, 104, 108, 110, 111, 112, 114, 124, 145, 156, 194, 206, 207, 209, 210, 211, 215, 217, 219, 222, 226, 228, 229, 233, 236, 239, 242, 243, 245, 246, 247, 264, 277, 279, 292, 296, 297, 301, 302], "primit": [14, 59, 68, 69, 76, 108, 185, 189, 213, 214, 215, 216, 217, 219, 221, 222, 225, 226, 239, 292], "terminologi": [14, 29, 252], "tupl": [14, 23, 31, 34, 35, 36, 41, 43, 44, 47, 48, 49, 50, 59, 60, 67, 68, 69, 70, 74, 75, 76, 77, 78, 79, 81, 83, 84, 85, 90, 93, 95, 99, 104, 107, 108, 110, 116, 117, 118, 120, 122, 129, 130, 133, 134, 136, 137, 139, 153, 154, 156, 158, 160, 175, 176, 177, 180, 185, 188, 189, 190, 191, 201, 205, 210, 212, 213, 215, 216, 217, 219, 223, 224, 226, 227, 228, 232, 234, 238, 239, 242, 243, 244, 245, 246, 247, 251, 252, 257, 258, 259, 260, 264, 265, 267, 270, 274, 292, 297, 298, 301], "subexpress": [14, 23, 49, 68, 74, 99, 128, 131, 221, 222, 226, 233, 238, 245, 259, 265, 291], "togeth": [14, 19, 49, 59, 68, 72, 97, 104, 108, 112, 116, 129, 151, 177, 188, 196, 210, 213, 217, 219, 221, 222, 225, 226, 238, 242, 244, 246, 257, 258, 264, 296, 302], "walk": [14, 49, 52, 68, 183, 186, 236], "extract": [14, 28, 32, 36, 37, 47, 68, 95, 99, 101, 104, 108, 125, 129, 143, 151, 156, 210, 215, 219, 221, 222, 244, 245, 246, 257, 259, 264], "rebuilt": [14, 297], "atom": [14, 30, 49, 60, 68, 95, 98, 99, 126, 192, 216, 223, 226, 244, 245, 251], "queri": [14, 21, 22, 23, 42, 45, 46, 47, 49, 68, 80, 222, 238, 246], "is_": [14, 23, 68], "recurs": [14, 15, 18, 21, 23, 47, 68, 73, 93, 95, 98, 99, 108, 112, 143, 212, 219, 222, 223, 226, 227, 231, 233, 238, 244, 245, 250, 255, 257, 261, 262, 264, 293, 302], "canonic": [14, 55, 68, 235, 252, 282], "excess": 14, "discourag": [14, 21, 68, 238], "expens": [14, 23, 35, 68, 155, 235, 242, 243, 244, 260, 298], "matrix": [14, 18, 19, 21, 26, 29, 34, 36, 41, 49, 57, 60, 68, 69, 70, 76, 83, 93, 95, 97, 99, 100, 102, 103, 106, 107, 109, 110, 111, 114, 124, 125, 127, 130, 133, 134, 135, 136, 139, 141, 143, 144, 145, 146, 148, 149, 150, 152, 153, 154, 156, 158, 159, 160, 163, 164, 166, 174, 175, 180, 185, 186, 188, 190, 191, 193, 196, 201, 210, 211, 213, 215, 219, 221, 224, 226, 227, 234, 236, 238, 239, 242, 244, 245, 247, 248, 250, 251, 252, 253, 258, 259, 264, 265, 267, 270, 272, 273, 275, 279, 285, 293, 296, 297, 302, 303], "bound": [14, 30, 45, 49, 50, 67, 68, 77, 78, 79, 81, 83, 84, 95, 108, 136, 189, 212, 215, 217, 219, 221, 222, 226, 232, 242, 244, 245, 246, 251, 261, 267, 270], "dummi": [14, 49, 64, 67, 68, 74, 93, 95, 104, 141, 158, 186, 191, 212, 216, 217, 221, 222, 223, 232, 233, 234, 236, 238, 242, 245, 250, 252, 255, 259, 264, 265], "unequ": [14, 17, 68, 116, 226], "clash": [14, 40, 68, 104], "_eval_": 14, "_eval_deriv": [14, 23, 68, 76], "overrid": [14, 15, 49, 68, 77, 78, 84, 110, 189, 215, 226, 251, 258, 259, 264, 265], "pre": [14, 41, 48, 49, 68, 211, 212, 227, 235, 238, 244, 245, 257, 275, 279, 297], "shorthand": [14, 15, 21, 23, 68, 98, 185, 221, 234, 255], "reserv": [14, 21, 141, 252, 259, 298], "smaller": [14, 49, 59, 60, 68, 69, 73, 76, 84, 95, 101, 108, 153, 214, 215, 216, 219, 222, 229, 235, 236, 244, 264, 291, 302], "children": [14, 68, 69, 216, 261], "leaf": [14, 216, 226, 235, 297], "strictli": [14, 15, 18, 20, 21, 45, 47, 68, 76, 104, 108, 124, 217, 219, 238, 244, 265], "dag": 14, "rebuild": [14, 23, 68, 222, 297], "colloqui": [14, 29], "hyper": [14, 68, 73, 76, 87, 90, 226, 228, 236, 238, 244, 246, 302], "primepi": [14, 23, 108], "divisor_sigma": [14, 108], "interchang": [14, 64, 67, 93, 115, 242], "mental": 14, "hashabl": [14, 65, 68, 93, 264], "repl": [14, 252], "intermedi": [14, 49, 50, 91, 99, 133, 141, 143, 148, 152, 175, 185, 193, 194, 201, 205, 209, 245, 259, 299], "idiom": [14, 294, 295], "frown": 14, "lowercas": [14, 15, 41, 110, 242, 257, 292], "is_integ": [14, 21, 23, 68, 203, 226, 251], "capit": [14, 67, 69, 124, 242], "wherea": [14, 19, 21, 28, 33, 45, 49, 69, 78, 84, 93, 98, 124, 196, 213, 216, 222, 226, 244, 245, 264, 302], "is_capit": 14, "unneed": 14, "isinst": [14, 18, 21, 23, 49, 68, 99, 101, 124, 216, 217, 226, 227, 238, 247, 250, 259, 297], "ship": [14, 109], "numberkind": [14, 18, 68, 99, 234], "matrixkind": [14, 18, 68, 99, 234], "booleankind": [14, 68], "ring": [14, 28, 71, 91, 104, 105, 209, 214, 215, 219, 221, 222, 223, 224, 225, 226, 264], "classif": [14, 20, 68, 242, 243], "lamda": [14, 101, 226, 234, 246, 298], "\u03bb": [14, 298], "lambdifi": [14, 23, 34, 35, 49, 76, 143, 226, 244, 258, 263, 289, 293], "matrixexpr": [14, 23, 99, 101, 102], "mutabl": [14, 15, 50, 68, 100, 101, 102, 116, 217, 226, 227, 238, 247, 298], "dens": [14, 99, 101, 103, 104, 215, 221, 222, 247, 265, 285, 297], "quit": [14, 19, 23, 76, 104, 108, 143, 209, 212, 223, 225, 236, 244, 264, 279, 294, 297], "rung": [14, 47, 90], "kutta": [14, 90], "loss": [14, 49, 93, 191, 258, 276], "stabil": [14, 59, 64, 66, 72, 124, 155, 250], "focus": [14, 34, 219, 239, 241, 242, 244, 245, 303], "is_numb": [14, 21, 68, 76, 95], "infin": [14, 21, 30, 45, 67, 68, 73, 74, 76, 81, 93, 95, 104, 164, 217, 219, 222, 226, 231, 232, 233, 234, 238, 241, 242, 246], "resembl": [14, 70, 76, 95, 251], "zoo": [14, 17, 21, 45, 68, 73, 74, 76, 95, 233, 235, 238], "data": [14, 19, 49, 59, 68, 69, 76, 95, 104, 109, 110, 112, 122, 134, 170, 212, 213, 215, 216, 217, 219, 222, 223, 226, 238, 251, 252, 257, 259, 261, 264], "effici": [14, 19, 21, 28, 33, 41, 47, 49, 52, 59, 64, 68, 71, 72, 73, 84, 85, 101, 104, 108, 109, 124, 133, 134, 158, 211, 214, 215, 216, 217, 219, 222, 223, 224, 225, 238, 239, 244, 258, 265, 291, 297, 298, 302], "inequ": [14, 21, 22, 23, 29, 68, 212, 219, 234, 236, 240, 282], "neq": [14, 23, 68, 74, 76, 93, 95, 99, 108, 196, 210, 211, 219, 222, 239, 242, 244, 302], "ne": [14, 17, 21, 68, 69, 73, 74, 81, 93, 104, 108, 110, 214, 216, 219, 236, 242, 246], "hold": [14, 15, 23, 44, 48, 59, 64, 68, 69, 70, 74, 76, 90, 93, 104, 107, 110, 124, 126, 133, 135, 136, 156, 187, 222, 236, 238, 242, 246, 259, 302], "singleton": [14, 60, 98, 245, 297], "adject": [14, 246], "heurist": [14, 21, 35, 60, 93, 95, 99, 219, 220, 233, 235, 238, 244, 245, 257, 292, 302], "commut": [14, 21, 41, 45, 48, 59, 60, 64, 68, 70, 91, 95, 104, 168, 175, 178, 179, 180, 190, 191, 196, 203, 210, 214, 215, 217, 218, 219, 220, 222, 226, 233, 234, 236, 242, 252, 287, 288, 297], "law": [14, 48, 151, 194, 210, 214, 246], "xreplac": [14, 68, 99, 104, 201], "knowledg": [14, 67, 68, 69, 221, 242, 297, 300], "round": [14, 23, 34, 47, 49, 68, 72, 73, 74, 104, 164, 215, 217, 221, 222, 233, 235, 246], "analyt": [14, 39, 73, 76, 93, 104, 112, 137, 151, 242, 292], "implicitli": [14, 21, 22, 23, 60, 68, 95, 213, 216, 244], "independ": [14, 15, 23, 33, 45, 47, 49, 59, 67, 68, 70, 76, 85, 93, 95, 97, 104, 124, 134, 135, 139, 141, 143, 145, 153, 155, 189, 196, 207, 212, 214, 216, 221, 222, 228, 229, 236, 238, 239, 242, 243, 244, 245, 246, 252, 257, 258, 277, 296, 297], "parsabl": 14, "iter": [14, 28, 31, 32, 33, 37, 47, 49, 57, 59, 60, 63, 64, 68, 69, 70, 71, 73, 76, 84, 98, 108, 130, 131, 133, 134, 135, 136, 139, 155, 159, 176, 191, 205, 212, 213, 214, 215, 217, 219, 222, 226, 227, 228, 229, 232, 238, 239, 242, 244, 245, 246, 247, 250, 258, 259, 260, 261, 263, 265, 270, 275, 289], "fuzzi": [14, 21, 23, 24], "noncomput": 14, "philosoph": 14, "OR": [14, 47, 71, 98, 219], "unevaluatedexpr": [14, 68, 226, 297], "surpris": [14, 21, 245], "north": 14, "riemann": [14, 70, 73, 74, 93, 213, 238, 252], "sphere": [14, 140, 163, 270, 280], "mapl": [15, 95, 215, 242, 296], "introductori": [15, 19, 38, 39, 158, 216, 217, 222], "remaind": [15, 67, 68, 69, 108, 214, 216, 217, 220, 222, 242], "offici": [15, 25, 39, 68, 128, 158, 200, 210, 245, 265, 300], "java": 15, "subtract": [15, 32, 41, 49, 60, 68, 72, 83, 108, 124, 133, 193, 214, 215, 216, 217, 219, 221, 222, 297, 302], "proper": [15, 59, 68, 95, 108, 128, 141, 200, 216, 217, 221, 226, 234, 242, 247, 258, 259, 277, 298], "glossari": [15, 16], "alter": [15, 50, 59, 68, 201, 216, 226, 228, 245], "afterward": [15, 49, 68, 136, 145], "simultan": [15, 68, 74, 81, 99, 108, 115, 212, 235], "var": [15, 26, 31, 47, 49, 67, 68, 72, 73, 91, 95, 98, 104, 124, 201, 212, 221, 225, 226, 238, 239, 265, 303], "rate": [15, 111, 112, 129, 143, 209, 246, 277, 292], "short_lif": 15, "haven": 15, "160": [15, 116, 220], "ctimesd": 15, "relationship": [15, 17, 21, 49, 68, 73, 75, 95, 108, 114, 139, 152, 175, 201, 207, 210, 216, 244], "runtimeerror": [15, 47, 49, 234, 245, 264], "compileflag": [15, 257], "glob": [15, 257], "exceed": [15, 143, 221], "stdin": [15, 260, 262], "nameerror": [15, 96, 260, 294], "__future__": [15, 19, 294, 301], "cl": [15, 21, 23, 35, 49, 59, 68, 95, 99, 114, 191, 205, 217, 221, 242, 251, 260, 264, 276, 292, 301, 303], "dir": [15, 68, 116, 228, 233, 264], "__builtins__": 15, "__file__": 15, "__name__": [15, 226], "__package__": 15, "_greek": 15, "_latin": 15, "chi": [15, 76, 93, 163, 226, 236, 242, 246, 252], "eta": [15, 76, 93, 221, 226, 242, 243, 246], "iota": [15, 226], "kappa": [15, 211, 226, 246], "mu": [15, 76, 93, 108, 125, 127, 162, 226, 246, 252], "omega": [15, 49, 50, 59, 93, 104, 108, 124, 130, 136, 139, 156, 159, 165, 167, 192, 201, 205, 206, 209, 211, 226, 233, 246], "omicron": [15, 226], "phi": [15, 59, 68, 69, 73, 76, 93, 97, 104, 108, 126, 158, 165, 174, 176, 211, 213, 221, 226, 242, 270, 280], "psi": [15, 73, 76, 93, 163, 174, 175, 181, 189, 221, 226, 252], "rho": [15, 70, 93, 104, 108, 144, 185, 226, 246, 252, 280], "sigma": [15, 60, 91, 93, 99, 104, 226, 229, 246], "tau": [15, 49, 93, 95, 104, 221, 226, 242], "theta": [15, 41, 68, 70, 74, 76, 93, 96, 104, 110, 126, 139, 159, 163, 201, 210, 211, 217, 221, 226, 229, 234, 245, 246, 270, 272, 275, 277, 280], "upsilon": [15, 226], "xi": [15, 23, 70, 93, 226, 242, 243, 244], "lastli": [15, 95, 117, 159, 242], "unit": [15, 23, 26, 27, 41, 45, 48, 68, 69, 73, 81, 82, 83, 95, 104, 108, 112, 116, 118, 122, 124, 126, 127, 129, 133, 137, 139, 140, 141, 156, 158, 167, 192, 193, 194, 198, 200, 201, 207, 210, 212, 214, 215, 217, 219, 221, 222, 224, 226, 234, 236, 239, 245, 247, 270, 272, 274, 279, 280, 287], "mnemon": [15, 235, 264], "osineq": 15, "reimport": 15, "restor": [15, 216, 238], "__": [15, 76, 95, 226, 246, 251], "press": [15, 48, 50, 52, 60, 69, 95, 99, 211, 220, 239, 244], "autocomplet": 15, "lose": [15, 213, 215], "f1": [15, 34, 59, 93, 95, 104, 124, 130, 141, 149, 158, 212, 217, 219, 222, 226, 228, 244], "f2": [15, 34, 68, 93, 104, 124, 130, 141, 149, 158, 194, 212, 219, 222, 226, 228, 244], "accuraci": [15, 19, 47, 68, 215, 222, 298], "2000000000000002": 15, "py3k": 15, "20000000000000": 15, "sympyifi": 15, "worri": [15, 68, 297], "142857142857143": 15, "receiv": [15, 37, 51, 68, 69, 108, 130, 186, 221, 251], "fraction": [15, 68, 69, 72, 74, 84, 95, 104, 108, 110, 131, 197, 215, 216, 217, 219, 220, 223, 226, 228, 238, 239, 242, 244, 293], "interpret": [15, 22, 35, 37, 49, 59, 67, 68, 73, 74, 76, 81, 84, 95, 99, 101, 104, 108, 110, 128, 196, 212, 214, 221, 222, 226, 233, 239, 244, 245, 246, 251, 257, 258, 261, 267, 298], "000000000000": 15, "00": [15, 68, 108, 175, 185, 239, 264], "null": [15, 68, 104], "34": [15, 49, 60, 73, 81, 104, 108, 130, 173, 220, 225, 232, 238, 239], "3400000000000": 15, "250": [15, 108, 239], "143": [15, 135, 170, 211], "decim": [15, 23, 49, 68, 71, 72, 108, 110, 122, 216, 222, 296], "142857": 15, "25000000000000000000": 15, "14285278320312500000": 15, "realiz": [15, 51, 53, 59, 70, 98, 108, 145, 213, 214, 219, 246], "pad": [15, 49, 69, 70, 71, 83, 108], "inexact": [15, 37, 68, 215, 217], "low": [15, 21, 22, 49, 68, 69, 76, 108, 134, 216, 219, 224, 226, 238, 258, 259, 264], "higher": [15, 19, 28, 47, 49, 68, 70, 72, 76, 79, 104, 110, 205, 211, 213, 215, 216, 219, 222, 228, 229, 233, 235, 238, 242, 244, 247, 265, 292], "engin": [15, 111, 112, 114, 118, 120, 157, 158, 208, 242, 301], "increas": [15, 33, 47, 48, 60, 66, 67, 68, 71, 72, 76, 99, 108, 109, 128, 139, 142, 175, 200, 201, 203, 209, 210, 216, 219, 221, 222, 228, 231, 235, 242, 246, 262, 264], "2000061035": 15, "highest": [15, 49, 62, 97, 128, 213, 222, 229, 239, 242], "hopefulli": [15, 20, 93], "unsimplifi": [15, 235], "12345678901234567890": 15, "big_trig_ident": 15, "ab": [15, 46, 49, 50, 67, 68, 69, 72, 73, 74, 76, 80, 81, 91, 93, 98, 99, 104, 110, 114, 120, 126, 158, 191, 214, 217, 221, 222, 226, 239, 241, 244, 245, 246, 248, 252, 261, 264, 267, 276, 302], "1000": [15, 49, 52, 68, 69, 72, 101, 108, 158, 195, 196, 197, 198, 211, 225, 226, 235, 265], "gave": [15, 68, 264], "impress": 15, "91": [15, 50, 220, 225, 232, 246], "4e": [15, 49, 244], "nearli": [15, 108, 235], "snippet": [15, 49], "expr_modifi": 15, "__main__": [15, 49, 298], "declar": [15, 21, 32, 49, 81, 93, 104, 110, 125, 141, 143, 158, 170, 215, 226, 233, 236, 241, 242, 243, 246, 259], "2x": [15, 31, 68, 76, 93, 108, 110, 238, 239, 245, 246, 291, 294, 302], "syntaxerror": [15, 110], "asin": [15, 74, 76, 82, 223, 226, 236, 238, 242, 246, 302], "arcsin": [15, 74, 110, 223, 226, 246], "arcco": [15, 74, 140, 226], "expon": [15, 28, 37, 46, 49, 68, 69, 74, 75, 76, 93, 95, 101, 108, 122, 124, 197, 214, 215, 216, 222, 223, 226, 235, 238, 242, 245, 250, 261, 302], "half": [15, 23, 26, 49, 68, 69, 73, 74, 76, 78, 84, 95, 97, 104, 108, 110, 116, 139, 160, 163, 188, 211, 217, 219, 221, 222, 234, 235, 236, 238, 246, 257, 264], "denomin": [15, 68, 72, 76, 95, 108, 124, 131, 214, 215, 216, 217, 219, 221, 222, 225, 226, 235, 236, 238, 239, 242, 244, 302], "wild": [15, 68, 238, 264], "sq": [15, 239], "is_pow": [15, 49, 68, 74], "is_rat": [15, 21, 221, 264], "bracket": [15, 23, 34, 36, 60, 68, 76, 189, 191, 201, 226], "notat": [15, 19, 28, 32, 35, 37, 56, 60, 61, 67, 68, 69, 73, 76, 93, 101, 104, 110, 124, 135, 189, 200, 201, 206, 210, 213, 226, 233, 238, 245, 251, 252, 264, 277, 292], "curli": [15, 141, 226], "suppli": [15, 34, 35, 47, 48, 49, 59, 60, 68, 70, 78, 82, 104, 108, 129, 130, 133, 134, 135, 136, 143, 145, 148, 153, 154, 156, 164, 191, 205, 210, 212, 221, 223, 228, 235, 242, 258, 264, 265, 270, 272, 275], "kwarg": [15, 43, 44, 45, 49, 59, 60, 67, 68, 69, 70, 74, 76, 78, 79, 81, 82, 83, 84, 85, 90, 93, 95, 99, 100, 101, 102, 104, 106, 107, 108, 112, 122, 124, 131, 134, 136, 139, 145, 160, 169, 171, 175, 176, 180, 182, 184, 185, 187, 188, 189, 201, 205, 206, 212, 215, 217, 222, 226, 228, 232, 233, 234, 238, 242, 243, 244, 246, 247, 248, 252, 257, 258, 260, 264, 267, 275], "powsimp": [15, 68, 74, 235, 238], "deep": [15, 23, 68, 74, 98, 99, 112, 222, 233, 238, 246, 297], "measur": [15, 41, 74, 76, 84, 100, 128, 156, 171, 180, 185, 193, 196, 198, 200, 201, 205, 207, 210, 222, 234, 235, 238, 246, 269, 270, 273, 274, 276, 277, 279], "join": [15, 30, 60, 68, 69, 81, 99, 116, 117, 137, 226, 238, 242, 244, 247, 264], "autoexpand": [15, 238], "violat": [15, 141, 211, 223, 238], "behind": [16, 38, 125, 141, 155, 195, 215, 235, 238, 242, 245, 287, 294], "decis": [16, 38, 68, 74, 95, 235, 244, 259], "opinion": [16, 38], "pitfal": [16, 23, 210, 216, 294, 299, 302], "arbitrarili": [17, 28, 47, 68, 81, 108, 219, 221, 233, 236, 242, 243, 244, 246], "six": [17, 117, 226, 239, 245, 246], "bias": 17, "toward": [17, 49, 68, 76, 129, 213, 233, 245], "unambigu": [17, 226, 242, 267], "univari": [17, 28, 37, 47, 67, 68, 74, 91, 95, 213, 214, 216, 217, 220, 221, 222, 223, 228, 239, 241, 244, 246], "linear": [17, 23, 29, 31, 33, 34, 37, 48, 49, 60, 67, 68, 69, 71, 72, 76, 81, 91, 93, 95, 97, 99, 101, 103, 111, 114, 116, 121, 124, 129, 132, 133, 134, 136, 137, 143, 145, 146, 151, 153, 157, 158, 163, 185, 188, 189, 200, 205, 212, 213, 215, 217, 219, 221, 222, 224, 232, 234, 236, 239, 242, 243, 245, 264, 285, 287, 303], "undetermin": [17, 68, 104, 222, 228, 242, 244], "nonlinear": [17, 29, 35, 37, 67, 158, 222, 242, 244, 245], "sol": [17, 34, 104, 239, 242, 243, 244], "insuffici": [17, 99], "elimin": [17, 19, 33, 49, 64, 68, 98, 100, 104, 128, 215, 217, 224, 225, 227, 229, 238, 242, 244, 245, 252, 259, 298], "nsolv": [17, 28, 34, 36, 37, 158, 244], "z_eq": 17, "zsol": 17, "906425478894557": 17, "sol0": 17, "90642547889456": 17, "reduce_inequ": [17, 30, 241, 244], "classifi": [18, 104, 216, 242, 243, 245, 246], "former": [18, 49, 68, 73, 141, 219, 221, 222, 239, 264], "catch": [18, 68, 242, 257, 298], "naiv": [18, 59, 65, 68, 93, 99, 104, 108, 196, 215, 236, 244, 245, 252], "theori": [18, 23, 50, 51, 57, 58, 59, 60, 66, 68, 69, 73, 76, 97, 105, 134, 141, 155, 157, 170, 188, 191, 201, 205, 215, 219, 220, 221, 225, 239, 261, 270, 288, 296], "is_subset": [18, 234], "odd": [18, 21, 31, 42, 44, 45, 46, 56, 60, 68, 69, 73, 74, 76, 98, 107, 108, 125, 211, 221, 222, 226, 244], "appliedpred": [18, 42, 43, 44], "analysi": [19, 49, 50, 59, 68, 69, 74, 121, 143, 155, 156, 159, 213, 222, 236, 239, 246], "vari": [19, 47, 49, 68, 82, 84, 111, 114, 116, 122, 128, 129, 134, 137, 156, 189, 210, 233, 244, 264, 277], "hope": [19, 59, 128, 213], "envis": 19, "small": [19, 31, 49, 50, 51, 59, 60, 68, 72, 73, 95, 98, 104, 108, 124, 145, 149, 158, 188, 211, 212, 215, 217, 219, 220, 221, 238, 239, 244, 264, 291, 294, 296], "x_": [19, 31, 35, 49, 58, 68, 69, 73, 110, 217, 219, 222, 228, 239, 242, 247], "taylor": [19, 68, 74, 141, 155, 158, 217, 219, 222, 223, 233, 242], "df": [19, 70, 242], "c_": [19, 29, 35, 69, 91, 93, 112, 210, 214, 242], "grid": [19, 47, 48, 122, 212], "f_": [19, 68, 73, 76, 95, 153, 154, 155, 219, 225, 226, 236, 242], "constraint": [19, 30, 104, 117, 124, 133, 134, 135, 139, 141, 143, 144, 145, 147, 151, 153, 154, 155, 158, 223, 244, 287], "formul": [19, 33, 111, 112, 114, 133, 144, 145, 151, 153, 154, 191, 210], "assess": 19, "brute": [19, 235, 239], "frequent": [19, 59, 221, 233, 245], "treatment": [19, 93, 222], "shall": [19, 59, 93, 141, 158, 233, 236, 297], "truncat": [19, 60, 68, 104, 108, 117, 196, 212, 223, 225, 228, 229], "approx": [19, 29, 34, 68, 95], "lowest": [19, 49, 59, 64, 108, 213, 215, 228, 245], "2h": 19, "print_funct": 19, "x0": [19, 35, 47, 49, 58, 68, 76, 87, 89, 91, 92, 108, 163, 216, 227, 228, 233, 238, 242, 244, 246, 264, 292], "x_0": [19, 58, 59, 69, 90, 91, 92, 219, 228, 239, 242, 246, 292], "fip1": 19, "fip2": 19, "c_0": [19, 69, 91, 112], "c_1": [19, 35, 69, 91, 93, 112, 233, 236, 242], "c_2": [19, 35, 51, 93, 112, 233, 242], "2f": [19, 303], "sum": [19, 21, 31, 49, 57, 60, 67, 68, 71, 73, 76, 81, 83, 91, 93, 95, 97, 98, 99, 101, 104, 108, 110, 120, 136, 153, 170, 174, 177, 185, 188, 190, 191, 211, 213, 214, 216, 217, 221, 222, 223, 226, 228, 229, 231, 233, 235, 236, 238, 239, 242, 244, 245, 246, 247, 248, 250, 252, 261, 264, 302], "c_i": [19, 93, 233, 236, 242], "nth": [19, 68, 73, 76, 97, 108, 217, 222, 223, 232, 238, 242, 246], "degre": [19, 28, 50, 51, 59, 66, 67, 73, 76, 84, 95, 99, 104, 116, 118, 120, 122, 124, 133, 134, 139, 141, 142, 145, 151, 159, 163, 210, 213, 214, 217, 219, 221, 222, 225, 229, 232, 235, 236, 238, 239, 242, 244, 246, 270, 287], "x_i": [19, 23, 58, 76, 95, 104, 214, 217, 219, 222, 223, 226, 245], "m11": [19, 246], "m12": [19, 246], "m13": 19, "m21": [19, 246], "m22": [19, 246], "m23": 19, "m31": 19, "m32": 19, "m33": [19, 108], "3x3": [19, 33, 83, 104, 215, 275], "invert": [19, 33, 37, 45, 68, 69, 99, 101, 104, 124, 145, 193, 214, 215, 216, 217, 221, 222, 242, 244, 245, 252, 298], "inv": [19, 33, 60, 100, 104, 133, 134, 139, 143, 148, 149, 158, 180, 215, 242], "fim1": 19, "eight": [19, 37, 226], "dfdxcheck": 19, "c3": [19, 35, 51, 71, 97, 99, 101, 108, 112, 215, 242, 246, 276, 303], "c5": [19, 112, 242], "c7": [19, 59, 112], "5040": [19, 73, 90, 222, 223], "tediou": [19, 95], "certainli": [19, 80, 110, 261], "devis": 19, "xn": [19, 23, 217], "x_n": [19, 23, 50, 58, 69, 90, 104, 214, 217, 219, 222, 239, 245], "fn": [19, 35, 95, 104, 213, 222], "fnm1": 19, "fnm2": 19, "dth": 19, "discrit": 19, "bengt": [19, 47], "fornberg": [19, 47], "weight": [19, 68, 76, 83, 85, 95, 97, 104, 175, 238, 292], "gap": [20, 59, 108, 141, 223], "matur": [20, 21, 244, 245], "finit": [20, 21, 32, 45, 49, 54, 55, 56, 59, 67, 68, 69, 71, 72, 95, 97, 98, 177, 201, 211, 214, 217, 220, 222, 223, 226, 228, 229, 232, 234, 239, 241, 242, 245, 264, 270, 272, 282, 293, 296, 302], "obviou": [21, 22, 23, 33, 51, 59, 67, 213, 216, 225, 239, 296], "refus": [21, 302], "roughli": [21, 68, 69, 109, 142, 242, 265], "possibli": [21, 49, 60, 66, 68, 93, 95, 108, 194, 215, 217, 219, 233, 234, 244, 259, 264, 292, 298], "infinit": [21, 23, 30, 31, 45, 67, 68, 69, 72, 73, 74, 81, 82, 95, 104, 108, 124, 140, 147, 177, 196, 213, 221, 226, 227, 228, 231, 232, 233, 234, 238, 239, 241, 244, 251, 264, 302, 303], "is_neg": [21, 23, 217], "unknow": 21, "resolv": [21, 22, 28, 30, 31, 32, 33, 34, 35, 36, 68, 95, 235, 238, 244], "undecid": [21, 23, 32, 104, 216, 245, 298], "conclud": [21, 76, 91, 143, 207, 233, 244, 279], "mix": [21, 40, 67, 74, 99, 104, 110, 200, 216, 217, 222, 226, 245, 248, 250, 252, 265], "slow": [21, 23, 28, 33, 64, 68, 72, 95, 109, 128, 163, 200, 210, 216, 217, 226, 227, 228, 229, 238, 242, 244, 245, 257, 258, 302], "indetermin": [21, 22, 68, 104, 219, 231, 244], "contradict": 21, "infer": [21, 43, 44, 60, 68, 95, 216, 225, 226, 231, 236, 242, 258], "presum": [21, 93, 216, 236, 259], "singletonregistri": [21, 68], "x1": [21, 23, 34, 35, 58, 68, 73, 158, 163, 216, 217, 227, 228, 238, 242, 244, 246, 264], "x2": [21, 34, 58, 68, 73, 158, 163, 216, 228, 242, 244, 246], "posifi": [21, 238], "_x": [21, 23, 104, 152, 200, 206, 209, 210, 217, 223, 238, 242, 258], "rep": [21, 59, 64, 68, 175, 213, 215, 216, 217, 220, 221, 222, 235, 238, 267], "among": [21, 48, 49, 50, 52, 59, 60, 69, 96, 109, 222, 242, 247, 250, 252, 274], "symbolc": 21, "aris": [21, 22, 68, 73, 93, 95, 188, 210, 215, 216, 221], "implicit": [21, 35, 49, 66, 68, 110, 114, 134, 135, 139, 159, 212, 242, 244, 248, 251, 258, 259, 270, 273, 280, 294], "tailor": 21, "assumptions0": [21, 68], "extended_neg": [21, 68], "extended_nonneg": [21, 68], "extended_nonposit": [21, 68], "extended_nonzero": [21, 68, 226], "extended_posit": [21, 68], "extended_r": [21, 45, 68, 226, 241, 245], "hermitian": [21, 33, 45, 68, 99, 100, 104, 174, 180, 191, 226], "irrat": [21, 28, 45, 47, 68, 108, 216, 222, 226, 234, 296], "noninteg": [21, 45, 68, 216, 226], "nonposit": [21, 45, 68, 73, 76, 158, 244], "nonzero": [21, 23, 45, 46, 67, 68, 83, 104, 114, 126, 214, 215, 216, 217, 226, 229, 245], "antihermitian": [21, 45, 68], "mathbb": [21, 23, 31, 45, 50, 51, 59, 67, 68, 69, 74, 76, 93, 99, 104, 155, 211, 213, 214, 216, 217, 219, 221, 222, 225, 233, 234, 236, 239, 245, 246, 302], "ii": [21, 74, 93, 95, 108, 222, 226, 234, 242, 245, 248], "cup": [21, 222, 234, 245], "pm": [21, 28, 29, 31, 41, 67, 93, 95, 108, 214, 225, 233, 239, 242], "yi": 21, "composit": [21, 45, 48, 57, 59, 60, 68, 69, 86, 88, 95, 108, 116, 217, 219, 222, 225, 238, 245, 260], "2k": [21, 68, 73, 93, 108, 239], "le": [21, 50, 64, 68, 76, 93, 99, 108, 110, 150, 219, 226, 236, 244, 246], "commutative_properti": [21, 68], "skew": [21, 91, 104, 108, 246], "hermitian_matrix": 21, "complex_numb": [21, 45, 68], "algebraic_numb": [21, 45, 68], "transcendental_numb": [21, 68], "extended_real_number_lin": 21, "real_numb": [21, 45], "imaginary_numb": [21, 45, 68], "rational_numb": [21, 45], "irrational_numb": [21, 45, 68], "parity_": [21, 68], "28mathemat": [21, 60, 68, 104, 234], "prime_numb": [21, 68, 108], "composite_numb": [21, 68], "positive_real_numb": 21, "negative_numb": [21, 68], "inconsist": [21, 23, 42, 44, 67, 196, 201, 205, 209, 238, 242, 244, 245], "inconsistentassumpt": 21, "deal": [21, 49, 67, 68, 72, 80, 88, 93, 95, 121, 128, 134, 135, 141, 207, 209, 210, 214, 219, 222, 239, 244, 255, 265, 267, 274, 279, 294, 296, 302], "is_zero_matrix": [21, 99, 215], "generalis": [21, 73, 76, 93, 124, 213], "gaussian": [21, 76, 95, 104, 108, 161, 195, 219, 222, 239, 244, 246, 287, 298], "chain": [21, 23, 49, 59, 64, 68, 76, 85, 109, 209, 221, 246], "superset": [21, 47, 57, 63, 71, 158, 216, 234, 244], "vanilla": 21, "attach": [21, 60, 62, 93, 109, 114, 116, 129, 133, 134, 137, 152, 210, 258, 260, 265], "is_commut": [21, 95, 180, 189, 264], "is_complex": [21, 68], "is_finit": [21, 68], "permit": [21, 60, 70, 74, 98, 108, 212, 244], "formal": [21, 31, 48, 67, 68, 76, 93, 98, 160, 196, 216, 219, 230, 233, 282], "n1": [21, 49, 59, 68, 69, 141, 158, 160, 164, 200, 212, 239, 246, 270], "n2": [21, 49, 59, 68, 69, 158, 160, 164, 212, 239, 246], "misunderstand": 21, "is_nonneg": [21, 23, 217], "meaning": [21, 42, 44, 48, 69], "neither": [21, 22, 45, 68, 165, 186, 212, 215, 222, 233, 234, 235, 242, 252, 265, 270, 279, 302], "alon": [21, 69, 96, 219, 242, 244, 251, 264, 296, 297], "meet": [21, 69, 233], "criteria": [21, 68, 297], "noncommut": [21, 68, 91, 297], "finiteset": [21, 32, 47, 48, 234, 245, 246, 303], "s1": [21, 51, 59, 67, 81, 84, 91, 124, 202, 213, 222, 229, 239, 264, 273], "s2": [21, 51, 59, 60, 67, 81, 84, 124, 202, 213, 222, 229, 233, 239, 264, 273], "bool": [21, 41, 47, 49, 51, 64, 66, 68, 69, 71, 74, 95, 96, 98, 99, 101, 104, 108, 110, 112, 114, 122, 134, 135, 139, 174, 175, 203, 206, 212, 215, 221, 222, 224, 226, 227, 228, 233, 234, 238, 241, 246, 258, 259, 264, 265, 270, 273, 294], "plai": [21, 67, 143, 153, 239, 294, 296, 297], "role": [21, 74, 224], "is_finite_set": 21, "zero_matrix": 21, "setsymbol": 21, "is_compar": [21, 68], "capitalis": 21, "4142135623731": [21, 34, 226, 244], "predict": [21, 191, 238, 264], "expreal": 21, "fuzzy_and": [21, 22, 23], "fuzzy_or": [21, 22], "is_extended_nonneg": 21, "classmethod": [21, 23, 41, 43, 44, 49, 52, 57, 59, 60, 62, 63, 68, 74, 75, 76, 83, 99, 104, 111, 112, 114, 124, 129, 136, 139, 177, 188, 189, 191, 215, 217, 221, 222, 226, 234, 252, 257], "is_extended_r": 21, "elif": [21, 22, 23, 74], "is_infinit": 21, "is_extended_neg": 21, "is_extended_posit": [21, 22], "_eval_is_finit": 21, "is_extended_nonposit": 21, "_eval_is_algebra": 21, "is_nonzero": [21, 83], "_eval_is_integ": 21, "_eval_is_zero": [21, 23], "pick": [21, 69, 73, 155, 185, 187, 302], "__new__": [21, 23, 49, 59, 68, 297], "importantli": [21, 23, 223, 261], "reject": [21, 22, 108, 239, 267], "_eval_is_": 21, "is_algebra": [21, 68, 217], "interfer": [21, 226], "determinist": [21, 59, 95, 108, 219, 220], "reach": [21, 108, 124, 221, 222, 242], "claus": [21, 98], "flow": [21, 221], "inner": [21, 35, 67, 93, 104, 110, 174, 177, 178, 183, 185, 186, 189, 191, 201, 205, 215, 221, 228, 270, 287], "optimis": [21, 242], "briefli": [21, 214, 219], "default_assumpt": 21, "_ask": 21, "_eval_i": 21, "enumer": [21, 38, 52, 57, 60, 63, 71, 75, 93, 98, 108, 114, 221, 222, 236, 261, 264, 282], "randomis": [21, 254, 289], "unresolv": 21, "factrul": 21, "_assume_rul": 21, "preprocess": [21, 95, 224], "defined_fact": 21, "full_impl": 21, "defaultdict": [21, 68, 264], "precomput": [21, 73, 108, 265], "static": [21, 41, 49, 59, 60, 62, 68, 74, 81, 82, 83, 84, 101, 117, 143, 151, 212, 226, 232, 234, 246, 258], "knowabl": 21, "stdfactkb": 21, "_eval_is_r": [21, 23, 222], "_assumpt": [21, 68], "amongst": [21, 244], "indirectli": 21, "manifest": [21, 214], "jointli": 21, "fundament": [21, 23, 47, 50, 58, 86, 93, 95, 104, 195, 196, 216, 221, 239, 242, 246, 298], "theoret": [21, 48, 50, 59, 69, 73, 220, 221, 236, 246, 294], "isposit": 22, "xpo": 22, "xneg": 22, "strictgreaterthan": [22, 68, 226], "analogu": [22, 45, 67, 82, 216, 217], "piecewis": [22, 23, 49, 67, 73, 76, 95, 98, 116, 189, 226, 228, 229, 244, 245, 246, 265, 292], "p2": [22, 59, 60, 67, 78, 80, 81, 82, 83, 84, 116, 124, 130, 133, 136, 140, 158, 205, 212, 216, 217, 219, 223, 235, 246], "nonetyp": [22, 49, 139], "quirk": 22, "both_posit": 22, "falsei": 22, "both_positive_bett": 22, "negat": [22, 23, 45, 68, 74, 98, 124, 201, 215, 217, 219, 222], "fuzzy_not": [22, 23], "both_positive_best": 22, "silent": [22, 72, 108, 258], "bitwis": [22, 71, 98], "footnot": [22, 196, 297, 298, 301], "si": [23, 76, 92, 93, 164, 193, 194, 195, 196, 197, 198, 226], "dig": [23, 49, 297], "handler": [23, 42, 43, 44, 45, 46, 68, 75, 104], "spectrum": 23, "np": [23, 35, 73, 91, 108, 141, 212, 258, 265], "arang": [23, 258, 291], "arrai": [23, 29, 33, 34, 35, 49, 59, 60, 64, 65, 69, 76, 95, 99, 101, 104, 108, 109, 110, 122, 135, 158, 188, 212, 215, 217, 222, 226, 245, 246, 249, 251, 252, 253, 258, 259, 261, 265, 285, 298], "cosin": [23, 68, 74, 76, 83, 95, 130, 133, 201, 210, 222, 223, 229, 235, 246, 270, 302], "todai": [23, 213], "operatornam": [23, 41, 73, 74, 76, 93, 95, 211, 214, 222, 226, 229, 234, 236, 244], "modern": [23, 49, 213, 220, 226], "recal": [23, 68, 104, 219, 221, 236, 294, 296, 297, 303], "antipattern": [23, 295], "stai": [23, 221], "trig": [23, 68, 95, 222, 226, 235, 238, 302], "wouldn": 23, "cheap": [23, 68, 108], "as_two_term": [23, 68], "hadn": 23, "wors": [23, 98, 238], "expand_trig": [23, 68, 291], "mid": [23, 50, 69, 72, 110, 117, 234, 239], "troubl": [23, 76], "bigger": [23, 49, 68, 73, 104, 236, 242, 302], "deduc": [23, 49, 93, 98, 236, 296], "disallow": [23, 68, 222, 227, 238, 260], "great": [23, 160, 223, 226, 239, 265], "simplest": [23, 35, 48, 98, 104, 108, 109, 129, 137, 211, 212, 223, 227, 235, 238, 242, 292, 302], "\u03c0": [23, 72, 163, 226, 245, 292, 296, 302, 303], "as_independ": [23, 68, 245], "coeff": [23, 68, 70, 98, 158, 217, 221, 222, 232, 238, 242, 244, 252, 302], "apart": [23, 41, 59, 64, 68, 72, 74, 95, 110, 129, 137, 207, 214, 215, 217, 219, 222, 225, 228, 239, 245, 252, 275, 277, 297], "is_even": [23, 56, 59, 60], "nonreal": [23, 34, 244], "cosh": [23, 68, 74, 76, 87, 93, 110, 112, 223, 226, 227, 236, 238, 244, 298, 302], "5919532755215": 23, "_eval_is_nonneg": 23, "exercis": [23, 59, 261, 295, 302], "_eval_is_posit": 23, "as_add": [23, 68], "pi_": 23, "fuzzy_": 23, "deduct": [23, 49], "subtl": [23, 235], "nontrivi": [23, 59, 68, 108], "_eval_evalf": [23, 222], "prec": [23, 34, 68, 78, 84, 108, 122, 211, 217, 222, 223, 238, 244], "dp": [23, 49, 68, 71, 76, 108, 216, 217, 244, 260], "53": [23, 69, 71, 104, 160, 214, 216, 217], "459697694131860": 23, "hook": [23, 109, 110, 226], "_eval_rewrit": [23, 68], "rewritten": [23, 68, 73, 74, 76, 95, 141, 188, 195, 233, 238, 242, 244, 302], "caller": [23, 215], "ve": [23, 143], "nonintegr": 23, "iff": [23, 45, 60, 69, 98, 104, 210, 213, 221, 236, 239, 257], "isint": 23, "happi": 23, "demand": [23, 40], "_eval_expand_": 23, "expand_": 23, "predefin": [23, 70, 158, 216, 226, 227, 238, 245, 252, 270, 275], "expand_log": [23, 49, 68, 238], "_eval_expand_trig": 23, "sophist": [23, 109, 244], "th": [23, 41, 50, 59, 60, 66, 69, 70, 72, 73, 74, 76, 97, 98, 104, 108, 134, 215, 217, 219, 221, 222, 228, 231, 236, 239, 242, 244, 246, 247, 252], "x_1": [23, 50, 58, 59, 69, 73, 90, 104, 186, 214, 217, 219, 222, 228, 239, 245], "ldot": [23, 31, 50, 58, 59, 67, 68, 69, 73, 76, 93, 108, 117, 196, 211, 213, 214, 217, 219, 221, 226, 229, 233, 236, 239, 244, 247, 302], "x_k": [23, 69, 219], "dy": [23, 26, 49, 70, 85, 104, 116, 127, 158, 222, 226, 239, 242, 243, 292], "dz": [23, 116, 127, 236], "varion": 23, "middl": [23, 76, 84, 93, 104, 117, 171, 212, 236, 302], "iverson": 23, "printmethod": [23, 226], "latexprint": 23, "_latex": [23, 226], "_print": [23, 226], "_m": [23, 76], "_n": [23, 69, 73, 76, 95, 222, 236, 245], "arcversin": 23, "aversin": 23, "im": [23, 46, 68, 74, 93, 102, 213, 226, 227, 234, 242, 298], "sinh": [23, 47, 68, 72, 74, 76, 87, 93, 110, 112, 223, 226, 227, 236, 302], "expand_complex": [23, 68], "vers": 23, "geometr": [23, 70, 77, 78, 79, 80, 81, 82, 83, 84, 85, 104, 160, 210, 213, 220, 246, 298], "angl": [23, 41, 74, 76, 77, 78, 79, 81, 82, 83, 84, 114, 118, 120, 126, 133, 139, 140, 141, 143, 144, 145, 146, 152, 155, 160, 163, 164, 165, 188, 196, 201, 209, 210, 211, 226, 235, 245, 270, 272, 275, 302], "distanc": [23, 48, 52, 60, 78, 81, 82, 83, 84, 116, 117, 127, 128, 129, 133, 137, 140, 145, 146, 160, 164, 194, 205, 207, 279], "rightmost": [23, 191], "scientificamerican": 23, "uniti": [23, 74, 76, 93, 186, 221], "secret": [23, 69], "teacher": 23, "taught": [23, 95], "nr": 23, "sake": [23, 73, 239], "simplic": [23, 236, 242], "divisor": [23, 45, 59, 68, 69, 104, 108, 213, 214, 215, 216, 217, 219, 220, 221, 222, 225], "hardwar": [23, 49], "regard": [23, 50, 69, 76, 96, 159, 191, 213, 214, 228, 244, 245], "c99codeprint": [23, 49, 226], "cxx11codeprint": [23, 226], "cfunction": 23, "e2": [23, 47, 68, 71, 78, 85, 95, 104, 108, 122, 141, 215, 216, 221, 222, 233, 242, 245, 246, 264], "93accumulate_oper": 23, "fused_multipli": 23, "93add": 23, "ccode": [23, 49, 226, 251, 259], "cxxcode": [23, 49, 226], "_ccode": [23, 226], "_y": [23, 30, 152, 200, 206, 209, 210], "_z": [23, 95, 152, 200, 209, 210, 246], "_cxxcode": [23, 226], "std": [23, 49, 226, 246], "28318530717959": 23, "trigonometricfunct": 23, "inversetrigonometricfunct": 23, "reciprocaltrigonometricfunct": 23, "bypass": [23, 222, 242], "fragil": 23, "prone": [23, 31, 49, 68], "task": [24, 29, 38, 74, 151, 152, 158, 216, 221, 292, 299], "deeper": [24, 250, 297], "explor": [24, 153, 154, 212, 221, 261, 302], "logo": 24, "png": [25, 26, 35, 48, 96, 104, 116, 117, 120, 122, 206, 212, 226, 229], "generate_logo": 25, "wider": [25, 226], "varieti": [25, 37, 49, 50, 60, 68, 109, 117, 156, 213, 220, 222, 246, 264], "textbook": 26, "dc": [26, 124, 154], "transferfunct": [26, 121, 122, 124], "unstabl": [26, 120], "impuls": [26, 124], "respons": [26, 67, 68, 124, 141, 212, 259], "subpart": 26, "unknwon": 26, "tf": [26, 124, 265], "from_zpk": [26, 124], "dc_gain": [26, 124], "reconstruct": [26, 69, 104, 215, 219, 239, 297], "is_stabl": [26, 124], "lie": [26, 28, 60, 70, 82, 83, 84, 137, 140, 222, 246, 281, 288], "inverse_laplace_transform": [26, 95], "to_expr": [26, 90, 91, 92, 124], "impulse_respons": 26, "theorem": [26, 28, 37, 56, 69, 73, 76, 78, 84, 95, 99, 104, 108, 127, 128, 140, 143, 191, 200, 209, 213, 216, 219, 233, 236, 239, 245], "spring": [26, 108, 129, 130, 133, 134, 139, 141, 146], "damper": [26, 129, 133, 134, 139, 141, 146], "laplace_transform": [26, 95, 124], "laplace_initial_cond": [26, 95], "laplace_correspond": [26, 95], "2y": [26, 219, 239, 242, 245, 296], "dt": [26, 35, 70, 76, 111, 145, 158, 200, 201, 203, 209, 210, 222, 242, 302], "ky": 26, "2u": 26, "quad": [26, 67, 68, 70, 72, 76, 95, 99], "bigg": 26, "nocond": [26, 95], "from_rational_express": [26, 124], "signal": [26, 76, 98, 108, 111, 122, 124, 158, 219, 297], "bmatrix": [26, 35, 41, 99, 101, 104, 110, 145, 153, 154, 155, 200, 201, 210, 239], "2t": [26, 73], "5e": 26, "laplac": [26, 95, 104, 121, 122, 124, 246], "mimo": [26, 121, 124], "visualis": 26, "1st": [26, 47, 60, 108, 124, 242, 243, 267, 292], "analys": [26, 48, 122, 124, 158, 246], "bode": 26, "magnitud": [26, 41, 49, 67, 68, 72, 76, 109, 116, 117, 118, 120, 122, 129, 136, 137, 145, 158, 189, 198, 201, 207, 210, 212, 270, 277, 279], "2nd": [26, 47, 60, 69, 108, 124, 158, 242, 247, 264], "applyfunc": [26, 99, 100, 104, 149, 201, 215, 247], "transferfunctionmatrix": [26, 121, 124], "from_matrix": [26, 41, 124, 215], "lti": [26, 121, 122], "num_input": [26, 124], "num_output": [26, 124], "elem_pol": [26, 124], "elem_zero": [26, 124], "pole_zero_plot": [26, 122], "hire": [26, 35, 104, 116, 117, 120, 122, 212, 229], "tf1": [26, 122, 124], "step_response_plot": [26, 122], "tf2": [26, 124], "bode_magnitude_plot": [26, 122], "bode_phase_plot": [26, 122], "arrang": [26, 60, 124, 134, 156, 158, 222, 235, 239, 252], "loop": [26, 28, 31, 35, 48, 49, 108, 124, 144, 201, 212, 215, 223, 226, 242, 261, 264, 265, 297], "ratio": [26, 45, 58, 59, 67, 68, 72, 73, 76, 78, 81, 82, 83, 84, 100, 108, 112, 124, 164, 196, 215, 226, 235, 238, 244], "diagram": [26, 49, 57, 97, 116, 129, 137, 144, 145, 146, 151, 171, 251, 275, 297], "plant": [26, 124], "p_mat": 26, "c_mat": 26, "opposit": [26, 28, 64, 84, 98, 99, 129, 130, 137, 140, 214, 217, 234, 238, 245, 253, 264, 270, 272, 302], "doit": [26, 67, 68, 70, 73, 74, 76, 95, 101, 112, 124, 168, 170, 172, 183, 185, 188, 189, 191, 201, 211, 222, 228, 233, 238, 242, 243, 246, 248, 270, 273, 274, 276, 277, 292, 297], "tfm_feedback": 26, "mimofeedback": [26, 121, 124], "g1": [26, 49, 53, 58, 59, 93, 104, 124], "g2": [26, 49, 53, 58, 59, 93, 97, 104, 124], "g3": [26, 59, 124], "g4": [26, 124], "h1": [26, 48, 136], "h2": [26, 136], "h3": 26, "sys1": [26, 124], "sys2": [26, 124], "sys3": 26, "sys4": 26, "sys5": 26, "sys6": 26, "193": [26, 104, 122], "873": [26, 108], "1644": 26, "1484": 26, "712": [26, 95], "testbook": 26, "vssut": 26, "ac": [26, 41, 49, 60, 80, 120, 136, 156, 168, 246, 264, 267], "classic": [27, 35, 47, 74, 76, 104, 177, 193, 201, 210, 213, 287], "continuum": [27, 39, 287], "optic": [27, 162, 163, 164, 165, 287], "bx": [28, 29, 93, 246, 252], "yield": [28, 30, 31, 32, 33, 35, 36, 47, 49, 59, 68, 69, 73, 76, 92, 93, 108, 116, 124, 131, 185, 211, 214, 219, 221, 222, 227, 228, 233, 234, 235, 238, 239, 244, 261, 264, 298], "4ac": [28, 29, 239], "2a": [28, 29, 246], "quadrat": [28, 31, 68, 69, 95, 108, 213, 217, 221, 222, 239, 244, 246], "five": [28, 31, 48, 57, 93, 120, 226, 239], "rootof": [28, 74, 222], "ill": [28, 110, 194], "spuriou": [28, 219, 244], "interv": [28, 30, 32, 35, 45, 47, 59, 68, 72, 74, 76, 77, 78, 81, 84, 93, 95, 98, 108, 177, 186, 215, 217, 219, 221, 222, 229, 232, 234, 241, 245, 246, 303], "irreduc": [28, 214, 215, 217, 219, 221, 222, 225, 246, 252, 302], "reveal": [28, 31, 33, 49, 108, 215, 245, 297], "cubic": [28, 76, 213, 222, 239, 244], "quartic": [28, 78, 222, 244], "fourth": [28, 68, 69, 112, 214, 242, 292], "687": 28, "144": [28, 37, 73, 95, 211, 215], "emphas": [28, 67], "quintic": [28, 222, 244], "fifth": [28, 112], "techniqu": [28, 32, 33, 35, 50, 63, 93, 95, 222, 226, 228, 238, 242, 245, 298], "abel": [28, 37, 104, 222], "ruffini": [28, 37, 104], "expression_expand": 28, "symbolic_expand": 28, "cube": [28, 47, 49, 52, 59, 61, 74, 95, 219, 220, 239, 245, 280], "nois": 28, "neglig": 28, "compon": [28, 48, 49, 64, 68, 70, 83, 95, 101, 104, 112, 114, 115, 125, 133, 136, 139, 151, 152, 156, 163, 188, 193, 200, 201, 207, 208, 209, 210, 211, 212, 213, 214, 215, 222, 224, 246, 248, 251, 252, 261, 264, 270, 273, 276, 277], "18482169793536e": 28, "55872552179222e": 28, "contrarili": 28, "rq0": 28, "rq1": 28, "rq2": 28, "rq3": 28, "237": [28, 220], "349745826211722": 28, "438990337475312": 28, "wilkinson": [28, 99], "expression_complex": 28, "symbolic_complex": 28, "expression_complex_poli": 28, "travers": [28, 84, 108, 110, 131, 222, 235, 251, 261, 297], "my_real_root": 28, "my_root": 28, "324": [28, 108, 215, 220], "fifth_ord": 28, "16730397826142": 28, "181232444469875": 28, "08395410131771": 28, "764884433600585": 28, "352471546031726": 28, "polyerror": [28, 219, 222], "unsolvablefactorerror": [28, 222, 244], "complexrootof": [28, 68, 104, 217, 222, 242], "fifth_order_solv": 28, "167303978": 28, "1812324445": 28, "083954101": 28, "7648844336": 28, "352471546": 28, "sole": 28, "r0": [28, 68, 222], "r1": [28, 41, 68, 78, 81, 97, 104, 116, 117, 164, 201, 207, 222, 270], "r2": [28, 41, 68, 70, 81, 97, 99, 104, 116, 117, 164, 201, 222, 226, 238, 270], "r3": [28, 41, 97, 116, 117, 238], "r4": [28, 97, 116], "croot": 28, "robustli": 28, "diophantin": [29, 30, 108, 219, 240, 282], "guidanc": 29, "2z": [29, 36, 76, 245, 246], "4z": [29, 36, 245], "6z": [29, 36], "739085133215161": [29, 34, 36, 37, 244], "9y": [29, 35], "3x": [29, 35, 68, 110, 219, 245, 294], "cc": [29, 33, 69, 84, 211, 214, 215, 216, 222, 298], "2e": [29, 33, 68], "ce": [29, 33, 120], "2pq": [29, 31], "linprog": [30, 244], "as_set": [30, 98], "accomplish": [30, 95, 155, 158, 277], "rel_op": [30, 68], "relations_sort": 30, "append": [30, 35, 59, 68, 69, 104, 117, 158, 186, 212, 217, 226, 244, 247, 259, 260, 264, 302], "x_y_reduc": 30, "insight": [30, 295], "x_reduc": 30, "y_reduc": 30, "solve_univariate_inequ": [30, 241, 245], "calculu": [30, 32, 68, 73, 95, 104, 158, 207, 235, 246, 276, 277, 278, 281, 282, 293, 295, 300], "incompat": 30, "reflect": [30, 37, 52, 56, 60, 68, 78, 79, 84, 97, 120, 160, 163, 164, 201], "parameter": [31, 70, 77, 78, 81, 84, 239], "pythagorean": [31, 239], "sage": [31, 68, 108, 211, 296], "ellipticcurv": 31, "nest": [31, 35, 68, 70, 74, 76, 95, 99, 124, 214, 215, 216, 219, 226, 236, 238, 241, 245, 246, 247, 248, 250, 253, 264, 265, 297], "ineffici": [31, 68, 104, 216], "my_sym": 31, "pythag_eq": 31, "sym": [31, 47, 58, 59, 64, 68, 73, 201, 226, 229, 234, 238, 239, 244, 246, 252, 264, 302], "pythag": 31, "a_1x_1": [31, 239], "a_2x_2": [31, 239], "a_nx_n": [31, 239], "bxy": [31, 239], "cy": [31, 239], "ei": [31, 35, 76, 93, 221, 226, 236, 239, 242, 252], "homogen": [31, 41, 91, 95, 104, 124, 217, 219, 222, 239, 242, 243, 246], "ternari": [31, 49, 68, 226, 239], "cz": [31, 71, 124, 239], "dxy": [31, 239], "eyz": [31, 239], "fzx": [31, 239], "a_": [31, 64, 68, 69, 76, 93, 97, 99, 101, 124, 125, 200, 228, 236, 239, 242, 244, 246, 247, 248], "pythogorean": 31, "subscript": [31, 33, 60, 110, 217, 226, 236, 239, 264], "solution_dict": [31, 35], "zip": [31, 47, 58, 69, 98, 108, 222, 232, 239, 242, 244, 261, 264], "elegantli": 31, "solution_list": [31, 32], "solution_first": 31, "solution_p4q3": 31, "p_val": 31, "q_val": 31, "pythag_v": 31, "union": [31, 40, 45, 47, 49, 57, 59, 66, 98, 213, 221, 226, 232, 233, 234, 241, 245, 264], "4y": [31, 219, 245, 291], "rearrang": [32, 125, 134, 153, 154, 175, 242], "eqn": [32, 35, 47, 245], "solutions_set": 32, "solution_set": 32, "256": [32, 49, 59, 108, 222, 226], "solution_outside_2_3": 32, "critic": [32, 47, 114, 164, 209, 221, 245], "minima": [32, 245], "critical_point": 32, "point1": [32, 202, 273], "point2": [32, 202, 273], "curvatur": [32, 160, 164], "membership": [32, 66, 221, 234], "solution_set_arg": 32, "linalg": [33, 34, 49], "lu_solv": [33, 104, 215], "linear_eq_to_matrix": [33, 242, 244, 245], "matrixbas": [33, 99, 100, 101, 104, 134, 135, 215], "column": [33, 41, 45, 48, 49, 50, 96, 98, 99, 101, 104, 105, 107, 111, 114, 124, 134, 139, 143, 186, 193, 200, 201, 206, 211, 215, 221, 226, 242, 244, 245, 251, 270], "row": [33, 45, 48, 49, 50, 57, 60, 68, 73, 99, 100, 101, 104, 105, 107, 108, 114, 124, 139, 141, 143, 158, 159, 186, 200, 201, 210, 215, 221, 226, 236, 245, 246, 251, 265, 270, 272], "shapeerror": [33, 99, 101, 104], "penros": [33, 101, 104], "pseudoinvers": [33, 104], "jordan": [33, 93, 99, 104, 215, 224, 242, 244, 245], "lu": [33, 101, 104, 134, 135, 215, 220], "lusolv": [33, 100, 104, 133, 134, 135, 155, 159, 244, 298], "repeatedli": [33, 108, 125, 258], "b2": [33, 76, 108, 116, 117, 130, 141, 158, 201, 215, 217, 226, 236, 239, 242, 276], "solution2": 33, "prioriti": [33, 49, 91, 128, 141, 210, 265], "computation": [33, 64, 74, 133, 134, 135], "tractabl": [33, 245], "rapidli": [33, 68, 72, 93, 233], "dimens": [33, 49, 52, 69, 70, 76, 77, 79, 81, 82, 83, 85, 97, 99, 101, 104, 107, 111, 114, 116, 125, 145, 165, 175, 177, 180, 185, 194, 195, 198, 199, 201, 212, 215, 226, 239, 242, 244, 246, 247, 248, 251, 252, 259, 270, 273, 275, 287], "dimension": [33, 47, 49, 52, 70, 80, 81, 82, 83, 84, 101, 104, 117, 125, 158, 165, 167, 177, 193, 207, 208, 212, 213, 219, 221, 222, 225, 226, 244, 245, 247, 248, 252, 258, 279, 303], "4x4": [33, 41, 83, 107, 163, 215, 246], "a\u2080\u2080": 33, "a\u2080\u2081": 33, "a\u2080\u2082": 33, "a\u2080\u2083": 33, "a\u2081\u2080": 33, "a\u2081\u2081": 33, "a\u2081\u2082": 33, "a\u2081\u2083": 33, "a\u2082\u2080": 33, "a\u2082\u2081": 33, "a\u2082\u2082": 33, "a\u2082\u2083": 33, "a\u2083\u2080": 33, "a\u2083\u2081": 33, "a\u2083\u2082": 33, "a\u2083\u2083": 33, "det": [33, 41, 104, 105, 158, 210, 215, 298], "a\u2081": [33, 117, 302], "\u2083": [33, 226], "a\u2082": [33, 117, 302], "\u2080": [33, 226], "a\u2083": [33, 302], "slowest": [33, 95, 109], "triangular": [33, 45, 51, 99, 100, 104, 215, 221, 244, 246, 280], "prove": [33, 68, 93, 95, 104, 213, 233, 242, 276], "noninvertiblematrixerror": [33, 101, 298], "overli": [34, 137], "float64": [34, 49, 109, 246], "fsolv": 34, "findroot": [34, 76, 244], "overdetermin": [34, 215, 244, 245], "toler": [34, 49, 68, 72, 217, 238, 244], "18466446988997098217": 34, "16840434497100886801e": 34, "tweak": [34, 110, 226, 244], "closest": [34, 68, 81], "00000000000000": [34, 68, 72, 192, 226, 246], "bisect": [34, 108, 222, 244], "multidimension": [34, 220, 257], "19287309935246": [34, 244], "27844411169911": [34, 244], "192873099352460791205211": 34, "278444111699106966687122": 34, "root_scalar": 34, "lam_f": [34, 265], "3416277185114782": 34, "x_valu": 34, "12757857962640e": 34, "73908513321516": 34, "4877893607115270300540019e": 34, "6543612251060553497428174e": 34, "solve_ivp": 35, "c2": [35, 51, 69, 78, 85, 99, 101, 112, 133, 177, 191, 234, 242, 246, 273, 276, 303], "ypp": 35, "yp": 35, "classify_od": [35, 242], "choic": [35, 49, 60, 73, 76, 93, 95, 109, 114, 155, 187, 196, 200, 201, 209, 217, 219, 222, 226, 238, 242, 264, 296], "ic": [35, 108, 242], "y0": [35, 68, 87, 89, 91, 242], "y_": [35, 49, 76, 93, 126, 211], "initialor": 35, "eqs_one_soln_set": 35, "solutions_one_soln_set": 35, "solution_one_soln_set_dict": 35, "outer": [35, 95, 110, 136, 156, 158, 174, 179, 180, 200, 201, 203, 205, 210, 228, 234, 250, 270, 273, 274], "fashion": [35, 49, 68, 74, 101, 143, 153, 154, 156, 210, 213, 264], "solutions_list": 35, "leverag": [35, 49, 109, 226], "chemic": [35, 111], "kinet": [35, 130, 134, 136], "r_f": [35, 222], "k_f": 35, "y_0": [35, 239, 242], "y_1": [35, 50, 239, 246], "r_b": 35, "k_b": 35, "y_2": [35, 50, 239, 246], "vec": [35, 99, 104, 133, 158, 201, 211, 219, 276, 277, 279], "pyplot": [35, 91, 158], "plt": [35, 91, 158], "y2": [35, 68, 158, 216], "kf": 35, "kb": 35, "rf": [35, 67, 73, 222], "rb": [35, 136, 156], "speci": [35, 67, 68], "ydot": 35, "k_val": 35, "42": [35, 49, 57, 68, 71, 73, 81, 82, 84, 99, 100, 102, 104, 106, 108, 217, 219, 222, 239, 257], "t_eval": 35, "linspac": [35, 49, 91, 109, 141, 158], "50": [35, 50, 59, 71, 72, 73, 76, 84, 104, 108, 116, 117, 164, 195, 222, 226, 235, 244], "concentr": [35, 117, 246], "legend": [35, 158, 212, 229], "NO": [35, 191], "br": 35, "_2": [35, 104, 133, 140, 200, 201, 211, 242], "nobr": 35, "shadow": [35, 61], "xlabel": [35, 212], "ylabel": [35, 212], "annot": [35, 108, 212, 226], "_integr": [35, 242, 243], "separable_integr": [35, 242], "routin": [35, 49, 57, 67, 68, 69, 70, 93, 98, 99, 104, 108, 134, 163, 191, 215, 219, 222, 225, 226, 227, 238, 239, 242, 243, 244, 245, 258, 264, 277], "unintegr": 35, "all_integr": [35, 242, 243], "coupl": [35, 68, 104, 110, 139, 155, 170, 185, 188, 211], "educ": [35, 69, 104], "chaotic": 35, "lorenz": 35, "pendulum": [35, 133, 139, 142, 146, 151, 155, 159, 209, 287], "scienceworld": 35, "theta_1": 35, "theta_2": 35, "2g": 35, "theta1": [35, 145], "theta2": 35, "eq1": [35, 78, 242, 244, 245], "eq2": [35, 78, 98, 242, 245], "interrog": 36, "overconstrain": 36, "solvabl": [37, 59, 120, 133, 239, 242, 245, 303], "groebnerbasi": [37, 214, 222, 225], "lambert": [37, 74, 95, 223], "decompos": [37, 59, 60, 66, 68, 70, 74, 79, 104, 108, 175, 184, 185, 187, 217, 222, 225, 246], "lack": [37, 49, 70, 72, 136, 226, 292], "crootof": [37, 68, 222, 242, 244], "765": [37, 222], "352": [37, 222], "181": [37, 222], "08": [37, 104, 143, 222], "56": [37, 71, 95, 108, 222], "432": [37, 81, 221], "434607": 37, "0509758447494279": 37, "313552108895239": 37, "14751999969868": 37, "estim": [37, 47, 67, 68, 72, 93, 292], "preserv": [37, 48, 49, 59, 68, 104, 189, 215, 217, 222, 227, 228, 238], "77245385090552": 37, "4142135623730951": 37, "risk": 37, "parse_latex": [37, 110], "central": [38, 59, 65, 76, 78, 84, 130, 136, 156, 221, 222, 239, 246], "pypi": 39, "qtconsol": [39, 301], "nicer": [39, 68, 149, 215], "enthought": 39, "deploy": 39, "activepython": 39, "spack": 39, "freshli": 39, "starter": 39, "wherev": [39, 141, 238, 245, 274], "visit": [39, 52, 59, 68, 73, 299], "gitter": [39, 298], "excel": [39, 72, 221, 300], "ticket": 39, "export": [40, 226], "latin": 40, "clunki": 40, "collid": [40, 252], "win": 40, "throwawai": 40, "surviv": 40, "foo": [40, 47, 49, 68, 186, 206, 264, 267], "stick": 40, "_clash1": [40, 68], "_clash2": [40, 68], "multi": [40, 68, 69, 142, 151, 158, 171, 175, 185, 212, 226, 245, 287], "_clash": [40, 68], "real_field": 41, "norm": [41, 104, 189, 201, 217, 219, 221, 222], "instanti": [41, 48, 49, 60, 68, 76, 81, 83, 84, 101, 104, 110, 111, 112, 114, 129, 134, 137, 140, 181, 189, 201, 213, 215, 217, 221, 246, 270, 274], "bi": [41, 68, 74, 76, 95, 210, 233, 242], "cj": 41, "dk": [41, 116, 221], "q1": [41, 104, 116, 128, 141, 143, 144, 145, 146, 148, 149, 150, 153, 154, 155, 159, 200, 201, 203, 205, 206, 209, 210, 216, 270, 272], "q2": [41, 116, 128, 141, 143, 144, 145, 146, 148, 149, 150, 153, 154, 159, 200, 201, 203, 205, 206, 209, 210, 216, 270, 272], "euclideanspac": 41, "realnormedalgebra": 41, "q3": [41, 128, 143, 144, 146, 148, 149, 150, 153, 201, 203, 205, 210, 270, 272], "atan_2": 41, "atan": [41, 46, 70, 72, 74, 79, 84, 92, 95, 145, 159, 160, 223, 226, 228], "arc_coplanar": 41, "arc": [41, 74, 140, 302], "coplanar": [41, 82, 210], "parallel": [41, 78, 81, 82, 84, 95, 121, 124, 127, 137, 140, 209, 210, 215, 219, 276, 280], "vector_coplanar": 41, "is_pur": 41, "mathbf": [41, 101, 134, 140, 151, 153, 154, 156, 196, 200, 201, 206, 207, 209, 210, 226, 236, 247, 274, 275, 277, 279, 280], "versor": 41, "0i": 41, "0j": [41, 216], "0k": 41, "vector_part": 41, "vector_onli": 41, "from_axis_angl": 41, "radian": [41, 74, 77, 78, 79, 81, 82, 83, 104, 122, 141, 164, 165, 201], "from_eul": 41, "seq": [41, 59, 68, 71, 104, 217, 219, 222, 232, 244, 264], "intrins": [41, 49], "extrins": 41, "uppercas": [41, 69, 236], "zyz": [41, 201], "from_rotation_matrix": 41, "orthogon": [41, 45, 83, 97, 104, 189, 201, 210, 270, 272], "index_vector": 41, "scalar_part": 41, "is_zero_quaternion": 41, "mensor": 41, "60": [41, 54, 59, 61, 67, 68, 73, 76, 95, 104, 108, 116, 117, 215, 225, 226, 239, 242, 264], "pth": 41, "668": 41, "224": [41, 194, 220], "336": 41, "448": 41, "pow_cos_sin": 41, "900": 41, "1800": [41, 69], "2700": [41, 116], "3600": [41, 73], "product_matrix_left": 41, "hamilton": [41, 52, 99], "to_matrix": [41, 130, 133, 136, 156, 201, 210, 215, 221, 270, 273, 275], "product_matrix_right": 41, "rotate_point": 41, "coordin": [41, 49, 69, 70, 74, 76, 77, 79, 83, 85, 101, 104, 116, 118, 120, 122, 126, 129, 133, 134, 135, 137, 139, 140, 141, 142, 143, 144, 146, 148, 151, 152, 153, 154, 157, 159, 167, 169, 188, 189, 192, 200, 201, 202, 203, 205, 207, 210, 213, 221, 222, 234, 242, 270, 272, 273, 276, 278, 280, 285, 287], "to_axis_angl": 41, "set_norm": 41, "to_eul": 41, "angle_addit": 41, "avoid_square_root": 41, "degener": [41, 244, 245], "gymbal": 41, "lock": 41, "atan2": [41, 46, 70, 74, 165, 226, 270], "bc": [41, 80, 120, 264, 267, 276], "mp": [41, 188, 244, 260], "bd": [41, 120, 191], "1371": 41, "pone": 41, "0276302": 41, "to_rotation_matrix": 41, "assumptionkei": 42, "proposit": [42, 44, 98], "is_tru": [42, 44, 45], "assumptionscontext": [42, 43, 44], "global_assumpt": [42, 43, 44], "discern": [42, 44], "refin": [42, 44, 68, 99, 213, 217, 221, 222, 238, 259, 282], "inherit": [42, 68, 75, 98, 101, 102, 111, 114, 129, 133, 137, 140, 180, 189, 211, 226, 246, 251, 259, 260], "askhandl": 42, "mere": [43, 44, 49, 51, 72, 186], "thin": [43, 104, 147, 160], "undefinedpred": [43, 44], "sexi": [43, 44], "sexyprimepred": [43, 44], "sexyprim": [43, 44], "int1": [43, 44], "int2": [43, 44], "assump": [43, 44], "r5": [43, 238], "predicate_": [43, 44], "28mathematical_log": [43, 44], "r6": 43, "sexy_prim": [43, 44], "resolut": [43, 44, 239], "askpredicatehandl": [43, 44], "r7": 44, "r8": 44, "notabl": [44, 49, 71, 76, 93, 109, 216], "truth_maintenance_system": 44, "istruepred": 45, "gt": [45, 49, 68, 226, 246, 264], "istruehandl": 45, "commutativepred": 45, "commutativehandl": 45, "finitepred": 45, "nor": [45, 47, 68, 98, 140, 165, 212, 215, 222, 233, 235, 242, 252, 270], "nan": [45, 46, 49, 68, 74, 76, 131, 134, 135, 238, 246, 292], "finitehandl": 45, "r9": 45, "infinitepred": 45, "infinitehandl": 45, "symmetricpred": 45, "transpos": [45, 48, 99, 101, 104, 124, 158, 174, 201, 210, 215, 221, 239, 247, 252, 253, 298], "diagon": [45, 73, 99, 100, 101, 104, 107, 139, 163, 215, 248], "symmetrichandl": 45, "r10": 45, "symmetric_matrix": 45, "invertiblepred": 45, "fullrank": [45, 49], "invertiblehandl": 45, "r11": 45, "invertible_matrix": 45, "orthogonalpred": 45, "tm": [45, 164], "mm": [45, 48, 108, 134, 143, 148, 149, 189, 215], "orthogonalhandl": 45, "r12": 45, "orthogonal_matrix": 45, "unitarypred": 45, "unitari": [45, 95, 108, 175, 180, 211], "unitaryhandl": 45, "r13": 45, "unitary_matrix": 45, "positivedefinitepred": 45, "tmz": 45, "positive_definit": 45, "positivedefinitehandl": 45, "r14": 45, "definite_matrix": 45, "uppertriangularpred": 45, "m_": [45, 112, 114, 154, 211, 219, 248], "ij": [45, 104, 191, 196, 211, 246, 248], "zeromatrix": [45, 101], "upper_triangular": [45, 99], "uppertriangularhandl": 45, "r15": 45, "uppertriangularmatrix": 45, "lowertriangularpred": 45, "lower_triangular": [45, 99], "lowertriangularhandl": 45, "r16": 45, "lowertriangularmatrix": 45, "diagonalpred": 45, "diagonalhandl": 45, "r17": 45, "diagonal_matrix": 45, "fullrankpred": 45, "rank": [45, 49, 50, 52, 57, 59, 60, 62, 63, 64, 83, 97, 104, 105, 201, 203, 213, 215, 217, 219, 221, 247, 251, 252, 298], "linearli": [45, 49, 76, 92, 104, 134, 215, 219, 242, 244, 252], "fullrankhandl": 45, "squarepred": 45, "squarehandl": 45, "r18": 45, "square_matrix": 45, "integerelementspred": 45, "integer_el": 45, "integerelementshandl": 45, "realelementspred": 45, "real_el": 45, "realelementshandl": 45, "complexelementspred": 45, "complex_el": 45, "complexelementshandl": 45, "singularpred": 45, "singular": [45, 49, 60, 68, 72, 74, 75, 76, 90, 91, 93, 95, 104, 116, 119, 155, 201, 213, 220, 233, 242, 245, 270, 287, 292], "singularhandl": 45, "fore": 45, "r19": 45, "singularmatrix": 45, "normalpred": 45, "normalhandl": 45, "r20": 45, "normal_matrix": 45, "triangularpred": 45, "triangularhandl": 45, "r21": 45, "triangular_matrix": 45, "unittriangularpred": 45, "unit_triangular": 45, "unittriangularhandl": 45, "evenpred": 45, "evenhandl": 45, "oddpred": 45, "oddhandl": 45, "primehandl": 45, "subject": [45, 68, 78, 84, 117, 128, 159, 221], "compositepred": 45, "compositehandl": 45, "positivepred": 45, "positivehandl": 45, "negativepred": 45, "negativehandl": 45, "zeropred": 45, "zerohandl": 45, "nonzeropred": 45, "nonzerohandl": 45, "nonpositivepred": 45, "nonpositivehandl": 45, "nonnegativepred": 45, "nonnegativehandl": 45, "integerpred": 45, "integerhandl": 45, "r22": 45, "rationalpred": 45, "rationalhandl": 45, "r23": 45, "irrationalpred": 45, "irrationalhandl": 45, "r24": 45, "realpred": 45, "disjoint": [45, 48, 57, 60, 222, 234, 264], "realhandl": 45, "r25": 45, "extendedrealpred": 45, "extendedrealhandl": 45, "hermitianpred": 45, "hermitianhandl": 45, "r26": 45, "hermitianoper": [45, 180], "complexpred": 45, "complexhandl": 45, "r27": 45, "imaginarypred": 45, "imaginaryhandl": 45, "r28": 45, "antihermitianpred": 45, "antihermitianhandl": 45, "r29": 45, "algebraicpred": 45, "askalgebraicpredicatehandl": 45, "r30": 45, "algebraichandl": 45, "transcendentalpred": 45, "transcedent": 45, "refine_pow": 46, "refine_ab": 46, "refine_arg": 46, "refine_atan2": 46, "refine_im": 46, "refine_matrixel": 46, "refine_r": 46, "refine_sign": 46, "lagrang": [47, 68, 132, 133, 135, 139, 147, 151, 222, 239, 287], "lagrangian": [47, 134, 136, 145, 150, 154, 155], "euler_equ": 47, "r31": 47, "93lagrange_equ": 47, "decreas": [47, 49, 60, 219], "monoton": [47, 49, 85], "is_decreas": 47, "lopen": [47, 68, 234, 241, 246], "ropen": [47, 74, 234, 246], "is_increas": 47, "72": [47, 51, 68, 81, 104, 108, 116, 211, 225], "is_monoton": 47, "is_strictly_decreas": 47, "is_strictly_increas": 47, "monotonicity_help": 47, "held": [47, 69, 155, 250, 302], "r32": 47, "mathematical_singular": 47, "interpol": [47, 73, 77, 158, 219, 222], "finite_diff_weight": [47, 68, 292], "apply_finite_diff": [47, 68, 292], "differentiate_finit": [47, 68, 292], "finite_diff": [47, 68], "x_list": [47, 292], "y_list": [47, 292], "xlist": 47, "55271367880050e": 47, "indexedbas": [47, 49, 67, 68, 226, 244, 250, 251, 258], "idx": [47, 49, 226, 250, 251, 258], "region": [47, 76, 85, 95, 116, 212, 234, 242, 245, 246, 270, 273, 280], "bewar": [47, 76], "phenomenon": [47, 196, 219, 229, 297], "90": [47, 59, 66, 76, 99, 104, 110, 116, 120, 128, 141, 159, 226, 228, 238, 246, 259], "finitediff": 47, "wrt": [47, 49, 68, 70, 76, 85, 104, 141, 158, 201, 202, 219, 222, 270, 272, 273, 277], "len": [47, 56, 57, 58, 59, 60, 64, 66, 68, 69, 73, 76, 83, 93, 98, 145, 160, 164, 175, 185, 215, 222, 238, 242, 251, 264], "nearest": [47, 221], "furthest": [47, 69], "sublist": [47, 64, 69, 95, 188, 292], "fd": [47, 49, 191], "0th": [47, 60, 69, 76], "forward": [47, 49, 99, 124, 143, 151, 184, 209, 238, 257], "pai": 47, "attent": [47, 59, 74], "gridpoint": 47, "plan": [47, 128, 217, 301], "mycoeff": 47, "3rd": [47, 60, 74, 108, 158, 222, 244, 247, 264], "poorer": 47, "grand": 47, "r33": 47, "51": [47, 104, 108], "184": [47, 242], "1988": [47, 170, 188, 219, 220], "699": 47, "706": [47, 104], "1090": [47, 108, 222], "s0025": 47, "5718": [47, 108], "0935077": 47, "continuous_domain": [47, 241], "function_rang": 47, "is_convex": [47, 84], "convex": [47, 84, 85, 95], "unspecifi": [47, 68, 83, 292], "multivari": [47, 68, 76, 213, 214, 216, 217, 218, 220, 222, 223, 233, 238, 244, 245, 246, 302], "concav": [47, 160], "r34": 47, "convex_funct": 47, "r35": 47, "ifp": 47, "illinoi": 47, "angelia": 47, "l3_convfunc": 47, "r36": 47, "logarithmically_convex_funct": 47, "r37": 47, "logarithmically_concave_funct": 47, "r38": 47, "concave_funct": 47, "lcim": 47, "mixtur": [47, 49, 85, 213, 259], "incommensur": 47, "not_empty_in": [47, 245], "finset_intersect": 47, "finite_set": [47, 234], "aperiod": 47, "smallest": [47, 62, 74, 81, 83, 90, 98, 104, 108, 188, 201, 217, 262, 264], "verif": [47, 215, 244], "reliabl": [47, 68, 242, 262, 292], "stationary_point": 47, "stationari": [47, 246], "tikz": 48, "joyofcat": 48, "adamek": 48, "herrlich": 48, "strecker": 48, "joi": 48, "cat": [48, 200], "katmat": 48, "uni": [48, 95, 264], "bremen": 48, "acc": [48, 158, 205, 209], "embryon": 48, "morphism": [48, 213], "codomain": [48, 213, 221], "arrow": [48, 97, 116, 212, 226], "namedmorph": 48, "prohibit": [48, 60, 61, 201], "identitymorph": 48, "compositemorph": 48, "compos": [48, 68, 69, 145, 155, 193, 196, 209, 213, 217, 221, 222, 223, 226, 228, 238], "circ": [48, 68, 79, 85, 93, 101], "flatten": [48, 68, 216, 248, 253, 264, 265], "new_nam": 48, "id_a": 48, "id_b": 48, "commutative_diagram": 48, "quadrupl": [48, 222], "mbox": 48, "hom": 48, "id": [48, 64, 74, 248], "rightarrow": [48, 60, 64, 69, 73, 74, 76, 90, 91, 93, 95, 98, 99, 108, 212, 221, 233, 245, 248, 264, 292], "monoid": 48, "pare1970": 48, "premis": 48, "conclus": [48, 68], "carri": [48, 49, 68, 183, 189, 196, 213, 216, 219, 221, 223, 224, 265], "premises_kei": 48, "et": [48, 95, 111, 112, 114, 170, 219, 222, 223, 235, 238], "pareigi": 48, "functor": 48, "1970": [48, 104], "is_subdiagram": 48, "subdiagram": 48, "d1": [48, 64, 201, 213, 233, 246, 270], "subdiagram_from_object": 48, "veryuniqu": 48, "diagram_draw": 48, "diagramgrid": 48, "drawn": [48, 59, 97, 212, 216, 224], "moprhism": 48, "strive": 48, "nevertheless": 48, "laid": [48, 141, 188], "emploi": [48, 67, 72, 95, 108, 222, 225, 242, 246], "lai": 48, "layout": 48, "sequenti": [48, 52, 69, 74, 270, 272], "test_draw": 48, "lemma": [48, 59, 93, 214], "fivelemma": 48, "five_lemma": 48, "arrowstringdescript": 48, "curving_amount": 48, "looping_start": 48, "looping_end": 48, "horizontal_direct": 48, "vertical_direct": 48, "label_posit": 48, "pic": 48, "princip": [48, 69, 74, 76, 93, 95, 105, 126, 143, 164, 213, 214, 215, 216, 217, 219, 221, 222, 223], "offset": [48, 49, 68, 73, 76, 129, 251], "cell": 48, "disregard": 48, "unexplain": 48, "astr": 48, "dr": [48, 70, 226, 242], "12mm": 48, "correspondingli": 48, "label_displac": 48, "arrow_styl": 48, "dash": 48, "xypicdiagramdraw": 48, "formatt": 48, "utilis": 48, "xypic": 48, "drawer": 48, "xymatrix": 48, "ld": 48, "arrow_formatt": 48, "therebi": 48, "default_arrow_formatt": 48, "farther": 48, "centr": [48, 65, 212], "default_formatt": 48, "_3mm": 48, "default_curving_amount": 48, "cm": [48, 158, 246], "_1cm": 48, "default_curving_step": 48, "1cm": 48, "rr": [48, 68, 86, 215, 216, 222, 223], "h_": [48, 59, 64, 73, 76, 95], "_2cm": 48, "mask": [48, 226], "diagram_format": 48, "proceed": [48, 50, 93, 95, 157, 220, 236], "xypic_draw_diagram": 48, "insert": [48, 50, 99, 110, 114, 116, 186, 191, 226, 246, 267], "preview_diagram": 48, "fab": [49, 226], "cse_main": [49, 227, 238], "cse": [49, 109, 128, 180, 227, 238, 259, 265], "meat": 49, "lightweight": [49, 221, 296], "pycod": [49, 226], "lambdarepr": [49, 226, 265], "aesara_funct": [49, 109, 226], "float80": [49, 226], "assign_to": [49, 226], "type_alias": [49, 226], "0l": [49, 226], "powl": [49, 226], "c99": [49, 226, 259], "expm1": [49, 226], "thrown": [49, 137, 226], "fcode": [49, 226], "contract": [49, 70, 111, 112, 114, 125, 191, 226, 235, 248, 250, 251, 252, 253], "len_i": [49, 226], "mat_1": 49, "mat_2": 49, "jscode": [49, 226], "user_funct": [49, 226], "argument_test": [49, 226], "cfunction_str": [49, 226], "octav": [49, 158, 259], "custom_funct": [49, 226], "existing_octave_fcn": [49, 226], "is_matrix": [49, 226], "my_mat_fcn": [49, 226], "my_fcn": [49, 226], "mat": [49, 101, 160, 185, 226], "octave_cod": [49, 226], "summat": [49, 67, 68, 72, 73, 76, 191, 220, 222, 226, 229, 238, 246, 247, 250, 251, 252, 258], "mathematica_cod": [49, 226], "gamma_1": [49, 127], "gamma_2": [49, 127], "\u03b3\u2081": 49, "\u03b3\u2082": 49, "\u03b2": [49, 211], "h_i": [49, 64], "c89": [49, 226, 259], "julia_cod": [49, 226], "rust_cod": [49, 226], "powi": [49, 226], "make_routin": [49, 259], "f95": [49, 258, 259], "matlab": [49, 128, 158, 259, 298], "breadth": [49, 68, 246], "c_name": [49, 259], "c_code": [49, 259], "h_name": [49, 259], "c_header": [49, 259], "volume_result": 49, "ifndef": [49, 259], "project__test__h": [49, 259], "endif": [49, 259], "preprocessor": [49, 227, 238, 259], "global_var": [49, 259], "insensit": [49, 104, 158, 226, 257, 259], "argument_sequ": [49, 259], "name_expr": [49, 259], "to_fil": [49, 259], "f_name": [49, 259], "f_code": [49, 259], "hydrogen": [49, 287], "r_nl": [49, 126, 192], "my_routin": 49, "result_var": [49, 259], "result\u2085\u2081\u2084\u2082\u2083\u2084\u2081\u2086\u2088\u2081\u2083\u2089\u2087\u2087\u2081\u2089\u2084\u2082\u2088": 49, "__________": [49, 214], "assoc_laguerr": [49, 76, 226], "fcn": [49, 259], "result_5397460570204848505": [49, 259], "out_8598435338387848786": [49, 259], "examin": [49, 69, 180, 257, 259, 302], "inputargu": [49, 259], "outputargu": [49, 259], "inoutargu": [49, 259], "disk": [49, 69, 234, 245, 265], "binary_funct": [49, 109, 258], "tensor": [49, 55, 70, 104, 125, 136, 156, 170, 176, 177, 178, 188, 191, 200, 201, 226, 247, 248, 250, 251, 258, 265, 274, 275, 281, 282, 285, 287], "binary_func": [49, 258], "servic": 49, "tempdir": [49, 258], "qho_1d": [49, 167], "psi_n": [49, 167], "qho": 49, "tmp": 49, "subroutin": [49, 59, 187, 219], "autofunc": 49, "hbar": [49, 167, 173, 186, 192, 196, 198, 211], "05457162d": 49, "14159265358979d0": 49, "0d0": [49, 226], "74126166983329d": 49, "33": [49, 68, 71, 104, 112, 135, 164, 200, 215, 219, 223, 226, 246], "mute": [49, 258], "backend": [49, 96, 109, 122, 139, 144, 146, 152, 206, 223, 258, 265], "auxiliari": [49, 95, 134, 141, 153, 242, 258], "sympy_express": [49, 258], "mandatori": [49, 226, 258], "illustr": [49, 104, 142, 145, 196, 216, 229, 233], "psi_nl": 49, "766": 49, "incur": [49, 109], "get_numpy_arrai": 49, "tight": 49, "temp": [49, 143], "alloc": [49, 74], "fuse": 49, "wise": [49, 50, 74, 99, 215, 219, 226, 232, 258], "unabl": [49, 81, 85, 110, 114, 244, 270, 291, 292], "fortun": [49, 109, 145, 222, 223], "reconnect": 49, "autom": [49, 74, 109, 235, 258, 296], "ideologi": [49, 245], "broadcast": [49, 109, 226, 251, 258], "outperform": 49, "quantit": [49, 193], "ufunc": [49, 109, 258, 265], "fn_numpi": 49, "fn_fortran": 49, "xx": [49, 104, 136, 201, 210, 264], "21306132": 49, "98101184": 49, "44626032": 49, "timeit": [49, 223], "10000": [49, 72, 108, 109, 116, 244], "18891601900395472": 49, "004707066000264604": 49, "facil": 49, "comparison": [49, 67, 68, 98, 104, 141, 213, 221, 225, 244, 257, 264], "thereof": [49, 68, 213, 219, 221], "optims_c99": 49, "log1p": [49, 226], "expm1_opt": 49, "log1p_opt": 49, "exp2_opt": 49, "log2_opt": 49, "log2const_opt": 49, "funcminusoneoptim": 49, "func_m_1": 49, "opportunist": 49, "replaceoptim": 49, "catastroph": 49, "replace_in_add": 49, "cost_funct": 49, "__call__": [49, 60, 68, 221], "exp2": [49, 226], "create_expand_pow_optim": 49, "base_req": 49, "is_symbol": [49, 99], "expand_opt": 49, "opt2": 49, "is_funct": 49, "log2": [49, 76, 226], "matin_opt": 49, "matinv_opt": 49, "matrixsolv": [49, 226], "matrix_nod": 49, "numpyprint": 49, "doprint": [49, 226], "seriesapprox": 49, "reltol": 49, "max_ord": 49, "n_point_check": 49, "threshold": [49, 108], "largest": [49, 60, 62, 68, 74, 76, 104, 107, 108, 171, 213, 217, 244, 264], "series_approx2": 49, "1e": [49, 68, 72, 104, 122, 160, 222, 244], "series_approx3": 49, "series_approx8": 49, "sumapprox": 49, "neglect": 49, "2000": [49, 54, 95, 108, 220], "sum_approx3": 49, "sum_approx2": 49, "sum_approx1": 49, "token": [49, 93, 96, 110], "codegenast": 49, "assignmentbas": 49, "augmentedassign": 49, "addaugmentedassign": 49, "subaugmentedassign": 49, "mulaugmentedassign": 49, "divaugmentedassign": 49, "modaugmentedassign": 49, "codeblock": [49, 110], "quotedstr": 49, "intbasetyp": 49, "_sizedinttyp": 49, "signedinttyp": 49, "unsignedinttyp": 49, "floatbasetyp": 49, "floattyp": 49, "complexbasetyp": 49, "complextyp": 49, "pointer": [49, 259, 260], "functionprototyp": 49, "functiondefinit": [49, 110], "stream": [49, 69, 227, 238, 264], "functioncal": 49, "breaktoken": 49, "continuetoken": 49, "nonetoken": 49, "float32": [49, 109, 110, 265], "codeprint": 49, "complex_": 49, "bool_": 49, "intc": [49, 110], "intp": 49, "unsign": [49, 73, 238], "int8": 49, "int16": 49, "int32": 49, "int64": [49, 246], "uint8": 49, "uint16": 49, "uint32": 49, "uint64": 49, "x86": 49, "amd64": 49, "complex64": 49, "complex128": 49, "newton": [49, 76, 151, 194, 198, 219, 223], "aug_assign": 49, "tol": [49, 68, 217], "val": [49, 68, 80, 212, 217, 221, 265], "whl": 49, "py_str": 49, "inf": [49, 60, 68, 104, 217, 219, 222, 234, 242, 246], "exec": [49, 68, 96, 265], "1121416371": 49, "909672693737": 49, "867263818209": 49, "865477135298": 49, "865474033111": 49, "1g": 49, "3e": 49, "2003": [49, 211, 220, 226, 239], "source_format": [49, 226], "op": [49, 68, 104, 180, 191, 205, 209, 235, 264, 265], "parametr": [49, 76, 77, 81, 104, 114, 212, 239, 245, 270, 273, 280], "volatil": 49, "binop": 49, "exit": [49, 108, 257], "premad": 49, "break_": 49, "lift": [49, 64, 74, 76, 93, 217, 219, 222], "left_hand_sid": 49, "topological_sort": [49, 264], "postprocess": [49, 212, 222, 227, 238], "topolog": [49, 68, 70, 215, 264], "continue_": 49, "untyp": 49, "compliant": 49, "elem": [49, 59, 213], "ijk": [49, 251], "stride": [49, 251], "lmn": 49, "cast_nocheck": 49, "nbit": 49, "storag": [49, 68, 104, 185, 211, 219], "nmant": 49, "mantissa": 49, "nexp": 49, "half_precis": 49, "f16": 49, "65504": 49, "tini": [49, 68, 217], "ep": [49, 59, 67, 217, 221, 222], "decimal_dig": 49, "cast_check": 49, "1e5": 49, "cast": [49, 101, 114, 294], "subnorm": [49, 59], "idempot": 49, "loos": [49, 68], "overflow": [49, 261], "max_expon": 49, "min_expon": 49, "for_i": 49, "for_ji": 49, "for_kji": 49, "function_arg": [49, 257], "fcall": 49, "baz": 49, "return_typ": 49, "fp": [49, 50, 68, 222, 228], "from_functionprototyp": 49, "prototyp": [49, 109, 259], "value_const": 49, "pointer_const": 49, "attr_param": 49, "looking_for": 49, "as_declar": 49, "formatstr": 49, "5g": 49, "throw": [49, 104, 110, 141, 215, 221, 239, 245], "runtimeerror_": 49, "runtime_error": 49, "stdout": [49, 51, 257], "stderr": 49, "oppos": [49, 129, 265, 292], "_field": 49, "_construct_": 49, "not_in_arg": 49, "float16": 49, "inttyp": 49, "super": [49, 76, 217, 226, 270, 272], "from_expr": [49, 222], "v6": 49, "123456": [49, 68, 108], "v10": 49, "67894": 49, "boost_mp50": 49, "boost": 49, "multiprecis": [49, 216], "cpp_dec_float_50": 49, "r39": 49, "rtol": 49, "atol": 49, "precision_target": 49, "v18": 49, "123456789012345646": 49, "123456789012345649": 49, "Will": [49, 104, 221, 226, 257], "decl1": 49, "decl2": 49, "alt": [49, 221], "secondarili": [49, 222], "mathcin": 49, "cbrt": [49, 74, 226], "minu": [49, 67, 68, 207, 215, 219, 226, 277], "0e": [49, 68], "fma": [49, 226], "hypot": [49, 226], "hypotenus": [49, 84, 140], "log10": [49, 226], "ten": [49, 109], "plu": [49, 67, 104, 110, 158, 171, 222, 226, 236, 264, 265], "famili": [49, 52, 86, 95, 214], "commaoper": 49, "goto": 49, "preincrement": 49, "postdecr": 49, "decrement": [49, 261], "postincr": 49, "increment": [49, 59, 60, 61, 67, 84, 108, 246], "predecr": 49, "alignof": 49, "sizeof": 49, "struct": [49, 211], "dsign": 49, "arrayconstructor": 49, "95": [49, 66, 108, 219, 226, 242, 244, 259], "do1": 49, "1d0": 49, "do2": 49, "extent": 49, "intent_out": 49, "dim": [49, 70, 83, 104, 109, 193, 199, 226, 249, 252, 285], "arr": 49, "fortranreturn": 49, "aid": [49, 143], "implieddoloop": 49, "idl": 49, "signallib": 49, "prog": [49, 170], "myprogram": 49, "mysub": 49, "subroutinecal": 49, "inout": 49, "bind_c": 49, "sum_": [49, 67, 68, 69, 73, 76, 93, 95, 99, 101, 108, 211, 222, 223, 228, 229, 236, 242, 246], "cmplx": [49, 226], "intent_in": 49, "isign": 49, "lbound": 49, "lb": [49, 90, 261], "literal_dp": 49, "num": [49, 59, 68, 108, 124, 217, 238, 242, 261, 267], "literal_sp": 49, "reshap": [49, 99, 141, 158, 247, 253, 264], "arrayexpr": 49, "shp": 49, "metric": [49, 60, 64, 70, 125, 238, 242, 245, 252], "snr": 49, "convolution2d": 49, "use_renam": 49, "ren": 49, "thingi": 49, "newtons_method": 49, "itermax": 49, "counter": [49, 68, 74, 80, 99, 117, 118, 120], "delta_fn": 49, "handle_nan": 49, "raphson": 49, "criterion": [49, 59, 157, 214, 219], "hallei": 49, "occurr": [49, 50, 68, 108, 141, 201, 238, 246], "netwon": 49, "algo": [49, 60], "r40": 49, "27s_method": 49, "newtons_method_funct": 49, "param": [49, 70, 104, 212, 239], "render_as_modul": 49, "py_mod": 49, "865474033102": 49, "render_as_source_fil": 49, "printer_set": 49, "fcodeprint": [49, 226], "fpgroup": [50, 59], "studi": [50, 58, 67, 70, 104, 210, 213, 219, 222, 239, 246], "combinator": [50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 73, 101, 108, 221, 228, 247, 252, 261, 264, 282, 296, 302], "free_group": [50, 58, 59], "vfree_group": 50, "xfree_group": 50, "fp_group": [50, 59], "coset_enumeration_r": 50, "fall": [50, 67, 68, 73, 96, 124, 206, 221, 226, 239, 243, 246], "famou": [50, 76, 95, 108, 239], "langl": [50, 59, 110, 170, 211], "rangl": [50, 59, 110, 170, 188, 211], "gen0": 50, "gen1": 50, "gen_": 50, "freegroup": 50, "x_2": [50, 58, 73, 90, 186, 214, 219, 222, 228, 239, 245], "x_3": [50, 58, 90, 186], "s_1": [50, 264], "r_1": [50, 213, 223], "s_2": 50, "r_2": 50, "s_k": 50, "r_k": [50, 184], "s_i": [50, 64, 95, 97], "r_i": [50, 223], "reduct": [50, 104, 135, 215, 219, 221, 239], "ho05": [50, 58], "cdhw73": 50, "consult": 50, "hav91": 50, "coset_enumeration_c": 50, "coset_enumer": 50, "relator_bas": 50, "coset_table_bas": 50, "coset_table_max_limit": 50, "4096000": 50, "safeti": [50, 60, 102], "max_coset": 50, "cox": [50, 220, 222], "c_r": [50, 236], "max_stack_s": 50, "500": [50, 72, 136], "deduction_stack": 50, "stack": [50, 85, 99, 139, 158, 215, 221, 226, 255, 261, 298], "exce": [50, 108, 252, 265], "modest": 50, "low_index_subgroup": 50, "conjugaci": [50, 51, 59], "coset_t": [50, 59], "reidemeister_present": 50, "p1": [50, 59, 60, 64, 67, 78, 80, 81, 82, 83, 84, 116, 124, 130, 133, 136, 140, 145, 158, 160, 205, 212, 216, 217, 219, 223, 235, 246, 247], "john": [50, 59, 76, 222, 239, 242], "cannon": 50, "lucien": 50, "dimino": [50, 59], "georg": [50, 213, 215, 242, 264], "hava": 50, "jane": 50, "watson": [50, 238], "comp": [50, 108, 242], "463": [50, 157], "490": [50, 60], "1973": [50, 69, 208], "derek": [50, 58], "holt": [50, 58, 59, 66], "chapman": [50, 58], "hall": [50, 58, 246], "crc": [50, 58, 60], "2005": [50, 58, 95, 108, 222], "xvi": [50, 58], "514": [50, 58, 220], "symposium": [50, 93, 219, 220, 236], "issac": [50, 95, 220, 244], "bonn": 50, "1991": [50, 220], "191": [50, 245], "199": 50, "acm": [50, 67, 93, 95, 215, 217, 220, 236, 238, 242, 244], "transit": [51, 59, 158, 219, 246], "subgroup": [51, 59, 60, 64, 66, 97, 108], "permutationgroup": [51, 53, 56, 58, 59, 60, 65, 66, 221], "s_n": [51, 67, 222, 264], "enum": [51, 221, 263, 289], "get_perm_group": [51, 221], "r41": 51, "cohen": [51, 105, 215, 220, 221], "s6transitivesubgroup": [51, 217], "qualnam": [51, 114], "boundari": [51, 79, 81, 114, 116, 117, 205, 223, 234, 242, 246], "s6": 51, "s5transitivesubgroup": 51, "s5": [51, 59], "s4transitivesubgroup": [51, 221, 222], "s4": [51, 60, 124], "s3transitivesubgroup": 51, "s3": [51, 59, 67, 124, 229, 239], "s2transitivesubgroup": [51, 221], "s1transitivesubgroup": [51, 221], "four_group": 51, "klein": [51, 60], "m20": 51, "metacycl": 51, "323": [51, 76, 108], "s3_in_s6": 51, "prism": 51, "a4_in_s6": 51, "a4": [51, 64, 68, 97, 158, 302], "find_transitive_subgroups_of_s6": 51, "s4m": 51, "s4p": 51, "a4xc2": 51, "s4xc2": 51, "g18": 51, "isomorph": [51, 59, 62, 213, 216, 219, 221], "semidirect": 51, "g36m": 51, "g36": 51, "g36p": 51, "c4": [51, 97, 99, 101, 112, 242], "g72": 51, "d4": [51, 97, 222, 246], "325": 51, "psl2f5": 51, "psl_2": 51, "_5": [51, 213], "a_5": 51, "pgl2f5": 51, "pgl_2": 51, "s_5": 51, "print_report": 51, "s_6": 51, "dihedr": [51, 56, 59, 60], "d_6": 51, "s_4": 51, "absenc": [51, 64, 98], "a_4": 51, "engag": 51, "eleg": [51, 223, 225], "a_6": 51, "g_": [51, 59, 66, 67, 76, 93, 104, 239], "c_3": [51, 93, 112, 242], "rtime": 51, "c_4": [51, 93, 112], "d_4": 51, "r43": 51, "projective_linear_group": 51, "exceptional_isomorph": 51, "r44": [51, 52], "automorphisms_of_the_symmetric_and_alternating_group": 51, "pgl": 51, "282": 51, "graycod": 52, "kw_arg": [52, 62, 191, 251, 252], "hamiltonian": [52, 182], "edg": [52, 61, 62, 97, 215, 226, 245, 264, 301], "vertex": [52, 62, 79, 84, 95, 215], "000": [52, 72, 95, 98, 185, 264], "110": [52, 98, 242, 244, 258, 264], "010": [52, 98, 264], "011": [52, 98, 185, 264], "111": [52, 71, 78, 98, 104, 108, 264], "101": [52, 76, 98, 108, 124, 185, 264], "001": [52, 72, 98, 160, 264], "statist": [52, 69, 76, 246, 257, 296], "generate_grai": 52, "0000": 52, "0001": [52, 72], "0011": [52, 63], "0010": 52, "0110": 52, "0111": [52, 185], "0101": [52, 185], "0100": 52, "1100": 52, "1101": 52, "1111": 52, "1110": 52, "1010": [52, 68], "1011": 52, "1001": 52, "nijenhui": 52, "wilf": [52, 67, 244], "1978": [52, 59, 196, 220], "r45": 52, "knuth": [52, 60, 261], "2011": [52, 60, 93, 104, 108, 208, 235], "art": [52, 60, 213, 226, 228, 261], "vol": [52, 60, 69, 73, 76, 93, 104, 108, 125, 135, 221, 222, 236, 261, 264], "addison": [52, 60, 108, 220], "weslei": [52, 60, 108, 220], "r46": 52, "brgc": 52, "6th": [52, 108], "unrank": [52, 57, 59, 60, 62], "r47": 52, "archiv": [52, 60, 69, 73, 76, 85, 95, 108, 157, 215, 238, 239, 246, 264, 298], "20200224064753": 52, "statweb": 52, "stanford": 52, "susan": 52, "s208": 52, "node12": 52, "tail": [52, 67, 68, 217, 246], "00010": 52, "random_bitstr": 52, "bitlist": [52, 63], "gray_to_bin": 52, "endian": 52, "bin_to_grai": 52, "get_subset_from_bitstr": 52, "bitstr": 52, "graycode_subset": 52, "group_construct": 53, "directproduct": [53, 56], "__mul__": [53, 59, 99, 104, 217, 221], "shift": [53, 59, 60, 62, 69, 76, 79, 83, 85, 98, 212, 217, 219, 222, 229, 236, 244, 246], "gn": 53, "named_group": [53, 56, 58, 59, 65, 66], "cyclicgroup": [53, 56, 59], "perm_group": [53, 58, 59, 60, 65, 66], "group_numb": 54, "is_nilpotent_numb": 54, "r48": 54, "randprim": [54, 108], "pakianathan": 54, "shankar": 54, "monthli": [54, 69, 104], "107": [54, 220], "631": 54, "634": 54, "is_abelian_numb": 54, "r49": 54, "is_cyclic_numb": 54, "r50": 54, "polyhedron": [55, 59, 95, 264, 282], "prufer": [55, 282], "grai": [55, 63, 96, 160, 206, 212, 282], "galoi": [55, 216, 217, 219, 222, 282], "nilpot": [55, 59, 104, 282], "abelian": [55, 56, 59, 97, 196, 213, 282], "cyclic": [55, 56, 59, 60, 61, 71, 99, 108, 252, 264, 282], "polycycl": [55, 59, 282], "symmetricgroup": [56, 58, 59, 65, 66], "transposit": [56, 59, 60, 69, 99, 101, 248], "is_group": [56, 59], "generate_schreier_sim": [56, 59], "af": [56, 59, 65, 158], "dihedralgroup": [56, 59, 66], "alternatinggroup": [56, 59, 65], "r51": 56, "symmetric_group": 56, "generators_and_rel": 56, "d_n": [56, 97, 222], "gon": 56, "bab": 56, "generate_dimino": [56, 59], "perm": [56, 58, 59, 60, 61, 66, 73, 99, 101, 104, 247], "cyclic_form": [56, 60, 61], "r52": 56, "dihedral_group": [56, 59], "ex": [56, 95, 125, 139, 216, 221, 222, 252, 260], "r53": 56, "armstrong": 56, "abeliangroup": [56, 59], "cyclic_ord": 56, "r54": 56, "groupprop": [56, 59], "subwiki": [56, 59], "structure_theorem_for_finitely_generated_abelian_group": 56, "multiset_partit": [57, 73, 93, 261, 264], "rg": 57, "growth": [57, 108, 215, 219, 292], "from_rg": 57, "abcd": [57, 61, 191, 248, 264, 267], "cbead": 57, "sort_kei": [57, 68, 242], "ti": [57, 60, 68, 108], "integerpartit": [57, 264], "summand": [57, 221], "r55": 57, "partition_": [57, 73], "28number_theori": 57, "as_dict": [57, 216, 222], "as_ferr": 57, "char": 57, "ferrer": 57, "next_lex": [57, 60], "lexic": [57, 171, 264], "prev_lex": 57, "random_integer_partit": 57, "85": [57, 72, 73, 104, 108, 143, 189, 211, 246], "rgs_gener": 57, "37": [57, 69, 74, 78, 104, 108, 117, 211, 226, 239], "52": [57, 73, 108, 116, 117, 211, 225, 239, 242, 264, 292], "151": 57, "203": [57, 73, 215], "rgs_enum": 57, "rgs_unrank": 57, "rgs_rank": 57, "pcgroup": 58, "pcg": 58, "pc_seri": [58, 59], "polycyl": 58, "pc_present": 58, "pc_sequenc": [58, 59], "miss": [58, 59, 85, 215, 226, 244, 259, 302], "adjac": [58, 59, 60, 68, 73, 124, 163, 215, 264], "der": [58, 59], "relative_ord": [58, 59], "polycyclic_group": [58, 59], "gen": [58, 59, 64, 65, 66, 68, 104, 213, 216, 217, 219, 221, 222, 223, 224, 232, 238, 241, 244], "is_ident": [58, 60, 68], "poss": [58, 143, 210], "pc_group": 58, "a_j": [58, 76, 93, 196, 219, 228, 236], "notin": [58, 93, 234], "_order": 58, "minimal_uncollected_subword": 58, "subword_index": 58, "i_1": [58, 191, 222, 247], "a_1": [58, 59, 69, 76, 90, 93, 99, 104, 125, 191, 196, 214, 219, 236, 239, 242, 246, 302], "i_r": 58, "a_r": [58, 236], "i_2": [58, 191, 222], "s_": [58, 64, 141, 219], "s_j": [58, 97, 219], "x3": [58, 68, 73, 216, 242, 244, 246], "collected_word": 58, "free_to_perm": 58, "pictur": [58, 226], "x_3x_2": 58, "x_3x_1": 58, "x_2x_1": 58, "x_3x_0": 58, "x_2x_0": 58, "x_1x_0": 58, "varii": 58, "derived_seri": [58, 59], "pc_resent": 58, "k_arrai": 58, "array_form": [58, 60, 61, 248], "v_arrai": 58, "e_1": [58, 104, 213, 219, 222], "e_n": [58, 73, 97, 104, 167, 213, 222], "exponent_vector": 58, "leading_expon": 58, "dup": [59, 217], "pn": [59, 145, 155], "motion": [59, 115, 128, 129, 133, 134, 135, 137, 139, 143, 144, 145, 146, 148, 150, 151, 152, 153, 154, 155, 158, 159, 205, 206, 209, 210, 246], "front": [59, 68, 143, 144, 160, 190, 217, 219, 222, 226, 238, 302], "face": [59, 61, 81, 95, 141, 219, 223, 226, 239, 280, 298], "rubik": 59, "3674160": 59, "pgroup": [59, 61], "p10": 59, "make_perm": 59, "r56": 59, "eick": [59, 66], "brien": [59, 66], "r57": 59, "seress": 59, "r58": 59, "schreier_vector": 59, "r59": 59, "nielsen_transform": 59, "product_replacement_algorithm": 59, "r60": 59, "frank": [59, 60, 104, 264], "celler": 59, "charl": 59, "leedham": 59, "scott": 59, "murrai": [59, 215], "alic": [59, 69], "niemey": 59, "r61": 59, "block_": 59, "28permutation_group_theori": 59, "r62": 59, "algorithmist": 59, "union_find": 59, "r63": 59, "multiply_transitive_group": 59, "r64": 59, "center_": 59, "28group_theori": 59, "centralizer_and_norm": 59, "derived_subgroup": 59, "nilpotent_group": 59, "colost": 59, "hulpk": 59, "cgt": 59, "cgtnote": 59, "__contains__": 59, "__weakref__": [59, 99], "weak": [59, 68, 99, 134, 216, 219], "_coset_repres": 59, "hg": 59, "transvers": [59, 64, 66, 118, 164, 165], "coset_transvers": 59, "_distinct_primes_lemma": 59, "_element": 59, "_eval_is_alt_sym_monte_carlo": 59, "05": [59, 90, 122, 208, 211], "mont": 59, "carlo": 59, "n_ep": 59, "_check_cycles_alt_sym": [59, 66], "_eval_is_alt_sym_na": 59, "only_sym": 59, "only_alt": 59, "_p_elements_group": 59, "_random_pr_init": 59, "_random_prec_n": 59, "modif": [59, 74, 104, 110, 245, 246, 261], "69": [59, 104, 215, 244, 261], "_random_gen": 59, "accumul": [59, 257, 261], "random_pr": 59, "chosen": [59, 60, 68, 69, 70, 81, 82, 104, 108, 116, 159, 193, 195, 196, 212, 213, 215, 217, 219, 221, 226, 233, 236, 242, 246, 257, 270], "gh": [59, 214, 245, 252], "eventu": [59, 76, 95, 110, 212, 213, 233, 259, 264], "_sylow_alt_sym": 59, "sylow": 59, "p_1": [59, 64, 69, 86, 108, 209, 236, 239], "p_2": [59, 69, 86, 108, 209, 236], "p_p": 59, "sylow_subgroup": 59, "is_alt_sym": [59, 66], "_union_find_merg": 59, "not_rep": 59, "atkinson": 59, "83": [59, 225], "87": [59, 74, 104, 108], "minimal_block": 59, "_union_find_rep": 59, "r65": 59, "r71": 59, "compress": [59, 104, 107, 120], "r67": 59, "r73": [59, 60], "_verifi": 59, "_h": [59, 245], "gens_k": 59, "rels_k": 59, "gens_h": 59, "inject": [59, 68, 213, 217, 222, 298], "homomorph": 59, "rels_h": 59, "strong_present": 59, "abelian_invari": 59, "t_1": [59, 73, 239], "t_2": [59, 73, 239], "t_r": [59, 156, 252], "542": 59, "adopt": [59, 252], "schreier": [59, 64, 66], "sim": [59, 64, 66, 93], "b_1": [59, 66, 76, 90, 93, 213, 236, 239, 242, 302], "b_2": [59, 66, 76, 90, 236, 242], "dot": [59, 60, 64, 66, 69, 81, 83, 90, 99, 104, 124, 134, 136, 139, 143, 144, 145, 148, 149, 150, 153, 154, 155, 158, 175, 200, 201, 203, 206, 209, 210, 211, 213, 214, 219, 222, 226, 245, 246, 264, 270, 274, 276, 277], "b_k": [59, 66, 69, 73, 76, 228, 229], "strong": [59, 64, 65, 66, 108, 109], "89": [59, 66, 95], "55": [59, 71, 73, 104, 211, 212, 222, 239], "57": [59, 104, 108, 246], "coset": [59, 64, 221], "strong_gen": [59, 65, 66], "basic_transvers": [59, 66], "basic_orbit": [59, 66], "basic_stabil": 59, "baseswap": 59, "po": [59, 93, 98, 99, 136, 137, 140, 156, 158, 217, 244], "strong_gens_distr": [59, 66], "swap": [59, 60, 61, 99, 104, 171, 175, 184, 215, 246, 264], "orbit": [59, 66, 191, 192, 194], "b_": [59, 64, 66, 68, 73, 76, 93, 101, 124, 228, 236, 239, 247, 248], "b_i": [59, 64, 66, 93, 213, 236], "la": [59, 158, 196], "vega": 59, "testutil": [59, 65, 66], "_verify_bsg": [59, 65, 66], "schreier_sim": [59, 65, 66], "bsg": [59, 64, 66, 252], "102": [59, 104], "98": [59, 69, 157, 222, 242], "pseudocod": 59, "beta_": 59, "foral": [59, 67, 70, 196], "zg": 59, "gz": 59, "c_g": 59, "sg": [59, 246, 252], "is_subgroup": 59, "subgroup_search": 59, "hgh": 59, "closur": [59, 65, 91, 171, 217, 221, 234], "composition_seri": 59, "h_0": [59, 64], "h_1": [59, 64, 245], "h_2": [59, 245], "1024": [59, 226, 246], "512": [59, 76], "128": [59, 68, 73, 76, 78, 108, 220, 226], "243": [59, 76, 244], "81": [59, 73, 78, 99, 104, 108, 141, 143, 211, 215, 225], "conjugacy_class": 59, "xax": 59, "s_3": 59, "feasibl": [59, 124], "resiz": [59, 60, 99, 101], "coset_factor": 59, "factor_index": 59, "_basic_orbit": 59, "u1": [59, 108, 141, 143, 144, 145, 146, 148, 149, 153, 155, 158, 201, 203, 205, 206, 209, 242], "u2": [59, 107, 108, 141, 143, 144, 145, 146, 148, 149, 153, 158, 201, 205, 209, 242], "_strip": [59, 66], "coset_rank": 59, "lexicograph": [59, 60, 63, 64, 68, 219, 222, 264], "coset_unrank": 59, "standardis": [59, 216], "subsect": [59, 277], "compris": [59, 69, 101, 124, 136, 156, 159, 222, 264], "g_0": [59, 239], "g_1": [59, 222, 233, 239, 242], "g_2": [59, 97, 233, 242], "g_i": [59, 233], "g_k": 59, "tetrahedron": [59, 61], "r69": 59, "axiom": [59, 213], "doy": 59, "sc": [59, 95], "thesi": [59, 68, 233, 270], "generator_product": 59, "sn": [59, 60, 67, 90], "is_abelian": 59, "_random_prec": 59, "82": [59, 95, 104, 246], "proport": [59, 69, 129, 233, 265], "226": 59, "227": 59, "is_altern": 59, "quicker": [59, 108], "taxonomi": 59, "is_cycl": 59, "p_": [59, 64, 68, 95, 196, 239, 242, 247], "p_i": [59, 64, 108], "equiv": [59, 69, 73, 108, 221, 236, 239], "pmod": [59, 68, 69, 73, 104, 108, 236], "p_j": [59, 64], "r70": 59, "35": [59, 62, 71, 73, 81, 82, 95, 104, 108, 143, 221, 226, 239, 242, 246], "rose": 59, "is_dihedr": 59, "di1": 59, "827273": 59, "di2": 59, "kconrad": [59, 246], "uconn": [59, 246], "blurb": [59, 246], "grouptheori": 59, "di3": 59, "dihedral2": 59, "di4": 59, "is_elementari": 59, "is_nilpot": [59, 104], "lower_central_seri": 59, "is_solv": 59, "is_norm": [59, 189], "gr": 59, "is_perfect": [59, 108], "is_polycycl": 59, "is_primit": [59, 217, 222], "cardin": [59, 60, 63, 213, 234], "badli": 59, "random_stab": 59, "is_symmetr": [59, 99], "is_transit": 59, "is_trivi": 59, "cba": [59, 247, 264], "mainli": [59, 76, 104, 109, 196, 206, 219, 236, 239, 242], "max_div": 59, "siev": [59, 108], "nonempti": [59, 264], "moreov": [59, 69, 93, 207, 213, 214, 219, 227, 275], "congruenc": [59, 68, 108, 236, 239], "p_0": [59, 64, 86, 236, 239], "intransit": 59, "normal_closur": 59, "adjoin": [59, 214], "yx": [59, 201, 210], "73": [59, 67, 68, 81, 108, 242], "74": [59, 73, 108, 124], "orb": 59, "orbit_transvers": 59, "orbit_rep": 59, "send": [59, 68, 69, 74, 108, 213, 242, 244], "79": [59, 60, 117], "pointwise_stabil": 59, "pointwis": [59, 66], "p_k": [59, 108], "p20": 59, "stab": 59, "schreier_sims_increment": [59, 66], "polycyclicgroup": 59, "eliminate_gen": 59, "gen_count": 59, "b1": [59, 64, 76, 108, 116, 117, 130, 141, 158, 201, 217, 226, 236, 239, 242, 276], "b_r": 59, "slp_dict": 59, "93": [59, 220], "schreier_sims_random": [59, 66], "consec_succ": 59, "consec": 59, "_succ": 59, "97": [59, 68, 69, 108, 219], "sift": [59, 66, 264], "amend": 59, "unsuccess": [59, 66], "accordingli": [59, 214, 221], "halt": 59, "signifi": [59, 68, 116, 222, 246], "g_t": 59, "leq": [59, 67, 69, 76, 93, 104, 108, 211, 219, 221, 232, 233, 239, 246], "prop": [59, 221], "init_subgroup": 59, "supergroup": 59, "sought": [59, 108, 176, 186, 215, 238, 244, 245], "prune": 59, "prop_even": 59, "lengthi": 59, "114": [59, 108], "117": [59, 76], "terribl": 59, "crucial": [59, 67, 216], "len1": 59, "len2": 59, "len3": 59, "transitivity_degre": 59, "fold": [59, 68, 74, 112, 226, 233, 238], "a_2": [59, 69, 90, 104, 219, 236, 239, 242, 246, 302], "a_k": [59, 69, 223, 229], "r74": 60, "pretty_print": [60, 96, 136, 139, 143, 144, 148, 149, 150, 152, 153, 154, 156, 159, 201, 203, 205, 206, 209, 210, 226], "understood": [60, 108, 196, 213, 217, 222], "economi": 60, "caution": [60, 68, 74, 226, 238], "indexerror": [60, 104, 222], "autos": [60, 107], "watch": 60, "print_cycl": 60, "econom": [60, 95, 264], "retain": [60, 68, 74, 76, 95, 108, 110, 222, 227, 235, 238], "biject": [60, 62, 69, 99, 213], "full_cyclic_form": 60, "rmul": [60, 215], "unrank_lex": 60, "r78": 60, "zo42": 60, "from_sequ": 60, "a1": [60, 64, 68, 96, 99, 108, 117, 141, 158, 165, 242, 246, 247, 276, 302], "a2": [60, 64, 68, 97, 99, 108, 117, 141, 158, 165, 215, 246, 247, 276, 302], "a3": [60, 64, 68, 97, 99, 158, 276, 302], "perfectli": [60, 67, 68, 69, 219, 222, 225], "skiena": 60, "ma": [60, 67, 146], "1990": [60, 93, 236, 270], "r75": 60, "wendi": 60, "myrvold": 60, "ruskei": [60, 264], "2001": [60, 108, 220], "lett": [60, 104], "septemb": [60, 261], "281": 60, "284": [60, 108], "1016": [60, 104, 264], "s0020": 60, "0190": 60, "01": [60, 68, 72, 141, 185, 220, 238, 264], "00141": 60, "r76": 60, "kreher": 60, "stinson": 60, "1999": [60, 104, 220, 225, 242], "r77": 60, "graham": [60, 73, 74, 108], "patashnik": 60, "foundat": [60, 220, 221], "1994": [60, 219, 220, 222], "php": [60, 108, 239, 246], "oldid": 60, "499948155": 60, "product_and_invers": 60, "r79": 60, "lehmer_cod": 60, "appliedpermut": 60, "magic": [60, 238, 257, 294], "_array_form": 60, "ascent": 60, "ie": [60, 239], "descent": [60, 239], "fg": [60, 70, 242, 245], "r80": 60, "commutes_with": [60, 252], "cycle_structur": 60, "from_inversion_vector": 60, "get_adjacency_dist": 60, "n_adj": 60, "reev": 60, "colin": 60, "landscap": 60, "annal": [60, 111, 112, 114], "86": [60, 104, 157, 225, 235], "473": 60, "josephu": 60, "get_precedence_matrix": 60, "get_precedence_dist": 60, "get_adjacency_matrix": 60, "get_positional_dist": 60, "inversion_vector": 60, "lesser": [60, 120, 222], "lehmer": [60, 68], "ith": [60, 97, 108, 215, 217, 223, 245, 246], "variat": [60, 68, 219, 233, 242], "r81": 60, "eng": 60, "chula": 60, "prabha": 60, "algo2008": 60, "htm": [60, 76, 95, 239], "is_singleton": 60, "is_odd": 60, "shuffl": [60, 104, 302], "012345": 60, "345": 60, "253": 60, "2531": 60, "25314": 60, "253140": 60, "r82": 60, "flavius_josephu": 60, "r83": 60, "josephus_problem": 60, "r84": 60, "20171008094331": 60, "wou": 60, "burtonl": 60, "trim": [60, 155], "unmov": 60, "mul_inv": 60, "next_nonlex": 60, "nonlex": 60, "rank_nonlex": 60, "unrank_nonlex": 60, "next_trotterjohnson": [60, 264], "trotter": 60, "johnson": [60, 104], "generate_bel": [60, 264], "rank_trotterjohnson": 60, "unrank_trotterjohnson": 60, "_af_par": 60, "pseudo": [60, 104, 108, 217, 219, 222], "inv_perm": 60, "enforc": [60, 143], "rmul_with_af": 60, "ascend": [60, 95, 264], "r85": 60, "transposition_": 60, "flexibl": [60, 68, 139, 141, 158, 209, 212, 216, 245, 292], "cn": [60, 226, 301], "2n": [60, 67, 73, 76, 95, 99, 120, 125, 154, 211, 229, 236], "dn": [60, 246], "polyhedr": 61, "psg": 61, "platon": 61, "solid": [61, 82, 133, 140, 212, 280], "tetrahedr": 61, "octahedr": 61, "icosahedr": 61, "r86": 61, "polyhedralgroup": 61, "polyhedra": 61, "h5": 61, "heinz": 62, "caylei": [62, 99], "r87": 62, "labeledtre": 62, "tree_repr": 62, "prufer_rank": 62, "prev": [62, 68], "prufer_repr": 62, "to_pruf": 62, "778": 62, "779": 62, "777": [62, 71], "1296": 62, "to_tre": 62, "r88": 62, "hamberg": 62, "erlend": 62, "2010": [62, 243, 264], "06": [62, 68, 112, 143, 211, 246], "compact": [62, 68, 121, 134, 158, 189, 206, 222, 226, 244, 261], "next_binari": 63, "prev_binari": 63, "bitlist_from_subset": 63, "subset_from_bitlist": 63, "superset_s": 63, "iterate_binari": 63, "iterate_graycod": 63, "prev_grai": 63, "next_grai": 63, "next_lexicograph": 63, "prev_lexicograph": 63, "rank_binari": 63, "unrank_binari": 63, "rank_grai": 63, "unrank_grai": 63, "rank_lexicograph": 63, "43": [63, 104, 108, 116, 117, 246, 302], "super_set": 63, "subset_indic": 63, "ksubset": 63, "itertool": [63, 264], "tensor_can": [64, 252], "msym": 64, "contravari": [64, 104, 252, 253], "covari": [64, 70, 104, 246, 252, 253], "d0": 64, "base_i": 64, "gens_i": 64, "n_i": [64, 219, 244], "sym_i": 64, "canonicalize_na": 64, "exchang": [64, 69, 104, 211, 215, 264], "anticommut": [64, 178, 180, 190, 191, 252, 287], "canonical_fre": 64, "slot": [64, 175, 247, 251, 252, 297], "tensor_gen": 64, "list_free_indic": 64, "double_coset_can_rep": 64, "reintroduc": 64, "antisymmetr": [64, 70, 99, 191, 252], "d2": [64, 201, 213, 233, 246, 264, 270], "ord": [64, 69, 104], "t_c": 64, "get_symmetric_group_sg": [64, 252], "bsgs_direct_product": 64, "base2a": 64, "gens2a": 64, "t0": 64, "t1": [64, 84, 85, 108, 130, 136, 239, 246], "a_m": [64, 242], "a_n": [64, 69, 76, 93, 97, 196, 214, 219, 221, 229, 239, 242, 302], "_a": [64, 76, 191, 222], "_b": [64, 76, 191], "base_f": 64, "gens_f": 64, "base1": 64, "gens1": 64, "base_a": 64, "gens_a": 64, "sgen": 64, "s_transvers": 64, "butler": [64, 252], "portug": [64, 252], "grow": [64, 68, 93, 104, 108, 216, 219], "observ": [64, 68, 90, 93, 180, 210, 213, 236, 239, 242, 246, 279, 302], "ind": [64, 228, 252], "d3": [64, 233], "a0": [64, 111, 242, 302], "a5": [64, 68], "leftrightarrow": 64, "_af_rmul": 64, "t_": [64, 73, 114], "b0": [64, 76, 217, 236, 242], "d_": [64, 236], "p0": [64, 78, 221, 242], "dbase": 64, "recomput": [64, 222], "d_i": [64, 93, 196], "s_0": 64, "d_0": [64, 69], "b_0": [64, 69, 73, 236, 239, 242], "b_j": [64, 66, 76, 93, 236], "sx": 64, "trace": [64, 99, 101, 125, 158, 219, 226, 246, 247, 248, 250, 264, 298], "h_n": [64, 76, 95, 222, 245], "tab1": 64, "get_transvers": 64, "antisym": 64, "base2": 64, "gens2": 64, "_cmp_perm_list": 65, "ls1": 65, "ls2": 65, "_naive_list_centr": 65, "_verify_centr": 65, "_verify_normal_closur": 65, "_base_ord": 66, "base_ord": 66, "backtrack": 66, "108": [66, 117], "132": [66, 73, 201], "r89": 66, "_distribute_gens_by_bas": 66, "_strong_gens_from_distr": 66, "_orbits_transversals_from_bsg": 66, "_handle_precomputed_bsg": 66, "transversals_onli": 66, "slp": 66, "_remove_gen": 66, "new_gen": 66, "r90": 66, "r91": 66, "recurr": [67, 73, 90, 104, 221, 232, 238, 242, 246, 266], "annihil": [67, 86, 87, 91, 167, 191, 244], "is_hypergeometr": 67, "binomi": [67, 68, 72, 73, 76, 108, 110, 222, 226, 231, 238, 242, 246, 264, 302], "ff": [67, 69, 73, 211, 214, 215, 216, 221, 222], "rise": [67, 73, 76, 211, 238, 242, 246, 274], "hypersimp": [67, 238], "quotient": [67, 68, 71, 74, 108, 213, 214, 216, 219, 222, 236, 238, 242], "dummy_vari": 67, "karr": 67, "exclus": [67, 68, 74, 98, 104, 219, 294], "typeset": [67, 226], "seemingli": [67, 245], "r92": 67, "michael": [67, 220, 225], "april": 67, "1981": [67, 220], "305": 67, "350": [67, 136], "dl": [67, 210, 215, 217, 220, 238], "1145": [67, 215, 217, 220, 238], "322248": 67, "322255": 67, "r93": 67, "sigma_not": 67, "r94": 67, "empty_sum": 67, "euler_maclaurin": [67, 72], "eval_integr": 67, "maclaurin": [67, 72], "endpoint": [67, 68, 72, 81, 129, 207, 234, 277], "28333333333333": 67, "sstr": [67, 206, 226], "full_prec": [67, 226], "26629073187415": 67, "0175000000000000": 67, "soon": [67, 68, 141, 196, 223], "eval_zeta_funct": 67, "is_absolutely_converg": 67, "sequence_term": 67, "is_converg": 67, "r95": 67, "absolute_converg": 67, "analogi": [67, 219], "prod_": [67, 73, 76, 93, 108, 196, 236], "diverg": [67, 76, 160, 202, 270, 273], "dirichlet": [67, 76, 246], "r96": 67, "convergence_test": 67, "reverse_ord": 67, "selector": [67, 99, 238, 264], "s0": [67, 91, 93, 163], "expr_with_intlimit": [67, 95], "exprwithintlimit": [67, 95], "reorder_limit": 67, "r97": 67, "walli": 67, "w2": [67, 165], "w2e": 67, "risingfactori": [67, 73, 76, 226, 228], "combsimp": [67, 68, 73, 238], "pe": 67, "gammasimp": [67, 68, 238], "r98": 67, "r99": 67, "capital_pi_not": 67, "r100": 67, "empty_product": 67, "r101": 67, "infinite_product": 67, "r102": 67, "expr_with_limit": [67, 95], "exprwithlimit": [67, 95], "change_index": 67, "trafo": 67, "newvar": 67, "mapsto": [67, 93, 99, 221], "p3": [67, 78, 80, 81, 83, 84, 124, 136, 212, 216, 235, 246], "has_empty_sequ": [67, 95], "has_reversed_limit": [67, 95], "has_finite_limit": [67, 95], "____": [67, 72, 95, 163, 214, 227, 246, 264, 303], "___": [67, 72, 95, 96, 104, 214, 238, 246, 251, 264, 301], "rubric": [67, 68], "_____": [67, 246], "gosper": 67, "gosper_norm": 67, "monic": [67, 76, 213, 214, 217, 219, 221, 222, 225], "gcd": [67, 68, 69, 104, 108, 187, 215, 216, 217, 220, 221, 222, 226, 238, 239], "gosper_term": 67, "f_k": [67, 134, 153, 219], "g_n": [67, 73, 222], "f_n": [67, 73, 76, 213, 219, 222, 242], "gosper_sum": 67, "r103": 67, "marko": 67, "petkovsek": [67, 244], "herbert": 67, "doron": 67, "zeilberg": [67, 244], "ak": [67, 228], "peter": [67, 73, 76, 108, 157, 208, 215, 222, 264], "ltd": 67, "welleslei": 67, "usa": [67, 220], "1997": [67, 93, 108, 220, 236], "convert_xor": [68, 110], "09": [68, 122, 211], "xor": [68, 71, 98, 110, 226, 294], "sympifyerror": 68, "coerc": [68, 155, 219], "cooper": 68, "shouldn": [68, 223], "unsanit": [68, 265, 291], "bitcount": 68, "improperli": 68, "unbound": [68, 244, 251], "23903": 68, "fallback": [68, 96, 191, 206, 216, 226, 244], "ast": [68, 226], "mylist1": 68, "mylist": 68, "mylist2": 68, "xxx": [68, 95, 104, 264, 266], "autosimplif": [68, 235, 238], "kern": 68, "r106": 68, "7649": 68, "r105": 68, "r109": 68, "r107": 68, "r108": 68, "r110": 68, "r111": 68, "r112": 68, "r104": 68, "negativeinfin": [68, 226], "complexinfin": [68, 124], "_assumptions_orig": 68, "recreat": [68, 133], "isfinit": 68, "__cacheit": 68, "maxsiz": 68, "cacheit": 68, "sympy_use_cach": 68, "_arg": [68, 74], "as_mut": [68, 100, 101], "as_content_primit": [68, 104, 214, 222], "stub": 68, "as_dummi": [68, 95], "_0": [68, 73, 93, 99, 104, 222, 265], "_r": [68, 191, 236, 245], "bound_symbol": [68, 95], "typeinfo": 68, "truli": [68, 76, 196], "piec": [68, 72, 236, 259], "numbersymbol": [68, 226], "scan": [68, 215], "appliedundef": 68, "canonical_vari": 68, "class_kei": 68, "ordering_of_class": [68, 79], "eg": [68, 141, 198, 245], "fromit": 68, "has_fre": 68, "has_xfre": 68, "exp_polar": [68, 74, 76, 236], "dif": 68, "_prec": 68, "is_sam": 68, "equal_valu": 68, "125": [68, 72, 95, 108, 217, 232, 239], "isclos": 68, "r_": [68, 126, 192, 223], "repl_dict": 68, "rcall": [68, 70], "simul": [68, 141, 158, 225], "abus": [68, 252], "succe": [68, 93, 98, 108, 181, 221, 244], "newtyp": 68, "intuit": [68, 156, 196, 242], "is_mul": 68, "is_add": [68, 245], "mysin": [68, 265, 291], "_eval_rewrite_as_": 68, "_eval_rewrite_as_co": 68, "tie": [68, 264], "delai": [68, 111, 122, 155, 235, 257, 292], "unsort": [68, 128, 200], "333333333333333333333": 68, "333333333333333314830": 68, "wildcard": [68, 238], "evalfmixin": 68, "registri": 68, "metaprogram": 68, "mostli": [68, 74, 95, 104, 158, 186, 209, 213, 215, 225, 226, 236, 244, 301], "__truediv__": [68, 217], "metaclass": 68, "class_nam": 68, "mysingleton": 68, "_eval_is_g": 68, "_eval_is_eq": 68, "args_cnc": 68, "cset": 68, "split_1": 68, "suppress": [68, 110, 255, 262], "as_coeff_add": 68, "dep": [68, 242], "as_coeff_expon": 68, "as_coeffici": 68, "coeff_monomi": [68, 222], "polytool": [68, 215, 222, 245], "as_coefficients_dict": 68, "inquiri": 68, "expand_mul": [68, 93], "121": [68, 73, 108, 124, 201, 244], "84": [68, 72, 108], "separatevar": [68, 238, 242], "n3": [68, 141, 212], "logx": [68, 233], "cdir": 68, "_eval_as_leading_term": 68, "as_numer_denom": [68, 244], "as_ordered_factor": 68, "as_ordered_term": 68, "as_powers_dict": 68, "lost": 68, "as_real_imag": [68, 74, 99, 227], "as_term": 68, "aseri": 68, "hir": 68, "asymptot": [68, 93, 124, 292], "hierarch": 68, "normalis": [68, 228], "induc": [68, 99, 221, 235, 264], "gruntz": [68, 228], "majorli": 68, "mrv": [68, 233], "overal": [68, 198, 212, 244], "till": [68, 116, 117, 141, 242], "r113": 68, "dominik": [68, 228], "proc": [68, 217, 244], "1993": [68, 220], "symp": [68, 217], "239": 68, "244": [68, 219], "r114": 68, "p90": 68, "r115": 68, "asymptotic_expans": 68, "_first": [68, 74], "factor_term": [68, 149, 222, 235, 238], "distribute_order_term": [68, 238], "compute_leading_term": 68, "could_extract_minus_sign": 68, "signsimp": [68, 149, 238], "failing_express": 68, "modulu": [68, 69, 71, 76, 78, 84, 99, 108, 116, 117, 213, 217, 219, 221, 222, 225, 245], "power_bas": [68, 99], "power_exp": [68, 99], "multinomi": [68, 99, 108, 246], "extract_addit": 68, "extract_multipl": 68, "extract_branch_factor": 68, "allow_half": 68, "fourier_seri": [68, 229], "geto": 68, "getn": 68, "mod_invers": [68, 222], "is_algebraic_expr": 68, "is_rational_funct": 68, "r116": 68, "algebraic_express": 68, "is_const": 68, "constanc": 68, "failing_numb": 68, "is_meromorph": 68, "meromorph": [68, 76], "multivalu": [68, 74], "cut": [68, 73, 74, 76, 84, 93, 213, 236, 261, 267, 302], "hit": [68, 297], "is_polynomi": 68, "rational_funct": 68, "leadterm": 68, "xlim": [68, 212], "lseri": 68, "exaxmpl": 68, "nseri": 68, "_eval_nseri": 68, "innermost": 68, "disadvantag": 68, "met": [68, 120, 239, 245, 260, 302], "poleerror": 68, "nsimplifi": [68, 72, 238], "radsimp": [68, 238], "removeo": [68, 158, 226, 292], "chop": [68, 72, 76, 99, 104, 244, 291], "lazi": [68, 101, 222], "smooth": [68, 72, 108, 111, 228], "taylor_term": [68, 74], "previous_term": [68, 74], "wildfunct": 68, "dummy_index": 68, "_dummy_10": 68, "contigu": [68, 236, 259], "x4": [68, 73, 216, 244], "x5": [68, 73, 216], "x6": [68, 216], "x7": [68, 216], "x8": [68, 216], "x9": [68, 216], "x50": 68, "x51": 68, "y3": [68, 216], "y4": 68, "xa": [68, 214, 219], "xb": [68, 267], "xc": [68, 190, 267], "disambigu": 68, "x01": 68, "x02": 68, "x11": 68, "x12": 68, "escap": [68, 110, 212, 226, 267], "undefinedfunct": [68, 203, 226, 258, 265], "f821": [68, 260], "num_digit": [68, 108], "count_digit": [68, 108], "63": [68, 71, 104], "factor_": [68, 69, 108, 222, 239], "ilcm": [68, 108], "igcd": [68, 108, 214], "greatest": [68, 73, 78, 108, 214, 216, 217, 219, 220, 222, 225], "euclid": [68, 219, 220], "r117": 68, "euclidean_algorithm": 68, "igcd_lehm": 68, "rn": [68, 70], "floor": [68, 74, 108, 110, 133, 216, 217, 226, 246], "r118": 68, "qn": 68, "enhanc": [68, 219, 246], "anew": 68, "27s_gcd_algorithm": 68, "igcdex": 68, "2004": [68, 76, 220, 239], "isqrt": [68, 108], "lfloor": [68, 74, 110, 217, 245, 246], "rfloor": [68, 74, 110, 217, 245, 246], "integer_nthroot": [68, 74, 108], "integer_log": 68, "geq": [68, 69, 76, 104, 222, 239, 246, 302], "perfect_pow": [68, 108], "r119": 68, "modular_multiplicative_invers": 68, "r120": 68, "extended_euclidean_algorithm": 68, "cofactor": [68, 104, 215, 217, 219, 222], "lcm": [68, 108, 217, 219, 222, 226], "50000000000000": [68, 72], "100000000000000000000": 68, "1e20": 68, "00000000000000e": 68, "23456789123456789": 68, "23456789123457": 68, "00100": 68, "sent": [68, 95, 238, 244], "789": [68, 108], "123_456": 68, "123456789": 68, "12e": 68, "012": 68, "60e2": 68, "6000": 68, "600e": 68, "099609": 68, "12500": 68, "12500000000000000000": 68, "5404319552844595": 68, "54": [68, 104, 117, 219, 225, 264], "29999999999999998890": 68, "30000000000000000000": 68, "_mpf_": [68, 216], "4915": 68, "70": [68, 69, 85, 95, 104, 108, 225, 226, 239, 246, 267], "307": 68, "mpf": [68, 216, 217], "is_float": 68, "unprejud": 68, "3602879701896397": 68, "18014398509481984": [68, 238], "limit_denomin": 68, "320": 68, "75": [68, 71, 215, 246, 270], "use_tri": [68, 108], "use_rho": [68, 108], "use_pm1": [68, 108], "factorint": [68, 108, 221, 222, 261], "trial": [68, 108, 219, 231, 235, 242, 246], "max_denomin": 68, "1000000": [68, 108], "141592653589793": 68, "311": [68, 108], "discard": [68, 215, 221, 226, 245], "99999999999999999999": 68, "algebraicnumb": [68, 217, 221, 225], "hookrightarrow": 68, "minpoli": [68, 216, 217, 221], "dmp": [68, 213, 217, 222], "anp": [68, 216, 217, 221, 222], "minpoly_of_el": 68, "414213562": 68, "scratch": [68, 196], "6x": [68, 219], "to_number_field": [68, 221], "to_root": 68, "primitive_el": [68, 216, 217, 221], "knew": [68, 302], "golden": [68, 72, 108], "5th": [68, 158, 219, 221], "cyclotom": [68, 217, 219, 220, 221, 222], "cyclotomic_poli": [68, 221, 222], "61803398874989": 68, "2i": 68, "a6": 68, "a6_wrong": 68, "309016994374947": 68, "951056516295154": 68, "field_el": 68, "is_alias": 68, "is_primitive_el": 68, "native_coeff": 68, "to_algebraic_integ": 68, "to_primitive_el": 68, "Its": [68, 74, 84, 158, 189, 215, 219, 226, 234], "a_prim": 68, "number_cl": 68, "realnumb": 68, "seterr": 68, "r121": 68, "r122": 68, "1_": 68, "28number": 68, "negativeon": [68, 74, 297], "r123": 68, "88": [68, 104, 108], "921_": 68, "r124": 68, "one_half": 68, "holder": 68, "ieee": [68, 69], "754": 68, "r125": 68, "affin": [68, 69, 83, 213], "compactif": 68, "r126": 68, "tild": [68, 74, 112, 114, 247], "exp1": [68, 226], "718281828": 68, "napier": 68, "r127": 68, "e_": [68, 73, 104], "28mathematical_const": 68, "r128": 68, "imaginary_unit": [68, 226], "141592654": 68, "circumfer": [68, 78, 140], "diamet": [68, 78], "area": [68, 78, 80, 84, 85, 116, 117, 139], "is_irr": 68, "r129": 68, "mascheroni": [68, 76], "5772157": 68, "recur": 68, "harmon": [68, 73, 108, 126, 170, 211, 226, 287], "lim": [68, 110, 233, 292], "limits_": [68, 110, 211, 228, 296], "ln": [68, 74, 95, 110, 226, 228, 242, 246, 302], "r130": 68, "93mascheroni_const": 68, "catalan": [68, 73, 226], "91596559": 68, "r131": 68, "27s_constant": 68, "goldenratio": [68, 72, 227, 238], "r132": 68, "golden_ratio": 68, "tribonacciconst": 68, "tribonacci": [68, 73], "fibonacci": [68, 72, 73, 108], "predetermin": [68, 257], "8392867552141611326": 68, "r133": 68, "generalizations_of_fibonacci_numb": [68, 73], "tribonacci_numb": [68, 73], "r134": 68, "r135": 68, "verion": 68, "compound": [68, 146, 189], "r136": 68, "20033": 68, "oscil": [68, 287], "conform": [68, 245, 250, 251, 264], "r137": 68, "r138": 68, "zero_to_the_power_of_zero": 68, "r139": 68, "indeterminate_form": 68, "as_base_exp": [68, 74, 75, 264], "expand_power_bas": [68, 238], "infix": 68, "matmul": [68, 101, 215], "as_coef_mul": 68, "undesir": [68, 128, 141, 155, 214, 217, 236], "4596": 68, "5728": 68, "suspect": [68, 108], "5706": 68, "moot": 68, "off": [68, 78, 93, 99, 107, 109, 143, 152, 175, 213, 222, 226, 242, 257, 270, 296], "nb": 68, "sensit": [68, 110, 124, 158, 212, 219, 238, 257], "assocop": 68, "prod": [68, 110, 216, 223, 235], "matadd": [68, 101, 226], "as_coef_add": 68, "extract_leading_ord": 68, "commutative_part": 68, "noncommutative_part": 68, "order_symbol": 68, "subprocess": [68, 226, 257, 258], "dividend": [68, 217], "eager": [68, 265], "61": [68, 69, 73, 84, 104, 108, 222, 228], "712524808": 68, "3744312326": [68, 73], "rop": 68, "validrelationoper": 68, "greaterthan": [68, 226], "lessthan": [68, 226], "strictlessthan": [68, 226, 267], "lt": [68, 222, 226, 267], "my_equ": 68, "my_inequ": 68, "reversedsign": 68, "_eval_eq": 68, "boolalg": [68, 98], "client": [68, 261], "counterpart": [68, 69, 242, 292], "litter": 68, "oddbal": 68, "minor": [68, 78, 104, 215, 226, 257], "caveat": [68, 222, 294], "succinctli": 68, "annoy": 68, "succinct": 68, "r140": 68, "operar": 68, "circuit": [68, 175, 178, 287], "greaterthanobject": 68, "__bool__": 68, "335": 68, "march": 68, "2012": 68, "r141": 68, "r142": 68, "r143": 68, "mdarg": 68, "fgh": 68, "vsin": 68, "vdiff": 68, "narg": [68, 219], "naturals0": [68, 226, 234, 245, 246], "evalul": 68, "fairli": [68, 76, 93, 143, 151, 200, 213], "conserv": [68, 134, 154, 202, 273, 279], "136": [68, 104], "temporarili": 68, "implic": [68, 98, 219], "fx": [68, 70, 212, 242, 243], "fxx": 68, "insconsist": 68, "nonvanish": 68, "_diff_wrt": 68, "_sort_variable_count": 68, "vc": 68, "vsort": 68, "collaps": [68, 185, 238], "vsort0": 68, "vi": 68, "dfx": 68, "equidist": 68, "sq2": 68, "xl": 68, "d2fdxdy": 68, "doit_numer": 68, "z0": [68, 233], "unifi": [68, 159, 215, 217, 219, 221, 222, 234], "zeroth": [68, 111, 114, 221], "idiff": [68, 85], "r144": 68, "legaci": [68, 95, 104, 246], "v5_2": 68, "infunct": 68, "algebraiccomput": 68, "functionclass": [68, 226, 265], "f_real": [68, 75], "f_real_inherit": [68, 75], "is_singular": [68, 75, 91], "holomorph": [68, 75, 93], "superfici": 68, "ss": [68, 217], "denom": [68, 215, 216, 217, 221, 238], "_eval_expand_bas": 68, "_eval_expand_complex": 68, "shut": [68, 222], "unwant": [68, 244, 264], "expand_hint": 68, "_eval_expand_hint": 68, "liabl": [68, 98], "metahint": 68, "myclass": 68, "_eval_expand_doubl": 68, "expand_multinomi": 68, "expand_power_exp": 68, "expand_func": [68, 73, 76], "hyperexpand": [68, 76, 90, 93, 236, 238], "div": [68, 110, 214, 216, 217, 222, 226, 238, 297], "horner": [68, 158, 215, 219, 222], "untouch": 68, "unexpand": [68, 216, 225, 235, 258], "safe": [68, 108, 216, 222, 244, 250, 292], "nfloat": [68, 238], "dkei": 68, "mixin": [68, 264], "maxn": [68, 72, 99], "subresult": [68, 217, 220, 222], "000100000000000000": 68, "precisionexhaust": [68, 72], "maxprec": 68, "quadratur": [68, 72, 95, 242], "oscillatori": [68, 72, 231], "osc": [68, 72], "advers": 68, "1e16": 68, "291": 68, "builtin": [68, 217, 226, 234, 267, 301], "speedup": [68, 104, 109, 219, 223, 265], "framework": [68, 132, 141, 151, 251, 257, 259, 265, 287], "slice": [68, 98, 99, 104, 110, 215, 217, 222, 232, 234, 238, 247, 264], "tuplekind": [68, 99, 234], "parametris": [68, 234], "element_kind": [68, 99, 234], "tuple_count": 68, "setkind": [68, 99], "gcd_term": [68, 222], "isprimit": 68, "_gcd_term": 68, "terms_gcd": [68, 217, 222], "entiti": [68, 78, 81, 82, 84, 85, 93, 141, 156, 207, 245, 279, 288, 298], "broad": [68, 297], "undefinedkind": [68, 99, 234], "lex": [68, 96, 206, 214, 216, 217, 219, 222, 223, 225, 226, 238], "grlex": [68, 96, 206, 217, 222, 225, 226], "grevlex": [68, 96, 206, 214, 219, 222, 225, 226], "rev": 68, "unaffect": [68, 245], "_node": 68, "fastest": [68, 73, 95, 108, 109, 215, 223], "undecor": 68, "breaker": 68, "collis": [68, 107, 226], "wast": [68, 105, 215], "rng": 68, "getstat": 68, "intention": 68, "tn": 68, "td": [68, 226, 301], "randrang": 68, "999": [68, 72], "238": [68, 108], "randint": [68, 104, 219], "ri": [68, 226], "rv": [68, 235, 246, 264], "nonbas": 68, "postord": 68, "descend": [68, 213, 221, 259], "subtre": [68, 226, 261], "cryptograph": 69, "encrypt": 69, "hide": [69, 226], "cipher": 69, "vigener": 69, "hill": [69, 76, 95, 134, 157, 201, 208, 270], "bifid": 69, "rsa": 69, "kid": 69, "elgam": 69, "plaintext": [69, 226], "ciphertext": 69, "monoalphabet": 69, "polyalphabet": 69, "crypto": 69, "az": [69, 124, 239], "hello": [69, 264], "helloworld": 69, "check_and_join": 69, "padded_kei": 69, "puppi": 69, "opqrstuvwxi": 69, "puyoqrstvwx": 69, "artist": 69, "aphras": 69, "ara": 69, "hp": 69, "cycle_list": 69, "encipher_shift": 69, "msg": [69, 95], "decipher_shift": 69, "gonavybeatarmi": 69, "ct": [69, 97, 219], "hpobwzcfbubsnz": 69, "deciph": 69, "l1": [69, 78, 80, 81, 133, 136, 144, 156, 217, 219, 222, 239, 246], "l2": [69, 80, 81, 133, 136, 144, 177, 193, 217, 219, 246], "caesar": 69, "juliu": 69, "suetoniu": 69, "protect": [69, 226], "militari": 69, "nephew": 69, "augustu": 69, "reportedli": 69, "r145": 69, "caesar_ciph": 69, "r146": 69, "caesarsmethod": 69, "encipher_rot13": 69, "rot13": 69, "caeser": 69, "midwai": 69, "decipher_rot13": 69, "r147": 69, "decrypt": 69, "tbanilorngnezl": 69, "encipher_affin": 69, "_invers": 69, "cx": [69, 117], "recov": [69, 95, 110, 196, 219, 221, 222, 239, 242], "decipher_affin": 69, "r148": 69, "affine_ciph": 69, "reciph": 69, "navi": 69, "beat": 69, "armi": 69, "trobmvenbgbalv": 69, "encipher_atbash": 69, "enciph": 69, "atbash": 69, "hebrew": 69, "decipher_atbash": 69, "tlmzebyvzgzinb": 69, "r149": 69, "encipher_substitut": 69, "oeyag": 69, "034": 69, "60n": 69, "v4b3": 69, "rm4": 69, "immateri": 69, "anyv": 69, "wherebi": 69, "r150": 69, "substitution_ciph": 69, "encipher_vigener": 69, "me": [69, 141, 158, 201, 226, 248], "mondai": 69, "qrgkkthrzqebpr": 69, "krypto": 69, "sculptur": 69, "cia": 69, "headquart": 69, "r152": 69, "decipher_vigener": 69, "alp": 69, "palimpsest": 69, "emufphzlrfaxyusdjkzldkrnshgnfivj": 69, "betweensubtleshadingandtheabsenc": 69, "blais": 69, "sixteenth": 69, "centuri": [69, 213], "diplomat": 69, "invent": [69, 221, 244, 296], "giovan": 69, "batista": 69, "belaso": 69, "1553": 69, "civil": [69, 116], "war": 69, "confederaci": 69, "brass": 69, "nsa": 69, "museum": 69, "fort": 69, "mead": 69, "r151": 69, "sender": 69, "assembl": [69, 93, 233], "concaten": [69, 99, 129, 137, 264], "frequenc": [69, 95, 122, 124, 165, 167, 175, 192], "kasiski": 69, "discov": [69, 93, 128, 250, 298], "babbag": 69, "unbreak": 69, "gonavybeatarmyyesyoucan": 69, "gold": 69, "auto_kei": 69, "goldbuggonavybeatarmyy": 69, "mcydwshkogamkzcelyfgayr": 69, "pt": [69, 77, 78, 79, 81, 82, 83, 84, 232], "vigenere_ciph": 69, "20071116100808": 69, "filebox": 69, "vt": 69, "batman": 69, "goo": 69, "gl": 69, "ijr22d": 69, "decod": 69, "qrgk": 69, "kt": [69, 146], "hrzqe": 69, "bpr": 69, "meetmeonmondai": 69, "encipher_hil": 69, "z_": [69, 238], "r153": 69, "lester": 69, "1920": 69, "r154": 69, "polygraph": 69, "bare": [69, 134], "ceil": [69, 74, 108, 110, 133, 226], "l_1": [69, 73, 125, 211, 236, 252, 264], "l_t": [69, 112], "c_t": 69, "l_i": [69, 211, 236], "decipher_hil": 69, "hill_ciph": 69, "june": [69, 104], "juli": [69, 239], "1929": 69, "306": 69, "312": [69, 201, 244, 270, 272], "ueqdueodoctcwq": 69, "hjeb": 69, "stqq": 69, "ispk": 69, "stzz": 69, "hd": 69, "ormv": 69, "uiki": 69, "encipher_bifid": 69, "polybiu": 69, "printabl": 69, "bifid5": 69, "decipher_bifid": 69, "encipher_bifid5": 69, "encipher_bifid6": 69, "r155": 69, "bifid_ciph": 69, "ieilhhfstsfqy": 69, "ieilh": 69, "hfst": 69, "fqyej": 69, "bmtwmg": 69, "bio": 69, "gold_bug": 69, "hg2sfuei7t": 69, "pug": 69, "heldo": 69, "wor6d": 69, "bifid5_squar": 69, "5x5": 69, "cap": [69, 72, 191, 234, 245], "tradition": [69, 76], "decipher_bifid5": 69, "round_trip": 69, "josi": 69, "osi": 69, "iosi": 69, "qiq": 69, "1901": 69, "felix": 69, "delastel": 69, "onto": [69, 81, 82, 83, 93, 97, 104, 107, 109, 221], "helen": 69, "cryptanalysi": 69, "german": 69, "fridai": 69, "ieilehfstsfxe": 69, "okai": 69, "decipher_bifid6": 69, "8am": 69, "kfkljjhf5mmmktfrgpl": 69, "meetmeonmondayat8am": 69, "bifid6_squar": 69, "6x6": 69, "rsa_public_kei": 69, "totient": [69, 108], "carmichael": [69, 108], "p_n": [69, 73, 76, 95, 222], "multiprim": 69, "land": 69, "reduced_toti": [69, 108], "uniquenss": 69, "rsa_private_kei": 69, "e_0": 69, "canonicalz": 69, "3233": 69, "797": 69, "1577": 69, "multipow": 69, "cryptosystem": 69, "coprim": [69, 95, 108, 187, 219, 239], "30030": 69, "becam": [69, 151], "hardest": 69, "claim": [69, 210, 236, 245], "encipher_rsa": 69, "decipher_rsa": 69, "r156": 69, "rsa_": 69, "28cryptosystem": 69, "r157": 69, "cacr": 69, "uwaterloo": 69, "techreport": 69, "2006": [69, 235], "cacr2006": 69, "r158": 69, "springer": [69, 95, 108, 219, 220, 242], "1007": [69, 135], "bfb0055738": 69, "r159": 69, "itii": 69, "manuscript": [69, 95], "1381": 69, "2753": 69, "413": 69, "1193": 69, "823": 69, "r160": 69, "r161": 69, "r162": 69, "r163": 69, "bmod": [69, 222, 226], "vice": [69, 95, 108, 116, 181, 201, 213, 217, 274, 275, 294], "versa": [69, 95, 108, 116, 181, 201, 213, 217, 274, 275, 294], "asymmetr": [69, 84], "puk": 69, "prk": 69, "chines": [69, 108, 219], "k_1": [69, 108, 219, 236], "k_2": 69, "k_n": [69, 76, 219], "p_3": [69, 209], "k_3": 69, "moduli": [69, 108, 215, 219], "2048": [69, 108, 226], "overhead": [69, 109, 223], "crt": [69, 108, 215, 219], "overcompens": 69, "new_msg": 69, "kid_rsa_public_kei": 69, "grade": [69, 96, 206, 222], "school": [69, 235], "bob": [69, 133, 139], "369": 69, "58": [69, 104, 252], "kid_rsa_private_kei": 69, "encipher_kid_rsa": 69, "200": [69, 99, 104, 108, 116, 122, 270], "161": [69, 135], "decipher_kid_rsa": 69, "pub": [69, 270], "pri": 69, "encode_mors": 69, "sep": [69, 226, 243, 257], "mors": 69, "attack": 69, "flank": 69, "r164": 69, "morse_cod": 69, "decode_mors": 69, "word_sep": 69, "mc": [69, 146], "east": 69, "r165": 69, "lfsr_sequenc": 69, "lfsr": 69, "c_k": 69, "golomb": [69, 108], "g165": 69, "autocorrel": 69, "lim_": [69, 74, 76, 93, 95, 233, 292, 296], "balanc": [69, 157, 213, 246, 257], "solomon": 69, "aegean": 69, "park": 69, "laguna": 69, "1967": [69, 220], "lfsr_autocorrel": 69, "lfsr_connection_polynomi": 69, "massei": 69, "m166": 69, "jame": [69, 219], "synthesi": 69, "bch": 69, "tran": 69, "122": [69, 71, 76], "127": [69, 108], "elgamal_public_kei": 69, "elgamal_private_kei": 69, "1031": 69, "636": 69, "212": [69, 95, 220], "dlp": 69, "is_primitive_root": [69, 108], "encipher_elgam": 69, "encryp": 69, "decipher_elgam": 69, "eucliden": 69, "dh_public_kei": 69, "dh_private_kei": 69, "_p": [69, 191, 217, 219, 221, 233, 236, 244], "_g": 69, "diffi": 69, "hellman": [69, 108], "publicli": 69, "secretli": 69, "dh_shared_kei": 69, "sk": 69, "gm_public_kei": 69, "goldwass": 69, "micali": 69, "gm_private_kei": 69, "b_n": [69, 73, 97, 213, 229], "jacobi_symbol": [69, 108], "residuos": 69, "entropi": [69, 246], "encipher_gm": 69, "public_kei": 69, "gm": [69, 194], "decipher_gm": 69, "encipher_railf": 69, "rail": [69, 139], "railfenc": 69, "horel": 69, "ollwd": 69, "r168": 69, "rail_fence_ciph": 69, "decipher_railf": 69, "diffgeom": 70, "euclidean": [70, 81, 83, 129, 137, 201, 217, 219, 222], "r169": 70, "chart": [70, 212], "r170": 70, "sussman": 70, "wisdom": 70, "farr": 70, "2013": [70, 80, 99, 300], "cartesian": [70, 116, 120, 159, 164, 178, 181, 186, 207, 212, 213, 234, 245, 264, 274, 275, 277, 278, 287], "polar": [70, 74, 76, 78, 84, 116, 126, 161, 212, 234, 238, 245, 287], "relation_dict": 70, "car2d": 70, "pol": 70, "coordinatesymbol": 70, "jacobian": [70, 104, 155, 244], "jacobian_determin": 70, "r171": 70, "coordinate_system": 70, "base_oneform": 70, "coord_index": 70, "oneform": 70, "base_scalar": 70, "basescalarfield": 70, "base_vector": [70, 270], "coord_funct": 70, "to_si": 70, "coord": [70, 83, 85, 128, 189, 205], "immutabledensematrix": [70, 99, 100, 101, 102, 246], "r2_r": 70, "r2_p": 70, "jacobian_matrix": 70, "point_to_coord": 70, "coord_si": [70, 273], "imbu": 70, "difficulti": [70, 108, 142], "arriv": [70, 219, 236, 238, 242, 246, 302], "inappropri": 70, "poin": 70, "unappropri": 70, "fy": [70, 212, 243], "ftheta": 70, "basevectorfield": 70, "point_p": 70, "point_r": 70, "s_field": 70, "dxi": 70, "v1": [70, 81, 104, 136, 158, 201, 202, 205, 246, 265, 270, 273, 274, 275, 276], "v_1": [70, 221, 244], "v_2": [70, 221], "e_x": [70, 252], "e_i": [70, 213, 236, 252], "e_r": 70, "c_xy": 70, "c_xr": 70, "unfortun": [70, 72, 109, 225, 239], "e_rho": 70, "form_field": 70, "exterior": [70, 84], "dg": 70, "tensorproduct": [70, 188, 190, 247, 248], "multilinear": 70, "wedg": [70, 93], "tp1": 70, "tp": [70, 163, 190, 217, 248], "wedgeproduct": 70, "wp1": 70, "liederiv": 70, "v_field": 70, "transport": 70, "pushforward": 70, "e_theta": 70, "basecovarderivativeop": 70, "christoffel": 70, "metric_to_christoffel_2nd": 70, "ch": [70, 104, 239], "cvd": 70, "covarderivativeop": 70, "intcurve_seri": 70, "vector_field": [70, 277], "start_point": 70, "f_i": [70, 93, 104, 219, 223], "movement": 70, "intcurve_diffequ": 70, "init_cond": 70, "f_1": [70, 73, 76, 93, 124, 135, 139, 159, 213, 219, 222, 242], "f_0": [70, 73, 135, 219], "vectors_in_basi": 70, "kept": [70, 193, 210, 264, 297], "twoform_to_matrix": 70, "twoform": 70, "e_j": 70, "metric_to_christoffel_1st": 70, "levi": [70, 76, 246, 252], "civita": [70, 76, 252], "metric_to_riemann_compon": 70, "non_trivial_metr": 70, "dtheta": 70, "drho": 70, "metric_to_ricci_compon": 70, "ricci": 70, "fft": [71, 158], "ifft": 71, "ntt": 71, "intt": 71, "fwht": 71, "ifwht": 71, "mobius_transform": 71, "inverse_mobius_transform": 71, "convolution_fft": 71, "convolution_ntt": 71, "convolution_fwht": 71, "convolution_subset": 71, "covering_product": 71, "intersecting_product": 71, "radix": 71, "r172": 71, "coolei": 71, "93tukey_fft_algorithm": 71, "r173": 71, "fastfouriertransform": 71, "r174": 71, "r175": 71, "pz": [71, 122, 252], "643": [71, 108], "767": 71, "387": 71, "415": 71, "384": 71, "353": [71, 104], "r176": 71, "apfloat": 71, "r177": 71, "numbertheoretictransform": 71, "r178": 71, "discrete_fourier_transform_": 71, "r179": 71, "r180": 71, "r181": 71, "wht": 71, "r182": 71, "hadamard_transform": 71, "r183": 71, "fast_walsh": 71, "93hadamard_transform": 71, "r184": 71, "r185": 71, "mobiu": [71, 108], "lattic": [71, 215, 239], "bitmask": 71, "r186": 71, "b6bius_inversion_formula": 71, "r187": 71, "csail": 71, "mit": 71, "rrw": 71, "conv": 71, "r188": 71, "arxiv": [71, 73, 76, 104, 126, 222, 264], "1211": 71, "0189": 71, "r189": 71, "r190": 71, "r191": 71, "888": 71, "444": 71, "1283": 71, "19351": 71, "14219": 71, "15502": 71, "44": [71, 73, 104, 108, 111, 112, 114, 235, 246], "41": [71, 78, 104, 108, 217, 239], "r192": 71, "convolution_theorem": 71, "r193": 71, "333": [71, 108], "555": 71, "222": 71, "666": 71, "15555": 71, "19404": 71, "r194": 71, "r195": 71, "68": [71, 96, 104, 108, 215, 239], "48": [71, 78, 117, 239, 244, 246, 292], "2057": 71, "1870": 71, "r196": 71, "radioeng": 71, "fulltext": 71, "2002": [71, 213, 220, 223], "02_03_40_42": 71, "r197": 71, "r198": 71, "r199": 71, "AND": [71, 98], "327": [71, 242], "r200": 71, "44288293815837": 72, "4429": 72, "4428829381583662470158809900606936986146216893757": 72, "28902548222223624241": 72, "091999668350375232456": 72, "14159265358979": [72, 76, 244], "333333333333333": [72, 216, 238], "1415926535": 72, "7182818284": 72, "100000": [72, 108, 122], "951": 72, "95678796130331164628399634646042209010610577945815": 72, "aleaxit": 72, "100000000000000": [72, 114], "1000000000": 72, "125000000000000000000000000000": 72, "100000000000000005551115123126": 72, "100000000000000000000000000000": 72, "1415": 72, "uncertainti": [72, 196], "003": 72, "31417": 72, "propag": [72, 81, 162, 165], "5000": [72, 116], "50000000000000000000000000000": 72, "varphi": [72, 76, 221, 226, 242], "erron": 72, "34665576869e": 72, "208": [72, 222], "64613129282185e": 72, "60123853010113e": 72, "thousand": [72, 108, 291], "43466557686937456435688527675040625802564660517371780402481729089536555417949051890403879840079255169295922593080322634775209689623239873322471161642996440906533187938298969649928516003704476137795166849228875": 72, "binet": 72, "104": 72, "1336": 72, "portion": [72, 84, 99, 104, 129], "meaningless": 72, "012297": 72, "9562288417661": 72, "956": 72, "29128599706266": 72, "2912859970626635404072825905956005414986193682745": 72, "14159265358979323846264338328": 72, "struggl": [72, 225], "346": 72, "34635637913639": 72, "dealt": [72, 93], "504067061906928": 72, "50406706190692837199": 72, "wrap_lin": [72, 95, 96, 104, 117, 206, 213, 214, 225, 226, 242], "intgrl": 72, "extrapol": [72, 233], "richardson": [72, 233, 245], "slowli": [72, 233], "64493406684823": 72, "577215664901533": 72, "57721566490153286060651209008240243104215933593992": 72, "10000000": [72, 222], "20000000": [72, 222], "693147255559946": 72, "worthwhil": 72, "hypergeometr": [72, 73, 86, 92, 93, 220, 237, 238, 242, 244, 246, 282, 302], "ramanujan": [72, 73, 108], "9801": 72, "1103": 72, "26390": 72, "396": [72, 141], "141592653589793238462643383279502884197169399375105820974944592307816406286208": 72, "99862803482534211706798214808651328230664709384460955058223172535940812848111745": 72, "02841027019385211055596446229489549303819644288109756659334461284756482337867831": 72, "355": [72, 108, 220], "113": [72, 108, 239], "33333": [72, 95], "635": 72, "504": [72, 220], "130198866629986772369127970337": 72, "49": [72, 73, 108, 117, 219, 239], "___________": [72, 117, 242], "bell": [73, 175, 228, 264], "k_sym": 73, "binom": [73, 108, 110, 246, 302], "dotsc": [73, 228], "j_1": [73, 170, 171, 188, 211, 228, 247], "j_2": [73, 170, 171, 188, 211, 228], "dotsb": [73, 228], "atop": [73, 76, 228, 236], "2j_2": [73, 228], "3j_2": [73, 228], "j_": [73, 76, 93, 95, 188, 228, 236, 296], "bernoulli": [73, 76, 222, 226, 242, 244, 246], "877": 73, "4140": 73, "21147": 73, "115975": 73, "846749014511809332450147": 73, "luca": [73, 108, 226, 232], "genocchi": [73, 76, 222], "r201": 73, "bell_numb": 73, "r202": 73, "bellnumb": 73, "r203": 73, "bellpolynomi": 73, "hurwitz": [73, 76], "6k": 73, "appel": [73, 76], "confer": [73, 109, 300], "r208": 73, "66": [73, 99, 104, 222, 226], "1000001": 73, "andr": [73, 222], "appellseq": [73, 222], "bernoulli_poli": [73, 222], "r204": 73, "bernoulli_numb": 73, "r205": 73, "bernoulli_polynomi": [73, 222], "r206": 73, "bernoullinumb": 73, "r207": 73, "bernoullipolynomi": 73, "luschni": [73, 76, 222], "manifesto": 73, "r209": 73, "2009": [73, 76, 108, 211, 222], "06743": [73, 76, 222], "_k": [73, 76, 95, 211, 221, 246], "6435": 73, "pascal": [73, 108], "4th": [73, 74, 90, 104, 108, 158], "195": 73, "r211": 73, "postpon": 73, "156675": 73, "4433": 73, "28625": 73, "granvil": [73, 108], "r212": 73, "r210": 73, "johndcook": 73, "binomial_coeffici": [73, 108], "27s_theorem": [73, 245], "andrew": [73, 85, 108], "20170202003812": [73, 108], "dm": [73, 108, 215, 221], "umontr": [73, 108], "bincoeff": [73, 108, 226], "c_n": [73, 76, 97, 222, 242], "429": [73, 226], "1430": 73, "4862": 73, "39764993382373624267": 73, "020884341620842555705": 73, "r213": 73, "catalan_numb": 73, "r214": 73, "catalannumb": [73, 226], "r215": 73, "r216": 73, "geomet": [73, 213], "mathcircl": 73, "2j": [73, 219, 246], "1385": [73, 222], "272": [73, 222], "7936": [73, 222], "2702765": 73, "4096": 73, "euler_poli": [73, 222], "r217": 73, "euler_numb": 73, "r218": 73, "eulernumb": 73, "r219": 73, "alternating_permut": 73, "r220": 73, "alternatingpermut": 73, "swing": 73, "factorial2": [73, 192, 226], "fallingfactori": [73, 226], "subfactori": [73, 226, 264], "derang": [73, 264], "r222": 73, "generate_derang": [73, 264], "r221": 73, "r223": 73, "double_factori": 73, "texttt": [73, 234], "r224": 73, "r225": 73, "paul": [73, 261], "235": 73, "268": 73, "1995": [73, 220, 238, 244], "f_z": [73, 207, 277], "f_2": [73, 93, 124, 135, 139, 159, 219, 236, 242], "r227": 73, "fibonacci_numb": 73, "r228": 73, "fibonaccinumb": 73, "t_0": [73, 239], "149": [73, 108, 112], "r229": 73, "r230": 73, "tribonaccinumb": 73, "r231": 73, "oei": [73, 76, 108, 222], "a000073": 73, "137": [73, 104, 126], "205": [73, 93, 236], "5269": 73, "761": 73, "280": 73, "83711": 73, "27720": 73, "30247": 73, "9900": 73, "983697455232980674869851942390639915940": 73, "r232": 73, "harmonic_numb": 73, "r233": 73, "harmonicnumb": [73, 226], "r234": 73, "harmonicnumber2": 73, "l_0": [73, 125, 252, 253], "47": [73, 76, 104, 108, 126, 164, 196, 225], "76": [73, 76, 104, 108, 219, 222], "r235": 73, "lucas_numb": 73, "r236": 73, "lucasnumb": 73, "genocchi_poli": [73, 222], "r237": 73, "genocchi_numb": 73, "r238": 73, "genocchinumb": 73, "r239": 73, "mathcal": [73, 74, 93, 124, 156, 188, 211, 222, 234], "a000111": [73, 222], "zigzag": 73, "li": [73, 76, 84, 95, 108, 136, 140, 191, 226, 280], "50521": [73, 222], "691": 73, "2730": 73, "andre_poli": [73, 222], "r240": 73, "r241": 73, "eulerzigzagnumb": 73, "r242": 73, "irrelev": 73, "r243": 73, "number_theori": 73, "r244": 73, "pentagonal_number_theorem": 73, "multifactori": 73, "pochhamm": [73, 226, 238], "r245": 73, "r246": 73, "pochhammer_symbol": 73, "274": 73, "225": [73, 108, 220], "511": 73, "9330": 73, "34105": 73, "42525": 73, "22827": 73, "5880": 73, "750": 73, "r247": 73, "stirling_numbers_of_the_first_kind": 73, "r248": 73, "stirling_numbers_of_the_second_kind": 73, "multiset": [73, 93, 261, 264], "nc": 73, "nt": [73, 264], "babi": [73, 108, 264], "aa": [73, 211], "bb": [73, 211, 238, 264], "multiset_combin": [73, 264], "aab": [73, 264], "aabc": 73, "aaaabbbbcccc": 73, "m_1": [73, 124, 170, 188, 211, 239], "m_2": [73, 139, 159, 170, 188, 211], "m_k": 73, "r249": 73, "r250": 73, "tinyurl": 73, "cep849r": 73, "ba": [73, 264], "multiset_permut": [73, 264], "r251": 73, "aabbc": 73, "mississippi": [73, 264], "609": 73, "1521": 73, "1768": 73, "1224": [73, 108], "579": 73, "197": 73, "r252": 73, "20210507012732": 73, "csse": 73, "uwa": 73, "au": 73, "cits7209": 73, "707106781186548": 74, "tangent": [74, 78, 80, 84, 95, 111, 223, 242], "643501108793284": 74, "r253": 74, "ib": [74, 146], "complex_conjug": 74, "polar_lift": [74, 76, 238], "periodic_argu": 74, "principal_branch": [74, 93], "r257": 74, "csc": [74, 110, 226, 235], "sec": [74, 95, 122, 221, 226, 235, 302], "acsc": [74, 226], "asec": [74, 226], "acot": [74, 226], "r254": 74, "trigonometric_funct": 74, "r255": 74, "r256": 74, "elementaryfunct": 74, "trigonometryangl": 74, "r258": 74, "r259": 74, "r260": 74, "r261": 74, "r262": 74, "r263": 74, "cotang": [74, 223], "r264": 74, "r265": 74, "r266": 74, "secant": [74, 222], "r267": 74, "r268": 74, "r269": 74, "cosec": 74, "r270": 74, "r271": 74, "r272": 74, "unnorm": [74, 76, 215], "qquad": [74, 196, 219], "jn": [74, 76, 188, 222, 226, 296], "spheric": [74, 126, 133, 140, 170, 211, 212, 222, 270, 274, 275, 296], "r273": 74, "sinc_funct": 74, "asinh": [74, 226], "r274": 74, "inverse_trigonometric_funct": 74, "r275": 74, "r276": 74, "r277": 74, "r278": 74, "r279": 74, "r280": 74, "r281": 74, "r282": 74, "arctan": [74, 223, 226], "acoth": [74, 226], "r283": 74, "r284": 74, "arccot": [74, 226], "r288": 74, "r285": 74, "r286": 74, "r287": 74, "arcsec": [74, 226], "r289": 74, "r290": 74, "r291": 74, "arccsc": [74, 226], "quadrant": [74, 217, 245], "clock": [74, 235], "reurn": 74, "r292": 74, "r293": 74, "r294": 74, "arctan2": [74, 226], "hyperbolicfunct": 74, "coth": [74, 226, 238], "acosh": [74, 226], "sech": [74, 226], "csch": [74, 226], "asech": [74, 226], "r295": 74, "hyperbolic_funct": 74, "r296": 74, "r297": 74, "arcsech": [74, 226], "acsch": [74, 226], "r298": 74, "r299": 74, "r300": 74, "arccsch": [74, 226], "567": 74, "r301": 74, "r302": 74, "ceilingfunct": 74, "r303": 74, "r304": 74, "floorfunct": 74, "roundfunct": 74, "r305": 74, "fractional_part": 74, "r306": 74, "fractionalpart": 74, "lambertw": [74, 223, 226, 244, 245, 303], "r307": 74, "w_k": 74, "635564016364870": 74, "34747534407696": 74, "41624341514535": 74, "lambert_w_funct": 74, "exprcondpair": 74, "cond": [74, 93, 95, 234], "piecewise_fold": 74, "folded_cond": 74, "ITE": [74, 98, 226], "piecewise_exclus": 74, "_eval_integr": [74, 95], "piecewise_integr": 74, "as_expr_set_pair": 74, "skip_nan": 74, "mutual": [74, 93, 210], "conjunct": [74, 98, 108, 212, 236, 257, 302], "identityfunct": 74, "supremum": [74, 234], "r308": 74, "directed_complete_partial_ord": 74, "r309": 74, "lattice_": 74, "28order": 74, "global_paramet": 74, "real_root": [74, 222, 244], "rootoftool": [74, 104, 222], "intfunc": [74, 108, 222], "r310": 74, "square_root": 74, "r311": 74, "r312": 74, "root_of_un": 74, "r313": 74, "principal_valu": [74, 95], "r314": 74, "cuberoot": 74, "powdenest": [74, 238], "misc": [74, 99, 267], "r315": 74, "r316": 74, "r317": 74, "cube_root": 74, "r318": 74, "int_": [76, 92, 93, 95, 222, 229, 292, 296], "sum_i": [76, 233], "is_simpl": 76, "tensor_funct": 76, "kroneckerdelta": [76, 101, 191, 226, 238], "r319": 76, "deltafunct": [76, 95], "h0": 76, "electron": [76, 126, 235], "improp": [76, 95], "r320": 76, "heavisidestepfunct": 76, "r321": 76, "iv": [76, 223], "105": [76, 108, 222, 239], "parg": 76, "singularity_funct": 76, "singularityfunct": [76, 95, 116], "macaulai": 76, "heavisidediracdelta": 76, "r322": 76, "beta_funct": 76, "r323": 76, "r324": 76, "r325": 76, "r326": 76, "setminu": [76, 93], "17805383034794561964694160130": 76, "65092319930185633889": 76, "8724366472624298171": 76, "r327": 76, "r328": 76, "r329": 76, "loggammafunct": 76, "r330": 76, "espinosa": 76, "moll": 76, "r335": 76, "19093197": 76, "5173168": 76, "ni": [76, 108], "r331": 76, "polygamma_funct": 76, "r332": 76, "polygammafunct": 76, "r333": 76, "r334": 76, "polygamma2": 76, "115": 76, "r336": 76, "digamma_funct": 76, "r337": 76, "digammafunct": 76, "r338": 76, "r339": 76, "trigamma_funct": 76, "r340": 76, "trigammafunct": 76, "r341": 76, "int_x": 76, "_1f_1": 76, "confluent": [76, 236], "xt": 76, "expint": [76, 226], "r342": 76, "incomplete_gamma_funct": 76, "upper_incomplete_gamma_funct": 76, "r343": 76, "r344": 76, "r345": 76, "gamma2": 76, "r346": 76, "gamma3": 76, "r347": 76, "exponential_integr": 76, "relation_with_other_funct": 76, "int_0": [76, 93, 95, 292, 302], "r348": 76, "lower_incomplete_gamma_funct": 76, "r349": 76, "r350": 76, "r351": 76, "r352": 76, "multigamma": 76, "gamma_p": 76, "r353": 76, "multivariate_gamma_funct": 76, "eulerian": 76, "02671848900111377452242355235388489324562": 76, "2112723729365330143": 76, "7655283165378005676": 76, "r354": 76, "r355": 76, "betafunct": 76, "r356": 76, "error_funct": 76, "999999984582742099719981147840": 76, "1296959": 76, "73071763923152794095062": 76, "r357": 76, "r358": 76, "r359": 76, "r360": 76, "0000000154172579002800188521596734869": 76, "r361": 76, "r362": 76, "r363": 76, "r364": 76, "5648024145755525987042919132": 76, "995322265018952734162069256367": 76, "r365": 76, "r366": 76, "r367": 76, "r368": 76, "179143454621291692285822705344": 76, "r369": 76, "inverse_funct": 76, "r370": 76, "inverseerf": [76, 226], "r371": 76, "r372": 76, "inverseerfc": [76, 226], "r373": 76, "inverseerf2": 76, "fresnelintegr": 76, "343415678363698242195300815958": 76, "fresnelc": [76, 226, 236], "r374": 76, "fresnel_integr": 76, "r375": 76, "r376": 76, "r377": 76, "r378": 76, "wrench": 76, "jr": 76, "vicki": 76, "allei": 76, "488253406075340754500223503357": 76, "r379": 76, "r380": 76, "r381": 76, "r382": 76, "r383": 76, "background": [76, 96, 206, 209, 300], "cauchi": [76, 93, 95, 217, 242, 246], "219383934395520": 76, "21938393439552": 76, "shi": [76, 93, 226, 236], "e1": [76, 78, 85, 141, 216, 221, 233, 242, 245], "hyperbol": [76, 110, 111, 223, 245, 298, 302], "r384": 76, "r385": 76, "r386": 76, "20201128173312": 76, "sfu": [76, 95], "cbm": [76, 95], "aand": [76, 95], "page_228": 76, "int_1": [76, 93, 110], "zt": [76, 93], "unbranch": [76, 93], "meijerg": [76, 87, 93, 95, 226, 246, 302], "postiv": 76, "r387": 76, "r388": 76, "expintegral": [76, 226], "r389": 76, "04516378011749278484458888919": 76, "0652795784357498247001125598": 76, "08346052231061726610939702133": 76, "soldner": 76, "45136923488338": 76, "r390": 76, "logarithmic_integr": 76, "r391": 76, "logarithmicintegr": 76, "r392": 76, "r393": 76, "soldnersconst": 76, "92242131492155809316615998938": 76, "r394": 76, "r395": 76, "r396": 76, "r397": 76, "trigonometric_integr": 76, "_1": [76, 104, 133, 140, 201, 211, 236, 265], "somewhat": [76, 95, 141, 217], "r398": 76, "r399": 76, "r400": 76, "laurent": [76, 217, 223, 242], "j_n": [76, 188], "r401": 76, "r402": 76, "r403": 76, "r404": 76, "yn": [76, 226, 232], "r405": 76, "i_": [76, 93, 236, 246, 247], "iz": 76, "r406": 76, "k_": [76, 93, 134, 153, 154], "r407": 76, "hankel1": [76, 226], "hankel": [76, 95], "iy_": 76, "hankel2": [76, 226], "r408": 76, "hankelh1": [76, 226], "r409": 76, "hankelh2": [76, 226], "orthopoli": [76, 222], "spherical_bessel_fn": [76, 222], "3j": [76, 170, 211], "099419756723640344491": 76, "054525080242173562897": 76, "r410": 76, "y_n": [76, 239], "18525034196069722536": 76, "014895573969924817587": 76, "r411": 76, "jn_zero": 76, "besseljzero": 76, "sph_jn": 76, "7635": 76, "095": 76, "515": 76, "marcumq": 76, "marcum": 76, "q_m": 76, "r412": 76, "marcum_q": 76, "r413": 76, "airybas": 76, "airyai": [76, 226, 242], "ai": [76, 108, 222, 239, 248, 267, 302], "airyaiprim": [76, 226], "22740742820168557599192443603787379946077222541710": 76, "airybi": [76, 226, 242], "airybiprim": [76, 226], "r414": 76, "airy_funct": 76, "r415": 76, "r416": 76, "encyclopediaofmath": 76, "r417": 76, "airyfunct": 76, "41230258795639848808323405461146104203453483447240": 76, "r418": 76, "r419": 76, "r420": 76, "r421": 76, "61825902074169104140626429133247528291577794512415": 76, "r422": 76, "r423": 76, "r424": 76, "r425": 76, "27879516692116952268509756941098324140300059345163": 76, "r426": 76, "r427": 76, "r428": 76, "r429": 76, "bspline": 76, "bspline_basi": 76, "knot": 76, "bspline_basis_set": 76, "r430": 76, "interpolating_splin": 76, "131": [76, 201], "39": [76, 108, 225], "interpolating_poli": [76, 222], "zeta_funct": 76, "admit": [76, 242], "lerch": 76, "transcend": 76, "lerchphi": [76, 226], "dirichlet_eta": [76, 226], "20205690315959": 76, "polylog": [76, 226], "r431": 76, "r432": 76, "hurwitz_zeta_funct": 76, "r433": 76, "dirichlet_eta_funct": 76, "r434": 76, "polylogarithm": 76, "sheet": [76, 235], "phi_0": 76, "ze": 76, "r435": 76, "bateman": [76, 95], "erdelyi": [76, 95], "1953": [76, 221], "york": [76, 93, 157, 236, 244], "mcgraw": [76, 95, 134, 157, 201, 208, 270], "r436": 76, "r437": 76, "lerch_transcend": 76, "stieltj": [76, 226], "gamma_": [76, 125, 127], "r438": 76, "stieltjes_const": 76, "ap": [76, 80, 236], "bq": [76, 214, 215, 236], "a_p": [76, 93, 236, 302], "b_q": [76, 93, 236, 302], "_pf_q": [76, 236, 242, 302], "r439": 76, "r440": 76, "generalized_hypergeometric_funct": 76, "convergence_stat": 76, "radius_of_converg": 76, "radiu": [76, 78, 82, 84, 137, 140, 148, 150, 160, 164, 212, 245, 246, 280], "meijer": [76, 86, 94, 95, 282, 292, 302], "mellin": [76, 95], "barn": 76, "b_m": [76, 93, 244], "confusingli": 76, "int_l": [76, 93, 236], "contour": [76, 78, 93, 212, 236], "__1": 76, "subvector": 76, "aother": 76, "bm": 76, "bother": [76, 297], "slater": [76, 236], "allow_hyp": [76, 238], "subsum": 76, "r441": 76, "r442": 76, "meijer_g": 76, "get_period": [76, 93], "appellf1": [76, 226], "0063339426292673": 76, "172870711": 76, "659936": 76, "15605338197184": 76, "r443": 76, "appell_seri": 76, "r444": 76, "hypergeometricfunct": 76, "elliptic_integr": 76, "elliptic_k": [76, 226], "tfrac": [76, 110, 242, 246], "eccentr": [76, 78], "50923695405127": 76, "625146415202697": 76, "elliptic_f": [76, 226], "r445": 76, "r446": 76, "ellipticintegr": 76, "elliptick": [76, 226], "909449841483": 76, "74720545502474": 76, "r447": 76, "r448": 76, "ellipticf": 76, "elliptic_": [76, 78, 226], "55203744279187": 76, "290764986058437": 76, "991052601328069": 76, "81879421395609": 76, "r449": 76, "r450": 76, "elliptice2": 76, "r451": 76, "elliptic": [76, 226], "elliptic_pi": [76, 226], "50232379629182": 76, "760939574180767": 76, "29136443417283": 76, "32555634906645": 76, "r452": 76, "r453": 76, "ellipticpi3": 76, "r454": 76, "ellipticpi": [76, 226], "mathieu_funct": 76, "mathieubas": 76, "mathieusprim": [76, 226], "mathieuc": [76, 226], "mathieucprim": [76, 226], "r455": 76, "r456": 76, "r457": 76, "mathieufunct": 76, "r458": 76, "mathieuandspheroidalfunct": 76, "r459": 76, "r460": 76, "r461": 76, "r462": 76, "r463": 76, "r464": 76, "r465": 76, "r466": 76, "r467": 76, "r468": 76, "r469": 76, "r470": 76, "chebyshevu": [76, 226], "chebyshevt_root": 76, "chebyshevu_root": 76, "assoc_legendr": [76, 226], "hermite_prob": 76, "jacobi_poli": [76, 222], "gegenbauer_poli": [76, 222], "chebyshevt_poli": [76, 222], "chebyshevu_poli": [76, 222], "hermite_poli": [76, 222], "legendre_poli": [76, 222], "laguerre_poli": [76, 222], "r471": 76, "jacobi_polynomi": 76, "r472": 76, "jacobipolynomi": 76, "r473": 76, "jacobip": [76, 226], "jacobi_norm": 76, "normilz": 76, "p_m": 76, "delta_": [76, 188, 196, 211], "r474": 76, "r475": 76, "r476": 76, "hermite_prob_poli": [76, 222], "r477": 76, "gegenbauer_polynomi": 76, "r478": 76, "gegenbauerpolynomi": 76, "r479": 76, "gegenbauerc3": 76, "r480": 76, "chebyshev_polynomi": 76, "r481": 76, "chebyshevpolynomialofthefirstkind": 76, "r482": 76, "chebyshevpolynomialofthesecondkind": 76, "r483": 76, "r484": 76, "u_n": [76, 95, 219, 221, 222], "r485": 76, "r486": 76, "r487": 76, "r488": 76, "r489": 76, "chebyshev_root": 76, "r490": 76, "legendre_polynomi": 76, "r491": 76, "legendrepolynomi": 76, "r492": 76, "legendrep": [76, 226], "r493": 76, "legendrep2": 76, "r494": 76, "associated_legendre_polynomi": 76, "r495": 76, "r496": 76, "r497": 76, "r498": 76, "hermite_polynomi": 76, "r499": 76, "hermitepolynomi": 76, "r500": 76, "hermiteh": [76, 226], "probabilist": [76, 222, 246], "he_n": [76, 222], "telephon": 76, "a000085": 76, "232": 76, "764": 76, "2620": 76, "9496": 76, "r501": 76, "r502": 76, "l_n": [76, 95, 222], "r503": 76, "laguerre_polynomi": 76, "r504": 76, "laguerrepolynomi": 76, "r505": 76, "laguerrel": [76, 226], "r506": 76, "laguerrel3": 76, "r507": 76, "generalized_laguerre_polynomi": 76, "r508": 76, "associatedlaguerrepolynomi": 76, "r509": 76, "r510": 76, "spherical_harmon": 76, "ynm": [76, 211], "ynm_c": 76, "znm": 76, "r511": 76, "r512": 76, "sphericalharmon": 76, "r513": 76, "sphericalharmonici": 76, "r514": 76, "r515": 76, "r516": 76, "r517": 76, "z_n": [76, 220], "r518": 76, "r519": 76, "r520": 76, "eijk": 76, "levicivita": [76, 104], "eval_levicivita": 76, "pseudotensor": 76, "delta_rang": [76, 191], "kroneck": [76, 108, 190, 191, 211, 247, 252], "r521": 76, "kronecker_delta": [76, 191], "indices_contain_equal_inform": [76, 191], "fermi": [76, 191], "above_fermi": [76, 191], "below_fermi": [76, 191], "is_above_fermi": [76, 191], "is_below_fermi": [76, 191], "is_only_below_fermi": [76, 191], "is_only_above_fermi": [76, 191], "killable_index": [76, 191], "preferred_index": [76, 191], "point2d": [77, 78, 79, 80, 81, 83, 84, 85], "arbitrary_point": [77, 78, 79, 80, 81, 82, 84], "polyfunc": [77, 217, 222], "ambient_dimens": [77, 79, 81, 83], "plot_interv": [77, 78, 81, 84], "lower_bound": [77, 78, 81, 84], "upper_bound": [77, 78, 81, 84], "counterclockwis": [77, 78, 79, 83, 104, 116, 117], "scale": [77, 78, 79, 83, 84, 85, 96, 116, 171, 192, 194, 195, 196, 198, 199, 206, 210, 212, 222, 229, 246, 277, 279], "geometryent": [77, 78, 79, 81, 83, 84, 85], "hradiu": 78, "vradiu": 78, "ellipt": [78, 108, 213], "geometryerror": [78, 81, 84, 85], "radii": 78, "foci": 78, "periapsi": 78, "apoapsi": 78, "focus_dist": 78, "shortest": [78, 81, 84, 137, 140, 209, 232, 238, 242, 264], "auxiliary_circl": 78, "xmin": [78, 79, 81, 83, 84, 212], "ymin": [78, 79, 81, 83, 84, 212], "xmax": [78, 79, 81, 83, 84, 212], "ymax": [78, 79, 81, 83, 84, 212], "rectangl": [78, 79, 81, 83, 84, 212, 222], "director_circl": 78, "perpendicular": [78, 81, 82, 84, 97, 133, 140, 149, 164, 210], "director": 78, "130": 78, "r522": 78, "encloses_point": [78, 79, 84], "border": [78, 84], "_slope": 78, "slope": [78, 79, 81, 84, 95, 116, 117, 122, 133], "r523": 78, "108270": 78, "r524": 78, "shifted_ellips": 78, "evolut": 78, "focal": [78, 160, 164], "100500": 78, "363": [78, 108, 220], "175": [78, 104, 219, 220], "is_tang": [78, 80], "tangent_lin": 78, "normal_lin": 78, "line2d": [78, 81, 84], "2020": [78, 170], "polar_second_moment_of_area": [78, 84], "moment": [78, 84, 116, 117, 143, 151, 154, 156, 212, 222, 239, 246], "constitu": [78, 84, 136, 201, 232, 270], "planar": [78, 84, 117, 133, 164], "resist": [78, 84, 116, 117, 118, 235], "deflect": [78, 84, 116, 117], "bend": [78, 84, 116, 119, 287], "r525": 78, "polar_moment_of_inertia": [78, 84], "random_point": [78, 81, 82], "arb": 78, "364": 78, "notimpl": [78, 221], "second_moment_of_area": [78, 84], "centroid": [78, 84, 85, 116], "i_xx": [78, 84], "i_yi": [78, 84], "i_xi": [78, 84], "ellis": 78, "r526": 78, "list_of_second_moments_of_area": 78, "section_modulu": [78, 84], "sympify": [78, 84, 116, 118, 120, 130, 136, 162, 165, 203], "farthest": [78, 84], "s_x": [78, 84], "s_y": [78, 84], "r527": 78, "semilatus_rectum": 78, "semi": [78, 81, 108], "latu": 78, "rectum": 78, "chord": 78, "conic": [78, 239, 270], "directrix": 78, "r528": 78, "semilatusrectum": 78, "r529": 78, "latus_rectum": 78, "collinear": [78, 80, 82, 83, 84], "gx": 78, "hy": 78, "synonym": [78, 221], "p4": [78, 81, 83, 84, 136, 212], "t2": [79, 84, 85, 108, 130, 136, 239, 246, 252], "is_similar": [79, 81, 84, 85], "uniform": [79, 212, 244, 246], "enlarg": 79, "shrink": [79, 93], "parameter_valu": [79, 82], "pent": 79, "rpent": 79, "rcirc": 79, "entity1": 80, "entity2": 80, "zp": 80, "is_collinear": [80, 83], "segment2d": [80, 81, 84, 85], "wikipappu": 80, "subs_point": 80, "p11": 80, "p12": 80, "p13": 80, "p21": 80, "p22": 80, "p23": 80, "ll1": 80, "ll2": 80, "ll3": 80, "ll4": 80, "ll5": 80, "ll6": 80, "pp1": 80, "pp2": 80, "pp3": 80, "encyclopedia": [80, 208], "apr": 80, "s_hexagon_theorem": 80, "clockwis": [80, 95, 99, 104, 116, 117, 118, 120], "overlap": [80, 85, 107, 213, 234, 267], "infanc": 80, "geometryresult": 80, "fair": [80, 246], "angle_between": [81, 82, 84, 201], "reflex": 81, "eman": 81, "readili": [81, 104], "sw": 81, "obtus": 81, "smallest_angle_between": 81, "point3d": [81, 82, 83, 164], "line3d": [81, 82, 83], "is_perpendicular": [81, 82, 83, 84], "ray2d": [81, 84], "closing_angl": 81, "are_concurr": [81, 82], "concurr": [81, 82, 223], "l3": [81, 144, 219], "l4": [81, 144], "bisector": [81, 84], "p5": [81, 83, 84, 212], "p6": [81, 84, 212], "p7": [81, 84, 212], "segment3d": [81, 82], "direction_ratio": [81, 83], "is_parallel": [81, 82], "parallel_lin": 81, "perpendicular_lin": [81, 82], "perpendicular_seg": 81, "reform": 81, "92": [81, 220, 242, 246, 264], "ccw": [81, 84], "ray3d": [81, 82, 164], "xdirect": 81, "ydirect": 81, "midpoint": [81, 83, 84, 95, 212, 276], "170": [81, 246], "341": [81, 108], "perpendicular_bisector": 81, "linearentity2d": 81, "linearentity3d": [81, 82], "direction_cosin": [81, 83], "zdirect": 81, "normal_vector": [82, 164], "proce": [82, 155, 219, 221, 236, 244], "147": 82, "321": 82, "is_coplanar": 82, "perpendicualar": 82, "parallel_plan": 82, "on_circl": 82, "off_circl": 82, "perpendicular_plan": 82, "pt1": 82, "projection_lin": 82, "on_morph": 83, "affine_rank": 83, "are_coplanar": 83, "canberra_dist": 83, "canberra": 83, "geometricent": 83, "taxicab_dist": 83, "is_concycl": 83, "concycl": 83, "fewer": [83, 84, 137, 155, 246, 292], "is_scalar_multipl": 83, "ambient": 83, "orthogonal_direct": 83, "taxicab": 83, "_nocheck": 83, "are_collinear": 83, "unrot": 84, "circumscrib": 84, "spin": [84, 126, 143, 177, 178, 186, 287], "perimet": 84, "contact": [84, 143, 147, 148, 149, 150, 209, 250], "38": [84, 104, 108, 226, 239, 241, 246], "cut_sect": 84, "upper_polygon": 84, "lower_polygon": 84, "upper_seg": 84, "lower_seg": 84, "r530": 84, "r531": 84, "paulbourk": 84, "polygonmesh": 84, "insidepoli": 84, "first_moment_of_area": 84, "q_x": [84, 209], "q_y": [84, 209], "625": [84, 280], "3125": [84, 246], "525": 84, "3000": [84, 116], "r532": 84, "skyciv": 84, "beam": [84, 120, 160, 163, 287], "bmd": 84, "r533": 84, "mechanicalc": 84, "poly1": 84, "poly2": 84, "interior": [84, 222, 234], "180": [84, 210, 220], "r534": 84, "r535": 84, "r536": 84, "apothem": 84, "interior_angl": 84, "exterior_angl": 84, "circumcircl": 84, "incircl": 84, "inradiu": 84, "inscrib": 84, "circumcent": 84, "circumradiu": 84, "leg": [84, 118], "square_in_unit_circl": 84, "kite": 84, "asa": 84, "sa": [84, 222], "sss": 84, "altitud": 84, "orthocent": 84, "exradii": 84, "median": [84, 246], "medial": 84, "nine_point_circl": 84, "straight": [84, 90, 122, 129, 137, 140, 145, 209, 242], "eulerlin": 84, "equilater": 84, "excent": 84, "excircl": 84, "touch": [84, 143, 235], "r537": 84, "ly": [84, 104, 217], "exradiu": 84, "r538": 84, "r539": 84, "incent": 84, "is_equilater": 84, "is_isoscel": 84, "is_right": 84, "is_scalen": 84, "nine": [84, 226], "feet": 84, "real_num": 85, "hull": 85, "r540": 85, "graham_scan": 85, "r541": 85, "1979": [85, 196], "20210511015444": 85, "geomalgorithm": 85, "a10": 85, "_hull": 85, "t3": [85, 239], "averag": [85, 95, 108, 219, 246], "p_r": 86, "holonomic_funct": 86, "from_hyp": [87, 90], "holonomicfunct": [87, 90, 91], "from_meijerg": [87, 90], "initcond": [87, 89, 90], "expr_to_holonom": [87, 90, 91, 92], "lenic": [87, 89], "meijerint": [87, 89, 93, 95], "_rewrite1": [87, 93], "_convert_poly_rat_alg": [87, 89], "_create_t": [87, 89], "_create_lookup_t": [89, 93], "differentialoper": [90, 91, 180], "old_poly_r": [90, 91, 213, 216, 217], "to_sequ": 90, "n_0": [90, 219, 244, 245], "indici": [90, 91, 92, 242], "c_j": [90, 93, 236], "holonomicsequ": 90, "r542": 90, "hal": 90, "inria": [90, 95], "00070025": 90, "r543": 90, "www3": [90, 242, 270], "risc": [90, 242, 270], "jku": [90, 242, 270], "risc_2244": 90, "diplform": 90, "_recur": 90, "rk4": 90, "71828182845905": 90, "10517083333333": 90, "22140257085069": 90, "34985849706254": 90, "49182424008069": 90, "64872063859684": 90, "82211796209193": 90, "01375162659678": 90, "22553956329232": 90, "45960141378007": 90, "71827974413517": 90, "331": 90, "4641": 90, "61051": 90, "771561": 90, "9487171": 90, "14358881": 90, "357947691": 90, "5937424601": 90, "to_hyp": 90, "as_list": [90, 222], "to_meijerg": 90, "1_0": 91, "1_1": 91, "0_0": 91, "0_1": 91, "list_of_poli": 91, "weyl": [91, 97], "differentialoperatoralgebra": 91, "Ore": 91, "dxa": 91, "endomorph": [91, 221], "frobeniu": [92, 104, 108, 219, 220], "subtleti": 93, "recast": [93, 238, 244, 245], "branchpoint": 93, "crude": [93, 143, 212], "decre": 93, "biholomorph": 93, "topologi": [93, 234], "neighbourhood": 93, "evid": [93, 134, 149, 236, 248], "peculiar": [93, 210], "_split_mul": 93, "_mytyp": 93, "inequival": 93, "_mul_as_two_part": 93, "twist": 93, "recognis": [93, 216, 236, 238], "anywai": [93, 238, 242], "analyitc": 93, "_rewrite_singl": 93, "_rewrite2": 93, "_rewrite_saxena_1": 93, "_rewrite_saxena": 93, "blogpost": 93, "remedi": 93, "exploit": [93, 258], "transpar": [93, 96, 206], "nessgrh": 93, "wordpress": [93, 239], "07": 93, "stade": 93, "c_u": 93, "d_1": [93, 196, 222, 246], "d_v": 93, "amalgam": 93, "prudnikov1990": [93, 236], "luke1969": [93, 236], "fulfil": [93, 211], "vee": [93, 98, 104], "lceil": [93, 110], "rceil": [93, 110], "d_j": [93, 196, 236], "lambda_c": [93, 154], "lambda_": 93, "z_0": [93, 238], "z_1": 93, "a_i": [93, 196, 201, 210, 214, 219, 236], "c_5": [93, 112], "c_6": [93, 112], "c_7": [93, 112], "c_8": [93, 112], "lvert": 93, "rvert": 93, "c_9": [93, 112], "versatil": 93, "bz": [93, 239, 252], "deform": [93, 117], "encircl": 93, "appeal": 93, "fox": 93, "obstacl": [93, 137], "identif": [93, 245], "domin": [93, 99, 231, 233], "iT": 93, "omega_": 93, "disguis": 93, "meijerint_indefinit": 93, "meijerint_definit": 93, "meijerint_invers": 93, "kelli": [93, 236], "roach": [93, 236], "211": [93, 108, 222, 236, 242], "prudnikov": [93, 236], "yu": [93, 211, 236], "brychkov": [93, 236], "marichev": [93, 236], "gordon": [93, 170, 236], "breach": [93, 236], "_coeffexpvalueerror": 93, "_get_coeff_exp": 93, "_check_anteced": 93, "_check_antecedents_1": 93, "mt": 93, "_check_antecedents_invers": 93, "anteced": [93, 233], "_condsimp": 93, "hoc": 93, "simp": [93, 201], "_dummi": 93, "_dummy_": 93, "_eval_cond": 93, "_expon": 93, "_find_splitting_point": 93, "fsp": 93, "_flip_g": 93, "_function": 93, "_guess_expans": 93, "sensibl": [93, 95, 112], "_inflate_fox_h": 93, "_inflate_g": 93, "_int0oo": 93, "_int0oo_1": 93, "_int_invers": 93, "_is_analyt": 93, "_meijerint_definite_2": 93, "trigexpand": 93, "_meijerint_definite_3": 93, "_meijerint_definite_4": 93, "only_doubl": 93, "_meijerint_indefinite_1": 93, "_mul_arg": 93, "_my_principal_branch": 93, "full_pb": 93, "nearer": 93, "superflu": 93, "opaqu": [93, 226], "fac": 93, "_rewrite_invers": 93, "costli": [93, 145, 215, 222, 298], "tx": [93, 300], "happili": [95, 250], "nonelementari": 95, "mellin_transform": 95, "bilater": 95, "mellintransform": 95, "integraltransform": 95, "inverse_mellin_transform": 95, "fourier_transform": 95, "hankel_transform": 95, "inverse_hankel_transform": 95, "inversemellintransform": 95, "laplacetransform": 95, "r544": 95, "prooject": 95, "1954": 95, "caltech": 95, "caltechauthor": 95, "20140123": 95, "101456353": 95, "fdict": 95, "inverselaplacetransform": 95, "singularit": [95, 155], "fouriertransform": 95, "_fourier_transform": 95, "inverse_fourier_transform": 95, "sine_transform": 95, "inverse_sine_transform": 95, "cosine_transform": 95, "inverse_cosine_transform": 95, "bixk": 95, "inversefouriertransform": 95, "sinetransform": 95, "inversesinetransform": 95, "cosinetransform": 95, "inversecosinetransform": 95, "hankeltransform": 95, "ht": 95, "inversehankeltransform": 95, "_compute_transform": 95, "_as_integr": 95, "integraltransformerror": 95, "_name": 95, "_collapse_extra": 95, "needev": 95, "function_vari": 95, "transform_vari": 95, "lazard": [95, 219, 222], "rioboo": 95, "trager": 95, "horowitz": 95, "ostrogradski": 95, "ratint": 95, "rationaltool": [95, 222], "ratint_logpart": 95, "ratint_ratpart": 95, "r545": 95, "bronstein": [95, 220, 222, 228, 244], "verlag": [95, 220], "deg": [95, 122, 141, 214, 217, 219, 221, 222], "q_i": [95, 135, 155], "_t": [95, 141, 144, 158, 191, 200, 201, 205, 236, 246], "trigintegr": 95, "trigonometri": 95, "r546": 95, "integration_techniqu": 95, "deltaintegr": 95, "couldn": 95, "singularityintegr": 95, "risch_integr": 95, "nonelementaryintegr": 95, "proven": [95, 108, 276, 294], "handle_first": 95, "separate_integr": 95, "rewrite_complex": 95, "forthcom": 95, "5109": 95, "manualintegr": 95, "integral_step": 95, "student": [95, 235, 239, 246], "rootsum": [95, 222, 228], "substep": 95, "sympy_gamma": 95, "blob": 95, "app": 95, "intstep": 95, "urul": 95, "u_var": 95, "_u": [95, 191], "u_func": 95, "arctanrul": 95, "sinrul": 95, "rewriterul": 95, "addrul": 95, "powerrul": 95, "constanttimesrul": 95, "constantrul": 95, "norman": 95, "degree_offset": 95, "unnecessary_permut": 95, "_try_heurisch": 95, "manuel": [95, 231], "poor": [95, 109], "man": [95, 220], "airi": [95, 242], "whittak": 95, "r547": 95, "sop": [95, 98], "cafe": 95, "pmint": 95, "r548": 95, "gedd": [95, 220], "stefanu": 95, "217": [95, 220], "r549": 95, "davenport": [95, 219, 220], "eurocam": 95, "lnc": [95, 220, 244], "157": [95, 108, 117, 220], "r550": 95, "iii": [95, 226, 242], "sigsam": 95, "bulletin": 95, "1982": [95, 211], "r551": 95, "transact": [95, 220], "1985": [95, 134, 157, 201, 270], "356": [95, 221, 244], "362": 95, "lookup": [95, 104, 108, 236], "huge": [95, 108, 222, 262], "entail": 95, "delic": [95, 213], "albeit": [95, 274], "mimic": [95, 96, 115, 206, 265], "irrespect": [95, 239, 242, 267], "line_integr": 95, "as_sum": 95, "subinterv": 95, "trapezoid": [95, 104, 246], "730": 95, "809": 95, "decai": 95, "r552": 95, "riemann_sum": 95, "riemann_summation_method": 95, "r553": 95, "cauchy_principal_valu": 95, "r554": 95, "cauchyprincipalvalu": 95, "int_a": 95, "uvar": 95, "3aissu": 95, "3aopen": 95, "3aintegr": 95, "gauss_legendr": 95, "n_digit": 95, "legendr": [95, 108, 222, 226, 239], "r555": 95, "w_i": [95, 160, 222, 242], "7746": 95, "55556": 95, "88889": 95, "86114": 95, "33998": 95, "34785": 95, "65215": 95, "gauss_laguerr": 95, "gauss_gen_laguerr": 95, "gauss_hermit": 95, "gauss_chebyshev_t": 95, "gauss_chebyshev_u": 95, "gauss_jacobi": 95, "gauss_lobatto": 95, "gaussian_quadratur": 95, "r556": 95, "fsu": 95, "jburkardt": 95, "cpp_src": 95, "legendre_rul": 95, "laguerr": [95, 222, 226], "r557": 95, "41577": 95, "2943": 95, "2899": 95, "71109": 95, "27852": 95, "010389": 95, "22285": 95, "1889": 95, "9927": 95, "7751": 95, "8375": 95, "983": 95, "45896": 95, "417": [95, 238], "11337": 95, "010399": 95, "00026102": 95, "9855e": 95, "93laguerre_quadratur": 95, "r558": 95, "laguerre_rul": 95, "hermit": [95, 99, 104, 105, 215, 221, 222, 226, 246], "r559": 95, "2247": 95, "29541": 95, "1816": 95, "3506": 95, "3358": 95, "43608": 95, "00453": 95, "15707": 95, "72463": 95, "hermite_quadratur": 95, "r560": 95, "hermite_rul": 95, "r561": 95, "gen_hermite_rul": 95, "r562": 95, "19016": 95, "7845": 95, "5253": 95, "4493": 95, "31413": 95, "00906": 95, "97851": 95, "9904": 95, "3193": 95, "53087": 95, "67721": 95, "11895": 95, "0023152": 95, "r563": 95, "gen_laguerre_rul": 95, "r564": 95, "86602": 95, "0472": 95, "96593": 95, "70711": 95, "25882": 95, "5236": 95, "93gauss_quadratur": 95, "r565": 95, "chebyshev1_rul": 95, "r566": 95, "3927": 95, "7854": 95, "90097": 95, "62349": 95, "22252": 95, "084489": 95, "27433": 95, "42658": 95, "r567": 95, "chebyshev2_rul": 95, "jacobi": [95, 108, 126, 222, 226], "r568": 95, "7063": 95, "0973": 95, "33795": 95, "87174": 95, "5917": 95, "2093": 95, "050584": 95, "22169": 95, "39439": 95, "93jacobi_quadratur": 95, "r569": 95, "jacobi_rul": 95, "r570": 95, "gegenbauer_rul": 95, "lobatto": 95, "r571": 95, "3333": 95, "44721": 95, "16667": 95, "83333": 95, "93lobatto_rul": 95, "r572": 95, "20200118141346": 95, "page_888": 95, "intpoli": 95, "chin": 95, "al": [95, 111, 112, 114, 141, 170, 219, 235, 238], "2015": [95, 135, 245], "unit_cub": 95, "polytope_integr": 95, "eric": [95, 220], "jean": 95, "lasserr": 95, "sukumar": 95, "nonconvex": 95, "967": 95, "981": 95, "dilbert": 95, "engr": 95, "ucdavi": 95, "suku": 95, "max_degre": [95, 222], "689": [95, 117], "21875": 95, "octahedron": 95, "trivari": 95, "enable_automatic_int_sympif": 96, "enable_automatic_symbol": 96, "init_ipython_sess": 96, "argv": [96, 257], "init_python_sess": 96, "use_latex": [96, 206, 212, 301], "quiet": 96, "str_printer": [96, 206], "latex_print": [96, 206], "pylab": 96, "stringifi": [96, 206], "sstrrepr": [96, 206, 226], "lexograph": [96, 206], "\u03b8": [96, 133, 163, 245], "int_to_integ": 96, "decistmt": 96, "f401": 96, "0x12": 96, "num_column": [96, 206, 226, 242], "no_glob": [96, 206], "ip": [96, 179, 185, 206], "forecolor": [96, 206], "backcolor": [96, 206], "fontsiz": [96, 206, 226], "10pt": [96, 206, 226], "latex_mod": [96, 206], "print_builtin": [96, 206], "interactiveconsol": [96, 206], "preambl": [96, 206, 226], "handwritten": [96, 206], "ctan": [96, 206], "pkg": [96, 206], "dvi": [96, 206, 226], "foreground": [96, 206], "black": [96, 116, 176, 187, 206, 226, 301], "white": [96, 116, 206, 246], "documentclass": [96, 206, 226], "dpi": [96, 206], "u03b8": 96, "dvip": 96, "r573": 96, "r574": 96, "the_68_standard_colors_known_to_dvip": 96, "root_system": 97, "rootsystem": 97, "cartantyp": 97, "cartan": 97, "subalgebra": 97, "adjoint": [97, 99, 104, 168, 172], "hyperplan": 97, "k_y": 97, "r575": 97, "r576": 97, "humphrei": 97, "add_as_root": 97, "root1": 97, "root2": 97, "add_simple_root": 97, "newroot": 97, "all_root": [97, 108, 222], "cartan_matrix": 97, "dynkin_diagram": 97, "dynkin": 97, "root_spac": 97, "simple_root": 97, "type_a": 97, "typea": 97, "basic_root": 97, "iin": 97, "jth": [97, 215, 245], "ijth": 97, "cartan_typ": 97, "highest_root": 97, "lie_algebra": 97, "positive_root": 97, "type_b": 97, "typeb": 97, "b4": 97, "b3": [97, 141, 158, 201, 276], "type_c": 97, "typec": 97, "type_d": 97, "dmension": 97, "type_": 97, "e6": 97, "type_f": 97, "typef": 97, "f_4": [97, 135], "f4": [97, 212], "type_g": 97, "typeg": 97, "weyl_group": 97, "weylgroup": 97, "semisimpl": 97, "isometri": 97, "coxet": 97, "coxeter_diagram": 97, "undirect": [97, 264], "s_is_j": 97, "delete_doubl": 97, "element_ord": 97, "weylelt": 97, "group_nam": 97, "group_ord": 97, "192": 97, "matrix_form": 97, "cartantype_gener": 97, "standard_cartan": 97, "dynkindiagram": 97, "cartanmatrix": 97, "sopform": 98, "minterm": 98, "dontcar": 98, "simplified_pair": 98, "combo": 98, "outcom": [98, 194, 246], "posform": 98, "r577": 98, "quin": 98, "mccluskey_algorithm": 98, "r578": 98, "27t": 98, "care_term": 98, "r579": 98, "r580": 98, "anfform": 98, "truthvalu": 98, "anf": 98, "zhegalkin": 98, "r581": 98, "zhegalkin_polynomi": 98, "booleantru": 98, "greet": 98, "booleanfals": 98, "universalset": [98, 234], "nand": 98, "xnor": 98, "gate": [98, 171, 176, 178, 184, 185, 187, 287], "perspect": [98, 108, 124, 196, 212, 259, 275, 279], "multiplex": 98, "disjunct": 98, "to_anf": 98, "oplu": [98, 175], "to_cnf": 98, "cnf": 98, "mccluskei": 98, "to_dnf": 98, "to_nnf": 98, "nnf": 98, "is_anf": 98, "is_cnf": 98, "is_dnf": 98, "is_nnf": 98, "gateinputcount": 98, "simplify_log": 98, "fewest": [98, 185], "r582": 98, "bool_map": 98, "bool1": 98, "bool2": 98, "function1": 98, "function2": 98, "distribute_and_over_or": 98, "distribute_or_over_and": 98, "distribute_xor_over_and": 98, "eliminate_impl": 98, "truth_tabl": 98, "ibin": [98, 264], "integer_to_term": 98, "0001111011": [98, 264], "1101111000": [98, 264], "term_to_integ": 98, "bool_maxterm": 98, "maxterm": 98, "complement": [98, 101, 222, 234, 245], "r583": 98, "canonical_normal_form": 98, "indexing_maxterm": 98, "bool_minterm": 98, "r584": 98, "indexing_minterm": 98, "bool_monomi": 98, "anf_coeff": 98, "to_int_repr": 98, "all_model": 98, "use_lra_theori": 98, "unsatisfi": 98, "use_model": 98, "unsat": 98, "dirac": [99, 104, 122, 126, 127, 189, 226], "__abs__": [99, 217], "__add__": [99, 217, 221], "__len__": 99, "96": [99, 104, 246], "mismatch": 99, "matrix_multiply_elementwis": [99, 104], "col": [99, 101, 104, 107, 124, 158, 215, 221, 298], "col_del": [99, 104, 298], "col_join": [99, 104, 143], "col_insert": [99, 298], "row_insert": [99, 298], "row_join": [99, 104, 143], "companion": [99, 101], "c0": [99, 101, 112, 233, 242, 244], "sparsematrix": [99, 104, 107, 227, 238], "diag": [99, 101, 104, 107, 158, 215, 252, 298], "immutablematrix": [99, 100, 101, 124, 201, 246, 270, 273, 298], "blockmatrix": [99, 101, 104], "sparsetool": [99, 107], "band": [99, 107], "kth": [99, 108], "rowslist": [99, 215], "colslist": [99, 215], "submatrix": [99, 104, 215, 219, 246], "get_diag_block": [99, 101, 104], "decoupl": 99, "hstack": [99, 215], "is_anti_symmetr": 99, "is_diagon": [99, 104, 215], "is_low": [99, 215], "is_upp": [99, 215], "matrixeigen": [99, 104], "is_diagonaliz": [99, 104], "is_hermitian": [99, 104], "is_lower_hessenberg": 99, "hessenberg": [99, 104], "superdiagon": 99, "is_upper_hessenberg": 99, "is_strongly_diagonally_domin": 99, "strongli": [99, 104, 114, 215, 264], "m1": [99, 104, 108, 116, 117, 162, 170, 188, 190, 194, 239, 242, 247, 252], "subdiagon": [99, 104], "is_weakly_diagonally_domin": 99, "weakli": [99, 264], "vacuou": 99, "jordan_block": [99, 104], "eigenvalu": [99, 104, 141, 143, 185, 188, 296], "eigenv": [99, 104, 141, 143, 158, 185, 296, 298], "r585": 99, "jordan_matrix": [99, 242], "dotprodsimp": 99, "blowup": [99, 215], "multiply_elementwis": [99, 104, 215], "hadamard": [99, 101, 104, 175, 176, 187, 226], "elementwis": [99, 101, 104, 215, 247], "300": [99, 104, 108, 116, 207, 212, 223, 279], "a_0": [99, 104, 229, 239, 242, 247, 302], "vdot": [99, 101, 104, 196], "alpha_0": 99, "alpha_1": [99, 108, 221], "alpha_": [99, 114, 211], "permute_col": 99, "permute_row": 99, "mulsimp": 99, "rmultipli": 99, "__rmul__": 99, "rot90": 99, "anticlockwis": [99, 120], "row_del": [99, 104, 298], "todod": 99, "tolist": [99, 247], "vech": 99, "check_symmetri": 99, "vstack": [99, 215], "w_": [99, 221], "wminu": 99, "wplu": 99, "r586": 99, "mathwork": [99, 122, 246, 298], "cleve": 99, "r587": 99, "claredon": 99, "oxford": 99, "662": 99, "intm": 99, "mutabledensematrix": [100, 215, 267], "densematrix": [100, 104], "ldldecomposit": [100, 104], "ldl": [100, 104], "choleski": [100, 104], "ludecomposit": [100, 101, 104, 215, 298], "qrdecomposit": [100, 104], "as_immut": 100, "lower_triangular_solv": [100, 104], "upper_triangular_solv": [100, 104], "gauss_jordan_solv": [100, 104], "cholesky_solv": [100, 104], "diagonal_solv": [100, 104], "ldlsolv": [100, 104], "qrsolv": [100, 104], "pinv_solv": [100, 104], "cramer_solv": [100, 104], "permutedim": [101, 247, 248], "arraytensorproduct": [101, 247, 248], "from_index_summ": 101, "first_index": 101, "last_index": 101, "longrightarrow": 101, "matpow": [101, 226], "hadamard_product": 101, "aka": 101, "hadamardproduct": [101, 226], "hadamardpow": [101, 226], "ddot": [101, 104, 145, 154, 206, 209, 226, 302], "functionmatrix": 101, "lazili": [101, 232, 264], "342923500": 101, "permutationmatrix": [101, 104], "matrixpermut": 101, "companionmatrix": 101, "matrixset": [101, 234], "submatric": [101, 104, 215, 246], "block_collaps": 101, "dat": [101, 264], "irregular": [101, 104], "ldudecomposit": 101, "ldu": 101, "2x2": [101, 107, 160, 215, 242], "udldecomposit": 101, "udl": 101, "schur": 101, "pinv": [101, 104], "r588": 101, "schur_compl": 101, "blockdiagmatrix": [101, 104], "diag_block": 101, "bridg": [102, 118, 120, 141, 265], "tension": [102, 118], "gramschmidt": 104, "m2": [104, 108, 116, 117, 136, 162, 170, 188, 190, 194, 221, 239, 242, 247, 252], "126": [104, 108, 225], "150": [104, 124, 239], "v3": [104, 201, 205, 276], "glue": 104, "m3": [104, 170, 239, 247], "adj": [104, 215], "qr": 104, "cheat": 104, "soln": 104, "gram": [104, 195, 196, 198], "schmidt": 104, "out1": 104, "out2": 104, "1692": 104, "1551": 104, "423": 104, "6707": 104, "spot": [104, 159], "eigenvector": [104, 141, 185, 186, 211], "nullspac": [104, 215], "matrixdetermin": 104, "adjug": [104, 215], "berkowitz": [104, 215], "bareiss": [104, 215], "bird": 104, "cofactor_matrix": 104, "charpoli": [104, 215, 298], "_simplifi": 104, "purepoli": [104, 215, 222], "samuelson": [104, 215], "minor_submatrix": 104, "iszerofunc": [104, 298], "r589": 104, "barei": 104, "det_lu": 104, "functiontyp": 104, "_iszero": [104, 298], "_is_zero_after_expand_mul": 104, "nonsquarematrixerror": [104, 242], "i3": [104, 125, 141, 158, 252], "1072": 104, "1074": 104, "ipl": 104, "006": 104, "ryser": 104, "r590": 104, "prof": 104, "ben": 104, "berkelei": 104, "bernd": 104, "ban275": 104, "r591": 104, "permanent_": 104, "r592": 104, "r593": 104, "rectangular": [104, 212, 234, 245, 274], "0904": 104, "3251": 104, "matrixreduct": 104, "echelon_form": [104, 298], "with_pivot": 104, "echelon": [104, 215, 245, 298], "elementary_col_op": 104, "kn": [104, 116, 117, 118], "col1": 104, "col2": 104, "km": [104, 108, 128, 134, 143, 145, 148, 149, 153, 155, 158, 197], "elementary_row_op": 104, "row1": 104, "row2": 104, "is_echelon": [104, 298], "rref": [104, 215], "pivot": [104, 215, 298], "normalize_last": 104, "rref_matrix": [104, 215], "rref_pivot": [104, 215], "301369863013699": 104, "712328767123288": 104, "rref_rh": 104, "matrixsubspac": 104, "subspac": [104, 221], "columnspac": [104, 215], "rowspac": [104, 215], "orthonorm": [104, 158, 186, 210, 274], "rankcheck": 104, "r594": 104, "93schmidt_process": 104, "eigen": [104, 167], "bidiagonal_decomposit": 104, "ubv": 104, "bidiagon": 104, "bidiagn": 104, "r595": 104, "golub": 104, "van": [104, 108, 220], "loan": 104, "r596": 104, "vslobodi": 104, "household": 104, "r597": 104, "r598": 104, "reals_onli": 104, "error_when_incomplet": 104, "eig": [104, 141, 158], "matrixerror": 104, "got": [104, 213, 216, 219, 222, 225, 257, 258, 264, 265, 294, 296, 297], "eigenvect": [104, 141, 158, 185, 298], "tidi": 104, "artifact": 104, "ret": 104, "eigenspac": 104, "rag": 104, "a_3": 104, "diagonaliz": [104, 298], "is_indefinit": 104, "semidefinit": [104, 246], "plot3d": [104, 212], "is_positive_definit": 104, "is_positive_semidefinit": 104, "is_negative_definit": 104, "is_negative_semidefinit": 104, "defer": 104, "r599": 104, "definiteness_of_a_matrix": 104, "r600": 104, "positivedefinitematrix": 104, "r601": 104, "amer": 104, "259": 104, "264": [104, 244], "r602": 104, "r603": 104, "r604": 104, "r605": 104, "r606": 104, "r607": 104, "r608": 104, "r609": 104, "r610": 104, "r611": 104, "r612": 104, "r613": 104, "jordan_form": 104, "calc_transform": 104, "left_eigenvect": 104, "singular_valu": 104, "condition_numb": 104, "matrixcalculu": 104, "hessian": 104, "wronskian": [104, 242], "simpfunc": 104, "permutebkwd": 104, "permutefwd": 104, "lucombin": 104, "defici": [104, 108, 245], "matrixi": 104, "ludecomposition_simpl": [104, 298], "ludecompositionff": 104, "pa": [104, 112, 129, 134, 136, 137, 153, 156, 159], "r614": 104, "zhou": 104, "jeffrei": [104, 238], "frontier": [104, 234], "china": 104, "67": [104, 219, 220], "2008": [104, 211, 220, 222, 226], "row_swap": 104, "permute_backward": 104, "permute_forward": 104, "intiuit": 104, "lu_": 104, "_find_reasonable_pivot": 104, "qr_solv": 104, "167": 104, "158": [104, 117], "27261": 104, "30625": 104, "348": 104, "1914": 104, "6125": [104, 108], "30589": 104, "198": 104, "1225": 104, "q_aug": 104, "r_aug": 104, "analytic_func": 104, "connected_compon": [104, 264], "connected_components_decomposit": 104, "det_method": 104, "cramer": [104, 134, 215, 242], "46": [104, 108, 116, 196, 225, 244, 246], "r615": 104, "27s_rule": 104, "explicit_formulas_for_small_system": 104, "relax": [104, 110], "3x1": 104, "1x3": 104, "hat": [104, 133, 152, 200, 201, 206, 207, 209, 210, 274, 275, 277, 279, 280], "conjugate_convent": 104, "dual": [104, 183, 189], "anti_symmetr": 104, "speak": [104, 221, 277], "freevar": 104, "underdetermin": [104, 215, 244, 245], "free_var_index": 104, "tau0": [104, 245, 246], "tau1": 104, "taus_zero": 104, "sol_uniqu": 104, "r616": 104, "gaussian_elimin": 104, "try_block_diag": 104, "inverse_g": [104, 298], "inverse_lu": [104, 298], "inverse_adj": [104, 298], "inverse_ch": 104, "inverse_ldl": 104, "inverse_qr": 104, "inv_mod": 104, "cof": 104, "inverse_block": 104, "blockwis": 104, "ntop": 104, "key2bound": 104, "key2ij": 104, "reciproc": [104, 246, 302], "fro": 104, "sing": 104, "spectral": 104, "rd": [104, 141, 226], "r617": 104, "penrose_pseudoinvers": 104, "arbitrary_matrix": 104, "wn_m": 104, "_w0_0": 104, "_w1_0": 104, "_w2_0": 104, "59": [104, 242], "r618": 104, "obtaining_all_solutions_of_a_linear_system": 104, "print_nonzero": [104, 264], "symb": [104, 226], "rank_decomposit": 104, "r619": 104, "rank_factor": 104, "r620": 104, "piziak": 104, "odel": 104, "magazin": 104, "2307": 104, "2690882": 104, "singular_value_decomposit": 104, "condens": [104, 245], "v_aug": 104, "u_aug": 104, "s_aug": 104, "gj": [104, 215], "solve_least_squar": 104, "strongly_connected_compon": [104, 215, 264], "62": [104, 219], "strongly_connected_components_decomposit": 104, "rowstart": 104, "rowend": 104, "rowsep": 104, "colsep": 104, "strprinter": [104, 206], "upper_hessenberg_decomposit": 104, "213": 104, "134": 104, "216": [104, 219], "hessenbergdecomposit": 104, "angular": [104, 116, 126, 130, 133, 136, 143, 144, 145, 146, 148, 150, 152, 155, 158, 160, 164, 165, 167, 170, 188, 192, 201, 205, 211], "rot_ccw_axis3": 104, "retriv": 104, "jordan_cel": 104, "varlist": 104, "r621": 104, "hessian_matrix": 104, "vlist": 104, "r622": 104, "casoratian": 104, "kernel": [104, 213, 219, 221, 244], "vanish": [104, 191, 219, 222, 225, 242, 270], "rsolve_hyp": [104, 244], "randmatrix": 104, "percent": [104, 245], "prng": 104, "percentag": [104, 108], "rot_given": 104, "diment": 104, "kk": 104, "ji": [104, 248], "rot_axis1": 104, "rot_axis2": 104, "rot_axis3": 104, "rot_ccw_axis1": 104, "rot_ccw_axis2": 104, "r623": 104, "givens_rot": 104, "list2numpi": 104, "dtype": [104, 109, 213, 215, 216, 217, 226, 265], "matrix2numpi": 104, "symarrai": 104, "ndarrai": [104, 212, 246, 252, 258], "prefix_i1_i2_": 104, "a_0_0": 104, "a_0_1": 104, "a_0_2": 104, "a_1_0": 104, "a_1_1": 104, "a_1_2": 104, "a_0_0_0": 104, "a_0_0_1": 104, "a_0_1_0": 104, "a_0_1_1": 104, "a_0_2_0": 104, "a_0_2_1": 104, "a_1_0_0": 104, "a_1_0_1": 104, "a_1_1_0": 104, "a_1_1_1": 104, "a_1_2_0": 104, "a_1_2_1": 104, "a2idx": 104, "normalform": [105, 215], "hermite_normal_form": [105, 215, 221], "check_rank": [105, 215], "hnf": [105, 215, 221], "explos": [105, 215], "believ": [105, 108, 215], "dmdomainerror": [105, 215], "dmshapeerror": [105, 215], "r624": 105, "mutablesparsematrix": 106, "_doktocsr": 107, "csr": 107, "ja": 107, "ia": 107, "_csrtodok": 107, "dok": [107, 215], "1x1": [107, 246], "vert": [107, 207, 210, 279], "saw": [107, 216, 302], "sieve_interv": 108, "dynam": [108, 111, 114, 115, 121, 122, 124, 128, 131, 134, 135, 136, 137, 139, 140, 143, 151, 153, 154, 155, 156, 157, 158, 159, 200, 201, 203, 205, 209, 210, 261, 262, 270], "eratosthen": 108, "_reset": [108, 222], "_list": 108, "extend_to_no": 108, "mobiusrang": 108, "primerang": 108, "10th": 108, "totientrang": 108, "1e11": 108, "50000": 108, "primal": [108, 213], "1299709": 108, "r625": 108, "prime_number_theorem": 108, "table_of_": 108, "cf": [108, 219], "28x": 108, "2c_x_": 108, "2f_log_x": 108, "2c_and_li": 108, "r626": 108, "approximations_for_the_nth_prime_numb": 108, "r627": 108, "27_number": 108, "arr1": 108, "arr2": 108, "prevprim": 108, "9th": 108, "nextprim": 108, "occupi": [108, 191, 252], "conjectur": [108, 219], "twin": 108, "bertrand": 108, "brocard": 108, "primori": 108, "r628": 108, "r629": 108, "utm": 108, "postul": 108, "112": [108, 219, 223], "r630": 108, "s_postul": 108, "primefactor": 108, "argu": 108, "cycle_length": 108, "nmax": 108, "brent": [108, 261], "floyd": 108, "cycle_detect": 108, "17737": 108, "20000": 108, "compositepi": 108, "831": 108, "smoothness_p": 108, "sm": [108, 141, 158, 213], "psm": 108, "govern": [108, 111, 114], "10431": 108, "21477639576571": 108, "4410317": 108, "1787": 108, "4869863": 108, "2434931": 108, "multiplicity_in_factori": 108, "nfac": 108, "52818775009509558395695966887": 108, "is2pow": 108, "pollard_rho": 108, "max_step": 108, "pollard": [108, 242], "leader": 108, "16843009": 108, "32767": 108, "4i": 108, "3i": 108, "2489": 108, "1482": 108, "285": [108, 244], "leadup": 108, "r631": 108, "crandal": 108, "carl": [108, 261], "pomer": [108, 261], "229": 108, "231": [108, 201], "pollard_pm1": 108, "likelihood": 108, "1009": 108, "am": [108, 196, 226], "255": 108, "crack": 108, "617": 108, "1786": 108, "worst": [108, 222, 242], "scenario": [108, 246], "divisisor": 108, "realist": 108, "r632": 108, "236": 108, "r633": 108, "20150716201437": 108, "washington": 108, "2007": [108, 157, 261], "ent": 108, "node81": 108, "r634": 108, "toronto": 108, "yuvalf": 108, "use_ecm": 108, "65537": [108, 225], "1407633717262338957430697921446883": 108, "991": 108, "202916782076162456022877024859": 108, "4200": 108, "1764": 108, "toggl": [108, 212], "12345678910111213141516": 108, "2507191691": 108, "1231026625769": 108, "factorrat": 108, "rat": 108, "987": 108, "10000000001": 108, "99009901": 108, "divisor_count": 108, "tim": [108, 264], "1010381": 108, "proper_divisor": 108, "proper_divisor_count": 108, "udivisor": 108, "udivisor_count": 108, "r635": 108, "unitary_divisor": 108, "r636": 108, "unitarydivisor": 108, "r637": 108, "unitarydivisorfunct": 108, "antidivisor": 108, "r638": 108, "margin": [108, 124, 212, 246], "antidivisor_count": 108, "a066272": 108, "a066272a": 108, "r639": 108, "r640": 108, "27s_totient_funct": 108, "r641": 108, "totientfunct": 108, "r642": 108, "carmichael_funct": 108, "r643": 108, "carmichaelfunct": 108, "sigma_k": 108, "m_i": [108, 211, 219], "m_ik": 108, "r644": 108, "divisor_funct": 108, "udivisor_sigma": 108, "47450": 108, "152": 108, "r645": 108, "core_t": 108, "core_2": 108, "squarefre": [108, 221], "cubefre": 108, "9424": 108, "1178": 108, "379238": 108, "square_factor": [108, 239], "r646": 108, "free_integ": 108, "squarefree_cor": 108, "primenu": 108, "r647": 108, "primeomega": 108, "r648": 108, "mersenne_prime_expon": 108, "mersenn": 108, "4423": 108, "r649": 108, "perfectnumb": 108, "r650": 108, "perfect_numb": 108, "is_mersenne_prim": 108, "r651": 108, "mersenneprim": 108, "abund": 108, "is_abund": 108, "r652": 108, "abundantnumb": 108, "is_defici": 108, "r653": 108, "deficientnumb": 108, "is_amic": 108, "amic": 108, "220": [108, 222], "r654": 108, "amicable_numb": 108, "symmetric_residu": 108, "v_i": [108, 221, 244], "65": [108, 124, 219, 246], "639985": [108, 219], "912285": [108, 219], "954": 108, "gf_crt": [108, 219], "solve_congru": [108, 219], "programm": [108, 226], "galoistool": [108, 219], "crt1": [108, 219], "crt2": [108, 219], "397042": 108, "803206": 108, "gf_crt1": [108, 219], "4536": 108, "gf_crt2": [108, 219], "remainder_modulus_pair": 108, "mi": [108, 226], "k1": [108, 158, 189, 216, 217, 219], "k2": [108, 158, 216], "c_kn": 108, "binomial_coefficients_list": 108, "multinomial_coeffici": 108, "k_m": 108, "k_i": [108, 219, 236], "yann": 108, "laigl": 108, "chapui": 108, "permiss": [108, 211], "multinomial_coefficients_iter": 108, "_tupl": 108, "m53": 108, "partitions_": 108, "npartit": 108, "hardi": 108, "rademach": [108, 246], "r655": 108, "1958": [108, 211], "partitionfunctionp": 108, "is_fermat_pseudoprim": 108, "fermat": [108, 162], "pseudoprim": 108, "561": 108, "645": 108, "r656": 108, "fermat_pseudoprim": 108, "is_euler_pseudoprim": 108, "r657": 108, "euler_pseudoprim": 108, "is_euler_jacobi_pseudoprim": 108, "r658": 108, "93jacobi_pseudoprim": 108, "prep": [108, 242, 243], "r659": 108, "mersenneforum": 108, "showpost": 108, "110896": 108, "mr": 108, "miller": 108, "rabin": 108, "wit": 108, "1373651": 108, "479001599": 108, "r660": 108, "135": 108, "138": 108, "93rabin_primality_test": 108, "deterministic_vari": 108, "is_lucas_prp": 108, "selfridg": 108, "377": 108, "1159": 108, "1829": 108, "3827": 108, "5459": 108, "5777": 108, "9071": 108, "9179": 108, "r661": 108, "bailli": 108, "samuel": 108, "wagstaff": 108, "1980": [108, 264], "1391": 108, "1417": 108, "2fs0025": 108, "0583518": 108, "mpq": [108, 215, 216], "lucaspseudoprim": 108, "r662": 108, "a217120": 108, "r663": 108, "lucas_pseudoprim": 108, "is_strong_lucas_prp": 108, "bpsw": 108, "10877": 108, "16109": 108, "18971": 108, "r664": 108, "r665": 108, "a217255": 108, "r666": 108, "r667": 108, "psw_primality_test": 108, "is_extra_strong_lucas_prp": 108, "r668": 108, "mo": [108, 158, 226], "jone": [108, 163], "preprint": 108, "a217719": 108, "perl": 108, "989": 108, "3239": 108, "jon": 108, "grantham": 108, "234": 108, "891": 108, "01197": 108, "r669": 108, "r670": 108, "counterexampl": [108, 302], "1e3": 108, "1e23": [108, 267], "near_int": 108, "strong_pseudoprim": 108, "is_gaussian_prim": 108, "r671": 108, "gaussian_prim": 108, "residue_ntheori": [108, 219], "n_order": 108, "2q": 108, "primitive_root": [108, 221], "r672": 108, "stein": [108, 242], "r673": 108, "hackman": 108, "sqrt_mod": 108, "sqrt_mod_it": 108, "quadratic_residu": 108, "nthroot_mod": 108, "109": [108, 220, 239], "r674": 108, "is_nthpow_residu": 108, "r675": 108, "is_quad_residu": 108, "legendre_symbol": 108, "genfrac": 108, "nonresidu": 108, "alpha_2": [108, 221], "alpha_k": 108, "kronecker_symbol": 108, "r676": 108, "discrete_log": 108, "prime_ord": 108, "giant": [108, 245], "pohlig": 108, "r677": 108, "discretelogarithm": 108, "r678": 108, "cryptographi": [108, 281, 288], "menez": 108, "vanston": 108, "quadratic_congru": 108, "5x": [108, 239], "polynomial_congru": [108, 219], "3257": 108, "gf_csolv": [108, 219], "binomial_mod": 108, "r679": 108, "24310": 108, "continued_fract": 108, "continued_fraction_period": 108, "continued_fraction_reduc": 108, "continued_fraction_converg": 108, "continued_fraction_iter": 108, "106": 108, "103993": 108, "33102": 108, "104348": 108, "33215": 108, "208341": 108, "66317": 108, "292": 108, "r680": 108, "discrimin": [108, 217, 219, 221, 222], "r681": 108, "periodic_continued_fract": 108, "r682": 108, "rosen": 108, "379": [108, 222], "381": 108, "januari": 108, "1992": [108, 220, 244, 264], "233": [108, 220, 242], "718281835": 108, "287": 108, "1111339": 108, "0xfa": 108, "c77": 108, "is_palindrom": [108, 264], "palindrom": 108, "0o121": 108, "oct": 108, "0o171": 108, "fermion": [108, 191], "r683": 108, "b6bius_funct": 108, "r684": 108, "thoma": [108, 157], "koshi": 108, "egyptian_fract": 108, "greedi": [108, 219, 235, 238], "egyptian": 108, "r685": 108, "jewett": 108, "takenouchi": 108, "3192": 108, "1118": 108, "2580": 108, "sylvest": [108, 219], "r686": 108, "seldom": 108, "blow": 108, "doubli": 108, "exhibit": [108, 211, 221, 235], "singli": 108, "tendenc": 108, "r687": 108, "1921": 108, "golumb": 108, "1962": 108, "propos": 108, "bleicher": 108, "1972": 108, "r688": 108, "420": [108, 239], "140": 108, "574": 108, "2788": 108, "6460": 108, "11590": 108, "33062": 108, "113820": 108, "greedy_algorithm_for_egyptian_fract": 108, "uci": 108, "eppstein": 108, "numth": 108, "egypt": 108, "20180413004012": 108, "ami": 108, "ektf": 108, "hu": [108, 215], "finalpdf": 108, "ami_42_from129to134": 108, "bbp_pi": 108, "pi_hex_digit": 108, "hex": 108, "3243f6a8885a30": 108, "0x3243f6a8885a30": 108, "0x324": 108, "r689": 108, "numberworld": 108, "subexponenti": 108, "comfort": [108, 109], "15154262241479": 108, "15423094826093": 108, "799333555511111": 108, "809709509409109": 108, "888888877777777": 108, "914148152112161": 108, "factoris": [108, 215, 216, 217, 222, 242], "max_curv": 108, "lenstra": [108, 215], "_ecm_one_factor": 108, "pseudorandom": [108, 264], "25645121643901801": 108, "5394769": 108, "4753701529": 108, "9804659461513846513": 108, "4641991": 108, "2112166839943": 108, "7060005655815754299976961394452809": 108, "6988699669998001": 108, "1010203040506070809": 108, "122921448543883967430908091422761898618349713604256384403202282756086473494959648313841": 108, "2709077133180915240135586837960864768806330782747": 108, "248": 108, "prime_bound": 108, "error_term": 108, "siq": 108, "modn": 108, "r690": 108, "semanticscholar": 108, "5c52": 108, "8a975c1405bd35c65993abf5a4edb667c1db": 108, "r691": 108, "rieselprim": 108, "ziki": 108, "initializing_quadratic_siev": 108, "5915587277": 108, "3267000013": 108, "000507214304613640": 109, "microsecond": 109, "000507214304614": 109, "hundr": [109, 265, 296], "nanosecond": 109, "84147098": [109, 265, 291], "84119981": 109, "84092844": 109, "05426074": 109, "05433146": 109, "05440211": 109, "nano": 109, "manufactur": 109, "asnumpi": 109, "jnp": 109, "asarrai": 109, "84147096": 109, "8411998": 109, "05426079": 109, "05433151": 109, "autowrap": [109, 251, 259, 263, 289], "implemented_funct": [109, 258, 265], "qualiti": [109, 226], "50u": 109, "1u": 109, "10n": 109, "sympy_pars": 110, "local_dict": 110, "lambda_not": 110, "repeated_decim": 110, "auto_numb": 110, "factorial_not": 110, "global_dict": 110, "standard_transform": 110, "implicit_multiplication_appl": 110, "implicit_appl": 110, "implicit_multipl": 110, "convert_equals_sign": 110, "function_exponenti": 110, "stringify_expr": 110, "eval_expr": 110, "name_dict": 110, "fullform": 110, "setdelai": 110, "datatyp": [110, 217, 226, 259], "split_symbol": 110, "split_symbols_custom": 110, "_token_splitt": 110, "can_split": 110, "unsplitt": 110, "10sin": 110, "3xyz": 110, "2111": 110, "typograph": 110, "liber": [110, 128, 296], "gracefulli": [110, 226, 250], "618": 110, "dfrac": [110, 246], "693147180559945": 110, "latex2sympi": 110, "stricter": 110, "unexpectedeof": 110, "grammar": [110, 141, 238], "larklatexpars": 110, "test_custom_latex": 110, "mathit": 110, "arctanh": [110, 226], "appliedfunct": 110, "nicefrac": 110, "tbinom": 110, "dbinom": 110, "superscript": [110, 124, 226], "bra": [110, 174, 179, 180, 181, 183, 185, 186, 189, 191], "ket": [110, 174, 179, 180, 181, 183, 185, 186, 189, 191], "stuff": [110, 212, 257, 259, 267], "env": 110, "pmatrix": [110, 196], "smallmatrix": [110, 226, 296], "parse_latex_lark": 110, "print_debug_output": 110, "grammar_fil": 110, "logger": 110, "transformtosympyexpr": 110, "visit_token": 110, "latexparsingerror": 110, "sym_expr": 110, "sympyexpress": 110, "source_cod": 110, "return_expr": 110, "src2": 110, "convert_to_expr": 110, "convert_to_c": 110, "src3": 110, "convert_to_python": 110, "src_code": 110, "filenam": [110, 226, 257, 258, 259, 267], "convert_to_fortran": 110, "musclotendon": 111, "musculotendon": [111, 112, 113, 115, 287], "muscl": [111, 112, 114], "fiber": [111, 112, 114], "voluntarili": 111, "biolog": 111, "diffus": 111, "textrm": [111, 209, 210, 234], "ion": [111, 239], "electr": [111, 162, 164, 207, 277, 279], "nervou": 111, "excit": [111, 114, 213], "biomechan": [111, 112, 114, 287], "activationbas": [111, 114], "input_var": [111, 114], "state_var": [111, 114], "with_default": [111, 112, 114], "firstorderactivationdegroote2016": [111, 114], "activation_time_const": 111, "deactivation_time_const": 111, "smoothing_r": 111, "groot": [111, 112, 114], "da": [111, 242], "tau_a": 111, "3a": 111, "tau_d": 111, "015": 111, "060": 111, "r692": 111, "kinnei": [111, 112, 114], "rao": [111, 112, 114], "fregli": [111, 112, 114], "colloc": [111, 112, 114], "biomed": [111, 112, 114], "2922": [111, 112, 114], "2936": [111, 112, 114], "deactiv": 111, "zerothorderactiv": 111, "exict": 111, "invol": 111, "characteristiccurvecollect": [112, 114], "tendon_force_length": 112, "characteristiccurvefunct": 112, "tendon_force_length_invers": 112, "fiber_force_length_pass": 112, "fiber_force_length_passive_invers": 112, "fiber_force_length_act": 112, "fiber_force_veloc": 112, "fiber_force_velocity_invers": 112, "fiberforcelengthactivedegroote2016": 112, "l_m_tild": 112, "c6": [112, 217], "c8": 112, "c9": 112, "c10": 112, "c11": 112, "fl": [112, 134, 143, 153, 154, 158, 220], "mright": 112, "814": 112, "162": 112, "0633": 112, "433": 112, "717": 112, "0299": 112, "354": 112, "popul": [112, 114, 246], "fl_m": 112, "l_m": [112, 114, 264], "l_m_opt": [112, 114], "0519737844841": 112, "390740740740741": 112, "1495": 112, "98991349867535": 112, "79798269973507": 112, "825": 112, "0166133211401": 112, "6174190361677": 112, "943396226415094": 112, "4067977442463": 112, "r693": 112, "sixth": 112, "seventh": 112, "eighth": 112, "ninth": 112, "tenth": 112, "eleventh": 112, "tweflth": 112, "fl_m_act": 112, "passiv": [112, 114, 188], "fiberforcelengthpassivedegroote2016": 112, "0186573603637741": 112, "66666666666667": 112, "12438240242516": 112, "r694": 112, "l_t_tild": 112, "fiberforcelengthpassiveinversedegroote2016": 112, "fl_m_pa": 112, "m_pa": 112, "tendon": [112, 114], "r695": 112, "fiberforcevelocitydegroote2016": 112, "v_m_tild": 112, "fv": [112, 217], "c_2right": 112, "318": 112, "374": 112, "886": 112, "isometr": [112, 114], "fv_m": 112, "v_m": [112, 244], "v_m_max": [112, 114], "591382": 112, "r696": 112, "fiberforcevelocityinversedegroote2016": [112, 114], "r697": 112, "tendonforcelengthdegroote2016": [112, 114], "995": 112, "93669377311689": 112, "unstrain": 112, "strain": 112, "fl_t": 112, "l_t_slack": [112, 114], "slack": [112, 114], "787338754623378": 112, "r698": 112, "tendonforcelengthinversedegroote2016": 112, "r699": 112, "multibodi": [114, 115, 135, 136, 141, 151, 157, 158, 159, 209], "musculotendonbas": 114, "pathwai": [114, 129, 132, 140, 151, 287], "activation_dynam": 114, "musculotendon_dynam": 114, "musculotendonformul": 114, "rigid_tendon": 114, "tendon_slack_length": 114, "peak_isometric_forc": 114, "optimal_fiber_length": 114, "maximal_fiber_veloc": 114, "optimal_pennation_angl": 114, "fiber_damping_coeffici": 114, "suffix": [114, 222, 259], "pathwaybas": [114, 129, 137], "actuat": [114, 132, 137, 139, 151, 287], "linearpathwai": [114, 129, 137], "rigid": [114, 117, 120, 130, 134, 136, 141, 143, 146, 151, 158, 201, 209, 287], "elast": [114, 116, 117], "fiber_length_explicit": 114, "tendon_force_explicit": 114, "fiber_length_implicit": 114, "tendon_force_implicit": 114, "unload": 114, "peak": [114, 160], "opt": [114, 213, 215, 219, 238, 257, 298], "pennat": 114, "damp": [114, 129, 158], "contractil": [114, 129], "f_m_max": 114, "alpha_opt": 114, "0000000000000": [114, 164], "musculotendondegroote2016": 114, "set_po": [114, 129, 136, 137, 140, 141, 205, 209], "set_vel": [114, 129, 130, 134, 136, 140, 141, 143, 145, 148, 149, 150, 153, 154, 155, 156, 158, 159, 205, 209], "extension_veloc": [114, 129, 137], "a_muscl": 114, "e_muscl": 114, "tau_a_muscl": 114, "tau_d_muscl": 114, "b_muscl": 114, "rigid_tendon_muscl": 114, "c_0_fl_t_muscl": 114, "c_1_fl_t_muscl": 114, "c_2_fl_t_muscl": 114, "c_3_fl_t_muscl": 114, "c_0_fl_m_pas_muscl": 114, "c_1_fl_m_pas_muscl": 114, "c_0_fl_m_act_muscl": 114, "c_1_fl_m_act_muscl": 114, "c_2_fl_m_act_muscl": 114, "c_3_fl_m_act_muscl": 114, "c_4_fl_m_act_muscl": 114, "c_5_fl_m_act_muscl": 114, "c_6_fl_m_act_muscl": 114, "c_7_fl_m_act_muscl": 114, "c_8_fl_m_act_muscl": 114, "c_9_fl_m_act_muscl": 114, "c_10_fl_m_act_muscl": 114, "c_11_fl_m_act_muscl": 114, "c_0_fv_m_muscl": 114, "c_1_fv_m_muscl": 114, "c_2_fv_m_muscl": 114, "c_3_fv_m_muscl": 114, "righthand": 114, "intenum": 114, "elastic_tendon_muscl": 114, "l_m_tilde_muscl": 114, "r700": 114, "f_t": 114, "anatomi": 115, "skelet": 115, "muscular": 115, "neurolog": 115, "hierarchi": [115, 226, 246], "consequenti": 115, "continuum_mechan": [116, 117, 118, 120], "elastic_modulu": 116, "second_mo": 116, "base_char": 116, "withstand": [116, 117], "character": [116, 117, 207, 210, 233, 246, 252, 279], "profil": [116, 124], "shear": [116, 117], "meter": [116, 117, 118, 162, 165, 194, 195, 196, 197, 198], "downward": [116, 117, 118, 120, 221], "apply_load": [116, 117, 118, 120], "bc_deflect": [116, 117], "boundary_condit": 116, "solve_for_reaction_load": [116, 117], "shear_forc": [116, 117], "bending_mo": [116, 117], "reaction": [116, 117, 118, 120, 129], "upward": [116, 215, 221], "reaction_load": [116, 117, 118, 120], "applied_load": 116, "nm": [116, 117, 189, 247], "pointload": [116, 117], "ramp": [116, 117], "parabol": 116, "apply_support": [116, 120], "loc": 116, "freedom": [116, 133, 134, 139, 142, 145, 151, 246, 287], "roller": [116, 117, 120], "r_10": 116, "r_30": 116, "4000": [116, 117], "bc_slope": [116, 117], "cross_sect": 116, "12000": 116, "draw": [116, 120, 171, 226, 246], "pictori": 116, "shade": 116, "hing": [116, 117, 152], "disc": [116, 142, 151, 209, 287], "ild_moment": 116, "ild_react": 116, "ild_shear": 116, "axial": [116, 160], "cantilev": [116, 117], "666666666666667": [116, 117], "max_bmoment": 116, "max_deflect": 116, "max_shear_forc": 116, "plot_bending_mo": [116, 117], "gpa": 116, "400": [116, 212, 222], "13750": 116, "31250": 116, "plot_deflect": [116, 117], "00138541666666667": 116, "86458333333333e": 116, "04166666666667e": 116, "20833333333333e": 116, "51041666666667e": 116, "plot_ild_mo": 116, "solve_for_ild_mo": 116, "1kn": 116, "r_0": 116, "r_8": 116, "solve_for_ild_react": 116, "plot_ild_react": 116, "5kn": 116, "r_7": 116, "plotgrid": 116, "plot_ild_shear": 116, "solve_for_ild_shear": 116, "plot_loading_result": [116, 117], "subplot": [116, 212], "plot_shear_forc": [116, 117], "plot_shear_stress": 116, "stress": 116, "6875": 116, "2500": 116, "15625": [116, 198], "plot_slop": [116, 117], "59375e": 116, "125e": 116, "08333333333333e": 116, "0001953125": 116, "point_cflexur": 116, "overhang": [116, 117], "10kn": 116, "20kn": [116, 117], "3kn": 116, "remove_load": [116, 118, 120, 130], "shear_stress": 116, "beam3d": 116, "shear_modulu": 116, "apply_moment_load": 116, "solve_slope_deflect": 116, "r701": 116, "aau": 116, "jc": 116, "femtesemest": 116, "beams3d": 116, "angular_deflect": 116, "depict": [116, 207, 245, 279], "axial_forc": 116, "axial_stress": 116, "load_vector": 116, "max_bending_mo": 116, "16000": 116, "495": [116, 215], "10793": 116, "6400": 116, "301": [116, 236, 239], "560": 116, "2400": 116, "moment_load_vector": 116, "40000": 116, "4013": 116, "90300": 116, "1520": 116, "903": 116, "1600": [116, 117], "172": 116, "polar_mo": 116, "i1": [116, 125, 141, 158, 252], "1350": 116, "solve_for_tors": 116, "torsion": 116, "torqu": [116, 129, 130, 134, 136, 139, 146, 153, 154, 156, 158], "torsional_mo": 116, "________________": [117, 242], "_______________v": 117, "_______________": 117, "equilibrium": [117, 120, 129, 143, 155], "20e9": 117, "25e": 117, "______________________________________________": 117, "_______________________________________________": 117, "r\u2081": 117, "r\u2082": 117, "______________________": 117, "________________________": 117, "8kn": 117, "_____________": 117, "1m": 117, "3m": 117, "2m": 117, "5m": [117, 261], "679": 117, "12kn": 117, "________________________________": 117, "____________________________________________________": 117, "o____________________________________________________": 117, "4m": 117, "_____________________________________": 117, "m\u2081": 117, "m\u2082": 117, "connector": 117, "_____________________": 117, "_______________________": 117, "_____________________o_______________________": 117, "oooo": [117, 264], "r\u2083": 117, "_______i_______": 117, "flexur": 117, "____________": 117, "____________o________________________": 117, "support_1": 118, "support_2": 118, "tensil": [118, 120], "suspens": 118, "offshor": 118, "transmiss": [118, 163, 164], "270": [118, 120], "point_load": 118, "loads_posit": 118, "apply_length": 118, "360": [118, 120], "inclin": [118, 213], "change_support": 118, "new_support": 118, "new_label": [118, 120], "left_support": 118, "right_support": 118, "assembli": [120, 143], "joint": [120, 129, 132, 139, 144, 146, 151, 287], "add_nod": 120, "node_1": 120, "node_2": 120, "node_3": 120, "node_4": 120, "add_memb": 120, "member_1": 120, "member_2": 120, "member_3": 120, "member_4": 120, "member_5": 120, "change_member_label": 120, "change_node_label": 120, "bc_new": 120, "bd_new": 120, "subs_dict": 120, "ag": [120, 242], "bf": [120, 158], "fc": 120, "fe": 120, "internal_forc": 120, "member_length": 120, "node_label": 120, "node_posit": 120, "remove_memb": 120, "remove_nod": 120, "remove_support": 120, "revolv": 120, "r_node_1_x": 120, "r_node_1_i": 120, "r_node_2_i": 120, "interconnect": [121, 124, 133], "mimoseri": [121, 124], "mimoparallel": [121, 124], "control_plot": 122, "pole_color": 122, "blue": [122, 152, 212, 226], "pole_markers": 122, "zero_color": 122, "orang": 122, "zero_markers": 122, "show_ax": 122, "marker": [122, 212], "sisolineartimeinvari": [122, 124], "markers": 122, "pole_zero_numerical_data": 122, "r702": 122, "93zero_plot": 122, "siso": [122, 124], "8660254j": 122, "bode_plot": 122, "initial_exp": 122, "final_exp": 122, "freq_unit": 122, "phase_unit": 122, "phase_unwrap": 122, "semilog": 122, "hz": 122, "hertz": 122, "bode_magnitude_numerical_data": 122, "5148378120533502e": 122, "68437": 122, "36188804005": 122, "020599914256786": 122, "0205999155219505": 122, "4117304087953": 122, "00000000260573": 122, "bode_phase_numerical_data": 122, "4472354033813751e": 122, "035581932165858e": 122, "47577": 122, "3248186011": 122, "67884": 122, "09326036123": 122, "5000000000291665e": 122, "6180885085e": 122, "08895483066e": 122, "1415085799262523": 122, "14155265358979": 122, "impulse_response_plot": 122, "lower_limit": [122, 292], "upper_limit": [122, 292], "ramp_response_plot": 122, "r703": 122, "impulse_response_numerical_data": 122, "lineover1drangeseri": [122, 212], "amplitud": [122, 165], "06616480200395854": 122, "854500743565858": 122, "9999999799999999": 122, "7042848373025861": 122, "170748906965121e": 122, "1901263495547205e": 122, "r704": 122, "step_response_numerical_data": 122, "025413462339411542": 122, "0484508722725343": 122, "670250533855183": 122, "844291913708725": 122, "023844582399907256": 122, "042894276802320226": 122, "828770759094287e": 122, "456457160755703e": 122, "mx": [122, 171, 233], "r705": 122, "ramp_funct": 122, "ramp_response_numerical_data": 122, "12166980856813935": 122, "861246379582118": 122, "4504508011325967e": 122, "006046440489058766": 122, "12499999999568202": 122, "12499999999661349": 122, "den": [124, 215, 217, 238, 242], "tf3": 124, "tf4": 124, "tf5": 124, "tf6": 124, "500000000000000": 124, "tf7": 124, "tf8": 124, "tf9": 124, "tf10": 124, "tf11": 124, "tf12": 124, "r706": 124, "transfer_funct": 124, "r707": 124, "eval_frequ": 124, "from_coeff_list": 124, "num_list": 124, "den_list": 124, "zerodivisionerror": [124, 217, 255, 265], "1j": [124, 216], "is_biprop": 124, "is_prop": 124, "is_strictly_prop": 124, "feedforward": 124, "fed": 124, "sit": [124, 210], "compulsori": 124, "tf_1": 124, "tf_2": 124, "tf_3": 124, "tf_4": 124, "tfm_1": 124, "tfm_2": 124, "tf_5": 124, "tf_6": 124, "tf_7": 124, "tf_8": 124, "tfm_3": 124, "tfm_4": 124, "tfm_5": 124, "tfm_6": 124, "tf_9": 124, "tf_10": 124, "tfm_7": 124, "tfm_8": 124, "tfm_9": 124, "tfm_10": 124, "tfm_11": 124, "tfm_12": 124, "m_tf": 124, "tfm": 124, "tfm1": 124, "tfm2": 124, "tfm3": 124, "mimolineartimeinvari": 124, "mat_a": 124, "mat_b": 124, "mat_c": 124, "tfm_a": 124, "tfm_b": 124, "tfm_c": 124, "expr_1": 124, "expr_2": 124, "expr_3": 124, "expr_4": 124, "plant_mat": 124, "controller_mat": 124, "neg_feedback": 124, "gbt": 124, "sample_p": 124, "bilinear": 124, "numz": 124, "denz": 124, "r708": 124, "polyu": 124, "hk": [124, 239], "ama": 124, "gfzhang": 124, "zcc09_ijc": 124, "forward_diff": 124, "backward_diff": 124, "tz": 124, "hep": 125, "gamma_matric": [125, 127], "gammamatrix": 125, "lorentzindex": 125, "gammamatrixhead": 125, "extract_type_ten": 125, "gamma_trac": 125, "i0": [125, 163, 252], "i2": [125, 141, 158, 252], "i4": [125, 252], "i5": 125, "kahane_simplifi": 125, "spinor": 125, "ta": [125, 235], "tb": [125, 235, 257], "tc": [125, 217, 222, 235], "joseph": [125, 220], "kahan": 125, "octob": 125, "1968": 125, "simplify_gpgp": 125, "e_nl": [126, 192], "hartre": 126, "helium": 126, "2209": 126, "e_nl_dirac": 126, "spin_up": 126, "035999037000": 126, "relativist": 126, "momentum": [126, 136, 141, 158, 169, 170, 188, 192, 211, 252], "light": [126, 163, 195, 196, 206, 213], "035999037": 126, "1012": 126, "3627": 126, "500006656595360": 126, "125002080189006": 126, "125000416028342": 126, "0555562951740285": 126, "0555558020932949": 126, "0555556377366884": 126, "psi_nlm": 126, "wave": [126, 161, 162, 163, 229, 287], "psi_": [126, 167], "nlm": 126, "radial": [126, 145, 192], "nl": [126, 192], "magnet": [126, 162, 207, 279], "azimuth": 126, "wf": [126, 143], "abs_sqrd": 126, "silver": 126, "94": [126, 220], "141": 126, "4418": 126, "mdft": 127, "mgamma": 127, "gamma_5": 127, "gamma_0": 127, "gamma_3": 127, "r709": 127, "msigma": 127, "pauli": [127, 287], "sigma_i": [127, 246], "r710": 127, "pauli_matric": [127, 166], "pat_matrix": 127, "unansw": [128, 200], "kane": [128, 132, 133, 139, 141, 147, 151, 152, 157, 158, 200, 201, 270, 287], "q1d": [128, 141, 143, 145, 148, 149, 150, 153, 154, 155, 156, 200, 206, 210], "q2d": [128, 141, 143, 145, 148, 149, 150, 153, 154, 205, 206], "q3d": [128, 148, 149, 150, 153], "kinemat": [128, 133, 134, 139, 141, 143, 144, 145, 146, 148, 150, 152, 153, 155, 156, 158, 159, 201, 204, 208, 210, 287], "dyad": [128, 158, 201, 274], "mprint": [128, 148, 149, 150, 153], "mpprint": [128, 153], "mlatex": 128, "sub_dict": [128, 131, 143], "msub": [128, 131, 155], "gsl": [128, 259], "lsoda": 128, "penalti": 128, "actuatorbas": [129, 139], "to_load": [129, 137], "kanes_equ": [129, 134, 137, 141, 143, 145, 148, 149, 153, 155, 158], "structr": [129, 137], "lagrangesmethod": [129, 133, 134, 137, 139, 145, 150, 154, 155], "forceactu": 129, "expansil": [129, 137], "spatial": [129, 136, 165, 201, 226], "pb": [129, 137, 163], "linear_pathwai": [129, 137], "stiff": [129, 158], "spring_forc": [129, 130], "damping_coeffici": 129, "damping_forc": 129, "lineardamp": 129, "flip": [129, 143, 176, 185, 246], "wen": 129, "fofc": 129, "vel": [129, 133, 141, 143, 145, 149, 152, 158, 205, 209, 277], "linearspr": 129, "equilibrium_length": 129, "stretch": [129, 261], "torqueactu": 129, "target_fram": 129, "reaction_fram": 129, "secondari": 129, "at_pin_joint": 129, "pin_joint": 129, "construtor": 129, "displac": [129, 207, 209, 279], "central_inertia": [130, 136, 144, 146], "possess": [130, 156, 252], "name_of_bodi": 130, "ixx": [130, 136, 201], "body_inertia": 130, "ang_vel_in": [130, 133, 141, 148, 149, 158, 201, 209], "set_ang_vel": [130, 136, 141, 143, 148, 149, 155, 156, 158, 159, 201, 203, 205, 209], "apply_forc": [130, 133, 146], "reaction_bodi": [130, 133, 146], "reaction_point": 130, "oppposit": 130, "desri": 130, "force1": 130, "b_masscent": 130, "b_frame": [130, 133], "newtonion": [130, 133], "n_frame": 130, "apply_torqu": [130, 146], "torquess": 130, "torque1": 130, "b1_frame": 130, "b2_frame": 130, "clear_load": 130, "kinetic_energi": [130, 136, 156, 158], "inerti": [130, 133, 134, 136, 139, 143, 145, 148, 153, 154, 156, 158], "b_ixx": 130, "b_mass": [130, 133], "masscenter_vel": 130, "parallel_axi": [130, 136], "a_ixx": 130, "a_mass": 130, "a_ixi": 130, "a_izx": 130, "a_iyi": 130, "a_iyz": 130, "a_izz": 130, "smart": [131, 155, 233, 239, 242], "sub1": [131, 226], "sub2": [131, 226], "find_dynamicsymbol": [131, 136], "reference_fram": [131, 136, 201], "symbolicsystem": [132, 151, 287], "interfram": [133, 205], "_generate_coordin": 133, "_generate_spe": 133, "_orient_fram": 133, "_set_angular_veloc": 133, "_set_linear_veloc": 133, "kde": [133, 139, 144, 145, 152, 155], "revolut": 133, "\u03c9": 133, "pc": [133, 137, 223], "p_masscent": 133, "c_masscent": 133, "p_frame": 133, "c_frame": 133, "q_pc": 133, "u_pc": 133, "upper_bob": 133, "lower_bob": 133, "ceiling_joint": 133, "pendulum_joint": 133, "q_p1": 133, "q_p2": 133, "u_fram": 133, "l_frame": 133, "u_p1": 133, "u_p2": 133, "prismat": 133, "slide": 133, "part1": 133, "part2": 133, "j1": [133, 144, 146, 170, 188], "j2": [133, 144, 146, 170, 188], "q_j1": 133, "w_frame": 133, "q_j2": 133, "p1_frame": 133, "u_j1": 133, "cylindricaljoint": 133, "rotation_coordin": 133, "translation_coordin": 133, "rotation_spe": 133, "translation_spe": 133, "cylindr": [133, 140, 212, 277], "q0_": 133, "q1_": 133, "u0_": 133, "u1_": 133, "q0_pc": 133, "q1_pc": 133, "u0_pc": 133, "u1_pc": 133, "tube": 133, "floor_joint": 133, "flag_joint": 133, "q0_c1": 133, "q0_c2": 133, "q1_c1": 133, "floor_fram": 133, "q1_c2": 133, "tube_fram": 133, "flag_fram": 133, "u0_c1": 133, "u0_c2": 133, "u1_c1": 133, "planarjoint": 133, "planar_coordin": 133, "planar_spe": 133, "q2_": 133, "u2_": 133, "nonparallel": 133, "q_1": [133, 144, 145, 146, 155, 171, 209, 222, 239], "q_2": [133, 144, 145, 146, 155, 209], "q_0": [133, 171, 239], "rotation_axi": 133, "planar_vector": 133, "q2_pc": 133, "u2_pc": 133, "parent_vector": 133, "plane_vector": 133, "g_frame": 133, "sphericaljoint": 133, "rot_typ": [133, 201, 205, 207], "rot_ord": [133, 201, 205, 272], "ball": 133, "socket": 133, "tait": [133, 201, 270, 272], "bryan": [133, 201, 270, 272], "joint_point": 133, "zxz": [133, 201, 210, 270, 272], "weldjoint": 133, "weld": 133, "quarter": [133, 140, 163], "rotated_fram": 133, "jointsmethod": [133, 144, 146], "form_eom": [133, 139, 146, 152], "mass_matrix_ful": [133, 134, 139, 141, 146, 153, 154], "forcing_ful": [133, 134, 139, 141, 146, 153, 154], "mass_matrix": [133, 134, 139, 143, 148, 149, 153, 154, 159], "qd": [133, 134, 139, 143, 153, 205], "inv_method": [133, 134, 139], "q_ind": [134, 135, 139, 141, 143, 144, 145, 148, 149, 153, 155, 158], "u_ind": [134, 135, 139, 141, 143, 144, 145, 148, 149, 153, 155, 158], "kd_eq": [134, 141, 143, 144, 145, 148, 149, 155, 158], "q_depend": [134, 143, 144, 145, 153, 158], "configuration_constraint": [134, 143, 144, 145, 153], "u_depend": [134, 143, 144, 145, 153, 158], "velocity_constraint": [134, 143, 144, 145, 153, 158], "acceleration_constraint": 134, "u_auxiliari": [134, 149, 153, 158], "forcelist": [134, 141, 144, 145, 148, 149, 154, 155, 158], "explicit_kinemat": 134, "kd_eqs_solv": 134, "constraint_solv": 134, "nonholonom": [134, 139, 143], "levinson": [134, 157, 201, 270], "udot": [134, 143], "linsolv": [134, 158, 224, 244, 245, 303], "ud": [134, 153], "kd": [134, 143, 148, 149, 153], "bl": [134, 143, 153, 158], "frstar": [134, 141, 143, 145, 148, 149, 153, 155, 158], "a_and_b": [134, 135, 145], "auxiliary_eq": [134, 149], "k_d": [134, 153], "k_dnh": 134, "f_d": [134, 139, 153, 154, 219], "f_dnh": 134, "mass_matrix_kin": 134, "k_kqdot": 134, "forcing_kin": 134, "k_ku": 134, "constrain": [134, 135, 145, 154, 158, 244], "kindiffdict": [134, 143, 148, 149, 153, 158], "new_method": [134, 145], "linear_solv": [134, 135], "intens": [134, 135, 160, 163], "perm_mat": [134, 135, 155], "op_point": [134, 135, 145, 155], "beforehand": [134, 139, 259], "to_linear": [134, 155], "recalcul": [134, 222], "hol_coneq": [134, 145, 154], "nonhol_coneq": [134, 145, 154], "nonconserv": 134, "form_lagranges_equ": [134, 145, 150, 154, 155], "qdot": [134, 143, 144, 205], "qdoubledot": 134, "lam": [134, 135, 159], "lagranges_equ": 134, "qd_ind": [134, 155], "q_dep": [134, 139, 153, 155], "qd_dep": [134, 155], "solve_multipli": [134, 145], "sol_typ": 134, "array_lik": [134, 135], "f_3": [135, 139, 159, 242], "f_c": [135, 145], "f_v": [135, 145], "f_a": 135, "q_d": 135, "u_i": [135, 155, 209, 219], "u_d": [135, 158], "r711": 135, "peterson": 135, "gede": 135, "hubbard": 135, "syst": 135, "dyn": 135, "feb": 135, "s11044": 135, "014": 135, "9436": 135, "q_op": [135, 145], "u_op": [135, 145], "qd_op": 135, "ud_op": [135, 145], "angular_momentum": [136, 156, 158], "init_vprint": [136, 138, 156, 159, 201, 203, 205, 206, 209, 210], "linear_momentum": [136, 156, 158], "inertia_tupl": 136, "from_tensor": 136, "from_inertia_scalar": 136, "iyi": [136, 201], "izz": [136, 201], "ixi": [136, 201], "iyz": [136, 201], "izx": 136, "yy": [136, 201, 210, 242], "yz": [136, 201, 210, 212], "zx": [136, 201, 210], "pos_vec": 136, "px": [136, 181, 186, 252], "center_of_mass": [136, 158], "p1_pt": 136, "p2_pt": 136, "p3_pt": 136, "p4_pt": 136, "b_f": [136, 141], "b_cm": [136, 141], "mb": [136, 146, 158], "point_o": [136, 141], "body1": 136, "body2": 136, "body3": 136, "obstaclesetpathwai": 137, "similiar": 137, "pd": 137, "obstacle_set_pathwai": 137, "orientnew": [137, 143, 145, 148, 149, 150, 155, 159, 201, 203, 205, 207, 209, 210], "wrappingpathwai": 137, "attachment_1": 137, "attachment_2": 137, "wrappinggeometrybas": [137, 140], "smoothli": 137, "geodes": [137, 140], "cylind": [137, 140, 280], "wrappingcylind": [137, 140], "wrapping_pathwai": 137, "__class__": [137, 265], "vprint": [138, 200, 205, 206, 210], "vpprint": [138, 200, 206, 210], "vlatex": [138, 200, 201, 206, 210], "_system": 139, "parti": [139, 262], "cart": 139, "mechanics_print": [139, 143, 144, 148, 149, 150, 152, 153, 154], "bob_fram": 139, "newtonian": [139, 141, 158], "from_newtonian": 139, "add_joint": 139, "slider": [139, 146], "q_slider": 139, "u_slid": 139, "u_pin": 139, "apply_grav": 139, "add_load": 139, "rail_masscent": 139, "rail_mass": 139, "rail_fram": 139, "cart_masscent": 139, "cart_mass": 139, "bob_masscent": 139, "bob_mass": 139, "validate_system": 139, "eom_method": 139, "add_holonomic_constraint": 139, "get_joint": 139, "u_dep": [139, 153], "bodybas": 139, "loadbas": 139, "holonomic_constraint": 139, "nonholonomic_constraint": 139, "add_actu": 139, "add_bodi": 139, "add_coordin": 139, "add_kd": 139, "add_nonholonomic_constraint": 139, "add_spe": 139, "get_bodi": 139, "m_d": [139, 154], "m_m": 139, "f_m": 139, "check_dupl": 139, "coord_stat": 139, "right_hand_sid": 139, "coordinate_deriv": [139, 159], "alg_con": [139, 159], "output_eqn": 139, "coord_idx": [139, 159], "speed_idx": [139, 159], "m_3": [139, 159, 170, 211], "exogen": [139, 159], "ref_fram": 139, "theta_dot": 139, "kin_explicit_rh": [139, 159], "dyn_implicit_mat": [139, 159], "dyn_implicit_rh": [139, 159], "symsystem": 139, "dae": [139, 159], "comb_implicit_mat": [139, 159], "comb_implicit_rh": [139, 159], "kinema": 139, "comb_explicit_rh": [139, 159], "compute_explicit_form": 139, "awhil": 139, "constant_symbol": 139, "dynamic_symbol": 139, "wrapping_geometri": 140, "geodet": [140, 220], "unwrap": 140, "longest": [140, 264], "wrappingspher": 140, "geodesic_end_vector": 140, "point_1": 140, "point_2": 140, "geodesic_length": 140, "pythagora": 140, "point_on_surfac": 140, "ascertain": 140, "motiongenesi": [141, 158], "double_pendulum": 141, "motionvari": [141, 158], "simprot": [141, 158], "n_a": 141, "n_b": 141, "w_a_n": 141, "w_b_n": [141, 158], "p_o_p": 141, "p_p_r": 141, "v_o_n": [141, 158], "v2pt": [141, 158], "v_p_n": 141, "v_r_n": 141, "force_p": 141, "force_r": 141, "tfinal": 141, "integstp": 141, "some_filenam": 141, "parse_autolev": 141, "sympy_cod": 141, "include_numer": 141, "include_pydi": 141, "pydi": [141, 158, 201], "u1d": [141, 143, 145, 148, 149, 153], "u2d": [141, 143, 145, 148, 149, 153], "frame_n": 141, "frame_a": 141, "frame_b": 141, "particle_p": 141, "p_pt": 141, "particle_r": 141, "r_pt": 141, "v2pt_theori": [141, 143, 148, 149, 150, 155, 156, 158, 159, 205, 209], "initial_condit": [141, 158], "overwritten": 141, "e2row": 141, "eigvec": [141, 158], "eigenvec": 141, "deg2rad": 141, "0174533": 141, "wo": 141, "coef": [141, 158], "u3": [141, 143, 144, 146, 148, 149, 153, 158, 201, 205, 209], "strai": 141, "reassign": 141, "inher": [141, 265, 294], "rhs_x": 141, "i_b_bo": 141, "body_b": 141, "body_b_f": 141, "scene": [141, 238, 294], "i_c_d": 141, "i_p_q": 141, "i_b_o": 141, "e3": [141, 233, 242], "i_p_o": 141, "e4": [141, 233], "p_so_o": 141, "nicheck": 141, "plug": [141, 196], "hurdl": 141, "gitlab": 141, "ch4": 141, "ch5": 141, "ch6": 141, "cst": 141, "roll": [142, 143, 151, 209, 246, 287], "bicycl": [142, 151, 157, 287], "nonminim": [142, 151, 155, 287], "linkag": [142, 151, 287], "meijaard2007": [143, 157], "steer": [143, 157], "purposefulli": 143, "yaw": 143, "ang": 143, "rear": 143, "pitch": 143, "q4": [143, 153, 203], "q5": [143, 203], "q4d": [143, 153], "q5d": 143, "u4": [143, 149, 153, 158], "u5": [143, 149], "u6": [143, 149], "u3d": [143, 148, 149], "u4d": 143, "u5d": 143, "u6d": 143, "explanatori": 143, "wfrad": 143, "wrrad": 143, "htangl": 143, "forkoffset": 143, "forklength": 143, "framelength": 143, "forkcg1": 143, "forkcg3": 143, "framecg1": 143, "framecg3": 143, "iwr11": 143, "iwr22": 143, "iwf11": 143, "iwf22": 143, "iframe11": 143, "iframe22": 143, "iframe33": 143, "iframe31": 143, "ifork11": 143, "ifork22": 143, "ifork33": 143, "ifork31": 143, "mframe": 143, "mfork": 143, "mwf": 143, "mwr": 143, "wr": 143, "tempfram": 143, "tempfork": 143, "wr_cont": 143, "wr_mc": 143, "frame_mc": 143, "fork_mc": 143, "wf_mc": 143, "wf_cont": 143, "frame_i": 143, "fork_i": 143, "wr_i": 143, "wf_i": 143, "bodyfram": 143, "bodyfork": 143, "bodywr": 143, "bodywf": 143, "replic": 143, "conlist_spe": 143, "conlist_coord": 143, "gravit": [143, 148, 194, 207, 279], "aforement": [143, 207, 239, 277], "paperradrear": 143, "paperradfront": 143, "hta": 143, "trailpap": 143, "rake": 143, "paperwb": 143, "02": 143, "paperframecgx": 143, "paperframecgz": 143, "paperforkcgx": 143, "paperforkcgz": 143, "framecgnorm": 143, "framecgpar": 143, "tempa": 143, "tempb": 143, "tempc": 143, "paperforkl": 143, "forkcgnorm": 143, "forkcgpar": 143, "upright": 143, "val_dict": 143, "0603": 143, "1405": 143, "05892": 143, "00708": 143, "00756": 143, "kdd": [143, 148, 149], "centripet": 143, "corioli": 143, "forcing_lin": 143, "mm_full": 143, "_k_kqdot": 143, "xdot": 143, "lean": [143, 148, 150], "amat": 143, "q_3": [144, 146, 209], "u_1": [144, 145, 146, 209, 221, 242], "u_2": [144, 145, 146, 209, 221, 242], "u_3": [144, 146, 209], "densiti": [144, 246, 257, 280], "link1": 144, "link2": 144, "link3": 144, "link4": 144, "joint1": 144, "joint2": 144, "joint3": 144, "j3": [144, 146, 170, 188], "fh": 144, "fhd": 144, "_method": 144, "_form_eom": 144, "eom": [145, 146, 155], "dq_dict": 145, "presimplifi": 145, "inp_vec": [145, 155], "lag": [145, 150, 155], "lm": [145, 154, 155, 219, 222], "lag_eq": [145, 155], "lam_op": 145, "ibzz": 146, "compound_pend": 146, "simple_pend": 146, "rev1": 146, "rev2": 146, "w_r_n_qd": [148, 149], "dmc": [148, 149, 150], "uv": [148, 149, 191], "bodyd": [148, 149, 150], "bodylist": [148, 149], "kane1985": [149, 153, 157, 200], "thorough": [149, 155, 239], "simplifc": 149, "f3": [149, 212, 226], "necessit": 149, "simplify_auxiliary_eq": 149, "lrh": 150, "planet": 151, "robot": 151, "fascin": 151, "trajectori": 151, "challeng": 151, "came": [151, 297], "tackl": [151, 259], "amen": 151, "arduou": 151, "child_izz": 152, "child_mass": 152, "f_h": 153, "nh": 153, "dnh": 153, "f_r": [153, 155, 219], "speed_con": 153, "coord_con": 153, "lam1": 154, "0_": 155, "blajer1994": [155, 157], "brought": [155, 246], "vel_p": 155, "a_op": 155, "b_op": 155, "m_op": 155, "a_lin": 155, "hasn": 155, "juxtaposit": [156, 200, 274], "rb_masscent": 156, "rb_frame": 156, "l_p": 156, "likins1973": [156, 208], "l_b": 156, "requisit": 156, "t_p": 156, "t_b": 156, "t_t": 156, "virtu": [156, 158], "blajer": 157, "wojciech": 157, "werner": 157, "schiehlen": 157, "walter": 157, "schirm": 157, "kane1983": [157, 210], "likin": [157, 208], "david": [157, 222], "spacecraft": 157, "1983": [157, 261], "meijaard": 157, "jim": 157, "papadopoulo": 157, "ruina": 157, "schwab": 157, "royal": 157, "societi": [157, 239], "2084": 157, "1955": 157, "982": 157, "lectur": [158, 220, 246], "rigibodi": 158, "proprietari": 158, "k3": [158, 216], "k4": 158, "b11": 158, "b12": 158, "b21": 158, "b22": 158, "xd": 158, "xd2": 158, "y1d": 158, "y2d": 158, "tina": 158, "overwrit": [158, 200], "dt2": 158, "dy2": 158, "ty": 158, "nonlinsolv": [158, 244, 245, 303], "rowmatrix": 158, "colmatrix": 158, "diagmat": 158, "eigval": 158, "row_matrix": 158, "col_matrix": 158, "ao": 158, "i12": 158, "i23": 158, "i31": 158, "p_o_q": 158, "mag": 158, "unitvec": 158, "qo": 158, "p_p_q": 158, "partial_veloc": [158, 201, 205], "a_o_n": 158, "set_acc": [158, 205, 209], "qb": [158, 214], "qbd": 158, "alf_b_n": 158, "set_ang_acc": [158, 201], "ang_acc_in": [158, 201], "force_o": 158, "torque_a": 158, "qa": 158, "qad": 158, "a_b": 158, "v1pt": 158, "v1pt_theori": [158, 205, 209], "a1pt": 158, "a1pt_theori": [158, 205], "a2pt": 158, "a2pt_theori": [158, 205, 209], "angvel": 158, "force_vector": 158, "kindiff": 158, "ke": 158, "configura": 158, "tion_constraint": 158, "pendent": 158, "velocity_con": 158, "traint": 158, "acceleration_": 158, "u_auxilia": 158, "ry": 158, "matlplotlib": 158, "introspect": 158, "rich": [158, 238], "media": [158, 164], "esqu": 158, "pertin": [159, 213, 221], "alg_con_ful": 159, "symsystem1": 159, "symsystem2": 159, "symsystem3": 159, "raytransfermatrix": 160, "geometricrai": 160, "beamparamet": 160, "geometric_conj": 160, "gauss_conj": 160, "conjugate_gauss_beam": 160, "lens": 160, "gaussopt": 160, "wavelen": 160, "z_r": 160, "wavelength": [160, 165], "waist": 160, "rayleigh": [160, 246], "refract": [160, 162, 164, 165], "530e": 160, "88679245283019": 160, "92753330865999": 160, "w_0": [160, 239], "00100000000000000": 160, "freespac": 160, "00101413072159615": 160, "00210803120913829": 160, "r712": 160, "complex_beam_paramet": 160, "r713": 160, "gaussian_beam": 160, "spread": [160, 215, 226, 246, 261], "00053": 160, "goui": 160, "55998576005696": 160, "2809": 160, "waist_approximation_limit": 160, "paraxi": [160, 164], "06e": 160, "curvedmirror": 160, "curvedrefract": 160, "flatmirror": 160, "flatrefract": 160, "2x1": 160, "thinlen": 160, "r714": 160, "ray_transfer_matrix_analysi": 160, "waist_in": 160, "waist_out": 160, "s_in": 160, "s_out": 160, "w_o": 160, "gaussian_conj": 160, "z_r_in": 160, "incid": [160, 164], "z_r_out": 160, "emerg": [160, 214], "geometric_conj_ab": 160, "geometric_conj_af": 160, "geometric_conj_bf": 160, "rayleigh2waist": 160, "waist2rayleigh": 160, "permitt": 162, "permeabl": 162, "electromagnet": [162, 195, 207, 252, 279], "intrinsic_imped": 162, "149896229": [162, 165, 195], "kilogram": [162, 194, 196, 198], "1250000": 162, "amper": [162, 195], "refractive_index": 162, "299792458": [162, 165, 195, 198], "r715": 162, "optical_medium": 162, "travel": [162, 165, 207, 277, 279], "stoke": 163, "mueller": 163, "jones_vector": 163, "stokes_vector": 163, "half_wave_retard": 163, "polarizing_beam_splitt": 163, "jones_2_stok": 163, "\u2148": [163, 211, 225, 226, 245, 303], "\u03c7": 163, "\u03c8": 163, "i\u2080": 163, "plate": 163, "hwp": 163, "splitter": 163, "transmit": [163, 164], "transmitted_port": 163, "reflected_port": 163, "transmitted_pow": 163, "reflected_pow": 163, "r716": 163, "jones_calculu": 163, "r717": 163, "mueller_calculu": 163, "r718": 163, "stokes_paramet": 163, "retard": 163, "poincar\u00e9": 163, "tilt": 163, "mayor": 163, "linear_polar": 163, "mueller_matrix": 163, "quarter_wave_retard": 163, "phase_retard": 163, "\u03b4": 163, "phia": 163, "phib": 163, "4x1": [163, 246], "phi_a": 163, "phi_b": 163, "qwp": 163, "reflective_filt": 163, "unpolar": 163, "transmissive_filt": 163, "attenu": 163, "transmitt": 163, "ndf": 163, "refraction_angl": 164, "fresnel_coeffici": 164, "brewster_angl": 164, "critical_angl": 164, "lens_makers_formula": 164, "mirror_formula": 164, "lens_formula": 164, "hyperfocal_dist": 164, "transverse_magnif": 164, "medium1": 164, "medium2": 164, "brewster": 164, "926093295503462": 164, "onset": 164, "850908514477849": 164, "02005": 164, "angle_of_incid": 164, "fresnel": [164, 226, 236], "polaris": 164, "te": 164, "317843553417859": 164, "348645229818821": 164, "658921776708929": 164, "651354770181179": 164, "235625382192159": 164, "971843958291041": 164, "816477005968898": 164, "577377951366403": 164, "r719": 164, "fresnel_equ": 164, "coc": 164, "0033": 164, "focal_length": 164, "n_len": 164, "n_surr": 164, "thick": 164, "1515151515151": 164, "3418463277618": 164, "41152": 164, "magnif": 164, "twave": 165, "time_period": 165, "wavenumb": 165, "phi1": 165, "phi2": 165, "w1": [165, 238], "w3": [165, 226], "superposit": [165, 176, 187, 213], "angular_veloc": 165, "tempor": 165, "r720": 166, "paulialgebra": 166, "evaluate_pauli_product": 166, "paulimatric": 166, "sigma3": 166, "nodal": [167, 192, 213], "hw": [167, 192], "coherent_st": 167, "coher": [167, 193, 199], "1d": [167, 169, 182, 201, 251], "wavefunct": [167, 180, 189, 192, 287], "r721": 168, "__cmp__": [168, 172, 191], "dagger": [168, 172, 178, 180, 183, 185, 190, 191, 287], "operatorset": [169, 181], "positionbra3d": 169, "eigenbra": [169, 182, 188], "positionket3d": 169, "eigenket": [169, 182, 188], "positionstate3d": 169, "eigenst": [169, 181, 186, 188, 189], "position_x": 169, "position_i": 169, "position_z": 169, "pxbra": [169, 181], "pxket": [169, 181, 186], "pxop": [169, 181, 186], "xbra": [169, 181, 186], "xket": [169, 181, 186], "xop": [169, 181, 186], "yop": 169, "zop": 169, "cg": [170, 188, 195, 248], "momenta": 170, "uncoupl": [170, 188], "r722": 170, "j_3": [170, 188, 211], "r723": 170, "wigner3j": [170, 211], "wigner": [170, 188, 246, 287], "varshalovich": [170, 188], "zyla": 170, "theor": 170, "phy": [170, 196, 211], "083c01": 170, "r724": 170, "w3j": 170, "715": [170, 211, 226], "wigner6j": [170, 211], "j12": [170, 188], "j23": 170, "6j": [170, 211], "wigner9j": [170, 211], "j4": 170, "j34": 170, "j13": 170, "j24": 170, "9j": [170, 211], "cg_simp": 170, "r725": 170, "clebsh": 170, "rethink": 171, "figsiz": 171, "circuitplot": 171, "nqubit": [171, 175, 176, 185], "control_lin": 171, "gate_idx": [171, 175], "min_wir": 171, "max_wir": 171, "control_point": 171, "wire_idx": 171, "not_point": 171, "one_qubit_box": 171, "box": [171, 176, 178, 187, 189, 280, 287], "qubit": [171, 175, 176, 177, 178, 184, 287], "swap_point": 171, "two_qubit_box": 171, "createcg": 171, "latexnam": 171, "mock": 171, "mz": 171, "circuit_plot": 171, "min_qubit": [171, 175], "autogener": 171, "wire": 171, "j_0": 171, "r726": 172, "comm": [172, 191, 252], "plank": 173, "r727": 173, "05457162000000e": 173, "planck_const": 173, "hermetian": 174, "r728": 174, "r729": 174, "innerproduct": [174, 179, 180, 186, 188, 191], "outerproduct": [174, 180], "seamlessli": 174, "hermitian_adjoint": 174, "hermitian_transpos": 174, "_apply_operators_qubit": 175, "gate_sort": 175, "gate_simp": 175, "ugat": 175, "cgate": 175, "control_valu": 175, "cnot": 175, "eval_control": 175, "plot_gat": 175, "circ_plot": 175, "simplify_cg": 175, "cphase": 175, "cnotgat": 175, "qappli": [175, 176, 178, 180, 185, 287], "get_target_matrix": 175, "hadamardg": 175, "identityg": 175, "onequbitg": 175, "phaseg": 175, "swapgat": 175, "target1": 175, "target2": 175, "tgate": 175, "twoqubitg": 175, "xgate": 175, "ygate": 175, "zgate": 175, "bubbl": 175, "random_circuit": 175, "ngate": 175, "gate_spac": 175, "mermin": 176, "_represent_zg": 176, "oracleg": 176, "oracl": 176, "intqubit": [176, 185], "search_funct": 176, "wgate": 176, "apply_grov": 176, "grover_iter": 176, "qstate": 176, "wv": 176, "superposition_basi": 176, "numqubit": 176, "basis_st": 176, "matt": 177, "complexspac": 177, "directsumhilbertspac": 177, "r730": 177, "hilbertspac": 177, "fockspac": 177, "hilbert_spac": [177, 180, 189], "direct_sum": 177, "quantiz": [177, 287], "r731": 177, "mess": [177, 242, 245, 302], "fock_spac": 177, "r732": 177, "tensorpowerhilbertspac": 177, "r733": 177, "tensor_product": 177, "tensorproducthilbertspac": 177, "r734": 177, "clebsch": [178, 188, 211, 287], "gordan": [178, 188, 211, 287], "hilbert": [178, 180, 186, 287], "grover": [178, 287], "qft": [178, 187, 287], "shor": [178, 287], "brabas": [179, 180, 186, 189], "ketbas": [179, 180, 186, 189], "r735": 179, "inner_product": 179, "apply_oper": [180, 191], "identityoper": 180, "r736": 180, "r737": 180, "polymoni": 180, "operator_": 180, "28physic": 180, "old_assumpt": 180, "r738": 180, "outer_product": 180, "unitaryoper": 180, "operators_to_st": 181, "state_to_oper": 181, "_operators_to_st": 181, "state_map": 181, "_state_to_oper": 181, "statebas": [181, 186, 189], "piab": 182, "piabbra": 182, "piabhamiltonian": 182, "piabket": 182, "ip_doit": 183, "smarter": [184, 235], "rk": 184, "iqft": 184, "rkgate": 184, "qtf": 184, "povm": 185, "as_int": [185, 267], "qubit_valu": 185, "intqubitbra": 185, "00001": 185, "qubitbra": 185, "matrix_to_dens": 185, "matrix_to_qubit": 185, "measure_al": 185, "ensembl": 185, "measure_all_oneshot": 185, "oneshot": 185, "measure_parti": 185, "measure_partial_oneshot": 185, "qubit_to_matrix": 185, "enumerate_st": 186, "_enumerate_st": 186, "foo_1": 186, "foo_2": 186, "foo_3": 186, "test2": 186, "bar_4": 186, "bar_5": 186, "bar_10": 186, "get_basi": 186, "replace_non": 186, "operator_to_st": 186, "qexpr": 186, "integrate_result": 186, "orig_expr": 186, "x_ket": 186, "x_op": 186, "rep_expect": 186, "px_2": 186, "px_1": 186, "rep_innerproduct": 186, "_repres": 186, "_represent_foobasi": 186, "foobasi": 186, "_represent_szop": 186, "szupket": 186, "szop": 186, "sz": 186, "cmod": 187, "reformat": 187, "period_find": 187, "momemtum": 188, "j2op": 188, "jxbra": 188, "jx": 188, "jzket": 188, "jxbracoupl": 188, "jcoupl": 188, "jzketcoupl": 188, "jxket": 188, "jxketcoupl": 188, "jybra": 188, "jy": 188, "jybracoupl": 188, "jyket": 188, "jyketcoupl": 188, "jzbra": 188, "jz": 188, "jzbracoupl": 188, "j_4": [188, 211], "argular": 188, "jzop": 188, "r739": 188, "wignerd": 188, "jm": 188, "jj": 188, "r740": 188, "jcoupling_list": 188, "coupledspinst": 188, "spinstat": 188, "r741": 189, "dual_class": 189, "mn": [189, 226, 246], "ket_not": 189, "r742": 189, "k0": [189, 217, 219, 246], "orthogonalbra": 189, "orthogonalket": 189, "orthogonalst": 189, "_eval_adjoint": 189, "timedepbra": 189, "timedepst": 189, "timedepket": 189, "prob": [189, 246], "412214747707527": 189, "matrix_tensor_product": 190, "axb": 190, "xdagger": 190, "axc": 190, "bxc": 190, "tensor_product_simp": 190, "cxd": 190, "boson": 191, "fetter": 191, "welecka": 191, "secondqu": 191, "annihilateboson": 191, "fockstateket": 191, "bket": 191, "fockstatebosonket": 191, "annihilatefermion": 191, "createboson": 191, "is_only_q_annihil": 191, "destroi": [191, 235], "quasi": 191, "hole": 191, "is_only_q_cr": 191, "is_q_annihil": 191, "is_q_creat": 191, "antisymmetrictensor": 191, "bbra": 191, "fockstatebosonbra": 191, "bosonicbasi": 191, "fock": 191, "createfermion": 191, "wick": 191, "fbra": 191, "fockstatefermionbra": 191, "fket": 191, "fockstatefermionket": 191, "fixedbosonicbasi": 191, "n_particl": 191, "n_level": 191, "fockstat": 191, "occup": 191, "bosonbra": 191, "fockstatebra": 191, "fermi_level": 191, "r743": 191, "textwrap": [191, 267], "_q": 191, "get_subno": 191, "fermionicoper": 191, "has_q_annihil": 191, "q_annihil": 191, "has_q_creat": 191, "leftmost": 191, "q_creator": 191, "iter_q_annihil": 191, "iter_q_cr": 191, "0x": 191, "permutationoper": 191, "get_permut": 191, "varbosonicbasi": 191, "n_max": 191, "creator": 191, "evaluate_delta": 191, "einstein": [191, 252], "d_ij": 191, "_j": [191, 196, 211, 228], "d_ip": 191, "d_qp": 191, "matrix_rep": 191, "simplify_index_permut": 191, "permutation_oper": 191, "schemat": [191, 196], "abij": 191, "abji": 191, "baij": 191, "baji": 191, "permutlist": 191, "substitute_dummi": 191, "new_indic": 191, "pretty_indic": 191, "_get_ordered_dummi": 191, "_c": 191, "_d": 191, "index_group": 191, "string_of_lett": 191, "my_dummi": 191, "_v": [191, 210], "_p_0": 191, "_p_1": 191, "keep_only_fully_contract": 191, "sho": 192, "isotrop": 192, "mk": [193, 196], "legal": 193, "temperatur": [193, 207, 279], "dimensions": 193, "dimsys_si": [193, 194], "get_dimensional_depend": [193, 194], "has_integer_pow": 193, "dim_si": 193, "dimensionsystem": 193, "base_dim": 193, "derived_dim": 193, "dimensional_depend": 193, "can_transf_matrix": 193, "inv_can_transf_matrix": 193, "dim_can_vector": 193, "dim_vector": 193, "is_consist": [193, 199], "is_dimensionless": 193, "list_can_dim": 193, "print_dim_bas": 193, "gravitational_const": [194, 198], "equivalent_dim": 194, "grav_eq": 194, "kepler": [194, 270], "venu": 194, "701": 194, "dai": [194, 198, 242], "venus_a": 194, "set_quantity_dimens": 194, "set_quantity_scale_factor": 194, "108208000e3": 194, "solar": 194, "solar_mass": 194, "9891e30": 194, "convert_to": [194, 195, 198, 215, 221], "5112118495813": 194, "659097795948": 194, "astrophys": 194, "pound": 195, "boltzmann": 195, "physicalconst": 195, "unitsystem": [195, 199], "kilomet": [195, 197, 198], "unitless": 195, "dimensionless": [195, 196], "discrep": 195, "speed_of_light": [195, 198], "cgs_gauss": 195, "quantity_simplifi": 195, "philosophi": [195, 242, 245, 287], "rough": 196, "mole": 196, "unavoid": 196, "d_3": 196, "d_2": [196, 222, 246], "underbrac": [196, 209], "countabl": [196, 245], "kg": [196, 280], "glu": 196, "men": 196, "heat": 196, "joul": 196, "calori": 196, "chemistri": 196, "page52": 196, "1952": 196, "page78": 196, "deboer79": 196, "boer": 196, "818": 196, "levyleblond77": 196, "l\u00e9vy": 196, "leblond": 196, "conceptu": [196, 213, 279], "rivista": 196, "del": [196, 261, 270, 278, 302], "nuovo": [196, 211], "cimento": [196, 211], "1977": 196, "187": [196, 220], "214": 196, "anticip": 196, "bin_prefix": 197, "latex_repr": [197, 198], "encapsul": [197, 219, 245, 259], "kilo": 197, "pretty_unicode_repr": 198, "pretty_ascii_repr": 198, "mathml_presentation_repr": 198, "is_prefix": 198, "abbrevi": [198, 214, 226, 245, 247], "unit_system": 198, "scale_factor": 198, "set_global_relative_scale_factor": 198, "reference_quant": 198, "target_unit": 198, "mile": 198, "atomic_mass_const": 198, "centimet": 198, "25146": 198, "609344": 198, "86400": 198, "660539060e": 198, "300000": 198, "planck": [198, 246], "62963087839509e": 198, "base_unit": 199, "descr": 199, "dimension_system": 199, "derived_unit": 199, "overridden": [199, 213, 228, 302], "get_units_non_prefix": 199, "wikidyad": [200, 208], "wikidyadicproduct": [200, 208], "otim": [200, 247, 248], "rigidli": 200, "entireti": 200, "_str": 200, "coordinatesym": [201, 203], "otherfram": [201, 270], "n_alpha_b": 201, "ny": [201, 217], "_3": [201, 211], "orient_body_fix": 201, "orient_space_fix": 201, "orient_quaternion": 201, "quaternion": [201, 205, 210, 270, 272], "rotation_ord": [201, 270, 272], "xzx": 201, "xyx": [201, 270, 272], "yzy": 201, "yxy": [201, 210], "yzx": [201, 210], "zxy": 201, "xzy": 201, "zyx": 201, "yxz": 201, "orient_explicit": 201, "lambda_x": [201, 270, 272], "lambda_i": [201, 270, 272], "lambda_z": [201, 270, 272], "q0": [201, 242, 270, 272], "newnam": 201, "gen_spe": [201, 205], "variable_map": 201, "a_x": [201, 210, 226], "b_x": [201, 203, 210, 252], "b_y": [201, 203, 210, 252], "a_z": [201, 210], "b_z": [201, 210, 252], "xz": [201, 210, 212], "zy": [201, 210], "inlist": 201, "var_in_dcm": 201, "reexpress": [201, 275], "time_deriv": [201, 203, 207], "free_dynamicsymbol": 201, "codirect": 201, "dyadic_tensor": [201, 270], "frame1": 201, "frame2": [201, 203], "second_reference_fram": 201, "ixz": 201, "inertia_dyad": 201, "pertain": [202, 208], "fieldfunct": [202, 207], "curl": [202, 270, 273, 280], "vect": [202, 270, 273], "r_x": [202, 207], "r_y": [202, 207], "r_z": [202, 207], "gradient": [202, 211, 212, 270, 273, 279], "scalar_potenti": [202, 207, 273, 277], "scalar_field": [202, 207, 270, 273, 277], "grad_field": [202, 273], "scalar_potential_differ": [202, 207, 273, 277], "sympyfi": [202, 203, 205, 273], "position2": [202, 273], "vectfield": [202, 207, 273, 277], "is_conserv": [202, 207, 273, 277], "is_solenoid": [202, 207, 273, 277], "solenoid": [202, 273], "q6": 203, "vec1": 203, "vec2": 203, "n_x": 203, "rotating_reference_fram": 203, "time_derivatives_in_the_two_fram": 203, "otherpoint": 205, "outfram": 205, "fixedfram": 205, "get_motion_param": 205, "vectori": [205, 207, 274, 279], "timevalue1": 205, "timevalue2": 205, "313": 205, "vel_vec": 205, "q1dd": 206, "q2dd": 206, "charg": [207, 279], "temper": 207, "earth": [207, 279], "4xy": [207, 279], "electric_potenti": [207, 277], "r1_x": 207, "r1_y": 207, "infinitesim": [207, 242, 277], "nabla": [207, 270, 276, 277], "f_y": [207, 277], "f_x": [207, 245, 277], "sink": [207, 277], "irrot": [207, 277], "conservative_field": [207, 277], "aug": [208, 245], "dyadic_product": [208, 278], "inc": [208, 220], "w_x": 209, "w_y": 209, "w_z": 209, "w_1": [209, 221], "w_2": [209, 221], "w_3": 209, "u_x": 209, "sp": 209, "oq": 209, "qp": 209, "rod": 209, "went": 209, "parallelogram": 210, "c_x": 210, "c_y": 210, "c_z": 210, "train": 210, "friend": 210, "undergon": [210, 245], "vastli": 210, "mold": 210, "bp": [210, 242], "bpp": 210, "zzx": 210, "multifram": 210, "direction": 210, "racah": 211, "gaunt": 211, "rasch03": 211, "regge58": 211, "regg": 211, "544": 211, "regge59": 211, "116": [211, 220], "1959": 211, "edmonds74": 211, "edmond": 211, "princeton": [211, 246], "1957": 211, "rasch": 211, "siam": [211, 264], "sci": 211, "1416": 211, "1428": 211, "liberatodebrito82": 211, "liberato": 211, "brito": 211, "homeier96": 211, "homeier": 211, "steinborn": 211, "mol": 211, "368": 211, "1996": [211, 220, 236, 244, 270], "forum": [211, 245], "m4nzdu": 211, "7o38": 211, "jen": 211, "03": [211, 246], "gerardo": 211, "lazo": 211, "arjona": 211, "phil": 211, "adam": [211, 222], "lemaitr": 211, "2022": 211, "jyr2000": 211, "clebsch_gordan": 211, "2j_3": 211, "dot_rot_grad_ynm": 211, "_l": 211, "l_2": 211, "l_3": 211, "drastic": 211, "2l_1": 211, "2l_2": 211, "2l_3": 211, "1200": 211, "00689500421922113448": 211, "inflect": 211, "dd": [211, 231], "ee": [211, 221], "j_5": 211, "j_6": 211, "richer": 211, "real_gaunt": 211, "realgaunt": 211, "m0": [211, 252], "00002480019791932209313156167": 211, "wigner_3j": 211, "wigner_6j": 211, "wigner_9j": 211, "j_7": 211, "j_8": 211, "j_9": 211, "05555555": 211, "1666666": 211, "wigner_d": 211, "j_z": 211, "j_y": 211, "\u03b3": [211, 292, 302], "wigner_d_smal": 211, "textbackend": 212, "plot_parametr": 212, "plot_implicit": 212, "plot3d_parametric_lin": 212, "plot3d_parametric_surfac": 212, "zlabel": 212, "aspect_ratio": 212, "ylim": 212, "axis_cent": 212, "xscale": 212, "yscale": 212, "autoscal": 212, "textplot": 212, "_seri": [212, 223], "baseseri": 212, "nonparametr": 212, "basebackend": 212, "parametric2dlineseri": 212, "parametric3dlineseri": 212, "cyan": 212, "grayscal": 212, "integers_onli": 212, "surfaceover2drangeseri": 212, "parametricsurfaceseri": 212, "surface_color": 212, "instantia": 212, "centric": 212, "get_mesh": 212, "range1": 212, "range2": 212, "fill_between": 212, "nb_of_point": 212, "inch": 212, "expr_x": 212, "expr_i": 212, "canva": 212, "range_x": 212, "range_i": 212, "nb_of_points_x": 212, "nb_of_points_i": 212, "expr_z": 212, "range_u": 212, "range_v": 212, "nb_of_points_u": 212, "nb_of_points_v": 212, "x_var": 212, "y_var": 212, "mesh": 212, "p8": 212, "p9": 212, "nrow": [212, 215], "ncolumn": 212, "is_2dlin": 212, "oblig": 212, "eval_color_func": 212, "get_label": 212, "discrat": 212, "only_integ": 212, "get_seg": 212, "get_color_arrai": 212, "parametric3dlineinteractiveseri": 212, "absarglineseri": 212, "var_start_end": 212, "line3dbaseseri": 212, "surfacebaseseri": 212, "var_start_end_x": 212, "var_start_end_i": 212, "mesh_x": 212, "mesh_i": 212, "mesh_z": 212, "var_start_end_u": 212, "var_start_end_v": 212, "mesh_u": 212, "mesh_v": 212, "implicitseri": 212, "interval_list": 212, "contourf": 212, "x_arrai": 212, "y_arrai": 212, "z_arrai": 212, "plot_typ": 212, "process_seri": 212, "_process_seri": 212, "keyboard": 212, "mous": 212, "pyglet_plot": 212, "screenshot": 212, "camera": 212, "zoom": 212, "numpad": 212, "ordin": [212, 242, 267], "f5": 212, "f6": 212, "f8": 212, "drag": 212, "curvilinear": [212, 274, 275], "__setitem__": 212, "zfade4": 212, "key1": 212, "value1": 212, "key2": 212, "value2": 212, "unbound_theta": 212, "wirefram": 212, "saddl": 212, "fz": 212, "_______________________________________________________": 212, "mediterranean": 213, "cultur": 213, "arab": 213, "lighten": 213, "tapestri": 213, "woven": 213, "european": 213, "soil": 213, "plausibl": 213, "teeter": 213, "totter": 213, "outweigh": 213, "amus": 213, "kempf": 213, "1944": 213, "20th": 213, "dedekind": 213, "intim": 213, "disciplin": 213, "toolset": 213, "atiyah69": [213, 220], "gear": 213, "greuel2008": [213, 220], "interspers": 213, "lr": 213, "ilex": 213, "\u211a": [213, 226], "localis": 213, "abridg": 213, "free_modul": [213, 217], "quotient_r": [213, 217], "overload": [213, 216, 217, 274, 297], "polynomialr": [213, 217, 224], "domain_or_r": [213, 217], "quotientr": [213, 217], "base_id": [213, 217], "elbow": 213, "componentwis": [213, 226], "biproduct": 213, "quotient_modul": 213, "is_submodul": 213, "multiply_id": 213, "identity_hom": 213, "freemodul": 213, "freemoduleel": 213, "conicis": 213, "_contain": 213, "_syzygi": 213, "_in_terms_of_gener": 213, "_intersect": 213, "_module_quoti": 213, "reduce_el": [213, 221], "represantit": 213, "in_terms_of_gener": 213, "inclusion_hom": 213, "rela": 213, "relb": 213, "is_full_modul": 213, "module_quoti": 213, "coincis": 213, "syzygy_modul": 213, "r_n": 213, "_contains_elem": 213, "_contains_id": 213, "_quotient": 213, "_union": 213, "_product": 213, "is_whole_r": 213, "is_maxim": 213, "is_primari": 213, "is_rad": 213, "is_princip": 213, "xj": 213, "satur": 213, "subquoti": 213, "quotientmodul": 213, "subquotientmodul": 213, "killed_modul": 213, "quotientmoduleel": 213, "kill": [213, 217, 257], "quotient_hom": 213, "ker": 213, "surject": 213, "cokernel": 213, "coker": 213, "meaningfulli": 213, "restrict_domain": 213, "homomoprh": 213, "modulehomomorph": [213, 221], "_ker": 213, "_img": 213, "_kernel": 213, "_imag": 213, "_restrict_domain": 213, "_restrict_codomain": 213, "_quotient_domain": 213, "_quotient_codomain": 213, "_appli": 213, "_mul_scalar": 213, "_compos": 213, "_add": [213, 232], "is_inject": 213, "quotient_domain": 213, "is_isomorph": 213, "preimag": 213, "restrict_codomain": 213, "is_surject": 213, "quotient_codomain": 213, "induct": 213, "monogen": 213, "monogenicfiniteextens": [213, 217], "finiteextens": 213, "sqrt2": [213, 216], "extensionel": [213, 217], "notinvert": [213, 219, 222], "nu_1": 214, "nu_2": 214, "nu_n": 214, "nu_i": 214, "customarili": 214, "ua": 214, "endow": [214, 222], "resp": [214, 217, 242], "divmod": [214, 216, 217], "cb": [214, 264], "sqf_list": [214, 217, 222], "sqf": [214, 217, 222, 239], "buchberg": [214, 219, 220, 222], "solve_poly_system": [214, 222, 244, 245], "ddm": 215, "from_list": [215, 217, 222, 223], "fmt": [215, 217, 221], "matrix1": 215, "sdm": [215, 219], "adj_det": 215, "domainscalar": 215, "adja": 215, "deta": 215, "inv_den": 215, "adj_poly_det": 215, "p_a": 215, "eval_poli": 215, "to_dens": 215, "cancel_denom": 215, "solve_den": 215, "rref_den": 215, "minv": 215, "minv_reduc": 215, "den_reduc": 215, "to_field": [215, 217, 222], "_all_": 215, "_some_": 215, "cancel_denom_elementwis": 215, "m_frac": 215, "denoms_invert": 215, "charpoly_factor_list": 215, "domainel": [215, 216, 217, 224], "charpoly_factor_block": 215, "charpoly_bas": 215, "sparsiti": 215, "charpoly_berk": 215, "ddm_berk": 215, "sdm_berk": 215, "unfactor": 215, "choose_domain": 215, "construct_domain": [215, 216, 217, 222], "clear_denom": [215, 217, 222], "anum": 215, "to_sympi": [215, 216, 217], "get_r": [215, 217], "zz_i": [215, 216], "eval_poly_mul": 215, "p_a_b": 215, "303": 215, "solve_den_charpoli": 215, "from_dict_sympi": 215, "ncol": 215, "elemsdict": 215, "from_list_sympi": 215, "from_dok": 215, "to_dok": 215, "from_flat_nz": 215, "to_flat_nz": 215, "from_list_flat": 215, "element_list": 215, "to_list_flat": 215, "from_rep": 215, "drep": 215, "ownership": 215, "dmnonsquarematrixerror": 215, "ainv": 215, "lll": 215, "lov\u00e1sz": 215, "r744": 215, "r745": 215, "dmvalueerror": 215, "dmrankerror": [215, 221], "20160": 215, "33768": 215, "39578": 215, "47757": 215, "r746": 215, "lll_transform": 215, "93lenstra": 215, "93lov": 215, "a1sz_lattice_basis_reduction_algorithm": 215, "20221029115428": 215, "elt": [215, 221], "lovasz": 215, "bremner": 215, "nnz": 215, "divide_last": 215, "a_nul": 215, "nulliti": 215, "dmnotafield": 215, "to_dm": 215, "nullspace_from_rref": 215, "m_primit": 215, "exquo": [215, 216, 217, 222], "assoic": 215, "gj_dens": 215, "ff_dens": 215, "cd_dens": 215, "sdm_irref": 215, "sdm_rref_den": 215, "ddm_irref": 215, "ddm_irref_den": 215, "keep_domain": 215, "a_rref": 215, "scc": 215, "xnum": 215, "xden": 215, "dmnoninvertiblematrixerror": 215, "xsol": 215, "xsol_uncancel": 215, "solve_den_rref": 215, "frontend": 215, "to_ddm": 215, "to_sdm": 215, "to_dfm": 215, "dfm": 215, "_dfm": 215, "to_dfm_or_ddm": 215, "to_spars": 215, "elements_doubl": 215, "aq": 215, "ddm_": 215, "ddm_idet": 215, "friendlier": 215, "nonpivot": 215, "mrref": 215, "typevar": 215, "ringel": 215, "r747": 215, "93berkowitz_algorithm": 215, "ddm_iadd": 215, "r748": 215, "bareiss_algorithm": 215, "r749": 215, "usm": 215, "perri": 215, "thesis_drl": 215, "ddm_iinv": 215, "ddm_imatmul": 215, "ddm_ilu": 215, "qq_i": [215, 216], "ddm_ilu_solv": 215, "ddm_ilu_split": 215, "ddm_imul": 215, "ddm_ineg": 215, "ddm_irmul": 215, "_partial_pivot": 215, "r750": 215, "row_echelon_form": 215, "reduced_row_echelon_form": 215, "ffgj": 215, "r751": 215, "nako": 215, "turner": 215, "william": 215, "271130": 215, "271133": 215, "ddm_isub": 215, "ddm_transpos": 215, "_type": 215, "ccc": [215, 245], "from_ddm": 215, "domainerror": [215, 219, 222], "r752": 215, "unmodifi": [215, 238], "arref": 215, "ddm_rref": 215, "sdm_nullspace_from_rref": 215, "nonzero_col": 215, "sdm_particular_from_rref": 215, "r753": 215, "_flint": [215, 216], "fmpz_mat": 215, "sympy_ground_typ": [215, 216, 217], "fmpz_mat_charpoli": 215, "fmpq_mat_charpoli": 215, "nmod_mat_charpoli": 215, "danilevski": 215, "fmpz_mat_det": 215, "fmpq_mat_det": 215, "25x25": 215, "60x60": 215, "extract_slic": 215, "rowslic": 215, "colslic": 215, "getitem": 215, "fmpz_mat_inv": 215, "fmpq_mat_inv": 215, "fmpz_mat_solv": 215, "m_lll": 215, "fmpq_mat_solv": 215, "fmpq_mat_solve_dixon": 215, "15x15": 215, "dixon": [215, 220], "multimodular": 215, "mul_elementwis": 215, "setitem": 215, "r754": 215, "pythonmpq": [216, 217], "srepr": [216, 297], "strength": 216, "richardon": 216, "dup_factor_list": 216, "factortool": [216, 219], "dup_": [216, 219], "dmp_": [216, 219], "z1": [216, 217, 244], "is_field": [216, 217], "fmpz": [216, 217], "quo": [216, 217, 219, 222], "rem": [216, 217, 219, 222], "exactquotientfail": [216, 217, 219, 222], "mpz": [216, 217], "of_typ": [216, 217], "z1_sympi": 216, "from_sympi": [216, 217], "forth": [216, 221], "z_sympi": 216, "z_zz": 216, "coercionfail": [216, 219], "sum_domain": 216, "expressions_sympi": 216, "expressions_dom": 216, "result_dom": 216, "e_dom": 216, "result_sympi": 216, "gaussianinteg": [216, 217], "gaussianrationalfield": [216, 217], "gaussianr": [216, 217], "finitefield": [216, 217], "pythonfinitefield": [216, 217], "gmpyfinitefield": [216, 217], "welcom": [216, 242, 295], "realel": [216, 217], "complexel": [216, 217], "mpc": 216, "xr": [216, 224], "zc": 216, "_mpc_": 216, "realfield": [216, 217], "rr100": 216, "33333333333333333333333333333": 216, "hack": [216, 242, 255], "algebraic_field": [216, 217, 219, 221], "algebraicfield": [216, 217, 219, 221], "sqrt3": 216, "x_dom": 216, "p_expr": [216, 217], "polyel": [216, 217, 219, 223, 224, 226], "p_dom": 216, "xk": [216, 217, 228], "yk": [216, 217], "poly_r": [216, 217], "old_polynomialr": 216, "globalpolynomialr": 216, "polyclass": [216, 217, 222], "yr": [216, 224], "broader": 216, "get_field": [216, 217], "frac_field": [216, 217], "rationalfield": [216, 217], "old_frac_field": [216, 217], "fractionfield": [216, 217], "old_fractionfield": 216, "xf": 216, "yf": 216, "fracfield": [216, 217], "expressiondomain": [216, 217], "elements_sympi": 216, "elements_k": 216, "convert_from": [216, 217], "num_zz": 216, "num_qq": 216, "encompass": 216, "all_coeff": [216, 217, 222], "dom": [216, 217, 219, 234], "strang": 216, "hybrid": 216, "unreli": 216, "usefulli": 217, "pythonr": [217, 224], "p_domain": 217, "ez": [217, 252], "has_assoc_field": 217, "has_assoc_r": 217, "alg_field_from_poli": [217, 221], "root_index": 217, "almosteq": 217, "cyclotomic_field": [217, 221], "zeta7": 217, "zeta_": 217, "exsqrt": 217, "lexord": [217, 222], "from_algebraicfield": 217, "from_complexfield": 217, "from_expressiondomain": 217, "from_expressionrawdomain": 217, "from_ff": 217, "modularinteg": 217, "from_ff_gmpi": 217, "from_ff_python": 217, "from_fractionfield": 217, "from_globalpolynomialr": 217, "from_monogenicfiniteextens": 217, "from_polynomialr": 217, "from_qq_gmpi": 217, "from_qq_python": 217, "from_realfield": 217, "from_zz_gmpi": 217, "from_zz_python": 217, "gcdex": [217, 222], "get_exact": 217, "half_gcdex": [217, 222], "is_pid": 217, "is_r": 217, "is_nonposit": 217, "is_on": [217, 222], "rersiv": 217, "__neg__": 217, "__pos__": 217, "__sub__": 217, "q_domain": 217, "q_expr": 217, "x_domain": 217, "alg": [217, 221, 225], "unify_composit": 217, "trait": 217, "is_unit": 217, "__divmod__": 217, "__floordiv__": 217, "__mod__": [217, 221], "simpledomain": 217, "compositedomain": 217, "from_qq": 217, "from_zz": 217, "to_int": 217, "gmpyinteg": 217, "pythoninteg": 217, "gmpyrationalfield": 217, "pythonrationalfield": 217, "from_gaussianrationalfield": 217, "gaussianel": 217, "gaussiandomain": 217, "qq_python": 217, "zz_python": 217, "z2": 217, "z3": 217, "z4": 217, "from_gaussianinteg": 217, "as_algebraicfield": 217, "orig_ext": 217, "integral_basi": [217, 221], "maximal_ord": [217, 221], "zeta5": 217, "primes_abov": [217, 221], "primeid": [217, 221], "galois_group": [217, 221, 222], "by_nam": [217, 221, 222], "max_tri": [217, 221, 222], "numberfield": [217, 221, 222], "galoisgroup": [217, 221, 222], "to_alg_num": [217, 221], "legibl": 217, "inaccur": 217, "to_rat": 217, "mpelement": 217, "complexfield": 217, "lc": [217, 219, 222], "domain_or_field": 217, "dmf": 217, "coercibl": 217, "monomialord": [217, 222], "xring": 217, "vring": 217, "sring": [217, 223, 224], "polyr": [217, 219, 224], "factor_list": [217, 222, 302], "add_gen": 217, "drop_to_ground": 217, "monomial_basi": 217, "206": [217, 222], "744": 217, "945": [217, 223], "symmetric_poli": [217, 222], "is_monomi": [217, 222], "coeff_wrt": 217, "const": [217, 226], "inplac": 217, "shallow": [217, 233], "zero_monom": 217, "clo": 217, "p64": 217, "qv": 217, "f0": 217, "imul_num": 217, "itercoeff": 217, "itermonom": 217, "iterterm": 217, "leading_expv": 217, "leading_monom": 217, "leading_term": 217, "listcoeff": 217, "listmonom": 217, "listterm": 217, "monom": [217, 222], "pdiv": [217, 222], "prem": [217, 222], "pquo": [217, 222], "pexquo": [217, 222], "differnc": 217, "strip_zero": 217, "r755": 217, "lauer": 217, "1976": 217, "242": 217, "247": [217, 220, 244], "800205": 217, "806342": 217, "tail_degre": 217, "xfield": 217, "vfield": [217, 276], "sfield": [217, 276], "fracel": [217, 226], "lev": 217, "add_ground": [217, 222], "all_monom": [217, 222], "all_term": [217, 222], "cauchy_lower_bound": 217, "cauchy_upper_bound": 217, "count_complex_root": 217, "sup": [217, 222, 226, 234], "count_real_root": 217, "deflat": [217, 222], "y_i": [217, 219, 221, 222, 242], "x_j": [217, 219, 222], "degree_list": [217, 222], "eject": [217, 222], "exquo_ground": [217, 222], "factor_list_includ": [217, 222], "from_sympy_list": 217, "gff_list": [217, 222], "ground_new": 217, "homogeneous_ord": [217, 222, 239, 242], "is_cyclotom": [217, 222], "is_ground": [217, 222], "is_homogen": [217, 222], "is_irreduc": [217, 222], "is_linear": [217, 222], "is_mon": [217, 222], "is_quadrat": [217, 222], "is_sqf": [217, 222], "l1_norm": [217, 222], "l2_norm_squar": 217, "max_norm": [217, 222], "mignotte_sep_bound_squar": 217, "mignott": [217, 219], "mul_ground": [217, 222], "quo_ground": [217, 222], "refine_root": [217, 221, 222], "includepr": [217, 219, 222], "sqf_list_includ": [217, 222], "sqf_norm": [217, 222], "sqf_part": [217, 222], "sqr": [217, 222], "sturm": [217, 222], "sub_ground": [217, 222], "to_best": 217, "to_dict": 217, "to_exact": [217, 222], "to_r": [217, 222], "to_sympy_dict": 217, "to_sympy_list": 217, "to_tupl": 217, "total_degre": [217, 222, 239], "trunc": [217, 222, 225], "unify_dmp": 217, "frac_unifi": 217, "half_per": 217, "poly_unifi": 217, "mod_to_list": 217, "unify_anp": 217, "gr\u00f6bner": 218, "wester": [218, 288], "agca": [218, 288], "l0": 219, "legitim": 219, "uninterest": 219, "bulk": [219, 236], "x_u": 219, "dup__": 219, "densebas": 219, "dmp_lc": 219, "poly_lc": 219, "dmp_tc": 219, "poly_tc": 219, "dmp_ground_lc": 219, "dmp_ground_tc": 219, "dmp_true_lt": 219, "n_1": [219, 244, 246], "n_k": 219, "dmp_degre": 219, "dmp_degree_in": 219, "dmp_degree_list": 219, "dmp_strip": 219, "dmp_valid": 219, "dup_revers": 219, "dmp_copi": 219, "dmp_to_tupl": 219, "dmp_normal": 219, "dmp_convert": 219, "to_domain": 219, "dmp_from_sympi": 219, "dmp_nth": 219, "dmp_ground_nth": 219, "dmp_zero_p": 219, "dmp_zero": 219, "dmp_one_p": 219, "dmp_one": 219, "dmp_ground_p": 219, "dmp_ground": 219, "dmp_negative_p": 219, "dmp_positive_p": 219, "dmp_from_dict": 219, "dmp_to_dict": 219, "dmp_swap": 219, "dmp_permut": 219, "dmp_nest": 219, "dmp_rais": 219, "dmp_deflat": 219, "dmp_multi_defl": 219, "dmp_inflat": 219, "dmp_exclud": 219, "dmp_includ": 219, "dmp_inject": 219, "dmp_eject": 219, "dmp_terms_gcd": 219, "dmp_list_term": 219, "dmp_apply_pair": 219, "dmp_slice": 219, "dup_random": 219, "densearith": 219, "dmp_add_term": 219, "dmp_sub_term": 219, "dmp_mul_term": 219, "dmp_add_ground": 219, "dmp_sub_ground": 219, "dmp_mul_ground": 219, "dmp_quo_ground": 219, "dmp_exquo_ground": 219, "dup_lshift": 219, "dup_rshift": 219, "dmp_ab": 219, "dmp_neg": 219, "dmp_add": 219, "dmp_sub": 219, "dmp_add_mul": 219, "dmp_sub_mul": 219, "dmp_mul": 219, "dmp_sqr": 219, "dmp_pow": 219, "dmp_pdiv": 219, "dmp_prem": 219, "dmp_pquo": 219, "dmp_pexquo": 219, "dmp_rr_div": 219, "dmp_ff_div": 219, "dmp_div": 219, "dmp_rem": 219, "dmp_quo": 219, "dmp_exquo": 219, "dmp_max_norm": 219, "dmp_l1_norm": 219, "dmp_expand": 219, "densetool": 219, "dmp_integr": 219, "dmp_integrate_in": 219, "dmp_diff": 219, "dmp_diff_in": 219, "dmp_eval": 219, "dmp_eval_in": 219, "dmp_eval_tail": 219, "dmp_diff_eval_in": 219, "dmp_trunc": 219, "dmp_ground_trunc": 219, "dup_mon": 219, "dmp_ground_mon": 219, "dup_cont": 219, "dmp_ground_cont": 219, "dup_primit": 219, "dmp_ground_primit": 219, "dup_extract": 219, "dmp_ground_extract": 219, "dup_real_imag": 219, "bivari": [219, 225, 242, 246], "dup_mirror": 219, "dup_scal": 219, "dup_shift": 219, "dup_transform": 219, "dmp_compos": 219, "dup_decompos": 219, "t_m": 219, "r756": 219, "dmp_lift": 219, "dup_sign_vari": 219, "dmp_clear_denom": 219, "k_0": 219, "dmp_revert": 219, "gf_": 219, "justifi": 219, "necess": 219, "u_0": 219, "m_0": [219, 239], "m_n": 219, "236237": 219, "9215": 219, "9405": 219, "9603": 219, "gf_int": 219, "gf_degre": 219, "gf_lc": 219, "gf_tc": 219, "gf_strip": 219, "gf_trunc": 219, "gf_normal": 219, "gf_from_dict": 219, "gf_to_dict": 219, "gf_from_int_poli": 219, "gf_to_int_poli": 219, "gf_neg": 219, "gf_add_ground": 219, "gf_sub_ground": 219, "gf_mul_ground": 219, "gf_quo_ground": 219, "gf_add": 219, "gf_sub": 219, "gf_mul": 219, "gf_sqr": 219, "gf_add_mul": 219, "gf_sub_mul": 219, "gf_expand": 219, "gf_div": 219, "r757": 219, "monagan93": [219, 220], "r758": 219, "gathen99": [219, 220], "gf_rem": 219, "gf_quo": 219, "gf_exquo": 219, "gf_lshift": 219, "gf_rshift": 219, "gf_pow": 219, "gf_pow_mod": 219, "r759": 219, "gf_gcd": 219, "gf_lcm": 219, "gf_cofactor": 219, "gf_gcdex": 219, "eea": 219, "r760": 219, "gf_monic": 219, "gf_diff": 219, "gf_eval": 219, "gf_multi_ev": 219, "gf_compos": 219, "gf_compose_mod": 219, "gf_trace_map": 219, "r761": 219, "gathen92": [219, 220], "gf_random": 219, "gf_irreduc": 219, "gf_irreducible_p": 219, "gf_sqf_p": 219, "gf_sqf_part": 219, "gf_sqf_list": 219, "e_2": [219, 222], "e_k": 219, "f_j": [219, 236], "gf_sqf": 219, "r762": 219, "geddes92": [219, 220], "gf_qmatrix": 219, "berlekamp": 219, "gf_qbasi": 219, "gf_berlekamp": 219, "gf_zassenhau": 219, "gf_shoup": 219, "gf_factor_sqf": 219, "gf_factor": 219, "e_d": 219, "cantor": 219, "zassenhau": [219, 221], "shoup": [219, 220], "kaltofen": [219, 220], "gathen": [219, 220], "gf_factor_method": 219, "r763": 219, "gf_valu": 219, "2204": 219, "congruent": [219, 236, 239], "cong": 219, "189": 219, "139": 219, "r764": 219, "ivan": 219, "niven": 219, "zuckerman": 219, "montgomeri": 219, "infeas": [219, 222], "sdm_": 219, "distributedmodul": 219, "sdm_monomial_mul": 219, "sdm_monomial_deg": 219, "f_5": 219, "sdm_monomial_divid": 219, "sdm_lc": 219, "sdm_to_dict": 219, "sdm_from_dict": 219, "dic": 219, "sdm_add": 219, "2f_1": 219, "3f_1": 219, "yf_1": 219, "xf_1": 219, "sdm_lm": 219, "sdm_lt": 219, "sdm_mul_term": 219, "2xy": [219, 296], "8xy": 219, "sdm_zero": 219, "sdm_deg": 219, "sdm_from_vector": 219, "sdm_to_vector": 219, "variant": [219, 242, 245], "qg": 219, "remark": [219, 225, 236, 242], "uf": 219, "vg": 219, "zout": 219, "euclidtool": 219, "dmp_half_gcdex": 219, "dmp_gcdex": 219, "dmp_invert": 219, "dmp_euclidean_pr": 219, "dmp_primitive_pr": 219, "exceedingli": 219, "collin": [219, 220], "collins67": [219, 220], "subdomain": 219, "2l": 219, "remainin": 219, "subdetermin": 219, "n_2": [219, 246], "n_": [219, 239], "abnorm": 219, "gamma_i": 219, "brown": [219, 220, 246], "traub": [219, 220], "browntraub71": [219, 220], "brown78": [219, 220], "discoveri": [219, 298], "dmp_inner_subresult": 219, "729": 219, "sre": 219, "dmp_subresult": 219, "dmp_prs_result": 219, "dmp_zz_modular_result": 219, "dmp_zz_collins_result": 219, "dmp_qq_collins_result": 219, "dmp_result": 219, "dmp_discrimin": 219, "dmp_rr_prs_gcd": 219, "cff": [219, 222], "dmp_ff_prs_gcd": 219, "dmp_zz_heu_gcd": 219, "r765": 219, "liao95": [219, 220], "dmp_qq_heu_gcd": 219, "dmp_inner_gcd": 219, "dmp_gcd": 219, "dmp_lcm": 219, "dmp_content": 219, "dmp_primit": 219, "dmp_cancel": 219, "dmp_trial_divis": 219, "dmp_zz_mignotte_bound": 219, "dup_zz_hensel_step": 219, "hensel": 219, "r766": 219, "dup_zz_hensel_lift": 219, "f_list": 219, "multifactor": 219, "r767": 219, "dup_zz_zassenhau": 219, "dup_zz_irreducible_p": 219, "eisenstein": 219, "dup_cyclotomic_p": 219, "bradford": 219, "russel": 219, "251": 219, "berlin": 219, "heidelberg": 219, "dup_zz_cyclotomic_poli": 219, "dup_zz_cyclotomic_factor": 219, "r768": 219, "weisstein09": [219, 220], "dup_zz_factor_sqf": 219, "dup_zz_factor": 219, "r769": 219, "dmp_zz_wang_non_divisor": 219, "wang": [219, 220, 264], "eez": 219, "dmp_zz_wang_test_point": 219, "dmp_zz_wang_lead_coeff": 219, "dmp_zz_diophantin": 219, "dmp_zz_wang_hensel_lift": 219, "dmp_zz_wang": 219, "r770": 219, "wang78": [219, 220], "r771": 219, "dmp_zz_factor": 219, "r772": 219, "dmp_ext_factor": 219, "dup_gf_factor": 219, "dmp_factor_list": 219, "dmp_factor_list_includ": 219, "dmp_irreducible_p": 219, "groebnertool": 219, "polyconfig": [219, 222], "f5b": [219, 222], "spoli": 219, "red_groebn": 219, "beckerweispfenning93": 219, "is_groebn": 219, "is_minim": 219, "is_reduc": 219, "fglmtool": 219, "matrix_fglm": 219, "o_to": 219, "o_from": 219, "r773": 219, "fauger": [219, 222], "gianni": [219, 222, 244], "mora": [219, 220, 222, 244], "sdm_spoli": 219, "phantom": 219, "sca": 219, "defn": 219, "sdm_ecart": 219, "ecart": 219, "sdm_nf_mora": 219, "nf": 219, "sdm_groebner": 219, "sugar": [219, 220, 251], "giovini": [219, 220], "polyopt": [219, 223], "build_opt": 219, "basepolynomialerror": 219, "operationnotsupport": 219, "heuristicgcdfail": 219, "homomorphismfail": 219, "isomorphismfail": [219, 221], "extraneousfactor": 219, "evaluationfail": 219, "refinementfail": 219, "notrevers": [219, 222], "notalgebra": 219, "polynomialerror": [219, 222], "unificationfail": [219, 221], "generatorsneed": 219, "computationfail": 219, "exc": 219, "generatorserror": 219, "univariatepolynomialerror": 219, "multivariatepolynomialerror": [219, 222], "polificationfail": 219, "orig": 219, "optionerror": 219, "flagerror": 219, "modulargcd": 219, "modgcd_univari": 219, "monagan00": [219, 220], "modgcd_bivari": 219, "modgcd_multivari": 219, "_modgcd_multivariate_p": 219, "brown71": [219, 220], "degbound": 219, "contbound": 219, "func_field_modgcd": 219, "reconstuct": 219, "z_p": 219, "hoeij04": [219, 220], "scarc": 219, "hsin": 220, "chao": 220, "liao": 220, "fateman": 220, "montreal": 220, "quebec": 220, "canada": 220, "240": [220, 228, 273], "von": [220, 246], "zur": 220, "gerhard": 220, "cambridg": [220, 239], "weisstein": 220, "cyclotomicpolynomi": 220, "1215": 220, "1231": 220, "czapor": 220, "labahn": 220, "monagan": [220, 238], "disco": 220, "721": 220, "kaltofen98": 220, "subquadrat": 220, "223": 220, "1998": [220, 239], "1179": 220, "1197": 220, "shoup95": 220, "397": 220, "shoup91": 220, "cox97": [220, 222], "shea": [220, 222], "ajwa95": 220, "ajwa": 220, "liu": 220, "groebner": [220, 221, 222, 225, 238, 244, 245], "citeseerx": [220, 235], "ist": [220, 235], "psu": [220, 235], "repid": 220, "rep1": [220, 235], "2bb46c0852bf74c9d74d1a12af6d11f69f7e8363": 220, "bose03": 220, "bose": 220, "guiver": 220, "giovini91": 220, "bronstein93": [220, 222], "salvi": [220, 223], "kiev": 220, "ukrain": 220, "buchberger01": [220, 222], "theorist": 220, "moreno": 220, "diaz": 220, "freir": 220, "eurocast": 220, "februari": 220, "davenport88": 220, "siret": 220, "tournier": 220, "london": [220, 239], "124": [220, 291], "greuel": 220, "pfister": 220, "atiyah": 220, "macdonald": 220, "142": 220, "1971": [220, 242], "505": 220, "249": 220, "wittkopf": 220, "478": 220, "hoeij": 220, "297": [220, 222], "304": [220, 222], "wang81": 220, "adic": 220, "symsac": 220, "hoeij02": 220, "manwright94": [220, 222], "yiu": 220, "kwong": 220, "franci": 220, "wright": 220, "dispers": [220, 246], "190347": 220, "190413": 220, "koepf98": [220, 222], "koepf": [220, 228, 238], "vieweg": 220, "abramov71": [220, 222], "abramov": [220, 244], "ussr": 220, "330": 220, "man93": [220, 222], "376": 220, "sciencedirect": [220, 235], "pii": [220, 235], "s0747717183710539": 220, "kapur1994": 220, "deepak": 220, "kapur": 220, "tushar": 220, "saxena": 220, "yang": 220, "researchg": [220, 246], "2514261_algebraic_and_geometric_reasoning_using_dixon_result": 220, "palancz08": 220, "pal\u00e1ncz": 220, "zaletnyik": 220, "jl": [220, 259], "awang": 220, "ew": 220, "grafarend": 220, "geodesi": 220, "225607735_dixon_result": 220, "s_solution_of_systems_of_geodetic_polynomial_equ": 220, "bruce97": 220, "bruce": 220, "randal": 220, "donald": [220, 261], "mundi": 220, "artifici": [220, 229], "intellig": [220, 238, 242, 302], "orlando": 220, "www2": 220, "duke": 220, "donaldlab": 220, "symbolicnumericalcomput": 220, "045": 220, "087": 220, "stiller96": 220, "stiller": 220, "cites": 220, "viewdoc": [220, 235], "590": 220, "2021": 220, "cohen93": [220, 221], "henri": 220, "olga": 221, "tausski": 221, "zimmer": 221, "pohst": 221, "articul": 221, "mathfrak": 221, "regul": 221, "alpha_m": 221, "round_two": 221, "prime_decomp": 221, "prime_valu": 221, "minimal_polynomi": 221, "field_isomorph": 221, "nilrad": 221, "z_k": 221, "zk": 221, "ordinarili": 221, "503": 221, "r774": 221, "r775": 221, "powerbasisel": 221, "ramif": 221, "as_submodul": 221, "bundl": 221, "test_factor": 221, "deliber": 221, "is_inert": 221, "inert": [221, 242], "reduce_anp": 221, "reduce_alg_num": 221, "field_gen": 221, "just_gen": 221, "reagent": 221, "kummer": 221, "1847": 221, "ueber": 221, "zerlegung": 221, "crell": 221, "r776": 221, "poly_from_expr": [221, 222], "tschirnhausen": 221, "maxtriesexcept": 221, "g_name": 221, "_minpoly_compos": 221, "stall": 221, "alli": 221, "monomorph": 221, "alpha_i": 221, "alpha_n": 221, "lincomb": 221, "primtiiv": 221, "meanwhil": 221, "moduleel": 221, "powerbasi": 221, "submodule_from_matrix": 221, "ancestor": 221, "to_col": 221, "nca": 221, "circumst": [221, 296], "_mult_tab": 221, "successfulli": 221, "moduleendomorph": 221, "innerendomorph": 221, "endomorphismr": 221, "spec": [221, 222], "i_n": [221, 222, 247], "include_self": 221, "basis_el": 221, "element_from_r": 221, "endomorphism_r": 221, "is_compat_col": 221, "mult_tab": 221, "mult": 221, "closurefailur": 221, "nearest_common_ancestor": 221, "number_field": 221, "power_basis_ancestor": 221, "incom": [221, 246], "halv": 221, "submodule_from_gen": 221, "over_power_basi": 221, "starts_with_un": 221, "hnf_modulu": 221, "whole_submodul": 221, "element_from_anp": 221, "element_from_alg_num": 221, "element_from_poli": 221, "qq_matrix": 221, "basis_element_pullback": 221, "discard_befor": 221, "structureerror": 221, "cohen00": 221, "make_mod_elt": 221, "qq_col": 221, "from_int_list": 221, "is_compat": 221, "reduced_mod_p": 221, "to_ancestor": 221, "anc": 221, "to_par": 221, "to_anp": 221, "inner_endomorph": 221, "event": [221, 246], "find_min_poli": 221, "missingunityerror": 221, "is_int": 221, "get_num_denom": 221, "extract_fundamental_discrimin": 221, "r777": 221, "algintpow": 221, "zeta_pow": 221, "r778": 221, "coeff_search": 221, "supplement_a_subspac": 221, "v_n": 221, "w_r": 221, "w_j": 221, "u_j": 221, "r779": 221, "parallel_poly_from_expr": 222, "exprtool": 222, "gcd_list": 222, "lcm_list": 222, "destruct": 222, "2079": 222, "1401": 222, "2715": 222, "6720": 222, "1092": 222, "gff": 222, "check_sqf": 222, "count_root": 222, "ground_root": 222, "nroot": [222, 244], "4142": 222, "732": 222, "polyroot": 222, "r780": 222, "93ruffini_theorem": 222, "865": 222, "casu": 222, "irreducibili": 222, "r781": 222, "0365": 222, "33984": 222, "87636": 222, "casus_irreducibili": 222, "maxstep": 222, "cleanup": 222, "73205080756888": 222, "73205080756887729352744634151": 222, "nth_power_roots_poli": 222, "r_g": 222, "_signsimp": 222, "q_n": 222, "is_zero_dimension": [222, 245], "donal": 222, "230": [222, 244], "ec": 222, "em": 222, "dispersionset": 222, "gp": [222, 242], "free_symbols_in_domain": 222, "from_dict": 222, "from_poli": 222, "get_domain": 222, "get_modulu": 222, "has_only_gen": 222, "vincent": [222, 264], "akrita": 222, "strzebonski": 222, "va": 222, "alkiviadi": 222, "panagioti": 222, "vigkla": 222, "265": 222, "279": 222, "polnomi": 222, "is_multivari": 222, "is_univari": 222, "ltrim": 222, "make_monic_over_integers_by_scaling_root": 222, "_only_": 222, "sturmian": 222, "subresultants_qq_zz": 222, "_pg": 222, "_amv": 222, "rem_z": 222, "premultipli": 222, "rat_clear_denom": 222, "_ignor": 222, "retract": 222, "same_root": 222, "set_domain": 222, "set_modulu": 222, "termwis": 222, "fglm": 222, "r782": 222, "horner_schem": 222, "equispac": 222, "viet": 222, "itermonomi": 222, "min_degre": 222, "gib": 222, "monomial_kei": 222, "monomial_count": 222, "gradedlexord": 222, "reversedgradedlexord": 222, "clear_cach": 222, "_get_interv": 222, "165": [222, 246, 264], "169": 222, "eval_approx": 222, "evalf_r": 222, "eval_r": 222, "69629": 222, "71318": 222, "805": 222, "3275": 222, "65536": [222, 225, 226], "414645": 222, "131072": 222, "6545": 222, "104755": 222, "2097152": 222, "6634255": 222, "_all_root": 222, "use_cach": 222, "_complexes_index": 222, "_complexes_sort": 222, "_count_root": 222, "_ensure_complexes_init": 222, "_ensure_reals_init": 222, "_eval_is_imaginari": 222, "_get_complex": 222, "_get_complexes_sqf": 222, "currentfactor": 222, "_get_real": 222, "_get_reals_sqf": 222, "_get_root": 222, "_indexed_root": 222, "_new": 222, "_postprocess_root": 222, "_preprocess_root": 222, "heroic": [222, 244], "_real_root": 222, "_reals_index": 222, "_reals_sort": 222, "_refine_complex": 222, "_roots_trivi": 222, "_set_interv": 222, "return_mpmath": 222, "861136": 222, "86113631159405258": 222, "unread": [222, 262], "inexpress": 222, "unsolv": [222, 245], "r783": 222, "cubic_equ": 222, "trigonometric_and_hyperbolic_solut": 222, "specialpoli": 222, "swinnerton_dyer_poli": 222, "swinnerton": 222, "dyer": 222, "random_poli": 222, "gegenbau": [222, 226], "jakob": 222, "psum": 222, "3144337": 222, "r784": 222, "bernoulli_c_poli": 222, "reindex": 222, "swiss": 222, "knife": 222, "630": 222, "5124": 222, "12465": 222, "155": 222, "r785": 222, "partfrac": [222, 228], "undertermin": 222, "_w": [222, 233], "apart_list": 222, "assemble_partfrac_list": 222, "bunch": 222, "pfd": 222, "r786": 222, "partial_list": 222, "reassembl": 222, "pfda": 222, "r787": 222, "r788": 222, "r789": 222, "r790": 222, "r791": 222, "r792": 222, "r793": 222, "r794": 222, "widen": 223, "ring_seri": 223, "rs_sin": 223, "166666666666667": 223, "puiseux": 223, "rs_co": 223, "rs_tan": 223, "rs_exp": 223, "blazingli": 223, "promin": 223, "gradual": 223, "rs_": 223, "rs_log": 223, "rs_lambertw": 223, "rs_atan": 223, "arctang": 223, "rs_asin": 223, "_tan1": 223, "rs_cot": 223, "rs_cos_sin": 223, "rs_atanh": 223, "rs_sinh": 223, "rs_cosh": 223, "rs_tanh": 223, "rs_hadamard_exp": 223, "inver": 223, "rs_mul": 223, "rs_squar": 223, "rs_pow": 223, "rs_series_invers": 223, "rs_series_revers": 223, "a_kx_k": 223, "ar_i": 223, "ar_": 223, "ae": 223, "rs_trunc": 223, "rs_nth_root": 223, "160249952256379": 223, "44224957030741": 223, "rs_sub": 223, "rs_diff": 223, "rs_integr": 223, "rs_newton": 223, "rs_compose_add": 223, "r795": 223, "bostan": 223, "flajolet": 223, "schost": 223, "4579": 223, "institut": 223, "nation": 223, "recherch": 223, "informatiqu": 223, "automatiqu": 223, "rs_is_puiseux": 223, "rs_puiseux": 223, "rs_puiseux2": 223, "rs_series_from_list": 223, "concur": 223, "rs_fun": 223, "_tan": 223, "_nth": 223, "_root": 223, "_fun": 223, "mul_xin": 223, "pow_xin": 223, "_raw": 224, "sympy_eqs_to_r": 224, "eqs_r": 224, "eqs_to_matrix": 224, "eqs_coeff": 224, "eqs_rh": 224, "_solve_lin_si": 224, "_solve_lin_sys_compon": 224, "critiqu": 225, "wester1999": 225, "systemat": 225, "153": 225, "\u2124": [225, 226, 245, 303], "unm": 225, "driver": [226, 258], "adequ": 226, "emptyprint": 226, "_sympystr": 226, "mathml": 226, "inconveni": 226, "_print_": 226, "expr_class": 226, "_print_rat": 226, "_print_numb": 226, "_print_atom": 226, "_print_bas": 226, "print_latex": 226, "mylatexprint": 226, "_print_deriv": 226, "print_my_latex": 226, "modop": 226, "subcompon": 226, "outermost": [226, 234, 238, 250], "modopmodewrong": 226, "modopnestedwrong": 226, "modopsettingswrong": 226, "subobject": 226, "infrastructur": [226, 243], "printer_exampl": 226, "set_global_set": 226, "stringpict": 226, "pretty_symbologi": 226, "prettyform": 226, "hline": 226, "vline": 226, "ascii": 226, "_pretti": 226, "use_unicode_sqrt_char": 226, "root_not": 226, "mat_symbol_styl": 226, "prettifi": 226, "bold": 226, "c89codeprint": 226, "print_ccod": 226, "tgamma": 226, "known_functions_c89": 226, "known_functions_c99": 226, "fmax": 226, "fmin": 226, "lgamma": 226, "indent_cod": 226, "cfunction_format": 226, "derefer": 226, "dereferenc": 226, "symbols_to_declar": 226, "not_supported_funct": 226, "code_text": 226, "m_sqrt2": 226, "math_macro": 226, "m_sqrt2l": 226, "cxx": 226, "cxx98codeprint": 226, "print_rcod": 226, "rcode": 226, "known_funct": 226, "_rcode": 226, "rfunction_str": 226, "rfunction_format": 226, "ifels": 226, "type_map": 226, "name_mangl": 226, "mangl": 226, "floor1": 226, "floor2": 226, "print_fcod": 226, "_fcode": 226, "conjg": 226, "32768": 226, "7182818284590452d0": 226, "1415926535897932d0": 226, "718281828459045235360287d0": 226, "141592653589793238462643d0": 226, "869604401089358618834491d0": 226, "mygamma": 226, "allow_unknown_funct": 226, "smtlib": 226, "smtlibprint": 226, "symbol_t": 226, "_smtlib": 226, "_default_set": 226, "known_const": 226, "ite": 226, "known_typ": 226, "smtlib_cod": 226, "auto_assert": 226, "auto_declar": 226, "prefix_express": 226, "suffix_express": 226, "log_warn": 226, "booleanfunct": 226, "dreal": 226, "14159": 226, "my_smt_variable_for_pi": 226, "postfix": [226, 264], "riski": 226, "sound": [226, 302], "pw": 226, "pythontyp": 226, "smt_builtin_func": 226, "existing_smtlib_fcn": 226, "user_def_func": 226, "fun": [226, 243, 295], "coshintegr": 226, "cosintegr": 226, "expintegralei": 226, "factorialpow": 226, "heavisidetheta": 226, "sinhintegr": 226, "sinintegr": 226, "arccosh": 226, "arccoth": 226, "arcsinh": 226, "dirichleteta": 226, "gegenbauerc": 226, "hypergeometricpfq": 226, "sphericalbesselj": 226, "logintegr": 226, "lucasl": 226, "mathieu": 226, "riemann_xi": 226, "riemannxi": 226, "stieltjesgamma": 226, "sphericalbess": 226, "mcodeprint": 226, "_mcode": 226, "mcode": 226, "maplecodeprint": 226, "_mapl": 226, "maple_cod": 226, "print_maple_cod": 226, "javascriptcodeprint": 226, "_javascript": 226, "js_function_str": 226, "known_fcns_src1": 226, "known_fcns_src2": 226, "conj": 226, "juliacodeprint": 226, "_julia": 226, "harmless": [226, 298], "existing_julia_fcn": 226, "coshint": 226, "cosint": 226, "sinhint": 226, "sinint": 226, "logint": 226, "gammaln": 226, "octavecodeprint": 226, "_octav": 226, "recip": [226, 264], "powf": 226, "signum": 226, "rustcodeprint": 226, "_rust_cod": 226, "7_f64": 226, "_aesara": 226, "tensorvari": 226, "floatx": 226, "squeez": 226, "dim_handl": 226, "gtkmathview": 226, "widget": 226, "print_gtk": 226, "libgtkmathview": 226, "start_view": 226, "_lambdacod": 226, "accepted_latex_funct": 226, "parenthesize_sup": 226, "fold_frac_pow": 226, "fold_func_bracket": 226, "fold_short_frac": 226, "inv_trig_styl": 226, "itex": 226, "ln_notat": 226, "long_frac_ratio": 226, "mat_delim": 226, "mat_str": 226, "mul_symbol": 226, "symbol_nam": 226, "gothic_re_im": 226, "decimal_separ": 226, "diff_oper": 226, "amsmath": 226, "fracton": 226, "semicolon": 226, "monospac": 226, "mathtt": 226, "mathml2": 226, "mathmlprinterbas": 226, "mathmlcontentprint": 226, "mathmlpresentationprint": 226, "chapter4": 226, "_mathml_cont": 226, "mathml_tag": 226, "chapter3": 226, "_mathml_present": 226, "utf": 226, "mul_symbol_mathml_numb": 226, "xb7": 226, "print_mathml": [226, 301], "mrow": 226, "mpmathprint": 226, "fully_qualified_modul": 226, "print_python": 226, "textual": 226, "reprprint": 226, "_sympyrepr": 226, "reprifi": 226, "sympy_integ": 226, "displayhook": [226, 257], "pprint_nod": 226, "nb2": 226, "print_nod": 226, "asssumpt": 226, "determinisit": 226, "backtrac": 226, "print_tre": 226, "outputbuff": 226, "dvioption": 226, "outputtexfil": 226, "extra_preambl": 226, "latex_set": 226, "postscript": 226, "tex": 226, "eulervm": 226, "sty": 226, "debian": 226, "ubuntu": 226, "unset": [226, 238], "gimp": 226, "evinc": 226, "kdvi": 226, "xdvi": 226, "xdg": 226, "system_default_view": 226, "bytesio": 226, "usepackag": 226, "amsfont": 226, "renewcommand": 226, "popen": 226, "phidd": 226, "bitmap": 226, "split_super_sub": 226, "var_sub1__sup_sub2": 226, "assignmenterror": 226, "bitwiseand": 226, "bitwiseor": 226, "bitwisexor": 226, "precedence_valu": 226, "kroneckerproduct": 226, "tensadd": [226, 252], "tensmul": [226, 252], "precedence_funct": 226, "precedence_float": 226, "precedence_fracel": 226, "precedence_integ": 226, "precedence_mul": 226, "precedence_polyel": 226, "precedence_r": 226, "precedence_unevaluatedexpr": 226, "databas": [226, 236], "pretty_use_unicod": 226, "pretty_try_use_unicod": 226, "xstr": 226, "greek_lett": 226, "digit_2txt": 226, "ONE": 226, "seven": 226, "symb_2txt": 226, "parenthesi": [226, 250], "\u2081": 226, "\u2082": 226, "\u2084": 226, "\u2085": 226, "\u2086": 226, "\u2087": 226, "\u2088": 226, "\u2089": 226, "\u2090": 226, "\u1d66": 226, "\u1d6a": 226, "\u2091": 226, "\u1d67": 226, "\u2095": 226, "\u1d62": 226, "\u2096": 226, "\u2097": 226, "\u2098": 226, "\u2099": 226, "\u2092": 226, "\u209a": 226, "\u1d69": 226, "\u1d63": 226, "\u1d68": 226, "\u209b": 226, "\u209c": 226, "\u1d64": 226, "\u1d65": 226, "\u2093": 226, "\u2070": 226, "\u00b9": 226, "\u00b2": 226, "\u00b3": 226, "\u2074": 226, "\u2075": 226, "\u2076": 226, "\u2077": 226, "\u2078": 226, "\u2079": 226, "\u2071": 226, "\u207f": 226, "xobj": 226, "vobj": 226, "hobj": 226, "vf": 226, "\u00bd": 226, "\u2153": 226, "\u00bc": 226, "\u2155": 226, "\u2159": 226, "\u215b": 226, "\u2154": 226, "\u2156": 226, "\u00be": 226, "\u2157": 226, "\u215c": 226, "\u2158": 226, "\u215a": 226, "\u215d": 226, "\u215e": 226, "xsym": 226, "symbologi": 226, "atoms_t": 226, "\u2102": [226, 303], "emptysequ": [226, 232], "\u2115": 226, "\u2115\u2080": 226, "\u211d": [226, 303], "symmetricdiffer": [226, 234, 245], "pretty_atom": 226, "atom_nam": 226, "pretty_symbol": 226, "symb_nam": 226, "bold_nam": 226, "stylis": 226, "_print_meijerg": 226, "_print_hyp": 226, "jurjen": 226, "bo": 226, "hate": 226, "spammer": 226, "pietjepuk314": 226, "oc": [226, 276], "oohai": 226, "gedg": 226, "mun": 226, "terminal_str": 226, "baselin": 226, "leftslash": 226, "slash": [226, 257], "paren": 226, "ifascii_nougli": 226, "line_break": 226, "ugli": 226, "terminal_width": 226, "maxdepth": 226, "labelfunc": 226, "digraph": [226, 264, 301], "rankdir": [226, 301], "_sparse_": 227, "flavor": 227, "________": [227, 246, 264], "x\u2080": 227, "greatli": 227, "numbered_symbol": [227, 238, 242, 264], "postprocessor": [227, 238], "reduced_expr": [227, 238], "formalpowerseri": 228, "coeff_bel": 228, "formalpowerseriescompos": 228, "r796": 228, "comtet": 228, "loui": 228, "reidel": 228, "1974": 228, "formalpowerseriesinvers": 228, "r797": 228, "upto": [228, 233, 242], "formalpowerseriesproduct": 228, "rational_algorithm": 228, "compute_fp": 228, "hyper_algorithm": 228, "omposit": 228, "bell_seq": 228, "finiteformalpowerseri": 228, "rational_independ": 228, "ra": 228, "admiss": [228, 231], "r798": 228, "r799": 228, "simpled": 228, "exp_r": 228, "explik": 228, "hyper_r": 228, "rsolve_hypergeometr": 228, "r800": 228, "r801": 228, "solve_d": 228, "fourierseri": 229, "scalex": 229, "shiftx": 229, "sigma_approxim": 229, "gibb": 229, "bigl": 229, "bigr": 229, "lanczo": 229, "r802": 229, "gibbs_phenomenon": 229, "r803": 229, "sawtooth": 229, "bn": 229, "r804": 229, "limitseq": 231, "difference_delta": 231, "r805": 231, "differencedelta": 231, "limit_seq": [231, 233], "safeguard": 231, "r806": 231, "kauer": 231, "seqper": 232, "seqformula": 232, "seqbas": 232, "coeff_mul": 232, "find_linear_recurr": 232, "gfvar": 232, "seqadd": 232, "seqmul": 232, "_mul": 232, "recursiveseq": 232, "fib": 232, "invok": [233, 257, 258], "workhors": 233, "succ": [233, 246], "asymp": 233, "exposit": 233, "gloss": 233, "wsym": 233, "test_rewrite1": 233, "build_expression_tre": 233, "mrv_leadterm": 233, "e0": 233, "calculate_seri": 233, "limitinf": 233, "constantli": 233, "subsset": 233, "mrv_max1": 233, "mrv_max3": 233, "expsf": 233, "expsg": 233, "expsboth": 233, "do_sub": 233, "r807": 233, "limsup_": 233, "7048138294": 233, "7182818285": 233, "6349839002": 233, "6449340668": 233, "shank": 233, "6881721793": 233, "6931396564": 233, "6931471806": 233, "6931471805599453094172321215": 233, "r808": 233, "residue_theorem": 233, "neighborhood": 234, "rim": 234, "conditionset": [234, 245, 246, 303], "affirm": 234, "infimum": 234, "imageset": [234, 245, 303], "is_clos": 234, "closed": 234, "is_disjoint": 234, "r809": 234, "disjoint_set": 234, "is_open": 234, "is_proper_subset": 234, "is_proper_superset": 234, "left_open": 234, "is_superset": 234, "isdisjoint": 234, "issubset": 234, "issuperset": 234, "productset": [234, 245], "powerset": 234, "fancyset": 234, "complexregion": [234, 245], "disjointunion": 234, "lebesgu": 234, "r810": 234, "power_set": 234, "symmetric_differ": 234, "r811": 234, "right_open": 234, "mpi": 234, "r812": 234, "interval_": 234, "as_rel": 234, "is_left_unbound": 234, "is_right_unbound": 234, "r813": 234, "r814": 234, "union_": 234, "28set_theori": 234, "r815": 234, "intersection_": 234, "coin": [234, 246], "r816": 234, "cartesian_product": 234, "is_iter": 234, "r817": 234, "complementset": 234, "r818": 234, "disjoint_union": 234, "r819": 234, "empty_set": 234, "r820": 234, "universal_set": 234, "flambda": 234, "square_iter": 234, "base_set": 234, "cartesiancomplexregion": 234, "polarcomplexregion": 234, "unit_disk": 234, "upper_half_unit_disk": 234, "a_interv": 234, "b_interv": 234, "from_real": 234, "pset": 234, "rset": 234, "thetaset": 234, "upper_half_plan": 234, "normalize_theta_set": 234, "r821": 234, "r822": 234, "axiom_of_power_set": 234, "sin_sol": 234, "r823": 234, "element_": 234, "varnoth": 234, "tr0": 235, "tr1": 235, "tr2": 235, "tr2i": 235, "tr3": 235, "tr4": 235, "tr5": 235, "tr6": 235, "tr7": 235, "tr8": 235, "tr9": 235, "tr10": 235, "tr10i": 235, "tr11": 235, "tr12": 235, "tr12i": 235, "tr13": 235, "trmorri": 235, "tr14": 235, "tr15": 235, "tr16": 235, "tr22": 235, "tr111": 235, "ctr1": 235, "ctr4": 235, "rl1": 235, "rl2": 235, "932": 235, "016": 235, "serendipit": 235, "dead": 235, "newa": 235, "lucki": 235, "sqt": 235, "_tr56": 235, "un": [235, 236], "r824": 235, "morri": 235, "27s_law": 235, "trpower": 235, "r825": 235, "list_of_trigonometric_ident": 235, "reduction_formula": 235, "ctr2": 235, "ctr3": 235, "r826": 235, "s0895717706001609": 235, "dimitar": 235, "vlahovski": 235, "technolog": 235, "xiuqin": 235, "zhong": 235, "zhenb": 235, "zeng": 235, "1169": 235, "1177": 235, "657": 235, "2478": 235, "sosmath": 235, "trig5": 235, "symplifi": [236, 238], "roach1996": 236, "roach1997": 236, "p_q": 236, "reachabl": [236, 246], "f_q": 236, "undo": [236, 302], "whenc": 236, "game": 236, "twofold": 236, "incongru": 236, "wlog": 236, "alpha_r": 236, "beta_r": 236, "blindli": 236, "messi": 236, "k_u": 236, "l_v": 236, "k_j": 236, "c_w": 236, "r_j": 236, "l_u": 236, "res_": 236, "delta_i": 236, "add_formula": 236, "addb": 236, "sum_0": 236, "test_hyperexpand": 236, "test_formula": 236, "suboptim": 236, "imath": 236, "b1prime": 236, "vital": 236, "308": 236, "hongguang": [237, 282], "fu": [237, 238, 282], "logcombin": [238, 242, 245], "my_measur": 238, "nthroot": 238, "max_len": 238, "surd": 238, "kroneckersimp": 238, "besselsimp": 238, "strigonometr": 238, "399": 238, "hypersimilar": 238, "rational_convers": 238, "base10": 238, "6004799503160655": 238, "eq_x": 238, "max_term": 238, "collect_sqrt": 238, "polish": 238, "rad_ration": 238, "collect_const": 238, "rcollect": 238, "ratsimpmodprim": 238, "r827": 238, "pearc": 238, "1145768": 238, "1145809": 238, "trigsimp_groebn": 238, "bb1": 238, "be1": 238, "bb2": 238, "be2": 238, "bei": 238, "max_it": 238, "unrad": [238, 244], "r828": 238, "20210806201615": 238, "fagin": 238, "symb85": 238, "r829": 238, "cybertest": 238, "opt_sub": 238, "as_unevaluated_bas": 238, "tree_cs": 238, "hyperegeometr": 238, "epathtool": 238, "epath": 238, "ebnf": 238, "za": [238, 246], "xml": 238, "xpath": 238, "beginn": [239, 241, 242, 244, 245, 303], "diophantu": 239, "mathematician": [239, 245], "citi": 239, "alexandria": 239, "father": 239, "hi": [239, 244], "arithmetica": 239, "diop_solv": 239, "classify_diop": 239, "diop_linear": 239, "diop_quadrat": 239, "diop_ternary_quadrat": 239, "diop_ternary_quadratic_norm": 239, "diop_general_pythagorean": 239, "diop_general_sum_of_squar": 239, "diop_general_sum_of_even_pow": 239, "merge_solut": 239, "3y": 239, "9369318": 239, "find_dn": 239, "diop_dn": 239, "transformation_to_dn": 239, "920": 239, "5y": 239, "BY": 239, "transformation_to_norm": 239, "t4": 239, "t5": 239, "sum_of_squar": 239, "providean": 239, "eqyptian": 239, "thilinaatsympi": 239, "andreescu": 239, "titu": 239, "andrica": 239, "dorin": 239, "cucurezeanu": 239, "diophantineequ": 239, "alpertron": 239, "20160323033111": 239, "jpr2718": 239, "ax2p": 239, "permute_sign": [239, 264], "signed_permut": [239, 264], "_dict": 239, "base_solution_linear": 239, "r830": 239, "r831": 239, "pell": 239, "lmm": 239, "r832": 239, "393": 239, "13y": 239, "986": 239, "49299": 239, "1570": 239, "diop_bf_dn": 239, "robertson": 239, "20160323033128": 239, "cornacchia": 239, "r833": 239, "nitaj": 239, "r834": 239, "numbertheori": 239, "r835": 239, "r836": 239, "676": 239, "884": 239, "fxz": 239, "3xy": 239, "r837": 239, "fxy": 239, "gyz": 239, "hxz": 239, "r838": 239, "cremona": 239, "rusin": 239, "2x_": 239, "m4": 239, "general_sum_of_squar": 239, "8m": 239, "r839": 239, "2345": 239, "proofwiki": 239, "integer_as_sum_of_three_squar": 239, "general_sum_of_even_pow": 239, "power_represent": 239, "1729": 239, "stopiter": 239, "sum_of_three_squar": 239, "r840": 239, "44542": 239, "207": 239, "schorn": 239, "sum_of_four_squar": 239, "3456": 239, "1294585930293": 239, "2161": 239, "1137796": 239, "r841": 239, "sum_of_pow": 239, "evenli": 239, "var_t": 239, "pqa": 239, "r842": 239, "ur": 239, "dv": 239, "vr": 239, "r843": 239, "parametrize_ternary_quadrat": 239, "r844": 239, "nigel": 239, "ldescent": 239, "4x": [239, 245, 291], "7y": 239, "r845": 239, "r846": 239, "nottingham": 239, "worktrib": 239, "1023265": 239, "gaussian_reduc": 239, "r847": 239, "20201021115213": 239, "cuhk": 239, "wkshum": 239, "404": 239, "r848": 239, "holzer": 239, "mordel": 239, "r849": 239, "r850": 239, "prime_as_sum_of_two_squar": 239, "r851": 239, "sqf_normal": 239, "r852": 239, "legrang": 239, "csusm": 239, "aitken_html": 239, "diophantinesolutionset": 239, "symbols_seq": 239, "dict_iter": 239, "diophantineequationtyp": 239, "binaryquadrat": 239, "r853": 239, "r854": 239, "inhomogeneousternaryquadrat": 239, "inhomogen": [239, 242, 244], "homogeneousternaryquadraticnorm": 239, "homogeneousternaryquadrat": 239, "inhomogeneousgeneralquadrat": 239, "homogeneousgeneralquadrat": 239, "generalsumofsquar": 239, "r855": 239, "generalpythagorean": 239, "cubicthu": 239, "thue": 239, "generalsumofevenpow": 239, "pde": [240, 242, 282], "subcategori": [241, 281], "solve_rational_inequ": 241, "solve_poly_inequ": 241, "reduce_rational_inequ": 241, "reduce_abs_inequ": 241, "solvifi": [241, 245], "autodetect": [242, 243], "odesimp": 242, "ode_ord": [242, 243, 244], "deutil": [242, 243], "best_hint": 242, "unevaluat": 242, "test_od": 242, "ode_": 242, "hintnam": [242, 243], "classify_sysod": 242, "almost_linear": 242, "dsolve_system": 242, "ode_hintnam": 242, "allhint": [242, 243], "tough": 242, "nth_linear_homogeneous_constant_coeff_integr": 242, "1st_linear": 242, "nth_linear": 242, "indep": 242, "indep_div_dep": 242, "undetermined_coeffici": 242, "_best": 242, "nth_algebra": 242, "1st_homogeneous_coeff_best": 242, "1st_homogeneous_coeff_subs_indep_div_dep": 242, "1st_homogeneous_coeff_subs_dep_div_indep": 242, "1st_power_seri": 242, "lie_group": 242, "nth_linear_constant_coeff_homogen": 242, "nth_linear_euler_eq_homogen": 242, "nth_algebraic_integr": 242, "1st_exact_integr": 242, "1st_linear_integr": 242, "bernoulli_integr": 242, "1st_homogeneous_coeff_subs_indep_div_dep_integr": 242, "1st_homogeneous_coeff_subs_dep_div_indep_integr": 242, "nth_linear_constant_coeff_undetermined_coeffici": 242, "nth_linear_constant_coeff_variation_of_paramet": 242, "nth_linear_constant_coeff_variation_of_parameters_integr": 242, "solve_for_func": [242, 243], "homogeneouscoeffsubsdepdivindep": 242, "homogeneouscoeffsubsindepdivdep": 242, "varepsilon": 242, "genform": [242, 243], "starrett": 242, "checkinfsol": 242, "constantsimp": 242, "symbolnam": 242, "startnumb": 242, "endnumb": 242, "renumb": 242, "absorpt": 242, "assist": 242, "constant_renumb": 242, "1st_rational_riccati": 242, "riccati_special_minus2": 242, "linear_coeffici": 242, "separable_reduc": 242, "nth_linear_euler_eq_nonhomogeneous_undetermined_coeffici": 242, "nth_linear_euler_eq_nonhomogeneous_variation_of_paramet": 242, "liouvil": 242, "2nd_linear_airi": 242, "2nd_linear_bessel": 242, "2nd_hypergeometr": 242, "2nd_hypergeometric_integr": 242, "nth_order_reduc": 242, "2nd_power_series_ordinari": 242, "2nd_power_series_regular": 242, "almost_linear_integr": 242, "linear_coefficients_integr": 242, "separable_reduced_integr": 242, "nth_linear_euler_eq_nonhomogeneous_variation_of_parameters_integr": 242, "liouville_integr": 242, "2nd_nonlinear_autonomous_conserv": 242, "2nd_nonlinear_autonomous_conserved_integr": 242, "newconst": 242, "ode_sol_simpl": 242, "trysolv": 242, "sola": 242, "solb": 242, "listofsolut": 242, "ode_problem": 242, "firstexact": 242, "exact_differential_equ": 242, "tenenbaum": 242, "dover": 242, "1963": 242, "homogeneouscoeffbest": 242, "ode_1st_homogeneous_coeff_best_integr": 242, "homogeneous_differential_equ": 242, "firstlinear": 242, "linear_differential_equ": 242, "order_equation_with_variable_coeffici": 242, "rationalriccati": 242, "atleast": 242, "riccati_equ": 242, "thieu": 242, "vo": 242, "risc_5387": 242, "phdthesisthieu": 242, "secondlinearairi": 242, "secondlinearbessel": 242, "math24": 242, "bernoulli_differential_equ": 242, "goldstein": 242, "braun": 242, "maplesoft": 242, "aspx": 242, "odeadvisor": 242, "riccatispeci": 242, "__________________": 242, "eqworld": 242, "ipmnet": 242, "ru": 242, "ode0106": 242, "ode0123": 242, "nthlinearconstantcoeffhomogen": 242, "nth_linear_constant_coeff_homogeneous_integr": 242, "nonhomogeneous_equation_with_constant_coeffici": 242, "nthlinearconstantcoeffundeterminedcoeffici": 242, "method_of_undetermined_coeffici": 242, "221": 242, "nthlinearconstantcoeffvariationofparamet": 242, "variation_of_paramet": 242, "planetmath": 242, "variationofparamet": 242, "nthlineareulereqhomogen": 242, "equidimension": 242, "nth_linear_euler_eq_homogeneous_integr": 242, "sollist": 242, "93euler_equ": 242, "bender": 242, "orszag": 242, "scientist": 242, "nthlineareulereqnonhomogeneousvariationofparamet": 242, "nthlineareulereqnonhomogeneousundeterminedcoeffici": 242, "nthalgebra": 242, "nthorderreduc": 242, "caught": 242, "fault": 242, "almostlinear": 242, "first_linear": 242, "joel": 242, "mose": 242, "stormi": 242, "decad": 242, "august": [242, 261], "558": 242, "linearcoeffici": 242, "separablereduc": 242, "liegroup": 242, "secondhypergeometr": 242, "2f1": 242, "1f1": 242, "0f1": 242, "liouvillian": 242, "pfq": 242, "chan": 242, "cheb": 242, "terrab": 242, "ode_1st_power_seri": 242, "travi": 242, "walker": 242, "ode_2nd_power_series_ordinari": 242, "lamar": 242, "seriessolut": 242, "simmon": 242, "176": 242, "ode_2nd_power_series_regular": 242, "lie_heuristic_abaco1_simpl": 242, "duart": 242, "mota": 242, "lie_heuristic_abaco1_product": 242, "roch": 242, "lie_heuristic_bivari": 242, "329": 242, "lie_heuristic_chi": 242, "lie_heuristic_abaco2_similar": 242, "lie_heuristic_function_sum": 242, "lie_heuristic_abaco2_unique_unknown": 242, "lie_heuristic_abaco2_unique_gener": 242, "lie_heuristic_linear": 242, "gy": 242, "bh": 242, "impract": 242, "riccati_norm": 242, "riccati_inverse_norm": 242, "riccati_reduc": 242, "construct_c": 242, "construct_d": 242, "val_inf": 242, "valuat": 242, "rational_laurent_seri": 242, "compute_m_ybar": 242, "ybar": 242, "solve_aux_eq": 242, "numa": 242, "dena": 242, "numi": 242, "deni": 242, "remove_redundant_sol": 242, "sol1": 242, "sol2": 242, "get_gen_sol_from_part_sol": 242, "part_sol": 242, "haaheim": 242, "solve_riccati": 242, "gensol": 242, "_linear_2eq_order1_type6": 242, "_linear_2eq_order1_type7": 242, "fgp": 242, "bg": 242, "linear_ode_to_matrix": 242, "odeordererror": 242, "odenonlinearerror": 242, "eqs_mat": 242, "r856": 242, "matrix_differential_equ": 242, "canonical_od": 242, "canonical_eq": 242, "canonical_system": 242, "linodesolve_typ": 242, "linodesolv": 242, "type1": 242, "type2": 242, "type3": 242, "type4": 242, "type5": 242, "type6": 242, "type_of_equ": 242, "a_t": 242, "a_non_commut": 242, "matrix_exp_jordan_form": 242, "expj": 242, "matrix_exp": 242, "defect": 242, "p_invers": 242, "r857": 242, "defective_matrix": 242, "r858": 242, "r859": 242, "jordan_normal_form": 242, "comupt": 242, "r860": 242, "r861": 242, "matrix_exponenti": 242, "antiderv": 242, "subscheck": 242, "system_info": 242, "sol_vector": 242, "sol_vector_evalu": 242, "_nonlinear_2eq_order1_type1": 242, "_nonlinear_2eq_order1_type2": 242, "_nonlinear_2eq_order1_type3": 242, "autonom": 242, "_nonlinear_2eq_order1_type4": 242, "_nonlinear_2eq_order1_type5": 242, "clairaut": 242, "envelop": 242, "_nonlinear_3eq_order1_type1": 242, "enspac": [242, 245], "sysod": 242, "sode0401": 242, "_nonlinear_3eq_order1_type2": 242, "sode0402": 242, "_nonlinear_3eq_order1_type3": 242, "sode0404": 242, "_nonlinear_3eq_order1_type4": 242, "sode0405": 242, "_nonlinear_3eq_order1_type5": 242, "sode0406": 242, "_handle_integr": 242, "gather": 242, "unhind": 242, "wolphramalpha": 242, "detool": 242, "hint_integr": 242, "alphanumer": 242, "hinder": 242, "matching_hint": 242, "matchdict": 242, "1st_homogeneous_coeff": 242, "your_hint": 242, "pde_separ": 243, "uxt": 243, "pde_separate_add": 243, "pde_separate_mul": 243, "uxi": 243, "pdsolv": 243, "solvefun": 243, "classify_pd": 243, "test_pd": 243, "pde_hintnam": 243, "ux": 243, "1st_linear_constant_coeff_homogen": 243, "checkpdesol": 243, "_preprocess": 243, "inabl": 243, "_xi_1": 243, "pde_1st_linear_constant_coeff_homogen": 243, "viktor": 243, "grigoryan": 243, "124a": 243, "pde_1st_linear_constant_coeff": 243, "substack": 243, "1st_linear_constant_coeff_integr": 243, "pde_1st_linear_variable_coeff": 243, "du": 243, "inspir": [243, 298], "pde_hint": 243, "checksol": 244, "ect": 244, "attain": [244, 275], "star": [244, 264], "052": 244, "cov": 244, "pval": 244, "xval": 244, "rsolv": 244, "solve_linear": 244, "solve_linear_system": 244, "msymbol": 244, "solve_linear_system_lu": 244, "solve_undetermined_coeff": 244, "equ": 244, "73908513321516064165531208767387340401341175890076": 244, "steep": 244, "39267e": 244, "1684e": 244, "588469032184": 244, "315": 244, "730061685774": 244, "46792545969349058": 244, "inconclus": 244, "init": 244, "dissimilar": 244, "v_0": 244, "n_m": 244, "rsolve_poli": 244, "rsolve_ratio": 244, "r862": 244, "levelt": 244, "290": [244, 273], "296": 244, "r863": 244, "r864": 244, "r865": 244, "289": 244, "alembertian": 244, "r866": 244, "r867": 244, "polysi": 244, "solve_triangul": 244, "kalkbrenn": 244, "patrizia": 244, "teo": 244, "aaecc": 244, "simplex": 244, "lpmax": 244, "constr": 244, "exlud": 244, "infeasiblelperror": 244, "lpmin": 244, "unboundedlperror": 244, "a_eq": 244, "b_eq": 244, "lo": 244, "unconstrain": 244, "aeq": 244, "beq": 244, "argand": 245, "uncount": 245, "bizarr": 245, "her": 245, "sol_f": 245, "solveset_r": 245, "solveset_complex": 245, "methodologi": [245, 295], "_solve_real_trig": 245, "invert_r": 245, "invert_complex": 245, "_solve_rad": 245, "_solve_ab": 245, "_solve_as_r": 245, "_solve_as_poly_r": 245, "_solve_as_poly_complex": 245, "_solve_as_poli": 245, "gsoc": 245, "7abb76ffed50425299b9065129ae87261668a0f7": 245, "iamit": 245, "2948": 245, "6659": 245, "7523": 245, "sibx0afl3q": 245, "9696": 245, "inftyright": 245, "nright": 245, "0right": 245, "domain_check": 245, "3z": 245, "9z": 245, "nonlinearerror": 245, "cccc": 245, "eq3": 245, "eq4": 245, "391": 245, "_solve_system": 245, "_solve_using_known_valu": 245, "_transolv": 245, "_tsolv": 245, "tsolv": 245, "outright": 245, "interf": 245, "add_typ": 245, "_is_exponenti": 245, "new_eq": 245, "_solve_exponenti": 245, "_is_class": 245, "_solve_class": 245, "_solve_expo": 245, "9x": 245, "solve_expo": 245, "log_b": 245, "_solve_logarithm": 245, "solve_log": 245, "_is_logarithm": 245, "prebuilt": 246, "finiterv": 246, "varianc": 246, "dice": 246, "continuousrv": 246, "continuousdistributionhandmad": 246, "dist": 246, "discreterv": 246, "discretedistributionhandmad": 246, "pmf": 246, "finitedistributionhandmad": 246, "discreteuniform": 246, "randomsymbol": 246, "r868": 246, "discrete_uniform_distribut": 246, "r869": 246, "discreteuniformdistribut": 246, "d6": 246, "diedistribut": 246, "toss": 246, "r870": 246, "bernoulli_distribut": 246, "r871": 246, "bernoullidistribut": 246, "unfair": 246, "r872": 246, "coin_flip": 246, "binomialdistribut": 246, "r873": 246, "binomial_distribut": 246, "r874": 246, "betabinomi": 246, "r875": 246, "r876": 246, "betabinomialdistribut": 246, "marbl": 246, "r877": 246, "hypergeometric_distribut": 246, "r878": 246, "hypergeometricdistribut": 246, "700000000000000": 246, "r879": 246, "rademacher_distribut": 246, "r880": 246, "geometric_distribut": 246, "r881": 246, "geometricdistribut": 246, "r882": 246, "hermite_distribut": 246, "poisson": 246, "r883": 246, "poisson_distribut": 246, "r884": 246, "poissondistribut": 246, "r885": 246, "logarithmic_distribut": 246, "r886": 246, "logarithmicdistribut": 246, "negativebinomi": 246, "r887": 246, "negative_binomial_distribut": 246, "r888": 246, "negativebinomialdistribut": 246, "skellam": 246, "mu1": 246, "mu2": 246, "mu_1": 246, "mu_2": 246, "i_k": 246, "r889": 246, "skellam_distribut": 246, "yulesimon": 246, "yule": 246, "simon": 246, "r890": 246, "93simon_distribut": 246, "8100": 246, "r891": 246, "zeta_distribut": 246, "cdf": 246, "r892": 246, "arcsine_distribut": 246, "benini": 246, "r893": 246, "benini_distribut": 246, "r894": 246, "v8": 246, "beninidistribut": 246, "r895": 246, "beta_distribut": 246, "r896": 246, "betadistribut": 246, "betanoncentr": 246, "noncentr": 246, "r897": 246, "noncentral_beta_distribut": 246, "r898": 246, "noncentralbetadistribut": 246, "betaprim": 246, "r899": 246, "beta_prime_distribut": 246, "r900": 246, "betaprimedistribut": 246, "boundedpareto": 246, "pareto": 246, "r901": 246, "pareto_distribut": 246, "bounded_pareto_distribut": 246, "r902": 246, "cauchy_distribut": 246, "r903": 246, "cauchydistribut": 246, "r904": 246, "chi_distribut": 246, "r905": 246, "chidistribut": 246, "chinoncentr": 246, "r906": 246, "noncentral_chi_distribut": 246, "chisquar": 246, "r907": 246, "chi_squared_distribut": 246, "r908": 246, "squareddistribut": 246, "dagum": 246, "r909": 246, "dagum_distribut": 246, "davi": 246, "radiat": 246, "r910": 246, "davis_distribut": 246, "r911": 246, "davisdistribut": 246, "erlang": 246, "r912": 246, "erlang_distribut": 246, "r913": 246, "erlangdistribut": 246, "exgaussian": 246, "emg": 246, "r914": 246, "exponentially_modified_gaussian_distribut": 246, "quantil": 246, "r915": 246, "exponential_distribut": 246, "r916": 246, "exponentialdistribut": 246, "fdistribut": 246, "______________________________": 246, "r917": 246, "r918": 246, "fisherz": 246, "fisher": 246, "2d_1": 246, "d_1z": 246, "d_1e": 246, "r919": 246, "27s_z": 246, "r920": 246, "fishersz": 246, "frechet": 246, "r921": 246, "a9chet_distribut": 246, "r922": 246, "gamma_distribut": 246, "r923": 246, "gammadistribut": 246, "gammainvers": 246, "r924": 246, "gompertz": 246, "r925": 246, "gompertz_distribut": 246, "gumbel": 246, "r926": 246, "gumbeldistribut": 246, "r927": 246, "gumbel_distribut": 246, "r928": 246, "20200628222206": 246, "mathwav": 246, "easyfit": 246, "gumbel_max": 246, "r929": 246, "20200628222212": 246, "gumbel_min": 246, "kumaraswami": 246, "r930": 246, "kumaraswamy_distribut": 246, "r931": 246, "laplace_distribut": 246, "r932": 246, "laplacedistribut": 246, "r933": 246, "a9vy_distribut": 246, "r934": 246, "levydistribut": 246, "logist": 246, "r935": 246, "logistic_distribut": 246, "r936": 246, "logisticdistribut": 246, "loglogist": 246, "unimod": 246, "r937": 246, "lognorm": 246, "r938": 246, "r939": 246, "lognormaldistribut": 246, "lomax": 246, "r940": 246, "lomax_distribut": 246, "maxwel": 246, "r941": 246, "maxwell_distribut": 246, "r942": 246, "maxwelldistribut": 246, "moyal": 246, "r943": 246, "moyaldistribut": 246, "r944": 246, "rice": 246, "dobelman": 246, "textfil": 246, "distributionshandbook": 246, "nakagami": 246, "r945": 246, "nakagami_distribut": 246, "marginal_distribut": 246, "r946": 246, "normal_distribut": 246, "r947": 246, "normaldistributionfunct": 246, "xm": 246, "x_m": 246, "r948": 246, "r949": 246, "paretodistribut": 246, "powerfunct": 246, "r950": 246, "20200204081320": 246, "power_func": 246, "quadraticu": 246, "r951": 246, "quadratic_distribut": 246, "raisedcosin": 246, "r952": 246, "raised_cosine_distribut": 246, "r953": 246, "rayleigh_distribut": 246, "r954": 246, "rayleighdistribut": 246, "r955": 246, "reciprocal_distribut": 246, "studentt": 246, "r956": 246, "student_t": 246, "r957": 246, "studentst": 246, "shiftedgompertz": 246, "r958": 246, "shifted_gompertz_distribut": 246, "r959": 246, "trapezoidal_distribut": 246, "r960": 246, "triangular_distribut": 246, "r961": 246, "triangulardistribut": 246, "r962": 246, "uniform_distribution_": 246, "28continu": 246, "r963": 246, "uniformdistribut": 246, "uniformsum": 246, "irwin": 246, "r964": 246, "uniform_sum_distribut": 246, "r965": 246, "uniformsumdistribut": 246, "vonmis": 246, "mise": 246, "i_0": 246, "r966": 246, "von_mises_distribut": 246, "r967": 246, "vonmisesdistribut": 246, "wald": 246, "gaussianinvers": 246, "r968": 246, "inverse_gaussian_distribut": 246, "r969": 246, "inversegaussiandistribut": 246, "weibul": 246, "geq0": 246, "r970": 246, "weibull_distribut": 246, "r971": 246, "weibulldistribut": 246, "wignersemicircl": 246, "semicircl": 246, "frac2": 246, "r972": 246, "wigner_semicircle_distribut": 246, "r973": 246, "wignerssemicirclelaw": 246, "jointrv": 246, "_set": 246, "multivariatenorm": 246, "noninvert": 246, "ob": 246, "r974": 246, "multivariate_normal_distribut": 246, "multivariatelaplac": 246, "r975": 246, "multivariate_laplace_distribut": 246, "generalizedmultivariateloggamma": 246, "joint_rv_typ": 246, "gd": 246, "y_3": 246, "gmvlg": 246, "generalizedmultivariateloggammaomega": 246, "r976": 246, "generalized_multivariate_log": 246, "r977": 246, "234137346_on_a_multivariate_log": 246, "gamma_distribution_and_the_use_of_the_distribution_in_the_bayesian_analysi": 246, "correl": 246, "gmvlgo": 246, "r978": 246, "r979": 246, "r980": 246, "multinomial_distribut": 246, "r981": 246, "multinomialdistribut": 246, "multivariatebeta": 246, "r982": 246, "dirichlet_distribut": 246, "r983": 246, "dirichletdistribut": 246, "multivariateewen": 246, "ewen": 246, "r984": 246, "27s_sampling_formula": 246, "r985": 246, "280311472_the_ubiquitous_ewens_sampling_formula": 246, "multivariatet": 246, "negativemultinomi": 246, "n_c": 246, "r986": 246, "negative_multinomial_distribut": 246, "r987": 246, "normalgamma": 246, "r988": 246, "discretemarkovchain": 246, "state_spac": 246, "trans_prob": 246, "markov": 246, "characteris": 246, "transitionmatrixof": 246, "transition_prob": 246, "sunni": 246, "cloudi": 246, "raini": 246, "randomindexedsymbol": 246, "409": 246, "6963328": 246, "3096": 246, "query_gt": 246, "64705": 246, "r989": 246, "markov_chain": 246, "time_markov_chain": 246, "r990": 246, "20201230182007": 246, "dartmouth": 246, "teaching_aid": 246, "books_articl": 246, "probability_book": 246, "chapter11": 246, "canonical_form": 246, "transient": 246, "p_new": 246, "new_matrix": 246, "communication_class": 246, "r991": 246, "onlinelibrari": 246, "wilei": 246, "1002": 246, "9780470316887": 246, "app1": 246, "r992": 246, "columbia": 246, "ww2040": 246, "6711f12": 246, "lect1023big": 246, "is_recurr": 246, "tarjan": [246, 264], "r993": 246, "20220207032113": 246, "4701sum07": 246, "4701": 246, "mcii": 246, "r994": 246, "ceca": 246, "clemson": 246, "shierd": 246, "shier": 246, "r995": 246, "ujcont": 246, "uj": 246, "esploro": 246, "graduat": 246, "999849107691": 246, "r996": 246, "econ": 246, "dtmc": 246, "reccur": 246, "r997": 246, "absorbing_markov_chain": 246, "r998": 246, "brandei": 246, "igusa": 246, "math56as08": 246, "math56a_s08_notes015": 246, "fixed_row_vector": 246, "stationary_distribut": 246, "fundamental_matrix": 246, "r999": 246, "lip": 246, "limiting_distribut": 246, "condition_set": 246, "wm": 246, "r1000": 246, "probabilitycours": 246, "11_2_6_stationary_and_limiting_distribut": 246, "r1001": 246, "20210508104430": 246, "galton": 246, "uchicago": 246, "yibi": 246, "stat317": 246, "lecture4_6up": 246, "continuousmarkovchain": 246, "gen_mat": 246, "generator_matrix": 246, "45279": 246, "58602": 246, "37933": 246, "34211": 246, "7143": 246, "4002723175": 246, "6832579186": 246, "r1002": 246, "r1003": 246, "biu": 246, "il": 246, "amirgi": 246, "ctmcnote": 246, "bernoulliprocess": 246, "joint_distribut": 246, "jointdistributionhandmad": 246, "r1004": 246, "bernoulli_process": 246, "r1005": 246, "mathc": 246, "clarku": 246, "djoyc": 246, "ma217": 246, "given_condit": 246, "poissonprocess": 246, "648": 246, "r1006": 246, "11_0_0_intro": 246, "r1007": 246, "poisson_point_process": 246, "wiener": 246, "brownian": 246, "scottish": 246, "botanist": 246, "r1008": 246, "11_4_0_brownian_motion_wiener_process": 246, "r1009": 246, "wiener_process": 246, "gammaprocess": 246, "jump": [246, 302], "472": 246, "r1010": 246, "gamma_process": 246, "matrixgamma": 246, "scale_matrix": 246, "r1011": 246, "matrix_gamma_distribut": 246, "wishart": 246, "r1012": 246, "wishart_distribut": 246, "matrixnorm": 246, "location_matrix": 246, "scale_matrix_1": 246, "scale_matrix_2": 246, "r1013": 246, "matrix_normal_distribut": 246, "compound_rv": 246, "compounddistribut": 246, "crv_type": 246, "r1014": 246, "compound_probability_distribut": 246, "numsampl": 246, "evaluate_integr": 246, "r1015": 246, "entropy_": 246, "28information_theori": 246, "r1016": 246, "crmarsh": 246, "charles_marsh_continuous_entropi": 246, "r1017": 246, "entropypost": 246, "cexpr": 246, "coskew": 246, "sigma_": 246, "r1018": 246, "r1019": 246, "probability_distribut": 246, "randomst": 246, "die_rol": 246, "samp": 246, "pspace": 246, "samp_list": 246, "sam": 246, "42519758": 246, "40207856": 246, "94991743": 246, "85819627": 246, "83403519": 246, "9412172": 246, "85768055": 246, "38954165": 246, "11163337": 246, "3176591": 246, "79115232": 246, "63232916": 246, "01747268": 246, "96716083": 246, "sampling_p": 246, "sampling_": 246, "factorial_mo": 246, "r1020": 246, "r1021": 246, "factorialmo": 246, "kurtosi": 246, "outlier": 246, "sigma_x": 246, "r1022": 246, "r1023": 246, "asymmetri": 246, "pearson": 246, "sampling_dens": 246, "centralmo": 246, "cmoment": 246, "expectationmatrix": 246, "randommatrixsymbol": 246, "n11": 246, "n12": 246, "n21": 246, "n22": 246, "variancematrix": 246, "crosscovariancematrix": 246, "randomdomain": 246, "singledomain": 246, "singlepspac": 246, "productdomain": 246, "productpspac": 246, "conditionaldomain": 246, "frv": 246, "finitedomain": 246, "finitepspac": 246, "crv": 246, "continuousdomain": 246, "continuouspspac": 246, "diepspac": 246, "singlefinitepspac": 246, "normalpspac": 246, "singlecontinuouspspac": 246, "frv_type": 246, "randomvari": 246, "tactic": 246, "random_symbol": 246, "rs_swap": 246, "pspace1": 246, "pspace2": 246, "immutabledensendimarrai": 247, "tomatrix": 247, "j_m": 247, "i_a": 247, "i_b": 247, "sum_k": 247, "tensorcontract": [247, 248], "arraycontract": [247, 248], "tensordiagon": [247, 248], "derive_by_arrai": 247, "sum_m": 247, "immutablesparsendimarrai": 247, "mutabledensendimarrai": 247, "mutablesparsendimarrai": 247, "array_der": [247, 248], "index_order_old": [247, 248], "index_order_new": [247, 248], "cab": 247, "array_express": 247, "contraction_ax": 247, "diagonal_ax": 247, "arraydiagon": [247, 248], "arraysymbol": 248, "convert_indexed_to_arrai": 248, "arrayadd": 248, "convert_matrix_to_arrai": 248, "convert_array_to_matrix": 248, "expr_tr": 248, "contraction_indic": 248, "diagonal_indic": 248, "adi": 248, "from_array_to_matrix": 248, "ijklm": 248, "kijml": 248, "perm1": 248, "perm2": 248, "index_method": 250, "get_contraction_structur": [250, 251], "deepest": 250, "nested_contract": 250, "get_indic": [250, 251, 252, 253], "indexconformanceexcept": 250, "______": 251, "stem": 251, "dim1": 251, "dim2": 251, "qwerti": 251, "a_ij": 251, "b_ij": 251, "syntact": 251, "a_real": 251, "c_inherit": 251, "c_explicit": 251, "unrol": 251, "tensorindextyp": [252, 253], "eps_dim": 252, "metric_nam": 252, "su": 252, "lorentz": 252, "tensor_index_typ": 252, "is_up": 252, "tensor_inde_typ": 252, "typ": 252, "tensorhead": [252, 253], "index_typ": 252, "tensorsymmetri": 252, "monoterm": 252, "_tensormanag": 252, "set_comm": 252, "asym2": 252, "fully_symmetr": 252, "tensori": [252, 253], "e_z": 252, "no_symmetri": 252, "p_x": 252, "p_y": 252, "p_z": 252, "ipos1": 252, "ipos2": 252, "icomp1": 252, "icomp2": 252, "nameless": 252, "replacement_dict": 252, "free_arg": 252, "addend": 252, "canon_bp": 252, "contract_metr": 252, "contract_al": 252, "ipo": 252, "icomp": 252, "nonrep": 252, "dum": 252, "ext_rank": 252, "is_canon_bp": 252, "get_free_indic": [252, 253], "perm2tensor": 252, "tid": 252, "sorted_compon": 252, "riemann_cyclic_replac": 252, "riemann_cycl": 252, "cadabra": 252, "multiterm": 252, "bianchi": 252, "sym2": 252, "direct_product": 252, "monotorem": 252, "tableaux": 252, "tensortyp": 252, "repetit": [252, 264], "tensormanag": 252, "comm_i2symbol": 252, "comm_symbols2i": 252, "get_comm": 252, "gcomm": 252, "ghcomm": 252, "toper": 253, "partialderiv": 253, "valenc": 253, "uncontract": 253, "compa": 253, "compb": 253, "derivand": 253, "nocache_fail": 255, "expectedexcept": 255, "exceptioninfo": 255, "abort": 255, "9999": 255, "skip_under_pyodid": 255, "pyodid": 255, "warningcl": [255, 262], "randtest": 256, "portabl": [257, 258], "pytestreport": 257, "force_color": 257, "readlin": 257, "sympydoctestfind": 257, "doctestpars": 257, "exclude_empti": 257, "sympydoctestrunn": 257, "checker": 257, "optionflag": 257, "5140": 257, "doctestrunn": 257, "clear_glob": 257, "writer": 257, "garbag": 257, "check_output": 257, "report_": 257, "sympyoutputcheck": 257, "outputcheck": 257, "testrunn": 257, "sympytestresult": 257, "convert_to_native_path": 257, "lst": 257, "blacklist": 257, "get_sympy_dir": 257, "raise_on_deprec": 257, "deprecationwarn": [257, 262], "run_all_test": 257, "test_arg": 257, "test_kwarg": 257, "doctest_arg": 257, "doctest_kwarg": 257, "examples_arg": 257, "examples_kwarg": 257, "run_in_subprocess_with_hash_random": 257, "function_kwarg": 257, "hostedtoolcach": 257, "x64": 257, "_test": 257, "split_list": 257, "sympytestfil": 257, "module_rel": 257, "extraglob": 257, "raise_on_error": 257, "basenam": [257, 258, 259], "slate": 257, "dont_accept_true_for_1": 257, "dont_accept_blanklin": 257, "normalize_whitespac": 257, "ellipsi": [257, 265], "ignore_exception_detail": 257, "report_udiff": 257, "report_cdiff": 257, "report_ndiff": 257, "report_only_first_failur": 257, "mortem": 257, "tomfooleri": 257, "testmod": 257, "tester": 257, "fiddl": [257, 302], "timeout": 257, "keyboardinterrupt": 257, "interrupt": 257, "_basic": 257, "kw": 257, "test_equ": 257, "pdb": 257, "pipe": 257, "time_bal": 257, "tandem": 258, "matvec": 258, "codewrapp": 258, "distutil": 258, "fwrap": 258, "swig": 258, "binary_cal": 258, "22925376": 258, "25165824": 258, "_imp_": [258, 265], "filepath": 258, "cythoncodewrapp": 258, "dump_pyx": 258, "dummywrapp": 258, "f2pycodewrapp": 258, "ufuncifycodewrapp": 258, "dump_c": [258, 259], "code_gen": [258, 259], "argument_tupl": 258, "include_dir": 258, "library_dir": 258, "extra_compile_arg": 258, "extra_link_arg": 258, "symfunc": [258, 265], "funtion_nam": 258, "ndimension": 258, "f_fortran": 258, "f_cython": 258, "r1024": 258, "fortran77": 259, "fortran90": 259, "julia": 259, "rust": 259, "mileston": 259, "unsurmount": 259, "pyf": 259, "inputoutput": 259, "tcc": 259, "libtcc": 259, "date": 259, "hostnam": 259, "sha1": 259, "ccodegen": 259, "preprocessor_stat": 259, "dump_h": 259, "guard": 259, "get_prototyp": 259, "codegenerror": 259, "function_prototyp": 259, "dump_cod": 259, "cname": 259, "fname": 259, "pynam": 259, "jlname": 259, "octnam": 259, "rsname": 259, "fcodegen": 259, "f90": 259, "dump_f95": 259, "get_interfac": 259, "juliacodegen": 259, "dump_jl": 259, "octavecodegen": 259, "dump_m": 259, "returnvalu": 259, "destin": 259, "local_var": 259, "result_vari": 259, "unnam": 259, "rustcodegen": 259, "dump_r": 259, "f_result": 259, "myfcn": 259, "fcn2": 259, "myfcn_result": 259, "void": 259, "get_default_datatyp": 259, "complex_allow": 259, "agnost": 259, "conserve_mpmath_dp": 260, "disable_view": 260, "python_vers": 260, "ground_typ": 260, "memoize_properti": 260, "propfunc": 260, "no_attrs_in_subclass": 260, "__all__": 260, "some_funct": 260, "thread": 260, "xthread": 260, "threaded_factori": 260, "use_add": 260, "multiset_partitions_taocp": 261, "visitor": 261, "pstack": 261, "lpart": 261, "topmost": 261, "partcompon": 261, "peek": [261, 302], "unpredict": 261, "list_visitor": 261, "abb": [261, 264], "factoring_visitor": 261, "multisetpartitiontravers": 261, "aocp": 261, "count_partit": 261, "127750": 261, "686": 261, "4a": 261, "factorisatio": 261, "oppenheim": 261, "numerorum": 261, "canfield": 261, "erdo": 261, "OF": 261, "yorgei": 261, "monad": 261, "persist": 261, "288716": 261, "memoiz": [261, 263, 289], "dramat": 261, "hypothet": 261, "borrow": 261, "coalesc": 261, "_rang": 261, "brain": 261, "histogram": 261, "enum_al": 261, "enum_larg": 261, "enum_rang": 261, "enum_smal": 261, "ub": 261, "catch_warn": 262, "simplefilt": 262, "dedent": [262, 267], "miscellan": [263, 289], "notiter": 264, "binary_partit": 264, "r1025": 264, "taocp": 264, "nx": 264, "common_prefix": 264, "common_suffix": 264, "unhash": 264, "r1026": 264, "component_": 264, "28graph_theori": 264, "r1027": 264, "27s_strongly_connected_components_algorithm": 264, "dict_merg": 264, "filter_symbol": 264, "myop": 264, "kog": 264, "informatik": 264, "hamburg": 264, "mein": 264, "python_trick": 264, "neighbor": 264, "xxxxxx": 264, "xxxx": 264, "r1028": 264, "method_ring": 264, "r1029": 264, "4856615": 264, "4857018": 264, "r1030": 264, "20160313023044": 264, "programminggeek": 264, "r1031": 264, "steinhau": 264, "93johnson": 264, "93trotter_algorithm": 264, "r1032": 264, "involut": 264, "eco": 264, "vajnovszki": 264, "dmtc": 264, "generate_involut": 264, "r1033": 264, "permutationinvolut": 264, "generate_oriented_forest": 264, "forest": 264, "acycl": 264, "r1034": 264, "beyer": 264, "hedetniemi": 264, "novemb": 264, "r1035": 264, "1633833": 264, "has_dup": 264, "has_varieti": 264, "iproduct": 264, "abcbb": 264, "is_sequ": 264, "generatortyp": 264, "_iter": 264, "kbin": 264, "ordered_flag": 264, "least_rot": 264, "rotate_left": 264, "r1036": 264, "lexicographically_minimal_string_rot": 264, "minlex": 264, "acb": 264, "11010011000": 264, "00011010011": 264, "00011001011": 264, "aaa": 264, "abi": 264, "bby": 264, "abracadabra": 264, "banana": 264, "multiset_derang": 264, "uniq": 264, "1233": 264, "3312": 264, "3321": 264, "aba": 264, "baa": 264, "bead": 264, "ooo": 264, "r1037": 264, "r1038": 264, "carla": 264, "savag": 264, "terri": 264, "yih": 264, "414": 264, "430": 264, "0196": 264, "6774": 264, "90047": 264, "ordered_partit": 264, "r1039": 264, "jeromekelleh": 264, "r1040": 264, "jerom": 264, "kelleh": 264, "barri": 264, "sullivan": 264, "0909": 264, "2331v2": 264, "r1041": 264, "activest": 264, "218332": 264, "random_derang": 264, "reseed": 264, "rotate_right": 264, "roundrobin": 264, "ef": 264, "credit": 264, "sakki": 264, "sequence_partit": 264, "kleen": 264, "enricogiampieri": 264, "13131491": 264, "sequence_partitions_empti": 264, "keyfunc": 264, "subgraph": 264, "r1042": 264, "r1043": 264, "r1044": 264, "unflatten": 264, "bcd": 264, "afunc": 265, "lambdastr": 265, "dummifi": 265, "use_imp": 265, "docstring_limit": 265, "custom_sin": 265, "spent": 265, "38177329": 265, "49315059": 265, "8414709848078965": 265, "enable_eager_execut": 265, "eagertensor": 265, "placehold": 265, "user_guid": 265, "runtimewarn": 265, "sin_cos_sympi": 265, "sin_co": 265, "sin_cos_numpi": 265, "38177329068": 265, "module_dictionari": 265, "getsourc": 265, "_lambdifygener": 265, "__globals__": 265, "lambdaprint": 265, "90929743": [265, 291], "assoc_recurrence_memo": 266, "base_seq": 266, "memo": 266, "pn0": 266, "recurrence_memo": 266, "specfun": 266, "__index__": 267, "sanit": 267, "99999999999999991611392": 267, "debug_decor": 267, "debugf": 267, "fillded": 267, "strline": 267, "rawlin": 267, "find_execut": 267, "pathsep": 267, "pastabl": 267, "bee": 267, "spamham": 267, "sha": 267, "egg": 267, "md5": 267, "eggsham": 267, "r1045": 267, "6116978": 267, "substr": 267, "roken": 267, "deletechar": 267, "multicharact": 267, "oldchar": 267, "newchar": 267, "get_class": 268, "lookup_view": 268, "get_mod_func": 268, "callback": 268, "timeutil": 269, "coordsysrect": 270, "coordsys3d": [270, 272, 273, 274, 276, 277, 280], "rotation_matrix": [270, 272, 275], "vector_nam": 270, "variable_nam": [270, 277], "latex_vect": 270, "pretty_vect": 270, "latex_scalar": 270, "pretty_scalar": 270, "new_system": 270, "create_new": [270, 275], "transformation_to_par": 270, "transformation_from_par": 270, "locate_new": [270, 273, 274, 275, 276, 277], "position_wrt": [270, 274, 275, 276], "orient_new": [270, 272], "axisorient": [270, 272, 275], "axis_orient": [270, 275], "bodyorient": [270, 272, 275], "body_orient": [270, 272, 275], "spaceorient": [270, 272, 275], "space_orient": [270, 272], "quaternionorient": [270, 272, 275], "q_orient": [270, 272], "orient_new_axi": [270, 273, 275], "orient_new_bodi": [270, 275], "angle1": [270, 272], "angle2": [270, 272], "angle3": [270, 272], "euler_angl": [270, 272], "orient_new_quaternion": [270, 275], "orient_new_spac": [270, 275], "coordsyrect": 270, "v_a": 270, "v_b": 270, "scalar_map": 270, "basevector": [270, 274, 275], "delop": [270, 276, 277], "r1046": 270, "r1047": 270, "basedyad": [270, 274], "second_system": 270, "deloper": [270, 278], "parametricregion": [270, 273, 280], "implicitregion": [270, 273, 280], "parabola": 270, "rational_parametr": 270, "singular_point": 270, "regular_point": 270, "reg_point": 270, "cubic_curv": 270, "calulc": 270, "hoffmann": 270, "purdu": 270, "lib": 270, "cgi": 270, "viewcont": 270, "1827": 270, "cstech": 270, "erik": 270, "hillgart": 270, "diploma": 270, "linz": 270, "universitat": 270, "risc_1355": 270, "20point": 270, "20on": 270, "20conic": 270, "parametricintegr": 270, "semispher": [270, 280], "axis_orienter1": 272, "axis_orienter2": 272, "axis_orienter3": 272, "body_orienter1": 272, "body_orienter2": 272, "body_orienter3": 272, "matrix_to_vector": 273, "system2": 273, "vector_integr": [273, 280], "essenc": 274, "vectormul": 274, "vectoradd": 274, "ofcours": 274, "vectorzero": 274, "expressli": 274, "express_coordin": [274, 275], "dyadicmul": 274, "dyadicadd": 274, "cleanest": 275, "orient_new_": 275, "basescalar": [275, 277], "oabc": 276, "oa": 276, "pq": 276, "sr": 276, "wikidel": 276, "ffield": 276, "gradient_field": 277, "instantan": 277, "directional_deriv": 277, "lame": 277, "dyadicproduct": 278, "quantifi": 279, "necesssari": 280, "param_circl": 280, "implicit_circl": 280, "obextj": 280, "solidspher": 280, "lamina": 280, "\ud835\udc45": 280, "vectorfield": 280, "hemispher": 280, "top_fac": 280, "bottom_fac": 280, "27_theorem": 280, "cone": 280, "divergence_theorem": 280, "12288": 280, "truss": 287, "cabl": 287, "str_expr": 291, "82842712474619": 291, "141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117068": 291, "0874989834394464": 291, "roundoff": 291, "14112001": 291, "7568025": 291, "95892427": 291, "2794155": 291, "6569866": 291, "98935825": 291, "41211849": 291, "0998334166468": 291, "sympy_nam": 291, "numerical_funct": 291, "rephras": 292, "oh": 292, "integration_vari": 292, "dfdx": 292, "equidistantli": 292, "d2fdx2": 292, "django": 294, "oop": 294, "crazi": 294, "abcdef": 294, "reevalu": 294, "infal": 294, "entertain": 295, "preliminari": 295, "82842712475": 296, "cass": 296, "wrote": [296, 297], "theme": 296, "expanded_expr": 296, "whet": 296, "appetit": 296, "c\u2082": [296, 303], "c\u2081": [296, 303], "\u03bd": 296, "sell": 296, "battl": 296, "confid": 296, "gigabyt": 296, "tear": 297, "stopper": 297, "uexpr": 297, "algebraic_multipl": 298, "pdp": 298, "undertest": 298, "underevalu": 298, "my_iszero": 298, "stronger": 298, "tradeoff": 298, "wonder": 298, "5b7c3e8ee5b40332abdb206c": 298, "15141": 298, "19548": 298, "10120": 298, "10279": 298, "constant_problem": 298, "possiblezeroq": 298, "20200307091449": 298, "mupad_ref": 298, "iszero": 298, "congratul": 299, "decent": 300, "austin": 300, "javascript": 301, "bvar": 301, "unnecessarili": 302, "whittl": 302, "catchal": 302, "collected_expr": 302, "cdot1": 302, "undertak": 302, "undon": 302, "cdot2": 302, "nck": 302, "pronounc": 302, "_2f_1": 302, "cfrac": 302, "list_to_frac": 302, "a\u2080": 302, "a\u2084": 302, "pointless": 302, "orig_frac": 302, "diffeq": 303}, "objects": {"": [[38, 0, 0, "-", "sympy"]], "sympy": [[40, 0, 0, "-", "abc"], [41, 0, 0, "-", "algebras"], [44, 0, 0, "-", "assumptions"], [47, 0, 0, "-", "calculus"], [48, 0, 0, "-", "categories"], [70, 0, 0, "-", "diffgeom"], [71, 0, 0, "-", "discrete"], [75, 0, 0, "-", "functions"], [88, 0, 0, "-", "holonomic"], [95, 0, 0, "-", "integrals"], [96, 0, 0, "-", "interactive"], [97, 0, 0, "-", "liealgebras"], [98, 0, 0, "-", "logic"], [103, 0, 0, "-", "matrices"], [110, 0, 0, "-", "parsing"], [287, 0, 0, "-", "physics"], [222, 0, 0, "-", "polys"], [244, 0, 0, "-", "solvers"], [246, 0, 0, "-", "stats"], [249, 0, 0, "-", "tensor"], [254, 0, 0, "-", "testing"], [263, 0, 0, "-", "utilities"], [278, 0, 0, "-", "vector"]], "sympy.algebras": [[41, 1, 1, "", "Quaternion"]], "sympy.algebras.Quaternion": [[41, 2, 1, "", "add"], [41, 2, 1, "", "angle"], [41, 2, 1, "", "arc_coplanar"], [41, 2, 1, "", "axis"], [41, 2, 1, "", "exp"], [41, 2, 1, "", "from_Matrix"], [41, 2, 1, "", "from_axis_angle"], [41, 2, 1, "", "from_euler"], [41, 2, 1, "", "from_rotation_matrix"], [41, 2, 1, "", "index_vector"], [41, 2, 1, "", "integrate"], [41, 2, 1, "", "inverse"], [41, 2, 1, "", "is_pure"], [41, 2, 1, "", "is_zero_quaternion"], [41, 2, 1, "", "mensor"], [41, 2, 1, "", "mul"], [41, 2, 1, "", "norm"], [41, 2, 1, "", "normalize"], [41, 2, 1, "", "orthogonal"], [41, 2, 1, "", "parallel"], [41, 2, 1, "", "pow"], [41, 2, 1, "", "pow_cos_sin"], [41, 3, 1, "", "product_matrix_left"], [41, 3, 1, "", "product_matrix_right"], [41, 2, 1, "", "rotate_point"], [41, 2, 1, "", "scalar_part"], [41, 2, 1, "", "set_norm"], [41, 2, 1, "", "to_Matrix"], [41, 2, 1, "", "to_axis_angle"], [41, 2, 1, "", "to_euler"], [41, 2, 1, "", "to_rotation_matrix"], [41, 2, 1, "", "vector_coplanar"], [41, 2, 1, "", "vector_part"]], "sympy.assumptions": [[42, 0, 0, "-", "ask"], [43, 0, 0, "-", "assume"], [45, 0, 0, "-", "predicates"], [46, 0, 0, "-", "refine"]], "sympy.assumptions.ask": [[42, 1, 1, "", "AssumptionKeys"], [42, 4, 1, "", "ask"], [42, 4, 1, "", "register_handler"], [42, 4, 1, "", "remove_handler"]], "sympy.assumptions.assume": [[43, 1, 1, "", "AppliedPredicate"], [43, 1, 1, "", "AssumptionsContext"], [43, 1, 1, "", "Predicate"], [43, 1, 1, "", "UndefinedPredicate"], [43, 4, 1, "", "assuming"]], "sympy.assumptions.assume.AppliedPredicate": [[43, 3, 1, "", "arg"], [43, 3, 1, "", "arguments"], [43, 3, 1, "", "function"]], "sympy.assumptions.assume.AssumptionsContext": [[43, 2, 1, "", "add"]], "sympy.assumptions.assume.Predicate": [[43, 2, 1, "", "eval"], [43, 5, 1, "", "handler"], [43, 2, 1, "", "register"], [43, 2, 1, "", "register_many"]], "sympy.assumptions.predicates.calculus": [[45, 1, 1, "", "FinitePredicate"], [45, 1, 1, "", "InfinitePredicate"]], "sympy.assumptions.predicates.calculus.FinitePredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.calculus.InfinitePredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.common": [[45, 1, 1, "", "CommutativePredicate"], [45, 1, 1, "", "IsTruePredicate"]], "sympy.assumptions.predicates.common.CommutativePredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.common.IsTruePredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices": [[45, 1, 1, "", "ComplexElementsPredicate"], [45, 1, 1, "", "DiagonalPredicate"], [45, 1, 1, "", "FullRankPredicate"], [45, 1, 1, "", "IntegerElementsPredicate"], [45, 1, 1, "", "InvertiblePredicate"], [45, 1, 1, "", "LowerTriangularPredicate"], [45, 1, 1, "", "NormalPredicate"], [45, 1, 1, "", "OrthogonalPredicate"], [45, 1, 1, "", "PositiveDefinitePredicate"], [45, 1, 1, "", "RealElementsPredicate"], [45, 1, 1, "", "SingularPredicate"], [45, 1, 1, "", "SquarePredicate"], [45, 1, 1, "", "SymmetricPredicate"], [45, 1, 1, "", "TriangularPredicate"], [45, 1, 1, "", "UnitTriangularPredicate"], [45, 1, 1, "", "UnitaryPredicate"], [45, 1, 1, "", "UpperTriangularPredicate"]], "sympy.assumptions.predicates.matrices.ComplexElementsPredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.DiagonalPredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.FullRankPredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.IntegerElementsPredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.InvertiblePredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.LowerTriangularPredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.NormalPredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.OrthogonalPredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.PositiveDefinitePredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.RealElementsPredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.SingularPredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.SquarePredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.SymmetricPredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.TriangularPredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.UnitTriangularPredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.UnitaryPredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.UpperTriangularPredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.ntheory": [[45, 1, 1, "", "CompositePredicate"], [45, 1, 1, "", "EvenPredicate"], [45, 1, 1, "", "OddPredicate"], [45, 1, 1, "", "PrimePredicate"]], "sympy.assumptions.predicates.ntheory.CompositePredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.ntheory.EvenPredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.ntheory.OddPredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.ntheory.PrimePredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order": [[45, 1, 1, "", "NegativePredicate"], [45, 1, 1, "", "NonNegativePredicate"], [45, 1, 1, "", "NonPositivePredicate"], [45, 1, 1, "", "NonZeroPredicate"], [45, 1, 1, "", "PositivePredicate"], [45, 1, 1, "", "ZeroPredicate"]], "sympy.assumptions.predicates.order.NegativePredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order.NonNegativePredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order.NonPositivePredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order.NonZeroPredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order.PositivePredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order.ZeroPredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets": [[45, 1, 1, "", "AlgebraicPredicate"], [45, 1, 1, "", "AntihermitianPredicate"], [45, 1, 1, "", "ComplexPredicate"], [45, 1, 1, "", "ExtendedRealPredicate"], [45, 1, 1, "", "HermitianPredicate"], [45, 1, 1, "", "ImaginaryPredicate"], [45, 1, 1, "", "IntegerPredicate"], [45, 1, 1, "", "IrrationalPredicate"], [45, 1, 1, "", "RationalPredicate"], [45, 1, 1, "", "RealPredicate"], [45, 1, 1, "", "TranscendentalPredicate"]], "sympy.assumptions.predicates.sets.AlgebraicPredicate": [[45, 5, 1, "", "AlgebraicHandler"], [45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.AntihermitianPredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.ComplexPredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.ExtendedRealPredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.HermitianPredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.ImaginaryPredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.IntegerPredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.IrrationalPredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.RationalPredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.RealPredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.TranscendentalPredicate": [[45, 5, 1, "", "handler"]], "sympy.assumptions.refine": [[46, 4, 1, "", "refine"], [46, 4, 1, "", "refine_Pow"], [46, 4, 1, "", "refine_abs"], [46, 4, 1, "", "refine_arg"], [46, 4, 1, "", "refine_atan2"], [46, 4, 1, "", "refine_im"], [46, 4, 1, "", "refine_matrixelement"], [46, 4, 1, "", "refine_re"], [46, 4, 1, "", "refine_sign"]], "sympy.calculus": [[47, 0, 0, "-", "euler"], [47, 0, 0, "-", "finite_diff"], [47, 0, 0, "-", "singularities"], [47, 0, 0, "-", "util"]], "sympy.calculus.euler": [[47, 4, 1, "", "euler_equations"]], "sympy.calculus.finite_diff": [[47, 4, 1, "", "apply_finite_diff"], [47, 4, 1, "", "differentiate_finite"], [47, 4, 1, "", "finite_diff_weights"]], "sympy.calculus.singularities": [[47, 4, 1, "", "is_decreasing"], [47, 4, 1, "", "is_increasing"], [47, 4, 1, "", "is_monotonic"], [47, 4, 1, "", "is_strictly_decreasing"], [47, 4, 1, "", "is_strictly_increasing"], [47, 4, 1, "", "monotonicity_helper"], [47, 4, 1, "", "singularities"]], "sympy.calculus.util": [[47, 4, 1, "", "continuous_domain"], [47, 4, 1, "", "function_range"], [47, 4, 1, "", "is_convex"], [47, 4, 1, "", "lcim"], [47, 4, 1, "", "maximum"], [47, 4, 1, "", "minimum"], [47, 4, 1, "", "not_empty_in"], [47, 4, 1, "", "periodicity"], [47, 4, 1, "", "stationary_points"]], "sympy.categories": [[48, 1, 1, "", "Category"], [48, 1, 1, "", "CompositeMorphism"], [48, 1, 1, "", "Diagram"], [48, 1, 1, "", "IdentityMorphism"], [48, 1, 1, "", "Morphism"], [48, 1, 1, "", "NamedMorphism"], [48, 1, 1, "", "Object"], [48, 0, 0, "-", "diagram_drawing"]], "sympy.categories.Category": [[48, 3, 1, "", "commutative_diagrams"], [48, 3, 1, "", "name"], [48, 3, 1, "", "objects"]], "sympy.categories.CompositeMorphism": [[48, 3, 1, "", "codomain"], [48, 3, 1, "", "components"], [48, 3, 1, "", "domain"], [48, 2, 1, "", "flatten"]], "sympy.categories.Diagram": [[48, 3, 1, "", "conclusions"], [48, 2, 1, "", "hom"], [48, 2, 1, "", "is_subdiagram"], [48, 3, 1, "", "objects"], [48, 3, 1, "", "premises"], [48, 2, 1, "", "subdiagram_from_objects"]], "sympy.categories.Morphism": [[48, 3, 1, "", "codomain"], [48, 2, 1, "", "compose"], [48, 3, 1, "", "domain"]], "sympy.categories.NamedMorphism": [[48, 3, 1, "", "name"]], "sympy.categories.diagram_drawing": [[48, 1, 1, "", "ArrowStringDescription"], [48, 1, 1, "", "DiagramGrid"], [48, 1, 1, "", "XypicDiagramDrawer"], [48, 4, 1, "", "preview_diagram"], [48, 4, 1, "", "xypic_draw_diagram"]], "sympy.categories.diagram_drawing.DiagramGrid": [[48, 3, 1, "", "height"], [48, 3, 1, "", "morphisms"], [48, 3, 1, "", "width"]], "sympy.categories.diagram_drawing.XypicDiagramDrawer": [[48, 2, 1, "", "draw"]], "sympy.codegen": [[49, 0, 0, "-", "algorithms"], [49, 0, 0, "-", "approximations"], [49, 0, 0, "-", "ast"], [49, 0, 0, "-", "cfunctions"], [49, 0, 0, "-", "cnodes"], [49, 0, 0, "-", "cutils"], [49, 0, 0, "-", "cxxnodes"], [49, 0, 0, "-", "fnodes"], [49, 0, 0, "-", "futils"], [49, 0, 0, "-", "matrix_nodes"], [49, 0, 0, "-", "pyutils"], [49, 0, 0, "-", "rewriting"]], "sympy.codegen.algorithms": [[49, 4, 1, "", "newtons_method"], [49, 4, 1, "", "newtons_method_function"]], "sympy.codegen.approximations": [[49, 1, 1, "", "SeriesApprox"], [49, 1, 1, "", "SumApprox"]], "sympy.codegen.ast": [[49, 1, 1, "", "Assignment"], [49, 1, 1, "", "AssignmentBase"], [49, 1, 1, "", "Attribute"], [49, 1, 1, "", "AugmentedAssignment"], [49, 1, 1, "", "BreakToken"], [49, 1, 1, "", "CodeBlock"], [49, 1, 1, "", "Comment"], [49, 1, 1, "", "ComplexType"], [49, 1, 1, "", "ContinueToken"], [49, 1, 1, "", "Declaration"], [49, 1, 1, "", "Element"], [49, 1, 1, "", "FloatBaseType"], [49, 1, 1, "", "FloatType"], [49, 1, 1, "", "For"], [49, 1, 1, "", "FunctionCall"], [49, 1, 1, "", "FunctionDefinition"], [49, 1, 1, "", "FunctionPrototype"], [49, 1, 1, "", "IntBaseType"], [49, 1, 1, "", "Node"], [49, 1, 1, "", "NoneToken"], [49, 1, 1, "", "Pointer"], [49, 1, 1, "", "Print"], [49, 1, 1, "", "QuotedString"], [49, 1, 1, "", "Raise"], [49, 1, 1, "", "Return"], [49, 1, 1, "", "RuntimeError_"], [49, 1, 1, "", "Scope"], [49, 1, 1, "", "SignedIntType"], [49, 1, 1, "", "Stream"], [49, 1, 1, "", "String"], [49, 1, 1, "", "Token"], [49, 1, 1, "", "Type"], [49, 1, 1, "", "UnsignedIntType"], [49, 1, 1, "", "Variable"], [49, 1, 1, "", "While"], [49, 4, 1, "", "aug_assign"]], "sympy.codegen.ast.CodeBlock": [[49, 2, 1, "", "cse"], [49, 2, 1, "", "topological_sort"]], "sympy.codegen.ast.FloatBaseType": [[49, 5, 1, "", "cast_nocheck"]], "sympy.codegen.ast.FloatType": [[49, 2, 1, "", "cast_nocheck"], [49, 3, 1, "", "decimal_dig"], [49, 3, 1, "", "dig"], [49, 3, 1, "", "eps"], [49, 3, 1, "", "max"], [49, 3, 1, "", "max_exponent"], [49, 3, 1, "", "min_exponent"], [49, 3, 1, "", "tiny"]], "sympy.codegen.ast.Node": [[49, 2, 1, "", "attr_params"]], "sympy.codegen.ast.Token": [[49, 2, 1, "", "kwargs"]], "sympy.codegen.ast.Type": [[49, 2, 1, "", "cast_check"], [49, 2, 1, "", "from_expr"]], "sympy.codegen.ast.Variable": [[49, 2, 1, "", "as_Declaration"], [49, 2, 1, "", "deduced"]], "sympy.codegen.cfunctions": [[49, 1, 1, "", "Cbrt"], [49, 1, 1, "", "Sqrt"], [49, 1, 1, "", "exp2"], [49, 1, 1, "", "expm1"], [49, 1, 1, "", "fma"], [49, 1, 1, "", "hypot"], [49, 1, 1, "", "log10"], [49, 1, 1, "", "log1p"], [49, 1, 1, "", "log2"]], "sympy.codegen.cfunctions.Cbrt": [[49, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.Sqrt": [[49, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.exp2": [[49, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.expm1": [[49, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.fma": [[49, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.hypot": [[49, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.log10": [[49, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.log1p": [[49, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.log2": [[49, 2, 1, "", "fdiff"]], "sympy.codegen.cnodes": [[49, 1, 1, "", "CommaOperator"], [49, 1, 1, "", "Label"], [49, 1, 1, "", "PostDecrement"], [49, 1, 1, "", "PostIncrement"], [49, 1, 1, "", "PreDecrement"], [49, 1, 1, "", "PreIncrement"], [49, 4, 1, "", "alignof"], [49, 1, 1, "", "goto"], [49, 4, 1, "", "sizeof"], [49, 1, 1, "", "struct"], [49, 1, 1, "", "union"]], "sympy.codegen.cutils": [[49, 4, 1, "", "render_as_source_file"]], "sympy.codegen.cxxnodes": [[49, 1, 1, "", "using"]], "sympy.codegen.fnodes": [[49, 1, 1, "", "ArrayConstructor"], [49, 1, 1, "", "Do"], [49, 1, 1, "", "Extent"], [49, 1, 1, "", "FortranReturn"], [49, 1, 1, "", "GoTo"], [49, 1, 1, "", "ImpliedDoLoop"], [49, 1, 1, "", "Module"], [49, 1, 1, "", "Program"], [49, 1, 1, "", "Subroutine"], [49, 1, 1, "", "SubroutineCall"], [49, 4, 1, "", "allocated"], [49, 4, 1, "", "array"], [49, 4, 1, "", "bind_C"], [49, 1, 1, "", "cmplx"], [49, 4, 1, "", "dimension"], [49, 1, 1, "", "dsign"], [49, 1, 1, "", "isign"], [49, 1, 1, "", "kind"], [49, 4, 1, "", "lbound"], [49, 1, 1, "", "literal_dp"], [49, 1, 1, "", "literal_sp"], [49, 1, 1, "", "merge"], [49, 4, 1, "", "reshape"], [49, 4, 1, "", "shape"], [49, 4, 1, "", "size"], [49, 1, 1, "", "use"], [49, 1, 1, "", "use_rename"]], "sympy.codegen.futils": [[49, 4, 1, "", "render_as_module"]], "sympy.codegen.matrix_nodes": [[49, 1, 1, "", "MatrixSolve"]], "sympy.codegen.pyutils": [[49, 4, 1, "", "render_as_module"]], "sympy.codegen.rewriting": [[49, 1, 1, "", "FuncMinusOneOptim"], [49, 1, 1, "", "Optimization"], [49, 1, 1, "", "ReplaceOptim"], [49, 4, 1, "", "create_expand_pow_optimization"], [49, 4, 1, "", "optimize"]], "sympy.codegen.rewriting.FuncMinusOneOptim": [[49, 2, 1, "", "replace_in_Add"]], "sympy.combinatorics": [[51, 0, 0, "-", "galois"], [60, 0, 0, "-", "generators"], [52, 0, 0, "-", "graycode"], [53, 0, 0, "-", "group_constructs"], [54, 0, 0, "-", "group_numbers"], [56, 0, 0, "-", "named_groups"], [57, 0, 0, "-", "partitions"], [59, 0, 0, "-", "perm_groups"], [60, 0, 0, "-", "permutations"], [61, 0, 0, "-", "polyhedron"], [62, 0, 0, "-", "prufer"], [63, 0, 0, "-", "subsets"], [64, 0, 0, "-", "tensor_can"], [65, 0, 0, "-", "testutil"], [66, 0, 0, "-", "util"]], "sympy.combinatorics.galois": [[51, 4, 1, "", "A4_in_S6"], [51, 4, 1, "", "A4xC2"], [51, 4, 1, "", "G18"], [51, 4, 1, "", "G36m"], [51, 4, 1, "", "G36p"], [51, 4, 1, "", "G72"], [51, 4, 1, "", "M20"], [51, 4, 1, "", "PGL2F5"], [51, 4, 1, "", "PSL2F5"], [51, 1, 1, "", "S1TransitiveSubgroups"], [51, 1, 1, "", "S2TransitiveSubgroups"], [51, 1, 1, "", "S3TransitiveSubgroups"], [51, 4, 1, "", "S3_in_S6"], [51, 1, 1, "", "S4TransitiveSubgroups"], [51, 4, 1, "", "S4m"], [51, 4, 1, "", "S4p"], [51, 4, 1, "", "S4xC2"], [51, 1, 1, "", "S5TransitiveSubgroups"], [51, 1, 1, "", "S6TransitiveSubgroups"], [51, 4, 1, "", "find_transitive_subgroups_of_S6"], [51, 4, 1, "", "four_group"]], "sympy.combinatorics.generators": [[60, 2, 1, "", "alternating"], [60, 2, 1, "", "cyclic"], [60, 2, 1, "", "dihedral"], [60, 2, 1, "", "symmetric"]], "sympy.combinatorics.graycode": [[52, 1, 1, "", "GrayCode"], [52, 2, 1, "", "bin_to_gray"], [52, 2, 1, "", "get_subset_from_bitstring"], [52, 2, 1, "", "gray_to_bin"], [52, 2, 1, "", "graycode_subsets"], [52, 2, 1, "", "random_bitstring"]], "sympy.combinatorics.graycode.GrayCode": [[52, 3, 1, "", "current"], [52, 2, 1, "", "generate_gray"], [52, 3, 1, "", "n"], [52, 2, 1, "", "next"], [52, 3, 1, "", "rank"], [52, 3, 1, "", "selections"], [52, 2, 1, "", "skip"], [52, 2, 1, "", "unrank"]], "sympy.combinatorics.group_constructs": [[53, 4, 1, "", "DirectProduct"]], "sympy.combinatorics.group_numbers": [[54, 4, 1, "", "is_abelian_number"], [54, 4, 1, "", "is_cyclic_number"], [54, 4, 1, "", "is_nilpotent_number"]], "sympy.combinatorics.named_groups": [[56, 4, 1, "", "AbelianGroup"], [56, 4, 1, "", "AlternatingGroup"], [56, 4, 1, "", "CyclicGroup"], [56, 4, 1, "", "DihedralGroup"], [56, 4, 1, "", "SymmetricGroup"]], "sympy.combinatorics.partitions": [[57, 1, 1, "", "IntegerPartition"], [57, 1, 1, "", "Partition"], [57, 4, 1, "", "RGS_enum"], [57, 4, 1, "", "RGS_generalized"], [57, 4, 1, "", "RGS_rank"], [57, 4, 1, "", "RGS_unrank"], [57, 4, 1, "", "random_integer_partition"]], "sympy.combinatorics.partitions.IntegerPartition": [[57, 2, 1, "", "as_dict"], [57, 2, 1, "", "as_ferrers"], [57, 3, 1, "", "conjugate"], [57, 2, 1, "", "next_lex"], [57, 2, 1, "", "prev_lex"]], "sympy.combinatorics.partitions.Partition": [[57, 3, 1, "", "RGS"], [57, 2, 1, "", "from_rgs"], [57, 3, 1, "", "partition"], [57, 3, 1, "", "rank"], [57, 2, 1, "", "sort_key"]], "sympy.combinatorics.perm_groups": [[59, 1, 1, "", "PermutationGroup"]], "sympy.combinatorics.perm_groups.PermutationGroup": [[59, 2, 1, "", "__contains__"], [59, 2, 1, "", "__mul__"], [59, 2, 1, "", "__new__"], [59, 5, 1, "", "__weakref__"], [59, 2, 1, "", "_coset_representative"], [59, 2, 1, "", "_distinct_primes_lemma"], [59, 3, 1, "", "_elements"], [59, 2, 1, "", "_eval_is_alt_sym_monte_carlo"], [59, 2, 1, "", "_eval_is_alt_sym_naive"], [59, 2, 1, "", "_p_elements_group"], [59, 2, 1, "", "_random_pr_init"], [59, 2, 1, "", "_sylow_alt_sym"], [59, 2, 1, "", "_union_find_merge"], [59, 2, 1, "", "_union_find_rep"], [59, 2, 1, "", "_verify"], [59, 2, 1, "", "abelian_invariants"], [59, 3, 1, "", "base"], [59, 2, 1, "", "baseswap"], [59, 3, 1, "", "basic_orbits"], [59, 3, 1, "", "basic_stabilizers"], [59, 3, 1, "", "basic_transversals"], [59, 2, 1, "", "center"], [59, 2, 1, "", "centralizer"], [59, 2, 1, "", "commutator"], [59, 2, 1, "", "composition_series"], [59, 2, 1, "", "conjugacy_class"], [59, 2, 1, "", "conjugacy_classes"], [59, 2, 1, "", "contains"], [59, 2, 1, "", "coset_factor"], [59, 2, 1, "", "coset_rank"], [59, 2, 1, "", "coset_table"], [59, 2, 1, "", "coset_transversal"], [59, 2, 1, "", "coset_unrank"], [59, 3, 1, "", "degree"], [59, 2, 1, "", "derived_series"], [59, 2, 1, "", "derived_subgroup"], [59, 3, 1, "", "elements"], [59, 2, 1, "", "equals"], [59, 2, 1, "", "generate"], [59, 2, 1, "", "generate_dimino"], [59, 2, 1, "", "generate_schreier_sims"], [59, 2, 1, "", "generator_product"], [59, 3, 1, "", "generators"], [59, 3, 1, "", "identity"], [59, 2, 1, "", "index"], [59, 3, 1, "", "is_abelian"], [59, 2, 1, "", "is_alt_sym"], [59, 3, 1, "", "is_alternating"], [59, 3, 1, "", "is_cyclic"], [59, 3, 1, "", "is_dihedral"], [59, 2, 1, "", "is_elementary"], [59, 3, 1, "", "is_nilpotent"], [59, 2, 1, "", "is_normal"], [59, 3, 1, "", "is_perfect"], [59, 3, 1, "", "is_polycyclic"], [59, 2, 1, "", "is_primitive"], [59, 3, 1, "", "is_solvable"], [59, 2, 1, "", "is_subgroup"], [59, 3, 1, "", "is_symmetric"], [59, 2, 1, "", "is_transitive"], [59, 3, 1, "", "is_trivial"], [59, 2, 1, "", "lower_central_series"], [59, 2, 1, "", "make_perm"], [59, 3, 1, "", "max_div"], [59, 2, 1, "", "minimal_block"], [59, 2, 1, "", "minimal_blocks"], [59, 2, 1, "", "normal_closure"], [59, 2, 1, "", "orbit"], [59, 2, 1, "", "orbit_rep"], [59, 2, 1, "", "orbit_transversal"], [59, 2, 1, "", "orbits"], [59, 2, 1, "", "order"], [59, 2, 1, "", "pointwise_stabilizer"], [59, 2, 1, "", "polycyclic_group"], [59, 2, 1, "", "presentation"], [59, 2, 1, "", "random"], [59, 2, 1, "", "random_pr"], [59, 2, 1, "", "random_stab"], [59, 2, 1, "", "schreier_sims"], [59, 2, 1, "", "schreier_sims_incremental"], [59, 2, 1, "", "schreier_sims_random"], [59, 2, 1, "", "schreier_vector"], [59, 2, 1, "", "stabilizer"], [59, 3, 1, "", "strong_gens"], [59, 2, 1, "", "strong_presentation"], [59, 2, 1, "", "subgroup"], [59, 2, 1, "", "subgroup_search"], [59, 2, 1, "", "sylow_subgroup"], [59, 3, 1, "", "transitivity_degree"]], "sympy.combinatorics.permutations": [[60, 1, 1, "", "Cycle"], [60, 1, 1, "", "Permutation"], [60, 4, 1, "", "_af_parity"]], "sympy.combinatorics.permutations.Cycle": [[60, 2, 1, "", "list"]], "sympy.combinatorics.permutations.Permutation": [[60, 2, 1, "", "apply"], [60, 3, 1, "", "array_form"], [60, 2, 1, "", "ascents"], [60, 2, 1, "", "atoms"], [60, 3, 1, "", "cardinality"], [60, 2, 1, "", "commutator"], [60, 2, 1, "", "commutes_with"], [60, 3, 1, "", "cycle_structure"], [60, 3, 1, "", "cycles"], [60, 3, 1, "", "cyclic_form"], [60, 2, 1, "", "descents"], [60, 2, 1, "", "from_inversion_vector"], [60, 2, 1, "", "from_sequence"], [60, 3, 1, "", "full_cyclic_form"], [60, 2, 1, "", "get_adjacency_distance"], [60, 2, 1, "", "get_adjacency_matrix"], [60, 2, 1, "", "get_positional_distance"], [60, 2, 1, "", "get_precedence_distance"], [60, 2, 1, "", "get_precedence_matrix"], [60, 2, 1, "", "index"], [60, 2, 1, "", "inversion_vector"], [60, 2, 1, "", "inversions"], [60, 3, 1, "", "is_Empty"], [60, 3, 1, "", "is_Identity"], [60, 3, 1, "", "is_Singleton"], [60, 3, 1, "", "is_even"], [60, 3, 1, "", "is_odd"], [60, 2, 1, "", "josephus"], [60, 2, 1, "", "length"], [60, 2, 1, "", "list"], [60, 2, 1, "", "max"], [60, 2, 1, "", "min"], [60, 2, 1, "", "mul_inv"], [60, 2, 1, "", "next_lex"], [60, 2, 1, "", "next_nonlex"], [60, 2, 1, "", "next_trotterjohnson"], [60, 2, 1, "", "order"], [60, 2, 1, "", "parity"], [60, 2, 1, "", "random"], [60, 2, 1, "", "rank"], [60, 2, 1, "", "rank_nonlex"], [60, 2, 1, "", "rank_trotterjohnson"], [60, 2, 1, "", "resize"], [60, 2, 1, "", "rmul"], [60, 2, 1, "", "rmul_with_af"], [60, 2, 1, "", "runs"], [60, 2, 1, "", "signature"], [60, 3, 1, "", "size"], [60, 2, 1, "", "support"], [60, 2, 1, "", "transpositions"], [60, 2, 1, "", "unrank_lex"], [60, 2, 1, "", "unrank_nonlex"], [60, 2, 1, "", "unrank_trotterjohnson"]], "sympy.combinatorics.polyhedron": [[61, 1, 1, "", "Polyhedron"]], "sympy.combinatorics.polyhedron.Polyhedron": [[61, 3, 1, "", "array_form"], [61, 3, 1, "", "corners"], [61, 3, 1, "", "cyclic_form"], [61, 3, 1, "", "edges"], [61, 3, 1, "", "faces"], [61, 3, 1, "", "pgroup"], [61, 2, 1, "", "reset"], [61, 2, 1, "", "rotate"], [61, 3, 1, "", "size"], [61, 3, 1, "", "vertices"]], "sympy.combinatorics.prufer": [[62, 1, 1, "", "Prufer"]], "sympy.combinatorics.prufer.Prufer": [[62, 2, 1, "", "edges"], [62, 2, 1, "", "next"], [62, 3, 1, "", "nodes"], [62, 2, 1, "", "prev"], [62, 2, 1, "", "prufer_rank"], [62, 3, 1, "", "prufer_repr"], [62, 3, 1, "", "rank"], [62, 3, 1, "", "size"], [62, 2, 1, "", "to_prufer"], [62, 2, 1, "", "to_tree"], [62, 3, 1, "", "tree_repr"], [62, 2, 1, "", "unrank"]], "sympy.combinatorics.subsets": [[63, 1, 1, "", "Subset"], [63, 2, 1, "", "ksubsets"]], "sympy.combinatorics.subsets.Subset": [[63, 2, 1, "", "bitlist_from_subset"], [63, 3, 1, "", "cardinality"], [63, 2, 1, "", "iterate_binary"], [63, 2, 1, "", "iterate_graycode"], [63, 2, 1, "", "next_binary"], [63, 2, 1, "", "next_gray"], [63, 2, 1, "", "next_lexicographic"], [63, 2, 1, "", "prev_binary"], [63, 2, 1, "", "prev_gray"], [63, 2, 1, "", "prev_lexicographic"], [63, 3, 1, "", "rank_binary"], [63, 3, 1, "", "rank_gray"], [63, 3, 1, "", "rank_lexicographic"], [63, 3, 1, "", "size"], [63, 3, 1, "", "subset"], [63, 2, 1, "", "subset_from_bitlist"], [63, 2, 1, "", "subset_indices"], [63, 3, 1, "", "superset"], [63, 3, 1, "", "superset_size"], [63, 2, 1, "", "unrank_binary"], [63, 2, 1, "", "unrank_gray"]], "sympy.combinatorics.tensor_can": [[64, 4, 1, "", "bsgs_direct_product"], [64, 4, 1, "", "canonicalize"], [64, 4, 1, "", "double_coset_can_rep"], [64, 4, 1, "", "get_symmetric_group_sgs"]], "sympy.combinatorics.testutil": [[65, 4, 1, "", "_cmp_perm_lists"], [65, 4, 1, "", "_naive_list_centralizer"], [65, 4, 1, "", "_verify_bsgs"], [65, 4, 1, "", "_verify_centralizer"], [65, 4, 1, "", "_verify_normal_closure"]], "sympy.combinatorics.util": [[66, 4, 1, "", "_base_ordering"], [66, 4, 1, "", "_check_cycles_alt_sym"], [66, 4, 1, "", "_distribute_gens_by_base"], [66, 4, 1, "", "_handle_precomputed_bsgs"], [66, 4, 1, "", "_orbits_transversals_from_bsgs"], [66, 4, 1, "", "_remove_gens"], [66, 4, 1, "", "_strip"], [66, 4, 1, "", "_strong_gens_from_distr"]], "sympy.concrete.expr_with_intlimits": [[67, 1, 1, "", "ExprWithIntLimits"]], "sympy.concrete.expr_with_intlimits.ExprWithIntLimits": [[67, 2, 1, "", "change_index"], [67, 3, 1, "", "has_empty_sequence"], [67, 2, 1, "", "index"], [67, 2, 1, "", "reorder"], [67, 2, 1, "", "reorder_limit"]], "sympy.concrete.expr_with_limits": [[95, 1, 1, "", "ExprWithLimits"]], "sympy.concrete.expr_with_limits.ExprWithLimits": [[95, 3, 1, "", "bound_symbols"], [95, 3, 1, "", "free_symbols"], [95, 3, 1, "", "function"], [95, 3, 1, "", "has_finite_limits"], [95, 3, 1, "", "has_reversed_limits"], [95, 3, 1, "", "is_number"], [95, 3, 1, "", "limits"], [95, 3, 1, "", "variables"]], "sympy.concrete.gosper": [[67, 4, 1, "", "gosper_normal"], [67, 4, 1, "", "gosper_sum"], [67, 4, 1, "", "gosper_term"]], "sympy.concrete.products": [[67, 1, 1, "", "Product"], [67, 4, 1, "", "product"]], "sympy.concrete.products.Product": [[67, 2, 1, "", "is_convergent"], [67, 2, 1, "", "reverse_order"]], "sympy.concrete.summations": [[67, 1, 1, "", "Sum"], [67, 4, 1, "", "summation"]], "sympy.concrete.summations.Sum": [[67, 2, 1, "", "euler_maclaurin"], [67, 2, 1, "", "eval_zeta_function"], [67, 2, 1, "", "is_absolutely_convergent"], [67, 2, 1, "", "is_convergent"], [67, 2, 1, "", "reverse_order"]], "sympy.core": [[68, 0, 0, "-", "add"], [68, 0, 0, "-", "assumptions"], [68, 0, 0, "-", "basic"], [68, 0, 0, "-", "cache"], [68, 0, 0, "-", "containers"], [68, 0, 0, "-", "evalf"], [68, 0, 0, "-", "expr"], [68, 0, 0, "-", "exprtools"], [68, 0, 0, "-", "function"], [68, 0, 0, "-", "intfunc"], [68, 0, 0, "-", "kind"], [68, 0, 0, "-", "mod"], [68, 0, 0, "-", "mul"], [68, 0, 0, "-", "multidimensional"], [68, 0, 0, "-", "numbers"], [68, 0, 0, "-", "power"], [68, 0, 0, "-", "random"], [68, 0, 0, "-", "relational"], [68, 0, 0, "-", "singleton"], [68, 0, 0, "-", "symbol"], [68, 0, 0, "-", "sympify"], [68, 0, 0, "-", "traversal"]], "sympy.core.add": [[68, 1, 1, "", "Add"]], "sympy.core.add.Add": [[68, 2, 1, "", "as_coeff_Add"], [68, 2, 1, "", "as_coeff_add"], [68, 2, 1, "", "as_content_primitive"], [68, 2, 1, "", "as_numer_denom"], [68, 2, 1, "", "as_real_imag"], [68, 2, 1, "", "as_two_terms"], [68, 2, 1, "", "extract_leading_order"], [68, 2, 1, "", "flatten"], [68, 2, 1, "", "primitive"]], "sympy.core.basic": [[68, 1, 1, "", "Atom"], [68, 1, 1, "", "Basic"]], "sympy.core.basic.Basic": [[68, 3, 1, "", "args"], [68, 2, 1, "", "as_content_primitive"], [68, 2, 1, "", "as_dummy"], [68, 3, 1, "", "assumptions0"], [68, 2, 1, "", "atoms"], [68, 3, 1, "", "canonical_variables"], [68, 2, 1, "", "class_key"], [68, 2, 1, "", "compare"], [68, 2, 1, "", "count"], [68, 2, 1, "", "count_ops"], [68, 2, 1, "", "doit"], [68, 2, 1, "", "dummy_eq"], [68, 2, 1, "", "find"], [68, 3, 1, "", "free_symbols"], [68, 2, 1, "", "fromiter"], [68, 3, 1, "", "func"], [68, 2, 1, "", "has"], [68, 2, 1, "", "has_free"], [68, 2, 1, "", "has_xfree"], [68, 3, 1, "", "is_comparable"], [68, 2, 1, "", "is_same"], [68, 2, 1, "", "match"], [68, 2, 1, "", "matches"], [68, 2, 1, "", "rcall"], [68, 2, 1, "", "refine"], [68, 2, 1, "", "replace"], [68, 2, 1, "", "rewrite"], [68, 2, 1, "", "simplify"], [68, 2, 1, "", "sort_key"], [68, 2, 1, "", "subs"], [68, 2, 1, "", "xreplace"]], "sympy.core.cache": [[68, 4, 1, "", "__cacheit"]], "sympy.core.containers": [[68, 1, 1, "", "Dict"], [68, 1, 1, "", "Tuple"], [68, 1, 1, "", "TupleKind"]], "sympy.core.containers.Dict": [[68, 2, 1, "", "get"], [68, 2, 1, "", "items"], [68, 2, 1, "", "keys"], [68, 2, 1, "", "values"]], "sympy.core.containers.Tuple": [[68, 2, 1, "", "index"], [68, 3, 1, "", "kind"], [68, 2, 1, "", "tuple_count"]], "sympy.core.evalf": [[68, 1, 1, "", "EvalfMixin"], [68, 4, 1, "", "N"], [68, 1, 1, "", "PrecisionExhausted"]], "sympy.core.evalf.EvalfMixin": [[68, 2, 1, "", "evalf"], [68, 2, 1, "", "n"]], "sympy.core.expr": [[68, 1, 1, "", "AtomicExpr"], [68, 1, 1, "", "Expr"], [68, 1, 1, "", "UnevaluatedExpr"]], "sympy.core.expr.Expr": [[68, 2, 1, "", "apart"], [68, 2, 1, "", "args_cnc"], [68, 2, 1, "", "as_coeff_Add"], [68, 2, 1, "", "as_coeff_Mul"], [68, 2, 1, "", "as_coeff_add"], [68, 2, 1, "", "as_coeff_exponent"], [68, 2, 1, "", "as_coeff_mul"], [68, 2, 1, "", "as_coefficient"], [68, 2, 1, "", "as_coefficients_dict"], [68, 2, 1, "", "as_content_primitive"], [68, 2, 1, "", "as_expr"], [68, 2, 1, "", "as_independent"], [68, 2, 1, "", "as_leading_term"], [68, 2, 1, "", "as_numer_denom"], [68, 2, 1, "", "as_ordered_factors"], [68, 2, 1, "", "as_ordered_terms"], [68, 2, 1, "", "as_poly"], [68, 2, 1, "", "as_powers_dict"], [68, 2, 1, "", "as_real_imag"], [68, 2, 1, "", "as_terms"], [68, 2, 1, "", "aseries"], [68, 2, 1, "", "cancel"], [68, 2, 1, "", "coeff"], [68, 2, 1, "", "collect"], [68, 2, 1, "", "combsimp"], [68, 2, 1, "", "compute_leading_term"], [68, 2, 1, "", "conjugate"], [68, 2, 1, "", "could_extract_minus_sign"], [68, 2, 1, "", "equals"], [68, 2, 1, "", "expand"], [68, 3, 1, "", "expr_free_symbols"], [68, 2, 1, "", "extract_additively"], [68, 2, 1, "", "extract_branch_factor"], [68, 2, 1, "", "extract_multiplicatively"], [68, 2, 1, "", "factor"], [68, 2, 1, "", "fourier_series"], [68, 2, 1, "", "fps"], [68, 2, 1, "", "gammasimp"], [68, 2, 1, "", "getO"], [68, 2, 1, "", "getn"], [68, 2, 1, "", "integrate"], [68, 2, 1, "", "invert"], [68, 2, 1, "", "is_algebraic_expr"], [68, 2, 1, "", "is_constant"], [68, 2, 1, "", "is_meromorphic"], [68, 3, 1, "", "is_number"], [68, 2, 1, "", "is_polynomial"], [68, 2, 1, "", "is_rational_function"], [68, 2, 1, "", "leadterm"], [68, 2, 1, "", "limit"], [68, 2, 1, "", "lseries"], [68, 2, 1, "", "normal"], [68, 2, 1, "", "nseries"], [68, 2, 1, "", "nsimplify"], [68, 2, 1, "", "powsimp"], [68, 2, 1, "", "primitive"], [68, 2, 1, "", "radsimp"], [68, 2, 1, "", "ratsimp"], [68, 2, 1, "", "removeO"], [68, 2, 1, "", "round"], [68, 2, 1, "", "separate"], [68, 2, 1, "", "series"], [68, 2, 1, "", "taylor_term"], [68, 2, 1, "", "together"], [68, 2, 1, "", "trigsimp"]], "sympy.core.exprtools": [[68, 4, 1, "", "factor_terms"], [68, 4, 1, "", "gcd_terms"]], "sympy.core.function": [[68, 1, 1, "", "Derivative"], [68, 1, 1, "", "Function"], [68, 1, 1, "", "FunctionClass"], [68, 1, 1, "", "Lambda"], [68, 1, 1, "", "PoleError"], [68, 1, 1, "", "Subs"], [68, 1, 1, "", "WildFunction"], [68, 4, 1, "", "count_ops"], [68, 4, 1, "", "diff"], [68, 4, 1, "", "expand"], [68, 4, 1, "", "expand_complex"], [68, 4, 1, "", "expand_func"], [68, 4, 1, "", "expand_log"], [68, 4, 1, "", "expand_mul"], [68, 4, 1, "", "expand_multinomial"], [68, 4, 1, "", "expand_power_base"], [68, 4, 1, "", "expand_power_exp"], [68, 4, 1, "", "expand_trig"], [68, 4, 1, "", "nfloat"]], "sympy.core.function.Derivative": [[68, 3, 1, "", "_diff_wrt"], [68, 2, 1, "", "_sort_variable_count"], [68, 2, 1, "", "as_finite_difference"], [68, 2, 1, "", "doit_numerically"]], "sympy.core.function.Function": [[68, 2, 1, "", "as_base_exp"], [68, 2, 1, "", "fdiff"], [68, 2, 1, "", "is_singular"]], "sympy.core.function.FunctionClass": [[68, 3, 1, "", "nargs"]], "sympy.core.function.Lambda": [[68, 3, 1, "", "bound_symbols"], [68, 3, 1, "", "expr"], [68, 3, 1, "", "is_identity"], [68, 3, 1, "", "signature"], [68, 3, 1, "", "variables"]], "sympy.core.function.Subs": [[68, 3, 1, "", "bound_symbols"], [68, 3, 1, "", "expr"], [68, 3, 1, "", "point"], [68, 3, 1, "", "variables"]], "sympy.core.intfunc": [[68, 4, 1, "", "igcd"], [68, 4, 1, "", "igcd_lehmer"], [68, 4, 1, "", "igcdex"], [68, 4, 1, "", "ilcm"], [68, 4, 1, "", "integer_log"], [68, 4, 1, "", "integer_nthroot"], [68, 4, 1, "", "isqrt"], [68, 4, 1, "", "mod_inverse"], [68, 4, 1, "", "num_digits"], [68, 4, 1, "", "trailing"]], "sympy.core.kind": [[68, 5, 1, "", "BooleanKind"], [68, 1, 1, "", "Kind"], [68, 5, 1, "", "NumberKind"], [68, 5, 1, "", "UndefinedKind"]], "sympy.core.mod": [[68, 1, 1, "", "Mod"]], "sympy.core.mul": [[68, 1, 1, "", "Mul"], [68, 4, 1, "", "prod"]], "sympy.core.mul.Mul": [[68, 2, 1, "", "as_coeff_Mul"], [68, 2, 1, "", "as_content_primitive"], [68, 2, 1, "", "as_ordered_factors"], [68, 2, 1, "", "as_two_terms"], [68, 2, 1, "", "flatten"]], "sympy.core.multidimensional": [[68, 1, 1, "", "vectorize"]], "sympy.core.numbers": [[68, 1, 1, "", "AlgebraicNumber"], [68, 1, 1, "", "Catalan"], [68, 1, 1, "", "ComplexInfinity"], [68, 1, 1, "", "EulerGamma"], [68, 1, 1, "", "Exp1"], [68, 1, 1, "", "Float"], [68, 1, 1, "", "GoldenRatio"], [68, 1, 1, "", "Half"], [68, 1, 1, "", "ImaginaryUnit"], [68, 1, 1, "", "Infinity"], [68, 1, 1, "", "Integer"], [68, 1, 1, "", "NaN"], [68, 1, 1, "", "NegativeInfinity"], [68, 1, 1, "", "NegativeOne"], [68, 1, 1, "", "Number"], [68, 1, 1, "", "NumberSymbol"], [68, 1, 1, "", "One"], [68, 1, 1, "", "Pi"], [68, 1, 1, "", "Rational"], [68, 5, 1, "", "RealNumber"], [68, 1, 1, "", "TribonacciConstant"], [68, 1, 1, "", "Zero"], [68, 4, 1, "", "equal_valued"], [68, 4, 1, "", "mod_inverse"], [68, 4, 1, "", "seterr"]], "sympy.core.numbers.AlgebraicNumber": [[68, 2, 1, "", "__new__"], [68, 2, 1, "", "as_expr"], [68, 2, 1, "", "as_poly"], [68, 2, 1, "", "coeffs"], [68, 2, 1, "", "field_element"], [68, 3, 1, "", "is_aliased"], [68, 3, 1, "", "is_primitive_element"], [68, 2, 1, "", "minpoly_of_element"], [68, 2, 1, "", "native_coeffs"], [68, 2, 1, "", "primitive_element"], [68, 2, 1, "", "to_algebraic_integer"], [68, 2, 1, "", "to_primitive_element"], [68, 2, 1, "", "to_root"]], "sympy.core.numbers.Number": [[68, 2, 1, "", "as_coeff_Add"], [68, 2, 1, "", "as_coeff_Mul"], [68, 2, 1, "", "cofactors"], [68, 2, 1, "", "gcd"], [68, 2, 1, "", "lcm"]], "sympy.core.numbers.NumberSymbol": [[68, 2, 1, "", "approximation"]], "sympy.core.numbers.Rational": [[68, 2, 1, "", "as_coeff_Add"], [68, 2, 1, "", "as_coeff_Mul"], [68, 2, 1, "", "as_content_primitive"], [68, 2, 1, "", "factors"], [68, 2, 1, "", "limit_denominator"]], "sympy.core.power": [[68, 1, 1, "", "Pow"]], "sympy.core.power.Pow": [[68, 2, 1, "", "as_base_exp"], [68, 2, 1, "", "as_content_primitive"]], "sympy.core.random": [[68, 4, 1, "", "_randint"], [68, 4, 1, "", "_randrange"], [68, 4, 1, "", "random_complex_number"], [68, 4, 1, "", "test_derivative_numerically"], [68, 4, 1, "", "verify_numerically"]], "sympy.core.relational": [[68, 5, 1, "", "Eq"], [68, 1, 1, "", "Equality"], [68, 5, 1, "", "Ge"], [68, 1, 1, "", "GreaterThan"], [68, 5, 1, "", "Gt"], [68, 5, 1, "", "Le"], [68, 1, 1, "", "LessThan"], [68, 5, 1, "", "Lt"], [68, 5, 1, "", "Ne"], [68, 5, 1, "", "Rel"], [68, 1, 1, "", "Relational"], [68, 1, 1, "", "StrictGreaterThan"], [68, 1, 1, "", "StrictLessThan"], [68, 1, 1, "", "Unequality"]], "sympy.core.relational.Equality": [[68, 2, 1, "", "as_poly"], [68, 2, 1, "", "integrate"]], "sympy.core.relational.Relational": [[68, 3, 1, "", "canonical"], [68, 2, 1, "", "equals"], [68, 3, 1, "", "lhs"], [68, 3, 1, "", "negated"], [68, 3, 1, "", "reversed"], [68, 3, 1, "", "reversedsign"], [68, 3, 1, "", "rhs"], [68, 3, 1, "", "strict"], [68, 3, 1, "", "weak"]], "sympy.core.singleton": [[68, 1, 1, "", "Singleton"], [68, 1, 1, "", "SingletonRegistry"]], "sympy.core.sorting": [[68, 4, 1, "", "default_sort_key"], [68, 4, 1, "", "ordered"]], "sympy.core.symbol": [[68, 1, 1, "", "Dummy"], [68, 1, 1, "", "Symbol"], [68, 1, 1, "", "Wild"], [68, 4, 1, "", "symbols"], [68, 4, 1, "", "var"]], "sympy.core.sympify": [[68, 4, 1, "", "sympify"]], "sympy.core.traversal": [[68, 4, 1, "", "bottom_up"], [68, 4, 1, "", "postorder_traversal"], [68, 4, 1, "", "preorder_traversal"], [68, 4, 1, "", "use"], [68, 4, 1, "", "walk"]], "sympy.crypto": [[69, 0, 0, "-", "crypto"]], "sympy.crypto.crypto": [[69, 4, 1, "", "AZ"], [69, 4, 1, "", "bifid5_square"], [69, 4, 1, "", "bifid6_square"], [69, 4, 1, "", "check_and_join"], [69, 4, 1, "", "cycle_list"], [69, 4, 1, "", "decipher_affine"], [69, 4, 1, "", "decipher_atbash"], [69, 4, 1, "", "decipher_bifid"], [69, 4, 1, "", "decipher_bifid5"], [69, 4, 1, "", "decipher_bifid6"], [69, 4, 1, "", "decipher_elgamal"], [69, 4, 1, "", "decipher_gm"], [69, 4, 1, "", "decipher_hill"], [69, 4, 1, "", "decipher_kid_rsa"], [69, 4, 1, "", "decipher_railfence"], [69, 4, 1, "", "decipher_rot13"], [69, 4, 1, "", "decipher_rsa"], [69, 4, 1, "", "decipher_shift"], [69, 4, 1, "", "decipher_vigenere"], [69, 4, 1, "", "decode_morse"], [69, 4, 1, "", "dh_private_key"], [69, 4, 1, "", "dh_public_key"], [69, 4, 1, "", "dh_shared_key"], [69, 4, 1, "", "elgamal_private_key"], [69, 4, 1, "", "elgamal_public_key"], [69, 4, 1, "", "encipher_affine"], [69, 4, 1, "", "encipher_atbash"], [69, 4, 1, "", "encipher_bifid"], [69, 4, 1, "", "encipher_bifid5"], [69, 4, 1, "", "encipher_bifid6"], [69, 4, 1, "", "encipher_elgamal"], [69, 4, 1, "", "encipher_gm"], [69, 4, 1, "", "encipher_hill"], [69, 4, 1, "", "encipher_kid_rsa"], [69, 4, 1, "", "encipher_railfence"], [69, 4, 1, "", "encipher_rot13"], [69, 4, 1, "", "encipher_rsa"], [69, 4, 1, "", "encipher_shift"], [69, 4, 1, "", "encipher_substitution"], [69, 4, 1, "", "encipher_vigenere"], [69, 4, 1, "", "encode_morse"], [69, 4, 1, "", "gm_private_key"], [69, 4, 1, "", "gm_public_key"], [69, 4, 1, "", "kid_rsa_private_key"], [69, 4, 1, "", "kid_rsa_public_key"], [69, 4, 1, "", "lfsr_autocorrelation"], [69, 4, 1, "", "lfsr_connection_polynomial"], [69, 4, 1, "", "lfsr_sequence"], [69, 4, 1, "", "padded_key"], [69, 4, 1, "", "rsa_private_key"], [69, 4, 1, "", "rsa_public_key"]], "sympy.diffgeom": [[70, 1, 1, "", "BaseCovarDerivativeOp"], [70, 1, 1, "", "BaseScalarField"], [70, 1, 1, "", "BaseVectorField"], [70, 1, 1, "", "Commutator"], [70, 1, 1, "", "CoordSystem"], [70, 1, 1, "", "CoordinateSymbol"], [70, 1, 1, "", "CovarDerivativeOp"], [70, 1, 1, "", "Differential"], [70, 1, 1, "", "LieDerivative"], [70, 1, 1, "", "Manifold"], [70, 1, 1, "", "Patch"], [70, 1, 1, "", "Point"], [70, 1, 1, "", "TensorProduct"], [70, 1, 1, "", "WedgeProduct"], [70, 4, 1, "", "intcurve_diffequ"], [70, 4, 1, "", "intcurve_series"], [70, 4, 1, "", "metric_to_Christoffel_1st"], [70, 4, 1, "", "metric_to_Christoffel_2nd"], [70, 4, 1, "", "metric_to_Ricci_components"], [70, 4, 1, "", "metric_to_Riemann_components"], [70, 4, 1, "", "twoform_to_matrix"], [70, 4, 1, "", "vectors_in_basis"]], "sympy.diffgeom.CoordSystem": [[70, 2, 1, "", "base_oneform"], [70, 2, 1, "", "base_oneforms"], [70, 2, 1, "", "base_scalar"], [70, 2, 1, "", "base_scalars"], [70, 2, 1, "", "base_vector"], [70, 2, 1, "", "base_vectors"], [70, 2, 1, "", "coord_function"], [70, 2, 1, "", "coord_functions"], [70, 2, 1, "", "coord_tuple_transform_to"], [70, 2, 1, "", "jacobian"], [70, 2, 1, "", "jacobian_determinant"], [70, 2, 1, "", "jacobian_matrix"], [70, 2, 1, "", "point"], [70, 2, 1, "", "point_to_coords"], [70, 2, 1, "", "transform"], [70, 2, 1, "", "transformation"]], "sympy.diffgeom.Point": [[70, 2, 1, "", "coords"]], "sympy.discrete": [[71, 0, 0, "-", "convolutions"], [71, 0, 0, "-", "transforms"]], "sympy.discrete.convolutions": [[71, 4, 1, "", "convolution"], [71, 4, 1, "", "convolution_fft"], [71, 4, 1, "", "convolution_fwht"], [71, 4, 1, "", "convolution_ntt"], [71, 4, 1, "", "convolution_subset"], [71, 4, 1, "", "covering_product"], [71, 4, 1, "", "intersecting_product"]], "sympy.discrete.transforms": [[71, 4, 1, "", "fft"], [71, 4, 1, "", "fwht"], [71, 4, 1, "", "ifft"], [71, 4, 1, "", "ifwht"], [71, 4, 1, "", "intt"], [71, 4, 1, "", "inverse_mobius_transform"], [71, 4, 1, "", "mobius_transform"], [71, 4, 1, "", "ntt"]], "sympy.external.pythonmpq": [[217, 1, 1, "", "PythonMPQ"]], "sympy.functions.combinatorial.factorials": [[73, 1, 1, "", "FallingFactorial"], [73, 1, 1, "", "MultiFactorial"], [73, 1, 1, "", "RisingFactorial"], [73, 1, 1, "", "binomial"], [73, 1, 1, "", "factorial"], [73, 1, 1, "", "factorial2"], [73, 1, 1, "", "subfactorial"]], "sympy.functions.combinatorial.numbers": [[73, 1, 1, "", "andre"], [73, 1, 1, "", "bell"], [73, 1, 1, "", "bernoulli"], [73, 1, 1, "", "catalan"], [73, 1, 1, "", "euler"], [73, 1, 1, "", "fibonacci"], [73, 1, 1, "", "genocchi"], [73, 1, 1, "", "harmonic"], [73, 1, 1, "", "lucas"], [73, 4, 1, "", "nC"], [73, 4, 1, "", "nP"], [73, 4, 1, "", "nT"], [73, 1, 1, "", "partition"], [73, 4, 1, "", "stirling"], [73, 1, 1, "", "tribonacci"]], "sympy.functions.elementary.complexes": [[74, 1, 1, "", "Abs"], [74, 1, 1, "", "arg"], [74, 1, 1, "", "conjugate"], [74, 1, 1, "", "im"], [74, 1, 1, "", "periodic_argument"], [74, 1, 1, "", "polar_lift"], [74, 1, 1, "", "principal_branch"], [74, 1, 1, "", "re"], [74, 1, 1, "", "sign"]], "sympy.functions.elementary.complexes.Abs": [[74, 2, 1, "", "fdiff"]], "sympy.functions.elementary.complexes.im": [[74, 2, 1, "", "as_real_imag"]], "sympy.functions.elementary.complexes.re": [[74, 2, 1, "", "as_real_imag"]], "sympy.functions.elementary.exponential": [[74, 1, 1, "", "LambertW"], [74, 1, 1, "", "exp"], [74, 1, 1, "", "exp_polar"], [74, 1, 1, "", "log"]], "sympy.functions.elementary.exponential.LambertW": [[74, 2, 1, "", "fdiff"]], "sympy.functions.elementary.exponential.exp": [[74, 2, 1, "", "as_real_imag"], [74, 3, 1, "", "base"], [74, 2, 1, "", "fdiff"], [74, 2, 1, "", "taylor_term"]], "sympy.functions.elementary.exponential.log": [[74, 2, 1, "", "as_base_exp"], [74, 2, 1, "", "as_real_imag"], [74, 2, 1, "", "fdiff"], [74, 2, 1, "", "inverse"], [74, 2, 1, "", "taylor_term"]], "sympy.functions.elementary.hyperbolic": [[74, 1, 1, "", "HyperbolicFunction"], [74, 1, 1, "", "acosh"], [74, 1, 1, "", "acoth"], [74, 1, 1, "", "acsch"], [74, 1, 1, "", "asech"], [74, 1, 1, "", "asinh"], [74, 1, 1, "", "atanh"], [74, 1, 1, "", "cosh"], [74, 1, 1, "", "coth"], [74, 1, 1, "", "csch"], [74, 1, 1, "", "sech"], [74, 1, 1, "", "sinh"], [74, 1, 1, "", "tanh"]], "sympy.functions.elementary.hyperbolic.acosh": [[74, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.acoth": [[74, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.acsch": [[74, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.asech": [[74, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.asinh": [[74, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.atanh": [[74, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.coth": [[74, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.csch": [[74, 2, 1, "", "fdiff"], [74, 2, 1, "", "taylor_term"]], "sympy.functions.elementary.hyperbolic.sinh": [[74, 2, 1, "", "as_real_imag"], [74, 2, 1, "", "fdiff"], [74, 2, 1, "", "inverse"], [74, 2, 1, "", "taylor_term"]], "sympy.functions.elementary.hyperbolic.tanh": [[74, 2, 1, "", "inverse"]], "sympy.functions.elementary.integers": [[74, 1, 1, "", "RoundFunction"], [74, 1, 1, "", "ceiling"], [74, 1, 1, "", "floor"], [74, 1, 1, "", "frac"]], "sympy.functions.elementary.miscellaneous": [[74, 1, 1, "", "IdentityFunction"], [74, 1, 1, "", "Max"], [74, 1, 1, "", "Min"], [74, 4, 1, "", "cbrt"], [74, 4, 1, "", "real_root"], [74, 4, 1, "", "root"], [74, 4, 1, "", "sqrt"]], "sympy.functions.elementary.piecewise": [[74, 1, 1, "", "ExprCondPair"], [74, 1, 1, "", "Piecewise"], [74, 4, 1, "", "piecewise_exclusive"], [74, 4, 1, "", "piecewise_fold"]], "sympy.functions.elementary.piecewise.ExprCondPair": [[74, 3, 1, "", "cond"], [74, 3, 1, "", "expr"]], "sympy.functions.elementary.piecewise.Piecewise": [[74, 2, 1, "", "_eval_integral"], [74, 2, 1, "", "as_expr_set_pairs"], [74, 2, 1, "", "doit"], [74, 2, 1, "", "eval"], [74, 2, 1, "", "piecewise_integrate"]], "sympy.functions.elementary.trigonometric": [[74, 1, 1, "", "acos"], [74, 1, 1, "", "acot"], [74, 1, 1, "", "acsc"], [74, 1, 1, "", "asec"], [74, 1, 1, "", "asin"], [74, 1, 1, "", "atan"], [74, 1, 1, "", "atan2"], [74, 1, 1, "", "cos"], [74, 1, 1, "", "cot"], [74, 1, 1, "", "csc"], [74, 1, 1, "", "sec"], [74, 1, 1, "", "sin"], [74, 1, 1, "", "sinc"], [74, 1, 1, "", "tan"]], "sympy.functions.elementary.trigonometric.acos": [[74, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.acot": [[74, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.acsc": [[74, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.asec": [[74, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.asin": [[74, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.atan": [[74, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.cot": [[74, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.tan": [[74, 2, 1, "", "inverse"]], "sympy.functions.special": [[76, 0, 0, "-", "bessel"], [76, 0, 0, "-", "beta_functions"], [76, 0, 0, "-", "elliptic_integrals"], [76, 0, 0, "-", "error_functions"], [76, 0, 0, "-", "gamma_functions"], [76, 0, 0, "-", "mathieu_functions"], [76, 0, 0, "-", "polynomials"], [76, 0, 0, "-", "singularity_functions"], [76, 0, 0, "-", "zeta_functions"]], "sympy.functions.special.bessel": [[76, 1, 1, "", "AiryBase"], [76, 1, 1, "", "BesselBase"], [76, 1, 1, "", "airyai"], [76, 1, 1, "", "airyaiprime"], [76, 1, 1, "", "airybi"], [76, 1, 1, "", "airybiprime"], [76, 1, 1, "", "besseli"], [76, 1, 1, "", "besselj"], [76, 1, 1, "", "besselk"], [76, 1, 1, "", "bessely"], [76, 1, 1, "", "hankel1"], [76, 1, 1, "", "hankel2"], [76, 1, 1, "", "jn"], [76, 4, 1, "", "jn_zeros"], [76, 1, 1, "", "marcumq"], [76, 1, 1, "", "yn"]], "sympy.functions.special.bessel.BesselBase": [[76, 3, 1, "", "argument"], [76, 3, 1, "", "order"]], "sympy.functions.special.beta_functions": [[76, 1, 1, "", "beta"]], "sympy.functions.special.bsplines": [[76, 4, 1, "", "bspline_basis"], [76, 4, 1, "", "bspline_basis_set"], [76, 4, 1, "", "interpolating_spline"]], "sympy.functions.special.delta_functions": [[76, 1, 1, "", "DiracDelta"], [76, 1, 1, "", "Heaviside"]], "sympy.functions.special.delta_functions.DiracDelta": [[76, 2, 1, "", "eval"], [76, 2, 1, "", "fdiff"], [76, 2, 1, "", "is_simple"]], "sympy.functions.special.delta_functions.Heaviside": [[76, 2, 1, "", "eval"], [76, 2, 1, "", "fdiff"], [76, 3, 1, "", "pargs"]], "sympy.functions.special.elliptic_integrals": [[76, 1, 1, "", "elliptic_e"], [76, 1, 1, "", "elliptic_f"], [76, 1, 1, "", "elliptic_k"], [76, 1, 1, "", "elliptic_pi"]], "sympy.functions.special.error_functions": [[76, 1, 1, "", "Chi"], [76, 1, 1, "", "Ci"], [76, 4, 1, "", "E1"], [76, 1, 1, "", "Ei"], [76, 1, 1, "", "FresnelIntegral"], [76, 1, 1, "", "Li"], [76, 1, 1, "", "Shi"], [76, 1, 1, "", "Si"], [76, 1, 1, "", "erf"], [76, 1, 1, "", "erf2"], [76, 1, 1, "", "erf2inv"], [76, 1, 1, "", "erfc"], [76, 1, 1, "", "erfcinv"], [76, 1, 1, "", "erfi"], [76, 1, 1, "", "erfinv"], [76, 1, 1, "", "expint"], [76, 1, 1, "", "fresnelc"], [76, 1, 1, "", "fresnels"], [76, 1, 1, "", "li"]], "sympy.functions.special.error_functions.erf": [[76, 2, 1, "", "inverse"]], "sympy.functions.special.error_functions.erfc": [[76, 2, 1, "", "inverse"]], "sympy.functions.special.error_functions.erfcinv": [[76, 2, 1, "", "inverse"]], "sympy.functions.special.error_functions.erfinv": [[76, 2, 1, "", "inverse"]], "sympy.functions.special.gamma_functions": [[76, 1, 1, "", "digamma"], [76, 1, 1, "", "gamma"], [76, 1, 1, "", "loggamma"], [76, 1, 1, "", "lowergamma"], [76, 1, 1, "", "multigamma"], [76, 1, 1, "", "polygamma"], [76, 1, 1, "", "trigamma"], [76, 1, 1, "", "uppergamma"]], "sympy.functions.special.hyper": [[76, 1, 1, "", "appellf1"], [76, 1, 1, "", "hyper"], [76, 1, 1, "", "meijerg"]], "sympy.functions.special.hyper.hyper": [[76, 3, 1, "", "ap"], [76, 3, 1, "", "argument"], [76, 3, 1, "", "bq"], [76, 3, 1, "", "convergence_statement"], [76, 3, 1, "", "eta"], [76, 3, 1, "", "radius_of_convergence"]], "sympy.functions.special.hyper.meijerg": [[76, 3, 1, "", "an"], [76, 3, 1, "", "aother"], [76, 3, 1, "", "ap"], [76, 3, 1, "", "argument"], [76, 3, 1, "", "bm"], [76, 3, 1, "", "bother"], [76, 3, 1, "", "bq"], [76, 3, 1, "", "delta"], [76, 2, 1, "", "get_period"], [76, 2, 1, "", "integrand"], [76, 3, 1, "", "is_number"], [76, 3, 1, "", "nu"]], "sympy.functions.special.mathieu_functions": [[76, 1, 1, "", "MathieuBase"], [76, 1, 1, "", "mathieuc"], [76, 1, 1, "", "mathieucprime"], [76, 1, 1, "", "mathieus"], [76, 1, 1, "", "mathieusprime"]], "sympy.functions.special.polynomials": [[76, 1, 1, "", "assoc_laguerre"], [76, 1, 1, "", "assoc_legendre"], [76, 1, 1, "", "chebyshevt"], [76, 1, 1, "", "chebyshevt_root"], [76, 1, 1, "", "chebyshevu"], [76, 1, 1, "", "chebyshevu_root"], [76, 1, 1, "", "gegenbauer"], [76, 1, 1, "", "hermite"], [76, 1, 1, "", "hermite_prob"], [76, 1, 1, "", "jacobi"], [76, 4, 1, "", "jacobi_normalized"], [76, 1, 1, "", "laguerre"], [76, 1, 1, "", "legendre"]], "sympy.functions.special.singularity_functions": [[76, 1, 1, "", "SingularityFunction"]], "sympy.functions.special.singularity_functions.SingularityFunction": [[76, 2, 1, "", "eval"], [76, 2, 1, "", "fdiff"]], "sympy.functions.special.spherical_harmonics": [[76, 1, 1, "", "Ynm"], [76, 4, 1, "", "Ynm_c"], [76, 1, 1, "", "Znm"]], "sympy.functions.special.tensor_functions": [[76, 4, 1, "", "Eijk"], [76, 1, 1, "", "KroneckerDelta"], [76, 1, 1, "", "LeviCivita"], [76, 4, 1, "", "eval_levicivita"]], "sympy.functions.special.tensor_functions.KroneckerDelta": [[76, 2, 1, "", "eval"], [76, 3, 1, "", "indices_contain_equal_information"], [76, 3, 1, "", "is_above_fermi"], [76, 3, 1, "", "is_below_fermi"], [76, 3, 1, "", "is_only_above_fermi"], [76, 3, 1, "", "is_only_below_fermi"], [76, 3, 1, "", "killable_index"], [76, 3, 1, "", "preferred_index"]], "sympy.functions.special.zeta_functions": [[76, 1, 1, "", "dirichlet_eta"], [76, 1, 1, "", "lerchphi"], [76, 1, 1, "", "polylog"], [76, 1, 1, "", "stieltjes"], [76, 1, 1, "", "zeta"]], "sympy.geometry": [[77, 0, 0, "-", "curve"], [78, 0, 0, "-", "ellipse"], [79, 0, 0, "-", "entity"], [81, 0, 0, "-", "line"], [82, 0, 0, "-", "plane"], [83, 0, 0, "-", "point"], [84, 0, 0, "-", "polygon"], [85, 0, 0, "-", "util"]], "sympy.geometry.curve": [[77, 1, 1, "", "Curve"]], "sympy.geometry.curve.Curve": [[77, 3, 1, "", "ambient_dimension"], [77, 2, 1, "", "arbitrary_point"], [77, 3, 1, "", "free_symbols"], [77, 3, 1, "", "functions"], [77, 3, 1, "", "length"], [77, 3, 1, "", "limits"], [77, 3, 1, "", "parameter"], [77, 2, 1, "", "plot_interval"], [77, 2, 1, "", "rotate"], [77, 2, 1, "", "scale"], [77, 2, 1, "", "translate"]], "sympy.geometry.ellipse": [[78, 1, 1, "", "Circle"], [78, 1, 1, "", "Ellipse"]], "sympy.geometry.ellipse.Circle": [[78, 3, 1, "", "circumference"], [78, 2, 1, "", "equation"], [78, 2, 1, "", "intersection"], [78, 3, 1, "", "radius"], [78, 2, 1, "", "reflect"], [78, 2, 1, "", "scale"], [78, 3, 1, "", "vradius"]], "sympy.geometry.ellipse.Ellipse": [[78, 3, 1, "", "apoapsis"], [78, 2, 1, "", "arbitrary_point"], [78, 3, 1, "", "area"], [78, 2, 1, "", "auxiliary_circle"], [78, 3, 1, "", "bounds"], [78, 3, 1, "", "center"], [78, 3, 1, "", "circumference"], [78, 2, 1, "", "director_circle"], [78, 3, 1, "", "eccentricity"], [78, 2, 1, "", "encloses_point"], [78, 2, 1, "", "equation"], [78, 2, 1, "", "evolute"], [78, 3, 1, "", "foci"], [78, 3, 1, "", "focus_distance"], [78, 3, 1, "", "hradius"], [78, 2, 1, "", "intersection"], [78, 2, 1, "", "is_tangent"], [78, 3, 1, "", "major"], [78, 3, 1, "", "minor"], [78, 2, 1, "", "normal_lines"], [78, 3, 1, "", "periapsis"], [78, 2, 1, "", "plot_interval"], [78, 2, 1, "", "polar_second_moment_of_area"], [78, 2, 1, "", "random_point"], [78, 2, 1, "", "reflect"], [78, 2, 1, "", "rotate"], [78, 2, 1, "", "scale"], [78, 2, 1, "", "second_moment_of_area"], [78, 2, 1, "", "section_modulus"], [78, 3, 1, "", "semilatus_rectum"], [78, 2, 1, "", "tangent_lines"], [78, 3, 1, "", "vradius"]], "sympy.geometry.entity": [[79, 1, 1, "", "GeometryEntity"]], "sympy.geometry.entity.GeometryEntity": [[79, 3, 1, "", "ambient_dimension"], [79, 3, 1, "", "bounds"], [79, 2, 1, "", "encloses"], [79, 2, 1, "", "intersection"], [79, 2, 1, "", "is_similar"], [79, 2, 1, "", "parameter_value"], [79, 2, 1, "", "reflect"], [79, 2, 1, "", "rotate"], [79, 2, 1, "", "scale"], [79, 2, 1, "", "translate"]], "sympy.geometry.line": [[81, 1, 1, "", "Line"], [81, 1, 1, "", "Line2D"], [81, 1, 1, "", "Line3D"], [81, 1, 1, "", "LinearEntity"], [81, 1, 1, "", "LinearEntity2D"], [81, 1, 1, "", "LinearEntity3D"], [81, 1, 1, "", "Ray"], [81, 1, 1, "", "Ray2D"], [81, 1, 1, "", "Ray3D"], [81, 1, 1, "", "Segment"], [81, 1, 1, "", "Segment2D"], [81, 1, 1, "", "Segment3D"]], "sympy.geometry.line.Line": [[81, 2, 1, "", "contains"], [81, 2, 1, "", "distance"], [81, 2, 1, "", "equals"], [81, 2, 1, "", "plot_interval"]], "sympy.geometry.line.Line2D": [[81, 3, 1, "", "coefficients"], [81, 2, 1, "", "equation"]], "sympy.geometry.line.Line3D": [[81, 2, 1, "", "distance"], [81, 2, 1, "", "equation"]], "sympy.geometry.line.LinearEntity": [[81, 3, 1, "", "ambient_dimension"], [81, 2, 1, "", "angle_between"], [81, 2, 1, "", "arbitrary_point"], [81, 2, 1, "", "are_concurrent"], [81, 2, 1, "", "bisectors"], [81, 2, 1, "", "contains"], [81, 3, 1, "", "direction"], [81, 2, 1, "", "intersection"], [81, 2, 1, "", "is_parallel"], [81, 2, 1, "", "is_perpendicular"], [81, 2, 1, "", "is_similar"], [81, 3, 1, "", "length"], [81, 3, 1, "", "p1"], [81, 3, 1, "", "p2"], [81, 2, 1, "", "parallel_line"], [81, 2, 1, "", "perpendicular_line"], [81, 2, 1, "", "perpendicular_segment"], [81, 3, 1, "", "points"], [81, 2, 1, "", "projection"], [81, 2, 1, "", "random_point"], [81, 2, 1, "", "smallest_angle_between"]], "sympy.geometry.line.LinearEntity2D": [[81, 3, 1, "", "bounds"], [81, 2, 1, "", "perpendicular_line"], [81, 3, 1, "", "slope"]], "sympy.geometry.line.LinearEntity3D": [[81, 3, 1, "", "direction_cosine"], [81, 3, 1, "", "direction_ratio"]], "sympy.geometry.line.Ray": [[81, 2, 1, "", "contains"], [81, 2, 1, "", "distance"], [81, 2, 1, "", "equals"], [81, 2, 1, "", "plot_interval"], [81, 3, 1, "", "source"]], "sympy.geometry.line.Ray2D": [[81, 2, 1, "", "closing_angle"], [81, 3, 1, "", "xdirection"], [81, 3, 1, "", "ydirection"]], "sympy.geometry.line.Ray3D": [[81, 3, 1, "", "xdirection"], [81, 3, 1, "", "ydirection"], [81, 3, 1, "", "zdirection"]], "sympy.geometry.line.Segment": [[81, 2, 1, "", "contains"], [81, 2, 1, "", "distance"], [81, 2, 1, "", "equals"], [81, 3, 1, "", "length"], [81, 3, 1, "", "midpoint"], [81, 2, 1, "", "perpendicular_bisector"], [81, 2, 1, "", "plot_interval"]], "sympy.geometry.plane": [[82, 1, 1, "", "Plane"]], "sympy.geometry.plane.Plane": [[82, 2, 1, "", "angle_between"], [82, 2, 1, "", "arbitrary_point"], [82, 2, 1, "", "are_concurrent"], [82, 2, 1, "", "distance"], [82, 2, 1, "", "equals"], [82, 2, 1, "", "equation"], [82, 2, 1, "", "intersection"], [82, 2, 1, "", "is_coplanar"], [82, 2, 1, "", "is_parallel"], [82, 2, 1, "", "is_perpendicular"], [82, 3, 1, "", "normal_vector"], [82, 3, 1, "", "p1"], [82, 2, 1, "", "parallel_plane"], [82, 2, 1, "", "parameter_value"], [82, 2, 1, "", "perpendicular_line"], [82, 2, 1, "", "perpendicular_plane"], [82, 2, 1, "", "projection"], [82, 2, 1, "", "projection_line"], [82, 2, 1, "", "random_point"]], "sympy.geometry.point": [[83, 1, 1, "", "Point"], [83, 1, 1, "", "Point2D"], [83, 1, 1, "", "Point3D"]], "sympy.geometry.point.Point": [[83, 2, 1, "", "affine_rank"], [83, 3, 1, "", "ambient_dimension"], [83, 2, 1, "", "are_coplanar"], [83, 2, 1, "", "canberra_distance"], [83, 2, 1, "", "distance"], [83, 2, 1, "", "dot"], [83, 2, 1, "", "equals"], [83, 2, 1, "", "intersection"], [83, 2, 1, "", "is_collinear"], [83, 2, 1, "", "is_concyclic"], [83, 3, 1, "", "is_nonzero"], [83, 2, 1, "", "is_scalar_multiple"], [83, 3, 1, "", "is_zero"], [83, 3, 1, "", "length"], [83, 2, 1, "", "midpoint"], [83, 3, 1, "", "origin"], [83, 3, 1, "", "orthogonal_direction"], [83, 2, 1, "", "project"], [83, 2, 1, "", "taxicab_distance"], [83, 3, 1, "", "unit"]], "sympy.geometry.point.Point2D": [[83, 3, 1, "", "bounds"], [83, 3, 1, "", "coordinates"], [83, 2, 1, "", "rotate"], [83, 2, 1, "", "scale"], [83, 2, 1, "", "transform"], [83, 2, 1, "", "translate"], [83, 3, 1, "", "x"], [83, 3, 1, "", "y"]], "sympy.geometry.point.Point3D": [[83, 2, 1, "", "are_collinear"], [83, 3, 1, "", "coordinates"], [83, 2, 1, "", "direction_cosine"], [83, 2, 1, "", "direction_ratio"], [83, 2, 1, "", "intersection"], [83, 2, 1, "", "scale"], [83, 2, 1, "", "transform"], [83, 2, 1, "", "translate"], [83, 3, 1, "", "x"], [83, 3, 1, "", "y"], [83, 3, 1, "", "z"]], "sympy.geometry.polygon": [[84, 1, 1, "", "Polygon"], [84, 1, 1, "", "RegularPolygon"], [84, 1, 1, "", "Triangle"]], "sympy.geometry.polygon.Polygon": [[84, 3, 1, "", "angles"], [84, 2, 1, "", "arbitrary_point"], [84, 3, 1, "", "area"], [84, 2, 1, "", "bisectors"], [84, 3, 1, "", "bounds"], [84, 3, 1, "", "centroid"], [84, 2, 1, "", "cut_section"], [84, 2, 1, "", "distance"], [84, 2, 1, "", "encloses_point"], [84, 2, 1, "", "first_moment_of_area"], [84, 2, 1, "", "intersection"], [84, 2, 1, "", "is_convex"], [84, 3, 1, "", "perimeter"], [84, 2, 1, "", "plot_interval"], [84, 2, 1, "", "polar_second_moment_of_area"], [84, 2, 1, "", "second_moment_of_area"], [84, 2, 1, "", "section_modulus"], [84, 3, 1, "", "sides"], [84, 3, 1, "", "vertices"]], "sympy.geometry.polygon.RegularPolygon": [[84, 3, 1, "", "angles"], [84, 3, 1, "", "apothem"], [84, 3, 1, "", "area"], [84, 3, 1, "", "args"], [84, 3, 1, "", "center"], [84, 3, 1, "", "centroid"], [84, 3, 1, "", "circumcenter"], [84, 3, 1, "", "circumcircle"], [84, 3, 1, "", "circumradius"], [84, 2, 1, "", "encloses_point"], [84, 3, 1, "", "exterior_angle"], [84, 3, 1, "", "incircle"], [84, 3, 1, "", "inradius"], [84, 3, 1, "", "interior_angle"], [84, 3, 1, "", "length"], [84, 3, 1, "", "radius"], [84, 2, 1, "", "reflect"], [84, 2, 1, "", "rotate"], [84, 3, 1, "", "rotation"], [84, 2, 1, "", "scale"], [84, 2, 1, "", "spin"], [84, 3, 1, "", "vertices"]], "sympy.geometry.polygon.Triangle": [[84, 3, 1, "", "altitudes"], [84, 2, 1, "", "bisectors"], [84, 3, 1, "", "circumcenter"], [84, 3, 1, "", "circumcircle"], [84, 3, 1, "", "circumradius"], [84, 3, 1, "", "eulerline"], [84, 3, 1, "", "excenters"], [84, 3, 1, "", "exradii"], [84, 3, 1, "", "incenter"], [84, 3, 1, "", "incircle"], [84, 3, 1, "", "inradius"], [84, 2, 1, "", "is_equilateral"], [84, 2, 1, "", "is_isosceles"], [84, 2, 1, "", "is_right"], [84, 2, 1, "", "is_scalene"], [84, 2, 1, "", "is_similar"], [84, 3, 1, "", "medial"], [84, 3, 1, "", "medians"], [84, 3, 1, "", "nine_point_circle"], [84, 3, 1, "", "orthocenter"], [84, 3, 1, "", "vertices"]], "sympy.geometry.util": [[85, 4, 1, "", "are_similar"], [85, 4, 1, "", "centroid"], [85, 4, 1, "", "convex_hull"], [85, 4, 1, "", "idiff"], [85, 4, 1, "", "intersection"]], "sympy.holonomic.holonomic": [[91, 1, 1, "", "DifferentialOperator"], [91, 1, 1, "", "DifferentialOperatorAlgebra"], [91, 4, 1, "", "DifferentialOperators"], [91, 1, 1, "", "HolonomicFunction"], [89, 4, 1, "", "_convert_poly_rat_alg"], [89, 4, 1, "", "_create_table"], [87, 4, 1, "", "expr_to_holonomic"], [87, 4, 1, "", "from_hyper"], [87, 4, 1, "", "from_meijerg"]], "sympy.holonomic.holonomic.DifferentialOperator": [[91, 2, 1, "", "is_singular"]], "sympy.holonomic.holonomic.HolonomicFunction": [[90, 2, 1, "", "composition"], [90, 2, 1, "", "diff"], [90, 2, 1, "", "evalf"], [90, 2, 1, "", "integrate"], [90, 2, 1, "", "series"], [90, 2, 1, "", "to_expr"], [90, 2, 1, "", "to_hyper"], [90, 2, 1, "", "to_meijerg"], [90, 2, 1, "", "to_sequence"]], "sympy.integrals.deltafunctions": [[95, 4, 1, "", "deltaintegrate"]], "sympy.integrals.heurisch": [[95, 4, 1, "", "components"], [95, 4, 1, "", "heurisch"]], "sympy.integrals.integrals": [[95, 1, 1, "", "Integral"], [95, 4, 1, "", "integrate"], [95, 4, 1, "", "line_integrate"]], "sympy.integrals.integrals.Integral": [[95, 2, 1, "", "as_sum"], [95, 2, 1, "", "doit"], [95, 3, 1, "", "free_symbols"], [95, 6, 1, "", "is_commutative"], [95, 2, 1, "", "principal_value"], [95, 2, 1, "", "transform"]], "sympy.integrals": [[95, 0, 0, "-", "intpoly"], [93, 0, 0, "-", "meijerint"], [93, 0, 0, "-", "meijerint_doc"], [95, 0, 0, "-", "transforms"]], "sympy.integrals.intpoly": [[95, 4, 1, "", "polytope_integrate"]], "sympy.integrals.manualintegrate": [[95, 4, 1, "", "integral_steps"], [95, 4, 1, "", "manualintegrate"]], "sympy.integrals.meijerint": [[93, 7, 1, "", "_CoeffExpValueError"], [93, 4, 1, "", "_check_antecedents"], [93, 4, 1, "", "_check_antecedents_1"], [93, 4, 1, "", "_check_antecedents_inversion"], [93, 4, 1, "", "_condsimp"], [93, 4, 1, "", "_create_lookup_table"], [93, 4, 1, "", "_dummy"], [93, 4, 1, "", "_dummy_"], [93, 4, 1, "", "_eval_cond"], [93, 4, 1, "", "_exponents"], [93, 4, 1, "", "_find_splitting_points"], [93, 4, 1, "", "_flip_g"], [93, 4, 1, "", "_functions"], [93, 4, 1, "", "_get_coeff_exp"], [93, 4, 1, "", "_guess_expansion"], [93, 4, 1, "", "_inflate_fox_h"], [93, 4, 1, "", "_inflate_g"], [93, 4, 1, "", "_int0oo"], [93, 4, 1, "", "_int0oo_1"], [93, 4, 1, "", "_int_inversion"], [93, 4, 1, "", "_is_analytic"], [93, 4, 1, "", "_meijerint_definite_2"], [93, 4, 1, "", "_meijerint_definite_3"], [93, 4, 1, "", "_meijerint_definite_4"], [93, 4, 1, "", "_meijerint_indefinite_1"], [93, 4, 1, "", "_mul_args"], [93, 4, 1, "", "_mul_as_two_parts"], [93, 4, 1, "", "_my_principal_branch"], [93, 4, 1, "", "_mytype"], [93, 4, 1, "", "_rewrite1"], [93, 4, 1, "", "_rewrite2"], [93, 4, 1, "", "_rewrite_inversion"], [93, 4, 1, "", "_rewrite_saxena"], [93, 4, 1, "", "_rewrite_saxena_1"], [93, 4, 1, "", "_rewrite_single"], [93, 4, 1, "", "_split_mul"], [93, 4, 1, "", "meijerint_definite"], [93, 4, 1, "", "meijerint_indefinite"], [93, 4, 1, "", "meijerint_inversion"]], "sympy.integrals.quadrature": [[95, 4, 1, "", "gauss_chebyshev_t"], [95, 4, 1, "", "gauss_chebyshev_u"], [95, 4, 1, "", "gauss_gen_laguerre"], [95, 4, 1, "", "gauss_hermite"], [95, 4, 1, "", "gauss_jacobi"], [95, 4, 1, "", "gauss_laguerre"], [95, 4, 1, "", "gauss_legendre"], [95, 4, 1, "", "gauss_lobatto"]], "sympy.integrals.rationaltools": [[95, 4, 1, "", "ratint"], [95, 4, 1, "", "ratint_logpart"], [95, 4, 1, "", "ratint_ratpart"]], "sympy.integrals.risch": [[95, 1, 1, "", "NonElementaryIntegral"], [95, 4, 1, "", "risch_integrate"]], "sympy.integrals.singularityfunctions": [[95, 4, 1, "", "singularityintegrate"]], "sympy.integrals.transforms": [[95, 1, 1, "", "CosineTransform"], [95, 1, 1, "", "FourierTransform"], [95, 1, 1, "", "HankelTransform"], [95, 1, 1, "", "IntegralTransform"], [95, 7, 1, "", "IntegralTransformError"], [95, 1, 1, "", "InverseCosineTransform"], [95, 1, 1, "", "InverseFourierTransform"], [95, 1, 1, "", "InverseHankelTransform"], [95, 1, 1, "", "InverseLaplaceTransform"], [95, 1, 1, "", "InverseMellinTransform"], [95, 1, 1, "", "InverseSineTransform"], [95, 1, 1, "", "LaplaceTransform"], [95, 1, 1, "", "MellinTransform"], [95, 1, 1, "", "SineTransform"], [95, 4, 1, "", "_fourier_transform"], [95, 4, 1, "", "cosine_transform"], [95, 4, 1, "", "fourier_transform"], [95, 4, 1, "", "hankel_transform"], [95, 4, 1, "", "inverse_cosine_transform"], [95, 4, 1, "", "inverse_fourier_transform"], [95, 4, 1, "", "inverse_hankel_transform"], [95, 4, 1, "", "inverse_laplace_transform"], [95, 4, 1, "", "inverse_mellin_transform"], [95, 4, 1, "", "inverse_sine_transform"], [95, 4, 1, "", "laplace_correspondence"], [95, 4, 1, "", "laplace_initial_conds"], [95, 4, 1, "", "laplace_transform"], [95, 4, 1, "", "mellin_transform"], [95, 4, 1, "", "sine_transform"]], "sympy.integrals.transforms.IntegralTransform": [[95, 2, 1, "", "doit"], [95, 3, 1, "", "function"], [95, 3, 1, "", "function_variable"], [95, 3, 1, "", "transform_variable"]], "sympy.integrals.transforms.InverseLaplaceTransform": [[95, 2, 1, "", "doit"]], "sympy.integrals.transforms.LaplaceTransform": [[95, 2, 1, "", "doit"]], "sympy.integrals.trigonometry": [[95, 4, 1, "", "trigintegrate"]], "sympy.interactive": [[96, 0, 0, "-", "printing"], [96, 0, 0, "-", "session"]], "sympy.interactive.printing": [[96, 4, 1, "", "init_printing"]], "sympy.interactive.session": [[96, 4, 1, "", "enable_automatic_int_sympification"], [96, 4, 1, "", "enable_automatic_symbols"], [96, 4, 1, "", "init_ipython_session"], [96, 4, 1, "", "init_python_session"], [96, 4, 1, "", "init_session"], [96, 4, 1, "", "int_to_Integer"]], "sympy.liealgebras.cartan_matrix": [[97, 4, 1, "", "CartanMatrix"]], "sympy.liealgebras.cartan_type": [[97, 1, 1, "", "CartanType_generator"], [97, 1, 1, "", "Standard_Cartan"]], "sympy.liealgebras.cartan_type.Standard_Cartan": [[97, 2, 1, "", "rank"], [97, 2, 1, "", "series"]], "sympy.liealgebras.dynkin_diagram": [[97, 4, 1, "", "DynkinDiagram"]], "sympy.liealgebras.root_system": [[97, 1, 1, "", "RootSystem"]], "sympy.liealgebras.root_system.RootSystem": [[97, 2, 1, "", "add_as_roots"], [97, 2, 1, "", "add_simple_roots"], [97, 2, 1, "", "all_roots"], [97, 2, 1, "", "cartan_matrix"], [97, 2, 1, "", "dynkin_diagram"], [97, 2, 1, "", "root_space"], [97, 2, 1, "", "simple_roots"]], "sympy.liealgebras.type_a": [[97, 1, 1, "", "TypeA"]], "sympy.liealgebras.type_a.TypeA": [[97, 2, 1, "", "basic_root"], [97, 2, 1, "", "basis"], [97, 2, 1, "", "cartan_matrix"], [97, 2, 1, "", "dimension"], [97, 2, 1, "", "highest_root"], [97, 2, 1, "", "lie_algebra"], [97, 2, 1, "", "positive_roots"], [97, 2, 1, "", "roots"], [97, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_b": [[97, 1, 1, "", "TypeB"]], "sympy.liealgebras.type_b.TypeB": [[97, 2, 1, "", "basic_root"], [97, 2, 1, "", "basis"], [97, 2, 1, "", "cartan_matrix"], [97, 2, 1, "", "dimension"], [97, 2, 1, "", "lie_algebra"], [97, 2, 1, "", "positive_roots"], [97, 2, 1, "", "roots"], [97, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_c": [[97, 1, 1, "", "TypeC"]], "sympy.liealgebras.type_c.TypeC": [[97, 2, 1, "", "basic_root"], [97, 2, 1, "", "basis"], [97, 2, 1, "", "cartan_matrix"], [97, 2, 1, "", "dimension"], [97, 2, 1, "", "lie_algebra"], [97, 2, 1, "", "positive_roots"], [97, 2, 1, "", "roots"], [97, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_d": [[97, 1, 1, "", "TypeD"]], "sympy.liealgebras.type_d.TypeD": [[97, 2, 1, "", "basic_root"], [97, 2, 1, "", "basis"], [97, 2, 1, "", "cartan_matrix"], [97, 2, 1, "", "dimension"], [97, 2, 1, "", "lie_algebra"], [97, 2, 1, "", "positive_roots"], [97, 2, 1, "", "roots"], [97, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_e": [[97, 1, 1, "", "TypeE"]], "sympy.liealgebras.type_e.TypeE": [[97, 2, 1, "", "basic_root"], [97, 2, 1, "", "basis"], [97, 2, 1, "", "cartan_matrix"], [97, 2, 1, "", "dimension"], [97, 2, 1, "", "positive_roots"], [97, 2, 1, "", "roots"], [97, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_f": [[97, 1, 1, "", "TypeF"]], "sympy.liealgebras.type_f.TypeF": [[97, 2, 1, "", "basic_root"], [97, 2, 1, "", "basis"], [97, 2, 1, "", "cartan_matrix"], [97, 2, 1, "", "dimension"], [97, 2, 1, "", "positive_roots"], [97, 2, 1, "", "roots"], [97, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_g": [[97, 1, 1, "", "TypeG"]], "sympy.liealgebras.type_g.TypeG": [[97, 2, 1, "", "basis"], [97, 2, 1, "", "cartan_matrix"], [97, 2, 1, "", "dimension"], [97, 2, 1, "", "positive_roots"], [97, 2, 1, "", "roots"], [97, 2, 1, "", "simple_root"]], "sympy.liealgebras.weyl_group": [[97, 1, 1, "", "WeylGroup"]], "sympy.liealgebras.weyl_group.WeylGroup": [[97, 2, 1, "", "coxeter_diagram"], [97, 2, 1, "", "delete_doubles"], [97, 2, 1, "", "element_order"], [97, 2, 1, "", "generators"], [97, 2, 1, "", "group_name"], [97, 2, 1, "", "group_order"], [97, 2, 1, "", "matrix_form"]], "sympy.logic.boolalg": [[98, 4, 1, "", "ANFform"], [98, 1, 1, "", "And"], [98, 1, 1, "", "Boolean"], [98, 1, 1, "", "BooleanFalse"], [98, 1, 1, "", "BooleanTrue"], [98, 1, 1, "", "Equivalent"], [98, 1, 1, "", "Exclusive"], [98, 1, 1, "", "ITE"], [98, 1, 1, "", "Implies"], [98, 1, 1, "", "Nand"], [98, 1, 1, "", "Nor"], [98, 1, 1, "", "Not"], [98, 1, 1, "", "Or"], [98, 4, 1, "", "POSform"], [98, 4, 1, "", "SOPform"], [98, 1, 1, "", "Xnor"], [98, 1, 1, "", "Xor"], [98, 4, 1, "", "anf_coeffs"], [98, 4, 1, "", "bool_map"], [98, 4, 1, "", "bool_maxterm"], [98, 4, 1, "", "bool_minterm"], [98, 4, 1, "", "bool_monomial"], [98, 4, 1, "", "distribute_and_over_or"], [98, 4, 1, "", "distribute_or_over_and"], [98, 4, 1, "", "distribute_xor_over_and"], [98, 4, 1, "", "eliminate_implications"], [98, 4, 1, "", "gateinputcount"], [98, 4, 1, "", "integer_to_term"], [98, 4, 1, "", "is_anf"], [98, 4, 1, "", "is_cnf"], [98, 4, 1, "", "is_dnf"], [98, 4, 1, "", "is_nnf"], [98, 4, 1, "", "simplify_logic"], [98, 4, 1, "", "term_to_integer"], [98, 4, 1, "", "to_anf"], [98, 4, 1, "", "to_cnf"], [98, 4, 1, "", "to_dnf"], [98, 4, 1, "", "to_int_repr"], [98, 4, 1, "", "to_nnf"], [98, 4, 1, "", "truth_table"]], "sympy.logic.boolalg.Boolean": [[98, 2, 1, "", "as_set"], [98, 2, 1, "", "equals"]], "sympy.logic.boolalg.BooleanFalse": [[98, 2, 1, "", "as_set"]], "sympy.logic.boolalg.BooleanTrue": [[98, 2, 1, "", "as_set"]], "sympy.logic": [[98, 0, 0, "-", "inference"]], "sympy.logic.inference": [[98, 4, 1, "", "satisfiable"]], "sympy.matrices": [[99, 0, 0, "-", "common"], [101, 0, 0, "-", "expressions"], [102, 0, 0, "-", "immutable"], [104, 0, 0, "-", "matrices"], [106, 0, 0, "-", "sparse"], [107, 0, 0, "-", "sparsetools"]], "sympy.matrices.common": [[99, 1, 1, "", "MatrixCommon"], [99, 1, 1, "", "MatrixKind"]], "sympy.matrices.common.MatrixCommon": [[99, 3, 1, "", "C"], [99, 3, 1, "", "H"], [99, 3, 1, "", "T"], [99, 2, 1, "", "__abs__"], [99, 2, 1, "", "__add__"], [99, 2, 1, "", "__getitem__"], [99, 2, 1, "", "__len__"], [99, 2, 1, "", "__mul__"], [99, 2, 1, "", "__pow__"], [99, 5, 1, "", "__weakref__"], [99, 2, 1, "", "adjoint"], [99, 2, 1, "", "applyfunc"], [99, 2, 1, "", "as_real_imag"], [99, 2, 1, "", "atoms"], [99, 2, 1, "", "col"], [99, 2, 1, "", "col_del"], [99, 2, 1, "", "col_insert"], [99, 2, 1, "", "col_join"], [99, 2, 1, "", "companion"], [99, 2, 1, "", "conjugate"], [99, 2, 1, "", "diag"], [99, 2, 1, "", "diagonal"], [99, 2, 1, "", "evalf"], [99, 2, 1, "", "expand"], [99, 2, 1, "", "extract"], [99, 2, 1, "", "eye"], [99, 3, 1, "", "free_symbols"], [99, 2, 1, "", "get_diag_blocks"], [99, 2, 1, "", "has"], [99, 2, 1, "", "hstack"], [99, 2, 1, "", "is_anti_symmetric"], [99, 2, 1, "", "is_diagonal"], [99, 3, 1, "", "is_hermitian"], [99, 3, 1, "", "is_lower"], [99, 3, 1, "", "is_lower_hessenberg"], [99, 3, 1, "", "is_square"], [99, 3, 1, "", "is_strongly_diagonally_dominant"], [99, 2, 1, "", "is_symbolic"], [99, 2, 1, "", "is_symmetric"], [99, 3, 1, "", "is_upper"], [99, 3, 1, "", "is_upper_hessenberg"], [99, 3, 1, "", "is_weakly_diagonally_dominant"], [99, 3, 1, "", "is_zero_matrix"], [99, 2, 1, "", "jordan_block"], [99, 2, 1, "", "lower_triangular"], [99, 2, 1, "", "multiply"], [99, 2, 1, "", "multiply_elementwise"], [99, 2, 1, "", "n"], [99, 2, 1, "", "ones"], [99, 2, 1, "", "permute"], [99, 2, 1, "", "permute_cols"], [99, 2, 1, "", "permute_rows"], [99, 2, 1, "", "pow"], [99, 2, 1, "", "refine"], [99, 2, 1, "", "replace"], [99, 2, 1, "", "reshape"], [99, 2, 1, "", "rmultiply"], [99, 2, 1, "", "rot90"], [99, 2, 1, "", "row"], [99, 2, 1, "", "row_del"], [99, 2, 1, "", "row_insert"], [99, 2, 1, "", "row_join"], [99, 3, 1, "", "shape"], [99, 2, 1, "", "simplify"], [99, 2, 1, "", "subs"], [99, 2, 1, "", "todod"], [99, 2, 1, "", "todok"], [99, 2, 1, "", "tolist"], [99, 2, 1, "", "trace"], [99, 2, 1, "", "transpose"], [99, 2, 1, "", "upper_triangular"], [99, 2, 1, "", "values"], [99, 2, 1, "", "vec"], [99, 2, 1, "", "vech"], [99, 2, 1, "", "vstack"], [99, 2, 1, "", "wilkinson"], [99, 2, 1, "", "xreplace"], [99, 2, 1, "", "zeros"]], "sympy.matrices.dense": [[100, 1, 1, "", "DenseMatrix"], [104, 4, 1, "", "GramSchmidt"], [100, 5, 1, "", "Matrix"], [100, 1, 1, "", "MutableDenseMatrix"], [104, 4, 1, "", "casoratian"], [104, 4, 1, "", "diag"], [104, 4, 1, "", "eye"], [104, 4, 1, "", "hessian"], [104, 4, 1, "", "jordan_cell"], [104, 4, 1, "", "list2numpy"], [104, 4, 1, "", "matrix2numpy"], [104, 4, 1, "", "matrix_multiply_elementwise"], [104, 4, 1, "", "ones"], [104, 4, 1, "", "randMatrix"], [104, 4, 1, "", "rot_axis1"], [104, 4, 1, "", "rot_axis2"], [104, 4, 1, "", "rot_axis3"], [104, 4, 1, "", "rot_ccw_axis1"], [104, 4, 1, "", "rot_ccw_axis2"], [104, 4, 1, "", "rot_ccw_axis3"], [104, 4, 1, "", "rot_givens"], [104, 4, 1, "", "symarray"], [104, 4, 1, "", "wronskian"], [104, 4, 1, "", "zeros"]], "sympy.matrices.dense.DenseMatrix": [[100, 2, 1, "", "LDLdecomposition"], [100, 2, 1, "", "as_immutable"], [100, 2, 1, "", "as_mutable"], [100, 2, 1, "", "cholesky"], [100, 2, 1, "", "lower_triangular_solve"], [100, 2, 1, "", "upper_triangular_solve"]], "sympy.matrices.dense.MutableDenseMatrix": [[100, 2, 1, "", "simplify"]], "sympy.matrices.expressions": [[101, 1, 1, "", "CompanionMatrix"], [101, 1, 1, "", "FunctionMatrix"], [101, 1, 1, "", "HadamardPower"], [101, 1, 1, "", "HadamardProduct"], [101, 1, 1, "", "Identity"], [101, 1, 1, "", "Inverse"], [101, 1, 1, "", "MatAdd"], [101, 1, 1, "", "MatMul"], [101, 1, 1, "", "MatPow"], [101, 1, 1, "", "MatrixExpr"], [101, 1, 1, "", "MatrixPermute"], [101, 1, 1, "", "MatrixSet"], [101, 1, 1, "", "MatrixSymbol"], [101, 1, 1, "", "PermutationMatrix"], [101, 1, 1, "", "Trace"], [101, 1, 1, "", "Transpose"], [101, 1, 1, "", "ZeroMatrix"], [101, 0, 0, "-", "blockmatrix"], [101, 4, 1, "", "hadamard_product"]], "sympy.matrices.expressions.MatrixExpr": [[101, 3, 1, "", "T"], [101, 2, 1, "", "as_coeff_Mul"], [101, 2, 1, "", "as_explicit"], [101, 2, 1, "", "as_mutable"], [101, 2, 1, "", "equals"], [101, 2, 1, "", "from_index_summation"]], "sympy.matrices.expressions.blockmatrix": [[101, 1, 1, "", "BlockDiagMatrix"], [101, 1, 1, "", "BlockMatrix"], [101, 4, 1, "", "block_collapse"]], "sympy.matrices.expressions.blockmatrix.BlockDiagMatrix": [[101, 2, 1, "", "get_diag_blocks"]], "sympy.matrices.expressions.blockmatrix.BlockMatrix": [[101, 2, 1, "", "LDUdecomposition"], [101, 2, 1, "", "LUdecomposition"], [101, 2, 1, "", "UDLdecomposition"], [101, 2, 1, "", "schur"], [101, 2, 1, "", "transpose"]], "sympy.matrices.immutable": [[102, 1, 1, "", "ImmutableDenseMatrix"], [102, 5, 1, "", "ImmutableMatrix"], [106, 1, 1, "", "ImmutableSparseMatrix"]], "sympy.matrices.matrices": [[104, 1, 1, "", "MatrixBase"], [104, 1, 1, "", "MatrixCalculus"], [104, 1, 1, "", "MatrixDeterminant"], [104, 1, 1, "", "MatrixEigen"], [104, 1, 1, "", "MatrixError"], [104, 1, 1, "", "MatrixReductions"], [104, 1, 1, "", "MatrixSubspaces"], [104, 1, 1, "", "NonSquareMatrixError"], [104, 1, 1, "", "ShapeError"], [104, 4, 1, "", "a2idx"]], "sympy.matrices.matrices.MatrixBase": [[104, 3, 1, "", "D"], [104, 2, 1, "", "LDLdecomposition"], [104, 2, 1, "", "LDLsolve"], [104, 2, 1, "", "LUdecomposition"], [104, 2, 1, "", "LUdecompositionFF"], [104, 2, 1, "", "LUdecomposition_Simple"], [104, 2, 1, "", "LUsolve"], [104, 2, 1, "", "QRdecomposition"], [104, 2, 1, "", "QRsolve"], [104, 2, 1, "", "add"], [104, 2, 1, "", "analytic_func"], [104, 2, 1, "", "cholesky"], [104, 2, 1, "", "cholesky_solve"], [104, 2, 1, "", "condition_number"], [104, 2, 1, "", "connected_components"], [104, 2, 1, "", "connected_components_decomposition"], [104, 2, 1, "", "copy"], [104, 2, 1, "", "cramer_solve"], [104, 2, 1, "", "cross"], [104, 2, 1, "", "diagonal_solve"], [104, 2, 1, "", "dot"], [104, 2, 1, "", "dual"], [104, 2, 1, "", "exp"], [104, 2, 1, "", "gauss_jordan_solve"], [104, 2, 1, "", "hat"], [104, 2, 1, "", "inv"], [104, 2, 1, "", "inv_mod"], [104, 2, 1, "", "inverse_ADJ"], [104, 2, 1, "", "inverse_BLOCK"], [104, 2, 1, "", "inverse_CH"], [104, 2, 1, "", "inverse_GE"], [104, 2, 1, "", "inverse_LDL"], [104, 2, 1, "", "inverse_LU"], [104, 2, 1, "", "inverse_QR"], [104, 2, 1, "", "irregular"], [104, 2, 1, "", "is_nilpotent"], [104, 2, 1, "", "key2bounds"], [104, 2, 1, "", "key2ij"], [104, 2, 1, "", "log"], [104, 2, 1, "", "lower_triangular_solve"], [104, 2, 1, "", "norm"], [104, 2, 1, "", "normalized"], [104, 2, 1, "", "pinv"], [104, 2, 1, "", "pinv_solve"], [104, 2, 1, "", "print_nonzero"], [104, 2, 1, "", "project"], [104, 2, 1, "", "rank_decomposition"], [104, 2, 1, "", "singular_value_decomposition"], [104, 2, 1, "", "solve"], [104, 2, 1, "", "solve_least_squares"], [104, 2, 1, "", "strongly_connected_components"], [104, 2, 1, "", "strongly_connected_components_decomposition"], [104, 2, 1, "", "table"], [104, 2, 1, "", "upper_hessenberg_decomposition"], [104, 2, 1, "", "upper_triangular_solve"], [104, 2, 1, "", "vee"]], "sympy.matrices.matrices.MatrixCalculus": [[104, 2, 1, "", "diff"], [104, 2, 1, "", "integrate"], [104, 2, 1, "", "jacobian"], [104, 2, 1, "", "limit"]], "sympy.matrices.matrices.MatrixDeterminant": [[104, 2, 1, "", "adjugate"], [104, 2, 1, "", "charpoly"], [104, 2, 1, "", "cofactor"], [104, 2, 1, "", "cofactor_matrix"], [104, 2, 1, "", "det"], [104, 2, 1, "", "minor"], [104, 2, 1, "", "minor_submatrix"], [104, 2, 1, "", "per"]], "sympy.matrices.matrices.MatrixEigen": [[104, 2, 1, "", "bidiagonal_decomposition"], [104, 2, 1, "", "bidiagonalize"], [104, 2, 1, "", "diagonalize"], [104, 2, 1, "", "eigenvals"], [104, 2, 1, "", "eigenvects"], [104, 2, 1, "", "is_diagonalizable"], [104, 3, 1, "", "is_indefinite"], [104, 3, 1, "", "is_negative_definite"], [104, 3, 1, "", "is_negative_semidefinite"], [104, 3, 1, "", "is_positive_definite"], [104, 3, 1, "", "is_positive_semidefinite"], [104, 2, 1, "", "jordan_form"], [104, 2, 1, "", "left_eigenvects"], [104, 2, 1, "", "singular_values"]], "sympy.matrices.matrices.MatrixReductions": [[104, 2, 1, "", "echelon_form"], [104, 2, 1, "", "elementary_col_op"], [104, 2, 1, "", "elementary_row_op"], [104, 3, 1, "", "is_echelon"], [104, 2, 1, "", "rank"], [104, 2, 1, "", "rref"], [104, 2, 1, "", "rref_rhs"]], "sympy.matrices.matrices.MatrixSubspaces": [[104, 2, 1, "", "columnspace"], [104, 2, 1, "", "nullspace"], [104, 2, 1, "", "orthogonalize"], [104, 2, 1, "", "rowspace"]], "sympy.matrices.normalforms": [[105, 4, 1, "", "hermite_normal_form"], [105, 4, 1, "", "smith_normal_form"]], "sympy.matrices.sparse": [[106, 1, 1, "", "MutableSparseMatrix"], [106, 5, 1, "", "SparseMatrix"]], "sympy.matrices.sparsetools": [[107, 2, 1, "", "_csrtodok"], [107, 2, 1, "", "_doktocsr"], [107, 2, 1, "", "banded"]], "sympy.ntheory": [[108, 0, 0, "-", "bbp_pi"], [108, 0, 0, "-", "continued_fraction"], [108, 0, 0, "-", "digits"], [108, 0, 0, "-", "ecm"], [108, 0, 0, "-", "egyptian_fraction"], [108, 0, 0, "-", "factor_"], [108, 0, 0, "-", "generate"], [108, 1, 1, "", "mobius"], [108, 0, 0, "-", "modular"], [108, 0, 0, "-", "multinomial"], [108, 0, 0, "-", "partitions_"], [108, 0, 0, "-", "primetest"], [108, 0, 0, "-", "qs"], [108, 0, 0, "-", "residue_ntheory"]], "sympy.ntheory.bbp_pi": [[108, 4, 1, "", "pi_hex_digits"]], "sympy.ntheory.continued_fraction": [[108, 4, 1, "", "continued_fraction"], [108, 4, 1, "", "continued_fraction_convergents"], [108, 4, 1, "", "continued_fraction_iterator"], [108, 4, 1, "", "continued_fraction_periodic"], [108, 4, 1, "", "continued_fraction_reduce"]], "sympy.ntheory.digits": [[108, 4, 1, "", "count_digits"], [108, 4, 1, "", "digits"], [108, 4, 1, "", "is_palindromic"]], "sympy.ntheory.ecm": [[108, 4, 1, "", "ecm"]], "sympy.ntheory.egyptian_fraction": [[108, 4, 1, "", "egyptian_fraction"]], "sympy.ntheory.factor_": [[108, 4, 1, "", "abundance"], [108, 4, 1, "", "antidivisor_count"], [108, 4, 1, "", "antidivisors"], [108, 4, 1, "", "core"], [108, 4, 1, "", "digits"], [108, 4, 1, "", "divisor_count"], [108, 1, 1, "", "divisor_sigma"], [108, 4, 1, "", "divisors"], [108, 4, 1, "", "factorint"], [108, 4, 1, "", "factorrat"], [108, 4, 1, "", "is_abundant"], [108, 4, 1, "", "is_amicable"], [108, 4, 1, "", "is_deficient"], [108, 4, 1, "", "is_mersenne_prime"], [108, 4, 1, "", "is_perfect"], [108, 4, 1, "", "mersenne_prime_exponent"], [108, 4, 1, "", "multiplicity"], [108, 4, 1, "", "perfect_power"], [108, 4, 1, "", "pollard_pm1"], [108, 4, 1, "", "pollard_rho"], [108, 4, 1, "", "primefactors"], [108, 1, 1, "", "primenu"], [108, 1, 1, "", "primeomega"], [108, 4, 1, "", "proper_divisor_count"], [108, 4, 1, "", "proper_divisors"], [108, 1, 1, "", "reduced_totient"], [108, 4, 1, "", "smoothness"], [108, 4, 1, "", "smoothness_p"], [108, 1, 1, "", "totient"], [108, 4, 1, "", "udivisor_count"], [108, 1, 1, "", "udivisor_sigma"], [108, 4, 1, "", "udivisors"]], "sympy.ntheory.generate": [[108, 1, 1, "", "Sieve"], [108, 4, 1, "", "composite"], [108, 4, 1, "", "compositepi"], [108, 4, 1, "", "cycle_length"], [108, 4, 1, "", "nextprime"], [108, 4, 1, "", "prevprime"], [108, 4, 1, "", "prime"], [108, 4, 1, "", "primepi"], [108, 4, 1, "", "primerange"], [108, 4, 1, "", "primorial"], [108, 4, 1, "", "randprime"]], "sympy.ntheory.generate.Sieve": [[108, 2, 1, "", "extend"], [108, 2, 1, "", "extend_to_no"], [108, 2, 1, "", "mobiusrange"], [108, 2, 1, "", "primerange"], [108, 2, 1, "", "search"], [108, 2, 1, "", "totientrange"]], "sympy.ntheory.modular": [[108, 4, 1, "", "crt"], [108, 4, 1, "", "crt1"], [108, 4, 1, "", "crt2"], [108, 4, 1, "", "solve_congruence"], [108, 4, 1, "", "symmetric_residue"]], "sympy.ntheory.multinomial": [[108, 4, 1, "", "binomial_coefficients"], [108, 4, 1, "", "binomial_coefficients_list"], [108, 4, 1, "", "multinomial_coefficients"], [108, 4, 1, "", "multinomial_coefficients_iterator"]], "sympy.ntheory.partitions_": [[108, 4, 1, "", "npartitions"]], "sympy.ntheory.primetest": [[108, 4, 1, "", "is_euler_jacobi_pseudoprime"], [108, 4, 1, "", "is_euler_pseudoprime"], [108, 4, 1, "", "is_extra_strong_lucas_prp"], [108, 4, 1, "", "is_fermat_pseudoprime"], [108, 4, 1, "", "is_gaussian_prime"], [108, 4, 1, "", "is_lucas_prp"], [108, 4, 1, "", "is_square"], [108, 4, 1, "", "is_strong_lucas_prp"], [108, 4, 1, "", "isprime"], [108, 4, 1, "", "mr"]], "sympy.ntheory.qs": [[108, 4, 1, "", "qs"]], "sympy.ntheory.residue_ntheory": [[108, 4, 1, "", "binomial_mod"], [108, 4, 1, "", "discrete_log"], [108, 4, 1, "", "is_nthpow_residue"], [108, 4, 1, "", "is_primitive_root"], [108, 4, 1, "", "is_quad_residue"], [108, 4, 1, "", "jacobi_symbol"], [108, 4, 1, "", "kronecker_symbol"], [108, 4, 1, "", "legendre_symbol"], [108, 4, 1, "", "n_order"], [108, 4, 1, "", "nthroot_mod"], [108, 4, 1, "", "polynomial_congruence"], [108, 4, 1, "", "primitive_root"], [108, 4, 1, "", "quadratic_congruence"], [108, 4, 1, "", "quadratic_residues"], [108, 4, 1, "", "sqrt_mod"], [108, 4, 1, "", "sqrt_mod_iter"]], "sympy.parsing.latex": [[110, 1, 1, "", "LaTeXParsingError"], [110, 4, 1, "", "parse_latex"], [110, 4, 1, "", "parse_latex_lark"]], "sympy.parsing.latex.lark": [[110, 1, 1, "", "LarkLaTeXParser"], [110, 1, 1, "", "TransformToSymPyExpr"]], "sympy.parsing.mathematica": [[110, 4, 1, "", "parse_mathematica"]], "sympy.parsing.maxima": [[110, 4, 1, "", "parse_maxima"]], "sympy.parsing": [[110, 0, 0, "-", "sym_expr"]], "sympy.parsing.sym_expr": [[110, 1, 1, "", "SymPyExpression"]], "sympy.parsing.sym_expr.SymPyExpression": [[110, 2, 1, "", "convert_to_c"], [110, 2, 1, "", "convert_to_expr"], [110, 2, 1, "", "convert_to_fortran"], [110, 2, 1, "", "convert_to_python"], [110, 2, 1, "", "return_expr"]], "sympy.parsing.sympy_parser": [[110, 4, 1, "", "auto_number"], [110, 4, 1, "", "auto_symbol"], [110, 4, 1, "", "convert_xor"], [110, 4, 1, "", "eval_expr"], [110, 4, 1, "", "factorial_notation"], [110, 4, 1, "", "function_exponentiation"], [110, 4, 1, "", "implicit_application"], [110, 4, 1, "", "implicit_multiplication"], [110, 4, 1, "", "implicit_multiplication_application"], [110, 4, 1, "", "lambda_notation"], [110, 4, 1, "", "parse_expr"], [110, 4, 1, "", "rationalize"], [110, 4, 1, "", "repeated_decimals"], [110, 4, 1, "", "split_symbols"], [110, 4, 1, "", "split_symbols_custom"], [110, 6, 1, "", "standard_transformations"], [110, 4, 1, "", "stringify_expr"]], "sympy.physics": [[115, 0, 0, "-", "biomechanics"], [123, 0, 0, "-", "control"], [126, 0, 0, "-", "hydrogen"], [127, 0, 0, "-", "matrices"], [151, 0, 0, "-", "mechanics"], [166, 0, 0, "-", "paulialgebra"], [167, 0, 0, "-", "qho_1d"], [191, 0, 0, "-", "secondquant"], [192, 0, 0, "-", "sho"], [208, 0, 0, "-", "vector"], [211, 0, 0, "-", "wigner"]], "sympy.physics.biomechanics": [[111, 0, 0, "-", "activation"], [112, 0, 0, "-", "curve"], [114, 0, 0, "-", "musculotendon"]], "sympy.physics.biomechanics.activation": [[111, 1, 1, "", "ActivationBase"], [111, 1, 1, "", "FirstOrderActivationDeGroote2016"], [111, 1, 1, "", "ZerothOrderActivation"]], "sympy.physics.biomechanics.activation.ActivationBase": [[111, 3, 1, "", "F"], [111, 3, 1, "", "M"], [111, 3, 1, "", "a"], [111, 3, 1, "", "activation"], [111, 3, 1, "", "constants"], [111, 3, 1, "", "e"], [111, 3, 1, "", "excitation"], [111, 3, 1, "", "input_vars"], [111, 3, 1, "", "order"], [111, 3, 1, "", "p"], [111, 3, 1, "", "r"], [111, 2, 1, "", "rhs"], [111, 3, 1, "", "state_vars"], [111, 2, 1, "", "with_defaults"], [111, 3, 1, "", "x"]], "sympy.physics.biomechanics.activation.FirstOrderActivationDeGroote2016": [[111, 3, 1, "", "F"], [111, 3, 1, "", "M"], [111, 3, 1, "", "activation_time_constant"], [111, 3, 1, "", "b"], [111, 3, 1, "", "constants"], [111, 3, 1, "", "deactivation_time_constant"], [111, 3, 1, "", "input_vars"], [111, 3, 1, "", "order"], [111, 3, 1, "", "p"], [111, 3, 1, "", "r"], [111, 2, 1, "", "rhs"], [111, 3, 1, "", "smoothing_rate"], [111, 3, 1, "", "state_vars"], [111, 3, 1, "", "tau_a"], [111, 3, 1, "", "tau_d"], [111, 2, 1, "", "with_defaults"], [111, 3, 1, "", "x"]], "sympy.physics.biomechanics.activation.ZerothOrderActivation": [[111, 3, 1, "", "F"], [111, 3, 1, "", "M"], [111, 3, 1, "", "constants"], [111, 3, 1, "", "input_vars"], [111, 3, 1, "", "order"], [111, 3, 1, "", "p"], [111, 3, 1, "", "r"], [111, 2, 1, "", "rhs"], [111, 3, 1, "", "state_vars"], [111, 2, 1, "", "with_defaults"], [111, 3, 1, "", "x"]], "sympy.physics.biomechanics.curve": [[112, 1, 1, "", "CharacteristicCurveCollection"], [112, 1, 1, "", "CharacteristicCurveFunction"], [112, 1, 1, "", "FiberForceLengthActiveDeGroote2016"], [112, 1, 1, "", "FiberForceLengthPassiveDeGroote2016"], [112, 1, 1, "", "FiberForceLengthPassiveInverseDeGroote2016"], [112, 1, 1, "", "FiberForceVelocityDeGroote2016"], [112, 1, 1, "", "FiberForceVelocityInverseDeGroote2016"], [112, 1, 1, "", "TendonForceLengthDeGroote2016"], [112, 1, 1, "", "TendonForceLengthInverseDeGroote2016"]], "sympy.physics.biomechanics.curve.FiberForceLengthActiveDeGroote2016": [[112, 2, 1, "", "doit"], [112, 2, 1, "", "eval"], [112, 2, 1, "", "fdiff"], [112, 2, 1, "", "with_defaults"]], "sympy.physics.biomechanics.curve.FiberForceLengthPassiveDeGroote2016": [[112, 2, 1, "", "doit"], [112, 2, 1, "", "eval"], [112, 2, 1, "", "fdiff"], [112, 2, 1, "", "inverse"], [112, 2, 1, "", "with_defaults"]], "sympy.physics.biomechanics.curve.FiberForceLengthPassiveInverseDeGroote2016": [[112, 2, 1, "", "doit"], [112, 2, 1, "", "eval"], [112, 2, 1, "", "fdiff"], [112, 2, 1, "", "inverse"], [112, 2, 1, "", "with_defaults"]], "sympy.physics.biomechanics.curve.FiberForceVelocityDeGroote2016": [[112, 2, 1, "", "doit"], [112, 2, 1, "", "eval"], [112, 2, 1, "", "fdiff"], [112, 2, 1, "", "inverse"], [112, 2, 1, "", "with_defaults"]], "sympy.physics.biomechanics.curve.FiberForceVelocityInverseDeGroote2016": [[112, 2, 1, "", "doit"], [112, 2, 1, "", "eval"], [112, 2, 1, "", "fdiff"], [112, 2, 1, "", "inverse"], [112, 2, 1, "", "with_defaults"]], "sympy.physics.biomechanics.curve.TendonForceLengthDeGroote2016": [[112, 2, 1, "", "doit"], [112, 2, 1, "", "eval"], [112, 2, 1, "", "fdiff"], [112, 2, 1, "", "inverse"], [112, 2, 1, "", "with_defaults"]], "sympy.physics.biomechanics.curve.TendonForceLengthInverseDeGroote2016": [[112, 2, 1, "", "doit"], [112, 2, 1, "", "eval"], [112, 2, 1, "", "fdiff"], [112, 2, 1, "", "inverse"], [112, 2, 1, "", "with_defaults"]], "sympy.physics.biomechanics.musculotendon": [[114, 1, 1, "", "MusculotendonBase"], [114, 1, 1, "", "MusculotendonDeGroote2016"], [114, 1, 1, "", "MusculotendonFormulation"]], "sympy.physics.biomechanics.musculotendon.MusculotendonBase": [[114, 3, 1, "", "F"], [114, 3, 1, "", "F_M_max"], [114, 3, 1, "", "M"], [114, 3, 1, "", "a"], [114, 3, 1, "", "activation"], [114, 3, 1, "", "activation_dynamics"], [114, 3, 1, "", "alpha_opt"], [114, 3, 1, "", "beta"], [114, 3, 1, "", "constants"], [114, 2, 1, "", "curves"], [114, 3, 1, "", "e"], [114, 3, 1, "", "excitation"], [114, 3, 1, "", "fiber_damping_coefficient"], [114, 3, 1, "", "input_vars"], [114, 3, 1, "", "l_M_opt"], [114, 3, 1, "", "l_T_slack"], [114, 3, 1, "", "maximal_fiber_velocity"], [114, 3, 1, "", "musculotendon_dynamics"], [114, 3, 1, "", "optimal_fiber_length"], [114, 3, 1, "", "optimal_pennation_angle"], [114, 3, 1, "", "p"], [114, 3, 1, "", "peak_isometric_force"], [114, 3, 1, "", "r"], [114, 2, 1, "", "rhs"], [114, 3, 1, "", "state_vars"], [114, 3, 1, "", "tendon_slack_length"], [114, 3, 1, "", "v_M_max"], [114, 2, 1, "", "with_defaults"], [114, 3, 1, "", "x"]], "sympy.physics.continuum_mechanics": [[116, 0, 0, "-", "beam"], [118, 0, 0, "-", "cable"], [120, 0, 0, "-", "truss"]], "sympy.physics.continuum_mechanics.beam": [[116, 1, 1, "", "Beam"], [116, 1, 1, "", "Beam3D"]], "sympy.physics.continuum_mechanics.beam.Beam": [[116, 3, 1, "", "applied_loads"], [116, 2, 1, "", "apply_load"], [116, 2, 1, "", "apply_support"], [116, 3, 1, "", "area"], [116, 2, 1, "", "bending_moment"], [116, 3, 1, "", "boundary_conditions"], [116, 3, 1, "", "cross_section"], [116, 2, 1, "", "deflection"], [116, 2, 1, "", "draw"], [116, 3, 1, "", "elastic_modulus"], [116, 3, 1, "", "ild_moment"], [116, 3, 1, "", "ild_reactions"], [116, 3, 1, "", "ild_shear"], [116, 2, 1, "", "join"], [116, 3, 1, "", "length"], [116, 3, 1, "", "load"], [116, 2, 1, "", "max_bmoment"], [116, 2, 1, "", "max_deflection"], [116, 2, 1, "", "max_shear_force"], [116, 2, 1, "", "plot_bending_moment"], [116, 2, 1, "", "plot_deflection"], [116, 2, 1, "", "plot_ild_moment"], [116, 2, 1, "", "plot_ild_reactions"], [116, 2, 1, "", "plot_ild_shear"], [116, 2, 1, "", "plot_loading_results"], [116, 2, 1, "", "plot_shear_force"], [116, 2, 1, "", "plot_shear_stress"], [116, 2, 1, "", "plot_slope"], [116, 2, 1, "", "point_cflexure"], [116, 3, 1, "", "reaction_loads"], [116, 2, 1, "", "remove_load"], [116, 3, 1, "", "second_moment"], [116, 2, 1, "", "shear_force"], [116, 2, 1, "", "shear_stress"], [116, 2, 1, "", "slope"], [116, 2, 1, "", "solve_for_ild_moment"], [116, 2, 1, "", "solve_for_ild_reactions"], [116, 2, 1, "", "solve_for_ild_shear"], [116, 2, 1, "", "solve_for_reaction_loads"], [116, 3, 1, "", "variable"]], "sympy.physics.continuum_mechanics.beam.Beam3D": [[116, 2, 1, "", "angular_deflection"], [116, 2, 1, "", "apply_load"], [116, 2, 1, "", "apply_moment_load"], [116, 3, 1, "", "area"], [116, 2, 1, "", "axial_force"], [116, 2, 1, "", "axial_stress"], [116, 2, 1, "", "bending_moment"], [116, 3, 1, "", "boundary_conditions"], [116, 2, 1, "", "deflection"], [116, 3, 1, "", "load_vector"], [116, 2, 1, "", "max_bending_moment"], [116, 2, 1, "", "max_bmoment"], [116, 2, 1, "", "max_deflection"], [116, 2, 1, "", "max_shear_force"], [116, 3, 1, "", "moment_load_vector"], [116, 2, 1, "", "plot_bending_moment"], [116, 2, 1, "", "plot_deflection"], [116, 2, 1, "", "plot_loading_results"], [116, 2, 1, "", "plot_shear_force"], [116, 2, 1, "", "plot_shear_stress"], [116, 2, 1, "", "plot_slope"], [116, 2, 1, "", "polar_moment"], [116, 3, 1, "", "second_moment"], [116, 2, 1, "", "shear_force"], [116, 3, 1, "", "shear_modulus"], [116, 2, 1, "", "shear_stress"], [116, 2, 1, "", "slope"], [116, 2, 1, "", "solve_for_reaction_loads"], [116, 2, 1, "", "solve_for_torsion"], [116, 2, 1, "", "torsional_moment"]], "sympy.physics.continuum_mechanics.cable": [[118, 1, 1, "", "Cable"]], "sympy.physics.continuum_mechanics.cable.Cable": [[118, 2, 1, "", "apply_length"], [118, 2, 1, "", "apply_load"], [118, 2, 1, "", "change_support"], [118, 3, 1, "", "left_support"], [118, 3, 1, "", "length"], [118, 3, 1, "", "loads"], [118, 3, 1, "", "loads_position"], [118, 3, 1, "", "reaction_loads"], [118, 2, 1, "", "remove_loads"], [118, 3, 1, "", "right_support"], [118, 3, 1, "", "supports"]], "sympy.physics.continuum_mechanics.truss": [[120, 1, 1, "", "Truss"]], "sympy.physics.continuum_mechanics.truss.Truss": [[120, 2, 1, "", "add_member"], [120, 2, 1, "", "add_node"], [120, 2, 1, "", "apply_load"], [120, 2, 1, "", "apply_support"], [120, 2, 1, "", "change_member_label"], [120, 2, 1, "", "change_node_label"], [120, 2, 1, "", "draw"], [120, 3, 1, "", "internal_forces"], [120, 3, 1, "", "loads"], [120, 3, 1, "", "member_lengths"], [120, 3, 1, "", "members"], [120, 3, 1, "", "node_labels"], [120, 3, 1, "", "node_positions"], [120, 3, 1, "", "nodes"], [120, 3, 1, "", "reaction_loads"], [120, 2, 1, "", "remove_load"], [120, 2, 1, "", "remove_member"], [120, 2, 1, "", "remove_node"], [120, 2, 1, "", "remove_support"], [120, 2, 1, "", "solve"], [120, 3, 1, "", "supports"]], "sympy.physics.control.control_plots": [[122, 2, 1, "", "bode_magnitude_numerical_data"], [122, 2, 1, "", "bode_magnitude_plot"], [122, 2, 1, "", "bode_phase_numerical_data"], [122, 2, 1, "", "bode_phase_plot"], [122, 2, 1, "", "bode_plot"], [122, 2, 1, "", "impulse_response_numerical_data"], [122, 2, 1, "", "impulse_response_plot"], [122, 2, 1, "", "pole_zero_numerical_data"], [122, 2, 1, "", "pole_zero_plot"], [122, 2, 1, "", "ramp_response_numerical_data"], [122, 2, 1, "", "ramp_response_plot"], [122, 2, 1, "", "step_response_numerical_data"], [122, 2, 1, "", "step_response_plot"]], "sympy.physics.control": [[124, 0, 0, "-", "lti"]], "sympy.physics.control.lti": [[124, 1, 1, "", "Feedback"], [124, 1, 1, "", "MIMOFeedback"], [124, 1, 1, "", "MIMOParallel"], [124, 1, 1, "", "MIMOSeries"], [124, 1, 1, "", "Parallel"], [124, 1, 1, "", "Series"], [124, 1, 1, "", "TransferFunction"], [124, 1, 1, "", "TransferFunctionMatrix"], [124, 4, 1, "", "backward_diff"], [124, 4, 1, "", "bilinear"], [124, 4, 1, "", "forward_diff"], [124, 4, 1, "", "gbt"]], "sympy.physics.control.lti.Feedback": [[124, 2, 1, "", "doit"], [124, 3, 1, "", "sensitivity"], [124, 3, 1, "", "sign"], [124, 3, 1, "", "sys1"], [124, 3, 1, "", "sys2"], [124, 3, 1, "", "var"]], "sympy.physics.control.lti.MIMOFeedback": [[124, 2, 1, "", "doit"], [124, 3, 1, "", "sensitivity"], [124, 3, 1, "", "sign"], [124, 3, 1, "", "sys1"], [124, 3, 1, "", "sys2"], [124, 3, 1, "", "var"]], "sympy.physics.control.lti.MIMOParallel": [[124, 2, 1, "", "doit"], [124, 3, 1, "", "num_inputs"], [124, 3, 1, "", "num_outputs"], [124, 3, 1, "", "shape"], [124, 3, 1, "", "var"]], "sympy.physics.control.lti.MIMOSeries": [[124, 2, 1, "", "doit"], [124, 3, 1, "", "num_inputs"], [124, 3, 1, "", "num_outputs"], [124, 3, 1, "", "shape"], [124, 3, 1, "", "var"]], "sympy.physics.control.lti.Parallel": [[124, 2, 1, "", "doit"], [124, 3, 1, "", "is_biproper"], [124, 3, 1, "", "is_proper"], [124, 3, 1, "", "is_strictly_proper"], [124, 2, 1, "", "to_expr"], [124, 3, 1, "", "var"]], "sympy.physics.control.lti.Series": [[124, 2, 1, "", "doit"], [124, 3, 1, "", "is_biproper"], [124, 3, 1, "", "is_proper"], [124, 3, 1, "", "is_strictly_proper"], [124, 2, 1, "", "to_expr"], [124, 3, 1, "", "var"]], "sympy.physics.control.lti.TransferFunction": [[124, 2, 1, "", "dc_gain"], [124, 3, 1, "", "den"], [124, 2, 1, "", "eval_frequency"], [124, 2, 1, "", "expand"], [124, 2, 1, "", "from_coeff_lists"], [124, 2, 1, "", "from_rational_expression"], [124, 2, 1, "", "from_zpk"], [124, 3, 1, "", "is_biproper"], [124, 3, 1, "", "is_proper"], [124, 2, 1, "", "is_stable"], [124, 3, 1, "", "is_strictly_proper"], [124, 3, 1, "", "num"], [124, 2, 1, "", "poles"], [124, 2, 1, "", "to_expr"], [124, 3, 1, "", "var"], [124, 2, 1, "", "zeros"]], "sympy.physics.control.lti.TransferFunctionMatrix": [[124, 2, 1, "", "elem_poles"], [124, 2, 1, "", "elem_zeros"], [124, 2, 1, "", "eval_frequency"], [124, 2, 1, "", "expand"], [124, 2, 1, "", "from_Matrix"], [124, 3, 1, "", "num_inputs"], [124, 3, 1, "", "num_outputs"], [124, 3, 1, "", "shape"], [124, 2, 1, "", "transpose"], [124, 3, 1, "", "var"]], "sympy.physics.hep": [[125, 0, 0, "-", "gamma_matrices"]], "sympy.physics.hep.gamma_matrices": [[125, 4, 1, "", "extract_type_tens"], [125, 4, 1, "", "gamma_trace"], [125, 4, 1, "", "kahane_simplify"], [125, 4, 1, "", "simplify_gpgp"]], "sympy.physics.hydrogen": [[126, 4, 1, "", "E_nl"], [126, 4, 1, "", "E_nl_dirac"], [126, 4, 1, "", "Psi_nlm"], [126, 4, 1, "", "R_nl"]], "sympy.physics.matrices": [[127, 4, 1, "", "mdft"], [127, 4, 1, "", "mgamma"], [127, 4, 1, "", "msigma"], [127, 4, 1, "", "pat_matrix"]], "sympy.physics.mechanics._system": [[139, 1, 1, "", "System"]], "sympy.physics.mechanics._system.System": [[139, 3, 1, "", "actuators"], [139, 2, 1, "", "add_actuators"], [139, 2, 1, "", "add_bodies"], [139, 2, 1, "", "add_coordinates"], [139, 2, 1, "", "add_holonomic_constraints"], [139, 2, 1, "", "add_joints"], [139, 2, 1, "", "add_kdes"], [139, 2, 1, "", "add_loads"], [139, 2, 1, "", "add_nonholonomic_constraints"], [139, 2, 1, "", "add_speeds"], [139, 2, 1, "", "apply_gravity"], [139, 3, 1, "", "bodies"], [139, 3, 1, "", "eom_method"], [139, 3, 1, "", "forcing"], [139, 3, 1, "", "forcing_full"], [139, 2, 1, "", "form_eoms"], [139, 3, 1, "", "frame"], [139, 2, 1, "", "from_newtonian"], [139, 2, 1, "", "get_body"], [139, 2, 1, "", "get_joint"], [139, 3, 1, "", "holonomic_constraints"], [139, 3, 1, "", "joints"], [139, 3, 1, "", "kdes"], [139, 3, 1, "", "loads"], [139, 3, 1, "", "mass_matrix"], [139, 3, 1, "", "mass_matrix_full"], [139, 3, 1, "", "nonholonomic_constraints"], [139, 3, 1, "", "origin"], [139, 3, 1, "", "q"], [139, 3, 1, "", "q_dep"], [139, 3, 1, "", "q_ind"], [139, 2, 1, "", "rhs"], [139, 3, 1, "", "u"], [139, 3, 1, "", "u_dep"], [139, 3, 1, "", "u_ind"], [139, 2, 1, "", "validate_system"], [139, 3, 1, "", "x"], [139, 3, 1, "", "y"], [139, 3, 1, "", "z"]], "sympy.physics.mechanics": [[129, 0, 0, "-", "actuator"], [130, 0, 0, "-", "body"], [131, 4, 1, "", "find_dynamicsymbols"], [133, 0, 0, "-", "joint"], [133, 0, 0, "-", "jointsmethod"], [134, 0, 0, "-", "kane"], [134, 0, 0, "-", "lagrange"], [135, 0, 0, "-", "linearize"], [131, 4, 1, "", "msubs"], [137, 0, 0, "-", "pathway"], [139, 0, 0, "-", "system"], [140, 0, 0, "-", "wrapping_geometry"]], "sympy.physics.mechanics.actuator": [[129, 1, 1, "", "ActuatorBase"], [129, 1, 1, "", "ForceActuator"], [129, 1, 1, "", "LinearDamper"], [129, 1, 1, "", "LinearSpring"], [129, 1, 1, "", "TorqueActuator"]], "sympy.physics.mechanics.actuator.ActuatorBase": [[129, 2, 1, "", "to_loads"]], "sympy.physics.mechanics.actuator.ForceActuator": [[129, 3, 1, "", "force"], [129, 3, 1, "", "pathway"], [129, 2, 1, "", "to_loads"]], "sympy.physics.mechanics.actuator.LinearDamper": [[129, 3, 1, "", "damping"], [129, 3, 1, "", "force"]], "sympy.physics.mechanics.actuator.LinearSpring": [[129, 3, 1, "", "equilibrium_length"], [129, 3, 1, "", "force"], [129, 3, 1, "", "stiffness"]], "sympy.physics.mechanics.actuator.TorqueActuator": [[129, 2, 1, "", "at_pin_joint"], [129, 3, 1, "", "axis"], [129, 3, 1, "", "reaction_frame"], [129, 3, 1, "", "target_frame"], [129, 2, 1, "", "to_loads"], [129, 3, 1, "", "torque"]], "sympy.physics.mechanics.body": [[130, 1, 1, "", "Body"]], "sympy.physics.mechanics.body.Body": [[130, 2, 1, "", "ang_vel_in"], [130, 2, 1, "", "apply_force"], [130, 2, 1, "", "apply_torque"], [130, 2, 1, "", "clear_loads"], [130, 2, 1, "", "dcm"], [130, 3, 1, "", "inertia"], [130, 2, 1, "", "kinetic_energy"], [130, 2, 1, "", "masscenter_vel"], [130, 2, 1, "", "parallel_axis"], [130, 2, 1, "", "remove_load"], [130, 3, 1, "", "x"], [130, 3, 1, "", "y"], [130, 3, 1, "", "z"]], "sympy.physics.mechanics.functions": [[136, 4, 1, "", "Lagrangian"], [136, 4, 1, "", "angular_momentum"], [136, 4, 1, "", "center_of_mass"], [136, 4, 1, "", "find_dynamicsymbols"], [136, 4, 1, "", "kinetic_energy"], [136, 4, 1, "", "linear_momentum"], [136, 4, 1, "", "potential_energy"]], "sympy.physics.mechanics.inertia": [[136, 1, 1, "", "Inertia"], [136, 4, 1, "", "inertia"], [136, 4, 1, "", "inertia_of_point_mass"]], "sympy.physics.mechanics.inertia.Inertia": [[136, 2, 1, "", "from_inertia_scalars"]], "sympy.physics.mechanics.joint": [[133, 1, 1, "", "CylindricalJoint"], [133, 1, 1, "", "Joint"], [133, 1, 1, "", "PinJoint"], [133, 1, 1, "", "PlanarJoint"], [133, 1, 1, "", "PrismaticJoint"], [133, 1, 1, "", "SphericalJoint"], [133, 1, 1, "", "WeldJoint"]], "sympy.physics.mechanics.joint.CylindricalJoint": [[133, 3, 1, "", "joint_axis"], [133, 3, 1, "", "rotation_coordinate"], [133, 3, 1, "", "rotation_speed"], [133, 3, 1, "", "translation_coordinate"], [133, 3, 1, "", "translation_speed"]], "sympy.physics.mechanics.joint.Joint": [[133, 3, 1, "", "child"], [133, 3, 1, "", "child_axis"], [133, 3, 1, "", "child_point"], [133, 3, 1, "", "coordinates"], [133, 3, 1, "", "kdes"], [133, 3, 1, "", "name"], [133, 3, 1, "", "parent"], [133, 3, 1, "", "parent_axis"], [133, 3, 1, "", "parent_point"], [133, 3, 1, "", "speeds"]], "sympy.physics.mechanics.joint.PinJoint": [[133, 3, 1, "", "joint_axis"]], "sympy.physics.mechanics.joint.PlanarJoint": [[133, 3, 1, "", "planar_coordinates"], [133, 3, 1, "", "planar_speeds"], [133, 3, 1, "", "planar_vectors"], [133, 3, 1, "", "rotation_axis"], [133, 3, 1, "", "rotation_coordinate"], [133, 3, 1, "", "rotation_speed"]], "sympy.physics.mechanics.joint.PrismaticJoint": [[133, 3, 1, "", "joint_axis"]], "sympy.physics.mechanics.jointsmethod": [[133, 1, 1, "", "JointsMethod"]], "sympy.physics.mechanics.jointsmethod.JointsMethod": [[133, 3, 1, "", "bodies"], [133, 3, 1, "", "forcing"], [133, 3, 1, "", "forcing_full"], [133, 2, 1, "", "form_eoms"], [133, 3, 1, "", "kdes"], [133, 3, 1, "", "loads"], [133, 3, 1, "", "mass_matrix"], [133, 3, 1, "", "mass_matrix_full"], [133, 3, 1, "", "method"], [133, 3, 1, "", "q"], [133, 2, 1, "", "rhs"], [133, 3, 1, "", "u"]], "sympy.physics.mechanics.kane": [[134, 1, 1, "", "KanesMethod"]], "sympy.physics.mechanics.kane.KanesMethod": [[134, 3, 1, "", "auxiliary_eqs"], [134, 3, 1, "", "forcing"], [134, 3, 1, "", "forcing_full"], [134, 3, 1, "", "forcing_kin"], [134, 2, 1, "", "kanes_equations"], [134, 2, 1, "", "kindiffdict"], [134, 2, 1, "", "linearize"], [134, 3, 1, "", "mass_matrix"], [134, 3, 1, "", "mass_matrix_full"], [134, 3, 1, "", "mass_matrix_kin"], [134, 2, 1, "", "rhs"], [134, 2, 1, "", "to_linearizer"]], "sympy.physics.mechanics.lagrange": [[134, 1, 1, "", "LagrangesMethod"]], "sympy.physics.mechanics.lagrange.LagrangesMethod": [[134, 3, 1, "", "forcing"], [134, 3, 1, "", "forcing_full"], [134, 2, 1, "", "form_lagranges_equations"], [134, 2, 1, "", "linearize"], [134, 3, 1, "", "mass_matrix"], [134, 3, 1, "", "mass_matrix_full"], [134, 2, 1, "", "rhs"], [134, 2, 1, "", "solve_multipliers"], [134, 2, 1, "", "to_linearizer"]], "sympy.physics.mechanics.linearize": [[135, 1, 1, "", "Linearizer"]], "sympy.physics.mechanics.linearize.Linearizer": [[135, 2, 1, "", "__init__"], [135, 2, 1, "", "linearize"]], "sympy.physics.mechanics.loads": [[136, 1, 1, "", "Force"], [136, 1, 1, "", "Torque"]], "sympy.physics.mechanics.particle": [[136, 1, 1, "", "Particle"]], "sympy.physics.mechanics.particle.Particle": [[136, 2, 1, "", "angular_momentum"], [136, 2, 1, "", "kinetic_energy"], [136, 2, 1, "", "linear_momentum"], [136, 3, 1, "", "mass"], [136, 3, 1, "", "masscenter"], [136, 3, 1, "", "name"], [136, 2, 1, "", "parallel_axis"], [136, 3, 1, "", "point"], [136, 3, 1, "", "potential_energy"]], "sympy.physics.mechanics.pathway": [[137, 1, 1, "", "LinearPathway"], [137, 1, 1, "", "ObstacleSetPathway"], [137, 1, 1, "", "PathwayBase"], [137, 1, 1, "", "WrappingPathway"]], "sympy.physics.mechanics.pathway.LinearPathway": [[137, 3, 1, "", "extension_velocity"], [137, 3, 1, "", "length"], [137, 2, 1, "", "to_loads"]], "sympy.physics.mechanics.pathway.ObstacleSetPathway": [[137, 3, 1, "", "attachments"], [137, 3, 1, "", "extension_velocity"], [137, 3, 1, "", "length"], [137, 2, 1, "", "to_loads"]], "sympy.physics.mechanics.pathway.PathwayBase": [[137, 3, 1, "", "attachments"], [137, 3, 1, "", "extension_velocity"], [137, 3, 1, "", "length"], [137, 2, 1, "", "to_loads"]], "sympy.physics.mechanics.pathway.WrappingPathway": [[137, 3, 1, "", "extension_velocity"], [137, 3, 1, "", "geometry"], [137, 3, 1, "", "length"], [137, 2, 1, "", "to_loads"]], "sympy.physics.mechanics.rigidbody": [[136, 1, 1, "", "RigidBody"]], "sympy.physics.mechanics.rigidbody.RigidBody": [[136, 2, 1, "", "angular_momentum"], [136, 3, 1, "", "central_inertia"], [136, 3, 1, "", "frame"], [136, 3, 1, "", "inertia"], [136, 2, 1, "", "kinetic_energy"], [136, 2, 1, "", "linear_momentum"], [136, 3, 1, "", "mass"], [136, 3, 1, "", "masscenter"], [136, 3, 1, "", "name"], [136, 2, 1, "", "parallel_axis"], [136, 3, 1, "", "potential_energy"], [136, 3, 1, "", "x"], [136, 3, 1, "", "y"], [136, 3, 1, "", "z"]], "sympy.physics.mechanics.system": [[139, 1, 1, "", "SymbolicSystem"]], "sympy.physics.mechanics.system.SymbolicSystem": [[139, 3, 1, "", "alg_con"], [139, 3, 1, "", "bodies"], [139, 3, 1, "", "comb_explicit_rhs"], [139, 3, 1, "", "comb_implicit_mat"], [139, 3, 1, "", "comb_implicit_rhs"], [139, 2, 1, "", "compute_explicit_form"], [139, 2, 1, "", "constant_symbols"], [139, 3, 1, "", "coordinates"], [139, 3, 1, "", "dyn_implicit_mat"], [139, 3, 1, "", "dyn_implicit_rhs"], [139, 2, 1, "", "dynamic_symbols"], [139, 3, 1, "", "kin_explicit_rhs"], [139, 3, 1, "", "loads"], [139, 3, 1, "", "speeds"], [139, 3, 1, "", "states"]], "sympy.physics.mechanics.wrapping_geometry": [[140, 1, 1, "", "WrappingCylinder"], [140, 1, 1, "", "WrappingGeometryBase"], [140, 1, 1, "", "WrappingSphere"]], "sympy.physics.mechanics.wrapping_geometry.WrappingCylinder": [[140, 3, 1, "", "axis"], [140, 2, 1, "", "geodesic_end_vectors"], [140, 2, 1, "", "geodesic_length"], [140, 3, 1, "", "point"], [140, 2, 1, "", "point_on_surface"], [140, 3, 1, "", "radius"]], "sympy.physics.mechanics.wrapping_geometry.WrappingGeometryBase": [[140, 2, 1, "", "geodesic_end_vectors"], [140, 2, 1, "", "geodesic_length"], [140, 3, 1, "", "point"], [140, 2, 1, "", "point_on_surface"]], "sympy.physics.mechanics.wrapping_geometry.WrappingSphere": [[140, 2, 1, "", "geodesic_end_vectors"], [140, 2, 1, "", "geodesic_length"], [140, 3, 1, "", "point"], [140, 2, 1, "", "point_on_surface"], [140, 3, 1, "", "radius"]], "sympy.physics.optics": [[160, 0, 0, "-", "gaussopt"], [162, 0, 0, "-", "medium"], [163, 0, 0, "-", "polarization"], [164, 0, 0, "-", "utils"], [165, 0, 0, "-", "waves"]], "sympy.physics.optics.gaussopt": [[160, 1, 1, "", "BeamParameter"], [160, 1, 1, "", "CurvedMirror"], [160, 1, 1, "", "CurvedRefraction"], [160, 1, 1, "", "FlatMirror"], [160, 1, 1, "", "FlatRefraction"], [160, 1, 1, "", "FreeSpace"], [160, 1, 1, "", "GeometricRay"], [160, 1, 1, "", "RayTransferMatrix"], [160, 1, 1, "", "ThinLens"], [160, 4, 1, "", "conjugate_gauss_beams"], [160, 4, 1, "", "gaussian_conj"], [160, 4, 1, "", "geometric_conj_ab"], [160, 4, 1, "", "geometric_conj_af"], [160, 4, 1, "", "geometric_conj_bf"], [160, 4, 1, "", "rayleigh2waist"], [160, 4, 1, "", "waist2rayleigh"]], "sympy.physics.optics.gaussopt.BeamParameter": [[160, 3, 1, "", "divergence"], [160, 3, 1, "", "gouy"], [160, 3, 1, "", "q"], [160, 3, 1, "", "radius"], [160, 3, 1, "", "w"], [160, 3, 1, "", "w_0"], [160, 3, 1, "", "waist_approximation_limit"]], "sympy.physics.optics.gaussopt.GeometricRay": [[160, 3, 1, "", "angle"], [160, 3, 1, "", "height"]], "sympy.physics.optics.gaussopt.RayTransferMatrix": [[160, 3, 1, "", "A"], [160, 3, 1, "", "B"], [160, 3, 1, "", "C"], [160, 3, 1, "", "D"]], "sympy.physics.optics.medium": [[162, 1, 1, "", "Medium"]], "sympy.physics.optics.medium.Medium": [[162, 3, 1, "", "refractive_index"], [162, 3, 1, "", "speed"]], "sympy.physics.optics.polarization": [[163, 4, 1, "", "half_wave_retarder"], [163, 4, 1, "", "jones_2_stokes"], [163, 4, 1, "", "jones_vector"], [163, 4, 1, "", "linear_polarizer"], [163, 4, 1, "", "mueller_matrix"], [163, 4, 1, "", "phase_retarder"], [163, 4, 1, "", "polarizing_beam_splitter"], [163, 4, 1, "", "quarter_wave_retarder"], [163, 4, 1, "", "reflective_filter"], [163, 4, 1, "", "stokes_vector"], [163, 4, 1, "", "transmissive_filter"]], "sympy.physics.optics.utils": [[164, 4, 1, "", "brewster_angle"], [164, 4, 1, "", "critical_angle"], [164, 4, 1, "", "deviation"], [164, 4, 1, "", "fresnel_coefficients"], [164, 4, 1, "", "hyperfocal_distance"], [164, 4, 1, "", "lens_formula"], [164, 4, 1, "", "lens_makers_formula"], [164, 4, 1, "", "mirror_formula"], [164, 4, 1, "", "refraction_angle"], [164, 4, 1, "", "transverse_magnification"]], "sympy.physics.optics.waves": [[165, 1, 1, "", "TWave"]], "sympy.physics.optics.waves.TWave": [[165, 3, 1, "", "amplitude"], [165, 3, 1, "", "angular_velocity"], [165, 3, 1, "", "frequency"], [165, 3, 1, "", "n"], [165, 3, 1, "", "phase"], [165, 3, 1, "", "speed"], [165, 3, 1, "", "time_period"], [165, 3, 1, "", "wavelength"], [165, 3, 1, "", "wavenumber"]], "sympy.physics.paulialgebra": [[166, 4, 1, "", "evaluate_pauli_product"]], "sympy.physics.qho_1d": [[167, 4, 1, "", "E_n"], [167, 4, 1, "", "coherent_state"], [167, 4, 1, "", "psi_n"]], "sympy.physics.quantum": [[168, 0, 0, "-", "anticommutator"], [169, 0, 0, "-", "cartesian"], [170, 0, 0, "-", "cg"], [171, 0, 0, "-", "circuitplot"], [172, 0, 0, "-", "commutator"], [173, 0, 0, "-", "constants"], [174, 0, 0, "-", "dagger"], [175, 0, 0, "-", "gate"], [176, 0, 0, "-", "grover"], [177, 0, 0, "-", "hilbert"], [179, 0, 0, "-", "innerproduct"], [180, 0, 0, "-", "operator"], [181, 0, 0, "-", "operatorset"], [182, 0, 0, "-", "piab"], [183, 0, 0, "-", "qapply"], [184, 0, 0, "-", "qft"], [185, 0, 0, "-", "qubit"], [186, 0, 0, "-", "represent"], [187, 0, 0, "-", "shor"], [188, 0, 0, "-", "spin"], [189, 0, 0, "-", "state"], [190, 0, 0, "-", "tensorproduct"]], "sympy.physics.quantum.anticommutator": [[168, 1, 1, "", "AntiCommutator"]], "sympy.physics.quantum.anticommutator.AntiCommutator": [[168, 2, 1, "", "doit"]], "sympy.physics.quantum.cartesian": [[169, 1, 1, "", "PositionBra3D"], [169, 1, 1, "", "PositionKet3D"], [169, 1, 1, "", "PositionState3D"], [169, 1, 1, "", "PxBra"], [169, 1, 1, "", "PxKet"], [169, 1, 1, "", "PxOp"], [169, 1, 1, "", "XBra"], [169, 1, 1, "", "XKet"], [169, 1, 1, "", "XOp"], [169, 1, 1, "", "YOp"], [169, 1, 1, "", "ZOp"]], "sympy.physics.quantum.cartesian.PositionState3D": [[169, 3, 1, "", "position_x"], [169, 3, 1, "", "position_y"], [169, 3, 1, "", "position_z"]], "sympy.physics.quantum.cartesian.PxBra": [[169, 3, 1, "", "momentum"]], "sympy.physics.quantum.cartesian.PxKet": [[169, 3, 1, "", "momentum"]], "sympy.physics.quantum.cartesian.XBra": [[169, 3, 1, "", "position"]], "sympy.physics.quantum.cartesian.XKet": [[169, 3, 1, "", "position"]], "sympy.physics.quantum.cg": [[170, 1, 1, "", "CG"], [170, 1, 1, "", "Wigner3j"], [170, 1, 1, "", "Wigner6j"], [170, 1, 1, "", "Wigner9j"], [170, 4, 1, "", "cg_simp"]], "sympy.physics.quantum.circuitplot": [[171, 1, 1, "", "CircuitPlot"], [171, 4, 1, "", "CreateCGate"], [171, 1, 1, "", "Mx"], [171, 1, 1, "", "Mz"], [171, 4, 1, "", "circuit_plot"], [171, 4, 1, "", "labeller"]], "sympy.physics.quantum.circuitplot.CircuitPlot": [[171, 2, 1, "", "control_line"], [171, 2, 1, "", "control_point"], [171, 2, 1, "", "not_point"], [171, 2, 1, "", "one_qubit_box"], [171, 2, 1, "", "swap_point"], [171, 2, 1, "", "two_qubit_box"], [171, 2, 1, "", "update"]], "sympy.physics.quantum.commutator": [[172, 1, 1, "", "Commutator"]], "sympy.physics.quantum.commutator.Commutator": [[172, 2, 1, "", "doit"]], "sympy.physics.quantum.constants": [[173, 1, 1, "", "HBar"]], "sympy.physics.quantum.dagger": [[174, 1, 1, "", "Dagger"]], "sympy.physics.quantum.gate": [[175, 1, 1, "", "CGate"], [175, 1, 1, "", "CGateS"], [175, 5, 1, "", "CNOT"], [175, 1, 1, "", "CNotGate"], [175, 1, 1, "", "Gate"], [175, 5, 1, "", "H"], [175, 1, 1, "", "HadamardGate"], [175, 1, 1, "", "IdentityGate"], [175, 1, 1, "", "OneQubitGate"], [175, 5, 1, "", "Phase"], [175, 1, 1, "", "PhaseGate"], [175, 5, 1, "", "S"], [175, 5, 1, "", "SWAP"], [175, 1, 1, "", "SwapGate"], [175, 5, 1, "", "T"], [175, 1, 1, "", "TGate"], [175, 1, 1, "", "TwoQubitGate"], [175, 1, 1, "", "UGate"], [175, 5, 1, "", "X"], [175, 1, 1, "", "XGate"], [175, 5, 1, "", "Y"], [175, 1, 1, "", "YGate"], [175, 5, 1, "", "Z"], [175, 1, 1, "", "ZGate"], [175, 4, 1, "", "gate_simp"], [175, 4, 1, "", "gate_sort"], [175, 4, 1, "", "normalized"], [175, 4, 1, "", "random_circuit"]], "sympy.physics.quantum.gate.CGate": [[175, 3, 1, "", "controls"], [175, 2, 1, "", "decompose"], [175, 2, 1, "", "eval_controls"], [175, 3, 1, "", "gate"], [175, 3, 1, "", "min_qubits"], [175, 3, 1, "", "nqubits"], [175, 2, 1, "", "plot_gate"], [175, 3, 1, "", "targets"]], "sympy.physics.quantum.gate.CNotGate": [[175, 3, 1, "", "controls"], [175, 3, 1, "", "gate"], [175, 3, 1, "", "min_qubits"], [175, 3, 1, "", "targets"]], "sympy.physics.quantum.gate.Gate": [[175, 2, 1, "", "get_target_matrix"], [175, 3, 1, "", "min_qubits"], [175, 3, 1, "", "nqubits"], [175, 3, 1, "", "targets"]], "sympy.physics.quantum.gate.SwapGate": [[175, 2, 1, "", "decompose"]], "sympy.physics.quantum.gate.UGate": [[175, 2, 1, "", "get_target_matrix"], [175, 3, 1, "", "targets"]], "sympy.physics.quantum.grover": [[176, 1, 1, "", "OracleGate"], [176, 1, 1, "", "WGate"], [176, 4, 1, "", "apply_grover"], [176, 4, 1, "", "grover_iteration"], [176, 4, 1, "", "superposition_basis"]], "sympy.physics.quantum.grover.OracleGate": [[176, 3, 1, "", "search_function"], [176, 3, 1, "", "targets"]], "sympy.physics.quantum.hilbert": [[177, 1, 1, "", "ComplexSpace"], [177, 1, 1, "", "DirectSumHilbertSpace"], [177, 1, 1, "", "FockSpace"], [177, 1, 1, "", "HilbertSpace"], [177, 1, 1, "", "L2"], [177, 1, 1, "", "TensorPowerHilbertSpace"], [177, 1, 1, "", "TensorProductHilbertSpace"]], "sympy.physics.quantum.hilbert.DirectSumHilbertSpace": [[177, 2, 1, "", "eval"], [177, 3, 1, "", "spaces"]], "sympy.physics.quantum.hilbert.HilbertSpace": [[177, 3, 1, "", "dimension"]], "sympy.physics.quantum.hilbert.TensorProductHilbertSpace": [[177, 2, 1, "", "eval"], [177, 3, 1, "", "spaces"]], "sympy.physics.quantum.innerproduct": [[179, 1, 1, "", "InnerProduct"]], "sympy.physics.quantum.operator": [[180, 1, 1, "", "DifferentialOperator"], [180, 1, 1, "", "HermitianOperator"], [180, 1, 1, "", "IdentityOperator"], [180, 1, 1, "", "Operator"], [180, 1, 1, "", "OuterProduct"], [180, 1, 1, "", "UnitaryOperator"]], "sympy.physics.quantum.operator.DifferentialOperator": [[180, 3, 1, "", "expr"], [180, 3, 1, "", "free_symbols"], [180, 3, 1, "", "function"], [180, 3, 1, "", "variables"]], "sympy.physics.quantum.operator.OuterProduct": [[180, 3, 1, "", "bra"], [180, 3, 1, "", "ket"]], "sympy.physics.quantum.operatorset": [[181, 4, 1, "", "operators_to_state"], [181, 4, 1, "", "state_to_operators"]], "sympy.physics.quantum.piab": [[182, 1, 1, "", "PIABBra"], [182, 1, 1, "", "PIABHamiltonian"], [182, 1, 1, "", "PIABKet"]], "sympy.physics.quantum.qapply": [[183, 4, 1, "", "qapply"]], "sympy.physics.quantum.qft": [[184, 1, 1, "", "IQFT"], [184, 1, 1, "", "QFT"], [184, 5, 1, "", "Rk"], [184, 1, 1, "", "RkGate"]], "sympy.physics.quantum.qft.IQFT": [[184, 2, 1, "", "decompose"]], "sympy.physics.quantum.qft.QFT": [[184, 2, 1, "", "decompose"]], "sympy.physics.quantum.qubit": [[185, 1, 1, "", "IntQubit"], [185, 1, 1, "", "IntQubitBra"], [185, 1, 1, "", "Qubit"], [185, 1, 1, "", "QubitBra"], [185, 4, 1, "", "matrix_to_density"], [185, 4, 1, "", "matrix_to_qubit"], [185, 4, 1, "", "measure_all"], [185, 4, 1, "", "measure_all_oneshot"], [185, 4, 1, "", "measure_partial"], [185, 4, 1, "", "measure_partial_oneshot"], [185, 4, 1, "", "qubit_to_matrix"]], "sympy.physics.quantum.represent": [[186, 4, 1, "", "enumerate_states"], [186, 4, 1, "", "get_basis"], [186, 4, 1, "", "integrate_result"], [186, 4, 1, "", "rep_expectation"], [186, 4, 1, "", "rep_innerproduct"], [186, 4, 1, "", "represent"]], "sympy.physics.quantum.shor": [[187, 1, 1, "", "CMod"], [187, 4, 1, "", "period_find"], [187, 4, 1, "", "shor"]], "sympy.physics.quantum.shor.CMod": [[187, 3, 1, "", "N"], [187, 3, 1, "", "a"], [187, 3, 1, "", "t"]], "sympy.physics.quantum.spin": [[188, 1, 1, "", "J2Op"], [188, 1, 1, "", "JxBra"], [188, 1, 1, "", "JxBraCoupled"], [188, 1, 1, "", "JxKet"], [188, 1, 1, "", "JxKetCoupled"], [188, 1, 1, "", "JyBra"], [188, 1, 1, "", "JyBraCoupled"], [188, 1, 1, "", "JyKet"], [188, 1, 1, "", "JyKetCoupled"], [188, 1, 1, "", "JzBra"], [188, 1, 1, "", "JzBraCoupled"], [188, 1, 1, "", "JzKet"], [188, 1, 1, "", "JzKetCoupled"], [188, 1, 1, "", "JzOp"], [188, 1, 1, "", "Rotation"], [188, 1, 1, "", "WignerD"], [188, 4, 1, "", "couple"], [188, 4, 1, "", "uncouple"]], "sympy.physics.quantum.spin.Rotation": [[188, 2, 1, "", "D"], [188, 2, 1, "", "d"]], "sympy.physics.quantum.state": [[189, 1, 1, "", "Bra"], [189, 1, 1, "", "BraBase"], [189, 1, 1, "", "Ket"], [189, 1, 1, "", "KetBase"], [189, 1, 1, "", "OrthogonalBra"], [189, 1, 1, "", "OrthogonalKet"], [189, 1, 1, "", "OrthogonalState"], [189, 1, 1, "", "State"], [189, 1, 1, "", "StateBase"], [189, 1, 1, "", "TimeDepBra"], [189, 1, 1, "", "TimeDepKet"], [189, 1, 1, "", "TimeDepState"], [189, 1, 1, "", "Wavefunction"]], "sympy.physics.quantum.state.StateBase": [[189, 3, 1, "", "dual"], [189, 2, 1, "", "dual_class"], [189, 3, 1, "", "operators"]], "sympy.physics.quantum.state.TimeDepState": [[189, 3, 1, "", "label"], [189, 3, 1, "", "time"]], "sympy.physics.quantum.state.Wavefunction": [[189, 3, 1, "", "expr"], [189, 3, 1, "", "is_commutative"], [189, 3, 1, "", "is_normalized"], [189, 3, 1, "", "limits"], [189, 3, 1, "", "norm"], [189, 2, 1, "", "normalize"], [189, 2, 1, "", "prob"], [189, 3, 1, "", "variables"]], "sympy.physics.quantum.tensorproduct": [[190, 1, 1, "", "TensorProduct"], [190, 4, 1, "", "tensor_product_simp"]], "sympy.physics.secondquant": [[191, 1, 1, "", "AnnihilateBoson"], [191, 1, 1, "", "AnnihilateFermion"], [191, 1, 1, "", "AntiSymmetricTensor"], [191, 5, 1, "", "B"], [191, 5, 1, "", "BBra"], [191, 5, 1, "", "BKet"], [191, 5, 1, "", "Bd"], [191, 1, 1, "", "BosonicBasis"], [191, 1, 1, "", "Commutator"], [191, 1, 1, "", "CreateBoson"], [191, 1, 1, "", "CreateFermion"], [191, 1, 1, "", "Dagger"], [191, 5, 1, "", "F"], [191, 5, 1, "", "FBra"], [191, 5, 1, "", "FKet"], [191, 5, 1, "", "Fd"], [191, 1, 1, "", "FixedBosonicBasis"], [191, 1, 1, "", "FockState"], [191, 1, 1, "", "FockStateBosonBra"], [191, 1, 1, "", "FockStateBosonKet"], [191, 1, 1, "", "FockStateBra"], [191, 1, 1, "", "FockStateFermionBra"], [191, 1, 1, "", "FockStateFermionKet"], [191, 1, 1, "", "FockStateKet"], [191, 1, 1, "", "InnerProduct"], [191, 1, 1, "", "KroneckerDelta"], [191, 1, 1, "", "NO"], [191, 1, 1, "", "PermutationOperator"], [191, 1, 1, "", "VarBosonicBasis"], [191, 4, 1, "", "apply_operators"], [191, 4, 1, "", "contraction"], [191, 4, 1, "", "evaluate_deltas"], [191, 4, 1, "", "matrix_rep"], [191, 4, 1, "", "simplify_index_permutations"], [191, 4, 1, "", "substitute_dummies"], [191, 4, 1, "", "wicks"]], "sympy.physics.secondquant.AnnihilateBoson": [[191, 2, 1, "", "apply_operator"]], "sympy.physics.secondquant.AnnihilateFermion": [[191, 2, 1, "", "apply_operator"], [191, 3, 1, "", "is_only_q_annihilator"], [191, 3, 1, "", "is_only_q_creator"], [191, 3, 1, "", "is_q_annihilator"], [191, 3, 1, "", "is_q_creator"]], "sympy.physics.secondquant.AntiSymmetricTensor": [[191, 3, 1, "", "lower"], [191, 3, 1, "", "symbol"], [191, 3, 1, "", "upper"]], "sympy.physics.secondquant.Commutator": [[191, 2, 1, "", "doit"], [191, 2, 1, "", "eval"]], "sympy.physics.secondquant.CreateBoson": [[191, 2, 1, "", "apply_operator"]], "sympy.physics.secondquant.CreateFermion": [[191, 2, 1, "", "apply_operator"], [191, 3, 1, "", "is_only_q_annihilator"], [191, 3, 1, "", "is_only_q_creator"], [191, 3, 1, "", "is_q_annihilator"], [191, 3, 1, "", "is_q_creator"]], "sympy.physics.secondquant.Dagger": [[191, 2, 1, "", "eval"]], "sympy.physics.secondquant.FixedBosonicBasis": [[191, 2, 1, "", "index"], [191, 2, 1, "", "state"]], "sympy.physics.secondquant.InnerProduct": [[191, 3, 1, "", "bra"], [191, 3, 1, "", "ket"]], "sympy.physics.secondquant.KroneckerDelta": [[191, 2, 1, "", "eval"], [191, 3, 1, "", "indices_contain_equal_information"], [191, 3, 1, "", "is_above_fermi"], [191, 3, 1, "", "is_below_fermi"], [191, 3, 1, "", "is_only_above_fermi"], [191, 3, 1, "", "is_only_below_fermi"], [191, 3, 1, "", "killable_index"], [191, 3, 1, "", "preferred_index"]], "sympy.physics.secondquant.NO": [[191, 2, 1, "", "doit"], [191, 2, 1, "", "get_subNO"], [191, 3, 1, "", "has_q_annihilators"], [191, 3, 1, "", "has_q_creators"], [191, 2, 1, "", "iter_q_annihilators"], [191, 2, 1, "", "iter_q_creators"]], "sympy.physics.secondquant.PermutationOperator": [[191, 2, 1, "", "get_permuted"]], "sympy.physics.secondquant.VarBosonicBasis": [[191, 2, 1, "", "index"], [191, 2, 1, "", "state"]], "sympy.physics.sho": [[192, 4, 1, "", "E_nl"], [192, 4, 1, "", "R_nl"]], "sympy.physics.units": [[193, 0, 0, "-", "dimensions"], [197, 0, 0, "-", "prefixes"], [198, 0, 0, "-", "quantities"], [199, 0, 0, "-", "unitsystem"], [198, 0, 0, "-", "util"]], "sympy.physics.units.dimensions": [[193, 1, 1, "", "Dimension"], [193, 1, 1, "", "DimensionSystem"]], "sympy.physics.units.dimensions.Dimension": [[193, 2, 1, "", "has_integer_powers"]], "sympy.physics.units.dimensions.DimensionSystem": [[193, 3, 1, "", "can_transf_matrix"], [193, 3, 1, "", "dim"], [193, 2, 1, "", "dim_can_vector"], [193, 2, 1, "", "dim_vector"], [193, 3, 1, "", "inv_can_transf_matrix"], [193, 3, 1, "", "is_consistent"], [193, 2, 1, "", "is_dimensionless"], [193, 3, 1, "", "list_can_dims"], [193, 2, 1, "", "print_dim_base"]], "sympy.physics.units.prefixes": [[197, 1, 1, "", "Prefix"]], "sympy.physics.units.quantities": [[198, 1, 1, "", "Quantity"]], "sympy.physics.units.quantities.Quantity": [[198, 3, 1, "", "abbrev"], [198, 2, 1, "", "convert_to"], [198, 3, 1, "", "free_symbols"], [198, 3, 1, "", "is_prefixed"], [198, 3, 1, "", "scale_factor"], [198, 2, 1, "", "set_global_relative_scale_factor"]], "sympy.physics.units.unitsystem": [[199, 1, 1, "", "UnitSystem"]], "sympy.physics.units.unitsystem.UnitSystem": [[199, 3, 1, "", "dim"], [199, 2, 1, "", "extend"], [199, 2, 1, "", "get_units_non_prefixed"], [199, 3, 1, "", "is_consistent"]], "sympy.physics.units.util": [[198, 4, 1, "", "convert_to"]], "sympy.physics.vector.dyadic": [[201, 1, 1, "", "Dyadic"]], "sympy.physics.vector.dyadic.Dyadic": [[201, 2, 1, "", "applyfunc"], [201, 2, 1, "", "cross"], [201, 2, 1, "", "doit"], [201, 2, 1, "", "dot"], [201, 2, 1, "", "dt"], [201, 2, 1, "", "express"], [201, 3, 1, "", "func"], [201, 2, 1, "", "simplify"], [201, 2, 1, "", "subs"], [201, 2, 1, "", "to_matrix"], [201, 2, 1, "", "xreplace"]], "sympy.physics.vector": [[203, 4, 1, "", "dynamicsymbols"], [205, 0, 0, "-", "functions"], [205, 0, 0, "-", "point"]], "sympy.physics.vector.fieldfunctions": [[202, 4, 1, "", "curl"], [202, 4, 1, "", "divergence"], [202, 4, 1, "", "gradient"], [202, 4, 1, "", "is_conservative"], [202, 4, 1, "", "is_solenoidal"], [202, 4, 1, "", "scalar_potential"], [202, 4, 1, "", "scalar_potential_difference"]], "sympy.physics.vector.frame": [[201, 1, 1, "", "CoordinateSym"], [201, 1, 1, "", "ReferenceFrame"]], "sympy.physics.vector.frame.ReferenceFrame": [[201, 2, 1, "", "ang_acc_in"], [201, 2, 1, "", "ang_vel_in"], [201, 2, 1, "", "dcm"], [201, 2, 1, "", "orient"], [201, 2, 1, "", "orient_axis"], [201, 2, 1, "", "orient_body_fixed"], [201, 2, 1, "", "orient_explicit"], [201, 2, 1, "", "orient_quaternion"], [201, 2, 1, "", "orient_space_fixed"], [201, 2, 1, "", "orientnew"], [201, 2, 1, "", "partial_velocity"], [201, 2, 1, "", "set_ang_acc"], [201, 2, 1, "", "set_ang_vel"], [201, 3, 1, "", "u"], [201, 2, 1, "", "variable_map"], [201, 3, 1, "", "x"], [201, 3, 1, "", "xx"], [201, 3, 1, "", "xy"], [201, 3, 1, "", "xz"], [201, 3, 1, "", "y"], [201, 3, 1, "", "yx"], [201, 3, 1, "", "yy"], [201, 3, 1, "", "yz"], [201, 3, 1, "", "z"], [201, 3, 1, "", "zx"], [201, 3, 1, "", "zy"], [201, 3, 1, "", "zz"]], "sympy.physics.vector.functions": [[203, 4, 1, "", "cross"], [203, 4, 1, "", "dot"], [203, 4, 1, "", "express"], [205, 4, 1, "", "get_motion_params"], [205, 4, 1, "", "kinematic_equations"], [203, 4, 1, "", "outer"], [205, 4, 1, "", "partial_velocity"], [203, 4, 1, "", "time_derivative"]], "sympy.physics.vector.point": [[205, 1, 1, "", "Point"]], "sympy.physics.vector.point.Point": [[205, 2, 1, "", "a1pt_theory"], [205, 2, 1, "", "a2pt_theory"], [205, 2, 1, "", "acc"], [205, 2, 1, "", "locatenew"], [205, 2, 1, "", "partial_velocity"], [205, 2, 1, "", "pos_from"], [205, 2, 1, "", "set_acc"], [205, 2, 1, "", "set_pos"], [205, 2, 1, "", "set_vel"], [205, 2, 1, "", "v1pt_theory"], [205, 2, 1, "", "v2pt_theory"], [205, 2, 1, "", "vel"]], "sympy.physics.vector.printing": [[206, 4, 1, "", "init_vprinting"], [206, 4, 1, "", "vlatex"], [206, 4, 1, "", "vpprint"], [206, 4, 1, "", "vprint"]], "sympy.physics.vector.vector": [[201, 1, 1, "", "Vector"]], "sympy.physics.vector.vector.Vector": [[201, 2, 1, "", "angle_between"], [201, 2, 1, "", "applyfunc"], [201, 2, 1, "", "cross"], [201, 2, 1, "", "diff"], [201, 2, 1, "", "doit"], [201, 2, 1, "", "dot"], [201, 2, 1, "", "dt"], [201, 2, 1, "", "express"], [201, 2, 1, "", "free_dynamicsymbols"], [201, 2, 1, "", "free_symbols"], [201, 3, 1, "", "func"], [201, 2, 1, "", "magnitude"], [201, 2, 1, "", "normalize"], [201, 2, 1, "", "outer"], [201, 2, 1, "", "separate"], [201, 2, 1, "", "simplify"], [201, 2, 1, "", "subs"], [201, 2, 1, "", "to_matrix"], [201, 2, 1, "", "xreplace"]], "sympy.physics.wigner": [[211, 4, 1, "", "clebsch_gordan"], [211, 4, 1, "", "dot_rot_grad_Ynm"], [211, 4, 1, "", "gaunt"], [211, 4, 1, "", "racah"], [211, 4, 1, "", "real_gaunt"], [211, 4, 1, "", "wigner_3j"], [211, 4, 1, "", "wigner_6j"], [211, 4, 1, "", "wigner_9j"], [211, 4, 1, "", "wigner_d"], [211, 4, 1, "", "wigner_d_small"]], "sympy.plotting": [[212, 0, 0, "-", "plot"], [212, 0, 0, "-", "pygletplot"]], "sympy.plotting.plot": [[212, 1, 1, "", "MatplotlibBackend"], [212, 1, 1, "", "Plot"], [212, 1, 1, "", "PlotGrid"], [212, 1, 1, "", "TextBackend"], [212, 4, 1, "", "plot"], [212, 4, 1, "", "plot3d"], [212, 4, 1, "", "plot3d_parametric_line"], [212, 4, 1, "", "plot3d_parametric_surface"], [212, 4, 1, "", "plot_parametric"]], "sympy.plotting.plot.MatplotlibBackend": [[212, 2, 1, "", "get_segments"], [212, 2, 1, "", "process_series"]], "sympy.plotting.plot.Plot": [[212, 3, 1, "", "annotations"], [212, 2, 1, "", "append"], [212, 2, 1, "", "extend"], [212, 3, 1, "", "fill"], [212, 3, 1, "", "markers"], [212, 3, 1, "", "rectangles"]], "sympy.plotting.plot_implicit": [[212, 4, 1, "", "plot_implicit"]], "sympy.plotting.series": [[212, 1, 1, "", "BaseSeries"], [212, 1, 1, "", "ImplicitSeries"], [212, 1, 1, "", "Line2DBaseSeries"], [212, 1, 1, "", "Line3DBaseSeries"], [212, 1, 1, "", "LineOver1DRangeSeries"], [212, 1, 1, "", "Parametric2DLineSeries"], [212, 1, 1, "", "Parametric3DLineSeries"], [212, 1, 1, "", "ParametricSurfaceSeries"], [212, 1, 1, "", "SurfaceBaseSeries"], [212, 1, 1, "", "SurfaceOver2DRangeSeries"]], "sympy.plotting.series.BaseSeries": [[212, 2, 1, "", "eval_color_func"], [212, 3, 1, "", "expr"], [212, 2, 1, "", "get_data"], [212, 2, 1, "", "get_label"], [212, 3, 1, "", "n"], [212, 3, 1, "", "params"]], "sympy.plotting.series.ImplicitSeries": [[212, 2, 1, "", "get_data"], [212, 2, 1, "", "get_label"]], "sympy.plotting.series.Line2DBaseSeries": [[212, 2, 1, "", "get_data"]], "sympy.plotting.series.LineOver1DRangeSeries": [[212, 2, 1, "", "get_points"]], "sympy.plotting.series.ParametricSurfaceSeries": [[212, 2, 1, "", "get_data"], [212, 2, 1, "", "get_meshes"]], "sympy.plotting.series.SurfaceOver2DRangeSeries": [[212, 2, 1, "", "get_data"], [212, 2, 1, "", "get_meshes"]], "sympy.plotting.textplot": [[212, 4, 1, "", "textplot"]], "sympy.polys.agca.extensions": [[213, 1, 1, "", "ExtensionElement"], [213, 1, 1, "", "MonogenicFiniteExtension"]], "sympy.polys.agca.extensions.ExtensionElement": [[213, 2, 1, "", "inverse"]], "sympy.polys.agca.extensions.MonogenicFiniteExtension": [[213, 5, 1, "", "dtype"]], "sympy.polys.agca.homomorphisms": [[213, 1, 1, "", "ModuleHomomorphism"], [213, 4, 1, "", "homomorphism"]], "sympy.polys.agca.homomorphisms.ModuleHomomorphism": [[213, 2, 1, "", "image"], [213, 2, 1, "", "is_injective"], [213, 2, 1, "", "is_isomorphism"], [213, 2, 1, "", "is_surjective"], [213, 2, 1, "", "is_zero"], [213, 2, 1, "", "kernel"], [213, 2, 1, "", "quotient_codomain"], [213, 2, 1, "", "quotient_domain"], [213, 2, 1, "", "restrict_codomain"], [213, 2, 1, "", "restrict_domain"]], "sympy.polys.agca.ideals": [[213, 1, 1, "", "Ideal"]], "sympy.polys.agca.ideals.Ideal": [[213, 2, 1, "", "contains"], [213, 2, 1, "", "depth"], [213, 2, 1, "", "height"], [213, 2, 1, "", "intersect"], [213, 2, 1, "", "is_maximal"], [213, 2, 1, "", "is_primary"], [213, 2, 1, "", "is_prime"], [213, 2, 1, "", "is_principal"], [213, 2, 1, "", "is_radical"], [213, 2, 1, "", "is_whole_ring"], [213, 2, 1, "", "is_zero"], [213, 2, 1, "", "product"], [213, 2, 1, "", "quotient"], [213, 2, 1, "", "radical"], [213, 2, 1, "", "reduce_element"], [213, 2, 1, "", "saturate"], [213, 2, 1, "", "subset"], [213, 2, 1, "", "union"]], "sympy.polys.agca.modules": [[213, 1, 1, "", "FreeModule"], [213, 1, 1, "", "FreeModuleElement"], [213, 1, 1, "", "Module"], [213, 1, 1, "", "QuotientModule"], [213, 1, 1, "", "QuotientModuleElement"], [213, 1, 1, "", "SubModule"], [213, 1, 1, "", "SubQuotientModule"]], "sympy.polys.agca.modules.FreeModule": [[213, 2, 1, "", "basis"], [213, 2, 1, "", "convert"], [213, 5, 1, "", "dtype"], [213, 2, 1, "", "identity_hom"], [213, 2, 1, "", "is_submodule"], [213, 2, 1, "", "is_zero"], [213, 2, 1, "", "multiply_ideal"], [213, 2, 1, "", "quotient_module"]], "sympy.polys.agca.modules.Module": [[213, 2, 1, "", "contains"], [213, 2, 1, "", "convert"], [213, 2, 1, "", "identity_hom"], [213, 2, 1, "", "is_submodule"], [213, 2, 1, "", "is_zero"], [213, 2, 1, "", "multiply_ideal"], [213, 2, 1, "", "quotient_module"], [213, 2, 1, "", "submodule"], [213, 2, 1, "", "subset"]], "sympy.polys.agca.modules.QuotientModule": [[213, 2, 1, "", "convert"], [213, 5, 1, "", "dtype"], [213, 2, 1, "", "identity_hom"], [213, 2, 1, "", "is_submodule"], [213, 2, 1, "", "is_zero"], [213, 2, 1, "", "quotient_hom"], [213, 2, 1, "", "submodule"]], "sympy.polys.agca.modules.QuotientModuleElement": [[213, 2, 1, "", "eq"]], "sympy.polys.agca.modules.SubModule": [[213, 2, 1, "", "convert"], [213, 2, 1, "", "identity_hom"], [213, 2, 1, "", "in_terms_of_generators"], [213, 2, 1, "", "inclusion_hom"], [213, 2, 1, "", "intersect"], [213, 2, 1, "", "is_full_module"], [213, 2, 1, "", "is_submodule"], [213, 2, 1, "", "is_zero"], [213, 2, 1, "", "module_quotient"], [213, 2, 1, "", "multiply_ideal"], [213, 2, 1, "", "quotient_module"], [213, 2, 1, "", "reduce_element"], [213, 2, 1, "", "submodule"], [213, 2, 1, "", "syzygy_module"], [213, 2, 1, "", "union"]], "sympy.polys.agca.modules.SubQuotientModule": [[213, 2, 1, "", "is_full_module"], [213, 2, 1, "", "quotient_hom"]], "sympy.polys.appellseqs": [[222, 4, 1, "", "andre_poly"], [222, 4, 1, "", "bernoulli_c_poly"], [222, 4, 1, "", "bernoulli_poly"], [222, 4, 1, "", "euler_poly"], [222, 4, 1, "", "genocchi_poly"]], "sympy.polys.constructor": [[222, 4, 1, "", "construct_domain"]], "sympy.polys.densearith": [[219, 4, 1, "", "dmp_abs"], [219, 4, 1, "", "dmp_add"], [219, 4, 1, "", "dmp_add_ground"], [219, 4, 1, "", "dmp_add_mul"], [219, 4, 1, "", "dmp_add_term"], [219, 4, 1, "", "dmp_div"], [219, 4, 1, "", "dmp_expand"], [219, 4, 1, "", "dmp_exquo"], [219, 4, 1, "", "dmp_exquo_ground"], [219, 4, 1, "", "dmp_ff_div"], [219, 4, 1, "", "dmp_l1_norm"], [219, 4, 1, "", "dmp_max_norm"], [219, 4, 1, "", "dmp_mul"], [219, 4, 1, "", "dmp_mul_ground"], [219, 4, 1, "", "dmp_mul_term"], [219, 4, 1, "", "dmp_neg"], [219, 4, 1, "", "dmp_pdiv"], [219, 4, 1, "", "dmp_pexquo"], [219, 4, 1, "", "dmp_pow"], [219, 4, 1, "", "dmp_pquo"], [219, 4, 1, "", "dmp_prem"], [219, 4, 1, "", "dmp_quo"], [219, 4, 1, "", "dmp_quo_ground"], [219, 4, 1, "", "dmp_rem"], [219, 4, 1, "", "dmp_rr_div"], [219, 4, 1, "", "dmp_sqr"], [219, 4, 1, "", "dmp_sub"], [219, 4, 1, "", "dmp_sub_ground"], [219, 4, 1, "", "dmp_sub_mul"], [219, 4, 1, "", "dmp_sub_term"], [219, 4, 1, "", "dup_lshift"], [219, 4, 1, "", "dup_rshift"]], "sympy.polys.densebasic": [[219, 4, 1, "", "dmp_LC"], [219, 4, 1, "", "dmp_TC"], [219, 4, 1, "", "dmp_apply_pairs"], [219, 4, 1, "", "dmp_convert"], [219, 4, 1, "", "dmp_copy"], [219, 4, 1, "", "dmp_deflate"], [219, 4, 1, "", "dmp_degree"], [219, 4, 1, "", "dmp_degree_in"], [219, 4, 1, "", "dmp_degree_list"], [219, 4, 1, "", "dmp_eject"], [219, 4, 1, "", "dmp_exclude"], [219, 4, 1, "", "dmp_from_dict"], [219, 4, 1, "", "dmp_from_sympy"], [219, 4, 1, "", "dmp_ground"], [219, 4, 1, "", "dmp_ground_LC"], [219, 4, 1, "", "dmp_ground_TC"], [219, 4, 1, "", "dmp_ground_nth"], [219, 4, 1, "", "dmp_ground_p"], [219, 4, 1, "", "dmp_grounds"], [219, 4, 1, "", "dmp_include"], [219, 4, 1, "", "dmp_inflate"], [219, 4, 1, "", "dmp_inject"], [219, 4, 1, "", "dmp_list_terms"], [219, 4, 1, "", "dmp_multi_deflate"], [219, 4, 1, "", "dmp_negative_p"], [219, 4, 1, "", "dmp_nest"], [219, 4, 1, "", "dmp_normal"], [219, 4, 1, "", "dmp_nth"], [219, 4, 1, "", "dmp_one"], [219, 4, 1, "", "dmp_one_p"], [219, 4, 1, "", "dmp_permute"], [219, 4, 1, "", "dmp_positive_p"], [219, 4, 1, "", "dmp_raise"], [219, 4, 1, "", "dmp_slice"], [219, 4, 1, "", "dmp_strip"], [219, 4, 1, "", "dmp_swap"], [219, 4, 1, "", "dmp_terms_gcd"], [219, 4, 1, "", "dmp_to_dict"], [219, 4, 1, "", "dmp_to_tuple"], [219, 4, 1, "", "dmp_true_LT"], [219, 4, 1, "", "dmp_validate"], [219, 4, 1, "", "dmp_zero"], [219, 4, 1, "", "dmp_zero_p"], [219, 4, 1, "", "dmp_zeros"], [219, 4, 1, "", "dup_random"], [219, 4, 1, "", "dup_reverse"]], "sympy.polys.densetools": [[219, 4, 1, "", "dmp_clear_denoms"], [219, 4, 1, "", "dmp_compose"], [219, 4, 1, "", "dmp_diff"], [219, 4, 1, "", "dmp_diff_eval_in"], [219, 4, 1, "", "dmp_diff_in"], [219, 4, 1, "", "dmp_eval"], [219, 4, 1, "", "dmp_eval_in"], [219, 4, 1, "", "dmp_eval_tail"], [219, 4, 1, "", "dmp_ground_content"], [219, 4, 1, "", "dmp_ground_extract"], [219, 4, 1, "", "dmp_ground_monic"], [219, 4, 1, "", "dmp_ground_primitive"], [219, 4, 1, "", "dmp_ground_trunc"], [219, 4, 1, "", "dmp_integrate"], [219, 4, 1, "", "dmp_integrate_in"], [219, 4, 1, "", "dmp_lift"], [219, 4, 1, "", "dmp_revert"], [219, 4, 1, "", "dmp_trunc"], [219, 4, 1, "", "dup_content"], [219, 4, 1, "", "dup_decompose"], [219, 4, 1, "", "dup_extract"], [219, 4, 1, "", "dup_mirror"], [219, 4, 1, "", "dup_monic"], [219, 4, 1, "", "dup_primitive"], [219, 4, 1, "", "dup_real_imag"], [219, 4, 1, "", "dup_scale"], [219, 4, 1, "", "dup_shift"], [219, 4, 1, "", "dup_sign_variations"], [219, 4, 1, "", "dup_transform"]], "sympy.polys.dispersion": [[222, 4, 1, "", "dispersion"], [222, 4, 1, "", "dispersionset"]], "sympy.polys.distributedmodules": [[219, 4, 1, "", "sdm_LC"], [219, 4, 1, "", "sdm_LM"], [219, 4, 1, "", "sdm_LT"], [219, 4, 1, "", "sdm_add"], [219, 4, 1, "", "sdm_deg"], [219, 4, 1, "", "sdm_ecart"], [219, 4, 1, "", "sdm_from_dict"], [219, 4, 1, "", "sdm_from_vector"], [219, 4, 1, "", "sdm_groebner"], [219, 4, 1, "", "sdm_monomial_deg"], [219, 4, 1, "", "sdm_monomial_divides"], [219, 4, 1, "", "sdm_monomial_mul"], [219, 4, 1, "", "sdm_mul_term"], [219, 4, 1, "", "sdm_nf_mora"], [219, 4, 1, "", "sdm_spoly"], [219, 4, 1, "", "sdm_to_dict"], [219, 4, 1, "", "sdm_to_vector"], [219, 4, 1, "", "sdm_zero"]], "sympy.polys.domains": [[217, 1, 1, "", "AlgebraicField"], [217, 1, 1, "", "ComplexField"], [217, 1, 1, "", "ExpressionDomain"], [217, 1, 1, "", "FiniteField"], [217, 1, 1, "", "FractionField"], [217, 1, 1, "", "GMPYFiniteField"], [217, 1, 1, "", "GMPYIntegerRing"], [217, 1, 1, "", "GMPYRationalField"], [217, 1, 1, "", "IntegerRing"], [217, 1, 1, "", "PolynomialRing"], [217, 1, 1, "", "PythonFiniteField"], [217, 1, 1, "", "PythonIntegerRing"], [217, 1, 1, "", "PythonRationalField"], [217, 1, 1, "", "RationalField"], [217, 1, 1, "", "RealField"]], "sympy.polys.domains.AlgebraicField": [[217, 2, 1, "", "algebraic_field"], [217, 2, 1, "", "denom"], [217, 2, 1, "", "discriminant"], [217, 5, 1, "", "dtype"], [217, 5, 1, "", "ext"], [217, 2, 1, "", "from_AlgebraicField"], [217, 2, 1, "", "from_GaussianIntegerRing"], [217, 2, 1, "", "from_GaussianRationalField"], [217, 2, 1, "", "from_QQ"], [217, 2, 1, "", "from_QQ_gmpy"], [217, 2, 1, "", "from_QQ_python"], [217, 2, 1, "", "from_RealField"], [217, 2, 1, "", "from_ZZ"], [217, 2, 1, "", "from_ZZ_gmpy"], [217, 2, 1, "", "from_ZZ_python"], [217, 2, 1, "", "from_sympy"], [217, 2, 1, "", "galois_group"], [217, 2, 1, "", "get_ring"], [217, 2, 1, "", "integral_basis"], [217, 2, 1, "", "is_negative"], [217, 2, 1, "", "is_nonnegative"], [217, 2, 1, "", "is_nonpositive"], [217, 2, 1, "", "is_positive"], [217, 2, 1, "", "maximal_order"], [217, 5, 1, "", "mod"], [217, 2, 1, "", "numer"], [217, 5, 1, "", "orig_ext"], [217, 2, 1, "", "primes_above"], [217, 2, 1, "", "to_alg_num"], [217, 2, 1, "", "to_sympy"]], "sympy.polys.domains.ComplexField": [[217, 2, 1, "", "almosteq"], [217, 2, 1, "", "exsqrt"], [217, 2, 1, "", "from_sympy"], [217, 2, 1, "", "gcd"], [217, 2, 1, "", "get_exact"], [217, 2, 1, "", "get_ring"], [217, 2, 1, "", "is_negative"], [217, 2, 1, "", "is_nonnegative"], [217, 2, 1, "", "is_nonpositive"], [217, 2, 1, "", "is_positive"], [217, 2, 1, "", "is_square"], [217, 2, 1, "", "lcm"], [217, 2, 1, "", "to_sympy"]], "sympy.polys.domains.ExpressionDomain": [[217, 1, 1, "", "Expression"], [217, 2, 1, "", "denom"], [217, 5, 1, "", "dtype"], [217, 2, 1, "", "from_ExpressionDomain"], [217, 2, 1, "", "from_FractionField"], [217, 2, 1, "", "from_GaussianIntegerRing"], [217, 2, 1, "", "from_GaussianRationalField"], [217, 2, 1, "", "from_PolynomialRing"], [217, 2, 1, "", "from_QQ"], [217, 2, 1, "", "from_QQ_gmpy"], [217, 2, 1, "", "from_QQ_python"], [217, 2, 1, "", "from_RealField"], [217, 2, 1, "", "from_ZZ"], [217, 2, 1, "", "from_ZZ_gmpy"], [217, 2, 1, "", "from_ZZ_python"], [217, 2, 1, "", "from_sympy"], [217, 2, 1, "", "get_field"], [217, 2, 1, "", "get_ring"], [217, 2, 1, "", "is_negative"], [217, 2, 1, "", "is_nonnegative"], [217, 2, 1, "", "is_nonpositive"], [217, 2, 1, "", "is_positive"], [217, 2, 1, "", "numer"], [217, 2, 1, "", "to_sympy"]], "sympy.polys.domains.FiniteField": [[217, 2, 1, "", "characteristic"], [217, 2, 1, "", "exsqrt"], [217, 2, 1, "", "from_FF"], [217, 2, 1, "", "from_FF_gmpy"], [217, 2, 1, "", "from_FF_python"], [217, 2, 1, "", "from_QQ"], [217, 2, 1, "", "from_QQ_gmpy"], [217, 2, 1, "", "from_QQ_python"], [217, 2, 1, "", "from_RealField"], [217, 2, 1, "", "from_ZZ"], [217, 2, 1, "", "from_ZZ_gmpy"], [217, 2, 1, "", "from_ZZ_python"], [217, 2, 1, "", "from_sympy"], [217, 2, 1, "", "get_field"], [217, 2, 1, "", "is_square"], [217, 2, 1, "", "to_int"], [217, 2, 1, "", "to_sympy"]], "sympy.polys.domains.FractionField": [[217, 2, 1, "", "denom"], [217, 2, 1, "", "factorial"], [217, 2, 1, "", "from_AlgebraicField"], [217, 2, 1, "", "from_ComplexField"], [217, 2, 1, "", "from_FractionField"], [217, 2, 1, "", "from_GaussianIntegerRing"], [217, 2, 1, "", "from_GaussianRationalField"], [217, 2, 1, "", "from_PolynomialRing"], [217, 2, 1, "", "from_QQ"], [217, 2, 1, "", "from_QQ_gmpy"], [217, 2, 1, "", "from_QQ_python"], [217, 2, 1, "", "from_RealField"], [217, 2, 1, "", "from_ZZ"], [217, 2, 1, "", "from_ZZ_gmpy"], [217, 2, 1, "", "from_ZZ_python"], [217, 2, 1, "", "from_sympy"], [217, 2, 1, "", "get_ring"], [217, 2, 1, "", "is_negative"], [217, 2, 1, "", "is_nonnegative"], [217, 2, 1, "", "is_nonpositive"], [217, 2, 1, "", "is_positive"], [217, 2, 1, "", "numer"], [217, 2, 1, "", "to_sympy"]], "sympy.polys.domains.GMPYIntegerRing": [[217, 2, 1, "", "factorial"], [217, 2, 1, "", "from_FF_gmpy"], [217, 2, 1, "", "from_FF_python"], [217, 2, 1, "", "from_QQ"], [217, 2, 1, "", "from_QQ_gmpy"], [217, 2, 1, "", "from_QQ_python"], [217, 2, 1, "", "from_RealField"], [217, 2, 1, "", "from_ZZ_gmpy"], [217, 2, 1, "", "from_ZZ_python"], [217, 2, 1, "", "from_sympy"], [217, 2, 1, "", "gcd"], [217, 2, 1, "", "gcdex"], [217, 2, 1, "", "lcm"], [217, 2, 1, "", "sqrt"], [217, 2, 1, "", "to_sympy"]], "sympy.polys.domains.GMPYRationalField": [[217, 2, 1, "", "denom"], [217, 2, 1, "", "div"], [217, 2, 1, "", "exquo"], [217, 2, 1, "", "factorial"], [217, 2, 1, "", "from_GaussianRationalField"], [217, 2, 1, "", "from_QQ_gmpy"], [217, 2, 1, "", "from_QQ_python"], [217, 2, 1, "", "from_RealField"], [217, 2, 1, "", "from_ZZ_gmpy"], [217, 2, 1, "", "from_ZZ_python"], [217, 2, 1, "", "from_sympy"], [217, 2, 1, "", "get_ring"], [217, 2, 1, "", "numer"], [217, 2, 1, "", "quo"], [217, 2, 1, "", "rem"], [217, 2, 1, "", "to_sympy"]], "sympy.polys.domains.IntegerRing": [[217, 2, 1, "", "algebraic_field"], [217, 2, 1, "", "exsqrt"], [217, 2, 1, "", "factorial"], [217, 2, 1, "", "from_AlgebraicField"], [217, 2, 1, "", "from_FF"], [217, 2, 1, "", "from_FF_gmpy"], [217, 2, 1, "", "from_FF_python"], [217, 2, 1, "", "from_QQ"], [217, 2, 1, "", "from_QQ_gmpy"], [217, 2, 1, "", "from_QQ_python"], [217, 2, 1, "", "from_RealField"], [217, 2, 1, "", "from_ZZ"], [217, 2, 1, "", "from_ZZ_gmpy"], [217, 2, 1, "", "from_ZZ_python"], [217, 2, 1, "", "from_sympy"], [217, 2, 1, "", "gcd"], [217, 2, 1, "", "gcdex"], [217, 2, 1, "", "get_field"], [217, 2, 1, "", "is_square"], [217, 2, 1, "", "lcm"], [217, 2, 1, "", "log"], [217, 2, 1, "", "sqrt"], [217, 2, 1, "", "to_sympy"]], "sympy.polys.domains.PolynomialRing": [[217, 2, 1, "", "factorial"], [217, 2, 1, "", "from_AlgebraicField"], [217, 2, 1, "", "from_ComplexField"], [217, 2, 1, "", "from_FractionField"], [217, 2, 1, "", "from_GaussianIntegerRing"], [217, 2, 1, "", "from_GaussianRationalField"], [217, 2, 1, "", "from_GlobalPolynomialRing"], [217, 2, 1, "", "from_PolynomialRing"], [217, 2, 1, "", "from_QQ"], [217, 2, 1, "", "from_QQ_gmpy"], [217, 2, 1, "", "from_QQ_python"], [217, 2, 1, "", "from_RealField"], [217, 2, 1, "", "from_ZZ"], [217, 2, 1, "", "from_ZZ_gmpy"], [217, 2, 1, "", "from_ZZ_python"], [217, 2, 1, "", "from_sympy"], [217, 2, 1, "", "gcd"], [217, 2, 1, "", "gcdex"], [217, 2, 1, "", "get_field"], [217, 2, 1, "", "is_negative"], [217, 2, 1, "", "is_nonnegative"], [217, 2, 1, "", "is_nonpositive"], [217, 2, 1, "", "is_positive"], [217, 2, 1, "", "is_unit"], [217, 2, 1, "", "lcm"], [217, 2, 1, "", "to_sympy"]], "sympy.polys.domains.RationalField": [[217, 2, 1, "", "algebraic_field"], [217, 2, 1, "", "denom"], [217, 2, 1, "", "div"], [217, 2, 1, "", "exquo"], [217, 2, 1, "", "exsqrt"], [217, 2, 1, "", "from_AlgebraicField"], [217, 2, 1, "", "from_GaussianRationalField"], [217, 2, 1, "", "from_QQ"], [217, 2, 1, "", "from_QQ_gmpy"], [217, 2, 1, "", "from_QQ_python"], [217, 2, 1, "", "from_RealField"], [217, 2, 1, "", "from_ZZ"], [217, 2, 1, "", "from_ZZ_gmpy"], [217, 2, 1, "", "from_ZZ_python"], [217, 2, 1, "", "from_sympy"], [217, 2, 1, "", "get_ring"], [217, 2, 1, "", "is_square"], [217, 2, 1, "", "numer"], [217, 2, 1, "", "quo"], [217, 2, 1, "", "rem"], [217, 2, 1, "", "to_sympy"]], "sympy.polys.domains.RealField": [[217, 2, 1, "", "almosteq"], [217, 2, 1, "", "exsqrt"], [217, 2, 1, "", "from_sympy"], [217, 2, 1, "", "gcd"], [217, 2, 1, "", "get_exact"], [217, 2, 1, "", "get_ring"], [217, 2, 1, "", "is_square"], [217, 2, 1, "", "lcm"], [217, 2, 1, "", "to_rational"], [217, 2, 1, "", "to_sympy"]], "sympy.polys.domains.compositedomain": [[217, 1, 1, "", "CompositeDomain"]], "sympy.polys.domains.compositedomain.CompositeDomain": [[217, 2, 1, "", "drop"], [217, 2, 1, "", "inject"]], "sympy.polys.domains.domain": [[217, 1, 1, "", "Domain"]], "sympy.polys.domains.domain.Domain": [[217, 2, 1, "", "abs"], [217, 2, 1, "", "add"], [217, 2, 1, "", "alg_field_from_poly"], [217, 2, 1, "", "algebraic_field"], [217, 2, 1, "", "almosteq"], [217, 2, 1, "", "characteristic"], [217, 2, 1, "", "cofactors"], [217, 2, 1, "", "convert"], [217, 2, 1, "", "convert_from"], [217, 2, 1, "", "cyclotomic_field"], [217, 2, 1, "", "denom"], [217, 2, 1, "", "div"], [217, 2, 1, "", "drop"], [217, 5, 1, "", "dtype"], [217, 2, 1, "", "evalf"], [217, 2, 1, "", "exquo"], [217, 2, 1, "", "exsqrt"], [217, 2, 1, "", "frac_field"], [217, 2, 1, "", "from_AlgebraicField"], [217, 2, 1, "", "from_ComplexField"], [217, 2, 1, "", "from_ExpressionDomain"], [217, 2, 1, "", "from_ExpressionRawDomain"], [217, 2, 1, "", "from_FF"], [217, 2, 1, "", "from_FF_gmpy"], [217, 2, 1, "", "from_FF_python"], [217, 2, 1, "", "from_FractionField"], [217, 2, 1, "", "from_GlobalPolynomialRing"], [217, 2, 1, "", "from_MonogenicFiniteExtension"], [217, 2, 1, "", "from_PolynomialRing"], [217, 2, 1, "", "from_QQ_gmpy"], [217, 2, 1, "", "from_QQ_python"], [217, 2, 1, "", "from_RealField"], [217, 2, 1, "", "from_ZZ_gmpy"], [217, 2, 1, "", "from_ZZ_python"], [217, 2, 1, "", "from_sympy"], [217, 2, 1, "", "gcd"], [217, 2, 1, "", "gcdex"], [217, 2, 1, "", "get_exact"], [217, 2, 1, "", "get_field"], [217, 2, 1, "", "get_ring"], [217, 2, 1, "", "half_gcdex"], [217, 5, 1, "", "has_assoc_Field"], [217, 5, 1, "", "has_assoc_Ring"], [217, 2, 1, "", "inject"], [217, 2, 1, "", "invert"], [217, 5, 1, "", "is_Field"], [217, 5, 1, "", "is_PID"], [217, 5, 1, "", "is_Ring"], [217, 2, 1, "", "is_negative"], [217, 2, 1, "", "is_nonnegative"], [217, 2, 1, "", "is_nonpositive"], [217, 2, 1, "", "is_one"], [217, 2, 1, "", "is_positive"], [217, 2, 1, "", "is_square"], [217, 2, 1, "", "is_zero"], [217, 2, 1, "", "lcm"], [217, 2, 1, "", "log"], [217, 2, 1, "", "map"], [217, 2, 1, "", "mul"], [217, 2, 1, "", "n"], [217, 2, 1, "", "neg"], [217, 2, 1, "", "numer"], [217, 2, 1, "", "of_type"], [217, 2, 1, "", "old_frac_field"], [217, 2, 1, "", "old_poly_ring"], [217, 5, 1, "", "one"], [217, 2, 1, "", "poly_ring"], [217, 2, 1, "", "pos"], [217, 2, 1, "", "pow"], [217, 2, 1, "", "quo"], [217, 2, 1, "", "rem"], [217, 2, 1, "", "revert"], [217, 2, 1, "", "sqrt"], [217, 2, 1, "", "sub"], [217, 2, 1, "", "to_sympy"], [217, 3, 1, "", "tp"], [217, 2, 1, "", "unify"], [217, 2, 1, "", "unify_composite"], [217, 5, 1, "", "zero"]], "sympy.polys.domains.domainelement": [[217, 1, 1, "", "DomainElement"]], "sympy.polys.domains.domainelement.DomainElement": [[217, 2, 1, "", "parent"]], "sympy.polys.domains.expressiondomain.ExpressionDomain": [[217, 1, 1, "", "Expression"]], "sympy.polys.domains.field": [[217, 1, 1, "", "Field"]], "sympy.polys.domains.field.Field": [[217, 2, 1, "", "div"], [217, 2, 1, "", "exquo"], [217, 2, 1, "", "gcd"], [217, 2, 1, "", "get_field"], [217, 2, 1, "", "get_ring"], [217, 2, 1, "", "is_unit"], [217, 2, 1, "", "lcm"], [217, 2, 1, "", "quo"], [217, 2, 1, "", "rem"], [217, 2, 1, "", "revert"]], "sympy.polys.domains.gaussiandomains": [[217, 1, 1, "", "GaussianDomain"], [217, 1, 1, "", "GaussianElement"], [217, 1, 1, "", "GaussianInteger"], [217, 1, 1, "", "GaussianIntegerRing"], [217, 1, 1, "", "GaussianRational"], [217, 1, 1, "", "GaussianRationalField"]], "sympy.polys.domains.gaussiandomains.GaussianDomain": [[217, 2, 1, "", "from_AlgebraicField"], [217, 2, 1, "", "from_QQ"], [217, 2, 1, "", "from_QQ_gmpy"], [217, 2, 1, "", "from_QQ_python"], [217, 2, 1, "", "from_ZZ"], [217, 2, 1, "", "from_ZZ_gmpy"], [217, 2, 1, "", "from_ZZ_python"], [217, 2, 1, "", "from_sympy"], [217, 2, 1, "", "inject"], [217, 2, 1, "", "is_negative"], [217, 2, 1, "", "is_nonnegative"], [217, 2, 1, "", "is_nonpositive"], [217, 2, 1, "", "is_positive"], [217, 2, 1, "", "to_sympy"]], "sympy.polys.domains.gaussiandomains.GaussianElement": [[217, 2, 1, "", "new"], [217, 2, 1, "", "parent"], [217, 2, 1, "", "quadrant"]], "sympy.polys.domains.gaussiandomains.GaussianIntegerRing": [[217, 5, 1, "", "dtype"], [217, 2, 1, "", "from_GaussianIntegerRing"], [217, 2, 1, "", "from_GaussianRationalField"], [217, 2, 1, "", "gcd"], [217, 2, 1, "", "get_field"], [217, 2, 1, "", "get_ring"], [217, 2, 1, "", "lcm"], [217, 2, 1, "", "normalize"]], "sympy.polys.domains.gaussiandomains.GaussianRationalField": [[217, 2, 1, "", "as_AlgebraicField"], [217, 2, 1, "", "denom"], [217, 5, 1, "", "dtype"], [217, 2, 1, "", "from_GaussianIntegerRing"], [217, 2, 1, "", "from_GaussianRationalField"], [217, 2, 1, "", "get_field"], [217, 2, 1, "", "get_ring"], [217, 2, 1, "", "numer"]], "sympy.polys.domains.mpelements": [[217, 1, 1, "", "ComplexElement"], [217, 1, 1, "", "RealElement"]], "sympy.polys.domains.quotientring": [[217, 1, 1, "", "QuotientRing"]], "sympy.polys.domains.ring": [[217, 1, 1, "", "Ring"]], "sympy.polys.domains.ring.Ring": [[217, 2, 1, "", "denom"], [217, 2, 1, "", "div"], [217, 2, 1, "", "exquo"], [217, 2, 1, "", "free_module"], [217, 2, 1, "", "get_ring"], [217, 2, 1, "", "ideal"], [217, 2, 1, "", "invert"], [217, 2, 1, "", "numer"], [217, 2, 1, "", "quo"], [217, 2, 1, "", "quotient_ring"], [217, 2, 1, "", "rem"], [217, 2, 1, "", "revert"]], "sympy.polys.domains.simpledomain": [[217, 1, 1, "", "SimpleDomain"]], "sympy.polys.domains.simpledomain.SimpleDomain": [[217, 2, 1, "", "inject"]], "sympy.polys.euclidtools": [[219, 4, 1, "", "dmp_cancel"], [219, 4, 1, "", "dmp_content"], [219, 4, 1, "", "dmp_discriminant"], [219, 4, 1, "", "dmp_euclidean_prs"], [219, 4, 1, "", "dmp_ff_prs_gcd"], [219, 4, 1, "", "dmp_gcd"], [219, 4, 1, "", "dmp_gcdex"], [219, 4, 1, "", "dmp_half_gcdex"], [219, 4, 1, "", "dmp_inner_gcd"], [219, 4, 1, "", "dmp_inner_subresultants"], [219, 4, 1, "", "dmp_invert"], [219, 4, 1, "", "dmp_lcm"], [219, 4, 1, "", "dmp_primitive"], [219, 4, 1, "", "dmp_primitive_prs"], [219, 4, 1, "", "dmp_prs_resultant"], [219, 4, 1, "", "dmp_qq_collins_resultant"], [219, 4, 1, "", "dmp_qq_heu_gcd"], [219, 4, 1, "", "dmp_resultant"], [219, 4, 1, "", "dmp_rr_prs_gcd"], [219, 4, 1, "", "dmp_subresultants"], [219, 4, 1, "", "dmp_zz_collins_resultant"], [219, 4, 1, "", "dmp_zz_heu_gcd"], [219, 4, 1, "", "dmp_zz_modular_resultant"]], "sympy.polys.factortools": [[219, 4, 1, "", "dmp_ext_factor"], [219, 4, 1, "", "dmp_factor_list"], [219, 4, 1, "", "dmp_factor_list_include"], [219, 4, 1, "", "dmp_irreducible_p"], [219, 4, 1, "", "dmp_trial_division"], [219, 4, 1, "", "dmp_zz_diophantine"], [219, 4, 1, "", "dmp_zz_factor"], [219, 4, 1, "", "dmp_zz_mignotte_bound"], [219, 4, 1, "", "dmp_zz_wang"], [219, 4, 1, "", "dmp_zz_wang_hensel_lifting"], [219, 4, 1, "", "dmp_zz_wang_lead_coeffs"], [219, 4, 1, "", "dmp_zz_wang_non_divisors"], [219, 4, 1, "", "dmp_zz_wang_test_points"], [219, 4, 1, "", "dup_cyclotomic_p"], [219, 4, 1, "", "dup_gf_factor"], [219, 4, 1, "", "dup_zz_cyclotomic_factor"], [219, 4, 1, "", "dup_zz_cyclotomic_poly"], [219, 4, 1, "", "dup_zz_factor"], [219, 4, 1, "", "dup_zz_factor_sqf"], [219, 4, 1, "", "dup_zz_hensel_lift"], [219, 4, 1, "", "dup_zz_hensel_step"], [219, 4, 1, "", "dup_zz_irreducible_p"], [219, 4, 1, "", "dup_zz_zassenhaus"]], "sympy.polys.fglmtools": [[219, 4, 1, "", "matrix_fglm"]], "sympy.polys.fields": [[217, 1, 1, "", "FracElement"], [217, 1, 1, "", "FracField"], [217, 4, 1, "", "field"], [217, 4, 1, "", "sfield"], [217, 4, 1, "", "vfield"], [217, 4, 1, "", "xfield"]], "sympy.polys.fields.FracElement": [[217, 2, 1, "", "diff"]], "sympy.polys.galoistools": [[219, 4, 1, "", "gf_LC"], [219, 4, 1, "", "gf_Qbasis"], [219, 4, 1, "", "gf_Qmatrix"], [219, 4, 1, "", "gf_TC"], [219, 4, 1, "", "gf_add"], [219, 4, 1, "", "gf_add_ground"], [219, 4, 1, "", "gf_add_mul"], [219, 4, 1, "", "gf_berlekamp"], [219, 4, 1, "", "gf_cofactors"], [219, 4, 1, "", "gf_compose"], [219, 4, 1, "", "gf_compose_mod"], [219, 4, 1, "", "gf_crt"], [219, 4, 1, "", "gf_crt1"], [219, 4, 1, "", "gf_crt2"], [219, 4, 1, "", "gf_csolve"], [219, 4, 1, "", "gf_degree"], [219, 4, 1, "", "gf_diff"], [219, 4, 1, "", "gf_div"], [219, 4, 1, "", "gf_eval"], [219, 4, 1, "", "gf_expand"], [219, 4, 1, "", "gf_exquo"], [219, 4, 1, "", "gf_factor"], [219, 4, 1, "", "gf_factor_sqf"], [219, 4, 1, "", "gf_from_dict"], [219, 4, 1, "", "gf_from_int_poly"], [219, 4, 1, "", "gf_gcd"], [219, 4, 1, "", "gf_gcdex"], [219, 4, 1, "", "gf_int"], [219, 4, 1, "", "gf_irreducible"], [219, 4, 1, "", "gf_irreducible_p"], [219, 4, 1, "", "gf_lcm"], [219, 4, 1, "", "gf_lshift"], [219, 4, 1, "", "gf_monic"], [219, 4, 1, "", "gf_mul"], [219, 4, 1, "", "gf_mul_ground"], [219, 4, 1, "", "gf_multi_eval"], [219, 4, 1, "", "gf_neg"], [219, 4, 1, "", "gf_normal"], [219, 4, 1, "", "gf_pow"], [219, 4, 1, "", "gf_pow_mod"], [219, 4, 1, "", "gf_quo"], [219, 4, 1, "", "gf_quo_ground"], [219, 4, 1, "", "gf_random"], [219, 4, 1, "", "gf_rem"], [219, 4, 1, "", "gf_rshift"], [219, 4, 1, "", "gf_shoup"], [219, 4, 1, "", "gf_sqf_list"], [219, 4, 1, "", "gf_sqf_p"], [219, 4, 1, "", "gf_sqf_part"], [219, 4, 1, "", "gf_sqr"], [219, 4, 1, "", "gf_strip"], [219, 4, 1, "", "gf_sub"], [219, 4, 1, "", "gf_sub_ground"], [219, 4, 1, "", "gf_sub_mul"], [219, 4, 1, "", "gf_to_dict"], [219, 4, 1, "", "gf_to_int_poly"], [219, 4, 1, "", "gf_trace_map"], [219, 4, 1, "", "gf_trunc"], [219, 4, 1, "", "gf_value"], [219, 4, 1, "", "gf_zassenhaus"]], "sympy.polys.groebnertools": [[219, 4, 1, "", "groebner"], [219, 4, 1, "", "is_groebner"], [219, 4, 1, "", "is_minimal"], [219, 4, 1, "", "is_reduced"], [219, 4, 1, "", "red_groebner"], [219, 4, 1, "", "spoly"]], "sympy.polys.matrices": [[215, 0, 0, "-", "_dfm"], [215, 0, 0, "-", "_typing"], [215, 0, 0, "-", "ddm"], [215, 0, 0, "-", "dense"], [215, 0, 0, "-", "domainmatrix"], [215, 0, 0, "-", "sdm"]], "sympy.polys.matrices._dfm": [[215, 1, 1, "", "DFM"]], "sympy.polys.matrices._dfm.DFM": [[215, 2, 1, "", "add"], [215, 2, 1, "", "applyfunc"], [215, 2, 1, "", "charpoly"], [215, 2, 1, "", "convert_to"], [215, 2, 1, "", "copy"], [215, 2, 1, "", "det"], [215, 2, 1, "", "diag"], [215, 2, 1, "", "diagonal"], [215, 2, 1, "", "extract"], [215, 2, 1, "", "extract_slice"], [215, 2, 1, "", "eye"], [215, 2, 1, "", "from_ddm"], [215, 2, 1, "", "from_flat_nz"], [215, 2, 1, "", "from_list"], [215, 2, 1, "", "from_list_flat"], [215, 2, 1, "", "getitem"], [215, 2, 1, "", "hstack"], [215, 2, 1, "", "inv"], [215, 2, 1, "", "is_diagonal"], [215, 2, 1, "", "is_lower"], [215, 2, 1, "", "is_upper"], [215, 2, 1, "", "is_zero_matrix"], [215, 2, 1, "", "lll"], [215, 2, 1, "", "lll_transform"], [215, 2, 1, "", "lu"], [215, 2, 1, "", "lu_solve"], [215, 2, 1, "", "matmul"], [215, 2, 1, "", "mul"], [215, 2, 1, "", "mul_elementwise"], [215, 2, 1, "", "neg"], [215, 2, 1, "", "nnz"], [215, 2, 1, "", "nullspace"], [215, 2, 1, "", "nullspace_from_rref"], [215, 2, 1, "", "ones"], [215, 2, 1, "", "particular"], [215, 2, 1, "", "rmul"], [215, 2, 1, "", "scc"], [215, 2, 1, "", "setitem"], [215, 2, 1, "", "sub"], [215, 2, 1, "", "to_ddm"], [215, 2, 1, "", "to_dfm"], [215, 2, 1, "", "to_dfm_or_ddm"], [215, 2, 1, "", "to_dok"], [215, 2, 1, "", "to_flat_nz"], [215, 2, 1, "", "to_list"], [215, 2, 1, "", "to_list_flat"], [215, 2, 1, "", "to_sdm"], [215, 2, 1, "", "transpose"], [215, 2, 1, "", "vstack"], [215, 2, 1, "", "zeros"]], "sympy.polys.matrices._typing": [[215, 1, 1, "", "RingElement"]], "sympy.polys.matrices.ddm": [[215, 1, 1, "", "DDM"]], "sympy.polys.matrices.ddm.DDM": [[215, 2, 1, "", "add"], [215, 2, 1, "", "charpoly"], [215, 2, 1, "", "det"], [215, 2, 1, "", "diag"], [215, 2, 1, "", "diagonal"], [215, 2, 1, "", "from_dok"], [215, 2, 1, "", "from_flat_nz"], [215, 2, 1, "", "from_list"], [215, 2, 1, "", "from_list_flat"], [215, 2, 1, "", "hstack"], [215, 2, 1, "", "inv"], [215, 2, 1, "", "is_diagonal"], [215, 2, 1, "", "is_lower"], [215, 2, 1, "", "is_upper"], [215, 2, 1, "", "is_zero_matrix"], [215, 2, 1, "", "lu"], [215, 2, 1, "", "lu_solve"], [215, 2, 1, "", "matmul"], [215, 2, 1, "", "neg"], [215, 2, 1, "", "nnz"], [215, 2, 1, "", "nullspace"], [215, 2, 1, "", "nullspace_from_rref"], [215, 2, 1, "", "rref"], [215, 2, 1, "", "rref_den"], [215, 2, 1, "", "scc"], [215, 2, 1, "", "sub"], [215, 2, 1, "", "to_ddm"], [215, 2, 1, "", "to_dfm"], [215, 2, 1, "", "to_dfm_or_ddm"], [215, 2, 1, "", "to_dok"], [215, 2, 1, "", "to_flat_nz"], [215, 2, 1, "", "to_list"], [215, 2, 1, "", "to_list_flat"], [215, 2, 1, "", "to_sdm"], [215, 2, 1, "", "vstack"]], "sympy.polys.matrices.dense": [[215, 1, 1, "", "R"], [215, 1, 1, "", "T"], [215, 4, 1, "", "ddm_berk"], [215, 4, 1, "", "ddm_iadd"], [215, 4, 1, "", "ddm_idet"], [215, 4, 1, "", "ddm_iinv"], [215, 4, 1, "", "ddm_ilu"], [215, 4, 1, "", "ddm_ilu_solve"], [215, 4, 1, "", "ddm_ilu_split"], [215, 4, 1, "", "ddm_imatmul"], [215, 4, 1, "", "ddm_imul"], [215, 4, 1, "", "ddm_ineg"], [215, 4, 1, "", "ddm_irmul"], [215, 4, 1, "", "ddm_irref"], [215, 4, 1, "", "ddm_irref_den"], [215, 4, 1, "", "ddm_isub"], [215, 4, 1, "", "ddm_transpose"]], "sympy.polys.matrices.domainmatrix": [[215, 4, 1, "", "DM"], [215, 1, 1, "", "DomainMatrix"]], "sympy.polys.matrices.domainmatrix.DomainMatrix": [[215, 2, 1, "", "add"], [215, 2, 1, "", "adj_det"], [215, 2, 1, "", "adj_poly_det"], [215, 2, 1, "", "adjugate"], [215, 2, 1, "", "cancel_denom"], [215, 2, 1, "", "cancel_denom_elementwise"], [215, 2, 1, "", "charpoly"], [215, 2, 1, "", "charpoly_base"], [215, 2, 1, "", "charpoly_berk"], [215, 2, 1, "", "charpoly_factor_blocks"], [215, 2, 1, "", "charpoly_factor_list"], [215, 2, 1, "", "choose_domain"], [215, 2, 1, "", "clear_denoms"], [215, 2, 1, "", "columnspace"], [215, 2, 1, "", "content"], [215, 2, 1, "", "convert_to"], [215, 2, 1, "", "det"], [215, 2, 1, "", "diag"], [215, 2, 1, "", "diagonal"], [215, 2, 1, "", "eval_poly"], [215, 2, 1, "", "eval_poly_mul"], [215, 2, 1, "", "eye"], [215, 2, 1, "", "from_Matrix"], [215, 2, 1, "", "from_dict_sympy"], [215, 2, 1, "", "from_dok"], [215, 2, 1, "", "from_flat_nz"], [215, 2, 1, "", "from_list"], [215, 2, 1, "", "from_list_flat"], [215, 2, 1, "", "from_list_sympy"], [215, 2, 1, "", "from_rep"], [215, 2, 1, "", "hstack"], [215, 2, 1, "", "inv"], [215, 2, 1, "", "inv_den"], [215, 3, 1, "", "is_diagonal"], [215, 3, 1, "", "is_lower"], [215, 3, 1, "", "is_square"], [215, 3, 1, "", "is_upper"], [215, 2, 1, "", "lll"], [215, 2, 1, "", "lll_transform"], [215, 2, 1, "", "lu"], [215, 2, 1, "", "lu_solve"], [215, 2, 1, "", "matmul"], [215, 2, 1, "", "mul"], [215, 2, 1, "", "neg"], [215, 2, 1, "", "nnz"], [215, 2, 1, "", "nullspace"], [215, 2, 1, "", "nullspace_from_rref"], [215, 2, 1, "", "ones"], [215, 2, 1, "", "pow"], [215, 2, 1, "", "primitive"], [215, 2, 1, "", "rowspace"], [215, 2, 1, "", "rref"], [215, 2, 1, "", "rref_den"], [215, 2, 1, "", "scc"], [215, 2, 1, "", "solve_den"], [215, 2, 1, "", "solve_den_charpoly"], [215, 2, 1, "", "solve_den_rref"], [215, 2, 1, "", "sub"], [215, 2, 1, "", "to_Matrix"], [215, 2, 1, "", "to_ddm"], [215, 2, 1, "", "to_dense"], [215, 2, 1, "", "to_dfm"], [215, 2, 1, "", "to_dfm_or_ddm"], [215, 2, 1, "", "to_dok"], [215, 2, 1, "", "to_field"], [215, 2, 1, "", "to_flat_nz"], [215, 2, 1, "", "to_list"], [215, 2, 1, "", "to_list_flat"], [215, 2, 1, "", "to_sdm"], [215, 2, 1, "", "to_sparse"], [215, 2, 1, "", "transpose"], [215, 2, 1, "", "unify"], [215, 2, 1, "", "vstack"], [215, 2, 1, "", "zeros"]], "sympy.polys.matrices.normalforms": [[215, 4, 1, "", "hermite_normal_form"], [215, 4, 1, "", "smith_normal_form"]], "sympy.polys.matrices.sdm": [[215, 1, 1, "", "SDM"], [215, 4, 1, "", "sdm_berk"], [215, 4, 1, "", "sdm_irref"], [215, 4, 1, "", "sdm_nullspace_from_rref"], [215, 4, 1, "", "sdm_particular_from_rref"], [215, 4, 1, "", "sdm_rref_den"]], "sympy.polys.matrices.sdm.SDM": [[215, 2, 1, "", "add"], [215, 2, 1, "", "charpoly"], [215, 2, 1, "", "convert_to"], [215, 2, 1, "", "copy"], [215, 2, 1, "", "det"], [215, 2, 1, "", "diagonal"], [215, 2, 1, "", "eye"], [215, 2, 1, "", "from_ddm"], [215, 2, 1, "", "from_dok"], [215, 2, 1, "", "from_flat_nz"], [215, 2, 1, "", "from_list"], [215, 2, 1, "", "from_list_flat"], [215, 2, 1, "", "hstack"], [215, 2, 1, "", "inv"], [215, 2, 1, "", "is_diagonal"], [215, 2, 1, "", "is_lower"], [215, 2, 1, "", "is_upper"], [215, 2, 1, "", "is_zero_matrix"], [215, 2, 1, "", "lll"], [215, 2, 1, "", "lll_transform"], [215, 2, 1, "", "lu"], [215, 2, 1, "", "lu_solve"], [215, 2, 1, "", "matmul"], [215, 2, 1, "", "mul"], [215, 2, 1, "", "neg"], [215, 2, 1, "", "new"], [215, 2, 1, "", "nnz"], [215, 2, 1, "", "nullspace"], [215, 2, 1, "", "nullspace_from_rref"], [215, 2, 1, "", "rref"], [215, 2, 1, "", "rref_den"], [215, 2, 1, "", "scc"], [215, 2, 1, "", "sub"], [215, 2, 1, "", "to_ddm"], [215, 2, 1, "", "to_dfm"], [215, 2, 1, "", "to_dfm_or_ddm"], [215, 2, 1, "", "to_dok"], [215, 2, 1, "", "to_flat_nz"], [215, 2, 1, "", "to_list"], [215, 2, 1, "", "to_list_flat"], [215, 2, 1, "", "to_sdm"], [215, 2, 1, "", "transpose"], [215, 2, 1, "", "vstack"], [215, 2, 1, "", "zeros"]], "sympy.polys.modulargcd": [[219, 4, 1, "", "_modgcd_multivariate_p"], [219, 4, 1, "", "func_field_modgcd"], [219, 4, 1, "", "modgcd_bivariate"], [219, 4, 1, "", "modgcd_multivariate"], [219, 4, 1, "", "modgcd_univariate"]], "sympy.polys.monomials": [[222, 1, 1, "", "Monomial"], [222, 4, 1, "", "itermonomials"], [222, 4, 1, "", "monomial_count"]], "sympy.polys.monomials.Monomial": [[222, 2, 1, "", "as_expr"], [222, 2, 1, "", "gcd"], [222, 2, 1, "", "lcm"]], "sympy.polys.numberfields.basis": [[221, 4, 1, "", "round_two"]], "sympy.polys.numberfields.galoisgroups": [[221, 4, 1, "", "galois_group"]], "sympy.polys.numberfields.minpoly": [[221, 4, 1, "", "minimal_polynomial"], [221, 4, 1, "", "minpoly"]], "sympy.polys.numberfields": [[221, 0, 0, "-", "modules"], [221, 0, 0, "-", "subfield"]], "sympy.polys.numberfields.modules": [[221, 1, 1, "", "EndomorphismRing"], [221, 1, 1, "", "InnerEndomorphism"], [221, 1, 1, "", "Module"], [221, 1, 1, "", "ModuleElement"], [221, 1, 1, "", "ModuleEndomorphism"], [221, 1, 1, "", "ModuleHomomorphism"], [221, 1, 1, "", "PowerBasis"], [221, 1, 1, "", "PowerBasisElement"], [221, 1, 1, "", "Submodule"], [221, 4, 1, "", "find_min_poly"], [221, 4, 1, "", "make_mod_elt"]], "sympy.polys.numberfields.modules.EndomorphismRing": [[221, 2, 1, "", "__init__"], [221, 2, 1, "", "inner_endomorphism"], [221, 2, 1, "", "represent"]], "sympy.polys.numberfields.modules.InnerEndomorphism": [[221, 2, 1, "", "__init__"]], "sympy.polys.numberfields.modules.Module": [[221, 2, 1, "", "__call__"], [221, 2, 1, "", "ancestors"], [221, 2, 1, "", "basis_elements"], [221, 2, 1, "", "element_from_rational"], [221, 2, 1, "", "endomorphism_ring"], [221, 2, 1, "", "is_compat_col"], [221, 2, 1, "", "mult_tab"], [221, 3, 1, "", "n"], [221, 2, 1, "", "nearest_common_ancestor"], [221, 3, 1, "", "number_field"], [221, 2, 1, "", "one"], [221, 3, 1, "", "parent"], [221, 2, 1, "", "power_basis_ancestor"], [221, 2, 1, "", "represent"], [221, 2, 1, "", "starts_with_unity"], [221, 2, 1, "", "submodule_from_gens"], [221, 2, 1, "", "submodule_from_matrix"], [221, 2, 1, "", "whole_submodule"], [221, 2, 1, "", "zero"]], "sympy.polys.numberfields.modules.ModuleElement": [[221, 3, 1, "", "QQ_col"], [221, 2, 1, "", "__add__"], [221, 2, 1, "", "__init__"], [221, 2, 1, "", "__mod__"], [221, 2, 1, "", "__mul__"], [221, 2, 1, "", "column"], [221, 2, 1, "", "equiv"], [221, 2, 1, "", "from_int_list"], [221, 2, 1, "", "is_compat"], [221, 3, 1, "", "n"], [221, 2, 1, "", "over_power_basis"], [221, 2, 1, "", "reduced"], [221, 2, 1, "", "reduced_mod_p"], [221, 2, 1, "", "to_ancestor"], [221, 2, 1, "", "to_parent"], [221, 2, 1, "", "unify"]], "sympy.polys.numberfields.modules.ModuleEndomorphism": [[221, 2, 1, "", "__init__"]], "sympy.polys.numberfields.modules.ModuleHomomorphism": [[221, 2, 1, "", "__init__"], [221, 2, 1, "", "kernel"], [221, 2, 1, "", "matrix"]], "sympy.polys.numberfields.modules.PowerBasis": [[221, 2, 1, "", "__init__"], [221, 2, 1, "", "element_from_ANP"], [221, 2, 1, "", "element_from_alg_num"], [221, 2, 1, "", "element_from_poly"], [221, 2, 1, "", "represent"]], "sympy.polys.numberfields.modules.PowerBasisElement": [[221, 3, 1, "", "T"], [221, 2, 1, "", "as_expr"], [221, 3, 1, "", "generator"], [221, 3, 1, "", "is_rational"], [221, 2, 1, "", "norm"], [221, 2, 1, "", "numerator"], [221, 2, 1, "", "poly"], [221, 2, 1, "", "to_ANP"], [221, 2, 1, "", "to_alg_num"]], "sympy.polys.numberfields.modules.Submodule": [[221, 3, 1, "", "QQ_matrix"], [221, 2, 1, "", "__init__"], [221, 2, 1, "", "add"], [221, 2, 1, "", "basis_element_pullbacks"], [221, 2, 1, "", "discard_before"], [221, 2, 1, "", "mul"], [221, 2, 1, "", "reduce_element"], [221, 2, 1, "", "reduced"], [221, 2, 1, "", "represent"]], "sympy.polys.numberfields.primes": [[221, 1, 1, "", "PrimeIdeal"], [221, 4, 1, "", "prime_decomp"], [221, 4, 1, "", "prime_valuation"]], "sympy.polys.numberfields.primes.PrimeIdeal": [[221, 2, 1, "", "__add__"], [221, 2, 1, "", "__init__"], [221, 2, 1, "", "__mul__"], [221, 2, 1, "", "as_submodule"], [221, 3, 1, "", "is_inert"], [221, 2, 1, "", "reduce_ANP"], [221, 2, 1, "", "reduce_alg_num"], [221, 2, 1, "", "reduce_element"], [221, 2, 1, "", "repr"], [221, 2, 1, "", "test_factor"], [221, 2, 1, "", "valuation"]], "sympy.polys.numberfields.subfield": [[221, 4, 1, "", "field_isomorphism"], [221, 4, 1, "", "primitive_element"], [221, 4, 1, "", "to_number_field"]], "sympy.polys.numberfields.utilities": [[221, 1, 1, "", "AlgIntPowers"], [221, 4, 1, "", "coeff_search"], [221, 4, 1, "", "extract_fundamental_discriminant"], [221, 4, 1, "", "get_num_denom"], [221, 4, 1, "", "is_int"], [221, 4, 1, "", "is_rat"], [221, 4, 1, "", "isolate"], [221, 4, 1, "", "supplement_a_subspace"]], "sympy.polys.numberfields.utilities.AlgIntPowers": [[221, 2, 1, "", "__init__"]], "sympy.polys.orderings": [[222, 1, 1, "", "GradedLexOrder"], [222, 1, 1, "", "LexOrder"], [222, 1, 1, "", "MonomialOrder"], [222, 1, 1, "", "ReversedGradedLexOrder"]], "sympy.polys.orthopolys": [[222, 4, 1, "", "chebyshevt_poly"], [222, 4, 1, "", "chebyshevu_poly"], [222, 4, 1, "", "gegenbauer_poly"], [222, 4, 1, "", "hermite_poly"], [222, 4, 1, "", "hermite_prob_poly"], [222, 4, 1, "", "jacobi_poly"], [222, 4, 1, "", "laguerre_poly"], [222, 4, 1, "", "legendre_poly"], [222, 4, 1, "", "spherical_bessel_fn"]], "sympy.polys.partfrac": [[222, 4, 1, "", "apart"], [222, 4, 1, "", "apart_list"], [222, 4, 1, "", "assemble_partfrac_list"]], "sympy.polys.polyclasses": [[217, 1, 1, "", "ANP"], [217, 1, 1, "", "DMF"], [217, 1, 1, "", "DMP"]], "sympy.polys.polyclasses.ANP": [[217, 2, 1, "", "LC"], [217, 2, 1, "", "TC"], [217, 2, 1, "", "add_ground"], [217, 2, 1, "", "convert"], [217, 3, 1, "", "is_ground"], [217, 3, 1, "", "is_one"], [217, 3, 1, "", "is_zero"], [217, 2, 1, "", "mod_to_list"], [217, 2, 1, "", "mul_ground"], [217, 2, 1, "", "pow"], [217, 2, 1, "", "quo_ground"], [217, 2, 1, "", "sub_ground"], [217, 2, 1, "", "to_dict"], [217, 2, 1, "", "to_list"], [217, 2, 1, "", "to_sympy_dict"], [217, 2, 1, "", "to_sympy_list"], [217, 2, 1, "", "to_tuple"], [217, 2, 1, "", "unify"], [217, 2, 1, "", "unify_ANP"]], "sympy.polys.polyclasses.DMF": [[217, 2, 1, "", "add"], [217, 2, 1, "", "add_ground"], [217, 2, 1, "", "cancel"], [217, 2, 1, "", "denom"], [217, 2, 1, "", "exquo"], [217, 2, 1, "", "frac_unify"], [217, 2, 1, "", "half_per"], [217, 2, 1, "", "invert"], [217, 3, 1, "", "is_one"], [217, 3, 1, "", "is_zero"], [217, 2, 1, "", "mul"], [217, 2, 1, "", "neg"], [217, 2, 1, "", "numer"], [217, 2, 1, "", "per"], [217, 2, 1, "", "poly_unify"], [217, 2, 1, "", "pow"], [217, 2, 1, "", "quo"], [217, 2, 1, "", "sub"]], "sympy.polys.polyclasses.DMP": [[217, 2, 1, "", "LC"], [217, 2, 1, "", "TC"], [217, 2, 1, "", "abs"], [217, 2, 1, "", "add"], [217, 2, 1, "", "add_ground"], [217, 2, 1, "", "all_coeffs"], [217, 2, 1, "", "all_monoms"], [217, 2, 1, "", "all_terms"], [217, 2, 1, "", "cancel"], [217, 2, 1, "", "cauchy_lower_bound"], [217, 2, 1, "", "cauchy_upper_bound"], [217, 2, 1, "", "clear_denoms"], [217, 2, 1, "", "coeffs"], [217, 2, 1, "", "cofactors"], [217, 2, 1, "", "compose"], [217, 2, 1, "", "content"], [217, 2, 1, "", "convert"], [217, 2, 1, "", "count_complex_roots"], [217, 2, 1, "", "count_real_roots"], [217, 2, 1, "", "decompose"], [217, 2, 1, "", "deflate"], [217, 2, 1, "", "degree"], [217, 2, 1, "", "degree_list"], [217, 2, 1, "", "diff"], [217, 2, 1, "", "discriminant"], [217, 2, 1, "", "div"], [217, 2, 1, "", "eject"], [217, 2, 1, "", "eval"], [217, 2, 1, "", "exclude"], [217, 2, 1, "", "exquo"], [217, 2, 1, "", "exquo_ground"], [217, 2, 1, "", "factor_list"], [217, 2, 1, "", "factor_list_include"], [217, 2, 1, "", "from_list"], [217, 2, 1, "", "from_sympy_list"], [217, 2, 1, "", "gcd"], [217, 2, 1, "", "gcdex"], [217, 2, 1, "", "gff_list"], [217, 2, 1, "", "ground_new"], [217, 2, 1, "", "half_gcdex"], [217, 2, 1, "", "homogeneous_order"], [217, 2, 1, "", "homogenize"], [217, 2, 1, "", "inject"], [217, 2, 1, "", "integrate"], [217, 2, 1, "", "intervals"], [217, 2, 1, "", "invert"], [217, 3, 1, "", "is_cyclotomic"], [217, 3, 1, "", "is_ground"], [217, 3, 1, "", "is_homogeneous"], [217, 3, 1, "", "is_irreducible"], [217, 3, 1, "", "is_linear"], [217, 3, 1, "", "is_monic"], [217, 3, 1, "", "is_monomial"], [217, 3, 1, "", "is_one"], [217, 3, 1, "", "is_primitive"], [217, 3, 1, "", "is_quadratic"], [217, 3, 1, "", "is_sqf"], [217, 3, 1, "", "is_zero"], [217, 2, 1, "", "l1_norm"], [217, 2, 1, "", "l2_norm_squared"], [217, 2, 1, "", "lcm"], [217, 2, 1, "", "lift"], [217, 2, 1, "", "max_norm"], [217, 2, 1, "", "mignotte_sep_bound_squared"], [217, 2, 1, "", "monic"], [217, 2, 1, "", "monoms"], [217, 2, 1, "", "mul"], [217, 2, 1, "", "mul_ground"], [217, 2, 1, "", "neg"], [217, 2, 1, "", "norm"], [217, 2, 1, "", "nth"], [217, 2, 1, "", "pdiv"], [217, 2, 1, "", "permute"], [217, 2, 1, "", "pexquo"], [217, 2, 1, "", "pow"], [217, 2, 1, "", "pquo"], [217, 2, 1, "", "prem"], [217, 2, 1, "", "primitive"], [217, 2, 1, "", "quo"], [217, 2, 1, "", "quo_ground"], [217, 2, 1, "", "refine_root"], [217, 2, 1, "", "rem"], [217, 3, 1, "", "rep"], [217, 2, 1, "", "resultant"], [217, 2, 1, "", "revert"], [217, 2, 1, "", "shift"], [217, 2, 1, "", "slice"], [217, 2, 1, "", "sqf_list"], [217, 2, 1, "", "sqf_list_include"], [217, 2, 1, "", "sqf_norm"], [217, 2, 1, "", "sqf_part"], [217, 2, 1, "", "sqr"], [217, 2, 1, "", "sturm"], [217, 2, 1, "", "sub"], [217, 2, 1, "", "sub_ground"], [217, 2, 1, "", "subresultants"], [217, 2, 1, "", "terms"], [217, 2, 1, "", "terms_gcd"], [217, 2, 1, "", "to_best"], [217, 2, 1, "", "to_dict"], [217, 2, 1, "", "to_exact"], [217, 2, 1, "", "to_field"], [217, 2, 1, "", "to_list"], [217, 2, 1, "", "to_ring"], [217, 2, 1, "", "to_sympy_dict"], [217, 2, 1, "", "to_sympy_list"], [217, 2, 1, "", "to_tuple"], [217, 2, 1, "", "total_degree"], [217, 2, 1, "", "transform"], [217, 2, 1, "", "trunc"], [217, 2, 1, "", "unify_DMP"]], "sympy.polys": [[219, 0, 0, "-", "polyconfig"], [219, 0, 0, "-", "polyoptions"], [224, 0, 0, "-", "solvers"]], "sympy.polys.polyconfig": [[219, 4, 1, "", "setup"]], "sympy.polys.polyerrors": [[219, 1, 1, "", "BasePolynomialError"], [219, 1, 1, "", "CoercionFailed"], [219, 1, 1, "", "ComputationFailed"], [219, 1, 1, "", "DomainError"], [219, 1, 1, "", "EvaluationFailed"], [219, 1, 1, "", "ExactQuotientFailed"], [219, 1, 1, "", "ExtraneousFactors"], [219, 1, 1, "", "FlagError"], [219, 1, 1, "", "GeneratorsError"], [219, 1, 1, "", "GeneratorsNeeded"], [219, 1, 1, "", "HeuristicGCDFailed"], [219, 1, 1, "", "HomomorphismFailed"], [219, 1, 1, "", "IsomorphismFailed"], [219, 1, 1, "", "MultivariatePolynomialError"], [219, 1, 1, "", "NotAlgebraic"], [219, 1, 1, "", "NotInvertible"], [219, 1, 1, "", "NotReversible"], [219, 1, 1, "", "OperationNotSupported"], [219, 1, 1, "", "OptionError"], [219, 1, 1, "", "PolificationFailed"], [219, 1, 1, "", "PolynomialError"], [219, 1, 1, "", "RefinementFailed"], [219, 1, 1, "", "UnificationFailed"], [219, 1, 1, "", "UnivariatePolynomialError"]], "sympy.polys.polyfuncs": [[222, 4, 1, "", "horner"], [222, 4, 1, "", "interpolate"], [222, 4, 1, "", "symmetrize"], [222, 4, 1, "", "viete"]], "sympy.polys.polyoptions": [[219, 1, 1, "", "Options"], [219, 4, 1, "", "build_options"]], "sympy.polys.polyoptions.Options": [[219, 2, 1, "", "clone"]], "sympy.polys.polyroots": [[222, 4, 1, "", "roots"]], "sympy.polys.polytools": [[222, 1, 1, "", "GroebnerBasis"], [222, 4, 1, "", "LC"], [222, 4, 1, "", "LM"], [222, 4, 1, "", "LT"], [222, 1, 1, "", "Poly"], [222, 1, 1, "", "PurePoly"], [222, 4, 1, "", "all_roots"], [222, 4, 1, "", "cancel"], [222, 4, 1, "", "cofactors"], [222, 4, 1, "", "compose"], [222, 4, 1, "", "content"], [222, 4, 1, "", "count_roots"], [222, 4, 1, "", "decompose"], [222, 4, 1, "", "degree"], [222, 4, 1, "", "degree_list"], [222, 4, 1, "", "discriminant"], [222, 4, 1, "", "div"], [222, 4, 1, "", "exquo"], [222, 4, 1, "", "factor"], [222, 4, 1, "", "factor_list"], [222, 4, 1, "", "gcd"], [222, 4, 1, "", "gcd_list"], [222, 4, 1, "", "gcdex"], [222, 4, 1, "", "gff"], [222, 4, 1, "", "gff_list"], [222, 4, 1, "", "groebner"], [222, 4, 1, "", "ground_roots"], [222, 4, 1, "", "half_gcdex"], [222, 4, 1, "", "intervals"], [222, 4, 1, "", "invert"], [222, 4, 1, "", "is_zero_dimensional"], [222, 4, 1, "", "lcm"], [222, 4, 1, "", "lcm_list"], [222, 4, 1, "", "monic"], [222, 4, 1, "", "nroots"], [222, 4, 1, "", "nth_power_roots_poly"], [222, 4, 1, "", "parallel_poly_from_expr"], [222, 4, 1, "", "pdiv"], [222, 4, 1, "", "pexquo"], [222, 4, 1, "", "poly"], [222, 4, 1, "", "poly_from_expr"], [222, 4, 1, "", "pquo"], [222, 4, 1, "", "prem"], [222, 4, 1, "", "primitive"], [222, 4, 1, "", "quo"], [222, 4, 1, "", "real_roots"], [222, 4, 1, "", "reduced"], [222, 4, 1, "", "refine_root"], [222, 4, 1, "", "rem"], [222, 4, 1, "", "resultant"], [222, 4, 1, "", "sqf"], [222, 4, 1, "", "sqf_list"], [222, 4, 1, "", "sqf_norm"], [222, 4, 1, "", "sqf_part"], [222, 4, 1, "", "sturm"], [222, 4, 1, "", "subresultants"], [222, 4, 1, "", "terms_gcd"], [222, 4, 1, "", "trunc"]], "sympy.polys.polytools.GroebnerBasis": [[222, 2, 1, "", "contains"], [222, 2, 1, "", "fglm"], [222, 3, 1, "", "is_zero_dimensional"], [222, 2, 1, "", "reduce"]], "sympy.polys.polytools.Poly": [[222, 2, 1, "", "EC"], [222, 2, 1, "", "EM"], [222, 2, 1, "", "ET"], [222, 2, 1, "", "LC"], [222, 2, 1, "", "LM"], [222, 2, 1, "", "LT"], [222, 2, 1, "", "TC"], [222, 2, 1, "", "abs"], [222, 2, 1, "", "add"], [222, 2, 1, "", "add_ground"], [222, 2, 1, "", "all_coeffs"], [222, 2, 1, "", "all_monoms"], [222, 2, 1, "", "all_roots"], [222, 2, 1, "", "all_terms"], [222, 2, 1, "", "as_dict"], [222, 2, 1, "", "as_expr"], [222, 2, 1, "", "as_list"], [222, 2, 1, "", "as_poly"], [222, 2, 1, "", "cancel"], [222, 2, 1, "", "clear_denoms"], [222, 2, 1, "", "coeff_monomial"], [222, 2, 1, "", "coeffs"], [222, 2, 1, "", "cofactors"], [222, 2, 1, "", "compose"], [222, 2, 1, "", "content"], [222, 2, 1, "", "count_roots"], [222, 2, 1, "", "decompose"], [222, 2, 1, "", "deflate"], [222, 2, 1, "", "degree"], [222, 2, 1, "", "degree_list"], [222, 2, 1, "", "diff"], [222, 2, 1, "", "discriminant"], [222, 2, 1, "", "dispersion"], [222, 2, 1, "", "dispersionset"], [222, 2, 1, "", "div"], [222, 3, 1, "", "domain"], [222, 2, 1, "", "eject"], [222, 2, 1, "", "eval"], [222, 2, 1, "", "exclude"], [222, 2, 1, "", "exquo"], [222, 2, 1, "", "exquo_ground"], [222, 2, 1, "", "factor_list"], [222, 2, 1, "", "factor_list_include"], [222, 3, 1, "", "free_symbols"], [222, 3, 1, "", "free_symbols_in_domain"], [222, 2, 1, "", "from_dict"], [222, 2, 1, "", "from_expr"], [222, 2, 1, "", "from_list"], [222, 2, 1, "", "from_poly"], [222, 2, 1, "", "galois_group"], [222, 2, 1, "", "gcd"], [222, 2, 1, "", "gcdex"], [222, 3, 1, "", "gen"], [222, 2, 1, "", "get_domain"], [222, 2, 1, "", "get_modulus"], [222, 2, 1, "", "gff_list"], [222, 2, 1, "", "ground_roots"], [222, 2, 1, "", "half_gcdex"], [222, 2, 1, "", "has_only_gens"], [222, 2, 1, "", "homogeneous_order"], [222, 2, 1, "", "homogenize"], [222, 2, 1, "", "inject"], [222, 2, 1, "", "integrate"], [222, 2, 1, "", "intervals"], [222, 2, 1, "", "invert"], [222, 3, 1, "", "is_cyclotomic"], [222, 3, 1, "", "is_ground"], [222, 3, 1, "", "is_homogeneous"], [222, 3, 1, "", "is_irreducible"], [222, 3, 1, "", "is_linear"], [222, 3, 1, "", "is_monic"], [222, 3, 1, "", "is_monomial"], [222, 3, 1, "", "is_multivariate"], [222, 3, 1, "", "is_one"], [222, 3, 1, "", "is_primitive"], [222, 3, 1, "", "is_quadratic"], [222, 3, 1, "", "is_sqf"], [222, 3, 1, "", "is_univariate"], [222, 3, 1, "", "is_zero"], [222, 2, 1, "", "l1_norm"], [222, 2, 1, "", "lcm"], [222, 2, 1, "", "length"], [222, 2, 1, "", "lift"], [222, 2, 1, "", "ltrim"], [222, 2, 1, "", "make_monic_over_integers_by_scaling_roots"], [222, 2, 1, "", "match"], [222, 2, 1, "", "max_norm"], [222, 2, 1, "", "monic"], [222, 2, 1, "", "monoms"], [222, 2, 1, "", "mul"], [222, 2, 1, "", "mul_ground"], [222, 2, 1, "", "neg"], [222, 2, 1, "", "new"], [222, 2, 1, "", "norm"], [222, 2, 1, "", "nroots"], [222, 2, 1, "", "nth"], [222, 2, 1, "", "nth_power_roots_poly"], [222, 3, 1, "", "one"], [222, 2, 1, "", "pdiv"], [222, 2, 1, "", "per"], [222, 2, 1, "", "pexquo"], [222, 2, 1, "", "pow"], [222, 2, 1, "", "pquo"], [222, 2, 1, "", "prem"], [222, 2, 1, "", "primitive"], [222, 2, 1, "", "quo"], [222, 2, 1, "", "quo_ground"], [222, 2, 1, "", "rat_clear_denoms"], [222, 2, 1, "", "real_roots"], [222, 2, 1, "", "refine_root"], [222, 2, 1, "", "rem"], [222, 2, 1, "", "reorder"], [222, 2, 1, "", "replace"], [222, 2, 1, "", "resultant"], [222, 2, 1, "", "retract"], [222, 2, 1, "", "revert"], [222, 2, 1, "", "root"], [222, 2, 1, "", "same_root"], [222, 2, 1, "", "set_domain"], [222, 2, 1, "", "set_modulus"], [222, 2, 1, "", "shift"], [222, 2, 1, "", "slice"], [222, 2, 1, "", "sqf_list"], [222, 2, 1, "", "sqf_list_include"], [222, 2, 1, "", "sqf_norm"], [222, 2, 1, "", "sqf_part"], [222, 2, 1, "", "sqr"], [222, 2, 1, "", "sturm"], [222, 2, 1, "", "sub"], [222, 2, 1, "", "sub_ground"], [222, 2, 1, "", "subresultants"], [222, 2, 1, "", "terms"], [222, 2, 1, "", "terms_gcd"], [222, 2, 1, "", "termwise"], [222, 2, 1, "", "to_exact"], [222, 2, 1, "", "to_field"], [222, 2, 1, "", "to_ring"], [222, 2, 1, "", "total_degree"], [222, 2, 1, "", "transform"], [222, 2, 1, "", "trunc"], [222, 2, 1, "", "unify"], [222, 3, 1, "", "unit"], [222, 3, 1, "", "zero"]], "sympy.polys.polytools.PurePoly": [[222, 3, 1, "", "free_symbols"]], "sympy.polys.rationaltools": [[222, 4, 1, "", "together"]], "sympy.polys.ring_series": [[223, 4, 1, "", "_tan1"], [223, 4, 1, "", "mul_xin"], [223, 4, 1, "", "pow_xin"], [223, 4, 1, "", "rs_LambertW"], [223, 4, 1, "", "rs_asin"], [223, 4, 1, "", "rs_atan"], [223, 4, 1, "", "rs_atanh"], [223, 4, 1, "", "rs_compose_add"], [223, 4, 1, "", "rs_cos"], [223, 4, 1, "", "rs_cos_sin"], [223, 4, 1, "", "rs_cosh"], [223, 4, 1, "", "rs_cot"], [223, 4, 1, "", "rs_diff"], [223, 4, 1, "", "rs_exp"], [223, 4, 1, "", "rs_fun"], [223, 4, 1, "", "rs_hadamard_exp"], [223, 4, 1, "", "rs_integrate"], [223, 4, 1, "", "rs_is_puiseux"], [223, 4, 1, "", "rs_log"], [223, 4, 1, "", "rs_mul"], [223, 4, 1, "", "rs_newton"], [223, 4, 1, "", "rs_nth_root"], [223, 4, 1, "", "rs_pow"], [223, 4, 1, "", "rs_puiseux"], [223, 4, 1, "", "rs_puiseux2"], [223, 4, 1, "", "rs_series_from_list"], [223, 4, 1, "", "rs_series_inversion"], [223, 4, 1, "", "rs_series_reversion"], [223, 4, 1, "", "rs_sin"], [223, 4, 1, "", "rs_sinh"], [223, 4, 1, "", "rs_square"], [223, 4, 1, "", "rs_subs"], [223, 4, 1, "", "rs_tan"], [223, 4, 1, "", "rs_tanh"], [223, 4, 1, "", "rs_trunc"]], "sympy.polys.rings": [[217, 1, 1, "", "PolyElement"], [217, 1, 1, "", "PolyRing"], [217, 4, 1, "", "ring"], [217, 4, 1, "", "sring"], [217, 4, 1, "", "vring"], [217, 4, 1, "", "xring"]], "sympy.polys.rings.PolyElement": [[217, 2, 1, "", "almosteq"], [217, 2, 1, "", "cancel"], [217, 2, 1, "", "coeff"], [217, 2, 1, "", "coeff_wrt"], [217, 2, 1, "", "coeffs"], [217, 2, 1, "", "const"], [217, 2, 1, "", "content"], [217, 2, 1, "", "copy"], [217, 2, 1, "", "degree"], [217, 2, 1, "", "degrees"], [217, 2, 1, "", "diff"], [217, 2, 1, "", "div"], [217, 2, 1, "", "imul_num"], [217, 2, 1, "", "itercoeffs"], [217, 2, 1, "", "itermonoms"], [217, 2, 1, "", "iterterms"], [217, 2, 1, "", "leading_expv"], [217, 2, 1, "", "leading_monom"], [217, 2, 1, "", "leading_term"], [217, 2, 1, "", "listcoeffs"], [217, 2, 1, "", "listmonoms"], [217, 2, 1, "", "listterms"], [217, 2, 1, "", "monic"], [217, 2, 1, "", "monoms"], [217, 2, 1, "", "pdiv"], [217, 2, 1, "", "pexquo"], [217, 2, 1, "", "pquo"], [217, 2, 1, "", "prem"], [217, 2, 1, "", "primitive"], [217, 2, 1, "", "square"], [217, 2, 1, "", "strip_zero"], [217, 2, 1, "", "subresultants"], [217, 2, 1, "", "symmetrize"], [217, 2, 1, "", "tail_degree"], [217, 2, 1, "", "tail_degrees"], [217, 2, 1, "", "terms"]], "sympy.polys.rings.PolyRing": [[217, 2, 1, "", "add"], [217, 2, 1, "", "add_gens"], [217, 2, 1, "", "compose"], [217, 2, 1, "", "drop"], [217, 2, 1, "", "drop_to_ground"], [217, 2, 1, "", "index"], [217, 2, 1, "", "monomial_basis"], [217, 2, 1, "", "mul"], [217, 2, 1, "", "symmetric_poly"]], "sympy.polys.rootoftools": [[222, 1, 1, "", "ComplexRootOf"], [222, 1, 1, "", "RootOf"], [222, 1, 1, "", "RootSum"], [222, 4, 1, "", "rootof"]], "sympy.polys.rootoftools.ComplexRootOf": [[222, 2, 1, "", "_all_roots"], [222, 2, 1, "", "_complexes_index"], [222, 2, 1, "", "_complexes_sorted"], [222, 2, 1, "", "_count_roots"], [222, 2, 1, "", "_ensure_complexes_init"], [222, 2, 1, "", "_ensure_reals_init"], [222, 2, 1, "", "_eval_evalf"], [222, 2, 1, "", "_eval_is_imaginary"], [222, 2, 1, "", "_eval_is_real"], [222, 2, 1, "", "_get_complexes"], [222, 2, 1, "", "_get_complexes_sqf"], [222, 2, 1, "", "_get_interval"], [222, 2, 1, "", "_get_reals"], [222, 2, 1, "", "_get_reals_sqf"], [222, 2, 1, "", "_get_roots"], [222, 2, 1, "", "_indexed_root"], [222, 2, 1, "", "_new"], [222, 2, 1, "", "_postprocess_root"], [222, 2, 1, "", "_preprocess_roots"], [222, 2, 1, "", "_real_roots"], [222, 2, 1, "", "_reals_index"], [222, 2, 1, "", "_reals_sorted"], [222, 2, 1, "", "_refine_complexes"], [222, 2, 1, "", "_reset"], [222, 2, 1, "", "_roots_trivial"], [222, 2, 1, "", "_set_interval"], [222, 2, 1, "", "all_roots"], [222, 2, 1, "", "clear_cache"], [222, 2, 1, "", "eval_approx"], [222, 2, 1, "", "eval_rational"], [222, 2, 1, "", "real_roots"]], "sympy.polys.rootoftools.RootSum": [[222, 2, 1, "", "new"]], "sympy.polys.solvers": [[224, 4, 1, "", "_solve_lin_sys"], [224, 4, 1, "", "_solve_lin_sys_component"], [224, 4, 1, "", "eqs_to_matrix"], [224, 4, 1, "", "solve_lin_sys"], [224, 4, 1, "", "sympy_eqs_to_ring"]], "sympy.polys.specialpolys": [[222, 4, 1, "", "cyclotomic_poly"], [222, 4, 1, "", "interpolating_poly"], [222, 4, 1, "", "random_poly"], [222, 4, 1, "", "swinnerton_dyer_poly"], [222, 4, 1, "", "symmetric_poly"]], "sympy.printing": [[226, 0, 0, "-", "aesaracode"], [226, 0, 0, "-", "c"], [226, 0, 0, "-", "codeprinter"], [226, 0, 0, "-", "conventions"], [226, 0, 0, "-", "cxx"], [226, 0, 0, "-", "fortran"], [226, 0, 0, "-", "gtk"], [226, 0, 0, "-", "jscode"], [226, 0, 0, "-", "julia"], [226, 0, 0, "-", "lambdarepr"], [226, 0, 0, "-", "latex"], [226, 0, 0, "-", "maple"], [226, 0, 0, "-", "mathematica"], [226, 0, 0, "-", "mathml"], [226, 0, 0, "-", "octave"], [226, 0, 0, "-", "precedence"], [226, 0, 0, "-", "pretty"], [226, 0, 0, "-", "preview"], [226, 0, 0, "-", "printer"], [226, 0, 0, "-", "pycode"], [226, 0, 0, "-", "python"], [226, 0, 0, "-", "rcode"], [226, 0, 0, "-", "repr"], [226, 0, 0, "-", "rust"], [226, 0, 0, "-", "smtlib"], [226, 0, 0, "-", "str"], [226, 0, 0, "-", "tree"]], "sympy.printing.aesaracode": [[226, 1, 1, "", "AesaraPrinter"], [226, 4, 1, "", "aesara_code"], [226, 4, 1, "", "aesara_function"], [226, 4, 1, "", "dim_handling"]], "sympy.printing.aesaracode.AesaraPrinter": [[226, 2, 1, "", "doprint"], [226, 5, 1, "", "printmethod"]], "sympy.printing.c": [[226, 1, 1, "", "C89CodePrinter"], [226, 1, 1, "", "C99CodePrinter"], [226, 4, 1, "", "ccode"], [226, 6, 1, "", "known_functions_C89"], [226, 6, 1, "", "known_functions_C99"], [226, 4, 1, "", "print_ccode"]], "sympy.printing.c.C89CodePrinter": [[226, 2, 1, "", "indent_code"], [226, 5, 1, "", "printmethod"]], "sympy.printing.c.C99CodePrinter": [[226, 5, 1, "", "printmethod"]], "sympy.printing.codeprinter": [[226, 7, 1, "", "AssignmentError"], [226, 1, 1, "", "CodePrinter"], [226, 4, 1, "", "cxxcode"]], "sympy.printing.codeprinter.CodePrinter": [[226, 2, 1, "", "doprint"], [226, 5, 1, "", "printmethod"]], "sympy.printing.conventions": [[226, 4, 1, "", "split_super_sub"]], "sympy.printing.cxx": [[226, 1, 1, "", "CXX11CodePrinter"], [226, 1, 1, "", "CXX98CodePrinter"]], "sympy.printing.cxx.CXX11CodePrinter": [[226, 5, 1, "", "printmethod"]], "sympy.printing.cxx.CXX98CodePrinter": [[226, 5, 1, "", "printmethod"]], "sympy.printing.dot": [[226, 4, 1, "", "dotprint"]], "sympy.printing.fortran": [[226, 1, 1, "", "FCodePrinter"], [226, 4, 1, "", "fcode"], [226, 4, 1, "", "print_fcode"]], "sympy.printing.fortran.FCodePrinter": [[226, 2, 1, "", "indent_code"], [226, 5, 1, "", "printmethod"]], "sympy.printing.gtk": [[226, 4, 1, "", "print_gtk"]], "sympy.printing.jscode": [[226, 1, 1, "", "JavascriptCodePrinter"], [226, 4, 1, "", "jscode"], [226, 6, 1, "", "known_functions"]], "sympy.printing.jscode.JavascriptCodePrinter": [[226, 2, 1, "", "indent_code"], [226, 5, 1, "", "printmethod"]], "sympy.printing.julia": [[226, 1, 1, "", "JuliaCodePrinter"], [226, 4, 1, "", "julia_code"], [226, 6, 1, "", "known_fcns_src1"], [226, 6, 1, "", "known_fcns_src2"]], "sympy.printing.julia.JuliaCodePrinter": [[226, 2, 1, "", "indent_code"], [226, 5, 1, "", "printmethod"]], "sympy.printing.lambdarepr": [[226, 1, 1, "", "LambdaPrinter"], [226, 4, 1, "", "lambdarepr"]], "sympy.printing.lambdarepr.LambdaPrinter": [[226, 5, 1, "", "printmethod"]], "sympy.printing.latex": [[226, 1, 1, "", "LatexPrinter"], [226, 6, 1, "", "accepted_latex_functions"], [226, 4, 1, "", "latex"], [226, 4, 1, "", "print_latex"]], "sympy.printing.latex.LatexPrinter": [[226, 2, 1, "", "parenthesize_super"], [226, 5, 1, "", "printmethod"]], "sympy.printing.maple": [[226, 1, 1, "", "MapleCodePrinter"], [226, 4, 1, "", "maple_code"], [226, 4, 1, "", "print_maple_code"]], "sympy.printing.maple.MapleCodePrinter": [[226, 5, 1, "", "printmethod"]], "sympy.printing.mathematica": [[226, 1, 1, "", "MCodePrinter"], [226, 6, 1, "", "known_functions"], [226, 4, 1, "", "mathematica_code"]], "sympy.printing.mathematica.MCodePrinter": [[226, 5, 1, "", "printmethod"]], "sympy.printing.mathml": [[226, 1, 1, "", "MathMLContentPrinter"], [226, 1, 1, "", "MathMLPresentationPrinter"], [226, 1, 1, "", "MathMLPrinterBase"], [226, 4, 1, "", "mathml"], [226, 4, 1, "", "print_mathml"]], "sympy.printing.mathml.MathMLContentPrinter": [[226, 2, 1, "", "mathml_tag"], [226, 5, 1, "", "printmethod"]], "sympy.printing.mathml.MathMLPresentationPrinter": [[226, 2, 1, "", "mathml_tag"], [226, 5, 1, "", "printmethod"]], "sympy.printing.mathml.MathMLPrinterBase": [[226, 2, 1, "", "doprint"]], "sympy.printing.octave": [[226, 1, 1, "", "OctaveCodePrinter"], [226, 6, 1, "", "known_fcns_src1"], [226, 6, 1, "", "known_fcns_src2"], [226, 4, 1, "", "octave_code"]], "sympy.printing.octave.OctaveCodePrinter": [[226, 2, 1, "", "indent_code"], [226, 5, 1, "", "printmethod"]], "sympy.printing.precedence": [[226, 6, 1, "", "PRECEDENCE"], [226, 6, 1, "", "PRECEDENCE_FUNCTIONS"], [226, 6, 1, "", "PRECEDENCE_VALUES"], [226, 4, 1, "", "precedence"]], "sympy.printing.pretty": [[226, 0, 0, "-", "pretty"], [226, 0, 0, "-", "pretty_symbology"], [226, 0, 0, "-", "stringpict"]], "sympy.printing.pretty.pretty": [[226, 1, 1, "", "PrettyPrinter"], [226, 4, 1, "", "pretty"], [226, 4, 1, "", "pretty_print"]], "sympy.printing.pretty.pretty.PrettyPrinter": [[226, 5, 1, "", "printmethod"]], "sympy.printing.pretty.pretty_symbology": [[226, 4, 1, "", "G"], [226, 4, 1, "", "U"], [226, 4, 1, "", "VF"], [226, 4, 1, "", "annotated"], [226, 6, 1, "", "atoms_table"], [226, 6, 1, "", "digit_2txt"], [226, 6, 1, "", "frac"], [226, 4, 1, "", "g"], [226, 6, 1, "", "greek_letters"], [226, 4, 1, "", "hobj"], [226, 4, 1, "", "pretty_atom"], [226, 4, 1, "", "pretty_symbol"], [226, 4, 1, "", "pretty_try_use_unicode"], [226, 4, 1, "", "pretty_use_unicode"], [226, 6, 1, "", "root"], [226, 6, 1, "", "sub"], [226, 6, 1, "", "sup"], [226, 6, 1, "", "symb_2txt"], [226, 4, 1, "", "vobj"], [226, 4, 1, "", "xobj"], [226, 4, 1, "", "xstr"], [226, 4, 1, "", "xsym"]], "sympy.printing.pretty.stringpict": [[226, 1, 1, "", "prettyForm"], [226, 1, 1, "", "stringPict"]], "sympy.printing.pretty.stringpict.prettyForm": [[226, 2, 1, "", "apply"]], "sympy.printing.pretty.stringpict.stringPict": [[226, 2, 1, "", "above"], [226, 2, 1, "", "below"], [226, 2, 1, "", "height"], [226, 2, 1, "", "left"], [226, 2, 1, "", "leftslash"], [226, 2, 1, "", "next"], [226, 2, 1, "", "parens"], [226, 2, 1, "", "render"], [226, 2, 1, "", "right"], [226, 2, 1, "", "root"], [226, 2, 1, "", "stack"], [226, 2, 1, "", "terminal_width"], [226, 2, 1, "", "width"]], "sympy.printing.preview": [[226, 4, 1, "", "preview"]], "sympy.printing.printer": [[226, 1, 1, "", "Printer"]], "sympy.printing.printer.Printer": [[226, 2, 1, "", "_print"], [226, 2, 1, "", "doprint"], [226, 5, 1, "", "printmethod"], [226, 2, 1, "", "set_global_settings"]], "sympy.printing.pycode": [[226, 1, 1, "", "MpmathPrinter"], [226, 4, 1, "", "pycode"]], "sympy.printing.rcode": [[226, 1, 1, "", "RCodePrinter"], [226, 6, 1, "", "known_functions"], [226, 4, 1, "", "print_rcode"], [226, 4, 1, "", "rcode"]], "sympy.printing.rcode.RCodePrinter": [[226, 2, 1, "", "indent_code"], [226, 5, 1, "", "printmethod"]], "sympy.printing.repr": [[226, 1, 1, "", "ReprPrinter"], [226, 4, 1, "", "srepr"]], "sympy.printing.repr.ReprPrinter": [[226, 2, 1, "", "emptyPrinter"], [226, 5, 1, "", "printmethod"], [226, 2, 1, "", "reprify"]], "sympy.printing.rust": [[226, 1, 1, "", "RustCodePrinter"], [226, 6, 1, "", "known_functions"], [226, 4, 1, "", "rust_code"]], "sympy.printing.rust.RustCodePrinter": [[226, 2, 1, "", "indent_code"], [226, 5, 1, "", "printmethod"]], "sympy.printing.smtlib": [[226, 1, 1, "", "SMTLibPrinter"], [226, 4, 1, "", "smtlib_code"]], "sympy.printing.smtlib.SMTLibPrinter": [[226, 5, 1, "", "_default_settings"], [226, 5, 1, "", "printmethod"]], "sympy.printing.str": [[226, 1, 1, "", "StrPrinter"], [226, 4, 1, "", "sstr"], [226, 4, 1, "", "sstrrepr"]], "sympy.printing.str.StrPrinter": [[226, 5, 1, "", "printmethod"]], "sympy.printing.tree": [[226, 4, 1, "", "pprint_nodes"], [226, 4, 1, "", "print_node"], [226, 4, 1, "", "print_tree"], [226, 4, 1, "", "tree"]], "sympy.series.acceleration": [[233, 4, 1, "", "richardson"], [233, 4, 1, "", "shanks"]], "sympy.series.formal": [[228, 1, 1, "", "FiniteFormalPowerSeries"], [228, 1, 1, "", "FormalPowerSeries"], [228, 1, 1, "", "FormalPowerSeriesCompose"], [228, 1, 1, "", "FormalPowerSeriesInverse"], [228, 1, 1, "", "FormalPowerSeriesProduct"], [228, 4, 1, "", "compute_fps"], [228, 4, 1, "", "exp_re"], [228, 4, 1, "", "fps"], [228, 4, 1, "", "hyper_algorithm"], [228, 4, 1, "", "hyper_re"], [228, 4, 1, "", "rational_algorithm"], [228, 4, 1, "", "rational_independent"], [228, 4, 1, "", "rsolve_hypergeometric"], [228, 4, 1, "", "simpleDE"], [228, 4, 1, "", "solve_de"]], "sympy.series.formal.FormalPowerSeries": [[228, 2, 1, "", "coeff_bell"], [228, 2, 1, "", "compose"], [228, 3, 1, "", "infinite"], [228, 2, 1, "", "integrate"], [228, 2, 1, "", "inverse"], [228, 2, 1, "", "polynomial"], [228, 2, 1, "", "product"], [228, 2, 1, "", "truncate"]], "sympy.series.formal.FormalPowerSeriesCompose": [[228, 3, 1, "", "function"]], "sympy.series.formal.FormalPowerSeriesInverse": [[228, 3, 1, "", "function"]], "sympy.series.formal.FormalPowerSeriesProduct": [[228, 3, 1, "", "function"]], "sympy.series.fourier": [[229, 1, 1, "", "FourierSeries"], [229, 4, 1, "", "fourier_series"]], "sympy.series.fourier.FourierSeries": [[229, 2, 1, "", "scale"], [229, 2, 1, "", "scalex"], [229, 2, 1, "", "shift"], [229, 2, 1, "", "shiftx"], [229, 2, 1, "", "sigma_approximation"], [229, 2, 1, "", "truncate"]], "sympy.series.gruntz": [[233, 1, 1, "", "SubsSet"], [233, 4, 1, "", "build_expression_tree"], [233, 4, 1, "", "calculate_series"], [233, 4, 1, "", "compare"], [233, 4, 1, "", "gruntz"], [233, 4, 1, "", "limitinf"], [233, 4, 1, "", "mrv"], [233, 4, 1, "", "mrv_leadterm"], [233, 4, 1, "", "mrv_max1"], [233, 4, 1, "", "mrv_max3"], [233, 4, 1, "", "rewrite"], [233, 4, 1, "", "sign"]], "sympy.series.gruntz.SubsSet": [[233, 2, 1, "", "copy"], [233, 2, 1, "", "do_subs"], [233, 2, 1, "", "meets"], [233, 2, 1, "", "union"]], "sympy.series.limits": [[233, 1, 1, "", "Limit"], [233, 4, 1, "", "limit"]], "sympy.series.limits.Limit": [[233, 2, 1, "", "doit"]], "sympy.series.limitseq": [[231, 4, 1, "", "difference_delta"], [231, 4, 1, "", "dominant"], [231, 4, 1, "", "limit_seq"]], "sympy.series.order": [[233, 1, 1, "", "Order"]], "sympy.series.order.Order": [[233, 2, 1, "", "contains"]], "sympy.series.residues": [[233, 4, 1, "", "residue"]], "sympy.series.sequences": [[232, 1, 1, "", "EmptySequence"], [232, 1, 1, "", "RecursiveSeq"], [232, 1, 1, "", "SeqAdd"], [232, 1, 1, "", "SeqBase"], [232, 1, 1, "", "SeqFormula"], [232, 1, 1, "", "SeqMul"], [232, 1, 1, "", "SeqPer"], [232, 4, 1, "", "sequence"]], "sympy.series.sequences.EmptySequence": [[232, 2, 1, "", "coeff_mul"]], "sympy.series.sequences.RecursiveSeq": [[232, 3, 1, "", "initial"], [232, 3, 1, "", "interval"], [232, 3, 1, "", "n"], [232, 3, 1, "", "recurrence"], [232, 3, 1, "", "start"], [232, 3, 1, "", "stop"], [232, 3, 1, "", "y"], [232, 3, 1, "", "yn"]], "sympy.series.sequences.SeqAdd": [[232, 2, 1, "", "reduce"]], "sympy.series.sequences.SeqBase": [[232, 2, 1, "", "coeff"], [232, 2, 1, "", "coeff_mul"], [232, 2, 1, "", "find_linear_recurrence"], [232, 3, 1, "", "free_symbols"], [232, 3, 1, "", "gen"], [232, 3, 1, "", "interval"], [232, 3, 1, "", "length"], [232, 3, 1, "", "start"], [232, 3, 1, "", "stop"], [232, 3, 1, "", "variables"]], "sympy.series.sequences.SeqFormula": [[232, 2, 1, "", "coeff_mul"]], "sympy.series.sequences.SeqMul": [[232, 2, 1, "", "reduce"]], "sympy.series.sequences.SeqPer": [[232, 2, 1, "", "coeff_mul"]], "sympy.series.series": [[233, 4, 1, "", "series"]], "sympy.sets": [[234, 0, 0, "-", "conditionset"], [234, 0, 0, "-", "fancysets"], [234, 0, 0, "-", "powerset"], [234, 0, 0, "-", "sets"]], "sympy.sets.conditionset": [[234, 1, 1, "", "ConditionSet"], [234, 1, 1, "", "Contains"], [234, 1, 1, "", "SetKind"]], "sympy.sets.fancysets": [[234, 1, 1, "", "CartesianComplexRegion"], [234, 1, 1, "", "ComplexRegion"], [234, 1, 1, "", "Complexes"], [234, 1, 1, "", "ImageSet"], [234, 1, 1, "", "Integers"], [234, 1, 1, "", "Naturals"], [234, 1, 1, "", "Naturals0"], [234, 1, 1, "", "PolarComplexRegion"], [234, 1, 1, "", "Range"], [234, 1, 1, "", "Rationals"], [234, 1, 1, "", "Reals"], [234, 4, 1, "", "normalize_theta_set"]], "sympy.sets.fancysets.ComplexRegion": [[234, 3, 1, "", "a_interval"], [234, 3, 1, "", "b_interval"], [234, 2, 1, "", "from_real"], [234, 3, 1, "", "psets"], [234, 3, 1, "", "sets"]], "sympy.sets.fancysets.Range": [[234, 2, 1, "", "as_relational"], [234, 3, 1, "", "reversed"]], "sympy.sets.powerset": [[234, 1, 1, "", "PowerSet"]], "sympy.sets.sets": [[234, 1, 1, "", "Complement"], [234, 1, 1, "", "DisjointUnion"], [234, 1, 1, "", "EmptySet"], [234, 1, 1, "", "FiniteSet"], [234, 1, 1, "", "Intersection"], [234, 1, 1, "", "Interval"], [234, 1, 1, "", "ProductSet"], [234, 1, 1, "", "Set"], [234, 1, 1, "", "SymmetricDifference"], [234, 1, 1, "", "Union"], [234, 1, 1, "", "UniversalSet"], [234, 4, 1, "", "imageset"]], "sympy.sets.sets.Complement": [[234, 2, 1, "", "as_relational"], [234, 2, 1, "", "reduce"]], "sympy.sets.sets.FiniteSet": [[234, 2, 1, "", "as_relational"]], "sympy.sets.sets.Intersection": [[234, 2, 1, "", "as_relational"]], "sympy.sets.sets.Interval": [[234, 2, 1, "", "Lopen"], [234, 2, 1, "", "Ropen"], [234, 2, 1, "", "as_relational"], [234, 3, 1, "", "end"], [234, 3, 1, "", "is_left_unbounded"], [234, 3, 1, "", "is_right_unbounded"], [234, 3, 1, "", "left_open"], [234, 2, 1, "", "open"], [234, 3, 1, "", "right_open"], [234, 3, 1, "", "start"]], "sympy.sets.sets.ProductSet": [[234, 3, 1, "", "is_iterable"]], "sympy.sets.sets.Set": [[234, 3, 1, "", "boundary"], [234, 3, 1, "", "closure"], [234, 2, 1, "", "complement"], [234, 2, 1, "", "contains"], [234, 3, 1, "", "inf"], [234, 3, 1, "", "interior"], [234, 2, 1, "", "intersect"], [234, 2, 1, "", "intersection"], [234, 3, 1, "", "is_closed"], [234, 2, 1, "", "is_disjoint"], [234, 3, 1, "", "is_open"], [234, 2, 1, "", "is_proper_subset"], [234, 2, 1, "", "is_proper_superset"], [234, 2, 1, "", "is_subset"], [234, 2, 1, "", "is_superset"], [234, 2, 1, "", "isdisjoint"], [234, 2, 1, "", "issubset"], [234, 2, 1, "", "issuperset"], [234, 3, 1, "", "kind"], [234, 3, 1, "", "measure"], [234, 2, 1, "", "powerset"], [234, 3, 1, "", "sup"], [234, 2, 1, "", "symmetric_difference"], [234, 2, 1, "", "union"]], "sympy.sets.sets.SymmetricDifference": [[234, 2, 1, "", "as_relational"]], "sympy.sets.sets.Union": [[234, 2, 1, "", "as_relational"]], "sympy.simplify": [[238, 0, 0, "-", "combsimp"], [238, 0, 0, "-", "cse_main"], [238, 0, 0, "-", "epathtools"], [238, 0, 0, "-", "hyperexpand"], [236, 0, 0, "-", "hyperexpand_doc"], [238, 0, 0, "-", "powsimp"], [238, 0, 0, "-", "radsimp"], [238, 0, 0, "-", "ratsimp"], [15, 0, 0, "-", "simplify"], [238, 0, 0, "-", "sqrtdenest"], [238, 0, 0, "-", "trigsimp"]], "sympy.simplify.combsimp": [[238, 4, 1, "", "combsimp"]], "sympy.simplify.cse_main": [[238, 4, 1, "", "cse"], [238, 4, 1, "", "opt_cse"], [238, 4, 1, "", "tree_cse"]], "sympy.simplify.epathtools": [[238, 1, 1, "", "EPath"], [238, 4, 1, "", "epath"]], "sympy.simplify.epathtools.EPath": [[238, 2, 1, "", "apply"], [238, 2, 1, "", "select"]], "sympy.simplify.fu": [[235, 4, 1, "", "TR0"], [235, 4, 1, "", "TR1"], [235, 4, 1, "", "TR10"], [235, 4, 1, "", "TR10i"], [235, 4, 1, "", "TR11"], [235, 4, 1, "", "TR111"], [235, 4, 1, "", "TR12"], [235, 4, 1, "", "TR12i"], [235, 4, 1, "", "TR13"], [235, 4, 1, "", "TR14"], [235, 4, 1, "", "TR15"], [235, 4, 1, "", "TR16"], [235, 4, 1, "", "TR2"], [235, 4, 1, "", "TR22"], [235, 4, 1, "", "TR2i"], [235, 4, 1, "", "TR3"], [235, 4, 1, "", "TR4"], [235, 4, 1, "", "TR5"], [235, 4, 1, "", "TR6"], [235, 4, 1, "", "TR7"], [235, 4, 1, "", "TR8"], [235, 4, 1, "", "TR9"], [235, 4, 1, "", "TRmorrie"], [235, 4, 1, "", "TRpower"], [235, 4, 1, "", "fu"]], "sympy.simplify.hyperexpand": [[238, 4, 1, "", "hyperexpand"]], "sympy.simplify.powsimp": [[238, 4, 1, "", "powdenest"], [238, 4, 1, "", "powsimp"]], "sympy.simplify.radsimp": [[238, 4, 1, "", "collect"], [238, 4, 1, "", "collect_const"], [238, 4, 1, "", "collect_sqrt"], [238, 4, 1, "", "fraction"], [238, 4, 1, "", "rad_rationalize"], [238, 4, 1, "", "radsimp"], [238, 4, 1, "", "rcollect"]], "sympy.simplify.ratsimp": [[238, 4, 1, "", "ratsimp"], [238, 4, 1, "", "ratsimpmodprime"]], "sympy.simplify.simplify": [[238, 4, 1, "", "besselsimp"], [238, 4, 1, "", "hypersimilar"], [238, 4, 1, "", "hypersimp"], [238, 4, 1, "", "kroneckersimp"], [238, 4, 1, "", "logcombine"], [238, 4, 1, "", "nsimplify"], [238, 4, 1, "", "nthroot"], [238, 4, 1, "", "posify"], [238, 4, 1, "", "separatevars"], [238, 4, 1, "", "simplify"]], "sympy.simplify.sqrtdenest": [[238, 4, 1, "", "sqrtdenest"]], "sympy.simplify.trigsimp": [[238, 4, 1, "", "trigsimp"]], "sympy.solvers.deutils": [[244, 4, 1, "", "ode_order"]], "sympy.solvers.diophantine.diophantine": [[239, 1, 1, "", "BinaryQuadratic"], [239, 1, 1, "", "CubicThue"], [239, 1, 1, "", "DiophantineEquationType"], [239, 1, 1, "", "DiophantineSolutionSet"], [239, 1, 1, "", "GeneralPythagorean"], [239, 1, 1, "", "GeneralSumOfEvenPowers"], [239, 1, 1, "", "GeneralSumOfSquares"], [239, 1, 1, "", "HomogeneousGeneralQuadratic"], [239, 1, 1, "", "HomogeneousTernaryQuadratic"], [239, 1, 1, "", "HomogeneousTernaryQuadraticNormal"], [239, 1, 1, "", "InhomogeneousGeneralQuadratic"], [239, 1, 1, "", "InhomogeneousTernaryQuadratic"], [239, 1, 1, "", "Linear"], [239, 4, 1, "", "PQa"], [239, 1, 1, "", "Univariate"], [239, 4, 1, "", "base_solution_linear"], [239, 4, 1, "", "classify_diop"], [239, 4, 1, "", "cornacchia"], [239, 4, 1, "", "descent"], [239, 4, 1, "", "diop_DN"], [239, 4, 1, "", "diop_bf_DN"], [239, 4, 1, "", "diop_general_pythagorean"], [239, 4, 1, "", "diop_general_sum_of_even_powers"], [239, 4, 1, "", "diop_general_sum_of_squares"], [239, 4, 1, "", "diop_linear"], [239, 4, 1, "", "diop_quadratic"], [239, 4, 1, "", "diop_solve"], [239, 4, 1, "", "diop_ternary_quadratic"], [239, 4, 1, "", "diop_ternary_quadratic_normal"], [239, 4, 1, "", "diophantine"], [239, 4, 1, "", "divisible"], [239, 4, 1, "", "equivalent"], [239, 4, 1, "", "find_DN"], [239, 4, 1, "", "gaussian_reduce"], [239, 4, 1, "", "holzer"], [239, 4, 1, "", "ldescent"], [239, 4, 1, "", "merge_solution"], [239, 4, 1, "", "parametrize_ternary_quadratic"], [239, 4, 1, "", "partition"], [239, 4, 1, "", "power_representation"], [239, 4, 1, "", "prime_as_sum_of_two_squares"], [239, 4, 1, "", "reconstruct"], [239, 4, 1, "", "sqf_normal"], [239, 4, 1, "", "square_factor"], [239, 4, 1, "", "sum_of_four_squares"], [239, 4, 1, "", "sum_of_powers"], [239, 4, 1, "", "sum_of_squares"], [239, 4, 1, "", "sum_of_three_squares"], [239, 4, 1, "", "transformation_to_DN"], [239, 4, 1, "", "transformation_to_normal"]], "sympy.solvers.diophantine.diophantine.DiophantineEquationType": [[239, 2, 1, "", "matches"]], "sympy.solvers": [[241, 0, 0, "-", "inequalities"], [242, 0, 0, "-", "ode"], [243, 0, 0, "-", "pde"], [244, 0, 0, "-", "recurr"], [244, 0, 0, "-", "simplex"], [245, 0, 0, "-", "solveset"]], "sympy.solvers.inequalities": [[241, 4, 1, "", "reduce_abs_inequalities"], [241, 4, 1, "", "reduce_abs_inequality"], [241, 4, 1, "", "reduce_inequalities"], [241, 4, 1, "", "reduce_rational_inequalities"], [241, 4, 1, "", "solve_poly_inequalities"], [241, 4, 1, "", "solve_poly_inequality"], [241, 4, 1, "", "solve_rational_inequalities"], [241, 4, 1, "", "solve_univariate_inequality"]], "sympy.solvers.ode": [[242, 6, 1, "", "allhints"], [242, 4, 1, "", "checkinfsol"], [242, 4, 1, "", "checkodesol"], [242, 4, 1, "", "classify_ode"], [242, 4, 1, "", "constantsimp"], [242, 4, 1, "", "dsolve"], [242, 4, 1, "", "homogeneous_order"], [242, 4, 1, "", "infinitesimals"], [242, 0, 0, "-", "ode"]], "sympy.solvers.ode.lie_group": [[242, 4, 1, "", "lie_heuristic_abaco1_product"], [242, 4, 1, "", "lie_heuristic_abaco1_simple"], [242, 4, 1, "", "lie_heuristic_abaco2_similar"], [242, 4, 1, "", "lie_heuristic_abaco2_unique_general"], [242, 4, 1, "", "lie_heuristic_abaco2_unique_unknown"], [242, 4, 1, "", "lie_heuristic_bivariate"], [242, 4, 1, "", "lie_heuristic_chi"], [242, 4, 1, "", "lie_heuristic_function_sum"], [242, 4, 1, "", "lie_heuristic_linear"]], "sympy.solvers.ode.ode": [[242, 4, 1, "", "_handle_Integral"], [242, 4, 1, "", "_linear_2eq_order1_type6"], [242, 4, 1, "", "_linear_2eq_order1_type7"], [242, 4, 1, "", "_nonlinear_2eq_order1_type1"], [242, 4, 1, "", "_nonlinear_2eq_order1_type2"], [242, 4, 1, "", "_nonlinear_2eq_order1_type3"], [242, 4, 1, "", "_nonlinear_2eq_order1_type4"], [242, 4, 1, "", "_nonlinear_2eq_order1_type5"], [242, 4, 1, "", "_nonlinear_3eq_order1_type1"], [242, 4, 1, "", "_nonlinear_3eq_order1_type2"], [242, 4, 1, "", "_nonlinear_3eq_order1_type3"], [242, 4, 1, "", "_nonlinear_3eq_order1_type4"], [242, 4, 1, "", "_nonlinear_3eq_order1_type5"], [242, 4, 1, "", "constant_renumber"], [242, 4, 1, "", "ode_1st_power_series"], [242, 4, 1, "", "ode_2nd_power_series_ordinary"], [242, 4, 1, "", "ode_2nd_power_series_regular"], [242, 4, 1, "", "ode_sol_simplicity"], [242, 4, 1, "", "odesimp"]], "sympy.solvers.ode.riccati": [[242, 4, 1, "", "compute_m_ybar"], [242, 4, 1, "", "construct_c"], [242, 4, 1, "", "construct_d"], [242, 4, 1, "", "get_gen_sol_from_part_sol"], [242, 4, 1, "", "rational_laurent_series"], [242, 4, 1, "", "remove_redundant_sols"], [242, 4, 1, "", "riccati_inverse_normal"], [242, 4, 1, "", "riccati_normal"], [242, 4, 1, "", "riccati_reduced"], [242, 4, 1, "", "solve_aux_eq"], [242, 4, 1, "", "solve_riccati"]], "sympy.solvers.ode.single": [[242, 1, 1, "", "AlmostLinear"], [242, 1, 1, "", "Bernoulli"], [242, 1, 1, "", "Factorable"], [242, 1, 1, "", "FirstExact"], [242, 1, 1, "", "FirstLinear"], [242, 1, 1, "", "HomogeneousCoeffBest"], [242, 1, 1, "", "HomogeneousCoeffSubsDepDivIndep"], [242, 1, 1, "", "HomogeneousCoeffSubsIndepDivDep"], [242, 1, 1, "", "LieGroup"], [242, 1, 1, "", "LinearCoefficients"], [242, 1, 1, "", "Liouville"], [242, 1, 1, "", "NthAlgebraic"], [242, 1, 1, "", "NthLinearConstantCoeffHomogeneous"], [242, 1, 1, "", "NthLinearConstantCoeffUndeterminedCoefficients"], [242, 1, 1, "", "NthLinearConstantCoeffVariationOfParameters"], [242, 1, 1, "", "NthLinearEulerEqHomogeneous"], [242, 1, 1, "", "NthLinearEulerEqNonhomogeneousUndeterminedCoefficients"], [242, 1, 1, "", "NthLinearEulerEqNonhomogeneousVariationOfParameters"], [242, 1, 1, "", "NthOrderReducible"], [242, 1, 1, "", "RationalRiccati"], [242, 1, 1, "", "RiccatiSpecial"], [242, 1, 1, "", "SecondHypergeometric"], [242, 1, 1, "", "SecondLinearAiry"], [242, 1, 1, "", "SecondLinearBessel"], [242, 1, 1, "", "Separable"], [242, 1, 1, "", "SeparableReduced"]], "sympy.solvers.ode.systems": [[242, 4, 1, "", "canonical_odes"], [242, 4, 1, "", "dsolve_system"], [242, 4, 1, "", "linear_ode_to_matrix"], [242, 4, 1, "", "linodesolve"], [242, 4, 1, "", "linodesolve_type"], [242, 4, 1, "", "matrix_exp"], [242, 4, 1, "", "matrix_exp_jordan_form"]], "sympy.solvers.pde": [[243, 4, 1, "", "checkpdesol"], [243, 4, 1, "", "classify_pde"], [243, 4, 1, "", "pde_1st_linear_constant_coeff"], [243, 4, 1, "", "pde_1st_linear_constant_coeff_homogeneous"], [243, 4, 1, "", "pde_1st_linear_variable_coeff"], [243, 4, 1, "", "pde_separate"], [243, 4, 1, "", "pde_separate_add"], [243, 4, 1, "", "pde_separate_mul"], [243, 4, 1, "", "pdsolve"]], "sympy.solvers.polysys": [[244, 4, 1, "", "solve_poly_system"], [244, 4, 1, "", "solve_triangulated"]], "sympy.solvers.recurr": [[244, 4, 1, "", "rsolve"], [244, 4, 1, "", "rsolve_hyper"], [244, 4, 1, "", "rsolve_poly"], [244, 4, 1, "", "rsolve_ratio"]], "sympy.solvers.simplex": [[244, 4, 1, "", "linprog"], [244, 4, 1, "", "lpmax"], [244, 4, 1, "", "lpmin"]], "sympy.solvers.solvers": [[244, 4, 1, "", "checksol"], [244, 4, 1, "", "nsolve"], [244, 4, 1, "", "solve"], [244, 4, 1, "", "solve_linear"], [244, 4, 1, "", "solve_linear_system"], [244, 4, 1, "", "solve_linear_system_LU"], [244, 4, 1, "", "solve_undetermined_coeffs"], [244, 4, 1, "", "unrad"]], "sympy.solvers.solveset": [[245, 4, 1, "", "_is_exponential"], [245, 4, 1, "", "_is_logarithmic"], [245, 4, 1, "", "_solve_exponential"], [245, 4, 1, "", "_solve_logarithm"], [245, 4, 1, "", "_transolve"], [245, 4, 1, "", "domain_check"], [245, 4, 1, "", "invert_complex"], [245, 4, 1, "", "invert_real"], [245, 4, 1, "", "linear_eq_to_matrix"], [245, 4, 1, "", "linsolve"], [245, 4, 1, "", "nonlinsolve"], [245, 4, 1, "", "solveset"], [245, 4, 1, "", "solveset_complex"], [245, 4, 1, "", "solveset_real"], [245, 4, 1, "", "solvify"]], "sympy.stats": [[246, 4, 1, "", "Arcsin"], [246, 4, 1, "", "Benini"], [246, 4, 1, "", "Bernoulli"], [246, 1, 1, "", "BernoulliProcess"], [246, 4, 1, "", "Beta"], [246, 4, 1, "", "BetaBinomial"], [246, 4, 1, "", "BetaNoncentral"], [246, 4, 1, "", "BetaPrime"], [246, 4, 1, "", "Binomial"], [246, 4, 1, "", "BoundedPareto"], [246, 4, 1, "", "Cauchy"], [246, 1, 1, "", "CentralMoment"], [246, 4, 1, "", "Chi"], [246, 4, 1, "", "ChiNoncentral"], [246, 4, 1, "", "ChiSquared"], [246, 4, 1, "", "Coin"], [246, 1, 1, "", "ContinuousMarkovChain"], [246, 4, 1, "", "ContinuousRV"], [246, 1, 1, "", "Covariance"], [246, 1, 1, "", "CrossCovarianceMatrix"], [246, 4, 1, "", "Dagum"], [246, 4, 1, "", "Davis"], [246, 4, 1, "", "Die"], [246, 1, 1, "", "DiscreteMarkovChain"], [246, 4, 1, "", "DiscreteUniform"], [246, 4, 1, "", "E"], [246, 4, 1, "", "Erlang"], [246, 4, 1, "", "ExGaussian"], [246, 1, 1, "", "Expectation"], [246, 1, 1, "", "ExpectationMatrix"], [246, 4, 1, "", "Exponential"], [246, 4, 1, "", "FDistribution"], [246, 4, 1, "", "FiniteRV"], [246, 4, 1, "", "FisherZ"], [246, 4, 1, "", "Frechet"], [246, 4, 1, "", "Gamma"], [246, 4, 1, "", "GammaInverse"], [246, 1, 1, "", "GammaProcess"], [246, 4, 1, "", "GeneralizedMultivariateLogGamma"], [246, 4, 1, "", "GeneralizedMultivariateLogGammaOmega"], [246, 4, 1, "", "Geometric"], [246, 4, 1, "", "Gompertz"], [246, 4, 1, "", "Gumbel"], [246, 4, 1, "", "Hermite"], [246, 4, 1, "", "Hypergeometric"], [246, 4, 1, "", "JointRV"], [246, 4, 1, "", "Kumaraswamy"], [246, 4, 1, "", "Laplace"], [246, 4, 1, "", "Levy"], [246, 4, 1, "", "LogLogistic"], [246, 4, 1, "", "LogNormal"], [246, 4, 1, "", "Logarithmic"], [246, 4, 1, "", "Logistic"], [246, 4, 1, "", "Lomax"], [246, 4, 1, "", "MatrixGamma"], [246, 4, 1, "", "MatrixNormal"], [246, 4, 1, "", "Maxwell"], [246, 1, 1, "", "Moment"], [246, 4, 1, "", "Moyal"], [246, 4, 1, "", "Multinomial"], [246, 4, 1, "", "MultivariateBeta"], [246, 4, 1, "", "MultivariateEwens"], [246, 4, 1, "", "MultivariateLaplace"], [246, 4, 1, "", "MultivariateNormal"], [246, 4, 1, "", "MultivariateT"], [246, 4, 1, "", "Nakagami"], [246, 4, 1, "", "NegativeBinomial"], [246, 4, 1, "", "NegativeMultinomial"], [246, 4, 1, "", "Normal"], [246, 4, 1, "", "NormalGamma"], [246, 4, 1, "", "P"], [246, 4, 1, "", "Pareto"], [246, 4, 1, "", "Poisson"], [246, 1, 1, "", "PoissonProcess"], [246, 4, 1, "", "PowerFunction"], [246, 1, 1, "", "Probability"], [246, 4, 1, "", "QuadraticU"], [246, 4, 1, "", "Rademacher"], [246, 4, 1, "", "RaisedCosine"], [246, 4, 1, "", "Rayleigh"], [246, 4, 1, "", "Reciprocal"], [246, 4, 1, "", "ShiftedGompertz"], [246, 4, 1, "", "Skellam"], [246, 4, 1, "", "StudentT"], [246, 4, 1, "", "Trapezoidal"], [246, 4, 1, "", "Triangular"], [246, 4, 1, "", "Uniform"], [246, 4, 1, "", "UniformSum"], [246, 1, 1, "", "Variance"], [246, 1, 1, "", "VarianceMatrix"], [246, 4, 1, "", "VonMises"], [246, 4, 1, "", "Wald"], [246, 4, 1, "", "Weibull"], [246, 1, 1, "", "WienerProcess"], [246, 4, 1, "", "WignerSemicircle"], [246, 4, 1, "", "Wishart"], [246, 4, 1, "", "YuleSimon"], [246, 4, 1, "", "Zeta"], [246, 4, 1, "", "cmoment"], [246, 4, 1, "", "correlation"], [246, 4, 1, "", "coskewness"], [246, 4, 1, "", "covariance"], [246, 0, 0, "-", "crv"], [246, 0, 0, "-", "crv_types"], [246, 4, 1, "", "density"], [246, 4, 1, "", "entropy"], [246, 4, 1, "", "factorial_moment"], [246, 0, 0, "-", "frv"], [246, 0, 0, "-", "frv_types"], [246, 4, 1, "", "given"], [246, 4, 1, "", "kurtosis"], [246, 4, 1, "", "marginal_distribution"], [246, 4, 1, "", "median"], [246, 4, 1, "", "moment"], [246, 4, 1, "", "quantile"], [246, 0, 0, "-", "rv"], [246, 4, 1, "", "sample"], [246, 4, 1, "", "sample_iter"], [246, 4, 1, "", "skewness"], [246, 4, 1, "", "std"], [246, 4, 1, "", "variance"], [246, 4, 1, "", "where"]], "sympy.stats.BernoulliProcess": [[246, 2, 1, "", "expectation"], [246, 2, 1, "", "probability"]], "sympy.stats.DiscreteMarkovChain": [[246, 2, 1, "", "absorbing_probabilities"], [246, 2, 1, "", "canonical_form"], [246, 2, 1, "", "communication_classes"], [246, 2, 1, "", "decompose"], [246, 2, 1, "", "fixed_row_vector"], [246, 2, 1, "", "fundamental_matrix"], [246, 3, 1, "", "limiting_distribution"], [246, 2, 1, "", "sample"], [246, 2, 1, "", "stationary_distribution"], [246, 3, 1, "", "transition_probabilities"]], "sympy.stats.compound_rv": [[246, 1, 1, "", "CompoundDistribution"]], "sympy.stats.crv": [[246, 1, 1, "", "ContinuousDomain"], [246, 1, 1, "", "ContinuousPSpace"]], "sympy.stats.crv_types": [[246, 1, 1, "", "NormalPSpace"]], "sympy.stats.crv_types.sympy.stats": [[246, 4, 1, "", "Die"], [246, 4, 1, "", "Normal"]], "sympy.stats.frv": [[246, 1, 1, "", "FiniteDomain"], [246, 1, 1, "", "FinitePSpace"]], "sympy.stats.frv_types": [[246, 1, 1, "", "DiePSpace"]], "sympy.stats.rv": [[246, 1, 1, "", "ConditionalDomain"], [246, 1, 1, "", "PSpace"], [246, 1, 1, "", "ProductDomain"], [246, 1, 1, "", "ProductPSpace"], [246, 1, 1, "", "RandomDomain"], [246, 1, 1, "", "RandomSymbol"], [246, 1, 1, "", "SingleDomain"], [246, 1, 1, "", "SinglePSpace"], [246, 4, 1, "", "pspace"], [246, 4, 1, "", "random_symbols"], [246, 4, 1, "", "rs_swap"], [246, 4, 1, "", "sampling_E"], [246, 4, 1, "", "sampling_P"], [246, 4, 1, "", "sampling_density"]], "sympy.tensor": [[247, 0, 0, "-", "array"], [250, 0, 0, "-", "index_methods"], [251, 0, 0, "-", "indexed"], [252, 0, 0, "-", "tensor"], [253, 0, 0, "-", "toperators"]], "sympy.tensor.array": [[247, 1, 1, "", "ImmutableDenseNDimArray"], [247, 1, 1, "", "ImmutableSparseNDimArray"], [247, 1, 1, "", "MutableDenseNDimArray"], [247, 1, 1, "", "MutableSparseNDimArray"], [247, 4, 1, "", "derive_by_array"], [248, 0, 0, "-", "expressions"], [247, 4, 1, "", "permutedims"], [247, 4, 1, "", "tensorcontraction"], [247, 4, 1, "", "tensordiagonal"], [247, 4, 1, "", "tensorproduct"]], "sympy.tensor.array.expressions": [[248, 1, 1, "", "ArrayContraction"], [248, 1, 1, "", "ArrayDiagonal"], [248, 1, 1, "", "ArrayTensorProduct"], [248, 1, 1, "", "PermuteDims"]], "sympy.tensor.index_methods": [[250, 4, 1, "", "get_contraction_structure"], [250, 4, 1, "", "get_indices"]], "sympy.tensor.indexed": [[251, 1, 1, "", "Idx"], [251, 1, 1, "", "Indexed"], [251, 1, 1, "", "IndexedBase"]], "sympy.tensor.indexed.Idx": [[251, 3, 1, "", "label"], [251, 3, 1, "", "lower"], [251, 3, 1, "", "upper"]], "sympy.tensor.indexed.Indexed": [[251, 3, 1, "", "base"], [251, 3, 1, "", "indices"], [251, 3, 1, "", "ranges"], [251, 3, 1, "", "rank"], [251, 3, 1, "", "shape"]], "sympy.tensor.indexed.IndexedBase": [[251, 3, 1, "", "label"], [251, 3, 1, "", "offset"], [251, 3, 1, "", "shape"], [251, 3, 1, "", "strides"]], "sympy.tensor.tensor": [[252, 1, 1, "", "TensAdd"], [252, 1, 1, "", "TensExpr"], [252, 1, 1, "", "TensMul"], [252, 1, 1, "", "TensorHead"], [252, 1, 1, "", "TensorIndex"], [252, 1, 1, "", "TensorIndexType"], [252, 1, 1, "", "TensorSymmetry"], [252, 1, 1, "", "TensorType"], [252, 1, 1, "", "_TensorManager"], [252, 4, 1, "", "canon_bp"], [252, 4, 1, "", "riemann_cyclic"], [252, 4, 1, "", "riemann_cyclic_replace"], [252, 4, 1, "", "tensor_heads"], [252, 4, 1, "", "tensorsymmetry"]], "sympy.tensor.tensor.TensAdd": [[252, 2, 1, "", "canon_bp"], [252, 2, 1, "", "contract_metric"]], "sympy.tensor.tensor.TensExpr": [[252, 2, 1, "", "get_matrix"], [252, 2, 1, "", "replace_with_arrays"]], "sympy.tensor.tensor.TensMul": [[252, 2, 1, "", "canon_bp"], [252, 2, 1, "", "contract_metric"], [252, 2, 1, "", "get_free_indices"], [252, 2, 1, "", "get_indices"], [252, 2, 1, "", "perm2tensor"], [252, 2, 1, "", "sorted_components"], [252, 2, 1, "", "split"]], "sympy.tensor.tensor.TensorHead": [[252, 2, 1, "", "commutes_with"]], "sympy.tensor.tensor.TensorSymmetry": [[252, 2, 1, "", "direct_product"], [252, 2, 1, "", "fully_symmetric"], [252, 2, 1, "", "no_symmetry"], [252, 2, 1, "", "riemann"]], "sympy.tensor.tensor._TensorManager": [[252, 2, 1, "", "clear"], [252, 2, 1, "", "comm_i2symbol"], [252, 2, 1, "", "comm_symbols2i"], [252, 2, 1, "", "get_comm"], [252, 2, 1, "", "set_comm"], [252, 2, 1, "", "set_comms"]], "sympy.tensor.toperators": [[253, 1, 1, "", "PartialDerivative"]], "sympy.testing": [[255, 0, 0, "-", "pytest"], [256, 0, 0, "-", "randtest"], [257, 0, 0, "-", "runtests"]], "sympy.testing.pytest": [[255, 4, 1, "", "SKIP"], [255, 4, 1, "", "nocache_fail"], [255, 4, 1, "", "raises"], [255, 4, 1, "", "skip_under_pyodide"], [255, 4, 1, "", "warns"], [255, 4, 1, "", "warns_deprecated_sympy"]], "sympy.testing.runtests": [[257, 1, 1, "", "PyTestReporter"], [257, 1, 1, "", "Reporter"], [257, 1, 1, "", "SymPyDocTestFinder"], [257, 1, 1, "", "SymPyDocTestRunner"], [257, 1, 1, "", "SymPyOutputChecker"], [257, 1, 1, "", "SymPyTestResults"], [257, 4, 1, "", "convert_to_native_paths"], [257, 4, 1, "", "doctest"], [257, 4, 1, "", "get_sympy_dir"], [257, 4, 1, "", "raise_on_deprecated"], [257, 4, 1, "", "run_all_tests"], [257, 4, 1, "", "run_in_subprocess_with_hash_randomization"], [257, 4, 1, "", "split_list"], [257, 4, 1, "", "sympytestfile"], [257, 4, 1, "", "test"]], "sympy.testing.runtests.PyTestReporter": [[257, 2, 1, "", "write"]], "sympy.testing.runtests.SymPyDocTestRunner": [[257, 2, 1, "", "run"]], "sympy.testing.runtests.SymPyOutputChecker": [[257, 2, 1, "", "check_output"]], "sympy.testing.runtests.SymPyTestResults": [[257, 5, 1, "", "attempted"], [257, 5, 1, "", "failed"]], "sympy.utilities": [[258, 0, 0, "-", "autowrap"], [259, 0, 0, "-", "codegen"], [260, 0, 0, "-", "decorator"], [261, 0, 0, "-", "enumerative"], [262, 0, 0, "-", "exceptions"], [264, 0, 0, "-", "iterables"], [265, 0, 0, "-", "lambdify"], [266, 0, 0, "-", "memoization"], [267, 0, 0, "-", "misc"], [268, 0, 0, "-", "source"], [269, 0, 0, "-", "timeutils"]], "sympy.utilities.autowrap": [[258, 1, 1, "", "CodeWrapper"], [258, 1, 1, "", "CythonCodeWrapper"], [258, 1, 1, "", "DummyWrapper"], [258, 1, 1, "", "F2PyCodeWrapper"], [258, 1, 1, "", "UfuncifyCodeWrapper"], [258, 4, 1, "", "autowrap"], [258, 4, 1, "", "binary_function"], [258, 4, 1, "", "ufuncify"]], "sympy.utilities.autowrap.CythonCodeWrapper": [[258, 2, 1, "", "dump_pyx"]], "sympy.utilities.autowrap.UfuncifyCodeWrapper": [[258, 2, 1, "", "dump_c"]], "sympy.utilities.codegen": [[259, 1, 1, "", "Argument"], [259, 1, 1, "", "CCodeGen"], [259, 1, 1, "", "CodeGen"], [259, 1, 1, "", "DataType"], [259, 1, 1, "", "FCodeGen"], [259, 1, 1, "", "JuliaCodeGen"], [259, 1, 1, "", "OctaveCodeGen"], [259, 1, 1, "", "OutputArgument"], [259, 1, 1, "", "Result"], [259, 1, 1, "", "Routine"], [259, 1, 1, "", "RustCodeGen"], [259, 4, 1, "", "codegen"], [259, 4, 1, "", "get_default_datatype"], [259, 4, 1, "", "make_routine"]], "sympy.utilities.codegen.CCodeGen": [[259, 2, 1, "", "dump_c"], [259, 2, 1, "", "dump_h"], [259, 2, 1, "", "get_prototype"]], "sympy.utilities.codegen.CodeGen": [[259, 2, 1, "", "dump_code"], [259, 2, 1, "", "routine"], [259, 2, 1, "", "write"]], "sympy.utilities.codegen.FCodeGen": [[259, 2, 1, "", "dump_f95"], [259, 2, 1, "", "dump_h"], [259, 2, 1, "", "get_interface"]], "sympy.utilities.codegen.JuliaCodeGen": [[259, 2, 1, "", "dump_jl"], [259, 2, 1, "", "routine"]], "sympy.utilities.codegen.OctaveCodeGen": [[259, 2, 1, "", "dump_m"], [259, 2, 1, "", "routine"]], "sympy.utilities.codegen.Routine": [[259, 3, 1, "", "result_variables"], [259, 3, 1, "", "variables"]], "sympy.utilities.codegen.RustCodeGen": [[259, 2, 1, "", "dump_rs"], [259, 2, 1, "", "get_prototype"], [259, 2, 1, "", "routine"]], "sympy.utilities.decorator": [[260, 4, 1, "", "conserve_mpmath_dps"], [260, 4, 1, "", "deprecated"], [260, 4, 1, "", "doctest_depends_on"], [260, 4, 1, "", "memoize_property"], [260, 1, 1, "", "no_attrs_in_subclass"], [260, 4, 1, "", "public"], [260, 4, 1, "", "threaded"], [260, 4, 1, "", "threaded_factory"], [260, 4, 1, "", "xthreaded"]], "sympy.utilities.enumerative": [[261, 1, 1, "", "MultisetPartitionTraverser"], [261, 4, 1, "", "factoring_visitor"], [261, 4, 1, "", "list_visitor"], [261, 4, 1, "", "multiset_partitions_taocp"]], "sympy.utilities.enumerative.MultisetPartitionTraverser": [[261, 2, 1, "", "count_partitions"], [261, 2, 1, "", "enum_all"], [261, 2, 1, "", "enum_large"], [261, 2, 1, "", "enum_range"], [261, 2, 1, "", "enum_small"]], "sympy.utilities.exceptions": [[262, 7, 1, "", "SymPyDeprecationWarning"], [262, 4, 1, "", "ignore_warnings"], [262, 4, 1, "", "sympy_deprecation_warning"]], "sympy.utilities.iterables": [[264, 1, 1, "", "NotIterable"], [264, 4, 1, "", "binary_partitions"], [264, 4, 1, "", "bracelets"], [264, 4, 1, "", "capture"], [264, 4, 1, "", "common_prefix"], [264, 4, 1, "", "common_suffix"], [264, 4, 1, "", "connected_components"], [264, 4, 1, "", "dict_merge"], [264, 4, 1, "", "filter_symbols"], [264, 4, 1, "", "flatten"], [264, 4, 1, "", "generate_bell"], [264, 4, 1, "", "generate_derangements"], [264, 4, 1, "", "generate_involutions"], [264, 4, 1, "", "generate_oriented_forest"], [264, 4, 1, "", "group"], [264, 4, 1, "", "has_dups"], [264, 4, 1, "", "has_variety"], [264, 4, 1, "", "ibin"], [264, 4, 1, "", "iproduct"], [264, 4, 1, "", "is_palindromic"], [264, 4, 1, "", "is_sequence"], [264, 4, 1, "", "iterable"], [264, 4, 1, "", "kbins"], [264, 4, 1, "", "least_rotation"], [264, 4, 1, "", "minlex"], [264, 4, 1, "", "multiset"], [264, 4, 1, "", "multiset_combinations"], [264, 4, 1, "", "multiset_derangements"], [264, 4, 1, "", "multiset_partitions"], [264, 4, 1, "", "multiset_permutations"], [264, 4, 1, "", "necklaces"], [264, 4, 1, "", "numbered_symbols"], [264, 4, 1, "", "ordered_partitions"], [264, 4, 1, "", "partitions"], [264, 4, 1, "", "permute_signs"], [264, 4, 1, "", "postfixes"], [264, 4, 1, "", "prefixes"], [264, 4, 1, "", "random_derangement"], [264, 4, 1, "", "reshape"], [264, 4, 1, "", "rotate_left"], [264, 4, 1, "", "rotate_right"], [264, 4, 1, "", "rotations"], [264, 4, 1, "", "roundrobin"], [264, 4, 1, "", "runs"], [264, 4, 1, "", "sequence_partitions"], [264, 4, 1, "", "sequence_partitions_empty"], [264, 4, 1, "", "sift"], [264, 4, 1, "", "signed_permutations"], [264, 4, 1, "", "strongly_connected_components"], [264, 4, 1, "", "subsets"], [264, 4, 1, "", "take"], [264, 4, 1, "", "topological_sort"], [264, 4, 1, "", "unflatten"], [264, 4, 1, "", "uniq"], [264, 4, 1, "", "variations"]], "sympy.utilities.lambdify": [[265, 4, 1, "", "implemented_function"], [265, 4, 1, "", "lambdastr"], [265, 4, 1, "", "lambdify"]], "sympy.utilities.memoization": [[266, 4, 1, "", "assoc_recurrence_memo"], [266, 4, 1, "", "recurrence_memo"]], "sympy.utilities.misc": [[267, 4, 1, "", "as_int"], [267, 4, 1, "", "debug"], [267, 4, 1, "", "debug_decorator"], [267, 4, 1, "", "debugf"], [267, 4, 1, "", "filldedent"], [267, 4, 1, "", "find_executable"], [267, 4, 1, "", "func_name"], [267, 4, 1, "", "ordinal"], [267, 4, 1, "", "rawlines"], [267, 4, 1, "", "replace"], [267, 4, 1, "", "strlines"], [267, 4, 1, "", "translate"]], "sympy.utilities.source": [[268, 4, 1, "", "get_class"], [268, 4, 1, "", "get_mod_func"]], "sympy.utilities.timeutils": [[269, 4, 1, "", "timed"]], "sympy.vector.coordsysrect": [[270, 1, 1, "", "CoordSys3D"]], "sympy.vector.coordsysrect.CoordSys3D": [[270, 2, 1, "", "__init__"], [270, 2, 1, "", "create_new"], [270, 2, 1, "", "locate_new"], [270, 2, 1, "", "orient_new"], [270, 2, 1, "", "orient_new_axis"], [270, 2, 1, "", "orient_new_body"], [270, 2, 1, "", "orient_new_quaternion"], [270, 2, 1, "", "orient_new_space"], [270, 2, 1, "", "position_wrt"], [270, 2, 1, "", "rotation_matrix"], [270, 2, 1, "", "scalar_map"]], "sympy.vector": [[273, 4, 1, "", "curl"], [273, 4, 1, "", "divergence"], [273, 4, 1, "", "express"], [273, 4, 1, "", "gradient"], [273, 4, 1, "", "is_conservative"], [273, 4, 1, "", "is_solenoidal"], [273, 4, 1, "", "matrix_to_vector"], [273, 4, 1, "", "scalar_potential"], [273, 4, 1, "", "scalar_potential_difference"]], "sympy.vector.deloperator": [[270, 1, 1, "", "Del"]], "sympy.vector.deloperator.Del": [[270, 2, 1, "", "cross"], [270, 2, 1, "", "dot"], [270, 2, 1, "", "gradient"]], "sympy.vector.dyadic": [[270, 1, 1, "", "Dyadic"]], "sympy.vector.dyadic.Dyadic": [[270, 3, 1, "", "components"], [270, 2, 1, "", "cross"], [270, 2, 1, "", "dot"], [270, 2, 1, "", "to_matrix"]], "sympy.vector.implicitregion": [[270, 1, 1, "", "ImplicitRegion"]], "sympy.vector.implicitregion.ImplicitRegion": [[270, 2, 1, "", "multiplicity"], [270, 2, 1, "", "rational_parametrization"], [270, 2, 1, "", "regular_point"], [270, 2, 1, "", "singular_points"]], "sympy.vector.integrals": [[270, 1, 1, "", "ParametricIntegral"], [273, 4, 1, "", "vector_integrate"]], "sympy.vector.orienters": [[272, 1, 1, "", "AxisOrienter"], [272, 1, 1, "", "BodyOrienter"], [272, 1, 1, "", "Orienter"], [272, 1, 1, "", "QuaternionOrienter"], [272, 1, 1, "", "SpaceOrienter"]], "sympy.vector.orienters.AxisOrienter": [[272, 2, 1, "", "__init__"], [272, 2, 1, "", "rotation_matrix"]], "sympy.vector.orienters.BodyOrienter": [[272, 2, 1, "", "__init__"]], "sympy.vector.orienters.Orienter": [[272, 2, 1, "", "rotation_matrix"]], "sympy.vector.orienters.QuaternionOrienter": [[272, 2, 1, "", "__init__"]], "sympy.vector.orienters.SpaceOrienter": [[272, 2, 1, "", "__init__"]], "sympy.vector.parametricregion": [[270, 1, 1, "", "ParametricRegion"]], "sympy.vector.vector": [[270, 1, 1, "", "Vector"]], "sympy.vector.vector.Vector": [[270, 3, 1, "", "components"], [270, 2, 1, "", "cross"], [270, 2, 1, "", "dot"], [270, 2, 1, "", "magnitude"], [270, 2, 1, "", "normalize"], [270, 2, 1, "", "outer"], [270, 2, 1, "", "projection"], [270, 2, 1, "", "separate"], [270, 2, 1, "", "to_matrix"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function", "5": "py:attribute", "6": "py:data", "7": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"], "5": ["py", "attribute", "Python attribute"], "6": ["py", "data", "Python data"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"cite": 0, "sympi": [0, 4, 7, 9, 13, 15, 18, 19, 20, 25, 30, 32, 36, 38, 39, 49, 91, 110, 158, 207, 216, 270, 273, 274, 277, 291, 293, 296], "debug": [1, 12], "depend": [2, 8, 12, 155, 216, 275], "hard": 2, "option": [2, 9, 32, 35, 36, 37, 219], "recommend": [2, 5], "interact": [2, 96, 212], "us": [2, 5, 7, 13, 19, 28, 30, 31, 32, 33, 34, 35, 36, 37, 49, 71, 92, 93, 109, 117, 150, 155, 156, 210, 212, 223, 245, 275], "print": [2, 13, 23, 49, 96, 128, 138, 200, 206, 226, 301], "pars": [2, 37, 110], "logic": [2, 22, 98, 281, 284], "plot": [2, 13, 122, 171, 212], "lambdifi": [2, 13, 109, 265, 291], "code": [2, 3, 5, 7, 9, 11, 12, 13, 49, 52, 128, 210, 226, 268, 281, 283], "gener": [2, 4, 5, 49, 58, 60, 216, 221, 245, 276, 281, 283], "autowrap": [2, 49, 258], "printer": [2, 49, 226, 301], "test": [2, 11, 12, 13, 65, 98, 225, 254, 256, 257, 298], "onli": [2, 30, 35, 245], "statist": 2, "symengin": 2, "backend": [2, 110, 212], "sage": 2, "develop": [2, 7, 9, 11, 68], "get": [2, 7, 9, 15, 28], "sourc": [2, 268], "run": [2, 11, 12, 39, 257], "build": [2, 8], "document": [2, 3, 4, 5, 7, 8, 11, 38], "benchmark": 2, "deprec": [3, 12, 13], "polici": [3, 12], "what": [3, 155, 215, 216, 245, 296, 299], "i": [3, 12, 15, 34, 35, 93, 109, 155, 215, 226, 245, 296], "try": 3, "avoid": 3, "backward": 3, "incompat": 3, "chang": [3, 11, 13], "first": [3, 13], "place": 3, "when": [3, 37, 93], "doe": [3, 15, 245], "requir": [3, 8], "public": 3, "api": [3, 38, 89, 93, 95, 113, 124, 132, 204, 245, 258, 259, 271, 281], "Not": [3, 28, 30, 31, 32, 34, 35, 36, 37], "The": [3, 13, 21, 23, 50, 58, 93, 155, 196, 208, 221, 233, 236, 276, 277, 296], "purpos": 3, "technic": 3, "possibl": [3, 32, 298], "how": [3, 24, 38, 93, 210, 245], "long": 3, "should": [3, 109], "last": 3, "checklist": [3, 11], "ad": 3, "releas": 3, "note": [3, 23, 68, 80, 155, 233, 235, 294, 303], "entri": [3, 104], "docstr": [4, 5, 111, 112, 114, 116, 118, 120, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 202, 203, 205, 206, 270, 272, 273], "style": [4, 5, 12], "guid": [4, 5, 10, 12, 24, 38, 115, 151, 208, 278], "guidelin": [4, 5], "format": [4, 5, 13, 37], "section": 4, "1": [4, 13, 26, 35, 93, 117, 141, 155, 167], "singl": [4, 15, 17, 30], "sentenc": 4, "summari": 4, "2": [4, 26, 35, 93, 117, 141, 155], "explan": [4, 16, 38], "3": [4, 26, 95, 117, 141, 192], "exampl": [4, 11, 23, 26, 28, 30, 31, 34, 36, 40, 68, 80, 92, 95, 108, 117, 125, 142, 155, 159, 163, 194, 195, 196, 210, 225, 226, 233, 236, 246, 247, 248, 251, 276, 296, 302], "4": [4, 13, 26, 117], "paramet": [4, 31, 236, 245], "5": [4, 13, 26, 117], "see": [4, 68, 264, 276], "also": [4, 68, 264], "6": [4, 13, 117], "refer": [4, 21, 26, 38, 41, 48, 51, 67, 68, 70, 80, 86, 93, 95, 101, 102, 104, 106, 108, 110, 113, 132, 157, 163, 166, 196, 208, 210, 211, 212, 213, 217, 219, 221, 222, 223, 233, 235, 236, 239, 245, 258, 259, 278, 281], "sampl": [4, 13], "class": [4, 13, 18, 48, 49, 67, 70, 102, 104, 106, 108, 110, 155, 201, 212, 221, 226, 239, 247, 270, 272], "ar": [4, 30, 35, 210, 216, 245], "mathemat": [4, 15, 28, 158], "function": [4, 12, 13, 15, 23, 28, 30, 32, 34, 35, 37, 49, 58, 67, 68, 74, 75, 76, 86, 87, 90, 91, 93, 98, 104, 108, 110, 117, 128, 136, 156, 178, 181, 202, 203, 207, 212, 214, 216, 217, 222, 225, 226, 236, 239, 242, 243, 247, 273, 277, 301, 302], "best": [4, 5, 23], "practic": [4, 5, 23], "write": [4, 5, 11, 12, 23], "import": 4, "sphinx": 4, "cross": 4, "referenc": 4, "type": [5, 12, 17, 30, 49, 76, 202, 245, 246], "narr": 5, "markdown": 5, "prefer": [5, 37], "math": [5, 49], "latex": [5, 110, 301], "head": 5, "spell": 5, "punctuat": 5, "capit": 5, "tone": 5, "contribut": [6, 7, 11, 38, 223], "introduct": [7, 15, 19, 41, 48, 49, 50, 58, 70, 80, 98, 115, 141, 158, 196, 207, 209, 212, 213, 214, 221, 225, 279, 296], "familiar": 7, "softwar": 7, "read": [7, 294], "paper": 7, "perus": 7, "review": 7, "conduct": 7, "join": 7, "our": 7, "mail": 7, "list": [7, 13, 15, 17, 28, 30], "setup": [7, 9], "your": [7, 9, 11, 32], "environ": [7, 9], "identifi": 7, "someth": [7, 12], "work": [7, 31, 33, 35, 80, 225], "codebas": 7, "pull": [7, 11], "request": [7, 11], "docker": 8, "debian": 8, "ubuntu": 8, "fedora": 8, "mac": 8, "window": [8, 212], "10": [8, 13, 117], "doc": [8, 217], "local": 8, "instal": [8, 9, 38, 39, 110, 300], "view": 8, "auto": 8, "rebuild": 8, "live": 8, "server": 8, "pdf": 8, "git": [9, 39], "configur": [9, 219], "name": [9, 11, 56], "email": [9, 11], "set": [9, 13, 18, 32, 35, 36, 45, 80, 210, 234, 245, 301], "github": [9, 12], "creat": [9, 11, 13, 15, 23, 34, 104], "account": 9, "ssh": 9, "kei": [9, 23, 158, 297], "fork": 9, "virtual": 9, "new": [10, 11, 13, 275], "contributor": 10, "index": [10, 50, 58, 248, 251], "workflow": 11, "process": [11, 246], "pick": 11, "an": [11, 13, 32, 34, 35, 80, 141, 196, 236, 245, 297], "issu": [11, 128, 141, 155, 200, 298], "fix": [11, 141], "branch": [11, 93], "modifi": 11, "qualiti": [11, 12], "add": [11, 13, 23, 68], "commit": 11, "delet": [11, 298], "junk": 11, "file": 11, "messag": 11, "good": 11, "co": 11, "author": [11, 211], "make": [11, 32, 37], "titl": 11, "descript": 11, "address": 11, "mailmap": 11, "basic": [12, 68, 72, 104, 202, 214, 216, 222, 234, 274, 281, 282, 291, 298], "failur": 12, "action": 12, "regress": 12, "special": [12, 15, 20, 49, 76, 222, 234, 302], "except": [12, 104, 110, 219, 262], "warn": [12, 13, 262], "unchang": 12, "express": [12, 13, 15, 28, 31, 32, 34, 49, 80, 87, 90, 98, 101, 110, 131, 216, 225, 248, 275, 291, 297], "dummi": 12, "consist": [12, 37], "check": [12, 13, 202], "random": [12, 68, 246], "skip": 12, "mark": 12, "expect": 12, "fail": 12, "slow": [12, 155], "extern": 12, "doctest": 12, "updat": 12, "exist": [12, 93], "coverag": 12, "hypothesi": 12, "activ": [13, 111], "silenc": 13, "version": 13, "13": 13, "string": [13, 21, 37, 291], "fallback": 13, "sympifi": [13, 68], "dmp": [13, 216], "rep": 13, "attribut": [13, 50, 58], "pkgdata": 13, "modul": [13, 123, 161, 200, 208, 213, 214, 215, 216, 219, 221, 222, 239, 242, 243, 245, 258], "eq": [13, 32], "rewrit": [13, 23, 49, 227, 302], "marker": 13, "annot": 13, "fill": 13, "rectangl": 13, "move": [13, 236], "mechan": [13, 21, 115, 119, 128, 132, 142, 151, 152, 153, 154, 155, 156, 157, 158, 159, 178, 246], "modularinteg": 13, "to_int": 13, "method": [13, 19, 23, 33, 39, 134, 145, 148, 149, 150, 153, 154, 155, 226, 243, 245, 250, 275, 298], "12": 13, "managedproperti": 13, "metaclass": 13, "joint": [13, 133, 152, 246], "coordin": [13, 128, 145, 155, 212, 274, 275, 277, 279], "intermedi": 13, "frame": [13, 210], "attach": 13, "point": [13, 23, 72, 83, 128, 200, 209, 274], "argument": [13, 15, 245], "11": [13, 117], "tensor": [13, 64, 76, 190, 249, 252, 253], "arrai": [13, 247, 248], "conv_": 13, "renam": 13, "from_": 13, "mathematica": [13, 226], "parser": [13, 110, 141], "redund": 13, "static": 13, "carmichael": 13, "hadamardproduct": 13, "matadd": 13, "matmul": 13, "some": [13, 35, 158, 245], "travers": [13, 68], "have": [13, 32, 36, 225], "been": 13, "core": [13, 68, 101], "trace": 13, "compat": [13, 248], "submodul": [13, 80], "9": [13, 117], "expr_free_symbol": 13, "stat": [13, 246], "numsampl": 13, "n": [13, 247, 248], "poli": [13, 215, 216, 217, 224], "solver": [13, 35, 224, 240, 241, 242, 244, 245, 303], "rawmatrix": 13, "non": 13, "expr": [13, 68], "object": [13, 18, 251], "matrix": [13, 33, 45, 101, 104, 105, 155, 246, 298], "get_seg": 13, "mdft": 13, "physic": [13, 27, 125, 128, 142, 152, 153, 154, 155, 156, 157, 158, 159, 198, 200, 204, 207, 208, 209, 210, 281, 287], "matric": [13, 19, 33, 99, 100, 101, 102, 103, 104, 106, 125, 127, 248, 281, 285, 298], "privat": 13, "sparsematrix": [13, 106], "_smat": 13, "densematrix": 13, "_mat": 13, "laplace_transform": 13, "nocond": 13, "fals": 13, "8": [13, 117], "theanocod": 13, "assumpt": [13, 18, 21, 23, 44, 68], "handler": [13, 21], "askhandl": 13, "relat": [13, 15, 17, 21, 30, 68, 76, 98, 207, 210, 277], "7": [13, 117], "call": [13, 30, 37], "stochasticprocess": 13, "distribut": [13, 219, 246], "randomindexedsymbol": 13, "discretemarkovchain": 13, "absorbing_probabilit": 13, "util": [13, 49, 65, 66, 85, 104, 164, 221, 244, 263, 269, 281, 289], "misc": [13, 44], "find_execut": 13, "mutabl": 13, "diffgeom": 13, "unicod": [13, 301], "pretti": [13, 226, 301], "stringpict": 13, "prettyform": 13, "pretty_symbologi": 13, "xstr": 13, "pass": 13, "oper": [13, 15, 90, 104, 169, 178, 180, 181, 202, 207, 210, 236, 247, 253, 274, 276, 277, 291, 298], "longer": 13, "accept": 13, "arg": [13, 297], "variou": [13, 225], "randtest": 13, "mix": 13, "polynomi": [13, 28, 76, 90, 214, 216, 217, 218, 219, 221, 222, 223, 225, 244, 302], "binari": 13, "print_cycl": 13, "flag": 13, "combinator": [13, 55], "permut": [13, 59, 60], "integr": [13, 35, 72, 76, 90, 92, 93, 94, 95, 128, 214, 221, 280, 292], "indefinit": 13, "fun_ev": 13, "__call__": 13, "tensortyp": 13, "dummy_fmt": 13, "tensorindextyp": 13, "metric": 13, "get_kronecker_delta": 13, "get_epsilon": 13, "tensorsymmetri": 13, "tensorhead": 13, "is_emptyset": 13, "productset": 13, "iter": [13, 234, 264], "set_potential_energi": 13, "condit": [13, 35, 93, 234], "conditionset": 13, "max_degre": 13, "get_upper_degre": 13, "properti": [13, 21, 213], "multivariate_result": 13, "dixonresult": 13, "tupl": [13, 15, 17, 30, 222], "lambda": 13, "evalu": [13, 15, 23, 28, 72, 90, 158, 297], "differentiate_finit": 13, "data": 13, "glossari": 14, "gotcha": [15, 21, 141, 294], "pitfal": 15, "equal": [15, 31, 32, 294], "sign": [15, 294], "doubl": 15, "variabl": [15, 30, 35, 37, 212, 246, 275], "assign": 15, "between": [15, 21, 198, 216], "symbol": [15, 21, 22, 23, 30, 31, 33, 68, 87, 155, 159, 211, 216, 222, 225, 245, 294, 296], "python": [15, 49], "number": [15, 45, 54, 68, 71, 72, 93, 108, 216, 221, 225, 281, 286], "v": [15, 22, 216], "float": [15, 72], "ration": [15, 216, 217, 222, 225, 228, 242, 302], "immut": [15, 102], "invers": [15, 23, 74, 93], "trig": 15, "sqrt": 15, "dictionari": [15, 17, 28, 36], "keyword": 15, "help": 15, "from": [15, 31, 32, 33, 37, 225, 248], "within": 15, "solv": [17, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 117, 214, 221, 244, 245, 303], "output": [17, 128, 245], "empti": 17, "Of": 17, "valu": [17, 22, 37], "boolean": [17, 22, 98], "classif": 18, "kind": [18, 68], "func": [18, 297], "finit": [19, 47, 50, 213, 216, 219, 221, 225, 236, 246, 292], "differ": [19, 21, 47, 158, 216, 275, 292], "approxim": [19, 28, 49], "deriv": [19, 35, 210, 247, 277, 292], "A": [19, 143, 144, 147, 148, 149, 150, 155, 296, 303], "direct": [19, 277], "topic": [20, 128, 200, 281, 288], "old": [21, 216], "system": [21, 30, 34, 36, 122, 146, 159, 193, 195, 196, 199, 242, 244, 274, 275, 277, 279], "appli": [21, 93, 236], "input": [21, 245], "predic": [21, 44, 45], "abov": 21, "definit": [21, 23, 86], "implic": 21, "interpret": 21, "other": [21, 23, 39, 87, 136, 207, 275], "is_": 21, "implement": [21, 93, 207, 226, 236, 258, 259, 274, 277], "limit": [21, 30, 31, 92, 141, 231, 233, 292], "combin": [21, 90], "fuzzi": 22, "three": [22, 80], "bool": 22, "custom": [23, 212, 226], "easi": 23, "case": [23, 245], "fulli": 23, "defin": [23, 35], "automat": [23, 225], "eval": 23, "remind": 23, "numer": [23, 28, 34, 35, 37, 72, 90, 95, 109, 128, 158], "evalf": [23, 68, 109, 291], "simplif": [23, 72, 98, 235, 302], "doit": 23, "expand": [23, 225, 227, 302], "differenti": [23, 35, 70, 90, 128, 244, 245, 303], "as_real_imag": 23, "miscellan": [23, 74, 80, 267], "_eval_": 23, "complet": [23, 28, 141], "versin": 23, "divid": 23, "fuse": 23, "multipli": 23, "fma": 23, "addit": [23, 90], "tip": [23, 291, 292, 294, 297, 298], "logo": 25, "control": [26, 121, 122, 123, 124, 212], "packag": 26, "find": [28, 34, 221, 222], "root": [28, 34, 222], "algebra": [28, 30, 31, 32, 33, 35, 36, 41, 97, 104, 166, 210, 213, 216, 221, 225, 244, 303], "altern": [28, 30, 31, 32, 33, 34, 35, 36, 210], "consid": [28, 30, 31, 32, 33, 34, 35, 36], "guidanc": [28, 30, 31, 32, 33, 34, 35, 36, 37], "solut": [28, 31, 32, 33, 34, 35, 36, 37, 178, 245, 276], "without": [28, 35], "multipl": [28, 35, 90, 210, 221], "With": [28, 31, 32, 33, 34, 35, 36, 37], "factor": [28, 214, 219, 225, 302], "equat": [28, 29, 31, 32, 33, 34, 35, 36, 37, 153, 154, 155, 194, 214, 239, 244, 245, 303], "exact": [28, 37], "real_root": 28, "nroot": 28, "complex": [28, 34, 74, 216], "result": [28, 30, 31, 32, 33, 34, 35, 36, 225], "all_root": 28, "tradeoff": 28, "speed": [28, 32, 33, 36, 37, 128, 155], "all": [28, 30, 31, 32, 34, 35, 36], "perhap": 28, "implicitli": [28, 35], "crootof": 28, "repres": [28, 32, 37, 93, 186, 216, 221], "can": [28, 30, 31, 32, 34, 35, 36, 37], "Be": [28, 30, 31, 32, 33, 34, 35], "No": [28, 31, 32, 33, 35], "close": [28, 32, 35, 36, 37], "form": [28, 32, 35, 36, 37, 98, 105, 155, 248], "report": [28, 30, 31, 32, 33, 34, 35, 36, 37], "bug": [28, 30, 31, 32, 33, 34, 35, 36, 37, 95], "reduc": [30, 225], "One": [30, 34, 35], "inequ": [30, 241, 244, 245], "includ": [30, 35, 37], "extract": [30, 31, 33, 35], "decompos": 30, "reduct": [30, 236], "interest": [30, 296], "per": 30, "That": [30, 31, 32, 34, 36, 37], "return": [30, 35, 245], "period": 30, "which": [30, 32, 36, 109, 226], "cannot": [30, 32, 35, 36], "satisfi": 30, "analyt": [30, 178], "diophantin": [31, 239, 244, 245], "zero": [31, 32, 37, 122, 219, 225, 298], "specifi": [31, 35, 212], "order": [31, 45, 222, 233, 236], "verifi": [31, 280], "programmat": [31, 32], "Into": [32, 34, 36], "put": 32, "restrict": 32, "domain": [32, 214, 216, 217, 222, 225, 245], "explicitli": [32, 35], "infinit": [32, 245], "substitut": [32, 34, 128, 200, 291], "solveset": [32, 245], "necessarili": 32, "interrog": 32, "up": [32, 33, 36, 37, 301], "usual": 33, "must": 33, "squar": [33, 214], "sever": 33, "same": 33, "vector": [33, 58, 151, 200, 202, 204, 207, 208, 209, 210, 219, 270, 271, 273, 274, 275, 277, 278, 279, 280], "element": [33, 155, 216, 221], "real": [34, 216], "ensur": [34, 37, 245], "found": 34, "given": [34, 36], "interv": [34, 212], "increas": 34, "precis": 34, "scipi": [34, 35], "ordinari": [35, 244, 245], "od": [35, 242, 244, 245], "Its": 35, "independ": 35, "initi": 35, "boundari": 35, "bewar": 35, "copi": 35, "past": 35, "pair": 35, "If": 35, "There": 35, "arbitrari": 35, "constant": [35, 173, 196], "hint": [35, 242, 243], "unevalu": 35, "select": 35, "specif": [35, 49], "linear": [36, 90, 104, 128, 135, 155, 156, 196, 225, 244], "nonlinear": 36, "you": 37, "might": 37, "ani": [37, 245], "denomin": 37, "do": [37, 245], "simplifi": [37, 49, 219, 237, 238, 302], "welcom": 38, "": [38, 134, 145, 148, 149, 150, 153, 154, 155, 176, 187, 225, 235, 244, 245, 275, 280, 299], "tutori": [38, 239, 290, 295], "anaconda": 39, "mpmath": 39, "question": 39, "abc": 40, "caveat": [40, 110], "quaternion": 41, "ask": 42, "assum": 43, "queri": 44, "content": [44, 55, 75, 88, 94, 218, 230, 240, 249], "perform": 44, "improv": [44, 141], "common": [45, 99, 128, 200, 225, 226, 227], "calculu": [45, 47, 210, 292], "theori": [45, 48, 108, 281, 286], "refin": 46, "singular": [47, 117], "weight": 47, "categori": 48, "base": [48, 70, 104, 213, 214, 225, 232, 245], "diagram": 48, "draw": 48, "codegen": [49, 259], "tool": [49, 107], "abstract": [49, 115, 119, 123, 125, 151, 161, 178, 208, 217], "syntax": 49, "tree": [49, 216, 226, 297], "ast": [49, 141], "predefin": 49, "node": 49, "c": [49, 226], "cfunction": 49, "cnode": 49, "cxxnode": 49, "fortran": [49, 226], "fnode": 49, "algorithm": [49, 50, 176, 187, 219, 222, 228, 233, 236], "pyutil": 49, "cutil": 49, "futil": 49, "present": [50, 58], "group": [50, 51, 53, 56, 58, 59, 196, 221], "overview": [50, 58, 93], "facil": 50, "construct": [50, 58, 248], "free": [50, 214], "word": [50, 58], "coset": 50, "enumer": [50, 73], "todd": 50, "coxet": 50, "cosett": 50, "compress": 50, "standard": 50, "subgroup": 50, "low": 50, "reidemeist": 50, "schreier": 50, "bibliographi": [50, 58], "galoi": [51, 221], "grai": 52, "constructor": [53, 222, 298], "nilpot": 54, "abelian": 54, "cyclic": 54, "partit": [57, 264], "polycycl": 58, "polycyclicgroup": 58, "collector": 58, "comput": [58, 93, 109, 178, 225, 296], "minim": [58, 221], "uncollect": 58, "subword": 58, "collect": [58, 227, 302], "expon": [58, 225], "depth": [58, 80], "lead": 58, "polyhedron": 61, "prufer": 62, "sequenc": [62, 90, 219, 222, 231, 232], "subset": [63, 71], "canonic": 64, "concret": 67, "hypergeometr": [67, 76, 87, 90, 228, 236], "term": [67, 225, 227, 233], "cach": 68, "singleton": [68, 232, 234], "intfunc": 68, "power": [68, 228, 234, 296, 302], "mul": 68, "mod": 68, "multidimension": 68, "contain": 68, "exprtool": 68, "sort": 68, "cryptographi": 69, "geometri": [70, 80, 140, 213], "discret": [71, 246], "transform": [71, 93, 95, 110, 275], "fast": 71, "fourier": [71, 229], "theoret": 71, "walsh": 71, "hadamard": 71, "m\u00f6biu": 71, "convolut": 71, "cover": 71, "product": [71, 179, 190, 247, 276], "intersect": [71, 80], "accuraci": 72, "error": [72, 76], "handl": [72, 245], "sum": 72, "combinatori": 73, "elementari": [74, 213, 232, 234], "trigonometr": [74, 76, 235, 302], "hyperbol": 74, "integ": [74, 216], "exponenti": [74, 76, 302], "piecewis": 74, "dirac": 76, "delta": 76, "discontinu": 76, "gamma": [76, 125], "beta": 76, "fresnel": 76, "logarithm": [76, 302], "bessel": 76, "airi": 76, "b": 76, "spline": 76, "riemann": 76, "zeta": 76, "ellipt": 76, "mathieu": 76, "orthogon": [76, 222, 277], "jacobi": 76, "gegenbau": 76, "chebyshev": 76, "legendr": 76, "hermit": 76, "laguerr": 76, "spheric": 76, "harmon": [76, 167, 192], "curv": [77, 112], "ellips": 78, "entiti": [79, 80, 212], "avail": 80, "usag": [80, 141, 159, 216, 276], "median": 80, "pappu": 80, "hexagon": 80, "theorem": [80, 93, 280], "futur": [80, 128, 141, 200], "truth": [80, 98], "dimens": [80, 193, 196], "beyond": 80, "visual": [80, 158], "line": 81, "plane": [82, 93], "polygon": [84, 95], "about": [86, 245, 275, 303], "holonom": [86, 87, 88, 90, 91, 146], "convert": [87, 90, 216, 291], "represent": [87, 91, 196, 210, 216], "meijer": [87, 90, 93, 236], "g": [87, 90, 93, 236], "intern": [89, 93, 95, 216, 219, 221, 239], "composit": 90, "seri": [90, 212, 223, 228, 229, 230, 233, 292], "expans": [90, 233, 236, 292], "current": 92, "polar": [93, 163], "argand": 93, "tabl": [93, 98, 236], "lookup": 93, "mellin": 93, "converg": 93, "laplac": 93, "thi": [93, 245], "valid": 93, "formula": [93, 236], "todo": 95, "over": [95, 225, 234], "polytop": 95, "For": 95, "2d": 95, "polyhedra": 95, "session": 96, "lie": [97, 242], "equival": [98, 158], "manipul": [98, 104, 131, 218, 219, 222, 223, 245, 297], "infer": 98, "dens": [100, 216, 217, 219], "block": 101, "immutablematrix": 102, "rotat": 104, "numpi": 104, "normal": [105, 225], "spars": [106, 107, 216, 217, 219], "immutablesparsematrix": 106, "ntheori": 108, "ecm": 108, "q": 108, "sub": 109, "ufuncifi": 109, "aesara": [109, 226], "so": 109, "experiment": 110, "mathrm": [110, 301], "antlr": 110, "lark": 110, "featur": [110, 128, 200, 293], "capabl": 110, "runtim": 110, "biomechan": [113, 115], "musculotendon": 114, "beam": [116, 117, 119], "bend": 117, "problem": [117, 221, 276], "cabl": [118, 119], "continuum": 119, "truss": [119, 120], "pole": 122, "bode": 122, "impuls": 122, "respons": [122, 226], "step": [122, 245], "ramp": 122, "lti": 124, "high": 125, "energi": [125, 156], "hydrogen": 126, "wavefunct": 126, "potenti": [128, 155, 156, 200, 207, 277], "advanc": [128, 200, 225, 297, 298], "choic": 128, "acceler": [128, 200, 209, 233], "interfac": [128, 200, 212, 246], "actuat": 129, "bodi": [130, 136, 156, 280], "framework": [133, 152], "kane": [134, 145, 148, 149, 153, 155], "lagrang": [134, 145, 150, 154, 155], "inertia": [136, 156], "load": [136, 156], "pathwai": 137, "mechanics_print": 138, "mprint": 138, "mpprint": 138, "mlatex": 138, "symbolicsystem": [139, 159], "wrap": 140, "autolev": [141, 158], "dynam": 141, "onlin": 141, "switch": 141, "bicycl": 143, "four": 144, "bar": 144, "linkag": 144, "nonminim": 145, "pendulum": 145, "multi": 146, "degre": 146, "freedom": 146, "roll": [147, 148, 149, 150], "disc": [147, 148, 149, 150], "constraint": 149, "forc": 149, "classic": [151, 219], "jointsmethod": 152, "structur": [153, 154, 196, 239], "background": 155, "directli": [155, 275], "new_method": 155, "kwarg": 155, "a_and_b": 155, "true": 155, "ha": 155, "nan": 155, "zoo": 155, "oo": 155, "further": [155, 294], "mass": [156, 280], "particl": [156, 182], "rigid": 156, "dyadic": [156, 200, 274, 275], "momentum": 156, "angular": [156, 209], "momenta": 156, "kinet": 156, "lagrangian": 156, "user": [158, 239, 242, 243], "rough": 158, "link": 158, "gaussian": [160, 216, 217, 225], "optic": [160, 161], "medium": 162, "wave": 165, "pauli": 166, "quantum": [167, 178, 192], "oscil": [167, 192], "d": [167, 192], "anticommut": 168, "cartesian": 169, "state": [169, 178, 181, 189], "clebsch": 170, "gordan": 170, "coeffici": [170, 219], "circuit": 171, "commut": [172, 213], "dagger": 174, "gate": 175, "grover": 176, "hilbert": 177, "space": [177, 196, 236], "inner": 179, "helper": [181, 226], "box": 182, "qappli": 183, "qft": 184, "qubit": 185, "shor": 187, "spin": 188, "second": 191, "quantiz": 191, "more": [194, 195, 233, 275, 296], "dimension": 194, "analysi": 194, "quantiti": [194, 196, 198, 275], "unit": [195, 196, 197, 199], "philosophi": 196, "behind": 196, "need": 196, "literatur": [196, 220, 225], "prefix": 197, "convers": 198, "referencefram": [200, 210], "dynamicsymbol": 200, "essenti": [201, 203, 270, 273], "field": [202, 207, 216, 219, 221, 225, 277, 279], "kinemat": [205, 209], "kinematic_equ": 205, "scalar": [207, 277, 279], "curl": [207, 277], "diverg": [207, 277, 280], "gradient": [207, 277], "conserv": [207, 277], "solenoid": [207, 277], "veloc": 209, "basi": [210, 219, 221], "wigner": 211, "credit": 211, "copyright": 211, "plotgrid": 212, "pyglet": 212, "mode": 212, "color": 212, "geometr": 212, "ascii": [212, 301], "art": 212, "agca": 213, "ring": [213, 216, 217], "ideal": 213, "homomorph": [213, 221], "syzygi": 213, "extens": [213, 225], "concept": 214, "divis": 214, "factori": 214, "euclidean": 214, "gcd": [214, 219, 225], "lcm": 214, "groebner": [214, 219], "introduc": [215, 216], "domainmatrix": 215, "dup": 216, "polyr": 216, "polynomialr": 216, "choos": 216, "unifi": 216, "gf": 217, "p": [217, 221], "zz": 217, "qq": 217, "mpq": 217, "zz_i": 217, "qq_i": 217, "rr": 217, "cc": 217, "k": 217, "x": 217, "ex": 217, "quotient": 217, "level": 219, "multivari": [219, 225], "univari": [219, 225], "remaind": 219, "subresult": 219, "modular": 219, "undocu": 219, "main": 221, "prime": 221, "decomposit": [221, 222, 225], "adic": 221, "valuat": 221, "subfield": 221, "As": 221, "arithmet": 221, "extra": 222, "monomi": 222, "encod": 222, "formal": [222, 228], "appel": 222, "partial": [222, 225, 244, 245], "fraction": [222, 225, 302], "dispers": 222, "rs_seri": 223, "wester": 225, "articl": 225, "simpl": 225, "support": 225, "back": 225, "cyclotom": 225, "gr\u00f6bner": 225, "mistak": 226, "prettyprint": 226, "rcodeprint": 226, "smt": 226, "lib": 226, "mapl": 226, "javascript": 226, "julia": 226, "octav": 226, "matlab": 226, "rust": 226, "gtk": 226, "lambdaprint": 226, "latexprint": 226, "mathmlprint": 226, "pythoncodeprint": 226, "pythonprint": 226, "srepr": [226, 301], "strprinter": 226, "preview": 226, "codeprint": 226, "preced": 226, "dotprint": 226, "subexpress": 227, "detect": 227, "compound": [232, 234, 246], "recurs": [232, 297], "gruntz": 233, "intuit": 233, "residu": 233, "setkind": 234, "hongguang": 235, "fu": 235, "rule": [235, 276], "notat": 236, "increment": 236, "decrement": 236, "indic": 236, "around": 236, "loos": 236, "end": 236, "confluenc": 236, "extend": 236, "heurist": 242, "riccati": 242, "inform": [242, 243], "pde": [243, 244, 245], "deutil": 244, "recurr": 244, "de": [244, 245], "program": 244, "optim": 244, "wrong": 245, "why": [245, 296], "we": 245, "emploi": 245, "search": 245, "deal": 245, "where": 245, "known": 245, "plan": 245, "transolv": 245, "continu": [246, 302], "stochast": 246, "dim": [247, 248], "contract": 247, "diagon": [247, 298], "explicit": 248, "pytest": 255, "randomis": 256, "detail": [258, 259, 274], "routin": 259, "decor": 260, "enum": 261, "variat": 264, "memoiz": 266, "inspect": 268, "time": 269, "orient": [272, 275], "locat": 275, "coordsys3d": 275, "orient_new": 275, "AND": 275, "quadrilater": 276, "third": 276, "del": [276, 277], "curvilinear": 277, "applic": 280, "calcul": 280, "perimet": 280, "surfac": 280, "area": 280, "volum": 280, "flux": 280, "stoke": 280, "introductori": [290, 295], "quick": [291, 292, 294, 297, 298], "two": 294, "final": 294, "understand": 297, "through": 297, "invari": 297, "walk": 297, "prevent": 297, "shape": 298, "access": 298, "row": 298, "column": 298, "insert": 298, "determin": 298, "rref": 298, "nullspac": 298, "columnspac": 298, "eigenvalu": 298, "eigenvector": 298, "next": 299, "preliminari": 300, "exercis": 300, "str": 301, "mathml": 301, "dot": 301, "cancel": 302, "apart": 302, "trigsimp": 302, "expand_trig": 302, "powsimp": 302, "expand_power_exp": 302, "expand_power_bas": 302, "powdenest": 302, "expand_log": 302, "logcombin": 302, "expand_func": 302, "hyperexpand": 302, "combsimp": 302, "gammasimp": 302}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"Citing SymPy": [[0, "citing-sympy"]], "Debugging": [[1, "debugging"]], "Dependencies": [[2, "dependencies"]], "Hard Dependencies": [[2, "hard-dependencies"]], "Optional Dependencies": [[2, "optional-dependencies"]], "Recommended Optional Dependencies": [[2, "recommended-optional-dependencies"]], "Interactive Use": [[2, "interactive-use"]], "Printing": [[2, "printing"], [23, "printing"], [96, "module-sympy.interactive.printing"], [128, "printing"], [200, "printing"], [226, "printing"], [301, "printing"]], "Parsing": [[2, "parsing"], [110, "module-sympy.parsing"]], "Logic": [[2, "logic"], [98, "module-sympy.logic"], [281, "logic"], [284, "logic"]], "Plotting": [[2, "plotting"], [212, "module-sympy.plotting.plot"]], "lambdify": [[2, "lambdify"], [291, "lambdify"]], "Code Generation": [[2, "code-generation"], [49, "code-generation"], [281, "code-generation"], [283, "code-generation"]], "Autowrap": [[2, "autowrap"], [49, "autowrap"]], "Code Printers": [[2, "code-printers"]], "Testing-Only Dependencies": [[2, "testing-only-dependencies"]], "Statistics": [[2, "statistics"]], "Optional SymEngine Backend": [[2, "optional-symengine-backend"]], "Sage": [[2, "sage"]], "Development Dependencies": [[2, "development-dependencies"]], "Getting the Source Code": [[2, "getting-the-source-code"]], "Running the Tests": [[2, "running-the-tests"]], "Building the Documentation": [[2, "building-the-documentation"], [8, "building-the-documentation"]], "Running the Benchmarks": [[2, "running-the-benchmarks"]], "Deprecation Policy": [[3, "deprecation-policy"]], "What is a deprecation?": [[3, "what-is-a-deprecation"]], "Try to avoid backwards incompatible changes in the first place": [[3, "try-to-avoid-backwards-incompatible-changes-in-the-first-place"]], "When does a change require deprecation?": [[3, "when-does-a-change-require-deprecation"]], "Public API": [[3, null]], "Not Public API": [[3, null]], "The purpose of deprecation": [[3, "the-purpose-of-deprecation"]], "When it is not technically possible to deprecate": [[3, "when-it-is-not-technically-possible-to-deprecate"]], "How long should deprecations last?": [[3, "how-long-should-deprecations-last"]], "How to deprecate code": [[3, "how-to-deprecate-code"]], "Checklist": [[3, "checklist"]], "Adding the deprecation to the code": [[3, "adding-the-deprecation-to-the-code"]], "Documenting a deprecation": [[3, "documenting-a-deprecation"]], "Release notes entry": [[3, "release-notes-entry"]], "SymPy Docstrings Style Guide": [[4, "sympy-docstrings-style-guide"]], "General Guidelines": [[4, "general-guidelines"], [5, "general-guidelines"]], "Formatting": [[4, "formatting"]], "Sections": [[4, "sections"]], "1. Single-Sentence Summary": [[4, "single-sentence-summary"]], "2. Explanation Section": [[4, "explanation-section"]], "3. Examples Section": [[4, "examples-section"]], "4. Parameters Section": [[4, "parameters-section"]], "5. See Also Section": [[4, "see-also-section"]], "6. References Section": [[4, "references-section"]], "Sample Docstring": [[4, "sample-docstring"]], "Docstrings for Classes that are Mathematical Functions": [[4, "docstrings-for-classes-that-are-mathematical-functions"]], "Best Practices for Writing Docstrings": [[4, "best-practices-for-writing-docstrings"]], "Importing Docstrings into the Sphinx Documentation": [[4, "importing-docstrings-into-the-sphinx-documentation"]], "Cross-Referencing": [[4, "cross-referencing"]], "Docstring Style Guide": [[5, "docstring-style-guide"]], "Types of Documentation": [[5, "types-of-documentation"]], "Narrative Documentation Guidelines": [[5, "narrative-documentation-guidelines"]], "Documentation using Markdown": [[5, "documentation-using-markdown"]], "Best Practices for Writing Documentation": [[5, "best-practices-for-writing-documentation"]], "Formatting Preferences": [[5, "formatting-preferences"]], "Math": [[5, "math"]], "LaTeX Recommendations": [[5, "latex-recommendations"]], "Code": [[5, "code"]], "Headings": [[5, "headings"]], "Style Preferences": [[5, "style-preferences"]], "Spelling and Punctuation": [[5, "spelling-and-punctuation"]], "Capitalization": [[5, "capitalization"]], "Tone Preferences": [[5, "tone-preferences"]], "Contributing": [[6, "contributing"], [38, "contributing"]], "Introduction to Contributing": [[7, "introduction-to-contributing"]], "Get familiar using the software": [[7, "get-familiar-using-the-software"]], "Read the paper": [[7, "read-the-paper"]], "Peruse the documentation": [[7, "peruse-the-documentation"]], "Review the Code of Conduct": [[7, "review-the-code-of-conduct"]], "Join our mailing list": [[7, "join-our-mailing-list"]], "Setup your development environment": [[7, "setup-your-development-environment"]], "Identify something to work on": [[7, "identify-something-to-work-on"]], "SymPy Codebase": [[7, "sympy-codebase"]], "Documentation": [[7, "documentation"], [11, "documentation"]], "Review pull requests": [[7, "review-pull-requests"]], "Required dependencies": [[8, "required-dependencies"]], "Docker": [[8, "docker"], [8, "id2"], [8, "id3"]], "Debian/Ubuntu": [[8, "debian-ubuntu"]], "Fedora": [[8, "fedora"]], "Mac": [[8, "mac"]], "Windows 10": [[8, "windows-10"]], "Build the Docs": [[8, "build-the-docs"]], "Local Installation": [[8, "local-installation"], [8, "id4"]], "View the Docs": [[8, "view-the-docs"]], "Auto-Rebuild with the Live Server": [[8, "auto-rebuild-with-the-live-server"]], "PDF Documentation": [[8, "pdf-documentation"]], "Setup Development Environment": [[9, "setup-development-environment"]], "Install Git": [[9, "install-git"]], "Configure Your Name and Email in Git": [[9, "configure-your-name-and-email-in-git"]], "(Optional) Configure Git Settings": [[9, "optional-configure-git-settings"]], "Setup GitHub": [[9, "setup-github"]], "Create a GitHub Account": [[9, "create-a-github-account"]], "Setup SSH Keys": [[9, "setup-ssh-keys"]], "Fork SymPy": [[9, "fork-sympy"]], "Get the SymPy Code": [[9, "get-the-sympy-code"]], "Virtual Environment Setup": [[9, "virtual-environment-setup"]], "Guide for New Contributors": [[10, "guide-for-new-contributors"]], "Index": [[10, "index"]], "Development Workflow Process": [[11, "development-workflow-process"]], "Checklist for Contributions": [[11, "checklist-for-contributions"]], "Pick an issue to fix": [[11, "pick-an-issue-to-fix"]], "Create a new branch": [[11, "create-a-new-branch"]], "Branch names": [[11, "branch-names"]], "Modify code": [[11, "modify-code"]], "Code Quality": [[11, "code-quality"]], "Add Tests": [[11, "add-tests"]], "Run the Tests": [[11, "run-the-tests"]], "Commit the changes": [[11, "commit-the-changes"]], "Deleting junk files": [[11, "deleting-junk-files"]], "Writing commit messages": [[11, "writing-commit-messages"]], "Example of a good commit message": [[11, "example-of-a-good-commit-message"]], "Co-Author": [[11, "co-author"]], "Make a Pull Request": [[11, "make-a-pull-request"]], "Writing pull request title and description": [[11, "writing-pull-request-title-and-description"]], "Add your name and email address to the .mailmap file.": [[11, "add-your-name-and-email-address-to-the-mailmap-file"]], "Writing Tests": [[12, "writing-tests"]], "Testing Policies": [[12, "testing-policies"]], "Basics for Writing Tests": [[12, "basics-for-writing-tests"]], "Running Tests": [[12, "running-tests"]], "Debugging Test Failures on GitHub Actions": [[12, "debugging-test-failures-on-github-actions"]], "Regression Tests": [[12, "regression-tests"]], "Special Types of Tests": [[12, "special-types-of-tests"]], "Testing Exceptions": [[12, "testing-exceptions"]], "Testing Warnings": [[12, "testing-warnings"]], "Test Deprecated Functionality": [[12, "test-deprecated-functionality"]], "Testing that Something is Unchanged": [[12, "testing-that-something-is-unchanged"]], "Testing Expressions with Dummy": [[12, "testing-expressions-with-dummy"]], "Consistency Checks": [[12, "consistency-checks"]], "Random Tests": [[12, "random-tests"]], "Skipping Tests": [[12, "skipping-tests"]], "Marking Tests as Expected to Fail": [[12, "marking-tests-as-expected-to-fail"]], "Marking Tests as Slow": [[12, "marking-tests-as-slow"]], "Writing Tests with External Dependencies": [[12, "writing-tests-with-external-dependencies"]], "Doctests": [[12, "doctests"]], "Updating Existing Tests": [[12, "updating-existing-tests"]], "Code Quality Checks": [[12, "code-quality-checks"]], "Tests Style Guide": [[12, "tests-style-guide"]], "Test Coverage": [[12, "test-coverage"]], "Hypothesis Testing": [[12, "hypothesis-testing"]], "List of active deprecations": [[13, "list-of-active-deprecations"]], "Silencing SymPy Deprecation Warnings": [[13, "silencing-sympy-deprecation-warnings"]], "Version 1.13": [[13, "version-1-13"]], "The string fallback in sympify()": [[13, "the-string-fallback-in-sympify"]], "Deprecate the DMP.rep attribute.": [[13, "deprecate-the-dmp-rep-attribute"]], "Deprecate the pkgdata module": [[13, "deprecate-the-pkgdata-module"]], "Deprecate Eq.rewrite(Add)": [[13, "deprecate-eq-rewrite-add"]], "Deprecate markers, annotations, fill, rectangles of the Plot class": [[13, "deprecate-markers-annotations-fill-rectangles-of-the-plot-class"]], "Moved mechanics functions": [[13, "moved-mechanics-functions"]], "The ModularInteger.to_int() method": [[13, "the-modularinteger-to-int-method"]], "Version 1.12": [[13, "version-1-12"]], "The ManagedProperties metaclass": [[13, "the-managedproperties-metaclass"]], "New Joint coordinate format": [[13, "new-joint-coordinate-format"]], "New Joint intermediate frames": [[13, "new-joint-intermediate-frames"]], "Change in joint attachment point argument": [[13, "change-in-joint-attachment-point-argument"]], "Version 1.11": [[13, "version-1-11"]], "Modules sympy.tensor.array.expressions.conv_* renamed to sympy.tensor.array.expressions.from_*": [[13, "modules-sympy-tensor-array-expressions-conv-renamed-to-sympy-tensor-array-expressions-from"]], "New Mathematica code parser": [[13, "new-mathematica-code-parser"]], "Redundant static methods in carmichael": [[13, "redundant-static-methods-in-carmichael"]], "The check argument to HadamardProduct, MatAdd and MatMul": [[13, "the-check-argument-to-hadamardproduct-matadd-and-matmul"]], "Version 1.10": [[13, "version-1-10"]], "Some traversal functions have been moved": [[13, "some-traversal-functions-have-been-moved"]], "sympy.core.trace": [[13, "sympy-core-trace"]], "The sympy.core.compatibility submodule": [[13, "the-sympy-core-compatibility-submodule"]], "Version 1.9": [[13, "version-1-9"]], "expr_free_symbols": [[13, "expr-free-symbols"]], "sympy.stats.sample(numsamples=n)": [[13, "sympy-stats-sample-numsamples-n"]], "sympy.polys.solvers.RawMatrix": [[13, "sympy-polys-solvers-rawmatrix"]], "Non-Expr objects in a Matrix": [[13, "non-expr-objects-in-a-matrix"]], "The get_segments attribute of plotting objects": [[13, "the-get-segments-attribute-of-plotting-objects"]], "The mdft function in sympy.physics.matrices": [[13, "the-mdft-function-in-sympy-physics-matrices"]], "The private SparseMatrix._smat and DenseMatrix._mat attributes": [[13, "the-private-sparsematrix-smat-and-densematrix-mat-attributes"]], "laplace_transform of a Matrix with noconds=False": [[13, "laplace-transform-of-a-matrix-with-noconds-false"]], "Version 1.8": [[13, "version-1-8"]], "sympy.printing.theanocode": [[13, "sympy-printing-theanocode"]], "sympy.assumptions.handlers.AskHandler and related methods": [[13, "sympy-assumptions-handlers-askhandler-and-related-methods"]], "Version 1.7.1": [[13, "version-1-7-1"]], "Calling sympy.stats.StochasticProcess.distribution with RandomIndexedSymbol": [[13, "calling-sympy-stats-stochasticprocess-distribution-with-randomindexedsymbol"]], "Version 1.7": [[13, "version-1-7"]], "sympy.stats.DiscreteMarkovChain.absorbing_probabilites()": [[13, "sympy-stats-discretemarkovchain-absorbing-probabilites"]], "sympy.utilities.misc.find_executable()": [[13, "sympy-utilities-misc-find-executable"]], "Mutable attributes in sympy.diffgeom": [[13, "mutable-attributes-in-sympy-diffgeom"]], "The unicode argument and attribute to sympy.printing.pretty.stringpict.prettyForm and the sympy.printing.pretty.pretty_symbology.xstr function": [[13, "the-unicode-argument-and-attribute-to-sympy-printing-pretty-stringpict-prettyform-and-the-sympy-printing-pretty-pretty-symbology-xstr-function"]], "Passing the arguments to lambdify as a set": [[13, "passing-the-arguments-to-lambdify-as-a-set"]], "Core operators no longer accept non-Expr args": [[13, "core-operators-no-longer-accept-non-expr-args"]], "Version 1.6": [[13, "version-1-6"]], "Various sympy.utilities submodules have moved": [[13, "various-sympy-utilities-submodules-have-moved"]], "sympy.testing.randtest": [[13, "sympy-testing-randtest"]], "Mixing Poly and non-polynomial expressions in binary operations": [[13, "mixing-poly-and-non-polynomial-expressions-in-binary-operations"]], "The print_cyclic flag of sympy.combinatorics.Permutation": [[13, "the-print-cyclic-flag-of-sympy-combinatorics-permutation"]], "Using integrate with Poly": [[13, "using-integrate-with-poly"]], "Creating an indefinite Integral with an Eq argument": [[13, "creating-an-indefinite-integral-with-an-eq-argument"]], "Version 1.5": [[13, "version-1-5"]], "Tensor.fun_eval and Tensor.__call__": [[13, "tensor-fun-eval-and-tensor-call"]], "TensorType": [[13, "tensortype"]], "The dummy_fmt argument to TensorIndexType": [[13, "the-dummy-fmt-argument-to-tensorindextype"]], "The metric argument to TensorIndexType": [[13, "the-metric-argument-to-tensorindextype"]], "The get_kronecker_delta() and get_epsilon() methods of TensorIndexType": [[13, "the-get-kronecker-delta-and-get-epsilon-methods-of-tensorindextype"]], "The tensorsymmetry() function": [[13, "the-tensorsymmetry-function"]], "The tensorhead() function": [[13, "the-tensorhead-function"]], "The is_EmptySet attribute of sets": [[13, "the-is-emptyset-attribute-of-sets"]], "ProductSet(iterable)": [[13, "productset-iterable"]], "The set_potential_energy method in sympy.physics.mechanics": [[13, "the-set-potential-energy-method-in-sympy-physics-mechanics"]], "Using a set for the condition in ConditionSet": [[13, "using-a-set-for-the-condition-in-conditionset"]], "The max_degree and get_upper_degree properties of sympy.polys.multivariate_resultants.DixonResultant": [[13, "the-max-degree-and-get-upper-degree-properties-of-sympy-polys-multivariate-resultants-dixonresultant"]], "Non-tuple iterable for the first argument to Lambda": [[13, "non-tuple-iterable-for-the-first-argument-to-lambda"]], "The evaluate flag to differentiate_finite": [[13, "the-evaluate-flag-to-differentiate-finite"]], "Version 1.4": [[13, "version-1-4"]], "TensorIndexType.data and related methods": [[13, "tensorindextype-data-and-related-methods"]], "Glossary": [[14, "glossary"]], "Gotchas and Pitfalls": [[15, "gotchas-and-pitfalls"]], "Introduction": [[15, "introduction"], [19, "introduction"], [41, "introduction"], [48, "introduction"], [49, "introduction"], [50, "introduction"], [58, "introduction"], [70, "introduction"], [80, "introduction"], [98, "introduction"], [115, "introduction"], [141, "introduction"], [158, "introduction"], [196, "introduction"], [207, "introduction"], [212, "introduction"], [213, "introduction"], [214, "introduction"], [221, "introduction"], [225, "introduction"], [279, "introduction"], [296, "introduction"]], "Equals Signs (=)": [[15, "equals-signs"]], "Single Equals Sign": [[15, "single-equals-sign"]], "Double Equals Signs": [[15, "double-equals-signs"]], "Variables": [[15, "variables"]], "Variables Assignment does not Create a Relation Between Expressions": [[15, "variables-assignment-does-not-create-a-relation-between-expressions"]], "Symbols": [[15, "symbols"], [294, "symbols"]], "Functions": [[15, "functions"], [75, "functions"], [247, "functions"]], "Symbolic Expressions": [[15, "symbolic-expressions"]], "Python numbers vs. SymPy Numbers": [[15, "python-numbers-vs-sympy-numbers"]], "Evaluating Expressions with Floats and Rationals": [[15, "evaluating-expressions-with-floats-and-rationals"]], "Immutability of Expressions": [[15, "immutability-of-expressions"]], "Mathematical Operators": [[15, "mathematical-operators"]], "Inverse Trig Functions": [[15, "inverse-trig-functions"]], "Sqrt is not a Function": [[15, "sqrt-is-not-a-function"]], "Special Symbols": [[15, "special-symbols"]], "Lists": [[15, "lists"]], "Dictionaries": [[15, "dictionaries"]], "Tuples": [[15, "tuples"]], "Keyword Arguments": [[15, "keyword-arguments"]], "Getting help from within SymPy": [[15, "getting-help-from-within-sympy"]], "help()": [[15, "help"]], "Explanations": [[16, "explanations"], [38, "explanations"]], "Solve Output by Type": [[17, "solve-output-by-type"]], "Empty List": [[17, "empty-list"]], "List Of Values": [[17, "list-of-values"]], "Single Dictionary": [[17, "single-dictionary"]], "List of Tuples": [[17, "list-of-tuples"]], "List of Dictionaries": [[17, "list-of-dictionaries"]], "Boolean or Relational": [[17, "boolean-or-relational"]], "Classification of SymPy objects": [[18, "classification-of-sympy-objects"]], "class": [[18, "class"]], "kind": [[18, "kind"], [68, "module-sympy.core.kind"]], "sets and assumptions": [[18, "sets-and-assumptions"]], "func": [[18, "func"], [297, "func"]], "Finite Difference Approximations to Derivatives": [[19, "finite-difference-approximations-to-derivatives"]], "A Direct Method Using SymPy Matrices": [[19, "a-direct-method-using-sympy-matrices"]], "SymPy Special Topics": [[20, "sympy-special-topics"]], "Assumptions": [[21, "assumptions"], [23, "assumptions"], [44, "module-sympy.assumptions"]], "The (old) assumptions system": [[21, "the-old-assumptions-system"]], "Gotcha: symbols with different assumptions": [[21, "gotcha-symbols-with-different-assumptions"]], "Applying assumptions to string inputs": [[21, "applying-assumptions-to-string-inputs"]], "Predicates": [[21, "predicates"], [45, "module-sympy.assumptions.predicates"]], "Assumptions predicates for the (old) assumptions": [[21, "id28"]], "References for the above definitions": [[21, "references-for-the-above-definitions"]], "Implications": [[21, "implications"]], "Interpretation of the predicates": [[21, "interpretation-of-the-predicates"]], "Other is_* properties": [[21, "other-is-properties"]], "Implementing assumptions handlers": [[21, "implementing-assumptions-handlers"]], "Mechanism of the assumptions system": [[21, "mechanism-of-the-assumptions-system"]], "Limitations": [[21, "limitations"], [31, "limitations"], [92, "limitations"]], "Combining predicates with or": [[21, "combining-predicates-with-or"]], "Relations between different symbols": [[21, "relations-between-different-symbols"]], "Symbolic and fuzzy booleans": [[22, "symbolic-and-fuzzy-booleans"]], "Symbolic Boolean vs three valued bool": [[22, "symbolic-boolean-vs-three-valued-bool"]], "Three-valued logic with fuzzy bools": [[22, "three-valued-logic-with-fuzzy-bools"]], "Three-valued logic with symbolic Booleans": [[22, "three-valued-logic-with-symbolic-booleans"]], "Writing Custom Functions": [[23, "writing-custom-functions"]], "Easy Cases: Fully Symbolic or Fully Evaluated": [[23, "easy-cases-fully-symbolic-or-fully-evaluated"]], "The Fully Symbolic Case": [[23, "the-fully-symbolic-case"]], "The Fully Evaluated Case": [[23, "the-fully-evaluated-case"]], "Creating a Custom Function": [[23, "creating-a-custom-function"]], "Defining Automatic Evaluation with eval()": [[23, "defining-automatic-evaluation-with-eval"]], "Reminder": [[23, null]], "Best Practices for eval()": [[23, "best-practices-for-eval"]], "Key Point": [[23, null]], "Note": [[23, null]], "Numerical Evaluation with evalf()": [[23, "numerical-evaluation-with-evalf"]], "Rewriting and Simplification": [[23, "rewriting-and-simplification"]], "rewrite()": [[23, "rewrite"]], "doit()": [[23, "doit"]], "expand()": [[23, "expand"]], "Differentiation": [[23, "differentiation"]], "Other Methods": [[23, "other-methods"], [39, "other-methods"]], "inverse()": [[23, "inverse"]], "as_real_imag()": [[23, "as-real-imag"]], "Miscellaneous _eval_* methods": [[23, "miscellaneous-eval-methods"]], "Complete Examples": [[23, "complete-examples"]], "Versine": [[23, "versine"]], "Definition": [[23, "definition"], [23, "id2"], [23, "id4"], [86, "definition"]], "Examples": [[23, "examples"], [23, "id3"], [23, "id5"], [30, "examples"], [40, "examples"], [68, "examples"], [68, "id52"], [92, "examples"], [95, "examples"], [95, "id38"], [108, "examples"], [108, "id78"], [117, "examples"], [125, "examples"], [163, "examples"], [195, "examples"], [210, "examples"], [210, "id1"], [225, "examples"], [233, "examples"], [233, "id3"], [246, "examples"], [247, "examples"], [248, "examples"], [251, "examples"]], "divides": [[23, "divides"]], "Fused Multiply-Add (FMA)": [[23, "fused-multiply-add-fma"]], "Additional Tips": [[23, "additional-tips"]], "How-to Guides": [[24, "how-to-guides"], [38, "how-to-guides"]], "SymPy Logo": [[25, "sympy-logo"]], "Control Package Examples": [[26, "control-package-examples"]], "Example 1": [[26, "example-1"], [117, "example-1"]], "Example 2": [[26, "example-2"], [117, "example-2"]], "Example 3": [[26, "example-3"], [117, "example-3"]], "Example 4": [[26, "example-4"], [117, "example-4"]], "Example 5": [[26, "example-5"], [117, "example-5"]], "References": [[26, "references"], [51, "references"], [68, "references"], [80, "references"], [86, "references"], [95, "references"], [163, "references"], [166, "references"], [211, "references"], [235, "references"], [236, "references"], [239, "references"], [245, "references"]], "Physics": [[27, "physics"], [281, "physics"], [287, "module-sympy.physics"]], "Find the Roots of a Polynomial Algebraically or Numerically": [[28, "find-the-roots-of-a-polynomial-algebraically-or-numerically"]], "Alternatives to Consider": [[28, "alternatives-to-consider"], [30, "alternatives-to-consider"], [31, "alternatives-to-consider"], [33, "alternatives-to-consider"], [34, "alternatives-to-consider"], [35, "alternatives-to-consider"], [36, "alternatives-to-consider"]], "Example of Finding the Roots of a Polynomial Algebraically": [[28, "example-of-finding-the-roots-of-a-polynomial-algebraically"]], "Functions to Find the Roots of a Polynomial": [[28, "functions-to-find-the-roots-of-a-polynomial"]], "Guidance": [[28, "guidance"], [30, "guidance"], [31, "guidance"], [32, "guidance"], [33, "guidance"], [34, "guidance"], [35, "guidance"], [36, "guidance"]], "Find the Roots of a Polynomial": [[28, "find-the-roots-of-a-polynomial"]], "Algebraic Solution Without Root Multiplicities": [[28, "algebraic-solution-without-root-multiplicities"]], "Algebraic Solution With Root Multiplicities": [[28, "algebraic-solution-with-root-multiplicities"]], "roots": [[28, "roots"]], "Factor the Equation": [[28, "factor-the-equation"]], "Exact Numeric Solution With Root Multiplicities": [[28, "exact-numeric-solution-with-root-multiplicities"]], "real_roots": [[28, "real-roots"]], "Approximate Numeric Solution With Root Multiplicities": [[28, "approximate-numeric-solution-with-root-multiplicities"]], "nroots": [[28, "nroots"]], "Complex Roots": [[28, "complex-roots"]], "Use the Solution Result": [[28, "use-the-solution-result"], [31, "use-the-solution-result"], [32, "use-the-solution-result"], [33, "use-the-solution-result"], [34, "use-the-solution-result"], [35, "use-the-solution-result"]], "List (all_roots, real_roots, nroots)": [[28, "list-all-roots-real-roots-nroots"]], "List of dictionaries (solve)": [[28, "list-of-dictionaries-solve"]], "Dictionary (roots)": [[28, "dictionary-roots"]], "Expression (factor)": [[28, "expression-factor"]], "Tradeoffs": [[28, "tradeoffs"]], "Mathematical Exactness, Completeness of List of Roots, and Speed": [[28, "mathematical-exactness-completeness-of-list-of-roots-and-speed"]], "Get All Roots, Perhaps Implicitly": [[28, "get-all-roots-perhaps-implicitly"]], "Numerically Evaluate CRootOf Roots": [[28, "numerically-evaluate-crootof-roots"]], "Representing Roots": [[28, "representing-roots"]], "Not All Equations Can Be Solved": [[28, "not-all-equations-can-be-solved"], [31, "not-all-equations-can-be-solved"], [32, "not-all-equations-can-be-solved"], [35, "not-all-equations-can-be-solved"]], "Equations With No Closed-Form Solution": [[28, "equations-with-no-closed-form-solution"], [32, "equations-with-no-closed-form-solution"], [35, "equations-with-no-closed-form-solution"]], "Report a Bug": [[28, "report-a-bug"], [30, "report-a-bug"], [31, "report-a-bug"], [32, "report-a-bug"], [33, "report-a-bug"], [34, "report-a-bug"], [35, "report-a-bug"], [36, "report-a-bug"], [37, "report-a-bug"]], "Solve Equations": [[29, "solve-equations"]], "Reduce One or a System of Inequalities for a Single Variable Algebraically": [[30, "reduce-one-or-a-system-of-inequalities-for-a-single-variable-algebraically"]], "Reducing a System of Inequalities for a Single Variable Algebraically": [[30, "reducing-a-system-of-inequalities-for-a-single-variable-algebraically"]], "Reducing One Inequality for a Single Variable Algebraically": [[30, "reducing-one-inequality-for-a-single-variable-algebraically"]], "Include the Variable to Be Reduced for in the Function Call": [[30, "include-the-variable-to-be-reduced-for-in-the-function-call"]], "Reduce a System of Inequalities Algebraically": [[30, "reduce-a-system-of-inequalities-algebraically"]], "Use the Result": [[30, "use-the-result"]], "Extract a List of Decomposed Relations": [[30, "extract-a-list-of-decomposed-relations"]], "Extract a Tuple of Relations": [[30, "extract-a-tuple-of-relations"]], "Limitations of Inequality Reduction Using SymPy": [[30, "limitations-of-inequality-reduction-using-sympy"]], "SymPy Can Reduce for Only One Symbol of Interest Per Inequality": [[30, "sympy-can-reduce-for-only-one-symbol-of-interest-per-inequality"]], "Limitations on Types of Inequalities That SymPy Can Solve": [[30, "limitations-on-types-of-inequalities-that-sympy-can-solve"]], "Not All Results Are Returned for Periodic Functions": [[30, "not-all-results-are-returned-for-periodic-functions"]], "Not All Systems of Inequalities Can Be Reduced": [[30, "not-all-systems-of-inequalities-can-be-reduced"]], "Systems of Inequalities Which Cannot Be Satisfied": [[30, "systems-of-inequalities-which-cannot-be-satisfied"]], "Systems of Inequalities That Cannot Be Reduced Analytically": [[30, "systems-of-inequalities-that-cannot-be-reduced-analytically"]], "Inequalities Which Can Be Reduced Analytically, and SymPy Cannot Reduce": [[30, "inequalities-which-can-be-reduced-analytically-and-sympy-cannot-reduce"]], "Solve a Diophantine Equation Algebraically": [[31, "solve-a-diophantine-equation-algebraically"]], "Example of Solving a Diophantine Equation": [[31, "example-of-solving-a-diophantine-equation"]], "Diophantine Equation Can be Expressed as Expression That Equals Zero": [[31, "diophantine-equation-can-be-expressed-as-expression-that-equals-zero"]], "Specify the Order of Symbols in the Result": [[31, "specify-the-order-of-symbols-in-the-result"]], "Extract Expressions From the Result": [[31, "extract-expressions-from-the-result"]], "Work With Parameters": [[31, "work-with-parameters"]], "Verify a Solution": [[31, "verify-a-solution"]], "Programmatically Extract Parameter Symbols": [[31, "programmatically-extract-parameter-symbols"]], "Equations With No Solution": [[31, "equations-with-no-solution"], [33, "equations-with-no-solution"], [35, "equations-with-no-solution"]], "Solve an Equation Algebraically": [[32, "solve-an-equation-algebraically"], [32, "id1"]], "Alternatives to consider": [[32, "alternatives-to-consider"]], "Solving Functions": [[32, "solving-functions"]], "Make Your Equation Into an Expression That Equals Zero": [[32, "make-your-equation-into-an-expression-that-equals-zero"]], "Put Your Equation Into Eq Form": [[32, "put-your-equation-into-eq-form"]], "Restrict the Domain of Solutions": [[32, "restrict-the-domain-of-solutions"]], "Explicitly Represent Infinite Sets of Possible Solutions": [[32, "explicitly-represent-infinite-sets-of-possible-solutions"]], "Substitute Solutions From solve() Into an Expression": [[32, "substitute-solutions-from-solve-into-an-expression"]], "solveset() Solution Sets Cannot Necessarily Be Interrogated Programmatically": [[32, "solveset-solution-sets-cannot-necessarily-be-interrogated-programmatically"]], "Options That Can Speed up solve()": [[32, "options-that-can-speed-up-solve"], [36, "options-that-can-speed-up-solve"], [37, "options-that-can-speed-up-solve"]], "Equations Which Have a Closed-Form Solution, and SymPy Cannot Solve": [[32, "equations-which-have-a-closed-form-solution-and-sympy-cannot-solve"], [36, "equations-which-have-a-closed-form-solution-and-sympy-cannot-solve"]], "Solve a Matrix Equation Algebraically": [[33, "solve-a-matrix-equation-algebraically"]], "Solve a Matrix Equation": [[33, "solve-a-matrix-equation"]], "Matrix Usually Must Be Square": [[33, "matrix-usually-must-be-square"]], "Methods for Solving Matrix Equations": [[33, "methods-for-solving-matrix-equations"]], "Solving Several Matrix Equations With the Same Matrix": [[33, "solving-several-matrix-equations-with-the-same-matrix"]], "Work With Symbolic Matrices": [[33, "work-with-symbolic-matrices"]], "Speed up Solving Matrix Equations": [[33, "speed-up-solving-matrix-equations"]], "Use the Solution as a Vector": [[33, "use-the-solution-as-a-vector"]], "Extract Elements From the Solution": [[33, "extract-elements-from-the-solution"]], "Solve One or a System of Equations Numerically": [[34, "solve-one-or-a-system-of-equations-numerically"]], "Example of Numerically Solving an Equation": [[34, "example-of-numerically-solving-an-equation"]], "Find Complex Roots of a Real Function": [[34, "find-complex-roots-of-a-real-function"]], "Ensure the Root Found is in a Given Interval": [[34, "ensure-the-root-found-is-in-a-given-interval"]], "Solve a System of Equations Numerically": [[34, "solve-a-system-of-equations-numerically"]], "Increase Precision of the Solution": [[34, "increase-precision-of-the-solution"]], "Create a Function That Can Be Solved With SciPy": [[34, "create-a-function-that-can-be-solved-with-scipy"]], "Substitute the Result Into an Expression": [[34, "substitute-the-result-into-an-expression"]], "Not all Equations Can be Solved": [[34, "not-all-equations-can-be-solved"]], "Equations With no Solution": [[34, "equations-with-no-solution"]], "Solve an Ordinary Differential Equation (ODE) Algebraically": [[35, "solve-an-ordinary-differential-equation-ode-algebraically"]], "Solve an Ordinary Differential Equation (ODE)": [[35, "solve-an-ordinary-differential-equation-ode"]], "Defining Derivatives": [[35, "defining-derivatives"]], "Options to Define an ODE": [[35, "options-to-define-an-ode"]], "Option 1: Define a Function Without Including Its Independent Variable": [[35, "option-1-define-a-function-without-including-its-independent-variable"]], "Specify Initial Conditions or Boundary Conditions": [[35, "specify-initial-conditions-or-boundary-conditions"], [35, "id1"]], "Option 2: Define a Function of an Independent Variable": [[35, "option-2-define-a-function-of-an-independent-variable"]], "Beware Copying and Pasting Results": [[35, "beware-copying-and-pasting-results"]], "Extract the Result for One Solution and Function": [[35, "extract-the-result-for-one-solution-and-function"]], "Some ODEs Cannot Be Solved Explicitly, Only Implicitly": [[35, "some-odes-cannot-be-solved-explicitly-only-implicitly"]], "Extract the Result for Multiple Function-Solution Pairs": [[35, "extract-the-result-for-multiple-function-solution-pairs"]], "If There is One Solution Set": [[35, "if-there-is-one-solution-set"]], "If There are Multiple Solution Sets": [[35, "if-there-are-multiple-solution-sets"]], "Work With Arbitrary Constants": [[35, "work-with-arbitrary-constants"]], "Numerically Solve an ODE in SciPy": [[35, "numerically-solve-an-ode-in-scipy"]], "Ordinary Differential Equation Solving Hints": [[35, "ordinary-differential-equation-solving-hints"]], "Return Unevaluated Integrals": [[35, "return-unevaluated-integrals"]], "Select a Specific Solver": [[35, "select-a-specific-solver"]], "Solve a System of Equations Algebraically": [[36, "solve-a-system-of-equations-algebraically"]], "Examples of Solving a System of Equations Algebraically": [[36, "examples-of-solving-a-system-of-equations-algebraically"]], "Solve a System of Linear Equations Algebraically": [[36, "solve-a-system-of-linear-equations-algebraically"]], "Solve a System of Nonlinear Equations Algebraically": [[36, "solve-a-system-of-nonlinear-equations-algebraically"]], "Solve and Use Results in a Dictionary": [[36, "solve-and-use-results-in-a-dictionary"]], "Solve Into a Solution Given as a Dictionary": [[36, "solve-into-a-solution-given-as-a-dictionary"]], "Use a Solution Given as a Dictionary": [[36, "use-a-solution-given-as-a-dictionary"]], "Solve Results in a Set": [[36, "solve-results-in-a-set"]], "Not All Systems of Equations Can be Solved": [[36, "not-all-systems-of-equations-can-be-solved"]], "Systems of Equations With no Solution": [[36, "systems-of-equations-with-no-solution"]], "Systems of Equations With no Closed-Form Solution": [[36, "systems-of-equations-with-no-closed-form-solution"]], "Solving Guidance": [[37, "solving-guidance"]], "Numeric Solutions": [[37, "numeric-solutions"]], "Equations With no Closed-Form Solution": [[37, "equations-with-no-closed-form-solution"]], "When You Might Prefer a Numeric Solution": [[37, "when-you-might-prefer-a-numeric-solution"]], "Use Exact Values": [[37, "use-exact-values"]], "Include the Variable to be Solved for in the Function Call": [[37, "include-the-variable-to-be-solved-for-in-the-function-call"]], "Ensure Consistent Formatting From solve()": [[37, "ensure-consistent-formatting-from-solve"]], "Include Solutions Making Any Denominator Zero": [[37, "include-solutions-making-any-denominator-zero"]], "Do Not Simplify Solutions": [[37, "do-not-simplify-solutions"]], "Parse a String Representing the Equation": [[37, "parse-a-string-representing-the-equation"]], "Welcome to SymPy\u2019s documentation!": [[38, "welcome-to-sympy-s-documentation"]], "Installation": [[38, "installation"], [39, "installation"], [300, "installation"]], "Tutorials": [[38, "tutorials"], [290, "tutorials"]], "API Reference": [[38, "api-reference"], [258, "module-sympy.utilities.autowrap"], [259, "module-sympy.utilities.codegen"], [281, "api-reference"]], "Anaconda": [[39, "anaconda"]], "Git": [[39, "git"]], "Run SymPy": [[39, "run-sympy"]], "mpmath": [[39, "mpmath"]], "Questions": [[39, "questions"]], "abc": [[40, "module-sympy.abc"]], "Caveats": [[40, "caveats"]], "Algebras": [[41, "algebras"]], "Quaternion Reference": [[41, "module-sympy.algebras"]], "Ask": [[42, "module-sympy.assumptions.ask"]], "Assume": [[43, "module-sympy.assumptions.assume"]], "Predicate": [[44, "predicate"]], "Querying": [[44, "querying"]], "Contents": [[44, "contents"], [55, "contents"], [75, "contents"], [88, "contents"], [94, "contents"], [218, "contents"], [230, "contents"], [240, "contents"], [249, "contents"]], "Performance improvements": [[44, "performance-improvements"]], "Misc": [[44, "misc"]], "Common": [[45, "common"]], "Calculus": [[45, "calculus"], [47, "module-sympy.calculus"], [292, "calculus"]], "Matrix": [[45, "matrix"]], "Number Theory": [[45, "number-theory"], [108, "module-sympy.ntheory.generate"], [281, "number-theory"], [286, "number-theory"]], "Order": [[45, "order"]], "Sets": [[45, "sets"], [234, "sets"]], "Refine": [[46, "module-sympy.assumptions.refine"]], "Singularities": [[47, "singularities"]], "Finite difference weights": [[47, "finite-difference-weights"]], "Category Theory": [[48, "category-theory"]], "Base Class Reference": [[48, "module-sympy.categories"], [70, "base-class-reference"]], "Diagram Drawing": [[48, "module-sympy.categories.diagram_drawing"]], "Code printers (sympy.printing)": [[49, "code-printers-sympy-printing"]], "Codegen (sympy.utilities.codegen)": [[49, "codegen-sympy-utilities-codegen"]], "Classes and functions for rewriting expressions (sympy.codegen.rewriting)": [[49, "module-sympy.codegen.rewriting"]], "Tools for simplifying expressions using approximations (sympy.codegen.approximations)": [[49, "module-sympy.codegen.approximations"]], "Classes for abstract syntax trees (sympy.codegen.ast)": [[49, "module-sympy.codegen.ast"]], "AST Type Tree": [[49, "ast-type-tree"]], "Predefined types": [[49, "predefined-types"]], "Using the nodes": [[49, "using-the-nodes"]], "Special C math functions (sympy.codegen.cfunctions)": [[49, "module-sympy.codegen.cfunctions"]], "C specific AST nodes (sympy.codegen.cnodes)": [[49, "module-sympy.codegen.cnodes"]], "C++ specific AST nodes (sympy.codegen.cxxnodes)": [[49, "module-sympy.codegen.cxxnodes"]], "Fortran specific AST nodes (sympy.codegen.fnodes)": [[49, "module-sympy.codegen.fnodes"]], "Algorithms (sympy.codegen.algorithms)": [[49, "module-sympy.codegen.algorithms"]], "Python utilities (sympy.codegen.pyutils)": [[49, "module-sympy.codegen.pyutils"]], "C utilities (sympy.codegen.cutils)": [[49, "module-sympy.codegen.cutils"]], "Fortran utilities (sympy.codegen.futils)": [[49, "module-sympy.codegen.futils"]], "Finitely Presented Groups": [[50, "finitely-presented-groups"]], "Overview of Facilities": [[50, "overview-of-facilities"]], "The Construction of Finitely Presented Groups": [[50, "the-construction-of-finitely-presented-groups"]], "Free Groups and Words": [[50, "free-groups-and-words"]], "Construction of a Free Group": [[50, "construction-of-a-free-group"]], "Construction of words": [[50, "construction-of-words"]], "Coset Enumeration: The Todd-Coxeter Algorithm": [[50, "coset-enumeration-the-todd-coxeter-algorithm"]], "CosetTable": [[50, "cosettable"]], "Attributes of CosetTable": [[50, "attributes-of-cosettable"]], "Compression and Standardization": [[50, "compression-and-standardization"]], "Subgroups of Finite Index": [[50, "subgroups-of-finite-index"]], "Low Index Subgroups": [[50, "low-index-subgroups"]], "Constructing a presentation for a subgroup": [[50, "constructing-a-presentation-for-a-subgroup"]], "Reidemeister Schreier algorithm": [[50, "reidemeister-schreier-algorithm"]], "Bibliography": [[50, "bibliography"], [58, "bibliography"]], "Galois Groups": [[51, "module-sympy.combinatorics.galois"], [221, "galois-groups"]], "Gray Code": [[52, "module-sympy.combinatorics.graycode"]], "Group constructors": [[53, "module-sympy.combinatorics.group_constructs"]], "Nilpotent, Abelian and Cyclic Numbers": [[54, "module-sympy.combinatorics.group_numbers"]], "Combinatorics": [[55, "combinatorics"]], "Named Groups": [[56, "module-sympy.combinatorics.named_groups"]], "Partitions": [[57, "module-sympy.combinatorics.partitions"]], "Polycyclic Groups": [[58, "polycyclic-groups"]], "Overview of functionalities": [[58, "overview-of-functionalities"]], "The Construction of Polycyclic Groups": [[58, "the-construction-of-polycyclic-groups"]], "Attributes of PolycyclicGroup": [[58, "attributes-of-polycyclicgroup"]], "The Construction of Collector": [[58, "the-construction-of-collector"]], "Attributes of Collector": [[58, "attributes-of-collector"]], "Computation of Minimal Uncollected Subword": [[58, "computation-of-minimal-uncollected-subword"]], "Computation of Subword Index": [[58, "computation-of-subword-index"]], "Computation of Collected Word": [[58, "computation-of-collected-word"]], "Computation of Polycyclic Presentation": [[58, "computation-of-polycyclic-presentation"]], "Computation of Exponent Vector": [[58, "computation-of-exponent-vector"]], "Depth of Polycyclic generator": [[58, "depth-of-polycyclic-generator"]], "Computation of Leading Exponent": [[58, "computation-of-leading-exponent"]], "Permutation Groups": [[59, "module-sympy.combinatorics.perm_groups"]], "Permutations": [[60, "module-sympy.combinatorics.permutations"]], "Generators": [[60, "module-sympy.combinatorics.generators"]], "Polyhedron": [[61, "module-sympy.combinatorics.polyhedron"]], "Prufer Sequences": [[62, "module-sympy.combinatorics.prufer"]], "Subsets": [[63, "module-sympy.combinatorics.subsets"]], "Tensor Canonicalization": [[64, "module-sympy.combinatorics.tensor_can"]], "Test Utilities": [[65, "module-sympy.combinatorics.testutil"]], "Utilities": [[66, "module-sympy.combinatorics.util"], [164, "module-sympy.physics.optics.utils"], [221, "utilities"], [263, "module-sympy.utilities"], [281, "utilities"], [289, "utilities"]], "Concrete": [[67, "concrete"]], "Hypergeometric terms": [[67, "hypergeometric-terms"]], "Concrete Class Reference": [[67, "concrete-class-reference"]], "Concrete Functions Reference": [[67, "concrete-functions-reference"]], "Core": [[68, "core"]], "sympify": [[68, "module-sympy.core.sympify"]], "assumptions": [[68, "module-sympy.core.assumptions"]], "See Also": [[68, "see-also"], [264, "see-also"]], "Notes": [[68, "notes"], [233, "notes"], [235, "notes"]], "Developers Notes": [[68, "developers-notes"]], "cache": [[68, "module-sympy.core.cache"]], "basic": [[68, "module-sympy.core.basic"]], "singleton": [[68, "module-sympy.core.singleton"]], "expr": [[68, "module-sympy.core.expr"]], "symbol": [[68, "module-sympy.core.symbol"]], "intfunc": [[68, "module-sympy.core.intfunc"]], "numbers": [[68, "module-sympy.core.numbers"]], "power": [[68, "module-sympy.core.power"]], "mul": [[68, "module-sympy.core.mul"]], "add": [[68, "module-sympy.core.add"]], "mod": [[68, "module-sympy.core.mod"]], "relational": [[68, "module-sympy.core.relational"]], "multidimensional": [[68, "module-sympy.core.multidimensional"]], "function": [[68, "module-sympy.core.function"]], "evalf": [[68, "module-sympy.core.evalf"], [291, "evalf"]], "containers": [[68, "module-sympy.core.containers"]], "exprtools": [[68, "module-sympy.core.exprtools"]], "Sorting": [[68, "sorting"]], "Random": [[68, "module-sympy.core.random"]], "Traversal": [[68, "module-sympy.core.traversal"]], "Cryptography": [[69, "cryptography"]], "Differential Geometry": [[70, "module-sympy.diffgeom"]], "Discrete": [[71, "discrete"]], "Transforms": [[71, "module-sympy.discrete.transforms"]], "Fast Fourier Transform": [[71, "fast-fourier-transform"]], "Number Theoretic Transform": [[71, "number-theoretic-transform"]], "Fast Walsh Hadamard Transform": [[71, "fast-walsh-hadamard-transform"]], "M\u00f6bius Transform": [[71, "mobius-transform"]], "Convolutions": [[71, "module-sympy.discrete.convolutions"]], "Convolution": [[71, "convolution"]], "Convolution using Fast Fourier Transform": [[71, "convolution-using-fast-fourier-transform"]], "Convolution using Number Theoretic Transform": [[71, "convolution-using-number-theoretic-transform"]], "Convolution using Fast Walsh Hadamard Transform": [[71, "convolution-using-fast-walsh-hadamard-transform"]], "Subset Convolution": [[71, "subset-convolution"]], "Covering Product": [[71, "covering-product"]], "Intersecting Product": [[71, "intersecting-product"]], "Numerical Evaluation": [[72, "numerical-evaluation"]], "Basics": [[72, "basics"], [281, "basics"], [282, "basics"]], "Floating-point numbers": [[72, "floating-point-numbers"]], "Accuracy and error handling": [[72, "accuracy-and-error-handling"]], "Sums and integrals": [[72, "sums-and-integrals"]], "Numerical simplification": [[72, "numerical-simplification"]], "Combinatorial": [[73, "combinatorial"]], "Enumeration": [[73, "enumeration"]], "Elementary": [[74, "elementary"]], "Complex Functions": [[74, "complex-functions"]], "Trigonometric": [[74, "trigonometric"]], "Trigonometric Functions": [[74, "trigonometric-functions"]], "Trigonometric Inverses": [[74, "trigonometric-inverses"]], "Hyperbolic": [[74, "hyperbolic"]], "Hyperbolic Functions": [[74, "hyperbolic-functions"]], "Hyperbolic Inverses": [[74, "hyperbolic-inverses"]], "Integer Functions": [[74, "integer-functions"]], "Exponential": [[74, "exponential"]], "Piecewise": [[74, "piecewise"]], "Miscellaneous": [[74, "miscellaneous"], [267, "module-sympy.utilities.misc"]], "Special": [[76, "special"]], "Dirac Delta and Related Discontinuous Functions": [[76, "dirac-delta-and-related-discontinuous-functions"]], "Gamma, Beta and Related Functions": [[76, "module-sympy.functions.special.gamma_functions"]], "Error Functions and Fresnel Integrals": [[76, "module-sympy.functions.special.error_functions"]], "Exponential, Logarithmic and Trigonometric Integrals": [[76, "exponential-logarithmic-and-trigonometric-integrals"]], "Bessel Type Functions": [[76, "module-sympy.functions.special.bessel"]], "Airy Functions": [[76, "airy-functions"]], "B-Splines": [[76, "b-splines"]], "Riemann Zeta and Related Functions": [[76, "module-sympy.functions.special.zeta_functions"]], "Hypergeometric Functions": [[76, "hypergeometric-functions"]], "Elliptic integrals": [[76, "module-sympy.functions.special.elliptic_integrals"]], "Mathieu Functions": [[76, "module-sympy.functions.special.mathieu_functions"]], "Orthogonal Polynomials": [[76, "module-sympy.functions.special.polynomials"]], "Jacobi Polynomials": [[76, "jacobi-polynomials"]], "Gegenbauer Polynomials": [[76, "gegenbauer-polynomials"]], "Chebyshev Polynomials": [[76, "chebyshev-polynomials"]], "Legendre Polynomials": [[76, "legendre-polynomials"]], "Hermite Polynomials": [[76, "hermite-polynomials"]], "Laguerre Polynomials": [[76, "laguerre-polynomials"]], "Spherical Harmonics": [[76, "spherical-harmonics"]], "Tensor Functions": [[76, "tensor-functions"]], "Curves": [[77, "module-sympy.geometry.curve"]], "Ellipses": [[78, "module-sympy.geometry.ellipse"]], "Entities": [[79, "module-sympy.geometry.entity"]], "Geometry": [[80, "geometry"]], "Available Entities": [[80, "available-entities"]], "Example Usage": [[80, "example-usage"]], "Intersection of medians": [[80, "intersection-of-medians"]], "An in-depth example: Pappus\u2019 Hexagon Theorem": [[80, "an-in-depth-example-pappus-hexagon-theorem"]], "Miscellaneous Notes": [[80, "miscellaneous-notes"]], "Future Work": [[80, "future-work"]], "Truth Setting Expressions": [[80, "truth-setting-expressions"]], "Three Dimensions and Beyond": [[80, "three-dimensions-and-beyond"]], "Geometry Visualization": [[80, "geometry-visualization"]], "Submodules": [[80, "submodules"]], "Lines": [[81, "module-sympy.geometry.line"]], "Plane": [[82, "module-sympy.geometry.plane"]], "Points": [[83, "module-sympy.geometry.point"], [274, "points"]], "Polygons": [[84, "module-sympy.geometry.polygon"]], "Utils": [[85, "module-sympy.geometry.util"]], "About Holonomic Functions": [[86, "about-holonomic-functions"]], "Converting other representations to holonomic": [[87, "converting-other-representations-to-holonomic"]], "Converting hypergeometric functions": [[87, "converting-hypergeometric-functions"]], "Converting Meijer G-functions": [[87, "converting-meijer-g-functions"]], "Converting symbolic expressions": [[87, "converting-symbolic-expressions"]], "Holonomic": [[88, "module-sympy.holonomic"]], "Internal API": [[89, "internal-api"]], "Operations on holonomic functions": [[90, "operations-on-holonomic-functions"]], "Addition and Multiplication": [[90, "addition-and-multiplication"]], "Integration and Differentiation": [[90, "integration-and-differentiation"]], "Composition with polynomials": [[90, "composition-with-polynomials"]], "Convert to holonomic sequence": [[90, "convert-to-holonomic-sequence"]], "Series expansion": [[90, "series-expansion"]], "Numerical evaluation": [[90, "numerical-evaluation"]], "Convert to a linear combination of hypergeometric functions": [[90, "convert-to-a-linear-combination-of-hypergeometric-functions"]], "Convert to a linear combination of Meijer G-functions": [[90, "convert-to-a-linear-combination-of-meijer-g-functions"]], "Convert to expressions": [[90, "convert-to-expressions"]], "Representation of holonomic functions in SymPy": [[91, "representation-of-holonomic-functions-in-sympy"]], "Uses and Current limitations": [[92, "uses-and-current-limitations"]], "Integration": [[92, "integration"]], "Computing Integrals using Meijer G-Functions": [[93, "computing-integrals-using-meijer-g-functions"]], "Overview": [[93, "overview"]], "Polar Numbers and Branched Functions": [[93, "polar-numbers-and-branched-functions"]], "Representing Branched Functions on the Argand Plane": [[93, "representing-branched-functions-on-the-argand-plane"]], "Table Lookups and Inverse Mellin Transforms": [[93, "table-lookups-and-inverse-mellin-transforms"]], "Applying the Integral Theorems": [[93, "applying-the-integral-theorems"]], "The G-Function Integration Theorems": [[93, "the-g-function-integration-theorems"]], "Conditions of Convergence for Integral (1)": [[93, "conditions-of-convergence-for-integral-1"]], "Conditions of Convergence for Integral (2)": [[93, "conditions-of-convergence-for-integral-2"]], "The Inverse Laplace Transform of a G-function": [[93, "the-inverse-laplace-transform-of-a-g-function"]], "How to compute the integral": [[93, "how-to-compute-the-integral"]], "When this computation is valid": [[93, "when-this-computation-is-valid"]], "When the integral exists": [[93, "when-the-integral-exists"]], "Implemented G-Function Formulae": [[93, "implemented-g-function-formulae"]], "Internal API Reference": [[93, "module-sympy.integrals.meijerint"]], "Integrals": [[94, "integrals"], [95, "module-sympy.integrals"], [292, "integrals"]], "Integral Transforms": [[95, "module-sympy.integrals.transforms"]], "Internals": [[95, "internals"], [221, "internals"]], "API reference": [[95, "api-reference"], [95, "id39"]], "TODO and Bugs": [[95, "todo-and-bugs"]], "Numeric Integrals": [[95, "numeric-integrals"]], "Integration over Polytopes": [[95, "module-sympy.integrals.intpoly"]], "For 2D Polygons": [[95, "for-2d-polygons"]], "For 3-Polytopes/Polyhedra": [[95, "for-3-polytopes-polyhedra"]], "Interactive": [[96, "module-sympy.interactive"]], "Session": [[96, "module-sympy.interactive.session"]], "Lie Algebra": [[97, "module-sympy.liealgebras"]], "Forming logical expressions": [[98, "forming-logical-expressions"]], "Boolean functions": [[98, "boolean-functions"]], "Simplification and equivalence-testing": [[98, "simplification-and-equivalence-testing"]], "Manipulating expressions": [[98, "manipulating-expressions"]], "Truth tables and related functions": [[98, "truth-tables-and-related-functions"]], "Inference": [[98, "module-sympy.logic.inference"]], "Common Matrices": [[99, "module-sympy.matrices.common"]], "Dense Matrices": [[100, "dense-matrices"]], "Matrix Expressions": [[101, "module-sympy.matrices.expressions"]], "Matrix Expressions Core Reference": [[101, "matrix-expressions-core-reference"]], "Block Matrices": [[101, "block-matrices"]], "Immutable Matrices": [[102, "immutable-matrices"]], "ImmutableMatrix Class Reference": [[102, "module-sympy.matrices.immutable"]], "Matrices": [[103, "module-sympy.matrices"], [127, "module-sympy.physics.matrices"], [281, "matrices"], [285, "matrices"], [298, "matrices"]], "Matrices (linear algebra)": [[104, "module-sympy.matrices.matrices"]], "Creating Matrices": [[104, "creating-matrices"]], "Basic Manipulation": [[104, "basic-manipulation"]], "Operations on entries": [[104, "operations-on-entries"]], "Linear algebra": [[104, "linear-algebra"]], "Reference": [[104, "reference"], [213, "reference"], [219, "reference"], [223, "reference"], [233, "reference"], [233, "id2"], [233, "id4"], [233, "id7"], [233, "id8"]], "Matrix Base Classes": [[104, "matrix-base-classes"]], "Matrix Exceptions": [[104, "matrix-exceptions"]], "Matrix Functions": [[104, "matrix-functions"]], "Rotation matrices": [[104, "rotation-matrices"]], "Numpy Utility Functions": [[104, "numpy-utility-functions"]], "Matrix Normal Forms": [[105, "matrix-normal-forms"]], "Sparse Matrices": [[106, "module-sympy.matrices.sparse"]], "SparseMatrix Class Reference": [[106, "sparsematrix-class-reference"]], "ImmutableSparseMatrix Class Reference": [[106, "immutablesparsematrix-class-reference"]], "Sparse Tools": [[107, "module-sympy.matrices.sparsetools"]], "Ntheory Class Reference": [[108, "ntheory-class-reference"]], "Ntheory Functions Reference": [[108, "ntheory-functions-reference"]], "ECM function": [[108, "ecm-function"]], "QS function": [[108, "qs-function"]], "Numeric Computation": [[109, "numeric-computation"]], "Subs/evalf": [[109, "subs-evalf"]], "Lambdify": [[109, "lambdify"], [265, "module-sympy.utilities.lambdify"]], "uFuncify": [[109, "ufuncify"]], "Aesara": [[109, "aesara"]], "So Which Should I Use?": [[109, "so-which-should-i-use"]], "Parsing Functions Reference": [[110, "parsing-functions-reference"]], "Parsing Transformations Reference": [[110, "parsing-transformations-reference"]], "Experimental \\mathrm{\\LaTeX} Parsing": [[110, "experimental-mathrm-latex-parsing"]], "\\mathrm{\\LaTeX} Parsing Functions Reference": [[110, "mathrm-latex-parsing-functions-reference"]], "ANTLR Backend": [[110, "antlr-backend"]], "ANTLR \\mathrm{\\LaTeX} Parser Caveats": [[110, "antlr-mathrm-latex-parser-caveats"]], "Lark Backend": [[110, "lark-backend"]], "Lark \\mathrm{\\LaTeX} Parser Features": [[110, "lark-mathrm-latex-parser-features"]], "Lark \\mathrm{\\LaTeX} Parser Capabilities": [[110, "lark-mathrm-latex-parser-capabilities"]], "Lark \\mathrm{\\LaTeX} Parser Functions": [[110, "lark-mathrm-latex-parser-functions"]], "Lark \\mathrm{\\LaTeX} Parser Classes": [[110, "lark-mathrm-latex-parser-classes"]], "\\mathrm{\\LaTeX} Parsing Exceptions Reference": [[110, "mathrm-latex-parsing-exceptions-reference"]], "SymPy Expression Reference": [[110, "module-sympy.parsing.sym_expr"]], "Runtime Installation": [[110, "runtime-installation"]], "Activation (Docstrings)": [[111, "module-sympy.physics.biomechanics.activation"]], "Curve (Docstrings)": [[112, "module-sympy.physics.biomechanics.curve"]], "Biomechanics API Reference": [[113, "biomechanics-api-reference"]], "Musculotendon (Docstrings)": [[114, "module-sympy.physics.biomechanics.musculotendon"]], "Biomechanics": [[115, "biomechanics"]], "Abstract": [[115, null], [119, null], [123, null], [125, null], [151, null], [161, null], [178, null], [208, null]], "Mechanics": [[115, "mechanics"], [151, "mechanics"], [246, "module-sympy.stats.rv"]], "Guide to Biomechanics": [[115, "guide-to-biomechanics"]], "Beam (Docstrings)": [[116, "module-sympy.physics.continuum_mechanics.beam"]], "Solving Beam Bending Problems using Singularity Functions": [[117, "solving-beam-bending-problems-using-singularity-functions"]], "Beam": [[117, "beam"], [119, "beam"]], "Example 6": [[117, "example-6"]], "Example 7": [[117, "example-7"]], "Example 8": [[117, "example-8"]], "Example 9": [[117, "example-9"]], "Example 10": [[117, "example-10"]], "Example 11": [[117, "example-11"]], "Cable (Docstrings)": [[118, "cable-docstrings"]], "Cable": [[118, "module-sympy.physics.continuum_mechanics.cable"], [119, "cable"]], "Continuum Mechanics": [[119, "continuum-mechanics"]], "Truss": [[119, "truss"]], "Truss (Docstrings)": [[120, "module-sympy.physics.continuum_mechanics.truss"]], "Control": [[121, "control"]], "Control System Plots": [[122, "control-system-plots"]], "Pole-Zero Plot": [[122, "pole-zero-plot"]], "Bode Plot": [[122, "bode-plot"]], "Impulse-Response Plot": [[122, "impulse-response-plot"]], "Step-Response Plot": [[122, "step-response-plot"]], "Ramp-Response Plot": [[122, "ramp-response-plot"]], "Control Module": [[123, "module-sympy.physics.control"]], "Control API": [[124, "control-api"]], "lti": [[124, "module-sympy.physics.control.lti"]], "High energy physics": [[125, "high-energy-physics"]], "Gamma matrices": [[125, "module-sympy.physics.hep.gamma_matrices"]], "Hydrogen Wavefunctions": [[126, "module-sympy.physics.hydrogen"]], "Potential Issues/Advanced Topics/Future Features in Physics/Mechanics": [[128, "potential-issues-advanced-topics-future-features-in-physics-mechanics"]], "Common Issues": [[128, "common-issues"], [200, "common-issues"]], "Numerically Integrating Code": [[128, "numerically-integrating-code"]], "Differentiating": [[128, "differentiating"]], "Choice of Coordinates and Speeds": [[128, "choice-of-coordinates-and-speeds"]], "Substitution": [[128, "substitution"], [200, "substitution"], [291, "substitution"]], "Linearization": [[128, "linearization"]], "Acceleration of Points": [[128, "acceleration-of-points"], [200, "acceleration-of-points"]], "Advanced Interfaces": [[128, "advanced-interfaces"], [200, "advanced-interfaces"]], "Advanced Functionality": [[128, "advanced-functionality"]], "Future Features": [[128, "future-features"]], "Code Output": [[128, "code-output"]], "Actuator (Docstrings)": [[129, "module-sympy.physics.mechanics.actuator"]], "Body (Docstrings)": [[130, "module-sympy.physics.mechanics.body"]], "Expression Manipulation (Docstrings)": [[131, "expression-manipulation-docstrings"]], "Mechanics API Reference": [[132, "mechanics-api-reference"]], "Joints Framework (Docstrings)": [[133, "joints-framework-docstrings"]], "Joint (Docstrings)": [[133, "module-sympy.physics.mechanics.joint"]], "Kane\u2019s Method & Lagrange\u2019s Method (Docstrings)": [[134, "module-sympy.physics.mechanics.kane"]], "Linearization (Docstrings)": [[135, "module-sympy.physics.mechanics.linearize"]], "Bodies, Inertias, Loads & Other Functions (Docstrings)": [[136, "bodies-inertias-loads-other-functions-docstrings"]], "Bodies": [[136, "bodies"]], "Inertias": [[136, "inertias"]], "Loads": [[136, "loads"], [156, "loads"]], "Other Functions": [[136, "other-functions"]], "Pathway (Docstrings)": [[137, "module-sympy.physics.mechanics.pathway"]], "Printing (Docstrings)": [[138, "printing-docstrings"], [206, "printing-docstrings"]], "mechanics_printing": [[138, "mechanics-printing"]], "mprint": [[138, "mprint"]], "mpprint": [[138, "mpprint"]], "mlatex": [[138, "mlatex"]], "SymbolicSystem (Docstrings)": [[139, "symbolicsystem-docstrings"]], "Wrapping Geometry (Docstrings)": [[140, "module-sympy.physics.mechanics.wrapping_geometry"]], "Autolev Parser": [[141, "autolev-parser"]], "Usage": [[141, "usage"]], "Gotchas": [[141, "gotchas"], [294, "gotchas"]], "Limitations and Issues": [[141, "limitations-and-issues"]], "Future Improvements": [[141, "future-improvements"]], "1. Completing Dynamics Online": [[141, "completing-dynamics-online"]], "2. Fixing Issues": [[141, "fixing-issues"]], "3. Switching to an AST": [[141, "switching-to-an-ast"]], "Examples for Physics/Mechanics": [[142, "examples-for-physics-mechanics"]], "A bicycle": [[143, "a-bicycle"]], "A four bar linkage": [[144, "a-four-bar-linkage"]], "Nonminimal Coordinates Pendulum": [[145, "nonminimal-coordinates-pendulum"]], "Kane\u2019s Method": [[145, "kane-s-method"]], "Lagrange\u2019s Method": [[145, "lagrange-s-method"]], "Multi Degree of Freedom Holonomic System": [[146, "multi-degree-of-freedom-holonomic-system"]], "A rolling disc": [[147, "a-rolling-disc"]], "A rolling disc, with Kane\u2019s method": [[148, "a-rolling-disc-with-kane-s-method"]], "A rolling disc, with Kane\u2019s method and constraint forces": [[149, "a-rolling-disc-with-kane-s-method-and-constraint-forces"]], "A rolling disc using Lagrange\u2019s Method": [[150, "a-rolling-disc-using-lagrange-s-method"]], "Classical Mechanics": [[151, "classical-mechanics"]], "Vector": [[151, "vector"], [210, "vector"], [278, "vector"]], "Guide to Mechanics": [[151, "guide-to-mechanics"]], "Joints Framework in Physics/Mechanics": [[152, "joints-framework-in-physics-mechanics"]], "Joints in Physics/Mechanics": [[152, "joints-in-physics-mechanics"]], "JointsMethod in Physics/Mechanics": [[152, "jointsmethod-in-physics-mechanics"]], "Kane\u2019s Method in Physics/Mechanics": [[153, "kane-s-method-in-physics-mechanics"], [153, "id2"]], "Structure of Equations": [[153, "structure-of-equations"], [154, "structure-of-equations"]], "Lagrange\u2019s Method in Physics/Mechanics": [[154, "lagrange-s-method-in-physics-mechanics"], [154, "id1"]], "Linearization in Physics/Mechanics": [[155, "linearization-in-physics-mechanics"]], "Background": [[155, "background"]], "A Note on Dependent Coordinates and Speeds": [[155, null]], "Linearizing Kane\u2019s Equations": [[155, "linearizing-kane-s-equations"]], "1. Using the Linearizer class directly:": [[155, "using-the-linearizer-class-directly"], [155, "id2"]], "2. Using the linearize class method:": [[155, "using-the-linearize-class-method"], [155, "id3"]], "What\u2019s with the new_method kwarg?": [[155, null]], "Linearizing Lagrange\u2019s Equations": [[155, "linearizing-lagrange-s-equations"]], "Potential Issues": [[155, "potential-issues"]], "1. Symbolic linearization with A_and_B=True is slow": [[155, "symbolic-linearization-with-a-and-b-true-is-slow"]], "2. The linearized form has nan, zoo, or oo as matrix elements": [[155, "the-linearized-form-has-nan-zoo-or-oo-as-matrix-elements"]], "Further Examples": [[155, "further-examples"]], "Masses, Inertias, Particles and Rigid Bodies in Physics/Mechanics": [[156, "masses-inertias-particles-and-rigid-bodies-in-physics-mechanics"]], "Mass": [[156, "mass"]], "Particle": [[156, "particle"]], "Inertia": [[156, "inertia"]], "Inertia (Dyadics)": [[156, "inertia-dyadics"]], "Rigid Body": [[156, "rigid-body"]], "Linear Momentum": [[156, "linear-momentum"]], "Angular Momentum": [[156, "angular-momentum"]], "Using momenta functions in Mechanics": [[156, "using-momenta-functions-in-mechanics"]], "Kinetic Energy": [[156, "kinetic-energy"]], "Potential Energy": [[156, "potential-energy"]], "Lagrangian": [[156, "lagrangian"]], "Using energy functions in Mechanics": [[156, "using-energy-functions-in-mechanics"]], "References for Physics/Mechanics": [[157, "references-for-physics-mechanics"]], "SymPy Mechanics for Autolev Users": [[158, "sympy-mechanics-for-autolev-users"]], "Some Key Differences": [[158, "some-key-differences"]], "Rough Autolev-SymPy Equivalents": [[158, "rough-autolev-sympy-equivalents"]], "Mathematical Equivalents": [[158, "mathematical-equivalents"]], "Physical Equivalents": [[158, "physical-equivalents"]], "Numerical Evaluation and Visualization": [[158, "numerical-evaluation-and-visualization"]], "Links": [[158, "links"]], "Symbolic Systems in Physics/Mechanics": [[159, "symbolic-systems-in-physics-mechanics"]], "SymbolicSystem Example Usage": [[159, "symbolicsystem-example-usage"]], "Gaussian Optics": [[160, "module-sympy.physics.optics.gaussopt"]], "Optics Module": [[161, "optics-module"]], "Medium": [[162, "module-sympy.physics.optics.medium"]], "Polarization": [[163, "module-sympy.physics.optics.polarization"]], "Waves": [[165, "module-sympy.physics.optics.waves"]], "Pauli Algebra": [[166, "module-sympy.physics.paulialgebra"]], "Quantum Harmonic Oscillator in 1-D": [[167, "module-sympy.physics.qho_1d"]], "Anticommutator": [[168, "module-sympy.physics.quantum.anticommutator"]], "Cartesian Operators and States": [[169, "module-sympy.physics.quantum.cartesian"]], "Clebsch-Gordan Coefficients": [[170, "module-sympy.physics.quantum.cg"]], "Circuit Plot": [[171, "module-sympy.physics.quantum.circuitplot"]], "Commutator": [[172, "module-sympy.physics.quantum.commutator"]], "Constants": [[173, "module-sympy.physics.quantum.constants"], [196, "constants"]], "Dagger": [[174, "module-sympy.physics.quantum.dagger"]], "Gates": [[175, "module-sympy.physics.quantum.gate"]], "Grover\u2019s Algorithm": [[176, "module-sympy.physics.quantum.grover"]], "Hilbert Space": [[177, "module-sympy.physics.quantum.hilbert"]], "Quantum Mechanics": [[178, "quantum-mechanics"]], "Quantum Functions": [[178, "quantum-functions"]], "States and Operators": [[178, "states-and-operators"]], "Quantum Computation": [[178, "quantum-computation"]], "Analytic Solutions": [[178, "analytic-solutions"]], "Inner Product": [[179, "module-sympy.physics.quantum.innerproduct"]], "Operator": [[180, "module-sympy.physics.quantum.operator"]], "Operator/State Helper Functions": [[181, "module-sympy.physics.quantum.operatorset"]], "Particle in a Box": [[182, "module-sympy.physics.quantum.piab"]], "Qapply": [[183, "module-sympy.physics.quantum.qapply"]], "QFT": [[184, "module-sympy.physics.quantum.qft"]], "Qubit": [[185, "module-sympy.physics.quantum.qubit"]], "Represent": [[186, "module-sympy.physics.quantum.represent"]], "Shor\u2019s Algorithm": [[187, "module-sympy.physics.quantum.shor"]], "Spin": [[188, "module-sympy.physics.quantum.spin"]], "State": [[189, "module-sympy.physics.quantum.state"]], "Tensor Product": [[190, "module-sympy.physics.quantum.tensorproduct"]], "Second Quantization": [[191, "module-sympy.physics.secondquant"]], "Quantum Harmonic Oscillator in 3-D": [[192, "module-sympy.physics.sho"]], "Dimensions and dimension systems": [[193, "module-sympy.physics.units.dimensions"]], "More examples": [[194, "more-examples"]], "Dimensional analysis": [[194, "dimensional-analysis"]], "Equation with quantities": [[194, "equation-with-quantities"]], "Unit systems": [[195, "unit-systems"]], "More": [[195, "more"]], "Philosophy behind unit systems": [[196, "philosophy-behind-unit-systems"]], "Dimensions": [[196, "dimensions"]], "Group structure": [[196, "group-structure"]], "Linear space representation": [[196, "linear-space-representation"]], "An example": [[196, "an-example"], [236, "an-example"]], "Quantities": [[196, "quantities"]], "Units": [[196, "units"]], "The need for a reference": [[196, "the-need-for-a-reference"]], "Literature": [[196, "literature"], [220, "literature"], [225, "literature"]], "Unit prefixes": [[197, "module-sympy.physics.units.prefixes"]], "Physical quantities": [[198, "module-sympy.physics.units.quantities"]], "Conversion between quantities": [[198, "module-sympy.physics.units.util"]], "Units and unit systems": [[199, "module-sympy.physics.units.unitsystem"]], "Potential Issues/Advanced Topics/Future Features in Physics/Vector Module": [[200, "potential-issues-advanced-topics-future-features-in-physics-vector-module"]], "Dyadic": [[200, "dyadic"]], "ReferenceFrame": [[200, "referenceframe"]], "dynamicsymbols": [[200, "dynamicsymbols"]], "Essential Classes": [[201, "essential-classes"]], "Docstrings for basic field functions": [[202, "docstrings-for-basic-field-functions"]], "Field operation functions": [[202, "field-operation-functions"]], "Checking the type of vector field": [[202, "checking-the-type-of-vector-field"]], "Essential Functions (Docstrings)": [[203, "essential-functions-docstrings"]], "Physics Vector API": [[204, "physics-vector-api"]], "Kinematics (Docstrings)": [[205, "module-sympy.physics.vector.point"]], "kinematic_equations": [[205, "module-sympy.physics.vector.functions"]], "Scalar and Vector Field Functionality": [[207, "scalar-and-vector-field-functionality"], [277, "scalar-and-vector-field-functionality"]], "Vectors and Scalars": [[207, "vectors-and-scalars"], [279, "vectors-and-scalars"]], "Fields": [[207, "fields"], [279, "fields"]], "Implementation of fields in sympy.physics.vector": [[207, "implementation-of-fields-in-sympy-physics-vector"]], "Field operators and other related functions": [[207, "field-operators-and-other-related-functions"]], "Curl": [[207, "curl"], [277, "curl"]], "Divergence": [[207, "divergence"], [277, "divergence"]], "Gradient": [[207, "gradient"], [277, "gradient"]], "Conservative and Solenoidal fields": [[207, "conservative-and-solenoidal-fields"], [277, "conservative-and-solenoidal-fields"]], "Scalar potential functions": [[207, "scalar-potential-functions"], [277, "scalar-potential-functions"]], "The Physics Vector Module": [[208, "the-physics-vector-module"]], "References for Physics/Vector": [[208, "references-for-physics-vector"]], "Guide to Vector": [[208, "guide-to-vector"], [278, "guide-to-vector"]], "Vector: Kinematics": [[209, "vector-kinematics"]], "Introduction to Kinematics": [[209, "introduction-to-kinematics"]], "Angular Velocity": [[209, "angular-velocity"]], "Angular Acceleration": [[209, "angular-acceleration"]], "Point Velocity & Acceleration": [[209, "point-velocity-acceleration"]], "Kinematics in physics.vector": [[209, "kinematics-in-physics-vector"]], "Vector & ReferenceFrame": [[210, "vector-referenceframe"]], "Vector Algebra": [[210, "vector-algebra"]], "Vector Operations": [[210, "vector-operations"]], "Alternative Representation": [[210, "alternative-representation"]], "Vector Calculus": [[210, "vector-calculus"]], "Derivatives of Vectors": [[210, "derivatives-of-vectors"]], "Relating Sets of Basis Vectors": [[210, "relating-sets-of-basis-vectors"]], "Derivatives with Multiple Frames": [[210, "derivatives-with-multiple-frames"]], "Using Vectors and Reference Frames": [[210, "using-vectors-and-reference-frames"]], "Vector Algebra, in physics.vector": [[210, "vector-algebra-in-physics-vector"]], "Vector Calculus, in physics.vector": [[210, "vector-calculus-in-physics-vector"]], "How Vectors are Coded": [[210, "how-vectors-are-coded"]], "Wigner Symbols": [[211, "module-sympy.physics.wigner"]], "Credits and Copyright": [[211, "credits-and-copyright"]], "Authors": [[211, "authors"]], "Plot Class": [[212, "plot-class"]], "Plotting Function Reference": [[212, "plotting-function-reference"]], "PlotGrid Class": [[212, "plotgrid-class"]], "Series Classes": [[212, "series-classes"]], "Backends": [[212, "backends"]], "Pyglet Plotting": [[212, "module-sympy.plotting.pygletplot"]], "Plot Window Controls": [[212, "plot-window-controls"]], "Coordinate Modes": [[212, "coordinate-modes"]], "Specifying Intervals for Variables": [[212, "specifying-intervals-for-variables"]], "Using the Interactive Interface": [[212, "using-the-interactive-interface"]], "Using Custom Color Functions": [[212, "using-custom-color-functions"]], "Plotting Geometric Entities": [[212, "plotting-geometric-entities"]], "Plotting with ASCII art": [[212, "plotting-with-ascii-art"]], "AGCA - Algebraic Geometry and Commutative Algebra Module": [[213, "agca-algebraic-geometry-and-commutative-algebra-module"]], "Base Rings": [[213, "base-rings"]], "Modules, Ideals and their Elementary Properties": [[213, "modules-ideals-and-their-elementary-properties"]], "Module Homomorphisms and Syzygies": [[213, "module-homomorphisms-and-syzygies"]], "Finite Extensions": [[213, "finite-extensions"]], "Basic functionality of the module": [[214, "basic-functionality-of-the-module"]], "Basic concepts": [[214, "basic-concepts"]], "Polynomials": [[214, "polynomials"]], "Divisibility": [[214, "divisibility"]], "Integral domains": [[214, "integral-domains"]], "Factorial domains": [[214, "factorial-domains"]], "Euclidean domains": [[214, "euclidean-domains"]], "Divisibility of polynomials": [[214, "divisibility-of-polynomials"]], "Basic functionality": [[214, "basic-functionality"]], "Division": [[214, "division"]], "GCD and LCM": [[214, "gcd-and-lcm"]], "Square-free factorization": [[214, "square-free-factorization"]], "Factorization": [[214, "factorization"]], "Groebner bases": [[214, "groebner-bases"]], "Solving Equations": [[214, "solving-equations"]], "Introducing the domainmatrix of the poly module": [[215, "introducing-the-domainmatrix-of-the-poly-module"]], "What is domainmatrix?": [[215, "what-is-domainmatrix"]], "Introducing the Domains of the poly module": [[216, "introducing-the-domains-of-the-poly-module"]], "What are the domains?": [[216, "what-are-the-domains"]], "Representing expressions symbolically": [[216, "representing-expressions-symbolically"]], "Tree representation": [[216, "tree-representation"]], "DUP representation": [[216, "dup-representation"]], "DMP representation": [[216, "dmp-representation"]], "Sparse polynomial representation": [[216, "sparse-polynomial-representation"]], "Basic usage of domains": [[216, "basic-usage-of-domains"]], "Domain elements vs sympy expressions": [[216, "domain-elements-vs-sympy-expressions"]], "Gaussian integers and Gaussian rationals": [[216, "gaussian-integers-and-gaussian-rationals"]], "Finite fields": [[216, "finite-fields"]], "Real and complex fields": [[216, "real-and-complex-fields"]], "Algebraic number fields": [[216, "algebraic-number-fields"], [221, "algebraic-number-fields"]], "Polynomial ring domains": [[216, "polynomial-ring-domains"]], "Old (dense) polynomial rings": [[216, "old-dense-polynomial-rings"]], "PolyRing vs PolynomialRing": [[216, "polyring-vs-polynomialring"]], "Rational function fields": [[216, "rational-function-fields"]], "Expression domain": [[216, "expression-domain"]], "Choosing a domain": [[216, "choosing-a-domain"]], "Converting elements between different domains": [[216, "converting-elements-between-different-domains"]], "Unifying domains": [[216, "unifying-domains"]], "Internals of a Poly": [[216, "internals-of-a-poly"]], "Choosing a domain for a Poly": [[216, "choosing-a-domain-for-a-poly"]], "Choosing generators": [[216, "choosing-generators"]], "Algebraically dependent generators": [[216, "algebraically-dependent-generators"]], "Reference docs for the Poly Domains": [[217, "reference-docs-for-the-poly-domains"]], "Domains": [[217, "domains"]], "Abstract Domains": [[217, "abstract-domains"]], "GF(p)": [[217, "gf-p"]], "ZZ": [[217, "zz"]], "QQ": [[217, "qq"]], "MPQ": [[217, "mpq"]], "Gaussian domains": [[217, "gaussian-domains"]], "ZZ_I": [[217, "zz-i"]], "QQ_I": [[217, "qq-i"]], "QQ<a>": [[217, "qq-a"]], "RR": [[217, "rr"]], "CC": [[217, "cc"]], "K[x]": [[217, "k-x"]], "K(x)": [[217, "id11"]], "EX": [[217, "ex"]], "Quotient ring": [[217, "quotient-ring"]], "Sparse polynomials": [[217, "sparse-polynomials"]], "Sparse rational functions": [[217, "sparse-rational-functions"]], "Dense polynomials": [[217, "dense-polynomials"]], "Polynomial Manipulation": [[218, "polynomial-manipulation"]], "Internals of the Polynomial Manipulation Module": [[219, "internals-of-the-polynomial-manipulation-module"]], "Level Zero": [[219, "level-zero"]], "Manipulation of dense, multivariate polynomials": [[219, "manipulation-of-dense-multivariate-polynomials"]], "Manipulation of dense, univariate polynomials with finite field coefficients": [[219, "manipulation-of-dense-univariate-polynomials-with-finite-field-coefficients"]], "Manipulation of sparse, distributed polynomials and vectors": [[219, "manipulation-of-sparse-distributed-polynomials-and-vectors"]], "Polynomial factorization algorithms": [[219, "polynomial-factorization-algorithms"]], "Classical remainder sequence": [[219, "classical-remainder-sequence"]], "Simplified remainder sequences": [[219, "simplified-remainder-sequences"]], "Subresultant sequence": [[219, "subresultant-sequence"]], "Groebner basis algorithms": [[219, "groebner-basis-algorithms"]], "Options": [[219, "module-sympy.polys.polyoptions"]], "Configuration": [[219, "module-sympy.polys.polyconfig"]], "Exceptions": [[219, "exceptions"]], "Modular GCD": [[219, "modular-gcd"]], "Undocumented": [[219, "undocumented"]], "Number Fields": [[221, "number-fields"]], "Solving the Main Problems": [[221, "solving-the-main-problems"]], "Integral Basis": [[221, "integral-basis"]], "Prime Decomposition": [[221, "prime-decomposition"]], "p-adic Valuation": [[221, "p-adic-valuation"]], "Finding Minimal Polynomials": [[221, "finding-minimal-polynomials"]], "The Subfield Problem": [[221, "the-subfield-problem"]], "Representing algebraic numbers": [[221, "representing-algebraic-numbers"]], "As number field elements": [[221, "as-number-field-elements"]], "As elements of finitely-generated modules": [[221, "as-elements-of-finitely-generated-modules"]], "Finitely-generated modules": [[221, "module-sympy.polys.numberfields.modules"]], "Arithmetic with module elements": [[221, "arithmetic-with-module-elements"]], "Multiplication": [[221, "multiplication"]], "Module Homomorphisms": [[221, "module-homomorphisms"]], "Class Reference": [[221, "class-reference"]], "Polynomials Manipulation Module Reference": [[222, "module-sympy.polys"]], "Basic polynomial manipulation functions": [[222, "basic-polynomial-manipulation-functions"]], "Extra polynomial manipulation functions": [[222, "extra-polynomial-manipulation-functions"]], "Domain constructors": [[222, "domain-constructors"]], "Monomials encoded as tuples": [[222, "monomials-encoded-as-tuples"]], "Orderings of monomials": [[222, "orderings-of-monomials"]], "Formal manipulation of roots of polynomials": [[222, "formal-manipulation-of-roots-of-polynomials"]], "Symbolic root-finding algorithms": [[222, "symbolic-root-finding-algorithms"]], "Special polynomials": [[222, "special-polynomials"]], "Orthogonal polynomials": [[222, "orthogonal-polynomials"]], "Appell sequences": [[222, "appell-sequences"]], "Manipulation of rational functions": [[222, "manipulation-of-rational-functions"]], "Partial fraction decomposition": [[222, "partial-fraction-decomposition"], [225, "partial-fraction-decomposition"]], "Dispersion of Polynomials": [[222, "dispersion-of-polynomials"]], "Series Manipulation using Polynomials": [[223, "series-manipulation-using-polynomials"]], "rs_series": [[223, "rs-series"]], "Contribute": [[223, "contribute"]], "Poly solvers": [[224, "poly-solvers"]], "Examples from Wester\u2019s Article": [[225, "examples-from-wester-s-article"]], "Simple univariate polynomial factorization": [[225, "simple-univariate-polynomial-factorization"]], "Univariate GCD, resultant and factorization": [[225, "univariate-gcd-resultant-and-factorization"]], "Multivariate GCD and factorization": [[225, "multivariate-gcd-and-factorization"]], "Support for symbols in exponents": [[225, "support-for-symbols-in-exponents"]], "Testing if polynomials have common zeros": [[225, "testing-if-polynomials-have-common-zeros"]], "Normalizing simple rational functions": [[225, "normalizing-simple-rational-functions"]], "Expanding expressions and factoring back": [[225, "expanding-expressions-and-factoring-back"]], "Factoring in terms of cyclotomic polynomials": [[225, "factoring-in-terms-of-cyclotomic-polynomials"]], "Univariate factoring over Gaussian numbers": [[225, "univariate-factoring-over-gaussian-numbers"]], "Computing with automatic field extensions": [[225, "computing-with-automatic-field-extensions"]], "Univariate factoring over various domains": [[225, "univariate-factoring-over-various-domains"]], "Factoring polynomials into linear factors": [[225, "factoring-polynomials-into-linear-factors"]], "Advanced factoring over finite fields": [[225, "advanced-factoring-over-finite-fields"]], "Working with expressions as polynomials": [[225, "working-with-expressions-as-polynomials"]], "Computing reduced Gr\u00f6bner bases": [[225, "computing-reduced-grobner-bases"]], "Multivariate factoring over algebraic numbers": [[225, "multivariate-factoring-over-algebraic-numbers"]], "Printer Class": [[226, "module-sympy.printing.printer"]], "Which Method is Responsible for Printing?": [[226, "which-method-is-responsible-for-printing"]], "Example of Custom Printer": [[226, "example-of-custom-printer"]], "Example of Custom Printing Method": [[226, "example-of-custom-printing-method"]], "Common mistakes": [[226, "common-mistakes"]], "PrettyPrinter Class": [[226, "prettyprinter-class"]], "C code printers": [[226, "module-sympy.printing.c"]], "C++ code printers": [[226, "module-sympy.printing.cxx"]], "RCodePrinter": [[226, "module-sympy.printing.rcode"]], "Fortran Printing": [[226, "fortran-printing"]], "SMT-Lib printing": [[226, "module-sympy.printing.smtlib"]], "Mathematica code printing": [[226, "module-sympy.printing.mathematica"]], "Maple code printing": [[226, "module-sympy.printing.maple"]], "Javascript Code printing": [[226, "module-sympy.printing.jscode"]], "Julia code printing": [[226, "module-sympy.printing.julia"]], "Octave (and Matlab) Code printing": [[226, "module-sympy.printing.octave"]], "Rust code printing": [[226, "module-sympy.printing.rust"]], "Aesara Code printing": [[226, "module-sympy.printing.aesaracode"]], "Gtk": [[226, "module-sympy.printing.gtk"]], "LambdaPrinter": [[226, "module-sympy.printing.lambdarepr"]], "LatexPrinter": [[226, "module-sympy.printing.latex"]], "MathMLPrinter": [[226, "module-sympy.printing.mathml"]], "PythonCodePrinter": [[226, "module-sympy.printing.pycode"]], "PythonPrinter": [[226, "module-sympy.printing.python"]], "srepr": [[226, "module-sympy.printing.repr"], [301, "srepr"]], "StrPrinter": [[226, "module-sympy.printing.str"]], "Tree Printing": [[226, "module-sympy.printing.tree"]], "Preview": [[226, "preview"]], "Implementation - Helper Classes/Functions": [[226, "module-sympy.printing.conventions"]], "CodePrinter": [[226, "module-sympy.printing.codeprinter"]], "Precedence": [[226, "module-sympy.printing.precedence"]], "Pretty-Printing Implementation Helpers": [[226, "module-sympy.printing.pretty.pretty_symbology"]], "dotprint": [[226, "dotprint"]], "Term Rewriting": [[227, "term-rewriting"]], "Expanding": [[227, "expanding"]], "Common Subexpression Detection and Collection": [[227, "common-subexpression-detection-and-collection"]], "Formal Power Series": [[228, "formal-power-series"]], "Rational Algorithm": [[228, "rational-algorithm"]], "Hypergeometric Algorithm": [[228, "hypergeometric-algorithm"]], "Fourier Series": [[229, "fourier-series"]], "Series": [[230, "series"]], "Limits of Sequences": [[231, "limits-of-sequences"]], "Sequences": [[232, "sequences"]], "Sequences Base": [[232, "sequences-base"]], "Elementary Sequences": [[232, "elementary-sequences"]], "Singleton Sequences": [[232, "singleton-sequences"]], "Compound Sequences": [[232, "compound-sequences"]], "Recursive Sequences": [[232, "recursive-sequences"]], "Series Expansions": [[233, "series-expansions"]], "Limits": [[233, "limits"], [292, "limits"]], "The Gruntz Algorithm": [[233, "the-gruntz-algorithm"]], "More Intuitive Series Expansion": [[233, "more-intuitive-series-expansion"]], "Order Terms": [[233, "order-terms"]], "Series Acceleration": [[233, "series-acceleration"]], "Residues": [[233, "residues"]], "Basic Sets": [[234, "module-sympy.sets.sets"]], "Elementary Sets": [[234, "elementary-sets"]], "Compound Sets": [[234, "compound-sets"]], "Singleton Sets": [[234, "singleton-sets"]], "Special Sets": [[234, "module-sympy.sets.fancysets"]], "Power sets": [[234, "module-sympy.sets.powerset"]], "Condition Sets": [[234, "module-sympy.sets.conditionset"]], "SetKind": [[234, "setkind"]], "Iteration over sets": [[234, "iteration-over-sets"]], "Hongguang Fu\u2019s Trigonometric Simplification": [[235, "hongguang-fu-s-trigonometric-simplification"]], "Rules": [[235, "rules"]], "Hypergeometric Expansion": [[236, "hypergeometric-expansion"]], "Hypergeometric Function Expansion Algorithm": [[236, "hypergeometric-function-expansion-algorithm"]], "Notation": [[236, "notation"]], "Incrementing and decrementing indices": [[236, "incrementing-and-decrementing-indices"]], "Reduction of Order": [[236, "reduction-of-order"]], "Moving Around in the Parameter Space": [[236, "moving-around-in-the-parameter-space"]], "Applying the Operators": [[236, "applying-the-operators"]], "Loose Ends": [[236, "loose-ends"]], "Meijer G-Functions of Finite Confluence": [[236, "meijer-g-functions-of-finite-confluence"]], "Extending The Hypergeometric Tables": [[236, "extending-the-hypergeometric-tables"]], "Implemented Hypergeometric Formulae": [[236, "implemented-hypergeometric-formulae"]], "Simplify": [[237, "simplify"], [238, "simplify"]], "Diophantine": [[239, "diophantine"]], "Diophantine equations": [[239, "diophantine-equations"]], "Module structure": [[239, "module-structure"]], "Tutorial": [[239, "tutorial"]], "User Functions": [[239, "user-functions"], [242, "user-functions"], [243, "user-functions"]], "Internal Functions": [[239, "internal-functions"]], "Internal Classes": [[239, "internal-classes"]], "Solvers": [[240, "solvers"], [244, "module-sympy.solvers"], [303, "solvers"]], "Inequality Solvers": [[241, "inequality-solvers"]], "ODE": [[242, "ode"]], "Hint Functions": [[242, "hint-functions"]], "Lie heuristics": [[242, "lie-heuristics"]], "Rational Riccati Solver": [[242, "rational-riccati-solver"]], "System of ODEs": [[242, "system-of-odes"]], "Information on the ode module": [[242, "module-sympy.solvers.ode.ode"]], "PDE": [[243, "pde"]], "Hint Methods": [[243, "hint-methods"]], "Information on the pde module": [[243, "module-sympy.solvers.pde"]], "Algebraic equations": [[244, "algebraic-equations"]], "Ordinary Differential equations (ODEs)": [[244, "ordinary-differential-equations-odes"], [245, "ordinary-differential-equations-odes"]], "Partial Differential Equations (PDEs)": [[244, "partial-differential-equations-pdes"], [245, "partial-differential-equations-pdes"]], "Deutils (Utilities for solving ODE\u2019s and PDE\u2019s)": [[244, "deutils-utilities-for-solving-ode-s-and-pde-s"]], "Recurrence Equations": [[244, "module-sympy.solvers.recurr"]], "Systems of Polynomial Equations": [[244, "systems-of-polynomial-equations"]], "Diophantine Equations (DEs)": [[244, "diophantine-equations-des"], [245, "diophantine-equations-des"]], "Inequalities": [[244, "inequalities"], [245, "inequalities"]], "Linear Programming (Optimization)": [[244, "module-sympy.solvers.simplex"]], "Solveset": [[245, "solveset"]], "What\u2019s wrong with solve():": [[245, "what-s-wrong-with-solve"]], "Why Solveset?": [[245, "why-solveset"]], "Why do we use Sets as an output type?": [[245, "why-do-we-use-sets-as-an-output-type"]], "Input API of solveset": [[245, "input-api-of-solveset"]], "What is this domain argument about?": [[245, "what-is-this-domain-argument-about"]], "What are the general methods employed by solveset to solve an equation?": [[245, "what-are-the-general-methods-employed-by-solveset-to-solve-an-equation"]], "How do we manipulate and return an infinite solution?": [[245, "how-do-we-manipulate-and-return-an-infinite-solution"]], "How does solveset ensure that it is not returning any wrong solution?": [[245, "how-does-solveset-ensure-that-it-is-not-returning-any-wrong-solution"]], "Search based solver and step-by-step solution": [[245, "search-based-solver-and-step-by-step-solution"]], "How do we deal with cases where only some of the solutions are known?": [[245, "how-do-we-deal-with-cases-where-only-some-of-the-solutions-are-known"]], "What is the plan for solve and solveset?": [[245, "what-is-the-plan-for-solve-and-solveset"]], "How are symbolic parameters handled in solveset?": [[245, "how-are-symbolic-parameters-handled-in-solveset"]], "Solveset Module Reference": [[245, "solveset-module-reference"]], "transolve": [[245, "transolve"]], "Stats": [[246, "module-sympy.stats"]], "Random Variable Types": [[246, "random-variable-types"]], "Finite Types": [[246, "finite-types"]], "Discrete Types": [[246, "discrete-types"]], "Continuous Types": [[246, "continuous-types"]], "Joint Types": [[246, "joint-types"]], "Stochastic Processes": [[246, "stochastic-processes"]], "Matrix Distributions": [[246, "matrix-distributions"]], "Compound Distribution": [[246, "compound-distribution"]], "Interface": [[246, "interface"]], "N-dim array": [[247, "module-sympy.tensor.array"]], "Products and contractions": [[247, "products-and-contractions"]], "Diagonal operator": [[247, "diagonal-operator"]], "Derivatives by array": [[247, "derivatives-by-array"]], "Classes": [[247, "classes"]], "N-dim array expressions": [[248, "module-sympy.tensor.array.expressions"]], "Constructing array expressions from index-explicit forms": [[248, "constructing-array-expressions-from-index-explicit-forms"]], "Compatibility with matrices": [[248, "compatibility-with-matrices"]], "Tensor": [[249, "module-sympy.tensor"], [252, "module-sympy.tensor.tensor"]], "Methods": [[250, "module-sympy.tensor.index_methods"]], "Indexed Objects": [[251, "module-sympy.tensor.indexed"]], "Tensor Operators": [[253, "module-sympy.tensor.toperators"]], "Testing": [[254, "testing"]], "pytest": [[255, "module-sympy.testing.pytest"]], "Randomised Testing": [[256, "module-sympy.testing.randtest"]], "Run Tests": [[257, "module-sympy.testing.runtests"]], "Autowrap Module": [[258, "autowrap-module"]], "Implementation details": [[258, "implementation-details"]], "Codegen": [[259, "codegen"]], "Implementation Details": [[259, "implementation-details"]], "Routine": [[259, "routine"]], "Decorator": [[260, "module-sympy.utilities.decorator"]], "Enumerative": [[261, "module-sympy.utilities.enumerative"]], "Exceptions and Warnings": [[262, "module-sympy.utilities.exceptions"]], "Iterables": [[264, "module-sympy.utilities.iterables"]], "variations": [[264, "variations"]], "partitions": [[264, "partitions"]], "Memoization": [[266, "module-sympy.utilities.memoization"]], "Source Code Inspection": [[268, "module-sympy.utilities.source"]], "Timing Utilities": [[269, "module-sympy.utilities.timeutils"]], "Essential Classes in sympy.vector (docstrings)": [[270, "essential-classes-in-sympy-vector-docstrings"]], "Vector API": [[271, "vector-api"]], "Orienter classes (docstrings)": [[272, "orienter-classes-docstrings"]], "Essential Functions in sympy.vector (docstrings)": [[273, "essential-functions-in-sympy-vector-docstrings"]], "Basic Implementation details": [[274, "basic-implementation-details"]], "Coordinate Systems and Vectors": [[274, "coordinate-systems-and-vectors"]], "SymPy operations on Vectors": [[274, "sympy-operations-on-vectors"]], "Dyadics": [[274, "dyadics"]], "More about Coordinate Systems": [[275, "more-about-coordinate-systems"]], "Locating new systems": [[275, "locating-new-systems"]], "Orienting new systems": [[275, "orienting-new-systems"]], "Using a method of CoordSys3D directly": [[275, "using-a-method-of-coordsys3d-directly"]], "Using Orienter(s) and the orient_new method": [[275, "using-orienter-s-and-the-orient-new-method"]], "Orienting AND Locating new systems": [[275, "orienting-and-locating-new-systems"]], "Transforming new system": [[275, "transforming-new-system"]], "Expression of quantities in different coordinate systems": [[275, "expression-of-quantities-in-different-coordinate-systems"]], "Vectors and Dyadics": [[275, "vectors-and-dyadics"]], "Coordinate Variables": [[275, "coordinate-variables"]], "Other expression-dependent methods": [[275, "other-expression-dependent-methods"]], "General examples of usage": [[276, "general-examples-of-usage"]], "Quadrilateral problem": [[276, "quadrilateral-problem"]], "The Problem": [[276, "the-problem"], [276, "id1"]], "Solution": [[276, "solution"], [276, "id2"]], "Third product rule for Del operator": [[276, "third-product-rule-for-del-operator"]], "See": [[276, "see"]], "Implementation in sympy.vector": [[277, "implementation-in-sympy-vector"]], "Scalar and vector fields": [[277, "scalar-and-vector-fields"]], "The Del operator": [[277, "the-del-operator"]], "Field operators and related functions": [[277, "field-operators-and-related-functions"]], "Directional Derivative": [[277, "directional-derivative"]], "Field operator in orthogonal curvilinear coordinate system": [[277, "field-operator-in-orthogonal-curvilinear-coordinate-system"]], "References for Vector": [[278, "references-for-vector"]], "Coordinate Systems": [[279, "coordinate-systems"]], "Applications of Vector Integrals": [[280, "applications-of-vector-integrals"]], "Calculation of Perimeter, Surface Area, and Volume": [[280, "calculation-of-perimeter-surface-area-and-volume"]], "Calculation of mass of a body": [[280, "calculation-of-mass-of-a-body"]], "Calculation of Flux": [[280, "calculation-of-flux"]], "Verifying Stoke\u2019s Theorem": [[280, "verifying-stoke-s-theorem"]], "Verifying Divergence Theorem": [[280, "verifying-divergence-theorem"]], "Topics": [[281, "topics"], [288, "topics"]], "Introductory Tutorial": [[290, "introductory-tutorial"], [295, "introductory-tutorial"]], "Basic Operations": [[291, "basic-operations"], [298, "basic-operations"]], "Quick Tip": [[291, null], [292, null], [294, null], [297, null], [298, null]], "Converting Strings to SymPy Expressions": [[291, "converting-strings-to-sympy-expressions"]], "Derivatives": [[292, "derivatives"]], "Series Expansion": [[292, "series-expansion"]], "Finite differences": [[292, "finite-differences"]], "SymPy Features": [[293, "sympy-features"]], "Equals signs": [[294, "equals-signs"]], "Two Final Notes: ^ and /": [[294, "two-final-notes-and"]], "Further Reading": [[294, "further-reading"]], "What is Symbolic Computation?": [[296, "what-is-symbolic-computation"]], "A More Interesting Example": [[296, "a-more-interesting-example"]], "The Power of Symbolic Computation": [[296, "the-power-of-symbolic-computation"]], "Why SymPy?": [[296, "why-sympy"]], "Advanced Expression Manipulation": [[297, "advanced-expression-manipulation"]], "Understanding Expression Trees": [[297, "understanding-expression-trees"]], "Recursing through an Expression Tree": [[297, "recursing-through-an-expression-tree"]], "args": [[297, "args"]], "Key Invariant": [[297, null]], "Walking the Tree": [[297, "walking-the-tree"]], "Prevent expression evaluation": [[297, "prevent-expression-evaluation"]], "Shape": [[298, "shape"]], "Accessing Rows and Columns": [[298, "accessing-rows-and-columns"]], "Deleting and Inserting Rows and Columns": [[298, "deleting-and-inserting-rows-and-columns"]], "Basic Methods": [[298, "basic-methods"]], "Matrix Constructors": [[298, "matrix-constructors"]], "Advanced Methods": [[298, "advanced-methods"]], "Determinant": [[298, "determinant"]], "RREF": [[298, "rref"]], "Nullspace": [[298, "nullspace"]], "Columnspace": [[298, "columnspace"]], "Eigenvalues, Eigenvectors, and Diagonalization": [[298, "eigenvalues-eigenvectors-and-diagonalization"]], "Possible Issues": [[298, "possible-issues"]], "Zero Testing": [[298, "zero-testing"]], "What\u2019s Next": [[299, "whats-next"]], "Preliminaries": [[300, "preliminaries"]], "Exercises": [[300, "exercises"]], "Printers": [[301, "printers"]], "Setting up Pretty Printing": [[301, "setting-up-pretty-printing"]], "Printing Functions": [[301, "printing-functions"]], "str": [[301, "str"]], "ASCII Pretty Printer": [[301, "ascii-pretty-printer"]], "Unicode Pretty Printer": [[301, "unicode-pretty-printer"]], "\\mathrm{\\LaTeX}": [[301, "mathrm-latex"]], "MathML": [[301, "mathml"]], "Dot": [[301, "dot"]], "Simplification": [[302, "simplification"]], "simplify": [[302, "simplify"]], "Polynomial/Rational Function Simplification": [[302, "polynomial-rational-function-simplification"]], "expand": [[302, "expand"]], "factor": [[302, "factor"]], "collect": [[302, "collect"]], "cancel": [[302, "cancel"]], "apart": [[302, "apart"]], "Trigonometric Simplification": [[302, "trigonometric-simplification"]], "trigsimp": [[302, "trigsimp"]], "expand_trig": [[302, "expand-trig"]], "Powers": [[302, "powers"]], "powsimp": [[302, "powsimp"]], "expand_power_exp / expand_power_base": [[302, "expand-power-exp-expand-power-base"]], "powdenest": [[302, "powdenest"]], "Exponentials and logarithms": [[302, "exponentials-and-logarithms"]], "expand_log": [[302, "expand-log"]], "logcombine": [[302, "logcombine"]], "Special Functions": [[302, "special-functions"]], "rewrite": [[302, "rewrite"]], "expand_func": [[302, "expand-func"]], "hyperexpand": [[302, "hyperexpand"]], "combsimp": [[302, "combsimp"]], "gammasimp": [[302, "gammasimp"]], "Example: Continued Fractions": [[302, "example-continued-fractions"]], "A Note about Equations": [[303, "a-note-about-equations"]], "Solving Equations Algebraically": [[303, "solving-equations-algebraically"]], "Solving Differential Equations": [[303, "solving-differential-equations"]]}, "indexentries": {"antiderivative": [[14, "term-Antiderivative"]], "assumptions": [[14, "term-Assumptions"]], "atom": [[14, "term-Atom"]], "automatic simplification": [[14, "term-Automatic-Simplification"]], "basic": [[14, "term-Basic"]], "boolean": [[14, "term-Boolean"]], "bound symbols": [[14, "term-Bound-symbols"]], "canonical form": [[14, "term-Canonical-Form"]], "canonicalize": [[14, "term-Canonicalize"]], "code generation": [[14, "term-Code-Generation"]], "core": [[14, "term-Core"]], "dummy": [[14, "term-Dummy"]], "equation": [[14, "term-Equation"]], "evaluate": [[14, "term-Evaluate"]], "expr": [[14, "term-Expr"]], "expression": [[14, "term-Expression"]], "expression tree": [[14, "term-Expression-Tree"]], "free symbols": [[14, "term-Free-symbols"]], "function": [[14, "term-Function"]], "function (class)": [[14, "term-Function-class"]], "immutable": [[14, "term-Immutable"]], "interactive": [[14, "term-Interactive"]], "kind": [[14, "term-Kind"]], "matrix": [[14, "term-Matrix"]], "number": [[14, "term-Number"]], "numeric": [[14, "term-Numeric"]], "polys": [[14, "term-Polys"]], "printing": [[14, "term-Printing"]], "relational": [[14, "term-Relational"]], "s": [[14, "term-S"]], "simplification": [[14, "term-Simplification"]], "solve": [[14, "term-Solve"]], "solvers": [[14, "term-Solvers"]], "structural equality": [[14, "term-Structural-Equality"]], "subexpression": [[14, "term-Subexpression"]], "substitution": [[14, "term-Substitution"]], "symbol": [[14, "term-Symbol"]], "symbolic": [[14, "term-Symbolic"]], "three-valued logic": [[14, "term-Three-valued-logic"]], "undefined function": [[14, "term-Undefined-Function"]], "unevaluated": [[14, "term-Unevaluated"]], "_eval_*": [[14, "term-_eval_"]], "args": [[14, "term-args"]], "evalf": [[14, "term-evalf"]], "func": [[14, "term-func"]], "is_*": [[14, "term-is_"]], "isympy": [[14, "term-isympy"]], "lambdify()": [[14, "term-lambdify"]], "lamda": [[14, "term-lamda"]], "mpmath": [[14, "term-mpmath"]], "oo": [[14, "term-oo"]], "sympify()": [[14, "term-sympify"]], "zoo": [[14, "term-zoo"]], "module": [[15, "module-sympy.simplify.simplify"], [38, "module-sympy"], [40, "module-sympy.abc"], [41, "module-sympy.algebras"], [42, "module-sympy.assumptions.ask"], [43, "module-sympy.assumptions.assume"], [44, "module-sympy.assumptions"], [45, "module-sympy.assumptions.predicates"], [46, "module-sympy.assumptions.refine"], [47, "module-sympy.calculus"], [47, "module-sympy.calculus.euler"], [47, "module-sympy.calculus.finite_diff"], [47, "module-sympy.calculus.singularities"], [47, "module-sympy.calculus.util"], [48, "module-sympy.categories"], [48, "module-sympy.categories.diagram_drawing"], [49, "module-sympy.codegen.algorithms"], [49, "module-sympy.codegen.approximations"], [49, "module-sympy.codegen.ast"], [49, "module-sympy.codegen.cfunctions"], [49, "module-sympy.codegen.cnodes"], [49, "module-sympy.codegen.cutils"], [49, "module-sympy.codegen.cxxnodes"], [49, "module-sympy.codegen.fnodes"], [49, "module-sympy.codegen.futils"], [49, "module-sympy.codegen.matrix_nodes"], [49, "module-sympy.codegen.pyutils"], [49, "module-sympy.codegen.rewriting"], [51, "module-sympy.combinatorics.galois"], [52, "module-sympy.combinatorics.graycode"], [53, "module-sympy.combinatorics.group_constructs"], [54, "module-sympy.combinatorics.group_numbers"], [56, "module-sympy.combinatorics.named_groups"], [57, "module-sympy.combinatorics.partitions"], [59, "module-sympy.combinatorics.perm_groups"], [60, "module-sympy.combinatorics.generators"], [60, "module-sympy.combinatorics.permutations"], [61, "module-sympy.combinatorics.polyhedron"], [62, "module-sympy.combinatorics.prufer"], [63, "module-sympy.combinatorics.subsets"], [64, "module-sympy.combinatorics.tensor_can"], [65, "module-sympy.combinatorics.testutil"], [66, "module-sympy.combinatorics.util"], [68, "module-sympy.core.add"], [68, "module-sympy.core.assumptions"], [68, "module-sympy.core.basic"], [68, "module-sympy.core.cache"], [68, "module-sympy.core.containers"], [68, "module-sympy.core.evalf"], [68, "module-sympy.core.expr"], [68, "module-sympy.core.exprtools"], [68, "module-sympy.core.function"], [68, "module-sympy.core.intfunc"], [68, "module-sympy.core.kind"], [68, "module-sympy.core.mod"], [68, "module-sympy.core.mul"], [68, "module-sympy.core.multidimensional"], [68, "module-sympy.core.numbers"], [68, "module-sympy.core.power"], [68, "module-sympy.core.random"], [68, "module-sympy.core.relational"], [68, "module-sympy.core.singleton"], [68, "module-sympy.core.symbol"], [68, "module-sympy.core.sympify"], [68, "module-sympy.core.traversal"], [69, "module-sympy.crypto.crypto"], [70, "module-sympy.diffgeom"], [71, "module-sympy.discrete"], [71, "module-sympy.discrete.convolutions"], [71, "module-sympy.discrete.transforms"], [75, "module-sympy.functions"], [76, "module-sympy.functions.special.bessel"], [76, "module-sympy.functions.special.beta_functions"], [76, "module-sympy.functions.special.elliptic_integrals"], [76, "module-sympy.functions.special.error_functions"], [76, "module-sympy.functions.special.gamma_functions"], [76, "module-sympy.functions.special.mathieu_functions"], [76, "module-sympy.functions.special.polynomials"], [76, "module-sympy.functions.special.singularity_functions"], [76, "module-sympy.functions.special.zeta_functions"], [77, "module-sympy.geometry.curve"], [78, "module-sympy.geometry.ellipse"], [79, "module-sympy.geometry.entity"], [81, "module-sympy.geometry.line"], [82, "module-sympy.geometry.plane"], [83, "module-sympy.geometry.point"], [84, "module-sympy.geometry.polygon"], [85, "module-sympy.geometry.util"], [88, "module-sympy.holonomic"], [93, "module-sympy.integrals.meijerint"], [93, "module-sympy.integrals.meijerint_doc"], [95, "module-sympy.integrals"], [95, "module-sympy.integrals.intpoly"], [95, "module-sympy.integrals.transforms"], [96, "module-sympy.interactive"], [96, "module-sympy.interactive.printing"], [96, "module-sympy.interactive.session"], [97, "module-sympy.liealgebras"], [98, "module-sympy.logic"], [98, "module-sympy.logic.inference"], [99, "module-sympy.matrices.common"], [101, "module-sympy.matrices.expressions"], [101, "module-sympy.matrices.expressions.blockmatrix"], [102, "module-sympy.matrices.immutable"], [103, "module-sympy.matrices"], [104, "module-sympy.matrices.matrices"], [106, "module-sympy.matrices.sparse"], [107, "module-sympy.matrices.sparsetools"], [108, "module-sympy.ntheory.bbp_pi"], [108, "module-sympy.ntheory.continued_fraction"], [108, "module-sympy.ntheory.digits"], [108, "module-sympy.ntheory.ecm"], [108, "module-sympy.ntheory.egyptian_fraction"], [108, "module-sympy.ntheory.factor_"], [108, "module-sympy.ntheory.generate"], [108, "module-sympy.ntheory.modular"], [108, "module-sympy.ntheory.multinomial"], [108, "module-sympy.ntheory.partitions_"], [108, "module-sympy.ntheory.primetest"], [108, "module-sympy.ntheory.qs"], [108, "module-sympy.ntheory.residue_ntheory"], [110, "module-sympy.parsing"], [110, "module-sympy.parsing.sym_expr"], [111, "module-sympy.physics.biomechanics.activation"], [112, "module-sympy.physics.biomechanics.curve"], [114, "module-sympy.physics.biomechanics.musculotendon"], [115, "module-sympy.physics.biomechanics"], [116, "module-sympy.physics.continuum_mechanics.beam"], [118, "module-sympy.physics.continuum_mechanics.cable"], [120, "module-sympy.physics.continuum_mechanics.truss"], [123, "module-sympy.physics.control"], [124, "module-sympy.physics.control.lti"], [125, "module-sympy.physics.hep.gamma_matrices"], [126, "module-sympy.physics.hydrogen"], [127, "module-sympy.physics.matrices"], [129, "module-sympy.physics.mechanics.actuator"], [130, "module-sympy.physics.mechanics.body"], [133, "module-sympy.physics.mechanics.joint"], [133, "module-sympy.physics.mechanics.jointsmethod"], [134, "module-sympy.physics.mechanics.kane"], [134, "module-sympy.physics.mechanics.lagrange"], [135, "module-sympy.physics.mechanics.linearize"], [137, "module-sympy.physics.mechanics.pathway"], [139, "module-sympy.physics.mechanics.system"], [140, "module-sympy.physics.mechanics.wrapping_geometry"], [151, "module-sympy.physics.mechanics"], [160, "module-sympy.physics.optics.gaussopt"], [162, "module-sympy.physics.optics.medium"], [163, "module-sympy.physics.optics.polarization"], [164, "module-sympy.physics.optics.utils"], [165, "module-sympy.physics.optics.waves"], [166, "module-sympy.physics.paulialgebra"], [167, "module-sympy.physics.qho_1d"], [168, "module-sympy.physics.quantum.anticommutator"], [169, "module-sympy.physics.quantum.cartesian"], [170, "module-sympy.physics.quantum.cg"], [171, "module-sympy.physics.quantum.circuitplot"], [172, "module-sympy.physics.quantum.commutator"], [173, "module-sympy.physics.quantum.constants"], [174, "module-sympy.physics.quantum.dagger"], [175, "module-sympy.physics.quantum.gate"], [176, "module-sympy.physics.quantum.grover"], [177, "module-sympy.physics.quantum.hilbert"], [179, "module-sympy.physics.quantum.innerproduct"], [180, "module-sympy.physics.quantum.operator"], [181, "module-sympy.physics.quantum.operatorset"], [182, "module-sympy.physics.quantum.piab"], [183, "module-sympy.physics.quantum.qapply"], [184, "module-sympy.physics.quantum.qft"], [185, "module-sympy.physics.quantum.qubit"], [186, "module-sympy.physics.quantum.represent"], [187, "module-sympy.physics.quantum.shor"], [188, "module-sympy.physics.quantum.spin"], [189, "module-sympy.physics.quantum.state"], [190, "module-sympy.physics.quantum.tensorproduct"], [191, "module-sympy.physics.secondquant"], [192, "module-sympy.physics.sho"], [193, "module-sympy.physics.units.dimensions"], [197, "module-sympy.physics.units.prefixes"], [198, "module-sympy.physics.units.quantities"], [198, "module-sympy.physics.units.util"], [199, "module-sympy.physics.units.unitsystem"], [205, "module-sympy.physics.vector.functions"], [205, "module-sympy.physics.vector.point"], [208, "module-sympy.physics.vector"], [211, "module-sympy.physics.wigner"], [212, "module-sympy.plotting.plot"], [212, "module-sympy.plotting.pygletplot"], [215, "module-sympy.polys.matrices._dfm"], [215, "module-sympy.polys.matrices._typing"], [215, "module-sympy.polys.matrices.ddm"], [215, "module-sympy.polys.matrices.dense"], [215, "module-sympy.polys.matrices.domainmatrix"], [215, "module-sympy.polys.matrices.sdm"], [219, "module-sympy.polys.polyconfig"], [219, "module-sympy.polys.polyoptions"], [221, "module-sympy.polys.numberfields.modules"], [221, "module-sympy.polys.numberfields.subfield"], [222, "module-sympy.polys"], [224, "module-sympy.polys.solvers"], [226, "module-sympy.printing.aesaracode"], [226, "module-sympy.printing.c"], [226, "module-sympy.printing.codeprinter"], [226, "module-sympy.printing.conventions"], [226, "module-sympy.printing.cxx"], [226, "module-sympy.printing.fortran"], [226, "module-sympy.printing.gtk"], [226, "module-sympy.printing.jscode"], [226, "module-sympy.printing.julia"], [226, "module-sympy.printing.lambdarepr"], [226, "module-sympy.printing.latex"], [226, "module-sympy.printing.maple"], [226, "module-sympy.printing.mathematica"], [226, "module-sympy.printing.mathml"], [226, "module-sympy.printing.octave"], [226, "module-sympy.printing.precedence"], [226, "module-sympy.printing.pretty"], [226, "module-sympy.printing.pretty.pretty"], [226, "module-sympy.printing.pretty.pretty_symbology"], [226, "module-sympy.printing.pretty.stringpict"], [226, "module-sympy.printing.preview"], [226, "module-sympy.printing.printer"], [226, "module-sympy.printing.pycode"], [226, "module-sympy.printing.python"], [226, "module-sympy.printing.rcode"], [226, "module-sympy.printing.repr"], [226, "module-sympy.printing.rust"], [226, "module-sympy.printing.smtlib"], [226, "module-sympy.printing.str"], [226, "module-sympy.printing.tree"], [234, "module-sympy.sets.conditionset"], [234, "module-sympy.sets.fancysets"], [234, "module-sympy.sets.powerset"], [234, "module-sympy.sets.sets"], [236, "module-sympy.simplify.hyperexpand_doc"], [238, "module-sympy.simplify.combsimp"], [238, "module-sympy.simplify.cse_main"], [238, "module-sympy.simplify.epathtools"], [238, "module-sympy.simplify.hyperexpand"], [238, "module-sympy.simplify.powsimp"], [238, "module-sympy.simplify.radsimp"], [238, "module-sympy.simplify.ratsimp"], [238, "module-sympy.simplify.sqrtdenest"], [238, "module-sympy.simplify.trigsimp"], [241, "module-sympy.solvers.inequalities"], [242, "module-sympy.solvers.ode"], [242, "module-sympy.solvers.ode.ode"], [243, "module-sympy.solvers.pde"], [244, "module-sympy.solvers"], [244, "module-sympy.solvers.recurr"], [244, "module-sympy.solvers.simplex"], [245, "module-sympy.solvers.solveset"], [246, "module-sympy.stats"], [246, "module-sympy.stats.crv"], [246, "module-sympy.stats.crv_types"], [246, "module-sympy.stats.frv"], [246, "module-sympy.stats.frv_types"], [246, "module-sympy.stats.rv"], [247, "module-sympy.tensor.array"], [248, "module-sympy.tensor.array.expressions"], [249, "module-sympy.tensor"], [250, "module-sympy.tensor.index_methods"], [251, "module-sympy.tensor.indexed"], [252, "module-sympy.tensor.tensor"], [253, "module-sympy.tensor.toperators"], [254, "module-sympy.testing"], [255, "module-sympy.testing.pytest"], [256, "module-sympy.testing.randtest"], [257, "module-sympy.testing.runtests"], [258, "module-sympy.utilities.autowrap"], [259, "module-sympy.utilities.codegen"], [260, "module-sympy.utilities.decorator"], [261, "module-sympy.utilities.enumerative"], [262, "module-sympy.utilities.exceptions"], [263, "module-sympy.utilities"], [264, "module-sympy.utilities.iterables"], [265, "module-sympy.utilities.lambdify"], [266, "module-sympy.utilities.memoization"], [267, "module-sympy.utilities.misc"], [268, "module-sympy.utilities.source"], [269, "module-sympy.utilities.timeutils"], [278, "module-sympy.vector"], [287, "module-sympy.physics"]], "sympy.simplify.simplify": [[15, "module-sympy.simplify.simplify"]], "sympy": [[38, "module-sympy"]], "sympy.abc": [[40, "module-sympy.abc"]], "quaternion (class in sympy.algebras)": [[41, "sympy.algebras.Quaternion"]], "add() (sympy.algebras.quaternion method)": [[41, "sympy.algebras.Quaternion.add"]], "angle() (sympy.algebras.quaternion method)": [[41, "sympy.algebras.Quaternion.angle"]], "arc_coplanar() (sympy.algebras.quaternion method)": [[41, "sympy.algebras.Quaternion.arc_coplanar"]], "axis() (sympy.algebras.quaternion method)": [[41, "sympy.algebras.Quaternion.axis"]], "exp() (sympy.algebras.quaternion method)": [[41, "sympy.algebras.Quaternion.exp"]], "from_matrix() (sympy.algebras.quaternion class method)": [[41, "sympy.algebras.Quaternion.from_Matrix"]], "from_axis_angle() (sympy.algebras.quaternion class method)": [[41, "sympy.algebras.Quaternion.from_axis_angle"]], "from_euler() (sympy.algebras.quaternion class method)": [[41, "sympy.algebras.Quaternion.from_euler"]], "from_rotation_matrix() (sympy.algebras.quaternion class method)": [[41, "sympy.algebras.Quaternion.from_rotation_matrix"]], "index_vector() (sympy.algebras.quaternion method)": [[41, "sympy.algebras.Quaternion.index_vector"]], "integrate() (sympy.algebras.quaternion method)": [[41, "sympy.algebras.Quaternion.integrate"]], "inverse() (sympy.algebras.quaternion method)": [[41, "sympy.algebras.Quaternion.inverse"]], "is_pure() (sympy.algebras.quaternion method)": [[41, "sympy.algebras.Quaternion.is_pure"]], "is_zero_quaternion() (sympy.algebras.quaternion method)": [[41, "sympy.algebras.Quaternion.is_zero_quaternion"]], "mensor() (sympy.algebras.quaternion method)": [[41, "sympy.algebras.Quaternion.mensor"]], "mul() (sympy.algebras.quaternion method)": [[41, "sympy.algebras.Quaternion.mul"]], "norm() (sympy.algebras.quaternion method)": [[41, "sympy.algebras.Quaternion.norm"]], "normalize() (sympy.algebras.quaternion method)": [[41, "sympy.algebras.Quaternion.normalize"]], "orthogonal() (sympy.algebras.quaternion method)": [[41, "sympy.algebras.Quaternion.orthogonal"]], "parallel() (sympy.algebras.quaternion method)": [[41, "sympy.algebras.Quaternion.parallel"]], "pow() (sympy.algebras.quaternion method)": [[41, "sympy.algebras.Quaternion.pow"]], "pow_cos_sin() (sympy.algebras.quaternion method)": [[41, "sympy.algebras.Quaternion.pow_cos_sin"]], "product_matrix_left (sympy.algebras.quaternion property)": [[41, "sympy.algebras.Quaternion.product_matrix_left"]], "product_matrix_right (sympy.algebras.quaternion property)": [[41, "sympy.algebras.Quaternion.product_matrix_right"]], "rotate_point() (sympy.algebras.quaternion static method)": [[41, "sympy.algebras.Quaternion.rotate_point"]], "scalar_part() (sympy.algebras.quaternion method)": [[41, "sympy.algebras.Quaternion.scalar_part"]], "set_norm() (sympy.algebras.quaternion method)": [[41, "sympy.algebras.Quaternion.set_norm"]], "sympy.algebras": [[41, "module-sympy.algebras"]], "to_matrix() (sympy.algebras.quaternion method)": [[41, "sympy.algebras.Quaternion.to_Matrix"]], "to_axis_angle() (sympy.algebras.quaternion method)": [[41, "sympy.algebras.Quaternion.to_axis_angle"]], "to_euler() (sympy.algebras.quaternion method)": [[41, "sympy.algebras.Quaternion.to_euler"]], "to_rotation_matrix() (sympy.algebras.quaternion method)": [[41, "sympy.algebras.Quaternion.to_rotation_matrix"]], "vector_coplanar() (sympy.algebras.quaternion class method)": [[41, "sympy.algebras.Quaternion.vector_coplanar"]], "vector_part() (sympy.algebras.quaternion method)": [[41, "sympy.algebras.Quaternion.vector_part"]], "assumptionkeys (class in sympy.assumptions.ask)": [[42, "sympy.assumptions.ask.AssumptionKeys"]], "ask() (in module sympy.assumptions.ask)": [[42, "sympy.assumptions.ask.ask"]], "register_handler() (in module sympy.assumptions.ask)": [[42, "sympy.assumptions.ask.register_handler"]], "remove_handler() (in module sympy.assumptions.ask)": [[42, "sympy.assumptions.ask.remove_handler"]], "sympy.assumptions.ask": [[42, "module-sympy.assumptions.ask"]], "appliedpredicate (class in sympy.assumptions.assume)": [[43, "sympy.assumptions.assume.AppliedPredicate"]], "assumptionscontext (class in sympy.assumptions.assume)": [[43, "sympy.assumptions.assume.AssumptionsContext"]], "predicate (class in sympy.assumptions.assume)": [[43, "sympy.assumptions.assume.Predicate"]], "undefinedpredicate (class in sympy.assumptions.assume)": [[43, "sympy.assumptions.assume.UndefinedPredicate"]], "add() (sympy.assumptions.assume.assumptionscontext method)": [[43, "sympy.assumptions.assume.AssumptionsContext.add"]], "arg (sympy.assumptions.assume.appliedpredicate property)": [[43, "sympy.assumptions.assume.AppliedPredicate.arg"]], "arguments (sympy.assumptions.assume.appliedpredicate property)": [[43, "sympy.assumptions.assume.AppliedPredicate.arguments"]], "assuming() (in module sympy.assumptions.assume)": [[43, "sympy.assumptions.assume.assuming"]], "eval() (sympy.assumptions.assume.predicate method)": [[43, "sympy.assumptions.assume.Predicate.eval"]], "function (sympy.assumptions.assume.appliedpredicate property)": [[43, "sympy.assumptions.assume.AppliedPredicate.function"]], "handler (sympy.assumptions.assume.predicate attribute)": [[43, "sympy.assumptions.assume.Predicate.handler"]], "register() (sympy.assumptions.assume.predicate class method)": [[43, "sympy.assumptions.assume.Predicate.register"]], "register_many() (sympy.assumptions.assume.predicate class method)": [[43, "sympy.assumptions.assume.Predicate.register_many"]], "sympy.assumptions.assume": [[43, "module-sympy.assumptions.assume"]], "sympy.assumptions": [[44, "module-sympy.assumptions"]], "algebraichandler (sympy.assumptions.predicates.sets.algebraicpredicate attribute)": [[45, "sympy.assumptions.predicates.sets.AlgebraicPredicate.AlgebraicHandler"]], "algebraicpredicate (class in sympy.assumptions.predicates.sets)": [[45, "sympy.assumptions.predicates.sets.AlgebraicPredicate"]], "antihermitianpredicate (class in sympy.assumptions.predicates.sets)": [[45, "sympy.assumptions.predicates.sets.AntihermitianPredicate"]], "commutativepredicate (class in sympy.assumptions.predicates.common)": [[45, "sympy.assumptions.predicates.common.CommutativePredicate"]], "complexelementspredicate (class in sympy.assumptions.predicates.matrices)": [[45, "sympy.assumptions.predicates.matrices.ComplexElementsPredicate"]], "complexpredicate (class in sympy.assumptions.predicates.sets)": [[45, "sympy.assumptions.predicates.sets.ComplexPredicate"]], "compositepredicate (class in sympy.assumptions.predicates.ntheory)": [[45, "sympy.assumptions.predicates.ntheory.CompositePredicate"]], "diagonalpredicate (class in sympy.assumptions.predicates.matrices)": [[45, "sympy.assumptions.predicates.matrices.DiagonalPredicate"]], "evenpredicate (class in sympy.assumptions.predicates.ntheory)": [[45, "sympy.assumptions.predicates.ntheory.EvenPredicate"]], "extendedrealpredicate (class in sympy.assumptions.predicates.sets)": [[45, "sympy.assumptions.predicates.sets.ExtendedRealPredicate"]], "finitepredicate (class in sympy.assumptions.predicates.calculus)": [[45, "sympy.assumptions.predicates.calculus.FinitePredicate"]], "fullrankpredicate (class in sympy.assumptions.predicates.matrices)": [[45, "sympy.assumptions.predicates.matrices.FullRankPredicate"]], "hermitianpredicate (class in sympy.assumptions.predicates.sets)": [[45, "sympy.assumptions.predicates.sets.HermitianPredicate"]], "imaginarypredicate (class in sympy.assumptions.predicates.sets)": [[45, "sympy.assumptions.predicates.sets.ImaginaryPredicate"]], "infinitepredicate (class in sympy.assumptions.predicates.calculus)": [[45, "sympy.assumptions.predicates.calculus.InfinitePredicate"]], "integerelementspredicate (class in sympy.assumptions.predicates.matrices)": [[45, "sympy.assumptions.predicates.matrices.IntegerElementsPredicate"]], "integerpredicate (class in sympy.assumptions.predicates.sets)": [[45, "sympy.assumptions.predicates.sets.IntegerPredicate"]], "invertiblepredicate (class in sympy.assumptions.predicates.matrices)": [[45, "sympy.assumptions.predicates.matrices.InvertiblePredicate"]], "irrationalpredicate (class in sympy.assumptions.predicates.sets)": [[45, "sympy.assumptions.predicates.sets.IrrationalPredicate"]], "istruepredicate (class in sympy.assumptions.predicates.common)": [[45, "sympy.assumptions.predicates.common.IsTruePredicate"]], "lowertriangularpredicate (class in sympy.assumptions.predicates.matrices)": [[45, "sympy.assumptions.predicates.matrices.LowerTriangularPredicate"]], "negativepredicate (class in sympy.assumptions.predicates.order)": [[45, "sympy.assumptions.predicates.order.NegativePredicate"]], "nonnegativepredicate (class in sympy.assumptions.predicates.order)": [[45, "sympy.assumptions.predicates.order.NonNegativePredicate"]], "nonpositivepredicate (class in sympy.assumptions.predicates.order)": [[45, "sympy.assumptions.predicates.order.NonPositivePredicate"]], "nonzeropredicate (class in sympy.assumptions.predicates.order)": [[45, "sympy.assumptions.predicates.order.NonZeroPredicate"]], "normalpredicate (class in sympy.assumptions.predicates.matrices)": [[45, "sympy.assumptions.predicates.matrices.NormalPredicate"]], "oddpredicate (class in sympy.assumptions.predicates.ntheory)": [[45, "sympy.assumptions.predicates.ntheory.OddPredicate"]], "orthogonalpredicate (class in sympy.assumptions.predicates.matrices)": [[45, "sympy.assumptions.predicates.matrices.OrthogonalPredicate"]], "positivedefinitepredicate (class in sympy.assumptions.predicates.matrices)": [[45, "sympy.assumptions.predicates.matrices.PositiveDefinitePredicate"]], "positivepredicate (class in sympy.assumptions.predicates.order)": [[45, "sympy.assumptions.predicates.order.PositivePredicate"]], "primepredicate (class in sympy.assumptions.predicates.ntheory)": [[45, "sympy.assumptions.predicates.ntheory.PrimePredicate"]], "rationalpredicate (class in sympy.assumptions.predicates.sets)": [[45, "sympy.assumptions.predicates.sets.RationalPredicate"]], "realelementspredicate (class in sympy.assumptions.predicates.matrices)": [[45, "sympy.assumptions.predicates.matrices.RealElementsPredicate"]], "realpredicate (class in sympy.assumptions.predicates.sets)": [[45, "sympy.assumptions.predicates.sets.RealPredicate"]], "singularpredicate (class in sympy.assumptions.predicates.matrices)": [[45, "sympy.assumptions.predicates.matrices.SingularPredicate"]], "squarepredicate (class in sympy.assumptions.predicates.matrices)": [[45, "sympy.assumptions.predicates.matrices.SquarePredicate"]], "symmetricpredicate (class in sympy.assumptions.predicates.matrices)": [[45, "sympy.assumptions.predicates.matrices.SymmetricPredicate"]], "transcendentalpredicate (class in sympy.assumptions.predicates.sets)": [[45, "sympy.assumptions.predicates.sets.TranscendentalPredicate"]], "triangularpredicate (class in sympy.assumptions.predicates.matrices)": [[45, "sympy.assumptions.predicates.matrices.TriangularPredicate"]], "unittriangularpredicate (class in sympy.assumptions.predicates.matrices)": [[45, "sympy.assumptions.predicates.matrices.UnitTriangularPredicate"]], "unitarypredicate (class in sympy.assumptions.predicates.matrices)": [[45, "sympy.assumptions.predicates.matrices.UnitaryPredicate"]], "uppertriangularpredicate (class in sympy.assumptions.predicates.matrices)": [[45, "sympy.assumptions.predicates.matrices.UpperTriangularPredicate"]], "zeropredicate (class in sympy.assumptions.predicates.order)": [[45, "sympy.assumptions.predicates.order.ZeroPredicate"]], "handler (sympy.assumptions.predicates.calculus.finitepredicate attribute)": [[45, "sympy.assumptions.predicates.calculus.FinitePredicate.handler"]], "handler (sympy.assumptions.predicates.calculus.infinitepredicate attribute)": [[45, "sympy.assumptions.predicates.calculus.InfinitePredicate.handler"]], "handler (sympy.assumptions.predicates.common.commutativepredicate attribute)": [[45, "sympy.assumptions.predicates.common.CommutativePredicate.handler"]], "handler (sympy.assumptions.predicates.common.istruepredicate attribute)": [[45, "sympy.assumptions.predicates.common.IsTruePredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.complexelementspredicate attribute)": [[45, "sympy.assumptions.predicates.matrices.ComplexElementsPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.diagonalpredicate attribute)": [[45, "sympy.assumptions.predicates.matrices.DiagonalPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.fullrankpredicate attribute)": [[45, "sympy.assumptions.predicates.matrices.FullRankPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.integerelementspredicate attribute)": [[45, "sympy.assumptions.predicates.matrices.IntegerElementsPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.invertiblepredicate attribute)": [[45, "sympy.assumptions.predicates.matrices.InvertiblePredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.lowertriangularpredicate attribute)": [[45, "sympy.assumptions.predicates.matrices.LowerTriangularPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.normalpredicate attribute)": [[45, "sympy.assumptions.predicates.matrices.NormalPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.orthogonalpredicate attribute)": [[45, "sympy.assumptions.predicates.matrices.OrthogonalPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.positivedefinitepredicate attribute)": [[45, "sympy.assumptions.predicates.matrices.PositiveDefinitePredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.realelementspredicate attribute)": [[45, "sympy.assumptions.predicates.matrices.RealElementsPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.singularpredicate attribute)": [[45, "sympy.assumptions.predicates.matrices.SingularPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.squarepredicate attribute)": [[45, "sympy.assumptions.predicates.matrices.SquarePredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.symmetricpredicate attribute)": [[45, "sympy.assumptions.predicates.matrices.SymmetricPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.triangularpredicate attribute)": [[45, "sympy.assumptions.predicates.matrices.TriangularPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.unittriangularpredicate attribute)": [[45, "sympy.assumptions.predicates.matrices.UnitTriangularPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.unitarypredicate attribute)": [[45, "sympy.assumptions.predicates.matrices.UnitaryPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.uppertriangularpredicate attribute)": [[45, "sympy.assumptions.predicates.matrices.UpperTriangularPredicate.handler"]], "handler (sympy.assumptions.predicates.ntheory.compositepredicate attribute)": [[45, "sympy.assumptions.predicates.ntheory.CompositePredicate.handler"]], "handler (sympy.assumptions.predicates.ntheory.evenpredicate attribute)": [[45, "sympy.assumptions.predicates.ntheory.EvenPredicate.handler"]], "handler (sympy.assumptions.predicates.ntheory.oddpredicate attribute)": [[45, "sympy.assumptions.predicates.ntheory.OddPredicate.handler"]], "handler (sympy.assumptions.predicates.ntheory.primepredicate attribute)": [[45, "sympy.assumptions.predicates.ntheory.PrimePredicate.handler"]], "handler (sympy.assumptions.predicates.order.negativepredicate attribute)": [[45, "sympy.assumptions.predicates.order.NegativePredicate.handler"]], "handler (sympy.assumptions.predicates.order.nonnegativepredicate attribute)": [[45, "sympy.assumptions.predicates.order.NonNegativePredicate.handler"]], "handler (sympy.assumptions.predicates.order.nonpositivepredicate attribute)": [[45, "sympy.assumptions.predicates.order.NonPositivePredicate.handler"]], "handler (sympy.assumptions.predicates.order.nonzeropredicate attribute)": [[45, "sympy.assumptions.predicates.order.NonZeroPredicate.handler"]], "handler (sympy.assumptions.predicates.order.positivepredicate attribute)": [[45, "sympy.assumptions.predicates.order.PositivePredicate.handler"]], "handler (sympy.assumptions.predicates.order.zeropredicate attribute)": [[45, "sympy.assumptions.predicates.order.ZeroPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.algebraicpredicate attribute)": [[45, "sympy.assumptions.predicates.sets.AlgebraicPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.antihermitianpredicate attribute)": [[45, "sympy.assumptions.predicates.sets.AntihermitianPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.complexpredicate attribute)": [[45, "sympy.assumptions.predicates.sets.ComplexPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.extendedrealpredicate attribute)": [[45, "sympy.assumptions.predicates.sets.ExtendedRealPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.hermitianpredicate attribute)": [[45, "sympy.assumptions.predicates.sets.HermitianPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.imaginarypredicate attribute)": [[45, "sympy.assumptions.predicates.sets.ImaginaryPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.integerpredicate attribute)": [[45, "sympy.assumptions.predicates.sets.IntegerPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.irrationalpredicate attribute)": [[45, "sympy.assumptions.predicates.sets.IrrationalPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.rationalpredicate attribute)": [[45, "sympy.assumptions.predicates.sets.RationalPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.realpredicate attribute)": [[45, "sympy.assumptions.predicates.sets.RealPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.transcendentalpredicate attribute)": [[45, "sympy.assumptions.predicates.sets.TranscendentalPredicate.handler"]], "sympy.assumptions.predicates": [[45, "module-sympy.assumptions.predicates"]], "refine() (in module sympy.assumptions.refine)": [[46, "sympy.assumptions.refine.refine"]], "refine_pow() (in module sympy.assumptions.refine)": [[46, "sympy.assumptions.refine.refine_Pow"]], "refine_abs() (in module sympy.assumptions.refine)": [[46, "sympy.assumptions.refine.refine_abs"]], "refine_arg() (in module sympy.assumptions.refine)": [[46, "sympy.assumptions.refine.refine_arg"]], "refine_atan2() (in module sympy.assumptions.refine)": [[46, "sympy.assumptions.refine.refine_atan2"]], "refine_im() (in module sympy.assumptions.refine)": [[46, "sympy.assumptions.refine.refine_im"]], "refine_matrixelement() (in module sympy.assumptions.refine)": [[46, "sympy.assumptions.refine.refine_matrixelement"]], "refine_re() (in module sympy.assumptions.refine)": [[46, "sympy.assumptions.refine.refine_re"]], "refine_sign() (in module sympy.assumptions.refine)": [[46, "sympy.assumptions.refine.refine_sign"]], "sympy.assumptions.refine": [[46, "module-sympy.assumptions.refine"]], "apply_finite_diff() (in module sympy.calculus.finite_diff)": [[47, "sympy.calculus.finite_diff.apply_finite_diff"]], "continuous_domain() (in module sympy.calculus.util)": [[47, "sympy.calculus.util.continuous_domain"]], "differentiate_finite() (in module sympy.calculus.finite_diff)": [[47, "sympy.calculus.finite_diff.differentiate_finite"]], "euler_equations() (in module sympy.calculus.euler)": [[47, "sympy.calculus.euler.euler_equations"]], "finite_diff_weights() (in module sympy.calculus.finite_diff)": [[47, "sympy.calculus.finite_diff.finite_diff_weights"]], "function_range() (in module sympy.calculus.util)": [[47, "sympy.calculus.util.function_range"]], "is_convex() (in module sympy.calculus.util)": [[47, "sympy.calculus.util.is_convex"]], "is_decreasing() (in module sympy.calculus.singularities)": [[47, "sympy.calculus.singularities.is_decreasing"]], "is_increasing() (in module sympy.calculus.singularities)": [[47, "sympy.calculus.singularities.is_increasing"]], "is_monotonic() (in module sympy.calculus.singularities)": [[47, "sympy.calculus.singularities.is_monotonic"]], "is_strictly_decreasing() (in module sympy.calculus.singularities)": [[47, "sympy.calculus.singularities.is_strictly_decreasing"]], "is_strictly_increasing() (in module sympy.calculus.singularities)": [[47, "sympy.calculus.singularities.is_strictly_increasing"]], "lcim() (in module sympy.calculus.util)": [[47, "sympy.calculus.util.lcim"]], "maximum() (in module sympy.calculus.util)": [[47, "sympy.calculus.util.maximum"]], "minimum() (in module sympy.calculus.util)": [[47, "sympy.calculus.util.minimum"]], "monotonicity_helper() (in module sympy.calculus.singularities)": [[47, "sympy.calculus.singularities.monotonicity_helper"]], "not_empty_in() (in module sympy.calculus.util)": [[47, "sympy.calculus.util.not_empty_in"]], "periodicity() (in module sympy.calculus.util)": [[47, "sympy.calculus.util.periodicity"]], "singularities() (in module sympy.calculus.singularities)": [[47, "sympy.calculus.singularities.singularities"]], "stationary_points() (in module sympy.calculus.util)": [[47, "sympy.calculus.util.stationary_points"]], "sympy.calculus": [[47, "module-sympy.calculus"]], "sympy.calculus.euler": [[47, "module-sympy.calculus.euler"]], "sympy.calculus.finite_diff": [[47, "module-sympy.calculus.finite_diff"]], "sympy.calculus.singularities": [[47, "module-sympy.calculus.singularities"]], "sympy.calculus.util": [[47, "module-sympy.calculus.util"]], "arrowstringdescription (class in sympy.categories.diagram_drawing)": [[48, "sympy.categories.diagram_drawing.ArrowStringDescription"]], "category (class in sympy.categories)": [[48, "sympy.categories.Category"]], "compositemorphism (class in sympy.categories)": [[48, "sympy.categories.CompositeMorphism"]], "diagram (class in sympy.categories)": [[48, "sympy.categories.Diagram"]], "diagramgrid (class in sympy.categories.diagram_drawing)": [[48, "sympy.categories.diagram_drawing.DiagramGrid"]], "identitymorphism (class in sympy.categories)": [[48, "sympy.categories.IdentityMorphism"]], "morphism (class in sympy.categories)": [[48, "sympy.categories.Morphism"]], "namedmorphism (class in sympy.categories)": [[48, "sympy.categories.NamedMorphism"]], "object (class in sympy.categories)": [[48, "sympy.categories.Object"]], "xypicdiagramdrawer (class in sympy.categories.diagram_drawing)": [[48, "sympy.categories.diagram_drawing.XypicDiagramDrawer"]], "codomain (sympy.categories.compositemorphism property)": [[48, "sympy.categories.CompositeMorphism.codomain"]], "codomain (sympy.categories.morphism property)": [[48, "sympy.categories.Morphism.codomain"]], "commutative_diagrams (sympy.categories.category property)": [[48, "sympy.categories.Category.commutative_diagrams"]], "components (sympy.categories.compositemorphism property)": [[48, "sympy.categories.CompositeMorphism.components"]], "compose() (sympy.categories.morphism method)": [[48, "sympy.categories.Morphism.compose"]], "conclusions (sympy.categories.diagram property)": [[48, "sympy.categories.Diagram.conclusions"]], "domain (sympy.categories.compositemorphism property)": [[48, "sympy.categories.CompositeMorphism.domain"]], "domain (sympy.categories.morphism property)": [[48, "sympy.categories.Morphism.domain"]], "draw() (sympy.categories.diagram_drawing.xypicdiagramdrawer method)": [[48, "sympy.categories.diagram_drawing.XypicDiagramDrawer.draw"]], "flatten() (sympy.categories.compositemorphism method)": [[48, "sympy.categories.CompositeMorphism.flatten"]], "height (sympy.categories.diagram_drawing.diagramgrid property)": [[48, "sympy.categories.diagram_drawing.DiagramGrid.height"]], "hom() (sympy.categories.diagram method)": [[48, "sympy.categories.Diagram.hom"]], "is_subdiagram() (sympy.categories.diagram method)": [[48, "sympy.categories.Diagram.is_subdiagram"]], "morphisms (sympy.categories.diagram_drawing.diagramgrid property)": [[48, "sympy.categories.diagram_drawing.DiagramGrid.morphisms"]], "name (sympy.categories.category property)": [[48, "sympy.categories.Category.name"]], "name (sympy.categories.namedmorphism property)": [[48, "sympy.categories.NamedMorphism.name"]], "objects (sympy.categories.category property)": [[48, "sympy.categories.Category.objects"]], "objects (sympy.categories.diagram property)": [[48, "sympy.categories.Diagram.objects"]], "premises (sympy.categories.diagram property)": [[48, "sympy.categories.Diagram.premises"]], "preview_diagram() (in module sympy.categories.diagram_drawing)": [[48, "sympy.categories.diagram_drawing.preview_diagram"]], "subdiagram_from_objects() (sympy.categories.diagram method)": [[48, "sympy.categories.Diagram.subdiagram_from_objects"]], "sympy.categories": [[48, "module-sympy.categories"]], "sympy.categories.diagram_drawing": [[48, "module-sympy.categories.diagram_drawing"]], "width (sympy.categories.diagram_drawing.diagramgrid property)": [[48, "sympy.categories.diagram_drawing.DiagramGrid.width"]], "xypic_draw_diagram() (in module sympy.categories.diagram_drawing)": [[48, "sympy.categories.diagram_drawing.xypic_draw_diagram"]], "arrayconstructor (class in sympy.codegen.fnodes)": [[49, "sympy.codegen.fnodes.ArrayConstructor"]], "assignment (class in sympy.codegen.ast)": [[49, "sympy.codegen.ast.Assignment"]], "assignmentbase (class in sympy.codegen.ast)": [[49, "sympy.codegen.ast.AssignmentBase"]], "attribute (class in sympy.codegen.ast)": [[49, "sympy.codegen.ast.Attribute"]], "augmentedassignment (class in sympy.codegen.ast)": [[49, "sympy.codegen.ast.AugmentedAssignment"]], "breaktoken (class in sympy.codegen.ast)": [[49, "sympy.codegen.ast.BreakToken"]], "cbrt (class in sympy.codegen.cfunctions)": [[49, "sympy.codegen.cfunctions.Cbrt"]], "codeblock (class in sympy.codegen.ast)": [[49, "sympy.codegen.ast.CodeBlock"]], "commaoperator (class in sympy.codegen.cnodes)": [[49, "sympy.codegen.cnodes.CommaOperator"]], "comment (class in sympy.codegen.ast)": [[49, "sympy.codegen.ast.Comment"]], "complextype (class in sympy.codegen.ast)": [[49, "sympy.codegen.ast.ComplexType"]], "continuetoken (class in sympy.codegen.ast)": [[49, "sympy.codegen.ast.ContinueToken"]], "declaration (class in sympy.codegen.ast)": [[49, "sympy.codegen.ast.Declaration"]], "do (class in sympy.codegen.fnodes)": [[49, "sympy.codegen.fnodes.Do"]], "element (class in sympy.codegen.ast)": [[49, "sympy.codegen.ast.Element"]], "extent (class in sympy.codegen.fnodes)": [[49, "sympy.codegen.fnodes.Extent"]], "floatbasetype (class in sympy.codegen.ast)": [[49, "sympy.codegen.ast.FloatBaseType"]], "floattype (class in sympy.codegen.ast)": [[49, "sympy.codegen.ast.FloatType"]], "for (class in sympy.codegen.ast)": [[49, "sympy.codegen.ast.For"]], "fortranreturn (class in sympy.codegen.fnodes)": [[49, "sympy.codegen.fnodes.FortranReturn"]], "funcminusoneoptim (class in sympy.codegen.rewriting)": [[49, "sympy.codegen.rewriting.FuncMinusOneOptim"]], "functioncall (class in sympy.codegen.ast)": [[49, "sympy.codegen.ast.FunctionCall"]], "functiondefinition (class in sympy.codegen.ast)": [[49, "sympy.codegen.ast.FunctionDefinition"]], "functionprototype (class in sympy.codegen.ast)": [[49, "sympy.codegen.ast.FunctionPrototype"]], "goto (class in sympy.codegen.fnodes)": [[49, "sympy.codegen.fnodes.GoTo"]], "implieddoloop (class in sympy.codegen.fnodes)": [[49, "sympy.codegen.fnodes.ImpliedDoLoop"]], "intbasetype (class in sympy.codegen.ast)": [[49, "sympy.codegen.ast.IntBaseType"]], "label (class in sympy.codegen.cnodes)": [[49, "sympy.codegen.cnodes.Label"]], "matrixsolve (class in sympy.codegen.matrix_nodes)": [[49, "sympy.codegen.matrix_nodes.MatrixSolve"]], "module (class in sympy.codegen.fnodes)": [[49, "sympy.codegen.fnodes.Module"]], "node (class in sympy.codegen.ast)": [[49, "sympy.codegen.ast.Node"]], "nonetoken (class in sympy.codegen.ast)": [[49, "sympy.codegen.ast.NoneToken"]], "optimization (class in sympy.codegen.rewriting)": [[49, "sympy.codegen.rewriting.Optimization"]], "pointer (class in sympy.codegen.ast)": [[49, "sympy.codegen.ast.Pointer"]], "postdecrement (class in sympy.codegen.cnodes)": [[49, "sympy.codegen.cnodes.PostDecrement"]], "postincrement (class in sympy.codegen.cnodes)": [[49, "sympy.codegen.cnodes.PostIncrement"]], "predecrement (class in sympy.codegen.cnodes)": [[49, "sympy.codegen.cnodes.PreDecrement"]], "preincrement (class in sympy.codegen.cnodes)": [[49, "sympy.codegen.cnodes.PreIncrement"]], "print (class in sympy.codegen.ast)": [[49, "sympy.codegen.ast.Print"]], "program (class in sympy.codegen.fnodes)": [[49, "sympy.codegen.fnodes.Program"]], "quotedstring (class in sympy.codegen.ast)": [[49, "sympy.codegen.ast.QuotedString"]], "raise (class in sympy.codegen.ast)": [[49, "sympy.codegen.ast.Raise"]], "replaceoptim (class in sympy.codegen.rewriting)": [[49, "sympy.codegen.rewriting.ReplaceOptim"]], "return (class in sympy.codegen.ast)": [[49, "sympy.codegen.ast.Return"]], "runtimeerror_ (class in sympy.codegen.ast)": [[49, "sympy.codegen.ast.RuntimeError_"]], "scope (class in sympy.codegen.ast)": [[49, "sympy.codegen.ast.Scope"]], "seriesapprox (class in sympy.codegen.approximations)": [[49, "sympy.codegen.approximations.SeriesApprox"]], "signedinttype (class in sympy.codegen.ast)": [[49, "sympy.codegen.ast.SignedIntType"]], "sqrt (class in sympy.codegen.cfunctions)": [[49, "sympy.codegen.cfunctions.Sqrt"]], "stream (class in sympy.codegen.ast)": [[49, "sympy.codegen.ast.Stream"]], "string (class in sympy.codegen.ast)": [[49, "sympy.codegen.ast.String"]], "subroutine (class in sympy.codegen.fnodes)": [[49, "sympy.codegen.fnodes.Subroutine"]], "subroutinecall (class in sympy.codegen.fnodes)": [[49, "sympy.codegen.fnodes.SubroutineCall"]], "sumapprox (class in sympy.codegen.approximations)": [[49, "sympy.codegen.approximations.SumApprox"]], "token (class in sympy.codegen.ast)": [[49, "sympy.codegen.ast.Token"]], "type (class in sympy.codegen.ast)": [[49, "sympy.codegen.ast.Type"]], "unsignedinttype (class in sympy.codegen.ast)": [[49, "sympy.codegen.ast.UnsignedIntType"]], "variable (class in sympy.codegen.ast)": [[49, "sympy.codegen.ast.Variable"]], "while (class in sympy.codegen.ast)": [[49, "sympy.codegen.ast.While"]], "alignof() (in module sympy.codegen.cnodes)": [[49, "sympy.codegen.cnodes.alignof"]], "allocated() (in module sympy.codegen.fnodes)": [[49, "sympy.codegen.fnodes.allocated"]], "array() (in module sympy.codegen.fnodes)": [[49, "sympy.codegen.fnodes.array"]], "as_declaration() (sympy.codegen.ast.variable method)": [[49, "sympy.codegen.ast.Variable.as_Declaration"]], "attr_params() (sympy.codegen.ast.node method)": [[49, "sympy.codegen.ast.Node.attr_params"]], "aug_assign() (in module sympy.codegen.ast)": [[49, "sympy.codegen.ast.aug_assign"]], "bind_c() (in module sympy.codegen.fnodes)": [[49, "sympy.codegen.fnodes.bind_C"]], "cast_check() (sympy.codegen.ast.type method)": [[49, "sympy.codegen.ast.Type.cast_check"]], "cast_nocheck (sympy.codegen.ast.floatbasetype attribute)": [[49, "sympy.codegen.ast.FloatBaseType.cast_nocheck"]], "cast_nocheck() (sympy.codegen.ast.floattype method)": [[49, "sympy.codegen.ast.FloatType.cast_nocheck"]], "cmplx (class in sympy.codegen.fnodes)": [[49, "sympy.codegen.fnodes.cmplx"]], "create_expand_pow_optimization() (in module sympy.codegen.rewriting)": [[49, "sympy.codegen.rewriting.create_expand_pow_optimization"]], "cse() (sympy.codegen.ast.codeblock method)": [[49, "sympy.codegen.ast.CodeBlock.cse"]], "decimal_dig (sympy.codegen.ast.floattype property)": [[49, "sympy.codegen.ast.FloatType.decimal_dig"]], "deduced() (sympy.codegen.ast.variable class method)": [[49, "sympy.codegen.ast.Variable.deduced"]], "dig (sympy.codegen.ast.floattype property)": [[49, "sympy.codegen.ast.FloatType.dig"]], "dimension() (in module sympy.codegen.fnodes)": [[49, "sympy.codegen.fnodes.dimension"]], "dsign (class in sympy.codegen.fnodes)": [[49, "sympy.codegen.fnodes.dsign"]], "eps (sympy.codegen.ast.floattype property)": [[49, "sympy.codegen.ast.FloatType.eps"]], "exp2 (class in sympy.codegen.cfunctions)": [[49, "sympy.codegen.cfunctions.exp2"]], "expm1 (class in sympy.codegen.cfunctions)": [[49, "sympy.codegen.cfunctions.expm1"]], "fdiff() (sympy.codegen.cfunctions.cbrt method)": [[49, "sympy.codegen.cfunctions.Cbrt.fdiff"]], "fdiff() (sympy.codegen.cfunctions.sqrt method)": [[49, "sympy.codegen.cfunctions.Sqrt.fdiff"]], "fdiff() (sympy.codegen.cfunctions.exp2 method)": [[49, "sympy.codegen.cfunctions.exp2.fdiff"]], "fdiff() (sympy.codegen.cfunctions.expm1 method)": [[49, "sympy.codegen.cfunctions.expm1.fdiff"]], "fdiff() (sympy.codegen.cfunctions.fma method)": [[49, "sympy.codegen.cfunctions.fma.fdiff"]], "fdiff() (sympy.codegen.cfunctions.hypot method)": [[49, "sympy.codegen.cfunctions.hypot.fdiff"]], "fdiff() (sympy.codegen.cfunctions.log10 method)": [[49, "sympy.codegen.cfunctions.log10.fdiff"]], "fdiff() (sympy.codegen.cfunctions.log1p method)": [[49, "sympy.codegen.cfunctions.log1p.fdiff"]], "fdiff() (sympy.codegen.cfunctions.log2 method)": [[49, "sympy.codegen.cfunctions.log2.fdiff"]], "fma (class in sympy.codegen.cfunctions)": [[49, "sympy.codegen.cfunctions.fma"]], "from_expr() (sympy.codegen.ast.type class method)": [[49, "sympy.codegen.ast.Type.from_expr"]], "goto (class in sympy.codegen.cnodes)": [[49, "sympy.codegen.cnodes.goto"]], "hypot (class in sympy.codegen.cfunctions)": [[49, "sympy.codegen.cfunctions.hypot"]], "isign (class in sympy.codegen.fnodes)": [[49, "sympy.codegen.fnodes.isign"]], "kind (class in sympy.codegen.fnodes)": [[49, "sympy.codegen.fnodes.kind"]], "kwargs() (sympy.codegen.ast.token method)": [[49, "sympy.codegen.ast.Token.kwargs"]], "lbound() (in module sympy.codegen.fnodes)": [[49, "sympy.codegen.fnodes.lbound"]], "literal_dp (class in sympy.codegen.fnodes)": [[49, "sympy.codegen.fnodes.literal_dp"]], "literal_sp (class in sympy.codegen.fnodes)": [[49, "sympy.codegen.fnodes.literal_sp"]], "log10 (class in sympy.codegen.cfunctions)": [[49, "sympy.codegen.cfunctions.log10"]], "log1p (class in sympy.codegen.cfunctions)": [[49, "sympy.codegen.cfunctions.log1p"]], "log2 (class in sympy.codegen.cfunctions)": [[49, "sympy.codegen.cfunctions.log2"]], "max (sympy.codegen.ast.floattype property)": [[49, "sympy.codegen.ast.FloatType.max"]], "max_exponent (sympy.codegen.ast.floattype property)": [[49, "sympy.codegen.ast.FloatType.max_exponent"]], "merge (class in sympy.codegen.fnodes)": [[49, "sympy.codegen.fnodes.merge"]], "min_exponent (sympy.codegen.ast.floattype property)": [[49, "sympy.codegen.ast.FloatType.min_exponent"]], "newtons_method() (in module sympy.codegen.algorithms)": [[49, "sympy.codegen.algorithms.newtons_method"]], "newtons_method_function() (in module sympy.codegen.algorithms)": [[49, "sympy.codegen.algorithms.newtons_method_function"]], "optimize() (in module sympy.codegen.rewriting)": [[49, "sympy.codegen.rewriting.optimize"]], "render_as_module() (in module sympy.codegen.futils)": [[49, "sympy.codegen.futils.render_as_module"]], "render_as_module() (in module sympy.codegen.pyutils)": [[49, "sympy.codegen.pyutils.render_as_module"]], "render_as_source_file() (in module sympy.codegen.cutils)": [[49, "sympy.codegen.cutils.render_as_source_file"]], "replace_in_add() (sympy.codegen.rewriting.funcminusoneoptim method)": [[49, "sympy.codegen.rewriting.FuncMinusOneOptim.replace_in_Add"]], "reshape() (in module sympy.codegen.fnodes)": [[49, "sympy.codegen.fnodes.reshape"]], "shape() (in module sympy.codegen.fnodes)": [[49, "sympy.codegen.fnodes.shape"]], "size() (in module sympy.codegen.fnodes)": [[49, "sympy.codegen.fnodes.size"]], "sizeof() (in module sympy.codegen.cnodes)": [[49, "sympy.codegen.cnodes.sizeof"]], "struct (class in sympy.codegen.cnodes)": [[49, "sympy.codegen.cnodes.struct"]], "sympy.codegen.algorithms": [[49, "module-sympy.codegen.algorithms"]], "sympy.codegen.approximations": [[49, "module-sympy.codegen.approximations"]], "sympy.codegen.ast": [[49, "module-sympy.codegen.ast"]], "sympy.codegen.cfunctions": [[49, "module-sympy.codegen.cfunctions"]], "sympy.codegen.cnodes": [[49, "module-sympy.codegen.cnodes"]], "sympy.codegen.cutils": [[49, "module-sympy.codegen.cutils"]], "sympy.codegen.cxxnodes": [[49, "module-sympy.codegen.cxxnodes"]], "sympy.codegen.fnodes": [[49, "module-sympy.codegen.fnodes"]], "sympy.codegen.futils": [[49, "module-sympy.codegen.futils"]], "sympy.codegen.matrix_nodes": [[49, "module-sympy.codegen.matrix_nodes"]], "sympy.codegen.pyutils": [[49, "module-sympy.codegen.pyutils"]], "sympy.codegen.rewriting": [[49, "module-sympy.codegen.rewriting"]], "tiny (sympy.codegen.ast.floattype property)": [[49, "sympy.codegen.ast.FloatType.tiny"]], "topological_sort() (sympy.codegen.ast.codeblock class method)": [[49, "sympy.codegen.ast.CodeBlock.topological_sort"]], "union (class in sympy.codegen.cnodes)": [[49, "sympy.codegen.cnodes.union"]], "use (class in sympy.codegen.fnodes)": [[49, "sympy.codegen.fnodes.use"]], "use_rename (class in sympy.codegen.fnodes)": [[49, "sympy.codegen.fnodes.use_rename"]], "using (class in sympy.codegen.cxxnodes)": [[49, "sympy.codegen.cxxnodes.using"]], "a4_in_s6() (in module sympy.combinatorics.galois)": [[51, "sympy.combinatorics.galois.A4_in_S6"]], "a4xc2() (in module sympy.combinatorics.galois)": [[51, "sympy.combinatorics.galois.A4xC2"]], "g18() (in module sympy.combinatorics.galois)": [[51, "sympy.combinatorics.galois.G18"]], "g36m() (in module sympy.combinatorics.galois)": [[51, "sympy.combinatorics.galois.G36m"]], "g36p() (in module sympy.combinatorics.galois)": [[51, "sympy.combinatorics.galois.G36p"]], "g72() (in module sympy.combinatorics.galois)": [[51, "sympy.combinatorics.galois.G72"]], "m20() (in module sympy.combinatorics.galois)": [[51, "sympy.combinatorics.galois.M20"]], "pgl2f5() (in module sympy.combinatorics.galois)": [[51, "sympy.combinatorics.galois.PGL2F5"]], "psl2f5() (in module sympy.combinatorics.galois)": [[51, "sympy.combinatorics.galois.PSL2F5"]], "s1transitivesubgroups (class in sympy.combinatorics.galois)": [[51, "sympy.combinatorics.galois.S1TransitiveSubgroups"]], "s2transitivesubgroups (class in sympy.combinatorics.galois)": [[51, "sympy.combinatorics.galois.S2TransitiveSubgroups"]], "s3transitivesubgroups (class in sympy.combinatorics.galois)": [[51, "sympy.combinatorics.galois.S3TransitiveSubgroups"]], "s3_in_s6() (in module sympy.combinatorics.galois)": [[51, "sympy.combinatorics.galois.S3_in_S6"]], "s4transitivesubgroups (class in sympy.combinatorics.galois)": [[51, "sympy.combinatorics.galois.S4TransitiveSubgroups"]], "s4m() (in module sympy.combinatorics.galois)": [[51, "sympy.combinatorics.galois.S4m"]], "s4p() (in module sympy.combinatorics.galois)": [[51, "sympy.combinatorics.galois.S4p"]], "s4xc2() (in module sympy.combinatorics.galois)": [[51, "sympy.combinatorics.galois.S4xC2"]], "s5transitivesubgroups (class in sympy.combinatorics.galois)": [[51, "sympy.combinatorics.galois.S5TransitiveSubgroups"]], "s6transitivesubgroups (class in sympy.combinatorics.galois)": [[51, "sympy.combinatorics.galois.S6TransitiveSubgroups"]], "find_transitive_subgroups_of_s6() (in module sympy.combinatorics.galois)": [[51, "sympy.combinatorics.galois.find_transitive_subgroups_of_S6"]], "four_group() (in module sympy.combinatorics.galois)": [[51, "sympy.combinatorics.galois.four_group"]], "sympy.combinatorics.galois": [[51, "module-sympy.combinatorics.galois"]], "graycode (class in sympy.combinatorics.graycode)": [[52, "sympy.combinatorics.graycode.GrayCode"]], "bin_to_gray() (sympy.combinatorics.graycode method)": [[52, "sympy.combinatorics.graycode.bin_to_gray"]], "current (sympy.combinatorics.graycode.graycode property)": [[52, "sympy.combinatorics.graycode.GrayCode.current"]], "generate_gray() (sympy.combinatorics.graycode.graycode method)": [[52, "sympy.combinatorics.graycode.GrayCode.generate_gray"]], "get_subset_from_bitstring() (sympy.combinatorics.graycode method)": [[52, "sympy.combinatorics.graycode.get_subset_from_bitstring"]], "gray_to_bin() (sympy.combinatorics.graycode method)": [[52, "sympy.combinatorics.graycode.gray_to_bin"]], "graycode_subsets() (sympy.combinatorics.graycode method)": [[52, "sympy.combinatorics.graycode.graycode_subsets"]], "n (sympy.combinatorics.graycode.graycode property)": [[52, "sympy.combinatorics.graycode.GrayCode.n"]], "next() (sympy.combinatorics.graycode.graycode method)": [[52, "sympy.combinatorics.graycode.GrayCode.next"]], "random_bitstring() (sympy.combinatorics.graycode method)": [[52, "sympy.combinatorics.graycode.random_bitstring"]], "rank (sympy.combinatorics.graycode.graycode property)": [[52, "sympy.combinatorics.graycode.GrayCode.rank"]], "selections (sympy.combinatorics.graycode.graycode property)": [[52, "sympy.combinatorics.graycode.GrayCode.selections"]], "skip() (sympy.combinatorics.graycode.graycode method)": [[52, "sympy.combinatorics.graycode.GrayCode.skip"]], "sympy.combinatorics.graycode": [[52, "module-sympy.combinatorics.graycode"]], "unrank() (sympy.combinatorics.graycode.graycode class method)": [[52, "sympy.combinatorics.graycode.GrayCode.unrank"]], "directproduct() (in module sympy.combinatorics.group_constructs)": [[53, "sympy.combinatorics.group_constructs.DirectProduct"]], "sympy.combinatorics.group_constructs": [[53, "module-sympy.combinatorics.group_constructs"]], "is_abelian_number() (in module sympy.combinatorics.group_numbers)": [[54, "sympy.combinatorics.group_numbers.is_abelian_number"]], "is_cyclic_number() (in module sympy.combinatorics.group_numbers)": [[54, "sympy.combinatorics.group_numbers.is_cyclic_number"]], "is_nilpotent_number() (in module sympy.combinatorics.group_numbers)": [[54, "sympy.combinatorics.group_numbers.is_nilpotent_number"]], "sympy.combinatorics.group_numbers": [[54, "module-sympy.combinatorics.group_numbers"]], "abeliangroup() (in module sympy.combinatorics.named_groups)": [[56, "sympy.combinatorics.named_groups.AbelianGroup"]], "alternatinggroup() (in module sympy.combinatorics.named_groups)": [[56, "sympy.combinatorics.named_groups.AlternatingGroup"]], "cyclicgroup() (in module sympy.combinatorics.named_groups)": [[56, "sympy.combinatorics.named_groups.CyclicGroup"]], "dihedralgroup() (in module sympy.combinatorics.named_groups)": [[56, "sympy.combinatorics.named_groups.DihedralGroup"]], "symmetricgroup() (in module sympy.combinatorics.named_groups)": [[56, "sympy.combinatorics.named_groups.SymmetricGroup"]], "sympy.combinatorics.named_groups": [[56, "module-sympy.combinatorics.named_groups"]], "integerpartition (class in sympy.combinatorics.partitions)": [[57, "sympy.combinatorics.partitions.IntegerPartition"]], "partition (class in sympy.combinatorics.partitions)": [[57, "sympy.combinatorics.partitions.Partition"]], "rgs (sympy.combinatorics.partitions.partition property)": [[57, "sympy.combinatorics.partitions.Partition.RGS"]], "rgs_enum() (in module sympy.combinatorics.partitions)": [[57, "sympy.combinatorics.partitions.RGS_enum"]], "rgs_generalized() (in module sympy.combinatorics.partitions)": [[57, "sympy.combinatorics.partitions.RGS_generalized"]], "rgs_rank() (in module sympy.combinatorics.partitions)": [[57, "sympy.combinatorics.partitions.RGS_rank"]], "rgs_unrank() (in module sympy.combinatorics.partitions)": [[57, "sympy.combinatorics.partitions.RGS_unrank"]], "as_dict() (sympy.combinatorics.partitions.integerpartition method)": [[57, "sympy.combinatorics.partitions.IntegerPartition.as_dict"]], "as_ferrers() (sympy.combinatorics.partitions.integerpartition method)": [[57, "sympy.combinatorics.partitions.IntegerPartition.as_ferrers"]], "conjugate (sympy.combinatorics.partitions.integerpartition property)": [[57, "sympy.combinatorics.partitions.IntegerPartition.conjugate"]], "from_rgs() (sympy.combinatorics.partitions.partition class method)": [[57, "sympy.combinatorics.partitions.Partition.from_rgs"]], "next_lex() (sympy.combinatorics.partitions.integerpartition method)": [[57, "sympy.combinatorics.partitions.IntegerPartition.next_lex"]], "partition (sympy.combinatorics.partitions.partition property)": [[57, "sympy.combinatorics.partitions.Partition.partition"]], "prev_lex() (sympy.combinatorics.partitions.integerpartition method)": [[57, "sympy.combinatorics.partitions.IntegerPartition.prev_lex"]], "random_integer_partition() (in module sympy.combinatorics.partitions)": [[57, "sympy.combinatorics.partitions.random_integer_partition"]], "rank (sympy.combinatorics.partitions.partition property)": [[57, "sympy.combinatorics.partitions.Partition.rank"]], "sort_key() (sympy.combinatorics.partitions.partition method)": [[57, "sympy.combinatorics.partitions.Partition.sort_key"]], "sympy.combinatorics.partitions": [[57, "module-sympy.combinatorics.partitions"]], "permutationgroup (class in sympy.combinatorics.perm_groups)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup"]], "__contains__() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.__contains__"]], "__mul__() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.__mul__"]], "__new__() (sympy.combinatorics.perm_groups.permutationgroup static method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.__new__"]], "__weakref__ (sympy.combinatorics.perm_groups.permutationgroup attribute)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.__weakref__"]], "_coset_representative() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup._coset_representative"]], "_distinct_primes_lemma() (sympy.combinatorics.perm_groups.permutationgroup class method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup._distinct_primes_lemma"]], "_elements (sympy.combinatorics.perm_groups.permutationgroup property)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup._elements"]], "_eval_is_alt_sym_monte_carlo() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup._eval_is_alt_sym_monte_carlo"]], "_eval_is_alt_sym_naive() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup._eval_is_alt_sym_naive"]], "_p_elements_group() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup._p_elements_group"]], "_random_pr_init() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup._random_pr_init"]], "_sylow_alt_sym() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup._sylow_alt_sym"]], "_union_find_merge() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup._union_find_merge"]], "_union_find_rep() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup._union_find_rep"]], "_verify() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup._verify"]], "abelian_invariants() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.abelian_invariants"]], "base (sympy.combinatorics.perm_groups.permutationgroup property)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.base"]], "baseswap() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.baseswap"]], "basic_orbits (sympy.combinatorics.perm_groups.permutationgroup property)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.basic_orbits"]], "basic_stabilizers (sympy.combinatorics.perm_groups.permutationgroup property)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.basic_stabilizers"]], "basic_transversals (sympy.combinatorics.perm_groups.permutationgroup property)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.basic_transversals"]], "center() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.center"]], "centralizer() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.centralizer"]], "commutator() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.commutator"]], "composition_series() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.composition_series"]], "conjugacy_class() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.conjugacy_class"]], "conjugacy_classes() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.conjugacy_classes"]], "contains() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.contains"]], "coset_factor() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.coset_factor"]], "coset_rank() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.coset_rank"]], "coset_table() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.coset_table"]], "coset_transversal() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.coset_transversal"]], "coset_unrank() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.coset_unrank"]], "degree (sympy.combinatorics.perm_groups.permutationgroup property)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.degree"]], "derived_series() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.derived_series"]], "derived_subgroup() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.derived_subgroup"]], "elements (sympy.combinatorics.perm_groups.permutationgroup property)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.elements"]], "equals() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.equals"]], "generate() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.generate"]], "generate_dimino() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.generate_dimino"]], "generate_schreier_sims() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.generate_schreier_sims"]], "generator_product() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.generator_product"]], "generators (sympy.combinatorics.perm_groups.permutationgroup property)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.generators"]], "identity (sympy.combinatorics.perm_groups.permutationgroup property)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.identity"]], "index() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.index"]], "is_abelian (sympy.combinatorics.perm_groups.permutationgroup property)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.is_abelian"]], "is_alt_sym() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.is_alt_sym"]], "is_alternating (sympy.combinatorics.perm_groups.permutationgroup property)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.is_alternating"]], "is_cyclic (sympy.combinatorics.perm_groups.permutationgroup property)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.is_cyclic"]], "is_dihedral (sympy.combinatorics.perm_groups.permutationgroup property)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.is_dihedral"]], "is_elementary() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.is_elementary"]], "is_nilpotent (sympy.combinatorics.perm_groups.permutationgroup property)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.is_nilpotent"]], "is_normal() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.is_normal"]], "is_perfect (sympy.combinatorics.perm_groups.permutationgroup property)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.is_perfect"]], "is_polycyclic (sympy.combinatorics.perm_groups.permutationgroup property)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.is_polycyclic"]], "is_primitive() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.is_primitive"]], "is_solvable (sympy.combinatorics.perm_groups.permutationgroup property)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.is_solvable"]], "is_subgroup() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.is_subgroup"]], "is_symmetric (sympy.combinatorics.perm_groups.permutationgroup property)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.is_symmetric"]], "is_transitive() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.is_transitive"]], "is_trivial (sympy.combinatorics.perm_groups.permutationgroup property)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.is_trivial"]], "lower_central_series() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.lower_central_series"]], "make_perm() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.make_perm"]], "max_div (sympy.combinatorics.perm_groups.permutationgroup property)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.max_div"]], "minimal_block() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.minimal_block"]], "minimal_blocks() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.minimal_blocks"]], "normal_closure() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.normal_closure"]], "orbit() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.orbit"]], "orbit_rep() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.orbit_rep"]], "orbit_transversal() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.orbit_transversal"]], "orbits() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.orbits"]], "order() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.order"]], "pointwise_stabilizer() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.pointwise_stabilizer"]], "polycyclic_group() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.polycyclic_group"]], "presentation() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.presentation"]], "random() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.random"]], "random_pr() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.random_pr"]], "random_stab() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.random_stab"]], "schreier_sims() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims"]], "schreier_sims_incremental() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims_incremental"]], "schreier_sims_random() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims_random"]], "schreier_vector() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.schreier_vector"]], "stabilizer() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.stabilizer"]], "strong_gens (sympy.combinatorics.perm_groups.permutationgroup property)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.strong_gens"]], "strong_presentation() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.strong_presentation"]], "subgroup() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.subgroup"]], "subgroup_search() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.subgroup_search"]], "sylow_subgroup() (sympy.combinatorics.perm_groups.permutationgroup method)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.sylow_subgroup"]], "sympy.combinatorics.perm_groups": [[59, "module-sympy.combinatorics.perm_groups"]], "transitivity_degree (sympy.combinatorics.perm_groups.permutationgroup property)": [[59, "sympy.combinatorics.perm_groups.PermutationGroup.transitivity_degree"]], "cycle (class in sympy.combinatorics.permutations)": [[60, "sympy.combinatorics.permutations.Cycle"]], "permutation (class in sympy.combinatorics.permutations)": [[60, "sympy.combinatorics.permutations.Permutation"]], "_af_parity() (in module sympy.combinatorics.permutations)": [[60, "sympy.combinatorics.permutations._af_parity"]], "alternating() (sympy.combinatorics.generators method)": [[60, "sympy.combinatorics.generators.alternating"]], "apply() (sympy.combinatorics.permutations.permutation method)": [[60, "sympy.combinatorics.permutations.Permutation.apply"]], "array_form (sympy.combinatorics.permutations.permutation property)": [[60, "sympy.combinatorics.permutations.Permutation.array_form"]], "ascents() (sympy.combinatorics.permutations.permutation method)": [[60, "sympy.combinatorics.permutations.Permutation.ascents"]], "atoms() (sympy.combinatorics.permutations.permutation method)": [[60, "sympy.combinatorics.permutations.Permutation.atoms"]], "cardinality (sympy.combinatorics.permutations.permutation property)": [[60, "sympy.combinatorics.permutations.Permutation.cardinality"]], "commutator() (sympy.combinatorics.permutations.permutation method)": [[60, "sympy.combinatorics.permutations.Permutation.commutator"]], "commutes_with() (sympy.combinatorics.permutations.permutation method)": [[60, "sympy.combinatorics.permutations.Permutation.commutes_with"]], "cycle_structure (sympy.combinatorics.permutations.permutation property)": [[60, "sympy.combinatorics.permutations.Permutation.cycle_structure"]], "cycles (sympy.combinatorics.permutations.permutation property)": [[60, "sympy.combinatorics.permutations.Permutation.cycles"]], "cyclic() (sympy.combinatorics.generators method)": [[60, "sympy.combinatorics.generators.cyclic"]], "cyclic_form (sympy.combinatorics.permutations.permutation property)": [[60, "sympy.combinatorics.permutations.Permutation.cyclic_form"]], "descents() (sympy.combinatorics.permutations.permutation method)": [[60, "sympy.combinatorics.permutations.Permutation.descents"]], "dihedral() (sympy.combinatorics.generators method)": [[60, "sympy.combinatorics.generators.dihedral"]], "from_inversion_vector() (sympy.combinatorics.permutations.permutation class method)": [[60, "sympy.combinatorics.permutations.Permutation.from_inversion_vector"]], "from_sequence() (sympy.combinatorics.permutations.permutation class method)": [[60, "sympy.combinatorics.permutations.Permutation.from_sequence"]], "full_cyclic_form (sympy.combinatorics.permutations.permutation property)": [[60, "sympy.combinatorics.permutations.Permutation.full_cyclic_form"]], "get_adjacency_distance() (sympy.combinatorics.permutations.permutation method)": [[60, "sympy.combinatorics.permutations.Permutation.get_adjacency_distance"]], "get_adjacency_matrix() (sympy.combinatorics.permutations.permutation method)": [[60, "sympy.combinatorics.permutations.Permutation.get_adjacency_matrix"]], "get_positional_distance() (sympy.combinatorics.permutations.permutation method)": [[60, "sympy.combinatorics.permutations.Permutation.get_positional_distance"]], "get_precedence_distance() (sympy.combinatorics.permutations.permutation method)": [[60, "sympy.combinatorics.permutations.Permutation.get_precedence_distance"]], "get_precedence_matrix() (sympy.combinatorics.permutations.permutation method)": [[60, "sympy.combinatorics.permutations.Permutation.get_precedence_matrix"]], "index() (sympy.combinatorics.permutations.permutation method)": [[60, "sympy.combinatorics.permutations.Permutation.index"]], "inversion_vector() (sympy.combinatorics.permutations.permutation method)": [[60, "sympy.combinatorics.permutations.Permutation.inversion_vector"]], "inversions() (sympy.combinatorics.permutations.permutation method)": [[60, "sympy.combinatorics.permutations.Permutation.inversions"]], "is_empty (sympy.combinatorics.permutations.permutation property)": [[60, "sympy.combinatorics.permutations.Permutation.is_Empty"]], "is_identity (sympy.combinatorics.permutations.permutation property)": [[60, "sympy.combinatorics.permutations.Permutation.is_Identity"]], "is_singleton (sympy.combinatorics.permutations.permutation property)": [[60, "sympy.combinatorics.permutations.Permutation.is_Singleton"]], "is_even (sympy.combinatorics.permutations.permutation property)": [[60, "sympy.combinatorics.permutations.Permutation.is_even"]], "is_odd (sympy.combinatorics.permutations.permutation property)": [[60, "sympy.combinatorics.permutations.Permutation.is_odd"]], "josephus() (sympy.combinatorics.permutations.permutation class method)": [[60, "sympy.combinatorics.permutations.Permutation.josephus"]], "length() (sympy.combinatorics.permutations.permutation method)": [[60, "sympy.combinatorics.permutations.Permutation.length"]], "list() (sympy.combinatorics.permutations.cycle method)": [[60, "sympy.combinatorics.permutations.Cycle.list"]], "list() (sympy.combinatorics.permutations.permutation method)": [[60, "sympy.combinatorics.permutations.Permutation.list"]], "max() (sympy.combinatorics.permutations.permutation method)": [[60, "sympy.combinatorics.permutations.Permutation.max"]], "min() (sympy.combinatorics.permutations.permutation method)": [[60, "sympy.combinatorics.permutations.Permutation.min"]], "mul_inv() (sympy.combinatorics.permutations.permutation method)": [[60, "sympy.combinatorics.permutations.Permutation.mul_inv"]], "next_lex() (sympy.combinatorics.permutations.permutation method)": [[60, "sympy.combinatorics.permutations.Permutation.next_lex"]], "next_nonlex() (sympy.combinatorics.permutations.permutation method)": [[60, "sympy.combinatorics.permutations.Permutation.next_nonlex"]], "next_trotterjohnson() (sympy.combinatorics.permutations.permutation method)": [[60, "sympy.combinatorics.permutations.Permutation.next_trotterjohnson"]], "order() (sympy.combinatorics.permutations.permutation method)": [[60, "sympy.combinatorics.permutations.Permutation.order"]], "parity() (sympy.combinatorics.permutations.permutation method)": [[60, "sympy.combinatorics.permutations.Permutation.parity"]], "random() (sympy.combinatorics.permutations.permutation class method)": [[60, "sympy.combinatorics.permutations.Permutation.random"]], "rank() (sympy.combinatorics.permutations.permutation method)": [[60, "sympy.combinatorics.permutations.Permutation.rank"]], "rank_nonlex() (sympy.combinatorics.permutations.permutation method)": [[60, "sympy.combinatorics.permutations.Permutation.rank_nonlex"]], "rank_trotterjohnson() (sympy.combinatorics.permutations.permutation method)": [[60, "sympy.combinatorics.permutations.Permutation.rank_trotterjohnson"]], "resize() (sympy.combinatorics.permutations.permutation method)": [[60, "sympy.combinatorics.permutations.Permutation.resize"]], "rmul() (sympy.combinatorics.permutations.permutation static method)": [[60, "sympy.combinatorics.permutations.Permutation.rmul"]], "rmul_with_af() (sympy.combinatorics.permutations.permutation class method)": [[60, "sympy.combinatorics.permutations.Permutation.rmul_with_af"]], "runs() (sympy.combinatorics.permutations.permutation method)": [[60, "sympy.combinatorics.permutations.Permutation.runs"]], "signature() (sympy.combinatorics.permutations.permutation method)": [[60, "sympy.combinatorics.permutations.Permutation.signature"]], "size (sympy.combinatorics.permutations.permutation property)": [[60, "sympy.combinatorics.permutations.Permutation.size"]], "support() (sympy.combinatorics.permutations.permutation method)": [[60, "sympy.combinatorics.permutations.Permutation.support"]], "symmetric() (sympy.combinatorics.generators method)": [[60, "sympy.combinatorics.generators.symmetric"]], "sympy.combinatorics.generators": [[60, "module-sympy.combinatorics.generators"]], "sympy.combinatorics.permutations": [[60, "module-sympy.combinatorics.permutations"]], "transpositions() (sympy.combinatorics.permutations.permutation method)": [[60, "sympy.combinatorics.permutations.Permutation.transpositions"]], "unrank_lex() (sympy.combinatorics.permutations.permutation class method)": [[60, "sympy.combinatorics.permutations.Permutation.unrank_lex"]], "unrank_nonlex() (sympy.combinatorics.permutations.permutation class method)": [[60, "sympy.combinatorics.permutations.Permutation.unrank_nonlex"]], "unrank_trotterjohnson() (sympy.combinatorics.permutations.permutation class method)": [[60, "sympy.combinatorics.permutations.Permutation.unrank_trotterjohnson"]], "polyhedron (class in sympy.combinatorics.polyhedron)": [[61, "sympy.combinatorics.polyhedron.Polyhedron"]], "array_form (sympy.combinatorics.polyhedron.polyhedron property)": [[61, "sympy.combinatorics.polyhedron.Polyhedron.array_form"]], "corners (sympy.combinatorics.polyhedron.polyhedron property)": [[61, "sympy.combinatorics.polyhedron.Polyhedron.corners"]], "cyclic_form (sympy.combinatorics.polyhedron.polyhedron property)": [[61, "sympy.combinatorics.polyhedron.Polyhedron.cyclic_form"]], "edges (sympy.combinatorics.polyhedron.polyhedron property)": [[61, "sympy.combinatorics.polyhedron.Polyhedron.edges"]], "faces (sympy.combinatorics.polyhedron.polyhedron property)": [[61, "sympy.combinatorics.polyhedron.Polyhedron.faces"]], "pgroup (sympy.combinatorics.polyhedron.polyhedron property)": [[61, "sympy.combinatorics.polyhedron.Polyhedron.pgroup"]], "reset() (sympy.combinatorics.polyhedron.polyhedron method)": [[61, "sympy.combinatorics.polyhedron.Polyhedron.reset"]], "rotate() (sympy.combinatorics.polyhedron.polyhedron method)": [[61, "sympy.combinatorics.polyhedron.Polyhedron.rotate"]], "size (sympy.combinatorics.polyhedron.polyhedron property)": [[61, "sympy.combinatorics.polyhedron.Polyhedron.size"]], "sympy.combinatorics.polyhedron": [[61, "module-sympy.combinatorics.polyhedron"]], "vertices (sympy.combinatorics.polyhedron.polyhedron property)": [[61, "sympy.combinatorics.polyhedron.Polyhedron.vertices"]], "prufer (class in sympy.combinatorics.prufer)": [[62, "sympy.combinatorics.prufer.Prufer"]], "edges() (sympy.combinatorics.prufer.prufer static method)": [[62, "sympy.combinatorics.prufer.Prufer.edges"]], "next() (sympy.combinatorics.prufer.prufer method)": [[62, "sympy.combinatorics.prufer.Prufer.next"]], "nodes (sympy.combinatorics.prufer.prufer property)": [[62, "sympy.combinatorics.prufer.Prufer.nodes"]], "prev() (sympy.combinatorics.prufer.prufer method)": [[62, "sympy.combinatorics.prufer.Prufer.prev"]], "prufer_rank() (sympy.combinatorics.prufer.prufer method)": [[62, "sympy.combinatorics.prufer.Prufer.prufer_rank"]], "prufer_repr (sympy.combinatorics.prufer.prufer property)": [[62, "sympy.combinatorics.prufer.Prufer.prufer_repr"]], "rank (sympy.combinatorics.prufer.prufer property)": [[62, "sympy.combinatorics.prufer.Prufer.rank"]], "size (sympy.combinatorics.prufer.prufer property)": [[62, "sympy.combinatorics.prufer.Prufer.size"]], "sympy.combinatorics.prufer": [[62, "module-sympy.combinatorics.prufer"]], "to_prufer() (sympy.combinatorics.prufer.prufer static method)": [[62, "sympy.combinatorics.prufer.Prufer.to_prufer"]], "to_tree() (sympy.combinatorics.prufer.prufer static method)": [[62, "sympy.combinatorics.prufer.Prufer.to_tree"]], "tree_repr (sympy.combinatorics.prufer.prufer property)": [[62, "sympy.combinatorics.prufer.Prufer.tree_repr"]], "unrank() (sympy.combinatorics.prufer.prufer class method)": [[62, "sympy.combinatorics.prufer.Prufer.unrank"]], "subset (class in sympy.combinatorics.subsets)": [[63, "sympy.combinatorics.subsets.Subset"]], "bitlist_from_subset() (sympy.combinatorics.subsets.subset class method)": [[63, "sympy.combinatorics.subsets.Subset.bitlist_from_subset"]], "cardinality (sympy.combinatorics.subsets.subset property)": [[63, "sympy.combinatorics.subsets.Subset.cardinality"]], "iterate_binary() (sympy.combinatorics.subsets.subset method)": [[63, "sympy.combinatorics.subsets.Subset.iterate_binary"]], "iterate_graycode() (sympy.combinatorics.subsets.subset method)": [[63, "sympy.combinatorics.subsets.Subset.iterate_graycode"]], "ksubsets() (sympy.combinatorics.subsets method)": [[63, "sympy.combinatorics.subsets.ksubsets"]], "next_binary() (sympy.combinatorics.subsets.subset method)": [[63, "sympy.combinatorics.subsets.Subset.next_binary"]], "next_gray() (sympy.combinatorics.subsets.subset method)": [[63, "sympy.combinatorics.subsets.Subset.next_gray"]], "next_lexicographic() (sympy.combinatorics.subsets.subset method)": [[63, "sympy.combinatorics.subsets.Subset.next_lexicographic"]], "prev_binary() (sympy.combinatorics.subsets.subset method)": [[63, "sympy.combinatorics.subsets.Subset.prev_binary"]], "prev_gray() (sympy.combinatorics.subsets.subset method)": [[63, "sympy.combinatorics.subsets.Subset.prev_gray"]], "prev_lexicographic() (sympy.combinatorics.subsets.subset method)": [[63, "sympy.combinatorics.subsets.Subset.prev_lexicographic"]], "rank_binary (sympy.combinatorics.subsets.subset property)": [[63, "sympy.combinatorics.subsets.Subset.rank_binary"]], "rank_gray (sympy.combinatorics.subsets.subset property)": [[63, "sympy.combinatorics.subsets.Subset.rank_gray"]], "rank_lexicographic (sympy.combinatorics.subsets.subset property)": [[63, "sympy.combinatorics.subsets.Subset.rank_lexicographic"]], "size (sympy.combinatorics.subsets.subset property)": [[63, "sympy.combinatorics.subsets.Subset.size"]], "subset (sympy.combinatorics.subsets.subset property)": [[63, "sympy.combinatorics.subsets.Subset.subset"]], "subset_from_bitlist() (sympy.combinatorics.subsets.subset class method)": [[63, "sympy.combinatorics.subsets.Subset.subset_from_bitlist"]], "subset_indices() (sympy.combinatorics.subsets.subset class method)": [[63, "sympy.combinatorics.subsets.Subset.subset_indices"]], "superset (sympy.combinatorics.subsets.subset property)": [[63, "sympy.combinatorics.subsets.Subset.superset"]], "superset_size (sympy.combinatorics.subsets.subset property)": [[63, "sympy.combinatorics.subsets.Subset.superset_size"]], "sympy.combinatorics.subsets": [[63, "module-sympy.combinatorics.subsets"]], "unrank_binary() (sympy.combinatorics.subsets.subset class method)": [[63, "sympy.combinatorics.subsets.Subset.unrank_binary"]], "unrank_gray() (sympy.combinatorics.subsets.subset class method)": [[63, "sympy.combinatorics.subsets.Subset.unrank_gray"]], "bsgs_direct_product() (in module sympy.combinatorics.tensor_can)": [[64, "sympy.combinatorics.tensor_can.bsgs_direct_product"]], "canonicalize() (in module sympy.combinatorics.tensor_can)": [[64, "sympy.combinatorics.tensor_can.canonicalize"]], "double_coset_can_rep() (in module sympy.combinatorics.tensor_can)": [[64, "sympy.combinatorics.tensor_can.double_coset_can_rep"]], "get_symmetric_group_sgs() (in module sympy.combinatorics.tensor_can)": [[64, "sympy.combinatorics.tensor_can.get_symmetric_group_sgs"]], "sympy.combinatorics.tensor_can": [[64, "module-sympy.combinatorics.tensor_can"]], "_cmp_perm_lists() (in module sympy.combinatorics.testutil)": [[65, "sympy.combinatorics.testutil._cmp_perm_lists"]], "_naive_list_centralizer() (in module sympy.combinatorics.testutil)": [[65, "sympy.combinatorics.testutil._naive_list_centralizer"]], "_verify_bsgs() (in module sympy.combinatorics.testutil)": [[65, "sympy.combinatorics.testutil._verify_bsgs"]], "_verify_centralizer() (in module sympy.combinatorics.testutil)": [[65, "sympy.combinatorics.testutil._verify_centralizer"]], "_verify_normal_closure() (in module sympy.combinatorics.testutil)": [[65, "sympy.combinatorics.testutil._verify_normal_closure"]], "sympy.combinatorics.testutil": [[65, "module-sympy.combinatorics.testutil"]], "_base_ordering() (in module sympy.combinatorics.util)": [[66, "sympy.combinatorics.util._base_ordering"]], "_check_cycles_alt_sym() (in module sympy.combinatorics.util)": [[66, "sympy.combinatorics.util._check_cycles_alt_sym"]], "_distribute_gens_by_base() (in module sympy.combinatorics.util)": [[66, "sympy.combinatorics.util._distribute_gens_by_base"]], "_handle_precomputed_bsgs() (in module sympy.combinatorics.util)": [[66, "sympy.combinatorics.util._handle_precomputed_bsgs"]], "_orbits_transversals_from_bsgs() (in module sympy.combinatorics.util)": [[66, "sympy.combinatorics.util._orbits_transversals_from_bsgs"]], "_remove_gens() (in module sympy.combinatorics.util)": [[66, "sympy.combinatorics.util._remove_gens"]], "_strip() (in module sympy.combinatorics.util)": [[66, "sympy.combinatorics.util._strip"]], "_strong_gens_from_distr() (in module sympy.combinatorics.util)": [[66, "sympy.combinatorics.util._strong_gens_from_distr"]], "sympy.combinatorics.util": [[66, "module-sympy.combinatorics.util"]], "exprwithintlimits (class in sympy.concrete.expr_with_intlimits)": [[67, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits"]], "product (class in sympy.concrete.products)": [[67, "sympy.concrete.products.Product"]], "sum (class in sympy.concrete.summations)": [[67, "sympy.concrete.summations.Sum"]], "change_index() (sympy.concrete.expr_with_intlimits.exprwithintlimits method)": [[67, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits.change_index"]], "euler_maclaurin() (sympy.concrete.summations.sum method)": [[67, "sympy.concrete.summations.Sum.euler_maclaurin"]], "eval_zeta_function() (sympy.concrete.summations.sum method)": [[67, "sympy.concrete.summations.Sum.eval_zeta_function"]], "gosper_normal() (in module sympy.concrete.gosper)": [[67, "sympy.concrete.gosper.gosper_normal"]], "gosper_sum() (in module sympy.concrete.gosper)": [[67, "sympy.concrete.gosper.gosper_sum"]], "gosper_term() (in module sympy.concrete.gosper)": [[67, "sympy.concrete.gosper.gosper_term"]], "has_empty_sequence (sympy.concrete.expr_with_intlimits.exprwithintlimits property)": [[67, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits.has_empty_sequence"]], "index() (sympy.concrete.expr_with_intlimits.exprwithintlimits method)": [[67, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits.index"]], "is_absolutely_convergent() (sympy.concrete.summations.sum method)": [[67, "sympy.concrete.summations.Sum.is_absolutely_convergent"]], "is_convergent() (sympy.concrete.products.product method)": [[67, "sympy.concrete.products.Product.is_convergent"]], "is_convergent() (sympy.concrete.summations.sum method)": [[67, "sympy.concrete.summations.Sum.is_convergent"]], "product() (in module sympy.concrete.products)": [[67, "sympy.concrete.products.product"]], "reorder() (sympy.concrete.expr_with_intlimits.exprwithintlimits method)": [[67, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits.reorder"]], "reorder_limit() (sympy.concrete.expr_with_intlimits.exprwithintlimits method)": [[67, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits.reorder_limit"]], "reverse_order() (sympy.concrete.products.product method)": [[67, "sympy.concrete.products.Product.reverse_order"]], "reverse_order() (sympy.concrete.summations.sum method)": [[67, "sympy.concrete.summations.Sum.reverse_order"]], "summation() (in module sympy.concrete.summations)": [[67, "sympy.concrete.summations.summation"]], "add (class in sympy.core.add)": [[68, "sympy.core.add.Add"]], "algebraicnumber (class in sympy.core.numbers)": [[68, "sympy.core.numbers.AlgebraicNumber"]], "atom (class in sympy.core.basic)": [[68, "sympy.core.basic.Atom"]], "atomicexpr (class in sympy.core.expr)": [[68, "sympy.core.expr.AtomicExpr"]], "basic (class in sympy.core.basic)": [[68, "sympy.core.basic.Basic"]], "booleankind (in module sympy.core.kind)": [[68, "sympy.core.kind.BooleanKind"]], "catalan (class in sympy.core.numbers)": [[68, "sympy.core.numbers.Catalan"]], "complexinfinity (class in sympy.core.numbers)": [[68, "sympy.core.numbers.ComplexInfinity"]], "derivative (class in sympy.core.function)": [[68, "sympy.core.function.Derivative"]], "dict (class in sympy.core.containers)": [[68, "sympy.core.containers.Dict"]], "dummy (class in sympy.core.symbol)": [[68, "sympy.core.symbol.Dummy"]], "eq (in module sympy.core.relational)": [[68, "sympy.core.relational.Eq"]], "equality (class in sympy.core.relational)": [[68, "sympy.core.relational.Equality"]], "eulergamma (class in sympy.core.numbers)": [[68, "sympy.core.numbers.EulerGamma"]], "evalfmixin (class in sympy.core.evalf)": [[68, "sympy.core.evalf.EvalfMixin"]], "exp1 (class in sympy.core.numbers)": [[68, "sympy.core.numbers.Exp1"]], "expr (class in sympy.core.expr)": [[68, "sympy.core.expr.Expr"]], "float (class in sympy.core.numbers)": [[68, "sympy.core.numbers.Float"]], "function (class in sympy.core.function)": [[68, "sympy.core.function.Function"]], "functionclass (class in sympy.core.function)": [[68, "sympy.core.function.FunctionClass"]], "ge (in module sympy.core.relational)": [[68, "sympy.core.relational.Ge"]], "goldenratio (class in sympy.core.numbers)": [[68, "sympy.core.numbers.GoldenRatio"]], "greaterthan (class in sympy.core.relational)": [[68, "sympy.core.relational.GreaterThan"]], "gt (in module sympy.core.relational)": [[68, "sympy.core.relational.Gt"]], "half (class in sympy.core.numbers)": [[68, "sympy.core.numbers.Half"]], "imaginaryunit (class in sympy.core.numbers)": [[68, "sympy.core.numbers.ImaginaryUnit"]], "infinity (class in sympy.core.numbers)": [[68, "sympy.core.numbers.Infinity"]], "integer (class in sympy.core.numbers)": [[68, "sympy.core.numbers.Integer"]], "kind (class in sympy.core.kind)": [[68, "sympy.core.kind.Kind"]], "lambda (class in sympy.core.function)": [[68, "sympy.core.function.Lambda"]], "le (in module sympy.core.relational)": [[68, "sympy.core.relational.Le"]], "lessthan (class in sympy.core.relational)": [[68, "sympy.core.relational.LessThan"]], "lt (in module sympy.core.relational)": [[68, "sympy.core.relational.Lt"]], "mod (class in sympy.core.mod)": [[68, "sympy.core.mod.Mod"]], "mul (class in sympy.core.mul)": [[68, "sympy.core.mul.Mul"]], "n() (in module sympy.core.evalf)": [[68, "sympy.core.evalf.N"]], "nan (class in sympy.core.numbers)": [[68, "sympy.core.numbers.NaN"]], "ne (in module sympy.core.relational)": [[68, "sympy.core.relational.Ne"]], "negativeinfinity (class in sympy.core.numbers)": [[68, "sympy.core.numbers.NegativeInfinity"]], "negativeone (class in sympy.core.numbers)": [[68, "sympy.core.numbers.NegativeOne"]], "number (class in sympy.core.numbers)": [[68, "sympy.core.numbers.Number"]], "numberkind (in module sympy.core.kind)": [[68, "sympy.core.kind.NumberKind"]], "numbersymbol (class in sympy.core.numbers)": [[68, "sympy.core.numbers.NumberSymbol"]], "one (class in sympy.core.numbers)": [[68, "sympy.core.numbers.One"]], "pep 335": [[68, "index-0"], [68, "index-1"], [68, "index-2"], [68, "index-3"]], "pi (class in sympy.core.numbers)": [[68, "sympy.core.numbers.Pi"]], "poleerror (class in sympy.core.function)": [[68, "sympy.core.function.PoleError"]], "pow (class in sympy.core.power)": [[68, "sympy.core.power.Pow"]], "precisionexhausted (class in sympy.core.evalf)": [[68, "sympy.core.evalf.PrecisionExhausted"]], "python enhancement proposals": [[68, "index-0"], [68, "index-1"], [68, "index-2"], [68, "index-3"]], "rational (class in sympy.core.numbers)": [[68, "sympy.core.numbers.Rational"]], "realnumber (in module sympy.core.numbers)": [[68, "sympy.core.numbers.RealNumber"]], "rel (in module sympy.core.relational)": [[68, "sympy.core.relational.Rel"]], "relational (class in sympy.core.relational)": [[68, "sympy.core.relational.Relational"]], "singleton (class in sympy.core.singleton)": [[68, "sympy.core.singleton.Singleton"]], "singletonregistry (class in sympy.core.singleton)": [[68, "sympy.core.singleton.SingletonRegistry"]], "strictgreaterthan (class in sympy.core.relational)": [[68, "sympy.core.relational.StrictGreaterThan"]], "strictlessthan (class in sympy.core.relational)": [[68, "sympy.core.relational.StrictLessThan"]], "subs (class in sympy.core.function)": [[68, "sympy.core.function.Subs"]], "symbol (class in sympy.core.symbol)": [[68, "sympy.core.symbol.Symbol"]], "tribonacciconstant (class in sympy.core.numbers)": [[68, "sympy.core.numbers.TribonacciConstant"]], "tuple (class in sympy.core.containers)": [[68, "sympy.core.containers.Tuple"]], "tuplekind (class in sympy.core.containers)": [[68, "sympy.core.containers.TupleKind"]], "undefinedkind (in module sympy.core.kind)": [[68, "sympy.core.kind.UndefinedKind"]], "unequality (class in sympy.core.relational)": [[68, "sympy.core.relational.Unequality"]], "unevaluatedexpr (class in sympy.core.expr)": [[68, "sympy.core.expr.UnevaluatedExpr"]], "wild (class in sympy.core.symbol)": [[68, "sympy.core.symbol.Wild"]], "wildfunction (class in sympy.core.function)": [[68, "sympy.core.function.WildFunction"]], "zero (class in sympy.core.numbers)": [[68, "sympy.core.numbers.Zero"]], "__cacheit() (in module sympy.core.cache)": [[68, "sympy.core.cache.__cacheit"]], "__new__() (sympy.core.numbers.algebraicnumber static method)": [[68, "sympy.core.numbers.AlgebraicNumber.__new__"]], "_diff_wrt (sympy.core.function.derivative property)": [[68, "sympy.core.function.Derivative._diff_wrt"]], "_randint() (in module sympy.core.random)": [[68, "sympy.core.random._randint"]], "_randrange() (in module sympy.core.random)": [[68, "sympy.core.random._randrange"]], "_sort_variable_count() (sympy.core.function.derivative class method)": [[68, "sympy.core.function.Derivative._sort_variable_count"]], "algebraic": [[68, "term-algebraic"]], "antihermitian": [[68, "term-antihermitian"]], "apart() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.apart"]], "approximation() (sympy.core.numbers.numbersymbol method)": [[68, "sympy.core.numbers.NumberSymbol.approximation"]], "args (sympy.core.basic.basic property)": [[68, "sympy.core.basic.Basic.args"]], "args_cnc() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.args_cnc"]], "as_base_exp() (sympy.core.function.function method)": [[68, "sympy.core.function.Function.as_base_exp"]], "as_base_exp() (sympy.core.power.pow method)": [[68, "sympy.core.power.Pow.as_base_exp"]], "as_coeff_add() (sympy.core.add.add method)": [[68, "sympy.core.add.Add.as_coeff_Add"], [68, "sympy.core.add.Add.as_coeff_add"]], "as_coeff_add() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.as_coeff_Add"], [68, "sympy.core.expr.Expr.as_coeff_add"]], "as_coeff_add() (sympy.core.numbers.number method)": [[68, "sympy.core.numbers.Number.as_coeff_Add"]], "as_coeff_add() (sympy.core.numbers.rational method)": [[68, "sympy.core.numbers.Rational.as_coeff_Add"]], "as_coeff_mul() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.as_coeff_Mul"], [68, "sympy.core.expr.Expr.as_coeff_mul"]], "as_coeff_mul() (sympy.core.mul.mul method)": [[68, "sympy.core.mul.Mul.as_coeff_Mul"]], "as_coeff_mul() (sympy.core.numbers.number method)": [[68, "sympy.core.numbers.Number.as_coeff_Mul"]], "as_coeff_mul() (sympy.core.numbers.rational method)": [[68, "sympy.core.numbers.Rational.as_coeff_Mul"]], "as_coeff_exponent() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.as_coeff_exponent"]], "as_coefficient() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.as_coefficient"]], "as_coefficients_dict() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.as_coefficients_dict"]], "as_content_primitive() (sympy.core.add.add method)": [[68, "sympy.core.add.Add.as_content_primitive"]], "as_content_primitive() (sympy.core.basic.basic method)": [[68, "sympy.core.basic.Basic.as_content_primitive"]], "as_content_primitive() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.as_content_primitive"]], "as_content_primitive() (sympy.core.mul.mul method)": [[68, "sympy.core.mul.Mul.as_content_primitive"]], "as_content_primitive() (sympy.core.numbers.rational method)": [[68, "sympy.core.numbers.Rational.as_content_primitive"]], "as_content_primitive() (sympy.core.power.pow method)": [[68, "sympy.core.power.Pow.as_content_primitive"]], "as_dummy() (sympy.core.basic.basic method)": [[68, "sympy.core.basic.Basic.as_dummy"]], "as_expr() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.as_expr"]], "as_expr() (sympy.core.numbers.algebraicnumber method)": [[68, "sympy.core.numbers.AlgebraicNumber.as_expr"]], "as_finite_difference() (sympy.core.function.derivative method)": [[68, "sympy.core.function.Derivative.as_finite_difference"]], "as_independent() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.as_independent"]], "as_leading_term() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.as_leading_term"]], "as_numer_denom() (sympy.core.add.add method)": [[68, "sympy.core.add.Add.as_numer_denom"]], "as_numer_denom() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.as_numer_denom"]], "as_ordered_factors() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.as_ordered_factors"]], "as_ordered_factors() (sympy.core.mul.mul method)": [[68, "sympy.core.mul.Mul.as_ordered_factors"]], "as_ordered_terms() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.as_ordered_terms"]], "as_poly() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.as_poly"]], "as_poly() (sympy.core.numbers.algebraicnumber method)": [[68, "sympy.core.numbers.AlgebraicNumber.as_poly"]], "as_poly() (sympy.core.relational.equality method)": [[68, "sympy.core.relational.Equality.as_poly"]], "as_powers_dict() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.as_powers_dict"]], "as_real_imag() (sympy.core.add.add method)": [[68, "sympy.core.add.Add.as_real_imag"]], "as_real_imag() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.as_real_imag"]], "as_terms() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.as_terms"]], "as_two_terms() (sympy.core.add.add method)": [[68, "sympy.core.add.Add.as_two_terms"]], "as_two_terms() (sympy.core.mul.mul method)": [[68, "sympy.core.mul.Mul.as_two_terms"]], "aseries() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.aseries"]], "assumptions0 (sympy.core.basic.basic property)": [[68, "sympy.core.basic.Basic.assumptions0"]], "atoms() (sympy.core.basic.basic method)": [[68, "sympy.core.basic.Basic.atoms"]], "bottom_up() (in module sympy.core.traversal)": [[68, "sympy.core.traversal.bottom_up"]], "bound_symbols (sympy.core.function.lambda property)": [[68, "sympy.core.function.Lambda.bound_symbols"]], "bound_symbols (sympy.core.function.subs property)": [[68, "sympy.core.function.Subs.bound_symbols"]], "cancel() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.cancel"]], "canonical (sympy.core.relational.relational property)": [[68, "sympy.core.relational.Relational.canonical"]], "canonical_variables (sympy.core.basic.basic property)": [[68, "sympy.core.basic.Basic.canonical_variables"]], "class_key() (sympy.core.basic.basic class method)": [[68, "sympy.core.basic.Basic.class_key"]], "coeff() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.coeff"]], "coeffs() (sympy.core.numbers.algebraicnumber method)": [[68, "sympy.core.numbers.AlgebraicNumber.coeffs"]], "cofactors() (sympy.core.numbers.number method)": [[68, "sympy.core.numbers.Number.cofactors"]], "collect() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.collect"]], "combsimp() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.combsimp"]], "commutative": [[68, "term-commutative"]], "compare() (sympy.core.basic.basic method)": [[68, "sympy.core.basic.Basic.compare"]], "complex": [[68, "term-complex"]], "composite": [[68, "term-composite"]], "compute_leading_term() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.compute_leading_term"]], "conjugate() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.conjugate"]], "could_extract_minus_sign() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.could_extract_minus_sign"]], "count() (sympy.core.basic.basic method)": [[68, "sympy.core.basic.Basic.count"]], "count_ops() (in module sympy.core.function)": [[68, "sympy.core.function.count_ops"]], "count_ops() (sympy.core.basic.basic method)": [[68, "sympy.core.basic.Basic.count_ops"]], "default_sort_key() (in module sympy.core.sorting)": [[68, "sympy.core.sorting.default_sort_key"]], "diff() (in module sympy.core.function)": [[68, "sympy.core.function.diff"]], "doit() (sympy.core.basic.basic method)": [[68, "sympy.core.basic.Basic.doit"]], "doit_numerically() (sympy.core.function.derivative method)": [[68, "sympy.core.function.Derivative.doit_numerically"]], "dummy_eq() (sympy.core.basic.basic method)": [[68, "sympy.core.basic.Basic.dummy_eq"]], "equal_valued() (in module sympy.core.numbers)": [[68, "sympy.core.numbers.equal_valued"]], "equals() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.equals"]], "equals() (sympy.core.relational.relational method)": [[68, "sympy.core.relational.Relational.equals"]], "evalf() (sympy.core.evalf.evalfmixin method)": [[68, "sympy.core.evalf.EvalfMixin.evalf"]], "even": [[68, "term-even"]], "expand() (in module sympy.core.function)": [[68, "sympy.core.function.expand"]], "expand() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.expand"]], "expand_complex() (in module sympy.core.function)": [[68, "sympy.core.function.expand_complex"]], "expand_func() (in module sympy.core.function)": [[68, "sympy.core.function.expand_func"]], "expand_log() (in module sympy.core.function)": [[68, "sympy.core.function.expand_log"]], "expand_mul() (in module sympy.core.function)": [[68, "sympy.core.function.expand_mul"]], "expand_multinomial() (in module sympy.core.function)": [[68, "sympy.core.function.expand_multinomial"]], "expand_power_base() (in module sympy.core.function)": [[68, "sympy.core.function.expand_power_base"]], "expand_power_exp() (in module sympy.core.function)": [[68, "sympy.core.function.expand_power_exp"]], "expand_trig() (in module sympy.core.function)": [[68, "sympy.core.function.expand_trig"]], "expr (sympy.core.function.lambda property)": [[68, "sympy.core.function.Lambda.expr"]], "expr (sympy.core.function.subs property)": [[68, "sympy.core.function.Subs.expr"]], "expr_free_symbols (sympy.core.expr.expr property)": [[68, "sympy.core.expr.Expr.expr_free_symbols"]], "extended_negative": [[68, "term-extended_negative"]], "extended_nonnegative": [[68, "term-extended_nonnegative"]], "extended_nonpositive": [[68, "term-extended_nonpositive"]], "extended_nonzero": [[68, "term-extended_nonzero"]], "extended_positive": [[68, "term-extended_positive"]], "extended_real": [[68, "term-extended_real"]], "extract_additively() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.extract_additively"]], "extract_branch_factor() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.extract_branch_factor"]], "extract_leading_order() (sympy.core.add.add method)": [[68, "sympy.core.add.Add.extract_leading_order"]], "extract_multiplicatively() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.extract_multiplicatively"]], "factor() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.factor"]], "factor_terms() (in module sympy.core.exprtools)": [[68, "sympy.core.exprtools.factor_terms"]], "factors() (sympy.core.numbers.rational method)": [[68, "sympy.core.numbers.Rational.factors"]], "fdiff() (sympy.core.function.function method)": [[68, "sympy.core.function.Function.fdiff"]], "field_element() (sympy.core.numbers.algebraicnumber method)": [[68, "sympy.core.numbers.AlgebraicNumber.field_element"]], "find() (sympy.core.basic.basic method)": [[68, "sympy.core.basic.Basic.find"]], "finite": [[68, "term-finite"]], "flatten() (sympy.core.add.add class method)": [[68, "sympy.core.add.Add.flatten"]], "flatten() (sympy.core.mul.mul class method)": [[68, "sympy.core.mul.Mul.flatten"]], "fourier_series() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.fourier_series"]], "fps() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.fps"]], "free_symbols (sympy.core.basic.basic property)": [[68, "sympy.core.basic.Basic.free_symbols"]], "fromiter() (sympy.core.basic.basic class method)": [[68, "sympy.core.basic.Basic.fromiter"]], "func (sympy.core.basic.basic property)": [[68, "sympy.core.basic.Basic.func"]], "gammasimp() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.gammasimp"]], "gcd() (sympy.core.numbers.number method)": [[68, "sympy.core.numbers.Number.gcd"]], "gcd_terms() (in module sympy.core.exprtools)": [[68, "sympy.core.exprtools.gcd_terms"]], "get() (sympy.core.containers.dict method)": [[68, "sympy.core.containers.Dict.get"]], "geto() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.getO"]], "getn() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.getn"]], "has() (sympy.core.basic.basic method)": [[68, "sympy.core.basic.Basic.has"]], "has_free() (sympy.core.basic.basic method)": [[68, "sympy.core.basic.Basic.has_free"]], "has_xfree() (sympy.core.basic.basic method)": [[68, "sympy.core.basic.Basic.has_xfree"]], "hermitian": [[68, "term-hermitian"]], "igcd() (in module sympy.core.intfunc)": [[68, "sympy.core.intfunc.igcd"]], "igcd_lehmer() (in module sympy.core.intfunc)": [[68, "sympy.core.intfunc.igcd_lehmer"]], "igcdex() (in module sympy.core.intfunc)": [[68, "sympy.core.intfunc.igcdex"]], "ilcm() (in module sympy.core.intfunc)": [[68, "sympy.core.intfunc.ilcm"]], "imaginary": [[68, "term-imaginary"]], "index() (sympy.core.containers.tuple method)": [[68, "sympy.core.containers.Tuple.index"]], "infinite": [[68, "term-infinite"]], "integer": [[68, "term-integer"]], "integer_log() (in module sympy.core.intfunc)": [[68, "sympy.core.intfunc.integer_log"]], "integer_nthroot() (in module sympy.core.intfunc)": [[68, "sympy.core.intfunc.integer_nthroot"]], "integrate() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.integrate"]], "integrate() (sympy.core.relational.equality method)": [[68, "sympy.core.relational.Equality.integrate"]], "invert() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.invert"]], "irrational": [[68, "term-irrational"]], "is_algebraic_expr() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.is_algebraic_expr"]], "is_aliased (sympy.core.numbers.algebraicnumber property)": [[68, "sympy.core.numbers.AlgebraicNumber.is_aliased"]], "is_comparable (sympy.core.basic.basic property)": [[68, "sympy.core.basic.Basic.is_comparable"]], "is_constant() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.is_constant"]], "is_identity (sympy.core.function.lambda property)": [[68, "sympy.core.function.Lambda.is_identity"]], "is_meromorphic() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.is_meromorphic"]], "is_number (sympy.core.expr.expr property)": [[68, "sympy.core.expr.Expr.is_number"]], "is_polynomial() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.is_polynomial"]], "is_primitive_element (sympy.core.numbers.algebraicnumber property)": [[68, "sympy.core.numbers.AlgebraicNumber.is_primitive_element"]], "is_rational_function() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.is_rational_function"]], "is_same() (sympy.core.basic.basic method)": [[68, "sympy.core.basic.Basic.is_same"]], "is_singular() (sympy.core.function.function class method)": [[68, "sympy.core.function.Function.is_singular"]], "isqrt() (in module sympy.core.intfunc)": [[68, "sympy.core.intfunc.isqrt"]], "items() (sympy.core.containers.dict method)": [[68, "sympy.core.containers.Dict.items"]], "keys() (sympy.core.containers.dict method)": [[68, "sympy.core.containers.Dict.keys"]], "kind (sympy.core.containers.tuple property)": [[68, "sympy.core.containers.Tuple.kind"]], "lcm() (sympy.core.numbers.number method)": [[68, "sympy.core.numbers.Number.lcm"]], "leadterm() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.leadterm"]], "lhs (sympy.core.relational.relational property)": [[68, "sympy.core.relational.Relational.lhs"]], "limit() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.limit"]], "limit_denominator() (sympy.core.numbers.rational method)": [[68, "sympy.core.numbers.Rational.limit_denominator"]], "lseries() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.lseries"]], "match() (sympy.core.basic.basic method)": [[68, "sympy.core.basic.Basic.match"]], "matches() (sympy.core.basic.basic method)": [[68, "sympy.core.basic.Basic.matches"]], "minpoly_of_element() (sympy.core.numbers.algebraicnumber method)": [[68, "sympy.core.numbers.AlgebraicNumber.minpoly_of_element"]], "mod_inverse() (in module sympy.core.intfunc)": [[68, "sympy.core.intfunc.mod_inverse"]], "mod_inverse() (in module sympy.core.numbers)": [[68, "sympy.core.numbers.mod_inverse"]], "n() (sympy.core.evalf.evalfmixin method)": [[68, "sympy.core.evalf.EvalfMixin.n"]], "nargs (sympy.core.function.functionclass property)": [[68, "sympy.core.function.FunctionClass.nargs"]], "native_coeffs() (sympy.core.numbers.algebraicnumber method)": [[68, "sympy.core.numbers.AlgebraicNumber.native_coeffs"]], "negated (sympy.core.relational.relational property)": [[68, "sympy.core.relational.Relational.negated"]], "negative": [[68, "term-negative"]], "nfloat() (in module sympy.core.function)": [[68, "sympy.core.function.nfloat"]], "nonnegative": [[68, "term-nonnegative"]], "nonpositive": [[68, "term-nonpositive"]], "nonzero": [[68, "term-nonzero"]], "normal() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.normal"]], "nseries() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.nseries"]], "nsimplify() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.nsimplify"]], "num_digits() (in module sympy.core.intfunc)": [[68, "sympy.core.intfunc.num_digits"]], "odd": [[68, "term-odd"]], "ordered() (in module sympy.core.sorting)": [[68, "sympy.core.sorting.ordered"]], "point (sympy.core.function.subs property)": [[68, "sympy.core.function.Subs.point"]], "positive": [[68, "term-positive"]], "postorder_traversal() (in module sympy.core.traversal)": [[68, "sympy.core.traversal.postorder_traversal"]], "powsimp() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.powsimp"]], "preorder_traversal() (in module sympy.core.traversal)": [[68, "sympy.core.traversal.preorder_traversal"]], "prime": [[68, "term-prime"]], "primitive() (sympy.core.add.add method)": [[68, "sympy.core.add.Add.primitive"]], "primitive() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.primitive"]], "primitive_element() (sympy.core.numbers.algebraicnumber method)": [[68, "sympy.core.numbers.AlgebraicNumber.primitive_element"]], "prod() (in module sympy.core.mul)": [[68, "sympy.core.mul.prod"]], "radsimp() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.radsimp"]], "random_complex_number() (in module sympy.core.random)": [[68, "sympy.core.random.random_complex_number"]], "rational": [[68, "term-rational"]], "ratsimp() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.ratsimp"]], "rcall() (sympy.core.basic.basic method)": [[68, "sympy.core.basic.Basic.rcall"]], "real": [[68, "term-real"]], "refine() (sympy.core.basic.basic method)": [[68, "sympy.core.basic.Basic.refine"]], "removeo() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.removeO"]], "replace() (sympy.core.basic.basic method)": [[68, "sympy.core.basic.Basic.replace"]], "reversed (sympy.core.relational.relational property)": [[68, "sympy.core.relational.Relational.reversed"]], "reversedsign (sympy.core.relational.relational property)": [[68, "sympy.core.relational.Relational.reversedsign"]], "rewrite() (sympy.core.basic.basic method)": [[68, "sympy.core.basic.Basic.rewrite"]], "rhs (sympy.core.relational.relational property)": [[68, "sympy.core.relational.Relational.rhs"]], "round() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.round"]], "separate() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.separate"]], "series() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.series"]], "seterr() (in module sympy.core.numbers)": [[68, "sympy.core.numbers.seterr"]], "signature (sympy.core.function.lambda property)": [[68, "sympy.core.function.Lambda.signature"]], "simplify() (sympy.core.basic.basic method)": [[68, "sympy.core.basic.Basic.simplify"]], "sort_key() (sympy.core.basic.basic method)": [[68, "sympy.core.basic.Basic.sort_key"]], "strict (sympy.core.relational.relational property)": [[68, "sympy.core.relational.Relational.strict"]], "subs() (sympy.core.basic.basic method)": [[68, "sympy.core.basic.Basic.subs"]], "symbols() (in module sympy.core.symbol)": [[68, "sympy.core.symbol.symbols"]], "sympify() (in module sympy.core.sympify)": [[68, "sympy.core.sympify.sympify"]], "sympy.core.add": [[68, "module-sympy.core.add"]], "sympy.core.assumptions": [[68, "module-sympy.core.assumptions"]], "sympy.core.basic": [[68, "module-sympy.core.basic"]], "sympy.core.cache": [[68, "module-sympy.core.cache"]], "sympy.core.containers": [[68, "module-sympy.core.containers"]], "sympy.core.evalf": [[68, "module-sympy.core.evalf"]], "sympy.core.expr": [[68, "module-sympy.core.expr"]], "sympy.core.exprtools": [[68, "module-sympy.core.exprtools"]], "sympy.core.function": [[68, "module-sympy.core.function"]], "sympy.core.intfunc": [[68, "module-sympy.core.intfunc"]], "sympy.core.kind": [[68, "module-sympy.core.kind"]], "sympy.core.mod": [[68, "module-sympy.core.mod"]], "sympy.core.mul": [[68, "module-sympy.core.mul"]], "sympy.core.multidimensional": [[68, "module-sympy.core.multidimensional"]], "sympy.core.numbers": [[68, "module-sympy.core.numbers"]], "sympy.core.power": [[68, "module-sympy.core.power"]], "sympy.core.random": [[68, "module-sympy.core.random"]], "sympy.core.relational": [[68, "module-sympy.core.relational"]], "sympy.core.singleton": [[68, "module-sympy.core.singleton"]], "sympy.core.symbol": [[68, "module-sympy.core.symbol"]], "sympy.core.sympify": [[68, "module-sympy.core.sympify"]], "sympy.core.traversal": [[68, "module-sympy.core.traversal"]], "taylor_term() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.taylor_term"]], "test_derivative_numerically() (in module sympy.core.random)": [[68, "sympy.core.random.test_derivative_numerically"]], "to_algebraic_integer() (sympy.core.numbers.algebraicnumber method)": [[68, "sympy.core.numbers.AlgebraicNumber.to_algebraic_integer"]], "to_primitive_element() (sympy.core.numbers.algebraicnumber method)": [[68, "sympy.core.numbers.AlgebraicNumber.to_primitive_element"]], "to_root() (sympy.core.numbers.algebraicnumber method)": [[68, "sympy.core.numbers.AlgebraicNumber.to_root"]], "together() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.together"]], "trailing() (in module sympy.core.intfunc)": [[68, "sympy.core.intfunc.trailing"]], "transcendental": [[68, "term-transcendental"]], "trigsimp() (sympy.core.expr.expr method)": [[68, "sympy.core.expr.Expr.trigsimp"]], "tuple_count() (sympy.core.containers.tuple method)": [[68, "sympy.core.containers.Tuple.tuple_count"]], "use() (in module sympy.core.traversal)": [[68, "sympy.core.traversal.use"]], "values() (sympy.core.containers.dict method)": [[68, "sympy.core.containers.Dict.values"]], "var() (in module sympy.core.symbol)": [[68, "sympy.core.symbol.var"]], "variables (sympy.core.function.lambda property)": [[68, "sympy.core.function.Lambda.variables"]], "variables (sympy.core.function.subs property)": [[68, "sympy.core.function.Subs.variables"]], "vectorize (class in sympy.core.multidimensional)": [[68, "sympy.core.multidimensional.vectorize"]], "verify_numerically() (in module sympy.core.random)": [[68, "sympy.core.random.verify_numerically"]], "walk() (in module sympy.core.traversal)": [[68, "sympy.core.traversal.walk"]], "weak (sympy.core.relational.relational property)": [[68, "sympy.core.relational.Relational.weak"]], "xreplace() (sympy.core.basic.basic method)": [[68, "sympy.core.basic.Basic.xreplace"]], "zero": [[68, "term-zero"]], "az() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.AZ"]], "bifid5_square() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.bifid5_square"]], "bifid6_square() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.bifid6_square"]], "check_and_join() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.check_and_join"]], "cycle_list() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.cycle_list"]], "decipher_affine() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.decipher_affine"]], "decipher_atbash() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.decipher_atbash"]], "decipher_bifid() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.decipher_bifid"]], "decipher_bifid5() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.decipher_bifid5"]], "decipher_bifid6() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.decipher_bifid6"]], "decipher_elgamal() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.decipher_elgamal"]], "decipher_gm() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.decipher_gm"]], "decipher_hill() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.decipher_hill"]], "decipher_kid_rsa() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.decipher_kid_rsa"]], "decipher_railfence() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.decipher_railfence"]], "decipher_rot13() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.decipher_rot13"]], "decipher_rsa() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.decipher_rsa"]], "decipher_shift() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.decipher_shift"]], "decipher_vigenere() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.decipher_vigenere"]], "decode_morse() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.decode_morse"]], "dh_private_key() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.dh_private_key"]], "dh_public_key() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.dh_public_key"]], "dh_shared_key() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.dh_shared_key"]], "elgamal_private_key() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.elgamal_private_key"]], "elgamal_public_key() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.elgamal_public_key"]], "encipher_affine() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.encipher_affine"]], "encipher_atbash() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.encipher_atbash"]], "encipher_bifid() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.encipher_bifid"]], "encipher_bifid5() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.encipher_bifid5"]], "encipher_bifid6() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.encipher_bifid6"]], "encipher_elgamal() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.encipher_elgamal"]], "encipher_gm() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.encipher_gm"]], "encipher_hill() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.encipher_hill"]], "encipher_kid_rsa() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.encipher_kid_rsa"]], "encipher_railfence() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.encipher_railfence"]], "encipher_rot13() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.encipher_rot13"]], "encipher_rsa() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.encipher_rsa"]], "encipher_shift() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.encipher_shift"]], "encipher_substitution() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.encipher_substitution"]], "encipher_vigenere() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.encipher_vigenere"]], "encode_morse() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.encode_morse"]], "gm_private_key() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.gm_private_key"]], "gm_public_key() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.gm_public_key"]], "kid_rsa_private_key() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.kid_rsa_private_key"]], "kid_rsa_public_key() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.kid_rsa_public_key"]], "lfsr_autocorrelation() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.lfsr_autocorrelation"]], "lfsr_connection_polynomial() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.lfsr_connection_polynomial"]], "lfsr_sequence() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.lfsr_sequence"]], "padded_key() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.padded_key"]], "rsa_private_key() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.rsa_private_key"]], "rsa_public_key() (in module sympy.crypto.crypto)": [[69, "sympy.crypto.crypto.rsa_public_key"]], "sympy.crypto.crypto": [[69, "module-sympy.crypto.crypto"]], "basecovarderivativeop (class in sympy.diffgeom)": [[70, "sympy.diffgeom.BaseCovarDerivativeOp"]], "basescalarfield (class in sympy.diffgeom)": [[70, "sympy.diffgeom.BaseScalarField"]], "basevectorfield (class in sympy.diffgeom)": [[70, "sympy.diffgeom.BaseVectorField"]], "commutator (class in sympy.diffgeom)": [[70, "sympy.diffgeom.Commutator"]], "coordsystem (class in sympy.diffgeom)": [[70, "sympy.diffgeom.CoordSystem"]], "coordinatesymbol (class in sympy.diffgeom)": [[70, "sympy.diffgeom.CoordinateSymbol"]], "covarderivativeop (class in sympy.diffgeom)": [[70, "sympy.diffgeom.CovarDerivativeOp"]], "differential (class in sympy.diffgeom)": [[70, "sympy.diffgeom.Differential"]], "liederivative (class in sympy.diffgeom)": [[70, "sympy.diffgeom.LieDerivative"]], "manifold (class in sympy.diffgeom)": [[70, "sympy.diffgeom.Manifold"]], "patch (class in sympy.diffgeom)": [[70, "sympy.diffgeom.Patch"]], "point (class in sympy.diffgeom)": [[70, "sympy.diffgeom.Point"]], "tensorproduct (class in sympy.diffgeom)": [[70, "sympy.diffgeom.TensorProduct"]], "wedgeproduct (class in sympy.diffgeom)": [[70, "sympy.diffgeom.WedgeProduct"]], "base_oneform() (sympy.diffgeom.coordsystem method)": [[70, "sympy.diffgeom.CoordSystem.base_oneform"]], "base_oneforms() (sympy.diffgeom.coordsystem method)": [[70, "sympy.diffgeom.CoordSystem.base_oneforms"]], "base_scalar() (sympy.diffgeom.coordsystem method)": [[70, "sympy.diffgeom.CoordSystem.base_scalar"]], "base_scalars() (sympy.diffgeom.coordsystem method)": [[70, "sympy.diffgeom.CoordSystem.base_scalars"]], "base_vector() (sympy.diffgeom.coordsystem method)": [[70, "sympy.diffgeom.CoordSystem.base_vector"]], "base_vectors() (sympy.diffgeom.coordsystem method)": [[70, "sympy.diffgeom.CoordSystem.base_vectors"]], "coord_function() (sympy.diffgeom.coordsystem method)": [[70, "sympy.diffgeom.CoordSystem.coord_function"]], "coord_functions() (sympy.diffgeom.coordsystem method)": [[70, "sympy.diffgeom.CoordSystem.coord_functions"]], "coord_tuple_transform_to() (sympy.diffgeom.coordsystem method)": [[70, "sympy.diffgeom.CoordSystem.coord_tuple_transform_to"]], "coords() (sympy.diffgeom.point method)": [[70, "sympy.diffgeom.Point.coords"]], "intcurve_diffequ() (in module sympy.diffgeom)": [[70, "sympy.diffgeom.intcurve_diffequ"]], "intcurve_series() (in module sympy.diffgeom)": [[70, "sympy.diffgeom.intcurve_series"]], "jacobian() (sympy.diffgeom.coordsystem method)": [[70, "sympy.diffgeom.CoordSystem.jacobian"]], "jacobian_determinant() (sympy.diffgeom.coordsystem method)": [[70, "sympy.diffgeom.CoordSystem.jacobian_determinant"]], "jacobian_matrix() (sympy.diffgeom.coordsystem method)": [[70, "sympy.diffgeom.CoordSystem.jacobian_matrix"]], "metric_to_christoffel_1st() (in module sympy.diffgeom)": [[70, "sympy.diffgeom.metric_to_Christoffel_1st"]], "metric_to_christoffel_2nd() (in module sympy.diffgeom)": [[70, "sympy.diffgeom.metric_to_Christoffel_2nd"]], "metric_to_ricci_components() (in module sympy.diffgeom)": [[70, "sympy.diffgeom.metric_to_Ricci_components"]], "metric_to_riemann_components() (in module sympy.diffgeom)": [[70, "sympy.diffgeom.metric_to_Riemann_components"]], "point() (sympy.diffgeom.coordsystem method)": [[70, "sympy.diffgeom.CoordSystem.point"]], "point_to_coords() (sympy.diffgeom.coordsystem method)": [[70, "sympy.diffgeom.CoordSystem.point_to_coords"]], "sympy.diffgeom": [[70, "module-sympy.diffgeom"]], "transform() (sympy.diffgeom.coordsystem method)": [[70, "sympy.diffgeom.CoordSystem.transform"]], "transformation() (sympy.diffgeom.coordsystem method)": [[70, "sympy.diffgeom.CoordSystem.transformation"]], "twoform_to_matrix() (in module sympy.diffgeom)": [[70, "sympy.diffgeom.twoform_to_matrix"]], "vectors_in_basis() (in module sympy.diffgeom)": [[70, "sympy.diffgeom.vectors_in_basis"]], "convolution() (in module sympy.discrete.convolutions)": [[71, "sympy.discrete.convolutions.convolution"]], "convolution_fft() (in module sympy.discrete.convolutions)": [[71, "sympy.discrete.convolutions.convolution_fft"]], "convolution_fwht() (in module sympy.discrete.convolutions)": [[71, "sympy.discrete.convolutions.convolution_fwht"]], "convolution_ntt() (in module sympy.discrete.convolutions)": [[71, "sympy.discrete.convolutions.convolution_ntt"]], "convolution_subset() (in module sympy.discrete.convolutions)": [[71, "sympy.discrete.convolutions.convolution_subset"]], "covering_product() (in module sympy.discrete.convolutions)": [[71, "sympy.discrete.convolutions.covering_product"]], "fft() (in module sympy.discrete.transforms)": [[71, "sympy.discrete.transforms.fft"]], "fwht() (in module sympy.discrete.transforms)": [[71, "sympy.discrete.transforms.fwht"]], "ifft() (in module sympy.discrete.transforms)": [[71, "sympy.discrete.transforms.ifft"]], "ifwht() (in module sympy.discrete.transforms)": [[71, "sympy.discrete.transforms.ifwht"]], "intersecting_product() (in module sympy.discrete.convolutions)": [[71, "sympy.discrete.convolutions.intersecting_product"]], "intt() (in module sympy.discrete.transforms)": [[71, "sympy.discrete.transforms.intt"]], "inverse_mobius_transform() (in module sympy.discrete.transforms)": [[71, "sympy.discrete.transforms.inverse_mobius_transform"]], "mobius_transform() (in module sympy.discrete.transforms)": [[71, "sympy.discrete.transforms.mobius_transform"]], "ntt() (in module sympy.discrete.transforms)": [[71, "sympy.discrete.transforms.ntt"]], "sympy.discrete": [[71, "module-sympy.discrete"]], "sympy.discrete.convolutions": [[71, "module-sympy.discrete.convolutions"]], "sympy.discrete.transforms": [[71, "module-sympy.discrete.transforms"]], "fallingfactorial (class in sympy.functions.combinatorial.factorials)": [[73, "sympy.functions.combinatorial.factorials.FallingFactorial"]], "multifactorial (class in sympy.functions.combinatorial.factorials)": [[73, "sympy.functions.combinatorial.factorials.MultiFactorial"]], "risingfactorial (class in sympy.functions.combinatorial.factorials)": [[73, "sympy.functions.combinatorial.factorials.RisingFactorial"]], "andre (class in sympy.functions.combinatorial.numbers)": [[73, "sympy.functions.combinatorial.numbers.andre"]], "bell (class in sympy.functions.combinatorial.numbers)": [[73, "sympy.functions.combinatorial.numbers.bell"]], "bernoulli (class in sympy.functions.combinatorial.numbers)": [[73, "sympy.functions.combinatorial.numbers.bernoulli"]], "binomial (class in sympy.functions.combinatorial.factorials)": [[73, "sympy.functions.combinatorial.factorials.binomial"]], "catalan (class in sympy.functions.combinatorial.numbers)": [[73, "sympy.functions.combinatorial.numbers.catalan"]], "euler (class in sympy.functions.combinatorial.numbers)": [[73, "sympy.functions.combinatorial.numbers.euler"]], "factorial (class in sympy.functions.combinatorial.factorials)": [[73, "sympy.functions.combinatorial.factorials.factorial"]], "factorial2 (class in sympy.functions.combinatorial.factorials)": [[73, "sympy.functions.combinatorial.factorials.factorial2"]], "fibonacci (class in sympy.functions.combinatorial.numbers)": [[73, "sympy.functions.combinatorial.numbers.fibonacci"]], "genocchi (class in sympy.functions.combinatorial.numbers)": [[73, "sympy.functions.combinatorial.numbers.genocchi"]], "harmonic (class in sympy.functions.combinatorial.numbers)": [[73, "sympy.functions.combinatorial.numbers.harmonic"]], "lucas (class in sympy.functions.combinatorial.numbers)": [[73, "sympy.functions.combinatorial.numbers.lucas"]], "nc() (in module sympy.functions.combinatorial.numbers)": [[73, "sympy.functions.combinatorial.numbers.nC"]], "np() (in module sympy.functions.combinatorial.numbers)": [[73, "sympy.functions.combinatorial.numbers.nP"]], "nt() (in module sympy.functions.combinatorial.numbers)": [[73, "sympy.functions.combinatorial.numbers.nT"]], "partition (class in sympy.functions.combinatorial.numbers)": [[73, "sympy.functions.combinatorial.numbers.partition"]], "stirling() (in module sympy.functions.combinatorial.numbers)": [[73, "sympy.functions.combinatorial.numbers.stirling"]], "subfactorial (class in sympy.functions.combinatorial.factorials)": [[73, "sympy.functions.combinatorial.factorials.subfactorial"]], "tribonacci (class in sympy.functions.combinatorial.numbers)": [[73, "sympy.functions.combinatorial.numbers.tribonacci"]], "abs (class in sympy.functions.elementary.complexes)": [[74, "sympy.functions.elementary.complexes.Abs"]], "exprcondpair (class in sympy.functions.elementary.piecewise)": [[74, "sympy.functions.elementary.piecewise.ExprCondPair"]], "hyperbolicfunction (class in sympy.functions.elementary.hyperbolic)": [[74, "sympy.functions.elementary.hyperbolic.HyperbolicFunction"]], "identityfunction (class in sympy.functions.elementary.miscellaneous)": [[74, "sympy.functions.elementary.miscellaneous.IdentityFunction"]], "lambertw (class in sympy.functions.elementary.exponential)": [[74, "sympy.functions.elementary.exponential.LambertW"]], "max (class in sympy.functions.elementary.miscellaneous)": [[74, "sympy.functions.elementary.miscellaneous.Max"]], "min (class in sympy.functions.elementary.miscellaneous)": [[74, "sympy.functions.elementary.miscellaneous.Min"]], "piecewise (class in sympy.functions.elementary.piecewise)": [[74, "sympy.functions.elementary.piecewise.Piecewise"]], "roundfunction (class in sympy.functions.elementary.integers)": [[74, "sympy.functions.elementary.integers.RoundFunction"]], "_eval_integral() (sympy.functions.elementary.piecewise.piecewise method)": [[74, "sympy.functions.elementary.piecewise.Piecewise._eval_integral"]], "acos (class in sympy.functions.elementary.trigonometric)": [[74, "sympy.functions.elementary.trigonometric.acos"]], "acosh (class in sympy.functions.elementary.hyperbolic)": [[74, "sympy.functions.elementary.hyperbolic.acosh"]], "acot (class in sympy.functions.elementary.trigonometric)": [[74, "sympy.functions.elementary.trigonometric.acot"]], "acoth (class in sympy.functions.elementary.hyperbolic)": [[74, "sympy.functions.elementary.hyperbolic.acoth"]], "acsc (class in sympy.functions.elementary.trigonometric)": [[74, "sympy.functions.elementary.trigonometric.acsc"]], "acsch (class in sympy.functions.elementary.hyperbolic)": [[74, "sympy.functions.elementary.hyperbolic.acsch"]], "arg (class in sympy.functions.elementary.complexes)": [[74, "sympy.functions.elementary.complexes.arg"]], "as_base_exp() (sympy.functions.elementary.exponential.log method)": [[74, "sympy.functions.elementary.exponential.log.as_base_exp"]], "as_expr_set_pairs() (sympy.functions.elementary.piecewise.piecewise method)": [[74, "sympy.functions.elementary.piecewise.Piecewise.as_expr_set_pairs"]], "as_real_imag() (sympy.functions.elementary.complexes.im method)": [[74, "sympy.functions.elementary.complexes.im.as_real_imag"]], "as_real_imag() (sympy.functions.elementary.complexes.re method)": [[74, "sympy.functions.elementary.complexes.re.as_real_imag"]], "as_real_imag() (sympy.functions.elementary.exponential.exp method)": [[74, "sympy.functions.elementary.exponential.exp.as_real_imag"]], "as_real_imag() (sympy.functions.elementary.exponential.log method)": [[74, "sympy.functions.elementary.exponential.log.as_real_imag"]], "as_real_imag() (sympy.functions.elementary.hyperbolic.sinh method)": [[74, "sympy.functions.elementary.hyperbolic.sinh.as_real_imag"]], "asec (class in sympy.functions.elementary.trigonometric)": [[74, "sympy.functions.elementary.trigonometric.asec"]], "asech (class in sympy.functions.elementary.hyperbolic)": [[74, "sympy.functions.elementary.hyperbolic.asech"]], "asin (class in sympy.functions.elementary.trigonometric)": [[74, "sympy.functions.elementary.trigonometric.asin"]], "asinh (class in sympy.functions.elementary.hyperbolic)": [[74, "sympy.functions.elementary.hyperbolic.asinh"]], "atan (class in sympy.functions.elementary.trigonometric)": [[74, "sympy.functions.elementary.trigonometric.atan"]], "atan2 (class in sympy.functions.elementary.trigonometric)": [[74, "sympy.functions.elementary.trigonometric.atan2"]], "atanh (class in sympy.functions.elementary.hyperbolic)": [[74, "sympy.functions.elementary.hyperbolic.atanh"]], "base (sympy.functions.elementary.exponential.exp property)": [[74, "sympy.functions.elementary.exponential.exp.base"]], "cbrt() (in module sympy.functions.elementary.miscellaneous)": [[74, "sympy.functions.elementary.miscellaneous.cbrt"]], "ceiling (class in sympy.functions.elementary.integers)": [[74, "sympy.functions.elementary.integers.ceiling"]], "cond (sympy.functions.elementary.piecewise.exprcondpair property)": [[74, "sympy.functions.elementary.piecewise.ExprCondPair.cond"]], "conjugate (class in sympy.functions.elementary.complexes)": [[74, "sympy.functions.elementary.complexes.conjugate"]], "cos (class in sympy.functions.elementary.trigonometric)": [[74, "sympy.functions.elementary.trigonometric.cos"]], "cosh (class in sympy.functions.elementary.hyperbolic)": [[74, "sympy.functions.elementary.hyperbolic.cosh"]], "cot (class in sympy.functions.elementary.trigonometric)": [[74, "sympy.functions.elementary.trigonometric.cot"]], "coth (class in sympy.functions.elementary.hyperbolic)": [[74, "sympy.functions.elementary.hyperbolic.coth"]], "csc (class in sympy.functions.elementary.trigonometric)": [[74, "sympy.functions.elementary.trigonometric.csc"]], "csch (class in sympy.functions.elementary.hyperbolic)": [[74, "sympy.functions.elementary.hyperbolic.csch"]], "doit() (sympy.functions.elementary.piecewise.piecewise method)": [[74, "sympy.functions.elementary.piecewise.Piecewise.doit"]], "eval() (sympy.functions.elementary.piecewise.piecewise class method)": [[74, "sympy.functions.elementary.piecewise.Piecewise.eval"]], "exp (class in sympy.functions.elementary.exponential)": [[74, "sympy.functions.elementary.exponential.exp"]], "exp_polar (class in sympy.functions.elementary.exponential)": [[74, "sympy.functions.elementary.exponential.exp_polar"]], "expr (sympy.functions.elementary.piecewise.exprcondpair property)": [[74, "sympy.functions.elementary.piecewise.ExprCondPair.expr"]], "fdiff() (sympy.functions.elementary.complexes.abs method)": [[74, "sympy.functions.elementary.complexes.Abs.fdiff"]], "fdiff() (sympy.functions.elementary.exponential.lambertw method)": [[74, "sympy.functions.elementary.exponential.LambertW.fdiff"]], "fdiff() (sympy.functions.elementary.exponential.exp method)": [[74, "sympy.functions.elementary.exponential.exp.fdiff"]], "fdiff() (sympy.functions.elementary.exponential.log method)": [[74, "sympy.functions.elementary.exponential.log.fdiff"]], "fdiff() (sympy.functions.elementary.hyperbolic.csch method)": [[74, "sympy.functions.elementary.hyperbolic.csch.fdiff"]], "fdiff() (sympy.functions.elementary.hyperbolic.sinh method)": [[74, "sympy.functions.elementary.hyperbolic.sinh.fdiff"]], "floor (class in sympy.functions.elementary.integers)": [[74, "sympy.functions.elementary.integers.floor"]], "frac (class in sympy.functions.elementary.integers)": [[74, "sympy.functions.elementary.integers.frac"]], "im (class in sympy.functions.elementary.complexes)": [[74, "sympy.functions.elementary.complexes.im"]], "inverse() (sympy.functions.elementary.exponential.log method)": [[74, "sympy.functions.elementary.exponential.log.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.acosh method)": [[74, "sympy.functions.elementary.hyperbolic.acosh.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.acoth method)": [[74, "sympy.functions.elementary.hyperbolic.acoth.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.acsch method)": [[74, "sympy.functions.elementary.hyperbolic.acsch.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.asech method)": [[74, "sympy.functions.elementary.hyperbolic.asech.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.asinh method)": [[74, "sympy.functions.elementary.hyperbolic.asinh.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.atanh method)": [[74, "sympy.functions.elementary.hyperbolic.atanh.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.coth method)": [[74, "sympy.functions.elementary.hyperbolic.coth.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.sinh method)": [[74, "sympy.functions.elementary.hyperbolic.sinh.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.tanh method)": [[74, "sympy.functions.elementary.hyperbolic.tanh.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.acos method)": [[74, "sympy.functions.elementary.trigonometric.acos.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.acot method)": [[74, "sympy.functions.elementary.trigonometric.acot.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.acsc method)": [[74, "sympy.functions.elementary.trigonometric.acsc.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.asec method)": [[74, "sympy.functions.elementary.trigonometric.asec.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.asin method)": [[74, "sympy.functions.elementary.trigonometric.asin.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.atan method)": [[74, "sympy.functions.elementary.trigonometric.atan.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.cot method)": [[74, "sympy.functions.elementary.trigonometric.cot.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.tan method)": [[74, "sympy.functions.elementary.trigonometric.tan.inverse"]], "log (class in sympy.functions.elementary.exponential)": [[74, "sympy.functions.elementary.exponential.log"]], "periodic_argument (class in sympy.functions.elementary.complexes)": [[74, "sympy.functions.elementary.complexes.periodic_argument"]], "piecewise_exclusive() (in module sympy.functions.elementary.piecewise)": [[74, "sympy.functions.elementary.piecewise.piecewise_exclusive"]], "piecewise_fold() (in module sympy.functions.elementary.piecewise)": [[74, "sympy.functions.elementary.piecewise.piecewise_fold"]], "piecewise_integrate() (sympy.functions.elementary.piecewise.piecewise method)": [[74, "sympy.functions.elementary.piecewise.Piecewise.piecewise_integrate"]], "polar_lift (class in sympy.functions.elementary.complexes)": [[74, "sympy.functions.elementary.complexes.polar_lift"]], "principal_branch (class in sympy.functions.elementary.complexes)": [[74, "sympy.functions.elementary.complexes.principal_branch"]], "re (class in sympy.functions.elementary.complexes)": [[74, "sympy.functions.elementary.complexes.re"]], "real_root() (in module sympy.functions.elementary.miscellaneous)": [[74, "sympy.functions.elementary.miscellaneous.real_root"]], "root() (in module sympy.functions.elementary.miscellaneous)": [[74, "sympy.functions.elementary.miscellaneous.root"]], "sec (class in sympy.functions.elementary.trigonometric)": [[74, "sympy.functions.elementary.trigonometric.sec"]], "sech (class in sympy.functions.elementary.hyperbolic)": [[74, "sympy.functions.elementary.hyperbolic.sech"]], "sign (class in sympy.functions.elementary.complexes)": [[74, "sympy.functions.elementary.complexes.sign"]], "sin (class in sympy.functions.elementary.trigonometric)": [[74, "sympy.functions.elementary.trigonometric.sin"]], "sinc (class in sympy.functions.elementary.trigonometric)": [[74, "sympy.functions.elementary.trigonometric.sinc"]], "sinh (class in sympy.functions.elementary.hyperbolic)": [[74, "sympy.functions.elementary.hyperbolic.sinh"]], "sqrt() (in module sympy.functions.elementary.miscellaneous)": [[74, "sympy.functions.elementary.miscellaneous.sqrt"]], "tan (class in sympy.functions.elementary.trigonometric)": [[74, "sympy.functions.elementary.trigonometric.tan"]], "tanh (class in sympy.functions.elementary.hyperbolic)": [[74, "sympy.functions.elementary.hyperbolic.tanh"]], "taylor_term() (sympy.functions.elementary.exponential.exp static method)": [[74, "sympy.functions.elementary.exponential.exp.taylor_term"]], "taylor_term() (sympy.functions.elementary.exponential.log static method)": [[74, "sympy.functions.elementary.exponential.log.taylor_term"]], "taylor_term() (sympy.functions.elementary.hyperbolic.csch static method)": [[74, "sympy.functions.elementary.hyperbolic.csch.taylor_term"]], "taylor_term() (sympy.functions.elementary.hyperbolic.sinh static method)": [[74, "sympy.functions.elementary.hyperbolic.sinh.taylor_term"]], "sympy.functions": [[75, "module-sympy.functions"]], "airybase (class in sympy.functions.special.bessel)": [[76, "sympy.functions.special.bessel.AiryBase"]], "besselbase (class in sympy.functions.special.bessel)": [[76, "sympy.functions.special.bessel.BesselBase"]], "chi (class in sympy.functions.special.error_functions)": [[76, "sympy.functions.special.error_functions.Chi"]], "ci (class in sympy.functions.special.error_functions)": [[76, "sympy.functions.special.error_functions.Ci"]], "diracdelta (class in sympy.functions.special.delta_functions)": [[76, "sympy.functions.special.delta_functions.DiracDelta"]], "e1() (in module sympy.functions.special.error_functions)": [[76, "sympy.functions.special.error_functions.E1"]], "ei (class in sympy.functions.special.error_functions)": [[76, "sympy.functions.special.error_functions.Ei"]], "eijk() (in module sympy.functions.special.tensor_functions)": [[76, "sympy.functions.special.tensor_functions.Eijk"]], "fresnelintegral (class in sympy.functions.special.error_functions)": [[76, "sympy.functions.special.error_functions.FresnelIntegral"]], "heaviside (class in sympy.functions.special.delta_functions)": [[76, "sympy.functions.special.delta_functions.Heaviside"]], "kroneckerdelta (class in sympy.functions.special.tensor_functions)": [[76, "sympy.functions.special.tensor_functions.KroneckerDelta"]], "levicivita (class in sympy.functions.special.tensor_functions)": [[76, "sympy.functions.special.tensor_functions.LeviCivita"]], "li (class in sympy.functions.special.error_functions)": [[76, "sympy.functions.special.error_functions.Li"], [76, "sympy.functions.special.error_functions.li"]], "mathieubase (class in sympy.functions.special.mathieu_functions)": [[76, "sympy.functions.special.mathieu_functions.MathieuBase"]], "shi (class in sympy.functions.special.error_functions)": [[76, "sympy.functions.special.error_functions.Shi"]], "si (class in sympy.functions.special.error_functions)": [[76, "sympy.functions.special.error_functions.Si"]], "singularityfunction (class in sympy.functions.special.singularity_functions)": [[76, "sympy.functions.special.singularity_functions.SingularityFunction"]], "ynm (class in sympy.functions.special.spherical_harmonics)": [[76, "sympy.functions.special.spherical_harmonics.Ynm"]], "ynm_c() (in module sympy.functions.special.spherical_harmonics)": [[76, "sympy.functions.special.spherical_harmonics.Ynm_c"]], "znm (class in sympy.functions.special.spherical_harmonics)": [[76, "sympy.functions.special.spherical_harmonics.Znm"]], "airyai (class in sympy.functions.special.bessel)": [[76, "sympy.functions.special.bessel.airyai"]], "airyaiprime (class in sympy.functions.special.bessel)": [[76, "sympy.functions.special.bessel.airyaiprime"]], "airybi (class in sympy.functions.special.bessel)": [[76, "sympy.functions.special.bessel.airybi"]], "airybiprime (class in sympy.functions.special.bessel)": [[76, "sympy.functions.special.bessel.airybiprime"]], "an (sympy.functions.special.hyper.meijerg property)": [[76, "sympy.functions.special.hyper.meijerg.an"]], "aother (sympy.functions.special.hyper.meijerg property)": [[76, "sympy.functions.special.hyper.meijerg.aother"]], "ap (sympy.functions.special.hyper.hyper property)": [[76, "sympy.functions.special.hyper.hyper.ap"]], "ap (sympy.functions.special.hyper.meijerg property)": [[76, "sympy.functions.special.hyper.meijerg.ap"]], "appellf1 (class in sympy.functions.special.hyper)": [[76, "sympy.functions.special.hyper.appellf1"]], "argument (sympy.functions.special.bessel.besselbase property)": [[76, "sympy.functions.special.bessel.BesselBase.argument"]], "argument (sympy.functions.special.hyper.hyper property)": [[76, "sympy.functions.special.hyper.hyper.argument"]], "argument (sympy.functions.special.hyper.meijerg property)": [[76, "sympy.functions.special.hyper.meijerg.argument"]], "assoc_laguerre (class in sympy.functions.special.polynomials)": [[76, "sympy.functions.special.polynomials.assoc_laguerre"]], "assoc_legendre (class in sympy.functions.special.polynomials)": [[76, "sympy.functions.special.polynomials.assoc_legendre"]], "besseli (class in sympy.functions.special.bessel)": [[76, "sympy.functions.special.bessel.besseli"]], "besselj (class in sympy.functions.special.bessel)": [[76, "sympy.functions.special.bessel.besselj"]], "besselk (class in sympy.functions.special.bessel)": [[76, "sympy.functions.special.bessel.besselk"]], "bessely (class in sympy.functions.special.bessel)": [[76, "sympy.functions.special.bessel.bessely"]], "beta (class in sympy.functions.special.beta_functions)": [[76, "sympy.functions.special.beta_functions.beta"]], "bm (sympy.functions.special.hyper.meijerg property)": [[76, "sympy.functions.special.hyper.meijerg.bm"]], "bother (sympy.functions.special.hyper.meijerg property)": [[76, "sympy.functions.special.hyper.meijerg.bother"]], "bq (sympy.functions.special.hyper.hyper property)": [[76, "sympy.functions.special.hyper.hyper.bq"]], "bq (sympy.functions.special.hyper.meijerg property)": [[76, "sympy.functions.special.hyper.meijerg.bq"]], "bspline_basis() (in module sympy.functions.special.bsplines)": [[76, "sympy.functions.special.bsplines.bspline_basis"]], "bspline_basis_set() (in module sympy.functions.special.bsplines)": [[76, "sympy.functions.special.bsplines.bspline_basis_set"]], "chebyshevt (class in sympy.functions.special.polynomials)": [[76, "sympy.functions.special.polynomials.chebyshevt"]], "chebyshevt_root (class in sympy.functions.special.polynomials)": [[76, "sympy.functions.special.polynomials.chebyshevt_root"]], "chebyshevu (class in sympy.functions.special.polynomials)": [[76, "sympy.functions.special.polynomials.chebyshevu"]], "chebyshevu_root (class in sympy.functions.special.polynomials)": [[76, "sympy.functions.special.polynomials.chebyshevu_root"]], "convergence_statement (sympy.functions.special.hyper.hyper property)": [[76, "sympy.functions.special.hyper.hyper.convergence_statement"]], "delta (sympy.functions.special.hyper.meijerg property)": [[76, "sympy.functions.special.hyper.meijerg.delta"]], "digamma (class in sympy.functions.special.gamma_functions)": [[76, "sympy.functions.special.gamma_functions.digamma"]], "dirichlet_eta (class in sympy.functions.special.zeta_functions)": [[76, "sympy.functions.special.zeta_functions.dirichlet_eta"]], "elliptic_e (class in sympy.functions.special.elliptic_integrals)": [[76, "sympy.functions.special.elliptic_integrals.elliptic_e"]], "elliptic_f (class in sympy.functions.special.elliptic_integrals)": [[76, "sympy.functions.special.elliptic_integrals.elliptic_f"]], "elliptic_k (class in sympy.functions.special.elliptic_integrals)": [[76, "sympy.functions.special.elliptic_integrals.elliptic_k"]], "elliptic_pi (class in sympy.functions.special.elliptic_integrals)": [[76, "sympy.functions.special.elliptic_integrals.elliptic_pi"]], "erf (class in sympy.functions.special.error_functions)": [[76, "sympy.functions.special.error_functions.erf"]], "erf2 (class in sympy.functions.special.error_functions)": [[76, "sympy.functions.special.error_functions.erf2"]], "erf2inv (class in sympy.functions.special.error_functions)": [[76, "sympy.functions.special.error_functions.erf2inv"]], "erfc (class in sympy.functions.special.error_functions)": [[76, "sympy.functions.special.error_functions.erfc"]], "erfcinv (class in sympy.functions.special.error_functions)": [[76, "sympy.functions.special.error_functions.erfcinv"]], "erfi (class in sympy.functions.special.error_functions)": [[76, "sympy.functions.special.error_functions.erfi"]], "erfinv (class in sympy.functions.special.error_functions)": [[76, "sympy.functions.special.error_functions.erfinv"]], "eta (sympy.functions.special.hyper.hyper property)": [[76, "sympy.functions.special.hyper.hyper.eta"]], "eval() (sympy.functions.special.delta_functions.diracdelta class method)": [[76, "sympy.functions.special.delta_functions.DiracDelta.eval"]], "eval() (sympy.functions.special.delta_functions.heaviside class method)": [[76, "sympy.functions.special.delta_functions.Heaviside.eval"]], "eval() (sympy.functions.special.singularity_functions.singularityfunction class method)": [[76, "sympy.functions.special.singularity_functions.SingularityFunction.eval"]], "eval() (sympy.functions.special.tensor_functions.kroneckerdelta class method)": [[76, "sympy.functions.special.tensor_functions.KroneckerDelta.eval"]], "eval_levicivita() (in module sympy.functions.special.tensor_functions)": [[76, "sympy.functions.special.tensor_functions.eval_levicivita"]], "expint (class in sympy.functions.special.error_functions)": [[76, "sympy.functions.special.error_functions.expint"]], "fdiff() (sympy.functions.special.delta_functions.diracdelta method)": [[76, "sympy.functions.special.delta_functions.DiracDelta.fdiff"]], "fdiff() (sympy.functions.special.delta_functions.heaviside method)": [[76, "sympy.functions.special.delta_functions.Heaviside.fdiff"]], "fdiff() (sympy.functions.special.singularity_functions.singularityfunction method)": [[76, "sympy.functions.special.singularity_functions.SingularityFunction.fdiff"]], "fresnelc (class in sympy.functions.special.error_functions)": [[76, "sympy.functions.special.error_functions.fresnelc"]], "fresnels (class in sympy.functions.special.error_functions)": [[76, "sympy.functions.special.error_functions.fresnels"]], "gamma (class in sympy.functions.special.gamma_functions)": [[76, "sympy.functions.special.gamma_functions.gamma"]], "gegenbauer (class in sympy.functions.special.polynomials)": [[76, "sympy.functions.special.polynomials.gegenbauer"]], "get_period() (sympy.functions.special.hyper.meijerg method)": [[76, "sympy.functions.special.hyper.meijerg.get_period"]], "hankel1 (class in sympy.functions.special.bessel)": [[76, "sympy.functions.special.bessel.hankel1"]], "hankel2 (class in sympy.functions.special.bessel)": [[76, "sympy.functions.special.bessel.hankel2"]], "hermite (class in sympy.functions.special.polynomials)": [[76, "sympy.functions.special.polynomials.hermite"]], "hermite_prob (class in sympy.functions.special.polynomials)": [[76, "sympy.functions.special.polynomials.hermite_prob"]], "hyper (class in sympy.functions.special.hyper)": [[76, "sympy.functions.special.hyper.hyper"]], "indices_contain_equal_information (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[76, "sympy.functions.special.tensor_functions.KroneckerDelta.indices_contain_equal_information"]], "integrand() (sympy.functions.special.hyper.meijerg method)": [[76, "sympy.functions.special.hyper.meijerg.integrand"]], "interpolating_spline() (in module sympy.functions.special.bsplines)": [[76, "sympy.functions.special.bsplines.interpolating_spline"]], "inverse() (sympy.functions.special.error_functions.erf method)": [[76, "sympy.functions.special.error_functions.erf.inverse"]], "inverse() (sympy.functions.special.error_functions.erfc method)": [[76, "sympy.functions.special.error_functions.erfc.inverse"]], "inverse() (sympy.functions.special.error_functions.erfcinv method)": [[76, "sympy.functions.special.error_functions.erfcinv.inverse"]], "inverse() (sympy.functions.special.error_functions.erfinv method)": [[76, "sympy.functions.special.error_functions.erfinv.inverse"]], "is_above_fermi (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[76, "sympy.functions.special.tensor_functions.KroneckerDelta.is_above_fermi"]], "is_below_fermi (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[76, "sympy.functions.special.tensor_functions.KroneckerDelta.is_below_fermi"]], "is_number (sympy.functions.special.hyper.meijerg property)": [[76, "sympy.functions.special.hyper.meijerg.is_number"]], "is_only_above_fermi (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[76, "sympy.functions.special.tensor_functions.KroneckerDelta.is_only_above_fermi"]], "is_only_below_fermi (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[76, "sympy.functions.special.tensor_functions.KroneckerDelta.is_only_below_fermi"]], "is_simple() (sympy.functions.special.delta_functions.diracdelta method)": [[76, "sympy.functions.special.delta_functions.DiracDelta.is_simple"]], "jacobi (class in sympy.functions.special.polynomials)": [[76, "sympy.functions.special.polynomials.jacobi"]], "jacobi_normalized() (in module sympy.functions.special.polynomials)": [[76, "sympy.functions.special.polynomials.jacobi_normalized"]], "jn (class in sympy.functions.special.bessel)": [[76, "sympy.functions.special.bessel.jn"]], "jn_zeros() (in module sympy.functions.special.bessel)": [[76, "sympy.functions.special.bessel.jn_zeros"]], "killable_index (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[76, "sympy.functions.special.tensor_functions.KroneckerDelta.killable_index"]], "laguerre (class in sympy.functions.special.polynomials)": [[76, "sympy.functions.special.polynomials.laguerre"]], "legendre (class in sympy.functions.special.polynomials)": [[76, "sympy.functions.special.polynomials.legendre"]], "lerchphi (class in sympy.functions.special.zeta_functions)": [[76, "sympy.functions.special.zeta_functions.lerchphi"]], "loggamma (class in sympy.functions.special.gamma_functions)": [[76, "sympy.functions.special.gamma_functions.loggamma"]], "lowergamma (class in sympy.functions.special.gamma_functions)": [[76, "sympy.functions.special.gamma_functions.lowergamma"]], "marcumq (class in sympy.functions.special.bessel)": [[76, "sympy.functions.special.bessel.marcumq"]], "mathieuc (class in sympy.functions.special.mathieu_functions)": [[76, "sympy.functions.special.mathieu_functions.mathieuc"]], "mathieucprime (class in sympy.functions.special.mathieu_functions)": [[76, "sympy.functions.special.mathieu_functions.mathieucprime"]], "mathieus (class in sympy.functions.special.mathieu_functions)": [[76, "sympy.functions.special.mathieu_functions.mathieus"]], "mathieusprime (class in sympy.functions.special.mathieu_functions)": [[76, "sympy.functions.special.mathieu_functions.mathieusprime"]], "meijerg (class in sympy.functions.special.hyper)": [[76, "sympy.functions.special.hyper.meijerg"]], "multigamma (class in sympy.functions.special.gamma_functions)": [[76, "sympy.functions.special.gamma_functions.multigamma"]], "nu (sympy.functions.special.hyper.meijerg property)": [[76, "sympy.functions.special.hyper.meijerg.nu"]], "order (sympy.functions.special.bessel.besselbase property)": [[76, "sympy.functions.special.bessel.BesselBase.order"]], "pargs (sympy.functions.special.delta_functions.heaviside property)": [[76, "sympy.functions.special.delta_functions.Heaviside.pargs"]], "polygamma (class in sympy.functions.special.gamma_functions)": [[76, "sympy.functions.special.gamma_functions.polygamma"]], "polylog (class in sympy.functions.special.zeta_functions)": [[76, "sympy.functions.special.zeta_functions.polylog"]], "preferred_index (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[76, "sympy.functions.special.tensor_functions.KroneckerDelta.preferred_index"]], "radius_of_convergence (sympy.functions.special.hyper.hyper property)": [[76, "sympy.functions.special.hyper.hyper.radius_of_convergence"]], "stieltjes (class in sympy.functions.special.zeta_functions)": [[76, "sympy.functions.special.zeta_functions.stieltjes"]], "sympy.functions.special.bessel": [[76, "module-sympy.functions.special.bessel"]], "sympy.functions.special.beta_functions": [[76, "module-sympy.functions.special.beta_functions"]], "sympy.functions.special.elliptic_integrals": [[76, "module-sympy.functions.special.elliptic_integrals"]], "sympy.functions.special.error_functions": [[76, "module-sympy.functions.special.error_functions"]], "sympy.functions.special.gamma_functions": [[76, "module-sympy.functions.special.gamma_functions"]], "sympy.functions.special.mathieu_functions": [[76, "module-sympy.functions.special.mathieu_functions"]], "sympy.functions.special.polynomials": [[76, "module-sympy.functions.special.polynomials"]], "sympy.functions.special.singularity_functions": [[76, "module-sympy.functions.special.singularity_functions"]], "sympy.functions.special.zeta_functions": [[76, "module-sympy.functions.special.zeta_functions"]], "trigamma (class in sympy.functions.special.gamma_functions)": [[76, "sympy.functions.special.gamma_functions.trigamma"]], "uppergamma (class in sympy.functions.special.gamma_functions)": [[76, "sympy.functions.special.gamma_functions.uppergamma"]], "yn (class in sympy.functions.special.bessel)": [[76, "sympy.functions.special.bessel.yn"]], "zeta (class in sympy.functions.special.zeta_functions)": [[76, "sympy.functions.special.zeta_functions.zeta"]], "curve (class in sympy.geometry.curve)": [[77, "sympy.geometry.curve.Curve"]], "ambient_dimension (sympy.geometry.curve.curve property)": [[77, "sympy.geometry.curve.Curve.ambient_dimension"]], "arbitrary_point() (sympy.geometry.curve.curve method)": [[77, "sympy.geometry.curve.Curve.arbitrary_point"]], "free_symbols (sympy.geometry.curve.curve property)": [[77, "sympy.geometry.curve.Curve.free_symbols"]], "functions (sympy.geometry.curve.curve property)": [[77, "sympy.geometry.curve.Curve.functions"]], "length (sympy.geometry.curve.curve property)": [[77, "sympy.geometry.curve.Curve.length"]], "limits (sympy.geometry.curve.curve property)": [[77, "sympy.geometry.curve.Curve.limits"]], "parameter (sympy.geometry.curve.curve property)": [[77, "sympy.geometry.curve.Curve.parameter"]], "plot_interval() (sympy.geometry.curve.curve method)": [[77, "sympy.geometry.curve.Curve.plot_interval"]], "rotate() (sympy.geometry.curve.curve method)": [[77, "sympy.geometry.curve.Curve.rotate"]], "scale() (sympy.geometry.curve.curve method)": [[77, "sympy.geometry.curve.Curve.scale"]], "sympy.geometry.curve": [[77, "module-sympy.geometry.curve"]], "translate() (sympy.geometry.curve.curve method)": [[77, "sympy.geometry.curve.Curve.translate"]], "circle (class in sympy.geometry.ellipse)": [[78, "sympy.geometry.ellipse.Circle"]], "ellipse (class in sympy.geometry.ellipse)": [[78, "sympy.geometry.ellipse.Ellipse"]], "apoapsis (sympy.geometry.ellipse.ellipse property)": [[78, "sympy.geometry.ellipse.Ellipse.apoapsis"]], "arbitrary_point() (sympy.geometry.ellipse.ellipse method)": [[78, "sympy.geometry.ellipse.Ellipse.arbitrary_point"]], "area (sympy.geometry.ellipse.ellipse property)": [[78, "sympy.geometry.ellipse.Ellipse.area"]], "auxiliary_circle() (sympy.geometry.ellipse.ellipse method)": [[78, "sympy.geometry.ellipse.Ellipse.auxiliary_circle"]], "bounds (sympy.geometry.ellipse.ellipse property)": [[78, "sympy.geometry.ellipse.Ellipse.bounds"]], "center (sympy.geometry.ellipse.ellipse property)": [[78, "sympy.geometry.ellipse.Ellipse.center"]], "circumference (sympy.geometry.ellipse.circle property)": [[78, "sympy.geometry.ellipse.Circle.circumference"]], "circumference (sympy.geometry.ellipse.ellipse property)": [[78, "sympy.geometry.ellipse.Ellipse.circumference"]], "director_circle() (sympy.geometry.ellipse.ellipse method)": [[78, "sympy.geometry.ellipse.Ellipse.director_circle"]], "eccentricity (sympy.geometry.ellipse.ellipse property)": [[78, "sympy.geometry.ellipse.Ellipse.eccentricity"]], "encloses_point() (sympy.geometry.ellipse.ellipse method)": [[78, "sympy.geometry.ellipse.Ellipse.encloses_point"]], "equation() (sympy.geometry.ellipse.circle method)": [[78, "sympy.geometry.ellipse.Circle.equation"]], "equation() (sympy.geometry.ellipse.ellipse method)": [[78, "sympy.geometry.ellipse.Ellipse.equation"]], "evolute() (sympy.geometry.ellipse.ellipse method)": [[78, "sympy.geometry.ellipse.Ellipse.evolute"]], "foci (sympy.geometry.ellipse.ellipse property)": [[78, "sympy.geometry.ellipse.Ellipse.foci"]], "focus_distance (sympy.geometry.ellipse.ellipse property)": [[78, "sympy.geometry.ellipse.Ellipse.focus_distance"]], "hradius (sympy.geometry.ellipse.ellipse property)": [[78, "sympy.geometry.ellipse.Ellipse.hradius"]], "intersection() (sympy.geometry.ellipse.circle method)": [[78, "sympy.geometry.ellipse.Circle.intersection"]], "intersection() (sympy.geometry.ellipse.ellipse method)": [[78, "sympy.geometry.ellipse.Ellipse.intersection"]], "is_tangent() (sympy.geometry.ellipse.ellipse method)": [[78, "sympy.geometry.ellipse.Ellipse.is_tangent"]], "major (sympy.geometry.ellipse.ellipse property)": [[78, "sympy.geometry.ellipse.Ellipse.major"]], "minor (sympy.geometry.ellipse.ellipse property)": [[78, "sympy.geometry.ellipse.Ellipse.minor"]], "normal_lines() (sympy.geometry.ellipse.ellipse method)": [[78, "sympy.geometry.ellipse.Ellipse.normal_lines"]], "periapsis (sympy.geometry.ellipse.ellipse property)": [[78, "sympy.geometry.ellipse.Ellipse.periapsis"]], "plot_interval() (sympy.geometry.ellipse.ellipse method)": [[78, "sympy.geometry.ellipse.Ellipse.plot_interval"]], "polar_second_moment_of_area() (sympy.geometry.ellipse.ellipse method)": [[78, "sympy.geometry.ellipse.Ellipse.polar_second_moment_of_area"]], "radius (sympy.geometry.ellipse.circle property)": [[78, "sympy.geometry.ellipse.Circle.radius"]], "random_point() (sympy.geometry.ellipse.ellipse method)": [[78, "sympy.geometry.ellipse.Ellipse.random_point"]], "reflect() (sympy.geometry.ellipse.circle method)": [[78, "sympy.geometry.ellipse.Circle.reflect"]], "reflect() (sympy.geometry.ellipse.ellipse method)": [[78, "sympy.geometry.ellipse.Ellipse.reflect"]], "rotate() (sympy.geometry.ellipse.ellipse method)": [[78, "sympy.geometry.ellipse.Ellipse.rotate"]], "scale() (sympy.geometry.ellipse.circle method)": [[78, "sympy.geometry.ellipse.Circle.scale"]], "scale() (sympy.geometry.ellipse.ellipse method)": [[78, "sympy.geometry.ellipse.Ellipse.scale"]], "second_moment_of_area() (sympy.geometry.ellipse.ellipse method)": [[78, "sympy.geometry.ellipse.Ellipse.second_moment_of_area"]], "section_modulus() (sympy.geometry.ellipse.ellipse method)": [[78, "sympy.geometry.ellipse.Ellipse.section_modulus"]], "semilatus_rectum (sympy.geometry.ellipse.ellipse property)": [[78, "sympy.geometry.ellipse.Ellipse.semilatus_rectum"]], "sympy.geometry.ellipse": [[78, "module-sympy.geometry.ellipse"]], "tangent_lines() (sympy.geometry.ellipse.ellipse method)": [[78, "sympy.geometry.ellipse.Ellipse.tangent_lines"]], "vradius (sympy.geometry.ellipse.circle property)": [[78, "sympy.geometry.ellipse.Circle.vradius"]], "vradius (sympy.geometry.ellipse.ellipse property)": [[78, "sympy.geometry.ellipse.Ellipse.vradius"]], "geometryentity (class in sympy.geometry.entity)": [[79, "sympy.geometry.entity.GeometryEntity"]], "ambient_dimension (sympy.geometry.entity.geometryentity property)": [[79, "sympy.geometry.entity.GeometryEntity.ambient_dimension"]], "bounds (sympy.geometry.entity.geometryentity property)": [[79, "sympy.geometry.entity.GeometryEntity.bounds"]], "encloses() (sympy.geometry.entity.geometryentity method)": [[79, "sympy.geometry.entity.GeometryEntity.encloses"]], "intersection() (sympy.geometry.entity.geometryentity method)": [[79, "sympy.geometry.entity.GeometryEntity.intersection"]], "is_similar() (sympy.geometry.entity.geometryentity method)": [[79, "sympy.geometry.entity.GeometryEntity.is_similar"]], "parameter_value() (sympy.geometry.entity.geometryentity method)": [[79, "sympy.geometry.entity.GeometryEntity.parameter_value"]], "reflect() (sympy.geometry.entity.geometryentity method)": [[79, "sympy.geometry.entity.GeometryEntity.reflect"]], "rotate() (sympy.geometry.entity.geometryentity method)": [[79, "sympy.geometry.entity.GeometryEntity.rotate"]], "scale() (sympy.geometry.entity.geometryentity method)": [[79, "sympy.geometry.entity.GeometryEntity.scale"]], "sympy.geometry.entity": [[79, "module-sympy.geometry.entity"]], "translate() (sympy.geometry.entity.geometryentity method)": [[79, "sympy.geometry.entity.GeometryEntity.translate"]], "line (class in sympy.geometry.line)": [[81, "sympy.geometry.line.Line"]], "line2d (class in sympy.geometry.line)": [[81, "sympy.geometry.line.Line2D"]], "line3d (class in sympy.geometry.line)": [[81, "sympy.geometry.line.Line3D"]], "linearentity (class in sympy.geometry.line)": [[81, "sympy.geometry.line.LinearEntity"]], "linearentity2d (class in sympy.geometry.line)": [[81, "sympy.geometry.line.LinearEntity2D"]], "linearentity3d (class in sympy.geometry.line)": [[81, "sympy.geometry.line.LinearEntity3D"]], "ray (class in sympy.geometry.line)": [[81, "sympy.geometry.line.Ray"]], "ray2d (class in sympy.geometry.line)": [[81, "sympy.geometry.line.Ray2D"]], "ray3d (class in sympy.geometry.line)": [[81, "sympy.geometry.line.Ray3D"]], "segment (class in sympy.geometry.line)": [[81, "sympy.geometry.line.Segment"]], "segment2d (class in sympy.geometry.line)": [[81, "sympy.geometry.line.Segment2D"]], "segment3d (class in sympy.geometry.line)": [[81, "sympy.geometry.line.Segment3D"]], "ambient_dimension (sympy.geometry.line.linearentity property)": [[81, "sympy.geometry.line.LinearEntity.ambient_dimension"]], "angle_between() (sympy.geometry.line.linearentity method)": [[81, "sympy.geometry.line.LinearEntity.angle_between"]], "arbitrary_point() (sympy.geometry.line.linearentity method)": [[81, "sympy.geometry.line.LinearEntity.arbitrary_point"]], "are_concurrent() (sympy.geometry.line.linearentity static method)": [[81, "sympy.geometry.line.LinearEntity.are_concurrent"]], "bisectors() (sympy.geometry.line.linearentity method)": [[81, "sympy.geometry.line.LinearEntity.bisectors"]], "bounds (sympy.geometry.line.linearentity2d property)": [[81, "sympy.geometry.line.LinearEntity2D.bounds"]], "closing_angle() (sympy.geometry.line.ray2d method)": [[81, "sympy.geometry.line.Ray2D.closing_angle"]], "coefficients (sympy.geometry.line.line2d property)": [[81, "sympy.geometry.line.Line2D.coefficients"]], "contains() (sympy.geometry.line.line method)": [[81, "sympy.geometry.line.Line.contains"]], "contains() (sympy.geometry.line.linearentity method)": [[81, "sympy.geometry.line.LinearEntity.contains"]], "contains() (sympy.geometry.line.ray method)": [[81, "sympy.geometry.line.Ray.contains"]], "contains() (sympy.geometry.line.segment method)": [[81, "sympy.geometry.line.Segment.contains"]], "direction (sympy.geometry.line.linearentity property)": [[81, "sympy.geometry.line.LinearEntity.direction"]], "direction_cosine (sympy.geometry.line.linearentity3d property)": [[81, "sympy.geometry.line.LinearEntity3D.direction_cosine"]], "direction_ratio (sympy.geometry.line.linearentity3d property)": [[81, "sympy.geometry.line.LinearEntity3D.direction_ratio"]], "distance() (sympy.geometry.line.line method)": [[81, "sympy.geometry.line.Line.distance"]], "distance() (sympy.geometry.line.line3d method)": [[81, "sympy.geometry.line.Line3D.distance"]], "distance() (sympy.geometry.line.ray method)": [[81, "sympy.geometry.line.Ray.distance"]], "distance() (sympy.geometry.line.segment method)": [[81, "sympy.geometry.line.Segment.distance"]], "equals() (sympy.geometry.line.line method)": [[81, "sympy.geometry.line.Line.equals"]], "equals() (sympy.geometry.line.ray method)": [[81, "sympy.geometry.line.Ray.equals"]], "equals() (sympy.geometry.line.segment method)": [[81, "sympy.geometry.line.Segment.equals"]], "equation() (sympy.geometry.line.line2d method)": [[81, "sympy.geometry.line.Line2D.equation"]], "equation() (sympy.geometry.line.line3d method)": [[81, "sympy.geometry.line.Line3D.equation"]], "intersection() (sympy.geometry.line.linearentity method)": [[81, "sympy.geometry.line.LinearEntity.intersection"]], "is_parallel() (sympy.geometry.line.linearentity method)": [[81, "sympy.geometry.line.LinearEntity.is_parallel"]], "is_perpendicular() (sympy.geometry.line.linearentity method)": [[81, "sympy.geometry.line.LinearEntity.is_perpendicular"]], "is_similar() (sympy.geometry.line.linearentity method)": [[81, "sympy.geometry.line.LinearEntity.is_similar"]], "length (sympy.geometry.line.linearentity property)": [[81, "sympy.geometry.line.LinearEntity.length"]], "length (sympy.geometry.line.segment property)": [[81, "sympy.geometry.line.Segment.length"]], "midpoint (sympy.geometry.line.segment property)": [[81, "sympy.geometry.line.Segment.midpoint"]], "p1 (sympy.geometry.line.linearentity property)": [[81, "sympy.geometry.line.LinearEntity.p1"]], "p2 (sympy.geometry.line.linearentity property)": [[81, "sympy.geometry.line.LinearEntity.p2"]], "parallel_line() (sympy.geometry.line.linearentity method)": [[81, "sympy.geometry.line.LinearEntity.parallel_line"]], "perpendicular_bisector() (sympy.geometry.line.segment method)": [[81, "sympy.geometry.line.Segment.perpendicular_bisector"]], "perpendicular_line() (sympy.geometry.line.linearentity method)": [[81, "sympy.geometry.line.LinearEntity.perpendicular_line"]], "perpendicular_line() (sympy.geometry.line.linearentity2d method)": [[81, "sympy.geometry.line.LinearEntity2D.perpendicular_line"]], "perpendicular_segment() (sympy.geometry.line.linearentity method)": [[81, "sympy.geometry.line.LinearEntity.perpendicular_segment"]], "plot_interval() (sympy.geometry.line.line method)": [[81, "sympy.geometry.line.Line.plot_interval"]], "plot_interval() (sympy.geometry.line.ray method)": [[81, "sympy.geometry.line.Ray.plot_interval"]], "plot_interval() (sympy.geometry.line.segment method)": [[81, "sympy.geometry.line.Segment.plot_interval"]], "points (sympy.geometry.line.linearentity property)": [[81, "sympy.geometry.line.LinearEntity.points"]], "projection() (sympy.geometry.line.linearentity method)": [[81, "sympy.geometry.line.LinearEntity.projection"]], "random_point() (sympy.geometry.line.linearentity method)": [[81, "sympy.geometry.line.LinearEntity.random_point"]], "slope (sympy.geometry.line.linearentity2d property)": [[81, "sympy.geometry.line.LinearEntity2D.slope"]], "smallest_angle_between() (sympy.geometry.line.linearentity method)": [[81, "sympy.geometry.line.LinearEntity.smallest_angle_between"]], "source (sympy.geometry.line.ray property)": [[81, "sympy.geometry.line.Ray.source"]], "sympy.geometry.line": [[81, "module-sympy.geometry.line"]], "xdirection (sympy.geometry.line.ray2d property)": [[81, "sympy.geometry.line.Ray2D.xdirection"]], "xdirection (sympy.geometry.line.ray3d property)": [[81, "sympy.geometry.line.Ray3D.xdirection"]], "ydirection (sympy.geometry.line.ray2d property)": [[81, "sympy.geometry.line.Ray2D.ydirection"]], "ydirection (sympy.geometry.line.ray3d property)": [[81, "sympy.geometry.line.Ray3D.ydirection"]], "zdirection (sympy.geometry.line.ray3d property)": [[81, "sympy.geometry.line.Ray3D.zdirection"]], "plane (class in sympy.geometry.plane)": [[82, "sympy.geometry.plane.Plane"]], "angle_between() (sympy.geometry.plane.plane method)": [[82, "sympy.geometry.plane.Plane.angle_between"]], "arbitrary_point() (sympy.geometry.plane.plane method)": [[82, "sympy.geometry.plane.Plane.arbitrary_point"]], "are_concurrent() (sympy.geometry.plane.plane static method)": [[82, "sympy.geometry.plane.Plane.are_concurrent"]], "distance() (sympy.geometry.plane.plane method)": [[82, "sympy.geometry.plane.Plane.distance"]], "equals() (sympy.geometry.plane.plane method)": [[82, "sympy.geometry.plane.Plane.equals"]], "equation() (sympy.geometry.plane.plane method)": [[82, "sympy.geometry.plane.Plane.equation"]], "intersection() (sympy.geometry.plane.plane method)": [[82, "sympy.geometry.plane.Plane.intersection"]], "is_coplanar() (sympy.geometry.plane.plane method)": [[82, "sympy.geometry.plane.Plane.is_coplanar"]], "is_parallel() (sympy.geometry.plane.plane method)": [[82, "sympy.geometry.plane.Plane.is_parallel"]], "is_perpendicular() (sympy.geometry.plane.plane method)": [[82, "sympy.geometry.plane.Plane.is_perpendicular"]], "normal_vector (sympy.geometry.plane.plane property)": [[82, "sympy.geometry.plane.Plane.normal_vector"]], "p1 (sympy.geometry.plane.plane property)": [[82, "sympy.geometry.plane.Plane.p1"]], "parallel_plane() (sympy.geometry.plane.plane method)": [[82, "sympy.geometry.plane.Plane.parallel_plane"]], "parameter_value() (sympy.geometry.plane.plane method)": [[82, "sympy.geometry.plane.Plane.parameter_value"]], "perpendicular_line() (sympy.geometry.plane.plane method)": [[82, "sympy.geometry.plane.Plane.perpendicular_line"]], "perpendicular_plane() (sympy.geometry.plane.plane method)": [[82, "sympy.geometry.plane.Plane.perpendicular_plane"]], "projection() (sympy.geometry.plane.plane method)": [[82, "sympy.geometry.plane.Plane.projection"]], "projection_line() (sympy.geometry.plane.plane method)": [[82, "sympy.geometry.plane.Plane.projection_line"]], "random_point() (sympy.geometry.plane.plane method)": [[82, "sympy.geometry.plane.Plane.random_point"]], "sympy.geometry.plane": [[82, "module-sympy.geometry.plane"]], "point (class in sympy.geometry.point)": [[83, "sympy.geometry.point.Point"]], "point2d (class in sympy.geometry.point)": [[83, "sympy.geometry.point.Point2D"]], "point3d (class in sympy.geometry.point)": [[83, "sympy.geometry.point.Point3D"]], "affine_rank() (sympy.geometry.point.point static method)": [[83, "sympy.geometry.point.Point.affine_rank"]], "ambient_dimension (sympy.geometry.point.point property)": [[83, "sympy.geometry.point.Point.ambient_dimension"]], "are_collinear() (sympy.geometry.point.point3d static method)": [[83, "sympy.geometry.point.Point3D.are_collinear"]], "are_coplanar() (sympy.geometry.point.point class method)": [[83, "sympy.geometry.point.Point.are_coplanar"]], "bounds (sympy.geometry.point.point2d property)": [[83, "sympy.geometry.point.Point2D.bounds"]], "canberra_distance() (sympy.geometry.point.point method)": [[83, "sympy.geometry.point.Point.canberra_distance"]], "coordinates (sympy.geometry.point.point2d property)": [[83, "sympy.geometry.point.Point2D.coordinates"]], "coordinates (sympy.geometry.point.point3d property)": [[83, "sympy.geometry.point.Point3D.coordinates"]], "direction_cosine() (sympy.geometry.point.point3d method)": [[83, "sympy.geometry.point.Point3D.direction_cosine"]], "direction_ratio() (sympy.geometry.point.point3d method)": [[83, "sympy.geometry.point.Point3D.direction_ratio"]], "distance() (sympy.geometry.point.point method)": [[83, "sympy.geometry.point.Point.distance"]], "dot() (sympy.geometry.point.point method)": [[83, "sympy.geometry.point.Point.dot"]], "equals() (sympy.geometry.point.point method)": [[83, "sympy.geometry.point.Point.equals"]], "intersection() (sympy.geometry.point.point method)": [[83, "sympy.geometry.point.Point.intersection"]], "intersection() (sympy.geometry.point.point3d method)": [[83, "sympy.geometry.point.Point3D.intersection"]], "is_collinear() (sympy.geometry.point.point method)": [[83, "sympy.geometry.point.Point.is_collinear"]], "is_concyclic() (sympy.geometry.point.point method)": [[83, "sympy.geometry.point.Point.is_concyclic"]], "is_nonzero (sympy.geometry.point.point property)": [[83, "sympy.geometry.point.Point.is_nonzero"]], "is_scalar_multiple() (sympy.geometry.point.point method)": [[83, "sympy.geometry.point.Point.is_scalar_multiple"]], "is_zero (sympy.geometry.point.point property)": [[83, "sympy.geometry.point.Point.is_zero"]], "length (sympy.geometry.point.point property)": [[83, "sympy.geometry.point.Point.length"]], "midpoint() (sympy.geometry.point.point method)": [[83, "sympy.geometry.point.Point.midpoint"]], "origin (sympy.geometry.point.point property)": [[83, "sympy.geometry.point.Point.origin"]], "orthogonal_direction (sympy.geometry.point.point property)": [[83, "sympy.geometry.point.Point.orthogonal_direction"]], "project() (sympy.geometry.point.point static method)": [[83, "sympy.geometry.point.Point.project"]], "rotate() (sympy.geometry.point.point2d method)": [[83, "sympy.geometry.point.Point2D.rotate"]], "scale() (sympy.geometry.point.point2d method)": [[83, "sympy.geometry.point.Point2D.scale"]], "scale() (sympy.geometry.point.point3d method)": [[83, "sympy.geometry.point.Point3D.scale"]], "sympy.geometry.point": [[83, "module-sympy.geometry.point"]], "taxicab_distance() (sympy.geometry.point.point method)": [[83, "sympy.geometry.point.Point.taxicab_distance"]], "transform() (sympy.geometry.point.point2d method)": [[83, "sympy.geometry.point.Point2D.transform"]], "transform() (sympy.geometry.point.point3d method)": [[83, "sympy.geometry.point.Point3D.transform"]], "translate() (sympy.geometry.point.point2d method)": [[83, "sympy.geometry.point.Point2D.translate"]], "translate() (sympy.geometry.point.point3d method)": [[83, "sympy.geometry.point.Point3D.translate"]], "unit (sympy.geometry.point.point property)": [[83, "sympy.geometry.point.Point.unit"]], "x (sympy.geometry.point.point2d property)": [[83, "sympy.geometry.point.Point2D.x"]], "x (sympy.geometry.point.point3d property)": [[83, "sympy.geometry.point.Point3D.x"]], "y (sympy.geometry.point.point2d property)": [[83, "sympy.geometry.point.Point2D.y"]], "y (sympy.geometry.point.point3d property)": [[83, "sympy.geometry.point.Point3D.y"]], "z (sympy.geometry.point.point3d property)": [[83, "sympy.geometry.point.Point3D.z"]], "polygon (class in sympy.geometry.polygon)": [[84, "sympy.geometry.polygon.Polygon"]], "regularpolygon (class in sympy.geometry.polygon)": [[84, "sympy.geometry.polygon.RegularPolygon"]], "triangle (class in sympy.geometry.polygon)": [[84, "sympy.geometry.polygon.Triangle"]], "altitudes (sympy.geometry.polygon.triangle property)": [[84, "sympy.geometry.polygon.Triangle.altitudes"]], "angles (sympy.geometry.polygon.polygon property)": [[84, "sympy.geometry.polygon.Polygon.angles"]], "angles (sympy.geometry.polygon.regularpolygon property)": [[84, "sympy.geometry.polygon.RegularPolygon.angles"]], "apothem (sympy.geometry.polygon.regularpolygon property)": [[84, "sympy.geometry.polygon.RegularPolygon.apothem"]], "arbitrary_point() (sympy.geometry.polygon.polygon method)": [[84, "sympy.geometry.polygon.Polygon.arbitrary_point"]], "area (sympy.geometry.polygon.polygon property)": [[84, "sympy.geometry.polygon.Polygon.area"]], "area (sympy.geometry.polygon.regularpolygon property)": [[84, "sympy.geometry.polygon.RegularPolygon.area"]], "args (sympy.geometry.polygon.regularpolygon property)": [[84, "sympy.geometry.polygon.RegularPolygon.args"]], "bisectors() (sympy.geometry.polygon.polygon method)": [[84, "sympy.geometry.polygon.Polygon.bisectors"]], "bisectors() (sympy.geometry.polygon.triangle method)": [[84, "sympy.geometry.polygon.Triangle.bisectors"]], "bounds (sympy.geometry.polygon.polygon property)": [[84, "sympy.geometry.polygon.Polygon.bounds"]], "center (sympy.geometry.polygon.regularpolygon property)": [[84, "sympy.geometry.polygon.RegularPolygon.center"]], "centroid (sympy.geometry.polygon.polygon property)": [[84, "sympy.geometry.polygon.Polygon.centroid"]], "centroid (sympy.geometry.polygon.regularpolygon property)": [[84, "sympy.geometry.polygon.RegularPolygon.centroid"]], "circumcenter (sympy.geometry.polygon.regularpolygon property)": [[84, "sympy.geometry.polygon.RegularPolygon.circumcenter"]], "circumcenter (sympy.geometry.polygon.triangle property)": [[84, "sympy.geometry.polygon.Triangle.circumcenter"]], "circumcircle (sympy.geometry.polygon.regularpolygon property)": [[84, "sympy.geometry.polygon.RegularPolygon.circumcircle"]], "circumcircle (sympy.geometry.polygon.triangle property)": [[84, "sympy.geometry.polygon.Triangle.circumcircle"]], "circumradius (sympy.geometry.polygon.regularpolygon property)": [[84, "sympy.geometry.polygon.RegularPolygon.circumradius"]], "circumradius (sympy.geometry.polygon.triangle property)": [[84, "sympy.geometry.polygon.Triangle.circumradius"]], "cut_section() (sympy.geometry.polygon.polygon method)": [[84, "sympy.geometry.polygon.Polygon.cut_section"]], "distance() (sympy.geometry.polygon.polygon method)": [[84, "sympy.geometry.polygon.Polygon.distance"]], "encloses_point() (sympy.geometry.polygon.polygon method)": [[84, "sympy.geometry.polygon.Polygon.encloses_point"]], "encloses_point() (sympy.geometry.polygon.regularpolygon method)": [[84, "sympy.geometry.polygon.RegularPolygon.encloses_point"]], "eulerline (sympy.geometry.polygon.triangle property)": [[84, "sympy.geometry.polygon.Triangle.eulerline"]], "excenters (sympy.geometry.polygon.triangle property)": [[84, "sympy.geometry.polygon.Triangle.excenters"]], "exradii (sympy.geometry.polygon.triangle property)": [[84, "sympy.geometry.polygon.Triangle.exradii"]], "exterior_angle (sympy.geometry.polygon.regularpolygon property)": [[84, "sympy.geometry.polygon.RegularPolygon.exterior_angle"]], "first_moment_of_area() (sympy.geometry.polygon.polygon method)": [[84, "sympy.geometry.polygon.Polygon.first_moment_of_area"]], "incenter (sympy.geometry.polygon.triangle property)": [[84, "sympy.geometry.polygon.Triangle.incenter"]], "incircle (sympy.geometry.polygon.regularpolygon property)": [[84, "sympy.geometry.polygon.RegularPolygon.incircle"]], "incircle (sympy.geometry.polygon.triangle property)": [[84, "sympy.geometry.polygon.Triangle.incircle"]], "inradius (sympy.geometry.polygon.regularpolygon property)": [[84, "sympy.geometry.polygon.RegularPolygon.inradius"]], "inradius (sympy.geometry.polygon.triangle property)": [[84, "sympy.geometry.polygon.Triangle.inradius"]], "interior_angle (sympy.geometry.polygon.regularpolygon property)": [[84, "sympy.geometry.polygon.RegularPolygon.interior_angle"]], "intersection() (sympy.geometry.polygon.polygon method)": [[84, "sympy.geometry.polygon.Polygon.intersection"]], "is_convex() (sympy.geometry.polygon.polygon method)": [[84, "sympy.geometry.polygon.Polygon.is_convex"]], "is_equilateral() (sympy.geometry.polygon.triangle method)": [[84, "sympy.geometry.polygon.Triangle.is_equilateral"]], "is_isosceles() (sympy.geometry.polygon.triangle method)": [[84, "sympy.geometry.polygon.Triangle.is_isosceles"]], "is_right() (sympy.geometry.polygon.triangle method)": [[84, "sympy.geometry.polygon.Triangle.is_right"]], "is_scalene() (sympy.geometry.polygon.triangle method)": [[84, "sympy.geometry.polygon.Triangle.is_scalene"]], "is_similar() (sympy.geometry.polygon.triangle method)": [[84, "sympy.geometry.polygon.Triangle.is_similar"]], "length (sympy.geometry.polygon.regularpolygon property)": [[84, "sympy.geometry.polygon.RegularPolygon.length"]], "medial (sympy.geometry.polygon.triangle property)": [[84, "sympy.geometry.polygon.Triangle.medial"]], "medians (sympy.geometry.polygon.triangle property)": [[84, "sympy.geometry.polygon.Triangle.medians"]], "nine_point_circle (sympy.geometry.polygon.triangle property)": [[84, "sympy.geometry.polygon.Triangle.nine_point_circle"]], "orthocenter (sympy.geometry.polygon.triangle property)": [[84, "sympy.geometry.polygon.Triangle.orthocenter"]], "perimeter (sympy.geometry.polygon.polygon property)": [[84, "sympy.geometry.polygon.Polygon.perimeter"]], "plot_interval() (sympy.geometry.polygon.polygon method)": [[84, "sympy.geometry.polygon.Polygon.plot_interval"]], "polar_second_moment_of_area() (sympy.geometry.polygon.polygon method)": [[84, "sympy.geometry.polygon.Polygon.polar_second_moment_of_area"]], "radius (sympy.geometry.polygon.regularpolygon property)": [[84, "sympy.geometry.polygon.RegularPolygon.radius"]], "reflect() (sympy.geometry.polygon.regularpolygon method)": [[84, "sympy.geometry.polygon.RegularPolygon.reflect"]], "rotate() (sympy.geometry.polygon.regularpolygon method)": [[84, "sympy.geometry.polygon.RegularPolygon.rotate"]], "rotation (sympy.geometry.polygon.regularpolygon property)": [[84, "sympy.geometry.polygon.RegularPolygon.rotation"]], "scale() (sympy.geometry.polygon.regularpolygon method)": [[84, "sympy.geometry.polygon.RegularPolygon.scale"]], "second_moment_of_area() (sympy.geometry.polygon.polygon method)": [[84, "sympy.geometry.polygon.Polygon.second_moment_of_area"]], "section_modulus() (sympy.geometry.polygon.polygon method)": [[84, "sympy.geometry.polygon.Polygon.section_modulus"]], "sides (sympy.geometry.polygon.polygon property)": [[84, "sympy.geometry.polygon.Polygon.sides"]], "spin() (sympy.geometry.polygon.regularpolygon method)": [[84, "sympy.geometry.polygon.RegularPolygon.spin"]], "sympy.geometry.polygon": [[84, "module-sympy.geometry.polygon"]], "vertices (sympy.geometry.polygon.polygon property)": [[84, "sympy.geometry.polygon.Polygon.vertices"]], "vertices (sympy.geometry.polygon.regularpolygon property)": [[84, "sympy.geometry.polygon.RegularPolygon.vertices"]], "vertices (sympy.geometry.polygon.triangle property)": [[84, "sympy.geometry.polygon.Triangle.vertices"]], "are_similar() (in module sympy.geometry.util)": [[85, "sympy.geometry.util.are_similar"]], "centroid() (in module sympy.geometry.util)": [[85, "sympy.geometry.util.centroid"]], "convex_hull() (in module sympy.geometry.util)": [[85, "sympy.geometry.util.convex_hull"]], "idiff() (in module sympy.geometry.util)": [[85, "sympy.geometry.util.idiff"]], "intersection() (in module sympy.geometry.util)": [[85, "sympy.geometry.util.intersection"]], "sympy.geometry.util": [[85, "module-sympy.geometry.util"]], "expr_to_holonomic() (in module sympy.holonomic.holonomic)": [[87, "sympy.holonomic.holonomic.expr_to_holonomic"]], "from_hyper() (in module sympy.holonomic.holonomic)": [[87, "sympy.holonomic.holonomic.from_hyper"]], "from_meijerg() (in module sympy.holonomic.holonomic)": [[87, "sympy.holonomic.holonomic.from_meijerg"]], "sympy.holonomic": [[88, "module-sympy.holonomic"]], "_convert_poly_rat_alg() (in module sympy.holonomic.holonomic)": [[89, "sympy.holonomic.holonomic._convert_poly_rat_alg"]], "_create_table() (in module sympy.holonomic.holonomic)": [[89, "sympy.holonomic.holonomic._create_table"]], "composition() (sympy.holonomic.holonomic.holonomicfunction method)": [[90, "sympy.holonomic.holonomic.HolonomicFunction.composition"]], "diff() (sympy.holonomic.holonomic.holonomicfunction method)": [[90, "sympy.holonomic.holonomic.HolonomicFunction.diff"]], "evalf() (sympy.holonomic.holonomic.holonomicfunction method)": [[90, "sympy.holonomic.holonomic.HolonomicFunction.evalf"]], "integrate() (sympy.holonomic.holonomic.holonomicfunction method)": [[90, "sympy.holonomic.holonomic.HolonomicFunction.integrate"]], "series() (sympy.holonomic.holonomic.holonomicfunction method)": [[90, "sympy.holonomic.holonomic.HolonomicFunction.series"]], "to_expr() (sympy.holonomic.holonomic.holonomicfunction method)": [[90, "sympy.holonomic.holonomic.HolonomicFunction.to_expr"]], "to_hyper() (sympy.holonomic.holonomic.holonomicfunction method)": [[90, "sympy.holonomic.holonomic.HolonomicFunction.to_hyper"]], "to_meijerg() (sympy.holonomic.holonomic.holonomicfunction method)": [[90, "sympy.holonomic.holonomic.HolonomicFunction.to_meijerg"]], "to_sequence() (sympy.holonomic.holonomic.holonomicfunction method)": [[90, "sympy.holonomic.holonomic.HolonomicFunction.to_sequence"]], "differentialoperator (class in sympy.holonomic.holonomic)": [[91, "sympy.holonomic.holonomic.DifferentialOperator"]], "differentialoperatoralgebra (class in sympy.holonomic.holonomic)": [[91, "sympy.holonomic.holonomic.DifferentialOperatorAlgebra"]], "differentialoperators() (in module sympy.holonomic.holonomic)": [[91, "sympy.holonomic.holonomic.DifferentialOperators"]], "holonomicfunction (class in sympy.holonomic.holonomic)": [[91, "sympy.holonomic.holonomic.HolonomicFunction"]], "is_singular() (sympy.holonomic.holonomic.differentialoperator method)": [[91, "sympy.holonomic.holonomic.DifferentialOperator.is_singular"]], "_coeffexpvalueerror": [[93, "sympy.integrals.meijerint._CoeffExpValueError"]], "_check_antecedents() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint._check_antecedents"]], "_check_antecedents_1() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint._check_antecedents_1"]], "_check_antecedents_inversion() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint._check_antecedents_inversion"]], "_condsimp() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint._condsimp"]], "_create_lookup_table() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint._create_lookup_table"]], "_dummy() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint._dummy"]], "_dummy_() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint._dummy_"]], "_eval_cond() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint._eval_cond"]], "_exponents() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint._exponents"]], "_find_splitting_points() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint._find_splitting_points"]], "_flip_g() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint._flip_g"]], "_functions() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint._functions"]], "_get_coeff_exp() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint._get_coeff_exp"]], "_guess_expansion() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint._guess_expansion"]], "_inflate_fox_h() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint._inflate_fox_h"]], "_inflate_g() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint._inflate_g"]], "_int0oo() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint._int0oo"]], "_int0oo_1() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint._int0oo_1"]], "_int_inversion() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint._int_inversion"]], "_is_analytic() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint._is_analytic"]], "_meijerint_definite_2() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint._meijerint_definite_2"]], "_meijerint_definite_3() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint._meijerint_definite_3"]], "_meijerint_definite_4() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint._meijerint_definite_4"]], "_meijerint_indefinite_1() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint._meijerint_indefinite_1"]], "_mul_args() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint._mul_args"]], "_mul_as_two_parts() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint._mul_as_two_parts"]], "_my_principal_branch() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint._my_principal_branch"]], "_mytype() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint._mytype"]], "_rewrite1() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint._rewrite1"]], "_rewrite2() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint._rewrite2"]], "_rewrite_inversion() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint._rewrite_inversion"]], "_rewrite_saxena() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint._rewrite_saxena"]], "_rewrite_saxena_1() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint._rewrite_saxena_1"]], "_rewrite_single() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint._rewrite_single"]], "_split_mul() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint._split_mul"]], "meijerint_definite() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint.meijerint_definite"]], "meijerint_indefinite() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint.meijerint_indefinite"]], "meijerint_inversion() (in module sympy.integrals.meijerint)": [[93, "sympy.integrals.meijerint.meijerint_inversion"]], "sympy.integrals.meijerint": [[93, "module-sympy.integrals.meijerint"]], "sympy.integrals.meijerint_doc": [[93, "module-sympy.integrals.meijerint_doc"]], "cosinetransform (class in sympy.integrals.transforms)": [[95, "sympy.integrals.transforms.CosineTransform"]], "exprwithlimits (class in sympy.concrete.expr_with_limits)": [[95, "sympy.concrete.expr_with_limits.ExprWithLimits"]], "fouriertransform (class in sympy.integrals.transforms)": [[95, "sympy.integrals.transforms.FourierTransform"]], "hankeltransform (class in sympy.integrals.transforms)": [[95, "sympy.integrals.transforms.HankelTransform"]], "integral (class in sympy.integrals.integrals)": [[95, "sympy.integrals.integrals.Integral"]], "integral.is_commutative (in module sympy.integrals.integrals)": [[95, "sympy.integrals.integrals.Integral.is_commutative"]], "integraltransform (class in sympy.integrals.transforms)": [[95, "sympy.integrals.transforms.IntegralTransform"]], "integraltransformerror": [[95, "sympy.integrals.transforms.IntegralTransformError"]], "inversecosinetransform (class in sympy.integrals.transforms)": [[95, "sympy.integrals.transforms.InverseCosineTransform"]], "inversefouriertransform (class in sympy.integrals.transforms)": [[95, "sympy.integrals.transforms.InverseFourierTransform"]], "inversehankeltransform (class in sympy.integrals.transforms)": [[95, "sympy.integrals.transforms.InverseHankelTransform"]], "inverselaplacetransform (class in sympy.integrals.transforms)": [[95, "sympy.integrals.transforms.InverseLaplaceTransform"]], "inversemellintransform (class in sympy.integrals.transforms)": [[95, "sympy.integrals.transforms.InverseMellinTransform"]], "inversesinetransform (class in sympy.integrals.transforms)": [[95, "sympy.integrals.transforms.InverseSineTransform"]], "laplacetransform (class in sympy.integrals.transforms)": [[95, "sympy.integrals.transforms.LaplaceTransform"]], "mellintransform (class in sympy.integrals.transforms)": [[95, "sympy.integrals.transforms.MellinTransform"]], "nonelementaryintegral (class in sympy.integrals.risch)": [[95, "sympy.integrals.risch.NonElementaryIntegral"]], "sinetransform (class in sympy.integrals.transforms)": [[95, "sympy.integrals.transforms.SineTransform"]], "_fourier_transform() (in module sympy.integrals.transforms)": [[95, "sympy.integrals.transforms._fourier_transform"]], "as_sum() (sympy.integrals.integrals.integral method)": [[95, "sympy.integrals.integrals.Integral.as_sum"]], "bound_symbols (sympy.concrete.expr_with_limits.exprwithlimits property)": [[95, "sympy.concrete.expr_with_limits.ExprWithLimits.bound_symbols"]], "components() (in module sympy.integrals.heurisch)": [[95, "sympy.integrals.heurisch.components"]], "cosine_transform() (in module sympy.integrals.transforms)": [[95, "sympy.integrals.transforms.cosine_transform"]], "deltaintegrate() (in module sympy.integrals.deltafunctions)": [[95, "sympy.integrals.deltafunctions.deltaintegrate"]], "doit() (sympy.integrals.integrals.integral method)": [[95, "sympy.integrals.integrals.Integral.doit"]], "doit() (sympy.integrals.transforms.integraltransform method)": [[95, "sympy.integrals.transforms.IntegralTransform.doit"]], "doit() (sympy.integrals.transforms.inverselaplacetransform method)": [[95, "sympy.integrals.transforms.InverseLaplaceTransform.doit"]], "doit() (sympy.integrals.transforms.laplacetransform method)": [[95, "sympy.integrals.transforms.LaplaceTransform.doit"]], "fourier_transform() (in module sympy.integrals.transforms)": [[95, "sympy.integrals.transforms.fourier_transform"]], "free_symbols (sympy.concrete.expr_with_limits.exprwithlimits property)": [[95, "sympy.concrete.expr_with_limits.ExprWithLimits.free_symbols"]], "free_symbols (sympy.integrals.integrals.integral property)": [[95, "sympy.integrals.integrals.Integral.free_symbols"]], "function (sympy.concrete.expr_with_limits.exprwithlimits property)": [[95, "sympy.concrete.expr_with_limits.ExprWithLimits.function"]], "function (sympy.integrals.transforms.integraltransform property)": [[95, "sympy.integrals.transforms.IntegralTransform.function"]], "function_variable (sympy.integrals.transforms.integraltransform property)": [[95, "sympy.integrals.transforms.IntegralTransform.function_variable"]], "gauss_chebyshev_t() (in module sympy.integrals.quadrature)": [[95, "sympy.integrals.quadrature.gauss_chebyshev_t"]], "gauss_chebyshev_u() (in module sympy.integrals.quadrature)": [[95, "sympy.integrals.quadrature.gauss_chebyshev_u"]], "gauss_gen_laguerre() (in module sympy.integrals.quadrature)": [[95, "sympy.integrals.quadrature.gauss_gen_laguerre"]], "gauss_hermite() (in module sympy.integrals.quadrature)": [[95, "sympy.integrals.quadrature.gauss_hermite"]], "gauss_jacobi() (in module sympy.integrals.quadrature)": [[95, "sympy.integrals.quadrature.gauss_jacobi"]], "gauss_laguerre() (in module sympy.integrals.quadrature)": [[95, "sympy.integrals.quadrature.gauss_laguerre"]], "gauss_legendre() (in module sympy.integrals.quadrature)": [[95, "sympy.integrals.quadrature.gauss_legendre"]], "gauss_lobatto() (in module sympy.integrals.quadrature)": [[95, "sympy.integrals.quadrature.gauss_lobatto"]], "hankel_transform() (in module sympy.integrals.transforms)": [[95, "sympy.integrals.transforms.hankel_transform"]], "has_finite_limits (sympy.concrete.expr_with_limits.exprwithlimits property)": [[95, "sympy.concrete.expr_with_limits.ExprWithLimits.has_finite_limits"]], "has_reversed_limits (sympy.concrete.expr_with_limits.exprwithlimits property)": [[95, "sympy.concrete.expr_with_limits.ExprWithLimits.has_reversed_limits"]], "heurisch() (in module sympy.integrals.heurisch)": [[95, "sympy.integrals.heurisch.heurisch"]], "integral_steps() (in module sympy.integrals.manualintegrate)": [[95, "sympy.integrals.manualintegrate.integral_steps"]], "integrate() (in module sympy.integrals.integrals)": [[95, "sympy.integrals.integrals.integrate"]], "inverse_cosine_transform() (in module sympy.integrals.transforms)": [[95, "sympy.integrals.transforms.inverse_cosine_transform"]], "inverse_fourier_transform() (in module sympy.integrals.transforms)": [[95, "sympy.integrals.transforms.inverse_fourier_transform"]], "inverse_hankel_transform() (in module sympy.integrals.transforms)": [[95, "sympy.integrals.transforms.inverse_hankel_transform"]], "inverse_laplace_transform() (in module sympy.integrals.transforms)": [[95, "sympy.integrals.transforms.inverse_laplace_transform"]], "inverse_mellin_transform() (in module sympy.integrals.transforms)": [[95, "sympy.integrals.transforms.inverse_mellin_transform"]], "inverse_sine_transform() (in module sympy.integrals.transforms)": [[95, "sympy.integrals.transforms.inverse_sine_transform"]], "is_number (sympy.concrete.expr_with_limits.exprwithlimits property)": [[95, "sympy.concrete.expr_with_limits.ExprWithLimits.is_number"]], "laplace_correspondence() (in module sympy.integrals.transforms)": [[95, "sympy.integrals.transforms.laplace_correspondence"]], "laplace_initial_conds() (in module sympy.integrals.transforms)": [[95, "sympy.integrals.transforms.laplace_initial_conds"]], "laplace_transform() (in module sympy.integrals.transforms)": [[95, "sympy.integrals.transforms.laplace_transform"]], "limits (sympy.concrete.expr_with_limits.exprwithlimits property)": [[95, "sympy.concrete.expr_with_limits.ExprWithLimits.limits"]], "line_integrate() (in module sympy.integrals.integrals)": [[95, "sympy.integrals.integrals.line_integrate"]], "manualintegrate() (in module sympy.integrals.manualintegrate)": [[95, "sympy.integrals.manualintegrate.manualintegrate"]], "mellin_transform() (in module sympy.integrals.transforms)": [[95, "sympy.integrals.transforms.mellin_transform"]], "polytope_integrate() (in module sympy.integrals.intpoly)": [[95, "sympy.integrals.intpoly.polytope_integrate"]], "principal_value() (sympy.integrals.integrals.integral method)": [[95, "sympy.integrals.integrals.Integral.principal_value"]], "ratint() (in module sympy.integrals.rationaltools)": [[95, "sympy.integrals.rationaltools.ratint"]], "ratint_logpart() (in module sympy.integrals.rationaltools)": [[95, "sympy.integrals.rationaltools.ratint_logpart"]], "ratint_ratpart() (in module sympy.integrals.rationaltools)": [[95, "sympy.integrals.rationaltools.ratint_ratpart"]], "risch_integrate() (in module sympy.integrals.risch)": [[95, "sympy.integrals.risch.risch_integrate"]], "sine_transform() (in module sympy.integrals.transforms)": [[95, "sympy.integrals.transforms.sine_transform"]], "singularityintegrate() (in module sympy.integrals.singularityfunctions)": [[95, "sympy.integrals.singularityfunctions.singularityintegrate"]], "sympy.integrals": [[95, "module-sympy.integrals"]], "sympy.integrals.intpoly": [[95, "module-sympy.integrals.intpoly"]], "sympy.integrals.transforms": [[95, "module-sympy.integrals.transforms"]], "transform() (sympy.integrals.integrals.integral method)": [[95, "sympy.integrals.integrals.Integral.transform"]], "transform_variable (sympy.integrals.transforms.integraltransform property)": [[95, "sympy.integrals.transforms.IntegralTransform.transform_variable"]], "trigintegrate() (in module sympy.integrals.trigonometry)": [[95, "sympy.integrals.trigonometry.trigintegrate"]], "variables (sympy.concrete.expr_with_limits.exprwithlimits property)": [[95, "sympy.concrete.expr_with_limits.ExprWithLimits.variables"]], "enable_automatic_int_sympification() (in module sympy.interactive.session)": [[96, "sympy.interactive.session.enable_automatic_int_sympification"]], "enable_automatic_symbols() (in module sympy.interactive.session)": [[96, "sympy.interactive.session.enable_automatic_symbols"]], "init_ipython_session() (in module sympy.interactive.session)": [[96, "sympy.interactive.session.init_ipython_session"]], "init_printing() (in module sympy.interactive.printing)": [[96, "sympy.interactive.printing.init_printing"]], "init_python_session() (in module sympy.interactive.session)": [[96, "sympy.interactive.session.init_python_session"]], "init_session() (in module sympy.interactive.session)": [[96, "sympy.interactive.session.init_session"]], "int_to_integer() (in module sympy.interactive.session)": [[96, "sympy.interactive.session.int_to_Integer"]], "sympy.interactive": [[96, "module-sympy.interactive"]], "sympy.interactive.printing": [[96, "module-sympy.interactive.printing"]], "sympy.interactive.session": [[96, "module-sympy.interactive.session"]], "cartanmatrix() (in module sympy.liealgebras.cartan_matrix)": [[97, "sympy.liealgebras.cartan_matrix.CartanMatrix"]], "cartantype_generator (class in sympy.liealgebras.cartan_type)": [[97, "sympy.liealgebras.cartan_type.CartanType_generator"]], "dynkindiagram() (in module sympy.liealgebras.dynkin_diagram)": [[97, "sympy.liealgebras.dynkin_diagram.DynkinDiagram"]], "rootsystem (class in sympy.liealgebras.root_system)": [[97, "sympy.liealgebras.root_system.RootSystem"]], "standard_cartan (class in sympy.liealgebras.cartan_type)": [[97, "sympy.liealgebras.cartan_type.Standard_Cartan"]], "typea (class in sympy.liealgebras.type_a)": [[97, "sympy.liealgebras.type_a.TypeA"]], "typeb (class in sympy.liealgebras.type_b)": [[97, "sympy.liealgebras.type_b.TypeB"]], "typec (class in sympy.liealgebras.type_c)": [[97, "sympy.liealgebras.type_c.TypeC"]], "typed (class in sympy.liealgebras.type_d)": [[97, "sympy.liealgebras.type_d.TypeD"]], "typee (class in sympy.liealgebras.type_e)": [[97, "sympy.liealgebras.type_e.TypeE"]], "typef (class in sympy.liealgebras.type_f)": [[97, "sympy.liealgebras.type_f.TypeF"]], "typeg (class in sympy.liealgebras.type_g)": [[97, "sympy.liealgebras.type_g.TypeG"]], "weylgroup (class in sympy.liealgebras.weyl_group)": [[97, "sympy.liealgebras.weyl_group.WeylGroup"]], "add_as_roots() (sympy.liealgebras.root_system.rootsystem method)": [[97, "sympy.liealgebras.root_system.RootSystem.add_as_roots"]], "add_simple_roots() (sympy.liealgebras.root_system.rootsystem method)": [[97, "sympy.liealgebras.root_system.RootSystem.add_simple_roots"]], "all_roots() (sympy.liealgebras.root_system.rootsystem method)": [[97, "sympy.liealgebras.root_system.RootSystem.all_roots"]], "basic_root() (sympy.liealgebras.type_a.typea method)": [[97, "sympy.liealgebras.type_a.TypeA.basic_root"]], "basic_root() (sympy.liealgebras.type_b.typeb method)": [[97, "sympy.liealgebras.type_b.TypeB.basic_root"]], "basic_root() (sympy.liealgebras.type_c.typec method)": [[97, "sympy.liealgebras.type_c.TypeC.basic_root"]], "basic_root() (sympy.liealgebras.type_d.typed method)": [[97, "sympy.liealgebras.type_d.TypeD.basic_root"]], "basic_root() (sympy.liealgebras.type_e.typee method)": [[97, "sympy.liealgebras.type_e.TypeE.basic_root"]], "basic_root() (sympy.liealgebras.type_f.typef method)": [[97, "sympy.liealgebras.type_f.TypeF.basic_root"]], "basis() (sympy.liealgebras.type_a.typea method)": [[97, "sympy.liealgebras.type_a.TypeA.basis"]], "basis() (sympy.liealgebras.type_b.typeb method)": [[97, "sympy.liealgebras.type_b.TypeB.basis"]], "basis() (sympy.liealgebras.type_c.typec method)": [[97, "sympy.liealgebras.type_c.TypeC.basis"]], "basis() (sympy.liealgebras.type_d.typed method)": [[97, "sympy.liealgebras.type_d.TypeD.basis"]], "basis() (sympy.liealgebras.type_e.typee method)": [[97, "sympy.liealgebras.type_e.TypeE.basis"]], "basis() (sympy.liealgebras.type_f.typef method)": [[97, "sympy.liealgebras.type_f.TypeF.basis"]], "basis() (sympy.liealgebras.type_g.typeg method)": [[97, "sympy.liealgebras.type_g.TypeG.basis"]], "cartan_matrix() (sympy.liealgebras.root_system.rootsystem method)": [[97, "sympy.liealgebras.root_system.RootSystem.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_a.typea method)": [[97, "sympy.liealgebras.type_a.TypeA.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_b.typeb method)": [[97, "sympy.liealgebras.type_b.TypeB.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_c.typec method)": [[97, "sympy.liealgebras.type_c.TypeC.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_d.typed method)": [[97, "sympy.liealgebras.type_d.TypeD.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_e.typee method)": [[97, "sympy.liealgebras.type_e.TypeE.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_f.typef method)": [[97, "sympy.liealgebras.type_f.TypeF.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_g.typeg method)": [[97, "sympy.liealgebras.type_g.TypeG.cartan_matrix"]], "coxeter_diagram() (sympy.liealgebras.weyl_group.weylgroup method)": [[97, "sympy.liealgebras.weyl_group.WeylGroup.coxeter_diagram"]], "delete_doubles() (sympy.liealgebras.weyl_group.weylgroup method)": [[97, "sympy.liealgebras.weyl_group.WeylGroup.delete_doubles"]], "dimension() (sympy.liealgebras.type_a.typea method)": [[97, "sympy.liealgebras.type_a.TypeA.dimension"]], "dimension() (sympy.liealgebras.type_b.typeb method)": [[97, "sympy.liealgebras.type_b.TypeB.dimension"]], "dimension() (sympy.liealgebras.type_c.typec method)": [[97, "sympy.liealgebras.type_c.TypeC.dimension"]], "dimension() (sympy.liealgebras.type_d.typed method)": [[97, "sympy.liealgebras.type_d.TypeD.dimension"]], "dimension() (sympy.liealgebras.type_e.typee method)": [[97, "sympy.liealgebras.type_e.TypeE.dimension"]], "dimension() (sympy.liealgebras.type_f.typef method)": [[97, "sympy.liealgebras.type_f.TypeF.dimension"]], "dimension() (sympy.liealgebras.type_g.typeg method)": [[97, "sympy.liealgebras.type_g.TypeG.dimension"]], "dynkin_diagram() (sympy.liealgebras.root_system.rootsystem method)": [[97, "sympy.liealgebras.root_system.RootSystem.dynkin_diagram"]], "element_order() (sympy.liealgebras.weyl_group.weylgroup method)": [[97, "sympy.liealgebras.weyl_group.WeylGroup.element_order"]], "generators() (sympy.liealgebras.weyl_group.weylgroup method)": [[97, "sympy.liealgebras.weyl_group.WeylGroup.generators"]], "group_name() (sympy.liealgebras.weyl_group.weylgroup method)": [[97, "sympy.liealgebras.weyl_group.WeylGroup.group_name"]], "group_order() (sympy.liealgebras.weyl_group.weylgroup method)": [[97, "sympy.liealgebras.weyl_group.WeylGroup.group_order"]], "highest_root() (sympy.liealgebras.type_a.typea method)": [[97, "sympy.liealgebras.type_a.TypeA.highest_root"]], "lie_algebra() (sympy.liealgebras.type_a.typea method)": [[97, "sympy.liealgebras.type_a.TypeA.lie_algebra"]], "lie_algebra() (sympy.liealgebras.type_b.typeb method)": [[97, "sympy.liealgebras.type_b.TypeB.lie_algebra"]], "lie_algebra() (sympy.liealgebras.type_c.typec method)": [[97, "sympy.liealgebras.type_c.TypeC.lie_algebra"]], "lie_algebra() (sympy.liealgebras.type_d.typed method)": [[97, "sympy.liealgebras.type_d.TypeD.lie_algebra"]], "matrix_form() (sympy.liealgebras.weyl_group.weylgroup method)": [[97, "sympy.liealgebras.weyl_group.WeylGroup.matrix_form"]], "positive_roots() (sympy.liealgebras.type_a.typea method)": [[97, "sympy.liealgebras.type_a.TypeA.positive_roots"]], "positive_roots() (sympy.liealgebras.type_b.typeb method)": [[97, "sympy.liealgebras.type_b.TypeB.positive_roots"]], "positive_roots() (sympy.liealgebras.type_c.typec method)": [[97, "sympy.liealgebras.type_c.TypeC.positive_roots"]], "positive_roots() (sympy.liealgebras.type_d.typed method)": [[97, "sympy.liealgebras.type_d.TypeD.positive_roots"]], "positive_roots() (sympy.liealgebras.type_e.typee method)": [[97, "sympy.liealgebras.type_e.TypeE.positive_roots"]], "positive_roots() (sympy.liealgebras.type_f.typef method)": [[97, "sympy.liealgebras.type_f.TypeF.positive_roots"]], "positive_roots() (sympy.liealgebras.type_g.typeg method)": [[97, "sympy.liealgebras.type_g.TypeG.positive_roots"]], "rank() (sympy.liealgebras.cartan_type.standard_cartan method)": [[97, "sympy.liealgebras.cartan_type.Standard_Cartan.rank"]], "root_space() (sympy.liealgebras.root_system.rootsystem method)": [[97, "sympy.liealgebras.root_system.RootSystem.root_space"]], "roots() (sympy.liealgebras.type_a.typea method)": [[97, "sympy.liealgebras.type_a.TypeA.roots"]], "roots() (sympy.liealgebras.type_b.typeb method)": [[97, "sympy.liealgebras.type_b.TypeB.roots"]], "roots() (sympy.liealgebras.type_c.typec method)": [[97, "sympy.liealgebras.type_c.TypeC.roots"]], "roots() (sympy.liealgebras.type_d.typed method)": [[97, "sympy.liealgebras.type_d.TypeD.roots"]], "roots() (sympy.liealgebras.type_e.typee method)": [[97, "sympy.liealgebras.type_e.TypeE.roots"]], "roots() (sympy.liealgebras.type_f.typef method)": [[97, "sympy.liealgebras.type_f.TypeF.roots"]], "roots() (sympy.liealgebras.type_g.typeg method)": [[97, "sympy.liealgebras.type_g.TypeG.roots"]], "series() (sympy.liealgebras.cartan_type.standard_cartan method)": [[97, "sympy.liealgebras.cartan_type.Standard_Cartan.series"]], "simple_root() (sympy.liealgebras.type_a.typea method)": [[97, "sympy.liealgebras.type_a.TypeA.simple_root"]], "simple_root() (sympy.liealgebras.type_b.typeb method)": [[97, "sympy.liealgebras.type_b.TypeB.simple_root"]], "simple_root() (sympy.liealgebras.type_c.typec method)": [[97, "sympy.liealgebras.type_c.TypeC.simple_root"]], "simple_root() (sympy.liealgebras.type_d.typed method)": [[97, "sympy.liealgebras.type_d.TypeD.simple_root"]], "simple_root() (sympy.liealgebras.type_e.typee method)": [[97, "sympy.liealgebras.type_e.TypeE.simple_root"]], "simple_root() (sympy.liealgebras.type_f.typef method)": [[97, "sympy.liealgebras.type_f.TypeF.simple_root"]], "simple_root() (sympy.liealgebras.type_g.typeg method)": [[97, "sympy.liealgebras.type_g.TypeG.simple_root"]], "simple_roots() (sympy.liealgebras.root_system.rootsystem method)": [[97, "sympy.liealgebras.root_system.RootSystem.simple_roots"]], "sympy.liealgebras": [[97, "module-sympy.liealgebras"]], "anfform() (in module sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.ANFform"]], "and (class in sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.And"]], "boolean (class in sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.Boolean"]], "booleanfalse (class in sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.BooleanFalse"]], "booleantrue (class in sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.BooleanTrue"]], "equivalent (class in sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.Equivalent"]], "exclusive (class in sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.Exclusive"]], "ite (class in sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.ITE"]], "implies (class in sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.Implies"]], "nand (class in sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.Nand"]], "nor (class in sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.Nor"]], "not (class in sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.Not"]], "or (class in sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.Or"]], "posform() (in module sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.POSform"]], "sopform() (in module sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.SOPform"]], "xnor (class in sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.Xnor"]], "xor (class in sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.Xor"]], "anf_coeffs() (in module sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.anf_coeffs"]], "as_set() (sympy.logic.boolalg.boolean method)": [[98, "sympy.logic.boolalg.Boolean.as_set"]], "as_set() (sympy.logic.boolalg.booleanfalse method)": [[98, "sympy.logic.boolalg.BooleanFalse.as_set"]], "as_set() (sympy.logic.boolalg.booleantrue method)": [[98, "sympy.logic.boolalg.BooleanTrue.as_set"]], "bool_map() (in module sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.bool_map"]], "bool_maxterm() (in module sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.bool_maxterm"]], "bool_minterm() (in module sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.bool_minterm"]], "bool_monomial() (in module sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.bool_monomial"]], "distribute_and_over_or() (in module sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.distribute_and_over_or"]], "distribute_or_over_and() (in module sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.distribute_or_over_and"]], "distribute_xor_over_and() (in module sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.distribute_xor_over_and"]], "eliminate_implications() (in module sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.eliminate_implications"]], "equals() (sympy.logic.boolalg.boolean method)": [[98, "sympy.logic.boolalg.Boolean.equals"]], "gateinputcount() (in module sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.gateinputcount"]], "integer_to_term() (in module sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.integer_to_term"]], "is_anf() (in module sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.is_anf"]], "is_cnf() (in module sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.is_cnf"]], "is_dnf() (in module sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.is_dnf"]], "is_nnf() (in module sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.is_nnf"]], "satisfiable() (in module sympy.logic.inference)": [[98, "sympy.logic.inference.satisfiable"]], "simplify_logic() (in module sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.simplify_logic"]], "sympy.logic": [[98, "module-sympy.logic"]], "sympy.logic.inference": [[98, "module-sympy.logic.inference"]], "term_to_integer() (in module sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.term_to_integer"]], "to_anf() (in module sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.to_anf"]], "to_cnf() (in module sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.to_cnf"]], "to_dnf() (in module sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.to_dnf"]], "to_int_repr() (in module sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.to_int_repr"]], "to_nnf() (in module sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.to_nnf"]], "truth_table() (in module sympy.logic.boolalg)": [[98, "sympy.logic.boolalg.truth_table"]], "c (sympy.matrices.common.matrixcommon property)": [[99, "sympy.matrices.common.MatrixCommon.C"]], "h (sympy.matrices.common.matrixcommon property)": [[99, "sympy.matrices.common.MatrixCommon.H"]], "matrixcommon (class in sympy.matrices.common)": [[99, "sympy.matrices.common.MatrixCommon"]], "matrixkind (class in sympy.matrices.common)": [[99, "sympy.matrices.common.MatrixKind"]], "t (sympy.matrices.common.matrixcommon property)": [[99, "sympy.matrices.common.MatrixCommon.T"]], "__abs__() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.__abs__"]], "__add__() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.__add__"]], "__getitem__() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.__getitem__"]], "__len__() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.__len__"]], "__mul__() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.__mul__"]], "__pow__() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.__pow__"]], "__weakref__ (sympy.matrices.common.matrixcommon attribute)": [[99, "sympy.matrices.common.MatrixCommon.__weakref__"]], "adjoint() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.adjoint"]], "applyfunc() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.applyfunc"]], "as_real_imag() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.as_real_imag"]], "atoms() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.atoms"]], "col() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.col"]], "col_del() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.col_del"]], "col_insert() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.col_insert"]], "col_join() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.col_join"]], "companion() (sympy.matrices.common.matrixcommon class method)": [[99, "sympy.matrices.common.MatrixCommon.companion"]], "conjugate() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.conjugate"]], "diag() (sympy.matrices.common.matrixcommon class method)": [[99, "sympy.matrices.common.MatrixCommon.diag"]], "diagonal() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.diagonal"]], "evalf() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.evalf"]], "expand() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.expand"]], "extract() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.extract"]], "eye() (sympy.matrices.common.matrixcommon class method)": [[99, "sympy.matrices.common.MatrixCommon.eye"]], "free_symbols (sympy.matrices.common.matrixcommon property)": [[99, "sympy.matrices.common.MatrixCommon.free_symbols"]], "get_diag_blocks() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.get_diag_blocks"]], "has() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.has"]], "hstack() (sympy.matrices.common.matrixcommon class method)": [[99, "sympy.matrices.common.MatrixCommon.hstack"]], "is_anti_symmetric() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.is_anti_symmetric"]], "is_diagonal() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.is_diagonal"]], "is_hermitian (sympy.matrices.common.matrixcommon property)": [[99, "sympy.matrices.common.MatrixCommon.is_hermitian"]], "is_lower (sympy.matrices.common.matrixcommon property)": [[99, "sympy.matrices.common.MatrixCommon.is_lower"]], "is_lower_hessenberg (sympy.matrices.common.matrixcommon property)": [[99, "sympy.matrices.common.MatrixCommon.is_lower_hessenberg"]], "is_square (sympy.matrices.common.matrixcommon property)": [[99, "sympy.matrices.common.MatrixCommon.is_square"]], "is_strongly_diagonally_dominant (sympy.matrices.common.matrixcommon property)": [[99, "sympy.matrices.common.MatrixCommon.is_strongly_diagonally_dominant"]], "is_symbolic() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.is_symbolic"]], "is_symmetric() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.is_symmetric"]], "is_upper (sympy.matrices.common.matrixcommon property)": [[99, "sympy.matrices.common.MatrixCommon.is_upper"]], "is_upper_hessenberg (sympy.matrices.common.matrixcommon property)": [[99, "sympy.matrices.common.MatrixCommon.is_upper_hessenberg"]], "is_weakly_diagonally_dominant (sympy.matrices.common.matrixcommon property)": [[99, "sympy.matrices.common.MatrixCommon.is_weakly_diagonally_dominant"]], "is_zero_matrix (sympy.matrices.common.matrixcommon property)": [[99, "sympy.matrices.common.MatrixCommon.is_zero_matrix"]], "jordan_block() (sympy.matrices.common.matrixcommon class method)": [[99, "sympy.matrices.common.MatrixCommon.jordan_block"]], "lower_triangular() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.lower_triangular"]], "multiply() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.multiply"]], "multiply_elementwise() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.multiply_elementwise"]], "n() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.n"]], "ones() (sympy.matrices.common.matrixcommon class method)": [[99, "sympy.matrices.common.MatrixCommon.ones"]], "permute() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.permute"]], "permute_cols() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.permute_cols"]], "permute_rows() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.permute_rows"]], "pow() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.pow"]], "refine() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.refine"]], "replace() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.replace"]], "reshape() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.reshape"]], "rmultiply() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.rmultiply"]], "rot90() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.rot90"]], "row() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.row"]], "row_del() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.row_del"]], "row_insert() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.row_insert"]], "row_join() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.row_join"]], "shape (sympy.matrices.common.matrixcommon property)": [[99, "sympy.matrices.common.MatrixCommon.shape"]], "simplify() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.simplify"]], "subs() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.subs"]], "sympy.matrices.common": [[99, "module-sympy.matrices.common"]], "todod() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.todod"]], "todok() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.todok"]], "tolist() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.tolist"]], "trace() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.trace"]], "transpose() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.transpose"]], "upper_triangular() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.upper_triangular"]], "values() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.values"]], "vec() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.vec"]], "vech() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.vech"]], "vstack() (sympy.matrices.common.matrixcommon class method)": [[99, "sympy.matrices.common.MatrixCommon.vstack"]], "wilkinson() (sympy.matrices.common.matrixcommon class method)": [[99, "sympy.matrices.common.MatrixCommon.wilkinson"]], "xreplace() (sympy.matrices.common.matrixcommon method)": [[99, "sympy.matrices.common.MatrixCommon.xreplace"]], "zeros() (sympy.matrices.common.matrixcommon class method)": [[99, "sympy.matrices.common.MatrixCommon.zeros"]], "densematrix (class in sympy.matrices.dense)": [[100, "sympy.matrices.dense.DenseMatrix"]], "ldldecomposition() (sympy.matrices.dense.densematrix method)": [[100, "sympy.matrices.dense.DenseMatrix.LDLdecomposition"]], "matrix (in module sympy.matrices.dense)": [[100, "sympy.matrices.dense.Matrix"]], "mutabledensematrix (class in sympy.matrices.dense)": [[100, "sympy.matrices.dense.MutableDenseMatrix"]], "as_immutable() (sympy.matrices.dense.densematrix method)": [[100, "sympy.matrices.dense.DenseMatrix.as_immutable"]], "as_mutable() (sympy.matrices.dense.densematrix method)": [[100, "sympy.matrices.dense.DenseMatrix.as_mutable"]], "cholesky() (sympy.matrices.dense.densematrix method)": [[100, "sympy.matrices.dense.DenseMatrix.cholesky"]], "lower_triangular_solve() (sympy.matrices.dense.densematrix method)": [[100, "sympy.matrices.dense.DenseMatrix.lower_triangular_solve"]], "simplify() (sympy.matrices.dense.mutabledensematrix method)": [[100, "sympy.matrices.dense.MutableDenseMatrix.simplify"]], "upper_triangular_solve() (sympy.matrices.dense.densematrix method)": [[100, "sympy.matrices.dense.DenseMatrix.upper_triangular_solve"]], "blockdiagmatrix (class in sympy.matrices.expressions.blockmatrix)": [[101, "sympy.matrices.expressions.blockmatrix.BlockDiagMatrix"]], "blockmatrix (class in sympy.matrices.expressions.blockmatrix)": [[101, "sympy.matrices.expressions.blockmatrix.BlockMatrix"]], "companionmatrix (class in sympy.matrices.expressions)": [[101, "sympy.matrices.expressions.CompanionMatrix"]], "functionmatrix (class in sympy.matrices.expressions)": [[101, "sympy.matrices.expressions.FunctionMatrix"]], "hadamardpower (class in sympy.matrices.expressions)": [[101, "sympy.matrices.expressions.HadamardPower"]], "hadamardproduct (class in sympy.matrices.expressions)": [[101, "sympy.matrices.expressions.HadamardProduct"]], "identity (class in sympy.matrices.expressions)": [[101, "sympy.matrices.expressions.Identity"]], "inverse (class in sympy.matrices.expressions)": [[101, "sympy.matrices.expressions.Inverse"]], "ldudecomposition() (sympy.matrices.expressions.blockmatrix.blockmatrix method)": [[101, "sympy.matrices.expressions.blockmatrix.BlockMatrix.LDUdecomposition"]], "ludecomposition() (sympy.matrices.expressions.blockmatrix.blockmatrix method)": [[101, "sympy.matrices.expressions.blockmatrix.BlockMatrix.LUdecomposition"]], "matadd (class in sympy.matrices.expressions)": [[101, "sympy.matrices.expressions.MatAdd"]], "matmul (class in sympy.matrices.expressions)": [[101, "sympy.matrices.expressions.MatMul"]], "matpow (class in sympy.matrices.expressions)": [[101, "sympy.matrices.expressions.MatPow"]], "matrixexpr (class in sympy.matrices.expressions)": [[101, "sympy.matrices.expressions.MatrixExpr"]], "matrixpermute (class in sympy.matrices.expressions)": [[101, "sympy.matrices.expressions.MatrixPermute"]], "matrixset (class in sympy.matrices.expressions)": [[101, "sympy.matrices.expressions.MatrixSet"]], "matrixsymbol (class in sympy.matrices.expressions)": [[101, "sympy.matrices.expressions.MatrixSymbol"]], "permutationmatrix (class in sympy.matrices.expressions)": [[101, "sympy.matrices.expressions.PermutationMatrix"]], "t (sympy.matrices.expressions.matrixexpr property)": [[101, "sympy.matrices.expressions.MatrixExpr.T"]], "trace (class in sympy.matrices.expressions)": [[101, "sympy.matrices.expressions.Trace"]], "transpose (class in sympy.matrices.expressions)": [[101, "sympy.matrices.expressions.Transpose"]], "udldecomposition() (sympy.matrices.expressions.blockmatrix.blockmatrix method)": [[101, "sympy.matrices.expressions.blockmatrix.BlockMatrix.UDLdecomposition"]], "zeromatrix (class in sympy.matrices.expressions)": [[101, "sympy.matrices.expressions.ZeroMatrix"]], "as_coeff_mul() (sympy.matrices.expressions.matrixexpr method)": [[101, "sympy.matrices.expressions.MatrixExpr.as_coeff_Mul"]], "as_explicit() (sympy.matrices.expressions.matrixexpr method)": [[101, "sympy.matrices.expressions.MatrixExpr.as_explicit"]], "as_mutable() (sympy.matrices.expressions.matrixexpr method)": [[101, "sympy.matrices.expressions.MatrixExpr.as_mutable"]], "block_collapse() (in module sympy.matrices.expressions.blockmatrix)": [[101, "sympy.matrices.expressions.blockmatrix.block_collapse"]], "equals() (sympy.matrices.expressions.matrixexpr method)": [[101, "sympy.matrices.expressions.MatrixExpr.equals"]], "from_index_summation() (sympy.matrices.expressions.matrixexpr static method)": [[101, "sympy.matrices.expressions.MatrixExpr.from_index_summation"]], "get_diag_blocks() (sympy.matrices.expressions.blockmatrix.blockdiagmatrix method)": [[101, "sympy.matrices.expressions.blockmatrix.BlockDiagMatrix.get_diag_blocks"]], "hadamard_product() (in module sympy.matrices.expressions)": [[101, "sympy.matrices.expressions.hadamard_product"]], "schur() (sympy.matrices.expressions.blockmatrix.blockmatrix method)": [[101, "sympy.matrices.expressions.blockmatrix.BlockMatrix.schur"]], "sympy.matrices.expressions": [[101, "module-sympy.matrices.expressions"]], "sympy.matrices.expressions.blockmatrix": [[101, "module-sympy.matrices.expressions.blockmatrix"]], "transpose() (sympy.matrices.expressions.blockmatrix.blockmatrix method)": [[101, "sympy.matrices.expressions.blockmatrix.BlockMatrix.transpose"]], "immutabledensematrix (class in sympy.matrices.immutable)": [[102, "sympy.matrices.immutable.ImmutableDenseMatrix"]], "immutablematrix (in module sympy.matrices.immutable)": [[102, "sympy.matrices.immutable.ImmutableMatrix"]], "sympy.matrices.immutable": [[102, "module-sympy.matrices.immutable"]], "sympy.matrices": [[103, "module-sympy.matrices"]], "d (sympy.matrices.matrices.matrixbase property)": [[104, "sympy.matrices.matrices.MatrixBase.D"]], "gramschmidt() (in module sympy.matrices.dense)": [[104, "sympy.matrices.dense.GramSchmidt"]], "ldldecomposition() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.LDLdecomposition"]], "ldlsolve() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.LDLsolve"]], "ludecomposition() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.LUdecomposition"]], "ludecompositionff() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.LUdecompositionFF"]], "ludecomposition_simple() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.LUdecomposition_Simple"]], "lusolve() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.LUsolve"]], "matrixbase (class in sympy.matrices.matrices)": [[104, "sympy.matrices.matrices.MatrixBase"]], "matrixcalculus (class in sympy.matrices.matrices)": [[104, "sympy.matrices.matrices.MatrixCalculus"]], "matrixdeterminant (class in sympy.matrices.matrices)": [[104, "sympy.matrices.matrices.MatrixDeterminant"]], "matrixeigen (class in sympy.matrices.matrices)": [[104, "sympy.matrices.matrices.MatrixEigen"]], "matrixerror (class in sympy.matrices.matrices)": [[104, "sympy.matrices.matrices.MatrixError"]], "matrixreductions (class in sympy.matrices.matrices)": [[104, "sympy.matrices.matrices.MatrixReductions"]], "matrixsubspaces (class in sympy.matrices.matrices)": [[104, "sympy.matrices.matrices.MatrixSubspaces"]], "nonsquarematrixerror (class in sympy.matrices.matrices)": [[104, "sympy.matrices.matrices.NonSquareMatrixError"]], "qrdecomposition() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.QRdecomposition"]], "qrsolve() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.QRsolve"]], "shapeerror (class in sympy.matrices.matrices)": [[104, "sympy.matrices.matrices.ShapeError"]], "a2idx() (in module sympy.matrices.matrices)": [[104, "sympy.matrices.matrices.a2idx"]], "add() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.add"]], "adjugate() (sympy.matrices.matrices.matrixdeterminant method)": [[104, "sympy.matrices.matrices.MatrixDeterminant.adjugate"]], "analytic_func() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.analytic_func"]], "bidiagonal_decomposition() (sympy.matrices.matrices.matrixeigen method)": [[104, "sympy.matrices.matrices.MatrixEigen.bidiagonal_decomposition"]], "bidiagonalize() (sympy.matrices.matrices.matrixeigen method)": [[104, "sympy.matrices.matrices.MatrixEigen.bidiagonalize"]], "casoratian() (in module sympy.matrices.dense)": [[104, "sympy.matrices.dense.casoratian"]], "charpoly() (sympy.matrices.matrices.matrixdeterminant method)": [[104, "sympy.matrices.matrices.MatrixDeterminant.charpoly"]], "cholesky() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.cholesky"]], "cholesky_solve() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.cholesky_solve"]], "cofactor() (sympy.matrices.matrices.matrixdeterminant method)": [[104, "sympy.matrices.matrices.MatrixDeterminant.cofactor"]], "cofactor_matrix() (sympy.matrices.matrices.matrixdeterminant method)": [[104, "sympy.matrices.matrices.MatrixDeterminant.cofactor_matrix"]], "columnspace() (sympy.matrices.matrices.matrixsubspaces method)": [[104, "sympy.matrices.matrices.MatrixSubspaces.columnspace"]], "condition_number() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.condition_number"]], "connected_components() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.connected_components"]], "connected_components_decomposition() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.connected_components_decomposition"]], "copy() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.copy"]], "cramer_solve() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.cramer_solve"]], "cross() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.cross"]], "det() (sympy.matrices.matrices.matrixdeterminant method)": [[104, "sympy.matrices.matrices.MatrixDeterminant.det"]], "diag() (in module sympy.matrices.dense)": [[104, "sympy.matrices.dense.diag"]], "diagonal_solve() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.diagonal_solve"]], "diagonalize() (sympy.matrices.matrices.matrixeigen method)": [[104, "sympy.matrices.matrices.MatrixEigen.diagonalize"]], "diff() (sympy.matrices.matrices.matrixcalculus method)": [[104, "sympy.matrices.matrices.MatrixCalculus.diff"]], "dot() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.dot"]], "dual() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.dual"]], "echelon_form() (sympy.matrices.matrices.matrixreductions method)": [[104, "sympy.matrices.matrices.MatrixReductions.echelon_form"]], "eigenvals() (sympy.matrices.matrices.matrixeigen method)": [[104, "sympy.matrices.matrices.MatrixEigen.eigenvals"]], "eigenvects() (sympy.matrices.matrices.matrixeigen method)": [[104, "sympy.matrices.matrices.MatrixEigen.eigenvects"]], "elementary_col_op() (sympy.matrices.matrices.matrixreductions method)": [[104, "sympy.matrices.matrices.MatrixReductions.elementary_col_op"]], "elementary_row_op() (sympy.matrices.matrices.matrixreductions method)": [[104, "sympy.matrices.matrices.MatrixReductions.elementary_row_op"]], "exp() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.exp"]], "eye() (in module sympy.matrices.dense)": [[104, "sympy.matrices.dense.eye"]], "gauss_jordan_solve() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.gauss_jordan_solve"]], "hat() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.hat"]], "hessian() (in module sympy.matrices.dense)": [[104, "sympy.matrices.dense.hessian"]], "integrate() (sympy.matrices.matrices.matrixcalculus method)": [[104, "sympy.matrices.matrices.MatrixCalculus.integrate"]], "inv() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.inv"]], "inv_mod() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.inv_mod"]], "inverse_adj() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.inverse_ADJ"]], "inverse_block() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.inverse_BLOCK"]], "inverse_ch() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.inverse_CH"]], "inverse_ge() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.inverse_GE"]], "inverse_ldl() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.inverse_LDL"]], "inverse_lu() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.inverse_LU"]], "inverse_qr() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.inverse_QR"]], "irregular() (sympy.matrices.matrices.matrixbase class method)": [[104, "sympy.matrices.matrices.MatrixBase.irregular"]], "is_diagonalizable() (sympy.matrices.matrices.matrixeigen method)": [[104, "sympy.matrices.matrices.MatrixEigen.is_diagonalizable"]], "is_echelon (sympy.matrices.matrices.matrixreductions property)": [[104, "sympy.matrices.matrices.MatrixReductions.is_echelon"]], "is_indefinite (sympy.matrices.matrices.matrixeigen property)": [[104, "sympy.matrices.matrices.MatrixEigen.is_indefinite"]], "is_negative_definite (sympy.matrices.matrices.matrixeigen property)": [[104, "sympy.matrices.matrices.MatrixEigen.is_negative_definite"]], "is_negative_semidefinite (sympy.matrices.matrices.matrixeigen property)": [[104, "sympy.matrices.matrices.MatrixEigen.is_negative_semidefinite"]], "is_nilpotent() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.is_nilpotent"]], "is_positive_definite (sympy.matrices.matrices.matrixeigen property)": [[104, "sympy.matrices.matrices.MatrixEigen.is_positive_definite"]], "is_positive_semidefinite (sympy.matrices.matrices.matrixeigen property)": [[104, "sympy.matrices.matrices.MatrixEigen.is_positive_semidefinite"]], "jacobian() (sympy.matrices.matrices.matrixcalculus method)": [[104, "sympy.matrices.matrices.MatrixCalculus.jacobian"]], "jordan_cell() (in module sympy.matrices.dense)": [[104, "sympy.matrices.dense.jordan_cell"]], "jordan_form() (sympy.matrices.matrices.matrixeigen method)": [[104, "sympy.matrices.matrices.MatrixEigen.jordan_form"]], "key2bounds() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.key2bounds"]], "key2ij() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.key2ij"]], "left_eigenvects() (sympy.matrices.matrices.matrixeigen method)": [[104, "sympy.matrices.matrices.MatrixEigen.left_eigenvects"]], "limit() (sympy.matrices.matrices.matrixcalculus method)": [[104, "sympy.matrices.matrices.MatrixCalculus.limit"]], "list2numpy() (in module sympy.matrices.dense)": [[104, "sympy.matrices.dense.list2numpy"]], "log() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.log"]], "lower_triangular_solve() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.lower_triangular_solve"]], "matrix2numpy() (in module sympy.matrices.dense)": [[104, "sympy.matrices.dense.matrix2numpy"]], "matrix_multiply_elementwise() (in module sympy.matrices.dense)": [[104, "sympy.matrices.dense.matrix_multiply_elementwise"]], "minor() (sympy.matrices.matrices.matrixdeterminant method)": [[104, "sympy.matrices.matrices.MatrixDeterminant.minor"]], "minor_submatrix() (sympy.matrices.matrices.matrixdeterminant method)": [[104, "sympy.matrices.matrices.MatrixDeterminant.minor_submatrix"]], "norm() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.norm"]], "normalized() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.normalized"]], "nullspace() (sympy.matrices.matrices.matrixsubspaces method)": [[104, "sympy.matrices.matrices.MatrixSubspaces.nullspace"]], "ones() (in module sympy.matrices.dense)": [[104, "sympy.matrices.dense.ones"]], "orthogonalize() (sympy.matrices.matrices.matrixsubspaces class method)": [[104, "sympy.matrices.matrices.MatrixSubspaces.orthogonalize"]], "per() (sympy.matrices.matrices.matrixdeterminant method)": [[104, "sympy.matrices.matrices.MatrixDeterminant.per"]], "pinv() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.pinv"]], "pinv_solve() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.pinv_solve"]], "print_nonzero() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.print_nonzero"]], "project() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.project"]], "randmatrix() (in module sympy.matrices.dense)": [[104, "sympy.matrices.dense.randMatrix"]], "rank() (sympy.matrices.matrices.matrixreductions method)": [[104, "sympy.matrices.matrices.MatrixReductions.rank"]], "rank_decomposition() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.rank_decomposition"]], "rot_axis1() (in module sympy.matrices.dense)": [[104, "sympy.matrices.dense.rot_axis1"]], "rot_axis2() (in module sympy.matrices.dense)": [[104, "sympy.matrices.dense.rot_axis2"]], "rot_axis3() (in module sympy.matrices.dense)": [[104, "sympy.matrices.dense.rot_axis3"]], "rot_ccw_axis1() (in module sympy.matrices.dense)": [[104, "sympy.matrices.dense.rot_ccw_axis1"]], "rot_ccw_axis2() (in module sympy.matrices.dense)": [[104, "sympy.matrices.dense.rot_ccw_axis2"]], "rot_ccw_axis3() (in module sympy.matrices.dense)": [[104, "sympy.matrices.dense.rot_ccw_axis3"]], "rot_givens() (in module sympy.matrices.dense)": [[104, "sympy.matrices.dense.rot_givens"]], "rowspace() (sympy.matrices.matrices.matrixsubspaces method)": [[104, "sympy.matrices.matrices.MatrixSubspaces.rowspace"]], "rref() (sympy.matrices.matrices.matrixreductions method)": [[104, "sympy.matrices.matrices.MatrixReductions.rref"]], "rref_rhs() (sympy.matrices.matrices.matrixreductions method)": [[104, "sympy.matrices.matrices.MatrixReductions.rref_rhs"]], "singular_value_decomposition() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.singular_value_decomposition"]], "singular_values() (sympy.matrices.matrices.matrixeigen method)": [[104, "sympy.matrices.matrices.MatrixEigen.singular_values"]], "solve() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.solve"]], "solve_least_squares() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.solve_least_squares"]], "strongly_connected_components() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.strongly_connected_components"]], "strongly_connected_components_decomposition() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.strongly_connected_components_decomposition"]], "symarray() (in module sympy.matrices.dense)": [[104, "sympy.matrices.dense.symarray"]], "sympy.matrices.matrices": [[104, "module-sympy.matrices.matrices"]], "table() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.table"]], "upper_hessenberg_decomposition() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.upper_hessenberg_decomposition"]], "upper_triangular_solve() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.upper_triangular_solve"]], "vee() (sympy.matrices.matrices.matrixbase method)": [[104, "sympy.matrices.matrices.MatrixBase.vee"]], "wronskian() (in module sympy.matrices.dense)": [[104, "sympy.matrices.dense.wronskian"]], "zeros() (in module sympy.matrices.dense)": [[104, "sympy.matrices.dense.zeros"]], "hermite_normal_form() (in module sympy.matrices.normalforms)": [[105, "sympy.matrices.normalforms.hermite_normal_form"]], "smith_normal_form() (in module sympy.matrices.normalforms)": [[105, "sympy.matrices.normalforms.smith_normal_form"]], "immutablesparsematrix (class in sympy.matrices.immutable)": [[106, "sympy.matrices.immutable.ImmutableSparseMatrix"]], "mutablesparsematrix (class in sympy.matrices.sparse)": [[106, "sympy.matrices.sparse.MutableSparseMatrix"]], "sparsematrix (in module sympy.matrices.sparse)": [[106, "sympy.matrices.sparse.SparseMatrix"]], "sympy.matrices.sparse": [[106, "module-sympy.matrices.sparse"]], "_csrtodok() (in module sympy.matrices.sparsetools)": [[107, "sympy.matrices.sparsetools._csrtodok"]], "_doktocsr() (in module sympy.matrices.sparsetools)": [[107, "sympy.matrices.sparsetools._doktocsr"]], "banded() (in module sympy.matrices.sparsetools)": [[107, "sympy.matrices.sparsetools.banded"]], "sympy.matrices.sparsetools": [[107, "module-sympy.matrices.sparsetools"]], "sieve (class in sympy.ntheory.generate)": [[108, "sympy.ntheory.generate.Sieve"]], "abundance() (in module sympy.ntheory.factor_)": [[108, "sympy.ntheory.factor_.abundance"]], "antidivisor_count() (in module sympy.ntheory.factor_)": [[108, "sympy.ntheory.factor_.antidivisor_count"]], "antidivisors() (in module sympy.ntheory.factor_)": [[108, "sympy.ntheory.factor_.antidivisors"]], "binomial_coefficients() (in module sympy.ntheory.multinomial)": [[108, "sympy.ntheory.multinomial.binomial_coefficients"]], "binomial_coefficients_list() (in module sympy.ntheory.multinomial)": [[108, "sympy.ntheory.multinomial.binomial_coefficients_list"]], "binomial_mod() (in module sympy.ntheory.residue_ntheory)": [[108, "sympy.ntheory.residue_ntheory.binomial_mod"]], "composite() (in module sympy.ntheory.generate)": [[108, "sympy.ntheory.generate.composite"]], "compositepi() (in module sympy.ntheory.generate)": [[108, "sympy.ntheory.generate.compositepi"]], "continued_fraction() (in module sympy.ntheory.continued_fraction)": [[108, "sympy.ntheory.continued_fraction.continued_fraction"]], "continued_fraction_convergents() (in module sympy.ntheory.continued_fraction)": [[108, "sympy.ntheory.continued_fraction.continued_fraction_convergents"]], "continued_fraction_iterator() (in module sympy.ntheory.continued_fraction)": [[108, "sympy.ntheory.continued_fraction.continued_fraction_iterator"]], "continued_fraction_periodic() (in module sympy.ntheory.continued_fraction)": [[108, "sympy.ntheory.continued_fraction.continued_fraction_periodic"]], "continued_fraction_reduce() (in module sympy.ntheory.continued_fraction)": [[108, "sympy.ntheory.continued_fraction.continued_fraction_reduce"]], "core() (in module sympy.ntheory.factor_)": [[108, "sympy.ntheory.factor_.core"]], "count_digits() (in module sympy.ntheory.digits)": [[108, "sympy.ntheory.digits.count_digits"]], "crt() (in module sympy.ntheory.modular)": [[108, "sympy.ntheory.modular.crt"]], "crt1() (in module sympy.ntheory.modular)": [[108, "sympy.ntheory.modular.crt1"]], "crt2() (in module sympy.ntheory.modular)": [[108, "sympy.ntheory.modular.crt2"]], "cycle_length() (in module sympy.ntheory.generate)": [[108, "sympy.ntheory.generate.cycle_length"]], "digits() (in module sympy.ntheory.digits)": [[108, "sympy.ntheory.digits.digits"]], "digits() (in module sympy.ntheory.factor_)": [[108, "sympy.ntheory.factor_.digits"]], "discrete_log() (in module sympy.ntheory.residue_ntheory)": [[108, "sympy.ntheory.residue_ntheory.discrete_log"]], "divisor_count() (in module sympy.ntheory.factor_)": [[108, "sympy.ntheory.factor_.divisor_count"]], "divisor_sigma (class in sympy.ntheory.factor_)": [[108, "sympy.ntheory.factor_.divisor_sigma"]], "divisors() (in module sympy.ntheory.factor_)": [[108, "sympy.ntheory.factor_.divisors"]], "ecm() (in module sympy.ntheory.ecm)": [[108, "sympy.ntheory.ecm.ecm"]], "egyptian_fraction() (in module sympy.ntheory.egyptian_fraction)": [[108, "sympy.ntheory.egyptian_fraction.egyptian_fraction"]], "extend() (sympy.ntheory.generate.sieve method)": [[108, "sympy.ntheory.generate.Sieve.extend"]], "extend_to_no() (sympy.ntheory.generate.sieve method)": [[108, "sympy.ntheory.generate.Sieve.extend_to_no"]], "factorint() (in module sympy.ntheory.factor_)": [[108, "sympy.ntheory.factor_.factorint"]], "factorrat() (in module sympy.ntheory.factor_)": [[108, "sympy.ntheory.factor_.factorrat"]], "is_abundant() (in module sympy.ntheory.factor_)": [[108, "sympy.ntheory.factor_.is_abundant"]], "is_amicable() (in module sympy.ntheory.factor_)": [[108, "sympy.ntheory.factor_.is_amicable"]], "is_deficient() (in module sympy.ntheory.factor_)": [[108, "sympy.ntheory.factor_.is_deficient"]], "is_euler_jacobi_pseudoprime() (in module sympy.ntheory.primetest)": [[108, "sympy.ntheory.primetest.is_euler_jacobi_pseudoprime"]], "is_euler_pseudoprime() (in module sympy.ntheory.primetest)": [[108, "sympy.ntheory.primetest.is_euler_pseudoprime"]], "is_extra_strong_lucas_prp() (in module sympy.ntheory.primetest)": [[108, "sympy.ntheory.primetest.is_extra_strong_lucas_prp"]], "is_fermat_pseudoprime() (in module sympy.ntheory.primetest)": [[108, "sympy.ntheory.primetest.is_fermat_pseudoprime"]], "is_gaussian_prime() (in module sympy.ntheory.primetest)": [[108, "sympy.ntheory.primetest.is_gaussian_prime"]], "is_lucas_prp() (in module sympy.ntheory.primetest)": [[108, "sympy.ntheory.primetest.is_lucas_prp"]], "is_mersenne_prime() (in module sympy.ntheory.factor_)": [[108, "sympy.ntheory.factor_.is_mersenne_prime"]], "is_nthpow_residue() (in module sympy.ntheory.residue_ntheory)": [[108, "sympy.ntheory.residue_ntheory.is_nthpow_residue"]], "is_palindromic() (in module sympy.ntheory.digits)": [[108, "sympy.ntheory.digits.is_palindromic"]], "is_perfect() (in module sympy.ntheory.factor_)": [[108, "sympy.ntheory.factor_.is_perfect"]], "is_primitive_root() (in module sympy.ntheory.residue_ntheory)": [[108, "sympy.ntheory.residue_ntheory.is_primitive_root"]], "is_quad_residue() (in module sympy.ntheory.residue_ntheory)": [[108, "sympy.ntheory.residue_ntheory.is_quad_residue"]], "is_square() (in module sympy.ntheory.primetest)": [[108, "sympy.ntheory.primetest.is_square"]], "is_strong_lucas_prp() (in module sympy.ntheory.primetest)": [[108, "sympy.ntheory.primetest.is_strong_lucas_prp"]], "isprime() (in module sympy.ntheory.primetest)": [[108, "sympy.ntheory.primetest.isprime"]], "jacobi_symbol() (in module sympy.ntheory.residue_ntheory)": [[108, "sympy.ntheory.residue_ntheory.jacobi_symbol"]], "kronecker_symbol() (in module sympy.ntheory.residue_ntheory)": [[108, "sympy.ntheory.residue_ntheory.kronecker_symbol"]], "legendre_symbol() (in module sympy.ntheory.residue_ntheory)": [[108, "sympy.ntheory.residue_ntheory.legendre_symbol"]], "mersenne_prime_exponent() (in module sympy.ntheory.factor_)": [[108, "sympy.ntheory.factor_.mersenne_prime_exponent"]], "mobius (class in sympy.ntheory)": [[108, "sympy.ntheory.mobius"]], "mobiusrange() (sympy.ntheory.generate.sieve method)": [[108, "sympy.ntheory.generate.Sieve.mobiusrange"]], "mr() (in module sympy.ntheory.primetest)": [[108, "sympy.ntheory.primetest.mr"]], "multinomial_coefficients() (in module sympy.ntheory.multinomial)": [[108, "sympy.ntheory.multinomial.multinomial_coefficients"]], "multinomial_coefficients_iterator() (in module sympy.ntheory.multinomial)": [[108, "sympy.ntheory.multinomial.multinomial_coefficients_iterator"]], "multiplicity() (in module sympy.ntheory.factor_)": [[108, "sympy.ntheory.factor_.multiplicity"]], "n_order() (in module sympy.ntheory.residue_ntheory)": [[108, "sympy.ntheory.residue_ntheory.n_order"]], "nextprime() (in module sympy.ntheory.generate)": [[108, "sympy.ntheory.generate.nextprime"]], "npartitions() (in module sympy.ntheory.partitions_)": [[108, "sympy.ntheory.partitions_.npartitions"]], "nthroot_mod() (in module sympy.ntheory.residue_ntheory)": [[108, "sympy.ntheory.residue_ntheory.nthroot_mod"]], "perfect_power() (in module sympy.ntheory.factor_)": [[108, "sympy.ntheory.factor_.perfect_power"]], "pi_hex_digits() (in module sympy.ntheory.bbp_pi)": [[108, "sympy.ntheory.bbp_pi.pi_hex_digits"]], "pollard_pm1() (in module sympy.ntheory.factor_)": [[108, "sympy.ntheory.factor_.pollard_pm1"]], "pollard_rho() (in module sympy.ntheory.factor_)": [[108, "sympy.ntheory.factor_.pollard_rho"]], "polynomial_congruence() (in module sympy.ntheory.residue_ntheory)": [[108, "sympy.ntheory.residue_ntheory.polynomial_congruence"]], "prevprime() (in module sympy.ntheory.generate)": [[108, "sympy.ntheory.generate.prevprime"]], "prime() (in module sympy.ntheory.generate)": [[108, "sympy.ntheory.generate.prime"]], "primefactors() (in module sympy.ntheory.factor_)": [[108, "sympy.ntheory.factor_.primefactors"]], "primenu (class in sympy.ntheory.factor_)": [[108, "sympy.ntheory.factor_.primenu"]], "primeomega (class in sympy.ntheory.factor_)": [[108, "sympy.ntheory.factor_.primeomega"]], "primepi() (in module sympy.ntheory.generate)": [[108, "sympy.ntheory.generate.primepi"]], "primerange() (in module sympy.ntheory.generate)": [[108, "sympy.ntheory.generate.primerange"]], "primerange() (sympy.ntheory.generate.sieve method)": [[108, "sympy.ntheory.generate.Sieve.primerange"]], "primitive_root() (in module sympy.ntheory.residue_ntheory)": [[108, "sympy.ntheory.residue_ntheory.primitive_root"]], "primorial() (in module sympy.ntheory.generate)": [[108, "sympy.ntheory.generate.primorial"]], "proper_divisor_count() (in module sympy.ntheory.factor_)": [[108, "sympy.ntheory.factor_.proper_divisor_count"]], "proper_divisors() (in module sympy.ntheory.factor_)": [[108, "sympy.ntheory.factor_.proper_divisors"]], "qs() (in module sympy.ntheory.qs)": [[108, "sympy.ntheory.qs.qs"]], "quadratic_congruence() (in module sympy.ntheory.residue_ntheory)": [[108, "sympy.ntheory.residue_ntheory.quadratic_congruence"]], "quadratic_residues() (in module sympy.ntheory.residue_ntheory)": [[108, "sympy.ntheory.residue_ntheory.quadratic_residues"]], "randprime() (in module sympy.ntheory.generate)": [[108, "sympy.ntheory.generate.randprime"]], "reduced_totient (class in sympy.ntheory.factor_)": [[108, "sympy.ntheory.factor_.reduced_totient"]], "search() (sympy.ntheory.generate.sieve method)": [[108, "sympy.ntheory.generate.Sieve.search"]], "smoothness() (in module sympy.ntheory.factor_)": [[108, "sympy.ntheory.factor_.smoothness"]], "smoothness_p() (in module sympy.ntheory.factor_)": [[108, "sympy.ntheory.factor_.smoothness_p"]], "solve_congruence() (in module sympy.ntheory.modular)": [[108, "sympy.ntheory.modular.solve_congruence"]], "sqrt_mod() (in module sympy.ntheory.residue_ntheory)": [[108, "sympy.ntheory.residue_ntheory.sqrt_mod"]], "sqrt_mod_iter() (in module sympy.ntheory.residue_ntheory)": [[108, "sympy.ntheory.residue_ntheory.sqrt_mod_iter"]], "symmetric_residue() (in module sympy.ntheory.modular)": [[108, "sympy.ntheory.modular.symmetric_residue"]], "sympy.ntheory.bbp_pi": [[108, "module-sympy.ntheory.bbp_pi"]], "sympy.ntheory.continued_fraction": [[108, "module-sympy.ntheory.continued_fraction"]], "sympy.ntheory.digits": [[108, "module-sympy.ntheory.digits"]], "sympy.ntheory.ecm": [[108, "module-sympy.ntheory.ecm"]], "sympy.ntheory.egyptian_fraction": [[108, "module-sympy.ntheory.egyptian_fraction"]], "sympy.ntheory.factor_": [[108, "module-sympy.ntheory.factor_"]], "sympy.ntheory.generate": [[108, "module-sympy.ntheory.generate"]], "sympy.ntheory.modular": [[108, "module-sympy.ntheory.modular"]], "sympy.ntheory.multinomial": [[108, "module-sympy.ntheory.multinomial"]], "sympy.ntheory.partitions_": [[108, "module-sympy.ntheory.partitions_"]], "sympy.ntheory.primetest": [[108, "module-sympy.ntheory.primetest"]], "sympy.ntheory.qs": [[108, "module-sympy.ntheory.qs"]], "sympy.ntheory.residue_ntheory": [[108, "module-sympy.ntheory.residue_ntheory"]], "totient (class in sympy.ntheory.factor_)": [[108, "sympy.ntheory.factor_.totient"]], "totientrange() (sympy.ntheory.generate.sieve method)": [[108, "sympy.ntheory.generate.Sieve.totientrange"]], "udivisor_count() (in module sympy.ntheory.factor_)": [[108, "sympy.ntheory.factor_.udivisor_count"]], "udivisor_sigma (class in sympy.ntheory.factor_)": [[108, "sympy.ntheory.factor_.udivisor_sigma"]], "udivisors() (in module sympy.ntheory.factor_)": [[108, "sympy.ntheory.factor_.udivisors"]], "latexparsingerror (class in sympy.parsing.latex)": [[110, "sympy.parsing.latex.LaTeXParsingError"]], "larklatexparser (class in sympy.parsing.latex.lark)": [[110, "sympy.parsing.latex.lark.LarkLaTeXParser"]], "sympyexpression (class in sympy.parsing.sym_expr)": [[110, "sympy.parsing.sym_expr.SymPyExpression"]], "transformtosympyexpr (class in sympy.parsing.latex.lark)": [[110, "sympy.parsing.latex.lark.TransformToSymPyExpr"]], "auto_number() (in module sympy.parsing.sympy_parser)": [[110, "sympy.parsing.sympy_parser.auto_number"]], "auto_symbol() (in module sympy.parsing.sympy_parser)": [[110, "sympy.parsing.sympy_parser.auto_symbol"]], "convert_to_c() (sympy.parsing.sym_expr.sympyexpression method)": [[110, "sympy.parsing.sym_expr.SymPyExpression.convert_to_c"]], "convert_to_expr() (sympy.parsing.sym_expr.sympyexpression method)": [[110, "sympy.parsing.sym_expr.SymPyExpression.convert_to_expr"]], "convert_to_fortran() (sympy.parsing.sym_expr.sympyexpression method)": [[110, "sympy.parsing.sym_expr.SymPyExpression.convert_to_fortran"]], "convert_to_python() (sympy.parsing.sym_expr.sympyexpression method)": [[110, "sympy.parsing.sym_expr.SymPyExpression.convert_to_python"]], "convert_xor() (in module sympy.parsing.sympy_parser)": [[110, "sympy.parsing.sympy_parser.convert_xor"]], "eval_expr() (in module sympy.parsing.sympy_parser)": [[110, "sympy.parsing.sympy_parser.eval_expr"]], "factorial_notation() (in module sympy.parsing.sympy_parser)": [[110, "sympy.parsing.sympy_parser.factorial_notation"]], "function_exponentiation() (in module sympy.parsing.sympy_parser)": [[110, "sympy.parsing.sympy_parser.function_exponentiation"]], "implicit_application() (in module sympy.parsing.sympy_parser)": [[110, "sympy.parsing.sympy_parser.implicit_application"]], "implicit_multiplication() (in module sympy.parsing.sympy_parser)": [[110, "sympy.parsing.sympy_parser.implicit_multiplication"]], "implicit_multiplication_application() (in module sympy.parsing.sympy_parser)": [[110, "sympy.parsing.sympy_parser.implicit_multiplication_application"]], "lambda_notation() (in module sympy.parsing.sympy_parser)": [[110, "sympy.parsing.sympy_parser.lambda_notation"]], "parse_expr() (in module sympy.parsing.sympy_parser)": [[110, "sympy.parsing.sympy_parser.parse_expr"]], "parse_latex() (in module sympy.parsing.latex)": [[110, "sympy.parsing.latex.parse_latex"]], "parse_latex_lark() (in module sympy.parsing.latex)": [[110, "sympy.parsing.latex.parse_latex_lark"]], "parse_mathematica() (in module sympy.parsing.mathematica)": [[110, "sympy.parsing.mathematica.parse_mathematica"]], "parse_maxima() (in module sympy.parsing.maxima)": [[110, "sympy.parsing.maxima.parse_maxima"]], "rationalize() (in module sympy.parsing.sympy_parser)": [[110, "sympy.parsing.sympy_parser.rationalize"]], "repeated_decimals() (in module sympy.parsing.sympy_parser)": [[110, "sympy.parsing.sympy_parser.repeated_decimals"]], "return_expr() (sympy.parsing.sym_expr.sympyexpression method)": [[110, "sympy.parsing.sym_expr.SymPyExpression.return_expr"]], "split_symbols() (in module sympy.parsing.sympy_parser)": [[110, "sympy.parsing.sympy_parser.split_symbols"]], "split_symbols_custom() (in module sympy.parsing.sympy_parser)": [[110, "sympy.parsing.sympy_parser.split_symbols_custom"]], "standard_transformations (in module sympy.parsing.sympy_parser)": [[110, "sympy.parsing.sympy_parser.standard_transformations"]], "stringify_expr() (in module sympy.parsing.sympy_parser)": [[110, "sympy.parsing.sympy_parser.stringify_expr"]], "sympy.parsing": [[110, "module-sympy.parsing"]], "sympy.parsing.sym_expr": [[110, "module-sympy.parsing.sym_expr"]], "activationbase (class in sympy.physics.biomechanics.activation)": [[111, "sympy.physics.biomechanics.activation.ActivationBase"]], "f (sympy.physics.biomechanics.activation.activationbase property)": [[111, "sympy.physics.biomechanics.activation.ActivationBase.F"]], "f (sympy.physics.biomechanics.activation.firstorderactivationdegroote2016 property)": [[111, "sympy.physics.biomechanics.activation.FirstOrderActivationDeGroote2016.F"]], "f (sympy.physics.biomechanics.activation.zerothorderactivation property)": [[111, "sympy.physics.biomechanics.activation.ZerothOrderActivation.F"]], "firstorderactivationdegroote2016 (class in sympy.physics.biomechanics.activation)": [[111, "sympy.physics.biomechanics.activation.FirstOrderActivationDeGroote2016"]], "m (sympy.physics.biomechanics.activation.activationbase property)": [[111, "sympy.physics.biomechanics.activation.ActivationBase.M"]], "m (sympy.physics.biomechanics.activation.firstorderactivationdegroote2016 property)": [[111, "sympy.physics.biomechanics.activation.FirstOrderActivationDeGroote2016.M"]], "m (sympy.physics.biomechanics.activation.zerothorderactivation property)": [[111, "sympy.physics.biomechanics.activation.ZerothOrderActivation.M"]], "zerothorderactivation (class in sympy.physics.biomechanics.activation)": [[111, "sympy.physics.biomechanics.activation.ZerothOrderActivation"]], "a (sympy.physics.biomechanics.activation.activationbase property)": [[111, "sympy.physics.biomechanics.activation.ActivationBase.a"]], "activation (sympy.physics.biomechanics.activation.activationbase property)": [[111, "sympy.physics.biomechanics.activation.ActivationBase.activation"]], "activation_time_constant (sympy.physics.biomechanics.activation.firstorderactivationdegroote2016 property)": [[111, "sympy.physics.biomechanics.activation.FirstOrderActivationDeGroote2016.activation_time_constant"]], "b (sympy.physics.biomechanics.activation.firstorderactivationdegroote2016 property)": [[111, "sympy.physics.biomechanics.activation.FirstOrderActivationDeGroote2016.b"]], "constants (sympy.physics.biomechanics.activation.activationbase property)": [[111, "sympy.physics.biomechanics.activation.ActivationBase.constants"]], "constants (sympy.physics.biomechanics.activation.firstorderactivationdegroote2016 property)": [[111, "sympy.physics.biomechanics.activation.FirstOrderActivationDeGroote2016.constants"]], "constants (sympy.physics.biomechanics.activation.zerothorderactivation property)": [[111, "sympy.physics.biomechanics.activation.ZerothOrderActivation.constants"]], "deactivation_time_constant (sympy.physics.biomechanics.activation.firstorderactivationdegroote2016 property)": [[111, "sympy.physics.biomechanics.activation.FirstOrderActivationDeGroote2016.deactivation_time_constant"]], "e (sympy.physics.biomechanics.activation.activationbase property)": [[111, "sympy.physics.biomechanics.activation.ActivationBase.e"]], "excitation (sympy.physics.biomechanics.activation.activationbase property)": [[111, "sympy.physics.biomechanics.activation.ActivationBase.excitation"]], "input_vars (sympy.physics.biomechanics.activation.activationbase property)": [[111, "sympy.physics.biomechanics.activation.ActivationBase.input_vars"]], "input_vars (sympy.physics.biomechanics.activation.firstorderactivationdegroote2016 property)": [[111, "sympy.physics.biomechanics.activation.FirstOrderActivationDeGroote2016.input_vars"]], "input_vars (sympy.physics.biomechanics.activation.zerothorderactivation property)": [[111, "sympy.physics.biomechanics.activation.ZerothOrderActivation.input_vars"]], "order (sympy.physics.biomechanics.activation.activationbase property)": [[111, "sympy.physics.biomechanics.activation.ActivationBase.order"]], "order (sympy.physics.biomechanics.activation.firstorderactivationdegroote2016 property)": [[111, "sympy.physics.biomechanics.activation.FirstOrderActivationDeGroote2016.order"]], "order (sympy.physics.biomechanics.activation.zerothorderactivation property)": [[111, "sympy.physics.biomechanics.activation.ZerothOrderActivation.order"]], "p (sympy.physics.biomechanics.activation.activationbase property)": [[111, "sympy.physics.biomechanics.activation.ActivationBase.p"]], "p (sympy.physics.biomechanics.activation.firstorderactivationdegroote2016 property)": [[111, "sympy.physics.biomechanics.activation.FirstOrderActivationDeGroote2016.p"]], "p (sympy.physics.biomechanics.activation.zerothorderactivation property)": [[111, "sympy.physics.biomechanics.activation.ZerothOrderActivation.p"]], "r (sympy.physics.biomechanics.activation.activationbase property)": [[111, "sympy.physics.biomechanics.activation.ActivationBase.r"]], "r (sympy.physics.biomechanics.activation.firstorderactivationdegroote2016 property)": [[111, "sympy.physics.biomechanics.activation.FirstOrderActivationDeGroote2016.r"]], "r (sympy.physics.biomechanics.activation.zerothorderactivation property)": [[111, "sympy.physics.biomechanics.activation.ZerothOrderActivation.r"]], "rhs() (sympy.physics.biomechanics.activation.activationbase method)": [[111, "sympy.physics.biomechanics.activation.ActivationBase.rhs"]], "rhs() (sympy.physics.biomechanics.activation.firstorderactivationdegroote2016 method)": [[111, "sympy.physics.biomechanics.activation.FirstOrderActivationDeGroote2016.rhs"]], "rhs() (sympy.physics.biomechanics.activation.zerothorderactivation method)": [[111, "sympy.physics.biomechanics.activation.ZerothOrderActivation.rhs"]], "smoothing_rate (sympy.physics.biomechanics.activation.firstorderactivationdegroote2016 property)": [[111, "sympy.physics.biomechanics.activation.FirstOrderActivationDeGroote2016.smoothing_rate"]], "state_vars (sympy.physics.biomechanics.activation.activationbase property)": [[111, "sympy.physics.biomechanics.activation.ActivationBase.state_vars"]], "state_vars (sympy.physics.biomechanics.activation.firstorderactivationdegroote2016 property)": [[111, "sympy.physics.biomechanics.activation.FirstOrderActivationDeGroote2016.state_vars"]], "state_vars (sympy.physics.biomechanics.activation.zerothorderactivation property)": [[111, "sympy.physics.biomechanics.activation.ZerothOrderActivation.state_vars"]], "sympy.physics.biomechanics.activation": [[111, "module-sympy.physics.biomechanics.activation"]], "tau_a (sympy.physics.biomechanics.activation.firstorderactivationdegroote2016 property)": [[111, "sympy.physics.biomechanics.activation.FirstOrderActivationDeGroote2016.tau_a"]], "tau_d (sympy.physics.biomechanics.activation.firstorderactivationdegroote2016 property)": [[111, "sympy.physics.biomechanics.activation.FirstOrderActivationDeGroote2016.tau_d"]], "with_defaults() (sympy.physics.biomechanics.activation.activationbase class method)": [[111, "sympy.physics.biomechanics.activation.ActivationBase.with_defaults"]], "with_defaults() (sympy.physics.biomechanics.activation.firstorderactivationdegroote2016 class method)": [[111, "sympy.physics.biomechanics.activation.FirstOrderActivationDeGroote2016.with_defaults"]], "with_defaults() (sympy.physics.biomechanics.activation.zerothorderactivation class method)": [[111, "sympy.physics.biomechanics.activation.ZerothOrderActivation.with_defaults"]], "x (sympy.physics.biomechanics.activation.activationbase property)": [[111, "sympy.physics.biomechanics.activation.ActivationBase.x"]], "x (sympy.physics.biomechanics.activation.firstorderactivationdegroote2016 property)": [[111, "sympy.physics.biomechanics.activation.FirstOrderActivationDeGroote2016.x"]], "x (sympy.physics.biomechanics.activation.zerothorderactivation property)": [[111, "sympy.physics.biomechanics.activation.ZerothOrderActivation.x"]], "characteristiccurvecollection (class in sympy.physics.biomechanics.curve)": [[112, "sympy.physics.biomechanics.curve.CharacteristicCurveCollection"]], "characteristiccurvefunction (class in sympy.physics.biomechanics.curve)": [[112, "sympy.physics.biomechanics.curve.CharacteristicCurveFunction"]], "fiberforcelengthactivedegroote2016 (class in sympy.physics.biomechanics.curve)": [[112, "sympy.physics.biomechanics.curve.FiberForceLengthActiveDeGroote2016"]], "fiberforcelengthpassivedegroote2016 (class in sympy.physics.biomechanics.curve)": [[112, "sympy.physics.biomechanics.curve.FiberForceLengthPassiveDeGroote2016"]], "fiberforcelengthpassiveinversedegroote2016 (class in sympy.physics.biomechanics.curve)": [[112, "sympy.physics.biomechanics.curve.FiberForceLengthPassiveInverseDeGroote2016"]], "fiberforcevelocitydegroote2016 (class in sympy.physics.biomechanics.curve)": [[112, "sympy.physics.biomechanics.curve.FiberForceVelocityDeGroote2016"]], "fiberforcevelocityinversedegroote2016 (class in sympy.physics.biomechanics.curve)": [[112, "sympy.physics.biomechanics.curve.FiberForceVelocityInverseDeGroote2016"]], "tendonforcelengthdegroote2016 (class in sympy.physics.biomechanics.curve)": [[112, "sympy.physics.biomechanics.curve.TendonForceLengthDeGroote2016"]], "tendonforcelengthinversedegroote2016 (class in sympy.physics.biomechanics.curve)": [[112, "sympy.physics.biomechanics.curve.TendonForceLengthInverseDeGroote2016"]], "doit() (sympy.physics.biomechanics.curve.fiberforcelengthactivedegroote2016 method)": [[112, "sympy.physics.biomechanics.curve.FiberForceLengthActiveDeGroote2016.doit"]], "doit() (sympy.physics.biomechanics.curve.fiberforcelengthpassivedegroote2016 method)": [[112, "sympy.physics.biomechanics.curve.FiberForceLengthPassiveDeGroote2016.doit"]], "doit() (sympy.physics.biomechanics.curve.fiberforcelengthpassiveinversedegroote2016 method)": [[112, "sympy.physics.biomechanics.curve.FiberForceLengthPassiveInverseDeGroote2016.doit"]], "doit() (sympy.physics.biomechanics.curve.fiberforcevelocitydegroote2016 method)": [[112, "sympy.physics.biomechanics.curve.FiberForceVelocityDeGroote2016.doit"]], "doit() (sympy.physics.biomechanics.curve.fiberforcevelocityinversedegroote2016 method)": [[112, "sympy.physics.biomechanics.curve.FiberForceVelocityInverseDeGroote2016.doit"]], "doit() (sympy.physics.biomechanics.curve.tendonforcelengthdegroote2016 method)": [[112, "sympy.physics.biomechanics.curve.TendonForceLengthDeGroote2016.doit"]], "doit() (sympy.physics.biomechanics.curve.tendonforcelengthinversedegroote2016 method)": [[112, "sympy.physics.biomechanics.curve.TendonForceLengthInverseDeGroote2016.doit"]], "eval() (sympy.physics.biomechanics.curve.fiberforcelengthactivedegroote2016 class method)": [[112, "sympy.physics.biomechanics.curve.FiberForceLengthActiveDeGroote2016.eval"]], "eval() (sympy.physics.biomechanics.curve.fiberforcelengthpassivedegroote2016 class method)": [[112, "sympy.physics.biomechanics.curve.FiberForceLengthPassiveDeGroote2016.eval"]], "eval() (sympy.physics.biomechanics.curve.fiberforcelengthpassiveinversedegroote2016 class method)": [[112, "sympy.physics.biomechanics.curve.FiberForceLengthPassiveInverseDeGroote2016.eval"]], "eval() (sympy.physics.biomechanics.curve.fiberforcevelocitydegroote2016 class method)": [[112, "sympy.physics.biomechanics.curve.FiberForceVelocityDeGroote2016.eval"]], "eval() (sympy.physics.biomechanics.curve.fiberforcevelocityinversedegroote2016 class method)": [[112, "sympy.physics.biomechanics.curve.FiberForceVelocityInverseDeGroote2016.eval"]], "eval() (sympy.physics.biomechanics.curve.tendonforcelengthdegroote2016 class method)": [[112, "sympy.physics.biomechanics.curve.TendonForceLengthDeGroote2016.eval"]], "eval() (sympy.physics.biomechanics.curve.tendonforcelengthinversedegroote2016 class method)": [[112, "sympy.physics.biomechanics.curve.TendonForceLengthInverseDeGroote2016.eval"]], "fdiff() (sympy.physics.biomechanics.curve.fiberforcelengthactivedegroote2016 method)": [[112, "sympy.physics.biomechanics.curve.FiberForceLengthActiveDeGroote2016.fdiff"]], "fdiff() (sympy.physics.biomechanics.curve.fiberforcelengthpassivedegroote2016 method)": [[112, "sympy.physics.biomechanics.curve.FiberForceLengthPassiveDeGroote2016.fdiff"]], "fdiff() (sympy.physics.biomechanics.curve.fiberforcelengthpassiveinversedegroote2016 method)": [[112, "sympy.physics.biomechanics.curve.FiberForceLengthPassiveInverseDeGroote2016.fdiff"]], "fdiff() (sympy.physics.biomechanics.curve.fiberforcevelocitydegroote2016 method)": [[112, "sympy.physics.biomechanics.curve.FiberForceVelocityDeGroote2016.fdiff"]], "fdiff() (sympy.physics.biomechanics.curve.fiberforcevelocityinversedegroote2016 method)": [[112, "sympy.physics.biomechanics.curve.FiberForceVelocityInverseDeGroote2016.fdiff"]], "fdiff() (sympy.physics.biomechanics.curve.tendonforcelengthdegroote2016 method)": [[112, "sympy.physics.biomechanics.curve.TendonForceLengthDeGroote2016.fdiff"]], "fdiff() (sympy.physics.biomechanics.curve.tendonforcelengthinversedegroote2016 method)": [[112, "sympy.physics.biomechanics.curve.TendonForceLengthInverseDeGroote2016.fdiff"]], "inverse() (sympy.physics.biomechanics.curve.fiberforcelengthpassivedegroote2016 method)": [[112, "sympy.physics.biomechanics.curve.FiberForceLengthPassiveDeGroote2016.inverse"]], "inverse() (sympy.physics.biomechanics.curve.fiberforcelengthpassiveinversedegroote2016 method)": [[112, "sympy.physics.biomechanics.curve.FiberForceLengthPassiveInverseDeGroote2016.inverse"]], "inverse() (sympy.physics.biomechanics.curve.fiberforcevelocitydegroote2016 method)": [[112, "sympy.physics.biomechanics.curve.FiberForceVelocityDeGroote2016.inverse"]], "inverse() (sympy.physics.biomechanics.curve.fiberforcevelocityinversedegroote2016 method)": [[112, "sympy.physics.biomechanics.curve.FiberForceVelocityInverseDeGroote2016.inverse"]], "inverse() (sympy.physics.biomechanics.curve.tendonforcelengthdegroote2016 method)": [[112, "sympy.physics.biomechanics.curve.TendonForceLengthDeGroote2016.inverse"]], "inverse() (sympy.physics.biomechanics.curve.tendonforcelengthinversedegroote2016 method)": [[112, "sympy.physics.biomechanics.curve.TendonForceLengthInverseDeGroote2016.inverse"]], "sympy.physics.biomechanics.curve": [[112, "module-sympy.physics.biomechanics.curve"]], "with_defaults() (sympy.physics.biomechanics.curve.fiberforcelengthactivedegroote2016 class method)": [[112, "sympy.physics.biomechanics.curve.FiberForceLengthActiveDeGroote2016.with_defaults"]], "with_defaults() (sympy.physics.biomechanics.curve.fiberforcelengthpassivedegroote2016 class method)": [[112, "sympy.physics.biomechanics.curve.FiberForceLengthPassiveDeGroote2016.with_defaults"]], "with_defaults() (sympy.physics.biomechanics.curve.fiberforcelengthpassiveinversedegroote2016 class method)": [[112, "sympy.physics.biomechanics.curve.FiberForceLengthPassiveInverseDeGroote2016.with_defaults"]], "with_defaults() (sympy.physics.biomechanics.curve.fiberforcevelocitydegroote2016 class method)": [[112, "sympy.physics.biomechanics.curve.FiberForceVelocityDeGroote2016.with_defaults"]], "with_defaults() (sympy.physics.biomechanics.curve.fiberforcevelocityinversedegroote2016 class method)": [[112, "sympy.physics.biomechanics.curve.FiberForceVelocityInverseDeGroote2016.with_defaults"]], "with_defaults() (sympy.physics.biomechanics.curve.tendonforcelengthdegroote2016 class method)": [[112, "sympy.physics.biomechanics.curve.TendonForceLengthDeGroote2016.with_defaults"]], "with_defaults() (sympy.physics.biomechanics.curve.tendonforcelengthinversedegroote2016 class method)": [[112, "sympy.physics.biomechanics.curve.TendonForceLengthInverseDeGroote2016.with_defaults"]], "f (sympy.physics.biomechanics.musculotendon.musculotendonbase property)": [[114, "sympy.physics.biomechanics.musculotendon.MusculotendonBase.F"]], "f_m_max (sympy.physics.biomechanics.musculotendon.musculotendonbase property)": [[114, "sympy.physics.biomechanics.musculotendon.MusculotendonBase.F_M_max"]], "m (sympy.physics.biomechanics.musculotendon.musculotendonbase property)": [[114, "sympy.physics.biomechanics.musculotendon.MusculotendonBase.M"]], "musculotendonbase (class in sympy.physics.biomechanics.musculotendon)": [[114, "sympy.physics.biomechanics.musculotendon.MusculotendonBase"]], "musculotendondegroote2016 (class in sympy.physics.biomechanics.musculotendon)": [[114, "sympy.physics.biomechanics.musculotendon.MusculotendonDeGroote2016"]], "musculotendonformulation (class in sympy.physics.biomechanics.musculotendon)": [[114, "sympy.physics.biomechanics.musculotendon.MusculotendonFormulation"]], "a (sympy.physics.biomechanics.musculotendon.musculotendonbase property)": [[114, "sympy.physics.biomechanics.musculotendon.MusculotendonBase.a"]], "activation (sympy.physics.biomechanics.musculotendon.musculotendonbase property)": [[114, "sympy.physics.biomechanics.musculotendon.MusculotendonBase.activation"]], "activation_dynamics (sympy.physics.biomechanics.musculotendon.musculotendonbase property)": [[114, "sympy.physics.biomechanics.musculotendon.MusculotendonBase.activation_dynamics"]], "alpha_opt (sympy.physics.biomechanics.musculotendon.musculotendonbase property)": [[114, "sympy.physics.biomechanics.musculotendon.MusculotendonBase.alpha_opt"]], "beta (sympy.physics.biomechanics.musculotendon.musculotendonbase property)": [[114, "sympy.physics.biomechanics.musculotendon.MusculotendonBase.beta"]], "constants (sympy.physics.biomechanics.musculotendon.musculotendonbase property)": [[114, "sympy.physics.biomechanics.musculotendon.MusculotendonBase.constants"]], "curves() (sympy.physics.biomechanics.musculotendon.musculotendonbase method)": [[114, "sympy.physics.biomechanics.musculotendon.MusculotendonBase.curves"]], "e (sympy.physics.biomechanics.musculotendon.musculotendonbase property)": [[114, "sympy.physics.biomechanics.musculotendon.MusculotendonBase.e"]], "excitation (sympy.physics.biomechanics.musculotendon.musculotendonbase property)": [[114, "sympy.physics.biomechanics.musculotendon.MusculotendonBase.excitation"]], "fiber_damping_coefficient (sympy.physics.biomechanics.musculotendon.musculotendonbase property)": [[114, "sympy.physics.biomechanics.musculotendon.MusculotendonBase.fiber_damping_coefficient"]], "input_vars (sympy.physics.biomechanics.musculotendon.musculotendonbase property)": [[114, "sympy.physics.biomechanics.musculotendon.MusculotendonBase.input_vars"]], "l_m_opt (sympy.physics.biomechanics.musculotendon.musculotendonbase property)": [[114, "sympy.physics.biomechanics.musculotendon.MusculotendonBase.l_M_opt"]], "l_t_slack (sympy.physics.biomechanics.musculotendon.musculotendonbase property)": [[114, "sympy.physics.biomechanics.musculotendon.MusculotendonBase.l_T_slack"]], "maximal_fiber_velocity (sympy.physics.biomechanics.musculotendon.musculotendonbase property)": [[114, "sympy.physics.biomechanics.musculotendon.MusculotendonBase.maximal_fiber_velocity"]], "musculotendon_dynamics (sympy.physics.biomechanics.musculotendon.musculotendonbase property)": [[114, "sympy.physics.biomechanics.musculotendon.MusculotendonBase.musculotendon_dynamics"]], "optimal_fiber_length (sympy.physics.biomechanics.musculotendon.musculotendonbase property)": [[114, "sympy.physics.biomechanics.musculotendon.MusculotendonBase.optimal_fiber_length"]], "optimal_pennation_angle (sympy.physics.biomechanics.musculotendon.musculotendonbase property)": [[114, "sympy.physics.biomechanics.musculotendon.MusculotendonBase.optimal_pennation_angle"]], "p (sympy.physics.biomechanics.musculotendon.musculotendonbase property)": [[114, "sympy.physics.biomechanics.musculotendon.MusculotendonBase.p"]], "peak_isometric_force (sympy.physics.biomechanics.musculotendon.musculotendonbase property)": [[114, "sympy.physics.biomechanics.musculotendon.MusculotendonBase.peak_isometric_force"]], "r (sympy.physics.biomechanics.musculotendon.musculotendonbase property)": [[114, "sympy.physics.biomechanics.musculotendon.MusculotendonBase.r"]], "rhs() (sympy.physics.biomechanics.musculotendon.musculotendonbase method)": [[114, "sympy.physics.biomechanics.musculotendon.MusculotendonBase.rhs"]], "state_vars (sympy.physics.biomechanics.musculotendon.musculotendonbase property)": [[114, "sympy.physics.biomechanics.musculotendon.MusculotendonBase.state_vars"]], "sympy.physics.biomechanics.musculotendon": [[114, "module-sympy.physics.biomechanics.musculotendon"]], "tendon_slack_length (sympy.physics.biomechanics.musculotendon.musculotendonbase property)": [[114, "sympy.physics.biomechanics.musculotendon.MusculotendonBase.tendon_slack_length"]], "v_m_max (sympy.physics.biomechanics.musculotendon.musculotendonbase property)": [[114, "sympy.physics.biomechanics.musculotendon.MusculotendonBase.v_M_max"]], "with_defaults() (sympy.physics.biomechanics.musculotendon.musculotendonbase class method)": [[114, "sympy.physics.biomechanics.musculotendon.MusculotendonBase.with_defaults"]], "x (sympy.physics.biomechanics.musculotendon.musculotendonbase property)": [[114, "sympy.physics.biomechanics.musculotendon.MusculotendonBase.x"]], "sympy.physics.biomechanics": [[115, "module-sympy.physics.biomechanics"]], "beam (class in sympy.physics.continuum_mechanics.beam)": [[116, "sympy.physics.continuum_mechanics.beam.Beam"]], "beam3d (class in sympy.physics.continuum_mechanics.beam)": [[116, "sympy.physics.continuum_mechanics.beam.Beam3D"]], "angular_deflection() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[116, "sympy.physics.continuum_mechanics.beam.Beam3D.angular_deflection"]], "applied_loads (sympy.physics.continuum_mechanics.beam.beam property)": [[116, "sympy.physics.continuum_mechanics.beam.Beam.applied_loads"]], "apply_load() (sympy.physics.continuum_mechanics.beam.beam method)": [[116, "sympy.physics.continuum_mechanics.beam.Beam.apply_load"]], "apply_load() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[116, "sympy.physics.continuum_mechanics.beam.Beam3D.apply_load"]], "apply_moment_load() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[116, "sympy.physics.continuum_mechanics.beam.Beam3D.apply_moment_load"]], "apply_support() (sympy.physics.continuum_mechanics.beam.beam method)": [[116, "sympy.physics.continuum_mechanics.beam.Beam.apply_support"]], "area (sympy.physics.continuum_mechanics.beam.beam property)": [[116, "sympy.physics.continuum_mechanics.beam.Beam.area"]], "area (sympy.physics.continuum_mechanics.beam.beam3d property)": [[116, "sympy.physics.continuum_mechanics.beam.Beam3D.area"]], "axial_force() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[116, "sympy.physics.continuum_mechanics.beam.Beam3D.axial_force"]], "axial_stress() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[116, "sympy.physics.continuum_mechanics.beam.Beam3D.axial_stress"]], "bending_moment() (sympy.physics.continuum_mechanics.beam.beam method)": [[116, "sympy.physics.continuum_mechanics.beam.Beam.bending_moment"]], "bending_moment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[116, "sympy.physics.continuum_mechanics.beam.Beam3D.bending_moment"]], "boundary_conditions (sympy.physics.continuum_mechanics.beam.beam property)": [[116, "sympy.physics.continuum_mechanics.beam.Beam.boundary_conditions"]], "boundary_conditions (sympy.physics.continuum_mechanics.beam.beam3d property)": [[116, "sympy.physics.continuum_mechanics.beam.Beam3D.boundary_conditions"]], "cross_section (sympy.physics.continuum_mechanics.beam.beam property)": [[116, "sympy.physics.continuum_mechanics.beam.Beam.cross_section"]], "deflection() (sympy.physics.continuum_mechanics.beam.beam method)": [[116, "sympy.physics.continuum_mechanics.beam.Beam.deflection"]], "deflection() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[116, "sympy.physics.continuum_mechanics.beam.Beam3D.deflection"]], "draw() (sympy.physics.continuum_mechanics.beam.beam method)": [[116, "sympy.physics.continuum_mechanics.beam.Beam.draw"]], "elastic_modulus (sympy.physics.continuum_mechanics.beam.beam property)": [[116, "sympy.physics.continuum_mechanics.beam.Beam.elastic_modulus"]], "ild_moment (sympy.physics.continuum_mechanics.beam.beam property)": [[116, "sympy.physics.continuum_mechanics.beam.Beam.ild_moment"]], "ild_reactions (sympy.physics.continuum_mechanics.beam.beam property)": [[116, "sympy.physics.continuum_mechanics.beam.Beam.ild_reactions"]], "ild_shear (sympy.physics.continuum_mechanics.beam.beam property)": [[116, "sympy.physics.continuum_mechanics.beam.Beam.ild_shear"]], "join() (sympy.physics.continuum_mechanics.beam.beam method)": [[116, "sympy.physics.continuum_mechanics.beam.Beam.join"]], "length (sympy.physics.continuum_mechanics.beam.beam property)": [[116, "sympy.physics.continuum_mechanics.beam.Beam.length"]], "load (sympy.physics.continuum_mechanics.beam.beam property)": [[116, "sympy.physics.continuum_mechanics.beam.Beam.load"]], "load_vector (sympy.physics.continuum_mechanics.beam.beam3d property)": [[116, "sympy.physics.continuum_mechanics.beam.Beam3D.load_vector"]], "max_bending_moment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[116, "sympy.physics.continuum_mechanics.beam.Beam3D.max_bending_moment"]], "max_bmoment() (sympy.physics.continuum_mechanics.beam.beam method)": [[116, "sympy.physics.continuum_mechanics.beam.Beam.max_bmoment"]], "max_bmoment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[116, "sympy.physics.continuum_mechanics.beam.Beam3D.max_bmoment"]], "max_deflection() (sympy.physics.continuum_mechanics.beam.beam method)": [[116, "sympy.physics.continuum_mechanics.beam.Beam.max_deflection"]], "max_deflection() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[116, "sympy.physics.continuum_mechanics.beam.Beam3D.max_deflection"]], "max_shear_force() (sympy.physics.continuum_mechanics.beam.beam method)": [[116, "sympy.physics.continuum_mechanics.beam.Beam.max_shear_force"]], "max_shear_force() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[116, "sympy.physics.continuum_mechanics.beam.Beam3D.max_shear_force"]], "moment_load_vector (sympy.physics.continuum_mechanics.beam.beam3d property)": [[116, "sympy.physics.continuum_mechanics.beam.Beam3D.moment_load_vector"]], "plot_bending_moment() (sympy.physics.continuum_mechanics.beam.beam method)": [[116, "sympy.physics.continuum_mechanics.beam.Beam.plot_bending_moment"]], "plot_bending_moment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[116, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_bending_moment"]], "plot_deflection() (sympy.physics.continuum_mechanics.beam.beam method)": [[116, "sympy.physics.continuum_mechanics.beam.Beam.plot_deflection"]], "plot_deflection() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[116, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_deflection"]], "plot_ild_moment() (sympy.physics.continuum_mechanics.beam.beam method)": [[116, "sympy.physics.continuum_mechanics.beam.Beam.plot_ild_moment"]], "plot_ild_reactions() (sympy.physics.continuum_mechanics.beam.beam method)": [[116, "sympy.physics.continuum_mechanics.beam.Beam.plot_ild_reactions"]], "plot_ild_shear() (sympy.physics.continuum_mechanics.beam.beam method)": [[116, "sympy.physics.continuum_mechanics.beam.Beam.plot_ild_shear"]], "plot_loading_results() (sympy.physics.continuum_mechanics.beam.beam method)": [[116, "sympy.physics.continuum_mechanics.beam.Beam.plot_loading_results"]], "plot_loading_results() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[116, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_loading_results"]], "plot_shear_force() (sympy.physics.continuum_mechanics.beam.beam method)": [[116, "sympy.physics.continuum_mechanics.beam.Beam.plot_shear_force"]], "plot_shear_force() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[116, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_shear_force"]], "plot_shear_stress() (sympy.physics.continuum_mechanics.beam.beam method)": [[116, "sympy.physics.continuum_mechanics.beam.Beam.plot_shear_stress"]], "plot_shear_stress() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[116, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_shear_stress"]], "plot_slope() (sympy.physics.continuum_mechanics.beam.beam method)": [[116, "sympy.physics.continuum_mechanics.beam.Beam.plot_slope"]], "plot_slope() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[116, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_slope"]], "point_cflexure() (sympy.physics.continuum_mechanics.beam.beam method)": [[116, "sympy.physics.continuum_mechanics.beam.Beam.point_cflexure"]], "polar_moment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[116, "sympy.physics.continuum_mechanics.beam.Beam3D.polar_moment"]], "reaction_loads (sympy.physics.continuum_mechanics.beam.beam property)": [[116, "sympy.physics.continuum_mechanics.beam.Beam.reaction_loads"]], "remove_load() (sympy.physics.continuum_mechanics.beam.beam method)": [[116, "sympy.physics.continuum_mechanics.beam.Beam.remove_load"]], "second_moment (sympy.physics.continuum_mechanics.beam.beam property)": [[116, "sympy.physics.continuum_mechanics.beam.Beam.second_moment"]], "second_moment (sympy.physics.continuum_mechanics.beam.beam3d property)": [[116, "sympy.physics.continuum_mechanics.beam.Beam3D.second_moment"]], "shear_force() (sympy.physics.continuum_mechanics.beam.beam method)": [[116, "sympy.physics.continuum_mechanics.beam.Beam.shear_force"]], "shear_force() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[116, "sympy.physics.continuum_mechanics.beam.Beam3D.shear_force"]], "shear_modulus (sympy.physics.continuum_mechanics.beam.beam3d property)": [[116, "sympy.physics.continuum_mechanics.beam.Beam3D.shear_modulus"]], "shear_stress() (sympy.physics.continuum_mechanics.beam.beam method)": [[116, "sympy.physics.continuum_mechanics.beam.Beam.shear_stress"]], "shear_stress() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[116, "sympy.physics.continuum_mechanics.beam.Beam3D.shear_stress"]], "slope() (sympy.physics.continuum_mechanics.beam.beam method)": [[116, "sympy.physics.continuum_mechanics.beam.Beam.slope"]], "slope() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[116, "sympy.physics.continuum_mechanics.beam.Beam3D.slope"]], "solve_for_ild_moment() (sympy.physics.continuum_mechanics.beam.beam method)": [[116, "sympy.physics.continuum_mechanics.beam.Beam.solve_for_ild_moment"]], "solve_for_ild_reactions() (sympy.physics.continuum_mechanics.beam.beam method)": [[116, "sympy.physics.continuum_mechanics.beam.Beam.solve_for_ild_reactions"]], "solve_for_ild_shear() (sympy.physics.continuum_mechanics.beam.beam method)": [[116, "sympy.physics.continuum_mechanics.beam.Beam.solve_for_ild_shear"]], "solve_for_reaction_loads() (sympy.physics.continuum_mechanics.beam.beam method)": [[116, "sympy.physics.continuum_mechanics.beam.Beam.solve_for_reaction_loads"]], "solve_for_reaction_loads() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[116, "sympy.physics.continuum_mechanics.beam.Beam3D.solve_for_reaction_loads"]], "solve_for_torsion() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[116, "sympy.physics.continuum_mechanics.beam.Beam3D.solve_for_torsion"]], "sympy.physics.continuum_mechanics.beam": [[116, "module-sympy.physics.continuum_mechanics.beam"]], "torsional_moment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[116, "sympy.physics.continuum_mechanics.beam.Beam3D.torsional_moment"]], "variable (sympy.physics.continuum_mechanics.beam.beam property)": [[116, "sympy.physics.continuum_mechanics.beam.Beam.variable"]], "cable (class in sympy.physics.continuum_mechanics.cable)": [[118, "sympy.physics.continuum_mechanics.cable.Cable"]], "apply_length() (sympy.physics.continuum_mechanics.cable.cable method)": [[118, "sympy.physics.continuum_mechanics.cable.Cable.apply_length"]], "apply_load() (sympy.physics.continuum_mechanics.cable.cable method)": [[118, "sympy.physics.continuum_mechanics.cable.Cable.apply_load"]], "change_support() (sympy.physics.continuum_mechanics.cable.cable method)": [[118, "sympy.physics.continuum_mechanics.cable.Cable.change_support"]], "left_support (sympy.physics.continuum_mechanics.cable.cable property)": [[118, "sympy.physics.continuum_mechanics.cable.Cable.left_support"]], "length (sympy.physics.continuum_mechanics.cable.cable property)": [[118, "sympy.physics.continuum_mechanics.cable.Cable.length"]], "loads (sympy.physics.continuum_mechanics.cable.cable property)": [[118, "sympy.physics.continuum_mechanics.cable.Cable.loads"]], "loads_position (sympy.physics.continuum_mechanics.cable.cable property)": [[118, "sympy.physics.continuum_mechanics.cable.Cable.loads_position"]], "reaction_loads (sympy.physics.continuum_mechanics.cable.cable property)": [[118, "sympy.physics.continuum_mechanics.cable.Cable.reaction_loads"]], "remove_loads() (sympy.physics.continuum_mechanics.cable.cable method)": [[118, "sympy.physics.continuum_mechanics.cable.Cable.remove_loads"]], "right_support (sympy.physics.continuum_mechanics.cable.cable property)": [[118, "sympy.physics.continuum_mechanics.cable.Cable.right_support"]], "supports (sympy.physics.continuum_mechanics.cable.cable property)": [[118, "sympy.physics.continuum_mechanics.cable.Cable.supports"]], "sympy.physics.continuum_mechanics.cable": [[118, "module-sympy.physics.continuum_mechanics.cable"]], "truss (class in sympy.physics.continuum_mechanics.truss)": [[120, "sympy.physics.continuum_mechanics.truss.Truss"]], "add_member() (sympy.physics.continuum_mechanics.truss.truss method)": [[120, "sympy.physics.continuum_mechanics.truss.Truss.add_member"]], "add_node() (sympy.physics.continuum_mechanics.truss.truss method)": [[120, "sympy.physics.continuum_mechanics.truss.Truss.add_node"]], "apply_load() (sympy.physics.continuum_mechanics.truss.truss method)": [[120, "sympy.physics.continuum_mechanics.truss.Truss.apply_load"]], "apply_support() (sympy.physics.continuum_mechanics.truss.truss method)": [[120, "sympy.physics.continuum_mechanics.truss.Truss.apply_support"]], "change_member_label() (sympy.physics.continuum_mechanics.truss.truss method)": [[120, "sympy.physics.continuum_mechanics.truss.Truss.change_member_label"]], "change_node_label() (sympy.physics.continuum_mechanics.truss.truss method)": [[120, "sympy.physics.continuum_mechanics.truss.Truss.change_node_label"]], "draw() (sympy.physics.continuum_mechanics.truss.truss method)": [[120, "sympy.physics.continuum_mechanics.truss.Truss.draw"]], "internal_forces (sympy.physics.continuum_mechanics.truss.truss property)": [[120, "sympy.physics.continuum_mechanics.truss.Truss.internal_forces"]], "loads (sympy.physics.continuum_mechanics.truss.truss property)": [[120, "sympy.physics.continuum_mechanics.truss.Truss.loads"]], "member_lengths (sympy.physics.continuum_mechanics.truss.truss property)": [[120, "sympy.physics.continuum_mechanics.truss.Truss.member_lengths"]], "members (sympy.physics.continuum_mechanics.truss.truss property)": [[120, "sympy.physics.continuum_mechanics.truss.Truss.members"]], "node_labels (sympy.physics.continuum_mechanics.truss.truss property)": [[120, "sympy.physics.continuum_mechanics.truss.Truss.node_labels"]], "node_positions (sympy.physics.continuum_mechanics.truss.truss property)": [[120, "sympy.physics.continuum_mechanics.truss.Truss.node_positions"]], "nodes (sympy.physics.continuum_mechanics.truss.truss property)": [[120, "sympy.physics.continuum_mechanics.truss.Truss.nodes"]], "reaction_loads (sympy.physics.continuum_mechanics.truss.truss property)": [[120, "sympy.physics.continuum_mechanics.truss.Truss.reaction_loads"]], "remove_load() (sympy.physics.continuum_mechanics.truss.truss method)": [[120, "sympy.physics.continuum_mechanics.truss.Truss.remove_load"]], "remove_member() (sympy.physics.continuum_mechanics.truss.truss method)": [[120, "sympy.physics.continuum_mechanics.truss.Truss.remove_member"]], "remove_node() (sympy.physics.continuum_mechanics.truss.truss method)": [[120, "sympy.physics.continuum_mechanics.truss.Truss.remove_node"]], "remove_support() (sympy.physics.continuum_mechanics.truss.truss method)": [[120, "sympy.physics.continuum_mechanics.truss.Truss.remove_support"]], "solve() (sympy.physics.continuum_mechanics.truss.truss method)": [[120, "sympy.physics.continuum_mechanics.truss.Truss.solve"]], "supports (sympy.physics.continuum_mechanics.truss.truss property)": [[120, "sympy.physics.continuum_mechanics.truss.Truss.supports"]], "sympy.physics.continuum_mechanics.truss": [[120, "module-sympy.physics.continuum_mechanics.truss"]], "bode_magnitude_numerical_data() (sympy.physics.control.control_plots method)": [[122, "sympy.physics.control.control_plots.bode_magnitude_numerical_data"]], "bode_magnitude_plot() (sympy.physics.control.control_plots method)": [[122, "sympy.physics.control.control_plots.bode_magnitude_plot"]], "bode_phase_numerical_data() (sympy.physics.control.control_plots method)": [[122, "sympy.physics.control.control_plots.bode_phase_numerical_data"]], "bode_phase_plot() (sympy.physics.control.control_plots method)": [[122, "sympy.physics.control.control_plots.bode_phase_plot"]], "bode_plot() (sympy.physics.control.control_plots method)": [[122, "sympy.physics.control.control_plots.bode_plot"]], "impulse_response_numerical_data() (sympy.physics.control.control_plots method)": [[122, "sympy.physics.control.control_plots.impulse_response_numerical_data"]], "impulse_response_plot() (sympy.physics.control.control_plots method)": [[122, "sympy.physics.control.control_plots.impulse_response_plot"]], "pole_zero_numerical_data() (sympy.physics.control.control_plots method)": [[122, "sympy.physics.control.control_plots.pole_zero_numerical_data"]], "pole_zero_plot() (sympy.physics.control.control_plots method)": [[122, "sympy.physics.control.control_plots.pole_zero_plot"]], "ramp_response_numerical_data() (sympy.physics.control.control_plots method)": [[122, "sympy.physics.control.control_plots.ramp_response_numerical_data"]], "ramp_response_plot() (sympy.physics.control.control_plots method)": [[122, "sympy.physics.control.control_plots.ramp_response_plot"]], "step_response_numerical_data() (sympy.physics.control.control_plots method)": [[122, "sympy.physics.control.control_plots.step_response_numerical_data"]], "step_response_plot() (sympy.physics.control.control_plots method)": [[122, "sympy.physics.control.control_plots.step_response_plot"]], "sympy.physics.control": [[123, "module-sympy.physics.control"]], "feedback (class in sympy.physics.control.lti)": [[124, "sympy.physics.control.lti.Feedback"]], "mimofeedback (class in sympy.physics.control.lti)": [[124, "sympy.physics.control.lti.MIMOFeedback"]], "mimoparallel (class in sympy.physics.control.lti)": [[124, "sympy.physics.control.lti.MIMOParallel"]], "mimoseries (class in sympy.physics.control.lti)": [[124, "sympy.physics.control.lti.MIMOSeries"]], "parallel (class in sympy.physics.control.lti)": [[124, "sympy.physics.control.lti.Parallel"]], "series (class in sympy.physics.control.lti)": [[124, "sympy.physics.control.lti.Series"]], "transferfunction (class in sympy.physics.control.lti)": [[124, "sympy.physics.control.lti.TransferFunction"]], "transferfunctionmatrix (class in sympy.physics.control.lti)": [[124, "sympy.physics.control.lti.TransferFunctionMatrix"]], "backward_diff() (in module sympy.physics.control.lti)": [[124, "sympy.physics.control.lti.backward_diff"]], "bilinear() (in module sympy.physics.control.lti)": [[124, "sympy.physics.control.lti.bilinear"]], "dc_gain() (sympy.physics.control.lti.transferfunction method)": [[124, "sympy.physics.control.lti.TransferFunction.dc_gain"]], "den (sympy.physics.control.lti.transferfunction property)": [[124, "sympy.physics.control.lti.TransferFunction.den"]], "doit() (sympy.physics.control.lti.feedback method)": [[124, "sympy.physics.control.lti.Feedback.doit"]], "doit() (sympy.physics.control.lti.mimofeedback method)": [[124, "sympy.physics.control.lti.MIMOFeedback.doit"]], "doit() (sympy.physics.control.lti.mimoparallel method)": [[124, "sympy.physics.control.lti.MIMOParallel.doit"]], "doit() (sympy.physics.control.lti.mimoseries method)": [[124, "sympy.physics.control.lti.MIMOSeries.doit"]], "doit() (sympy.physics.control.lti.parallel method)": [[124, "sympy.physics.control.lti.Parallel.doit"]], "doit() (sympy.physics.control.lti.series method)": [[124, "sympy.physics.control.lti.Series.doit"]], "elem_poles() (sympy.physics.control.lti.transferfunctionmatrix method)": [[124, "sympy.physics.control.lti.TransferFunctionMatrix.elem_poles"]], "elem_zeros() (sympy.physics.control.lti.transferfunctionmatrix method)": [[124, "sympy.physics.control.lti.TransferFunctionMatrix.elem_zeros"]], "eval_frequency() (sympy.physics.control.lti.transferfunction method)": [[124, "sympy.physics.control.lti.TransferFunction.eval_frequency"]], "eval_frequency() (sympy.physics.control.lti.transferfunctionmatrix method)": [[124, "sympy.physics.control.lti.TransferFunctionMatrix.eval_frequency"]], "expand() (sympy.physics.control.lti.transferfunction method)": [[124, "sympy.physics.control.lti.TransferFunction.expand"]], "expand() (sympy.physics.control.lti.transferfunctionmatrix method)": [[124, "sympy.physics.control.lti.TransferFunctionMatrix.expand"]], "forward_diff() (in module sympy.physics.control.lti)": [[124, "sympy.physics.control.lti.forward_diff"]], "from_matrix() (sympy.physics.control.lti.transferfunctionmatrix class method)": [[124, "sympy.physics.control.lti.TransferFunctionMatrix.from_Matrix"]], "from_coeff_lists() (sympy.physics.control.lti.transferfunction class method)": [[124, "sympy.physics.control.lti.TransferFunction.from_coeff_lists"]], "from_rational_expression() (sympy.physics.control.lti.transferfunction class method)": [[124, "sympy.physics.control.lti.TransferFunction.from_rational_expression"]], "from_zpk() (sympy.physics.control.lti.transferfunction class method)": [[124, "sympy.physics.control.lti.TransferFunction.from_zpk"]], "gbt() (in module sympy.physics.control.lti)": [[124, "sympy.physics.control.lti.gbt"]], "is_biproper (sympy.physics.control.lti.parallel property)": [[124, "sympy.physics.control.lti.Parallel.is_biproper"]], "is_biproper (sympy.physics.control.lti.series property)": [[124, "sympy.physics.control.lti.Series.is_biproper"]], "is_biproper (sympy.physics.control.lti.transferfunction property)": [[124, "sympy.physics.control.lti.TransferFunction.is_biproper"]], "is_proper (sympy.physics.control.lti.parallel property)": [[124, "sympy.physics.control.lti.Parallel.is_proper"]], "is_proper (sympy.physics.control.lti.series property)": [[124, "sympy.physics.control.lti.Series.is_proper"]], "is_proper (sympy.physics.control.lti.transferfunction property)": [[124, "sympy.physics.control.lti.TransferFunction.is_proper"]], "is_stable() (sympy.physics.control.lti.transferfunction method)": [[124, "sympy.physics.control.lti.TransferFunction.is_stable"]], "is_strictly_proper (sympy.physics.control.lti.parallel property)": [[124, "sympy.physics.control.lti.Parallel.is_strictly_proper"]], "is_strictly_proper (sympy.physics.control.lti.series property)": [[124, "sympy.physics.control.lti.Series.is_strictly_proper"]], "is_strictly_proper (sympy.physics.control.lti.transferfunction property)": [[124, "sympy.physics.control.lti.TransferFunction.is_strictly_proper"]], "num (sympy.physics.control.lti.transferfunction property)": [[124, "sympy.physics.control.lti.TransferFunction.num"]], "num_inputs (sympy.physics.control.lti.mimoparallel property)": [[124, "sympy.physics.control.lti.MIMOParallel.num_inputs"]], "num_inputs (sympy.physics.control.lti.mimoseries property)": [[124, "sympy.physics.control.lti.MIMOSeries.num_inputs"]], "num_inputs (sympy.physics.control.lti.transferfunctionmatrix property)": [[124, "sympy.physics.control.lti.TransferFunctionMatrix.num_inputs"]], "num_outputs (sympy.physics.control.lti.mimoparallel property)": [[124, "sympy.physics.control.lti.MIMOParallel.num_outputs"]], "num_outputs (sympy.physics.control.lti.mimoseries property)": [[124, "sympy.physics.control.lti.MIMOSeries.num_outputs"]], "num_outputs (sympy.physics.control.lti.transferfunctionmatrix property)": [[124, "sympy.physics.control.lti.TransferFunctionMatrix.num_outputs"]], "poles() (sympy.physics.control.lti.transferfunction method)": [[124, "sympy.physics.control.lti.TransferFunction.poles"]], "sensitivity (sympy.physics.control.lti.feedback property)": [[124, "sympy.physics.control.lti.Feedback.sensitivity"]], "sensitivity (sympy.physics.control.lti.mimofeedback property)": [[124, "sympy.physics.control.lti.MIMOFeedback.sensitivity"]], "shape (sympy.physics.control.lti.mimoparallel property)": [[124, "sympy.physics.control.lti.MIMOParallel.shape"]], "shape (sympy.physics.control.lti.mimoseries property)": [[124, "sympy.physics.control.lti.MIMOSeries.shape"]], "shape (sympy.physics.control.lti.transferfunctionmatrix property)": [[124, "sympy.physics.control.lti.TransferFunctionMatrix.shape"]], "sign (sympy.physics.control.lti.feedback property)": [[124, "sympy.physics.control.lti.Feedback.sign"]], "sign (sympy.physics.control.lti.mimofeedback property)": [[124, "sympy.physics.control.lti.MIMOFeedback.sign"]], "sympy.physics.control.lti": [[124, "module-sympy.physics.control.lti"]], "sys1 (sympy.physics.control.lti.feedback property)": [[124, "sympy.physics.control.lti.Feedback.sys1"]], "sys1 (sympy.physics.control.lti.mimofeedback property)": [[124, "sympy.physics.control.lti.MIMOFeedback.sys1"]], "sys2 (sympy.physics.control.lti.feedback property)": [[124, "sympy.physics.control.lti.Feedback.sys2"]], "sys2 (sympy.physics.control.lti.mimofeedback property)": [[124, "sympy.physics.control.lti.MIMOFeedback.sys2"]], "to_expr() (sympy.physics.control.lti.parallel method)": [[124, "sympy.physics.control.lti.Parallel.to_expr"]], "to_expr() (sympy.physics.control.lti.series method)": [[124, "sympy.physics.control.lti.Series.to_expr"]], "to_expr() (sympy.physics.control.lti.transferfunction method)": [[124, "sympy.physics.control.lti.TransferFunction.to_expr"]], "transpose() (sympy.physics.control.lti.transferfunctionmatrix method)": [[124, "sympy.physics.control.lti.TransferFunctionMatrix.transpose"]], "var (sympy.physics.control.lti.feedback property)": [[124, "sympy.physics.control.lti.Feedback.var"]], "var (sympy.physics.control.lti.mimofeedback property)": [[124, "sympy.physics.control.lti.MIMOFeedback.var"]], "var (sympy.physics.control.lti.mimoparallel property)": [[124, "sympy.physics.control.lti.MIMOParallel.var"]], "var (sympy.physics.control.lti.mimoseries property)": [[124, "sympy.physics.control.lti.MIMOSeries.var"]], "var (sympy.physics.control.lti.parallel property)": [[124, "sympy.physics.control.lti.Parallel.var"]], "var (sympy.physics.control.lti.series property)": [[124, "sympy.physics.control.lti.Series.var"]], "var (sympy.physics.control.lti.transferfunction property)": [[124, "sympy.physics.control.lti.TransferFunction.var"]], "var (sympy.physics.control.lti.transferfunctionmatrix property)": [[124, "sympy.physics.control.lti.TransferFunctionMatrix.var"]], "zeros() (sympy.physics.control.lti.transferfunction method)": [[124, "sympy.physics.control.lti.TransferFunction.zeros"]], "extract_type_tens() (in module sympy.physics.hep.gamma_matrices)": [[125, "sympy.physics.hep.gamma_matrices.extract_type_tens"]], "gamma_trace() (in module sympy.physics.hep.gamma_matrices)": [[125, "sympy.physics.hep.gamma_matrices.gamma_trace"]], "kahane_simplify() (in module sympy.physics.hep.gamma_matrices)": [[125, "sympy.physics.hep.gamma_matrices.kahane_simplify"]], "simplify_gpgp() (in module sympy.physics.hep.gamma_matrices)": [[125, "sympy.physics.hep.gamma_matrices.simplify_gpgp"]], "sympy.physics.hep.gamma_matrices": [[125, "module-sympy.physics.hep.gamma_matrices"]], "e_nl() (in module sympy.physics.hydrogen)": [[126, "sympy.physics.hydrogen.E_nl"]], "e_nl_dirac() (in module sympy.physics.hydrogen)": [[126, "sympy.physics.hydrogen.E_nl_dirac"]], "psi_nlm() (in module sympy.physics.hydrogen)": [[126, "sympy.physics.hydrogen.Psi_nlm"]], "r_nl() (in module sympy.physics.hydrogen)": [[126, "sympy.physics.hydrogen.R_nl"]], "sympy.physics.hydrogen": [[126, "module-sympy.physics.hydrogen"]], "mdft() (in module sympy.physics.matrices)": [[127, "sympy.physics.matrices.mdft"]], "mgamma() (in module sympy.physics.matrices)": [[127, "sympy.physics.matrices.mgamma"]], "msigma() (in module sympy.physics.matrices)": [[127, "sympy.physics.matrices.msigma"]], "pat_matrix() (in module sympy.physics.matrices)": [[127, "sympy.physics.matrices.pat_matrix"]], "sympy.physics.matrices": [[127, "module-sympy.physics.matrices"]], "actuatorbase (class in sympy.physics.mechanics.actuator)": [[129, "sympy.physics.mechanics.actuator.ActuatorBase"]], "forceactuator (class in sympy.physics.mechanics.actuator)": [[129, "sympy.physics.mechanics.actuator.ForceActuator"]], "lineardamper (class in sympy.physics.mechanics.actuator)": [[129, "sympy.physics.mechanics.actuator.LinearDamper"]], "linearspring (class in sympy.physics.mechanics.actuator)": [[129, "sympy.physics.mechanics.actuator.LinearSpring"]], "torqueactuator (class in sympy.physics.mechanics.actuator)": [[129, "sympy.physics.mechanics.actuator.TorqueActuator"]], "at_pin_joint() (sympy.physics.mechanics.actuator.torqueactuator class method)": [[129, "sympy.physics.mechanics.actuator.TorqueActuator.at_pin_joint"]], "axis (sympy.physics.mechanics.actuator.torqueactuator property)": [[129, "sympy.physics.mechanics.actuator.TorqueActuator.axis"]], "damping (sympy.physics.mechanics.actuator.lineardamper property)": [[129, "sympy.physics.mechanics.actuator.LinearDamper.damping"]], "equilibrium_length (sympy.physics.mechanics.actuator.linearspring property)": [[129, "sympy.physics.mechanics.actuator.LinearSpring.equilibrium_length"]], "force (sympy.physics.mechanics.actuator.forceactuator property)": [[129, "sympy.physics.mechanics.actuator.ForceActuator.force"]], "force (sympy.physics.mechanics.actuator.lineardamper property)": [[129, "sympy.physics.mechanics.actuator.LinearDamper.force"]], "force (sympy.physics.mechanics.actuator.linearspring property)": [[129, "sympy.physics.mechanics.actuator.LinearSpring.force"]], "pathway (sympy.physics.mechanics.actuator.forceactuator property)": [[129, "sympy.physics.mechanics.actuator.ForceActuator.pathway"]], "reaction_frame (sympy.physics.mechanics.actuator.torqueactuator property)": [[129, "sympy.physics.mechanics.actuator.TorqueActuator.reaction_frame"]], "stiffness (sympy.physics.mechanics.actuator.linearspring property)": [[129, "sympy.physics.mechanics.actuator.LinearSpring.stiffness"]], "sympy.physics.mechanics.actuator": [[129, "module-sympy.physics.mechanics.actuator"]], "target_frame (sympy.physics.mechanics.actuator.torqueactuator property)": [[129, "sympy.physics.mechanics.actuator.TorqueActuator.target_frame"]], "to_loads() (sympy.physics.mechanics.actuator.actuatorbase method)": [[129, "sympy.physics.mechanics.actuator.ActuatorBase.to_loads"]], "to_loads() (sympy.physics.mechanics.actuator.forceactuator method)": [[129, "sympy.physics.mechanics.actuator.ForceActuator.to_loads"]], "to_loads() (sympy.physics.mechanics.actuator.torqueactuator method)": [[129, "sympy.physics.mechanics.actuator.TorqueActuator.to_loads"]], "torque (sympy.physics.mechanics.actuator.torqueactuator property)": [[129, "sympy.physics.mechanics.actuator.TorqueActuator.torque"]], "body (class in sympy.physics.mechanics.body)": [[130, "sympy.physics.mechanics.body.Body"]], "ang_vel_in() (sympy.physics.mechanics.body.body method)": [[130, "sympy.physics.mechanics.body.Body.ang_vel_in"]], "apply_force() (sympy.physics.mechanics.body.body method)": [[130, "sympy.physics.mechanics.body.Body.apply_force"]], "apply_torque() (sympy.physics.mechanics.body.body method)": [[130, "sympy.physics.mechanics.body.Body.apply_torque"]], "clear_loads() (sympy.physics.mechanics.body.body method)": [[130, "sympy.physics.mechanics.body.Body.clear_loads"]], "dcm() (sympy.physics.mechanics.body.body method)": [[130, "sympy.physics.mechanics.body.Body.dcm"]], "inertia (sympy.physics.mechanics.body.body property)": [[130, "sympy.physics.mechanics.body.Body.inertia"]], "kinetic_energy() (sympy.physics.mechanics.body.body method)": [[130, "sympy.physics.mechanics.body.Body.kinetic_energy"]], "masscenter_vel() (sympy.physics.mechanics.body.body method)": [[130, "sympy.physics.mechanics.body.Body.masscenter_vel"]], "parallel_axis() (sympy.physics.mechanics.body.body method)": [[130, "sympy.physics.mechanics.body.Body.parallel_axis"]], "remove_load() (sympy.physics.mechanics.body.body method)": [[130, "sympy.physics.mechanics.body.Body.remove_load"]], "sympy.physics.mechanics.body": [[130, "module-sympy.physics.mechanics.body"]], "x (sympy.physics.mechanics.body.body property)": [[130, "sympy.physics.mechanics.body.Body.x"]], "y (sympy.physics.mechanics.body.body property)": [[130, "sympy.physics.mechanics.body.Body.y"]], "z (sympy.physics.mechanics.body.body property)": [[130, "sympy.physics.mechanics.body.Body.z"]], "find_dynamicsymbols() (in module sympy.physics.mechanics)": [[131, "sympy.physics.mechanics.find_dynamicsymbols"]], "msubs() (in module sympy.physics.mechanics)": [[131, "sympy.physics.mechanics.msubs"]], "cylindricaljoint (class in sympy.physics.mechanics.joint)": [[133, "sympy.physics.mechanics.joint.CylindricalJoint"]], "joint (class in sympy.physics.mechanics.joint)": [[133, "sympy.physics.mechanics.joint.Joint"]], "jointsmethod (class in sympy.physics.mechanics.jointsmethod)": [[133, "sympy.physics.mechanics.jointsmethod.JointsMethod"]], "pinjoint (class in sympy.physics.mechanics.joint)": [[133, "sympy.physics.mechanics.joint.PinJoint"]], "planarjoint (class in sympy.physics.mechanics.joint)": [[133, "sympy.physics.mechanics.joint.PlanarJoint"]], "prismaticjoint (class in sympy.physics.mechanics.joint)": [[133, "sympy.physics.mechanics.joint.PrismaticJoint"]], "sphericaljoint (class in sympy.physics.mechanics.joint)": [[133, "sympy.physics.mechanics.joint.SphericalJoint"]], "weldjoint (class in sympy.physics.mechanics.joint)": [[133, "sympy.physics.mechanics.joint.WeldJoint"]], "bodies (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[133, "sympy.physics.mechanics.jointsmethod.JointsMethod.bodies"]], "child (sympy.physics.mechanics.joint.joint property)": [[133, "sympy.physics.mechanics.joint.Joint.child"]], "child_axis (sympy.physics.mechanics.joint.joint property)": [[133, "sympy.physics.mechanics.joint.Joint.child_axis"]], "child_point (sympy.physics.mechanics.joint.joint property)": [[133, "sympy.physics.mechanics.joint.Joint.child_point"]], "coordinates (sympy.physics.mechanics.joint.joint property)": [[133, "sympy.physics.mechanics.joint.Joint.coordinates"]], "forcing (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[133, "sympy.physics.mechanics.jointsmethod.JointsMethod.forcing"]], "forcing_full (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[133, "sympy.physics.mechanics.jointsmethod.JointsMethod.forcing_full"]], "form_eoms() (sympy.physics.mechanics.jointsmethod.jointsmethod method)": [[133, "sympy.physics.mechanics.jointsmethod.JointsMethod.form_eoms"]], "joint_axis (sympy.physics.mechanics.joint.cylindricaljoint property)": [[133, "sympy.physics.mechanics.joint.CylindricalJoint.joint_axis"]], "joint_axis (sympy.physics.mechanics.joint.pinjoint property)": [[133, "sympy.physics.mechanics.joint.PinJoint.joint_axis"]], "joint_axis (sympy.physics.mechanics.joint.prismaticjoint property)": [[133, "sympy.physics.mechanics.joint.PrismaticJoint.joint_axis"]], "kdes (sympy.physics.mechanics.joint.joint property)": [[133, "sympy.physics.mechanics.joint.Joint.kdes"]], "kdes (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[133, "sympy.physics.mechanics.jointsmethod.JointsMethod.kdes"]], "loads (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[133, "sympy.physics.mechanics.jointsmethod.JointsMethod.loads"]], "mass_matrix (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[133, "sympy.physics.mechanics.jointsmethod.JointsMethod.mass_matrix"]], "mass_matrix_full (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[133, "sympy.physics.mechanics.jointsmethod.JointsMethod.mass_matrix_full"]], "method (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[133, "sympy.physics.mechanics.jointsmethod.JointsMethod.method"]], "name (sympy.physics.mechanics.joint.joint property)": [[133, "sympy.physics.mechanics.joint.Joint.name"]], "parent (sympy.physics.mechanics.joint.joint property)": [[133, "sympy.physics.mechanics.joint.Joint.parent"]], "parent_axis (sympy.physics.mechanics.joint.joint property)": [[133, "sympy.physics.mechanics.joint.Joint.parent_axis"]], "parent_point (sympy.physics.mechanics.joint.joint property)": [[133, "sympy.physics.mechanics.joint.Joint.parent_point"]], "planar_coordinates (sympy.physics.mechanics.joint.planarjoint property)": [[133, "sympy.physics.mechanics.joint.PlanarJoint.planar_coordinates"]], "planar_speeds (sympy.physics.mechanics.joint.planarjoint property)": [[133, "sympy.physics.mechanics.joint.PlanarJoint.planar_speeds"]], "planar_vectors (sympy.physics.mechanics.joint.planarjoint property)": [[133, "sympy.physics.mechanics.joint.PlanarJoint.planar_vectors"]], "q (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[133, "sympy.physics.mechanics.jointsmethod.JointsMethod.q"]], "rhs() (sympy.physics.mechanics.jointsmethod.jointsmethod method)": [[133, "sympy.physics.mechanics.jointsmethod.JointsMethod.rhs"]], "rotation_axis (sympy.physics.mechanics.joint.planarjoint property)": [[133, "sympy.physics.mechanics.joint.PlanarJoint.rotation_axis"]], "rotation_coordinate (sympy.physics.mechanics.joint.cylindricaljoint property)": [[133, "sympy.physics.mechanics.joint.CylindricalJoint.rotation_coordinate"]], "rotation_coordinate (sympy.physics.mechanics.joint.planarjoint property)": [[133, "sympy.physics.mechanics.joint.PlanarJoint.rotation_coordinate"]], "rotation_speed (sympy.physics.mechanics.joint.cylindricaljoint property)": [[133, "sympy.physics.mechanics.joint.CylindricalJoint.rotation_speed"]], "rotation_speed (sympy.physics.mechanics.joint.planarjoint property)": [[133, "sympy.physics.mechanics.joint.PlanarJoint.rotation_speed"]], "speeds (sympy.physics.mechanics.joint.joint property)": [[133, "sympy.physics.mechanics.joint.Joint.speeds"]], "sympy.physics.mechanics.joint": [[133, "module-sympy.physics.mechanics.joint"]], "sympy.physics.mechanics.jointsmethod": [[133, "module-sympy.physics.mechanics.jointsmethod"]], "translation_coordinate (sympy.physics.mechanics.joint.cylindricaljoint property)": [[133, "sympy.physics.mechanics.joint.CylindricalJoint.translation_coordinate"]], "translation_speed (sympy.physics.mechanics.joint.cylindricaljoint property)": [[133, "sympy.physics.mechanics.joint.CylindricalJoint.translation_speed"]], "u (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[133, "sympy.physics.mechanics.jointsmethod.JointsMethod.u"]], "kanesmethod (class in sympy.physics.mechanics.kane)": [[134, "sympy.physics.mechanics.kane.KanesMethod"]], "lagrangesmethod (class in sympy.physics.mechanics.lagrange)": [[134, "sympy.physics.mechanics.lagrange.LagrangesMethod"]], "auxiliary_eqs (sympy.physics.mechanics.kane.kanesmethod property)": [[134, "sympy.physics.mechanics.kane.KanesMethod.auxiliary_eqs"]], "forcing (sympy.physics.mechanics.kane.kanesmethod property)": [[134, "sympy.physics.mechanics.kane.KanesMethod.forcing"]], "forcing (sympy.physics.mechanics.lagrange.lagrangesmethod property)": [[134, "sympy.physics.mechanics.lagrange.LagrangesMethod.forcing"]], "forcing_full (sympy.physics.mechanics.kane.kanesmethod property)": [[134, "sympy.physics.mechanics.kane.KanesMethod.forcing_full"]], "forcing_full (sympy.physics.mechanics.lagrange.lagrangesmethod property)": [[134, "sympy.physics.mechanics.lagrange.LagrangesMethod.forcing_full"]], "forcing_kin (sympy.physics.mechanics.kane.kanesmethod property)": [[134, "sympy.physics.mechanics.kane.KanesMethod.forcing_kin"]], "form_lagranges_equations() (sympy.physics.mechanics.lagrange.lagrangesmethod method)": [[134, "sympy.physics.mechanics.lagrange.LagrangesMethod.form_lagranges_equations"]], "kanes_equations() (sympy.physics.mechanics.kane.kanesmethod method)": [[134, "sympy.physics.mechanics.kane.KanesMethod.kanes_equations"]], "kindiffdict() (sympy.physics.mechanics.kane.kanesmethod method)": [[134, "sympy.physics.mechanics.kane.KanesMethod.kindiffdict"]], "linearize() (sympy.physics.mechanics.kane.kanesmethod method)": [[134, "sympy.physics.mechanics.kane.KanesMethod.linearize"]], "linearize() (sympy.physics.mechanics.lagrange.lagrangesmethod method)": [[134, "sympy.physics.mechanics.lagrange.LagrangesMethod.linearize"]], "mass_matrix (sympy.physics.mechanics.kane.kanesmethod property)": [[134, "sympy.physics.mechanics.kane.KanesMethod.mass_matrix"]], "mass_matrix (sympy.physics.mechanics.lagrange.lagrangesmethod property)": [[134, "sympy.physics.mechanics.lagrange.LagrangesMethod.mass_matrix"]], "mass_matrix_full (sympy.physics.mechanics.kane.kanesmethod property)": [[134, "sympy.physics.mechanics.kane.KanesMethod.mass_matrix_full"]], "mass_matrix_full (sympy.physics.mechanics.lagrange.lagrangesmethod property)": [[134, "sympy.physics.mechanics.lagrange.LagrangesMethod.mass_matrix_full"]], "mass_matrix_kin (sympy.physics.mechanics.kane.kanesmethod property)": [[134, "sympy.physics.mechanics.kane.KanesMethod.mass_matrix_kin"]], "rhs() (sympy.physics.mechanics.kane.kanesmethod method)": [[134, "sympy.physics.mechanics.kane.KanesMethod.rhs"]], "rhs() (sympy.physics.mechanics.lagrange.lagrangesmethod method)": [[134, "sympy.physics.mechanics.lagrange.LagrangesMethod.rhs"]], "solve_multipliers() (sympy.physics.mechanics.lagrange.lagrangesmethod method)": [[134, "sympy.physics.mechanics.lagrange.LagrangesMethod.solve_multipliers"]], "sympy.physics.mechanics.kane": [[134, "module-sympy.physics.mechanics.kane"]], "sympy.physics.mechanics.lagrange": [[134, "module-sympy.physics.mechanics.lagrange"]], "to_linearizer() (sympy.physics.mechanics.kane.kanesmethod method)": [[134, "sympy.physics.mechanics.kane.KanesMethod.to_linearizer"]], "to_linearizer() (sympy.physics.mechanics.lagrange.lagrangesmethod method)": [[134, "sympy.physics.mechanics.lagrange.LagrangesMethod.to_linearizer"]], "linearizer (class in sympy.physics.mechanics.linearize)": [[135, "sympy.physics.mechanics.linearize.Linearizer"]], "__init__() (sympy.physics.mechanics.linearize.linearizer method)": [[135, "sympy.physics.mechanics.linearize.Linearizer.__init__"]], "linearize() (sympy.physics.mechanics.linearize.linearizer method)": [[135, "sympy.physics.mechanics.linearize.Linearizer.linearize"]], "sympy.physics.mechanics.linearize": [[135, "module-sympy.physics.mechanics.linearize"]], "force (class in sympy.physics.mechanics.loads)": [[136, "sympy.physics.mechanics.loads.Force"]], "inertia (class in sympy.physics.mechanics.inertia)": [[136, "sympy.physics.mechanics.inertia.Inertia"]], "lagrangian() (in module sympy.physics.mechanics.functions)": [[136, "sympy.physics.mechanics.functions.Lagrangian"]], "particle (class in sympy.physics.mechanics.particle)": [[136, "sympy.physics.mechanics.particle.Particle"]], "rigidbody (class in sympy.physics.mechanics.rigidbody)": [[136, "sympy.physics.mechanics.rigidbody.RigidBody"]], "torque (class in sympy.physics.mechanics.loads)": [[136, "sympy.physics.mechanics.loads.Torque"]], "angular_momentum() (in module sympy.physics.mechanics.functions)": [[136, "sympy.physics.mechanics.functions.angular_momentum"]], "angular_momentum() (sympy.physics.mechanics.particle.particle method)": [[136, "sympy.physics.mechanics.particle.Particle.angular_momentum"]], "angular_momentum() (sympy.physics.mechanics.rigidbody.rigidbody method)": [[136, "sympy.physics.mechanics.rigidbody.RigidBody.angular_momentum"]], "center_of_mass() (in module sympy.physics.mechanics.functions)": [[136, "sympy.physics.mechanics.functions.center_of_mass"]], "central_inertia (sympy.physics.mechanics.rigidbody.rigidbody property)": [[136, "sympy.physics.mechanics.rigidbody.RigidBody.central_inertia"]], "find_dynamicsymbols() (in module sympy.physics.mechanics.functions)": [[136, "sympy.physics.mechanics.functions.find_dynamicsymbols"]], "frame (sympy.physics.mechanics.rigidbody.rigidbody property)": [[136, "sympy.physics.mechanics.rigidbody.RigidBody.frame"]], "from_inertia_scalars() (sympy.physics.mechanics.inertia.inertia class method)": [[136, "sympy.physics.mechanics.inertia.Inertia.from_inertia_scalars"]], "inertia (sympy.physics.mechanics.rigidbody.rigidbody property)": [[136, "sympy.physics.mechanics.rigidbody.RigidBody.inertia"]], "inertia() (in module sympy.physics.mechanics.inertia)": [[136, "sympy.physics.mechanics.inertia.inertia"]], "inertia_of_point_mass() (in module sympy.physics.mechanics.inertia)": [[136, "sympy.physics.mechanics.inertia.inertia_of_point_mass"]], "kinetic_energy() (in module sympy.physics.mechanics.functions)": [[136, "sympy.physics.mechanics.functions.kinetic_energy"]], "kinetic_energy() (sympy.physics.mechanics.particle.particle method)": [[136, "sympy.physics.mechanics.particle.Particle.kinetic_energy"]], "kinetic_energy() (sympy.physics.mechanics.rigidbody.rigidbody method)": [[136, "sympy.physics.mechanics.rigidbody.RigidBody.kinetic_energy"]], "linear_momentum() (in module sympy.physics.mechanics.functions)": [[136, "sympy.physics.mechanics.functions.linear_momentum"]], "linear_momentum() (sympy.physics.mechanics.particle.particle method)": [[136, "sympy.physics.mechanics.particle.Particle.linear_momentum"]], "linear_momentum() (sympy.physics.mechanics.rigidbody.rigidbody method)": [[136, "sympy.physics.mechanics.rigidbody.RigidBody.linear_momentum"]], "mass (sympy.physics.mechanics.particle.particle property)": [[136, "sympy.physics.mechanics.particle.Particle.mass"]], "mass (sympy.physics.mechanics.rigidbody.rigidbody property)": [[136, "sympy.physics.mechanics.rigidbody.RigidBody.mass"]], "masscenter (sympy.physics.mechanics.particle.particle property)": [[136, "sympy.physics.mechanics.particle.Particle.masscenter"]], "masscenter (sympy.physics.mechanics.rigidbody.rigidbody property)": [[136, "sympy.physics.mechanics.rigidbody.RigidBody.masscenter"]], "name (sympy.physics.mechanics.particle.particle property)": [[136, "sympy.physics.mechanics.particle.Particle.name"]], "name (sympy.physics.mechanics.rigidbody.rigidbody property)": [[136, "sympy.physics.mechanics.rigidbody.RigidBody.name"]], "parallel_axis() (sympy.physics.mechanics.particle.particle method)": [[136, "sympy.physics.mechanics.particle.Particle.parallel_axis"]], "parallel_axis() (sympy.physics.mechanics.rigidbody.rigidbody method)": [[136, "sympy.physics.mechanics.rigidbody.RigidBody.parallel_axis"]], "point (sympy.physics.mechanics.particle.particle property)": [[136, "sympy.physics.mechanics.particle.Particle.point"]], "potential_energy (sympy.physics.mechanics.particle.particle property)": [[136, "sympy.physics.mechanics.particle.Particle.potential_energy"]], "potential_energy (sympy.physics.mechanics.rigidbody.rigidbody property)": [[136, "sympy.physics.mechanics.rigidbody.RigidBody.potential_energy"]], "potential_energy() (in module sympy.physics.mechanics.functions)": [[136, "sympy.physics.mechanics.functions.potential_energy"]], "x (sympy.physics.mechanics.rigidbody.rigidbody property)": [[136, "sympy.physics.mechanics.rigidbody.RigidBody.x"]], "y (sympy.physics.mechanics.rigidbody.rigidbody property)": [[136, "sympy.physics.mechanics.rigidbody.RigidBody.y"]], "z (sympy.physics.mechanics.rigidbody.rigidbody property)": [[136, "sympy.physics.mechanics.rigidbody.RigidBody.z"]], "linearpathway (class in sympy.physics.mechanics.pathway)": [[137, "sympy.physics.mechanics.pathway.LinearPathway"]], "obstaclesetpathway (class in sympy.physics.mechanics.pathway)": [[137, "sympy.physics.mechanics.pathway.ObstacleSetPathway"]], "pathwaybase (class in sympy.physics.mechanics.pathway)": [[137, "sympy.physics.mechanics.pathway.PathwayBase"]], "wrappingpathway (class in sympy.physics.mechanics.pathway)": [[137, "sympy.physics.mechanics.pathway.WrappingPathway"]], "attachments (sympy.physics.mechanics.pathway.obstaclesetpathway property)": [[137, "sympy.physics.mechanics.pathway.ObstacleSetPathway.attachments"]], "attachments (sympy.physics.mechanics.pathway.pathwaybase property)": [[137, "sympy.physics.mechanics.pathway.PathwayBase.attachments"]], "extension_velocity (sympy.physics.mechanics.pathway.linearpathway property)": [[137, "sympy.physics.mechanics.pathway.LinearPathway.extension_velocity"]], "extension_velocity (sympy.physics.mechanics.pathway.obstaclesetpathway property)": [[137, "sympy.physics.mechanics.pathway.ObstacleSetPathway.extension_velocity"]], "extension_velocity (sympy.physics.mechanics.pathway.pathwaybase property)": [[137, "sympy.physics.mechanics.pathway.PathwayBase.extension_velocity"]], "extension_velocity (sympy.physics.mechanics.pathway.wrappingpathway property)": [[137, "sympy.physics.mechanics.pathway.WrappingPathway.extension_velocity"]], "geometry (sympy.physics.mechanics.pathway.wrappingpathway property)": [[137, "sympy.physics.mechanics.pathway.WrappingPathway.geometry"]], "length (sympy.physics.mechanics.pathway.linearpathway property)": [[137, "sympy.physics.mechanics.pathway.LinearPathway.length"]], "length (sympy.physics.mechanics.pathway.obstaclesetpathway property)": [[137, "sympy.physics.mechanics.pathway.ObstacleSetPathway.length"]], "length (sympy.physics.mechanics.pathway.pathwaybase property)": [[137, "sympy.physics.mechanics.pathway.PathwayBase.length"]], "length (sympy.physics.mechanics.pathway.wrappingpathway property)": [[137, "sympy.physics.mechanics.pathway.WrappingPathway.length"]], "sympy.physics.mechanics.pathway": [[137, "module-sympy.physics.mechanics.pathway"]], "to_loads() (sympy.physics.mechanics.pathway.linearpathway method)": [[137, "sympy.physics.mechanics.pathway.LinearPathway.to_loads"]], "to_loads() (sympy.physics.mechanics.pathway.obstaclesetpathway method)": [[137, "sympy.physics.mechanics.pathway.ObstacleSetPathway.to_loads"]], "to_loads() (sympy.physics.mechanics.pathway.pathwaybase method)": [[137, "sympy.physics.mechanics.pathway.PathwayBase.to_loads"]], "to_loads() (sympy.physics.mechanics.pathway.wrappingpathway method)": [[137, "sympy.physics.mechanics.pathway.WrappingPathway.to_loads"]], "symbolicsystem (class in sympy.physics.mechanics.system)": [[139, "sympy.physics.mechanics.system.SymbolicSystem"]], "system (class in sympy.physics.mechanics._system)": [[139, "sympy.physics.mechanics._system.System"]], "actuators (sympy.physics.mechanics._system.system property)": [[139, "sympy.physics.mechanics._system.System.actuators"]], "add_actuators() (sympy.physics.mechanics._system.system method)": [[139, "sympy.physics.mechanics._system.System.add_actuators"]], "add_bodies() (sympy.physics.mechanics._system.system method)": [[139, "sympy.physics.mechanics._system.System.add_bodies"]], "add_coordinates() (sympy.physics.mechanics._system.system method)": [[139, "sympy.physics.mechanics._system.System.add_coordinates"]], "add_holonomic_constraints() (sympy.physics.mechanics._system.system method)": [[139, "sympy.physics.mechanics._system.System.add_holonomic_constraints"]], "add_joints() (sympy.physics.mechanics._system.system method)": [[139, "sympy.physics.mechanics._system.System.add_joints"]], "add_kdes() (sympy.physics.mechanics._system.system method)": [[139, "sympy.physics.mechanics._system.System.add_kdes"]], "add_loads() (sympy.physics.mechanics._system.system method)": [[139, "sympy.physics.mechanics._system.System.add_loads"]], "add_nonholonomic_constraints() (sympy.physics.mechanics._system.system method)": [[139, "sympy.physics.mechanics._system.System.add_nonholonomic_constraints"]], "add_speeds() (sympy.physics.mechanics._system.system method)": [[139, "sympy.physics.mechanics._system.System.add_speeds"]], "alg_con (sympy.physics.mechanics.system.symbolicsystem property)": [[139, "sympy.physics.mechanics.system.SymbolicSystem.alg_con"]], "apply_gravity() (sympy.physics.mechanics._system.system method)": [[139, "sympy.physics.mechanics._system.System.apply_gravity"]], "bodies (sympy.physics.mechanics._system.system property)": [[139, "sympy.physics.mechanics._system.System.bodies"]], "bodies (sympy.physics.mechanics.system.symbolicsystem property)": [[139, "sympy.physics.mechanics.system.SymbolicSystem.bodies"]], "comb_explicit_rhs (sympy.physics.mechanics.system.symbolicsystem property)": [[139, "sympy.physics.mechanics.system.SymbolicSystem.comb_explicit_rhs"]], "comb_implicit_mat (sympy.physics.mechanics.system.symbolicsystem property)": [[139, "sympy.physics.mechanics.system.SymbolicSystem.comb_implicit_mat"]], "comb_implicit_rhs (sympy.physics.mechanics.system.symbolicsystem property)": [[139, "sympy.physics.mechanics.system.SymbolicSystem.comb_implicit_rhs"]], "compute_explicit_form() (sympy.physics.mechanics.system.symbolicsystem method)": [[139, "sympy.physics.mechanics.system.SymbolicSystem.compute_explicit_form"]], "constant_symbols() (sympy.physics.mechanics.system.symbolicsystem method)": [[139, "sympy.physics.mechanics.system.SymbolicSystem.constant_symbols"]], "coordinates (sympy.physics.mechanics.system.symbolicsystem property)": [[139, "sympy.physics.mechanics.system.SymbolicSystem.coordinates"]], "dyn_implicit_mat (sympy.physics.mechanics.system.symbolicsystem property)": [[139, "sympy.physics.mechanics.system.SymbolicSystem.dyn_implicit_mat"]], "dyn_implicit_rhs (sympy.physics.mechanics.system.symbolicsystem property)": [[139, "sympy.physics.mechanics.system.SymbolicSystem.dyn_implicit_rhs"]], "dynamic_symbols() (sympy.physics.mechanics.system.symbolicsystem method)": [[139, "sympy.physics.mechanics.system.SymbolicSystem.dynamic_symbols"]], "eom_method (sympy.physics.mechanics._system.system property)": [[139, "sympy.physics.mechanics._system.System.eom_method"]], "forcing (sympy.physics.mechanics._system.system property)": [[139, "sympy.physics.mechanics._system.System.forcing"]], "forcing_full (sympy.physics.mechanics._system.system property)": [[139, "sympy.physics.mechanics._system.System.forcing_full"]], "form_eoms() (sympy.physics.mechanics._system.system method)": [[139, "sympy.physics.mechanics._system.System.form_eoms"]], "frame (sympy.physics.mechanics._system.system property)": [[139, "sympy.physics.mechanics._system.System.frame"]], "from_newtonian() (sympy.physics.mechanics._system.system class method)": [[139, "sympy.physics.mechanics._system.System.from_newtonian"]], "get_body() (sympy.physics.mechanics._system.system method)": [[139, "sympy.physics.mechanics._system.System.get_body"]], "get_joint() (sympy.physics.mechanics._system.system method)": [[139, "sympy.physics.mechanics._system.System.get_joint"]], "holonomic_constraints (sympy.physics.mechanics._system.system property)": [[139, "sympy.physics.mechanics._system.System.holonomic_constraints"]], "joints (sympy.physics.mechanics._system.system property)": [[139, "sympy.physics.mechanics._system.System.joints"]], "kdes (sympy.physics.mechanics._system.system property)": [[139, "sympy.physics.mechanics._system.System.kdes"]], "kin_explicit_rhs (sympy.physics.mechanics.system.symbolicsystem property)": [[139, "sympy.physics.mechanics.system.SymbolicSystem.kin_explicit_rhs"]], "loads (sympy.physics.mechanics._system.system property)": [[139, "sympy.physics.mechanics._system.System.loads"]], "loads (sympy.physics.mechanics.system.symbolicsystem property)": [[139, "sympy.physics.mechanics.system.SymbolicSystem.loads"]], "mass_matrix (sympy.physics.mechanics._system.system property)": [[139, "sympy.physics.mechanics._system.System.mass_matrix"]], "mass_matrix_full (sympy.physics.mechanics._system.system property)": [[139, "sympy.physics.mechanics._system.System.mass_matrix_full"]], "nonholonomic_constraints (sympy.physics.mechanics._system.system property)": [[139, "sympy.physics.mechanics._system.System.nonholonomic_constraints"]], "origin (sympy.physics.mechanics._system.system property)": [[139, "sympy.physics.mechanics._system.System.origin"]], "q (sympy.physics.mechanics._system.system property)": [[139, "sympy.physics.mechanics._system.System.q"]], "q_dep (sympy.physics.mechanics._system.system property)": [[139, "sympy.physics.mechanics._system.System.q_dep"]], "q_ind (sympy.physics.mechanics._system.system property)": [[139, "sympy.physics.mechanics._system.System.q_ind"]], "rhs() (sympy.physics.mechanics._system.system method)": [[139, "sympy.physics.mechanics._system.System.rhs"]], "speeds (sympy.physics.mechanics.system.symbolicsystem property)": [[139, "sympy.physics.mechanics.system.SymbolicSystem.speeds"]], "states (sympy.physics.mechanics.system.symbolicsystem property)": [[139, "sympy.physics.mechanics.system.SymbolicSystem.states"]], "sympy.physics.mechanics.system": [[139, "module-sympy.physics.mechanics.system"]], "u (sympy.physics.mechanics._system.system property)": [[139, "sympy.physics.mechanics._system.System.u"]], "u_dep (sympy.physics.mechanics._system.system property)": [[139, "sympy.physics.mechanics._system.System.u_dep"]], "u_ind (sympy.physics.mechanics._system.system property)": [[139, "sympy.physics.mechanics._system.System.u_ind"]], "validate_system() (sympy.physics.mechanics._system.system method)": [[139, "sympy.physics.mechanics._system.System.validate_system"]], "x (sympy.physics.mechanics._system.system property)": [[139, "sympy.physics.mechanics._system.System.x"]], "y (sympy.physics.mechanics._system.system property)": [[139, "sympy.physics.mechanics._system.System.y"]], "z (sympy.physics.mechanics._system.system property)": [[139, "sympy.physics.mechanics._system.System.z"]], "wrappingcylinder (class in sympy.physics.mechanics.wrapping_geometry)": [[140, "sympy.physics.mechanics.wrapping_geometry.WrappingCylinder"]], "wrappinggeometrybase (class in sympy.physics.mechanics.wrapping_geometry)": [[140, "sympy.physics.mechanics.wrapping_geometry.WrappingGeometryBase"]], "wrappingsphere (class in sympy.physics.mechanics.wrapping_geometry)": [[140, "sympy.physics.mechanics.wrapping_geometry.WrappingSphere"]], "axis (sympy.physics.mechanics.wrapping_geometry.wrappingcylinder property)": [[140, "sympy.physics.mechanics.wrapping_geometry.WrappingCylinder.axis"]], "geodesic_end_vectors() (sympy.physics.mechanics.wrapping_geometry.wrappingcylinder method)": [[140, "sympy.physics.mechanics.wrapping_geometry.WrappingCylinder.geodesic_end_vectors"]], "geodesic_end_vectors() (sympy.physics.mechanics.wrapping_geometry.wrappinggeometrybase method)": [[140, "sympy.physics.mechanics.wrapping_geometry.WrappingGeometryBase.geodesic_end_vectors"]], "geodesic_end_vectors() (sympy.physics.mechanics.wrapping_geometry.wrappingsphere method)": [[140, "sympy.physics.mechanics.wrapping_geometry.WrappingSphere.geodesic_end_vectors"]], "geodesic_length() (sympy.physics.mechanics.wrapping_geometry.wrappingcylinder method)": [[140, "sympy.physics.mechanics.wrapping_geometry.WrappingCylinder.geodesic_length"]], "geodesic_length() (sympy.physics.mechanics.wrapping_geometry.wrappinggeometrybase method)": [[140, "sympy.physics.mechanics.wrapping_geometry.WrappingGeometryBase.geodesic_length"]], "geodesic_length() (sympy.physics.mechanics.wrapping_geometry.wrappingsphere method)": [[140, "sympy.physics.mechanics.wrapping_geometry.WrappingSphere.geodesic_length"]], "point (sympy.physics.mechanics.wrapping_geometry.wrappingcylinder property)": [[140, "sympy.physics.mechanics.wrapping_geometry.WrappingCylinder.point"]], "point (sympy.physics.mechanics.wrapping_geometry.wrappinggeometrybase property)": [[140, "sympy.physics.mechanics.wrapping_geometry.WrappingGeometryBase.point"]], "point (sympy.physics.mechanics.wrapping_geometry.wrappingsphere property)": [[140, "sympy.physics.mechanics.wrapping_geometry.WrappingSphere.point"]], "point_on_surface() (sympy.physics.mechanics.wrapping_geometry.wrappingcylinder method)": [[140, "sympy.physics.mechanics.wrapping_geometry.WrappingCylinder.point_on_surface"]], "point_on_surface() (sympy.physics.mechanics.wrapping_geometry.wrappinggeometrybase method)": [[140, "sympy.physics.mechanics.wrapping_geometry.WrappingGeometryBase.point_on_surface"]], "point_on_surface() (sympy.physics.mechanics.wrapping_geometry.wrappingsphere method)": [[140, "sympy.physics.mechanics.wrapping_geometry.WrappingSphere.point_on_surface"]], "radius (sympy.physics.mechanics.wrapping_geometry.wrappingcylinder property)": [[140, "sympy.physics.mechanics.wrapping_geometry.WrappingCylinder.radius"]], "radius (sympy.physics.mechanics.wrapping_geometry.wrappingsphere property)": [[140, "sympy.physics.mechanics.wrapping_geometry.WrappingSphere.radius"]], "sympy.physics.mechanics.wrapping_geometry": [[140, "module-sympy.physics.mechanics.wrapping_geometry"]], "sympy.physics.mechanics": [[151, "module-sympy.physics.mechanics"]], "a (sympy.physics.optics.gaussopt.raytransfermatrix property)": [[160, "sympy.physics.optics.gaussopt.RayTransferMatrix.A"]], "b (sympy.physics.optics.gaussopt.raytransfermatrix property)": [[160, "sympy.physics.optics.gaussopt.RayTransferMatrix.B"]], "beamparameter (class in sympy.physics.optics.gaussopt)": [[160, "sympy.physics.optics.gaussopt.BeamParameter"]], "c (sympy.physics.optics.gaussopt.raytransfermatrix property)": [[160, "sympy.physics.optics.gaussopt.RayTransferMatrix.C"]], "curvedmirror (class in sympy.physics.optics.gaussopt)": [[160, "sympy.physics.optics.gaussopt.CurvedMirror"]], "curvedrefraction (class in sympy.physics.optics.gaussopt)": [[160, "sympy.physics.optics.gaussopt.CurvedRefraction"]], "d (sympy.physics.optics.gaussopt.raytransfermatrix property)": [[160, "sympy.physics.optics.gaussopt.RayTransferMatrix.D"]], "flatmirror (class in sympy.physics.optics.gaussopt)": [[160, "sympy.physics.optics.gaussopt.FlatMirror"]], "flatrefraction (class in sympy.physics.optics.gaussopt)": [[160, "sympy.physics.optics.gaussopt.FlatRefraction"]], "freespace (class in sympy.physics.optics.gaussopt)": [[160, "sympy.physics.optics.gaussopt.FreeSpace"]], "geometricray (class in sympy.physics.optics.gaussopt)": [[160, "sympy.physics.optics.gaussopt.GeometricRay"]], "raytransfermatrix (class in sympy.physics.optics.gaussopt)": [[160, "sympy.physics.optics.gaussopt.RayTransferMatrix"]], "thinlens (class in sympy.physics.optics.gaussopt)": [[160, "sympy.physics.optics.gaussopt.ThinLens"]], "angle (sympy.physics.optics.gaussopt.geometricray property)": [[160, "sympy.physics.optics.gaussopt.GeometricRay.angle"]], "conjugate_gauss_beams() (in module sympy.physics.optics.gaussopt)": [[160, "sympy.physics.optics.gaussopt.conjugate_gauss_beams"]], "divergence (sympy.physics.optics.gaussopt.beamparameter property)": [[160, "sympy.physics.optics.gaussopt.BeamParameter.divergence"]], "gaussian_conj() (in module sympy.physics.optics.gaussopt)": [[160, "sympy.physics.optics.gaussopt.gaussian_conj"]], "geometric_conj_ab() (in module sympy.physics.optics.gaussopt)": [[160, "sympy.physics.optics.gaussopt.geometric_conj_ab"]], "geometric_conj_af() (in module sympy.physics.optics.gaussopt)": [[160, "sympy.physics.optics.gaussopt.geometric_conj_af"]], "geometric_conj_bf() (in module sympy.physics.optics.gaussopt)": [[160, "sympy.physics.optics.gaussopt.geometric_conj_bf"]], "gouy (sympy.physics.optics.gaussopt.beamparameter property)": [[160, "sympy.physics.optics.gaussopt.BeamParameter.gouy"]], "height (sympy.physics.optics.gaussopt.geometricray property)": [[160, "sympy.physics.optics.gaussopt.GeometricRay.height"]], "q (sympy.physics.optics.gaussopt.beamparameter property)": [[160, "sympy.physics.optics.gaussopt.BeamParameter.q"]], "radius (sympy.physics.optics.gaussopt.beamparameter property)": [[160, "sympy.physics.optics.gaussopt.BeamParameter.radius"]], "rayleigh2waist() (in module sympy.physics.optics.gaussopt)": [[160, "sympy.physics.optics.gaussopt.rayleigh2waist"]], "sympy.physics.optics.gaussopt": [[160, "module-sympy.physics.optics.gaussopt"]], "w (sympy.physics.optics.gaussopt.beamparameter property)": [[160, "sympy.physics.optics.gaussopt.BeamParameter.w"]], "w_0 (sympy.physics.optics.gaussopt.beamparameter property)": [[160, "sympy.physics.optics.gaussopt.BeamParameter.w_0"]], "waist2rayleigh() (in module sympy.physics.optics.gaussopt)": [[160, "sympy.physics.optics.gaussopt.waist2rayleigh"]], "waist_approximation_limit (sympy.physics.optics.gaussopt.beamparameter property)": [[160, "sympy.physics.optics.gaussopt.BeamParameter.waist_approximation_limit"]], "medium (class in sympy.physics.optics.medium)": [[162, "sympy.physics.optics.medium.Medium"]], "refractive_index (sympy.physics.optics.medium.medium property)": [[162, "sympy.physics.optics.medium.Medium.refractive_index"]], "speed (sympy.physics.optics.medium.medium property)": [[162, "sympy.physics.optics.medium.Medium.speed"]], "sympy.physics.optics.medium": [[162, "module-sympy.physics.optics.medium"]], "half_wave_retarder() (in module sympy.physics.optics.polarization)": [[163, "sympy.physics.optics.polarization.half_wave_retarder"]], "jones_2_stokes() (in module sympy.physics.optics.polarization)": [[163, "sympy.physics.optics.polarization.jones_2_stokes"]], "jones_vector() (in module sympy.physics.optics.polarization)": [[163, "sympy.physics.optics.polarization.jones_vector"]], "linear_polarizer() (in module sympy.physics.optics.polarization)": [[163, "sympy.physics.optics.polarization.linear_polarizer"]], "mueller_matrix() (in module sympy.physics.optics.polarization)": [[163, "sympy.physics.optics.polarization.mueller_matrix"]], "phase_retarder() (in module sympy.physics.optics.polarization)": [[163, "sympy.physics.optics.polarization.phase_retarder"]], "polarizing_beam_splitter() (in module sympy.physics.optics.polarization)": [[163, "sympy.physics.optics.polarization.polarizing_beam_splitter"]], "quarter_wave_retarder() (in module sympy.physics.optics.polarization)": [[163, "sympy.physics.optics.polarization.quarter_wave_retarder"]], "reflective_filter() (in module sympy.physics.optics.polarization)": [[163, "sympy.physics.optics.polarization.reflective_filter"]], "stokes_vector() (in module sympy.physics.optics.polarization)": [[163, "sympy.physics.optics.polarization.stokes_vector"]], "sympy.physics.optics.polarization": [[163, "module-sympy.physics.optics.polarization"]], "transmissive_filter() (in module sympy.physics.optics.polarization)": [[163, "sympy.physics.optics.polarization.transmissive_filter"]], "brewster_angle() (in module sympy.physics.optics.utils)": [[164, "sympy.physics.optics.utils.brewster_angle"]], "critical_angle() (in module sympy.physics.optics.utils)": [[164, "sympy.physics.optics.utils.critical_angle"]], "deviation() (in module sympy.physics.optics.utils)": [[164, "sympy.physics.optics.utils.deviation"]], "fresnel_coefficients() (in module sympy.physics.optics.utils)": [[164, "sympy.physics.optics.utils.fresnel_coefficients"]], "hyperfocal_distance() (in module sympy.physics.optics.utils)": [[164, "sympy.physics.optics.utils.hyperfocal_distance"]], "lens_formula() (in module sympy.physics.optics.utils)": [[164, "sympy.physics.optics.utils.lens_formula"]], "lens_makers_formula() (in module sympy.physics.optics.utils)": [[164, "sympy.physics.optics.utils.lens_makers_formula"]], "mirror_formula() (in module sympy.physics.optics.utils)": [[164, "sympy.physics.optics.utils.mirror_formula"]], "refraction_angle() (in module sympy.physics.optics.utils)": [[164, "sympy.physics.optics.utils.refraction_angle"]], "sympy.physics.optics.utils": [[164, "module-sympy.physics.optics.utils"]], "transverse_magnification() (in module sympy.physics.optics.utils)": [[164, "sympy.physics.optics.utils.transverse_magnification"]], "twave (class in sympy.physics.optics.waves)": [[165, "sympy.physics.optics.waves.TWave"]], "amplitude (sympy.physics.optics.waves.twave property)": [[165, "sympy.physics.optics.waves.TWave.amplitude"]], "angular_velocity (sympy.physics.optics.waves.twave property)": [[165, "sympy.physics.optics.waves.TWave.angular_velocity"]], "frequency (sympy.physics.optics.waves.twave property)": [[165, "sympy.physics.optics.waves.TWave.frequency"]], "n (sympy.physics.optics.waves.twave property)": [[165, "sympy.physics.optics.waves.TWave.n"]], "phase (sympy.physics.optics.waves.twave property)": [[165, "sympy.physics.optics.waves.TWave.phase"]], "speed (sympy.physics.optics.waves.twave property)": [[165, "sympy.physics.optics.waves.TWave.speed"]], "sympy.physics.optics.waves": [[165, "module-sympy.physics.optics.waves"]], "time_period (sympy.physics.optics.waves.twave property)": [[165, "sympy.physics.optics.waves.TWave.time_period"]], "wavelength (sympy.physics.optics.waves.twave property)": [[165, "sympy.physics.optics.waves.TWave.wavelength"]], "wavenumber (sympy.physics.optics.waves.twave property)": [[165, "sympy.physics.optics.waves.TWave.wavenumber"]], "evaluate_pauli_product() (in module sympy.physics.paulialgebra)": [[166, "sympy.physics.paulialgebra.evaluate_pauli_product"]], "sympy.physics.paulialgebra": [[166, "module-sympy.physics.paulialgebra"]], "e_n() (in module sympy.physics.qho_1d)": [[167, "sympy.physics.qho_1d.E_n"]], "coherent_state() (in module sympy.physics.qho_1d)": [[167, "sympy.physics.qho_1d.coherent_state"]], "psi_n() (in module sympy.physics.qho_1d)": [[167, "sympy.physics.qho_1d.psi_n"]], "sympy.physics.qho_1d": [[167, "module-sympy.physics.qho_1d"]], "anticommutator (class in sympy.physics.quantum.anticommutator)": [[168, "sympy.physics.quantum.anticommutator.AntiCommutator"]], "doit() (sympy.physics.quantum.anticommutator.anticommutator method)": [[168, "sympy.physics.quantum.anticommutator.AntiCommutator.doit"]], "sympy.physics.quantum.anticommutator": [[168, "module-sympy.physics.quantum.anticommutator"]], "positionbra3d (class in sympy.physics.quantum.cartesian)": [[169, "sympy.physics.quantum.cartesian.PositionBra3D"]], "positionket3d (class in sympy.physics.quantum.cartesian)": [[169, "sympy.physics.quantum.cartesian.PositionKet3D"]], "positionstate3d (class in sympy.physics.quantum.cartesian)": [[169, "sympy.physics.quantum.cartesian.PositionState3D"]], "pxbra (class in sympy.physics.quantum.cartesian)": [[169, "sympy.physics.quantum.cartesian.PxBra"]], "pxket (class in sympy.physics.quantum.cartesian)": [[169, "sympy.physics.quantum.cartesian.PxKet"]], "pxop (class in sympy.physics.quantum.cartesian)": [[169, "sympy.physics.quantum.cartesian.PxOp"]], "xbra (class in sympy.physics.quantum.cartesian)": [[169, "sympy.physics.quantum.cartesian.XBra"]], "xket (class in sympy.physics.quantum.cartesian)": [[169, "sympy.physics.quantum.cartesian.XKet"]], "xop (class in sympy.physics.quantum.cartesian)": [[169, "sympy.physics.quantum.cartesian.XOp"]], "yop (class in sympy.physics.quantum.cartesian)": [[169, "sympy.physics.quantum.cartesian.YOp"]], "zop (class in sympy.physics.quantum.cartesian)": [[169, "sympy.physics.quantum.cartesian.ZOp"]], "momentum (sympy.physics.quantum.cartesian.pxbra property)": [[169, "sympy.physics.quantum.cartesian.PxBra.momentum"]], "momentum (sympy.physics.quantum.cartesian.pxket property)": [[169, "sympy.physics.quantum.cartesian.PxKet.momentum"]], "position (sympy.physics.quantum.cartesian.xbra property)": [[169, "sympy.physics.quantum.cartesian.XBra.position"]], "position (sympy.physics.quantum.cartesian.xket property)": [[169, "sympy.physics.quantum.cartesian.XKet.position"]], "position_x (sympy.physics.quantum.cartesian.positionstate3d property)": [[169, "sympy.physics.quantum.cartesian.PositionState3D.position_x"]], "position_y (sympy.physics.quantum.cartesian.positionstate3d property)": [[169, "sympy.physics.quantum.cartesian.PositionState3D.position_y"]], "position_z (sympy.physics.quantum.cartesian.positionstate3d property)": [[169, "sympy.physics.quantum.cartesian.PositionState3D.position_z"]], "sympy.physics.quantum.cartesian": [[169, "module-sympy.physics.quantum.cartesian"]], "cg (class in sympy.physics.quantum.cg)": [[170, "sympy.physics.quantum.cg.CG"]], "wigner3j (class in sympy.physics.quantum.cg)": [[170, "sympy.physics.quantum.cg.Wigner3j"]], "wigner6j (class in sympy.physics.quantum.cg)": [[170, "sympy.physics.quantum.cg.Wigner6j"]], "wigner9j (class in sympy.physics.quantum.cg)": [[170, "sympy.physics.quantum.cg.Wigner9j"]], "cg_simp() (in module sympy.physics.quantum.cg)": [[170, "sympy.physics.quantum.cg.cg_simp"]], "sympy.physics.quantum.cg": [[170, "module-sympy.physics.quantum.cg"]], "circuitplot (class in sympy.physics.quantum.circuitplot)": [[171, "sympy.physics.quantum.circuitplot.CircuitPlot"]], "createcgate() (in module sympy.physics.quantum.circuitplot)": [[171, "sympy.physics.quantum.circuitplot.CreateCGate"]], "mx (class in sympy.physics.quantum.circuitplot)": [[171, "sympy.physics.quantum.circuitplot.Mx"]], "mz (class in sympy.physics.quantum.circuitplot)": [[171, "sympy.physics.quantum.circuitplot.Mz"]], "circuit_plot() (in module sympy.physics.quantum.circuitplot)": [[171, "sympy.physics.quantum.circuitplot.circuit_plot"]], "control_line() (sympy.physics.quantum.circuitplot.circuitplot method)": [[171, "sympy.physics.quantum.circuitplot.CircuitPlot.control_line"]], "control_point() (sympy.physics.quantum.circuitplot.circuitplot method)": [[171, "sympy.physics.quantum.circuitplot.CircuitPlot.control_point"]], "labeller() (in module sympy.physics.quantum.circuitplot)": [[171, "sympy.physics.quantum.circuitplot.labeller"]], "not_point() (sympy.physics.quantum.circuitplot.circuitplot method)": [[171, "sympy.physics.quantum.circuitplot.CircuitPlot.not_point"]], "one_qubit_box() (sympy.physics.quantum.circuitplot.circuitplot method)": [[171, "sympy.physics.quantum.circuitplot.CircuitPlot.one_qubit_box"]], "swap_point() (sympy.physics.quantum.circuitplot.circuitplot method)": [[171, "sympy.physics.quantum.circuitplot.CircuitPlot.swap_point"]], "sympy.physics.quantum.circuitplot": [[171, "module-sympy.physics.quantum.circuitplot"]], "two_qubit_box() (sympy.physics.quantum.circuitplot.circuitplot method)": [[171, "sympy.physics.quantum.circuitplot.CircuitPlot.two_qubit_box"]], "update() (sympy.physics.quantum.circuitplot.circuitplot method)": [[171, "sympy.physics.quantum.circuitplot.CircuitPlot.update"]], "commutator (class in sympy.physics.quantum.commutator)": [[172, "sympy.physics.quantum.commutator.Commutator"]], "doit() (sympy.physics.quantum.commutator.commutator method)": [[172, "sympy.physics.quantum.commutator.Commutator.doit"]], "sympy.physics.quantum.commutator": [[172, "module-sympy.physics.quantum.commutator"]], "hbar (class in sympy.physics.quantum.constants)": [[173, "sympy.physics.quantum.constants.HBar"]], "sympy.physics.quantum.constants": [[173, "module-sympy.physics.quantum.constants"]], "dagger (class in sympy.physics.quantum.dagger)": [[174, "sympy.physics.quantum.dagger.Dagger"]], "sympy.physics.quantum.dagger": [[174, "module-sympy.physics.quantum.dagger"]], "cgate (class in sympy.physics.quantum.gate)": [[175, "sympy.physics.quantum.gate.CGate"]], "cgates (class in sympy.physics.quantum.gate)": [[175, "sympy.physics.quantum.gate.CGateS"]], "cnot (in module sympy.physics.quantum.gate)": [[175, "sympy.physics.quantum.gate.CNOT"]], "cnotgate (class in sympy.physics.quantum.gate)": [[175, "sympy.physics.quantum.gate.CNotGate"]], "gate (class in sympy.physics.quantum.gate)": [[175, "sympy.physics.quantum.gate.Gate"]], "h (in module sympy.physics.quantum.gate)": [[175, "sympy.physics.quantum.gate.H"]], "hadamardgate (class in sympy.physics.quantum.gate)": [[175, "sympy.physics.quantum.gate.HadamardGate"]], "identitygate (class in sympy.physics.quantum.gate)": [[175, "sympy.physics.quantum.gate.IdentityGate"]], "onequbitgate (class in sympy.physics.quantum.gate)": [[175, "sympy.physics.quantum.gate.OneQubitGate"]], "phase (in module sympy.physics.quantum.gate)": [[175, "sympy.physics.quantum.gate.Phase"]], "phasegate (class in sympy.physics.quantum.gate)": [[175, "sympy.physics.quantum.gate.PhaseGate"]], "s (in module sympy.physics.quantum.gate)": [[175, "sympy.physics.quantum.gate.S"]], "swap (in module sympy.physics.quantum.gate)": [[175, "sympy.physics.quantum.gate.SWAP"]], "swapgate (class in sympy.physics.quantum.gate)": [[175, "sympy.physics.quantum.gate.SwapGate"]], "t (in module sympy.physics.quantum.gate)": [[175, "sympy.physics.quantum.gate.T"]], "tgate (class in sympy.physics.quantum.gate)": [[175, "sympy.physics.quantum.gate.TGate"]], "twoqubitgate (class in sympy.physics.quantum.gate)": [[175, "sympy.physics.quantum.gate.TwoQubitGate"]], "ugate (class in sympy.physics.quantum.gate)": [[175, "sympy.physics.quantum.gate.UGate"]], "x (in module sympy.physics.quantum.gate)": [[175, "sympy.physics.quantum.gate.X"]], "xgate (class in sympy.physics.quantum.gate)": [[175, "sympy.physics.quantum.gate.XGate"]], "y (in module sympy.physics.quantum.gate)": [[175, "sympy.physics.quantum.gate.Y"]], "ygate (class in sympy.physics.quantum.gate)": [[175, "sympy.physics.quantum.gate.YGate"]], "z (in module sympy.physics.quantum.gate)": [[175, "sympy.physics.quantum.gate.Z"]], "zgate (class in sympy.physics.quantum.gate)": [[175, "sympy.physics.quantum.gate.ZGate"]], "controls (sympy.physics.quantum.gate.cgate property)": [[175, "sympy.physics.quantum.gate.CGate.controls"]], "controls (sympy.physics.quantum.gate.cnotgate property)": [[175, "sympy.physics.quantum.gate.CNotGate.controls"]], "decompose() (sympy.physics.quantum.gate.cgate method)": [[175, "sympy.physics.quantum.gate.CGate.decompose"]], "decompose() (sympy.physics.quantum.gate.swapgate method)": [[175, "sympy.physics.quantum.gate.SwapGate.decompose"]], "eval_controls() (sympy.physics.quantum.gate.cgate method)": [[175, "sympy.physics.quantum.gate.CGate.eval_controls"]], "gate (sympy.physics.quantum.gate.cgate property)": [[175, "sympy.physics.quantum.gate.CGate.gate"]], "gate (sympy.physics.quantum.gate.cnotgate property)": [[175, "sympy.physics.quantum.gate.CNotGate.gate"]], "gate_simp() (in module sympy.physics.quantum.gate)": [[175, "sympy.physics.quantum.gate.gate_simp"]], "gate_sort() (in module sympy.physics.quantum.gate)": [[175, "sympy.physics.quantum.gate.gate_sort"]], "get_target_matrix() (sympy.physics.quantum.gate.gate method)": [[175, "sympy.physics.quantum.gate.Gate.get_target_matrix"]], "get_target_matrix() (sympy.physics.quantum.gate.ugate method)": [[175, "sympy.physics.quantum.gate.UGate.get_target_matrix"]], "min_qubits (sympy.physics.quantum.gate.cgate property)": [[175, "sympy.physics.quantum.gate.CGate.min_qubits"]], "min_qubits (sympy.physics.quantum.gate.cnotgate property)": [[175, "sympy.physics.quantum.gate.CNotGate.min_qubits"]], "min_qubits (sympy.physics.quantum.gate.gate property)": [[175, "sympy.physics.quantum.gate.Gate.min_qubits"]], "normalized() (in module sympy.physics.quantum.gate)": [[175, "sympy.physics.quantum.gate.normalized"]], "nqubits (sympy.physics.quantum.gate.cgate property)": [[175, "sympy.physics.quantum.gate.CGate.nqubits"]], "nqubits (sympy.physics.quantum.gate.gate property)": [[175, "sympy.physics.quantum.gate.Gate.nqubits"]], "plot_gate() (sympy.physics.quantum.gate.cgate method)": [[175, "sympy.physics.quantum.gate.CGate.plot_gate"]], "random_circuit() (in module sympy.physics.quantum.gate)": [[175, "sympy.physics.quantum.gate.random_circuit"]], "sympy.physics.quantum.gate": [[175, "module-sympy.physics.quantum.gate"]], "targets (sympy.physics.quantum.gate.cgate property)": [[175, "sympy.physics.quantum.gate.CGate.targets"]], "targets (sympy.physics.quantum.gate.cnotgate property)": [[175, "sympy.physics.quantum.gate.CNotGate.targets"]], "targets (sympy.physics.quantum.gate.gate property)": [[175, "sympy.physics.quantum.gate.Gate.targets"]], "targets (sympy.physics.quantum.gate.ugate property)": [[175, "sympy.physics.quantum.gate.UGate.targets"]], "oraclegate (class in sympy.physics.quantum.grover)": [[176, "sympy.physics.quantum.grover.OracleGate"]], "wgate (class in sympy.physics.quantum.grover)": [[176, "sympy.physics.quantum.grover.WGate"]], "apply_grover() (in module sympy.physics.quantum.grover)": [[176, "sympy.physics.quantum.grover.apply_grover"]], "grover_iteration() (in module sympy.physics.quantum.grover)": [[176, "sympy.physics.quantum.grover.grover_iteration"]], "search_function (sympy.physics.quantum.grover.oraclegate property)": [[176, "sympy.physics.quantum.grover.OracleGate.search_function"]], "superposition_basis() (in module sympy.physics.quantum.grover)": [[176, "sympy.physics.quantum.grover.superposition_basis"]], "sympy.physics.quantum.grover": [[176, "module-sympy.physics.quantum.grover"]], "targets (sympy.physics.quantum.grover.oraclegate property)": [[176, "sympy.physics.quantum.grover.OracleGate.targets"]], "complexspace (class in sympy.physics.quantum.hilbert)": [[177, "sympy.physics.quantum.hilbert.ComplexSpace"]], "directsumhilbertspace (class in sympy.physics.quantum.hilbert)": [[177, "sympy.physics.quantum.hilbert.DirectSumHilbertSpace"]], "fockspace (class in sympy.physics.quantum.hilbert)": [[177, "sympy.physics.quantum.hilbert.FockSpace"]], "hilbertspace (class in sympy.physics.quantum.hilbert)": [[177, "sympy.physics.quantum.hilbert.HilbertSpace"]], "l2 (class in sympy.physics.quantum.hilbert)": [[177, "sympy.physics.quantum.hilbert.L2"]], "tensorpowerhilbertspace (class in sympy.physics.quantum.hilbert)": [[177, "sympy.physics.quantum.hilbert.TensorPowerHilbertSpace"]], "tensorproducthilbertspace (class in sympy.physics.quantum.hilbert)": [[177, "sympy.physics.quantum.hilbert.TensorProductHilbertSpace"]], "dimension (sympy.physics.quantum.hilbert.hilbertspace property)": [[177, "sympy.physics.quantum.hilbert.HilbertSpace.dimension"]], "eval() (sympy.physics.quantum.hilbert.directsumhilbertspace class method)": [[177, "sympy.physics.quantum.hilbert.DirectSumHilbertSpace.eval"]], "eval() (sympy.physics.quantum.hilbert.tensorproducthilbertspace class method)": [[177, "sympy.physics.quantum.hilbert.TensorProductHilbertSpace.eval"]], "spaces (sympy.physics.quantum.hilbert.directsumhilbertspace property)": [[177, "sympy.physics.quantum.hilbert.DirectSumHilbertSpace.spaces"]], "spaces (sympy.physics.quantum.hilbert.tensorproducthilbertspace property)": [[177, "sympy.physics.quantum.hilbert.TensorProductHilbertSpace.spaces"]], "sympy.physics.quantum.hilbert": [[177, "module-sympy.physics.quantum.hilbert"]], "innerproduct (class in sympy.physics.quantum.innerproduct)": [[179, "sympy.physics.quantum.innerproduct.InnerProduct"]], "sympy.physics.quantum.innerproduct": [[179, "module-sympy.physics.quantum.innerproduct"]], "differentialoperator (class in sympy.physics.quantum.operator)": [[180, "sympy.physics.quantum.operator.DifferentialOperator"]], "hermitianoperator (class in sympy.physics.quantum.operator)": [[180, "sympy.physics.quantum.operator.HermitianOperator"]], "identityoperator (class in sympy.physics.quantum.operator)": [[180, "sympy.physics.quantum.operator.IdentityOperator"]], "operator (class in sympy.physics.quantum.operator)": [[180, "sympy.physics.quantum.operator.Operator"]], "outerproduct (class in sympy.physics.quantum.operator)": [[180, "sympy.physics.quantum.operator.OuterProduct"]], "unitaryoperator (class in sympy.physics.quantum.operator)": [[180, "sympy.physics.quantum.operator.UnitaryOperator"]], "bra (sympy.physics.quantum.operator.outerproduct property)": [[180, "sympy.physics.quantum.operator.OuterProduct.bra"]], "expr (sympy.physics.quantum.operator.differentialoperator property)": [[180, "sympy.physics.quantum.operator.DifferentialOperator.expr"]], "free_symbols (sympy.physics.quantum.operator.differentialoperator property)": [[180, "sympy.physics.quantum.operator.DifferentialOperator.free_symbols"]], "function (sympy.physics.quantum.operator.differentialoperator property)": [[180, "sympy.physics.quantum.operator.DifferentialOperator.function"]], "ket (sympy.physics.quantum.operator.outerproduct property)": [[180, "sympy.physics.quantum.operator.OuterProduct.ket"]], "sympy.physics.quantum.operator": [[180, "module-sympy.physics.quantum.operator"]], "variables (sympy.physics.quantum.operator.differentialoperator property)": [[180, "sympy.physics.quantum.operator.DifferentialOperator.variables"]], "operators_to_state() (in module sympy.physics.quantum.operatorset)": [[181, "sympy.physics.quantum.operatorset.operators_to_state"]], "state_to_operators() (in module sympy.physics.quantum.operatorset)": [[181, "sympy.physics.quantum.operatorset.state_to_operators"]], "sympy.physics.quantum.operatorset": [[181, "module-sympy.physics.quantum.operatorset"]], "piabbra (class in sympy.physics.quantum.piab)": [[182, "sympy.physics.quantum.piab.PIABBra"]], "piabhamiltonian (class in sympy.physics.quantum.piab)": [[182, "sympy.physics.quantum.piab.PIABHamiltonian"]], "piabket (class in sympy.physics.quantum.piab)": [[182, "sympy.physics.quantum.piab.PIABKet"]], "sympy.physics.quantum.piab": [[182, "module-sympy.physics.quantum.piab"]], "qapply() (in module sympy.physics.quantum.qapply)": [[183, "sympy.physics.quantum.qapply.qapply"]], "sympy.physics.quantum.qapply": [[183, "module-sympy.physics.quantum.qapply"]], "iqft (class in sympy.physics.quantum.qft)": [[184, "sympy.physics.quantum.qft.IQFT"]], "qft (class in sympy.physics.quantum.qft)": [[184, "sympy.physics.quantum.qft.QFT"]], "rk (in module sympy.physics.quantum.qft)": [[184, "sympy.physics.quantum.qft.Rk"]], "rkgate (class in sympy.physics.quantum.qft)": [[184, "sympy.physics.quantum.qft.RkGate"]], "decompose() (sympy.physics.quantum.qft.iqft method)": [[184, "sympy.physics.quantum.qft.IQFT.decompose"]], "decompose() (sympy.physics.quantum.qft.qft method)": [[184, "sympy.physics.quantum.qft.QFT.decompose"]], "sympy.physics.quantum.qft": [[184, "module-sympy.physics.quantum.qft"]], "intqubit (class in sympy.physics.quantum.qubit)": [[185, "sympy.physics.quantum.qubit.IntQubit"]], "intqubitbra (class in sympy.physics.quantum.qubit)": [[185, "sympy.physics.quantum.qubit.IntQubitBra"]], "qubit (class in sympy.physics.quantum.qubit)": [[185, "sympy.physics.quantum.qubit.Qubit"]], "qubitbra (class in sympy.physics.quantum.qubit)": [[185, "sympy.physics.quantum.qubit.QubitBra"]], "matrix_to_density() (in module sympy.physics.quantum.qubit)": [[185, "sympy.physics.quantum.qubit.matrix_to_density"]], "matrix_to_qubit() (in module sympy.physics.quantum.qubit)": [[185, "sympy.physics.quantum.qubit.matrix_to_qubit"]], "measure_all() (in module sympy.physics.quantum.qubit)": [[185, "sympy.physics.quantum.qubit.measure_all"]], "measure_all_oneshot() (in module sympy.physics.quantum.qubit)": [[185, "sympy.physics.quantum.qubit.measure_all_oneshot"]], "measure_partial() (in module sympy.physics.quantum.qubit)": [[185, "sympy.physics.quantum.qubit.measure_partial"]], "measure_partial_oneshot() (in module sympy.physics.quantum.qubit)": [[185, "sympy.physics.quantum.qubit.measure_partial_oneshot"]], "qubit_to_matrix() (in module sympy.physics.quantum.qubit)": [[185, "sympy.physics.quantum.qubit.qubit_to_matrix"]], "sympy.physics.quantum.qubit": [[185, "module-sympy.physics.quantum.qubit"]], "enumerate_states() (in module sympy.physics.quantum.represent)": [[186, "sympy.physics.quantum.represent.enumerate_states"]], "get_basis() (in module sympy.physics.quantum.represent)": [[186, "sympy.physics.quantum.represent.get_basis"]], "integrate_result() (in module sympy.physics.quantum.represent)": [[186, "sympy.physics.quantum.represent.integrate_result"]], "rep_expectation() (in module sympy.physics.quantum.represent)": [[186, "sympy.physics.quantum.represent.rep_expectation"]], "rep_innerproduct() (in module sympy.physics.quantum.represent)": [[186, "sympy.physics.quantum.represent.rep_innerproduct"]], "represent() (in module sympy.physics.quantum.represent)": [[186, "sympy.physics.quantum.represent.represent"]], "sympy.physics.quantum.represent": [[186, "module-sympy.physics.quantum.represent"]], "cmod (class in sympy.physics.quantum.shor)": [[187, "sympy.physics.quantum.shor.CMod"]], "n (sympy.physics.quantum.shor.cmod property)": [[187, "sympy.physics.quantum.shor.CMod.N"]], "a (sympy.physics.quantum.shor.cmod property)": [[187, "sympy.physics.quantum.shor.CMod.a"]], "period_find() (in module sympy.physics.quantum.shor)": [[187, "sympy.physics.quantum.shor.period_find"]], "shor() (in module sympy.physics.quantum.shor)": [[187, "sympy.physics.quantum.shor.shor"]], "sympy.physics.quantum.shor": [[187, "module-sympy.physics.quantum.shor"]], "t (sympy.physics.quantum.shor.cmod property)": [[187, "sympy.physics.quantum.shor.CMod.t"]], "d() (sympy.physics.quantum.spin.rotation class method)": [[188, "sympy.physics.quantum.spin.Rotation.D"], [188, "sympy.physics.quantum.spin.Rotation.d"]], "j2op (class in sympy.physics.quantum.spin)": [[188, "sympy.physics.quantum.spin.J2Op"]], "jxbra (class in sympy.physics.quantum.spin)": [[188, "sympy.physics.quantum.spin.JxBra"]], "jxbracoupled (class in sympy.physics.quantum.spin)": [[188, "sympy.physics.quantum.spin.JxBraCoupled"]], "jxket (class in sympy.physics.quantum.spin)": [[188, "sympy.physics.quantum.spin.JxKet"]], "jxketcoupled (class in sympy.physics.quantum.spin)": [[188, "sympy.physics.quantum.spin.JxKetCoupled"]], "jybra (class in sympy.physics.quantum.spin)": [[188, "sympy.physics.quantum.spin.JyBra"]], "jybracoupled (class in sympy.physics.quantum.spin)": [[188, "sympy.physics.quantum.spin.JyBraCoupled"]], "jyket (class in sympy.physics.quantum.spin)": [[188, "sympy.physics.quantum.spin.JyKet"]], "jyketcoupled (class in sympy.physics.quantum.spin)": [[188, "sympy.physics.quantum.spin.JyKetCoupled"]], "jzbra (class in sympy.physics.quantum.spin)": [[188, "sympy.physics.quantum.spin.JzBra"]], "jzbracoupled (class in sympy.physics.quantum.spin)": [[188, "sympy.physics.quantum.spin.JzBraCoupled"]], "jzket (class in sympy.physics.quantum.spin)": [[188, "sympy.physics.quantum.spin.JzKet"]], "jzketcoupled (class in sympy.physics.quantum.spin)": [[188, "sympy.physics.quantum.spin.JzKetCoupled"]], "jzop (class in sympy.physics.quantum.spin)": [[188, "sympy.physics.quantum.spin.JzOp"]], "rotation (class in sympy.physics.quantum.spin)": [[188, "sympy.physics.quantum.spin.Rotation"]], "wignerd (class in sympy.physics.quantum.spin)": [[188, "sympy.physics.quantum.spin.WignerD"]], "couple() (in module sympy.physics.quantum.spin)": [[188, "sympy.physics.quantum.spin.couple"]], "sympy.physics.quantum.spin": [[188, "module-sympy.physics.quantum.spin"]], "uncouple() (in module sympy.physics.quantum.spin)": [[188, "sympy.physics.quantum.spin.uncouple"]], "bra (class in sympy.physics.quantum.state)": [[189, "sympy.physics.quantum.state.Bra"]], "brabase (class in sympy.physics.quantum.state)": [[189, "sympy.physics.quantum.state.BraBase"]], "ket (class in sympy.physics.quantum.state)": [[189, "sympy.physics.quantum.state.Ket"]], "ketbase (class in sympy.physics.quantum.state)": [[189, "sympy.physics.quantum.state.KetBase"]], "orthogonalbra (class in sympy.physics.quantum.state)": [[189, "sympy.physics.quantum.state.OrthogonalBra"]], "orthogonalket (class in sympy.physics.quantum.state)": [[189, "sympy.physics.quantum.state.OrthogonalKet"]], "orthogonalstate (class in sympy.physics.quantum.state)": [[189, "sympy.physics.quantum.state.OrthogonalState"]], "state (class in sympy.physics.quantum.state)": [[189, "sympy.physics.quantum.state.State"]], "statebase (class in sympy.physics.quantum.state)": [[189, "sympy.physics.quantum.state.StateBase"]], "timedepbra (class in sympy.physics.quantum.state)": [[189, "sympy.physics.quantum.state.TimeDepBra"]], "timedepket (class in sympy.physics.quantum.state)": [[189, "sympy.physics.quantum.state.TimeDepKet"]], "timedepstate (class in sympy.physics.quantum.state)": [[189, "sympy.physics.quantum.state.TimeDepState"]], "wavefunction (class in sympy.physics.quantum.state)": [[189, "sympy.physics.quantum.state.Wavefunction"]], "dual (sympy.physics.quantum.state.statebase property)": [[189, "sympy.physics.quantum.state.StateBase.dual"]], "dual_class() (sympy.physics.quantum.state.statebase class method)": [[189, "sympy.physics.quantum.state.StateBase.dual_class"]], "expr (sympy.physics.quantum.state.wavefunction property)": [[189, "sympy.physics.quantum.state.Wavefunction.expr"]], "is_commutative (sympy.physics.quantum.state.wavefunction property)": [[189, "sympy.physics.quantum.state.Wavefunction.is_commutative"]], "is_normalized (sympy.physics.quantum.state.wavefunction property)": [[189, "sympy.physics.quantum.state.Wavefunction.is_normalized"]], "label (sympy.physics.quantum.state.timedepstate property)": [[189, "sympy.physics.quantum.state.TimeDepState.label"]], "limits (sympy.physics.quantum.state.wavefunction property)": [[189, "sympy.physics.quantum.state.Wavefunction.limits"]], "norm (sympy.physics.quantum.state.wavefunction property)": [[189, "sympy.physics.quantum.state.Wavefunction.norm"]], "normalize() (sympy.physics.quantum.state.wavefunction method)": [[189, "sympy.physics.quantum.state.Wavefunction.normalize"]], "operators (sympy.physics.quantum.state.statebase property)": [[189, "sympy.physics.quantum.state.StateBase.operators"]], "prob() (sympy.physics.quantum.state.wavefunction method)": [[189, "sympy.physics.quantum.state.Wavefunction.prob"]], "sympy.physics.quantum.state": [[189, "module-sympy.physics.quantum.state"]], "time (sympy.physics.quantum.state.timedepstate property)": [[189, "sympy.physics.quantum.state.TimeDepState.time"]], "variables (sympy.physics.quantum.state.wavefunction property)": [[189, "sympy.physics.quantum.state.Wavefunction.variables"]], "tensorproduct (class in sympy.physics.quantum.tensorproduct)": [[190, "sympy.physics.quantum.tensorproduct.TensorProduct"]], "sympy.physics.quantum.tensorproduct": [[190, "module-sympy.physics.quantum.tensorproduct"]], "tensor_product_simp() (in module sympy.physics.quantum.tensorproduct)": [[190, "sympy.physics.quantum.tensorproduct.tensor_product_simp"]], "annihilateboson (class in sympy.physics.secondquant)": [[191, "sympy.physics.secondquant.AnnihilateBoson"]], "annihilatefermion (class in sympy.physics.secondquant)": [[191, "sympy.physics.secondquant.AnnihilateFermion"]], "antisymmetrictensor (class in sympy.physics.secondquant)": [[191, "sympy.physics.secondquant.AntiSymmetricTensor"]], "b (in module sympy.physics.secondquant)": [[191, "sympy.physics.secondquant.B"]], "bbra (in module sympy.physics.secondquant)": [[191, "sympy.physics.secondquant.BBra"]], "bket (in module sympy.physics.secondquant)": [[191, "sympy.physics.secondquant.BKet"]], "bd (in module sympy.physics.secondquant)": [[191, "sympy.physics.secondquant.Bd"]], "bosonicbasis (class in sympy.physics.secondquant)": [[191, "sympy.physics.secondquant.BosonicBasis"]], "commutator (class in sympy.physics.secondquant)": [[191, "sympy.physics.secondquant.Commutator"]], "createboson (class in sympy.physics.secondquant)": [[191, "sympy.physics.secondquant.CreateBoson"]], "createfermion (class in sympy.physics.secondquant)": [[191, "sympy.physics.secondquant.CreateFermion"]], "dagger (class in sympy.physics.secondquant)": [[191, "sympy.physics.secondquant.Dagger"]], "f (in module sympy.physics.secondquant)": [[191, "sympy.physics.secondquant.F"]], "fbra (in module sympy.physics.secondquant)": [[191, "sympy.physics.secondquant.FBra"]], "fket (in module sympy.physics.secondquant)": [[191, "sympy.physics.secondquant.FKet"]], "fd (in module sympy.physics.secondquant)": [[191, "sympy.physics.secondquant.Fd"]], "fixedbosonicbasis (class in sympy.physics.secondquant)": [[191, "sympy.physics.secondquant.FixedBosonicBasis"]], "fockstate (class in sympy.physics.secondquant)": [[191, "sympy.physics.secondquant.FockState"]], "fockstatebosonbra (class in sympy.physics.secondquant)": [[191, "sympy.physics.secondquant.FockStateBosonBra"]], "fockstatebosonket (class in sympy.physics.secondquant)": [[191, "sympy.physics.secondquant.FockStateBosonKet"]], "fockstatebra (class in sympy.physics.secondquant)": [[191, "sympy.physics.secondquant.FockStateBra"]], "fockstatefermionbra (class in sympy.physics.secondquant)": [[191, "sympy.physics.secondquant.FockStateFermionBra"]], "fockstatefermionket (class in sympy.physics.secondquant)": [[191, "sympy.physics.secondquant.FockStateFermionKet"]], "fockstateket (class in sympy.physics.secondquant)": [[191, "sympy.physics.secondquant.FockStateKet"]], "innerproduct (class in sympy.physics.secondquant)": [[191, "sympy.physics.secondquant.InnerProduct"]], "kroneckerdelta (class in sympy.physics.secondquant)": [[191, "sympy.physics.secondquant.KroneckerDelta"]], "no (class in sympy.physics.secondquant)": [[191, "sympy.physics.secondquant.NO"]], "permutationoperator (class in sympy.physics.secondquant)": [[191, "sympy.physics.secondquant.PermutationOperator"]], "varbosonicbasis (class in sympy.physics.secondquant)": [[191, "sympy.physics.secondquant.VarBosonicBasis"]], "apply_operator() (sympy.physics.secondquant.annihilateboson method)": [[191, "sympy.physics.secondquant.AnnihilateBoson.apply_operator"]], "apply_operator() (sympy.physics.secondquant.annihilatefermion method)": [[191, "sympy.physics.secondquant.AnnihilateFermion.apply_operator"]], "apply_operator() (sympy.physics.secondquant.createboson method)": [[191, "sympy.physics.secondquant.CreateBoson.apply_operator"]], "apply_operator() (sympy.physics.secondquant.createfermion method)": [[191, "sympy.physics.secondquant.CreateFermion.apply_operator"]], "apply_operators() (in module sympy.physics.secondquant)": [[191, "sympy.physics.secondquant.apply_operators"]], "bra (sympy.physics.secondquant.innerproduct property)": [[191, "sympy.physics.secondquant.InnerProduct.bra"]], "contraction() (in module sympy.physics.secondquant)": [[191, "sympy.physics.secondquant.contraction"]], "doit() (sympy.physics.secondquant.commutator method)": [[191, "sympy.physics.secondquant.Commutator.doit"]], "doit() (sympy.physics.secondquant.no method)": [[191, "sympy.physics.secondquant.NO.doit"]], "eval() (sympy.physics.secondquant.commutator class method)": [[191, "sympy.physics.secondquant.Commutator.eval"]], "eval() (sympy.physics.secondquant.dagger class method)": [[191, "sympy.physics.secondquant.Dagger.eval"]], "eval() (sympy.physics.secondquant.kroneckerdelta class method)": [[191, "sympy.physics.secondquant.KroneckerDelta.eval"]], "evaluate_deltas() (in module sympy.physics.secondquant)": [[191, "sympy.physics.secondquant.evaluate_deltas"]], "get_permuted() (sympy.physics.secondquant.permutationoperator method)": [[191, "sympy.physics.secondquant.PermutationOperator.get_permuted"]], "get_subno() (sympy.physics.secondquant.no method)": [[191, "sympy.physics.secondquant.NO.get_subNO"]], "has_q_annihilators (sympy.physics.secondquant.no property)": [[191, "sympy.physics.secondquant.NO.has_q_annihilators"]], "has_q_creators (sympy.physics.secondquant.no property)": [[191, "sympy.physics.secondquant.NO.has_q_creators"]], "index() (sympy.physics.secondquant.fixedbosonicbasis method)": [[191, "sympy.physics.secondquant.FixedBosonicBasis.index"]], "index() (sympy.physics.secondquant.varbosonicbasis method)": [[191, "sympy.physics.secondquant.VarBosonicBasis.index"]], "indices_contain_equal_information (sympy.physics.secondquant.kroneckerdelta property)": [[191, "sympy.physics.secondquant.KroneckerDelta.indices_contain_equal_information"]], "is_above_fermi (sympy.physics.secondquant.kroneckerdelta property)": [[191, "sympy.physics.secondquant.KroneckerDelta.is_above_fermi"]], "is_below_fermi (sympy.physics.secondquant.kroneckerdelta property)": [[191, "sympy.physics.secondquant.KroneckerDelta.is_below_fermi"]], "is_only_above_fermi (sympy.physics.secondquant.kroneckerdelta property)": [[191, "sympy.physics.secondquant.KroneckerDelta.is_only_above_fermi"]], "is_only_below_fermi (sympy.physics.secondquant.kroneckerdelta property)": [[191, "sympy.physics.secondquant.KroneckerDelta.is_only_below_fermi"]], "is_only_q_annihilator (sympy.physics.secondquant.annihilatefermion property)": [[191, "sympy.physics.secondquant.AnnihilateFermion.is_only_q_annihilator"]], "is_only_q_annihilator (sympy.physics.secondquant.createfermion property)": [[191, "sympy.physics.secondquant.CreateFermion.is_only_q_annihilator"]], "is_only_q_creator (sympy.physics.secondquant.annihilatefermion property)": [[191, "sympy.physics.secondquant.AnnihilateFermion.is_only_q_creator"]], "is_only_q_creator (sympy.physics.secondquant.createfermion property)": [[191, "sympy.physics.secondquant.CreateFermion.is_only_q_creator"]], "is_q_annihilator (sympy.physics.secondquant.annihilatefermion property)": [[191, "sympy.physics.secondquant.AnnihilateFermion.is_q_annihilator"]], "is_q_annihilator (sympy.physics.secondquant.createfermion property)": [[191, "sympy.physics.secondquant.CreateFermion.is_q_annihilator"]], "is_q_creator (sympy.physics.secondquant.annihilatefermion property)": [[191, "sympy.physics.secondquant.AnnihilateFermion.is_q_creator"]], "is_q_creator (sympy.physics.secondquant.createfermion property)": [[191, "sympy.physics.secondquant.CreateFermion.is_q_creator"]], "iter_q_annihilators() (sympy.physics.secondquant.no method)": [[191, "sympy.physics.secondquant.NO.iter_q_annihilators"]], "iter_q_creators() (sympy.physics.secondquant.no method)": [[191, "sympy.physics.secondquant.NO.iter_q_creators"]], "ket (sympy.physics.secondquant.innerproduct property)": [[191, "sympy.physics.secondquant.InnerProduct.ket"]], "killable_index (sympy.physics.secondquant.kroneckerdelta property)": [[191, "sympy.physics.secondquant.KroneckerDelta.killable_index"]], "lower (sympy.physics.secondquant.antisymmetrictensor property)": [[191, "sympy.physics.secondquant.AntiSymmetricTensor.lower"]], "matrix_rep() (in module sympy.physics.secondquant)": [[191, "sympy.physics.secondquant.matrix_rep"]], "preferred_index (sympy.physics.secondquant.kroneckerdelta property)": [[191, "sympy.physics.secondquant.KroneckerDelta.preferred_index"]], "simplify_index_permutations() (in module sympy.physics.secondquant)": [[191, "sympy.physics.secondquant.simplify_index_permutations"]], "state() (sympy.physics.secondquant.fixedbosonicbasis method)": [[191, "sympy.physics.secondquant.FixedBosonicBasis.state"]], "state() (sympy.physics.secondquant.varbosonicbasis method)": [[191, "sympy.physics.secondquant.VarBosonicBasis.state"]], "substitute_dummies() (in module sympy.physics.secondquant)": [[191, "sympy.physics.secondquant.substitute_dummies"]], "symbol (sympy.physics.secondquant.antisymmetrictensor property)": [[191, "sympy.physics.secondquant.AntiSymmetricTensor.symbol"]], "sympy.physics.secondquant": [[191, "module-sympy.physics.secondquant"]], "upper (sympy.physics.secondquant.antisymmetrictensor property)": [[191, "sympy.physics.secondquant.AntiSymmetricTensor.upper"]], "wicks() (in module sympy.physics.secondquant)": [[191, "sympy.physics.secondquant.wicks"]], "e_nl() (in module sympy.physics.sho)": [[192, "sympy.physics.sho.E_nl"]], "r_nl() (in module sympy.physics.sho)": [[192, "sympy.physics.sho.R_nl"]], "sympy.physics.sho": [[192, "module-sympy.physics.sho"]], "dimension (class in sympy.physics.units.dimensions)": [[193, "sympy.physics.units.dimensions.Dimension"]], "dimensionsystem (class in sympy.physics.units.dimensions)": [[193, "sympy.physics.units.dimensions.DimensionSystem"]], "can_transf_matrix (sympy.physics.units.dimensions.dimensionsystem property)": [[193, "sympy.physics.units.dimensions.DimensionSystem.can_transf_matrix"]], "dim (sympy.physics.units.dimensions.dimensionsystem property)": [[193, "sympy.physics.units.dimensions.DimensionSystem.dim"]], "dim_can_vector() (sympy.physics.units.dimensions.dimensionsystem method)": [[193, "sympy.physics.units.dimensions.DimensionSystem.dim_can_vector"]], "dim_vector() (sympy.physics.units.dimensions.dimensionsystem method)": [[193, "sympy.physics.units.dimensions.DimensionSystem.dim_vector"]], "has_integer_powers() (sympy.physics.units.dimensions.dimension method)": [[193, "sympy.physics.units.dimensions.Dimension.has_integer_powers"]], "inv_can_transf_matrix (sympy.physics.units.dimensions.dimensionsystem property)": [[193, "sympy.physics.units.dimensions.DimensionSystem.inv_can_transf_matrix"]], "is_consistent (sympy.physics.units.dimensions.dimensionsystem property)": [[193, "sympy.physics.units.dimensions.DimensionSystem.is_consistent"]], "is_dimensionless() (sympy.physics.units.dimensions.dimensionsystem method)": [[193, "sympy.physics.units.dimensions.DimensionSystem.is_dimensionless"]], "list_can_dims (sympy.physics.units.dimensions.dimensionsystem property)": [[193, "sympy.physics.units.dimensions.DimensionSystem.list_can_dims"]], "print_dim_base() (sympy.physics.units.dimensions.dimensionsystem method)": [[193, "sympy.physics.units.dimensions.DimensionSystem.print_dim_base"]], "sympy.physics.units.dimensions": [[193, "module-sympy.physics.units.dimensions"]], "prefix (class in sympy.physics.units.prefixes)": [[197, "sympy.physics.units.prefixes.Prefix"]], "sympy.physics.units.prefixes": [[197, "module-sympy.physics.units.prefixes"]], "quantity (class in sympy.physics.units.quantities)": [[198, "sympy.physics.units.quantities.Quantity"]], "abbrev (sympy.physics.units.quantities.quantity property)": [[198, "sympy.physics.units.quantities.Quantity.abbrev"]], "convert_to() (in module sympy.physics.units.util)": [[198, "sympy.physics.units.util.convert_to"]], "convert_to() (sympy.physics.units.quantities.quantity method)": [[198, "sympy.physics.units.quantities.Quantity.convert_to"]], "free_symbols (sympy.physics.units.quantities.quantity property)": [[198, "sympy.physics.units.quantities.Quantity.free_symbols"]], "is_prefixed (sympy.physics.units.quantities.quantity property)": [[198, "sympy.physics.units.quantities.Quantity.is_prefixed"]], "scale_factor (sympy.physics.units.quantities.quantity property)": [[198, "sympy.physics.units.quantities.Quantity.scale_factor"]], "set_global_relative_scale_factor() (sympy.physics.units.quantities.quantity method)": [[198, "sympy.physics.units.quantities.Quantity.set_global_relative_scale_factor"]], "sympy.physics.units.quantities": [[198, "module-sympy.physics.units.quantities"]], "sympy.physics.units.util": [[198, "module-sympy.physics.units.util"]], "unitsystem (class in sympy.physics.units.unitsystem)": [[199, "sympy.physics.units.unitsystem.UnitSystem"]], "dim (sympy.physics.units.unitsystem.unitsystem property)": [[199, "sympy.physics.units.unitsystem.UnitSystem.dim"]], "extend() (sympy.physics.units.unitsystem.unitsystem method)": [[199, "sympy.physics.units.unitsystem.UnitSystem.extend"]], "get_units_non_prefixed() (sympy.physics.units.unitsystem.unitsystem method)": [[199, "sympy.physics.units.unitsystem.UnitSystem.get_units_non_prefixed"]], "is_consistent (sympy.physics.units.unitsystem.unitsystem property)": [[199, "sympy.physics.units.unitsystem.UnitSystem.is_consistent"]], "sympy.physics.units.unitsystem": [[199, "module-sympy.physics.units.unitsystem"]], "coordinatesym (class in sympy.physics.vector.frame)": [[201, "sympy.physics.vector.frame.CoordinateSym"]], "dyadic (class in sympy.physics.vector.dyadic)": [[201, "sympy.physics.vector.dyadic.Dyadic"]], "referenceframe (class in sympy.physics.vector.frame)": [[201, "sympy.physics.vector.frame.ReferenceFrame"]], "vector (class in sympy.physics.vector.vector)": [[201, "sympy.physics.vector.vector.Vector"]], "ang_acc_in() (sympy.physics.vector.frame.referenceframe method)": [[201, "sympy.physics.vector.frame.ReferenceFrame.ang_acc_in"]], "ang_vel_in() (sympy.physics.vector.frame.referenceframe method)": [[201, "sympy.physics.vector.frame.ReferenceFrame.ang_vel_in"]], "angle_between() (sympy.physics.vector.vector.vector method)": [[201, "sympy.physics.vector.vector.Vector.angle_between"]], "applyfunc() (sympy.physics.vector.dyadic.dyadic method)": [[201, "sympy.physics.vector.dyadic.Dyadic.applyfunc"]], "applyfunc() (sympy.physics.vector.vector.vector method)": [[201, "sympy.physics.vector.vector.Vector.applyfunc"]], "cross() (sympy.physics.vector.dyadic.dyadic method)": [[201, "sympy.physics.vector.dyadic.Dyadic.cross"]], "cross() (sympy.physics.vector.vector.vector method)": [[201, "sympy.physics.vector.vector.Vector.cross"]], "dcm() (sympy.physics.vector.frame.referenceframe method)": [[201, "sympy.physics.vector.frame.ReferenceFrame.dcm"]], "diff() (sympy.physics.vector.vector.vector method)": [[201, "sympy.physics.vector.vector.Vector.diff"]], "doit() (sympy.physics.vector.dyadic.dyadic method)": [[201, "sympy.physics.vector.dyadic.Dyadic.doit"]], "doit() (sympy.physics.vector.vector.vector method)": [[201, "sympy.physics.vector.vector.Vector.doit"]], "dot() (sympy.physics.vector.dyadic.dyadic method)": [[201, "sympy.physics.vector.dyadic.Dyadic.dot"]], "dot() (sympy.physics.vector.vector.vector method)": [[201, "sympy.physics.vector.vector.Vector.dot"]], "dt() (sympy.physics.vector.dyadic.dyadic method)": [[201, "sympy.physics.vector.dyadic.Dyadic.dt"]], "dt() (sympy.physics.vector.vector.vector method)": [[201, "sympy.physics.vector.vector.Vector.dt"]], "express() (sympy.physics.vector.dyadic.dyadic method)": [[201, "sympy.physics.vector.dyadic.Dyadic.express"]], "express() (sympy.physics.vector.vector.vector method)": [[201, "sympy.physics.vector.vector.Vector.express"]], "free_dynamicsymbols() (sympy.physics.vector.vector.vector method)": [[201, "sympy.physics.vector.vector.Vector.free_dynamicsymbols"]], "free_symbols() (sympy.physics.vector.vector.vector method)": [[201, "sympy.physics.vector.vector.Vector.free_symbols"]], "func (sympy.physics.vector.dyadic.dyadic property)": [[201, "sympy.physics.vector.dyadic.Dyadic.func"]], "func (sympy.physics.vector.vector.vector property)": [[201, "sympy.physics.vector.vector.Vector.func"]], "magnitude() (sympy.physics.vector.vector.vector method)": [[201, "sympy.physics.vector.vector.Vector.magnitude"]], "normalize() (sympy.physics.vector.vector.vector method)": [[201, "sympy.physics.vector.vector.Vector.normalize"]], "orient() (sympy.physics.vector.frame.referenceframe method)": [[201, "sympy.physics.vector.frame.ReferenceFrame.orient"]], "orient_axis() (sympy.physics.vector.frame.referenceframe method)": [[201, "sympy.physics.vector.frame.ReferenceFrame.orient_axis"]], "orient_body_fixed() (sympy.physics.vector.frame.referenceframe method)": [[201, "sympy.physics.vector.frame.ReferenceFrame.orient_body_fixed"]], "orient_explicit() (sympy.physics.vector.frame.referenceframe method)": [[201, "sympy.physics.vector.frame.ReferenceFrame.orient_explicit"]], "orient_quaternion() (sympy.physics.vector.frame.referenceframe method)": [[201, "sympy.physics.vector.frame.ReferenceFrame.orient_quaternion"]], "orient_space_fixed() (sympy.physics.vector.frame.referenceframe method)": [[201, "sympy.physics.vector.frame.ReferenceFrame.orient_space_fixed"]], "orientnew() (sympy.physics.vector.frame.referenceframe method)": [[201, "sympy.physics.vector.frame.ReferenceFrame.orientnew"]], "outer() (sympy.physics.vector.vector.vector method)": [[201, "sympy.physics.vector.vector.Vector.outer"]], "partial_velocity() (sympy.physics.vector.frame.referenceframe method)": [[201, "sympy.physics.vector.frame.ReferenceFrame.partial_velocity"]], "separate() (sympy.physics.vector.vector.vector method)": [[201, "sympy.physics.vector.vector.Vector.separate"]], "set_ang_acc() (sympy.physics.vector.frame.referenceframe method)": [[201, "sympy.physics.vector.frame.ReferenceFrame.set_ang_acc"]], "set_ang_vel() (sympy.physics.vector.frame.referenceframe method)": [[201, "sympy.physics.vector.frame.ReferenceFrame.set_ang_vel"]], "simplify() (sympy.physics.vector.dyadic.dyadic method)": [[201, "sympy.physics.vector.dyadic.Dyadic.simplify"]], "simplify() (sympy.physics.vector.vector.vector method)": [[201, "sympy.physics.vector.vector.Vector.simplify"]], "subs() (sympy.physics.vector.dyadic.dyadic method)": [[201, "sympy.physics.vector.dyadic.Dyadic.subs"]], "subs() (sympy.physics.vector.vector.vector method)": [[201, "sympy.physics.vector.vector.Vector.subs"]], "to_matrix() (sympy.physics.vector.dyadic.dyadic method)": [[201, "sympy.physics.vector.dyadic.Dyadic.to_matrix"]], "to_matrix() (sympy.physics.vector.vector.vector method)": [[201, "sympy.physics.vector.vector.Vector.to_matrix"]], "u (sympy.physics.vector.frame.referenceframe property)": [[201, "sympy.physics.vector.frame.ReferenceFrame.u"]], "variable_map() (sympy.physics.vector.frame.referenceframe method)": [[201, "sympy.physics.vector.frame.ReferenceFrame.variable_map"]], "x (sympy.physics.vector.frame.referenceframe property)": [[201, "sympy.physics.vector.frame.ReferenceFrame.x"]], "xreplace() (sympy.physics.vector.dyadic.dyadic method)": [[201, "sympy.physics.vector.dyadic.Dyadic.xreplace"]], "xreplace() (sympy.physics.vector.vector.vector method)": [[201, "sympy.physics.vector.vector.Vector.xreplace"]], "xx (sympy.physics.vector.frame.referenceframe property)": [[201, "sympy.physics.vector.frame.ReferenceFrame.xx"]], "xy (sympy.physics.vector.frame.referenceframe property)": [[201, "sympy.physics.vector.frame.ReferenceFrame.xy"]], "xz (sympy.physics.vector.frame.referenceframe property)": [[201, "sympy.physics.vector.frame.ReferenceFrame.xz"]], "y (sympy.physics.vector.frame.referenceframe property)": [[201, "sympy.physics.vector.frame.ReferenceFrame.y"]], "yx (sympy.physics.vector.frame.referenceframe property)": [[201, "sympy.physics.vector.frame.ReferenceFrame.yx"]], "yy (sympy.physics.vector.frame.referenceframe property)": [[201, "sympy.physics.vector.frame.ReferenceFrame.yy"]], "yz (sympy.physics.vector.frame.referenceframe property)": [[201, "sympy.physics.vector.frame.ReferenceFrame.yz"]], "z (sympy.physics.vector.frame.referenceframe property)": [[201, "sympy.physics.vector.frame.ReferenceFrame.z"]], "zx (sympy.physics.vector.frame.referenceframe property)": [[201, "sympy.physics.vector.frame.ReferenceFrame.zx"]], "zy (sympy.physics.vector.frame.referenceframe property)": [[201, "sympy.physics.vector.frame.ReferenceFrame.zy"]], "zz (sympy.physics.vector.frame.referenceframe property)": [[201, "sympy.physics.vector.frame.ReferenceFrame.zz"]], "curl() (in module sympy.physics.vector.fieldfunctions)": [[202, "sympy.physics.vector.fieldfunctions.curl"]], "divergence() (in module sympy.physics.vector.fieldfunctions)": [[202, "sympy.physics.vector.fieldfunctions.divergence"]], "gradient() (in module sympy.physics.vector.fieldfunctions)": [[202, "sympy.physics.vector.fieldfunctions.gradient"]], "is_conservative() (in module sympy.physics.vector.fieldfunctions)": [[202, "sympy.physics.vector.fieldfunctions.is_conservative"]], "is_solenoidal() (in module sympy.physics.vector.fieldfunctions)": [[202, "sympy.physics.vector.fieldfunctions.is_solenoidal"]], "scalar_potential() (in module sympy.physics.vector.fieldfunctions)": [[202, "sympy.physics.vector.fieldfunctions.scalar_potential"]], "scalar_potential_difference() (in module sympy.physics.vector.fieldfunctions)": [[202, "sympy.physics.vector.fieldfunctions.scalar_potential_difference"]], "cross() (in module sympy.physics.vector.functions)": [[203, "sympy.physics.vector.functions.cross"]], "dot() (in module sympy.physics.vector.functions)": [[203, "sympy.physics.vector.functions.dot"]], "dynamicsymbols() (in module sympy.physics.vector)": [[203, "sympy.physics.vector.dynamicsymbols"]], "express() (in module sympy.physics.vector.functions)": [[203, "sympy.physics.vector.functions.express"]], "outer() (in module sympy.physics.vector.functions)": [[203, "sympy.physics.vector.functions.outer"]], "time_derivative() (in module sympy.physics.vector.functions)": [[203, "sympy.physics.vector.functions.time_derivative"]], "point (class in sympy.physics.vector.point)": [[205, "sympy.physics.vector.point.Point"]], "a1pt_theory() (sympy.physics.vector.point.point method)": [[205, "sympy.physics.vector.point.Point.a1pt_theory"]], "a2pt_theory() (sympy.physics.vector.point.point method)": [[205, "sympy.physics.vector.point.Point.a2pt_theory"]], "acc() (sympy.physics.vector.point.point method)": [[205, "sympy.physics.vector.point.Point.acc"]], "get_motion_params() (in module sympy.physics.vector.functions)": [[205, "sympy.physics.vector.functions.get_motion_params"]], "kinematic_equations() (in module sympy.physics.vector.functions)": [[205, "sympy.physics.vector.functions.kinematic_equations"]], "locatenew() (sympy.physics.vector.point.point method)": [[205, "sympy.physics.vector.point.Point.locatenew"]], "partial_velocity() (in module sympy.physics.vector.functions)": [[205, "sympy.physics.vector.functions.partial_velocity"]], "partial_velocity() (sympy.physics.vector.point.point method)": [[205, "sympy.physics.vector.point.Point.partial_velocity"]], "pos_from() (sympy.physics.vector.point.point method)": [[205, "sympy.physics.vector.point.Point.pos_from"]], "set_acc() (sympy.physics.vector.point.point method)": [[205, "sympy.physics.vector.point.Point.set_acc"]], "set_pos() (sympy.physics.vector.point.point method)": [[205, "sympy.physics.vector.point.Point.set_pos"]], "set_vel() (sympy.physics.vector.point.point method)": [[205, "sympy.physics.vector.point.Point.set_vel"]], "sympy.physics.vector.functions": [[205, "module-sympy.physics.vector.functions"]], "sympy.physics.vector.point": [[205, "module-sympy.physics.vector.point"]], "v1pt_theory() (sympy.physics.vector.point.point method)": [[205, "sympy.physics.vector.point.Point.v1pt_theory"]], "v2pt_theory() (sympy.physics.vector.point.point method)": [[205, "sympy.physics.vector.point.Point.v2pt_theory"]], "vel() (sympy.physics.vector.point.point method)": [[205, "sympy.physics.vector.point.Point.vel"]], "init_vprinting() (in module sympy.physics.vector.printing)": [[206, "sympy.physics.vector.printing.init_vprinting"]], "vlatex() (in module sympy.physics.vector.printing)": [[206, "sympy.physics.vector.printing.vlatex"]], "vpprint() (in module sympy.physics.vector.printing)": [[206, "sympy.physics.vector.printing.vpprint"]], "vprint() (in module sympy.physics.vector.printing)": [[206, "sympy.physics.vector.printing.vprint"]], "sympy.physics.vector": [[208, "module-sympy.physics.vector"]], "clebsch_gordan() (in module sympy.physics.wigner)": [[211, "sympy.physics.wigner.clebsch_gordan"]], "dot_rot_grad_ynm() (in module sympy.physics.wigner)": [[211, "sympy.physics.wigner.dot_rot_grad_Ynm"]], "gaunt() (in module sympy.physics.wigner)": [[211, "sympy.physics.wigner.gaunt"]], "racah() (in module sympy.physics.wigner)": [[211, "sympy.physics.wigner.racah"]], "real_gaunt() (in module sympy.physics.wigner)": [[211, "sympy.physics.wigner.real_gaunt"]], "sympy.physics.wigner": [[211, "module-sympy.physics.wigner"]], "wigner_3j() (in module sympy.physics.wigner)": [[211, "sympy.physics.wigner.wigner_3j"]], "wigner_6j() (in module sympy.physics.wigner)": [[211, "sympy.physics.wigner.wigner_6j"]], "wigner_9j() (in module sympy.physics.wigner)": [[211, "sympy.physics.wigner.wigner_9j"]], "wigner_d() (in module sympy.physics.wigner)": [[211, "sympy.physics.wigner.wigner_d"]], "wigner_d_small() (in module sympy.physics.wigner)": [[211, "sympy.physics.wigner.wigner_d_small"]], "baseseries (class in sympy.plotting.series)": [[212, "sympy.plotting.series.BaseSeries"]], "implicitseries (class in sympy.plotting.series)": [[212, "sympy.plotting.series.ImplicitSeries"]], "line2dbaseseries (class in sympy.plotting.series)": [[212, "sympy.plotting.series.Line2DBaseSeries"]], "line3dbaseseries (class in sympy.plotting.series)": [[212, "sympy.plotting.series.Line3DBaseSeries"]], "lineover1drangeseries (class in sympy.plotting.series)": [[212, "sympy.plotting.series.LineOver1DRangeSeries"]], "matplotlibbackend (class in sympy.plotting.plot)": [[212, "sympy.plotting.plot.MatplotlibBackend"]], "parametric2dlineseries (class in sympy.plotting.series)": [[212, "sympy.plotting.series.Parametric2DLineSeries"]], "parametric3dlineseries (class in sympy.plotting.series)": [[212, "sympy.plotting.series.Parametric3DLineSeries"]], "parametricsurfaceseries (class in sympy.plotting.series)": [[212, "sympy.plotting.series.ParametricSurfaceSeries"]], "plot (class in sympy.plotting.plot)": [[212, "sympy.plotting.plot.Plot"]], "plotgrid (class in sympy.plotting.plot)": [[212, "sympy.plotting.plot.PlotGrid"]], "surfacebaseseries (class in sympy.plotting.series)": [[212, "sympy.plotting.series.SurfaceBaseSeries"]], "surfaceover2drangeseries (class in sympy.plotting.series)": [[212, "sympy.plotting.series.SurfaceOver2DRangeSeries"]], "textbackend (class in sympy.plotting.plot)": [[212, "sympy.plotting.plot.TextBackend"]], "annotations (sympy.plotting.plot.plot property)": [[212, "sympy.plotting.plot.Plot.annotations"]], "append() (sympy.plotting.plot.plot method)": [[212, "sympy.plotting.plot.Plot.append"]], "eval_color_func() (sympy.plotting.series.baseseries method)": [[212, "sympy.plotting.series.BaseSeries.eval_color_func"]], "expr (sympy.plotting.series.baseseries property)": [[212, "sympy.plotting.series.BaseSeries.expr"]], "extend() (sympy.plotting.plot.plot method)": [[212, "sympy.plotting.plot.Plot.extend"]], "fill (sympy.plotting.plot.plot property)": [[212, "sympy.plotting.plot.Plot.fill"]], "get_data() (sympy.plotting.series.baseseries method)": [[212, "sympy.plotting.series.BaseSeries.get_data"]], "get_data() (sympy.plotting.series.implicitseries method)": [[212, "sympy.plotting.series.ImplicitSeries.get_data"]], "get_data() (sympy.plotting.series.line2dbaseseries method)": [[212, "sympy.plotting.series.Line2DBaseSeries.get_data"]], "get_data() (sympy.plotting.series.parametricsurfaceseries method)": [[212, "sympy.plotting.series.ParametricSurfaceSeries.get_data"]], "get_data() (sympy.plotting.series.surfaceover2drangeseries method)": [[212, "sympy.plotting.series.SurfaceOver2DRangeSeries.get_data"]], "get_label() (sympy.plotting.series.baseseries method)": [[212, "sympy.plotting.series.BaseSeries.get_label"]], "get_label() (sympy.plotting.series.implicitseries method)": [[212, "sympy.plotting.series.ImplicitSeries.get_label"]], "get_meshes() (sympy.plotting.series.parametricsurfaceseries method)": [[212, "sympy.plotting.series.ParametricSurfaceSeries.get_meshes"]], "get_meshes() (sympy.plotting.series.surfaceover2drangeseries method)": [[212, "sympy.plotting.series.SurfaceOver2DRangeSeries.get_meshes"]], "get_points() (sympy.plotting.series.lineover1drangeseries method)": [[212, "sympy.plotting.series.LineOver1DRangeSeries.get_points"]], "get_segments() (sympy.plotting.plot.matplotlibbackend static method)": [[212, "sympy.plotting.plot.MatplotlibBackend.get_segments"]], "markers (sympy.plotting.plot.plot property)": [[212, "sympy.plotting.plot.Plot.markers"]], "n (sympy.plotting.series.baseseries property)": [[212, "sympy.plotting.series.BaseSeries.n"]], "params (sympy.plotting.series.baseseries property)": [[212, "sympy.plotting.series.BaseSeries.params"]], "plot() (in module sympy.plotting.plot)": [[212, "sympy.plotting.plot.plot"]], "plot3d() (in module sympy.plotting.plot)": [[212, "sympy.plotting.plot.plot3d"]], "plot3d_parametric_line() (in module sympy.plotting.plot)": [[212, "sympy.plotting.plot.plot3d_parametric_line"]], "plot3d_parametric_surface() (in module sympy.plotting.plot)": [[212, "sympy.plotting.plot.plot3d_parametric_surface"]], "plot_implicit() (in module sympy.plotting.plot_implicit)": [[212, "sympy.plotting.plot_implicit.plot_implicit"]], "plot_parametric() (in module sympy.plotting.plot)": [[212, "sympy.plotting.plot.plot_parametric"]], "process_series() (sympy.plotting.plot.matplotlibbackend method)": [[212, "sympy.plotting.plot.MatplotlibBackend.process_series"]], "rectangles (sympy.plotting.plot.plot property)": [[212, "sympy.plotting.plot.Plot.rectangles"]], "sympy.plotting.plot": [[212, "module-sympy.plotting.plot"]], "sympy.plotting.pygletplot": [[212, "module-sympy.plotting.pygletplot"]], "textplot() (in module sympy.plotting.textplot)": [[212, "sympy.plotting.textplot.textplot"]], "extensionelement (class in sympy.polys.agca.extensions)": [[213, "sympy.polys.agca.extensions.ExtensionElement"]], "freemodule (class in sympy.polys.agca.modules)": [[213, "sympy.polys.agca.modules.FreeModule"]], "freemoduleelement (class in sympy.polys.agca.modules)": [[213, "sympy.polys.agca.modules.FreeModuleElement"]], "ideal (class in sympy.polys.agca.ideals)": [[213, "sympy.polys.agca.ideals.Ideal"]], "module (class in sympy.polys.agca.modules)": [[213, "sympy.polys.agca.modules.Module"]], "modulehomomorphism (class in sympy.polys.agca.homomorphisms)": [[213, "sympy.polys.agca.homomorphisms.ModuleHomomorphism"]], "monogenicfiniteextension (class in sympy.polys.agca.extensions)": [[213, "sympy.polys.agca.extensions.MonogenicFiniteExtension"]], "quotientmodule (class in sympy.polys.agca.modules)": [[213, "sympy.polys.agca.modules.QuotientModule"]], "quotientmoduleelement (class in sympy.polys.agca.modules)": [[213, "sympy.polys.agca.modules.QuotientModuleElement"]], "submodule (class in sympy.polys.agca.modules)": [[213, "sympy.polys.agca.modules.SubModule"]], "subquotientmodule (class in sympy.polys.agca.modules)": [[213, "sympy.polys.agca.modules.SubQuotientModule"]], "basis() (sympy.polys.agca.modules.freemodule method)": [[213, "sympy.polys.agca.modules.FreeModule.basis"]], "contains() (sympy.polys.agca.ideals.ideal method)": [[213, "sympy.polys.agca.ideals.Ideal.contains"]], "contains() (sympy.polys.agca.modules.module method)": [[213, "sympy.polys.agca.modules.Module.contains"]], "convert() (sympy.polys.agca.modules.freemodule method)": [[213, "sympy.polys.agca.modules.FreeModule.convert"]], "convert() (sympy.polys.agca.modules.module method)": [[213, "sympy.polys.agca.modules.Module.convert"]], "convert() (sympy.polys.agca.modules.quotientmodule method)": [[213, "sympy.polys.agca.modules.QuotientModule.convert"]], "convert() (sympy.polys.agca.modules.submodule method)": [[213, "sympy.polys.agca.modules.SubModule.convert"]], "depth() (sympy.polys.agca.ideals.ideal method)": [[213, "sympy.polys.agca.ideals.Ideal.depth"]], "dtype (sympy.polys.agca.extensions.monogenicfiniteextension attribute)": [[213, "sympy.polys.agca.extensions.MonogenicFiniteExtension.dtype"]], "dtype (sympy.polys.agca.modules.freemodule attribute)": [[213, "sympy.polys.agca.modules.FreeModule.dtype"]], "dtype (sympy.polys.agca.modules.quotientmodule attribute)": [[213, "sympy.polys.agca.modules.QuotientModule.dtype"]], "eq() (sympy.polys.agca.modules.quotientmoduleelement method)": [[213, "sympy.polys.agca.modules.QuotientModuleElement.eq"]], "height() (sympy.polys.agca.ideals.ideal method)": [[213, "sympy.polys.agca.ideals.Ideal.height"]], "homomorphism() (in module sympy.polys.agca.homomorphisms)": [[213, "sympy.polys.agca.homomorphisms.homomorphism"]], "identity_hom() (sympy.polys.agca.modules.freemodule method)": [[213, "sympy.polys.agca.modules.FreeModule.identity_hom"]], "identity_hom() (sympy.polys.agca.modules.module method)": [[213, "sympy.polys.agca.modules.Module.identity_hom"]], "identity_hom() (sympy.polys.agca.modules.quotientmodule method)": [[213, "sympy.polys.agca.modules.QuotientModule.identity_hom"]], "identity_hom() (sympy.polys.agca.modules.submodule method)": [[213, "sympy.polys.agca.modules.SubModule.identity_hom"]], "image() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[213, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.image"]], "in_terms_of_generators() (sympy.polys.agca.modules.submodule method)": [[213, "sympy.polys.agca.modules.SubModule.in_terms_of_generators"]], "inclusion_hom() (sympy.polys.agca.modules.submodule method)": [[213, "sympy.polys.agca.modules.SubModule.inclusion_hom"]], "intersect() (sympy.polys.agca.ideals.ideal method)": [[213, "sympy.polys.agca.ideals.Ideal.intersect"]], "intersect() (sympy.polys.agca.modules.submodule method)": [[213, "sympy.polys.agca.modules.SubModule.intersect"]], "inverse() (sympy.polys.agca.extensions.extensionelement method)": [[213, "sympy.polys.agca.extensions.ExtensionElement.inverse"]], "is_full_module() (sympy.polys.agca.modules.submodule method)": [[213, "sympy.polys.agca.modules.SubModule.is_full_module"]], "is_full_module() (sympy.polys.agca.modules.subquotientmodule method)": [[213, "sympy.polys.agca.modules.SubQuotientModule.is_full_module"]], "is_injective() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[213, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.is_injective"]], "is_isomorphism() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[213, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.is_isomorphism"]], "is_maximal() (sympy.polys.agca.ideals.ideal method)": [[213, "sympy.polys.agca.ideals.Ideal.is_maximal"]], "is_primary() (sympy.polys.agca.ideals.ideal method)": [[213, "sympy.polys.agca.ideals.Ideal.is_primary"]], "is_prime() (sympy.polys.agca.ideals.ideal method)": [[213, "sympy.polys.agca.ideals.Ideal.is_prime"]], "is_principal() (sympy.polys.agca.ideals.ideal method)": [[213, "sympy.polys.agca.ideals.Ideal.is_principal"]], "is_radical() (sympy.polys.agca.ideals.ideal method)": [[213, "sympy.polys.agca.ideals.Ideal.is_radical"]], "is_submodule() (sympy.polys.agca.modules.freemodule method)": [[213, "sympy.polys.agca.modules.FreeModule.is_submodule"]], "is_submodule() (sympy.polys.agca.modules.module method)": [[213, "sympy.polys.agca.modules.Module.is_submodule"]], "is_submodule() (sympy.polys.agca.modules.quotientmodule method)": [[213, "sympy.polys.agca.modules.QuotientModule.is_submodule"]], "is_submodule() (sympy.polys.agca.modules.submodule method)": [[213, "sympy.polys.agca.modules.SubModule.is_submodule"]], "is_surjective() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[213, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.is_surjective"]], "is_whole_ring() (sympy.polys.agca.ideals.ideal method)": [[213, "sympy.polys.agca.ideals.Ideal.is_whole_ring"]], "is_zero() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[213, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.is_zero"]], "is_zero() (sympy.polys.agca.ideals.ideal method)": [[213, "sympy.polys.agca.ideals.Ideal.is_zero"]], "is_zero() (sympy.polys.agca.modules.freemodule method)": [[213, "sympy.polys.agca.modules.FreeModule.is_zero"]], "is_zero() (sympy.polys.agca.modules.module method)": [[213, "sympy.polys.agca.modules.Module.is_zero"]], "is_zero() (sympy.polys.agca.modules.quotientmodule method)": [[213, "sympy.polys.agca.modules.QuotientModule.is_zero"]], "is_zero() (sympy.polys.agca.modules.submodule method)": [[213, "sympy.polys.agca.modules.SubModule.is_zero"]], "kernel() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[213, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.kernel"]], "module_quotient() (sympy.polys.agca.modules.submodule method)": [[213, "sympy.polys.agca.modules.SubModule.module_quotient"]], "multiply_ideal() (sympy.polys.agca.modules.freemodule method)": [[213, "sympy.polys.agca.modules.FreeModule.multiply_ideal"]], "multiply_ideal() (sympy.polys.agca.modules.module method)": [[213, "sympy.polys.agca.modules.Module.multiply_ideal"]], "multiply_ideal() (sympy.polys.agca.modules.submodule method)": [[213, "sympy.polys.agca.modules.SubModule.multiply_ideal"]], "product() (sympy.polys.agca.ideals.ideal method)": [[213, "sympy.polys.agca.ideals.Ideal.product"]], "quotient() (sympy.polys.agca.ideals.ideal method)": [[213, "sympy.polys.agca.ideals.Ideal.quotient"]], "quotient_codomain() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[213, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.quotient_codomain"]], "quotient_domain() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[213, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.quotient_domain"]], "quotient_hom() (sympy.polys.agca.modules.quotientmodule method)": [[213, "sympy.polys.agca.modules.QuotientModule.quotient_hom"]], "quotient_hom() (sympy.polys.agca.modules.subquotientmodule method)": [[213, "sympy.polys.agca.modules.SubQuotientModule.quotient_hom"]], "quotient_module() (sympy.polys.agca.modules.freemodule method)": [[213, "sympy.polys.agca.modules.FreeModule.quotient_module"]], "quotient_module() (sympy.polys.agca.modules.module method)": [[213, "sympy.polys.agca.modules.Module.quotient_module"]], "quotient_module() (sympy.polys.agca.modules.submodule method)": [[213, "sympy.polys.agca.modules.SubModule.quotient_module"]], "radical() (sympy.polys.agca.ideals.ideal method)": [[213, "sympy.polys.agca.ideals.Ideal.radical"]], "reduce_element() (sympy.polys.agca.ideals.ideal method)": [[213, "sympy.polys.agca.ideals.Ideal.reduce_element"]], "reduce_element() (sympy.polys.agca.modules.submodule method)": [[213, "sympy.polys.agca.modules.SubModule.reduce_element"]], "restrict_codomain() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[213, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.restrict_codomain"]], "restrict_domain() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[213, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.restrict_domain"]], "saturate() (sympy.polys.agca.ideals.ideal method)": [[213, "sympy.polys.agca.ideals.Ideal.saturate"]], "submodule() (sympy.polys.agca.modules.module method)": [[213, "sympy.polys.agca.modules.Module.submodule"]], "submodule() (sympy.polys.agca.modules.quotientmodule method)": [[213, "sympy.polys.agca.modules.QuotientModule.submodule"]], "submodule() (sympy.polys.agca.modules.submodule method)": [[213, "sympy.polys.agca.modules.SubModule.submodule"]], "subset() (sympy.polys.agca.ideals.ideal method)": [[213, "sympy.polys.agca.ideals.Ideal.subset"]], "subset() (sympy.polys.agca.modules.module method)": [[213, "sympy.polys.agca.modules.Module.subset"]], "syzygy_module() (sympy.polys.agca.modules.submodule method)": [[213, "sympy.polys.agca.modules.SubModule.syzygy_module"]], "union() (sympy.polys.agca.ideals.ideal method)": [[213, "sympy.polys.agca.ideals.Ideal.union"]], "union() (sympy.polys.agca.modules.submodule method)": [[213, "sympy.polys.agca.modules.SubModule.union"]], "ddm (class in sympy.polys.matrices.ddm)": [[215, "sympy.polys.matrices.ddm.DDM"]], "dfm (class in sympy.polys.matrices._dfm)": [[215, "sympy.polys.matrices._dfm.DFM"]], "dm() (in module sympy.polys.matrices.domainmatrix)": [[215, "sympy.polys.matrices.domainmatrix.DM"]], "domainmatrix (class in sympy.polys.matrices.domainmatrix)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix"]], "r (class in sympy.polys.matrices.dense)": [[215, "sympy.polys.matrices.dense.R"]], "ringelement (class in sympy.polys.matrices._typing)": [[215, "sympy.polys.matrices._typing.RingElement"]], "sdm (class in sympy.polys.matrices.sdm)": [[215, "sympy.polys.matrices.sdm.SDM"]], "t (class in sympy.polys.matrices.dense)": [[215, "sympy.polys.matrices.dense.T"]], "add() (sympy.polys.matrices._dfm.dfm method)": [[215, "sympy.polys.matrices._dfm.DFM.add"]], "add() (sympy.polys.matrices.ddm.ddm method)": [[215, "sympy.polys.matrices.ddm.DDM.add"]], "add() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.add"]], "add() (sympy.polys.matrices.sdm.sdm method)": [[215, "sympy.polys.matrices.sdm.SDM.add"]], "adj_det() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.adj_det"]], "adj_poly_det() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.adj_poly_det"]], "adjugate() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.adjugate"]], "applyfunc() (sympy.polys.matrices._dfm.dfm method)": [[215, "sympy.polys.matrices._dfm.DFM.applyfunc"]], "cancel_denom() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.cancel_denom"]], "cancel_denom_elementwise() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.cancel_denom_elementwise"]], "charpoly() (sympy.polys.matrices._dfm.dfm method)": [[215, "sympy.polys.matrices._dfm.DFM.charpoly"]], "charpoly() (sympy.polys.matrices.ddm.ddm method)": [[215, "sympy.polys.matrices.ddm.DDM.charpoly"]], "charpoly() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly"]], "charpoly() (sympy.polys.matrices.sdm.sdm method)": [[215, "sympy.polys.matrices.sdm.SDM.charpoly"]], "charpoly_base() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly_base"]], "charpoly_berk() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly_berk"]], "charpoly_factor_blocks() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly_factor_blocks"]], "charpoly_factor_list() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly_factor_list"]], "choose_domain() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.choose_domain"]], "clear_denoms() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.clear_denoms"]], "columnspace() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.columnspace"]], "content() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.content"]], "convert_to() (sympy.polys.matrices._dfm.dfm method)": [[215, "sympy.polys.matrices._dfm.DFM.convert_to"]], "convert_to() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.convert_to"]], "convert_to() (sympy.polys.matrices.sdm.sdm method)": [[215, "sympy.polys.matrices.sdm.SDM.convert_to"]], "copy() (sympy.polys.matrices._dfm.dfm method)": [[215, "sympy.polys.matrices._dfm.DFM.copy"]], "copy() (sympy.polys.matrices.sdm.sdm method)": [[215, "sympy.polys.matrices.sdm.SDM.copy"]], "ddm_berk() (in module sympy.polys.matrices.dense)": [[215, "sympy.polys.matrices.dense.ddm_berk"]], "ddm_iadd() (in module sympy.polys.matrices.dense)": [[215, "sympy.polys.matrices.dense.ddm_iadd"]], "ddm_idet() (in module sympy.polys.matrices.dense)": [[215, "sympy.polys.matrices.dense.ddm_idet"]], "ddm_iinv() (in module sympy.polys.matrices.dense)": [[215, "sympy.polys.matrices.dense.ddm_iinv"]], "ddm_ilu() (in module sympy.polys.matrices.dense)": [[215, "sympy.polys.matrices.dense.ddm_ilu"]], "ddm_ilu_solve() (in module sympy.polys.matrices.dense)": [[215, "sympy.polys.matrices.dense.ddm_ilu_solve"]], "ddm_ilu_split() (in module sympy.polys.matrices.dense)": [[215, "sympy.polys.matrices.dense.ddm_ilu_split"]], "ddm_imatmul() (in module sympy.polys.matrices.dense)": [[215, "sympy.polys.matrices.dense.ddm_imatmul"]], "ddm_imul() (in module sympy.polys.matrices.dense)": [[215, "sympy.polys.matrices.dense.ddm_imul"]], "ddm_ineg() (in module sympy.polys.matrices.dense)": [[215, "sympy.polys.matrices.dense.ddm_ineg"]], "ddm_irmul() (in module sympy.polys.matrices.dense)": [[215, "sympy.polys.matrices.dense.ddm_irmul"]], "ddm_irref() (in module sympy.polys.matrices.dense)": [[215, "sympy.polys.matrices.dense.ddm_irref"]], "ddm_irref_den() (in module sympy.polys.matrices.dense)": [[215, "sympy.polys.matrices.dense.ddm_irref_den"]], "ddm_isub() (in module sympy.polys.matrices.dense)": [[215, "sympy.polys.matrices.dense.ddm_isub"]], "ddm_transpose() (in module sympy.polys.matrices.dense)": [[215, "sympy.polys.matrices.dense.ddm_transpose"]], "det() (sympy.polys.matrices._dfm.dfm method)": [[215, "sympy.polys.matrices._dfm.DFM.det"]], "det() (sympy.polys.matrices.ddm.ddm method)": [[215, "sympy.polys.matrices.ddm.DDM.det"]], "det() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.det"]], "det() (sympy.polys.matrices.sdm.sdm method)": [[215, "sympy.polys.matrices.sdm.SDM.det"]], "diag() (sympy.polys.matrices._dfm.dfm class method)": [[215, "sympy.polys.matrices._dfm.DFM.diag"]], "diag() (sympy.polys.matrices.ddm.ddm class method)": [[215, "sympy.polys.matrices.ddm.DDM.diag"]], "diag() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.diag"]], "diagonal() (sympy.polys.matrices._dfm.dfm method)": [[215, "sympy.polys.matrices._dfm.DFM.diagonal"]], "diagonal() (sympy.polys.matrices.ddm.ddm method)": [[215, "sympy.polys.matrices.ddm.DDM.diagonal"]], "diagonal() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.diagonal"]], "diagonal() (sympy.polys.matrices.sdm.sdm method)": [[215, "sympy.polys.matrices.sdm.SDM.diagonal"]], "eval_poly() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.eval_poly"]], "eval_poly_mul() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.eval_poly_mul"]], "extract() (sympy.polys.matrices._dfm.dfm method)": [[215, "sympy.polys.matrices._dfm.DFM.extract"]], "extract_slice() (sympy.polys.matrices._dfm.dfm method)": [[215, "sympy.polys.matrices._dfm.DFM.extract_slice"]], "eye() (sympy.polys.matrices._dfm.dfm class method)": [[215, "sympy.polys.matrices._dfm.DFM.eye"]], "eye() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.eye"]], "eye() (sympy.polys.matrices.sdm.sdm class method)": [[215, "sympy.polys.matrices.sdm.SDM.eye"]], "from_matrix() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_Matrix"]], "from_ddm() (sympy.polys.matrices._dfm.dfm class method)": [[215, "sympy.polys.matrices._dfm.DFM.from_ddm"]], "from_ddm() (sympy.polys.matrices.sdm.sdm class method)": [[215, "sympy.polys.matrices.sdm.SDM.from_ddm"]], "from_dict_sympy() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_dict_sympy"]], "from_dok() (sympy.polys.matrices.ddm.ddm class method)": [[215, "sympy.polys.matrices.ddm.DDM.from_dok"]], "from_dok() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_dok"]], "from_dok() (sympy.polys.matrices.sdm.sdm class method)": [[215, "sympy.polys.matrices.sdm.SDM.from_dok"]], "from_flat_nz() (sympy.polys.matrices._dfm.dfm class method)": [[215, "sympy.polys.matrices._dfm.DFM.from_flat_nz"]], "from_flat_nz() (sympy.polys.matrices.ddm.ddm class method)": [[215, "sympy.polys.matrices.ddm.DDM.from_flat_nz"]], "from_flat_nz() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_flat_nz"]], "from_flat_nz() (sympy.polys.matrices.sdm.sdm class method)": [[215, "sympy.polys.matrices.sdm.SDM.from_flat_nz"]], "from_list() (sympy.polys.matrices._dfm.dfm class method)": [[215, "sympy.polys.matrices._dfm.DFM.from_list"]], "from_list() (sympy.polys.matrices.ddm.ddm class method)": [[215, "sympy.polys.matrices.ddm.DDM.from_list"]], "from_list() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_list"]], "from_list() (sympy.polys.matrices.sdm.sdm class method)": [[215, "sympy.polys.matrices.sdm.SDM.from_list"]], "from_list_flat() (sympy.polys.matrices._dfm.dfm class method)": [[215, "sympy.polys.matrices._dfm.DFM.from_list_flat"]], "from_list_flat() (sympy.polys.matrices.ddm.ddm class method)": [[215, "sympy.polys.matrices.ddm.DDM.from_list_flat"]], "from_list_flat() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_list_flat"]], "from_list_flat() (sympy.polys.matrices.sdm.sdm class method)": [[215, "sympy.polys.matrices.sdm.SDM.from_list_flat"]], "from_list_sympy() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_list_sympy"]], "from_rep() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_rep"]], "getitem() (sympy.polys.matrices._dfm.dfm method)": [[215, "sympy.polys.matrices._dfm.DFM.getitem"]], "hermite_normal_form() (in module sympy.polys.matrices.normalforms)": [[215, "sympy.polys.matrices.normalforms.hermite_normal_form"]], "hstack() (sympy.polys.matrices._dfm.dfm method)": [[215, "sympy.polys.matrices._dfm.DFM.hstack"]], "hstack() (sympy.polys.matrices.ddm.ddm method)": [[215, "sympy.polys.matrices.ddm.DDM.hstack"]], "hstack() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.hstack"]], "hstack() (sympy.polys.matrices.sdm.sdm method)": [[215, "sympy.polys.matrices.sdm.SDM.hstack"]], "inv() (sympy.polys.matrices._dfm.dfm method)": [[215, "sympy.polys.matrices._dfm.DFM.inv"]], "inv() (sympy.polys.matrices.ddm.ddm method)": [[215, "sympy.polys.matrices.ddm.DDM.inv"]], "inv() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.inv"]], "inv() (sympy.polys.matrices.sdm.sdm method)": [[215, "sympy.polys.matrices.sdm.SDM.inv"]], "inv_den() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.inv_den"]], "is_diagonal (sympy.polys.matrices.domainmatrix.domainmatrix property)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.is_diagonal"]], "is_diagonal() (sympy.polys.matrices._dfm.dfm method)": [[215, "sympy.polys.matrices._dfm.DFM.is_diagonal"]], "is_diagonal() (sympy.polys.matrices.ddm.ddm method)": [[215, "sympy.polys.matrices.ddm.DDM.is_diagonal"]], "is_diagonal() (sympy.polys.matrices.sdm.sdm method)": [[215, "sympy.polys.matrices.sdm.SDM.is_diagonal"]], "is_lower (sympy.polys.matrices.domainmatrix.domainmatrix property)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.is_lower"]], "is_lower() (sympy.polys.matrices._dfm.dfm method)": [[215, "sympy.polys.matrices._dfm.DFM.is_lower"]], "is_lower() (sympy.polys.matrices.ddm.ddm method)": [[215, "sympy.polys.matrices.ddm.DDM.is_lower"]], "is_lower() (sympy.polys.matrices.sdm.sdm method)": [[215, "sympy.polys.matrices.sdm.SDM.is_lower"]], "is_square (sympy.polys.matrices.domainmatrix.domainmatrix property)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.is_square"]], "is_upper (sympy.polys.matrices.domainmatrix.domainmatrix property)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.is_upper"]], "is_upper() (sympy.polys.matrices._dfm.dfm method)": [[215, "sympy.polys.matrices._dfm.DFM.is_upper"]], "is_upper() (sympy.polys.matrices.ddm.ddm method)": [[215, "sympy.polys.matrices.ddm.DDM.is_upper"]], "is_upper() (sympy.polys.matrices.sdm.sdm method)": [[215, "sympy.polys.matrices.sdm.SDM.is_upper"]], "is_zero_matrix() (sympy.polys.matrices._dfm.dfm method)": [[215, "sympy.polys.matrices._dfm.DFM.is_zero_matrix"]], "is_zero_matrix() (sympy.polys.matrices.ddm.ddm method)": [[215, "sympy.polys.matrices.ddm.DDM.is_zero_matrix"]], "is_zero_matrix() (sympy.polys.matrices.sdm.sdm method)": [[215, "sympy.polys.matrices.sdm.SDM.is_zero_matrix"]], "lll() (sympy.polys.matrices._dfm.dfm method)": [[215, "sympy.polys.matrices._dfm.DFM.lll"]], "lll() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.lll"]], "lll() (sympy.polys.matrices.sdm.sdm method)": [[215, "sympy.polys.matrices.sdm.SDM.lll"]], "lll_transform() (sympy.polys.matrices._dfm.dfm method)": [[215, "sympy.polys.matrices._dfm.DFM.lll_transform"]], "lll_transform() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.lll_transform"]], "lll_transform() (sympy.polys.matrices.sdm.sdm method)": [[215, "sympy.polys.matrices.sdm.SDM.lll_transform"]], "lu() (sympy.polys.matrices._dfm.dfm method)": [[215, "sympy.polys.matrices._dfm.DFM.lu"]], "lu() (sympy.polys.matrices.ddm.ddm method)": [[215, "sympy.polys.matrices.ddm.DDM.lu"]], "lu() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.lu"]], "lu() (sympy.polys.matrices.sdm.sdm method)": [[215, "sympy.polys.matrices.sdm.SDM.lu"]], "lu_solve() (sympy.polys.matrices._dfm.dfm method)": [[215, "sympy.polys.matrices._dfm.DFM.lu_solve"]], "lu_solve() (sympy.polys.matrices.ddm.ddm method)": [[215, "sympy.polys.matrices.ddm.DDM.lu_solve"]], "lu_solve() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.lu_solve"]], "lu_solve() (sympy.polys.matrices.sdm.sdm method)": [[215, "sympy.polys.matrices.sdm.SDM.lu_solve"]], "matmul() (sympy.polys.matrices._dfm.dfm method)": [[215, "sympy.polys.matrices._dfm.DFM.matmul"]], "matmul() (sympy.polys.matrices.ddm.ddm method)": [[215, "sympy.polys.matrices.ddm.DDM.matmul"]], "matmul() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.matmul"]], "matmul() (sympy.polys.matrices.sdm.sdm method)": [[215, "sympy.polys.matrices.sdm.SDM.matmul"]], "mul() (sympy.polys.matrices._dfm.dfm method)": [[215, "sympy.polys.matrices._dfm.DFM.mul"]], "mul() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.mul"]], "mul() (sympy.polys.matrices.sdm.sdm method)": [[215, "sympy.polys.matrices.sdm.SDM.mul"]], "mul_elementwise() (sympy.polys.matrices._dfm.dfm method)": [[215, "sympy.polys.matrices._dfm.DFM.mul_elementwise"]], "neg() (sympy.polys.matrices._dfm.dfm method)": [[215, "sympy.polys.matrices._dfm.DFM.neg"]], "neg() (sympy.polys.matrices.ddm.ddm method)": [[215, "sympy.polys.matrices.ddm.DDM.neg"]], "neg() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.neg"]], "neg() (sympy.polys.matrices.sdm.sdm method)": [[215, "sympy.polys.matrices.sdm.SDM.neg"]], "new() (sympy.polys.matrices.sdm.sdm class method)": [[215, "sympy.polys.matrices.sdm.SDM.new"]], "nnz() (sympy.polys.matrices._dfm.dfm method)": [[215, "sympy.polys.matrices._dfm.DFM.nnz"]], "nnz() (sympy.polys.matrices.ddm.ddm method)": [[215, "sympy.polys.matrices.ddm.DDM.nnz"]], "nnz() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.nnz"]], "nnz() (sympy.polys.matrices.sdm.sdm method)": [[215, "sympy.polys.matrices.sdm.SDM.nnz"]], "nullspace() (sympy.polys.matrices._dfm.dfm method)": [[215, "sympy.polys.matrices._dfm.DFM.nullspace"]], "nullspace() (sympy.polys.matrices.ddm.ddm method)": [[215, "sympy.polys.matrices.ddm.DDM.nullspace"]], "nullspace() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.nullspace"]], "nullspace() (sympy.polys.matrices.sdm.sdm method)": [[215, "sympy.polys.matrices.sdm.SDM.nullspace"]], "nullspace_from_rref() (sympy.polys.matrices._dfm.dfm method)": [[215, "sympy.polys.matrices._dfm.DFM.nullspace_from_rref"]], "nullspace_from_rref() (sympy.polys.matrices.ddm.ddm method)": [[215, "sympy.polys.matrices.ddm.DDM.nullspace_from_rref"]], "nullspace_from_rref() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.nullspace_from_rref"]], "nullspace_from_rref() (sympy.polys.matrices.sdm.sdm method)": [[215, "sympy.polys.matrices.sdm.SDM.nullspace_from_rref"]], "ones() (sympy.polys.matrices._dfm.dfm class method)": [[215, "sympy.polys.matrices._dfm.DFM.ones"]], "ones() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.ones"]], "particular() (sympy.polys.matrices._dfm.dfm method)": [[215, "sympy.polys.matrices._dfm.DFM.particular"]], "pow() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.pow"]], "primitive() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.primitive"]], "rmul() (sympy.polys.matrices._dfm.dfm method)": [[215, "sympy.polys.matrices._dfm.DFM.rmul"]], "rowspace() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.rowspace"]], "rref() (sympy.polys.matrices.ddm.ddm method)": [[215, "sympy.polys.matrices.ddm.DDM.rref"]], "rref() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.rref"]], "rref() (sympy.polys.matrices.sdm.sdm method)": [[215, "sympy.polys.matrices.sdm.SDM.rref"]], "rref_den() (sympy.polys.matrices.ddm.ddm method)": [[215, "sympy.polys.matrices.ddm.DDM.rref_den"]], "rref_den() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.rref_den"]], "rref_den() (sympy.polys.matrices.sdm.sdm method)": [[215, "sympy.polys.matrices.sdm.SDM.rref_den"]], "scc() (sympy.polys.matrices._dfm.dfm method)": [[215, "sympy.polys.matrices._dfm.DFM.scc"]], "scc() (sympy.polys.matrices.ddm.ddm method)": [[215, "sympy.polys.matrices.ddm.DDM.scc"]], "scc() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.scc"]], "scc() (sympy.polys.matrices.sdm.sdm method)": [[215, "sympy.polys.matrices.sdm.SDM.scc"]], "sdm_berk() (in module sympy.polys.matrices.sdm)": [[215, "sympy.polys.matrices.sdm.sdm_berk"]], "sdm_irref() (in module sympy.polys.matrices.sdm)": [[215, "sympy.polys.matrices.sdm.sdm_irref"]], "sdm_nullspace_from_rref() (in module sympy.polys.matrices.sdm)": [[215, "sympy.polys.matrices.sdm.sdm_nullspace_from_rref"]], "sdm_particular_from_rref() (in module sympy.polys.matrices.sdm)": [[215, "sympy.polys.matrices.sdm.sdm_particular_from_rref"]], "sdm_rref_den() (in module sympy.polys.matrices.sdm)": [[215, "sympy.polys.matrices.sdm.sdm_rref_den"]], "setitem() (sympy.polys.matrices._dfm.dfm method)": [[215, "sympy.polys.matrices._dfm.DFM.setitem"]], "smith_normal_form() (in module sympy.polys.matrices.normalforms)": [[215, "sympy.polys.matrices.normalforms.smith_normal_form"]], "solve_den() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.solve_den"]], "solve_den_charpoly() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.solve_den_charpoly"]], "solve_den_rref() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.solve_den_rref"]], "sub() (sympy.polys.matrices._dfm.dfm method)": [[215, "sympy.polys.matrices._dfm.DFM.sub"]], "sub() (sympy.polys.matrices.ddm.ddm method)": [[215, "sympy.polys.matrices.ddm.DDM.sub"]], "sub() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.sub"]], "sub() (sympy.polys.matrices.sdm.sdm method)": [[215, "sympy.polys.matrices.sdm.SDM.sub"]], "sympy.polys.matrices._dfm": [[215, "module-sympy.polys.matrices._dfm"]], "sympy.polys.matrices._typing": [[215, "module-sympy.polys.matrices._typing"]], "sympy.polys.matrices.ddm": [[215, "module-sympy.polys.matrices.ddm"]], "sympy.polys.matrices.dense": [[215, "module-sympy.polys.matrices.dense"]], "sympy.polys.matrices.domainmatrix": [[215, "module-sympy.polys.matrices.domainmatrix"]], "sympy.polys.matrices.sdm": [[215, "module-sympy.polys.matrices.sdm"]], "to_matrix() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_Matrix"]], "to_ddm() (sympy.polys.matrices._dfm.dfm method)": [[215, "sympy.polys.matrices._dfm.DFM.to_ddm"]], "to_ddm() (sympy.polys.matrices.ddm.ddm method)": [[215, "sympy.polys.matrices.ddm.DDM.to_ddm"]], "to_ddm() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_ddm"]], "to_ddm() (sympy.polys.matrices.sdm.sdm method)": [[215, "sympy.polys.matrices.sdm.SDM.to_ddm"]], "to_dense() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_dense"]], "to_dfm() (sympy.polys.matrices._dfm.dfm method)": [[215, "sympy.polys.matrices._dfm.DFM.to_dfm"]], "to_dfm() (sympy.polys.matrices.ddm.ddm method)": [[215, "sympy.polys.matrices.ddm.DDM.to_dfm"]], "to_dfm() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_dfm"]], "to_dfm() (sympy.polys.matrices.sdm.sdm method)": [[215, "sympy.polys.matrices.sdm.SDM.to_dfm"]], "to_dfm_or_ddm() (sympy.polys.matrices._dfm.dfm method)": [[215, "sympy.polys.matrices._dfm.DFM.to_dfm_or_ddm"]], "to_dfm_or_ddm() (sympy.polys.matrices.ddm.ddm method)": [[215, "sympy.polys.matrices.ddm.DDM.to_dfm_or_ddm"]], "to_dfm_or_ddm() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_dfm_or_ddm"]], "to_dfm_or_ddm() (sympy.polys.matrices.sdm.sdm method)": [[215, "sympy.polys.matrices.sdm.SDM.to_dfm_or_ddm"]], "to_dok() (sympy.polys.matrices._dfm.dfm method)": [[215, "sympy.polys.matrices._dfm.DFM.to_dok"]], "to_dok() (sympy.polys.matrices.ddm.ddm method)": [[215, "sympy.polys.matrices.ddm.DDM.to_dok"]], "to_dok() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_dok"]], "to_dok() (sympy.polys.matrices.sdm.sdm method)": [[215, "sympy.polys.matrices.sdm.SDM.to_dok"]], "to_field() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_field"]], "to_flat_nz() (sympy.polys.matrices._dfm.dfm method)": [[215, "sympy.polys.matrices._dfm.DFM.to_flat_nz"]], "to_flat_nz() (sympy.polys.matrices.ddm.ddm method)": [[215, "sympy.polys.matrices.ddm.DDM.to_flat_nz"]], "to_flat_nz() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_flat_nz"]], "to_flat_nz() (sympy.polys.matrices.sdm.sdm method)": [[215, "sympy.polys.matrices.sdm.SDM.to_flat_nz"]], "to_list() (sympy.polys.matrices._dfm.dfm method)": [[215, "sympy.polys.matrices._dfm.DFM.to_list"]], "to_list() (sympy.polys.matrices.ddm.ddm method)": [[215, "sympy.polys.matrices.ddm.DDM.to_list"]], "to_list() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_list"]], "to_list() (sympy.polys.matrices.sdm.sdm method)": [[215, "sympy.polys.matrices.sdm.SDM.to_list"]], "to_list_flat() (sympy.polys.matrices._dfm.dfm method)": [[215, "sympy.polys.matrices._dfm.DFM.to_list_flat"]], "to_list_flat() (sympy.polys.matrices.ddm.ddm method)": [[215, "sympy.polys.matrices.ddm.DDM.to_list_flat"]], "to_list_flat() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_list_flat"]], "to_list_flat() (sympy.polys.matrices.sdm.sdm method)": [[215, "sympy.polys.matrices.sdm.SDM.to_list_flat"]], "to_sdm() (sympy.polys.matrices._dfm.dfm method)": [[215, "sympy.polys.matrices._dfm.DFM.to_sdm"]], "to_sdm() (sympy.polys.matrices.ddm.ddm method)": [[215, "sympy.polys.matrices.ddm.DDM.to_sdm"]], "to_sdm() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_sdm"]], "to_sdm() (sympy.polys.matrices.sdm.sdm method)": [[215, "sympy.polys.matrices.sdm.SDM.to_sdm"]], "to_sparse() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_sparse"]], "transpose() (sympy.polys.matrices._dfm.dfm method)": [[215, "sympy.polys.matrices._dfm.DFM.transpose"]], "transpose() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.transpose"]], "transpose() (sympy.polys.matrices.sdm.sdm method)": [[215, "sympy.polys.matrices.sdm.SDM.transpose"]], "unify() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.unify"]], "vstack() (sympy.polys.matrices._dfm.dfm method)": [[215, "sympy.polys.matrices._dfm.DFM.vstack"]], "vstack() (sympy.polys.matrices.ddm.ddm method)": [[215, "sympy.polys.matrices.ddm.DDM.vstack"]], "vstack() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.vstack"]], "vstack() (sympy.polys.matrices.sdm.sdm method)": [[215, "sympy.polys.matrices.sdm.SDM.vstack"]], "zeros() (sympy.polys.matrices._dfm.dfm class method)": [[215, "sympy.polys.matrices._dfm.DFM.zeros"]], "zeros() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[215, "sympy.polys.matrices.domainmatrix.DomainMatrix.zeros"]], "zeros() (sympy.polys.matrices.sdm.sdm class method)": [[215, "sympy.polys.matrices.sdm.SDM.zeros"]], "anp (class in sympy.polys.polyclasses)": [[217, "sympy.polys.polyclasses.ANP"]], "algebraicfield (class in sympy.polys.domains)": [[217, "sympy.polys.domains.AlgebraicField"]], "complexelement (class in sympy.polys.domains.mpelements)": [[217, "sympy.polys.domains.mpelements.ComplexElement"]], "complexfield (class in sympy.polys.domains)": [[217, "sympy.polys.domains.ComplexField"]], "compositedomain (class in sympy.polys.domains.compositedomain)": [[217, "sympy.polys.domains.compositedomain.CompositeDomain"]], "dmf (class in sympy.polys.polyclasses)": [[217, "sympy.polys.polyclasses.DMF"]], "dmp (class in sympy.polys.polyclasses)": [[217, "sympy.polys.polyclasses.DMP"]], "domain (class in sympy.polys.domains.domain)": [[217, "sympy.polys.domains.domain.Domain"]], "domainelement (class in sympy.polys.domains.domainelement)": [[217, "sympy.polys.domains.domainelement.DomainElement"]], "expressiondomain (class in sympy.polys.domains)": [[217, "sympy.polys.domains.ExpressionDomain"]], "expressiondomain.expression (class in sympy.polys.domains)": [[217, "sympy.polys.domains.ExpressionDomain.Expression"]], "expressiondomain.expression (class in sympy.polys.domains.expressiondomain)": [[217, "sympy.polys.domains.expressiondomain.ExpressionDomain.Expression"]], "field (class in sympy.polys.domains.field)": [[217, "sympy.polys.domains.field.Field"]], "finitefield (class in sympy.polys.domains)": [[217, "sympy.polys.domains.FiniteField"]], "fracelement (class in sympy.polys.fields)": [[217, "sympy.polys.fields.FracElement"]], "fracfield (class in sympy.polys.fields)": [[217, "sympy.polys.fields.FracField"]], "fractionfield (class in sympy.polys.domains)": [[217, "sympy.polys.domains.FractionField"]], "gmpyfinitefield (class in sympy.polys.domains)": [[217, "sympy.polys.domains.GMPYFiniteField"]], "gmpyintegerring (class in sympy.polys.domains)": [[217, "sympy.polys.domains.GMPYIntegerRing"]], "gmpyrationalfield (class in sympy.polys.domains)": [[217, "sympy.polys.domains.GMPYRationalField"]], "gaussiandomain (class in sympy.polys.domains.gaussiandomains)": [[217, "sympy.polys.domains.gaussiandomains.GaussianDomain"]], "gaussianelement (class in sympy.polys.domains.gaussiandomains)": [[217, "sympy.polys.domains.gaussiandomains.GaussianElement"]], "gaussianinteger (class in sympy.polys.domains.gaussiandomains)": [[217, "sympy.polys.domains.gaussiandomains.GaussianInteger"]], "gaussianintegerring (class in sympy.polys.domains.gaussiandomains)": [[217, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing"]], "gaussianrational (class in sympy.polys.domains.gaussiandomains)": [[217, "sympy.polys.domains.gaussiandomains.GaussianRational"]], "gaussianrationalfield (class in sympy.polys.domains.gaussiandomains)": [[217, "sympy.polys.domains.gaussiandomains.GaussianRationalField"]], "integerring (class in sympy.polys.domains)": [[217, "sympy.polys.domains.IntegerRing"]], "lc() (sympy.polys.polyclasses.anp method)": [[217, "sympy.polys.polyclasses.ANP.LC"]], "lc() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.LC"]], "polyelement (class in sympy.polys.rings)": [[217, "sympy.polys.rings.PolyElement"]], "polyring (class in sympy.polys.rings)": [[217, "sympy.polys.rings.PolyRing"]], "polynomialring (class in sympy.polys.domains)": [[217, "sympy.polys.domains.PolynomialRing"]], "pythonfinitefield (class in sympy.polys.domains)": [[217, "sympy.polys.domains.PythonFiniteField"]], "pythonintegerring (class in sympy.polys.domains)": [[217, "sympy.polys.domains.PythonIntegerRing"]], "pythonmpq (class in sympy.external.pythonmpq)": [[217, "sympy.external.pythonmpq.PythonMPQ"]], "pythonrationalfield (class in sympy.polys.domains)": [[217, "sympy.polys.domains.PythonRationalField"]], "quotientring (class in sympy.polys.domains.quotientring)": [[217, "sympy.polys.domains.quotientring.QuotientRing"]], "rationalfield (class in sympy.polys.domains)": [[217, "sympy.polys.domains.RationalField"]], "realelement (class in sympy.polys.domains.mpelements)": [[217, "sympy.polys.domains.mpelements.RealElement"]], "realfield (class in sympy.polys.domains)": [[217, "sympy.polys.domains.RealField"]], "ring (class in sympy.polys.domains.ring)": [[217, "sympy.polys.domains.ring.Ring"]], "simpledomain (class in sympy.polys.domains.simpledomain)": [[217, "sympy.polys.domains.simpledomain.SimpleDomain"]], "tc() (sympy.polys.polyclasses.anp method)": [[217, "sympy.polys.polyclasses.ANP.TC"]], "tc() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.TC"]], "abs() (sympy.polys.domains.domain.domain method)": [[217, "sympy.polys.domains.domain.Domain.abs"]], "abs() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.abs"]], "add() (sympy.polys.domains.domain.domain method)": [[217, "sympy.polys.domains.domain.Domain.add"]], "add() (sympy.polys.polyclasses.dmf method)": [[217, "sympy.polys.polyclasses.DMF.add"]], "add() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.add"]], "add() (sympy.polys.rings.polyring method)": [[217, "sympy.polys.rings.PolyRing.add"]], "add_gens() (sympy.polys.rings.polyring method)": [[217, "sympy.polys.rings.PolyRing.add_gens"]], "add_ground() (sympy.polys.polyclasses.anp method)": [[217, "sympy.polys.polyclasses.ANP.add_ground"]], "add_ground() (sympy.polys.polyclasses.dmf method)": [[217, "sympy.polys.polyclasses.DMF.add_ground"]], "add_ground() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.add_ground"]], "alg_field_from_poly() (sympy.polys.domains.domain.domain method)": [[217, "sympy.polys.domains.domain.Domain.alg_field_from_poly"]], "algebraic_field() (sympy.polys.domains.algebraicfield method)": [[217, "sympy.polys.domains.AlgebraicField.algebraic_field"]], "algebraic_field() (sympy.polys.domains.integerring method)": [[217, "sympy.polys.domains.IntegerRing.algebraic_field"]], "algebraic_field() (sympy.polys.domains.rationalfield method)": [[217, "sympy.polys.domains.RationalField.algebraic_field"]], "algebraic_field() (sympy.polys.domains.domain.domain method)": [[217, "sympy.polys.domains.domain.Domain.algebraic_field"]], "all_coeffs() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.all_coeffs"]], "all_monoms() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.all_monoms"]], "all_terms() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.all_terms"]], "almosteq() (sympy.polys.domains.complexfield method)": [[217, "sympy.polys.domains.ComplexField.almosteq"]], "almosteq() (sympy.polys.domains.realfield method)": [[217, "sympy.polys.domains.RealField.almosteq"]], "almosteq() (sympy.polys.domains.domain.domain method)": [[217, "sympy.polys.domains.domain.Domain.almosteq"]], "almosteq() (sympy.polys.rings.polyelement method)": [[217, "sympy.polys.rings.PolyElement.almosteq"]], "as_algebraicfield() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[217, "sympy.polys.domains.gaussiandomains.GaussianRationalField.as_AlgebraicField"]], "cancel() (sympy.polys.polyclasses.dmf method)": [[217, "sympy.polys.polyclasses.DMF.cancel"]], "cancel() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.cancel"]], "cancel() (sympy.polys.rings.polyelement method)": [[217, "sympy.polys.rings.PolyElement.cancel"]], "cauchy_lower_bound() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.cauchy_lower_bound"]], "cauchy_upper_bound() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.cauchy_upper_bound"]], "characteristic() (sympy.polys.domains.finitefield method)": [[217, "sympy.polys.domains.FiniteField.characteristic"]], "characteristic() (sympy.polys.domains.domain.domain method)": [[217, "sympy.polys.domains.domain.Domain.characteristic"]], "clear_denoms() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.clear_denoms"]], "coeff() (sympy.polys.rings.polyelement method)": [[217, "sympy.polys.rings.PolyElement.coeff"]], "coeff_wrt() (sympy.polys.rings.polyelement method)": [[217, "sympy.polys.rings.PolyElement.coeff_wrt"]], "coeffs() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.coeffs"]], "coeffs() (sympy.polys.rings.polyelement method)": [[217, "sympy.polys.rings.PolyElement.coeffs"]], "cofactors() (sympy.polys.domains.domain.domain method)": [[217, "sympy.polys.domains.domain.Domain.cofactors"]], "cofactors() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.cofactors"]], "compose() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.compose"]], "compose() (sympy.polys.rings.polyring method)": [[217, "sympy.polys.rings.PolyRing.compose"]], "const() (sympy.polys.rings.polyelement method)": [[217, "sympy.polys.rings.PolyElement.const"]], "content() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.content"]], "content() (sympy.polys.rings.polyelement method)": [[217, "sympy.polys.rings.PolyElement.content"]], "convert() (sympy.polys.domains.domain.domain method)": [[217, "sympy.polys.domains.domain.Domain.convert"]], "convert() (sympy.polys.polyclasses.anp method)": [[217, "sympy.polys.polyclasses.ANP.convert"]], "convert() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.convert"]], "convert_from() (sympy.polys.domains.domain.domain method)": [[217, "sympy.polys.domains.domain.Domain.convert_from"]], "copy() (sympy.polys.rings.polyelement method)": [[217, "sympy.polys.rings.PolyElement.copy"]], "count_complex_roots() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.count_complex_roots"]], "count_real_roots() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.count_real_roots"]], "cyclotomic_field() (sympy.polys.domains.domain.domain method)": [[217, "sympy.polys.domains.domain.Domain.cyclotomic_field"]], "decompose() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.decompose"]], "deflate() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.deflate"]], "degree() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.degree"]], "degree() (sympy.polys.rings.polyelement method)": [[217, "sympy.polys.rings.PolyElement.degree"]], "degree_list() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.degree_list"]], "degrees() (sympy.polys.rings.polyelement method)": [[217, "sympy.polys.rings.PolyElement.degrees"]], "denom() (sympy.polys.domains.algebraicfield method)": [[217, "sympy.polys.domains.AlgebraicField.denom"]], "denom() (sympy.polys.domains.expressiondomain method)": [[217, "sympy.polys.domains.ExpressionDomain.denom"]], "denom() (sympy.polys.domains.fractionfield method)": [[217, "sympy.polys.domains.FractionField.denom"]], "denom() (sympy.polys.domains.gmpyrationalfield method)": [[217, "sympy.polys.domains.GMPYRationalField.denom"]], "denom() (sympy.polys.domains.rationalfield method)": [[217, "sympy.polys.domains.RationalField.denom"]], "denom() (sympy.polys.domains.domain.domain method)": [[217, "sympy.polys.domains.domain.Domain.denom"]], "denom() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[217, "sympy.polys.domains.gaussiandomains.GaussianRationalField.denom"]], "denom() (sympy.polys.domains.ring.ring method)": [[217, "sympy.polys.domains.ring.Ring.denom"]], "denom() (sympy.polys.polyclasses.dmf method)": [[217, "sympy.polys.polyclasses.DMF.denom"]], "diff() (sympy.polys.fields.fracelement method)": [[217, "sympy.polys.fields.FracElement.diff"]], "diff() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.diff"]], "diff() (sympy.polys.rings.polyelement method)": [[217, "sympy.polys.rings.PolyElement.diff"]], "discriminant() (sympy.polys.domains.algebraicfield method)": [[217, "sympy.polys.domains.AlgebraicField.discriminant"]], "discriminant() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.discriminant"]], "div() (sympy.polys.domains.gmpyrationalfield method)": [[217, "sympy.polys.domains.GMPYRationalField.div"]], "div() (sympy.polys.domains.rationalfield method)": [[217, "sympy.polys.domains.RationalField.div"]], "div() (sympy.polys.domains.domain.domain method)": [[217, "sympy.polys.domains.domain.Domain.div"]], "div() (sympy.polys.domains.field.field method)": [[217, "sympy.polys.domains.field.Field.div"]], "div() (sympy.polys.domains.ring.ring method)": [[217, "sympy.polys.domains.ring.Ring.div"]], "div() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.div"]], "div() (sympy.polys.rings.polyelement method)": [[217, "sympy.polys.rings.PolyElement.div"]], "drop() (sympy.polys.domains.compositedomain.compositedomain method)": [[217, "sympy.polys.domains.compositedomain.CompositeDomain.drop"]], "drop() (sympy.polys.domains.domain.domain method)": [[217, "sympy.polys.domains.domain.Domain.drop"]], "drop() (sympy.polys.rings.polyring method)": [[217, "sympy.polys.rings.PolyRing.drop"]], "drop_to_ground() (sympy.polys.rings.polyring method)": [[217, "sympy.polys.rings.PolyRing.drop_to_ground"]], "dtype (sympy.polys.domains.algebraicfield attribute)": [[217, "sympy.polys.domains.AlgebraicField.dtype"]], "dtype (sympy.polys.domains.expressiondomain attribute)": [[217, "sympy.polys.domains.ExpressionDomain.dtype"]], "dtype (sympy.polys.domains.domain.domain attribute)": [[217, "sympy.polys.domains.domain.Domain.dtype"]], "dtype (sympy.polys.domains.gaussiandomains.gaussianintegerring attribute)": [[217, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.dtype"]], "dtype (sympy.polys.domains.gaussiandomains.gaussianrationalfield attribute)": [[217, "sympy.polys.domains.gaussiandomains.GaussianRationalField.dtype"]], "eject() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.eject"]], "eval() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.eval"]], "evalf() (sympy.polys.domains.domain.domain method)": [[217, "sympy.polys.domains.domain.Domain.evalf"]], "exclude() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.exclude"]], "exquo() (sympy.polys.domains.gmpyrationalfield method)": [[217, "sympy.polys.domains.GMPYRationalField.exquo"]], "exquo() (sympy.polys.domains.rationalfield method)": [[217, "sympy.polys.domains.RationalField.exquo"]], "exquo() (sympy.polys.domains.domain.domain method)": [[217, "sympy.polys.domains.domain.Domain.exquo"]], "exquo() (sympy.polys.domains.field.field method)": [[217, "sympy.polys.domains.field.Field.exquo"]], "exquo() (sympy.polys.domains.ring.ring method)": [[217, "sympy.polys.domains.ring.Ring.exquo"]], "exquo() (sympy.polys.polyclasses.dmf method)": [[217, "sympy.polys.polyclasses.DMF.exquo"]], "exquo() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.exquo"]], "exquo_ground() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.exquo_ground"]], "exsqrt() (sympy.polys.domains.complexfield method)": [[217, "sympy.polys.domains.ComplexField.exsqrt"]], "exsqrt() (sympy.polys.domains.finitefield method)": [[217, "sympy.polys.domains.FiniteField.exsqrt"]], "exsqrt() (sympy.polys.domains.integerring method)": [[217, "sympy.polys.domains.IntegerRing.exsqrt"]], "exsqrt() (sympy.polys.domains.rationalfield method)": [[217, "sympy.polys.domains.RationalField.exsqrt"]], "exsqrt() (sympy.polys.domains.realfield method)": [[217, "sympy.polys.domains.RealField.exsqrt"]], "exsqrt() (sympy.polys.domains.domain.domain method)": [[217, "sympy.polys.domains.domain.Domain.exsqrt"]], "ext (sympy.polys.domains.algebraicfield attribute)": [[217, "sympy.polys.domains.AlgebraicField.ext"]], "factor_list() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.factor_list"]], "factor_list_include() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.factor_list_include"]], "factorial() (sympy.polys.domains.fractionfield method)": [[217, "sympy.polys.domains.FractionField.factorial"]], "factorial() (sympy.polys.domains.gmpyintegerring method)": [[217, "sympy.polys.domains.GMPYIntegerRing.factorial"]], "factorial() (sympy.polys.domains.gmpyrationalfield method)": [[217, "sympy.polys.domains.GMPYRationalField.factorial"]], "factorial() (sympy.polys.domains.integerring method)": [[217, "sympy.polys.domains.IntegerRing.factorial"]], "factorial() (sympy.polys.domains.polynomialring method)": [[217, "sympy.polys.domains.PolynomialRing.factorial"]], "field() (in module sympy.polys.fields)": [[217, "sympy.polys.fields.field"]], "frac_field() (sympy.polys.domains.domain.domain method)": [[217, "sympy.polys.domains.domain.Domain.frac_field"]], "frac_unify() (sympy.polys.polyclasses.dmf method)": [[217, "sympy.polys.polyclasses.DMF.frac_unify"]], "free_module() (sympy.polys.domains.ring.ring method)": [[217, "sympy.polys.domains.ring.Ring.free_module"]], "from_algebraicfield() (sympy.polys.domains.algebraicfield method)": [[217, "sympy.polys.domains.AlgebraicField.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.fractionfield method)": [[217, "sympy.polys.domains.FractionField.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.integerring method)": [[217, "sympy.polys.domains.IntegerRing.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.polynomialring method)": [[217, "sympy.polys.domains.PolynomialRing.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.rationalfield method)": [[217, "sympy.polys.domains.RationalField.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.domain.domain method)": [[217, "sympy.polys.domains.domain.Domain.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[217, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_AlgebraicField"]], "from_complexfield() (sympy.polys.domains.fractionfield method)": [[217, "sympy.polys.domains.FractionField.from_ComplexField"]], "from_complexfield() (sympy.polys.domains.polynomialring method)": [[217, "sympy.polys.domains.PolynomialRing.from_ComplexField"]], "from_complexfield() (sympy.polys.domains.domain.domain method)": [[217, "sympy.polys.domains.domain.Domain.from_ComplexField"]], "from_expressiondomain() (sympy.polys.domains.expressiondomain method)": [[217, "sympy.polys.domains.ExpressionDomain.from_ExpressionDomain"]], "from_expressiondomain() (sympy.polys.domains.domain.domain method)": [[217, "sympy.polys.domains.domain.Domain.from_ExpressionDomain"]], "from_expressionrawdomain() (sympy.polys.domains.domain.domain method)": [[217, "sympy.polys.domains.domain.Domain.from_ExpressionRawDomain"]], "from_ff() (sympy.polys.domains.finitefield method)": [[217, "sympy.polys.domains.FiniteField.from_FF"]], "from_ff() (sympy.polys.domains.integerring method)": [[217, "sympy.polys.domains.IntegerRing.from_FF"]], "from_ff() (sympy.polys.domains.domain.domain method)": [[217, "sympy.polys.domains.domain.Domain.from_FF"]], "from_ff_gmpy() (sympy.polys.domains.finitefield method)": [[217, "sympy.polys.domains.FiniteField.from_FF_gmpy"]], "from_ff_gmpy() (sympy.polys.domains.gmpyintegerring method)": [[217, "sympy.polys.domains.GMPYIntegerRing.from_FF_gmpy"]], "from_ff_gmpy() (sympy.polys.domains.integerring method)": [[217, "sympy.polys.domains.IntegerRing.from_FF_gmpy"]], "from_ff_gmpy() (sympy.polys.domains.domain.domain method)": [[217, "sympy.polys.domains.domain.Domain.from_FF_gmpy"]], "from_ff_python() (sympy.polys.domains.finitefield method)": [[217, "sympy.polys.domains.FiniteField.from_FF_python"]], "from_ff_python() (sympy.polys.domains.gmpyintegerring method)": [[217, "sympy.polys.domains.GMPYIntegerRing.from_FF_python"]], "from_ff_python() (sympy.polys.domains.integerring method)": [[217, "sympy.polys.domains.IntegerRing.from_FF_python"]], "from_ff_python() (sympy.polys.domains.domain.domain method)": [[217, "sympy.polys.domains.domain.Domain.from_FF_python"]], "from_fractionfield() (sympy.polys.domains.expressiondomain method)": [[217, "sympy.polys.domains.ExpressionDomain.from_FractionField"]], "from_fractionfield() (sympy.polys.domains.fractionfield method)": [[217, "sympy.polys.domains.FractionField.from_FractionField"]], "from_fractionfield() (sympy.polys.domains.polynomialring method)": [[217, "sympy.polys.domains.PolynomialRing.from_FractionField"]], "from_fractionfield() (sympy.polys.domains.domain.domain method)": [[217, "sympy.polys.domains.domain.Domain.from_FractionField"]], "from_gaussianintegerring() (sympy.polys.domains.algebraicfield method)": [[217, "sympy.polys.domains.AlgebraicField.from_GaussianIntegerRing"]], "from_gaussianintegerring() (sympy.polys.domains.expressiondomain method)": [[217, "sympy.polys.domains.ExpressionDomain.from_GaussianIntegerRing"]], "from_gaussianintegerring() (sympy.polys.domains.fractionfield method)": [[217, "sympy.polys.domains.FractionField.from_GaussianIntegerRing"]], "from_gaussianintegerring() (sympy.polys.domains.polynomialring method)": [[217, "sympy.polys.domains.PolynomialRing.from_GaussianIntegerRing"]], "from_gaussianintegerring() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[217, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.from_GaussianIntegerRing"]], "from_gaussianintegerring() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[217, "sympy.polys.domains.gaussiandomains.GaussianRationalField.from_GaussianIntegerRing"]], "from_gaussianrationalfield() (sympy.polys.domains.algebraicfield method)": [[217, "sympy.polys.domains.AlgebraicField.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.expressiondomain method)": [[217, "sympy.polys.domains.ExpressionDomain.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.fractionfield method)": [[217, "sympy.polys.domains.FractionField.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.gmpyrationalfield method)": [[217, "sympy.polys.domains.GMPYRationalField.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.polynomialring method)": [[217, "sympy.polys.domains.PolynomialRing.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.rationalfield method)": [[217, "sympy.polys.domains.RationalField.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[217, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[217, "sympy.polys.domains.gaussiandomains.GaussianRationalField.from_GaussianRationalField"]], "from_globalpolynomialring() (sympy.polys.domains.polynomialring method)": [[217, "sympy.polys.domains.PolynomialRing.from_GlobalPolynomialRing"]], "from_globalpolynomialring() (sympy.polys.domains.domain.domain method)": [[217, "sympy.polys.domains.domain.Domain.from_GlobalPolynomialRing"]], "from_monogenicfiniteextension() (sympy.polys.domains.domain.domain method)": [[217, "sympy.polys.domains.domain.Domain.from_MonogenicFiniteExtension"]], "from_polynomialring() (sympy.polys.domains.expressiondomain method)": [[217, "sympy.polys.domains.ExpressionDomain.from_PolynomialRing"]], "from_polynomialring() (sympy.polys.domains.fractionfield method)": [[217, "sympy.polys.domains.FractionField.from_PolynomialRing"]], "from_polynomialring() (sympy.polys.domains.polynomialring method)": [[217, "sympy.polys.domains.PolynomialRing.from_PolynomialRing"]], "from_polynomialring() (sympy.polys.domains.domain.domain method)": [[217, "sympy.polys.domains.domain.Domain.from_PolynomialRing"]], "from_qq() (sympy.polys.domains.algebraicfield method)": [[217, "sympy.polys.domains.AlgebraicField.from_QQ"]], "from_qq() (sympy.polys.domains.expressiondomain method)": [[217, "sympy.polys.domains.ExpressionDomain.from_QQ"]], "from_qq() (sympy.polys.domains.finitefield method)": [[217, "sympy.polys.domains.FiniteField.from_QQ"]], "from_qq() (sympy.polys.domains.fractionfield method)": [[217, "sympy.polys.domains.FractionField.from_QQ"]], "from_qq() (sympy.polys.domains.gmpyintegerring method)": [[217, "sympy.polys.domains.GMPYIntegerRing.from_QQ"]], "from_qq() (sympy.polys.domains.integerring method)": [[217, "sympy.polys.domains.IntegerRing.from_QQ"]], "from_qq() (sympy.polys.domains.polynomialring method)": [[217, "sympy.polys.domains.PolynomialRing.from_QQ"]], "from_qq() (sympy.polys.domains.rationalfield method)": [[217, "sympy.polys.domains.RationalField.from_QQ"]], "from_qq() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[217, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_QQ"]], "from_qq_gmpy() (sympy.polys.domains.algebraicfield method)": [[217, "sympy.polys.domains.AlgebraicField.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.expressiondomain method)": [[217, "sympy.polys.domains.ExpressionDomain.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.finitefield method)": [[217, "sympy.polys.domains.FiniteField.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.fractionfield method)": [[217, "sympy.polys.domains.FractionField.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.gmpyintegerring method)": [[217, "sympy.polys.domains.GMPYIntegerRing.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.gmpyrationalfield method)": [[217, "sympy.polys.domains.GMPYRationalField.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.integerring method)": [[217, "sympy.polys.domains.IntegerRing.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.polynomialring method)": [[217, "sympy.polys.domains.PolynomialRing.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.rationalfield method)": [[217, "sympy.polys.domains.RationalField.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.domain.domain method)": [[217, "sympy.polys.domains.domain.Domain.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[217, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_QQ_gmpy"]], "from_qq_python() (sympy.polys.domains.algebraicfield method)": [[217, "sympy.polys.domains.AlgebraicField.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.expressiondomain method)": [[217, "sympy.polys.domains.ExpressionDomain.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.finitefield method)": [[217, "sympy.polys.domains.FiniteField.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.fractionfield method)": [[217, "sympy.polys.domains.FractionField.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.gmpyintegerring method)": [[217, "sympy.polys.domains.GMPYIntegerRing.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.gmpyrationalfield method)": [[217, "sympy.polys.domains.GMPYRationalField.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.integerring method)": [[217, "sympy.polys.domains.IntegerRing.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.polynomialring method)": [[217, "sympy.polys.domains.PolynomialRing.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.rationalfield method)": [[217, "sympy.polys.domains.RationalField.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.domain.domain method)": [[217, "sympy.polys.domains.domain.Domain.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[217, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_QQ_python"]], "from_realfield() (sympy.polys.domains.algebraicfield method)": [[217, "sympy.polys.domains.AlgebraicField.from_RealField"]], "from_realfield() (sympy.polys.domains.expressiondomain method)": [[217, "sympy.polys.domains.ExpressionDomain.from_RealField"]], "from_realfield() (sympy.polys.domains.finitefield method)": [[217, "sympy.polys.domains.FiniteField.from_RealField"]], "from_realfield() (sympy.polys.domains.fractionfield method)": [[217, "sympy.polys.domains.FractionField.from_RealField"]], "from_realfield() (sympy.polys.domains.gmpyintegerring method)": [[217, "sympy.polys.domains.GMPYIntegerRing.from_RealField"]], "from_realfield() (sympy.polys.domains.gmpyrationalfield method)": [[217, "sympy.polys.domains.GMPYRationalField.from_RealField"]], "from_realfield() (sympy.polys.domains.integerring method)": [[217, "sympy.polys.domains.IntegerRing.from_RealField"]], "from_realfield() (sympy.polys.domains.polynomialring method)": [[217, "sympy.polys.domains.PolynomialRing.from_RealField"]], "from_realfield() (sympy.polys.domains.rationalfield method)": [[217, "sympy.polys.domains.RationalField.from_RealField"]], "from_realfield() (sympy.polys.domains.domain.domain method)": [[217, "sympy.polys.domains.domain.Domain.from_RealField"]], "from_zz() (sympy.polys.domains.algebraicfield method)": [[217, "sympy.polys.domains.AlgebraicField.from_ZZ"]], "from_zz() (sympy.polys.domains.expressiondomain method)": [[217, "sympy.polys.domains.ExpressionDomain.from_ZZ"]], "from_zz() (sympy.polys.domains.finitefield method)": [[217, "sympy.polys.domains.FiniteField.from_ZZ"]], "from_zz() (sympy.polys.domains.fractionfield method)": [[217, "sympy.polys.domains.FractionField.from_ZZ"]], "from_zz() (sympy.polys.domains.integerring method)": [[217, "sympy.polys.domains.IntegerRing.from_ZZ"]], "from_zz() (sympy.polys.domains.polynomialring method)": [[217, "sympy.polys.domains.PolynomialRing.from_ZZ"]], "from_zz() (sympy.polys.domains.rationalfield method)": [[217, "sympy.polys.domains.RationalField.from_ZZ"]], "from_zz() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[217, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_ZZ"]], "from_zz_gmpy() (sympy.polys.domains.algebraicfield method)": [[217, "sympy.polys.domains.AlgebraicField.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.expressiondomain method)": [[217, "sympy.polys.domains.ExpressionDomain.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.finitefield method)": [[217, "sympy.polys.domains.FiniteField.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.fractionfield method)": [[217, "sympy.polys.domains.FractionField.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.gmpyintegerring method)": [[217, "sympy.polys.domains.GMPYIntegerRing.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.gmpyrationalfield method)": [[217, "sympy.polys.domains.GMPYRationalField.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.integerring method)": [[217, "sympy.polys.domains.IntegerRing.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.polynomialring method)": [[217, "sympy.polys.domains.PolynomialRing.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.rationalfield method)": [[217, "sympy.polys.domains.RationalField.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.domain.domain method)": [[217, "sympy.polys.domains.domain.Domain.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[217, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_ZZ_gmpy"]], "from_zz_python() (sympy.polys.domains.algebraicfield method)": [[217, "sympy.polys.domains.AlgebraicField.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.expressiondomain method)": [[217, "sympy.polys.domains.ExpressionDomain.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.finitefield method)": [[217, "sympy.polys.domains.FiniteField.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.fractionfield method)": [[217, "sympy.polys.domains.FractionField.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.gmpyintegerring method)": [[217, "sympy.polys.domains.GMPYIntegerRing.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.gmpyrationalfield method)": [[217, "sympy.polys.domains.GMPYRationalField.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.integerring method)": [[217, "sympy.polys.domains.IntegerRing.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.polynomialring method)": [[217, "sympy.polys.domains.PolynomialRing.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.rationalfield method)": [[217, "sympy.polys.domains.RationalField.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.domain.domain method)": [[217, "sympy.polys.domains.domain.Domain.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[217, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_ZZ_python"]], "from_list() (sympy.polys.polyclasses.dmp class method)": [[217, "sympy.polys.polyclasses.DMP.from_list"]], "from_sympy() (sympy.polys.domains.algebraicfield method)": [[217, "sympy.polys.domains.AlgebraicField.from_sympy"]], "from_sympy() (sympy.polys.domains.complexfield method)": [[217, "sympy.polys.domains.ComplexField.from_sympy"]], "from_sympy() (sympy.polys.domains.expressiondomain method)": [[217, "sympy.polys.domains.ExpressionDomain.from_sympy"]], "from_sympy() (sympy.polys.domains.finitefield method)": [[217, "sympy.polys.domains.FiniteField.from_sympy"]], "from_sympy() (sympy.polys.domains.fractionfield method)": [[217, "sympy.polys.domains.FractionField.from_sympy"]], "from_sympy() (sympy.polys.domains.gmpyintegerring method)": [[217, "sympy.polys.domains.GMPYIntegerRing.from_sympy"]], "from_sympy() (sympy.polys.domains.gmpyrationalfield method)": [[217, "sympy.polys.domains.GMPYRationalField.from_sympy"]], "from_sympy() (sympy.polys.domains.integerring method)": [[217, "sympy.polys.domains.IntegerRing.from_sympy"]], "from_sympy() (sympy.polys.domains.polynomialring method)": [[217, "sympy.polys.domains.PolynomialRing.from_sympy"]], "from_sympy() (sympy.polys.domains.rationalfield method)": [[217, "sympy.polys.domains.RationalField.from_sympy"]], "from_sympy() (sympy.polys.domains.realfield method)": [[217, "sympy.polys.domains.RealField.from_sympy"]], "from_sympy() (sympy.polys.domains.domain.domain method)": [[217, "sympy.polys.domains.domain.Domain.from_sympy"]], "from_sympy() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[217, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_sympy"]], "from_sympy_list() (sympy.polys.polyclasses.dmp class method)": [[217, "sympy.polys.polyclasses.DMP.from_sympy_list"]], "galois_group() (sympy.polys.domains.algebraicfield method)": [[217, "sympy.polys.domains.AlgebraicField.galois_group"]], "gcd() (sympy.polys.domains.complexfield method)": [[217, "sympy.polys.domains.ComplexField.gcd"]], "gcd() (sympy.polys.domains.gmpyintegerring method)": [[217, "sympy.polys.domains.GMPYIntegerRing.gcd"]], "gcd() (sympy.polys.domains.integerring method)": [[217, "sympy.polys.domains.IntegerRing.gcd"]], "gcd() (sympy.polys.domains.polynomialring method)": [[217, "sympy.polys.domains.PolynomialRing.gcd"]], "gcd() (sympy.polys.domains.realfield method)": [[217, "sympy.polys.domains.RealField.gcd"]], "gcd() (sympy.polys.domains.domain.domain method)": [[217, "sympy.polys.domains.domain.Domain.gcd"]], "gcd() (sympy.polys.domains.field.field method)": [[217, "sympy.polys.domains.field.Field.gcd"]], "gcd() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[217, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.gcd"]], "gcd() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.gcd"]], "gcdex() (sympy.polys.domains.gmpyintegerring method)": [[217, "sympy.polys.domains.GMPYIntegerRing.gcdex"]], "gcdex() (sympy.polys.domains.integerring method)": [[217, "sympy.polys.domains.IntegerRing.gcdex"]], "gcdex() (sympy.polys.domains.polynomialring method)": [[217, "sympy.polys.domains.PolynomialRing.gcdex"]], "gcdex() (sympy.polys.domains.domain.domain method)": [[217, "sympy.polys.domains.domain.Domain.gcdex"]], "gcdex() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.gcdex"]], "get_exact() (sympy.polys.domains.complexfield method)": [[217, "sympy.polys.domains.ComplexField.get_exact"]], "get_exact() (sympy.polys.domains.realfield method)": [[217, "sympy.polys.domains.RealField.get_exact"]], "get_exact() (sympy.polys.domains.domain.domain method)": [[217, "sympy.polys.domains.domain.Domain.get_exact"]], "get_field() (sympy.polys.domains.expressiondomain method)": [[217, "sympy.polys.domains.ExpressionDomain.get_field"]], "get_field() (sympy.polys.domains.finitefield method)": [[217, "sympy.polys.domains.FiniteField.get_field"]], "get_field() (sympy.polys.domains.integerring method)": [[217, "sympy.polys.domains.IntegerRing.get_field"]], "get_field() (sympy.polys.domains.polynomialring method)": [[217, "sympy.polys.domains.PolynomialRing.get_field"]], "get_field() (sympy.polys.domains.domain.domain method)": [[217, "sympy.polys.domains.domain.Domain.get_field"]], "get_field() (sympy.polys.domains.field.field method)": [[217, "sympy.polys.domains.field.Field.get_field"]], "get_field() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[217, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.get_field"]], "get_field() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[217, "sympy.polys.domains.gaussiandomains.GaussianRationalField.get_field"]], "get_ring() (sympy.polys.domains.algebraicfield method)": [[217, "sympy.polys.domains.AlgebraicField.get_ring"]], "get_ring() (sympy.polys.domains.complexfield method)": [[217, "sympy.polys.domains.ComplexField.get_ring"]], "get_ring() (sympy.polys.domains.expressiondomain method)": [[217, "sympy.polys.domains.ExpressionDomain.get_ring"]], "get_ring() (sympy.polys.domains.fractionfield method)": [[217, "sympy.polys.domains.FractionField.get_ring"]], "get_ring() (sympy.polys.domains.gmpyrationalfield method)": [[217, "sympy.polys.domains.GMPYRationalField.get_ring"]], "get_ring() (sympy.polys.domains.rationalfield method)": [[217, "sympy.polys.domains.RationalField.get_ring"]], "get_ring() (sympy.polys.domains.realfield method)": [[217, "sympy.polys.domains.RealField.get_ring"]], "get_ring() (sympy.polys.domains.domain.domain method)": [[217, "sympy.polys.domains.domain.Domain.get_ring"]], "get_ring() (sympy.polys.domains.field.field method)": [[217, "sympy.polys.domains.field.Field.get_ring"]], "get_ring() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[217, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.get_ring"]], "get_ring() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[217, "sympy.polys.domains.gaussiandomains.GaussianRationalField.get_ring"]], "get_ring() (sympy.polys.domains.ring.ring method)": [[217, "sympy.polys.domains.ring.Ring.get_ring"]], "gff_list() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.gff_list"]], "ground_new() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.ground_new"]], "half_gcdex() (sympy.polys.domains.domain.domain method)": [[217, "sympy.polys.domains.domain.Domain.half_gcdex"]], "half_gcdex() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.half_gcdex"]], "half_per() (sympy.polys.polyclasses.dmf method)": [[217, "sympy.polys.polyclasses.DMF.half_per"]], "has_assoc_field (sympy.polys.domains.domain.domain attribute)": [[217, "sympy.polys.domains.domain.Domain.has_assoc_Field"]], "has_assoc_ring (sympy.polys.domains.domain.domain attribute)": [[217, "sympy.polys.domains.domain.Domain.has_assoc_Ring"]], "homogeneous_order() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.homogeneous_order"]], "homogenize() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.homogenize"]], "ideal() (sympy.polys.domains.ring.ring method)": [[217, "sympy.polys.domains.ring.Ring.ideal"]], "imul_num() (sympy.polys.rings.polyelement method)": [[217, "sympy.polys.rings.PolyElement.imul_num"]], "index() (sympy.polys.rings.polyring method)": [[217, "sympy.polys.rings.PolyRing.index"]], "inject() (sympy.polys.domains.compositedomain.compositedomain method)": [[217, "sympy.polys.domains.compositedomain.CompositeDomain.inject"]], "inject() (sympy.polys.domains.domain.domain method)": [[217, "sympy.polys.domains.domain.Domain.inject"]], "inject() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[217, "sympy.polys.domains.gaussiandomains.GaussianDomain.inject"]], "inject() (sympy.polys.domains.simpledomain.simpledomain method)": [[217, "sympy.polys.domains.simpledomain.SimpleDomain.inject"]], "inject() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.inject"]], "integral_basis() (sympy.polys.domains.algebraicfield method)": [[217, "sympy.polys.domains.AlgebraicField.integral_basis"]], "integrate() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.integrate"]], "intervals() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.intervals"]], "invert() (sympy.polys.domains.domain.domain method)": [[217, "sympy.polys.domains.domain.Domain.invert"]], "invert() (sympy.polys.domains.ring.ring method)": [[217, "sympy.polys.domains.ring.Ring.invert"]], "invert() (sympy.polys.polyclasses.dmf method)": [[217, "sympy.polys.polyclasses.DMF.invert"]], "invert() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.invert"]], "is_field (sympy.polys.domains.domain.domain attribute)": [[217, "sympy.polys.domains.domain.Domain.is_Field"]], "is_pid (sympy.polys.domains.domain.domain attribute)": [[217, "sympy.polys.domains.domain.Domain.is_PID"]], "is_ring (sympy.polys.domains.domain.domain attribute)": [[217, "sympy.polys.domains.domain.Domain.is_Ring"]], "is_cyclotomic (sympy.polys.polyclasses.dmp property)": [[217, "sympy.polys.polyclasses.DMP.is_cyclotomic"]], "is_ground (sympy.polys.polyclasses.anp property)": [[217, "sympy.polys.polyclasses.ANP.is_ground"]], "is_ground (sympy.polys.polyclasses.dmp property)": [[217, "sympy.polys.polyclasses.DMP.is_ground"]], "is_homogeneous (sympy.polys.polyclasses.dmp property)": [[217, "sympy.polys.polyclasses.DMP.is_homogeneous"]], "is_irreducible (sympy.polys.polyclasses.dmp property)": [[217, "sympy.polys.polyclasses.DMP.is_irreducible"]], "is_linear (sympy.polys.polyclasses.dmp property)": [[217, "sympy.polys.polyclasses.DMP.is_linear"]], "is_monic (sympy.polys.polyclasses.dmp property)": [[217, "sympy.polys.polyclasses.DMP.is_monic"]], "is_monomial (sympy.polys.polyclasses.dmp property)": [[217, "sympy.polys.polyclasses.DMP.is_monomial"]], "is_negative() (sympy.polys.domains.algebraicfield method)": [[217, "sympy.polys.domains.AlgebraicField.is_negative"]], "is_negative() (sympy.polys.domains.complexfield method)": [[217, "sympy.polys.domains.ComplexField.is_negative"]], "is_negative() (sympy.polys.domains.expressiondomain method)": [[217, "sympy.polys.domains.ExpressionDomain.is_negative"]], "is_negative() (sympy.polys.domains.fractionfield method)": [[217, "sympy.polys.domains.FractionField.is_negative"]], "is_negative() (sympy.polys.domains.polynomialring method)": [[217, "sympy.polys.domains.PolynomialRing.is_negative"]], "is_negative() (sympy.polys.domains.domain.domain method)": [[217, "sympy.polys.domains.domain.Domain.is_negative"]], "is_negative() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[217, "sympy.polys.domains.gaussiandomains.GaussianDomain.is_negative"]], "is_nonnegative() (sympy.polys.domains.algebraicfield method)": [[217, "sympy.polys.domains.AlgebraicField.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.complexfield method)": [[217, "sympy.polys.domains.ComplexField.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.expressiondomain method)": [[217, "sympy.polys.domains.ExpressionDomain.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.fractionfield method)": [[217, "sympy.polys.domains.FractionField.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.polynomialring method)": [[217, "sympy.polys.domains.PolynomialRing.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.domain.domain method)": [[217, "sympy.polys.domains.domain.Domain.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[217, "sympy.polys.domains.gaussiandomains.GaussianDomain.is_nonnegative"]], "is_nonpositive() (sympy.polys.domains.algebraicfield method)": [[217, "sympy.polys.domains.AlgebraicField.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.complexfield method)": [[217, "sympy.polys.domains.ComplexField.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.expressiondomain method)": [[217, "sympy.polys.domains.ExpressionDomain.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.fractionfield method)": [[217, "sympy.polys.domains.FractionField.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.polynomialring method)": [[217, "sympy.polys.domains.PolynomialRing.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.domain.domain method)": [[217, "sympy.polys.domains.domain.Domain.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[217, "sympy.polys.domains.gaussiandomains.GaussianDomain.is_nonpositive"]], "is_one (sympy.polys.polyclasses.anp property)": [[217, "sympy.polys.polyclasses.ANP.is_one"]], "is_one (sympy.polys.polyclasses.dmf property)": [[217, "sympy.polys.polyclasses.DMF.is_one"]], "is_one (sympy.polys.polyclasses.dmp property)": [[217, "sympy.polys.polyclasses.DMP.is_one"]], "is_one() (sympy.polys.domains.domain.domain method)": [[217, "sympy.polys.domains.domain.Domain.is_one"]], "is_positive() (sympy.polys.domains.algebraicfield method)": [[217, "sympy.polys.domains.AlgebraicField.is_positive"]], "is_positive() (sympy.polys.domains.complexfield method)": [[217, "sympy.polys.domains.ComplexField.is_positive"]], "is_positive() (sympy.polys.domains.expressiondomain method)": [[217, "sympy.polys.domains.ExpressionDomain.is_positive"]], "is_positive() (sympy.polys.domains.fractionfield method)": [[217, "sympy.polys.domains.FractionField.is_positive"]], "is_positive() (sympy.polys.domains.polynomialring method)": [[217, "sympy.polys.domains.PolynomialRing.is_positive"]], "is_positive() (sympy.polys.domains.domain.domain method)": [[217, "sympy.polys.domains.domain.Domain.is_positive"]], "is_positive() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[217, "sympy.polys.domains.gaussiandomains.GaussianDomain.is_positive"]], "is_primitive (sympy.polys.polyclasses.dmp property)": [[217, "sympy.polys.polyclasses.DMP.is_primitive"]], "is_quadratic (sympy.polys.polyclasses.dmp property)": [[217, "sympy.polys.polyclasses.DMP.is_quadratic"]], "is_sqf (sympy.polys.polyclasses.dmp property)": [[217, "sympy.polys.polyclasses.DMP.is_sqf"]], "is_square() (sympy.polys.domains.complexfield method)": [[217, "sympy.polys.domains.ComplexField.is_square"]], "is_square() (sympy.polys.domains.finitefield method)": [[217, "sympy.polys.domains.FiniteField.is_square"]], "is_square() (sympy.polys.domains.integerring method)": [[217, "sympy.polys.domains.IntegerRing.is_square"]], "is_square() (sympy.polys.domains.rationalfield method)": [[217, "sympy.polys.domains.RationalField.is_square"]], "is_square() (sympy.polys.domains.realfield method)": [[217, "sympy.polys.domains.RealField.is_square"]], "is_square() (sympy.polys.domains.domain.domain method)": [[217, "sympy.polys.domains.domain.Domain.is_square"]], "is_unit() (sympy.polys.domains.polynomialring method)": [[217, "sympy.polys.domains.PolynomialRing.is_unit"]], "is_unit() (sympy.polys.domains.field.field method)": [[217, "sympy.polys.domains.field.Field.is_unit"]], "is_zero (sympy.polys.polyclasses.anp property)": [[217, "sympy.polys.polyclasses.ANP.is_zero"]], "is_zero (sympy.polys.polyclasses.dmf property)": [[217, "sympy.polys.polyclasses.DMF.is_zero"]], "is_zero (sympy.polys.polyclasses.dmp property)": [[217, "sympy.polys.polyclasses.DMP.is_zero"]], "is_zero() (sympy.polys.domains.domain.domain method)": [[217, "sympy.polys.domains.domain.Domain.is_zero"]], "itercoeffs() (sympy.polys.rings.polyelement method)": [[217, "sympy.polys.rings.PolyElement.itercoeffs"]], "itermonoms() (sympy.polys.rings.polyelement method)": [[217, "sympy.polys.rings.PolyElement.itermonoms"]], "iterterms() (sympy.polys.rings.polyelement method)": [[217, "sympy.polys.rings.PolyElement.iterterms"]], "l1_norm() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.l1_norm"]], "l2_norm_squared() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.l2_norm_squared"]], "lcm() (sympy.polys.domains.complexfield method)": [[217, "sympy.polys.domains.ComplexField.lcm"]], "lcm() (sympy.polys.domains.gmpyintegerring method)": [[217, "sympy.polys.domains.GMPYIntegerRing.lcm"]], "lcm() (sympy.polys.domains.integerring method)": [[217, "sympy.polys.domains.IntegerRing.lcm"]], "lcm() (sympy.polys.domains.polynomialring method)": [[217, "sympy.polys.domains.PolynomialRing.lcm"]], "lcm() (sympy.polys.domains.realfield method)": [[217, "sympy.polys.domains.RealField.lcm"]], "lcm() (sympy.polys.domains.domain.domain method)": [[217, "sympy.polys.domains.domain.Domain.lcm"]], "lcm() (sympy.polys.domains.field.field method)": [[217, "sympy.polys.domains.field.Field.lcm"]], "lcm() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[217, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.lcm"]], "lcm() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.lcm"]], "leading_expv() (sympy.polys.rings.polyelement method)": [[217, "sympy.polys.rings.PolyElement.leading_expv"]], "leading_monom() (sympy.polys.rings.polyelement method)": [[217, "sympy.polys.rings.PolyElement.leading_monom"]], "leading_term() (sympy.polys.rings.polyelement method)": [[217, "sympy.polys.rings.PolyElement.leading_term"]], "lift() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.lift"]], "listcoeffs() (sympy.polys.rings.polyelement method)": [[217, "sympy.polys.rings.PolyElement.listcoeffs"]], "listmonoms() (sympy.polys.rings.polyelement method)": [[217, "sympy.polys.rings.PolyElement.listmonoms"]], "listterms() (sympy.polys.rings.polyelement method)": [[217, "sympy.polys.rings.PolyElement.listterms"]], "log() (sympy.polys.domains.integerring method)": [[217, "sympy.polys.domains.IntegerRing.log"]], "log() (sympy.polys.domains.domain.domain method)": [[217, "sympy.polys.domains.domain.Domain.log"]], "map() (sympy.polys.domains.domain.domain method)": [[217, "sympy.polys.domains.domain.Domain.map"]], "max_norm() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.max_norm"]], "maximal_order() (sympy.polys.domains.algebraicfield method)": [[217, "sympy.polys.domains.AlgebraicField.maximal_order"]], "mignotte_sep_bound_squared() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.mignotte_sep_bound_squared"]], "mod (sympy.polys.domains.algebraicfield attribute)": [[217, "sympy.polys.domains.AlgebraicField.mod"]], "mod_to_list() (sympy.polys.polyclasses.anp method)": [[217, "sympy.polys.polyclasses.ANP.mod_to_list"]], "monic() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.monic"]], "monic() (sympy.polys.rings.polyelement method)": [[217, "sympy.polys.rings.PolyElement.monic"]], "monomial_basis() (sympy.polys.rings.polyring method)": [[217, "sympy.polys.rings.PolyRing.monomial_basis"]], "monoms() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.monoms"]], "monoms() (sympy.polys.rings.polyelement method)": [[217, "sympy.polys.rings.PolyElement.monoms"]], "mul() (sympy.polys.domains.domain.domain method)": [[217, "sympy.polys.domains.domain.Domain.mul"]], "mul() (sympy.polys.polyclasses.dmf method)": [[217, "sympy.polys.polyclasses.DMF.mul"]], "mul() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.mul"]], "mul() (sympy.polys.rings.polyring method)": [[217, "sympy.polys.rings.PolyRing.mul"]], "mul_ground() (sympy.polys.polyclasses.anp method)": [[217, "sympy.polys.polyclasses.ANP.mul_ground"]], "mul_ground() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.mul_ground"]], "n() (sympy.polys.domains.domain.domain method)": [[217, "sympy.polys.domains.domain.Domain.n"]], "neg() (sympy.polys.domains.domain.domain method)": [[217, "sympy.polys.domains.domain.Domain.neg"]], "neg() (sympy.polys.polyclasses.dmf method)": [[217, "sympy.polys.polyclasses.DMF.neg"]], "neg() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.neg"]], "new() (sympy.polys.domains.gaussiandomains.gaussianelement class method)": [[217, "sympy.polys.domains.gaussiandomains.GaussianElement.new"]], "norm() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.norm"]], "normalize() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[217, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.normalize"]], "nth() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.nth"]], "numer() (sympy.polys.domains.algebraicfield method)": [[217, "sympy.polys.domains.AlgebraicField.numer"]], "numer() (sympy.polys.domains.expressiondomain method)": [[217, "sympy.polys.domains.ExpressionDomain.numer"]], "numer() (sympy.polys.domains.fractionfield method)": [[217, "sympy.polys.domains.FractionField.numer"]], "numer() (sympy.polys.domains.gmpyrationalfield method)": [[217, "sympy.polys.domains.GMPYRationalField.numer"]], "numer() (sympy.polys.domains.rationalfield method)": [[217, "sympy.polys.domains.RationalField.numer"]], "numer() (sympy.polys.domains.domain.domain method)": [[217, "sympy.polys.domains.domain.Domain.numer"]], "numer() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[217, "sympy.polys.domains.gaussiandomains.GaussianRationalField.numer"]], "numer() (sympy.polys.domains.ring.ring method)": [[217, "sympy.polys.domains.ring.Ring.numer"]], "numer() (sympy.polys.polyclasses.dmf method)": [[217, "sympy.polys.polyclasses.DMF.numer"]], "of_type() (sympy.polys.domains.domain.domain method)": [[217, "sympy.polys.domains.domain.Domain.of_type"]], "old_frac_field() (sympy.polys.domains.domain.domain method)": [[217, "sympy.polys.domains.domain.Domain.old_frac_field"]], "old_poly_ring() (sympy.polys.domains.domain.domain method)": [[217, "sympy.polys.domains.domain.Domain.old_poly_ring"]], "one (sympy.polys.domains.domain.domain attribute)": [[217, "sympy.polys.domains.domain.Domain.one"]], "orig_ext (sympy.polys.domains.algebraicfield attribute)": [[217, "sympy.polys.domains.AlgebraicField.orig_ext"]], "parent() (sympy.polys.domains.domainelement.domainelement method)": [[217, "sympy.polys.domains.domainelement.DomainElement.parent"]], "parent() (sympy.polys.domains.gaussiandomains.gaussianelement method)": [[217, "sympy.polys.domains.gaussiandomains.GaussianElement.parent"]], "pdiv() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.pdiv"]], "pdiv() (sympy.polys.rings.polyelement method)": [[217, "sympy.polys.rings.PolyElement.pdiv"]], "per() (sympy.polys.polyclasses.dmf method)": [[217, "sympy.polys.polyclasses.DMF.per"]], "permute() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.permute"]], "pexquo() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.pexquo"]], "pexquo() (sympy.polys.rings.polyelement method)": [[217, "sympy.polys.rings.PolyElement.pexquo"]], "poly_ring() (sympy.polys.domains.domain.domain method)": [[217, "sympy.polys.domains.domain.Domain.poly_ring"]], "poly_unify() (sympy.polys.polyclasses.dmf method)": [[217, "sympy.polys.polyclasses.DMF.poly_unify"]], "pos() (sympy.polys.domains.domain.domain method)": [[217, "sympy.polys.domains.domain.Domain.pos"]], "pow() (sympy.polys.domains.domain.domain method)": [[217, "sympy.polys.domains.domain.Domain.pow"]], "pow() (sympy.polys.polyclasses.anp method)": [[217, "sympy.polys.polyclasses.ANP.pow"]], "pow() (sympy.polys.polyclasses.dmf method)": [[217, "sympy.polys.polyclasses.DMF.pow"]], "pow() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.pow"]], "pquo() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.pquo"]], "pquo() (sympy.polys.rings.polyelement method)": [[217, "sympy.polys.rings.PolyElement.pquo"]], "prem() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.prem"]], "prem() (sympy.polys.rings.polyelement method)": [[217, "sympy.polys.rings.PolyElement.prem"]], "primes_above() (sympy.polys.domains.algebraicfield method)": [[217, "sympy.polys.domains.AlgebraicField.primes_above"]], "primitive() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.primitive"]], "primitive() (sympy.polys.rings.polyelement method)": [[217, "sympy.polys.rings.PolyElement.primitive"]], "quadrant() (sympy.polys.domains.gaussiandomains.gaussianelement method)": [[217, "sympy.polys.domains.gaussiandomains.GaussianElement.quadrant"]], "quo() (sympy.polys.domains.gmpyrationalfield method)": [[217, "sympy.polys.domains.GMPYRationalField.quo"]], "quo() (sympy.polys.domains.rationalfield method)": [[217, "sympy.polys.domains.RationalField.quo"]], "quo() (sympy.polys.domains.domain.domain method)": [[217, "sympy.polys.domains.domain.Domain.quo"]], "quo() (sympy.polys.domains.field.field method)": [[217, "sympy.polys.domains.field.Field.quo"]], "quo() (sympy.polys.domains.ring.ring method)": [[217, "sympy.polys.domains.ring.Ring.quo"]], "quo() (sympy.polys.polyclasses.dmf method)": [[217, "sympy.polys.polyclasses.DMF.quo"]], "quo() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.quo"]], "quo_ground() (sympy.polys.polyclasses.anp method)": [[217, "sympy.polys.polyclasses.ANP.quo_ground"]], "quo_ground() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.quo_ground"]], "quotient_ring() (sympy.polys.domains.ring.ring method)": [[217, "sympy.polys.domains.ring.Ring.quotient_ring"]], "refine_root() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.refine_root"]], "rem() (sympy.polys.domains.gmpyrationalfield method)": [[217, "sympy.polys.domains.GMPYRationalField.rem"]], "rem() (sympy.polys.domains.rationalfield method)": [[217, "sympy.polys.domains.RationalField.rem"]], "rem() (sympy.polys.domains.domain.domain method)": [[217, "sympy.polys.domains.domain.Domain.rem"]], "rem() (sympy.polys.domains.field.field method)": [[217, "sympy.polys.domains.field.Field.rem"]], "rem() (sympy.polys.domains.ring.ring method)": [[217, "sympy.polys.domains.ring.Ring.rem"]], "rem() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.rem"]], "rep (sympy.polys.polyclasses.dmp property)": [[217, "sympy.polys.polyclasses.DMP.rep"]], "resultant() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.resultant"]], "revert() (sympy.polys.domains.domain.domain method)": [[217, "sympy.polys.domains.domain.Domain.revert"]], "revert() (sympy.polys.domains.field.field method)": [[217, "sympy.polys.domains.field.Field.revert"]], "revert() (sympy.polys.domains.ring.ring method)": [[217, "sympy.polys.domains.ring.Ring.revert"]], "revert() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.revert"]], "ring() (in module sympy.polys.rings)": [[217, "sympy.polys.rings.ring"]], "sfield() (in module sympy.polys.fields)": [[217, "sympy.polys.fields.sfield"]], "shift() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.shift"]], "slice() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.slice"]], "sqf_list() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.sqf_list"]], "sqf_list_include() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.sqf_list_include"]], "sqf_norm() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.sqf_norm"]], "sqf_part() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.sqf_part"]], "sqr() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.sqr"]], "sqrt() (sympy.polys.domains.gmpyintegerring method)": [[217, "sympy.polys.domains.GMPYIntegerRing.sqrt"]], "sqrt() (sympy.polys.domains.integerring method)": [[217, "sympy.polys.domains.IntegerRing.sqrt"]], "sqrt() (sympy.polys.domains.domain.domain method)": [[217, "sympy.polys.domains.domain.Domain.sqrt"]], "square() (sympy.polys.rings.polyelement method)": [[217, "sympy.polys.rings.PolyElement.square"]], "sring() (in module sympy.polys.rings)": [[217, "sympy.polys.rings.sring"]], "strip_zero() (sympy.polys.rings.polyelement method)": [[217, "sympy.polys.rings.PolyElement.strip_zero"]], "sturm() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.sturm"]], "sub() (sympy.polys.domains.domain.domain method)": [[217, "sympy.polys.domains.domain.Domain.sub"]], "sub() (sympy.polys.polyclasses.dmf method)": [[217, "sympy.polys.polyclasses.DMF.sub"]], "sub() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.sub"]], "sub_ground() (sympy.polys.polyclasses.anp method)": [[217, "sympy.polys.polyclasses.ANP.sub_ground"]], "sub_ground() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.sub_ground"]], "subresultants() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.subresultants"]], "subresultants() (sympy.polys.rings.polyelement method)": [[217, "sympy.polys.rings.PolyElement.subresultants"]], "symmetric_poly() (sympy.polys.rings.polyring method)": [[217, "sympy.polys.rings.PolyRing.symmetric_poly"]], "symmetrize() (sympy.polys.rings.polyelement method)": [[217, "sympy.polys.rings.PolyElement.symmetrize"]], "tail_degree() (sympy.polys.rings.polyelement method)": [[217, "sympy.polys.rings.PolyElement.tail_degree"]], "tail_degrees() (sympy.polys.rings.polyelement method)": [[217, "sympy.polys.rings.PolyElement.tail_degrees"]], "terms() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.terms"]], "terms() (sympy.polys.rings.polyelement method)": [[217, "sympy.polys.rings.PolyElement.terms"]], "terms_gcd() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.terms_gcd"]], "to_alg_num() (sympy.polys.domains.algebraicfield method)": [[217, "sympy.polys.domains.AlgebraicField.to_alg_num"]], "to_best() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.to_best"]], "to_dict() (sympy.polys.polyclasses.anp method)": [[217, "sympy.polys.polyclasses.ANP.to_dict"]], "to_dict() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.to_dict"]], "to_exact() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.to_exact"]], "to_field() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.to_field"]], "to_int() (sympy.polys.domains.finitefield method)": [[217, "sympy.polys.domains.FiniteField.to_int"]], "to_list() (sympy.polys.polyclasses.anp method)": [[217, "sympy.polys.polyclasses.ANP.to_list"]], "to_list() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.to_list"]], "to_rational() (sympy.polys.domains.realfield method)": [[217, "sympy.polys.domains.RealField.to_rational"]], "to_ring() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.to_ring"]], "to_sympy() (sympy.polys.domains.algebraicfield method)": [[217, "sympy.polys.domains.AlgebraicField.to_sympy"]], "to_sympy() (sympy.polys.domains.complexfield method)": [[217, "sympy.polys.domains.ComplexField.to_sympy"]], "to_sympy() (sympy.polys.domains.expressiondomain method)": [[217, "sympy.polys.domains.ExpressionDomain.to_sympy"]], "to_sympy() (sympy.polys.domains.finitefield method)": [[217, "sympy.polys.domains.FiniteField.to_sympy"]], "to_sympy() (sympy.polys.domains.fractionfield method)": [[217, "sympy.polys.domains.FractionField.to_sympy"]], "to_sympy() (sympy.polys.domains.gmpyintegerring method)": [[217, "sympy.polys.domains.GMPYIntegerRing.to_sympy"]], "to_sympy() (sympy.polys.domains.gmpyrationalfield method)": [[217, "sympy.polys.domains.GMPYRationalField.to_sympy"]], "to_sympy() (sympy.polys.domains.integerring method)": [[217, "sympy.polys.domains.IntegerRing.to_sympy"]], "to_sympy() (sympy.polys.domains.polynomialring method)": [[217, "sympy.polys.domains.PolynomialRing.to_sympy"]], "to_sympy() (sympy.polys.domains.rationalfield method)": [[217, "sympy.polys.domains.RationalField.to_sympy"]], "to_sympy() (sympy.polys.domains.realfield method)": [[217, "sympy.polys.domains.RealField.to_sympy"]], "to_sympy() (sympy.polys.domains.domain.domain method)": [[217, "sympy.polys.domains.domain.Domain.to_sympy"]], "to_sympy() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[217, "sympy.polys.domains.gaussiandomains.GaussianDomain.to_sympy"]], "to_sympy_dict() (sympy.polys.polyclasses.anp method)": [[217, "sympy.polys.polyclasses.ANP.to_sympy_dict"]], "to_sympy_dict() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.to_sympy_dict"]], "to_sympy_list() (sympy.polys.polyclasses.anp method)": [[217, "sympy.polys.polyclasses.ANP.to_sympy_list"]], "to_sympy_list() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.to_sympy_list"]], "to_tuple() (sympy.polys.polyclasses.anp method)": [[217, "sympy.polys.polyclasses.ANP.to_tuple"]], "to_tuple() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.to_tuple"]], "total_degree() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.total_degree"]], "tp (sympy.polys.domains.domain.domain property)": [[217, "sympy.polys.domains.domain.Domain.tp"]], "transform() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.transform"]], "trunc() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.trunc"]], "unify() (sympy.polys.domains.domain.domain method)": [[217, "sympy.polys.domains.domain.Domain.unify"]], "unify() (sympy.polys.polyclasses.anp method)": [[217, "sympy.polys.polyclasses.ANP.unify"]], "unify_anp() (sympy.polys.polyclasses.anp method)": [[217, "sympy.polys.polyclasses.ANP.unify_ANP"]], "unify_dmp() (sympy.polys.polyclasses.dmp method)": [[217, "sympy.polys.polyclasses.DMP.unify_DMP"]], "unify_composite() (sympy.polys.domains.domain.domain method)": [[217, "sympy.polys.domains.domain.Domain.unify_composite"]], "vfield() (in module sympy.polys.fields)": [[217, "sympy.polys.fields.vfield"]], "vring() (in module sympy.polys.rings)": [[217, "sympy.polys.rings.vring"]], "xfield() (in module sympy.polys.fields)": [[217, "sympy.polys.fields.xfield"]], "xring() (in module sympy.polys.rings)": [[217, "sympy.polys.rings.xring"]], "zero (sympy.polys.domains.domain.domain attribute)": [[217, "sympy.polys.domains.domain.Domain.zero"]], "basepolynomialerror (class in sympy.polys.polyerrors)": [[219, "sympy.polys.polyerrors.BasePolynomialError"]], "coercionfailed (class in sympy.polys.polyerrors)": [[219, "sympy.polys.polyerrors.CoercionFailed"]], "computationfailed (class in sympy.polys.polyerrors)": [[219, "sympy.polys.polyerrors.ComputationFailed"]], "domainerror (class in sympy.polys.polyerrors)": [[219, "sympy.polys.polyerrors.DomainError"]], "evaluationfailed (class in sympy.polys.polyerrors)": [[219, "sympy.polys.polyerrors.EvaluationFailed"]], "exactquotientfailed (class in sympy.polys.polyerrors)": [[219, "sympy.polys.polyerrors.ExactQuotientFailed"]], "extraneousfactors (class in sympy.polys.polyerrors)": [[219, "sympy.polys.polyerrors.ExtraneousFactors"]], "flagerror (class in sympy.polys.polyerrors)": [[219, "sympy.polys.polyerrors.FlagError"]], "generatorserror (class in sympy.polys.polyerrors)": [[219, "sympy.polys.polyerrors.GeneratorsError"]], "generatorsneeded (class in sympy.polys.polyerrors)": [[219, "sympy.polys.polyerrors.GeneratorsNeeded"]], "heuristicgcdfailed (class in sympy.polys.polyerrors)": [[219, "sympy.polys.polyerrors.HeuristicGCDFailed"]], "homomorphismfailed (class in sympy.polys.polyerrors)": [[219, "sympy.polys.polyerrors.HomomorphismFailed"]], "isomorphismfailed (class in sympy.polys.polyerrors)": [[219, "sympy.polys.polyerrors.IsomorphismFailed"]], "multivariatepolynomialerror (class in sympy.polys.polyerrors)": [[219, "sympy.polys.polyerrors.MultivariatePolynomialError"]], "notalgebraic (class in sympy.polys.polyerrors)": [[219, "sympy.polys.polyerrors.NotAlgebraic"]], "notinvertible (class in sympy.polys.polyerrors)": [[219, "sympy.polys.polyerrors.NotInvertible"]], "notreversible (class in sympy.polys.polyerrors)": [[219, "sympy.polys.polyerrors.NotReversible"]], "operationnotsupported (class in sympy.polys.polyerrors)": [[219, "sympy.polys.polyerrors.OperationNotSupported"]], "optionerror (class in sympy.polys.polyerrors)": [[219, "sympy.polys.polyerrors.OptionError"]], "options (class in sympy.polys.polyoptions)": [[219, "sympy.polys.polyoptions.Options"]], "polificationfailed (class in sympy.polys.polyerrors)": [[219, "sympy.polys.polyerrors.PolificationFailed"]], "polynomialerror (class in sympy.polys.polyerrors)": [[219, "sympy.polys.polyerrors.PolynomialError"]], "refinementfailed (class in sympy.polys.polyerrors)": [[219, "sympy.polys.polyerrors.RefinementFailed"]], "unificationfailed (class in sympy.polys.polyerrors)": [[219, "sympy.polys.polyerrors.UnificationFailed"]], "univariatepolynomialerror (class in sympy.polys.polyerrors)": [[219, "sympy.polys.polyerrors.UnivariatePolynomialError"]], "_modgcd_multivariate_p() (in module sympy.polys.modulargcd)": [[219, "sympy.polys.modulargcd._modgcd_multivariate_p"]], "build_options() (in module sympy.polys.polyoptions)": [[219, "sympy.polys.polyoptions.build_options"]], "clone() (sympy.polys.polyoptions.options method)": [[219, "sympy.polys.polyoptions.Options.clone"]], "dmp_lc() (in module sympy.polys.densebasic)": [[219, "sympy.polys.densebasic.dmp_LC"]], "dmp_tc() (in module sympy.polys.densebasic)": [[219, "sympy.polys.densebasic.dmp_TC"]], "dmp_abs() (in module sympy.polys.densearith)": [[219, "sympy.polys.densearith.dmp_abs"]], "dmp_add() (in module sympy.polys.densearith)": [[219, "sympy.polys.densearith.dmp_add"]], "dmp_add_ground() (in module sympy.polys.densearith)": [[219, "sympy.polys.densearith.dmp_add_ground"]], "dmp_add_mul() (in module sympy.polys.densearith)": [[219, "sympy.polys.densearith.dmp_add_mul"]], "dmp_add_term() (in module sympy.polys.densearith)": [[219, "sympy.polys.densearith.dmp_add_term"]], "dmp_apply_pairs() (in module sympy.polys.densebasic)": [[219, "sympy.polys.densebasic.dmp_apply_pairs"]], "dmp_cancel() (in module sympy.polys.euclidtools)": [[219, "sympy.polys.euclidtools.dmp_cancel"]], "dmp_clear_denoms() (in module sympy.polys.densetools)": [[219, "sympy.polys.densetools.dmp_clear_denoms"]], "dmp_compose() (in module sympy.polys.densetools)": [[219, "sympy.polys.densetools.dmp_compose"]], "dmp_content() (in module sympy.polys.euclidtools)": [[219, "sympy.polys.euclidtools.dmp_content"]], "dmp_convert() (in module sympy.polys.densebasic)": [[219, "sympy.polys.densebasic.dmp_convert"]], "dmp_copy() (in module sympy.polys.densebasic)": [[219, "sympy.polys.densebasic.dmp_copy"]], "dmp_deflate() (in module sympy.polys.densebasic)": [[219, "sympy.polys.densebasic.dmp_deflate"]], "dmp_degree() (in module sympy.polys.densebasic)": [[219, "sympy.polys.densebasic.dmp_degree"]], "dmp_degree_in() (in module sympy.polys.densebasic)": [[219, "sympy.polys.densebasic.dmp_degree_in"]], "dmp_degree_list() (in module sympy.polys.densebasic)": [[219, "sympy.polys.densebasic.dmp_degree_list"]], "dmp_diff() (in module sympy.polys.densetools)": [[219, "sympy.polys.densetools.dmp_diff"]], "dmp_diff_eval_in() (in module sympy.polys.densetools)": [[219, "sympy.polys.densetools.dmp_diff_eval_in"]], "dmp_diff_in() (in module sympy.polys.densetools)": [[219, "sympy.polys.densetools.dmp_diff_in"]], "dmp_discriminant() (in module sympy.polys.euclidtools)": [[219, "sympy.polys.euclidtools.dmp_discriminant"]], "dmp_div() (in module sympy.polys.densearith)": [[219, "sympy.polys.densearith.dmp_div"]], "dmp_eject() (in module sympy.polys.densebasic)": [[219, "sympy.polys.densebasic.dmp_eject"]], "dmp_euclidean_prs() (in module sympy.polys.euclidtools)": [[219, "sympy.polys.euclidtools.dmp_euclidean_prs"]], "dmp_eval() (in module sympy.polys.densetools)": [[219, "sympy.polys.densetools.dmp_eval"]], "dmp_eval_in() (in module sympy.polys.densetools)": [[219, "sympy.polys.densetools.dmp_eval_in"]], "dmp_eval_tail() (in module sympy.polys.densetools)": [[219, "sympy.polys.densetools.dmp_eval_tail"]], "dmp_exclude() (in module sympy.polys.densebasic)": [[219, "sympy.polys.densebasic.dmp_exclude"]], "dmp_expand() (in module sympy.polys.densearith)": [[219, "sympy.polys.densearith.dmp_expand"]], "dmp_exquo() (in module sympy.polys.densearith)": [[219, "sympy.polys.densearith.dmp_exquo"]], "dmp_exquo_ground() (in module sympy.polys.densearith)": [[219, "sympy.polys.densearith.dmp_exquo_ground"]], "dmp_ext_factor() (in module sympy.polys.factortools)": [[219, "sympy.polys.factortools.dmp_ext_factor"]], "dmp_factor_list() (in module sympy.polys.factortools)": [[219, "sympy.polys.factortools.dmp_factor_list"]], "dmp_factor_list_include() (in module sympy.polys.factortools)": [[219, "sympy.polys.factortools.dmp_factor_list_include"]], "dmp_ff_div() (in module sympy.polys.densearith)": [[219, "sympy.polys.densearith.dmp_ff_div"]], "dmp_ff_prs_gcd() (in module sympy.polys.euclidtools)": [[219, "sympy.polys.euclidtools.dmp_ff_prs_gcd"]], "dmp_from_dict() (in module sympy.polys.densebasic)": [[219, "sympy.polys.densebasic.dmp_from_dict"]], "dmp_from_sympy() (in module sympy.polys.densebasic)": [[219, "sympy.polys.densebasic.dmp_from_sympy"]], "dmp_gcd() (in module sympy.polys.euclidtools)": [[219, "sympy.polys.euclidtools.dmp_gcd"]], "dmp_gcdex() (in module sympy.polys.euclidtools)": [[219, "sympy.polys.euclidtools.dmp_gcdex"]], "dmp_ground() (in module sympy.polys.densebasic)": [[219, "sympy.polys.densebasic.dmp_ground"]], "dmp_ground_lc() (in module sympy.polys.densebasic)": [[219, "sympy.polys.densebasic.dmp_ground_LC"]], "dmp_ground_tc() (in module sympy.polys.densebasic)": [[219, "sympy.polys.densebasic.dmp_ground_TC"]], "dmp_ground_content() (in module sympy.polys.densetools)": [[219, "sympy.polys.densetools.dmp_ground_content"]], "dmp_ground_extract() (in module sympy.polys.densetools)": [[219, "sympy.polys.densetools.dmp_ground_extract"]], "dmp_ground_monic() (in module sympy.polys.densetools)": [[219, "sympy.polys.densetools.dmp_ground_monic"]], "dmp_ground_nth() (in module sympy.polys.densebasic)": [[219, "sympy.polys.densebasic.dmp_ground_nth"]], "dmp_ground_p() (in module sympy.polys.densebasic)": [[219, "sympy.polys.densebasic.dmp_ground_p"]], "dmp_ground_primitive() (in module sympy.polys.densetools)": [[219, "sympy.polys.densetools.dmp_ground_primitive"]], "dmp_ground_trunc() (in module sympy.polys.densetools)": [[219, "sympy.polys.densetools.dmp_ground_trunc"]], "dmp_grounds() (in module sympy.polys.densebasic)": [[219, "sympy.polys.densebasic.dmp_grounds"]], "dmp_half_gcdex() (in module sympy.polys.euclidtools)": [[219, "sympy.polys.euclidtools.dmp_half_gcdex"]], "dmp_include() (in module sympy.polys.densebasic)": [[219, "sympy.polys.densebasic.dmp_include"]], "dmp_inflate() (in module sympy.polys.densebasic)": [[219, "sympy.polys.densebasic.dmp_inflate"]], "dmp_inject() (in module sympy.polys.densebasic)": [[219, "sympy.polys.densebasic.dmp_inject"]], "dmp_inner_gcd() (in module sympy.polys.euclidtools)": [[219, "sympy.polys.euclidtools.dmp_inner_gcd"]], "dmp_inner_subresultants() (in module sympy.polys.euclidtools)": [[219, "sympy.polys.euclidtools.dmp_inner_subresultants"]], "dmp_integrate() (in module sympy.polys.densetools)": [[219, "sympy.polys.densetools.dmp_integrate"]], "dmp_integrate_in() (in module sympy.polys.densetools)": [[219, "sympy.polys.densetools.dmp_integrate_in"]], "dmp_invert() (in module sympy.polys.euclidtools)": [[219, "sympy.polys.euclidtools.dmp_invert"]], "dmp_irreducible_p() (in module sympy.polys.factortools)": [[219, "sympy.polys.factortools.dmp_irreducible_p"]], "dmp_l1_norm() (in module sympy.polys.densearith)": [[219, "sympy.polys.densearith.dmp_l1_norm"]], "dmp_lcm() (in module sympy.polys.euclidtools)": [[219, "sympy.polys.euclidtools.dmp_lcm"]], "dmp_lift() (in module sympy.polys.densetools)": [[219, "sympy.polys.densetools.dmp_lift"]], "dmp_list_terms() (in module sympy.polys.densebasic)": [[219, "sympy.polys.densebasic.dmp_list_terms"]], "dmp_max_norm() (in module sympy.polys.densearith)": [[219, "sympy.polys.densearith.dmp_max_norm"]], "dmp_mul() (in module sympy.polys.densearith)": [[219, "sympy.polys.densearith.dmp_mul"]], "dmp_mul_ground() (in module sympy.polys.densearith)": [[219, "sympy.polys.densearith.dmp_mul_ground"]], "dmp_mul_term() (in module sympy.polys.densearith)": [[219, "sympy.polys.densearith.dmp_mul_term"]], "dmp_multi_deflate() (in module sympy.polys.densebasic)": [[219, "sympy.polys.densebasic.dmp_multi_deflate"]], "dmp_neg() (in module sympy.polys.densearith)": [[219, "sympy.polys.densearith.dmp_neg"]], "dmp_negative_p() (in module sympy.polys.densebasic)": [[219, "sympy.polys.densebasic.dmp_negative_p"]], "dmp_nest() (in module sympy.polys.densebasic)": [[219, "sympy.polys.densebasic.dmp_nest"]], "dmp_normal() (in module sympy.polys.densebasic)": [[219, "sympy.polys.densebasic.dmp_normal"]], "dmp_nth() (in module sympy.polys.densebasic)": [[219, "sympy.polys.densebasic.dmp_nth"]], "dmp_one() (in module sympy.polys.densebasic)": [[219, "sympy.polys.densebasic.dmp_one"]], "dmp_one_p() (in module sympy.polys.densebasic)": [[219, "sympy.polys.densebasic.dmp_one_p"]], "dmp_pdiv() (in module sympy.polys.densearith)": [[219, "sympy.polys.densearith.dmp_pdiv"]], "dmp_permute() (in module sympy.polys.densebasic)": [[219, "sympy.polys.densebasic.dmp_permute"]], "dmp_pexquo() (in module sympy.polys.densearith)": [[219, "sympy.polys.densearith.dmp_pexquo"]], "dmp_positive_p() (in module sympy.polys.densebasic)": [[219, "sympy.polys.densebasic.dmp_positive_p"]], "dmp_pow() (in module sympy.polys.densearith)": [[219, "sympy.polys.densearith.dmp_pow"]], "dmp_pquo() (in module sympy.polys.densearith)": [[219, "sympy.polys.densearith.dmp_pquo"]], "dmp_prem() (in module sympy.polys.densearith)": [[219, "sympy.polys.densearith.dmp_prem"]], "dmp_primitive() (in module sympy.polys.euclidtools)": [[219, "sympy.polys.euclidtools.dmp_primitive"]], "dmp_primitive_prs() (in module sympy.polys.euclidtools)": [[219, "sympy.polys.euclidtools.dmp_primitive_prs"]], "dmp_prs_resultant() (in module sympy.polys.euclidtools)": [[219, "sympy.polys.euclidtools.dmp_prs_resultant"]], "dmp_qq_collins_resultant() (in module sympy.polys.euclidtools)": [[219, "sympy.polys.euclidtools.dmp_qq_collins_resultant"]], "dmp_qq_heu_gcd() (in module sympy.polys.euclidtools)": [[219, "sympy.polys.euclidtools.dmp_qq_heu_gcd"]], "dmp_quo() (in module sympy.polys.densearith)": [[219, "sympy.polys.densearith.dmp_quo"]], "dmp_quo_ground() (in module sympy.polys.densearith)": [[219, "sympy.polys.densearith.dmp_quo_ground"]], "dmp_raise() (in module sympy.polys.densebasic)": [[219, "sympy.polys.densebasic.dmp_raise"]], "dmp_rem() (in module sympy.polys.densearith)": [[219, "sympy.polys.densearith.dmp_rem"]], "dmp_resultant() (in module sympy.polys.euclidtools)": [[219, "sympy.polys.euclidtools.dmp_resultant"]], "dmp_revert() (in module sympy.polys.densetools)": [[219, "sympy.polys.densetools.dmp_revert"]], "dmp_rr_div() (in module sympy.polys.densearith)": [[219, "sympy.polys.densearith.dmp_rr_div"]], "dmp_rr_prs_gcd() (in module sympy.polys.euclidtools)": [[219, "sympy.polys.euclidtools.dmp_rr_prs_gcd"]], "dmp_slice() (in module sympy.polys.densebasic)": [[219, "sympy.polys.densebasic.dmp_slice"]], "dmp_sqr() (in module sympy.polys.densearith)": [[219, "sympy.polys.densearith.dmp_sqr"]], "dmp_strip() (in module sympy.polys.densebasic)": [[219, "sympy.polys.densebasic.dmp_strip"]], "dmp_sub() (in module sympy.polys.densearith)": [[219, "sympy.polys.densearith.dmp_sub"]], "dmp_sub_ground() (in module sympy.polys.densearith)": [[219, "sympy.polys.densearith.dmp_sub_ground"]], "dmp_sub_mul() (in module sympy.polys.densearith)": [[219, "sympy.polys.densearith.dmp_sub_mul"]], "dmp_sub_term() (in module sympy.polys.densearith)": [[219, "sympy.polys.densearith.dmp_sub_term"]], "dmp_subresultants() (in module sympy.polys.euclidtools)": [[219, "sympy.polys.euclidtools.dmp_subresultants"]], "dmp_swap() (in module sympy.polys.densebasic)": [[219, "sympy.polys.densebasic.dmp_swap"]], "dmp_terms_gcd() (in module sympy.polys.densebasic)": [[219, "sympy.polys.densebasic.dmp_terms_gcd"]], "dmp_to_dict() (in module sympy.polys.densebasic)": [[219, "sympy.polys.densebasic.dmp_to_dict"]], "dmp_to_tuple() (in module sympy.polys.densebasic)": [[219, "sympy.polys.densebasic.dmp_to_tuple"]], "dmp_trial_division() (in module sympy.polys.factortools)": [[219, "sympy.polys.factortools.dmp_trial_division"]], "dmp_true_lt() (in module sympy.polys.densebasic)": [[219, "sympy.polys.densebasic.dmp_true_LT"]], "dmp_trunc() (in module sympy.polys.densetools)": [[219, "sympy.polys.densetools.dmp_trunc"]], "dmp_validate() (in module sympy.polys.densebasic)": [[219, "sympy.polys.densebasic.dmp_validate"]], "dmp_zero() (in module sympy.polys.densebasic)": [[219, "sympy.polys.densebasic.dmp_zero"]], "dmp_zero_p() (in module sympy.polys.densebasic)": [[219, "sympy.polys.densebasic.dmp_zero_p"]], "dmp_zeros() (in module sympy.polys.densebasic)": [[219, "sympy.polys.densebasic.dmp_zeros"]], "dmp_zz_collins_resultant() (in module sympy.polys.euclidtools)": [[219, "sympy.polys.euclidtools.dmp_zz_collins_resultant"]], "dmp_zz_diophantine() (in module sympy.polys.factortools)": [[219, "sympy.polys.factortools.dmp_zz_diophantine"]], "dmp_zz_factor() (in module sympy.polys.factortools)": [[219, "sympy.polys.factortools.dmp_zz_factor"]], "dmp_zz_heu_gcd() (in module sympy.polys.euclidtools)": [[219, "sympy.polys.euclidtools.dmp_zz_heu_gcd"]], "dmp_zz_mignotte_bound() (in module sympy.polys.factortools)": [[219, "sympy.polys.factortools.dmp_zz_mignotte_bound"]], "dmp_zz_modular_resultant() (in module sympy.polys.euclidtools)": [[219, "sympy.polys.euclidtools.dmp_zz_modular_resultant"]], "dmp_zz_wang() (in module sympy.polys.factortools)": [[219, "sympy.polys.factortools.dmp_zz_wang"]], "dmp_zz_wang_hensel_lifting() (in module sympy.polys.factortools)": [[219, "sympy.polys.factortools.dmp_zz_wang_hensel_lifting"]], "dmp_zz_wang_lead_coeffs() (in module sympy.polys.factortools)": [[219, "sympy.polys.factortools.dmp_zz_wang_lead_coeffs"]], "dmp_zz_wang_non_divisors() (in module sympy.polys.factortools)": [[219, "sympy.polys.factortools.dmp_zz_wang_non_divisors"]], "dmp_zz_wang_test_points() (in module sympy.polys.factortools)": [[219, "sympy.polys.factortools.dmp_zz_wang_test_points"]], "dup_content() (in module sympy.polys.densetools)": [[219, "sympy.polys.densetools.dup_content"]], "dup_cyclotomic_p() (in module sympy.polys.factortools)": [[219, "sympy.polys.factortools.dup_cyclotomic_p"]], "dup_decompose() (in module sympy.polys.densetools)": [[219, "sympy.polys.densetools.dup_decompose"]], "dup_extract() (in module sympy.polys.densetools)": [[219, "sympy.polys.densetools.dup_extract"]], "dup_gf_factor() (in module sympy.polys.factortools)": [[219, "sympy.polys.factortools.dup_gf_factor"]], "dup_lshift() (in module sympy.polys.densearith)": [[219, "sympy.polys.densearith.dup_lshift"]], "dup_mirror() (in module sympy.polys.densetools)": [[219, "sympy.polys.densetools.dup_mirror"]], "dup_monic() (in module sympy.polys.densetools)": [[219, "sympy.polys.densetools.dup_monic"]], "dup_primitive() (in module sympy.polys.densetools)": [[219, "sympy.polys.densetools.dup_primitive"]], "dup_random() (in module sympy.polys.densebasic)": [[219, "sympy.polys.densebasic.dup_random"]], "dup_real_imag() (in module sympy.polys.densetools)": [[219, "sympy.polys.densetools.dup_real_imag"]], "dup_reverse() (in module sympy.polys.densebasic)": [[219, "sympy.polys.densebasic.dup_reverse"]], "dup_rshift() (in module sympy.polys.densearith)": [[219, "sympy.polys.densearith.dup_rshift"]], "dup_scale() (in module sympy.polys.densetools)": [[219, "sympy.polys.densetools.dup_scale"]], "dup_shift() (in module sympy.polys.densetools)": [[219, "sympy.polys.densetools.dup_shift"]], "dup_sign_variations() (in module sympy.polys.densetools)": [[219, "sympy.polys.densetools.dup_sign_variations"]], "dup_transform() (in module sympy.polys.densetools)": [[219, "sympy.polys.densetools.dup_transform"]], "dup_zz_cyclotomic_factor() (in module sympy.polys.factortools)": [[219, "sympy.polys.factortools.dup_zz_cyclotomic_factor"]], "dup_zz_cyclotomic_poly() (in module sympy.polys.factortools)": [[219, "sympy.polys.factortools.dup_zz_cyclotomic_poly"]], "dup_zz_factor() (in module sympy.polys.factortools)": [[219, "sympy.polys.factortools.dup_zz_factor"]], "dup_zz_factor_sqf() (in module sympy.polys.factortools)": [[219, "sympy.polys.factortools.dup_zz_factor_sqf"]], "dup_zz_hensel_lift() (in module sympy.polys.factortools)": [[219, "sympy.polys.factortools.dup_zz_hensel_lift"]], "dup_zz_hensel_step() (in module sympy.polys.factortools)": [[219, "sympy.polys.factortools.dup_zz_hensel_step"]], "dup_zz_irreducible_p() (in module sympy.polys.factortools)": [[219, "sympy.polys.factortools.dup_zz_irreducible_p"]], "dup_zz_zassenhaus() (in module sympy.polys.factortools)": [[219, "sympy.polys.factortools.dup_zz_zassenhaus"]], "func_field_modgcd() (in module sympy.polys.modulargcd)": [[219, "sympy.polys.modulargcd.func_field_modgcd"]], "gf_lc() (in module sympy.polys.galoistools)": [[219, "sympy.polys.galoistools.gf_LC"]], "gf_qbasis() (in module sympy.polys.galoistools)": [[219, "sympy.polys.galoistools.gf_Qbasis"]], "gf_qmatrix() (in module sympy.polys.galoistools)": [[219, "sympy.polys.galoistools.gf_Qmatrix"]], "gf_tc() (in module sympy.polys.galoistools)": [[219, "sympy.polys.galoistools.gf_TC"]], "gf_add() (in module sympy.polys.galoistools)": [[219, "sympy.polys.galoistools.gf_add"]], "gf_add_ground() (in module sympy.polys.galoistools)": [[219, "sympy.polys.galoistools.gf_add_ground"]], "gf_add_mul() (in module sympy.polys.galoistools)": [[219, "sympy.polys.galoistools.gf_add_mul"]], "gf_berlekamp() (in module sympy.polys.galoistools)": [[219, "sympy.polys.galoistools.gf_berlekamp"]], "gf_cofactors() (in module sympy.polys.galoistools)": [[219, "sympy.polys.galoistools.gf_cofactors"]], "gf_compose() (in module sympy.polys.galoistools)": [[219, "sympy.polys.galoistools.gf_compose"]], "gf_compose_mod() (in module sympy.polys.galoistools)": [[219, "sympy.polys.galoistools.gf_compose_mod"]], "gf_crt() (in module sympy.polys.galoistools)": [[219, "sympy.polys.galoistools.gf_crt"]], "gf_crt1() (in module sympy.polys.galoistools)": [[219, "sympy.polys.galoistools.gf_crt1"]], "gf_crt2() (in module sympy.polys.galoistools)": [[219, "sympy.polys.galoistools.gf_crt2"]], "gf_csolve() (in module sympy.polys.galoistools)": [[219, "sympy.polys.galoistools.gf_csolve"]], "gf_degree() (in module sympy.polys.galoistools)": [[219, "sympy.polys.galoistools.gf_degree"]], "gf_diff() (in module sympy.polys.galoistools)": [[219, "sympy.polys.galoistools.gf_diff"]], "gf_div() (in module sympy.polys.galoistools)": [[219, "sympy.polys.galoistools.gf_div"]], "gf_eval() (in module sympy.polys.galoistools)": [[219, "sympy.polys.galoistools.gf_eval"]], "gf_expand() (in module sympy.polys.galoistools)": [[219, "sympy.polys.galoistools.gf_expand"]], "gf_exquo() (in module sympy.polys.galoistools)": [[219, "sympy.polys.galoistools.gf_exquo"]], "gf_factor() (in module sympy.polys.galoistools)": [[219, "sympy.polys.galoistools.gf_factor"]], "gf_factor_sqf() (in module sympy.polys.galoistools)": [[219, "sympy.polys.galoistools.gf_factor_sqf"]], "gf_from_dict() (in module sympy.polys.galoistools)": [[219, "sympy.polys.galoistools.gf_from_dict"]], "gf_from_int_poly() (in module sympy.polys.galoistools)": [[219, "sympy.polys.galoistools.gf_from_int_poly"]], "gf_gcd() (in module sympy.polys.galoistools)": [[219, "sympy.polys.galoistools.gf_gcd"]], "gf_gcdex() (in module sympy.polys.galoistools)": [[219, "sympy.polys.galoistools.gf_gcdex"]], "gf_int() (in module sympy.polys.galoistools)": [[219, "sympy.polys.galoistools.gf_int"]], "gf_irreducible() (in module sympy.polys.galoistools)": [[219, "sympy.polys.galoistools.gf_irreducible"]], "gf_irreducible_p() (in module sympy.polys.galoistools)": [[219, "sympy.polys.galoistools.gf_irreducible_p"]], "gf_lcm() (in module sympy.polys.galoistools)": [[219, "sympy.polys.galoistools.gf_lcm"]], "gf_lshift() (in module sympy.polys.galoistools)": [[219, "sympy.polys.galoistools.gf_lshift"]], "gf_monic() (in module sympy.polys.galoistools)": [[219, "sympy.polys.galoistools.gf_monic"]], "gf_mul() (in module sympy.polys.galoistools)": [[219, "sympy.polys.galoistools.gf_mul"]], "gf_mul_ground() (in module sympy.polys.galoistools)": [[219, "sympy.polys.galoistools.gf_mul_ground"]], "gf_multi_eval() (in module sympy.polys.galoistools)": [[219, "sympy.polys.galoistools.gf_multi_eval"]], "gf_neg() (in module sympy.polys.galoistools)": [[219, "sympy.polys.galoistools.gf_neg"]], "gf_normal() (in module sympy.polys.galoistools)": [[219, "sympy.polys.galoistools.gf_normal"]], "gf_pow() (in module sympy.polys.galoistools)": [[219, "sympy.polys.galoistools.gf_pow"]], "gf_pow_mod() (in module sympy.polys.galoistools)": [[219, "sympy.polys.galoistools.gf_pow_mod"]], "gf_quo() (in module sympy.polys.galoistools)": [[219, "sympy.polys.galoistools.gf_quo"]], "gf_quo_ground() (in module sympy.polys.galoistools)": [[219, "sympy.polys.galoistools.gf_quo_ground"]], "gf_random() (in module sympy.polys.galoistools)": [[219, "sympy.polys.galoistools.gf_random"]], "gf_rem() (in module sympy.polys.galoistools)": [[219, "sympy.polys.galoistools.gf_rem"]], "gf_rshift() (in module sympy.polys.galoistools)": [[219, "sympy.polys.galoistools.gf_rshift"]], "gf_shoup() (in module sympy.polys.galoistools)": [[219, "sympy.polys.galoistools.gf_shoup"]], "gf_sqf_list() (in module sympy.polys.galoistools)": [[219, "sympy.polys.galoistools.gf_sqf_list"]], "gf_sqf_p() (in module sympy.polys.galoistools)": [[219, "sympy.polys.galoistools.gf_sqf_p"]], "gf_sqf_part() (in module sympy.polys.galoistools)": [[219, "sympy.polys.galoistools.gf_sqf_part"]], "gf_sqr() (in module sympy.polys.galoistools)": [[219, "sympy.polys.galoistools.gf_sqr"]], "gf_strip() (in module sympy.polys.galoistools)": [[219, "sympy.polys.galoistools.gf_strip"]], "gf_sub() (in module sympy.polys.galoistools)": [[219, "sympy.polys.galoistools.gf_sub"]], "gf_sub_ground() (in module sympy.polys.galoistools)": [[219, "sympy.polys.galoistools.gf_sub_ground"]], "gf_sub_mul() (in module sympy.polys.galoistools)": [[219, "sympy.polys.galoistools.gf_sub_mul"]], "gf_to_dict() (in module sympy.polys.galoistools)": [[219, "sympy.polys.galoistools.gf_to_dict"]], "gf_to_int_poly() (in module sympy.polys.galoistools)": [[219, "sympy.polys.galoistools.gf_to_int_poly"]], "gf_trace_map() (in module sympy.polys.galoistools)": [[219, "sympy.polys.galoistools.gf_trace_map"]], "gf_trunc() (in module sympy.polys.galoistools)": [[219, "sympy.polys.galoistools.gf_trunc"]], "gf_value() (in module sympy.polys.galoistools)": [[219, "sympy.polys.galoistools.gf_value"]], "gf_zassenhaus() (in module sympy.polys.galoistools)": [[219, "sympy.polys.galoistools.gf_zassenhaus"]], "groebner() (in module sympy.polys.groebnertools)": [[219, "sympy.polys.groebnertools.groebner"]], "is_groebner() (in module sympy.polys.groebnertools)": [[219, "sympy.polys.groebnertools.is_groebner"]], "is_minimal() (in module sympy.polys.groebnertools)": [[219, "sympy.polys.groebnertools.is_minimal"]], "is_reduced() (in module sympy.polys.groebnertools)": [[219, "sympy.polys.groebnertools.is_reduced"]], "matrix_fglm() (in module sympy.polys.fglmtools)": [[219, "sympy.polys.fglmtools.matrix_fglm"]], "modgcd_bivariate() (in module sympy.polys.modulargcd)": [[219, "sympy.polys.modulargcd.modgcd_bivariate"]], "modgcd_multivariate() (in module sympy.polys.modulargcd)": [[219, "sympy.polys.modulargcd.modgcd_multivariate"]], "modgcd_univariate() (in module sympy.polys.modulargcd)": [[219, "sympy.polys.modulargcd.modgcd_univariate"]], "red_groebner() (in module sympy.polys.groebnertools)": [[219, "sympy.polys.groebnertools.red_groebner"]], "sdm_lc() (in module sympy.polys.distributedmodules)": [[219, "sympy.polys.distributedmodules.sdm_LC"]], "sdm_lm() (in module sympy.polys.distributedmodules)": [[219, "sympy.polys.distributedmodules.sdm_LM"]], "sdm_lt() (in module sympy.polys.distributedmodules)": [[219, "sympy.polys.distributedmodules.sdm_LT"]], "sdm_add() (in module sympy.polys.distributedmodules)": [[219, "sympy.polys.distributedmodules.sdm_add"]], "sdm_deg() (in module sympy.polys.distributedmodules)": [[219, "sympy.polys.distributedmodules.sdm_deg"]], "sdm_ecart() (in module sympy.polys.distributedmodules)": [[219, "sympy.polys.distributedmodules.sdm_ecart"]], "sdm_from_dict() (in module sympy.polys.distributedmodules)": [[219, "sympy.polys.distributedmodules.sdm_from_dict"]], "sdm_from_vector() (in module sympy.polys.distributedmodules)": [[219, "sympy.polys.distributedmodules.sdm_from_vector"]], "sdm_groebner() (in module sympy.polys.distributedmodules)": [[219, "sympy.polys.distributedmodules.sdm_groebner"]], "sdm_monomial_deg() (in module sympy.polys.distributedmodules)": [[219, "sympy.polys.distributedmodules.sdm_monomial_deg"]], "sdm_monomial_divides() (in module sympy.polys.distributedmodules)": [[219, "sympy.polys.distributedmodules.sdm_monomial_divides"]], "sdm_monomial_mul() (in module sympy.polys.distributedmodules)": [[219, "sympy.polys.distributedmodules.sdm_monomial_mul"]], "sdm_mul_term() (in module sympy.polys.distributedmodules)": [[219, "sympy.polys.distributedmodules.sdm_mul_term"]], "sdm_nf_mora() (in module sympy.polys.distributedmodules)": [[219, "sympy.polys.distributedmodules.sdm_nf_mora"]], "sdm_spoly() (in module sympy.polys.distributedmodules)": [[219, "sympy.polys.distributedmodules.sdm_spoly"]], "sdm_to_dict() (in module sympy.polys.distributedmodules)": [[219, "sympy.polys.distributedmodules.sdm_to_dict"]], "sdm_to_vector() (in module sympy.polys.distributedmodules)": [[219, "sympy.polys.distributedmodules.sdm_to_vector"]], "sdm_zero() (in module sympy.polys.distributedmodules)": [[219, "sympy.polys.distributedmodules.sdm_zero"]], "setup() (in module sympy.polys.polyconfig)": [[219, "sympy.polys.polyconfig.setup"]], "spoly() (in module sympy.polys.groebnertools)": [[219, "sympy.polys.groebnertools.spoly"]], "sympy.polys.polyconfig": [[219, "module-sympy.polys.polyconfig"]], "sympy.polys.polyoptions": [[219, "module-sympy.polys.polyoptions"]], "algintpowers (class in sympy.polys.numberfields.utilities)": [[221, "sympy.polys.numberfields.utilities.AlgIntPowers"]], "endomorphismring (class in sympy.polys.numberfields.modules)": [[221, "sympy.polys.numberfields.modules.EndomorphismRing"]], "innerendomorphism (class in sympy.polys.numberfields.modules)": [[221, "sympy.polys.numberfields.modules.InnerEndomorphism"]], "module (class in sympy.polys.numberfields.modules)": [[221, "sympy.polys.numberfields.modules.Module"]], "moduleelement (class in sympy.polys.numberfields.modules)": [[221, "sympy.polys.numberfields.modules.ModuleElement"]], "moduleendomorphism (class in sympy.polys.numberfields.modules)": [[221, "sympy.polys.numberfields.modules.ModuleEndomorphism"]], "modulehomomorphism (class in sympy.polys.numberfields.modules)": [[221, "sympy.polys.numberfields.modules.ModuleHomomorphism"]], "powerbasis (class in sympy.polys.numberfields.modules)": [[221, "sympy.polys.numberfields.modules.PowerBasis"]], "powerbasiselement (class in sympy.polys.numberfields.modules)": [[221, "sympy.polys.numberfields.modules.PowerBasisElement"]], "primeideal (class in sympy.polys.numberfields.primes)": [[221, "sympy.polys.numberfields.primes.PrimeIdeal"]], "qq_col (sympy.polys.numberfields.modules.moduleelement property)": [[221, "sympy.polys.numberfields.modules.ModuleElement.QQ_col"]], "qq_matrix (sympy.polys.numberfields.modules.submodule property)": [[221, "sympy.polys.numberfields.modules.Submodule.QQ_matrix"]], "submodule (class in sympy.polys.numberfields.modules)": [[221, "sympy.polys.numberfields.modules.Submodule"]], "t (sympy.polys.numberfields.modules.powerbasiselement property)": [[221, "sympy.polys.numberfields.modules.PowerBasisElement.T"]], "__add__() (sympy.polys.numberfields.modules.moduleelement method)": [[221, "sympy.polys.numberfields.modules.ModuleElement.__add__"]], "__add__() (sympy.polys.numberfields.primes.primeideal method)": [[221, "sympy.polys.numberfields.primes.PrimeIdeal.__add__"]], "__call__() (sympy.polys.numberfields.modules.module method)": [[221, "sympy.polys.numberfields.modules.Module.__call__"]], "__init__() (sympy.polys.numberfields.modules.endomorphismring method)": [[221, "sympy.polys.numberfields.modules.EndomorphismRing.__init__"]], "__init__() (sympy.polys.numberfields.modules.innerendomorphism method)": [[221, "sympy.polys.numberfields.modules.InnerEndomorphism.__init__"]], "__init__() (sympy.polys.numberfields.modules.moduleelement method)": [[221, "sympy.polys.numberfields.modules.ModuleElement.__init__"]], "__init__() (sympy.polys.numberfields.modules.moduleendomorphism method)": [[221, "sympy.polys.numberfields.modules.ModuleEndomorphism.__init__"]], "__init__() (sympy.polys.numberfields.modules.modulehomomorphism method)": [[221, "sympy.polys.numberfields.modules.ModuleHomomorphism.__init__"]], "__init__() (sympy.polys.numberfields.modules.powerbasis method)": [[221, "sympy.polys.numberfields.modules.PowerBasis.__init__"]], "__init__() (sympy.polys.numberfields.modules.submodule method)": [[221, "sympy.polys.numberfields.modules.Submodule.__init__"]], "__init__() (sympy.polys.numberfields.primes.primeideal method)": [[221, "sympy.polys.numberfields.primes.PrimeIdeal.__init__"]], "__init__() (sympy.polys.numberfields.utilities.algintpowers method)": [[221, "sympy.polys.numberfields.utilities.AlgIntPowers.__init__"]], "__mod__() (sympy.polys.numberfields.modules.moduleelement method)": [[221, "sympy.polys.numberfields.modules.ModuleElement.__mod__"]], "__mul__() (sympy.polys.numberfields.modules.moduleelement method)": [[221, "sympy.polys.numberfields.modules.ModuleElement.__mul__"]], "__mul__() (sympy.polys.numberfields.primes.primeideal method)": [[221, "sympy.polys.numberfields.primes.PrimeIdeal.__mul__"]], "add() (sympy.polys.numberfields.modules.submodule method)": [[221, "sympy.polys.numberfields.modules.Submodule.add"]], "ancestors() (sympy.polys.numberfields.modules.module method)": [[221, "sympy.polys.numberfields.modules.Module.ancestors"]], "as_expr() (sympy.polys.numberfields.modules.powerbasiselement method)": [[221, "sympy.polys.numberfields.modules.PowerBasisElement.as_expr"]], "as_submodule() (sympy.polys.numberfields.primes.primeideal method)": [[221, "sympy.polys.numberfields.primes.PrimeIdeal.as_submodule"]], "basis_element_pullbacks() (sympy.polys.numberfields.modules.submodule method)": [[221, "sympy.polys.numberfields.modules.Submodule.basis_element_pullbacks"]], "basis_elements() (sympy.polys.numberfields.modules.module method)": [[221, "sympy.polys.numberfields.modules.Module.basis_elements"]], "coeff_search() (in module sympy.polys.numberfields.utilities)": [[221, "sympy.polys.numberfields.utilities.coeff_search"]], "column() (sympy.polys.numberfields.modules.moduleelement method)": [[221, "sympy.polys.numberfields.modules.ModuleElement.column"]], "discard_before() (sympy.polys.numberfields.modules.submodule method)": [[221, "sympy.polys.numberfields.modules.Submodule.discard_before"]], "element_from_anp() (sympy.polys.numberfields.modules.powerbasis method)": [[221, "sympy.polys.numberfields.modules.PowerBasis.element_from_ANP"]], "element_from_alg_num() (sympy.polys.numberfields.modules.powerbasis method)": [[221, "sympy.polys.numberfields.modules.PowerBasis.element_from_alg_num"]], "element_from_poly() (sympy.polys.numberfields.modules.powerbasis method)": [[221, "sympy.polys.numberfields.modules.PowerBasis.element_from_poly"]], "element_from_rational() (sympy.polys.numberfields.modules.module method)": [[221, "sympy.polys.numberfields.modules.Module.element_from_rational"]], "endomorphism_ring() (sympy.polys.numberfields.modules.module method)": [[221, "sympy.polys.numberfields.modules.Module.endomorphism_ring"]], "equiv() (sympy.polys.numberfields.modules.moduleelement method)": [[221, "sympy.polys.numberfields.modules.ModuleElement.equiv"]], "extract_fundamental_discriminant() (in module sympy.polys.numberfields.utilities)": [[221, "sympy.polys.numberfields.utilities.extract_fundamental_discriminant"]], "field_isomorphism() (in module sympy.polys.numberfields.subfield)": [[221, "sympy.polys.numberfields.subfield.field_isomorphism"]], "find_min_poly() (in module sympy.polys.numberfields.modules)": [[221, "sympy.polys.numberfields.modules.find_min_poly"]], "from_int_list() (sympy.polys.numberfields.modules.moduleelement class method)": [[221, "sympy.polys.numberfields.modules.ModuleElement.from_int_list"]], "galois_group() (in module sympy.polys.numberfields.galoisgroups)": [[221, "sympy.polys.numberfields.galoisgroups.galois_group"]], "generator (sympy.polys.numberfields.modules.powerbasiselement property)": [[221, "sympy.polys.numberfields.modules.PowerBasisElement.generator"]], "get_num_denom() (in module sympy.polys.numberfields.utilities)": [[221, "sympy.polys.numberfields.utilities.get_num_denom"]], "inner_endomorphism() (sympy.polys.numberfields.modules.endomorphismring method)": [[221, "sympy.polys.numberfields.modules.EndomorphismRing.inner_endomorphism"]], "is_compat() (sympy.polys.numberfields.modules.moduleelement method)": [[221, "sympy.polys.numberfields.modules.ModuleElement.is_compat"]], "is_compat_col() (sympy.polys.numberfields.modules.module method)": [[221, "sympy.polys.numberfields.modules.Module.is_compat_col"]], "is_inert (sympy.polys.numberfields.primes.primeideal property)": [[221, "sympy.polys.numberfields.primes.PrimeIdeal.is_inert"]], "is_int() (in module sympy.polys.numberfields.utilities)": [[221, "sympy.polys.numberfields.utilities.is_int"]], "is_rat() (in module sympy.polys.numberfields.utilities)": [[221, "sympy.polys.numberfields.utilities.is_rat"]], "is_rational (sympy.polys.numberfields.modules.powerbasiselement property)": [[221, "sympy.polys.numberfields.modules.PowerBasisElement.is_rational"]], "isolate() (in module sympy.polys.numberfields.utilities)": [[221, "sympy.polys.numberfields.utilities.isolate"]], "kernel() (sympy.polys.numberfields.modules.modulehomomorphism method)": [[221, "sympy.polys.numberfields.modules.ModuleHomomorphism.kernel"]], "make_mod_elt() (in module sympy.polys.numberfields.modules)": [[221, "sympy.polys.numberfields.modules.make_mod_elt"]], "matrix() (sympy.polys.numberfields.modules.modulehomomorphism method)": [[221, "sympy.polys.numberfields.modules.ModuleHomomorphism.matrix"]], "minimal_polynomial() (in module sympy.polys.numberfields.minpoly)": [[221, "sympy.polys.numberfields.minpoly.minimal_polynomial"]], "minpoly() (in module sympy.polys.numberfields.minpoly)": [[221, "sympy.polys.numberfields.minpoly.minpoly"]], "mul() (sympy.polys.numberfields.modules.submodule method)": [[221, "sympy.polys.numberfields.modules.Submodule.mul"]], "mult_tab() (sympy.polys.numberfields.modules.module method)": [[221, "sympy.polys.numberfields.modules.Module.mult_tab"]], "n (sympy.polys.numberfields.modules.module property)": [[221, "sympy.polys.numberfields.modules.Module.n"]], "n (sympy.polys.numberfields.modules.moduleelement property)": [[221, "sympy.polys.numberfields.modules.ModuleElement.n"]], "nearest_common_ancestor() (sympy.polys.numberfields.modules.module method)": [[221, "sympy.polys.numberfields.modules.Module.nearest_common_ancestor"]], "norm() (sympy.polys.numberfields.modules.powerbasiselement method)": [[221, "sympy.polys.numberfields.modules.PowerBasisElement.norm"]], "number_field (sympy.polys.numberfields.modules.module property)": [[221, "sympy.polys.numberfields.modules.Module.number_field"]], "numerator() (sympy.polys.numberfields.modules.powerbasiselement method)": [[221, "sympy.polys.numberfields.modules.PowerBasisElement.numerator"]], "one() (sympy.polys.numberfields.modules.module method)": [[221, "sympy.polys.numberfields.modules.Module.one"]], "over_power_basis() (sympy.polys.numberfields.modules.moduleelement method)": [[221, "sympy.polys.numberfields.modules.ModuleElement.over_power_basis"]], "parent (sympy.polys.numberfields.modules.module property)": [[221, "sympy.polys.numberfields.modules.Module.parent"]], "poly() (sympy.polys.numberfields.modules.powerbasiselement method)": [[221, "sympy.polys.numberfields.modules.PowerBasisElement.poly"]], "power_basis_ancestor() (sympy.polys.numberfields.modules.module method)": [[221, "sympy.polys.numberfields.modules.Module.power_basis_ancestor"]], "prime_decomp() (in module sympy.polys.numberfields.primes)": [[221, "sympy.polys.numberfields.primes.prime_decomp"]], "prime_valuation() (in module sympy.polys.numberfields.primes)": [[221, "sympy.polys.numberfields.primes.prime_valuation"]], "primitive_element() (in module sympy.polys.numberfields.subfield)": [[221, "sympy.polys.numberfields.subfield.primitive_element"]], "reduce_anp() (sympy.polys.numberfields.primes.primeideal method)": [[221, "sympy.polys.numberfields.primes.PrimeIdeal.reduce_ANP"]], "reduce_alg_num() (sympy.polys.numberfields.primes.primeideal method)": [[221, "sympy.polys.numberfields.primes.PrimeIdeal.reduce_alg_num"]], "reduce_element() (sympy.polys.numberfields.modules.submodule method)": [[221, "sympy.polys.numberfields.modules.Submodule.reduce_element"]], "reduce_element() (sympy.polys.numberfields.primes.primeideal method)": [[221, "sympy.polys.numberfields.primes.PrimeIdeal.reduce_element"]], "reduced() (sympy.polys.numberfields.modules.moduleelement method)": [[221, "sympy.polys.numberfields.modules.ModuleElement.reduced"]], "reduced() (sympy.polys.numberfields.modules.submodule method)": [[221, "sympy.polys.numberfields.modules.Submodule.reduced"]], "reduced_mod_p() (sympy.polys.numberfields.modules.moduleelement method)": [[221, "sympy.polys.numberfields.modules.ModuleElement.reduced_mod_p"]], "repr() (sympy.polys.numberfields.primes.primeideal method)": [[221, "sympy.polys.numberfields.primes.PrimeIdeal.repr"]], "represent() (sympy.polys.numberfields.modules.endomorphismring method)": [[221, "sympy.polys.numberfields.modules.EndomorphismRing.represent"]], "represent() (sympy.polys.numberfields.modules.module method)": [[221, "sympy.polys.numberfields.modules.Module.represent"]], "represent() (sympy.polys.numberfields.modules.powerbasis method)": [[221, "sympy.polys.numberfields.modules.PowerBasis.represent"]], "represent() (sympy.polys.numberfields.modules.submodule method)": [[221, "sympy.polys.numberfields.modules.Submodule.represent"]], "round_two() (in module sympy.polys.numberfields.basis)": [[221, "sympy.polys.numberfields.basis.round_two"]], "starts_with_unity() (sympy.polys.numberfields.modules.module method)": [[221, "sympy.polys.numberfields.modules.Module.starts_with_unity"]], "submodule_from_gens() (sympy.polys.numberfields.modules.module method)": [[221, "sympy.polys.numberfields.modules.Module.submodule_from_gens"]], "submodule_from_matrix() (sympy.polys.numberfields.modules.module method)": [[221, "sympy.polys.numberfields.modules.Module.submodule_from_matrix"]], "supplement_a_subspace() (in module sympy.polys.numberfields.utilities)": [[221, "sympy.polys.numberfields.utilities.supplement_a_subspace"]], "sympy.polys.numberfields.modules": [[221, "module-sympy.polys.numberfields.modules"]], "sympy.polys.numberfields.subfield": [[221, "module-sympy.polys.numberfields.subfield"]], "test_factor() (sympy.polys.numberfields.primes.primeideal method)": [[221, "sympy.polys.numberfields.primes.PrimeIdeal.test_factor"]], "to_anp() (sympy.polys.numberfields.modules.powerbasiselement method)": [[221, "sympy.polys.numberfields.modules.PowerBasisElement.to_ANP"]], "to_alg_num() (sympy.polys.numberfields.modules.powerbasiselement method)": [[221, "sympy.polys.numberfields.modules.PowerBasisElement.to_alg_num"]], "to_ancestor() (sympy.polys.numberfields.modules.moduleelement method)": [[221, "sympy.polys.numberfields.modules.ModuleElement.to_ancestor"]], "to_number_field() (in module sympy.polys.numberfields.subfield)": [[221, "sympy.polys.numberfields.subfield.to_number_field"]], "to_parent() (sympy.polys.numberfields.modules.moduleelement method)": [[221, "sympy.polys.numberfields.modules.ModuleElement.to_parent"]], "unify() (sympy.polys.numberfields.modules.moduleelement method)": [[221, "sympy.polys.numberfields.modules.ModuleElement.unify"]], "valuation() (sympy.polys.numberfields.primes.primeideal method)": [[221, "sympy.polys.numberfields.primes.PrimeIdeal.valuation"]], "whole_submodule() (sympy.polys.numberfields.modules.module method)": [[221, "sympy.polys.numberfields.modules.Module.whole_submodule"]], "zero() (sympy.polys.numberfields.modules.module method)": [[221, "sympy.polys.numberfields.modules.Module.zero"]], "complexrootof (class in sympy.polys.rootoftools)": [[222, "sympy.polys.rootoftools.ComplexRootOf"]], "ec() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.EC"]], "em() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.EM"]], "et() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.ET"]], "gradedlexorder (class in sympy.polys.orderings)": [[222, "sympy.polys.orderings.GradedLexOrder"]], "groebnerbasis (class in sympy.polys.polytools)": [[222, "sympy.polys.polytools.GroebnerBasis"]], "lc() (in module sympy.polys.polytools)": [[222, "sympy.polys.polytools.LC"]], "lc() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.LC"]], "lm() (in module sympy.polys.polytools)": [[222, "sympy.polys.polytools.LM"]], "lm() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.LM"]], "lt() (in module sympy.polys.polytools)": [[222, "sympy.polys.polytools.LT"]], "lt() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.LT"]], "lexorder (class in sympy.polys.orderings)": [[222, "sympy.polys.orderings.LexOrder"]], "monomial (class in sympy.polys.monomials)": [[222, "sympy.polys.monomials.Monomial"]], "monomialorder (class in sympy.polys.orderings)": [[222, "sympy.polys.orderings.MonomialOrder"]], "poly (class in sympy.polys.polytools)": [[222, "sympy.polys.polytools.Poly"]], "purepoly (class in sympy.polys.polytools)": [[222, "sympy.polys.polytools.PurePoly"]], "reversedgradedlexorder (class in sympy.polys.orderings)": [[222, "sympy.polys.orderings.ReversedGradedLexOrder"]], "rootof (class in sympy.polys.rootoftools)": [[222, "sympy.polys.rootoftools.RootOf"]], "rootsum (class in sympy.polys.rootoftools)": [[222, "sympy.polys.rootoftools.RootSum"]], "tc() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.TC"]], "_all_roots() (sympy.polys.rootoftools.complexrootof class method)": [[222, "sympy.polys.rootoftools.ComplexRootOf._all_roots"]], "_complexes_index() (sympy.polys.rootoftools.complexrootof class method)": [[222, "sympy.polys.rootoftools.ComplexRootOf._complexes_index"]], "_complexes_sorted() (sympy.polys.rootoftools.complexrootof class method)": [[222, "sympy.polys.rootoftools.ComplexRootOf._complexes_sorted"]], "_count_roots() (sympy.polys.rootoftools.complexrootof class method)": [[222, "sympy.polys.rootoftools.ComplexRootOf._count_roots"]], "_ensure_complexes_init() (sympy.polys.rootoftools.complexrootof method)": [[222, "sympy.polys.rootoftools.ComplexRootOf._ensure_complexes_init"]], "_ensure_reals_init() (sympy.polys.rootoftools.complexrootof method)": [[222, "sympy.polys.rootoftools.ComplexRootOf._ensure_reals_init"]], "_eval_evalf() (sympy.polys.rootoftools.complexrootof method)": [[222, "sympy.polys.rootoftools.ComplexRootOf._eval_evalf"]], "_eval_is_imaginary() (sympy.polys.rootoftools.complexrootof method)": [[222, "sympy.polys.rootoftools.ComplexRootOf._eval_is_imaginary"]], "_eval_is_real() (sympy.polys.rootoftools.complexrootof method)": [[222, "sympy.polys.rootoftools.ComplexRootOf._eval_is_real"]], "_get_complexes() (sympy.polys.rootoftools.complexrootof class method)": [[222, "sympy.polys.rootoftools.ComplexRootOf._get_complexes"]], "_get_complexes_sqf() (sympy.polys.rootoftools.complexrootof class method)": [[222, "sympy.polys.rootoftools.ComplexRootOf._get_complexes_sqf"]], "_get_interval() (sympy.polys.rootoftools.complexrootof method)": [[222, "sympy.polys.rootoftools.ComplexRootOf._get_interval"]], "_get_reals() (sympy.polys.rootoftools.complexrootof class method)": [[222, "sympy.polys.rootoftools.ComplexRootOf._get_reals"]], "_get_reals_sqf() (sympy.polys.rootoftools.complexrootof class method)": [[222, "sympy.polys.rootoftools.ComplexRootOf._get_reals_sqf"]], "_get_roots() (sympy.polys.rootoftools.complexrootof class method)": [[222, "sympy.polys.rootoftools.ComplexRootOf._get_roots"]], "_indexed_root() (sympy.polys.rootoftools.complexrootof class method)": [[222, "sympy.polys.rootoftools.ComplexRootOf._indexed_root"]], "_new() (sympy.polys.rootoftools.complexrootof class method)": [[222, "sympy.polys.rootoftools.ComplexRootOf._new"]], "_postprocess_root() (sympy.polys.rootoftools.complexrootof class method)": [[222, "sympy.polys.rootoftools.ComplexRootOf._postprocess_root"]], "_preprocess_roots() (sympy.polys.rootoftools.complexrootof class method)": [[222, "sympy.polys.rootoftools.ComplexRootOf._preprocess_roots"]], "_real_roots() (sympy.polys.rootoftools.complexrootof class method)": [[222, "sympy.polys.rootoftools.ComplexRootOf._real_roots"]], "_reals_index() (sympy.polys.rootoftools.complexrootof class method)": [[222, "sympy.polys.rootoftools.ComplexRootOf._reals_index"]], "_reals_sorted() (sympy.polys.rootoftools.complexrootof class method)": [[222, "sympy.polys.rootoftools.ComplexRootOf._reals_sorted"]], "_refine_complexes() (sympy.polys.rootoftools.complexrootof class method)": [[222, "sympy.polys.rootoftools.ComplexRootOf._refine_complexes"]], "_reset() (sympy.polys.rootoftools.complexrootof method)": [[222, "sympy.polys.rootoftools.ComplexRootOf._reset"]], "_roots_trivial() (sympy.polys.rootoftools.complexrootof class method)": [[222, "sympy.polys.rootoftools.ComplexRootOf._roots_trivial"]], "_set_interval() (sympy.polys.rootoftools.complexrootof method)": [[222, "sympy.polys.rootoftools.ComplexRootOf._set_interval"]], "abs() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.abs"]], "add() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.add"]], "add_ground() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.add_ground"]], "all_coeffs() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.all_coeffs"]], "all_monoms() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.all_monoms"]], "all_roots() (in module sympy.polys.polytools)": [[222, "sympy.polys.polytools.all_roots"]], "all_roots() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.all_roots"]], "all_roots() (sympy.polys.rootoftools.complexrootof class method)": [[222, "sympy.polys.rootoftools.ComplexRootOf.all_roots"]], "all_terms() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.all_terms"]], "andre_poly() (in module sympy.polys.appellseqs)": [[222, "sympy.polys.appellseqs.andre_poly"]], "apart() (in module sympy.polys.partfrac)": [[222, "sympy.polys.partfrac.apart"]], "apart_list() (in module sympy.polys.partfrac)": [[222, "sympy.polys.partfrac.apart_list"]], "as_dict() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.as_dict"]], "as_expr() (sympy.polys.monomials.monomial method)": [[222, "sympy.polys.monomials.Monomial.as_expr"]], "as_expr() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.as_expr"]], "as_list() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.as_list"]], "as_poly() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.as_poly"]], "assemble_partfrac_list() (in module sympy.polys.partfrac)": [[222, "sympy.polys.partfrac.assemble_partfrac_list"]], "bernoulli_c_poly() (in module sympy.polys.appellseqs)": [[222, "sympy.polys.appellseqs.bernoulli_c_poly"]], "bernoulli_poly() (in module sympy.polys.appellseqs)": [[222, "sympy.polys.appellseqs.bernoulli_poly"]], "cancel() (in module sympy.polys.polytools)": [[222, "sympy.polys.polytools.cancel"]], "cancel() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.cancel"]], "chebyshevt_poly() (in module sympy.polys.orthopolys)": [[222, "sympy.polys.orthopolys.chebyshevt_poly"]], "chebyshevu_poly() (in module sympy.polys.orthopolys)": [[222, "sympy.polys.orthopolys.chebyshevu_poly"]], "clear_cache() (sympy.polys.rootoftools.complexrootof class method)": [[222, "sympy.polys.rootoftools.ComplexRootOf.clear_cache"]], "clear_denoms() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.clear_denoms"]], "coeff_monomial() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.coeff_monomial"]], "coeffs() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.coeffs"]], "cofactors() (in module sympy.polys.polytools)": [[222, "sympy.polys.polytools.cofactors"]], "cofactors() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.cofactors"]], "compose() (in module sympy.polys.polytools)": [[222, "sympy.polys.polytools.compose"]], "compose() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.compose"]], "construct_domain() (in module sympy.polys.constructor)": [[222, "sympy.polys.constructor.construct_domain"]], "contains() (sympy.polys.polytools.groebnerbasis method)": [[222, "sympy.polys.polytools.GroebnerBasis.contains"]], "content() (in module sympy.polys.polytools)": [[222, "sympy.polys.polytools.content"]], "content() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.content"]], "count_roots() (in module sympy.polys.polytools)": [[222, "sympy.polys.polytools.count_roots"]], "count_roots() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.count_roots"]], "cyclotomic_poly() (in module sympy.polys.specialpolys)": [[222, "sympy.polys.specialpolys.cyclotomic_poly"]], "decompose() (in module sympy.polys.polytools)": [[222, "sympy.polys.polytools.decompose"]], "decompose() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.decompose"]], "deflate() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.deflate"]], "degree() (in module sympy.polys.polytools)": [[222, "sympy.polys.polytools.degree"]], "degree() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.degree"]], "degree_list() (in module sympy.polys.polytools)": [[222, "sympy.polys.polytools.degree_list"]], "degree_list() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.degree_list"]], "diff() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.diff"]], "discriminant() (in module sympy.polys.polytools)": [[222, "sympy.polys.polytools.discriminant"]], "discriminant() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.discriminant"]], "dispersion() (in module sympy.polys.dispersion)": [[222, "sympy.polys.dispersion.dispersion"]], "dispersion() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.dispersion"]], "dispersionset() (in module sympy.polys.dispersion)": [[222, "sympy.polys.dispersion.dispersionset"]], "dispersionset() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.dispersionset"]], "div() (in module sympy.polys.polytools)": [[222, "sympy.polys.polytools.div"]], "div() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.div"]], "domain (sympy.polys.polytools.poly property)": [[222, "sympy.polys.polytools.Poly.domain"]], "eject() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.eject"]], "euler_poly() (in module sympy.polys.appellseqs)": [[222, "sympy.polys.appellseqs.euler_poly"]], "eval() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.eval"]], "eval_approx() (sympy.polys.rootoftools.complexrootof method)": [[222, "sympy.polys.rootoftools.ComplexRootOf.eval_approx"]], "eval_rational() (sympy.polys.rootoftools.complexrootof method)": [[222, "sympy.polys.rootoftools.ComplexRootOf.eval_rational"]], "exclude() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.exclude"]], "exquo() (in module sympy.polys.polytools)": [[222, "sympy.polys.polytools.exquo"]], "exquo() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.exquo"]], "exquo_ground() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.exquo_ground"]], "factor() (in module sympy.polys.polytools)": [[222, "sympy.polys.polytools.factor"]], "factor_list() (in module sympy.polys.polytools)": [[222, "sympy.polys.polytools.factor_list"]], "factor_list() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.factor_list"]], "factor_list_include() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.factor_list_include"]], "fglm() (sympy.polys.polytools.groebnerbasis method)": [[222, "sympy.polys.polytools.GroebnerBasis.fglm"]], "free_symbols (sympy.polys.polytools.poly property)": [[222, "sympy.polys.polytools.Poly.free_symbols"]], "free_symbols (sympy.polys.polytools.purepoly property)": [[222, "sympy.polys.polytools.PurePoly.free_symbols"]], "free_symbols_in_domain (sympy.polys.polytools.poly property)": [[222, "sympy.polys.polytools.Poly.free_symbols_in_domain"]], "from_dict() (sympy.polys.polytools.poly class method)": [[222, "sympy.polys.polytools.Poly.from_dict"]], "from_expr() (sympy.polys.polytools.poly class method)": [[222, "sympy.polys.polytools.Poly.from_expr"]], "from_list() (sympy.polys.polytools.poly class method)": [[222, "sympy.polys.polytools.Poly.from_list"]], "from_poly() (sympy.polys.polytools.poly class method)": [[222, "sympy.polys.polytools.Poly.from_poly"]], "galois_group() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.galois_group"]], "gcd() (in module sympy.polys.polytools)": [[222, "sympy.polys.polytools.gcd"]], "gcd() (sympy.polys.monomials.monomial method)": [[222, "sympy.polys.monomials.Monomial.gcd"]], "gcd() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.gcd"]], "gcd_list() (in module sympy.polys.polytools)": [[222, "sympy.polys.polytools.gcd_list"]], "gcdex() (in module sympy.polys.polytools)": [[222, "sympy.polys.polytools.gcdex"]], "gcdex() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.gcdex"]], "gegenbauer_poly() (in module sympy.polys.orthopolys)": [[222, "sympy.polys.orthopolys.gegenbauer_poly"]], "gen (sympy.polys.polytools.poly property)": [[222, "sympy.polys.polytools.Poly.gen"]], "genocchi_poly() (in module sympy.polys.appellseqs)": [[222, "sympy.polys.appellseqs.genocchi_poly"]], "get_domain() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.get_domain"]], "get_modulus() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.get_modulus"]], "gff() (in module sympy.polys.polytools)": [[222, "sympy.polys.polytools.gff"]], "gff_list() (in module sympy.polys.polytools)": [[222, "sympy.polys.polytools.gff_list"]], "gff_list() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.gff_list"]], "groebner() (in module sympy.polys.polytools)": [[222, "sympy.polys.polytools.groebner"]], "ground_roots() (in module sympy.polys.polytools)": [[222, "sympy.polys.polytools.ground_roots"]], "ground_roots() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.ground_roots"]], "half_gcdex() (in module sympy.polys.polytools)": [[222, "sympy.polys.polytools.half_gcdex"]], "half_gcdex() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.half_gcdex"]], "has_only_gens() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.has_only_gens"]], "hermite_poly() (in module sympy.polys.orthopolys)": [[222, "sympy.polys.orthopolys.hermite_poly"]], "hermite_prob_poly() (in module sympy.polys.orthopolys)": [[222, "sympy.polys.orthopolys.hermite_prob_poly"]], "homogeneous_order() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.homogeneous_order"]], "homogenize() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.homogenize"]], "horner() (in module sympy.polys.polyfuncs)": [[222, "sympy.polys.polyfuncs.horner"]], "inject() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.inject"]], "integrate() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.integrate"]], "interpolate() (in module sympy.polys.polyfuncs)": [[222, "sympy.polys.polyfuncs.interpolate"]], "interpolating_poly() (in module sympy.polys.specialpolys)": [[222, "sympy.polys.specialpolys.interpolating_poly"]], "intervals() (in module sympy.polys.polytools)": [[222, "sympy.polys.polytools.intervals"]], "intervals() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.intervals"]], "invert() (in module sympy.polys.polytools)": [[222, "sympy.polys.polytools.invert"]], "invert() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.invert"]], "is_cyclotomic (sympy.polys.polytools.poly property)": [[222, "sympy.polys.polytools.Poly.is_cyclotomic"]], "is_ground (sympy.polys.polytools.poly property)": [[222, "sympy.polys.polytools.Poly.is_ground"]], "is_homogeneous (sympy.polys.polytools.poly property)": [[222, "sympy.polys.polytools.Poly.is_homogeneous"]], "is_irreducible (sympy.polys.polytools.poly property)": [[222, "sympy.polys.polytools.Poly.is_irreducible"]], "is_linear (sympy.polys.polytools.poly property)": [[222, "sympy.polys.polytools.Poly.is_linear"]], "is_monic (sympy.polys.polytools.poly property)": [[222, "sympy.polys.polytools.Poly.is_monic"]], "is_monomial (sympy.polys.polytools.poly property)": [[222, "sympy.polys.polytools.Poly.is_monomial"]], "is_multivariate (sympy.polys.polytools.poly property)": [[222, "sympy.polys.polytools.Poly.is_multivariate"]], "is_one (sympy.polys.polytools.poly property)": [[222, "sympy.polys.polytools.Poly.is_one"]], "is_primitive (sympy.polys.polytools.poly property)": [[222, "sympy.polys.polytools.Poly.is_primitive"]], "is_quadratic (sympy.polys.polytools.poly property)": [[222, "sympy.polys.polytools.Poly.is_quadratic"]], "is_sqf (sympy.polys.polytools.poly property)": [[222, "sympy.polys.polytools.Poly.is_sqf"]], "is_univariate (sympy.polys.polytools.poly property)": [[222, "sympy.polys.polytools.Poly.is_univariate"]], "is_zero (sympy.polys.polytools.poly property)": [[222, "sympy.polys.polytools.Poly.is_zero"]], "is_zero_dimensional (sympy.polys.polytools.groebnerbasis property)": [[222, "sympy.polys.polytools.GroebnerBasis.is_zero_dimensional"]], "is_zero_dimensional() (in module sympy.polys.polytools)": [[222, "sympy.polys.polytools.is_zero_dimensional"]], "itermonomials() (in module sympy.polys.monomials)": [[222, "sympy.polys.monomials.itermonomials"]], "jacobi_poly() (in module sympy.polys.orthopolys)": [[222, "sympy.polys.orthopolys.jacobi_poly"]], "l1_norm() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.l1_norm"]], "laguerre_poly() (in module sympy.polys.orthopolys)": [[222, "sympy.polys.orthopolys.laguerre_poly"]], "lcm() (in module sympy.polys.polytools)": [[222, "sympy.polys.polytools.lcm"]], "lcm() (sympy.polys.monomials.monomial method)": [[222, "sympy.polys.monomials.Monomial.lcm"]], "lcm() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.lcm"]], "lcm_list() (in module sympy.polys.polytools)": [[222, "sympy.polys.polytools.lcm_list"]], "legendre_poly() (in module sympy.polys.orthopolys)": [[222, "sympy.polys.orthopolys.legendre_poly"]], "length() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.length"]], "lift() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.lift"]], "ltrim() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.ltrim"]], "make_monic_over_integers_by_scaling_roots() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.make_monic_over_integers_by_scaling_roots"]], "match() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.match"]], "max_norm() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.max_norm"]], "monic() (in module sympy.polys.polytools)": [[222, "sympy.polys.polytools.monic"]], "monic() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.monic"]], "monomial_count() (in module sympy.polys.monomials)": [[222, "sympy.polys.monomials.monomial_count"]], "monoms() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.monoms"]], "mul() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.mul"]], "mul_ground() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.mul_ground"]], "neg() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.neg"]], "new() (sympy.polys.polytools.poly class method)": [[222, "sympy.polys.polytools.Poly.new"]], "new() (sympy.polys.rootoftools.rootsum class method)": [[222, "sympy.polys.rootoftools.RootSum.new"]], "norm() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.norm"]], "nroots() (in module sympy.polys.polytools)": [[222, "sympy.polys.polytools.nroots"]], "nroots() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.nroots"]], "nth() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.nth"]], "nth_power_roots_poly() (in module sympy.polys.polytools)": [[222, "sympy.polys.polytools.nth_power_roots_poly"]], "nth_power_roots_poly() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.nth_power_roots_poly"]], "one (sympy.polys.polytools.poly property)": [[222, "sympy.polys.polytools.Poly.one"]], "parallel_poly_from_expr() (in module sympy.polys.polytools)": [[222, "sympy.polys.polytools.parallel_poly_from_expr"]], "pdiv() (in module sympy.polys.polytools)": [[222, "sympy.polys.polytools.pdiv"]], "pdiv() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.pdiv"]], "per() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.per"]], "pexquo() (in module sympy.polys.polytools)": [[222, "sympy.polys.polytools.pexquo"]], "pexquo() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.pexquo"]], "poly() (in module sympy.polys.polytools)": [[222, "sympy.polys.polytools.poly"]], "poly_from_expr() (in module sympy.polys.polytools)": [[222, "sympy.polys.polytools.poly_from_expr"]], "pow() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.pow"]], "pquo() (in module sympy.polys.polytools)": [[222, "sympy.polys.polytools.pquo"]], "pquo() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.pquo"]], "prem() (in module sympy.polys.polytools)": [[222, "sympy.polys.polytools.prem"]], "prem() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.prem"]], "primitive() (in module sympy.polys.polytools)": [[222, "sympy.polys.polytools.primitive"]], "primitive() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.primitive"]], "quo() (in module sympy.polys.polytools)": [[222, "sympy.polys.polytools.quo"]], "quo() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.quo"]], "quo_ground() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.quo_ground"]], "random_poly() (in module sympy.polys.specialpolys)": [[222, "sympy.polys.specialpolys.random_poly"]], "rat_clear_denoms() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.rat_clear_denoms"]], "real_roots() (in module sympy.polys.polytools)": [[222, "sympy.polys.polytools.real_roots"]], "real_roots() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.real_roots"]], "real_roots() (sympy.polys.rootoftools.complexrootof class method)": [[222, "sympy.polys.rootoftools.ComplexRootOf.real_roots"]], "reduce() (sympy.polys.polytools.groebnerbasis method)": [[222, "sympy.polys.polytools.GroebnerBasis.reduce"]], "reduced() (in module sympy.polys.polytools)": [[222, "sympy.polys.polytools.reduced"]], "refine_root() (in module sympy.polys.polytools)": [[222, "sympy.polys.polytools.refine_root"]], "refine_root() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.refine_root"]], "rem() (in module sympy.polys.polytools)": [[222, "sympy.polys.polytools.rem"]], "rem() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.rem"]], "reorder() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.reorder"]], "replace() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.replace"]], "resultant() (in module sympy.polys.polytools)": [[222, "sympy.polys.polytools.resultant"]], "resultant() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.resultant"]], "retract() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.retract"]], "revert() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.revert"]], "root() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.root"]], "rootof() (in module sympy.polys.rootoftools)": [[222, "sympy.polys.rootoftools.rootof"]], "roots() (in module sympy.polys.polyroots)": [[222, "sympy.polys.polyroots.roots"]], "same_root() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.same_root"]], "set_domain() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.set_domain"]], "set_modulus() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.set_modulus"]], "shift() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.shift"]], "slice() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.slice"]], "spherical_bessel_fn() (in module sympy.polys.orthopolys)": [[222, "sympy.polys.orthopolys.spherical_bessel_fn"]], "sqf() (in module sympy.polys.polytools)": [[222, "sympy.polys.polytools.sqf"]], "sqf_list() (in module sympy.polys.polytools)": [[222, "sympy.polys.polytools.sqf_list"]], "sqf_list() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.sqf_list"]], "sqf_list_include() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.sqf_list_include"]], "sqf_norm() (in module sympy.polys.polytools)": [[222, "sympy.polys.polytools.sqf_norm"]], "sqf_norm() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.sqf_norm"]], "sqf_part() (in module sympy.polys.polytools)": [[222, "sympy.polys.polytools.sqf_part"]], "sqf_part() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.sqf_part"]], "sqr() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.sqr"]], "sturm() (in module sympy.polys.polytools)": [[222, "sympy.polys.polytools.sturm"]], "sturm() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.sturm"]], "sub() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.sub"]], "sub_ground() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.sub_ground"]], "subresultants() (in module sympy.polys.polytools)": [[222, "sympy.polys.polytools.subresultants"]], "subresultants() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.subresultants"]], "swinnerton_dyer_poly() (in module sympy.polys.specialpolys)": [[222, "sympy.polys.specialpolys.swinnerton_dyer_poly"]], "symmetric_poly() (in module sympy.polys.specialpolys)": [[222, "sympy.polys.specialpolys.symmetric_poly"]], "symmetrize() (in module sympy.polys.polyfuncs)": [[222, "sympy.polys.polyfuncs.symmetrize"]], "sympy.polys": [[222, "module-sympy.polys"]], "terms() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.terms"]], "terms_gcd() (in module sympy.polys.polytools)": [[222, "sympy.polys.polytools.terms_gcd"]], "terms_gcd() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.terms_gcd"]], "termwise() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.termwise"]], "to_exact() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.to_exact"]], "to_field() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.to_field"]], "to_ring() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.to_ring"]], "together() (in module sympy.polys.rationaltools)": [[222, "sympy.polys.rationaltools.together"]], "total_degree() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.total_degree"]], "transform() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.transform"]], "trunc() (in module sympy.polys.polytools)": [[222, "sympy.polys.polytools.trunc"]], "trunc() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.trunc"]], "unify() (sympy.polys.polytools.poly method)": [[222, "sympy.polys.polytools.Poly.unify"]], "unit (sympy.polys.polytools.poly property)": [[222, "sympy.polys.polytools.Poly.unit"]], "viete() (in module sympy.polys.polyfuncs)": [[222, "sympy.polys.polyfuncs.viete"]], "zero (sympy.polys.polytools.poly property)": [[222, "sympy.polys.polytools.Poly.zero"]], "_tan1() (in module sympy.polys.ring_series)": [[223, "sympy.polys.ring_series._tan1"]], "mul_xin() (in module sympy.polys.ring_series)": [[223, "sympy.polys.ring_series.mul_xin"]], "pow_xin() (in module sympy.polys.ring_series)": [[223, "sympy.polys.ring_series.pow_xin"]], "rs_lambertw() (in module sympy.polys.ring_series)": [[223, "sympy.polys.ring_series.rs_LambertW"]], "rs_asin() (in module sympy.polys.ring_series)": [[223, "sympy.polys.ring_series.rs_asin"]], "rs_atan() (in module sympy.polys.ring_series)": [[223, "sympy.polys.ring_series.rs_atan"]], "rs_atanh() (in module sympy.polys.ring_series)": [[223, "sympy.polys.ring_series.rs_atanh"]], "rs_compose_add() (in module sympy.polys.ring_series)": [[223, "sympy.polys.ring_series.rs_compose_add"]], "rs_cos() (in module sympy.polys.ring_series)": [[223, "sympy.polys.ring_series.rs_cos"]], "rs_cos_sin() (in module sympy.polys.ring_series)": [[223, "sympy.polys.ring_series.rs_cos_sin"]], "rs_cosh() (in module sympy.polys.ring_series)": [[223, "sympy.polys.ring_series.rs_cosh"]], "rs_cot() (in module sympy.polys.ring_series)": [[223, "sympy.polys.ring_series.rs_cot"]], "rs_diff() (in module sympy.polys.ring_series)": [[223, "sympy.polys.ring_series.rs_diff"]], "rs_exp() (in module sympy.polys.ring_series)": [[223, "sympy.polys.ring_series.rs_exp"]], "rs_fun() (in module sympy.polys.ring_series)": [[223, "sympy.polys.ring_series.rs_fun"]], "rs_hadamard_exp() (in module sympy.polys.ring_series)": [[223, "sympy.polys.ring_series.rs_hadamard_exp"]], "rs_integrate() (in module sympy.polys.ring_series)": [[223, "sympy.polys.ring_series.rs_integrate"]], "rs_is_puiseux() (in module sympy.polys.ring_series)": [[223, "sympy.polys.ring_series.rs_is_puiseux"]], "rs_log() (in module sympy.polys.ring_series)": [[223, "sympy.polys.ring_series.rs_log"]], "rs_mul() (in module sympy.polys.ring_series)": [[223, "sympy.polys.ring_series.rs_mul"]], "rs_newton() (in module sympy.polys.ring_series)": [[223, "sympy.polys.ring_series.rs_newton"]], "rs_nth_root() (in module sympy.polys.ring_series)": [[223, "sympy.polys.ring_series.rs_nth_root"]], "rs_pow() (in module sympy.polys.ring_series)": [[223, "sympy.polys.ring_series.rs_pow"]], "rs_puiseux() (in module sympy.polys.ring_series)": [[223, "sympy.polys.ring_series.rs_puiseux"]], "rs_puiseux2() (in module sympy.polys.ring_series)": [[223, "sympy.polys.ring_series.rs_puiseux2"]], "rs_series_from_list() (in module sympy.polys.ring_series)": [[223, "sympy.polys.ring_series.rs_series_from_list"]], "rs_series_inversion() (in module sympy.polys.ring_series)": [[223, "sympy.polys.ring_series.rs_series_inversion"]], "rs_series_reversion() (in module sympy.polys.ring_series)": [[223, "sympy.polys.ring_series.rs_series_reversion"]], "rs_sin() (in module sympy.polys.ring_series)": [[223, "sympy.polys.ring_series.rs_sin"]], "rs_sinh() (in module sympy.polys.ring_series)": [[223, "sympy.polys.ring_series.rs_sinh"]], "rs_square() (in module sympy.polys.ring_series)": [[223, "sympy.polys.ring_series.rs_square"]], "rs_subs() (in module sympy.polys.ring_series)": [[223, "sympy.polys.ring_series.rs_subs"]], "rs_tan() (in module sympy.polys.ring_series)": [[223, "sympy.polys.ring_series.rs_tan"]], "rs_tanh() (in module sympy.polys.ring_series)": [[223, "sympy.polys.ring_series.rs_tanh"]], "rs_trunc() (in module sympy.polys.ring_series)": [[223, "sympy.polys.ring_series.rs_trunc"]], "_solve_lin_sys() (in module sympy.polys.solvers)": [[224, "sympy.polys.solvers._solve_lin_sys"]], "_solve_lin_sys_component() (in module sympy.polys.solvers)": [[224, "sympy.polys.solvers._solve_lin_sys_component"]], "eqs_to_matrix() (in module sympy.polys.solvers)": [[224, "sympy.polys.solvers.eqs_to_matrix"]], "solve_lin_sys() (in module sympy.polys.solvers)": [[224, "sympy.polys.solvers.solve_lin_sys"]], "sympy.polys.solvers": [[224, "module-sympy.polys.solvers"]], "sympy_eqs_to_ring() (in module sympy.polys.solvers)": [[224, "sympy.polys.solvers.sympy_eqs_to_ring"]], "aesaraprinter (class in sympy.printing.aesaracode)": [[226, "sympy.printing.aesaracode.AesaraPrinter"]], "assignmenterror": [[226, "sympy.printing.codeprinter.AssignmentError"]], "c89codeprinter (class in sympy.printing.c)": [[226, "sympy.printing.c.C89CodePrinter"]], "c99codeprinter (class in sympy.printing.c)": [[226, "sympy.printing.c.C99CodePrinter"]], "cxx11codeprinter (class in sympy.printing.cxx)": [[226, "sympy.printing.cxx.CXX11CodePrinter"]], "cxx98codeprinter (class in sympy.printing.cxx)": [[226, "sympy.printing.cxx.CXX98CodePrinter"]], "codeprinter (class in sympy.printing.codeprinter)": [[226, "sympy.printing.codeprinter.CodePrinter"]], "fcodeprinter (class in sympy.printing.fortran)": [[226, "sympy.printing.fortran.FCodePrinter"]], "g() (in module sympy.printing.pretty.pretty_symbology)": [[226, "sympy.printing.pretty.pretty_symbology.G"], [226, "sympy.printing.pretty.pretty_symbology.g"]], "javascriptcodeprinter (class in sympy.printing.jscode)": [[226, "sympy.printing.jscode.JavascriptCodePrinter"]], "juliacodeprinter (class in sympy.printing.julia)": [[226, "sympy.printing.julia.JuliaCodePrinter"]], "lambdaprinter (class in sympy.printing.lambdarepr)": [[226, "sympy.printing.lambdarepr.LambdaPrinter"]], "latexprinter (class in sympy.printing.latex)": [[226, "sympy.printing.latex.LatexPrinter"]], "mcodeprinter (class in sympy.printing.mathematica)": [[226, "sympy.printing.mathematica.MCodePrinter"]], "maplecodeprinter (class in sympy.printing.maple)": [[226, "sympy.printing.maple.MapleCodePrinter"]], "mathmlcontentprinter (class in sympy.printing.mathml)": [[226, "sympy.printing.mathml.MathMLContentPrinter"]], "mathmlpresentationprinter (class in sympy.printing.mathml)": [[226, "sympy.printing.mathml.MathMLPresentationPrinter"]], "mathmlprinterbase (class in sympy.printing.mathml)": [[226, "sympy.printing.mathml.MathMLPrinterBase"]], "mpmathprinter (class in sympy.printing.pycode)": [[226, "sympy.printing.pycode.MpmathPrinter"]], "octavecodeprinter (class in sympy.printing.octave)": [[226, "sympy.printing.octave.OctaveCodePrinter"]], "precedence (in module sympy.printing.precedence)": [[226, "sympy.printing.precedence.PRECEDENCE"]], "precedence_functions (in module sympy.printing.precedence)": [[226, "sympy.printing.precedence.PRECEDENCE_FUNCTIONS"]], "precedence_values (in module sympy.printing.precedence)": [[226, "sympy.printing.precedence.PRECEDENCE_VALUES"]], "prettyprinter (class in sympy.printing.pretty.pretty)": [[226, "sympy.printing.pretty.pretty.PrettyPrinter"]], "printer (class in sympy.printing.printer)": [[226, "sympy.printing.printer.Printer"]], "rcodeprinter (class in sympy.printing.rcode)": [[226, "sympy.printing.rcode.RCodePrinter"]], "reprprinter (class in sympy.printing.repr)": [[226, "sympy.printing.repr.ReprPrinter"]], "rustcodeprinter (class in sympy.printing.rust)": [[226, "sympy.printing.rust.RustCodePrinter"]], "smtlibprinter (class in sympy.printing.smtlib)": [[226, "sympy.printing.smtlib.SMTLibPrinter"]], "strprinter (class in sympy.printing.str)": [[226, "sympy.printing.str.StrPrinter"]], "u() (in module sympy.printing.pretty.pretty_symbology)": [[226, "sympy.printing.pretty.pretty_symbology.U"]], "vf() (in module sympy.printing.pretty.pretty_symbology)": [[226, "sympy.printing.pretty.pretty_symbology.VF"]], "_default_settings (sympy.printing.smtlib.smtlibprinter attribute)": [[226, "sympy.printing.smtlib.SMTLibPrinter._default_settings"]], "_print() (sympy.printing.printer.printer method)": [[226, "sympy.printing.printer.Printer._print"]], "above() (sympy.printing.pretty.stringpict.stringpict method)": [[226, "sympy.printing.pretty.stringpict.stringPict.above"]], "accepted_latex_functions (in module sympy.printing.latex)": [[226, "sympy.printing.latex.accepted_latex_functions"]], "aesara_code() (in module sympy.printing.aesaracode)": [[226, "sympy.printing.aesaracode.aesara_code"]], "aesara_function() (in module sympy.printing.aesaracode)": [[226, "sympy.printing.aesaracode.aesara_function"]], "annotated() (in module sympy.printing.pretty.pretty_symbology)": [[226, "sympy.printing.pretty.pretty_symbology.annotated"]], "apply() (sympy.printing.pretty.stringpict.prettyform static method)": [[226, "sympy.printing.pretty.stringpict.prettyForm.apply"]], "atoms_table (in module sympy.printing.pretty.pretty_symbology)": [[226, "sympy.printing.pretty.pretty_symbology.atoms_table"]], "below() (sympy.printing.pretty.stringpict.stringpict method)": [[226, "sympy.printing.pretty.stringpict.stringPict.below"]], "ccode() (in module sympy.printing.c)": [[226, "sympy.printing.c.ccode"]], "cxxcode() (in module sympy.printing.codeprinter)": [[226, "sympy.printing.codeprinter.cxxcode"]], "digit_2txt (in module sympy.printing.pretty.pretty_symbology)": [[226, "sympy.printing.pretty.pretty_symbology.digit_2txt"]], "dim_handling() (in module sympy.printing.aesaracode)": [[226, "sympy.printing.aesaracode.dim_handling"]], "doprint() (sympy.printing.aesaracode.aesaraprinter method)": [[226, "sympy.printing.aesaracode.AesaraPrinter.doprint"]], "doprint() (sympy.printing.codeprinter.codeprinter method)": [[226, "sympy.printing.codeprinter.CodePrinter.doprint"]], "doprint() (sympy.printing.mathml.mathmlprinterbase method)": [[226, "sympy.printing.mathml.MathMLPrinterBase.doprint"]], "doprint() (sympy.printing.printer.printer method)": [[226, "sympy.printing.printer.Printer.doprint"]], "dotprint() (in module sympy.printing.dot)": [[226, "sympy.printing.dot.dotprint"]], "emptyprinter() (sympy.printing.repr.reprprinter method)": [[226, "sympy.printing.repr.ReprPrinter.emptyPrinter"]], "fcode() (in module sympy.printing.fortran)": [[226, "sympy.printing.fortran.fcode"]], "frac (in module sympy.printing.pretty.pretty_symbology)": [[226, "sympy.printing.pretty.pretty_symbology.frac"]], "greek_letters (in module sympy.printing.pretty.pretty_symbology)": [[226, "sympy.printing.pretty.pretty_symbology.greek_letters"]], "height() (sympy.printing.pretty.stringpict.stringpict method)": [[226, "sympy.printing.pretty.stringpict.stringPict.height"]], "hobj() (in module sympy.printing.pretty.pretty_symbology)": [[226, "sympy.printing.pretty.pretty_symbology.hobj"]], "indent_code() (sympy.printing.c.c89codeprinter method)": [[226, "sympy.printing.c.C89CodePrinter.indent_code"]], "indent_code() (sympy.printing.fortran.fcodeprinter method)": [[226, "sympy.printing.fortran.FCodePrinter.indent_code"]], "indent_code() (sympy.printing.jscode.javascriptcodeprinter method)": [[226, "sympy.printing.jscode.JavascriptCodePrinter.indent_code"]], "indent_code() (sympy.printing.julia.juliacodeprinter method)": [[226, "sympy.printing.julia.JuliaCodePrinter.indent_code"]], "indent_code() (sympy.printing.octave.octavecodeprinter method)": [[226, "sympy.printing.octave.OctaveCodePrinter.indent_code"]], "indent_code() (sympy.printing.rcode.rcodeprinter method)": [[226, "sympy.printing.rcode.RCodePrinter.indent_code"]], "indent_code() (sympy.printing.rust.rustcodeprinter method)": [[226, "sympy.printing.rust.RustCodePrinter.indent_code"]], "jscode() (in module sympy.printing.jscode)": [[226, "sympy.printing.jscode.jscode"]], "julia_code() (in module sympy.printing.julia)": [[226, "sympy.printing.julia.julia_code"]], "known_fcns_src1 (in module sympy.printing.julia)": [[226, "sympy.printing.julia.known_fcns_src1"]], "known_fcns_src1 (in module sympy.printing.octave)": [[226, "sympy.printing.octave.known_fcns_src1"]], "known_fcns_src2 (in module sympy.printing.julia)": [[226, "sympy.printing.julia.known_fcns_src2"]], "known_fcns_src2 (in module sympy.printing.octave)": [[226, "sympy.printing.octave.known_fcns_src2"]], "known_functions (in module sympy.printing.jscode)": [[226, "sympy.printing.jscode.known_functions"]], "known_functions (in module sympy.printing.mathematica)": [[226, "sympy.printing.mathematica.known_functions"]], "known_functions (in module sympy.printing.rcode)": [[226, "sympy.printing.rcode.known_functions"]], "known_functions (in module sympy.printing.rust)": [[226, "sympy.printing.rust.known_functions"]], "known_functions_c89 (in module sympy.printing.c)": [[226, "sympy.printing.c.known_functions_C89"]], "known_functions_c99 (in module sympy.printing.c)": [[226, "sympy.printing.c.known_functions_C99"]], "lambdarepr() (in module sympy.printing.lambdarepr)": [[226, "sympy.printing.lambdarepr.lambdarepr"]], "latex() (in module sympy.printing.latex)": [[226, "sympy.printing.latex.latex"]], "left() (sympy.printing.pretty.stringpict.stringpict method)": [[226, "sympy.printing.pretty.stringpict.stringPict.left"]], "leftslash() (sympy.printing.pretty.stringpict.stringpict method)": [[226, "sympy.printing.pretty.stringpict.stringPict.leftslash"]], "maple_code() (in module sympy.printing.maple)": [[226, "sympy.printing.maple.maple_code"]], "mathematica_code() (in module sympy.printing.mathematica)": [[226, "sympy.printing.mathematica.mathematica_code"]], "mathml() (in module sympy.printing.mathml)": [[226, "sympy.printing.mathml.mathml"]], "mathml_tag() (sympy.printing.mathml.mathmlcontentprinter method)": [[226, "sympy.printing.mathml.MathMLContentPrinter.mathml_tag"]], "mathml_tag() (sympy.printing.mathml.mathmlpresentationprinter method)": [[226, "sympy.printing.mathml.MathMLPresentationPrinter.mathml_tag"]], "next() (sympy.printing.pretty.stringpict.stringpict static method)": [[226, "sympy.printing.pretty.stringpict.stringPict.next"]], "octave_code() (in module sympy.printing.octave)": [[226, "sympy.printing.octave.octave_code"]], "parens() (sympy.printing.pretty.stringpict.stringpict method)": [[226, "sympy.printing.pretty.stringpict.stringPict.parens"]], "parenthesize_super() (sympy.printing.latex.latexprinter method)": [[226, "sympy.printing.latex.LatexPrinter.parenthesize_super"]], "pprint_nodes() (in module sympy.printing.tree)": [[226, "sympy.printing.tree.pprint_nodes"]], "precedence() (in module sympy.printing.precedence)": [[226, "sympy.printing.precedence.precedence"]], "pretty() (in module sympy.printing.pretty.pretty)": [[226, "sympy.printing.pretty.pretty.pretty"]], "prettyform (class in sympy.printing.pretty.stringpict)": [[226, "sympy.printing.pretty.stringpict.prettyForm"]], "pretty_atom() (in module sympy.printing.pretty.pretty_symbology)": [[226, "sympy.printing.pretty.pretty_symbology.pretty_atom"]], "pretty_print() (in module sympy.printing.pretty.pretty)": [[226, "sympy.printing.pretty.pretty.pretty_print"]], "pretty_symbol() (in module sympy.printing.pretty.pretty_symbology)": [[226, "sympy.printing.pretty.pretty_symbology.pretty_symbol"]], "pretty_try_use_unicode() (in module sympy.printing.pretty.pretty_symbology)": [[226, "sympy.printing.pretty.pretty_symbology.pretty_try_use_unicode"]], "pretty_use_unicode() (in module sympy.printing.pretty.pretty_symbology)": [[226, "sympy.printing.pretty.pretty_symbology.pretty_use_unicode"]], "preview() (in module sympy.printing.preview)": [[226, "sympy.printing.preview.preview"]], "print_ccode() (in module sympy.printing.c)": [[226, "sympy.printing.c.print_ccode"]], "print_fcode() (in module sympy.printing.fortran)": [[226, "sympy.printing.fortran.print_fcode"]], "print_gtk() (in module sympy.printing.gtk)": [[226, "sympy.printing.gtk.print_gtk"]], "print_latex() (in module sympy.printing.latex)": [[226, "sympy.printing.latex.print_latex"]], "print_maple_code() (in module sympy.printing.maple)": [[226, "sympy.printing.maple.print_maple_code"]], "print_mathml() (in module sympy.printing.mathml)": [[226, "sympy.printing.mathml.print_mathml"]], "print_node() (in module sympy.printing.tree)": [[226, "sympy.printing.tree.print_node"]], "print_rcode() (in module sympy.printing.rcode)": [[226, "sympy.printing.rcode.print_rcode"]], "print_tree() (in module sympy.printing.tree)": [[226, "sympy.printing.tree.print_tree"]], "printmethod (sympy.printing.aesaracode.aesaraprinter attribute)": [[226, "sympy.printing.aesaracode.AesaraPrinter.printmethod"]], "printmethod (sympy.printing.c.c89codeprinter attribute)": [[226, "sympy.printing.c.C89CodePrinter.printmethod"]], "printmethod (sympy.printing.c.c99codeprinter attribute)": [[226, "sympy.printing.c.C99CodePrinter.printmethod"]], "printmethod (sympy.printing.codeprinter.codeprinter attribute)": [[226, "sympy.printing.codeprinter.CodePrinter.printmethod"]], "printmethod (sympy.printing.cxx.cxx11codeprinter attribute)": [[226, "sympy.printing.cxx.CXX11CodePrinter.printmethod"]], "printmethod (sympy.printing.cxx.cxx98codeprinter attribute)": [[226, "sympy.printing.cxx.CXX98CodePrinter.printmethod"]], "printmethod (sympy.printing.fortran.fcodeprinter attribute)": [[226, "sympy.printing.fortran.FCodePrinter.printmethod"]], "printmethod (sympy.printing.jscode.javascriptcodeprinter attribute)": [[226, "sympy.printing.jscode.JavascriptCodePrinter.printmethod"]], "printmethod (sympy.printing.julia.juliacodeprinter attribute)": [[226, "sympy.printing.julia.JuliaCodePrinter.printmethod"]], "printmethod (sympy.printing.lambdarepr.lambdaprinter attribute)": [[226, "sympy.printing.lambdarepr.LambdaPrinter.printmethod"]], "printmethod (sympy.printing.latex.latexprinter attribute)": [[226, "sympy.printing.latex.LatexPrinter.printmethod"]], "printmethod (sympy.printing.maple.maplecodeprinter attribute)": [[226, "sympy.printing.maple.MapleCodePrinter.printmethod"]], "printmethod (sympy.printing.mathematica.mcodeprinter attribute)": [[226, "sympy.printing.mathematica.MCodePrinter.printmethod"]], "printmethod (sympy.printing.mathml.mathmlcontentprinter attribute)": [[226, "sympy.printing.mathml.MathMLContentPrinter.printmethod"]], "printmethod (sympy.printing.mathml.mathmlpresentationprinter attribute)": [[226, "sympy.printing.mathml.MathMLPresentationPrinter.printmethod"]], "printmethod (sympy.printing.octave.octavecodeprinter attribute)": [[226, "sympy.printing.octave.OctaveCodePrinter.printmethod"]], "printmethod (sympy.printing.pretty.pretty.prettyprinter attribute)": [[226, "sympy.printing.pretty.pretty.PrettyPrinter.printmethod"]], "printmethod (sympy.printing.printer.printer attribute)": [[226, "sympy.printing.printer.Printer.printmethod"]], "printmethod (sympy.printing.rcode.rcodeprinter attribute)": [[226, "sympy.printing.rcode.RCodePrinter.printmethod"]], "printmethod (sympy.printing.repr.reprprinter attribute)": [[226, "sympy.printing.repr.ReprPrinter.printmethod"]], "printmethod (sympy.printing.rust.rustcodeprinter attribute)": [[226, "sympy.printing.rust.RustCodePrinter.printmethod"]], "printmethod (sympy.printing.smtlib.smtlibprinter attribute)": [[226, "sympy.printing.smtlib.SMTLibPrinter.printmethod"]], "printmethod (sympy.printing.str.strprinter attribute)": [[226, "sympy.printing.str.StrPrinter.printmethod"]], "pycode() (in module sympy.printing.pycode)": [[226, "sympy.printing.pycode.pycode"]], "rcode() (in module sympy.printing.rcode)": [[226, "sympy.printing.rcode.rcode"]], "render() (sympy.printing.pretty.stringpict.stringpict method)": [[226, "sympy.printing.pretty.stringpict.stringPict.render"]], "reprify() (sympy.printing.repr.reprprinter method)": [[226, "sympy.printing.repr.ReprPrinter.reprify"]], "right() (sympy.printing.pretty.stringpict.stringpict method)": [[226, "sympy.printing.pretty.stringpict.stringPict.right"]], "root (in module sympy.printing.pretty.pretty_symbology)": [[226, "sympy.printing.pretty.pretty_symbology.root"]], "root() (sympy.printing.pretty.stringpict.stringpict method)": [[226, "sympy.printing.pretty.stringpict.stringPict.root"]], "rust_code() (in module sympy.printing.rust)": [[226, "sympy.printing.rust.rust_code"]], "set_global_settings() (sympy.printing.printer.printer class method)": [[226, "sympy.printing.printer.Printer.set_global_settings"]], "smtlib_code() (in module sympy.printing.smtlib)": [[226, "sympy.printing.smtlib.smtlib_code"]], "split_super_sub() (in module sympy.printing.conventions)": [[226, "sympy.printing.conventions.split_super_sub"]], "srepr() (in module sympy.printing.repr)": [[226, "sympy.printing.repr.srepr"]], "sstr() (in module sympy.printing.str)": [[226, "sympy.printing.str.sstr"]], "sstrrepr() (in module sympy.printing.str)": [[226, "sympy.printing.str.sstrrepr"]], "stack() (sympy.printing.pretty.stringpict.stringpict static method)": [[226, "sympy.printing.pretty.stringpict.stringPict.stack"]], "stringpict (class in sympy.printing.pretty.stringpict)": [[226, "sympy.printing.pretty.stringpict.stringPict"]], "sub (in module sympy.printing.pretty.pretty_symbology)": [[226, "sympy.printing.pretty.pretty_symbology.sub"]], "sup (in module sympy.printing.pretty.pretty_symbology)": [[226, "sympy.printing.pretty.pretty_symbology.sup"]], "symb_2txt (in module sympy.printing.pretty.pretty_symbology)": [[226, "sympy.printing.pretty.pretty_symbology.symb_2txt"]], "sympy.printing.aesaracode": [[226, "module-sympy.printing.aesaracode"]], "sympy.printing.c": [[226, "module-sympy.printing.c"]], "sympy.printing.codeprinter": [[226, "module-sympy.printing.codeprinter"]], "sympy.printing.conventions": [[226, "module-sympy.printing.conventions"]], "sympy.printing.cxx": [[226, "module-sympy.printing.cxx"]], "sympy.printing.fortran": [[226, "module-sympy.printing.fortran"]], "sympy.printing.gtk": [[226, "module-sympy.printing.gtk"]], "sympy.printing.jscode": [[226, "module-sympy.printing.jscode"]], "sympy.printing.julia": [[226, "module-sympy.printing.julia"]], "sympy.printing.lambdarepr": [[226, "module-sympy.printing.lambdarepr"]], "sympy.printing.latex": [[226, "module-sympy.printing.latex"]], "sympy.printing.maple": [[226, "module-sympy.printing.maple"]], "sympy.printing.mathematica": [[226, "module-sympy.printing.mathematica"]], "sympy.printing.mathml": [[226, "module-sympy.printing.mathml"]], "sympy.printing.octave": [[226, "module-sympy.printing.octave"]], "sympy.printing.precedence": [[226, "module-sympy.printing.precedence"]], "sympy.printing.pretty": [[226, "module-sympy.printing.pretty"]], "sympy.printing.pretty.pretty": [[226, "module-sympy.printing.pretty.pretty"]], "sympy.printing.pretty.pretty_symbology": [[226, "module-sympy.printing.pretty.pretty_symbology"]], "sympy.printing.pretty.stringpict": [[226, "module-sympy.printing.pretty.stringpict"]], "sympy.printing.preview": [[226, "module-sympy.printing.preview"]], "sympy.printing.printer": [[226, "module-sympy.printing.printer"]], "sympy.printing.pycode": [[226, "module-sympy.printing.pycode"]], "sympy.printing.python": [[226, "module-sympy.printing.python"]], "sympy.printing.rcode": [[226, "module-sympy.printing.rcode"]], "sympy.printing.repr": [[226, "module-sympy.printing.repr"]], "sympy.printing.rust": [[226, "module-sympy.printing.rust"]], "sympy.printing.smtlib": [[226, "module-sympy.printing.smtlib"]], "sympy.printing.str": [[226, "module-sympy.printing.str"]], "sympy.printing.tree": [[226, "module-sympy.printing.tree"]], "terminal_width() (sympy.printing.pretty.stringpict.stringpict method)": [[226, "sympy.printing.pretty.stringpict.stringPict.terminal_width"]], "tree() (in module sympy.printing.tree)": [[226, "sympy.printing.tree.tree"]], "vobj() (in module sympy.printing.pretty.pretty_symbology)": [[226, "sympy.printing.pretty.pretty_symbology.vobj"]], "width() (sympy.printing.pretty.stringpict.stringpict method)": [[226, "sympy.printing.pretty.stringpict.stringPict.width"]], "xobj() (in module sympy.printing.pretty.pretty_symbology)": [[226, "sympy.printing.pretty.pretty_symbology.xobj"]], "xstr() (in module sympy.printing.pretty.pretty_symbology)": [[226, "sympy.printing.pretty.pretty_symbology.xstr"]], "xsym() (in module sympy.printing.pretty.pretty_symbology)": [[226, "sympy.printing.pretty.pretty_symbology.xsym"]], "finiteformalpowerseries (class in sympy.series.formal)": [[228, "sympy.series.formal.FiniteFormalPowerSeries"]], "formalpowerseries (class in sympy.series.formal)": [[228, "sympy.series.formal.FormalPowerSeries"]], "formalpowerseriescompose (class in sympy.series.formal)": [[228, "sympy.series.formal.FormalPowerSeriesCompose"]], "formalpowerseriesinverse (class in sympy.series.formal)": [[228, "sympy.series.formal.FormalPowerSeriesInverse"]], "formalpowerseriesproduct (class in sympy.series.formal)": [[228, "sympy.series.formal.FormalPowerSeriesProduct"]], "coeff_bell() (sympy.series.formal.formalpowerseries method)": [[228, "sympy.series.formal.FormalPowerSeries.coeff_bell"]], "compose() (sympy.series.formal.formalpowerseries method)": [[228, "sympy.series.formal.FormalPowerSeries.compose"]], "compute_fps() (in module sympy.series.formal)": [[228, "sympy.series.formal.compute_fps"]], "exp_re() (in module sympy.series.formal)": [[228, "sympy.series.formal.exp_re"]], "fps() (in module sympy.series.formal)": [[228, "sympy.series.formal.fps"]], "function (sympy.series.formal.formalpowerseriescompose property)": [[228, "sympy.series.formal.FormalPowerSeriesCompose.function"]], "function (sympy.series.formal.formalpowerseriesinverse property)": [[228, "sympy.series.formal.FormalPowerSeriesInverse.function"]], "function (sympy.series.formal.formalpowerseriesproduct property)": [[228, "sympy.series.formal.FormalPowerSeriesProduct.function"]], "hyper_algorithm() (in module sympy.series.formal)": [[228, "sympy.series.formal.hyper_algorithm"]], "hyper_re() (in module sympy.series.formal)": [[228, "sympy.series.formal.hyper_re"]], "infinite (sympy.series.formal.formalpowerseries property)": [[228, "sympy.series.formal.FormalPowerSeries.infinite"]], "integrate() (sympy.series.formal.formalpowerseries method)": [[228, "sympy.series.formal.FormalPowerSeries.integrate"]], "inverse() (sympy.series.formal.formalpowerseries method)": [[228, "sympy.series.formal.FormalPowerSeries.inverse"]], "polynomial() (sympy.series.formal.formalpowerseries method)": [[228, "sympy.series.formal.FormalPowerSeries.polynomial"]], "product() (sympy.series.formal.formalpowerseries method)": [[228, "sympy.series.formal.FormalPowerSeries.product"]], "rational_algorithm() (in module sympy.series.formal)": [[228, "sympy.series.formal.rational_algorithm"]], "rational_independent() (in module sympy.series.formal)": [[228, "sympy.series.formal.rational_independent"]], "rsolve_hypergeometric() (in module sympy.series.formal)": [[228, "sympy.series.formal.rsolve_hypergeometric"]], "simplede() (in module sympy.series.formal)": [[228, "sympy.series.formal.simpleDE"]], "solve_de() (in module sympy.series.formal)": [[228, "sympy.series.formal.solve_de"]], "truncate() (sympy.series.formal.formalpowerseries method)": [[228, "sympy.series.formal.FormalPowerSeries.truncate"]], "fourierseries (class in sympy.series.fourier)": [[229, "sympy.series.fourier.FourierSeries"]], "fourier_series() (in module sympy.series.fourier)": [[229, "sympy.series.fourier.fourier_series"]], "scale() (sympy.series.fourier.fourierseries method)": [[229, "sympy.series.fourier.FourierSeries.scale"]], "scalex() (sympy.series.fourier.fourierseries method)": [[229, "sympy.series.fourier.FourierSeries.scalex"]], "shift() (sympy.series.fourier.fourierseries method)": [[229, "sympy.series.fourier.FourierSeries.shift"]], "shiftx() (sympy.series.fourier.fourierseries method)": [[229, "sympy.series.fourier.FourierSeries.shiftx"]], "sigma_approximation() (sympy.series.fourier.fourierseries method)": [[229, "sympy.series.fourier.FourierSeries.sigma_approximation"]], "truncate() (sympy.series.fourier.fourierseries method)": [[229, "sympy.series.fourier.FourierSeries.truncate"]], "difference_delta() (in module sympy.series.limitseq)": [[231, "sympy.series.limitseq.difference_delta"]], "dominant() (in module sympy.series.limitseq)": [[231, "sympy.series.limitseq.dominant"]], "limit_seq() (in module sympy.series.limitseq)": [[231, "sympy.series.limitseq.limit_seq"]], "emptysequence (class in sympy.series.sequences)": [[232, "sympy.series.sequences.EmptySequence"]], "recursiveseq (class in sympy.series.sequences)": [[232, "sympy.series.sequences.RecursiveSeq"]], "seqadd (class in sympy.series.sequences)": [[232, "sympy.series.sequences.SeqAdd"]], "seqbase (class in sympy.series.sequences)": [[232, "sympy.series.sequences.SeqBase"]], "seqformula (class in sympy.series.sequences)": [[232, "sympy.series.sequences.SeqFormula"]], "seqmul (class in sympy.series.sequences)": [[232, "sympy.series.sequences.SeqMul"]], "seqper (class in sympy.series.sequences)": [[232, "sympy.series.sequences.SeqPer"]], "coeff() (sympy.series.sequences.seqbase method)": [[232, "sympy.series.sequences.SeqBase.coeff"]], "coeff_mul() (sympy.series.sequences.emptysequence method)": [[232, "sympy.series.sequences.EmptySequence.coeff_mul"]], "coeff_mul() (sympy.series.sequences.seqbase method)": [[232, "sympy.series.sequences.SeqBase.coeff_mul"]], "coeff_mul() (sympy.series.sequences.seqformula method)": [[232, "sympy.series.sequences.SeqFormula.coeff_mul"]], "coeff_mul() (sympy.series.sequences.seqper method)": [[232, "sympy.series.sequences.SeqPer.coeff_mul"]], "find_linear_recurrence() (sympy.series.sequences.seqbase method)": [[232, "sympy.series.sequences.SeqBase.find_linear_recurrence"]], "free_symbols (sympy.series.sequences.seqbase property)": [[232, "sympy.series.sequences.SeqBase.free_symbols"]], "gen (sympy.series.sequences.seqbase property)": [[232, "sympy.series.sequences.SeqBase.gen"]], "initial (sympy.series.sequences.recursiveseq property)": [[232, "sympy.series.sequences.RecursiveSeq.initial"]], "interval (sympy.series.sequences.recursiveseq property)": [[232, "sympy.series.sequences.RecursiveSeq.interval"]], "interval (sympy.series.sequences.seqbase property)": [[232, "sympy.series.sequences.SeqBase.interval"]], "length (sympy.series.sequences.seqbase property)": [[232, "sympy.series.sequences.SeqBase.length"]], "n (sympy.series.sequences.recursiveseq property)": [[232, "sympy.series.sequences.RecursiveSeq.n"]], "recurrence (sympy.series.sequences.recursiveseq property)": [[232, "sympy.series.sequences.RecursiveSeq.recurrence"]], "reduce() (sympy.series.sequences.seqadd static method)": [[232, "sympy.series.sequences.SeqAdd.reduce"]], "reduce() (sympy.series.sequences.seqmul static method)": [[232, "sympy.series.sequences.SeqMul.reduce"]], "sequence() (in module sympy.series.sequences)": [[232, "sympy.series.sequences.sequence"]], "start (sympy.series.sequences.recursiveseq property)": [[232, "sympy.series.sequences.RecursiveSeq.start"]], "start (sympy.series.sequences.seqbase property)": [[232, "sympy.series.sequences.SeqBase.start"]], "stop (sympy.series.sequences.recursiveseq property)": [[232, "sympy.series.sequences.RecursiveSeq.stop"]], "stop (sympy.series.sequences.seqbase property)": [[232, "sympy.series.sequences.SeqBase.stop"]], "variables (sympy.series.sequences.seqbase property)": [[232, "sympy.series.sequences.SeqBase.variables"]], "y (sympy.series.sequences.recursiveseq property)": [[232, "sympy.series.sequences.RecursiveSeq.y"]], "yn (sympy.series.sequences.recursiveseq property)": [[232, "sympy.series.sequences.RecursiveSeq.yn"]], "limit (class in sympy.series.limits)": [[233, "sympy.series.limits.Limit"]], "order (class in sympy.series.order)": [[233, "sympy.series.order.Order"]], "subsset (class in sympy.series.gruntz)": [[233, "sympy.series.gruntz.SubsSet"]], "build_expression_tree() (in module sympy.series.gruntz)": [[233, "sympy.series.gruntz.build_expression_tree"]], "calculate_series() (in module sympy.series.gruntz)": [[233, "sympy.series.gruntz.calculate_series"]], "compare() (in module sympy.series.gruntz)": [[233, "sympy.series.gruntz.compare"]], "contains() (sympy.series.order.order method)": [[233, "sympy.series.order.Order.contains"]], "copy() (sympy.series.gruntz.subsset method)": [[233, "sympy.series.gruntz.SubsSet.copy"]], "do_subs() (sympy.series.gruntz.subsset method)": [[233, "sympy.series.gruntz.SubsSet.do_subs"]], "doit() (sympy.series.limits.limit method)": [[233, "sympy.series.limits.Limit.doit"]], "gruntz() (in module sympy.series.gruntz)": [[233, "sympy.series.gruntz.gruntz"]], "limit() (in module sympy.series.limits)": [[233, "sympy.series.limits.limit"]], "limitinf() (in module sympy.series.gruntz)": [[233, "sympy.series.gruntz.limitinf"]], "meets() (sympy.series.gruntz.subsset method)": [[233, "sympy.series.gruntz.SubsSet.meets"]], "mrv() (in module sympy.series.gruntz)": [[233, "sympy.series.gruntz.mrv"]], "mrv_leadterm() (in module sympy.series.gruntz)": [[233, "sympy.series.gruntz.mrv_leadterm"]], "mrv_max1() (in module sympy.series.gruntz)": [[233, "sympy.series.gruntz.mrv_max1"]], "mrv_max3() (in module sympy.series.gruntz)": [[233, "sympy.series.gruntz.mrv_max3"]], "residue() (in module sympy.series.residues)": [[233, "sympy.series.residues.residue"]], "rewrite() (in module sympy.series.gruntz)": [[233, "sympy.series.gruntz.rewrite"]], "richardson() (in module sympy.series.acceleration)": [[233, "sympy.series.acceleration.richardson"]], "series() (in module sympy.series.series)": [[233, "sympy.series.series.series"]], "shanks() (in module sympy.series.acceleration)": [[233, "sympy.series.acceleration.shanks"]], "sign() (in module sympy.series.gruntz)": [[233, "sympy.series.gruntz.sign"]], "union() (sympy.series.gruntz.subsset method)": [[233, "sympy.series.gruntz.SubsSet.union"]], "cartesiancomplexregion (class in sympy.sets.fancysets)": [[234, "sympy.sets.fancysets.CartesianComplexRegion"]], "complement (class in sympy.sets.sets)": [[234, "sympy.sets.sets.Complement"]], "complexregion (class in sympy.sets.fancysets)": [[234, "sympy.sets.fancysets.ComplexRegion"]], "complexes (class in sympy.sets.fancysets)": [[234, "sympy.sets.fancysets.Complexes"]], "conditionset (class in sympy.sets.conditionset)": [[234, "sympy.sets.conditionset.ConditionSet"]], "contains (class in sympy.sets.conditionset)": [[234, "sympy.sets.conditionset.Contains"]], "disjointunion (class in sympy.sets.sets)": [[234, "sympy.sets.sets.DisjointUnion"]], "emptyset (class in sympy.sets.sets)": [[234, "sympy.sets.sets.EmptySet"]], "finiteset (class in sympy.sets.sets)": [[234, "sympy.sets.sets.FiniteSet"]], "imageset (class in sympy.sets.fancysets)": [[234, "sympy.sets.fancysets.ImageSet"]], "integers (class in sympy.sets.fancysets)": [[234, "sympy.sets.fancysets.Integers"]], "intersection (class in sympy.sets.sets)": [[234, "sympy.sets.sets.Intersection"]], "interval (class in sympy.sets.sets)": [[234, "sympy.sets.sets.Interval"]], "lopen() (sympy.sets.sets.interval class method)": [[234, "sympy.sets.sets.Interval.Lopen"]], "naturals (class in sympy.sets.fancysets)": [[234, "sympy.sets.fancysets.Naturals"]], "naturals0 (class in sympy.sets.fancysets)": [[234, "sympy.sets.fancysets.Naturals0"]], "polarcomplexregion (class in sympy.sets.fancysets)": [[234, "sympy.sets.fancysets.PolarComplexRegion"]], "powerset (class in sympy.sets.powerset)": [[234, "sympy.sets.powerset.PowerSet"]], "productset (class in sympy.sets.sets)": [[234, "sympy.sets.sets.ProductSet"]], "range (class in sympy.sets.fancysets)": [[234, "sympy.sets.fancysets.Range"]], "rationals (class in sympy.sets.fancysets)": [[234, "sympy.sets.fancysets.Rationals"]], "reals (class in sympy.sets.fancysets)": [[234, "sympy.sets.fancysets.Reals"]], "ropen() (sympy.sets.sets.interval class method)": [[234, "sympy.sets.sets.Interval.Ropen"]], "set (class in sympy.sets.sets)": [[234, "sympy.sets.sets.Set"]], "setkind (class in sympy.sets.conditionset)": [[234, "sympy.sets.conditionset.SetKind"]], "symmetricdifference (class in sympy.sets.sets)": [[234, "sympy.sets.sets.SymmetricDifference"]], "union (class in sympy.sets.sets)": [[234, "sympy.sets.sets.Union"]], "universalset (class in sympy.sets.sets)": [[234, "sympy.sets.sets.UniversalSet"]], "a_interval (sympy.sets.fancysets.complexregion property)": [[234, "sympy.sets.fancysets.ComplexRegion.a_interval"]], "as_relational() (sympy.sets.fancysets.range method)": [[234, "sympy.sets.fancysets.Range.as_relational"]], "as_relational() (sympy.sets.sets.complement method)": [[234, "sympy.sets.sets.Complement.as_relational"]], "as_relational() (sympy.sets.sets.finiteset method)": [[234, "sympy.sets.sets.FiniteSet.as_relational"]], "as_relational() (sympy.sets.sets.intersection method)": [[234, "sympy.sets.sets.Intersection.as_relational"]], "as_relational() (sympy.sets.sets.interval method)": [[234, "sympy.sets.sets.Interval.as_relational"]], "as_relational() (sympy.sets.sets.symmetricdifference method)": [[234, "sympy.sets.sets.SymmetricDifference.as_relational"]], "as_relational() (sympy.sets.sets.union method)": [[234, "sympy.sets.sets.Union.as_relational"]], "b_interval (sympy.sets.fancysets.complexregion property)": [[234, "sympy.sets.fancysets.ComplexRegion.b_interval"]], "boundary (sympy.sets.sets.set property)": [[234, "sympy.sets.sets.Set.boundary"]], "closure (sympy.sets.sets.set property)": [[234, "sympy.sets.sets.Set.closure"]], "complement() (sympy.sets.sets.set method)": [[234, "sympy.sets.sets.Set.complement"]], "contains() (sympy.sets.sets.set method)": [[234, "sympy.sets.sets.Set.contains"]], "end (sympy.sets.sets.interval property)": [[234, "sympy.sets.sets.Interval.end"]], "from_real() (sympy.sets.fancysets.complexregion class method)": [[234, "sympy.sets.fancysets.ComplexRegion.from_real"]], "imageset() (in module sympy.sets.sets)": [[234, "sympy.sets.sets.imageset"]], "inf (sympy.sets.sets.set property)": [[234, "sympy.sets.sets.Set.inf"]], "interior (sympy.sets.sets.set property)": [[234, "sympy.sets.sets.Set.interior"]], "intersect() (sympy.sets.sets.set method)": [[234, "sympy.sets.sets.Set.intersect"]], "intersection() (sympy.sets.sets.set method)": [[234, "sympy.sets.sets.Set.intersection"]], "is_closed (sympy.sets.sets.set property)": [[234, "sympy.sets.sets.Set.is_closed"]], "is_disjoint() (sympy.sets.sets.set method)": [[234, "sympy.sets.sets.Set.is_disjoint"]], "is_iterable (sympy.sets.sets.productset property)": [[234, "sympy.sets.sets.ProductSet.is_iterable"]], "is_left_unbounded (sympy.sets.sets.interval property)": [[234, "sympy.sets.sets.Interval.is_left_unbounded"]], "is_open (sympy.sets.sets.set property)": [[234, "sympy.sets.sets.Set.is_open"]], "is_proper_subset() (sympy.sets.sets.set method)": [[234, "sympy.sets.sets.Set.is_proper_subset"]], "is_proper_superset() (sympy.sets.sets.set method)": [[234, "sympy.sets.sets.Set.is_proper_superset"]], "is_right_unbounded (sympy.sets.sets.interval property)": [[234, "sympy.sets.sets.Interval.is_right_unbounded"]], "is_subset() (sympy.sets.sets.set method)": [[234, "sympy.sets.sets.Set.is_subset"]], "is_superset() (sympy.sets.sets.set method)": [[234, "sympy.sets.sets.Set.is_superset"]], "isdisjoint() (sympy.sets.sets.set method)": [[234, "sympy.sets.sets.Set.isdisjoint"]], "issubset() (sympy.sets.sets.set method)": [[234, "sympy.sets.sets.Set.issubset"]], "issuperset() (sympy.sets.sets.set method)": [[234, "sympy.sets.sets.Set.issuperset"]], "kind (sympy.sets.sets.set property)": [[234, "sympy.sets.sets.Set.kind"]], "left_open (sympy.sets.sets.interval property)": [[234, "sympy.sets.sets.Interval.left_open"]], "measure (sympy.sets.sets.set property)": [[234, "sympy.sets.sets.Set.measure"]], "normalize_theta_set() (in module sympy.sets.fancysets)": [[234, "sympy.sets.fancysets.normalize_theta_set"]], "open() (sympy.sets.sets.interval class method)": [[234, "sympy.sets.sets.Interval.open"]], "powerset() (sympy.sets.sets.set method)": [[234, "sympy.sets.sets.Set.powerset"]], "psets (sympy.sets.fancysets.complexregion property)": [[234, "sympy.sets.fancysets.ComplexRegion.psets"]], "reduce() (sympy.sets.sets.complement static method)": [[234, "sympy.sets.sets.Complement.reduce"]], "reversed (sympy.sets.fancysets.range property)": [[234, "sympy.sets.fancysets.Range.reversed"]], "right_open (sympy.sets.sets.interval property)": [[234, "sympy.sets.sets.Interval.right_open"]], "sets (sympy.sets.fancysets.complexregion property)": [[234, "sympy.sets.fancysets.ComplexRegion.sets"]], "start (sympy.sets.sets.interval property)": [[234, "sympy.sets.sets.Interval.start"]], "sup (sympy.sets.sets.set property)": [[234, "sympy.sets.sets.Set.sup"]], "symmetric_difference() (sympy.sets.sets.set method)": [[234, "sympy.sets.sets.Set.symmetric_difference"]], "sympy.sets.conditionset": [[234, "module-sympy.sets.conditionset"]], "sympy.sets.fancysets": [[234, "module-sympy.sets.fancysets"]], "sympy.sets.powerset": [[234, "module-sympy.sets.powerset"]], "sympy.sets.sets": [[234, "module-sympy.sets.sets"]], "union() (sympy.sets.sets.set method)": [[234, "sympy.sets.sets.Set.union"]], "tr0() (in module sympy.simplify.fu)": [[235, "sympy.simplify.fu.TR0"]], "tr1() (in module sympy.simplify.fu)": [[235, "sympy.simplify.fu.TR1"]], "tr10() (in module sympy.simplify.fu)": [[235, "sympy.simplify.fu.TR10"]], "tr10i() (in module sympy.simplify.fu)": [[235, "sympy.simplify.fu.TR10i"]], "tr11() (in module sympy.simplify.fu)": [[235, "sympy.simplify.fu.TR11"]], "tr111() (in module sympy.simplify.fu)": [[235, "sympy.simplify.fu.TR111"]], "tr12() (in module sympy.simplify.fu)": [[235, "sympy.simplify.fu.TR12"]], "tr12i() (in module sympy.simplify.fu)": [[235, "sympy.simplify.fu.TR12i"]], "tr13() (in module sympy.simplify.fu)": [[235, "sympy.simplify.fu.TR13"]], "tr14() (in module sympy.simplify.fu)": [[235, "sympy.simplify.fu.TR14"]], "tr15() (in module sympy.simplify.fu)": [[235, "sympy.simplify.fu.TR15"]], "tr16() (in module sympy.simplify.fu)": [[235, "sympy.simplify.fu.TR16"]], "tr2() (in module sympy.simplify.fu)": [[235, "sympy.simplify.fu.TR2"]], "tr22() (in module sympy.simplify.fu)": [[235, "sympy.simplify.fu.TR22"]], "tr2i() (in module sympy.simplify.fu)": [[235, "sympy.simplify.fu.TR2i"]], "tr3() (in module sympy.simplify.fu)": [[235, "sympy.simplify.fu.TR3"]], "tr4() (in module sympy.simplify.fu)": [[235, "sympy.simplify.fu.TR4"]], "tr5() (in module sympy.simplify.fu)": [[235, "sympy.simplify.fu.TR5"]], "tr6() (in module sympy.simplify.fu)": [[235, "sympy.simplify.fu.TR6"]], "tr7() (in module sympy.simplify.fu)": [[235, "sympy.simplify.fu.TR7"]], "tr8() (in module sympy.simplify.fu)": [[235, "sympy.simplify.fu.TR8"]], "tr9() (in module sympy.simplify.fu)": [[235, "sympy.simplify.fu.TR9"]], "trmorrie() (in module sympy.simplify.fu)": [[235, "sympy.simplify.fu.TRmorrie"]], "trpower() (in module sympy.simplify.fu)": [[235, "sympy.simplify.fu.TRpower"]], "fu() (in module sympy.simplify.fu)": [[235, "sympy.simplify.fu.fu"]], "sympy.simplify.hyperexpand_doc": [[236, "module-sympy.simplify.hyperexpand_doc"]], "epath (class in sympy.simplify.epathtools)": [[238, "sympy.simplify.epathtools.EPath"]], "apply() (sympy.simplify.epathtools.epath method)": [[238, "sympy.simplify.epathtools.EPath.apply"]], "besselsimp() (in module sympy.simplify.simplify)": [[238, "sympy.simplify.simplify.besselsimp"]], "collect() (in module sympy.simplify.radsimp)": [[238, "sympy.simplify.radsimp.collect"]], "collect_const() (in module sympy.simplify.radsimp)": [[238, "sympy.simplify.radsimp.collect_const"]], "collect_sqrt() (in module sympy.simplify.radsimp)": [[238, "sympy.simplify.radsimp.collect_sqrt"]], "combsimp() (in module sympy.simplify.combsimp)": [[238, "sympy.simplify.combsimp.combsimp"]], "cse() (in module sympy.simplify.cse_main)": [[238, "sympy.simplify.cse_main.cse"]], "epath() (in module sympy.simplify.epathtools)": [[238, "sympy.simplify.epathtools.epath"]], "fraction() (in module sympy.simplify.radsimp)": [[238, "sympy.simplify.radsimp.fraction"]], "hyperexpand() (in module sympy.simplify.hyperexpand)": [[238, "sympy.simplify.hyperexpand.hyperexpand"]], "hypersimilar() (in module sympy.simplify.simplify)": [[238, "sympy.simplify.simplify.hypersimilar"]], "hypersimp() (in module sympy.simplify.simplify)": [[238, "sympy.simplify.simplify.hypersimp"]], "kroneckersimp() (in module sympy.simplify.simplify)": [[238, "sympy.simplify.simplify.kroneckersimp"]], "logcombine() (in module sympy.simplify.simplify)": [[238, "sympy.simplify.simplify.logcombine"]], "nsimplify() (in module sympy.simplify.simplify)": [[238, "sympy.simplify.simplify.nsimplify"]], "nthroot() (in module sympy.simplify.simplify)": [[238, "sympy.simplify.simplify.nthroot"]], "opt_cse() (in module sympy.simplify.cse_main)": [[238, "sympy.simplify.cse_main.opt_cse"]], "posify() (in module sympy.simplify.simplify)": [[238, "sympy.simplify.simplify.posify"]], "powdenest() (in module sympy.simplify.powsimp)": [[238, "sympy.simplify.powsimp.powdenest"]], "powsimp() (in module sympy.simplify.powsimp)": [[238, "sympy.simplify.powsimp.powsimp"]], "rad_rationalize() (in module sympy.simplify.radsimp)": [[238, "sympy.simplify.radsimp.rad_rationalize"]], "radsimp() (in module sympy.simplify.radsimp)": [[238, "sympy.simplify.radsimp.radsimp"]], "ratsimp() (in module sympy.simplify.ratsimp)": [[238, "sympy.simplify.ratsimp.ratsimp"]], "ratsimpmodprime() (in module sympy.simplify.ratsimp)": [[238, "sympy.simplify.ratsimp.ratsimpmodprime"]], "rcollect() (in module sympy.simplify.radsimp)": [[238, "sympy.simplify.radsimp.rcollect"]], "select() (sympy.simplify.epathtools.epath method)": [[238, "sympy.simplify.epathtools.EPath.select"]], "separatevars() (in module sympy.simplify.simplify)": [[238, "sympy.simplify.simplify.separatevars"]], "simplify() (in module sympy.simplify.simplify)": [[238, "sympy.simplify.simplify.simplify"]], "sqrtdenest() (in module sympy.simplify.sqrtdenest)": [[238, "sympy.simplify.sqrtdenest.sqrtdenest"]], "sympy.simplify.combsimp": [[238, "module-sympy.simplify.combsimp"]], "sympy.simplify.cse_main": [[238, "module-sympy.simplify.cse_main"]], "sympy.simplify.epathtools": [[238, "module-sympy.simplify.epathtools"]], "sympy.simplify.hyperexpand": [[238, "module-sympy.simplify.hyperexpand"]], "sympy.simplify.powsimp": [[238, "module-sympy.simplify.powsimp"]], "sympy.simplify.radsimp": [[238, "module-sympy.simplify.radsimp"]], "sympy.simplify.ratsimp": [[238, "module-sympy.simplify.ratsimp"]], "sympy.simplify.sqrtdenest": [[238, "module-sympy.simplify.sqrtdenest"]], "sympy.simplify.trigsimp": [[238, "module-sympy.simplify.trigsimp"]], "tree_cse() (in module sympy.simplify.cse_main)": [[238, "sympy.simplify.cse_main.tree_cse"]], "trigsimp() (in module sympy.simplify.trigsimp)": [[238, "sympy.simplify.trigsimp.trigsimp"]], "binaryquadratic (class in sympy.solvers.diophantine.diophantine)": [[239, "sympy.solvers.diophantine.diophantine.BinaryQuadratic"]], "cubicthue (class in sympy.solvers.diophantine.diophantine)": [[239, "sympy.solvers.diophantine.diophantine.CubicThue"]], "diophantineequationtype (class in sympy.solvers.diophantine.diophantine)": [[239, "sympy.solvers.diophantine.diophantine.DiophantineEquationType"]], "diophantinesolutionset (class in sympy.solvers.diophantine.diophantine)": [[239, "sympy.solvers.diophantine.diophantine.DiophantineSolutionSet"]], "generalpythagorean (class in sympy.solvers.diophantine.diophantine)": [[239, "sympy.solvers.diophantine.diophantine.GeneralPythagorean"]], "generalsumofevenpowers (class in sympy.solvers.diophantine.diophantine)": [[239, "sympy.solvers.diophantine.diophantine.GeneralSumOfEvenPowers"]], "generalsumofsquares (class in sympy.solvers.diophantine.diophantine)": [[239, "sympy.solvers.diophantine.diophantine.GeneralSumOfSquares"]], "homogeneousgeneralquadratic (class in sympy.solvers.diophantine.diophantine)": [[239, "sympy.solvers.diophantine.diophantine.HomogeneousGeneralQuadratic"]], "homogeneousternaryquadratic (class in sympy.solvers.diophantine.diophantine)": [[239, "sympy.solvers.diophantine.diophantine.HomogeneousTernaryQuadratic"]], "homogeneousternaryquadraticnormal (class in sympy.solvers.diophantine.diophantine)": [[239, "sympy.solvers.diophantine.diophantine.HomogeneousTernaryQuadraticNormal"]], "inhomogeneousgeneralquadratic (class in sympy.solvers.diophantine.diophantine)": [[239, "sympy.solvers.diophantine.diophantine.InhomogeneousGeneralQuadratic"]], "inhomogeneousternaryquadratic (class in sympy.solvers.diophantine.diophantine)": [[239, "sympy.solvers.diophantine.diophantine.InhomogeneousTernaryQuadratic"]], "linear (class in sympy.solvers.diophantine.diophantine)": [[239, "sympy.solvers.diophantine.diophantine.Linear"]], "pqa() (in module sympy.solvers.diophantine.diophantine)": [[239, "sympy.solvers.diophantine.diophantine.PQa"]], "univariate (class in sympy.solvers.diophantine.diophantine)": [[239, "sympy.solvers.diophantine.diophantine.Univariate"]], "base_solution_linear() (in module sympy.solvers.diophantine.diophantine)": [[239, "sympy.solvers.diophantine.diophantine.base_solution_linear"]], "classify_diop() (in module sympy.solvers.diophantine.diophantine)": [[239, "sympy.solvers.diophantine.diophantine.classify_diop"]], "cornacchia() (in module sympy.solvers.diophantine.diophantine)": [[239, "sympy.solvers.diophantine.diophantine.cornacchia"]], "descent() (in module sympy.solvers.diophantine.diophantine)": [[239, "sympy.solvers.diophantine.diophantine.descent"]], "diop_dn() (in module sympy.solvers.diophantine.diophantine)": [[239, "sympy.solvers.diophantine.diophantine.diop_DN"]], "diop_bf_dn() (in module sympy.solvers.diophantine.diophantine)": [[239, "sympy.solvers.diophantine.diophantine.diop_bf_DN"]], "diop_general_pythagorean() (in module sympy.solvers.diophantine.diophantine)": [[239, "sympy.solvers.diophantine.diophantine.diop_general_pythagorean"]], "diop_general_sum_of_even_powers() (in module sympy.solvers.diophantine.diophantine)": [[239, "sympy.solvers.diophantine.diophantine.diop_general_sum_of_even_powers"]], "diop_general_sum_of_squares() (in module sympy.solvers.diophantine.diophantine)": [[239, "sympy.solvers.diophantine.diophantine.diop_general_sum_of_squares"]], "diop_linear() (in module sympy.solvers.diophantine.diophantine)": [[239, "sympy.solvers.diophantine.diophantine.diop_linear"]], "diop_quadratic() (in module sympy.solvers.diophantine.diophantine)": [[239, "sympy.solvers.diophantine.diophantine.diop_quadratic"]], "diop_solve() (in module sympy.solvers.diophantine.diophantine)": [[239, "sympy.solvers.diophantine.diophantine.diop_solve"]], "diop_ternary_quadratic() (in module sympy.solvers.diophantine.diophantine)": [[239, "sympy.solvers.diophantine.diophantine.diop_ternary_quadratic"]], "diop_ternary_quadratic_normal() (in module sympy.solvers.diophantine.diophantine)": [[239, "sympy.solvers.diophantine.diophantine.diop_ternary_quadratic_normal"]], "diophantine() (in module sympy.solvers.diophantine.diophantine)": [[239, "sympy.solvers.diophantine.diophantine.diophantine"]], "divisible() (in module sympy.solvers.diophantine.diophantine)": [[239, "sympy.solvers.diophantine.diophantine.divisible"]], "equivalent() (in module sympy.solvers.diophantine.diophantine)": [[239, "sympy.solvers.diophantine.diophantine.equivalent"]], "find_dn() (in module sympy.solvers.diophantine.diophantine)": [[239, "sympy.solvers.diophantine.diophantine.find_DN"]], "gaussian_reduce() (in module sympy.solvers.diophantine.diophantine)": [[239, "sympy.solvers.diophantine.diophantine.gaussian_reduce"]], "holzer() (in module sympy.solvers.diophantine.diophantine)": [[239, "sympy.solvers.diophantine.diophantine.holzer"]], "ldescent() (in module sympy.solvers.diophantine.diophantine)": [[239, "sympy.solvers.diophantine.diophantine.ldescent"]], "matches() (sympy.solvers.diophantine.diophantine.diophantineequationtype method)": [[239, "sympy.solvers.diophantine.diophantine.DiophantineEquationType.matches"]], "merge_solution() (in module sympy.solvers.diophantine.diophantine)": [[239, "sympy.solvers.diophantine.diophantine.merge_solution"]], "parametrize_ternary_quadratic() (in module sympy.solvers.diophantine.diophantine)": [[239, "sympy.solvers.diophantine.diophantine.parametrize_ternary_quadratic"]], "partition() (in module sympy.solvers.diophantine.diophantine)": [[239, "sympy.solvers.diophantine.diophantine.partition"]], "power_representation() (in module sympy.solvers.diophantine.diophantine)": [[239, "sympy.solvers.diophantine.diophantine.power_representation"]], "prime_as_sum_of_two_squares() (in module sympy.solvers.diophantine.diophantine)": [[239, "sympy.solvers.diophantine.diophantine.prime_as_sum_of_two_squares"]], "reconstruct() (in module sympy.solvers.diophantine.diophantine)": [[239, "sympy.solvers.diophantine.diophantine.reconstruct"]], "sqf_normal() (in module sympy.solvers.diophantine.diophantine)": [[239, "sympy.solvers.diophantine.diophantine.sqf_normal"]], "square_factor() (in module sympy.solvers.diophantine.diophantine)": [[239, "sympy.solvers.diophantine.diophantine.square_factor"]], "sum_of_four_squares() (in module sympy.solvers.diophantine.diophantine)": [[239, "sympy.solvers.diophantine.diophantine.sum_of_four_squares"]], "sum_of_powers() (in module sympy.solvers.diophantine.diophantine)": [[239, "sympy.solvers.diophantine.diophantine.sum_of_powers"]], "sum_of_squares() (in module sympy.solvers.diophantine.diophantine)": [[239, "sympy.solvers.diophantine.diophantine.sum_of_squares"]], "sum_of_three_squares() (in module sympy.solvers.diophantine.diophantine)": [[239, "sympy.solvers.diophantine.diophantine.sum_of_three_squares"]], "transformation_to_dn() (in module sympy.solvers.diophantine.diophantine)": [[239, "sympy.solvers.diophantine.diophantine.transformation_to_DN"]], "transformation_to_normal() (in module sympy.solvers.diophantine.diophantine)": [[239, "sympy.solvers.diophantine.diophantine.transformation_to_normal"]], "reduce_abs_inequalities() (in module sympy.solvers.inequalities)": [[241, "sympy.solvers.inequalities.reduce_abs_inequalities"]], "reduce_abs_inequality() (in module sympy.solvers.inequalities)": [[241, "sympy.solvers.inequalities.reduce_abs_inequality"]], "reduce_inequalities() (in module sympy.solvers.inequalities)": [[241, "sympy.solvers.inequalities.reduce_inequalities"]], "reduce_rational_inequalities() (in module sympy.solvers.inequalities)": [[241, "sympy.solvers.inequalities.reduce_rational_inequalities"]], "solve_poly_inequalities() (in module sympy.solvers.inequalities)": [[241, "sympy.solvers.inequalities.solve_poly_inequalities"]], "solve_poly_inequality() (in module sympy.solvers.inequalities)": [[241, "sympy.solvers.inequalities.solve_poly_inequality"]], "solve_rational_inequalities() (in module sympy.solvers.inequalities)": [[241, "sympy.solvers.inequalities.solve_rational_inequalities"]], "solve_univariate_inequality() (in module sympy.solvers.inequalities)": [[241, "sympy.solvers.inequalities.solve_univariate_inequality"]], "sympy.solvers.inequalities": [[241, "module-sympy.solvers.inequalities"]], "almostlinear (class in sympy.solvers.ode.single)": [[242, "sympy.solvers.ode.single.AlmostLinear"]], "bernoulli (class in sympy.solvers.ode.single)": [[242, "sympy.solvers.ode.single.Bernoulli"]], "factorable (class in sympy.solvers.ode.single)": [[242, "sympy.solvers.ode.single.Factorable"]], "firstexact (class in sympy.solvers.ode.single)": [[242, "sympy.solvers.ode.single.FirstExact"]], "firstlinear (class in sympy.solvers.ode.single)": [[242, "sympy.solvers.ode.single.FirstLinear"]], "homogeneouscoeffbest (class in sympy.solvers.ode.single)": [[242, "sympy.solvers.ode.single.HomogeneousCoeffBest"]], "homogeneouscoeffsubsdepdivindep (class in sympy.solvers.ode.single)": [[242, "sympy.solvers.ode.single.HomogeneousCoeffSubsDepDivIndep"]], "homogeneouscoeffsubsindepdivdep (class in sympy.solvers.ode.single)": [[242, "sympy.solvers.ode.single.HomogeneousCoeffSubsIndepDivDep"]], "liegroup (class in sympy.solvers.ode.single)": [[242, "sympy.solvers.ode.single.LieGroup"]], "linearcoefficients (class in sympy.solvers.ode.single)": [[242, "sympy.solvers.ode.single.LinearCoefficients"]], "liouville (class in sympy.solvers.ode.single)": [[242, "sympy.solvers.ode.single.Liouville"]], "nthalgebraic (class in sympy.solvers.ode.single)": [[242, "sympy.solvers.ode.single.NthAlgebraic"]], "nthlinearconstantcoeffhomogeneous (class in sympy.solvers.ode.single)": [[242, "sympy.solvers.ode.single.NthLinearConstantCoeffHomogeneous"]], "nthlinearconstantcoeffundeterminedcoefficients (class in sympy.solvers.ode.single)": [[242, "sympy.solvers.ode.single.NthLinearConstantCoeffUndeterminedCoefficients"]], "nthlinearconstantcoeffvariationofparameters (class in sympy.solvers.ode.single)": [[242, "sympy.solvers.ode.single.NthLinearConstantCoeffVariationOfParameters"]], "nthlineareulereqhomogeneous (class in sympy.solvers.ode.single)": [[242, "sympy.solvers.ode.single.NthLinearEulerEqHomogeneous"]], "nthlineareulereqnonhomogeneousundeterminedcoefficients (class in sympy.solvers.ode.single)": [[242, "sympy.solvers.ode.single.NthLinearEulerEqNonhomogeneousUndeterminedCoefficients"]], "nthlineareulereqnonhomogeneousvariationofparameters (class in sympy.solvers.ode.single)": [[242, "sympy.solvers.ode.single.NthLinearEulerEqNonhomogeneousVariationOfParameters"]], "nthorderreducible (class in sympy.solvers.ode.single)": [[242, "sympy.solvers.ode.single.NthOrderReducible"]], "rationalriccati (class in sympy.solvers.ode.single)": [[242, "sympy.solvers.ode.single.RationalRiccati"]], "riccatispecial (class in sympy.solvers.ode.single)": [[242, "sympy.solvers.ode.single.RiccatiSpecial"]], "secondhypergeometric (class in sympy.solvers.ode.single)": [[242, "sympy.solvers.ode.single.SecondHypergeometric"]], "secondlinearairy (class in sympy.solvers.ode.single)": [[242, "sympy.solvers.ode.single.SecondLinearAiry"]], "secondlinearbessel (class in sympy.solvers.ode.single)": [[242, "sympy.solvers.ode.single.SecondLinearBessel"]], "separable (class in sympy.solvers.ode.single)": [[242, "sympy.solvers.ode.single.Separable"]], "separablereduced (class in sympy.solvers.ode.single)": [[242, "sympy.solvers.ode.single.SeparableReduced"]], "_handle_integral() (in module sympy.solvers.ode.ode)": [[242, "sympy.solvers.ode.ode._handle_Integral"]], "_linear_2eq_order1_type6() (in module sympy.solvers.ode.ode)": [[242, "sympy.solvers.ode.ode._linear_2eq_order1_type6"]], "_linear_2eq_order1_type7() (in module sympy.solvers.ode.ode)": [[242, "sympy.solvers.ode.ode._linear_2eq_order1_type7"]], "_nonlinear_2eq_order1_type1() (in module sympy.solvers.ode.ode)": [[242, "sympy.solvers.ode.ode._nonlinear_2eq_order1_type1"]], "_nonlinear_2eq_order1_type2() (in module sympy.solvers.ode.ode)": [[242, "sympy.solvers.ode.ode._nonlinear_2eq_order1_type2"]], "_nonlinear_2eq_order1_type3() (in module sympy.solvers.ode.ode)": [[242, "sympy.solvers.ode.ode._nonlinear_2eq_order1_type3"]], "_nonlinear_2eq_order1_type4() (in module sympy.solvers.ode.ode)": [[242, "sympy.solvers.ode.ode._nonlinear_2eq_order1_type4"]], "_nonlinear_2eq_order1_type5() (in module sympy.solvers.ode.ode)": [[242, "sympy.solvers.ode.ode._nonlinear_2eq_order1_type5"]], "_nonlinear_3eq_order1_type1() (in module sympy.solvers.ode.ode)": [[242, "sympy.solvers.ode.ode._nonlinear_3eq_order1_type1"]], "_nonlinear_3eq_order1_type2() (in module sympy.solvers.ode.ode)": [[242, "sympy.solvers.ode.ode._nonlinear_3eq_order1_type2"]], "_nonlinear_3eq_order1_type3() (in module sympy.solvers.ode.ode)": [[242, "sympy.solvers.ode.ode._nonlinear_3eq_order1_type3"]], "_nonlinear_3eq_order1_type4() (in module sympy.solvers.ode.ode)": [[242, "sympy.solvers.ode.ode._nonlinear_3eq_order1_type4"]], "_nonlinear_3eq_order1_type5() (in module sympy.solvers.ode.ode)": [[242, "sympy.solvers.ode.ode._nonlinear_3eq_order1_type5"]], "allhints (in module sympy.solvers.ode)": [[242, "sympy.solvers.ode.allhints"]], "canonical_odes() (in module sympy.solvers.ode.systems)": [[242, "sympy.solvers.ode.systems.canonical_odes"]], "checkinfsol() (in module sympy.solvers.ode)": [[242, "sympy.solvers.ode.checkinfsol"]], "checkodesol() (in module sympy.solvers.ode)": [[242, "sympy.solvers.ode.checkodesol"]], "classify_ode() (in module sympy.solvers.ode)": [[242, "sympy.solvers.ode.classify_ode"]], "compute_m_ybar() (in module sympy.solvers.ode.riccati)": [[242, "sympy.solvers.ode.riccati.compute_m_ybar"]], "constant_renumber() (in module sympy.solvers.ode.ode)": [[242, "sympy.solvers.ode.ode.constant_renumber"]], "constantsimp() (in module sympy.solvers.ode)": [[242, "sympy.solvers.ode.constantsimp"]], "construct_c() (in module sympy.solvers.ode.riccati)": [[242, "sympy.solvers.ode.riccati.construct_c"]], "construct_d() (in module sympy.solvers.ode.riccati)": [[242, "sympy.solvers.ode.riccati.construct_d"]], "dsolve() (in module sympy.solvers.ode)": [[242, "sympy.solvers.ode.dsolve"]], "dsolve_system() (in module sympy.solvers.ode.systems)": [[242, "sympy.solvers.ode.systems.dsolve_system"]], "get_gen_sol_from_part_sol() (in module sympy.solvers.ode.riccati)": [[242, "sympy.solvers.ode.riccati.get_gen_sol_from_part_sol"]], "homogeneous_order() (in module sympy.solvers.ode)": [[242, "sympy.solvers.ode.homogeneous_order"]], "infinitesimals() (in module sympy.solvers.ode)": [[242, "sympy.solvers.ode.infinitesimals"]], "lie_heuristic_abaco1_product() (in module sympy.solvers.ode.lie_group)": [[242, "sympy.solvers.ode.lie_group.lie_heuristic_abaco1_product"]], "lie_heuristic_abaco1_simple() (in module sympy.solvers.ode.lie_group)": [[242, "sympy.solvers.ode.lie_group.lie_heuristic_abaco1_simple"]], "lie_heuristic_abaco2_similar() (in module sympy.solvers.ode.lie_group)": [[242, "sympy.solvers.ode.lie_group.lie_heuristic_abaco2_similar"]], "lie_heuristic_abaco2_unique_general() (in module sympy.solvers.ode.lie_group)": [[242, "sympy.solvers.ode.lie_group.lie_heuristic_abaco2_unique_general"]], "lie_heuristic_abaco2_unique_unknown() (in module sympy.solvers.ode.lie_group)": [[242, "sympy.solvers.ode.lie_group.lie_heuristic_abaco2_unique_unknown"]], "lie_heuristic_bivariate() (in module sympy.solvers.ode.lie_group)": [[242, "sympy.solvers.ode.lie_group.lie_heuristic_bivariate"]], "lie_heuristic_chi() (in module sympy.solvers.ode.lie_group)": [[242, "sympy.solvers.ode.lie_group.lie_heuristic_chi"]], "lie_heuristic_function_sum() (in module sympy.solvers.ode.lie_group)": [[242, "sympy.solvers.ode.lie_group.lie_heuristic_function_sum"]], "lie_heuristic_linear() (in module sympy.solvers.ode.lie_group)": [[242, "sympy.solvers.ode.lie_group.lie_heuristic_linear"]], "linear_ode_to_matrix() (in module sympy.solvers.ode.systems)": [[242, "sympy.solvers.ode.systems.linear_ode_to_matrix"]], "linodesolve() (in module sympy.solvers.ode.systems)": [[242, "sympy.solvers.ode.systems.linodesolve"]], "linodesolve_type() (in module sympy.solvers.ode.systems)": [[242, "sympy.solvers.ode.systems.linodesolve_type"]], "matrix_exp() (in module sympy.solvers.ode.systems)": [[242, "sympy.solvers.ode.systems.matrix_exp"]], "matrix_exp_jordan_form() (in module sympy.solvers.ode.systems)": [[242, "sympy.solvers.ode.systems.matrix_exp_jordan_form"]], "ode_1st_power_series() (in module sympy.solvers.ode.ode)": [[242, "sympy.solvers.ode.ode.ode_1st_power_series"]], "ode_2nd_power_series_ordinary() (in module sympy.solvers.ode.ode)": [[242, "sympy.solvers.ode.ode.ode_2nd_power_series_ordinary"]], "ode_2nd_power_series_regular() (in module sympy.solvers.ode.ode)": [[242, "sympy.solvers.ode.ode.ode_2nd_power_series_regular"]], "ode_sol_simplicity() (in module sympy.solvers.ode.ode)": [[242, "sympy.solvers.ode.ode.ode_sol_simplicity"]], "odesimp() (in module sympy.solvers.ode.ode)": [[242, "sympy.solvers.ode.ode.odesimp"]], "rational_laurent_series() (in module sympy.solvers.ode.riccati)": [[242, "sympy.solvers.ode.riccati.rational_laurent_series"]], "remove_redundant_sols() (in module sympy.solvers.ode.riccati)": [[242, "sympy.solvers.ode.riccati.remove_redundant_sols"]], "riccati_inverse_normal() (in module sympy.solvers.ode.riccati)": [[242, "sympy.solvers.ode.riccati.riccati_inverse_normal"]], "riccati_normal() (in module sympy.solvers.ode.riccati)": [[242, "sympy.solvers.ode.riccati.riccati_normal"]], "riccati_reduced() (in module sympy.solvers.ode.riccati)": [[242, "sympy.solvers.ode.riccati.riccati_reduced"]], "solve_aux_eq() (in module sympy.solvers.ode.riccati)": [[242, "sympy.solvers.ode.riccati.solve_aux_eq"]], "solve_riccati() (in module sympy.solvers.ode.riccati)": [[242, "sympy.solvers.ode.riccati.solve_riccati"]], "sympy.solvers.ode": [[242, "module-sympy.solvers.ode"]], "sympy.solvers.ode.ode": [[242, "module-sympy.solvers.ode.ode"]], "checkpdesol() (in module sympy.solvers.pde)": [[243, "sympy.solvers.pde.checkpdesol"]], "classify_pde() (in module sympy.solvers.pde)": [[243, "sympy.solvers.pde.classify_pde"]], "pde_1st_linear_constant_coeff() (in module sympy.solvers.pde)": [[243, "sympy.solvers.pde.pde_1st_linear_constant_coeff"]], "pde_1st_linear_constant_coeff_homogeneous() (in module sympy.solvers.pde)": [[243, "sympy.solvers.pde.pde_1st_linear_constant_coeff_homogeneous"]], "pde_1st_linear_variable_coeff() (in module sympy.solvers.pde)": [[243, "sympy.solvers.pde.pde_1st_linear_variable_coeff"]], "pde_separate() (in module sympy.solvers.pde)": [[243, "sympy.solvers.pde.pde_separate"]], "pde_separate_add() (in module sympy.solvers.pde)": [[243, "sympy.solvers.pde.pde_separate_add"]], "pde_separate_mul() (in module sympy.solvers.pde)": [[243, "sympy.solvers.pde.pde_separate_mul"]], "pdsolve() (in module sympy.solvers.pde)": [[243, "sympy.solvers.pde.pdsolve"]], "sympy.solvers.pde": [[243, "module-sympy.solvers.pde"]], "checksol() (in module sympy.solvers.solvers)": [[244, "sympy.solvers.solvers.checksol"]], "linprog() (in module sympy.solvers.simplex)": [[244, "sympy.solvers.simplex.linprog"]], "lpmax() (in module sympy.solvers.simplex)": [[244, "sympy.solvers.simplex.lpmax"]], "lpmin() (in module sympy.solvers.simplex)": [[244, "sympy.solvers.simplex.lpmin"]], "nsolve() (in module sympy.solvers.solvers)": [[244, "sympy.solvers.solvers.nsolve"]], "ode_order() (in module sympy.solvers.deutils)": [[244, "sympy.solvers.deutils.ode_order"]], "rsolve() (in module sympy.solvers.recurr)": [[244, "sympy.solvers.recurr.rsolve"]], "rsolve_hyper() (in module sympy.solvers.recurr)": [[244, "sympy.solvers.recurr.rsolve_hyper"]], "rsolve_poly() (in module sympy.solvers.recurr)": [[244, "sympy.solvers.recurr.rsolve_poly"]], "rsolve_ratio() (in module sympy.solvers.recurr)": [[244, "sympy.solvers.recurr.rsolve_ratio"]], "solve() (in module sympy.solvers.solvers)": [[244, "sympy.solvers.solvers.solve"]], "solve_linear() (in module sympy.solvers.solvers)": [[244, "sympy.solvers.solvers.solve_linear"]], "solve_linear_system() (in module sympy.solvers.solvers)": [[244, "sympy.solvers.solvers.solve_linear_system"]], "solve_linear_system_lu() (in module sympy.solvers.solvers)": [[244, "sympy.solvers.solvers.solve_linear_system_LU"]], "solve_poly_system() (in module sympy.solvers.polysys)": [[244, "sympy.solvers.polysys.solve_poly_system"]], "solve_triangulated() (in module sympy.solvers.polysys)": [[244, "sympy.solvers.polysys.solve_triangulated"]], "solve_undetermined_coeffs() (in module sympy.solvers.solvers)": [[244, "sympy.solvers.solvers.solve_undetermined_coeffs"]], "sympy.solvers": [[244, "module-sympy.solvers"]], "sympy.solvers.recurr": [[244, "module-sympy.solvers.recurr"]], "sympy.solvers.simplex": [[244, "module-sympy.solvers.simplex"]], "unrad() (in module sympy.solvers.solvers)": [[244, "sympy.solvers.solvers.unrad"]], "_is_exponential() (in module sympy.solvers.solveset)": [[245, "sympy.solvers.solveset._is_exponential"]], "_is_logarithmic() (in module sympy.solvers.solveset)": [[245, "sympy.solvers.solveset._is_logarithmic"]], "_solve_exponential() (in module sympy.solvers.solveset)": [[245, "sympy.solvers.solveset._solve_exponential"]], "_solve_logarithm() (in module sympy.solvers.solveset)": [[245, "sympy.solvers.solveset._solve_logarithm"]], "_transolve() (in module sympy.solvers.solveset)": [[245, "sympy.solvers.solveset._transolve"]], "domain_check() (in module sympy.solvers.solveset)": [[245, "sympy.solvers.solveset.domain_check"]], "invert_complex() (in module sympy.solvers.solveset)": [[245, "sympy.solvers.solveset.invert_complex"]], "invert_real() (in module sympy.solvers.solveset)": [[245, "sympy.solvers.solveset.invert_real"]], "linear_eq_to_matrix() (in module sympy.solvers.solveset)": [[245, "sympy.solvers.solveset.linear_eq_to_matrix"]], "linsolve() (in module sympy.solvers.solveset)": [[245, "sympy.solvers.solveset.linsolve"]], "nonlinsolve() (in module sympy.solvers.solveset)": [[245, "sympy.solvers.solveset.nonlinsolve"]], "solveset() (in module sympy.solvers.solveset)": [[245, "sympy.solvers.solveset.solveset"]], "solveset_complex() (in module sympy.solvers.solveset)": [[245, "sympy.solvers.solveset.solveset_complex"]], "solveset_real() (in module sympy.solvers.solveset)": [[245, "sympy.solvers.solveset.solveset_real"]], "solvify() (in module sympy.solvers.solveset)": [[245, "sympy.solvers.solveset.solvify"]], "sympy.solvers.solveset": [[245, "module-sympy.solvers.solveset"]], "arcsin() (in module sympy.stats)": [[246, "sympy.stats.Arcsin"]], "benini() (in module sympy.stats)": [[246, "sympy.stats.Benini"]], "bernoulli() (in module sympy.stats)": [[246, "sympy.stats.Bernoulli"]], "bernoulliprocess (class in sympy.stats)": [[246, "sympy.stats.BernoulliProcess"]], "beta() (in module sympy.stats)": [[246, "sympy.stats.Beta"]], "betabinomial() (in module sympy.stats)": [[246, "sympy.stats.BetaBinomial"]], "betanoncentral() (in module sympy.stats)": [[246, "sympy.stats.BetaNoncentral"]], "betaprime() (in module sympy.stats)": [[246, "sympy.stats.BetaPrime"]], "binomial() (in module sympy.stats)": [[246, "sympy.stats.Binomial"]], "boundedpareto() (in module sympy.stats)": [[246, "sympy.stats.BoundedPareto"]], "cauchy() (in module sympy.stats)": [[246, "sympy.stats.Cauchy"]], "centralmoment (class in sympy.stats)": [[246, "sympy.stats.CentralMoment"]], "chi() (in module sympy.stats)": [[246, "sympy.stats.Chi"]], "chinoncentral() (in module sympy.stats)": [[246, "sympy.stats.ChiNoncentral"]], "chisquared() (in module sympy.stats)": [[246, "sympy.stats.ChiSquared"]], "coin() (in module sympy.stats)": [[246, "sympy.stats.Coin"]], "compounddistribution (class in sympy.stats.compound_rv)": [[246, "sympy.stats.compound_rv.CompoundDistribution"]], "conditionaldomain (class in sympy.stats.rv)": [[246, "sympy.stats.rv.ConditionalDomain"]], "continuousdomain (class in sympy.stats.crv)": [[246, "sympy.stats.crv.ContinuousDomain"]], "continuousmarkovchain (class in sympy.stats)": [[246, "sympy.stats.ContinuousMarkovChain"]], "continuouspspace (class in sympy.stats.crv)": [[246, "sympy.stats.crv.ContinuousPSpace"]], "continuousrv() (in module sympy.stats)": [[246, "sympy.stats.ContinuousRV"]], "covariance (class in sympy.stats)": [[246, "sympy.stats.Covariance"]], "crosscovariancematrix (class in sympy.stats)": [[246, "sympy.stats.CrossCovarianceMatrix"]], "dagum() (in module sympy.stats)": [[246, "sympy.stats.Dagum"]], "davis() (in module sympy.stats)": [[246, "sympy.stats.Davis"]], "die() (in module sympy.stats)": [[246, "sympy.stats.Die"]], "diepspace (class in sympy.stats.frv_types)": [[246, "sympy.stats.frv_types.DiePSpace"]], "discretemarkovchain (class in sympy.stats)": [[246, "sympy.stats.DiscreteMarkovChain"]], "discreteuniform() (in module sympy.stats)": [[246, "sympy.stats.DiscreteUniform"]], "e() (in module sympy.stats)": [[246, "sympy.stats.E"]], "erlang() (in module sympy.stats)": [[246, "sympy.stats.Erlang"]], "exgaussian() (in module sympy.stats)": [[246, "sympy.stats.ExGaussian"]], "expectation (class in sympy.stats)": [[246, "sympy.stats.Expectation"]], "expectationmatrix (class in sympy.stats)": [[246, "sympy.stats.ExpectationMatrix"]], "exponential() (in module sympy.stats)": [[246, "sympy.stats.Exponential"]], "fdistribution() (in module sympy.stats)": [[246, "sympy.stats.FDistribution"]], "finitedomain (class in sympy.stats.frv)": [[246, "sympy.stats.frv.FiniteDomain"]], "finitepspace (class in sympy.stats.frv)": [[246, "sympy.stats.frv.FinitePSpace"]], "finiterv() (in module sympy.stats)": [[246, "sympy.stats.FiniteRV"]], "fisherz() (in module sympy.stats)": [[246, "sympy.stats.FisherZ"]], "frechet() (in module sympy.stats)": [[246, "sympy.stats.Frechet"]], "gamma() (in module sympy.stats)": [[246, "sympy.stats.Gamma"]], "gammainverse() (in module sympy.stats)": [[246, "sympy.stats.GammaInverse"]], "gammaprocess (class in sympy.stats)": [[246, "sympy.stats.GammaProcess"]], "generalizedmultivariateloggamma() (in module sympy.stats)": [[246, "sympy.stats.GeneralizedMultivariateLogGamma"]], "generalizedmultivariateloggammaomega() (in module sympy.stats)": [[246, "sympy.stats.GeneralizedMultivariateLogGammaOmega"]], "geometric() (in module sympy.stats)": [[246, "sympy.stats.Geometric"]], "gompertz() (in module sympy.stats)": [[246, "sympy.stats.Gompertz"]], "gumbel() (in module sympy.stats)": [[246, "sympy.stats.Gumbel"]], "hermite() (in module sympy.stats)": [[246, "sympy.stats.Hermite"]], "hypergeometric() (in module sympy.stats)": [[246, "sympy.stats.Hypergeometric"]], "jointrv() (in module sympy.stats)": [[246, "sympy.stats.JointRV"]], "kumaraswamy() (in module sympy.stats)": [[246, "sympy.stats.Kumaraswamy"]], "laplace() (in module sympy.stats)": [[246, "sympy.stats.Laplace"]], "levy() (in module sympy.stats)": [[246, "sympy.stats.Levy"]], "loglogistic() (in module sympy.stats)": [[246, "sympy.stats.LogLogistic"]], "lognormal() (in module sympy.stats)": [[246, "sympy.stats.LogNormal"]], "logarithmic() (in module sympy.stats)": [[246, "sympy.stats.Logarithmic"]], "logistic() (in module sympy.stats)": [[246, "sympy.stats.Logistic"]], "lomax() (in module sympy.stats)": [[246, "sympy.stats.Lomax"]], "matrixgamma() (in module sympy.stats)": [[246, "sympy.stats.MatrixGamma"]], "matrixnormal() (in module sympy.stats)": [[246, "sympy.stats.MatrixNormal"]], "maxwell() (in module sympy.stats)": [[246, "sympy.stats.Maxwell"]], "moment (class in sympy.stats)": [[246, "sympy.stats.Moment"]], "moyal() (in module sympy.stats)": [[246, "sympy.stats.Moyal"]], "multinomial() (in module sympy.stats)": [[246, "sympy.stats.Multinomial"]], "multivariatebeta() (in module sympy.stats)": [[246, "sympy.stats.MultivariateBeta"]], "multivariateewens() (in module sympy.stats)": [[246, "sympy.stats.MultivariateEwens"]], "multivariatelaplace() (in module sympy.stats)": [[246, "sympy.stats.MultivariateLaplace"]], "multivariatenormal() (in module sympy.stats)": [[246, "sympy.stats.MultivariateNormal"]], "multivariatet() (in module sympy.stats)": [[246, "sympy.stats.MultivariateT"]], "nakagami() (in module sympy.stats)": [[246, "sympy.stats.Nakagami"]], "negativebinomial() (in module sympy.stats)": [[246, "sympy.stats.NegativeBinomial"]], "negativemultinomial() (in module sympy.stats)": [[246, "sympy.stats.NegativeMultinomial"]], "normal() (in module sympy.stats)": [[246, "sympy.stats.Normal"]], "normalgamma() (in module sympy.stats)": [[246, "sympy.stats.NormalGamma"]], "normalpspace (class in sympy.stats.crv_types)": [[246, "sympy.stats.crv_types.NormalPSpace"]], "p() (in module sympy.stats)": [[246, "sympy.stats.P"]], "pspace (class in sympy.stats.rv)": [[246, "sympy.stats.rv.PSpace"]], "pareto() (in module sympy.stats)": [[246, "sympy.stats.Pareto"]], "poisson() (in module sympy.stats)": [[246, "sympy.stats.Poisson"]], "poissonprocess (class in sympy.stats)": [[246, "sympy.stats.PoissonProcess"]], "powerfunction() (in module sympy.stats)": [[246, "sympy.stats.PowerFunction"]], "probability (class in sympy.stats)": [[246, "sympy.stats.Probability"]], "productdomain (class in sympy.stats.rv)": [[246, "sympy.stats.rv.ProductDomain"]], "productpspace (class in sympy.stats.rv)": [[246, "sympy.stats.rv.ProductPSpace"]], "quadraticu() (in module sympy.stats)": [[246, "sympy.stats.QuadraticU"]], "rademacher() (in module sympy.stats)": [[246, "sympy.stats.Rademacher"]], "raisedcosine() (in module sympy.stats)": [[246, "sympy.stats.RaisedCosine"]], "randomdomain (class in sympy.stats.rv)": [[246, "sympy.stats.rv.RandomDomain"]], "randomsymbol (class in sympy.stats.rv)": [[246, "sympy.stats.rv.RandomSymbol"]], "rayleigh() (in module sympy.stats)": [[246, "sympy.stats.Rayleigh"]], "reciprocal() (in module sympy.stats)": [[246, "sympy.stats.Reciprocal"]], "shiftedgompertz() (in module sympy.stats)": [[246, "sympy.stats.ShiftedGompertz"]], "singledomain (class in sympy.stats.rv)": [[246, "sympy.stats.rv.SingleDomain"]], "singlepspace (class in sympy.stats.rv)": [[246, "sympy.stats.rv.SinglePSpace"]], "skellam() (in module sympy.stats)": [[246, "sympy.stats.Skellam"]], "studentt() (in module sympy.stats)": [[246, "sympy.stats.StudentT"]], "trapezoidal() (in module sympy.stats)": [[246, "sympy.stats.Trapezoidal"]], "triangular() (in module sympy.stats)": [[246, "sympy.stats.Triangular"]], "uniform() (in module sympy.stats)": [[246, "sympy.stats.Uniform"]], "uniformsum() (in module sympy.stats)": [[246, "sympy.stats.UniformSum"]], "variance (class in sympy.stats)": [[246, "sympy.stats.Variance"]], "variancematrix (class in sympy.stats)": [[246, "sympy.stats.VarianceMatrix"]], "vonmises() (in module sympy.stats)": [[246, "sympy.stats.VonMises"]], "wald() (in module sympy.stats)": [[246, "sympy.stats.Wald"]], "weibull() (in module sympy.stats)": [[246, "sympy.stats.Weibull"]], "wienerprocess (class in sympy.stats)": [[246, "sympy.stats.WienerProcess"]], "wignersemicircle() (in module sympy.stats)": [[246, "sympy.stats.WignerSemicircle"]], "wishart() (in module sympy.stats)": [[246, "sympy.stats.Wishart"]], "yulesimon() (in module sympy.stats)": [[246, "sympy.stats.YuleSimon"]], "zeta() (in module sympy.stats)": [[246, "sympy.stats.Zeta"]], "absorbing_probabilities() (sympy.stats.discretemarkovchain method)": [[246, "sympy.stats.DiscreteMarkovChain.absorbing_probabilities"]], "canonical_form() (sympy.stats.discretemarkovchain method)": [[246, "sympy.stats.DiscreteMarkovChain.canonical_form"]], "cmoment() (in module sympy.stats)": [[246, "sympy.stats.cmoment"]], "communication_classes() (sympy.stats.discretemarkovchain method)": [[246, "sympy.stats.DiscreteMarkovChain.communication_classes"]], "correlation() (in module sympy.stats)": [[246, "sympy.stats.correlation"]], "coskewness() (in module sympy.stats)": [[246, "sympy.stats.coskewness"]], "covariance() (in module sympy.stats)": [[246, "sympy.stats.covariance"]], "decompose() (sympy.stats.discretemarkovchain method)": [[246, "sympy.stats.DiscreteMarkovChain.decompose"]], "density() (in module sympy.stats)": [[246, "sympy.stats.density"]], "entropy() (in module sympy.stats)": [[246, "sympy.stats.entropy"]], "expectation() (sympy.stats.bernoulliprocess method)": [[246, "sympy.stats.BernoulliProcess.expectation"]], "factorial_moment() (in module sympy.stats)": [[246, "sympy.stats.factorial_moment"]], "fixed_row_vector() (sympy.stats.discretemarkovchain method)": [[246, "sympy.stats.DiscreteMarkovChain.fixed_row_vector"]], "fundamental_matrix() (sympy.stats.discretemarkovchain method)": [[246, "sympy.stats.DiscreteMarkovChain.fundamental_matrix"]], "given() (in module sympy.stats)": [[246, "sympy.stats.given"]], "kurtosis() (in module sympy.stats)": [[246, "sympy.stats.kurtosis"]], "limiting_distribution (sympy.stats.discretemarkovchain property)": [[246, "sympy.stats.DiscreteMarkovChain.limiting_distribution"]], "marginal_distribution() (in module sympy.stats)": [[246, "sympy.stats.marginal_distribution"]], "median() (in module sympy.stats)": [[246, "sympy.stats.median"]], "moment() (in module sympy.stats)": [[246, "sympy.stats.moment"]], "probability() (sympy.stats.bernoulliprocess method)": [[246, "sympy.stats.BernoulliProcess.probability"]], "pspace() (in module sympy.stats.rv)": [[246, "sympy.stats.rv.pspace"]], "quantile() (in module sympy.stats)": [[246, "sympy.stats.quantile"]], "random_symbols() (in module sympy.stats.rv)": [[246, "sympy.stats.rv.random_symbols"]], "rs_swap() (in module sympy.stats.rv)": [[246, "sympy.stats.rv.rs_swap"]], "sample() (in module sympy.stats)": [[246, "sympy.stats.sample"]], "sample() (sympy.stats.discretemarkovchain method)": [[246, "sympy.stats.DiscreteMarkovChain.sample"]], "sample_iter() (in module sympy.stats)": [[246, "sympy.stats.sample_iter"]], "sampling_e() (in module sympy.stats.rv)": [[246, "sympy.stats.rv.sampling_E"]], "sampling_p() (in module sympy.stats.rv)": [[246, "sympy.stats.rv.sampling_P"]], "sampling_density() (in module sympy.stats.rv)": [[246, "sympy.stats.rv.sampling_density"]], "skewness() (in module sympy.stats)": [[246, "sympy.stats.skewness"]], "stationary_distribution() (sympy.stats.discretemarkovchain method)": [[246, "sympy.stats.DiscreteMarkovChain.stationary_distribution"]], "std() (in module sympy.stats)": [[246, "sympy.stats.std"]], "sympy.stats": [[246, "module-sympy.stats"]], "sympy.stats.die() (in module sympy.stats.crv_types)": [[246, "sympy.stats.crv_types.sympy.stats.Die"]], "sympy.stats.normal() (in module sympy.stats.crv_types)": [[246, "sympy.stats.crv_types.sympy.stats.Normal"]], "sympy.stats.crv": [[246, "module-sympy.stats.crv"]], "sympy.stats.crv_types": [[246, "module-sympy.stats.crv_types"]], "sympy.stats.frv": [[246, "module-sympy.stats.frv"]], "sympy.stats.frv_types": [[246, "module-sympy.stats.frv_types"]], "sympy.stats.rv": [[246, "module-sympy.stats.rv"]], "transition_probabilities (sympy.stats.discretemarkovchain property)": [[246, "sympy.stats.DiscreteMarkovChain.transition_probabilities"]], "variance() (in module sympy.stats)": [[246, "sympy.stats.variance"]], "where() (in module sympy.stats)": [[246, "sympy.stats.where"]], "immutabledensendimarray (class in sympy.tensor.array)": [[247, "sympy.tensor.array.ImmutableDenseNDimArray"]], "immutablesparsendimarray (class in sympy.tensor.array)": [[247, "sympy.tensor.array.ImmutableSparseNDimArray"]], "mutabledensendimarray (class in sympy.tensor.array)": [[247, "sympy.tensor.array.MutableDenseNDimArray"]], "mutablesparsendimarray (class in sympy.tensor.array)": [[247, "sympy.tensor.array.MutableSparseNDimArray"]], "derive_by_array() (in module sympy.tensor.array)": [[247, "sympy.tensor.array.derive_by_array"]], "permutedims() (in module sympy.tensor.array)": [[247, "sympy.tensor.array.permutedims"]], "sympy.tensor.array": [[247, "module-sympy.tensor.array"]], "tensorcontraction() (in module sympy.tensor.array)": [[247, "sympy.tensor.array.tensorcontraction"]], "tensordiagonal() (in module sympy.tensor.array)": [[247, "sympy.tensor.array.tensordiagonal"]], "tensorproduct() (in module sympy.tensor.array)": [[247, "sympy.tensor.array.tensorproduct"]], "arraycontraction (class in sympy.tensor.array.expressions)": [[248, "sympy.tensor.array.expressions.ArrayContraction"]], "arraydiagonal (class in sympy.tensor.array.expressions)": [[248, "sympy.tensor.array.expressions.ArrayDiagonal"]], "arraytensorproduct (class in sympy.tensor.array.expressions)": [[248, "sympy.tensor.array.expressions.ArrayTensorProduct"]], "permutedims (class in sympy.tensor.array.expressions)": [[248, "sympy.tensor.array.expressions.PermuteDims"]], "sympy.tensor.array.expressions": [[248, "module-sympy.tensor.array.expressions"]], "sympy.tensor": [[249, "module-sympy.tensor"]], "get_contraction_structure() (in module sympy.tensor.index_methods)": [[250, "sympy.tensor.index_methods.get_contraction_structure"]], "get_indices() (in module sympy.tensor.index_methods)": [[250, "sympy.tensor.index_methods.get_indices"]], "sympy.tensor.index_methods": [[250, "module-sympy.tensor.index_methods"]], "idx (class in sympy.tensor.indexed)": [[251, "sympy.tensor.indexed.Idx"]], "indexed (class in sympy.tensor.indexed)": [[251, "sympy.tensor.indexed.Indexed"]], "indexedbase (class in sympy.tensor.indexed)": [[251, "sympy.tensor.indexed.IndexedBase"]], "base (sympy.tensor.indexed.indexed property)": [[251, "sympy.tensor.indexed.Indexed.base"]], "indices (sympy.tensor.indexed.indexed property)": [[251, "sympy.tensor.indexed.Indexed.indices"]], "label (sympy.tensor.indexed.idx property)": [[251, "sympy.tensor.indexed.Idx.label"]], "label (sympy.tensor.indexed.indexedbase property)": [[251, "sympy.tensor.indexed.IndexedBase.label"]], "lower (sympy.tensor.indexed.idx property)": [[251, "sympy.tensor.indexed.Idx.lower"]], "offset (sympy.tensor.indexed.indexedbase property)": [[251, "sympy.tensor.indexed.IndexedBase.offset"]], "ranges (sympy.tensor.indexed.indexed property)": [[251, "sympy.tensor.indexed.Indexed.ranges"]], "rank (sympy.tensor.indexed.indexed property)": [[251, "sympy.tensor.indexed.Indexed.rank"]], "shape (sympy.tensor.indexed.indexed property)": [[251, "sympy.tensor.indexed.Indexed.shape"]], "shape (sympy.tensor.indexed.indexedbase property)": [[251, "sympy.tensor.indexed.IndexedBase.shape"]], "strides (sympy.tensor.indexed.indexedbase property)": [[251, "sympy.tensor.indexed.IndexedBase.strides"]], "sympy.tensor.indexed": [[251, "module-sympy.tensor.indexed"]], "upper (sympy.tensor.indexed.idx property)": [[251, "sympy.tensor.indexed.Idx.upper"]], "tensadd (class in sympy.tensor.tensor)": [[252, "sympy.tensor.tensor.TensAdd"]], "tensexpr (class in sympy.tensor.tensor)": [[252, "sympy.tensor.tensor.TensExpr"]], "tensmul (class in sympy.tensor.tensor)": [[252, "sympy.tensor.tensor.TensMul"]], "tensorhead (class in sympy.tensor.tensor)": [[252, "sympy.tensor.tensor.TensorHead"]], "tensorindex (class in sympy.tensor.tensor)": [[252, "sympy.tensor.tensor.TensorIndex"]], "tensorindextype (class in sympy.tensor.tensor)": [[252, "sympy.tensor.tensor.TensorIndexType"]], "tensorsymmetry (class in sympy.tensor.tensor)": [[252, "sympy.tensor.tensor.TensorSymmetry"]], "tensortype (class in sympy.tensor.tensor)": [[252, "sympy.tensor.tensor.TensorType"]], "_tensormanager (class in sympy.tensor.tensor)": [[252, "sympy.tensor.tensor._TensorManager"]], "canon_bp() (in module sympy.tensor.tensor)": [[252, "sympy.tensor.tensor.canon_bp"]], "canon_bp() (sympy.tensor.tensor.tensadd method)": [[252, "sympy.tensor.tensor.TensAdd.canon_bp"]], "canon_bp() (sympy.tensor.tensor.tensmul method)": [[252, "sympy.tensor.tensor.TensMul.canon_bp"]], "clear() (sympy.tensor.tensor._tensormanager method)": [[252, "sympy.tensor.tensor._TensorManager.clear"]], "comm_i2symbol() (sympy.tensor.tensor._tensormanager method)": [[252, "sympy.tensor.tensor._TensorManager.comm_i2symbol"]], "comm_symbols2i() (sympy.tensor.tensor._tensormanager method)": [[252, "sympy.tensor.tensor._TensorManager.comm_symbols2i"]], "commutes_with() (sympy.tensor.tensor.tensorhead method)": [[252, "sympy.tensor.tensor.TensorHead.commutes_with"]], "contract_metric() (sympy.tensor.tensor.tensadd method)": [[252, "sympy.tensor.tensor.TensAdd.contract_metric"]], "contract_metric() (sympy.tensor.tensor.tensmul method)": [[252, "sympy.tensor.tensor.TensMul.contract_metric"]], "direct_product() (sympy.tensor.tensor.tensorsymmetry class method)": [[252, "sympy.tensor.tensor.TensorSymmetry.direct_product"]], "fully_symmetric() (sympy.tensor.tensor.tensorsymmetry class method)": [[252, "sympy.tensor.tensor.TensorSymmetry.fully_symmetric"]], "get_comm() (sympy.tensor.tensor._tensormanager method)": [[252, "sympy.tensor.tensor._TensorManager.get_comm"]], "get_free_indices() (sympy.tensor.tensor.tensmul method)": [[252, "sympy.tensor.tensor.TensMul.get_free_indices"]], "get_indices() (sympy.tensor.tensor.tensmul method)": [[252, "sympy.tensor.tensor.TensMul.get_indices"]], "get_matrix() (sympy.tensor.tensor.tensexpr method)": [[252, "sympy.tensor.tensor.TensExpr.get_matrix"]], "no_symmetry() (sympy.tensor.tensor.tensorsymmetry class method)": [[252, "sympy.tensor.tensor.TensorSymmetry.no_symmetry"]], "perm2tensor() (sympy.tensor.tensor.tensmul method)": [[252, "sympy.tensor.tensor.TensMul.perm2tensor"]], "replace_with_arrays() (sympy.tensor.tensor.tensexpr method)": [[252, "sympy.tensor.tensor.TensExpr.replace_with_arrays"]], "riemann() (sympy.tensor.tensor.tensorsymmetry class method)": [[252, "sympy.tensor.tensor.TensorSymmetry.riemann"]], "riemann_cyclic() (in module sympy.tensor.tensor)": [[252, "sympy.tensor.tensor.riemann_cyclic"]], "riemann_cyclic_replace() (in module sympy.tensor.tensor)": [[252, "sympy.tensor.tensor.riemann_cyclic_replace"]], "set_comm() (sympy.tensor.tensor._tensormanager method)": [[252, "sympy.tensor.tensor._TensorManager.set_comm"]], "set_comms() (sympy.tensor.tensor._tensormanager method)": [[252, "sympy.tensor.tensor._TensorManager.set_comms"]], "sorted_components() (sympy.tensor.tensor.tensmul method)": [[252, "sympy.tensor.tensor.TensMul.sorted_components"]], "split() (sympy.tensor.tensor.tensmul method)": [[252, "sympy.tensor.tensor.TensMul.split"]], "sympy.tensor.tensor": [[252, "module-sympy.tensor.tensor"]], "tensor_heads() (in module sympy.tensor.tensor)": [[252, "sympy.tensor.tensor.tensor_heads"]], "tensorsymmetry() (in module sympy.tensor.tensor)": [[252, "sympy.tensor.tensor.tensorsymmetry"]], "partialderivative (class in sympy.tensor.toperators)": [[253, "sympy.tensor.toperators.PartialDerivative"]], "sympy.tensor.toperators": [[253, "module-sympy.tensor.toperators"]], "sympy.testing": [[254, "module-sympy.testing"]], "skip() (in module sympy.testing.pytest)": [[255, "sympy.testing.pytest.SKIP"]], "nocache_fail() (in module sympy.testing.pytest)": [[255, "sympy.testing.pytest.nocache_fail"]], "raises() (in module sympy.testing.pytest)": [[255, "sympy.testing.pytest.raises"]], "skip_under_pyodide() (in module sympy.testing.pytest)": [[255, "sympy.testing.pytest.skip_under_pyodide"]], "sympy.testing.pytest": [[255, "module-sympy.testing.pytest"]], "warns() (in module sympy.testing.pytest)": [[255, "sympy.testing.pytest.warns"]], "warns_deprecated_sympy() (in module sympy.testing.pytest)": [[255, "sympy.testing.pytest.warns_deprecated_sympy"]], "sympy.testing.randtest": [[256, "module-sympy.testing.randtest"]], "pytestreporter (class in sympy.testing.runtests)": [[257, "sympy.testing.runtests.PyTestReporter"]], "reporter (class in sympy.testing.runtests)": [[257, "sympy.testing.runtests.Reporter"]], "sympydoctestfinder (class in sympy.testing.runtests)": [[257, "sympy.testing.runtests.SymPyDocTestFinder"]], "sympydoctestrunner (class in sympy.testing.runtests)": [[257, "sympy.testing.runtests.SymPyDocTestRunner"]], "sympyoutputchecker (class in sympy.testing.runtests)": [[257, "sympy.testing.runtests.SymPyOutputChecker"]], "sympytestresults (class in sympy.testing.runtests)": [[257, "sympy.testing.runtests.SymPyTestResults"]], "attempted (sympy.testing.runtests.sympytestresults attribute)": [[257, "sympy.testing.runtests.SymPyTestResults.attempted"]], "check_output() (sympy.testing.runtests.sympyoutputchecker method)": [[257, "sympy.testing.runtests.SymPyOutputChecker.check_output"]], "convert_to_native_paths() (in module sympy.testing.runtests)": [[257, "sympy.testing.runtests.convert_to_native_paths"]], "doctest() (in module sympy.testing.runtests)": [[257, "sympy.testing.runtests.doctest"]], "failed (sympy.testing.runtests.sympytestresults attribute)": [[257, "sympy.testing.runtests.SymPyTestResults.failed"]], "get_sympy_dir() (in module sympy.testing.runtests)": [[257, "sympy.testing.runtests.get_sympy_dir"]], "raise_on_deprecated() (in module sympy.testing.runtests)": [[257, "sympy.testing.runtests.raise_on_deprecated"]], "run() (sympy.testing.runtests.sympydoctestrunner method)": [[257, "sympy.testing.runtests.SymPyDocTestRunner.run"]], "run_all_tests() (in module sympy.testing.runtests)": [[257, "sympy.testing.runtests.run_all_tests"]], "run_in_subprocess_with_hash_randomization() (in module sympy.testing.runtests)": [[257, "sympy.testing.runtests.run_in_subprocess_with_hash_randomization"]], "split_list() (in module sympy.testing.runtests)": [[257, "sympy.testing.runtests.split_list"]], "sympy.testing.runtests": [[257, "module-sympy.testing.runtests"]], "sympytestfile() (in module sympy.testing.runtests)": [[257, "sympy.testing.runtests.sympytestfile"]], "test() (in module sympy.testing.runtests)": [[257, "sympy.testing.runtests.test"]], "write() (sympy.testing.runtests.pytestreporter method)": [[257, "sympy.testing.runtests.PyTestReporter.write"]], "codewrapper (class in sympy.utilities.autowrap)": [[258, "sympy.utilities.autowrap.CodeWrapper"]], "cythoncodewrapper (class in sympy.utilities.autowrap)": [[258, "sympy.utilities.autowrap.CythonCodeWrapper"]], "dummywrapper (class in sympy.utilities.autowrap)": [[258, "sympy.utilities.autowrap.DummyWrapper"]], "f2pycodewrapper (class in sympy.utilities.autowrap)": [[258, "sympy.utilities.autowrap.F2PyCodeWrapper"]], "ufuncifycodewrapper (class in sympy.utilities.autowrap)": [[258, "sympy.utilities.autowrap.UfuncifyCodeWrapper"]], "autowrap() (in module sympy.utilities.autowrap)": [[258, "sympy.utilities.autowrap.autowrap"]], "binary_function() (in module sympy.utilities.autowrap)": [[258, "sympy.utilities.autowrap.binary_function"]], "dump_c() (sympy.utilities.autowrap.ufuncifycodewrapper method)": [[258, "sympy.utilities.autowrap.UfuncifyCodeWrapper.dump_c"]], "dump_pyx() (sympy.utilities.autowrap.cythoncodewrapper method)": [[258, "sympy.utilities.autowrap.CythonCodeWrapper.dump_pyx"]], "sympy.utilities.autowrap": [[258, "module-sympy.utilities.autowrap"]], "ufuncify() (in module sympy.utilities.autowrap)": [[258, "sympy.utilities.autowrap.ufuncify"]], "argument (class in sympy.utilities.codegen)": [[259, "sympy.utilities.codegen.Argument"]], "ccodegen (class in sympy.utilities.codegen)": [[259, "sympy.utilities.codegen.CCodeGen"]], "codegen (class in sympy.utilities.codegen)": [[259, "sympy.utilities.codegen.CodeGen"]], "datatype (class in sympy.utilities.codegen)": [[259, "sympy.utilities.codegen.DataType"]], "fcodegen (class in sympy.utilities.codegen)": [[259, "sympy.utilities.codegen.FCodeGen"]], "juliacodegen (class in sympy.utilities.codegen)": [[259, "sympy.utilities.codegen.JuliaCodeGen"]], "octavecodegen (class in sympy.utilities.codegen)": [[259, "sympy.utilities.codegen.OctaveCodeGen"]], "outputargument (class in sympy.utilities.codegen)": [[259, "sympy.utilities.codegen.OutputArgument"]], "result (class in sympy.utilities.codegen)": [[259, "sympy.utilities.codegen.Result"]], "routine (class in sympy.utilities.codegen)": [[259, "sympy.utilities.codegen.Routine"]], "rustcodegen (class in sympy.utilities.codegen)": [[259, "sympy.utilities.codegen.RustCodeGen"]], "codegen() (in module sympy.utilities.codegen)": [[259, "sympy.utilities.codegen.codegen"]], "dump_c() (sympy.utilities.codegen.ccodegen method)": [[259, "sympy.utilities.codegen.CCodeGen.dump_c"]], "dump_code() (sympy.utilities.codegen.codegen method)": [[259, "sympy.utilities.codegen.CodeGen.dump_code"]], "dump_f95() (sympy.utilities.codegen.fcodegen method)": [[259, "sympy.utilities.codegen.FCodeGen.dump_f95"]], "dump_h() (sympy.utilities.codegen.ccodegen method)": [[259, "sympy.utilities.codegen.CCodeGen.dump_h"]], "dump_h() (sympy.utilities.codegen.fcodegen method)": [[259, "sympy.utilities.codegen.FCodeGen.dump_h"]], "dump_jl() (sympy.utilities.codegen.juliacodegen method)": [[259, "sympy.utilities.codegen.JuliaCodeGen.dump_jl"]], "dump_m() (sympy.utilities.codegen.octavecodegen method)": [[259, "sympy.utilities.codegen.OctaveCodeGen.dump_m"]], "dump_rs() (sympy.utilities.codegen.rustcodegen method)": [[259, "sympy.utilities.codegen.RustCodeGen.dump_rs"]], "get_default_datatype() (in module sympy.utilities.codegen)": [[259, "sympy.utilities.codegen.get_default_datatype"]], "get_interface() (sympy.utilities.codegen.fcodegen method)": [[259, "sympy.utilities.codegen.FCodeGen.get_interface"]], "get_prototype() (sympy.utilities.codegen.ccodegen method)": [[259, "sympy.utilities.codegen.CCodeGen.get_prototype"]], "get_prototype() (sympy.utilities.codegen.rustcodegen method)": [[259, "sympy.utilities.codegen.RustCodeGen.get_prototype"]], "make_routine() (in module sympy.utilities.codegen)": [[259, "sympy.utilities.codegen.make_routine"]], "result_variables (sympy.utilities.codegen.routine property)": [[259, "sympy.utilities.codegen.Routine.result_variables"]], "routine() (sympy.utilities.codegen.codegen method)": [[259, "sympy.utilities.codegen.CodeGen.routine"]], "routine() (sympy.utilities.codegen.juliacodegen method)": [[259, "sympy.utilities.codegen.JuliaCodeGen.routine"]], "routine() (sympy.utilities.codegen.octavecodegen method)": [[259, "sympy.utilities.codegen.OctaveCodeGen.routine"]], "routine() (sympy.utilities.codegen.rustcodegen method)": [[259, "sympy.utilities.codegen.RustCodeGen.routine"]], "sympy.utilities.codegen": [[259, "module-sympy.utilities.codegen"]], "variables (sympy.utilities.codegen.routine property)": [[259, "sympy.utilities.codegen.Routine.variables"]], "write() (sympy.utilities.codegen.codegen method)": [[259, "sympy.utilities.codegen.CodeGen.write"]], "conserve_mpmath_dps() (in module sympy.utilities.decorator)": [[260, "sympy.utilities.decorator.conserve_mpmath_dps"]], "deprecated() (in module sympy.utilities.decorator)": [[260, "sympy.utilities.decorator.deprecated"]], "doctest_depends_on() (in module sympy.utilities.decorator)": [[260, "sympy.utilities.decorator.doctest_depends_on"]], "memoize_property() (in module sympy.utilities.decorator)": [[260, "sympy.utilities.decorator.memoize_property"]], "no_attrs_in_subclass (class in sympy.utilities.decorator)": [[260, "sympy.utilities.decorator.no_attrs_in_subclass"]], "public() (in module sympy.utilities.decorator)": [[260, "sympy.utilities.decorator.public"]], "sympy.utilities.decorator": [[260, "module-sympy.utilities.decorator"]], "threaded() (in module sympy.utilities.decorator)": [[260, "sympy.utilities.decorator.threaded"]], "threaded_factory() (in module sympy.utilities.decorator)": [[260, "sympy.utilities.decorator.threaded_factory"]], "xthreaded() (in module sympy.utilities.decorator)": [[260, "sympy.utilities.decorator.xthreaded"]], "multisetpartitiontraverser (class in sympy.utilities.enumerative)": [[261, "sympy.utilities.enumerative.MultisetPartitionTraverser"]], "count_partitions() (sympy.utilities.enumerative.multisetpartitiontraverser method)": [[261, "sympy.utilities.enumerative.MultisetPartitionTraverser.count_partitions"]], "enum_all() (sympy.utilities.enumerative.multisetpartitiontraverser method)": [[261, "sympy.utilities.enumerative.MultisetPartitionTraverser.enum_all"]], "enum_large() (sympy.utilities.enumerative.multisetpartitiontraverser method)": [[261, "sympy.utilities.enumerative.MultisetPartitionTraverser.enum_large"]], "enum_range() (sympy.utilities.enumerative.multisetpartitiontraverser method)": [[261, "sympy.utilities.enumerative.MultisetPartitionTraverser.enum_range"]], "enum_small() (sympy.utilities.enumerative.multisetpartitiontraverser method)": [[261, "sympy.utilities.enumerative.MultisetPartitionTraverser.enum_small"]], "factoring_visitor() (in module sympy.utilities.enumerative)": [[261, "sympy.utilities.enumerative.factoring_visitor"]], "list_visitor() (in module sympy.utilities.enumerative)": [[261, "sympy.utilities.enumerative.list_visitor"]], "multiset_partitions_taocp() (in module sympy.utilities.enumerative)": [[261, "sympy.utilities.enumerative.multiset_partitions_taocp"]], "sympy.utilities.enumerative": [[261, "module-sympy.utilities.enumerative"]], "sympydeprecationwarning": [[262, "sympy.utilities.exceptions.SymPyDeprecationWarning"]], "ignore_warnings() (in module sympy.utilities.exceptions)": [[262, "sympy.utilities.exceptions.ignore_warnings"]], "sympy.utilities.exceptions": [[262, "module-sympy.utilities.exceptions"]], "sympy_deprecation_warning() (in module sympy.utilities.exceptions)": [[262, "sympy.utilities.exceptions.sympy_deprecation_warning"]], "sympy.utilities": [[263, "module-sympy.utilities"]], "notiterable (class in sympy.utilities.iterables)": [[264, "sympy.utilities.iterables.NotIterable"]], "binary_partitions() (in module sympy.utilities.iterables)": [[264, "sympy.utilities.iterables.binary_partitions"]], "bracelets() (in module sympy.utilities.iterables)": [[264, "sympy.utilities.iterables.bracelets"]], "capture() (in module sympy.utilities.iterables)": [[264, "sympy.utilities.iterables.capture"]], "common_prefix() (in module sympy.utilities.iterables)": [[264, "sympy.utilities.iterables.common_prefix"]], "common_suffix() (in module sympy.utilities.iterables)": [[264, "sympy.utilities.iterables.common_suffix"]], "connected_components() (in module sympy.utilities.iterables)": [[264, "sympy.utilities.iterables.connected_components"]], "dict_merge() (in module sympy.utilities.iterables)": [[264, "sympy.utilities.iterables.dict_merge"]], "filter_symbols() (in module sympy.utilities.iterables)": [[264, "sympy.utilities.iterables.filter_symbols"]], "flatten() (in module sympy.utilities.iterables)": [[264, "sympy.utilities.iterables.flatten"]], "generate_bell() (in module sympy.utilities.iterables)": [[264, "sympy.utilities.iterables.generate_bell"]], "generate_derangements() (in module sympy.utilities.iterables)": [[264, "sympy.utilities.iterables.generate_derangements"]], "generate_involutions() (in module sympy.utilities.iterables)": [[264, "sympy.utilities.iterables.generate_involutions"]], "generate_oriented_forest() (in module sympy.utilities.iterables)": [[264, "sympy.utilities.iterables.generate_oriented_forest"]], "group() (in module sympy.utilities.iterables)": [[264, "sympy.utilities.iterables.group"]], "has_dups() (in module sympy.utilities.iterables)": [[264, "sympy.utilities.iterables.has_dups"]], "has_variety() (in module sympy.utilities.iterables)": [[264, "sympy.utilities.iterables.has_variety"]], "ibin() (in module sympy.utilities.iterables)": [[264, "sympy.utilities.iterables.ibin"]], "iproduct() (in module sympy.utilities.iterables)": [[264, "sympy.utilities.iterables.iproduct"]], "is_palindromic() (in module sympy.utilities.iterables)": [[264, "sympy.utilities.iterables.is_palindromic"]], "is_sequence() (in module sympy.utilities.iterables)": [[264, "sympy.utilities.iterables.is_sequence"]], "iterable() (in module sympy.utilities.iterables)": [[264, "sympy.utilities.iterables.iterable"]], "kbins() (in module sympy.utilities.iterables)": [[264, "sympy.utilities.iterables.kbins"]], "least_rotation() (in module sympy.utilities.iterables)": [[264, "sympy.utilities.iterables.least_rotation"]], "minlex() (in module sympy.utilities.iterables)": [[264, "sympy.utilities.iterables.minlex"]], "multiset() (in module sympy.utilities.iterables)": [[264, "sympy.utilities.iterables.multiset"]], "multiset_combinations() (in module sympy.utilities.iterables)": [[264, "sympy.utilities.iterables.multiset_combinations"]], "multiset_derangements() (in module sympy.utilities.iterables)": [[264, "sympy.utilities.iterables.multiset_derangements"]], "multiset_partitions() (in module sympy.utilities.iterables)": [[264, "sympy.utilities.iterables.multiset_partitions"]], "multiset_permutations() (in module sympy.utilities.iterables)": [[264, "sympy.utilities.iterables.multiset_permutations"]], "necklaces() (in module sympy.utilities.iterables)": [[264, "sympy.utilities.iterables.necklaces"]], "numbered_symbols() (in module sympy.utilities.iterables)": [[264, "sympy.utilities.iterables.numbered_symbols"]], "ordered_partitions() (in module sympy.utilities.iterables)": [[264, "sympy.utilities.iterables.ordered_partitions"]], "partitions() (in module sympy.utilities.iterables)": [[264, "sympy.utilities.iterables.partitions"]], "permute_signs() (in module sympy.utilities.iterables)": [[264, "sympy.utilities.iterables.permute_signs"]], "postfixes() (in module sympy.utilities.iterables)": [[264, "sympy.utilities.iterables.postfixes"]], "prefixes() (in module sympy.utilities.iterables)": [[264, "sympy.utilities.iterables.prefixes"]], "random_derangement() (in module sympy.utilities.iterables)": [[264, "sympy.utilities.iterables.random_derangement"]], "reshape() (in module sympy.utilities.iterables)": [[264, "sympy.utilities.iterables.reshape"]], "rotate_left() (in module sympy.utilities.iterables)": [[264, "sympy.utilities.iterables.rotate_left"]], "rotate_right() (in module sympy.utilities.iterables)": [[264, "sympy.utilities.iterables.rotate_right"]], "rotations() (in module sympy.utilities.iterables)": [[264, "sympy.utilities.iterables.rotations"]], "roundrobin() (in module sympy.utilities.iterables)": [[264, "sympy.utilities.iterables.roundrobin"]], "runs() (in module sympy.utilities.iterables)": [[264, "sympy.utilities.iterables.runs"]], "sequence_partitions() (in module sympy.utilities.iterables)": [[264, "sympy.utilities.iterables.sequence_partitions"]], "sequence_partitions_empty() (in module sympy.utilities.iterables)": [[264, "sympy.utilities.iterables.sequence_partitions_empty"]], "sift() (in module sympy.utilities.iterables)": [[264, "sympy.utilities.iterables.sift"]], "signed_permutations() (in module sympy.utilities.iterables)": [[264, "sympy.utilities.iterables.signed_permutations"]], "strongly_connected_components() (in module sympy.utilities.iterables)": [[264, "sympy.utilities.iterables.strongly_connected_components"]], "subsets() (in module sympy.utilities.iterables)": [[264, "sympy.utilities.iterables.subsets"]], "sympy.utilities.iterables": [[264, "module-sympy.utilities.iterables"]], "take() (in module sympy.utilities.iterables)": [[264, "sympy.utilities.iterables.take"]], "topological_sort() (in module sympy.utilities.iterables)": [[264, "sympy.utilities.iterables.topological_sort"]], "unflatten() (in module sympy.utilities.iterables)": [[264, "sympy.utilities.iterables.unflatten"]], "uniq() (in module sympy.utilities.iterables)": [[264, "sympy.utilities.iterables.uniq"]], "variations() (in module sympy.utilities.iterables)": [[264, "sympy.utilities.iterables.variations"]], "implemented_function() (in module sympy.utilities.lambdify)": [[265, "sympy.utilities.lambdify.implemented_function"]], "lambdastr() (in module sympy.utilities.lambdify)": [[265, "sympy.utilities.lambdify.lambdastr"]], "lambdify() (in module sympy.utilities.lambdify)": [[265, "sympy.utilities.lambdify.lambdify"]], "sympy.utilities.lambdify": [[265, "module-sympy.utilities.lambdify"]], "assoc_recurrence_memo() (in module sympy.utilities.memoization)": [[266, "sympy.utilities.memoization.assoc_recurrence_memo"]], "recurrence_memo() (in module sympy.utilities.memoization)": [[266, "sympy.utilities.memoization.recurrence_memo"]], "sympy.utilities.memoization": [[266, "module-sympy.utilities.memoization"]], "as_int() (in module sympy.utilities.misc)": [[267, "sympy.utilities.misc.as_int"]], "debug() (in module sympy.utilities.misc)": [[267, "sympy.utilities.misc.debug"]], "debug_decorator() (in module sympy.utilities.misc)": [[267, "sympy.utilities.misc.debug_decorator"]], "debugf() (in module sympy.utilities.misc)": [[267, "sympy.utilities.misc.debugf"]], "filldedent() (in module sympy.utilities.misc)": [[267, "sympy.utilities.misc.filldedent"]], "find_executable() (in module sympy.utilities.misc)": [[267, "sympy.utilities.misc.find_executable"]], "func_name() (in module sympy.utilities.misc)": [[267, "sympy.utilities.misc.func_name"]], "ordinal() (in module sympy.utilities.misc)": [[267, "sympy.utilities.misc.ordinal"]], "rawlines() (in module sympy.utilities.misc)": [[267, "sympy.utilities.misc.rawlines"]], "replace() (in module sympy.utilities.misc)": [[267, "sympy.utilities.misc.replace"]], "strlines() (in module sympy.utilities.misc)": [[267, "sympy.utilities.misc.strlines"]], "sympy.utilities.misc": [[267, "module-sympy.utilities.misc"]], "translate() (in module sympy.utilities.misc)": [[267, "sympy.utilities.misc.translate"]], "get_class() (in module sympy.utilities.source)": [[268, "sympy.utilities.source.get_class"]], "get_mod_func() (in module sympy.utilities.source)": [[268, "sympy.utilities.source.get_mod_func"]], "sympy.utilities.source": [[268, "module-sympy.utilities.source"]], "sympy.utilities.timeutils": [[269, "module-sympy.utilities.timeutils"]], "timed() (in module sympy.utilities.timeutils)": [[269, "sympy.utilities.timeutils.timed"]], "coordsys3d (class in sympy.vector.coordsysrect)": [[270, "sympy.vector.coordsysrect.CoordSys3D"]], "del (class in sympy.vector.deloperator)": [[270, "sympy.vector.deloperator.Del"]], "dyadic (class in sympy.vector.dyadic)": [[270, "sympy.vector.dyadic.Dyadic"]], "implicitregion (class in sympy.vector.implicitregion)": [[270, "sympy.vector.implicitregion.ImplicitRegion"]], "parametricintegral (class in sympy.vector.integrals)": [[270, "sympy.vector.integrals.ParametricIntegral"]], "parametricregion (class in sympy.vector.parametricregion)": [[270, "sympy.vector.parametricregion.ParametricRegion"]], "vector (class in sympy.vector.vector)": [[270, "sympy.vector.vector.Vector"]], "__init__() (sympy.vector.coordsysrect.coordsys3d method)": [[270, "sympy.vector.coordsysrect.CoordSys3D.__init__"]], "components (sympy.vector.dyadic.dyadic property)": [[270, "sympy.vector.dyadic.Dyadic.components"]], "components (sympy.vector.vector.vector property)": [[270, "sympy.vector.vector.Vector.components"]], "create_new() (sympy.vector.coordsysrect.coordsys3d method)": [[270, "sympy.vector.coordsysrect.CoordSys3D.create_new"]], "cross() (sympy.vector.deloperator.del method)": [[270, "sympy.vector.deloperator.Del.cross"]], "cross() (sympy.vector.dyadic.dyadic method)": [[270, "sympy.vector.dyadic.Dyadic.cross"]], "cross() (sympy.vector.vector.vector method)": [[270, "sympy.vector.vector.Vector.cross"]], "dot() (sympy.vector.deloperator.del method)": [[270, "sympy.vector.deloperator.Del.dot"]], "dot() (sympy.vector.dyadic.dyadic method)": [[270, "sympy.vector.dyadic.Dyadic.dot"]], "dot() (sympy.vector.vector.vector method)": [[270, "sympy.vector.vector.Vector.dot"]], "gradient() (sympy.vector.deloperator.del method)": [[270, "sympy.vector.deloperator.Del.gradient"]], "locate_new() (sympy.vector.coordsysrect.coordsys3d method)": [[270, "sympy.vector.coordsysrect.CoordSys3D.locate_new"]], "magnitude() (sympy.vector.vector.vector method)": [[270, "sympy.vector.vector.Vector.magnitude"]], "multiplicity() (sympy.vector.implicitregion.implicitregion method)": [[270, "sympy.vector.implicitregion.ImplicitRegion.multiplicity"]], "normalize() (sympy.vector.vector.vector method)": [[270, "sympy.vector.vector.Vector.normalize"]], "orient_new() (sympy.vector.coordsysrect.coordsys3d method)": [[270, "sympy.vector.coordsysrect.CoordSys3D.orient_new"]], "orient_new_axis() (sympy.vector.coordsysrect.coordsys3d method)": [[270, "sympy.vector.coordsysrect.CoordSys3D.orient_new_axis"]], "orient_new_body() (sympy.vector.coordsysrect.coordsys3d method)": [[270, "sympy.vector.coordsysrect.CoordSys3D.orient_new_body"]], "orient_new_quaternion() (sympy.vector.coordsysrect.coordsys3d method)": [[270, "sympy.vector.coordsysrect.CoordSys3D.orient_new_quaternion"]], "orient_new_space() (sympy.vector.coordsysrect.coordsys3d method)": [[270, "sympy.vector.coordsysrect.CoordSys3D.orient_new_space"]], "outer() (sympy.vector.vector.vector method)": [[270, "sympy.vector.vector.Vector.outer"]], "position_wrt() (sympy.vector.coordsysrect.coordsys3d method)": [[270, "sympy.vector.coordsysrect.CoordSys3D.position_wrt"]], "projection() (sympy.vector.vector.vector method)": [[270, "sympy.vector.vector.Vector.projection"]], "rational_parametrization() (sympy.vector.implicitregion.implicitregion method)": [[270, "sympy.vector.implicitregion.ImplicitRegion.rational_parametrization"]], "regular_point() (sympy.vector.implicitregion.implicitregion method)": [[270, "sympy.vector.implicitregion.ImplicitRegion.regular_point"]], "rotation_matrix() (sympy.vector.coordsysrect.coordsys3d method)": [[270, "sympy.vector.coordsysrect.CoordSys3D.rotation_matrix"]], "scalar_map() (sympy.vector.coordsysrect.coordsys3d method)": [[270, "sympy.vector.coordsysrect.CoordSys3D.scalar_map"]], "separate() (sympy.vector.vector.vector method)": [[270, "sympy.vector.vector.Vector.separate"]], "singular_points() (sympy.vector.implicitregion.implicitregion method)": [[270, "sympy.vector.implicitregion.ImplicitRegion.singular_points"]], "to_matrix() (sympy.vector.dyadic.dyadic method)": [[270, "sympy.vector.dyadic.Dyadic.to_matrix"]], "to_matrix() (sympy.vector.vector.vector method)": [[270, "sympy.vector.vector.Vector.to_matrix"]], "axisorienter (class in sympy.vector.orienters)": [[272, "sympy.vector.orienters.AxisOrienter"]], "bodyorienter (class in sympy.vector.orienters)": [[272, "sympy.vector.orienters.BodyOrienter"]], "orienter (class in sympy.vector.orienters)": [[272, "sympy.vector.orienters.Orienter"]], "quaternionorienter (class in sympy.vector.orienters)": [[272, "sympy.vector.orienters.QuaternionOrienter"]], "spaceorienter (class in sympy.vector.orienters)": [[272, "sympy.vector.orienters.SpaceOrienter"]], "__init__() (sympy.vector.orienters.axisorienter method)": [[272, "sympy.vector.orienters.AxisOrienter.__init__"]], "__init__() (sympy.vector.orienters.bodyorienter method)": [[272, "sympy.vector.orienters.BodyOrienter.__init__"]], "__init__() (sympy.vector.orienters.quaternionorienter method)": [[272, "sympy.vector.orienters.QuaternionOrienter.__init__"]], "__init__() (sympy.vector.orienters.spaceorienter method)": [[272, "sympy.vector.orienters.SpaceOrienter.__init__"]], "rotation_matrix() (sympy.vector.orienters.axisorienter method)": [[272, "sympy.vector.orienters.AxisOrienter.rotation_matrix"]], "rotation_matrix() (sympy.vector.orienters.orienter method)": [[272, "sympy.vector.orienters.Orienter.rotation_matrix"]], "curl() (in module sympy.vector)": [[273, "sympy.vector.curl"]], "divergence() (in module sympy.vector)": [[273, "sympy.vector.divergence"]], "express() (in module sympy.vector)": [[273, "sympy.vector.express"]], "gradient() (in module sympy.vector)": [[273, "sympy.vector.gradient"]], "is_conservative() (in module sympy.vector)": [[273, "sympy.vector.is_conservative"]], "is_solenoidal() (in module sympy.vector)": [[273, "sympy.vector.is_solenoidal"]], "matrix_to_vector() (in module sympy.vector)": [[273, "sympy.vector.matrix_to_vector"]], "scalar_potential() (in module sympy.vector)": [[273, "sympy.vector.scalar_potential"]], "scalar_potential_difference() (in module sympy.vector)": [[273, "sympy.vector.scalar_potential_difference"]], "vector_integrate() (in module sympy.vector.integrals)": [[273, "sympy.vector.integrals.vector_integrate"]], "sympy.vector": [[278, "module-sympy.vector"]], "sympy.physics": [[287, "module-sympy.physics"]]}})
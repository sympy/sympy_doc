Search.setIndex({"docnames": ["citing", "contributing/build-docs", "contributing/debug", "contributing/dependencies", "contributing/deprecations", "contributing/dev-setup", "contributing/docstring", "contributing/documentation-style-guide", "contributing/index", "contributing/make-a-contribution", "explanation/active-deprecations", "explanation/glossary", "explanation/gotchas", "explanation/index", "explanation/solve_output", "explanation/special_topics/classification", "explanation/special_topics/finite_diff_derivatives", "explanation/special_topics/index", "guides/assumptions", "guides/booleans", "guides/custom-functions", "guides/index", "guides/solving/index", "guides/solving/reduce-inequalities-algebraically", "guides/solving/solve-diophantine-equation", "guides/solving/solve-equation-algebraically", "guides/solving/solve-matrix-equation", "guides/solving/solve-numerically", "guides/solving/solve-polynomial", "guides/solving/solve-system-of-equations-algebraically", "guides/solving/solving-guidance", "index", "install", "modules/abc", "modules/algebras", "modules/assumptions/ask", "modules/assumptions/assume", "modules/assumptions/index", "modules/assumptions/predicates", "modules/assumptions/refine", "modules/calculus/index", "modules/categories", "modules/codegen", "modules/combinatorics/fp_groups", "modules/combinatorics/graycode", "modules/combinatorics/group_constructs", "modules/combinatorics/group_numbers", "modules/combinatorics/index", "modules/combinatorics/named_groups", "modules/combinatorics/partitions", "modules/combinatorics/pc_groups", "modules/combinatorics/perm_groups", "modules/combinatorics/permutations", "modules/combinatorics/polyhedron", "modules/combinatorics/prufer", "modules/combinatorics/subsets", "modules/combinatorics/tensor_can", "modules/combinatorics/testutil", "modules/combinatorics/util", "modules/concrete", "modules/core", "modules/crypto", "modules/diffgeom", "modules/discrete", "modules/evalf", "modules/functions/combinatorial", "modules/functions/elementary", "modules/functions/index", "modules/functions/special", "modules/geometry/curves", "modules/geometry/ellipses", "modules/geometry/entities", "modules/geometry/index", "modules/geometry/lines", "modules/geometry/plane", "modules/geometry/points", "modules/geometry/polygons", "modules/geometry/utils", "modules/holonomic/about", "modules/holonomic/convert", "modules/holonomic/index", "modules/holonomic/internal", "modules/holonomic/operations", "modules/holonomic/represent", "modules/holonomic/uses", "modules/integrals/g-functions", "modules/integrals/index", "modules/integrals/integrals", "modules/interactive", "modules/liealgebras/index", "modules/logic", "modules/matrices/common", "modules/matrices/dense", "modules/matrices/expressions", "modules/matrices/immutablematrices", "modules/matrices/index", "modules/matrices/matrices", "modules/matrices/normalforms", "modules/matrices/sparse", "modules/matrices/sparsetools", "modules/ntheory", "modules/numeric-computation", "modules/parsing", "modules/physics/continuum_mechanics/beam", "modules/physics/continuum_mechanics/beam_problems", "modules/physics/continuum_mechanics/index", "modules/physics/continuum_mechanics/truss", "modules/physics/control/control", "modules/physics/control/control_plots", "modules/physics/control/index", "modules/physics/control/lti", "modules/physics/hep/index", "modules/physics/hydrogen", "modules/physics/matrices", "modules/physics/mechanics/advanced", "modules/physics/mechanics/api/body", "modules/physics/mechanics/api/expr_manip", "modules/physics/mechanics/api/index", "modules/physics/mechanics/api/joint", "modules/physics/mechanics/api/kane_lagrange", "modules/physics/mechanics/api/linearize", "modules/physics/mechanics/api/part_bod", "modules/physics/mechanics/api/printing", "modules/physics/mechanics/api/system", "modules/physics/mechanics/autolev_parser", "modules/physics/mechanics/examples", "modules/physics/mechanics/examples/bicycle_example", "modules/physics/mechanics/examples/four_bar_linkage_example", "modules/physics/mechanics/examples/lin_pend_nonmin_example", "modules/physics/mechanics/examples/multi_degree_freedom_holonomic_system", "modules/physics/mechanics/examples/rollingdisc_example", "modules/physics/mechanics/examples/rollingdisc_example_kane", "modules/physics/mechanics/examples/rollingdisc_example_kane_constraints", "modules/physics/mechanics/examples/rollingdisc_example_lagrange", "modules/physics/mechanics/index", "modules/physics/mechanics/joints", "modules/physics/mechanics/kane", "modules/physics/mechanics/lagrange", "modules/physics/mechanics/linearize", "modules/physics/mechanics/masses", "modules/physics/mechanics/reference", "modules/physics/mechanics/sympy_mechanics_for_autolev_users", "modules/physics/mechanics/symsystem", "modules/physics/optics/gaussopt", "modules/physics/optics/index", "modules/physics/optics/medium", "modules/physics/optics/polarization", "modules/physics/optics/utils", "modules/physics/optics/waves", "modules/physics/paulialgebra", "modules/physics/qho_1d", "modules/physics/quantum/anticommutator", "modules/physics/quantum/cartesian", "modules/physics/quantum/cg", "modules/physics/quantum/circuitplot", "modules/physics/quantum/commutator", "modules/physics/quantum/constants", "modules/physics/quantum/dagger", "modules/physics/quantum/gate", "modules/physics/quantum/grover", "modules/physics/quantum/hilbert", "modules/physics/quantum/index", "modules/physics/quantum/innerproduct", "modules/physics/quantum/operator", "modules/physics/quantum/operatorset", "modules/physics/quantum/piab", "modules/physics/quantum/qapply", "modules/physics/quantum/qft", "modules/physics/quantum/qubit", "modules/physics/quantum/represent", "modules/physics/quantum/shor", "modules/physics/quantum/spin", "modules/physics/quantum/state", "modules/physics/quantum/tensorproduct", "modules/physics/secondquant", "modules/physics/sho", "modules/physics/units/dimensions", "modules/physics/units/examples", "modules/physics/units/index", "modules/physics/units/philosophy", "modules/physics/units/prefixes", "modules/physics/units/quantities", "modules/physics/units/unitsystem", "modules/physics/vector/advanced", "modules/physics/vector/api/classes", "modules/physics/vector/api/fieldfunctions", "modules/physics/vector/api/functions", "modules/physics/vector/api/index", "modules/physics/vector/api/kinematics", "modules/physics/vector/api/printing", "modules/physics/vector/fields", "modules/physics/vector/index", "modules/physics/vector/kinematics", "modules/physics/vector/vectors", "modules/physics/wigner", "modules/plotting", "modules/polys/agca", "modules/polys/basics", "modules/polys/domainmatrix", "modules/polys/domainsintro", "modules/polys/domainsref", "modules/polys/index", "modules/polys/internals", "modules/polys/literature", "modules/polys/numberfields", "modules/polys/reference", "modules/polys/ringseries", "modules/polys/solvers", "modules/polys/wester", "modules/printing", "modules/rewriting", "modules/series/formal", "modules/series/fourier", "modules/series/index", "modules/series/limitseq", "modules/series/sequences", "modules/series/series", "modules/sets", "modules/simplify/fu", "modules/simplify/hyperexpand", "modules/simplify/index", "modules/simplify/simplify", "modules/solvers/diophantine", "modules/solvers/index", "modules/solvers/inequalities", "modules/solvers/ode", "modules/solvers/pde", "modules/solvers/solvers", "modules/solvers/solveset", "modules/stats", "modules/tensor/array", "modules/tensor/array_expressions", "modules/tensor/index", "modules/tensor/index_methods", "modules/tensor/indexed", "modules/tensor/tensor", "modules/tensor/toperators", "modules/testing/index", "modules/testing/pytest", "modules/testing/randtest", "modules/testing/runtests", "modules/utilities/autowrap", "modules/utilities/codegen", "modules/utilities/decorator", "modules/utilities/enumerative", "modules/utilities/exceptions", "modules/utilities/index", "modules/utilities/iterables", "modules/utilities/lambdify", "modules/utilities/memoization", "modules/utilities/misc", "modules/utilities/pkgdata", "modules/utilities/source", "modules/utilities/timeutils", "modules/vector/api/classes", "modules/vector/api/index", "modules/vector/api/orienterclasses", "modules/vector/api/vectorfunctions", "modules/vector/basics", "modules/vector/coordsys", "modules/vector/examples", "modules/vector/fields", "modules/vector/index", "modules/vector/intro", "modules/vector/vector_integration", "reference/index", "reference/public/basics/index", "reference/public/codegeneration/index", "reference/public/logic/index", "reference/public/matrices/index", "reference/public/numbertheory/index", "reference/public/physics/index", "reference/public/topics/index", "reference/public/utilities/index", "tutorials/index", "tutorials/intro-tutorial/basic_operations", "tutorials/intro-tutorial/calculus", "tutorials/intro-tutorial/features", "tutorials/intro-tutorial/gotchas", "tutorials/intro-tutorial/index", "tutorials/intro-tutorial/intro", "tutorials/intro-tutorial/manipulation", "tutorials/intro-tutorial/matrices", "tutorials/intro-tutorial/next", "tutorials/intro-tutorial/preliminaries", "tutorials/intro-tutorial/printing", "tutorials/intro-tutorial/simplification", "tutorials/intro-tutorial/solvers"], "filenames": ["citing.md", "contributing/build-docs.rst", "contributing/debug.rst", "contributing/dependencies.md", "contributing/deprecations.md", "contributing/dev-setup.rst", "contributing/docstring.rst", "contributing/documentation-style-guide.rst", "contributing/index.rst", "contributing/make-a-contribution.rst", "explanation/active-deprecations.md", "explanation/glossary.md", "explanation/gotchas.rst", "explanation/index.rst", "explanation/solve_output.rst", "explanation/special_topics/classification.rst", "explanation/special_topics/finite_diff_derivatives.rst", "explanation/special_topics/index.rst", "guides/assumptions.rst", "guides/booleans.rst", "guides/custom-functions.md", "guides/index.rst", "guides/solving/index.md", "guides/solving/reduce-inequalities-algebraically.md", "guides/solving/solve-diophantine-equation.md", "guides/solving/solve-equation-algebraically.md", "guides/solving/solve-matrix-equation.md", "guides/solving/solve-numerically.md", "guides/solving/solve-polynomial.md", "guides/solving/solve-system-of-equations-algebraically.md", "guides/solving/solving-guidance.md", "index.rst", "install.md", "modules/abc.rst", "modules/algebras.rst", "modules/assumptions/ask.rst", "modules/assumptions/assume.rst", "modules/assumptions/index.rst", "modules/assumptions/predicates.rst", "modules/assumptions/refine.rst", "modules/calculus/index.rst", "modules/categories.rst", "modules/codegen.rst", "modules/combinatorics/fp_groups.rst", "modules/combinatorics/graycode.rst", "modules/combinatorics/group_constructs.rst", "modules/combinatorics/group_numbers.rst", "modules/combinatorics/index.rst", "modules/combinatorics/named_groups.rst", "modules/combinatorics/partitions.rst", "modules/combinatorics/pc_groups.rst", "modules/combinatorics/perm_groups.rst", "modules/combinatorics/permutations.rst", "modules/combinatorics/polyhedron.rst", "modules/combinatorics/prufer.rst", "modules/combinatorics/subsets.rst", "modules/combinatorics/tensor_can.rst", "modules/combinatorics/testutil.rst", "modules/combinatorics/util.rst", "modules/concrete.rst", "modules/core.rst", "modules/crypto.rst", "modules/diffgeom.rst", "modules/discrete.rst", "modules/evalf.rst", "modules/functions/combinatorial.rst", "modules/functions/elementary.rst", "modules/functions/index.rst", "modules/functions/special.rst", "modules/geometry/curves.rst", "modules/geometry/ellipses.rst", "modules/geometry/entities.rst", "modules/geometry/index.rst", "modules/geometry/lines.rst", "modules/geometry/plane.rst", "modules/geometry/points.rst", "modules/geometry/polygons.rst", "modules/geometry/utils.rst", "modules/holonomic/about.rst", "modules/holonomic/convert.rst", "modules/holonomic/index.rst", "modules/holonomic/internal.rst", "modules/holonomic/operations.rst", "modules/holonomic/represent.rst", "modules/holonomic/uses.rst", "modules/integrals/g-functions.rst", "modules/integrals/index.rst", "modules/integrals/integrals.rst", "modules/interactive.rst", "modules/liealgebras/index.rst", "modules/logic.rst", "modules/matrices/common.rst", "modules/matrices/dense.rst", "modules/matrices/expressions.rst", "modules/matrices/immutablematrices.rst", "modules/matrices/index.rst", "modules/matrices/matrices.rst", "modules/matrices/normalforms.rst", "modules/matrices/sparse.rst", "modules/matrices/sparsetools.rst", "modules/ntheory.rst", "modules/numeric-computation.rst", "modules/parsing.rst", "modules/physics/continuum_mechanics/beam.rst", "modules/physics/continuum_mechanics/beam_problems.rst", "modules/physics/continuum_mechanics/index.rst", "modules/physics/continuum_mechanics/truss.rst", "modules/physics/control/control.rst", "modules/physics/control/control_plots.rst", "modules/physics/control/index.rst", "modules/physics/control/lti.rst", "modules/physics/hep/index.rst", "modules/physics/hydrogen.rst", "modules/physics/matrices.rst", "modules/physics/mechanics/advanced.rst", "modules/physics/mechanics/api/body.rst", "modules/physics/mechanics/api/expr_manip.rst", "modules/physics/mechanics/api/index.rst", "modules/physics/mechanics/api/joint.rst", "modules/physics/mechanics/api/kane_lagrange.rst", "modules/physics/mechanics/api/linearize.rst", "modules/physics/mechanics/api/part_bod.rst", "modules/physics/mechanics/api/printing.rst", "modules/physics/mechanics/api/system.rst", "modules/physics/mechanics/autolev_parser.rst", "modules/physics/mechanics/examples.rst", "modules/physics/mechanics/examples/bicycle_example.rst", "modules/physics/mechanics/examples/four_bar_linkage_example.rst", "modules/physics/mechanics/examples/lin_pend_nonmin_example.rst", "modules/physics/mechanics/examples/multi_degree_freedom_holonomic_system.rst", "modules/physics/mechanics/examples/rollingdisc_example.rst", "modules/physics/mechanics/examples/rollingdisc_example_kane.rst", "modules/physics/mechanics/examples/rollingdisc_example_kane_constraints.rst", "modules/physics/mechanics/examples/rollingdisc_example_lagrange.rst", "modules/physics/mechanics/index.rst", "modules/physics/mechanics/joints.rst", "modules/physics/mechanics/kane.rst", "modules/physics/mechanics/lagrange.rst", "modules/physics/mechanics/linearize.rst", "modules/physics/mechanics/masses.rst", "modules/physics/mechanics/reference.rst", "modules/physics/mechanics/sympy_mechanics_for_autolev_users.rst", "modules/physics/mechanics/symsystem.rst", "modules/physics/optics/gaussopt.rst", "modules/physics/optics/index.rst", "modules/physics/optics/medium.rst", "modules/physics/optics/polarization.rst", "modules/physics/optics/utils.rst", "modules/physics/optics/waves.rst", "modules/physics/paulialgebra.rst", "modules/physics/qho_1d.rst", "modules/physics/quantum/anticommutator.rst", "modules/physics/quantum/cartesian.rst", "modules/physics/quantum/cg.rst", "modules/physics/quantum/circuitplot.rst", "modules/physics/quantum/commutator.rst", "modules/physics/quantum/constants.rst", "modules/physics/quantum/dagger.rst", "modules/physics/quantum/gate.rst", "modules/physics/quantum/grover.rst", "modules/physics/quantum/hilbert.rst", "modules/physics/quantum/index.rst", "modules/physics/quantum/innerproduct.rst", "modules/physics/quantum/operator.rst", "modules/physics/quantum/operatorset.rst", "modules/physics/quantum/piab.rst", "modules/physics/quantum/qapply.rst", "modules/physics/quantum/qft.rst", "modules/physics/quantum/qubit.rst", "modules/physics/quantum/represent.rst", "modules/physics/quantum/shor.rst", "modules/physics/quantum/spin.rst", "modules/physics/quantum/state.rst", "modules/physics/quantum/tensorproduct.rst", "modules/physics/secondquant.rst", "modules/physics/sho.rst", "modules/physics/units/dimensions.rst", "modules/physics/units/examples.rst", "modules/physics/units/index.rst", "modules/physics/units/philosophy.rst", "modules/physics/units/prefixes.rst", "modules/physics/units/quantities.rst", "modules/physics/units/unitsystem.rst", "modules/physics/vector/advanced.rst", "modules/physics/vector/api/classes.rst", "modules/physics/vector/api/fieldfunctions.rst", "modules/physics/vector/api/functions.rst", "modules/physics/vector/api/index.rst", "modules/physics/vector/api/kinematics.rst", "modules/physics/vector/api/printing.rst", "modules/physics/vector/fields.rst", "modules/physics/vector/index.rst", "modules/physics/vector/kinematics.rst", "modules/physics/vector/vectors.rst", "modules/physics/wigner.rst", "modules/plotting.rst", "modules/polys/agca.rst", "modules/polys/basics.rst", "modules/polys/domainmatrix.rst", "modules/polys/domainsintro.rst", "modules/polys/domainsref.rst", "modules/polys/index.rst", "modules/polys/internals.rst", "modules/polys/literature.rst", "modules/polys/numberfields.rst", "modules/polys/reference.rst", "modules/polys/ringseries.rst", "modules/polys/solvers.rst", "modules/polys/wester.rst", "modules/printing.rst", "modules/rewriting.rst", "modules/series/formal.rst", "modules/series/fourier.rst", "modules/series/index.rst", "modules/series/limitseq.rst", "modules/series/sequences.rst", "modules/series/series.rst", "modules/sets.rst", "modules/simplify/fu.rst", "modules/simplify/hyperexpand.rst", "modules/simplify/index.rst", "modules/simplify/simplify.rst", "modules/solvers/diophantine.rst", "modules/solvers/index.rst", "modules/solvers/inequalities.rst", "modules/solvers/ode.rst", "modules/solvers/pde.rst", "modules/solvers/solvers.rst", "modules/solvers/solveset.rst", "modules/stats.rst", "modules/tensor/array.rst", "modules/tensor/array_expressions.rst", "modules/tensor/index.rst", "modules/tensor/index_methods.rst", "modules/tensor/indexed.rst", "modules/tensor/tensor.rst", "modules/tensor/toperators.rst", "modules/testing/index.rst", "modules/testing/pytest.rst", "modules/testing/randtest.rst", "modules/testing/runtests.rst", "modules/utilities/autowrap.rst", "modules/utilities/codegen.rst", "modules/utilities/decorator.rst", "modules/utilities/enumerative.rst", "modules/utilities/exceptions.rst", "modules/utilities/index.rst", "modules/utilities/iterables.rst", "modules/utilities/lambdify.rst", "modules/utilities/memoization.rst", "modules/utilities/misc.rst", "modules/utilities/pkgdata.rst", "modules/utilities/source.rst", "modules/utilities/timeutils.rst", "modules/vector/api/classes.rst", "modules/vector/api/index.rst", "modules/vector/api/orienterclasses.rst", "modules/vector/api/vectorfunctions.rst", "modules/vector/basics.rst", "modules/vector/coordsys.rst", "modules/vector/examples.rst", "modules/vector/fields.rst", "modules/vector/index.rst", "modules/vector/intro.rst", "modules/vector/vector_integration.rst", "reference/index.rst", "reference/public/basics/index.rst", "reference/public/codegeneration/index.rst", "reference/public/logic/index.rst", "reference/public/matrices/index.rst", "reference/public/numbertheory/index.rst", "reference/public/physics/index.rst", "reference/public/topics/index.rst", "reference/public/utilities/index.rst", "tutorials/index.rst", "tutorials/intro-tutorial/basic_operations.rst", "tutorials/intro-tutorial/calculus.rst", "tutorials/intro-tutorial/features.rst", "tutorials/intro-tutorial/gotchas.rst", "tutorials/intro-tutorial/index.rst", "tutorials/intro-tutorial/intro.rst", "tutorials/intro-tutorial/manipulation.rst", "tutorials/intro-tutorial/matrices.rst", "tutorials/intro-tutorial/next.rst", "tutorials/intro-tutorial/preliminaries.rst", "tutorials/intro-tutorial/printing.rst", "tutorials/intro-tutorial/simplification.rst", "tutorials/intro-tutorial/solvers.rst"], "titles": ["Citing SymPy", "Build the Documentation", "Debugging", "Dependencies", "Deprecation Policy", "Development Environment Setup", "SymPy Docstrings Style Guide", "Docstring Style Guide", "Contributing", "Making a Contribution", "List of active deprecations", "Glossary", "Gotchas and Pitfalls", "Explanations", "Solve Output by Type", "Classification of SymPy objects", "Finite Difference Approximations to Derivatives", "SymPy Special Topics", "Assumptions", "Symbolic and fuzzy booleans", "Writing Custom Functions", "How-to Guides", "Solve Equations", "Reduce One or a System of Inequalities for a Single Variable Algebraically", "Solve a Diophantine Equation Algebraically", "Solve an Equation Algebraically", "Solve a Matrix Equation Algebraically", "Solve One or a System of Equations Numerically", "Find the Roots of a Polynomial Algebraically or Numerically", "Solve a System of Equations Algebraically", "Solving Guidance", "Welcome to SymPy\u2019s documentation!", "Installation", "abc", "Algebras", "Ask", "Assume", "Assumptions", "Predicates", "Refine", "Calculus", "Category Theory", "Code Generation", "Finitely Presented Groups", "Gray Code", "Group constructors", "Nilpotent, Abelian and Cyclic Numbers", "Combinatorics", "Named Groups", "Partitions", "Polycyclic Groups", "Permutation Groups", "Permutations", "Polyhedron", "Prufer Sequences", "Subsets", "Tensor Canonicalization", "Test Utilities", "Utilities", "Concrete", "Core", "Cryptography", "Differential Geometry", "Discrete", "Numerical Evaluation", "Combinatorial", "Elementary", "Functions", "Special", "Curves", "Ellipses", "Entities", "Geometry", "Lines", "Plane", "Points", "Polygons", "Utils", "About Holonomic Functions", "Converting other representations to holonomic", "Holonomic", "Internal API", "Operations on holonomic functions", "Representation of holonomic functions in SymPy", "Uses and Current limitations", "Computing Integrals using Meijer G-Functions", "Integrals", "Integrals", "Interactive", "Lie Algebra", "Logic", "Common Matrices", "Dense Matrices", "Matrix Expressions", "Immutable Matrices", "Matrices", "Matrices (linear algebra)", "Matrix Normal Forms", "Sparse Matrices", "Sparse Tools", "Number Theory", "Numeric Computation", "Parsing", "Beam (Docstrings)", "Solving Beam Bending Problems using Singularity Functions", "Continuum Mechanics", "Truss (Docstrings)", "Control", "Control System Plots", "Control Module", "Control API", "High energy physics", "Hydrogen Wavefunctions", "Matrices", "Potential Issues/Advanced Topics/Future Features in Physics/Mechanics", "Body (Docstrings)", "Expression Manipulation (Docstrings)", "Mechanics API Reference", "Joints Framework (Docstrings)", "Kane\u2019s Method &amp; Lagrange\u2019s Method (Docstrings)", "Linearization (Docstrings)", "Masses, Inertias &amp; Particles, RigidBodys (Docstrings)", "Printing (Docstrings)", "SymbolicSystem (Docstrings)", "Autolev Parser", "Examples for Physics/Mechanics", "A bicycle", "A four bar linkage", "Nonminimal Coordinates Pendulum", "Multi Degree of Freedom Holonomic System", "A rolling disc", "A rolling disc, with Kane\u2019s method", "A rolling disc, with Kane\u2019s method and constraint forces", "A rolling disc using Lagrange\u2019s Method", "Classical Mechanics", "Joints Framework in Physics/Mechanics", "Kane\u2019s Method in Physics/Mechanics", "Lagrange\u2019s Method in Physics/Mechanics", "Linearization in Physics/Mechanics", "Masses, Inertias, Particles and Rigid Bodies in Physics/Mechanics", "References for Physics/Mechanics", "SymPy Mechanics for Autolev Users", "Symbolic Systems in Physics/Mechanics", "Gaussian Optics", "Optics Module", "Medium", "Polarization", "Utilities", "Waves", "Pauli Algebra", "Quantum Harmonic Oscillator in 1-D", "Anticommutator", "Cartesian Operators and States", "Clebsch-Gordan Coefficients", "Circuit Plot", "Commutator", "Constants", "Dagger", "Gates", "Grover\u2019s Algorithm", "Hilbert Space", "Quantum Mechanics", "Inner Product", "Operator", "Operator/State Helper Functions", "Particle in a Box", "Qapply", "QFT", "Qubit", "Represent", "Shor\u2019s Algorithm", "Spin", "State", "Tensor Product", "Second Quantization", "Quantum Harmonic Oscillator in 3-D", "Dimensions and dimension systems", "Examples", "Unit systems", "Philosophy behind unit systems", "Unit prefixes", "Physical quantities", "Units and unit systems", "Potential Issues/Advanced Topics/Future Features in Physics/Vector Module", "Essential Classes", "Docstrings for basic field functions", "Essential Functions (Docstrings)", "Physics Vector API", "Kinematics (Docstrings)", "Printing (Docstrings)", "Scalar and Vector Field Functionality", "The Physics Vector Module", "Vector: Kinematics", "Vector &amp; ReferenceFrame", "Wigner Symbols", "Plotting", "AGCA - Algebraic Geometry and Commutative Algebra Module", "Basic functionality of the module", "Introducing the domainmatrix of the poly module", "Introducing the Domains of the poly module", "Reference docs for the Poly Domains", "Polynomial Manipulation", "Internals of the Polynomial Manipulation Module", "Literature", "Number Fields", "Polynomials Manipulation Module Reference", "Series Manipulation using Polynomials", "Poly solvers", "Examples from Wester\u2019s Article", "Printing", "Term Rewriting", "Formal Power Series", "Fourier Series", "Series", "Limits of Sequences", "Sequences", "Series Expansions", "Sets", "Hongguang Fu\u2019s Trigonometric Simplification", "Hypergeometric Expansion", "Simplify", "Simplify", "Diophantine", "Solvers", "Inequality Solvers", "ODE", "PDE", "Solvers", "Solveset", "Stats", "N-dim array", "N-dim array expressions", "Tensor", "Methods", "Indexed Objects", "Tensor", "Tensor Operators", "Testing", "pytest", "Randomised Testing", "Run Tests", "Autowrap Module", "Codegen", "Decorator", "Enumerative", "Exceptions and Warnings", "Utilities", "Iterables", "Lambdify", "Memoization", "Miscellaneous", "PKGDATA", "Source Code Inspection", "Timing Utilities", "Essential Classes in sympy.vector (docstrings)", "Vector API", "Orienter classes (docstrings)", "Essential Functions in sympy.vector (docstrings)", "Basic Implementation details", "More about Coordinate Systems", "General examples of usage", "Scalar and Vector Field Functionality", "Vector", "Introduction", "Applications of Vector Integrals", "API Reference", "Basics", "Code Generation", "Logic", "Matrices", "Number Theory", "Physics", "Topics", "Utilities", "Tutorials", "Basic Operations", "Calculus", "SymPy Features", "Gotchas", "Introductory Tutorial", "Introduction", "Advanced Expression Manipulation", "Matrices", "What\u2019s Next", "Preliminaries", "Printing", "Simplification", "Solvers"], "terms": {"To": [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 16, 19, 20, 23, 24, 25, 27, 29, 30, 32, 33, 36, 37, 40, 41, 42, 43, 50, 51, 52, 56, 59, 60, 61, 62, 64, 65, 66, 67, 68, 73, 83, 85, 87, 89, 90, 91, 93, 96, 100, 102, 103, 104, 108, 110, 111, 113, 115, 118, 119, 137, 138, 141, 151, 155, 168, 177, 179, 183, 190, 193, 195, 197, 199, 200, 202, 204, 205, 206, 208, 209, 216, 217, 219, 222, 225, 226, 227, 228, 229, 230, 233, 234, 238, 240, 241, 244, 245, 247, 248, 254, 256, 258, 259, 261, 263, 264, 275, 276, 278, 279, 281, 282, 285, 286, 287], "public": [0, 6, 42, 60, 61, 82, 199, 200, 202, 203, 207, 222, 225, 229, 243, 254], "us": [0, 1, 2, 4, 5, 6, 8, 11, 12, 14, 15, 17, 18, 19, 20, 22, 32, 33, 35, 36, 37, 38, 39, 40, 41, 43, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 80, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 99, 100, 102, 103, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 141, 142, 143, 146, 147, 149, 151, 153, 154, 155, 158, 160, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 183, 184, 185, 186, 188, 189, 190, 192, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 215, 216, 217, 218, 219, 221, 222, 224, 225, 226, 227, 229, 230, 231, 233, 234, 235, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 254, 257, 258, 260, 261, 263, 264, 266, 271, 272, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], "meurer": 0, "A": [0, 3, 4, 6, 7, 10, 11, 12, 14, 15, 17, 18, 19, 20, 23, 25, 26, 27, 28, 29, 30, 31, 34, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 82, 83, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 99, 100, 102, 103, 104, 106, 108, 110, 114, 115, 116, 118, 119, 120, 121, 124, 125, 128, 129, 134, 135, 136, 139, 140, 141, 142, 143, 146, 148, 151, 153, 154, 155, 157, 158, 159, 160, 162, 163, 164, 166, 168, 169, 170, 171, 172, 173, 174, 176, 179, 180, 182, 183, 184, 186, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216, 217, 218, 219, 221, 222, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 240, 241, 242, 243, 244, 245, 247, 248, 254, 256, 258, 259, 260, 261, 263, 264, 271, 277, 279, 281, 282, 286], "smith": [0, 10, 97, 198], "cp": [0, 52, 101, 197], "paprocki": 0, "m": [0, 1, 10, 12, 16, 18, 20, 34, 38, 42, 43, 48, 49, 51, 52, 56, 59, 60, 61, 62, 63, 65, 68, 70, 72, 76, 77, 85, 87, 89, 91, 92, 93, 94, 96, 97, 99, 100, 102, 103, 104, 106, 110, 112, 113, 115, 118, 119, 120, 121, 123, 124, 128, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 145, 150, 157, 171, 172, 175, 177, 179, 190, 194, 196, 197, 198, 200, 202, 203, 204, 205, 206, 209, 210, 211, 212, 214, 215, 216, 217, 219, 221, 222, 225, 227, 228, 229, 230, 231, 234, 235, 241, 242, 244, 247, 249, 254, 257, 259, 263, 264, 276, 282, 285, 286, 287], "\u010dert\u00edk": 0, "o": [0, 1, 6, 11, 12, 16, 18, 33, 41, 42, 51, 52, 58, 60, 61, 66, 68, 70, 71, 73, 74, 76, 82, 85, 100, 104, 115, 119, 121, 123, 124, 136, 137, 138, 139, 141, 142, 164, 174, 185, 188, 190, 192, 194, 202, 203, 205, 206, 209, 211, 216, 219, 225, 229, 234, 240, 247, 250, 251, 257, 260, 276], "kirpichev": 0, "sb": 0, "rocklin": 0, "kumar": [0, 228], "ivanov": 0, "": [0, 3, 4, 5, 6, 7, 9, 10, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 54, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 69, 70, 72, 73, 74, 76, 77, 78, 79, 82, 83, 85, 87, 88, 89, 90, 91, 93, 94, 96, 99, 100, 101, 102, 103, 104, 108, 110, 112, 114, 115, 117, 118, 121, 124, 126, 130, 134, 135, 139, 141, 145, 146, 147, 153, 154, 156, 158, 160, 161, 164, 168, 169, 171, 172, 174, 177, 179, 183, 184, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 209, 210, 211, 212, 215, 216, 217, 219, 220, 221, 222, 224, 225, 226, 229, 235, 240, 241, 242, 243, 244, 245, 247, 248, 250, 254, 256, 260, 261, 263, 266, 271, 272, 274, 275, 276, 278, 279, 280, 281, 282, 286, 287], "moor": [0, 26, 93, 96], "jk": 0, "singh": 0, "rathnayak": 0, "t": [0, 1, 4, 6, 7, 10, 11, 12, 19, 20, 28, 34, 37, 38, 40, 42, 43, 44, 51, 52, 53, 54, 56, 60, 61, 62, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 84, 85, 87, 89, 90, 91, 92, 93, 96, 100, 101, 102, 106, 110, 111, 114, 115, 116, 118, 119, 120, 121, 123, 124, 127, 128, 129, 136, 137, 138, 139, 141, 142, 146, 148, 154, 158, 170, 172, 174, 176, 177, 179, 183, 184, 186, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 208, 209, 212, 216, 217, 218, 219, 221, 222, 225, 226, 227, 228, 229, 230, 231, 235, 238, 240, 243, 247, 248, 254, 257, 259, 263, 275, 276, 280, 281, 282, 285, 286, 287], "vig": 0, "granger": [0, 160], "BE": 0, "muller": 0, "rp": [0, 76, 146], "bonazzi": 0, "f": [0, 1, 6, 10, 11, 12, 16, 20, 24, 25, 27, 28, 40, 41, 42, 43, 50, 51, 52, 56, 59, 60, 61, 62, 64, 65, 66, 67, 68, 70, 78, 83, 84, 85, 87, 89, 91, 93, 96, 100, 101, 102, 104, 108, 118, 119, 123, 129, 134, 136, 137, 141, 143, 147, 148, 159, 160, 163, 172, 174, 177, 184, 189, 190, 193, 194, 195, 196, 197, 199, 200, 202, 203, 204, 205, 206, 208, 209, 211, 212, 215, 216, 217, 218, 219, 221, 222, 225, 226, 227, 228, 229, 230, 234, 235, 240, 241, 242, 243, 244, 247, 248, 250, 260, 261, 264, 275, 276, 281, 285, 286, 287], "gupta": [0, 228], "h": [0, 12, 16, 40, 41, 42, 43, 44, 51, 56, 59, 60, 61, 65, 68, 82, 85, 87, 91, 92, 96, 97, 102, 110, 118, 121, 139, 143, 146, 158, 160, 163, 168, 172, 179, 194, 195, 196, 197, 198, 202, 203, 204, 205, 208, 209, 217, 221, 225, 227, 228, 229, 230, 235, 242, 264, 276, 285], "vat": 0, "johansson": 0, "pedregosa": 0, "curri": [0, 160], "mj": 0, "terrel": 0, "ar": [0, 1, 3, 4, 5, 7, 8, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 96, 99, 100, 101, 102, 103, 104, 106, 107, 108, 110, 111, 114, 115, 116, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 146, 147, 148, 149, 151, 153, 155, 158, 160, 162, 163, 164, 166, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 188, 189, 190, 192, 194, 195, 196, 197, 198, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 221, 222, 224, 225, 226, 227, 229, 230, 231, 233, 234, 235, 236, 238, 240, 241, 242, 244, 245, 246, 247, 248, 250, 254, 256, 257, 258, 259, 260, 261, 263, 265, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], "rou\u010dka": 0, "\u0161": 0, "saboo": 0, "fernando": 0, "i": [0, 1, 2, 3, 5, 6, 7, 8, 10, 11, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 99, 100, 102, 103, 104, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 154, 155, 157, 158, 160, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 214, 215, 216, 217, 218, 219, 221, 222, 224, 225, 226, 227, 229, 230, 231, 233, 234, 235, 236, 238, 240, 241, 242, 243, 244, 245, 247, 248, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 275, 276, 278, 279, 281, 282, 284, 285, 286, 287], "kulal": 0, "cimrman": 0, "r": [0, 1, 6, 7, 10, 12, 16, 18, 20, 28, 34, 41, 42, 43, 44, 51, 52, 60, 61, 62, 64, 65, 66, 73, 74, 76, 78, 82, 83, 85, 87, 96, 100, 102, 104, 106, 110, 112, 115, 118, 119, 120, 121, 123, 124, 126, 128, 131, 132, 133, 138, 139, 140, 141, 142, 143, 146, 170, 171, 174, 175, 177, 184, 185, 188, 190, 192, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 209, 210, 211, 216, 217, 219, 221, 222, 225, 227, 228, 229, 235, 240, 242, 244, 254, 257, 259, 260, 261, 264, 286], "scopatz": 0, "2017": [0, 194], "symbol": [0, 3, 6, 7, 10, 11, 14, 16, 21, 22, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 50, 52, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 82, 83, 84, 85, 87, 88, 90, 91, 93, 96, 100, 101, 102, 103, 104, 106, 107, 108, 110, 112, 114, 115, 116, 118, 119, 120, 121, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 139, 141, 143, 146, 147, 148, 149, 151, 153, 154, 156, 158, 160, 162, 163, 166, 169, 171, 172, 173, 174, 175, 176, 177, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 192, 193, 195, 196, 197, 198, 200, 201, 202, 203, 204, 206, 207, 209, 210, 211, 212, 214, 215, 216, 217, 219, 221, 222, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 236, 241, 247, 248, 254, 256, 257, 259, 260, 261, 264, 271, 275, 276, 279, 281, 282, 285, 286, 287], "comput": [0, 3, 4, 6, 7, 10, 11, 12, 16, 18, 19, 20, 22, 25, 26, 27, 28, 32, 34, 40, 42, 43, 44, 49, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 75, 79, 82, 83, 84, 86, 87, 89, 91, 93, 96, 97, 99, 100, 102, 103, 104, 108, 110, 114, 118, 119, 120, 123, 124, 126, 127, 131, 134, 141, 158, 159, 160, 168, 173, 174, 176, 178, 179, 183, 184, 185, 190, 192, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 211, 212, 214, 216, 217, 218, 219, 221, 222, 225, 227, 228, 229, 231, 241, 244, 247, 248, 254, 256, 257, 258, 259, 260, 261, 263, 266, 275, 276, 278, 279, 282, 286], "python": [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 15, 18, 19, 20, 22, 25, 26, 28, 30, 31, 32, 35, 36, 37, 40, 52, 60, 61, 64, 66, 72, 88, 90, 91, 93, 96, 100, 101, 102, 103, 114, 124, 141, 184, 195, 196, 197, 199, 200, 206, 208, 209, 217, 221, 225, 228, 230, 240, 241, 242, 243, 244, 247, 248, 250, 254, 278, 279, 280, 281, 282, 284, 285, 286], "peerj": 0, "scienc": [0, 52, 85, 96, 140, 141, 196, 203, 218, 219, 276], "3": [0, 4, 5, 7, 12, 14, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 30, 32, 34, 35, 37, 38, 39, 40, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 82, 83, 84, 85, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 106, 108, 110, 111, 112, 113, 115, 116, 118, 121, 123, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 138, 141, 142, 143, 145, 147, 151, 153, 154, 155, 159, 163, 168, 169, 171, 173, 174, 177, 180, 181, 183, 184, 185, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 234, 235, 236, 240, 241, 243, 244, 245, 247, 248, 250, 252, 254, 256, 257, 258, 259, 261, 263, 264, 271, 275, 276, 278, 280, 281, 282, 285, 286, 287], "e103": 0, "http": [0, 1, 3, 4, 5, 6, 7, 10, 18, 20, 32, 34, 36, 37, 38, 40, 41, 42, 44, 48, 49, 51, 52, 53, 54, 59, 60, 61, 62, 63, 64, 65, 66, 68, 70, 72, 76, 77, 78, 82, 85, 87, 88, 89, 90, 91, 93, 96, 100, 103, 108, 110, 112, 113, 143, 145, 146, 147, 149, 150, 151, 155, 156, 157, 160, 162, 163, 172, 174, 184, 186, 189, 191, 194, 203, 205, 208, 209, 212, 214, 216, 217, 218, 221, 222, 225, 228, 229, 241, 242, 243, 245, 247, 248, 250, 254, 256, 260, 262, 264, 282, 285], "doi": [0, 6, 40, 52, 96, 203, 218, 221, 229], "org": [0, 3, 6, 7, 12, 18, 20, 34, 36, 37, 38, 40, 41, 42, 48, 49, 51, 52, 59, 60, 61, 62, 63, 65, 66, 68, 70, 72, 76, 77, 78, 87, 88, 89, 90, 91, 93, 96, 100, 108, 110, 112, 113, 143, 145, 146, 147, 149, 150, 151, 155, 156, 157, 160, 162, 163, 172, 174, 184, 186, 189, 191, 203, 205, 209, 212, 216, 217, 218, 221, 222, 225, 228, 229, 241, 242, 243, 245, 247, 254, 256, 260, 262, 264, 282, 285], "10": [0, 3, 6, 12, 20, 27, 28, 30, 32, 34, 40, 42, 49, 51, 52, 56, 58, 59, 60, 61, 63, 64, 65, 66, 68, 73, 74, 76, 77, 85, 87, 88, 90, 91, 93, 96, 97, 100, 101, 102, 103, 106, 108, 110, 111, 116, 121, 124, 126, 141, 143, 147, 158, 168, 169, 180, 184, 185, 186, 188, 194, 195, 197, 198, 199, 200, 202, 203, 204, 205, 206, 208, 209, 212, 215, 216, 217, 218, 221, 222, 225, 228, 229, 230, 239, 240, 245, 247, 248, 250, 254, 257, 275, 282, 286], "7717": 0, "c": [0, 1, 3, 11, 12, 16, 18, 20, 22, 24, 26, 28, 33, 34, 40, 41, 44, 45, 49, 51, 52, 53, 55, 56, 57, 59, 60, 61, 63, 65, 66, 68, 69, 70, 72, 73, 74, 76, 77, 83, 85, 87, 89, 90, 91, 93, 96, 100, 101, 102, 103, 104, 106, 110, 112, 114, 116, 118, 119, 124, 129, 131, 132, 133, 135, 137, 138, 139, 141, 143, 147, 153, 154, 155, 158, 160, 163, 168, 171, 173, 174, 179, 184, 188, 192, 193, 194, 195, 197, 198, 199, 200, 202, 203, 204, 205, 206, 208, 216, 217, 218, 219, 221, 222, 225, 226, 227, 228, 229, 230, 234, 235, 241, 242, 244, 247, 250, 251, 254, 256, 257, 258, 259, 260, 261, 264, 276, 278, 285, 286, 287], "103": [0, 51], "bibtex": 0, "entri": [0, 10, 26, 38, 43, 50, 52, 58, 61, 72, 85, 89, 91, 92, 93, 99, 119, 124, 126, 139, 146, 198, 202, 204, 205, 219, 229, 248], "latex": [0, 1, 3, 6, 11, 20, 30, 32, 68, 88, 183, 184, 189, 193, 195, 200, 209, 280, 281], "user": [0, 1, 3, 4, 5, 6, 7, 10, 11, 15, 17, 18, 20, 41, 42, 43, 51, 52, 59, 60, 61, 62, 68, 72, 85, 89, 93, 96, 102, 103, 104, 108, 110, 114, 124, 134, 137, 139, 142, 162, 163, 172, 178, 179, 183, 184, 188, 192, 196, 199, 202, 204, 206, 207, 208, 209, 210, 218, 221, 227, 228, 229, 238, 241, 242, 244, 245, 248, 254, 258, 259, 264, 271, 275, 278, 279, 281, 282, 283], "articl": [0, 60, 61, 93, 96, 201, 203, 204, 209, 218, 254, 272, 280], "titl": [0, 6, 7, 195], "author": [0, 6, 100, 160, 204], "aaron": 0, "christoph": [0, 254], "p": [0, 1, 10, 11, 12, 16, 18, 19, 20, 22, 24, 28, 34, 36, 37, 38, 42, 43, 48, 49, 50, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 70, 73, 74, 75, 76, 77, 82, 83, 85, 87, 91, 93, 96, 100, 102, 103, 104, 106, 110, 111, 115, 118, 119, 120, 121, 123, 124, 128, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 147, 153, 172, 174, 179, 185, 188, 190, 192, 194, 195, 197, 198, 199, 202, 203, 205, 206, 209, 211, 212, 216, 217, 219, 221, 222, 225, 227, 228, 229, 230, 234, 235, 247, 254, 257, 258, 259, 260, 261, 263, 282, 286], "mateusz": 0, "v": [0, 1, 5, 14, 25, 28, 30, 34, 42, 50, 56, 59, 60, 61, 62, 63, 64, 68, 74, 85, 89, 91, 96, 100, 104, 115, 116, 118, 121, 126, 138, 139, 141, 142, 146, 147, 159, 174, 179, 184, 186, 188, 190, 192, 193, 195, 202, 203, 204, 205, 209, 219, 221, 222, 225, 227, 229, 240, 247, 254, 257, 258, 259, 260, 261, 263], "ert": 0, "k": [0, 7, 12, 14, 18, 20, 24, 34, 40, 41, 42, 43, 44, 46, 50, 51, 54, 55, 58, 59, 60, 61, 63, 64, 65, 66, 68, 73, 78, 85, 87, 90, 91, 93, 96, 100, 118, 119, 129, 136, 138, 139, 141, 148, 162, 163, 166, 170, 172, 174, 183, 190, 194, 196, 198, 199, 202, 203, 204, 205, 206, 209, 211, 212, 214, 215, 216, 217, 218, 219, 221, 222, 225, 227, 229, 230, 231, 233, 234, 235, 236, 240, 244, 247, 254, 256, 257, 258, 259, 260, 261, 263, 264, 285, 286], "ond": 0, "ej": 0, "sergei": 0, "b": [0, 5, 10, 11, 12, 14, 18, 19, 20, 22, 24, 26, 28, 34, 41, 42, 43, 44, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 70, 71, 72, 73, 74, 75, 76, 83, 85, 87, 89, 90, 91, 92, 93, 96, 100, 102, 103, 104, 106, 108, 110, 115, 116, 118, 119, 120, 121, 124, 128, 129, 138, 139, 141, 143, 146, 151, 153, 155, 157, 162, 163, 166, 171, 172, 173, 174, 184, 186, 188, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 209, 211, 212, 214, 215, 216, 217, 218, 219, 221, 222, 225, 226, 227, 228, 229, 230, 231, 234, 235, 236, 240, 243, 244, 247, 250, 254, 256, 257, 258, 259, 260, 276, 278, 282, 286, 287], "matthew": 0, "amit": [0, 228], "sergiu": 0, "jason": [0, 209], "sartaj": 0, "thilina": 0, "sean": 0, "brian": [0, 160], "e": [0, 1, 3, 4, 5, 6, 7, 10, 11, 12, 18, 19, 20, 22, 26, 27, 30, 33, 34, 38, 40, 41, 42, 43, 49, 50, 51, 52, 53, 56, 58, 59, 60, 61, 62, 64, 65, 66, 68, 70, 72, 73, 74, 75, 76, 77, 82, 83, 85, 87, 89, 90, 91, 96, 100, 102, 103, 104, 106, 110, 111, 115, 118, 119, 121, 123, 124, 137, 138, 141, 142, 143, 146, 153, 154, 158, 163, 164, 166, 169, 171, 173, 174, 179, 180, 184, 189, 190, 193, 194, 195, 196, 197, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 215, 216, 217, 218, 219, 221, 222, 225, 226, 227, 228, 229, 230, 233, 234, 235, 236, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 254, 258, 261, 263, 264, 275, 276, 280, 281, 286], "richard": [0, 100], "francesco": 0, "harsh": [0, 228], "shivam": 0, "fredrik": 0, "fabian": 0, "j": [0, 7, 10, 12, 34, 38, 40, 42, 43, 46, 50, 51, 52, 56, 58, 59, 61, 62, 64, 65, 68, 82, 85, 87, 89, 91, 93, 96, 100, 108, 111, 118, 139, 140, 141, 146, 153, 154, 171, 174, 179, 183, 190, 194, 196, 198, 200, 202, 203, 204, 205, 206, 208, 209, 211, 217, 219, 221, 222, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 241, 247, 254, 256, 257, 258, 259, 260, 261, 263, 264], "andi": [0, 140], "rou": 0, "ka": 0, "n": [0, 5, 6, 7, 11, 12, 16, 18, 20, 24, 25, 28, 33, 38, 40, 42, 43, 44, 46, 48, 49, 50, 51, 52, 54, 56, 58, 59, 60, 61, 62, 64, 65, 66, 68, 70, 73, 74, 75, 76, 77, 82, 83, 85, 87, 89, 90, 91, 93, 96, 97, 100, 102, 103, 104, 106, 110, 112, 113, 115, 118, 119, 121, 123, 124, 126, 127, 128, 129, 131, 132, 133, 136, 137, 138, 139, 141, 142, 143, 145, 147, 148, 150, 154, 159, 160, 163, 168, 170, 171, 172, 174, 175, 177, 179, 181, 183, 184, 186, 188, 189, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 208, 209, 211, 212, 214, 215, 216, 217, 218, 219, 221, 222, 225, 227, 228, 229, 232, 234, 235, 238, 241, 247, 249, 250, 254, 256, 257, 258, 259, 263, 269, 276, 282, 285, 286, 287], "ashutosh": 0, "isuru": 0, "sumith": 0, "robert": [0, 229], "anthoni": 0, "year": [0, 4, 6, 10], "month": 0, "jan": [0, 61], "keyword": [0, 4, 6, 11, 14, 20, 41, 42, 43, 51, 52, 60, 61, 64, 65, 73, 75, 76, 77, 91, 96, 100, 103, 108, 110, 119, 136, 137, 168, 174, 189, 195, 197, 199, 200, 202, 204, 205, 208, 209, 210, 216, 221, 222, 227, 234, 240, 241, 243, 245, 248, 250, 259, 282], "algebra": [0, 7, 11, 12, 14, 18, 22, 27, 30, 38, 43, 51, 60, 61, 64, 66, 78, 81, 82, 83, 85, 87, 90, 91, 95, 97, 100, 101, 102, 123, 134, 141, 142, 194, 197, 198, 200, 201, 202, 203, 205, 206, 209, 211, 219, 222, 224, 225, 228, 265, 266, 269, 271, 272, 277, 278, 280, 282], "system": [0, 1, 2, 3, 5, 7, 10, 11, 12, 14, 15, 16, 19, 20, 22, 26, 28, 35, 37, 51, 60, 61, 62, 66, 85, 88, 89, 90, 91, 96, 101, 102, 103, 106, 107, 109, 110, 114, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 131, 133, 134, 135, 136, 137, 138, 139, 141, 152, 153, 168, 171, 172, 174, 177, 181, 184, 188, 189, 190, 192, 193, 194, 196, 197, 199, 200, 201, 202, 203, 204, 207, 208, 209, 217, 218, 224, 228, 229, 240, 241, 254, 256, 257, 260, 262, 264, 269, 271, 278, 280, 282, 286, 287], "abstract": [0, 10, 40, 41, 49, 60, 62, 66, 68, 73, 78, 93, 118, 124, 158, 160, 169, 172, 173, 174, 196, 204, 228, 229, 231, 235, 242, 263], "an": [0, 1, 3, 4, 6, 7, 9, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 24, 26, 28, 29, 30, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 49, 50, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 70, 71, 73, 74, 75, 76, 77, 78, 79, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 108, 110, 111, 112, 114, 115, 118, 119, 121, 123, 126, 128, 134, 136, 138, 139, 141, 142, 145, 146, 147, 151, 153, 154, 155, 157, 158, 159, 160, 162, 163, 164, 167, 168, 169, 171, 172, 174, 175, 176, 183, 184, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 221, 222, 224, 225, 226, 227, 229, 230, 233, 234, 235, 236, 238, 240, 241, 242, 243, 244, 245, 247, 248, 250, 251, 254, 256, 258, 259, 261, 262, 263, 264, 275, 276, 277, 278, 279, 280, 282, 285, 286, 287], "open": [0, 1, 3, 4, 6, 7, 9, 10, 23, 24, 25, 26, 27, 28, 29, 32, 40, 60, 62, 66, 87, 90, 110, 124, 127, 141, 209, 217, 224, 228, 229, 251, 280, 282], "sourc": [0, 1, 5, 6, 7, 11, 20, 26, 27, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 81, 82, 83, 85, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 106, 108, 110, 111, 112, 113, 115, 116, 118, 119, 120, 121, 123, 124, 141, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 180, 181, 182, 184, 185, 186, 188, 189, 190, 194, 195, 196, 198, 199, 200, 202, 204, 205, 206, 207, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 221, 222, 224, 225, 226, 227, 228, 229, 230, 233, 234, 235, 236, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 261, 273, 280], "written": [0, 3, 6, 7, 11, 18, 20, 38, 42, 48, 51, 52, 56, 60, 65, 68, 72, 78, 83, 85, 89, 90, 99, 100, 128, 134, 141, 174, 190, 191, 192, 193, 196, 197, 205, 209, 212, 216, 219, 222, 225, 242, 261, 263, 279, 280, 281, 286], "pure": [0, 3, 11, 25, 27, 34, 61, 66, 87, 90, 93, 110, 138, 179, 199, 200, 202, 205, 209, 229, 247], "It": [0, 1, 3, 4, 5, 6, 7, 10, 11, 12, 16, 18, 19, 20, 24, 25, 27, 28, 29, 32, 34, 35, 36, 37, 40, 41, 42, 48, 51, 52, 54, 55, 56, 59, 60, 61, 62, 64, 65, 66, 67, 68, 70, 72, 73, 76, 77, 83, 85, 87, 89, 90, 96, 100, 101, 102, 103, 104, 106, 108, 110, 112, 114, 115, 116, 118, 119, 124, 126, 132, 134, 135, 136, 137, 139, 141, 143, 147, 148, 158, 163, 164, 169, 170, 171, 172, 173, 174, 176, 179, 182, 184, 188, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 204, 205, 206, 209, 212, 216, 217, 218, 219, 221, 222, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 240, 241, 242, 243, 244, 245, 248, 254, 257, 258, 259, 261, 263, 264, 275, 276, 278, 279, 280, 281, 282, 284, 285, 286], "built": [0, 1, 3, 6, 7, 11, 12, 15, 35, 37, 43, 60, 66, 87, 96, 124, 141, 197, 200, 209, 210, 214, 225, 228, 229, 235, 244, 247, 248, 280, 281, 285], "focu": [0, 10, 18, 70, 227, 280], "extens": [0, 3, 6, 7, 18, 20, 51, 60, 65, 66, 72, 76, 87, 96, 121, 141, 197, 199, 200, 202, 203, 204, 205, 209, 219, 221, 225, 227, 228, 241, 242, 251, 279, 286], "eas": [0, 124, 193, 195, 209, 212], "through": [0, 1, 4, 6, 11, 12, 18, 20, 25, 26, 28, 30, 32, 40, 42, 51, 52, 54, 59, 60, 61, 64, 65, 68, 70, 71, 72, 73, 74, 76, 85, 89, 90, 96, 100, 103, 104, 108, 115, 119, 124, 126, 134, 139, 145, 146, 184, 195, 196, 202, 204, 209, 215, 219, 221, 225, 227, 228, 229, 230, 241, 247, 254, 256, 261, 264, 277, 278, 279, 284], "both": [0, 3, 4, 6, 7, 10, 11, 12, 15, 18, 19, 20, 23, 24, 25, 28, 33, 34, 40, 41, 42, 52, 55, 56, 58, 59, 60, 61, 65, 66, 68, 75, 84, 85, 87, 90, 91, 96, 100, 102, 103, 104, 110, 115, 118, 119, 126, 128, 129, 135, 138, 146, 147, 158, 164, 171, 174, 179, 184, 188, 192, 193, 195, 196, 197, 199, 200, 202, 204, 205, 207, 208, 209, 211, 216, 217, 218, 219, 221, 222, 225, 227, 228, 230, 234, 240, 242, 247, 248, 254, 256, 276, 279, 280, 281, 286, 287], "interact": [0, 11, 14, 25, 33, 60, 74, 87, 94, 96, 141, 171, 189, 193, 199, 200, 221, 229, 245, 252, 265, 273, 278, 280, 281, 285, 286], "programmat": [0, 11, 14, 15, 29, 30, 228, 259], "applic": [0, 7, 10, 25, 43, 44, 50, 51, 52, 53, 60, 61, 66, 87, 91, 96, 100, 103, 106, 118, 119, 123, 124, 134, 138, 140, 141, 158, 159, 184, 188, 192, 197, 202, 203, 204, 205, 209, 211, 216, 222, 225, 228, 242, 247, 254, 261, 262, 269, 280], "These": [0, 3, 6, 7, 10, 11, 12, 13, 14, 16, 18, 19, 20, 30, 31, 33, 41, 42, 51, 59, 60, 61, 62, 68, 85, 87, 90, 96, 102, 104, 110, 118, 119, 120, 126, 128, 132, 138, 141, 164, 169, 170, 184, 185, 190, 192, 193, 196, 197, 198, 199, 200, 202, 205, 209, 219, 222, 225, 226, 228, 229, 231, 236, 240, 241, 242, 247, 261, 276, 279, 282, 285, 286], "characterist": [0, 62, 78, 96, 192, 198, 200, 202, 203, 225, 227, 282], "have": [0, 1, 4, 5, 6, 7, 11, 12, 15, 16, 18, 19, 20, 23, 24, 26, 27, 28, 30, 32, 34, 36, 37, 38, 40, 41, 42, 43, 44, 50, 51, 52, 53, 56, 58, 59, 60, 61, 62, 64, 65, 66, 68, 70, 71, 75, 76, 78, 83, 84, 85, 87, 89, 90, 91, 92, 93, 96, 99, 100, 101, 102, 103, 104, 108, 110, 111, 113, 114, 118, 119, 121, 124, 125, 126, 132, 134, 138, 141, 158, 160, 163, 167, 169, 171, 172, 173, 174, 176, 177, 178, 179, 182, 183, 184, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 209, 211, 212, 214, 216, 217, 218, 219, 221, 222, 225, 227, 228, 229, 230, 233, 235, 236, 238, 239, 240, 242, 243, 244, 247, 248, 250, 254, 256, 258, 259, 260, 261, 264, 275, 276, 278, 279, 280, 281, 282, 285, 286, 287], "led": 0, "becom": [0, 4, 6, 7, 10, 11, 12, 16, 18, 51, 56, 59, 60, 61, 64, 83, 88, 96, 102, 189, 192, 196, 197, 199, 206, 209, 212, 218, 225, 228, 229, 235, 250, 257, 259, 286], "popular": [0, 3, 61, 101, 141, 280], "librari": [0, 3, 4, 6, 10, 11, 18, 20, 27, 31, 32, 42, 60, 61, 65, 85, 87, 88, 96, 101, 114, 124, 141, 195, 199, 200, 229, 240, 241, 242, 247, 248, 275, 278, 279, 280], "scientif": [0, 11, 32, 60, 141], "ecosystem": 0, "thi": [0, 1, 3, 4, 5, 6, 7, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 100, 101, 102, 103, 104, 106, 107, 108, 110, 111, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 145, 146, 147, 148, 149, 151, 153, 154, 155, 157, 158, 160, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 183, 184, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 233, 234, 235, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 252, 254, 256, 257, 258, 259, 260, 261, 262, 263, 265, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287], "paper": [0, 6, 100, 126, 193, 204, 205, 218, 219, 222, 225, 229], "present": [0, 3, 7, 10, 11, 12, 16, 40, 41, 44, 47, 51, 52, 54, 58, 60, 63, 87, 96, 100, 103, 106, 108, 110, 119, 126, 174, 176, 184, 186, 189, 190, 195, 196, 202, 203, 204, 208, 209, 222, 228, 242, 248, 251, 257, 258, 259, 263, 266, 287], "architectur": [0, 141, 199, 240], "descript": [0, 4, 6, 7, 10, 22, 31, 41, 43, 50, 68, 87, 100, 146, 164, 171, 182, 192, 193, 194, 209, 233, 240, 242, 244, 245, 265, 283], "its": [0, 3, 4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 30, 34, 36, 37, 38, 41, 42, 43, 44, 48, 50, 51, 52, 59, 60, 61, 62, 65, 66, 68, 70, 72, 76, 78, 85, 87, 88, 90, 91, 93, 96, 100, 102, 103, 104, 106, 110, 114, 115, 118, 119, 121, 124, 126, 127, 128, 134, 135, 138, 139, 141, 142, 147, 153, 159, 160, 162, 163, 168, 169, 172, 174, 179, 181, 184, 185, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 215, 216, 217, 221, 224, 225, 227, 228, 229, 233, 234, 235, 240, 243, 244, 247, 248, 251, 254, 257, 258, 259, 261, 264, 280, 281, 282, 285, 286], "featur": [0, 3, 4, 7, 10, 12, 13, 20, 31, 32, 60, 62, 64, 91, 102, 124, 134, 141, 191, 209, 225, 229, 238, 242, 245, 262, 271, 274, 279, 280, 284, 286], "discuss": [0, 4, 6, 7, 10, 12, 13, 14, 16, 18, 19, 20, 31, 43, 51, 61, 68, 100, 114, 119, 124, 134, 138, 139, 183, 191, 192, 193, 199, 235, 244, 265, 275, 277, 278, 280, 281, 283, 285, 286], "select": [0, 1, 13, 14, 26, 31, 42, 44, 51, 52, 59, 60, 61, 69, 74, 88, 90, 91, 100, 102, 116, 139, 179, 189, 199, 200, 202, 203, 205, 209, 218, 221, 227], "submodul": [0, 3, 4, 6, 11, 42, 114, 196, 200, 202, 204], "The": [0, 1, 3, 5, 6, 7, 8, 11, 12, 14, 16, 17, 19, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 46, 48, 49, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 99, 100, 101, 102, 103, 104, 106, 107, 108, 110, 111, 112, 114, 115, 116, 118, 119, 120, 121, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 142, 143, 145, 146, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 183, 184, 185, 186, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 238, 240, 241, 242, 243, 244, 245, 247, 248, 250, 251, 252, 254, 256, 257, 258, 259, 262, 263, 264, 271, 275, 276, 278, 279, 281, 282, 283, 284, 285, 286, 287], "supplementari": 0, "materi": [0, 103, 145, 284], "provid": [0, 1, 3, 4, 6, 7, 10, 13, 14, 16, 17, 18, 19, 20, 22, 23, 27, 31, 34, 40, 41, 42, 43, 49, 50, 51, 52, 58, 59, 60, 62, 64, 68, 69, 71, 76, 79, 82, 83, 87, 88, 90, 91, 93, 96, 97, 99, 100, 101, 102, 104, 106, 108, 114, 115, 118, 119, 121, 123, 126, 127, 128, 129, 134, 135, 136, 137, 138, 139, 141, 142, 147, 148, 168, 176, 177, 178, 182, 183, 184, 185, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 204, 205, 206, 207, 208, 209, 212, 214, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 234, 235, 240, 241, 242, 244, 245, 247, 248, 250, 254, 257, 258, 259, 261, 262, 264, 276, 280, 281, 282, 286], "addit": [0, 3, 4, 7, 10, 11, 12, 14, 16, 32, 42, 50, 51, 52, 59, 60, 66, 68, 72, 78, 80, 84, 85, 87, 88, 90, 93, 96, 102, 107, 108, 110, 114, 115, 119, 138, 139, 142, 160, 172, 173, 176, 189, 192, 193, 194, 195, 196, 197, 198, 199, 202, 204, 205, 209, 215, 218, 219, 221, 222, 225, 226, 227, 228, 229, 240, 241, 242, 244, 245, 247, 248, 250, 258, 278, 280, 281, 282, 285, 286], "exampl": [0, 2, 3, 4, 5, 7, 10, 11, 12, 14, 15, 16, 18, 19, 22, 25, 26, 30, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 82, 83, 85, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 101, 102, 103, 106, 108, 110, 112, 113, 115, 116, 118, 119, 121, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 139, 141, 143, 145, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 166, 168, 169, 171, 172, 173, 174, 175, 176, 178, 180, 181, 184, 185, 186, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 210, 211, 212, 214, 215, 217, 218, 221, 222, 224, 225, 226, 227, 228, 233, 235, 236, 238, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 254, 256, 257, 259, 261, 262, 263, 264, 269, 271, 272, 275, 276, 277, 278, 279, 281, 282, 284, 285, 287], "further": [0, 3, 5, 18, 20, 28, 37, 41, 61, 66, 68, 72, 85, 87, 92, 93, 96, 102, 103, 107, 108, 115, 118, 119, 139, 146, 192, 194, 195, 196, 202, 204, 205, 218, 219, 221, 225, 229, 235, 279, 280], "outlin": [0, 3, 4, 18, 20, 58, 87, 196, 225], "detail": [0, 3, 4, 5, 6, 7, 8, 10, 11, 13, 15, 18, 20, 31, 41, 51, 60, 62, 65, 67, 68, 85, 86, 87, 88, 91, 96, 100, 108, 118, 119, 124, 139, 141, 146, 164, 168, 184, 186, 194, 195, 196, 202, 204, 211, 216, 221, 222, 223, 225, 226, 229, 234, 235, 240, 243, 245, 248, 259, 260, 261, 262, 265, 269, 276, 278, 282, 283, 285], "volum": [0, 6, 42, 59, 68, 85, 194, 203, 219, 222, 225, 244, 254], "page": [0, 1, 3, 4, 6, 7, 10, 11, 12, 18, 19, 22, 23, 24, 25, 26, 27, 28, 29, 31, 42, 43, 59, 65, 85, 100, 101, 118, 119, 141, 179, 195, 198, 199, 200, 203, 209, 219, 222, 245, 263, 286], "journal": [0, 6, 59, 65, 100, 111, 203, 221, 244], "issn": 0, "2376": 0, "5992": 0, "url": [0, 61, 245], "bsd": [0, 1, 3, 280], "licens": [0, 1, 3, 280], "so": [0, 3, 4, 6, 7, 10, 11, 12, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 48, 49, 51, 52, 54, 56, 58, 60, 61, 64, 66, 68, 70, 72, 73, 74, 76, 82, 83, 84, 85, 87, 88, 89, 90, 91, 93, 96, 97, 100, 102, 103, 104, 110, 114, 118, 119, 124, 126, 128, 134, 135, 136, 138, 141, 142, 147, 158, 160, 168, 170, 171, 172, 174, 176, 178, 179, 183, 184, 193, 194, 195, 196, 197, 198, 199, 200, 202, 204, 205, 206, 207, 208, 209, 210, 211, 216, 217, 218, 219, 221, 222, 224, 225, 226, 227, 228, 229, 233, 234, 238, 240, 241, 244, 245, 247, 248, 250, 260, 264, 275, 276, 278, 280, 281, 282, 285, 286, 287], "you": [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 15, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 36, 37, 38, 40, 42, 43, 51, 52, 59, 60, 61, 62, 64, 66, 67, 68, 72, 74, 76, 78, 79, 84, 85, 87, 88, 90, 91, 93, 94, 96, 97, 100, 101, 102, 110, 112, 113, 114, 118, 119, 120, 121, 124, 125, 135, 136, 138, 139, 141, 163, 168, 169, 172, 174, 183, 184, 186, 190, 192, 193, 195, 196, 197, 198, 199, 200, 202, 204, 205, 206, 209, 210, 212, 216, 217, 221, 222, 225, 226, 227, 228, 229, 233, 234, 235, 238, 240, 241, 242, 243, 245, 247, 248, 251, 258, 259, 260, 261, 274, 275, 276, 278, 280, 281, 282, 283, 284, 285, 286, 287], "free": [0, 10, 11, 26, 27, 28, 32, 40, 41, 42, 50, 51, 56, 60, 72, 87, 91, 93, 96, 100, 103, 104, 108, 111, 118, 134, 143, 163, 181, 184, 191, 195, 196, 200, 202, 204, 205, 209, 211, 217, 219, 221, 222, 225, 227, 228, 235, 247, 280], "howev": [0, 1, 3, 4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 24, 25, 28, 35, 37, 42, 51, 52, 56, 59, 60, 61, 62, 65, 66, 68, 70, 85, 87, 90, 91, 96, 100, 101, 102, 103, 106, 118, 124, 138, 142, 174, 193, 194, 195, 196, 197, 199, 200, 202, 204, 205, 206, 208, 209, 210, 216, 217, 218, 219, 221, 225, 226, 227, 228, 240, 241, 248, 258, 259, 263, 275, 278, 280, 282, 286, 287], "like": [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 15, 18, 19, 20, 26, 29, 30, 31, 32, 42, 43, 45, 51, 52, 59, 60, 61, 64, 65, 66, 68, 70, 80, 83, 87, 88, 90, 91, 93, 94, 95, 96, 100, 101, 102, 106, 110, 114, 118, 121, 124, 126, 135, 138, 139, 141, 142, 156, 158, 168, 169, 172, 173, 174, 179, 183, 184, 188, 190, 192, 195, 196, 197, 199, 200, 201, 202, 204, 205, 207, 208, 209, 212, 216, 217, 218, 219, 221, 222, 225, 226, 227, 228, 229, 230, 233, 235, 236, 238, 240, 241, 242, 243, 247, 248, 250, 251, 258, 259, 261, 263, 275, 276, 278, 279, 280, 281, 282, 286], "academ": [0, 41, 44, 203], "commerci": [0, 280], "creat": [0, 1, 3, 4, 5, 6, 7, 9, 11, 18, 19, 23, 24, 25, 26, 29, 30, 36, 41, 42, 43, 49, 51, 52, 60, 61, 62, 64, 66, 67, 68, 70, 72, 73, 75, 76, 81, 83, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 100, 101, 102, 103, 106, 110, 115, 118, 119, 121, 124, 127, 128, 129, 131, 133, 135, 137, 138, 139, 141, 142, 151, 153, 155, 159, 162, 163, 164, 168, 169, 171, 172, 174, 177, 180, 183, 184, 186, 188, 192, 193, 195, 196, 198, 199, 200, 202, 204, 205, 206, 209, 216, 221, 225, 228, 229, 230, 234, 235, 240, 241, 242, 244, 245, 247, 248, 254, 259, 261, 276, 278, 281, 282, 285, 286, 287], "fork": [0, 5, 7, 10, 126], "deriv": [0, 6, 10, 11, 17, 20, 25, 40, 41, 42, 44, 50, 51, 60, 62, 66, 67, 68, 70, 77, 82, 83, 85, 87, 88, 90, 93, 96, 106, 110, 114, 116, 118, 119, 123, 126, 128, 129, 131, 134, 136, 137, 138, 139, 163, 172, 176, 179, 180, 183, 184, 186, 188, 189, 190, 192, 195, 196, 197, 200, 202, 204, 205, 206, 209, 211, 219, 221, 225, 226, 227, 231, 236, 242, 254, 257, 258, 277, 280, 287], "long": [0, 6, 7, 8, 28, 30, 42, 52, 59, 60, 61, 63, 73, 85, 87, 88, 90, 96, 100, 103, 104, 126, 189, 205, 206, 209, 218, 219, 227, 229, 241, 250, 257, 278, 281], "copi": [0, 1, 5, 10, 12, 18, 43, 52, 53, 60, 76, 96, 100, 101, 198, 200, 202, 204, 208, 209, 216, 227, 240, 247, 250, 285], "statement": [0, 6, 18, 19, 20, 32, 41, 42, 60, 68, 85, 90, 93, 124, 153, 209, 229, 238, 242, 247], "redistribut": [0, 205], "see": [0, 1, 3, 4, 7, 8, 10, 11, 12, 15, 16, 18, 19, 20, 21, 31, 35, 36, 37, 38, 40, 41, 42, 46, 48, 51, 52, 53, 56, 59, 61, 62, 65, 66, 67, 68, 72, 76, 77, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 93, 96, 97, 100, 101, 102, 108, 114, 118, 119, 130, 132, 136, 138, 139, 143, 146, 149, 150, 159, 163, 164, 168, 169, 170, 171, 173, 174, 177, 179, 184, 189, 192, 194, 195, 196, 197, 198, 199, 200, 202, 204, 205, 206, 208, 209, 211, 212, 215, 216, 217, 218, 219, 221, 222, 225, 226, 227, 228, 229, 234, 235, 238, 240, 241, 242, 243, 244, 245, 248, 249, 254, 256, 264, 275, 276, 278, 280, 281, 282, 284, 285, 286, 287], "file": [0, 1, 3, 4, 5, 6, 7, 11, 12, 42, 96, 124, 141, 163, 209, 216, 219, 221, 238, 240, 241, 242, 248, 251], "That": [0, 4, 7, 11, 12, 18, 19, 20, 60, 61, 66, 90, 96, 134, 171, 176, 182, 192, 193, 196, 197, 199, 200, 202, 204, 215, 216, 225, 229, 241, 242, 248, 275, 278, 281, 286], "said": [0, 4, 11, 34, 38, 42, 46, 100, 179, 190, 192, 193, 197, 225, 228, 229, 254, 261], "although": [0, 3, 4, 6, 7, 11, 12, 15, 16, 18, 20, 24, 52, 60, 61, 66, 72, 84, 85, 88, 90, 91, 93, 96, 100, 103, 114, 126, 141, 196, 199, 200, 202, 204, 205, 217, 218, 221, 222, 227, 241, 247, 248, 278, 281, 286], "requir": [0, 3, 6, 7, 8, 10, 11, 12, 20, 26, 30, 32, 42, 51, 60, 61, 63, 64, 68, 70, 71, 73, 74, 77, 79, 90, 96, 99, 100, 101, 102, 103, 108, 114, 115, 118, 119, 121, 123, 124, 126, 128, 135, 139, 148, 171, 183, 184, 186, 194, 195, 196, 199, 200, 202, 204, 206, 209, 212, 218, 219, 222, 225, 227, 228, 229, 233, 240, 241, 242, 243, 245, 247, 248, 257, 258, 259, 282, 284], "conveni": [0, 1, 10, 11, 12, 23, 25, 30, 33, 40, 42, 52, 60, 61, 65, 68, 87, 90, 102, 124, 141, 183, 186, 192, 193, 195, 196, 197, 198, 199, 200, 204, 207, 216, 217, 221, 227, 233, 234, 241, 243, 244, 248, 261, 276, 278], "pleas": [0, 4, 6, 7, 9, 10, 23, 24, 25, 26, 27, 28, 29, 32, 38, 40, 60, 68, 72, 85, 100, 114, 119, 124, 134, 138, 139, 146, 147, 168, 183, 193, 194, 195, 196, 202, 203, 217, 221, 222, 227, 228, 248, 254, 259, 283, 287], "when": [0, 1, 3, 6, 7, 8, 10, 11, 12, 14, 15, 16, 18, 19, 20, 25, 27, 28, 29, 32, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 51, 52, 53, 58, 59, 60, 61, 62, 64, 65, 66, 68, 69, 70, 72, 73, 74, 75, 76, 77, 84, 87, 88, 90, 91, 92, 96, 100, 101, 102, 106, 108, 110, 111, 114, 118, 124, 126, 132, 134, 135, 136, 137, 138, 139, 142, 147, 148, 153, 158, 159, 163, 166, 168, 176, 177, 178, 183, 189, 192, 193, 195, 196, 197, 199, 200, 202, 204, 205, 206, 208, 209, 210, 211, 215, 216, 217, 218, 219, 221, 222, 225, 226, 227, 228, 229, 233, 234, 238, 240, 241, 242, 243, 245, 247, 248, 250, 251, 253, 258, 276, 278, 280, 281, 286, 287], "your": [0, 1, 3, 4, 5, 6, 7, 9, 10, 12, 20, 22, 23, 24, 26, 28, 29, 30, 32, 36, 60, 61, 87, 88, 96, 101, 102, 110, 114, 118, 136, 138, 193, 195, 209, 216, 221, 225, 228, 229, 247, 248, 276, 280, 282, 283, 285, 286], "work": [0, 1, 3, 4, 6, 10, 11, 12, 15, 16, 18, 19, 20, 27, 28, 32, 35, 37, 40, 41, 42, 51, 52, 53, 60, 61, 64, 68, 85, 87, 89, 90, 91, 93, 96, 97, 100, 102, 114, 118, 124, 126, 135, 139, 141, 154, 158, 163, 167, 168, 169, 170, 173, 176, 186, 193, 194, 195, 196, 197, 198, 199, 200, 202, 204, 205, 209, 216, 217, 218, 219, 221, 222, 225, 227, 228, 229, 235, 240, 241, 242, 244, 247, 248, 249, 250, 258, 259, 278, 279, 280, 281, 282, 285, 286], "also": [0, 1, 3, 4, 7, 8, 10, 11, 12, 14, 16, 18, 19, 20, 22, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 40, 41, 42, 49, 51, 52, 59, 61, 62, 64, 65, 66, 67, 68, 72, 76, 78, 80, 82, 83, 85, 87, 89, 90, 91, 94, 96, 97, 100, 101, 102, 103, 104, 106, 107, 108, 110, 114, 115, 116, 118, 119, 123, 124, 126, 127, 128, 129, 132, 135, 136, 137, 138, 139, 141, 142, 143, 147, 157, 158, 160, 164, 168, 173, 174, 177, 179, 183, 184, 186, 188, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 204, 205, 206, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 221, 222, 224, 225, 226, 227, 228, 229, 230, 233, 234, 235, 238, 240, 241, 242, 243, 244, 245, 248, 250, 254, 257, 258, 259, 260, 261, 263, 264, 275, 276, 278, 280, 281, 282, 285, 286, 287], "consid": [0, 4, 7, 10, 11, 12, 15, 18, 19, 20, 25, 30, 38, 41, 42, 49, 52, 55, 59, 60, 61, 63, 64, 65, 66, 68, 70, 72, 76, 84, 85, 87, 88, 89, 90, 91, 93, 96, 100, 110, 114, 115, 121, 125, 136, 142, 164, 171, 174, 179, 185, 189, 190, 192, 195, 196, 197, 198, 199, 200, 202, 204, 205, 206, 208, 209, 212, 216, 221, 222, 225, 226, 227, 228, 229, 240, 242, 247, 257, 259, 261, 263, 264, 278, 282, 286], "contribut": [0, 3, 4, 5, 6, 7, 32, 76, 100, 119, 129, 132, 199, 202, 204, 225, 264, 283], "all": [0, 1, 3, 4, 5, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 26, 30, 31, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 75, 76, 77, 85, 87, 89, 90, 91, 92, 93, 96, 99, 100, 101, 102, 103, 104, 106, 108, 110, 111, 115, 116, 118, 119, 121, 123, 124, 126, 127, 129, 134, 136, 138, 141, 142, 148, 153, 154, 158, 168, 170, 171, 172, 174, 176, 177, 178, 179, 181, 182, 189, 190, 193, 194, 195, 196, 197, 198, 199, 200, 202, 204, 205, 206, 208, 209, 210, 211, 212, 215, 216, 217, 218, 219, 221, 222, 224, 225, 226, 227, 228, 229, 230, 233, 235, 236, 238, 240, 241, 242, 243, 245, 247, 248, 250, 254, 256, 258, 260, 261, 262, 263, 265, 275, 276, 278, 280, 281, 282, 285, 286, 287], "chang": [0, 1, 6, 7, 8, 11, 12, 18, 32, 41, 42, 43, 51, 52, 56, 59, 60, 61, 64, 65, 66, 68, 74, 75, 85, 87, 90, 96, 100, 102, 103, 106, 110, 118, 121, 124, 126, 131, 148, 159, 169, 179, 180, 183, 190, 192, 193, 194, 195, 196, 197, 198, 202, 205, 206, 209, 216, 217, 218, 219, 221, 225, 227, 228, 229, 230, 240, 247, 248, 259, 261, 275, 278, 281, 285], "back": [0, 20, 24, 25, 27, 41, 42, 56, 59, 60, 61, 66, 68, 75, 76, 82, 84, 85, 87, 88, 91, 100, 101, 110, 168, 189, 192, 199, 204, 205, 207, 209, 219, 225, 227, 230, 231], "we": [0, 3, 4, 5, 6, 7, 10, 12, 16, 18, 19, 20, 22, 23, 24, 26, 28, 29, 30, 35, 36, 37, 40, 41, 42, 43, 44, 49, 50, 51, 52, 53, 55, 56, 58, 59, 60, 61, 62, 64, 65, 66, 68, 73, 78, 83, 84, 85, 87, 88, 89, 90, 91, 96, 97, 99, 100, 110, 113, 114, 115, 116, 118, 119, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 141, 146, 149, 157, 160, 163, 164, 166, 167, 168, 169, 170, 171, 173, 174, 176, 177, 179, 183, 184, 186, 188, 190, 192, 193, 195, 196, 197, 198, 199, 200, 202, 204, 205, 206, 208, 209, 216, 217, 219, 221, 222, 224, 225, 226, 227, 229, 233, 235, 240, 241, 242, 244, 245, 247, 248, 254, 258, 259, 260, 261, 263, 264, 275, 276, 278, 280, 281, 282, 285, 286, 287], "can": [0, 1, 3, 4, 5, 6, 7, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 22, 26, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 55, 56, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 76, 77, 78, 79, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 96, 99, 100, 101, 102, 103, 104, 106, 107, 108, 110, 112, 114, 115, 116, 118, 119, 120, 121, 123, 124, 127, 128, 129, 132, 134, 135, 136, 137, 138, 139, 141, 142, 146, 147, 148, 153, 155, 158, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 183, 184, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216, 217, 218, 219, 221, 222, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 238, 240, 241, 242, 244, 245, 247, 248, 250, 257, 258, 259, 260, 261, 263, 264, 275, 276, 278, 280, 281, 282, 284, 285, 286, 287], "incorpor": [0, 3, 16, 197, 221], "u": [0, 12, 16, 18, 19, 20, 25, 34, 40, 41, 42, 51, 56, 59, 60, 61, 63, 74, 77, 82, 85, 87, 93, 96, 100, 115, 118, 119, 120, 123, 124, 126, 128, 131, 134, 135, 136, 138, 139, 141, 142, 146, 147, 158, 163, 169, 179, 188, 190, 192, 194, 195, 196, 197, 198, 202, 204, 205, 208, 209, 216, 219, 221, 222, 225, 226, 227, 228, 229, 234, 248, 261, 278, 280, 281, 282], "benefit": [0, 3, 20, 23, 42, 114, 138, 189], "end": [0, 3, 6, 10, 12, 16, 18, 19, 20, 22, 26, 40, 41, 42, 50, 51, 56, 58, 59, 60, 61, 65, 66, 68, 70, 72, 76, 85, 88, 90, 91, 93, 96, 100, 102, 103, 104, 106, 123, 126, 128, 131, 136, 137, 138, 139, 179, 184, 189, 190, 193, 194, 198, 202, 209, 212, 215, 217, 218, 222, 225, 226, 227, 228, 229, 230, 240, 242, 243, 245, 247, 250, 261, 276, 280, 282, 286], "develop": [0, 4, 6, 7, 8, 9, 11, 16, 18, 20, 31, 32, 40, 43, 58, 102, 141, 178, 195, 196, 199, 202, 227, 228, 280, 283], "team": [0, 4], "member": [0, 6, 10, 18, 28, 41, 49, 51, 61, 83, 106, 196, 217, 234], "list": [0, 3, 4, 6, 7, 13, 18, 24, 25, 26, 27, 29, 30, 32, 34, 37, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 82, 83, 85, 87, 88, 89, 90, 91, 93, 96, 99, 100, 101, 102, 103, 110, 115, 118, 119, 123, 126, 128, 131, 135, 136, 137, 141, 142, 147, 158, 160, 163, 164, 168, 169, 171, 172, 174, 176, 184, 188, 193, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 215, 217, 218, 219, 221, 222, 225, 226, 227, 228, 229, 230, 233, 234, 235, 238, 240, 241, 242, 243, 244, 245, 247, 248, 250, 275, 279, 280, 282, 285, 286, 287], "github": [0, 1, 3, 4, 5, 7, 10, 23, 24, 25, 26, 27, 28, 29, 32, 40, 60, 76, 87, 96, 178, 217, 228, 282], "found": [0, 1, 3, 4, 6, 7, 18, 19, 25, 28, 40, 43, 51, 52, 54, 56, 58, 60, 61, 62, 70, 71, 76, 85, 87, 96, 100, 110, 116, 118, 119, 120, 138, 141, 178, 192, 196, 197, 199, 204, 205, 206, 209, 211, 212, 215, 216, 219, 222, 225, 226, 227, 228, 229, 233, 247, 248, 250, 251, 285], "zotero": 0, "start": [1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 20, 27, 31, 32, 41, 42, 44, 49, 50, 51, 52, 56, 59, 60, 61, 62, 68, 90, 91, 93, 96, 99, 100, 101, 103, 104, 106, 124, 126, 136, 137, 169, 170, 173, 177, 192, 193, 195, 199, 202, 204, 205, 209, 212, 215, 217, 218, 219, 222, 225, 227, 228, 229, 230, 233, 240, 241, 247, 249, 250, 260, 274, 275, 278, 280], "either": [1, 3, 6, 7, 10, 11, 12, 18, 19, 20, 24, 25, 26, 27, 28, 29, 34, 38, 40, 41, 44, 52, 59, 60, 61, 64, 65, 66, 68, 75, 77, 83, 85, 87, 88, 90, 91, 96, 100, 110, 115, 118, 119, 120, 123, 124, 137, 139, 141, 158, 164, 171, 174, 176, 189, 193, 195, 197, 198, 199, 200, 202, 204, 205, 209, 211, 216, 217, 218, 219, 222, 225, 226, 227, 228, 229, 230, 233, 234, 241, 247, 248, 254, 263, 278, 281, 282], "machin": [1, 3, 5, 6, 210, 221, 225, 275], "imag": [1, 3, 51, 118, 130, 135, 141, 143, 147, 196, 200, 202, 209, 217, 228], "contain": [1, 3, 4, 6, 7, 10, 11, 12, 14, 19, 20, 23, 24, 25, 26, 29, 30, 33, 35, 36, 40, 41, 42, 43, 51, 52, 56, 58, 59, 62, 63, 64, 66, 68, 69, 71, 73, 74, 75, 76, 77, 86, 87, 89, 90, 91, 93, 96, 99, 100, 101, 102, 103, 105, 108, 109, 111, 115, 119, 120, 121, 123, 126, 128, 138, 139, 141, 142, 143, 144, 145, 147, 148, 149, 161, 164, 166, 169, 171, 174, 183, 193, 194, 195, 196, 197, 198, 199, 200, 202, 205, 209, 210, 211, 216, 217, 219, 221, 222, 223, 225, 226, 227, 228, 229, 233, 234, 235, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 254, 257, 265, 276, 278, 282, 286], "them": [1, 3, 4, 5, 6, 7, 10, 11, 12, 15, 16, 18, 19, 20, 24, 25, 26, 28, 30, 33, 36, 38, 41, 42, 49, 51, 52, 59, 60, 61, 62, 64, 65, 68, 71, 76, 78, 80, 82, 83, 85, 89, 90, 93, 96, 99, 100, 101, 114, 119, 121, 124, 126, 128, 129, 134, 136, 138, 139, 141, 147, 151, 167, 168, 174, 176, 179, 182, 184, 190, 192, 193, 196, 197, 199, 200, 202, 204, 205, 206, 208, 209, 210, 216, 217, 218, 219, 221, 222, 225, 227, 228, 230, 231, 240, 242, 244, 247, 257, 275, 276, 278, 280, 281, 286], "If": [1, 3, 4, 6, 7, 10, 11, 12, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 49, 51, 52, 56, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 82, 83, 85, 87, 88, 89, 90, 91, 93, 96, 97, 99, 100, 101, 102, 103, 108, 110, 111, 113, 114, 115, 116, 118, 119, 120, 121, 123, 124, 125, 136, 137, 138, 139, 141, 142, 147, 151, 155, 158, 164, 168, 169, 170, 171, 172, 174, 182, 183, 184, 185, 186, 188, 189, 190, 193, 195, 196, 197, 198, 199, 200, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 221, 222, 225, 226, 227, 228, 229, 230, 233, 234, 235, 236, 238, 240, 241, 242, 243, 244, 245, 247, 248, 250, 254, 257, 259, 261, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], "instead": [1, 3, 4, 6, 7, 10, 11, 12, 14, 18, 19, 20, 23, 25, 26, 29, 30, 33, 35, 37, 41, 42, 51, 53, 56, 60, 62, 63, 64, 65, 68, 87, 88, 90, 91, 93, 94, 96, 100, 108, 111, 113, 123, 124, 126, 128, 138, 141, 172, 176, 178, 184, 189, 190, 192, 193, 196, 199, 200, 202, 204, 205, 207, 209, 211, 219, 221, 225, 227, 228, 229, 233, 234, 235, 238, 243, 244, 245, 247, 248, 252, 261, 264, 275, 276, 278, 280, 281, 282, 286, 287], "follow": [1, 3, 4, 6, 7, 10, 12, 14, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 32, 35, 37, 40, 41, 42, 43, 49, 50, 51, 52, 53, 56, 59, 60, 61, 64, 65, 66, 68, 72, 74, 76, 83, 84, 85, 87, 90, 91, 93, 96, 100, 101, 103, 104, 106, 118, 119, 124, 126, 134, 135, 136, 137, 138, 139, 141, 143, 147, 166, 169, 171, 174, 177, 179, 184, 190, 192, 193, 194, 195, 196, 197, 202, 203, 204, 205, 207, 208, 209, 210, 211, 216, 218, 219, 221, 222, 225, 226, 227, 228, 229, 230, 233, 234, 235, 240, 243, 244, 247, 248, 251, 258, 259, 261, 275, 276, 278, 279, 281, 282, 286, 287], "specif": [1, 5, 6, 7, 10, 11, 18, 20, 21, 24, 31, 51, 52, 60, 61, 62, 68, 72, 87, 89, 91, 96, 115, 118, 119, 123, 124, 134, 141, 143, 179, 193, 195, 196, 200, 202, 204, 205, 208, 209, 210, 215, 221, 222, 225, 226, 227, 229, 235, 240, 241, 242, 247, 282, 286], "instruct": [1, 3, 5, 6, 7, 9, 10, 12, 16, 21, 31, 42, 209, 227, 241, 242], "below": [1, 3, 4, 6, 7, 10, 12, 18, 20, 25, 28, 29, 30, 32, 40, 41, 42, 50, 51, 52, 60, 61, 65, 67, 68, 69, 70, 76, 77, 83, 85, 87, 91, 96, 99, 100, 102, 103, 104, 110, 115, 118, 119, 123, 124, 126, 128, 129, 130, 135, 136, 137, 138, 141, 168, 174, 179, 184, 193, 194, 195, 196, 198, 205, 209, 210, 212, 218, 221, 222, 225, 226, 227, 228, 229, 240, 242, 247, 248, 250, 259, 261, 264, 265, 282, 286], "mai": [1, 3, 4, 5, 6, 10, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 38, 40, 41, 42, 43, 51, 52, 53, 59, 60, 61, 62, 64, 65, 66, 68, 70, 72, 73, 75, 76, 77, 85, 87, 88, 90, 91, 92, 96, 97, 99, 100, 102, 106, 116, 119, 120, 124, 128, 134, 138, 160, 169, 174, 175, 176, 181, 184, 188, 190, 192, 195, 196, 197, 198, 202, 204, 208, 209, 210, 217, 218, 219, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 233, 235, 238, 240, 241, 242, 243, 244, 245, 247, 248, 250, 251, 261, 263, 275, 276, 278, 281, 282, 286, 287], "choos": [1, 6, 25, 51, 56, 60, 62, 65, 96, 100, 104, 108, 128, 139, 174, 178, 184, 192, 193, 205, 206, 209, 216, 218, 219, 225, 226, 229, 240, 245, 286], "cd": [1, 5, 6, 228, 247], "dockerfil": 1, "htmldoc": 1, "sympy_htmldoc": 1, "option": [1, 4, 5, 6, 7, 8, 12, 20, 23, 28, 35, 37, 40, 42, 51, 58, 59, 60, 61, 62, 63, 64, 66, 69, 70, 73, 74, 76, 77, 79, 87, 88, 91, 93, 96, 97, 100, 101, 102, 103, 108, 110, 114, 115, 116, 118, 119, 120, 123, 141, 147, 158, 163, 164, 166, 169, 171, 176, 183, 184, 189, 195, 196, 197, 198, 199, 200, 204, 205, 206, 208, 209, 210, 211, 212, 214, 216, 217, 218, 221, 222, 225, 226, 227, 228, 229, 234, 235, 240, 241, 242, 245, 247, 248, 254, 279, 285, 286], "now": [1, 2, 3, 5, 7, 10, 12, 16, 18, 19, 20, 28, 32, 41, 42, 52, 60, 61, 65, 68, 71, 76, 77, 82, 84, 85, 89, 96, 100, 110, 115, 118, 123, 124, 127, 129, 132, 134, 141, 142, 177, 179, 184, 189, 192, 193, 196, 197, 199, 202, 205, 206, 210, 217, 218, 219, 221, 222, 225, 227, 228, 229, 230, 235, 240, 241, 248, 259, 260, 278, 280, 281, 286, 287], "skip": [1, 3, 4, 6, 12, 41, 44, 60, 91, 96, 100, 184, 204, 208, 209, 211, 225, 227, 238, 240, 276, 284, 285], "down": [1, 4, 6, 18, 65, 93, 112, 126, 128, 192, 193, 195, 200, 211, 217, 219, 221, 225, 244, 282, 286], "section": [1, 4, 7, 8, 11, 18, 20, 21, 34, 41, 43, 51, 52, 59, 60, 61, 63, 67, 68, 70, 76, 85, 90, 91, 96, 103, 104, 118, 124, 139, 177, 179, 183, 190, 193, 196, 199, 202, 204, 209, 212, 216, 219, 225, 235, 244, 245, 247, 258, 259, 260, 261, 265, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287], "For": [1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 15, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 48, 49, 50, 51, 52, 53, 56, 59, 60, 61, 62, 63, 64, 65, 66, 68, 72, 74, 75, 78, 81, 83, 84, 85, 89, 90, 91, 96, 100, 101, 102, 103, 104, 110, 112, 116, 118, 119, 120, 124, 128, 134, 135, 136, 137, 138, 139, 141, 143, 157, 158, 163, 167, 169, 171, 172, 173, 174, 176, 179, 180, 184, 188, 189, 190, 192, 193, 195, 196, 197, 199, 200, 202, 204, 205, 206, 208, 209, 210, 211, 212, 215, 216, 217, 218, 219, 221, 222, 224, 225, 227, 228, 229, 230, 233, 234, 235, 236, 240, 241, 242, 244, 245, 247, 248, 251, 252, 254, 256, 259, 261, 263, 264, 275, 276, 278, 281, 282, 286, 287], "apt": [1, 5], "get": [1, 2, 4, 6, 7, 8, 10, 15, 16, 18, 19, 20, 25, 27, 29, 32, 33, 36, 37, 40, 41, 42, 44, 49, 50, 52, 53, 55, 56, 59, 60, 61, 62, 64, 65, 66, 68, 73, 83, 85, 87, 89, 93, 96, 100, 102, 103, 108, 110, 113, 119, 124, 127, 128, 136, 137, 138, 141, 146, 147, 154, 158, 163, 168, 169, 170, 171, 176, 179, 193, 197, 199, 200, 202, 204, 205, 206, 207, 208, 209, 211, 217, 218, 219, 221, 222, 225, 226, 227, 228, 229, 230, 231, 235, 236, 241, 247, 248, 249, 251, 254, 258, 275, 278, 280, 281, 282, 285, 286, 287], "python3": [1, 3, 42, 102, 209], "sphinx": [1, 4, 7, 8, 66, 225, 240, 245], "texliv": [1, 3, 209], "recommend": [1, 5, 6, 10, 11, 12, 13, 18, 20, 22, 23, 24, 25, 27, 29, 30, 31, 32, 41, 42, 60, 61, 64, 91, 114, 136, 141, 168, 184, 192, 197, 198, 199, 200, 206, 222, 225, 228, 234, 238, 245, 258, 259, 284, 287], "dvipng": 1, "librsvg2": 1, "bin": [1, 2, 3, 5, 6, 88, 209, 240, 247], "imagemagick": 1, "docbook2x": 1, "graphviz": [1, 7, 281, 285], "pip": [1, 3, 32, 102], "sudo": 1, "virtual": [1, 4, 8, 32, 60, 76, 193, 279], "environ": [1, 3, 8, 9, 10, 11, 60, 88, 189, 209, 229, 240, 250, 278, 280, 285], "venv": 1, "path": [1, 5, 6, 10, 51, 76, 82, 110, 132, 190, 192, 218, 221, 225, 228, 240, 241, 244, 245, 247, 250, 251, 252, 261], "my": [1, 209, 275], "Then": [1, 5, 11, 16, 18, 51, 56, 59, 60, 85, 89, 96, 100, 116, 119, 121, 131, 133, 134, 139, 143, 171, 179, 192, 196, 197, 199, 202, 204, 206, 209, 216, 219, 221, 222, 225, 227, 248], "activ": [1, 4, 5, 13, 126, 195, 238, 243, 245], "need": [1, 3, 4, 6, 7, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 34, 36, 37, 40, 41, 42, 45, 51, 52, 56, 58, 59, 60, 61, 62, 66, 68, 71, 75, 76, 83, 84, 85, 87, 88, 90, 91, 96, 100, 101, 102, 103, 104, 106, 110, 114, 119, 121, 123, 124, 126, 127, 128, 129, 131, 132, 133, 135, 136, 137, 138, 139, 142, 143, 154, 158, 166, 172, 177, 183, 184, 189, 192, 193, 196, 197, 198, 199, 200, 202, 204, 205, 206, 208, 209, 216, 217, 219, 221, 222, 224, 225, 227, 228, 229, 233, 234, 235, 236, 238, 241, 242, 243, 244, 245, 247, 250, 254, 258, 260, 261, 264, 275, 276, 278, 281, 282, 284, 286], "rerun": [1, 205, 240], "each": [1, 3, 4, 10, 11, 12, 14, 18, 20, 23, 24, 25, 26, 28, 31, 37, 38, 40, 41, 42, 43, 44, 51, 52, 56, 60, 61, 62, 63, 64, 65, 66, 68, 70, 75, 76, 77, 82, 83, 85, 87, 89, 90, 91, 93, 96, 100, 103, 106, 108, 110, 116, 118, 119, 124, 126, 128, 131, 133, 135, 136, 139, 158, 171, 174, 183, 184, 188, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 204, 205, 207, 209, 217, 218, 219, 221, 222, 225, 226, 227, 228, 229, 230, 233, 234, 235, 238, 240, 242, 244, 247, 248, 250, 254, 256, 257, 259, 261, 263, 276, 279, 281, 286, 287], "time": [1, 3, 4, 7, 10, 11, 12, 16, 18, 19, 28, 30, 33, 37, 38, 42, 51, 52, 56, 60, 61, 65, 68, 83, 85, 90, 91, 96, 97, 99, 100, 101, 102, 107, 108, 110, 114, 119, 120, 123, 124, 126, 128, 131, 132, 134, 136, 137, 138, 139, 141, 142, 148, 158, 163, 171, 172, 176, 177, 179, 180, 183, 184, 186, 188, 189, 190, 191, 192, 193, 194, 196, 198, 199, 202, 203, 204, 205, 206, 208, 209, 216, 217, 218, 219, 221, 225, 227, 229, 238, 240, 241, 246, 247, 248, 261, 263, 273, 276, 280, 281, 282], "new": [1, 3, 4, 5, 7, 11, 18, 20, 24, 31, 36, 37, 41, 42, 43, 51, 52, 59, 60, 61, 62, 68, 73, 76, 85, 87, 88, 91, 96, 100, 103, 106, 110, 115, 118, 124, 131, 133, 139, 140, 141, 143, 164, 170, 171, 174, 176, 179, 180, 182, 184, 188, 193, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 209, 216, 219, 221, 222, 225, 227, 228, 229, 230, 240, 241, 245, 248, 254, 256, 258, 274, 275, 278, 281, 282, 284], "termin": [1, 51, 60, 66, 88, 100, 189, 209, 216, 240, 285], "after": [1, 4, 5, 6, 7, 10, 12, 32, 34, 36, 37, 41, 43, 48, 51, 52, 56, 58, 59, 60, 61, 62, 66, 75, 77, 82, 87, 91, 96, 100, 102, 103, 110, 135, 136, 138, 141, 143, 147, 159, 171, 179, 183, 190, 193, 198, 202, 204, 205, 206, 207, 209, 210, 215, 222, 225, 226, 227, 228, 230, 240, 243, 248, 250, 254, 257, 261, 275, 276, 278, 282, 286], "two": [1, 3, 4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 23, 25, 28, 29, 34, 40, 41, 42, 43, 45, 49, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 62, 64, 65, 66, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 82, 83, 85, 87, 89, 90, 91, 93, 96, 100, 101, 103, 104, 106, 107, 110, 111, 114, 115, 118, 119, 127, 132, 134, 135, 136, 138, 139, 146, 147, 148, 153, 154, 158, 160, 163, 164, 169, 170, 171, 172, 173, 174, 176, 179, 183, 184, 185, 186, 188, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 204, 205, 206, 208, 209, 210, 211, 216, 217, 218, 219, 221, 222, 225, 226, 227, 228, 229, 230, 231, 234, 244, 247, 248, 254, 257, 259, 260, 261, 263, 275, 276, 279, 281, 282, 286], "method": [1, 3, 4, 6, 7, 11, 12, 17, 18, 23, 24, 25, 27, 28, 29, 36, 37, 38, 40, 41, 42, 43, 44, 51, 52, 53, 59, 60, 61, 62, 63, 64, 66, 67, 68, 71, 72, 73, 74, 76, 79, 82, 84, 85, 87, 89, 91, 92, 93, 96, 100, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 117, 118, 123, 124, 127, 129, 130, 134, 135, 140, 141, 148, 151, 153, 155, 163, 164, 169, 171, 174, 176, 181, 182, 183, 184, 186, 190, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 210, 211, 212, 214, 215, 216, 217, 221, 222, 225, 227, 229, 230, 232, 234, 235, 236, 240, 242, 244, 247, 248, 254, 258, 261, 264, 265, 269, 271, 275, 276, 277, 278, 281, 286], "given": [1, 3, 4, 7, 10, 11, 12, 14, 16, 18, 20, 23, 26, 28, 34, 36, 37, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 56, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 82, 83, 84, 85, 87, 89, 90, 91, 93, 96, 99, 100, 102, 103, 106, 108, 111, 115, 116, 118, 119, 121, 123, 124, 128, 139, 147, 164, 169, 171, 179, 180, 182, 184, 185, 186, 188, 190, 193, 194, 195, 196, 197, 198, 199, 200, 202, 204, 205, 206, 207, 208, 209, 212, 214, 215, 216, 217, 218, 219, 221, 222, 224, 225, 226, 227, 228, 229, 230, 234, 235, 238, 240, 242, 244, 247, 248, 250, 251, 252, 254, 257, 259, 261, 263, 275, 281, 284, 286, 287], "abov": [1, 3, 4, 6, 7, 10, 12, 14, 16, 19, 20, 23, 27, 28, 30, 40, 41, 42, 43, 44, 50, 51, 52, 56, 59, 60, 64, 65, 68, 70, 73, 76, 77, 85, 87, 90, 91, 96, 100, 101, 102, 104, 110, 114, 118, 119, 121, 123, 124, 126, 127, 128, 129, 134, 135, 137, 138, 139, 142, 169, 171, 174, 184, 190, 192, 193, 195, 196, 197, 199, 200, 202, 204, 205, 206, 208, 209, 210, 216, 219, 221, 222, 225, 227, 228, 229, 233, 234, 241, 242, 248, 258, 259, 260, 261, 264, 278, 280, 281, 282, 286], "run": [1, 4, 6, 7, 8, 11, 12, 16, 18, 20, 43, 51, 52, 54, 60, 61, 85, 96, 101, 102, 119, 126, 141, 174, 189, 195, 196, 209, 219, 221, 225, 226, 227, 237, 241, 243, 244, 247, 248, 273, 278, 285], "txt": [1, 209], "mpmath": [1, 3, 5, 11, 20, 26, 27, 42, 65, 68, 96, 101, 141, 199, 200, 209, 217, 227, 243, 248], "error": [1, 3, 4, 6, 7, 10, 14, 18, 19, 23, 24, 25, 26, 27, 30, 33, 40, 42, 49, 52, 59, 60, 61, 66, 70, 75, 85, 87, 96, 99, 100, 102, 124, 193, 194, 197, 199, 200, 202, 206, 209, 211, 217, 225, 226, 227, 228, 229, 240, 241, 242, 245, 247, 250, 254, 275], "packag": [1, 3, 22, 26, 27, 32, 88, 101, 102, 107, 134, 141, 189, 209, 240, 251, 260, 261, 280], "matplotlib": [1, 3, 6, 7, 10, 32, 83, 88, 108, 141, 154, 189, 195, 285], "mayb": [1, 19, 23], "other": [1, 3, 4, 5, 6, 7, 10, 11, 12, 14, 15, 16, 19, 21, 23, 24, 25, 26, 28, 29, 30, 34, 38, 41, 42, 43, 51, 52, 53, 56, 57, 59, 60, 61, 62, 64, 65, 66, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 80, 85, 87, 90, 91, 93, 96, 100, 101, 102, 103, 104, 110, 114, 115, 118, 119, 124, 125, 128, 129, 134, 135, 138, 139, 141, 143, 146, 147, 148, 158, 169, 171, 172, 173, 174, 177, 179, 180, 181, 183, 184, 186, 188, 192, 193, 195, 196, 197, 198, 199, 200, 202, 204, 205, 206, 209, 210, 211, 214, 215, 216, 217, 218, 219, 221, 222, 224, 225, 226, 227, 228, 229, 230, 235, 236, 238, 241, 242, 243, 244, 247, 248, 254, 257, 258, 261, 263, 265, 272, 275, 276, 278, 280, 281, 282, 286], "rpm": 1, "base": [1, 3, 4, 5, 6, 7, 9, 11, 12, 18, 20, 28, 32, 36, 37, 40, 42, 43, 49, 50, 51, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 71, 73, 76, 83, 87, 88, 89, 90, 92, 93, 100, 101, 107, 115, 118, 124, 126, 141, 142, 143, 152, 154, 158, 159, 163, 169, 170, 172, 174, 176, 179, 180, 182, 184, 186, 189, 190, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 209, 211, 216, 217, 218, 219, 221, 222, 225, 227, 229, 233, 234, 235, 240, 241, 242, 243, 244, 245, 247, 248, 249, 254, 257, 258, 261, 281, 286], "distribut": [1, 3, 32, 51, 58, 60, 68, 76, 87, 103, 104, 173, 197, 200, 205, 209, 235], "prerequisit": 1, "dnf": [1, 90], "scheme": [1, 4, 18, 52, 59, 64, 194, 195, 202, 205, 234], "medium": [1, 20, 143, 144, 147, 148, 158, 202, 271], "tool": [1, 7, 11, 20, 51, 88, 95, 96, 101, 110, 141, 193, 196, 201, 202, 209, 241, 247, 253, 262, 269], "first": [1, 3, 5, 6, 7, 8, 11, 12, 16, 18, 19, 20, 25, 28, 29, 32, 41, 42, 43, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 70, 73, 74, 76, 77, 84, 85, 87, 89, 90, 91, 96, 99, 100, 103, 104, 110, 111, 116, 118, 119, 123, 124, 126, 127, 128, 129, 134, 135, 138, 139, 142, 146, 147, 151, 155, 158, 163, 164, 167, 168, 169, 170, 171, 173, 174, 177, 179, 184, 188, 192, 193, 195, 196, 198, 200, 202, 203, 204, 205, 206, 209, 210, 211, 212, 215, 216, 218, 219, 221, 222, 225, 226, 227, 228, 229, 233, 235, 238, 240, 241, 242, 243, 247, 248, 250, 259, 264, 275, 276, 278, 280, 281, 282, 284, 286, 287], "homebrew": 1, "brew": 1, "sh": 1, "docbook": 1, "librsvg": 1, "conda": [1, 3, 5, 32, 102], "Or": [1, 7, 10, 12, 19, 23, 25, 51, 60, 61, 62, 68, 85, 90, 100, 121, 196, 206, 208, 209, 221, 228, 229, 240, 248, 261, 281, 284], "forg": [1, 3, 102], "make": [1, 3, 4, 6, 7, 8, 10, 11, 12, 14, 16, 18, 19, 20, 26, 27, 28, 29, 33, 36, 37, 38, 40, 42, 43, 50, 51, 59, 60, 61, 62, 63, 64, 65, 66, 68, 72, 76, 87, 88, 90, 96, 99, 100, 101, 102, 103, 104, 106, 119, 123, 124, 126, 127, 131, 132, 136, 138, 139, 141, 154, 171, 176, 189, 192, 195, 198, 199, 200, 202, 204, 205, 206, 208, 209, 212, 217, 218, 219, 221, 225, 226, 227, 228, 233, 235, 238, 240, 241, 242, 243, 245, 247, 248, 258, 263, 264, 278, 279, 280, 281, 282, 286], "success": [1, 7, 41, 51, 60, 68, 85, 87, 100, 118, 126, 184, 196, 202, 204, 217, 218, 225, 228, 229, 247, 254, 256], "tricki": [1, 60, 85], "becaus": [1, 3, 4, 6, 7, 10, 11, 12, 14, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 32, 33, 38, 42, 52, 59, 60, 61, 66, 72, 76, 77, 85, 87, 90, 94, 96, 100, 102, 118, 124, 128, 154, 162, 174, 176, 179, 192, 195, 196, 198, 199, 200, 202, 204, 205, 206, 208, 209, 212, 216, 219, 221, 222, 225, 226, 227, 228, 238, 240, 241, 243, 247, 248, 250, 258, 276, 278, 280, 281, 282, 285, 286, 287], "some": [1, 3, 4, 6, 11, 12, 16, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 32, 33, 38, 41, 42, 43, 48, 51, 52, 58, 59, 60, 61, 64, 65, 66, 68, 70, 71, 72, 76, 85, 87, 89, 90, 91, 93, 96, 100, 101, 102, 108, 111, 114, 115, 118, 121, 123, 124, 125, 126, 127, 128, 129, 135, 136, 138, 139, 142, 154, 159, 163, 171, 174, 179, 180, 183, 185, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 204, 205, 206, 209, 211, 215, 216, 217, 218, 219, 221, 222, 225, 226, 227, 229, 235, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 254, 256, 257, 259, 261, 265, 275, 276, 278, 280, 281, 282, 284, 285, 286], "avail": [1, 3, 5, 7, 10, 11, 12, 18, 27, 28, 30, 31, 32, 41, 42, 51, 52, 59, 60, 65, 68, 87, 96, 101, 102, 124, 138, 141, 199, 200, 202, 205, 209, 210, 215, 217, 219, 221, 222, 227, 228, 229, 230, 234, 235, 240, 247, 248, 253, 254, 278, 285], "subsystem": [1, 209], "linux": [1, 32], "possibl": [1, 6, 10, 11, 14, 18, 19, 20, 24, 28, 29, 32, 40, 42, 43, 44, 49, 51, 52, 54, 55, 56, 60, 61, 65, 66, 68, 70, 72, 74, 75, 77, 82, 84, 85, 87, 89, 90, 91, 93, 96, 100, 111, 112, 114, 126, 137, 139, 168, 170, 174, 176, 179, 188, 190, 194, 195, 196, 197, 199, 200, 202, 204, 205, 206, 208, 209, 210, 211, 215, 216, 217, 218, 221, 222, 225, 226, 227, 228, 229, 230, 235, 240, 242, 243, 244, 245, 247, 248, 258, 259, 261, 277, 278, 281, 286], "workaround": [1, 248], "solut": [1, 10, 11, 12, 14, 16, 19, 20, 22, 23, 42, 56, 60, 61, 66, 68, 70, 78, 82, 83, 84, 87, 96, 100, 103, 107, 114, 119, 124, 128, 134, 138, 143, 179, 183, 196, 202, 203, 204, 205, 206, 207, 208, 217, 222, 224, 225, 226, 227, 287], "shell": [1, 12, 88, 141, 208], "tutori": [1, 7, 11, 12, 16, 17, 32, 76, 124, 141, 197, 208, 209, 225, 248, 278, 281, 283, 284, 285, 286, 287], "com": [1, 3, 4, 5, 6, 7, 10, 20, 32, 34, 38, 40, 51, 53, 54, 60, 61, 63, 64, 65, 66, 68, 70, 76, 77, 85, 87, 91, 96, 100, 108, 194, 203, 212, 214, 217, 218, 221, 222, 225, 228, 229, 247, 250, 282], "microsoftdoc": 1, "wsl": 1, "blob": [1, 87], "win10": 1, "md": [1, 4, 7, 238, 245], "In": [1, 3, 4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 25, 28, 30, 32, 38, 40, 41, 42, 43, 44, 49, 50, 51, 52, 59, 60, 61, 62, 64, 65, 66, 68, 73, 75, 76, 77, 78, 85, 87, 88, 89, 90, 91, 93, 96, 97, 100, 102, 104, 106, 110, 114, 118, 119, 124, 127, 128, 129, 134, 135, 136, 137, 138, 139, 141, 142, 160, 162, 163, 164, 169, 173, 174, 177, 179, 188, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 208, 209, 216, 217, 218, 219, 221, 222, 225, 226, 227, 228, 229, 230, 233, 235, 238, 240, 242, 244, 245, 247, 248, 251, 254, 258, 259, 261, 263, 275, 278, 279, 280, 281, 282, 285, 286, 287], "command": [1, 3, 5, 6, 11, 12, 24, 28, 32, 42, 64, 88, 124, 136, 141, 189, 195, 209, 240, 241, 285], "prompt": [1, 6, 11], "transfer": [1, 107, 108, 110, 143, 228], "html": [1, 3, 4, 6, 7, 38, 42, 44, 52, 53, 54, 60, 61, 63, 65, 66, 68, 70, 76, 77, 87, 88, 96, 100, 108, 203, 209, 212, 214, 217, 218, 222, 225, 229, 241, 243, 245, 247, 248, 282], "note": [1, 3, 6, 7, 10, 11, 12, 14, 16, 18, 19, 22, 23, 24, 26, 27, 29, 34, 35, 37, 38, 39, 40, 41, 42, 43, 50, 51, 52, 53, 56, 58, 59, 61, 64, 65, 66, 67, 68, 70, 71, 73, 74, 75, 76, 77, 85, 87, 88, 90, 91, 93, 96, 100, 102, 110, 111, 115, 116, 118, 119, 120, 123, 124, 126, 128, 131, 139, 141, 147, 150, 158, 168, 169, 171, 173, 174, 175, 177, 183, 184, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 204, 205, 206, 208, 209, 210, 211, 212, 215, 217, 219, 221, 222, 224, 225, 226, 227, 228, 229, 234, 235, 238, 240, 241, 242, 243, 244, 245, 247, 248, 250, 251, 259, 261, 263, 275, 276, 277, 279, 280, 281, 282, 286], "via": [1, 3, 11, 16, 20, 26, 30, 32, 35, 36, 37, 51, 52, 60, 65, 68, 85, 87, 90, 96, 100, 101, 102, 103, 184, 194, 196, 200, 202, 204, 205, 208, 209, 228, 238, 241, 242, 254, 263, 281], "want": [1, 3, 4, 5, 6, 10, 11, 12, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 30, 32, 38, 40, 42, 43, 44, 52, 60, 61, 67, 72, 74, 76, 79, 85, 87, 91, 93, 96, 97, 100, 101, 108, 110, 113, 120, 124, 141, 157, 167, 168, 171, 174, 177, 179, 186, 188, 192, 193, 195, 197, 198, 199, 202, 204, 205, 206, 208, 209, 210, 216, 217, 219, 221, 222, 225, 226, 227, 228, 229, 235, 238, 240, 242, 244, 247, 248, 259, 261, 264, 275, 276, 278, 280, 281, 282, 283, 285, 286], "directori": [1, 3, 6, 7, 32, 37, 42, 225, 240, 241, 250], "folder": 1, "prepend": [1, 41, 51, 96, 110, 181, 209, 235], "mnt": 1, "navig": 1, "better": [1, 3, 4, 6, 10, 11, 12, 18, 19, 20, 41, 42, 52, 60, 64, 68, 87, 90, 110, 124, 154, 178, 182, 195, 198, 199, 200, 212, 216, 217, 218, 219, 225, 226, 227, 228, 229, 241, 247, 248, 280, 286], "compat": [1, 3, 4, 15, 42, 60, 68, 88, 91, 96, 101, 114, 176, 181, 189, 195, 198, 200, 204, 205, 209, 229, 233, 236, 240, 242, 248], "than": [1, 3, 4, 6, 7, 10, 11, 12, 14, 16, 17, 18, 19, 20, 23, 25, 26, 27, 28, 29, 30, 33, 38, 42, 43, 45, 51, 52, 53, 59, 60, 61, 64, 65, 66, 68, 69, 74, 75, 76, 78, 82, 85, 87, 89, 90, 91, 93, 96, 97, 99, 100, 101, 102, 106, 108, 110, 114, 119, 123, 124, 128, 131, 148, 154, 168, 171, 172, 174, 183, 193, 194, 197, 198, 199, 200, 202, 205, 206, 207, 209, 212, 216, 217, 218, 219, 221, 222, 224, 225, 226, 227, 228, 229, 236, 241, 242, 244, 247, 248, 250, 251, 275, 276, 278, 279, 280, 281, 282, 284, 286], "cygwin": 1, "msys2": 1, "more": [1, 3, 4, 6, 7, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 37, 38, 40, 41, 42, 43, 46, 50, 51, 52, 57, 59, 60, 61, 62, 64, 65, 66, 67, 68, 72, 73, 74, 75, 76, 77, 78, 82, 85, 87, 90, 91, 93, 94, 96, 97, 99, 100, 101, 102, 108, 110, 114, 118, 119, 120, 124, 126, 128, 130, 132, 134, 136, 137, 138, 139, 141, 143, 146, 158, 162, 163, 168, 171, 172, 173, 174, 179, 183, 184, 188, 189, 193, 194, 195, 196, 197, 198, 199, 200, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 218, 219, 221, 222, 225, 226, 227, 228, 229, 240, 242, 243, 244, 247, 248, 250, 254, 258, 262, 269, 275, 276, 278, 279, 281, 282, 284, 285, 286, 287], "partial": [1, 11, 40, 51, 58, 59, 60, 62, 64, 65, 66, 100, 102, 141, 168, 184, 188, 190, 200, 203, 206, 209, 211, 218, 221, 225, 226, 230, 236, 254, 261, 276, 286], "workflow": [1, 3, 5, 8, 9, 27, 31, 141, 199, 242, 248, 283], "onli": [1, 4, 6, 7, 10, 11, 12, 14, 15, 16, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 46, 49, 50, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 70, 71, 73, 74, 76, 77, 78, 83, 85, 87, 88, 89, 90, 91, 96, 97, 100, 101, 102, 106, 108, 110, 116, 118, 124, 126, 127, 128, 130, 131, 133, 135, 136, 138, 139, 142, 147, 149, 168, 169, 173, 174, 176, 178, 179, 183, 184, 186, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 204, 205, 206, 208, 209, 210, 211, 212, 215, 216, 217, 218, 219, 221, 222, 225, 226, 227, 229, 230, 233, 234, 235, 236, 238, 240, 241, 242, 243, 244, 245, 247, 248, 249, 254, 257, 259, 261, 263, 264, 275, 276, 278, 279, 281, 282, 286, 287], "viabl": [1, 61], "64": [1, 45, 51, 100, 140, 194, 208, 218, 227, 229, 240, 247, 250, 285], "bit": [1, 16, 20, 41, 42, 44, 60, 61, 63, 90, 91, 96, 100, 168, 179, 196, 205, 219, 222, 228, 240, 247, 258, 259, 285], "chocolatei": 1, "choco": 1, "rsvg": 1, "convert": [1, 3, 4, 10, 11, 12, 14, 18, 19, 20, 24, 26, 27, 34, 38, 42, 44, 52, 56, 60, 61, 64, 65, 66, 74, 75, 77, 80, 81, 84, 88, 90, 91, 96, 99, 100, 102, 110, 168, 171, 177, 178, 179, 181, 188, 195, 196, 198, 200, 202, 204, 205, 206, 207, 209, 210, 211, 217, 218, 219, 221, 222, 225, 226, 228, 229, 230, 231, 234, 240, 241, 247, 248, 250, 252, 257, 272, 277, 278, 281, 286], "chose": [1, 61], "rm": [1, 42], "absolut": [1, 10, 38, 39, 42, 59, 60, 66, 68, 75, 85, 87, 91, 96, 112, 172, 200, 204, 205, 219, 221, 224, 229, 240, 263, 264, 265], "Be": [1, 4, 6, 20, 40, 60, 90, 96, 202, 225, 228, 236, 248], "sure": [1, 4, 6, 7, 20, 42, 51, 60, 72, 123, 124, 154, 179, 205, 206, 216, 225, 227, 228, 241, 247, 278, 281, 286], "substitut": [1, 10, 11, 12, 16, 19, 24, 28, 30, 42, 60, 61, 66, 68, 85, 87, 96, 101, 102, 110, 119, 120, 124, 126, 128, 138, 163, 172, 174, 177, 184, 186, 188, 206, 207, 210, 211, 216, 219, 221, 222, 225, 226, 227, 228, 248, 257, 277, 278], "actual": [1, 3, 4, 6, 7, 10, 11, 12, 16, 18, 19, 20, 41, 42, 43, 49, 51, 58, 60, 61, 68, 72, 85, 87, 89, 93, 96, 100, 110, 114, 124, 126, 136, 137, 138, 189, 196, 199, 204, 209, 217, 219, 221, 222, 225, 228, 236, 240, 241, 244, 245, 247, 248, 280], "filesystem": 1, "from": [1, 3, 4, 5, 6, 7, 11, 14, 15, 16, 18, 19, 20, 23, 27, 28, 29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 118, 119, 121, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 166, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 221, 222, 224, 225, 226, 227, 228, 229, 230, 233, 234, 235, 236, 238, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 252, 254, 256, 257, 258, 259, 260, 261, 263, 264, 272, 275, 276, 278, 280, 281, 282, 285, 286, 287], "ani": [1, 3, 4, 5, 6, 7, 10, 11, 12, 14, 15, 18, 19, 20, 23, 24, 25, 28, 32, 35, 37, 38, 39, 40, 41, 42, 43, 49, 50, 51, 52, 58, 59, 60, 61, 62, 64, 65, 66, 68, 70, 71, 72, 75, 76, 77, 85, 87, 88, 90, 91, 94, 96, 97, 100, 102, 103, 104, 106, 110, 112, 115, 118, 119, 120, 121, 123, 124, 134, 137, 138, 139, 142, 143, 147, 160, 163, 168, 169, 172, 174, 176, 179, 183, 184, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 204, 205, 206, 209, 210, 215, 216, 217, 218, 219, 221, 222, 225, 226, 227, 229, 231, 234, 235, 240, 241, 243, 244, 245, 247, 248, 254, 258, 259, 260, 261, 263, 264, 275, 276, 278, 281, 282, 285, 286, 287], "makefil": 1, "subdirectori": 1, "ha": [1, 3, 4, 6, 7, 10, 11, 12, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28, 29, 30, 38, 40, 41, 42, 43, 44, 49, 50, 51, 52, 54, 56, 59, 60, 61, 62, 64, 65, 66, 67, 68, 70, 72, 73, 75, 76, 77, 83, 85, 87, 89, 90, 91, 93, 96, 97, 99, 100, 101, 103, 104, 106, 110, 111, 115, 118, 119, 124, 126, 128, 134, 139, 141, 147, 148, 158, 159, 168, 171, 176, 179, 183, 184, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 214, 216, 217, 219, 221, 222, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 240, 241, 242, 243, 244, 245, 247, 250, 254, 256, 258, 259, 261, 263, 264, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], "collect": [1, 3, 7, 17, 41, 42, 51, 60, 77, 87, 100, 103, 110, 123, 132, 141, 174, 181, 194, 200, 205, 218, 219, 221, 225, 229, 240, 247], "offici": [1, 12, 32, 60, 114, 141, 183, 193, 228, 248, 284], "which": [1, 2, 3, 4, 6, 7, 10, 11, 12, 16, 17, 18, 19, 20, 22, 24, 26, 27, 28, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 49, 50, 51, 52, 53, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 73, 74, 75, 76, 79, 82, 83, 84, 85, 87, 88, 89, 90, 91, 93, 94, 96, 99, 100, 102, 103, 104, 106, 107, 108, 110, 111, 112, 114, 115, 116, 118, 119, 121, 123, 124, 126, 127, 129, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 145, 147, 148, 160, 163, 169, 170, 171, 172, 174, 178, 179, 180, 183, 184, 186, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 204, 205, 206, 207, 208, 210, 211, 212, 215, 216, 217, 218, 219, 221, 222, 224, 225, 226, 227, 228, 229, 233, 235, 240, 241, 242, 243, 244, 245, 247, 248, 250, 254, 256, 259, 263, 264, 275, 276, 278, 279, 280, 281, 282, 283, 285, 286, 287], "gener": [1, 4, 8, 10, 11, 12, 14, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 32, 36, 38, 39, 40, 41, 43, 44, 45, 48, 49, 51, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 70, 74, 76, 78, 83, 85, 87, 88, 89, 90, 93, 96, 100, 101, 102, 110, 114, 115, 118, 119, 120, 123, 124, 126, 127, 128, 129, 131, 133, 134, 135, 137, 138, 139, 141, 142, 146, 157, 158, 159, 160, 163, 168, 169, 172, 173, 174, 179, 181, 183, 184, 185, 188, 189, 190, 192, 194, 195, 196, 197, 198, 200, 202, 205, 206, 207, 208, 209, 210, 211, 215, 218, 219, 221, 222, 224, 225, 226, 227, 229, 234, 235, 241, 242, 244, 245, 246, 247, 248, 254, 258, 259, 261, 262, 263, 269, 276, 278, 279, 280, 281, 282, 286, 287], "svg": [1, 88, 189], "store": [1, 5, 10, 12, 18, 41, 42, 50, 51, 60, 82, 84, 93, 96, 100, 102, 115, 119, 121, 123, 124, 139, 168, 174, 188, 192, 193, 195, 196, 199, 204, 205, 206, 216, 219, 230, 233, 234, 242, 243, 244, 247, 259, 261, 281], "_build": [1, 6], "same": [1, 4, 6, 7, 10, 11, 12, 16, 18, 19, 20, 23, 25, 28, 34, 35, 36, 37, 38, 40, 41, 42, 49, 50, 51, 52, 56, 59, 60, 61, 62, 65, 67, 68, 70, 73, 74, 75, 76, 77, 82, 83, 85, 87, 89, 90, 91, 93, 96, 100, 102, 103, 104, 110, 111, 114, 115, 118, 122, 124, 128, 131, 132, 135, 138, 139, 158, 160, 168, 171, 172, 174, 176, 177, 179, 181, 182, 183, 184, 186, 189, 190, 192, 193, 195, 196, 197, 198, 199, 200, 202, 204, 205, 206, 207, 208, 209, 210, 216, 217, 218, 219, 221, 222, 225, 226, 227, 228, 229, 230, 234, 235, 236, 238, 240, 242, 243, 244, 245, 247, 248, 250, 254, 256, 258, 259, 263, 276, 278, 281, 282, 285, 286], "inform": [1, 3, 4, 6, 7, 11, 12, 15, 18, 19, 28, 30, 31, 37, 38, 41, 42, 43, 46, 51, 52, 58, 60, 61, 65, 68, 72, 85, 87, 89, 93, 96, 101, 104, 115, 116, 118, 119, 123, 124, 126, 134, 135, 136, 138, 139, 141, 142, 169, 174, 179, 183, 184, 189, 193, 195, 199, 204, 205, 209, 210, 216, 219, 221, 222, 227, 228, 229, 233, 234, 235, 240, 241, 242, 243, 244, 254, 259, 261, 286], "onc": [1, 4, 11, 12, 18, 19, 20, 42, 44, 51, 56, 60, 61, 65, 68, 76, 85, 87, 101, 104, 116, 118, 134, 138, 179, 184, 186, 193, 195, 197, 199, 205, 209, 210, 218, 219, 221, 225, 228, 235, 247, 258, 275, 276, 286, 287], "under": [1, 3, 4, 6, 11, 12, 18, 19, 36, 37, 39, 40, 42, 43, 50, 51, 56, 58, 68, 78, 85, 87, 89, 90, 96, 100, 102, 103, 104, 143, 169, 194, 196, 197, 204, 205, 209, 216, 217, 219, 222, 225, 227, 228, 229, 235, 238, 280, 286], "prefer": [1, 3, 6, 10, 11, 18, 20, 26, 27, 28, 42, 52, 59, 60, 68, 100, 102, 118, 124, 174, 179, 184, 195, 198, 200, 202, 204, 209, 217, 221, 225, 227, 234, 240, 242, 245, 248, 280, 282], "web": [1, 7, 61, 72, 141, 191, 203, 222], "browser": 1, "drop": [1, 66, 87, 101, 131, 200, 202], "menu": 1, "index": [1, 3, 10, 12, 20, 28, 29, 30, 34, 42, 49, 51, 52, 56, 59, 60, 61, 62, 65, 66, 68, 71, 76, 85, 87, 90, 91, 93, 96, 99, 100, 110, 123, 124, 141, 142, 143, 145, 147, 148, 158, 167, 169, 171, 174, 179, 184, 195, 196, 200, 204, 205, 206, 209, 214, 215, 219, 227, 229, 230, 232, 233, 235, 236, 241, 269], "told": 1, "how": [1, 3, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 22, 28, 41, 42, 51, 52, 59, 60, 66, 67, 68, 72, 83, 87, 90, 91, 93, 96, 100, 102, 103, 114, 118, 119, 124, 125, 131, 136, 137, 139, 141, 145, 146, 162, 166, 169, 170, 171, 176, 177, 184, 192, 195, 196, 199, 200, 202, 204, 208, 209, 212, 216, 217, 219, 221, 222, 225, 226, 227, 229, 235, 240, 241, 242, 243, 245, 247, 248, 259, 276, 278, 280, 281, 282, 283, 285, 286], "load": [1, 42, 60, 88, 103, 104, 106, 115, 118, 119, 123, 127, 129, 142, 154, 189], "ll": [1, 41, 58, 96, 128, 192, 193, 238], "manual": [1, 3, 4, 7, 10, 11, 20, 24, 42, 43, 51, 64, 70, 87, 88, 102, 110, 123, 124, 127, 138, 142, 195, 202, 209, 225, 227, 228, 243, 276, 286], "repeat": [1, 11, 12, 51, 54, 59, 60, 66, 68, 87, 89, 91, 96, 100, 102, 158, 160, 174, 195, 196, 197, 202, 204, 205, 209, 215, 225, 229, 233, 234, 241, 243, 247, 286], "step": [1, 4, 5, 20, 21, 31, 40, 42, 51, 55, 56, 59, 60, 61, 68, 84, 85, 87, 96, 100, 101, 119, 131, 134, 136, 141, 142, 176, 188, 193, 194, 195, 199, 200, 202, 205, 209, 210, 211, 214, 217, 218, 219, 221, 222, 225, 227, 229, 234, 241, 247, 248, 276], "reload": 1, "There": [1, 3, 4, 5, 6, 7, 10, 11, 12, 15, 18, 19, 20, 24, 25, 28, 29, 42, 43, 51, 52, 53, 54, 57, 59, 60, 61, 64, 65, 68, 84, 85, 87, 88, 89, 90, 93, 96, 100, 103, 104, 106, 110, 114, 123, 134, 136, 138, 147, 164, 169, 183, 184, 189, 192, 193, 195, 199, 200, 201, 202, 204, 205, 206, 209, 210, 211, 217, 218, 219, 221, 222, 225, 227, 228, 229, 234, 243, 244, 247, 248, 250, 259, 275, 276, 278, 280, 281, 285, 286], "altern": [1, 4, 6, 10, 11, 12, 19, 20, 25, 32, 42, 48, 51, 52, 59, 60, 64, 65, 66, 67, 68, 91, 93, 97, 101, 124, 136, 138, 184, 192, 194, 195, 197, 198, 199, 204, 205, 209, 214, 216, 218, 227, 228, 230, 247, 278, 280, 282], "approach": [1, 16, 24, 25, 26, 28, 29, 30, 41, 59, 60, 87, 110, 128, 134, 199, 202, 203, 206, 217, 226, 227, 229, 241, 244, 247, 276, 282], "set": [1, 2, 3, 4, 6, 7, 11, 12, 14, 16, 17, 18, 19, 23, 24, 28, 30, 33, 36, 40, 41, 42, 43, 48, 49, 51, 52, 53, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 73, 75, 77, 78, 79, 82, 83, 85, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 100, 102, 103, 104, 110, 114, 118, 119, 123, 124, 126, 127, 128, 133, 135, 136, 137, 138, 141, 142, 158, 164, 169, 174, 176, 179, 181, 182, 183, 184, 186, 188, 189, 190, 192, 195, 196, 197, 198, 199, 202, 204, 205, 208, 209, 210, 211, 216, 218, 219, 221, 222, 224, 225, 226, 227, 229, 233, 234, 235, 238, 240, 241, 242, 243, 247, 248, 254, 257, 259, 265, 268, 275, 277, 286], "up": [1, 3, 4, 10, 11, 16, 18, 19, 20, 32, 37, 40, 42, 51, 52, 54, 60, 61, 62, 64, 65, 66, 68, 69, 76, 77, 81, 85, 87, 88, 90, 91, 96, 100, 101, 103, 112, 114, 121, 123, 126, 127, 131, 133, 138, 139, 141, 142, 154, 169, 171, 188, 194, 195, 196, 199, 200, 204, 206, 209, 210, 211, 216, 218, 219, 221, 222, 225, 226, 227, 228, 241, 242, 243, 244, 245, 248, 277, 278, 281, 282, 284], "monitor": 1, "automat": [1, 3, 4, 6, 7, 10, 11, 12, 14, 18, 24, 25, 30, 41, 42, 43, 52, 60, 62, 63, 64, 65, 66, 68, 73, 75, 79, 85, 88, 90, 100, 102, 103, 119, 124, 126, 132, 160, 162, 163, 172, 174, 188, 192, 195, 196, 199, 200, 204, 205, 206, 209, 212, 215, 216, 218, 219, 221, 222, 225, 227, 228, 234, 235, 240, 241, 242, 245, 259, 264, 276, 278, 280, 281, 285, 286, 287], "detect": [1, 3, 33, 40, 93, 96, 100, 195, 199, 209, 225, 226, 228, 230, 247, 285], "procedur": [1, 24, 26, 43, 45, 51, 57, 58, 59, 87, 96, 119, 139, 202, 204, 221, 222, 227, 228, 254, 282], "again": [1, 4, 12, 16, 19, 52, 60, 75, 100, 124, 126, 139, 169, 170, 184, 192, 196, 197, 204, 212, 219, 225, 238, 258, 278, 286], "whether": [1, 4, 10, 11, 18, 19, 20, 26, 28, 29, 30, 40, 41, 42, 46, 51, 59, 60, 61, 67, 68, 72, 75, 87, 88, 90, 91, 96, 100, 106, 114, 119, 120, 123, 124, 162, 181, 186, 193, 195, 198, 199, 200, 204, 205, 209, 212, 216, 217, 221, 222, 225, 227, 228, 229, 230, 240, 242, 247, 248, 254, 257, 278, 282], "8000": [1, 103], "80": [1, 4, 6, 12, 20, 40, 51, 60, 63, 87, 96, 100, 103, 104, 108, 205, 208, 225, 229, 245, 247], "localhost": 1, "differ": [1, 4, 6, 7, 10, 11, 12, 14, 15, 17, 19, 20, 23, 24, 25, 26, 27, 28, 29, 33, 41, 42, 43, 49, 50, 51, 52, 56, 59, 60, 61, 62, 64, 65, 66, 68, 71, 73, 75, 76, 80, 82, 84, 85, 87, 88, 89, 90, 93, 96, 100, 101, 102, 103, 108, 114, 115, 121, 124, 126, 130, 138, 139, 142, 146, 147, 159, 160, 168, 169, 172, 174, 176, 179, 183, 184, 185, 188, 189, 190, 193, 195, 196, 197, 198, 200, 202, 204, 205, 206, 208, 209, 210, 211, 212, 214, 216, 217, 218, 221, 222, 225, 226, 227, 228, 229, 230, 233, 235, 238, 240, 241, 242, 243, 244, 245, 247, 248, 254, 257, 261, 263, 277, 278, 280, 281, 282, 285, 286], "port": [1, 102, 126, 146], "finish": [1, 42, 43, 168, 243, 283], "stop": [1, 4, 42, 43, 52, 60, 96, 100, 195, 215, 217, 225, 229], "ctrl": 1, "detach": 1, "mode": [1, 2, 28, 60, 88, 102, 146, 169, 189, 205, 209, 240, 251], "d": [1, 6, 7, 10, 11, 12, 16, 20, 22, 24, 26, 34, 41, 44, 49, 51, 52, 53, 55, 56, 58, 59, 60, 61, 62, 65, 68, 70, 74, 78, 83, 85, 87, 89, 90, 91, 92, 93, 96, 97, 99, 100, 102, 103, 106, 118, 119, 141, 143, 146, 147, 153, 163, 171, 173, 174, 179, 183, 184, 186, 192, 193, 194, 195, 197, 198, 199, 200, 202, 203, 204, 205, 206, 209, 211, 215, 219, 221, 222, 225, 226, 227, 228, 229, 230, 231, 233, 235, 247, 250, 254, 256, 257, 258, 259, 263, 271, 282, 287], "name": [1, 3, 4, 5, 6, 7, 10, 11, 12, 18, 20, 29, 33, 36, 37, 41, 42, 43, 47, 50, 53, 56, 59, 60, 61, 62, 65, 66, 67, 68, 70, 73, 85, 87, 88, 89, 93, 96, 100, 102, 103, 106, 115, 118, 121, 123, 124, 126, 141, 145, 154, 169, 176, 178, 179, 180, 181, 182, 183, 184, 186, 188, 190, 193, 195, 196, 197, 199, 200, 202, 204, 206, 209, 215, 219, 221, 222, 225, 226, 228, 229, 234, 235, 238, 240, 241, 242, 243, 248, 250, 251, 252, 254, 258, 261, 266, 275, 278, 281, 282, 286], "livehtml": 1, "simpli": [1, 3, 4, 7, 18, 19, 23, 24, 38, 43, 59, 60, 62, 66, 70, 91, 93, 96, 100, 102, 103, 106, 111, 115, 124, 126, 138, 164, 169, 179, 190, 193, 199, 205, 206, 217, 218, 219, 225, 228, 245, 247, 248, 261], "should": [1, 3, 5, 6, 7, 8, 10, 11, 12, 15, 18, 19, 20, 28, 30, 33, 35, 37, 40, 41, 42, 43, 51, 52, 53, 54, 56, 59, 60, 61, 63, 64, 66, 68, 70, 71, 72, 73, 74, 75, 77, 82, 83, 84, 85, 87, 88, 89, 90, 91, 93, 96, 100, 102, 103, 108, 110, 114, 119, 124, 126, 128, 136, 138, 139, 141, 142, 143, 154, 158, 162, 164, 166, 168, 169, 172, 174, 176, 177, 179, 180, 184, 189, 192, 193, 195, 196, 197, 198, 199, 200, 202, 204, 205, 208, 209, 211, 212, 215, 216, 217, 218, 219, 221, 222, 224, 225, 227, 228, 229, 233, 234, 238, 240, 241, 242, 243, 244, 245, 247, 248, 250, 254, 258, 275, 276, 278, 279, 282], "tab": [1, 10, 12, 56, 141], "show": [1, 3, 4, 6, 7, 12, 15, 16, 17, 18, 19, 20, 42, 52, 59, 60, 64, 66, 83, 85, 87, 96, 100, 103, 104, 108, 114, 124, 130, 135, 139, 141, 169, 173, 177, 179, 184, 192, 193, 195, 196, 199, 200, 202, 204, 205, 209, 210, 212, 216, 217, 218, 219, 221, 222, 225, 227, 229, 230, 238, 241, 242, 245, 247, 248, 278, 280, 282, 285], "necessari": [1, 3, 4, 6, 8, 10, 12, 18, 20, 31, 40, 41, 51, 52, 60, 70, 85, 87, 90, 96, 100, 119, 126, 134, 195, 197, 199, 204, 205, 209, 212, 218, 221, 225, 226, 227, 228, 229, 230, 235, 240, 242, 247, 248, 254, 279, 284], "major": [1, 3, 4, 7, 10, 28, 30, 70, 114, 234, 280, 286], "contributor": [1, 3, 7, 10, 20], "action": [1, 3, 7, 51, 89, 166, 169, 179, 205, 221, 228], "pull": [1, 3, 4, 5, 6, 7, 9, 10, 20, 32, 42, 60, 65, 68, 173, 210, 221, 225, 228, 282, 286], "request": [1, 3, 4, 6, 7, 9, 10, 18, 28, 32, 40, 60, 64, 76, 85, 100, 124, 174, 202, 205, 233, 241], "releas": [1, 7, 10, 60, 87, 91, 102, 138, 195, 234, 245, 248, 281], "includ": [1, 3, 4, 6, 7, 9, 10, 11, 12, 18, 20, 24, 25, 28, 29, 32, 37, 38, 40, 41, 42, 52, 56, 59, 60, 61, 62, 64, 65, 66, 68, 72, 78, 85, 87, 90, 91, 93, 95, 96, 100, 101, 102, 112, 114, 123, 124, 126, 128, 129, 134, 136, 138, 141, 154, 158, 163, 168, 171, 172, 182, 190, 193, 197, 200, 201, 202, 204, 205, 208, 209, 210, 215, 216, 217, 219, 221, 224, 225, 226, 227, 229, 232, 235, 238, 240, 242, 243, 244, 245, 247, 254, 256, 258, 263, 265, 276, 280, 281, 282, 286, 287], "fail": [1, 3, 4, 6, 7, 10, 18, 19, 20, 28, 42, 51, 52, 56, 59, 60, 64, 66, 84, 85, 87, 88, 96, 97, 100, 102, 126, 164, 169, 189, 195, 198, 199, 200, 202, 204, 205, 209, 216, 219, 225, 227, 229, 238, 240, 247, 248, 282], "99": [1, 42, 60, 61, 96, 100, 202, 203], "due": [1, 6, 10, 16, 20, 27, 40, 42, 50, 51, 60, 62, 77, 96, 100, 103, 106, 124, 126, 138, 147, 174, 190, 193, 199, 205, 209, 212, 222, 224, 226, 229, 245, 257, 263, 286], "bad": [1, 10, 59, 100, 176, 209], "math": [1, 3, 6, 20, 30, 34, 38, 41, 43, 51, 60, 65, 68, 70, 87, 96, 100, 101, 124, 134, 190, 195, 200, 203, 208, 209, 225, 226, 229, 241, 242, 248, 259, 260, 261, 262, 263, 275, 276, 280], "format": [1, 4, 8, 11, 14, 16, 25, 29, 41, 52, 61, 82, 83, 87, 90, 96, 99, 100, 103, 123, 142, 147, 158, 168, 195, 198, 199, 204, 205, 207, 209, 219, 225, 228, 240, 250, 254, 258, 279, 282, 285], "doubl": [1, 6, 7, 40, 42, 56, 60, 61, 65, 96, 102, 118, 133, 134, 192, 199, 209, 218, 219, 242, 286], "check": [1, 3, 4, 6, 7, 11, 12, 14, 15, 16, 18, 19, 20, 24, 30, 36, 37, 40, 41, 42, 46, 49, 51, 52, 53, 58, 59, 60, 61, 65, 68, 72, 83, 85, 89, 90, 91, 93, 96, 97, 100, 110, 115, 116, 124, 138, 141, 154, 162, 174, 176, 177, 182, 190, 195, 196, 198, 199, 200, 202, 204, 205, 211, 217, 219, 221, 225, 226, 227, 228, 229, 233, 234, 238, 240, 242, 245, 247, 257, 261, 278, 286], "ad": [1, 6, 7, 10, 18, 23, 25, 34, 41, 42, 44, 50, 51, 60, 61, 71, 75, 82, 85, 89, 100, 102, 106, 114, 115, 118, 124, 125, 141, 148, 176, 179, 185, 194, 195, 204, 206, 208, 209, 211, 219, 222, 225, 228, 229, 231, 234, 235, 240, 257, 278], "correctli": [1, 3, 4, 6, 7, 10, 19, 20, 40, 64, 85, 88, 96, 124, 126, 138, 209, 216, 222, 225], "backtick": [1, 6, 7], "code": [1, 6, 8, 9, 11, 12, 16, 18, 19, 20, 24, 27, 29, 30, 32, 33, 43, 47, 51, 54, 55, 60, 61, 62, 64, 68, 72, 85, 87, 88, 96, 100, 101, 102, 115, 118, 124, 126, 132, 134, 135, 139, 141, 142, 168, 174, 183, 189, 192, 194, 195, 196, 197, 199, 202, 208, 219, 221, 225, 227, 228, 229, 234, 237, 238, 240, 241, 242, 245, 246, 247, 248, 258, 266, 273, 278, 280, 283, 285], "singl": [1, 4, 7, 10, 11, 16, 18, 20, 22, 33, 41, 42, 44, 51, 60, 61, 65, 66, 68, 73, 74, 76, 77, 78, 85, 87, 90, 91, 96, 99, 102, 110, 111, 116, 118, 128, 135, 154, 158, 160, 168, 171, 174, 181, 184, 188, 195, 196, 198, 199, 200, 202, 204, 205, 209, 210, 211, 218, 219, 221, 222, 224, 225, 226, 227, 228, 229, 230, 234, 240, 242, 244, 247, 248, 250, 276, 278, 281, 282, 287], "render": [1, 3, 6, 7, 42, 60, 88, 189, 195, 209, 285], "resourc": [1, 6, 7, 20, 96, 203, 225, 241, 251], "style": [1, 8, 41, 60, 88, 168, 189, 195, 209, 228, 285], "guid": [1, 3, 8, 9, 11, 13, 20, 22, 26, 32, 41, 60, 67, 124, 138, 209, 222, 224, 227, 228, 235, 279, 283, 284, 287], "tip": [1, 6, 60, 138, 225, 226, 286], "few": [1, 3, 4, 10, 11, 18, 24, 30, 38, 50, 52, 60, 61, 87, 88, 100, 101, 126, 134, 177, 183, 189, 192, 193, 196, 204, 209, 217, 218, 219, 225, 228, 229, 242, 247, 286], "extra": [1, 10, 42, 60, 61, 100, 101, 132, 179, 190, 202, 209, 219, 225, 240, 241, 242, 261], "xelatex": 1, "latexmk": 1, "chrome": 1, "chromium": 1, "On": [1, 10, 18, 37, 53, 60, 62, 68, 87, 90, 100, 124, 179, 190, 199, 202, 203, 204, 205, 225, 227, 244, 248, 261, 263], "xetex": 1, "font": [1, 88, 189, 209], "lmodern": 1, "cask": 1, "tap": 1, "dejavu": 1, "strawberryperl": 1, "miktex": [1, 3], "dejavufont": 1, "appdata": 1, "microsoft": 1, "right": [1, 4, 6, 7, 10, 12, 16, 20, 22, 23, 26, 40, 42, 43, 51, 52, 56, 60, 61, 63, 65, 66, 68, 76, 77, 85, 87, 90, 91, 96, 99, 100, 102, 103, 104, 110, 119, 123, 124, 138, 139, 141, 142, 146, 153, 158, 160, 162, 163, 168, 171, 174, 184, 190, 193, 194, 195, 196, 198, 204, 205, 206, 207, 209, 211, 212, 216, 217, 219, 225, 226, 228, 229, 240, 242, 244, 247, 261, 276, 280, 282, 286], "click": 1, "result": [1, 3, 6, 10, 11, 12, 14, 15, 16, 18, 19, 20, 30, 34, 35, 36, 37, 38, 40, 41, 42, 50, 51, 52, 56, 59, 60, 61, 62, 64, 66, 68, 72, 77, 78, 82, 84, 85, 87, 89, 90, 91, 93, 96, 99, 100, 101, 102, 103, 110, 111, 114, 115, 116, 120, 124, 128, 134, 138, 141, 159, 166, 168, 169, 171, 173, 174, 176, 177, 179, 183, 184, 193, 195, 196, 199, 200, 202, 203, 204, 205, 206, 207, 209, 211, 216, 217, 218, 219, 221, 222, 224, 225, 226, 227, 228, 229, 230, 233, 234, 236, 240, 241, 242, 244, 245, 247, 248, 250, 254, 257, 259, 278, 280, 281, 282, 286], "version": [1, 3, 4, 5, 6, 7, 12, 18, 19, 20, 30, 31, 32, 35, 41, 42, 51, 52, 58, 60, 61, 65, 66, 68, 73, 87, 90, 91, 92, 94, 96, 98, 100, 113, 115, 118, 124, 158, 172, 176, 184, 194, 195, 196, 199, 200, 202, 204, 205, 209, 212, 221, 227, 229, 239, 240, 242, 243, 244, 245, 247, 248, 252, 254, 260, 278, 281, 282], "where": [1, 4, 5, 6, 7, 10, 11, 12, 16, 18, 19, 20, 24, 25, 26, 28, 30, 33, 34, 38, 40, 41, 42, 43, 49, 50, 51, 52, 54, 56, 58, 59, 60, 61, 62, 64, 65, 66, 68, 70, 73, 75, 76, 77, 78, 82, 83, 84, 85, 87, 89, 90, 91, 92, 93, 96, 100, 103, 106, 107, 110, 114, 118, 119, 120, 121, 123, 124, 126, 137, 138, 139, 141, 142, 148, 158, 163, 169, 171, 173, 174, 175, 176, 177, 184, 188, 190, 192, 193, 194, 196, 197, 198, 199, 200, 202, 204, 205, 206, 207, 209, 210, 211, 212, 215, 216, 217, 218, 219, 221, 222, 225, 226, 227, 229, 230, 233, 235, 240, 241, 242, 243, 247, 248, 250, 254, 261, 263, 276, 278, 280, 282, 286, 287], "g": [1, 3, 4, 5, 7, 10, 12, 18, 19, 20, 27, 30, 40, 41, 42, 43, 45, 48, 50, 51, 52, 56, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 70, 72, 76, 77, 78, 83, 86, 87, 89, 90, 91, 96, 100, 102, 103, 110, 111, 115, 118, 121, 123, 124, 126, 128, 129, 131, 132, 133, 138, 139, 141, 142, 154, 158, 163, 169, 171, 172, 174, 177, 179, 180, 184, 190, 195, 196, 197, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216, 217, 218, 221, 222, 225, 226, 227, 228, 229, 230, 233, 234, 235, 240, 241, 242, 243, 245, 247, 248, 249, 250, 263, 266, 276, 281, 285, 286, 287], "1": [1, 3, 4, 7, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 106, 108, 110, 111, 112, 113, 114, 115, 116, 118, 119, 121, 123, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 139, 141, 142, 143, 145, 146, 147, 148, 149, 153, 156, 157, 158, 159, 160, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 183, 184, 185, 186, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 250, 252, 254, 257, 258, 259, 261, 264, 271, 275, 276, 278, 280, 281, 282, 285, 286, 287], "dev": [1, 3, 4, 5, 245], "sympi": [2, 3, 4, 7, 8, 9, 11, 13, 14, 18, 19, 20, 21, 22, 24, 26, 27, 28, 30, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 259, 260, 262, 263, 264, 265, 269, 271, 272, 274, 276, 278, 279, 281, 282, 283, 284, 285, 286, 287], "sympy_debug": [2, 87, 250], "variabl": [2, 3, 6, 7, 10, 11, 14, 16, 19, 20, 22, 24, 25, 27, 28, 29, 33, 34, 35, 37, 38, 40, 42, 43, 55, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 77, 79, 85, 87, 88, 90, 91, 96, 102, 103, 104, 106, 108, 110, 123, 124, 131, 133, 141, 142, 148, 163, 168, 172, 174, 177, 183, 184, 186, 190, 197, 199, 200, 202, 204, 205, 206, 209, 210, 215, 216, 221, 222, 224, 225, 226, 227, 228, 236, 240, 242, 243, 244, 248, 254, 257, 258, 260, 261, 263, 276, 278, 280, 282, 287], "instanc": [2, 4, 6, 7, 10, 11, 15, 18, 19, 20, 35, 36, 37, 39, 41, 42, 51, 53, 55, 60, 62, 64, 65, 66, 68, 73, 76, 77, 78, 83, 84, 87, 88, 91, 93, 96, 100, 102, 103, 111, 115, 119, 123, 124, 142, 147, 154, 158, 164, 168, 169, 171, 173, 174, 184, 186, 189, 190, 195, 199, 200, 204, 205, 206, 207, 209, 217, 219, 221, 225, 227, 228, 229, 233, 234, 235, 240, 241, 242, 244, 247, 248, 254, 256, 257, 258, 259, 261, 263, 275, 276, 281, 286, 287], "unix": [2, 240, 241], "would": [2, 4, 5, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 22, 25, 27, 32, 41, 42, 43, 49, 51, 52, 59, 60, 61, 65, 66, 72, 76, 85, 87, 91, 96, 100, 102, 103, 110, 111, 112, 114, 116, 118, 124, 128, 138, 141, 169, 171, 174, 179, 183, 184, 190, 192, 195, 198, 199, 200, 202, 205, 206, 208, 209, 210, 212, 217, 218, 219, 221, 222, 225, 226, 227, 228, 229, 233, 234, 240, 242, 244, 247, 248, 250, 251, 259, 260, 261, 263, 275, 276, 278, 280, 281, 282, 285, 286, 287], "do": [2, 3, 4, 6, 7, 10, 11, 12, 16, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 31, 32, 33, 36, 37, 38, 40, 41, 42, 43, 52, 56, 59, 60, 61, 62, 63, 66, 68, 70, 72, 75, 76, 79, 85, 87, 88, 90, 91, 93, 94, 96, 97, 100, 101, 107, 110, 114, 118, 119, 121, 123, 124, 125, 127, 128, 132, 135, 136, 141, 146, 149, 154, 158, 163, 166, 168, 170, 176, 178, 179, 182, 183, 185, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 204, 205, 206, 208, 209, 210, 212, 216, 217, 218, 219, 221, 222, 225, 226, 227, 231, 234, 235, 238, 240, 241, 243, 245, 247, 248, 250, 257, 259, 260, 261, 263, 275, 276, 278, 279, 280, 281, 282, 284, 286], "true": [2, 3, 6, 10, 11, 12, 14, 15, 18, 19, 20, 23, 24, 25, 26, 28, 29, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42, 46, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 79, 81, 82, 85, 87, 88, 90, 91, 92, 93, 96, 97, 100, 102, 103, 104, 108, 110, 111, 112, 113, 114, 116, 118, 119, 120, 124, 126, 128, 141, 145, 146, 155, 158, 159, 166, 168, 169, 172, 173, 174, 177, 183, 184, 185, 186, 189, 190, 193, 194, 195, 196, 197, 198, 199, 200, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 216, 217, 218, 219, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 238, 240, 241, 242, 243, 245, 247, 248, 250, 254, 257, 258, 259, 260, 261, 264, 275, 276, 278, 280, 281, 282, 285, 286, 287], "isympi": [2, 3, 11, 12, 88], "window": [2, 250], "just": [2, 4, 6, 7, 10, 11, 12, 18, 19, 20, 23, 25, 32, 38, 41, 42, 51, 58, 60, 61, 62, 66, 83, 85, 87, 88, 89, 90, 96, 100, 101, 112, 114, 115, 121, 124, 128, 132, 138, 139, 141, 154, 159, 164, 174, 179, 183, 189, 190, 192, 196, 198, 199, 200, 202, 204, 208, 209, 216, 217, 218, 219, 221, 225, 228, 238, 240, 242, 243, 245, 260, 261, 263, 275, 276, 278, 279, 280, 281, 282, 286, 287], "limit": [2, 4, 10, 12, 25, 26, 30, 32, 38, 40, 42, 59, 60, 62, 64, 65, 66, 68, 69, 72, 80, 82, 87, 88, 90, 96, 100, 108, 139, 163, 169, 172, 189, 195, 200, 202, 205, 206, 209, 212, 213, 215, 217, 221, 222, 224, 225, 226, 227, 229, 234, 241, 244, 247, 248, 250, 253, 254, 264, 266, 272, 277, 278, 280, 282], "function": [2, 3, 4, 7, 8, 11, 14, 15, 16, 18, 19, 21, 22, 24, 25, 26, 29, 31, 35, 36, 37, 39, 40, 41, 43, 51, 52, 55, 56, 58, 61, 62, 63, 64, 65, 69, 70, 71, 72, 77, 80, 81, 84, 86, 87, 88, 89, 91, 93, 95, 99, 101, 103, 105, 107, 108, 110, 111, 112, 116, 118, 121, 122, 123, 124, 127, 128, 129, 130, 134, 136, 137, 141, 146, 147, 148, 149, 153, 158, 159, 160, 163, 168, 169, 170, 171, 172, 173, 174, 177, 183, 184, 187, 188, 189, 191, 193, 194, 196, 201, 202, 203, 204, 206, 207, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 223, 224, 227, 228, 229, 231, 233, 234, 235, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 250, 251, 252, 253, 254, 255, 259, 260, 262, 263, 264, 265, 266, 269, 271, 272, 275, 276, 277, 278, 279, 280, 281, 282, 284, 287], "nice": [2, 4, 6, 32, 60, 72, 96, 100, 124, 138, 141, 195, 209, 219, 250, 281], "print": [2, 4, 6, 7, 11, 12, 16, 18, 19, 24, 25, 27, 28, 32, 35, 36, 37, 38, 40, 41, 43, 44, 49, 51, 52, 59, 60, 61, 64, 65, 66, 68, 87, 89, 90, 93, 96, 97, 100, 101, 102, 103, 104, 110, 117, 119, 124, 126, 134, 140, 146, 154, 167, 168, 172, 174, 184, 187, 191, 193, 195, 198, 199, 200, 204, 205, 215, 216, 218, 219, 221, 225, 227, 234, 236, 240, 242, 247, 248, 250, 252, 254, 258, 265, 271, 273, 276, 277, 278, 279, 280, 281, 282, 286], "tree": [2, 10, 11, 15, 51, 54, 60, 102, 116, 124, 166, 169, 184, 205, 216, 218, 221, 228, 231, 233, 244, 247, 250, 277], "veri": [2, 3, 4, 6, 10, 11, 12, 14, 15, 18, 20, 28, 42, 56, 60, 61, 64, 65, 70, 72, 78, 82, 85, 87, 90, 96, 100, 110, 114, 124, 128, 141, 146, 179, 192, 193, 196, 199, 202, 204, 205, 206, 208, 209, 210, 216, 217, 218, 219, 221, 222, 225, 227, 228, 229, 240, 241, 242, 248, 275, 278, 281, 286], "sever": [3, 4, 5, 6, 10, 11, 15, 18, 20, 25, 28, 32, 42, 45, 51, 52, 59, 60, 64, 65, 67, 68, 72, 85, 87, 100, 116, 135, 179, 181, 195, 197, 199, 202, 204, 208, 209, 210, 216, 217, 225, 229, 240, 242, 252, 265, 278, 282, 285], "instal": [3, 5, 7, 11, 12, 64, 101, 199, 200, 209, 241, 248, 279, 285], "enabl": [3, 7, 11, 20, 32, 60, 87, 88, 100, 104, 124, 126, 174, 184, 189, 209, 225, 229, 240, 245, 248, 282, 285, 286], "certain": [3, 7, 11, 20, 30, 32, 39, 41, 42, 51, 58, 60, 64, 68, 76, 85, 87, 100, 102, 138, 184, 185, 196, 199, 202, 204, 209, 210, 216, 219, 221, 222, 225, 227, 228, 229, 231, 242, 243, 248, 254, 257, 263, 286], "most": [3, 4, 6, 7, 10, 11, 12, 15, 16, 18, 19, 20, 23, 25, 26, 27, 28, 29, 30, 32, 35, 36, 37, 40, 41, 42, 43, 51, 52, 59, 60, 61, 64, 66, 70, 72, 87, 90, 91, 92, 93, 94, 96, 98, 99, 100, 101, 102, 110, 114, 118, 119, 124, 132, 135, 138, 139, 142, 176, 183, 184, 188, 194, 195, 196, 197, 199, 200, 202, 204, 205, 206, 207, 208, 209, 216, 217, 219, 222, 225, 226, 227, 228, 229, 238, 241, 242, 243, 244, 245, 247, 248, 250, 257, 259, 275, 278, 280, 281, 282, 284, 285, 286], "mention": [3, 4, 6, 20, 28, 51, 85, 87, 110, 126, 142, 143, 190, 219, 222, 225, 229, 258, 259, 260, 261, 282], "except": [3, 4, 6, 10, 11, 12, 16, 18, 19, 20, 26, 30, 40, 42, 51, 52, 60, 61, 64, 65, 66, 68, 85, 87, 100, 132, 180, 194, 196, 199, 200, 204, 205, 206, 207, 209, 218, 221, 222, 225, 226, 228, 233, 238, 240, 242, 243, 246, 247, 248, 258, 261, 273, 275, 278, 281, 282], "unless": [3, 6, 11, 18, 20, 35, 37, 40, 42, 51, 59, 60, 61, 65, 68, 75, 76, 85, 96, 99, 147, 192, 193, 197, 199, 204, 205, 209, 214, 217, 218, 225, 227, 240, 244, 247, 248, 250, 254, 263, 276, 282, 286], "thei": [3, 4, 6, 7, 10, 11, 12, 14, 18, 19, 20, 26, 28, 29, 30, 32, 38, 41, 42, 43, 48, 50, 51, 52, 58, 59, 60, 61, 62, 65, 66, 68, 70, 73, 74, 75, 76, 77, 82, 85, 87, 88, 90, 91, 93, 94, 96, 99, 100, 102, 114, 118, 119, 121, 123, 124, 126, 132, 134, 136, 137, 138, 141, 142, 148, 153, 158, 163, 166, 171, 176, 177, 179, 180, 184, 188, 189, 190, 193, 194, 195, 196, 197, 199, 200, 202, 204, 205, 206, 207, 209, 210, 215, 216, 218, 219, 221, 222, 225, 226, 227, 228, 229, 230, 231, 235, 238, 240, 242, 244, 247, 248, 250, 254, 261, 263, 276, 278, 279, 280, 281, 282, 286], "intend": [3, 4, 6, 10, 14, 18, 60, 61, 71, 80, 85, 100, 102, 116, 169, 199, 200, 204, 207, 222, 225, 226, 238, 243, 275], "part": [3, 4, 6, 7, 10, 11, 18, 19, 20, 28, 34, 39, 51, 52, 59, 60, 61, 65, 66, 68, 76, 83, 85, 87, 90, 91, 93, 100, 110, 114, 115, 118, 119, 123, 124, 126, 132, 134, 135, 139, 141, 158, 170, 174, 183, 193, 197, 199, 200, 202, 204, 205, 206, 208, 209, 210, 217, 219, 221, 222, 225, 227, 240, 242, 244, 247, 276, 281, 286], "those": [3, 6, 10, 11, 12, 14, 18, 19, 25, 28, 29, 30, 33, 38, 41, 42, 43, 51, 52, 58, 59, 60, 61, 64, 73, 74, 85, 87, 90, 96, 99, 100, 114, 118, 119, 126, 132, 135, 147, 171, 183, 186, 189, 192, 193, 195, 199, 200, 202, 204, 205, 207, 208, 209, 215, 217, 221, 225, 226, 227, 228, 229, 235, 238, 240, 244, 247, 254, 257, 278, 280, 286], "everi": [3, 4, 6, 11, 18, 20, 25, 28, 31, 36, 37, 38, 41, 46, 48, 51, 52, 60, 61, 75, 89, 91, 96, 100, 110, 139, 190, 192, 193, 195, 196, 197, 199, 200, 202, 204, 209, 214, 217, 219, 221, 222, 225, 228, 229, 231, 258, 261, 263, 279, 281, 282, 286], "doe": [3, 6, 7, 8, 10, 11, 15, 18, 19, 20, 28, 29, 30, 31, 32, 33, 36, 37, 40, 41, 42, 43, 51, 52, 56, 58, 59, 60, 61, 62, 64, 66, 68, 70, 71, 73, 74, 76, 85, 87, 90, 91, 96, 99, 100, 102, 112, 114, 116, 124, 126, 131, 135, 154, 158, 164, 168, 170, 173, 183, 192, 193, 195, 197, 198, 199, 200, 202, 204, 205, 206, 209, 216, 217, 218, 219, 221, 222, 224, 225, 227, 234, 235, 238, 240, 242, 244, 247, 248, 250, 254, 256, 259, 275, 276, 278, 281, 282, 285, 286, 287], "themselv": [3, 7, 10, 20, 38, 41, 52, 56, 58, 60, 87, 100, 134, 135, 178, 199, 200, 204, 215, 229, 235, 244, 247, 250, 286], "incomplet": [3, 6, 7, 60, 65, 68, 197, 199, 205, 209, 211, 227, 228], "main": [3, 5, 6, 7, 10, 12, 27, 37, 38, 42, 60, 66, 85, 91, 96, 99, 124, 132, 172, 178, 189, 193, 195, 196, 200, 209, 216, 225, 228, 234, 241, 286, 287], "webpag": [3, 7], "complet": [3, 4, 6, 10, 11, 12, 18, 25, 37, 42, 60, 61, 62, 64, 66, 67, 68, 76, 85, 87, 96, 100, 114, 119, 120, 128, 134, 141, 160, 163, 164, 193, 202, 205, 206, 210, 216, 221, 222, 225, 228, 229, 240, 242, 250, 280, 281, 286], "io": [3, 7, 88, 209, 248], "one": [3, 4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 31, 33, 34, 37, 38, 40, 41, 42, 44, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 66, 68, 70, 71, 72, 73, 74, 76, 77, 82, 83, 84, 85, 87, 88, 89, 90, 91, 93, 95, 96, 99, 100, 101, 102, 103, 104, 107, 108, 110, 111, 114, 115, 118, 119, 124, 125, 128, 138, 139, 141, 143, 146, 147, 148, 154, 159, 168, 172, 174, 176, 177, 179, 182, 183, 184, 188, 189, 190, 192, 193, 194, 195, 196, 197, 199, 200, 202, 204, 205, 206, 207, 208, 209, 210, 216, 217, 218, 219, 221, 222, 225, 226, 227, 228, 229, 230, 233, 235, 236, 240, 241, 242, 244, 247, 248, 250, 254, 259, 261, 263, 274, 275, 276, 278, 280, 281, 282, 284, 285, 286], "arbitrari": [3, 6, 10, 11, 12, 18, 20, 25, 27, 28, 29, 30, 40, 45, 52, 53, 59, 60, 61, 64, 65, 68, 71, 72, 74, 90, 91, 96, 104, 135, 139, 160, 163, 193, 195, 196, 199, 200, 202, 204, 206, 221, 225, 226, 227, 235, 245, 248, 254, 256, 275, 276, 281, 286, 287], "precis": [3, 4, 6, 11, 12, 18, 19, 20, 25, 28, 42, 51, 60, 63, 64, 65, 68, 76, 87, 96, 100, 108, 139, 194, 196, 199, 200, 204, 205, 206, 209, 216, 221, 222, 227, 228, 241, 242, 250, 275, 286], "arithmet": [3, 42, 60, 61, 64, 91, 96, 100, 163, 170, 194, 195, 196, 198, 199, 200, 202, 203, 207, 210], "hood": [3, 11], "whenev": [3, 4, 10, 11, 12, 20, 58, 85, 87, 96, 181, 195, 196, 197, 211, 216, 219, 229, 276, 278, 281], "calcul": [3, 12, 16, 18, 27, 34, 40, 43, 52, 58, 60, 61, 62, 63, 64, 66, 68, 70, 72, 73, 74, 76, 77, 87, 91, 93, 96, 100, 103, 104, 112, 114, 115, 118, 119, 123, 126, 127, 128, 143, 146, 147, 150, 153, 169, 170, 171, 172, 174, 175, 183, 184, 185, 186, 188, 190, 192, 193, 194, 195, 196, 199, 200, 202, 204, 205, 206, 211, 216, 225, 229, 233, 241, 242, 248, 254, 257, 261, 263, 282, 285], "float": [3, 11, 18, 20, 23, 42, 51, 60, 66, 68, 75, 77, 87, 88, 91, 96, 100, 102, 108, 110, 141, 147, 189, 195, 199, 200, 209, 221, 227, 229, 240, 248, 250, 275, 278], "point": [3, 4, 6, 7, 11, 12, 16, 18, 25, 27, 32, 34, 40, 42, 43, 51, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 79, 82, 83, 84, 85, 87, 96, 100, 103, 104, 106, 108, 115, 118, 119, 120, 121, 123, 124, 126, 128, 130, 131, 132, 133, 135, 136, 137, 138, 139, 141, 142, 154, 176, 179, 185, 188, 190, 193, 195, 196, 199, 200, 202, 204, 205, 209, 211, 215, 216, 217, 225, 227, 228, 229, 241, 244, 247, 248, 250, 254, 257, 259, 260, 261, 263, 264, 272, 275, 276, 278, 281], "valu": [3, 4, 6, 7, 10, 11, 12, 16, 18, 20, 24, 25, 26, 27, 28, 29, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 49, 51, 52, 56, 59, 60, 61, 62, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 82, 83, 85, 87, 88, 90, 91, 92, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 108, 110, 112, 115, 118, 119, 120, 121, 123, 124, 126, 138, 141, 143, 147, 150, 153, 158, 160, 163, 166, 168, 169, 170, 171, 174, 175, 177, 178, 179, 184, 185, 188, 190, 192, 193, 194, 195, 197, 198, 199, 200, 202, 204, 205, 206, 207, 209, 210, 215, 216, 217, 218, 221, 222, 224, 225, 226, 227, 228, 229, 230, 233, 234, 235, 236, 240, 242, 243, 247, 248, 250, 257, 259, 261, 264, 276, 278, 281], "evalf": [3, 6, 11, 12, 18, 27, 28, 30, 42, 59, 64, 65, 66, 68, 79, 82, 83, 91, 96, 102, 124, 126, 141, 156, 200, 205, 209, 216, 217, 221, 229, 241, 248, 277], "cannot": [3, 4, 6, 7, 10, 11, 12, 15, 19, 20, 24, 26, 27, 28, 32, 35, 36, 37, 38, 39, 40, 42, 52, 57, 59, 60, 62, 64, 66, 70, 72, 73, 75, 77, 82, 87, 89, 92, 94, 96, 98, 100, 110, 169, 177, 179, 192, 193, 195, 200, 202, 204, 205, 206, 209, 216, 217, 221, 222, 224, 225, 227, 228, 229, 230, 238, 240, 241, 242, 247, 251, 254, 256, 280, 281, 282, 286, 287], "without": [3, 4, 6, 7, 10, 11, 12, 18, 20, 32, 36, 38, 39, 42, 59, 60, 61, 62, 64, 68, 85, 87, 88, 91, 93, 96, 110, 111, 118, 124, 130, 132, 137, 138, 174, 179, 183, 184, 185, 192, 195, 198, 199, 202, 205, 209, 211, 217, 218, 219, 221, 222, 225, 226, 227, 228, 229, 231, 234, 235, 238, 240, 241, 242, 245, 247, 248, 250, 257, 260, 282, 286], "import": [3, 4, 8, 11, 12, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 108, 110, 111, 112, 113, 114, 115, 116, 118, 119, 121, 123, 124, 126, 127, 128, 129, 131, 132, 133, 135, 136, 137, 138, 139, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 166, 168, 169, 171, 172, 173, 174, 175, 176, 177, 179, 181, 183, 184, 185, 186, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 238, 240, 241, 242, 243, 244, 245, 247, 248, 250, 251, 252, 254, 256, 257, 258, 259, 260, 261, 264, 275, 276, 278, 280, 281, 282, 284, 285, 286, 287], "importerror": 3, "extern": [3, 32, 88, 102, 106, 108, 126, 134, 189, 199, 200, 210, 217, 221, 229, 240, 241], "doc": [3, 4, 6, 7, 8, 12, 31, 42, 51, 59, 60, 76, 88, 139, 176, 199, 201, 222, 225, 240, 241, 243, 245, 247, 254, 259, 272], "latest": [3, 5, 32, 41, 243, 245, 248], "mean": [3, 4, 6, 7, 10, 11, 12, 18, 19, 20, 28, 29, 38, 43, 52, 59, 60, 61, 62, 78, 85, 87, 88, 90, 91, 94, 96, 100, 103, 114, 135, 174, 176, 179, 184, 189, 192, 195, 196, 197, 199, 202, 204, 208, 209, 219, 221, 222, 225, 227, 228, 229, 230, 231, 233, 234, 240, 247, 259, 275, 276, 278, 280, 281, 282, 286, 287], "did": [3, 7, 19, 60, 87, 100, 114, 131, 179, 202, 206, 217, 227, 238, 248, 278, 280, 286], "explain": [3, 4, 6, 7, 18, 28, 30, 41, 56, 60, 68, 78, 83, 196, 199, 202, 204, 206, 216], "ones": [3, 4, 10, 20, 32, 42, 51, 56, 60, 85, 87, 90, 91, 93, 96, 99, 100, 124, 147, 168, 174, 198, 202, 212, 222, 225, 230, 236, 242, 250, 254, 259, 282, 285], "typic": [3, 4, 10, 11, 20, 56, 66, 85, 100, 110, 115, 121, 125, 183, 193, 195, 197, 202, 206, 219, 241, 242, 259], "directli": [3, 4, 6, 10, 11, 12, 16, 18, 19, 20, 28, 32, 36, 37, 40, 41, 42, 51, 59, 60, 62, 66, 71, 91, 93, 96, 100, 124, 160, 172, 177, 184, 188, 195, 196, 198, 199, 200, 204, 205, 217, 218, 219, 221, 222, 225, 226, 227, 228, 229, 240, 241, 242, 243, 244, 245, 276, 287], "git": [3, 8], "repositori": [3, 5, 7, 32, 222], "vast": [3, 30, 87, 201], "wrap": [3, 4, 6, 35, 36, 37, 38, 42, 49, 60, 66, 88, 101, 189, 193, 195, 198, 199, 202, 209, 212, 228, 234, 241, 245, 248, 250, 281], "addition": [3, 6, 10, 60, 136, 172, 193, 202, 209, 229, 238, 245, 258], "ci": [3, 7, 68, 85, 209, 285], "wish": [3, 6, 12, 20, 32, 42, 60, 61, 64, 85, 100, 169, 183, 193, 244, 248, 276, 280, 282, 287], "local": [3, 33, 35, 36, 37, 60, 62, 85, 102, 131, 133, 186, 196, 202, 227, 240], "improv": [3, 4, 10, 19, 20, 60, 85, 195, 199, 202, 203, 205, 206, 208, 210, 225, 228, 234, 276, 282], "perform": [3, 10, 11, 12, 15, 16, 18, 20, 39, 41, 42, 43, 51, 52, 55, 59, 60, 61, 63, 64, 66, 73, 77, 84, 87, 94, 96, 100, 101, 116, 119, 126, 128, 134, 138, 139, 141, 158, 159, 168, 171, 174, 190, 193, 197, 198, 199, 202, 204, 205, 210, 211, 212, 216, 221, 222, 225, 227, 228, 229, 230, 241, 247, 254, 256, 258, 261, 275, 276, 280, 281, 286], "gmpy2": [3, 199, 200], "wrapper": [3, 10, 11, 20, 36, 38, 42, 52, 60, 68, 96, 138, 186, 189, 198, 199, 202, 209, 216, 225, 228, 229, 241, 245, 247], "gmp": 3, "multipl": [3, 4, 6, 10, 11, 12, 14, 18, 20, 23, 25, 29, 30, 36, 37, 38, 40, 41, 42, 43, 49, 51, 52, 56, 59, 60, 61, 65, 66, 68, 70, 75, 78, 80, 85, 87, 89, 90, 91, 93, 96, 97, 100, 102, 107, 110, 114, 126, 134, 141, 142, 158, 159, 160, 164, 171, 173, 176, 179, 180, 181, 184, 188, 192, 195, 196, 197, 198, 199, 200, 202, 203, 205, 206, 209, 214, 215, 217, 218, 219, 221, 222, 225, 226, 227, 228, 229, 230, 233, 235, 238, 242, 243, 244, 245, 247, 248, 250, 254, 259, 275, 276, 278, 279, 281, 282, 287], "larg": [3, 4, 6, 12, 18, 26, 28, 51, 52, 60, 61, 70, 85, 87, 99, 100, 114, 120, 138, 141, 154, 179, 183, 194, 199, 200, 202, 205, 208, 209, 210, 216, 219, 221, 229, 234, 241, 248, 250, 257, 275, 280, 286], "integ": [3, 6, 7, 10, 11, 12, 18, 20, 22, 23, 24, 25, 35, 36, 37, 38, 40, 42, 43, 49, 51, 52, 53, 54, 56, 59, 60, 61, 62, 63, 64, 65, 68, 70, 73, 84, 85, 87, 88, 89, 90, 91, 93, 96, 97, 100, 102, 103, 110, 112, 118, 163, 168, 170, 171, 172, 174, 176, 184, 186, 189, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206, 208, 209, 211, 214, 215, 216, 217, 218, 219, 221, 222, 225, 227, 228, 229, 233, 234, 235, 241, 242, 244, 247, 250, 276, 278, 281, 285, 286], "faster": [3, 18, 26, 27, 28, 42, 45, 60, 68, 91, 100, 101, 114, 116, 119, 120, 138, 198, 199, 200, 202, 204, 205, 206, 210, 212, 216, 221, 222, 225, 226, 228, 241, 244], "int": [3, 6, 7, 10, 11, 12, 18, 19, 20, 34, 40, 42, 52, 60, 61, 62, 65, 66, 68, 69, 76, 85, 87, 88, 90, 91, 96, 97, 100, 102, 108, 110, 118, 154, 158, 159, 168, 184, 186, 188, 189, 194, 195, 199, 200, 204, 205, 206, 209, 211, 212, 214, 225, 226, 229, 241, 245, 247, 250, 278, 280, 281, 285, 286], "core": [3, 4, 5, 6, 11, 12, 15, 18, 19, 20, 23, 38, 40, 42, 51, 61, 66, 67, 69, 77, 91, 100, 102, 172, 173, 197, 199, 200, 201, 202, 204, 205, 206, 209, 216, 217, 221, 222, 225, 229, 239, 240, 241, 247, 248, 252, 265, 266, 278, 281], "oper": [3, 5, 6, 11, 18, 19, 20, 26, 27, 30, 34, 38, 42, 51, 52, 53, 59, 60, 61, 62, 63, 64, 66, 68, 70, 78, 80, 83, 85, 90, 91, 93, 100, 102, 110, 111, 114, 119, 120, 128, 132, 138, 141, 146, 150, 151, 155, 157, 158, 159, 160, 165, 166, 169, 171, 172, 173, 174, 183, 184, 186, 191, 196, 197, 198, 199, 200, 202, 204, 205, 206, 209, 212, 214, 217, 218, 221, 224, 225, 227, 228, 231, 232, 233, 234, 240, 241, 244, 247, 248, 254, 265, 269, 271, 272, 277, 278, 279, 281, 286], "poli": [3, 11, 12, 28, 59, 60, 61, 65, 66, 68, 69, 76, 82, 87, 91, 93, 96, 100, 141, 196, 197, 201, 202, 204, 205, 206, 208, 211, 224, 225, 227, 228, 240, 272], "refer": [3, 4, 5, 7, 10, 11, 12, 16, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 36, 37, 38, 40, 42, 44, 46, 48, 49, 51, 52, 53, 54, 58, 61, 63, 65, 66, 68, 70, 75, 76, 77, 82, 88, 89, 90, 91, 97, 101, 103, 108, 110, 111, 113, 115, 118, 119, 121, 123, 124, 126, 134, 136, 139, 141, 142, 143, 145, 147, 151, 153, 155, 156, 157, 160, 162, 163, 171, 172, 174, 183, 184, 185, 186, 188, 190, 192, 198, 199, 201, 209, 211, 212, 214, 217, 221, 224, 225, 226, 227, 229, 235, 244, 247, 248, 250, 254, 258, 259, 263, 271, 272, 278, 282, 283, 286, 287], "domain": [3, 6, 10, 11, 16, 20, 26, 28, 40, 41, 60, 61, 63, 65, 66, 68, 79, 81, 82, 85, 87, 93, 96, 97, 100, 107, 110, 124, 141, 196, 198, 201, 202, 204, 206, 207, 224, 225, 227, 229, 272, 282, 287], "No": [3, 6, 7, 12, 30, 41, 60, 68, 75, 90, 100, 103, 111, 124, 169, 195, 205, 211, 212, 221, 222, 227, 228, 229, 234, 238, 244, 245, 247, 275, 287], "mani": [3, 4, 6, 11, 12, 14, 16, 18, 19, 20, 22, 23, 25, 27, 28, 30, 32, 40, 41, 42, 43, 48, 51, 56, 60, 61, 62, 64, 66, 68, 72, 85, 87, 90, 91, 96, 100, 101, 119, 120, 124, 126, 134, 137, 138, 141, 158, 174, 182, 193, 196, 198, 199, 200, 202, 204, 213, 216, 217, 219, 221, 222, 225, 226, 227, 228, 229, 233, 242, 247, 275, 276, 278, 279, 280, 281, 285, 286, 287], "algorithm": [3, 6, 11, 12, 18, 25, 27, 28, 29, 30, 40, 44, 45, 50, 51, 52, 54, 56, 58, 59, 60, 61, 64, 65, 66, 72, 77, 85, 87, 90, 93, 96, 97, 100, 103, 111, 118, 138, 161, 179, 184, 194, 195, 196, 197, 198, 199, 200, 203, 204, 206, 210, 214, 217, 218, 221, 222, 225, 227, 228, 229, 235, 244, 247, 271, 276, 281, 282, 286], "simplif": [3, 11, 12, 18, 35, 37, 39, 40, 42, 60, 62, 65, 66, 85, 91, 96, 102, 116, 124, 138, 141, 158, 174, 184, 205, 210, 220, 221, 225, 227, 228, 265, 266, 275, 277, 279, 280], "factor": [3, 10, 11, 12, 43, 51, 52, 59, 60, 61, 64, 65, 66, 68, 85, 87, 96, 100, 103, 110, 141, 143, 151, 155, 158, 170, 174, 179, 180, 181, 196, 199, 200, 201, 203, 204, 205, 212, 218, 219, 221, 222, 225, 227, 229, 233, 244, 258, 261, 280, 282], "matric": [3, 6, 11, 17, 18, 38, 42, 60, 61, 87, 97, 99, 110, 118, 119, 120, 124, 128, 138, 141, 143, 146, 147, 149, 157, 158, 168, 173, 184, 193, 194, 198, 204, 209, 210, 217, 219, 221, 222, 225, 227, 228, 230, 242, 243, 271, 277, 279, 280], "thu": [3, 4, 10, 11, 12, 16, 23, 25, 26, 38, 45, 51, 52, 60, 61, 62, 66, 68, 83, 85, 87, 91, 94, 96, 99, 100, 111, 123, 128, 134, 138, 179, 184, 197, 202, 204, 206, 210, 216, 219, 221, 242, 247, 248, 259, 260, 278, 281, 286, 287], "speed": [3, 6, 10, 37, 42, 51, 60, 61, 64, 91, 100, 101, 112, 118, 119, 120, 123, 124, 126, 127, 128, 129, 131, 132, 133, 135, 136, 137, 141, 142, 145, 148, 183, 184, 188, 193, 194, 206, 209, 210, 216, 221, 225, 241, 244, 247, 281, 282], "non": [3, 4, 11, 12, 18, 20, 27, 28, 30, 33, 38, 40, 43, 50, 53, 59, 60, 61, 65, 66, 67, 68, 69, 70, 73, 74, 75, 87, 89, 90, 91, 92, 93, 96, 97, 99, 114, 119, 121, 126, 128, 132, 136, 137, 141, 158, 163, 173, 174, 176, 190, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 208, 209, 212, 216, 217, 219, 221, 222, 224, 225, 227, 228, 229, 230, 233, 234, 235, 240, 242, 247, 250, 261, 281, 286, 287], "who": [3, 4, 6, 16, 20, 61, 62, 141, 193, 202, 209, 279], "abl": [3, 4, 6, 11, 16, 18, 20, 24, 41, 42, 51, 56, 60, 61, 62, 71, 79, 87, 93, 96, 100, 107, 124, 136, 138, 139, 141, 142, 196, 199, 206, 225, 228, 240, 258, 280, 285, 287], "experi": [3, 126, 228, 229], "design": [3, 4, 6, 10, 11, 13, 15, 19, 20, 22, 27, 31, 38, 43, 50, 60, 96, 99, 102, 141, 142, 199, 203, 209, 214, 219, 225, 228, 280, 281, 285], "interfac": [3, 7, 11, 25, 40, 60, 88, 118, 143, 169, 189, 193, 199, 202, 207, 228, 241, 242], "ipython": [3, 6, 10, 11, 12, 32, 88, 141, 189, 248, 252, 253, 284, 285], "jupyt": [3, 10, 11, 20, 248, 252], "notebook": [3, 11, 20, 32, 88, 189, 248, 284, 285], "init_sess": [3, 88, 285], "usual": [3, 10, 11, 12, 16, 18, 28, 41, 43, 51, 59, 60, 61, 78, 85, 87, 96, 134, 160, 172, 179, 190, 192, 193, 196, 197, 199, 200, 202, 208, 209, 210, 216, 219, 225, 228, 229, 230, 234, 235, 242, 244, 248, 254, 263, 275, 278, 281, 285, 286], "flag": [3, 4, 14, 20, 28, 40, 42, 51, 52, 56, 58, 60, 73, 75, 87, 90, 91, 92, 96, 100, 118, 124, 158, 195, 200, 202, 205, 206, 209, 210, 211, 217, 221, 222, 225, 227, 228, 235, 240, 241, 247, 250, 275, 286], "auto_symbol": [3, 88, 102], "auto_int_to_integ": [3, 88], "qt": 3, "consol": [3, 4, 12, 60, 88, 189, 195, 285], "express": [3, 4, 6, 7, 11, 14, 15, 18, 19, 20, 22, 23, 26, 30, 35, 36, 37, 38, 39, 40, 52, 59, 60, 61, 62, 63, 64, 65, 66, 68, 70, 73, 75, 76, 83, 84, 85, 87, 88, 91, 94, 95, 96, 99, 100, 101, 103, 110, 111, 113, 114, 115, 117, 118, 120, 121, 124, 128, 134, 135, 136, 137, 138, 139, 141, 142, 149, 153, 157, 158, 162, 163, 166, 169, 171, 172, 173, 174, 176, 177, 179, 181, 183, 184, 186, 188, 189, 190, 193, 194, 195, 196, 197, 200, 202, 204, 205, 206, 209, 210, 212, 214, 215, 216, 217, 218, 219, 221, 222, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 238, 241, 242, 243, 244, 245, 248, 250, 254, 256, 257, 258, 260, 261, 263, 269, 271, 276, 277, 278, 279, 280, 282, 285, 286, 287], "mathjax": [3, 7, 88, 189, 285], "preview": [3, 41, 243], "save": [3, 11, 40, 60, 96, 100, 195, 208, 227, 244], "viewer": [3, 7, 41, 209, 243], "parser": [3, 93, 102, 134, 141, 240, 271], "modul": [3, 4, 5, 6, 7, 11, 12, 15, 18, 24, 32, 33, 34, 35, 36, 37, 40, 41, 42, 43, 50, 52, 60, 61, 63, 65, 66, 68, 72, 76, 80, 83, 86, 87, 88, 90, 93, 94, 95, 96, 101, 102, 103, 105, 106, 108, 111, 114, 124, 125, 130, 134, 136, 137, 141, 143, 146, 148, 149, 161, 164, 177, 178, 179, 180, 190, 193, 195, 200, 201, 203, 206, 207, 209, 213, 216, 219, 223, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 240, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 257, 259, 261, 262, 263, 264, 265, 271, 272, 273, 275, 278, 280, 286, 287], "parse_expr": [3, 10, 18, 30, 102], "mathematca": 3, "parse_mathematica": [3, 10, 102], "maxima": [3, 25, 102, 228], "parse_maxima": [3, 102], "antlr": [3, 102, 124], "runtim": [3, 11, 42, 60, 120], "autolev": [3, 126, 134, 271], "call": [3, 4, 6, 7, 11, 12, 15, 16, 18, 19, 20, 22, 25, 26, 27, 28, 29, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 49, 50, 51, 52, 58, 60, 61, 63, 64, 65, 67, 68, 70, 75, 76, 78, 83, 85, 87, 89, 90, 91, 92, 93, 94, 96, 98, 99, 100, 102, 103, 104, 110, 114, 118, 124, 126, 128, 135, 138, 139, 164, 166, 169, 174, 179, 184, 190, 192, 193, 194, 195, 196, 197, 199, 200, 202, 204, 205, 206, 207, 208, 209, 211, 216, 217, 219, 221, 222, 224, 225, 227, 228, 229, 231, 233, 235, 236, 238, 240, 241, 242, 243, 244, 245, 247, 248, 250, 254, 257, 258, 261, 263, 276, 278, 280, 281, 282, 285, 286, 287], "antlr4": [3, 102], "awar": [3, 4, 6, 11, 12, 19, 40, 60, 64, 90, 96, 219, 229, 248], "must": [3, 4, 5, 6, 10, 11, 12, 18, 19, 34, 35, 36, 37, 42, 51, 52, 54, 56, 58, 59, 60, 61, 62, 65, 66, 68, 70, 73, 76, 79, 82, 83, 85, 87, 90, 91, 92, 93, 96, 99, 100, 103, 104, 106, 108, 110, 111, 118, 119, 120, 124, 126, 134, 136, 137, 138, 139, 141, 154, 169, 171, 174, 183, 184, 193, 194, 195, 196, 197, 200, 202, 204, 205, 209, 210, 217, 218, 219, 221, 222, 225, 227, 228, 229, 233, 234, 240, 241, 242, 243, 244, 245, 247, 248, 251, 278, 280, 281, 285, 286], "match": [3, 4, 6, 10, 12, 18, 20, 51, 52, 59, 60, 68, 73, 85, 87, 91, 96, 118, 123, 150, 175, 183, 184, 198, 205, 221, 222, 225, 226, 227, 229, 238, 240, 242, 247, 248, 260, 276], "wa": [3, 4, 10, 12, 14, 18, 20, 49, 51, 52, 54, 60, 61, 62, 68, 73, 96, 100, 102, 114, 115, 124, 126, 128, 138, 139, 169, 179, 192, 193, 194, 196, 202, 204, 205, 206, 208, 209, 218, 219, 221, 225, 227, 229, 238, 240, 243, 245, 247, 248, 276, 278, 280, 281, 284], "compil": [3, 42, 88, 101, 114, 141, 189, 209, 221, 234, 240, 241, 242, 265, 280], "4": [3, 7, 12, 14, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 34, 35, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 82, 83, 85, 87, 89, 90, 91, 92, 93, 94, 96, 97, 99, 100, 102, 103, 106, 108, 110, 111, 112, 116, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 138, 139, 141, 142, 143, 146, 150, 153, 158, 168, 169, 171, 172, 173, 174, 175, 177, 183, 184, 185, 188, 190, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 234, 235, 240, 241, 244, 247, 248, 254, 257, 258, 259, 261, 263, 264, 275, 276, 278, 280, 281, 282, 286, 287], "clang": [3, 102], "bind": [3, 42, 209, 241], "parse_c": 3, "lfortran": [3, 102], "fortran": [3, 11, 16, 20, 40, 101, 102, 114, 141, 194, 242, 285], "satisfi": [3, 7, 10, 18, 24, 25, 29, 37, 38, 40, 43, 48, 51, 56, 60, 61, 65, 68, 70, 83, 85, 89, 90, 96, 100, 120, 138, 158, 163, 196, 197, 202, 204, 205, 209, 215, 216, 217, 222, 225, 226, 227, 228, 229, 235, 281, 286], "implement": [3, 6, 7, 10, 11, 13, 15, 19, 20, 25, 27, 29, 30, 31, 34, 35, 36, 37, 40, 41, 42, 43, 45, 50, 51, 52, 57, 60, 61, 63, 65, 66, 68, 71, 73, 80, 81, 83, 84, 87, 90, 91, 92, 96, 100, 101, 102, 114, 124, 134, 143, 145, 146, 149, 158, 159, 167, 168, 170, 178, 183, 185, 192, 193, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 208, 210, 213, 216, 217, 218, 221, 222, 225, 226, 227, 228, 229, 233, 234, 244, 247, 248, 251, 262, 265, 269, 276, 280, 286], "dpll": 3, "But": [3, 4, 7, 10, 11, 12, 20, 28, 30, 59, 60, 68, 74, 84, 91, 96, 100, 162, 163, 174, 179, 184, 196, 197, 202, 206, 216, 218, 219, 221, 222, 225, 227, 228, 234, 244, 247, 248, 257, 276, 278, 280, 281, 286], "sat": [3, 36], "solver": [3, 6, 11, 24, 27, 36, 68, 96, 100, 123, 134, 141, 142, 198, 201, 209, 221, 222, 226, 240, 265, 266, 272, 277, 279], "ask": [3, 6, 11, 12, 15, 18, 19, 36, 37, 38, 39, 60, 72, 85, 124, 179, 196, 215, 221, 228, 247, 266, 278], "pycosat": 3, "forc": [3, 12, 16, 19, 20, 60, 64, 66, 70, 76, 85, 87, 90, 103, 104, 106, 115, 118, 119, 123, 126, 128, 129, 130, 131, 134, 136, 137, 138, 141, 162, 163, 177, 190, 193, 195, 197, 199, 218, 221, 222, 227, 240, 261, 263, 271, 285, 286], "pysat": 3, "minisat": 3, "minisat22": 3, "heavi": [3, 229, 281], "primarili": [3, 11, 18, 42, 60, 66, 100, 103, 173, 205, 207, 241, 244, 250, 258], "support": [3, 4, 5, 6, 7, 10, 11, 12, 20, 27, 32, 34, 35, 36, 37, 40, 41, 42, 52, 60, 64, 67, 68, 70, 84, 87, 93, 96, 100, 101, 102, 103, 104, 106, 107, 110, 114, 118, 124, 141, 169, 184, 192, 195, 197, 198, 199, 200, 202, 204, 205, 206, 209, 214, 215, 216, 217, 221, 225, 226, 227, 228, 229, 230, 234, 238, 240, 241, 242, 248, 259, 261, 276, 278, 281, 285], "give": [3, 4, 6, 12, 14, 18, 19, 20, 23, 25, 26, 27, 28, 29, 30, 35, 37, 42, 43, 49, 51, 52, 53, 54, 59, 60, 61, 62, 65, 66, 68, 70, 72, 73, 75, 76, 84, 85, 87, 88, 90, 93, 96, 99, 100, 101, 103, 106, 110, 118, 124, 141, 153, 168, 169, 171, 172, 176, 177, 179, 180, 182, 184, 188, 190, 192, 193, 194, 195, 196, 197, 199, 200, 202, 204, 205, 206, 209, 210, 211, 212, 216, 217, 218, 219, 221, 222, 225, 227, 228, 229, 240, 241, 242, 247, 258, 263, 278, 279, 281, 286, 287], "rudimentari": [3, 20, 202], "text": [3, 4, 6, 7, 11, 20, 32, 42, 51, 61, 65, 66, 68, 78, 85, 88, 91, 96, 100, 139, 179, 189, 194, 195, 196, 209, 216, 222, 225, 228, 229, 240], "pyglet": [3, 209], "pygletplot": [3, 195], "2d": [3, 10, 73, 74, 76, 103, 104, 106, 152, 184, 195, 209, 222, 234, 280], "3d": [3, 10, 34, 44, 73, 74, 103, 152, 175, 190, 195, 258, 260, 261, 262, 263], "evalu": [3, 6, 11, 16, 18, 19, 22, 30, 35, 36, 37, 40, 42, 60, 62, 65, 66, 68, 71, 75, 76, 85, 87, 90, 93, 96, 100, 101, 102, 110, 114, 116, 124, 138, 139, 149, 151, 153, 155, 160, 163, 171, 174, 194, 195, 199, 200, 202, 203, 205, 209, 210, 215, 216, 217, 219, 221, 222, 225, 227, 228, 229, 231, 241, 242, 243, 248, 261, 266, 275, 276, 277, 278, 280, 282], "numer": [3, 6, 10, 11, 12, 14, 16, 18, 22, 23, 24, 25, 26, 29, 38, 40, 42, 59, 60, 65, 68, 72, 76, 83, 96, 100, 102, 106, 107, 108, 110, 118, 119, 120, 124, 126, 134, 138, 142, 146, 153, 156, 171, 178, 183, 193, 195, 199, 200, 202, 203, 204, 205, 208, 209, 218, 219, 221, 225, 227, 228, 234, 240, 241, 247, 248, 266, 275, 278, 282, 286], "variou": [3, 6, 7, 11, 16, 20, 24, 28, 40, 42, 44, 51, 59, 60, 65, 80, 85, 87, 90, 96, 121, 153, 157, 158, 169, 171, 183, 196, 197, 200, 201, 202, 204, 210, 216, 219, 222, 225, 226, 228, 242, 286], "primari": [3, 4, 6, 7, 18, 20, 60, 72, 90, 193, 196, 242, 248], "vehicl": 3, "between": [3, 4, 11, 15, 19, 20, 25, 28, 41, 42, 50, 51, 52, 54, 58, 60, 62, 65, 68, 70, 72, 73, 74, 75, 76, 77, 87, 89, 90, 93, 94, 96, 100, 101, 102, 106, 107, 108, 110, 118, 121, 123, 124, 127, 131, 133, 135, 138, 139, 141, 142, 143, 146, 147, 153, 160, 162, 163, 164, 168, 171, 172, 173, 174, 177, 179, 184, 185, 186, 188, 190, 192, 193, 195, 196, 198, 202, 204, 205, 209, 211, 221, 225, 226, 227, 228, 229, 230, 243, 248, 254, 257, 258, 261, 263, 278], "standard": [3, 7, 10, 11, 12, 18, 20, 25, 26, 28, 30, 42, 60, 64, 66, 68, 83, 85, 87, 88, 89, 90, 94, 96, 100, 101, 102, 113, 151, 155, 184, 190, 194, 196, 199, 200, 202, 209, 212, 217, 221, 222, 225, 228, 229, 242, 248, 251, 258, 263, 275, 278, 286], "wai": [3, 4, 5, 6, 7, 10, 11, 12, 15, 16, 17, 18, 19, 20, 23, 25, 28, 33, 41, 43, 44, 49, 51, 52, 53, 56, 60, 62, 65, 68, 76, 80, 84, 85, 87, 89, 93, 96, 99, 100, 102, 103, 106, 114, 119, 121, 123, 124, 128, 130, 131, 134, 138, 154, 168, 171, 172, 177, 179, 182, 183, 184, 186, 188, 190, 192, 195, 196, 197, 198, 199, 200, 202, 204, 205, 206, 208, 209, 216, 219, 221, 222, 225, 226, 228, 230, 231, 234, 235, 238, 242, 244, 247, 248, 251, 254, 258, 259, 260, 261, 263, 275, 276, 278, 279, 280, 281, 286, 287], "principl": [3, 61, 91, 100, 145, 194, 196, 197, 202, 218, 227], "pass": [3, 4, 5, 6, 11, 12, 14, 15, 18, 19, 20, 23, 24, 27, 30, 33, 34, 37, 40, 41, 42, 51, 52, 60, 61, 62, 64, 66, 67, 68, 70, 73, 74, 76, 87, 88, 90, 91, 93, 96, 97, 100, 102, 103, 108, 110, 115, 123, 124, 128, 141, 142, 146, 163, 164, 168, 169, 171, 172, 184, 189, 195, 196, 198, 199, 200, 202, 204, 205, 207, 209, 210, 216, 217, 221, 222, 225, 226, 227, 228, 229, 230, 233, 234, 235, 238, 240, 241, 242, 243, 245, 247, 248, 250, 253, 254, 275, 276, 281, 285, 286, 287], "appropri": [3, 6, 7, 10, 12, 16, 25, 29, 51, 60, 66, 75, 96, 114, 126, 163, 164, 174, 184, 192, 198, 199, 205, 206, 209, 215, 216, 221, 222, 227, 229, 234, 242, 259, 285], "namespac": [3, 6, 10, 33, 42, 43, 60, 200, 222, 225, 226, 240, 242, 243, 248], "dictionari": [3, 10, 11, 24, 30, 41, 42, 49, 51, 52, 58, 60, 65, 74, 76, 89, 91, 96, 99, 100, 102, 103, 116, 119, 120, 123, 124, 126, 128, 131, 136, 138, 164, 174, 184, 193, 195, 197, 200, 202, 204, 205, 207, 209, 216, 221, 222, 225, 226, 227, 228, 229, 233, 235, 240, 244, 247, 248, 254, 275, 282], "third": [3, 4, 14, 28, 42, 51, 52, 60, 68, 70, 74, 110, 118, 171, 177, 192, 197, 205, 219, 225, 228, 229, 245, 247, 276, 281], "argument": [3, 4, 5, 6, 11, 15, 18, 19, 20, 23, 27, 28, 29, 30, 35, 36, 37, 38, 39, 40, 41, 42, 43, 51, 52, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 73, 76, 77, 85, 87, 88, 90, 91, 93, 96, 99, 100, 102, 103, 108, 110, 118, 119, 123, 124, 136, 137, 141, 148, 151, 155, 157, 160, 163, 168, 169, 171, 172, 173, 174, 182, 189, 190, 194, 195, 196, 197, 199, 200, 202, 204, 205, 208, 209, 210, 211, 215, 216, 217, 218, 219, 221, 222, 225, 226, 227, 229, 233, 234, 240, 241, 242, 243, 244, 245, 247, 248, 250, 258, 259, 261, 275, 276, 281, 282, 286], "default": [3, 4, 6, 7, 11, 12, 18, 20, 25, 26, 28, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44, 50, 51, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 82, 87, 88, 90, 91, 93, 96, 97, 100, 101, 102, 103, 104, 106, 108, 110, 112, 114, 115, 116, 118, 119, 120, 124, 138, 147, 164, 166, 169, 171, 172, 174, 180, 183, 184, 186, 188, 189, 194, 195, 197, 198, 199, 200, 202, 204, 205, 206, 208, 209, 210, 211, 212, 216, 217, 218, 221, 222, 225, 226, 227, 228, 229, 234, 235, 240, 241, 242, 244, 245, 247, 248, 250, 254, 275, 276, 280, 282, 285, 286], "translat": [3, 10, 42, 51, 60, 69, 71, 75, 77, 101, 102, 110, 113, 118, 119, 131, 133, 135, 139, 192, 195, 209, 225, 227, 241, 242, 248, 250, 259], "numpi": [3, 6, 10, 11, 20, 26, 27, 28, 32, 42, 60, 83, 88, 101, 108, 124, 141, 158, 168, 198, 209, 229, 234, 241, 242, 248, 275, 278], "By": [3, 12, 18, 20, 25, 26, 28, 35, 37, 42, 50, 59, 60, 62, 64, 65, 68, 74, 75, 79, 83, 85, 90, 91, 96, 99, 100, 101, 102, 103, 104, 108, 115, 169, 174, 195, 197, 199, 200, 202, 204, 205, 206, 208, 209, 211, 216, 218, 221, 222, 225, 227, 228, 229, 233, 235, 236, 240, 243, 247, 248, 261, 275, 280, 281, 286], "produc": [3, 6, 7, 11, 19, 20, 24, 26, 27, 30, 41, 51, 60, 61, 73, 87, 90, 96, 184, 199, 204, 205, 209, 216, 225, 226, 227, 229, 238, 240, 244, 245, 247, 285], "behavior": [3, 4, 10, 11, 12, 20, 51, 60, 65, 68, 87, 102, 113, 114, 134, 138, 169, 196, 197, 204, 205, 209, 210, 214, 216, 218, 221, 238, 241, 243, 247, 248, 278], "backward": [3, 8, 16, 40, 60, 91, 96, 209, 247, 286], "scipi": [3, 11, 23, 26, 28, 42, 60, 68, 114, 141, 168, 209, 229, 241, 248, 275, 284], "special": [3, 6, 11, 13, 18, 20, 26, 30, 33, 34, 52, 60, 61, 63, 64, 65, 67, 75, 78, 85, 87, 91, 96, 141, 158, 163, 190, 196, 199, 202, 203, 204, 209, 218, 219, 221, 224, 225, 226, 227, 229, 240, 241, 242, 245, 247, 248, 258, 261, 263, 266, 276, 277, 281], "cupi": [3, 101], "cuda": [3, 101], "gpu": [3, 101, 141], "jax": [3, 101, 248], "xla": [3, 101], "program": [3, 7, 12, 18, 42, 44, 52, 141, 179, 194, 242, 244, 278, 280, 284, 286], "tpu": [3, 101], "compatibli": 3, "tensorflow": [3, 248], "learn": [3, 5, 7, 22, 30, 96, 139, 193, 218, 228, 275, 278, 279, 280, 284], "numexpr": [3, 248], "fast": [3, 18, 42, 60, 87, 95, 96, 100, 146, 200, 201, 202, 203, 204, 205, 206, 212, 216, 225, 227, 244, 247, 248], "alreadi": [3, 4, 10, 12, 18, 20, 24, 25, 30, 32, 51, 52, 60, 61, 69, 70, 73, 74, 76, 85, 87, 91, 97, 100, 106, 111, 115, 124, 138, 143, 169, 171, 174, 190, 192, 193, 195, 198, 199, 202, 204, 208, 212, 218, 219, 221, 225, 228, 229, 235, 259, 261, 276, 278, 279, 280, 284, 285, 286, 287], "number": [3, 4, 5, 6, 7, 10, 11, 14, 15, 18, 20, 24, 25, 26, 28, 29, 30, 34, 36, 37, 40, 41, 42, 43, 44, 45, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 61, 62, 65, 66, 68, 70, 73, 74, 75, 76, 77, 79, 87, 88, 89, 90, 91, 93, 96, 97, 99, 101, 102, 104, 106, 108, 110, 111, 112, 114, 119, 120, 123, 124, 128, 138, 139, 141, 147, 150, 153, 154, 157, 158, 159, 160, 162, 163, 168, 169, 170, 171, 172, 174, 175, 176, 178, 179, 182, 183, 184, 188, 189, 190, 192, 193, 194, 195, 197, 198, 200, 201, 202, 203, 205, 206, 209, 211, 215, 216, 217, 218, 219, 221, 222, 225, 227, 228, 229, 230, 234, 235, 240, 242, 244, 247, 250, 254, 257, 258, 260, 261, 263, 266, 272, 275, 276, 278, 280, 281, 282, 286], "languag": [3, 7, 11, 12, 16, 20, 42, 66, 96, 102, 114, 124, 141, 209, 214, 229, 241, 242, 278, 280, 282, 284, 286], "valid": [3, 6, 7, 10, 18, 19, 20, 24, 35, 37, 39, 40, 41, 42, 53, 59, 60, 65, 66, 76, 96, 100, 116, 118, 119, 124, 126, 139, 143, 147, 166, 171, 181, 184, 189, 193, 199, 202, 205, 208, 209, 217, 221, 222, 225, 227, 228, 229, 248, 282, 286], "rather": [3, 4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 25, 28, 29, 30, 33, 38, 42, 43, 51, 52, 53, 60, 64, 66, 71, 76, 78, 85, 90, 91, 93, 96, 100, 102, 123, 131, 141, 154, 168, 172, 174, 183, 192, 196, 199, 202, 205, 207, 212, 219, 222, 224, 225, 228, 229, 244, 247, 248, 251, 263, 278, 280, 281], "string": [3, 4, 6, 7, 11, 12, 20, 35, 41, 42, 44, 49, 60, 61, 62, 63, 64, 67, 73, 83, 88, 89, 90, 93, 96, 100, 102, 103, 106, 108, 114, 115, 118, 121, 145, 154, 158, 168, 172, 176, 182, 183, 184, 188, 189, 190, 195, 198, 200, 204, 209, 210, 216, 221, 225, 229, 230, 233, 234, 235, 240, 241, 242, 247, 248, 250, 252, 254, 256, 258, 277, 278, 281, 285], "repres": [3, 10, 11, 12, 15, 18, 19, 20, 24, 26, 34, 36, 38, 41, 42, 43, 44, 49, 50, 51, 52, 53, 55, 56, 59, 60, 61, 62, 65, 66, 68, 70, 71, 73, 75, 76, 77, 82, 83, 87, 89, 90, 91, 93, 96, 100, 102, 103, 104, 107, 108, 110, 115, 118, 119, 121, 123, 124, 126, 127, 128, 129, 132, 134, 136, 137, 138, 139, 141, 143, 145, 146, 148, 160, 161, 163, 167, 168, 171, 172, 174, 176, 179, 180, 181, 182, 183, 184, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 200, 202, 205, 207, 209, 211, 212, 215, 216, 217, 219, 221, 222, 225, 227, 228, 229, 231, 233, 234, 235, 242, 244, 247, 248, 254, 257, 261, 263, 271, 276, 278, 280, 281, 286, 287], "take": [3, 4, 5, 7, 10, 11, 12, 16, 18, 19, 20, 23, 24, 25, 26, 37, 40, 42, 43, 45, 50, 51, 55, 59, 60, 61, 62, 66, 68, 72, 73, 83, 87, 89, 90, 91, 96, 100, 101, 102, 103, 106, 110, 114, 118, 119, 121, 123, 124, 126, 138, 139, 141, 143, 157, 160, 163, 164, 168, 170, 171, 172, 173, 174, 176, 179, 182, 183, 184, 185, 186, 189, 192, 193, 195, 196, 197, 198, 199, 200, 202, 205, 206, 209, 212, 215, 216, 217, 218, 219, 221, 222, 225, 227, 228, 229, 231, 234, 240, 241, 243, 244, 247, 248, 254, 256, 257, 275, 276, 278, 280, 281, 282, 286], "within": [3, 7, 10, 11, 18, 27, 40, 41, 42, 60, 66, 73, 76, 90, 91, 93, 100, 101, 103, 131, 169, 183, 184, 192, 193, 197, 199, 205, 207, 217, 225, 227, 228, 229, 240, 241, 250], "case": [3, 4, 6, 7, 10, 11, 12, 16, 18, 19, 24, 25, 26, 27, 28, 29, 30, 40, 41, 42, 43, 45, 48, 51, 52, 56, 59, 60, 61, 62, 64, 65, 66, 68, 72, 75, 76, 77, 78, 82, 85, 87, 90, 91, 93, 96, 97, 100, 101, 102, 104, 110, 114, 118, 119, 124, 126, 127, 128, 129, 135, 137, 139, 141, 147, 158, 164, 169, 171, 173, 174, 179, 180, 188, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 204, 205, 206, 208, 209, 214, 216, 217, 218, 219, 221, 222, 224, 225, 226, 227, 229, 230, 233, 235, 238, 240, 242, 243, 245, 247, 248, 249, 250, 251, 254, 257, 258, 276, 280, 281, 282, 285, 286, 287], "subpackag": [3, 265], "f2py": [3, 42, 101, 241, 242], "ufuncifi": [3, 42, 241], "cython": [3, 42, 101, 141, 241], "codegen": [3, 20, 101, 209, 241, 246, 273], "relat": [3, 4, 6, 7, 11, 19, 35, 37, 38, 40, 43, 44, 50, 51, 58, 62, 65, 66, 76, 82, 85, 87, 91, 96, 100, 106, 113, 119, 128, 131, 134, 135, 141, 143, 148, 156, 158, 184, 188, 192, 194, 195, 196, 202, 204, 205, 206, 208, 209, 213, 215, 216, 219, 221, 222, 224, 225, 227, 228, 229, 247, 286], "reli": [3, 10, 12, 42, 96, 101, 107, 202, 208, 209, 216, 221, 228, 243, 248, 282], "llvm": 3, "gcc": [3, 242], "ifort": 3, "therefor": [3, 4, 6, 20, 25, 28, 43, 51, 56, 60, 64, 68, 76, 89, 100, 110, 118, 190, 193, 194, 195, 199, 202, 205, 209, 225, 228, 229, 230, 235, 254, 256, 258, 259, 261, 263], "aesara": [3, 10, 42, 141], "aesaracod": [3, 10, 42, 101, 209], "aeseara": 3, "previous": [3, 4, 10, 59, 118, 132, 135, 190, 208, 221, 229, 261], "theano": [3, 10, 141, 285], "return": [3, 4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 24, 25, 27, 28, 29, 30, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 48, 49, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 82, 83, 85, 87, 89, 90, 91, 92, 93, 96, 97, 99, 100, 102, 103, 106, 108, 110, 111, 112, 113, 115, 116, 118, 119, 120, 121, 123, 124, 126, 128, 132, 136, 138, 139, 141, 143, 145, 146, 147, 148, 150, 151, 155, 158, 159, 160, 163, 164, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 180, 181, 182, 183, 184, 185, 186, 188, 190, 193, 194, 195, 196, 197, 198, 199, 200, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 221, 222, 224, 225, 226, 227, 229, 230, 233, 234, 235, 236, 238, 240, 241, 242, 243, 244, 245, 247, 248, 250, 251, 252, 254, 257, 259, 261, 275, 276, 281, 282, 285, 286, 287], "graph": [3, 6, 11, 52, 68, 89, 96, 101, 198, 209, 228, 247, 281, 285], "object": [3, 4, 6, 7, 11, 12, 17, 18, 19, 20, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 50, 51, 52, 53, 54, 55, 59, 60, 62, 65, 66, 68, 70, 71, 72, 73, 75, 76, 77, 85, 87, 90, 91, 93, 94, 96, 101, 102, 103, 104, 108, 110, 111, 114, 115, 118, 119, 120, 121, 123, 124, 128, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 147, 148, 149, 157, 158, 160, 168, 169, 173, 174, 176, 177, 180, 181, 183, 184, 188, 189, 192, 193, 195, 196, 197, 198, 199, 200, 202, 204, 205, 209, 211, 212, 215, 216, 217, 218, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 240, 241, 242, 243, 244, 247, 248, 251, 252, 257, 258, 259, 264, 265, 269, 275, 276, 278, 280, 281, 282, 285, 286], "llvmlite": 3, "llvmjitcod": 3, "jit": [3, 218], "around": [3, 4, 6, 7, 10, 11, 12, 19, 20, 32, 40, 49, 52, 60, 61, 62, 64, 66, 69, 76, 80, 99, 100, 106, 115, 118, 134, 138, 142, 193, 199, 202, 204, 209, 211, 216, 222, 225, 228, 229, 240, 254, 256, 276, 278, 280], "llvm_callabl": 3, "callabl": [3, 12, 42, 51, 96, 102, 159, 204, 209, 210, 221, 238, 241, 242, 247, 248, 249], "unlik": [3, 6, 11, 12, 18, 19, 28, 39, 61, 87, 96, 100, 102, 124, 192, 202, 209, 222, 225, 228, 244, 245, 278, 280, 281, 282, 285], "tensorflow_cod": 3, "order": [3, 4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 23, 28, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 70, 73, 76, 77, 79, 82, 85, 87, 88, 89, 90, 91, 96, 97, 100, 101, 102, 103, 104, 110, 111, 114, 118, 119, 123, 124, 125, 126, 127, 135, 136, 137, 138, 139, 147, 151, 155, 158, 168, 169, 170, 171, 172, 173, 174, 179, 183, 184, 186, 188, 189, 192, 193, 195, 196, 197, 198, 199, 200, 202, 204, 206, 208, 209, 210, 211, 212, 215, 217, 221, 222, 225, 226, 227, 228, 229, 230, 231, 234, 235, 236, 240, 241, 242, 244, 247, 248, 250, 254, 256, 258, 259, 264, 276, 278, 279, 281, 285, 286, 287], "assum": [3, 6, 11, 12, 15, 18, 20, 25, 29, 37, 42, 43, 44, 49, 51, 59, 60, 61, 62, 65, 66, 68, 70, 77, 78, 85, 87, 96, 100, 103, 106, 110, 123, 124, 130, 136, 137, 138, 139, 141, 147, 169, 173, 174, 184, 188, 190, 196, 197, 199, 202, 205, 207, 209, 216, 217, 219, 221, 222, 225, 226, 228, 229, 233, 234, 235, 242, 247, 250, 257, 259, 263, 266, 279, 281, 284, 286, 287], "wurlitz": 3, "allow": [3, 4, 7, 10, 11, 12, 18, 20, 28, 38, 41, 42, 43, 44, 51, 53, 56, 59, 60, 61, 64, 66, 68, 70, 71, 72, 85, 88, 90, 91, 93, 94, 96, 100, 101, 102, 104, 118, 119, 124, 126, 134, 138, 139, 141, 146, 158, 174, 178, 179, 180, 193, 195, 196, 199, 200, 202, 204, 205, 206, 209, 214, 216, 217, 218, 221, 222, 225, 227, 228, 229, 230, 234, 240, 243, 245, 247, 248, 259, 278, 281], "captur": [3, 60, 247], "output": [3, 6, 7, 10, 12, 13, 16, 18, 20, 25, 30, 41, 42, 60, 61, 68, 84, 87, 88, 90, 91, 93, 96, 100, 101, 102, 107, 110, 119, 123, 124, 132, 138, 141, 142, 146, 147, 158, 170, 174, 183, 184, 188, 189, 190, 193, 199, 202, 205, 209, 210, 219, 221, 222, 224, 225, 227, 229, 234, 240, 241, 242, 244, 247, 248, 254, 278, 280, 281, 282, 285, 286, 287], "suit": [3, 4, 7, 18, 20, 25, 26, 41, 195, 205, 238, 240], "stat": [3, 265, 272], "sampl": [3, 8, 16, 51, 63, 108, 158, 195, 209, 229, 276, 280], "At": [3, 10, 18, 20, 25, 40, 56, 66, 68, 87, 100, 103, 104, 114, 179, 183, 193, 204, 219, 248], "least": [3, 4, 7, 10, 14, 18, 38, 40, 42, 51, 60, 66, 72, 84, 85, 87, 96, 100, 101, 119, 154, 168, 176, 196, 197, 199, 200, 202, 204, 205, 216, 218, 221, 225, 227, 228, 229, 242, 286], "random": [3, 6, 10, 44, 49, 51, 52, 58, 61, 70, 73, 74, 95, 96, 100, 158, 170, 195, 202, 209, 239, 240, 243, 247, 278, 282, 286], "pymc": [3, 229], "manipul": [3, 11, 15, 16, 18, 24, 26, 28, 41, 42, 43, 51, 60, 66, 68, 85, 100, 101, 117, 124, 134, 139, 172, 192, 198, 199, 200, 203, 208, 209, 211, 218, 221, 232, 247, 265, 271, 272, 275, 276, 277, 278, 279, 280, 282, 285, 286], "use_symengin": 3, "physic": [3, 6, 16, 42, 53, 96, 100, 103, 104, 106, 107, 108, 109, 110, 112, 113, 115, 116, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 184, 185, 186, 188, 189, 194, 203, 229, 244, 247, 261, 280, 286], "mechan": [3, 20, 60, 83, 87, 103, 115, 116, 118, 119, 120, 121, 123, 124, 126, 127, 128, 129, 131, 132, 133, 156, 160, 163, 169, 171, 172, 173, 176, 183, 184, 191, 194, 271], "liealgebra": [3, 89], "thing": [3, 4, 6, 7, 10, 11, 12, 13, 18, 19, 20, 23, 28, 31, 38, 42, 50, 51, 52, 60, 62, 72, 88, 89, 90, 91, 96, 101, 114, 121, 124, 138, 141, 158, 174, 179, 192, 193, 206, 208, 216, 217, 218, 221, 225, 228, 233, 243, 245, 247, 275, 276, 278, 280, 281, 282, 285, 286], "configur": [3, 4, 5, 10, 52, 90, 110, 118, 119, 127, 128, 131, 133, 134, 136, 138, 209], "otherwis": [3, 4, 14, 18, 19, 20, 40, 41, 42, 51, 52, 56, 59, 60, 61, 64, 66, 68, 69, 70, 73, 74, 75, 76, 85, 87, 89, 90, 92, 96, 99, 100, 102, 108, 110, 112, 115, 123, 124, 159, 164, 170, 188, 191, 192, 196, 200, 202, 204, 205, 207, 209, 211, 212, 214, 215, 217, 221, 222, 225, 226, 227, 228, 229, 230, 238, 240, 242, 247, 248, 275, 276, 285], "ordinari": [3, 18, 19, 22, 40, 42, 51, 60, 64, 65, 66, 68, 78, 82, 83, 87, 97, 110, 134, 196, 198, 199, 208, 215, 225, 230, 244, 280, 286], "x": [3, 4, 6, 7, 10, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 49, 51, 52, 56, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 96, 99, 100, 101, 102, 103, 104, 106, 108, 110, 113, 114, 115, 116, 118, 119, 120, 121, 123, 124, 126, 127, 128, 129, 131, 132, 133, 135, 136, 137, 138, 139, 141, 142, 146, 148, 149, 150, 151, 152, 154, 155, 158, 163, 164, 169, 171, 172, 173, 174, 175, 183, 184, 185, 186, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 221, 222, 224, 225, 226, 227, 228, 229, 230, 233, 234, 235, 236, 240, 241, 242, 243, 245, 247, 248, 250, 254, 257, 258, 259, 260, 261, 263, 264, 275, 276, 278, 280, 281, 282, 285, 286, 287], "still": [3, 4, 6, 7, 10, 11, 12, 18, 20, 32, 33, 41, 52, 59, 60, 61, 68, 72, 87, 91, 96, 124, 174, 193, 195, 196, 197, 202, 204, 209, 216, 218, 219, 221, 225, 227, 228, 234, 240, 247, 261, 282], "matchpi": 3, "pattern": [3, 10, 11, 12, 18, 20, 60, 85, 87, 90, 91, 102, 168, 199, 219, 221, 225, 227, 276, 281], "anywher": [3, 4, 6, 10, 18, 42, 60, 68, 74, 174, 250, 280], "els": [3, 4, 10, 11, 12, 18, 19, 20, 23, 42, 50, 52, 56, 60, 61, 68, 70, 74, 76, 77, 85, 87, 90, 96, 100, 110, 174, 184, 195, 200, 204, 205, 209, 210, 217, 221, 225, 227, 228, 233, 235, 240, 247, 250, 254, 257, 275, 281], "mathemat": [3, 4, 7, 8, 10, 11, 15, 18, 20, 23, 25, 27, 30, 31, 36, 37, 40, 42, 43, 46, 50, 52, 59, 60, 61, 62, 65, 66, 67, 68, 73, 74, 85, 87, 90, 93, 96, 100, 101, 102, 110, 111, 114, 128, 140, 179, 190, 192, 193, 196, 197, 199, 200, 203, 208, 209, 217, 218, 222, 225, 228, 229, 234, 241, 242, 248, 254, 258, 261, 263, 275, 278, 279, 280, 281, 284, 286], "softwar": [3, 7, 87, 203, 280], "itself": [3, 4, 6, 7, 10, 11, 20, 38, 49, 51, 52, 58, 60, 62, 65, 66, 73, 77, 82, 100, 119, 123, 124, 139, 164, 171, 190, 192, 195, 196, 199, 202, 204, 205, 209, 217, 218, 221, 228, 233, 234, 235, 242, 244, 247, 263, 280], "_sage_": 3, "basic": [3, 4, 5, 6, 7, 10, 11, 18, 20, 30, 34, 36, 41, 42, 43, 48, 51, 55, 58, 59, 63, 66, 76, 78, 83, 84, 85, 90, 91, 94, 97, 110, 118, 124, 136, 137, 139, 141, 142, 148, 158, 172, 179, 182, 187, 190, 191, 193, 195, 196, 198, 200, 201, 202, 204, 206, 207, 209, 210, 216, 221, 222, 225, 226, 227, 228, 229, 240, 242, 247, 248, 252, 260, 261, 262, 269, 271, 272, 276, 277, 278, 279, 284], "beyond": [3, 18, 23, 54, 76, 100, 138, 196, 199, 218, 221, 282], "control": [3, 5, 10, 12, 14, 18, 20, 41, 43, 60, 61, 64, 85, 90, 91, 138, 141, 154, 158, 169, 170, 174, 178, 205, 206, 210, 217, 222, 228, 247, 271, 275], "pytest": [3, 4, 10, 237, 243, 245, 248, 273], "entir": [3, 4, 18, 51, 60, 61, 64, 65, 68, 74, 76, 85, 99, 116, 135, 139, 184, 196, 198, 204, 217, 234, 243, 245, 280, 286], "import_modul": 3, "own": [3, 5, 6, 12, 20, 36, 44, 51, 52, 60, 76, 104, 118, 124, 141, 204, 209, 216, 221, 225, 244, 247, 248, 280], "runner": [3, 240], "access": [3, 6, 7, 11, 12, 18, 20, 35, 36, 37, 42, 60, 68, 89, 90, 93, 96, 101, 104, 110, 111, 118, 119, 123, 124, 142, 183, 184, 190, 193, 195, 199, 200, 202, 204, 221, 225, 229, 230, 233, 241, 242, 258, 261, 281, 285], "script": [3, 5, 6, 11, 33, 68, 189, 241], "cloudpickl": 3, "effect": [3, 6, 10, 20, 27, 32, 51, 53, 60, 77, 85, 87, 91, 96, 103, 124, 126, 138, 146, 174, 184, 195, 199, 202, 206, 208, 225, 278], "pickl": 3, "util": [3, 4, 5, 6, 7, 23, 25, 40, 47, 49, 51, 52, 65, 66, 71, 72, 73, 76, 90, 91, 100, 101, 144, 178, 181, 198, 202, 206, 209, 221, 222, 238, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 266, 271, 272], "test_pickl": 3, "py": [3, 4, 5, 6, 12, 18, 32, 41, 60, 71, 85, 87, 96, 152, 154, 195, 198, 200, 206, 209, 216, 219, 225, 226, 235, 238, 240, 245, 248], "pdf": [3, 7, 8, 31, 40, 41, 51, 61, 63, 65, 82, 87, 96, 100, 103, 104, 108, 195, 203, 208, 209, 212, 218, 221, 222, 225, 229, 247, 254], "view": [3, 6, 8, 11, 30, 42, 43, 60, 96, 103, 176, 179, 193, 195, 202, 209, 225, 228, 242, 244, 247], "host": [3, 7], "onlin": [3, 6, 119, 222, 247], "sympy_benchmark": 3, "readm": 3, "yourself": [3, 20, 30, 42, 126, 243, 276], "reproduc": [3, 28, 205, 240, 286], "add": [3, 4, 5, 6, 10, 11, 12, 15, 18, 34, 36, 40, 42, 49, 51, 56, 61, 64, 67, 75, 77, 85, 89, 93, 96, 100, 103, 106, 115, 124, 141, 152, 158, 168, 173, 174, 177, 192, 193, 195, 198, 199, 200, 202, 204, 205, 206, 209, 210, 219, 221, 222, 225, 226, 228, 229, 231, 233, 234, 235, 243, 248, 252, 276, 278, 281, 285, 286], "asv": 3, "airspe": 3, "veloc": [3, 114, 115, 118, 119, 121, 126, 127, 128, 131, 132, 133, 135, 138, 139, 141, 148, 176, 179, 183, 184, 188, 190, 193, 261, 263], "describ": [4, 6, 7, 10, 12, 18, 19, 20, 28, 41, 43, 50, 51, 52, 54, 55, 58, 59, 60, 61, 65, 68, 70, 75, 76, 85, 87, 91, 96, 99, 100, 110, 114, 118, 119, 121, 123, 124, 127, 128, 129, 131, 133, 134, 135, 136, 137, 138, 139, 153, 174, 178, 179, 183, 184, 190, 192, 193, 196, 199, 202, 204, 210, 216, 219, 221, 222, 225, 228, 229, 233, 242, 247, 248, 254, 256, 261, 276], "properli": [4, 11, 20, 41, 60, 66, 72, 85, 96, 120, 124, 136, 151, 155, 158, 172, 197, 199, 209, 225, 228, 238, 242, 248, 282, 287], "current": [4, 7, 10, 12, 18, 23, 24, 34, 37, 40, 41, 42, 43, 44, 51, 54, 55, 57, 58, 59, 60, 62, 66, 68, 70, 72, 75, 80, 83, 85, 87, 89, 91, 96, 100, 102, 103, 107, 114, 118, 124, 134, 168, 173, 174, 178, 182, 193, 195, 196, 197, 198, 200, 202, 205, 206, 208, 209, 210, 216, 219, 221, 222, 224, 225, 226, 227, 228, 229, 235, 240, 241, 242, 244, 258, 272, 282, 287], "updat": [4, 10, 12, 32, 60, 128, 154, 164, 167, 168, 170, 194, 202, 205, 209, 222, 235, 245], "continu": [4, 6, 7, 10, 16, 19, 20, 40, 42, 50, 52, 54, 60, 65, 66, 68, 85, 88, 91, 100, 107, 108, 169, 172, 189, 200, 202, 205, 222, 224, 225, 233, 277], "someon": [4, 225, 244, 279], "warn": [4, 6, 12, 20, 60, 61, 75, 102, 184, 193, 197, 209, 225, 227, 238, 240, 242, 246, 247, 273, 282], "screen": [4, 11, 88, 189, 193, 240, 285], "indic": [4, 6, 12, 15, 18, 25, 29, 40, 41, 42, 43, 44, 49, 51, 52, 53, 55, 56, 58, 59, 60, 63, 64, 65, 68, 70, 75, 76, 85, 87, 90, 91, 93, 96, 99, 100, 111, 123, 128, 158, 169, 171, 172, 174, 179, 183, 184, 194, 198, 199, 200, 204, 205, 206, 209, 216, 217, 218, 221, 222, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 240, 241, 242, 247, 282], "remov": [4, 10, 18, 23, 35, 36, 51, 54, 58, 60, 64, 66, 75, 76, 85, 90, 91, 96, 100, 103, 106, 115, 118, 131, 133, 138, 158, 174, 200, 202, 205, 207, 208, 209, 221, 222, 225, 227, 228, 230, 231, 241, 242, 243, 245, 247, 248, 275, 286], "futur": [4, 12, 18, 19, 42, 43, 60, 85, 87, 91, 96, 102, 118, 123, 126, 134, 138, 174, 178, 191, 195, 197, 208, 209, 221, 225, 234, 240, 243, 245, 248, 271, 281, 287], "chanc": [4, 12, 19, 60, 88, 219, 229, 281], "break": [4, 6, 10, 20, 41, 42, 52, 60, 61, 100, 192, 206, 209, 217, 247], "opportun": [4, 6, 221], "messag": [4, 10, 61, 88, 243, 245], "wrong": [4, 7, 10, 51, 60, 61, 68, 70, 96, 184, 199, 225, 243, 278, 282], "answer": [4, 18, 20, 28, 51, 60, 64, 82, 85, 87, 90, 96, 100, 179, 202, 206, 218, 219, 221, 227, 229, 244, 250, 280, 282, 286], "made": [4, 7, 10, 11, 12, 18, 20, 29, 54, 56, 60, 61, 66, 69, 70, 73, 76, 77, 87, 90, 96, 100, 102, 124, 135, 138, 141, 193, 196, 200, 202, 204, 205, 209, 210, 216, 217, 218, 221, 225, 227, 228, 229, 242, 247, 250, 263, 281], "lightli": 4, "fix": [4, 6, 9, 10, 42, 51, 53, 56, 58, 61, 65, 68, 72, 89, 103, 104, 106, 115, 118, 121, 126, 135, 141, 158, 163, 167, 170, 174, 179, 184, 188, 192, 193, 195, 199, 202, 204, 205, 206, 209, 215, 219, 227, 229, 247, 254, 256], "worth": [4, 18, 20, 184, 259, 261], "pain": 4, "frustrat": 4, "go": [4, 5, 6, 7, 20, 32, 41, 42, 51, 61, 65, 66, 85, 119, 124, 126, 139, 141, 142, 168, 179, 188, 195, 204, 205, 216, 219, 225, 278, 280, 281, 284, 286], "seek": [4, 227], "stabl": [4, 6, 20, 60, 88, 96, 102, 106, 110, 275], "done": [4, 6, 10, 11, 12, 16, 20, 36, 37, 39, 40, 41, 42, 51, 53, 58, 60, 61, 62, 65, 68, 71, 72, 85, 87, 91, 96, 100, 118, 124, 126, 132, 139, 141, 160, 169, 170, 171, 174, 176, 177, 184, 190, 192, 193, 195, 196, 198, 202, 205, 206, 208, 209, 210, 218, 221, 222, 225, 227, 228, 229, 234, 235, 240, 241, 244, 248, 258, 259, 275, 278, 280, 281, 282], "exist": [4, 10, 11, 16, 18, 20, 27, 30, 40, 41, 44, 51, 60, 64, 70, 72, 75, 76, 77, 78, 87, 90, 96, 100, 106, 164, 190, 193, 195, 196, 197, 198, 202, 204, 209, 216, 217, 219, 222, 225, 227, 228, 240, 248, 259, 280, 282, 287], "necessarili": [4, 6, 18, 38, 60, 61, 62, 85, 87, 90, 119, 196, 197, 204, 205, 207, 221, 225, 227, 228], "supplant": 4, "old": [4, 10, 11, 12, 60, 61, 62, 88, 138, 143, 178, 179, 189, 195, 196, 200, 209, 210, 221, 225, 228, 230, 275], "sometim": [4, 6, 7, 11, 12, 18, 20, 28, 41, 42, 60, 65, 68, 84, 85, 110, 134, 138, 166, 174, 193, 196, 199, 204, 209, 211, 216, 218, 222, 225, 227, 238, 247, 275, 282], "alongsid": [4, 10, 20, 93], "newer": [4, 11, 192, 227], "solveset": [4, 20, 27, 30, 141, 207, 223, 224, 227, 266, 287], "superior": [4, 209], "replac": [4, 6, 10, 11, 12, 18, 40, 42, 51, 59, 60, 61, 64, 65, 66, 68, 70, 74, 87, 90, 91, 96, 100, 101, 102, 114, 116, 118, 141, 163, 169, 184, 196, 202, 205, 206, 210, 216, 218, 219, 221, 225, 227, 228, 235, 236, 247, 248, 250, 275, 284], "older": [4, 7, 11, 83, 124, 199, 209, 227], "solv": [4, 6, 10, 11, 12, 13, 16, 18, 20, 21, 42, 44, 56, 59, 60, 68, 73, 85, 87, 91, 92, 96, 103, 105, 106, 118, 119, 120, 124, 127, 128, 131, 133, 134, 136, 138, 141, 177, 198, 202, 206, 207, 208, 209, 211, 221, 222, 224, 225, 226, 229, 271, 276, 277, 280, 282, 285], "remain": [4, 10, 11, 20, 36, 37, 42, 51, 52, 54, 56, 60, 61, 66, 85, 91, 100, 102, 111, 124, 173, 190, 192, 193, 204, 205, 206, 215, 218, 219, 225, 226, 227, 229, 231, 235, 244, 247, 248, 258, 263, 275, 278, 280, 281, 282], "intact": [4, 10, 42, 241], "cogniz": 4, "properti": [4, 11, 15, 20, 26, 28, 36, 37, 40, 41, 42, 43, 44, 48, 49, 51, 52, 53, 54, 55, 59, 60, 61, 62, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 83, 85, 87, 91, 93, 96, 100, 103, 104, 106, 107, 110, 115, 118, 119, 121, 123, 139, 141, 143, 145, 148, 149, 152, 153, 158, 159, 160, 162, 163, 170, 172, 174, 176, 179, 181, 182, 184, 185, 186, 190, 193, 194, 195, 197, 198, 199, 200, 202, 204, 205, 208, 211, 212, 215, 216, 217, 219, 222, 225, 228, 229, 234, 235, 240, 242, 243, 254, 257, 258, 259, 261, 263, 282], "attr": [4, 42], "imposs": [4, 6, 10, 11, 20, 60, 199, 218, 225, 226, 238, 278, 286], "later": [4, 10, 16, 42, 51, 85, 90, 91, 114, 120, 121, 126, 128, 129, 136, 138, 139, 141, 148, 183, 192, 199, 202, 208, 209, 210, 219, 221, 225, 244, 258, 275, 276, 278, 280, 281, 286], "unsur": [4, 6], "about": [4, 5, 6, 7, 10, 11, 12, 13, 16, 18, 19, 20, 26, 28, 30, 31, 32, 34, 35, 37, 38, 41, 42, 51, 52, 53, 54, 60, 64, 66, 68, 70, 71, 72, 74, 75, 76, 80, 82, 86, 87, 89, 96, 100, 103, 104, 110, 114, 115, 116, 118, 119, 120, 121, 123, 124, 128, 138, 139, 169, 171, 172, 174, 178, 183, 184, 192, 193, 194, 196, 198, 199, 204, 206, 209, 211, 216, 221, 222, 223, 225, 229, 233, 234, 240, 241, 242, 243, 244, 245, 254, 256, 258, 261, 262, 269, 272, 275, 277, 278, 280, 281, 282, 286], "mark": [4, 6, 7, 108, 147, 159, 222, 238, 243, 245], "explicitli": [4, 10, 11, 18, 20, 42, 51, 52, 60, 61, 63, 66, 68, 73, 77, 93, 96, 101, 110, 124, 183, 184, 195, 197, 199, 200, 202, 205, 209, 221, 225, 227, 245, 278, 282, 285, 287], "privat": [4, 6, 60, 61, 124, 195, 242], "experiment": [4, 221], "With": [4, 12, 19, 32, 42, 59, 60, 64, 85, 100, 127, 128, 129, 135, 137, 138, 147, 171, 174, 193, 195, 196, 197, 199, 200, 207, 208, 209, 216, 221, 230, 247, 280, 281], "being": [4, 7, 10, 11, 12, 14, 18, 19, 38, 40, 42, 51, 52, 58, 59, 60, 61, 65, 66, 68, 70, 72, 73, 76, 77, 85, 90, 91, 96, 97, 100, 103, 104, 106, 114, 123, 124, 126, 138, 139, 141, 142, 170, 179, 186, 190, 192, 193, 194, 195, 196, 198, 199, 204, 205, 206, 208, 209, 218, 219, 221, 222, 225, 226, 227, 228, 229, 235, 238, 240, 244, 245, 247, 248, 250, 254, 259, 263, 280, 282], "decid": [4, 6, 16, 18, 19, 20, 28, 41, 59, 91, 114, 138, 167, 178, 199, 202, 204, 205, 209, 225, 228, 242, 282], "reason": [4, 7, 10, 11, 14, 18, 19, 20, 27, 42, 52, 58, 60, 64, 68, 85, 88, 94, 96, 119, 120, 124, 126, 131, 134, 138, 145, 179, 189, 193, 199, 202, 203, 206, 209, 217, 219, 221, 225, 228, 238, 244, 245, 247, 248, 275, 276, 280, 281, 282], "confus": [4, 7, 10, 11, 18, 24, 60, 65, 90, 147, 193, 197, 205, 228, 275, 276, 278], "unnecessari": [4, 6, 7, 38, 42, 205, 208, 229, 240, 279], "redund": [4, 18, 51, 58, 90, 96, 225, 242], "usabl": [4, 199, 200, 209, 228, 280], "breakag": 4, "serious": 4, "taken": [4, 11, 42, 43, 48, 51, 58, 59, 60, 65, 66, 68, 77, 91, 100, 110, 112, 114, 115, 138, 141, 171, 177, 184, 188, 194, 195, 199, 204, 205, 209, 212, 216, 218, 219, 228, 229, 234, 242, 247, 254], "commun": [4, 7, 32, 194, 225, 227, 229, 282], "inde": [4, 16, 20, 48, 51, 59, 85, 196, 219, 225, 236, 240, 280], "second": [4, 7, 10, 11, 12, 16, 18, 19, 20, 23, 25, 26, 28, 30, 33, 37, 40, 42, 51, 52, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 68, 70, 73, 74, 76, 87, 96, 100, 101, 103, 104, 108, 110, 111, 114, 115, 118, 119, 124, 128, 131, 133, 134, 135, 137, 139, 145, 147, 148, 151, 155, 160, 163, 168, 169, 171, 172, 177, 179, 181, 183, 184, 185, 192, 193, 195, 198, 199, 202, 203, 204, 205, 209, 211, 219, 221, 222, 225, 227, 228, 229, 230, 231, 247, 248, 254, 257, 258, 259, 271, 275, 280, 281, 282], "know": [4, 6, 7, 10, 11, 12, 18, 19, 20, 26, 28, 29, 30, 35, 37, 41, 52, 60, 61, 64, 72, 77, 85, 87, 96, 100, 121, 124, 142, 168, 172, 176, 177, 179, 183, 184, 192, 193, 195, 205, 206, 208, 209, 219, 221, 225, 227, 228, 229, 243, 247, 248, 259, 275, 276, 278, 279, 280, 281, 284, 286], "count": [4, 7, 11, 52, 59, 60, 61, 65, 70, 90, 96, 99, 100, 169, 205, 217, 218, 221, 228, 229, 235, 244, 247], "basi": [4, 60, 62, 89, 93, 96, 115, 131, 133, 159, 168, 169, 171, 174, 176, 179, 182, 183, 184, 190, 192, 194, 196, 198, 200, 205, 208, 219, 221, 227, 228, 230, 235, 257, 258, 261, 284], "exact": [4, 10, 11, 12, 18, 20, 27, 38, 59, 60, 61, 64, 70, 75, 82, 85, 87, 91, 96, 103, 141, 168, 199, 200, 202, 205, 216, 221, 225, 227, 240, 250, 278, 280, 285], "rule": [4, 7, 10, 16, 18, 20, 42, 51, 52, 59, 60, 68, 83, 85, 87, 90, 91, 96, 103, 124, 155, 158, 179, 184, 190, 193, 194, 206, 208, 209, 210, 215, 219, 221, 225, 235, 247, 248, 261, 278, 281], "doesn": [4, 6, 10, 12, 20, 28, 42, 84, 124, 128, 138, 141, 193, 197, 206, 208, 218, 221, 228, 287], "constitut": [4, 7, 11, 87, 100, 209], "yet": [4, 5, 12, 18, 20, 35, 37, 40, 41, 64, 87, 138, 154, 196, 199, 200, 204, 206, 208, 217, 225, 228, 276], "fulli": [4, 6, 10, 18, 51, 60, 77, 87, 90, 102, 103, 104, 118, 124, 141, 174, 192, 199, 200, 206, 216, 229, 235, 251], "codifi": 4, "clean": [4, 240], "distinct": [4, 7, 11, 14, 18, 20, 29, 42, 51, 52, 60, 61, 65, 73, 85, 90, 96, 100, 123, 192, 199, 204, 205, 209, 217, 219, 286], "well": [4, 6, 7, 10, 11, 12, 14, 16, 18, 20, 32, 38, 40, 41, 42, 43, 44, 52, 59, 60, 65, 66, 68, 87, 91, 94, 96, 106, 111, 114, 118, 124, 126, 128, 129, 138, 164, 173, 176, 177, 183, 192, 194, 195, 196, 198, 199, 200, 202, 204, 209, 216, 217, 218, 219, 221, 225, 227, 228, 240, 241, 258, 259, 263, 278, 280, 281, 286], "categor": [4, 28, 96, 196], "issu": [4, 7, 9, 10, 11, 12, 19, 20, 23, 24, 25, 26, 27, 28, 29, 32, 33, 40, 59, 60, 77, 87, 90, 96, 101, 120, 134, 154, 191, 194, 203, 204, 206, 209, 217, 218, 227, 228, 240, 242, 244, 245, 247, 250, 271, 277, 278, 281, 286], "here": [4, 6, 7, 10, 11, 14, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 31, 32, 36, 37, 42, 43, 44, 49, 50, 51, 52, 58, 59, 60, 61, 62, 64, 65, 66, 68, 76, 77, 78, 82, 83, 85, 87, 90, 91, 96, 99, 100, 101, 102, 103, 106, 110, 114, 119, 124, 125, 126, 131, 132, 133, 136, 138, 139, 141, 142, 164, 169, 174, 183, 189, 190, 192, 193, 195, 196, 199, 200, 202, 204, 205, 206, 209, 210, 216, 218, 219, 221, 222, 225, 227, 228, 229, 233, 234, 241, 242, 244, 245, 247, 248, 259, 261, 263, 274, 275, 276, 278, 280, 281, 282, 284, 285, 286], "guidelin": [4, 8, 30, 225], "exhaust": [4, 18, 219, 247, 279], "alwai": [4, 6, 7, 10, 11, 12, 18, 19, 20, 26, 32, 34, 41, 51, 52, 59, 60, 61, 62, 64, 66, 68, 70, 72, 75, 76, 84, 85, 87, 90, 91, 96, 99, 100, 106, 110, 111, 123, 124, 126, 128, 132, 142, 174, 176, 179, 180, 190, 192, 196, 197, 199, 200, 202, 204, 205, 209, 210, 211, 217, 218, 219, 221, 222, 225, 226, 227, 228, 229, 236, 240, 242, 247, 248, 254, 256, 261, 276, 278, 279, 280, 281, 286], "posit": [4, 10, 11, 12, 18, 19, 20, 25, 28, 35, 36, 37, 38, 39, 41, 42, 43, 44, 49, 51, 52, 53, 55, 56, 59, 60, 61, 62, 64, 65, 66, 68, 70, 72, 73, 76, 85, 87, 89, 90, 91, 92, 96, 97, 99, 100, 103, 104, 106, 110, 112, 118, 121, 124, 126, 128, 131, 133, 135, 138, 139, 141, 143, 146, 148, 152, 169, 172, 174, 185, 186, 188, 190, 192, 193, 196, 197, 198, 199, 200, 202, 204, 205, 206, 208, 209, 214, 215, 217, 218, 219, 221, 222, 225, 227, 228, 229, 230, 235, 247, 254, 257, 258, 259, 261, 263, 264, 282, 286, 287], "convent": [4, 6, 7, 9, 20, 51, 52, 56, 59, 60, 61, 65, 66, 68, 70, 75, 85, 87, 90, 102, 103, 104, 106, 110, 113, 126, 141, 143, 147, 168, 169, 171, 176, 177, 190, 195, 209, 225, 226, 228, 229, 235, 263, 278, 286], "defin": [4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 30, 33, 34, 36, 37, 40, 42, 43, 44, 50, 51, 52, 55, 58, 59, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 78, 83, 85, 87, 88, 91, 93, 96, 100, 103, 104, 108, 114, 115, 118, 121, 123, 124, 126, 127, 131, 133, 134, 135, 139, 141, 142, 145, 151, 153, 155, 160, 163, 169, 171, 172, 176, 177, 178, 179, 180, 181, 182, 183, 184, 188, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 204, 205, 206, 208, 209, 211, 212, 215, 216, 217, 219, 221, 222, 225, 227, 228, 229, 230, 234, 235, 241, 242, 243, 248, 249, 250, 254, 256, 257, 258, 259, 260, 261, 263, 264, 278, 280, 286], "And": [4, 10, 12, 19, 20, 22, 23, 36, 51, 52, 59, 60, 61, 68, 85, 90, 91, 96, 99, 118, 146, 193, 195, 197, 205, 206, 209, 217, 221, 222, 227, 228, 229, 247, 248, 259, 286], "aren": [4, 10, 11, 20, 42, 60, 124, 208, 228], "don": [4, 10, 12, 19, 20, 37, 42, 85, 90, 96, 101, 102, 114, 124, 183, 192, 193, 199, 209, 219, 228, 238, 243, 263, 275, 276, 280, 281, 286], "form": [4, 7, 10, 11, 16, 18, 20, 26, 27, 34, 37, 38, 39, 40, 42, 43, 50, 51, 52, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 73, 76, 80, 82, 83, 85, 87, 89, 91, 93, 95, 96, 100, 102, 103, 104, 106, 107, 110, 114, 115, 118, 119, 120, 123, 124, 126, 128, 131, 133, 134, 135, 136, 137, 139, 141, 142, 151, 154, 155, 156, 158, 168, 169, 172, 174, 176, 179, 182, 183, 184, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 215, 217, 218, 219, 221, 222, 225, 226, 227, 228, 229, 234, 235, 240, 241, 247, 254, 257, 258, 260, 261, 263, 269, 276, 280, 281, 282, 285, 286, 287], "equival": [4, 10, 11, 12, 14, 18, 19, 20, 26, 34, 38, 42, 43, 50, 51, 56, 60, 61, 64, 66, 68, 85, 87, 96, 100, 102, 107, 108, 110, 118, 124, 157, 168, 171, 174, 177, 184, 189, 193, 195, 196, 197, 199, 200, 204, 205, 209, 216, 217, 221, 222, 225, 227, 228, 230, 231, 234, 235, 244, 248, 250, 251], "intern": [4, 10, 11, 12, 18, 19, 23, 40, 42, 43, 51, 60, 63, 64, 65, 68, 76, 77, 80, 92, 96, 100, 104, 106, 108, 126, 138, 147, 168, 169, 179, 196, 198, 200, 201, 203, 205, 207, 209, 219, 221, 224, 225, 226, 227, 228, 229, 233, 235, 238, 242, 244, 247, 272, 281, 285], "Such": [4, 6, 18, 42, 60, 76, 128, 196, 197, 204, 210, 218, 219, 221, 275, 281], "prefix": [4, 42, 60, 96, 100, 178, 181, 182, 199, 202, 206, 209, 222, 225, 241, 242, 247, 271], "underscor": [4, 6, 10, 60, 96, 225, 235, 243], "_": [4, 6, 7, 10, 12, 14, 16, 20, 36, 37, 41, 48, 49, 51, 52, 53, 56, 59, 60, 61, 62, 63, 64, 65, 66, 68, 71, 73, 74, 75, 76, 85, 87, 90, 91, 92, 93, 94, 96, 98, 100, 102, 110, 136, 139, 141, 153, 174, 179, 183, 189, 192, 194, 200, 205, 208, 209, 210, 212, 216, 217, 218, 219, 221, 222, 225, 226, 227, 230, 247, 257, 259, 285], "univers": [4, 11, 42, 194, 203, 217, 222, 227, 228], "adher": [4, 7, 85], "codebas": [4, 10, 18, 199, 238], "anyth": [4, 6, 7, 10, 12, 20, 40, 42, 60, 61, 71, 75, 96, 124, 148, 158, 206, 209, 215, 217, 221, 225, 227, 241, 247, 250, 278], "were": [4, 7, 10, 11, 12, 14, 18, 20, 41, 52, 54, 60, 61, 66, 77, 85, 91, 96, 100, 101, 102, 114, 123, 138, 183, 190, 193, 196, 202, 203, 204, 205, 208, 209, 210, 218, 221, 227, 247, 248, 250, 278, 280, 281, 285, 286], "incorrect": [4, 7, 10, 19, 20, 27, 51, 60, 70, 100, 108, 188, 200, 225, 228, 241, 244, 245], "bug": [4, 6, 18, 20, 25, 29, 32, 40, 61, 199, 217, 225, 228, 278], "despit": [4, 28, 30, 60, 286], "sai": [4, 7, 11, 12, 16, 18, 43, 50, 59, 60, 61, 89, 114, 119, 124, 134, 141, 179, 192, 193, 196, 197, 198, 202, 204, 208, 209, 216, 219, 222, 225, 227, 228, 229, 248, 275, 280, 286], "befor": [4, 6, 10, 11, 12, 18, 19, 20, 30, 32, 42, 51, 52, 54, 56, 60, 61, 62, 68, 88, 91, 96, 100, 102, 103, 104, 114, 120, 124, 126, 127, 128, 131, 132, 138, 141, 143, 174, 183, 189, 193, 197, 199, 204, 205, 209, 210, 216, 217, 221, 222, 225, 227, 228, 229, 236, 240, 243, 247, 248, 258, 279, 280, 281, 286], "recent": [4, 10, 12, 15, 18, 19, 20, 23, 25, 26, 27, 28, 29, 30, 35, 36, 37, 42, 43, 52, 60, 61, 64, 68, 70, 87, 90, 91, 92, 93, 94, 96, 98, 99, 102, 110, 194, 196, 199, 200, 202, 205, 208, 216, 217, 225, 227, 228, 238, 241, 243, 245, 247, 248, 250, 278, 282], "best": [4, 8, 12, 25, 27, 28, 31, 32, 42, 60, 68, 85, 87, 101, 173, 195, 206, 209, 218, 219, 221, 225, 228, 233, 241, 274, 278, 279, 285, 286], "determin": [4, 7, 10, 11, 12, 14, 16, 18, 19, 20, 24, 25, 26, 28, 29, 35, 37, 38, 39, 40, 42, 43, 44, 51, 60, 61, 62, 63, 64, 66, 70, 71, 73, 75, 76, 87, 88, 89, 93, 96, 100, 102, 103, 104, 110, 116, 118, 120, 121, 123, 133, 139, 142, 153, 166, 168, 170, 171, 174, 177, 179, 184, 190, 195, 196, 197, 198, 202, 204, 209, 215, 216, 217, 219, 221, 222, 224, 225, 227, 228, 229, 233, 245, 247, 254, 261, 264, 278, 286], "someth": [4, 6, 7, 10, 11, 12, 18, 19, 20, 30, 40, 42, 60, 61, 64, 70, 85, 90, 91, 96, 100, 114, 124, 125, 141, 167, 180, 183, 195, 199, 200, 208, 216, 217, 221, 225, 228, 240, 242, 248, 275, 278, 280, 281, 284], "re": [4, 12, 20, 39, 40, 42, 51, 52, 60, 61, 64, 66, 68, 85, 87, 96, 184, 186, 190, 196, 202, 209, 210, 211, 217, 218, 219, 225, 227, 240, 257, 259, 276, 278, 281], "harm": 4, "even": [4, 6, 7, 11, 12, 15, 18, 20, 24, 27, 28, 29, 30, 35, 36, 37, 38, 39, 42, 43, 48, 51, 52, 59, 60, 61, 64, 65, 66, 68, 72, 76, 85, 87, 90, 91, 96, 99, 100, 111, 124, 134, 159, 170, 177, 179, 184, 194, 197, 198, 199, 200, 202, 204, 205, 206, 209, 210, 217, 218, 219, 221, 222, 225, 227, 228, 236, 240, 263, 275, 276, 278, 280, 281, 286, 287], "might": [4, 6, 10, 11, 12, 14, 18, 19, 20, 23, 27, 40, 60, 64, 66, 73, 82, 85, 93, 96, 100, 102, 114, 124, 125, 141, 154, 184, 192, 195, 199, 200, 205, 206, 209, 210, 217, 218, 219, 221, 222, 227, 228, 229, 241, 242, 245, 247, 250, 275, 278, 280, 281, 283, 286], "while": [4, 6, 10, 11, 12, 18, 20, 22, 23, 30, 41, 42, 43, 51, 52, 53, 56, 59, 60, 61, 62, 64, 65, 66, 70, 74, 76, 84, 90, 91, 96, 100, 101, 102, 103, 106, 115, 118, 120, 124, 128, 138, 158, 179, 184, 190, 196, 204, 207, 209, 225, 228, 240, 242, 244, 247, 263, 275, 281, 282], "peopl": [4, 6, 63, 68, 87, 96, 179, 229], "upgrad": [4, 33], "immedi": [4, 18, 26, 51, 60, 85, 90, 174, 196, 199, 241, 248], "fire": 4, "uncondition": 4, "correct": [4, 6, 7, 10, 12, 19, 20, 24, 26, 42, 49, 51, 57, 59, 60, 64, 66, 84, 85, 87, 96, 100, 110, 124, 138, 192, 193, 202, 205, 216, 222, 225, 227, 228, 233, 241, 247, 278, 285], "question": [4, 6, 7, 16, 18, 59, 62, 70, 77, 85, 87, 90, 100, 114, 176, 179, 183, 196, 199, 204, 219, 228, 247, 250], "read": [4, 6, 7, 9, 10, 20, 30, 52, 66, 85, 100, 104, 141, 192, 193, 198, 199, 200, 206, 209, 222, 235, 236, 244, 251, 279, 285, 286], "previou": [4, 6, 10, 20, 44, 49, 50, 51, 52, 55, 60, 65, 66, 87, 90, 91, 99, 115, 138, 176, 192, 193, 202, 215, 222, 226, 230, 247, 279, 281, 286], "unchang": [4, 10, 11, 20, 51, 52, 60, 87, 96, 110, 205, 209, 215, 218, 221, 228, 275], "dure": [4, 10, 12, 33, 42, 60, 61, 91, 96, 100, 102, 115, 119, 141, 142, 192, 204, 209, 218, 227, 228, 245, 247], "period": [4, 6, 10, 25, 40, 60, 61, 66, 85, 100, 138, 148, 170, 177, 204, 209, 212, 215, 224, 228, 229, 247], "silenc": [4, 238, 245], "filterwarn": [4, 10], "caus": [4, 7, 10, 11, 20, 32, 60, 61, 64, 66, 96, 124, 132, 138, 192, 209, 218, 225, 226, 227, 244, 245, 282], "anoth": [4, 6, 7, 10, 11, 12, 15, 16, 18, 19, 20, 23, 25, 26, 27, 28, 29, 38, 41, 42, 52, 57, 59, 60, 61, 62, 66, 68, 70, 71, 72, 73, 74, 75, 76, 77, 85, 87, 93, 96, 100, 103, 104, 115, 121, 135, 163, 179, 181, 184, 188, 192, 193, 195, 197, 199, 200, 202, 204, 205, 206, 209, 210, 216, 217, 219, 225, 227, 228, 229, 241, 242, 248, 254, 258, 259, 263, 275, 278, 280, 281, 286, 287], "over": [4, 7, 8, 10, 12, 15, 20, 24, 28, 31, 34, 40, 41, 42, 43, 51, 52, 55, 59, 60, 61, 62, 63, 64, 65, 74, 76, 83, 85, 89, 90, 93, 96, 97, 100, 103, 104, 112, 118, 124, 141, 142, 153, 169, 172, 174, 178, 179, 190, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 209, 212, 214, 216, 221, 222, 224, 225, 227, 228, 229, 230, 233, 234, 243, 247, 248, 254, 257, 261, 264, 280, 284, 286], "defeat": [4, 225], "three": [4, 11, 12, 14, 16, 18, 20, 29, 34, 38, 42, 51, 52, 53, 56, 60, 61, 65, 68, 70, 74, 75, 76, 85, 89, 90, 91, 103, 104, 118, 123, 127, 130, 131, 132, 147, 169, 171, 176, 184, 188, 192, 193, 194, 195, 196, 197, 200, 202, 205, 209, 219, 221, 222, 227, 228, 229, 240, 254, 256, 261, 264, 278, 281, 286], "natur": [4, 10, 12, 18, 26, 34, 38, 42, 43, 51, 60, 61, 65, 66, 94, 100, 124, 176, 178, 179, 196, 199, 200, 202, 204, 206, 209, 217, 218, 222, 228, 229, 247, 264, 281, 286], "heavili": [4, 216, 226], "consider": [4, 19, 60, 101, 114, 199, 208, 217, 222, 225, 258], "easi": [4, 11, 48, 52, 60, 68, 85, 101, 121, 128, 134, 192, 196, 199, 204, 209, 216, 219, 222, 225, 228, 233, 234, 235, 275, 276, 278, 279, 280, 281, 282, 285], "account": [4, 11, 66, 96, 212, 221, 225], "nonetheless": [4, 61, 176, 221, 225], "deprecat": 4, "won": [4, 12, 20, 42, 221, 228, 281], "until": [4, 16, 18, 23, 24, 25, 26, 27, 28, 29, 33, 52, 54, 60, 61, 70, 87, 96, 100, 138, 193, 202, 205, 218, 225, 278], "come": [4, 26, 32, 51, 56, 58, 59, 60, 66, 68, 85, 87, 96, 101, 114, 124, 126, 136, 177, 193, 196, 199, 202, 204, 205, 219, 222, 225, 228, 238, 240, 245, 248, 278, 280, 281, 284, 286], "minimum": [4, 10, 25, 40, 42, 51, 52, 54, 56, 60, 61, 64, 66, 96, 114, 119, 126, 158, 183, 195, 197, 202, 228, 229, 243, 276], "longer": [4, 6, 12, 17, 60, 70, 100, 128, 138, 197, 202, 209, 218, 221, 247, 250, 278, 286], "especi": [4, 6, 20, 30, 59, 96, 114, 124, 141, 168, 183, 193, 221, 225, 227, 240, 275, 276], "hard": [4, 8, 11, 18, 52, 61, 96, 100, 124, 174, 199, 209, 216, 225, 228, 278, 280], "migrat": 4, "lengthen": 4, "impos": [4, 104], "signific": [4, 12, 18, 42, 60, 61, 64, 87, 96, 114, 139, 168, 199, 228, 248, 281], "mainten": [4, 37], "burden": [4, 209], "keep": [4, 6, 12, 15, 20, 56, 60, 61, 64, 65, 68, 85, 96, 119, 127, 135, 139, 158, 174, 195, 198, 199, 200, 205, 216, 217, 219, 221, 225, 227, 235, 263, 276, 281], "firstli": [4, 10, 18, 20, 219], "regular": [4, 10, 12, 18, 19, 43, 48, 60, 61, 64, 68, 76, 82, 83, 87, 100, 124, 168, 199, 206, 225, 235, 240, 285, 286], "schedul": 4, "Being": [4, 56, 70, 76, 199], "assur": [4, 100, 205], "suffici": [4, 6, 18, 41, 42, 51, 52, 56, 60, 96, 179, 212, 216, 225, 229, 244, 286], "regardless": [4, 6, 10, 20, 52, 60, 87, 100, 202, 217, 221, 247, 258, 263, 286], "often": [4, 6, 11, 18, 19, 20, 27, 28, 41, 42, 43, 50, 60, 68, 70, 72, 85, 87, 96, 100, 101, 110, 134, 138, 183, 192, 193, 196, 197, 199, 202, 205, 210, 216, 217, 222, 225, 229, 247, 275, 280, 281, 282, 286], "happen": [4, 6, 10, 11, 16, 18, 19, 20, 25, 34, 42, 52, 59, 60, 64, 72, 75, 84, 118, 169, 173, 179, 196, 202, 204, 205, 208, 217, 221, 225, 229, 248, 259, 278, 285, 286], "secondli": [4, 20, 219], "rigor": [4, 68, 193, 242], "semant": [4, 11, 18, 93, 227], "surfac": [4, 66, 68, 74, 85, 104, 118, 143, 147, 174, 195, 221, 254], "enough": [4, 6, 23, 25, 51, 60, 64, 87, 96, 99, 100, 110, 124, 141, 200, 202, 209, 225, 276, 278], "encod": [4, 10, 44, 52, 58, 61, 90, 209, 240, 244, 247], "backport": 4, "prior": [4, 10, 32, 188, 205, 221, 282], "extrem": [4, 26, 51, 64, 70, 76, 87, 93, 106, 138, 193, 221, 229], "accur": [4, 10, 12, 16, 20, 28, 40, 51, 60, 64, 65, 82, 87, 107, 195, 216, 275, 282], "model": [4, 11, 64, 90, 100, 110, 120, 126, 128, 129, 130, 146, 205, 218, 229], "final": [4, 6, 7, 10, 18, 20, 41, 52, 59, 60, 66, 68, 85, 87, 90, 96, 100, 104, 108, 118, 119, 126, 131, 133, 134, 136, 139, 154, 166, 169, 171, 172, 174, 176, 177, 179, 184, 192, 193, 196, 199, 202, 204, 211, 217, 218, 219, 221, 222, 225, 227, 228, 235, 247, 248, 279, 280, 281], "temptat": [4, 218, 286], "fudg": 4, "earli": [4, 60, 100, 163, 222], "acceler": [4, 101, 121, 126, 131, 133, 138, 139, 141, 177, 184, 188, 190, 244, 263], "myst": [4, 7], "checkbox": 4, "tag": [4, 209, 227], "nest": [4, 24, 60, 62, 66, 68, 87, 91, 110, 197, 199, 202, 209, 219, 221, 224, 228, 229, 230, 231, 233, 236, 247, 248, 281], "ensur": [4, 12, 20, 23, 24, 25, 26, 28, 29, 32, 60, 61, 64, 92, 96, 118, 139, 204, 205, 209, 240, 245, 248], "realli": [4, 10, 11, 16, 18, 19, 20, 60, 72, 100, 126, 176, 199, 208, 210, 216, 218, 219, 221, 225, 241, 250, 278, 280], "per": [4, 61, 96, 101, 106, 148, 184, 190, 195, 200, 205, 206, 254, 258, 260, 263], "everywher": [4, 11, 12, 60, 68, 85, 110, 190, 263], "doctest": [4, 6, 7, 12, 20, 53, 68, 96, 100, 126, 163, 174, 199, 205, 225, 240, 243, 245, 285], "sympy_deprecation_warn": [4, 238, 243, 245], "write": [4, 8, 10, 11, 16, 18, 19, 21, 28, 33, 42, 49, 60, 61, 67, 68, 85, 87, 93, 141, 154, 192, 193, 197, 202, 204, 209, 218, 219, 222, 225, 228, 234, 240, 241, 242, 248, 279, 280, 281, 286], "multilin": [4, 209], "deprecated_since_vers": [4, 238, 243, 245], "active_deprecations_target": [4, 238, 243, 245], "target": [4, 6, 11, 40, 41, 42, 60, 100, 116, 154, 158, 159, 218, 221, 224, 227, 228, 238, 241, 242, 245, 286], "stacklevel": [4, 238, 243, 245], "line": [4, 6, 10, 11, 12, 16, 18, 32, 41, 42, 51, 52, 56, 61, 70, 71, 72, 74, 75, 76, 77, 82, 85, 87, 88, 89, 96, 100, 103, 108, 111, 124, 126, 132, 154, 184, 189, 190, 192, 194, 195, 209, 212, 219, 221, 225, 229, 230, 238, 240, 241, 242, 245, 248, 250, 261, 264, 272, 278], "visual": [4, 60, 100, 104, 110, 208, 221], "confirm": [4, 10, 51, 100, 225], "look": [4, 6, 7, 10, 12, 18, 19, 20, 33, 41, 42, 51, 60, 65, 66, 68, 81, 96, 100, 119, 124, 126, 134, 158, 168, 169, 172, 188, 195, 199, 200, 204, 209, 211, 212, 216, 219, 221, 222, 225, 226, 240, 244, 248, 250, 259, 276, 281, 284, 285], "good": [4, 7, 11, 18, 20, 24, 30, 42, 60, 61, 64, 72, 85, 96, 100, 126, 138, 141, 196, 199, 200, 209, 216, 218, 219, 221, 225, 247, 275, 279, 282], "top": [4, 6, 7, 10, 11, 23, 42, 59, 60, 61, 76, 77, 87, 90, 96, 103, 104, 118, 123, 169, 176, 199, 209, 219, 225, 242, 243, 248, 264, 281], "relev": [4, 6, 7, 18, 42, 58, 73, 88, 89, 115, 119, 121, 126, 179, 189, 193, 199, 219, 225, 226, 235, 240, 262], "docstr": [4, 8, 10, 12, 20, 23, 41, 42, 53, 60, 82, 85, 87, 96, 100, 105, 109, 111, 117, 134, 139, 144, 161, 167, 168, 170, 187, 191, 205, 212, 215, 216, 218, 221, 225, 226, 227, 228, 234, 235, 240, 243, 248, 250, 255, 262, 265, 269, 271], "src": [4, 6, 7, 102, 225, 240, 245], "explan": [4, 7, 12, 14, 18, 21, 34, 35, 36, 37, 38, 39, 41, 42, 45, 48, 49, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 66, 68, 72, 82, 83, 85, 87, 91, 96, 100, 110, 113, 115, 116, 118, 119, 121, 132, 143, 145, 148, 151, 153, 155, 157, 169, 174, 194, 195, 196, 198, 200, 204, 205, 207, 211, 212, 214, 215, 216, 217, 219, 221, 222, 225, 227, 229, 230, 234, 235, 240, 243, 245, 248, 283], "cross": [4, 7, 8, 11, 60, 70, 76, 91, 96, 103, 104, 118, 132, 139, 141, 154, 184, 186, 192, 193, 222, 228, 254, 258, 260, 261], "xyz": [4, 72, 102, 103, 184, 193, 254, 256, 259], "header": [4, 42, 241, 242], "why": [4, 10, 12, 18, 42, 60, 193, 200, 206, 216, 219, 248, 279, 281, 282], "test": [4, 6, 7, 8, 11, 12, 17, 19, 20, 23, 24, 37, 38, 40, 41, 42, 47, 51, 52, 59, 60, 61, 67, 70, 75, 85, 91, 93, 96, 100, 154, 163, 167, 168, 169, 177, 193, 199, 200, 202, 204, 206, 217, 219, 222, 225, 226, 227, 228, 238, 241, 242, 243, 244, 245, 247, 248, 250, 265, 266, 273, 278, 280, 281], "warns_deprecated_sympi": [4, 238, 243, 245], "pr": [4, 10, 59, 118, 200, 202, 203, 205, 228], "merg": [4, 42, 51, 52, 60, 182, 209, 217, 229, 240, 247, 248], "wiki": [4, 5, 6, 7, 8, 12, 18, 20, 31, 34, 36, 37, 38, 40, 41, 42, 48, 49, 51, 52, 59, 60, 61, 62, 63, 65, 66, 68, 70, 72, 76, 77, 78, 87, 88, 89, 90, 91, 93, 96, 100, 108, 110, 113, 143, 145, 146, 147, 149, 150, 151, 155, 156, 157, 160, 162, 163, 172, 174, 178, 184, 186, 191, 195, 205, 212, 216, 217, 218, 222, 225, 228, 229, 242, 247, 254, 256, 260, 262, 264, 282, 283], "decor": [4, 20, 51, 60, 68, 238, 240, 245, 246, 249, 250, 273], "sympydeprecationwarn": [4, 10, 238, 240, 243, 245], "class": [4, 7, 8, 10, 11, 12, 17, 18, 19, 20, 25, 26, 28, 30, 31, 34, 35, 36, 37, 38, 43, 44, 49, 50, 51, 52, 53, 54, 55, 56, 60, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 82, 83, 85, 87, 88, 89, 90, 91, 92, 93, 102, 103, 106, 107, 108, 110, 115, 118, 119, 120, 121, 123, 124, 128, 129, 134, 135, 139, 141, 142, 143, 145, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 176, 179, 180, 181, 182, 183, 187, 188, 189, 191, 196, 198, 199, 200, 202, 205, 206, 207, 208, 210, 211, 212, 215, 216, 217, 219, 221, 225, 226, 227, 228, 229, 234, 235, 236, 240, 241, 242, 243, 244, 245, 247, 248, 252, 255, 258, 259, 261, 262, 264, 265, 269, 271, 276, 278, 281, 286], "context": [4, 6, 7, 10, 14, 18, 20, 27, 35, 36, 37, 60, 62, 68, 87, 90, 124, 179, 199, 202, 204, 217, 238, 240, 245, 254], "manag": [4, 10, 32, 36, 37, 102, 154, 202, 221, 235, 238, 240, 245], "filter": [4, 10, 15, 25, 60, 61, 85, 146, 205, 238, 240, 245, 247], "emit": [4, 209, 238, 245], "assert": [4, 41, 49, 50, 51, 52, 60, 70, 72, 102, 138, 209, 217, 225, 226, 238, 245, 247], "separ": [4, 6, 10, 11, 12, 16, 19, 20, 23, 29, 41, 48, 60, 61, 66, 68, 85, 87, 96, 111, 118, 123, 138, 139, 142, 147, 171, 174, 183, 184, 195, 197, 200, 202, 205, 206, 209, 218, 221, 222, 225, 226, 228, 233, 238, 240, 244, 248, 250, 254, 278], "block": [4, 6, 10, 30, 42, 49, 51, 61, 91, 96, 118, 123, 124, 126, 129, 184, 193, 198, 222, 248, 258], "behavior1": 4, "behavior2": 4, "everyth": [4, 7, 12, 20, 42, 60, 62, 68, 87, 94, 112, 138, 170, 171, 195, 209, 281, 285], "ignore_warn": [4, 238, 243, 245, 248], "prevent": [4, 12, 25, 30, 42, 60, 66, 97, 100, 114, 198, 200, 205, 209, 221, 229, 238, 245, 277], "trigger": [4, 20, 52, 102, 174, 238], "twice": [4, 12, 42, 60, 62, 74, 100, 184, 186, 192, 205, 209, 244, 245, 254, 256, 276], "similar": [4, 5, 10, 12, 16, 18, 20, 28, 52, 59, 60, 61, 64, 65, 66, 68, 71, 76, 77, 81, 90, 96, 101, 110, 124, 126, 128, 138, 139, 172, 190, 192, 193, 197, 199, 200, 202, 206, 216, 218, 219, 221, 225, 227, 230, 235, 238, 241, 244, 245, 254, 256, 258, 259, 263, 275, 280, 281, 282, 284, 286], "somewher": [4, 6, 7, 11, 42], "sign": [4, 6, 7, 11, 25, 28, 30, 34, 39, 42, 56, 60, 61, 65, 66, 70, 76, 85, 87, 96, 100, 103, 104, 106, 110, 126, 147, 159, 184, 190, 192, 194, 202, 209, 214, 216, 221, 222, 227, 247, 261, 264, 279], "readi": [4, 18, 123, 199, 209, 225], "paragraph": [4, 6, 7, 20, 41], "metadata": [4, 41, 243, 245], "link": [4, 6, 7, 11, 12, 22, 26, 42, 61, 70, 76, 87, 111, 118, 127, 135, 241, 244, 245, 284], "rememb": [4, 6, 12, 20, 90, 96, 111, 114, 141, 192, 193, 209, 221, 227, 230, 248, 281, 286], "shown": [4, 6, 10, 11, 18, 19, 20, 49, 52, 59, 60, 64, 66, 68, 85, 102, 104, 108, 110, 114, 119, 121, 127, 128, 129, 135, 136, 137, 139, 183, 184, 192, 193, 195, 198, 199, 200, 205, 209, 225, 229, 245, 247, 258, 259, 279], "plain": [4, 6, 18, 68, 88, 189, 205, 209], "rst": [4, 6, 7, 11, 43, 225, 240], "markdown": [4, 8, 11], "markup": [4, 209], "clearli": [4, 6, 20, 100, 193, 199, 219, 282], "delin": 4, "newlin": [4, 96, 250], "charact": [4, 6, 7, 60, 61, 85, 88, 102, 154, 184, 189, 209, 225, 240, 242, 245, 250, 278, 280, 285], "full": [4, 6, 7, 8, 9, 10, 12, 14, 18, 20, 24, 31, 38, 40, 42, 51, 52, 60, 64, 68, 72, 73, 87, 93, 96, 102, 136, 137, 184, 199, 202, 203, 205, 209, 211, 221, 222, 280, 283, 286], "abc": [4, 6, 12, 14, 15, 20, 23, 25, 27, 28, 29, 30, 34, 35, 36, 37, 38, 39, 40, 42, 49, 51, 53, 59, 60, 61, 62, 65, 66, 68, 69, 70, 71, 73, 74, 75, 76, 77, 83, 84, 85, 87, 88, 90, 91, 93, 96, 99, 101, 108, 110, 112, 145, 147, 149, 150, 155, 172, 174, 175, 196, 198, 200, 202, 204, 205, 206, 209, 210, 211, 212, 214, 215, 216, 217, 218, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 234, 236, 241, 242, 243, 244, 245, 247, 248, 250, 254, 257, 258, 259, 264, 266, 278, 281, 285], "func": [4, 6, 11, 17, 20, 36, 40, 42, 60, 62, 65, 68, 79, 81, 87, 100, 163, 184, 202, 205, 209, 210, 221, 225, 226, 227, 238, 243, 245, 247, 248, 250, 253], "larger": [4, 7, 11, 20, 26, 42, 51, 52, 59, 60, 61, 68, 85, 93, 96, 100, 128, 132, 200, 206, 210, 216, 221, 227, 242, 244, 278, 286], "easier": [4, 11, 19, 29, 60, 104, 124, 126, 192, 200, 204, 206, 219, 225, 228, 242, 248, 258, 280, 286, 287], "exactli": [4, 6, 7, 10, 11, 12, 20, 28, 30, 38, 44, 51, 60, 63, 64, 96, 102, 139, 194, 219, 221, 225, 228, 230, 244, 247, 248, 276, 278, 280, 285, 286], "direct": [4, 6, 7, 10, 11, 17, 34, 36, 37, 41, 45, 48, 51, 56, 59, 60, 62, 64, 66, 69, 73, 74, 75, 76, 90, 91, 96, 103, 104, 106, 114, 115, 118, 126, 128, 132, 141, 160, 184, 190, 192, 193, 196, 198, 199, 202, 206, 216, 219, 235, 238, 247, 254, 259, 260, 263], "syntax": [4, 6, 7, 10, 11, 12, 20, 35, 37, 52, 60, 87, 102, 124, 141, 171, 195, 199, 208, 209, 221, 227, 231, 250, 276, 278, 280, 285, 287], "paramet": [4, 7, 10, 11, 12, 27, 28, 29, 34, 35, 37, 40, 42, 43, 51, 52, 56, 58, 60, 61, 62, 63, 65, 66, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 83, 85, 87, 88, 90, 91, 93, 96, 97, 99, 100, 102, 103, 106, 108, 110, 111, 112, 114, 115, 116, 118, 119, 120, 121, 123, 124, 126, 141, 143, 145, 146, 147, 149, 150, 151, 153, 154, 155, 157, 158, 159, 162, 163, 164, 166, 168, 169, 171, 172, 173, 174, 175, 176, 184, 185, 186, 188, 189, 190, 193, 194, 195, 197, 198, 200, 202, 204, 205, 206, 207, 209, 210, 211, 212, 214, 215, 216, 217, 221, 222, 224, 225, 226, 227, 229, 230, 231, 234, 235, 238, 240, 241, 242, 244, 245, 247, 248, 254, 256, 257, 258, 259, 264, 276, 281], "short": [4, 7, 12, 33, 43, 50, 52, 56, 60, 61, 62, 63, 66, 94, 100, 114, 160, 179, 183, 193, 196, 203, 230, 240, 250, 281, 285], "renam": [4, 42, 87], "rest": [4, 10, 85, 88, 90, 94, 104, 112, 124, 128, 134, 179, 196, 199, 229, 247, 278, 279, 286], "left": [4, 7, 10, 16, 18, 20, 22, 23, 26, 40, 42, 43, 51, 52, 56, 60, 61, 62, 65, 66, 68, 76, 77, 83, 85, 87, 88, 90, 91, 96, 99, 100, 110, 115, 123, 139, 146, 153, 158, 162, 163, 166, 171, 184, 190, 194, 195, 196, 198, 205, 206, 207, 208, 209, 211, 212, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 240, 241, 242, 244, 247, 261, 276, 280, 282, 286], "imaginari": [4, 6, 12, 18, 20, 25, 27, 28, 34, 38, 39, 60, 64, 66, 68, 91, 141, 199, 200, 205, 209, 210, 217, 221, 228], "simplify_thi": [4, 6, 243], "expr": [4, 6, 11, 12, 18, 20, 25, 27, 30, 36, 37, 39, 40, 42, 52, 59, 62, 64, 66, 68, 70, 82, 85, 87, 90, 93, 96, 101, 102, 110, 114, 116, 124, 138, 151, 155, 157, 159, 163, 166, 169, 171, 172, 174, 181, 184, 186, 189, 195, 197, 198, 199, 200, 202, 204, 205, 206, 207, 209, 210, 211, 212, 214, 216, 218, 221, 224, 225, 226, 227, 228, 229, 230, 231, 233, 235, 236, 241, 242, 243, 245, 248, 254, 256, 257, 258, 259, 261, 275, 276, 278, 280, 281, 285, 286, 287], "simplifi": [4, 6, 11, 12, 16, 18, 19, 20, 26, 27, 35, 37, 39, 40, 59, 60, 62, 64, 65, 66, 68, 72, 77, 82, 85, 87, 90, 91, 92, 93, 96, 103, 110, 111, 116, 118, 120, 127, 128, 131, 132, 133, 138, 146, 153, 158, 173, 174, 181, 184, 190, 196, 204, 206, 208, 210, 215, 217, 218, 219, 222, 225, 226, 227, 228, 229, 243, 245, 248, 258, 260, 266, 275, 277, 278, 280, 281, 282], "def": [4, 6, 7, 10, 11, 12, 16, 18, 19, 20, 36, 37, 41, 60, 65, 72, 90, 96, 100, 102, 132, 169, 199, 205, 209, 218, 221, 228, 243, 245, 247, 248, 251, 275, 278, 281, 282, 286], "ref": [4, 51, 66, 96, 108, 141, 214, 229, 243, 282], "is_this_zero": [4, 245], "y": [4, 6, 10, 11, 12, 14, 15, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 35, 36, 37, 38, 39, 40, 42, 43, 51, 52, 59, 60, 61, 62, 63, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 83, 85, 87, 88, 89, 90, 91, 92, 93, 96, 100, 101, 102, 103, 104, 106, 108, 110, 115, 116, 118, 121, 124, 126, 127, 128, 129, 131, 132, 133, 135, 139, 141, 142, 151, 152, 155, 158, 163, 169, 171, 172, 174, 175, 183, 184, 185, 186, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 215, 216, 217, 218, 219, 221, 222, 224, 225, 226, 227, 228, 229, 230, 233, 234, 235, 236, 241, 242, 245, 247, 248, 250, 254, 257, 258, 259, 260, 261, 263, 264, 275, 276, 278, 280, 281, 285, 286, 287], "0": [4, 6, 11, 12, 14, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 108, 110, 111, 112, 113, 115, 116, 118, 119, 121, 124, 126, 127, 128, 129, 131, 133, 136, 137, 138, 139, 141, 142, 143, 146, 147, 148, 150, 153, 158, 159, 160, 163, 168, 169, 170, 171, 172, 173, 174, 175, 179, 181, 184, 185, 186, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 204, 205, 206, 207, 208, 209, 211, 212, 214, 215, 216, 217, 218, 219, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 238, 240, 241, 243, 244, 245, 247, 248, 249, 254, 256, 257, 258, 259, 260, 261, 264, 275, 276, 278, 280, 281, 282, 285, 286, 287], "zero": [4, 11, 12, 14, 18, 19, 20, 26, 27, 34, 38, 39, 42, 50, 51, 52, 56, 59, 60, 63, 64, 65, 66, 68, 70, 74, 75, 76, 85, 87, 89, 90, 91, 93, 95, 96, 99, 100, 102, 103, 110, 118, 121, 124, 126, 129, 132, 135, 136, 137, 141, 146, 168, 172, 174, 176, 188, 190, 192, 193, 194, 196, 197, 198, 199, 200, 204, 205, 207, 209, 212, 216, 217, 219, 221, 222, 225, 226, 227, 228, 229, 230, 245, 247, 248, 258, 260, 261, 281, 287], "is_zero": [4, 18, 20, 75, 96, 196, 200, 205, 245, 282], "mail": [4, 10, 23, 24, 25, 26, 27, 28, 29, 32, 209, 279], "summar": [4, 240, 286], "idea": [4, 11, 18, 19, 20, 45, 51, 58, 60, 61, 72, 78, 85, 87, 100, 111, 124, 174, 178, 179, 196, 198, 199, 218, 221, 222, 225, 228, 242, 248, 286], "fit": [4, 11, 41, 85, 96, 99, 100, 193, 209, 225, 250, 281], "put": [4, 6, 10, 11, 12, 16, 20, 23, 42, 56, 57, 60, 61, 62, 66, 90, 91, 96, 146, 151, 155, 170, 171, 205, 209, 210, 218, 219, 221, 225, 230, 236, 241, 282, 286], "word": [4, 7, 11, 20, 38, 56, 59, 60, 61, 66, 68, 90, 110, 119, 124, 139, 196, 199, 204, 221, 222, 225, 227, 242, 254, 259, 278], "global": [4, 6, 10, 35, 36, 37, 40, 42, 43, 60, 72, 85, 102, 158, 164, 184, 186, 195, 196, 199, 200, 202, 209, 222, 225, 226, 229, 240, 242, 243, 248, 257], "uniqu": [4, 10, 11, 40, 41, 43, 51, 54, 56, 60, 61, 62, 65, 68, 75, 78, 83, 87, 89, 90, 96, 100, 118, 163, 172, 184, 193, 196, 197, 199, 202, 204, 205, 210, 214, 221, 222, 225, 227, 228, 229, 233, 242, 247, 250, 258, 263, 278, 281], "across": [4, 7, 51, 58, 60, 71, 87, 104, 173, 174, 181, 195, 209, 244, 246, 247, 248, 284], "level": [4, 6, 7, 10, 11, 12, 18, 19, 23, 25, 42, 51, 58, 60, 66, 68, 87, 90, 96, 100, 114, 128, 141, 169, 174, 179, 183, 186, 193, 195, 198, 199, 207, 209, 218, 222, 228, 229, 233, 241, 242, 247, 281, 282, 284], "correspond": [4, 6, 7, 10, 16, 18, 19, 20, 24, 40, 41, 42, 43, 50, 51, 52, 54, 55, 56, 59, 60, 61, 62, 63, 66, 70, 71, 73, 74, 75, 76, 83, 85, 89, 90, 91, 96, 99, 100, 103, 104, 110, 116, 118, 119, 123, 124, 126, 128, 142, 146, 150, 164, 168, 169, 171, 175, 176, 179, 184, 188, 190, 194, 195, 197, 198, 199, 200, 202, 204, 205, 209, 215, 216, 219, 221, 222, 225, 226, 227, 228, 229, 231, 233, 234, 235, 242, 243, 244, 245, 247, 248, 250, 254, 256, 258, 259, 261, 263, 281, 287], "share": [4, 18, 20, 61, 100, 200, 204, 209, 229, 242], "__init__": [4, 6, 20, 60, 119, 204, 254, 256, 281], "func_nam": [4, 42, 66, 91, 250], "help": [4, 5, 6, 7, 18, 25, 33, 42, 50, 60, 68, 85, 87, 96, 100, 101, 103, 108, 124, 141, 149, 159, 193, 195, 204, 206, 209, 218, 219, 222, 225, 226, 229, 240, 241, 242, 248, 271, 279, 282], "rais": [4, 10, 12, 14, 18, 19, 20, 35, 37, 40, 42, 49, 52, 60, 61, 62, 64, 66, 69, 70, 73, 75, 76, 77, 85, 87, 91, 93, 96, 97, 99, 100, 108, 110, 148, 160, 190, 193, 196, 197, 198, 199, 200, 202, 204, 205, 206, 209, 211, 217, 221, 224, 225, 226, 227, 228, 229, 233, 235, 238, 240, 242, 245, 247, 248, 250, 251, 261, 282], "been": [4, 12, 18, 20, 28, 40, 42, 43, 51, 52, 53, 56, 59, 60, 61, 66, 72, 85, 87, 96, 100, 101, 102, 118, 119, 124, 126, 134, 138, 139, 147, 159, 169, 171, 179, 183, 190, 191, 192, 193, 196, 199, 200, 204, 206, 207, 209, 211, 216, 219, 221, 226, 227, 228, 230, 239, 240, 242, 243, 245, 247, 250, 258, 261, 278, 279, 281, 282, 286], "simplfiy_thi": 4, "ident": [4, 11, 12, 20, 38, 41, 43, 50, 51, 52, 58, 60, 61, 65, 66, 76, 83, 89, 91, 93, 96, 111, 113, 118, 119, 139, 158, 160, 163, 179, 196, 197, 198, 202, 203, 204, 205, 209, 218, 221, 225, 228, 233, 235, 240, 247, 248, 250, 259, 278, 282, 286], "much": [4, 6, 10, 16, 18, 19, 20, 27, 28, 41, 42, 45, 56, 64, 68, 82, 85, 87, 138, 182, 183, 192, 193, 194, 196, 199, 202, 205, 216, 219, 221, 225, 226, 227, 228, 242, 244, 278, 280, 286], "trivial": [4, 43, 51, 56, 59, 60, 61, 66, 75, 90, 93, 96, 100, 136, 174, 196, 197, 202, 205, 219, 222, 225, 228, 233], "furthermor": [4, 10, 20, 38, 60, 61, 90, 204, 218, 278, 280, 281], "particular": [4, 6, 10, 11, 12, 18, 19, 22, 24, 38, 43, 51, 60, 61, 64, 68, 71, 85, 87, 90, 93, 96, 100, 103, 106, 134, 158, 169, 197, 198, 199, 200, 202, 204, 205, 215, 217, 219, 221, 222, 225, 227, 228, 240, 242, 244, 282, 284, 286], "expr1": [4, 18, 110, 195, 227, 281], "expr2": [4, 18, 110, 195, 281], "dozen": [4, 11, 20, 286], "search": [4, 6, 40, 51, 52, 56, 58, 60, 66, 96, 100, 124, 196, 204, 205, 209, 218, 219, 221, 226, 229, 241], "upcom": 4, "bot": 4, "push": [5, 85], "respect": [5, 6, 10, 11, 12, 20, 35, 37, 38, 40, 41, 42, 43, 50, 51, 52, 55, 56, 58, 59, 60, 62, 65, 66, 68, 70, 72, 76, 77, 82, 83, 85, 87, 90, 91, 93, 96, 100, 102, 103, 104, 106, 110, 115, 116, 118, 121, 128, 135, 137, 139, 141, 148, 163, 176, 177, 178, 183, 184, 188, 190, 193, 194, 195, 196, 199, 202, 204, 205, 206, 209, 211, 212, 215, 217, 221, 225, 226, 227, 228, 229, 230, 234, 235, 240, 242, 254, 256, 257, 258, 259, 260, 261, 262, 263, 276, 286], "handbook": [5, 6, 43, 50, 51, 58, 68, 100], "internet": 5, "practic": [5, 8, 16, 18, 24, 27, 28, 30, 49, 51, 61, 70, 135, 138, 141, 195, 196, 197, 199, 204, 206, 233, 278, 279], "project": [5, 7, 10, 42, 73, 74, 75, 89, 96, 140, 241, 242, 254], "purpos": [5, 6, 7, 8, 10, 11, 17, 18, 20, 41, 42, 51, 57, 60, 61, 87, 96, 124, 141, 179, 183, 193, 199, 202, 206, 208, 209, 216, 225, 228, 234, 244, 246, 248, 258, 259, 276, 286], "nn": 5, "brows": 5, "clone": [5, 32, 202], "download": [5, 7, 32, 41, 82, 203, 218, 225, 229, 254, 280], "origin": [5, 11, 12, 16, 18, 24, 32, 34, 51, 52, 53, 56, 59, 60, 61, 64, 65, 66, 68, 69, 71, 73, 75, 85, 87, 91, 96, 100, 108, 110, 111, 118, 128, 138, 141, 166, 169, 179, 185, 190, 195, 196, 200, 204, 205, 208, 209, 217, 218, 219, 221, 222, 225, 226, 227, 228, 229, 235, 240, 247, 248, 254, 257, 258, 259, 260, 261, 263, 264, 286], "77": [5, 49, 68, 96, 100, 208, 209, 242], "mib": 5, "remot": [5, 60], "collabor": 5, "upstream": 5, "fetch": 5, "branch": [5, 19, 40, 60, 65, 66, 67, 68, 206, 219, 228, 281, 286], "checkout": [5, 41], "advantag": [5, 10, 14, 18, 20, 28, 37, 40, 42, 60, 61, 65, 87, 90, 96, 100, 107, 178, 198, 199, 206, 217, 222, 225, 228, 244, 278, 280, 282, 286], "isol": [5, 28, 40, 66, 200, 204, 205, 206, 227, 242], "wide": [5, 18, 88, 96, 141, 189, 199, 205, 209, 229], "flake8": 5, "usernam": 5, "easiest": [5, 7, 10, 11, 12, 60, 196, 199, 222, 248, 259, 275, 281, 286], "consult": [5, 43], "kwarg": [5, 12, 36, 37, 38, 42, 51, 52, 59, 60, 61, 62, 66, 68, 70, 71, 73, 74, 75, 76, 77, 82, 85, 87, 91, 92, 93, 94, 96, 98, 99, 108, 110, 116, 119, 128, 143, 152, 154, 158, 159, 163, 165, 167, 168, 170, 171, 172, 184, 188, 189, 195, 198, 200, 205, 209, 211, 215, 216, 217, 221, 225, 226, 227, 229, 230, 235, 240, 241, 243, 250, 259], "test_bas": [5, 240], "similarli": [5, 10, 18, 28, 56, 60, 61, 68, 72, 96, 103, 104, 110, 119, 139, 195, 196, 199, 204, 206, 216, 217, 219, 225, 240, 248, 259, 260, 282], "qualiti": [5, 101, 209], "code_qu": 5, "liter": [6, 12, 20, 42, 50, 60, 88, 90, 102, 174, 181, 221], "occur": [6, 10, 11, 12, 51, 52, 60, 64, 68, 77, 85, 91, 102, 114, 118, 138, 183, 184, 192, 204, 212, 221, 226, 227, 230, 240, 247, 281], "definit": [6, 10, 11, 12, 19, 34, 38, 42, 43, 51, 52, 57, 59, 60, 62, 63, 65, 66, 68, 73, 76, 83, 85, 87, 91, 92, 93, 96, 100, 102, 118, 126, 131, 132, 139, 176, 179, 182, 184, 192, 193, 196, 197, 200, 205, 206, 209, 216, 229, 230, 241, 242, 243, 247, 248, 254, 258, 259, 260, 261, 276, 286], "__doc__": [6, 12], "attribut": [6, 11, 15, 18, 20, 36, 37, 41, 42, 51, 52, 60, 68, 69, 70, 73, 74, 75, 76, 93, 96, 102, 104, 110, 115, 118, 119, 120, 121, 123, 131, 139, 142, 163, 168, 172, 179, 183, 184, 190, 193, 195, 196, 199, 200, 204, 209, 217, 221, 222, 234, 235, 241, 243, 247, 248, 251, 258, 281], "fdiff": [6, 20, 42, 60, 66, 67, 68], "self": [6, 18, 20, 26, 34, 36, 37, 41, 42, 51, 52, 57, 59, 60, 62, 66, 69, 70, 71, 73, 74, 75, 76, 87, 91, 96, 100, 115, 126, 169, 174, 184, 186, 188, 196, 198, 200, 202, 204, 205, 209, 211, 216, 217, 235, 254], "argindex": [6, 20, 42, 60, 66, 67, 68], "heavisid": [6, 68, 85, 87, 209], "diff": [6, 10, 11, 16, 20, 25, 40, 42, 60, 65, 66, 67, 68, 77, 82, 93, 96, 114, 116, 127, 128, 141, 172, 184, 186, 189, 190, 193, 195, 200, 205, 208, 209, 219, 225, 226, 227, 230, 231, 236, 258, 261, 276, 280, 287], "diracdelta": [6, 68, 87, 169, 174, 209], "what": [6, 7, 8, 10, 11, 12, 14, 15, 16, 18, 19, 20, 22, 28, 31, 40, 42, 52, 54, 59, 60, 61, 62, 66, 67, 70, 71, 75, 85, 87, 89, 96, 100, 102, 115, 118, 119, 121, 124, 128, 135, 141, 173, 174, 177, 179, 184, 192, 193, 200, 202, 205, 208, 209, 210, 216, 218, 219, 221, 222, 225, 227, 234, 238, 240, 242, 243, 248, 258, 259, 264, 276, 278, 279, 281, 285, 286], "scope": [6, 42, 134, 138, 238, 286], "high": [6, 7, 12, 16, 18, 25, 28, 42, 60, 64, 65, 88, 100, 141, 189, 199, 204, 207, 209, 222, 227, 271, 282], "od": [6, 11, 20, 83, 119, 123, 134, 141, 223, 226, 266, 287], "seen": [6, 16, 18, 34, 52, 85, 87, 102, 106, 118, 123, 135, 179, 192, 196, 199, 202, 205, 225, 228, 245, 247, 258, 278, 281, 285], "hand": [6, 10, 16, 18, 20, 23, 41, 42, 52, 53, 60, 66, 68, 87, 90, 91, 96, 100, 103, 119, 123, 124, 138, 142, 146, 163, 166, 184, 190, 193, 194, 196, 199, 200, 202, 204, 207, 219, 228, 240, 242, 244, 248, 251, 261, 263, 280], "less": [6, 7, 10, 11, 16, 24, 26, 28, 38, 42, 43, 51, 52, 59, 60, 61, 64, 65, 66, 68, 74, 75, 76, 91, 96, 100, 108, 110, 124, 126, 174, 199, 202, 204, 205, 218, 219, 221, 222, 225, 227, 228, 229, 240, 242], "understand": [6, 12, 18, 19, 20, 30, 60, 61, 85, 124, 134, 136, 137, 141, 179, 192, 195, 198, 199, 204, 209, 219, 222, 241, 248, 277, 278, 285, 286], "clear": [6, 10, 18, 36, 50, 60, 85, 89, 115, 192, 193, 195, 200, 202, 205, 219, 227, 228, 235, 240, 244, 263, 278], "begin": [6, 10, 12, 18, 20, 22, 26, 60, 61, 65, 66, 68, 85, 91, 93, 96, 100, 128, 136, 137, 138, 139, 170, 179, 184, 193, 194, 198, 209, 219, 222, 225, 226, 228, 229, 240, 250, 278, 280, 282, 286], "convers": [6, 7, 10, 18, 24, 42, 60, 80, 102, 138, 178, 197, 198, 199, 200, 202, 204, 206, 209, 222, 234, 241, 254], "aim": [6, 7, 78, 85, 179, 196, 219, 225, 228, 279, 280], "comment": [6, 7, 42, 51, 124, 126, 206, 209, 242, 247], "distract": 6, "input": [6, 7, 10, 11, 12, 20, 25, 34, 40, 43, 56, 60, 61, 63, 64, 65, 66, 74, 87, 89, 90, 96, 100, 102, 107, 108, 110, 114, 118, 120, 123, 124, 126, 127, 128, 138, 141, 142, 147, 170, 184, 186, 188, 199, 200, 202, 205, 206, 207, 208, 209, 210, 217, 221, 222, 225, 227, 229, 231, 241, 242, 244, 245, 247, 248, 250, 275, 281, 282, 286], "consum": [6, 42, 68, 120, 138], "human": [6, 14, 85, 176, 205, 209], "beings": 6, "english": [6, 61], "likewis": [6, 18, 41, 103, 127, 128], "reader": [6, 7, 20, 41, 43, 139, 196, 209, 244, 279, 284], "machineri": [6, 60, 204, 248], "mind": [6, 12, 15, 18, 25, 60, 96, 139, 195, 216, 217, 263, 281], "platform": [6, 60, 174, 193, 225, 241], "anyon": [6, 7, 10, 31, 205, 209, 274, 284, 285], "restructuredtext": [6, 7], "extend": [6, 7, 18, 20, 24, 38, 42, 51, 52, 60, 61, 65, 72, 85, 87, 96, 100, 141, 182, 189, 195, 197, 200, 202, 204, 205, 206, 209, 216, 218, 222, 224, 225, 228, 229, 230, 242, 244, 278, 280], "concis": [6, 141], "quick": [6, 7, 20, 60, 96, 100, 221, 227, 248], "depth": [6, 7, 9, 12, 13, 31, 51, 60, 126, 195, 196, 209], "tripl": [6, 24, 77, 96, 193, 194, 196, 204, 250], "quot": [6, 12, 42, 90, 209, 250], "raw": [6, 7, 42, 60, 61, 66, 101, 102, 168, 173, 199, 200, 205, 217, 221, 285], "backslash": [6, 60, 209], "blank": [6, 102, 120, 195], "close": [6, 11, 27, 42, 59, 60, 64, 65, 68, 76, 78, 85, 87, 89, 110, 127, 195, 196, 197, 203, 204, 217, 227, 228, 242, 276, 286], "rare": [6, 20, 60, 225, 229, 238, 278], "underlin": [6, 7], "numpydoc": [6, 7], "build": [6, 7, 8, 15, 36, 37, 42, 60, 62, 68, 90, 141, 168, 179, 184, 193, 196, 201, 204, 205, 206, 216, 229, 258, 275, 278, 281], "consist": [6, 7, 10, 11, 16, 18, 23, 25, 29, 41, 51, 52, 56, 60, 61, 65, 66, 68, 70, 76, 78, 85, 90, 103, 106, 118, 135, 139, 148, 168, 174, 179, 182, 188, 195, 197, 199, 200, 202, 217, 225, 227, 228, 229, 233, 238, 241, 242, 247, 279, 281], "review": [6, 7, 140], "head": [6, 15, 41, 60, 227, 229, 235, 250, 281], "plural": [6, 7], "length": [6, 10, 42, 44, 50, 51, 52, 54, 58, 60, 61, 63, 65, 66, 68, 69, 73, 75, 76, 77, 90, 91, 96, 99, 100, 103, 104, 114, 119, 123, 127, 128, 129, 139, 143, 147, 171, 176, 177, 179, 184, 188, 193, 204, 205, 209, 215, 219, 221, 225, 229, 240, 241, 247, 250, 254, 256, 264], "equal": [6, 10, 11, 14, 18, 19, 20, 28, 30, 34, 38, 41, 42, 43, 49, 50, 51, 52, 56, 58, 59, 60, 61, 62, 64, 65, 66, 68, 73, 74, 75, 76, 77, 79, 85, 90, 91, 93, 96, 100, 103, 106, 110, 111, 115, 119, 121, 126, 136, 137, 158, 159, 174, 179, 184, 188, 193, 196, 197, 198, 199, 200, 202, 204, 205, 207, 209, 215, 217, 219, 222, 225, 226, 227, 228, 229, 235, 240, 241, 242, 247, 250, 254, 259, 264, 276, 279, 287], "clutter": 6, "harder": [6, 10, 18, 60, 85, 199, 240], "minim": [6, 18, 20, 40, 51, 52, 56, 59, 60, 61, 85, 87, 90, 100, 115, 128, 143, 198, 199, 200, 202, 205, 208, 218, 221, 222, 227, 247, 251], "amount": [6, 41, 60, 61, 72, 118, 134, 184, 190, 193, 202, 212, 240, 254, 256], "deprec": [6, 8, 13, 23, 35, 52, 60, 73, 87, 91, 113, 118, 138, 205, 209, 229, 235, 238, 239, 243, 245, 248, 252], "notifi": 6, "awai": [6, 41, 43, 61, 103, 104, 106, 126, 204, 209], "encourag": [6, 10, 41, 136, 137, 204], "label": [6, 41, 42, 54, 60, 70, 83, 87, 106, 147, 154, 158, 163, 172, 174, 195, 209, 210, 212, 221, 234, 235, 285], "elabor": [6, 21, 190, 261], "suffic": [6, 197, 227], "clarifi": 6, "complic": [6, 12, 14, 18, 20, 27, 28, 42, 51, 59, 61, 62, 64, 65, 66, 68, 85, 87, 93, 134, 136, 174, 193, 199, 202, 206, 208, 219, 221, 228, 229, 233, 234, 242, 244, 248, 250, 276, 278, 281, 282], "demonstr": [6, 7, 12, 18, 20, 25, 26, 27, 28, 51, 52, 60, 87, 100, 115, 118, 124, 128, 129, 138, 196, 199, 260, 286], "api": [6, 7, 10, 18, 21, 24, 26, 42, 60, 72, 80, 101, 102, 109, 134, 141, 170, 183, 191, 195, 202, 222, 224, 248, 251, 258, 259, 262, 269, 271, 272, 279, 280, 283], "simpl": [6, 11, 12, 16, 18, 20, 27, 32, 41, 42, 51, 59, 60, 64, 68, 72, 76, 78, 85, 87, 89, 96, 100, 101, 103, 104, 110, 111, 114, 118, 119, 121, 123, 126, 128, 129, 131, 133, 134, 138, 142, 148, 162, 163, 171, 172, 173, 184, 192, 193, 199, 200, 201, 205, 206, 209, 211, 216, 218, 219, 221, 222, 225, 228, 235, 241, 242, 247, 251, 253, 254, 256, 257, 261, 275, 278, 281, 282, 286], "too": [6, 12, 20, 30, 51, 52, 60, 66, 68, 70, 73, 75, 85, 90, 99, 100, 101, 136, 143, 216, 217, 221, 222, 225, 227, 228, 229, 240, 241, 257, 258], "thought": [6, 11, 60, 216, 225, 278, 281], "perfect": [6, 20, 51, 60, 100, 222, 228, 280, 281], "tell": [6, 7, 18, 19, 25, 28, 42, 52, 61, 64, 68, 91, 102, 123, 179, 199, 204, 208, 216, 219, 225, 241, 278], "think": [6, 10, 11, 18, 19, 20, 25, 32, 40, 51, 126, 179, 244, 248, 278, 286], "test_": [6, 240], "coverage_doctest": 6, "coverag": 6, "6868680200532414": 6, "dsolv": [6, 11, 225, 226, 227, 276, 280, 287], "co": [6, 10, 12, 20, 22, 23, 25, 27, 29, 30, 34, 40, 42, 59, 60, 62, 64, 65, 66, 68, 69, 70, 73, 74, 76, 78, 82, 83, 84, 85, 87, 91, 96, 100, 102, 115, 116, 118, 124, 126, 127, 129, 131, 132, 133, 138, 141, 146, 148, 184, 186, 188, 190, 192, 193, 194, 195, 199, 202, 205, 206, 208, 209, 210, 211, 212, 216, 217, 218, 219, 221, 225, 227, 228, 229, 230, 236, 248, 254, 256, 257, 258, 259, 264, 275, 276, 278, 280, 286, 287], "sin": [6, 7, 10, 11, 12, 18, 20, 22, 25, 27, 30, 32, 34, 40, 42, 59, 60, 62, 64, 65, 66, 68, 69, 70, 74, 78, 79, 82, 83, 84, 85, 87, 88, 91, 96, 101, 102, 112, 115, 116, 118, 123, 124, 126, 127, 129, 131, 132, 133, 138, 141, 146, 148, 172, 184, 186, 188, 190, 192, 193, 194, 195, 197, 199, 205, 206, 208, 209, 210, 211, 212, 216, 217, 218, 219, 221, 224, 225, 227, 228, 230, 236, 242, 248, 254, 256, 257, 258, 259, 264, 275, 276, 278, 280, 281, 286, 287], "hint": [6, 20, 41, 44, 51, 60, 63, 66, 87, 91, 96, 100, 110, 141, 151, 155, 171, 173, 174, 184, 205, 216, 219, 227, 286], "1st_exact": [6, 225], "eq": [6, 11, 12, 14, 18, 20, 23, 24, 30, 38, 40, 42, 60, 65, 66, 68, 70, 73, 77, 85, 90, 177, 195, 196, 200, 205, 207, 209, 211, 215, 217, 218, 221, 222, 224, 225, 226, 227, 228, 229, 241, 242, 248, 254, 278, 280, 287], "c1": [6, 16, 61, 70, 77, 91, 93, 118, 160, 174, 217, 222, 225, 227, 260, 287], "comma": [6, 7, 12, 42, 60, 209, 248, 278], "readabl": [6, 33, 41, 88, 114, 205, 208, 209, 216, 218, 251], "accept": [6, 11, 20, 23, 30, 41, 42, 51, 60, 66, 74, 87, 90, 91, 93, 96, 99, 102, 124, 168, 184, 189, 195, 204, 205, 208, 209, 210, 217, 219, 221, 227, 241, 248, 254, 256, 259, 282], "rang": [6, 10, 11, 16, 20, 24, 25, 28, 40, 42, 49, 50, 51, 52, 54, 56, 60, 61, 65, 66, 68, 74, 91, 96, 100, 104, 108, 112, 143, 174, 195, 199, 200, 201, 202, 204, 205, 206, 211, 212, 215, 217, 218, 221, 225, 228, 229, 230, 234, 240, 247, 275, 286], "30": [6, 34, 40, 42, 46, 60, 61, 63, 64, 65, 68, 74, 76, 87, 91, 96, 97, 100, 103, 104, 124, 147, 198, 200, 204, 205, 209, 215, 218, 221, 229, 230, 286], "7": [6, 12, 18, 20, 24, 28, 34, 36, 37, 40, 42, 44, 46, 49, 50, 51, 52, 53, 54, 56, 58, 59, 60, 61, 63, 64, 65, 66, 68, 70, 73, 74, 75, 76, 82, 85, 87, 90, 91, 93, 94, 96, 100, 102, 103, 108, 110, 126, 133, 136, 137, 141, 174, 179, 181, 194, 195, 197, 198, 199, 200, 202, 203, 204, 205, 206, 208, 209, 211, 212, 215, 216, 217, 218, 219, 221, 222, 224, 225, 226, 227, 228, 229, 230, 234, 235, 240, 241, 244, 247, 248, 254, 264, 276, 281, 282, 285], "8": [6, 16, 27, 28, 32, 34, 35, 40, 42, 44, 51, 52, 53, 56, 58, 60, 61, 63, 64, 65, 66, 68, 70, 73, 74, 76, 82, 85, 87, 89, 90, 91, 93, 94, 96, 97, 99, 100, 102, 103, 108, 110, 112, 126, 141, 146, 147, 158, 194, 195, 197, 198, 199, 200, 202, 204, 205, 206, 208, 209, 211, 212, 215, 217, 218, 219, 221, 222, 224, 225, 226, 227, 228, 229, 230, 234, 240, 242, 244, 247, 254, 257, 258, 264, 275, 276, 280, 282, 286], "9": [6, 14, 30, 32, 40, 42, 48, 50, 51, 52, 56, 58, 59, 60, 61, 63, 65, 66, 68, 69, 70, 73, 74, 76, 82, 85, 87, 91, 92, 93, 94, 96, 97, 99, 100, 102, 103, 108, 110, 111, 112, 113, 115, 124, 126, 129, 135, 141, 143, 147, 179, 194, 195, 197, 198, 199, 200, 202, 204, 205, 206, 208, 209, 215, 217, 218, 219, 221, 222, 225, 227, 228, 229, 230, 240, 244, 247, 254, 257, 280, 282, 287], "11": [6, 18, 36, 37, 42, 51, 54, 56, 58, 60, 61, 63, 65, 68, 72, 73, 74, 76, 77, 85, 87, 90, 91, 92, 96, 100, 102, 110, 124, 126, 139, 158, 168, 194, 195, 197, 198, 200, 202, 203, 204, 205, 206, 208, 209, 216, 218, 222, 225, 227, 228, 229, 230, 241, 247, 258], "12": [6, 12, 20, 28, 34, 40, 41, 42, 46, 48, 49, 51, 52, 53, 56, 58, 59, 60, 61, 63, 65, 66, 68, 70, 73, 74, 76, 85, 87, 91, 96, 97, 100, 103, 104, 108, 110, 112, 118, 126, 127, 139, 171, 184, 194, 197, 198, 199, 202, 204, 205, 206, 208, 209, 215, 217, 218, 222, 224, 225, 229, 230, 241, 244, 247, 257, 282, 286], "13": [6, 34, 42, 49, 51, 56, 60, 61, 63, 65, 68, 72, 73, 74, 75, 85, 90, 96, 100, 104, 108, 110, 124, 139, 195, 202, 204, 205, 206, 208, 209, 215, 222, 224, 226, 227, 229, 230, 241, 264], "14": [6, 28, 42, 49, 51, 55, 56, 58, 60, 61, 65, 66, 68, 85, 96, 97, 100, 101, 103, 108, 124, 194, 195, 198, 200, 202, 203, 204, 205, 206, 208, 209, 218, 221, 222, 225, 227, 229, 230, 276], "15": [6, 12, 20, 40, 46, 49, 51, 56, 58, 60, 61, 63, 64, 65, 68, 70, 73, 74, 76, 77, 85, 87, 90, 91, 92, 96, 97, 100, 103, 115, 147, 194, 195, 197, 198, 199, 200, 204, 205, 206, 208, 209, 211, 215, 216, 218, 221, 222, 226, 227, 228, 229, 230, 247, 275, 276, 281, 282], "16": [6, 28, 30, 34, 40, 42, 51, 52, 55, 59, 60, 61, 65, 68, 69, 70, 74, 85, 87, 90, 96, 97, 99, 100, 104, 190, 197, 198, 199, 202, 203, 204, 205, 208, 209, 215, 217, 218, 219, 222, 229, 230, 247, 254, 263, 282], "17": [6, 10, 27, 30, 49, 51, 52, 60, 61, 64, 65, 66, 70, 73, 76, 85, 96, 100, 110, 199, 200, 204, 205, 208, 209, 216, 218, 222, 225, 230, 244, 248, 280], "18": [6, 27, 51, 52, 63, 65, 68, 70, 73, 76, 92, 96, 100, 103, 104, 108, 110, 112, 185, 194, 202, 203, 208, 209, 217, 218, 222, 225, 227, 228, 229, 230, 257], "19": [6, 27, 51, 60, 63, 68, 70, 73, 76, 96, 100, 102, 103, 194, 200, 204, 205, 208, 218, 222, 224, 227, 241, 275], "20": [6, 12, 27, 30, 38, 42, 49, 51, 52, 59, 60, 61, 64, 65, 68, 76, 77, 87, 96, 100, 103, 104, 106, 110, 121, 179, 181, 194, 195, 199, 203, 204, 205, 206, 208, 209, 215, 216, 217, 218, 221, 222, 225, 228, 229, 254, 276], "21": [6, 10, 46, 51, 60, 63, 65, 73, 74, 82, 96, 100, 102, 103, 139, 195, 200, 202, 203, 204, 206, 208, 209, 215, 225, 229, 230, 286], "22": [6, 12, 51, 60, 63, 64, 65, 68, 96, 100, 103, 104, 139, 203, 208, 221, 222, 227, 229], "23": [6, 40, 51, 52, 60, 63, 66, 68, 74, 76, 96, 100, 103, 139, 200, 205, 208, 215, 222, 247], "24": [6, 24, 26, 27, 34, 40, 48, 52, 53, 60, 63, 65, 68, 74, 82, 87, 96, 100, 103, 104, 108, 110, 171, 181, 194, 200, 202, 204, 205, 206, 208, 211, 216, 222, 225, 229, 244, 247, 264, 276, 282], "25": [6, 12, 24, 27, 51, 52, 61, 63, 65, 68, 70, 73, 75, 92, 96, 99, 100, 103, 104, 110, 115, 121, 188, 194, 202, 204, 205, 208, 209, 215, 216, 218, 222, 224, 225, 226, 229, 241], "26": [6, 49, 60, 61, 63, 68, 72, 96, 100, 103, 104, 205, 222, 229], "27": [6, 25, 42, 43, 51, 55, 65, 70, 96, 100, 103, 104, 110, 112, 202, 205, 227], "28": [6, 42, 51, 59, 63, 64, 68, 96, 100, 103, 126, 218, 222, 225, 281], "29": [6, 34, 49, 51, 52, 60, 61, 63, 65, 66, 73, 74, 96, 100, 110, 163, 199, 217, 229], "assumpt": [6, 11, 12, 17, 19, 21, 24, 25, 26, 35, 36, 38, 39, 41, 42, 51, 52, 54, 59, 62, 64, 66, 67, 87, 90, 91, 96, 97, 103, 110, 114, 141, 181, 186, 198, 208, 209, 217, 218, 221, 225, 227, 228, 234, 242, 247, 265, 266, 286], "parenthes": [6, 12, 60, 102, 114, 162, 163, 193, 209, 233, 250], "type": [6, 8, 10, 11, 12, 13, 15, 18, 19, 20, 22, 24, 25, 30, 36, 37, 40, 51, 52, 56, 59, 60, 61, 62, 63, 64, 66, 70, 71, 72, 73, 74, 75, 78, 85, 87, 88, 89, 90, 91, 92, 93, 96, 100, 101, 102, 103, 104, 106, 108, 110, 114, 118, 119, 124, 135, 141, 146, 160, 168, 169, 170, 172, 184, 188, 189, 193, 195, 196, 199, 200, 203, 204, 205, 206, 207, 209, 210, 211, 217, 218, 219, 221, 222, 224, 225, 227, 233, 234, 235, 238, 240, 241, 242, 247, 248, 250, 258, 261, 264, 276, 278, 280, 281, 282, 285, 286, 287], "enclos": [6, 70, 71, 76, 99, 111, 209, 219, 248], "colon": [6, 60], "preced": [6, 7, 12, 43, 52, 60, 61, 64, 65, 154, 221, 248], "space": [6, 12, 20, 40, 41, 42, 60, 61, 62, 69, 70, 71, 73, 75, 76, 89, 96, 102, 103, 112, 118, 119, 120, 121, 143, 145, 148, 158, 161, 163, 169, 171, 178, 184, 188, 190, 193, 194, 195, 196, 204, 228, 229, 240, 244, 254, 256, 258, 259, 260, 261, 263, 264, 271, 278, 281], "omit": [6, 10, 18, 20, 42, 52, 59, 60, 61, 65, 85, 87, 90, 96, 176, 209, 210, 217, 219, 227, 233, 242, 247, 276], "absent": [6, 44, 227], "specifi": [6, 7, 10, 14, 18, 20, 26, 27, 28, 29, 30, 41, 42, 43, 55, 59, 60, 61, 62, 63, 66, 68, 69, 73, 76, 85, 87, 89, 90, 91, 93, 96, 100, 102, 103, 104, 110, 115, 118, 119, 123, 124, 126, 128, 129, 131, 134, 136, 137, 138, 139, 141, 142, 158, 163, 168, 169, 171, 172, 177, 183, 184, 186, 188, 190, 192, 193, 196, 197, 198, 199, 200, 202, 204, 205, 206, 209, 211, 212, 215, 216, 217, 219, 221, 225, 226, 227, 228, 229, 230, 234, 235, 236, 240, 241, 242, 247, 248, 254, 256, 257, 260, 263, 282], "displai": [6, 7, 12, 18, 19, 60, 61, 64, 85, 89, 103, 104, 108, 145, 178, 184, 188, 189, 195, 199, 200, 209, 217, 233, 240], "signatur": [6, 20, 36, 37, 52, 60, 96, 242, 243, 247, 248], "brace": [6, 65, 124, 209], "appear": [6, 7, 11, 12, 14, 41, 42, 44, 49, 51, 60, 61, 65, 66, 69, 70, 73, 76, 79, 83, 85, 87, 91, 96, 100, 102, 124, 128, 158, 174, 176, 179, 195, 197, 199, 202, 204, 205, 209, 218, 221, 225, 226, 227, 229, 233, 235, 240, 247, 248, 254, 259], "shape": [6, 10, 42, 76, 91, 93, 96, 98, 99, 108, 110, 118, 123, 124, 184, 195, 196, 198, 209, 212, 219, 229, 230, 231, 233, 234, 235, 248, 285], "combin": [6, 10, 12, 20, 28, 29, 41, 60, 64, 65, 68, 87, 89, 90, 91, 100, 104, 110, 118, 123, 127, 134, 142, 153, 160, 168, 169, 171, 172, 173, 177, 179, 180, 196, 197, 199, 200, 202, 204, 205, 209, 210, 218, 219, 221, 222, 225, 227, 229, 230, 244, 247, 275, 278, 281], "incorrectli": [6, 10, 20, 69, 70, 96, 197], "opt_cs": [6, 221], "canon": [6, 11, 18, 23, 42, 44, 49, 51, 52, 56, 60, 61, 62, 66, 76, 85, 90, 96, 100, 102, 119, 151, 155, 174, 176, 179, 181, 202, 210, 217, 218, 221, 225, 227, 229, 235, 247, 286], "find": [6, 11, 12, 14, 16, 17, 20, 22, 24, 25, 26, 29, 30, 34, 37, 40, 42, 43, 51, 54, 55, 56, 59, 60, 64, 66, 68, 70, 72, 73, 74, 77, 82, 85, 87, 89, 96, 100, 102, 116, 125, 132, 139, 141, 143, 159, 166, 168, 169, 170, 174, 177, 179, 192, 195, 196, 197, 198, 199, 200, 202, 206, 208, 209, 214, 215, 216, 217, 218, 219, 221, 222, 224, 225, 227, 228, 229, 235, 244, 247, 248, 250, 254, 264, 276, 278, 280, 282, 287], "optim": [6, 11, 27, 42, 44, 51, 64, 90, 100, 114, 141, 154, 158, 205, 209, 210, 218, 221, 229, 241], "mul": [6, 10, 11, 12, 15, 20, 34, 85, 87, 91, 100, 154, 158, 168, 169, 198, 199, 200, 204, 205, 209, 210, 211, 218, 221, 225, 226, 227, 228, 233, 281], "pow": [6, 10, 11, 12, 34, 39, 42, 60, 61, 66, 85, 91, 100, 173, 198, 199, 200, 205, 209, 211, 218, 221, 227, 228, 281, 285], "neg": [6, 11, 12, 18, 19, 25, 38, 39, 42, 43, 55, 59, 60, 65, 66, 68, 70, 72, 73, 76, 85, 87, 89, 90, 91, 96, 99, 100, 103, 104, 106, 107, 108, 110, 118, 174, 184, 194, 197, 198, 200, 202, 204, 205, 206, 209, 215, 217, 218, 219, 221, 222, 225, 227, 228, 229], "coeffici": [6, 14, 16, 18, 24, 26, 28, 37, 40, 42, 59, 60, 62, 64, 65, 68, 73, 78, 79, 82, 83, 85, 89, 90, 93, 96, 97, 100, 111, 119, 124, 147, 161, 171, 179, 194, 196, 197, 198, 199, 200, 201, 204, 205, 206, 207, 208, 211, 212, 215, 216, 219, 221, 222, 224, 225, 226, 227, 228, 229, 235, 241, 258, 261, 271, 281, 286], "none": [6, 7, 10, 11, 18, 19, 20, 34, 35, 36, 37, 38, 40, 41, 42, 49, 50, 51, 52, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 81, 82, 83, 85, 87, 88, 90, 91, 93, 96, 97, 100, 101, 102, 103, 110, 115, 116, 118, 119, 120, 121, 123, 124, 143, 145, 147, 148, 154, 159, 164, 169, 171, 174, 176, 180, 181, 182, 184, 186, 188, 189, 193, 194, 195, 196, 198, 199, 200, 202, 204, 205, 207, 209, 210, 211, 212, 214, 215, 216, 217, 218, 221, 222, 225, 226, 227, 228, 229, 230, 233, 234, 235, 238, 240, 241, 242, 243, 247, 248, 250, 253, 254, 257, 282, 286, 287], "process": [6, 7, 10, 11, 12, 18, 39, 42, 51, 52, 58, 60, 61, 66, 68, 76, 85, 87, 96, 100, 110, 120, 124, 126, 132, 135, 136, 138, 141, 195, 196, 202, 209, 210, 217, 221, 225, 227, 240, 244, 286], "concern": [6, 11, 18, 40, 43, 59, 64, 100, 190, 195, 197, 198, 199, 208, 209, 210, 221, 222, 227, 241, 242, 244, 250], "item": [6, 7, 11, 12, 14, 28, 42, 49, 50, 52, 60, 65, 71, 77, 91, 96, 100, 119, 195, 199, 202, 205, 209, 217, 225, 226, 229, 240, 241, 244, 247, 248, 286], "fragment": [6, 61], "desir": [6, 10, 12, 16, 20, 23, 30, 33, 51, 52, 60, 61, 63, 64, 65, 66, 70, 74, 76, 90, 91, 96, 99, 100, 101, 119, 120, 121, 123, 134, 138, 159, 184, 192, 193, 198, 200, 202, 204, 205, 206, 209, 210, 212, 217, 221, 225, 227, 228, 241, 243, 244, 247, 261, 275], "span": [6, 10, 89, 96, 103, 104, 118, 204, 209, 245, 282], "subsequ": [6, 12, 60, 66, 184, 200, 202, 205, 244, 247, 258, 261], "indent": [6, 12, 250], "embed": [6, 7, 40, 52, 60, 88, 204], "hyperlink": 6, "classnam": 6, "erf": [6, 68, 85, 87, 209, 219, 229], "gauss": [6, 26, 68, 87, 96, 143, 197, 204, 207, 227, 228], "erfc": [6, 68, 85, 209, 229], "complementari": [6, 68, 110], "erfi": [6, 68, 85, 209], "erf2": [6, 68, 209], "erfinv": [6, 68, 209, 229], "invers": [6, 26, 34, 51, 52, 60, 61, 62, 68, 87, 93, 96, 100, 118, 119, 163, 167, 168, 171, 176, 179, 196, 197, 198, 200, 202, 205, 206, 209, 211, 219, 221, 225, 227, 228, 229, 247, 282, 286], "erfcinv": [6, 68, 209], "erf2inv": [6, 68, 209], "besselj": [6, 68, 82, 209, 221, 225, 280], "besselbas": [6, 68], "bessel": [6, 7, 66, 78, 87, 205, 221, 225, 229, 280], "kind": [6, 7, 10, 11, 17, 18, 19, 20, 41, 42, 62, 65, 68, 80, 87, 91, 103, 106, 119, 124, 137, 190, 197, 199, 200, 205, 210, 211, 217, 225, 226, 229, 247, 261, 263, 276, 286], "bess": [6, 68, 209, 221, 225, 229], "besselk": [6, 68, 209, 229], "cite": [6, 21], "citat": [6, 59, 203], "meant": [6, 7, 10, 12, 18, 20, 42, 60, 68, 73, 87, 100, 124, 141, 195, 200, 217, 221, 226, 259, 281], "augment": [6, 42, 96, 119, 136, 137, 141, 207, 227, 228, 245, 248, 287], "freeli": [6, 33, 94, 118, 196], "wikipedia": [6, 11, 18, 20, 34, 36, 37, 38, 40, 41, 42, 48, 49, 51, 52, 59, 60, 61, 62, 63, 65, 66, 68, 70, 72, 76, 77, 78, 87, 89, 90, 91, 93, 96, 100, 108, 110, 113, 143, 145, 146, 147, 149, 150, 151, 155, 156, 157, 160, 162, 163, 172, 174, 177, 184, 186, 191, 205, 212, 216, 217, 218, 225, 228, 229, 242, 247, 254, 256, 260, 262, 264, 280, 282, 284], "wolfram": [6, 38, 53, 54, 60, 61, 63, 65, 66, 68, 70, 76, 87, 96, 100, 102, 203, 209, 211, 212, 214, 217, 222, 229, 247, 282], "mathworld": [6, 11, 38, 53, 54, 60, 61, 63, 65, 66, 68, 70, 76, 87, 96, 100, 203, 212, 217, 222, 229, 247], "nist": [6, 66, 68, 179], "digit": [6, 11, 12, 27, 42, 60, 61, 63, 64, 70, 87, 90, 100, 134, 184, 199, 205, 216, 221, 247, 275], "dlmf": [6, 66, 68], "suffer": 6, "rot": [6, 76, 171], "publish": [6, 85, 219], "identifi": [6, 10, 18, 19, 40, 53, 60, 63, 64, 87, 96, 106, 136, 162, 163, 196, 199, 200, 210, 218, 221, 225, 226, 228, 229, 248, 251], "clickabl": 6, "kozen89": [6, 202, 203], "kozen": [6, 203], "landau": [6, 203, 276], "polynomi": [6, 7, 11, 16, 18, 22, 24, 30, 38, 51, 59, 60, 61, 64, 65, 78, 79, 81, 83, 87, 90, 91, 93, 96, 100, 104, 110, 139, 141, 196, 198, 203, 207, 211, 216, 218, 219, 221, 222, 224, 225, 228, 240, 265, 272, 277, 282, 287], "decomposit": [6, 26, 28, 51, 58, 92, 93, 96, 198, 200, 202, 203, 211, 286], "1989": [6, 203, 227], "pp": [6, 51, 52, 58, 59, 60, 61, 65, 66, 87, 91, 96, 128, 138, 194, 197, 202, 203, 225, 226, 229], "445": [6, 203], "456": [6, 60, 203], "abramowitz": [6, 68], "milton": [6, 68], "stegun": [6, 68], "iren": [6, 68], "chapter": [6, 51, 68, 100, 124, 203], "formula": [6, 16, 28, 40, 54, 59, 60, 64, 65, 66, 68, 73, 90, 96, 100, 194, 196, 202, 205, 209, 211, 215, 218, 221, 222, 225, 280, 286], "tabl": [6, 18, 43, 51, 60, 65, 68, 81, 87, 96, 100, 118, 141, 194, 204, 231], "ed": [6, 52, 68, 96, 203, 227, 229], "1965": [6, 68, 91], "luke": [6, 68, 85, 219], "l": [6, 10, 12, 40, 41, 42, 43, 49, 51, 52, 59, 61, 68, 71, 72, 73, 74, 75, 77, 78, 83, 85, 87, 89, 92, 93, 96, 100, 103, 104, 110, 112, 118, 119, 121, 123, 124, 127, 128, 129, 131, 132, 133, 137, 138, 139, 140, 141, 142, 143, 146, 172, 175, 176, 177, 179, 192, 193, 194, 196, 198, 200, 202, 203, 209, 211, 212, 218, 219, 222, 225, 227, 229, 233, 234, 235, 236, 240, 242, 247, 264, 286], "Their": [6, 60, 68, 85, 194, 195, 199, 202, 219], "approxim": [6, 12, 17, 30, 40, 51, 59, 60, 61, 64, 68, 70, 76, 85, 87, 96, 100, 104, 107, 143, 177, 195, 199, 200, 205, 212, 216, 219, 229, 276, 280], "1969": [6, 61, 68, 85, 203, 219], "en": [6, 7, 18, 20, 34, 36, 37, 38, 40, 41, 42, 48, 49, 51, 52, 59, 60, 61, 62, 63, 65, 66, 68, 70, 72, 76, 77, 78, 87, 88, 89, 90, 91, 93, 96, 100, 108, 110, 113, 143, 145, 146, 147, 149, 150, 151, 155, 156, 157, 160, 162, 163, 172, 174, 184, 186, 191, 205, 206, 212, 216, 217, 218, 225, 228, 229, 242, 247, 248, 254, 256, 260, 262, 264, 282], "bessel_funct": [6, 68], "typefunct": [6, 68], "gamma": [6, 7, 12, 20, 59, 60, 62, 64, 65, 85, 87, 113, 141, 171, 193, 194, 209, 219, 221, 225, 229, 286], "infti": [6, 11, 18, 38, 59, 60, 61, 65, 66, 68, 85, 87, 196, 205, 212, 216, 219, 225, 228, 229, 276, 280, 286], "mathrm": [6, 32, 50, 59, 60, 61, 68, 85, 87, 96, 200, 202, 209, 217, 219, 225, 228, 229, 276, 280], "factori": [6, 16, 20, 26, 59, 60, 64, 65, 68, 96, 100, 102, 194, 200, 202, 204, 205, 209, 211, 221, 227, 229, 242, 243, 247, 248, 286], "z": [6, 10, 11, 12, 14, 18, 20, 24, 27, 29, 38, 39, 42, 43, 51, 52, 59, 60, 61, 62, 63, 65, 66, 68, 72, 73, 74, 75, 76, 85, 87, 90, 91, 93, 96, 102, 103, 104, 112, 115, 116, 118, 121, 124, 126, 127, 128, 129, 131, 132, 133, 135, 138, 139, 141, 142, 143, 152, 154, 158, 168, 169, 171, 175, 179, 183, 184, 185, 186, 188, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 208, 209, 210, 216, 217, 218, 219, 221, 222, 225, 226, 227, 228, 229, 230, 233, 234, 235, 241, 242, 248, 254, 257, 258, 259, 260, 261, 263, 264, 275, 276, 278, 280, 281, 285, 286, 287], "whole": [6, 10, 18, 60, 62, 68, 87, 104, 112, 195, 196, 204, 205, 209, 212, 217, 219, 225, 228, 247], "complex": [6, 10, 11, 12, 15, 18, 20, 24, 25, 26, 30, 34, 38, 39, 40, 42, 51, 60, 61, 63, 64, 65, 68, 72, 82, 85, 91, 92, 96, 100, 101, 102, 108, 110, 114, 124, 141, 143, 147, 157, 160, 162, 163, 174, 183, 184, 193, 197, 198, 200, 204, 205, 209, 210, 214, 217, 219, 221, 225, 227, 228, 229, 242, 250, 286, 287], "plane": [6, 34, 60, 68, 70, 72, 73, 75, 76, 87, 108, 118, 126, 146, 147, 192, 193, 217, 228, 264, 272, 286], "pole": [6, 11, 68, 85, 110, 118, 147, 216, 219, 225], "pi": [6, 10, 11, 12, 15, 18, 20, 22, 23, 25, 30, 33, 34, 35, 37, 38, 39, 40, 42, 52, 59, 60, 62, 64, 65, 66, 68, 69, 70, 71, 73, 74, 75, 76, 79, 85, 87, 96, 100, 112, 118, 126, 141, 143, 145, 146, 147, 148, 150, 158, 169, 171, 172, 175, 177, 184, 194, 195, 197, 199, 200, 205, 209, 212, 216, 217, 218, 219, 221, 224, 225, 227, 228, 229, 247, 254, 257, 264, 275, 280, 286], "oo": [6, 11, 14, 18, 19, 23, 38, 40, 59, 60, 64, 65, 66, 68, 73, 85, 87, 90, 96, 110, 112, 160, 172, 175, 200, 202, 205, 214, 215, 216, 217, 221, 224, 225, 227, 228, 229, 234, 247, 250, 276, 280], "known": [6, 11, 18, 19, 20, 37, 41, 42, 43, 49, 51, 52, 60, 61, 64, 65, 68, 70, 73, 78, 85, 87, 88, 97, 100, 108, 110, 111, 113, 115, 121, 138, 177, 184, 192, 198, 199, 200, 204, 205, 209, 212, 215, 217, 218, 219, 221, 224, 225, 226, 227, 229, 247, 248, 254, 261, 263, 286], "sqrt": [6, 10, 11, 14, 18, 20, 22, 23, 24, 25, 28, 29, 30, 34, 38, 39, 40, 42, 60, 62, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 83, 84, 85, 87, 88, 91, 92, 96, 100, 102, 103, 106, 110, 112, 126, 143, 145, 147, 148, 153, 158, 168, 169, 171, 172, 174, 175, 177, 184, 190, 193, 194, 197, 199, 200, 202, 204, 205, 208, 209, 210, 215, 218, 219, 221, 222, 224, 225, 227, 228, 229, 247, 248, 250, 254, 263, 264, 275, 280, 285, 286, 287], "obei": [6, 68, 194, 209, 219], "mirror": [6, 68, 87, 147], "symmetri": [6, 10, 48, 53, 56, 68, 91, 153, 194, 225, 233, 235, 275, 286], "conjug": [6, 28, 38, 49, 50, 51, 60, 66, 68, 91, 96, 112, 143, 157, 160, 174, 205, 209, 225, 235], "differenti": [6, 7, 10, 11, 22, 40, 60, 65, 66, 68, 77, 78, 80, 83, 110, 118, 119, 123, 124, 126, 128, 131, 134, 135, 136, 137, 138, 141, 142, 163, 169, 183, 184, 186, 188, 190, 193, 196, 202, 206, 208, 209, 214, 219, 221, 225, 226, 254, 261, 262, 265, 272, 276, 277, 280], "polygamma": [6, 65, 68, 209], "seri": [6, 16, 40, 41, 42, 43, 50, 51, 59, 60, 62, 64, 65, 66, 68, 83, 84, 85, 89, 100, 107, 110, 124, 131, 133, 141, 188, 192, 201, 202, 209, 214, 215, 219, 225, 228, 266, 272, 277], "expans": [6, 16, 20, 42, 60, 62, 65, 66, 68, 87, 96, 100, 138, 153, 155, 205, 206, 211, 212, 213, 218, 220, 221, 225, 227, 228, 266, 277, 286], "eulergamma": [6, 60, 64, 65, 68], "zeta": [6, 11, 12, 59, 60, 64, 65, 200, 204, 209, 216, 229], "40": [6, 30, 42, 63, 65, 68, 70, 77, 91, 96, 100, 103, 195, 206, 208, 209, 229, 250, 275], "288037795340032417959588909060233922890": [6, 68], "49801566811835604271": [6, 68], "15494982830181068512": [6, 68], "lowergamma": [6, 68, 229], "lower": [6, 10, 11, 18, 23, 38, 40, 42, 51, 52, 59, 60, 62, 68, 69, 71, 76, 77, 87, 91, 92, 93, 96, 108, 113, 118, 174, 188, 194, 196, 198, 200, 202, 205, 209, 218, 219, 221, 225, 234, 235, 244, 254, 276, 284], "uppergamma": [6, 65, 68, 209, 229], "upper": [6, 38, 59, 61, 64, 68, 69, 76, 77, 91, 92, 93, 96, 99, 100, 108, 118, 167, 174, 194, 198, 200, 202, 204, 205, 209, 219, 227, 234, 254], "loggamma": [6, 7, 68, 209], "log": [6, 7, 12, 20, 32, 34, 40, 42, 51, 59, 60, 64, 65, 66, 68, 78, 82, 84, 85, 87, 91, 96, 100, 195, 200, 209, 211, 216, 219, 221, 225, 228, 229, 236, 276, 286, 287], "digamma": [6, 65, 68, 209], "trigamma": [6, 68, 209], "beta": [6, 12, 42, 51, 60, 87, 171, 184, 194, 204, 206, 209, 225, 229], "euler": [6, 40, 41, 59, 60, 61, 64, 65, 68, 76, 82, 88, 100, 118, 171, 184, 189, 193, 194, 205, 209, 225, 229, 254, 256], "gamma_funct": [6, 68], "gov": [6, 66, 68], "gammafunct": [6, 68], "gammabetaerf": [6, 65, 68], "unusu": [6, 18, 126, 240], "inlin": [6, 88, 189, 209, 242], "pretti": [6, 11, 20, 41, 42, 68, 87, 88, 96, 100, 104, 110, 126, 189, 219, 221, 228, 263, 277, 280, 282, 286], "As": [6, 10, 15, 16, 19, 20, 26, 27, 28, 33, 42, 51, 52, 60, 61, 64, 65, 66, 68, 84, 85, 90, 96, 99, 100, 102, 118, 123, 124, 126, 128, 135, 138, 139, 174, 179, 192, 196, 197, 199, 200, 202, 205, 206, 208, 209, 216, 217, 219, 225, 228, 229, 247, 248, 258, 259, 275, 276, 278, 280, 281, 282, 285, 286], "literatur": [6, 11, 85, 201, 272], "fact": [6, 10, 11, 18, 19, 20, 25, 37, 38, 60, 65, 68, 78, 85, 100, 106, 126, 138, 179, 196, 197, 199, 202, 204, 206, 208, 219, 221, 225, 228, 240, 248, 263, 275, 278, 279, 280, 281, 286], "eval": [6, 10, 18, 36, 37, 42, 60, 66, 68, 160, 174, 200, 205, 209, 242, 275], "illumin": 6, "tone": 6, "narr": [6, 8, 279], "excerpt": 6, "geometri": [6, 69, 70, 71, 73, 74, 75, 76, 77, 87, 134, 147, 201, 257, 264, 265, 272, 280], "autofunct": 6, "intersect": [6, 18, 25, 40, 41, 51, 70, 71, 73, 74, 75, 76, 77, 147, 196, 205, 209, 215, 216, 217, 228], "convex_hul": [6, 72, 76, 77], "are_similar": [6, 71, 72, 77], "autoclass": 6, "linearent": [6, 70, 73, 74, 75, 76], "rai": [6, 70, 72, 73, 74, 76, 77, 143, 147], "segment": [6, 10, 51, 70, 72, 73, 74, 75, 76, 77, 192, 195, 225, 240], "curv": [6, 41, 62, 72, 87, 100, 103, 143, 195, 196, 225, 254, 264, 272, 276], "ellips": [6, 71, 72, 76, 146, 195, 209, 272, 285], "circl": [6, 20, 60, 70, 71, 72, 74, 75, 76, 77, 85, 147, 154, 195, 228, 254, 257, 264], "polygon": [6, 70, 71, 72, 77, 195, 264, 272], "regularpolygon": [6, 71, 72, 76, 195], "triangl": [6, 20, 41, 65, 71, 72, 76, 77, 87, 91, 100, 194, 195, 257, 264], "rel": [6, 7, 10, 24, 41, 42, 50, 51, 52, 53, 57, 58, 59, 60, 61, 64, 71, 85, 100, 115, 118, 121, 129, 138, 139, 146, 173, 184, 188, 192, 193, 196, 198, 199, 202, 204, 217, 219, 224, 227, 229, 240, 247, 258, 259, 263, 280], "cumbersom": [6, 30], "viewcod": 6, "aco": [6, 12, 34, 66, 73, 76, 126, 141, 147, 184, 209, 225, 254, 286], "obj": [6, 10, 18, 60, 200, 205, 209, 243], "qualifi": [6, 251], "elementari": [6, 18, 19, 20, 51, 60, 61, 64, 67, 68, 82, 85, 87, 91, 96, 100, 139, 167, 170, 205, 206, 247, 248, 258, 266], "trigonometr": [6, 20, 23, 30, 60, 87, 206, 212, 220, 221, 224, 225, 228, 248, 266, 277, 287], "trail": [6, 52, 100, 200, 202, 205, 245, 250], "pair": [6, 12, 16, 24, 28, 41, 42, 51, 52, 60, 61, 66, 72, 77, 84, 96, 100, 124, 128, 164, 166, 168, 169, 174, 183, 194, 196, 199, 202, 204, 205, 210, 215, 216, 218, 219, 221, 222, 225, 228, 229, 242, 247, 258, 275, 282], "www": [6, 7, 34, 40, 51, 52, 61, 63, 65, 68, 82, 87, 88, 100, 108, 189, 203, 208, 209, 218, 221, 222, 225, 229, 247, 282, 285], "master": [6, 7, 32, 87, 240], "usag": [6, 7, 11, 12, 18, 19, 20, 33, 36, 62, 66, 87, 171, 190, 195, 196, 202, 209, 217, 219, 222, 225, 226, 230, 244, 248, 249, 261, 262, 269, 281], "expect": [6, 7, 12, 18, 20, 41, 43, 45, 60, 66, 68, 72, 90, 100, 101, 110, 118, 124, 168, 199, 202, 204, 206, 207, 216, 221, 224, 227, 228, 229, 238, 240, 241, 244, 247, 248, 280, 281], "vector": [6, 16, 34, 38, 42, 44, 51, 52, 60, 62, 68, 73, 74, 75, 82, 83, 89, 91, 96, 101, 103, 106, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 126, 128, 131, 132, 133, 135, 136, 137, 138, 139, 141, 142, 146, 147, 160, 169, 171, 176, 179, 184, 186, 188, 189, 196, 204, 209, 219, 225, 227, 229, 234, 235, 240, 241, 256, 260, 265, 269, 271, 282], "dynamicsymbol": [6, 114, 115, 116, 118, 119, 121, 123, 124, 126, 127, 128, 129, 131, 132, 133, 135, 136, 137, 138, 139, 141, 142, 184, 186, 188, 189, 190, 192, 193], "custom": [6, 10, 21, 42, 52, 60, 64, 67, 88, 91, 96, 116, 118, 183, 189, 190, 211, 215, 222, 229, 235, 241, 248, 254, 263, 280, 282], "sine": [6, 20, 60, 66, 68, 85, 87, 148, 206, 212, 218, 275], "expand": [6, 10, 11, 12, 16, 18, 28, 42, 60, 62, 64, 65, 66, 68, 85, 87, 91, 110, 124, 126, 141, 155, 163, 166, 173, 174, 197, 199, 202, 204, 205, 206, 209, 212, 216, 218, 219, 221, 225, 228, 229, 233, 241, 248, 260, 275, 280], "troubleshoot": [6, 138], "spell": [6, 10, 11, 225], "try": [6, 7, 8, 10, 11, 12, 18, 19, 20, 23, 24, 26, 27, 28, 30, 52, 59, 60, 64, 68, 70, 75, 85, 87, 90, 93, 96, 99, 100, 164, 166, 173, 174, 195, 199, 204, 209, 214, 216, 217, 218, 219, 221, 222, 225, 227, 248, 250, 275, 278, 281, 282, 286], "referencefram": [6, 10, 115, 116, 118, 119, 121, 124, 126, 127, 128, 131, 132, 133, 136, 137, 138, 139, 141, 142, 184, 185, 186, 188, 189, 190, 191, 192, 271], "though": [6, 11, 12, 18, 19, 20, 27, 28, 29, 30, 33, 43, 60, 61, 62, 72, 76, 85, 87, 91, 96, 100, 114, 119, 126, 136, 138, 169, 183, 184, 192, 193, 197, 199, 200, 205, 206, 218, 219, 221, 225, 226, 227, 228, 240, 261, 276, 281, 286], "frame": [6, 114, 115, 116, 118, 119, 121, 123, 124, 126, 127, 128, 129, 131, 133, 135, 136, 137, 138, 139, 141, 142, 183, 184, 185, 186, 188, 190, 192, 244, 254, 261], "notimplementederror": [6, 23, 25, 29, 30, 40, 59, 70, 73, 77, 87, 96, 108, 198, 204, 208, 217, 224, 225, 226, 227, 228], "outsid": [6, 25, 38, 51, 60, 68, 71, 76, 91, 100, 114, 179, 193, 205, 221, 276, 281], "plot": [6, 20, 32, 69, 70, 72, 73, 76, 83, 88, 96, 103, 104, 109, 141, 158, 161, 167, 212, 265, 271, 272, 280, 285], "ahead": [6, 100], "submit": 6, "sub": [6, 10, 11, 12, 14, 18, 19, 20, 24, 25, 27, 28, 42, 59, 60, 66, 68, 69, 70, 71, 72, 73, 74, 76, 87, 90, 91, 93, 96, 100, 102, 103, 104, 110, 114, 116, 124, 126, 127, 128, 131, 132, 138, 141, 171, 172, 177, 184, 194, 196, 198, 199, 200, 205, 209, 216, 217, 221, 222, 225, 226, 227, 229, 240, 241, 243, 275, 276, 278], "common": [6, 7, 10, 11, 12, 18, 19, 20, 22, 23, 24, 25, 40, 42, 51, 52, 60, 61, 66, 71, 74, 77, 87, 93, 95, 96, 100, 101, 108, 110, 115, 118, 120, 127, 134, 139, 141, 146, 179, 184, 192, 193, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 207, 211, 217, 218, 219, 221, 222, 225, 227, 228, 229, 241, 242, 245, 247, 248, 261, 263, 269, 275, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287], "matrixcommon": [6, 91, 93, 96], "dyadic": [6, 63, 115, 121, 124, 126, 131, 133, 141, 184, 186, 189, 191, 254, 257, 262], "shorten": 6, "highli": [7, 60, 64, 107, 199, 205, 214, 242], "aspect": [7, 18, 96, 199], "teach": [7, 52, 61, 229], "conduct": 7, "accord": [7, 12, 42, 48, 51, 52, 56, 59, 60, 61, 68, 90, 93, 96, 100, 102, 118, 125, 134, 168, 174, 195, 200, 202, 204, 206, 222, 227, 228, 235, 240, 242, 247, 263], "survei": 7, "commonli": [7, 11, 52, 65, 68, 87, 96, 114, 192, 197, 225, 261], "encount": [7, 12, 16, 23, 28, 60, 87, 96, 166, 197, 202, 205, 227, 228, 242, 254, 282], "problem": [7, 10, 11, 12, 16, 18, 19, 20, 22, 25, 28, 30, 44, 54, 56, 60, 61, 72, 85, 87, 91, 96, 100, 103, 105, 106, 111, 114, 124, 128, 129, 132, 134, 136, 183, 192, 193, 196, 197, 202, 219, 221, 222, 225, 228, 244, 247, 271, 276, 278, 282], "offer": [7, 41, 42, 51, 60, 101, 114, 141, 183, 193, 199, 204, 244, 262], "bring": [7, 85, 119, 132, 198, 212, 221, 282], "greater": [7, 28, 38, 52, 60, 65, 66, 68, 85, 89, 100, 110, 202, 205, 208, 216, 221, 225, 227, 229, 244, 247, 261, 276], "clariti": [7, 51, 188], "mission": [7, 41, 94], "ca": [7, 32, 61, 68, 87, 208, 209, 247], "dedic": [7, 42, 201, 224, 242, 259, 261], "essenti": [7, 44, 55, 60, 64, 66, 67, 68, 85, 121, 126, 187, 190, 191, 193, 196, 197, 200, 204, 216, 219, 255, 258, 261, 262, 263, 269, 271], "element": [7, 10, 11, 12, 15, 18, 24, 34, 38, 41, 42, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 76, 83, 85, 87, 89, 90, 91, 92, 93, 96, 99, 100, 101, 103, 104, 110, 111, 121, 141, 143, 146, 160, 171, 179, 188, 191, 193, 195, 196, 197, 198, 200, 202, 205, 207, 208, 209, 215, 216, 217, 219, 221, 222, 225, 227, 228, 229, 230, 234, 241, 243, 244, 247, 248, 249, 257, 276, 281, 282, 285, 286], "deviat": [7, 147, 229], "advanc": [7, 15, 17, 20, 36, 51, 60, 64, 65, 96, 97, 134, 139, 191, 195, 198, 199, 201, 203, 204, 211, 218, 225, 240, 241, 242, 247, 271, 275, 277, 279, 283, 284, 285, 286], "docutil": 7, "sourceforg": [7, 41], "net": [7, 41, 76, 203, 225, 229, 247], "ext": [7, 196, 200], "autodoc": 7, "associ": [7, 10, 11, 18, 24, 41, 43, 58, 60, 61, 67, 68, 82, 83, 85, 89, 139, 141, 164, 172, 183, 184, 192, 193, 197, 198, 199, 200, 202, 204, 209, 217, 219, 222, 235, 249], "graphic": [7, 108], "info": [7, 12, 110, 209, 225, 226], "bear": [7, 18], "linkcod": 7, "readthedoc": [7, 88, 248], "subset": [7, 16, 18, 20, 28, 40, 41, 44, 47, 51, 52, 58, 65, 66, 72, 83, 85, 87, 89, 100, 196, 198, 202, 204, 209, 217, 247, 266], "modifi": [7, 11, 12, 41, 42, 51, 60, 66, 68, 100, 102, 137, 146, 195, 202, 204, 205, 206, 209, 221, 227, 228, 229, 240, 243, 244, 247, 248, 275, 280, 282], "sphinx_math_dollar": 7, "delimit": [7, 60, 209], "dollar": [7, 280], "2": [7, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 99, 100, 102, 103, 106, 108, 110, 111, 112, 113, 114, 115, 116, 118, 119, 121, 123, 126, 127, 128, 129, 131, 132, 133, 135, 136, 137, 139, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 157, 158, 159, 160, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 183, 184, 185, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 234, 235, 236, 238, 240, 241, 242, 243, 244, 247, 248, 250, 254, 256, 257, 258, 259, 260, 261, 263, 264, 275, 276, 278, 280, 281, 282, 285, 286, 287], "sphinxext": 7, "plot_direct": 7, "figur": [7, 60, 61, 70, 71, 73, 75, 76, 87, 104, 124, 169, 192, 193, 194, 195, 206, 209, 264, 286], "devel": [7, 194], "supersed": [7, 124, 141], "pep": [7, 42, 60, 90], "257": [7, 100, 227], "our": [7, 9, 10, 16, 20, 32, 42, 60, 68, 85, 96, 100, 127, 179, 192, 193, 195, 196, 198, 204, 205, 206, 209, 216, 219, 222, 225, 228, 240, 275, 278, 279, 281, 286], "introduct": [7, 10, 17, 51, 52, 65, 68, 200, 202, 203, 205, 209, 222, 225, 228, 262, 269, 279, 285], "four": [7, 26, 42, 52, 60, 64, 68, 90, 93, 100, 106, 111, 125, 134, 139, 147, 184, 195, 196, 202, 205, 209, 217, 222, 225, 227, 229, 230, 254, 256, 259, 271], "locat": [7, 10, 52, 60, 74, 96, 100, 103, 104, 106, 118, 128, 135, 138, 142, 188, 190, 204, 205, 209, 221, 229, 243, 252, 254, 258, 260, 263], "websit": [7, 284], "advertis": 7, "serv": [7, 11, 16, 20, 36, 37, 42, 57, 60, 67, 83, 204, 225, 226, 250, 279], "initi": [7, 11, 18, 27, 36, 51, 55, 60, 61, 62, 65, 68, 76, 78, 79, 82, 83, 84, 85, 88, 100, 102, 104, 106, 108, 110, 115, 119, 121, 123, 124, 126, 128, 133, 136, 137, 138, 141, 142, 146, 154, 163, 185, 186, 189, 193, 194, 202, 204, 205, 209, 215, 219, 221, 225, 227, 228, 234, 242, 249, 250, 254, 256, 257, 258, 259], "obtain": [7, 11, 12, 14, 16, 24, 25, 30, 36, 37, 41, 43, 44, 51, 52, 53, 56, 60, 61, 63, 64, 65, 66, 68, 70, 71, 73, 74, 76, 82, 85, 87, 89, 91, 96, 99, 100, 107, 110, 134, 137, 139, 147, 169, 174, 179, 196, 197, 200, 202, 204, 205, 208, 210, 217, 218, 219, 221, 222, 225, 226, 227, 228, 247, 250, 258, 259], "technic": [7, 10, 13, 20, 31, 41, 60, 141, 160, 196, 225, 242, 247, 261, 278, 281], "place": [7, 8, 10, 11, 12, 18, 20, 25, 31, 41, 52, 53, 60, 61, 66, 76, 92, 96, 99, 100, 102, 110, 141, 142, 203, 204, 209, 210, 216, 218, 221, 225, 244, 247, 274, 275, 282, 286], "site": [7, 100, 243], "upload": [7, 100], "belong": [7, 18, 38, 41, 51, 56, 60, 83, 96, 174, 184, 192, 195, 196, 198, 199, 202, 204, 205, 216, 217, 221, 222, 228, 235], "insid": [7, 10, 11, 12, 20, 51, 52, 57, 60, 70, 71, 76, 103, 114, 116, 128, 138, 173, 174, 179, 189, 193, 205, 209, 217, 219, 222, 227, 228, 229, 231, 233, 244, 281, 282], "spars": [7, 11, 93, 95, 96, 168, 198, 204, 205, 206, 229, 230, 269, 281], "substanti": [7, 101], "edit": [7, 87, 96, 100, 202, 203, 205], "arg": [7, 11, 18, 20, 23, 25, 34, 36, 37, 38, 39, 40, 41, 42, 44, 51, 52, 54, 57, 59, 60, 61, 62, 64, 65, 66, 67, 68, 70, 71, 73, 75, 76, 77, 82, 85, 87, 90, 91, 92, 93, 94, 96, 98, 100, 102, 110, 143, 149, 152, 154, 157, 158, 159, 160, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 184, 189, 193, 195, 198, 200, 202, 204, 205, 206, 209, 211, 212, 215, 216, 217, 218, 221, 225, 227, 228, 229, 230, 234, 235, 240, 241, 242, 243, 247, 248, 250, 254, 256], "invari": [7, 10, 20, 51, 56, 107, 110, 194, 200, 204, 205, 219, 225], "polici": [7, 8, 10, 243, 245], "5": [7, 12, 14, 18, 20, 23, 25, 27, 28, 30, 34, 36, 37, 38, 40, 42, 43, 44, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 70, 71, 72, 73, 74, 75, 76, 77, 82, 83, 85, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 99, 100, 102, 103, 106, 108, 110, 112, 113, 115, 121, 124, 126, 127, 131, 132, 133, 134, 136, 143, 147, 168, 169, 172, 174, 181, 183, 185, 188, 190, 193, 194, 195, 196, 197, 198, 199, 200, 202, 204, 205, 206, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 221, 222, 224, 225, 226, 227, 228, 229, 230, 234, 235, 240, 241, 247, 248, 254, 257, 259, 261, 263, 264, 275, 276, 278, 281, 282, 285, 286], "center": [7, 10, 16, 40, 51, 59, 60, 70, 74, 76, 77, 87, 96, 115, 118, 121, 124, 126, 131, 133, 135, 139, 141, 147, 192, 195, 204, 209, 217, 264], "resid": 7, "standalon": [7, 141], "restructur": 7, "appli": [7, 10, 11, 19, 20, 26, 30, 34, 35, 36, 37, 38, 42, 51, 52, 53, 58, 59, 60, 61, 62, 63, 66, 67, 70, 75, 76, 78, 87, 90, 91, 92, 96, 100, 102, 103, 104, 106, 110, 111, 115, 116, 126, 129, 136, 138, 140, 151, 155, 158, 159, 163, 166, 167, 171, 174, 184, 193, 195, 197, 199, 200, 202, 204, 205, 206, 208, 209, 210, 211, 215, 216, 217, 218, 221, 225, 226, 227, 228, 229, 230, 233, 240, 243, 247, 254, 256, 259, 282, 285, 286], "surround": [7, 60, 77, 147, 217, 250], "nu": [7, 12, 68, 87, 100, 175, 197, 209, 221, 229, 235, 280], "equat": [7, 11, 12, 14, 16, 21, 23, 40, 42, 56, 59, 60, 62, 66, 68, 70, 73, 74, 78, 82, 83, 84, 85, 88, 91, 96, 103, 106, 110, 112, 114, 118, 119, 120, 123, 124, 126, 127, 128, 129, 131, 133, 134, 135, 140, 141, 142, 143, 147, 183, 188, 189, 192, 193, 194, 195, 196, 202, 203, 204, 207, 208, 209, 215, 219, 221, 224, 225, 226, 234, 254, 259, 260, 264, 276, 277, 280], "strip": [7, 61, 87, 100, 202, 245, 250], "out": [7, 12, 18, 19, 20, 24, 41, 42, 51, 52, 60, 61, 62, 65, 68, 76, 85, 87, 93, 96, 100, 103, 110, 111, 124, 126, 128, 131, 141, 151, 155, 166, 169, 171, 173, 174, 196, 197, 199, 200, 204, 205, 206, 207, 209, 210, 216, 219, 221, 225, 230, 240, 242, 247, 248, 278, 280, 281, 285, 286], "unimport": 7, "bullet": 7, "avoid": [7, 8, 10, 11, 19, 20, 24, 28, 42, 43, 60, 61, 66, 85, 87, 90, 96, 99, 102, 128, 138, 168, 192, 193, 197, 199, 205, 209, 210, 217, 221, 225, 227, 229, 233, 242, 245, 248, 278, 279], "whitespac": [7, 60, 245], "invalid": [7, 12, 30, 60, 61, 102, 126, 199, 202, 217], "dx": [7, 10, 11, 16, 20, 24, 40, 42, 56, 60, 62, 64, 68, 77, 79, 82, 83, 84, 85, 87, 96, 103, 113, 119, 120, 163, 193, 205, 206, 212, 222, 225, 226, 230, 276, 280, 285, 287], "meta": [7, 60, 225, 226], "stackexchang": [7, 70], "5020": 7, "wikibook": [7, 87, 88], "overleaf": 7, "mathematical_express": 7, "verbatim": [7, 209], "_rewrit": 7, "_expand": 7, "difficult": [7, 18, 30, 60, 96, 124, 206, 219, 225, 226, 228, 241, 264, 280, 286], "sentenc": [7, 90], "thumb": [7, 90, 247], "greek": [7, 11, 33, 60, 100, 102, 196, 209], "letter": [7, 11, 12, 33, 53, 60, 61, 100, 174, 209, 247, 276, 278], "\u03b1": [7, 194, 208], "alpha": [7, 12, 51, 60, 68, 87, 89, 146, 150, 153, 171, 188, 192, 193, 194, 200, 202, 204, 205, 208, 209, 221, 225, 229], "logarithm": [7, 12, 34, 40, 42, 60, 61, 66, 85, 87, 96, 100, 200, 202, 206, 209, 219, 221, 228, 229, 277], "italic": 7, "emphasi": [7, 199], "asterisk": 7, "stirl": [7, 52, 65, 247], "fals": [7, 11, 12, 18, 19, 20, 23, 28, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42, 46, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 70, 71, 72, 73, 74, 75, 76, 77, 79, 82, 85, 87, 88, 90, 91, 92, 93, 96, 97, 100, 102, 103, 104, 108, 110, 112, 113, 116, 119, 120, 121, 124, 126, 127, 131, 132, 133, 135, 136, 137, 138, 139, 142, 146, 158, 159, 163, 166, 171, 172, 173, 174, 177, 181, 184, 185, 186, 188, 189, 192, 193, 195, 196, 197, 198, 199, 200, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 216, 217, 218, 221, 222, 224, 225, 226, 227, 228, 229, 234, 235, 238, 240, 241, 242, 243, 247, 248, 250, 254, 257, 278, 281, 282, 285], "permut": [7, 43, 45, 47, 48, 50, 53, 56, 57, 58, 61, 65, 68, 91, 93, 96, 120, 174, 194, 198, 200, 205, 222, 230, 231, 235, 247, 266, 286], "cycl": [7, 10, 42, 48, 51, 52, 58, 60, 63, 65, 91, 100, 148, 217, 247], "partit": [7, 47, 51, 65, 100, 128, 138, 140, 222, 229, 244, 266], "reduc": [7, 12, 19, 22, 29, 35, 37, 39, 43, 56, 60, 61, 63, 65, 66, 68, 75, 76, 85, 87, 96, 100, 110, 111, 138, 156, 174, 196, 198, 199, 200, 202, 203, 204, 205, 206, 210, 215, 217, 218, 219, 221, 222, 224, 225, 226, 227, 228, 229, 247, 282], "ge": [7, 18, 60, 65, 66, 68, 85, 91, 96, 100, 194, 197, 202, 205, 219, 247], "consecut": [7, 42, 51, 56, 59, 61, 65, 76, 221, 227], "group": [7, 41, 46, 47, 52, 53, 56, 57, 58, 60, 63, 65, 89, 90, 100, 153, 162, 163, 174, 194, 195, 196, 204, 205, 221, 225, 227, 228, 235, 247, 266], "pairwis": [7, 38, 41, 60, 65, 77, 96, 100, 222, 227], "ital": [7, 209], "last": [7, 8, 10, 12, 14, 15, 16, 18, 19, 20, 23, 25, 26, 27, 28, 29, 30, 35, 36, 37, 41, 42, 43, 50, 51, 52, 56, 59, 60, 61, 64, 70, 87, 90, 91, 92, 93, 94, 96, 98, 99, 100, 102, 110, 123, 146, 179, 194, 195, 196, 197, 199, 200, 202, 205, 208, 209, 216, 217, 222, 225, 227, 228, 229, 230, 235, 238, 240, 241, 242, 243, 245, 247, 248, 250, 276, 278, 281, 282], "talk": [7, 13, 31, 61, 196, 204, 258], "handl": [7, 16, 18, 19, 20, 40, 48, 52, 60, 66, 87, 88, 90, 95, 100, 101, 102, 103, 111, 114, 124, 138, 154, 157, 163, 164, 169, 199, 205, 206, 215, 221, 225, 227, 230, 233, 241, 247, 248, 250, 281, 286], "referenc": [7, 8, 44, 49, 100, 123, 126, 171, 204], "overlin": [7, 18, 68], "normal": [7, 10, 12, 18, 19, 20, 30, 34, 38, 42, 51, 59, 60, 64, 66, 70, 73, 74, 75, 87, 88, 90, 94, 95, 96, 100, 102, 112, 114, 118, 124, 126, 132, 141, 147, 158, 168, 171, 172, 173, 174, 175, 179, 182, 184, 193, 196, 198, 199, 200, 202, 204, 205, 209, 210, 212, 217, 218, 222, 225, 229, 234, 240, 245, 247, 254, 269], "assign": [7, 18, 41, 42, 43, 56, 60, 65, 76, 87, 89, 90, 96, 102, 119, 124, 131, 141, 179, 190, 193, 195, 197, 202, 209, 227, 228, 235, 242, 258, 261, 278], "structur": [7, 10, 11, 15, 18, 20, 39, 41, 42, 48, 51, 52, 58, 60, 85, 87, 90, 91, 96, 103, 104, 106, 123, 172, 174, 195, 196, 199, 202, 204, 205, 206, 221, 225, 227, 228, 229, 233, 234, 242, 244, 247, 248, 278, 286], "suggest": [7, 10, 22, 26, 43, 51, 87, 96, 100, 124, 207, 282], "american": [7, 46, 61], "color": [7, 88, 108, 189, 209, 240, 247, 285], "colour": 7, "quotat": 7, "line_color": [7, 195, 212], "aesthet": [7, 11, 195], "ariti": [7, 195], "term": [7, 10, 11, 12, 16, 18, 20, 24, 26, 28, 30, 42, 51, 60, 61, 62, 64, 65, 66, 68, 79, 83, 84, 85, 87, 90, 91, 96, 100, 104, 108, 110, 116, 119, 126, 128, 131, 134, 136, 138, 139, 153, 158, 170, 171, 174, 176, 179, 184, 186, 190, 192, 194, 196, 197, 198, 199, 200, 202, 204, 205, 206, 209, 211, 212, 214, 215, 217, 218, 219, 221, 222, 225, 226, 227, 228, 229, 233, 234, 247, 254, 257, 261, 266, 276, 278, 280, 281, 286], "unrestrict": [7, 49, 247], "necklac": [7, 247], "bracelet": [7, 247], "impli": [7, 11, 12, 18, 34, 38, 42, 51, 90, 106, 174, 195, 200, 202, 209, 217, 219, 225, 227, 230, 233, 234, 247, 261], "turn": [7, 10, 11, 18, 30, 42, 60, 66, 68, 75, 85, 94, 118, 132, 136, 190, 196, 204, 206, 209, 216, 217, 219, 221, 222, 225, 240, 247, 263, 278, 280], "sequenc": [7, 12, 40, 42, 44, 47, 50, 51, 52, 56, 58, 59, 60, 61, 63, 65, 68, 70, 73, 74, 75, 76, 77, 84, 90, 91, 93, 96, 99, 100, 141, 147, 173, 174, 200, 203, 209, 211, 213, 216, 218, 219, 221, 222, 225, 226, 228, 235, 238, 241, 242, 247, 249, 250, 266], "revers": [7, 44, 49, 52, 59, 60, 61, 66, 87, 88, 90, 96, 100, 110, 173, 184, 189, 196, 198, 202, 205, 206, 209, 210, 217, 221, 225, 247, 286], "ambigu": [7, 10, 12, 14, 60, 162, 168, 221, 233, 238], "person": [7, 11], "chebyshev": [7, 40, 60, 87, 202, 205], "pafnuti": 7, "lvovich": 7, "tchebychev": 7, "whose": [7, 10, 11, 18, 20, 28, 41, 43, 44, 49, 52, 59, 60, 61, 66, 70, 74, 76, 77, 83, 87, 90, 96, 100, 121, 136, 146, 169, 179, 185, 186, 190, 193, 197, 198, 200, 204, 205, 216, 217, 221, 225, 226, 227, 229, 235, 240, 244, 247, 248, 254, 257, 259, 261], "transliter": 7, "russian": 7, "chebyshevt": [7, 68, 209], "orthogonalpolynomi": 7, "t_n": [7, 65, 68, 87, 202, 205, 259], "tens": 7, "inclus": [7, 59, 106, 167, 196, 215, 216, 217, 228], "pronoun": 7, "gender": 7, "neutral": 7, "he": [7, 65, 85, 202], "she": [7, 228], "extran": [7, 225], "belittl": 7, "obvious": [7, 43, 51, 177, 192, 199, 219], "easili": [7, 10, 18, 20, 32, 60, 61, 83, 85, 96, 100, 101, 118, 136, 172, 192, 205, 208, 209, 214, 221, 222, 225, 227, 228, 241, 280], "straightforward": [7, 20, 51, 61, 96, 219], "unwelcom": 7, "judgement": 7, "phrase": [7, 11, 61], "friendli": [7, 42, 85, 222, 224, 227, 228, 242, 287], "mistak": [7, 12, 24, 51, 248], "goe": [8, 20, 31, 96, 216, 219, 228, 278, 281], "content": [8, 13, 42, 60, 61, 95, 197, 200, 202, 205, 208, 209, 237, 242, 245, 246, 266, 267, 268, 269, 270, 271, 272, 273, 277, 279], "setup": [8, 10, 42, 60, 127, 128, 129, 143, 184, 202, 205, 207, 208, 219, 240, 241, 243, 253, 285], "depend": [8, 10, 11, 12, 14, 18, 20, 26, 27, 28, 32, 40, 42, 43, 51, 52, 59, 60, 61, 62, 65, 66, 68, 72, 77, 84, 85, 87, 88, 89, 96, 100, 101, 102, 108, 112, 115, 119, 120, 123, 124, 126, 128, 134, 136, 146, 147, 148, 163, 172, 174, 176, 179, 189, 190, 195, 197, 200, 202, 204, 205, 206, 208, 209, 210, 215, 219, 221, 222, 225, 226, 227, 228, 229, 240, 241, 242, 243, 247, 248, 261, 263, 264, 278, 280], "document": [8, 10, 11, 17, 20, 36, 37, 38, 51, 56, 60, 61, 66, 67, 68, 72, 82, 85, 86, 88, 93, 96, 101, 104, 114, 119, 134, 136, 137, 139, 141, 149, 163, 169, 183, 189, 190, 191, 192, 193, 194, 195, 196, 199, 200, 202, 205, 209, 219, 223, 225, 227, 228, 238, 240, 242, 243, 245, 247, 254, 261, 262, 265, 276, 278, 279, 285, 286], "auto": [8, 10, 12, 24, 40, 60, 61, 88, 195, 202, 205, 209, 221, 225, 229], "rebuild": [8, 11, 20, 60, 205, 281], "live": [8, 33, 43, 141, 204, 222], "server": 8, "debug": [8, 42, 60, 87, 126, 163, 240, 241, 250], "incompat": [8, 23], "pick": [9, 18, 61, 65, 138, 168, 170, 286], "ignor": [10, 12, 14, 20, 42, 51, 60, 61, 65, 66, 70, 75, 85, 90, 96, 100, 110, 116, 126, 171, 174, 184, 195, 205, 209, 210, 221, 227, 228, 241, 286], "regex": 10, "categori": [10, 196, 265, 272], "lead": [10, 11, 18, 19, 20, 28, 30, 59, 60, 66, 70, 87, 90, 96, 100, 112, 120, 158, 184, 193, 197, 200, 202, 204, 205, 206, 209, 216, 218, 221, 225, 228, 242, 245, 250, 279, 286], "against": [10, 18, 20, 30, 61, 103, 124, 241], "unrel": [10, 26, 60, 67, 197, 278], "capabl": [10, 11, 18, 27, 40, 42, 60, 64, 72, 85, 100, 103, 104, 134, 141, 195, 206, 209, 228, 279, 280, 286, 287], "w": [10, 12, 30, 42, 44, 50, 59, 60, 61, 62, 63, 66, 68, 85, 87, 90, 96, 97, 118, 121, 132, 139, 140, 143, 148, 159, 163, 172, 188, 190, 191, 194, 195, 197, 198, 202, 203, 204, 205, 206, 210, 216, 217, 219, 221, 222, 225, 226, 228, 229, 240, 248, 250, 261, 287], "pythonwarn": 10, "NOT": [10, 90, 110, 154, 158, 173, 176, 238, 241], "blog": [10, 20, 42, 65, 91, 222, 228], "post": [10, 18, 23, 24, 25, 26, 27, 28, 29, 42, 54, 60, 209, 210, 221, 240, 281], "ned": 10, "batcheld": 10, "kanesmethod": [10, 118, 119, 124, 126, 127, 128, 129, 131, 132, 135, 136, 138, 141], "pinjoint": [10, 118, 127, 129, 135], "prismaticjoint": [10, 118, 129, 135], "q_": [10, 60, 118, 189, 222, 225], "u_": [10, 96, 118], "had": [10, 20, 25, 26, 52, 60, 61, 96, 100, 124, 138, 204, 205, 206, 209, 217, 219, 225, 227, 228, 243, 248, 275, 278, 281, 282], "templat": [10, 247], "axi": [10, 34, 53, 65, 66, 70, 71, 73, 74, 76, 82, 85, 87, 93, 96, 103, 108, 113, 118, 124, 126, 128, 131, 132, 133, 135, 138, 141, 142, 143, 146, 147, 171, 184, 186, 188, 190, 192, 193, 195, 200, 228, 254, 256, 259, 261, 264], "parent_axi": [10, 118], "child_axi": [10, 118], "parent": [10, 51, 60, 83, 118, 135, 184, 188, 195, 199, 200, 204, 240, 244, 254, 258, 259], "child": [10, 11, 118, 135, 184, 199, 244], "bodi": [10, 12, 42, 85, 102, 113, 114, 117, 118, 119, 121, 123, 124, 126, 127, 128, 129, 131, 134, 135, 136, 141, 142, 177, 183, 184, 188, 192, 193, 254, 256, 271], "parent_interfram": [10, 118, 135], "child_interfram": [10, 118, 135], "rotat": [10, 34, 48, 51, 53, 60, 69, 70, 71, 73, 75, 76, 91, 96, 103, 104, 118, 126, 129, 131, 133, 135, 139, 142, 158, 171, 184, 188, 190, 192, 193, 194, 195, 247, 254, 256, 259, 261, 263], "joint_axi": [10, 118, 127, 129, 135], "transform": [10, 11, 30, 34, 39, 42, 56, 59, 60, 61, 62, 64, 65, 68, 75, 93, 96, 108, 110, 118, 126, 135, 146, 167, 169, 171, 176, 194, 197, 200, 202, 204, 205, 211, 216, 217, 218, 221, 222, 225, 226, 227, 228, 229, 234, 242, 248, 254, 261, 280], "suppos": [10, 19, 20, 52, 59, 60, 61, 85, 196, 198, 202, 204, 205, 209, 216, 219, 225, 227, 238, 247, 259, 264, 278, 280, 286], "pin": [10, 34, 103, 104, 106, 118], "dcm": [10, 115, 118, 124, 126, 141, 184, 192, 193, 254], "q_pin": 10, "inspect": [10, 18, 96, 204, 215, 246, 248, 273], "notic": [10, 12, 20, 51, 52, 58, 60, 96, 162, 183, 199, 219, 235, 236, 247, 248, 278, 280, 281, 286], "theta_pin": 10, "rad": [10, 61, 108, 124, 204], "int_fram": 10, "orient_axi": [10, 115, 118, 184, 186], "align": [10, 42, 70, 96, 118, 193, 194, 209, 227, 240], "orient": [10, 34, 72, 76, 91, 118, 124, 126, 128, 131, 135, 139, 141, 184, 188, 190, 192, 193, 202, 247, 254, 255, 262, 263, 269], "parent_joint_po": [10, 118], "child_joint_po": [10, 118], "parent_point": [10, 118, 127, 129, 135], "child_point": [10, 118, 127, 129, 135], "mass": [10, 77, 112, 113, 114, 115, 117, 118, 119, 123, 124, 126, 127, 128, 129, 131, 133, 134, 135, 136, 137, 141, 142, 150, 175, 177, 178, 179, 190, 192, 240, 263, 271], "pos_from": [10, 118, 124, 126, 127, 128, 135, 141, 188, 192], "masscent": [10, 115, 118, 121, 127, 135, 139, 141], "parent_fram": [10, 135], "child_fram": [10, 135], "locatenew": [10, 115, 121, 126, 128, 131, 132, 133, 138, 139, 141, 142, 185, 188, 190, 192], "pars": [10, 52, 60, 93, 124, 135, 206, 208, 265, 273], "comprehens": [10, 18, 25, 26, 203, 217, 229, 275], "additional_transl": 10, "recogn": [10, 12, 26, 28, 60, 61, 65, 75, 100, 103, 111, 197, 200, 208, 217, 218, 227, 234, 278], "logic": [10, 11, 18, 20, 35, 36, 37, 38, 41, 60, 62, 85, 87, 100, 166, 168, 169, 173, 209, 211, 217, 225, 229, 247, 278, 279, 280, 282], "node": [10, 11, 40, 54, 60, 87, 102, 106, 116, 150, 175, 184, 194, 199, 209, 216, 228, 233, 244, 281, 285], "maximum": [10, 12, 25, 26, 40, 42, 43, 51, 52, 60, 66, 87, 96, 100, 103, 126, 171, 179, 195, 200, 202, 205, 209, 216, 217, 221, 222, 225, 228, 229, 244, 247], "multipli": [10, 12, 26, 34, 38, 42, 51, 60, 71, 75, 82, 89, 91, 96, 100, 119, 128, 137, 138, 139, 151, 160, 174, 179, 180, 196, 197, 198, 200, 202, 204, 205, 209, 211, 218, 219, 222, 225, 230, 247, 258, 278, 281], "max": [10, 42, 51, 52, 60, 66, 68, 70, 87, 96, 100, 102, 103, 194, 195, 204, 205, 209, 216, 218, 219, 248], "min": [10, 52, 56, 60, 65, 66, 96, 102, 194, 195, 204, 209, 215, 225], "is_perfect_squar": 10, "ntheori": [10, 38, 51, 60, 61, 202, 205, 222, 247], "primetest": [10, 60, 100], "is_squar": [10, 60, 91, 100], "is_prim": [10, 18, 60, 196], "isprim": [10, 38, 61, 100], "divid": [10, 11, 51, 59, 60, 61, 76, 96, 100, 178, 179, 197, 199, 200, 202, 204, 205, 209, 225, 244, 281], "bottom_up": [10, 60], "interactive_travers": 10, "postorder_travers": [10, 60, 281], "preorder_travers": [10, 60, 281], "refactor": [10, 225, 233, 244], "tr": [10, 43, 51, 209, 218], "quantum": [10, 112, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 194, 271], "ever": [10, 11, 20, 66, 193, 196, 205, 219, 225, 242, 245, 281], "helper": [10, 24, 40, 42, 51, 55, 58, 60, 85, 88, 89, 159, 161, 170, 206, 216, 219, 222, 225, 226, 228, 241, 271], "default_sort_kei": [10, 41, 49, 60, 233], "matrixel": [10, 42], "matrixsymbol": [10, 15, 18, 26, 38, 39, 42, 60, 91, 93, 96, 209, 229, 231], "layer": [10, 110, 202, 248], "imprecis": 10, "free_symbol": [10, 11, 24, 42, 60, 69, 87, 91, 163, 181, 184, 205, 215, 222], "sinc": [10, 11, 12, 14, 15, 16, 18, 19, 20, 35, 40, 42, 43, 51, 52, 53, 56, 57, 58, 60, 61, 63, 65, 66, 68, 69, 70, 72, 73, 76, 78, 84, 85, 87, 89, 90, 91, 96, 100, 113, 118, 126, 139, 141, 150, 174, 175, 179, 183, 190, 193, 196, 197, 199, 200, 202, 204, 205, 209, 212, 217, 218, 219, 221, 222, 225, 227, 228, 229, 235, 239, 243, 244, 245, 247, 248, 252, 258, 260, 261, 263, 275, 280, 282, 285, 286, 287], "atomicexpr": [10, 60], "concept": [10, 11, 18, 51, 126, 193, 199, 201, 204, 209, 228, 233, 263, 279, 284], "misappli": 10, "noth": [10, 28, 41, 51, 60, 73, 87, 158, 174, 196, 200, 208, 209, 221, 225, 227, 238, 240, 248, 250, 278], "introduc": [10, 19, 24, 56, 59, 60, 68, 85, 96, 101, 104, 124, 126, 131, 132, 133, 137, 174, 179, 193, 200, 201, 205, 206, 209, 216, 219, 222, 229, 245, 272, 279, 282, 284, 286], "21494": 10, "size": [10, 16, 26, 42, 43, 44, 49, 51, 52, 53, 54, 55, 56, 60, 61, 63, 65, 88, 91, 93, 96, 99, 100, 108, 126, 136, 137, 138, 147, 169, 170, 189, 195, 198, 202, 209, 221, 222, 225, 229, 247, 276], "die": [10, 204, 229], "histor": [10, 11, 14, 20, 61, 225, 229], "21563": 10, "revert": [10, 200, 205], "sample_it": [10, 229], "consequ": [10, 20, 38, 60, 197, 199, 278, 286], "subclass": [10, 11, 18, 20, 36, 37, 42, 60, 67, 71, 73, 87, 90, 143, 149, 158, 162, 163, 164, 169, 171, 172, 195, 196, 198, 199, 200, 204, 205, 209, 229, 240, 241, 242, 245, 248, 254, 258, 281], "kei": [10, 11, 12, 14, 23, 28, 35, 38, 41, 49, 51, 52, 60, 61, 62, 65, 76, 89, 91, 96, 99, 100, 103, 123, 124, 166, 169, 174, 193, 195, 197, 199, 200, 201, 202, 204, 205, 206, 207, 209, 221, 225, 226, 227, 229, 233, 244, 247, 248, 250, 282, 283, 286], "domainmatrix": [10, 26, 92, 96, 201, 204, 207, 272], "switch": [10, 51, 58, 87, 100, 110, 202, 205], "21402": 10, "earlier": [10, 114, 206, 210, 219, 221, 248, 259, 261, 281], "could": [10, 11, 12, 16, 18, 20, 25, 27, 29, 37, 42, 53, 60, 72, 85, 87, 90, 118, 121, 124, 134, 138, 174, 177, 179, 196, 199, 202, 204, 206, 209, 217, 219, 221, 225, 226, 227, 228, 229, 230, 233, 234, 241, 245, 259, 260, 278, 281, 286], "traceback": [10, 12, 15, 18, 19, 20, 23, 25, 26, 27, 28, 29, 30, 35, 36, 37, 42, 43, 52, 60, 61, 64, 70, 87, 90, 91, 92, 93, 94, 96, 98, 99, 102, 110, 194, 196, 199, 200, 202, 205, 208, 216, 217, 225, 227, 228, 238, 240, 241, 243, 245, 247, 248, 250, 278, 282], "typeerror": [10, 12, 19, 20, 25, 35, 36, 37, 52, 60, 70, 75, 90, 92, 94, 98, 110, 148, 216, 217, 241, 248], "unsupport": [10, 12, 15, 110, 209], "operand": [10, 12, 52, 60, 185, 204, 257], "dict": [10, 12, 14, 18, 24, 25, 28, 29, 30, 42, 52, 60, 61, 62, 76, 77, 90, 91, 96, 100, 102, 119, 120, 154, 166, 169, 180, 182, 184, 195, 198, 199, 200, 202, 204, 205, 206, 207, 209, 221, 222, 225, 226, 227, 228, 229, 233, 240, 241, 247, 254, 287], "solve_lin_si": [10, 207], "heurisch": [10, 87], "smith_normal_form": [10, 97, 198], "newmatrix": 10, "holonom": [10, 81, 84, 125, 126, 127, 128, 134, 136, 137, 265, 271, 272], "polymatrix": 10, "risch": [10, 87, 276], "broken": [10, 49, 60, 192, 209, 225, 250], "20780": 10, "20759": 10, "20621": 10, "19882": 10, "18844": 10, "21441": 10, "21427": 10, "21496": 10, "potenti": [10, 18, 72, 93, 96, 100, 119, 120, 121, 123, 133, 134, 185, 191, 199, 204, 209, 216, 219, 221, 225, 243, 244, 257, 263, 271], "impact": 10, "downstream": [10, 18], "goal": [10, 11, 41, 114, 142, 204, 206, 240, 241, 243, 279, 280], "perhap": [10, 14, 42, 60, 90, 100, 159, 199, 227, 242, 275], "tableform": [10, 227, 250], "isn": [10, 20, 87, 114, 124, 228, 280], "advis": [10, 18, 30, 41, 118, 124], "usecas": 10, "unclear": [10, 18, 114], "line2dbaseseri": [10, 195], "linecollect": [10, 195], "bokeh": 10, "plotli": 10, "mayavi": 10, "k3d": 10, "matplotlibbackend": [10, 195], "get_point": [10, 195], "uniformli": [10, 16, 51, 76, 77, 103, 108, 195, 243], "adapt": [10, 108, 195, 215, 227, 247, 253], "get_data": [10, 195, 251], "dft": [10, 63, 113], "fourier": [10, 60, 68, 87, 113, 167, 213, 266], "as_explicit": [10, 26, 93, 96, 113, 231], "exp": [10, 11, 12, 14, 18, 20, 27, 30, 34, 40, 42, 50, 59, 60, 62, 64, 65, 66, 68, 78, 79, 82, 85, 87, 91, 93, 96, 100, 112, 150, 153, 169, 175, 194, 199, 200, 205, 206, 209, 211, 216, 219, 221, 225, 226, 227, 228, 229, 230, 247, 264, 276, 280, 282, 287], "discret": [10, 40, 42, 43, 50, 52, 60, 61, 68, 100, 174, 179, 211, 214, 225, 227, 228, 266, 275], "unevalu": [10, 11, 18, 19, 20, 36, 37, 40, 52, 59, 60, 66, 68, 77, 87, 100, 110, 151, 155, 162, 163, 174, 205, 208, 216, 217, 221, 225, 227, 228, 229, 276, 280, 281, 287], "represent": [10, 11, 20, 25, 28, 34, 41, 42, 43, 51, 54, 60, 61, 66, 68, 72, 80, 82, 84, 85, 87, 89, 90, 91, 92, 93, 99, 100, 107, 108, 113, 114, 115, 123, 134, 138, 139, 143, 158, 163, 168, 169, 171, 172, 174, 176, 183, 189, 190, 192, 195, 196, 198, 200, 202, 204, 205, 206, 207, 208, 209, 211, 219, 221, 222, 225, 228, 229, 234, 235, 250, 254, 257, 264, 272, 276, 278, 281], "21626": 10, "expos": [10, 41, 229], "mutat": [10, 110, 198, 200, 229], "flat": [10, 74, 91, 241], "todok": [10, 91], "ey": [10, 26, 91, 92, 93, 94, 95, 96, 98, 198, 204, 230, 250, 282], "converg": [10, 42, 59, 64, 68, 87, 100, 143, 205, 212, 216, 219, 276], "legacy_matrix": [10, 87], "discontinu": [10, 40, 64, 66, 87, 103, 212, 227], "theano_cod": 10, "aesara_cod": [10, 209], "theanoprint": 10, "aesaraprint": [10, 209], "predic": [10, 11, 35, 36, 40, 102, 205, 221, 247, 266], "experienc": [10, 43], "big": [10, 12, 16, 18, 44, 60, 62, 100, 141, 154, 194, 208, 209, 216, 250, 276, 278], "registr": 10, "add_handl": 10, "remove_handl": [10, 35], "multipledispatch": [10, 35], "regist": [10, 35, 36, 37, 61, 170], "register_mani": [10, 36, 37], "askprimehandl": 10, "staticmethod": [10, 240], "register_handl": [10, 35], "prime": [10, 18, 35, 36, 37, 38, 51, 58, 59, 60, 61, 63, 65, 68, 100, 145, 196, 197, 199, 200, 202, 205, 219, 221, 222, 229, 244], "Not": [10, 11, 19, 20, 26, 60, 65, 90, 110, 209, 228, 229, 247, 280, 287], "primepred": [10, 38], "q": [10, 11, 12, 15, 18, 22, 24, 33, 34, 35, 36, 37, 38, 39, 42, 52, 56, 59, 60, 61, 68, 77, 82, 83, 85, 87, 89, 91, 96, 102, 103, 110, 111, 118, 119, 120, 123, 124, 126, 128, 133, 135, 136, 137, 138, 141, 142, 143, 154, 168, 174, 177, 184, 185, 186, 188, 189, 190, 192, 195, 196, 197, 199, 200, 202, 204, 205, 206, 208, 209, 211, 219, 222, 225, 227, 229, 234, 235, 250, 254, 257, 258, 260, 263, 282, 286], "20209": 10, "stochast": 10, "timestamp": 10, "wienerprocess": [10, 229], "normaldistribut": [10, 229], "20078": 10, "misspel": 10, "absorbing_prob": [10, 229], "absorb": [10, 11, 85, 225, 229, 276], "probabilit": 10, "shutil": 10, "power": [10, 12, 23, 34, 39, 42, 50, 51, 52, 61, 63, 64, 66, 82, 83, 85, 87, 89, 91, 93, 100, 101, 110, 124, 141, 146, 157, 160, 173, 176, 179, 180, 184, 196, 197, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 213, 216, 218, 221, 222, 225, 227, 228, 229, 233, 242, 247, 266, 275, 276, 277, 278, 279, 281, 282, 285], "immut": [10, 11, 60, 92, 95, 98, 193, 200, 225, 230, 269, 275, 282], "coordsystem": [10, 62], "explicit": [10, 11, 18, 20, 24, 25, 28, 52, 59, 60, 64, 76, 77, 87, 99, 100, 119, 123, 124, 128, 138, 142, 193, 196, 205, 208, 209, 211, 217, 219, 225, 226, 227, 228, 244], "patch": [10, 62, 209], "real": [10, 11, 12, 15, 16, 18, 19, 20, 24, 25, 28, 34, 36, 38, 39, 40, 42, 52, 60, 61, 62, 64, 65, 66, 67, 68, 72, 76, 77, 82, 85, 87, 90, 91, 93, 96, 100, 102, 106, 112, 124, 141, 143, 146, 147, 154, 172, 186, 194, 197, 200, 204, 205, 206, 209, 210, 212, 216, 217, 219, 221, 224, 225, 227, 228, 229, 234, 238, 242, 251, 280, 286, 287], "manifold": [10, 62], "track": [10, 12, 51, 60, 64, 68, 123, 135, 139, 158, 193, 216, 235, 276], "coord_system": 10, "connect_to": 10, "coord_tuple_transform_to": [10, 62], "constructor": [10, 11, 20, 36, 37, 41, 42, 47, 51, 52, 53, 60, 67, 68, 89, 94, 96, 128, 167, 168, 172, 176, 195, 196, 198, 199, 200, 209, 217, 225, 234, 242, 258, 266, 277, 281], "str": [10, 11, 20, 36, 41, 42, 43, 52, 60, 61, 62, 64, 69, 70, 73, 76, 77, 88, 90, 93, 100, 102, 108, 118, 119, 121, 141, 158, 168, 174, 184, 186, 188, 195, 200, 204, 209, 221, 225, 229, 245, 247, 248, 250, 254], "unord": [10, 12, 60, 100, 200, 228, 247, 248], "lambidfi": 10, "guess": [10, 14, 41, 61, 64, 85, 88, 189, 202, 205, 219, 222, 281], "construct": [10, 16, 23, 36, 37, 41, 42, 60, 62, 66, 68, 70, 74, 76, 88, 93, 96, 101, 104, 114, 115, 119, 121, 124, 126, 159, 163, 172, 173, 176, 180, 196, 199, 200, 202, 204, 205, 209, 222, 227, 229, 230, 234, 242, 244, 245, 258, 260, 261, 278, 281, 282, 286], "superclass": [10, 11, 18, 59, 60, 87, 93, 200], "scalar": [10, 27, 34, 60, 62, 75, 89, 91, 93, 96, 101, 121, 124, 173, 184, 185, 186, 191, 193, 196, 198, 202, 209, 225, 230, 242, 248, 254, 256, 257, 258, 259, 260, 262, 264, 269, 271], "boolean": [10, 11, 20, 21, 23, 35, 36, 37, 38, 39, 40, 42, 60, 66, 70, 74, 75, 76, 77, 88, 91, 96, 97, 100, 103, 108, 110, 119, 159, 184, 186, 189, 195, 198, 200, 202, 204, 206, 209, 221, 225, 227, 229, 247, 257, 282], "sens": [10, 11, 16, 18, 20, 34, 38, 40, 41, 60, 62, 65, 68, 85, 90, 119, 126, 179, 184, 193, 196, 202, 204, 218, 219, 221, 228, 229, 241, 242, 247, 263, 286], "exponenti": [10, 12, 18, 34, 42, 51, 56, 60, 61, 65, 87, 90, 91, 96, 100, 102, 160, 176, 206, 221, 225, 228, 229, 277, 278, 282], "trick": [10, 11, 12, 56, 219, 235], "treat": [10, 11, 18, 19, 20, 24, 29, 50, 51, 58, 60, 65, 68, 75, 76, 96, 102, 121, 124, 147, 184, 190, 197, 199, 200, 202, 204, 205, 206, 208, 209, 216, 217, 219, 221, 222, 225, 227, 233, 241, 244, 261, 278, 282], "cdot": [10, 18, 43, 59, 65, 68, 78, 82, 83, 85, 91, 93, 96, 100, 111, 113, 139, 179, 190, 192, 193, 194, 196, 197, 205, 212, 216, 219, 225, 227, 230, 231, 260, 261, 280, 281, 286], "attributeerror": [10, 18, 60, 96, 228, 248, 282], "as_coeff_mul": [10, 60, 85, 93], "tri": [10, 11, 12, 18, 23, 25, 41, 60, 68, 76, 85, 87, 126, 138, 169, 196, 197, 204, 209, 211, 221, 225, 226, 228, 240, 278, 286], "benchmark": [10, 126, 140], "runtest": [10, 240], "tmpfile": 10, "random_complex_numb": [10, 60], "verify_numer": [10, 60], "test_derivative_numer": [10, 60], "_randrang": [10, 60, 61], "_randint": [10, 60, 202], "as_poli": [10, 60, 197, 205], "as_expr": [10, 60, 96, 199, 204, 205, 206, 282], "combintor": 10, "perm_cycl": [10, 52, 209], "printer": [10, 11, 20, 52, 60, 68, 88, 96, 101, 189, 234, 241, 242, 248, 277, 281], "init_print": [10, 26, 28, 32, 42, 52, 64, 87, 88, 96, 104, 189, 196, 197, 208, 276, 280, 282, 285, 286, 287], "problemat": [10, 20, 199], "affect": [10, 18, 20, 59, 60, 96, 183, 205, 227, 228, 259], "18056": 10, "15416": 10, "100x": 10, "slowdown": [10, 64], "significantli": [10, 26, 42, 64, 114, 136, 200, 211, 241, 244], "slower": [10, 20, 26, 28, 56, 96, 199, 204, 248, 275], "_sympifi": [10, 60, 93, 281], "strict": [10, 11, 28, 51, 52, 60, 64, 65, 91, 96, 202, 205, 227, 228, 247, 250, 286], "lot": [10, 51, 60, 78, 85, 87, 96, 124, 141, 195, 208, 212, 222, 228, 240, 286], "secur": 10, "whatev": [10, 12, 20, 51, 60, 61, 221, 225, 226, 228, 248], "__repr__": [10, 209], "12524": 10, "repr": [10, 42, 87, 168, 199, 204, 209, 240, 285], "plenti": 10, "_sympy_": [10, 60], "disabl": [10, 11, 60, 61, 85, 87, 100, 202, 205, 209, 217, 225, 227, 238, 240, 243, 247], "constant": [10, 11, 23, 24, 26, 28, 29, 40, 42, 59, 60, 64, 66, 68, 84, 85, 87, 103, 104, 110, 123, 124, 126, 141, 142, 151, 155, 161, 177, 178, 180, 181, 182, 185, 188, 190, 195, 197, 200, 202, 204, 205, 206, 209, 211, 216, 219, 221, 222, 225, 226, 227, 228, 229, 240, 242, 247, 248, 257, 261, 264, 271, 276, 282, 287], "lh": [10, 14, 23, 42, 50, 60, 207, 209, 225, 227, 228, 260], "tensexpr": [10, 111, 235], "substitute_indic": 10, "danger": [10, 197], "tensor_head": [10, 111, 235], "shorter": [10, 30, 60, 70, 114, 136, 183, 196, 200, 209, 242, 250], "creation": [10, 12, 20, 60, 62, 96, 115, 121, 131, 134, 135, 136, 137, 138, 148, 158, 162, 163, 164, 174, 192, 193, 209, 229, 234, 242, 248], "_dummy_fmt": 10, "l_": [10, 87, 96, 194], "obsolet": 10, "dummy_nam": [10, 235], "clearer": [10, 258], "metric_symmetri": [10, 235], "set_metr": [10, 235], "delta": [10, 12, 42, 44, 54, 65, 83, 85, 89, 108, 138, 146, 174, 194, 209, 216, 222, 225, 229, 230, 235], "epsilon": [10, 12, 59, 61, 68, 85, 87, 145, 209, 235], "latter": [10, 15, 20, 42, 51, 60, 65, 68, 85, 100, 196, 200, 204, 209, 219, 222, 235, 242, 247, 248, 278], "involv": [10, 12, 16, 18, 23, 25, 28, 37, 39, 51, 59, 60, 61, 65, 72, 73, 85, 87, 100, 110, 115, 119, 124, 153, 163, 169, 171, 181, 192, 193, 196, 197, 200, 202, 204, 205, 206, 210, 211, 216, 217, 218, 219, 221, 222, 225, 227, 230, 248, 286], "obscur": [10, 18], "young": [10, 103, 235], "tableau": 10, "favor": 10, "tensorindex": [10, 235], "tensor_indic": [10, 111, 235], "denot": [10, 11, 12, 16, 51, 52, 60, 62, 68, 82, 83, 85, 87, 89, 90, 91, 96, 100, 102, 110, 179, 184, 190, 195, 196, 197, 202, 204, 212, 216, 217, 219, 225, 229, 234, 235, 254, 256, 258, 259, 261, 263], "set_dimens": 10, "unit_system": [10, 181], "set_quantity_dimens": [10, 177], "set_global_dimens": 10, "set_scale_factor": 10, "set_quantity_scale_factor": [10, 177], "set_global_relative_scale_factor": [10, 181], "get_dimensional_expr": 10, "unitsystem": [10, 182], "dimension": [10, 26, 40, 42, 44, 62, 72, 73, 74, 75, 76, 93, 96, 104, 111, 141, 148, 150, 160, 176, 190, 191, 195, 196, 202, 204, 205, 208, 209, 227, 228, 230, 231, 235, 241, 263, 287], "_collect_factor_and_dimens": 10, "motiv": [10, 13, 20, 31, 205], "emptyset": [10, 18, 25, 40, 41, 90, 209, 217, 228, 254, 287], "is_empti": [10, 18, 52], "unknown": [10, 11, 15, 18, 19, 20, 26, 29, 34, 60, 61, 104, 159, 207, 224, 225, 226, 227, 228, 247, 287], "empti": [10, 11, 18, 24, 25, 28, 29, 36, 40, 41, 42, 43, 51, 55, 59, 60, 72, 75, 76, 77, 90, 91, 96, 100, 119, 138, 169, 182, 200, 204, 205, 209, 215, 216, 217, 219, 225, 227, 228, 240, 242, 247, 250, 281], "individu": [10, 18, 20, 23, 26, 60, 66, 71, 76, 77, 89, 91, 93, 96, 110, 139, 146, 164, 168, 194, 217, 225, 240, 282], "denest": [10, 60, 205, 221, 227, 247], "particl": [10, 115, 117, 118, 119, 124, 128, 129, 134, 136, 138, 141, 142, 150, 153, 160, 161, 172, 174, 177, 179, 192, 235, 271], "rigidbodi": [10, 115, 117, 119, 123, 126, 131, 132, 133, 134, 139, 141, 271], "potential_energi": [10, 118, 119, 121, 133, 139], "energi": [10, 112, 115, 119, 121, 124, 133, 150, 175, 179, 190, 235, 261, 271], "setter": [10, 124, 141], "getter": [10, 60, 124, 141], "set_": 10, "set_condit": 10, "17749": 10, "side": [10, 12, 16, 18, 23, 25, 42, 51, 52, 60, 72, 76, 87, 96, 100, 103, 110, 119, 123, 138, 139, 142, 162, 163, 179, 184, 194, 196, 202, 204, 207, 209, 226, 228, 229, 233, 240, 242, 264, 276], "unpack": [10, 60, 91, 96, 247, 248], "emul": [10, 221, 228, 230, 248], "is_deriv": [10, 60], "as_finite_differ": [10, 40, 60, 276], "17881": 10, "get_matrix": [10, 235], "__getitem__": [10, 60, 91, 234], "__iter__": [10, 52, 60, 221], "_components_data_full_destroi": 10, "__pow__": [10, 91, 200, 206], "flaw": 10, "replace_with_arrai": [10, 235, 236], "cach": [10, 18, 65, 85, 196, 205, 209, 238, 243, 244], "safe": [10, 60, 100, 199, 205, 227, 233, 276], "squar": [10, 12, 18, 24, 25, 28, 30, 34, 38, 42, 51, 60, 61, 66, 76, 77, 85, 87, 91, 92, 96, 99, 100, 103, 110, 112, 136, 137, 160, 176, 184, 194, 198, 200, 202, 204, 205, 206, 209, 217, 221, 222, 225, 228, 229, 280], "jordan": [10, 26, 85, 91, 96, 207, 225, 227, 228], "band": [10, 91, 99], "eigenvalu": [10, 91, 96, 124, 126, 168, 171, 280], "elif": [10, 18, 19, 20, 66], "getsourc": [10, 248, 252], "sum": [10, 16, 18, 24, 42, 49, 52, 59, 60, 63, 65, 68, 73, 75, 83, 85, 87, 89, 90, 91, 93, 96, 100, 106, 121, 136, 153, 157, 160, 168, 171, 173, 174, 194, 196, 197, 199, 200, 204, 205, 206, 209, 211, 212, 214, 216, 218, 219, 221, 222, 225, 227, 228, 229, 230, 231, 233, 235, 244, 247, 286], "meter": [10, 103, 104, 145, 148, 177, 179, 180, 181], "si": [10, 20, 68, 84, 85, 147, 176, 177, 179, 180, 181, 209], "cg": [10, 153, 171], "aris": [10, 18, 19, 60, 65, 85, 87, 171, 193, 199, 204], "scale": [10, 69, 70, 71, 75, 76, 77, 88, 103, 154, 175, 177, 179, 181, 182, 189, 193, 195, 205, 212, 229, 261, 263], "kilomet": [10, 180, 181], "1000": [10, 12, 42, 44, 60, 61, 64, 93, 100, 141, 179, 180, 181, 194, 208, 209, 218], "dimensionsystem": [10, 176], "14318": 10, "duplic": [10, 12, 51, 54, 61, 66, 68, 96, 100, 217, 225, 247, 279], "flatten": [10, 41, 60, 199, 231, 236, 247, 248], "neither": [10, 18, 19, 38, 60, 148, 169, 195, 205, 216, 217, 218, 225, 235, 248, 254, 263, 286], "polymorph": 10, "anymor": [10, 195], "temporarili": [10, 60], "point3d": [10, 73, 74, 75, 147], "p1": [10, 43, 51, 52, 56, 59, 70, 72, 73, 74, 75, 76, 103, 110, 115, 118, 128, 141, 143, 188, 195, 199, 200, 202, 206, 218, 229, 230], "p2": [10, 19, 51, 52, 59, 70, 72, 73, 74, 75, 76, 103, 110, 115, 118, 141, 188, 195, 199, 200, 202, 206, 218, 229], "conflict": [10, 66, 100, 110, 124, 242], "throughout": [11, 85, 90, 202, 212, 228, 263, 278], "elsewher": [11, 18, 65, 89, 126, 198, 240], "termnam": 11, "antideriv": [11, 66, 68, 87, 225, 276], "frac": [11, 16, 18, 20, 22, 26, 28, 40, 59, 60, 61, 62, 65, 66, 68, 85, 87, 96, 100, 102, 110, 128, 139, 177, 189, 190, 192, 193, 194, 198, 202, 205, 209, 211, 212, 216, 219, 222, 225, 226, 228, 229, 230, 247, 261, 263, 276, 280, 281, 285, 286], "indefinit": [11, 34, 66, 84, 85, 87, 96, 200, 202, 203, 205, 214, 276], "integr": [11, 12, 15, 22, 32, 34, 40, 52, 59, 60, 62, 65, 66, 78, 79, 80, 83, 89, 91, 96, 99, 100, 110, 112, 119, 124, 134, 141, 160, 169, 172, 175, 178, 183, 185, 190, 194, 196, 199, 200, 202, 205, 206, 209, 211, 212, 219, 225, 226, 229, 242, 250, 254, 257, 258, 261, 262, 266, 269, 277, 280, 285], "primit": [11, 51, 60, 61, 68, 100, 168, 172, 196, 197, 199, 200, 202, 204, 205, 208, 209, 222, 276], "terminologi": [11, 22, 235], "tupl": [11, 20, 24, 27, 29, 34, 36, 37, 40, 41, 42, 43, 51, 52, 59, 60, 61, 62, 66, 67, 68, 69, 70, 71, 73, 75, 76, 77, 82, 85, 87, 91, 96, 99, 100, 102, 103, 104, 108, 115, 118, 119, 121, 123, 136, 137, 139, 141, 143, 158, 159, 160, 163, 168, 171, 172, 173, 174, 184, 188, 193, 195, 196, 198, 199, 200, 202, 206, 207, 209, 210, 211, 215, 217, 221, 222, 225, 226, 227, 228, 229, 230, 234, 235, 240, 241, 242, 243, 247, 248, 250, 254, 258, 276, 281, 282, 285], "subexpress": [11, 20, 42, 60, 66, 91, 114, 116, 204, 205, 209, 216, 221, 228, 242, 248, 275], "togeth": [11, 12, 16, 42, 51, 60, 64, 89, 96, 100, 134, 160, 171, 179, 193, 196, 200, 202, 204, 205, 208, 209, 221, 225, 227, 229, 240, 241, 247, 280, 286], "walk": [11, 42, 44, 60, 166, 169, 219], "extract": [11, 25, 28, 29, 30, 40, 60, 87, 91, 93, 96, 100, 111, 126, 134, 183, 193, 202, 204, 205, 227, 228, 229, 240, 242, 247], "rebuilt": [11, 281], "atom": [11, 23, 42, 52, 60, 87, 90, 91, 112, 175, 199, 206, 209, 227, 228, 234], "queri": [11, 18, 19, 20, 35, 38, 39, 40, 42, 60, 72, 205, 221, 229], "is_real": [11, 18, 20, 25, 28, 60, 62, 66, 67, 96, 186, 209, 234], "restrict": [11, 18, 20, 23, 42, 49, 60, 61, 68, 96, 103, 104, 174, 196, 199, 204, 206, 224], "never": [11, 18, 20, 60, 66, 87, 176, 205, 206, 209, 217, 227, 229, 238, 258, 278, 279], "is_": [11, 20, 60], "leav": [11, 18, 20, 27, 29, 42, 60, 87, 96, 100, 120, 134, 158, 174, 216, 244, 275, 281, 286], "recurs": [11, 12, 15, 18, 20, 40, 60, 65, 85, 87, 90, 91, 100, 126, 195, 202, 205, 206, 209, 210, 214, 216, 221, 227, 228, 233, 238, 240, 244, 245, 247, 277, 286], "canonic": [11, 47, 60, 218, 235, 266], "excess": 11, "discourag": [11, 18, 60, 221], "expens": [11, 20, 60, 138, 218, 225, 226, 227, 243, 282], "matrix": [11, 15, 16, 18, 22, 27, 29, 34, 42, 49, 52, 60, 61, 62, 68, 75, 85, 87, 89, 91, 92, 94, 95, 98, 99, 101, 102, 110, 111, 113, 115, 118, 119, 120, 123, 124, 126, 127, 128, 129, 131, 132, 133, 135, 136, 137, 141, 142, 143, 146, 147, 149, 157, 158, 163, 168, 169, 171, 173, 174, 176, 179, 183, 184, 193, 194, 196, 198, 202, 204, 207, 209, 210, 217, 219, 221, 222, 225, 227, 228, 230, 231, 233, 234, 235, 236, 241, 242, 247, 248, 250, 254, 256, 257, 259, 263, 269, 277, 280, 281, 286, 287], "sympifi": [11, 12, 18, 19, 42, 64, 70, 90, 139, 147, 172, 174, 184, 185, 199, 200, 275, 281], "bound": [11, 23, 38, 42, 43, 59, 60, 69, 70, 71, 73, 75, 76, 87, 100, 172, 200, 202, 204, 205, 209, 215, 225, 227, 228, 229, 234, 244, 250, 254], "dummi": [11, 42, 56, 59, 60, 66, 85, 87, 96, 124, 141, 169, 174, 199, 200, 204, 205, 206, 215, 216, 217, 219, 221, 225, 228, 233, 235, 238, 242, 247, 248], "ration": [11, 18, 20, 28, 35, 37, 38, 40, 42, 59, 60, 64, 65, 66, 68, 70, 73, 75, 77, 81, 85, 87, 88, 93, 96, 100, 102, 110, 143, 176, 194, 197, 202, 203, 204, 206, 209, 214, 217, 218, 219, 221, 222, 224, 227, 228, 229, 247, 254, 277, 278, 281, 285], "unequ": [11, 12, 14, 60, 103, 209], "accident": 11, "clash": [11, 33, 60, 96], "contrast": [11, 20, 59, 60, 128, 199, 219, 225, 280], "_eval_": 11, "_eval_deriv": [11, 20, 60, 68], "overrid": [11, 12, 42, 60, 69, 70, 76, 102, 172, 209, 234, 241, 242, 247, 248], "pre": [11, 41, 42, 60, 194, 195, 210, 218, 221, 227, 228, 240, 259, 263, 281], "dispatch": [11, 36, 37, 38, 60, 61, 169, 209, 228, 244], "shorthand": [11, 12, 18, 20, 60, 90, 168, 204, 217, 238], "stand": [11, 59, 60, 141, 197, 199, 200, 206], "reserv": [11, 18, 124, 235, 242, 282], "smaller": [11, 42, 51, 52, 60, 61, 65, 68, 76, 87, 93, 100, 136, 197, 199, 202, 205, 212, 218, 219, 227, 247, 275, 286], "children": [11, 60, 61, 199, 244], "leaf": [11, 199, 209, 218, 281], "strictli": [11, 12, 15, 17, 18, 38, 40, 60, 68, 96, 100, 110, 202, 221, 227], "dag": 11, "map": [11, 18, 20, 40, 41, 42, 50, 51, 52, 60, 61, 72, 76, 83, 85, 87, 90, 91, 100, 108, 119, 128, 152, 163, 164, 169, 184, 193, 195, 196, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 216, 221, 225, 226, 227, 228, 229, 233, 234, 241, 244, 247, 248, 250, 254], "colloqui": [11, 22], "lambda": [11, 12, 20, 23, 27, 36, 37, 40, 42, 51, 52, 60, 61, 62, 66, 87, 91, 92, 93, 96, 99, 100, 102, 124, 137, 138, 141, 142, 159, 195, 202, 204, 205, 209, 210, 217, 218, 221, 225, 227, 228, 229, 230, 238, 247, 248, 254, 256, 259, 275, 282], "hyper": [11, 60, 65, 68, 79, 82, 209, 211, 219, 221, 227, 229, 286], "primepi": [11, 20, 100], "divisor_sigma": [11, 100], "undefin": [11, 20, 25, 36, 37, 40, 60, 66, 67, 68, 87, 93, 102, 115, 193, 204, 215, 216, 219, 248, 276, 287], "interchang": [11, 56, 59, 85, 225], "memori": [11, 42, 60, 100, 205, 230, 241, 244], "maintain": [11, 12, 60, 61, 100, 104, 209, 217, 218, 225, 228, 244], "mental": 11, "hidden": [11, 183], "state": [11, 16, 18, 51, 58, 60, 68, 100, 103, 110, 112, 118, 119, 120, 123, 126, 128, 142, 146, 150, 151, 153, 154, 155, 157, 158, 159, 163, 166, 168, 169, 170, 171, 173, 174, 205, 209, 218, 219, 221, 229, 244, 271, 282], "hashabl": [11, 57, 85, 247], "repl": [11, 235], "intermedi": [11, 42, 43, 83, 91, 118, 124, 126, 131, 135, 158, 168, 176, 177, 184, 188, 192, 228, 242, 283], "execut": [11, 18, 32, 42, 88, 91, 141, 195, 209, 225, 228, 238, 240, 242, 243, 248, 250, 253, 265, 280, 285], "idiom": [11, 251, 278, 279], "anti": [11, 34, 38, 56, 66, 87, 91, 146, 151, 235], "frown": 11, "upon": [11, 18, 42, 60, 100, 123, 126, 136, 137, 138, 141, 168, 174, 190, 192, 193, 217, 225, 234, 241, 261, 286], "lowercas": [11, 12, 225, 240, 276], "is_integ": [11, 18, 20, 60, 186, 209, 234], "capit": [11, 59, 61, 110, 225], "wherea": [11, 16, 18, 26, 28, 38, 42, 61, 70, 76, 85, 90, 110, 179, 196, 199, 205, 209, 227, 228, 247, 286], "is_capit": 11, "unneed": 11, "achiev": [11, 12, 20, 60, 64, 68, 93, 100, 124, 141, 208, 216, 219, 221, 228, 243, 259], "isinst": [11, 15, 18, 20, 42, 60, 91, 93, 110, 199, 200, 209, 210, 221, 230, 233, 242, 281], "ship": [11, 101], "session": [11, 33, 42, 60, 72, 87, 189, 193, 199, 245, 278, 285], "sort": [11, 23, 36, 37, 41, 42, 49, 52, 56, 85, 87, 90, 96, 99, 100, 111, 114, 119, 158, 174, 179, 183, 195, 202, 205, 206, 216, 221, 222, 225, 226, 227, 233, 235, 240, 242, 247, 258, 278, 280, 281], "numberkind": [11, 15, 60, 91, 217], "matrixkind": [11, 15, 60, 91, 217], "booleankind": [11, 60], "ring": [11, 28, 63, 83, 96, 97, 192, 197, 198, 202, 204, 205, 206, 207, 208, 209, 247], "classif": [11, 17, 60, 225, 226], "lamda": [11, 93, 209, 217, 229, 282], "\u03bb": [11, 282], "lambdifi": [11, 20, 27, 42, 68, 126, 209, 227, 241, 246, 273, 277], "matrixexpr": [11, 20, 91, 93, 94], "mutabl": [11, 12, 43, 60, 92, 93, 94, 103, 200, 209, 210, 221, 230, 282], "dens": [11, 91, 93, 95, 96, 198, 204, 205, 230, 269, 281], "underli": [11, 42, 52, 58, 60, 89, 96, 108, 124, 169, 182, 227, 228, 229], "quit": [11, 16, 20, 68, 96, 100, 126, 192, 195, 206, 208, 219, 227, 247, 263, 278, 281], "rung": [11, 40, 82], "kutta": [11, 82], "condit": [11, 18, 19, 23, 28, 42, 51, 60, 62, 66, 68, 78, 79, 82, 83, 84, 87, 90, 96, 100, 102, 103, 104, 106, 110, 116, 120, 126, 134, 138, 141, 143, 188, 194, 206, 209, 212, 219, 222, 224, 225, 227, 228, 229, 234, 286], "loss": [11, 42, 85, 174, 241, 260], "stabil": [11, 51, 56, 58, 64, 110, 138, 233], "focus": [11, 27, 202, 222, 224, 227, 228, 287], "is_numb": [11, 18, 60, 68, 87], "infin": [11, 18, 23, 38, 59, 60, 65, 66, 68, 73, 85, 87, 96, 147, 200, 202, 205, 209, 214, 215, 216, 217, 221, 224, 225, 229], "resembl": [11, 62, 68, 87, 234], "zoo": [11, 14, 18, 38, 60, 65, 66, 68, 87, 216, 218, 221], "data": [11, 16, 42, 51, 60, 61, 68, 87, 96, 101, 108, 119, 153, 195, 196, 199, 200, 202, 205, 206, 209, 221, 234, 235, 240, 242, 244, 247, 251], "effici": [11, 16, 18, 26, 28, 40, 42, 44, 51, 56, 60, 63, 64, 65, 76, 77, 93, 96, 100, 101, 110, 118, 119, 141, 194, 197, 198, 199, 200, 202, 205, 206, 207, 208, 221, 222, 227, 241, 248, 275, 281, 282, 286], "act": [11, 41, 50, 51, 52, 56, 60, 68, 76, 89, 90, 96, 103, 106, 115, 118, 123, 124, 129, 137, 146, 158, 163, 166, 167, 217, 228, 230, 259, 263, 275], "pprint": [11, 12, 20, 25, 40, 41, 62, 68, 87, 96, 100, 110, 146, 194, 209, 210, 217, 221, 225, 226, 228, 229, 247, 285], "inequ": [11, 18, 19, 20, 22, 60, 195, 202, 217, 219, 223, 266], "neq": [11, 20, 60, 66, 68, 85, 87, 91, 179, 193, 194, 202, 205, 222, 225, 227, 286], "ne": [11, 14, 18, 60, 61, 65, 66, 73, 85, 100, 197, 199, 202, 219, 225, 229], "hold": [11, 12, 20, 37, 41, 51, 56, 60, 61, 62, 66, 68, 82, 85, 96, 99, 102, 110, 112, 118, 120, 121, 139, 170, 205, 219, 221, 225, 229, 242, 286], "singleton": [11, 52, 90, 228, 281], "gotcha": [11, 13, 60, 193, 248, 279, 287], "somehow": [11, 20], "simpler": [11, 19, 20, 28, 60, 64, 68, 84, 85, 131, 193, 202, 218, 219, 221, 225, 227, 228, 286], "adject": [11, 229], "heurist": [11, 18, 52, 85, 87, 91, 202, 203, 216, 218, 221, 227, 228, 240, 276, 286], "appar": [11, 12, 60, 250, 286], "commut": [11, 18, 34, 38, 41, 51, 52, 56, 60, 62, 83, 87, 96, 151, 158, 161, 162, 163, 173, 174, 179, 186, 193, 197, 200, 201, 202, 203, 205, 209, 216, 217, 219, 225, 235, 271, 272, 281], "law": [11, 41, 134, 177, 193, 197], "xreplac": [11, 60, 91, 96, 184], "knowledg": [11, 59, 60, 61, 204, 225, 281, 284], "round": [11, 20, 27, 40, 42, 60, 64, 65, 66, 96, 147, 204, 205, 216, 218, 229], "analyt": [11, 32, 65, 68, 85, 96, 134, 225, 276], "implicitli": [11, 18, 19, 20, 52, 60, 87, 196, 199, 227], "independ": [11, 12, 20, 26, 38, 40, 42, 51, 59, 60, 62, 68, 77, 85, 87, 89, 96, 110, 119, 120, 124, 126, 128, 136, 138, 172, 179, 190, 195, 197, 199, 204, 205, 211, 212, 219, 221, 222, 225, 226, 227, 228, 229, 235, 240, 241, 261, 280, 281], "nativ": [11, 60, 110, 200, 205, 240], "parsabl": 11, "iter": [11, 24, 25, 26, 28, 30, 40, 42, 49, 51, 52, 55, 56, 60, 61, 62, 63, 65, 68, 76, 90, 100, 115, 116, 118, 119, 120, 123, 138, 142, 159, 174, 188, 195, 196, 197, 198, 200, 202, 205, 209, 210, 211, 212, 215, 221, 222, 225, 227, 228, 229, 230, 233, 241, 242, 243, 244, 246, 248, 254, 259, 273], "fuzzi": [11, 18, 20, 21], "noncomput": 11, "philosoph": 11, "OR": [11, 40, 63, 90, 202], "One": [11, 12, 15, 18, 20, 40, 41, 42, 50, 52, 59, 60, 65, 66, 68, 79, 82, 84, 85, 87, 90, 96, 100, 103, 104, 124, 139, 141, 150, 179, 200, 202, 203, 205, 208, 211, 217, 221, 224, 227, 228, 229, 230, 235, 248, 261, 275, 276, 278, 281, 282, 286], "care": [11, 12, 19, 20, 51, 60, 68, 87, 90, 96, 103, 114, 124, 138, 184, 193, 199, 204, 221, 222, 225, 227, 228, 233, 236, 241, 275, 278, 280], "falsi": 11, "is_posit": [11, 18, 19, 20, 60, 186, 200], "unevaluatedexpr": [11, 60, 209, 281], "surpris": [11, 18, 228], "north": 11, "riemann": [11, 62, 65, 66, 85, 196, 221, 235], "sphere": [11, 146, 254, 264], "behav": [12, 38, 40, 60, 61, 66, 68, 100, 205, 217, 221, 227, 230, 236, 282], "mapl": [12, 87, 225, 280], "mathematica": [12, 42, 52, 102, 280, 282], "faq": 12, "introductori": [12, 16, 31, 32, 141, 199, 200, 205], "remaind": [12, 59, 60, 61, 100, 197, 199, 200, 203, 205, 225], "familiar": [12, 20, 87, 124, 139, 158, 206, 276, 278, 284], "java": 12, "minut": [12, 26, 114, 126, 183], "subtract": [12, 25, 42, 52, 60, 64, 75, 100, 110, 118, 176, 197, 198, 199, 200, 202, 204, 205, 281, 286], "proper": [12, 51, 60, 87, 100, 114, 124, 183, 199, 200, 204, 209, 217, 225, 230, 241, 242, 261, 282], "trigsimp": [12, 34, 60, 96, 118, 124, 132, 184, 218, 221, 258], "fill": [12, 17, 51, 61, 91, 93, 96, 99, 174, 195, 240, 243, 247, 250, 282], "alter": [12, 43, 51, 60, 184, 199, 209, 211, 228], "afterward": [12, 42, 60, 121, 128], "quantiti": [12, 52, 60, 65, 68, 72, 77, 104, 114, 119, 132, 139, 153, 176, 178, 182, 190, 192, 193, 204, 221, 229, 258, 263, 271], "simultan": [12, 60, 66, 73, 91, 100, 195, 218], "var": [12, 24, 40, 42, 59, 60, 64, 65, 83, 87, 90, 96, 110, 184, 195, 204, 208, 209, 221, 222, 248, 287], "rate": [12, 126, 192, 229, 261, 276], "short_lif": 12, "haven": 12, "160": [12, 103, 203], "ctimesd": 12, "circular": [12, 18, 108, 146, 202], "relationship": [12, 14, 18, 42, 60, 65, 67, 87, 100, 135, 158, 184, 190, 193, 199, 227], "runtimeerror": [12, 40, 217, 228, 247], "compileflag": [12, 240], "glob": [12, 240], "exceed": [12, 126], "stdin": [12, 243, 245], "nameerror": [12, 88, 243, 278], "__future__": [12, 16, 278, 285], "divis": [12, 20, 60, 96, 100, 176, 196, 199, 200, 201, 202, 205, 207, 209, 222, 225, 227, 240, 248, 278, 281, 285], "cl": [12, 18, 20, 42, 51, 60, 87, 91, 174, 188, 200, 204, 225, 234, 243, 247, 260, 276, 285, 287], "dir": [12, 60, 103, 211, 216, 247], "__builtins__": 12, "__file__": [12, 251], "__name__": [12, 209, 251], "__package__": 12, "_greek": 12, "_latin": 12, "chi": [12, 68, 85, 146, 209, 219, 225, 229, 235], "eta": [12, 68, 85, 204, 209, 225, 226, 229], "iota": [12, 209], "kappa": [12, 194, 209, 229], "mu": [12, 68, 85, 100, 111, 113, 145, 209, 229, 235], "omega": [12, 42, 43, 51, 85, 100, 115, 121, 123, 139, 142, 148, 150, 175, 184, 188, 189, 192, 194, 209, 216, 229], "omicron": [12, 209], "phi": [12, 51, 60, 61, 65, 68, 85, 89, 96, 100, 112, 141, 148, 157, 159, 194, 196, 204, 209, 225, 254, 264], "psi": [12, 65, 68, 85, 146, 157, 158, 164, 172, 204, 209, 235], "rho": [12, 62, 85, 96, 100, 127, 168, 209, 229, 235, 264], "sigma": [12, 52, 83, 85, 91, 96, 209, 212, 229], "tau": [12, 42, 85, 87, 96, 204, 209, 225], "theta": [12, 60, 62, 66, 68, 85, 88, 96, 102, 112, 123, 142, 146, 184, 193, 194, 200, 204, 209, 212, 217, 228, 229, 254, 256, 259, 261, 264], "upsilon": [12, 209], "xi": [12, 20, 62, 85, 209, 225, 226, 227], "lastli": [12, 87, 104, 142, 225], "unit": [12, 20, 34, 38, 41, 60, 61, 65, 73, 74, 75, 87, 96, 100, 103, 108, 110, 112, 113, 118, 124, 139, 141, 150, 175, 176, 177, 181, 183, 184, 190, 193, 195, 197, 200, 202, 204, 205, 207, 209, 217, 219, 222, 228, 230, 254, 256, 258, 263, 264, 271], "mnemon": [12, 218, 247], "osineq": 12, "reimport": 12, "restor": [12, 199, 221], "__": [12, 68, 87, 209, 229, 234], "press": [12, 41, 43, 44, 52, 61, 87, 91, 194, 203, 222, 227], "autocomplet": 12, "lose": [12, 196], "abil": [12, 18, 40, 96, 134, 204, 208, 225, 228, 280, 286], "past": [12, 66, 100, 208, 209, 285], "f1": [12, 27, 51, 85, 87, 96, 110, 115, 124, 132, 141, 195, 200, 202, 205, 209, 211, 227], "f2": [12, 27, 60, 85, 96, 110, 115, 124, 132, 141, 177, 195, 202, 205, 209, 211, 227], "6": [12, 14, 16, 28, 29, 30, 34, 36, 37, 40, 42, 43, 44, 48, 49, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 70, 72, 73, 74, 75, 76, 82, 83, 85, 87, 89, 90, 91, 93, 94, 96, 97, 99, 100, 102, 103, 106, 108, 110, 111, 112, 126, 127, 131, 132, 133, 143, 147, 153, 171, 183, 184, 193, 194, 195, 197, 198, 199, 200, 202, 204, 205, 206, 208, 209, 211, 214, 215, 216, 217, 218, 221, 222, 225, 226, 227, 228, 229, 230, 240, 241, 244, 247, 248, 254, 257, 259, 264, 276, 282, 286, 287], "accuraci": [12, 16, 40, 60, 205, 282], "2000000000000002": 12, "py3k": 12, "20000000000000": 12, "sympyifi": 12, "worri": [12, 60, 281], "reus": [12, 20, 42, 174, 280], "142857142857143": 12, "receiv": [12, 30, 60, 61, 100, 115, 169, 204, 234], "fraction": [12, 60, 61, 64, 66, 76, 87, 96, 100, 116, 180, 199, 200, 202, 203, 206, 209, 211, 221, 222, 225, 227, 277], "interpret": [12, 19, 30, 42, 51, 59, 60, 65, 66, 68, 73, 76, 87, 91, 93, 96, 100, 102, 114, 179, 195, 197, 204, 205, 209, 216, 222, 227, 228, 229, 234, 240, 241, 244, 250, 282], "100": [12, 20, 42, 44, 49, 59, 60, 61, 64, 68, 76, 83, 90, 91, 96, 100, 103, 195, 199, 204, 206, 208, 209, 216, 227, 228, 247, 275], "000000000000": 12, "00": [12, 60, 100, 158, 168, 222, 247], "null": [12, 60, 96], "34": [12, 42, 52, 65, 73, 96, 100, 115, 156, 203, 208, 215, 221, 222], "3400000000000": 12, "250": [12, 100, 222], "143": [12, 153, 194], "next": [12, 16, 18, 20, 33, 42, 43, 44, 49, 51, 52, 54, 55, 60, 61, 66, 85, 87, 90, 96, 100, 114, 115, 118, 119, 127, 128, 129, 131, 133, 134, 135, 142, 192, 193, 196, 200, 204, 205, 209, 217, 219, 222, 225, 244, 245, 247, 279, 280, 281], "binari": [12, 19, 20, 24, 38, 42, 44, 55, 60, 61, 87, 90, 100, 101, 168, 180, 196, 199, 205, 222, 241, 244, 247], "decim": [12, 20, 42, 60, 63, 64, 100, 102, 108, 199, 205, 280], "far": [12, 41, 60, 74, 87, 194, 196, 199, 209, 219, 248, 275, 276, 278], "142857": 12, "25000000000000000000": 12, "14285278320312500000": 12, "realiz": [12, 45, 51, 62, 90, 100, 128, 196, 197, 202, 229], "pad": [12, 42, 61, 62, 63, 75, 100], "inexact": [12, 30, 60, 200], "low": [12, 18, 19, 42, 60, 61, 68, 100, 199, 202, 207, 209, 221, 241, 242, 247], "higher": [12, 16, 28, 40, 42, 60, 62, 64, 68, 71, 96, 188, 194, 196, 199, 202, 205, 211, 212, 216, 218, 221, 225, 227, 230, 248, 276], "engin": [12, 106, 140, 141, 191, 225, 285], "increas": [12, 26, 40, 41, 52, 58, 59, 60, 63, 64, 68, 91, 100, 101, 114, 125, 158, 183, 184, 186, 192, 193, 199, 202, 204, 205, 211, 214, 218, 225, 229, 245, 247], "2000061035": 12, "highest": [12, 42, 54, 89, 114, 196, 205, 212, 222, 225], "hopefulli": [12, 17, 85], "unsimplifi": [12, 218], "12345678901234567890": 12, "big_trig_ident": 12, "ab": [12, 39, 42, 43, 59, 60, 61, 64, 65, 66, 68, 72, 83, 85, 90, 91, 96, 106, 112, 141, 174, 197, 200, 204, 205, 209, 222, 224, 227, 228, 229, 235, 244, 247, 250, 260, 286], "gave": [12, 60, 247], "gain": [12, 61, 110, 136, 137, 141], "impress": 12, "91": [12, 43, 203, 208, 215, 229], "compar": [12, 18, 30, 40, 42, 52, 57, 60, 65, 66, 77, 90, 96, 100, 101, 126, 153, 177, 181, 199, 202, 205, 206, 209, 214, 216, 221, 225, 228, 230, 234, 240, 247, 278, 281, 286], "4e": [12, 227], "nearli": [12, 100, 218], "snippet": [12, 42], "expr_modifi": 12, "__main__": [12, 42, 282], "declar": [12, 18, 25, 42, 73, 85, 96, 102, 111, 124, 126, 141, 153, 198, 209, 216, 219, 224, 225, 226, 229, 242], "asid": [12, 90, 225, 226, 280], "2x": [12, 24, 60, 68, 85, 102, 221, 222, 228, 229, 275, 278, 286], "syntaxerror": [12, 102], "asin": [12, 66, 68, 74, 206, 209, 219, 221, 225, 229, 286], "arcsin": [12, 66, 206, 209, 229], "arcco": [12, 66, 209], "root": [12, 18, 20, 22, 25, 30, 40, 42, 59, 60, 61, 66, 68, 82, 83, 84, 85, 87, 89, 92, 96, 100, 141, 179, 194, 196, 197, 200, 204, 206, 208, 209, 219, 221, 225, 227, 228, 229, 240, 244, 247, 280, 282, 285, 287], "expon": [12, 28, 30, 39, 42, 60, 61, 66, 67, 68, 85, 87, 93, 100, 108, 110, 180, 197, 198, 199, 205, 206, 209, 218, 221, 225, 228, 233, 244, 286], "half": [12, 20, 42, 60, 61, 65, 66, 68, 70, 76, 87, 89, 96, 100, 102, 103, 143, 146, 171, 194, 200, 202, 204, 205, 217, 218, 219, 221, 229, 240, 247], "denomin": [12, 60, 64, 68, 87, 100, 110, 116, 197, 199, 200, 202, 204, 205, 208, 209, 218, 219, 221, 222, 225, 227, 286], "wild": [12, 60, 221, 247], "interest": [12, 14, 20, 24, 28, 30, 56, 60, 62, 65, 66, 76, 85, 87, 96, 100, 125, 126, 174, 179, 193, 196, 200, 204, 205, 206, 208, 216, 219, 221, 222, 227, 228, 241, 242, 259, 276, 279, 281, 282, 283, 286], "sq": [12, 222], "is_pow": [12, 42, 60, 66], "is_rat": [12, 18, 204, 247], "bracket": [12, 20, 27, 29, 52, 60, 68, 172, 174, 184, 209], "notat": [12, 16, 25, 28, 30, 48, 52, 53, 59, 60, 61, 65, 68, 85, 93, 96, 102, 110, 172, 183, 184, 189, 193, 196, 209, 216, 221, 228, 234, 235, 247, 261, 276], "curli": [12, 124, 209], "suppli": [12, 27, 40, 41, 42, 51, 52, 60, 62, 70, 74, 96, 100, 115, 118, 119, 121, 126, 128, 131, 136, 137, 147, 174, 183, 188, 193, 195, 204, 206, 211, 218, 225, 241, 247, 248, 254, 256, 259], "powsimp": [12, 60, 66, 218, 221], "deep": [12, 20, 60, 66, 90, 91, 205, 216, 221, 229, 281], "measur": [12, 34, 66, 68, 76, 92, 114, 154, 163, 168, 176, 179, 181, 183, 184, 188, 190, 193, 205, 217, 218, 221, 229, 253, 254, 257, 258, 260, 261, 263], "count_op": [12, 60, 218, 221], "radic": [12, 28, 60, 61, 96, 196, 204, 205, 221, 227, 228], "join": [12, 23, 52, 60, 61, 73, 91, 103, 104, 209, 221, 225, 227, 230, 247, 251], "autoexpand": [12, 221], "violat": [12, 124, 194, 206, 221], "naiv": [12, 15, 51, 57, 60, 85, 91, 96, 179, 219, 227, 228, 235], "strategi": [12, 43, 60, 87, 202, 203, 216, 219, 221, 226], "radsimp": [12, 60, 221], "logcombin": [12, 221, 225, 228], "robust": [12, 57, 60, 64, 201, 221, 225], "cancel": [12, 16, 20, 42, 60, 64, 68, 76, 85, 87, 96, 100, 110, 111, 199, 200, 202, 205, 208, 221, 227, 280], "topic": [13, 21, 31, 42, 134, 139, 191, 192, 193, 194, 196, 198, 199, 204, 228, 271, 278, 283], "behind": [13, 31, 111, 124, 138, 178, 198, 218, 221, 225, 228, 271, 278], "decis": [13, 31, 60, 66, 87, 218, 227, 242], "opinion": [13, 31], "pitfal": [13, 20, 193, 199, 278, 283, 286], "glossari": 13, "seem": [14, 18, 20, 84, 85, 124, 179, 196, 221, 225, 286], "unwieldi": 14, "arbitrarili": [14, 28, 40, 60, 73, 100, 202, 204, 216, 219, 225, 226, 229], "six": [14, 104, 209, 222, 228, 229], "bias": 14, "toward": [14, 42, 60, 68, 196, 216, 228], "enter": [14, 52, 60, 61, 65, 73, 100, 102, 103, 119, 123, 126, 136, 209, 219, 227, 240, 281, 285], "attempt": [14, 16, 19, 20, 24, 28, 30, 42, 51, 56, 58, 60, 64, 65, 72, 85, 87, 96, 100, 114, 116, 169, 199, 204, 209, 211, 218, 221, 222, 225, 227, 228, 229, 240, 278, 286], "unambigu": [14, 209, 225, 250], "univari": [14, 28, 30, 40, 59, 60, 66, 83, 87, 196, 197, 199, 200, 203, 204, 205, 206, 211, 222, 224, 227, 229], "linear": [14, 20, 22, 24, 26, 27, 30, 41, 42, 52, 59, 60, 61, 63, 64, 68, 73, 83, 85, 87, 89, 91, 93, 95, 103, 107, 110, 117, 118, 119, 121, 126, 128, 129, 134, 136, 140, 141, 146, 168, 171, 172, 188, 195, 196, 200, 202, 204, 205, 207, 215, 217, 219, 222, 225, 226, 227, 228, 247, 269, 271, 287], "undetermin": [14, 60, 96, 205, 211, 225, 227], "nonlinear": [14, 22, 30, 59, 141, 205, 225, 227, 228], "sol": [14, 27, 96, 222, 225, 226, 227], "insuffici": [14, 91], "elimin": [14, 16, 26, 42, 56, 60, 90, 92, 96, 114, 200, 207, 208, 210, 212, 221, 225, 227, 228, 235, 242, 282], "nsolv": [14, 27, 28, 29, 30, 141, 227], "z_eq": 14, "zsol": 14, "906425478894557": 14, "sol0": 14, "90642547889456": 14, "reduce_inequ": [14, 23, 224, 227], "rh": [14, 23, 26, 42, 50, 52, 60, 91, 92, 96, 118, 119, 124, 131, 132, 133, 198, 207, 209, 211, 225, 227, 228, 260], "classifi": [15, 96, 199, 225, 226, 228, 229], "distinguish": [15, 18, 19, 41, 51, 64, 89, 124, 173, 179, 196], "former": [15, 42, 60, 65, 124, 202, 204, 205, 222, 247], "retriev": [15, 58, 91, 205, 221, 235], "guarante": [15, 18, 27, 28, 42, 51, 52, 60, 72, 85, 87, 96, 199, 202, 204, 205, 225, 227, 228, 245, 250, 282, 286], "catch": [15, 60, 225, 240, 282], "theori": [15, 20, 43, 49, 50, 51, 52, 58, 60, 61, 65, 68, 89, 97, 119, 124, 138, 140, 153, 171, 174, 184, 188, 198, 202, 203, 204, 208, 222, 244, 254, 272, 280], "is_subset": [15, 217], "valueerror": [15, 18, 27, 35, 37, 40, 42, 43, 52, 60, 61, 69, 70, 73, 75, 76, 87, 91, 93, 96, 99, 100, 103, 108, 110, 148, 188, 190, 194, 196, 198, 202, 204, 217, 225, 227, 228, 247, 250, 261], "odd": [15, 18, 24, 35, 37, 38, 39, 48, 52, 60, 61, 65, 66, 68, 90, 99, 100, 111, 194, 204, 205, 209, 227], "appliedpred": [15, 35, 36, 37], "analysi": [16, 42, 43, 51, 60, 61, 66, 107, 126, 138, 139, 142, 196, 205, 219, 222, 229], "vari": [16, 40, 42, 60, 74, 76, 103, 108, 114, 119, 139, 172, 193, 216, 227, 247, 261], "hope": [16, 51, 114, 196], "research": [16, 52, 206, 221], "establish": [16, 56, 85, 118, 129, 219], "envis": 16, "along": [16, 20, 28, 42, 51, 60, 61, 62, 66, 68, 69, 70, 74, 75, 78, 80, 83, 85, 91, 93, 96, 103, 104, 106, 113, 114, 118, 119, 126, 128, 131, 132, 133, 136, 137, 138, 141, 143, 171, 183, 184, 190, 193, 195, 198, 199, 204, 205, 225, 228, 257, 261, 263], "small": [16, 24, 42, 43, 51, 52, 60, 64, 65, 87, 90, 96, 100, 110, 128, 132, 141, 171, 194, 195, 202, 203, 204, 221, 222, 227, 247, 275, 278, 280], "x_": [16, 24, 42, 50, 60, 61, 65, 102, 200, 202, 205, 211, 222, 225, 230], "taylor": [16, 60, 66, 124, 138, 141, 200, 202, 205, 206, 216, 225], "let": [16, 18, 19, 20, 40, 42, 51, 56, 60, 61, 70, 78, 83, 85, 89, 93, 96, 97, 100, 102, 115, 124, 141, 179, 184, 192, 196, 197, 198, 202, 204, 205, 206, 209, 216, 219, 221, 222, 225, 227, 228, 235, 238, 241, 245, 248, 259, 260, 264, 275, 278, 280, 281, 286], "df": [16, 62, 225], "c_": [16, 22, 61, 83, 85, 193, 197, 225], "grid": [16, 40, 41, 108, 195], "f_": [16, 60, 65, 68, 87, 136, 137, 138, 202, 208, 209, 219, 225], "constraint": [16, 23, 96, 104, 110, 118, 119, 120, 123, 124, 126, 127, 128, 130, 134, 136, 137, 138, 141, 206, 271], "formul": [16, 26, 118, 127, 128, 134, 136, 137, 174, 193], "assess": 16, "brute": [16, 218, 222], "frequent": [16, 51, 204, 216, 228], "cover": [16, 66, 100, 102, 114, 124, 183, 192, 235, 242, 276, 278], "treatment": [16, 85, 205], "shall": [16, 51, 85, 124, 141, 216, 219, 281], "job": [16, 20, 52, 154, 206, 209], "truncat": [16, 52, 60, 96, 100, 104, 179, 195, 206, 208, 211, 212], "approx": [16, 22, 27, 60, 87], "lowest": [16, 42, 51, 56, 100, 196, 211, 228], "2h": 16, "print_funct": 16, "x0": [16, 40, 42, 50, 60, 68, 79, 81, 83, 84, 100, 146, 199, 210, 211, 216, 221, 225, 227, 229, 247, 276], "x_0": [16, 50, 51, 61, 82, 83, 84, 202, 211, 222, 225, 229, 276], "fi": 16, "fip1": 16, "fip2": 16, "c_0": [16, 61, 83], "c_1": [16, 61, 83, 85, 216, 219, 225], "c_2": [16, 85, 216, 225], "2f": [16, 287], "c_i": [16, 85, 216, 219, 225], "nth": [16, 60, 65, 68, 89, 100, 200, 205, 206, 215, 221, 225, 229], "degre": [16, 28, 43, 51, 58, 59, 65, 68, 76, 87, 91, 96, 103, 106, 108, 110, 118, 119, 124, 125, 128, 134, 142, 146, 193, 196, 197, 200, 202, 204, 205, 208, 212, 215, 218, 219, 221, 222, 225, 227, 229, 254, 271], "x_i": [16, 20, 50, 68, 87, 96, 197, 200, 202, 205, 206, 209, 228], "m11": [16, 229], "m12": [16, 229], "m13": 16, "m21": [16, 229], "m22": [16, 229], "m23": 16, "m31": 16, "m32": 16, "m33": [16, 100], "3x3": [16, 26, 75, 96, 259], "invert": [16, 26, 30, 38, 60, 61, 91, 93, 96, 110, 128, 176, 197, 199, 200, 204, 205, 225, 227, 228, 235, 282], "inv": [16, 26, 52, 92, 96, 118, 119, 126, 131, 132, 141, 163, 198, 225], "fim1": 16, "eight": [16, 30, 209], "dfdxcheck": 16, "c3": [16, 63, 89, 91, 93, 100, 225, 229, 260, 287], "c5": [16, 225], "120": [16, 59, 60, 65, 66, 82, 100, 103, 104, 206, 208, 209, 211, 225, 276], "c7": [16, 51], "5040": [16, 65, 82, 205, 206], "quickli": [16, 20, 51, 52, 60, 61, 64, 100, 202, 205, 218, 228, 244], "tediou": [16, 87], "certainli": [16, 72, 102, 244], "fine": [16, 20, 24, 60, 64, 88, 189, 199, 209, 221], "devis": 16, "xn": [16, 20, 200], "x_n": [16, 20, 43, 50, 61, 82, 96, 197, 200, 202, 205, 222, 228], "fn": [16, 87, 96, 196, 205], "fnm1": 16, "fnm2": 16, "dth": 16, "Of": [16, 18, 28, 59, 85, 96, 225, 228, 247, 286], "cours": [16, 18, 44, 51, 59, 68, 85, 87, 96, 97, 100, 190, 198, 199, 203, 204, 216, 218, 219, 261, 286], "etc": [16, 18, 19, 37, 40, 42, 56, 60, 61, 65, 66, 78, 89, 90, 95, 100, 124, 145, 154, 158, 171, 174, 178, 186, 190, 192, 193, 195, 196, 197, 199, 202, 204, 209, 210, 217, 218, 219, 221, 225, 228, 229, 233, 241, 242, 247, 259, 263], "discrit": 16, "bengt": [16, 40], "fornberg": [16, 40], "weight": [16, 60, 68, 75, 77, 87, 89, 96, 158, 221, 276], "gap": [17, 51, 100, 124, 206], "matur": [17, 18, 227, 228], "finit": [17, 18, 25, 38, 42, 46, 47, 48, 51, 59, 60, 61, 63, 64, 87, 89, 90, 160, 184, 194, 197, 200, 203, 205, 206, 209, 211, 212, 215, 217, 222, 224, 225, 228, 247, 254, 256, 266, 277, 280, 286], "concret": [18, 41, 52, 60, 65, 66, 87, 89, 96, 100, 124, 179, 200, 204, 209, 266], "obviou": [18, 19, 20, 26, 51, 59, 196, 199, 208, 222, 280], "situat": [18, 30, 64, 85, 193, 225, 227, 229, 245, 278], "refus": [18, 286], "roughli": [18, 60, 61, 101, 125, 225, 248], "possibli": [18, 42, 52, 58, 60, 85, 87, 100, 177, 178, 202, 216, 217, 227, 242, 276, 282], "infinit": [18, 20, 23, 24, 38, 59, 60, 61, 64, 65, 66, 73, 74, 87, 96, 100, 110, 130, 160, 179, 196, 204, 209, 210, 211, 214, 215, 216, 217, 221, 222, 224, 227, 234, 247, 286, 287], "is_neg": [18, 20, 200], "unknow": 18, "resolv": [18, 19, 23, 24, 25, 26, 27, 28, 29, 60, 218, 221, 227], "undecid": [18, 20, 25, 96, 199, 228, 282], "conclud": [18, 68, 83, 126, 190, 216, 227, 263], "particularli": [18, 64, 87, 199, 200, 219, 286, 287], "mix": [18, 33, 59, 66, 91, 96, 102, 183, 199, 200, 205, 209, 228, 231, 233, 235, 248], "ideal": [18, 42, 97, 121, 124, 134, 184, 192, 198, 200, 202, 203, 204, 205, 206, 221, 228, 254], "slow": [18, 20, 26, 28, 56, 60, 64, 87, 101, 114, 126, 146, 183, 193, 199, 200, 209, 210, 211, 212, 221, 225, 227, 228, 240, 241, 286], "indetermin": [18, 19, 60, 96, 202, 214, 227], "contradict": 18, "infer": [18, 36, 37, 52, 60, 87, 199, 208, 209, 214, 219, 225, 241], "prepar": [18, 119, 207], "presum": [18, 85, 199, 219, 242], "singletonregistri": [18, 60], "x1": [18, 20, 27, 50, 60, 65, 141, 146, 199, 200, 210, 211, 221, 225, 227, 229, 247], "x2": [18, 27, 50, 60, 65, 141, 146, 199, 211, 225, 227, 229], "posifi": [18, 221], "_x": [18, 20, 96, 135, 139, 189, 192, 193, 200, 206, 221, 225, 241], "rep": [18, 51, 56, 60, 158, 196, 198, 199, 200, 203, 204, 205, 218, 221, 250], "feel": [18, 32, 141, 142, 221, 225, 227], "among": [18, 41, 42, 43, 44, 51, 52, 61, 88, 101, 205, 225, 230, 233, 235, 258], "behaviour": [18, 85, 90, 115, 202, 206, 212, 215], "symbolc": 18, "implicit": [18, 42, 58, 60, 102, 119, 123, 142, 195, 225, 227, 231, 234, 241, 242, 254, 257, 264, 278], "tailor": 18, "assumptions0": [18, 60], "extended_neg": [18, 60], "extended_nonneg": [18, 60], "extended_nonposit": [18, 60], "extended_nonzero": [18, 60, 209], "extended_posit": [18, 60], "extended_r": [18, 38, 60, 209, 224, 228], "hermitian": [18, 26, 38, 60, 91, 92, 96, 157, 163, 174, 209], "irrat": [18, 28, 38, 40, 60, 100, 199, 205, 209, 217, 280], "noninteg": [18, 38, 60, 199, 209], "nonneg": [18, 20, 38, 60, 61, 62, 65, 68, 93, 141, 197, 199, 205, 222, 229, 286], "nonposit": [18, 38, 60, 65, 68, 141], "nonzero": [18, 20, 38, 39, 59, 60, 75, 96, 112, 197, 198, 199, 200, 209, 212, 228], "transcendent": [18, 25, 29, 30, 38, 60, 68, 87, 199, 204, 209, 227, 228, 282, 287], "field": [18, 34, 38, 42, 60, 61, 62, 68, 78, 87, 146, 147, 186, 187, 191, 196, 197, 198, 200, 201, 203, 205, 206, 207, 222, 227, 240, 254, 257, 259, 260, 262, 264, 269, 271, 272], "antihermitian": [18, 38, 60], "mathbb": [18, 20, 24, 38, 43, 51, 59, 60, 61, 66, 68, 85, 91, 96, 138, 194, 196, 197, 199, 200, 202, 204, 205, 208, 216, 217, 219, 222, 228, 229, 286], "ii": [18, 66, 85, 87, 100, 205, 209, 217, 225, 228], "cup": [18, 205, 217, 228], "pm": [18, 22, 24, 28, 59, 85, 87, 197, 208, 216, 222, 225], "yi": 18, "composit": [18, 38, 41, 49, 51, 52, 60, 61, 78, 80, 87, 100, 103, 200, 202, 205, 208, 221, 228, 243], "2k": [18, 60, 65, 85, 100, 222], "pariti": [18, 52, 205], "product": [18, 34, 45, 48, 51, 52, 56, 58, 59, 60, 61, 62, 64, 65, 68, 70, 73, 75, 76, 83, 85, 87, 89, 90, 91, 93, 96, 100, 101, 110, 111, 112, 114, 118, 126, 139, 141, 149, 153, 154, 157, 159, 160, 161, 163, 166, 168, 169, 171, 172, 174, 179, 180, 183, 184, 186, 191, 192, 193, 194, 196, 197, 198, 200, 202, 204, 205, 206, 209, 210, 211, 214, 217, 218, 221, 222, 225, 226, 227, 228, 229, 231, 233, 234, 235, 241, 244, 247, 254, 258, 271], "le": [18, 43, 56, 60, 68, 85, 91, 100, 133, 202, 219, 229], "commutative_properti": [18, 60], "skew": [18, 83, 100, 229], "hermitian_matrix": 18, "complex_numb": [18, 38, 60], "algebraic_numb": [18, 38, 60], "transcendental_numb": [18, 60], "extended_real_number_lin": 18, "real_numb": [18, 38], "imaginary_numb": [18, 38, 60], "rational_numb": [18, 38], "irrational_numb": [18, 38, 60], "parity_": [18, 60], "prime_numb": [18, 60, 100], "composite_numb": [18, 60], "positive_real_numb": 18, "negative_numb": [18, 60], "inconsist": [18, 20, 35, 37, 59, 179, 184, 188, 192, 221, 225, 228], "inconsistentassumpt": 18, "deal": [18, 42, 59, 60, 64, 72, 80, 85, 87, 107, 114, 119, 120, 124, 190, 192, 193, 197, 202, 205, 222, 227, 238, 248, 250, 258, 263, 278, 280, 286], "is_zero_matrix": [18, 91, 198], "generalis": [18, 68, 85, 196], "gaussian": [18, 68, 87, 96, 100, 144, 202, 205, 222, 227, 229, 271, 282], "notion": [18, 41, 179, 182, 196, 228, 258, 263], "chain": [18, 20, 42, 51, 56, 60, 68, 77, 101, 192, 204, 229], "superset": [18, 40, 49, 55, 63, 141, 199, 217, 227], "vanilla": 18, "attach": [18, 52, 54, 85, 101, 103, 118, 119, 135, 193, 241, 243, 248], "is_commut": [18, 87, 163, 172, 247], "is_complex": [18, 60], "is_finit": [18, 60], "permit": [18, 52, 62, 66, 90, 100, 195], "formal": [18, 24, 41, 59, 60, 68, 85, 90, 143, 179, 199, 202, 213, 216, 266], "littl": [18, 20, 41, 52, 70, 96, 100, 101, 126, 179, 203, 205, 209, 219, 221, 229, 244, 258], "n1": [18, 42, 51, 60, 61, 124, 141, 143, 147, 183, 222, 229, 254], "n2": [18, 42, 51, 60, 61, 141, 143, 147, 222, 229], "misunderstand": 18, "is_nonneg": [18, 20, 200], "intent": [18, 42, 59, 60, 102, 242], "meaning": [18, 35, 37, 41, 61], "alon": [18, 61, 88, 202, 225, 227, 234, 247, 280, 281], "tempt": [18, 20, 60, 100], "meet": [18, 61, 216], "criteria": [18, 60, 281], "noncommut": [18, 60, 83, 281], "finiteset": [18, 25, 40, 41, 217, 228, 229, 287], "s1": [18, 51, 59, 73, 76, 83, 110, 185, 196, 205, 212, 222, 247, 257], "s2": [18, 51, 52, 59, 73, 76, 110, 185, 196, 205, 212, 216, 222, 247, 257], "bool": [18, 40, 42, 56, 58, 60, 61, 63, 66, 87, 88, 90, 91, 93, 96, 100, 102, 119, 120, 158, 186, 189, 195, 204, 205, 207, 209, 210, 211, 216, 217, 221, 224, 229, 241, 242, 247, 248, 254, 257, 278], "plai": [18, 59, 126, 136, 222, 278, 280, 281], "role": [18, 66, 207], "connect": [18, 54, 61, 62, 75, 76, 96, 101, 103, 106, 115, 118, 126, 129, 135, 196, 197, 198, 207, 225, 229, 247, 254], "is_finite_set": 18, "zero_matrix": 18, "setsymbol": 18, "is_compar": [18, 60], "capitalis": 18, "4142135623731": [18, 27, 209, 227], "predict": [18, 174, 221, 247], "expreal": 18, "fuzzy_and": [18, 19, 20], "fuzzy_or": [18, 19], "is_extended_nonneg": 18, "classmethod": [18, 20, 34, 36, 37, 42, 44, 49, 51, 52, 54, 55, 60, 66, 67, 68, 75, 91, 96, 110, 160, 171, 172, 174, 198, 200, 204, 205, 209, 217, 235, 240], "is_extended_r": 18, "is_infinit": 18, "is_extended_neg": 18, "is_extended_posit": [18, 19], "_eval_is_finit": 18, "is_extended_nonposit": 18, "_eval_is_algebra": 18, "is_nonzero": [18, 75], "_eval_is_integ": 18, "_eval_is_zero": [18, 20], "__new__": [18, 20, 42, 51, 60, 281], "verifi": [18, 26, 28, 32, 40, 51, 57, 61, 62, 124, 196, 202, 208, 225, 227, 228, 230, 231, 286], "importantli": [18, 20, 206, 244], "reject": [18, 19, 100, 222, 250], "_eval_is_": 18, "is_algebra": [18, 60, 200], "interfer": [18, 209], "determinist": [18, 51, 87, 100, 202, 203], "reach": [18, 100, 110, 204, 205, 225], "claus": [18, 90], "flow": [18, 204], "inner": [18, 59, 85, 96, 157, 160, 161, 166, 168, 169, 172, 174, 184, 188, 198, 204, 211, 254, 271], "optimis": [18, 225], "stage": [18, 41, 59, 100, 216, 286], "briefli": [18, 197, 202], "managedproperti": [18, 60], "metaclass": [18, 60], "default_assumpt": 18, "_ask": 18, "_eval_i": 18, "enumer": [18, 31, 44, 49, 52, 55, 63, 67, 85, 90, 100, 204, 205, 219, 244, 247, 266], "randomis": [18, 237, 273], "unresolv": 18, "factrul": 18, "_assume_rul": 18, "preprocess": [18, 87, 207], "defined_fact": 18, "full_impl": 18, "defaultdict": [18, 60, 247], "precomput": [18, 65, 100, 248], "static": [18, 34, 42, 51, 52, 54, 60, 66, 73, 74, 75, 76, 93, 104, 126, 134, 195, 209, 215, 217, 229, 241], "knowabl": 18, "stdfactkb": 18, "_eval_is_r": [18, 20, 205], "_assumpt": [18, 60], "amongst": [18, 227], "indirectli": 18, "manifest": [18, 197], "jointli": 18, "fundament": [18, 20, 40, 43, 50, 78, 85, 87, 96, 179, 199, 204, 222, 225, 229, 282], "theoret": [18, 41, 43, 51, 61, 65, 203, 204, 219, 278], "isposit": 19, "xpo": 19, "xneg": 19, "strictgreaterthan": [19, 60, 209], "analogu": [19, 38, 59, 74, 199, 200], "piecewis": [19, 20, 42, 59, 65, 68, 87, 90, 103, 172, 209, 211, 212, 227, 228, 229, 248, 276], "nonetyp": [19, 42], "quirk": 19, "both_posit": 19, "falsei": 19, "both_positive_bett": 19, "negat": [19, 20, 38, 60, 66, 90, 110, 184, 198, 200, 202, 205], "fuzzy_not": [19, 20], "both_positive_best": 19, "silent": [19, 64, 100, 241], "carefulli": [19, 60, 184, 202, 211], "truth": [19, 35, 36, 37, 38, 39, 60, 91, 221], "bitwis": [19, 63, 90], "footnot": [19, 179, 281, 282, 285], "combinatori": [20, 44, 52, 59, 60, 67, 68, 205, 211, 221, 247, 249, 266, 286], "dig": [20, 42, 281], "handler": [20, 35, 36, 37, 38, 39, 60, 67, 96], "spectrum": 20, "matter": [20, 40, 49, 52, 59, 60, 65, 85, 87, 139, 216, 247, 280, 281], "use_unicod": [20, 26, 40, 41, 42, 64, 68, 87, 88, 96, 104, 110, 146, 189, 194, 196, 197, 208, 209, 210, 228, 229, 276, 280, 282, 285, 286, 287], "np": [20, 65, 83, 100, 124, 241, 248], "arang": [20, 241, 275], "arrai": [20, 22, 26, 27, 42, 51, 52, 56, 57, 61, 68, 87, 91, 93, 96, 100, 101, 108, 141, 171, 195, 198, 200, 205, 209, 228, 229, 232, 234, 235, 236, 241, 242, 244, 248, 269, 282], "ultim": [20, 66, 179], "cosin": [20, 60, 66, 68, 75, 87, 115, 118, 184, 193, 205, 206, 212, 218, 229, 254, 286], "todai": [20, 196], "operatornam": [20, 65, 66, 68, 85, 87, 194, 197, 205, 209, 212, 217, 219, 227], "modern": [20, 42, 196, 203, 209], "recal": [20, 60, 96, 202, 204, 219, 278, 280, 281, 287], "redefin": [20, 52, 60, 136, 138, 197, 248], "antipattern": [20, 279], "stai": [20, 204], "trig": [20, 60, 87, 205, 209, 218, 221, 286], "wouldn": 20, "cheap": [20, 60, 100], "as_two_term": [20, 60], "split": [20, 42, 60, 61, 64, 85, 87, 102, 202, 204, 207, 208, 209, 227, 229, 235, 240, 247, 252, 281, 286], "hadn": 20, "wors": [20, 90, 221], "expand_trig": [20, 60, 275], "mid": [20, 43, 61, 64, 104, 217, 222], "troubl": [20, 68], "bigger": [20, 42, 60, 65, 219, 225, 286], "deduc": [20, 42, 85, 90, 219, 280], "disallow": [20, 60, 205, 210, 221, 243], "great": [20, 143, 206, 209, 222, 248], "simplest": [20, 41, 90, 96, 100, 101, 194, 195, 206, 210, 218, 221, 225, 276, 286], "\u03c0": [20, 64, 146, 209, 228, 276, 280, 286, 287], "as_independ": [20, 60, 228], "coeff": [20, 60, 62, 90, 141, 200, 204, 205, 215, 221, 225, 227, 235, 286], "apart": [20, 34, 51, 56, 60, 64, 66, 87, 190, 197, 200, 202, 205, 208, 211, 222, 228, 235, 259, 261, 281], "is_even": [20, 48, 51, 52], "nonreal": [20, 27, 227], "cosh": [20, 60, 66, 68, 79, 85, 206, 209, 210, 219, 221, 227, 282, 286], "5919532755215": 20, "_eval_is_nonneg": 20, "exercis": [20, 51, 244, 279, 286], "_eval_is_posit": 20, "as_add": [20, 60], "pi_": 20, "fuzzy_": 20, "deduct": [20, 42], "subtl": [20, 218], "nontrivi": [20, 51, 60, 100], "_eval_evalf": [20, 205], "prec": [20, 27, 60, 70, 76, 100, 108, 194, 200, 205, 206, 221, 227], "dp": [20, 42, 60, 63, 68, 100, 199, 200, 227, 243], "53": [20, 61, 63, 96, 143, 197, 199, 200], "459697694131860": 20, "hook": [20, 101, 209], "_eval_rewrit": [20, 60], "rewritten": [20, 60, 65, 66, 68, 87, 124, 171, 216, 221, 225, 227, 286], "caller": 20, "ve": [20, 126], "nonintegr": 20, "iff": [20, 38, 52, 61, 90, 96, 193, 196, 204, 219, 222, 240], "isint": 20, "xy": [20, 40, 41, 74, 96, 121, 193, 195, 196, 202, 209, 221, 228, 264, 281, 286], "happi": 20, "demand": [20, 33], "_eval_expand_": 20, "expand_": 20, "predefin": [20, 62, 141, 199, 209, 210, 221, 228, 235, 254, 259], "expand_log": [20, 42, 60, 221], "_eval_expand_trig": 20, "sophist": [20, 101, 227], "th": [20, 34, 43, 51, 52, 58, 61, 62, 64, 65, 66, 68, 89, 90, 96, 100, 119, 200, 202, 204, 205, 211, 214, 219, 222, 225, 227, 229, 230, 235], "x_1": [20, 43, 50, 51, 61, 65, 82, 96, 169, 197, 200, 202, 205, 211, 222, 228], "ldot": [20, 24, 43, 50, 51, 59, 60, 61, 65, 68, 85, 100, 104, 179, 194, 196, 197, 200, 202, 204, 209, 212, 216, 219, 222, 227, 230, 286], "x_k": [20, 61, 202], "dy": [20, 42, 62, 77, 96, 103, 113, 141, 205, 209, 222, 225, 226, 276], "dz": [20, 103, 113, 219], "argumentindexerror": 20, "varion": 20, "middl": [20, 68, 76, 85, 96, 104, 154, 195, 219, 286], "iverson": 20, "printmethod": [20, 209], "latexprint": 20, "_latex": [20, 209], "_print": [20, 209], "_m": [20, 68], "_n": [20, 61, 65, 68, 87, 205, 219, 228], "arcversin": 20, "aversin": 20, "im": [20, 39, 60, 66, 85, 94, 196, 209, 210, 217, 225, 282], "sinh": [20, 40, 60, 64, 66, 68, 79, 85, 206, 209, 210, 219, 286], "expand_complex": [20, 60], "analog": [20, 26, 28, 53, 59, 61, 65, 139, 192, 193, 196, 197, 198, 202, 214, 230, 247], "vers": 20, "geometr": [20, 62, 69, 70, 71, 72, 73, 74, 75, 76, 77, 96, 143, 193, 196, 203, 229, 282], "angl": [20, 34, 66, 68, 69, 70, 71, 73, 74, 75, 76, 106, 112, 118, 123, 124, 126, 127, 128, 129, 135, 138, 143, 146, 147, 148, 171, 179, 184, 192, 193, 194, 209, 218, 228, 254, 256, 259, 286], "horizont": [20, 30, 41, 70, 73, 75, 91, 106, 146, 195, 198, 209], "distanc": [20, 41, 44, 52, 70, 73, 74, 75, 76, 103, 104, 113, 114, 118, 128, 129, 143, 147, 177, 188, 190, 263], "rightmost": [20, 174], "scientificamerican": 20, "uniti": [20, 66, 68, 85, 169, 204], "secret": [20, 61], "teacher": 20, "taught": [20, 87], "nr": 20, "sake": [20, 65, 222], "simplic": [20, 219, 225], "divisor": [20, 38, 51, 60, 61, 96, 100, 196, 197, 199, 200, 202, 203, 204, 205, 208], "hardwar": [20, 42], "regard": [20, 43, 61, 68, 88, 142, 174, 196, 197, 211, 227, 228], "c99codeprint": [20, 42, 209], "cxx11codeprint": [20, 209], "cfunction": 20, "e2": [20, 40, 60, 63, 70, 77, 87, 96, 100, 108, 124, 199, 204, 216, 225, 228, 229, 247], "93accumulate_oper": 20, "fused_multipli": 20, "93add": 20, "ccode": [20, 42, 209, 234, 242], "cxxcode": [20, 42, 209], "_ccode": [20, 209], "_y": [20, 23, 135, 139, 189, 192, 193], "_z": [20, 87, 135, 139, 192, 193, 229], "_cxxcode": [20, 209], "std": [20, 209, 229], "28318530717959": 20, "trigonometricfunct": 20, "inversetrigonometricfunct": 20, "reciprocaltrigonometricfunct": 20, "bypass": [20, 225], "fragil": 20, "tend": [20, 33, 42, 60, 65, 202, 204, 214, 216, 219, 279, 286], "prone": [20, 24, 42, 60], "move": [20, 51, 52, 60, 61, 74, 76, 103, 118, 126, 128, 134, 162, 188, 192, 193, 221, 230, 239, 261], "task": [21, 22, 31, 66, 134, 135, 141, 199, 204, 276, 283], "deeper": [21, 233, 281], "explor": [21, 136, 137, 195, 204, 244, 286], "diophantin": [22, 100, 202, 223, 266], "2z": [22, 29, 68, 228, 229], "4z": [22, 29, 228], "6z": [22, 29], "739085133215161": [22, 27, 29, 30, 227], "9y": 22, "3x": [22, 60, 102, 202, 228, 278], "ax": [22, 24, 26, 28, 34, 61, 64, 70, 73, 85, 92, 96, 103, 108, 118, 146, 171, 184, 193, 194, 195, 198, 206, 222, 225, 228, 230, 231, 234, 254, 256, 258, 261, 263, 286], "bx": [22, 28, 85, 229, 235], "4ac": [22, 28, 222], "2a": [22, 28, 229], "cc": [22, 26, 61, 76, 194, 197, 199, 205, 282], "2e": [22, 26, 60], "ce": [22, 26], "2pq": [22, 24], "yield": [23, 24, 25, 26, 28, 29, 40, 42, 51, 60, 61, 65, 68, 84, 85, 100, 103, 110, 116, 168, 194, 197, 202, 204, 205, 210, 211, 216, 217, 218, 221, 222, 227, 244, 247, 282], "linprog": 23, "as_set": [23, 90], "accomplish": [23, 87, 138, 141, 261], "exclud": [23, 30, 42, 59, 60, 87, 96, 116, 141, 197, 200, 202, 205, 215, 225, 227, 240, 243, 247], "rel_op": [23, 60], "relations_sort": 23, "append": [23, 51, 60, 61, 96, 104, 141, 169, 195, 200, 209, 227, 230, 242, 243, 247, 286], "x_y_reduc": 23, "insight": [23, 279], "x_reduc": 23, "y_reduc": 23, "solve_univariate_inequ": [23, 224, 228], "interv": [23, 25, 28, 38, 40, 51, 60, 64, 66, 68, 69, 70, 73, 76, 85, 87, 90, 100, 160, 169, 200, 202, 204, 205, 212, 215, 217, 224, 228, 229, 287], "calculu": [23, 25, 60, 65, 87, 96, 141, 190, 218, 229, 260, 261, 262, 265, 266, 277, 279, 284], "reflect": [23, 30, 44, 48, 52, 60, 70, 71, 76, 89, 106, 143, 146, 147, 184], "parameter": [24, 62, 69, 70, 73, 76, 222], "pythagorean": [24, 222], "sage": [24, 60, 100, 194, 280], "ellipticcurv": 24, "loop": [24, 28, 41, 42, 100, 110, 127, 184, 195, 206, 209, 225, 244, 247, 281], "ineffici": [24, 60, 96, 199], "reveal": [24, 26, 28, 42, 100, 228, 281], "my_sym": 24, "pythag_eq": 24, "sym": [24, 40, 50, 51, 56, 60, 65, 184, 209, 212, 217, 221, 222, 227, 229, 235, 247, 286], "pythag": 24, "five": [24, 28, 41, 49, 85, 106, 209, 222], "a_1x_1": [24, 222], "a_2x_2": [24, 222], "a_nx_n": [24, 222], "quadrat": [24, 28, 60, 61, 87, 100, 196, 200, 204, 205, 222, 227, 229], "bxy": [24, 222], "cy": [24, 222], "ei": [24, 68, 85, 204, 209, 219, 222, 225, 235], "homogen": [24, 83, 87, 96, 110, 200, 202, 205, 222, 225, 226, 229], "ternari": [24, 42, 60, 209, 222], "cz": [24, 63, 222], "dxy": [24, 222], "eyz": [24, 222], "fzx": [24, 222], "a_": [24, 56, 60, 61, 68, 85, 89, 91, 93, 110, 111, 139, 211, 219, 222, 225, 227, 229, 230], "pythogorean": 24, "subscript": [24, 26, 52, 200, 209, 219, 222, 247], "solution_dict": 24, "zip": [24, 40, 50, 61, 90, 100, 205, 215, 222, 225, 244, 247], "elegantli": 24, "forget": [24, 41, 286], "solution_list": [24, 25], "solution_first": 24, "solution_p4q3": 24, "p_val": 24, "q_val": 24, "pythag_v": 24, "union": [24, 33, 38, 40, 42, 49, 51, 58, 90, 102, 196, 204, 209, 215, 216, 217, 224, 228, 229, 247], "4y": [24, 202, 228, 275], "rearrang": [25, 111, 119, 136, 137, 158, 225], "eqn": [25, 40, 228], "solutions_set": 25, "solution_set": 25, "256": [25, 42, 51, 100, 205, 209], "techniqu": [25, 26, 28, 43, 55, 85, 87, 209, 211, 221, 225, 228, 282], "solution_outside_2_3": 25, "critic": [25, 40, 147, 192, 204, 228], "minima": [25, 228], "critical_point": 25, "point1": [25, 185, 257], "point2": [25, 185, 257], "curvatur": [25, 143, 147], "membership": [25, 58, 204, 217], "candid": [25, 51, 60, 96, 100, 202, 221], "solution_set_arg": 25, "linalg": [26, 27, 42], "lu_solv": [26, 96, 198], "linear_eq_to_matrix": [26, 225, 228], "matrixbas": [26, 91, 92, 93, 96, 198], "column": [26, 38, 41, 42, 43, 88, 90, 91, 93, 96, 97, 99, 110, 119, 123, 126, 139, 169, 176, 184, 189, 194, 198, 204, 209, 225, 228, 234, 254], "row": [26, 38, 41, 42, 43, 49, 52, 60, 65, 91, 92, 93, 96, 97, 99, 100, 110, 123, 124, 126, 139, 141, 142, 169, 184, 193, 198, 204, 209, 219, 228, 229, 234, 248, 254, 256], "shapeerror": [26, 91, 93, 96], "penros": [26, 93, 96], "pseudoinvers": [26, 96], "lu": [26, 93, 96, 198, 203], "lusolv": [26, 92, 96, 118, 120, 138, 142, 227, 282], "repeatedli": [26, 100, 111, 241], "b2": [26, 68, 100, 103, 104, 115, 124, 141, 184, 198, 200, 209, 219, 222, 225, 260], "solution2": 26, "almost": [26, 85, 94, 102, 176, 195, 196, 200, 205, 206, 225, 229, 243, 244, 247, 280], "prioriti": [26, 42, 83, 114, 124, 193, 248], "computation": [26, 56, 66, 118, 119, 120], "tractabl": [26, 228], "rapidli": [26, 60, 64, 85, 216], "dimens": [26, 42, 44, 61, 62, 68, 69, 71, 73, 74, 75, 77, 89, 91, 93, 96, 99, 103, 111, 128, 148, 158, 160, 163, 168, 177, 178, 181, 182, 184, 195, 198, 209, 222, 225, 227, 229, 230, 234, 235, 242, 254, 257, 259, 271], "4x4": [26, 75, 99, 146, 229], "a\u2080\u2080": 26, "a\u2080\u2081": 26, "a\u2080\u2082": 26, "a\u2080\u2083": 26, "a\u2081\u2080": 26, "a\u2081\u2081": 26, "a\u2081\u2082": 26, "a\u2081\u2083": 26, "a\u2082\u2080": 26, "a\u2082\u2081": 26, "a\u2082\u2082": 26, "a\u2082\u2083": 26, "a\u2083\u2080": 26, "a\u2083\u2081": 26, "a\u2083\u2082": 26, "a\u2083\u2083": 26, "det": [26, 34, 96, 97, 141, 193, 198, 282], "a\u2081": [26, 104, 286], "\u2083": [26, 209], "slowest": [26, 87, 101], "symmetr": [26, 38, 39, 43, 48, 51, 52, 56, 76, 91, 92, 93, 96, 100, 183, 194, 200, 202, 205, 208, 217, 219, 235, 247], "triangular": [26, 38, 91, 92, 96, 198, 204, 227, 229, 264], "prove": [26, 60, 85, 87, 96, 196, 216, 225, 260], "noninvertiblematrixerror": [26, 93, 282], "overli": 27, "float64": [27, 42, 101, 229], "fsolv": 27, "findroot": [27, 68, 227], "overdetermin": [27, 227, 228], "toler": [27, 42, 60, 64, 200, 221, 227], "18466446988997098217": 27, "16840434497100886801e": 27, "tweak": [27, 209, 227], "closest": [27, 60, 73], "closer": [27, 126, 228, 281], "00000000000000": [27, 60, 64, 175, 209, 229], "bisect": [27, 100, 205, 227], "multidimension": [27, 203, 240], "19287309935246": [27, 227], "27844411169911": [27, 227], "192873099352460791205211": 27, "278444111699106966687122": 27, "root_scalar": 27, "lam_f": [27, 248], "3416277185114782": 27, "slightli": [27, 33, 42, 56, 100, 102, 126, 195, 196, 200, 202, 205, 209, 219, 221], "x_valu": 27, "12757857962640e": 27, "73908513321516": 27, "4877893607115270300540019e": 27, "6543612251060553497428174e": 27, "convei": 28, "rootof": [28, 66, 205], "ill": [28, 177], "spuriou": [28, 202, 227], "irreduc": [28, 197, 200, 202, 204, 205, 208, 229, 235, 286], "lie": [28, 52, 62, 74, 75, 76, 205, 229, 265, 272], "cubic": [28, 68, 196, 205, 222, 227], "quartic": [28, 70, 205, 227], "fourth": [28, 60, 61, 197, 225, 276], "687": 28, "144": [28, 30, 65, 87, 194], "emphas": [28, 59], "quintic": [28, 205, 227], "fifth": 28, "abel": [28, 30, 96], "ruffini": [28, 30, 96], "theorem": [28, 30, 48, 61, 68, 70, 76, 87, 91, 96, 100, 113, 114, 126, 174, 183, 192, 196, 199, 202, 216, 219, 222, 228], "expression_expand": 28, "symbolic_expand": 28, "cube": [28, 40, 42, 44, 51, 53, 66, 87, 202, 203, 222, 228, 264], "nois": 28, "neglig": 28, "compon": [28, 41, 42, 56, 60, 62, 75, 87, 93, 96, 111, 118, 121, 134, 135, 139, 146, 171, 176, 183, 184, 190, 191, 192, 193, 194, 195, 196, 197, 198, 205, 207, 229, 231, 234, 235, 244, 247, 254, 257, 260, 261], "18482169793536e": 28, "55872552179222e": 28, "contrarili": 28, "rq0": 28, "rq1": 28, "rq2": 28, "rq3": 28, "237": [28, 203], "36": [28, 54, 61, 65, 76, 87, 91, 96, 100, 104, 205, 209, 222, 225, 229, 264], "349745826211722": 28, "438990337475312": 28, "wilkinson": [28, 91], "expression_complex": 28, "symbolic_complex": 28, "expression_complex_poli": 28, "travers": [28, 76, 100, 116, 205, 218, 234, 244, 281], "my_real_root": 28, "my_root": 28, "324": [28, 100, 203], "fifth_ord": 28, "16730397826142": 28, "181232444469875": 28, "08395410131771": 28, "764884433600585": 28, "352471546031726": 28, "polyerror": [28, 202, 205], "unsolvablefactorerror": [28, 205, 227], "complexrootof": [28, 60, 96, 200, 205, 225], "fifth_order_solv": 28, "167303978": 28, "1812324445": 28, "083954101": 28, "7648844336": 28, "352471546": 28, "sole": 28, "croot": 28, "r0": [28, 205], "r1": [28, 34, 70, 73, 89, 103, 104, 147, 184, 190, 205, 254], "r2": [28, 34, 62, 73, 89, 91, 103, 104, 147, 184, 205, 209, 221, 254], "r3": [28, 36, 89, 103, 104, 221], "r4": [28, 36, 89, 103], "opposit": [28, 56, 76, 90, 91, 115, 197, 200, 217, 221, 228, 236, 247, 254, 256, 286], "robustli": 28, "interrog": 29, "overconstrain": 29, "solvabl": [30, 51, 106, 222, 225, 228, 287], "groebnerbasi": [30, 197, 205, 208], "lambert": [30, 66, 87, 206], "decompos": [30, 51, 52, 58, 60, 62, 66, 71, 96, 100, 158, 167, 168, 170, 200, 205, 208, 229], "lack": [30, 42, 62, 64, 121, 209, 276], "crootof": [30, 60, 205, 225, 227], "765": 30, "352": 30, "181": 30, "08": [30, 126], "total": [30, 43, 49, 51, 60, 65, 76, 89, 90, 91, 93, 126, 128, 136, 143, 147, 153, 158, 171, 180, 194, 200, 202, 205, 218, 221, 225, 233, 235, 264], "scroll": 30, "56": [30, 63, 87, 100, 205], "1307": 30, "432": [30, 73, 204], "434607": 30, "0509758447494279": 30, "313552108895239": 30, "14751999969868": 30, "estim": [30, 40, 59, 60, 64, 85, 276], "preserv": [30, 41, 42, 51, 60, 96, 172, 200, 205, 210, 211, 221], "77245385090552": 30, "4142135623730951": 30, "varieti": [30, 42, 43, 52, 60, 101, 104, 139, 196, 203, 205, 229, 247], "risk": 30, "parse_latex": [30, 102], "central": [31, 51, 57, 68, 70, 76, 115, 121, 139, 195, 204, 205, 222, 229], "pypi": 32, "continuum": [32, 271], "qtconsol": [32, 285], "nicer": [32, 60, 132], "setupegg": 32, "enthought": 32, "canopi": 32, "activepython": 32, "spack": 32, "freshli": 32, "starter": 32, "sy": [32, 42, 62, 124, 141, 209, 240, 251, 260, 278], "wherev": [32, 124, 221, 228, 258], "visit": [32, 44, 51, 60, 65, 283], "chat": 32, "gitter": [32, 282], "excel": [32, 64, 204, 284], "ticket": 32, "export": [33, 209], "latin": 33, "clunki": 33, "collid": [33, 235], "win": 33, "throwawai": 33, "surviv": 33, "foo": [33, 40, 42, 60, 169, 189, 247, 250], "report": [33, 40, 51, 60, 73, 91, 100, 206, 217, 228, 240, 282, 287], "stick": 33, "_clash1": [33, 60], "_clash2": [33, 60], "multi": [33, 60, 61, 125, 134, 141, 154, 158, 168, 195, 209, 228, 271], "_clash": [33, 60], "sympif": [33, 60], "real_field": 34, "instanti": [34, 41, 42, 52, 60, 68, 73, 75, 76, 93, 96, 164, 172, 184, 195, 196, 200, 204, 229, 254, 258], "q1": [34, 96, 103, 114, 124, 126, 127, 128, 129, 131, 132, 133, 136, 137, 138, 142, 183, 184, 186, 188, 189, 192, 193, 199, 254, 256], "q2": [34, 103, 114, 124, 126, 127, 128, 129, 131, 132, 133, 136, 137, 142, 183, 184, 186, 188, 189, 192, 193, 199, 254, 256], "euclideanspac": 34, "realnormedalgebra": 34, "q3": [34, 114, 126, 127, 129, 131, 132, 133, 136, 184, 186, 188, 193, 254, 256], "bi": [34, 60, 66, 68, 87, 193, 216, 225], "cj": 34, "dk": [34, 103, 204], "atan2": [34, 39, 62, 66, 148, 209, 254], "atan": [34, 39, 62, 64, 66, 71, 76, 84, 87, 128, 142, 143, 206, 209, 211], "arc_coplanar": 34, "arc": [34, 66, 286], "coplanar": [34, 74, 193], "parallel": [34, 70, 73, 74, 76, 87, 107, 110, 113, 192, 193, 202, 260, 264], "vector_coplanar": 34, "is_pur": 34, "mathbf": [34, 93, 119, 134, 136, 137, 139, 179, 183, 184, 189, 190, 192, 193, 209, 219, 230, 258, 259, 261, 263, 264], "versor": 34, "0i": 34, "0j": [34, 199], "0k": 34, "vector_part": 34, "from_axis_angl": 34, "radian": [34, 66, 69, 70, 71, 73, 74, 75, 96, 108, 124, 147, 148, 184], "from_rotation_matrix": 34, "orthogon": [34, 38, 75, 89, 96, 172, 184, 193, 254, 256], "index_vector": 34, "mod": [34, 61, 66, 90, 96, 97, 100, 170, 196, 198, 199, 200, 202, 204, 205, 209, 211, 219, 222], "magnitud": [34, 42, 59, 60, 64, 68, 101, 103, 104, 106, 108, 128, 141, 172, 181, 184, 190, 193, 195, 254, 261, 263], "norm": [34, 96, 172, 184, 200, 202, 204, 205], "scalar_part": 34, "is_zero_quaternion": 34, "mensor": 34, "60": [34, 46, 51, 53, 59, 60, 65, 68, 87, 96, 100, 103, 104, 208, 209, 222, 225, 247], "pth": 34, "668": 34, "224": [34, 177, 203], "336": 34, "448": 34, "pow_cos_sin": 34, "900": 34, "1800": [34, 61], "2700": [34, 103], "3600": [34, 65], "rotate_point": 34, "coordin": [34, 42, 61, 62, 66, 68, 69, 71, 75, 77, 93, 96, 103, 106, 108, 112, 118, 119, 120, 123, 124, 125, 126, 127, 129, 131, 134, 135, 136, 137, 140, 142, 150, 152, 171, 172, 175, 183, 184, 185, 186, 188, 190, 193, 196, 204, 205, 217, 225, 254, 256, 257, 260, 262, 264, 269, 271], "to_axis_angl": 34, "to_rotation_matrix": 34, "assumptionkei": 35, "proposit": [35, 37, 90], "is_tru": [35, 37, 38], "assumptionscontext": [35, 36, 37], "global_assumpt": [35, 36, 37], "discern": [35, 37], "refin": [35, 37, 60, 91, 196, 200, 204, 205, 221, 242, 266], "progress": [35, 37, 100, 242], "inherit": [35, 60, 67, 90, 93, 94, 118, 163, 172, 194, 209, 229, 234, 242, 243], "askhandl": 35, "mere": [36, 37, 42, 64, 169], "thin": [36, 96, 130, 143], "undefinedpred": [36, 37], "sexi": [36, 37], "sexyprimepred": [36, 37], "sexyprim": [36, 37], "int1": [36, 37], "int2": [36, 37], "assump": [36, 37], "predicate_": [36, 37], "mathematical_log": [36, 37], "sexy_prim": [36, 37], "resolut": [36, 37, 222], "askpredicatehandl": [36, 37], "r5": [37, 221], "r6": 37, "notabl": [37, 42, 63, 68, 85, 101, 199], "truth_maintenance_system": 37, "istruepred": 38, "gt": [38, 42, 60, 229, 247], "istruehandl": 38, "commutativepred": 38, "commutativehandl": 38, "finitepred": 38, "nor": [38, 40, 60, 90, 100, 148, 195, 205, 216, 218, 225, 235, 254], "nan": [38, 39, 60, 66, 68, 116, 221, 229, 276], "finitehandl": 38, "r7": 38, "infinitepred": 38, "infinitehandl": 38, "symmetricpred": 38, "transpos": [38, 41, 91, 93, 96, 110, 141, 157, 184, 193, 198, 204, 222, 230, 235, 236, 282], "diagon": [38, 65, 91, 92, 93, 96, 99, 123, 146, 198, 231], "symmetrichandl": 38, "r8": 38, "symmetric_matrix": 38, "invertiblepred": 38, "fullrank": [38, 42], "invertiblehandl": 38, "r9": 38, "invertible_matrix": 38, "orthogonalpred": 38, "tm": [38, 147], "mm": [38, 41, 100, 119, 126, 131, 132, 172, 198], "orthogonalhandl": 38, "r10": 38, "orthogonal_matrix": 38, "unitarypred": 38, "unitari": [38, 87, 100, 158, 163, 194], "unitaryhandl": 38, "r11": 38, "unitary_matrix": 38, "positivedefinitepred": 38, "tmz": 38, "positive_definit": 38, "positivedefinitehandl": 38, "r12": 38, "definite_matrix": 38, "uppertriangularpred": 38, "m_": [38, 137, 194, 202], "ij": [38, 174, 179, 194, 229], "zeromatrix": [38, 93], "upper_triangular": [38, 91], "uppertriangularhandl": 38, "r13": 38, "uppertriangularmatrix": 38, "lowertriangularpred": 38, "lower_triangular": [38, 91], "lowertriangularhandl": 38, "r14": 38, "lowertriangularmatrix": 38, "diagonalpred": 38, "diagonalhandl": 38, "r15": 38, "diagonal_matrix": 38, "fullrankpred": 38, "rank": [38, 42, 43, 44, 49, 51, 52, 54, 55, 56, 75, 89, 96, 97, 184, 186, 196, 198, 200, 202, 204, 230, 234, 235, 282], "linearli": [38, 42, 68, 84, 96, 202, 225, 227, 235], "fullrankhandl": 38, "squarepred": 38, "squarehandl": 38, "r16": 38, "square_matrix": 38, "integerelementspred": 38, "integer_el": 38, "integerelementshandl": 38, "realelementspred": 38, "real_el": 38, "realelementshandl": 38, "complexelementspred": 38, "complex_el": 38, "complexelementshandl": 38, "singularpred": 38, "singular": [38, 42, 52, 60, 64, 66, 67, 68, 82, 83, 85, 87, 96, 103, 105, 138, 184, 196, 203, 216, 225, 228, 254, 271, 276], "singularhandl": 38, "fore": 38, "r17": 38, "singularmatrix": 38, "normalpred": 38, "normalhandl": 38, "r18": 38, "normal_matrix": 38, "triangularpred": 38, "triangularhandl": 38, "r19": 38, "triangular_matrix": 38, "unittriangularpred": 38, "unit_triangular": 38, "unittriangularhandl": 38, "evenpred": 38, "evenhandl": 38, "oddpred": 38, "oddhandl": 38, "primehandl": 38, "subject": [38, 70, 76, 104, 114, 142, 204], "compositepred": 38, "compositehandl": 38, "positivepred": 38, "positivehandl": 38, "negativepred": 38, "negativehandl": 38, "zeropred": 38, "zerohandl": 38, "nonzeropred": 38, "nonzerohandl": 38, "nonpositivepred": 38, "nonpositivehandl": 38, "nonnegativepred": 38, "nonnegativehandl": 38, "integerpred": 38, "integerhandl": 38, "r20": 38, "rationalpred": 38, "rationalhandl": 38, "r21": 38, "irrationalpred": 38, "ratio": [38, 50, 51, 59, 60, 64, 65, 68, 70, 73, 74, 75, 76, 92, 100, 110, 147, 179, 209, 218, 221, 227], "irrationalhandl": 38, "r22": 38, "realpred": 38, "disjoint": [38, 41, 49, 52, 205, 217, 247], "realhandl": 38, "r23": 38, "extendedrealpred": 38, "extendedrealhandl": 38, "hermitianpred": 38, "hermitianhandl": 38, "r24": 38, "hermitianoper": [38, 163], "complexpred": 38, "complexhandl": 38, "r25": 38, "imaginarypred": 38, "imaginaryhandl": 38, "r26": 38, "antihermitianpred": 38, "antihermitianhandl": 38, "r27": 38, "algebraicpred": 38, "askalgebraicpredicatehandl": 38, "r28": 38, "algebraichandl": 38, "transcendentalpred": 38, "transcedent": 38, "refine_pow": 39, "refine_ab": 39, "refine_arg": 39, "refine_atan2": 39, "refine_im": 39, "refine_matrixel": 39, "refine_r": 39, "refine_sign": 39, "lagrang": [40, 60, 117, 118, 130, 134, 205, 222, 271], "lagrangian": [40, 119, 121, 128, 133, 137, 138], "euler_equ": 40, "r29": 40, "93lagrange_equ": 40, "decreas": [40, 42, 52, 202], "monoton": [40, 42, 77], "is_decreas": 40, "lopen": [40, 60, 217, 224, 229], "ropen": [40, 66, 217, 229], "is_increas": 40, "72": [40, 60, 73, 96, 100, 103, 194, 208], "is_monoton": 40, "is_strictly_decreas": 40, "is_strictly_increas": 40, "monotonicity_help": 40, "held": [40, 61, 138, 233, 286], "r30": 40, "mathematical_singular": 40, "interpol": [40, 65, 69, 141, 202, 205], "finite_diff_weight": [40, 60, 276], "apply_finite_diff": [40, 60, 276], "differentiate_finit": [40, 60, 276], "finite_diff": [40, 60], "x_list": [40, 276], "y_list": [40, 276], "xlist": 40, "55271367880050e": 40, "indexedbas": [40, 42, 59, 60, 209, 227, 233, 234, 241], "idx": [40, 42, 209, 233, 234, 241], "region": [40, 68, 77, 87, 195, 217, 225, 228, 229, 254, 257, 264], "bewar": [40, 68], "phenomenon": [40, 179, 202, 212, 281], "90": [40, 51, 58, 68, 91, 96, 102, 103, 106, 114, 124, 142, 209, 211, 221, 229, 242], "finitediff": 40, "wrt": [40, 42, 60, 62, 68, 77, 96, 124, 141, 184, 185, 202, 205, 254, 256, 257, 261], "len": [40, 48, 49, 50, 51, 52, 56, 58, 60, 61, 65, 68, 75, 85, 90, 128, 143, 147, 158, 168, 205, 221, 225, 234, 247], "nearest": [40, 204], "furthest": [40, 61], "sublist": [40, 56, 61, 87, 171, 276], "fd": [40, 42, 174], "0th": [40, 52, 61, 68], "1st": [40, 52, 100, 110, 225, 226, 250, 276], "classic": [40, 66, 68, 96, 160, 176, 184, 193, 196, 271], "forward": [40, 42, 91, 110, 126, 134, 167, 192, 221, 240], "pai": 40, "attent": [40, 51, 66], "gridpoint": 40, "plan": [40, 114, 200, 285], "mycoeff": 40, "3rd": [40, 52, 66, 100, 141, 205, 227, 230, 247], "2nd": [40, 52, 61, 100, 110, 141, 225, 230, 247], "cost": [40, 42, 100, 128, 228, 280], "poorer": 40, "grand": 40, "r31": 40, "51": [40, 96, 100], "184": [40, 225], "1988": [40, 153, 171, 202, 203], "699": 40, "706": [40, 96], "1090": [40, 205], "s0025": [40, 100], "5718": [40, 100], "0935077": 40, "continuous_domain": [40, 224], "tan": [40, 60, 65, 66, 87, 102, 116, 131, 132, 133, 138, 206, 208, 209, 216, 218, 225, 228, 286], "function_rang": 40, "is_convex": [40, 76], "convex": [40, 76, 77, 87], "unspecifi": [40, 60, 75, 276], "multivari": [40, 60, 68, 196, 197, 199, 200, 201, 203, 205, 206, 216, 221, 227, 228, 229, 286], "concav": [40, 143], "r32": 40, "convex_funct": 40, "r33": 40, "ifp": 40, "illinoi": 40, "edu": [40, 44, 51, 52, 61, 63, 65, 87, 96, 100, 203, 208, 218, 222, 225, 229, 254], "angelia": 40, "l3_convfunc": 40, "r34": 40, "logarithmically_convex_funct": 40, "r35": 40, "logarithmically_concave_funct": 40, "r36": 40, "concave_funct": 40, "lcim": 40, "mixtur": [40, 42, 77, 196, 242], "incommensur": 40, "not_empty_in": [40, 228], "finset_intersect": 40, "finite_set": [40, 217], "tracker": [40, 217, 228, 282], "aperiod": 40, "smallest": [40, 54, 66, 73, 75, 82, 90, 96, 100, 171, 184, 200, 245, 247], "verif": [40, 198, 227], "reliabl": [40, 60, 225, 245, 276], "henc": [40, 42, 50, 51, 60, 62, 66, 68, 72, 85, 88, 90, 100, 106, 190, 195, 196, 197, 202, 209, 219, 222, 226, 228, 240, 244, 259, 260, 261, 281, 286], "stationary_point": 40, "stationari": [40, 229], "tikz": 41, "joyofcat": 41, "adamek": 41, "herrlich": 41, "strecker": 41, "joi": 41, "cat": [41, 183], "book": [41, 51, 61, 66, 119, 124, 127, 135, 139, 140, 159, 203, 208, 209, 279], "katmat": 41, "uni": [41, 87, 247], "bremen": 41, "de": [41, 61, 65, 100, 179, 194, 195, 206, 211, 222, 225, 247], "acc": [41, 141, 188, 192], "embryon": 41, "morphism": [41, 196], "codomain": [41, 196, 204], "arrow": [41, 89, 103, 195, 209], "namedmorph": 41, "prohibit": [41, 52, 53, 184], "identitymorph": 41, "compositemorph": 41, "compos": [41, 60, 61, 128, 138, 176, 178, 179, 192, 196, 200, 204, 205, 206, 209, 211, 221], "circ": [41, 60, 71, 77, 85, 93], "new_nam": 41, "id_a": 41, "id_b": 41, "commutative_diagram": 41, "quadrupl": [41, 205], "mbox": 41, "hom": 41, "id": [41, 56, 66], "rightarrow": [41, 52, 56, 61, 65, 66, 68, 82, 83, 85, 87, 90, 91, 100, 195, 204, 216, 228, 247, 276], "monoid": 41, "pare1970": 41, "accompani": 41, "premis": 41, "conclus": [41, 60], "carri": [41, 42, 60, 166, 172, 179, 196, 199, 202, 204, 206, 207, 248], "premises_kei": 41, "et": [41, 87, 153, 202, 205, 206, 218, 221], "pareigi": 41, "functor": 41, "1970": [41, 96], "is_subdiagram": 41, "subdiagram": 41, "d1": [41, 56, 184, 196, 216, 229, 254], "subdiagram_from_object": 41, "veryuniqu": 41, "diagram_draw": 41, "diagramgrid": 41, "analys": [41, 108, 110, 141, 229], "drawn": [41, 51, 89, 195, 199, 207], "moprhism": 41, "strive": 41, "nevertheless": 41, "laid": [41, 124, 171], "width": [41, 42, 88, 189, 195, 205, 209, 240], "height": [41, 42, 76, 93, 143, 195, 196, 209, 216, 264], "emploi": [41, 59, 64, 87, 100, 205, 208, 225, 229], "lai": 41, "layout": 41, "sequenti": [41, 44, 61, 66, 254, 256], "test_draw": 41, "lemma": [41, 51, 85, 197], "fivelemma": 41, "five_lemma": 41, "arrowstringdescript": 41, "curving_amount": 41, "looping_start": 41, "looping_end": 41, "horizontal_direct": 41, "vertical_direct": 41, "label_posit": 41, "pic": 41, "princip": [41, 61, 66, 68, 85, 87, 97, 112, 126, 147, 196, 197, 198, 199, 200, 202, 204, 205, 206], "offset": [41, 42, 60, 65, 68, 234], "cell": 41, "vertic": [41, 44, 53, 54, 70, 71, 73, 75, 76, 77, 87, 89, 91, 96, 104, 123, 129, 146, 154, 194, 195, 198, 204, 209, 217, 247, 264], "disregard": 41, "unexplain": 41, "astr": 41, "dr": [41, 62, 209, 225], "12mm": 41, "correspondingli": 41, "label_displac": 41, "arrow_styl": 41, "dash": 41, "xypicdiagramdraw": 41, "formatt": 41, "utilis": 41, "xypic": 41, "drawer": 41, "xymatrix": 41, "ld": 41, "arrow_formatt": 41, "therebi": 41, "default_arrow_formatt": 41, "farther": 41, "centr": [41, 57, 195], "default_formatt": 41, "45": [41, 60, 65, 76, 96, 100, 106, 205, 206, 222], "_3mm": 41, "default_curving_amount": 41, "cm": [41, 141, 229], "_1cm": 41, "default_curving_step": 41, "h1": [41, 121], "1cm": 41, "rr": [41, 60, 78, 198, 199, 205, 206], "h_": [41, 51, 56, 65, 68, 87], "_2cm": 41, "mask": [41, 209], "diagram_format": 41, "proceed": [41, 43, 85, 87, 140, 203, 219], "xypic_draw_diagram": 41, "shortcut": [41, 60, 92, 193, 209, 217, 221, 286], "insert": [41, 43, 91, 102, 103, 169, 174, 209, 229, 250], "preview_diagram": 41, "png": [41, 88, 96, 103, 104, 108, 189, 195, 209, 212], "brief": [42, 228, 240, 263], "fab": [42, 209], "cse_main": [42, 210, 221], "cse": [42, 101, 114, 163, 210, 221, 242, 248], "meat": 42, "lightweight": [42, 204, 280], "pycod": [42, 209], "lambdarepr": [42, 209, 248], "aesara_funct": [42, 101, 209], "float80": [42, 209], "assign_to": [42, 209], "type_alias": [42, 209], "0l": [42, 209], "powl": [42, 209], "c99": [42, 209, 242], "expm1": [42, 209], "thrown": [42, 209], "fcode": [42, 209], "contract": [42, 62, 111, 174, 209, 218, 231, 233, 234, 235, 236], "len_i": [42, 209], "mat_1": 42, "mat_2": 42, "jscode": [42, 209], "user_funct": [42, 209], "argument_test": [42, 209], "cfunction_str": [42, 209], "octav": [42, 141, 242], "custom_funct": [42, 209], "existing_octave_fcn": [42, 209], "is_matrix": [42, 209], "my_mat_fcn": [42, 209], "my_fcn": [42, 209], "mat": [42, 93, 143, 168, 209], "octave_cod": [42, 209], "summat": [42, 59, 60, 64, 65, 68, 174, 203, 205, 209, 212, 221, 229, 230, 233, 234, 235, 241], "mathematica_cod": [42, 209], "g1": [42, 45, 50, 51, 85, 96, 110], "g2": [42, 45, 50, 51, 85, 89, 96, 110], "gamma_1": [42, 113], "gamma_2": [42, 113], "\u03b3\u2081": 42, "\u03b3\u2082": 42, "\u03b2": [42, 194], "h_i": [42, 56], "c89": [42, 209, 242], "julia_cod": [42, 209], "rust_cod": [42, 209], "powi": [42, 209], "make_routin": [42, 242], "f95": [42, 241, 242], "matlab": [42, 114, 141, 242, 282], "breadth": [42, 60, 229], "c_name": [42, 242], "c_code": [42, 242], "h_name": [42, 242], "c_header": [42, 242], "volume_result": 42, "ifndef": [42, 242], "project__test__h": [42, 242], "endif": [42, 242], "preprocessor": [42, 210, 221, 242], "global_var": [42, 242], "insensit": [42, 96, 141, 209, 240, 242], "argument_sequ": [42, 242], "routin": [42, 49, 59, 60, 61, 62, 85, 90, 91, 96, 100, 146, 174, 198, 202, 205, 208, 209, 210, 221, 222, 225, 226, 227, 228, 241, 247, 261], "name_expr": [42, 242], "to_fil": [42, 242], "f_name": [42, 242], "f_code": [42, 242], "choic": [42, 52, 65, 68, 85, 87, 101, 138, 170, 179, 183, 184, 192, 200, 202, 205, 209, 221, 225, 247, 280], "hydrogen": [42, 271], "r_nl": [42, 112, 175], "my_routin": 42, "result_var": [42, 242], "result\u2085\u2081\u2084\u2082\u2083\u2084\u2081\u2086\u2088\u2081\u2083\u2089\u2087\u2087\u2081\u2089\u2084\u2082\u2088": 42, "__________": [42, 197], "\u212f": [42, 146, 194, 209, 276, 280, 282, 286, 287], "assoc_laguerr": [42, 68, 209], "fcn": [42, 242], "result_5397460570204848505": [42, 242], "out_8598435338387848786": [42, 242], "examin": [42, 61, 163, 240, 242, 286], "inputargu": [42, 242], "outputargu": [42, 242], "inoutargu": [42, 242], "disk": [42, 61, 217, 228, 248], "binary_funct": [42, 101, 241], "tensor": [42, 47, 62, 96, 111, 121, 139, 153, 159, 160, 161, 171, 174, 183, 184, 209, 230, 231, 233, 234, 241, 248, 258, 259, 265, 266, 269, 271], "binary_func": [42, 241], "servic": [42, 229], "tempdir": [42, 241], "qho_1d": [42, 150], "psi_n": [42, 150], "y_": [42, 68, 85, 112, 194], "qho": 42, "tmp": 42, "subroutin": [42, 51, 170, 202], "autofunc": 42, "hbar": [42, 150, 156, 169, 175, 179, 181, 194], "05457162d": 42, "14159265358979d0": 42, "0d0": [42, 209], "74126166983329d": 42, "33": [42, 60, 63, 96, 139, 147, 202, 206, 209, 229], "verbos": [42, 60, 91, 100, 209, 240, 241, 285], "mute": [42, 241], "backend": [42, 88, 101, 102, 108, 127, 129, 135, 189, 206, 241, 248], "auxiliari": [42, 87, 119, 124, 136, 225, 241], "function_nam": [42, 241], "sympy_express": [42, 241], "mandatori": [42, 209, 241], "illustr": [42, 96, 125, 128, 179, 199, 212, 216], "psi_nl": 42, "766": 42, "incur": [42, 101], "get_numpy_arrai": 42, "tight": 42, "temp": [42, 126], "alloc": [42, 66], "fuse": 42, "wise": [42, 43, 66, 91, 198, 202, 209, 215, 241], "unabl": [42, 73, 77, 102, 227, 254, 275, 276], "fortun": [42, 101, 128, 205, 206], "reconnect": 42, "autom": [42, 66, 101, 218, 241, 280], "ideologi": [42, 228], "fashion": [42, 60, 66, 93, 126, 136, 137, 139, 193, 196, 247], "broadcast": [42, 101, 209, 234, 241], "outperform": 42, "jensen": 42, "quantit": [42, 176], "leverag": [42, 101, 209], "ufunc": [42, 101, 241, 248], "fn_numpi": 42, "fn_fortran": 42, "linspac": [42, 83, 101, 124, 141], "xx": [42, 96, 121, 193, 247], "21306132": 42, "98101184": 42, "44626032": 42, "timeit": [42, 206], "10000": [42, 64, 100, 101, 103, 227], "18891601900395472": 42, "004707066000264604": 42, "facil": 42, "comparison": [42, 59, 60, 90, 96, 124, 196, 204, 208, 227, 240, 247], "thereof": [42, 60, 196, 202, 204], "optims_c99": 42, "log1p": [42, 209], "expm1_opt": 42, "log1p_opt": 42, "exp2_opt": 42, "log2_opt": 42, "log2const_opt": 42, "funcminusoneoptim": 42, "func_m_1": 42, "opportunist": 42, "replaceoptim": 42, "catastroph": 42, "replace_in_add": 42, "cost_funct": 42, "__call__": [42, 52, 60, 204], "exp2": [42, 209], "create_expand_pow_optim": 42, "base_req": 42, "is_symbol": [42, 91], "expand_opt": 42, "opt2": 42, "is_funct": 42, "log2": [42, 68, 209], "matin_opt": 42, "matinv_opt": 42, "matrixsolv": [42, 209], "matrix_nod": 42, "numpyprint": 42, "doprint": [42, 209], "seriesapprox": 42, "reltol": 42, "max_ord": 42, "n_point_check": 42, "threshold": [42, 100], "largest": [42, 52, 54, 60, 66, 68, 96, 99, 100, 154, 196, 200, 227, 247], "series_approx2": 42, "1e": [42, 60, 64, 96, 108, 143, 205, 227], "series_approx3": 42, "series_approx8": 42, "sumapprox": 42, "neglect": 42, "2000": [42, 46, 87, 100, 203], "sum_approx3": 42, "sum_approx2": 42, "sum_approx1": 42, "token": [42, 85, 88, 102], "diagram": [42, 49, 89, 103, 127, 128, 129, 134, 154, 234, 259, 281], "codegenast": 42, "assignmentbas": 42, "augmentedassign": 42, "addaugmentedassign": 42, "subaugmentedassign": 42, "mulaugmentedassign": 42, "divaugmentedassign": 42, "modaugmentedassign": 42, "codeblock": [42, 102], "quotedstr": 42, "intbasetyp": 42, "_sizedinttyp": 42, "signedinttyp": 42, "unsignedinttyp": 42, "floatbasetyp": 42, "floattyp": 42, "complexbasetyp": 42, "complextyp": 42, "pointer": [42, 242, 243], "functionprototyp": 42, "functiondefinit": [42, 102], "stream": [42, 61, 210, 221, 247], "functioncal": 42, "breaktoken": 42, "continuetoken": 42, "nonetoken": 42, "float32": [42, 101, 102, 248], "codeprint": 42, "complex_": 42, "bool_": 42, "intc": [42, 102], "intp": 42, "unsign": [42, 65, 221], "int8": 42, "int16": 42, "int32": 42, "int64": [42, 229], "uint8": 42, "uint16": 42, "uint32": 42, "uint64": 42, "x86": 42, "amd64": 42, "complex64": 42, "complex128": 42, "newton": [42, 68, 134, 177, 181, 202, 206], "aug_assign": 42, "tol": [42, 60, 200], "val": [42, 60, 72, 200, 204, 248], "whl": 42, "py_str": 42, "inf": [42, 52, 60, 96, 200, 205, 217, 225, 229], "exec": [42, 60, 88, 248], "1121416371": 42, "909672693737": 42, "867263818209": 42, "865477135298": 42, "865474033111": 42, "1g": 42, "3e": 42, "2003": [42, 194, 203, 209, 222], "source_format": [42, 209], "op": [42, 60, 96, 163, 174, 188, 192, 218, 247, 248], "parametr": [42, 68, 69, 73, 96, 195, 222, 228, 254, 257, 264], "volatil": 42, "binop": 42, "exit": [42, 100, 240], "premad": 42, "break_": 42, "lift": [42, 56, 66, 68, 85, 200, 202, 205], "left_hand_sid": 42, "topological_sort": [42, 247], "postprocess": [42, 205, 210, 221], "topolog": [42, 60, 62, 198, 247], "continue_": 42, "untyp": 42, "compliant": 42, "ok": [42, 52, 209, 225], "elem": [42, 51, 196], "ijk": [42, 234], "stride": [42, 234], "lmn": 42, "cast_nocheck": 42, "alia": [42, 53, 60, 70, 76, 91, 92, 94, 98, 158, 167, 174, 196, 199, 200, 204, 208, 217, 240, 250, 286], "nbit": 42, "storag": [42, 60, 96, 168, 194, 202], "nmant": 42, "mantissa": 42, "nexp": 42, "half_precis": 42, "f16": 42, "65504": 42, "tini": [42, 60], "ep": [42, 51, 59, 200, 204, 205], "decimal_dig": 42, "cast_check": 42, "1e5": 42, "cast": [42, 93, 278], "subnorm": [42, 51], "idempot": 42, "loos": [42, 60], "overflow": [42, 244], "max_expon": 42, "min_expon": 42, "for_i": 42, "for_ji": 42, "for_kji": 42, "function_arg": [42, 240], "fcall": 42, "bar": [42, 68, 125, 134, 163, 169, 250, 271], "baz": 42, "return_typ": 42, "fp": [42, 43, 60, 205, 211], "from_functionprototyp": 42, "prototyp": [42, 101, 242], "value_const": 42, "pointer_const": 42, "attr_param": 42, "looking_for": 42, "as_declar": 42, "formatstr": 42, "5g": 42, "stdout": [42, 240], "stderr": 42, "oppos": [42, 248, 276], "_field": 42, "_construct_": 42, "not_in_arg": 42, "float16": 42, "inttyp": 42, "super": [42, 68, 200, 209, 254, 256], "from_expr": [42, 205], "42": [42, 49, 60, 63, 65, 73, 74, 76, 91, 92, 94, 96, 98, 100, 200, 205, 222, 240], "v6": 42, "123456": [42, 60, 100], "v10": 42, "12345": [42, 64], "67894": 42, "boost_mp50": 42, "boost": 42, "multiprecis": [42, 199], "cpp_dec_float_50": 42, "r37": 42, "rtol": 42, "atol": 42, "precision_target": 42, "v18": 42, "123456789012345646": 42, "123456789012345649": 42, "Will": [42, 96, 102, 204, 209, 240], "decl1": 42, "decl2": 42, "alt": 42, "secondarili": [42, 205], "mathcin": 42, "cbrt": [42, 66, 209], "minu": [42, 59, 60, 190, 202, 209, 261], "0e": [42, 60], "fma": [42, 209], "cpu": [42, 101, 141], "hypot": [42, 209], "hypotenus": [42, 76], "log10": [42, 209], "ten": [42, 101], "plu": [42, 59, 96, 102, 141, 154, 205, 209, 219, 248], "famili": [42, 44, 78, 87, 197], "commaoper": 42, "goto": 42, "preincrement": 42, "postdecr": 42, "decrement": [42, 244], "postincr": 42, "increment": [42, 51, 52, 53, 59, 76, 100, 229], "predecr": 42, "alignof": 42, "sizeof": 42, "struct": [42, 194], "dsign": 42, "arrayconstructor": 42, "ac": [42, 52, 72, 106, 121, 139, 151, 229, 247, 250], "95": [42, 58, 100, 202, 209, 225, 227, 242], "do1": 42, "1d0": 42, "do2": 42, "extent": 42, "intent_out": 42, "dim": [42, 62, 75, 101, 176, 182, 209, 232, 235, 269], "arr": 42, "fortranreturn": 42, "aid": [42, 126], "implieddoloop": 42, "idl": 42, "signallib": 42, "prog": [42, 153], "myprogram": 42, "mysub": 42, "subroutinecal": 42, "inout": 42, "bind_c": 42, "sum_": [42, 59, 60, 61, 65, 68, 85, 87, 91, 93, 100, 194, 205, 206, 211, 212, 219, 225, 229], "cmplx": [42, 209], "intent_in": 42, "intrins": 42, "isign": 42, "lbound": 42, "lb": [42, 82, 244], "literal_dp": 42, "num": [42, 51, 60, 100, 110, 200, 221, 225, 244, 250], "literal_sp": 42, "reshap": [42, 91, 124, 141, 230, 236, 247], "arrayexpr": 42, "shp": 42, "metric": [42, 52, 56, 62, 111, 221, 225, 228, 235], "snr": 42, "convolution2d": 42, "use_renam": 42, "ren": 42, "thingi": 42, "newtons_method": 42, "itermax": 42, "counter": [42, 60, 66, 72, 91, 104, 106], "raphson": 42, "criterion": [42, 51, 140, 197, 202], "netwon": 42, "algo": [42, 52], "r38": 42, "27s_method": 42, "newtons_method_funct": 42, "param": [42, 62, 96, 222], "render_as_modul": 42, "py_mod": 42, "865474033102": 42, "render_as_source_fil": 42, "printer_set": 42, "fcodeprint": [42, 209], "fpgroup": [43, 51], "studi": [43, 50, 59, 62, 96, 193, 196, 202, 205, 222, 229], "combinator": [43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 65, 93, 100, 211, 230, 235, 244, 247, 266, 280, 286], "free_group": [43, 50, 51], "vfree_group": 43, "xfree_group": 43, "fp_group": [43, 51], "coset_enumeration_r": 43, "fall": [43, 59, 60, 65, 88, 189, 204, 209, 222, 226, 229], "famou": [43, 68, 87, 100, 222], "langl": [43, 51, 153, 194], "rangl": [43, 51, 153, 171, 194], "gen0": 43, "gen1": 43, "gen_": 43, "freegroup": 43, "x_2": [43, 50, 65, 82, 169, 197, 202, 205, 211, 222, 228], "x_3": [43, 50, 82, 169], "s_1": 43, "r_1": [43, 196, 206], "s_2": 43, "r_2": 43, "s_k": 43, "r_k": [43, 167], "s_i": [43, 56, 87, 89], "r_i": [43, 206], "reduct": [43, 96, 120, 202, 204, 222], "ho05": [43, 50], "cdhw73": 43, "hav91": 43, "coset_enumeration_c": 43, "coset_enumer": 43, "relator_bas": 43, "coset_table_bas": 43, "influenc": [43, 103, 196, 197], "coset_table_max_limit": 43, "4096000": 43, "safeti": [43, 52, 94], "max_coset": 43, "cox": [43, 203, 205], "c_r": [43, 219], "50": [43, 51, 63, 64, 65, 68, 76, 96, 100, 103, 104, 147, 205, 209, 218, 227], "max_stack_s": 43, "500": [43, 64, 121], "deduction_stack": 43, "stack": [43, 77, 91, 141, 198, 204, 209, 238, 244, 282], "occurr": [43, 60, 100, 124, 184, 221, 229], "exce": [43, 100, 235], "modest": 43, "low_index_subgroup": 43, "conjugaci": [43, 51], "coset_t": [43, 51], "reidemeister_present": 43, "y_1": [43, 222, 229], "y_2": [43, 222, 229], "john": [43, 51, 68, 205, 222, 225], "cannon": 43, "lucien": 43, "dimino": [43, 51], "georg": [43, 196, 225, 247], "hava": 43, "jane": 43, "watson": [43, 221], "comp": [43, 225], "463": [43, 140], "490": [43, 52], "1973": [43, 61, 191], "derek": [43, 50], "holt": [43, 50, 51, 58], "chapman": [43, 50], "hall": [43, 50, 229], "crc": [43, 50, 52], "2005": [43, 50, 87, 100, 205], "xvi": [43, 50], "514": [43, 50, 203], "symposium": [43, 85, 202, 203, 219], "issac": [43, 87, 203, 227], "bonn": 43, "1991": [43, 203], "191": [43, 228], "199": 43, "acm": [43, 59, 85, 87, 203, 219, 221, 225, 227], "graycod": 44, "kw_arg": [44, 54, 174, 234, 235], "hamiltonian": [44, 165], "edg": [44, 53, 54, 89, 198, 209, 228, 247, 285], "hamilton": [44, 91], "vertex": [44, 54, 71, 76, 87, 198], "000": [44, 64, 87, 90, 168, 247], "110": [44, 90, 225, 227, 241, 247], "010": [44, 90, 247], "011": [44, 90, 168, 247], "111": [44, 63, 70, 90, 100, 247], "101": [44, 68, 90, 100, 168, 247], "001": [44, 64, 90, 143, 247], "delet": [44, 89, 91, 96, 206, 250, 286], "statist": [44, 61, 68, 229, 240, 280], "manner": [44, 61, 68, 138, 172, 190, 222, 225, 230, 247, 263], "generate_grai": 44, "0000": 44, "0001": [44, 64], "0011": [44, 55], "0010": 44, "0110": 44, "0111": [44, 168], "0101": [44, 168], "0100": 44, "1100": 44, "1101": 44, "1111": 44, "1110": 44, "1010": 44, "1011": 44, "1001": 44, "r39": 44, "nijenhui": 44, "wilf": [44, 59, 227], "1978": [44, 51, 179, 203], "r40": 44, "knuth": [44, 52, 244], "2011": [44, 52, 85, 100, 191, 218], "art": [44, 52, 196, 209, 211, 244], "vol": [44, 52, 61, 65, 68, 85, 96, 111, 204, 205, 219, 244, 247], "addison": [44, 52, 100, 203], "weslei": [44, 52, 100, 203], "r41": 44, "brgc": 44, "6th": [44, 100], "unrank": [44, 49, 51, 52, 54], "r42": 44, "statweb": 44, "stanford": 44, "susan": 44, "s208": 44, "node12": 44, "tail": [44, 59, 60, 200, 229], "00010": 44, "random_bitstr": 44, "bitlist": [44, 55], "gray_to_bin": 44, "endian": 44, "bin_to_grai": 44, "get_subset_from_bitstr": 44, "bitstr": 44, "graycode_subset": 44, "group_construct": 45, "directproduct": [45, 48], "__mul__": [45, 51, 91, 96, 200, 204], "shift": [45, 51, 52, 54, 61, 68, 71, 75, 77, 90, 195, 200, 202, 205, 212, 219, 227, 229], "gn": 45, "named_group": [45, 48, 50, 51, 57, 58], "cyclicgroup": [45, 48, 51], "perm_group": [45, 50, 51, 52, 57, 58], "permutationgroup": [45, 48, 50, 51, 52, 57, 58], "group_numb": 46, "is_nilpotent_numb": 46, "r43": 46, "randprim": [46, 100], "pakianathan": 46, "shankar": 46, "monthli": [46, 61, 96], "107": [46, 203], "631": 46, "634": 46, "is_abelian_numb": 46, "r44": 46, "is_cyclic_numb": 46, "r45": 46, "polyhedron": [47, 51, 87, 247, 266], "prufer": [47, 266], "grai": [47, 55, 88, 143, 189, 195, 266], "nilpot": [47, 51, 96, 266], "abelian": [47, 48, 51, 89, 179, 196, 266], "cyclic": [47, 48, 51, 52, 53, 63, 91, 100, 235, 247, 266], "polycycl": [47, 51, 266], "symmetricgroup": [48, 50, 51, 57, 58], "transposit": [48, 51, 52, 61, 91, 93, 231], "is_group": [48, 51], "generate_schreier_sim": [48, 51], "af": [48, 51, 57, 141], "dihedralgroup": [48, 51, 58], "alternatinggroup": [48, 51, 57], "r46": 48, "symmetric_group": 48, "generators_and_rel": 48, "dihedr": [48, 52], "d_n": [48, 89, 205], "gon": 48, "bab": 48, "generate_dimino": [48, 51], "perm": [48, 50, 51, 52, 53, 58, 65, 91, 93, 96, 230], "cyclic_form": [48, 52, 53], "r47": 48, "dihedral_group": 48, "31": [48, 60, 63, 64, 76, 100, 139, 194, 205, 222], "ex": [48, 87, 111, 123, 199, 204, 205, 235, 243], "r48": 48, "armstrong": 48, "abeliangroup": [48, 51], "cyclic_ord": 48, "r49": 48, "groupprop": [48, 51], "subwiki": [48, 51], "structure_theorem_for_finitely_generated_abelian_group": 48, "multiset_partit": [49, 65, 85, 244, 247], "rg": 49, "growth": [49, 100, 202, 276], "from_rg": 49, "abcd": [49, 53, 174, 247, 250], "cbead": 49, "sort_kei": [49, 60, 225], "ti": [49, 52, 60, 100], "integerpartit": [49, 247], "summand": [49, 204], "r50": 49, "partition_": [49, 65], "28number_theori": 49, "as_dict": [49, 199, 205], "as_ferr": 49, "char": 49, "ferrer": 49, "next_lex": [49, 52], "lexic": [49, 154, 247], "prev_lex": 49, "random_integer_partit": 49, "seed": [49, 51, 60, 61, 70, 73, 74, 96, 100, 202, 229, 240, 247], "85": [49, 64, 65, 96, 100, 126, 172, 194, 229], "rgs_gener": 49, "37": [49, 61, 66, 70, 96, 100, 104, 194, 209, 222], "52": [49, 65, 100, 103, 104, 194, 208, 222, 225, 247, 276], "151": 49, "203": [49, 65], "rgs_enum": 49, "rgs_unrank": 49, "rgs_rank": 49, "pcgroup": 50, "pcg": 50, "pc_seri": [50, 51], "polycyl": 50, "pc_present": 50, "pc_sequenc": [50, 51], "miss": [50, 51, 77, 209, 227, 242, 286], "adjac": [50, 51, 52, 60, 65, 110, 146, 198, 247], "der": [50, 51], "relative_ord": [50, 51], "polycyclic_group": [50, 51], "gen": [50, 51, 56, 57, 58, 60, 96, 196, 199, 200, 202, 204, 205, 206, 207, 215, 221, 224, 227], "is_ident": [50, 52, 60], "poss": [50, 126, 193], "pc_group": 50, "a_j": [50, 68, 85, 179, 202, 211, 219], "notin": [50, 85, 217], "_order": 50, "minimal_uncollected_subword": 50, "subword_index": 50, "i_1": [50, 174, 205, 230], "a_1": [50, 51, 61, 68, 82, 85, 91, 96, 111, 174, 179, 197, 202, 219, 222, 225, 229, 286], "i_r": 50, "a_r": [50, 219], "i_2": [50, 174, 205], "s_": [50, 56, 124, 202], "s_j": [50, 89, 202], "x3": [50, 60, 65, 199, 225, 229], "collected_word": 50, "free_to_perm": 50, "bottom": [50, 51, 60, 61, 76, 91, 96, 99, 123, 204, 209, 218, 264], "pictur": [50, 209], "x_3x_2": 50, "x_3x_1": 50, "x_2x_1": 50, "x_3x_0": 50, "x_2x_0": 50, "x_1x_0": 50, "varii": 50, "derived_seri": [50, 51], "pc_resent": 50, "k_arrai": 50, "array_form": [50, 52, 53], "v_arrai": 50, "e_1": [50, 96, 196, 202, 205], "e_n": [50, 65, 89, 96, 150, 196, 205], "exponent_vector": 50, "leading_expon": 50, "dup": [51, 200], "pn": [51, 128, 138], "motion": [51, 114, 118, 119, 120, 123, 126, 127, 128, 129, 131, 133, 134, 135, 136, 137, 138, 141, 142, 188, 189, 192, 193, 229], "front": [51, 60, 126, 127, 143, 173, 200, 202, 205, 209, 221, 286], "face": [51, 53, 73, 87, 124, 202, 206, 209, 222, 264, 282], "rubik": 51, "3674160": 51, "pgroup": [51, 53], "corner": [51, 53, 91, 205, 225, 228, 248], "reset": [51, 53, 195, 202, 205, 240, 243, 245], "p10": 51, "make_perm": 51, "r51": 51, "eick": [51, 58], "brien": [51, 58], "r52": 51, "seress": 51, "r53": 51, "schreier_vector": 51, "r54": 51, "nielsen_transform": 51, "product_replacement_algorithm": 51, "r55": 51, "frank": [51, 52, 96], "celler": 51, "charl": 51, "leedham": 51, "green": [51, 135, 195], "scott": 51, "murrai": 51, "alic": [51, 61], "niemey": 51, "r56": 51, "block_": 51, "28permutation_group_theori": 51, "r57": 51, "algorithmist": 51, "php": [51, 68, 100, 222, 229], "union_find": 51, "r58": 51, "multiply_transitive_group": 51, "r59": 51, "center_": 51, "28group_theori": 51, "centralizer_and_norm": 51, "derived_subgroup": 51, "nilpotent_group": 51, "colost": 51, "hulpk": 51, "cgt": 51, "cgtnote": 51, "__contains__": 51, "__weakref__": [51, 91], "weak": [51, 60, 91, 199, 202], "_coset_repres": 51, "hg": 51, "transvers": [51, 56, 58, 147, 148], "coset_transvers": 51, "_distinct_primes_lemma": 51, "_element": 51, "_eval_is_alt_sym_monte_carlo": 51, "05": [51, 82, 108, 191, 194], "mont": 51, "carlo": 51, "randomli": [51, 60, 61, 100, 168], "n_ep": 51, "_check_cycles_alt_sym": [51, 58], "_eval_is_alt_sym_na": 51, "only_sym": 51, "only_alt": 51, "_p_elements_group": 51, "subgroup": [51, 52, 56, 58, 89, 100], "_random_pr_init": 51, "_random_prec_n": 51, "modif": [51, 66, 96, 228, 229, 244], "69": [51, 96, 227, 244], "71": [51, 76, 96, 177], "_random_gen": 51, "accumul": [51, 240, 244], "random_pr": 51, "chosen": [51, 52, 61, 62, 73, 74, 96, 100, 103, 142, 176, 179, 195, 196, 200, 202, 204, 209, 216, 219, 225, 229, 240, 254], "gh": [51, 197, 228, 235], "eventu": [51, 68, 87, 195, 196, 216, 242, 247], "_sylow_alt_sym": 51, "sylow": 51, "p_1": [51, 56, 61, 78, 100, 192, 219, 222], "p_2": [51, 61, 78, 100, 192, 219], "p_p": 51, "sylow_subgroup": 51, "is_alt_sym": [51, 58], "_union_find_merg": 51, "not_rep": 51, "atkinson": 51, "83": [51, 208], "87": [51, 66, 96, 100], "minimal_block": 51, "_union_find_rep": 51, "r60": 51, "r66": 51, "compress": [51, 96, 99, 106], "r62": 51, "r68": [51, 52], "_verifi": 51, "_h": [51, 228], "gens_k": 51, "rels_k": 51, "gens_h": 51, "inject": [51, 60, 196, 200, 205, 282], "homomorph": 51, "rels_h": 51, "strong_present": 51, "abelian_invari": 51, "isomorph": [51, 54, 196, 199, 202, 204], "t_1": [51, 65, 222], "t_2": [51, 65, 222], "t_r": [51, 139, 235], "542": 51, "adopt": [51, 235], "schreier": [51, 56, 58], "sim": [51, 56, 58, 85], "b_1": [51, 58, 68, 82, 85, 196, 219, 222, 225, 286], "b_2": [51, 58, 68, 82, 219, 225], "dot": [51, 52, 56, 58, 61, 73, 75, 82, 91, 96, 110, 119, 126, 127, 128, 131, 132, 133, 136, 137, 138, 139, 141, 158, 184, 186, 189, 192, 193, 194, 196, 197, 202, 205, 209, 228, 229, 247, 254, 258, 260, 261], "b_k": [51, 58, 61, 65, 68, 211, 212], "strong": [51, 56, 57, 58, 100, 101], "89": [51, 58, 87], "55": [51, 63, 65, 96, 194, 195, 205, 222], "57": [51, 96, 100, 229], "coset": [51, 56, 204], "strong_gen": [51, 57, 58], "basic_transvers": [51, 58], "basic_orbit": [51, 58], "basic_stabil": 51, "baseswap": 51, "po": [51, 85, 90, 91, 121, 139, 141, 200, 227], "strong_gens_distr": [51, 58], "swap": [51, 52, 53, 91, 96, 154, 158, 167, 229, 247], "orbit": [51, 58, 174, 175, 177], "b_": [51, 56, 58, 60, 65, 68, 85, 93, 110, 211, 219, 222, 230], "b_i": [51, 56, 58, 85, 196, 219], "la": [51, 141, 179], "vega": 51, "testutil": [51, 57, 58], "_verify_bsg": [51, 57, 58], "schreier_sim": [51, 57, 58], "bsg": [51, 56, 58, 235], "102": [51, 96], "98": [51, 61, 140, 205, 225], "pseudocod": 51, "beta_": 51, "g_": [51, 58, 59, 68, 85, 222], "foral": [51, 59, 62, 179], "zg": 51, "gz": 51, "c_g": 51, "sg": [51, 229, 235], "is_subgroup": 51, "subgroup_search": 51, "hgh": 51, "closur": [51, 57, 83, 154, 204, 217], "composition_seri": 51, "h_0": [51, 56], "h_1": [51, 56, 228], "h_2": [51, 228], "1024": [51, 209, 229], "512": [51, 68], "128": [51, 65, 68, 70, 100, 203, 209], "32": [51, 63, 66, 68, 70, 96, 100, 103, 108, 139, 203, 205, 206, 218, 219, 222, 229, 240], "243": [51, 68, 227], "81": [51, 65, 70, 91, 96, 100, 124, 126, 194, 208], "conjugacy_class": 51, "xax": 51, "s_3": 51, "s3": [51, 59, 110, 212, 222], "feasibl": [51, 110], "resiz": [51, 52, 91, 93], "coset_factor": 51, "factor_index": 51, "_basic_orbit": 51, "u1": [51, 100, 124, 126, 127, 128, 129, 131, 132, 136, 138, 141, 184, 186, 188, 189, 192, 225], "u2": [51, 99, 100, 124, 126, 127, 128, 129, 131, 132, 136, 141, 184, 188, 192, 225], "_strip": [51, 58], "coset_rank": 51, "lexicograph": [51, 52, 55, 56, 60, 202, 205, 247], "coset_unrank": 51, "standardis": [51, 199], "subsect": [51, 261], "compris": [51, 61, 93, 121, 139, 142, 205, 247], "g_0": [51, 222], "g_1": [51, 205, 216, 222, 225], "g_2": [51, 89, 216, 225], "g_i": [51, 216], "g_k": 51, "tetrahedron": [51, 53], "r64": 51, "axiom": [51, 196], "doy": 51, "sc": [51, 87], "thesi": [51, 60, 216, 254], "generator_product": 51, "sn": [51, 52, 59, 82], "is_abelian": 51, "_random_prec": 51, "probabl": [51, 60, 65, 68, 72, 100, 124, 168, 172, 219, 225, 228, 229, 241, 278, 284], "transit": [51, 141, 202, 229], "82": [51, 87, 96, 229], "proport": [51, 61, 216], "226": 51, "227": 51, "is_altern": 51, "quicker": [51, 100], "taxonomi": 51, "is_cycl": 51, "p_": [51, 56, 60, 87, 179, 222, 225, 230], "p_i": [51, 56, 100], "equiv": [51, 61, 65, 100, 204, 219, 222], "pmod": [51, 60, 61, 65, 96, 219], "p_j": [51, 56], "r65": 51, "35": [51, 54, 63, 65, 73, 74, 87, 96, 100, 126, 204, 209, 222, 225, 229], "rose": 51, "is_elementari": 51, "is_nilpot": [51, 96], "lower_central_seri": 51, "is_solv": 51, "is_norm": [51, 172], "gr": 51, "is_perfect": [51, 100], "is_polycycl": 51, "is_primit": [51, 200, 205], "cardin": [51, 52, 55, 196, 217], "badli": 51, "random_stab": 51, "g3": [51, 110], "s5": 51, "is_symmetr": [51, 91], "is_transit": 51, "is_trivi": 51, "cba": [51, 230, 247], "mainli": [51, 68, 96, 101, 179, 189, 202, 219, 222, 225], "max_div": 51, "siev": [51, 100], "nonempti": 51, "gb": 51, "moreov": [51, 61, 85, 178, 190, 196, 197, 202, 210, 259], "congruenc": [51, 60, 100, 219, 222], "p_0": [51, 56, 78, 219, 222], "maxim": [51, 61, 89, 196, 200, 204, 216, 218], "intransit": 51, "normal_closur": 51, "adjoin": [51, 197], "yx": [51, 193], "73": [51, 59, 60, 73, 100, 225], "74": [51, 65, 100], "orb": 51, "78": [51, 74, 96, 100, 104, 179, 225, 229], "orbit_transvers": 51, "orbit_rep": 51, "send": [51, 60, 61, 66, 100, 196, 225, 227], "proof": [51, 54, 85, 87, 228], "79": [51, 52, 104], "pointwise_stabil": 51, "pointwis": [51, 58], "p_k": [51, 100], "p20": 51, "stab": 51, "schreier_sims_increment": [51, 58], "polycyclicgroup": 51, "eliminate_gen": 51, "gen_count": 51, "b1": [51, 56, 68, 100, 103, 104, 115, 124, 141, 184, 200, 209, 219, 222, 225, 260], "b_r": 51, "slp_dict": 51, "seq": [51, 60, 63, 96, 200, 202, 205, 215, 227, 247], "93": [51, 203], "schreier_sims_random": [51, 58], "consec_succ": 51, "consec": 51, "_succ": 51, "97": [51, 61, 100, 202], "sift": [51, 58, 247], "amend": 51, "unsuccess": [51, 58], "accordingli": [51, 197, 204], "halt": 51, "signifi": [51, 60, 103, 205, 229], "g_t": 51, "leq": [51, 59, 61, 68, 85, 96, 100, 194, 202, 204, 215, 216, 222, 229], "prop": [51, 204], "init_subgroup": 51, "supergroup": 51, "sought": [51, 100, 159, 169, 221, 227, 228], "prune": 51, "prop_even": 51, "lengthi": 51, "114": [51, 100], "117": [51, 68], "terribl": 51, "crucial": [51, 59, 199], "len1": 51, "len2": 51, "len3": 51, "transitivity_degre": 51, "fold": [51, 60, 66, 209, 216, 221], "a_2": [51, 61, 82, 96, 202, 219, 222, 225, 229, 286], "a_k": [51, 61, 206, 212], "arrang": [52, 110, 119, 139, 141, 218, 222, 235], "r69": 52, "reorder": [52, 59, 66, 174, 205, 225, 229, 247], "pretty_print": [52, 88, 121, 126, 127, 131, 132, 133, 135, 136, 137, 139, 142, 184, 186, 188, 189, 192, 193, 209], "understood": [52, 100, 179, 196, 200], "economi": 52, "caution": [52, 60, 66, 209, 221], "indexerror": [52, 96, 205], "autos": [52, 99], "watch": 52, "print_cycl": 52, "econom": [52, 87, 247], "retain": [52, 60, 66, 68, 87, 102, 205, 210, 218, 221], "biject": [52, 54, 61, 91, 196], "full_cyclic_form": 52, "rmul": 52, "unrank_lex": 52, "r73": 52, "zo42": 52, "from_sequ": 52, "a1": [52, 56, 60, 88, 91, 100, 104, 124, 141, 148, 225, 229, 230, 260, 286], "a2": [52, 56, 60, 89, 91, 100, 104, 124, 141, 148, 198, 229, 230, 260, 286], "a3": [52, 56, 60, 89, 91, 141, 260, 286], "perfectli": [52, 59, 60, 61, 202, 205, 208], "skiena": 52, "ma": [52, 59, 129], "1990": [52, 85, 219, 254], "r70": 52, "wendi": 52, "myrvold": 52, "ruskei": 52, "2001": [52, 100, 203], "lett": 52, "septemb": [52, 244], "281": 52, "284": [52, 100], "1016": 52, "s0020": 52, "0190": 52, "01": [52, 60, 64, 124, 168, 203, 221, 247], "00141": 52, "r71": 52, "kreher": 52, "stinson": 52, "1999": [52, 96, 203, 208, 225], "r72": 52, "graham": [52, 65, 66, 100], "patashnik": 52, "foundat": [52, 203, 204], "1994": [52, 202, 203, 205], "product_and_invers": 52, "r74": 52, "lehmer_cod": 52, "appliedpermut": 52, "magic": [52, 221, 240, 278], "_array_form": 52, "ascent": 52, "ie": [52, 222], "descent": [52, 222], "fg": [52, 62, 225, 228], "gf": [52, 61, 196, 198, 199, 202, 204], "r75": 52, "commutes_with": [52, 235], "cycle_structur": 52, "from_inversion_vector": 52, "get_adjacency_dist": 52, "n_adj": 52, "reev": 52, "colin": 52, "landscap": 52, "annal": 52, "86": [52, 96, 140, 208, 218], "473": 52, "josephu": 52, "get_precedence_matrix": 52, "get_precedence_dist": 52, "get_adjacency_matrix": 52, "get_positional_dist": 52, "inversion_vector": 52, "lesser": [52, 106, 205], "lehmer": 52, "ith": [52, 89, 100, 200, 206, 228, 229], "variat": [52, 60, 202, 216, 225], "r76": 52, "eng": 52, "chula": 52, "piak": 52, "algo2008": 52, "htm": [52, 68, 87, 222], "is_singleton": 52, "is_odd": 52, "shuffl": [52, 96, 286], "012345": 52, "345": 52, "253": 52, "2531": 52, "25314": 52, "253140": 52, "r77": 52, "flavius_josephu": 52, "r78": 52, "josephus_problem": 52, "r79": 52, "wou": 52, "burtonl": 52, "trim": [52, 138], "unmov": 52, "mul_inv": 52, "next_nonlex": 52, "nonlex": 52, "rank_nonlex": 52, "unrank_nonlex": 52, "next_trotterjohnson": [52, 247], "trotter": 52, "johnson": [52, 96], "generate_bel": [52, 247], "rank_trotterjohnson": 52, "unrank_trotterjohnson": 52, "_af_par": 52, "pseudo": [52, 96, 100, 200, 202, 205], "inv_perm": 52, "enforc": [52, 126], "rmul_with_af": 52, "ascend": [52, 247], "r80": 52, "transposition_": 52, "28mathemat": [52, 60, 217], "flexibl": [52, 60, 124, 141, 192, 195, 199, 228, 276], "investig": [52, 85, 194, 196, 219, 247, 278], "cn": [52, 209, 285], "2n": [52, 59, 65, 68, 87, 91, 106, 111, 137, 194, 212, 219], "dn": [52, 229], "klein": 52, "s4": [52, 110], "polyhedr": 53, "psg": 53, "platon": 53, "solid": [53, 74, 118, 195, 264], "tetrahedr": 53, "octahedr": 53, "icosahedr": 53, "r81": 53, "polyhedralgroup": 53, "polyhedra": 53, "shadow": 53, "h5": 53, "heinz": 54, "caylei": [54, 91], "r82": 54, "labeledtre": 54, "tree_repr": 54, "prufer_rank": 54, "prev": [54, 60], "prufer_repr": 54, "record": [54, 60, 204, 209, 240], "to_pruf": 54, "778": 54, "779": 54, "777": [54, 63], "1296": 54, "to_tre": 54, "r83": 54, "hamberg": 54, "erlend": 54, "2010": [54, 226, 247], "06": [54, 60, 126, 194, 229], "compact": [54, 60, 107, 119, 141, 172, 189, 205, 209, 227, 244], "next_binari": 55, "prev_binari": 55, "bitlist_from_subset": 55, "subset_from_bitlist": 55, "superset_s": 55, "iterate_binari": 55, "iterate_graycod": 55, "prev_grai": 55, "next_grai": 55, "next_lexicograph": 55, "prev_lexicograph": 55, "rank_binari": 55, "unrank_binari": 55, "rank_grai": 55, "unrank_grai": 55, "rank_lexicograph": 55, "43": [55, 96, 100, 103, 104, 229, 286], "super_set": 55, "subset_indic": 55, "ksubset": 55, "itertool": [55, 247], "tensor_can": [56, 235], "msym": 56, "contravari": [56, 96, 235, 236], "covari": [56, 62, 96, 229, 235, 236], "d0": 56, "base_i": 56, "gens_i": 56, "n_i": [56, 202, 227], "sym_i": 56, "failur": [56, 64, 77, 85, 100, 229, 240, 286], "canonicalize_na": 56, "exchang": [56, 61, 96, 194, 198, 247], "anticommut": [56, 161, 163, 173, 174, 235, 271], "canonical_fre": 56, "slot": [56, 158, 230, 234, 235, 281], "residu": [56, 61, 100, 202, 219], "tensor_gen": 56, "list_free_indic": 56, "double_coset_can_rep": 56, "reintroduc": 56, "antisymmetr": [56, 62, 91, 174, 235], "d2": [56, 184, 196, 216, 229, 247, 254], "ord": [56, 61, 96], "t_c": 56, "get_symmetric_group_sg": [56, 235], "bsgs_direct_product": 56, "base2a": 56, "gens2a": 56, "t0": 56, "t1": [56, 76, 77, 100, 115, 121, 222, 229], "a_m": [56, 225], "a_n": [56, 61, 68, 85, 89, 179, 197, 202, 212, 222, 225, 286], "_a": [56, 68, 174, 205], "_b": [56, 68, 174], "base_f": 56, "gens_f": 56, "base1": 56, "gens1": 56, "base_a": 56, "gens_a": 56, "sgen": 56, "s_transvers": 56, "butler": [56, 235], "portug": [56, 235], "grow": [56, 60, 85, 96, 100, 199, 202], "absenc": [56, 90], "observ": [56, 82, 85, 163, 193, 196, 219, 222, 225, 229, 263, 286], "ind": [56, 211, 235], "d3": [56, 216], "a0": [56, 225, 286], "a4": [56, 60, 89, 141, 286], "a5": [56, 60], "leftrightarrow": 56, "_af_rmul": 56, "t_": [56, 65], "b0": [56, 68, 200, 219, 225], "d_": [56, 219], "p0": [56, 70, 204, 225], "dbase": 56, "recomput": [56, 205], "d_i": [56, 85, 179], "s_0": 56, "d_0": [56, 61], "b_0": [56, 61, 65, 219, 222, 225], "b_j": [56, 58, 68, 85, 219], "sx": 56, "trace": [56, 91, 93, 111, 141, 202, 209, 229, 230, 231, 233, 247, 282], "h_n": [56, 68, 87, 205, 228], "tab1": 56, "get_transvers": 56, "antisym": 56, "base2": 56, "gens2": 56, "_cmp_perm_list": 57, "ls1": 57, "ls2": 57, "_naive_list_centr": 57, "_verify_centr": 57, "_verify_normal_closur": 57, "_base_ord": 58, "base_ord": 58, "backtrack": 58, "108": [58, 100, 104], "132": [58, 65, 184], "r84": 58, "_distribute_gens_by_bas": 58, "_strong_gens_from_distr": 58, "_orbits_transversals_from_bsg": 58, "_handle_precomputed_bsg": 58, "transversals_onli": 58, "slp": 58, "_remove_gen": 58, "new_gen": 58, "r85": 58, "r86": 58, "recurr": [59, 65, 82, 96, 204, 215, 221, 225, 229, 249], "annihil": [59, 78, 79, 83, 150, 174, 227], "is_hypergeometr": 59, "binomi": [59, 64, 65, 68, 100, 205, 209, 214, 221, 225, 229, 247, 286], "rf": [59, 65, 205], "ff": [59, 61, 65, 194, 197, 198, 199, 204, 205], "speci": [59, 60], "rise": [59, 65, 68, 194, 221, 225, 229, 258], "hypersimp": [59, 221], "quotient": [59, 60, 63, 66, 100, 196, 197, 199, 202, 205, 219, 221, 225], "dummy_vari": 59, "karr": 59, "quad": [59, 60, 62, 64, 68, 87, 91], "exclus": [59, 60, 66, 90, 96, 202, 278], "typeset": [59, 209], "doit": [59, 60, 62, 65, 66, 68, 87, 93, 110, 151, 153, 155, 166, 168, 171, 172, 174, 184, 194, 205, 211, 216, 221, 225, 226, 229, 231, 254, 257, 258, 260, 261, 276, 281], "seemingli": [59, 228], "nonsens": [59, 68], "r87": 59, "michael": [59, 203, 208], "april": 59, "1981": [59, 203], "305": 59, "350": [59, 121], "dl": [59, 193, 203, 221], "cfm": [59, 203], "doid": [59, 203], "322248": 59, "322255": 59, "r88": 59, "sigma_not": 59, "r89": 59, "empty_sum": 59, "euler_maclaurin": [59, 64], "eval_integr": 59, "maclaurin": [59, 64], "endpoint": [59, 60, 64, 73, 190, 217, 261], "28333333333333": 59, "sstr": [59, 189, 209], "full_prec": [59, 209], "26629073187415": 59, "0175000000000000": 59, "soon": [59, 60, 124, 179, 206], "eval_zeta_funct": 59, "is_absolutely_converg": 59, "sequence_term": 59, "is_converg": 59, "r90": 59, "absolute_converg": 59, "analogi": [59, 202], "prod_": [59, 65, 68, 85, 100, 179, 219], "respons": [59, 60, 110, 124, 195, 242], "diverg": [59, 68, 143, 185, 254, 257], "dirichlet": [59, 68, 229], "r91": 59, "convergence_test": 59, "reverse_ord": 59, "selector": [59, 91, 221, 247], "handi": [59, 60, 96, 209, 281], "s0": [59, 83, 85, 146], "expr_with_intlimit": [59, 87], "exprwithintlimit": [59, 87], "reorder_limit": 59, "r92": 59, "walli": 59, "w2": [59, 148], "w2e": 59, "risingfactori": [59, 65, 68, 209, 211], "combsimp": [59, 60, 65, 221], "pe": 59, "gammasimp": [59, 60, 221], "rewrit": [59, 60, 62, 65, 66, 68, 85, 87, 90, 103, 110, 171, 205, 216, 217, 218, 221, 225, 226, 227, 228, 229, 266, 280, 282], "r93": 59, "r94": 59, "capital_pi_not": 59, "r95": 59, "empty_product": 59, "r96": 59, "infinite_product": 59, "r97": 59, "expr_with_limit": [59, 87], "exprwithlimit": [59, 87], "change_index": 59, "trafo": 59, "newvar": 59, "mapsto": [59, 85, 91, 204], "p3": [59, 70, 72, 73, 75, 76, 110, 195, 199, 218, 229], "has_empty_sequ": [59, 87], "has_reversed_limit": [59, 87], "has_finite_limit": [59, 87], "____": [59, 64, 87, 146, 197, 210, 229, 247, 287], "___": [59, 64, 87, 88, 96, 197, 221, 229, 234, 247, 285], "rubric": [59, 60], "_____": [59, 229], "gosper": 59, "gosper_norm": 59, "monic": [59, 68, 196, 197, 200, 202, 204, 205, 208], "gcd": [59, 60, 61, 96, 100, 170, 199, 200, 203, 204, 205, 209, 221, 222], "gosper_term": 59, "s_n": [59, 205], "f_k": [59, 119, 136, 202], "g_n": [59, 65, 205], "f_n": [59, 65, 68, 196, 202, 205, 225], "gosper_sum": 59, "r98": 59, "marko": 59, "petkovsek": [59, 227], "herbert": 59, "doron": 59, "zeilberg": [59, 227], "ak": [59, 211], "peter": [59, 65, 68, 100, 140, 191, 205, 247], "ltd": 59, "welleslei": 59, "usa": [59, 203], "1997": [59, 85, 100, 203, 219], "convert_xor": [60, 102], "09": [60, 108, 194], "xor": [60, 63, 90, 102, 209, 278], "sympifyerror": 60, "coerc": [60, 138, 202], "cooper": 60, "shouldn": [60, 206], "unsanit": [60, 248, 275], "bitcount": 60, "improperli": 60, "unbound": [60, 234], "23903": 60, "fallback": [60, 88, 174, 189, 199, 209, 227], "ast": [60, 209], "mylist1": 60, "mylist": 60, "mylist2": 60, "xxx": [60, 87, 96, 247, 249], "autosimplif": [60, 218, 221], "kern": 60, "r101": 60, "7649": 60, "r100": 60, "r104": 60, "r102": 60, "r103": 60, "r105": 60, "r106": 60, "r107": 60, "r99": 60, "imaginaryunit": [60, 209], "negativeinfin": [60, 209], "complexinfin": [60, 110], "recreat": [60, 118], "isfinit": 60, "__cacheit": 60, "maxsiz": 60, "cacheit": 60, "noqa": [60, 88, 200, 243], "f811": 60, "sympy_use_cach": 60, "cot": [60, 66, 68, 102, 206, 209, 218], "_arg": [60, 66], "as_mut": [60, 92, 93], "as_content_primit": [60, 96, 197, 205], "stub": 60, "as_dummi": [60, 87], "_0": [60, 65, 85, 91, 96, 205, 248], "_r": [60, 174, 219, 228], "bound_symbol": [60, 87], "besid": [60, 202, 227], "typeinfo": 60, "truli": [60, 68, 179], "piec": [60, 64, 219, 242], "numbersymbol": [60, 209], "scan": 60, "appliedundef": 60, "canonical_vari": 60, "class_kei": 60, "sorted_class": 60, "dummy_eq": 60, "eg": [60, 124, 181, 228], "fromit": 60, "has_fre": 60, "has_xfre": 60, "exp_polar": [60, 66, 68, 219], "dif": 60, "_prec": 60, "r_": [60, 112, 175, 206], "repl_dict": 60, "rcall": [60, 62], "simul": [60, 124, 141, 208], "abus": [60, 235], "succe": [60, 85, 90, 100, 164, 204, 227], "newtyp": 60, "intuit": [60, 179, 225], "is_mul": 60, "is_add": [60, 228], "mysin": [60, 248, 275], "_eval_rewrite_as_": 60, "_eval_rewrite_as_co": 60, "tie": [60, 247], "delai": [60, 108, 138, 218, 240, 276], "unsort": [60, 114, 183], "333333333333333333333": 60, "333333333333333314830": 60, "wildcard": [60, 221], "evalfmixin": 60, "registri": 60, "metaprogram": 60, "address": [60, 209, 228], "mostli": [60, 66, 87, 96, 141, 169, 192, 196, 208, 209, 219, 227, 285], "__truediv__": [60, 200], "class_nam": 60, "mysingleton": 60, "_eval_is_g": 60, "_eval_is_eq": 60, "args_cnc": 60, "cset": 60, "split_1": 60, "suppress": [60, 102, 238, 245], "as_coeff_add": 60, "dep": [60, 225], "as_coeff_expon": 60, "as_coeffici": 60, "zz": [60, 65, 82, 83, 87, 93, 96, 97, 100, 121, 193, 196, 197, 198, 199, 202, 204, 205, 206, 207, 224], "coeff_monomi": [60, 205], "polytool": [60, 205, 228], "monomi": [60, 87, 90, 100, 197, 199, 200, 202, 208, 209, 286], "as_coefficients_dict": 60, "inquiri": 60, "expand_mul": [60, 85], "121": [60, 65, 100, 110, 184, 227], "84": [60, 64, 100], "separatevar": [60, 221, 225], "n3": [60, 124], "as_leading_term": [60, 216], "logx": [60, 216], "cdir": 60, "_eval_as_leading_term": 60, "as_numer_denom": [60, 227], "as_ordered_factor": 60, "as_ordered_term": 60, "as_powers_dict": 60, "lost": 60, "as_real_imag": [60, 66, 91, 210], "as_term": 60, "aseri": 60, "hir": 60, "asymptot": [60, 85, 110, 276], "hierarch": 60, "normalis": [60, 211], "induc": [60, 91, 204, 218, 247], "gruntz": [60, 211], "majorli": 60, "mrv": [60, 216], "overal": [60, 181, 195, 227], "till": [60, 103, 104, 124, 225], "r108": 60, "dominik": [60, 211], "proc": [60, 227], "1993": [60, 203], "symp": 60, "239": 60, "244": [60, 202], "r109": 60, "p90": 60, "r110": 60, "asymptotic_expans": 60, "_first": [60, 66], "factor_term": [60, 132, 205, 218, 221], "distribute_order_term": [60, 221], "compute_leading_term": 60, "could_extract_minus_sign": 60, "signsimp": [60, 132, 221], "failing_express": 60, "modulu": [60, 61, 63, 68, 70, 76, 91, 100, 103, 104, 196, 200, 202, 204, 205, 208, 228], "power_bas": [60, 91], "power_exp": [60, 91], "multinomi": [60, 91, 100, 229], "expr_free_symbol": 60, "extract_addit": 60, "extract_multipl": 60, "extract_branch_factor": 60, "allow_half": 60, "fourier_seri": [60, 212], "geto": 60, "getn": 60, "mod_invers": [60, 205], "is_algebraic_expr": 60, "is_rational_funct": 60, "r111": 60, "algebraic_express": 60, "is_const": 60, "constanc": 60, "agre": [60, 61, 68, 75, 85, 219], "test_expr": 60, "failing_numb": 60, "is_meromorph": 60, "meromorph": [60, 68], "multivalu": [60, 66], "cut": [60, 65, 66, 68, 76, 85, 196, 219, 244, 250, 286], "hit": [60, 281], "is_polynomi": 60, "rational_funct": 60, "leadterm": 60, "xlim": [60, 195], "lseri": 60, "exaxmpl": 60, "nseri": 60, "_eval_nseri": 60, "innermost": 60, "disadvantag": 60, "met": [60, 106, 222, 228, 243, 286], "poleerror": 60, "nsimplifi": [60, 64, 221], "ratsimp": [60, 221], "removeo": [60, 141, 209, 276], "chop": [60, 64, 68, 91, 96, 227, 275], "123": [60, 65, 70, 90, 118, 171, 184, 247, 254, 256], "lazi": [60, 93, 205], "smooth": [60, 64, 100, 211], "taylor_term": [60, 66], "previous_term": [60, 66], "wildfunct": 60, "dummy_index": 60, "temporari": [60, 241], "_dummy_10": 60, "contigu": [60, 219, 242], "x4": [60, 65, 199], "x5": [60, 65, 199], "x6": [60, 199], "x7": [60, 199], "x8": [60, 199], "x9": [60, 199], "x50": 60, "x51": 60, "y0": [60, 79, 81, 83, 225], "y1": [60, 141], "y2": [60, 141, 199], "y3": [60, 199], "y4": 60, "xa": [60, 197, 202], "xb": [60, 250], "xc": [60, 173, 250], "disambigu": 60, "x01": 60, "x02": 60, "x11": 60, "x12": 60, "escap": [60, 102, 195, 209, 250], "newli": [60, 85, 219], "undefinedfunct": [60, 186, 209, 241, 248], "f821": [60, 243], "cofactor": [60, 96, 200, 202, 205], "lcm": [60, 100, 200, 202, 205, 209], "50000000000000": [60, 64], "100000000000000000000": 60, "1e20": 60, "00000000000000e": 60, "23456789123456789": 60, "23456789123457": 60, "00100": 60, "sent": [60, 87, 221, 227], "789": [60, 100], "123_456": 60, "123456789": 60, "12e": 60, "012": 60, "60e2": 60, "6000": 60, "600e": 60, "125": [60, 64, 87, 100, 200, 215, 222], "099609": 60, "12500": 60, "12500000000000000000": 60, "5404319552844595": 60, "54": [60, 96, 104, 202, 208, 247], "29999999999999998890": 60, "30000000000000000000": 60, "_mpf_": [60, 199], "4915": 60, "70": [60, 61, 77, 87, 96, 100, 208, 209, 222, 229, 250], "307": 60, "mpf": [60, 199, 200], "is_float": 60, "unprejud": 60, "3602879701896397": 60, "18014398509481984": [60, 221], "limit_denomin": 60, "320": 60, "75": [60, 63, 229, 254], "use_tri": [60, 100], "use_rho": [60, 100], "use_pm1": [60, 100], "factorint": [60, 100, 204, 205, 244], "trial": [60, 100, 202, 214, 218, 225, 229], "max_denomin": 60, "1000000": [60, 100], "141592653589793": 60, "311": [60, 100], "discard": [60, 204, 209, 228], "99999999999999999999": 60, "algebraicnumb": [60, 200, 204, 208], "hookrightarrow": 60, "minpoli": [60, 199, 200, 204], "dmp": [60, 196, 200, 205], "anp": [60, 199, 200, 204, 205], "to_list": [60, 198, 200], "minpoly_of_el": 60, "414213562": 60, "scratch": [60, 179], "6x": [60, 202], "to_number_field": [60, 204], "to_root": 60, "primitive_el": [60, 199, 200, 204], "knew": [60, 286], "golden": [60, 64, 100], "5th": [60, 141, 202, 204], "cyclotom": [60, 200, 202, 203, 204, 205], "cyclotomic_poli": [60, 204, 205], "61803398874989": 60, "2i": 60, "a6": 60, "a6_wrong": 60, "309016994374947": 60, "951056516295154": 60, "field_el": 60, "is_alias": 60, "is_primitive_el": 60, "native_coeff": 60, "to_algebraic_integ": 60, "to_primitive_el": 60, "Its": [60, 66, 76, 141, 172, 202, 209, 217], "a_prim": 60, "number_cl": 60, "realnumb": 60, "igcd": [60, 100, 197], "greatest": [60, 65, 70, 100, 197, 199, 200, 202, 203, 205, 208], "euclid": [60, 202, 203], "r112": 60, "euclidean_algorithm": 60, "ilcm": [60, 100], "seterr": 60, "r113": 60, "r114": 60, "1_": 60, "28number": 60, "negativeon": [60, 66, 281], "r115": 60, "88": [60, 96, 100], "921_": 60, "r116": 60, "one_half": 60, "holder": 60, "ieee": [60, 61], "754": 60, "r117": 60, "affin": [60, 61, 75, 196], "compactif": 60, "r118": 60, "tild": [60, 66, 230], "phase": [60, 87, 108, 143, 146, 148, 158, 159, 228], "exp1": [60, 209], "718281828": 60, "napier": 60, "r119": 60, "e_": [60, 65, 96], "28mathematical_const": 60, "r120": 60, "imaginary_unit": [60, 209], "141592654": 60, "circumfer": [60, 70], "diamet": [60, 70], "area": [60, 70, 72, 76, 77, 103, 104], "is_irr": 60, "r121": 60, "mascheroni": [60, 68], "5772157": 60, "recur": 60, "harmon": [60, 65, 100, 112, 153, 194, 209, 271], "lim": [60, 216, 276], "limits_": [60, 194, 211, 280], "ln": [60, 66, 87, 209, 211, 225, 229, 286], "r122": 60, "93mascheroni_const": 60, "catalan": [60, 65, 209], "91596559": 60, "r123": 60, "27s_constant": 60, "goldenratio": [60, 64, 210, 221], "r124": 60, "golden_ratio": 60, "tribonacciconst": 60, "tribonacci": [60, 65], "fibonacci": [60, 64, 65, 100], "predetermin": [60, 240], "8392867552141611326": 60, "r125": 60, "generalizations_of_fibonacci_numb": [60, 65], "tribonacci_numb": [60, 65], "modulo": [60, 61, 97, 100, 170, 196, 198, 199, 200, 202, 204, 205, 206, 208, 209, 212, 221], "r126": 60, "modular_multiplicative_invers": 60, "r127": 60, "extended_euclidean_algorithm": 60, "oscil": [60, 271], "conform": [60, 228, 233, 234], "r128": 60, "r129": 60, "zero_to_the_power_of_zero": 60, "r130": 60, "indeterminate_form": 60, "as_base_exp": [60, 66, 67, 247], "expand_power_bas": [60, 221], "integer_nthroot": [60, 66, 100], "floor": [60, 66, 100, 118, 199, 200, 209, 229], "integer_log": 60, "geq": [60, 61, 68, 96, 205, 222, 229, 286], "factor_": [60, 61, 100, 205, 222], "perfect_pow": [60, 100], "infix": 60, "matmul": [60, 93, 198], "as_coef_mul": 60, "undesir": [60, 114, 124, 138, 197, 200, 219], "4596": 60, "compound": [60, 129, 172], "5728": 60, "suspect": [60, 100], "5706": 60, "moot": 60, "off": [60, 70, 85, 91, 99, 101, 126, 135, 158, 196, 205, 209, 225, 240, 251, 254, 280], "nb": 60, "sensit": [60, 110, 141, 195, 202, 221, 240], "assocop": 60, "prod": [60, 199, 206, 218], "matadd": [60, 93, 209], "as_coef_add": 60, "extract_leading_ord": 60, "commutative_part": 60, "noncommutative_part": 60, "order_symbol": 60, "subprocess": [60, 209, 240, 241], "dividend": [60, 200], "rop": 60, "validrelationoper": 60, "greaterthan": [60, 209], "lessthan": [60, 209], "strictlessthan": [60, 209, 250], "lt": [60, 205, 250], "my_equ": 60, "my_inequ": 60, "reversedsign": 60, "_eval_eq": 60, "respond": 60, "boolalg": [60, 90], "client": [60, 244], "counterpart": [60, 61, 225, 276], "litter": 60, "oddbal": 60, "minor": [60, 70, 96, 209, 240], "caveat": [60, 205, 278], "succinctli": 60, "coupl": [60, 96, 138, 153, 168, 171, 194], "annoy": 60, "succinct": 60, "occasion": 60, "r131": 60, "operar": 60, "circuit": [60, 158, 161, 271], "greaterthanobject": 60, "__bool__": 60, "335": 60, "march": 60, "2012": 60, "r132": 60, "r133": 60, "r134": 60, "mdarg": 60, "fgh": 60, "vsin": 60, "vdiff": 60, "narg": [60, 202], "naturals0": [60, 209, 217, 228, 229], "evalul": 60, "fairli": [60, 68, 85, 126, 134, 183, 196], "conserv": [60, 119, 137, 185, 257, 263], "136": [60, 96], "indirect": [60, 62, 68, 100, 174, 225], "implic": [60, 90, 202], "fx": [60, 62, 195, 225, 226], "fxx": 60, "insconsist": 60, "presenc": [60, 66, 90, 106, 123, 128, 138, 225, 233], "nonvanish": 60, "_diff_wrt": 60, "_sort_variable_count": 60, "vc": 60, "vsort": 60, "collaps": [60, 168, 221], "vsort0": 60, "vi": 60, "dfx": 60, "equidist": 60, "sq2": 60, "xl": 60, "d2fdxdy": 60, "doit_numer": 60, "z0": [60, 216], "unifi": [60, 142, 198, 200, 202, 204, 205, 217], "zeroth": [60, 204], "idiff": [60, 77], "r135": 60, "legaci": [60, 87, 96, 229], "v5_2": 60, "infunct": 60, "algebraiccomput": 60, "functionclass": [60, 209, 248], "f_real": [60, 67], "f_real_inherit": [60, 67], "is_singular": [60, 67, 83], "holomorph": [60, 67, 85], "superfici": 60, "unexpect": [60, 240], "ss": [60, 200], "denom": [60, 199, 200, 204, 221], "_eval_expand_bas": 60, "_eval_expand_complex": 60, "shut": [60, 205], "unwant": [60, 227, 247], "alphabet": [60, 61, 110, 179, 197, 222, 242], "expand_hint": 60, "_eval_expand_hint": 60, "liabl": [60, 90], "metahint": 60, "myclass": 60, "_eval_expand_doubl": 60, "expand_multinomi": 60, "expand_power_exp": 60, "expand_func": [60, 65, 68], "hyperexpand": [60, 68, 82, 85, 219, 221], "div": [60, 197, 199, 200, 205, 209, 221, 281], "horner": [60, 141, 202, 205], "untouch": 60, "unexpand": [60, 199, 208, 218, 241], "nfloat": [60, 221], "dkei": 60, "mixin": [60, 247], "maxn": [60, 64, 91], "subresult": [60, 200, 203, 205], "000100000000000000": 60, "precisionexhaust": [60, 64], "maxprec": 60, "quadratur": [60, 64, 87, 225], "tanh": [60, 64, 66, 87, 206, 209, 221, 286], "oscillatori": [60, 64, 214], "osc": [60, 64], "advers": 60, "1e16": 60, "291": 60, "builtin": [60, 200, 209, 217, 250, 285], "speedup": [60, 96, 101, 202, 206, 248], "framework": [60, 117, 124, 134, 234, 240, 242, 248, 271], "slice": [60, 90, 91, 96, 102, 200, 205, 215, 217, 221, 230, 247], "tuplekind": [60, 91, 217], "parametris": [60, 217], "element_kind": [60, 91, 217], "tuple_count": 60, "setkind": [60, 91], "gcd_term": [60, 205], "isprimit": 60, "_gcd_term": 60, "terms_gcd": [60, 200, 205], "entiti": [60, 70, 73, 74, 76, 77, 85, 124, 139, 190, 228, 263, 272, 282], "broad": [60, 281], "undefinedkind": [60, 91, 217], "lex": [60, 88, 189, 197, 199, 200, 202, 205, 206, 208, 209, 221], "grlex": [60, 88, 189, 200, 205, 208, 209], "grevlex": [60, 88, 189, 197, 202, 205, 208, 209], "rev": 60, "unaffect": [60, 228], "_node": 60, "fastest": [60, 65, 87, 100, 101, 206], "undecor": 60, "breaker": 60, "hash": [60, 200, 202, 210, 221, 225, 240, 242], "collis": [60, 99, 209], "wast": [60, 97, 198], "rng": 60, "getstat": 60, "intention": 60, "tn": 60, "td": [60, 209, 285], "randrang": 60, "999": [60, 64], "238": [60, 100], "randint": [60, 96, 202], "ri": [60, 209], "rv": [60, 218, 229, 247], "nonbas": 60, "postord": 60, "descend": [60, 196, 204, 242], "subtre": [60, 209, 244], "educ": [61, 96], "cryptograph": 61, "encrypt": 61, "hide": [61, 209], "cipher": 61, "vigener": 61, "hill": [61, 68, 119, 140, 184, 191, 254], "bifid": 61, "rsa": 61, "kid": 61, "feedback": [61, 107, 110, 279], "elgam": 61, "plaintext": [61, 209], "ciphertext": 61, "monoalphabet": 61, "polyalphabet": 61, "crypto": 61, "az": [61, 222], "uppercas": [61, 219], "hello": [61, 247], "world": [61, 106, 128, 138, 247], "helloworld": 61, "check_and_join": 61, "padded_kei": 61, "puppi": 61, "opqrstuvwxi": 61, "puyoqrstvwx": 61, "artist": 61, "aphras": 61, "ara": 61, "hp": 61, "cycle_list": 61, "encipher_shift": 61, "msg": [61, 87], "decipher_shift": 61, "gonavybeatarmi": 61, "ct": [61, 89, 202], "hpobwzcfbubsnz": 61, "deciph": 61, "l1": [61, 70, 72, 73, 118, 121, 127, 139, 200, 202, 205, 222, 229], "l2": [61, 72, 73, 118, 121, 127, 160, 176, 200, 202, 229], "caesar": 61, "juliu": 61, "suetoniu": 61, "protect": [61, 209], "militari": 61, "nephew": 61, "augustu": 61, "reportedli": 61, "r136": 61, "caesar_ciph": 61, "r137": 61, "caesarsmethod": 61, "encipher_rot13": 61, "rot13": 61, "caeser": 61, "midwai": 61, "decipher_rot13": 61, "r138": 61, "decrypt": 61, "tbanilorngnezl": 61, "encipher_affin": 61, "_invers": 61, "cx": [61, 104], "recov": [61, 87, 179, 202, 204, 205, 222, 225], "decipher_affin": 61, "r139": 61, "affine_ciph": 61, "reciph": 61, "navi": 61, "beat": 61, "armi": 61, "trobmvenbgbalv": 61, "encipher_atbash": 61, "enciph": 61, "atbash": 61, "hebrew": 61, "decipher_atbash": 61, "tlmzebyvzgzinb": 61, "r140": 61, "encipher_substitut": 61, "oeyag": 61, "034": 61, "60n": 61, "v4b3": 61, "rm4": 61, "immateri": 61, "anyv": 61, "wherebi": 61, "r141": 61, "substitution_ciph": 61, "encipher_vigener": 61, "me": [61, 124, 141, 184, 209, 231], "mondai": 61, "qrgkkthrzqebpr": 61, "krypto": 61, "sculptur": 61, "cia": 61, "headquart": 61, "r143": 61, "decipher_vigener": 61, "alp": 61, "palimpsest": 61, "emufphzlrfaxyusdjkzldkrnshgnfivj": 61, "betweensubtleshadingandtheabsenc": 61, "blais": 61, "sixteenth": 61, "centuri": [61, 196], "diplomat": 61, "accid": [61, 248], "invent": [61, 204, 227, 280], "giovan": 61, "batista": 61, "belaso": 61, "1553": 61, "civil": [61, 103], "war": 61, "confederaci": 61, "brass": 61, "nsa": 61, "museum": 61, "fort": 61, "mead": 61, "r142": 61, "sender": 61, "assembl": [61, 85, 216], "concaten": [61, 91], "frequenc": [61, 87, 108, 110, 148, 150, 158, 175], "kasiski": 61, "discov": [61, 85, 114, 233, 282], "babbag": 61, "unbreak": 61, "ye": [61, 90, 225], "gonavybeatarmyyesyoucan": 61, "gold": 61, "auto_kei": 61, "goldbuggonavybeatarmyy": 61, "mcydwshkogamkzcelyfgayr": 61, "pt": [61, 69, 70, 71, 73, 74, 75, 76, 215], "vigenere_ciph": 61, "archiv": [61, 140, 222], "20071116100808": 61, "r144": 61, "filebox": 61, "vt": 61, "batman": 61, "goo": 61, "gl": 61, "ijr22d": 61, "decod": 61, "qrgk": 61, "kt": [61, 129], "hrzqe": 61, "bpr": 61, "meetmeonmondai": 61, "encipher_hil": 61, "z_": [61, 221], "r145": 61, "lester": 61, "1920": 61, "r146": 61, "polygraph": 61, "bare": [61, 119], "ceil": [61, 66, 100, 118, 209], "l_1": [61, 65, 111, 194, 219, 235], "l_t": 61, "c_t": 61, "l_i": [61, 194, 219], "decipher_hil": 61, "hill_ciph": 61, "june": [61, 96], "juli": [61, 222], "1929": 61, "306": 61, "312": [61, 184, 227, 254, 256], "ueqdueodoctcwq": 61, "st": [61, 87, 174], "hjeb": 61, "stqq": 61, "ispk": 61, "stzz": 61, "hd": 61, "ormv": 61, "uiki": 61, "encipher_bifid": 61, "polybiu": 61, "printabl": 61, "bifid5": 61, "decipher_bifid": 61, "encipher_bifid5": 61, "encipher_bifid6": 61, "r147": 61, "bifid_ciph": 61, "ieilhhfstsfqy": 61, "ieilh": 61, "hfst": 61, "fqyej": 61, "bmtwmg": 61, "bio": 61, "gold_bug": 61, "hg2sfuei7t": 61, "pug": 61, "heldo": 61, "wor6d": 61, "bifid5_squar": 61, "5x5": 61, "cap": [61, 64, 174, 217, 228], "tradition": [61, 68], "decipher_bifid5": 61, "round_trip": 61, "josi": 61, "osi": 61, "iosi": 61, "qiq": 61, "1901": 61, "felix": 61, "delastel": 61, "onto": [61, 73, 74, 75, 85, 89, 96, 99, 101, 204], "helen": 61, "cryptanalysi": 61, "german": 61, "fridai": 61, "ieilehfstsfxe": 61, "okai": 61, "decipher_bifid6": 61, "8am": 61, "kfkljjhf5mmmktfrgpl": 61, "meetmeonmondayat8am": 61, "bifid6_squar": 61, "6x6": 61, "rsa_public_kei": 61, "totient": [61, 100], "carmichael": [61, 100], "p_n": [61, 65, 68, 87, 205], "multiprim": 61, "land": 61, "reduced_toti": [61, 100], "uniquenss": 61, "rsa_private_kei": 61, "e_0": 61, "canonicalz": 61, "61": [61, 65, 76, 96, 100, 205, 211], "3233": 61, "797": 61, "1577": 61, "multipow": 61, "cryptosystem": 61, "coprim": [61, 87, 100, 170, 202, 222], "30030": 61, "becam": [61, 134], "hardest": 61, "claim": [61, 193, 219, 228], "encipher_rsa": 61, "decipher_rsa": 61, "r148": 61, "rsa_": 61, "28cryptosystem": 61, "r149": 61, "cacr": 61, "uwaterloo": 61, "techreport": 61, "2006": [61, 218], "cacr2006": 61, "r150": 61, "springer": [61, 87, 100, 202, 203, 225], "1007": 61, "2fbfb0055738": 61, "r151": 61, "itii": 61, "manuscript": 61, "1381": 61, "2753": 61, "413": 61, "1193": 61, "823": 61, "r152": 61, "r153": 61, "r154": 61, "r155": 61, "bmod": [61, 205, 209], "vice": [61, 87, 100, 103, 164, 184, 196, 200, 258, 259, 278], "versa": [61, 87, 100, 103, 164, 184, 196, 200, 258, 259, 278], "asymmetr": [61, 76], "puk": 61, "prk": 61, "chines": [61, 100, 202], "k_1": [61, 100, 202, 219], "k_2": 61, "k_n": [61, 68, 202], "p_3": [61, 192], "k_3": 61, "moduli": [61, 100, 202], "2048": [61, 100, 209], "overhead": [61, 101, 206], "modular": [61, 100, 170, 203, 228], "crt": [61, 100, 202], "overcompens": 61, "new_msg": 61, "kid_rsa_public_kei": 61, "grade": [61, 88, 189, 205], "school": [61, 218], "bob": [61, 118], "369": 61, "58": [61, 96, 235], "kid_rsa_private_kei": 61, "encipher_kid_rsa": 61, "200": [61, 91, 96, 100, 103, 108, 254], "161": 61, "decipher_kid_rsa": 61, "pub": [61, 254], "pri": 61, "encode_mors": 61, "sep": [61, 209, 226, 240], "mors": 61, "attack": 61, "flank": 61, "r156": 61, "morse_cod": 61, "decode_mors": 61, "word_sep": 61, "mc": [61, 129], "east": 61, "r157": 61, "lfsr_sequenc": 61, "lfsr": 61, "c_k": 61, "golomb": [61, 100], "g157": 61, "autocorrel": 61, "lim_": [61, 66, 68, 85, 87, 216, 276, 280], "balanc": [61, 140, 196, 229, 240], "solomon": 61, "aegean": 61, "park": 61, "laguna": 61, "1967": [61, 203], "lfsr_autocorrel": 61, "lfsr_connection_polynomi": 61, "massei": 61, "m158": 61, "jame": [61, 202], "synthesi": 61, "bch": 61, "tran": 61, "122": [61, 63, 68], "127": [61, 100], "elgamal_public_kei": 61, "elgamal_private_kei": 61, "1031": 61, "636": 61, "212": [61, 87, 203], "dlp": 61, "is_primitive_root": [61, 100], "encipher_elgam": 61, "c2": [61, 70, 77, 91, 93, 118, 160, 174, 217, 225, 229, 257, 260, 287], "encryp": 61, "decipher_elgam": 61, "eucliden": 61, "dh_public_kei": 61, "dh_private_kei": 61, "_p": [61, 174, 200, 202, 204, 216, 219, 227], "_g": 61, "diffi": 61, "hellman": [61, 100], "publicli": 61, "secretli": 61, "dh_shared_kei": 61, "sk": 61, "gm_public_kei": 61, "goldwass": 61, "micali": 61, "gm_private_kei": 61, "b_n": [61, 65, 89, 196, 212], "jacobi_symbol": [61, 100], "reconstruct": [61, 96, 202, 222, 281], "residuos": 61, "entropi": [61, 229], "encipher_gm": 61, "public_kei": 61, "gm": [61, 177], "decipher_gm": 61, "encipher_railf": 61, "rail": 61, "railfenc": 61, "horel": 61, "ollwd": 61, "r160": 61, "rail_fence_ciph": 61, "decipher_railf": 61, "diffgeom": 62, "euclidean": [62, 73, 75, 184, 200, 202, 205], "r161": 62, "chart": [62, 195], "r162": 62, "sussman": 62, "wisdom": 62, "farr": 62, "2013": [62, 72, 91, 284], "cartesian": [62, 103, 142, 147, 161, 164, 169, 190, 195, 196, 217, 228, 247, 258, 259, 261, 262, 271], "polar": [62, 66, 68, 70, 76, 103, 112, 144, 195, 217, 221, 228, 271], "relation_dict": 62, "car2d": 62, "pol": 62, "coordinatesymbol": 62, "jacobian": [62, 96, 138, 227], "jacobian_determin": 62, "r163": 62, "coordinate_system": 62, "base_oneform": 62, "coord_index": 62, "oneform": 62, "base_scalar": 62, "basescalarfield": 62, "base_vector": [62, 254], "coord_funct": 62, "to_si": 62, "coord": [62, 75, 77, 114, 172, 188], "immutabledensematrix": [62, 91, 92, 93, 94, 229], "rn": 62, "r2_r": 62, "r2_p": 62, "jacobian_matrix": 62, "point_to_coord": 62, "coord_si": [62, 257], "imbu": 62, "difficulti": [62, 125], "arriv": [62, 202, 219, 221, 225, 229, 286], "inappropri": 62, "poin": 62, "unappropri": 62, "fy": [62, 195, 226], "ftheta": 62, "basevectorfield": 62, "point_p": 62, "point_r": 62, "s_field": 62, "dxi": 62, "v1": [62, 73, 96, 121, 141, 184, 185, 188, 229, 248, 254, 257, 258, 259, 260], "v2": [62, 73, 96, 121, 184, 185, 188, 248, 254, 257, 258, 259, 260], "v_1": [62, 204, 227], "v_2": [62, 204], "e_x": [62, 235], "e_i": [62, 196, 219, 235], "e_r": 62, "c_xy": 62, "c_xr": 62, "unfortun": [62, 64, 101, 208, 222], "e_rho": 62, "form_field": 62, "exterior": [62, 76], "dg": 62, "tensorproduct": [62, 171, 173, 230, 231], "multilinear": 62, "wedg": [62, 85], "tp1": 62, "tp": [62, 146, 173, 200], "wedgeproduct": 62, "wp1": 62, "liederiv": 62, "v_field": 62, "transport": 62, "pushforward": 62, "e_theta": 62, "basecovarderivativeop": 62, "christoffel": 62, "metric_to_christoffel_2nd": 62, "ch": [62, 96, 222], "cvd": 62, "covarderivativeop": 62, "intcurve_seri": 62, "vector_field": [62, 261], "start_point": 62, "dt": [62, 68, 128, 141, 183, 184, 186, 192, 193, 205, 225, 286], "f_i": [62, 85, 96, 202, 206], "movement": 62, "intcurve_diffequ": 62, "init_cond": 62, "f_1": [62, 65, 68, 85, 110, 120, 123, 142, 196, 202, 205, 225], "f_0": [62, 65, 120, 202], "vectors_in_basi": 62, "kept": [62, 176, 193, 247, 281], "twoform_to_matrix": 62, "twoform": 62, "e_j": 62, "metric_to_christoffel_1st": 62, "levi": [62, 68, 229, 235], "civita": [62, 68, 235], "metric_to_riemann_compon": 62, "non_trivial_metr": 62, "dtheta": 62, "drho": 62, "metric_to_ricci_compon": 62, "ricci": 62, "fft": [63, 141], "ifft": 63, "ntt": 63, "intt": 63, "fwht": 63, "ifwht": 63, "mobius_transform": 63, "inverse_mobius_transform": 63, "convolution_fft": 63, "convolution_ntt": 63, "convolution_fwht": 63, "convolution_subset": 63, "covering_product": 63, "intersecting_product": 63, "radix": 63, "r164": 63, "coolei": 63, "93tukey_fft_algorithm": 63, "r165": 63, "fastfouriertransform": 63, "r166": 63, "r167": 63, "pz": [63, 108, 235], "643": [63, 100], "767": 63, "387": 63, "415": 63, "384": 63, "353": [63, 96], "r168": 63, "apfloat": 63, "r169": 63, "numbertheoretictransform": 63, "r170": 63, "discrete_fourier_transform_": 63, "r171": 63, "r172": 63, "r173": 63, "wht": 63, "r174": 63, "hadamard_transform": 63, "r175": 63, "fast_walsh": 63, "93hadamard_transform": 63, "r176": 63, "r177": 63, "mobiu": [63, 100], "lattic": [63, 222], "bitmask": 63, "r178": 63, "b6bius_inversion_formula": 63, "r179": 63, "csail": 63, "mit": 63, "rrw": 63, "conv": 63, "r180": 63, "arxiv": [63, 65, 68, 96, 112, 205, 247], "1211": 63, "0189": 63, "r181": 63, "r182": 63, "r183": 63, "888": 63, "444": 63, "1283": 63, "19351": 63, "14219": 63, "15502": 63, "44": [63, 65, 96, 100, 218, 229], "41": [63, 70, 96, 100, 200, 222], "63": [63, 96, 100], "r184": 63, "convolution_theorem": 63, "r185": 63, "333": [63, 100], "555": 63, "222": 63, "666": 63, "15555": 63, "19404": 63, "r186": 63, "r187": 63, "68": [63, 88, 96, 100, 222], "48": [63, 70, 104, 222, 227, 229, 276], "2057": 63, "1870": 63, "r188": 63, "radioeng": 63, "fulltext": 63, "2002": [63, 196, 203, 206], "02_03_40_42": 63, "r189": 63, "r190": 63, "r191": 63, "AND": [63, 90], "327": [63, 225], "r192": 63, "44288293815837": 64, "4429": 64, "4428829381583662470158809900606936986146216893757": 64, "28902548222223624241": 64, "091999668350375232456": 64, "14159265358979": [64, 68, 227], "333333333333333": [64, 199, 221], "1415926535": 64, "7182818284": 64, "100000": [64, 100, 108], "951": 64, "95678796130331164628399634646042209010610577945815": 64, "gmpy": [64, 199, 200, 285], "googl": [64, 194, 195, 228], "100000000000000": 64, "1000000000": 64, "125000000000000000000000000000": 64, "100000000000000005551115123126": 64, "100000000000000000000000000000": 64, "1415": 64, "uncertainti": [64, 179], "003": 64, "31417": 64, "propag": [64, 73, 145, 148], "5000": [64, 103], "50000000000000000000000000000": 64, "varphi": [64, 68, 204, 209, 225], "erron": 64, "34665576869e": 64, "208": [64, 205], "64613129282185e": 64, "60123853010113e": 64, "210": [64, 100, 222], "thousand": [64, 100, 275], "43466557686937456435688527675040625802564660517371780402481729089536555417949051890403879840079255169295922593080322634775209689623239873322471161642996440906533187938298969649928516003704476137795166849228875": 64, "binet": 64, "104": 64, "1336": 64, "portion": [64, 76, 91, 96], "meaningless": 64, "012297": 64, "9562288417661": 64, "956": 64, "29128599706266": 64, "2912859970626635404072825905956005414986193682745": 64, "14159265358979323846264338328": 64, "integrand": [64, 68, 84, 85, 87, 219], "struggl": [64, 208], "346": 64, "34635637913639": 64, "dealt": [64, 85], "504067061906928": 64, "50406706190692837199": 64, "wrap_lin": [64, 87, 88, 96, 104, 189, 196, 197, 208, 209, 225], "intgrl": 64, "extrapol": [64, 216], "richardson": [64, 216, 228], "slowli": [64, 216], "64493406684823": 64, "577215664901533": 64, "57721566490153286060651209008240243104215933593992": 64, "10000000": [64, 205], "20000000": [64, 205], "693147255559946": 64, "tune": [64, 88, 189, 209], "worthwhil": 64, "hypergeometr": [64, 65, 78, 84, 85, 203, 220, 221, 225, 227, 229, 266, 286], "ramanujan": [64, 65, 100], "9801": 64, "1103": 64, "26390": 64, "396": [64, 124], "141592653589793238462643383279502884197169399375105820974944592307816406286208": 64, "99862803482534211706798214808651328230664709384460955058223172535940812848111745": 64, "02841027019385211055596446229489549303819644288109756659334461284756482337867831": 64, "355": [64, 100, 203], "113": [64, 100, 222], "33333": [64, 87], "635": 64, "504": [64, 203], "130198866629986772369127970337": 64, "49": [64, 65, 100, 104, 202, 222], "___________": [64, 104, 225], "bell": [65, 158, 211, 247], "k_sym": 65, "binom": [65, 100, 229, 286], "dotsc": [65, 211], "j_1": [65, 153, 154, 171, 194, 211, 230], "j_2": [65, 153, 154, 171, 194, 211], "dotsb": [65, 211], "atop": [65, 68, 211, 219], "2j_2": [65, 211], "3j_2": [65, 211], "j_": [65, 68, 85, 87, 171, 211, 219, 280], "bernoulli": [65, 68, 205, 209, 225, 227, 229], "877": 65, "4140": 65, "21147": 65, "115975": 65, "846749014511809332450147": 65, "luca": [65, 100, 209, 215], "genocchi": [65, 68, 205], "r193": 65, "bell_numb": 65, "r194": 65, "bellnumb": 65, "r195": 65, "bellpolynomi": 65, "hurwitz": [65, 68], "6k": 65, "appel": [65, 68], "confer": [65, 101, 284], "r200": 65, "66": [65, 91, 96, 205, 209], "1000001": 65, "andr": [65, 205], "appellseq": [65, 205], "bernoulli_poli": [65, 205], "r196": 65, "bernoulli_numb": 65, "r197": 65, "bernoulli_polynomi": [65, 205], "r198": 65, "bernoullinumb": 65, "r199": 65, "bernoullipolynomi": 65, "luschni": [65, 68, 205], "manifesto": 65, "r201": 65, "2009": [65, 68, 100, 194, 205], "06743": [65, 68, 205], "_k": [65, 68, 87, 194, 204, 229], "6435": 65, "pascal": [65, 100], "4th": [65, 66, 82, 96, 100, 141], "195": 65, "r202": 65, "johndcook": 65, "binomial_coeffici": [65, 100], "c_n": [65, 68, 89, 205, 225], "429": [65, 209], "1430": 65, "4862": 65, "39764993382373624267": 65, "020884341620842555705": 65, "r203": 65, "catalan_numb": 65, "r204": 65, "catalannumb": [65, 209], "r205": 65, "r206": 65, "geomet": [65, 196], "mathcircl": 65, "2j": [65, 202, 229], "1385": [65, 205], "272": [65, 205], "7936": [65, 205], "2702765": 65, "4096": 65, "euler_poli": [65, 205], "r207": 65, "euler_numb": 65, "r208": 65, "eulernumb": 65, "r209": 65, "alternating_permut": 65, "r210": 65, "alternatingpermut": 65, "swing": 65, "factorial2": [65, 175, 209], "fallingfactori": [65, 209], "subfactori": [65, 209, 247], "derang": [65, 247], "r212": 65, "generate_derang": [65, 247], "r211": 65, "r213": 65, "double_factori": 65, "texttt": [65, 217], "r214": 65, "r215": 65, "paul": [65, 244], "235": 65, "268": 65, "1995": [65, 203, 221, 227], "f_z": [65, 190, 261], "f_2": [65, 85, 110, 120, 123, 142, 202, 219, 225], "r217": 65, "fibonacci_numb": 65, "r218": 65, "fibonaccinumb": 65, "t_0": [65, 222], "149": [65, 100], "r219": 65, "r220": 65, "tribonaccinumb": 65, "r221": 65, "oei": [65, 68, 100, 205], "a000073": 65, "137": [65, 96, 112], "205": [65, 85, 219], "5269": 65, "761": 65, "280": 65, "83711": 65, "27720": 65, "30247": 65, "9900": 65, "983697455232980674869851942390639915940": 65, "r222": 65, "harmonic_numb": 65, "r223": 65, "harmonicnumb": [65, 209], "r224": 65, "harmonicnumber2": 65, "l_0": [65, 111, 235, 236], "47": [65, 68, 96, 100, 112, 147, 179, 208], "76": [65, 68, 96, 100, 202, 205], "r225": 65, "lucas_numb": 65, "r226": 65, "lucasnumb": 65, "2t": 65, "genocchi_poli": [65, 205], "r227": 65, "genocchi_numb": 65, "r228": 65, "genocchinumb": 65, "r229": 65, "mathcal": [65, 66, 85, 110, 139, 171, 194, 205, 217], "a000111": [65, 205], "zigzag": 65, "li": [65, 68, 76, 87, 100, 174, 209, 264], "50521": [65, 205], "691": 65, "2730": 65, "andre_poli": [65, 205], "r230": 65, "r231": 65, "eulerzigzagnumb": 65, "r232": 65, "irrelev": 65, "r233": 65, "number_theori": 65, "r234": 65, "pentagonal_number_theorem": 65, "multifactori": 65, "pochhamm": [65, 209, 221], "r235": 65, "r236": 65, "pochhammer_symbol": 65, "274": 65, "225": [65, 100, 203], "511": 65, "9330": 65, "34105": 65, "42525": 65, "22827": 65, "5880": 65, "750": 65, "r237": 65, "stirling_numbers_of_the_first_kind": 65, "r238": 65, "stirling_numbers_of_the_second_kind": 65, "multiset": [65, 85, 244, 247], "nc": 65, "nt": [65, 247], "babi": [65, 100, 247], "aa": [65, 194], "bb": [65, 194, 221, 247], "multiset_combin": [65, 247], "aab": [65, 247], "aabc": 65, "aaaabbbbcccc": 65, "m_1": [65, 110, 153, 171, 194, 222], "m_2": [65, 123, 142, 153, 171, 194], "m_k": 65, "r239": 65, "r240": 65, "tinyurl": 65, "cep849r": 65, "ba": [65, 247], "multiset_permut": [65, 247], "r241": 65, "aabbc": 65, "mississippi": [65, 247], "609": 65, "1521": 65, "1768": 65, "1224": [65, 100], "579": 65, "197": 65, "r242": 65, "undergradu": 65, "csse": 65, "uwa": 65, "au": 65, "cits7209": 65, "707106781186548": 66, "tangent": [66, 70, 72, 76, 87, 206, 225], "643501108793284": 66, "r243": 66, "ib": [66, 129], "complex_conjug": 66, "polar_lift": [66, 68, 221], "periodic_argu": 66, "principal_branch": [66, 85], "r247": 66, "csc": [66, 102, 209, 218], "sec": [66, 87, 108, 204, 209, 218, 286], "acsc": [66, 209], "asec": [66, 209], "acot": [66, 209], "r244": 66, "trigonometric_funct": 66, "r245": 66, "r246": 66, "elementaryfunct": 66, "trigonometryangl": 66, "r248": 66, "r249": 66, "r250": 66, "r251": 66, "r252": 66, "r253": 66, "cotang": [66, 206], "r254": 66, "r255": 66, "r256": 66, "secant": [66, 205], "r257": 66, "r258": 66, "r259": 66, "cosec": 66, "r260": 66, "r261": 66, "r262": 66, "unnorm": [66, 68], "qquad": [66, 179, 202], "jn": [66, 68, 171, 205, 209, 280], "spheric": [66, 112, 118, 153, 194, 195, 205, 254, 258, 259, 280], "r263": 66, "sinc_funct": 66, "asinh": [66, 209], "r264": 66, "inverse_trigonometric_funct": 66, "r265": 66, "r266": 66, "r267": 66, "r268": 66, "r269": 66, "r270": 66, "r271": 66, "r272": 66, "arctan": [66, 206, 209], "acoth": [66, 209], "r273": 66, "r274": 66, "arccot": [66, 209], "r278": 66, "r275": 66, "r276": 66, "r277": 66, "arcsec": [66, 209], "r279": 66, "r280": 66, "r281": 66, "arccsc": [66, 209], "quadrant": [66, 200, 228], "clock": [66, 218], "reurn": 66, "r282": 66, "r283": 66, "r284": 66, "arctan2": [66, 209], "hyperbolicfunct": 66, "coth": [66, 209, 221], "acosh": [66, 209], "atanh": [66, 206, 209, 219], "sech": [66, 209], "csch": [66, 209], "asech": [66, 209], "r285": 66, "hyperbolic_funct": 66, "r286": 66, "r287": 66, "arcsech": [66, 209], "acsch": [66, 209], "r288": 66, "r289": 66, "r290": 66, "arccsch": [66, 209], "567": 66, "r291": 66, "r292": 66, "ceilingfunct": 66, "r293": 66, "r294": 66, "floorfunct": 66, "roundfunct": 66, "r295": 66, "lfloor": [66, 200, 228, 229], "rfloor": [66, 200, 228, 229], "fractional_part": 66, "r296": 66, "fractionalpart": 66, "lambertw": [66, 206, 209, 227, 228, 287], "r297": 66, "w_k": 66, "635564016364870": 66, "34747534407696": 66, "41624341514535": 66, "lambert_w_funct": 66, "exprcondpair": 66, "cond": [66, 85, 87, 217], "piecewise_fold": 66, "folded_cond": 66, "ITE": [66, 90, 209], "piecewise_exclus": 66, "_eval_integr": [66, 87], "piecewise_integr": 66, "as_expr_set_pair": 66, "skip_nan": 66, "mutual": [66, 85, 193], "conjunct": [66, 90, 195, 219, 240, 286], "identityfunct": 66, "supremum": [66, 217], "r298": 66, "directed_complete_partial_ord": 66, "r299": 66, "lattice_": 66, "28order": 66, "global_paramet": 66, "real_root": [66, 205, 227], "rootoftool": [66, 96, 205], "r300": 66, "square_root": 66, "r301": 66, "r302": 66, "root_of_un": 66, "r303": 66, "principal_valu": [66, 87], "r304": 66, "cuberoot": 66, "powdenest": [66, 221], "misc": [66, 91, 250], "r305": 66, "r306": 66, "r307": 66, "cube_root": 66, "r308": 66, "delta_funct": [68, 87], "int_": [68, 84, 85, 87, 205, 212, 276, 280], "sum_i": [68, 216], "is_simpl": 68, "tensor_funct": 68, "kroneckerdelta": [68, 93, 174, 209, 221], "r309": 68, "deltafunct": [68, 87], "h0": 68, "electron": [68, 112, 218], "signal": [68, 90, 100, 108, 110, 141, 202, 281], "improp": [68, 87], "convolut": [68, 211], "r310": 68, "heavisidestepfunct": 68, "r311": 68, "iv": [68, 206], "105": [68, 100, 205, 222], "parg": 68, "singularity_funct": 68, "singularityfunct": [68, 87, 103], "macaulai": 68, "heavisidediracdelta": 68, "r312": 68, "r313": 68, "r314": 68, "r315": 68, "r316": 68, "setminu": [68, 85], "17805383034794561964694160130": 68, "65092319930185633889": 68, "8724366472624298171": 68, "r317": 68, "r318": 68, "r319": 68, "loggammafunct": 68, "r320": 68, "espinosa": 68, "moll": 68, "r325": 68, "19093197": 68, "5173168": 68, "ni": [68, 100], "r321": 68, "polygamma_funct": 68, "r322": 68, "polygammafunct": 68, "r323": 68, "r324": 68, "polygamma2": 68, "2004": [68, 203, 222], "115": 68, "r326": 68, "digamma_funct": 68, "r327": 68, "digammafunct": 68, "r328": 68, "r329": 68, "trigamma_funct": 68, "r330": 68, "trigammafunct": 68, "r331": 68, "int_x": 68, "_1f_1": 68, "confluent": [68, 219], "xt": 68, "expint": [68, 209], "r332": 68, "incomplete_gamma_funct": 68, "upper_incomplete_gamma_funct": 68, "r333": 68, "r334": 68, "r335": 68, "gamma2": 68, "r336": 68, "gamma3": 68, "r337": 68, "exponential_integr": 68, "relation_with_other_funct": 68, "int_0": [68, 85, 87, 276, 286], "r338": 68, "lower_incomplete_gamma_funct": 68, "r339": 68, "r340": 68, "r341": 68, "r342": 68, "multigamma": 68, "gamma_p": 68, "r343": 68, "multivariate_gamma_funct": 68, "beta_funct": 68, "eulerian": 68, "02671848900111377452242355235388489324562": 68, "2112723729365330143": 68, "7655283165378005676": 68, "r344": 68, "r345": 68, "betafunct": 68, "r346": 68, "error_funct": 68, "999999984582742099719981147840": 68, "1296959": 68, "73071763923152794095062": 68, "r347": 68, "r348": 68, "r349": 68, "r350": 68, "0000000154172579002800188521596734869": 68, "r351": 68, "r352": 68, "r353": 68, "r354": 68, "5648024145755525987042919132": 68, "995322265018952734162069256367": 68, "r355": 68, "r356": 68, "r357": 68, "r358": 68, "179143454621291692285822705344": 68, "r359": 68, "inverse_funct": 68, "r360": 68, "inverseerf": [68, 209], "r361": 68, "r362": 68, "inverseerfc": [68, 209], "r363": 68, "inverseerf2": 68, "fresnelintegr": 68, "343415678363698242195300815958": 68, "fresnelc": [68, 209, 219], "r364": 68, "fresnel_integr": 68, "r365": 68, "r366": 68, "r367": 68, "r368": 68, "wrench": 68, "jr": 68, "vicki": 68, "allei": 68, "488253406075340754500223503357": 68, "r369": 68, "r370": 68, "r371": 68, "r372": 68, "r373": 68, "background": [68, 88, 189, 192, 284], "cauchi": [68, 85, 87, 200, 225, 229], "219383934395520": 68, "21938393439552": 68, "shi": [68, 85, 209, 219], "e1": [68, 70, 77, 124, 199, 204, 216, 225, 228], "hyperbol": [68, 206, 228, 282, 286], "r374": 68, "r375": 68, "r376": 68, "sfu": [68, 87], "cbm": [68, 87], "aand": [68, 87], "page_228": 68, "int_1": [68, 85], "zt": [68, 85], "unbranch": [68, 85], "meijerg": [68, 79, 85, 87, 209, 229, 286], "postiv": 68, "r377": 68, "r378": 68, "expintegral": [68, 209], "r379": 68, "04516378011749278484458888919": 68, "0652795784357498247001125598": 68, "08346052231061726610939702133": 68, "soldner": 68, "45136923488338": 68, "r380": 68, "logarithmic_integr": 68, "r381": 68, "logarithmicintegr": 68, "r382": 68, "r383": 68, "soldnersconst": 68, "92242131492155809316615998938": 68, "r384": 68, "r385": 68, "r386": 68, "r387": 68, "trigonometric_integr": 68, "_1": [68, 96, 118, 184, 194, 219, 248], "somewhat": [68, 87, 124, 200], "r388": 68, "r389": 68, "r390": 68, "laurent": [68, 200, 206, 225], "j_n": [68, 171], "r391": 68, "r392": 68, "r393": 68, "r394": 68, "yn": [68, 209, 215], "r395": 68, "i_": [68, 85, 219, 229, 230], "iz": 68, "r396": 68, "k_": [68, 85, 119, 136, 137], "r397": 68, "hankel1": [68, 209], "hankel": [68, 87], "iy_": 68, "hankel2": [68, 209], "r398": 68, "hankelh1": [68, 209], "r399": 68, "hankelh2": [68, 209], "orthopoli": [68, 205], "spherical_bessel_fn": [68, 205], "3j": [68, 153, 194], "099419756723640344491": 68, "054525080242173562897": 68, "r400": 68, "y_n": [68, 222], "18525034196069722536": 68, "014895573969924817587": 68, "r401": 68, "jn_zero": 68, "besseljzero": 68, "sph_jn": 68, "7635": 68, "095": 68, "323": [68, 100], "515": 68, "marcumq": 68, "marcum": 68, "q_m": 68, "r402": 68, "marcum_q": 68, "r403": 68, "airybas": 68, "airyai": [68, 209, 225], "ai": [68, 100, 205, 222, 250, 286], "airyaiprim": [68, 209], "22740742820168557599192443603787379946077222541710": 68, "airybi": [68, 209, 225], "airybiprim": [68, 209], "r404": 68, "airy_funct": 68, "r405": 68, "r406": 68, "encyclopediaofmath": 68, "r407": 68, "airyfunct": 68, "41230258795639848808323405461146104203453483447240": 68, "r408": 68, "r409": 68, "r410": 68, "r411": 68, "61825902074169104140626429133247528291577794512415": 68, "r412": 68, "r413": 68, "r414": 68, "r415": 68, "27879516692116952268509756941098324140300059345163": 68, "r416": 68, "r417": 68, "r418": 68, "r419": 68, "bspline": 68, "bspline_basi": 68, "knot": 68, "bspline_basis_set": 68, "r420": 68, "interpolating_splin": 68, "131": [68, 184], "39": [68, 100, 208], "interpolating_poli": [68, 205], "zeta_funct": 68, "admit": [68, 225], "lerch": 68, "transcend": 68, "lerchphi": [68, 209], "dirichlet_eta": [68, 209], "20205690315959": 68, "polylog": [68, 209], "r421": 68, "r422": 68, "hurwitz_zeta_funct": 68, "r423": 68, "dirichlet_eta_funct": 68, "r424": 68, "polylogarithm": 68, "sheet": [68, 218], "phi_0": 68, "ze": 68, "r425": 68, "bateman": 68, "erdelyi": 68, "1953": [68, 204], "york": [68, 85, 140, 219, 227], "mcgraw": [68, 119, 140, 184, 191, 254], "r426": 68, "r427": 68, "lerch_transcend": 68, "stieltj": [68, 209], "gamma_": [68, 111, 113], "r428": 68, "stieltjes_const": 68, "ap": [68, 72, 219], "bq": [68, 197, 198, 219], "a_p": [68, 85, 219, 286], "b_q": [68, 85, 219, 286], "_pf_q": [68, 219, 225, 286], "unicod": [68, 88, 96, 189, 209, 240, 280], "r429": 68, "r430": 68, "generalized_hypergeometric_funct": 68, "convergence_stat": 68, "radius_of_converg": 68, "radiu": [68, 70, 74, 76, 131, 133, 143, 147, 195, 228, 229, 264], "meijer": [68, 78, 86, 87, 266, 276, 286], "mellin": [68, 87], "barn": 68, "b_m": [68, 85, 227], "confusingli": 68, "int_l": [68, 85, 219], "contour": [68, 70, 85, 195, 219], "__1": 68, "subvector": 68, "aother": 68, "bm": 68, "bother": [68, 281], "slater": [68, 219], "allow_hyp": [68, 221], "subsum": 68, "r431": 68, "r432": 68, "meijer_g": 68, "get_period": [68, 85], "appellf1": [68, 209], "0063339426292673": 68, "172870711": 68, "659936": 68, "15605338197184": 68, "r433": 68, "appell_seri": 68, "r434": 68, "hypergeometricfunct": 68, "elliptic_integr": 68, "elliptic_k": [68, 209], "tfrac": [68, 225, 229], "eccentr": [68, 70], "50923695405127": 68, "625146415202697": 68, "elliptic_f": [68, 209], "r435": 68, "r436": 68, "ellipticintegr": 68, "elliptick": [68, 209], "909449841483": 68, "74720545502474": 68, "r437": 68, "r438": 68, "ellipticf": 68, "elliptic_": [68, 70, 209], "55203744279187": 68, "290764986058437": 68, "991052601328069": 68, "81879421395609": 68, "r439": 68, "r440": 68, "elliptice2": 68, "r441": 68, "elliptic": [68, 209], "elliptic_pi": [68, 209], "50232379629182": 68, "760939574180767": 68, "29136443417283": 68, "32555634906645": 68, "r442": 68, "r443": 68, "ellipticpi3": 68, "r444": 68, "ellipticpi": [68, 209], "mathieu_funct": 68, "mathieubas": 68, "mathieusprim": [68, 209], "mathieuc": [68, 209], "mathieucprim": [68, 209], "r445": 68, "r446": 68, "r447": 68, "r448": 68, "mathieuandspheroidalfunct": 68, "r449": 68, "r450": 68, "r451": 68, "r452": 68, "r453": 68, "r454": 68, "r455": 68, "r456": 68, "r457": 68, "r458": 68, "r459": 68, "r460": 68, "chebyshevu": [68, 209], "chebyshevt_root": 68, "chebyshevu_root": 68, "assoc_legendr": [68, 209], "hermite_prob": 68, "jacobi_poli": [68, 205], "gegenbauer_poli": [68, 205], "chebyshevt_poli": [68, 205], "chebyshevu_poli": [68, 205], "hermite_poli": [68, 205], "legendre_poli": [68, 205], "laguerre_poli": [68, 205], "r461": 68, "jacobi_polynomi": 68, "r462": 68, "jacobipolynomi": 68, "r463": 68, "jacobip": [68, 209], "jacobi_norm": 68, "normilz": 68, "p_m": 68, "delta_": [68, 171, 179, 194], "r464": 68, "r465": 68, "r466": 68, "hermite_prob_poli": [68, 205], "r467": 68, "gegenbauer_polynomi": 68, "r468": 68, "gegenbauerpolynomi": 68, "r469": 68, "gegenbauerc3": 68, "r470": 68, "chebyshev_polynomi": 68, "r471": 68, "chebyshevpolynomialofthefirstkind": 68, "r472": 68, "chebyshevpolynomialofthesecondkind": 68, "r473": 68, "r474": 68, "u_n": [68, 87, 202, 204, 205], "r475": 68, "r476": 68, "r477": 68, "r478": 68, "r479": 68, "chebyshev_root": 68, "r480": 68, "legendre_polynomi": 68, "r481": 68, "legendrepolynomi": 68, "r482": 68, "legendrep": [68, 209], "r483": 68, "legendrep2": 68, "r484": 68, "associated_legendre_polynomi": 68, "r485": 68, "r486": 68, "r487": 68, "r488": 68, "hermite_polynomi": 68, "r489": 68, "hermitepolynomi": 68, "r490": 68, "hermiteh": [68, 209], "probabilist": [68, 205, 229], "he_n": [68, 205], "telephon": 68, "a000085": 68, "232": 68, "764": 68, "2620": 68, "9496": 68, "r491": 68, "r492": 68, "l_n": [68, 87, 205], "r493": 68, "laguerre_polynomi": 68, "r494": 68, "laguerrepolynomi": 68, "r495": 68, "laguerrel": [68, 209], "r496": 68, "laguerrel3": 68, "r497": 68, "generalized_laguerre_polynomi": 68, "r498": 68, "associatedlaguerrepolynomi": 68, "r499": 68, "r500": 68, "spherical_harmon": 68, "ynm": [68, 194], "ynm_c": 68, "znm": 68, "r501": 68, "r502": 68, "sphericalharmon": 68, "r503": 68, "sphericalharmonici": 68, "r504": 68, "r505": 68, "r506": 68, "r507": 68, "z_n": [68, 203], "r508": 68, "r509": 68, "r510": 68, "eijk": 68, "levicivita": [68, 96], "eval_levicivita": 68, "pseudotensor": 68, "delta_rang": [68, 174], "kroneck": [68, 173, 174, 194, 230, 235], "r511": 68, "kronecker_delta": [68, 174], "indices_contain_equal_inform": [68, 174], "fermi": [68, 174], "above_fermi": [68, 174], "below_fermi": [68, 174], "is_above_fermi": [68, 174], "is_below_fermi": [68, 174], "is_only_below_fermi": [68, 174], "is_only_above_fermi": [68, 174], "killable_index": [68, 174], "preferred_index": [68, 174], "point2d": [69, 70, 71, 72, 73, 75, 76, 77], "arbitrary_point": [69, 70, 71, 72, 73, 74, 76], "polyfunc": [69, 205], "ambient_dimens": [69, 71, 73, 75], "plot_interv": [69, 70, 73, 76], "lower_bound": [69, 70, 73, 76], "upper_bound": [69, 70, 73, 76], "counterclockwis": [69, 70, 71, 75, 103, 104], "geometryent": [69, 70, 71, 73, 75, 76, 77], "hradiu": 70, "vradiu": 70, "ellipt": [70, 100, 196], "geometryerror": [70, 73, 76, 77], "radii": 70, "foci": 70, "periapsi": 70, "apoapsi": 70, "focus_dist": 70, "shortest": [70, 73, 76, 192, 215, 221, 225, 247], "auxiliary_circl": 70, "xmin": [70, 71, 73, 75, 76, 195], "ymin": [70, 71, 73, 75, 76, 195], "xmax": [70, 71, 73, 75, 76, 195], "ymax": [70, 71, 73, 75, 76, 195], "rectangl": [70, 71, 73, 75, 76, 195, 205], "director_circl": 70, "perpendicular": [70, 73, 74, 76, 89, 118, 132, 147, 193], "director": 70, "130": 70, "r512": 70, "encloses_point": [70, 71, 76], "border": [70, 76], "_slope": 70, "slope": [70, 71, 73, 76, 103, 104, 108, 118], "eq1": [70, 225, 227, 228], "eq2": [70, 90, 225, 228], "r513": 70, "108270": 70, "r514": 70, "equation_of_a_shifted_ellips": 70, "evolut": 70, "focal": [70, 143, 147], "100500": 70, "363": [70, 100, 203], "175": [70, 96, 202, 203], "is_tang": [70, 72], "tangent_lin": 70, "normal_lin": 70, "line2d": [70, 73, 76], "2020": [70, 153], "polar_second_moment_of_area": [70, 76], "moment": [70, 76, 103, 104, 126, 134, 137, 183, 195, 205, 222, 229], "constitu": [70, 76, 121, 184, 215, 254], "planar": [70, 76, 104, 118, 147], "resist": [70, 76, 103, 104, 218], "deflect": [70, 76, 103, 104], "bend": [70, 76, 103, 105, 271], "r515": 70, "polar_moment_of_inertia": [70, 76], "random_point": [70, 73, 74], "arb": 70, "364": 70, "notimpl": [70, 204], "second_moment_of_area": [70, 76], "centroid": [70, 76, 77, 103], "i_xx": [70, 76], "i_yi": [70, 76], "i_xi": [70, 76], "ellis": 70, "r516": 70, "list_of_second_moments_of_area": 70, "section_modulu": [70, 76], "sympify": [70, 76, 103, 106, 115, 121, 145, 148, 186], "farthest": [70, 76], "s_x": [70, 76], "s_y": [70, 76], "r517": 70, "semilatus_rectum": 70, "semi": [70, 73, 100], "latu": 70, "rectum": 70, "chord": 70, "conic": [70, 222, 254], "directrix": 70, "r518": 70, "semilatusrectum": 70, "r519": 70, "latus_rectum": 70, "collinear": [70, 72, 74, 75, 76, 195], "gx": 70, "hy": 70, "synonym": [70, 204], "p4": [70, 73, 75, 76, 195], "boundari": [71, 73, 103, 104, 188, 206, 217, 225, 229], "t2": [71, 76, 77, 100, 115, 121, 222, 229, 235], "ordering_of_class": 71, "is_similar": [71, 73, 76, 77], "uniform": [71, 195, 227, 229], "enlarg": 71, "shrink": [71, 85], "parameter_valu": [71, 74], "pent": 71, "rpent": 71, "rcirc": 71, "entity1": 72, "entity2": 72, "zp": 72, "is_collinear": [72, 75], "segment2d": [72, 73, 76, 77], "wikipappu": 72, "bc": [72, 106, 247, 250, 260], "subs_point": 72, "p11": 72, "p12": 72, "p13": 72, "p21": 72, "p22": 72, "p23": 72, "ll1": 72, "ll2": 72, "ll3": 72, "ll4": 72, "ll5": 72, "ll6": 72, "pp1": 72, "pp2": 72, "pp3": 72, "encyclopedia": [72, 191], "apr": 72, "s_hexagon_theorem": 72, "clockwis": [72, 87, 91, 103, 104, 106], "overlap": [72, 77, 99, 196, 217, 250], "infanc": 72, "geometryresult": 72, "fair": [72, 229], "angle_between": [73, 74, 76, 184], "reflex": 73, "eman": 73, "readili": [73, 96], "sw": 73, "obtus": 73, "smallest_angle_between": 73, "line3d": [73, 74, 75], "is_perpendicular": [73, 74, 75, 76], "ray2d": [73, 76], "closing_angl": 73, "are_concurr": [73, 74], "concurr": [73, 74, 206], "l3": [73, 127, 202], "l4": [73, 127], "bisector": [73, 76], "p5": [73, 75, 76, 195], "p6": [73, 76, 195], "p7": [73, 76, 195], "segment3d": [73, 74], "direction_ratio": [73, 75], "is_parallel": [73, 74], "parallel_lin": 73, "perpendicular_lin": [73, 74], "perpendicular_seg": 73, "reform": 73, "92": [73, 203, 225, 229], "ccw": [73, 76], "ray3d": [73, 74, 147], "xdirect": 73, "ydirect": 73, "midpoint": [73, 75, 76, 87, 195, 260], "170": [73, 229], "341": 73, "perpendicular_bisector": 73, "linearentity2d": 73, "linearentity3d": [73, 74], "direction_cosin": [73, 75], "zdirect": 73, "normal_vector": [74, 147], "proce": [74, 138, 202, 204, 219, 227], "147": 74, "321": 74, "is_coplanar": 74, "perpendicualar": 74, "parallel_plan": 74, "on_circl": 74, "off_circl": 74, "perpendicular_plan": 74, "pt1": 74, "projection_lin": 74, "on_morph": 75, "affine_rank": 75, "are_coplanar": 75, "canberra_dist": 75, "canberra": 75, "geometricent": 75, "taxicab_dist": 75, "is_concycl": 75, "concycl": 75, "fewer": [75, 76, 138, 229, 276], "is_scalar_multipl": 75, "ambient": 75, "orthogonal_direct": 75, "taxicab": 75, "_nocheck": 75, "are_collinear": 75, "unrot": 76, "circumscrib": 76, "spin": [76, 112, 126, 160, 161, 169, 271], "perimet": 76, "contact": [76, 126, 130, 131, 132, 133, 192, 233], "38": [76, 96, 100, 209, 222, 224, 229], "cut_sect": 76, "upper_polygon": 76, "lower_polygon": 76, "upper_seg": 76, "lower_seg": 76, "r520": 76, "r521": 76, "paulbourk": 76, "polygonmesh": 76, "insidepoli": 76, "first_moment_of_area": 76, "q_x": [76, 192], "q_y": [76, 192], "625": [76, 264], "3125": [76, 229], "525": 76, "3000": [76, 103], "r522": 76, "skyciv": 76, "beam": [76, 106, 143, 146, 271], "bmd": 76, "r523": 76, "mechanicalc": 76, "poly1": 76, "poly2": 76, "interior": [76, 205, 217], "180": [76, 193, 203], "r524": 76, "r525": 76, "r526": 76, "apothem": 76, "interior_angl": 76, "exterior_angl": 76, "circumcircl": 76, "incircl": 76, "inradiu": 76, "inscrib": 76, "circumcent": 76, "circumradiu": 76, "leg": 76, "square_in_unit_circl": 76, "kite": 76, "asa": 76, "sa": [76, 205], "sss": 76, "altitud": 76, "orthocent": 76, "exradii": 76, "median": [76, 229], "medial": 76, "nine_point_circl": 76, "straight": [76, 82, 108, 128, 192, 225], "eulerlin": 76, "equilater": 76, "coincid": [76, 96, 99, 118, 124, 196, 254, 259, 278], "excent": 76, "excircl": 76, "touch": [76, 126, 218], "r527": 76, "ly": [76, 96, 200], "exradiu": 76, "r528": 76, "r529": 76, "incent": 76, "is_equilater": 76, "is_isoscel": 76, "is_right": 76, "is_scalen": 76, "nine": [76, 209], "feet": 76, "real_num": 77, "hull": 77, "r530": 77, "graham_scan": 77, "r531": 77, "andrew": 77, "1979": [77, 179], "geomalgorithm": 77, "a10": 77, "_hull": 77, "t3": [77, 222], "averag": [77, 87, 100, 202, 229], "qq": [78, 79, 81, 82, 83, 87, 196, 197, 198, 199, 202, 204, 205, 206], "p_r": 78, "holonomic_funct": 78, "from_hyp": [79, 82], "holonomicfunct": [79, 82, 83], "from_meijerg": [79, 82], "initcond": [79, 81, 82], "expr_to_holonom": [79, 82, 83, 84], "lenic": [79, 81], "ground": [79, 118, 126, 130, 131, 132, 133, 196, 199, 200, 202, 204, 205, 227, 285], "meijerint": [79, 81, 85, 87], "_rewrite1": [79, 85], "_convert_poly_rat_alg": [79, 81], "_create_t": [79, 81], "_create_lookup_t": [81, 85], "differentialoper": [82, 83, 163], "old_poly_r": [82, 83, 196, 199, 200], "to_expr": [82, 83, 84, 110], "to_sequ": 82, "n_0": [82, 202, 227, 228], "indici": [82, 83, 84, 225], "c_j": [82, 85, 219], "holonomicsequ": 82, "r532": 82, "hal": 82, "inria": [82, 87], "fr": [82, 87, 100, 119, 124, 126, 128, 131, 132, 136, 138, 141, 229], "00070025": 82, "r533": 82, "risc": [82, 225, 254], "jku": [82, 225, 254], "risc_2244": 82, "diplform": 82, "_recur": 82, "rk4": 82, "71828182845905": 82, "10517083333333": 82, "22140257085069": 82, "34985849706254": 82, "49182424008069": 82, "64872063859684": 82, "82211796209193": 82, "01375162659678": 82, "22553956329232": 82, "45960141378007": 82, "71827974413517": 82, "331": 82, "4641": 82, "61051": 82, "771561": 82, "9487171": 82, "14358881": 82, "357947691": 82, "5937424601": 82, "to_hyp": 82, "as_list": [82, 205], "to_meijerg": 82, "1_0": 83, "1_1": 83, "0_0": 83, "0_1": 83, "pyplot": [83, 141], "plt": [83, 141], "list_of_poli": 83, "weyl": [83, 89], "differentialoperatoralgebra": 83, "Ore": 83, "dxa": 83, "endomorph": [83, 204], "frobeniu": [84, 96, 100, 202, 203], "subtleti": 85, "recast": [85, 221, 227, 228], "branchpoint": 85, "crude": [85, 126, 195], "decre": 85, "biholomorph": 85, "topologi": [85, 217], "neighbourhood": 85, "evid": [85, 119, 132, 219], "peculiar": [85, 193], "_split_mul": 85, "_mytyp": 85, "inequival": 85, "_mul_as_two_part": 85, "twist": 85, "recognis": [85, 199, 219, 221], "anywai": [85, 221, 225], "analyitc": 85, "_rewrite_singl": 85, "_rewrite2": 85, "_rewrite_saxena_1": 85, "_rewrite_saxena": 85, "blogpost": 85, "remedi": 85, "exploit": [85, 241], "transpar": [85, 88, 189], "nessgrh": 85, "wordpress": [85, 222], "07": 85, "stade": 85, "c_u": 85, "d_1": [85, 179, 205, 229], "d_v": 85, "amalgam": 85, "prudnikov1990": [85, 219], "luke1969": [85, 219], "c_3": [85, 225], "c_4": 85, "visibl": [85, 195], "fulfil": [85, 194], "vee": [85, 90], "lceil": 85, "rceil": 85, "d_j": [85, 179, 219], "lambda_c": [85, 137], "lambda_": 85, "z_0": [85, 221], "z_1": 85, "a_i": [85, 179, 184, 193, 197, 202, 219], "c_5": 85, "c_6": 85, "c_7": 85, "c_8": 85, "lvert": 85, "rvert": 85, "c_9": 85, "versatil": 85, "bz": [85, 222, 235], "deform": [85, 104], "encircl": 85, "appeal": 85, "fox": 85, "obstacl": 85, "identif": [85, 228], "domin": [85, 91, 214, 216], "iT": 85, "omega_": 85, "disguis": 85, "meijerint_indefinit": 85, "meijerint_definit": 85, "meijerint_invers": 85, "kelli": [85, 219], "roach": [85, 219], "211": [85, 100, 205, 219, 225], "prudnikov": [85, 219], "yu": [85, 194, 219], "brychkov": [85, 219], "marichev": [85, 219], "gordon": [85, 153, 219], "breach": [85, 219], "_coeffexpvalueerror": 85, "_get_coeff_exp": 85, "_check_anteced": 85, "_check_antecedents_1": 85, "mt": 85, "_check_antecedents_invers": 85, "anteced": [85, 216], "_condsimp": 85, "hoc": 85, "simp": [85, 126, 184], "_dummi": 85, "_dummy_": 85, "_eval_cond": 85, "_expon": 85, "_find_splitting_point": 85, "fsp": 85, "_flip_g": 85, "_function": 85, "_guess_expans": 85, "sensibl": [85, 87], "_inflate_fox_h": 85, "_inflate_g": 85, "_int0oo": 85, "_int0oo_1": 85, "_int_invers": 85, "_is_analyt": 85, "_meijerint_definite_2": 85, "trigexpand": 85, "_meijerint_definite_3": 85, "_meijerint_definite_4": 85, "only_doubl": 85, "_meijerint_indefinite_1": 85, "_mul_arg": 85, "_my_principal_branch": 85, "full_pb": 85, "nearer": 85, "superflu": 85, "opaqu": [85, 209], "fac": 85, "_rewrite_invers": 85, "costli": [85, 128, 282], "tx": [85, 284], "happili": [87, 233], "nonelementari": 87, "mellin_transform": 87, "bilater": 87, "laplac": [87, 107, 108, 110, 229], "mellintransform": 87, "integraltransform": 87, "nocond": 87, "inverse_mellin_transform": 87, "laplace_transform": [87, 110], "fourier_transform": 87, "hankel_transform": 87, "inverse_hankel_transform": 87, "suitabl": [87, 93, 102, 194, 197, 199, 202, 204, 209, 219, 222, 225, 228, 230, 279], "inversemellintransform": 87, "laplacetransform": 87, "inverse_laplace_transform": 87, "singularit": [87, 138], "inverselaplacetransform": 87, "_fast_inverse_laplac": 87, "rootsum": [87, 205, 211], "fouriertransform": 87, "_fourier_transform": 87, "inverse_fourier_transform": 87, "sine_transform": 87, "inverse_sine_transform": 87, "cosine_transform": 87, "inverse_cosine_transform": 87, "bixk": 87, "inversefouriertransform": 87, "sinetransform": 87, "inversesinetransform": 87, "cosinetransform": 87, "inversecosinetransform": 87, "hankeltransform": 87, "ht": 87, "inversehankeltransform": 87, "_compute_transform": 87, "_as_integr": 87, "integraltransformerror": 87, "_name": 87, "_collapse_extra": 87, "needev": 87, "function_vari": 87, "transform_vari": 87, "lazard": [87, 202, 205], "rioboo": 87, "trager": 87, "horowitz": 87, "ostrogradski": 87, "ratint": 87, "rationaltool": [87, 205], "ratint_logpart": 87, "ratint_ratpart": 87, "r534": 87, "bronstein": [87, 203, 205, 211, 227], "verlag": [87, 203], "deg": [87, 108, 124, 197, 202, 204, 205], "q_i": [87, 120, 138], "_t": [87, 124, 127, 141, 174, 183, 184, 188, 219, 229], "trigintegr": 87, "trigonometri": 87, "r535": 87, "integration_techniqu": 87, "deltaintegr": 87, "couldn": 87, "didn": [87, 96, 138], "singularityintegr": 87, "risch_integr": 87, "nonelementaryintegr": 87, "proven": [87, 100, 260, 278], "handle_first": 87, "separate_integr": 87, "rewrite_complex": 87, "forthcom": 87, "5109": 87, "outer": [87, 121, 139, 141, 157, 162, 163, 184, 186, 188, 193, 211, 217, 233, 254, 257, 258], "pop": [87, 222], "manualintegr": 87, "integral_step": 87, "student": [87, 218, 222, 229], "_i": [87, 174, 179, 206], "namedtupl": 87, "substep": 87, "sympy_gamma": 87, "app": 87, "intstep": 87, "urul": 87, "u_var": 87, "_u": [87, 174], "u_func": 87, "arctanrul": 87, "trigrul": 87, "rewriterul": 87, "addrul": 87, "powerrul": 87, "constanttimesrul": 87, "constantrul": 87, "norman": 87, "retri": [87, 100], "degree_offset": 87, "unnecessary_permut": 87, "_try_heurisch": 87, "manuel": [87, 214], "poor": [87, 101], "man": [87, 203], "airi": [87, 225], "whittak": 87, "r536": 87, "sop": [87, 90], "cafe": 87, "pmint": 87, "r537": 87, "gedd": [87, 203], "stefanu": 87, "217": [87, 203], "r538": 87, "davenport": [87, 202, 203], "eurocam": 87, "lnc": [87, 203, 227], "157": [87, 100, 104, 203], "r539": 87, "iii": [87, 209, 225], "sigsam": 87, "bulletin": 87, "1982": [87, 194], "r540": 87, "transact": [87, 203], "1985": [87, 119, 140, 184, 254], "356": [87, 204, 227], "362": 87, "lookup": [87, 96, 100, 219], "huge": [87, 100, 205, 245], "entail": 87, "delic": [87, 196], "albeit": [87, 258], "mimic": [87, 88, 189, 248], "moder": 87, "irrespect": [87, 222, 225, 250], "line_integr": 87, "as_sum": 87, "subinterv": 87, "trapezoid": [87, 96, 229], "730": 87, "809": 87, "decai": 87, "r541": 87, "riemann_sum": 87, "r542": 87, "cauchy_principal_valu": 87, "r543": 87, "cauchyprincipalvalu": 87, "int_a": 87, "uvar": 87, "ui": [87, 100, 226], "3aissu": 87, "3aopen": 87, "3aintegr": 87, "gauss_legendr": 87, "n_digit": 87, "legendr": [87, 100, 205, 209, 222], "r544": 87, "w_i": [87, 143, 205, 225], "7746": 87, "55556": 87, "88889": 87, "86114": 87, "33998": 87, "34785": 87, "65215": 87, "gauss_laguerr": 87, "gauss_gen_laguerr": 87, "gauss_hermit": 87, "gauss_chebyshev_t": 87, "gauss_chebyshev_u": 87, "gauss_jacobi": 87, "gauss_lobatto": 87, "gaussian_quadratur": 87, "r545": 87, "fsu": 87, "jburkardt": 87, "cpp_src": 87, "legendre_rul": 87, "laguerr": [87, 205, 209], "r546": 87, "41577": 87, "2943": 87, "2899": 87, "71109": 87, "27852": 87, "010389": 87, "22285": 87, "1889": 87, "9927": 87, "7751": 87, "8375": 87, "983": 87, "45896": 87, "417": [87, 221], "11337": 87, "010399": 87, "00026102": 87, "9855e": 87, "93laguerre_quadratur": 87, "r547": 87, "laguerre_rul": 87, "hermit": [87, 91, 96, 97, 198, 204, 205, 209, 229], "r548": 87, "2247": 87, "29541": 87, "1816": 87, "3506": 87, "3358": 87, "43608": 87, "00453": 87, "15707": 87, "72463": 87, "hermite_quadratur": 87, "r549": 87, "hermite_rul": 87, "r550": 87, "gen_hermite_rul": 87, "r551": 87, "19016": 87, "7845": 87, "5253": 87, "4493": 87, "31413": 87, "00906": 87, "97851": 87, "9904": 87, "3193": 87, "712": 87, "53087": 87, "67721": 87, "11895": 87, "0023152": 87, "r552": 87, "gen_laguerre_rul": 87, "r553": 87, "86602": 87, "0472": 87, "96593": 87, "70711": 87, "25882": 87, "5236": 87, "93gauss_quadratur": 87, "r554": 87, "chebyshev1_rul": 87, "r555": 87, "3927": 87, "7854": 87, "90097": 87, "62349": 87, "22252": 87, "084489": 87, "27433": 87, "42658": 87, "r556": 87, "chebyshev2_rul": 87, "jacobi": [87, 100, 112, 205, 209], "r557": 87, "7063": 87, "0973": 87, "33795": 87, "87174": 87, "5917": 87, "2093": 87, "050584": 87, "22169": 87, "39439": 87, "93jacobi_quadratur": 87, "r558": 87, "jacobi_rul": 87, "r559": 87, "gegenbauer_rul": 87, "lobatto": 87, "r560": 87, "3333": 87, "44721": 87, "16667": 87, "83333": 87, "93lobatto_rul": 87, "r561": 87, "page_888": 87, "intpoli": 87, "chin": 87, "al": [87, 124, 153, 202, 218, 221], "2015": [87, 228], "unit_cub": 87, "polytope_integr": 87, "eric": [87, 203], "jean": 87, "lasserr": 87, "sukumar": 87, "nonconvex": 87, "967": 87, "981": 87, "dilbert": 87, "engr": 87, "ucdavi": 87, "suku": 87, "max_degre": [87, 205], "689": [87, 104], "21875": 87, "octahedron": 87, "trivari": 87, "enable_automatic_int_sympif": 88, "enable_automatic_symbol": 88, "init_ipython_sess": 88, "argv": [88, 240], "init_python_sess": 88, "use_latex": [88, 189, 285], "quiet": 88, "str_printer": [88, 189], "latex_print": [88, 189], "pylab": 88, "stringifi": [88, 189], "sstrrepr": [88, 189, 209], "lexograph": [88, 189], "gui": [88, 189], "statu": 88, "\u03b8": [88, 118, 146, 228], "int_to_integ": 88, "decistmt": 88, "f401": 88, "0x12": 88, "num_column": [88, 189, 209, 225], "no_glob": [88, 189], "ip": [88, 162, 168, 189], "forecolor": [88, 189], "backcolor": [88, 189], "fontsiz": [88, 189, 209], "10pt": [88, 189, 209], "latex_mod": [88, 189], "print_builtin": [88, 189], "interactiveconsol": [88, 189], "preambl": [88, 189, 209], "handwritten": [88, 189], "ctan": [88, 189], "pkg": [88, 189], "dvi": [88, 189, 209], "foreground": [88, 189], "black": [88, 159, 170, 189, 209, 285], "white": [88, 189, 229], "documentclass": [88, 189, 209], "dpi": [88, 189], "u03b8": 88, "dvip": 88, "r562": 88, "r563": 88, "the_68_standard_colors_known_to_dvip": 88, "config": 88, "root_system": 89, "rootsystem": 89, "cartantyp": 89, "cartan": 89, "subalgebra": 89, "adjoint": [89, 91, 96, 151, 155], "hyperplan": 89, "k_y": 89, "r564": 89, "r565": 89, "humphrei": 89, "add_as_root": 89, "root1": 89, "root2": 89, "add_simple_root": 89, "newroot": 89, "all_root": [89, 100, 205], "cartan_matrix": 89, "dynkin_diagram": 89, "dynkin": 89, "root_spac": 89, "simple_root": 89, "type_a": 89, "typea": 89, "basic_root": 89, "iin": 89, "jth": [89, 228], "ijth": 89, "cartan_typ": 89, "highest_root": 89, "lie_algebra": 89, "positive_root": 89, "type_b": 89, "typeb": 89, "b4": 89, "b3": [89, 124, 141, 184, 260], "type_c": 89, "typec": 89, "c4": [89, 91, 93, 225], "type_d": 89, "d4": [89, 229], "dmension": 89, "type_": 89, "e6": 89, "type_f": 89, "typef": 89, "f_4": [89, 120], "f4": [89, 195], "type_g": 89, "typeg": 89, "weyl_group": 89, "weylgroup": 89, "semisimpl": 89, "isometri": 89, "coxet": 89, "coxeter_diagram": 89, "undirect": [89, 247], "s_is_j": 89, "delete_doubl": 89, "element_ord": 89, "weylelt": 89, "group_nam": 89, "group_ord": 89, "192": 89, "matrix_form": 89, "cartantype_gener": 89, "standard_cartan": 89, "dynkindiagram": 89, "cartanmatrix": 89, "sopform": 90, "minterm": 90, "dontcar": 90, "simplified_pair": 90, "combo": 90, "outcom": [90, 177, 229], "posform": 90, "r566": 90, "quin": 90, "mccluskey_algorithm": 90, "r567": 90, "27t": 90, "care_term": 90, "r568": 90, "r569": 90, "anfform": 90, "truthvalu": 90, "anf": 90, "zhegalkin": 90, "r570": 90, "zhegalkin_polynomi": 90, "booleantru": 90, "doubt": [90, 124], "greet": 90, "booleanfals": 90, "universalset": [90, 217], "nand": 90, "xnor": 90, "gate": [90, 154, 159, 161, 167, 168, 170, 271], "perspect": [90, 100, 110, 179, 195, 242, 259, 263], "multiplex": 90, "disjunct": 90, "to_anf": 90, "oplu": [90, 158], "to_cnf": 90, "cnf": 90, "mccluskei": 90, "to_dnf": 90, "to_nnf": 90, "nnf": 90, "is_anf": 90, "is_cnf": 90, "is_dnf": 90, "is_nnf": 90, "gateinputcount": 90, "simplify_log": 90, "fewest": [90, 168], "r571": 90, "bool_map": 90, "bool1": 90, "bool2": 90, "function1": 90, "function2": 90, "distribute_and_over_or": 90, "distribute_or_over_and": 90, "distribute_xor_over_and": 90, "eliminate_impl": 90, "truth_tabl": 90, "ibin": [90, 247], "integer_to_term": 90, "0001111011": [90, 247], "1101111000": [90, 247], "term_to_integ": 90, "bool_maxterm": 90, "maxterm": 90, "complement": [90, 93, 205, 217, 228], "r572": 90, "canonical_normal_form": 90, "indexing_maxterm": 90, "bool_minterm": 90, "r573": 90, "indexing_minterm": 90, "bool_monomi": 90, "anf_coeff": 90, "to_int_repr": 90, "all_model": 90, "unsatisfi": 90, "use_model": 90, "unsat": 90, "dirac": [91, 96, 108, 112, 113, 172, 209], "__abs__": [91, 200], "__add__": [91, 200, 204], "__len__": 91, "96": [91, 96, 229], "mismatch": 91, "matrix_multiply_elementwis": [91, 96], "applyfunc": [91, 92, 96, 132, 184, 230], "col": [91, 93, 96, 99, 110, 141, 198, 204, 282], "col_del": [91, 96, 282], "col_join": [91, 96, 126], "col_insert": [91, 282], "row_insert": [91, 282], "row_join": [91, 96, 126], "companion": [91, 93], "c0": [91, 93, 216, 225, 227], "sparsematrix": [91, 96, 99, 210, 221], "diag": [91, 93, 96, 99, 141, 198, 235, 282], "immutablematrix": [91, 92, 93, 110, 184, 229, 254, 257, 282], "blockmatrix": [91, 93, 96], "sparsetool": [91, 99], "kth": [91, 100], "rowslist": [91, 198], "colslist": 91, "submatrix": [91, 96, 202, 229], "get_diag_block": [91, 93, 96], "decoupl": 91, "hstack": [91, 198], "is_anti_symmetr": 91, "is_diagon": [91, 96], "is_low": [91, 198], "is_upp": [91, 198], "matrixeigen": [91, 96], "is_diagonaliz": [91, 96], "is_hermitian": [91, 96], "is_lower_hessenberg": 91, "hessenberg": [91, 96], "superdiagon": 91, "is_upper_hessenberg": 91, "is_strongly_diagonally_domin": 91, "strongli": [91, 96, 198, 247], "m1": [91, 96, 100, 103, 104, 145, 153, 171, 173, 177, 222, 225, 230, 235], "subdiagon": [91, 96], "is_weakly_diagonally_domin": 91, "weakli": [91, 247], "vacuou": 91, "jordan_block": [91, 96], "eigenv": [91, 96, 124, 126, 141, 168, 280, 282], "rectangular": [91, 96, 217, 228, 258], "r574": 91, "jordan_matrix": [91, 225], "dotprodsimp": 91, "blowup": 91, "multiply_elementwis": [91, 96], "hadamard": [91, 93, 96, 158, 159, 170, 209], "elementwis": [91, 93, 96, 230], "300": [91, 96, 100, 103, 190, 195, 206, 263], "bmatrix": [91, 93, 96, 128, 136, 137, 138, 139, 184, 193, 222], "a_0": [91, 96, 212, 222, 225, 230, 286], "vdot": [91, 93, 96, 179], "alpha_0": 91, "alpha_1": [91, 100, 204], "alpha_": [91, 194], "permute_col": 91, "permute_row": 91, "mulsimp": 91, "rmultipli": 91, "__rmul__": 91, "rot90": 91, "anticlockwis": 91, "row_del": [91, 96, 282], "todod": 91, "tolist": [91, 230], "vec": [91, 96, 118, 141, 184, 194, 202, 260, 261, 263], "vech": 91, "check_symmetri": 91, "vstack": [91, 198], "w_": [91, 204], "wminu": 91, "wplu": 91, "r575": 91, "mathwork": [91, 108, 229, 282], "cleve": 91, "04": [91, 229], "r576": 91, "claredon": 91, "oxford": 91, "662": 91, "intm": 91, "mutabledensematrix": [92, 198, 250], "densematrix": [92, 96], "ldldecomposit": [92, 96], "ldl": [92, 96], "choleski": [92, 96], "ludecomposit": [92, 93, 96, 282], "qrdecomposit": [92, 96], "as_immut": 92, "lower_triangular_solv": [92, 96], "upper_triangular_solv": [92, 96], "gauss_jordan_solv": [92, 96], "cholesky_solv": [92, 96], "diagonal_solv": [92, 96], "ldlsolv": [92, 96], "qrsolv": [92, 96], "pinv_solv": [92, 96], "permutedim": [93, 230, 231], "arraytensorproduct": [93, 231], "from_index_summ": 93, "first_index": 93, "last_index": 93, "longrightarrow": 93, "matpow": [93, 209], "hadamard_product": 93, "aka": 93, "hadamardproduct": [93, 209], "hadamardpow": [93, 209], "ddot": [93, 96, 128, 137, 189, 192, 209, 286], "functionmatrix": 93, "lazili": [93, 215], "342923500": 93, "permutationmatrix": [93, 96], "matrixpermut": 93, "companionmatrix": 93, "matrixset": [93, 217], "submatric": [93, 96, 198, 229], "block_collaps": 93, "dat": [93, 247], "irregular": [93, 96], "ldudecomposit": 93, "ldu": 93, "2x2": [93, 99, 143, 198, 225], "udldecomposit": 93, "udl": 93, "schur": 93, "pinv": [93, 96], "r577": 93, "schur_compl": 93, "blockdiagmatrix": [93, 96], "diag_block": 93, "alias": [94, 200], "bridg": [94, 106, 124, 248], "tension": 94, "gramschmidt": 96, "m2": [96, 100, 103, 104, 121, 145, 153, 171, 173, 177, 204, 222, 225, 230, 235], "126": [96, 100, 208], "150": [96, 110, 222], "v3": [96, 184, 188, 260], "glue": 96, "m3": [96, 153, 222, 230], "adj": 96, "qr": 96, "cheat": 96, "soln": 96, "gram": [96, 179, 181], "schmidt": 96, "out1": 96, "out2": 96, "1692": 96, "1551": 96, "423": 96, "6707": 96, "spot": [96, 142], "eigenvector": [96, 124, 168, 169, 194], "nullspac": [96, 198], "matrixdetermin": 96, "adjug": 96, "berkowitz": 96, "bareiss": 96, "cofactor_matrix": 96, "charpoli": [96, 198, 282], "_simplifi": 96, "purepoli": [96, 205], "samuelson": 96, "minor_submatrix": 96, "iszerofunc": [96, 282], "barei": 96, "det_lu": 96, "functiontyp": 96, "_iszero": [96, 282], "_is_zero_after_expand_mul": 96, "unrecogn": 96, "nonsquarematrixerror": [96, 225], "i3": [96, 111, 124, 141, 235], "perman": 96, "ryser": 96, "450": 96, "r578": 96, "prof": 96, "ben": 96, "berkelei": 96, "bernd": 96, "ban275": 96, "r579": 96, "permanent_": 96, "r580": 96, "r581": 96, "0904": 96, "3251": 96, "matrixreduct": 96, "echelon_form": [96, 282], "with_pivot": 96, "echelon": [96, 198, 228, 282], "elementary_col_op": 96, "kn": [96, 103, 104], "col1": 96, "col2": 96, "km": [96, 100, 114, 119, 126, 128, 131, 132, 136, 138, 141, 180], "elementary_row_op": 96, "row1": 96, "row2": 96, "is_echelon": [96, 282], "rref": [96, 198], "pivot": [96, 198, 282], "normalize_last": 96, "rref_matrix": [96, 198], "rref_pivot": [96, 198], "301369863013699": 96, "712328767123288": 96, "noramlize_last": 96, "matrixsubspac": 96, "subspac": [96, 204], "columnspac": [96, 198], "rowspac": [96, 198], "orthonorm": [96, 141, 169, 193, 258], "rankcheck": 96, "r582": 96, "93schmidt_process": 96, "eigen": [96, 150], "bidiagonal_decomposit": 96, "ubv": 96, "bidiagon": 96, "hang": [96, 128, 132, 225, 226], "bidiagn": 96, "r583": 96, "golub": 96, "van": [96, 100, 203], "loan": 96, "r584": 96, "vslobodi": 96, "household": 96, "r585": 96, "r586": 96, "reals_onli": 96, "throw": [96, 102, 124, 204, 222, 228], "error_when_incomplet": 96, "eig": [96, 124, 141], "matrixerror": 96, "got": [96, 196, 199, 202, 205, 208, 240, 241, 247, 248, 278, 280, 281], "eigenvect": [96, 124, 141, 168, 282], "tidi": 96, "artifact": 96, "ret": 96, "eigenspac": 96, "rag": 96, "a_3": 96, "diagonaliz": [96, 282], "is_indefinit": 96, "semidefinit": [96, 229], "plot3d": [96, 195], "is_positive_definit": 96, "is_positive_semidefinit": 96, "hire": [96, 103, 104, 108, 195, 212], "is_negative_definit": 96, "is_negative_semidefinit": 96, "defer": [96, 251], "r587": 96, "definiteness_of_a_matrix": 96, "r588": 96, "positivedefinitematrix": 96, "r589": 96, "amer": 96, "259": 96, "264": [96, 227], "r590": 96, "r591": 96, "r592": 96, "r593": 96, "r594": 96, "r595": 96, "r596": 96, "r597": 96, "r598": 96, "r599": 96, "r600": 96, "r601": 96, "jordan_form": 96, "calc_transform": 96, "left_eigenvect": 96, "singular_valu": 96, "condition_numb": 96, "matrixcalculu": 96, "hessian": 96, "wronskian": [96, 225], "simpfunc": 96, "permutebkwd": 96, "permutefwd": 96, "lucombin": 96, "defici": [96, 100, 228], "matrixi": 96, "ludecomposition_simpl": [96, 282], "ludecompositionff": 96, "pa": [96, 119, 121, 136, 139, 142], "r602": 96, "zhou": 96, "jeffrei": [96, 221], "frontier": [96, 217], "china": 96, "67": [96, 203], "2008": [96, 194, 203, 205, 209], "row_swap": 96, "permute_backward": 96, "permute_forward": 96, "intiuit": 96, "lu_": 96, "_find_reasonable_pivot": 96, "qr_solv": 96, "167": 96, "158": [96, 104], "27261": 96, "30625": 96, "348": 96, "1914": 96, "6125": 96, "30589": 96, "198": 96, "1225": 96, "q_aug": 96, "r_aug": 96, "analytic_func": 96, "connected_compon": [96, 247], "connected_components_decomposit": 96, "relax": [96, 102], "3x1": 96, "1x3": 96, "conjugate_convent": 96, "dual": [96, 166, 172], "anti_symmetr": 96, "speak": [96, 204, 261], "freevar": 96, "underdetermin": [96, 227, 228], "free_var_index": 96, "tau0": [96, 228, 229], "tau1": 96, "taus_zero": 96, "sol_uniqu": 96, "r603": 96, "gaussian_elimin": 96, "try_block_diag": 96, "inverse_g": [96, 282], "inverse_lu": [96, 282], "inverse_adj": [96, 282], "inverse_ch": 96, "inverse_ldl": 96, "inverse_qr": 96, "inv_mod": 96, "cof": 96, "inverse_block": 96, "blockwis": 96, "ntop": 96, "key2bound": 96, "key2ij": 96, "reciproc": [96, 229, 286], "fro": 96, "sing": 96, "spectral": 96, "rd": [96, 124, 209], "r604": 96, "penrose_pseudoinvers": 96, "arbitrary_matrix": 96, "wn_m": 96, "_w0_0": 96, "_w1_0": 96, "_w2_0": 96, "59": [96, 225], "r605": 96, "obtaining_all_solutions_of_a_linear_system": 96, "print_nonzero": [96, 247], "symb": [96, 209], "rank_decomposit": 96, "r606": 96, "rank_factor": 96, "r607": 96, "piziak": 96, "odel": 96, "magazin": 96, "193": [96, 108], "2307": 96, "2690882": 96, "singular_value_decomposit": 96, "condens": [96, 228], "v_aug": 96, "u_aug": 96, "s_aug": 96, "gj": 96, "solve_least_squar": 96, "strongly_connected_compon": [96, 198, 247], "62": [96, 202], "strongly_connected_components_decomposit": 96, "rowstart": 96, "rowend": 96, "rowsep": 96, "colsep": 96, "strprinter": [96, 189], "upper_hessenberg_decomposit": 96, "213": 96, "134": 96, "216": [96, 202], "hessenbergdecomposit": 96, "jordan_cel": 96, "varlist": 96, "r608": 96, "hessian_matrix": 96, "vlist": 96, "r609": 96, "casoratian": 96, "kernel": [96, 196, 202, 204, 227], "vanish": [96, 174, 202, 205, 208, 225, 254], "rsolve_hyp": [96, 227], "randmatrix": 96, "percent": [96, 228], "prng": 96, "percentag": [96, 100], "46": [96, 103, 179, 208, 227, 229], "list2numpi": 96, "dtype": [96, 101, 196, 198, 199, 200, 209, 248], "matrix2numpi": 96, "symarrai": 96, "ndarrai": [96, 229, 235, 241], "prefix_i1_i2_": 96, "_2": [96, 118, 183, 184, 194, 225], "a_0_0": 96, "a_0_1": 96, "a_0_2": 96, "a_1_0": 96, "a_1_1": 96, "a_1_2": 96, "a_0_0_0": 96, "a_0_0_1": 96, "a_0_1_0": 96, "a_0_1_1": 96, "a_0_2_0": 96, "a_0_2_1": 96, "a_1_0_0": 96, "a_1_0_1": 96, "a_1_1_0": 96, "a_1_1_1": 96, "a_1_2_0": 96, "a_1_2_1": 96, "rot_axis1": 96, "rot_axis2": 96, "rot_axis3": 96, "a2idx": 96, "normalform": [97, 198], "hermite_normal_form": [97, 198, 204], "check_rank": [97, 198], "hnf": [97, 198, 204], "explos": [97, 198], "believ": [97, 100, 198], "dmdomainerror": [97, 198], "dmshapeerror": [97, 198], "r610": 97, "cohen": [97, 198, 203, 204], "mutablesparsematrix": 98, "_doktocsr": 99, "csr": 99, "ja": 99, "ia": 99, "_csrtodok": 99, "dok": 99, "1x1": [99, 229], "vert": [99, 190, 193, 263], "saw": [99, 199, 286], "dynam": [100, 107, 108, 110, 114, 116, 119, 120, 123, 126, 134, 136, 137, 138, 139, 140, 141, 142, 183, 184, 186, 188, 192, 193, 244, 245, 254], "eratosthen": 100, "_reset": [100, 205], "_list": 100, "extend_to_no": 100, "mobiusrang": 100, "primerang": 100, "10th": 100, "totientrang": 100, "1e11": 100, "50000": 100, "primal": [100, 196], "1299709": 100, "r611": 100, "prime_number_theorem": 100, "table_of_": 100, "cf": [100, 202], "28x": 100, "2c_x_": 100, "2f_log_x": 100, "2c_and_li": 100, "r612": 100, "approximations_for_the_nth_prime_numb": 100, "r613": 100, "27_number": 100, "arr1": 100, "arr2": 100, "prevprim": 100, "9th": 100, "nextprim": 100, "occupi": [100, 174, 235], "conjectur": [100, 202], "twin": 100, "bertrand": 100, "brocard": 100, "primori": 100, "r614": 100, "r615": 100, "utm": 100, "postul": 100, "r616": 100, "s_postul": 100, "primefactor": 100, "argu": 100, "cycle_length": 100, "nmax": 100, "brent": [100, 244], "floyd": 100, "cycle_detect": 100, "17737": 100, "20000": 100, "compositepi": 100, "831": 100, "smoothness_p": 100, "sm": [100, 124, 141, 196], "psm": 100, "govern": 100, "10431": 100, "annot": [100, 195, 209], "21477639576571": 100, "4410317": 100, "1787": 100, "4869863": 100, "2434931": 100, "multiplicity_in_factori": 100, "nfac": 100, "52818775009509558395695966887": 100, "is2pow": 100, "pollard_rho": 100, "1234": [100, 222], "max_step": 100, "pollard": [100, 225], "leader": 100, "16843009": 100, "32767": 100, "4i": 100, "3i": 100, "2489": 100, "1482": 100, "285": [100, 227], "leadup": 100, "r617": 100, "crandal": 100, "carl": [100, 244], "pomer": [100, 244], "229": 100, "231": [100, 184], "pollard_pm1": 100, "likelihood": 100, "1009": 100, "am": [100, 179, 209], "255": 100, "crack": 100, "617": 100, "1786": 100, "worst": [100, 205, 225], "scenario": [100, 229], "divisisor": 100, "realist": 100, "r618": 100, "236": 100, "r619": 100, "washington": 100, "2007": [100, 140, 244], "spring": [100, 115, 118, 119, 124, 129], "ent": 100, "node81": 100, "r620": 100, "toronto": 100, "yuvalf": 100, "use_ecm": 100, "65537": [100, 208], "1407633717262338957430697921446883": 100, "991": 100, "202916782076162456022877024859": 100, "4200": 100, "1764": 100, "toggl": [100, 195], "12345678910111213141516": 100, "2507191691": 100, "1231026625769": 100, "factorrat": 100, "rat": 100, "987": 100, "10000000001": 100, "99009901": 100, "divisor_count": 100, "tim": [100, 247], "stackoverflow": [100, 247, 250], "1010381": 100, "proper_divisor": 100, "proper_divisor_count": 100, "udivisor": 100, "udivisor_count": 100, "r621": 100, "unitary_divisor": 100, "r622": 100, "unitarydivisor": 100, "r623": 100, "unitarydivisorfunct": 100, "antidivisor": 100, "r624": 100, "margin": [100, 110, 195, 229], "antidivisor_count": 100, "a066272": 100, "a066272a": 100, "r625": 100, "r626": 100, "27s_totient_funct": 100, "r627": 100, "totientfunct": 100, "r628": 100, "carmichael_funct": 100, "r629": 100, "carmichaelfunct": 100, "sigma_k": 100, "m_i": [100, 194, 202], "m_ik": 100, "r630": 100, "divisor_funct": 100, "udivisor_sigma": 100, "47450": 100, "152": 100, "r631": 100, "core_t": 100, "core_2": 100, "squarefre": [100, 204], "cubefre": 100, "9424": 100, "1178": 100, "379238": 100, "square_factor": [100, 222], "r632": 100, "free_integ": 100, "squarefree_cor": 100, "primenu": 100, "r633": 100, "primeomega": 100, "r634": 100, "mersenne_prime_expon": 100, "mersenn": 100, "4423": 100, "r635": 100, "perfectnumb": 100, "r636": 100, "perfect_numb": 100, "is_mersenne_prim": 100, "r637": 100, "mersenneprim": 100, "abund": 100, "is_abund": 100, "r638": 100, "abundantnumb": 100, "is_defici": 100, "r639": 100, "deficientnumb": 100, "is_amic": 100, "amic": 100, "220": [100, 205], "r640": 100, "amicable_numb": 100, "symmetric_residu": 100, "v_i": [100, 204, 227], "65": [100, 110, 202, 229], "639985": [100, 202], "912285": [100, 202], "954": 100, "gf_crt": [100, 202], "solve_congru": [100, 202], "programm": [100, 209], "galoistool": [100, 202], "crt1": 100, "4536": 100, "252": 100, "756": 100, "crt2": 100, "remainder_modulus_pair": 100, "mi": [100, 209], "k1": [100, 141, 172, 199, 200, 202], "k2": [100, 141, 199], "c_kn": 100, "binomial_coefficients_list": 100, "multinomial_coeffici": 100, "k_m": 100, "k_i": [100, 202, 219], "yann": 100, "laigl": 100, "chapui": 100, "permiss": [100, 194], "multinomial_coefficients_iter": 100, "_tupl": 100, "m53": 100, "partitions_": 100, "npartit": 100, "hardi": 100, "rademach": [100, 229], "r641": 100, "1958": [100, 194], "partitionfunctionp": 100, "is_euler_pseudoprim": 100, "pseudoprim": 100, "r642": 100, "euler_pseudoprim": 100, "prep": [100, 225, 226], "r643": 100, "mersenneforum": 100, "showpost": 100, "110896": 100, "mr": 100, "miller": 100, "rabin": 100, "wit": 100, "1373651": 100, "479001599": 100, "r644": 100, "135": 100, "138": 100, "93rabin_primality_test": 100, "deterministic_vari": 100, "is_lucas_prp": 100, "selfridg": 100, "377": 100, "1159": 100, "1829": 100, "3827": 100, "5459": 100, "5777": 100, "9071": 100, "9179": 100, "bailli": 100, "wagstaff": 100, "1980": [100, 247], "mpq": [100, 199], "lucaspseudoprim": 100, "a217120": 100, "lucas_pseudoprim": 100, "is_strong_lucas_prp": 100, "bpsw": 100, "10877": 100, "16109": 100, "18971": 100, "a217255": 100, "psw_primality_test": 100, "is_extra_strong_lucas_prp": 100, "grantham": 100, "mo": [100, 141, 209], "jone": [100, 146], "preprint": 100, "a217719": 100, "perl": 100, "counterexampl": [100, 286], "989": 100, "3239": 100, "jon": 100, "mcom": 100, "234": 100, "01197": 100, "1e3": 100, "1e23": [100, 250], "near_int": 100, "strong_pseudoprim": 100, "is_gaussian_prim": 100, "r645": 100, "gaussian_prim": 100, "residue_ntheori": 100, "n_order": 100, "cong": [100, 202], "primitive_root": [100, 204], "r646": 100, "stein": [100, 225], "r647": 100, "hackman": 100, "sqrt_mod": 100, "sqrt_mod_it": 100, "quadratic_residu": 100, "nthroot_mod": 100, "109": [100, 203, 222], "is_nthpow_residu": 100, "r648": 100, "is_quad_residu": 100, "legendre_symbol": 100, "genfrac": 100, "nonresidu": 100, "alpha_2": [100, 204], "alpha_k": 100, "discrete_log": 100, "prime_ord": 100, "giant": [100, 228], "pohlig": 100, "r649": 100, "discretelogarithm": 100, "r650": 100, "cryptographi": [100, 265, 272], "menez": 100, "vanston": 100, "continued_fract": 100, "continued_fraction_period": 100, "continued_fraction_reduc": 100, "continued_fraction_converg": 100, "continued_fraction_iter": 100, "106": 100, "103993": 100, "33102": 100, "104348": 100, "33215": 100, "208341": 100, "66317": 100, "292": 100, "r651": 100, "discrimin": [100, 200, 202, 204, 205], "r652": 100, "periodic_continued_fract": 100, "r653": 100, "rosen": 100, "379": [100, 205], "381": 100, "januari": 100, "1992": [100, 203, 227], "233": [100, 203, 225], "718281835": 100, "287": 100, "count_digit": 100, "1111339": 100, "0xfa": 100, "c77": 100, "is_palindrom": [100, 247], "palindrom": 100, "0o121": 100, "oct": 100, "0o171": 100, "fermion": [100, 174], "r654": 100, "b6bius_funct": 100, "r655": 100, "thoma": [100, 140], "koshi": 100, "egyptian_fract": 100, "greedi": [100, 202, 218, 221], "egyptian": 100, "r656": 100, "jewett": 100, "takenouchi": 100, "3192": 100, "1118": 100, "2580": 100, "sylvest": [100, 202], "r657": 100, "seldom": 100, "blow": 100, "doubli": 100, "exhibit": [100, 194, 204, 218], "singli": 100, "tendenc": 100, "r658": 100, "1921": 100, "golumb": 100, "1962": 100, "propos": 100, "bleicher": 100, "1972": 100, "r659": 100, "420": [100, 222], "140": 100, "574": 100, "2788": 100, "6460": 100, "11590": 100, "33062": 100, "113820": 100, "greedy_algorithm_for_egyptian_fract": 100, "ic": [100, 225], "uci": 100, "eppstein": 100, "numth": 100, "egypt": 100, "ami": 100, "ektf": 100, "hu": 100, "finalpdf": 100, "ami_42_from129to134": 100, "bbp_pi": 100, "pi_hex_digit": 100, "hex": 100, "3243f6a8885a30": 100, "r660": 100, "numberworld": 100, "subexponenti": 100, "comfort": [100, 101], "15154262241479": 100, "15423094826093": 100, "799333555511111": 100, "809709509409109": 100, "888888877777777": 100, "914148152112161": 100, "factoris": [100, 199, 200, 225], "max_curv": 100, "lenstra": 100, "ecm_one_factor": 100, "pseudorandom": [100, 247], "25645121643901801": 100, "5394769": 100, "4753701529": 100, "9804659461513846513": 100, "4641991": 100, "2112166839943": 100, "7060005655815754299976961394452809": 100, "6988699669998001": 100, "1010203040506070809": 100, "122921448543883967430908091422761898618349713604256384403202282756086473494959648313841": 100, "2709077133180915240135586837960864768806330782747": 100, "248": 100, "prime_bound": 100, "error_term": 100, "siq": 100, "modn": 100, "r661": 100, "semanticscholar": 100, "5c52": 100, "8a975c1405bd35c65993abf5a4edb667c1db": 100, "r662": 100, "rieselprim": 100, "ziki": 100, "initializing_quadratic_siev": 100, "5915587277": 100, "3267000013": 100, "facilit": [101, 134, 145, 191, 240], "000507214304613640": 101, "microsecond": 101, "000507214304614": 101, "hundr": [101, 280], "nanosecond": 101, "84147098": [101, 248, 275], "84119981": 101, "84092844": 101, "05426074": 101, "05433146": 101, "05440211": 101, "nano": 101, "manufactur": 101, "asnumpi": 101, "jnp": 101, "asarrai": 101, "84147096": 101, "8411998": 101, "05426079": 101, "05433151": 101, "autowrap": [101, 234, 242, 246, 273], "implemented_funct": [101, 241, 248], "effort": [101, 200, 202], "50u": 101, "1u": 101, "10n": 101, "sympy_pars": 102, "local_dict": 102, "lambda_not": 102, "repeated_decim": 102, "auto_numb": 102, "factorial_not": 102, "global_dict": 102, "standard_transform": 102, "implicit_multiplication_appl": 102, "implicit_appl": 102, "implicit_multipl": 102, "convert_equals_sign": 102, "function_exponenti": 102, "stringify_expr": 102, "eval_expr": 102, "name_dict": 102, "fullform": 102, "setdelai": 102, "datatyp": [102, 200, 209, 242], "split_symbol": 102, "split_symbols_custom": 102, "_token_splitt": 102, "can_split": 102, "unsplitt": 102, "10sin": 102, "3xyz": 102, "2111": 102, "latex2sympi": 102, "typograph": 102, "stricter": 102, "liber": [102, 114, 280], "618": 102, "latexparsingerror": 102, "sym_expr": 102, "sympyexpress": 102, "source_cod": 102, "return_expr": 102, "src2": 102, "convert_to_expr": 102, "convert_to_c": 102, "src3": 102, "convert_to_python": 102, "src_code": 102, "filenam": [102, 209, 240, 241, 242, 250], "convert_to_fortran": 102, "continuum_mechan": [103, 104, 106], "elastic_modulu": 103, "second_mo": 103, "base_char": 103, "withstand": [103, 104], "character": [103, 104, 190, 193, 216, 229, 235, 263], "profil": 103, "shear": [103, 104], "downward": [103, 104, 106, 204], "apply_load": [103, 104, 106], "bc_deflect": [103, 104], "boundary_condit": 103, "solve_for_reaction_load": [103, 104], "shear_forc": [103, 104], "bending_mo": [103, 104], "reaction": [103, 104, 106], "upward": [103, 204], "reaction_load": [103, 104, 106], "applied_load": 103, "nm": [103, 104, 172, 230], "pointload": [103, 104], "ramp": [103, 104], "parabol": 103, "apply_support": [103, 106], "loc": 103, "freedom": [103, 118, 119, 125, 128, 134, 229, 271], "roller": [103, 104, 106], "r_10": 103, "r_30": 103, "4000": [103, 104], "bc_slope": [103, 104], "cross_sect": 103, "elast": [103, 104], "12000": 103, "draw": [103, 154, 209, 229], "pictori": 103, "ild_moment": 103, "ild_react": 103, "ild_shear": 103, "axial": [103, 143], "hing": [103, 104, 135], "cantilev": [103, 104], "inertia": [103, 104, 113, 114, 115, 117, 123, 124, 126, 127, 129, 131, 132, 133, 134, 141, 184, 192, 193, 204, 271], "666666666666667": [103, 104], "max_bmoment": 103, "max_deflect": 103, "max_shear_forc": 103, "plot_bending_mo": [103, 104], "gpa": 103, "400": [103, 195, 205], "13750": 103, "31250": 103, "plot_deflect": [103, 104], "00138541666666667": 103, "86458333333333e": 103, "04166666666667e": 103, "20833333333333e": 103, "51041666666667e": 103, "plot_ild_mo": 103, "solve_for_ild_mo": 103, "1kn": 103, "r_0": 103, "r_8": 103, "solve_for_ild_react": 103, "plot_ild_react": 103, "5kn": 103, "r_7": 103, "plotgrid": 103, "plot_ild_shear": 103, "solve_for_ild_shear": 103, "plot_loading_result": [103, 104], "subplot": [103, 195], "plot_shear_forc": [103, 104], "plot_shear_stress": 103, "stress": 103, "6875": 103, "2500": 103, "15625": [103, 181], "plot_slop": [103, 104], "59375e": 103, "125e": 103, "08333333333333e": 103, "0001953125": 103, "point_cflexur": 103, "overhang": [103, 104], "10kn": 103, "20kn": [103, 104], "3kn": 103, "remove_load": [103, 106, 115], "shear_stress": 103, "beam3d": 103, "shear_modulu": 103, "apply_moment_load": 103, "solve_slope_deflect": 103, "r663": 103, "home": [103, 204, 222, 229], "aau": 103, "jc": 103, "femtesemest": 103, "beams3d": 103, "angular_deflect": 103, "depict": [103, 190, 228, 263], "angular": [103, 112, 115, 118, 121, 126, 127, 128, 129, 131, 133, 135, 138, 141, 143, 147, 148, 150, 153, 171, 175, 184, 188, 194], "axial_forc": 103, "axial_stress": 103, "load_vector": 103, "max_bending_mo": 103, "16000": 103, "495": 103, "10793": 103, "6400": 103, "301": [103, 219, 222], "560": 103, "2400": 103, "moment_load_vector": 103, "40000": 103, "4013": 103, "90300": 103, "1520": 103, "903": 103, "1600": [103, 104], "172": 103, "polar_mo": 103, "i1": [103, 111, 124, 141, 235], "1350": 103, "solve_for_tors": 103, "torsion": 103, "torqu": [103, 115, 119, 123, 129, 136, 137, 141], "torsional_mo": 103, "_________________": 104, "________________": [104, 225], "_______________v": 104, "_______________": 104, "equilibrium": [104, 106, 126, 138], "20e9": 104, "25e": 104, "______________________________________________": 104, "_______________________________________________": 104, "r\u2081": 104, "r\u2082": 104, "______________________": 104, "________________________": 104, "8kn": 104, "_____________": 104, "1m": 104, "3m": 104, "2m": 104, "5m": [104, 244], "679": 104, "12kn": 104, "________________________________": 104, "____________________________________________________": 104, "o____________________________________________________": 104, "4m": 104, "concentr": [104, 229], "_____________________________________": 104, "m\u2081": 104, "m\u2082": 104, "connector": 104, "_____________________": 104, "_______________________": 104, "_____________________o_______________________": 104, "oooo": [104, 247], "r\u2083": 104, "_______i_______": 104, "flexur": 104, "rigid": [104, 106, 115, 119, 121, 124, 126, 129, 134, 141, 184, 192, 271], "____________": 104, "____________o________________________": 104, "a\u2082": [104, 286], "assembli": [106, 126], "joint": [106, 117, 127, 129, 134, 271], "add_nod": 106, "node_1": 106, "node_2": 106, "node_3": 106, "node_4": 106, "add_memb": 106, "member_1": 106, "member_2": 106, "member_3": 106, "member_4": 106, "member_5": 106, "270": 106, "360": 106, "change_member_label": 106, "new_label": 106, "change_node_label": 106, "bc_new": 106, "internal_forc": 106, "member_label": 106, "node_label": 106, "node_posit": 106, "remove_memb": 106, "remove_nod": 106, "remove_support": 106, "unstabl": 106, "revolv": 106, "tensil": 106, "r_node_1_x": 106, "r_node_1_i": 106, "r_node_2_i": 106, "lti": [107, 108], "transferfunct": [107, 108, 110], "interconnect": [107, 110, 118], "mimo": [107, 110], "transferfunctionmatrix": [107, 110], "mimoseri": [107, 110], "mimoparallel": [107, 110], "mimofeedback": [107, 110], "control_plot": 108, "pole_zero_plot": 108, "pole_color": 108, "blue": [108, 135, 195, 209], "pole_markers": 108, "zero_color": 108, "orang": 108, "zero_markers": 108, "show_ax": 108, "marker": [108, 195], "sisolineartimeinvari": [108, 110], "markers": 108, "tf1": [108, 110], "pole_zero_numerical_data": 108, "r664": 108, "93zero_plot": 108, "siso": [108, 110], "8660254j": 108, "bode_plot": 108, "initial_exp": 108, "final_exp": 108, "freq_unit": 108, "phase_unit": 108, "semilog": 108, "hz": 108, "hertz": 108, "bode_magnitude_plot": 108, "bode_phase_plot": 108, "bode_magnitude_numerical_data": 108, "5148378120533502e": 108, "68437": 108, "36188804005": 108, "020599914256786": 108, "0205999155219505": 108, "4117304087953": 108, "00000000260573": 108, "bode_phase_numerical_data": 108, "4472354033813751e": 108, "035581932165858e": 108, "47577": 108, "3248186011": 108, "67884": 108, "09326036123": 108, "5000000000291665e": 108, "6180885085e": 108, "08895483066e": 108, "1415085799262523": 108, "14155265358979": 108, "impulse_response_plot": 108, "lower_limit": [108, 276], "upper_limit": [108, 276], "step_response_plot": 108, "ramp_response_plot": 108, "r665": 108, "impulse_response_numerical_data": 108, "nb_of_point": [108, 195], "lineover1drangeseri": [108, 195], "amplitud": [108, 148], "06616480200395854": 108, "854500743565858": 108, "9999999799999999": 108, "7042848373025861": 108, "170748906965121e": 108, "1901263495547205e": 108, "r666": 108, "step_response_numerical_data": 108, "025413462339411542": 108, "0484508722725343": 108, "670250533855183": 108, "844291913708725": 108, "023844582399907256": 108, "042894276802320226": 108, "828770759094287e": 108, "456457160755703e": 108, "mx": [108, 154, 216], "r667": 108, "ramp_funct": 108, "ramp_response_numerical_data": 108, "12166980856813935": 108, "861246379582118": 108, "4504508011325967e": 108, "006046440489058766": 108, "12499999999568202": 108, "12499999999661349": 108, "den": [110, 200, 221, 225], "superscript": [110, 209], "impuls": 110, "tf2": 110, "tf3": 110, "tf4": 110, "tf5": 110, "tf6": 110, "500000000000000": 110, "tf7": 110, "tf8": 110, "tf9": 110, "tf10": 110, "tf11": 110, "tf12": 110, "r668": 110, "transfer_funct": 110, "r669": 110, "dc_gain": 110, "dc": [110, 137], "from_rational_express": 110, "zerodivisionerror": [110, 200, 238, 248], "tf": [110, 248], "is_biprop": 110, "is_prop": 110, "is_stabl": 110, "is_strictly_prop": 110, "sys1": 110, "sys2": 110, "feedforward": 110, "fed": 110, "sit": [110, 193], "plant": 110, "compulsori": 110, "tf_1": 110, "tf_2": 110, "tf_3": 110, "tf_4": 110, "tfm_1": 110, "num_input": 110, "num_output": 110, "tfm_2": 110, "tf_5": 110, "tf_6": 110, "tf_7": 110, "tf_8": 110, "tfm_3": 110, "tfm_4": 110, "tfm_5": 110, "tfm_6": 110, "tf_9": 110, "tf_10": 110, "tfm_7": 110, "tfm_8": 110, "tfm_9": 110, "tfm_10": 110, "tfm_11": 110, "tfm_12": 110, "elem_pol": 110, "elem_zero": 110, "from_matrix": [110, 198], "m_tf": 110, "tfm": 110, "tfm1": 110, "tfm2": 110, "g4": 110, "tfm3": 110, "mimolineartimeinvari": 110, "mat_a": 110, "mat_b": 110, "mat_c": 110, "tfm_a": 110, "tfm_b": 110, "tfm_c": 110, "expr_1": 110, "expr_2": 110, "expr_3": 110, "expr_4": 110, "plant_mat": 110, "controller_mat": 110, "neg_feedback": 110, "hep": 111, "gamma_matric": [111, 113], "gammamatrix": 111, "lorentzindex": 111, "gammamatrixhead": 111, "extract_type_ten": 111, "gamma_trac": 111, "i0": [111, 146, 235], "i2": [111, 124, 141, 235], "i4": [111, 235], "i5": 111, "kahane_simplifi": 111, "spinor": 111, "ta": [111, 218], "tb": [111, 218, 240], "tc": [111, 200, 205, 218], "joseph": [111, 203], "kahan": 111, "octob": 111, "1968": 111, "simplify_gpgp": 111, "e_nl": [112, 175], "hartre": 112, "helium": 112, "2209": 112, "e_nl_dirac": 112, "spin_up": 112, "035999037000": 112, "relativist": 112, "momentum": [112, 121, 124, 141, 152, 153, 171, 175, 194, 235], "light": [112, 146, 179, 189, 196], "035999037": 112, "1012": 112, "3627": 112, "500006656595360": 112, "125002080189006": 112, "125000416028342": 112, "0555562951740285": 112, "0555558020932949": 112, "0555556377366884": 112, "psi_nlm": 112, "wave": [112, 144, 145, 146, 212, 271], "psi_": [112, 150], "nlm": 112, "radial": [112, 128, 175], "nl": [112, 175], "magnet": [112, 145, 190, 263], "azimuth": 112, "wf": [112, 126], "abs_sqrd": 112, "silver": 112, "94": [112, 203], "141": 112, "4418": 112, "mdft": 113, "mgamma": 113, "gamma_5": 113, "gamma_0": 113, "gamma_3": 113, "r670": 113, "msigma": 113, "pauli": [113, 271], "sigma_i": [113, 229], "r671": 113, "pauli_matric": [113, 149], "pat_matrix": 113, "unansw": [114, 183], "kane": [114, 117, 118, 124, 130, 134, 135, 140, 141, 183, 184, 254, 271], "q1d": [114, 124, 126, 128, 131, 132, 133, 136, 137, 138, 139, 183, 189, 193], "q2d": [114, 124, 126, 128, 131, 132, 133, 136, 137, 188, 189], "q3d": [114, 131, 132, 133, 136], "kinemat": [114, 118, 119, 123, 124, 126, 127, 128, 129, 131, 133, 135, 136, 138, 139, 141, 142, 184, 187, 191, 193, 271], "dyad": [114, 141, 258], "mprint": [114, 131, 132, 133, 136], "mpprint": [114, 136], "mlatex": 114, "sub_dict": [114, 116, 126], "msub": [114, 116, 138], "cleaner": [114, 141, 225], "gsl": [114, 242], "lsoda": 114, "penalti": 114, "central_inertia": [115, 121, 127, 129], "possess": [115, 139, 235], "name_of_bodi": 115, "ixx": [115, 121, 184], "body_inertia": 115, "ang_vel_in": [115, 118, 124, 131, 132, 141, 184, 192], "set_ang_vel": [115, 121, 124, 126, 131, 132, 138, 139, 141, 142, 184, 186, 188, 192], "apply_forc": [115, 118, 129], "reaction_bodi": [115, 118, 129], "reaction_point": 115, "oppposit": 115, "desri": 115, "force1": 115, "b_masscent": 115, "b_frame": [115, 118], "newtonion": [115, 118], "spring_forc": 115, "n_frame": 115, "apply_torqu": [115, 129], "torquess": 115, "torque1": 115, "b1_frame": 115, "b2_frame": 115, "clear_load": 115, "kinetic_energi": [115, 121, 139, 141], "kinet": [115, 119, 121], "inerti": [115, 118, 119, 121, 126, 128, 131, 136, 137, 139, 141], "set_vel": [115, 119, 121, 124, 126, 128, 131, 132, 133, 136, 137, 138, 139, 141, 142, 188, 192], "b_ixx": 115, "b_mass": [115, 118], "masscenter_vel": [115, 118], "parallel_axi": [115, 121], "to_matrix": [115, 118, 183, 184, 193, 198, 204, 254, 257, 259], "a_ixx": 115, "a_mass": 115, "a_ixi": 115, "a_izx": 115, "a_iyi": 115, "a_iyz": 115, "a_izz": 115, "smart": [116, 138, 216, 222, 225], "sub1": [116, 209], "sub2": [116, 209], "find_dynamicsymbol": 116, "reference_fram": [116, 184], "symbolicsystem": [117, 134, 271], "interfram": [118, 188], "_generate_coordin": 118, "_generate_spe": 118, "_orient_fram": 118, "_set_angular_veloc": 118, "_set_linear_veloc": 118, "kde": [118, 127, 128, 135, 138], "revolut": 118, "\u03c9": 118, "pc": [118, 206], "p_masscent": 118, "c_masscent": 118, "p_frame": 118, "c_frame": 118, "q_pc": 118, "u_pc": 118, "pendulum": [118, 123, 125, 129, 134, 138, 142, 192, 271], "upper_bob": 118, "lower_bob": 118, "ceiling_joint": 118, "pendulum_joint": 118, "q_p1": 118, "q_p2": 118, "u_fram": 118, "l_frame": 118, "u_p1": 118, "u_p2": 118, "vel": [118, 124, 126, 128, 132, 135, 141, 188, 192, 261], "prismat": 118, "slide": 118, "wall": [118, 129], "part1": 118, "part2": 118, "j1": [118, 127, 129, 153, 171], "j2": [118, 127, 129, 153, 171], "q_j1": 118, "w_frame": 118, "q_j2": 118, "p1_frame": 118, "u_j1": 118, "cylindricaljoint": 118, "rotation_coordin": 118, "translation_coordin": 118, "rotation_spe": 118, "translation_spe": 118, "cylindr": [118, 195, 261], "q0_": 118, "q1_": 118, "u0_": 118, "u1_": 118, "q0_pc": 118, "q1_pc": 118, "u0_pc": 118, "u1_pc": 118, "tube": 118, "floor_joint": 118, "flag_joint": 118, "q0_c1": 118, "q0_c2": 118, "q1_c1": 118, "floor_fram": 118, "q1_c2": 118, "tube_fram": 118, "flag_fram": 118, "u0_c1": 118, "u0_c2": 118, "u1_c1": 118, "planarjoint": 118, "planar_coordin": 118, "planar_spe": 118, "q2_": 118, "u2_": 118, "nonparallel": 118, "q_1": [118, 127, 128, 129, 138, 154, 192, 205, 222], "q_2": [118, 127, 128, 129, 138, 192], "hat": [118, 135, 139, 183, 184, 189, 190, 192, 193, 258, 259, 261, 263, 264], "q_0": [118, 154, 222], "rotation_axi": 118, "planar_vector": 118, "q2_pc": 118, "u2_pc": 118, "parent_vector": 118, "plane_vector": 118, "g_frame": 118, "sphericaljoint": 118, "rot_typ": [118, 184, 188, 190], "rot_ord": [118, 184, 188, 256], "ball": 118, "socket": 118, "tait": [118, 184, 254, 256], "bryan": [118, 184, 254, 256], "joint_point": 118, "zxz": [118, 184, 193, 254, 256], "weldjoint": 118, "weld": 118, "quarter": [118, 146], "rotated_fram": 118, "jointsmethod": [118, 127, 129], "damper": [118, 119, 124, 129], "form_eom": [118, 129, 135], "mass_matrix_ful": [118, 119, 124, 129, 136, 137], "forcing_ful": [118, 119, 124, 129, 136, 137], "mass_matrix": [118, 119, 123, 126, 131, 132, 136, 137, 142], "lagrangesmethod": [118, 119, 128, 133, 137, 138], "qd": [118, 119, 126, 136, 188], "inv_method": [118, 119], "solveabl": 118, "q_ind": [119, 120, 124, 126, 127, 128, 131, 132, 136, 138, 141], "u_ind": [119, 120, 124, 126, 127, 128, 131, 132, 136, 138, 141], "kd_eq": [119, 124, 126, 127, 128, 131, 132, 138, 141], "q_depend": [119, 126, 127, 128, 136, 141], "configuration_constraint": [119, 126, 127, 128, 136], "u_depend": [119, 126, 127, 128, 136, 141], "velocity_constraint": [119, 126, 127, 128, 136, 141], "acceleration_constraint": 119, "u_auxiliari": [119, 132, 136, 141], "forcelist": [119, 124, 127, 128, 131, 132, 137, 138, 141], "explicit_kinemat": 119, "levinson": [119, 140, 184, 254], "udot": [119, 126], "22626": 119, "ud": [119, 136], "kd": [119, 126, 131, 132, 136], "fl": [119, 126, 136, 137, 141, 203], "bl": [119, 126, 136, 141], "frstar": [119, 124, 126, 128, 131, 132, 136, 138, 141], "kanes_equ": [119, 124, 126, 128, 131, 132, 136, 138, 141], "a_and_b": [119, 120, 128], "auxiliary_eq": [119, 132], "k_d": [119, 136], "k_dnh": 119, "f_d": [119, 136, 137, 202], "f_dnh": 119, "mass_matrix_kin": 119, "k_kqdot": 119, "forcing_kin": 119, "k_ku": 119, "constrain": [119, 128, 137, 141], "kindiffdict": [119, 126, 131, 132, 136, 141], "new_method": [119, 128], "intens": [119, 120, 143, 146], "perm_mat": [119, 120, 138], "op_point": [119, 120, 128, 138], "beforehand": [119, 242], "to_linear": [119, 138], "recalcul": [119, 205], "hol_coneq": [119, 128, 137], "nonhol_coneq": [119, 128, 137], "nonconserv": 119, "form_lagranges_equ": [119, 128, 133, 137, 138], "qdot": [119, 126, 127, 188], "qdoubledot": 119, "lam": [119, 120, 142], "lagranges_equ": 119, "qd_ind": [119, 138], "q_dep": [119, 136, 138], "qd_dep": [119, 138], "solve_multipli": [119, 128], "sol_typ": 119, "array_lik": 119, "f_3": [120, 123, 142, 225], "f_c": [120, 128], "f_v": [120, 128], "f_a": 120, "q_d": 120, "u_i": [120, 138, 192, 202], "u_d": [120, 141], "q_op": [120, 128], "u_op": [120, 128], "qd_op": 120, "ud_op": [120, 128], "spatial": [121, 148, 184, 209], "angular_momentum": [121, 139, 141], "init_vprint": [121, 122, 139, 142, 184, 186, 188, 189, 192, 193], "linear_momentum": [121, 139, 141], "inertia_tupl": 121, "mv": 121, "iyi": [121, 184], "izz": [121, 184], "ixi": [121, 184], "iyz": [121, 184], "izx": 121, "yy": [121, 193, 225], "yz": [121, 193, 195], "zx": [121, 193], "inertia_of_point_mass": 121, "pos_vec": 121, "px": [121, 164, 169, 235], "body1": 121, "body2": 121, "body3": 121, "h2": 121, "multibodi": [121, 124, 134, 140, 141, 142, 192], "vprint": [122, 183, 188, 189, 193], "vpprint": [122, 183, 189, 193], "vlatex": [122, 183, 184, 189, 193], "coord_stat": 123, "right_hand_sid": 123, "coordinate_deriv": [123, 142], "alg_con": [123, 142], "output_eqn": 123, "coord_idx": [123, 142], "speed_idx": [123, 142], "m_3": [123, 142, 153, 194], "exogen": [123, 142], "ref_fram": 123, "graviti": [123, 124, 128, 129, 131, 133, 141, 190, 263], "theta_dot": 123, "kin_explicit_rh": [123, 142], "dyn_implicit_mat": [123, 142], "dyn_implicit_rh": [123, 142], "symsystem": 123, "dae": [123, 142], "adjust": [123, 212, 216], "comb_implicit_mat": [123, 142], "comb_implicit_rh": [123, 142], "kinema": 123, "comb_explicit_rh": [123, 142], "compute_explicit_form": 123, "awhil": 123, "constant_symbol": 123, "dynamic_symbol": 123, "motiongenesi": [124, 141], "double_pendulum": 124, "motionvari": [124, 141], "newtonian": [124, 141], "simprot": [124, 141], "n_a": 124, "n_b": 124, "w_a_n": 124, "w_b_n": [124, 141], "p_o_p": 124, "p_p_r": 124, "v_o_n": [124, 141], "v2pt": [124, 141], "v_p_n": 124, "v_r_n": 124, "force_p": 124, "force_r": 124, "tfinal": 124, "integstp": 124, "some_filenam": 124, "parse_autolev": 124, "sympy_cod": 124, "include_numer": 124, "include_pydi": 124, "pydi": [124, 141, 184], "u1d": [124, 126, 128, 131, 132, 136], "u2d": [124, 126, 128, 131, 132, 136], "frame_n": 124, "frame_a": 124, "frame_b": 124, "point_o": 124, "particle_p": 124, "p_pt": 124, "particle_r": 124, "r_pt": 124, "set_po": [124, 188, 192], "v2pt_theori": [124, 126, 131, 132, 133, 138, 139, 141, 142, 188, 192], "initial_condit": [124, 141], "overwritten": 124, "e2row": 124, "eigvec": [124, 141], "eigenvec": 124, "deg2rad": 124, "0174533": 124, "wo": 124, "coef": [124, 141], "u3": [124, 126, 127, 129, 131, 132, 136, 141, 184, 188, 192], "strai": 124, "reassign": 124, "inher": [124, 248, 278], "rhs_x": 124, "i_b_bo": 124, "body_b": 124, "body_b_f": 124, "b_cm": 124, "b_f": 124, "scene": [124, 221, 278], "i_c_d": 124, "i_p_q": 124, "i_b_o": 124, "e3": [124, 216, 225], "i_p_o": 124, "e4": [124, 216], "p_so_o": 124, "nicheck": 124, "plug": [124, 179], "hurdl": 124, "gitlab": 124, "repo": 124, "ch4": 124, "ch5": 124, "ch6": 124, "cst": 124, "grammar": [124, 221], "roll": [125, 126, 134, 192, 229, 271], "disc": [125, 134, 192, 271], "bicycl": [125, 134, 140, 271], "nonminim": [125, 134, 138, 271], "linkag": [125, 134, 271], "meijaard2007": [126, 140], "steer": [126, 140], "purposefulli": 126, "mechanics_print": [126, 127, 131, 132, 133, 135, 136, 137], "yaw": 126, "ang": 126, "rear": 126, "wheel": 126, "pitch": 126, "q4": [126, 136, 186], "q5": [126, 186], "q4d": [126, 136], "q5d": 126, "u4": [126, 132, 136, 141], "u5": [126, 132], "u6": [126, 132], "u3d": [126, 131, 132], "u4d": 126, "u5d": 126, "u6d": 126, "explanatori": 126, "wfrad": 126, "wrrad": 126, "htangl": 126, "forkoffset": 126, "forklength": 126, "framelength": 126, "forkcg1": 126, "forkcg3": 126, "framecg1": 126, "framecg3": 126, "iwr11": 126, "iwr22": 126, "iwf11": 126, "iwf22": 126, "iframe11": 126, "iframe22": 126, "iframe33": 126, "iframe31": 126, "ifork11": 126, "ifork22": 126, "ifork33": 126, "ifork31": 126, "mframe": 126, "mfork": 126, "mwf": 126, "mwr": 126, "wr": 126, "tempfram": 126, "tempfork": 126, "orientnew": [126, 128, 131, 132, 133, 138, 142, 184, 186, 188, 190, 192, 193], "wr_cont": 126, "wr_mc": 126, "frame_mc": 126, "fork_mc": 126, "wf_mc": 126, "wf_cont": 126, "flip": [126, 159, 168, 229], "frame_i": 126, "fork_i": 126, "wr_i": 126, "wf_i": 126, "bodyfram": 126, "bodyfork": 126, "bodywr": 126, "bodywf": 126, "nonholonom": 126, "slip": [126, 130, 132, 192], "replic": 126, "conlist_spe": 126, "conlist_coord": 126, "gravit": [126, 131, 177, 190, 263], "aforement": [126, 190, 222, 261], "paperradrear": 126, "paperradfront": 126, "hta": 126, "trailpap": 126, "rake": 126, "paperwb": 126, "02": 126, "paperframecgx": 126, "paperframecgz": 126, "paperforkcgx": 126, "paperforkcgz": 126, "framecgnorm": 126, "framecgpar": 126, "tempa": 126, "tempb": 126, "tempc": 126, "paperforkl": 126, "forkcgnorm": 126, "forkcgpar": 126, "upright": 126, "val_dict": 126, "0603": 126, "1405": 126, "05892": 126, "00708": 126, "00756": 126, "kdd": [126, 131, 132], "centripet": 126, "corioli": 126, "forcing_lin": 126, "mm_full": 126, "_k_kqdot": 126, "xdot": 126, "lean": [126, 131, 133], "amat": 126, "summari": [127, 240, 265], "q_3": [127, 129, 192], "u_1": [127, 128, 129, 192, 204, 225], "u_2": [127, 128, 129, 192, 204, 225], "u_3": [127, 129, 192], "densiti": [127, 229, 240, 264], "link1": 127, "link2": 127, "link3": 127, "link4": 127, "joint1": 127, "joint2": 127, "joint3": 127, "j3": [127, 129, 153, 171], "fh": 127, "fhd": 127, "_method": 127, "_form_eom": 127, "eom": [128, 129, 138], "theta1": 128, "dq_dict": 128, "presimplifi": 128, "inp_vec": [128, 138], "lag": [128, 133, 138], "lm": [128, 137, 138, 202, 205], "lag_eq": [128, 138], "lam_op": 128, "mb": [129, 141], "ibzz": 129, "compound_pend": 129, "simple_pend": 129, "slider": 129, "rev1": 129, "rev2": 129, "w_r_n_qd": [131, 132], "dmc": [131, 132, 133], "uv": [131, 132, 174], "bodyd": [131, 132, 133], "bodylist": [131, 132], "revisit": [132, 192], "kane1985": [132, 136, 139, 140], "thorough": [132, 138, 222], "simplifc": 132, "f3": [132, 195, 209], "necessit": 132, "simplify_auxiliary_eq": 132, "lrh": 133, "planet": 134, "robot": 134, "fascin": 134, "trajectori": 134, "challeng": 134, "came": [134, 281], "tackl": [134, 242], "organ": 134, "amen": 134, "arduou": 134, "child_izz": 135, "child_mass": 135, "f_h": 136, "nh": 136, "ku": [136, 209], "dnh": 136, "f_r": [136, 138, 202], "speed_con": 136, "coord_con": 136, "u_dep": 136, "m_d": 137, "lam1": 137, "0_": 138, "blajer1994": [138, 140], "brought": [138, 229], "vel_p": 138, "a_op": 138, "b_op": 138, "m_op": 138, "a_lin": 138, "hasn": 138, "wikidyad": [139, 191], "wikidyadicproduct": [139, 191], "juxtaposit": [139, 183, 258], "otim": [139, 230], "l_p": 139, "likins1973": [139, 191], "l_b": 139, "requisit": 139, "t_p": 139, "t_b": 139, "t_t": 139, "virtu": [139, 141], "blajer": 140, "wojciech": 140, "werner": 140, "schiehlen": 140, "walter": 140, "schirm": 140, "kane1983": [140, 193], "likin": [140, 191], "david": [140, 205], "spacecraft": 140, "1983": [140, 244], "meijaard": 140, "jim": 140, "papadopoulo": 140, "ruina": 140, "schwab": 140, "royal": 140, "societi": [140, 222], "2084": 140, "1955": 140, "982": 140, "lectur": [141, 203, 229], "rigibodi": 141, "proprietari": 141, "k3": [141, 199], "k4": 141, "b11": 141, "b12": 141, "b21": 141, "b22": 141, "xd": 141, "xd2": 141, "y1d": 141, "y2d": 141, "tina": 141, "overwrit": [141, 183], "dt2": 141, "dy2": 141, "ty": 141, "linsolv": [141, 207, 227, 228, 287], "nonlinsolv": [141, 227, 228, 287], "rowmatrix": 141, "colmatrix": 141, "diagmat": 141, "eigval": 141, "row_matrix": 141, "col_matrix": 141, "ao": 141, "i12": 141, "i23": 141, "i31": 141, "bf": 141, "p_o_q": 141, "mag": 141, "unitvec": 141, "qo": 141, "p_p_q": 141, "partial_veloc": [141, 184, 188], "a_o_n": 141, "set_acc": [141, 188, 192], "qb": [141, 197], "qbd": 141, "alf_b_n": 141, "set_ang_acc": [141, 184], "ang_acc_in": [141, 184], "force_o": 141, "torque_a": 141, "qa": 141, "qad": 141, "a_b": 141, "v1pt": 141, "v1pt_theori": [141, 188, 192], "a1pt": 141, "a1pt_theori": [141, 188], "a2pt": 141, "a2pt_theori": [141, 188, 192], "angvel": 141, "force_vector": 141, "center_of_mass": 141, "kindiff": 141, "ke": 141, "configura": 141, "tion_constraint": 141, "pendent": 141, "velocity_con": 141, "traint": 141, "acceleration_": 141, "u_auxilia": 141, "ry": 141, "matlplotlib": 141, "stiff": 141, "damp": 141, "legend": [141, 195, 212], "introspect": 141, "rich": [141, 221], "media": [141, 147], "histori": 141, "esqu": 141, "cpython": 141, "pertin": [142, 196, 204], "alg_con_ful": 142, "symsystem1": 142, "symsystem2": 142, "symsystem3": 142, "raytransfermatrix": 143, "geometricrai": 143, "beamparamet": 143, "geometric_conj": 143, "gauss_conj": 143, "conjugate_gauss_beam": 143, "lens": 143, "gaussopt": 143, "wavelen": 143, "z_r": 143, "wavelength": [143, 148], "waist": 143, "rayleigh": [143, 229], "refract": [143, 145, 147, 148], "530e": 143, "88679245283019": 143, "92753330865999": 143, "w_0": [143, 222], "00100000000000000": 143, "freespac": 143, "00101413072159615": 143, "00210803120913829": 143, "r672": 143, "complex_beam_paramet": 143, "r673": 143, "gaussian_beam": 143, "spread": [143, 209, 229, 244], "00053": 143, "goui": 143, "55998576005696": 143, "2809": 143, "peak": 143, "waist_approximation_limit": 143, "paraxi": [143, 147], "06e": 143, "curvedmirror": 143, "curvedrefract": 143, "flatmirror": 143, "flatrefract": 143, "2x1": 143, "thinlen": 143, "r674": 143, "ray_transfer_matrix_analysi": 143, "waist_in": 143, "waist_out": 143, "s_in": 143, "s_out": 143, "w_o": 143, "gaussian_conj": 143, "z_r_in": 143, "incid": [143, 147], "z_r_out": 143, "emerg": [143, 197], "geometric_conj_ab": 143, "geometric_conj_af": 143, "geometric_conj_bf": 143, "rayleigh2waist": 143, "waist2rayleigh": 143, "optic": [145, 146, 147, 148, 271], "permitt": 145, "permeabl": 145, "fermat": 145, "electr": [145, 147, 190, 261, 263], "electromagnet": [145, 190, 235, 263], "intrinsic_imped": 145, "149896229": [145, 148], "kilogram": [145, 177, 179, 181], "1250000": 145, "amper": 145, "refractive_index": 145, "299792458": [145, 148, 181], "r675": 145, "optical_medium": 145, "travel": [145, 148, 190, 261, 263], "stoke": 146, "mueller": 146, "jones_vector": 146, "stokes_vector": 146, "half_wave_retard": 146, "polarizing_beam_splitt": 146, "jones_2_stok": 146, "\u2148": [146, 194, 208, 209, 228, 287], "\u03c7": 146, "\u03c8": 146, "i\u2080": 146, "plate": 146, "hwp": 146, "splitter": 146, "transmit": [146, 147], "pb": 146, "transmitted_port": 146, "reflected_port": 146, "transmitted_pow": 146, "reflected_pow": 146, "r676": 146, "jones_calculu": 146, "r677": 146, "mueller_calculu": 146, "r678": 146, "stokes_paramet": 146, "retard": 146, "poincar\u00e9": 146, "tilt": 146, "mayor": 146, "linear_polar": 146, "transmiss": [146, 147], "mueller_matrix": 146, "quarter_wave_retard": 146, "phase_retard": 146, "\u03b4": 146, "phia": 146, "phib": 146, "4x1": [146, 229], "phi_a": 146, "phi_b": 146, "qwp": 146, "reflective_filt": 146, "unpolar": 146, "transmissive_filt": 146, "attenu": 146, "transmitt": 146, "ndf": 146, "refraction_angl": 147, "fresnel_coeffici": 147, "brewster_angl": 147, "critical_angl": 147, "lens_makers_formula": 147, "mirror_formula": 147, "lens_formula": 147, "hyperfocal_dist": 147, "transverse_magnif": 147, "medium1": 147, "medium2": 147, "brewster": 147, "926093295503462": 147, "onset": 147, "850908514477849": 147, "02005": 147, "angle_of_incid": 147, "fresnel": [147, 209, 219], "polaris": 147, "te": 147, "undergo": 147, "317843553417859": 147, "348645229818821": 147, "658921776708929": 147, "651354770181179": 147, "235625382192159": 147, "971843958291041": 147, "816477005968898": 147, "577377951366403": 147, "r679": 147, "fresnel_equ": 147, "coc": 147, "0033": 147, "focal_length": 147, "n_len": 147, "n_surr": 147, "thick": 147, "1515151515151": 147, "0000000000000": 147, "3418463277618": 147, "41152": 147, "magnif": 147, "twave": 148, "time_period": 148, "wavenumb": 148, "phi1": 148, "phi2": 148, "w1": [148, 221], "w3": [148, 209], "superposit": [148, 159, 170, 196], "angular_veloc": 148, "tempor": 148, "r680": 149, "paulialgebra": 149, "evaluate_pauli_product": 149, "paulimatric": 149, "sigma3": 149, "nodal": [150, 175, 196], "hw": [150, 175], "coherent_st": 150, "coher": [150, 176, 182], "1d": [150, 152, 165, 184, 234], "wavefunct": [150, 163, 172, 175, 271], "r681": 151, "__cmp__": [151, 155, 174], "dagger": [151, 155, 161, 163, 166, 168, 173, 174, 271], "todo": [152, 154, 158, 159, 163, 164, 166, 167, 168, 169, 170, 202, 209, 216, 234], "operatorset": [152, 164], "positionbra3d": 152, "eigenbra": [152, 165, 171], "positionket3d": 152, "eigenket": [152, 165, 171], "positionstate3d": 152, "eigenst": [152, 164, 169, 171, 172], "position_x": 152, "position_i": 152, "position_z": 152, "pxbra": [152, 164], "pxket": [152, 164, 169], "pxop": [152, 164, 169], "xbra": [152, 164, 169], "xket": [152, 164, 169], "xop": [152, 164, 169], "yop": 152, "zop": 152, "momenta": 153, "uncoupl": [153, 171], "r682": 153, "j_3": [153, 171, 194], "r683": 153, "wigner3j": [153, 194], "wigner": [153, 171, 229, 271], "varshalovich": [153, 171], "zyla": 153, "theor": 153, "phy": [153, 179, 194], "083c01": 153, "r684": 153, "w3j": 153, "715": [153, 194, 209], "wigner6j": [153, 194], "j12": [153, 171], "j23": 153, "6j": [153, 194], "wigner9j": [153, 194], "j4": 153, "j34": 153, "j13": 153, "j24": 153, "9j": [153, 194], "cg_simp": 153, "r685": 153, "clebsh": 153, "rethink": 154, "figsiz": 154, "circuitplot": 154, "nqubit": [154, 158, 159, 168], "control_lin": 154, "gate_idx": [154, 158], "min_wir": 154, "max_wir": 154, "control_point": 154, "wire_idx": 154, "not_point": 154, "one_qubit_box": 154, "box": [154, 159, 161, 170, 172, 264, 271], "qubit": [154, 158, 159, 160, 161, 167, 271], "swap_point": 154, "two_qubit_box": 154, "createcg": 154, "latexnam": 154, "mock": 154, "mz": 154, "circuit_plot": 154, "min_qubit": [154, 158], "autogener": 154, "wire": 154, "j_0": 154, "r686": 155, "comm": [155, 174, 235], "plank": 156, "r687": 156, "05457162000000e": 156, "planck_const": 156, "hermetian": 157, "r688": 157, "r689": 157, "ket": [157, 162, 163, 164, 166, 168, 169, 172, 174], "bra": [157, 162, 163, 164, 166, 168, 169, 172, 174], "innerproduct": [157, 162, 163, 169, 171, 174], "outerproduct": [157, 163], "seamlessli": 157, "hermitian_adjoint": 157, "hermitian_transpos": 157, "_apply_operators_qubit": 158, "gate_sort": 158, "gate_simp": 158, "ugat": 158, "cgate": 158, "control_valu": 158, "cnot": 158, "eval_control": 158, "plot_gat": 158, "circ_plot": 158, "simplify_cg": 158, "cphase": 158, "cnotgat": 158, "qappli": [158, 159, 161, 163, 168, 271], "get_target_matrix": 158, "hadamardg": 158, "identityg": 158, "onequbitg": 158, "phaseg": 158, "swapgat": 158, "target1": 158, "target2": 158, "tgate": 158, "twoqubitg": 158, "xgate": 158, "ygate": 158, "zgate": 158, "bubbl": 158, "random_circuit": 158, "ngate": 158, "gate_spac": 158, "mermin": 159, "_represent_zg": 159, "oracleg": 159, "oracl": 159, "intqubit": [159, 168], "search_funct": 159, "wgate": 159, "apply_grov": 159, "grover_iter": 159, "qstate": 159, "wv": 159, "superposition_basi": 159, "numqubit": 159, "basis_st": 159, "matt": 160, "complexspac": 160, "directsumhilbertspac": 160, "r690": 160, "hilbertspac": 160, "fockspac": 160, "hilbert_spac": [160, 163, 172], "direct_sum": 160, "quantiz": [160, 271], "r691": 160, "mess": [160, 225, 228, 286], "fock_spac": 160, "r692": 160, "tensorpowerhilbertspac": 160, "r693": 160, "tensor_product": 160, "tensorproducthilbertspac": 160, "r694": 160, "clebsch": [161, 171, 194, 271], "gordan": [161, 171, 194, 271], "hilbert": [161, 163, 169, 271], "grover": [161, 271], "qft": [161, 170, 271], "shor": [161, 271], "brabas": [162, 163, 169, 172], "ketbas": [162, 163, 169, 172], "r695": 162, "inner_product": 162, "apply_oper": [163, 174], "identityoper": 163, "r696": 163, "r697": 163, "polymoni": 163, "operator_": 163, "28physic": 163, "old_assumpt": 163, "r698": 163, "outer_product": 163, "unitaryoper": 163, "operators_to_st": 164, "state_to_oper": 164, "_operators_to_st": 164, "state_map": 164, "_state_to_oper": 164, "statebas": [164, 169, 172], "piab": 165, "piabbra": 165, "piabhamiltonian": 165, "piabket": 165, "ip_doit": 166, "smarter": [167, 218], "rk": 167, "iqft": 167, "rkgate": 167, "qtf": 167, "povm": 168, "as_int": [168, 250], "qubit_valu": 168, "intqubitbra": 168, "00001": 168, "qubitbra": 168, "matrix_to_dens": 168, "matrix_to_qubit": 168, "measure_al": 168, "ensembl": 168, "measure_all_oneshot": 168, "oneshot": 168, "measure_parti": 168, "measure_partial_oneshot": 168, "qubit_to_matrix": 168, "enumerate_st": 169, "_enumerate_st": 169, "foo_1": 169, "foo_2": 169, "foo_3": 169, "test2": 169, "bar_4": 169, "bar_5": 169, "bar_10": 169, "get_basi": 169, "replace_non": 169, "operator_to_st": 169, "qexpr": 169, "integrate_result": 169, "orig_expr": 169, "x_ket": 169, "x_op": 169, "rep_expect": 169, "px_2": 169, "px_1": 169, "rep_innerproduct": 169, "_repres": 169, "_represent_foobasi": 169, "foobasi": 169, "_represent_szop": 169, "szupket": 169, "szop": 169, "sz": 169, "cmod": 170, "reformat": 170, "period_find": 170, "momemtum": 171, "j2op": 171, "jxbra": 171, "jx": 171, "jzket": 171, "jxbracoupl": 171, "jcoupl": 171, "jzketcoupl": 171, "jxket": 171, "jxketcoupl": 171, "jybra": 171, "jy": 171, "jybracoupl": 171, "jyket": 171, "jyketcoupl": 171, "jzbra": 171, "jz": 171, "jzbracoupl": 171, "j_4": [171, 194], "argular": 171, "jzop": 171, "passiv": 171, "r699": 171, "wignerd": 171, "mp": [171, 227, 243], "jm": 171, "jj": 171, "r700": 171, "jcoupling_list": 171, "coupledspinst": 171, "spinstat": 171, "r701": 172, "dual_class": 172, "mn": [172, 209, 229], "ket_not": 172, "r702": 172, "k0": [172, 200, 202, 229], "orthogonalbra": 172, "orthogonalket": 172, "orthogonalst": 172, "_eval_adjoint": 172, "timedepbra": 172, "timedepst": 172, "timedepket": 172, "prob": [172, 229], "412214747707527": 172, "matrix_tensor_product": 173, "axb": 173, "xdagger": 173, "axc": 173, "bxc": 173, "tensor_product_simp": 173, "cxd": 173, "boson": 174, "fetter": 174, "welecka": 174, "secondqu": 174, "annihilateboson": 174, "fockstateket": 174, "bket": 174, "fockstatebosonket": 174, "annihilatefermion": 174, "createboson": 174, "is_only_q_annihil": 174, "destroi": [174, 218], "quasi": 174, "hole": 174, "is_only_q_cr": 174, "is_q_annihil": 174, "is_q_creat": 174, "antisymmetrictensor": 174, "bbra": 174, "fockstatebosonbra": 174, "bd": 174, "bosonicbasi": 174, "fock": 174, "NO": 174, "createfermion": 174, "wick": 174, "fbra": 174, "fockstatefermionbra": 174, "fket": 174, "fockstatefermionket": 174, "fixedbosonicbasi": 174, "n_particl": 174, "n_level": 174, "fockstat": 174, "occup": 174, "bosonbra": 174, "fockstatebra": 174, "fermi_level": 174, "r703": 174, "textwrap": [174, 250], "_q": 174, "get_subno": 174, "fermionicoper": 174, "has_q_annihil": 174, "q_annihil": 174, "has_q_creat": 174, "leftmost": 174, "q_creator": 174, "iter_q_annihil": 174, "iter_q_cr": 174, "0x": 174, "permutationoper": 174, "get_permut": 174, "varbosonicbasi": 174, "n_max": 174, "creator": 174, "evaluate_delta": 174, "einstein": [174, 235], "d_ij": 174, "_j": [174, 179, 194, 211], "d_ip": 174, "d_qp": 174, "matrix_rep": 174, "simplify_index_permut": 174, "permutation_oper": 174, "schemat": [174, 179], "abij": 174, "abji": 174, "baij": 174, "baji": 174, "permutlist": 174, "substitute_dummi": 174, "new_indic": 174, "pretty_indic": 174, "_get_ordered_dummi": 174, "_c": 174, "_d": 174, "index_group": 174, "string_of_lett": 174, "my_dummi": 174, "_v": [174, 193], "_p_0": 174, "_p_1": 174, "keep_only_fully_contract": 174, "sho": 175, "isotrop": 175, "mk": [176, 179], "legal": 176, "temperatur": [176, 190, 263], "dimensions": 176, "dimsys_si": [176, 177], "get_dimensional_depend": [176, 177], "has_integer_pow": 176, "dim_si": 176, "base_dim": 176, "derived_dim": 176, "dimensional_depend": 176, "can_transf_matrix": 176, "useless": [176, 200, 202], "inv_can_transf_matrix": 176, "dim_can_vector": 176, "dim_vector": 176, "is_consist": [176, 182], "is_dimensionless": 176, "list_can_dim": 176, "print_dim_bas": 176, "gravitational_const": [177, 181], "equivalent_dim": 177, "grav_eq": 177, "kepler": [177, 254], "venu": 177, "701": 177, "dai": [177, 181, 225], "venus_a": 177, "108208000e3": 177, "solar": 177, "solar_mass": 177, "9891e30": 177, "convert_to": [177, 181, 198, 204], "5112118495813": 177, "659097795948": 177, "astrophys": 177, "astrophysicist": 178, "ua": [178, 197], "earth": [178, 190, 263], "sun": 178, "theoricist": 178, "philosophi": [178, 225, 228, 271], "rough": 179, "mole": 179, "dimensionless": 179, "unavoid": 179, "d_3": 179, "d_2": [179, 205, 229], "underbrac": [179, 192], "countabl": [179, 228], "pmatrix": 179, "kg": [179, 264], "glu": 179, "men": 179, "heat": 179, "joul": 179, "calori": 179, "stori": 179, "chemistri": 179, "page52": 179, "1952": 179, "page78": 179, "deboer79": 179, "boer": 179, "818": 179, "levyleblond77": 179, "l\u00e9vy": 179, "leblond": 179, "conceptu": [179, 196, 263], "rivista": 179, "del": [179, 244, 254, 262, 286], "nuovo": [179, 194], "cimento": [179, 194], "1977": 179, "187": [179, 203], "214": 179, "anticip": 179, "bin_prefix": 180, "abbrev": [180, 181, 209], "latex_repr": [180, 181], "encapsul": [180, 202, 228, 242], "kilo": 180, "scale_factor": 181, "pretty_unicode_repr": 181, "pretty_ascii_repr": 181, "mathml_presentation_repr": 181, "is_prefix": 181, "abbrevi": [181, 197, 209, 228, 230], "speed_of_light": 181, "reference_quant": 181, "target_unit": 181, "mile": 181, "atomic_mass_const": 181, "centimet": 181, "25146": 181, "609344": 181, "86400": 181, "660539060e": 181, "300000": 181, "planck": 181, "62963087839509e": 181, "base_unit": 182, "descr": 182, "dimension_system": 182, "derived_unit": 182, "overridden": [182, 196, 211, 286], "get_units_non_prefix": 182, "rigidli": 183, "entireti": 183, "_str": 183, "coordinatesym": [184, 186], "otherfram": [184, 254], "n_alpha_b": 184, "ny": 184, "_3": [184, 194], "orient_body_fix": 184, "orient_space_fix": 184, "orient_quaternion": 184, "quaternion": [184, 188, 193, 254, 256], "userwarn": [184, 238, 245, 282], "rotation_ord": [184, 254, 256], "xzx": 184, "xyx": [184, 254, 256], "yzy": 184, "zyz": 184, "yxy": [184, 193], "yzx": [184, 193], "zxy": 184, "xzy": 184, "zyx": 184, "yxz": 184, "orient_explicit": 184, "lambda_x": [184, 254, 256], "lambda_i": [184, 254, 256], "lambda_z": [184, 254, 256], "q0": [184, 225, 254, 256], "newnam": 184, "gen_spe": [184, 188], "variable_map": 184, "a_x": [184, 193, 209], "b_x": [184, 186, 193, 235], "b_y": [184, 186, 193, 235], "a_z": [184, 193], "b_z": [184, 193, 235], "inlist": 184, "var_in_dcm": 184, "reexpress": [184, 259], "time_deriv": [184, 186, 190], "free_dynamicsymbol": 184, "codirect": 184, "dyadic_tensor": [184, 254], "frame1": 184, "frame2": [184, 186], "second_reference_fram": 184, "ixz": 184, "inertia_dyad": 184, "pertain": [185, 191], "fieldfunct": [185, 190], "curl": [185, 254, 257, 264], "vect": [185, 254, 257], "r_x": [185, 190], "r_y": [185, 190], "r_z": [185, 190], "gradient": [185, 194, 195, 254, 257, 263], "scalar_potenti": [185, 190, 257, 261], "scalar_field": [185, 190, 254, 257, 261], "grad_field": [185, 257], "scalar_potential_differ": [185, 190, 257, 261], "sympyfi": [185, 186, 188, 257], "position2": [185, 257], "vectfield": [185, 190, 257, 261], "is_conserv": [185, 190, 257, 261], "is_solenoid": [185, 190, 257, 261], "solenoid": [185, 257], "q6": 186, "vec1": 186, "vec2": 186, "n_x": 186, "rotating_reference_fram": 186, "time_derivatives_in_the_two_fram": 186, "otherpoint": 188, "outfram": 188, "fixedfram": 188, "get_motion_param": 188, "vectori": [188, 190, 258, 263], "timevalue1": 188, "timevalue2": 188, "313": 188, "vel_vec": 188, "q1dd": 189, "q2dd": 189, "charg": [190, 263], "displac": [190, 192, 263], "temper": 190, "4xy": [190, 263], "electric_potenti": [190, 261], "r1_x": 190, "r1_y": 190, "infinitesim": [190, 225, 261], "nabla": [190, 254, 260, 261], "f_y": [190, 261], "f_x": [190, 228, 261], "sink": [190, 261], "irrot": [190, 261], "conservative_field": [190, 261], "aug": [191, 228], "dyadic_product": [191, 262], "inc": [191, 203], "w_x": 192, "w_y": 192, "w_z": 192, "w_1": [192, 204], "w_2": [192, 204], "w_3": 192, "textrm": [192, 193, 217], "u_x": 192, "sp": 192, "oq": 192, "qp": 192, "rod": 192, "went": 192, "parallelogram": 193, "c_x": 193, "c_y": 193, "c_z": 193, "train": 193, "friend": 193, "xz": [193, 195], "zy": 193, "undergon": [193, 228], "vastli": 193, "wait": 193, "mold": 193, "bp": [193, 225], "bpp": 193, "zzx": 193, "multifram": 193, "direction": 193, "racah": 194, "gaunt": 194, "rasch03": 194, "regge58": 194, "regg": 194, "544": 194, "regge59": 194, "116": [194, 203], "1959": 194, "edmonds74": 194, "edmond": 194, "princeton": [194, 229], "1957": 194, "rasch": 194, "siam": [194, 247], "sci": 194, "1416": 194, "1428": 194, "liberatodebrito82": 194, "liberato": 194, "brito": 194, "homeier96": 194, "homeier": 194, "steinborn": 194, "mol": 194, "368": 194, "1996": [194, 203, 219, 227, 254], "forum": [194, 228], "m4nzdu": 194, "7o38": 194, "jen": 194, "03": [194, 229], "oscar": 194, "gerardo": 194, "lazo": 194, "arjona": 194, "phil": 194, "adam": [194, 205], "lemaitr": 194, "2022": 194, "jyr2000": 194, "gmail": 194, "clebsch_gordan": 194, "2j_3": 194, "dot_rot_grad_ynm": 194, "_l": 194, "l_2": 194, "l_3": 194, "drastic": 194, "2l_1": 194, "2l_2": 194, "2l_3": 194, "1200": 194, "00689500421922113448": 194, "inflect": 194, "unsuit": 194, "dd": [194, 214], "ee": [194, 204], "j_5": 194, "j_6": 194, "richer": 194, "real_gaunt": 194, "realgaunt": 194, "m0": [194, 235], "00002480019791932209313156167": 194, "wigner_3j": 194, "wigner_6j": 194, "wigner_9j": 194, "j_7": 194, "j_8": 194, "j_9": 194, "05555555": 194, "1666666": 194, "wigner_d": 194, "j_z": 194, "j_y": 194, "\u03b3": [194, 276, 286], "wigner_d_smal": 194, "textbackend": 195, "plot_parametr": 195, "plot_implicit": 195, "plot3d_parametric_lin": 195, "plot3d_parametric_surfac": 195, "xlabel": 195, "ylabel": 195, "zlabel": 195, "aspect_ratio": 195, "ylim": 195, "axis_cent": 195, "xscale": 195, "yscale": 195, "autoscal": 195, "textplot": 195, "_seri": [195, 206], "baseseri": 195, "nonparametr": 195, "basebackend": 195, "parametric2dlineseri": 195, "parametric3dlineseri": 195, "red": 195, "cyan": 195, "grayscal": 195, "integers_onli": 195, "surfaceover2drangeseri": 195, "parametricsurfaceseri": 195, "surface_color": 195, "range1": 195, "range2": 195, "fill_between": 195, "inch": 195, "expr_x": 195, "expr_i": 195, "canva": 195, "range_x": 195, "range_i": 195, "nb_of_points_x": 195, "nb_of_points_i": 195, "expr_z": 195, "range_u": 195, "range_v": 195, "nb_of_points_u": 195, "nb_of_points_v": 195, "x_var": 195, "y_var": 195, "mesh": 195, "p8": 195, "p9": 195, "nrow": [195, 198], "ncolumn": 195, "stuff": [195, 240, 242, 250], "is_2dlin": 195, "oblig": 195, "only_integ": 195, "get_seg": 195, "get_color_arrai": 195, "var_start_end": 195, "r704": 195, "luiz": 195, "henriqu": 195, "figueiredo": 195, "r705": 195, "line3dbaseseri": 195, "surfacebaseseri": 195, "var_start_end_x": 195, "var_start_end_i": 195, "var_start_end_u": 195, "var_start_end_v": 195, "implicitseri": 195, "has_equ": 195, "use_interval_math": 195, "centric": 195, "get_mesh": 195, "process_seri": 195, "_process_seri": 195, "keyboard": 195, "mous": 195, "pyglet_plot": 195, "screenshot": 195, "camera": 195, "zoom": 195, "numpad": 195, "ordin": [195, 225, 250], "f5": 195, "f6": 195, "f8": 195, "drag": 195, "button": [195, 241], "curvilinear": [195, 258, 259], "__setitem__": 195, "zfade4": 195, "key1": 195, "value1": 195, "key2": 195, "value2": 195, "unbound_theta": 195, "wirefram": 195, "saddl": 195, "fz": 195, "_______________________________________________________": 195, "mediterranean": 196, "cultur": 196, "arab": 196, "lighten": 196, "tapestri": 196, "woven": 196, "european": 196, "soil": 196, "plausibl": 196, "teeter": 196, "totter": 196, "outweigh": 196, "excit": 196, "amus": 196, "kempf": 196, "1944": 196, "20th": 196, "dedekind": 196, "intim": 196, "disciplin": 196, "toolset": 196, "atiyah69": [196, 203], "gear": 196, "greuel2008": [196, 203], "interspers": 196, "lr": 196, "ilex": 196, "\u211a": [196, 209], "localis": 196, "abridg": 196, "free_modul": [196, 200], "quotient_r": [196, 200], "overload": [196, 199, 200, 258, 281], "polynomialr": [196, 200, 207], "domain_or_r": [196, 200], "quotientr": [196, 200], "base_id": [196, 200], "elbow": 196, "room": 196, "componentwis": [196, 209], "inclin": 196, "biproduct": 196, "quotient_modul": 196, "is_submodul": 196, "multiply_id": 196, "identity_hom": 196, "freemodul": 196, "freemoduleel": 196, "conicis": 196, "_contain": 196, "_syzygi": 196, "_in_terms_of_gener": 196, "_intersect": 196, "_module_quoti": 196, "reduce_el": [196, 204], "represantit": 196, "in_terms_of_gener": 196, "inclusion_hom": 196, "rela": 196, "relb": 196, "is_full_modul": 196, "module_quoti": 196, "opt": [196, 202, 221, 240, 282], "coincis": 196, "syzygy_modul": 196, "r_n": 196, "_contains_elem": 196, "_contains_id": 196, "_quotient": 196, "_union": 196, "_product": 196, "is_whole_r": 196, "is_maxim": 196, "is_primari": 196, "is_rad": 196, "is_princip": 196, "xj": 196, "satur": 196, "subquoti": 196, "quotientmodul": 196, "subquotientmodul": 196, "killed_modul": 196, "quotientmoduleel": 196, "kill": [196, 200, 240], "quotient_hom": 196, "ker": 196, "surject": 196, "cokernel": 196, "coker": 196, "meaningfulli": 196, "restrict_domain": 196, "homomoprh": 196, "modulehomomorph": [196, 204], "_ker": 196, "_img": 196, "_kernel": 196, "_imag": 196, "_restrict_domain": 196, "_restrict_codomain": 196, "_quotient_domain": 196, "_quotient_codomain": 196, "_appli": 196, "_mul_scalar": 196, "_compos": 196, "_add": [196, 215], "is_inject": 196, "quotient_domain": 196, "is_isomorph": 196, "preimag": 196, "restrict_codomain": 196, "is_surject": 196, "quotient_codomain": 196, "induct": 196, "monogen": 196, "monogenicfiniteextens": [196, 200], "finiteextens": 196, "sqrt2": [196, 199], "_5": 196, "extensionel": [196, 200], "notinvert": [196, 202, 205], "overview": [197, 228, 262, 263], "nu_1": 197, "nu_2": 197, "nu_n": 197, "nu_i": 197, "customarili": 197, "endow": [197, 205], "resp": [197, 200, 225], "divmod": [197, 199, 200], "cb": [197, 247], "sqf_list": [197, 200, 205], "sqf": [197, 200, 205, 222], "buchberg": [197, 202, 203, 205], "solve_poly_system": [197, 205, 227, 228], "ddm": 198, "fmt": [198, 200, 204], "matrix1": 198, "sdm": [198, 202], "dmnonsquarematrixerror": 198, "zz_i": [198, 199], "from_dict_sympi": 198, "ncol": 198, "elemsdict": 198, "from_list_sympi": 198, "from_list": [198, 200, 205, 206], "construct_domain": [198, 199, 200, 205], "from_rep": 198, "drep": 198, "dm": [198, 204], "ownership": 198, "scc": 198, "substract": 198, "to_dens": 198, "to_field": [198, 200, 205], "to_spars": 198, "aq": 198, "ccc": [198, 228], "from_ddm": 198, "domainerror": [198, 202, 205], "to_ddm": 198, "r706": 198, "pythonmpq": [199, 200], "srepr": [199, 281], "strength": 199, "richardon": 199, "dup_factor_list": 199, "factortool": [199, 202], "dup_": [199, 202], "dmp_": [199, 202], "z1": [199, 200, 227], "is_field": [199, 200], "quo": [199, 200, 202, 205], "rem": [199, 200, 202, 205], "exquo": [199, 200, 205], "exactquotientfail": [199, 200, 202, 205], "mpz": [199, 200], "of_typ": [199, 200], "z1_sympi": 199, "to_sympi": [199, 200], "from_sympi": [199, 200], "forth": [199, 204], "z_sympi": 199, "z_zz": 199, "coercionfail": [199, 202], "sum_domain": 199, "expressions_sympi": 199, "expressions_dom": 199, "result_dom": 199, "e_dom": 199, "result_sympi": 199, "qq_i": 199, "gaussianinteg": [199, 200], "gaussianrationalfield": [199, 200], "gaussianr": [199, 200], "galoi": [199, 202, 204], "finitefield": [199, 200], "pythonfinitefield": [199, 200], "gmpyfinitefield": [199, 200], "welcom": [199, 225, 279], "realel": [199, 200], "complexel": [199, 200], "mpc": 199, "xr": [199, 207], "zc": 199, "1j": 199, "_mpc_": 199, "realfield": [199, 200], "rr100": 199, "33333333333333333333333333333": 199, "hack": [199, 225, 238], "algebraic_field": [199, 200, 202, 204], "algebraicfield": [199, 200, 202, 204], "sqrt3": 199, "x_dom": 199, "p_expr": [199, 200], "polyel": [199, 200, 202, 206, 207, 209], "p_dom": 199, "xk": [199, 200, 211], "yk": [199, 200], "poly_r": [199, 200], "old_polynomialr": 199, "globalpolynomialr": 199, "polyclass": [199, 200, 205], "yr": [199, 207], "broader": 199, "get_field": [199, 200], "frac_field": [199, 200], "rationalfield": [199, 200], "old_frac_field": [199, 200], "fractionfield": [199, 200], "old_fractionfield": 199, "xf": 199, "yf": 199, "fracfield": [199, 200], "expressiondomain": [199, 200], "elements_sympi": 199, "elements_k": 199, "convert_from": [199, 200], "num_zz": 199, "num_qq": 199, "domainel": [199, 200, 207], "encompass": 199, "all_coeff": [199, 200, 205], "dom": [199, 200, 202, 217], "strang": 199, "hybrid": 199, "unreli": 199, "usefulli": 200, "pythonr": [200, 207], "p_domain": 200, "ez": [200, 235], "get_r": 200, "has_assoc_field": 200, "has_assoc_r": 200, "alg_field_from_poli": [200, 204], "root_index": 200, "almosteq": 200, "cyclotomic_field": [200, 204], "zeta7": 200, "zeta_": 200, "lexord": [200, 205], "from_algebraicfield": 200, "from_complexfield": 200, "from_expressiondomain": 200, "from_expressionrawdomain": 200, "from_ff": 200, "modularinteg": 200, "from_ff_gmpi": 200, "from_ff_python": 200, "from_fractionfield": 200, "from_globalpolynomialr": 200, "from_monogenicfiniteextens": 200, "from_polynomialr": 200, "from_qq_gmpi": 200, "from_qq_python": 200, "from_realfield": 200, "from_zz_gmpi": 200, "from_zz_python": 200, "gcdex": [200, 205], "get_exact": 200, "half_gcdex": [200, 205], "is_pid": 200, "is_r": 200, "is_nonposit": 200, "is_on": [200, 205], "rersiv": 200, "__neg__": 200, "__pos__": 200, "__sub__": 200, "q_domain": 200, "q_expr": 200, "x_domain": 200, "alg": [200, 204, 208], "trait": 200, "is_unit": 200, "__divmod__": 200, "__floordiv__": 200, "__mod__": [200, 204], "simpledomain": 200, "compositedomain": 200, "from_qq": 200, "from_zz": 200, "gmpyinteg": 200, "pythoninteg": 200, "gmpyrationalfield": 200, "pythonrationalfield": 200, "from_gaussianrationalfield": 200, "gaussianel": 200, "gaussiandomain": 200, "qq_python": 200, "zz_python": 200, "z2": 200, "z3": 200, "z4": 200, "from_gaussianinteg": 200, "as_algebraicfield": 200, "orig_ext": 200, "integral_basi": [200, 204], "maximal_ord": [200, 204], "zeta5": 200, "primes_abov": [200, 204], "primeid": [200, 204], "to_alg_num": [200, 204], "legibl": 200, "to_rat": 200, "mpelement": 200, "complexfield": 200, "lc": [200, 202, 205], "domain_or_field": 200, "dmf": 200, "coercibl": 200, "monomialord": [200, 205], "xring": 200, "vring": 200, "sring": [200, 206, 207], "polyr": [200, 202, 207], "factor_list": [200, 205, 286], "add_gen": 200, "drop_to_ground": 200, "monomial_basi": 200, "206": [200, 205], "744": 200, "945": [200, 206], "is_monomi": [200, 205], "const": [200, 209], "inplac": 200, "shallow": [200, 216], "zero_monom": 200, "fv": 200, "clo": 200, "p64": 200, "qv": 200, "f0": 200, "imul_num": 200, "itercoeff": 200, "itermonom": 200, "iterterm": 200, "leading_expv": 200, "leading_monom": 200, "leading_term": 200, "listcoeff": 200, "listmonom": 200, "listterm": 200, "monom": [200, 205], "strip_zero": 200, "tail_degre": 200, "xfield": 200, "vfield": [200, 260], "sfield": [200, 260], "fracel": [200, 209], "lev": 200, "add_ground": [200, 205], "all_monom": [200, 205], "all_term": [200, 205], "cauchy_lower_bound": 200, "cauchy_upper_bound": 200, "clear_denom": [200, 205], "count_complex_root": 200, "sup": [200, 205, 209, 216, 217], "count_real_root": 200, "deflat": [200, 205], "y_i": [200, 202, 204, 205, 225], "x_j": [200, 202, 205], "degree_list": [200, 205], "eject": [200, 205], "exquo_ground": [200, 205], "factor_list_includ": [200, 205], "from_dict": [200, 205], "from_sympy_list": 200, "gff_list": [200, 205], "homogeneous_ord": [200, 205, 222, 225], "is_cyclotom": [200, 205], "is_ground": [200, 205], "is_homogen": [200, 205], "is_irreduc": [200, 205], "is_linear": [200, 205], "is_mon": [200, 205], "is_quadrat": [200, 205], "is_sqf": [200, 205], "l1_norm": [200, 205], "l2_norm_squar": 200, "max_norm": [200, 205], "mignotte_sep_bound_squar": 200, "mignott": [200, 202], "mul_ground": [200, 205], "pdiv": [200, 205], "pexquo": [200, 205], "pquo": [200, 205], "prem": [200, 205], "quo_ground": [200, 205], "refine_root": [200, 204, 205], "includepr": [200, 202, 205], "sqf_list_includ": [200, 205], "sqf_norm": [200, 205], "sqf_part": [200, 205], "sqr": [200, 205], "sturm": [200, 205], "sub_ground": [200, 205], "to_dict": 200, "to_exact": [200, 205], "to_r": [200, 205], "to_sympy_dict": 200, "to_sympy_list": 200, "to_tupl": 200, "total_degre": [200, 205, 222], "trunc": [200, 205, 208], "frac_unifi": 200, "half_per": 200, "poly_unifi": 200, "gr\u00f6bner": 201, "wester": [201, 272], "agca": [201, 272], "l0": 202, "legitim": 202, "uninterest": 202, "bulk": [202, 219], "x_u": 202, "dup__": 202, "densebas": 202, "dmp_lc": 202, "poly_lc": 202, "dmp_tc": 202, "poly_tc": 202, "dmp_ground_lc": 202, "dmp_ground_tc": 202, "dmp_true_lt": 202, "n_1": [202, 227, 229], "n_k": 202, "dmp_degre": 202, "dmp_degree_in": 202, "dmp_degree_list": 202, "dmp_strip": 202, "dmp_valid": 202, "dup_revers": 202, "dmp_copi": 202, "dmp_to_tupl": 202, "dmp_normal": 202, "dmp_convert": 202, "to_domain": 202, "dmp_from_sympi": 202, "dmp_nth": 202, "dmp_ground_nth": 202, "dmp_zero_p": 202, "dmp_zero": 202, "dmp_one_p": 202, "dmp_one": 202, "dmp_ground_p": 202, "dmp_ground": 202, "dmp_negative_p": 202, "dmp_positive_p": 202, "dmp_from_dict": 202, "dmp_to_dict": 202, "dmp_swap": 202, "dmp_permut": 202, "dmp_nest": 202, "dmp_rais": 202, "dmp_deflat": 202, "dmp_multi_defl": 202, "dmp_inflat": 202, "dmp_exclud": 202, "dmp_includ": 202, "dmp_inject": 202, "dmp_eject": 202, "dmp_terms_gcd": 202, "dmp_list_term": 202, "dmp_apply_pair": 202, "dmp_slice": 202, "dup_random": 202, "densearith": 202, "dmp_add_term": 202, "dmp_sub_term": 202, "dmp_mul_term": 202, "dmp_add_ground": 202, "dmp_sub_ground": 202, "dmp_mul_ground": 202, "dmp_quo_ground": 202, "dmp_exquo_ground": 202, "dup_lshift": 202, "dup_rshift": 202, "dmp_ab": 202, "dmp_neg": 202, "dmp_add": 202, "dmp_sub": 202, "dmp_add_mul": 202, "dmp_sub_mul": 202, "dmp_mul": 202, "dmp_sqr": 202, "dmp_pow": 202, "dmp_pdiv": 202, "dmp_prem": 202, "dmp_pquo": 202, "dmp_pexquo": 202, "dmp_rr_div": 202, "dmp_ff_div": 202, "dmp_div": 202, "dmp_rem": 202, "dmp_quo": 202, "dmp_exquo": 202, "dmp_max_norm": 202, "dmp_l1_norm": 202, "dmp_expand": 202, "densetool": 202, "dmp_integr": 202, "dmp_integrate_in": 202, "dmp_diff": 202, "dmp_diff_in": 202, "dmp_eval": 202, "dmp_eval_in": 202, "dmp_eval_tail": 202, "dmp_diff_eval_in": 202, "dmp_trunc": 202, "dmp_ground_trunc": 202, "dup_mon": 202, "dmp_ground_mon": 202, "dup_cont": 202, "dmp_ground_cont": 202, "dup_primit": 202, "dmp_ground_primit": 202, "dup_extract": 202, "dmp_ground_extract": 202, "dup_real_imag": 202, "bivari": [202, 208, 225, 229], "dup_mirror": 202, "dup_scal": 202, "dup_shift": 202, "dup_transform": 202, "dmp_compos": 202, "dup_decompos": 202, "t_m": 202, "r707": 202, "dmp_lift": 202, "dup_sign_vari": 202, "dmp_clear_denom": 202, "k_0": 202, "dmp_revert": 202, "gf_": 202, "justifi": 202, "necess": 202, "u_0": 202, "m_0": [202, 222], "m_n": 202, "gf_crt1": 202, "9215": 202, "9405": 202, "9603": 202, "gf_crt2": 202, "gf_int": 202, "gf_degre": 202, "gf_lc": 202, "gf_tc": 202, "gf_strip": 202, "gf_trunc": 202, "gf_normal": 202, "gf_from_dict": 202, "gf_to_dict": 202, "gf_from_int_poli": 202, "gf_to_int_poli": 202, "gf_neg": 202, "gf_add_ground": 202, "gf_sub_ground": 202, "gf_mul_ground": 202, "gf_quo_ground": 202, "gf_add": 202, "gf_sub": 202, "gf_mul": 202, "gf_sqr": 202, "gf_add_mul": 202, "gf_sub_mul": 202, "gf_expand": 202, "gf_div": 202, "r708": 202, "monagan93": [202, 203], "r709": 202, "gathen99": [202, 203], "gf_rem": 202, "gf_quo": 202, "gf_exquo": 202, "gf_lshift": 202, "gf_rshift": 202, "gf_pow": 202, "gf_pow_mod": 202, "r710": 202, "gf_gcd": 202, "gf_lcm": 202, "gf_cofactor": 202, "gf_gcdex": 202, "eea": 202, "r711": 202, "gf_monic": 202, "gf_diff": 202, "gf_eval": 202, "gf_multi_ev": 202, "gf_compos": 202, "gf_compose_mod": 202, "gf_trace_map": 202, "r712": 202, "gathen92": [202, 203], "gf_random": 202, "gf_irreduc": 202, "gf_irreducible_p": 202, "gf_sqf_p": 202, "gf_sqf_part": 202, "gf_sqf_list": 202, "e_2": [202, 205], "e_k": 202, "f_j": [202, 219], "gf_sqf": 202, "r713": 202, "geddes92": [202, 203], "gf_qmatrix": 202, "berlekamp": 202, "gf_qbasi": 202, "gf_berlekamp": 202, "gf_zassenhau": 202, "gf_shoup": 202, "gf_factor_sqf": 202, "gf_factor": 202, "e_d": 202, "cantor": 202, "zassenhau": [202, 204], "shoup": [202, 203], "kaltofen": [202, 203], "gathen": [202, 203], "gf_factor_method": 202, "r714": 202, "gf_valu": 202, "2204": 202, "gf_csolv": 202, "congruent": [202, 219, 222], "189": 202, "112": [202, 206], "139": 202, "r715": 202, "ivan": 202, "niven": 202, "zuckerman": 202, "montgomeri": 202, "infeas": [202, 205], "sdm_": 202, "distributedmodul": 202, "sdm_monomial_mul": 202, "sdm_monomial_deg": 202, "f_5": 202, "sdm_monomial_divid": 202, "sdm_lc": 202, "sdm_to_dict": 202, "sdm_from_dict": 202, "dic": 202, "sdm_add": 202, "2f_1": 202, "3f_1": 202, "yf_1": 202, "xf_1": 202, "sdm_lm": 202, "sdm_lt": 202, "sdm_mul_term": 202, "2xy": [202, 280], "8xy": 202, "2y": [202, 222, 225, 228, 280], "sdm_zero": 202, "sdm_deg": 202, "sdm_from_vector": 202, "sdm_to_vector": 202, "variant": [202, 225, 228], "qg": 202, "remark": [202, 208, 219, 225], "uf": 202, "vg": 202, "zout": 202, "euclidtool": 202, "dmp_half_gcdex": 202, "dmp_gcdex": 202, "dmp_invert": 202, "dmp_euclidean_pr": 202, "dmp_primitive_pr": 202, "exceedingli": 202, "collin": [202, 203], "collins67": [202, 203], "subdomain": 202, "2l": 202, "remainin": 202, "subdetermin": 202, "n_2": [202, 229], "n_": [202, 222], "abnorm": 202, "gamma_i": 202, "brown": [202, 203, 229], "traub": [202, 203], "browntraub71": [202, 203], "brown78": [202, 203], "discoveri": [202, 282], "dmp_inner_subresult": 202, "729": 202, "sre": 202, "dmp_subresult": 202, "dmp_prs_result": 202, "dmp_zz_modular_result": 202, "dmp_zz_collins_result": 202, "dmp_qq_collins_result": 202, "dmp_result": 202, "dmp_discrimin": 202, "dmp_rr_prs_gcd": 202, "cff": [202, 205], "cfg": [202, 205], "dmp_ff_prs_gcd": 202, "dmp_zz_heu_gcd": 202, "r716": 202, "liao95": [202, 203], "dmp_qq_heu_gcd": 202, "dmp_inner_gcd": 202, "dmp_gcd": 202, "dmp_lcm": 202, "dmp_content": 202, "dmp_primit": 202, "dmp_cancel": 202, "dmp_trial_divis": 202, "dmp_zz_mignotte_bound": 202, "dup_zz_hensel_step": 202, "hensel": 202, "r717": 202, "dup_zz_hensel_lift": 202, "f_list": 202, "multifactor": 202, "r718": 202, "dup_zz_zassenhau": 202, "dup_zz_irreducible_p": 202, "eisenstein": 202, "dup_cyclotomic_p": 202, "bradford": 202, "russel": 202, "251": 202, "berlin": 202, "heidelberg": 202, "dup_zz_cyclotomic_poli": 202, "dup_zz_cyclotomic_factor": 202, "r719": 202, "weisstein09": [202, 203], "dup_zz_factor_sqf": 202, "dup_zz_factor": 202, "r720": 202, "dmp_zz_wang_non_divisor": 202, "wang": [202, 203], "eez": 202, "dmp_zz_wang_test_point": 202, "dmp_zz_wang_lead_coeff": 202, "dmp_zz_diophantin": 202, "dmp_zz_wang_hensel_lift": 202, "dmp_zz_wang": 202, "enhanc": [202, 229], "r721": 202, "wang78": [202, 203], "r722": 202, "dmp_zz_factor": 202, "r723": 202, "dmp_ext_factor": 202, "dup_gf_factor": 202, "dmp_factor_list": 202, "dmp_factor_list_includ": 202, "dmp_irreducible_p": 202, "groebnertool": 202, "polyconfig": [202, 205], "f5b": [202, 205], "spoli": 202, "red_groebn": 202, "beckerweispfenning93": 202, "is_groebn": 202, "is_minim": 202, "is_reduc": 202, "fglmtool": 202, "matrix_fglm": 202, "o_to": 202, "o_from": 202, "r724": 202, "fauger": [202, 205], "gianni": [202, 205, 227], "mora": [202, 203, 205, 227], "sdm_spoli": 202, "phantom": 202, "sca": 202, "defn": 202, "sdm_ecart": 202, "ecart": 202, "sdm_nf_mora": 202, "nf": 202, "sdm_groebner": 202, "sugar": [202, 203, 234], "giovini": [202, 203], "polyopt": [202, 206], "build_opt": 202, "basepolynomialerror": 202, "operationnotsupport": 202, "heuristicgcdfail": 202, "homomorphismfail": 202, "isomorphismfail": [202, 204], "extraneousfactor": 202, "evaluationfail": 202, "refinementfail": 202, "notrevers": [202, 205], "notalgebra": 202, "polynomialerror": [202, 205], "unificationfail": [202, 204], "generatorsneed": 202, "computationfail": 202, "exc": 202, "generatorserror": 202, "univariatepolynomialerror": 202, "multivariatepolynomialerror": [202, 205], "polificationfail": 202, "orig": 202, "optionerror": 202, "flagerror": 202, "modulargcd": 202, "modgcd_univari": 202, "monagan00": [202, 203], "modgcd_bivari": 202, "modgcd_multivari": 202, "_modgcd_multivariate_p": 202, "brown71": [202, 203], "degbound": 202, "contbound": 202, "func_field_modgcd": 202, "reconstuct": 202, "z_p": 202, "hoeij04": [202, 203], "scarc": 202, "hsin": 203, "chao": 203, "liao": 203, "fateman": 203, "montreal": 203, "quebec": 203, "canada": 203, "240": [203, 211, 257], "247": [203, 227], "von": [203, 229], "zur": 203, "gerhard": 203, "cambridg": [203, 222], "weisstein": 203, "cyclotomicpolynomi": 203, "1215": 203, "1231": 203, "czapor": 203, "labahn": 203, "monagan": [203, 221], "disco": 203, "721": 203, "kaltofen98": 203, "subquadrat": 203, "223": 203, "1998": [203, 222], "1179": 203, "1197": 203, "shoup95": 203, "397": 203, "shoup91": 203, "cox97": [203, 205], "shea": [203, 205], "ajwa95": 203, "ajwa": 203, "liu": 203, "groebner": [203, 204, 205, 208, 221, 227, 228], "cites": 203, "ist": [203, 218], "psu": [203, 218], "mycites": 203, "login": 203, "bose03": 203, "bose": 203, "guiver": 203, "giovini91": 203, "bronstein93": [203, 205], "salvi": [203, 206], "kiev": 203, "ukrain": 203, "buchberger01": [203, 205], "theorist": 203, "moreno": 203, "diaz": 203, "freir": 203, "eurocast": 203, "februari": 203, "davenport88": 203, "siret": 203, "tournier": 203, "london": [203, 222], "124": [203, 275], "greuel": 203, "pfister": 203, "atiyah": 203, "macdonald": 203, "142": 203, "1971": [203, 225], "505": 203, "249": 203, "wittkopf": 203, "478": 203, "hoeij": 203, "297": [203, 205], "304": [203, 205], "wang81": 203, "adic": 203, "symsac": 203, "hoeij02": 203, "manwright94": [203, 205], "yiu": 203, "kwong": 203, "franci": 203, "wright": 203, "dispers": [203, 229], "190347": 203, "190413": 203, "koepf98": [203, 205], "koepf": [203, 211, 221], "vieweg": 203, "abramov71": [203, 205], "abramov": [203, 227], "ussr": 203, "330": 203, "man93": [203, 205], "376": 203, "sciencedirect": [203, 218], "pii": [203, 218], "s0747717183710539": 203, "kapur1994": 203, "deepak": 203, "kapur": 203, "tushar": 203, "saxena": 203, "yang": 203, "dixon": 203, "researchg": [203, 229], "2514261_algebraic_and_geometric_reasoning_using_dixon_result": 203, "palancz08": 203, "pal\u00e1ncz": 203, "zaletnyik": 203, "jl": [203, 242], "awang": 203, "ew": 203, "grafarend": 203, "geodet": 203, "geodesi": 203, "225607735_dixon_result": 203, "s_solution_of_systems_of_geodetic_polynomial_equ": 203, "bruce97": 203, "bruce": 203, "randal": 203, "donald": [203, 244], "mundi": 203, "artifici": [203, 212], "intellig": [203, 221, 225, 286], "orlando": 203, "www2": 203, "duke": 203, "donaldlab": 203, "symbolicnumericalcomput": 203, "045": 203, "087": 203, "stiller96": 203, "stiller": 203, "citeseerx": [203, 218], "viewdoc": [203, 218], "590": 203, "2021": 203, "rep1": [203, 218], "cohen93": [203, 204], "henri": 203, "olga": 204, "tausski": 204, "zimmer": 204, "pohst": 204, "articul": 204, "numberfield": 204, "mathfrak": 204, "regul": 204, "alpha_m": 204, "round_two": 204, "prime_decomp": 204, "prime_valu": 204, "minimal_polynomi": 204, "field_isomorph": 204, "nilrad": 204, "z_k": 204, "zk": 204, "ordinarili": 204, "503": 204, "r725": 204, "r726": 204, "powerbasisel": 204, "ramif": 204, "as_submodul": 204, "bundl": 204, "test_factor": 204, "deliber": 204, "is_inert": 204, "inert": [204, 225], "reduce_anp": 204, "elt": 204, "reduce_alg_num": 204, "field_gen": 204, "just_gen": 204, "reagent": 204, "kummer": 204, "1847": 204, "ueber": 204, "zerlegung": 204, "crell": 204, "r727": 204, "_minpoly_compos": 204, "stall": 204, "alli": 204, "monomorph": 204, "alpha_i": 204, "alpha_n": 204, "lincomb": 204, "primtiiv": 204, "meanwhil": 204, "moduleel": 204, "powerbasi": 204, "submodule_from_matrix": 204, "ancestor": 204, "to_col": 204, "nca": 204, "circumst": [204, 280], "_mult_tab": 204, "successfulli": 204, "moduleendomorph": 204, "innerendomorph": 204, "endomorphismr": 204, "spec": [204, 205], "i_n": [204, 205, 230], "include_self": 204, "basis_el": 204, "element_from_r": 204, "endomorphism_r": 204, "is_compat_col": 204, "mult_tab": 204, "mult": 204, "closurefailur": 204, "nearest_common_ancestor": 204, "number_field": 204, "power_basis_ancestor": 204, "incom": 204, "halv": 204, "submodule_from_gen": 204, "over_power_basi": 204, "starts_with_un": 204, "hnf_modulu": 204, "whole_submodul": 204, "element_from_anp": 204, "element_from_alg_num": 204, "element_from_poli": 204, "qq_matrix": 204, "basis_element_pullback": 204, "discard_befor": 204, "structureerror": 204, "cohen00": 204, "make_mod_elt": 204, "qq_col": 204, "from_int_list": 204, "is_compat": 204, "reduced_mod_p": 204, "to_ancestor": 204, "anc": 204, "to_par": 204, "to_anp": 204, "inner_endomorph": 204, "event": [204, 229], "find_min_poli": 204, "missingunityerror": 204, "is_int": 204, "get_num_denom": 204, "extract_fundamental_discrimin": 204, "r728": 204, "algintpow": 204, "zeta_pow": 204, "r729": 204, "coeff_search": 204, "supplement_a_subspac": 204, "dmrankerror": 204, "v_n": 204, "w_r": 204, "w_j": 204, "u_j": 204, "r730": 204, "poly_from_expr": 205, "parallel_poly_from_expr": 205, "exprtool": 205, "gcd_list": 205, "lcm_list": 205, "destruct": 205, "2079": 205, "1401": 205, "2715": 205, "6720": 205, "1092": 205, "gff": 205, "check_sqf": 205, "count_root": 205, "nroot": [205, 227], "maxstep": 205, "cleanup": 205, "73205080756888": 205, "73205080756887729352744634151": 205, "ground_root": 205, "nth_power_roots_poli": 205, "r_f": 205, "r_g": 205, "_signsimp": 205, "q_n": 205, "is_zero_dimension": [205, 228], "donal": 205, "230": [205, 227], "ec": 205, "em": 205, "di": 205, "dispersionset": 205, "gp": [205, 225], "free_symbols_in_domain": 205, "from_poli": 205, "get_domain": 205, "get_modulu": 205, "has_only_gen": 205, "vincent": [205, 247], "akrita": 205, "strzebonski": 205, "va": 205, "alkiviadi": 205, "panagioti": 205, "vigkla": 205, "265": 205, "279": 205, "polnomi": 205, "is_multivari": 205, "is_univari": 205, "ltrim": 205, "_only_": 205, "sturmian": 205, "subresultants_qq_zz": 205, "suffix": [205, 242], "_pg": 205, "_amv": 205, "rem_z": 205, "premultipli": 205, "rat_clear_denom": 205, "_ignor": 205, "retract": 205, "same_root": 205, "set_domain": 205, "set_modulu": 205, "termwis": 205, "fglm": 205, "r731": 205, "horner_schem": 205, "equispac": 205, "viet": 205, "itermonomi": 205, "min_degre": 205, "gib": 205, "monomial_kei": 205, "monomial_count": 205, "gradedlexord": 205, "reversedgradedlexord": 205, "clear_cach": 205, "_get_interv": 205, "165": [205, 229, 247], "169": 205, "eval_approx": 205, "evalf_r": 205, "eval_r": 205, "69629": 205, "71318": 205, "805": 205, "3275": 205, "65536": [205, 208, 209], "414645": 205, "131072": 205, "6545": 205, "104755": 205, "2097152": 205, "6634255": 205, "_all_root": 205, "use_cach": 205, "_complexes_index": 205, "_complexes_sort": 205, "_count_root": 205, "_ensure_complexes_init": 205, "_ensure_reals_init": 205, "_eval_is_imaginari": 205, "_get_complex": 205, "_get_complexes_sqf": 205, "currentfactor": 205, "_get_real": 205, "_get_reals_sqf": 205, "_get_root": 205, "_indexed_root": 205, "_new": 205, "_postprocess_root": 205, "_preprocess_root": 205, "heroic": [205, 227], "_real_root": 205, "_reals_index": 205, "_reals_sort": 205, "_refine_complex": 205, "_roots_trivi": 205, "_set_interv": 205, "861136": 205, "86113631159405258": 205, "polyroot": 205, "unread": [205, 245], "casu": 205, "irreducibili": 205, "inexpress": 205, "unsolv": [205, 228], "r732": 205, "cubic_funct": 205, "trigonometric_": 205, "28and_hyperbol": 205, "29_method": 205, "specialpoli": 205, "swinnerton_dyer_poli": 205, "swinnerton": 205, "dyer": 205, "symmetric_poli": 205, "random_poli": 205, "gegenbau": [205, 209], "jakob": 205, "psum": 205, "3144337": 205, "r733": 205, "bernoulli_c_poli": 205, "reindex": 205, "swiss": 205, "knife": 205, "630": 205, "5124": 205, "12465": 205, "155": 205, "r734": 205, "partfrac": [205, 211], "undertermin": 205, "_w": [205, 216], "apart_list": 205, "assemble_partfrac_list": 205, "bunch": 205, "pfd": 205, "r735": 205, "partial_list": 205, "reassembl": 205, "pfda": 205, "r736": 205, "r737": 205, "r738": 205, "r739": 205, "r740": 205, "r741": 205, "r742": 205, "r743": 205, "widen": 206, "ring_seri": 206, "rs_sin": 206, "166666666666667": 206, "puiseux": 206, "rs_co": 206, "rs_tan": 206, "took": [206, 218], "eleg": [206, 208], "rs_exp": 206, "everyon": 206, "blazingli": 206, "promin": 206, "gradual": 206, "rs_": 206, "rs_log": 206, "rs_lambertw": 206, "rs_atan": 206, "arctang": 206, "rs_asin": 206, "_tan1": 206, "rs_cot": 206, "rs_cos_sin": 206, "rs_atanh": 206, "rs_sinh": 206, "rs_cosh": 206, "rs_tanh": 206, "rs_hadamard_exp": 206, "inver": 206, "rs_mul": 206, "rs_squar": 206, "rs_pow": 206, "rs_series_invers": 206, "rs_series_revers": 206, "a_kx_k": 206, "ar_i": 206, "ar_": 206, "ae": 206, "rs_trunc": 206, "rs_nth_root": 206, "160249952256379": 206, "44224957030741": 206, "rs_sub": 206, "rs_diff": 206, "rs_integr": 206, "rs_newton": 206, "rs_compose_add": 206, "r744": 206, "bostan": 206, "flajolet": 206, "schost": 206, "4579": 206, "institut": 206, "nation": 206, "recherch": 206, "informatiqu": 206, "automatiqu": 206, "rs_is_puiseux": 206, "rs_puiseux": 206, "rs_puiseux2": 206, "rs_series_from_list": 206, "concur": 206, "rs_fun": 206, "_tan": 206, "_nth": 206, "_root": 206, "_fun": 206, "mul_xin": 206, "pow_xin": 206, "_raw": 207, "sympy_eqs_to_r": 207, "eqs_r": 207, "eqs_to_matrix": 207, "eqs_coeff": 207, "eqs_rh": 207, "_solve_lin_si": 207, "_solve_lin_sys_compon": 207, "critiqu": 208, "wester1999": 208, "systemat": 208, "153": 208, "\u2124": [208, 209, 228, 287], "unm": 208, "driver": [209, 241], "adequ": 209, "emptyprint": 209, "_sympystr": 209, "mathml": 209, "inconveni": 209, "_print_": 209, "expr_class": 209, "hierarchi": [209, 229], "_print_rat": 209, "_print_numb": 209, "_print_atom": 209, "_print_bas": 209, "print_latex": 209, "mylatexprint": 209, "_print_deriv": 209, "print_my_latex": 209, "modop": 209, "subcompon": 209, "outermost": [209, 217, 221, 233], "modopmodewrong": 209, "modopnestedwrong": 209, "modopsettingswrong": 209, "subobject": 209, "infrastructur": [209, 226], "printer_exampl": 209, "set_global_set": 209, "stringpict": 209, "pretty_symbologi": 209, "prettyform": 209, "hline": 209, "vline": 209, "ascii": 209, "_pretti": 209, "use_unicode_sqrt_char": 209, "root_not": 209, "mat_symbol_styl": 209, "prettifi": 209, "bold": 209, "c89codeprint": 209, "print_ccod": 209, "tgamma": 209, "known_functions_c89": 209, "known_functions_c99": 209, "fmax": 209, "fmin": 209, "lgamma": 209, "indent_cod": 209, "cfunction_format": 209, "derefer": 209, "dereferenc": 209, "symbols_to_declar": 209, "not_supported_funct": 209, "code_text": 209, "m_sqrt2": 209, "math_macro": 209, "m_sqrt2l": 209, "cxx": 209, "cxx98codeprint": 209, "print_rcod": 209, "rcode": 209, "known_funct": 209, "_rcode": 209, "rfunction_str": 209, "rfunction_format": 209, "ifels": 209, "type_map": 209, "name_mangl": 209, "mangl": 209, "floor1": 209, "floor2": 209, "print_fcod": 209, "_fcode": 209, "conjg": 209, "32768": 209, "7182818284590452d0": 209, "1415926535897932d0": 209, "718281828459045235360287d0": 209, "141592653589793238462643d0": 209, "869604401089358618834491d0": 209, "mygamma": 209, "allow_unknown_funct": 209, "smtlib": 209, "smtlibprint": 209, "symbol_t": 209, "_smtlib": 209, "_default_set": 209, "known_const": 209, "ite": 209, "known_typ": 209, "smtlib_cod": 209, "auto_assert": 209, "auto_declar": 209, "prefix_express": 209, "suffix_express": 209, "log_warn": 209, "booleanfunct": 209, "dreal": 209, "14159": 209, "my_smt_variable_for_pi": 209, "postfix": [209, 247], "riski": 209, "sound": [209, 286], "noop": 209, "pw": 209, "pythontyp": 209, "smt_builtin_func": 209, "existing_smtlib_fcn": 209, "user_def_func": 209, "fun": [209, 226, 279], "coshintegr": 209, "cosintegr": 209, "expintegralei": 209, "factorialpow": 209, "heavisidetheta": 209, "sinhintegr": 209, "sinintegr": 209, "arccosh": 209, "arccoth": 209, "arcsinh": 209, "arctanh": 209, "dirichleteta": 209, "gegenbauerc": 209, "hypergeometricpfq": 209, "sphericalbesselj": 209, "logintegr": 209, "lucasl": 209, "mathieu": 209, "riemann_xi": 209, "riemannxi": 209, "stieltjesgamma": 209, "sphericalbess": 209, "mcodeprint": 209, "_mcode": 209, "mcode": 209, "maplecodeprint": 209, "_mapl": 209, "maple_cod": 209, "print_maple_cod": 209, "javascriptcodeprint": 209, "_javascript": 209, "js_function_str": 209, "known_fcns_src1": 209, "known_fcns_src2": 209, "conj": 209, "juliacodeprint": 209, "_julia": 209, "harmless": [209, 282], "cosmet": 209, "existing_julia_fcn": 209, "coshint": 209, "cosint": 209, "sinhint": 209, "sinint": 209, "bincoeff": 209, "logint": 209, "gammaln": 209, "octavecodeprint": 209, "_octav": 209, "recip": [209, 247], "powf": 209, "signum": 209, "rustcodeprint": 209, "_rust_cod": 209, "7_f64": 209, "_aesara": 209, "tensorvari": 209, "floatx": 209, "squeez": 209, "dim_handl": 209, "gtkmathview": 209, "widget": 209, "print_gtk": 209, "libgtkmathview": 209, "start_view": 209, "_lambdacod": 209, "accepted_latex_funct": 209, "parenthesize_sup": 209, "fold_frac_pow": 209, "fold_func_bracket": 209, "fold_short_frac": 209, "inv_trig_styl": 209, "itex": 209, "ln_notat": 209, "long_frac_ratio": 209, "mat_delim": 209, "mat_str": 209, "mul_symbol": 209, "symbol_nam": 209, "gothic_re_im": 209, "decimal_separ": 209, "diff_oper": 209, "smallmatrix": [209, 280], "amsmath": 209, "fracton": 209, "semicolon": 209, "monospac": 209, "mathtt": 209, "mathml2": 209, "mathmlprinterbas": 209, "mathmlcontentprint": 209, "mathmlpresentationprint": 209, "chapter4": 209, "_mathml_cont": 209, "mathml_tag": 209, "chapter3": 209, "_mathml_present": 209, "utf": 209, "mul_symbol_mathml_numb": 209, "xb7": 209, "print_mathml": [209, 285], "mrow": 209, "mpmathprint": 209, "fully_qualified_modul": 209, "print_python": 209, "textual": 209, "reprprint": 209, "_sympyrepr": 209, "reprifi": 209, "sympy_integ": 209, "displayhook": [209, 240], "pprint_nod": 209, "nb2": 209, "print_nod": 209, "asssumpt": 209, "determinisit": 209, "backtrac": 209, "print_tre": 209, "outputbuff": 209, "dvioption": 209, "outputtexfil": 209, "extra_preambl": 209, "latex_set": 209, "postscript": 209, "tex": 209, "eulervm": 209, "sty": 209, "debian": 209, "ubuntu": 209, "unset": [209, 221], "gimp": 209, "evinc": 209, "kdvi": 209, "xdvi": 209, "xdg": 209, "system_default_view": 209, "gracefulli": [209, 233], "bytesio": 209, "usepackag": 209, "amsfont": 209, "renewcommand": 209, "popen": 209, "phidd": 209, "bitmap": 209, "split_super_sub": 209, "var_sub1__sup_sub2": 209, "assignmenterror": 209, "bitwiseand": 209, "bitwiseor": 209, "bitwisexor": 209, "precedence_valu": 209, "kroneckerproduct": 209, "tensadd": [209, 235], "tensmul": [209, 235], "precedence_funct": 209, "precedence_float": 209, "precedence_fracel": 209, "precedence_integ": 209, "precedence_mul": 209, "precedence_polyel": 209, "precedence_r": 209, "precedence_unevaluatedexpr": 209, "databas": [209, 219], "pretty_use_unicod": 209, "pretty_try_use_unicod": 209, "xstr": 209, "greek_lett": 209, "digit_2txt": 209, "ONE": 209, "seven": 209, "symb_2txt": 209, "parenthesi": [209, 233], "\u2080": 209, "\u2081": 209, "\u2082": 209, "\u2084": 209, "\u2085": 209, "\u2086": 209, "\u2087": 209, "\u2088": 209, "\u2089": 209, "\u2090": 209, "\u1d66": 209, "\u1d6a": 209, "\u2091": 209, "\u1d67": 209, "\u2095": 209, "\u1d62": 209, "\u2096": 209, "\u2097": 209, "\u2098": 209, "\u2099": 209, "\u2092": 209, "\u209a": 209, "\u1d69": 209, "\u1d63": 209, "\u1d68": 209, "\u209b": 209, "\u209c": 209, "\u1d64": 209, "\u1d65": 209, "\u2093": 209, "\u2070": 209, "\u00b9": 209, "\u00b2": 209, "\u00b3": 209, "\u2074": 209, "\u2075": 209, "\u2076": 209, "\u2077": 209, "\u2078": 209, "\u2079": 209, "\u2071": 209, "\u207f": 209, "xobj": 209, "vobj": 209, "hobj": 209, "vf": 209, "\u00bd": 209, "\u2153": 209, "\u00bc": 209, "\u2155": 209, "\u2159": 209, "\u215b": 209, "\u2154": 209, "\u2156": 209, "\u00be": 209, "\u2157": 209, "\u215c": 209, "\u2158": 209, "\u215a": 209, "\u215d": 209, "\u215e": 209, "xsym": 209, "symbologi": 209, "atoms_t": 209, "\u2102": [209, 287], "emptysequ": [209, 215], "\u2115": 209, "\u2115\u2080": 209, "\u211d": [209, 287], "symmetricdiffer": [209, 217, 228], "pretty_atom": 209, "atom_nam": 209, "pretty_symbol": 209, "symb_nam": 209, "bold_nam": 209, "stylis": 209, "_print_meijerg": 209, "_print_hyp": 209, "jurjen": 209, "bo": 209, "hate": 209, "spammer": 209, "pietjepuk314": 209, "oc": [209, 260], "oohai": 209, "gedg": 209, "email": 209, "mun": 209, "terminal_str": 209, "baselin": 209, "leftslash": 209, "slash": [209, 240], "paren": 209, "ifascii_nougli": 209, "line_break": 209, "ugli": 209, "terminal_width": 209, "wider": 209, "maxdepth": 209, "labelfunc": 209, "digraph": [209, 247, 285], "rankdir": [209, 285], "_sparse_": 210, "flavor": 210, "________": [210, 229, 247], "x\u2080": 210, "greatli": 210, "numbered_symbol": [210, 221, 225, 247], "postprocessor": [210, 221], "reduced_expr": [210, 221], "formalpowerseri": 211, "coeff_bel": 211, "formalpowerseriescompos": 211, "r745": 211, "comtet": 211, "loui": 211, "reidel": 211, "1974": 211, "720": [211, 225, 247], "formalpowerseriesinvers": 211, "r746": 211, "upto": [211, 216, 225], "formalpowerseriesproduct": 211, "rational_algorithm": 211, "compute_fp": 211, "hyper_algorithm": 211, "omposit": 211, "bell_seq": 211, "finiteformalpowerseri": 211, "rational_independ": 211, "ra": 211, "admiss": [211, 214], "r747": 211, "r748": 211, "simpled": 211, "exp_r": 211, "explik": 211, "hyper_r": 211, "rsolve_hypergeometr": 211, "r749": 211, "r750": 211, "solve_d": 211, "fourierseri": 212, "scalex": 212, "shiftx": 212, "sigma_approxim": 212, "gibb": 212, "bigl": 212, "bigr": 212, "lanczo": 212, "r751": 212, "gibbs_phenomenon": 212, "r752": 212, "sawtooth": 212, "bn": 212, "r753": 212, "limitseq": 214, "difference_delta": 214, "r754": 214, "differencedelta": 214, "limit_seq": [214, 216], "safeguard": 214, "r755": 214, "kauer": 214, "seqper": 215, "seqformula": 215, "seqbas": 215, "coeff_mul": 215, "find_linear_recurr": 215, "gfvar": 215, "seqadd": 215, "seqmul": 215, "_mul": 215, "recursiveseq": 215, "fib": 215, "invok": [216, 240, 241], "workhors": 216, "succ": [216, 229], "asymp": 216, "exposit": 216, "gloss": 216, "wsym": 216, "test_rewrite1": 216, "build_expression_tre": 216, "mrv_leadterm": 216, "e0": 216, "calculate_seri": 216, "limitinf": 216, "constantli": 216, "subsset": 216, "mrv_max1": 216, "mrv_max3": 216, "expsf": 216, "expsg": 216, "expsboth": 216, "o2": 216, "do_sub": 216, "r756": 216, "7048138294": 216, "7182818285": 216, "6349839002": 216, "6449340668": 216, "shank": 216, "6881721793": 216, "6931396564": 216, "6931471806": 216, "6931471805599453094172321215": 216, "r757": 216, "residue_theorem": 216, "neighborhood": 217, "rim": 217, "conditionset": [217, 228, 229, 287], "affirm": 217, "infimum": 217, "imageset": [217, 228, 287], "is_clos": 217, "closed": 217, "is_disjoint": 217, "r758": 217, "disjoint_set": 217, "is_open": 217, "is_proper_subset": 217, "is_proper_superset": 217, "left_open": 217, "is_superset": 217, "isdisjoint": 217, "issubset": 217, "issuperset": 217, "productset": [217, 228], "powerset": 217, "fancyset": 217, "complexregion": [217, 228], "disjointunion": 217, "lebesgu": 217, "r759": 217, "power_set": 217, "symmetric_differ": 217, "r760": 217, "right_open": 217, "mpi": 217, "r761": 217, "interval_": 217, "as_rel": 217, "is_left_unbound": 217, "is_right_unbound": 217, "r762": 217, "r763": 217, "union_": 217, "28set_theori": 217, "r764": 217, "intersection_": 217, "coin": [217, 229], "r765": 217, "cartesian_product": 217, "is_iter": 217, "r766": 217, "complementset": 217, "r767": 217, "disjoint_union": 217, "r768": 217, "empty_set": 217, "r769": 217, "universal_set": 217, "flambda": 217, "square_iter": 217, "base_set": 217, "cartesiancomplexregion": 217, "polarcomplexregion": 217, "unit_disk": 217, "upper_half_unit_disk": 217, "a_interv": 217, "b_interv": 217, "from_real": 217, "pset": 217, "rset": 217, "thetaset": 217, "upper_half_plan": 217, "normalize_theta_set": 217, "r770": 217, "r771": 217, "axiom_of_power_set": 217, "sin_sol": 217, "r772": 217, "element_": 217, "varnoth": 217, "tr0": 218, "tr1": 218, "tr2": 218, "tr2i": 218, "tr3": 218, "tr4": 218, "tr5": 218, "tr6": 218, "tr7": 218, "tr8": 218, "tr9": 218, "tr10": 218, "tr10i": 218, "tr11": 218, "tr12": 218, "tr12i": 218, "tr13": 218, "trmorri": 218, "tr14": 218, "tr15": 218, "tr16": 218, "tr22": 218, "tr111": 218, "ctr1": 218, "ctr4": 218, "rl1": 218, "rl2": 218, "deem": 218, "932": 218, "016": 218, "serendipit": 218, "dead": 218, "newa": 218, "lucki": 218, "sqt": 218, "_tr56": 218, "un": [218, 219], "r773": 218, "morri": 218, "27s_law": 218, "trpower": 218, "r774": 218, "list_of_trigonometric_ident": 218, "reduction_formula": 218, "ctr2": 218, "ctr3": 218, "r775": 218, "s0895717706001609": 218, "dimitar": 218, "vlahovski": 218, "technolog": 218, "xiuqin": 218, "zhong": 218, "zhenb": 218, "zeng": 218, "1169": 218, "1177": 218, "657": 218, "2478": 218, "sosmath": 218, "trig5": 218, "symplifi": [219, 221], "roach1996": 219, "roach1997": 219, "p_q": 219, "reachabl": [219, 229], "f_q": 219, "undo": [219, 286], "whenc": 219, "game": 219, "twofold": 219, "incongru": 219, "wlog": 219, "alpha_r": 219, "beta_r": 219, "blindli": 219, "messi": 219, "k_u": 219, "l_v": 219, "k_j": 219, "c_w": 219, "r_j": 219, "l_u": 219, "res_": 219, "delta_i": 219, "add_formula": 219, "addb": 219, "sum_0": 219, "test_hyperexpand": 219, "test_formula": 219, "typo": 219, "suboptim": 219, "imath": 219, "b1prime": 219, "vital": [219, 229], "308": 219, "hongguang": [220, 266], "fu": [220, 221, 266], "unmodifi": 221, "my_measur": 221, "nthroot": 221, "max_len": 221, "surd": 221, "kroneckersimp": 221, "besselsimp": 221, "strigonometr": 221, "399": 221, "hypersimilar": 221, "rational_convers": 221, "base10": 221, "6004799503160655": 221, "eq_x": 221, "max_term": 221, "collect_sqrt": 221, "polish": 221, "rad_ration": 221, "collect_const": 221, "rcollect": 221, "analyz": [221, 234], "ratsimpmodprim": 221, "r776": 221, "pearc": 221, "1145": 221, "1145768": 221, "1145809": 221, "trigsimp_groebn": 221, "bb1": 221, "be1": 221, "bb2": 221, "be2": 221, "bei": 221, "sqrtdenest": 221, "max_it": 221, "unrad": [221, 227], "r777": 221, "ibm": 221, "fagin": 221, "symb85": 221, "r778": 221, "cybertest": 221, "opt_sub": 221, "as_unevaluated_bas": 221, "tree_cs": 221, "hyperegeometr": 221, "epathtool": 221, "epath": 221, "ebnf": 221, "za": [221, 229], "xml": 221, "xpath": 221, "hasattr": [221, 243], "beginn": [222, 224, 227, 228, 287], "diophantu": 222, "mathematician": [222, 228], "citi": 222, "alexandria": 222, "father": 222, "hi": 222, "arithmetica": 222, "diop_solv": 222, "classify_diop": 222, "diop_linear": 222, "diop_quadrat": 222, "diop_ternary_quadrat": 222, "diop_ternary_quadratic_norm": 222, "diop_general_pythagorean": 222, "diop_general_sum_of_squar": 222, "diop_general_sum_of_even_pow": 222, "merge_solut": 222, "3y": 222, "9369318": 222, "find_dn": 222, "diop_dn": 222, "transformation_to_dn": 222, "920": 222, "5y": 222, "BY": 222, "transformation_to_norm": 222, "t4": 222, "t5": 222, "sum_of_squar": 222, "providean": 222, "eqyptian": 222, "thilinaatsympi": 222, "andreescu": 222, "titu": 222, "andrica": 222, "dorin": 222, "cucurezeanu": 222, "ion": 222, "diophantineequ": 222, "alpertron": 222, "20160323033111": 222, "jpr2718": 222, "ax2p": 222, "permute_sign": [222, 247], "signed_permut": [222, 247], "_dict": 222, "base_solution_linear": 222, "r779": 222, "r780": 222, "pell": 222, "lmm": 222, "r781": 222, "393": 222, "13y": 222, "986": 222, "49299": 222, "1570": 222, "diop_bf_dn": 222, "robertson": 222, "20160323033128": 222, "cornacchia": 222, "r782": 222, "nitaj": 222, "r783": 222, "numbertheori": 222, "r784": 222, "r785": 222, "676": 222, "884": 222, "fxz": 222, "3xy": 222, "r786": 222, "fxy": 222, "gyz": 222, "hxz": 222, "r787": 222, "cremona": 222, "rusin": 222, "2x_": 222, "m4": 222, "general_sum_of_squar": 222, "8m": 222, "r788": 222, "2345": 222, "proofwiki": 222, "integer_as_sum_of_three_squar": 222, "general_sum_of_even_pow": 222, "power_represent": 222, "1729": 222, "stopiter": 222, "sum_of_three_squar": 222, "r789": 222, "44542": 222, "207": 222, "schorn": 222, "sum_of_four_squar": 222, "3456": 222, "1294585930293": 222, "2161": 222, "1137796": 222, "r790": 222, "sum_of_pow": 222, "evenli": 222, "var_t": 222, "pqa": 222, "r791": 222, "ur": 222, "dv": 222, "vr": 222, "r792": 222, "parametrize_ternary_quadrat": 222, "r793": 222, "nigel": 222, "ldescent": 222, "y_0": [222, 225], "4x": [222, 228, 275], "7y": 222, "5x": 222, "r794": 222, "r795": 222, "nottingham": 222, "worktrib": 222, "1023265": 222, "gaussian_reduc": 222, "r796": 222, "cuhk": 222, "hk": 222, "wkshum": 222, "404": 222, "r797": 222, "holzer": 222, "mordel": 222, "r798": 222, "r799": 222, "prime_as_sum_of_two_squar": 222, "r800": 222, "sqf_normal": 222, "r801": 222, "legrang": 222, "csusm": 222, "aitken_html": 222, "diophantinesolutionset": 222, "symbols_seq": 222, "dict_iter": 222, "diophantineequationtyp": 222, "binaryquadrat": 222, "r802": 222, "r803": 222, "inhomogeneousternaryquadrat": 222, "inhomogen": [222, 225, 227], "homogeneousternaryquadraticnorm": 222, "homogeneousternaryquadrat": 222, "inhomogeneousgeneralquadrat": 222, "homogeneousgeneralquadrat": 222, "generalsumofsquar": 222, "r804": 222, "generalpythagorean": 222, "cubicthu": 222, "thue": 222, "generalsumofevenpow": 222, "pde": [223, 225, 266], "subcategori": [224, 265], "solve_rational_inequ": 224, "solve_poly_inequ": 224, "reduce_rational_inequ": 224, "reduce_abs_inequ": 224, "solvifi": [224, 228], "autodetect": [225, 226], "classify_od": 225, "odesimp": 225, "ode_ord": [225, 226, 227], "deutil": [225, 226], "best_hint": 225, "all_integr": [225, 226], "_integr": [225, 226], "unevaluat": 225, "test_od": 225, "ode_": 225, "hintnam": [225, 226], "classify_sysod": 225, "almost_linear": 225, "dsolve_system": 225, "ode_hintnam": 225, "allhint": [225, 226], "tough": 225, "nth_linear_homogeneous_constant_coeff_integr": 225, "1st_linear": 225, "nth_linear": 225, "indep": 225, "indep_div_dep": 225, "undetermined_coeffici": 225, "_best": 225, "nth_algebra": 225, "1st_homogeneous_coeff_best": 225, "1st_homogeneous_coeff_subs_indep_div_dep": 225, "1st_homogeneous_coeff_subs_dep_div_indep": 225, "1st_power_seri": 225, "lie_group": 225, "nth_linear_constant_coeff_homogen": 225, "nth_linear_euler_eq_homogen": 225, "nth_algebraic_integr": 225, "separable_integr": 225, "1st_exact_integr": 225, "1st_linear_integr": 225, "bernoulli_integr": 225, "1st_homogeneous_coeff_subs_indep_div_dep_integr": 225, "1st_homogeneous_coeff_subs_dep_div_indep_integr": 225, "nth_linear_constant_coeff_undetermined_coeffici": 225, "nth_linear_constant_coeff_variation_of_paramet": 225, "nth_linear_constant_coeff_variation_of_parameters_integr": 225, "checkodesol": 225, "solve_for_func": [225, 226], "homogeneouscoeffsubsdepdivindep": 225, "homogeneouscoeffsubsindepdivdep": 225, "varepsilon": 225, "genform": [225, 226], "starrett": 225, "checkinfsol": 225, "constantsimp": 225, "symbolnam": 225, "startnumb": 225, "endnumb": 225, "renumb": 225, "absorpt": 225, "assist": 225, "constant_renumb": 225, "1st_rational_riccati": 225, "riccati_special_minus2": 225, "linear_coeffici": 225, "separable_reduc": 225, "nth_linear_euler_eq_nonhomogeneous_undetermined_coeffici": 225, "nth_linear_euler_eq_nonhomogeneous_variation_of_paramet": 225, "liouvil": 225, "2nd_linear_airi": 225, "2nd_linear_bessel": 225, "2nd_hypergeometr": 225, "2nd_hypergeometric_integr": 225, "nth_order_reduc": 225, "2nd_power_series_ordinari": 225, "2nd_power_series_regular": 225, "almost_linear_integr": 225, "linear_coefficients_integr": 225, "separable_reduced_integr": 225, "nth_linear_euler_eq_nonhomogeneous_variation_of_parameters_integr": 225, "liouville_integr": 225, "2nd_nonlinear_autonomous_conserv": 225, "2nd_nonlinear_autonomous_conserved_integr": 225, "newconst": 225, "ode_sol_simpl": 225, "trysolv": 225, "sola": 225, "solb": 225, "listofsolut": 225, "ode_problem": 225, "firstexact": 225, "exact_differential_equ": 225, "tenenbaum": 225, "dover": 225, "1963": 225, "homogeneouscoeffbest": 225, "ode_1st_homogeneous_coeff_best_integr": 225, "homogeneous_differential_equ": 225, "firstlinear": 225, "linear_differential_equ": 225, "first_order_equ": 225, "rationalriccati": 225, "atleast": 225, "riccati_equ": 225, "thieu": 225, "vo": 225, "www3": [225, 254], "risc_5387": 225, "phdthesisthieu": 225, "secondlinearairi": 225, "secondlinearbessel": 225, "math24": 225, "bernoulli_differential_equ": 225, "goldstein": 225, "braun": 225, "maplesoft": 225, "aspx": 225, "odeadvisor": 225, "riccatispeci": 225, "__________________": 225, "eqworld": 225, "ipmnet": 225, "ru": 225, "ode0106": 225, "ode0123": 225, "nthlinearconstantcoeffhomogen": 225, "nth_linear_constant_coeff_homogeneous_integr": 225, "nonhomogeneous_equation_with_constant_coeffici": 225, "nthlinearconstantcoeffundeterminedcoeffici": 225, "method_of_undetermined_coeffici": 225, "221": 225, "nthlinearconstantcoeffvariationofparamet": 225, "cramer": 225, "variation_of_paramet": 225, "planetmath": 225, "variationofparamet": 225, "nthlineareulereqhomogen": 225, "equidimension": 225, "nth_linear_euler_eq_homogeneous_integr": 225, "sollist": 225, "93euler_equ": 225, "bender": 225, "orszag": 225, "scientist": 225, "nthlineareulereqnonhomogeneousvariationofparamet": 225, "nthlineareulereqnonhomogeneousundeterminedcoeffici": 225, "nthalgebra": 225, "nthorderreduc": 225, "caught": 225, "fault": 225, "almostlinear": 225, "first_linear": 225, "joel": 225, "mose": 225, "stormi": 225, "decad": 225, "august": [225, 244], "558": 225, "linearcoeffici": 225, "separablereduc": 225, "liegroup": 225, "secondhypergeometr": 225, "2f1": 225, "1f1": 225, "0f1": 225, "liouvillian": 225, "pfq": 225, "chan": 225, "cheb": 225, "terrab": 225, "ode_1st_power_seri": 225, "travi": 225, "walker": 225, "ode_2nd_power_series_ordinari": 225, "lamar": 225, "seriessolut": 225, "simmon": 225, "176": 225, "ode_2nd_power_series_regular": 225, "lie_heuristic_abaco1_simpl": 225, "duart": 225, "da": 225, "mota": 225, "lie_heuristic_abaco1_product": 225, "roch": 225, "lie_heuristic_bivari": 225, "329": 225, "lie_heuristic_chi": 225, "lie_heuristic_abaco2_similar": 225, "lie_heuristic_function_sum": 225, "lie_heuristic_abaco2_unique_unknown": 225, "lie_heuristic_abaco2_unique_gener": 225, "lie_heuristic_linear": 225, "gy": 225, "bh": 225, "impract": 225, "riccati_norm": 225, "riccati_inverse_norm": 225, "riccati_reduc": 225, "construct_c": 225, "construct_d": 225, "val_inf": 225, "valuat": 225, "rational_laurent_seri": 225, "compute_m_ybar": 225, "ybar": 225, "solve_aux_eq": 225, "numa": 225, "dena": 225, "numi": 225, "deni": 225, "remove_redundant_sol": 225, "sol1": 225, "sol2": 225, "get_gen_sol_from_part_sol": 225, "part_sol": 225, "haaheim": 225, "solve_riccati": 225, "gensol": 225, "_linear_2eq_order1_type6": 225, "_linear_2eq_order1_type7": 225, "fgp": 225, "ag": 225, "bg": 225, "linear_ode_to_matrix": 225, "odeordererror": 225, "odenonlinearerror": 225, "eqs_mat": 225, "r805": 225, "matrix_differential_equ": 225, "canonical_od": 225, "canonical_eq": 225, "canonical_system": 225, "linodesolve_typ": 225, "linodesolv": 225, "type1": 225, "type2": 225, "type3": 225, "type4": 225, "type5": 225, "type6": 225, "type_of_equ": 225, "a_t": 225, "a_non_commut": 225, "matrix_exp_jordan_form": 225, "expj": 225, "matrix_exp": 225, "defect": 225, "p_invers": 225, "r806": 225, "defective_matrix": 225, "r807": 225, "r808": 225, "jordan_normal_form": 225, "comupt": 225, "r809": 225, "r810": 225, "matrix_exponenti": 225, "antiderv": 225, "subscheck": 225, "system_info": 225, "sol_vector": 225, "sol_vector_evalu": 225, "_nonlinear_2eq_order1_type1": 225, "_nonlinear_2eq_order1_type2": 225, "_nonlinear_2eq_order1_type3": 225, "autonom": 225, "_nonlinear_2eq_order1_type4": 225, "_nonlinear_2eq_order1_type5": 225, "clairaut": 225, "envelop": 225, "_nonlinear_3eq_order1_type1": 225, "enspac": [225, 228], "sysod": 225, "sode0401": 225, "_nonlinear_3eq_order1_type2": 225, "sode0402": 225, "_nonlinear_3eq_order1_type3": 225, "sode0404": 225, "_nonlinear_3eq_order1_type4": 225, "sode0405": 225, "_nonlinear_3eq_order1_type5": 225, "sode0406": 225, "_handle_integr": 225, "gather": 225, "unhind": 225, "wolphramalpha": 225, "detool": 225, "hint_integr": 225, "alphanumer": 225, "hinder": 225, "matching_hint": 225, "matchdict": 225, "1st_homogeneous_coeff": 225, "your_hint": 225, "xfail": [225, 238, 240], "pde_separ": 226, "uxt": 226, "pde_separate_add": 226, "pde_separate_mul": 226, "uxi": 226, "pdsolv": 226, "solvefun": 226, "classify_pd": 226, "test_pd": 226, "pde_hintnam": 226, "ux": 226, "1st_linear_constant_coeff_homogen": 226, "checkpdesol": 226, "_preprocess": 226, "inabl": 226, "_xi_1": 226, "pde_1st_linear_constant_coeff_homogen": 226, "viktor": 226, "grigoryan": 226, "124a": 226, "pde_1st_linear_constant_coeff": 226, "substack": 226, "1st_linear_constant_coeff_integr": 226, "pde_1st_linear_variable_coeff": 226, "du": 226, "inspir": [226, 282], "pde_hint": 226, "checksol": 227, "ect": 227, "attain": [227, 259], "star": 227, "052": 227, "cov": 227, "pval": 227, "xval": 227, "rsolv": 227, "solve_linear": 227, "solve_linear_system": 227, "msymbol": 227, "degener": [227, 228], "solve_linear_system_lu": 227, "solve_undetermined_coeff": 227, "equ": 227, "73908513321516064165531208767387340401341175890076": 227, "steep": 227, "39267e": 227, "1684e": 227, "588469032184": 227, "315": 227, "730061685774": 227, "46792545969349058": 227, "inconclus": 227, "init": 227, "dissimilar": 227, "v_0": 227, "n_m": 227, "v_m": 227, "rsolve_poli": 227, "rsolve_ratio": 227, "r811": 227, "levelt": 227, "290": [227, 257], "296": 227, "r812": 227, "r813": 227, "revis": 227, "r814": 227, "289": 227, "alembertian": 227, "r815": 227, "r816": 227, "polysi": 227, "solve_triangul": 227, "kalkbrenn": 227, "patrizia": 227, "teo": 227, "aaecc": 227, "argand": 228, "uncount": 228, "bizarr": 228, "her": 228, "sol_f": 228, "solveset_r": 228, "solveset_complex": 228, "methodologi": [228, 279], "_solve_real_trig": 228, "invert_r": 228, "invert_complex": 228, "_solve_rad": 228, "_solve_ab": 228, "_solve_as_r": 228, "_solve_as_poly_r": 228, "_solve_as_poly_complex": 228, "_solve_as_poli": 228, "gsoc": 228, "2014": [228, 229], "iamit": 228, "2948": 228, "6659": 228, "7523": 228, "sibx0afl3q": 228, "9696": 228, "27s_theorem": 228, "inftyright": 228, "nright": 228, "0right": 228, "domain_check": 228, "3z": 228, "9z": 228, "nonlinearerror": 228, "cccc": 228, "eq3": 228, "eq4": 228, "391": 228, "_solve_system": 228, "_solve_using_known_valu": 228, "_transolv": 228, "_tsolv": 228, "tsolv": 228, "outright": 228, "interf": 228, "add_typ": 228, "_is_exponenti": 228, "new_eq": 228, "_solve_exponenti": 228, "_is_class": 228, "_solve_class": 228, "_solve_expo": 228, "9x": 228, "solve_expo": 228, "log_b": 228, "_solve_logarithm": 228, "solve_log": 228, "_is_logarithm": 228, "prebuilt": 229, "finiterv": 229, "varianc": 229, "dice": 229, "continuousrv": 229, "continuousdistributionhandmad": 229, "dist": 229, "discreterv": 229, "discretedistributionhandmad": 229, "pmf": 229, "finitedistributionhandmad": 229, "discreteuniform": 229, "randomsymbol": 229, "r817": 229, "discrete_uniform_distribut": 229, "r818": 229, "discreteuniformdistribut": 229, "d6": 229, "diedistribut": 229, "toss": 229, "r819": 229, "bernoulli_distribut": 229, "r820": 229, "bernoullidistribut": 229, "unfair": 229, "r821": 229, "coin_flip": 229, "binomialdistribut": 229, "r822": 229, "binomial_distribut": 229, "r823": 229, "betabinomi": 229, "r824": 229, "r825": 229, "betabinomialdistribut": 229, "popul": 229, "marbl": 229, "r826": 229, "hypergeometric_distribut": 229, "r827": 229, "hypergeometricdistribut": 229, "700000000000000": 229, "r828": 229, "rademacher_distribut": 229, "r829": 229, "geometric_distribut": 229, "r830": 229, "geometricdistribut": 229, "r831": 229, "hermite_distribut": 229, "poisson": 229, "r832": 229, "poisson_distribut": 229, "r833": 229, "poissondistribut": 229, "r834": 229, "logarithmic_distribut": 229, "r835": 229, "logarithmicdistribut": 229, "negativebinomi": 229, "r836": 229, "negative_binomial_distribut": 229, "r837": 229, "negativebinomialdistribut": 229, "skellam": 229, "mu1": 229, "mu2": 229, "mu_1": 229, "mu_2": 229, "i_k": 229, "r838": 229, "skellam_distribut": 229, "yulesimon": 229, "yule": 229, "simon": 229, "r839": 229, "93simon_distribut": 229, "8100": 229, "r840": 229, "zeta_distribut": 229, "cdf": 229, "r841": 229, "arcsine_distribut": 229, "benini": 229, "r842": 229, "benini_distribut": 229, "r843": 229, "v8": 229, "beninidistribut": 229, "r844": 229, "beta_distribut": 229, "r845": 229, "betadistribut": 229, "betanoncentr": 229, "noncentr": 229, "r846": 229, "noncentral_beta_distribut": 229, "r847": 229, "noncentralbetadistribut": 229, "betaprim": 229, "r848": 229, "beta_prime_distribut": 229, "r849": 229, "betaprimedistribut": 229, "boundedpareto": 229, "pareto": 229, "r850": 229, "pareto_distribut": 229, "bounded_pareto_distribut": 229, "r851": 229, "cauchy_distribut": 229, "r852": 229, "cauchydistribut": 229, "r853": 229, "chi_distribut": 229, "r854": 229, "chidistribut": 229, "chinoncentr": 229, "r855": 229, "noncentral_chi_distribut": 229, "chisquar": 229, "r856": 229, "chi_squared_distribut": 229, "r857": 229, "squareddistribut": 229, "dagum": 229, "r858": 229, "dagum_distribut": 229, "erlang": 229, "r859": 229, "erlang_distribut": 229, "r860": 229, "erlangdistribut": 229, "exgaussian": 229, "emg": 229, "r861": 229, "exponentially_modified_gaussian_distribut": 229, "quantil": 229, "r862": 229, "exponential_distribut": 229, "r863": 229, "exponentialdistribut": 229, "fdistribut": 229, "______________________________": 229, "r864": 229, "r865": 229, "fisherz": 229, "fisher": 229, "2d_1": 229, "d_1z": 229, "d_1e": 229, "r866": 229, "27s_z": 229, "r867": 229, "fishersz": 229, "frechet": 229, "r868": 229, "a9chet_distribut": 229, "r869": 229, "gamma_distribut": 229, "r870": 229, "gammadistribut": 229, "gammainvers": 229, "r871": 229, "gompertz": 229, "r872": 229, "gompertz_distribut": 229, "gumbel": 229, "dfrac": 229, "r873": 229, "gumbeldistribut": 229, "r874": 229, "gumbel_distribut": 229, "r875": 229, "mathwav": 229, "easyfit": 229, "gumbel_max": 229, "r876": 229, "gumbel_min": 229, "kumaraswami": 229, "r877": 229, "kumaraswamy_distribut": 229, "r878": 229, "laplace_distribut": 229, "r879": 229, "laplacedistribut": 229, "r880": 229, "a9vy_distribut": 229, "r881": 229, "levydistribut": 229, "logist": 229, "r882": 229, "logistic_distribut": 229, "r883": 229, "logisticdistribut": 229, "loglogist": 229, "unimod": 229, "r884": 229, "lognorm": 229, "r885": 229, "r886": 229, "lognormaldistribut": 229, "lomax": 229, "r887": 229, "lomax_distribut": 229, "maxwel": 229, "r888": 229, "maxwell_distribut": 229, "r889": 229, "maxwelldistribut": 229, "moyal": 229, "r890": 229, "moyaldistribut": 229, "r891": 229, "rice": 229, "dobelman": 229, "textfil": 229, "distributionshandbook": 229, "nakagami": 229, "r892": 229, "nakagami_distribut": 229, "marginal_distribut": 229, "r893": 229, "normal_distribut": 229, "r894": 229, "normaldistributionfunct": 229, "xm": 229, "x_m": 229, "r895": 229, "r896": 229, "paretodistribut": 229, "powerfunct": 229, "r897": 229, "power_func": 229, "quadraticu": 229, "r898": 229, "quadratic_distribut": 229, "raisedcosin": 229, "r899": 229, "raised_cosine_distribut": 229, "r900": 229, "rayleigh_distribut": 229, "r901": 229, "rayleighdistribut": 229, "r902": 229, "reciprocal_distribut": 229, "studentt": 229, "r903": 229, "student_t": 229, "r904": 229, "studentst": 229, "shiftedgompertz": 229, "r905": 229, "shifted_gompertz_distribut": 229, "r906": 229, "trapezoidal_distribut": 229, "r907": 229, "triangular_distribut": 229, "r908": 229, "triangulardistribut": 229, "r909": 229, "uniform_distribution_": 229, "28continu": 229, "r910": 229, "uniformdistribut": 229, "uniformsum": 229, "irwin": 229, "r911": 229, "uniform_sum_distribut": 229, "r912": 229, "uniformsumdistribut": 229, "vonmis": 229, "mise": 229, "i_0": 229, "r913": 229, "von_mises_distribut": 229, "r914": 229, "vonmisesdistribut": 229, "wald": 229, "gaussianinvers": 229, "r915": 229, "inverse_gaussian_distribut": 229, "r916": 229, "inversegaussiandistribut": 229, "weibul": 229, "geq0": 229, "r917": 229, "weibull_distribut": 229, "r918": 229, "weibulldistribut": 229, "wignersemicircl": 229, "semicircl": 229, "frac2": 229, "r919": 229, "wigner_semicircle_distribut": 229, "r920": 229, "wignerssemicirclelaw": 229, "jointrv": 229, "_set": 229, "multivariatenorm": 229, "noninvert": 229, "ob": 229, "r921": 229, "multivariate_normal_distribut": 229, "multivariatelaplac": 229, "r922": 229, "multivariate_laplace_distribut": 229, "generalizedmultivariateloggamma": 229, "joint_rv_typ": 229, "gd": 229, "y_3": 229, "gmvlg": 229, "generalizedmultivariateloggammaomega": 229, "r923": 229, "generalized_multivariate_log": 229, "r924": 229, "234137346_on_a_multivariate_log": 229, "gamma_distribution_and_the_use_of_the_distribution_in_the_bayesian_analysi": 229, "correl": 229, "gmvlgo": 229, "r925": 229, "r926": 229, "r927": 229, "multinomial_distribut": 229, "r928": 229, "multinomialdistribut": 229, "multivariatebeta": 229, "r929": 229, "dirichlet_distribut": 229, "r930": 229, "dirichletdistribut": 229, "multivariateewen": 229, "ewen": 229, "r931": 229, "27s_sampling_formula": 229, "r932": 229, "rutger": 229, "hcrane": 229, "sts529": 229, "multivariatet": 229, "negativemultinomi": 229, "n_c": 229, "r933": 229, "negative_multinomial_distribut": 229, "r934": 229, "normalgamma": 229, "r935": 229, "discretemarkovchain": 229, "state_spac": 229, "trans_prob": 229, "markov": 229, "characteris": 229, "transitionmatrixof": 229, "transition_prob": 229, "sunni": 229, "cloudi": 229, "raini": 229, "randomindexedsymbol": 229, "409": 229, "6963328": 229, "3096": 229, "query_gt": 229, "64705": 229, "r936": 229, "markov_chain": 229, "time_markov_chain": 229, "r937": 229, "dartmouth": 229, "teaching_aid": 229, "books_articl": 229, "probability_book": 229, "chapter11": 229, "canonical_form": 229, "transient": 229, "p_new": 229, "new_matrix": 229, "communication_class": 229, "r938": 229, "onlinelibrari": 229, "wilei": 229, "1002": 229, "9780470316887": 229, "app1": 229, "r939": 229, "columbia": 229, "ww2040": 229, "6711f12": 229, "lect1023big": 229, "is_recurr": 229, "tarjan": [229, 247], "r940": 229, "4701sum07": 229, "4701": 229, "mcii": 229, "r941": 229, "ceca": 229, "clemson": 229, "shierd": 229, "shier": 229, "r942": 229, "ujcont": 229, "uj": 229, "7506": 229, "content1": 229, "r943": 229, "econ": 229, "dtmc": 229, "reccur": 229, "r944": 229, "absorbing_markov_chain": 229, "r945": 229, "brandei": 229, "igusa": 229, "math56as08": 229, "math56a_s08_notes015": 229, "fixed_row_vector": 229, "stationary_distribut": 229, "fundamental_matrix": 229, "r946": 229, "lip": 229, "limiting_distribut": 229, "condition_set": 229, "wm": 229, "r947": 229, "probabilitycours": 229, "11_2_6_stationary_and_limiting_distribut": 229, "r948": 229, "galton": 229, "uchicago": 229, "yibi": 229, "stat317": 229, "lecture4_6up": 229, "continuousmarkovchain": 229, "gen_mat": 229, "generator_matrix": 229, "45279": 229, "58602": 229, "37933": 229, "34211": 229, "7143": 229, "4002723175": 229, "6832579186": 229, "r949": 229, "r950": 229, "biu": 229, "il": 229, "amirgi": 229, "ctmcnote": 229, "bernoulliprocess": 229, "joint_distribut": 229, "jointdistributionhandmad": 229, "r951": 229, "bernoulli_process": 229, "r952": 229, "mathc": 229, "clarku": 229, "djoyc": 229, "ma217": 229, "given_condit": 229, "poissonprocess": 229, "648": 229, "r953": 229, "11_0_0_intro": 229, "r954": 229, "poisson_point_process": 229, "wiener": 229, "brownian": 229, "scottish": 229, "botanist": 229, "r955": 229, "11_4_0_brownian_motion_wiener_process": 229, "r956": 229, "wiener_process": 229, "gammaprocess": 229, "jump": [229, 286], "472": 229, "r957": 229, "gamma_process": 229, "matrixgamma": 229, "scale_matrix": 229, "r958": 229, "matrix_gamma_distribut": 229, "wishart": 229, "r959": 229, "wishart_distribut": 229, "matrixnorm": 229, "location_matrix": 229, "scale_matrix_1": 229, "scale_matrix_2": 229, "r960": 229, "matrix_normal_distribut": 229, "compound_rv": 229, "compounddistribut": 229, "crv_type": 229, "r961": 229, "compound_probability_distribut": 229, "numsampl": 229, "evaluate_integr": 229, "r962": 229, "entropy_": 229, "information_theori": 229, "r963": 229, "crmarsh": 229, "charles_marsh_continuous_entropi": 229, "r964": 229, "uconn": 229, "kconrad": 229, "blurb": 229, "entropypost": 229, "arg1": 229, "arg2": 229, "cexpr": 229, "coskew": 229, "sigma_": 229, "r965": 229, "r966": 229, "probability_distribut": 229, "randomst": 229, "die_rol": 229, "samp": 229, "pspace": 229, "samp_list": 229, "sam": 229, "42519758": 229, "40207856": 229, "94991743": 229, "85819627": 229, "83403519": 229, "9412172": 229, "85768055": 229, "38954165": 229, "11163337": 229, "3176591": 229, "79115232": 229, "63232916": 229, "01747268": 229, "96716083": 229, "sampling_p": 229, "sampling_": 229, "factorial_mo": 229, "r967": 229, "r968": 229, "factorialmo": 229, "kurtosi": 229, "outlier": 229, "sigma_x": 229, "r969": 229, "r970": 229, "asymmetri": 229, "pearson": 229, "sampling_dens": 229, "centralmo": 229, "cmoment": 229, "expectationmatrix": 229, "randommatrixsymbol": 229, "n11": 229, "n12": 229, "n21": 229, "n22": 229, "variancematrix": 229, "crosscovariancematrix": 229, "randomdomain": 229, "singledomain": 229, "singlepspac": 229, "productdomain": 229, "productpspac": 229, "conditionaldomain": 229, "frv": 229, "finitedomain": 229, "finitepspac": 229, "crv": 229, "continuousdomain": 229, "continuouspspac": 229, "diepspac": 229, "singlefinitepspac": 229, "normalpspac": 229, "singlecontinuouspspac": 229, "frv_type": 229, "randomvari": 229, "tactic": 229, "random_symbol": 229, "rs_swap": 229, "pspace1": 229, "pspace2": 229, "immutabledensendimarrai": 230, "tomatrix": 230, "j_m": 230, "i_a": 230, "i_b": 230, "sum_k": 230, "tensorcontract": [230, 231], "tensordiagon": [230, 231], "derive_by_arrai": 230, "sum_m": 230, "immutablesparsendimarrai": 230, "mutabledensendimarrai": 230, "mutablesparsendimarrai": 230, "index_order_old": 230, "index_order_new": 230, "cab": 230, "contraction_ax": 230, "diagonal_ax": 230, "arraycontract": 231, "arraydiagon": 231, "arraysymbol": 231, "convert_indexed_to_arrai": 231, "arrayadd": 231, "convert_matrix_to_arrai": 231, "convert_array_to_matrix": 231, "expr_tr": 231, "array_der": 231, "index_method": 233, "get_contraction_structur": [233, 234], "deepest": 233, "nested_contract": 233, "get_indic": [233, 234, 235, 236], "indexconformanceexcept": 233, "______": 234, "stem": 234, "dim1": 234, "dim2": 234, "qwerti": 234, "a_ij": 234, "b_ij": 234, "syntact": 234, "a_real": 234, "c_inherit": 234, "c_explicit": 234, "unrol": 234, "tensorindextyp": [235, 236], "eps_dim": 235, "metric_nam": 235, "su": 235, "lorentz": 235, "tensor_index_typ": 235, "is_up": 235, "tensor_inde_typ": 235, "typ": 235, "tensorhead": [235, 236], "index_typ": 235, "tensorsymmetri": 235, "monoterm": 235, "_tensormanag": 235, "set_comm": 235, "asym2": 235, "fully_symmetr": 235, "tensori": [235, 236], "e_z": 235, "no_symmetri": 235, "p_x": 235, "p_y": 235, "p_z": 235, "ipos1": 235, "ipos2": 235, "icomp1": 235, "icomp2": 235, "nameless": 235, "replacement_dict": 235, "free_arg": 235, "addend": 235, "canon_bp": 235, "contract_metr": 235, "contract_al": 235, "ipo": 235, "icomp": 235, "nonrep": 235, "dum": 235, "ext_rank": 235, "is_canon_bp": 235, "get_free_indic": [235, 236], "perm2tensor": 235, "tid": 235, "sorted_compon": 235, "riemann_cyclic_replac": 235, "riemann_cycl": 235, "cadabra": 235, "multiterm": 235, "bianchi": 235, "sym2": 235, "direct_product": 235, "monotorem": 235, "tableaux": 235, "tensortyp": 235, "repetit": [235, 247], "tensormanag": 235, "comm_i2symbol": 235, "comm_symbols2i": 235, "get_comm": 235, "gcomm": 235, "ghcomm": 235, "toper": 236, "partialderiv": 236, "valenc": 236, "uncontract": 236, "compa": 236, "compb": 236, "derivand": 236, "xpass": [238, 240], "nocache_fail": 238, "expectedexcept": 238, "assertionerror": 238, "exceptioninfo": 238, "abort": 238, "9999": 238, "warningcl": [238, 245], "test_stacklevel": 238, "randtest": 239, "portabl": [240, 241], "pytestreport": 240, "force_color": 240, "readlin": 240, "sympydoctestfind": 240, "doctestpars": 240, "exclude_empti": 240, "sympydoctestrunn": 240, "checker": 240, "optionflag": 240, "5140": 240, "doctestrunn": 240, "clear_glob": 240, "writer": 240, "garbag": 240, "check_output": 240, "report_": 240, "sympyoutputcheck": 240, "outputcheck": 240, "stdlib": 240, "testrunn": 240, "sympytestresult": 240, "convert_to_native_path": 240, "lst": 240, "blacklist": 240, "get_sympy_dir": 240, "raise_on_deprec": 240, "deprecationwarn": [240, 245], "run_all_test": 240, "test_arg": 240, "test_kwarg": 240, "doctest_arg": 240, "doctest_kwarg": 240, "examples_arg": 240, "examples_kwarg": 240, "run_in_subprocess_with_hash_random": 240, "function_kwarg": 240, "hostedtoolcach": 240, "x64": 240, "pythonhashse": 240, "_test": 240, "split_list": 240, "sympytestfil": 240, "module_rel": 240, "extraglob": 240, "raise_on_error": 240, "basenam": [240, 241, 242], "slate": 240, "dont_accept_true_for_1": 240, "dont_accept_blanklin": 240, "normalize_whitespac": 240, "ellipsi": 240, "ignore_exception_detail": 240, "report_udiff": 240, "report_cdiff": 240, "report_ndiff": 240, "report_only_first_failur": 240, "mortem": 240, "tomfooleri": 240, "testmod": 240, "tester": 240, "fiddl": [240, 286], "timeout": 240, "keyboardinterrupt": 240, "interrupt": 240, "_basic": 240, "kw": 240, "test_equ": 240, "pdb": 240, "pipe": 240, "time_bal": 240, "tandem": 241, "matvec": 241, "codewrapp": 241, "distutil": 241, "fwrap": 241, "swig": 241, "binary_cal": 241, "22925376": 241, "25165824": 241, "_imp_": [241, 248], "filepath": 241, "cythoncodewrapp": 241, "dump_pyx": 241, "dummywrapp": 241, "f2pycodewrapp": 241, "ufuncifycodewrapp": 241, "dump_c": [241, 242], "funcnam": 241, "code_gen": [241, 242], "argument_tupl": 241, "include_dir": 241, "library_dir": 241, "extra_compile_arg": 241, "extra_link_arg": 241, "symfunc": [241, 248], "funtion_nam": 241, "ndimension": 241, "f_fortran": 241, "f_cython": 241, "r971": 241, "fortran77": 242, "fortran90": 242, "julia": 242, "rust": 242, "mileston": 242, "unsurmount": 242, "pyf": 242, "inputoutput": 242, "tcc": 242, "libtcc": 242, "date": 242, "hostnam": 242, "sha1": 242, "ccodegen": 242, "preprocessor_stat": 242, "dump_h": 242, "guard": 242, "get_prototyp": 242, "codegenerror": 242, "function_prototyp": 242, "dump_cod": 242, "cname": 242, "fname": 242, "pynam": 242, "jlname": 242, "octnam": 242, "rsname": 242, "fcodegen": 242, "f90": 242, "dump_f95": 242, "get_interfac": 242, "juliacodegen": 242, "dump_jl": 242, "octavecodegen": 242, "dump_m": 242, "returnvalu": 242, "destin": 242, "local_var": 242, "result_vari": 242, "unnam": 242, "rustcodegen": 242, "dump_r": 242, "f_result": 242, "myfcn": 242, "fcn2": 242, "myfcn_result": 242, "void": 242, "get_default_datatyp": 242, "complex_allow": 242, "agnost": 242, "conserve_mpmath_dp": 243, "doctest_depends_on": 243, "disable_view": 243, "python_vers": 243, "memoize_properti": 243, "propfunc": 243, "no_attrs_in_subclass": 243, "__all__": 243, "some_funct": 243, "thread": 243, "xthread": 243, "threaded_factori": 243, "use_add": 243, "multiset_partitions_taocp": 244, "visitor": 244, "pstack": 244, "lpart": 244, "topmost": 244, "partcompon": 244, "peek": [244, 286], "unpredict": 244, "list_visitor": 244, "abb": [244, 247], "factoring_visitor": 244, "multisetpartitiontravers": 244, "aocp": 244, "count_partit": 244, "127750": 244, "686": 244, "4a": 244, "factorisatio": 244, "oppenheim": 244, "numerorum": 244, "canfield": 244, "erdo": 244, "OF": 244, "yorgei": 244, "monad": 244, "persist": 244, "288716": 244, "memoiz": [244, 246, 273], "dramat": 244, "hypothet": 244, "borrow": 244, "coalesc": 244, "_rang": 244, "stretch": 244, "brain": 244, "histogram": 244, "enum_al": 244, "enum_larg": 244, "enum_rang": 244, "enum_smal": 244, "ub": 244, "parti": 245, "catch_warn": 245, "simplefilt": 245, "dedent": [245, 250], "enum": [246, 273], "miscellan": [246, 273], "pkgdata": [246, 273], "notiter": 247, "binary_partit": 247, "r972": 247, "taocp": 247, "nx": 247, "common_prefix": 247, "common_suffix": 247, "unhash": 247, "r973": 247, "connected_component_": 247, "graph_theori": 247, "r974": 247, "27s_strongly_connected_components_algorithm": 247, "dict_merg": 247, "filter_symbol": 247, "myop": 247, "kog": 247, "informatik": 247, "hamburg": 247, "mein": 247, "python_trick": 247, "neighbor": 247, "xxxxxx": 247, "xxxx": 247, "r975": 247, "method_ring": 247, "r976": 247, "4856615": 247, "4857018": 247, "r977": 247, "programminggeek": 247, "r978": 247, "steinhau": 247, "93johnson": 247, "93trotter_algorithm": 247, "r979": 247, "involut": 247, "eco": 247, "vajnovszki": 247, "dmtc": 247, "generate_involut": 247, "r980": 247, "permutationinvolut": 247, "generate_oriented_forest": 247, "forest": 247, "acycl": 247, "r981": 247, "beyer": 247, "hedetniemi": 247, "novemb": 247, "r982": 247, "1633833": 247, "has_dup": 247, "has_varieti": 247, "iproduct": 247, "abcbb": 247, "is_sequ": 247, "generatortyp": 247, "_iter": 247, "kbin": 247, "ordered_flag": 247, "least_rot": 247, "rotate_left": 247, "r983": 247, "lexicographically_minimal_string_rot": 247, "minlex": 247, "acb": 247, "11010011000": 247, "00011010011": 247, "00011001011": 247, "aaa": 247, "abi": 247, "bby": 247, "abracadabra": 247, "banana": 247, "multiset_derang": 247, "uniq": 247, "1233": 247, "3312": 247, "3321": 247, "aba": 247, "baa": 247, "bead": 247, "ooo": 247, "r984": 247, "ordered_partit": 247, "r985": 247, "jeromekelleh": 247, "r986": 247, "jerom": 247, "kelleh": 247, "barri": 247, "sullivan": 247, "0909": 247, "2331v2": 247, "r987": 247, "activest": 247, "218332": 247, "random_derang": 247, "reseed": 247, "rotate_right": 247, "roundrobin": 247, "ef": 247, "credit": 247, "sakki": 247, "keyfunc": 247, "subgraph": 247, "r988": 247, "r989": 247, "longest": 247, "r990": 247, "unflatten": 247, "bcd": 247, "afunc": 248, "lambdastr": 248, "dummifi": 248, "use_imp": 248, "custom_sin": 248, "38177329": 248, "49315059": 248, "8414709848078965": 248, "eager": 248, "enable_eager_execut": 248, "eagertensor": 248, "__class__": 248, "placehold": 248, "user_guid": 248, "runtimewarn": 248, "sin_cos_sympi": 248, "sin_co": 248, "sin_cos_numpi": 248, "38177329068": 248, "module_dictionari": 248, "_lambdifygener": 248, "__globals__": 248, "lambdaprint": 248, "90929743": [248, 275], "assoc_recurrence_memo": 249, "base_seq": 249, "memo": 249, "pn0": 249, "recurrence_memo": 249, "specfun": 249, "__index__": 250, "sanit": 250, "99999999999999991611392": 250, "debug_decor": 250, "fillded": 250, "strline": 250, "rawlin": 250, "find_execut": 250, "pathsep": 250, "pastabl": 250, "bee": 250, "spamham": 250, "sha": 250, "spam": 250, "egg": 250, "md5": 250, "eggsham": 250, "r991": 250, "6116978": 250, "roken": 250, "deletechar": 250, "multicharact": 250, "oldchar": 250, "newchar": 250, "acquir": 251, "getresourc": 251, "pkgname": 251, "pkgpath": 251, "dirnam": 251, "normpath": 251, "rb": 251, "__loader__": 251, "stringio": 251, "get_resourc": 251, "ioerror": 251, "mydata": 251, "mypkgdata": 251, "jpg": 251, "get_class": 252, "lookup_view": 252, "get_mod_func": 252, "callback": 252, "timeutil": 253, "coordsysrect": 254, "coordsys3d": [254, 256, 257, 258, 260, 261, 264], "rotation_matrix": [254, 256, 259], "vector_nam": 254, "variable_nam": [254, 261], "latex_vect": 254, "pretty_vect": 254, "latex_scalar": 254, "pretty_scalar": 254, "new_system": 254, "create_new": [254, 259], "transformation_to_par": 254, "transformation_from_par": 254, "locate_new": [254, 257, 258, 259, 260, 261], "position_wrt": [254, 258, 259, 260], "orient_new": [254, 256], "axisorient": [254, 256, 259], "axis_orient": [254, 259], "bodyorient": [254, 256, 259], "body_orient": [254, 256, 259], "spaceorient": [254, 256, 259], "space_orient": [254, 256], "quaternionorient": [254, 256, 259], "q_orient": [254, 256], "orient_new_axi": [254, 257, 259], "orient_new_bodi": [254, 259], "angle1": [254, 256], "angle2": [254, 256], "angle3": [254, 256], "euler_angl": [254, 256], "orient_new_quaternion": [254, 259], "orient_new_spac": [254, 259], "coordsyrect": 254, "v_a": 254, "v_b": 254, "scalar_map": 254, "basevector": [254, 258, 259], "delop": [254, 260, 261], "r992": 254, "r993": 254, "basedyad": [254, 258], "second_system": 254, "deloper": [254, 262], "parametricregion": [254, 257, 264], "implicitregion": [254, 257, 264], "parabola": 254, "rational_parametr": 254, "singular_point": 254, "regular_point": 254, "reg_point": 254, "cubic_curv": 254, "calulc": 254, "hoffmann": 254, "purdu": 254, "lib": 254, "cgi": 254, "viewcont": 254, "1827": 254, "cstech": 254, "erik": 254, "hillgart": 254, "diploma": 254, "linz": 254, "universitat": 254, "risc_1355": 254, "20point": 254, "20on": 254, "20conic": 254, "parametricintegr": 254, "semispher": [254, 264], "axis_orienter1": 256, "axis_orienter2": 256, "axis_orienter3": 256, "body_orienter1": 256, "body_orienter2": 256, "body_orienter3": 256, "matrix_to_vector": 257, "system2": 257, "vector_integr": [257, 264], "essenc": 258, "vectormul": 258, "vectoradd": 258, "ofcours": 258, "vectorzero": 258, "expressli": 258, "express_coordin": [258, 259], "dyadicmul": 258, "dyadicadd": 258, "cleanest": 259, "orient_new_": 259, "basescalar": [259, 261], "oabc": 260, "oa": 260, "pq": 260, "sr": 260, "wikidel": 260, "ffield": 260, "gradient_field": 261, "instantan": 261, "directional_deriv": 261, "lame": 261, "dyadicproduct": 262, "quantifi": 263, "necesssari": 264, "param_circl": 264, "implicit_circl": 264, "obextj": 264, "solidspher": 264, "lamina": 264, "\ud835\udc45": 264, "cylind": 264, "vectorfield": 264, "hemispher": 264, "top_fac": 264, "bottom_fac": 264, "27_theorem": 264, "cone": 264, "divergence_theorem": 264, "12288": 264, "truss": 271, "str_expr": 275, "82842712474619": 275, "141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117068": 275, "0874989834394464": 275, "roundoff": 275, "14112001": 275, "7568025": 275, "95892427": 275, "2794155": 275, "6569866": 275, "98935825": 275, "41211849": 275, "0998334166468": 275, "sympy_nam": 275, "numerical_funct": 275, "rephras": 276, "oh": 276, "integration_vari": 276, "dfdx": 276, "equidistantli": 276, "d2fdx2": 276, "django": 278, "oop": 278, "crazi": 278, "abcdef": 278, "reevalu": 278, "infal": 278, "entertain": 279, "preliminari": 279, "82842712475": 280, "cass": 280, "wrote": [280, 281], "theme": 280, "expanded_expr": 280, "whet": 280, "appetit": 280, "c\u2082": [280, 287], "c\u2081": [280, 287], "\u03bd": 280, "sell": 280, "battl": 280, "confid": 280, "gigabyt": 280, "tear": 281, "dotprint": [281, 285], "stopper": 281, "uexpr": 281, "downsid": 282, "algebraic_multipl": 282, "pdp": 282, "undertest": 282, "underevalu": 282, "my_iszero": 282, "stronger": 282, "tradeoff": 282, "wonder": 282, "5b7c3e8ee5b40332abdb206c": 282, "15141": 282, "19548": 282, "10120": 282, "10279": 282, "constant_problem": 282, "possiblezeroq": 282, "mupad_ref": 282, "iszero": 282, "congratul": 283, "decent": 284, "austin": 284, "video": 284, "javascript": 285, "bvar": 285, "unnecessarili": 286, "whittl": 286, "catchal": 286, "collected_expr": 286, "cdot1": 286, "undertak": 286, "undon": 286, "cdot2": 286, "nck": 286, "pronounc": 286, "_2f_1": 286, "cfrac": 286, "list_to_frac": 286, "a\u2080": 286, "a\u2083": 286, "a\u2084": 286, "pointless": 286, "orig_frac": 286, "diffeq": 287}, "objects": {"": [[31, 0, 0, "-", "sympy"]], "sympy": [[33, 0, 0, "-", "abc"], [34, 0, 0, "-", "algebras"], [37, 0, 0, "-", "assumptions"], [40, 0, 0, "-", "calculus"], [41, 0, 0, "-", "categories"], [62, 0, 0, "-", "diffgeom"], [63, 0, 0, "-", "discrete"], [67, 0, 0, "-", "functions"], [80, 0, 0, "-", "holonomic"], [87, 0, 0, "-", "integrals"], [88, 0, 0, "-", "interactive"], [89, 0, 0, "-", "liealgebras"], [90, 0, 0, "-", "logic"], [95, 0, 0, "-", "matrices"], [102, 0, 0, "-", "parsing"], [271, 0, 0, "-", "physics"], [205, 0, 0, "-", "polys"], [227, 0, 0, "-", "solvers"], [229, 0, 0, "-", "stats"], [232, 0, 0, "-", "tensor"], [237, 0, 0, "-", "testing"], [246, 0, 0, "-", "utilities"], [262, 0, 0, "-", "vector"]], "sympy.algebras": [[34, 1, 1, "", "Quaternion"]], "sympy.algebras.Quaternion": [[34, 2, 1, "", "add"], [34, 2, 1, "", "angle"], [34, 2, 1, "", "arc_coplanar"], [34, 2, 1, "", "axis"], [34, 2, 1, "", "exp"], [34, 2, 1, "", "from_axis_angle"], [34, 2, 1, "", "from_rotation_matrix"], [34, 2, 1, "", "index_vector"], [34, 2, 1, "", "integrate"], [34, 2, 1, "", "inverse"], [34, 2, 1, "", "is_pure"], [34, 2, 1, "", "is_zero_quaternion"], [34, 2, 1, "", "mensor"], [34, 2, 1, "", "mul"], [34, 2, 1, "", "norm"], [34, 2, 1, "", "normalize"], [34, 2, 1, "", "orthogonal"], [34, 2, 1, "", "parallel"], [34, 2, 1, "", "pow"], [34, 2, 1, "", "pow_cos_sin"], [34, 2, 1, "", "rotate_point"], [34, 2, 1, "", "scalar_part"], [34, 2, 1, "", "to_axis_angle"], [34, 2, 1, "", "to_rotation_matrix"], [34, 2, 1, "", "vector_coplanar"], [34, 2, 1, "", "vector_part"]], "sympy.assumptions": [[35, 0, 0, "-", "ask"], [36, 0, 0, "-", "assume"], [38, 0, 0, "-", "predicates"], [39, 0, 0, "-", "refine"]], "sympy.assumptions.ask": [[35, 1, 1, "", "AssumptionKeys"], [35, 3, 1, "", "ask"], [35, 3, 1, "", "register_handler"], [35, 3, 1, "", "remove_handler"]], "sympy.assumptions.assume": [[36, 1, 1, "", "AppliedPredicate"], [36, 1, 1, "", "AssumptionsContext"], [36, 1, 1, "", "Predicate"], [36, 1, 1, "", "UndefinedPredicate"], [36, 3, 1, "", "assuming"]], "sympy.assumptions.assume.AppliedPredicate": [[36, 4, 1, "", "arg"], [36, 4, 1, "", "arguments"], [36, 4, 1, "", "function"]], "sympy.assumptions.assume.AssumptionsContext": [[36, 2, 1, "", "add"]], "sympy.assumptions.assume.Predicate": [[36, 2, 1, "", "eval"], [36, 5, 1, "", "handler"], [36, 2, 1, "", "register"], [36, 2, 1, "", "register_many"]], "sympy.assumptions.predicates.calculus": [[38, 1, 1, "", "FinitePredicate"], [38, 1, 1, "", "InfinitePredicate"]], "sympy.assumptions.predicates.calculus.FinitePredicate": [[38, 5, 1, "", "handler"]], "sympy.assumptions.predicates.calculus.InfinitePredicate": [[38, 5, 1, "", "handler"]], "sympy.assumptions.predicates.common": [[38, 1, 1, "", "CommutativePredicate"], [38, 1, 1, "", "IsTruePredicate"]], "sympy.assumptions.predicates.common.CommutativePredicate": [[38, 5, 1, "", "handler"]], "sympy.assumptions.predicates.common.IsTruePredicate": [[38, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices": [[38, 1, 1, "", "ComplexElementsPredicate"], [38, 1, 1, "", "DiagonalPredicate"], [38, 1, 1, "", "FullRankPredicate"], [38, 1, 1, "", "IntegerElementsPredicate"], [38, 1, 1, "", "InvertiblePredicate"], [38, 1, 1, "", "LowerTriangularPredicate"], [38, 1, 1, "", "NormalPredicate"], [38, 1, 1, "", "OrthogonalPredicate"], [38, 1, 1, "", "PositiveDefinitePredicate"], [38, 1, 1, "", "RealElementsPredicate"], [38, 1, 1, "", "SingularPredicate"], [38, 1, 1, "", "SquarePredicate"], [38, 1, 1, "", "SymmetricPredicate"], [38, 1, 1, "", "TriangularPredicate"], [38, 1, 1, "", "UnitTriangularPredicate"], [38, 1, 1, "", "UnitaryPredicate"], [38, 1, 1, "", "UpperTriangularPredicate"]], "sympy.assumptions.predicates.matrices.ComplexElementsPredicate": [[38, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.DiagonalPredicate": [[38, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.FullRankPredicate": [[38, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.IntegerElementsPredicate": [[38, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.InvertiblePredicate": [[38, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.LowerTriangularPredicate": [[38, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.NormalPredicate": [[38, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.OrthogonalPredicate": [[38, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.PositiveDefinitePredicate": [[38, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.RealElementsPredicate": [[38, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.SingularPredicate": [[38, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.SquarePredicate": [[38, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.SymmetricPredicate": [[38, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.TriangularPredicate": [[38, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.UnitTriangularPredicate": [[38, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.UnitaryPredicate": [[38, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.UpperTriangularPredicate": [[38, 5, 1, "", "handler"]], "sympy.assumptions.predicates.ntheory": [[38, 1, 1, "", "CompositePredicate"], [38, 1, 1, "", "EvenPredicate"], [38, 1, 1, "", "OddPredicate"], [38, 1, 1, "", "PrimePredicate"]], "sympy.assumptions.predicates.ntheory.CompositePredicate": [[38, 5, 1, "", "handler"]], "sympy.assumptions.predicates.ntheory.EvenPredicate": [[38, 5, 1, "", "handler"]], "sympy.assumptions.predicates.ntheory.OddPredicate": [[38, 5, 1, "", "handler"]], "sympy.assumptions.predicates.ntheory.PrimePredicate": [[38, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order": [[38, 1, 1, "", "NegativePredicate"], [38, 1, 1, "", "NonNegativePredicate"], [38, 1, 1, "", "NonPositivePredicate"], [38, 1, 1, "", "NonZeroPredicate"], [38, 1, 1, "", "PositivePredicate"], [38, 1, 1, "", "ZeroPredicate"]], "sympy.assumptions.predicates.order.NegativePredicate": [[38, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order.NonNegativePredicate": [[38, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order.NonPositivePredicate": [[38, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order.NonZeroPredicate": [[38, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order.PositivePredicate": [[38, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order.ZeroPredicate": [[38, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets": [[38, 1, 1, "", "AlgebraicPredicate"], [38, 1, 1, "", "AntihermitianPredicate"], [38, 1, 1, "", "ComplexPredicate"], [38, 1, 1, "", "ExtendedRealPredicate"], [38, 1, 1, "", "HermitianPredicate"], [38, 1, 1, "", "ImaginaryPredicate"], [38, 1, 1, "", "IntegerPredicate"], [38, 1, 1, "", "IrrationalPredicate"], [38, 1, 1, "", "RationalPredicate"], [38, 1, 1, "", "RealPredicate"], [38, 1, 1, "", "TranscendentalPredicate"]], "sympy.assumptions.predicates.sets.AlgebraicPredicate": [[38, 5, 1, "", "AlgebraicHandler"], [38, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.AntihermitianPredicate": [[38, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.ComplexPredicate": [[38, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.ExtendedRealPredicate": [[38, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.HermitianPredicate": [[38, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.ImaginaryPredicate": [[38, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.IntegerPredicate": [[38, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.IrrationalPredicate": [[38, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.RationalPredicate": [[38, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.RealPredicate": [[38, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.TranscendentalPredicate": [[38, 5, 1, "", "handler"]], "sympy.assumptions.refine": [[39, 3, 1, "", "refine"], [39, 3, 1, "", "refine_Pow"], [39, 3, 1, "", "refine_abs"], [39, 3, 1, "", "refine_arg"], [39, 3, 1, "", "refine_atan2"], [39, 3, 1, "", "refine_im"], [39, 3, 1, "", "refine_matrixelement"], [39, 3, 1, "", "refine_re"], [39, 3, 1, "", "refine_sign"]], "sympy.calculus": [[40, 0, 0, "-", "euler"], [40, 0, 0, "-", "finite_diff"], [40, 0, 0, "-", "singularities"], [40, 0, 0, "-", "util"]], "sympy.calculus.euler": [[40, 3, 1, "", "euler_equations"]], "sympy.calculus.finite_diff": [[40, 3, 1, "", "apply_finite_diff"], [40, 3, 1, "", "differentiate_finite"], [40, 3, 1, "", "finite_diff_weights"]], "sympy.calculus.singularities": [[40, 3, 1, "", "is_decreasing"], [40, 3, 1, "", "is_increasing"], [40, 3, 1, "", "is_monotonic"], [40, 3, 1, "", "is_strictly_decreasing"], [40, 3, 1, "", "is_strictly_increasing"], [40, 3, 1, "", "monotonicity_helper"], [40, 3, 1, "", "singularities"]], "sympy.calculus.util": [[40, 3, 1, "", "continuous_domain"], [40, 3, 1, "", "function_range"], [40, 3, 1, "", "is_convex"], [40, 3, 1, "", "lcim"], [40, 3, 1, "", "maximum"], [40, 3, 1, "", "minimum"], [40, 3, 1, "", "not_empty_in"], [40, 3, 1, "", "periodicity"], [40, 3, 1, "", "stationary_points"]], "sympy.categories": [[41, 1, 1, "", "Category"], [41, 1, 1, "", "CompositeMorphism"], [41, 1, 1, "", "Diagram"], [41, 1, 1, "", "IdentityMorphism"], [41, 1, 1, "", "Morphism"], [41, 1, 1, "", "NamedMorphism"], [41, 1, 1, "", "Object"], [41, 0, 0, "-", "diagram_drawing"]], "sympy.categories.Category": [[41, 4, 1, "", "commutative_diagrams"], [41, 4, 1, "", "name"], [41, 4, 1, "", "objects"]], "sympy.categories.CompositeMorphism": [[41, 4, 1, "", "codomain"], [41, 4, 1, "", "components"], [41, 4, 1, "", "domain"], [41, 2, 1, "", "flatten"]], "sympy.categories.Diagram": [[41, 4, 1, "", "conclusions"], [41, 2, 1, "", "hom"], [41, 2, 1, "", "is_subdiagram"], [41, 4, 1, "", "objects"], [41, 4, 1, "", "premises"], [41, 2, 1, "", "subdiagram_from_objects"]], "sympy.categories.Morphism": [[41, 4, 1, "", "codomain"], [41, 2, 1, "", "compose"], [41, 4, 1, "", "domain"]], "sympy.categories.NamedMorphism": [[41, 4, 1, "", "name"]], "sympy.categories.diagram_drawing": [[41, 1, 1, "", "ArrowStringDescription"], [41, 1, 1, "", "DiagramGrid"], [41, 1, 1, "", "XypicDiagramDrawer"], [41, 3, 1, "", "preview_diagram"], [41, 3, 1, "", "xypic_draw_diagram"]], "sympy.categories.diagram_drawing.DiagramGrid": [[41, 4, 1, "", "height"], [41, 4, 1, "", "morphisms"], [41, 4, 1, "", "width"]], "sympy.categories.diagram_drawing.XypicDiagramDrawer": [[41, 2, 1, "", "draw"]], "sympy.codegen": [[42, 0, 0, "-", "algorithms"], [42, 0, 0, "-", "approximations"], [42, 0, 0, "-", "ast"], [42, 0, 0, "-", "cfunctions"], [42, 0, 0, "-", "cnodes"], [42, 0, 0, "-", "cutils"], [42, 0, 0, "-", "cxxnodes"], [42, 0, 0, "-", "fnodes"], [42, 0, 0, "-", "futils"], [42, 0, 0, "-", "matrix_nodes"], [42, 0, 0, "-", "pyutils"], [42, 0, 0, "-", "rewriting"]], "sympy.codegen.algorithms": [[42, 3, 1, "", "newtons_method"], [42, 3, 1, "", "newtons_method_function"]], "sympy.codegen.approximations": [[42, 1, 1, "", "SeriesApprox"], [42, 1, 1, "", "SumApprox"]], "sympy.codegen.ast": [[42, 1, 1, "", "Assignment"], [42, 1, 1, "", "AssignmentBase"], [42, 1, 1, "", "Attribute"], [42, 1, 1, "", "AugmentedAssignment"], [42, 1, 1, "", "BreakToken"], [42, 1, 1, "", "CodeBlock"], [42, 1, 1, "", "Comment"], [42, 1, 1, "", "ComplexType"], [42, 1, 1, "", "ContinueToken"], [42, 1, 1, "", "Declaration"], [42, 1, 1, "", "Element"], [42, 1, 1, "", "FloatBaseType"], [42, 1, 1, "", "FloatType"], [42, 1, 1, "", "For"], [42, 1, 1, "", "FunctionCall"], [42, 1, 1, "", "FunctionDefinition"], [42, 1, 1, "", "FunctionPrototype"], [42, 1, 1, "", "IntBaseType"], [42, 1, 1, "", "Node"], [42, 1, 1, "", "NoneToken"], [42, 1, 1, "", "Pointer"], [42, 1, 1, "", "Print"], [42, 1, 1, "", "QuotedString"], [42, 1, 1, "", "Return"], [42, 1, 1, "", "Scope"], [42, 1, 1, "", "SignedIntType"], [42, 1, 1, "", "Stream"], [42, 1, 1, "", "String"], [42, 1, 1, "", "Token"], [42, 1, 1, "", "Type"], [42, 1, 1, "", "UnsignedIntType"], [42, 1, 1, "", "Variable"], [42, 1, 1, "", "While"], [42, 3, 1, "", "aug_assign"]], "sympy.codegen.ast.CodeBlock": [[42, 2, 1, "", "cse"], [42, 2, 1, "", "topological_sort"]], "sympy.codegen.ast.FloatBaseType": [[42, 5, 1, "", "cast_nocheck"]], "sympy.codegen.ast.FloatType": [[42, 2, 1, "", "cast_nocheck"], [42, 4, 1, "", "decimal_dig"], [42, 4, 1, "", "dig"], [42, 4, 1, "", "eps"], [42, 4, 1, "", "max"], [42, 4, 1, "", "max_exponent"], [42, 4, 1, "", "min_exponent"], [42, 4, 1, "", "tiny"]], "sympy.codegen.ast.Node": [[42, 2, 1, "", "attr_params"]], "sympy.codegen.ast.Token": [[42, 2, 1, "", "kwargs"]], "sympy.codegen.ast.Type": [[42, 2, 1, "", "cast_check"], [42, 2, 1, "", "from_expr"]], "sympy.codegen.ast.Variable": [[42, 2, 1, "", "as_Declaration"], [42, 2, 1, "", "deduced"]], "sympy.codegen.cfunctions": [[42, 1, 1, "", "Cbrt"], [42, 1, 1, "", "Sqrt"], [42, 1, 1, "", "exp2"], [42, 1, 1, "", "expm1"], [42, 1, 1, "", "fma"], [42, 1, 1, "", "hypot"], [42, 1, 1, "", "log10"], [42, 1, 1, "", "log1p"], [42, 1, 1, "", "log2"]], "sympy.codegen.cfunctions.Cbrt": [[42, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.Sqrt": [[42, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.exp2": [[42, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.expm1": [[42, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.fma": [[42, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.hypot": [[42, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.log10": [[42, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.log1p": [[42, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.log2": [[42, 2, 1, "", "fdiff"]], "sympy.codegen.cnodes": [[42, 1, 1, "", "CommaOperator"], [42, 1, 1, "", "Label"], [42, 1, 1, "", "PostDecrement"], [42, 1, 1, "", "PostIncrement"], [42, 1, 1, "", "PreDecrement"], [42, 1, 1, "", "PreIncrement"], [42, 3, 1, "", "alignof"], [42, 1, 1, "", "goto"], [42, 3, 1, "", "sizeof"], [42, 1, 1, "", "struct"], [42, 1, 1, "", "union"]], "sympy.codegen.cutils": [[42, 3, 1, "", "render_as_source_file"]], "sympy.codegen.cxxnodes": [[42, 1, 1, "", "using"]], "sympy.codegen.fnodes": [[42, 1, 1, "", "ArrayConstructor"], [42, 1, 1, "", "Do"], [42, 1, 1, "", "Extent"], [42, 1, 1, "", "FortranReturn"], [42, 1, 1, "", "GoTo"], [42, 1, 1, "", "ImpliedDoLoop"], [42, 1, 1, "", "Module"], [42, 1, 1, "", "Program"], [42, 1, 1, "", "Subroutine"], [42, 1, 1, "", "SubroutineCall"], [42, 3, 1, "", "allocated"], [42, 3, 1, "", "array"], [42, 3, 1, "", "bind_C"], [42, 1, 1, "", "cmplx"], [42, 3, 1, "", "dimension"], [42, 1, 1, "", "dsign"], [42, 1, 1, "", "isign"], [42, 1, 1, "", "kind"], [42, 3, 1, "", "lbound"], [42, 1, 1, "", "literal_dp"], [42, 1, 1, "", "literal_sp"], [42, 1, 1, "", "merge"], [42, 3, 1, "", "reshape"], [42, 3, 1, "", "shape"], [42, 3, 1, "", "size"], [42, 1, 1, "", "use"], [42, 1, 1, "", "use_rename"]], "sympy.codegen.futils": [[42, 3, 1, "", "render_as_module"]], "sympy.codegen.matrix_nodes": [[42, 1, 1, "", "MatrixSolve"]], "sympy.codegen.pyutils": [[42, 3, 1, "", "render_as_module"]], "sympy.codegen.rewriting": [[42, 1, 1, "", "FuncMinusOneOptim"], [42, 1, 1, "", "Optimization"], [42, 1, 1, "", "ReplaceOptim"], [42, 3, 1, "", "create_expand_pow_optimization"], [42, 3, 1, "", "optimize"]], "sympy.codegen.rewriting.FuncMinusOneOptim": [[42, 2, 1, "", "replace_in_Add"]], "sympy.combinatorics": [[52, 0, 0, "-", "generators"], [44, 0, 0, "-", "graycode"], [45, 0, 0, "-", "group_constructs"], [46, 0, 0, "-", "group_numbers"], [48, 0, 0, "-", "named_groups"], [49, 0, 0, "-", "partitions"], [51, 0, 0, "-", "perm_groups"], [52, 0, 0, "-", "permutations"], [53, 0, 0, "-", "polyhedron"], [54, 0, 0, "-", "prufer"], [55, 0, 0, "-", "subsets"], [56, 0, 0, "-", "tensor_can"], [57, 0, 0, "-", "testutil"], [58, 0, 0, "-", "util"]], "sympy.combinatorics.generators": [[52, 2, 1, "", "alternating"], [52, 2, 1, "", "cyclic"], [52, 2, 1, "", "dihedral"], [52, 2, 1, "", "symmetric"]], "sympy.combinatorics.graycode": [[44, 1, 1, "", "GrayCode"], [44, 2, 1, "", "bin_to_gray"], [44, 2, 1, "", "get_subset_from_bitstring"], [44, 2, 1, "", "gray_to_bin"], [44, 2, 1, "", "graycode_subsets"], [44, 2, 1, "", "random_bitstring"]], "sympy.combinatorics.graycode.GrayCode": [[44, 4, 1, "", "current"], [44, 2, 1, "", "generate_gray"], [44, 4, 1, "", "n"], [44, 2, 1, "", "next"], [44, 4, 1, "", "rank"], [44, 4, 1, "", "selections"], [44, 2, 1, "", "skip"], [44, 2, 1, "", "unrank"]], "sympy.combinatorics.group_constructs": [[45, 3, 1, "", "DirectProduct"]], "sympy.combinatorics.group_numbers": [[46, 3, 1, "", "is_abelian_number"], [46, 3, 1, "", "is_cyclic_number"], [46, 3, 1, "", "is_nilpotent_number"]], "sympy.combinatorics.named_groups": [[48, 3, 1, "", "AbelianGroup"], [48, 3, 1, "", "AlternatingGroup"], [48, 3, 1, "", "CyclicGroup"], [48, 3, 1, "", "DihedralGroup"], [48, 3, 1, "", "SymmetricGroup"]], "sympy.combinatorics.partitions": [[49, 1, 1, "", "IntegerPartition"], [49, 1, 1, "", "Partition"], [49, 3, 1, "", "RGS_enum"], [49, 3, 1, "", "RGS_generalized"], [49, 3, 1, "", "RGS_rank"], [49, 3, 1, "", "RGS_unrank"], [49, 3, 1, "", "random_integer_partition"]], "sympy.combinatorics.partitions.IntegerPartition": [[49, 2, 1, "", "as_dict"], [49, 2, 1, "", "as_ferrers"], [49, 4, 1, "", "conjugate"], [49, 2, 1, "", "next_lex"], [49, 2, 1, "", "prev_lex"]], "sympy.combinatorics.partitions.Partition": [[49, 4, 1, "", "RGS"], [49, 2, 1, "", "from_rgs"], [49, 4, 1, "", "partition"], [49, 4, 1, "", "rank"], [49, 2, 1, "", "sort_key"]], "sympy.combinatorics.perm_groups": [[51, 1, 1, "", "PermutationGroup"]], "sympy.combinatorics.perm_groups.PermutationGroup": [[51, 2, 1, "", "__contains__"], [51, 2, 1, "", "__mul__"], [51, 2, 1, "", "__new__"], [51, 5, 1, "", "__weakref__"], [51, 2, 1, "", "_coset_representative"], [51, 2, 1, "", "_distinct_primes_lemma"], [51, 4, 1, "", "_elements"], [51, 2, 1, "", "_eval_is_alt_sym_monte_carlo"], [51, 2, 1, "", "_eval_is_alt_sym_naive"], [51, 2, 1, "", "_p_elements_group"], [51, 2, 1, "", "_random_pr_init"], [51, 2, 1, "", "_sylow_alt_sym"], [51, 2, 1, "", "_union_find_merge"], [51, 2, 1, "", "_union_find_rep"], [51, 2, 1, "", "_verify"], [51, 2, 1, "", "abelian_invariants"], [51, 4, 1, "", "base"], [51, 2, 1, "", "baseswap"], [51, 4, 1, "", "basic_orbits"], [51, 4, 1, "", "basic_stabilizers"], [51, 4, 1, "", "basic_transversals"], [51, 2, 1, "", "center"], [51, 2, 1, "", "centralizer"], [51, 2, 1, "", "commutator"], [51, 2, 1, "", "composition_series"], [51, 2, 1, "", "conjugacy_class"], [51, 2, 1, "", "conjugacy_classes"], [51, 2, 1, "", "contains"], [51, 2, 1, "", "coset_factor"], [51, 2, 1, "", "coset_rank"], [51, 2, 1, "", "coset_table"], [51, 2, 1, "", "coset_transversal"], [51, 2, 1, "", "coset_unrank"], [51, 4, 1, "", "degree"], [51, 2, 1, "", "derived_series"], [51, 2, 1, "", "derived_subgroup"], [51, 4, 1, "", "elements"], [51, 2, 1, "", "equals"], [51, 2, 1, "", "generate"], [51, 2, 1, "", "generate_dimino"], [51, 2, 1, "", "generate_schreier_sims"], [51, 2, 1, "", "generator_product"], [51, 4, 1, "", "generators"], [51, 4, 1, "", "identity"], [51, 2, 1, "", "index"], [51, 4, 1, "", "is_abelian"], [51, 2, 1, "", "is_alt_sym"], [51, 4, 1, "", "is_alternating"], [51, 4, 1, "", "is_cyclic"], [51, 2, 1, "", "is_elementary"], [51, 4, 1, "", "is_nilpotent"], [51, 2, 1, "", "is_normal"], [51, 4, 1, "", "is_perfect"], [51, 4, 1, "", "is_polycyclic"], [51, 2, 1, "", "is_primitive"], [51, 4, 1, "", "is_solvable"], [51, 2, 1, "", "is_subgroup"], [51, 4, 1, "", "is_symmetric"], [51, 2, 1, "", "is_transitive"], [51, 4, 1, "", "is_trivial"], [51, 2, 1, "", "lower_central_series"], [51, 2, 1, "", "make_perm"], [51, 4, 1, "", "max_div"], [51, 2, 1, "", "minimal_block"], [51, 2, 1, "", "minimal_blocks"], [51, 2, 1, "", "normal_closure"], [51, 2, 1, "", "orbit"], [51, 2, 1, "", "orbit_rep"], [51, 2, 1, "", "orbit_transversal"], [51, 2, 1, "", "orbits"], [51, 2, 1, "", "order"], [51, 2, 1, "", "pointwise_stabilizer"], [51, 2, 1, "", "polycyclic_group"], [51, 2, 1, "", "presentation"], [51, 2, 1, "", "random"], [51, 2, 1, "", "random_pr"], [51, 2, 1, "", "random_stab"], [51, 2, 1, "", "schreier_sims"], [51, 2, 1, "", "schreier_sims_incremental"], [51, 2, 1, "", "schreier_sims_random"], [51, 2, 1, "", "schreier_vector"], [51, 2, 1, "", "stabilizer"], [51, 4, 1, "", "strong_gens"], [51, 2, 1, "", "strong_presentation"], [51, 2, 1, "", "subgroup"], [51, 2, 1, "", "subgroup_search"], [51, 2, 1, "", "sylow_subgroup"], [51, 4, 1, "", "transitivity_degree"]], "sympy.combinatorics.permutations": [[52, 1, 1, "", "Cycle"], [52, 1, 1, "", "Permutation"], [52, 3, 1, "", "_af_parity"]], "sympy.combinatorics.permutations.Cycle": [[52, 2, 1, "", "list"]], "sympy.combinatorics.permutations.Permutation": [[52, 2, 1, "", "apply"], [52, 4, 1, "", "array_form"], [52, 2, 1, "", "ascents"], [52, 2, 1, "", "atoms"], [52, 4, 1, "", "cardinality"], [52, 2, 1, "", "commutator"], [52, 2, 1, "", "commutes_with"], [52, 4, 1, "", "cycle_structure"], [52, 4, 1, "", "cycles"], [52, 4, 1, "", "cyclic_form"], [52, 2, 1, "", "descents"], [52, 2, 1, "", "from_inversion_vector"], [52, 2, 1, "", "from_sequence"], [52, 4, 1, "", "full_cyclic_form"], [52, 2, 1, "", "get_adjacency_distance"], [52, 2, 1, "", "get_adjacency_matrix"], [52, 2, 1, "", "get_positional_distance"], [52, 2, 1, "", "get_precedence_distance"], [52, 2, 1, "", "get_precedence_matrix"], [52, 2, 1, "", "index"], [52, 2, 1, "", "inversion_vector"], [52, 2, 1, "", "inversions"], [52, 4, 1, "", "is_Empty"], [52, 4, 1, "", "is_Identity"], [52, 4, 1, "", "is_Singleton"], [52, 4, 1, "", "is_even"], [52, 4, 1, "", "is_odd"], [52, 2, 1, "", "josephus"], [52, 2, 1, "", "length"], [52, 2, 1, "", "list"], [52, 2, 1, "", "max"], [52, 2, 1, "", "min"], [52, 2, 1, "", "mul_inv"], [52, 2, 1, "", "next_lex"], [52, 2, 1, "", "next_nonlex"], [52, 2, 1, "", "next_trotterjohnson"], [52, 2, 1, "", "order"], [52, 2, 1, "", "parity"], [52, 2, 1, "", "random"], [52, 2, 1, "", "rank"], [52, 2, 1, "", "rank_nonlex"], [52, 2, 1, "", "rank_trotterjohnson"], [52, 2, 1, "", "resize"], [52, 2, 1, "", "rmul"], [52, 2, 1, "", "rmul_with_af"], [52, 2, 1, "", "runs"], [52, 2, 1, "", "signature"], [52, 4, 1, "", "size"], [52, 2, 1, "", "support"], [52, 2, 1, "", "transpositions"], [52, 2, 1, "", "unrank_lex"], [52, 2, 1, "", "unrank_nonlex"], [52, 2, 1, "", "unrank_trotterjohnson"]], "sympy.combinatorics.polyhedron": [[53, 1, 1, "", "Polyhedron"]], "sympy.combinatorics.polyhedron.Polyhedron": [[53, 4, 1, "", "array_form"], [53, 4, 1, "", "corners"], [53, 4, 1, "", "cyclic_form"], [53, 4, 1, "", "edges"], [53, 4, 1, "", "faces"], [53, 4, 1, "", "pgroup"], [53, 2, 1, "", "reset"], [53, 2, 1, "", "rotate"], [53, 4, 1, "", "size"], [53, 4, 1, "", "vertices"]], "sympy.combinatorics.prufer": [[54, 1, 1, "", "Prufer"]], "sympy.combinatorics.prufer.Prufer": [[54, 2, 1, "", "edges"], [54, 2, 1, "", "next"], [54, 4, 1, "", "nodes"], [54, 2, 1, "", "prev"], [54, 2, 1, "", "prufer_rank"], [54, 4, 1, "", "prufer_repr"], [54, 4, 1, "", "rank"], [54, 4, 1, "", "size"], [54, 2, 1, "", "to_prufer"], [54, 2, 1, "", "to_tree"], [54, 4, 1, "", "tree_repr"], [54, 2, 1, "", "unrank"]], "sympy.combinatorics.subsets": [[55, 1, 1, "", "Subset"], [55, 2, 1, "", "ksubsets"]], "sympy.combinatorics.subsets.Subset": [[55, 2, 1, "", "bitlist_from_subset"], [55, 4, 1, "", "cardinality"], [55, 2, 1, "", "iterate_binary"], [55, 2, 1, "", "iterate_graycode"], [55, 2, 1, "", "next_binary"], [55, 2, 1, "", "next_gray"], [55, 2, 1, "", "next_lexicographic"], [55, 2, 1, "", "prev_binary"], [55, 2, 1, "", "prev_gray"], [55, 2, 1, "", "prev_lexicographic"], [55, 4, 1, "", "rank_binary"], [55, 4, 1, "", "rank_gray"], [55, 4, 1, "", "rank_lexicographic"], [55, 4, 1, "", "size"], [55, 4, 1, "", "subset"], [55, 2, 1, "", "subset_from_bitlist"], [55, 2, 1, "", "subset_indices"], [55, 4, 1, "", "superset"], [55, 4, 1, "", "superset_size"], [55, 2, 1, "", "unrank_binary"], [55, 2, 1, "", "unrank_gray"]], "sympy.combinatorics.tensor_can": [[56, 3, 1, "", "bsgs_direct_product"], [56, 3, 1, "", "canonicalize"], [56, 3, 1, "", "double_coset_can_rep"], [56, 3, 1, "", "get_symmetric_group_sgs"]], "sympy.combinatorics.testutil": [[57, 3, 1, "", "_cmp_perm_lists"], [57, 3, 1, "", "_naive_list_centralizer"], [57, 3, 1, "", "_verify_bsgs"], [57, 3, 1, "", "_verify_centralizer"], [57, 3, 1, "", "_verify_normal_closure"]], "sympy.combinatorics.util": [[58, 3, 1, "", "_base_ordering"], [58, 3, 1, "", "_check_cycles_alt_sym"], [58, 3, 1, "", "_distribute_gens_by_base"], [58, 3, 1, "", "_handle_precomputed_bsgs"], [58, 3, 1, "", "_orbits_transversals_from_bsgs"], [58, 3, 1, "", "_remove_gens"], [58, 3, 1, "", "_strip"], [58, 3, 1, "", "_strong_gens_from_distr"]], "sympy.concrete.expr_with_intlimits": [[59, 1, 1, "", "ExprWithIntLimits"]], "sympy.concrete.expr_with_intlimits.ExprWithIntLimits": [[59, 2, 1, "", "change_index"], [59, 4, 1, "", "has_empty_sequence"], [59, 2, 1, "", "index"], [59, 2, 1, "", "reorder"], [59, 2, 1, "", "reorder_limit"]], "sympy.concrete.expr_with_limits": [[87, 1, 1, "", "ExprWithLimits"]], "sympy.concrete.expr_with_limits.ExprWithLimits": [[87, 4, 1, "", "bound_symbols"], [87, 4, 1, "", "free_symbols"], [87, 4, 1, "", "function"], [87, 4, 1, "", "has_finite_limits"], [87, 4, 1, "", "has_reversed_limits"], [87, 4, 1, "", "is_number"], [87, 4, 1, "", "limits"], [87, 4, 1, "", "variables"]], "sympy.concrete.gosper": [[59, 3, 1, "", "gosper_normal"], [59, 3, 1, "", "gosper_sum"], [59, 3, 1, "", "gosper_term"]], "sympy.concrete.products": [[59, 1, 1, "", "Product"], [59, 3, 1, "", "product"]], "sympy.concrete.products.Product": [[59, 2, 1, "", "is_convergent"], [59, 2, 1, "", "reverse_order"]], "sympy.concrete.summations": [[59, 1, 1, "", "Sum"], [59, 3, 1, "", "summation"]], "sympy.concrete.summations.Sum": [[59, 2, 1, "", "euler_maclaurin"], [59, 2, 1, "", "eval_zeta_function"], [59, 2, 1, "", "is_absolutely_convergent"], [59, 2, 1, "", "is_convergent"], [59, 2, 1, "", "reverse_order"]], "sympy.core": [[60, 0, 0, "-", "add"], [60, 0, 0, "-", "assumptions"], [60, 0, 0, "-", "basic"], [60, 0, 0, "-", "cache"], [60, 0, 0, "-", "containers"], [60, 0, 0, "-", "evalf"], [60, 0, 0, "-", "expr"], [60, 0, 0, "-", "exprtools"], [60, 0, 0, "-", "function"], [60, 0, 0, "-", "kind"], [60, 0, 0, "-", "mod"], [60, 0, 0, "-", "mul"], [60, 0, 0, "-", "multidimensional"], [60, 0, 0, "-", "numbers"], [60, 0, 0, "-", "power"], [60, 0, 0, "-", "random"], [60, 0, 0, "-", "relational"], [60, 0, 0, "-", "singleton"], [60, 0, 0, "-", "symbol"], [60, 0, 0, "-", "sympify"], [60, 0, 0, "-", "traversal"]], "sympy.core.add": [[60, 1, 1, "", "Add"]], "sympy.core.add.Add": [[60, 2, 1, "", "as_coeff_Add"], [60, 2, 1, "", "as_coeff_add"], [60, 2, 1, "", "as_content_primitive"], [60, 2, 1, "", "as_numer_denom"], [60, 2, 1, "", "as_real_imag"], [60, 2, 1, "", "as_two_terms"], [60, 2, 1, "", "class_key"], [60, 2, 1, "", "extract_leading_order"], [60, 2, 1, "", "flatten"], [60, 2, 1, "", "primitive"]], "sympy.core.basic": [[60, 1, 1, "", "Atom"], [60, 1, 1, "", "Basic"]], "sympy.core.basic.Basic": [[60, 4, 1, "", "args"], [60, 2, 1, "", "as_content_primitive"], [60, 2, 1, "", "as_dummy"], [60, 4, 1, "", "assumptions0"], [60, 2, 1, "", "atoms"], [60, 4, 1, "", "canonical_variables"], [60, 2, 1, "", "class_key"], [60, 2, 1, "", "compare"], [60, 2, 1, "", "count"], [60, 2, 1, "", "count_ops"], [60, 2, 1, "", "doit"], [60, 2, 1, "", "dummy_eq"], [60, 2, 1, "", "find"], [60, 4, 1, "", "free_symbols"], [60, 2, 1, "", "fromiter"], [60, 4, 1, "", "func"], [60, 2, 1, "", "has"], [60, 2, 1, "", "has_free"], [60, 2, 1, "", "has_xfree"], [60, 4, 1, "", "is_comparable"], [60, 2, 1, "", "match"], [60, 2, 1, "", "matches"], [60, 2, 1, "", "rcall"], [60, 2, 1, "", "refine"], [60, 2, 1, "", "replace"], [60, 2, 1, "", "rewrite"], [60, 2, 1, "", "simplify"], [60, 2, 1, "", "sort_key"], [60, 2, 1, "", "subs"], [60, 2, 1, "", "xreplace"]], "sympy.core.cache": [[60, 3, 1, "", "__cacheit"]], "sympy.core.containers": [[60, 1, 1, "", "Dict"], [60, 1, 1, "", "Tuple"], [60, 1, 1, "", "TupleKind"]], "sympy.core.containers.Dict": [[60, 2, 1, "", "get"], [60, 2, 1, "", "items"], [60, 2, 1, "", "keys"], [60, 2, 1, "", "values"]], "sympy.core.containers.Tuple": [[60, 2, 1, "", "index"], [60, 4, 1, "", "kind"], [60, 2, 1, "", "tuple_count"]], "sympy.core.evalf": [[60, 1, 1, "", "EvalfMixin"], [60, 3, 1, "", "N"], [60, 1, 1, "", "PrecisionExhausted"]], "sympy.core.evalf.EvalfMixin": [[60, 2, 1, "", "evalf"], [60, 2, 1, "", "n"]], "sympy.core.expr": [[60, 1, 1, "", "AtomicExpr"], [60, 1, 1, "", "Expr"], [60, 1, 1, "", "UnevaluatedExpr"]], "sympy.core.expr.Expr": [[60, 2, 1, "", "apart"], [60, 2, 1, "", "args_cnc"], [60, 2, 1, "", "as_coeff_Add"], [60, 2, 1, "", "as_coeff_Mul"], [60, 2, 1, "", "as_coeff_add"], [60, 2, 1, "", "as_coeff_exponent"], [60, 2, 1, "", "as_coeff_mul"], [60, 2, 1, "", "as_coefficient"], [60, 2, 1, "", "as_coefficients_dict"], [60, 2, 1, "", "as_content_primitive"], [60, 2, 1, "", "as_expr"], [60, 2, 1, "", "as_independent"], [60, 2, 1, "", "as_leading_term"], [60, 2, 1, "", "as_numer_denom"], [60, 2, 1, "", "as_ordered_factors"], [60, 2, 1, "", "as_ordered_terms"], [60, 2, 1, "", "as_poly"], [60, 2, 1, "", "as_powers_dict"], [60, 2, 1, "", "as_real_imag"], [60, 2, 1, "", "as_terms"], [60, 2, 1, "", "aseries"], [60, 2, 1, "", "cancel"], [60, 2, 1, "", "coeff"], [60, 2, 1, "", "collect"], [60, 2, 1, "", "combsimp"], [60, 2, 1, "", "compute_leading_term"], [60, 2, 1, "", "conjugate"], [60, 2, 1, "", "could_extract_minus_sign"], [60, 2, 1, "", "count_ops"], [60, 2, 1, "", "equals"], [60, 2, 1, "", "expand"], [60, 4, 1, "", "expr_free_symbols"], [60, 2, 1, "", "extract_additively"], [60, 2, 1, "", "extract_branch_factor"], [60, 2, 1, "", "extract_multiplicatively"], [60, 2, 1, "", "factor"], [60, 2, 1, "", "fourier_series"], [60, 2, 1, "", "fps"], [60, 2, 1, "", "gammasimp"], [60, 2, 1, "", "getO"], [60, 2, 1, "", "getn"], [60, 2, 1, "", "integrate"], [60, 2, 1, "", "invert"], [60, 2, 1, "", "is_algebraic_expr"], [60, 2, 1, "", "is_constant"], [60, 2, 1, "", "is_meromorphic"], [60, 4, 1, "", "is_number"], [60, 2, 1, "", "is_polynomial"], [60, 2, 1, "", "is_rational_function"], [60, 2, 1, "", "leadterm"], [60, 2, 1, "", "limit"], [60, 2, 1, "", "lseries"], [60, 2, 1, "", "normal"], [60, 2, 1, "", "nseries"], [60, 2, 1, "", "nsimplify"], [60, 2, 1, "", "powsimp"], [60, 2, 1, "", "primitive"], [60, 2, 1, "", "radsimp"], [60, 2, 1, "", "ratsimp"], [60, 2, 1, "", "removeO"], [60, 2, 1, "", "round"], [60, 2, 1, "", "separate"], [60, 2, 1, "", "series"], [60, 2, 1, "", "taylor_term"], [60, 2, 1, "", "together"], [60, 2, 1, "", "trigsimp"]], "sympy.core.exprtools": [[60, 3, 1, "", "factor_terms"], [60, 3, 1, "", "gcd_terms"]], "sympy.core.function": [[60, 1, 1, "", "Derivative"], [60, 1, 1, "", "Function"], [60, 1, 1, "", "FunctionClass"], [60, 1, 1, "", "Lambda"], [60, 1, 1, "", "PoleError"], [60, 1, 1, "", "Subs"], [60, 1, 1, "", "WildFunction"], [60, 3, 1, "", "count_ops"], [60, 3, 1, "", "diff"], [60, 3, 1, "", "expand"], [60, 3, 1, "", "expand_complex"], [60, 3, 1, "", "expand_func"], [60, 3, 1, "", "expand_log"], [60, 3, 1, "", "expand_mul"], [60, 3, 1, "", "expand_multinomial"], [60, 3, 1, "", "expand_power_base"], [60, 3, 1, "", "expand_power_exp"], [60, 3, 1, "", "expand_trig"], [60, 3, 1, "", "nfloat"]], "sympy.core.function.Derivative": [[60, 4, 1, "", "_diff_wrt"], [60, 2, 1, "", "_sort_variable_count"], [60, 2, 1, "", "as_finite_difference"], [60, 2, 1, "", "doit_numerically"]], "sympy.core.function.Function": [[60, 2, 1, "", "as_base_exp"], [60, 2, 1, "", "fdiff"], [60, 2, 1, "", "is_singular"]], "sympy.core.function.FunctionClass": [[60, 4, 1, "", "nargs"]], "sympy.core.function.Lambda": [[60, 4, 1, "", "bound_symbols"], [60, 4, 1, "", "expr"], [60, 4, 1, "", "is_identity"], [60, 4, 1, "", "signature"], [60, 4, 1, "", "variables"]], "sympy.core.function.Subs": [[60, 4, 1, "", "bound_symbols"], [60, 4, 1, "", "expr"], [60, 4, 1, "", "point"], [60, 4, 1, "", "variables"]], "sympy.core.kind": [[60, 5, 1, "", "BooleanKind"], [60, 1, 1, "", "Kind"], [60, 5, 1, "", "NumberKind"], [60, 5, 1, "", "UndefinedKind"]], "sympy.core.mod": [[60, 1, 1, "", "Mod"]], "sympy.core.mul": [[60, 1, 1, "", "Mul"], [60, 3, 1, "", "prod"]], "sympy.core.mul.Mul": [[60, 2, 1, "", "as_coeff_Mul"], [60, 2, 1, "", "as_content_primitive"], [60, 2, 1, "", "as_ordered_factors"], [60, 2, 1, "", "as_two_terms"], [60, 2, 1, "", "flatten"]], "sympy.core.multidimensional": [[60, 1, 1, "", "vectorize"]], "sympy.core.numbers": [[60, 1, 1, "", "AlgebraicNumber"], [60, 1, 1, "", "Catalan"], [60, 1, 1, "", "ComplexInfinity"], [60, 1, 1, "", "EulerGamma"], [60, 1, 1, "", "Exp1"], [60, 1, 1, "", "Float"], [60, 1, 1, "", "GoldenRatio"], [60, 1, 1, "", "Half"], [60, 1, 1, "", "ImaginaryUnit"], [60, 1, 1, "", "Infinity"], [60, 1, 1, "", "Integer"], [60, 1, 1, "", "NaN"], [60, 1, 1, "", "NegativeInfinity"], [60, 1, 1, "", "NegativeOne"], [60, 1, 1, "", "Number"], [60, 1, 1, "", "NumberSymbol"], [60, 1, 1, "", "One"], [60, 1, 1, "", "Pi"], [60, 1, 1, "", "Rational"], [60, 5, 1, "", "RealNumber"], [60, 1, 1, "", "TribonacciConstant"], [60, 1, 1, "", "Zero"], [60, 3, 1, "", "igcd"], [60, 3, 1, "", "ilcm"], [60, 3, 1, "", "mod_inverse"], [60, 3, 1, "", "seterr"]], "sympy.core.numbers.AlgebraicNumber": [[60, 2, 1, "", "__new__"], [60, 2, 1, "", "as_expr"], [60, 2, 1, "", "as_poly"], [60, 2, 1, "", "coeffs"], [60, 2, 1, "", "field_element"], [60, 4, 1, "", "is_aliased"], [60, 4, 1, "", "is_primitive_element"], [60, 2, 1, "", "minpoly_of_element"], [60, 2, 1, "", "native_coeffs"], [60, 2, 1, "", "primitive_element"], [60, 2, 1, "", "to_algebraic_integer"], [60, 2, 1, "", "to_primitive_element"], [60, 2, 1, "", "to_root"]], "sympy.core.numbers.Number": [[60, 2, 1, "", "as_coeff_Add"], [60, 2, 1, "", "as_coeff_Mul"], [60, 2, 1, "", "cofactors"], [60, 2, 1, "", "gcd"], [60, 2, 1, "", "lcm"]], "sympy.core.numbers.NumberSymbol": [[60, 2, 1, "", "approximation"]], "sympy.core.numbers.Rational": [[60, 2, 1, "", "as_coeff_Add"], [60, 2, 1, "", "as_coeff_Mul"], [60, 2, 1, "", "as_content_primitive"], [60, 2, 1, "", "factors"], [60, 2, 1, "", "limit_denominator"]], "sympy.core.power": [[60, 1, 1, "", "Pow"], [60, 3, 1, "", "integer_log"], [60, 3, 1, "", "integer_nthroot"]], "sympy.core.power.Pow": [[60, 2, 1, "", "as_base_exp"], [60, 2, 1, "", "as_content_primitive"]], "sympy.core.random": [[60, 3, 1, "", "_randint"], [60, 3, 1, "", "_randrange"], [60, 3, 1, "", "random_complex_number"], [60, 3, 1, "", "test_derivative_numerically"], [60, 3, 1, "", "verify_numerically"]], "sympy.core.relational": [[60, 5, 1, "", "Eq"], [60, 1, 1, "", "Equality"], [60, 5, 1, "", "Ge"], [60, 1, 1, "", "GreaterThan"], [60, 5, 1, "", "Gt"], [60, 5, 1, "", "Le"], [60, 1, 1, "", "LessThan"], [60, 5, 1, "", "Lt"], [60, 5, 1, "", "Ne"], [60, 5, 1, "", "Rel"], [60, 1, 1, "", "Relational"], [60, 1, 1, "", "StrictGreaterThan"], [60, 1, 1, "", "StrictLessThan"], [60, 1, 1, "", "Unequality"]], "sympy.core.relational.Equality": [[60, 2, 1, "", "as_poly"], [60, 2, 1, "", "integrate"]], "sympy.core.relational.Relational": [[60, 4, 1, "", "canonical"], [60, 2, 1, "", "equals"], [60, 4, 1, "", "lhs"], [60, 4, 1, "", "negated"], [60, 4, 1, "", "reversed"], [60, 4, 1, "", "reversedsign"], [60, 4, 1, "", "rhs"], [60, 4, 1, "", "strict"], [60, 4, 1, "", "weak"]], "sympy.core.singleton": [[60, 1, 1, "", "Singleton"], [60, 1, 1, "", "SingletonRegistry"]], "sympy.core.sorting": [[60, 3, 1, "", "default_sort_key"], [60, 3, 1, "", "ordered"]], "sympy.core.symbol": [[60, 1, 1, "", "Dummy"], [60, 1, 1, "", "Symbol"], [60, 1, 1, "", "Wild"], [60, 3, 1, "", "symbols"], [60, 3, 1, "", "var"]], "sympy.core.sympify": [[60, 3, 1, "", "sympify"]], "sympy.core.traversal": [[60, 3, 1, "", "bottom_up"], [60, 3, 1, "", "postorder_traversal"], [60, 3, 1, "", "preorder_traversal"], [60, 3, 1, "", "use"], [60, 3, 1, "", "walk"]], "sympy.crypto": [[61, 0, 0, "-", "crypto"]], "sympy.crypto.crypto": [[61, 3, 1, "", "AZ"], [61, 3, 1, "", "bifid5_square"], [61, 3, 1, "", "bifid6_square"], [61, 3, 1, "", "check_and_join"], [61, 3, 1, "", "cycle_list"], [61, 3, 1, "", "decipher_affine"], [61, 3, 1, "", "decipher_atbash"], [61, 3, 1, "", "decipher_bifid"], [61, 3, 1, "", "decipher_bifid5"], [61, 3, 1, "", "decipher_bifid6"], [61, 3, 1, "", "decipher_elgamal"], [61, 3, 1, "", "decipher_gm"], [61, 3, 1, "", "decipher_hill"], [61, 3, 1, "", "decipher_kid_rsa"], [61, 3, 1, "", "decipher_railfence"], [61, 3, 1, "", "decipher_rot13"], [61, 3, 1, "", "decipher_rsa"], [61, 3, 1, "", "decipher_shift"], [61, 3, 1, "", "decipher_vigenere"], [61, 3, 1, "", "decode_morse"], [61, 3, 1, "", "dh_private_key"], [61, 3, 1, "", "dh_public_key"], [61, 3, 1, "", "dh_shared_key"], [61, 3, 1, "", "elgamal_private_key"], [61, 3, 1, "", "elgamal_public_key"], [61, 3, 1, "", "encipher_affine"], [61, 3, 1, "", "encipher_atbash"], [61, 3, 1, "", "encipher_bifid"], [61, 3, 1, "", "encipher_bifid5"], [61, 3, 1, "", "encipher_bifid6"], [61, 3, 1, "", "encipher_elgamal"], [61, 3, 1, "", "encipher_gm"], [61, 3, 1, "", "encipher_hill"], [61, 3, 1, "", "encipher_kid_rsa"], [61, 3, 1, "", "encipher_railfence"], [61, 3, 1, "", "encipher_rot13"], [61, 3, 1, "", "encipher_rsa"], [61, 3, 1, "", "encipher_shift"], [61, 3, 1, "", "encipher_substitution"], [61, 3, 1, "", "encipher_vigenere"], [61, 3, 1, "", "encode_morse"], [61, 3, 1, "", "gm_private_key"], [61, 3, 1, "", "gm_public_key"], [61, 3, 1, "", "kid_rsa_private_key"], [61, 3, 1, "", "kid_rsa_public_key"], [61, 3, 1, "", "lfsr_autocorrelation"], [61, 3, 1, "", "lfsr_connection_polynomial"], [61, 3, 1, "", "lfsr_sequence"], [61, 3, 1, "", "padded_key"], [61, 3, 1, "", "rsa_private_key"], [61, 3, 1, "", "rsa_public_key"]], "sympy.diffgeom": [[62, 1, 1, "", "BaseCovarDerivativeOp"], [62, 1, 1, "", "BaseScalarField"], [62, 1, 1, "", "BaseVectorField"], [62, 1, 1, "", "Commutator"], [62, 1, 1, "", "CoordSystem"], [62, 1, 1, "", "CoordinateSymbol"], [62, 1, 1, "", "CovarDerivativeOp"], [62, 1, 1, "", "Differential"], [62, 1, 1, "", "LieDerivative"], [62, 1, 1, "", "Manifold"], [62, 1, 1, "", "Patch"], [62, 1, 1, "", "Point"], [62, 1, 1, "", "TensorProduct"], [62, 1, 1, "", "WedgeProduct"], [62, 3, 1, "", "intcurve_diffequ"], [62, 3, 1, "", "intcurve_series"], [62, 3, 1, "", "metric_to_Christoffel_1st"], [62, 3, 1, "", "metric_to_Christoffel_2nd"], [62, 3, 1, "", "metric_to_Ricci_components"], [62, 3, 1, "", "metric_to_Riemann_components"], [62, 3, 1, "", "twoform_to_matrix"], [62, 3, 1, "", "vectors_in_basis"]], "sympy.diffgeom.CoordSystem": [[62, 2, 1, "", "base_oneform"], [62, 2, 1, "", "base_oneforms"], [62, 2, 1, "", "base_scalar"], [62, 2, 1, "", "base_scalars"], [62, 2, 1, "", "base_vector"], [62, 2, 1, "", "base_vectors"], [62, 2, 1, "", "coord_function"], [62, 2, 1, "", "coord_functions"], [62, 2, 1, "", "coord_tuple_transform_to"], [62, 2, 1, "", "jacobian"], [62, 2, 1, "", "jacobian_determinant"], [62, 2, 1, "", "jacobian_matrix"], [62, 2, 1, "", "point"], [62, 2, 1, "", "point_to_coords"], [62, 2, 1, "", "transform"], [62, 2, 1, "", "transformation"]], "sympy.diffgeom.Point": [[62, 2, 1, "", "coords"]], "sympy.discrete": [[63, 0, 0, "-", "convolutions"], [63, 0, 0, "-", "transforms"]], "sympy.discrete.convolutions": [[63, 3, 1, "", "convolution"], [63, 3, 1, "", "convolution_fft"], [63, 3, 1, "", "convolution_fwht"], [63, 3, 1, "", "convolution_ntt"], [63, 3, 1, "", "convolution_subset"], [63, 3, 1, "", "covering_product"], [63, 3, 1, "", "intersecting_product"]], "sympy.discrete.transforms": [[63, 3, 1, "", "fft"], [63, 3, 1, "", "fwht"], [63, 3, 1, "", "ifft"], [63, 3, 1, "", "ifwht"], [63, 3, 1, "", "intt"], [63, 3, 1, "", "inverse_mobius_transform"], [63, 3, 1, "", "mobius_transform"], [63, 3, 1, "", "ntt"]], "sympy.external.pythonmpq": [[200, 1, 1, "", "PythonMPQ"]], "sympy.functions.combinatorial.factorials": [[65, 1, 1, "", "FallingFactorial"], [65, 1, 1, "", "MultiFactorial"], [65, 1, 1, "", "RisingFactorial"], [65, 1, 1, "", "binomial"], [65, 1, 1, "", "factorial"], [65, 1, 1, "", "factorial2"], [65, 1, 1, "", "subfactorial"]], "sympy.functions.combinatorial.numbers": [[65, 1, 1, "", "andre"], [65, 1, 1, "", "bell"], [65, 1, 1, "", "bernoulli"], [65, 1, 1, "", "catalan"], [65, 1, 1, "", "euler"], [65, 1, 1, "", "fibonacci"], [65, 1, 1, "", "genocchi"], [65, 1, 1, "", "harmonic"], [65, 1, 1, "", "lucas"], [65, 3, 1, "", "nC"], [65, 3, 1, "", "nP"], [65, 3, 1, "", "nT"], [65, 1, 1, "", "partition"], [65, 3, 1, "", "stirling"], [65, 1, 1, "", "tribonacci"]], "sympy.functions.elementary.complexes": [[66, 1, 1, "", "Abs"], [66, 1, 1, "", "arg"], [66, 1, 1, "", "conjugate"], [66, 1, 1, "", "im"], [66, 1, 1, "", "periodic_argument"], [66, 1, 1, "", "polar_lift"], [66, 1, 1, "", "principal_branch"], [66, 1, 1, "", "re"], [66, 1, 1, "", "sign"]], "sympy.functions.elementary.complexes.Abs": [[66, 2, 1, "", "fdiff"]], "sympy.functions.elementary.complexes.im": [[66, 2, 1, "", "as_real_imag"]], "sympy.functions.elementary.complexes.re": [[66, 2, 1, "", "as_real_imag"]], "sympy.functions.elementary.exponential": [[66, 1, 1, "", "LambertW"], [66, 1, 1, "", "exp"], [66, 1, 1, "", "exp_polar"], [66, 1, 1, "", "log"]], "sympy.functions.elementary.exponential.LambertW": [[66, 2, 1, "", "fdiff"]], "sympy.functions.elementary.exponential.exp": [[66, 2, 1, "", "as_real_imag"], [66, 4, 1, "", "base"], [66, 2, 1, "", "fdiff"], [66, 2, 1, "", "taylor_term"]], "sympy.functions.elementary.exponential.log": [[66, 2, 1, "", "as_base_exp"], [66, 2, 1, "", "as_real_imag"], [66, 2, 1, "", "fdiff"], [66, 2, 1, "", "inverse"], [66, 2, 1, "", "taylor_term"]], "sympy.functions.elementary.hyperbolic": [[66, 1, 1, "", "HyperbolicFunction"], [66, 1, 1, "", "acosh"], [66, 1, 1, "", "acoth"], [66, 1, 1, "", "acsch"], [66, 1, 1, "", "asech"], [66, 1, 1, "", "asinh"], [66, 1, 1, "", "atanh"], [66, 1, 1, "", "cosh"], [66, 1, 1, "", "coth"], [66, 1, 1, "", "csch"], [66, 1, 1, "", "sech"], [66, 1, 1, "", "sinh"], [66, 1, 1, "", "tanh"]], "sympy.functions.elementary.hyperbolic.acosh": [[66, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.acoth": [[66, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.acsch": [[66, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.asech": [[66, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.asinh": [[66, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.atanh": [[66, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.coth": [[66, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.csch": [[66, 2, 1, "", "fdiff"], [66, 2, 1, "", "taylor_term"]], "sympy.functions.elementary.hyperbolic.sinh": [[66, 2, 1, "", "as_real_imag"], [66, 2, 1, "", "fdiff"], [66, 2, 1, "", "inverse"], [66, 2, 1, "", "taylor_term"]], "sympy.functions.elementary.hyperbolic.tanh": [[66, 2, 1, "", "inverse"]], "sympy.functions.elementary.integers": [[66, 1, 1, "", "RoundFunction"], [66, 1, 1, "", "ceiling"], [66, 1, 1, "", "floor"], [66, 1, 1, "", "frac"]], "sympy.functions.elementary.miscellaneous": [[66, 1, 1, "", "IdentityFunction"], [66, 1, 1, "", "Max"], [66, 1, 1, "", "Min"], [66, 3, 1, "", "cbrt"], [66, 3, 1, "", "real_root"], [66, 3, 1, "", "root"], [66, 3, 1, "", "sqrt"]], "sympy.functions.elementary.piecewise": [[66, 1, 1, "", "ExprCondPair"], [66, 1, 1, "", "Piecewise"], [66, 3, 1, "", "piecewise_exclusive"], [66, 3, 1, "", "piecewise_fold"]], "sympy.functions.elementary.piecewise.ExprCondPair": [[66, 4, 1, "", "cond"], [66, 4, 1, "", "expr"]], "sympy.functions.elementary.piecewise.Piecewise": [[66, 2, 1, "", "_eval_integral"], [66, 2, 1, "", "as_expr_set_pairs"], [66, 2, 1, "", "doit"], [66, 2, 1, "", "eval"], [66, 2, 1, "", "piecewise_integrate"]], "sympy.functions.elementary.trigonometric": [[66, 1, 1, "", "acos"], [66, 1, 1, "", "acot"], [66, 1, 1, "", "acsc"], [66, 1, 1, "", "asec"], [66, 1, 1, "", "asin"], [66, 1, 1, "", "atan"], [66, 1, 1, "", "atan2"], [66, 1, 1, "", "cos"], [66, 1, 1, "", "cot"], [66, 1, 1, "", "csc"], [66, 1, 1, "", "sec"], [66, 1, 1, "", "sin"], [66, 1, 1, "", "sinc"], [66, 1, 1, "", "tan"]], "sympy.functions.elementary.trigonometric.acos": [[66, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.acot": [[66, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.acsc": [[66, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.asec": [[66, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.asin": [[66, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.atan": [[66, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.cot": [[66, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.tan": [[66, 2, 1, "", "inverse"]], "sympy.functions.special": [[68, 0, 0, "-", "bessel"], [68, 0, 0, "-", "beta_functions"], [68, 0, 0, "-", "elliptic_integrals"], [68, 0, 0, "-", "error_functions"], [68, 0, 0, "-", "gamma_functions"], [68, 0, 0, "-", "mathieu_functions"], [68, 0, 0, "-", "polynomials"], [68, 0, 0, "-", "singularity_functions"], [68, 0, 0, "-", "zeta_functions"]], "sympy.functions.special.bessel": [[68, 1, 1, "", "AiryBase"], [68, 1, 1, "", "BesselBase"], [68, 1, 1, "", "airyai"], [68, 1, 1, "", "airyaiprime"], [68, 1, 1, "", "airybi"], [68, 1, 1, "", "airybiprime"], [68, 1, 1, "", "besseli"], [68, 1, 1, "", "besselj"], [68, 1, 1, "", "besselk"], [68, 1, 1, "", "bessely"], [68, 1, 1, "", "hankel1"], [68, 1, 1, "", "hankel2"], [68, 1, 1, "", "jn"], [68, 3, 1, "", "jn_zeros"], [68, 1, 1, "", "marcumq"], [68, 1, 1, "", "yn"]], "sympy.functions.special.bessel.BesselBase": [[68, 4, 1, "", "argument"], [68, 4, 1, "", "order"]], "sympy.functions.special.beta_functions": [[68, 1, 1, "", "beta"]], "sympy.functions.special.bsplines": [[68, 3, 1, "", "bspline_basis"], [68, 3, 1, "", "bspline_basis_set"], [68, 3, 1, "", "interpolating_spline"]], "sympy.functions.special.delta_functions": [[68, 1, 1, "", "DiracDelta"], [68, 1, 1, "", "Heaviside"]], "sympy.functions.special.delta_functions.DiracDelta": [[68, 2, 1, "", "eval"], [68, 2, 1, "", "fdiff"], [68, 2, 1, "", "is_simple"]], "sympy.functions.special.delta_functions.Heaviside": [[68, 2, 1, "", "eval"], [68, 2, 1, "", "fdiff"], [68, 4, 1, "", "pargs"]], "sympy.functions.special.elliptic_integrals": [[68, 1, 1, "", "elliptic_e"], [68, 1, 1, "", "elliptic_f"], [68, 1, 1, "", "elliptic_k"], [68, 1, 1, "", "elliptic_pi"]], "sympy.functions.special.error_functions": [[68, 1, 1, "", "Chi"], [68, 1, 1, "", "Ci"], [68, 3, 1, "", "E1"], [68, 1, 1, "", "Ei"], [68, 1, 1, "", "FresnelIntegral"], [68, 1, 1, "", "Li"], [68, 1, 1, "", "Shi"], [68, 1, 1, "", "Si"], [68, 1, 1, "", "erf"], [68, 1, 1, "", "erf2"], [68, 1, 1, "", "erf2inv"], [68, 1, 1, "", "erfc"], [68, 1, 1, "", "erfcinv"], [68, 1, 1, "", "erfi"], [68, 1, 1, "", "erfinv"], [68, 1, 1, "", "expint"], [68, 1, 1, "", "fresnelc"], [68, 1, 1, "", "fresnels"], [68, 1, 1, "", "li"]], "sympy.functions.special.error_functions.erf": [[68, 2, 1, "", "inverse"]], "sympy.functions.special.error_functions.erfc": [[68, 2, 1, "", "inverse"]], "sympy.functions.special.error_functions.erfcinv": [[68, 2, 1, "", "inverse"]], "sympy.functions.special.error_functions.erfinv": [[68, 2, 1, "", "inverse"]], "sympy.functions.special.gamma_functions": [[68, 1, 1, "", "digamma"], [68, 1, 1, "", "gamma"], [68, 1, 1, "", "loggamma"], [68, 1, 1, "", "lowergamma"], [68, 1, 1, "", "multigamma"], [68, 1, 1, "", "polygamma"], [68, 1, 1, "", "trigamma"], [68, 1, 1, "", "uppergamma"]], "sympy.functions.special.hyper": [[68, 1, 1, "", "appellf1"], [68, 1, 1, "", "hyper"], [68, 1, 1, "", "meijerg"]], "sympy.functions.special.hyper.hyper": [[68, 4, 1, "", "ap"], [68, 4, 1, "", "argument"], [68, 4, 1, "", "bq"], [68, 4, 1, "", "convergence_statement"], [68, 4, 1, "", "eta"], [68, 4, 1, "", "radius_of_convergence"]], "sympy.functions.special.hyper.meijerg": [[68, 4, 1, "", "an"], [68, 4, 1, "", "aother"], [68, 4, 1, "", "ap"], [68, 4, 1, "", "argument"], [68, 4, 1, "", "bm"], [68, 4, 1, "", "bother"], [68, 4, 1, "", "bq"], [68, 4, 1, "", "delta"], [68, 2, 1, "", "get_period"], [68, 2, 1, "", "integrand"], [68, 4, 1, "", "is_number"], [68, 4, 1, "", "nu"]], "sympy.functions.special.mathieu_functions": [[68, 1, 1, "", "MathieuBase"], [68, 1, 1, "", "mathieuc"], [68, 1, 1, "", "mathieucprime"], [68, 1, 1, "", "mathieus"], [68, 1, 1, "", "mathieusprime"]], "sympy.functions.special.polynomials": [[68, 1, 1, "", "assoc_laguerre"], [68, 1, 1, "", "assoc_legendre"], [68, 1, 1, "", "chebyshevt"], [68, 1, 1, "", "chebyshevt_root"], [68, 1, 1, "", "chebyshevu"], [68, 1, 1, "", "chebyshevu_root"], [68, 1, 1, "", "gegenbauer"], [68, 1, 1, "", "hermite"], [68, 1, 1, "", "hermite_prob"], [68, 1, 1, "", "jacobi"], [68, 3, 1, "", "jacobi_normalized"], [68, 1, 1, "", "laguerre"], [68, 1, 1, "", "legendre"]], "sympy.functions.special.singularity_functions": [[68, 1, 1, "", "SingularityFunction"]], "sympy.functions.special.singularity_functions.SingularityFunction": [[68, 2, 1, "", "eval"], [68, 2, 1, "", "fdiff"]], "sympy.functions.special.spherical_harmonics": [[68, 1, 1, "", "Ynm"], [68, 3, 1, "", "Ynm_c"], [68, 1, 1, "", "Znm"]], "sympy.functions.special.tensor_functions": [[68, 3, 1, "", "Eijk"], [68, 1, 1, "", "KroneckerDelta"], [68, 1, 1, "", "LeviCivita"], [68, 3, 1, "", "eval_levicivita"]], "sympy.functions.special.tensor_functions.KroneckerDelta": [[68, 2, 1, "", "eval"], [68, 4, 1, "", "indices_contain_equal_information"], [68, 4, 1, "", "is_above_fermi"], [68, 4, 1, "", "is_below_fermi"], [68, 4, 1, "", "is_only_above_fermi"], [68, 4, 1, "", "is_only_below_fermi"], [68, 4, 1, "", "killable_index"], [68, 4, 1, "", "preferred_index"]], "sympy.functions.special.zeta_functions": [[68, 1, 1, "", "dirichlet_eta"], [68, 1, 1, "", "lerchphi"], [68, 1, 1, "", "polylog"], [68, 1, 1, "", "stieltjes"], [68, 1, 1, "", "zeta"]], "sympy.geometry": [[69, 0, 0, "-", "curve"], [70, 0, 0, "-", "ellipse"], [71, 0, 0, "-", "entity"], [73, 0, 0, "-", "line"], [74, 0, 0, "-", "plane"], [75, 0, 0, "-", "point"], [76, 0, 0, "-", "polygon"], [77, 0, 0, "-", "util"]], "sympy.geometry.curve": [[69, 1, 1, "", "Curve"]], "sympy.geometry.curve.Curve": [[69, 4, 1, "", "ambient_dimension"], [69, 2, 1, "", "arbitrary_point"], [69, 4, 1, "", "free_symbols"], [69, 4, 1, "", "functions"], [69, 4, 1, "", "length"], [69, 4, 1, "", "limits"], [69, 4, 1, "", "parameter"], [69, 2, 1, "", "plot_interval"], [69, 2, 1, "", "rotate"], [69, 2, 1, "", "scale"], [69, 2, 1, "", "translate"]], "sympy.geometry.ellipse": [[70, 1, 1, "", "Circle"], [70, 1, 1, "", "Ellipse"]], "sympy.geometry.ellipse.Circle": [[70, 4, 1, "", "circumference"], [70, 2, 1, "", "equation"], [70, 2, 1, "", "intersection"], [70, 4, 1, "", "radius"], [70, 2, 1, "", "reflect"], [70, 2, 1, "", "scale"], [70, 4, 1, "", "vradius"]], "sympy.geometry.ellipse.Ellipse": [[70, 4, 1, "", "apoapsis"], [70, 2, 1, "", "arbitrary_point"], [70, 4, 1, "", "area"], [70, 2, 1, "", "auxiliary_circle"], [70, 4, 1, "", "bounds"], [70, 4, 1, "", "center"], [70, 4, 1, "", "circumference"], [70, 2, 1, "", "director_circle"], [70, 4, 1, "", "eccentricity"], [70, 2, 1, "", "encloses_point"], [70, 2, 1, "", "equation"], [70, 2, 1, "", "evolute"], [70, 4, 1, "", "foci"], [70, 4, 1, "", "focus_distance"], [70, 4, 1, "", "hradius"], [70, 2, 1, "", "intersection"], [70, 2, 1, "", "is_tangent"], [70, 4, 1, "", "major"], [70, 4, 1, "", "minor"], [70, 2, 1, "", "normal_lines"], [70, 4, 1, "", "periapsis"], [70, 2, 1, "", "plot_interval"], [70, 2, 1, "", "polar_second_moment_of_area"], [70, 2, 1, "", "random_point"], [70, 2, 1, "", "reflect"], [70, 2, 1, "", "rotate"], [70, 2, 1, "", "scale"], [70, 2, 1, "", "second_moment_of_area"], [70, 2, 1, "", "section_modulus"], [70, 4, 1, "", "semilatus_rectum"], [70, 2, 1, "", "tangent_lines"], [70, 4, 1, "", "vradius"]], "sympy.geometry.entity": [[71, 1, 1, "", "GeometryEntity"]], "sympy.geometry.entity.GeometryEntity": [[71, 4, 1, "", "ambient_dimension"], [71, 4, 1, "", "bounds"], [71, 2, 1, "", "encloses"], [71, 2, 1, "", "intersection"], [71, 2, 1, "", "is_similar"], [71, 2, 1, "", "parameter_value"], [71, 2, 1, "", "reflect"], [71, 2, 1, "", "rotate"], [71, 2, 1, "", "scale"], [71, 2, 1, "", "translate"]], "sympy.geometry.line": [[73, 1, 1, "", "Line"], [73, 1, 1, "", "Line2D"], [73, 1, 1, "", "Line3D"], [73, 1, 1, "", "LinearEntity"], [73, 1, 1, "", "LinearEntity2D"], [73, 1, 1, "", "LinearEntity3D"], [73, 1, 1, "", "Ray"], [73, 1, 1, "", "Ray2D"], [73, 1, 1, "", "Ray3D"], [73, 1, 1, "", "Segment"], [73, 1, 1, "", "Segment2D"], [73, 1, 1, "", "Segment3D"]], "sympy.geometry.line.Line": [[73, 2, 1, "", "contains"], [73, 2, 1, "", "distance"], [73, 2, 1, "", "equals"], [73, 2, 1, "", "plot_interval"]], "sympy.geometry.line.Line2D": [[73, 4, 1, "", "coefficients"], [73, 2, 1, "", "equation"]], "sympy.geometry.line.Line3D": [[73, 2, 1, "", "equation"]], "sympy.geometry.line.LinearEntity": [[73, 4, 1, "", "ambient_dimension"], [73, 2, 1, "", "angle_between"], [73, 2, 1, "", "arbitrary_point"], [73, 2, 1, "", "are_concurrent"], [73, 2, 1, "", "bisectors"], [73, 2, 1, "", "contains"], [73, 4, 1, "", "direction"], [73, 2, 1, "", "intersection"], [73, 2, 1, "", "is_parallel"], [73, 2, 1, "", "is_perpendicular"], [73, 2, 1, "", "is_similar"], [73, 4, 1, "", "length"], [73, 4, 1, "", "p1"], [73, 4, 1, "", "p2"], [73, 2, 1, "", "parallel_line"], [73, 2, 1, "", "perpendicular_line"], [73, 2, 1, "", "perpendicular_segment"], [73, 4, 1, "", "points"], [73, 2, 1, "", "projection"], [73, 2, 1, "", "random_point"], [73, 2, 1, "", "smallest_angle_between"]], "sympy.geometry.line.LinearEntity2D": [[73, 4, 1, "", "bounds"], [73, 2, 1, "", "perpendicular_line"], [73, 4, 1, "", "slope"]], "sympy.geometry.line.LinearEntity3D": [[73, 4, 1, "", "direction_cosine"], [73, 4, 1, "", "direction_ratio"]], "sympy.geometry.line.Ray": [[73, 2, 1, "", "contains"], [73, 2, 1, "", "distance"], [73, 2, 1, "", "equals"], [73, 2, 1, "", "plot_interval"], [73, 4, 1, "", "source"]], "sympy.geometry.line.Ray2D": [[73, 2, 1, "", "closing_angle"], [73, 4, 1, "", "xdirection"], [73, 4, 1, "", "ydirection"]], "sympy.geometry.line.Ray3D": [[73, 4, 1, "", "xdirection"], [73, 4, 1, "", "ydirection"], [73, 4, 1, "", "zdirection"]], "sympy.geometry.line.Segment": [[73, 2, 1, "", "contains"], [73, 2, 1, "", "distance"], [73, 2, 1, "", "equals"], [73, 4, 1, "", "length"], [73, 4, 1, "", "midpoint"], [73, 2, 1, "", "perpendicular_bisector"], [73, 2, 1, "", "plot_interval"]], "sympy.geometry.plane": [[74, 1, 1, "", "Plane"]], "sympy.geometry.plane.Plane": [[74, 2, 1, "", "angle_between"], [74, 2, 1, "", "arbitrary_point"], [74, 2, 1, "", "are_concurrent"], [74, 2, 1, "", "distance"], [74, 2, 1, "", "equals"], [74, 2, 1, "", "equation"], [74, 2, 1, "", "intersection"], [74, 2, 1, "", "is_coplanar"], [74, 2, 1, "", "is_parallel"], [74, 2, 1, "", "is_perpendicular"], [74, 4, 1, "", "normal_vector"], [74, 4, 1, "", "p1"], [74, 2, 1, "", "parallel_plane"], [74, 2, 1, "", "parameter_value"], [74, 2, 1, "", "perpendicular_line"], [74, 2, 1, "", "perpendicular_plane"], [74, 2, 1, "", "projection"], [74, 2, 1, "", "projection_line"], [74, 2, 1, "", "random_point"]], "sympy.geometry.point": [[75, 1, 1, "", "Point"], [75, 1, 1, "", "Point2D"], [75, 1, 1, "", "Point3D"]], "sympy.geometry.point.Point": [[75, 2, 1, "", "affine_rank"], [75, 4, 1, "", "ambient_dimension"], [75, 2, 1, "", "are_coplanar"], [75, 2, 1, "", "canberra_distance"], [75, 2, 1, "", "distance"], [75, 2, 1, "", "dot"], [75, 2, 1, "", "equals"], [75, 2, 1, "", "intersection"], [75, 2, 1, "", "is_collinear"], [75, 2, 1, "", "is_concyclic"], [75, 4, 1, "", "is_nonzero"], [75, 2, 1, "", "is_scalar_multiple"], [75, 4, 1, "", "is_zero"], [75, 4, 1, "", "length"], [75, 2, 1, "", "midpoint"], [75, 4, 1, "", "origin"], [75, 4, 1, "", "orthogonal_direction"], [75, 2, 1, "", "project"], [75, 2, 1, "", "taxicab_distance"], [75, 4, 1, "", "unit"]], "sympy.geometry.point.Point2D": [[75, 4, 1, "", "bounds"], [75, 4, 1, "", "coordinates"], [75, 2, 1, "", "rotate"], [75, 2, 1, "", "scale"], [75, 2, 1, "", "transform"], [75, 2, 1, "", "translate"], [75, 4, 1, "", "x"], [75, 4, 1, "", "y"]], "sympy.geometry.point.Point3D": [[75, 2, 1, "", "are_collinear"], [75, 4, 1, "", "coordinates"], [75, 2, 1, "", "direction_cosine"], [75, 2, 1, "", "direction_ratio"], [75, 2, 1, "", "intersection"], [75, 2, 1, "", "scale"], [75, 2, 1, "", "transform"], [75, 2, 1, "", "translate"], [75, 4, 1, "", "x"], [75, 4, 1, "", "y"], [75, 4, 1, "", "z"]], "sympy.geometry.polygon": [[76, 1, 1, "", "Polygon"], [76, 1, 1, "", "RegularPolygon"], [76, 1, 1, "", "Triangle"]], "sympy.geometry.polygon.Polygon": [[76, 4, 1, "", "angles"], [76, 2, 1, "", "arbitrary_point"], [76, 4, 1, "", "area"], [76, 2, 1, "", "bisectors"], [76, 4, 1, "", "bounds"], [76, 4, 1, "", "centroid"], [76, 2, 1, "", "cut_section"], [76, 2, 1, "", "distance"], [76, 2, 1, "", "encloses_point"], [76, 2, 1, "", "first_moment_of_area"], [76, 2, 1, "", "intersection"], [76, 2, 1, "", "is_convex"], [76, 4, 1, "", "perimeter"], [76, 2, 1, "", "plot_interval"], [76, 2, 1, "", "polar_second_moment_of_area"], [76, 2, 1, "", "second_moment_of_area"], [76, 2, 1, "", "section_modulus"], [76, 4, 1, "", "sides"], [76, 4, 1, "", "vertices"]], "sympy.geometry.polygon.RegularPolygon": [[76, 4, 1, "", "angles"], [76, 4, 1, "", "apothem"], [76, 4, 1, "", "area"], [76, 4, 1, "", "args"], [76, 4, 1, "", "center"], [76, 4, 1, "", "centroid"], [76, 4, 1, "", "circumcenter"], [76, 4, 1, "", "circumcircle"], [76, 4, 1, "", "circumradius"], [76, 2, 1, "", "encloses_point"], [76, 4, 1, "", "exterior_angle"], [76, 4, 1, "", "incircle"], [76, 4, 1, "", "inradius"], [76, 4, 1, "", "interior_angle"], [76, 4, 1, "", "length"], [76, 4, 1, "", "radius"], [76, 2, 1, "", "reflect"], [76, 2, 1, "", "rotate"], [76, 4, 1, "", "rotation"], [76, 2, 1, "", "scale"], [76, 2, 1, "", "spin"], [76, 4, 1, "", "vertices"]], "sympy.geometry.polygon.Triangle": [[76, 4, 1, "", "altitudes"], [76, 2, 1, "", "bisectors"], [76, 4, 1, "", "circumcenter"], [76, 4, 1, "", "circumcircle"], [76, 4, 1, "", "circumradius"], [76, 4, 1, "", "eulerline"], [76, 4, 1, "", "excenters"], [76, 4, 1, "", "exradii"], [76, 4, 1, "", "incenter"], [76, 4, 1, "", "incircle"], [76, 4, 1, "", "inradius"], [76, 2, 1, "", "is_equilateral"], [76, 2, 1, "", "is_isosceles"], [76, 2, 1, "", "is_right"], [76, 2, 1, "", "is_scalene"], [76, 2, 1, "", "is_similar"], [76, 4, 1, "", "medial"], [76, 4, 1, "", "medians"], [76, 4, 1, "", "nine_point_circle"], [76, 4, 1, "", "orthocenter"], [76, 4, 1, "", "vertices"]], "sympy.geometry.util": [[77, 3, 1, "", "are_similar"], [77, 3, 1, "", "centroid"], [77, 3, 1, "", "convex_hull"], [77, 3, 1, "", "idiff"], [77, 3, 1, "", "intersection"]], "sympy.holonomic.holonomic": [[83, 1, 1, "", "DifferentialOperator"], [83, 1, 1, "", "DifferentialOperatorAlgebra"], [83, 3, 1, "", "DifferentialOperators"], [83, 1, 1, "", "HolonomicFunction"], [81, 3, 1, "", "_convert_poly_rat_alg"], [81, 3, 1, "", "_create_table"], [79, 3, 1, "", "expr_to_holonomic"], [79, 3, 1, "", "from_hyper"], [79, 3, 1, "", "from_meijerg"]], "sympy.holonomic.holonomic.DifferentialOperator": [[83, 2, 1, "", "is_singular"]], "sympy.holonomic.holonomic.HolonomicFunction": [[82, 2, 1, "", "composition"], [82, 2, 1, "", "diff"], [82, 2, 1, "", "evalf"], [82, 2, 1, "", "integrate"], [82, 2, 1, "", "series"], [82, 2, 1, "", "to_expr"], [82, 2, 1, "", "to_hyper"], [82, 2, 1, "", "to_meijerg"], [82, 2, 1, "", "to_sequence"]], "sympy.integrals.deltafunctions": [[87, 3, 1, "", "deltaintegrate"]], "sympy.integrals.heurisch": [[87, 3, 1, "", "components"], [87, 3, 1, "", "heurisch"]], "sympy.integrals.integrals": [[87, 1, 1, "", "Integral"], [87, 3, 1, "", "integrate"], [87, 3, 1, "", "line_integrate"]], "sympy.integrals.integrals.Integral": [[87, 2, 1, "", "as_sum"], [87, 2, 1, "", "doit"], [87, 4, 1, "", "free_symbols"], [87, 6, 1, "", "is_commutative"], [87, 2, 1, "", "principal_value"], [87, 2, 1, "", "transform"]], "sympy.integrals": [[87, 0, 0, "-", "intpoly"], [85, 0, 0, "-", "meijerint"], [85, 0, 0, "-", "meijerint_doc"], [87, 0, 0, "-", "transforms"]], "sympy.integrals.intpoly": [[87, 3, 1, "", "polytope_integrate"]], "sympy.integrals.manualintegrate": [[87, 3, 1, "", "integral_steps"], [87, 3, 1, "", "manualintegrate"]], "sympy.integrals.meijerint": [[85, 7, 1, "", "_CoeffExpValueError"], [85, 3, 1, "", "_check_antecedents"], [85, 3, 1, "", "_check_antecedents_1"], [85, 3, 1, "", "_check_antecedents_inversion"], [85, 3, 1, "", "_condsimp"], [85, 3, 1, "", "_create_lookup_table"], [85, 3, 1, "", "_dummy"], [85, 3, 1, "", "_dummy_"], [85, 3, 1, "", "_eval_cond"], [85, 3, 1, "", "_exponents"], [85, 3, 1, "", "_find_splitting_points"], [85, 3, 1, "", "_flip_g"], [85, 3, 1, "", "_functions"], [85, 3, 1, "", "_get_coeff_exp"], [85, 3, 1, "", "_guess_expansion"], [85, 3, 1, "", "_inflate_fox_h"], [85, 3, 1, "", "_inflate_g"], [85, 3, 1, "", "_int0oo"], [85, 3, 1, "", "_int0oo_1"], [85, 3, 1, "", "_int_inversion"], [85, 3, 1, "", "_is_analytic"], [85, 3, 1, "", "_meijerint_definite_2"], [85, 3, 1, "", "_meijerint_definite_3"], [85, 3, 1, "", "_meijerint_definite_4"], [85, 3, 1, "", "_meijerint_indefinite_1"], [85, 3, 1, "", "_mul_args"], [85, 3, 1, "", "_mul_as_two_parts"], [85, 3, 1, "", "_my_principal_branch"], [85, 3, 1, "", "_mytype"], [85, 3, 1, "", "_rewrite1"], [85, 3, 1, "", "_rewrite2"], [85, 3, 1, "", "_rewrite_inversion"], [85, 3, 1, "", "_rewrite_saxena"], [85, 3, 1, "", "_rewrite_saxena_1"], [85, 3, 1, "", "_rewrite_single"], [85, 3, 1, "", "_split_mul"], [85, 3, 1, "", "meijerint_definite"], [85, 3, 1, "", "meijerint_indefinite"], [85, 3, 1, "", "meijerint_inversion"]], "sympy.integrals.quadrature": [[87, 3, 1, "", "gauss_chebyshev_t"], [87, 3, 1, "", "gauss_chebyshev_u"], [87, 3, 1, "", "gauss_gen_laguerre"], [87, 3, 1, "", "gauss_hermite"], [87, 3, 1, "", "gauss_jacobi"], [87, 3, 1, "", "gauss_laguerre"], [87, 3, 1, "", "gauss_legendre"], [87, 3, 1, "", "gauss_lobatto"]], "sympy.integrals.rationaltools": [[87, 3, 1, "", "ratint"], [87, 3, 1, "", "ratint_logpart"], [87, 3, 1, "", "ratint_ratpart"]], "sympy.integrals.risch": [[87, 1, 1, "", "NonElementaryIntegral"], [87, 3, 1, "", "risch_integrate"]], "sympy.integrals.singularityfunctions": [[87, 3, 1, "", "singularityintegrate"]], "sympy.integrals.transforms": [[87, 1, 1, "", "CosineTransform"], [87, 1, 1, "", "FourierTransform"], [87, 1, 1, "", "HankelTransform"], [87, 1, 1, "", "IntegralTransform"], [87, 7, 1, "", "IntegralTransformError"], [87, 1, 1, "", "InverseCosineTransform"], [87, 1, 1, "", "InverseFourierTransform"], [87, 1, 1, "", "InverseHankelTransform"], [87, 1, 1, "", "InverseLaplaceTransform"], [87, 1, 1, "", "InverseMellinTransform"], [87, 1, 1, "", "InverseSineTransform"], [87, 1, 1, "", "LaplaceTransform"], [87, 1, 1, "", "MellinTransform"], [87, 1, 1, "", "SineTransform"], [87, 3, 1, "", "_fast_inverse_laplace"], [87, 3, 1, "", "_fourier_transform"], [87, 3, 1, "", "cosine_transform"], [87, 3, 1, "", "fourier_transform"], [87, 3, 1, "", "hankel_transform"], [87, 3, 1, "", "inverse_cosine_transform"], [87, 3, 1, "", "inverse_fourier_transform"], [87, 3, 1, "", "inverse_hankel_transform"], [87, 3, 1, "", "inverse_laplace_transform"], [87, 3, 1, "", "inverse_mellin_transform"], [87, 3, 1, "", "inverse_sine_transform"], [87, 3, 1, "", "laplace_transform"], [87, 3, 1, "", "mellin_transform"], [87, 3, 1, "", "sine_transform"]], "sympy.integrals.transforms.IntegralTransform": [[87, 2, 1, "", "doit"], [87, 4, 1, "", "function"], [87, 4, 1, "", "function_variable"], [87, 4, 1, "", "transform_variable"]], "sympy.integrals.trigonometry": [[87, 3, 1, "", "trigintegrate"]], "sympy.interactive": [[88, 0, 0, "-", "printing"], [88, 0, 0, "-", "session"]], "sympy.interactive.printing": [[88, 3, 1, "", "init_printing"]], "sympy.interactive.session": [[88, 3, 1, "", "enable_automatic_int_sympification"], [88, 3, 1, "", "enable_automatic_symbols"], [88, 3, 1, "", "init_ipython_session"], [88, 3, 1, "", "init_python_session"], [88, 3, 1, "", "init_session"], [88, 3, 1, "", "int_to_Integer"]], "sympy.liealgebras.cartan_matrix": [[89, 3, 1, "", "CartanMatrix"]], "sympy.liealgebras.cartan_type": [[89, 1, 1, "", "CartanType_generator"], [89, 1, 1, "", "Standard_Cartan"]], "sympy.liealgebras.cartan_type.Standard_Cartan": [[89, 2, 1, "", "rank"], [89, 2, 1, "", "series"]], "sympy.liealgebras.dynkin_diagram": [[89, 3, 1, "", "DynkinDiagram"]], "sympy.liealgebras.root_system": [[89, 1, 1, "", "RootSystem"]], "sympy.liealgebras.root_system.RootSystem": [[89, 2, 1, "", "add_as_roots"], [89, 2, 1, "", "add_simple_roots"], [89, 2, 1, "", "all_roots"], [89, 2, 1, "", "cartan_matrix"], [89, 2, 1, "", "dynkin_diagram"], [89, 2, 1, "", "root_space"], [89, 2, 1, "", "simple_roots"]], "sympy.liealgebras.type_a": [[89, 1, 1, "", "TypeA"]], "sympy.liealgebras.type_a.TypeA": [[89, 2, 1, "", "basic_root"], [89, 2, 1, "", "basis"], [89, 2, 1, "", "cartan_matrix"], [89, 2, 1, "", "dimension"], [89, 2, 1, "", "highest_root"], [89, 2, 1, "", "lie_algebra"], [89, 2, 1, "", "positive_roots"], [89, 2, 1, "", "roots"], [89, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_b": [[89, 1, 1, "", "TypeB"]], "sympy.liealgebras.type_b.TypeB": [[89, 2, 1, "", "basic_root"], [89, 2, 1, "", "basis"], [89, 2, 1, "", "cartan_matrix"], [89, 2, 1, "", "dimension"], [89, 2, 1, "", "lie_algebra"], [89, 2, 1, "", "positive_roots"], [89, 2, 1, "", "roots"], [89, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_c": [[89, 1, 1, "", "TypeC"]], "sympy.liealgebras.type_c.TypeC": [[89, 2, 1, "", "basic_root"], [89, 2, 1, "", "basis"], [89, 2, 1, "", "cartan_matrix"], [89, 2, 1, "", "dimension"], [89, 2, 1, "", "lie_algebra"], [89, 2, 1, "", "positive_roots"], [89, 2, 1, "", "roots"], [89, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_d": [[89, 1, 1, "", "TypeD"]], "sympy.liealgebras.type_d.TypeD": [[89, 2, 1, "", "basic_root"], [89, 2, 1, "", "basis"], [89, 2, 1, "", "cartan_matrix"], [89, 2, 1, "", "dimension"], [89, 2, 1, "", "lie_algebra"], [89, 2, 1, "", "positive_roots"], [89, 2, 1, "", "roots"], [89, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_e": [[89, 1, 1, "", "TypeE"]], "sympy.liealgebras.type_e.TypeE": [[89, 2, 1, "", "basic_root"], [89, 2, 1, "", "basis"], [89, 2, 1, "", "cartan_matrix"], [89, 2, 1, "", "dimension"], [89, 2, 1, "", "positive_roots"], [89, 2, 1, "", "roots"], [89, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_f": [[89, 1, 1, "", "TypeF"]], "sympy.liealgebras.type_f.TypeF": [[89, 2, 1, "", "basic_root"], [89, 2, 1, "", "basis"], [89, 2, 1, "", "cartan_matrix"], [89, 2, 1, "", "dimension"], [89, 2, 1, "", "positive_roots"], [89, 2, 1, "", "roots"], [89, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_g": [[89, 1, 1, "", "TypeG"]], "sympy.liealgebras.type_g.TypeG": [[89, 2, 1, "", "basis"], [89, 2, 1, "", "cartan_matrix"], [89, 2, 1, "", "dimension"], [89, 2, 1, "", "positive_roots"], [89, 2, 1, "", "roots"], [89, 2, 1, "", "simple_root"]], "sympy.liealgebras.weyl_group": [[89, 1, 1, "", "WeylGroup"]], "sympy.liealgebras.weyl_group.WeylGroup": [[89, 2, 1, "", "coxeter_diagram"], [89, 2, 1, "", "delete_doubles"], [89, 2, 1, "", "element_order"], [89, 2, 1, "", "generators"], [89, 2, 1, "", "group_name"], [89, 2, 1, "", "group_order"], [89, 2, 1, "", "matrix_form"]], "sympy.logic.boolalg": [[90, 3, 1, "", "ANFform"], [90, 1, 1, "", "And"], [90, 1, 1, "", "Boolean"], [90, 1, 1, "", "BooleanFalse"], [90, 1, 1, "", "BooleanTrue"], [90, 1, 1, "", "Equivalent"], [90, 1, 1, "", "Exclusive"], [90, 1, 1, "", "ITE"], [90, 1, 1, "", "Implies"], [90, 1, 1, "", "Nand"], [90, 1, 1, "", "Nor"], [90, 1, 1, "", "Not"], [90, 1, 1, "", "Or"], [90, 3, 1, "", "POSform"], [90, 3, 1, "", "SOPform"], [90, 1, 1, "", "Xnor"], [90, 1, 1, "", "Xor"], [90, 3, 1, "", "anf_coeffs"], [90, 3, 1, "", "bool_map"], [90, 3, 1, "", "bool_maxterm"], [90, 3, 1, "", "bool_minterm"], [90, 3, 1, "", "bool_monomial"], [90, 3, 1, "", "distribute_and_over_or"], [90, 3, 1, "", "distribute_or_over_and"], [90, 3, 1, "", "distribute_xor_over_and"], [90, 3, 1, "", "eliminate_implications"], [90, 3, 1, "", "gateinputcount"], [90, 3, 1, "", "integer_to_term"], [90, 3, 1, "", "is_anf"], [90, 3, 1, "", "is_cnf"], [90, 3, 1, "", "is_dnf"], [90, 3, 1, "", "is_nnf"], [90, 3, 1, "", "simplify_logic"], [90, 3, 1, "", "term_to_integer"], [90, 3, 1, "", "to_anf"], [90, 3, 1, "", "to_cnf"], [90, 3, 1, "", "to_dnf"], [90, 3, 1, "", "to_int_repr"], [90, 3, 1, "", "to_nnf"], [90, 3, 1, "", "truth_table"]], "sympy.logic.boolalg.Boolean": [[90, 2, 1, "", "as_set"], [90, 2, 1, "", "equals"]], "sympy.logic.boolalg.BooleanFalse": [[90, 2, 1, "", "as_set"]], "sympy.logic.boolalg.BooleanTrue": [[90, 2, 1, "", "as_set"]], "sympy.logic": [[90, 0, 0, "-", "inference"]], "sympy.logic.inference": [[90, 3, 1, "", "satisfiable"]], "sympy.matrices": [[91, 0, 0, "-", "common"], [93, 0, 0, "-", "expressions"], [94, 0, 0, "-", "immutable"], [96, 0, 0, "-", "matrices"], [98, 0, 0, "-", "sparse"], [99, 0, 0, "-", "sparsetools"]], "sympy.matrices.common": [[91, 1, 1, "", "MatrixCommon"], [91, 1, 1, "", "MatrixKind"]], "sympy.matrices.common.MatrixCommon": [[91, 4, 1, "", "C"], [91, 4, 1, "", "H"], [91, 4, 1, "", "T"], [91, 2, 1, "", "__abs__"], [91, 2, 1, "", "__add__"], [91, 2, 1, "", "__getitem__"], [91, 2, 1, "", "__len__"], [91, 2, 1, "", "__mul__"], [91, 2, 1, "", "__pow__"], [91, 5, 1, "", "__weakref__"], [91, 2, 1, "", "adjoint"], [91, 2, 1, "", "applyfunc"], [91, 2, 1, "", "as_real_imag"], [91, 2, 1, "", "atoms"], [91, 2, 1, "", "col"], [91, 2, 1, "", "col_del"], [91, 2, 1, "", "col_insert"], [91, 2, 1, "", "col_join"], [91, 2, 1, "", "companion"], [91, 2, 1, "", "conjugate"], [91, 2, 1, "", "diag"], [91, 2, 1, "", "diagonal"], [91, 2, 1, "", "evalf"], [91, 2, 1, "", "expand"], [91, 2, 1, "", "extract"], [91, 2, 1, "", "eye"], [91, 4, 1, "", "free_symbols"], [91, 2, 1, "", "get_diag_blocks"], [91, 2, 1, "", "has"], [91, 2, 1, "", "hstack"], [91, 2, 1, "", "is_anti_symmetric"], [91, 2, 1, "", "is_diagonal"], [91, 4, 1, "", "is_hermitian"], [91, 4, 1, "", "is_lower"], [91, 4, 1, "", "is_lower_hessenberg"], [91, 4, 1, "", "is_square"], [91, 4, 1, "", "is_strongly_diagonally_dominant"], [91, 2, 1, "", "is_symbolic"], [91, 2, 1, "", "is_symmetric"], [91, 4, 1, "", "is_upper"], [91, 4, 1, "", "is_upper_hessenberg"], [91, 4, 1, "", "is_weakly_diagonally_dominant"], [91, 4, 1, "", "is_zero_matrix"], [91, 2, 1, "", "jordan_block"], [91, 2, 1, "", "lower_triangular"], [91, 2, 1, "", "multiply"], [91, 2, 1, "", "multiply_elementwise"], [91, 2, 1, "", "n"], [91, 2, 1, "", "ones"], [91, 2, 1, "", "permute"], [91, 2, 1, "", "permute_cols"], [91, 2, 1, "", "permute_rows"], [91, 2, 1, "", "pow"], [91, 2, 1, "", "refine"], [91, 2, 1, "", "replace"], [91, 2, 1, "", "reshape"], [91, 2, 1, "", "rmultiply"], [91, 2, 1, "", "rot90"], [91, 2, 1, "", "row"], [91, 2, 1, "", "row_del"], [91, 2, 1, "", "row_insert"], [91, 2, 1, "", "row_join"], [91, 4, 1, "", "shape"], [91, 2, 1, "", "simplify"], [91, 2, 1, "", "subs"], [91, 2, 1, "", "todod"], [91, 2, 1, "", "todok"], [91, 2, 1, "", "tolist"], [91, 2, 1, "", "trace"], [91, 2, 1, "", "transpose"], [91, 2, 1, "", "upper_triangular"], [91, 2, 1, "", "values"], [91, 2, 1, "", "vec"], [91, 2, 1, "", "vech"], [91, 2, 1, "", "vstack"], [91, 2, 1, "", "wilkinson"], [91, 2, 1, "", "xreplace"], [91, 2, 1, "", "zeros"]], "sympy.matrices.dense": [[92, 1, 1, "", "DenseMatrix"], [96, 3, 1, "", "GramSchmidt"], [92, 5, 1, "", "Matrix"], [92, 1, 1, "", "MutableDenseMatrix"], [96, 3, 1, "", "casoratian"], [96, 3, 1, "", "diag"], [96, 3, 1, "", "eye"], [96, 3, 1, "", "hessian"], [96, 3, 1, "", "jordan_cell"], [96, 3, 1, "", "list2numpy"], [96, 3, 1, "", "matrix2numpy"], [96, 3, 1, "", "matrix_multiply_elementwise"], [96, 3, 1, "", "ones"], [96, 3, 1, "", "randMatrix"], [96, 3, 1, "", "rot_axis1"], [96, 3, 1, "", "rot_axis2"], [96, 3, 1, "", "rot_axis3"], [96, 3, 1, "", "symarray"], [96, 3, 1, "", "wronskian"], [96, 3, 1, "", "zeros"]], "sympy.matrices.dense.DenseMatrix": [[92, 2, 1, "", "LDLdecomposition"], [92, 2, 1, "", "as_immutable"], [92, 2, 1, "", "as_mutable"], [92, 2, 1, "", "cholesky"], [92, 2, 1, "", "lower_triangular_solve"], [92, 2, 1, "", "upper_triangular_solve"]], "sympy.matrices.dense.MutableDenseMatrix": [[92, 2, 1, "", "simplify"]], "sympy.matrices.expressions": [[93, 1, 1, "", "CompanionMatrix"], [93, 1, 1, "", "FunctionMatrix"], [93, 1, 1, "", "HadamardPower"], [93, 1, 1, "", "HadamardProduct"], [93, 1, 1, "", "Identity"], [93, 1, 1, "", "Inverse"], [93, 1, 1, "", "MatAdd"], [93, 1, 1, "", "MatMul"], [93, 1, 1, "", "MatPow"], [93, 1, 1, "", "MatrixExpr"], [93, 1, 1, "", "MatrixPermute"], [93, 1, 1, "", "MatrixSet"], [93, 1, 1, "", "MatrixSymbol"], [93, 1, 1, "", "PermutationMatrix"], [93, 1, 1, "", "Trace"], [93, 1, 1, "", "Transpose"], [93, 1, 1, "", "ZeroMatrix"], [93, 0, 0, "-", "blockmatrix"], [93, 3, 1, "", "hadamard_product"]], "sympy.matrices.expressions.MatrixExpr": [[93, 4, 1, "", "T"], [93, 2, 1, "", "as_coeff_Mul"], [93, 2, 1, "", "as_explicit"], [93, 2, 1, "", "as_mutable"], [93, 2, 1, "", "equals"], [93, 2, 1, "", "from_index_summation"]], "sympy.matrices.expressions.blockmatrix": [[93, 1, 1, "", "BlockDiagMatrix"], [93, 1, 1, "", "BlockMatrix"], [93, 3, 1, "", "block_collapse"]], "sympy.matrices.expressions.blockmatrix.BlockDiagMatrix": [[93, 2, 1, "", "get_diag_blocks"]], "sympy.matrices.expressions.blockmatrix.BlockMatrix": [[93, 2, 1, "", "LDUdecomposition"], [93, 2, 1, "", "LUdecomposition"], [93, 2, 1, "", "UDLdecomposition"], [93, 2, 1, "", "schur"], [93, 2, 1, "", "transpose"]], "sympy.matrices.immutable": [[94, 1, 1, "", "ImmutableDenseMatrix"], [94, 5, 1, "", "ImmutableMatrix"], [98, 1, 1, "", "ImmutableSparseMatrix"]], "sympy.matrices.matrices": [[96, 1, 1, "", "MatrixBase"], [96, 1, 1, "", "MatrixCalculus"], [96, 1, 1, "", "MatrixDeterminant"], [96, 1, 1, "", "MatrixEigen"], [96, 1, 1, "", "MatrixError"], [96, 1, 1, "", "MatrixReductions"], [96, 1, 1, "", "MatrixSubspaces"], [96, 1, 1, "", "NonSquareMatrixError"], [96, 1, 1, "", "ShapeError"], [96, 3, 1, "", "a2idx"]], "sympy.matrices.matrices.MatrixBase": [[96, 4, 1, "", "D"], [96, 2, 1, "", "LDLdecomposition"], [96, 2, 1, "", "LDLsolve"], [96, 2, 1, "", "LUdecomposition"], [96, 2, 1, "", "LUdecompositionFF"], [96, 2, 1, "", "LUdecomposition_Simple"], [96, 2, 1, "", "LUsolve"], [96, 2, 1, "", "QRdecomposition"], [96, 2, 1, "", "QRsolve"], [96, 2, 1, "", "add"], [96, 2, 1, "", "analytic_func"], [96, 2, 1, "", "cholesky"], [96, 2, 1, "", "cholesky_solve"], [96, 2, 1, "", "condition_number"], [96, 2, 1, "", "connected_components"], [96, 2, 1, "", "connected_components_decomposition"], [96, 2, 1, "", "copy"], [96, 2, 1, "", "cross"], [96, 2, 1, "", "diagonal_solve"], [96, 2, 1, "", "dot"], [96, 2, 1, "", "dual"], [96, 2, 1, "", "exp"], [96, 2, 1, "", "gauss_jordan_solve"], [96, 2, 1, "", "inv"], [96, 2, 1, "", "inv_mod"], [96, 2, 1, "", "inverse_ADJ"], [96, 2, 1, "", "inverse_BLOCK"], [96, 2, 1, "", "inverse_CH"], [96, 2, 1, "", "inverse_GE"], [96, 2, 1, "", "inverse_LDL"], [96, 2, 1, "", "inverse_LU"], [96, 2, 1, "", "inverse_QR"], [96, 2, 1, "", "irregular"], [96, 2, 1, "", "is_nilpotent"], [96, 2, 1, "", "key2bounds"], [96, 2, 1, "", "key2ij"], [96, 2, 1, "", "log"], [96, 2, 1, "", "lower_triangular_solve"], [96, 2, 1, "", "norm"], [96, 2, 1, "", "normalized"], [96, 2, 1, "", "pinv"], [96, 2, 1, "", "pinv_solve"], [96, 2, 1, "", "print_nonzero"], [96, 2, 1, "", "project"], [96, 2, 1, "", "rank_decomposition"], [96, 2, 1, "", "singular_value_decomposition"], [96, 2, 1, "", "solve"], [96, 2, 1, "", "solve_least_squares"], [96, 2, 1, "", "strongly_connected_components"], [96, 2, 1, "", "strongly_connected_components_decomposition"], [96, 2, 1, "", "table"], [96, 2, 1, "", "upper_hessenberg_decomposition"], [96, 2, 1, "", "upper_triangular_solve"]], "sympy.matrices.matrices.MatrixCalculus": [[96, 2, 1, "", "diff"], [96, 2, 1, "", "integrate"], [96, 2, 1, "", "jacobian"], [96, 2, 1, "", "limit"]], "sympy.matrices.matrices.MatrixDeterminant": [[96, 2, 1, "", "adjugate"], [96, 2, 1, "", "charpoly"], [96, 2, 1, "", "cofactor"], [96, 2, 1, "", "cofactor_matrix"], [96, 2, 1, "", "det"], [96, 2, 1, "", "minor"], [96, 2, 1, "", "minor_submatrix"], [96, 2, 1, "", "per"]], "sympy.matrices.matrices.MatrixEigen": [[96, 2, 1, "", "bidiagonal_decomposition"], [96, 2, 1, "", "bidiagonalize"], [96, 2, 1, "", "diagonalize"], [96, 2, 1, "", "eigenvals"], [96, 2, 1, "", "eigenvects"], [96, 2, 1, "", "is_diagonalizable"], [96, 4, 1, "", "is_indefinite"], [96, 4, 1, "", "is_negative_definite"], [96, 4, 1, "", "is_negative_semidefinite"], [96, 4, 1, "", "is_positive_definite"], [96, 4, 1, "", "is_positive_semidefinite"], [96, 2, 1, "", "jordan_form"], [96, 2, 1, "", "left_eigenvects"], [96, 2, 1, "", "singular_values"]], "sympy.matrices.matrices.MatrixReductions": [[96, 2, 1, "", "echelon_form"], [96, 2, 1, "", "elementary_col_op"], [96, 2, 1, "", "elementary_row_op"], [96, 4, 1, "", "is_echelon"], [96, 2, 1, "", "rank"], [96, 2, 1, "", "rref"]], "sympy.matrices.matrices.MatrixSubspaces": [[96, 2, 1, "", "columnspace"], [96, 2, 1, "", "nullspace"], [96, 2, 1, "", "orthogonalize"], [96, 2, 1, "", "rowspace"]], "sympy.matrices.normalforms": [[97, 3, 1, "", "hermite_normal_form"], [97, 3, 1, "", "smith_normal_form"]], "sympy.matrices.sparse": [[98, 1, 1, "", "MutableSparseMatrix"], [98, 5, 1, "", "SparseMatrix"]], "sympy.matrices.sparsetools": [[99, 2, 1, "", "_csrtodok"], [99, 2, 1, "", "_doktocsr"], [99, 2, 1, "", "banded"]], "sympy.ntheory": [[100, 0, 0, "-", "bbp_pi"], [100, 0, 0, "-", "continued_fraction"], [100, 0, 0, "-", "digits"], [100, 0, 0, "-", "ecm"], [100, 0, 0, "-", "egyptian_fraction"], [100, 0, 0, "-", "factor_"], [100, 0, 0, "-", "generate"], [100, 1, 1, "", "mobius"], [100, 0, 0, "-", "modular"], [100, 0, 0, "-", "multinomial"], [100, 0, 0, "-", "partitions_"], [100, 0, 0, "-", "primetest"], [100, 0, 0, "-", "qs"], [100, 0, 0, "-", "residue_ntheory"]], "sympy.ntheory.bbp_pi": [[100, 3, 1, "", "pi_hex_digits"]], "sympy.ntheory.continued_fraction": [[100, 3, 1, "", "continued_fraction"], [100, 3, 1, "", "continued_fraction_convergents"], [100, 3, 1, "", "continued_fraction_iterator"], [100, 3, 1, "", "continued_fraction_periodic"], [100, 3, 1, "", "continued_fraction_reduce"]], "sympy.ntheory.digits": [[100, 3, 1, "", "count_digits"], [100, 3, 1, "", "digits"], [100, 3, 1, "", "is_palindromic"]], "sympy.ntheory.ecm": [[100, 3, 1, "", "ecm"]], "sympy.ntheory.egyptian_fraction": [[100, 3, 1, "", "egyptian_fraction"]], "sympy.ntheory.factor_": [[100, 3, 1, "", "abundance"], [100, 3, 1, "", "antidivisor_count"], [100, 3, 1, "", "antidivisors"], [100, 3, 1, "", "core"], [100, 3, 1, "", "digits"], [100, 3, 1, "", "divisor_count"], [100, 1, 1, "", "divisor_sigma"], [100, 3, 1, "", "divisors"], [100, 3, 1, "", "factorint"], [100, 3, 1, "", "factorrat"], [100, 3, 1, "", "is_abundant"], [100, 3, 1, "", "is_amicable"], [100, 3, 1, "", "is_deficient"], [100, 3, 1, "", "is_mersenne_prime"], [100, 3, 1, "", "is_perfect"], [100, 3, 1, "", "mersenne_prime_exponent"], [100, 3, 1, "", "multiplicity"], [100, 3, 1, "", "perfect_power"], [100, 3, 1, "", "pollard_pm1"], [100, 3, 1, "", "pollard_rho"], [100, 3, 1, "", "primefactors"], [100, 1, 1, "", "primenu"], [100, 1, 1, "", "primeomega"], [100, 3, 1, "", "proper_divisor_count"], [100, 3, 1, "", "proper_divisors"], [100, 1, 1, "", "reduced_totient"], [100, 3, 1, "", "smoothness"], [100, 3, 1, "", "smoothness_p"], [100, 1, 1, "", "totient"], [100, 3, 1, "", "trailing"], [100, 3, 1, "", "udivisor_count"], [100, 1, 1, "", "udivisor_sigma"], [100, 3, 1, "", "udivisors"]], "sympy.ntheory.generate": [[100, 1, 1, "", "Sieve"], [100, 3, 1, "", "composite"], [100, 3, 1, "", "compositepi"], [100, 3, 1, "", "cycle_length"], [100, 3, 1, "", "nextprime"], [100, 3, 1, "", "prevprime"], [100, 3, 1, "", "prime"], [100, 3, 1, "", "primepi"], [100, 3, 1, "", "primerange"], [100, 3, 1, "", "primorial"], [100, 3, 1, "", "randprime"]], "sympy.ntheory.generate.Sieve": [[100, 2, 1, "", "extend"], [100, 2, 1, "", "extend_to_no"], [100, 2, 1, "", "mobiusrange"], [100, 2, 1, "", "primerange"], [100, 2, 1, "", "search"], [100, 2, 1, "", "totientrange"]], "sympy.ntheory.modular": [[100, 3, 1, "", "crt"], [100, 3, 1, "", "crt1"], [100, 3, 1, "", "crt2"], [100, 3, 1, "", "solve_congruence"], [100, 3, 1, "", "symmetric_residue"]], "sympy.ntheory.multinomial": [[100, 3, 1, "", "binomial_coefficients"], [100, 3, 1, "", "binomial_coefficients_list"], [100, 3, 1, "", "multinomial_coefficients"], [100, 3, 1, "", "multinomial_coefficients_iterator"]], "sympy.ntheory.partitions_": [[100, 3, 1, "", "npartitions"]], "sympy.ntheory.primetest": [[100, 3, 1, "", "is_euler_pseudoprime"], [100, 3, 1, "", "is_extra_strong_lucas_prp"], [100, 3, 1, "", "is_gaussian_prime"], [100, 3, 1, "", "is_lucas_prp"], [100, 3, 1, "", "is_square"], [100, 3, 1, "", "is_strong_lucas_prp"], [100, 3, 1, "", "isprime"], [100, 3, 1, "", "mr"]], "sympy.ntheory.qs": [[100, 3, 1, "", "qs"]], "sympy.ntheory.residue_ntheory": [[100, 3, 1, "", "discrete_log"], [100, 3, 1, "", "is_nthpow_residue"], [100, 3, 1, "", "is_primitive_root"], [100, 3, 1, "", "is_quad_residue"], [100, 3, 1, "", "jacobi_symbol"], [100, 3, 1, "", "legendre_symbol"], [100, 3, 1, "", "n_order"], [100, 3, 1, "", "nthroot_mod"], [100, 3, 1, "", "primitive_root"], [100, 3, 1, "", "quadratic_residues"], [100, 3, 1, "", "sqrt_mod"], [100, 3, 1, "", "sqrt_mod_iter"]], "sympy.parsing.latex": [[102, 1, 1, "", "LaTeXParsingError"], [102, 3, 1, "", "parse_latex"]], "sympy.parsing.mathematica": [[102, 3, 1, "", "parse_mathematica"]], "sympy.parsing.maxima": [[102, 3, 1, "", "parse_maxima"]], "sympy.parsing": [[102, 0, 0, "-", "sym_expr"]], "sympy.parsing.sym_expr": [[102, 1, 1, "", "SymPyExpression"]], "sympy.parsing.sym_expr.SymPyExpression": [[102, 2, 1, "", "convert_to_c"], [102, 2, 1, "", "convert_to_expr"], [102, 2, 1, "", "convert_to_fortran"], [102, 2, 1, "", "convert_to_python"], [102, 2, 1, "", "return_expr"]], "sympy.parsing.sympy_parser": [[102, 3, 1, "", "auto_number"], [102, 3, 1, "", "auto_symbol"], [102, 3, 1, "", "convert_xor"], [102, 3, 1, "", "eval_expr"], [102, 3, 1, "", "factorial_notation"], [102, 3, 1, "", "function_exponentiation"], [102, 3, 1, "", "implicit_application"], [102, 3, 1, "", "implicit_multiplication"], [102, 3, 1, "", "implicit_multiplication_application"], [102, 3, 1, "", "lambda_notation"], [102, 3, 1, "", "parse_expr"], [102, 3, 1, "", "rationalize"], [102, 3, 1, "", "repeated_decimals"], [102, 3, 1, "", "split_symbols"], [102, 3, 1, "", "split_symbols_custom"], [102, 6, 1, "", "standard_transformations"], [102, 3, 1, "", "stringify_expr"]], "sympy.physics.continuum_mechanics": [[103, 0, 0, "-", "beam"], [106, 0, 0, "-", "truss"]], "sympy.physics.continuum_mechanics.beam": [[103, 1, 1, "", "Beam"], [103, 1, 1, "", "Beam3D"]], "sympy.physics.continuum_mechanics.beam.Beam": [[103, 4, 1, "", "applied_loads"], [103, 2, 1, "", "apply_load"], [103, 2, 1, "", "apply_support"], [103, 4, 1, "", "area"], [103, 2, 1, "", "bending_moment"], [103, 4, 1, "", "boundary_conditions"], [103, 4, 1, "", "cross_section"], [103, 2, 1, "", "deflection"], [103, 2, 1, "", "draw"], [103, 4, 1, "", "elastic_modulus"], [103, 4, 1, "", "ild_moment"], [103, 4, 1, "", "ild_reactions"], [103, 4, 1, "", "ild_shear"], [103, 2, 1, "", "join"], [103, 4, 1, "", "length"], [103, 4, 1, "", "load"], [103, 2, 1, "", "max_bmoment"], [103, 2, 1, "", "max_deflection"], [103, 2, 1, "", "max_shear_force"], [103, 2, 1, "", "plot_bending_moment"], [103, 2, 1, "", "plot_deflection"], [103, 2, 1, "", "plot_ild_moment"], [103, 2, 1, "", "plot_ild_reactions"], [103, 2, 1, "", "plot_ild_shear"], [103, 2, 1, "", "plot_loading_results"], [103, 2, 1, "", "plot_shear_force"], [103, 2, 1, "", "plot_shear_stress"], [103, 2, 1, "", "plot_slope"], [103, 2, 1, "", "point_cflexure"], [103, 4, 1, "", "reaction_loads"], [103, 2, 1, "", "remove_load"], [103, 4, 1, "", "second_moment"], [103, 2, 1, "", "shear_force"], [103, 2, 1, "", "shear_stress"], [103, 2, 1, "", "slope"], [103, 2, 1, "", "solve_for_ild_moment"], [103, 2, 1, "", "solve_for_ild_reactions"], [103, 2, 1, "", "solve_for_ild_shear"], [103, 2, 1, "", "solve_for_reaction_loads"], [103, 4, 1, "", "variable"]], "sympy.physics.continuum_mechanics.beam.Beam3D": [[103, 2, 1, "", "angular_deflection"], [103, 2, 1, "", "apply_load"], [103, 2, 1, "", "apply_moment_load"], [103, 4, 1, "", "area"], [103, 2, 1, "", "axial_force"], [103, 2, 1, "", "axial_stress"], [103, 2, 1, "", "bending_moment"], [103, 4, 1, "", "boundary_conditions"], [103, 2, 1, "", "deflection"], [103, 4, 1, "", "load_vector"], [103, 2, 1, "", "max_bending_moment"], [103, 2, 1, "", "max_bmoment"], [103, 2, 1, "", "max_deflection"], [103, 2, 1, "", "max_shear_force"], [103, 4, 1, "", "moment_load_vector"], [103, 2, 1, "", "plot_bending_moment"], [103, 2, 1, "", "plot_deflection"], [103, 2, 1, "", "plot_loading_results"], [103, 2, 1, "", "plot_shear_force"], [103, 2, 1, "", "plot_shear_stress"], [103, 2, 1, "", "plot_slope"], [103, 2, 1, "", "polar_moment"], [103, 4, 1, "", "second_moment"], [103, 2, 1, "", "shear_force"], [103, 4, 1, "", "shear_modulus"], [103, 2, 1, "", "shear_stress"], [103, 2, 1, "", "slope"], [103, 2, 1, "", "solve_for_reaction_loads"], [103, 2, 1, "", "solve_for_torsion"], [103, 2, 1, "", "torsional_moment"]], "sympy.physics.continuum_mechanics.truss": [[106, 1, 1, "", "Truss"]], "sympy.physics.continuum_mechanics.truss.Truss": [[106, 2, 1, "", "add_member"], [106, 2, 1, "", "add_node"], [106, 2, 1, "", "apply_load"], [106, 2, 1, "", "apply_support"], [106, 2, 1, "", "change_member_label"], [106, 2, 1, "", "change_node_label"], [106, 4, 1, "", "internal_forces"], [106, 4, 1, "", "loads"], [106, 4, 1, "", "member_labels"], [106, 4, 1, "", "members"], [106, 4, 1, "", "node_labels"], [106, 4, 1, "", "node_positions"], [106, 4, 1, "", "nodes"], [106, 4, 1, "", "reaction_loads"], [106, 2, 1, "", "remove_load"], [106, 2, 1, "", "remove_member"], [106, 2, 1, "", "remove_node"], [106, 2, 1, "", "remove_support"], [106, 2, 1, "", "solve"], [106, 4, 1, "", "supports"]], "sympy.physics": [[109, 0, 0, "-", "control"], [112, 0, 0, "-", "hydrogen"], [113, 0, 0, "-", "matrices"], [134, 0, 0, "-", "mechanics"], [149, 0, 0, "-", "paulialgebra"], [150, 0, 0, "-", "qho_1d"], [174, 0, 0, "-", "secondquant"], [175, 0, 0, "-", "sho"], [191, 0, 0, "-", "vector"], [194, 0, 0, "-", "wigner"]], "sympy.physics.control.control_plots": [[108, 2, 1, "", "bode_magnitude_numerical_data"], [108, 2, 1, "", "bode_magnitude_plot"], [108, 2, 1, "", "bode_phase_numerical_data"], [108, 2, 1, "", "bode_phase_plot"], [108, 2, 1, "", "bode_plot"], [108, 2, 1, "", "impulse_response_numerical_data"], [108, 2, 1, "", "impulse_response_plot"], [108, 2, 1, "", "pole_zero_numerical_data"], [108, 2, 1, "", "pole_zero_plot"], [108, 2, 1, "", "ramp_response_numerical_data"], [108, 2, 1, "", "ramp_response_plot"], [108, 2, 1, "", "step_response_numerical_data"], [108, 2, 1, "", "step_response_plot"]], "sympy.physics.control": [[110, 0, 0, "-", "lti"]], "sympy.physics.control.lti": [[110, 1, 1, "", "Feedback"], [110, 1, 1, "", "MIMOFeedback"], [110, 1, 1, "", "MIMOParallel"], [110, 1, 1, "", "MIMOSeries"], [110, 1, 1, "", "Parallel"], [110, 1, 1, "", "Series"], [110, 1, 1, "", "TransferFunction"], [110, 1, 1, "", "TransferFunctionMatrix"]], "sympy.physics.control.lti.Feedback": [[110, 2, 1, "", "doit"], [110, 4, 1, "", "sensitivity"], [110, 4, 1, "", "sign"], [110, 4, 1, "", "sys1"], [110, 4, 1, "", "sys2"], [110, 4, 1, "", "var"]], "sympy.physics.control.lti.MIMOFeedback": [[110, 2, 1, "", "doit"], [110, 4, 1, "", "sensitivity"], [110, 4, 1, "", "sign"], [110, 4, 1, "", "sys1"], [110, 4, 1, "", "sys2"], [110, 4, 1, "", "var"]], "sympy.physics.control.lti.MIMOParallel": [[110, 2, 1, "", "doit"], [110, 4, 1, "", "num_inputs"], [110, 4, 1, "", "num_outputs"], [110, 4, 1, "", "shape"], [110, 4, 1, "", "var"]], "sympy.physics.control.lti.MIMOSeries": [[110, 2, 1, "", "doit"], [110, 4, 1, "", "num_inputs"], [110, 4, 1, "", "num_outputs"], [110, 4, 1, "", "shape"], [110, 4, 1, "", "var"]], "sympy.physics.control.lti.Parallel": [[110, 2, 1, "", "doit"], [110, 4, 1, "", "is_biproper"], [110, 4, 1, "", "is_proper"], [110, 4, 1, "", "is_strictly_proper"], [110, 2, 1, "", "to_expr"], [110, 4, 1, "", "var"]], "sympy.physics.control.lti.Series": [[110, 2, 1, "", "doit"], [110, 4, 1, "", "is_biproper"], [110, 4, 1, "", "is_proper"], [110, 4, 1, "", "is_strictly_proper"], [110, 2, 1, "", "to_expr"], [110, 4, 1, "", "var"]], "sympy.physics.control.lti.TransferFunction": [[110, 2, 1, "", "dc_gain"], [110, 4, 1, "", "den"], [110, 2, 1, "", "expand"], [110, 2, 1, "", "from_rational_expression"], [110, 4, 1, "", "is_biproper"], [110, 4, 1, "", "is_proper"], [110, 2, 1, "", "is_stable"], [110, 4, 1, "", "is_strictly_proper"], [110, 4, 1, "", "num"], [110, 2, 1, "", "poles"], [110, 2, 1, "", "to_expr"], [110, 4, 1, "", "var"], [110, 2, 1, "", "zeros"]], "sympy.physics.control.lti.TransferFunctionMatrix": [[110, 2, 1, "", "elem_poles"], [110, 2, 1, "", "elem_zeros"], [110, 2, 1, "", "expand"], [110, 2, 1, "", "from_Matrix"], [110, 4, 1, "", "num_inputs"], [110, 4, 1, "", "num_outputs"], [110, 4, 1, "", "shape"], [110, 2, 1, "", "transpose"], [110, 4, 1, "", "var"]], "sympy.physics.hep": [[111, 0, 0, "-", "gamma_matrices"]], "sympy.physics.hep.gamma_matrices": [[111, 3, 1, "", "extract_type_tens"], [111, 3, 1, "", "gamma_trace"], [111, 3, 1, "", "kahane_simplify"], [111, 3, 1, "", "simplify_gpgp"]], "sympy.physics.hydrogen": [[112, 3, 1, "", "E_nl"], [112, 3, 1, "", "E_nl_dirac"], [112, 3, 1, "", "Psi_nlm"], [112, 3, 1, "", "R_nl"]], "sympy.physics.matrices": [[113, 3, 1, "", "mdft"], [113, 3, 1, "", "mgamma"], [113, 3, 1, "", "msigma"], [113, 3, 1, "", "pat_matrix"]], "sympy.physics.mechanics": [[115, 0, 0, "-", "body"], [116, 3, 1, "", "find_dynamicsymbols"], [118, 0, 0, "-", "joint"], [118, 0, 0, "-", "jointsmethod"], [119, 0, 0, "-", "kane"], [119, 0, 0, "-", "lagrange"], [120, 0, 0, "-", "linearize"], [116, 3, 1, "", "msubs"], [121, 0, 0, "-", "particle"], [121, 0, 0, "-", "rigidbody"], [123, 0, 0, "-", "system"]], "sympy.physics.mechanics.body": [[115, 1, 1, "", "Body"]], "sympy.physics.mechanics.body.Body": [[115, 2, 1, "", "ang_vel_in"], [115, 2, 1, "", "apply_force"], [115, 2, 1, "", "apply_torque"], [115, 2, 1, "", "clear_loads"], [115, 2, 1, "", "dcm"], [115, 4, 1, "", "inertia"], [115, 2, 1, "", "kinetic_energy"], [115, 2, 1, "", "masscenter_vel"], [115, 2, 1, "", "parallel_axis"], [115, 2, 1, "", "remove_load"], [115, 4, 1, "", "x"], [115, 4, 1, "", "y"], [115, 4, 1, "", "z"]], "sympy.physics.mechanics.functions": [[121, 3, 1, "", "Lagrangian"], [121, 3, 1, "", "angular_momentum"], [121, 3, 1, "", "inertia"], [121, 3, 1, "", "inertia_of_point_mass"], [121, 3, 1, "", "kinetic_energy"], [121, 3, 1, "", "linear_momentum"], [121, 3, 1, "", "potential_energy"]], "sympy.physics.mechanics.joint": [[118, 1, 1, "", "CylindricalJoint"], [118, 1, 1, "", "Joint"], [118, 1, 1, "", "PinJoint"], [118, 1, 1, "", "PlanarJoint"], [118, 1, 1, "", "PrismaticJoint"], [118, 1, 1, "", "SphericalJoint"], [118, 1, 1, "", "WeldJoint"]], "sympy.physics.mechanics.joint.CylindricalJoint": [[118, 4, 1, "", "joint_axis"], [118, 4, 1, "", "rotation_coordinate"], [118, 4, 1, "", "rotation_speed"], [118, 4, 1, "", "translation_coordinate"], [118, 4, 1, "", "translation_speed"]], "sympy.physics.mechanics.joint.Joint": [[118, 4, 1, "", "child"], [118, 4, 1, "", "child_axis"], [118, 4, 1, "", "child_point"], [118, 4, 1, "", "coordinates"], [118, 4, 1, "", "kdes"], [118, 4, 1, "", "name"], [118, 4, 1, "", "parent"], [118, 4, 1, "", "parent_axis"], [118, 4, 1, "", "parent_point"], [118, 4, 1, "", "speeds"]], "sympy.physics.mechanics.joint.PinJoint": [[118, 4, 1, "", "joint_axis"]], "sympy.physics.mechanics.joint.PlanarJoint": [[118, 4, 1, "", "planar_coordinates"], [118, 4, 1, "", "planar_speeds"], [118, 4, 1, "", "planar_vectors"], [118, 4, 1, "", "rotation_axis"], [118, 4, 1, "", "rotation_coordinate"], [118, 4, 1, "", "rotation_speed"]], "sympy.physics.mechanics.joint.PrismaticJoint": [[118, 4, 1, "", "joint_axis"]], "sympy.physics.mechanics.jointsmethod": [[118, 1, 1, "", "JointsMethod"]], "sympy.physics.mechanics.jointsmethod.JointsMethod": [[118, 4, 1, "", "bodies"], [118, 4, 1, "", "forcing"], [118, 4, 1, "", "forcing_full"], [118, 2, 1, "", "form_eoms"], [118, 4, 1, "", "kdes"], [118, 4, 1, "", "loads"], [118, 4, 1, "", "mass_matrix"], [118, 4, 1, "", "mass_matrix_full"], [118, 4, 1, "", "method"], [118, 4, 1, "", "q"], [118, 2, 1, "", "rhs"], [118, 4, 1, "", "u"]], "sympy.physics.mechanics.kane": [[119, 1, 1, "", "KanesMethod"]], "sympy.physics.mechanics.kane.KanesMethod": [[119, 4, 1, "", "auxiliary_eqs"], [119, 4, 1, "", "forcing"], [119, 4, 1, "", "forcing_full"], [119, 4, 1, "", "forcing_kin"], [119, 2, 1, "", "kanes_equations"], [119, 2, 1, "", "kindiffdict"], [119, 2, 1, "", "linearize"], [119, 4, 1, "", "mass_matrix"], [119, 4, 1, "", "mass_matrix_full"], [119, 4, 1, "", "mass_matrix_kin"], [119, 2, 1, "", "rhs"], [119, 2, 1, "", "to_linearizer"]], "sympy.physics.mechanics.lagrange": [[119, 1, 1, "", "LagrangesMethod"]], "sympy.physics.mechanics.lagrange.LagrangesMethod": [[119, 4, 1, "", "forcing"], [119, 4, 1, "", "forcing_full"], [119, 2, 1, "", "form_lagranges_equations"], [119, 2, 1, "", "linearize"], [119, 4, 1, "", "mass_matrix"], [119, 4, 1, "", "mass_matrix_full"], [119, 2, 1, "", "rhs"], [119, 2, 1, "", "solve_multipliers"], [119, 2, 1, "", "to_linearizer"]], "sympy.physics.mechanics.linearize": [[120, 1, 1, "", "Linearizer"]], "sympy.physics.mechanics.linearize.Linearizer": [[120, 2, 1, "", "linearize"]], "sympy.physics.mechanics.particle": [[121, 1, 1, "", "Particle"]], "sympy.physics.mechanics.particle.Particle": [[121, 2, 1, "", "angular_momentum"], [121, 2, 1, "", "kinetic_energy"], [121, 2, 1, "", "linear_momentum"], [121, 4, 1, "", "mass"], [121, 2, 1, "", "parallel_axis"], [121, 4, 1, "", "point"], [121, 4, 1, "", "potential_energy"]], "sympy.physics.mechanics.rigidbody": [[121, 1, 1, "", "RigidBody"]], "sympy.physics.mechanics.rigidbody.RigidBody": [[121, 2, 1, "", "angular_momentum"], [121, 4, 1, "", "central_inertia"], [121, 4, 1, "", "frame"], [121, 4, 1, "", "inertia"], [121, 2, 1, "", "kinetic_energy"], [121, 2, 1, "", "linear_momentum"], [121, 4, 1, "", "mass"], [121, 4, 1, "", "masscenter"], [121, 2, 1, "", "parallel_axis"], [121, 4, 1, "", "potential_energy"]], "sympy.physics.mechanics.system": [[123, 1, 1, "", "SymbolicSystem"]], "sympy.physics.mechanics.system.SymbolicSystem": [[123, 4, 1, "", "alg_con"], [123, 4, 1, "", "bodies"], [123, 4, 1, "", "comb_explicit_rhs"], [123, 4, 1, "", "comb_implicit_mat"], [123, 4, 1, "", "comb_implicit_rhs"], [123, 2, 1, "", "compute_explicit_form"], [123, 2, 1, "", "constant_symbols"], [123, 4, 1, "", "coordinates"], [123, 4, 1, "", "dyn_implicit_mat"], [123, 4, 1, "", "dyn_implicit_rhs"], [123, 2, 1, "", "dynamic_symbols"], [123, 4, 1, "", "kin_explicit_rhs"], [123, 4, 1, "", "loads"], [123, 4, 1, "", "speeds"], [123, 4, 1, "", "states"]], "sympy.physics.optics": [[143, 0, 0, "-", "gaussopt"], [145, 0, 0, "-", "medium"], [146, 0, 0, "-", "polarization"], [147, 0, 0, "-", "utils"], [148, 0, 0, "-", "waves"]], "sympy.physics.optics.gaussopt": [[143, 1, 1, "", "BeamParameter"], [143, 1, 1, "", "CurvedMirror"], [143, 1, 1, "", "CurvedRefraction"], [143, 1, 1, "", "FlatMirror"], [143, 1, 1, "", "FlatRefraction"], [143, 1, 1, "", "FreeSpace"], [143, 1, 1, "", "GeometricRay"], [143, 1, 1, "", "RayTransferMatrix"], [143, 1, 1, "", "ThinLens"], [143, 3, 1, "", "conjugate_gauss_beams"], [143, 3, 1, "", "gaussian_conj"], [143, 3, 1, "", "geometric_conj_ab"], [143, 3, 1, "", "geometric_conj_af"], [143, 3, 1, "", "geometric_conj_bf"], [143, 3, 1, "", "rayleigh2waist"], [143, 3, 1, "", "waist2rayleigh"]], "sympy.physics.optics.gaussopt.BeamParameter": [[143, 4, 1, "", "divergence"], [143, 4, 1, "", "gouy"], [143, 4, 1, "", "q"], [143, 4, 1, "", "radius"], [143, 4, 1, "", "w"], [143, 4, 1, "", "w_0"], [143, 4, 1, "", "waist_approximation_limit"]], "sympy.physics.optics.gaussopt.GeometricRay": [[143, 4, 1, "", "angle"], [143, 4, 1, "", "height"]], "sympy.physics.optics.gaussopt.RayTransferMatrix": [[143, 4, 1, "", "A"], [143, 4, 1, "", "B"], [143, 4, 1, "", "C"], [143, 4, 1, "", "D"]], "sympy.physics.optics.medium": [[145, 1, 1, "", "Medium"]], "sympy.physics.optics.medium.Medium": [[145, 4, 1, "", "refractive_index"], [145, 4, 1, "", "speed"]], "sympy.physics.optics.polarization": [[146, 3, 1, "", "half_wave_retarder"], [146, 3, 1, "", "jones_2_stokes"], [146, 3, 1, "", "jones_vector"], [146, 3, 1, "", "linear_polarizer"], [146, 3, 1, "", "mueller_matrix"], [146, 3, 1, "", "phase_retarder"], [146, 3, 1, "", "polarizing_beam_splitter"], [146, 3, 1, "", "quarter_wave_retarder"], [146, 3, 1, "", "reflective_filter"], [146, 3, 1, "", "stokes_vector"], [146, 3, 1, "", "transmissive_filter"]], "sympy.physics.optics.utils": [[147, 3, 1, "", "brewster_angle"], [147, 3, 1, "", "critical_angle"], [147, 3, 1, "", "deviation"], [147, 3, 1, "", "fresnel_coefficients"], [147, 3, 1, "", "hyperfocal_distance"], [147, 3, 1, "", "lens_formula"], [147, 3, 1, "", "lens_makers_formula"], [147, 3, 1, "", "mirror_formula"], [147, 3, 1, "", "refraction_angle"], [147, 3, 1, "", "transverse_magnification"]], "sympy.physics.optics.waves": [[148, 1, 1, "", "TWave"]], "sympy.physics.optics.waves.TWave": [[148, 4, 1, "", "amplitude"], [148, 4, 1, "", "angular_velocity"], [148, 4, 1, "", "frequency"], [148, 4, 1, "", "n"], [148, 4, 1, "", "phase"], [148, 4, 1, "", "speed"], [148, 4, 1, "", "time_period"], [148, 4, 1, "", "wavelength"], [148, 4, 1, "", "wavenumber"]], "sympy.physics.paulialgebra": [[149, 3, 1, "", "evaluate_pauli_product"]], "sympy.physics.qho_1d": [[150, 3, 1, "", "E_n"], [150, 3, 1, "", "coherent_state"], [150, 3, 1, "", "psi_n"]], "sympy.physics.quantum": [[151, 0, 0, "-", "anticommutator"], [152, 0, 0, "-", "cartesian"], [153, 0, 0, "-", "cg"], [154, 0, 0, "-", "circuitplot"], [155, 0, 0, "-", "commutator"], [156, 0, 0, "-", "constants"], [157, 0, 0, "-", "dagger"], [158, 0, 0, "-", "gate"], [159, 0, 0, "-", "grover"], [160, 0, 0, "-", "hilbert"], [162, 0, 0, "-", "innerproduct"], [163, 0, 0, "-", "operator"], [164, 0, 0, "-", "operatorset"], [165, 0, 0, "-", "piab"], [166, 0, 0, "-", "qapply"], [167, 0, 0, "-", "qft"], [168, 0, 0, "-", "qubit"], [169, 0, 0, "-", "represent"], [170, 0, 0, "-", "shor"], [171, 0, 0, "-", "spin"], [172, 0, 0, "-", "state"], [173, 0, 0, "-", "tensorproduct"]], "sympy.physics.quantum.anticommutator": [[151, 1, 1, "", "AntiCommutator"]], "sympy.physics.quantum.anticommutator.AntiCommutator": [[151, 2, 1, "", "doit"]], "sympy.physics.quantum.cartesian": [[152, 1, 1, "", "PositionBra3D"], [152, 1, 1, "", "PositionKet3D"], [152, 1, 1, "", "PositionState3D"], [152, 1, 1, "", "PxBra"], [152, 1, 1, "", "PxKet"], [152, 1, 1, "", "PxOp"], [152, 1, 1, "", "XBra"], [152, 1, 1, "", "XKet"], [152, 1, 1, "", "XOp"], [152, 1, 1, "", "YOp"], [152, 1, 1, "", "ZOp"]], "sympy.physics.quantum.cartesian.PositionState3D": [[152, 4, 1, "", "position_x"], [152, 4, 1, "", "position_y"], [152, 4, 1, "", "position_z"]], "sympy.physics.quantum.cartesian.PxBra": [[152, 4, 1, "", "momentum"]], "sympy.physics.quantum.cartesian.PxKet": [[152, 4, 1, "", "momentum"]], "sympy.physics.quantum.cartesian.XBra": [[152, 4, 1, "", "position"]], "sympy.physics.quantum.cartesian.XKet": [[152, 4, 1, "", "position"]], "sympy.physics.quantum.cg": [[153, 1, 1, "", "CG"], [153, 1, 1, "", "Wigner3j"], [153, 1, 1, "", "Wigner6j"], [153, 1, 1, "", "Wigner9j"], [153, 3, 1, "", "cg_simp"]], "sympy.physics.quantum.circuitplot": [[154, 1, 1, "", "CircuitPlot"], [154, 3, 1, "", "CreateCGate"], [154, 1, 1, "", "Mx"], [154, 1, 1, "", "Mz"], [154, 3, 1, "", "circuit_plot"], [154, 3, 1, "", "labeller"]], "sympy.physics.quantum.circuitplot.CircuitPlot": [[154, 2, 1, "", "control_line"], [154, 2, 1, "", "control_point"], [154, 2, 1, "", "not_point"], [154, 2, 1, "", "one_qubit_box"], [154, 2, 1, "", "swap_point"], [154, 2, 1, "", "two_qubit_box"], [154, 2, 1, "", "update"]], "sympy.physics.quantum.commutator": [[155, 1, 1, "", "Commutator"]], "sympy.physics.quantum.commutator.Commutator": [[155, 2, 1, "", "doit"]], "sympy.physics.quantum.constants": [[156, 1, 1, "", "HBar"]], "sympy.physics.quantum.dagger": [[157, 1, 1, "", "Dagger"]], "sympy.physics.quantum.gate": [[158, 1, 1, "", "CGate"], [158, 1, 1, "", "CGateS"], [158, 5, 1, "", "CNOT"], [158, 1, 1, "", "CNotGate"], [158, 1, 1, "", "Gate"], [158, 5, 1, "", "H"], [158, 1, 1, "", "HadamardGate"], [158, 1, 1, "", "IdentityGate"], [158, 1, 1, "", "OneQubitGate"], [158, 5, 1, "", "Phase"], [158, 1, 1, "", "PhaseGate"], [158, 5, 1, "", "S"], [158, 5, 1, "", "SWAP"], [158, 1, 1, "", "SwapGate"], [158, 5, 1, "", "T"], [158, 1, 1, "", "TGate"], [158, 1, 1, "", "TwoQubitGate"], [158, 1, 1, "", "UGate"], [158, 5, 1, "", "X"], [158, 1, 1, "", "XGate"], [158, 5, 1, "", "Y"], [158, 1, 1, "", "YGate"], [158, 5, 1, "", "Z"], [158, 1, 1, "", "ZGate"], [158, 3, 1, "", "gate_simp"], [158, 3, 1, "", "gate_sort"], [158, 3, 1, "", "normalized"], [158, 3, 1, "", "random_circuit"]], "sympy.physics.quantum.gate.CGate": [[158, 4, 1, "", "controls"], [158, 2, 1, "", "decompose"], [158, 2, 1, "", "eval_controls"], [158, 4, 1, "", "gate"], [158, 4, 1, "", "min_qubits"], [158, 4, 1, "", "nqubits"], [158, 2, 1, "", "plot_gate"], [158, 4, 1, "", "targets"]], "sympy.physics.quantum.gate.CNotGate": [[158, 4, 1, "", "controls"], [158, 4, 1, "", "gate"], [158, 4, 1, "", "min_qubits"], [158, 4, 1, "", "targets"]], "sympy.physics.quantum.gate.Gate": [[158, 2, 1, "", "get_target_matrix"], [158, 4, 1, "", "min_qubits"], [158, 4, 1, "", "nqubits"], [158, 4, 1, "", "targets"]], "sympy.physics.quantum.gate.SwapGate": [[158, 2, 1, "", "decompose"]], "sympy.physics.quantum.gate.UGate": [[158, 2, 1, "", "get_target_matrix"], [158, 4, 1, "", "targets"]], "sympy.physics.quantum.grover": [[159, 1, 1, "", "OracleGate"], [159, 1, 1, "", "WGate"], [159, 3, 1, "", "apply_grover"], [159, 3, 1, "", "grover_iteration"], [159, 3, 1, "", "superposition_basis"]], "sympy.physics.quantum.grover.OracleGate": [[159, 4, 1, "", "search_function"], [159, 4, 1, "", "targets"]], "sympy.physics.quantum.hilbert": [[160, 1, 1, "", "ComplexSpace"], [160, 1, 1, "", "DirectSumHilbertSpace"], [160, 1, 1, "", "FockSpace"], [160, 1, 1, "", "HilbertSpace"], [160, 1, 1, "", "L2"], [160, 1, 1, "", "TensorPowerHilbertSpace"], [160, 1, 1, "", "TensorProductHilbertSpace"]], "sympy.physics.quantum.hilbert.DirectSumHilbertSpace": [[160, 2, 1, "", "eval"], [160, 4, 1, "", "spaces"]], "sympy.physics.quantum.hilbert.HilbertSpace": [[160, 4, 1, "", "dimension"]], "sympy.physics.quantum.hilbert.TensorProductHilbertSpace": [[160, 2, 1, "", "eval"], [160, 4, 1, "", "spaces"]], "sympy.physics.quantum.innerproduct": [[162, 1, 1, "", "InnerProduct"]], "sympy.physics.quantum.operator": [[163, 1, 1, "", "DifferentialOperator"], [163, 1, 1, "", "HermitianOperator"], [163, 1, 1, "", "IdentityOperator"], [163, 1, 1, "", "Operator"], [163, 1, 1, "", "OuterProduct"], [163, 1, 1, "", "UnitaryOperator"]], "sympy.physics.quantum.operator.DifferentialOperator": [[163, 4, 1, "", "expr"], [163, 4, 1, "", "free_symbols"], [163, 4, 1, "", "function"], [163, 4, 1, "", "variables"]], "sympy.physics.quantum.operator.OuterProduct": [[163, 4, 1, "", "bra"], [163, 4, 1, "", "ket"]], "sympy.physics.quantum.operatorset": [[164, 3, 1, "", "operators_to_state"], [164, 3, 1, "", "state_to_operators"]], "sympy.physics.quantum.piab": [[165, 1, 1, "", "PIABBra"], [165, 1, 1, "", "PIABHamiltonian"], [165, 1, 1, "", "PIABKet"]], "sympy.physics.quantum.qapply": [[166, 3, 1, "", "qapply"]], "sympy.physics.quantum.qft": [[167, 1, 1, "", "IQFT"], [167, 1, 1, "", "QFT"], [167, 5, 1, "", "Rk"], [167, 1, 1, "", "RkGate"]], "sympy.physics.quantum.qft.IQFT": [[167, 2, 1, "", "decompose"]], "sympy.physics.quantum.qft.QFT": [[167, 2, 1, "", "decompose"]], "sympy.physics.quantum.qubit": [[168, 1, 1, "", "IntQubit"], [168, 1, 1, "", "IntQubitBra"], [168, 1, 1, "", "Qubit"], [168, 1, 1, "", "QubitBra"], [168, 3, 1, "", "matrix_to_density"], [168, 3, 1, "", "matrix_to_qubit"], [168, 3, 1, "", "measure_all"], [168, 3, 1, "", "measure_all_oneshot"], [168, 3, 1, "", "measure_partial"], [168, 3, 1, "", "measure_partial_oneshot"], [168, 3, 1, "", "qubit_to_matrix"]], "sympy.physics.quantum.represent": [[169, 3, 1, "", "enumerate_states"], [169, 3, 1, "", "get_basis"], [169, 3, 1, "", "integrate_result"], [169, 3, 1, "", "rep_expectation"], [169, 3, 1, "", "rep_innerproduct"], [169, 3, 1, "", "represent"]], "sympy.physics.quantum.shor": [[170, 1, 1, "", "CMod"], [170, 3, 1, "", "period_find"], [170, 3, 1, "", "shor"]], "sympy.physics.quantum.shor.CMod": [[170, 4, 1, "", "N"], [170, 4, 1, "", "a"], [170, 4, 1, "", "t"]], "sympy.physics.quantum.spin": [[171, 1, 1, "", "J2Op"], [171, 1, 1, "", "JxBra"], [171, 1, 1, "", "JxBraCoupled"], [171, 1, 1, "", "JxKet"], [171, 1, 1, "", "JxKetCoupled"], [171, 1, 1, "", "JyBra"], [171, 1, 1, "", "JyBraCoupled"], [171, 1, 1, "", "JyKet"], [171, 1, 1, "", "JyKetCoupled"], [171, 1, 1, "", "JzBra"], [171, 1, 1, "", "JzBraCoupled"], [171, 1, 1, "", "JzKet"], [171, 1, 1, "", "JzKetCoupled"], [171, 1, 1, "", "JzOp"], [171, 1, 1, "", "Rotation"], [171, 1, 1, "", "WignerD"], [171, 3, 1, "", "couple"], [171, 3, 1, "", "uncouple"]], "sympy.physics.quantum.spin.Rotation": [[171, 2, 1, "", "D"], [171, 2, 1, "", "d"]], "sympy.physics.quantum.state": [[172, 1, 1, "", "Bra"], [172, 1, 1, "", "BraBase"], [172, 1, 1, "", "Ket"], [172, 1, 1, "", "KetBase"], [172, 1, 1, "", "OrthogonalBra"], [172, 1, 1, "", "OrthogonalKet"], [172, 1, 1, "", "OrthogonalState"], [172, 1, 1, "", "State"], [172, 1, 1, "", "StateBase"], [172, 1, 1, "", "TimeDepBra"], [172, 1, 1, "", "TimeDepKet"], [172, 1, 1, "", "TimeDepState"], [172, 1, 1, "", "Wavefunction"]], "sympy.physics.quantum.state.StateBase": [[172, 4, 1, "", "dual"], [172, 2, 1, "", "dual_class"], [172, 4, 1, "", "operators"]], "sympy.physics.quantum.state.TimeDepState": [[172, 4, 1, "", "label"], [172, 4, 1, "", "time"]], "sympy.physics.quantum.state.Wavefunction": [[172, 4, 1, "", "expr"], [172, 4, 1, "", "is_commutative"], [172, 4, 1, "", "is_normalized"], [172, 4, 1, "", "limits"], [172, 4, 1, "", "norm"], [172, 2, 1, "", "normalize"], [172, 2, 1, "", "prob"], [172, 4, 1, "", "variables"]], "sympy.physics.quantum.tensorproduct": [[173, 1, 1, "", "TensorProduct"], [173, 3, 1, "", "tensor_product_simp"]], "sympy.physics.secondquant": [[174, 1, 1, "", "AnnihilateBoson"], [174, 1, 1, "", "AnnihilateFermion"], [174, 1, 1, "", "AntiSymmetricTensor"], [174, 5, 1, "", "B"], [174, 5, 1, "", "BBra"], [174, 5, 1, "", "BKet"], [174, 5, 1, "", "Bd"], [174, 1, 1, "", "BosonicBasis"], [174, 1, 1, "", "Commutator"], [174, 1, 1, "", "CreateBoson"], [174, 1, 1, "", "CreateFermion"], [174, 1, 1, "", "Dagger"], [174, 5, 1, "", "F"], [174, 5, 1, "", "FBra"], [174, 5, 1, "", "FKet"], [174, 5, 1, "", "Fd"], [174, 1, 1, "", "FixedBosonicBasis"], [174, 1, 1, "", "FockState"], [174, 1, 1, "", "FockStateBosonBra"], [174, 1, 1, "", "FockStateBosonKet"], [174, 1, 1, "", "FockStateBra"], [174, 1, 1, "", "FockStateFermionBra"], [174, 1, 1, "", "FockStateFermionKet"], [174, 1, 1, "", "FockStateKet"], [174, 1, 1, "", "InnerProduct"], [174, 1, 1, "", "KroneckerDelta"], [174, 1, 1, "", "NO"], [174, 1, 1, "", "PermutationOperator"], [174, 1, 1, "", "VarBosonicBasis"], [174, 3, 1, "", "apply_operators"], [174, 3, 1, "", "contraction"], [174, 3, 1, "", "evaluate_deltas"], [174, 3, 1, "", "matrix_rep"], [174, 3, 1, "", "simplify_index_permutations"], [174, 3, 1, "", "substitute_dummies"], [174, 3, 1, "", "wicks"]], "sympy.physics.secondquant.AnnihilateBoson": [[174, 2, 1, "", "apply_operator"]], "sympy.physics.secondquant.AnnihilateFermion": [[174, 2, 1, "", "apply_operator"], [174, 4, 1, "", "is_only_q_annihilator"], [174, 4, 1, "", "is_only_q_creator"], [174, 4, 1, "", "is_q_annihilator"], [174, 4, 1, "", "is_q_creator"]], "sympy.physics.secondquant.AntiSymmetricTensor": [[174, 4, 1, "", "lower"], [174, 4, 1, "", "symbol"], [174, 4, 1, "", "upper"]], "sympy.physics.secondquant.Commutator": [[174, 2, 1, "", "doit"], [174, 2, 1, "", "eval"]], "sympy.physics.secondquant.CreateBoson": [[174, 2, 1, "", "apply_operator"]], "sympy.physics.secondquant.CreateFermion": [[174, 2, 1, "", "apply_operator"], [174, 4, 1, "", "is_only_q_annihilator"], [174, 4, 1, "", "is_only_q_creator"], [174, 4, 1, "", "is_q_annihilator"], [174, 4, 1, "", "is_q_creator"]], "sympy.physics.secondquant.Dagger": [[174, 2, 1, "", "eval"]], "sympy.physics.secondquant.FixedBosonicBasis": [[174, 2, 1, "", "index"], [174, 2, 1, "", "state"]], "sympy.physics.secondquant.InnerProduct": [[174, 4, 1, "", "bra"], [174, 4, 1, "", "ket"]], "sympy.physics.secondquant.KroneckerDelta": [[174, 2, 1, "", "eval"], [174, 4, 1, "", "indices_contain_equal_information"], [174, 4, 1, "", "is_above_fermi"], [174, 4, 1, "", "is_below_fermi"], [174, 4, 1, "", "is_only_above_fermi"], [174, 4, 1, "", "is_only_below_fermi"], [174, 4, 1, "", "killable_index"], [174, 4, 1, "", "preferred_index"]], "sympy.physics.secondquant.NO": [[174, 2, 1, "", "doit"], [174, 2, 1, "", "get_subNO"], [174, 4, 1, "", "has_q_annihilators"], [174, 4, 1, "", "has_q_creators"], [174, 2, 1, "", "iter_q_annihilators"], [174, 2, 1, "", "iter_q_creators"]], "sympy.physics.secondquant.PermutationOperator": [[174, 2, 1, "", "get_permuted"]], "sympy.physics.secondquant.VarBosonicBasis": [[174, 2, 1, "", "index"], [174, 2, 1, "", "state"]], "sympy.physics.sho": [[175, 3, 1, "", "E_nl"], [175, 3, 1, "", "R_nl"]], "sympy.physics.units": [[176, 0, 0, "-", "dimensions"], [180, 0, 0, "-", "prefixes"], [181, 0, 0, "-", "quantities"], [182, 0, 0, "-", "unitsystem"], [181, 0, 0, "-", "util"]], "sympy.physics.units.dimensions": [[176, 1, 1, "", "Dimension"], [176, 1, 1, "", "DimensionSystem"]], "sympy.physics.units.dimensions.Dimension": [[176, 2, 1, "", "has_integer_powers"]], "sympy.physics.units.dimensions.DimensionSystem": [[176, 4, 1, "", "can_transf_matrix"], [176, 4, 1, "", "dim"], [176, 2, 1, "", "dim_can_vector"], [176, 2, 1, "", "dim_vector"], [176, 4, 1, "", "inv_can_transf_matrix"], [176, 4, 1, "", "is_consistent"], [176, 2, 1, "", "is_dimensionless"], [176, 4, 1, "", "list_can_dims"], [176, 2, 1, "", "print_dim_base"]], "sympy.physics.units.prefixes": [[180, 1, 1, "", "Prefix"]], "sympy.physics.units.quantities": [[181, 1, 1, "", "Quantity"]], "sympy.physics.units.quantities.Quantity": [[181, 4, 1, "", "abbrev"], [181, 2, 1, "", "convert_to"], [181, 4, 1, "", "free_symbols"], [181, 4, 1, "", "is_prefixed"], [181, 4, 1, "", "scale_factor"], [181, 2, 1, "", "set_global_relative_scale_factor"]], "sympy.physics.units.unitsystem": [[182, 1, 1, "", "UnitSystem"]], "sympy.physics.units.unitsystem.UnitSystem": [[182, 4, 1, "", "dim"], [182, 2, 1, "", "extend"], [182, 2, 1, "", "get_units_non_prefixed"], [182, 4, 1, "", "is_consistent"]], "sympy.physics.units.util": [[181, 3, 1, "", "convert_to"]], "sympy.physics.vector.dyadic": [[184, 1, 1, "", "Dyadic"]], "sympy.physics.vector.dyadic.Dyadic": [[184, 2, 1, "", "applyfunc"], [184, 2, 1, "", "cross"], [184, 2, 1, "", "doit"], [184, 2, 1, "", "dot"], [184, 2, 1, "", "dt"], [184, 2, 1, "", "express"], [184, 4, 1, "", "func"], [184, 2, 1, "", "simplify"], [184, 2, 1, "", "subs"], [184, 2, 1, "", "to_matrix"], [184, 2, 1, "", "xreplace"]], "sympy.physics.vector": [[186, 3, 1, "", "dynamicsymbols"], [188, 0, 0, "-", "functions"], [188, 0, 0, "-", "point"]], "sympy.physics.vector.fieldfunctions": [[185, 3, 1, "", "curl"], [185, 3, 1, "", "divergence"], [185, 3, 1, "", "gradient"], [185, 3, 1, "", "is_conservative"], [185, 3, 1, "", "is_solenoidal"], [185, 3, 1, "", "scalar_potential"], [185, 3, 1, "", "scalar_potential_difference"]], "sympy.physics.vector.frame": [[184, 1, 1, "", "CoordinateSym"], [184, 1, 1, "", "ReferenceFrame"]], "sympy.physics.vector.frame.ReferenceFrame": [[184, 2, 1, "", "ang_acc_in"], [184, 2, 1, "", "ang_vel_in"], [184, 2, 1, "", "dcm"], [184, 2, 1, "", "orient"], [184, 2, 1, "", "orient_axis"], [184, 2, 1, "", "orient_body_fixed"], [184, 2, 1, "", "orient_explicit"], [184, 2, 1, "", "orient_quaternion"], [184, 2, 1, "", "orient_space_fixed"], [184, 2, 1, "", "orientnew"], [184, 2, 1, "", "partial_velocity"], [184, 2, 1, "", "set_ang_acc"], [184, 2, 1, "", "set_ang_vel"], [184, 2, 1, "", "variable_map"], [184, 4, 1, "", "x"], [184, 4, 1, "", "y"], [184, 4, 1, "", "z"]], "sympy.physics.vector.functions": [[186, 3, 1, "", "cross"], [186, 3, 1, "", "dot"], [186, 3, 1, "", "express"], [188, 3, 1, "", "get_motion_params"], [188, 3, 1, "", "kinematic_equations"], [186, 3, 1, "", "outer"], [188, 3, 1, "", "partial_velocity"], [186, 3, 1, "", "time_derivative"]], "sympy.physics.vector.point": [[188, 1, 1, "", "Point"]], "sympy.physics.vector.point.Point": [[188, 2, 1, "", "a1pt_theory"], [188, 2, 1, "", "a2pt_theory"], [188, 2, 1, "", "acc"], [188, 2, 1, "", "locatenew"], [188, 2, 1, "", "partial_velocity"], [188, 2, 1, "", "pos_from"], [188, 2, 1, "", "set_acc"], [188, 2, 1, "", "set_pos"], [188, 2, 1, "", "set_vel"], [188, 2, 1, "", "v1pt_theory"], [188, 2, 1, "", "v2pt_theory"], [188, 2, 1, "", "vel"]], "sympy.physics.vector.printing": [[189, 3, 1, "", "init_vprinting"], [189, 3, 1, "", "vlatex"], [189, 3, 1, "", "vpprint"], [189, 3, 1, "", "vprint"]], "sympy.physics.vector.vector": [[184, 1, 1, "", "Vector"]], "sympy.physics.vector.vector.Vector": [[184, 2, 1, "", "angle_between"], [184, 2, 1, "", "applyfunc"], [184, 2, 1, "", "cross"], [184, 2, 1, "", "diff"], [184, 2, 1, "", "doit"], [184, 2, 1, "", "dot"], [184, 2, 1, "", "dt"], [184, 2, 1, "", "express"], [184, 2, 1, "", "free_dynamicsymbols"], [184, 2, 1, "", "free_symbols"], [184, 4, 1, "", "func"], [184, 2, 1, "", "magnitude"], [184, 2, 1, "", "normalize"], [184, 2, 1, "", "outer"], [184, 2, 1, "", "separate"], [184, 2, 1, "", "simplify"], [184, 2, 1, "", "subs"], [184, 2, 1, "", "to_matrix"], [184, 2, 1, "", "xreplace"]], "sympy.physics.wigner": [[194, 3, 1, "", "clebsch_gordan"], [194, 3, 1, "", "dot_rot_grad_Ynm"], [194, 3, 1, "", "gaunt"], [194, 3, 1, "", "racah"], [194, 3, 1, "", "real_gaunt"], [194, 3, 1, "", "wigner_3j"], [194, 3, 1, "", "wigner_6j"], [194, 3, 1, "", "wigner_9j"], [194, 3, 1, "", "wigner_d"], [194, 3, 1, "", "wigner_d_small"]], "sympy.plotting": [[195, 0, 0, "-", "plot"], [195, 0, 0, "-", "pygletplot"]], "sympy.plotting.plot": [[195, 1, 1, "", "BaseBackend"], [195, 1, 1, "", "BaseSeries"], [195, 1, 1, "", "Line2DBaseSeries"], [195, 1, 1, "", "Line3DBaseSeries"], [195, 1, 1, "", "LineOver1DRangeSeries"], [195, 1, 1, "", "MatplotlibBackend"], [195, 1, 1, "", "Parametric2DLineSeries"], [195, 1, 1, "", "Parametric3DLineSeries"], [195, 1, 1, "", "ParametricSurfaceSeries"], [195, 1, 1, "", "Plot"], [195, 1, 1, "", "PlotGrid"], [195, 1, 1, "", "SurfaceBaseSeries"], [195, 1, 1, "", "SurfaceOver2DRangeSeries"], [195, 1, 1, "", "TextBackend"], [195, 3, 1, "", "plot"], [195, 3, 1, "", "plot3d"], [195, 3, 1, "", "plot3d_parametric_line"], [195, 3, 1, "", "plot3d_parametric_surface"], [195, 3, 1, "", "plot_parametric"]], "sympy.plotting.plot.Line2DBaseSeries": [[195, 2, 1, "", "get_data"]], "sympy.plotting.plot.LineOver1DRangeSeries": [[195, 2, 1, "", "get_points"]], "sympy.plotting.plot.MatplotlibBackend": [[195, 2, 1, "", "get_segments"], [195, 2, 1, "", "process_series"]], "sympy.plotting.plot.Parametric2DLineSeries": [[195, 2, 1, "", "get_points"]], "sympy.plotting.plot.Plot": [[195, 2, 1, "", "append"], [195, 2, 1, "", "extend"]], "sympy.plotting.plot_implicit": [[195, 1, 1, "", "ImplicitSeries"], [195, 3, 1, "", "plot_implicit"]], "sympy.plotting.textplot": [[195, 3, 1, "", "textplot"]], "sympy.polys.agca.extensions": [[196, 1, 1, "", "ExtensionElement"], [196, 1, 1, "", "MonogenicFiniteExtension"]], "sympy.polys.agca.extensions.ExtensionElement": [[196, 2, 1, "", "inverse"]], "sympy.polys.agca.extensions.MonogenicFiniteExtension": [[196, 5, 1, "", "dtype"]], "sympy.polys.agca.homomorphisms": [[196, 1, 1, "", "ModuleHomomorphism"], [196, 3, 1, "", "homomorphism"]], "sympy.polys.agca.homomorphisms.ModuleHomomorphism": [[196, 2, 1, "", "image"], [196, 2, 1, "", "is_injective"], [196, 2, 1, "", "is_isomorphism"], [196, 2, 1, "", "is_surjective"], [196, 2, 1, "", "is_zero"], [196, 2, 1, "", "kernel"], [196, 2, 1, "", "quotient_codomain"], [196, 2, 1, "", "quotient_domain"], [196, 2, 1, "", "restrict_codomain"], [196, 2, 1, "", "restrict_domain"]], "sympy.polys.agca.ideals": [[196, 1, 1, "", "Ideal"]], "sympy.polys.agca.ideals.Ideal": [[196, 2, 1, "", "contains"], [196, 2, 1, "", "depth"], [196, 2, 1, "", "height"], [196, 2, 1, "", "intersect"], [196, 2, 1, "", "is_maximal"], [196, 2, 1, "", "is_primary"], [196, 2, 1, "", "is_prime"], [196, 2, 1, "", "is_principal"], [196, 2, 1, "", "is_radical"], [196, 2, 1, "", "is_whole_ring"], [196, 2, 1, "", "is_zero"], [196, 2, 1, "", "product"], [196, 2, 1, "", "quotient"], [196, 2, 1, "", "radical"], [196, 2, 1, "", "reduce_element"], [196, 2, 1, "", "saturate"], [196, 2, 1, "", "subset"], [196, 2, 1, "", "union"]], "sympy.polys.agca.modules": [[196, 1, 1, "", "FreeModule"], [196, 1, 1, "", "FreeModuleElement"], [196, 1, 1, "", "Module"], [196, 1, 1, "", "QuotientModule"], [196, 1, 1, "", "QuotientModuleElement"], [196, 1, 1, "", "SubModule"], [196, 1, 1, "", "SubQuotientModule"]], "sympy.polys.agca.modules.FreeModule": [[196, 2, 1, "", "basis"], [196, 2, 1, "", "convert"], [196, 5, 1, "", "dtype"], [196, 2, 1, "", "identity_hom"], [196, 2, 1, "", "is_submodule"], [196, 2, 1, "", "is_zero"], [196, 2, 1, "", "multiply_ideal"], [196, 2, 1, "", "quotient_module"]], "sympy.polys.agca.modules.Module": [[196, 2, 1, "", "contains"], [196, 2, 1, "", "convert"], [196, 2, 1, "", "identity_hom"], [196, 2, 1, "", "is_submodule"], [196, 2, 1, "", "is_zero"], [196, 2, 1, "", "multiply_ideal"], [196, 2, 1, "", "quotient_module"], [196, 2, 1, "", "submodule"], [196, 2, 1, "", "subset"]], "sympy.polys.agca.modules.QuotientModule": [[196, 2, 1, "", "convert"], [196, 5, 1, "", "dtype"], [196, 2, 1, "", "identity_hom"], [196, 2, 1, "", "is_submodule"], [196, 2, 1, "", "is_zero"], [196, 2, 1, "", "quotient_hom"], [196, 2, 1, "", "submodule"]], "sympy.polys.agca.modules.QuotientModuleElement": [[196, 2, 1, "", "eq"]], "sympy.polys.agca.modules.SubModule": [[196, 2, 1, "", "convert"], [196, 2, 1, "", "identity_hom"], [196, 2, 1, "", "in_terms_of_generators"], [196, 2, 1, "", "inclusion_hom"], [196, 2, 1, "", "intersect"], [196, 2, 1, "", "is_full_module"], [196, 2, 1, "", "is_submodule"], [196, 2, 1, "", "is_zero"], [196, 2, 1, "", "module_quotient"], [196, 2, 1, "", "multiply_ideal"], [196, 2, 1, "", "quotient_module"], [196, 2, 1, "", "reduce_element"], [196, 2, 1, "", "submodule"], [196, 2, 1, "", "syzygy_module"], [196, 2, 1, "", "union"]], "sympy.polys.agca.modules.SubQuotientModule": [[196, 2, 1, "", "is_full_module"], [196, 2, 1, "", "quotient_hom"]], "sympy.polys.appellseqs": [[205, 3, 1, "", "andre_poly"], [205, 3, 1, "", "bernoulli_c_poly"], [205, 3, 1, "", "bernoulli_poly"], [205, 3, 1, "", "euler_poly"], [205, 3, 1, "", "genocchi_poly"]], "sympy.polys.constructor": [[205, 3, 1, "", "construct_domain"]], "sympy.polys.densearith": [[202, 3, 1, "", "dmp_abs"], [202, 3, 1, "", "dmp_add"], [202, 3, 1, "", "dmp_add_ground"], [202, 3, 1, "", "dmp_add_mul"], [202, 3, 1, "", "dmp_add_term"], [202, 3, 1, "", "dmp_div"], [202, 3, 1, "", "dmp_expand"], [202, 3, 1, "", "dmp_exquo"], [202, 3, 1, "", "dmp_exquo_ground"], [202, 3, 1, "", "dmp_ff_div"], [202, 3, 1, "", "dmp_l1_norm"], [202, 3, 1, "", "dmp_max_norm"], [202, 3, 1, "", "dmp_mul"], [202, 3, 1, "", "dmp_mul_ground"], [202, 3, 1, "", "dmp_mul_term"], [202, 3, 1, "", "dmp_neg"], [202, 3, 1, "", "dmp_pdiv"], [202, 3, 1, "", "dmp_pexquo"], [202, 3, 1, "", "dmp_pow"], [202, 3, 1, "", "dmp_pquo"], [202, 3, 1, "", "dmp_prem"], [202, 3, 1, "", "dmp_quo"], [202, 3, 1, "", "dmp_quo_ground"], [202, 3, 1, "", "dmp_rem"], [202, 3, 1, "", "dmp_rr_div"], [202, 3, 1, "", "dmp_sqr"], [202, 3, 1, "", "dmp_sub"], [202, 3, 1, "", "dmp_sub_ground"], [202, 3, 1, "", "dmp_sub_mul"], [202, 3, 1, "", "dmp_sub_term"], [202, 3, 1, "", "dup_lshift"], [202, 3, 1, "", "dup_rshift"]], "sympy.polys.densebasic": [[202, 3, 1, "", "dmp_LC"], [202, 3, 1, "", "dmp_TC"], [202, 3, 1, "", "dmp_apply_pairs"], [202, 3, 1, "", "dmp_convert"], [202, 3, 1, "", "dmp_copy"], [202, 3, 1, "", "dmp_deflate"], [202, 3, 1, "", "dmp_degree"], [202, 3, 1, "", "dmp_degree_in"], [202, 3, 1, "", "dmp_degree_list"], [202, 3, 1, "", "dmp_eject"], [202, 3, 1, "", "dmp_exclude"], [202, 3, 1, "", "dmp_from_dict"], [202, 3, 1, "", "dmp_from_sympy"], [202, 3, 1, "", "dmp_ground"], [202, 3, 1, "", "dmp_ground_LC"], [202, 3, 1, "", "dmp_ground_TC"], [202, 3, 1, "", "dmp_ground_nth"], [202, 3, 1, "", "dmp_ground_p"], [202, 3, 1, "", "dmp_grounds"], [202, 3, 1, "", "dmp_include"], [202, 3, 1, "", "dmp_inflate"], [202, 3, 1, "", "dmp_inject"], [202, 3, 1, "", "dmp_list_terms"], [202, 3, 1, "", "dmp_multi_deflate"], [202, 3, 1, "", "dmp_negative_p"], [202, 3, 1, "", "dmp_nest"], [202, 3, 1, "", "dmp_normal"], [202, 3, 1, "", "dmp_nth"], [202, 3, 1, "", "dmp_one"], [202, 3, 1, "", "dmp_one_p"], [202, 3, 1, "", "dmp_permute"], [202, 3, 1, "", "dmp_positive_p"], [202, 3, 1, "", "dmp_raise"], [202, 3, 1, "", "dmp_slice"], [202, 3, 1, "", "dmp_strip"], [202, 3, 1, "", "dmp_swap"], [202, 3, 1, "", "dmp_terms_gcd"], [202, 3, 1, "", "dmp_to_dict"], [202, 3, 1, "", "dmp_to_tuple"], [202, 3, 1, "", "dmp_true_LT"], [202, 3, 1, "", "dmp_validate"], [202, 3, 1, "", "dmp_zero"], [202, 3, 1, "", "dmp_zero_p"], [202, 3, 1, "", "dmp_zeros"], [202, 3, 1, "", "dup_random"], [202, 3, 1, "", "dup_reverse"]], "sympy.polys.densetools": [[202, 3, 1, "", "dmp_clear_denoms"], [202, 3, 1, "", "dmp_compose"], [202, 3, 1, "", "dmp_diff"], [202, 3, 1, "", "dmp_diff_eval_in"], [202, 3, 1, "", "dmp_diff_in"], [202, 3, 1, "", "dmp_eval"], [202, 3, 1, "", "dmp_eval_in"], [202, 3, 1, "", "dmp_eval_tail"], [202, 3, 1, "", "dmp_ground_content"], [202, 3, 1, "", "dmp_ground_extract"], [202, 3, 1, "", "dmp_ground_monic"], [202, 3, 1, "", "dmp_ground_primitive"], [202, 3, 1, "", "dmp_ground_trunc"], [202, 3, 1, "", "dmp_integrate"], [202, 3, 1, "", "dmp_integrate_in"], [202, 3, 1, "", "dmp_lift"], [202, 3, 1, "", "dmp_revert"], [202, 3, 1, "", "dmp_trunc"], [202, 3, 1, "", "dup_content"], [202, 3, 1, "", "dup_decompose"], [202, 3, 1, "", "dup_extract"], [202, 3, 1, "", "dup_mirror"], [202, 3, 1, "", "dup_monic"], [202, 3, 1, "", "dup_primitive"], [202, 3, 1, "", "dup_real_imag"], [202, 3, 1, "", "dup_scale"], [202, 3, 1, "", "dup_shift"], [202, 3, 1, "", "dup_sign_variations"], [202, 3, 1, "", "dup_transform"]], "sympy.polys.dispersion": [[205, 3, 1, "", "dispersion"], [205, 3, 1, "", "dispersionset"]], "sympy.polys.distributedmodules": [[202, 3, 1, "", "sdm_LC"], [202, 3, 1, "", "sdm_LM"], [202, 3, 1, "", "sdm_LT"], [202, 3, 1, "", "sdm_add"], [202, 3, 1, "", "sdm_deg"], [202, 3, 1, "", "sdm_ecart"], [202, 3, 1, "", "sdm_from_dict"], [202, 3, 1, "", "sdm_from_vector"], [202, 3, 1, "", "sdm_groebner"], [202, 3, 1, "", "sdm_monomial_deg"], [202, 3, 1, "", "sdm_monomial_divides"], [202, 3, 1, "", "sdm_monomial_mul"], [202, 3, 1, "", "sdm_mul_term"], [202, 3, 1, "", "sdm_nf_mora"], [202, 3, 1, "", "sdm_spoly"], [202, 3, 1, "", "sdm_to_dict"], [202, 3, 1, "", "sdm_to_vector"], [202, 3, 1, "", "sdm_zero"]], "sympy.polys.domains": [[200, 1, 1, "", "AlgebraicField"], [200, 1, 1, "", "ComplexField"], [200, 1, 1, "", "ExpressionDomain"], [200, 1, 1, "", "FiniteField"], [200, 1, 1, "", "FractionField"], [200, 1, 1, "", "GMPYFiniteField"], [200, 1, 1, "", "GMPYIntegerRing"], [200, 1, 1, "", "GMPYRationalField"], [200, 1, 1, "", "IntegerRing"], [200, 1, 1, "", "PolynomialRing"], [200, 1, 1, "", "PythonFiniteField"], [200, 1, 1, "", "PythonIntegerRing"], [200, 1, 1, "", "PythonRationalField"], [200, 1, 1, "", "RationalField"], [200, 1, 1, "", "RealField"]], "sympy.polys.domains.AlgebraicField": [[200, 2, 1, "", "algebraic_field"], [200, 2, 1, "", "denom"], [200, 2, 1, "", "discriminant"], [200, 5, 1, "", "dtype"], [200, 5, 1, "", "ext"], [200, 2, 1, "", "from_AlgebraicField"], [200, 2, 1, "", "from_GaussianIntegerRing"], [200, 2, 1, "", "from_GaussianRationalField"], [200, 2, 1, "", "from_QQ"], [200, 2, 1, "", "from_QQ_gmpy"], [200, 2, 1, "", "from_QQ_python"], [200, 2, 1, "", "from_RealField"], [200, 2, 1, "", "from_ZZ"], [200, 2, 1, "", "from_ZZ_gmpy"], [200, 2, 1, "", "from_ZZ_python"], [200, 2, 1, "", "from_sympy"], [200, 2, 1, "", "get_ring"], [200, 2, 1, "", "integral_basis"], [200, 2, 1, "", "is_negative"], [200, 2, 1, "", "is_nonnegative"], [200, 2, 1, "", "is_nonpositive"], [200, 2, 1, "", "is_positive"], [200, 2, 1, "", "maximal_order"], [200, 5, 1, "", "mod"], [200, 2, 1, "", "numer"], [200, 5, 1, "", "orig_ext"], [200, 2, 1, "", "primes_above"], [200, 2, 1, "", "to_alg_num"], [200, 2, 1, "", "to_sympy"]], "sympy.polys.domains.ComplexField": [[200, 2, 1, "", "almosteq"], [200, 2, 1, "", "from_sympy"], [200, 2, 1, "", "gcd"], [200, 2, 1, "", "get_exact"], [200, 2, 1, "", "get_ring"], [200, 2, 1, "", "is_negative"], [200, 2, 1, "", "is_nonnegative"], [200, 2, 1, "", "is_nonpositive"], [200, 2, 1, "", "is_positive"], [200, 2, 1, "", "lcm"], [200, 2, 1, "", "to_sympy"]], "sympy.polys.domains.ExpressionDomain": [[200, 1, 1, "", "Expression"], [200, 2, 1, "", "denom"], [200, 5, 1, "", "dtype"], [200, 2, 1, "", "from_ExpressionDomain"], [200, 2, 1, "", "from_FractionField"], [200, 2, 1, "", "from_GaussianIntegerRing"], [200, 2, 1, "", "from_GaussianRationalField"], [200, 2, 1, "", "from_PolynomialRing"], [200, 2, 1, "", "from_QQ"], [200, 2, 1, "", "from_QQ_gmpy"], [200, 2, 1, "", "from_QQ_python"], [200, 2, 1, "", "from_RealField"], [200, 2, 1, "", "from_ZZ"], [200, 2, 1, "", "from_ZZ_gmpy"], [200, 2, 1, "", "from_ZZ_python"], [200, 2, 1, "", "from_sympy"], [200, 2, 1, "", "get_field"], [200, 2, 1, "", "get_ring"], [200, 2, 1, "", "is_negative"], [200, 2, 1, "", "is_nonnegative"], [200, 2, 1, "", "is_nonpositive"], [200, 2, 1, "", "is_positive"], [200, 2, 1, "", "numer"], [200, 2, 1, "", "to_sympy"]], "sympy.polys.domains.FiniteField": [[200, 2, 1, "", "characteristic"], [200, 2, 1, "", "from_FF"], [200, 2, 1, "", "from_FF_gmpy"], [200, 2, 1, "", "from_FF_python"], [200, 2, 1, "", "from_QQ"], [200, 2, 1, "", "from_QQ_gmpy"], [200, 2, 1, "", "from_QQ_python"], [200, 2, 1, "", "from_RealField"], [200, 2, 1, "", "from_ZZ"], [200, 2, 1, "", "from_ZZ_gmpy"], [200, 2, 1, "", "from_ZZ_python"], [200, 2, 1, "", "from_sympy"], [200, 2, 1, "", "get_field"], [200, 2, 1, "", "to_sympy"]], "sympy.polys.domains.FractionField": [[200, 2, 1, "", "denom"], [200, 2, 1, "", "factorial"], [200, 2, 1, "", "from_AlgebraicField"], [200, 2, 1, "", "from_ComplexField"], [200, 2, 1, "", "from_FractionField"], [200, 2, 1, "", "from_GaussianIntegerRing"], [200, 2, 1, "", "from_GaussianRationalField"], [200, 2, 1, "", "from_PolynomialRing"], [200, 2, 1, "", "from_QQ"], [200, 2, 1, "", "from_QQ_gmpy"], [200, 2, 1, "", "from_QQ_python"], [200, 2, 1, "", "from_RealField"], [200, 2, 1, "", "from_ZZ"], [200, 2, 1, "", "from_ZZ_gmpy"], [200, 2, 1, "", "from_ZZ_python"], [200, 2, 1, "", "from_sympy"], [200, 2, 1, "", "get_ring"], [200, 2, 1, "", "is_negative"], [200, 2, 1, "", "is_nonnegative"], [200, 2, 1, "", "is_nonpositive"], [200, 2, 1, "", "is_positive"], [200, 2, 1, "", "numer"], [200, 2, 1, "", "to_sympy"]], "sympy.polys.domains.GMPYIntegerRing": [[200, 2, 1, "", "factorial"], [200, 2, 1, "", "from_FF_gmpy"], [200, 2, 1, "", "from_FF_python"], [200, 2, 1, "", "from_QQ"], [200, 2, 1, "", "from_QQ_gmpy"], [200, 2, 1, "", "from_QQ_python"], [200, 2, 1, "", "from_RealField"], [200, 2, 1, "", "from_ZZ_gmpy"], [200, 2, 1, "", "from_ZZ_python"], [200, 2, 1, "", "from_sympy"], [200, 2, 1, "", "gcd"], [200, 2, 1, "", "gcdex"], [200, 2, 1, "", "lcm"], [200, 2, 1, "", "sqrt"], [200, 2, 1, "", "to_sympy"]], "sympy.polys.domains.GMPYRationalField": [[200, 2, 1, "", "denom"], [200, 2, 1, "", "div"], [200, 2, 1, "", "exquo"], [200, 2, 1, "", "factorial"], [200, 2, 1, "", "from_GaussianRationalField"], [200, 2, 1, "", "from_QQ_gmpy"], [200, 2, 1, "", "from_QQ_python"], [200, 2, 1, "", "from_RealField"], [200, 2, 1, "", "from_ZZ_gmpy"], [200, 2, 1, "", "from_ZZ_python"], [200, 2, 1, "", "from_sympy"], [200, 2, 1, "", "get_ring"], [200, 2, 1, "", "numer"], [200, 2, 1, "", "quo"], [200, 2, 1, "", "rem"], [200, 2, 1, "", "to_sympy"]], "sympy.polys.domains.IntegerRing": [[200, 2, 1, "", "algebraic_field"], [200, 2, 1, "", "factorial"], [200, 2, 1, "", "from_AlgebraicField"], [200, 2, 1, "", "from_FF"], [200, 2, 1, "", "from_FF_gmpy"], [200, 2, 1, "", "from_FF_python"], [200, 2, 1, "", "from_QQ"], [200, 2, 1, "", "from_QQ_gmpy"], [200, 2, 1, "", "from_QQ_python"], [200, 2, 1, "", "from_RealField"], [200, 2, 1, "", "from_ZZ"], [200, 2, 1, "", "from_ZZ_gmpy"], [200, 2, 1, "", "from_ZZ_python"], [200, 2, 1, "", "from_sympy"], [200, 2, 1, "", "gcd"], [200, 2, 1, "", "gcdex"], [200, 2, 1, "", "get_field"], [200, 2, 1, "", "lcm"], [200, 2, 1, "", "log"], [200, 2, 1, "", "sqrt"], [200, 2, 1, "", "to_sympy"]], "sympy.polys.domains.PolynomialRing": [[200, 2, 1, "", "factorial"], [200, 2, 1, "", "from_AlgebraicField"], [200, 2, 1, "", "from_ComplexField"], [200, 2, 1, "", "from_FractionField"], [200, 2, 1, "", "from_GaussianIntegerRing"], [200, 2, 1, "", "from_GaussianRationalField"], [200, 2, 1, "", "from_GlobalPolynomialRing"], [200, 2, 1, "", "from_PolynomialRing"], [200, 2, 1, "", "from_QQ"], [200, 2, 1, "", "from_QQ_gmpy"], [200, 2, 1, "", "from_QQ_python"], [200, 2, 1, "", "from_RealField"], [200, 2, 1, "", "from_ZZ"], [200, 2, 1, "", "from_ZZ_gmpy"], [200, 2, 1, "", "from_ZZ_python"], [200, 2, 1, "", "from_sympy"], [200, 2, 1, "", "gcd"], [200, 2, 1, "", "gcdex"], [200, 2, 1, "", "get_field"], [200, 2, 1, "", "is_negative"], [200, 2, 1, "", "is_nonnegative"], [200, 2, 1, "", "is_nonpositive"], [200, 2, 1, "", "is_positive"], [200, 2, 1, "", "is_unit"], [200, 2, 1, "", "lcm"], [200, 2, 1, "", "to_sympy"]], "sympy.polys.domains.RationalField": [[200, 2, 1, "", "algebraic_field"], [200, 2, 1, "", "denom"], [200, 2, 1, "", "div"], [200, 2, 1, "", "exquo"], [200, 2, 1, "", "from_AlgebraicField"], [200, 2, 1, "", "from_GaussianRationalField"], [200, 2, 1, "", "from_QQ"], [200, 2, 1, "", "from_QQ_gmpy"], [200, 2, 1, "", "from_QQ_python"], [200, 2, 1, "", "from_RealField"], [200, 2, 1, "", "from_ZZ"], [200, 2, 1, "", "from_ZZ_gmpy"], [200, 2, 1, "", "from_ZZ_python"], [200, 2, 1, "", "from_sympy"], [200, 2, 1, "", "get_ring"], [200, 2, 1, "", "numer"], [200, 2, 1, "", "quo"], [200, 2, 1, "", "rem"], [200, 2, 1, "", "to_sympy"]], "sympy.polys.domains.RealField": [[200, 2, 1, "", "almosteq"], [200, 2, 1, "", "from_sympy"], [200, 2, 1, "", "gcd"], [200, 2, 1, "", "get_exact"], [200, 2, 1, "", "get_ring"], [200, 2, 1, "", "lcm"], [200, 2, 1, "", "to_rational"], [200, 2, 1, "", "to_sympy"]], "sympy.polys.domains.compositedomain": [[200, 1, 1, "", "CompositeDomain"]], "sympy.polys.domains.compositedomain.CompositeDomain": [[200, 2, 1, "", "drop"], [200, 2, 1, "", "inject"]], "sympy.polys.domains.domain": [[200, 1, 1, "", "Domain"]], "sympy.polys.domains.domain.Domain": [[200, 2, 1, "", "abs"], [200, 2, 1, "", "add"], [200, 2, 1, "", "alg_field_from_poly"], [200, 2, 1, "", "algebraic_field"], [200, 2, 1, "", "almosteq"], [200, 2, 1, "", "characteristic"], [200, 2, 1, "", "cofactors"], [200, 2, 1, "", "convert"], [200, 2, 1, "", "convert_from"], [200, 2, 1, "", "cyclotomic_field"], [200, 2, 1, "", "denom"], [200, 2, 1, "", "div"], [200, 2, 1, "", "drop"], [200, 5, 1, "", "dtype"], [200, 2, 1, "", "evalf"], [200, 2, 1, "", "exquo"], [200, 2, 1, "", "frac_field"], [200, 2, 1, "", "from_AlgebraicField"], [200, 2, 1, "", "from_ComplexField"], [200, 2, 1, "", "from_ExpressionDomain"], [200, 2, 1, "", "from_ExpressionRawDomain"], [200, 2, 1, "", "from_FF"], [200, 2, 1, "", "from_FF_gmpy"], [200, 2, 1, "", "from_FF_python"], [200, 2, 1, "", "from_FractionField"], [200, 2, 1, "", "from_GlobalPolynomialRing"], [200, 2, 1, "", "from_MonogenicFiniteExtension"], [200, 2, 1, "", "from_PolynomialRing"], [200, 2, 1, "", "from_QQ_gmpy"], [200, 2, 1, "", "from_QQ_python"], [200, 2, 1, "", "from_RealField"], [200, 2, 1, "", "from_ZZ_gmpy"], [200, 2, 1, "", "from_ZZ_python"], [200, 2, 1, "", "from_sympy"], [200, 2, 1, "", "gcd"], [200, 2, 1, "", "gcdex"], [200, 2, 1, "", "get_exact"], [200, 2, 1, "", "get_field"], [200, 2, 1, "", "get_ring"], [200, 2, 1, "", "half_gcdex"], [200, 5, 1, "", "has_assoc_Field"], [200, 5, 1, "", "has_assoc_Ring"], [200, 2, 1, "", "inject"], [200, 2, 1, "", "invert"], [200, 5, 1, "", "is_Field"], [200, 5, 1, "", "is_PID"], [200, 5, 1, "", "is_Ring"], [200, 2, 1, "", "is_negative"], [200, 2, 1, "", "is_nonnegative"], [200, 2, 1, "", "is_nonpositive"], [200, 2, 1, "", "is_one"], [200, 2, 1, "", "is_positive"], [200, 2, 1, "", "is_zero"], [200, 2, 1, "", "lcm"], [200, 2, 1, "", "log"], [200, 2, 1, "", "map"], [200, 2, 1, "", "mul"], [200, 2, 1, "", "n"], [200, 2, 1, "", "neg"], [200, 2, 1, "", "numer"], [200, 2, 1, "", "of_type"], [200, 2, 1, "", "old_frac_field"], [200, 2, 1, "", "old_poly_ring"], [200, 5, 1, "", "one"], [200, 2, 1, "", "poly_ring"], [200, 2, 1, "", "pos"], [200, 2, 1, "", "pow"], [200, 2, 1, "", "quo"], [200, 2, 1, "", "rem"], [200, 2, 1, "", "revert"], [200, 2, 1, "", "sqrt"], [200, 2, 1, "", "sub"], [200, 2, 1, "", "to_sympy"], [200, 4, 1, "", "tp"], [200, 2, 1, "", "unify"], [200, 5, 1, "", "zero"]], "sympy.polys.domains.domainelement": [[200, 1, 1, "", "DomainElement"]], "sympy.polys.domains.domainelement.DomainElement": [[200, 2, 1, "", "parent"]], "sympy.polys.domains.expressiondomain.ExpressionDomain": [[200, 1, 1, "", "Expression"]], "sympy.polys.domains.field": [[200, 1, 1, "", "Field"]], "sympy.polys.domains.field.Field": [[200, 2, 1, "", "div"], [200, 2, 1, "", "exquo"], [200, 2, 1, "", "gcd"], [200, 2, 1, "", "get_field"], [200, 2, 1, "", "get_ring"], [200, 2, 1, "", "is_unit"], [200, 2, 1, "", "lcm"], [200, 2, 1, "", "quo"], [200, 2, 1, "", "rem"], [200, 2, 1, "", "revert"]], "sympy.polys.domains.gaussiandomains": [[200, 1, 1, "", "GaussianDomain"], [200, 1, 1, "", "GaussianElement"], [200, 1, 1, "", "GaussianInteger"], [200, 1, 1, "", "GaussianIntegerRing"], [200, 1, 1, "", "GaussianRational"], [200, 1, 1, "", "GaussianRationalField"]], "sympy.polys.domains.gaussiandomains.GaussianDomain": [[200, 2, 1, "", "from_AlgebraicField"], [200, 2, 1, "", "from_QQ"], [200, 2, 1, "", "from_QQ_gmpy"], [200, 2, 1, "", "from_QQ_python"], [200, 2, 1, "", "from_ZZ"], [200, 2, 1, "", "from_ZZ_gmpy"], [200, 2, 1, "", "from_ZZ_python"], [200, 2, 1, "", "from_sympy"], [200, 2, 1, "", "inject"], [200, 2, 1, "", "is_negative"], [200, 2, 1, "", "is_nonnegative"], [200, 2, 1, "", "is_nonpositive"], [200, 2, 1, "", "is_positive"], [200, 2, 1, "", "to_sympy"]], "sympy.polys.domains.gaussiandomains.GaussianElement": [[200, 2, 1, "", "new"], [200, 2, 1, "", "parent"], [200, 2, 1, "", "quadrant"]], "sympy.polys.domains.gaussiandomains.GaussianIntegerRing": [[200, 5, 1, "", "dtype"], [200, 2, 1, "", "from_GaussianIntegerRing"], [200, 2, 1, "", "from_GaussianRationalField"], [200, 2, 1, "", "gcd"], [200, 2, 1, "", "get_field"], [200, 2, 1, "", "get_ring"], [200, 2, 1, "", "lcm"], [200, 2, 1, "", "normalize"]], "sympy.polys.domains.gaussiandomains.GaussianRationalField": [[200, 2, 1, "", "as_AlgebraicField"], [200, 2, 1, "", "denom"], [200, 5, 1, "", "dtype"], [200, 2, 1, "", "from_GaussianIntegerRing"], [200, 2, 1, "", "from_GaussianRationalField"], [200, 2, 1, "", "get_field"], [200, 2, 1, "", "get_ring"], [200, 2, 1, "", "numer"]], "sympy.polys.domains.mpelements": [[200, 1, 1, "", "ComplexElement"], [200, 1, 1, "", "RealElement"]], "sympy.polys.domains.quotientring": [[200, 1, 1, "", "QuotientRing"]], "sympy.polys.domains.ring": [[200, 1, 1, "", "Ring"]], "sympy.polys.domains.ring.Ring": [[200, 2, 1, "", "denom"], [200, 2, 1, "", "div"], [200, 2, 1, "", "exquo"], [200, 2, 1, "", "free_module"], [200, 2, 1, "", "get_ring"], [200, 2, 1, "", "ideal"], [200, 2, 1, "", "invert"], [200, 2, 1, "", "numer"], [200, 2, 1, "", "quo"], [200, 2, 1, "", "quotient_ring"], [200, 2, 1, "", "rem"], [200, 2, 1, "", "revert"]], "sympy.polys.domains.simpledomain": [[200, 1, 1, "", "SimpleDomain"]], "sympy.polys.domains.simpledomain.SimpleDomain": [[200, 2, 1, "", "inject"]], "sympy.polys.euclidtools": [[202, 3, 1, "", "dmp_cancel"], [202, 3, 1, "", "dmp_content"], [202, 3, 1, "", "dmp_discriminant"], [202, 3, 1, "", "dmp_euclidean_prs"], [202, 3, 1, "", "dmp_ff_prs_gcd"], [202, 3, 1, "", "dmp_gcd"], [202, 3, 1, "", "dmp_gcdex"], [202, 3, 1, "", "dmp_half_gcdex"], [202, 3, 1, "", "dmp_inner_gcd"], [202, 3, 1, "", "dmp_inner_subresultants"], [202, 3, 1, "", "dmp_invert"], [202, 3, 1, "", "dmp_lcm"], [202, 3, 1, "", "dmp_primitive"], [202, 3, 1, "", "dmp_primitive_prs"], [202, 3, 1, "", "dmp_prs_resultant"], [202, 3, 1, "", "dmp_qq_collins_resultant"], [202, 3, 1, "", "dmp_qq_heu_gcd"], [202, 3, 1, "", "dmp_resultant"], [202, 3, 1, "", "dmp_rr_prs_gcd"], [202, 3, 1, "", "dmp_subresultants"], [202, 3, 1, "", "dmp_zz_collins_resultant"], [202, 3, 1, "", "dmp_zz_heu_gcd"], [202, 3, 1, "", "dmp_zz_modular_resultant"]], "sympy.polys.factortools": [[202, 3, 1, "", "dmp_ext_factor"], [202, 3, 1, "", "dmp_factor_list"], [202, 3, 1, "", "dmp_factor_list_include"], [202, 3, 1, "", "dmp_irreducible_p"], [202, 3, 1, "", "dmp_trial_division"], [202, 3, 1, "", "dmp_zz_diophantine"], [202, 3, 1, "", "dmp_zz_factor"], [202, 3, 1, "", "dmp_zz_mignotte_bound"], [202, 3, 1, "", "dmp_zz_wang"], [202, 3, 1, "", "dmp_zz_wang_hensel_lifting"], [202, 3, 1, "", "dmp_zz_wang_lead_coeffs"], [202, 3, 1, "", "dmp_zz_wang_non_divisors"], [202, 3, 1, "", "dmp_zz_wang_test_points"], [202, 3, 1, "", "dup_cyclotomic_p"], [202, 3, 1, "", "dup_gf_factor"], [202, 3, 1, "", "dup_zz_cyclotomic_factor"], [202, 3, 1, "", "dup_zz_cyclotomic_poly"], [202, 3, 1, "", "dup_zz_factor"], [202, 3, 1, "", "dup_zz_factor_sqf"], [202, 3, 1, "", "dup_zz_hensel_lift"], [202, 3, 1, "", "dup_zz_hensel_step"], [202, 3, 1, "", "dup_zz_irreducible_p"], [202, 3, 1, "", "dup_zz_zassenhaus"]], "sympy.polys.fglmtools": [[202, 3, 1, "", "matrix_fglm"]], "sympy.polys.fields": [[200, 1, 1, "", "FracElement"], [200, 1, 1, "", "FracField"], [200, 3, 1, "", "field"], [200, 3, 1, "", "sfield"], [200, 3, 1, "", "vfield"], [200, 3, 1, "", "xfield"]], "sympy.polys.fields.FracElement": [[200, 2, 1, "", "diff"]], "sympy.polys.galoistools": [[202, 3, 1, "", "gf_LC"], [202, 3, 1, "", "gf_Qbasis"], [202, 3, 1, "", "gf_Qmatrix"], [202, 3, 1, "", "gf_TC"], [202, 3, 1, "", "gf_add"], [202, 3, 1, "", "gf_add_ground"], [202, 3, 1, "", "gf_add_mul"], [202, 3, 1, "", "gf_berlekamp"], [202, 3, 1, "", "gf_cofactors"], [202, 3, 1, "", "gf_compose"], [202, 3, 1, "", "gf_compose_mod"], [202, 3, 1, "", "gf_crt"], [202, 3, 1, "", "gf_crt1"], [202, 3, 1, "", "gf_crt2"], [202, 3, 1, "", "gf_csolve"], [202, 3, 1, "", "gf_degree"], [202, 3, 1, "", "gf_diff"], [202, 3, 1, "", "gf_div"], [202, 3, 1, "", "gf_eval"], [202, 3, 1, "", "gf_expand"], [202, 3, 1, "", "gf_exquo"], [202, 3, 1, "", "gf_factor"], [202, 3, 1, "", "gf_factor_sqf"], [202, 3, 1, "", "gf_from_dict"], [202, 3, 1, "", "gf_from_int_poly"], [202, 3, 1, "", "gf_gcd"], [202, 3, 1, "", "gf_gcdex"], [202, 3, 1, "", "gf_int"], [202, 3, 1, "", "gf_irreducible"], [202, 3, 1, "", "gf_irreducible_p"], [202, 3, 1, "", "gf_lcm"], [202, 3, 1, "", "gf_lshift"], [202, 3, 1, "", "gf_monic"], [202, 3, 1, "", "gf_mul"], [202, 3, 1, "", "gf_mul_ground"], [202, 3, 1, "", "gf_multi_eval"], [202, 3, 1, "", "gf_neg"], [202, 3, 1, "", "gf_normal"], [202, 3, 1, "", "gf_pow"], [202, 3, 1, "", "gf_pow_mod"], [202, 3, 1, "", "gf_quo"], [202, 3, 1, "", "gf_quo_ground"], [202, 3, 1, "", "gf_random"], [202, 3, 1, "", "gf_rem"], [202, 3, 1, "", "gf_rshift"], [202, 3, 1, "", "gf_shoup"], [202, 3, 1, "", "gf_sqf_list"], [202, 3, 1, "", "gf_sqf_p"], [202, 3, 1, "", "gf_sqf_part"], [202, 3, 1, "", "gf_sqr"], [202, 3, 1, "", "gf_strip"], [202, 3, 1, "", "gf_sub"], [202, 3, 1, "", "gf_sub_ground"], [202, 3, 1, "", "gf_sub_mul"], [202, 3, 1, "", "gf_to_dict"], [202, 3, 1, "", "gf_to_int_poly"], [202, 3, 1, "", "gf_trace_map"], [202, 3, 1, "", "gf_trunc"], [202, 3, 1, "", "gf_value"], [202, 3, 1, "", "gf_zassenhaus"]], "sympy.polys.groebnertools": [[202, 3, 1, "", "groebner"], [202, 3, 1, "", "is_groebner"], [202, 3, 1, "", "is_minimal"], [202, 3, 1, "", "is_reduced"], [202, 3, 1, "", "red_groebner"], [202, 3, 1, "", "spoly"]], "sympy.polys.matrices.ddm": [[198, 1, 1, "", "DDM"]], "sympy.polys.matrices.ddm.DDM": [[198, 2, 1, "", "add"], [198, 2, 1, "", "charpoly"], [198, 2, 1, "", "det"], [198, 2, 1, "", "hstack"], [198, 2, 1, "", "inv"], [198, 2, 1, "", "is_lower"], [198, 2, 1, "", "is_upper"], [198, 2, 1, "", "is_zero_matrix"], [198, 2, 1, "", "lu"], [198, 2, 1, "", "lu_solve"], [198, 2, 1, "", "matmul"], [198, 2, 1, "", "neg"], [198, 2, 1, "", "rref"], [198, 2, 1, "", "scc"], [198, 2, 1, "", "sub"], [198, 2, 1, "", "vstack"]], "sympy.polys.matrices.domainmatrix": [[198, 1, 1, "", "DomainMatrix"]], "sympy.polys.matrices.domainmatrix.DomainMatrix": [[198, 2, 1, "", "add"], [198, 2, 1, "", "charpoly"], [198, 2, 1, "", "columnspace"], [198, 2, 1, "", "convert_to"], [198, 2, 1, "", "det"], [198, 2, 1, "", "diag"], [198, 2, 1, "", "eye"], [198, 2, 1, "", "from_Matrix"], [198, 2, 1, "", "from_dict_sympy"], [198, 2, 1, "", "from_list"], [198, 2, 1, "", "from_list_sympy"], [198, 2, 1, "", "from_rep"], [198, 2, 1, "", "hstack"], [198, 2, 1, "", "inv"], [198, 4, 1, "", "is_lower"], [198, 4, 1, "", "is_upper"], [198, 2, 1, "", "lu"], [198, 2, 1, "", "lu_solve"], [198, 2, 1, "", "matmul"], [198, 2, 1, "", "mul"], [198, 2, 1, "", "neg"], [198, 2, 1, "", "nullspace"], [198, 2, 1, "", "ones"], [198, 2, 1, "", "pow"], [198, 2, 1, "", "rowspace"], [198, 2, 1, "", "rref"], [198, 2, 1, "", "scc"], [198, 2, 1, "", "sub"], [198, 2, 1, "", "to_Matrix"], [198, 2, 1, "", "to_dense"], [198, 2, 1, "", "to_field"], [198, 2, 1, "", "to_sparse"], [198, 2, 1, "", "transpose"], [198, 2, 1, "", "unify"], [198, 2, 1, "", "vstack"], [198, 2, 1, "", "zeros"]], "sympy.polys.matrices.normalforms": [[198, 3, 1, "", "hermite_normal_form"], [198, 3, 1, "", "smith_normal_form"]], "sympy.polys.matrices.sdm": [[198, 1, 1, "", "SDM"]], "sympy.polys.matrices.sdm.SDM": [[198, 2, 1, "", "add"], [198, 2, 1, "", "charpoly"], [198, 2, 1, "", "convert_to"], [198, 2, 1, "", "copy"], [198, 2, 1, "", "det"], [198, 2, 1, "", "eye"], [198, 2, 1, "", "from_ddm"], [198, 2, 1, "", "from_list"], [198, 2, 1, "", "hstack"], [198, 2, 1, "", "inv"], [198, 2, 1, "", "is_lower"], [198, 2, 1, "", "is_upper"], [198, 2, 1, "", "is_zero_matrix"], [198, 2, 1, "", "lu"], [198, 2, 1, "", "lu_solve"], [198, 2, 1, "", "matmul"], [198, 2, 1, "", "mul"], [198, 2, 1, "", "neg"], [198, 2, 1, "", "new"], [198, 2, 1, "", "nullspace"], [198, 2, 1, "", "rref"], [198, 2, 1, "", "scc"], [198, 2, 1, "", "sub"], [198, 2, 1, "", "to_ddm"], [198, 2, 1, "", "to_list"], [198, 2, 1, "", "transpose"], [198, 2, 1, "", "vstack"], [198, 2, 1, "", "zeros"]], "sympy.polys.modulargcd": [[202, 3, 1, "", "_modgcd_multivariate_p"], [202, 3, 1, "", "func_field_modgcd"], [202, 3, 1, "", "modgcd_bivariate"], [202, 3, 1, "", "modgcd_multivariate"], [202, 3, 1, "", "modgcd_univariate"]], "sympy.polys.monomials": [[205, 1, 1, "", "Monomial"], [205, 3, 1, "", "itermonomials"], [205, 3, 1, "", "monomial_count"]], "sympy.polys.monomials.Monomial": [[205, 2, 1, "", "as_expr"], [205, 2, 1, "", "gcd"], [205, 2, 1, "", "lcm"]], "sympy.polys.numberfields.basis": [[204, 3, 1, "", "round_two"]], "sympy.polys.numberfields.minpoly": [[204, 3, 1, "", "minimal_polynomial"], [204, 3, 1, "", "minpoly"]], "sympy.polys.numberfields": [[204, 0, 0, "-", "modules"], [204, 0, 0, "-", "subfield"]], "sympy.polys.numberfields.modules": [[204, 1, 1, "", "EndomorphismRing"], [204, 1, 1, "", "InnerEndomorphism"], [204, 1, 1, "", "Module"], [204, 1, 1, "", "ModuleElement"], [204, 1, 1, "", "ModuleEndomorphism"], [204, 1, 1, "", "ModuleHomomorphism"], [204, 1, 1, "", "PowerBasis"], [204, 1, 1, "", "PowerBasisElement"], [204, 1, 1, "", "Submodule"], [204, 3, 1, "", "find_min_poly"], [204, 3, 1, "", "make_mod_elt"]], "sympy.polys.numberfields.modules.EndomorphismRing": [[204, 2, 1, "", "__init__"], [204, 2, 1, "", "inner_endomorphism"], [204, 2, 1, "", "represent"]], "sympy.polys.numberfields.modules.InnerEndomorphism": [[204, 2, 1, "", "__init__"]], "sympy.polys.numberfields.modules.Module": [[204, 2, 1, "", "__call__"], [204, 2, 1, "", "ancestors"], [204, 2, 1, "", "basis_elements"], [204, 2, 1, "", "element_from_rational"], [204, 2, 1, "", "endomorphism_ring"], [204, 2, 1, "", "is_compat_col"], [204, 2, 1, "", "mult_tab"], [204, 4, 1, "", "n"], [204, 2, 1, "", "nearest_common_ancestor"], [204, 4, 1, "", "number_field"], [204, 2, 1, "", "one"], [204, 4, 1, "", "parent"], [204, 2, 1, "", "power_basis_ancestor"], [204, 2, 1, "", "represent"], [204, 2, 1, "", "starts_with_unity"], [204, 2, 1, "", "submodule_from_gens"], [204, 2, 1, "", "submodule_from_matrix"], [204, 2, 1, "", "whole_submodule"], [204, 2, 1, "", "zero"]], "sympy.polys.numberfields.modules.ModuleElement": [[204, 4, 1, "", "QQ_col"], [204, 2, 1, "", "__add__"], [204, 2, 1, "", "__init__"], [204, 2, 1, "", "__mod__"], [204, 2, 1, "", "__mul__"], [204, 2, 1, "", "column"], [204, 2, 1, "", "equiv"], [204, 2, 1, "", "from_int_list"], [204, 2, 1, "", "is_compat"], [204, 4, 1, "", "n"], [204, 2, 1, "", "over_power_basis"], [204, 2, 1, "", "reduced"], [204, 2, 1, "", "reduced_mod_p"], [204, 2, 1, "", "to_ancestor"], [204, 2, 1, "", "to_parent"], [204, 2, 1, "", "unify"]], "sympy.polys.numberfields.modules.ModuleEndomorphism": [[204, 2, 1, "", "__init__"]], "sympy.polys.numberfields.modules.ModuleHomomorphism": [[204, 2, 1, "", "__init__"], [204, 2, 1, "", "kernel"], [204, 2, 1, "", "matrix"]], "sympy.polys.numberfields.modules.PowerBasis": [[204, 2, 1, "", "__init__"], [204, 2, 1, "", "element_from_ANP"], [204, 2, 1, "", "element_from_alg_num"], [204, 2, 1, "", "element_from_poly"], [204, 2, 1, "", "represent"]], "sympy.polys.numberfields.modules.PowerBasisElement": [[204, 4, 1, "", "T"], [204, 2, 1, "", "as_expr"], [204, 4, 1, "", "generator"], [204, 4, 1, "", "is_rational"], [204, 2, 1, "", "norm"], [204, 2, 1, "", "numerator"], [204, 2, 1, "", "poly"], [204, 2, 1, "", "to_ANP"], [204, 2, 1, "", "to_alg_num"]], "sympy.polys.numberfields.modules.Submodule": [[204, 4, 1, "", "QQ_matrix"], [204, 2, 1, "", "__init__"], [204, 2, 1, "", "add"], [204, 2, 1, "", "basis_element_pullbacks"], [204, 2, 1, "", "discard_before"], [204, 2, 1, "", "mul"], [204, 2, 1, "", "reduce_element"], [204, 2, 1, "", "reduced"], [204, 2, 1, "", "represent"]], "sympy.polys.numberfields.primes": [[204, 1, 1, "", "PrimeIdeal"], [204, 3, 1, "", "prime_decomp"], [204, 3, 1, "", "prime_valuation"]], "sympy.polys.numberfields.primes.PrimeIdeal": [[204, 2, 1, "", "__add__"], [204, 2, 1, "", "__init__"], [204, 2, 1, "", "__mul__"], [204, 2, 1, "", "as_submodule"], [204, 4, 1, "", "is_inert"], [204, 2, 1, "", "reduce_ANP"], [204, 2, 1, "", "reduce_alg_num"], [204, 2, 1, "", "reduce_element"], [204, 2, 1, "", "repr"], [204, 2, 1, "", "test_factor"], [204, 2, 1, "", "valuation"]], "sympy.polys.numberfields.subfield": [[204, 3, 1, "", "field_isomorphism"], [204, 3, 1, "", "primitive_element"], [204, 3, 1, "", "to_number_field"]], "sympy.polys.numberfields.utilities": [[204, 1, 1, "", "AlgIntPowers"], [204, 3, 1, "", "coeff_search"], [204, 3, 1, "", "extract_fundamental_discriminant"], [204, 3, 1, "", "get_num_denom"], [204, 3, 1, "", "is_int"], [204, 3, 1, "", "is_rat"], [204, 3, 1, "", "isolate"], [204, 3, 1, "", "supplement_a_subspace"]], "sympy.polys.numberfields.utilities.AlgIntPowers": [[204, 2, 1, "", "__init__"]], "sympy.polys.orderings": [[205, 1, 1, "", "GradedLexOrder"], [205, 1, 1, "", "LexOrder"], [205, 1, 1, "", "MonomialOrder"], [205, 1, 1, "", "ReversedGradedLexOrder"]], "sympy.polys.orthopolys": [[205, 3, 1, "", "chebyshevt_poly"], [205, 3, 1, "", "chebyshevu_poly"], [205, 3, 1, "", "gegenbauer_poly"], [205, 3, 1, "", "hermite_poly"], [205, 3, 1, "", "hermite_prob_poly"], [205, 3, 1, "", "jacobi_poly"], [205, 3, 1, "", "laguerre_poly"], [205, 3, 1, "", "legendre_poly"], [205, 3, 1, "", "spherical_bessel_fn"]], "sympy.polys.partfrac": [[205, 3, 1, "", "apart"], [205, 3, 1, "", "apart_list"], [205, 3, 1, "", "assemble_partfrac_list"]], "sympy.polys.polyclasses": [[200, 1, 1, "", "ANP"], [200, 1, 1, "", "DMF"], [200, 1, 1, "", "DMP"]], "sympy.polys.polyclasses.ANP": [[200, 2, 1, "", "LC"], [200, 2, 1, "", "TC"], [200, 4, 1, "", "is_ground"], [200, 4, 1, "", "is_one"], [200, 4, 1, "", "is_zero"], [200, 2, 1, "", "pow"], [200, 2, 1, "", "to_dict"], [200, 2, 1, "", "to_list"], [200, 2, 1, "", "to_sympy_dict"], [200, 2, 1, "", "to_sympy_list"], [200, 2, 1, "", "to_tuple"], [200, 2, 1, "", "unify"]], "sympy.polys.polyclasses.DMF": [[200, 2, 1, "", "add"], [200, 2, 1, "", "cancel"], [200, 2, 1, "", "denom"], [200, 2, 1, "", "exquo"], [200, 2, 1, "", "frac_unify"], [200, 2, 1, "", "half_per"], [200, 2, 1, "", "invert"], [200, 4, 1, "", "is_one"], [200, 4, 1, "", "is_zero"], [200, 2, 1, "", "mul"], [200, 2, 1, "", "neg"], [200, 2, 1, "", "numer"], [200, 2, 1, "", "per"], [200, 2, 1, "", "poly_unify"], [200, 2, 1, "", "pow"], [200, 2, 1, "", "quo"], [200, 2, 1, "", "sub"]], "sympy.polys.polyclasses.DMP": [[200, 2, 1, "", "LC"], [200, 2, 1, "", "TC"], [200, 2, 1, "", "abs"], [200, 2, 1, "", "add"], [200, 2, 1, "", "add_ground"], [200, 2, 1, "", "all_coeffs"], [200, 2, 1, "", "all_monoms"], [200, 2, 1, "", "all_terms"], [200, 2, 1, "", "cancel"], [200, 2, 1, "", "cauchy_lower_bound"], [200, 2, 1, "", "cauchy_upper_bound"], [200, 2, 1, "", "clear_denoms"], [200, 2, 1, "", "coeffs"], [200, 2, 1, "", "cofactors"], [200, 2, 1, "", "compose"], [200, 2, 1, "", "content"], [200, 2, 1, "", "convert"], [200, 2, 1, "", "count_complex_roots"], [200, 2, 1, "", "count_real_roots"], [200, 2, 1, "", "decompose"], [200, 2, 1, "", "deflate"], [200, 2, 1, "", "degree"], [200, 2, 1, "", "degree_list"], [200, 2, 1, "", "diff"], [200, 2, 1, "", "discriminant"], [200, 2, 1, "", "div"], [200, 2, 1, "", "eject"], [200, 2, 1, "", "eval"], [200, 2, 1, "", "exclude"], [200, 2, 1, "", "exquo"], [200, 2, 1, "", "exquo_ground"], [200, 2, 1, "", "factor_list"], [200, 2, 1, "", "factor_list_include"], [200, 2, 1, "", "from_dict"], [200, 2, 1, "", "from_list"], [200, 2, 1, "", "from_sympy_list"], [200, 2, 1, "", "gcd"], [200, 2, 1, "", "gcdex"], [200, 2, 1, "", "gff_list"], [200, 2, 1, "", "half_gcdex"], [200, 2, 1, "", "homogeneous_order"], [200, 2, 1, "", "homogenize"], [200, 2, 1, "", "inject"], [200, 2, 1, "", "integrate"], [200, 2, 1, "", "intervals"], [200, 2, 1, "", "invert"], [200, 4, 1, "", "is_cyclotomic"], [200, 4, 1, "", "is_ground"], [200, 4, 1, "", "is_homogeneous"], [200, 4, 1, "", "is_irreducible"], [200, 4, 1, "", "is_linear"], [200, 4, 1, "", "is_monic"], [200, 4, 1, "", "is_monomial"], [200, 4, 1, "", "is_one"], [200, 4, 1, "", "is_primitive"], [200, 4, 1, "", "is_quadratic"], [200, 4, 1, "", "is_sqf"], [200, 4, 1, "", "is_zero"], [200, 2, 1, "", "l1_norm"], [200, 2, 1, "", "l2_norm_squared"], [200, 2, 1, "", "lcm"], [200, 2, 1, "", "lift"], [200, 2, 1, "", "max_norm"], [200, 2, 1, "", "mignotte_sep_bound_squared"], [200, 2, 1, "", "monic"], [200, 2, 1, "", "monoms"], [200, 2, 1, "", "mul"], [200, 2, 1, "", "mul_ground"], [200, 2, 1, "", "neg"], [200, 2, 1, "", "norm"], [200, 2, 1, "", "nth"], [200, 2, 1, "", "pdiv"], [200, 2, 1, "", "per"], [200, 2, 1, "", "permute"], [200, 2, 1, "", "pexquo"], [200, 2, 1, "", "pow"], [200, 2, 1, "", "pquo"], [200, 2, 1, "", "prem"], [200, 2, 1, "", "primitive"], [200, 2, 1, "", "quo"], [200, 2, 1, "", "quo_ground"], [200, 2, 1, "", "refine_root"], [200, 2, 1, "", "rem"], [200, 2, 1, "", "resultant"], [200, 2, 1, "", "revert"], [200, 2, 1, "", "shift"], [200, 2, 1, "", "slice"], [200, 2, 1, "", "sqf_list"], [200, 2, 1, "", "sqf_list_include"], [200, 2, 1, "", "sqf_norm"], [200, 2, 1, "", "sqf_part"], [200, 2, 1, "", "sqr"], [200, 2, 1, "", "sturm"], [200, 2, 1, "", "sub"], [200, 2, 1, "", "sub_ground"], [200, 2, 1, "", "subresultants"], [200, 2, 1, "", "terms"], [200, 2, 1, "", "terms_gcd"], [200, 2, 1, "", "to_dict"], [200, 2, 1, "", "to_exact"], [200, 2, 1, "", "to_field"], [200, 2, 1, "", "to_list"], [200, 2, 1, "", "to_ring"], [200, 2, 1, "", "to_sympy_dict"], [200, 2, 1, "", "to_sympy_list"], [200, 2, 1, "", "to_tuple"], [200, 2, 1, "", "total_degree"], [200, 2, 1, "", "transform"], [200, 2, 1, "", "trunc"], [200, 2, 1, "", "unify"]], "sympy.polys": [[202, 0, 0, "-", "polyconfig"], [202, 0, 0, "-", "polyoptions"], [207, 0, 0, "-", "solvers"]], "sympy.polys.polyconfig": [[202, 3, 1, "", "setup"]], "sympy.polys.polyerrors": [[202, 1, 1, "", "BasePolynomialError"], [202, 1, 1, "", "CoercionFailed"], [202, 1, 1, "", "ComputationFailed"], [202, 1, 1, "", "DomainError"], [202, 1, 1, "", "EvaluationFailed"], [202, 1, 1, "", "ExactQuotientFailed"], [202, 1, 1, "", "ExtraneousFactors"], [202, 1, 1, "", "FlagError"], [202, 1, 1, "", "GeneratorsError"], [202, 1, 1, "", "GeneratorsNeeded"], [202, 1, 1, "", "HeuristicGCDFailed"], [202, 1, 1, "", "HomomorphismFailed"], [202, 1, 1, "", "IsomorphismFailed"], [202, 1, 1, "", "MultivariatePolynomialError"], [202, 1, 1, "", "NotAlgebraic"], [202, 1, 1, "", "NotInvertible"], [202, 1, 1, "", "NotReversible"], [202, 1, 1, "", "OperationNotSupported"], [202, 1, 1, "", "OptionError"], [202, 1, 1, "", "PolificationFailed"], [202, 1, 1, "", "PolynomialError"], [202, 1, 1, "", "RefinementFailed"], [202, 1, 1, "", "UnificationFailed"], [202, 1, 1, "", "UnivariatePolynomialError"]], "sympy.polys.polyfuncs": [[205, 3, 1, "", "horner"], [205, 3, 1, "", "interpolate"], [205, 3, 1, "", "symmetrize"], [205, 3, 1, "", "viete"]], "sympy.polys.polyoptions": [[202, 1, 1, "", "Options"], [202, 3, 1, "", "build_options"]], "sympy.polys.polyoptions.Options": [[202, 2, 1, "", "clone"]], "sympy.polys.polyroots": [[205, 3, 1, "", "roots"]], "sympy.polys.polytools": [[205, 1, 1, "", "GroebnerBasis"], [205, 3, 1, "", "LC"], [205, 3, 1, "", "LM"], [205, 3, 1, "", "LT"], [205, 1, 1, "", "Poly"], [205, 1, 1, "", "PurePoly"], [205, 3, 1, "", "cancel"], [205, 3, 1, "", "cofactors"], [205, 3, 1, "", "compose"], [205, 3, 1, "", "content"], [205, 3, 1, "", "count_roots"], [205, 3, 1, "", "decompose"], [205, 3, 1, "", "degree"], [205, 3, 1, "", "degree_list"], [205, 3, 1, "", "discriminant"], [205, 3, 1, "", "div"], [205, 3, 1, "", "exquo"], [205, 3, 1, "", "factor"], [205, 3, 1, "", "factor_list"], [205, 3, 1, "", "gcd"], [205, 3, 1, "", "gcd_list"], [205, 3, 1, "", "gcdex"], [205, 3, 1, "", "gff"], [205, 3, 1, "", "gff_list"], [205, 3, 1, "", "groebner"], [205, 3, 1, "", "ground_roots"], [205, 3, 1, "", "half_gcdex"], [205, 3, 1, "", "intervals"], [205, 3, 1, "", "invert"], [205, 3, 1, "", "is_zero_dimensional"], [205, 3, 1, "", "lcm"], [205, 3, 1, "", "lcm_list"], [205, 3, 1, "", "monic"], [205, 3, 1, "", "nroots"], [205, 3, 1, "", "nth_power_roots_poly"], [205, 3, 1, "", "parallel_poly_from_expr"], [205, 3, 1, "", "pdiv"], [205, 3, 1, "", "pexquo"], [205, 3, 1, "", "poly"], [205, 3, 1, "", "poly_from_expr"], [205, 3, 1, "", "pquo"], [205, 3, 1, "", "prem"], [205, 3, 1, "", "primitive"], [205, 3, 1, "", "quo"], [205, 3, 1, "", "real_roots"], [205, 3, 1, "", "reduced"], [205, 3, 1, "", "refine_root"], [205, 3, 1, "", "rem"], [205, 3, 1, "", "resultant"], [205, 3, 1, "", "sqf"], [205, 3, 1, "", "sqf_list"], [205, 3, 1, "", "sqf_norm"], [205, 3, 1, "", "sqf_part"], [205, 3, 1, "", "sturm"], [205, 3, 1, "", "subresultants"], [205, 3, 1, "", "terms_gcd"], [205, 3, 1, "", "trunc"]], "sympy.polys.polytools.GroebnerBasis": [[205, 2, 1, "", "contains"], [205, 2, 1, "", "fglm"], [205, 4, 1, "", "is_zero_dimensional"], [205, 2, 1, "", "reduce"]], "sympy.polys.polytools.Poly": [[205, 2, 1, "", "EC"], [205, 2, 1, "", "EM"], [205, 2, 1, "", "ET"], [205, 2, 1, "", "LC"], [205, 2, 1, "", "LM"], [205, 2, 1, "", "LT"], [205, 2, 1, "", "TC"], [205, 2, 1, "", "abs"], [205, 2, 1, "", "add"], [205, 2, 1, "", "add_ground"], [205, 2, 1, "", "all_coeffs"], [205, 2, 1, "", "all_monoms"], [205, 2, 1, "", "all_roots"], [205, 2, 1, "", "all_terms"], [205, 2, 1, "", "as_dict"], [205, 2, 1, "", "as_expr"], [205, 2, 1, "", "as_list"], [205, 2, 1, "", "as_poly"], [205, 2, 1, "", "cancel"], [205, 2, 1, "", "clear_denoms"], [205, 2, 1, "", "coeff_monomial"], [205, 2, 1, "", "coeffs"], [205, 2, 1, "", "cofactors"], [205, 2, 1, "", "compose"], [205, 2, 1, "", "content"], [205, 2, 1, "", "count_roots"], [205, 2, 1, "", "decompose"], [205, 2, 1, "", "deflate"], [205, 2, 1, "", "degree"], [205, 2, 1, "", "degree_list"], [205, 2, 1, "", "diff"], [205, 2, 1, "", "discriminant"], [205, 2, 1, "", "dispersion"], [205, 2, 1, "", "dispersionset"], [205, 2, 1, "", "div"], [205, 4, 1, "", "domain"], [205, 2, 1, "", "eject"], [205, 2, 1, "", "eval"], [205, 2, 1, "", "exclude"], [205, 2, 1, "", "exquo"], [205, 2, 1, "", "exquo_ground"], [205, 2, 1, "", "factor_list"], [205, 2, 1, "", "factor_list_include"], [205, 4, 1, "", "free_symbols"], [205, 4, 1, "", "free_symbols_in_domain"], [205, 2, 1, "", "from_dict"], [205, 2, 1, "", "from_expr"], [205, 2, 1, "", "from_list"], [205, 2, 1, "", "from_poly"], [205, 2, 1, "", "gcd"], [205, 2, 1, "", "gcdex"], [205, 4, 1, "", "gen"], [205, 2, 1, "", "get_domain"], [205, 2, 1, "", "get_modulus"], [205, 2, 1, "", "gff_list"], [205, 2, 1, "", "ground_roots"], [205, 2, 1, "", "half_gcdex"], [205, 2, 1, "", "has_only_gens"], [205, 2, 1, "", "homogeneous_order"], [205, 2, 1, "", "homogenize"], [205, 2, 1, "", "inject"], [205, 2, 1, "", "integrate"], [205, 2, 1, "", "intervals"], [205, 2, 1, "", "invert"], [205, 4, 1, "", "is_cyclotomic"], [205, 4, 1, "", "is_ground"], [205, 4, 1, "", "is_homogeneous"], [205, 4, 1, "", "is_irreducible"], [205, 4, 1, "", "is_linear"], [205, 4, 1, "", "is_monic"], [205, 4, 1, "", "is_monomial"], [205, 4, 1, "", "is_multivariate"], [205, 4, 1, "", "is_one"], [205, 4, 1, "", "is_primitive"], [205, 4, 1, "", "is_quadratic"], [205, 4, 1, "", "is_sqf"], [205, 4, 1, "", "is_univariate"], [205, 4, 1, "", "is_zero"], [205, 2, 1, "", "l1_norm"], [205, 2, 1, "", "lcm"], [205, 2, 1, "", "length"], [205, 2, 1, "", "lift"], [205, 2, 1, "", "ltrim"], [205, 2, 1, "", "match"], [205, 2, 1, "", "max_norm"], [205, 2, 1, "", "monic"], [205, 2, 1, "", "monoms"], [205, 2, 1, "", "mul"], [205, 2, 1, "", "mul_ground"], [205, 2, 1, "", "neg"], [205, 2, 1, "", "new"], [205, 2, 1, "", "norm"], [205, 2, 1, "", "nroots"], [205, 2, 1, "", "nth"], [205, 2, 1, "", "nth_power_roots_poly"], [205, 4, 1, "", "one"], [205, 2, 1, "", "pdiv"], [205, 2, 1, "", "per"], [205, 2, 1, "", "pexquo"], [205, 2, 1, "", "pow"], [205, 2, 1, "", "pquo"], [205, 2, 1, "", "prem"], [205, 2, 1, "", "primitive"], [205, 2, 1, "", "quo"], [205, 2, 1, "", "quo_ground"], [205, 2, 1, "", "rat_clear_denoms"], [205, 2, 1, "", "real_roots"], [205, 2, 1, "", "refine_root"], [205, 2, 1, "", "rem"], [205, 2, 1, "", "reorder"], [205, 2, 1, "", "replace"], [205, 2, 1, "", "resultant"], [205, 2, 1, "", "retract"], [205, 2, 1, "", "revert"], [205, 2, 1, "", "root"], [205, 2, 1, "", "same_root"], [205, 2, 1, "", "set_domain"], [205, 2, 1, "", "set_modulus"], [205, 2, 1, "", "shift"], [205, 2, 1, "", "slice"], [205, 2, 1, "", "sqf_list"], [205, 2, 1, "", "sqf_list_include"], [205, 2, 1, "", "sqf_norm"], [205, 2, 1, "", "sqf_part"], [205, 2, 1, "", "sqr"], [205, 2, 1, "", "sturm"], [205, 2, 1, "", "sub"], [205, 2, 1, "", "sub_ground"], [205, 2, 1, "", "subresultants"], [205, 2, 1, "", "terms"], [205, 2, 1, "", "terms_gcd"], [205, 2, 1, "", "termwise"], [205, 2, 1, "", "to_exact"], [205, 2, 1, "", "to_field"], [205, 2, 1, "", "to_ring"], [205, 2, 1, "", "total_degree"], [205, 2, 1, "", "transform"], [205, 2, 1, "", "trunc"], [205, 2, 1, "", "unify"], [205, 4, 1, "", "unit"], [205, 4, 1, "", "zero"]], "sympy.polys.polytools.PurePoly": [[205, 4, 1, "", "free_symbols"]], "sympy.polys.rationaltools": [[205, 3, 1, "", "together"]], "sympy.polys.ring_series": [[206, 3, 1, "", "_tan1"], [206, 3, 1, "", "mul_xin"], [206, 3, 1, "", "pow_xin"], [206, 3, 1, "", "rs_LambertW"], [206, 3, 1, "", "rs_asin"], [206, 3, 1, "", "rs_atan"], [206, 3, 1, "", "rs_atanh"], [206, 3, 1, "", "rs_compose_add"], [206, 3, 1, "", "rs_cos"], [206, 3, 1, "", "rs_cos_sin"], [206, 3, 1, "", "rs_cosh"], [206, 3, 1, "", "rs_cot"], [206, 3, 1, "", "rs_diff"], [206, 3, 1, "", "rs_exp"], [206, 3, 1, "", "rs_fun"], [206, 3, 1, "", "rs_hadamard_exp"], [206, 3, 1, "", "rs_integrate"], [206, 3, 1, "", "rs_is_puiseux"], [206, 3, 1, "", "rs_log"], [206, 3, 1, "", "rs_mul"], [206, 3, 1, "", "rs_newton"], [206, 3, 1, "", "rs_nth_root"], [206, 3, 1, "", "rs_pow"], [206, 3, 1, "", "rs_puiseux"], [206, 3, 1, "", "rs_puiseux2"], [206, 3, 1, "", "rs_series_from_list"], [206, 3, 1, "", "rs_series_inversion"], [206, 3, 1, "", "rs_series_reversion"], [206, 3, 1, "", "rs_sin"], [206, 3, 1, "", "rs_sinh"], [206, 3, 1, "", "rs_square"], [206, 3, 1, "", "rs_subs"], [206, 3, 1, "", "rs_tan"], [206, 3, 1, "", "rs_tanh"], [206, 3, 1, "", "rs_trunc"]], "sympy.polys.rings": [[200, 1, 1, "", "PolyElement"], [200, 1, 1, "", "PolyRing"], [200, 3, 1, "", "ring"], [200, 3, 1, "", "sring"], [200, 3, 1, "", "vring"], [200, 3, 1, "", "xring"]], "sympy.polys.rings.PolyElement": [[200, 2, 1, "", "almosteq"], [200, 2, 1, "", "cancel"], [200, 2, 1, "", "coeff"], [200, 2, 1, "", "coeffs"], [200, 2, 1, "", "const"], [200, 2, 1, "", "content"], [200, 2, 1, "", "copy"], [200, 2, 1, "", "degree"], [200, 2, 1, "", "degrees"], [200, 2, 1, "", "diff"], [200, 2, 1, "", "div"], [200, 2, 1, "", "imul_num"], [200, 2, 1, "", "itercoeffs"], [200, 2, 1, "", "itermonoms"], [200, 2, 1, "", "iterterms"], [200, 2, 1, "", "leading_expv"], [200, 2, 1, "", "leading_monom"], [200, 2, 1, "", "leading_term"], [200, 2, 1, "", "listcoeffs"], [200, 2, 1, "", "listmonoms"], [200, 2, 1, "", "listterms"], [200, 2, 1, "", "monic"], [200, 2, 1, "", "monoms"], [200, 2, 1, "", "primitive"], [200, 2, 1, "", "square"], [200, 2, 1, "", "strip_zero"], [200, 2, 1, "", "tail_degree"], [200, 2, 1, "", "tail_degrees"], [200, 2, 1, "", "terms"]], "sympy.polys.rings.PolyRing": [[200, 2, 1, "", "add"], [200, 2, 1, "", "add_gens"], [200, 2, 1, "", "compose"], [200, 2, 1, "", "drop"], [200, 2, 1, "", "drop_to_ground"], [200, 2, 1, "", "index"], [200, 2, 1, "", "monomial_basis"], [200, 2, 1, "", "mul"]], "sympy.polys.rootoftools": [[205, 1, 1, "", "ComplexRootOf"], [205, 1, 1, "", "RootOf"], [205, 1, 1, "", "RootSum"], [205, 3, 1, "", "rootof"]], "sympy.polys.rootoftools.ComplexRootOf": [[205, 2, 1, "", "_all_roots"], [205, 2, 1, "", "_complexes_index"], [205, 2, 1, "", "_complexes_sorted"], [205, 2, 1, "", "_count_roots"], [205, 2, 1, "", "_ensure_complexes_init"], [205, 2, 1, "", "_ensure_reals_init"], [205, 2, 1, "", "_eval_evalf"], [205, 2, 1, "", "_eval_is_imaginary"], [205, 2, 1, "", "_eval_is_real"], [205, 2, 1, "", "_get_complexes"], [205, 2, 1, "", "_get_complexes_sqf"], [205, 2, 1, "", "_get_interval"], [205, 2, 1, "", "_get_reals"], [205, 2, 1, "", "_get_reals_sqf"], [205, 2, 1, "", "_get_roots"], [205, 2, 1, "", "_indexed_root"], [205, 2, 1, "", "_new"], [205, 2, 1, "", "_postprocess_root"], [205, 2, 1, "", "_preprocess_roots"], [205, 2, 1, "", "_real_roots"], [205, 2, 1, "", "_reals_index"], [205, 2, 1, "", "_reals_sorted"], [205, 2, 1, "", "_refine_complexes"], [205, 2, 1, "", "_reset"], [205, 2, 1, "", "_roots_trivial"], [205, 2, 1, "", "_set_interval"], [205, 2, 1, "", "all_roots"], [205, 2, 1, "", "clear_cache"], [205, 2, 1, "", "eval_approx"], [205, 2, 1, "", "eval_rational"], [205, 2, 1, "", "real_roots"]], "sympy.polys.rootoftools.RootSum": [[205, 2, 1, "", "new"]], "sympy.polys.solvers": [[207, 3, 1, "", "_solve_lin_sys"], [207, 3, 1, "", "_solve_lin_sys_component"], [207, 3, 1, "", "eqs_to_matrix"], [207, 3, 1, "", "solve_lin_sys"], [207, 3, 1, "", "sympy_eqs_to_ring"]], "sympy.polys.specialpolys": [[205, 3, 1, "", "cyclotomic_poly"], [205, 3, 1, "", "interpolating_poly"], [205, 3, 1, "", "random_poly"], [205, 3, 1, "", "swinnerton_dyer_poly"], [205, 3, 1, "", "symmetric_poly"]], "sympy.printing": [[209, 0, 0, "-", "aesaracode"], [209, 0, 0, "-", "c"], [209, 0, 0, "-", "codeprinter"], [209, 0, 0, "-", "conventions"], [209, 0, 0, "-", "cxx"], [209, 0, 0, "-", "fortran"], [209, 0, 0, "-", "gtk"], [209, 0, 0, "-", "jscode"], [209, 0, 0, "-", "julia"], [209, 0, 0, "-", "lambdarepr"], [209, 0, 0, "-", "latex"], [209, 0, 0, "-", "maple"], [209, 0, 0, "-", "mathematica"], [209, 0, 0, "-", "mathml"], [209, 0, 0, "-", "octave"], [209, 0, 0, "-", "precedence"], [209, 0, 0, "-", "pretty"], [209, 0, 0, "-", "preview"], [209, 0, 0, "-", "printer"], [209, 0, 0, "-", "pycode"], [209, 0, 0, "-", "python"], [209, 0, 0, "-", "rcode"], [209, 0, 0, "-", "repr"], [209, 0, 0, "-", "rust"], [209, 0, 0, "-", "smtlib"], [209, 0, 0, "-", "str"], [209, 0, 0, "-", "tree"]], "sympy.printing.aesaracode": [[209, 1, 1, "", "AesaraPrinter"], [209, 3, 1, "", "aesara_code"], [209, 3, 1, "", "aesara_function"], [209, 3, 1, "", "dim_handling"]], "sympy.printing.aesaracode.AesaraPrinter": [[209, 2, 1, "", "doprint"], [209, 5, 1, "", "printmethod"]], "sympy.printing.c": [[209, 1, 1, "", "C89CodePrinter"], [209, 1, 1, "", "C99CodePrinter"], [209, 3, 1, "", "ccode"], [209, 6, 1, "", "known_functions_C89"], [209, 6, 1, "", "known_functions_C99"], [209, 3, 1, "", "print_ccode"]], "sympy.printing.c.C89CodePrinter": [[209, 2, 1, "", "indent_code"], [209, 5, 1, "", "printmethod"]], "sympy.printing.c.C99CodePrinter": [[209, 5, 1, "", "printmethod"]], "sympy.printing.codeprinter": [[209, 7, 1, "", "AssignmentError"], [209, 1, 1, "", "CodePrinter"], [209, 3, 1, "", "cxxcode"]], "sympy.printing.codeprinter.CodePrinter": [[209, 2, 1, "", "doprint"], [209, 5, 1, "", "printmethod"]], "sympy.printing.conventions": [[209, 3, 1, "", "split_super_sub"]], "sympy.printing.cxx": [[209, 1, 1, "", "CXX11CodePrinter"], [209, 1, 1, "", "CXX98CodePrinter"]], "sympy.printing.cxx.CXX11CodePrinter": [[209, 5, 1, "", "printmethod"]], "sympy.printing.cxx.CXX98CodePrinter": [[209, 5, 1, "", "printmethod"]], "sympy.printing.dot": [[209, 3, 1, "", "dotprint"]], "sympy.printing.fortran": [[209, 1, 1, "", "FCodePrinter"], [209, 3, 1, "", "fcode"], [209, 3, 1, "", "print_fcode"]], "sympy.printing.fortran.FCodePrinter": [[209, 2, 1, "", "indent_code"], [209, 5, 1, "", "printmethod"]], "sympy.printing.gtk": [[209, 3, 1, "", "print_gtk"]], "sympy.printing.jscode": [[209, 1, 1, "", "JavascriptCodePrinter"], [209, 3, 1, "", "jscode"], [209, 6, 1, "", "known_functions"]], "sympy.printing.jscode.JavascriptCodePrinter": [[209, 2, 1, "", "indent_code"], [209, 5, 1, "", "printmethod"]], "sympy.printing.julia": [[209, 1, 1, "", "JuliaCodePrinter"], [209, 3, 1, "", "julia_code"], [209, 6, 1, "", "known_fcns_src1"], [209, 6, 1, "", "known_fcns_src2"]], "sympy.printing.julia.JuliaCodePrinter": [[209, 2, 1, "", "indent_code"], [209, 5, 1, "", "printmethod"]], "sympy.printing.lambdarepr": [[209, 1, 1, "", "LambdaPrinter"], [209, 3, 1, "", "lambdarepr"]], "sympy.printing.lambdarepr.LambdaPrinter": [[209, 5, 1, "", "printmethod"]], "sympy.printing.latex": [[209, 1, 1, "", "LatexPrinter"], [209, 6, 1, "", "accepted_latex_functions"], [209, 3, 1, "", "latex"], [209, 3, 1, "", "print_latex"]], "sympy.printing.latex.LatexPrinter": [[209, 2, 1, "", "parenthesize_super"], [209, 5, 1, "", "printmethod"]], "sympy.printing.maple": [[209, 1, 1, "", "MapleCodePrinter"], [209, 3, 1, "", "maple_code"], [209, 3, 1, "", "print_maple_code"]], "sympy.printing.maple.MapleCodePrinter": [[209, 5, 1, "", "printmethod"]], "sympy.printing.mathematica": [[209, 1, 1, "", "MCodePrinter"], [209, 6, 1, "", "known_functions"], [209, 3, 1, "", "mathematica_code"]], "sympy.printing.mathematica.MCodePrinter": [[209, 5, 1, "", "printmethod"]], "sympy.printing.mathml": [[209, 1, 1, "", "MathMLContentPrinter"], [209, 1, 1, "", "MathMLPresentationPrinter"], [209, 1, 1, "", "MathMLPrinterBase"], [209, 3, 1, "", "mathml"], [209, 3, 1, "", "print_mathml"]], "sympy.printing.mathml.MathMLContentPrinter": [[209, 2, 1, "", "mathml_tag"], [209, 5, 1, "", "printmethod"]], "sympy.printing.mathml.MathMLPresentationPrinter": [[209, 2, 1, "", "mathml_tag"], [209, 5, 1, "", "printmethod"]], "sympy.printing.mathml.MathMLPrinterBase": [[209, 2, 1, "", "doprint"]], "sympy.printing.octave": [[209, 1, 1, "", "OctaveCodePrinter"], [209, 6, 1, "", "known_fcns_src1"], [209, 6, 1, "", "known_fcns_src2"], [209, 3, 1, "", "octave_code"]], "sympy.printing.octave.OctaveCodePrinter": [[209, 2, 1, "", "indent_code"], [209, 5, 1, "", "printmethod"]], "sympy.printing.precedence": [[209, 6, 1, "", "PRECEDENCE"], [209, 6, 1, "", "PRECEDENCE_FUNCTIONS"], [209, 6, 1, "", "PRECEDENCE_VALUES"], [209, 3, 1, "", "precedence"]], "sympy.printing.pretty": [[209, 0, 0, "-", "pretty"], [209, 0, 0, "-", "pretty_symbology"], [209, 0, 0, "-", "stringpict"]], "sympy.printing.pretty.pretty": [[209, 1, 1, "", "PrettyPrinter"], [209, 3, 1, "", "pretty"], [209, 3, 1, "", "pretty_print"]], "sympy.printing.pretty.pretty.PrettyPrinter": [[209, 5, 1, "", "printmethod"]], "sympy.printing.pretty.pretty_symbology": [[209, 3, 1, "", "G"], [209, 3, 1, "", "U"], [209, 3, 1, "", "VF"], [209, 3, 1, "", "annotated"], [209, 6, 1, "", "atoms_table"], [209, 6, 1, "", "digit_2txt"], [209, 6, 1, "", "frac"], [209, 3, 1, "", "g"], [209, 6, 1, "", "greek_letters"], [209, 3, 1, "", "hobj"], [209, 3, 1, "", "pretty_atom"], [209, 3, 1, "", "pretty_symbol"], [209, 3, 1, "", "pretty_try_use_unicode"], [209, 3, 1, "", "pretty_use_unicode"], [209, 6, 1, "", "root"], [209, 6, 1, "", "sub"], [209, 6, 1, "", "sup"], [209, 6, 1, "", "symb_2txt"], [209, 3, 1, "", "vobj"], [209, 3, 1, "", "xobj"], [209, 3, 1, "", "xstr"], [209, 3, 1, "", "xsym"]], "sympy.printing.pretty.stringpict": [[209, 1, 1, "", "prettyForm"], [209, 1, 1, "", "stringPict"]], "sympy.printing.pretty.stringpict.prettyForm": [[209, 2, 1, "", "apply"]], "sympy.printing.pretty.stringpict.stringPict": [[209, 2, 1, "", "above"], [209, 2, 1, "", "below"], [209, 2, 1, "", "height"], [209, 2, 1, "", "left"], [209, 2, 1, "", "leftslash"], [209, 2, 1, "", "next"], [209, 2, 1, "", "parens"], [209, 2, 1, "", "render"], [209, 2, 1, "", "right"], [209, 2, 1, "", "root"], [209, 2, 1, "", "stack"], [209, 2, 1, "", "terminal_width"], [209, 2, 1, "", "width"]], "sympy.printing.preview": [[209, 3, 1, "", "preview"]], "sympy.printing.printer": [[209, 1, 1, "", "Printer"]], "sympy.printing.printer.Printer": [[209, 2, 1, "", "_print"], [209, 2, 1, "", "doprint"], [209, 5, 1, "", "printmethod"], [209, 2, 1, "", "set_global_settings"]], "sympy.printing.pycode": [[209, 1, 1, "", "MpmathPrinter"], [209, 3, 1, "", "pycode"]], "sympy.printing.rcode": [[209, 1, 1, "", "RCodePrinter"], [209, 6, 1, "", "known_functions"], [209, 3, 1, "", "print_rcode"], [209, 3, 1, "", "rcode"]], "sympy.printing.rcode.RCodePrinter": [[209, 2, 1, "", "indent_code"], [209, 5, 1, "", "printmethod"]], "sympy.printing.repr": [[209, 1, 1, "", "ReprPrinter"], [209, 3, 1, "", "srepr"]], "sympy.printing.repr.ReprPrinter": [[209, 2, 1, "", "emptyPrinter"], [209, 5, 1, "", "printmethod"], [209, 2, 1, "", "reprify"]], "sympy.printing.rust": [[209, 1, 1, "", "RustCodePrinter"], [209, 6, 1, "", "known_functions"], [209, 3, 1, "", "rust_code"]], "sympy.printing.rust.RustCodePrinter": [[209, 2, 1, "", "indent_code"], [209, 5, 1, "", "printmethod"]], "sympy.printing.smtlib": [[209, 1, 1, "", "SMTLibPrinter"], [209, 3, 1, "", "smtlib_code"]], "sympy.printing.smtlib.SMTLibPrinter": [[209, 5, 1, "", "_default_settings"], [209, 5, 1, "", "printmethod"]], "sympy.printing.str": [[209, 1, 1, "", "StrPrinter"], [209, 3, 1, "", "sstr"], [209, 3, 1, "", "sstrrepr"]], "sympy.printing.str.StrPrinter": [[209, 5, 1, "", "printmethod"]], "sympy.printing.tree": [[209, 3, 1, "", "pprint_nodes"], [209, 3, 1, "", "print_node"], [209, 3, 1, "", "print_tree"], [209, 3, 1, "", "tree"]], "sympy.series.acceleration": [[216, 3, 1, "", "richardson"], [216, 3, 1, "", "shanks"]], "sympy.series.formal": [[211, 1, 1, "", "FiniteFormalPowerSeries"], [211, 1, 1, "", "FormalPowerSeries"], [211, 1, 1, "", "FormalPowerSeriesCompose"], [211, 1, 1, "", "FormalPowerSeriesInverse"], [211, 1, 1, "", "FormalPowerSeriesProduct"], [211, 3, 1, "", "compute_fps"], [211, 3, 1, "", "exp_re"], [211, 3, 1, "", "fps"], [211, 3, 1, "", "hyper_algorithm"], [211, 3, 1, "", "hyper_re"], [211, 3, 1, "", "rational_algorithm"], [211, 3, 1, "", "rational_independent"], [211, 3, 1, "", "rsolve_hypergeometric"], [211, 3, 1, "", "simpleDE"], [211, 3, 1, "", "solve_de"]], "sympy.series.formal.FormalPowerSeries": [[211, 2, 1, "", "coeff_bell"], [211, 2, 1, "", "compose"], [211, 4, 1, "", "infinite"], [211, 2, 1, "", "integrate"], [211, 2, 1, "", "inverse"], [211, 2, 1, "", "polynomial"], [211, 2, 1, "", "product"], [211, 2, 1, "", "truncate"]], "sympy.series.formal.FormalPowerSeriesCompose": [[211, 4, 1, "", "function"]], "sympy.series.formal.FormalPowerSeriesInverse": [[211, 4, 1, "", "function"]], "sympy.series.formal.FormalPowerSeriesProduct": [[211, 4, 1, "", "function"]], "sympy.series.fourier": [[212, 1, 1, "", "FourierSeries"], [212, 3, 1, "", "fourier_series"]], "sympy.series.fourier.FourierSeries": [[212, 2, 1, "", "scale"], [212, 2, 1, "", "scalex"], [212, 2, 1, "", "shift"], [212, 2, 1, "", "shiftx"], [212, 2, 1, "", "sigma_approximation"], [212, 2, 1, "", "truncate"]], "sympy.series.gruntz": [[216, 1, 1, "", "SubsSet"], [216, 3, 1, "", "build_expression_tree"], [216, 3, 1, "", "calculate_series"], [216, 3, 1, "", "compare"], [216, 3, 1, "", "gruntz"], [216, 3, 1, "", "limitinf"], [216, 3, 1, "", "mrv"], [216, 3, 1, "", "mrv_leadterm"], [216, 3, 1, "", "mrv_max1"], [216, 3, 1, "", "mrv_max3"], [216, 3, 1, "", "rewrite"], [216, 3, 1, "", "sign"]], "sympy.series.gruntz.SubsSet": [[216, 2, 1, "", "copy"], [216, 2, 1, "", "do_subs"], [216, 2, 1, "", "meets"], [216, 2, 1, "", "union"]], "sympy.series.limits": [[216, 1, 1, "", "Limit"], [216, 3, 1, "", "limit"]], "sympy.series.limits.Limit": [[216, 2, 1, "", "doit"]], "sympy.series.limitseq": [[214, 3, 1, "", "difference_delta"], [214, 3, 1, "", "dominant"], [214, 3, 1, "", "limit_seq"]], "sympy.series.order": [[216, 1, 1, "", "Order"]], "sympy.series.order.Order": [[216, 2, 1, "", "contains"]], "sympy.series.residues": [[216, 3, 1, "", "residue"]], "sympy.series.sequences": [[215, 1, 1, "", "EmptySequence"], [215, 1, 1, "", "RecursiveSeq"], [215, 1, 1, "", "SeqAdd"], [215, 1, 1, "", "SeqBase"], [215, 1, 1, "", "SeqFormula"], [215, 1, 1, "", "SeqMul"], [215, 1, 1, "", "SeqPer"], [215, 3, 1, "", "sequence"]], "sympy.series.sequences.EmptySequence": [[215, 2, 1, "", "coeff_mul"]], "sympy.series.sequences.RecursiveSeq": [[215, 4, 1, "", "initial"], [215, 4, 1, "", "interval"], [215, 4, 1, "", "n"], [215, 4, 1, "", "recurrence"], [215, 4, 1, "", "start"], [215, 4, 1, "", "stop"], [215, 4, 1, "", "y"], [215, 4, 1, "", "yn"]], "sympy.series.sequences.SeqAdd": [[215, 2, 1, "", "reduce"]], "sympy.series.sequences.SeqBase": [[215, 2, 1, "", "coeff"], [215, 2, 1, "", "coeff_mul"], [215, 2, 1, "", "find_linear_recurrence"], [215, 4, 1, "", "free_symbols"], [215, 4, 1, "", "gen"], [215, 4, 1, "", "interval"], [215, 4, 1, "", "length"], [215, 4, 1, "", "start"], [215, 4, 1, "", "stop"], [215, 4, 1, "", "variables"]], "sympy.series.sequences.SeqFormula": [[215, 2, 1, "", "coeff_mul"]], "sympy.series.sequences.SeqMul": [[215, 2, 1, "", "reduce"]], "sympy.series.sequences.SeqPer": [[215, 2, 1, "", "coeff_mul"]], "sympy.series.series": [[216, 3, 1, "", "series"]], "sympy.sets": [[217, 0, 0, "-", "conditionset"], [217, 0, 0, "-", "fancysets"], [217, 0, 0, "-", "powerset"], [217, 0, 0, "-", "sets"]], "sympy.sets.conditionset": [[217, 1, 1, "", "ConditionSet"], [217, 1, 1, "", "Contains"], [217, 1, 1, "", "SetKind"]], "sympy.sets.fancysets": [[217, 1, 1, "", "CartesianComplexRegion"], [217, 1, 1, "", "ComplexRegion"], [217, 1, 1, "", "Complexes"], [217, 1, 1, "", "ImageSet"], [217, 1, 1, "", "Integers"], [217, 1, 1, "", "Naturals"], [217, 1, 1, "", "Naturals0"], [217, 1, 1, "", "PolarComplexRegion"], [217, 1, 1, "", "Range"], [217, 1, 1, "", "Rationals"], [217, 1, 1, "", "Reals"], [217, 3, 1, "", "normalize_theta_set"]], "sympy.sets.fancysets.ComplexRegion": [[217, 4, 1, "", "a_interval"], [217, 4, 1, "", "b_interval"], [217, 2, 1, "", "from_real"], [217, 4, 1, "", "psets"], [217, 4, 1, "", "sets"]], "sympy.sets.fancysets.Range": [[217, 2, 1, "", "as_relational"], [217, 4, 1, "", "reversed"]], "sympy.sets.powerset": [[217, 1, 1, "", "PowerSet"]], "sympy.sets.sets": [[217, 1, 1, "", "Complement"], [217, 1, 1, "", "DisjointUnion"], [217, 1, 1, "", "EmptySet"], [217, 1, 1, "", "FiniteSet"], [217, 1, 1, "", "Intersection"], [217, 1, 1, "", "Interval"], [217, 1, 1, "", "ProductSet"], [217, 1, 1, "", "Set"], [217, 1, 1, "", "SymmetricDifference"], [217, 1, 1, "", "Union"], [217, 1, 1, "", "UniversalSet"], [217, 3, 1, "", "imageset"]], "sympy.sets.sets.Complement": [[217, 2, 1, "", "as_relational"], [217, 2, 1, "", "reduce"]], "sympy.sets.sets.FiniteSet": [[217, 2, 1, "", "as_relational"]], "sympy.sets.sets.Intersection": [[217, 2, 1, "", "as_relational"]], "sympy.sets.sets.Interval": [[217, 2, 1, "", "Lopen"], [217, 2, 1, "", "Ropen"], [217, 2, 1, "", "as_relational"], [217, 4, 1, "", "end"], [217, 4, 1, "", "is_left_unbounded"], [217, 4, 1, "", "is_right_unbounded"], [217, 4, 1, "", "left_open"], [217, 2, 1, "", "open"], [217, 4, 1, "", "right_open"], [217, 4, 1, "", "start"]], "sympy.sets.sets.ProductSet": [[217, 4, 1, "", "is_iterable"]], "sympy.sets.sets.Set": [[217, 4, 1, "", "boundary"], [217, 4, 1, "", "closure"], [217, 2, 1, "", "complement"], [217, 2, 1, "", "contains"], [217, 4, 1, "", "inf"], [217, 4, 1, "", "interior"], [217, 2, 1, "", "intersect"], [217, 2, 1, "", "intersection"], [217, 4, 1, "", "is_closed"], [217, 2, 1, "", "is_disjoint"], [217, 4, 1, "", "is_open"], [217, 2, 1, "", "is_proper_subset"], [217, 2, 1, "", "is_proper_superset"], [217, 2, 1, "", "is_subset"], [217, 2, 1, "", "is_superset"], [217, 2, 1, "", "isdisjoint"], [217, 2, 1, "", "issubset"], [217, 2, 1, "", "issuperset"], [217, 4, 1, "", "kind"], [217, 4, 1, "", "measure"], [217, 2, 1, "", "powerset"], [217, 4, 1, "", "sup"], [217, 2, 1, "", "symmetric_difference"], [217, 2, 1, "", "union"]], "sympy.sets.sets.SymmetricDifference": [[217, 2, 1, "", "as_relational"]], "sympy.sets.sets.Union": [[217, 2, 1, "", "as_relational"]], "sympy.simplify": [[221, 0, 0, "-", "combsimp"], [221, 0, 0, "-", "cse_main"], [221, 0, 0, "-", "epathtools"], [221, 0, 0, "-", "hyperexpand"], [219, 0, 0, "-", "hyperexpand_doc"], [221, 0, 0, "-", "powsimp"], [221, 0, 0, "-", "radsimp"], [221, 0, 0, "-", "ratsimp"], [12, 0, 0, "-", "simplify"], [221, 0, 0, "-", "sqrtdenest"], [221, 0, 0, "-", "trigsimp"]], "sympy.simplify.combsimp": [[221, 3, 1, "", "combsimp"]], "sympy.simplify.cse_main": [[221, 3, 1, "", "cse"], [221, 3, 1, "", "opt_cse"], [221, 3, 1, "", "tree_cse"]], "sympy.simplify.epathtools": [[221, 1, 1, "", "EPath"], [221, 3, 1, "", "epath"]], "sympy.simplify.epathtools.EPath": [[221, 2, 1, "", "apply"], [221, 2, 1, "", "select"]], "sympy.simplify.fu": [[218, 3, 1, "", "TR0"], [218, 3, 1, "", "TR1"], [218, 3, 1, "", "TR10"], [218, 3, 1, "", "TR10i"], [218, 3, 1, "", "TR11"], [218, 3, 1, "", "TR111"], [218, 3, 1, "", "TR12"], [218, 3, 1, "", "TR12i"], [218, 3, 1, "", "TR13"], [218, 3, 1, "", "TR14"], [218, 3, 1, "", "TR15"], [218, 3, 1, "", "TR16"], [218, 3, 1, "", "TR2"], [218, 3, 1, "", "TR22"], [218, 3, 1, "", "TR2i"], [218, 3, 1, "", "TR3"], [218, 3, 1, "", "TR4"], [218, 3, 1, "", "TR5"], [218, 3, 1, "", "TR6"], [218, 3, 1, "", "TR7"], [218, 3, 1, "", "TR8"], [218, 3, 1, "", "TR9"], [218, 3, 1, "", "TRmorrie"], [218, 3, 1, "", "TRpower"], [218, 3, 1, "", "fu"]], "sympy.simplify.hyperexpand": [[221, 3, 1, "", "hyperexpand"]], "sympy.simplify.powsimp": [[221, 3, 1, "", "powdenest"], [221, 3, 1, "", "powsimp"]], "sympy.simplify.radsimp": [[221, 3, 1, "", "collect"], [221, 3, 1, "", "collect_const"], [221, 3, 1, "", "collect_sqrt"], [221, 3, 1, "", "fraction"], [221, 3, 1, "", "rad_rationalize"], [221, 3, 1, "", "radsimp"], [221, 3, 1, "", "rcollect"]], "sympy.simplify.ratsimp": [[221, 3, 1, "", "ratsimp"], [221, 3, 1, "", "ratsimpmodprime"]], "sympy.simplify.simplify": [[221, 3, 1, "", "besselsimp"], [221, 3, 1, "", "hypersimilar"], [221, 3, 1, "", "hypersimp"], [221, 3, 1, "", "kroneckersimp"], [221, 3, 1, "", "logcombine"], [221, 3, 1, "", "nsimplify"], [221, 3, 1, "", "nthroot"], [221, 3, 1, "", "posify"], [221, 3, 1, "", "separatevars"], [221, 3, 1, "", "simplify"]], "sympy.simplify.sqrtdenest": [[221, 3, 1, "", "sqrtdenest"]], "sympy.simplify.trigsimp": [[221, 3, 1, "", "trigsimp"]], "sympy.solvers.deutils": [[227, 3, 1, "", "ode_order"]], "sympy.solvers.diophantine.diophantine": [[222, 1, 1, "", "BinaryQuadratic"], [222, 1, 1, "", "CubicThue"], [222, 1, 1, "", "DiophantineEquationType"], [222, 1, 1, "", "DiophantineSolutionSet"], [222, 1, 1, "", "GeneralPythagorean"], [222, 1, 1, "", "GeneralSumOfEvenPowers"], [222, 1, 1, "", "GeneralSumOfSquares"], [222, 1, 1, "", "HomogeneousGeneralQuadratic"], [222, 1, 1, "", "HomogeneousTernaryQuadratic"], [222, 1, 1, "", "HomogeneousTernaryQuadraticNormal"], [222, 1, 1, "", "InhomogeneousGeneralQuadratic"], [222, 1, 1, "", "InhomogeneousTernaryQuadratic"], [222, 1, 1, "", "Linear"], [222, 3, 1, "", "PQa"], [222, 1, 1, "", "Univariate"], [222, 3, 1, "", "base_solution_linear"], [222, 3, 1, "", "classify_diop"], [222, 3, 1, "", "cornacchia"], [222, 3, 1, "", "descent"], [222, 3, 1, "", "diop_DN"], [222, 3, 1, "", "diop_bf_DN"], [222, 3, 1, "", "diop_general_pythagorean"], [222, 3, 1, "", "diop_general_sum_of_even_powers"], [222, 3, 1, "", "diop_general_sum_of_squares"], [222, 3, 1, "", "diop_linear"], [222, 3, 1, "", "diop_quadratic"], [222, 3, 1, "", "diop_solve"], [222, 3, 1, "", "diop_ternary_quadratic"], [222, 3, 1, "", "diop_ternary_quadratic_normal"], [222, 3, 1, "", "diophantine"], [222, 3, 1, "", "divisible"], [222, 3, 1, "", "equivalent"], [222, 3, 1, "", "find_DN"], [222, 3, 1, "", "gaussian_reduce"], [222, 3, 1, "", "holzer"], [222, 3, 1, "", "ldescent"], [222, 3, 1, "", "merge_solution"], [222, 3, 1, "", "parametrize_ternary_quadratic"], [222, 3, 1, "", "partition"], [222, 3, 1, "", "power_representation"], [222, 3, 1, "", "prime_as_sum_of_two_squares"], [222, 3, 1, "", "reconstruct"], [222, 3, 1, "", "sqf_normal"], [222, 3, 1, "", "square_factor"], [222, 3, 1, "", "sum_of_four_squares"], [222, 3, 1, "", "sum_of_powers"], [222, 3, 1, "", "sum_of_squares"], [222, 3, 1, "", "sum_of_three_squares"], [222, 3, 1, "", "transformation_to_DN"], [222, 3, 1, "", "transformation_to_normal"]], "sympy.solvers.diophantine.diophantine.DiophantineEquationType": [[222, 2, 1, "", "matches"]], "sympy.solvers": [[224, 0, 0, "-", "inequalities"], [225, 0, 0, "-", "ode"], [226, 0, 0, "-", "pde"], [227, 0, 0, "-", "recurr"], [228, 0, 0, "-", "solveset"]], "sympy.solvers.inequalities": [[224, 3, 1, "", "reduce_abs_inequalities"], [224, 3, 1, "", "reduce_abs_inequality"], [224, 3, 1, "", "reduce_inequalities"], [224, 3, 1, "", "reduce_rational_inequalities"], [224, 3, 1, "", "solve_poly_inequalities"], [224, 3, 1, "", "solve_poly_inequality"], [224, 3, 1, "", "solve_rational_inequalities"], [224, 3, 1, "", "solve_univariate_inequality"]], "sympy.solvers.ode": [[225, 6, 1, "", "allhints"], [225, 3, 1, "", "checkinfsol"], [225, 3, 1, "", "checkodesol"], [225, 3, 1, "", "classify_ode"], [225, 3, 1, "", "constantsimp"], [225, 3, 1, "", "dsolve"], [225, 3, 1, "", "homogeneous_order"], [225, 3, 1, "", "infinitesimals"], [225, 0, 0, "-", "ode"]], "sympy.solvers.ode.lie_group": [[225, 3, 1, "", "lie_heuristic_abaco1_product"], [225, 3, 1, "", "lie_heuristic_abaco1_simple"], [225, 3, 1, "", "lie_heuristic_abaco2_similar"], [225, 3, 1, "", "lie_heuristic_abaco2_unique_general"], [225, 3, 1, "", "lie_heuristic_abaco2_unique_unknown"], [225, 3, 1, "", "lie_heuristic_bivariate"], [225, 3, 1, "", "lie_heuristic_chi"], [225, 3, 1, "", "lie_heuristic_function_sum"], [225, 3, 1, "", "lie_heuristic_linear"]], "sympy.solvers.ode.ode": [[225, 3, 1, "", "_handle_Integral"], [225, 3, 1, "", "_linear_2eq_order1_type6"], [225, 3, 1, "", "_linear_2eq_order1_type7"], [225, 3, 1, "", "_nonlinear_2eq_order1_type1"], [225, 3, 1, "", "_nonlinear_2eq_order1_type2"], [225, 3, 1, "", "_nonlinear_2eq_order1_type3"], [225, 3, 1, "", "_nonlinear_2eq_order1_type4"], [225, 3, 1, "", "_nonlinear_2eq_order1_type5"], [225, 3, 1, "", "_nonlinear_3eq_order1_type1"], [225, 3, 1, "", "_nonlinear_3eq_order1_type2"], [225, 3, 1, "", "_nonlinear_3eq_order1_type3"], [225, 3, 1, "", "_nonlinear_3eq_order1_type4"], [225, 3, 1, "", "_nonlinear_3eq_order1_type5"], [225, 3, 1, "", "constant_renumber"], [225, 3, 1, "", "ode_1st_power_series"], [225, 3, 1, "", "ode_2nd_power_series_ordinary"], [225, 3, 1, "", "ode_2nd_power_series_regular"], [225, 3, 1, "", "ode_sol_simplicity"], [225, 3, 1, "", "odesimp"]], "sympy.solvers.ode.riccati": [[225, 3, 1, "", "compute_m_ybar"], [225, 3, 1, "", "construct_c"], [225, 3, 1, "", "construct_d"], [225, 3, 1, "", "get_gen_sol_from_part_sol"], [225, 3, 1, "", "rational_laurent_series"], [225, 3, 1, "", "remove_redundant_sols"], [225, 3, 1, "", "riccati_inverse_normal"], [225, 3, 1, "", "riccati_normal"], [225, 3, 1, "", "riccati_reduced"], [225, 3, 1, "", "solve_aux_eq"], [225, 3, 1, "", "solve_riccati"]], "sympy.solvers.ode.single": [[225, 1, 1, "", "AlmostLinear"], [225, 1, 1, "", "Bernoulli"], [225, 1, 1, "", "Factorable"], [225, 1, 1, "", "FirstExact"], [225, 1, 1, "", "FirstLinear"], [225, 1, 1, "", "HomogeneousCoeffBest"], [225, 1, 1, "", "HomogeneousCoeffSubsDepDivIndep"], [225, 1, 1, "", "HomogeneousCoeffSubsIndepDivDep"], [225, 1, 1, "", "LieGroup"], [225, 1, 1, "", "LinearCoefficients"], [225, 1, 1, "", "Liouville"], [225, 1, 1, "", "NthAlgebraic"], [225, 1, 1, "", "NthLinearConstantCoeffHomogeneous"], [225, 1, 1, "", "NthLinearConstantCoeffUndeterminedCoefficients"], [225, 1, 1, "", "NthLinearConstantCoeffVariationOfParameters"], [225, 1, 1, "", "NthLinearEulerEqHomogeneous"], [225, 1, 1, "", "NthLinearEulerEqNonhomogeneousUndeterminedCoefficients"], [225, 1, 1, "", "NthLinearEulerEqNonhomogeneousVariationOfParameters"], [225, 1, 1, "", "NthOrderReducible"], [225, 1, 1, "", "RationalRiccati"], [225, 1, 1, "", "RiccatiSpecial"], [225, 1, 1, "", "SecondHypergeometric"], [225, 1, 1, "", "SecondLinearAiry"], [225, 1, 1, "", "SecondLinearBessel"], [225, 1, 1, "", "Separable"], [225, 1, 1, "", "SeparableReduced"]], "sympy.solvers.ode.systems": [[225, 3, 1, "", "canonical_odes"], [225, 3, 1, "", "dsolve_system"], [225, 3, 1, "", "linear_ode_to_matrix"], [225, 3, 1, "", "linodesolve"], [225, 3, 1, "", "linodesolve_type"], [225, 3, 1, "", "matrix_exp"], [225, 3, 1, "", "matrix_exp_jordan_form"]], "sympy.solvers.pde": [[226, 3, 1, "", "checkpdesol"], [226, 3, 1, "", "classify_pde"], [226, 3, 1, "", "pde_1st_linear_constant_coeff"], [226, 3, 1, "", "pde_1st_linear_constant_coeff_homogeneous"], [226, 3, 1, "", "pde_1st_linear_variable_coeff"], [226, 3, 1, "", "pde_separate"], [226, 3, 1, "", "pde_separate_add"], [226, 3, 1, "", "pde_separate_mul"], [226, 3, 1, "", "pdsolve"]], "sympy.solvers.polysys": [[227, 3, 1, "", "solve_poly_system"], [227, 3, 1, "", "solve_triangulated"]], "sympy.solvers.recurr": [[227, 3, 1, "", "rsolve"], [227, 3, 1, "", "rsolve_hyper"], [227, 3, 1, "", "rsolve_poly"], [227, 3, 1, "", "rsolve_ratio"]], "sympy.solvers.solvers": [[227, 3, 1, "", "checksol"], [227, 3, 1, "", "nsolve"], [227, 3, 1, "", "solve"], [227, 3, 1, "", "solve_linear"], [227, 3, 1, "", "solve_linear_system"], [227, 3, 1, "", "solve_linear_system_LU"], [227, 3, 1, "", "solve_undetermined_coeffs"], [227, 3, 1, "", "unrad"]], "sympy.solvers.solveset": [[228, 3, 1, "", "_is_exponential"], [228, 3, 1, "", "_is_logarithmic"], [228, 3, 1, "", "_solve_exponential"], [228, 3, 1, "", "_solve_logarithm"], [228, 3, 1, "", "_transolve"], [228, 3, 1, "", "domain_check"], [228, 3, 1, "", "invert_complex"], [228, 3, 1, "", "invert_real"], [228, 3, 1, "", "linear_eq_to_matrix"], [228, 3, 1, "", "linsolve"], [228, 3, 1, "", "nonlinsolve"], [228, 3, 1, "", "solveset"], [228, 3, 1, "", "solveset_complex"], [228, 3, 1, "", "solveset_real"], [228, 3, 1, "", "solvify"]], "sympy.stats": [[229, 3, 1, "", "Arcsin"], [229, 3, 1, "", "Benini"], [229, 3, 1, "", "Bernoulli"], [229, 1, 1, "", "BernoulliProcess"], [229, 3, 1, "", "Beta"], [229, 3, 1, "", "BetaBinomial"], [229, 3, 1, "", "BetaNoncentral"], [229, 3, 1, "", "BetaPrime"], [229, 3, 1, "", "Binomial"], [229, 3, 1, "", "BoundedPareto"], [229, 3, 1, "", "Cauchy"], [229, 1, 1, "", "CentralMoment"], [229, 3, 1, "", "Chi"], [229, 3, 1, "", "ChiNoncentral"], [229, 3, 1, "", "ChiSquared"], [229, 3, 1, "", "Coin"], [229, 1, 1, "", "ContinuousMarkovChain"], [229, 3, 1, "", "ContinuousRV"], [229, 1, 1, "", "Covariance"], [229, 1, 1, "", "CrossCovarianceMatrix"], [229, 3, 1, "", "Dagum"], [229, 3, 1, "", "Die"], [229, 1, 1, "", "DiscreteMarkovChain"], [229, 3, 1, "", "DiscreteUniform"], [229, 3, 1, "", "E"], [229, 3, 1, "", "Erlang"], [229, 3, 1, "", "ExGaussian"], [229, 1, 1, "", "Expectation"], [229, 1, 1, "", "ExpectationMatrix"], [229, 3, 1, "", "Exponential"], [229, 3, 1, "", "FDistribution"], [229, 3, 1, "", "FiniteRV"], [229, 3, 1, "", "FisherZ"], [229, 3, 1, "", "Frechet"], [229, 3, 1, "", "Gamma"], [229, 3, 1, "", "GammaInverse"], [229, 1, 1, "", "GammaProcess"], [229, 3, 1, "", "GeneralizedMultivariateLogGamma"], [229, 3, 1, "", "GeneralizedMultivariateLogGammaOmega"], [229, 3, 1, "", "Geometric"], [229, 3, 1, "", "Gompertz"], [229, 3, 1, "", "Gumbel"], [229, 3, 1, "", "Hermite"], [229, 3, 1, "", "Hypergeometric"], [229, 3, 1, "", "JointRV"], [229, 3, 1, "", "Kumaraswamy"], [229, 3, 1, "", "Laplace"], [229, 3, 1, "", "Levy"], [229, 3, 1, "", "LogLogistic"], [229, 3, 1, "", "LogNormal"], [229, 3, 1, "", "Logarithmic"], [229, 3, 1, "", "Logistic"], [229, 3, 1, "", "Lomax"], [229, 3, 1, "", "MatrixGamma"], [229, 3, 1, "", "MatrixNormal"], [229, 3, 1, "", "Maxwell"], [229, 1, 1, "", "Moment"], [229, 3, 1, "", "Moyal"], [229, 3, 1, "", "Multinomial"], [229, 3, 1, "", "MultivariateBeta"], [229, 3, 1, "", "MultivariateEwens"], [229, 3, 1, "", "MultivariateLaplace"], [229, 3, 1, "", "MultivariateNormal"], [229, 3, 1, "", "MultivariateT"], [229, 3, 1, "", "Nakagami"], [229, 3, 1, "", "NegativeBinomial"], [229, 3, 1, "", "NegativeMultinomial"], [229, 3, 1, "", "Normal"], [229, 3, 1, "", "NormalGamma"], [229, 3, 1, "", "P"], [229, 3, 1, "", "Pareto"], [229, 3, 1, "", "Poisson"], [229, 1, 1, "", "PoissonProcess"], [229, 3, 1, "", "PowerFunction"], [229, 1, 1, "", "Probability"], [229, 3, 1, "", "QuadraticU"], [229, 3, 1, "", "Rademacher"], [229, 3, 1, "", "RaisedCosine"], [229, 3, 1, "", "Rayleigh"], [229, 3, 1, "", "Reciprocal"], [229, 3, 1, "", "ShiftedGompertz"], [229, 3, 1, "", "Skellam"], [229, 3, 1, "", "StudentT"], [229, 3, 1, "", "Trapezoidal"], [229, 3, 1, "", "Triangular"], [229, 3, 1, "", "Uniform"], [229, 3, 1, "", "UniformSum"], [229, 1, 1, "", "Variance"], [229, 1, 1, "", "VarianceMatrix"], [229, 3, 1, "", "VonMises"], [229, 3, 1, "", "Wald"], [229, 3, 1, "", "Weibull"], [229, 1, 1, "", "WienerProcess"], [229, 3, 1, "", "WignerSemicircle"], [229, 3, 1, "", "Wishart"], [229, 3, 1, "", "YuleSimon"], [229, 3, 1, "", "Zeta"], [229, 3, 1, "", "cmoment"], [229, 3, 1, "", "correlation"], [229, 3, 1, "", "coskewness"], [229, 3, 1, "", "covariance"], [229, 0, 0, "-", "crv"], [229, 0, 0, "-", "crv_types"], [229, 3, 1, "", "density"], [229, 3, 1, "", "entropy"], [229, 3, 1, "", "factorial_moment"], [229, 0, 0, "-", "frv"], [229, 0, 0, "-", "frv_types"], [229, 3, 1, "", "given"], [229, 3, 1, "", "kurtosis"], [229, 3, 1, "", "marginal_distribution"], [229, 3, 1, "", "median"], [229, 3, 1, "", "moment"], [229, 3, 1, "", "quantile"], [229, 0, 0, "-", "rv"], [229, 3, 1, "", "sample"], [229, 3, 1, "", "sample_iter"], [229, 3, 1, "", "skewness"], [229, 3, 1, "", "std"], [229, 3, 1, "", "variance"], [229, 3, 1, "", "where"]], "sympy.stats.BernoulliProcess": [[229, 2, 1, "", "expectation"], [229, 2, 1, "", "probability"]], "sympy.stats.DiscreteMarkovChain": [[229, 2, 1, "", "absorbing_probabilities"], [229, 2, 1, "", "canonical_form"], [229, 2, 1, "", "communication_classes"], [229, 2, 1, "", "decompose"], [229, 2, 1, "", "fixed_row_vector"], [229, 2, 1, "", "fundamental_matrix"], [229, 4, 1, "", "limiting_distribution"], [229, 2, 1, "", "sample"], [229, 2, 1, "", "stationary_distribution"], [229, 4, 1, "", "transition_probabilities"]], "sympy.stats.compound_rv": [[229, 1, 1, "", "CompoundDistribution"]], "sympy.stats.crv": [[229, 1, 1, "", "ContinuousDomain"], [229, 1, 1, "", "ContinuousPSpace"]], "sympy.stats.crv_types": [[229, 1, 1, "", "NormalPSpace"]], "sympy.stats.crv_types.sympy.stats": [[229, 3, 1, "", "Die"], [229, 3, 1, "", "Normal"]], "sympy.stats.frv": [[229, 1, 1, "", "FiniteDomain"], [229, 1, 1, "", "FinitePSpace"]], "sympy.stats.frv_types": [[229, 1, 1, "", "DiePSpace"]], "sympy.stats.rv": [[229, 1, 1, "", "ConditionalDomain"], [229, 1, 1, "", "PSpace"], [229, 1, 1, "", "ProductDomain"], [229, 1, 1, "", "ProductPSpace"], [229, 1, 1, "", "RandomDomain"], [229, 1, 1, "", "RandomSymbol"], [229, 1, 1, "", "SingleDomain"], [229, 1, 1, "", "SinglePSpace"], [229, 3, 1, "", "pspace"], [229, 3, 1, "", "random_symbols"], [229, 3, 1, "", "rs_swap"], [229, 3, 1, "", "sampling_E"], [229, 3, 1, "", "sampling_P"], [229, 3, 1, "", "sampling_density"]], "sympy.tensor": [[230, 0, 0, "-", "array"], [233, 0, 0, "-", "index_methods"], [234, 0, 0, "-", "indexed"], [235, 0, 0, "-", "tensor"], [236, 0, 0, "-", "toperators"]], "sympy.tensor.array": [[230, 1, 1, "", "ImmutableDenseNDimArray"], [230, 1, 1, "", "ImmutableSparseNDimArray"], [230, 1, 1, "", "MutableDenseNDimArray"], [230, 1, 1, "", "MutableSparseNDimArray"], [230, 3, 1, "", "derive_by_array"], [231, 0, 0, "-", "expressions"], [230, 3, 1, "", "permutedims"], [230, 3, 1, "", "tensorcontraction"], [230, 3, 1, "", "tensordiagonal"], [230, 3, 1, "", "tensorproduct"]], "sympy.tensor.index_methods": [[233, 3, 1, "", "get_contraction_structure"], [233, 3, 1, "", "get_indices"]], "sympy.tensor.indexed": [[234, 1, 1, "", "Idx"], [234, 1, 1, "", "Indexed"], [234, 1, 1, "", "IndexedBase"]], "sympy.tensor.indexed.Idx": [[234, 4, 1, "", "label"], [234, 4, 1, "", "lower"], [234, 4, 1, "", "upper"]], "sympy.tensor.indexed.Indexed": [[234, 4, 1, "", "base"], [234, 4, 1, "", "indices"], [234, 4, 1, "", "ranges"], [234, 4, 1, "", "rank"], [234, 4, 1, "", "shape"]], "sympy.tensor.indexed.IndexedBase": [[234, 4, 1, "", "label"], [234, 4, 1, "", "offset"], [234, 4, 1, "", "shape"], [234, 4, 1, "", "strides"]], "sympy.tensor.tensor": [[235, 1, 1, "", "TensAdd"], [235, 1, 1, "", "TensExpr"], [235, 1, 1, "", "TensMul"], [235, 1, 1, "", "TensorHead"], [235, 1, 1, "", "TensorIndex"], [235, 1, 1, "", "TensorIndexType"], [235, 1, 1, "", "TensorSymmetry"], [235, 1, 1, "", "TensorType"], [235, 1, 1, "", "_TensorManager"], [235, 3, 1, "", "canon_bp"], [235, 3, 1, "", "riemann_cyclic"], [235, 3, 1, "", "riemann_cyclic_replace"], [235, 3, 1, "", "tensor_heads"], [235, 3, 1, "", "tensorsymmetry"]], "sympy.tensor.tensor.TensAdd": [[235, 2, 1, "", "canon_bp"], [235, 2, 1, "", "contract_metric"]], "sympy.tensor.tensor.TensExpr": [[235, 2, 1, "", "get_matrix"], [235, 2, 1, "", "replace_with_arrays"]], "sympy.tensor.tensor.TensMul": [[235, 2, 1, "", "canon_bp"], [235, 2, 1, "", "contract_metric"], [235, 2, 1, "", "get_free_indices"], [235, 2, 1, "", "get_indices"], [235, 2, 1, "", "perm2tensor"], [235, 2, 1, "", "sorted_components"], [235, 2, 1, "", "split"]], "sympy.tensor.tensor.TensorHead": [[235, 2, 1, "", "commutes_with"]], "sympy.tensor.tensor.TensorSymmetry": [[235, 2, 1, "", "direct_product"], [235, 2, 1, "", "fully_symmetric"], [235, 2, 1, "", "no_symmetry"], [235, 2, 1, "", "riemann"]], "sympy.tensor.tensor._TensorManager": [[235, 2, 1, "", "clear"], [235, 2, 1, "", "comm_i2symbol"], [235, 2, 1, "", "comm_symbols2i"], [235, 2, 1, "", "get_comm"], [235, 2, 1, "", "set_comm"], [235, 2, 1, "", "set_comms"]], "sympy.tensor.toperators": [[236, 1, 1, "", "PartialDerivative"]], "sympy.testing": [[238, 0, 0, "-", "pytest"], [239, 0, 0, "-", "randtest"], [240, 0, 0, "-", "runtests"]], "sympy.testing.pytest": [[238, 3, 1, "", "SKIP"], [238, 3, 1, "", "nocache_fail"], [238, 3, 1, "", "raises"], [238, 3, 1, "", "warns"], [238, 3, 1, "", "warns_deprecated_sympy"]], "sympy.testing.runtests": [[240, 1, 1, "", "PyTestReporter"], [240, 1, 1, "", "Reporter"], [240, 1, 1, "", "SymPyDocTestFinder"], [240, 1, 1, "", "SymPyDocTestRunner"], [240, 1, 1, "", "SymPyOutputChecker"], [240, 1, 1, "", "SymPyTestResults"], [240, 3, 1, "", "convert_to_native_paths"], [240, 3, 1, "", "doctest"], [240, 3, 1, "", "get_sympy_dir"], [240, 3, 1, "", "raise_on_deprecated"], [240, 3, 1, "", "run_all_tests"], [240, 3, 1, "", "run_in_subprocess_with_hash_randomization"], [240, 3, 1, "", "split_list"], [240, 3, 1, "", "sympytestfile"], [240, 3, 1, "", "test"]], "sympy.testing.runtests.PyTestReporter": [[240, 2, 1, "", "write"]], "sympy.testing.runtests.SymPyDocTestRunner": [[240, 2, 1, "", "run"]], "sympy.testing.runtests.SymPyOutputChecker": [[240, 2, 1, "", "check_output"]], "sympy.testing.runtests.SymPyTestResults": [[240, 5, 1, "", "attempted"], [240, 5, 1, "", "failed"]], "sympy.utilities": [[241, 0, 0, "-", "autowrap"], [242, 0, 0, "-", "codegen"], [243, 0, 0, "-", "decorator"], [244, 0, 0, "-", "enumerative"], [245, 0, 0, "-", "exceptions"], [247, 0, 0, "-", "iterables"], [248, 0, 0, "-", "lambdify"], [249, 0, 0, "-", "memoization"], [250, 0, 0, "-", "misc"], [251, 0, 0, "-", "pkgdata"], [252, 0, 0, "-", "source"], [253, 0, 0, "-", "timeutils"]], "sympy.utilities.autowrap": [[241, 1, 1, "", "CodeWrapper"], [241, 1, 1, "", "CythonCodeWrapper"], [241, 1, 1, "", "DummyWrapper"], [241, 1, 1, "", "F2PyCodeWrapper"], [241, 1, 1, "", "UfuncifyCodeWrapper"], [241, 3, 1, "", "autowrap"], [241, 3, 1, "", "binary_function"], [241, 3, 1, "", "ufuncify"]], "sympy.utilities.autowrap.CythonCodeWrapper": [[241, 2, 1, "", "dump_pyx"]], "sympy.utilities.autowrap.UfuncifyCodeWrapper": [[241, 2, 1, "", "dump_c"]], "sympy.utilities.codegen": [[242, 1, 1, "", "Argument"], [242, 1, 1, "", "CCodeGen"], [242, 1, 1, "", "CodeGen"], [242, 1, 1, "", "DataType"], [242, 1, 1, "", "FCodeGen"], [242, 1, 1, "", "JuliaCodeGen"], [242, 1, 1, "", "OctaveCodeGen"], [242, 1, 1, "", "OutputArgument"], [242, 1, 1, "", "Result"], [242, 1, 1, "", "Routine"], [242, 1, 1, "", "RustCodeGen"], [242, 3, 1, "", "codegen"], [242, 3, 1, "", "get_default_datatype"], [242, 3, 1, "", "make_routine"]], "sympy.utilities.codegen.CCodeGen": [[242, 2, 1, "", "dump_c"], [242, 2, 1, "", "dump_h"], [242, 2, 1, "", "get_prototype"]], "sympy.utilities.codegen.CodeGen": [[242, 2, 1, "", "dump_code"], [242, 2, 1, "", "routine"], [242, 2, 1, "", "write"]], "sympy.utilities.codegen.FCodeGen": [[242, 2, 1, "", "dump_f95"], [242, 2, 1, "", "dump_h"], [242, 2, 1, "", "get_interface"]], "sympy.utilities.codegen.JuliaCodeGen": [[242, 2, 1, "", "dump_jl"], [242, 2, 1, "", "routine"]], "sympy.utilities.codegen.OctaveCodeGen": [[242, 2, 1, "", "dump_m"], [242, 2, 1, "", "routine"]], "sympy.utilities.codegen.Routine": [[242, 4, 1, "", "result_variables"], [242, 4, 1, "", "variables"]], "sympy.utilities.codegen.RustCodeGen": [[242, 2, 1, "", "dump_rs"], [242, 2, 1, "", "get_prototype"], [242, 2, 1, "", "routine"]], "sympy.utilities.decorator": [[243, 3, 1, "", "conserve_mpmath_dps"], [243, 3, 1, "", "deprecated"], [243, 3, 1, "", "doctest_depends_on"], [243, 3, 1, "", "memoize_property"], [243, 1, 1, "", "no_attrs_in_subclass"], [243, 3, 1, "", "public"], [243, 3, 1, "", "threaded"], [243, 3, 1, "", "threaded_factory"], [243, 3, 1, "", "xthreaded"]], "sympy.utilities.enumerative": [[244, 1, 1, "", "MultisetPartitionTraverser"], [244, 3, 1, "", "factoring_visitor"], [244, 3, 1, "", "list_visitor"], [244, 3, 1, "", "multiset_partitions_taocp"]], "sympy.utilities.enumerative.MultisetPartitionTraverser": [[244, 2, 1, "", "count_partitions"], [244, 2, 1, "", "enum_all"], [244, 2, 1, "", "enum_large"], [244, 2, 1, "", "enum_range"], [244, 2, 1, "", "enum_small"]], "sympy.utilities.exceptions": [[245, 7, 1, "", "SymPyDeprecationWarning"], [245, 3, 1, "", "ignore_warnings"], [245, 3, 1, "", "sympy_deprecation_warning"]], "sympy.utilities.iterables": [[247, 1, 1, "", "NotIterable"], [247, 3, 1, "", "binary_partitions"], [247, 3, 1, "", "bracelets"], [247, 3, 1, "", "capture"], [247, 3, 1, "", "common_prefix"], [247, 3, 1, "", "common_suffix"], [247, 3, 1, "", "connected_components"], [247, 3, 1, "", "dict_merge"], [247, 3, 1, "", "filter_symbols"], [247, 3, 1, "", "flatten"], [247, 3, 1, "", "generate_bell"], [247, 3, 1, "", "generate_derangements"], [247, 3, 1, "", "generate_involutions"], [247, 3, 1, "", "generate_oriented_forest"], [247, 3, 1, "", "group"], [247, 3, 1, "", "has_dups"], [247, 3, 1, "", "has_variety"], [247, 3, 1, "", "ibin"], [247, 3, 1, "", "iproduct"], [247, 3, 1, "", "is_palindromic"], [247, 3, 1, "", "is_sequence"], [247, 3, 1, "", "iterable"], [247, 3, 1, "", "kbins"], [247, 3, 1, "", "least_rotation"], [247, 3, 1, "", "minlex"], [247, 3, 1, "", "multiset"], [247, 3, 1, "", "multiset_combinations"], [247, 3, 1, "", "multiset_derangements"], [247, 3, 1, "", "multiset_partitions"], [247, 3, 1, "", "multiset_permutations"], [247, 3, 1, "", "necklaces"], [247, 3, 1, "", "numbered_symbols"], [247, 3, 1, "", "ordered_partitions"], [247, 3, 1, "", "partitions"], [247, 3, 1, "", "permute_signs"], [247, 3, 1, "", "postfixes"], [247, 3, 1, "", "prefixes"], [247, 3, 1, "", "random_derangement"], [247, 3, 1, "", "reshape"], [247, 3, 1, "", "rotate_left"], [247, 3, 1, "", "rotate_right"], [247, 3, 1, "", "rotations"], [247, 3, 1, "", "roundrobin"], [247, 3, 1, "", "runs"], [247, 3, 1, "", "sift"], [247, 3, 1, "", "signed_permutations"], [247, 3, 1, "", "strongly_connected_components"], [247, 3, 1, "", "subsets"], [247, 3, 1, "", "take"], [247, 3, 1, "", "topological_sort"], [247, 3, 1, "", "unflatten"], [247, 3, 1, "", "uniq"], [247, 3, 1, "", "variations"]], "sympy.utilities.lambdify": [[248, 3, 1, "", "implemented_function"], [248, 3, 1, "", "lambdastr"], [248, 3, 1, "", "lambdify"]], "sympy.utilities.memoization": [[249, 3, 1, "", "assoc_recurrence_memo"], [249, 3, 1, "", "recurrence_memo"]], "sympy.utilities.misc": [[250, 3, 1, "", "as_int"], [250, 3, 1, "", "debug"], [250, 3, 1, "", "debug_decorator"], [250, 3, 1, "", "filldedent"], [250, 3, 1, "", "find_executable"], [250, 3, 1, "", "func_name"], [250, 3, 1, "", "ordinal"], [250, 3, 1, "", "rawlines"], [250, 3, 1, "", "replace"], [250, 3, 1, "", "strlines"], [250, 3, 1, "", "translate"]], "sympy.utilities.pkgdata": [[251, 3, 1, "", "get_resource"]], "sympy.utilities.source": [[252, 3, 1, "", "get_class"], [252, 3, 1, "", "get_mod_func"], [252, 3, 1, "", "source"]], "sympy.utilities.timeutils": [[253, 3, 1, "", "timed"]], "sympy.vector.coordsysrect": [[254, 1, 1, "", "CoordSys3D"]], "sympy.vector.coordsysrect.CoordSys3D": [[254, 2, 1, "", "__init__"], [254, 2, 1, "", "create_new"], [254, 2, 1, "", "locate_new"], [254, 2, 1, "", "orient_new"], [254, 2, 1, "", "orient_new_axis"], [254, 2, 1, "", "orient_new_body"], [254, 2, 1, "", "orient_new_quaternion"], [254, 2, 1, "", "orient_new_space"], [254, 2, 1, "", "position_wrt"], [254, 2, 1, "", "rotation_matrix"], [254, 2, 1, "", "scalar_map"]], "sympy.vector": [[257, 3, 1, "", "curl"], [257, 3, 1, "", "divergence"], [257, 3, 1, "", "express"], [257, 3, 1, "", "gradient"], [257, 3, 1, "", "is_conservative"], [257, 3, 1, "", "is_solenoidal"], [257, 3, 1, "", "matrix_to_vector"], [257, 3, 1, "", "scalar_potential"], [257, 3, 1, "", "scalar_potential_difference"]], "sympy.vector.deloperator": [[254, 1, 1, "", "Del"]], "sympy.vector.deloperator.Del": [[254, 2, 1, "", "cross"], [254, 2, 1, "", "dot"], [254, 2, 1, "", "gradient"]], "sympy.vector.dyadic": [[254, 1, 1, "", "Dyadic"]], "sympy.vector.dyadic.Dyadic": [[254, 4, 1, "", "components"], [254, 2, 1, "", "cross"], [254, 2, 1, "", "dot"], [254, 2, 1, "", "to_matrix"]], "sympy.vector.implicitregion": [[254, 1, 1, "", "ImplicitRegion"]], "sympy.vector.implicitregion.ImplicitRegion": [[254, 2, 1, "", "multiplicity"], [254, 2, 1, "", "rational_parametrization"], [254, 2, 1, "", "regular_point"], [254, 2, 1, "", "singular_points"]], "sympy.vector.integrals": [[254, 1, 1, "", "ParametricIntegral"], [257, 3, 1, "", "vector_integrate"]], "sympy.vector.orienters": [[256, 1, 1, "", "AxisOrienter"], [256, 1, 1, "", "BodyOrienter"], [256, 1, 1, "", "Orienter"], [256, 1, 1, "", "QuaternionOrienter"], [256, 1, 1, "", "SpaceOrienter"]], "sympy.vector.orienters.AxisOrienter": [[256, 2, 1, "", "__init__"], [256, 2, 1, "", "rotation_matrix"]], "sympy.vector.orienters.BodyOrienter": [[256, 2, 1, "", "__init__"]], "sympy.vector.orienters.Orienter": [[256, 2, 1, "", "rotation_matrix"]], "sympy.vector.orienters.QuaternionOrienter": [[256, 2, 1, "", "__init__"]], "sympy.vector.orienters.SpaceOrienter": [[256, 2, 1, "", "__init__"]], "sympy.vector.parametricregion": [[254, 1, 1, "", "ParametricRegion"]], "sympy.vector.vector": [[254, 1, 1, "", "Vector"]], "sympy.vector.vector.Vector": [[254, 4, 1, "", "components"], [254, 2, 1, "", "cross"], [254, 2, 1, "", "dot"], [254, 2, 1, "", "magnitude"], [254, 2, 1, "", "normalize"], [254, 2, 1, "", "outer"], [254, 2, 1, "", "projection"], [254, 2, 1, "", "separate"], [254, 2, 1, "", "to_matrix"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:property", "5": "py:attribute", "6": "py:data", "7": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "property", "Python property"], "5": ["py", "attribute", "Python attribute"], "6": ["py", "data", "Python data"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"cite": 0, "sympi": [0, 1, 5, 6, 10, 12, 15, 16, 17, 23, 25, 29, 31, 32, 42, 83, 102, 141, 190, 199, 254, 257, 258, 261, 275, 277, 280], "build": [1, 3], "document": [1, 3, 4, 6, 7, 31], "requir": [1, 4], "depend": [1, 3, 138, 199, 259], "docker": 1, "debian": 1, "ubuntu": 1, "fedora": 1, "mac": 1, "window": [1, 195], "10": [1, 10, 104], "doc": [1, 200], "local": 1, "instal": [1, 31, 32, 102, 284], "logo": 1, "view": 1, "auto": 1, "rebuild": 1, "live": 1, "server": 1, "pdf": 1, "debug": 2, "hard": 3, "option": [3, 25, 29, 30, 202], "recommend": [3, 7], "interact": [3, 88, 195], "us": [3, 7, 10, 16, 23, 24, 25, 26, 27, 28, 29, 30, 42, 63, 84, 85, 101, 104, 133, 138, 139, 193, 195, 206, 228, 259], "print": [3, 10, 20, 42, 88, 114, 122, 183, 189, 209, 285], "pars": [3, 30, 102], "logic": [3, 19, 90, 265, 268], "plot": [3, 10, 108, 154, 195], "lambdifi": [3, 10, 101, 248, 275], "code": [3, 4, 5, 7, 10, 42, 44, 114, 193, 209, 252, 265, 267], "gener": [3, 6, 7, 42, 50, 52, 199, 204, 228, 260, 265, 267], "autowrap": [3, 42, 241], "printer": [3, 42, 209, 285], "test": [3, 5, 10, 57, 90, 208, 237, 239, 240, 282], "onli": [3, 23, 228], "statist": 3, "symengin": 3, "backend": [3, 195], "experiment": [3, 102], "rubi": 3, "integr": [3, 10, 64, 68, 82, 84, 85, 86, 87, 114, 197, 204, 264, 276], "sage": 3, "develop": [3, 5, 60], "get": [3, 5, 12, 28], "sourc": [3, 10, 12, 252], "run": [3, 5, 32, 240], "benchmark": 3, "deprec": [4, 10], "polici": 4, "what": [4, 138, 198, 199, 228, 280, 283], "i": [4, 12, 27, 85, 101, 138, 198, 209, 228, 280], "try": 4, "avoid": 4, "backward": 4, "incompat": 4, "chang": [4, 10], "first": [4, 10], "place": 4, "when": [4, 30, 85], "doe": [4, 12, 228], "public": 4, "api": [4, 31, 81, 85, 87, 110, 117, 187, 228, 241, 242, 255, 265], "Not": [4, 23, 24, 25, 27, 28, 29, 30], "The": [4, 10, 18, 20, 43, 50, 85, 138, 179, 191, 204, 216, 219, 260, 261, 280], "purpos": 4, "technic": 4, "possibl": [4, 25, 282], "how": [4, 21, 31, 85, 193, 228], "long": 4, "should": [4, 101], "last": 4, "checklist": 4, "ad": 4, "releas": 4, "note": [4, 20, 60, 72, 138, 216, 218, 278, 287], "entri": [4, 96], "environ": 5, "setup": 5, "git": [5, 32], "virtual": 5, "docstr": [6, 7, 103, 106, 115, 116, 118, 119, 120, 121, 122, 123, 185, 186, 188, 189, 254, 256, 257], "style": [6, 7], "guid": [6, 7, 21, 31, 134, 191, 262], "guidelin": [6, 7], "format": [6, 7, 10, 30], "section": 6, "1": [6, 10, 85, 104, 124, 138, 150], "singl": [6, 12, 14, 23], "sentenc": 6, "summari": 6, "2": [6, 10, 85, 104, 124, 138], "explan": [6, 13, 31], "3": [6, 10, 87, 104, 124, 175], "exampl": [6, 20, 23, 24, 27, 28, 29, 33, 60, 72, 84, 87, 100, 104, 111, 125, 138, 142, 146, 177, 179, 193, 208, 209, 216, 219, 229, 230, 231, 234, 260, 280, 286], "4": [6, 10, 104], "paramet": [6, 24, 219, 228], "5": [6, 10, 104], "see": [6, 60, 247, 260], "also": [6, 60, 247], "6": [6, 10, 104], "refer": [6, 18, 31, 34, 41, 59, 60, 62, 72, 78, 85, 87, 93, 94, 96, 98, 100, 102, 117, 140, 146, 149, 179, 191, 193, 194, 195, 196, 200, 202, 204, 205, 206, 216, 218, 219, 222, 228, 241, 242, 262, 265], "sampl": [6, 10], "class": [6, 15, 41, 42, 59, 62, 94, 96, 98, 100, 138, 184, 195, 204, 209, 222, 230, 254, 256], "ar": [6, 23, 193, 199, 228], "mathemat": [6, 12, 28, 141], "function": [6, 10, 12, 20, 23, 27, 28, 30, 42, 50, 59, 60, 66, 67, 68, 78, 79, 82, 83, 85, 90, 96, 100, 102, 104, 114, 139, 161, 164, 185, 186, 190, 195, 197, 199, 200, 205, 208, 209, 219, 222, 225, 226, 230, 257, 261, 285, 286], "best": [6, 7, 20], "practic": [6, 7, 20], "write": [6, 7, 20], "import": [6, 10], "sphinx": 6, "cross": 6, "referenc": 6, "type": [7, 14, 23, 42, 68, 185, 228, 229], "narr": 7, "markdown": 7, "prefer": [7, 30], "math": [7, 42], "latex": [7, 102, 285], "head": 7, "spell": 7, "punctuat": 7, "capit": 7, "tone": 7, "contribut": [8, 9, 31, 206], "make": [9, 25, 30], "list": [10, 12, 14, 23, 28], "activ": 10, "silenc": 10, "warn": [10, 245], "version": 10, "12": 10, "new": [10, 259], "joint": [10, 118, 135, 229], "coordin": [10, 114, 128, 138, 195, 258, 259, 261, 263], "intermedi": 10, "frame": [10, 193], "attach": 10, "point": [10, 20, 64, 75, 114, 183, 192, 258], "argument": [10, 12, 228], "11": [10, 104], "mathematica": [10, 209], "parser": [10, 124], "redund": 10, "static": 10, "method": [10, 16, 20, 26, 32, 119, 128, 131, 132, 133, 136, 137, 138, 209, 226, 228, 233, 259, 282], "carmichael": 10, "check": [10, 185], "hadamardproduct": 10, "matadd": 10, "matmul": 10, "some": [10, 141, 228], "travers": [10, 60], "have": [10, 25, 29, 208], "been": 10, "move": [10, 219], "core": [10, 60, 93], "trace": 10, "compat": [10, 231], "submodul": [10, 72], "9": [10, 104], "expr_free_symbol": 10, "stat": [10, 229], "numsampl": 10, "n": [10, 230, 231], "poli": [10, 198, 199, 200, 207], "solver": [10, 207, 223, 224, 225, 227, 228, 287], "rawmatrix": 10, "non": 10, "expr": [10, 60], "object": [10, 15, 234], "matrix": [10, 26, 38, 93, 96, 97, 138, 229, 282], "get_seg": 10, "attribut": [10, 43, 50], "mdft": 10, "physic": [10, 111, 114, 125, 135, 136, 137, 138, 139, 140, 141, 142, 181, 183, 187, 190, 191, 192, 193, 265, 271], "matric": [10, 16, 26, 91, 92, 93, 94, 95, 96, 98, 111, 113, 231, 265, 269, 282], "privat": 10, "sparsematrix": [10, 98], "_smat": 10, "densematrix": 10, "_mat": 10, "laplace_transform": 10, "nocond": 10, "fals": 10, "8": [10, 104], "theanocod": 10, "assumpt": [10, 15, 18, 20, 37, 60], "handler": [10, 18], "askhandl": 10, "relat": [10, 12, 14, 18, 23, 60, 68, 90, 190, 193, 261], "7": [10, 104], "call": [10, 23, 30], "stochasticprocess": 10, "distribut": [10, 202, 229], "randomindexedsymbol": 10, "discretemarkovchain": 10, "absorbing_probabilit": 10, "util": [10, 42, 57, 58, 77, 96, 147, 204, 227, 246, 253, 265, 273], "misc": [10, 37], "find_execut": 10, "mutabl": 10, "diffgeom": 10, "unicod": [10, 285], "pretti": [10, 209, 285], "stringpict": 10, "prettyform": 10, "pretty_symbologi": 10, "xstr": 10, "pass": 10, "set": [10, 15, 25, 29, 38, 72, 193, 217, 228, 285], "oper": [10, 12, 82, 96, 152, 161, 163, 164, 185, 190, 193, 219, 230, 236, 258, 260, 261, 275, 282], "longer": 10, "accept": 10, "arg": [10, 281], "variou": [10, 208], "randtest": 10, "mix": 10, "polynomi": [10, 28, 68, 82, 197, 199, 200, 201, 202, 204, 205, 206, 208, 227, 286], "express": [10, 12, 24, 25, 27, 28, 42, 72, 79, 82, 90, 93, 102, 116, 199, 208, 231, 259, 275, 281], "binari": 10, "print_cycl": 10, "flag": 10, "combinator": [10, 47], "permut": [10, 51, 52], "string": [10, 18, 30, 275], "fallback": 10, "sympifi": [10, 60], "creat": [10, 12, 20, 27, 96], "an": [10, 25, 27, 72, 124, 179, 219, 228, 281], "indefinit": 10, "eq": [10, 25], "tensor": [10, 56, 68, 173, 232, 235, 236], "fun_ev": 10, "__call__": 10, "tensortyp": 10, "dummy_fmt": 10, "tensorindextyp": 10, "metric": 10, "get_kronecker_delta": 10, "get_epsilon": 10, "tensorsymmetri": 10, "tensorhead": 10, "unit": [10, 178, 179, 180, 182], "quantiti": [10, 177, 179, 181, 259], "is_emptyset": 10, "productset": 10, "iter": [10, 217, 247], "set_potential_energi": 10, "mechan": [10, 18, 105, 114, 117, 125, 134, 135, 136, 137, 138, 139, 140, 141, 142, 161, 229], "condit": [10, 85, 217], "conditionset": 10, "max_degre": 10, "get_upper_degre": 10, "properti": [10, 18, 196], "multivariate_result": 10, "dixonresult": 10, "rh": 10, "default": 10, "0": 10, "tupl": [10, 12, 14, 23, 205], "lambda": 10, "evalu": [10, 12, 20, 28, 64, 82, 141, 281], "differentiate_finit": 10, "data": 10, "clear_cach": 10, "clear_subproduct": 10, "keyword": [10, 12], "is_diagonaliz": 10, "row": [10, 282], "col": 10, "jordan_block": 10, "dimens": [10, 72, 176, 179], "scale_factor": 10, "quanit": 10, "classof": 10, "a2idx": 10, "from": [10, 12, 24, 25, 26, 30, 208, 231], "dot": [10, 285], "product": [10, 63, 162, 173, 230, 260], "column": [10, 282], "vector": [10, 26, 50, 134, 183, 185, 187, 190, 191, 192, 193, 202, 254, 255, 257, 258, 259, 261, 262, 263, 264], "geometri": [10, 62, 72, 196], "line3d": 10, "equat": [10, 22, 24, 25, 26, 27, 28, 29, 30, 136, 137, 138, 177, 197, 222, 227, 228, 287], "need": [10, 179], "k": [10, 200], "modul": [10, 109, 144, 183, 191, 196, 197, 198, 199, 202, 204, 205, 222, 225, 226, 228, 241], "arrai": [10, 230, 231], "conv_": 10, "renam": 10, "from_": 10, "glossari": 11, "gotcha": [12, 18, 124, 278], "pitfal": 12, "introduct": [12, 16, 34, 41, 42, 43, 50, 62, 72, 90, 124, 141, 179, 190, 192, 195, 196, 197, 204, 208, 263, 280], "equal": [12, 24, 25, 278], "sign": [12, 278], "doubl": 12, "variabl": [12, 23, 30, 195, 229, 259], "assign": 12, "between": [12, 18, 181, 199], "symbol": [12, 18, 19, 20, 23, 24, 26, 60, 79, 138, 142, 194, 199, 205, 208, 228, 278, 280], "python": [12, 42], "number": [12, 38, 46, 60, 63, 64, 85, 100, 199, 204, 208, 265, 270], "v": [12, 19, 199], "float": [12, 64], "ration": [12, 199, 200, 205, 208, 211, 225, 286], "immut": [12, 94], "invers": [12, 20, 66, 85], "trig": 12, "sqrt": 12, "special": [12, 17, 42, 68, 205, 217, 286], "dictionari": [12, 14, 28, 29], "help": 12, "within": 12, "solv": [14, 22, 23, 24, 25, 26, 27, 28, 29, 30, 104, 197, 204, 227, 228, 287], "output": [14, 114, 228], "empti": 14, "Of": 14, "valu": [14, 19, 30], "boolean": [14, 19, 90], "classif": 15, "kind": [15, 60], "func": [15, 281], "finit": [16, 40, 43, 196, 199, 202, 204, 208, 219, 229, 276], "differ": [16, 18, 40, 141, 199, 259, 276], "approxim": [16, 28, 42], "deriv": [16, 193, 230, 261, 276], "A": [16, 126, 127, 130, 131, 132, 133, 138, 280, 287], "direct": [16, 261], "topic": [17, 114, 183, 265, 272], "old": [18, 199], "system": [18, 23, 27, 29, 108, 129, 142, 176, 178, 179, 182, 225, 227, 258, 259, 261, 263], "appli": [18, 85, 219], "input": [18, 228], "predic": [18, 37, 38], "abov": 18, "definit": [18, 20, 78], "implic": 18, "interpret": 18, "other": [18, 20, 32, 79, 190, 259], "is_": 18, "implement": [18, 85, 190, 209, 219, 241, 242, 258, 261], "limit": [18, 23, 24, 84, 124, 214, 216, 276], "combin": [18, 82], "fuzzi": 19, "three": [19, 72], "bool": 19, "custom": [20, 195, 209], "easi": 20, "case": [20, 228], "fulli": 20, "defin": 20, "automat": [20, 208], "eval": 20, "remind": 20, "kei": [20, 141, 281], "numer": [20, 27, 28, 30, 64, 82, 87, 101, 114, 141], "evalf": [20, 60, 101, 275], "rewrit": [20, 42, 210, 286], "simplif": [20, 64, 90, 218, 286], "doit": 20, "expand": [20, 208, 210, 286], "differenti": [20, 62, 82, 114, 227, 228, 287], "as_real_imag": 20, "miscellan": [20, 66, 72, 250], "_eval_": 20, "complet": [20, 28, 124], "versin": 20, "divid": 20, "fuse": 20, "multipli": 20, "add": [20, 60], "fma": 20, "addit": [20, 82], "tip": [20, 275, 276, 278, 281, 282], "reduc": [23, 208], "One": [23, 27], "inequ": [23, 224, 227, 228], "algebra": [23, 24, 25, 26, 28, 29, 34, 89, 96, 149, 193, 196, 199, 204, 208, 227, 287], "altern": [23, 24, 26, 27, 28, 29, 193], "consid": [23, 24, 26, 27, 28, 29], "guidanc": [23, 24, 25, 26, 27, 28, 29, 30], "includ": [23, 30], "Be": [23, 24, 25, 26, 27, 28], "result": [23, 24, 25, 26, 27, 28, 29, 208], "extract": [23, 24, 26], "decompos": 23, "reduct": [23, 219], "can": [23, 24, 25, 27, 28, 29, 30], "interest": [23, 280], "per": 23, "That": [23, 24, 25, 27, 29, 30], "all": [23, 24, 25, 27, 28, 29], "return": [23, 228], "period": 23, "which": [23, 25, 29, 101, 209], "cannot": [23, 25, 29], "satisfi": 23, "analyt": [23, 161], "report": [23, 24, 26, 27, 28], "problem": [23, 24, 26, 27, 104, 204, 260], "diophantin": [24, 222, 227, 228], "zero": [24, 25, 30, 108, 202, 208, 282], "specifi": [24, 195], "order": [24, 38, 205, 216, 219], "solut": [24, 25, 26, 27, 28, 29, 30, 161, 228, 260], "work": [24, 26, 72, 208], "With": [24, 25, 26, 27, 28, 29, 30], "verifi": [24, 264], "programmat": [24, 25], "No": [24, 25, 26, 28], "your": 25, "Into": [25, 27, 29], "put": 25, "form": [25, 28, 29, 30, 90, 97, 138, 231], "restrict": 25, "domain": [25, 197, 199, 200, 205, 208, 228], "explicitli": 25, "repres": [25, 28, 30, 85, 169, 199, 204], "infinit": [25, 228], "substitut": [25, 27, 114, 183, 275], "solveset": [25, 228], "necessarili": 25, "interrog": 25, "speed": [25, 26, 28, 29, 30, 114, 138], "up": [25, 26, 29, 30, 285], "close": [25, 28, 29, 30], "usual": 26, "must": 26, "squar": [26, 197], "sever": 26, "same": 26, "element": [26, 138, 199, 204], "find": [27, 28, 204, 205], "complex": [27, 28, 66, 199], "root": [27, 28, 205], "real": [27, 199], "ensur": [27, 30, 228], "found": 27, "given": [27, 29], "interv": [27, 195], "increas": 27, "precis": 27, "scipi": 27, "without": 28, "multipl": [28, 82, 193, 204], "factor": [28, 197, 202, 208, 286], "exact": [28, 30], "real_root": 28, "nroot": 28, "all_root": 28, "tradeoff": 28, "perhap": 28, "implicitli": 28, "crootof": 28, "bug": [28, 87], "linear": [29, 82, 96, 114, 120, 138, 139, 179, 208], "nonlinear": 29, "you": 30, "might": 30, "consist": 30, "ani": [30, 228], "denomin": 30, "do": [30, 228], "simplifi": [30, 42, 202, 220, 221, 286], "welcom": 31, "": [31, 119, 128, 131, 132, 133, 136, 137, 138, 159, 170, 208, 218, 227, 228, 259, 264, 283], "tutori": [31, 222, 274, 279], "anaconda": 32, "mpmath": 32, "question": 32, "abc": 33, "caveat": [33, 102], "quaternion": 34, "ask": 35, "assum": 36, "queri": 37, "content": [37, 47, 67, 80, 86, 201, 213, 223, 232], "perform": 37, "improv": [37, 124], "common": [38, 91, 114, 183, 208, 209, 210], "calculu": [38, 40, 193, 276], "theori": [38, 41, 100, 265, 270], "refin": 39, "singular": [40, 104], "weight": 40, "categori": 41, "base": [41, 62, 96, 196, 197, 208, 215, 228], "diagram": 41, "draw": 41, "codegen": [42, 242], "tool": [42, 99], "abstract": [42, 105, 109, 111, 134, 144, 161, 191, 200], "syntax": 42, "tree": [42, 199, 209, 281], "ast": [42, 124], "predefin": 42, "node": 42, "c": [42, 209], "cfunction": 42, "specif": 42, "cnode": 42, "cxxnode": 42, "fortran": [42, 209], "fnode": 42, "algorithm": [42, 43, 159, 170, 202, 205, 211, 216, 219], "pyutil": 42, "cutil": 42, "futil": 42, "present": [43, 50], "group": [43, 45, 48, 50, 51, 179], "overview": [43, 50, 85], "facil": 43, "construct": [43, 50, 231], "free": [43, 197], "word": [43, 50], "coset": 43, "enumer": [43, 65], "todd": 43, "coxet": 43, "cosett": 43, "compress": 43, "standard": 43, "subgroup": 43, "index": [43, 50, 231, 234], "low": 43, "reidemeist": 43, "schreier": 43, "bibliographi": [43, 50], "grai": 44, "constructor": [45, 205, 282], "nilpot": 46, "abelian": 46, "cyclic": 46, "name": 48, "partit": [49, 247], "polycycl": 50, "polycyclicgroup": 50, "collector": 50, "comput": [50, 85, 101, 161, 208, 280], "minim": [50, 204], "uncollect": 50, "subword": 50, "collect": [50, 210, 286], "expon": [50, 208], "depth": [50, 72], "lead": 50, "polyhedron": 53, "prufer": 54, "sequenc": [54, 82, 202, 205, 214, 215], "subset": [55, 63], "canonic": 56, "concret": 59, "hypergeometr": [59, 68, 79, 82, 211, 219], "term": [59, 208, 210, 216], "cach": 60, "basic": [60, 64, 96, 185, 197, 199, 205, 217, 258, 265, 266, 275, 282], "singleton": [60, 215, 217], "power": [60, 211, 217, 280, 286], "mul": 60, "mod": 60, "multidimension": 60, "contain": 60, "exprtool": 60, "sort": 60, "random": [60, 229], "cryptographi": 61, "discret": [63, 229], "transform": [63, 85, 87, 102, 259], "fast": 63, "fourier": [63, 212], "theoret": 63, "walsh": 63, "hadamard": 63, "m\u00f6biu": 63, "convolut": 63, "cover": 63, "intersect": [63, 72], "accuraci": 64, "error": [64, 68], "handl": [64, 228], "sum": 64, "combinatori": 65, "elementari": [66, 196, 215, 217], "trigonometr": [66, 68, 218, 286], "hyperbol": 66, "integ": [66, 199], "exponenti": [66, 68, 286], "piecewis": 66, "dirac": 68, "delta": 68, "discontinu": 68, "gamma": [68, 111], "beta": 68, "fresnel": 68, "logarithm": [68, 286], "bessel": 68, "airi": 68, "b": 68, "spline": 68, "riemann": 68, "zeta": 68, "ellipt": 68, "mathieu": 68, "orthogon": [68, 205, 261], "jacobi": 68, "gegenbau": 68, "chebyshev": 68, "legendr": 68, "hermit": 68, "laguerr": 68, "spheric": 68, "harmon": [68, 150, 175], "curv": 69, "ellips": 70, "entiti": [71, 72, 195], "avail": 72, "usag": [72, 124, 142, 199, 260], "median": 72, "pappu": 72, "hexagon": 72, "theorem": [72, 85, 264], "futur": [72, 114, 124, 183], "truth": [72, 90], "beyond": 72, "visual": [72, 141], "line": 73, "plane": [74, 85], "polygon": [76, 87], "about": [78, 228, 259, 287], "holonom": [78, 79, 80, 82, 83, 129], "convert": [79, 82, 199, 275], "represent": [79, 83, 179, 193, 199], "meijer": [79, 82, 85, 219], "g": [79, 82, 85, 219], "intern": [81, 85, 87, 199, 202, 204, 222], "composit": 82, "seri": [82, 195, 206, 211, 212, 213, 216, 276], "expans": [82, 216, 219, 276], "current": 84, "polar": [85, 146], "branch": 85, "argand": 85, "tabl": [85, 90, 219], "lookup": 85, "mellin": 85, "converg": 85, "laplac": 85, "thi": [85, 228], "valid": 85, "exist": 85, "formula": [85, 219], "todo": 87, "over": [87, 208, 217], "polytop": 87, "For": 87, "2d": 87, "polyhedra": 87, "session": 88, "lie": [89, 225], "equival": [90, 141], "manipul": [90, 96, 116, 201, 202, 205, 206, 228, 281], "infer": 90, "dens": [92, 199, 200, 202], "block": 93, "immutablematrix": 94, "except": [96, 102, 202, 245], "numpi": 96, "normal": [97, 208], "spars": [98, 99, 199, 200, 202], "immutablesparsematrix": 98, "ntheori": 100, "ecm": 100, "q": 100, "sub": 101, "ufuncifi": 101, "aesara": [101, 209], "so": 101, "mathrm": [102, 285], "runtim": 102, "beam": [103, 104, 105], "bend": 104, "continuum": 105, "truss": [105, 106], "control": [107, 108, 109, 110, 195], "pole": 108, "bode": 108, "impuls": 108, "respons": [108, 209], "step": [108, 228], "ramp": 108, "lti": 110, "high": 111, "energi": [111, 139], "hydrogen": 112, "wavefunct": 112, "potenti": [114, 138, 139, 183, 190, 261], "issu": [114, 124, 138, 183, 282], "advanc": [114, 183, 208, 281, 282], "featur": [114, 183, 277], "choic": 114, "acceler": [114, 183, 192, 216], "interfac": [114, 183, 195, 229], "bodi": [115, 139, 264], "framework": [118, 135], "kane": [119, 128, 131, 132, 136, 138], "lagrang": [119, 128, 133, 137, 138], "mass": [121, 139, 264], "inertia": [121, 139, 183], "particl": [121, 139, 165], "rigidbodi": 121, "mechanics_print": 122, "mprint": 122, "mpprint": 122, "mlatex": 122, "symbolicsystem": [123, 142], "autolev": [124, 141], "dynam": 124, "onlin": 124, "fix": 124, "switch": 124, "bicycl": 126, "four": 127, "bar": 127, "linkag": 127, "nonminim": 128, "pendulum": 128, "multi": 129, "degre": 129, "freedom": 129, "roll": [130, 131, 132, 133], "disc": [130, 131, 132, 133], "constraint": 132, "forc": 132, "classic": [134, 202], "jointsmethod": 135, "structur": [136, 137, 179, 222], "background": 138, "directli": [138, 259], "new_method": 138, "kwarg": 138, "a_and_b": 138, "true": 138, "slow": 138, "ha": 138, "nan": 138, "zoo": 138, "oo": 138, "further": [138, 278], "rigid": 139, "dyadic": [139, 183, 258, 259], "momentum": 139, "angular": [139, 192], "momenta": 139, "kinet": 139, "lagrangian": 139, "user": [141, 222, 225, 226], "rough": 141, "link": 141, "gaussian": [143, 199, 200, 208], "optic": [143, 144], "medium": 145, "wave": 148, "pauli": 149, "quantum": [150, 161, 175], "oscil": [150, 175], "d": [150, 175], "anticommut": 151, "cartesian": 152, "state": [152, 161, 164, 172], "clebsch": 153, "gordan": 153, "coeffici": [153, 202], "circuit": 154, "commut": [155, 196], "constant": [156, 179], "dagger": 157, "gate": 158, "grover": 159, "hilbert": 160, "space": [160, 179, 219], "inner": 162, "helper": [164, 209], "box": 165, "qappli": 166, "qft": 167, "qubit": 168, "shor": 170, "spin": 171, "second": 174, "quantiz": 174, "dimension": 177, "analysi": 177, "philosophi": 179, "behind": 179, "literatur": [179, 203, 208], "prefix": 180, "convers": 181, "referencefram": [183, 193], "dynamicsymbol": 183, "essenti": [184, 186, 254, 257], "field": [185, 190, 199, 202, 204, 208, 261, 263], "kinemat": [188, 192], "kinematic_equ": 188, "scalar": [190, 261, 263], "curl": [190, 261], "diverg": [190, 261, 264], "gradient": [190, 261], "conserv": [190, 261], "solenoid": [190, 261], "veloc": 192, "basi": [193, 202, 204], "wigner": 194, "credit": 194, "copyright": 194, "author": 194, "plotgrid": 195, "pyglet": 195, "mode": 195, "color": 195, "geometr": 195, "ascii": [195, 285], "art": 195, "agca": 196, "ring": [196, 199, 200], "ideal": 196, "homomorph": [196, 204], "syzygi": 196, "extens": [196, 208], "concept": 197, "divis": 197, "factori": 197, "euclidean": 197, "gcd": [197, 202, 208], "lcm": 197, "groebner": [197, 202], "introduc": [198, 199], "domainmatrix": 198, "dup": 199, "dmp": 199, "polyr": 199, "polynomialr": 199, "choos": 199, "unifi": 199, "gf": 200, "p": [200, 204], "zz": 200, "qq": 200, "mpq": 200, "zz_i": 200, "qq_i": 200, "rr": 200, "cc": 200, "x": 200, "ex": 200, "quotient": 200, "level": 202, "multivari": [202, 208], "univari": [202, 208], "remaind": 202, "subresult": 202, "configur": 202, "modular": 202, "undocu": 202, "main": 204, "prime": 204, "decomposit": [204, 205, 208], "adic": 204, "valuat": 204, "subfield": 204, "As": 204, "arithmet": 204, "extra": 205, "monomi": 205, "encod": 205, "formal": [205, 211], "appel": 205, "partial": [205, 208, 227, 228], "fraction": [205, 208, 286], "dispers": 205, "rs_seri": 206, "wester": 208, "articl": 208, "simpl": 208, "support": 208, "back": 208, "cyclotom": 208, "gr\u00f6bner": 208, "mistak": 209, "prettyprint": 209, "rcodeprint": 209, "smt": 209, "lib": 209, "mapl": 209, "javascript": 209, "julia": 209, "octav": 209, "matlab": 209, "rust": 209, "gtk": 209, "lambdaprint": 209, "latexprint": 209, "mathmlprint": 209, "pythoncodeprint": 209, "pythonprint": 209, "srepr": [209, 285], "strprinter": 209, "preview": 209, "codeprint": 209, "preced": 209, "dotprint": 209, "subexpress": 210, "detect": 210, "compound": [215, 217, 229], "recurs": [215, 281], "gruntz": 216, "more": [216, 259, 280], "intuit": 216, "residu": 216, "setkind": 217, "hongguang": 218, "fu": 218, "rule": [218, 260], "notat": 219, "increment": 219, "decrement": 219, "indic": 219, "around": 219, "loos": 219, "end": 219, "confluenc": 219, "extend": 219, "od": [225, 227, 228], "hint": [225, 226], "heurist": 225, "riccati": 225, "inform": [225, 226], "pde": [226, 227, 228], "ordinari": [227, 228], "deutil": 227, "recurr": 227, "de": [227, 228], "wrong": 228, "why": [228, 280], "we": 228, "emploi": 228, "search": 228, "deal": 228, "where": 228, "known": 228, "plan": 228, "transolv": 228, "continu": [229, 286], "stochast": 229, "process": 229, "dim": [230, 231], "contract": 230, "diagon": [230, 282], "explicit": 231, "pytest": 238, "randomis": 239, "detail": [241, 242, 258], "routin": 242, "decor": 243, "enum": 244, "variat": 247, "memoiz": 249, "pkgdata": 251, "inspect": 252, "time": 253, "orient": [256, 259], "locat": 259, "coordsys3d": 259, "orient_new": 259, "AND": 259, "quadrilater": 260, "third": 260, "del": [260, 261], "curvilinear": 261, "applic": 264, "calcul": 264, "perimet": 264, "surfac": 264, "area": 264, "volum": 264, "flux": 264, "stoke": 264, "introductori": [274, 279], "quick": [275, 276, 278, 281, 282], "two": 278, "final": 278, "read": 278, "understand": 281, "through": 281, "invari": 281, "walk": 281, "prevent": 281, "shape": 282, "access": 282, "delet": 282, "insert": 282, "determin": 282, "rref": 282, "nullspac": 282, "columnspac": 282, "eigenvalu": 282, "eigenvector": 282, "next": 283, "preliminari": 284, "exercis": 284, "str": 285, "mathml": 285, "cancel": 286, "apart": 286, "trigsimp": 286, "expand_trig": 286, "powsimp": 286, "expand_power_exp": 286, "expand_power_bas": 286, "powdenest": 286, "expand_log": 286, "logcombin": 286, "expand_func": 286, "hyperexpand": 286, "combsimp": 286, "gammasimp": 286}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"Citing SymPy": [[0, "citing-sympy"]], "Build the Documentation": [[1, "build-the-documentation"]], "Required dependencies": [[1, "required-dependencies"]], "Docker": [[1, "docker"], [1, "id3"], [1, "id4"]], "Debian/Ubuntu": [[1, "debian-ubuntu"]], "Fedora": [[1, "fedora"]], "Mac": [[1, "mac"]], "Windows 10": [[1, "windows-10"]], "Build the Docs": [[1, "build-the-docs"]], "Local Installation": [[1, "local-installation"], [1, "id5"]], "SymPy Logos": [[1, "sympy-logos"]], "View the Docs": [[1, "view-the-docs"]], "Auto-Rebuild with the Live Server": [[1, "auto-rebuild-with-the-live-server"]], "PDF Documentation": [[1, "pdf-documentation"]], "Debugging": [[2, "debugging"]], "Dependencies": [[3, "dependencies"]], "Hard Dependencies": [[3, "hard-dependencies"]], "Optional Dependencies": [[3, "optional-dependencies"]], "Recommended Optional Dependencies": [[3, "recommended-optional-dependencies"]], "Interactive Use": [[3, "interactive-use"]], "Printing": [[3, "printing"], [20, "printing"], [88, "module-sympy.interactive.printing"], [114, "printing"], [183, "printing"], [209, "printing"], [285, "printing"]], "Parsing": [[3, "parsing"], [102, "module-sympy.parsing"]], "Logic": [[3, "logic"], [90, "module-sympy.logic"], [265, "logic"], [268, "logic"]], "Plotting": [[3, "plotting"], [195, "module-sympy.plotting.plot"]], "lambdify": [[3, "lambdify"], [275, "lambdify"]], "Code Generation": [[3, "code-generation"], [42, "code-generation"], [265, "code-generation"], [267, "code-generation"]], "Autowrap": [[3, "autowrap"], [42, "autowrap"]], "Code Printers": [[3, "code-printers"]], "Testing-Only Dependencies": [[3, "testing-only-dependencies"]], "Statistics": [[3, "statistics"]], "Optional SymEngine Backend": [[3, "optional-symengine-backend"]], "Experimental Rubi Integrator": [[3, "experimental-rubi-integrator"]], "Sage": [[3, "sage"]], "Development Dependencies": [[3, "development-dependencies"]], "Getting the Source Code": [[3, "getting-the-source-code"]], "Running the Tests": [[3, "running-the-tests"]], "Building the Documentation": [[3, "building-the-documentation"]], "Running the Benchmarks": [[3, "running-the-benchmarks"]], "Deprecation Policy": [[4, "deprecation-policy"]], "What is a deprecation?": [[4, "what-is-a-deprecation"]], "Try to avoid backwards incompatible changes in the first place": [[4, "try-to-avoid-backwards-incompatible-changes-in-the-first-place"]], "When does a change require deprecation?": [[4, "when-does-a-change-require-deprecation"]], "Public API": [[4, null]], "Not Public API": [[4, null]], "The purpose of deprecation": [[4, "the-purpose-of-deprecation"]], "When it is not technically possible to deprecate": [[4, "when-it-is-not-technically-possible-to-deprecate"]], "How long should deprecations last?": [[4, "how-long-should-deprecations-last"]], "How to deprecate code": [[4, "how-to-deprecate-code"]], "Checklist": [[4, "checklist"]], "Adding the deprecation to the code": [[4, "adding-the-deprecation-to-the-code"]], "Documenting a deprecation": [[4, "documenting-a-deprecation"]], "Release notes entry": [[4, "release-notes-entry"]], "Development Environment Setup": [[5, "development-environment-setup"]], "Git Setup": [[5, "git-setup"]], "Get the SymPy Code": [[5, "get-the-sympy-code"]], "Virtual Environment Setup": [[5, "virtual-environment-setup"]], "Run the Tests": [[5, "run-the-tests"]], "SymPy Docstrings Style Guide": [[6, "sympy-docstrings-style-guide"]], "General Guidelines": [[6, "general-guidelines"], [7, "general-guidelines"]], "Formatting": [[6, "formatting"]], "Sections": [[6, "sections"]], "1. Single-Sentence Summary": [[6, "single-sentence-summary"]], "2. Explanation Section": [[6, "explanation-section"]], "3. Examples Section": [[6, "examples-section"]], "4. Parameters Section": [[6, "parameters-section"]], "5. See Also Section": [[6, "see-also-section"]], "6. References Section": [[6, "references-section"]], "Sample Docstring": [[6, "sample-docstring"]], "Docstrings for Classes that are Mathematical Functions": [[6, "docstrings-for-classes-that-are-mathematical-functions"]], "Best Practices for Writing Docstrings": [[6, "best-practices-for-writing-docstrings"]], "Importing Docstrings into the Sphinx Documentation": [[6, "importing-docstrings-into-the-sphinx-documentation"]], "Cross-Referencing": [[6, "cross-referencing"]], "Docstring Style Guide": [[7, "docstring-style-guide"]], "Types of Documentation": [[7, "types-of-documentation"]], "Narrative Documentation Guidelines": [[7, "narrative-documentation-guidelines"]], "Documentation using Markdown": [[7, "documentation-using-markdown"]], "Best Practices for Writing Documentation": [[7, "best-practices-for-writing-documentation"]], "Formatting Preferences": [[7, "formatting-preferences"]], "Math": [[7, "math"]], "LaTeX Recommendations": [[7, "latex-recommendations"]], "Code": [[7, "code"]], "Headings": [[7, "headings"]], "Style Preferences": [[7, "style-preferences"]], "Spelling and Punctuation": [[7, "spelling-and-punctuation"]], "Capitalization": [[7, "capitalization"]], "Tone Preferences": [[7, "tone-preferences"]], "Contributing": [[8, "contributing"], [31, "contributing"]], "Making a Contribution": [[9, "making-a-contribution"]], "List of active deprecations": [[10, "list-of-active-deprecations"]], "Silencing SymPy Deprecation Warnings": [[10, "silencing-sympy-deprecation-warnings"]], "Version 1.12": [[10, "version-1-12"]], "New Joint coordinate format": [[10, "new-joint-coordinate-format"]], "New Joint intermediate frames": [[10, "new-joint-intermediate-frames"]], "Change in joint attachment point argument": [[10, "change-in-joint-attachment-point-argument"]], "Version 1.11": [[10, "version-1-11"]], "New Mathematica code parser": [[10, "new-mathematica-code-parser"]], "Redundant static methods in carmichael": [[10, "redundant-static-methods-in-carmichael"]], "The check argument to HadamardProduct, MatAdd and MatMul": [[10, "the-check-argument-to-hadamardproduct-matadd-and-matmul"]], "Version 1.10": [[10, "version-1-10"]], "Some traversal functions have been moved": [[10, "some-traversal-functions-have-been-moved"]], "sympy.core.trace": [[10, "sympy-core-trace"]], "The sympy.core.compatibility submodule": [[10, "the-sympy-core-compatibility-submodule"]], "Version 1.9": [[10, "version-1-9"]], "expr_free_symbols": [[10, "expr-free-symbols"]], "sympy.stats.sample(numsamples=n)": [[10, "sympy-stats-sample-numsamples-n"]], "sympy.polys.solvers.RawMatrix": [[10, "sympy-polys-solvers-rawmatrix"]], "Non-Expr objects in a Matrix": [[10, "non-expr-objects-in-a-matrix"]], "The get_segments attribute of plotting objects": [[10, "the-get-segments-attribute-of-plotting-objects"]], "The mdft function in sympy.physics.matrices": [[10, "the-mdft-function-in-sympy-physics-matrices"]], "The private SparseMatrix._smat and DenseMatrix._mat attributes": [[10, "the-private-sparsematrix-smat-and-densematrix-mat-attributes"]], "laplace_transform of a Matrix with noconds=False": [[10, "laplace-transform-of-a-matrix-with-noconds-false"]], "Version 1.8": [[10, "version-1-8"]], "sympy.printing.theanocode": [[10, "sympy-printing-theanocode"]], "sympy.assumptions.handlers.AskHandler and related methods": [[10, "sympy-assumptions-handlers-askhandler-and-related-methods"]], "Version 1.7.1": [[10, "version-1-7-1"]], "Calling sympy.stats.StochasticProcess.distribution with RandomIndexedSymbol": [[10, "calling-sympy-stats-stochasticprocess-distribution-with-randomindexedsymbol"]], "Version 1.7": [[10, "version-1-7"]], "sympy.stats.DiscreteMarkovChain.absorbing_probabilites()": [[10, "sympy-stats-discretemarkovchain-absorbing-probabilites"]], "sympy.utilities.misc.find_executable()": [[10, "sympy-utilities-misc-find-executable"]], "Mutable attributes in sympy.diffgeom": [[10, "mutable-attributes-in-sympy-diffgeom"]], "The unicode argument and attribute to sympy.printing.pretty.stringpict.prettyForm and the sympy.printing.pretty.pretty_symbology.xstr function": [[10, "the-unicode-argument-and-attribute-to-sympy-printing-pretty-stringpict-prettyform-and-the-sympy-printing-pretty-pretty-symbology-xstr-function"]], "Passing the arguments to lambdify as a set": [[10, "passing-the-arguments-to-lambdify-as-a-set"]], "Core operators no longer accept non-Expr args": [[10, "core-operators-no-longer-accept-non-expr-args"]], "Version 1.6": [[10, "version-1-6"]], "Various sympy.utilities submodules have moved": [[10, "various-sympy-utilities-submodules-have-moved"]], "sympy.testing.randtest": [[10, "sympy-testing-randtest"]], "Mixing Poly and non-polynomial expressions in binary operations": [[10, "mixing-poly-and-non-polynomial-expressions-in-binary-operations"]], "The print_cyclic flag of sympy.combinatorics.Permutation": [[10, "the-print-cyclic-flag-of-sympy-combinatorics-permutation"]], "Using integrate with Poly": [[10, "using-integrate-with-poly"]], "The string fallback in sympify()": [[10, "the-string-fallback-in-sympify"]], "Creating an indefinite Integral with an Eq argument": [[10, "creating-an-indefinite-integral-with-an-eq-argument"]], "Version 1.5": [[10, "version-1-5"]], "Tensor.fun_eval and Tensor.__call__": [[10, "tensor-fun-eval-and-tensor-call"]], "TensorType": [[10, "tensortype"]], "The dummy_fmt argument to TensorIndexType": [[10, "the-dummy-fmt-argument-to-tensorindextype"]], "The metric argument to TensorIndexType": [[10, "the-metric-argument-to-tensorindextype"]], "The get_kronecker_delta() and get_epsilon() methods of TensorIndexType": [[10, "the-get-kronecker-delta-and-get-epsilon-methods-of-tensorindextype"]], "The tensorsymmetry() function": [[10, "the-tensorsymmetry-function"]], "The tensorhead() function": [[10, "the-tensorhead-function"]], "Methods to sympy.physics.units.Quantity": [[10, "methods-to-sympy-physics-units-quantity"]], "The is_EmptySet attribute of sets": [[10, "the-is-emptyset-attribute-of-sets"]], "ProductSet(iterable)": [[10, "productset-iterable"]], "The set_potential_energy method in sympy.physics.mechanics": [[10, "the-set-potential-energy-method-in-sympy-physics-mechanics"]], "Using a set for the condition in ConditionSet": [[10, "using-a-set-for-the-condition-in-conditionset"]], "The max_degree and get_upper_degree properties of sympy.polys.multivariate_resultants.DixonResultant": [[10, "the-max-degree-and-get-upper-degree-properties-of-sympy-polys-multivariate-resultants-dixonresultant"]], "Eq(expr) with the rhs defaulting to 0": [[10, "eq-expr-with-the-rhs-defaulting-to-0"]], "Non-tuple iterable for the first argument to Lambda": [[10, "non-tuple-iterable-for-the-first-argument-to-lambda"]], "The evaluate flag to differentiate_finite": [[10, "the-evaluate-flag-to-differentiate-finite"]], "Version 1.4": [[10, "version-1-4"]], "TensorIndexType.data and related methods": [[10, "tensorindextype-data-and-related-methods"]], "The clear_cache and clear_subproducts keywords to Matrix.is_diagonalizable": [[10, "the-clear-cache-and-clear-subproducts-keywords-to-matrix-is-diagonalizable"]], "The rows and cols keyword arguments to Matrix.jordan_block": [[10, "the-rows-and-cols-keyword-arguments-to-matrix-jordan-block"]], "Version 1.3": [[10, "version-1-3"]], "The source() function": [[10, "the-source-function"]], "The dimension and scale_factor arguments to sympy.physics.units.Quanitity": [[10, "the-dimension-and-scale-factor-arguments-to-sympy-physics-units-quanitity"]], "Importing classof and a2idx from sympy.matrices.matrices": [[10, "importing-classof-and-a2idx-from-sympy-matrices-matrices"]], "Version 1.2": [[10, "version-1-2"]], "Dot product of non-row/column vectors": [[10, "dot-product-of-non-row-column-vectors"]], "sympy.geometry.Line3D.equation no longer needs the k argument": [[10, "sympy-geometry-line3d-equation-no-longer-needs-the-k-argument"]], "Modules sympy.tensor.array.expressions.conv_* renamed to sympy.tensor.array.expressions.from_*": [[10, "modules-sympy-tensor-array-expressions-conv-renamed-to-sympy-tensor-array-expressions-from"]], "Glossary": [[11, "glossary"]], "Gotchas and Pitfalls": [[12, "gotchas-and-pitfalls"]], "Introduction": [[12, "introduction"], [16, "introduction"], [34, "introduction"], [41, "introduction"], [42, "introduction"], [43, "introduction"], [50, "introduction"], [62, "introduction"], [72, "introduction"], [90, "introduction"], [124, "introduction"], [141, "introduction"], [179, "introduction"], [190, "introduction"], [195, "introduction"], [196, "introduction"], [197, "introduction"], [204, "introduction"], [208, "introduction"], [263, "introduction"], [280, "introduction"]], "Equals Signs (=)": [[12, "equals-signs"]], "Single Equals Sign": [[12, "single-equals-sign"]], "Double Equals Signs": [[12, "double-equals-signs"]], "Variables": [[12, "variables"]], "Variables Assignment does not Create a Relation Between Expressions": [[12, "variables-assignment-does-not-create-a-relation-between-expressions"]], "Symbols": [[12, "symbols"], [278, "symbols"]], "Functions": [[12, "functions"], [67, "functions"], [230, "functions"]], "Symbolic Expressions": [[12, "symbolic-expressions"]], "Python numbers vs. SymPy Numbers": [[12, "python-numbers-vs-sympy-numbers"]], "Evaluating Expressions with Floats and Rationals": [[12, "evaluating-expressions-with-floats-and-rationals"]], "Immutability of Expressions": [[12, "immutability-of-expressions"]], "Mathematical Operators": [[12, "mathematical-operators"]], "Inverse Trig Functions": [[12, "inverse-trig-functions"]], "Sqrt is not a Function": [[12, "sqrt-is-not-a-function"]], "Special Symbols": [[12, "special-symbols"]], "Lists": [[12, "lists"]], "Dictionaries": [[12, "dictionaries"]], "Tuples": [[12, "tuples"]], "Keyword Arguments": [[12, "keyword-arguments"]], "Getting help from within SymPy": [[12, "getting-help-from-within-sympy"]], "help()": [[12, "help"]], "source()": [[12, "source"]], "Explanations": [[13, "explanations"], [31, "explanations"]], "Solve Output by Type": [[14, "solve-output-by-type"]], "Empty List": [[14, "empty-list"]], "List Of Values": [[14, "list-of-values"]], "Single Dictionary": [[14, "single-dictionary"]], "List of Tuples": [[14, "list-of-tuples"]], "List of Dictionaries": [[14, "list-of-dictionaries"]], "Boolean or Relational": [[14, "boolean-or-relational"]], "Classification of SymPy objects": [[15, "classification-of-sympy-objects"]], "class": [[15, "class"]], "kind": [[15, "kind"], [60, "module-sympy.core.kind"]], "sets and assumptions": [[15, "sets-and-assumptions"]], "func": [[15, "func"], [281, "func"]], "Finite Difference Approximations to Derivatives": [[16, "finite-difference-approximations-to-derivatives"]], "A Direct Method Using SymPy Matrices": [[16, "a-direct-method-using-sympy-matrices"]], "SymPy Special Topics": [[17, "sympy-special-topics"]], "Assumptions": [[18, "assumptions"], [20, "assumptions"], [37, "module-sympy.assumptions"]], "The (old) assumptions system": [[18, "the-old-assumptions-system"]], "Gotcha: symbols with different assumptions": [[18, "gotcha-symbols-with-different-assumptions"]], "Applying assumptions to string inputs": [[18, "applying-assumptions-to-string-inputs"]], "Predicates": [[18, "predicates"], [38, "id1"]], "Assumptions predicates for the (old) assumptions": [[18, "id28"]], "References for the above definitions": [[18, "references-for-the-above-definitions"]], "Implications": [[18, "implications"]], "Interpretation of the predicates": [[18, "interpretation-of-the-predicates"]], "Other is_* properties": [[18, "other-is-properties"]], "Implementing assumptions handlers": [[18, "implementing-assumptions-handlers"]], "Mechanism of the assumptions system": [[18, "mechanism-of-the-assumptions-system"]], "Limitations": [[18, "limitations"], [24, "limitations"], [84, "limitations"]], "Combining predicates with or": [[18, "combining-predicates-with-or"]], "Relations between different symbols": [[18, "relations-between-different-symbols"]], "Symbolic and fuzzy booleans": [[19, "symbolic-and-fuzzy-booleans"]], "Symbolic Boolean vs three valued bool": [[19, "symbolic-boolean-vs-three-valued-bool"]], "Three-valued logic with fuzzy bools": [[19, "three-valued-logic-with-fuzzy-bools"]], "Three-valued logic with symbolic Booleans": [[19, "three-valued-logic-with-symbolic-booleans"]], "Writing Custom Functions": [[20, "writing-custom-functions"]], "Easy Cases: Fully Symbolic or Fully Evaluated": [[20, "easy-cases-fully-symbolic-or-fully-evaluated"]], "The Fully Symbolic Case": [[20, "the-fully-symbolic-case"]], "The Fully Evaluated Case": [[20, "the-fully-evaluated-case"]], "Creating a Custom Function": [[20, "creating-a-custom-function"]], "Defining Automatic Evaluation with eval()": [[20, "defining-automatic-evaluation-with-eval"]], "Reminder": [[20, null]], "Best Practices for eval()": [[20, "best-practices-for-eval"]], "Key Point": [[20, null]], "Note": [[20, null]], "Numerical Evaluation with evalf()": [[20, "numerical-evaluation-with-evalf"]], "Rewriting and Simplification": [[20, "rewriting-and-simplification"]], "rewrite()": [[20, "rewrite"]], "doit()": [[20, "doit"]], "expand()": [[20, "expand"]], "Differentiation": [[20, "differentiation"]], "Other Methods": [[20, "other-methods"], [32, "other-methods"]], "inverse()": [[20, "inverse"]], "as_real_imag()": [[20, "as-real-imag"]], "Miscellaneous _eval_* methods": [[20, "miscellaneous-eval-methods"]], "Complete Examples": [[20, "complete-examples"]], "Versine": [[20, "versine"]], "Definition": [[20, "definition"], [20, "id2"], [20, "id4"], [78, "definition"]], "Examples": [[20, "examples"], [20, "id3"], [20, "id5"], [23, "examples"], [33, "examples"], [60, "examples"], [60, "id47"], [84, "examples"], [87, "examples"], [87, "id37"], [100, "examples"], [100, "id61"], [104, "examples"], [111, "examples"], [146, "examples"], [177, "examples"], [193, "examples"], [193, "id1"], [208, "examples"], [216, "examples"], [216, "id3"], [229, "examples"], [230, "examples"], [231, "examples"], [234, "examples"]], "divides": [[20, "divides"]], "Fused Multiply-Add (FMA)": [[20, "fused-multiply-add-fma"]], "Additional Tips": [[20, "additional-tips"]], "How-to Guides": [[21, "how-to-guides"], [31, "how-to-guides"]], "Solve Equations": [[22, "solve-equations"]], "Reduce One or a System of Inequalities for a Single Variable Algebraically": [[23, "reduce-one-or-a-system-of-inequalities-for-a-single-variable-algebraically"]], "Alternatives to Consider": [[23, "alternatives-to-consider"], [24, "alternatives-to-consider"], [26, "alternatives-to-consider"], [27, "alternatives-to-consider"], [28, "alternatives-to-consider"], [29, "alternatives-to-consider"]], "Reducing a System of Inequalities for a Single Variable Algebraically": [[23, "reducing-a-system-of-inequalities-for-a-single-variable-algebraically"]], "Reducing One Inequality for a Single Variable Algebraically": [[23, "reducing-one-inequality-for-a-single-variable-algebraically"]], "Guidance": [[23, "guidance"], [24, "guidance"], [25, "guidance"], [26, "guidance"], [27, "guidance"], [28, "guidance"], [29, "guidance"]], "Include the Variable to Be Reduced for in the Function Call": [[23, "include-the-variable-to-be-reduced-for-in-the-function-call"]], "Reduce a System of Inequalities Algebraically": [[23, "reduce-a-system-of-inequalities-algebraically"]], "Use the Result": [[23, "use-the-result"]], "Extract a List of Decomposed Relations": [[23, "extract-a-list-of-decomposed-relations"]], "Extract a Tuple of Relations": [[23, "extract-a-tuple-of-relations"]], "Limitations of Inequality Reduction Using SymPy": [[23, "limitations-of-inequality-reduction-using-sympy"]], "SymPy Can Reduce for Only One Symbol of Interest Per Inequality": [[23, "sympy-can-reduce-for-only-one-symbol-of-interest-per-inequality"]], "Limitations on Types of Inequalities That SymPy Can Solve": [[23, "limitations-on-types-of-inequalities-that-sympy-can-solve"]], "Not All Results Are Returned for Periodic Functions": [[23, "not-all-results-are-returned-for-periodic-functions"]], "Not All Systems of Inequalities Can Be Reduced": [[23, "not-all-systems-of-inequalities-can-be-reduced"]], "Systems of Inequalities Which Cannot Be Satisfied": [[23, "systems-of-inequalities-which-cannot-be-satisfied"]], "Systems of Inequalities That Cannot Be Reduced Analytically": [[23, "systems-of-inequalities-that-cannot-be-reduced-analytically"]], "Inequalities Which Can Be Reduced Analytically, and SymPy Cannot Reduce": [[23, "inequalities-which-can-be-reduced-analytically-and-sympy-cannot-reduce"]], "Report a Problem": [[23, "report-a-problem"], [24, "report-a-problem"], [26, "report-a-problem"], [27, "report-a-problem"]], "Solve a Diophantine Equation Algebraically": [[24, "solve-a-diophantine-equation-algebraically"]], "Example of Solving a Diophantine Equation": [[24, "example-of-solving-a-diophantine-equation"]], "Diophantine Equation Can be Expressed as Expression That Equals Zero": [[24, "diophantine-equation-can-be-expressed-as-expression-that-equals-zero"]], "Specify the Order of Symbols in the Result": [[24, "specify-the-order-of-symbols-in-the-result"]], "Use the Solution Result": [[24, "use-the-solution-result"], [25, "use-the-solution-result"], [26, "use-the-solution-result"], [27, "use-the-solution-result"], [28, "use-the-solution-result"]], "Extract Expressions From the Result": [[24, "extract-expressions-from-the-result"]], "Work With Parameters": [[24, "work-with-parameters"]], "Verify a Solution": [[24, "verify-a-solution"]], "Programmatically Extract Parameter Symbols": [[24, "programmatically-extract-parameter-symbols"]], "Not All Equations Can Be Solved": [[24, "not-all-equations-can-be-solved"], [25, "not-all-equations-can-be-solved"], [28, "not-all-equations-can-be-solved"]], "Equations With No Solution": [[24, "equations-with-no-solution"], [26, "equations-with-no-solution"]], "Solve an Equation Algebraically": [[25, "solve-an-equation-algebraically"], [25, "id1"]], "Make Your Equation Into an Expression That Equals Zero": [[25, "make-your-equation-into-an-expression-that-equals-zero"]], "Put Your Equation Into Eq Form": [[25, "put-your-equation-into-eq-form"]], "Restrict the Domain of Solutions": [[25, "restrict-the-domain-of-solutions"]], "Explicitly Represent Infinite Sets of Possible Solutions": [[25, "explicitly-represent-infinite-sets-of-possible-solutions"]], "Substitute Solutions From solve() Into an Expression": [[25, "substitute-solutions-from-solve-into-an-expression"]], "solveset() Solution Sets Cannot Necessarily Be Interrogated Programmatically": [[25, "solveset-solution-sets-cannot-necessarily-be-interrogated-programmatically"]], "Options That Can Speed up solve()": [[25, "options-that-can-speed-up-solve"], [29, "options-that-can-speed-up-solve"], [30, "options-that-can-speed-up-solve"]], "Equations With No Closed-Form Solution": [[25, "equations-with-no-closed-form-solution"], [28, "equations-with-no-closed-form-solution"]], "Equations Which Have a Closed-Form Solution, and SymPy Cannot Solve": [[25, "equations-which-have-a-closed-form-solution-and-sympy-cannot-solve"], [29, "equations-which-have-a-closed-form-solution-and-sympy-cannot-solve"]], "Solve a Matrix Equation Algebraically": [[26, "solve-a-matrix-equation-algebraically"]], "Solve a Matrix Equation": [[26, "solve-a-matrix-equation"]], "Matrix Usually Must Be Square": [[26, "matrix-usually-must-be-square"]], "Methods for Solving Matrix Equations": [[26, "methods-for-solving-matrix-equations"]], "Solving Several Matrix Equations With the Same Matrix": [[26, "solving-several-matrix-equations-with-the-same-matrix"]], "Work With Symbolic Matrices": [[26, "work-with-symbolic-matrices"]], "Speed up Solving Matrix Equations": [[26, "speed-up-solving-matrix-equations"]], "Use the Solution as a Vector": [[26, "use-the-solution-as-a-vector"]], "Extract Elements From the Solution": [[26, "extract-elements-from-the-solution"]], "Solve One or a System of Equations Numerically": [[27, "solve-one-or-a-system-of-equations-numerically"]], "Example of Numerically Solving an Equation": [[27, "example-of-numerically-solving-an-equation"]], "Find Complex Roots of a Real Function": [[27, "find-complex-roots-of-a-real-function"]], "Ensure the Root Found is in a Given Interval": [[27, "ensure-the-root-found-is-in-a-given-interval"]], "Solve a System of Equations Numerically": [[27, "solve-a-system-of-equations-numerically"]], "Increase Precision of the Solution": [[27, "increase-precision-of-the-solution"]], "Create a Function That Can Be Solved With SciPy": [[27, "create-a-function-that-can-be-solved-with-scipy"]], "Substitute the Result Into an Expression": [[27, "substitute-the-result-into-an-expression"]], "Not all Equations Can be Solved": [[27, "not-all-equations-can-be-solved"]], "Equations With no Solution": [[27, "equations-with-no-solution"]], "Find the Roots of a Polynomial Algebraically or Numerically": [[28, "find-the-roots-of-a-polynomial-algebraically-or-numerically"]], "Example of Finding the Roots of a Polynomial Algebraically": [[28, "example-of-finding-the-roots-of-a-polynomial-algebraically"]], "Functions to Find the Roots of a Polynomial": [[28, "functions-to-find-the-roots-of-a-polynomial"]], "Solve (Find the Roots of) a Polynomial": [[28, "solve-find-the-roots-of-a-polynomial"]], "Algebraic Solution Without Root Multiplicities": [[28, "algebraic-solution-without-root-multiplicities"]], "Algebraic Solution With Root Multiplicities": [[28, "algebraic-solution-with-root-multiplicities"]], "roots": [[28, "roots"]], "Factor the Equation": [[28, "factor-the-equation"]], "Exact Numeric Solution With Root Multiplicities": [[28, "exact-numeric-solution-with-root-multiplicities"]], "real_roots": [[28, "real-roots"]], "Approximate Numeric Solution With Root Multiplicities": [[28, "approximate-numeric-solution-with-root-multiplicities"]], "nroots": [[28, "nroots"]], "Complex Roots": [[28, "complex-roots"]], "List (all_roots, real_roots, nroots)": [[28, "list-all-roots-real-roots-nroots"]], "List of dictionaries (solve)": [[28, "list-of-dictionaries-solve"]], "Dictionary (roots)": [[28, "dictionary-roots"]], "Expression (factor)": [[28, "expression-factor"]], "Tradeoffs": [[28, "tradeoffs"]], "Mathematical Exactness, Completeness of List of Roots, and Speed": [[28, "mathematical-exactness-completeness-of-list-of-roots-and-speed"]], "Get All Roots, Perhaps Implicitly": [[28, "get-all-roots-perhaps-implicitly"]], "Numerically Evaluate CRootOf Roots": [[28, "numerically-evaluate-crootof-roots"]], "Representing Roots": [[28, "representing-roots"]], "Report a Bug": [[28, "report-a-bug"]], "Solve a System of Equations Algebraically": [[29, "solve-a-system-of-equations-algebraically"]], "Examples of Solving a System of Equations Algebraically": [[29, "examples-of-solving-a-system-of-equations-algebraically"]], "Solve a System of Linear Equations Algebraically": [[29, "solve-a-system-of-linear-equations-algebraically"]], "Solve a System of Nonlinear Equations Algebraically": [[29, "solve-a-system-of-nonlinear-equations-algebraically"]], "Solve and Use Results in a Dictionary": [[29, "solve-and-use-results-in-a-dictionary"]], "Solve Into a Solution Given as a Dictionary": [[29, "solve-into-a-solution-given-as-a-dictionary"]], "Use a Solution Given as a Dictionary": [[29, "use-a-solution-given-as-a-dictionary"]], "Solve Results in a Set": [[29, "solve-results-in-a-set"]], "Not All Systems of Equations Can be Solved": [[29, "not-all-systems-of-equations-can-be-solved"]], "Systems of Equations With no Solution": [[29, "systems-of-equations-with-no-solution"]], "Systems of Equations With no Closed-Form Solution": [[29, "systems-of-equations-with-no-closed-form-solution"]], "Solving Guidance": [[30, "solving-guidance"]], "Numeric Solutions": [[30, "numeric-solutions"]], "Equations With no Closed-Form Solution": [[30, "equations-with-no-closed-form-solution"]], "When You Might Prefer a Numeric Solution": [[30, "when-you-might-prefer-a-numeric-solution"]], "Use Exact Values": [[30, "use-exact-values"]], "Include the Variable to be Solved for in the Function Call": [[30, "include-the-variable-to-be-solved-for-in-the-function-call"]], "Ensure Consistent Formatting From solve()": [[30, "ensure-consistent-formatting-from-solve"]], "Include Solutions Making Any Denominator Zero": [[30, "include-solutions-making-any-denominator-zero"]], "Do Not Simplify Solutions": [[30, "do-not-simplify-solutions"]], "Parse a String Representing the Equation": [[30, "parse-a-string-representing-the-equation"]], "Welcome to SymPy\u2019s documentation!": [[31, "welcome-to-sympy-s-documentation"]], "Installation": [[31, "installation"], [32, "installation"], [284, "installation"]], "Tutorials": [[31, "tutorials"], [274, "tutorials"]], "API Reference": [[31, "api-reference"], [241, "module-sympy.utilities.autowrap"], [242, "module-sympy.utilities.codegen"], [265, "api-reference"]], "Anaconda": [[32, "anaconda"]], "Git": [[32, "git"]], "Run SymPy": [[32, "run-sympy"]], "mpmath": [[32, "mpmath"]], "Questions": [[32, "questions"]], "abc": [[33, "module-sympy.abc"]], "Caveats": [[33, "caveats"]], "Algebras": [[34, "algebras"]], "Quaternion Reference": [[34, "module-sympy.algebras"]], "Ask": [[35, "module-sympy.assumptions.ask"]], "Assume": [[36, "module-sympy.assumptions.assume"]], "Predicate": [[37, "predicate"]], "Querying": [[37, "querying"]], "Contents": [[37, "contents"], [47, "contents"], [67, "contents"], [80, "contents"], [86, "contents"], [201, "contents"], [213, "contents"], [223, "contents"], [232, "contents"]], "Performance improvements": [[37, "performance-improvements"]], "Misc": [[37, "misc"]], "Common": [[38, "common"]], "Calculus": [[38, "calculus"], [40, "module-sympy.calculus"], [276, "calculus"]], "Matrix": [[38, "matrix"]], "Number Theory": [[38, "number-theory"], [100, "module-sympy.ntheory.generate"], [265, "number-theory"], [270, "number-theory"]], "Order": [[38, "order"]], "Sets": [[38, "sets"], [217, "sets"]], "Refine": [[39, "module-sympy.assumptions.refine"]], "Singularities": [[40, "singularities"]], "Finite difference weights": [[40, "finite-difference-weights"]], "Category Theory": [[41, "category-theory"]], "Base Class Reference": [[41, "module-sympy.categories"], [62, "base-class-reference"]], "Diagram Drawing": [[41, "module-sympy.categories.diagram_drawing"]], "Code printers (sympy.printing)": [[42, "code-printers-sympy-printing"]], "Codegen (sympy.utilities.codegen)": [[42, "codegen-sympy-utilities-codegen"]], "Classes and functions for rewriting expressions (sympy.codegen.rewriting)": [[42, "module-sympy.codegen.rewriting"]], "Tools for simplifying expressions using approximations (sympy.codegen.approximations)": [[42, "module-sympy.codegen.approximations"]], "Classes for abstract syntax trees (sympy.codegen.ast)": [[42, "module-sympy.codegen.ast"]], "AST Type Tree": [[42, "ast-type-tree"]], "Predefined types": [[42, "predefined-types"]], "Using the nodes": [[42, "using-the-nodes"]], "Special C math functions (sympy.codegen.cfunctions)": [[42, "module-sympy.codegen.cfunctions"]], "C specific AST nodes (sympy.codegen.cnodes)": [[42, "module-sympy.codegen.cnodes"]], "C++ specific AST nodes (sympy.codegen.cxxnodes)": [[42, "module-sympy.codegen.cxxnodes"]], "Fortran specific AST nodes (sympy.codegen.fnodes)": [[42, "module-sympy.codegen.fnodes"]], "Algorithms (sympy.codegen.algorithms)": [[42, "module-sympy.codegen.algorithms"]], "Python utilities (sympy.codegen.pyutils)": [[42, "module-sympy.codegen.pyutils"]], "C utilities (sympy.codegen.cutils)": [[42, "module-sympy.codegen.cutils"]], "Fortran utilities (sympy.codegen.futils)": [[42, "module-sympy.codegen.futils"]], "Finitely Presented Groups": [[43, "finitely-presented-groups"]], "Overview of Facilities": [[43, "overview-of-facilities"]], "The Construction of Finitely Presented Groups": [[43, "the-construction-of-finitely-presented-groups"]], "Free Groups and Words": [[43, "free-groups-and-words"]], "Construction of a Free Group": [[43, "construction-of-a-free-group"]], "Construction of words": [[43, "construction-of-words"]], "Coset Enumeration: The Todd-Coxeter Algorithm": [[43, "coset-enumeration-the-todd-coxeter-algorithm"]], "CosetTable": [[43, "cosettable"]], "Attributes of CosetTable": [[43, "attributes-of-cosettable"]], "Compression and Standardization": [[43, "compression-and-standardization"]], "Subgroups of Finite Index": [[43, "subgroups-of-finite-index"]], "Low Index Subgroups": [[43, "low-index-subgroups"]], "Constructing a presentation for a subgroup": [[43, "constructing-a-presentation-for-a-subgroup"]], "Reidemeister Schreier algorithm": [[43, "reidemeister-schreier-algorithm"]], "Bibliography": [[43, "bibliography"], [50, "bibliography"]], "Gray Code": [[44, "module-sympy.combinatorics.graycode"]], "Group constructors": [[45, "module-sympy.combinatorics.group_constructs"]], "Nilpotent, Abelian and Cyclic Numbers": [[46, "module-sympy.combinatorics.group_numbers"]], "Combinatorics": [[47, "combinatorics"]], "Named Groups": [[48, "module-sympy.combinatorics.named_groups"]], "Partitions": [[49, "module-sympy.combinatorics.partitions"]], "Polycyclic Groups": [[50, "polycyclic-groups"]], "Overview of functionalities": [[50, "overview-of-functionalities"]], "The Construction of Polycyclic Groups": [[50, "the-construction-of-polycyclic-groups"]], "Attributes of PolycyclicGroup": [[50, "attributes-of-polycyclicgroup"]], "The Construction of Collector": [[50, "the-construction-of-collector"]], "Attributes of Collector": [[50, "attributes-of-collector"]], "Computation of Minimal Uncollected Subword": [[50, "computation-of-minimal-uncollected-subword"]], "Computation of Subword Index": [[50, "computation-of-subword-index"]], "Computation of Collected Word": [[50, "computation-of-collected-word"]], "Computation of Polycyclic Presentation": [[50, "computation-of-polycyclic-presentation"]], "Computation of Exponent Vector": [[50, "computation-of-exponent-vector"]], "Depth of Polycyclic generator": [[50, "depth-of-polycyclic-generator"]], "Computation of Leading Exponent": [[50, "computation-of-leading-exponent"]], "Permutation Groups": [[51, "module-sympy.combinatorics.perm_groups"]], "Permutations": [[52, "module-sympy.combinatorics.permutations"]], "Generators": [[52, "module-sympy.combinatorics.generators"]], "Polyhedron": [[53, "module-sympy.combinatorics.polyhedron"]], "Prufer Sequences": [[54, "module-sympy.combinatorics.prufer"]], "Subsets": [[55, "module-sympy.combinatorics.subsets"]], "Tensor Canonicalization": [[56, "module-sympy.combinatorics.tensor_can"]], "Test Utilities": [[57, "module-sympy.combinatorics.testutil"]], "Utilities": [[58, "module-sympy.combinatorics.util"], [147, "module-sympy.physics.optics.utils"], [204, "utilities"], [246, "module-sympy.utilities"], [265, "utilities"], [273, "utilities"]], "Concrete": [[59, "concrete"]], "Hypergeometric terms": [[59, "hypergeometric-terms"]], "Concrete Class Reference": [[59, "concrete-class-reference"]], "Concrete Functions Reference": [[59, "concrete-functions-reference"]], "Core": [[60, "core"]], "sympify": [[60, "module-sympy.core.sympify"]], "assumptions": [[60, "module-sympy.core.assumptions"]], "See Also": [[60, "see-also"], [247, "see-also"]], "Notes": [[60, "notes"], [216, "notes"], [218, "notes"]], "Developers Notes": [[60, "developers-notes"]], "References": [[60, "references"], [72, "references"], [78, "references"], [87, "references"], [146, "references"], [149, "references"], [194, "references"], [218, "references"], [219, "references"], [222, "references"], [228, "references"]], "cache": [[60, "module-sympy.core.cache"]], "basic": [[60, "module-sympy.core.basic"]], "singleton": [[60, "module-sympy.core.singleton"]], "expr": [[60, "module-sympy.core.expr"]], "symbol": [[60, "module-sympy.core.symbol"]], "numbers": [[60, "module-sympy.core.numbers"]], "power": [[60, "module-sympy.core.power"]], "mul": [[60, "module-sympy.core.mul"]], "add": [[60, "module-sympy.core.add"]], "mod": [[60, "module-sympy.core.mod"]], "relational": [[60, "module-sympy.core.relational"]], "multidimensional": [[60, "module-sympy.core.multidimensional"]], "function": [[60, "module-sympy.core.function"]], "evalf": [[60, "module-sympy.core.evalf"], [275, "evalf"]], "containers": [[60, "module-sympy.core.containers"]], "exprtools": [[60, "module-sympy.core.exprtools"]], "Sorting": [[60, "sorting"]], "Random": [[60, "module-sympy.core.random"]], "Traversal": [[60, "module-sympy.core.traversal"]], "Cryptography": [[61, "cryptography"]], "Differential Geometry": [[62, "module-sympy.diffgeom"]], "Discrete": [[63, "discrete"]], "Transforms": [[63, "module-sympy.discrete.transforms"]], "Fast Fourier Transform": [[63, "fast-fourier-transform"]], "Number Theoretic Transform": [[63, "number-theoretic-transform"]], "Fast Walsh Hadamard Transform": [[63, "fast-walsh-hadamard-transform"]], "M\u00f6bius Transform": [[63, "mobius-transform"]], "Convolutions": [[63, "module-sympy.discrete.convolutions"]], "Convolution": [[63, "convolution"]], "Convolution using Fast Fourier Transform": [[63, "convolution-using-fast-fourier-transform"]], "Convolution using Number Theoretic Transform": [[63, "convolution-using-number-theoretic-transform"]], "Convolution using Fast Walsh Hadamard Transform": [[63, "convolution-using-fast-walsh-hadamard-transform"]], "Subset Convolution": [[63, "subset-convolution"]], "Covering Product": [[63, "covering-product"]], "Intersecting Product": [[63, "intersecting-product"]], "Numerical Evaluation": [[64, "numerical-evaluation"]], "Basics": [[64, "basics"], [265, "basics"], [266, "basics"]], "Floating-point numbers": [[64, "floating-point-numbers"]], "Accuracy and error handling": [[64, "accuracy-and-error-handling"]], "Sums and integrals": [[64, "sums-and-integrals"]], "Numerical simplification": [[64, "numerical-simplification"]], "Combinatorial": [[65, "combinatorial"]], "Enumeration": [[65, "enumeration"]], "Elementary": [[66, "elementary"]], "Complex Functions": [[66, "complex-functions"]], "Trigonometric": [[66, "trigonometric"]], "Trigonometric Functions": [[66, "trigonometric-functions"]], "Trigonometric Inverses": [[66, "trigonometric-inverses"]], "Hyperbolic": [[66, "hyperbolic"]], "Hyperbolic Functions": [[66, "hyperbolic-functions"]], "Hyperbolic Inverses": [[66, "hyperbolic-inverses"]], "Integer Functions": [[66, "integer-functions"]], "Exponential": [[66, "exponential"]], "Piecewise": [[66, "piecewise"]], "Miscellaneous": [[66, "miscellaneous"], [250, "module-sympy.utilities.misc"]], "Special": [[68, "special"]], "Dirac Delta and Related Discontinuous Functions": [[68, "dirac-delta-and-related-discontinuous-functions"]], "Gamma, Beta and Related Functions": [[68, "module-sympy.functions.special.gamma_functions"]], "Error Functions and Fresnel Integrals": [[68, "module-sympy.functions.special.error_functions"]], "Exponential, Logarithmic and Trigonometric Integrals": [[68, "exponential-logarithmic-and-trigonometric-integrals"]], "Bessel Type Functions": [[68, "module-sympy.functions.special.bessel"]], "Airy Functions": [[68, "airy-functions"]], "B-Splines": [[68, "b-splines"]], "Riemann Zeta and Related Functions": [[68, "module-sympy.functions.special.zeta_functions"]], "Hypergeometric Functions": [[68, "hypergeometric-functions"]], "Elliptic integrals": [[68, "module-sympy.functions.special.elliptic_integrals"]], "Mathieu Functions": [[68, "module-sympy.functions.special.mathieu_functions"]], "Orthogonal Polynomials": [[68, "module-sympy.functions.special.polynomials"]], "Jacobi Polynomials": [[68, "jacobi-polynomials"]], "Gegenbauer Polynomials": [[68, "gegenbauer-polynomials"]], "Chebyshev Polynomials": [[68, "chebyshev-polynomials"]], "Legendre Polynomials": [[68, "legendre-polynomials"]], "Hermite Polynomials": [[68, "hermite-polynomials"]], "Laguerre Polynomials": [[68, "laguerre-polynomials"]], "Spherical Harmonics": [[68, "spherical-harmonics"]], "Tensor Functions": [[68, "tensor-functions"]], "Curves": [[69, "module-sympy.geometry.curve"]], "Ellipses": [[70, "module-sympy.geometry.ellipse"]], "Entities": [[71, "module-sympy.geometry.entity"]], "Geometry": [[72, "geometry"]], "Available Entities": [[72, "available-entities"]], "Example Usage": [[72, "example-usage"]], "Intersection of medians": [[72, "intersection-of-medians"]], "An in-depth example: Pappus\u2019 Hexagon Theorem": [[72, "an-in-depth-example-pappus-hexagon-theorem"]], "Miscellaneous Notes": [[72, "miscellaneous-notes"]], "Future Work": [[72, "future-work"]], "Truth Setting Expressions": [[72, "truth-setting-expressions"]], "Three Dimensions and Beyond": [[72, "three-dimensions-and-beyond"]], "Geometry Visualization": [[72, "geometry-visualization"]], "Submodules": [[72, "submodules"]], "Lines": [[73, "module-sympy.geometry.line"]], "Plane": [[74, "module-sympy.geometry.plane"]], "Points": [[75, "module-sympy.geometry.point"], [258, "points"]], "Polygons": [[76, "module-sympy.geometry.polygon"]], "Utils": [[77, "module-sympy.geometry.util"]], "About Holonomic Functions": [[78, "about-holonomic-functions"]], "Converting other representations to holonomic": [[79, "converting-other-representations-to-holonomic"]], "Converting hypergeometric functions": [[79, "converting-hypergeometric-functions"]], "Converting Meijer G-functions": [[79, "converting-meijer-g-functions"]], "Converting symbolic expressions": [[79, "converting-symbolic-expressions"]], "Holonomic": [[80, "module-sympy.holonomic"]], "Internal API": [[81, "internal-api"]], "Operations on holonomic functions": [[82, "operations-on-holonomic-functions"]], "Addition and Multiplication": [[82, "addition-and-multiplication"]], "Integration and Differentiation": [[82, "integration-and-differentiation"]], "Composition with polynomials": [[82, "composition-with-polynomials"]], "Convert to holonomic sequence": [[82, "convert-to-holonomic-sequence"]], "Series expansion": [[82, "series-expansion"]], "Numerical evaluation": [[82, "numerical-evaluation"]], "Convert to a linear combination of hypergeometric functions": [[82, "convert-to-a-linear-combination-of-hypergeometric-functions"]], "Convert to a linear combination of Meijer G-functions": [[82, "convert-to-a-linear-combination-of-meijer-g-functions"]], "Convert to expressions": [[82, "convert-to-expressions"]], "Representation of holonomic functions in SymPy": [[83, "representation-of-holonomic-functions-in-sympy"]], "Uses and Current limitations": [[84, "uses-and-current-limitations"]], "Integration": [[84, "integration"]], "Computing Integrals using Meijer G-Functions": [[85, "computing-integrals-using-meijer-g-functions"]], "Overview": [[85, "overview"]], "Polar Numbers and Branched Functions": [[85, "polar-numbers-and-branched-functions"]], "Representing Branched Functions on the Argand Plane": [[85, "representing-branched-functions-on-the-argand-plane"]], "Table Lookups and Inverse Mellin Transforms": [[85, "table-lookups-and-inverse-mellin-transforms"]], "Applying the Integral Theorems": [[85, "applying-the-integral-theorems"]], "The G-Function Integration Theorems": [[85, "the-g-function-integration-theorems"]], "Conditions of Convergence for Integral (1)": [[85, "conditions-of-convergence-for-integral-1"]], "Conditions of Convergence for Integral (2)": [[85, "conditions-of-convergence-for-integral-2"]], "The Inverse Laplace Transform of a G-function": [[85, "the-inverse-laplace-transform-of-a-g-function"]], "How to compute the integral": [[85, "how-to-compute-the-integral"]], "When this computation is valid": [[85, "when-this-computation-is-valid"]], "When the integral exists": [[85, "when-the-integral-exists"]], "Implemented G-Function Formulae": [[85, "implemented-g-function-formulae"]], "Internal API Reference": [[85, "module-sympy.integrals.meijerint"]], "Integrals": [[86, "integrals"], [87, "module-sympy.integrals"], [276, "integrals"]], "Integral Transforms": [[87, "module-sympy.integrals.transforms"]], "Internals": [[87, "internals"], [204, "internals"]], "API reference": [[87, "api-reference"], [87, "id38"]], "TODO and Bugs": [[87, "todo-and-bugs"]], "Numeric Integrals": [[87, "numeric-integrals"]], "Integration over Polytopes": [[87, "module-sympy.integrals.intpoly"]], "For 2D Polygons": [[87, "for-2d-polygons"]], "For 3-Polytopes/Polyhedra": [[87, "for-3-polytopes-polyhedra"]], "Interactive": [[88, "module-sympy.interactive"]], "Session": [[88, "module-sympy.interactive.session"]], "Lie Algebra": [[89, "module-sympy.liealgebras"]], "Forming logical expressions": [[90, "forming-logical-expressions"]], "Boolean functions": [[90, "boolean-functions"]], "Simplification and equivalence-testing": [[90, "simplification-and-equivalence-testing"]], "Manipulating expressions": [[90, "manipulating-expressions"]], "Truth tables and related functions": [[90, "truth-tables-and-related-functions"]], "Inference": [[90, "module-sympy.logic.inference"]], "Common Matrices": [[91, "module-sympy.matrices.common"]], "Dense Matrices": [[92, "dense-matrices"]], "Matrix Expressions": [[93, "module-sympy.matrices.expressions"]], "Matrix Expressions Core Reference": [[93, "matrix-expressions-core-reference"]], "Block Matrices": [[93, "block-matrices"]], "Immutable Matrices": [[94, "immutable-matrices"]], "ImmutableMatrix Class Reference": [[94, "module-sympy.matrices.immutable"]], "Matrices": [[95, "module-sympy.matrices"], [113, "module-sympy.physics.matrices"], [265, "matrices"], [269, "matrices"], [282, "matrices"]], "Matrices (linear algebra)": [[96, "module-sympy.matrices.matrices"]], "Creating Matrices": [[96, "creating-matrices"]], "Basic Manipulation": [[96, "basic-manipulation"]], "Operations on entries": [[96, "operations-on-entries"]], "Linear algebra": [[96, "linear-algebra"]], "Reference": [[96, "reference"], [196, "reference"], [202, "reference"], [206, "reference"], [216, "reference"], [216, "id2"], [216, "id4"], [216, "id7"], [216, "id8"]], "Matrix Base Classes": [[96, "matrix-base-classes"]], "Matrix Exceptions": [[96, "matrix-exceptions"]], "Matrix Functions": [[96, "matrix-functions"]], "Numpy Utility Functions": [[96, "numpy-utility-functions"]], "Matrix Normal Forms": [[97, "matrix-normal-forms"]], "Sparse Matrices": [[98, "module-sympy.matrices.sparse"]], "SparseMatrix Class Reference": [[98, "sparsematrix-class-reference"]], "ImmutableSparseMatrix Class Reference": [[98, "immutablesparsematrix-class-reference"]], "Sparse Tools": [[99, "module-sympy.matrices.sparsetools"]], "Ntheory Class Reference": [[100, "ntheory-class-reference"]], "Ntheory Functions Reference": [[100, "ntheory-functions-reference"]], "ECM function": [[100, "ecm-function"]], "QS function": [[100, "qs-function"]], "Numeric Computation": [[101, "numeric-computation"]], "Subs/evalf": [[101, "subs-evalf"]], "Lambdify": [[101, "lambdify"], [248, "module-sympy.utilities.lambdify"]], "uFuncify": [[101, "ufuncify"]], "Aesara": [[101, "aesara"]], "So Which Should I Use?": [[101, "so-which-should-i-use"]], "Parsing Functions Reference": [[102, "parsing-functions-reference"]], "Parsing Transformations Reference": [[102, "parsing-transformations-reference"]], "Experimental \\mathrm{\\LaTeX} Parsing": [[102, "experimental-mathrm-latex-parsing"]], "\\mathrm{\\LaTeX} Parsing Caveats": [[102, "mathrm-latex-parsing-caveats"]], "\\mathrm{\\LaTeX} Parsing Functions Reference": [[102, "mathrm-latex-parsing-functions-reference"]], "\\mathrm{\\LaTeX} Parsing Exceptions Reference": [[102, "mathrm-latex-parsing-exceptions-reference"]], "SymPy Expression Reference": [[102, "module-sympy.parsing.sym_expr"]], "Runtime Installation": [[102, "runtime-installation"]], "Beam (Docstrings)": [[103, "module-sympy.physics.continuum_mechanics.beam"]], "Solving Beam Bending Problems using Singularity Functions": [[104, "solving-beam-bending-problems-using-singularity-functions"]], "Beam": [[104, "beam"], [105, "beam"]], "Example 1": [[104, "example-1"]], "Example 2": [[104, "example-2"]], "Example 3": [[104, "example-3"]], "Example 4": [[104, "example-4"]], "Example 5": [[104, "example-5"]], "Example 6": [[104, "example-6"]], "Example 7": [[104, "example-7"]], "Example 8": [[104, "example-8"]], "Example 9": [[104, "example-9"]], "Example 10": [[104, "example-10"]], "Example 11": [[104, "example-11"]], "Continuum Mechanics": [[105, "continuum-mechanics"]], "Abstract": [[105, null], [109, null], [111, null], [134, null], [144, null], [161, null], [191, null]], "Truss": [[105, "truss"]], "Truss (Docstrings)": [[106, "module-sympy.physics.continuum_mechanics.truss"]], "Control": [[107, "control"]], "Control System Plots": [[108, "control-system-plots"]], "Pole-Zero Plot": [[108, "pole-zero-plot"]], "Bode Plot": [[108, "bode-plot"]], "Impulse-Response Plot": [[108, "impulse-response-plot"]], "Step-Response Plot": [[108, "step-response-plot"]], "Ramp-Response Plot": [[108, "ramp-response-plot"]], "Control Module": [[109, "module-sympy.physics.control"]], "Control API": [[110, "control-api"]], "lti": [[110, "module-sympy.physics.control.lti"]], "High energy physics": [[111, "high-energy-physics"]], "Gamma matrices": [[111, "module-sympy.physics.hep.gamma_matrices"]], "Hydrogen Wavefunctions": [[112, "module-sympy.physics.hydrogen"]], "Potential Issues/Advanced Topics/Future Features in Physics/Mechanics": [[114, "potential-issues-advanced-topics-future-features-in-physics-mechanics"]], "Common Issues": [[114, "common-issues"], [183, "common-issues"]], "Numerically Integrating Code": [[114, "numerically-integrating-code"]], "Differentiating": [[114, "differentiating"]], "Choice of Coordinates and Speeds": [[114, "choice-of-coordinates-and-speeds"]], "Substitution": [[114, "substitution"], [183, "substitution"], [275, "substitution"]], "Linearization": [[114, "linearization"]], "Acceleration of Points": [[114, "acceleration-of-points"], [183, "acceleration-of-points"]], "Advanced Interfaces": [[114, "advanced-interfaces"], [183, "advanced-interfaces"]], "Advanced Functionality": [[114, "advanced-functionality"]], "Future Features": [[114, "future-features"]], "Code Output": [[114, "code-output"]], "Body (Docstrings)": [[115, "module-sympy.physics.mechanics.body"]], "Expression Manipulation (Docstrings)": [[116, "expression-manipulation-docstrings"]], "Mechanics API Reference": [[117, "mechanics-api-reference"]], "Joints Framework (Docstrings)": [[118, "joints-framework-docstrings"]], "Joint (Docstrings)": [[118, "module-sympy.physics.mechanics.joint"]], "Kane\u2019s Method & Lagrange\u2019s Method (Docstrings)": [[119, "module-sympy.physics.mechanics.kane"]], "Linearization (Docstrings)": [[120, "module-sympy.physics.mechanics.linearize"]], "Masses, Inertias & Particles, RigidBodys (Docstrings)": [[121, "module-sympy.physics.mechanics.particle"]], "Printing (Docstrings)": [[122, "printing-docstrings"], [189, "printing-docstrings"]], "mechanics_printing": [[122, "mechanics-printing"]], "mprint": [[122, "mprint"]], "mpprint": [[122, "mpprint"]], "mlatex": [[122, "mlatex"]], "SymbolicSystem (Docstrings)": [[123, "module-sympy.physics.mechanics.system"]], "Autolev Parser": [[124, "autolev-parser"]], "Usage": [[124, "usage"]], "Gotchas": [[124, "gotchas"], [278, "gotchas"]], "Limitations and Issues": [[124, "limitations-and-issues"]], "Future Improvements": [[124, "future-improvements"]], "1. Completing Dynamics Online": [[124, "completing-dynamics-online"]], "2. Fixing Issues": [[124, "fixing-issues"]], "3. Switching to an AST": [[124, "switching-to-an-ast"]], "Examples for Physics/Mechanics": [[125, "examples-for-physics-mechanics"]], "A bicycle": [[126, "a-bicycle"]], "A four bar linkage": [[127, "a-four-bar-linkage"]], "Nonminimal Coordinates Pendulum": [[128, "nonminimal-coordinates-pendulum"]], "Kane\u2019s Method": [[128, "kane-s-method"]], "Lagrange\u2019s Method": [[128, "lagrange-s-method"]], "Multi Degree of Freedom Holonomic System": [[129, "multi-degree-of-freedom-holonomic-system"]], "A rolling disc": [[130, "a-rolling-disc"]], "A rolling disc, with Kane\u2019s method": [[131, "a-rolling-disc-with-kane-s-method"]], "A rolling disc, with Kane\u2019s method and constraint forces": [[132, "a-rolling-disc-with-kane-s-method-and-constraint-forces"]], "A rolling disc using Lagrange\u2019s Method": [[133, "a-rolling-disc-using-lagrange-s-method"]], "Classical Mechanics": [[134, "classical-mechanics"]], "Vector": [[134, "vector"], [193, "vector"], [262, "vector"]], "Mechanics": [[134, "mechanics"], [229, "module-sympy.stats.rv"]], "Guide to Mechanics": [[134, "guide-to-mechanics"]], "Joints Framework in Physics/Mechanics": [[135, "joints-framework-in-physics-mechanics"]], "Joints in Physics/Mechanics": [[135, "joints-in-physics-mechanics"]], "JointsMethod in Physics/Mechanics": [[135, "jointsmethod-in-physics-mechanics"]], "Kane\u2019s Method in Physics/Mechanics": [[136, "kane-s-method-in-physics-mechanics"], [136, "id2"]], "Structure of Equations": [[136, "structure-of-equations"], [137, "structure-of-equations"]], "Lagrange\u2019s Method in Physics/Mechanics": [[137, "lagrange-s-method-in-physics-mechanics"], [137, "id1"]], "Linearization in Physics/Mechanics": [[138, "linearization-in-physics-mechanics"]], "Background": [[138, "background"]], "A Note on Dependent Coordinates and Speeds": [[138, null]], "Linearizing Kane\u2019s Equations": [[138, "linearizing-kane-s-equations"]], "1. Using the Linearizer class directly:": [[138, "using-the-linearizer-class-directly"], [138, "id2"]], "2. Using the linearize class method:": [[138, "using-the-linearize-class-method"], [138, "id3"]], "What\u2019s with the new_method kwarg?": [[138, null]], "Linearizing Lagrange\u2019s Equations": [[138, "linearizing-lagrange-s-equations"]], "Potential Issues": [[138, "potential-issues"]], "1. Symbolic linearization with A_and_B=True is slow": [[138, "symbolic-linearization-with-a-and-b-true-is-slow"]], "2. The linearized form has nan, zoo, or oo as matrix elements": [[138, "the-linearized-form-has-nan-zoo-or-oo-as-matrix-elements"]], "Further Examples": [[138, "further-examples"]], "Masses, Inertias, Particles and Rigid Bodies in Physics/Mechanics": [[139, "masses-inertias-particles-and-rigid-bodies-in-physics-mechanics"]], "Mass": [[139, "mass"]], "Particle": [[139, "particle"]], "Inertia": [[139, "inertia"]], "Rigid Body": [[139, "rigid-body"]], "Dyadic": [[139, "dyadic"]], "Linear Momentum": [[139, "linear-momentum"]], "Angular Momentum": [[139, "angular-momentum"]], "Using momenta functions in Mechanics": [[139, "using-momenta-functions-in-mechanics"]], "Kinetic Energy": [[139, "kinetic-energy"]], "Potential Energy": [[139, "potential-energy"]], "Lagrangian": [[139, "lagrangian"]], "Using energy functions in Mechanics": [[139, "using-energy-functions-in-mechanics"]], "References for Physics/Mechanics": [[140, "references-for-physics-mechanics"]], "SymPy Mechanics for Autolev Users": [[141, "sympy-mechanics-for-autolev-users"]], "Some Key Differences": [[141, "some-key-differences"]], "Rough Autolev-SymPy Equivalents": [[141, "rough-autolev-sympy-equivalents"]], "Mathematical Equivalents": [[141, "mathematical-equivalents"]], "Physical Equivalents": [[141, "physical-equivalents"]], "Numerical Evaluation and Visualization": [[141, "numerical-evaluation-and-visualization"]], "Links": [[141, "links"]], "Symbolic Systems in Physics/Mechanics": [[142, "symbolic-systems-in-physics-mechanics"]], "SymbolicSystem Example Usage": [[142, "symbolicsystem-example-usage"]], "Gaussian Optics": [[143, "module-sympy.physics.optics.gaussopt"]], "Optics Module": [[144, "optics-module"]], "Medium": [[145, "module-sympy.physics.optics.medium"]], "Polarization": [[146, "module-sympy.physics.optics.polarization"]], "Waves": [[148, "module-sympy.physics.optics.waves"]], "Pauli Algebra": [[149, "module-sympy.physics.paulialgebra"]], "Quantum Harmonic Oscillator in 1-D": [[150, "module-sympy.physics.qho_1d"]], "Anticommutator": [[151, "module-sympy.physics.quantum.anticommutator"]], "Cartesian Operators and States": [[152, "module-sympy.physics.quantum.cartesian"]], "Clebsch-Gordan Coefficients": [[153, "module-sympy.physics.quantum.cg"]], "Circuit Plot": [[154, "module-sympy.physics.quantum.circuitplot"]], "Commutator": [[155, "module-sympy.physics.quantum.commutator"]], "Constants": [[156, "module-sympy.physics.quantum.constants"], [179, "constants"]], "Dagger": [[157, "module-sympy.physics.quantum.dagger"]], "Gates": [[158, "module-sympy.physics.quantum.gate"]], "Grover\u2019s Algorithm": [[159, "module-sympy.physics.quantum.grover"]], "Hilbert Space": [[160, "module-sympy.physics.quantum.hilbert"]], "Quantum Mechanics": [[161, "quantum-mechanics"]], "Quantum Functions": [[161, "quantum-functions"]], "States and Operators": [[161, "states-and-operators"]], "Quantum Computation": [[161, "quantum-computation"]], "Analytic Solutions": [[161, "analytic-solutions"]], "Inner Product": [[162, "module-sympy.physics.quantum.innerproduct"]], "Operator": [[163, "module-sympy.physics.quantum.operator"]], "Operator/State Helper Functions": [[164, "module-sympy.physics.quantum.operatorset"]], "Particle in a Box": [[165, "module-sympy.physics.quantum.piab"]], "Qapply": [[166, "module-sympy.physics.quantum.qapply"]], "QFT": [[167, "module-sympy.physics.quantum.qft"]], "Qubit": [[168, "module-sympy.physics.quantum.qubit"]], "Represent": [[169, "module-sympy.physics.quantum.represent"]], "Shor\u2019s Algorithm": [[170, "module-sympy.physics.quantum.shor"]], "Spin": [[171, "module-sympy.physics.quantum.spin"]], "State": [[172, "module-sympy.physics.quantum.state"]], "Tensor Product": [[173, "module-sympy.physics.quantum.tensorproduct"]], "Second Quantization": [[174, "module-sympy.physics.secondquant"]], "Quantum Harmonic Oscillator in 3-D": [[175, "module-sympy.physics.sho"]], "Dimensions and dimension systems": [[176, "module-sympy.physics.units.dimensions"]], "Dimensional analysis": [[177, "dimensional-analysis"]], "Equation with quantities": [[177, "equation-with-quantities"]], "Unit systems": [[178, "unit-systems"]], "Philosophy behind unit systems": [[179, "philosophy-behind-unit-systems"]], "Dimensions": [[179, "dimensions"]], "Group structure": [[179, "group-structure"]], "Linear space representation": [[179, "linear-space-representation"]], "An example": [[179, "an-example"], [219, "an-example"]], "Quantities": [[179, "quantities"]], "Units": [[179, "units"]], "The need for a reference": [[179, "the-need-for-a-reference"]], "Literature": [[179, "literature"], [203, "literature"], [208, "literature"]], "Unit prefixes": [[180, "module-sympy.physics.units.prefixes"]], "Physical quantities": [[181, "module-sympy.physics.units.quantities"]], "Conversion between quantities": [[181, "module-sympy.physics.units.util"]], "Units and unit systems": [[182, "module-sympy.physics.units.unitsystem"]], "Potential Issues/Advanced Topics/Future Features in Physics/Vector Module": [[183, "potential-issues-advanced-topics-future-features-in-physics-vector-module"]], "Inertia (Dyadics)": [[183, "inertia-dyadics"]], "ReferenceFrame": [[183, "referenceframe"]], "dynamicsymbols": [[183, "dynamicsymbols"]], "Essential Classes": [[184, "essential-classes"]], "Docstrings for basic field functions": [[185, "docstrings-for-basic-field-functions"]], "Field operation functions": [[185, "field-operation-functions"]], "Checking the type of vector field": [[185, "checking-the-type-of-vector-field"]], "Essential Functions (Docstrings)": [[186, "essential-functions-docstrings"]], "Physics Vector API": [[187, "physics-vector-api"]], "Kinematics (Docstrings)": [[188, "module-sympy.physics.vector.point"]], "kinematic_equations": [[188, "module-sympy.physics.vector.functions"]], "Scalar and Vector Field Functionality": [[190, "scalar-and-vector-field-functionality"], [261, "scalar-and-vector-field-functionality"]], "Vectors and Scalars": [[190, "vectors-and-scalars"], [263, "vectors-and-scalars"]], "Fields": [[190, "fields"], [263, "fields"]], "Implementation of fields in sympy.physics.vector": [[190, "implementation-of-fields-in-sympy-physics-vector"]], "Field operators and other related functions": [[190, "field-operators-and-other-related-functions"]], "Curl": [[190, "curl"], [261, "curl"]], "Divergence": [[190, "divergence"], [261, "divergence"]], "Gradient": [[190, "gradient"], [261, "gradient"]], "Conservative and Solenoidal fields": [[190, "conservative-and-solenoidal-fields"], [261, "conservative-and-solenoidal-fields"]], "Scalar potential functions": [[190, "scalar-potential-functions"], [261, "scalar-potential-functions"]], "The Physics Vector Module": [[191, "the-physics-vector-module"]], "References for Physics/Vector": [[191, "references-for-physics-vector"]], "Guide to Vector": [[191, "guide-to-vector"], [262, "guide-to-vector"]], "Vector: Kinematics": [[192, "vector-kinematics"]], "Introduction to Kinematics": [[192, "introduction-to-kinematics"]], "Angular Velocity": [[192, "angular-velocity"]], "Angular Acceleration": [[192, "angular-acceleration"]], "Point Velocity & Acceleration": [[192, "point-velocity-acceleration"]], "Kinematics in physics.vector": [[192, "kinematics-in-physics-vector"]], "Vector & ReferenceFrame": [[193, "vector-referenceframe"]], "Vector Algebra": [[193, "vector-algebra"]], "Vector Operations": [[193, "vector-operations"]], "Alternative Representation": [[193, "alternative-representation"]], "Vector Calculus": [[193, "vector-calculus"]], "Derivatives of Vectors": [[193, "derivatives-of-vectors"]], "Relating Sets of Basis Vectors": [[193, "relating-sets-of-basis-vectors"]], "Derivatives with Multiple Frames": [[193, "derivatives-with-multiple-frames"]], "Using Vectors and Reference Frames": [[193, "using-vectors-and-reference-frames"]], "Vector Algebra, in physics.vector": [[193, "vector-algebra-in-physics-vector"]], "Vector Calculus, in physics.vector": [[193, "vector-calculus-in-physics-vector"]], "How Vectors are Coded": [[193, "how-vectors-are-coded"]], "Wigner Symbols": [[194, "module-sympy.physics.wigner"]], "Credits and Copyright": [[194, "credits-and-copyright"]], "Authors": [[194, "authors"]], "Plot Class": [[195, "plot-class"]], "Plotting Function Reference": [[195, "plotting-function-reference"]], "PlotGrid Class": [[195, "plotgrid-class"]], "Series Classes": [[195, "series-classes"]], "Backends": [[195, "backends"]], "Pyglet Plotting": [[195, "module-sympy.plotting.pygletplot"]], "Plot Window Controls": [[195, "plot-window-controls"]], "Coordinate Modes": [[195, "coordinate-modes"]], "Specifying Intervals for Variables": [[195, "specifying-intervals-for-variables"]], "Using the Interactive Interface": [[195, "using-the-interactive-interface"]], "Using Custom Color Functions": [[195, "using-custom-color-functions"]], "Plotting Geometric Entities": [[195, "plotting-geometric-entities"]], "Plotting with ASCII art": [[195, "plotting-with-ascii-art"]], "AGCA - Algebraic Geometry and Commutative Algebra Module": [[196, "agca-algebraic-geometry-and-commutative-algebra-module"]], "Base Rings": [[196, "base-rings"]], "Modules, Ideals and their Elementary Properties": [[196, "modules-ideals-and-their-elementary-properties"]], "Module Homomorphisms and Syzygies": [[196, "module-homomorphisms-and-syzygies"]], "Finite Extensions": [[196, "finite-extensions"]], "Basic functionality of the module": [[197, "basic-functionality-of-the-module"]], "Basic concepts": [[197, "basic-concepts"]], "Polynomials": [[197, "polynomials"]], "Divisibility": [[197, "divisibility"]], "Integral domains": [[197, "integral-domains"]], "Factorial domains": [[197, "factorial-domains"]], "Euclidean domains": [[197, "euclidean-domains"]], "Divisibility of polynomials": [[197, "divisibility-of-polynomials"]], "Basic functionality": [[197, "basic-functionality"]], "Division": [[197, "division"]], "GCD and LCM": [[197, "gcd-and-lcm"]], "Square-free factorization": [[197, "square-free-factorization"]], "Factorization": [[197, "factorization"]], "Groebner bases": [[197, "groebner-bases"]], "Solving Equations": [[197, "solving-equations"]], "Introducing the domainmatrix of the poly module": [[198, "introducing-the-domainmatrix-of-the-poly-module"]], "What is domainmatrix?": [[198, "what-is-domainmatrix"]], "Introducing the Domains of the poly module": [[199, "introducing-the-domains-of-the-poly-module"]], "What are the domains?": [[199, "what-are-the-domains"]], "Representing expressions symbolically": [[199, "representing-expressions-symbolically"]], "Tree representation": [[199, "tree-representation"]], "DUP representation": [[199, "dup-representation"]], "DMP representation": [[199, "dmp-representation"]], "Sparse polynomial representation": [[199, "sparse-polynomial-representation"]], "Basic usage of domains": [[199, "basic-usage-of-domains"]], "Domain elements vs sympy expressions": [[199, "domain-elements-vs-sympy-expressions"]], "Gaussian integers and Gaussian rationals": [[199, "gaussian-integers-and-gaussian-rationals"]], "Finite fields": [[199, "finite-fields"]], "Real and complex fields": [[199, "real-and-complex-fields"]], "Algebraic number fields": [[199, "algebraic-number-fields"], [204, "algebraic-number-fields"]], "Polynomial ring domains": [[199, "polynomial-ring-domains"]], "Old (dense) polynomial rings": [[199, "old-dense-polynomial-rings"]], "PolyRing vs PolynomialRing": [[199, "polyring-vs-polynomialring"]], "Rational function fields": [[199, "rational-function-fields"]], "Expression domain": [[199, "expression-domain"]], "Choosing a domain": [[199, "choosing-a-domain"]], "Converting elements between different domains": [[199, "converting-elements-between-different-domains"]], "Unifying domains": [[199, "unifying-domains"]], "Internals of a Poly": [[199, "internals-of-a-poly"]], "Choosing a domain for a Poly": [[199, "choosing-a-domain-for-a-poly"]], "Choosing generators": [[199, "choosing-generators"]], "Algebraically dependent generators": [[199, "algebraically-dependent-generators"]], "Reference docs for the Poly Domains": [[200, "reference-docs-for-the-poly-domains"]], "Domains": [[200, "domains"]], "Abstract Domains": [[200, "abstract-domains"]], "GF(p)": [[200, "gf-p"]], "ZZ": [[200, "zz"]], "QQ": [[200, "qq"]], "MPQ": [[200, "mpq"]], "Gaussian domains": [[200, "gaussian-domains"]], "ZZ_I": [[200, "zz-i"]], "QQ_I": [[200, "qq-i"]], "QQ<a>": [[200, "qq-a"]], "RR": [[200, "rr"]], "CC": [[200, "cc"]], "K[x]": [[200, "k-x"]], "K(x)": [[200, "id11"]], "EX": [[200, "ex"]], "Quotient ring": [[200, "quotient-ring"]], "Sparse polynomials": [[200, "sparse-polynomials"]], "Sparse rational functions": [[200, "sparse-rational-functions"]], "Dense polynomials": [[200, "dense-polynomials"]], "Polynomial Manipulation": [[201, "polynomial-manipulation"]], "Internals of the Polynomial Manipulation Module": [[202, "internals-of-the-polynomial-manipulation-module"]], "Level Zero": [[202, "level-zero"]], "Manipulation of dense, multivariate polynomials": [[202, "manipulation-of-dense-multivariate-polynomials"]], "Manipulation of dense, univariate polynomials with finite field coefficients": [[202, "manipulation-of-dense-univariate-polynomials-with-finite-field-coefficients"]], "Manipulation of sparse, distributed polynomials and vectors": [[202, "manipulation-of-sparse-distributed-polynomials-and-vectors"]], "Polynomial factorization algorithms": [[202, "polynomial-factorization-algorithms"]], "Classical remainder sequence": [[202, "classical-remainder-sequence"]], "Simplified remainder sequences": [[202, "simplified-remainder-sequences"]], "Subresultant sequence": [[202, "subresultant-sequence"]], "Groebner basis algorithms": [[202, "groebner-basis-algorithms"]], "Options": [[202, "module-sympy.polys.polyoptions"]], "Configuration": [[202, "module-sympy.polys.polyconfig"]], "Exceptions": [[202, "exceptions"]], "Modular GCD": [[202, "modular-gcd"]], "Undocumented": [[202, "undocumented"]], "Number Fields": [[204, "number-fields"]], "Solving the Main Problems": [[204, "solving-the-main-problems"]], "Integral Basis": [[204, "integral-basis"]], "Prime Decomposition": [[204, "prime-decomposition"]], "p-adic Valuation": [[204, "p-adic-valuation"]], "Finding Minimal Polynomials": [[204, "finding-minimal-polynomials"]], "The Subfield Problem": [[204, "the-subfield-problem"]], "Representing algebraic numbers": [[204, "representing-algebraic-numbers"]], "As number field elements": [[204, "as-number-field-elements"]], "As elements of finitely-generated modules": [[204, "as-elements-of-finitely-generated-modules"]], "Finitely-generated modules": [[204, "module-sympy.polys.numberfields.modules"]], "Arithmetic with module elements": [[204, "arithmetic-with-module-elements"]], "Multiplication": [[204, "multiplication"]], "Module Homomorphisms": [[204, "module-homomorphisms"]], "Class Reference": [[204, "class-reference"]], "Polynomials Manipulation Module Reference": [[205, "module-sympy.polys"]], "Basic polynomial manipulation functions": [[205, "basic-polynomial-manipulation-functions"]], "Extra polynomial manipulation functions": [[205, "extra-polynomial-manipulation-functions"]], "Domain constructors": [[205, "domain-constructors"]], "Monomials encoded as tuples": [[205, "monomials-encoded-as-tuples"]], "Orderings of monomials": [[205, "orderings-of-monomials"]], "Formal manipulation of roots of polynomials": [[205, "formal-manipulation-of-roots-of-polynomials"]], "Symbolic root-finding algorithms": [[205, "symbolic-root-finding-algorithms"]], "Special polynomials": [[205, "special-polynomials"]], "Orthogonal polynomials": [[205, "orthogonal-polynomials"]], "Appell sequences": [[205, "appell-sequences"]], "Manipulation of rational functions": [[205, "manipulation-of-rational-functions"]], "Partial fraction decomposition": [[205, "partial-fraction-decomposition"], [208, "partial-fraction-decomposition"]], "Dispersion of Polynomials": [[205, "dispersion-of-polynomials"]], "Series Manipulation using Polynomials": [[206, "series-manipulation-using-polynomials"]], "rs_series": [[206, "rs-series"]], "Contribute": [[206, "contribute"]], "Poly solvers": [[207, "poly-solvers"]], "Examples from Wester\u2019s Article": [[208, "examples-from-wester-s-article"]], "Simple univariate polynomial factorization": [[208, "simple-univariate-polynomial-factorization"]], "Univariate GCD, resultant and factorization": [[208, "univariate-gcd-resultant-and-factorization"]], "Multivariate GCD and factorization": [[208, "multivariate-gcd-and-factorization"]], "Support for symbols in exponents": [[208, "support-for-symbols-in-exponents"]], "Testing if polynomials have common zeros": [[208, "testing-if-polynomials-have-common-zeros"]], "Normalizing simple rational functions": [[208, "normalizing-simple-rational-functions"]], "Expanding expressions and factoring back": [[208, "expanding-expressions-and-factoring-back"]], "Factoring in terms of cyclotomic polynomials": [[208, "factoring-in-terms-of-cyclotomic-polynomials"]], "Univariate factoring over Gaussian numbers": [[208, "univariate-factoring-over-gaussian-numbers"]], "Computing with automatic field extensions": [[208, "computing-with-automatic-field-extensions"]], "Univariate factoring over various domains": [[208, "univariate-factoring-over-various-domains"]], "Factoring polynomials into linear factors": [[208, "factoring-polynomials-into-linear-factors"]], "Advanced factoring over finite fields": [[208, "advanced-factoring-over-finite-fields"]], "Working with expressions as polynomials": [[208, "working-with-expressions-as-polynomials"]], "Computing reduced Gr\u00f6bner bases": [[208, "computing-reduced-grobner-bases"]], "Multivariate factoring over algebraic numbers": [[208, "multivariate-factoring-over-algebraic-numbers"]], "Printer Class": [[209, "module-sympy.printing.printer"]], "Which Method is Responsible for Printing?": [[209, "which-method-is-responsible-for-printing"]], "Example of Custom Printer": [[209, "example-of-custom-printer"]], "Example of Custom Printing Method": [[209, "example-of-custom-printing-method"]], "Common mistakes": [[209, "common-mistakes"]], "PrettyPrinter Class": [[209, "prettyprinter-class"]], "C code printers": [[209, "module-sympy.printing.c"]], "C++ code printers": [[209, "module-sympy.printing.cxx"]], "RCodePrinter": [[209, "module-sympy.printing.rcode"]], "Fortran Printing": [[209, "fortran-printing"]], "SMT-Lib printing": [[209, "module-sympy.printing.smtlib"]], "Mathematica code printing": [[209, "module-sympy.printing.mathematica"]], "Maple code printing": [[209, "module-sympy.printing.maple"]], "Javascript Code printing": [[209, "module-sympy.printing.jscode"]], "Julia code printing": [[209, "module-sympy.printing.julia"]], "Octave (and Matlab) Code printing": [[209, "module-sympy.printing.octave"]], "Rust code printing": [[209, "module-sympy.printing.rust"]], "Aesara Code printing": [[209, "module-sympy.printing.aesaracode"]], "Gtk": [[209, "module-sympy.printing.gtk"]], "LambdaPrinter": [[209, "module-sympy.printing.lambdarepr"]], "LatexPrinter": [[209, "module-sympy.printing.latex"]], "MathMLPrinter": [[209, "module-sympy.printing.mathml"]], "PythonCodePrinter": [[209, "module-sympy.printing.pycode"]], "PythonPrinter": [[209, "module-sympy.printing.python"]], "srepr": [[209, "module-sympy.printing.repr"], [285, "srepr"]], "StrPrinter": [[209, "module-sympy.printing.str"]], "Tree Printing": [[209, "module-sympy.printing.tree"]], "Preview": [[209, "preview"]], "Implementation - Helper Classes/Functions": [[209, "module-sympy.printing.conventions"]], "CodePrinter": [[209, "module-sympy.printing.codeprinter"]], "Precedence": [[209, "module-sympy.printing.precedence"]], "Pretty-Printing Implementation Helpers": [[209, "module-sympy.printing.pretty.pretty_symbology"]], "dotprint": [[209, "dotprint"]], "Term Rewriting": [[210, "term-rewriting"]], "Expanding": [[210, "expanding"]], "Common Subexpression Detection and Collection": [[210, "common-subexpression-detection-and-collection"]], "Formal Power Series": [[211, "formal-power-series"]], "Rational Algorithm": [[211, "rational-algorithm"]], "Hypergeometric Algorithm": [[211, "hypergeometric-algorithm"]], "Fourier Series": [[212, "fourier-series"]], "Series": [[213, "series"]], "Limits of Sequences": [[214, "limits-of-sequences"]], "Sequences": [[215, "sequences"]], "Sequences Base": [[215, "sequences-base"]], "Elementary Sequences": [[215, "elementary-sequences"]], "Singleton Sequences": [[215, "singleton-sequences"]], "Compound Sequences": [[215, "compound-sequences"]], "Recursive Sequences": [[215, "recursive-sequences"]], "Series Expansions": [[216, "series-expansions"]], "Limits": [[216, "limits"], [276, "limits"]], "The Gruntz Algorithm": [[216, "the-gruntz-algorithm"]], "More Intuitive Series Expansion": [[216, "more-intuitive-series-expansion"]], "Order Terms": [[216, "order-terms"]], "Series Acceleration": [[216, "series-acceleration"]], "Residues": [[216, "residues"]], "Basic Sets": [[217, "module-sympy.sets.sets"]], "Elementary Sets": [[217, "elementary-sets"]], "Compound Sets": [[217, "compound-sets"]], "Singleton Sets": [[217, "singleton-sets"]], "Special Sets": [[217, "module-sympy.sets.fancysets"]], "Power sets": [[217, "module-sympy.sets.powerset"]], "Condition Sets": [[217, "module-sympy.sets.conditionset"]], "SetKind": [[217, "setkind"]], "Iteration over sets": [[217, "iteration-over-sets"]], "Hongguang Fu\u2019s Trigonometric Simplification": [[218, "hongguang-fu-s-trigonometric-simplification"]], "Rules": [[218, "rules"]], "Hypergeometric Expansion": [[219, "hypergeometric-expansion"]], "Hypergeometric Function Expansion Algorithm": [[219, "hypergeometric-function-expansion-algorithm"]], "Notation": [[219, "notation"]], "Incrementing and decrementing indices": [[219, "incrementing-and-decrementing-indices"]], "Reduction of Order": [[219, "reduction-of-order"]], "Moving Around in the Parameter Space": [[219, "moving-around-in-the-parameter-space"]], "Applying the Operators": [[219, "applying-the-operators"]], "Loose Ends": [[219, "loose-ends"]], "Meijer G-Functions of Finite Confluence": [[219, "meijer-g-functions-of-finite-confluence"]], "Extending The Hypergeometric Tables": [[219, "extending-the-hypergeometric-tables"]], "Implemented Hypergeometric Formulae": [[219, "implemented-hypergeometric-formulae"]], "Simplify": [[220, "simplify"], [221, "simplify"]], "Diophantine": [[222, "diophantine"]], "Diophantine equations": [[222, "diophantine-equations"]], "Module structure": [[222, "module-structure"]], "Tutorial": [[222, "tutorial"]], "User Functions": [[222, "user-functions"], [225, "user-functions"], [226, "user-functions"]], "Internal Functions": [[222, "internal-functions"]], "Internal Classes": [[222, "internal-classes"]], "Solvers": [[223, "solvers"], [227, "module-sympy.solvers"], [287, "solvers"]], "Inequality Solvers": [[224, "inequality-solvers"]], "ODE": [[225, "ode"]], "Hint Functions": [[225, "hint-functions"]], "Lie heuristics": [[225, "lie-heuristics"]], "Rational Riccati Solver": [[225, "rational-riccati-solver"]], "System of ODEs": [[225, "system-of-odes"]], "Information on the ode module": [[225, "module-sympy.solvers.ode.ode"]], "PDE": [[226, "pde"]], "Hint Methods": [[226, "hint-methods"]], "Information on the pde module": [[226, "module-sympy.solvers.pde"]], "Algebraic equations": [[227, "algebraic-equations"]], "Ordinary Differential equations (ODEs)": [[227, "ordinary-differential-equations-odes"], [228, "ordinary-differential-equations-odes"]], "Partial Differential Equations (PDEs)": [[227, "partial-differential-equations-pdes"], [228, "partial-differential-equations-pdes"]], "Deutils (Utilities for solving ODE\u2019s and PDE\u2019s)": [[227, "deutils-utilities-for-solving-ode-s-and-pde-s"]], "Recurrence Equations": [[227, "module-sympy.solvers.recurr"]], "Systems of Polynomial Equations": [[227, "systems-of-polynomial-equations"]], "Diophantine Equations (DEs)": [[227, "diophantine-equations-des"], [228, "diophantine-equations-des"]], "Inequalities": [[227, "inequalities"], [228, "inequalities"]], "Solveset": [[228, "solveset"]], "What\u2019s wrong with solve():": [[228, "what-s-wrong-with-solve"]], "Why Solveset?": [[228, "why-solveset"]], "Why do we use Sets as an output type?": [[228, "why-do-we-use-sets-as-an-output-type"]], "Input API of solveset": [[228, "input-api-of-solveset"]], "What is this domain argument about?": [[228, "what-is-this-domain-argument-about"]], "What are the general methods employed by solveset to solve an equation?": [[228, "what-are-the-general-methods-employed-by-solveset-to-solve-an-equation"]], "How do we manipulate and return an infinite solution?": [[228, "how-do-we-manipulate-and-return-an-infinite-solution"]], "How does solveset ensure that it is not returning any wrong solution?": [[228, "how-does-solveset-ensure-that-it-is-not-returning-any-wrong-solution"]], "Search based solver and step-by-step solution": [[228, "search-based-solver-and-step-by-step-solution"]], "How do we deal with cases where only some of the solutions are known?": [[228, "how-do-we-deal-with-cases-where-only-some-of-the-solutions-are-known"]], "What is the plan for solve and solveset?": [[228, "what-is-the-plan-for-solve-and-solveset"]], "How are symbolic parameters handled in solveset?": [[228, "how-are-symbolic-parameters-handled-in-solveset"]], "Solveset Module Reference": [[228, "solveset-module-reference"]], "transolve": [[228, "transolve"]], "Stats": [[229, "module-sympy.stats"]], "Random Variable Types": [[229, "random-variable-types"]], "Finite Types": [[229, "finite-types"]], "Discrete Types": [[229, "discrete-types"]], "Continuous Types": [[229, "continuous-types"]], "Joint Types": [[229, "joint-types"]], "Stochastic Processes": [[229, "stochastic-processes"]], "Matrix Distributions": [[229, "matrix-distributions"]], "Compound Distribution": [[229, "compound-distribution"]], "Interface": [[229, "interface"]], "N-dim array": [[230, "module-sympy.tensor.array"]], "Products and contractions": [[230, "products-and-contractions"]], "Diagonal operator": [[230, "diagonal-operator"]], "Derivatives by array": [[230, "derivatives-by-array"]], "Classes": [[230, "classes"]], "N-dim array expressions": [[231, "module-sympy.tensor.array.expressions"]], "Constructing array expressions from index-explicit forms": [[231, "constructing-array-expressions-from-index-explicit-forms"]], "Compatibility with matrices": [[231, "compatibility-with-matrices"]], "Tensor": [[232, "module-sympy.tensor"], [235, "module-sympy.tensor.tensor"]], "Methods": [[233, "module-sympy.tensor.index_methods"]], "Indexed Objects": [[234, "module-sympy.tensor.indexed"]], "Tensor Operators": [[236, "module-sympy.tensor.toperators"]], "Testing": [[237, "testing"]], "pytest": [[238, "module-sympy.testing.pytest"]], "Randomised Testing": [[239, "module-sympy.testing.randtest"]], "Run Tests": [[240, "module-sympy.testing.runtests"]], "Autowrap Module": [[241, "autowrap-module"]], "Implementation details": [[241, "implementation-details"]], "Codegen": [[242, "codegen"]], "Implementation Details": [[242, "implementation-details"]], "Routine": [[242, "routine"]], "Decorator": [[243, "module-sympy.utilities.decorator"]], "Enumerative": [[244, "module-sympy.utilities.enumerative"]], "Exceptions and Warnings": [[245, "module-sympy.utilities.exceptions"]], "Iterables": [[247, "module-sympy.utilities.iterables"]], "variations": [[247, "variations"]], "partitions": [[247, "partitions"]], "Memoization": [[249, "module-sympy.utilities.memoization"]], "PKGDATA": [[251, "module-sympy.utilities.pkgdata"]], "Source Code Inspection": [[252, "module-sympy.utilities.source"]], "Timing Utilities": [[253, "module-sympy.utilities.timeutils"]], "Essential Classes in sympy.vector (docstrings)": [[254, "essential-classes-in-sympy-vector-docstrings"]], "Vector API": [[255, "vector-api"]], "Orienter classes (docstrings)": [[256, "orienter-classes-docstrings"]], "Essential Functions in sympy.vector (docstrings)": [[257, "essential-functions-in-sympy-vector-docstrings"]], "Basic Implementation details": [[258, "basic-implementation-details"]], "Coordinate Systems and Vectors": [[258, "coordinate-systems-and-vectors"]], "SymPy operations on Vectors": [[258, "sympy-operations-on-vectors"]], "Dyadics": [[258, "dyadics"]], "More about Coordinate Systems": [[259, "more-about-coordinate-systems"]], "Locating new systems": [[259, "locating-new-systems"]], "Orienting new systems": [[259, "orienting-new-systems"]], "Using a method of CoordSys3D directly": [[259, "using-a-method-of-coordsys3d-directly"]], "Using Orienter(s) and the orient_new method": [[259, "using-orienter-s-and-the-orient-new-method"]], "Orienting AND Locating new systems": [[259, "orienting-and-locating-new-systems"]], "Transforming new system": [[259, "transforming-new-system"]], "Expression of quantities in different coordinate systems": [[259, "expression-of-quantities-in-different-coordinate-systems"]], "Vectors and Dyadics": [[259, "vectors-and-dyadics"]], "Coordinate Variables": [[259, "coordinate-variables"]], "Other expression-dependent methods": [[259, "other-expression-dependent-methods"]], "General examples of usage": [[260, "general-examples-of-usage"]], "Quadrilateral problem": [[260, "quadrilateral-problem"]], "The Problem": [[260, "the-problem"], [260, "id1"]], "Solution": [[260, "solution"], [260, "id2"]], "Third product rule for Del operator": [[260, "third-product-rule-for-del-operator"]], "See": [[260, "see"]], "Implementation in sympy.vector": [[261, "implementation-in-sympy-vector"]], "Scalar and vector fields": [[261, "scalar-and-vector-fields"]], "The Del operator": [[261, "the-del-operator"]], "Field operators and related functions": [[261, "field-operators-and-related-functions"]], "Directional Derivative": [[261, "directional-derivative"]], "Field operator in orthogonal curvilinear coordinate system": [[261, "field-operator-in-orthogonal-curvilinear-coordinate-system"]], "References for Vector": [[262, "references-for-vector"]], "Coordinate Systems": [[263, "coordinate-systems"]], "Applications of Vector Integrals": [[264, "applications-of-vector-integrals"]], "Calculation of Perimeter, Surface Area, and Volume": [[264, "calculation-of-perimeter-surface-area-and-volume"]], "Calculation of mass of a body": [[264, "calculation-of-mass-of-a-body"]], "Calculation of Flux": [[264, "calculation-of-flux"]], "Verifying Stoke\u2019s Theorem": [[264, "verifying-stoke-s-theorem"]], "Verifying Divergence Theorem": [[264, "verifying-divergence-theorem"]], "Physics": [[265, "physics"], [271, "module-sympy.physics"]], "Topics": [[265, "topics"], [272, "topics"]], "Introductory Tutorial": [[274, "introductory-tutorial"], [279, "introductory-tutorial"]], "Basic Operations": [[275, "basic-operations"], [282, "basic-operations"]], "Quick Tip": [[275, null], [276, null], [278, null], [281, null], [282, null]], "Converting Strings to SymPy Expressions": [[275, "converting-strings-to-sympy-expressions"]], "Derivatives": [[276, "derivatives"]], "Series Expansion": [[276, "series-expansion"]], "Finite differences": [[276, "finite-differences"]], "SymPy Features": [[277, "sympy-features"]], "Equals signs": [[278, "equals-signs"]], "Two Final Notes: ^ and /": [[278, "two-final-notes-and"]], "Further Reading": [[278, "further-reading"]], "What is Symbolic Computation?": [[280, "what-is-symbolic-computation"]], "A More Interesting Example": [[280, "a-more-interesting-example"]], "The Power of Symbolic Computation": [[280, "the-power-of-symbolic-computation"]], "Why SymPy?": [[280, "why-sympy"]], "Advanced Expression Manipulation": [[281, "advanced-expression-manipulation"]], "Understanding Expression Trees": [[281, "understanding-expression-trees"]], "Recursing through an Expression Tree": [[281, "recursing-through-an-expression-tree"]], "args": [[281, "args"]], "Key Invariant": [[281, null]], "Walking the Tree": [[281, "walking-the-tree"]], "Prevent expression evaluation": [[281, "prevent-expression-evaluation"]], "Shape": [[282, "shape"]], "Accessing Rows and Columns": [[282, "accessing-rows-and-columns"]], "Deleting and Inserting Rows and Columns": [[282, "deleting-and-inserting-rows-and-columns"]], "Basic Methods": [[282, "basic-methods"]], "Matrix Constructors": [[282, "matrix-constructors"]], "Advanced Methods": [[282, "advanced-methods"]], "Determinant": [[282, "determinant"]], "RREF": [[282, "rref"]], "Nullspace": [[282, "nullspace"]], "Columnspace": [[282, "columnspace"]], "Eigenvalues, Eigenvectors, and Diagonalization": [[282, "eigenvalues-eigenvectors-and-diagonalization"]], "Possible Issues": [[282, "possible-issues"]], "Zero Testing": [[282, "zero-testing"]], "What\u2019s Next": [[283, "whats-next"]], "Preliminaries": [[284, "preliminaries"]], "Exercises": [[284, "exercises"]], "Printers": [[285, "printers"]], "Setting up Pretty Printing": [[285, "setting-up-pretty-printing"]], "Printing Functions": [[285, "printing-functions"]], "str": [[285, "str"]], "ASCII Pretty Printer": [[285, "ascii-pretty-printer"]], "Unicode Pretty Printer": [[285, "unicode-pretty-printer"]], "\\mathrm{\\LaTeX}": [[285, "mathrm-latex"]], "MathML": [[285, "mathml"]], "Dot": [[285, "dot"]], "Simplification": [[286, "simplification"]], "simplify": [[286, "simplify"]], "Polynomial/Rational Function Simplification": [[286, "polynomial-rational-function-simplification"]], "expand": [[286, "expand"]], "factor": [[286, "factor"]], "collect": [[286, "collect"]], "cancel": [[286, "cancel"]], "apart": [[286, "apart"]], "Trigonometric Simplification": [[286, "trigonometric-simplification"]], "trigsimp": [[286, "trigsimp"]], "expand_trig": [[286, "expand-trig"]], "Powers": [[286, "powers"]], "powsimp": [[286, "powsimp"]], "expand_power_exp / expand_power_base": [[286, "expand-power-exp-expand-power-base"]], "powdenest": [[286, "powdenest"]], "Exponentials and logarithms": [[286, "exponentials-and-logarithms"]], "expand_log": [[286, "expand-log"]], "logcombine": [[286, "logcombine"]], "Special Functions": [[286, "special-functions"]], "rewrite": [[286, "rewrite"]], "expand_func": [[286, "expand-func"]], "hyperexpand": [[286, "hyperexpand"]], "combsimp": [[286, "combsimp"]], "gammasimp": [[286, "gammasimp"]], "Example: Continued Fractions": [[286, "example-continued-fractions"]], "A Note about Equations": [[287, "a-note-about-equations"]], "Solving Equations Algebraically": [[287, "solving-equations-algebraically"]], "Solving Differential Equations": [[287, "solving-differential-equations"]]}, "indexentries": {"antiderivative": [[11, "term-Antiderivative"]], "assumptions": [[11, "term-Assumptions"]], "atom": [[11, "term-Atom"]], "automatic simplification": [[11, "term-Automatic-Simplification"]], "basic": [[11, "term-Basic"]], "boolean": [[11, "term-Boolean"]], "bound symbols": [[11, "term-Bound-symbols"]], "canonical form": [[11, "term-Canonical-Form"]], "canonicalize": [[11, "term-Canonicalize"]], "code generation": [[11, "term-Code-Generation"]], "core": [[11, "term-Core"]], "dummy": [[11, "term-Dummy"]], "equation": [[11, "term-Equation"]], "evaluate": [[11, "term-Evaluate"]], "expr": [[11, "term-Expr"]], "expression": [[11, "term-Expression"]], "expression tree": [[11, "term-Expression-Tree"]], "free symbols": [[11, "term-Free-symbols"]], "function": [[11, "term-Function"]], "function (class)": [[11, "term-Function-class"]], "immutable": [[11, "term-Immutable"]], "interactive": [[11, "term-Interactive"]], "kind": [[11, "term-Kind"]], "matrix": [[11, "term-Matrix"]], "number": [[11, "term-Number"]], "numeric": [[11, "term-Numeric"]], "polys": [[11, "term-Polys"]], "printing": [[11, "term-Printing"]], "relational": [[11, "term-Relational"]], "s": [[11, "term-S"]], "simplification": [[11, "term-Simplification"]], "solve": [[11, "term-Solve"]], "solvers": [[11, "term-Solvers"]], "structural equality": [[11, "term-Structural-Equality"]], "subexpression": [[11, "term-Subexpression"]], "substitution": [[11, "term-Substitution"]], "symbol": [[11, "term-Symbol"]], "symbolic": [[11, "term-Symbolic"]], "three-valued logic": [[11, "term-Three-valued-logic"]], "undefined function": [[11, "term-Undefined-Function"]], "unevaluated": [[11, "term-Unevaluated"]], "_eval_*": [[11, "term-_eval_"]], "args": [[11, "term-args"]], "evalf": [[11, "term-evalf"]], "func": [[11, "term-func"]], "is_*": [[11, "term-is_"]], "isympy": [[11, "term-isympy"]], "lambdify()": [[11, "term-lambdify"]], "lamda": [[11, "term-lamda"]], "mpmath": [[11, "term-mpmath"]], "oo": [[11, "term-oo"]], "sympify()": [[11, "term-sympify"]], "zoo": [[11, "term-zoo"]], "module": [[12, "module-sympy.simplify.simplify"], [31, "module-sympy"], [33, "module-sympy.abc"], [34, "module-sympy.algebras"], [35, "module-sympy.assumptions.ask"], [36, "module-sympy.assumptions.assume"], [37, "module-sympy.assumptions"], [38, "module-sympy.assumptions.predicates"], [39, "module-sympy.assumptions.refine"], [40, "module-sympy.calculus"], [40, "module-sympy.calculus.euler"], [40, "module-sympy.calculus.finite_diff"], [40, "module-sympy.calculus.singularities"], [40, "module-sympy.calculus.util"], [41, "module-sympy.categories"], [41, "module-sympy.categories.diagram_drawing"], [42, "module-sympy.codegen.algorithms"], [42, "module-sympy.codegen.approximations"], [42, "module-sympy.codegen.ast"], [42, "module-sympy.codegen.cfunctions"], [42, "module-sympy.codegen.cnodes"], [42, "module-sympy.codegen.cutils"], [42, "module-sympy.codegen.cxxnodes"], [42, "module-sympy.codegen.fnodes"], [42, "module-sympy.codegen.futils"], [42, "module-sympy.codegen.matrix_nodes"], [42, "module-sympy.codegen.pyutils"], [42, "module-sympy.codegen.rewriting"], [44, "module-sympy.combinatorics.graycode"], [45, "module-sympy.combinatorics.group_constructs"], [46, "module-sympy.combinatorics.group_numbers"], [48, "module-sympy.combinatorics.named_groups"], [49, "module-sympy.combinatorics.partitions"], [51, "module-sympy.combinatorics.perm_groups"], [52, "module-sympy.combinatorics.generators"], [52, "module-sympy.combinatorics.permutations"], [53, "module-sympy.combinatorics.polyhedron"], [54, "module-sympy.combinatorics.prufer"], [55, "module-sympy.combinatorics.subsets"], [56, "module-sympy.combinatorics.tensor_can"], [57, "module-sympy.combinatorics.testutil"], [58, "module-sympy.combinatorics.util"], [60, "module-sympy.core.add"], [60, "module-sympy.core.assumptions"], [60, "module-sympy.core.basic"], [60, "module-sympy.core.cache"], [60, "module-sympy.core.containers"], [60, "module-sympy.core.evalf"], [60, "module-sympy.core.expr"], [60, "module-sympy.core.exprtools"], [60, "module-sympy.core.function"], [60, "module-sympy.core.kind"], [60, "module-sympy.core.mod"], [60, "module-sympy.core.mul"], [60, "module-sympy.core.multidimensional"], [60, "module-sympy.core.numbers"], [60, "module-sympy.core.power"], [60, "module-sympy.core.random"], [60, "module-sympy.core.relational"], [60, "module-sympy.core.singleton"], [60, "module-sympy.core.symbol"], [60, "module-sympy.core.sympify"], [60, "module-sympy.core.traversal"], [61, "module-sympy.crypto.crypto"], [62, "module-sympy.diffgeom"], [63, "module-sympy.discrete"], [63, "module-sympy.discrete.convolutions"], [63, "module-sympy.discrete.transforms"], [67, "module-sympy.functions"], [68, "module-sympy.functions.special.bessel"], [68, "module-sympy.functions.special.beta_functions"], [68, "module-sympy.functions.special.elliptic_integrals"], [68, "module-sympy.functions.special.error_functions"], [68, "module-sympy.functions.special.gamma_functions"], [68, "module-sympy.functions.special.mathieu_functions"], [68, "module-sympy.functions.special.polynomials"], [68, "module-sympy.functions.special.singularity_functions"], [68, "module-sympy.functions.special.zeta_functions"], [69, "module-sympy.geometry.curve"], [70, "module-sympy.geometry.ellipse"], [71, "module-sympy.geometry.entity"], [73, "module-sympy.geometry.line"], [74, "module-sympy.geometry.plane"], [75, "module-sympy.geometry.point"], [76, "module-sympy.geometry.polygon"], [77, "module-sympy.geometry.util"], [80, "module-sympy.holonomic"], [85, "module-sympy.integrals.meijerint"], [85, "module-sympy.integrals.meijerint_doc"], [87, "module-sympy.integrals"], [87, "module-sympy.integrals.intpoly"], [87, "module-sympy.integrals.transforms"], [88, "module-sympy.interactive"], [88, "module-sympy.interactive.printing"], [88, "module-sympy.interactive.session"], [89, "module-sympy.liealgebras"], [90, "module-sympy.logic"], [90, "module-sympy.logic.inference"], [91, "module-sympy.matrices.common"], [93, "module-sympy.matrices.expressions"], [93, "module-sympy.matrices.expressions.blockmatrix"], [94, "module-sympy.matrices.immutable"], [95, "module-sympy.matrices"], [96, "module-sympy.matrices.matrices"], [98, "module-sympy.matrices.sparse"], [99, "module-sympy.matrices.sparsetools"], [100, "module-sympy.ntheory.bbp_pi"], [100, "module-sympy.ntheory.continued_fraction"], [100, "module-sympy.ntheory.digits"], [100, "module-sympy.ntheory.ecm"], [100, "module-sympy.ntheory.egyptian_fraction"], [100, "module-sympy.ntheory.factor_"], [100, "module-sympy.ntheory.generate"], [100, "module-sympy.ntheory.modular"], [100, "module-sympy.ntheory.multinomial"], [100, "module-sympy.ntheory.partitions_"], [100, "module-sympy.ntheory.primetest"], [100, "module-sympy.ntheory.qs"], [100, "module-sympy.ntheory.residue_ntheory"], [102, "module-sympy.parsing"], [102, "module-sympy.parsing.sym_expr"], [103, "module-sympy.physics.continuum_mechanics.beam"], [106, "module-sympy.physics.continuum_mechanics.truss"], [109, "module-sympy.physics.control"], [110, "module-sympy.physics.control.lti"], [111, "module-sympy.physics.hep.gamma_matrices"], [112, "module-sympy.physics.hydrogen"], [113, "module-sympy.physics.matrices"], [115, "module-sympy.physics.mechanics.body"], [118, "module-sympy.physics.mechanics.joint"], [118, "module-sympy.physics.mechanics.jointsmethod"], [119, "module-sympy.physics.mechanics.kane"], [119, "module-sympy.physics.mechanics.lagrange"], [120, "module-sympy.physics.mechanics.linearize"], [121, "module-sympy.physics.mechanics.particle"], [121, "module-sympy.physics.mechanics.rigidbody"], [123, "module-sympy.physics.mechanics.system"], [134, "module-sympy.physics.mechanics"], [143, "module-sympy.physics.optics.gaussopt"], [145, "module-sympy.physics.optics.medium"], [146, "module-sympy.physics.optics.polarization"], [147, "module-sympy.physics.optics.utils"], [148, "module-sympy.physics.optics.waves"], [149, "module-sympy.physics.paulialgebra"], [150, "module-sympy.physics.qho_1d"], [151, "module-sympy.physics.quantum.anticommutator"], [152, "module-sympy.physics.quantum.cartesian"], [153, "module-sympy.physics.quantum.cg"], [154, "module-sympy.physics.quantum.circuitplot"], [155, "module-sympy.physics.quantum.commutator"], [156, "module-sympy.physics.quantum.constants"], [157, "module-sympy.physics.quantum.dagger"], [158, "module-sympy.physics.quantum.gate"], [159, "module-sympy.physics.quantum.grover"], [160, "module-sympy.physics.quantum.hilbert"], [162, "module-sympy.physics.quantum.innerproduct"], [163, "module-sympy.physics.quantum.operator"], [164, "module-sympy.physics.quantum.operatorset"], [165, "module-sympy.physics.quantum.piab"], [166, "module-sympy.physics.quantum.qapply"], [167, "module-sympy.physics.quantum.qft"], [168, "module-sympy.physics.quantum.qubit"], [169, "module-sympy.physics.quantum.represent"], [170, "module-sympy.physics.quantum.shor"], [171, "module-sympy.physics.quantum.spin"], [172, "module-sympy.physics.quantum.state"], [173, "module-sympy.physics.quantum.tensorproduct"], [174, "module-sympy.physics.secondquant"], [175, "module-sympy.physics.sho"], [176, "module-sympy.physics.units.dimensions"], [180, "module-sympy.physics.units.prefixes"], [181, "module-sympy.physics.units.quantities"], [181, "module-sympy.physics.units.util"], [182, "module-sympy.physics.units.unitsystem"], [188, "module-sympy.physics.vector.functions"], [188, "module-sympy.physics.vector.point"], [191, "module-sympy.physics.vector"], [194, "module-sympy.physics.wigner"], [195, "module-sympy.plotting.plot"], [195, "module-sympy.plotting.pygletplot"], [202, "module-sympy.polys.polyconfig"], [202, "module-sympy.polys.polyoptions"], [204, "module-sympy.polys.numberfields.modules"], [204, "module-sympy.polys.numberfields.subfield"], [205, "module-sympy.polys"], [207, "module-sympy.polys.solvers"], [209, "module-sympy.printing.aesaracode"], [209, "module-sympy.printing.c"], [209, "module-sympy.printing.codeprinter"], [209, "module-sympy.printing.conventions"], [209, "module-sympy.printing.cxx"], [209, "module-sympy.printing.fortran"], [209, "module-sympy.printing.gtk"], [209, "module-sympy.printing.jscode"], [209, "module-sympy.printing.julia"], [209, "module-sympy.printing.lambdarepr"], [209, "module-sympy.printing.latex"], [209, "module-sympy.printing.maple"], [209, "module-sympy.printing.mathematica"], [209, "module-sympy.printing.mathml"], [209, "module-sympy.printing.octave"], [209, "module-sympy.printing.precedence"], [209, "module-sympy.printing.pretty"], [209, "module-sympy.printing.pretty.pretty"], [209, "module-sympy.printing.pretty.pretty_symbology"], [209, "module-sympy.printing.pretty.stringpict"], [209, "module-sympy.printing.preview"], [209, "module-sympy.printing.printer"], [209, "module-sympy.printing.pycode"], [209, "module-sympy.printing.python"], [209, "module-sympy.printing.rcode"], [209, "module-sympy.printing.repr"], [209, "module-sympy.printing.rust"], [209, "module-sympy.printing.smtlib"], [209, "module-sympy.printing.str"], [209, "module-sympy.printing.tree"], [217, "module-sympy.sets.conditionset"], [217, "module-sympy.sets.fancysets"], [217, "module-sympy.sets.powerset"], [217, "module-sympy.sets.sets"], [219, "module-sympy.simplify.hyperexpand_doc"], [221, "module-sympy.simplify.combsimp"], [221, "module-sympy.simplify.cse_main"], [221, "module-sympy.simplify.epathtools"], [221, "module-sympy.simplify.hyperexpand"], [221, "module-sympy.simplify.powsimp"], [221, "module-sympy.simplify.radsimp"], [221, "module-sympy.simplify.ratsimp"], [221, "module-sympy.simplify.sqrtdenest"], [221, "module-sympy.simplify.trigsimp"], [224, "module-sympy.solvers.inequalities"], [225, "module-sympy.solvers.ode"], [225, "module-sympy.solvers.ode.ode"], [226, "module-sympy.solvers.pde"], [227, "module-sympy.solvers"], [227, "module-sympy.solvers.recurr"], [228, "module-sympy.solvers.solveset"], [229, "module-sympy.stats"], [229, "module-sympy.stats.crv"], [229, "module-sympy.stats.crv_types"], [229, "module-sympy.stats.frv"], [229, "module-sympy.stats.frv_types"], [229, "module-sympy.stats.rv"], [230, "module-sympy.tensor.array"], [231, "module-sympy.tensor.array.expressions"], [232, "module-sympy.tensor"], [233, "module-sympy.tensor.index_methods"], [234, "module-sympy.tensor.indexed"], [235, "module-sympy.tensor.tensor"], [236, "module-sympy.tensor.toperators"], [237, "module-sympy.testing"], [238, "module-sympy.testing.pytest"], [239, "module-sympy.testing.randtest"], [240, "module-sympy.testing.runtests"], [241, "module-sympy.utilities.autowrap"], [242, "module-sympy.utilities.codegen"], [243, "module-sympy.utilities.decorator"], [244, "module-sympy.utilities.enumerative"], [245, "module-sympy.utilities.exceptions"], [246, "module-sympy.utilities"], [247, "module-sympy.utilities.iterables"], [248, "module-sympy.utilities.lambdify"], [249, "module-sympy.utilities.memoization"], [250, "module-sympy.utilities.misc"], [251, "module-sympy.utilities.pkgdata"], [252, "module-sympy.utilities.source"], [253, "module-sympy.utilities.timeutils"], [262, "module-sympy.vector"], [271, "module-sympy.physics"]], "sympy.simplify.simplify": [[12, "module-sympy.simplify.simplify"]], "sympy": [[31, "module-sympy"]], "sympy.abc": [[33, "module-sympy.abc"]], "quaternion (class in sympy.algebras)": [[34, "sympy.algebras.Quaternion"]], "add() (sympy.algebras.quaternion method)": [[34, "sympy.algebras.Quaternion.add"]], "angle() (sympy.algebras.quaternion method)": [[34, "sympy.algebras.Quaternion.angle"]], "arc_coplanar() (sympy.algebras.quaternion method)": [[34, "sympy.algebras.Quaternion.arc_coplanar"]], "axis() (sympy.algebras.quaternion method)": [[34, "sympy.algebras.Quaternion.axis"]], "exp() (sympy.algebras.quaternion method)": [[34, "sympy.algebras.Quaternion.exp"]], "from_axis_angle() (sympy.algebras.quaternion class method)": [[34, "sympy.algebras.Quaternion.from_axis_angle"]], "from_rotation_matrix() (sympy.algebras.quaternion class method)": [[34, "sympy.algebras.Quaternion.from_rotation_matrix"]], "index_vector() (sympy.algebras.quaternion method)": [[34, "sympy.algebras.Quaternion.index_vector"]], "integrate() (sympy.algebras.quaternion method)": [[34, "sympy.algebras.Quaternion.integrate"]], "inverse() (sympy.algebras.quaternion method)": [[34, "sympy.algebras.Quaternion.inverse"]], "is_pure() (sympy.algebras.quaternion method)": [[34, "sympy.algebras.Quaternion.is_pure"]], "is_zero_quaternion() (sympy.algebras.quaternion method)": [[34, "sympy.algebras.Quaternion.is_zero_quaternion"]], "mensor() (sympy.algebras.quaternion method)": [[34, "sympy.algebras.Quaternion.mensor"]], "mul() (sympy.algebras.quaternion method)": [[34, "sympy.algebras.Quaternion.mul"]], "norm() (sympy.algebras.quaternion method)": [[34, "sympy.algebras.Quaternion.norm"]], "normalize() (sympy.algebras.quaternion method)": [[34, "sympy.algebras.Quaternion.normalize"]], "orthogonal() (sympy.algebras.quaternion method)": [[34, "sympy.algebras.Quaternion.orthogonal"]], "parallel() (sympy.algebras.quaternion method)": [[34, "sympy.algebras.Quaternion.parallel"]], "pow() (sympy.algebras.quaternion method)": [[34, "sympy.algebras.Quaternion.pow"]], "pow_cos_sin() (sympy.algebras.quaternion method)": [[34, "sympy.algebras.Quaternion.pow_cos_sin"]], "rotate_point() (sympy.algebras.quaternion static method)": [[34, "sympy.algebras.Quaternion.rotate_point"]], "scalar_part() (sympy.algebras.quaternion method)": [[34, "sympy.algebras.Quaternion.scalar_part"]], "sympy.algebras": [[34, "module-sympy.algebras"]], "to_axis_angle() (sympy.algebras.quaternion method)": [[34, "sympy.algebras.Quaternion.to_axis_angle"]], "to_rotation_matrix() (sympy.algebras.quaternion method)": [[34, "sympy.algebras.Quaternion.to_rotation_matrix"]], "vector_coplanar() (sympy.algebras.quaternion class method)": [[34, "sympy.algebras.Quaternion.vector_coplanar"]], "vector_part() (sympy.algebras.quaternion method)": [[34, "sympy.algebras.Quaternion.vector_part"]], "assumptionkeys (class in sympy.assumptions.ask)": [[35, "sympy.assumptions.ask.AssumptionKeys"]], "ask() (in module sympy.assumptions.ask)": [[35, "sympy.assumptions.ask.ask"]], "register_handler() (in module sympy.assumptions.ask)": [[35, "sympy.assumptions.ask.register_handler"]], "remove_handler() (in module sympy.assumptions.ask)": [[35, "sympy.assumptions.ask.remove_handler"]], "sympy.assumptions.ask": [[35, "module-sympy.assumptions.ask"]], "appliedpredicate (class in sympy.assumptions.assume)": [[36, "sympy.assumptions.assume.AppliedPredicate"]], "assumptionscontext (class in sympy.assumptions.assume)": [[36, "sympy.assumptions.assume.AssumptionsContext"]], "predicate (class in sympy.assumptions.assume)": [[36, "sympy.assumptions.assume.Predicate"]], "undefinedpredicate (class in sympy.assumptions.assume)": [[36, "sympy.assumptions.assume.UndefinedPredicate"]], "add() (sympy.assumptions.assume.assumptionscontext method)": [[36, "sympy.assumptions.assume.AssumptionsContext.add"]], "arg (sympy.assumptions.assume.appliedpredicate property)": [[36, "sympy.assumptions.assume.AppliedPredicate.arg"]], "arguments (sympy.assumptions.assume.appliedpredicate property)": [[36, "sympy.assumptions.assume.AppliedPredicate.arguments"]], "assuming() (in module sympy.assumptions.assume)": [[36, "sympy.assumptions.assume.assuming"]], "eval() (sympy.assumptions.assume.predicate method)": [[36, "sympy.assumptions.assume.Predicate.eval"]], "function (sympy.assumptions.assume.appliedpredicate property)": [[36, "sympy.assumptions.assume.AppliedPredicate.function"]], "handler (sympy.assumptions.assume.predicate attribute)": [[36, "sympy.assumptions.assume.Predicate.handler"]], "register() (sympy.assumptions.assume.predicate class method)": [[36, "sympy.assumptions.assume.Predicate.register"]], "register_many() (sympy.assumptions.assume.predicate class method)": [[36, "sympy.assumptions.assume.Predicate.register_many"]], "sympy.assumptions.assume": [[36, "module-sympy.assumptions.assume"]], "sympy.assumptions": [[37, "module-sympy.assumptions"]], "algebraichandler (sympy.assumptions.predicates.sets.algebraicpredicate attribute)": [[38, "sympy.assumptions.predicates.sets.AlgebraicPredicate.AlgebraicHandler"]], "algebraicpredicate (class in sympy.assumptions.predicates.sets)": [[38, "sympy.assumptions.predicates.sets.AlgebraicPredicate"]], "antihermitianpredicate (class in sympy.assumptions.predicates.sets)": [[38, "sympy.assumptions.predicates.sets.AntihermitianPredicate"]], "commutativepredicate (class in sympy.assumptions.predicates.common)": [[38, "sympy.assumptions.predicates.common.CommutativePredicate"]], "complexelementspredicate (class in sympy.assumptions.predicates.matrices)": [[38, "sympy.assumptions.predicates.matrices.ComplexElementsPredicate"]], "complexpredicate (class in sympy.assumptions.predicates.sets)": [[38, "sympy.assumptions.predicates.sets.ComplexPredicate"]], "compositepredicate (class in sympy.assumptions.predicates.ntheory)": [[38, "sympy.assumptions.predicates.ntheory.CompositePredicate"]], "diagonalpredicate (class in sympy.assumptions.predicates.matrices)": [[38, "sympy.assumptions.predicates.matrices.DiagonalPredicate"]], "evenpredicate (class in sympy.assumptions.predicates.ntheory)": [[38, "sympy.assumptions.predicates.ntheory.EvenPredicate"]], "extendedrealpredicate (class in sympy.assumptions.predicates.sets)": [[38, "sympy.assumptions.predicates.sets.ExtendedRealPredicate"]], "finitepredicate (class in sympy.assumptions.predicates.calculus)": [[38, "sympy.assumptions.predicates.calculus.FinitePredicate"]], "fullrankpredicate (class in sympy.assumptions.predicates.matrices)": [[38, "sympy.assumptions.predicates.matrices.FullRankPredicate"]], "hermitianpredicate (class in sympy.assumptions.predicates.sets)": [[38, "sympy.assumptions.predicates.sets.HermitianPredicate"]], "imaginarypredicate (class in sympy.assumptions.predicates.sets)": [[38, "sympy.assumptions.predicates.sets.ImaginaryPredicate"]], "infinitepredicate (class in sympy.assumptions.predicates.calculus)": [[38, "sympy.assumptions.predicates.calculus.InfinitePredicate"]], "integerelementspredicate (class in sympy.assumptions.predicates.matrices)": [[38, "sympy.assumptions.predicates.matrices.IntegerElementsPredicate"]], "integerpredicate (class in sympy.assumptions.predicates.sets)": [[38, "sympy.assumptions.predicates.sets.IntegerPredicate"]], "invertiblepredicate (class in sympy.assumptions.predicates.matrices)": [[38, "sympy.assumptions.predicates.matrices.InvertiblePredicate"]], "irrationalpredicate (class in sympy.assumptions.predicates.sets)": [[38, "sympy.assumptions.predicates.sets.IrrationalPredicate"]], "istruepredicate (class in sympy.assumptions.predicates.common)": [[38, "sympy.assumptions.predicates.common.IsTruePredicate"]], "lowertriangularpredicate (class in sympy.assumptions.predicates.matrices)": [[38, "sympy.assumptions.predicates.matrices.LowerTriangularPredicate"]], "negativepredicate (class in sympy.assumptions.predicates.order)": [[38, "sympy.assumptions.predicates.order.NegativePredicate"]], "nonnegativepredicate (class in sympy.assumptions.predicates.order)": [[38, "sympy.assumptions.predicates.order.NonNegativePredicate"]], "nonpositivepredicate (class in sympy.assumptions.predicates.order)": [[38, "sympy.assumptions.predicates.order.NonPositivePredicate"]], "nonzeropredicate (class in sympy.assumptions.predicates.order)": [[38, "sympy.assumptions.predicates.order.NonZeroPredicate"]], "normalpredicate (class in sympy.assumptions.predicates.matrices)": [[38, "sympy.assumptions.predicates.matrices.NormalPredicate"]], "oddpredicate (class in sympy.assumptions.predicates.ntheory)": [[38, "sympy.assumptions.predicates.ntheory.OddPredicate"]], "orthogonalpredicate (class in sympy.assumptions.predicates.matrices)": [[38, "sympy.assumptions.predicates.matrices.OrthogonalPredicate"]], "positivedefinitepredicate (class in sympy.assumptions.predicates.matrices)": [[38, "sympy.assumptions.predicates.matrices.PositiveDefinitePredicate"]], "positivepredicate (class in sympy.assumptions.predicates.order)": [[38, "sympy.assumptions.predicates.order.PositivePredicate"]], "primepredicate (class in sympy.assumptions.predicates.ntheory)": [[38, "sympy.assumptions.predicates.ntheory.PrimePredicate"]], "rationalpredicate (class in sympy.assumptions.predicates.sets)": [[38, "sympy.assumptions.predicates.sets.RationalPredicate"]], "realelementspredicate (class in sympy.assumptions.predicates.matrices)": [[38, "sympy.assumptions.predicates.matrices.RealElementsPredicate"]], "realpredicate (class in sympy.assumptions.predicates.sets)": [[38, "sympy.assumptions.predicates.sets.RealPredicate"]], "singularpredicate (class in sympy.assumptions.predicates.matrices)": [[38, "sympy.assumptions.predicates.matrices.SingularPredicate"]], "squarepredicate (class in sympy.assumptions.predicates.matrices)": [[38, "sympy.assumptions.predicates.matrices.SquarePredicate"]], "symmetricpredicate (class in sympy.assumptions.predicates.matrices)": [[38, "sympy.assumptions.predicates.matrices.SymmetricPredicate"]], "transcendentalpredicate (class in sympy.assumptions.predicates.sets)": [[38, "sympy.assumptions.predicates.sets.TranscendentalPredicate"]], "triangularpredicate (class in sympy.assumptions.predicates.matrices)": [[38, "sympy.assumptions.predicates.matrices.TriangularPredicate"]], "unittriangularpredicate (class in sympy.assumptions.predicates.matrices)": [[38, "sympy.assumptions.predicates.matrices.UnitTriangularPredicate"]], "unitarypredicate (class in sympy.assumptions.predicates.matrices)": [[38, "sympy.assumptions.predicates.matrices.UnitaryPredicate"]], "uppertriangularpredicate (class in sympy.assumptions.predicates.matrices)": [[38, "sympy.assumptions.predicates.matrices.UpperTriangularPredicate"]], "zeropredicate (class in sympy.assumptions.predicates.order)": [[38, "sympy.assumptions.predicates.order.ZeroPredicate"]], "handler (sympy.assumptions.predicates.calculus.finitepredicate attribute)": [[38, "sympy.assumptions.predicates.calculus.FinitePredicate.handler"]], "handler (sympy.assumptions.predicates.calculus.infinitepredicate attribute)": [[38, "sympy.assumptions.predicates.calculus.InfinitePredicate.handler"]], "handler (sympy.assumptions.predicates.common.commutativepredicate attribute)": [[38, "sympy.assumptions.predicates.common.CommutativePredicate.handler"]], "handler (sympy.assumptions.predicates.common.istruepredicate attribute)": [[38, "sympy.assumptions.predicates.common.IsTruePredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.complexelementspredicate attribute)": [[38, "sympy.assumptions.predicates.matrices.ComplexElementsPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.diagonalpredicate attribute)": [[38, "sympy.assumptions.predicates.matrices.DiagonalPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.fullrankpredicate attribute)": [[38, "sympy.assumptions.predicates.matrices.FullRankPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.integerelementspredicate attribute)": [[38, "sympy.assumptions.predicates.matrices.IntegerElementsPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.invertiblepredicate attribute)": [[38, "sympy.assumptions.predicates.matrices.InvertiblePredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.lowertriangularpredicate attribute)": [[38, "sympy.assumptions.predicates.matrices.LowerTriangularPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.normalpredicate attribute)": [[38, "sympy.assumptions.predicates.matrices.NormalPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.orthogonalpredicate attribute)": [[38, "sympy.assumptions.predicates.matrices.OrthogonalPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.positivedefinitepredicate attribute)": [[38, "sympy.assumptions.predicates.matrices.PositiveDefinitePredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.realelementspredicate attribute)": [[38, "sympy.assumptions.predicates.matrices.RealElementsPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.singularpredicate attribute)": [[38, "sympy.assumptions.predicates.matrices.SingularPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.squarepredicate attribute)": [[38, "sympy.assumptions.predicates.matrices.SquarePredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.symmetricpredicate attribute)": [[38, "sympy.assumptions.predicates.matrices.SymmetricPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.triangularpredicate attribute)": [[38, "sympy.assumptions.predicates.matrices.TriangularPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.unittriangularpredicate attribute)": [[38, "sympy.assumptions.predicates.matrices.UnitTriangularPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.unitarypredicate attribute)": [[38, "sympy.assumptions.predicates.matrices.UnitaryPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.uppertriangularpredicate attribute)": [[38, "sympy.assumptions.predicates.matrices.UpperTriangularPredicate.handler"]], "handler (sympy.assumptions.predicates.ntheory.compositepredicate attribute)": [[38, "sympy.assumptions.predicates.ntheory.CompositePredicate.handler"]], "handler (sympy.assumptions.predicates.ntheory.evenpredicate attribute)": [[38, "sympy.assumptions.predicates.ntheory.EvenPredicate.handler"]], "handler (sympy.assumptions.predicates.ntheory.oddpredicate attribute)": [[38, "sympy.assumptions.predicates.ntheory.OddPredicate.handler"]], "handler (sympy.assumptions.predicates.ntheory.primepredicate attribute)": [[38, "sympy.assumptions.predicates.ntheory.PrimePredicate.handler"]], "handler (sympy.assumptions.predicates.order.negativepredicate attribute)": [[38, "sympy.assumptions.predicates.order.NegativePredicate.handler"]], "handler (sympy.assumptions.predicates.order.nonnegativepredicate attribute)": [[38, "sympy.assumptions.predicates.order.NonNegativePredicate.handler"]], "handler (sympy.assumptions.predicates.order.nonpositivepredicate attribute)": [[38, "sympy.assumptions.predicates.order.NonPositivePredicate.handler"]], "handler (sympy.assumptions.predicates.order.nonzeropredicate attribute)": [[38, "sympy.assumptions.predicates.order.NonZeroPredicate.handler"]], "handler (sympy.assumptions.predicates.order.positivepredicate attribute)": [[38, "sympy.assumptions.predicates.order.PositivePredicate.handler"]], "handler (sympy.assumptions.predicates.order.zeropredicate attribute)": [[38, "sympy.assumptions.predicates.order.ZeroPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.algebraicpredicate attribute)": [[38, "sympy.assumptions.predicates.sets.AlgebraicPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.antihermitianpredicate attribute)": [[38, "sympy.assumptions.predicates.sets.AntihermitianPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.complexpredicate attribute)": [[38, "sympy.assumptions.predicates.sets.ComplexPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.extendedrealpredicate attribute)": [[38, "sympy.assumptions.predicates.sets.ExtendedRealPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.hermitianpredicate attribute)": [[38, "sympy.assumptions.predicates.sets.HermitianPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.imaginarypredicate attribute)": [[38, "sympy.assumptions.predicates.sets.ImaginaryPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.integerpredicate attribute)": [[38, "sympy.assumptions.predicates.sets.IntegerPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.irrationalpredicate attribute)": [[38, "sympy.assumptions.predicates.sets.IrrationalPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.rationalpredicate attribute)": [[38, "sympy.assumptions.predicates.sets.RationalPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.realpredicate attribute)": [[38, "sympy.assumptions.predicates.sets.RealPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.transcendentalpredicate attribute)": [[38, "sympy.assumptions.predicates.sets.TranscendentalPredicate.handler"]], "sympy.assumptions.predicates": [[38, "module-sympy.assumptions.predicates"]], "refine() (in module sympy.assumptions.refine)": [[39, "sympy.assumptions.refine.refine"]], "refine_pow() (in module sympy.assumptions.refine)": [[39, "sympy.assumptions.refine.refine_Pow"]], "refine_abs() (in module sympy.assumptions.refine)": [[39, "sympy.assumptions.refine.refine_abs"]], "refine_arg() (in module sympy.assumptions.refine)": [[39, "sympy.assumptions.refine.refine_arg"]], "refine_atan2() (in module sympy.assumptions.refine)": [[39, "sympy.assumptions.refine.refine_atan2"]], "refine_im() (in module sympy.assumptions.refine)": [[39, "sympy.assumptions.refine.refine_im"]], "refine_matrixelement() (in module sympy.assumptions.refine)": [[39, "sympy.assumptions.refine.refine_matrixelement"]], "refine_re() (in module sympy.assumptions.refine)": [[39, "sympy.assumptions.refine.refine_re"]], "refine_sign() (in module sympy.assumptions.refine)": [[39, "sympy.assumptions.refine.refine_sign"]], "sympy.assumptions.refine": [[39, "module-sympy.assumptions.refine"]], "apply_finite_diff() (in module sympy.calculus.finite_diff)": [[40, "sympy.calculus.finite_diff.apply_finite_diff"]], "continuous_domain() (in module sympy.calculus.util)": [[40, "sympy.calculus.util.continuous_domain"]], "differentiate_finite() (in module sympy.calculus.finite_diff)": [[40, "sympy.calculus.finite_diff.differentiate_finite"]], "euler_equations() (in module sympy.calculus.euler)": [[40, "sympy.calculus.euler.euler_equations"]], "finite_diff_weights() (in module sympy.calculus.finite_diff)": [[40, "sympy.calculus.finite_diff.finite_diff_weights"]], "function_range() (in module sympy.calculus.util)": [[40, "sympy.calculus.util.function_range"]], "is_convex() (in module sympy.calculus.util)": [[40, "sympy.calculus.util.is_convex"]], "is_decreasing() (in module sympy.calculus.singularities)": [[40, "sympy.calculus.singularities.is_decreasing"]], "is_increasing() (in module sympy.calculus.singularities)": [[40, "sympy.calculus.singularities.is_increasing"]], "is_monotonic() (in module sympy.calculus.singularities)": [[40, "sympy.calculus.singularities.is_monotonic"]], "is_strictly_decreasing() (in module sympy.calculus.singularities)": [[40, "sympy.calculus.singularities.is_strictly_decreasing"]], "is_strictly_increasing() (in module sympy.calculus.singularities)": [[40, "sympy.calculus.singularities.is_strictly_increasing"]], "lcim() (in module sympy.calculus.util)": [[40, "sympy.calculus.util.lcim"]], "maximum() (in module sympy.calculus.util)": [[40, "sympy.calculus.util.maximum"]], "minimum() (in module sympy.calculus.util)": [[40, "sympy.calculus.util.minimum"]], "monotonicity_helper() (in module sympy.calculus.singularities)": [[40, "sympy.calculus.singularities.monotonicity_helper"]], "not_empty_in() (in module sympy.calculus.util)": [[40, "sympy.calculus.util.not_empty_in"]], "periodicity() (in module sympy.calculus.util)": [[40, "sympy.calculus.util.periodicity"]], "singularities() (in module sympy.calculus.singularities)": [[40, "sympy.calculus.singularities.singularities"]], "stationary_points() (in module sympy.calculus.util)": [[40, "sympy.calculus.util.stationary_points"]], "sympy.calculus": [[40, "module-sympy.calculus"]], "sympy.calculus.euler": [[40, "module-sympy.calculus.euler"]], "sympy.calculus.finite_diff": [[40, "module-sympy.calculus.finite_diff"]], "sympy.calculus.singularities": [[40, "module-sympy.calculus.singularities"]], "sympy.calculus.util": [[40, "module-sympy.calculus.util"]], "arrowstringdescription (class in sympy.categories.diagram_drawing)": [[41, "sympy.categories.diagram_drawing.ArrowStringDescription"]], "category (class in sympy.categories)": [[41, "sympy.categories.Category"]], "compositemorphism (class in sympy.categories)": [[41, "sympy.categories.CompositeMorphism"]], "diagram (class in sympy.categories)": [[41, "sympy.categories.Diagram"]], "diagramgrid (class in sympy.categories.diagram_drawing)": [[41, "sympy.categories.diagram_drawing.DiagramGrid"]], "identitymorphism (class in sympy.categories)": [[41, "sympy.categories.IdentityMorphism"]], "morphism (class in sympy.categories)": [[41, "sympy.categories.Morphism"]], "namedmorphism (class in sympy.categories)": [[41, "sympy.categories.NamedMorphism"]], "object (class in sympy.categories)": [[41, "sympy.categories.Object"]], "xypicdiagramdrawer (class in sympy.categories.diagram_drawing)": [[41, "sympy.categories.diagram_drawing.XypicDiagramDrawer"]], "codomain (sympy.categories.compositemorphism property)": [[41, "sympy.categories.CompositeMorphism.codomain"]], "codomain (sympy.categories.morphism property)": [[41, "sympy.categories.Morphism.codomain"]], "commutative_diagrams (sympy.categories.category property)": [[41, "sympy.categories.Category.commutative_diagrams"]], "components (sympy.categories.compositemorphism property)": [[41, "sympy.categories.CompositeMorphism.components"]], "compose() (sympy.categories.morphism method)": [[41, "sympy.categories.Morphism.compose"]], "conclusions (sympy.categories.diagram property)": [[41, "sympy.categories.Diagram.conclusions"]], "domain (sympy.categories.compositemorphism property)": [[41, "sympy.categories.CompositeMorphism.domain"]], "domain (sympy.categories.morphism property)": [[41, "sympy.categories.Morphism.domain"]], "draw() (sympy.categories.diagram_drawing.xypicdiagramdrawer method)": [[41, "sympy.categories.diagram_drawing.XypicDiagramDrawer.draw"]], "flatten() (sympy.categories.compositemorphism method)": [[41, "sympy.categories.CompositeMorphism.flatten"]], "height (sympy.categories.diagram_drawing.diagramgrid property)": [[41, "sympy.categories.diagram_drawing.DiagramGrid.height"]], "hom() (sympy.categories.diagram method)": [[41, "sympy.categories.Diagram.hom"]], "is_subdiagram() (sympy.categories.diagram method)": [[41, "sympy.categories.Diagram.is_subdiagram"]], "morphisms (sympy.categories.diagram_drawing.diagramgrid property)": [[41, "sympy.categories.diagram_drawing.DiagramGrid.morphisms"]], "name (sympy.categories.category property)": [[41, "sympy.categories.Category.name"]], "name (sympy.categories.namedmorphism property)": [[41, "sympy.categories.NamedMorphism.name"]], "objects (sympy.categories.category property)": [[41, "sympy.categories.Category.objects"]], "objects (sympy.categories.diagram property)": [[41, "sympy.categories.Diagram.objects"]], "premises (sympy.categories.diagram property)": [[41, "sympy.categories.Diagram.premises"]], "preview_diagram() (in module sympy.categories.diagram_drawing)": [[41, "sympy.categories.diagram_drawing.preview_diagram"]], "subdiagram_from_objects() (sympy.categories.diagram method)": [[41, "sympy.categories.Diagram.subdiagram_from_objects"]], "sympy.categories": [[41, "module-sympy.categories"]], "sympy.categories.diagram_drawing": [[41, "module-sympy.categories.diagram_drawing"]], "width (sympy.categories.diagram_drawing.diagramgrid property)": [[41, "sympy.categories.diagram_drawing.DiagramGrid.width"]], "xypic_draw_diagram() (in module sympy.categories.diagram_drawing)": [[41, "sympy.categories.diagram_drawing.xypic_draw_diagram"]], "arrayconstructor (class in sympy.codegen.fnodes)": [[42, "sympy.codegen.fnodes.ArrayConstructor"]], "assignment (class in sympy.codegen.ast)": [[42, "sympy.codegen.ast.Assignment"]], "assignmentbase (class in sympy.codegen.ast)": [[42, "sympy.codegen.ast.AssignmentBase"]], "attribute (class in sympy.codegen.ast)": [[42, "sympy.codegen.ast.Attribute"]], "augmentedassignment (class in sympy.codegen.ast)": [[42, "sympy.codegen.ast.AugmentedAssignment"]], "breaktoken (class in sympy.codegen.ast)": [[42, "sympy.codegen.ast.BreakToken"]], "cbrt (class in sympy.codegen.cfunctions)": [[42, "sympy.codegen.cfunctions.Cbrt"]], "codeblock (class in sympy.codegen.ast)": [[42, "sympy.codegen.ast.CodeBlock"]], "commaoperator (class in sympy.codegen.cnodes)": [[42, "sympy.codegen.cnodes.CommaOperator"]], "comment (class in sympy.codegen.ast)": [[42, "sympy.codegen.ast.Comment"]], "complextype (class in sympy.codegen.ast)": [[42, "sympy.codegen.ast.ComplexType"]], "continuetoken (class in sympy.codegen.ast)": [[42, "sympy.codegen.ast.ContinueToken"]], "declaration (class in sympy.codegen.ast)": [[42, "sympy.codegen.ast.Declaration"]], "do (class in sympy.codegen.fnodes)": [[42, "sympy.codegen.fnodes.Do"]], "element (class in sympy.codegen.ast)": [[42, "sympy.codegen.ast.Element"]], "extent (class in sympy.codegen.fnodes)": [[42, "sympy.codegen.fnodes.Extent"]], "floatbasetype (class in sympy.codegen.ast)": [[42, "sympy.codegen.ast.FloatBaseType"]], "floattype (class in sympy.codegen.ast)": [[42, "sympy.codegen.ast.FloatType"]], "for (class in sympy.codegen.ast)": [[42, "sympy.codegen.ast.For"]], "fortranreturn (class in sympy.codegen.fnodes)": [[42, "sympy.codegen.fnodes.FortranReturn"]], "funcminusoneoptim (class in sympy.codegen.rewriting)": [[42, "sympy.codegen.rewriting.FuncMinusOneOptim"]], "functioncall (class in sympy.codegen.ast)": [[42, "sympy.codegen.ast.FunctionCall"]], "functiondefinition (class in sympy.codegen.ast)": [[42, "sympy.codegen.ast.FunctionDefinition"]], "functionprototype (class in sympy.codegen.ast)": [[42, "sympy.codegen.ast.FunctionPrototype"]], "goto (class in sympy.codegen.fnodes)": [[42, "sympy.codegen.fnodes.GoTo"]], "implieddoloop (class in sympy.codegen.fnodes)": [[42, "sympy.codegen.fnodes.ImpliedDoLoop"]], "intbasetype (class in sympy.codegen.ast)": [[42, "sympy.codegen.ast.IntBaseType"]], "label (class in sympy.codegen.cnodes)": [[42, "sympy.codegen.cnodes.Label"]], "matrixsolve (class in sympy.codegen.matrix_nodes)": [[42, "sympy.codegen.matrix_nodes.MatrixSolve"]], "module (class in sympy.codegen.fnodes)": [[42, "sympy.codegen.fnodes.Module"]], "node (class in sympy.codegen.ast)": [[42, "sympy.codegen.ast.Node"]], "nonetoken (class in sympy.codegen.ast)": [[42, "sympy.codegen.ast.NoneToken"]], "optimization (class in sympy.codegen.rewriting)": [[42, "sympy.codegen.rewriting.Optimization"]], "pointer (class in sympy.codegen.ast)": [[42, "sympy.codegen.ast.Pointer"]], "postdecrement (class in sympy.codegen.cnodes)": [[42, "sympy.codegen.cnodes.PostDecrement"]], "postincrement (class in sympy.codegen.cnodes)": [[42, "sympy.codegen.cnodes.PostIncrement"]], "predecrement (class in sympy.codegen.cnodes)": [[42, "sympy.codegen.cnodes.PreDecrement"]], "preincrement (class in sympy.codegen.cnodes)": [[42, "sympy.codegen.cnodes.PreIncrement"]], "print (class in sympy.codegen.ast)": [[42, "sympy.codegen.ast.Print"]], "program (class in sympy.codegen.fnodes)": [[42, "sympy.codegen.fnodes.Program"]], "quotedstring (class in sympy.codegen.ast)": [[42, "sympy.codegen.ast.QuotedString"]], "replaceoptim (class in sympy.codegen.rewriting)": [[42, "sympy.codegen.rewriting.ReplaceOptim"]], "return (class in sympy.codegen.ast)": [[42, "sympy.codegen.ast.Return"]], "scope (class in sympy.codegen.ast)": [[42, "sympy.codegen.ast.Scope"]], "seriesapprox (class in sympy.codegen.approximations)": [[42, "sympy.codegen.approximations.SeriesApprox"]], "signedinttype (class in sympy.codegen.ast)": [[42, "sympy.codegen.ast.SignedIntType"]], "sqrt (class in sympy.codegen.cfunctions)": [[42, "sympy.codegen.cfunctions.Sqrt"]], "stream (class in sympy.codegen.ast)": [[42, "sympy.codegen.ast.Stream"]], "string (class in sympy.codegen.ast)": [[42, "sympy.codegen.ast.String"]], "subroutine (class in sympy.codegen.fnodes)": [[42, "sympy.codegen.fnodes.Subroutine"]], "subroutinecall (class in sympy.codegen.fnodes)": [[42, "sympy.codegen.fnodes.SubroutineCall"]], "sumapprox (class in sympy.codegen.approximations)": [[42, "sympy.codegen.approximations.SumApprox"]], "token (class in sympy.codegen.ast)": [[42, "sympy.codegen.ast.Token"]], "type (class in sympy.codegen.ast)": [[42, "sympy.codegen.ast.Type"]], "unsignedinttype (class in sympy.codegen.ast)": [[42, "sympy.codegen.ast.UnsignedIntType"]], "variable (class in sympy.codegen.ast)": [[42, "sympy.codegen.ast.Variable"]], "while (class in sympy.codegen.ast)": [[42, "sympy.codegen.ast.While"]], "alignof() (in module sympy.codegen.cnodes)": [[42, "sympy.codegen.cnodes.alignof"]], "allocated() (in module sympy.codegen.fnodes)": [[42, "sympy.codegen.fnodes.allocated"]], "array() (in module sympy.codegen.fnodes)": [[42, "sympy.codegen.fnodes.array"]], "as_declaration() (sympy.codegen.ast.variable method)": [[42, "sympy.codegen.ast.Variable.as_Declaration"]], "attr_params() (sympy.codegen.ast.node method)": [[42, "sympy.codegen.ast.Node.attr_params"]], "aug_assign() (in module sympy.codegen.ast)": [[42, "sympy.codegen.ast.aug_assign"]], "bind_c() (in module sympy.codegen.fnodes)": [[42, "sympy.codegen.fnodes.bind_C"]], "cast_check() (sympy.codegen.ast.type method)": [[42, "sympy.codegen.ast.Type.cast_check"]], "cast_nocheck (sympy.codegen.ast.floatbasetype attribute)": [[42, "sympy.codegen.ast.FloatBaseType.cast_nocheck"]], "cast_nocheck() (sympy.codegen.ast.floattype method)": [[42, "sympy.codegen.ast.FloatType.cast_nocheck"]], "cmplx (class in sympy.codegen.fnodes)": [[42, "sympy.codegen.fnodes.cmplx"]], "create_expand_pow_optimization() (in module sympy.codegen.rewriting)": [[42, "sympy.codegen.rewriting.create_expand_pow_optimization"]], "cse() (sympy.codegen.ast.codeblock method)": [[42, "sympy.codegen.ast.CodeBlock.cse"]], "decimal_dig (sympy.codegen.ast.floattype property)": [[42, "sympy.codegen.ast.FloatType.decimal_dig"]], "deduced() (sympy.codegen.ast.variable class method)": [[42, "sympy.codegen.ast.Variable.deduced"]], "dig (sympy.codegen.ast.floattype property)": [[42, "sympy.codegen.ast.FloatType.dig"]], "dimension() (in module sympy.codegen.fnodes)": [[42, "sympy.codegen.fnodes.dimension"]], "dsign (class in sympy.codegen.fnodes)": [[42, "sympy.codegen.fnodes.dsign"]], "eps (sympy.codegen.ast.floattype property)": [[42, "sympy.codegen.ast.FloatType.eps"]], "exp2 (class in sympy.codegen.cfunctions)": [[42, "sympy.codegen.cfunctions.exp2"]], "expm1 (class in sympy.codegen.cfunctions)": [[42, "sympy.codegen.cfunctions.expm1"]], "fdiff() (sympy.codegen.cfunctions.cbrt method)": [[42, "sympy.codegen.cfunctions.Cbrt.fdiff"]], "fdiff() (sympy.codegen.cfunctions.sqrt method)": [[42, "sympy.codegen.cfunctions.Sqrt.fdiff"]], "fdiff() (sympy.codegen.cfunctions.exp2 method)": [[42, "sympy.codegen.cfunctions.exp2.fdiff"]], "fdiff() (sympy.codegen.cfunctions.expm1 method)": [[42, "sympy.codegen.cfunctions.expm1.fdiff"]], "fdiff() (sympy.codegen.cfunctions.fma method)": [[42, "sympy.codegen.cfunctions.fma.fdiff"]], "fdiff() (sympy.codegen.cfunctions.hypot method)": [[42, "sympy.codegen.cfunctions.hypot.fdiff"]], "fdiff() (sympy.codegen.cfunctions.log10 method)": [[42, "sympy.codegen.cfunctions.log10.fdiff"]], "fdiff() (sympy.codegen.cfunctions.log1p method)": [[42, "sympy.codegen.cfunctions.log1p.fdiff"]], "fdiff() (sympy.codegen.cfunctions.log2 method)": [[42, "sympy.codegen.cfunctions.log2.fdiff"]], "fma (class in sympy.codegen.cfunctions)": [[42, "sympy.codegen.cfunctions.fma"]], "from_expr() (sympy.codegen.ast.type class method)": [[42, "sympy.codegen.ast.Type.from_expr"]], "goto (class in sympy.codegen.cnodes)": [[42, "sympy.codegen.cnodes.goto"]], "hypot (class in sympy.codegen.cfunctions)": [[42, "sympy.codegen.cfunctions.hypot"]], "isign (class in sympy.codegen.fnodes)": [[42, "sympy.codegen.fnodes.isign"]], "kind (class in sympy.codegen.fnodes)": [[42, "sympy.codegen.fnodes.kind"]], "kwargs() (sympy.codegen.ast.token method)": [[42, "sympy.codegen.ast.Token.kwargs"]], "lbound() (in module sympy.codegen.fnodes)": [[42, "sympy.codegen.fnodes.lbound"]], "literal_dp (class in sympy.codegen.fnodes)": [[42, "sympy.codegen.fnodes.literal_dp"]], "literal_sp (class in sympy.codegen.fnodes)": [[42, "sympy.codegen.fnodes.literal_sp"]], "log10 (class in sympy.codegen.cfunctions)": [[42, "sympy.codegen.cfunctions.log10"]], "log1p (class in sympy.codegen.cfunctions)": [[42, "sympy.codegen.cfunctions.log1p"]], "log2 (class in sympy.codegen.cfunctions)": [[42, "sympy.codegen.cfunctions.log2"]], "max (sympy.codegen.ast.floattype property)": [[42, "sympy.codegen.ast.FloatType.max"]], "max_exponent (sympy.codegen.ast.floattype property)": [[42, "sympy.codegen.ast.FloatType.max_exponent"]], "merge (class in sympy.codegen.fnodes)": [[42, "sympy.codegen.fnodes.merge"]], "min_exponent (sympy.codegen.ast.floattype property)": [[42, "sympy.codegen.ast.FloatType.min_exponent"]], "newtons_method() (in module sympy.codegen.algorithms)": [[42, "sympy.codegen.algorithms.newtons_method"]], "newtons_method_function() (in module sympy.codegen.algorithms)": [[42, "sympy.codegen.algorithms.newtons_method_function"]], "optimize() (in module sympy.codegen.rewriting)": [[42, "sympy.codegen.rewriting.optimize"]], "render_as_module() (in module sympy.codegen.futils)": [[42, "sympy.codegen.futils.render_as_module"]], "render_as_module() (in module sympy.codegen.pyutils)": [[42, "sympy.codegen.pyutils.render_as_module"]], "render_as_source_file() (in module sympy.codegen.cutils)": [[42, "sympy.codegen.cutils.render_as_source_file"]], "replace_in_add() (sympy.codegen.rewriting.funcminusoneoptim method)": [[42, "sympy.codegen.rewriting.FuncMinusOneOptim.replace_in_Add"]], "reshape() (in module sympy.codegen.fnodes)": [[42, "sympy.codegen.fnodes.reshape"]], "shape() (in module sympy.codegen.fnodes)": [[42, "sympy.codegen.fnodes.shape"]], "size() (in module sympy.codegen.fnodes)": [[42, "sympy.codegen.fnodes.size"]], "sizeof() (in module sympy.codegen.cnodes)": [[42, "sympy.codegen.cnodes.sizeof"]], "struct (class in sympy.codegen.cnodes)": [[42, "sympy.codegen.cnodes.struct"]], "sympy.codegen.algorithms": [[42, "module-sympy.codegen.algorithms"]], "sympy.codegen.approximations": [[42, "module-sympy.codegen.approximations"]], "sympy.codegen.ast": [[42, "module-sympy.codegen.ast"]], "sympy.codegen.cfunctions": [[42, "module-sympy.codegen.cfunctions"]], "sympy.codegen.cnodes": [[42, "module-sympy.codegen.cnodes"]], "sympy.codegen.cutils": [[42, "module-sympy.codegen.cutils"]], "sympy.codegen.cxxnodes": [[42, "module-sympy.codegen.cxxnodes"]], "sympy.codegen.fnodes": [[42, "module-sympy.codegen.fnodes"]], "sympy.codegen.futils": [[42, "module-sympy.codegen.futils"]], "sympy.codegen.matrix_nodes": [[42, "module-sympy.codegen.matrix_nodes"]], "sympy.codegen.pyutils": [[42, "module-sympy.codegen.pyutils"]], "sympy.codegen.rewriting": [[42, "module-sympy.codegen.rewriting"]], "tiny (sympy.codegen.ast.floattype property)": [[42, "sympy.codegen.ast.FloatType.tiny"]], "topological_sort() (sympy.codegen.ast.codeblock class method)": [[42, "sympy.codegen.ast.CodeBlock.topological_sort"]], "union (class in sympy.codegen.cnodes)": [[42, "sympy.codegen.cnodes.union"]], "use (class in sympy.codegen.fnodes)": [[42, "sympy.codegen.fnodes.use"]], "use_rename (class in sympy.codegen.fnodes)": [[42, "sympy.codegen.fnodes.use_rename"]], "using (class in sympy.codegen.cxxnodes)": [[42, "sympy.codegen.cxxnodes.using"]], "graycode (class in sympy.combinatorics.graycode)": [[44, "sympy.combinatorics.graycode.GrayCode"]], "bin_to_gray() (sympy.combinatorics.graycode method)": [[44, "sympy.combinatorics.graycode.bin_to_gray"]], "current (sympy.combinatorics.graycode.graycode property)": [[44, "sympy.combinatorics.graycode.GrayCode.current"]], "generate_gray() (sympy.combinatorics.graycode.graycode method)": [[44, "sympy.combinatorics.graycode.GrayCode.generate_gray"]], "get_subset_from_bitstring() (sympy.combinatorics.graycode method)": [[44, "sympy.combinatorics.graycode.get_subset_from_bitstring"]], "gray_to_bin() (sympy.combinatorics.graycode method)": [[44, "sympy.combinatorics.graycode.gray_to_bin"]], "graycode_subsets() (sympy.combinatorics.graycode method)": [[44, "sympy.combinatorics.graycode.graycode_subsets"]], "n (sympy.combinatorics.graycode.graycode property)": [[44, "sympy.combinatorics.graycode.GrayCode.n"]], "next() (sympy.combinatorics.graycode.graycode method)": [[44, "sympy.combinatorics.graycode.GrayCode.next"]], "random_bitstring() (sympy.combinatorics.graycode method)": [[44, "sympy.combinatorics.graycode.random_bitstring"]], "rank (sympy.combinatorics.graycode.graycode property)": [[44, "sympy.combinatorics.graycode.GrayCode.rank"]], "selections (sympy.combinatorics.graycode.graycode property)": [[44, "sympy.combinatorics.graycode.GrayCode.selections"]], "skip() (sympy.combinatorics.graycode.graycode method)": [[44, "sympy.combinatorics.graycode.GrayCode.skip"]], "sympy.combinatorics.graycode": [[44, "module-sympy.combinatorics.graycode"]], "unrank() (sympy.combinatorics.graycode.graycode class method)": [[44, "sympy.combinatorics.graycode.GrayCode.unrank"]], "directproduct() (in module sympy.combinatorics.group_constructs)": [[45, "sympy.combinatorics.group_constructs.DirectProduct"]], "sympy.combinatorics.group_constructs": [[45, "module-sympy.combinatorics.group_constructs"]], "is_abelian_number() (in module sympy.combinatorics.group_numbers)": [[46, "sympy.combinatorics.group_numbers.is_abelian_number"]], "is_cyclic_number() (in module sympy.combinatorics.group_numbers)": [[46, "sympy.combinatorics.group_numbers.is_cyclic_number"]], "is_nilpotent_number() (in module sympy.combinatorics.group_numbers)": [[46, "sympy.combinatorics.group_numbers.is_nilpotent_number"]], "sympy.combinatorics.group_numbers": [[46, "module-sympy.combinatorics.group_numbers"]], "abeliangroup() (in module sympy.combinatorics.named_groups)": [[48, "sympy.combinatorics.named_groups.AbelianGroup"]], "alternatinggroup() (in module sympy.combinatorics.named_groups)": [[48, "sympy.combinatorics.named_groups.AlternatingGroup"]], "cyclicgroup() (in module sympy.combinatorics.named_groups)": [[48, "sympy.combinatorics.named_groups.CyclicGroup"]], "dihedralgroup() (in module sympy.combinatorics.named_groups)": [[48, "sympy.combinatorics.named_groups.DihedralGroup"]], "symmetricgroup() (in module sympy.combinatorics.named_groups)": [[48, "sympy.combinatorics.named_groups.SymmetricGroup"]], "sympy.combinatorics.named_groups": [[48, "module-sympy.combinatorics.named_groups"]], "integerpartition (class in sympy.combinatorics.partitions)": [[49, "sympy.combinatorics.partitions.IntegerPartition"]], "partition (class in sympy.combinatorics.partitions)": [[49, "sympy.combinatorics.partitions.Partition"]], "rgs (sympy.combinatorics.partitions.partition property)": [[49, "sympy.combinatorics.partitions.Partition.RGS"]], "rgs_enum() (in module sympy.combinatorics.partitions)": [[49, "sympy.combinatorics.partitions.RGS_enum"]], "rgs_generalized() (in module sympy.combinatorics.partitions)": [[49, "sympy.combinatorics.partitions.RGS_generalized"]], "rgs_rank() (in module sympy.combinatorics.partitions)": [[49, "sympy.combinatorics.partitions.RGS_rank"]], "rgs_unrank() (in module sympy.combinatorics.partitions)": [[49, "sympy.combinatorics.partitions.RGS_unrank"]], "as_dict() (sympy.combinatorics.partitions.integerpartition method)": [[49, "sympy.combinatorics.partitions.IntegerPartition.as_dict"]], "as_ferrers() (sympy.combinatorics.partitions.integerpartition method)": [[49, "sympy.combinatorics.partitions.IntegerPartition.as_ferrers"]], "conjugate (sympy.combinatorics.partitions.integerpartition property)": [[49, "sympy.combinatorics.partitions.IntegerPartition.conjugate"]], "from_rgs() (sympy.combinatorics.partitions.partition class method)": [[49, "sympy.combinatorics.partitions.Partition.from_rgs"]], "next_lex() (sympy.combinatorics.partitions.integerpartition method)": [[49, "sympy.combinatorics.partitions.IntegerPartition.next_lex"]], "partition (sympy.combinatorics.partitions.partition property)": [[49, "sympy.combinatorics.partitions.Partition.partition"]], "prev_lex() (sympy.combinatorics.partitions.integerpartition method)": [[49, "sympy.combinatorics.partitions.IntegerPartition.prev_lex"]], "random_integer_partition() (in module sympy.combinatorics.partitions)": [[49, "sympy.combinatorics.partitions.random_integer_partition"]], "rank (sympy.combinatorics.partitions.partition property)": [[49, "sympy.combinatorics.partitions.Partition.rank"]], "sort_key() (sympy.combinatorics.partitions.partition method)": [[49, "sympy.combinatorics.partitions.Partition.sort_key"]], "sympy.combinatorics.partitions": [[49, "module-sympy.combinatorics.partitions"]], "permutationgroup (class in sympy.combinatorics.perm_groups)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup"]], "__contains__() (sympy.combinatorics.perm_groups.permutationgroup method)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.__contains__"]], "__mul__() (sympy.combinatorics.perm_groups.permutationgroup method)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.__mul__"]], "__new__() (sympy.combinatorics.perm_groups.permutationgroup static method)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.__new__"]], "__weakref__ (sympy.combinatorics.perm_groups.permutationgroup attribute)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.__weakref__"]], "_coset_representative() (sympy.combinatorics.perm_groups.permutationgroup method)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup._coset_representative"]], "_distinct_primes_lemma() (sympy.combinatorics.perm_groups.permutationgroup class method)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup._distinct_primes_lemma"]], "_elements (sympy.combinatorics.perm_groups.permutationgroup property)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup._elements"]], "_eval_is_alt_sym_monte_carlo() (sympy.combinatorics.perm_groups.permutationgroup method)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup._eval_is_alt_sym_monte_carlo"]], "_eval_is_alt_sym_naive() (sympy.combinatorics.perm_groups.permutationgroup method)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup._eval_is_alt_sym_naive"]], "_p_elements_group() (sympy.combinatorics.perm_groups.permutationgroup method)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup._p_elements_group"]], "_random_pr_init() (sympy.combinatorics.perm_groups.permutationgroup method)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup._random_pr_init"]], "_sylow_alt_sym() (sympy.combinatorics.perm_groups.permutationgroup method)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup._sylow_alt_sym"]], "_union_find_merge() (sympy.combinatorics.perm_groups.permutationgroup method)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup._union_find_merge"]], "_union_find_rep() (sympy.combinatorics.perm_groups.permutationgroup method)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup._union_find_rep"]], "_verify() (sympy.combinatorics.perm_groups.permutationgroup method)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup._verify"]], "abelian_invariants() (sympy.combinatorics.perm_groups.permutationgroup method)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.abelian_invariants"]], "base (sympy.combinatorics.perm_groups.permutationgroup property)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.base"]], "baseswap() (sympy.combinatorics.perm_groups.permutationgroup method)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.baseswap"]], "basic_orbits (sympy.combinatorics.perm_groups.permutationgroup property)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.basic_orbits"]], "basic_stabilizers (sympy.combinatorics.perm_groups.permutationgroup property)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.basic_stabilizers"]], "basic_transversals (sympy.combinatorics.perm_groups.permutationgroup property)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.basic_transversals"]], "center() (sympy.combinatorics.perm_groups.permutationgroup method)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.center"]], "centralizer() (sympy.combinatorics.perm_groups.permutationgroup method)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.centralizer"]], "commutator() (sympy.combinatorics.perm_groups.permutationgroup method)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.commutator"]], "composition_series() (sympy.combinatorics.perm_groups.permutationgroup method)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.composition_series"]], "conjugacy_class() (sympy.combinatorics.perm_groups.permutationgroup method)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.conjugacy_class"]], "conjugacy_classes() (sympy.combinatorics.perm_groups.permutationgroup method)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.conjugacy_classes"]], "contains() (sympy.combinatorics.perm_groups.permutationgroup method)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.contains"]], "coset_factor() (sympy.combinatorics.perm_groups.permutationgroup method)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.coset_factor"]], "coset_rank() (sympy.combinatorics.perm_groups.permutationgroup method)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.coset_rank"]], "coset_table() (sympy.combinatorics.perm_groups.permutationgroup method)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.coset_table"]], "coset_transversal() (sympy.combinatorics.perm_groups.permutationgroup method)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.coset_transversal"]], "coset_unrank() (sympy.combinatorics.perm_groups.permutationgroup method)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.coset_unrank"]], "degree (sympy.combinatorics.perm_groups.permutationgroup property)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.degree"]], "derived_series() (sympy.combinatorics.perm_groups.permutationgroup method)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.derived_series"]], "derived_subgroup() (sympy.combinatorics.perm_groups.permutationgroup method)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.derived_subgroup"]], "elements (sympy.combinatorics.perm_groups.permutationgroup property)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.elements"]], "equals() (sympy.combinatorics.perm_groups.permutationgroup method)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.equals"]], "generate() (sympy.combinatorics.perm_groups.permutationgroup method)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.generate"]], "generate_dimino() (sympy.combinatorics.perm_groups.permutationgroup method)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.generate_dimino"]], "generate_schreier_sims() (sympy.combinatorics.perm_groups.permutationgroup method)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.generate_schreier_sims"]], "generator_product() (sympy.combinatorics.perm_groups.permutationgroup method)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.generator_product"]], "generators (sympy.combinatorics.perm_groups.permutationgroup property)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.generators"]], "identity (sympy.combinatorics.perm_groups.permutationgroup property)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.identity"]], "index() (sympy.combinatorics.perm_groups.permutationgroup method)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.index"]], "is_abelian (sympy.combinatorics.perm_groups.permutationgroup property)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.is_abelian"]], "is_alt_sym() (sympy.combinatorics.perm_groups.permutationgroup method)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.is_alt_sym"]], "is_alternating (sympy.combinatorics.perm_groups.permutationgroup property)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.is_alternating"]], "is_cyclic (sympy.combinatorics.perm_groups.permutationgroup property)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.is_cyclic"]], "is_elementary() (sympy.combinatorics.perm_groups.permutationgroup method)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.is_elementary"]], "is_nilpotent (sympy.combinatorics.perm_groups.permutationgroup property)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.is_nilpotent"]], "is_normal() (sympy.combinatorics.perm_groups.permutationgroup method)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.is_normal"]], "is_perfect (sympy.combinatorics.perm_groups.permutationgroup property)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.is_perfect"]], "is_polycyclic (sympy.combinatorics.perm_groups.permutationgroup property)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.is_polycyclic"]], "is_primitive() (sympy.combinatorics.perm_groups.permutationgroup method)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.is_primitive"]], "is_solvable (sympy.combinatorics.perm_groups.permutationgroup property)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.is_solvable"]], "is_subgroup() (sympy.combinatorics.perm_groups.permutationgroup method)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.is_subgroup"]], "is_symmetric (sympy.combinatorics.perm_groups.permutationgroup property)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.is_symmetric"]], "is_transitive() (sympy.combinatorics.perm_groups.permutationgroup method)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.is_transitive"]], "is_trivial (sympy.combinatorics.perm_groups.permutationgroup property)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.is_trivial"]], "lower_central_series() (sympy.combinatorics.perm_groups.permutationgroup method)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.lower_central_series"]], "make_perm() (sympy.combinatorics.perm_groups.permutationgroup method)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.make_perm"]], "max_div (sympy.combinatorics.perm_groups.permutationgroup property)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.max_div"]], "minimal_block() (sympy.combinatorics.perm_groups.permutationgroup method)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.minimal_block"]], "minimal_blocks() (sympy.combinatorics.perm_groups.permutationgroup method)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.minimal_blocks"]], "normal_closure() (sympy.combinatorics.perm_groups.permutationgroup method)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.normal_closure"]], "orbit() (sympy.combinatorics.perm_groups.permutationgroup method)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.orbit"]], "orbit_rep() (sympy.combinatorics.perm_groups.permutationgroup method)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.orbit_rep"]], "orbit_transversal() (sympy.combinatorics.perm_groups.permutationgroup method)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.orbit_transversal"]], "orbits() (sympy.combinatorics.perm_groups.permutationgroup method)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.orbits"]], "order() (sympy.combinatorics.perm_groups.permutationgroup method)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.order"]], "pointwise_stabilizer() (sympy.combinatorics.perm_groups.permutationgroup method)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.pointwise_stabilizer"]], "polycyclic_group() (sympy.combinatorics.perm_groups.permutationgroup method)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.polycyclic_group"]], "presentation() (sympy.combinatorics.perm_groups.permutationgroup method)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.presentation"]], "random() (sympy.combinatorics.perm_groups.permutationgroup method)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.random"]], "random_pr() (sympy.combinatorics.perm_groups.permutationgroup method)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.random_pr"]], "random_stab() (sympy.combinatorics.perm_groups.permutationgroup method)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.random_stab"]], "schreier_sims() (sympy.combinatorics.perm_groups.permutationgroup method)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims"]], "schreier_sims_incremental() (sympy.combinatorics.perm_groups.permutationgroup method)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims_incremental"]], "schreier_sims_random() (sympy.combinatorics.perm_groups.permutationgroup method)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims_random"]], "schreier_vector() (sympy.combinatorics.perm_groups.permutationgroup method)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.schreier_vector"]], "stabilizer() (sympy.combinatorics.perm_groups.permutationgroup method)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.stabilizer"]], "strong_gens (sympy.combinatorics.perm_groups.permutationgroup property)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.strong_gens"]], "strong_presentation() (sympy.combinatorics.perm_groups.permutationgroup method)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.strong_presentation"]], "subgroup() (sympy.combinatorics.perm_groups.permutationgroup method)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.subgroup"]], "subgroup_search() (sympy.combinatorics.perm_groups.permutationgroup method)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.subgroup_search"]], "sylow_subgroup() (sympy.combinatorics.perm_groups.permutationgroup method)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.sylow_subgroup"]], "sympy.combinatorics.perm_groups": [[51, "module-sympy.combinatorics.perm_groups"]], "transitivity_degree (sympy.combinatorics.perm_groups.permutationgroup property)": [[51, "sympy.combinatorics.perm_groups.PermutationGroup.transitivity_degree"]], "cycle (class in sympy.combinatorics.permutations)": [[52, "sympy.combinatorics.permutations.Cycle"]], "permutation (class in sympy.combinatorics.permutations)": [[52, "sympy.combinatorics.permutations.Permutation"]], "_af_parity() (in module sympy.combinatorics.permutations)": [[52, "sympy.combinatorics.permutations._af_parity"]], "alternating() (sympy.combinatorics.generators method)": [[52, "sympy.combinatorics.generators.alternating"]], "apply() (sympy.combinatorics.permutations.permutation method)": [[52, "sympy.combinatorics.permutations.Permutation.apply"]], "array_form (sympy.combinatorics.permutations.permutation property)": [[52, "sympy.combinatorics.permutations.Permutation.array_form"]], "ascents() (sympy.combinatorics.permutations.permutation method)": [[52, "sympy.combinatorics.permutations.Permutation.ascents"]], "atoms() (sympy.combinatorics.permutations.permutation method)": [[52, "sympy.combinatorics.permutations.Permutation.atoms"]], "cardinality (sympy.combinatorics.permutations.permutation property)": [[52, "sympy.combinatorics.permutations.Permutation.cardinality"]], "commutator() (sympy.combinatorics.permutations.permutation method)": [[52, "sympy.combinatorics.permutations.Permutation.commutator"]], "commutes_with() (sympy.combinatorics.permutations.permutation method)": [[52, "sympy.combinatorics.permutations.Permutation.commutes_with"]], "cycle_structure (sympy.combinatorics.permutations.permutation property)": [[52, "sympy.combinatorics.permutations.Permutation.cycle_structure"]], "cycles (sympy.combinatorics.permutations.permutation property)": [[52, "sympy.combinatorics.permutations.Permutation.cycles"]], "cyclic() (sympy.combinatorics.generators method)": [[52, "sympy.combinatorics.generators.cyclic"]], "cyclic_form (sympy.combinatorics.permutations.permutation property)": [[52, "sympy.combinatorics.permutations.Permutation.cyclic_form"]], "descents() (sympy.combinatorics.permutations.permutation method)": [[52, "sympy.combinatorics.permutations.Permutation.descents"]], "dihedral() (sympy.combinatorics.generators method)": [[52, "sympy.combinatorics.generators.dihedral"]], "from_inversion_vector() (sympy.combinatorics.permutations.permutation class method)": [[52, "sympy.combinatorics.permutations.Permutation.from_inversion_vector"]], "from_sequence() (sympy.combinatorics.permutations.permutation class method)": [[52, "sympy.combinatorics.permutations.Permutation.from_sequence"]], "full_cyclic_form (sympy.combinatorics.permutations.permutation property)": [[52, "sympy.combinatorics.permutations.Permutation.full_cyclic_form"]], "get_adjacency_distance() (sympy.combinatorics.permutations.permutation method)": [[52, "sympy.combinatorics.permutations.Permutation.get_adjacency_distance"]], "get_adjacency_matrix() (sympy.combinatorics.permutations.permutation method)": [[52, "sympy.combinatorics.permutations.Permutation.get_adjacency_matrix"]], "get_positional_distance() (sympy.combinatorics.permutations.permutation method)": [[52, "sympy.combinatorics.permutations.Permutation.get_positional_distance"]], "get_precedence_distance() (sympy.combinatorics.permutations.permutation method)": [[52, "sympy.combinatorics.permutations.Permutation.get_precedence_distance"]], "get_precedence_matrix() (sympy.combinatorics.permutations.permutation method)": [[52, "sympy.combinatorics.permutations.Permutation.get_precedence_matrix"]], "index() (sympy.combinatorics.permutations.permutation method)": [[52, "sympy.combinatorics.permutations.Permutation.index"]], "inversion_vector() (sympy.combinatorics.permutations.permutation method)": [[52, "sympy.combinatorics.permutations.Permutation.inversion_vector"]], "inversions() (sympy.combinatorics.permutations.permutation method)": [[52, "sympy.combinatorics.permutations.Permutation.inversions"]], "is_empty (sympy.combinatorics.permutations.permutation property)": [[52, "sympy.combinatorics.permutations.Permutation.is_Empty"]], "is_identity (sympy.combinatorics.permutations.permutation property)": [[52, "sympy.combinatorics.permutations.Permutation.is_Identity"]], "is_singleton (sympy.combinatorics.permutations.permutation property)": [[52, "sympy.combinatorics.permutations.Permutation.is_Singleton"]], "is_even (sympy.combinatorics.permutations.permutation property)": [[52, "sympy.combinatorics.permutations.Permutation.is_even"]], "is_odd (sympy.combinatorics.permutations.permutation property)": [[52, "sympy.combinatorics.permutations.Permutation.is_odd"]], "josephus() (sympy.combinatorics.permutations.permutation class method)": [[52, "sympy.combinatorics.permutations.Permutation.josephus"]], "length() (sympy.combinatorics.permutations.permutation method)": [[52, "sympy.combinatorics.permutations.Permutation.length"]], "list() (sympy.combinatorics.permutations.cycle method)": [[52, "sympy.combinatorics.permutations.Cycle.list"]], "list() (sympy.combinatorics.permutations.permutation method)": [[52, "sympy.combinatorics.permutations.Permutation.list"]], "max() (sympy.combinatorics.permutations.permutation method)": [[52, "sympy.combinatorics.permutations.Permutation.max"]], "min() (sympy.combinatorics.permutations.permutation method)": [[52, "sympy.combinatorics.permutations.Permutation.min"]], "mul_inv() (sympy.combinatorics.permutations.permutation method)": [[52, "sympy.combinatorics.permutations.Permutation.mul_inv"]], "next_lex() (sympy.combinatorics.permutations.permutation method)": [[52, "sympy.combinatorics.permutations.Permutation.next_lex"]], "next_nonlex() (sympy.combinatorics.permutations.permutation method)": [[52, "sympy.combinatorics.permutations.Permutation.next_nonlex"]], "next_trotterjohnson() (sympy.combinatorics.permutations.permutation method)": [[52, "sympy.combinatorics.permutations.Permutation.next_trotterjohnson"]], "order() (sympy.combinatorics.permutations.permutation method)": [[52, "sympy.combinatorics.permutations.Permutation.order"]], "parity() (sympy.combinatorics.permutations.permutation method)": [[52, "sympy.combinatorics.permutations.Permutation.parity"]], "random() (sympy.combinatorics.permutations.permutation class method)": [[52, "sympy.combinatorics.permutations.Permutation.random"]], "rank() (sympy.combinatorics.permutations.permutation method)": [[52, "sympy.combinatorics.permutations.Permutation.rank"]], "rank_nonlex() (sympy.combinatorics.permutations.permutation method)": [[52, "sympy.combinatorics.permutations.Permutation.rank_nonlex"]], "rank_trotterjohnson() (sympy.combinatorics.permutations.permutation method)": [[52, "sympy.combinatorics.permutations.Permutation.rank_trotterjohnson"]], "resize() (sympy.combinatorics.permutations.permutation method)": [[52, "sympy.combinatorics.permutations.Permutation.resize"]], "rmul() (sympy.combinatorics.permutations.permutation static method)": [[52, "sympy.combinatorics.permutations.Permutation.rmul"]], "rmul_with_af() (sympy.combinatorics.permutations.permutation class method)": [[52, "sympy.combinatorics.permutations.Permutation.rmul_with_af"]], "runs() (sympy.combinatorics.permutations.permutation method)": [[52, "sympy.combinatorics.permutations.Permutation.runs"]], "signature() (sympy.combinatorics.permutations.permutation method)": [[52, "sympy.combinatorics.permutations.Permutation.signature"]], "size (sympy.combinatorics.permutations.permutation property)": [[52, "sympy.combinatorics.permutations.Permutation.size"]], "support() (sympy.combinatorics.permutations.permutation method)": [[52, "sympy.combinatorics.permutations.Permutation.support"]], "symmetric() (sympy.combinatorics.generators method)": [[52, "sympy.combinatorics.generators.symmetric"]], "sympy.combinatorics.generators": [[52, "module-sympy.combinatorics.generators"]], "sympy.combinatorics.permutations": [[52, "module-sympy.combinatorics.permutations"]], "transpositions() (sympy.combinatorics.permutations.permutation method)": [[52, "sympy.combinatorics.permutations.Permutation.transpositions"]], "unrank_lex() (sympy.combinatorics.permutations.permutation class method)": [[52, "sympy.combinatorics.permutations.Permutation.unrank_lex"]], "unrank_nonlex() (sympy.combinatorics.permutations.permutation class method)": [[52, "sympy.combinatorics.permutations.Permutation.unrank_nonlex"]], "unrank_trotterjohnson() (sympy.combinatorics.permutations.permutation class method)": [[52, "sympy.combinatorics.permutations.Permutation.unrank_trotterjohnson"]], "polyhedron (class in sympy.combinatorics.polyhedron)": [[53, "sympy.combinatorics.polyhedron.Polyhedron"]], "array_form (sympy.combinatorics.polyhedron.polyhedron property)": [[53, "sympy.combinatorics.polyhedron.Polyhedron.array_form"]], "corners (sympy.combinatorics.polyhedron.polyhedron property)": [[53, "sympy.combinatorics.polyhedron.Polyhedron.corners"]], "cyclic_form (sympy.combinatorics.polyhedron.polyhedron property)": [[53, "sympy.combinatorics.polyhedron.Polyhedron.cyclic_form"]], "edges (sympy.combinatorics.polyhedron.polyhedron property)": [[53, "sympy.combinatorics.polyhedron.Polyhedron.edges"]], "faces (sympy.combinatorics.polyhedron.polyhedron property)": [[53, "sympy.combinatorics.polyhedron.Polyhedron.faces"]], "pgroup (sympy.combinatorics.polyhedron.polyhedron property)": [[53, "sympy.combinatorics.polyhedron.Polyhedron.pgroup"]], "reset() (sympy.combinatorics.polyhedron.polyhedron method)": [[53, "sympy.combinatorics.polyhedron.Polyhedron.reset"]], "rotate() (sympy.combinatorics.polyhedron.polyhedron method)": [[53, "sympy.combinatorics.polyhedron.Polyhedron.rotate"]], "size (sympy.combinatorics.polyhedron.polyhedron property)": [[53, "sympy.combinatorics.polyhedron.Polyhedron.size"]], "sympy.combinatorics.polyhedron": [[53, "module-sympy.combinatorics.polyhedron"]], "vertices (sympy.combinatorics.polyhedron.polyhedron property)": [[53, "sympy.combinatorics.polyhedron.Polyhedron.vertices"]], "prufer (class in sympy.combinatorics.prufer)": [[54, "sympy.combinatorics.prufer.Prufer"]], "edges() (sympy.combinatorics.prufer.prufer static method)": [[54, "sympy.combinatorics.prufer.Prufer.edges"]], "next() (sympy.combinatorics.prufer.prufer method)": [[54, "sympy.combinatorics.prufer.Prufer.next"]], "nodes (sympy.combinatorics.prufer.prufer property)": [[54, "sympy.combinatorics.prufer.Prufer.nodes"]], "prev() (sympy.combinatorics.prufer.prufer method)": [[54, "sympy.combinatorics.prufer.Prufer.prev"]], "prufer_rank() (sympy.combinatorics.prufer.prufer method)": [[54, "sympy.combinatorics.prufer.Prufer.prufer_rank"]], "prufer_repr (sympy.combinatorics.prufer.prufer property)": [[54, "sympy.combinatorics.prufer.Prufer.prufer_repr"]], "rank (sympy.combinatorics.prufer.prufer property)": [[54, "sympy.combinatorics.prufer.Prufer.rank"]], "size (sympy.combinatorics.prufer.prufer property)": [[54, "sympy.combinatorics.prufer.Prufer.size"]], "sympy.combinatorics.prufer": [[54, "module-sympy.combinatorics.prufer"]], "to_prufer() (sympy.combinatorics.prufer.prufer static method)": [[54, "sympy.combinatorics.prufer.Prufer.to_prufer"]], "to_tree() (sympy.combinatorics.prufer.prufer static method)": [[54, "sympy.combinatorics.prufer.Prufer.to_tree"]], "tree_repr (sympy.combinatorics.prufer.prufer property)": [[54, "sympy.combinatorics.prufer.Prufer.tree_repr"]], "unrank() (sympy.combinatorics.prufer.prufer class method)": [[54, "sympy.combinatorics.prufer.Prufer.unrank"]], "subset (class in sympy.combinatorics.subsets)": [[55, "sympy.combinatorics.subsets.Subset"]], "bitlist_from_subset() (sympy.combinatorics.subsets.subset class method)": [[55, "sympy.combinatorics.subsets.Subset.bitlist_from_subset"]], "cardinality (sympy.combinatorics.subsets.subset property)": [[55, "sympy.combinatorics.subsets.Subset.cardinality"]], "iterate_binary() (sympy.combinatorics.subsets.subset method)": [[55, "sympy.combinatorics.subsets.Subset.iterate_binary"]], "iterate_graycode() (sympy.combinatorics.subsets.subset method)": [[55, "sympy.combinatorics.subsets.Subset.iterate_graycode"]], "ksubsets() (sympy.combinatorics.subsets method)": [[55, "sympy.combinatorics.subsets.ksubsets"]], "next_binary() (sympy.combinatorics.subsets.subset method)": [[55, "sympy.combinatorics.subsets.Subset.next_binary"]], "next_gray() (sympy.combinatorics.subsets.subset method)": [[55, "sympy.combinatorics.subsets.Subset.next_gray"]], "next_lexicographic() (sympy.combinatorics.subsets.subset method)": [[55, "sympy.combinatorics.subsets.Subset.next_lexicographic"]], "prev_binary() (sympy.combinatorics.subsets.subset method)": [[55, "sympy.combinatorics.subsets.Subset.prev_binary"]], "prev_gray() (sympy.combinatorics.subsets.subset method)": [[55, "sympy.combinatorics.subsets.Subset.prev_gray"]], "prev_lexicographic() (sympy.combinatorics.subsets.subset method)": [[55, "sympy.combinatorics.subsets.Subset.prev_lexicographic"]], "rank_binary (sympy.combinatorics.subsets.subset property)": [[55, "sympy.combinatorics.subsets.Subset.rank_binary"]], "rank_gray (sympy.combinatorics.subsets.subset property)": [[55, "sympy.combinatorics.subsets.Subset.rank_gray"]], "rank_lexicographic (sympy.combinatorics.subsets.subset property)": [[55, "sympy.combinatorics.subsets.Subset.rank_lexicographic"]], "size (sympy.combinatorics.subsets.subset property)": [[55, "sympy.combinatorics.subsets.Subset.size"]], "subset (sympy.combinatorics.subsets.subset property)": [[55, "sympy.combinatorics.subsets.Subset.subset"]], "subset_from_bitlist() (sympy.combinatorics.subsets.subset class method)": [[55, "sympy.combinatorics.subsets.Subset.subset_from_bitlist"]], "subset_indices() (sympy.combinatorics.subsets.subset class method)": [[55, "sympy.combinatorics.subsets.Subset.subset_indices"]], "superset (sympy.combinatorics.subsets.subset property)": [[55, "sympy.combinatorics.subsets.Subset.superset"]], "superset_size (sympy.combinatorics.subsets.subset property)": [[55, "sympy.combinatorics.subsets.Subset.superset_size"]], "sympy.combinatorics.subsets": [[55, "module-sympy.combinatorics.subsets"]], "unrank_binary() (sympy.combinatorics.subsets.subset class method)": [[55, "sympy.combinatorics.subsets.Subset.unrank_binary"]], "unrank_gray() (sympy.combinatorics.subsets.subset class method)": [[55, "sympy.combinatorics.subsets.Subset.unrank_gray"]], "bsgs_direct_product() (in module sympy.combinatorics.tensor_can)": [[56, "sympy.combinatorics.tensor_can.bsgs_direct_product"]], "canonicalize() (in module sympy.combinatorics.tensor_can)": [[56, "sympy.combinatorics.tensor_can.canonicalize"]], "double_coset_can_rep() (in module sympy.combinatorics.tensor_can)": [[56, "sympy.combinatorics.tensor_can.double_coset_can_rep"]], "get_symmetric_group_sgs() (in module sympy.combinatorics.tensor_can)": [[56, "sympy.combinatorics.tensor_can.get_symmetric_group_sgs"]], "sympy.combinatorics.tensor_can": [[56, "module-sympy.combinatorics.tensor_can"]], "_cmp_perm_lists() (in module sympy.combinatorics.testutil)": [[57, "sympy.combinatorics.testutil._cmp_perm_lists"]], "_naive_list_centralizer() (in module sympy.combinatorics.testutil)": [[57, "sympy.combinatorics.testutil._naive_list_centralizer"]], "_verify_bsgs() (in module sympy.combinatorics.testutil)": [[57, "sympy.combinatorics.testutil._verify_bsgs"]], "_verify_centralizer() (in module sympy.combinatorics.testutil)": [[57, "sympy.combinatorics.testutil._verify_centralizer"]], "_verify_normal_closure() (in module sympy.combinatorics.testutil)": [[57, "sympy.combinatorics.testutil._verify_normal_closure"]], "sympy.combinatorics.testutil": [[57, "module-sympy.combinatorics.testutil"]], "_base_ordering() (in module sympy.combinatorics.util)": [[58, "sympy.combinatorics.util._base_ordering"]], "_check_cycles_alt_sym() (in module sympy.combinatorics.util)": [[58, "sympy.combinatorics.util._check_cycles_alt_sym"]], "_distribute_gens_by_base() (in module sympy.combinatorics.util)": [[58, "sympy.combinatorics.util._distribute_gens_by_base"]], "_handle_precomputed_bsgs() (in module sympy.combinatorics.util)": [[58, "sympy.combinatorics.util._handle_precomputed_bsgs"]], "_orbits_transversals_from_bsgs() (in module sympy.combinatorics.util)": [[58, "sympy.combinatorics.util._orbits_transversals_from_bsgs"]], "_remove_gens() (in module sympy.combinatorics.util)": [[58, "sympy.combinatorics.util._remove_gens"]], "_strip() (in module sympy.combinatorics.util)": [[58, "sympy.combinatorics.util._strip"]], "_strong_gens_from_distr() (in module sympy.combinatorics.util)": [[58, "sympy.combinatorics.util._strong_gens_from_distr"]], "sympy.combinatorics.util": [[58, "module-sympy.combinatorics.util"]], "exprwithintlimits (class in sympy.concrete.expr_with_intlimits)": [[59, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits"]], "product (class in sympy.concrete.products)": [[59, "sympy.concrete.products.Product"]], "sum (class in sympy.concrete.summations)": [[59, "sympy.concrete.summations.Sum"]], "change_index() (sympy.concrete.expr_with_intlimits.exprwithintlimits method)": [[59, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits.change_index"]], "euler_maclaurin() (sympy.concrete.summations.sum method)": [[59, "sympy.concrete.summations.Sum.euler_maclaurin"]], "eval_zeta_function() (sympy.concrete.summations.sum method)": [[59, "sympy.concrete.summations.Sum.eval_zeta_function"]], "gosper_normal() (in module sympy.concrete.gosper)": [[59, "sympy.concrete.gosper.gosper_normal"]], "gosper_sum() (in module sympy.concrete.gosper)": [[59, "sympy.concrete.gosper.gosper_sum"]], "gosper_term() (in module sympy.concrete.gosper)": [[59, "sympy.concrete.gosper.gosper_term"]], "has_empty_sequence (sympy.concrete.expr_with_intlimits.exprwithintlimits property)": [[59, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits.has_empty_sequence"]], "index() (sympy.concrete.expr_with_intlimits.exprwithintlimits method)": [[59, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits.index"]], "is_absolutely_convergent() (sympy.concrete.summations.sum method)": [[59, "sympy.concrete.summations.Sum.is_absolutely_convergent"]], "is_convergent() (sympy.concrete.products.product method)": [[59, "sympy.concrete.products.Product.is_convergent"]], "is_convergent() (sympy.concrete.summations.sum method)": [[59, "sympy.concrete.summations.Sum.is_convergent"]], "product() (in module sympy.concrete.products)": [[59, "sympy.concrete.products.product"]], "reorder() (sympy.concrete.expr_with_intlimits.exprwithintlimits method)": [[59, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits.reorder"]], "reorder_limit() (sympy.concrete.expr_with_intlimits.exprwithintlimits method)": [[59, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits.reorder_limit"]], "reverse_order() (sympy.concrete.products.product method)": [[59, "sympy.concrete.products.Product.reverse_order"]], "reverse_order() (sympy.concrete.summations.sum method)": [[59, "sympy.concrete.summations.Sum.reverse_order"]], "summation() (in module sympy.concrete.summations)": [[59, "sympy.concrete.summations.summation"]], "add (class in sympy.core.add)": [[60, "sympy.core.add.Add"]], "algebraicnumber (class in sympy.core.numbers)": [[60, "sympy.core.numbers.AlgebraicNumber"]], "atom (class in sympy.core.basic)": [[60, "sympy.core.basic.Atom"]], "atomicexpr (class in sympy.core.expr)": [[60, "sympy.core.expr.AtomicExpr"]], "basic (class in sympy.core.basic)": [[60, "sympy.core.basic.Basic"]], "booleankind (in module sympy.core.kind)": [[60, "sympy.core.kind.BooleanKind"]], "catalan (class in sympy.core.numbers)": [[60, "sympy.core.numbers.Catalan"]], "complexinfinity (class in sympy.core.numbers)": [[60, "sympy.core.numbers.ComplexInfinity"]], "derivative (class in sympy.core.function)": [[60, "sympy.core.function.Derivative"]], "dict (class in sympy.core.containers)": [[60, "sympy.core.containers.Dict"]], "dummy (class in sympy.core.symbol)": [[60, "sympy.core.symbol.Dummy"]], "eq (in module sympy.core.relational)": [[60, "sympy.core.relational.Eq"]], "equality (class in sympy.core.relational)": [[60, "sympy.core.relational.Equality"]], "eulergamma (class in sympy.core.numbers)": [[60, "sympy.core.numbers.EulerGamma"]], "evalfmixin (class in sympy.core.evalf)": [[60, "sympy.core.evalf.EvalfMixin"]], "exp1 (class in sympy.core.numbers)": [[60, "sympy.core.numbers.Exp1"]], "expr (class in sympy.core.expr)": [[60, "sympy.core.expr.Expr"]], "float (class in sympy.core.numbers)": [[60, "sympy.core.numbers.Float"]], "function (class in sympy.core.function)": [[60, "sympy.core.function.Function"]], "functionclass (class in sympy.core.function)": [[60, "sympy.core.function.FunctionClass"]], "ge (in module sympy.core.relational)": [[60, "sympy.core.relational.Ge"]], "goldenratio (class in sympy.core.numbers)": [[60, "sympy.core.numbers.GoldenRatio"]], "greaterthan (class in sympy.core.relational)": [[60, "sympy.core.relational.GreaterThan"]], "gt (in module sympy.core.relational)": [[60, "sympy.core.relational.Gt"]], "half (class in sympy.core.numbers)": [[60, "sympy.core.numbers.Half"]], "imaginaryunit (class in sympy.core.numbers)": [[60, "sympy.core.numbers.ImaginaryUnit"]], "infinity (class in sympy.core.numbers)": [[60, "sympy.core.numbers.Infinity"]], "integer (class in sympy.core.numbers)": [[60, "sympy.core.numbers.Integer"]], "kind (class in sympy.core.kind)": [[60, "sympy.core.kind.Kind"]], "lambda (class in sympy.core.function)": [[60, "sympy.core.function.Lambda"]], "le (in module sympy.core.relational)": [[60, "sympy.core.relational.Le"]], "lessthan (class in sympy.core.relational)": [[60, "sympy.core.relational.LessThan"]], "lt (in module sympy.core.relational)": [[60, "sympy.core.relational.Lt"]], "mod (class in sympy.core.mod)": [[60, "sympy.core.mod.Mod"]], "mul (class in sympy.core.mul)": [[60, "sympy.core.mul.Mul"]], "n() (in module sympy.core.evalf)": [[60, "sympy.core.evalf.N"]], "nan (class in sympy.core.numbers)": [[60, "sympy.core.numbers.NaN"]], "ne (in module sympy.core.relational)": [[60, "sympy.core.relational.Ne"]], "negativeinfinity (class in sympy.core.numbers)": [[60, "sympy.core.numbers.NegativeInfinity"]], "negativeone (class in sympy.core.numbers)": [[60, "sympy.core.numbers.NegativeOne"]], "number (class in sympy.core.numbers)": [[60, "sympy.core.numbers.Number"]], "numberkind (in module sympy.core.kind)": [[60, "sympy.core.kind.NumberKind"]], "numbersymbol (class in sympy.core.numbers)": [[60, "sympy.core.numbers.NumberSymbol"]], "one (class in sympy.core.numbers)": [[60, "sympy.core.numbers.One"]], "pep 335": [[60, "index-0"], [60, "index-1"], [60, "index-2"], [60, "index-3"]], "pi (class in sympy.core.numbers)": [[60, "sympy.core.numbers.Pi"]], "poleerror (class in sympy.core.function)": [[60, "sympy.core.function.PoleError"]], "pow (class in sympy.core.power)": [[60, "sympy.core.power.Pow"]], "precisionexhausted (class in sympy.core.evalf)": [[60, "sympy.core.evalf.PrecisionExhausted"]], "python enhancement proposals": [[60, "index-0"], [60, "index-1"], [60, "index-2"], [60, "index-3"]], "rational (class in sympy.core.numbers)": [[60, "sympy.core.numbers.Rational"]], "realnumber (in module sympy.core.numbers)": [[60, "sympy.core.numbers.RealNumber"]], "rel (in module sympy.core.relational)": [[60, "sympy.core.relational.Rel"]], "relational (class in sympy.core.relational)": [[60, "sympy.core.relational.Relational"]], "singleton (class in sympy.core.singleton)": [[60, "sympy.core.singleton.Singleton"]], "singletonregistry (class in sympy.core.singleton)": [[60, "sympy.core.singleton.SingletonRegistry"]], "strictgreaterthan (class in sympy.core.relational)": [[60, "sympy.core.relational.StrictGreaterThan"]], "strictlessthan (class in sympy.core.relational)": [[60, "sympy.core.relational.StrictLessThan"]], "subs (class in sympy.core.function)": [[60, "sympy.core.function.Subs"]], "symbol (class in sympy.core.symbol)": [[60, "sympy.core.symbol.Symbol"]], "tribonacciconstant (class in sympy.core.numbers)": [[60, "sympy.core.numbers.TribonacciConstant"]], "tuple (class in sympy.core.containers)": [[60, "sympy.core.containers.Tuple"]], "tuplekind (class in sympy.core.containers)": [[60, "sympy.core.containers.TupleKind"]], "undefinedkind (in module sympy.core.kind)": [[60, "sympy.core.kind.UndefinedKind"]], "unequality (class in sympy.core.relational)": [[60, "sympy.core.relational.Unequality"]], "unevaluatedexpr (class in sympy.core.expr)": [[60, "sympy.core.expr.UnevaluatedExpr"]], "wild (class in sympy.core.symbol)": [[60, "sympy.core.symbol.Wild"]], "wildfunction (class in sympy.core.function)": [[60, "sympy.core.function.WildFunction"]], "zero (class in sympy.core.numbers)": [[60, "sympy.core.numbers.Zero"]], "__cacheit() (in module sympy.core.cache)": [[60, "sympy.core.cache.__cacheit"]], "__new__() (sympy.core.numbers.algebraicnumber static method)": [[60, "sympy.core.numbers.AlgebraicNumber.__new__"]], "_diff_wrt (sympy.core.function.derivative property)": [[60, "sympy.core.function.Derivative._diff_wrt"]], "_randint() (in module sympy.core.random)": [[60, "sympy.core.random._randint"]], "_randrange() (in module sympy.core.random)": [[60, "sympy.core.random._randrange"]], "_sort_variable_count() (sympy.core.function.derivative class method)": [[60, "sympy.core.function.Derivative._sort_variable_count"]], "algebraic": [[60, "term-algebraic"]], "antihermitian": [[60, "term-antihermitian"]], "apart() (sympy.core.expr.expr method)": [[60, "sympy.core.expr.Expr.apart"]], "approximation() (sympy.core.numbers.numbersymbol method)": [[60, "sympy.core.numbers.NumberSymbol.approximation"]], "args (sympy.core.basic.basic property)": [[60, "sympy.core.basic.Basic.args"]], "args_cnc() (sympy.core.expr.expr method)": [[60, "sympy.core.expr.Expr.args_cnc"]], "as_base_exp() (sympy.core.function.function method)": [[60, "sympy.core.function.Function.as_base_exp"]], "as_base_exp() (sympy.core.power.pow method)": [[60, "sympy.core.power.Pow.as_base_exp"]], "as_coeff_add() (sympy.core.add.add method)": [[60, "sympy.core.add.Add.as_coeff_Add"], [60, "sympy.core.add.Add.as_coeff_add"]], "as_coeff_add() (sympy.core.expr.expr method)": [[60, "sympy.core.expr.Expr.as_coeff_Add"], [60, "sympy.core.expr.Expr.as_coeff_add"]], "as_coeff_add() (sympy.core.numbers.number method)": [[60, "sympy.core.numbers.Number.as_coeff_Add"]], "as_coeff_add() (sympy.core.numbers.rational method)": [[60, "sympy.core.numbers.Rational.as_coeff_Add"]], "as_coeff_mul() (sympy.core.expr.expr method)": [[60, "sympy.core.expr.Expr.as_coeff_Mul"], [60, "sympy.core.expr.Expr.as_coeff_mul"]], "as_coeff_mul() (sympy.core.mul.mul method)": [[60, "sympy.core.mul.Mul.as_coeff_Mul"]], "as_coeff_mul() (sympy.core.numbers.number method)": [[60, "sympy.core.numbers.Number.as_coeff_Mul"]], "as_coeff_mul() (sympy.core.numbers.rational method)": [[60, "sympy.core.numbers.Rational.as_coeff_Mul"]], "as_coeff_exponent() (sympy.core.expr.expr method)": [[60, "sympy.core.expr.Expr.as_coeff_exponent"]], "as_coefficient() (sympy.core.expr.expr method)": [[60, "sympy.core.expr.Expr.as_coefficient"]], "as_coefficients_dict() (sympy.core.expr.expr method)": [[60, "sympy.core.expr.Expr.as_coefficients_dict"]], "as_content_primitive() (sympy.core.add.add method)": [[60, "sympy.core.add.Add.as_content_primitive"]], "as_content_primitive() (sympy.core.basic.basic method)": [[60, "sympy.core.basic.Basic.as_content_primitive"]], "as_content_primitive() (sympy.core.expr.expr method)": [[60, "sympy.core.expr.Expr.as_content_primitive"]], "as_content_primitive() (sympy.core.mul.mul method)": [[60, "sympy.core.mul.Mul.as_content_primitive"]], "as_content_primitive() (sympy.core.numbers.rational method)": [[60, "sympy.core.numbers.Rational.as_content_primitive"]], "as_content_primitive() (sympy.core.power.pow method)": [[60, "sympy.core.power.Pow.as_content_primitive"]], "as_dummy() (sympy.core.basic.basic method)": [[60, "sympy.core.basic.Basic.as_dummy"]], "as_expr() (sympy.core.expr.expr method)": [[60, "sympy.core.expr.Expr.as_expr"]], "as_expr() (sympy.core.numbers.algebraicnumber method)": [[60, "sympy.core.numbers.AlgebraicNumber.as_expr"]], "as_finite_difference() (sympy.core.function.derivative method)": [[60, "sympy.core.function.Derivative.as_finite_difference"]], "as_independent() (sympy.core.expr.expr method)": [[60, "sympy.core.expr.Expr.as_independent"]], "as_leading_term() (sympy.core.expr.expr method)": [[60, "sympy.core.expr.Expr.as_leading_term"]], "as_numer_denom() (sympy.core.add.add method)": [[60, "sympy.core.add.Add.as_numer_denom"]], "as_numer_denom() (sympy.core.expr.expr method)": [[60, "sympy.core.expr.Expr.as_numer_denom"]], "as_ordered_factors() (sympy.core.expr.expr method)": [[60, "sympy.core.expr.Expr.as_ordered_factors"]], "as_ordered_factors() (sympy.core.mul.mul method)": [[60, "sympy.core.mul.Mul.as_ordered_factors"]], "as_ordered_terms() (sympy.core.expr.expr method)": [[60, "sympy.core.expr.Expr.as_ordered_terms"]], "as_poly() (sympy.core.expr.expr method)": [[60, "sympy.core.expr.Expr.as_poly"]], "as_poly() (sympy.core.numbers.algebraicnumber method)": [[60, "sympy.core.numbers.AlgebraicNumber.as_poly"]], "as_poly() (sympy.core.relational.equality method)": [[60, "sympy.core.relational.Equality.as_poly"]], "as_powers_dict() (sympy.core.expr.expr method)": [[60, "sympy.core.expr.Expr.as_powers_dict"]], "as_real_imag() (sympy.core.add.add method)": [[60, "sympy.core.add.Add.as_real_imag"]], "as_real_imag() (sympy.core.expr.expr method)": [[60, "sympy.core.expr.Expr.as_real_imag"]], "as_terms() (sympy.core.expr.expr method)": [[60, "sympy.core.expr.Expr.as_terms"]], "as_two_terms() (sympy.core.add.add method)": [[60, "sympy.core.add.Add.as_two_terms"]], "as_two_terms() (sympy.core.mul.mul method)": [[60, "sympy.core.mul.Mul.as_two_terms"]], "aseries() (sympy.core.expr.expr method)": [[60, "sympy.core.expr.Expr.aseries"]], "assumptions0 (sympy.core.basic.basic property)": [[60, "sympy.core.basic.Basic.assumptions0"]], "atoms() (sympy.core.basic.basic method)": [[60, "sympy.core.basic.Basic.atoms"]], "bottom_up() (in module sympy.core.traversal)": [[60, "sympy.core.traversal.bottom_up"]], "bound_symbols (sympy.core.function.lambda property)": [[60, "sympy.core.function.Lambda.bound_symbols"]], "bound_symbols (sympy.core.function.subs property)": [[60, "sympy.core.function.Subs.bound_symbols"]], "cancel() (sympy.core.expr.expr method)": [[60, "sympy.core.expr.Expr.cancel"]], "canonical (sympy.core.relational.relational property)": [[60, "sympy.core.relational.Relational.canonical"]], "canonical_variables (sympy.core.basic.basic property)": [[60, "sympy.core.basic.Basic.canonical_variables"]], "class_key() (sympy.core.add.add class method)": [[60, "sympy.core.add.Add.class_key"]], "class_key() (sympy.core.basic.basic class method)": [[60, "sympy.core.basic.Basic.class_key"]], "coeff() (sympy.core.expr.expr method)": [[60, "sympy.core.expr.Expr.coeff"]], "coeffs() (sympy.core.numbers.algebraicnumber method)": [[60, "sympy.core.numbers.AlgebraicNumber.coeffs"]], "cofactors() (sympy.core.numbers.number method)": [[60, "sympy.core.numbers.Number.cofactors"]], "collect() (sympy.core.expr.expr method)": [[60, "sympy.core.expr.Expr.collect"]], "combsimp() (sympy.core.expr.expr method)": [[60, "sympy.core.expr.Expr.combsimp"]], "commutative": [[60, "term-commutative"]], "compare() (sympy.core.basic.basic method)": [[60, "sympy.core.basic.Basic.compare"]], "complex": [[60, "term-complex"]], "composite": [[60, "term-composite"]], "compute_leading_term() (sympy.core.expr.expr method)": [[60, "sympy.core.expr.Expr.compute_leading_term"]], "conjugate() (sympy.core.expr.expr method)": [[60, "sympy.core.expr.Expr.conjugate"]], "could_extract_minus_sign() (sympy.core.expr.expr method)": [[60, "sympy.core.expr.Expr.could_extract_minus_sign"]], "count() (sympy.core.basic.basic method)": [[60, "sympy.core.basic.Basic.count"]], "count_ops() (in module sympy.core.function)": [[60, "sympy.core.function.count_ops"]], "count_ops() (sympy.core.basic.basic method)": [[60, "sympy.core.basic.Basic.count_ops"]], "count_ops() (sympy.core.expr.expr method)": [[60, "sympy.core.expr.Expr.count_ops"]], "default_sort_key() (in module sympy.core.sorting)": [[60, "sympy.core.sorting.default_sort_key"]], "diff() (in module sympy.core.function)": [[60, "sympy.core.function.diff"]], "doit() (sympy.core.basic.basic method)": [[60, "sympy.core.basic.Basic.doit"]], "doit_numerically() (sympy.core.function.derivative method)": [[60, "sympy.core.function.Derivative.doit_numerically"]], "dummy_eq() (sympy.core.basic.basic method)": [[60, "sympy.core.basic.Basic.dummy_eq"]], "equals() (sympy.core.expr.expr method)": [[60, "sympy.core.expr.Expr.equals"]], "equals() (sympy.core.relational.relational method)": [[60, "sympy.core.relational.Relational.equals"]], "evalf() (sympy.core.evalf.evalfmixin method)": [[60, "sympy.core.evalf.EvalfMixin.evalf"]], "even": [[60, "term-even"]], "expand() (in module sympy.core.function)": [[60, "sympy.core.function.expand"]], "expand() (sympy.core.expr.expr method)": [[60, "sympy.core.expr.Expr.expand"]], "expand_complex() (in module sympy.core.function)": [[60, "sympy.core.function.expand_complex"]], "expand_func() (in module sympy.core.function)": [[60, "sympy.core.function.expand_func"]], "expand_log() (in module sympy.core.function)": [[60, "sympy.core.function.expand_log"]], "expand_mul() (in module sympy.core.function)": [[60, "sympy.core.function.expand_mul"]], "expand_multinomial() (in module sympy.core.function)": [[60, "sympy.core.function.expand_multinomial"]], "expand_power_base() (in module sympy.core.function)": [[60, "sympy.core.function.expand_power_base"]], "expand_power_exp() (in module sympy.core.function)": [[60, "sympy.core.function.expand_power_exp"]], "expand_trig() (in module sympy.core.function)": [[60, "sympy.core.function.expand_trig"]], "expr (sympy.core.function.lambda property)": [[60, "sympy.core.function.Lambda.expr"]], "expr (sympy.core.function.subs property)": [[60, "sympy.core.function.Subs.expr"]], "expr_free_symbols (sympy.core.expr.expr property)": [[60, "sympy.core.expr.Expr.expr_free_symbols"]], "extended_negative": [[60, "term-extended_negative"]], "extended_nonnegative": [[60, "term-extended_nonnegative"]], "extended_nonpositive": [[60, "term-extended_nonpositive"]], "extended_nonzero": [[60, "term-extended_nonzero"]], "extended_positive": [[60, "term-extended_positive"]], "extended_real": [[60, "term-extended_real"]], "extract_additively() (sympy.core.expr.expr method)": [[60, "sympy.core.expr.Expr.extract_additively"]], "extract_branch_factor() (sympy.core.expr.expr method)": [[60, "sympy.core.expr.Expr.extract_branch_factor"]], "extract_leading_order() (sympy.core.add.add method)": [[60, "sympy.core.add.Add.extract_leading_order"]], "extract_multiplicatively() (sympy.core.expr.expr method)": [[60, "sympy.core.expr.Expr.extract_multiplicatively"]], "factor() (sympy.core.expr.expr method)": [[60, "sympy.core.expr.Expr.factor"]], "factor_terms() (in module sympy.core.exprtools)": [[60, "sympy.core.exprtools.factor_terms"]], "factors() (sympy.core.numbers.rational method)": [[60, "sympy.core.numbers.Rational.factors"]], "fdiff() (sympy.core.function.function method)": [[60, "sympy.core.function.Function.fdiff"]], "field_element() (sympy.core.numbers.algebraicnumber method)": [[60, "sympy.core.numbers.AlgebraicNumber.field_element"]], "find() (sympy.core.basic.basic method)": [[60, "sympy.core.basic.Basic.find"]], "finite": [[60, "term-finite"]], "flatten() (sympy.core.add.add class method)": [[60, "sympy.core.add.Add.flatten"]], "flatten() (sympy.core.mul.mul class method)": [[60, "sympy.core.mul.Mul.flatten"]], "fourier_series() (sympy.core.expr.expr method)": [[60, "sympy.core.expr.Expr.fourier_series"]], "fps() (sympy.core.expr.expr method)": [[60, "sympy.core.expr.Expr.fps"]], "free_symbols (sympy.core.basic.basic property)": [[60, "sympy.core.basic.Basic.free_symbols"]], "fromiter() (sympy.core.basic.basic class method)": [[60, "sympy.core.basic.Basic.fromiter"]], "func (sympy.core.basic.basic property)": [[60, "sympy.core.basic.Basic.func"]], "gammasimp() (sympy.core.expr.expr method)": [[60, "sympy.core.expr.Expr.gammasimp"]], "gcd() (sympy.core.numbers.number method)": [[60, "sympy.core.numbers.Number.gcd"]], "gcd_terms() (in module sympy.core.exprtools)": [[60, "sympy.core.exprtools.gcd_terms"]], "get() (sympy.core.containers.dict method)": [[60, "sympy.core.containers.Dict.get"]], "geto() (sympy.core.expr.expr method)": [[60, "sympy.core.expr.Expr.getO"]], "getn() (sympy.core.expr.expr method)": [[60, "sympy.core.expr.Expr.getn"]], "has() (sympy.core.basic.basic method)": [[60, "sympy.core.basic.Basic.has"]], "has_free() (sympy.core.basic.basic method)": [[60, "sympy.core.basic.Basic.has_free"]], "has_xfree() (sympy.core.basic.basic method)": [[60, "sympy.core.basic.Basic.has_xfree"]], "hermitian": [[60, "term-hermitian"]], "igcd() (in module sympy.core.numbers)": [[60, "sympy.core.numbers.igcd"]], "ilcm() (in module sympy.core.numbers)": [[60, "sympy.core.numbers.ilcm"]], "imaginary": [[60, "term-imaginary"]], "index() (sympy.core.containers.tuple method)": [[60, "sympy.core.containers.Tuple.index"]], "infinite": [[60, "term-infinite"]], "integer": [[60, "term-integer"]], "integer_log() (in module sympy.core.power)": [[60, "sympy.core.power.integer_log"]], "integer_nthroot() (in module sympy.core.power)": [[60, "sympy.core.power.integer_nthroot"]], "integrate() (sympy.core.expr.expr method)": [[60, "sympy.core.expr.Expr.integrate"]], "integrate() (sympy.core.relational.equality method)": [[60, "sympy.core.relational.Equality.integrate"]], "invert() (sympy.core.expr.expr method)": [[60, "sympy.core.expr.Expr.invert"]], "irrational": [[60, "term-irrational"]], "is_algebraic_expr() (sympy.core.expr.expr method)": [[60, "sympy.core.expr.Expr.is_algebraic_expr"]], "is_aliased (sympy.core.numbers.algebraicnumber property)": [[60, "sympy.core.numbers.AlgebraicNumber.is_aliased"]], "is_comparable (sympy.core.basic.basic property)": [[60, "sympy.core.basic.Basic.is_comparable"]], "is_constant() (sympy.core.expr.expr method)": [[60, "sympy.core.expr.Expr.is_constant"]], "is_identity (sympy.core.function.lambda property)": [[60, "sympy.core.function.Lambda.is_identity"]], "is_meromorphic() (sympy.core.expr.expr method)": [[60, "sympy.core.expr.Expr.is_meromorphic"]], "is_number (sympy.core.expr.expr property)": [[60, "sympy.core.expr.Expr.is_number"]], "is_polynomial() (sympy.core.expr.expr method)": [[60, "sympy.core.expr.Expr.is_polynomial"]], "is_primitive_element (sympy.core.numbers.algebraicnumber property)": [[60, "sympy.core.numbers.AlgebraicNumber.is_primitive_element"]], "is_rational_function() (sympy.core.expr.expr method)": [[60, "sympy.core.expr.Expr.is_rational_function"]], "is_singular() (sympy.core.function.function class method)": [[60, "sympy.core.function.Function.is_singular"]], "items() (sympy.core.containers.dict method)": [[60, "sympy.core.containers.Dict.items"]], "keys() (sympy.core.containers.dict method)": [[60, "sympy.core.containers.Dict.keys"]], "kind (sympy.core.containers.tuple property)": [[60, "sympy.core.containers.Tuple.kind"]], "lcm() (sympy.core.numbers.number method)": [[60, "sympy.core.numbers.Number.lcm"]], "leadterm() (sympy.core.expr.expr method)": [[60, "sympy.core.expr.Expr.leadterm"]], "lhs (sympy.core.relational.relational property)": [[60, "sympy.core.relational.Relational.lhs"]], "limit() (sympy.core.expr.expr method)": [[60, "sympy.core.expr.Expr.limit"]], "limit_denominator() (sympy.core.numbers.rational method)": [[60, "sympy.core.numbers.Rational.limit_denominator"]], "lseries() (sympy.core.expr.expr method)": [[60, "sympy.core.expr.Expr.lseries"]], "match() (sympy.core.basic.basic method)": [[60, "sympy.core.basic.Basic.match"]], "matches() (sympy.core.basic.basic method)": [[60, "sympy.core.basic.Basic.matches"]], "minpoly_of_element() (sympy.core.numbers.algebraicnumber method)": [[60, "sympy.core.numbers.AlgebraicNumber.minpoly_of_element"]], "mod_inverse() (in module sympy.core.numbers)": [[60, "sympy.core.numbers.mod_inverse"]], "n() (sympy.core.evalf.evalfmixin method)": [[60, "sympy.core.evalf.EvalfMixin.n"]], "nargs (sympy.core.function.functionclass property)": [[60, "sympy.core.function.FunctionClass.nargs"]], "native_coeffs() (sympy.core.numbers.algebraicnumber method)": [[60, "sympy.core.numbers.AlgebraicNumber.native_coeffs"]], "negated (sympy.core.relational.relational property)": [[60, "sympy.core.relational.Relational.negated"]], "negative": [[60, "term-negative"]], "nfloat() (in module sympy.core.function)": [[60, "sympy.core.function.nfloat"]], "nonnegative": [[60, "term-nonnegative"]], "nonpositive": [[60, "term-nonpositive"]], "nonzero": [[60, "term-nonzero"]], "normal() (sympy.core.expr.expr method)": [[60, "sympy.core.expr.Expr.normal"]], "nseries() (sympy.core.expr.expr method)": [[60, "sympy.core.expr.Expr.nseries"]], "nsimplify() (sympy.core.expr.expr method)": [[60, "sympy.core.expr.Expr.nsimplify"]], "odd": [[60, "term-odd"]], "ordered() (in module sympy.core.sorting)": [[60, "sympy.core.sorting.ordered"]], "point (sympy.core.function.subs property)": [[60, "sympy.core.function.Subs.point"]], "positive": [[60, "term-positive"]], "postorder_traversal() (in module sympy.core.traversal)": [[60, "sympy.core.traversal.postorder_traversal"]], "powsimp() (sympy.core.expr.expr method)": [[60, "sympy.core.expr.Expr.powsimp"]], "preorder_traversal() (in module sympy.core.traversal)": [[60, "sympy.core.traversal.preorder_traversal"]], "prime": [[60, "term-prime"]], "primitive() (sympy.core.add.add method)": [[60, "sympy.core.add.Add.primitive"]], "primitive() (sympy.core.expr.expr method)": [[60, "sympy.core.expr.Expr.primitive"]], "primitive_element() (sympy.core.numbers.algebraicnumber method)": [[60, "sympy.core.numbers.AlgebraicNumber.primitive_element"]], "prod() (in module sympy.core.mul)": [[60, "sympy.core.mul.prod"]], "radsimp() (sympy.core.expr.expr method)": [[60, "sympy.core.expr.Expr.radsimp"]], "random_complex_number() (in module sympy.core.random)": [[60, "sympy.core.random.random_complex_number"]], "rational": [[60, "term-rational"]], "ratsimp() (sympy.core.expr.expr method)": [[60, "sympy.core.expr.Expr.ratsimp"]], "rcall() (sympy.core.basic.basic method)": [[60, "sympy.core.basic.Basic.rcall"]], "real": [[60, "term-real"]], "refine() (sympy.core.basic.basic method)": [[60, "sympy.core.basic.Basic.refine"]], "removeo() (sympy.core.expr.expr method)": [[60, "sympy.core.expr.Expr.removeO"]], "replace() (sympy.core.basic.basic method)": [[60, "sympy.core.basic.Basic.replace"]], "reversed (sympy.core.relational.relational property)": [[60, "sympy.core.relational.Relational.reversed"]], "reversedsign (sympy.core.relational.relational property)": [[60, "sympy.core.relational.Relational.reversedsign"]], "rewrite() (sympy.core.basic.basic method)": [[60, "sympy.core.basic.Basic.rewrite"]], "rhs (sympy.core.relational.relational property)": [[60, "sympy.core.relational.Relational.rhs"]], "round() (sympy.core.expr.expr method)": [[60, "sympy.core.expr.Expr.round"]], "separate() (sympy.core.expr.expr method)": [[60, "sympy.core.expr.Expr.separate"]], "series() (sympy.core.expr.expr method)": [[60, "sympy.core.expr.Expr.series"]], "seterr() (in module sympy.core.numbers)": [[60, "sympy.core.numbers.seterr"]], "signature (sympy.core.function.lambda property)": [[60, "sympy.core.function.Lambda.signature"]], "simplify() (sympy.core.basic.basic method)": [[60, "sympy.core.basic.Basic.simplify"]], "sort_key() (sympy.core.basic.basic method)": [[60, "sympy.core.basic.Basic.sort_key"]], "strict (sympy.core.relational.relational property)": [[60, "sympy.core.relational.Relational.strict"]], "subs() (sympy.core.basic.basic method)": [[60, "sympy.core.basic.Basic.subs"]], "symbols() (in module sympy.core.symbol)": [[60, "sympy.core.symbol.symbols"]], "sympify() (in module sympy.core.sympify)": [[60, "sympy.core.sympify.sympify"]], "sympy.core.add": [[60, "module-sympy.core.add"]], "sympy.core.assumptions": [[60, "module-sympy.core.assumptions"]], "sympy.core.basic": [[60, "module-sympy.core.basic"]], "sympy.core.cache": [[60, "module-sympy.core.cache"]], "sympy.core.containers": [[60, "module-sympy.core.containers"]], "sympy.core.evalf": [[60, "module-sympy.core.evalf"]], "sympy.core.expr": [[60, "module-sympy.core.expr"]], "sympy.core.exprtools": [[60, "module-sympy.core.exprtools"]], "sympy.core.function": [[60, "module-sympy.core.function"]], "sympy.core.kind": [[60, "module-sympy.core.kind"]], "sympy.core.mod": [[60, "module-sympy.core.mod"]], "sympy.core.mul": [[60, "module-sympy.core.mul"]], "sympy.core.multidimensional": [[60, "module-sympy.core.multidimensional"]], "sympy.core.numbers": [[60, "module-sympy.core.numbers"]], "sympy.core.power": [[60, "module-sympy.core.power"]], "sympy.core.random": [[60, "module-sympy.core.random"]], "sympy.core.relational": [[60, "module-sympy.core.relational"]], "sympy.core.singleton": [[60, "module-sympy.core.singleton"]], "sympy.core.symbol": [[60, "module-sympy.core.symbol"]], "sympy.core.sympify": [[60, "module-sympy.core.sympify"]], "sympy.core.traversal": [[60, "module-sympy.core.traversal"]], "taylor_term() (sympy.core.expr.expr method)": [[60, "sympy.core.expr.Expr.taylor_term"]], "test_derivative_numerically() (in module sympy.core.random)": [[60, "sympy.core.random.test_derivative_numerically"]], "to_algebraic_integer() (sympy.core.numbers.algebraicnumber method)": [[60, "sympy.core.numbers.AlgebraicNumber.to_algebraic_integer"]], "to_primitive_element() (sympy.core.numbers.algebraicnumber method)": [[60, "sympy.core.numbers.AlgebraicNumber.to_primitive_element"]], "to_root() (sympy.core.numbers.algebraicnumber method)": [[60, "sympy.core.numbers.AlgebraicNumber.to_root"]], "together() (sympy.core.expr.expr method)": [[60, "sympy.core.expr.Expr.together"]], "transcendental": [[60, "term-transcendental"]], "trigsimp() (sympy.core.expr.expr method)": [[60, "sympy.core.expr.Expr.trigsimp"]], "tuple_count() (sympy.core.containers.tuple method)": [[60, "sympy.core.containers.Tuple.tuple_count"]], "use() (in module sympy.core.traversal)": [[60, "sympy.core.traversal.use"]], "values() (sympy.core.containers.dict method)": [[60, "sympy.core.containers.Dict.values"]], "var() (in module sympy.core.symbol)": [[60, "sympy.core.symbol.var"]], "variables (sympy.core.function.lambda property)": [[60, "sympy.core.function.Lambda.variables"]], "variables (sympy.core.function.subs property)": [[60, "sympy.core.function.Subs.variables"]], "vectorize (class in sympy.core.multidimensional)": [[60, "sympy.core.multidimensional.vectorize"]], "verify_numerically() (in module sympy.core.random)": [[60, "sympy.core.random.verify_numerically"]], "walk() (in module sympy.core.traversal)": [[60, "sympy.core.traversal.walk"]], "weak (sympy.core.relational.relational property)": [[60, "sympy.core.relational.Relational.weak"]], "xreplace() (sympy.core.basic.basic method)": [[60, "sympy.core.basic.Basic.xreplace"]], "zero": [[60, "term-zero"]], "az() (in module sympy.crypto.crypto)": [[61, "sympy.crypto.crypto.AZ"]], "bifid5_square() (in module sympy.crypto.crypto)": [[61, "sympy.crypto.crypto.bifid5_square"]], "bifid6_square() (in module sympy.crypto.crypto)": [[61, "sympy.crypto.crypto.bifid6_square"]], "check_and_join() (in module sympy.crypto.crypto)": [[61, "sympy.crypto.crypto.check_and_join"]], "cycle_list() (in module sympy.crypto.crypto)": [[61, "sympy.crypto.crypto.cycle_list"]], "decipher_affine() (in module sympy.crypto.crypto)": [[61, "sympy.crypto.crypto.decipher_affine"]], "decipher_atbash() (in module sympy.crypto.crypto)": [[61, "sympy.crypto.crypto.decipher_atbash"]], "decipher_bifid() (in module sympy.crypto.crypto)": [[61, "sympy.crypto.crypto.decipher_bifid"]], "decipher_bifid5() (in module sympy.crypto.crypto)": [[61, "sympy.crypto.crypto.decipher_bifid5"]], "decipher_bifid6() (in module sympy.crypto.crypto)": [[61, "sympy.crypto.crypto.decipher_bifid6"]], "decipher_elgamal() (in module sympy.crypto.crypto)": [[61, "sympy.crypto.crypto.decipher_elgamal"]], "decipher_gm() (in module sympy.crypto.crypto)": [[61, "sympy.crypto.crypto.decipher_gm"]], "decipher_hill() (in module sympy.crypto.crypto)": [[61, "sympy.crypto.crypto.decipher_hill"]], "decipher_kid_rsa() (in module sympy.crypto.crypto)": [[61, "sympy.crypto.crypto.decipher_kid_rsa"]], "decipher_railfence() (in module sympy.crypto.crypto)": [[61, "sympy.crypto.crypto.decipher_railfence"]], "decipher_rot13() (in module sympy.crypto.crypto)": [[61, "sympy.crypto.crypto.decipher_rot13"]], "decipher_rsa() (in module sympy.crypto.crypto)": [[61, "sympy.crypto.crypto.decipher_rsa"]], "decipher_shift() (in module sympy.crypto.crypto)": [[61, "sympy.crypto.crypto.decipher_shift"]], "decipher_vigenere() (in module sympy.crypto.crypto)": [[61, "sympy.crypto.crypto.decipher_vigenere"]], "decode_morse() (in module sympy.crypto.crypto)": [[61, "sympy.crypto.crypto.decode_morse"]], "dh_private_key() (in module sympy.crypto.crypto)": [[61, "sympy.crypto.crypto.dh_private_key"]], "dh_public_key() (in module sympy.crypto.crypto)": [[61, "sympy.crypto.crypto.dh_public_key"]], "dh_shared_key() (in module sympy.crypto.crypto)": [[61, "sympy.crypto.crypto.dh_shared_key"]], "elgamal_private_key() (in module sympy.crypto.crypto)": [[61, "sympy.crypto.crypto.elgamal_private_key"]], "elgamal_public_key() (in module sympy.crypto.crypto)": [[61, "sympy.crypto.crypto.elgamal_public_key"]], "encipher_affine() (in module sympy.crypto.crypto)": [[61, "sympy.crypto.crypto.encipher_affine"]], "encipher_atbash() (in module sympy.crypto.crypto)": [[61, "sympy.crypto.crypto.encipher_atbash"]], "encipher_bifid() (in module sympy.crypto.crypto)": [[61, "sympy.crypto.crypto.encipher_bifid"]], "encipher_bifid5() (in module sympy.crypto.crypto)": [[61, "sympy.crypto.crypto.encipher_bifid5"]], "encipher_bifid6() (in module sympy.crypto.crypto)": [[61, "sympy.crypto.crypto.encipher_bifid6"]], "encipher_elgamal() (in module sympy.crypto.crypto)": [[61, "sympy.crypto.crypto.encipher_elgamal"]], "encipher_gm() (in module sympy.crypto.crypto)": [[61, "sympy.crypto.crypto.encipher_gm"]], "encipher_hill() (in module sympy.crypto.crypto)": [[61, "sympy.crypto.crypto.encipher_hill"]], "encipher_kid_rsa() (in module sympy.crypto.crypto)": [[61, "sympy.crypto.crypto.encipher_kid_rsa"]], "encipher_railfence() (in module sympy.crypto.crypto)": [[61, "sympy.crypto.crypto.encipher_railfence"]], "encipher_rot13() (in module sympy.crypto.crypto)": [[61, "sympy.crypto.crypto.encipher_rot13"]], "encipher_rsa() (in module sympy.crypto.crypto)": [[61, "sympy.crypto.crypto.encipher_rsa"]], "encipher_shift() (in module sympy.crypto.crypto)": [[61, "sympy.crypto.crypto.encipher_shift"]], "encipher_substitution() (in module sympy.crypto.crypto)": [[61, "sympy.crypto.crypto.encipher_substitution"]], "encipher_vigenere() (in module sympy.crypto.crypto)": [[61, "sympy.crypto.crypto.encipher_vigenere"]], "encode_morse() (in module sympy.crypto.crypto)": [[61, "sympy.crypto.crypto.encode_morse"]], "gm_private_key() (in module sympy.crypto.crypto)": [[61, "sympy.crypto.crypto.gm_private_key"]], "gm_public_key() (in module sympy.crypto.crypto)": [[61, "sympy.crypto.crypto.gm_public_key"]], "kid_rsa_private_key() (in module sympy.crypto.crypto)": [[61, "sympy.crypto.crypto.kid_rsa_private_key"]], "kid_rsa_public_key() (in module sympy.crypto.crypto)": [[61, "sympy.crypto.crypto.kid_rsa_public_key"]], "lfsr_autocorrelation() (in module sympy.crypto.crypto)": [[61, "sympy.crypto.crypto.lfsr_autocorrelation"]], "lfsr_connection_polynomial() (in module sympy.crypto.crypto)": [[61, "sympy.crypto.crypto.lfsr_connection_polynomial"]], "lfsr_sequence() (in module sympy.crypto.crypto)": [[61, "sympy.crypto.crypto.lfsr_sequence"]], "padded_key() (in module sympy.crypto.crypto)": [[61, "sympy.crypto.crypto.padded_key"]], "rsa_private_key() (in module sympy.crypto.crypto)": [[61, "sympy.crypto.crypto.rsa_private_key"]], "rsa_public_key() (in module sympy.crypto.crypto)": [[61, "sympy.crypto.crypto.rsa_public_key"]], "sympy.crypto.crypto": [[61, "module-sympy.crypto.crypto"]], "basecovarderivativeop (class in sympy.diffgeom)": [[62, "sympy.diffgeom.BaseCovarDerivativeOp"]], "basescalarfield (class in sympy.diffgeom)": [[62, "sympy.diffgeom.BaseScalarField"]], "basevectorfield (class in sympy.diffgeom)": [[62, "sympy.diffgeom.BaseVectorField"]], "commutator (class in sympy.diffgeom)": [[62, "sympy.diffgeom.Commutator"]], "coordsystem (class in sympy.diffgeom)": [[62, "sympy.diffgeom.CoordSystem"]], "coordinatesymbol (class in sympy.diffgeom)": [[62, "sympy.diffgeom.CoordinateSymbol"]], "covarderivativeop (class in sympy.diffgeom)": [[62, "sympy.diffgeom.CovarDerivativeOp"]], "differential (class in sympy.diffgeom)": [[62, "sympy.diffgeom.Differential"]], "liederivative (class in sympy.diffgeom)": [[62, "sympy.diffgeom.LieDerivative"]], "manifold (class in sympy.diffgeom)": [[62, "sympy.diffgeom.Manifold"]], "patch (class in sympy.diffgeom)": [[62, "sympy.diffgeom.Patch"]], "point (class in sympy.diffgeom)": [[62, "sympy.diffgeom.Point"]], "tensorproduct (class in sympy.diffgeom)": [[62, "sympy.diffgeom.TensorProduct"]], "wedgeproduct (class in sympy.diffgeom)": [[62, "sympy.diffgeom.WedgeProduct"]], "base_oneform() (sympy.diffgeom.coordsystem method)": [[62, "sympy.diffgeom.CoordSystem.base_oneform"]], "base_oneforms() (sympy.diffgeom.coordsystem method)": [[62, "sympy.diffgeom.CoordSystem.base_oneforms"]], "base_scalar() (sympy.diffgeom.coordsystem method)": [[62, "sympy.diffgeom.CoordSystem.base_scalar"]], "base_scalars() (sympy.diffgeom.coordsystem method)": [[62, "sympy.diffgeom.CoordSystem.base_scalars"]], "base_vector() (sympy.diffgeom.coordsystem method)": [[62, "sympy.diffgeom.CoordSystem.base_vector"]], "base_vectors() (sympy.diffgeom.coordsystem method)": [[62, "sympy.diffgeom.CoordSystem.base_vectors"]], "coord_function() (sympy.diffgeom.coordsystem method)": [[62, "sympy.diffgeom.CoordSystem.coord_function"]], "coord_functions() (sympy.diffgeom.coordsystem method)": [[62, "sympy.diffgeom.CoordSystem.coord_functions"]], "coord_tuple_transform_to() (sympy.diffgeom.coordsystem method)": [[62, "sympy.diffgeom.CoordSystem.coord_tuple_transform_to"]], "coords() (sympy.diffgeom.point method)": [[62, "sympy.diffgeom.Point.coords"]], "intcurve_diffequ() (in module sympy.diffgeom)": [[62, "sympy.diffgeom.intcurve_diffequ"]], "intcurve_series() (in module sympy.diffgeom)": [[62, "sympy.diffgeom.intcurve_series"]], "jacobian() (sympy.diffgeom.coordsystem method)": [[62, "sympy.diffgeom.CoordSystem.jacobian"]], "jacobian_determinant() (sympy.diffgeom.coordsystem method)": [[62, "sympy.diffgeom.CoordSystem.jacobian_determinant"]], "jacobian_matrix() (sympy.diffgeom.coordsystem method)": [[62, "sympy.diffgeom.CoordSystem.jacobian_matrix"]], "metric_to_christoffel_1st() (in module sympy.diffgeom)": [[62, "sympy.diffgeom.metric_to_Christoffel_1st"]], "metric_to_christoffel_2nd() (in module sympy.diffgeom)": [[62, "sympy.diffgeom.metric_to_Christoffel_2nd"]], "metric_to_ricci_components() (in module sympy.diffgeom)": [[62, "sympy.diffgeom.metric_to_Ricci_components"]], "metric_to_riemann_components() (in module sympy.diffgeom)": [[62, "sympy.diffgeom.metric_to_Riemann_components"]], "point() (sympy.diffgeom.coordsystem method)": [[62, "sympy.diffgeom.CoordSystem.point"]], "point_to_coords() (sympy.diffgeom.coordsystem method)": [[62, "sympy.diffgeom.CoordSystem.point_to_coords"]], "sympy.diffgeom": [[62, "module-sympy.diffgeom"]], "transform() (sympy.diffgeom.coordsystem method)": [[62, "sympy.diffgeom.CoordSystem.transform"]], "transformation() (sympy.diffgeom.coordsystem method)": [[62, "sympy.diffgeom.CoordSystem.transformation"]], "twoform_to_matrix() (in module sympy.diffgeom)": [[62, "sympy.diffgeom.twoform_to_matrix"]], "vectors_in_basis() (in module sympy.diffgeom)": [[62, "sympy.diffgeom.vectors_in_basis"]], "convolution() (in module sympy.discrete.convolutions)": [[63, "sympy.discrete.convolutions.convolution"]], "convolution_fft() (in module sympy.discrete.convolutions)": [[63, "sympy.discrete.convolutions.convolution_fft"]], "convolution_fwht() (in module sympy.discrete.convolutions)": [[63, "sympy.discrete.convolutions.convolution_fwht"]], "convolution_ntt() (in module sympy.discrete.convolutions)": [[63, "sympy.discrete.convolutions.convolution_ntt"]], "convolution_subset() (in module sympy.discrete.convolutions)": [[63, "sympy.discrete.convolutions.convolution_subset"]], "covering_product() (in module sympy.discrete.convolutions)": [[63, "sympy.discrete.convolutions.covering_product"]], "fft() (in module sympy.discrete.transforms)": [[63, "sympy.discrete.transforms.fft"]], "fwht() (in module sympy.discrete.transforms)": [[63, "sympy.discrete.transforms.fwht"]], "ifft() (in module sympy.discrete.transforms)": [[63, "sympy.discrete.transforms.ifft"]], "ifwht() (in module sympy.discrete.transforms)": [[63, "sympy.discrete.transforms.ifwht"]], "intersecting_product() (in module sympy.discrete.convolutions)": [[63, "sympy.discrete.convolutions.intersecting_product"]], "intt() (in module sympy.discrete.transforms)": [[63, "sympy.discrete.transforms.intt"]], "inverse_mobius_transform() (in module sympy.discrete.transforms)": [[63, "sympy.discrete.transforms.inverse_mobius_transform"]], "mobius_transform() (in module sympy.discrete.transforms)": [[63, "sympy.discrete.transforms.mobius_transform"]], "ntt() (in module sympy.discrete.transforms)": [[63, "sympy.discrete.transforms.ntt"]], "sympy.discrete": [[63, "module-sympy.discrete"]], "sympy.discrete.convolutions": [[63, "module-sympy.discrete.convolutions"]], "sympy.discrete.transforms": [[63, "module-sympy.discrete.transforms"]], "fallingfactorial (class in sympy.functions.combinatorial.factorials)": [[65, "sympy.functions.combinatorial.factorials.FallingFactorial"]], "multifactorial (class in sympy.functions.combinatorial.factorials)": [[65, "sympy.functions.combinatorial.factorials.MultiFactorial"]], "risingfactorial (class in sympy.functions.combinatorial.factorials)": [[65, "sympy.functions.combinatorial.factorials.RisingFactorial"]], "andre (class in sympy.functions.combinatorial.numbers)": [[65, "sympy.functions.combinatorial.numbers.andre"]], "bell (class in sympy.functions.combinatorial.numbers)": [[65, "sympy.functions.combinatorial.numbers.bell"]], "bernoulli (class in sympy.functions.combinatorial.numbers)": [[65, "sympy.functions.combinatorial.numbers.bernoulli"]], "binomial (class in sympy.functions.combinatorial.factorials)": [[65, "sympy.functions.combinatorial.factorials.binomial"]], "catalan (class in sympy.functions.combinatorial.numbers)": [[65, "sympy.functions.combinatorial.numbers.catalan"]], "euler (class in sympy.functions.combinatorial.numbers)": [[65, "sympy.functions.combinatorial.numbers.euler"]], "factorial (class in sympy.functions.combinatorial.factorials)": [[65, "sympy.functions.combinatorial.factorials.factorial"]], "factorial2 (class in sympy.functions.combinatorial.factorials)": [[65, "sympy.functions.combinatorial.factorials.factorial2"]], "fibonacci (class in sympy.functions.combinatorial.numbers)": [[65, "sympy.functions.combinatorial.numbers.fibonacci"]], "genocchi (class in sympy.functions.combinatorial.numbers)": [[65, "sympy.functions.combinatorial.numbers.genocchi"]], "harmonic (class in sympy.functions.combinatorial.numbers)": [[65, "sympy.functions.combinatorial.numbers.harmonic"]], "lucas (class in sympy.functions.combinatorial.numbers)": [[65, "sympy.functions.combinatorial.numbers.lucas"]], "nc() (in module sympy.functions.combinatorial.numbers)": [[65, "sympy.functions.combinatorial.numbers.nC"]], "np() (in module sympy.functions.combinatorial.numbers)": [[65, "sympy.functions.combinatorial.numbers.nP"]], "nt() (in module sympy.functions.combinatorial.numbers)": [[65, "sympy.functions.combinatorial.numbers.nT"]], "partition (class in sympy.functions.combinatorial.numbers)": [[65, "sympy.functions.combinatorial.numbers.partition"]], "stirling() (in module sympy.functions.combinatorial.numbers)": [[65, "sympy.functions.combinatorial.numbers.stirling"]], "subfactorial (class in sympy.functions.combinatorial.factorials)": [[65, "sympy.functions.combinatorial.factorials.subfactorial"]], "tribonacci (class in sympy.functions.combinatorial.numbers)": [[65, "sympy.functions.combinatorial.numbers.tribonacci"]], "abs (class in sympy.functions.elementary.complexes)": [[66, "sympy.functions.elementary.complexes.Abs"]], "exprcondpair (class in sympy.functions.elementary.piecewise)": [[66, "sympy.functions.elementary.piecewise.ExprCondPair"]], "hyperbolicfunction (class in sympy.functions.elementary.hyperbolic)": [[66, "sympy.functions.elementary.hyperbolic.HyperbolicFunction"]], "identityfunction (class in sympy.functions.elementary.miscellaneous)": [[66, "sympy.functions.elementary.miscellaneous.IdentityFunction"]], "lambertw (class in sympy.functions.elementary.exponential)": [[66, "sympy.functions.elementary.exponential.LambertW"]], "max (class in sympy.functions.elementary.miscellaneous)": [[66, "sympy.functions.elementary.miscellaneous.Max"]], "min (class in sympy.functions.elementary.miscellaneous)": [[66, "sympy.functions.elementary.miscellaneous.Min"]], "piecewise (class in sympy.functions.elementary.piecewise)": [[66, "sympy.functions.elementary.piecewise.Piecewise"]], "roundfunction (class in sympy.functions.elementary.integers)": [[66, "sympy.functions.elementary.integers.RoundFunction"]], "_eval_integral() (sympy.functions.elementary.piecewise.piecewise method)": [[66, "sympy.functions.elementary.piecewise.Piecewise._eval_integral"]], "acos (class in sympy.functions.elementary.trigonometric)": [[66, "sympy.functions.elementary.trigonometric.acos"]], "acosh (class in sympy.functions.elementary.hyperbolic)": [[66, "sympy.functions.elementary.hyperbolic.acosh"]], "acot (class in sympy.functions.elementary.trigonometric)": [[66, "sympy.functions.elementary.trigonometric.acot"]], "acoth (class in sympy.functions.elementary.hyperbolic)": [[66, "sympy.functions.elementary.hyperbolic.acoth"]], "acsc (class in sympy.functions.elementary.trigonometric)": [[66, "sympy.functions.elementary.trigonometric.acsc"]], "acsch (class in sympy.functions.elementary.hyperbolic)": [[66, "sympy.functions.elementary.hyperbolic.acsch"]], "arg (class in sympy.functions.elementary.complexes)": [[66, "sympy.functions.elementary.complexes.arg"]], "as_base_exp() (sympy.functions.elementary.exponential.log method)": [[66, "sympy.functions.elementary.exponential.log.as_base_exp"]], "as_expr_set_pairs() (sympy.functions.elementary.piecewise.piecewise method)": [[66, "sympy.functions.elementary.piecewise.Piecewise.as_expr_set_pairs"]], "as_real_imag() (sympy.functions.elementary.complexes.im method)": [[66, "sympy.functions.elementary.complexes.im.as_real_imag"]], "as_real_imag() (sympy.functions.elementary.complexes.re method)": [[66, "sympy.functions.elementary.complexes.re.as_real_imag"]], "as_real_imag() (sympy.functions.elementary.exponential.exp method)": [[66, "sympy.functions.elementary.exponential.exp.as_real_imag"]], "as_real_imag() (sympy.functions.elementary.exponential.log method)": [[66, "sympy.functions.elementary.exponential.log.as_real_imag"]], "as_real_imag() (sympy.functions.elementary.hyperbolic.sinh method)": [[66, "sympy.functions.elementary.hyperbolic.sinh.as_real_imag"]], "asec (class in sympy.functions.elementary.trigonometric)": [[66, "sympy.functions.elementary.trigonometric.asec"]], "asech (class in sympy.functions.elementary.hyperbolic)": [[66, "sympy.functions.elementary.hyperbolic.asech"]], "asin (class in sympy.functions.elementary.trigonometric)": [[66, "sympy.functions.elementary.trigonometric.asin"]], "asinh (class in sympy.functions.elementary.hyperbolic)": [[66, "sympy.functions.elementary.hyperbolic.asinh"]], "atan (class in sympy.functions.elementary.trigonometric)": [[66, "sympy.functions.elementary.trigonometric.atan"]], "atan2 (class in sympy.functions.elementary.trigonometric)": [[66, "sympy.functions.elementary.trigonometric.atan2"]], "atanh (class in sympy.functions.elementary.hyperbolic)": [[66, "sympy.functions.elementary.hyperbolic.atanh"]], "base (sympy.functions.elementary.exponential.exp property)": [[66, "sympy.functions.elementary.exponential.exp.base"]], "cbrt() (in module sympy.functions.elementary.miscellaneous)": [[66, "sympy.functions.elementary.miscellaneous.cbrt"]], "ceiling (class in sympy.functions.elementary.integers)": [[66, "sympy.functions.elementary.integers.ceiling"]], "cond (sympy.functions.elementary.piecewise.exprcondpair property)": [[66, "sympy.functions.elementary.piecewise.ExprCondPair.cond"]], "conjugate (class in sympy.functions.elementary.complexes)": [[66, "sympy.functions.elementary.complexes.conjugate"]], "cos (class in sympy.functions.elementary.trigonometric)": [[66, "sympy.functions.elementary.trigonometric.cos"]], "cosh (class in sympy.functions.elementary.hyperbolic)": [[66, "sympy.functions.elementary.hyperbolic.cosh"]], "cot (class in sympy.functions.elementary.trigonometric)": [[66, "sympy.functions.elementary.trigonometric.cot"]], "coth (class in sympy.functions.elementary.hyperbolic)": [[66, "sympy.functions.elementary.hyperbolic.coth"]], "csc (class in sympy.functions.elementary.trigonometric)": [[66, "sympy.functions.elementary.trigonometric.csc"]], "csch (class in sympy.functions.elementary.hyperbolic)": [[66, "sympy.functions.elementary.hyperbolic.csch"]], "doit() (sympy.functions.elementary.piecewise.piecewise method)": [[66, "sympy.functions.elementary.piecewise.Piecewise.doit"]], "eval() (sympy.functions.elementary.piecewise.piecewise class method)": [[66, "sympy.functions.elementary.piecewise.Piecewise.eval"]], "exp (class in sympy.functions.elementary.exponential)": [[66, "sympy.functions.elementary.exponential.exp"]], "exp_polar (class in sympy.functions.elementary.exponential)": [[66, "sympy.functions.elementary.exponential.exp_polar"]], "expr (sympy.functions.elementary.piecewise.exprcondpair property)": [[66, "sympy.functions.elementary.piecewise.ExprCondPair.expr"]], "fdiff() (sympy.functions.elementary.complexes.abs method)": [[66, "sympy.functions.elementary.complexes.Abs.fdiff"]], "fdiff() (sympy.functions.elementary.exponential.lambertw method)": [[66, "sympy.functions.elementary.exponential.LambertW.fdiff"]], "fdiff() (sympy.functions.elementary.exponential.exp method)": [[66, "sympy.functions.elementary.exponential.exp.fdiff"]], "fdiff() (sympy.functions.elementary.exponential.log method)": [[66, "sympy.functions.elementary.exponential.log.fdiff"]], "fdiff() (sympy.functions.elementary.hyperbolic.csch method)": [[66, "sympy.functions.elementary.hyperbolic.csch.fdiff"]], "fdiff() (sympy.functions.elementary.hyperbolic.sinh method)": [[66, "sympy.functions.elementary.hyperbolic.sinh.fdiff"]], "floor (class in sympy.functions.elementary.integers)": [[66, "sympy.functions.elementary.integers.floor"]], "frac (class in sympy.functions.elementary.integers)": [[66, "sympy.functions.elementary.integers.frac"]], "im (class in sympy.functions.elementary.complexes)": [[66, "sympy.functions.elementary.complexes.im"]], "inverse() (sympy.functions.elementary.exponential.log method)": [[66, "sympy.functions.elementary.exponential.log.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.acosh method)": [[66, "sympy.functions.elementary.hyperbolic.acosh.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.acoth method)": [[66, "sympy.functions.elementary.hyperbolic.acoth.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.acsch method)": [[66, "sympy.functions.elementary.hyperbolic.acsch.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.asech method)": [[66, "sympy.functions.elementary.hyperbolic.asech.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.asinh method)": [[66, "sympy.functions.elementary.hyperbolic.asinh.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.atanh method)": [[66, "sympy.functions.elementary.hyperbolic.atanh.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.coth method)": [[66, "sympy.functions.elementary.hyperbolic.coth.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.sinh method)": [[66, "sympy.functions.elementary.hyperbolic.sinh.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.tanh method)": [[66, "sympy.functions.elementary.hyperbolic.tanh.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.acos method)": [[66, "sympy.functions.elementary.trigonometric.acos.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.acot method)": [[66, "sympy.functions.elementary.trigonometric.acot.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.acsc method)": [[66, "sympy.functions.elementary.trigonometric.acsc.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.asec method)": [[66, "sympy.functions.elementary.trigonometric.asec.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.asin method)": [[66, "sympy.functions.elementary.trigonometric.asin.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.atan method)": [[66, "sympy.functions.elementary.trigonometric.atan.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.cot method)": [[66, "sympy.functions.elementary.trigonometric.cot.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.tan method)": [[66, "sympy.functions.elementary.trigonometric.tan.inverse"]], "log (class in sympy.functions.elementary.exponential)": [[66, "sympy.functions.elementary.exponential.log"]], "periodic_argument (class in sympy.functions.elementary.complexes)": [[66, "sympy.functions.elementary.complexes.periodic_argument"]], "piecewise_exclusive() (in module sympy.functions.elementary.piecewise)": [[66, "sympy.functions.elementary.piecewise.piecewise_exclusive"]], "piecewise_fold() (in module sympy.functions.elementary.piecewise)": [[66, "sympy.functions.elementary.piecewise.piecewise_fold"]], "piecewise_integrate() (sympy.functions.elementary.piecewise.piecewise method)": [[66, "sympy.functions.elementary.piecewise.Piecewise.piecewise_integrate"]], "polar_lift (class in sympy.functions.elementary.complexes)": [[66, "sympy.functions.elementary.complexes.polar_lift"]], "principal_branch (class in sympy.functions.elementary.complexes)": [[66, "sympy.functions.elementary.complexes.principal_branch"]], "re (class in sympy.functions.elementary.complexes)": [[66, "sympy.functions.elementary.complexes.re"]], "real_root() (in module sympy.functions.elementary.miscellaneous)": [[66, "sympy.functions.elementary.miscellaneous.real_root"]], "root() (in module sympy.functions.elementary.miscellaneous)": [[66, "sympy.functions.elementary.miscellaneous.root"]], "sec (class in sympy.functions.elementary.trigonometric)": [[66, "sympy.functions.elementary.trigonometric.sec"]], "sech (class in sympy.functions.elementary.hyperbolic)": [[66, "sympy.functions.elementary.hyperbolic.sech"]], "sign (class in sympy.functions.elementary.complexes)": [[66, "sympy.functions.elementary.complexes.sign"]], "sin (class in sympy.functions.elementary.trigonometric)": [[66, "sympy.functions.elementary.trigonometric.sin"]], "sinc (class in sympy.functions.elementary.trigonometric)": [[66, "sympy.functions.elementary.trigonometric.sinc"]], "sinh (class in sympy.functions.elementary.hyperbolic)": [[66, "sympy.functions.elementary.hyperbolic.sinh"]], "sqrt() (in module sympy.functions.elementary.miscellaneous)": [[66, "sympy.functions.elementary.miscellaneous.sqrt"]], "tan (class in sympy.functions.elementary.trigonometric)": [[66, "sympy.functions.elementary.trigonometric.tan"]], "tanh (class in sympy.functions.elementary.hyperbolic)": [[66, "sympy.functions.elementary.hyperbolic.tanh"]], "taylor_term() (sympy.functions.elementary.exponential.exp static method)": [[66, "sympy.functions.elementary.exponential.exp.taylor_term"]], "taylor_term() (sympy.functions.elementary.exponential.log static method)": [[66, "sympy.functions.elementary.exponential.log.taylor_term"]], "taylor_term() (sympy.functions.elementary.hyperbolic.csch static method)": [[66, "sympy.functions.elementary.hyperbolic.csch.taylor_term"]], "taylor_term() (sympy.functions.elementary.hyperbolic.sinh static method)": [[66, "sympy.functions.elementary.hyperbolic.sinh.taylor_term"]], "sympy.functions": [[67, "module-sympy.functions"]], "airybase (class in sympy.functions.special.bessel)": [[68, "sympy.functions.special.bessel.AiryBase"]], "besselbase (class in sympy.functions.special.bessel)": [[68, "sympy.functions.special.bessel.BesselBase"]], "chi (class in sympy.functions.special.error_functions)": [[68, "sympy.functions.special.error_functions.Chi"]], "ci (class in sympy.functions.special.error_functions)": [[68, "sympy.functions.special.error_functions.Ci"]], "diracdelta (class in sympy.functions.special.delta_functions)": [[68, "sympy.functions.special.delta_functions.DiracDelta"]], "e1() (in module sympy.functions.special.error_functions)": [[68, "sympy.functions.special.error_functions.E1"]], "ei (class in sympy.functions.special.error_functions)": [[68, "sympy.functions.special.error_functions.Ei"]], "eijk() (in module sympy.functions.special.tensor_functions)": [[68, "sympy.functions.special.tensor_functions.Eijk"]], "fresnelintegral (class in sympy.functions.special.error_functions)": [[68, "sympy.functions.special.error_functions.FresnelIntegral"]], "heaviside (class in sympy.functions.special.delta_functions)": [[68, "sympy.functions.special.delta_functions.Heaviside"]], "kroneckerdelta (class in sympy.functions.special.tensor_functions)": [[68, "sympy.functions.special.tensor_functions.KroneckerDelta"]], "levicivita (class in sympy.functions.special.tensor_functions)": [[68, "sympy.functions.special.tensor_functions.LeviCivita"]], "li (class in sympy.functions.special.error_functions)": [[68, "sympy.functions.special.error_functions.Li"], [68, "sympy.functions.special.error_functions.li"]], "mathieubase (class in sympy.functions.special.mathieu_functions)": [[68, "sympy.functions.special.mathieu_functions.MathieuBase"]], "shi (class in sympy.functions.special.error_functions)": [[68, "sympy.functions.special.error_functions.Shi"]], "si (class in sympy.functions.special.error_functions)": [[68, "sympy.functions.special.error_functions.Si"]], "singularityfunction (class in sympy.functions.special.singularity_functions)": [[68, "sympy.functions.special.singularity_functions.SingularityFunction"]], "ynm (class in sympy.functions.special.spherical_harmonics)": [[68, "sympy.functions.special.spherical_harmonics.Ynm"]], "ynm_c() (in module sympy.functions.special.spherical_harmonics)": [[68, "sympy.functions.special.spherical_harmonics.Ynm_c"]], "znm (class in sympy.functions.special.spherical_harmonics)": [[68, "sympy.functions.special.spherical_harmonics.Znm"]], "airyai (class in sympy.functions.special.bessel)": [[68, "sympy.functions.special.bessel.airyai"]], "airyaiprime (class in sympy.functions.special.bessel)": [[68, "sympy.functions.special.bessel.airyaiprime"]], "airybi (class in sympy.functions.special.bessel)": [[68, "sympy.functions.special.bessel.airybi"]], "airybiprime (class in sympy.functions.special.bessel)": [[68, "sympy.functions.special.bessel.airybiprime"]], "an (sympy.functions.special.hyper.meijerg property)": [[68, "sympy.functions.special.hyper.meijerg.an"]], "aother (sympy.functions.special.hyper.meijerg property)": [[68, "sympy.functions.special.hyper.meijerg.aother"]], "ap (sympy.functions.special.hyper.hyper property)": [[68, "sympy.functions.special.hyper.hyper.ap"]], "ap (sympy.functions.special.hyper.meijerg property)": [[68, "sympy.functions.special.hyper.meijerg.ap"]], "appellf1 (class in sympy.functions.special.hyper)": [[68, "sympy.functions.special.hyper.appellf1"]], "argument (sympy.functions.special.bessel.besselbase property)": [[68, "sympy.functions.special.bessel.BesselBase.argument"]], "argument (sympy.functions.special.hyper.hyper property)": [[68, "sympy.functions.special.hyper.hyper.argument"]], "argument (sympy.functions.special.hyper.meijerg property)": [[68, "sympy.functions.special.hyper.meijerg.argument"]], "assoc_laguerre (class in sympy.functions.special.polynomials)": [[68, "sympy.functions.special.polynomials.assoc_laguerre"]], "assoc_legendre (class in sympy.functions.special.polynomials)": [[68, "sympy.functions.special.polynomials.assoc_legendre"]], "besseli (class in sympy.functions.special.bessel)": [[68, "sympy.functions.special.bessel.besseli"]], "besselj (class in sympy.functions.special.bessel)": [[68, "sympy.functions.special.bessel.besselj"]], "besselk (class in sympy.functions.special.bessel)": [[68, "sympy.functions.special.bessel.besselk"]], "bessely (class in sympy.functions.special.bessel)": [[68, "sympy.functions.special.bessel.bessely"]], "beta (class in sympy.functions.special.beta_functions)": [[68, "sympy.functions.special.beta_functions.beta"]], "bm (sympy.functions.special.hyper.meijerg property)": [[68, "sympy.functions.special.hyper.meijerg.bm"]], "bother (sympy.functions.special.hyper.meijerg property)": [[68, "sympy.functions.special.hyper.meijerg.bother"]], "bq (sympy.functions.special.hyper.hyper property)": [[68, "sympy.functions.special.hyper.hyper.bq"]], "bq (sympy.functions.special.hyper.meijerg property)": [[68, "sympy.functions.special.hyper.meijerg.bq"]], "bspline_basis() (in module sympy.functions.special.bsplines)": [[68, "sympy.functions.special.bsplines.bspline_basis"]], "bspline_basis_set() (in module sympy.functions.special.bsplines)": [[68, "sympy.functions.special.bsplines.bspline_basis_set"]], "chebyshevt (class in sympy.functions.special.polynomials)": [[68, "sympy.functions.special.polynomials.chebyshevt"]], "chebyshevt_root (class in sympy.functions.special.polynomials)": [[68, "sympy.functions.special.polynomials.chebyshevt_root"]], "chebyshevu (class in sympy.functions.special.polynomials)": [[68, "sympy.functions.special.polynomials.chebyshevu"]], "chebyshevu_root (class in sympy.functions.special.polynomials)": [[68, "sympy.functions.special.polynomials.chebyshevu_root"]], "convergence_statement (sympy.functions.special.hyper.hyper property)": [[68, "sympy.functions.special.hyper.hyper.convergence_statement"]], "delta (sympy.functions.special.hyper.meijerg property)": [[68, "sympy.functions.special.hyper.meijerg.delta"]], "digamma (class in sympy.functions.special.gamma_functions)": [[68, "sympy.functions.special.gamma_functions.digamma"]], "dirichlet_eta (class in sympy.functions.special.zeta_functions)": [[68, "sympy.functions.special.zeta_functions.dirichlet_eta"]], "elliptic_e (class in sympy.functions.special.elliptic_integrals)": [[68, "sympy.functions.special.elliptic_integrals.elliptic_e"]], "elliptic_f (class in sympy.functions.special.elliptic_integrals)": [[68, "sympy.functions.special.elliptic_integrals.elliptic_f"]], "elliptic_k (class in sympy.functions.special.elliptic_integrals)": [[68, "sympy.functions.special.elliptic_integrals.elliptic_k"]], "elliptic_pi (class in sympy.functions.special.elliptic_integrals)": [[68, "sympy.functions.special.elliptic_integrals.elliptic_pi"]], "erf (class in sympy.functions.special.error_functions)": [[68, "sympy.functions.special.error_functions.erf"]], "erf2 (class in sympy.functions.special.error_functions)": [[68, "sympy.functions.special.error_functions.erf2"]], "erf2inv (class in sympy.functions.special.error_functions)": [[68, "sympy.functions.special.error_functions.erf2inv"]], "erfc (class in sympy.functions.special.error_functions)": [[68, "sympy.functions.special.error_functions.erfc"]], "erfcinv (class in sympy.functions.special.error_functions)": [[68, "sympy.functions.special.error_functions.erfcinv"]], "erfi (class in sympy.functions.special.error_functions)": [[68, "sympy.functions.special.error_functions.erfi"]], "erfinv (class in sympy.functions.special.error_functions)": [[68, "sympy.functions.special.error_functions.erfinv"]], "eta (sympy.functions.special.hyper.hyper property)": [[68, "sympy.functions.special.hyper.hyper.eta"]], "eval() (sympy.functions.special.delta_functions.diracdelta class method)": [[68, "sympy.functions.special.delta_functions.DiracDelta.eval"]], "eval() (sympy.functions.special.delta_functions.heaviside class method)": [[68, "sympy.functions.special.delta_functions.Heaviside.eval"]], "eval() (sympy.functions.special.singularity_functions.singularityfunction class method)": [[68, "sympy.functions.special.singularity_functions.SingularityFunction.eval"]], "eval() (sympy.functions.special.tensor_functions.kroneckerdelta class method)": [[68, "sympy.functions.special.tensor_functions.KroneckerDelta.eval"]], "eval_levicivita() (in module sympy.functions.special.tensor_functions)": [[68, "sympy.functions.special.tensor_functions.eval_levicivita"]], "expint (class in sympy.functions.special.error_functions)": [[68, "sympy.functions.special.error_functions.expint"]], "fdiff() (sympy.functions.special.delta_functions.diracdelta method)": [[68, "sympy.functions.special.delta_functions.DiracDelta.fdiff"]], "fdiff() (sympy.functions.special.delta_functions.heaviside method)": [[68, "sympy.functions.special.delta_functions.Heaviside.fdiff"]], "fdiff() (sympy.functions.special.singularity_functions.singularityfunction method)": [[68, "sympy.functions.special.singularity_functions.SingularityFunction.fdiff"]], "fresnelc (class in sympy.functions.special.error_functions)": [[68, "sympy.functions.special.error_functions.fresnelc"]], "fresnels (class in sympy.functions.special.error_functions)": [[68, "sympy.functions.special.error_functions.fresnels"]], "gamma (class in sympy.functions.special.gamma_functions)": [[68, "sympy.functions.special.gamma_functions.gamma"]], "gegenbauer (class in sympy.functions.special.polynomials)": [[68, "sympy.functions.special.polynomials.gegenbauer"]], "get_period() (sympy.functions.special.hyper.meijerg method)": [[68, "sympy.functions.special.hyper.meijerg.get_period"]], "hankel1 (class in sympy.functions.special.bessel)": [[68, "sympy.functions.special.bessel.hankel1"]], "hankel2 (class in sympy.functions.special.bessel)": [[68, "sympy.functions.special.bessel.hankel2"]], "hermite (class in sympy.functions.special.polynomials)": [[68, "sympy.functions.special.polynomials.hermite"]], "hermite_prob (class in sympy.functions.special.polynomials)": [[68, "sympy.functions.special.polynomials.hermite_prob"]], "hyper (class in sympy.functions.special.hyper)": [[68, "sympy.functions.special.hyper.hyper"]], "indices_contain_equal_information (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[68, "sympy.functions.special.tensor_functions.KroneckerDelta.indices_contain_equal_information"]], "integrand() (sympy.functions.special.hyper.meijerg method)": [[68, "sympy.functions.special.hyper.meijerg.integrand"]], "interpolating_spline() (in module sympy.functions.special.bsplines)": [[68, "sympy.functions.special.bsplines.interpolating_spline"]], "inverse() (sympy.functions.special.error_functions.erf method)": [[68, "sympy.functions.special.error_functions.erf.inverse"]], "inverse() (sympy.functions.special.error_functions.erfc method)": [[68, "sympy.functions.special.error_functions.erfc.inverse"]], "inverse() (sympy.functions.special.error_functions.erfcinv method)": [[68, "sympy.functions.special.error_functions.erfcinv.inverse"]], "inverse() (sympy.functions.special.error_functions.erfinv method)": [[68, "sympy.functions.special.error_functions.erfinv.inverse"]], "is_above_fermi (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[68, "sympy.functions.special.tensor_functions.KroneckerDelta.is_above_fermi"]], "is_below_fermi (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[68, "sympy.functions.special.tensor_functions.KroneckerDelta.is_below_fermi"]], "is_number (sympy.functions.special.hyper.meijerg property)": [[68, "sympy.functions.special.hyper.meijerg.is_number"]], "is_only_above_fermi (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[68, "sympy.functions.special.tensor_functions.KroneckerDelta.is_only_above_fermi"]], "is_only_below_fermi (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[68, "sympy.functions.special.tensor_functions.KroneckerDelta.is_only_below_fermi"]], "is_simple() (sympy.functions.special.delta_functions.diracdelta method)": [[68, "sympy.functions.special.delta_functions.DiracDelta.is_simple"]], "jacobi (class in sympy.functions.special.polynomials)": [[68, "sympy.functions.special.polynomials.jacobi"]], "jacobi_normalized() (in module sympy.functions.special.polynomials)": [[68, "sympy.functions.special.polynomials.jacobi_normalized"]], "jn (class in sympy.functions.special.bessel)": [[68, "sympy.functions.special.bessel.jn"]], "jn_zeros() (in module sympy.functions.special.bessel)": [[68, "sympy.functions.special.bessel.jn_zeros"]], "killable_index (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[68, "sympy.functions.special.tensor_functions.KroneckerDelta.killable_index"]], "laguerre (class in sympy.functions.special.polynomials)": [[68, "sympy.functions.special.polynomials.laguerre"]], "legendre (class in sympy.functions.special.polynomials)": [[68, "sympy.functions.special.polynomials.legendre"]], "lerchphi (class in sympy.functions.special.zeta_functions)": [[68, "sympy.functions.special.zeta_functions.lerchphi"]], "loggamma (class in sympy.functions.special.gamma_functions)": [[68, "sympy.functions.special.gamma_functions.loggamma"]], "lowergamma (class in sympy.functions.special.gamma_functions)": [[68, "sympy.functions.special.gamma_functions.lowergamma"]], "marcumq (class in sympy.functions.special.bessel)": [[68, "sympy.functions.special.bessel.marcumq"]], "mathieuc (class in sympy.functions.special.mathieu_functions)": [[68, "sympy.functions.special.mathieu_functions.mathieuc"]], "mathieucprime (class in sympy.functions.special.mathieu_functions)": [[68, "sympy.functions.special.mathieu_functions.mathieucprime"]], "mathieus (class in sympy.functions.special.mathieu_functions)": [[68, "sympy.functions.special.mathieu_functions.mathieus"]], "mathieusprime (class in sympy.functions.special.mathieu_functions)": [[68, "sympy.functions.special.mathieu_functions.mathieusprime"]], "meijerg (class in sympy.functions.special.hyper)": [[68, "sympy.functions.special.hyper.meijerg"]], "multigamma (class in sympy.functions.special.gamma_functions)": [[68, "sympy.functions.special.gamma_functions.multigamma"]], "nu (sympy.functions.special.hyper.meijerg property)": [[68, "sympy.functions.special.hyper.meijerg.nu"]], "order (sympy.functions.special.bessel.besselbase property)": [[68, "sympy.functions.special.bessel.BesselBase.order"]], "pargs (sympy.functions.special.delta_functions.heaviside property)": [[68, "sympy.functions.special.delta_functions.Heaviside.pargs"]], "polygamma (class in sympy.functions.special.gamma_functions)": [[68, "sympy.functions.special.gamma_functions.polygamma"]], "polylog (class in sympy.functions.special.zeta_functions)": [[68, "sympy.functions.special.zeta_functions.polylog"]], "preferred_index (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[68, "sympy.functions.special.tensor_functions.KroneckerDelta.preferred_index"]], "radius_of_convergence (sympy.functions.special.hyper.hyper property)": [[68, "sympy.functions.special.hyper.hyper.radius_of_convergence"]], "stieltjes (class in sympy.functions.special.zeta_functions)": [[68, "sympy.functions.special.zeta_functions.stieltjes"]], "sympy.functions.special.bessel": [[68, "module-sympy.functions.special.bessel"]], "sympy.functions.special.beta_functions": [[68, "module-sympy.functions.special.beta_functions"]], "sympy.functions.special.elliptic_integrals": [[68, "module-sympy.functions.special.elliptic_integrals"]], "sympy.functions.special.error_functions": [[68, "module-sympy.functions.special.error_functions"]], "sympy.functions.special.gamma_functions": [[68, "module-sympy.functions.special.gamma_functions"]], "sympy.functions.special.mathieu_functions": [[68, "module-sympy.functions.special.mathieu_functions"]], "sympy.functions.special.polynomials": [[68, "module-sympy.functions.special.polynomials"]], "sympy.functions.special.singularity_functions": [[68, "module-sympy.functions.special.singularity_functions"]], "sympy.functions.special.zeta_functions": [[68, "module-sympy.functions.special.zeta_functions"]], "trigamma (class in sympy.functions.special.gamma_functions)": [[68, "sympy.functions.special.gamma_functions.trigamma"]], "uppergamma (class in sympy.functions.special.gamma_functions)": [[68, "sympy.functions.special.gamma_functions.uppergamma"]], "yn (class in sympy.functions.special.bessel)": [[68, "sympy.functions.special.bessel.yn"]], "zeta (class in sympy.functions.special.zeta_functions)": [[68, "sympy.functions.special.zeta_functions.zeta"]], "curve (class in sympy.geometry.curve)": [[69, "sympy.geometry.curve.Curve"]], "ambient_dimension (sympy.geometry.curve.curve property)": [[69, "sympy.geometry.curve.Curve.ambient_dimension"]], "arbitrary_point() (sympy.geometry.curve.curve method)": [[69, "sympy.geometry.curve.Curve.arbitrary_point"]], "free_symbols (sympy.geometry.curve.curve property)": [[69, "sympy.geometry.curve.Curve.free_symbols"]], "functions (sympy.geometry.curve.curve property)": [[69, "sympy.geometry.curve.Curve.functions"]], "length (sympy.geometry.curve.curve property)": [[69, "sympy.geometry.curve.Curve.length"]], "limits (sympy.geometry.curve.curve property)": [[69, "sympy.geometry.curve.Curve.limits"]], "parameter (sympy.geometry.curve.curve property)": [[69, "sympy.geometry.curve.Curve.parameter"]], "plot_interval() (sympy.geometry.curve.curve method)": [[69, "sympy.geometry.curve.Curve.plot_interval"]], "rotate() (sympy.geometry.curve.curve method)": [[69, "sympy.geometry.curve.Curve.rotate"]], "scale() (sympy.geometry.curve.curve method)": [[69, "sympy.geometry.curve.Curve.scale"]], "sympy.geometry.curve": [[69, "module-sympy.geometry.curve"]], "translate() (sympy.geometry.curve.curve method)": [[69, "sympy.geometry.curve.Curve.translate"]], "circle (class in sympy.geometry.ellipse)": [[70, "sympy.geometry.ellipse.Circle"]], "ellipse (class in sympy.geometry.ellipse)": [[70, "sympy.geometry.ellipse.Ellipse"]], "apoapsis (sympy.geometry.ellipse.ellipse property)": [[70, "sympy.geometry.ellipse.Ellipse.apoapsis"]], "arbitrary_point() (sympy.geometry.ellipse.ellipse method)": [[70, "sympy.geometry.ellipse.Ellipse.arbitrary_point"]], "area (sympy.geometry.ellipse.ellipse property)": [[70, "sympy.geometry.ellipse.Ellipse.area"]], "auxiliary_circle() (sympy.geometry.ellipse.ellipse method)": [[70, "sympy.geometry.ellipse.Ellipse.auxiliary_circle"]], "bounds (sympy.geometry.ellipse.ellipse property)": [[70, "sympy.geometry.ellipse.Ellipse.bounds"]], "center (sympy.geometry.ellipse.ellipse property)": [[70, "sympy.geometry.ellipse.Ellipse.center"]], "circumference (sympy.geometry.ellipse.circle property)": [[70, "sympy.geometry.ellipse.Circle.circumference"]], "circumference (sympy.geometry.ellipse.ellipse property)": [[70, "sympy.geometry.ellipse.Ellipse.circumference"]], "director_circle() (sympy.geometry.ellipse.ellipse method)": [[70, "sympy.geometry.ellipse.Ellipse.director_circle"]], "eccentricity (sympy.geometry.ellipse.ellipse property)": [[70, "sympy.geometry.ellipse.Ellipse.eccentricity"]], "encloses_point() (sympy.geometry.ellipse.ellipse method)": [[70, "sympy.geometry.ellipse.Ellipse.encloses_point"]], "equation() (sympy.geometry.ellipse.circle method)": [[70, "sympy.geometry.ellipse.Circle.equation"]], "equation() (sympy.geometry.ellipse.ellipse method)": [[70, "sympy.geometry.ellipse.Ellipse.equation"]], "evolute() (sympy.geometry.ellipse.ellipse method)": [[70, "sympy.geometry.ellipse.Ellipse.evolute"]], "foci (sympy.geometry.ellipse.ellipse property)": [[70, "sympy.geometry.ellipse.Ellipse.foci"]], "focus_distance (sympy.geometry.ellipse.ellipse property)": [[70, "sympy.geometry.ellipse.Ellipse.focus_distance"]], "hradius (sympy.geometry.ellipse.ellipse property)": [[70, "sympy.geometry.ellipse.Ellipse.hradius"]], "intersection() (sympy.geometry.ellipse.circle method)": [[70, "sympy.geometry.ellipse.Circle.intersection"]], "intersection() (sympy.geometry.ellipse.ellipse method)": [[70, "sympy.geometry.ellipse.Ellipse.intersection"]], "is_tangent() (sympy.geometry.ellipse.ellipse method)": [[70, "sympy.geometry.ellipse.Ellipse.is_tangent"]], "major (sympy.geometry.ellipse.ellipse property)": [[70, "sympy.geometry.ellipse.Ellipse.major"]], "minor (sympy.geometry.ellipse.ellipse property)": [[70, "sympy.geometry.ellipse.Ellipse.minor"]], "normal_lines() (sympy.geometry.ellipse.ellipse method)": [[70, "sympy.geometry.ellipse.Ellipse.normal_lines"]], "periapsis (sympy.geometry.ellipse.ellipse property)": [[70, "sympy.geometry.ellipse.Ellipse.periapsis"]], "plot_interval() (sympy.geometry.ellipse.ellipse method)": [[70, "sympy.geometry.ellipse.Ellipse.plot_interval"]], "polar_second_moment_of_area() (sympy.geometry.ellipse.ellipse method)": [[70, "sympy.geometry.ellipse.Ellipse.polar_second_moment_of_area"]], "radius (sympy.geometry.ellipse.circle property)": [[70, "sympy.geometry.ellipse.Circle.radius"]], "random_point() (sympy.geometry.ellipse.ellipse method)": [[70, "sympy.geometry.ellipse.Ellipse.random_point"]], "reflect() (sympy.geometry.ellipse.circle method)": [[70, "sympy.geometry.ellipse.Circle.reflect"]], "reflect() (sympy.geometry.ellipse.ellipse method)": [[70, "sympy.geometry.ellipse.Ellipse.reflect"]], "rotate() (sympy.geometry.ellipse.ellipse method)": [[70, "sympy.geometry.ellipse.Ellipse.rotate"]], "scale() (sympy.geometry.ellipse.circle method)": [[70, "sympy.geometry.ellipse.Circle.scale"]], "scale() (sympy.geometry.ellipse.ellipse method)": [[70, "sympy.geometry.ellipse.Ellipse.scale"]], "second_moment_of_area() (sympy.geometry.ellipse.ellipse method)": [[70, "sympy.geometry.ellipse.Ellipse.second_moment_of_area"]], "section_modulus() (sympy.geometry.ellipse.ellipse method)": [[70, "sympy.geometry.ellipse.Ellipse.section_modulus"]], "semilatus_rectum (sympy.geometry.ellipse.ellipse property)": [[70, "sympy.geometry.ellipse.Ellipse.semilatus_rectum"]], "sympy.geometry.ellipse": [[70, "module-sympy.geometry.ellipse"]], "tangent_lines() (sympy.geometry.ellipse.ellipse method)": [[70, "sympy.geometry.ellipse.Ellipse.tangent_lines"]], "vradius (sympy.geometry.ellipse.circle property)": [[70, "sympy.geometry.ellipse.Circle.vradius"]], "vradius (sympy.geometry.ellipse.ellipse property)": [[70, "sympy.geometry.ellipse.Ellipse.vradius"]], "geometryentity (class in sympy.geometry.entity)": [[71, "sympy.geometry.entity.GeometryEntity"]], "ambient_dimension (sympy.geometry.entity.geometryentity property)": [[71, "sympy.geometry.entity.GeometryEntity.ambient_dimension"]], "bounds (sympy.geometry.entity.geometryentity property)": [[71, "sympy.geometry.entity.GeometryEntity.bounds"]], "encloses() (sympy.geometry.entity.geometryentity method)": [[71, "sympy.geometry.entity.GeometryEntity.encloses"]], "intersection() (sympy.geometry.entity.geometryentity method)": [[71, "sympy.geometry.entity.GeometryEntity.intersection"]], "is_similar() (sympy.geometry.entity.geometryentity method)": [[71, "sympy.geometry.entity.GeometryEntity.is_similar"]], "parameter_value() (sympy.geometry.entity.geometryentity method)": [[71, "sympy.geometry.entity.GeometryEntity.parameter_value"]], "reflect() (sympy.geometry.entity.geometryentity method)": [[71, "sympy.geometry.entity.GeometryEntity.reflect"]], "rotate() (sympy.geometry.entity.geometryentity method)": [[71, "sympy.geometry.entity.GeometryEntity.rotate"]], "scale() (sympy.geometry.entity.geometryentity method)": [[71, "sympy.geometry.entity.GeometryEntity.scale"]], "sympy.geometry.entity": [[71, "module-sympy.geometry.entity"]], "translate() (sympy.geometry.entity.geometryentity method)": [[71, "sympy.geometry.entity.GeometryEntity.translate"]], "line (class in sympy.geometry.line)": [[73, "sympy.geometry.line.Line"]], "line2d (class in sympy.geometry.line)": [[73, "sympy.geometry.line.Line2D"]], "line3d (class in sympy.geometry.line)": [[73, "sympy.geometry.line.Line3D"]], "linearentity (class in sympy.geometry.line)": [[73, "sympy.geometry.line.LinearEntity"]], "linearentity2d (class in sympy.geometry.line)": [[73, "sympy.geometry.line.LinearEntity2D"]], "linearentity3d (class in sympy.geometry.line)": [[73, "sympy.geometry.line.LinearEntity3D"]], "ray (class in sympy.geometry.line)": [[73, "sympy.geometry.line.Ray"]], "ray2d (class in sympy.geometry.line)": [[73, "sympy.geometry.line.Ray2D"]], "ray3d (class in sympy.geometry.line)": [[73, "sympy.geometry.line.Ray3D"]], "segment (class in sympy.geometry.line)": [[73, "sympy.geometry.line.Segment"]], "segment2d (class in sympy.geometry.line)": [[73, "sympy.geometry.line.Segment2D"]], "segment3d (class in sympy.geometry.line)": [[73, "sympy.geometry.line.Segment3D"]], "ambient_dimension (sympy.geometry.line.linearentity property)": [[73, "sympy.geometry.line.LinearEntity.ambient_dimension"]], "angle_between() (sympy.geometry.line.linearentity method)": [[73, "sympy.geometry.line.LinearEntity.angle_between"]], "arbitrary_point() (sympy.geometry.line.linearentity method)": [[73, "sympy.geometry.line.LinearEntity.arbitrary_point"]], "are_concurrent() (sympy.geometry.line.linearentity static method)": [[73, "sympy.geometry.line.LinearEntity.are_concurrent"]], "bisectors() (sympy.geometry.line.linearentity method)": [[73, "sympy.geometry.line.LinearEntity.bisectors"]], "bounds (sympy.geometry.line.linearentity2d property)": [[73, "sympy.geometry.line.LinearEntity2D.bounds"]], "closing_angle() (sympy.geometry.line.ray2d method)": [[73, "sympy.geometry.line.Ray2D.closing_angle"]], "coefficients (sympy.geometry.line.line2d property)": [[73, "sympy.geometry.line.Line2D.coefficients"]], "contains() (sympy.geometry.line.line method)": [[73, "sympy.geometry.line.Line.contains"]], "contains() (sympy.geometry.line.linearentity method)": [[73, "sympy.geometry.line.LinearEntity.contains"]], "contains() (sympy.geometry.line.ray method)": [[73, "sympy.geometry.line.Ray.contains"]], "contains() (sympy.geometry.line.segment method)": [[73, "sympy.geometry.line.Segment.contains"]], "direction (sympy.geometry.line.linearentity property)": [[73, "sympy.geometry.line.LinearEntity.direction"]], "direction_cosine (sympy.geometry.line.linearentity3d property)": [[73, "sympy.geometry.line.LinearEntity3D.direction_cosine"]], "direction_ratio (sympy.geometry.line.linearentity3d property)": [[73, "sympy.geometry.line.LinearEntity3D.direction_ratio"]], "distance() (sympy.geometry.line.line method)": [[73, "sympy.geometry.line.Line.distance"]], "distance() (sympy.geometry.line.ray method)": [[73, "sympy.geometry.line.Ray.distance"]], "distance() (sympy.geometry.line.segment method)": [[73, "sympy.geometry.line.Segment.distance"]], "equals() (sympy.geometry.line.line method)": [[73, "sympy.geometry.line.Line.equals"]], "equals() (sympy.geometry.line.ray method)": [[73, "sympy.geometry.line.Ray.equals"]], "equals() (sympy.geometry.line.segment method)": [[73, "sympy.geometry.line.Segment.equals"]], "equation() (sympy.geometry.line.line2d method)": [[73, "sympy.geometry.line.Line2D.equation"]], "equation() (sympy.geometry.line.line3d method)": [[73, "sympy.geometry.line.Line3D.equation"]], "intersection() (sympy.geometry.line.linearentity method)": [[73, "sympy.geometry.line.LinearEntity.intersection"]], "is_parallel() (sympy.geometry.line.linearentity method)": [[73, "sympy.geometry.line.LinearEntity.is_parallel"]], "is_perpendicular() (sympy.geometry.line.linearentity method)": [[73, "sympy.geometry.line.LinearEntity.is_perpendicular"]], "is_similar() (sympy.geometry.line.linearentity method)": [[73, "sympy.geometry.line.LinearEntity.is_similar"]], "length (sympy.geometry.line.linearentity property)": [[73, "sympy.geometry.line.LinearEntity.length"]], "length (sympy.geometry.line.segment property)": [[73, "sympy.geometry.line.Segment.length"]], "midpoint (sympy.geometry.line.segment property)": [[73, "sympy.geometry.line.Segment.midpoint"]], "p1 (sympy.geometry.line.linearentity property)": [[73, "sympy.geometry.line.LinearEntity.p1"]], "p2 (sympy.geometry.line.linearentity property)": [[73, "sympy.geometry.line.LinearEntity.p2"]], "parallel_line() (sympy.geometry.line.linearentity method)": [[73, "sympy.geometry.line.LinearEntity.parallel_line"]], "perpendicular_bisector() (sympy.geometry.line.segment method)": [[73, "sympy.geometry.line.Segment.perpendicular_bisector"]], "perpendicular_line() (sympy.geometry.line.linearentity method)": [[73, "sympy.geometry.line.LinearEntity.perpendicular_line"]], "perpendicular_line() (sympy.geometry.line.linearentity2d method)": [[73, "sympy.geometry.line.LinearEntity2D.perpendicular_line"]], "perpendicular_segment() (sympy.geometry.line.linearentity method)": [[73, "sympy.geometry.line.LinearEntity.perpendicular_segment"]], "plot_interval() (sympy.geometry.line.line method)": [[73, "sympy.geometry.line.Line.plot_interval"]], "plot_interval() (sympy.geometry.line.ray method)": [[73, "sympy.geometry.line.Ray.plot_interval"]], "plot_interval() (sympy.geometry.line.segment method)": [[73, "sympy.geometry.line.Segment.plot_interval"]], "points (sympy.geometry.line.linearentity property)": [[73, "sympy.geometry.line.LinearEntity.points"]], "projection() (sympy.geometry.line.linearentity method)": [[73, "sympy.geometry.line.LinearEntity.projection"]], "random_point() (sympy.geometry.line.linearentity method)": [[73, "sympy.geometry.line.LinearEntity.random_point"]], "slope (sympy.geometry.line.linearentity2d property)": [[73, "sympy.geometry.line.LinearEntity2D.slope"]], "smallest_angle_between() (sympy.geometry.line.linearentity method)": [[73, "sympy.geometry.line.LinearEntity.smallest_angle_between"]], "source (sympy.geometry.line.ray property)": [[73, "sympy.geometry.line.Ray.source"]], "sympy.geometry.line": [[73, "module-sympy.geometry.line"]], "xdirection (sympy.geometry.line.ray2d property)": [[73, "sympy.geometry.line.Ray2D.xdirection"]], "xdirection (sympy.geometry.line.ray3d property)": [[73, "sympy.geometry.line.Ray3D.xdirection"]], "ydirection (sympy.geometry.line.ray2d property)": [[73, "sympy.geometry.line.Ray2D.ydirection"]], "ydirection (sympy.geometry.line.ray3d property)": [[73, "sympy.geometry.line.Ray3D.ydirection"]], "zdirection (sympy.geometry.line.ray3d property)": [[73, "sympy.geometry.line.Ray3D.zdirection"]], "plane (class in sympy.geometry.plane)": [[74, "sympy.geometry.plane.Plane"]], "angle_between() (sympy.geometry.plane.plane method)": [[74, "sympy.geometry.plane.Plane.angle_between"]], "arbitrary_point() (sympy.geometry.plane.plane method)": [[74, "sympy.geometry.plane.Plane.arbitrary_point"]], "are_concurrent() (sympy.geometry.plane.plane static method)": [[74, "sympy.geometry.plane.Plane.are_concurrent"]], "distance() (sympy.geometry.plane.plane method)": [[74, "sympy.geometry.plane.Plane.distance"]], "equals() (sympy.geometry.plane.plane method)": [[74, "sympy.geometry.plane.Plane.equals"]], "equation() (sympy.geometry.plane.plane method)": [[74, "sympy.geometry.plane.Plane.equation"]], "intersection() (sympy.geometry.plane.plane method)": [[74, "sympy.geometry.plane.Plane.intersection"]], "is_coplanar() (sympy.geometry.plane.plane method)": [[74, "sympy.geometry.plane.Plane.is_coplanar"]], "is_parallel() (sympy.geometry.plane.plane method)": [[74, "sympy.geometry.plane.Plane.is_parallel"]], "is_perpendicular() (sympy.geometry.plane.plane method)": [[74, "sympy.geometry.plane.Plane.is_perpendicular"]], "normal_vector (sympy.geometry.plane.plane property)": [[74, "sympy.geometry.plane.Plane.normal_vector"]], "p1 (sympy.geometry.plane.plane property)": [[74, "sympy.geometry.plane.Plane.p1"]], "parallel_plane() (sympy.geometry.plane.plane method)": [[74, "sympy.geometry.plane.Plane.parallel_plane"]], "parameter_value() (sympy.geometry.plane.plane method)": [[74, "sympy.geometry.plane.Plane.parameter_value"]], "perpendicular_line() (sympy.geometry.plane.plane method)": [[74, "sympy.geometry.plane.Plane.perpendicular_line"]], "perpendicular_plane() (sympy.geometry.plane.plane method)": [[74, "sympy.geometry.plane.Plane.perpendicular_plane"]], "projection() (sympy.geometry.plane.plane method)": [[74, "sympy.geometry.plane.Plane.projection"]], "projection_line() (sympy.geometry.plane.plane method)": [[74, "sympy.geometry.plane.Plane.projection_line"]], "random_point() (sympy.geometry.plane.plane method)": [[74, "sympy.geometry.plane.Plane.random_point"]], "sympy.geometry.plane": [[74, "module-sympy.geometry.plane"]], "point (class in sympy.geometry.point)": [[75, "sympy.geometry.point.Point"]], "point2d (class in sympy.geometry.point)": [[75, "sympy.geometry.point.Point2D"]], "point3d (class in sympy.geometry.point)": [[75, "sympy.geometry.point.Point3D"]], "affine_rank() (sympy.geometry.point.point static method)": [[75, "sympy.geometry.point.Point.affine_rank"]], "ambient_dimension (sympy.geometry.point.point property)": [[75, "sympy.geometry.point.Point.ambient_dimension"]], "are_collinear() (sympy.geometry.point.point3d static method)": [[75, "sympy.geometry.point.Point3D.are_collinear"]], "are_coplanar() (sympy.geometry.point.point class method)": [[75, "sympy.geometry.point.Point.are_coplanar"]], "bounds (sympy.geometry.point.point2d property)": [[75, "sympy.geometry.point.Point2D.bounds"]], "canberra_distance() (sympy.geometry.point.point method)": [[75, "sympy.geometry.point.Point.canberra_distance"]], "coordinates (sympy.geometry.point.point2d property)": [[75, "sympy.geometry.point.Point2D.coordinates"]], "coordinates (sympy.geometry.point.point3d property)": [[75, "sympy.geometry.point.Point3D.coordinates"]], "direction_cosine() (sympy.geometry.point.point3d method)": [[75, "sympy.geometry.point.Point3D.direction_cosine"]], "direction_ratio() (sympy.geometry.point.point3d method)": [[75, "sympy.geometry.point.Point3D.direction_ratio"]], "distance() (sympy.geometry.point.point method)": [[75, "sympy.geometry.point.Point.distance"]], "dot() (sympy.geometry.point.point method)": [[75, "sympy.geometry.point.Point.dot"]], "equals() (sympy.geometry.point.point method)": [[75, "sympy.geometry.point.Point.equals"]], "intersection() (sympy.geometry.point.point method)": [[75, "sympy.geometry.point.Point.intersection"]], "intersection() (sympy.geometry.point.point3d method)": [[75, "sympy.geometry.point.Point3D.intersection"]], "is_collinear() (sympy.geometry.point.point method)": [[75, "sympy.geometry.point.Point.is_collinear"]], "is_concyclic() (sympy.geometry.point.point method)": [[75, "sympy.geometry.point.Point.is_concyclic"]], "is_nonzero (sympy.geometry.point.point property)": [[75, "sympy.geometry.point.Point.is_nonzero"]], "is_scalar_multiple() (sympy.geometry.point.point method)": [[75, "sympy.geometry.point.Point.is_scalar_multiple"]], "is_zero (sympy.geometry.point.point property)": [[75, "sympy.geometry.point.Point.is_zero"]], "length (sympy.geometry.point.point property)": [[75, "sympy.geometry.point.Point.length"]], "midpoint() (sympy.geometry.point.point method)": [[75, "sympy.geometry.point.Point.midpoint"]], "origin (sympy.geometry.point.point property)": [[75, "sympy.geometry.point.Point.origin"]], "orthogonal_direction (sympy.geometry.point.point property)": [[75, "sympy.geometry.point.Point.orthogonal_direction"]], "project() (sympy.geometry.point.point static method)": [[75, "sympy.geometry.point.Point.project"]], "rotate() (sympy.geometry.point.point2d method)": [[75, "sympy.geometry.point.Point2D.rotate"]], "scale() (sympy.geometry.point.point2d method)": [[75, "sympy.geometry.point.Point2D.scale"]], "scale() (sympy.geometry.point.point3d method)": [[75, "sympy.geometry.point.Point3D.scale"]], "sympy.geometry.point": [[75, "module-sympy.geometry.point"]], "taxicab_distance() (sympy.geometry.point.point method)": [[75, "sympy.geometry.point.Point.taxicab_distance"]], "transform() (sympy.geometry.point.point2d method)": [[75, "sympy.geometry.point.Point2D.transform"]], "transform() (sympy.geometry.point.point3d method)": [[75, "sympy.geometry.point.Point3D.transform"]], "translate() (sympy.geometry.point.point2d method)": [[75, "sympy.geometry.point.Point2D.translate"]], "translate() (sympy.geometry.point.point3d method)": [[75, "sympy.geometry.point.Point3D.translate"]], "unit (sympy.geometry.point.point property)": [[75, "sympy.geometry.point.Point.unit"]], "x (sympy.geometry.point.point2d property)": [[75, "sympy.geometry.point.Point2D.x"]], "x (sympy.geometry.point.point3d property)": [[75, "sympy.geometry.point.Point3D.x"]], "y (sympy.geometry.point.point2d property)": [[75, "sympy.geometry.point.Point2D.y"]], "y (sympy.geometry.point.point3d property)": [[75, "sympy.geometry.point.Point3D.y"]], "z (sympy.geometry.point.point3d property)": [[75, "sympy.geometry.point.Point3D.z"]], "polygon (class in sympy.geometry.polygon)": [[76, "sympy.geometry.polygon.Polygon"]], "regularpolygon (class in sympy.geometry.polygon)": [[76, "sympy.geometry.polygon.RegularPolygon"]], "triangle (class in sympy.geometry.polygon)": [[76, "sympy.geometry.polygon.Triangle"]], "altitudes (sympy.geometry.polygon.triangle property)": [[76, "sympy.geometry.polygon.Triangle.altitudes"]], "angles (sympy.geometry.polygon.polygon property)": [[76, "sympy.geometry.polygon.Polygon.angles"]], "angles (sympy.geometry.polygon.regularpolygon property)": [[76, "sympy.geometry.polygon.RegularPolygon.angles"]], "apothem (sympy.geometry.polygon.regularpolygon property)": [[76, "sympy.geometry.polygon.RegularPolygon.apothem"]], "arbitrary_point() (sympy.geometry.polygon.polygon method)": [[76, "sympy.geometry.polygon.Polygon.arbitrary_point"]], "area (sympy.geometry.polygon.polygon property)": [[76, "sympy.geometry.polygon.Polygon.area"]], "area (sympy.geometry.polygon.regularpolygon property)": [[76, "sympy.geometry.polygon.RegularPolygon.area"]], "args (sympy.geometry.polygon.regularpolygon property)": [[76, "sympy.geometry.polygon.RegularPolygon.args"]], "bisectors() (sympy.geometry.polygon.polygon method)": [[76, "sympy.geometry.polygon.Polygon.bisectors"]], "bisectors() (sympy.geometry.polygon.triangle method)": [[76, "sympy.geometry.polygon.Triangle.bisectors"]], "bounds (sympy.geometry.polygon.polygon property)": [[76, "sympy.geometry.polygon.Polygon.bounds"]], "center (sympy.geometry.polygon.regularpolygon property)": [[76, "sympy.geometry.polygon.RegularPolygon.center"]], "centroid (sympy.geometry.polygon.polygon property)": [[76, "sympy.geometry.polygon.Polygon.centroid"]], "centroid (sympy.geometry.polygon.regularpolygon property)": [[76, "sympy.geometry.polygon.RegularPolygon.centroid"]], "circumcenter (sympy.geometry.polygon.regularpolygon property)": [[76, "sympy.geometry.polygon.RegularPolygon.circumcenter"]], "circumcenter (sympy.geometry.polygon.triangle property)": [[76, "sympy.geometry.polygon.Triangle.circumcenter"]], "circumcircle (sympy.geometry.polygon.regularpolygon property)": [[76, "sympy.geometry.polygon.RegularPolygon.circumcircle"]], "circumcircle (sympy.geometry.polygon.triangle property)": [[76, "sympy.geometry.polygon.Triangle.circumcircle"]], "circumradius (sympy.geometry.polygon.regularpolygon property)": [[76, "sympy.geometry.polygon.RegularPolygon.circumradius"]], "circumradius (sympy.geometry.polygon.triangle property)": [[76, "sympy.geometry.polygon.Triangle.circumradius"]], "cut_section() (sympy.geometry.polygon.polygon method)": [[76, "sympy.geometry.polygon.Polygon.cut_section"]], "distance() (sympy.geometry.polygon.polygon method)": [[76, "sympy.geometry.polygon.Polygon.distance"]], "encloses_point() (sympy.geometry.polygon.polygon method)": [[76, "sympy.geometry.polygon.Polygon.encloses_point"]], "encloses_point() (sympy.geometry.polygon.regularpolygon method)": [[76, "sympy.geometry.polygon.RegularPolygon.encloses_point"]], "eulerline (sympy.geometry.polygon.triangle property)": [[76, "sympy.geometry.polygon.Triangle.eulerline"]], "excenters (sympy.geometry.polygon.triangle property)": [[76, "sympy.geometry.polygon.Triangle.excenters"]], "exradii (sympy.geometry.polygon.triangle property)": [[76, "sympy.geometry.polygon.Triangle.exradii"]], "exterior_angle (sympy.geometry.polygon.regularpolygon property)": [[76, "sympy.geometry.polygon.RegularPolygon.exterior_angle"]], "first_moment_of_area() (sympy.geometry.polygon.polygon method)": [[76, "sympy.geometry.polygon.Polygon.first_moment_of_area"]], "incenter (sympy.geometry.polygon.triangle property)": [[76, "sympy.geometry.polygon.Triangle.incenter"]], "incircle (sympy.geometry.polygon.regularpolygon property)": [[76, "sympy.geometry.polygon.RegularPolygon.incircle"]], "incircle (sympy.geometry.polygon.triangle property)": [[76, "sympy.geometry.polygon.Triangle.incircle"]], "inradius (sympy.geometry.polygon.regularpolygon property)": [[76, "sympy.geometry.polygon.RegularPolygon.inradius"]], "inradius (sympy.geometry.polygon.triangle property)": [[76, "sympy.geometry.polygon.Triangle.inradius"]], "interior_angle (sympy.geometry.polygon.regularpolygon property)": [[76, "sympy.geometry.polygon.RegularPolygon.interior_angle"]], "intersection() (sympy.geometry.polygon.polygon method)": [[76, "sympy.geometry.polygon.Polygon.intersection"]], "is_convex() (sympy.geometry.polygon.polygon method)": [[76, "sympy.geometry.polygon.Polygon.is_convex"]], "is_equilateral() (sympy.geometry.polygon.triangle method)": [[76, "sympy.geometry.polygon.Triangle.is_equilateral"]], "is_isosceles() (sympy.geometry.polygon.triangle method)": [[76, "sympy.geometry.polygon.Triangle.is_isosceles"]], "is_right() (sympy.geometry.polygon.triangle method)": [[76, "sympy.geometry.polygon.Triangle.is_right"]], "is_scalene() (sympy.geometry.polygon.triangle method)": [[76, "sympy.geometry.polygon.Triangle.is_scalene"]], "is_similar() (sympy.geometry.polygon.triangle method)": [[76, "sympy.geometry.polygon.Triangle.is_similar"]], "length (sympy.geometry.polygon.regularpolygon property)": [[76, "sympy.geometry.polygon.RegularPolygon.length"]], "medial (sympy.geometry.polygon.triangle property)": [[76, "sympy.geometry.polygon.Triangle.medial"]], "medians (sympy.geometry.polygon.triangle property)": [[76, "sympy.geometry.polygon.Triangle.medians"]], "nine_point_circle (sympy.geometry.polygon.triangle property)": [[76, "sympy.geometry.polygon.Triangle.nine_point_circle"]], "orthocenter (sympy.geometry.polygon.triangle property)": [[76, "sympy.geometry.polygon.Triangle.orthocenter"]], "perimeter (sympy.geometry.polygon.polygon property)": [[76, "sympy.geometry.polygon.Polygon.perimeter"]], "plot_interval() (sympy.geometry.polygon.polygon method)": [[76, "sympy.geometry.polygon.Polygon.plot_interval"]], "polar_second_moment_of_area() (sympy.geometry.polygon.polygon method)": [[76, "sympy.geometry.polygon.Polygon.polar_second_moment_of_area"]], "radius (sympy.geometry.polygon.regularpolygon property)": [[76, "sympy.geometry.polygon.RegularPolygon.radius"]], "reflect() (sympy.geometry.polygon.regularpolygon method)": [[76, "sympy.geometry.polygon.RegularPolygon.reflect"]], "rotate() (sympy.geometry.polygon.regularpolygon method)": [[76, "sympy.geometry.polygon.RegularPolygon.rotate"]], "rotation (sympy.geometry.polygon.regularpolygon property)": [[76, "sympy.geometry.polygon.RegularPolygon.rotation"]], "scale() (sympy.geometry.polygon.regularpolygon method)": [[76, "sympy.geometry.polygon.RegularPolygon.scale"]], "second_moment_of_area() (sympy.geometry.polygon.polygon method)": [[76, "sympy.geometry.polygon.Polygon.second_moment_of_area"]], "section_modulus() (sympy.geometry.polygon.polygon method)": [[76, "sympy.geometry.polygon.Polygon.section_modulus"]], "sides (sympy.geometry.polygon.polygon property)": [[76, "sympy.geometry.polygon.Polygon.sides"]], "spin() (sympy.geometry.polygon.regularpolygon method)": [[76, "sympy.geometry.polygon.RegularPolygon.spin"]], "sympy.geometry.polygon": [[76, "module-sympy.geometry.polygon"]], "vertices (sympy.geometry.polygon.polygon property)": [[76, "sympy.geometry.polygon.Polygon.vertices"]], "vertices (sympy.geometry.polygon.regularpolygon property)": [[76, "sympy.geometry.polygon.RegularPolygon.vertices"]], "vertices (sympy.geometry.polygon.triangle property)": [[76, "sympy.geometry.polygon.Triangle.vertices"]], "are_similar() (in module sympy.geometry.util)": [[77, "sympy.geometry.util.are_similar"]], "centroid() (in module sympy.geometry.util)": [[77, "sympy.geometry.util.centroid"]], "convex_hull() (in module sympy.geometry.util)": [[77, "sympy.geometry.util.convex_hull"]], "idiff() (in module sympy.geometry.util)": [[77, "sympy.geometry.util.idiff"]], "intersection() (in module sympy.geometry.util)": [[77, "sympy.geometry.util.intersection"]], "sympy.geometry.util": [[77, "module-sympy.geometry.util"]], "expr_to_holonomic() (in module sympy.holonomic.holonomic)": [[79, "sympy.holonomic.holonomic.expr_to_holonomic"]], "from_hyper() (in module sympy.holonomic.holonomic)": [[79, "sympy.holonomic.holonomic.from_hyper"]], "from_meijerg() (in module sympy.holonomic.holonomic)": [[79, "sympy.holonomic.holonomic.from_meijerg"]], "sympy.holonomic": [[80, "module-sympy.holonomic"]], "_convert_poly_rat_alg() (in module sympy.holonomic.holonomic)": [[81, "sympy.holonomic.holonomic._convert_poly_rat_alg"]], "_create_table() (in module sympy.holonomic.holonomic)": [[81, "sympy.holonomic.holonomic._create_table"]], "composition() (sympy.holonomic.holonomic.holonomicfunction method)": [[82, "sympy.holonomic.holonomic.HolonomicFunction.composition"]], "diff() (sympy.holonomic.holonomic.holonomicfunction method)": [[82, "sympy.holonomic.holonomic.HolonomicFunction.diff"]], "evalf() (sympy.holonomic.holonomic.holonomicfunction method)": [[82, "sympy.holonomic.holonomic.HolonomicFunction.evalf"]], "integrate() (sympy.holonomic.holonomic.holonomicfunction method)": [[82, "sympy.holonomic.holonomic.HolonomicFunction.integrate"]], "series() (sympy.holonomic.holonomic.holonomicfunction method)": [[82, "sympy.holonomic.holonomic.HolonomicFunction.series"]], "to_expr() (sympy.holonomic.holonomic.holonomicfunction method)": [[82, "sympy.holonomic.holonomic.HolonomicFunction.to_expr"]], "to_hyper() (sympy.holonomic.holonomic.holonomicfunction method)": [[82, "sympy.holonomic.holonomic.HolonomicFunction.to_hyper"]], "to_meijerg() (sympy.holonomic.holonomic.holonomicfunction method)": [[82, "sympy.holonomic.holonomic.HolonomicFunction.to_meijerg"]], "to_sequence() (sympy.holonomic.holonomic.holonomicfunction method)": [[82, "sympy.holonomic.holonomic.HolonomicFunction.to_sequence"]], "differentialoperator (class in sympy.holonomic.holonomic)": [[83, "sympy.holonomic.holonomic.DifferentialOperator"]], "differentialoperatoralgebra (class in sympy.holonomic.holonomic)": [[83, "sympy.holonomic.holonomic.DifferentialOperatorAlgebra"]], "differentialoperators() (in module sympy.holonomic.holonomic)": [[83, "sympy.holonomic.holonomic.DifferentialOperators"]], "holonomicfunction (class in sympy.holonomic.holonomic)": [[83, "sympy.holonomic.holonomic.HolonomicFunction"]], "is_singular() (sympy.holonomic.holonomic.differentialoperator method)": [[83, "sympy.holonomic.holonomic.DifferentialOperator.is_singular"]], "_coeffexpvalueerror": [[85, "sympy.integrals.meijerint._CoeffExpValueError"]], "_check_antecedents() (in module sympy.integrals.meijerint)": [[85, "sympy.integrals.meijerint._check_antecedents"]], "_check_antecedents_1() (in module sympy.integrals.meijerint)": [[85, "sympy.integrals.meijerint._check_antecedents_1"]], "_check_antecedents_inversion() (in module sympy.integrals.meijerint)": [[85, "sympy.integrals.meijerint._check_antecedents_inversion"]], "_condsimp() (in module sympy.integrals.meijerint)": [[85, "sympy.integrals.meijerint._condsimp"]], "_create_lookup_table() (in module sympy.integrals.meijerint)": [[85, "sympy.integrals.meijerint._create_lookup_table"]], "_dummy() (in module sympy.integrals.meijerint)": [[85, "sympy.integrals.meijerint._dummy"]], "_dummy_() (in module sympy.integrals.meijerint)": [[85, "sympy.integrals.meijerint._dummy_"]], "_eval_cond() (in module sympy.integrals.meijerint)": [[85, "sympy.integrals.meijerint._eval_cond"]], "_exponents() (in module sympy.integrals.meijerint)": [[85, "sympy.integrals.meijerint._exponents"]], "_find_splitting_points() (in module sympy.integrals.meijerint)": [[85, "sympy.integrals.meijerint._find_splitting_points"]], "_flip_g() (in module sympy.integrals.meijerint)": [[85, "sympy.integrals.meijerint._flip_g"]], "_functions() (in module sympy.integrals.meijerint)": [[85, "sympy.integrals.meijerint._functions"]], "_get_coeff_exp() (in module sympy.integrals.meijerint)": [[85, "sympy.integrals.meijerint._get_coeff_exp"]], "_guess_expansion() (in module sympy.integrals.meijerint)": [[85, "sympy.integrals.meijerint._guess_expansion"]], "_inflate_fox_h() (in module sympy.integrals.meijerint)": [[85, "sympy.integrals.meijerint._inflate_fox_h"]], "_inflate_g() (in module sympy.integrals.meijerint)": [[85, "sympy.integrals.meijerint._inflate_g"]], "_int0oo() (in module sympy.integrals.meijerint)": [[85, "sympy.integrals.meijerint._int0oo"]], "_int0oo_1() (in module sympy.integrals.meijerint)": [[85, "sympy.integrals.meijerint._int0oo_1"]], "_int_inversion() (in module sympy.integrals.meijerint)": [[85, "sympy.integrals.meijerint._int_inversion"]], "_is_analytic() (in module sympy.integrals.meijerint)": [[85, "sympy.integrals.meijerint._is_analytic"]], "_meijerint_definite_2() (in module sympy.integrals.meijerint)": [[85, "sympy.integrals.meijerint._meijerint_definite_2"]], "_meijerint_definite_3() (in module sympy.integrals.meijerint)": [[85, "sympy.integrals.meijerint._meijerint_definite_3"]], "_meijerint_definite_4() (in module sympy.integrals.meijerint)": [[85, "sympy.integrals.meijerint._meijerint_definite_4"]], "_meijerint_indefinite_1() (in module sympy.integrals.meijerint)": [[85, "sympy.integrals.meijerint._meijerint_indefinite_1"]], "_mul_args() (in module sympy.integrals.meijerint)": [[85, "sympy.integrals.meijerint._mul_args"]], "_mul_as_two_parts() (in module sympy.integrals.meijerint)": [[85, "sympy.integrals.meijerint._mul_as_two_parts"]], "_my_principal_branch() (in module sympy.integrals.meijerint)": [[85, "sympy.integrals.meijerint._my_principal_branch"]], "_mytype() (in module sympy.integrals.meijerint)": [[85, "sympy.integrals.meijerint._mytype"]], "_rewrite1() (in module sympy.integrals.meijerint)": [[85, "sympy.integrals.meijerint._rewrite1"]], "_rewrite2() (in module sympy.integrals.meijerint)": [[85, "sympy.integrals.meijerint._rewrite2"]], "_rewrite_inversion() (in module sympy.integrals.meijerint)": [[85, "sympy.integrals.meijerint._rewrite_inversion"]], "_rewrite_saxena() (in module sympy.integrals.meijerint)": [[85, "sympy.integrals.meijerint._rewrite_saxena"]], "_rewrite_saxena_1() (in module sympy.integrals.meijerint)": [[85, "sympy.integrals.meijerint._rewrite_saxena_1"]], "_rewrite_single() (in module sympy.integrals.meijerint)": [[85, "sympy.integrals.meijerint._rewrite_single"]], "_split_mul() (in module sympy.integrals.meijerint)": [[85, "sympy.integrals.meijerint._split_mul"]], "meijerint_definite() (in module sympy.integrals.meijerint)": [[85, "sympy.integrals.meijerint.meijerint_definite"]], "meijerint_indefinite() (in module sympy.integrals.meijerint)": [[85, "sympy.integrals.meijerint.meijerint_indefinite"]], "meijerint_inversion() (in module sympy.integrals.meijerint)": [[85, "sympy.integrals.meijerint.meijerint_inversion"]], "sympy.integrals.meijerint": [[85, "module-sympy.integrals.meijerint"]], "sympy.integrals.meijerint_doc": [[85, "module-sympy.integrals.meijerint_doc"]], "cosinetransform (class in sympy.integrals.transforms)": [[87, "sympy.integrals.transforms.CosineTransform"]], "exprwithlimits (class in sympy.concrete.expr_with_limits)": [[87, "sympy.concrete.expr_with_limits.ExprWithLimits"]], "fouriertransform (class in sympy.integrals.transforms)": [[87, "sympy.integrals.transforms.FourierTransform"]], "hankeltransform (class in sympy.integrals.transforms)": [[87, "sympy.integrals.transforms.HankelTransform"]], "integral (class in sympy.integrals.integrals)": [[87, "sympy.integrals.integrals.Integral"]], "integral.is_commutative (in module sympy.integrals.integrals)": [[87, "sympy.integrals.integrals.Integral.is_commutative"]], "integraltransform (class in sympy.integrals.transforms)": [[87, "sympy.integrals.transforms.IntegralTransform"]], "integraltransformerror": [[87, "sympy.integrals.transforms.IntegralTransformError"]], "inversecosinetransform (class in sympy.integrals.transforms)": [[87, "sympy.integrals.transforms.InverseCosineTransform"]], "inversefouriertransform (class in sympy.integrals.transforms)": [[87, "sympy.integrals.transforms.InverseFourierTransform"]], "inversehankeltransform (class in sympy.integrals.transforms)": [[87, "sympy.integrals.transforms.InverseHankelTransform"]], "inverselaplacetransform (class in sympy.integrals.transforms)": [[87, "sympy.integrals.transforms.InverseLaplaceTransform"]], "inversemellintransform (class in sympy.integrals.transforms)": [[87, "sympy.integrals.transforms.InverseMellinTransform"]], "inversesinetransform (class in sympy.integrals.transforms)": [[87, "sympy.integrals.transforms.InverseSineTransform"]], "laplacetransform (class in sympy.integrals.transforms)": [[87, "sympy.integrals.transforms.LaplaceTransform"]], "mellintransform (class in sympy.integrals.transforms)": [[87, "sympy.integrals.transforms.MellinTransform"]], "nonelementaryintegral (class in sympy.integrals.risch)": [[87, "sympy.integrals.risch.NonElementaryIntegral"]], "sinetransform (class in sympy.integrals.transforms)": [[87, "sympy.integrals.transforms.SineTransform"]], "_fast_inverse_laplace() (in module sympy.integrals.transforms)": [[87, "sympy.integrals.transforms._fast_inverse_laplace"]], "_fourier_transform() (in module sympy.integrals.transforms)": [[87, "sympy.integrals.transforms._fourier_transform"]], "as_sum() (sympy.integrals.integrals.integral method)": [[87, "sympy.integrals.integrals.Integral.as_sum"]], "bound_symbols (sympy.concrete.expr_with_limits.exprwithlimits property)": [[87, "sympy.concrete.expr_with_limits.ExprWithLimits.bound_symbols"]], "components() (in module sympy.integrals.heurisch)": [[87, "sympy.integrals.heurisch.components"]], "cosine_transform() (in module sympy.integrals.transforms)": [[87, "sympy.integrals.transforms.cosine_transform"]], "deltaintegrate() (in module sympy.integrals.deltafunctions)": [[87, "sympy.integrals.deltafunctions.deltaintegrate"]], "doit() (sympy.integrals.integrals.integral method)": [[87, "sympy.integrals.integrals.Integral.doit"]], "doit() (sympy.integrals.transforms.integraltransform method)": [[87, "sympy.integrals.transforms.IntegralTransform.doit"]], "fourier_transform() (in module sympy.integrals.transforms)": [[87, "sympy.integrals.transforms.fourier_transform"]], "free_symbols (sympy.concrete.expr_with_limits.exprwithlimits property)": [[87, "sympy.concrete.expr_with_limits.ExprWithLimits.free_symbols"]], "free_symbols (sympy.integrals.integrals.integral property)": [[87, "sympy.integrals.integrals.Integral.free_symbols"]], "function (sympy.concrete.expr_with_limits.exprwithlimits property)": [[87, "sympy.concrete.expr_with_limits.ExprWithLimits.function"]], "function (sympy.integrals.transforms.integraltransform property)": [[87, "sympy.integrals.transforms.IntegralTransform.function"]], "function_variable (sympy.integrals.transforms.integraltransform property)": [[87, "sympy.integrals.transforms.IntegralTransform.function_variable"]], "gauss_chebyshev_t() (in module sympy.integrals.quadrature)": [[87, "sympy.integrals.quadrature.gauss_chebyshev_t"]], "gauss_chebyshev_u() (in module sympy.integrals.quadrature)": [[87, "sympy.integrals.quadrature.gauss_chebyshev_u"]], "gauss_gen_laguerre() (in module sympy.integrals.quadrature)": [[87, "sympy.integrals.quadrature.gauss_gen_laguerre"]], "gauss_hermite() (in module sympy.integrals.quadrature)": [[87, "sympy.integrals.quadrature.gauss_hermite"]], "gauss_jacobi() (in module sympy.integrals.quadrature)": [[87, "sympy.integrals.quadrature.gauss_jacobi"]], "gauss_laguerre() (in module sympy.integrals.quadrature)": [[87, "sympy.integrals.quadrature.gauss_laguerre"]], "gauss_legendre() (in module sympy.integrals.quadrature)": [[87, "sympy.integrals.quadrature.gauss_legendre"]], "gauss_lobatto() (in module sympy.integrals.quadrature)": [[87, "sympy.integrals.quadrature.gauss_lobatto"]], "hankel_transform() (in module sympy.integrals.transforms)": [[87, "sympy.integrals.transforms.hankel_transform"]], "has_finite_limits (sympy.concrete.expr_with_limits.exprwithlimits property)": [[87, "sympy.concrete.expr_with_limits.ExprWithLimits.has_finite_limits"]], "has_reversed_limits (sympy.concrete.expr_with_limits.exprwithlimits property)": [[87, "sympy.concrete.expr_with_limits.ExprWithLimits.has_reversed_limits"]], "heurisch() (in module sympy.integrals.heurisch)": [[87, "sympy.integrals.heurisch.heurisch"]], "integral_steps() (in module sympy.integrals.manualintegrate)": [[87, "sympy.integrals.manualintegrate.integral_steps"]], "integrate() (in module sympy.integrals.integrals)": [[87, "sympy.integrals.integrals.integrate"]], "inverse_cosine_transform() (in module sympy.integrals.transforms)": [[87, "sympy.integrals.transforms.inverse_cosine_transform"]], "inverse_fourier_transform() (in module sympy.integrals.transforms)": [[87, "sympy.integrals.transforms.inverse_fourier_transform"]], "inverse_hankel_transform() (in module sympy.integrals.transforms)": [[87, "sympy.integrals.transforms.inverse_hankel_transform"]], "inverse_laplace_transform() (in module sympy.integrals.transforms)": [[87, "sympy.integrals.transforms.inverse_laplace_transform"]], "inverse_mellin_transform() (in module sympy.integrals.transforms)": [[87, "sympy.integrals.transforms.inverse_mellin_transform"]], "inverse_sine_transform() (in module sympy.integrals.transforms)": [[87, "sympy.integrals.transforms.inverse_sine_transform"]], "is_number (sympy.concrete.expr_with_limits.exprwithlimits property)": [[87, "sympy.concrete.expr_with_limits.ExprWithLimits.is_number"]], "laplace_transform() (in module sympy.integrals.transforms)": [[87, "sympy.integrals.transforms.laplace_transform"]], "limits (sympy.concrete.expr_with_limits.exprwithlimits property)": [[87, "sympy.concrete.expr_with_limits.ExprWithLimits.limits"]], "line_integrate() (in module sympy.integrals.integrals)": [[87, "sympy.integrals.integrals.line_integrate"]], "manualintegrate() (in module sympy.integrals.manualintegrate)": [[87, "sympy.integrals.manualintegrate.manualintegrate"]], "mellin_transform() (in module sympy.integrals.transforms)": [[87, "sympy.integrals.transforms.mellin_transform"]], "polytope_integrate() (in module sympy.integrals.intpoly)": [[87, "sympy.integrals.intpoly.polytope_integrate"]], "principal_value() (sympy.integrals.integrals.integral method)": [[87, "sympy.integrals.integrals.Integral.principal_value"]], "ratint() (in module sympy.integrals.rationaltools)": [[87, "sympy.integrals.rationaltools.ratint"]], "ratint_logpart() (in module sympy.integrals.rationaltools)": [[87, "sympy.integrals.rationaltools.ratint_logpart"]], "ratint_ratpart() (in module sympy.integrals.rationaltools)": [[87, "sympy.integrals.rationaltools.ratint_ratpart"]], "risch_integrate() (in module sympy.integrals.risch)": [[87, "sympy.integrals.risch.risch_integrate"]], "sine_transform() (in module sympy.integrals.transforms)": [[87, "sympy.integrals.transforms.sine_transform"]], "singularityintegrate() (in module sympy.integrals.singularityfunctions)": [[87, "sympy.integrals.singularityfunctions.singularityintegrate"]], "sympy.integrals": [[87, "module-sympy.integrals"]], "sympy.integrals.intpoly": [[87, "module-sympy.integrals.intpoly"]], "sympy.integrals.transforms": [[87, "module-sympy.integrals.transforms"]], "transform() (sympy.integrals.integrals.integral method)": [[87, "sympy.integrals.integrals.Integral.transform"]], "transform_variable (sympy.integrals.transforms.integraltransform property)": [[87, "sympy.integrals.transforms.IntegralTransform.transform_variable"]], "trigintegrate() (in module sympy.integrals.trigonometry)": [[87, "sympy.integrals.trigonometry.trigintegrate"]], "variables (sympy.concrete.expr_with_limits.exprwithlimits property)": [[87, "sympy.concrete.expr_with_limits.ExprWithLimits.variables"]], "enable_automatic_int_sympification() (in module sympy.interactive.session)": [[88, "sympy.interactive.session.enable_automatic_int_sympification"]], "enable_automatic_symbols() (in module sympy.interactive.session)": [[88, "sympy.interactive.session.enable_automatic_symbols"]], "init_ipython_session() (in module sympy.interactive.session)": [[88, "sympy.interactive.session.init_ipython_session"]], "init_printing() (in module sympy.interactive.printing)": [[88, "sympy.interactive.printing.init_printing"]], "init_python_session() (in module sympy.interactive.session)": [[88, "sympy.interactive.session.init_python_session"]], "init_session() (in module sympy.interactive.session)": [[88, "sympy.interactive.session.init_session"]], "int_to_integer() (in module sympy.interactive.session)": [[88, "sympy.interactive.session.int_to_Integer"]], "sympy.interactive": [[88, "module-sympy.interactive"]], "sympy.interactive.printing": [[88, "module-sympy.interactive.printing"]], "sympy.interactive.session": [[88, "module-sympy.interactive.session"]], "cartanmatrix() (in module sympy.liealgebras.cartan_matrix)": [[89, "sympy.liealgebras.cartan_matrix.CartanMatrix"]], "cartantype_generator (class in sympy.liealgebras.cartan_type)": [[89, "sympy.liealgebras.cartan_type.CartanType_generator"]], "dynkindiagram() (in module sympy.liealgebras.dynkin_diagram)": [[89, "sympy.liealgebras.dynkin_diagram.DynkinDiagram"]], "rootsystem (class in sympy.liealgebras.root_system)": [[89, "sympy.liealgebras.root_system.RootSystem"]], "standard_cartan (class in sympy.liealgebras.cartan_type)": [[89, "sympy.liealgebras.cartan_type.Standard_Cartan"]], "typea (class in sympy.liealgebras.type_a)": [[89, "sympy.liealgebras.type_a.TypeA"]], "typeb (class in sympy.liealgebras.type_b)": [[89, "sympy.liealgebras.type_b.TypeB"]], "typec (class in sympy.liealgebras.type_c)": [[89, "sympy.liealgebras.type_c.TypeC"]], "typed (class in sympy.liealgebras.type_d)": [[89, "sympy.liealgebras.type_d.TypeD"]], "typee (class in sympy.liealgebras.type_e)": [[89, "sympy.liealgebras.type_e.TypeE"]], "typef (class in sympy.liealgebras.type_f)": [[89, "sympy.liealgebras.type_f.TypeF"]], "typeg (class in sympy.liealgebras.type_g)": [[89, "sympy.liealgebras.type_g.TypeG"]], "weylgroup (class in sympy.liealgebras.weyl_group)": [[89, "sympy.liealgebras.weyl_group.WeylGroup"]], "add_as_roots() (sympy.liealgebras.root_system.rootsystem method)": [[89, "sympy.liealgebras.root_system.RootSystem.add_as_roots"]], "add_simple_roots() (sympy.liealgebras.root_system.rootsystem method)": [[89, "sympy.liealgebras.root_system.RootSystem.add_simple_roots"]], "all_roots() (sympy.liealgebras.root_system.rootsystem method)": [[89, "sympy.liealgebras.root_system.RootSystem.all_roots"]], "basic_root() (sympy.liealgebras.type_a.typea method)": [[89, "sympy.liealgebras.type_a.TypeA.basic_root"]], "basic_root() (sympy.liealgebras.type_b.typeb method)": [[89, "sympy.liealgebras.type_b.TypeB.basic_root"]], "basic_root() (sympy.liealgebras.type_c.typec method)": [[89, "sympy.liealgebras.type_c.TypeC.basic_root"]], "basic_root() (sympy.liealgebras.type_d.typed method)": [[89, "sympy.liealgebras.type_d.TypeD.basic_root"]], "basic_root() (sympy.liealgebras.type_e.typee method)": [[89, "sympy.liealgebras.type_e.TypeE.basic_root"]], "basic_root() (sympy.liealgebras.type_f.typef method)": [[89, "sympy.liealgebras.type_f.TypeF.basic_root"]], "basis() (sympy.liealgebras.type_a.typea method)": [[89, "sympy.liealgebras.type_a.TypeA.basis"]], "basis() (sympy.liealgebras.type_b.typeb method)": [[89, "sympy.liealgebras.type_b.TypeB.basis"]], "basis() (sympy.liealgebras.type_c.typec method)": [[89, "sympy.liealgebras.type_c.TypeC.basis"]], "basis() (sympy.liealgebras.type_d.typed method)": [[89, "sympy.liealgebras.type_d.TypeD.basis"]], "basis() (sympy.liealgebras.type_e.typee method)": [[89, "sympy.liealgebras.type_e.TypeE.basis"]], "basis() (sympy.liealgebras.type_f.typef method)": [[89, "sympy.liealgebras.type_f.TypeF.basis"]], "basis() (sympy.liealgebras.type_g.typeg method)": [[89, "sympy.liealgebras.type_g.TypeG.basis"]], "cartan_matrix() (sympy.liealgebras.root_system.rootsystem method)": [[89, "sympy.liealgebras.root_system.RootSystem.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_a.typea method)": [[89, "sympy.liealgebras.type_a.TypeA.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_b.typeb method)": [[89, "sympy.liealgebras.type_b.TypeB.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_c.typec method)": [[89, "sympy.liealgebras.type_c.TypeC.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_d.typed method)": [[89, "sympy.liealgebras.type_d.TypeD.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_e.typee method)": [[89, "sympy.liealgebras.type_e.TypeE.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_f.typef method)": [[89, "sympy.liealgebras.type_f.TypeF.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_g.typeg method)": [[89, "sympy.liealgebras.type_g.TypeG.cartan_matrix"]], "coxeter_diagram() (sympy.liealgebras.weyl_group.weylgroup method)": [[89, "sympy.liealgebras.weyl_group.WeylGroup.coxeter_diagram"]], "delete_doubles() (sympy.liealgebras.weyl_group.weylgroup method)": [[89, "sympy.liealgebras.weyl_group.WeylGroup.delete_doubles"]], "dimension() (sympy.liealgebras.type_a.typea method)": [[89, "sympy.liealgebras.type_a.TypeA.dimension"]], "dimension() (sympy.liealgebras.type_b.typeb method)": [[89, "sympy.liealgebras.type_b.TypeB.dimension"]], "dimension() (sympy.liealgebras.type_c.typec method)": [[89, "sympy.liealgebras.type_c.TypeC.dimension"]], "dimension() (sympy.liealgebras.type_d.typed method)": [[89, "sympy.liealgebras.type_d.TypeD.dimension"]], "dimension() (sympy.liealgebras.type_e.typee method)": [[89, "sympy.liealgebras.type_e.TypeE.dimension"]], "dimension() (sympy.liealgebras.type_f.typef method)": [[89, "sympy.liealgebras.type_f.TypeF.dimension"]], "dimension() (sympy.liealgebras.type_g.typeg method)": [[89, "sympy.liealgebras.type_g.TypeG.dimension"]], "dynkin_diagram() (sympy.liealgebras.root_system.rootsystem method)": [[89, "sympy.liealgebras.root_system.RootSystem.dynkin_diagram"]], "element_order() (sympy.liealgebras.weyl_group.weylgroup method)": [[89, "sympy.liealgebras.weyl_group.WeylGroup.element_order"]], "generators() (sympy.liealgebras.weyl_group.weylgroup method)": [[89, "sympy.liealgebras.weyl_group.WeylGroup.generators"]], "group_name() (sympy.liealgebras.weyl_group.weylgroup method)": [[89, "sympy.liealgebras.weyl_group.WeylGroup.group_name"]], "group_order() (sympy.liealgebras.weyl_group.weylgroup method)": [[89, "sympy.liealgebras.weyl_group.WeylGroup.group_order"]], "highest_root() (sympy.liealgebras.type_a.typea method)": [[89, "sympy.liealgebras.type_a.TypeA.highest_root"]], "lie_algebra() (sympy.liealgebras.type_a.typea method)": [[89, "sympy.liealgebras.type_a.TypeA.lie_algebra"]], "lie_algebra() (sympy.liealgebras.type_b.typeb method)": [[89, "sympy.liealgebras.type_b.TypeB.lie_algebra"]], "lie_algebra() (sympy.liealgebras.type_c.typec method)": [[89, "sympy.liealgebras.type_c.TypeC.lie_algebra"]], "lie_algebra() (sympy.liealgebras.type_d.typed method)": [[89, "sympy.liealgebras.type_d.TypeD.lie_algebra"]], "matrix_form() (sympy.liealgebras.weyl_group.weylgroup method)": [[89, "sympy.liealgebras.weyl_group.WeylGroup.matrix_form"]], "positive_roots() (sympy.liealgebras.type_a.typea method)": [[89, "sympy.liealgebras.type_a.TypeA.positive_roots"]], "positive_roots() (sympy.liealgebras.type_b.typeb method)": [[89, "sympy.liealgebras.type_b.TypeB.positive_roots"]], "positive_roots() (sympy.liealgebras.type_c.typec method)": [[89, "sympy.liealgebras.type_c.TypeC.positive_roots"]], "positive_roots() (sympy.liealgebras.type_d.typed method)": [[89, "sympy.liealgebras.type_d.TypeD.positive_roots"]], "positive_roots() (sympy.liealgebras.type_e.typee method)": [[89, "sympy.liealgebras.type_e.TypeE.positive_roots"]], "positive_roots() (sympy.liealgebras.type_f.typef method)": [[89, "sympy.liealgebras.type_f.TypeF.positive_roots"]], "positive_roots() (sympy.liealgebras.type_g.typeg method)": [[89, "sympy.liealgebras.type_g.TypeG.positive_roots"]], "rank() (sympy.liealgebras.cartan_type.standard_cartan method)": [[89, "sympy.liealgebras.cartan_type.Standard_Cartan.rank"]], "root_space() (sympy.liealgebras.root_system.rootsystem method)": [[89, "sympy.liealgebras.root_system.RootSystem.root_space"]], "roots() (sympy.liealgebras.type_a.typea method)": [[89, "sympy.liealgebras.type_a.TypeA.roots"]], "roots() (sympy.liealgebras.type_b.typeb method)": [[89, "sympy.liealgebras.type_b.TypeB.roots"]], "roots() (sympy.liealgebras.type_c.typec method)": [[89, "sympy.liealgebras.type_c.TypeC.roots"]], "roots() (sympy.liealgebras.type_d.typed method)": [[89, "sympy.liealgebras.type_d.TypeD.roots"]], "roots() (sympy.liealgebras.type_e.typee method)": [[89, "sympy.liealgebras.type_e.TypeE.roots"]], "roots() (sympy.liealgebras.type_f.typef method)": [[89, "sympy.liealgebras.type_f.TypeF.roots"]], "roots() (sympy.liealgebras.type_g.typeg method)": [[89, "sympy.liealgebras.type_g.TypeG.roots"]], "series() (sympy.liealgebras.cartan_type.standard_cartan method)": [[89, "sympy.liealgebras.cartan_type.Standard_Cartan.series"]], "simple_root() (sympy.liealgebras.type_a.typea method)": [[89, "sympy.liealgebras.type_a.TypeA.simple_root"]], "simple_root() (sympy.liealgebras.type_b.typeb method)": [[89, "sympy.liealgebras.type_b.TypeB.simple_root"]], "simple_root() (sympy.liealgebras.type_c.typec method)": [[89, "sympy.liealgebras.type_c.TypeC.simple_root"]], "simple_root() (sympy.liealgebras.type_d.typed method)": [[89, "sympy.liealgebras.type_d.TypeD.simple_root"]], "simple_root() (sympy.liealgebras.type_e.typee method)": [[89, "sympy.liealgebras.type_e.TypeE.simple_root"]], "simple_root() (sympy.liealgebras.type_f.typef method)": [[89, "sympy.liealgebras.type_f.TypeF.simple_root"]], "simple_root() (sympy.liealgebras.type_g.typeg method)": [[89, "sympy.liealgebras.type_g.TypeG.simple_root"]], "simple_roots() (sympy.liealgebras.root_system.rootsystem method)": [[89, "sympy.liealgebras.root_system.RootSystem.simple_roots"]], "sympy.liealgebras": [[89, "module-sympy.liealgebras"]], "anfform() (in module sympy.logic.boolalg)": [[90, "sympy.logic.boolalg.ANFform"]], "and (class in sympy.logic.boolalg)": [[90, "sympy.logic.boolalg.And"]], "boolean (class in sympy.logic.boolalg)": [[90, "sympy.logic.boolalg.Boolean"]], "booleanfalse (class in sympy.logic.boolalg)": [[90, "sympy.logic.boolalg.BooleanFalse"]], "booleantrue (class in sympy.logic.boolalg)": [[90, "sympy.logic.boolalg.BooleanTrue"]], "equivalent (class in sympy.logic.boolalg)": [[90, "sympy.logic.boolalg.Equivalent"]], "exclusive (class in sympy.logic.boolalg)": [[90, "sympy.logic.boolalg.Exclusive"]], "ite (class in sympy.logic.boolalg)": [[90, "sympy.logic.boolalg.ITE"]], "implies (class in sympy.logic.boolalg)": [[90, "sympy.logic.boolalg.Implies"]], "nand (class in sympy.logic.boolalg)": [[90, "sympy.logic.boolalg.Nand"]], "nor (class in sympy.logic.boolalg)": [[90, "sympy.logic.boolalg.Nor"]], "not (class in sympy.logic.boolalg)": [[90, "sympy.logic.boolalg.Not"]], "or (class in sympy.logic.boolalg)": [[90, "sympy.logic.boolalg.Or"]], "posform() (in module sympy.logic.boolalg)": [[90, "sympy.logic.boolalg.POSform"]], "sopform() (in module sympy.logic.boolalg)": [[90, "sympy.logic.boolalg.SOPform"]], "xnor (class in sympy.logic.boolalg)": [[90, "sympy.logic.boolalg.Xnor"]], "xor (class in sympy.logic.boolalg)": [[90, "sympy.logic.boolalg.Xor"]], "anf_coeffs() (in module sympy.logic.boolalg)": [[90, "sympy.logic.boolalg.anf_coeffs"]], "as_set() (sympy.logic.boolalg.boolean method)": [[90, "sympy.logic.boolalg.Boolean.as_set"]], "as_set() (sympy.logic.boolalg.booleanfalse method)": [[90, "sympy.logic.boolalg.BooleanFalse.as_set"]], "as_set() (sympy.logic.boolalg.booleantrue method)": [[90, "sympy.logic.boolalg.BooleanTrue.as_set"]], "bool_map() (in module sympy.logic.boolalg)": [[90, "sympy.logic.boolalg.bool_map"]], "bool_maxterm() (in module sympy.logic.boolalg)": [[90, "sympy.logic.boolalg.bool_maxterm"]], "bool_minterm() (in module sympy.logic.boolalg)": [[90, "sympy.logic.boolalg.bool_minterm"]], "bool_monomial() (in module sympy.logic.boolalg)": [[90, "sympy.logic.boolalg.bool_monomial"]], "distribute_and_over_or() (in module sympy.logic.boolalg)": [[90, "sympy.logic.boolalg.distribute_and_over_or"]], "distribute_or_over_and() (in module sympy.logic.boolalg)": [[90, "sympy.logic.boolalg.distribute_or_over_and"]], "distribute_xor_over_and() (in module sympy.logic.boolalg)": [[90, "sympy.logic.boolalg.distribute_xor_over_and"]], "eliminate_implications() (in module sympy.logic.boolalg)": [[90, "sympy.logic.boolalg.eliminate_implications"]], "equals() (sympy.logic.boolalg.boolean method)": [[90, "sympy.logic.boolalg.Boolean.equals"]], "gateinputcount() (in module sympy.logic.boolalg)": [[90, "sympy.logic.boolalg.gateinputcount"]], "integer_to_term() (in module sympy.logic.boolalg)": [[90, "sympy.logic.boolalg.integer_to_term"]], "is_anf() (in module sympy.logic.boolalg)": [[90, "sympy.logic.boolalg.is_anf"]], "is_cnf() (in module sympy.logic.boolalg)": [[90, "sympy.logic.boolalg.is_cnf"]], "is_dnf() (in module sympy.logic.boolalg)": [[90, "sympy.logic.boolalg.is_dnf"]], "is_nnf() (in module sympy.logic.boolalg)": [[90, "sympy.logic.boolalg.is_nnf"]], "satisfiable() (in module sympy.logic.inference)": [[90, "sympy.logic.inference.satisfiable"]], "simplify_logic() (in module sympy.logic.boolalg)": [[90, "sympy.logic.boolalg.simplify_logic"]], "sympy.logic": [[90, "module-sympy.logic"]], "sympy.logic.inference": [[90, "module-sympy.logic.inference"]], "term_to_integer() (in module sympy.logic.boolalg)": [[90, "sympy.logic.boolalg.term_to_integer"]], "to_anf() (in module sympy.logic.boolalg)": [[90, "sympy.logic.boolalg.to_anf"]], "to_cnf() (in module sympy.logic.boolalg)": [[90, "sympy.logic.boolalg.to_cnf"]], "to_dnf() (in module sympy.logic.boolalg)": [[90, "sympy.logic.boolalg.to_dnf"]], "to_int_repr() (in module sympy.logic.boolalg)": [[90, "sympy.logic.boolalg.to_int_repr"]], "to_nnf() (in module sympy.logic.boolalg)": [[90, "sympy.logic.boolalg.to_nnf"]], "truth_table() (in module sympy.logic.boolalg)": [[90, "sympy.logic.boolalg.truth_table"]], "c (sympy.matrices.common.matrixcommon property)": [[91, "sympy.matrices.common.MatrixCommon.C"]], "h (sympy.matrices.common.matrixcommon property)": [[91, "sympy.matrices.common.MatrixCommon.H"]], "matrixcommon (class in sympy.matrices.common)": [[91, "sympy.matrices.common.MatrixCommon"]], "matrixkind (class in sympy.matrices.common)": [[91, "sympy.matrices.common.MatrixKind"]], "t (sympy.matrices.common.matrixcommon property)": [[91, "sympy.matrices.common.MatrixCommon.T"]], "__abs__() (sympy.matrices.common.matrixcommon method)": [[91, "sympy.matrices.common.MatrixCommon.__abs__"]], "__add__() (sympy.matrices.common.matrixcommon method)": [[91, "sympy.matrices.common.MatrixCommon.__add__"]], "__getitem__() (sympy.matrices.common.matrixcommon method)": [[91, "sympy.matrices.common.MatrixCommon.__getitem__"]], "__len__() (sympy.matrices.common.matrixcommon method)": [[91, "sympy.matrices.common.MatrixCommon.__len__"]], "__mul__() (sympy.matrices.common.matrixcommon method)": [[91, "sympy.matrices.common.MatrixCommon.__mul__"]], "__pow__() (sympy.matrices.common.matrixcommon method)": [[91, "sympy.matrices.common.MatrixCommon.__pow__"]], "__weakref__ (sympy.matrices.common.matrixcommon attribute)": [[91, "sympy.matrices.common.MatrixCommon.__weakref__"]], "adjoint() (sympy.matrices.common.matrixcommon method)": [[91, "sympy.matrices.common.MatrixCommon.adjoint"]], "applyfunc() (sympy.matrices.common.matrixcommon method)": [[91, "sympy.matrices.common.MatrixCommon.applyfunc"]], "as_real_imag() (sympy.matrices.common.matrixcommon method)": [[91, "sympy.matrices.common.MatrixCommon.as_real_imag"]], "atoms() (sympy.matrices.common.matrixcommon method)": [[91, "sympy.matrices.common.MatrixCommon.atoms"]], "col() (sympy.matrices.common.matrixcommon method)": [[91, "sympy.matrices.common.MatrixCommon.col"]], "col_del() (sympy.matrices.common.matrixcommon method)": [[91, "sympy.matrices.common.MatrixCommon.col_del"]], "col_insert() (sympy.matrices.common.matrixcommon method)": [[91, "sympy.matrices.common.MatrixCommon.col_insert"]], "col_join() (sympy.matrices.common.matrixcommon method)": [[91, "sympy.matrices.common.MatrixCommon.col_join"]], "companion() (sympy.matrices.common.matrixcommon class method)": [[91, "sympy.matrices.common.MatrixCommon.companion"]], "conjugate() (sympy.matrices.common.matrixcommon method)": [[91, "sympy.matrices.common.MatrixCommon.conjugate"]], "diag() (sympy.matrices.common.matrixcommon class method)": [[91, "sympy.matrices.common.MatrixCommon.diag"]], "diagonal() (sympy.matrices.common.matrixcommon method)": [[91, "sympy.matrices.common.MatrixCommon.diagonal"]], "evalf() (sympy.matrices.common.matrixcommon method)": [[91, "sympy.matrices.common.MatrixCommon.evalf"]], "expand() (sympy.matrices.common.matrixcommon method)": [[91, "sympy.matrices.common.MatrixCommon.expand"]], "extract() (sympy.matrices.common.matrixcommon method)": [[91, "sympy.matrices.common.MatrixCommon.extract"]], "eye() (sympy.matrices.common.matrixcommon class method)": [[91, "sympy.matrices.common.MatrixCommon.eye"]], "free_symbols (sympy.matrices.common.matrixcommon property)": [[91, "sympy.matrices.common.MatrixCommon.free_symbols"]], "get_diag_blocks() (sympy.matrices.common.matrixcommon method)": [[91, "sympy.matrices.common.MatrixCommon.get_diag_blocks"]], "has() (sympy.matrices.common.matrixcommon method)": [[91, "sympy.matrices.common.MatrixCommon.has"]], "hstack() (sympy.matrices.common.matrixcommon class method)": [[91, "sympy.matrices.common.MatrixCommon.hstack"]], "is_anti_symmetric() (sympy.matrices.common.matrixcommon method)": [[91, "sympy.matrices.common.MatrixCommon.is_anti_symmetric"]], "is_diagonal() (sympy.matrices.common.matrixcommon method)": [[91, "sympy.matrices.common.MatrixCommon.is_diagonal"]], "is_hermitian (sympy.matrices.common.matrixcommon property)": [[91, "sympy.matrices.common.MatrixCommon.is_hermitian"]], "is_lower (sympy.matrices.common.matrixcommon property)": [[91, "sympy.matrices.common.MatrixCommon.is_lower"]], "is_lower_hessenberg (sympy.matrices.common.matrixcommon property)": [[91, "sympy.matrices.common.MatrixCommon.is_lower_hessenberg"]], "is_square (sympy.matrices.common.matrixcommon property)": [[91, "sympy.matrices.common.MatrixCommon.is_square"]], "is_strongly_diagonally_dominant (sympy.matrices.common.matrixcommon property)": [[91, "sympy.matrices.common.MatrixCommon.is_strongly_diagonally_dominant"]], "is_symbolic() (sympy.matrices.common.matrixcommon method)": [[91, "sympy.matrices.common.MatrixCommon.is_symbolic"]], "is_symmetric() (sympy.matrices.common.matrixcommon method)": [[91, "sympy.matrices.common.MatrixCommon.is_symmetric"]], "is_upper (sympy.matrices.common.matrixcommon property)": [[91, "sympy.matrices.common.MatrixCommon.is_upper"]], "is_upper_hessenberg (sympy.matrices.common.matrixcommon property)": [[91, "sympy.matrices.common.MatrixCommon.is_upper_hessenberg"]], "is_weakly_diagonally_dominant (sympy.matrices.common.matrixcommon property)": [[91, "sympy.matrices.common.MatrixCommon.is_weakly_diagonally_dominant"]], "is_zero_matrix (sympy.matrices.common.matrixcommon property)": [[91, "sympy.matrices.common.MatrixCommon.is_zero_matrix"]], "jordan_block() (sympy.matrices.common.matrixcommon class method)": [[91, "sympy.matrices.common.MatrixCommon.jordan_block"]], "lower_triangular() (sympy.matrices.common.matrixcommon method)": [[91, "sympy.matrices.common.MatrixCommon.lower_triangular"]], "multiply() (sympy.matrices.common.matrixcommon method)": [[91, "sympy.matrices.common.MatrixCommon.multiply"]], "multiply_elementwise() (sympy.matrices.common.matrixcommon method)": [[91, "sympy.matrices.common.MatrixCommon.multiply_elementwise"]], "n() (sympy.matrices.common.matrixcommon method)": [[91, "sympy.matrices.common.MatrixCommon.n"]], "ones() (sympy.matrices.common.matrixcommon class method)": [[91, "sympy.matrices.common.MatrixCommon.ones"]], "permute() (sympy.matrices.common.matrixcommon method)": [[91, "sympy.matrices.common.MatrixCommon.permute"]], "permute_cols() (sympy.matrices.common.matrixcommon method)": [[91, "sympy.matrices.common.MatrixCommon.permute_cols"]], "permute_rows() (sympy.matrices.common.matrixcommon method)": [[91, "sympy.matrices.common.MatrixCommon.permute_rows"]], "pow() (sympy.matrices.common.matrixcommon method)": [[91, "sympy.matrices.common.MatrixCommon.pow"]], "refine() (sympy.matrices.common.matrixcommon method)": [[91, "sympy.matrices.common.MatrixCommon.refine"]], "replace() (sympy.matrices.common.matrixcommon method)": [[91, "sympy.matrices.common.MatrixCommon.replace"]], "reshape() (sympy.matrices.common.matrixcommon method)": [[91, "sympy.matrices.common.MatrixCommon.reshape"]], "rmultiply() (sympy.matrices.common.matrixcommon method)": [[91, "sympy.matrices.common.MatrixCommon.rmultiply"]], "rot90() (sympy.matrices.common.matrixcommon method)": [[91, "sympy.matrices.common.MatrixCommon.rot90"]], "row() (sympy.matrices.common.matrixcommon method)": [[91, "sympy.matrices.common.MatrixCommon.row"]], "row_del() (sympy.matrices.common.matrixcommon method)": [[91, "sympy.matrices.common.MatrixCommon.row_del"]], "row_insert() (sympy.matrices.common.matrixcommon method)": [[91, "sympy.matrices.common.MatrixCommon.row_insert"]], "row_join() (sympy.matrices.common.matrixcommon method)": [[91, "sympy.matrices.common.MatrixCommon.row_join"]], "shape (sympy.matrices.common.matrixcommon property)": [[91, "sympy.matrices.common.MatrixCommon.shape"]], "simplify() (sympy.matrices.common.matrixcommon method)": [[91, "sympy.matrices.common.MatrixCommon.simplify"]], "subs() (sympy.matrices.common.matrixcommon method)": [[91, "sympy.matrices.common.MatrixCommon.subs"]], "sympy.matrices.common": [[91, "module-sympy.matrices.common"]], "todod() (sympy.matrices.common.matrixcommon method)": [[91, "sympy.matrices.common.MatrixCommon.todod"]], "todok() (sympy.matrices.common.matrixcommon method)": [[91, "sympy.matrices.common.MatrixCommon.todok"]], "tolist() (sympy.matrices.common.matrixcommon method)": [[91, "sympy.matrices.common.MatrixCommon.tolist"]], "trace() (sympy.matrices.common.matrixcommon method)": [[91, "sympy.matrices.common.MatrixCommon.trace"]], "transpose() (sympy.matrices.common.matrixcommon method)": [[91, "sympy.matrices.common.MatrixCommon.transpose"]], "upper_triangular() (sympy.matrices.common.matrixcommon method)": [[91, "sympy.matrices.common.MatrixCommon.upper_triangular"]], "values() (sympy.matrices.common.matrixcommon method)": [[91, "sympy.matrices.common.MatrixCommon.values"]], "vec() (sympy.matrices.common.matrixcommon method)": [[91, "sympy.matrices.common.MatrixCommon.vec"]], "vech() (sympy.matrices.common.matrixcommon method)": [[91, "sympy.matrices.common.MatrixCommon.vech"]], "vstack() (sympy.matrices.common.matrixcommon class method)": [[91, "sympy.matrices.common.MatrixCommon.vstack"]], "wilkinson() (sympy.matrices.common.matrixcommon class method)": [[91, "sympy.matrices.common.MatrixCommon.wilkinson"]], "xreplace() (sympy.matrices.common.matrixcommon method)": [[91, "sympy.matrices.common.MatrixCommon.xreplace"]], "zeros() (sympy.matrices.common.matrixcommon class method)": [[91, "sympy.matrices.common.MatrixCommon.zeros"]], "densematrix (class in sympy.matrices.dense)": [[92, "sympy.matrices.dense.DenseMatrix"]], "ldldecomposition() (sympy.matrices.dense.densematrix method)": [[92, "sympy.matrices.dense.DenseMatrix.LDLdecomposition"]], "matrix (in module sympy.matrices.dense)": [[92, "sympy.matrices.dense.Matrix"]], "mutabledensematrix (class in sympy.matrices.dense)": [[92, "sympy.matrices.dense.MutableDenseMatrix"]], "as_immutable() (sympy.matrices.dense.densematrix method)": [[92, "sympy.matrices.dense.DenseMatrix.as_immutable"]], "as_mutable() (sympy.matrices.dense.densematrix method)": [[92, "sympy.matrices.dense.DenseMatrix.as_mutable"]], "cholesky() (sympy.matrices.dense.densematrix method)": [[92, "sympy.matrices.dense.DenseMatrix.cholesky"]], "lower_triangular_solve() (sympy.matrices.dense.densematrix method)": [[92, "sympy.matrices.dense.DenseMatrix.lower_triangular_solve"]], "simplify() (sympy.matrices.dense.mutabledensematrix method)": [[92, "sympy.matrices.dense.MutableDenseMatrix.simplify"]], "upper_triangular_solve() (sympy.matrices.dense.densematrix method)": [[92, "sympy.matrices.dense.DenseMatrix.upper_triangular_solve"]], "blockdiagmatrix (class in sympy.matrices.expressions.blockmatrix)": [[93, "sympy.matrices.expressions.blockmatrix.BlockDiagMatrix"]], "blockmatrix (class in sympy.matrices.expressions.blockmatrix)": [[93, "sympy.matrices.expressions.blockmatrix.BlockMatrix"]], "companionmatrix (class in sympy.matrices.expressions)": [[93, "sympy.matrices.expressions.CompanionMatrix"]], "functionmatrix (class in sympy.matrices.expressions)": [[93, "sympy.matrices.expressions.FunctionMatrix"]], "hadamardpower (class in sympy.matrices.expressions)": [[93, "sympy.matrices.expressions.HadamardPower"]], "hadamardproduct (class in sympy.matrices.expressions)": [[93, "sympy.matrices.expressions.HadamardProduct"]], "identity (class in sympy.matrices.expressions)": [[93, "sympy.matrices.expressions.Identity"]], "inverse (class in sympy.matrices.expressions)": [[93, "sympy.matrices.expressions.Inverse"]], "ldudecomposition() (sympy.matrices.expressions.blockmatrix.blockmatrix method)": [[93, "sympy.matrices.expressions.blockmatrix.BlockMatrix.LDUdecomposition"]], "ludecomposition() (sympy.matrices.expressions.blockmatrix.blockmatrix method)": [[93, "sympy.matrices.expressions.blockmatrix.BlockMatrix.LUdecomposition"]], "matadd (class in sympy.matrices.expressions)": [[93, "sympy.matrices.expressions.MatAdd"]], "matmul (class in sympy.matrices.expressions)": [[93, "sympy.matrices.expressions.MatMul"]], "matpow (class in sympy.matrices.expressions)": [[93, "sympy.matrices.expressions.MatPow"]], "matrixexpr (class in sympy.matrices.expressions)": [[93, "sympy.matrices.expressions.MatrixExpr"]], "matrixpermute (class in sympy.matrices.expressions)": [[93, "sympy.matrices.expressions.MatrixPermute"]], "matrixset (class in sympy.matrices.expressions)": [[93, "sympy.matrices.expressions.MatrixSet"]], "matrixsymbol (class in sympy.matrices.expressions)": [[93, "sympy.matrices.expressions.MatrixSymbol"]], "permutationmatrix (class in sympy.matrices.expressions)": [[93, "sympy.matrices.expressions.PermutationMatrix"]], "t (sympy.matrices.expressions.matrixexpr property)": [[93, "sympy.matrices.expressions.MatrixExpr.T"]], "trace (class in sympy.matrices.expressions)": [[93, "sympy.matrices.expressions.Trace"]], "transpose (class in sympy.matrices.expressions)": [[93, "sympy.matrices.expressions.Transpose"]], "udldecomposition() (sympy.matrices.expressions.blockmatrix.blockmatrix method)": [[93, "sympy.matrices.expressions.blockmatrix.BlockMatrix.UDLdecomposition"]], "zeromatrix (class in sympy.matrices.expressions)": [[93, "sympy.matrices.expressions.ZeroMatrix"]], "as_coeff_mul() (sympy.matrices.expressions.matrixexpr method)": [[93, "sympy.matrices.expressions.MatrixExpr.as_coeff_Mul"]], "as_explicit() (sympy.matrices.expressions.matrixexpr method)": [[93, "sympy.matrices.expressions.MatrixExpr.as_explicit"]], "as_mutable() (sympy.matrices.expressions.matrixexpr method)": [[93, "sympy.matrices.expressions.MatrixExpr.as_mutable"]], "block_collapse() (in module sympy.matrices.expressions.blockmatrix)": [[93, "sympy.matrices.expressions.blockmatrix.block_collapse"]], "equals() (sympy.matrices.expressions.matrixexpr method)": [[93, "sympy.matrices.expressions.MatrixExpr.equals"]], "from_index_summation() (sympy.matrices.expressions.matrixexpr static method)": [[93, "sympy.matrices.expressions.MatrixExpr.from_index_summation"]], "get_diag_blocks() (sympy.matrices.expressions.blockmatrix.blockdiagmatrix method)": [[93, "sympy.matrices.expressions.blockmatrix.BlockDiagMatrix.get_diag_blocks"]], "hadamard_product() (in module sympy.matrices.expressions)": [[93, "sympy.matrices.expressions.hadamard_product"]], "schur() (sympy.matrices.expressions.blockmatrix.blockmatrix method)": [[93, "sympy.matrices.expressions.blockmatrix.BlockMatrix.schur"]], "sympy.matrices.expressions": [[93, "module-sympy.matrices.expressions"]], "sympy.matrices.expressions.blockmatrix": [[93, "module-sympy.matrices.expressions.blockmatrix"]], "transpose() (sympy.matrices.expressions.blockmatrix.blockmatrix method)": [[93, "sympy.matrices.expressions.blockmatrix.BlockMatrix.transpose"]], "immutabledensematrix (class in sympy.matrices.immutable)": [[94, "sympy.matrices.immutable.ImmutableDenseMatrix"]], "immutablematrix (in module sympy.matrices.immutable)": [[94, "sympy.matrices.immutable.ImmutableMatrix"]], "sympy.matrices.immutable": [[94, "module-sympy.matrices.immutable"]], "sympy.matrices": [[95, "module-sympy.matrices"]], "d (sympy.matrices.matrices.matrixbase property)": [[96, "sympy.matrices.matrices.MatrixBase.D"]], "gramschmidt() (in module sympy.matrices.dense)": [[96, "sympy.matrices.dense.GramSchmidt"]], "ldldecomposition() (sympy.matrices.matrices.matrixbase method)": [[96, "sympy.matrices.matrices.MatrixBase.LDLdecomposition"]], "ldlsolve() (sympy.matrices.matrices.matrixbase method)": [[96, "sympy.matrices.matrices.MatrixBase.LDLsolve"]], "ludecomposition() (sympy.matrices.matrices.matrixbase method)": [[96, "sympy.matrices.matrices.MatrixBase.LUdecomposition"]], "ludecompositionff() (sympy.matrices.matrices.matrixbase method)": [[96, "sympy.matrices.matrices.MatrixBase.LUdecompositionFF"]], "ludecomposition_simple() (sympy.matrices.matrices.matrixbase method)": [[96, "sympy.matrices.matrices.MatrixBase.LUdecomposition_Simple"]], "lusolve() (sympy.matrices.matrices.matrixbase method)": [[96, "sympy.matrices.matrices.MatrixBase.LUsolve"]], "matrixbase (class in sympy.matrices.matrices)": [[96, "sympy.matrices.matrices.MatrixBase"]], "matrixcalculus (class in sympy.matrices.matrices)": [[96, "sympy.matrices.matrices.MatrixCalculus"]], "matrixdeterminant (class in sympy.matrices.matrices)": [[96, "sympy.matrices.matrices.MatrixDeterminant"]], "matrixeigen (class in sympy.matrices.matrices)": [[96, "sympy.matrices.matrices.MatrixEigen"]], "matrixerror (class in sympy.matrices.matrices)": [[96, "sympy.matrices.matrices.MatrixError"]], "matrixreductions (class in sympy.matrices.matrices)": [[96, "sympy.matrices.matrices.MatrixReductions"]], "matrixsubspaces (class in sympy.matrices.matrices)": [[96, "sympy.matrices.matrices.MatrixSubspaces"]], "nonsquarematrixerror (class in sympy.matrices.matrices)": [[96, "sympy.matrices.matrices.NonSquareMatrixError"]], "qrdecomposition() (sympy.matrices.matrices.matrixbase method)": [[96, "sympy.matrices.matrices.MatrixBase.QRdecomposition"]], "qrsolve() (sympy.matrices.matrices.matrixbase method)": [[96, "sympy.matrices.matrices.MatrixBase.QRsolve"]], "shapeerror (class in sympy.matrices.matrices)": [[96, "sympy.matrices.matrices.ShapeError"]], "a2idx() (in module sympy.matrices.matrices)": [[96, "sympy.matrices.matrices.a2idx"]], "add() (sympy.matrices.matrices.matrixbase method)": [[96, "sympy.matrices.matrices.MatrixBase.add"]], "adjugate() (sympy.matrices.matrices.matrixdeterminant method)": [[96, "sympy.matrices.matrices.MatrixDeterminant.adjugate"]], "analytic_func() (sympy.matrices.matrices.matrixbase method)": [[96, "sympy.matrices.matrices.MatrixBase.analytic_func"]], "bidiagonal_decomposition() (sympy.matrices.matrices.matrixeigen method)": [[96, "sympy.matrices.matrices.MatrixEigen.bidiagonal_decomposition"]], "bidiagonalize() (sympy.matrices.matrices.matrixeigen method)": [[96, "sympy.matrices.matrices.MatrixEigen.bidiagonalize"]], "casoratian() (in module sympy.matrices.dense)": [[96, "sympy.matrices.dense.casoratian"]], "charpoly() (sympy.matrices.matrices.matrixdeterminant method)": [[96, "sympy.matrices.matrices.MatrixDeterminant.charpoly"]], "cholesky() (sympy.matrices.matrices.matrixbase method)": [[96, "sympy.matrices.matrices.MatrixBase.cholesky"]], "cholesky_solve() (sympy.matrices.matrices.matrixbase method)": [[96, "sympy.matrices.matrices.MatrixBase.cholesky_solve"]], "cofactor() (sympy.matrices.matrices.matrixdeterminant method)": [[96, "sympy.matrices.matrices.MatrixDeterminant.cofactor"]], "cofactor_matrix() (sympy.matrices.matrices.matrixdeterminant method)": [[96, "sympy.matrices.matrices.MatrixDeterminant.cofactor_matrix"]], "columnspace() (sympy.matrices.matrices.matrixsubspaces method)": [[96, "sympy.matrices.matrices.MatrixSubspaces.columnspace"]], "condition_number() (sympy.matrices.matrices.matrixbase method)": [[96, "sympy.matrices.matrices.MatrixBase.condition_number"]], "connected_components() (sympy.matrices.matrices.matrixbase method)": [[96, "sympy.matrices.matrices.MatrixBase.connected_components"]], "connected_components_decomposition() (sympy.matrices.matrices.matrixbase method)": [[96, "sympy.matrices.matrices.MatrixBase.connected_components_decomposition"]], "copy() (sympy.matrices.matrices.matrixbase method)": [[96, "sympy.matrices.matrices.MatrixBase.copy"]], "cross() (sympy.matrices.matrices.matrixbase method)": [[96, "sympy.matrices.matrices.MatrixBase.cross"]], "det() (sympy.matrices.matrices.matrixdeterminant method)": [[96, "sympy.matrices.matrices.MatrixDeterminant.det"]], "diag() (in module sympy.matrices.dense)": [[96, "sympy.matrices.dense.diag"]], "diagonal_solve() (sympy.matrices.matrices.matrixbase method)": [[96, "sympy.matrices.matrices.MatrixBase.diagonal_solve"]], "diagonalize() (sympy.matrices.matrices.matrixeigen method)": [[96, "sympy.matrices.matrices.MatrixEigen.diagonalize"]], "diff() (sympy.matrices.matrices.matrixcalculus method)": [[96, "sympy.matrices.matrices.MatrixCalculus.diff"]], "dot() (sympy.matrices.matrices.matrixbase method)": [[96, "sympy.matrices.matrices.MatrixBase.dot"]], "dual() (sympy.matrices.matrices.matrixbase method)": [[96, "sympy.matrices.matrices.MatrixBase.dual"]], "echelon_form() (sympy.matrices.matrices.matrixreductions method)": [[96, "sympy.matrices.matrices.MatrixReductions.echelon_form"]], "eigenvals() (sympy.matrices.matrices.matrixeigen method)": [[96, "sympy.matrices.matrices.MatrixEigen.eigenvals"]], "eigenvects() (sympy.matrices.matrices.matrixeigen method)": [[96, "sympy.matrices.matrices.MatrixEigen.eigenvects"]], "elementary_col_op() (sympy.matrices.matrices.matrixreductions method)": [[96, "sympy.matrices.matrices.MatrixReductions.elementary_col_op"]], "elementary_row_op() (sympy.matrices.matrices.matrixreductions method)": [[96, "sympy.matrices.matrices.MatrixReductions.elementary_row_op"]], "exp() (sympy.matrices.matrices.matrixbase method)": [[96, "sympy.matrices.matrices.MatrixBase.exp"]], "eye() (in module sympy.matrices.dense)": [[96, "sympy.matrices.dense.eye"]], "gauss_jordan_solve() (sympy.matrices.matrices.matrixbase method)": [[96, "sympy.matrices.matrices.MatrixBase.gauss_jordan_solve"]], "hessian() (in module sympy.matrices.dense)": [[96, "sympy.matrices.dense.hessian"]], "integrate() (sympy.matrices.matrices.matrixcalculus method)": [[96, "sympy.matrices.matrices.MatrixCalculus.integrate"]], "inv() (sympy.matrices.matrices.matrixbase method)": [[96, "sympy.matrices.matrices.MatrixBase.inv"]], "inv_mod() (sympy.matrices.matrices.matrixbase method)": [[96, "sympy.matrices.matrices.MatrixBase.inv_mod"]], "inverse_adj() (sympy.matrices.matrices.matrixbase method)": [[96, "sympy.matrices.matrices.MatrixBase.inverse_ADJ"]], "inverse_block() (sympy.matrices.matrices.matrixbase method)": [[96, "sympy.matrices.matrices.MatrixBase.inverse_BLOCK"]], "inverse_ch() (sympy.matrices.matrices.matrixbase method)": [[96, "sympy.matrices.matrices.MatrixBase.inverse_CH"]], "inverse_ge() (sympy.matrices.matrices.matrixbase method)": [[96, "sympy.matrices.matrices.MatrixBase.inverse_GE"]], "inverse_ldl() (sympy.matrices.matrices.matrixbase method)": [[96, "sympy.matrices.matrices.MatrixBase.inverse_LDL"]], "inverse_lu() (sympy.matrices.matrices.matrixbase method)": [[96, "sympy.matrices.matrices.MatrixBase.inverse_LU"]], "inverse_qr() (sympy.matrices.matrices.matrixbase method)": [[96, "sympy.matrices.matrices.MatrixBase.inverse_QR"]], "irregular() (sympy.matrices.matrices.matrixbase class method)": [[96, "sympy.matrices.matrices.MatrixBase.irregular"]], "is_diagonalizable() (sympy.matrices.matrices.matrixeigen method)": [[96, "sympy.matrices.matrices.MatrixEigen.is_diagonalizable"]], "is_echelon (sympy.matrices.matrices.matrixreductions property)": [[96, "sympy.matrices.matrices.MatrixReductions.is_echelon"]], "is_indefinite (sympy.matrices.matrices.matrixeigen property)": [[96, "sympy.matrices.matrices.MatrixEigen.is_indefinite"]], "is_negative_definite (sympy.matrices.matrices.matrixeigen property)": [[96, "sympy.matrices.matrices.MatrixEigen.is_negative_definite"]], "is_negative_semidefinite (sympy.matrices.matrices.matrixeigen property)": [[96, "sympy.matrices.matrices.MatrixEigen.is_negative_semidefinite"]], "is_nilpotent() (sympy.matrices.matrices.matrixbase method)": [[96, "sympy.matrices.matrices.MatrixBase.is_nilpotent"]], "is_positive_definite (sympy.matrices.matrices.matrixeigen property)": [[96, "sympy.matrices.matrices.MatrixEigen.is_positive_definite"]], "is_positive_semidefinite (sympy.matrices.matrices.matrixeigen property)": [[96, "sympy.matrices.matrices.MatrixEigen.is_positive_semidefinite"]], "jacobian() (sympy.matrices.matrices.matrixcalculus method)": [[96, "sympy.matrices.matrices.MatrixCalculus.jacobian"]], "jordan_cell() (in module sympy.matrices.dense)": [[96, "sympy.matrices.dense.jordan_cell"]], "jordan_form() (sympy.matrices.matrices.matrixeigen method)": [[96, "sympy.matrices.matrices.MatrixEigen.jordan_form"]], "key2bounds() (sympy.matrices.matrices.matrixbase method)": [[96, "sympy.matrices.matrices.MatrixBase.key2bounds"]], "key2ij() (sympy.matrices.matrices.matrixbase method)": [[96, "sympy.matrices.matrices.MatrixBase.key2ij"]], "left_eigenvects() (sympy.matrices.matrices.matrixeigen method)": [[96, "sympy.matrices.matrices.MatrixEigen.left_eigenvects"]], "limit() (sympy.matrices.matrices.matrixcalculus method)": [[96, "sympy.matrices.matrices.MatrixCalculus.limit"]], "list2numpy() (in module sympy.matrices.dense)": [[96, "sympy.matrices.dense.list2numpy"]], "log() (sympy.matrices.matrices.matrixbase method)": [[96, "sympy.matrices.matrices.MatrixBase.log"]], "lower_triangular_solve() (sympy.matrices.matrices.matrixbase method)": [[96, "sympy.matrices.matrices.MatrixBase.lower_triangular_solve"]], "matrix2numpy() (in module sympy.matrices.dense)": [[96, "sympy.matrices.dense.matrix2numpy"]], "matrix_multiply_elementwise() (in module sympy.matrices.dense)": [[96, "sympy.matrices.dense.matrix_multiply_elementwise"]], "minor() (sympy.matrices.matrices.matrixdeterminant method)": [[96, "sympy.matrices.matrices.MatrixDeterminant.minor"]], "minor_submatrix() (sympy.matrices.matrices.matrixdeterminant method)": [[96, "sympy.matrices.matrices.MatrixDeterminant.minor_submatrix"]], "norm() (sympy.matrices.matrices.matrixbase method)": [[96, "sympy.matrices.matrices.MatrixBase.norm"]], "normalized() (sympy.matrices.matrices.matrixbase method)": [[96, "sympy.matrices.matrices.MatrixBase.normalized"]], "nullspace() (sympy.matrices.matrices.matrixsubspaces method)": [[96, "sympy.matrices.matrices.MatrixSubspaces.nullspace"]], "ones() (in module sympy.matrices.dense)": [[96, "sympy.matrices.dense.ones"]], "orthogonalize() (sympy.matrices.matrices.matrixsubspaces class method)": [[96, "sympy.matrices.matrices.MatrixSubspaces.orthogonalize"]], "per() (sympy.matrices.matrices.matrixdeterminant method)": [[96, "sympy.matrices.matrices.MatrixDeterminant.per"]], "pinv() (sympy.matrices.matrices.matrixbase method)": [[96, "sympy.matrices.matrices.MatrixBase.pinv"]], "pinv_solve() (sympy.matrices.matrices.matrixbase method)": [[96, "sympy.matrices.matrices.MatrixBase.pinv_solve"]], "print_nonzero() (sympy.matrices.matrices.matrixbase method)": [[96, "sympy.matrices.matrices.MatrixBase.print_nonzero"]], "project() (sympy.matrices.matrices.matrixbase method)": [[96, "sympy.matrices.matrices.MatrixBase.project"]], "randmatrix() (in module sympy.matrices.dense)": [[96, "sympy.matrices.dense.randMatrix"]], "rank() (sympy.matrices.matrices.matrixreductions method)": [[96, "sympy.matrices.matrices.MatrixReductions.rank"]], "rank_decomposition() (sympy.matrices.matrices.matrixbase method)": [[96, "sympy.matrices.matrices.MatrixBase.rank_decomposition"]], "rot_axis1() (in module sympy.matrices.dense)": [[96, "sympy.matrices.dense.rot_axis1"]], "rot_axis2() (in module sympy.matrices.dense)": [[96, "sympy.matrices.dense.rot_axis2"]], "rot_axis3() (in module sympy.matrices.dense)": [[96, "sympy.matrices.dense.rot_axis3"]], "rowspace() (sympy.matrices.matrices.matrixsubspaces method)": [[96, "sympy.matrices.matrices.MatrixSubspaces.rowspace"]], "rref() (sympy.matrices.matrices.matrixreductions method)": [[96, "sympy.matrices.matrices.MatrixReductions.rref"]], "singular_value_decomposition() (sympy.matrices.matrices.matrixbase method)": [[96, "sympy.matrices.matrices.MatrixBase.singular_value_decomposition"]], "singular_values() (sympy.matrices.matrices.matrixeigen method)": [[96, "sympy.matrices.matrices.MatrixEigen.singular_values"]], "solve() (sympy.matrices.matrices.matrixbase method)": [[96, "sympy.matrices.matrices.MatrixBase.solve"]], "solve_least_squares() (sympy.matrices.matrices.matrixbase method)": [[96, "sympy.matrices.matrices.MatrixBase.solve_least_squares"]], "strongly_connected_components() (sympy.matrices.matrices.matrixbase method)": [[96, "sympy.matrices.matrices.MatrixBase.strongly_connected_components"]], "strongly_connected_components_decomposition() (sympy.matrices.matrices.matrixbase method)": [[96, "sympy.matrices.matrices.MatrixBase.strongly_connected_components_decomposition"]], "symarray() (in module sympy.matrices.dense)": [[96, "sympy.matrices.dense.symarray"]], "sympy.matrices.matrices": [[96, "module-sympy.matrices.matrices"]], "table() (sympy.matrices.matrices.matrixbase method)": [[96, "sympy.matrices.matrices.MatrixBase.table"]], "upper_hessenberg_decomposition() (sympy.matrices.matrices.matrixbase method)": [[96, "sympy.matrices.matrices.MatrixBase.upper_hessenberg_decomposition"]], "upper_triangular_solve() (sympy.matrices.matrices.matrixbase method)": [[96, "sympy.matrices.matrices.MatrixBase.upper_triangular_solve"]], "wronskian() (in module sympy.matrices.dense)": [[96, "sympy.matrices.dense.wronskian"]], "zeros() (in module sympy.matrices.dense)": [[96, "sympy.matrices.dense.zeros"]], "hermite_normal_form() (in module sympy.matrices.normalforms)": [[97, "sympy.matrices.normalforms.hermite_normal_form"]], "smith_normal_form() (in module sympy.matrices.normalforms)": [[97, "sympy.matrices.normalforms.smith_normal_form"]], "immutablesparsematrix (class in sympy.matrices.immutable)": [[98, "sympy.matrices.immutable.ImmutableSparseMatrix"]], "mutablesparsematrix (class in sympy.matrices.sparse)": [[98, "sympy.matrices.sparse.MutableSparseMatrix"]], "sparsematrix (in module sympy.matrices.sparse)": [[98, "sympy.matrices.sparse.SparseMatrix"]], "sympy.matrices.sparse": [[98, "module-sympy.matrices.sparse"]], "_csrtodok() (in module sympy.matrices.sparsetools)": [[99, "sympy.matrices.sparsetools._csrtodok"]], "_doktocsr() (in module sympy.matrices.sparsetools)": [[99, "sympy.matrices.sparsetools._doktocsr"]], "banded() (in module sympy.matrices.sparsetools)": [[99, "sympy.matrices.sparsetools.banded"]], "sympy.matrices.sparsetools": [[99, "module-sympy.matrices.sparsetools"]], "sieve (class in sympy.ntheory.generate)": [[100, "sympy.ntheory.generate.Sieve"]], "abundance() (in module sympy.ntheory.factor_)": [[100, "sympy.ntheory.factor_.abundance"]], "antidivisor_count() (in module sympy.ntheory.factor_)": [[100, "sympy.ntheory.factor_.antidivisor_count"]], "antidivisors() (in module sympy.ntheory.factor_)": [[100, "sympy.ntheory.factor_.antidivisors"]], "binomial_coefficients() (in module sympy.ntheory.multinomial)": [[100, "sympy.ntheory.multinomial.binomial_coefficients"]], "binomial_coefficients_list() (in module sympy.ntheory.multinomial)": [[100, "sympy.ntheory.multinomial.binomial_coefficients_list"]], "composite() (in module sympy.ntheory.generate)": [[100, "sympy.ntheory.generate.composite"]], "compositepi() (in module sympy.ntheory.generate)": [[100, "sympy.ntheory.generate.compositepi"]], "continued_fraction() (in module sympy.ntheory.continued_fraction)": [[100, "sympy.ntheory.continued_fraction.continued_fraction"]], "continued_fraction_convergents() (in module sympy.ntheory.continued_fraction)": [[100, "sympy.ntheory.continued_fraction.continued_fraction_convergents"]], "continued_fraction_iterator() (in module sympy.ntheory.continued_fraction)": [[100, "sympy.ntheory.continued_fraction.continued_fraction_iterator"]], "continued_fraction_periodic() (in module sympy.ntheory.continued_fraction)": [[100, "sympy.ntheory.continued_fraction.continued_fraction_periodic"]], "continued_fraction_reduce() (in module sympy.ntheory.continued_fraction)": [[100, "sympy.ntheory.continued_fraction.continued_fraction_reduce"]], "core() (in module sympy.ntheory.factor_)": [[100, "sympy.ntheory.factor_.core"]], "count_digits() (in module sympy.ntheory.digits)": [[100, "sympy.ntheory.digits.count_digits"]], "crt() (in module sympy.ntheory.modular)": [[100, "sympy.ntheory.modular.crt"]], "crt1() (in module sympy.ntheory.modular)": [[100, "sympy.ntheory.modular.crt1"]], "crt2() (in module sympy.ntheory.modular)": [[100, "sympy.ntheory.modular.crt2"]], "cycle_length() (in module sympy.ntheory.generate)": [[100, "sympy.ntheory.generate.cycle_length"]], "digits() (in module sympy.ntheory.digits)": [[100, "sympy.ntheory.digits.digits"]], "digits() (in module sympy.ntheory.factor_)": [[100, "sympy.ntheory.factor_.digits"]], "discrete_log() (in module sympy.ntheory.residue_ntheory)": [[100, "sympy.ntheory.residue_ntheory.discrete_log"]], "divisor_count() (in module sympy.ntheory.factor_)": [[100, "sympy.ntheory.factor_.divisor_count"]], "divisor_sigma (class in sympy.ntheory.factor_)": [[100, "sympy.ntheory.factor_.divisor_sigma"]], "divisors() (in module sympy.ntheory.factor_)": [[100, "sympy.ntheory.factor_.divisors"]], "ecm() (in module sympy.ntheory.ecm)": [[100, "sympy.ntheory.ecm.ecm"]], "egyptian_fraction() (in module sympy.ntheory.egyptian_fraction)": [[100, "sympy.ntheory.egyptian_fraction.egyptian_fraction"]], "extend() (sympy.ntheory.generate.sieve method)": [[100, "sympy.ntheory.generate.Sieve.extend"]], "extend_to_no() (sympy.ntheory.generate.sieve method)": [[100, "sympy.ntheory.generate.Sieve.extend_to_no"]], "factorint() (in module sympy.ntheory.factor_)": [[100, "sympy.ntheory.factor_.factorint"]], "factorrat() (in module sympy.ntheory.factor_)": [[100, "sympy.ntheory.factor_.factorrat"]], "is_abundant() (in module sympy.ntheory.factor_)": [[100, "sympy.ntheory.factor_.is_abundant"]], "is_amicable() (in module sympy.ntheory.factor_)": [[100, "sympy.ntheory.factor_.is_amicable"]], "is_deficient() (in module sympy.ntheory.factor_)": [[100, "sympy.ntheory.factor_.is_deficient"]], "is_euler_pseudoprime() (in module sympy.ntheory.primetest)": [[100, "sympy.ntheory.primetest.is_euler_pseudoprime"]], "is_extra_strong_lucas_prp() (in module sympy.ntheory.primetest)": [[100, "sympy.ntheory.primetest.is_extra_strong_lucas_prp"]], "is_gaussian_prime() (in module sympy.ntheory.primetest)": [[100, "sympy.ntheory.primetest.is_gaussian_prime"]], "is_lucas_prp() (in module sympy.ntheory.primetest)": [[100, "sympy.ntheory.primetest.is_lucas_prp"]], "is_mersenne_prime() (in module sympy.ntheory.factor_)": [[100, "sympy.ntheory.factor_.is_mersenne_prime"]], "is_nthpow_residue() (in module sympy.ntheory.residue_ntheory)": [[100, "sympy.ntheory.residue_ntheory.is_nthpow_residue"]], "is_palindromic() (in module sympy.ntheory.digits)": [[100, "sympy.ntheory.digits.is_palindromic"]], "is_perfect() (in module sympy.ntheory.factor_)": [[100, "sympy.ntheory.factor_.is_perfect"]], "is_primitive_root() (in module sympy.ntheory.residue_ntheory)": [[100, "sympy.ntheory.residue_ntheory.is_primitive_root"]], "is_quad_residue() (in module sympy.ntheory.residue_ntheory)": [[100, "sympy.ntheory.residue_ntheory.is_quad_residue"]], "is_square() (in module sympy.ntheory.primetest)": [[100, "sympy.ntheory.primetest.is_square"]], "is_strong_lucas_prp() (in module sympy.ntheory.primetest)": [[100, "sympy.ntheory.primetest.is_strong_lucas_prp"]], "isprime() (in module sympy.ntheory.primetest)": [[100, "sympy.ntheory.primetest.isprime"]], "jacobi_symbol() (in module sympy.ntheory.residue_ntheory)": [[100, "sympy.ntheory.residue_ntheory.jacobi_symbol"]], "legendre_symbol() (in module sympy.ntheory.residue_ntheory)": [[100, "sympy.ntheory.residue_ntheory.legendre_symbol"]], "mersenne_prime_exponent() (in module sympy.ntheory.factor_)": [[100, "sympy.ntheory.factor_.mersenne_prime_exponent"]], "mobius (class in sympy.ntheory)": [[100, "sympy.ntheory.mobius"]], "mobiusrange() (sympy.ntheory.generate.sieve method)": [[100, "sympy.ntheory.generate.Sieve.mobiusrange"]], "mr() (in module sympy.ntheory.primetest)": [[100, "sympy.ntheory.primetest.mr"]], "multinomial_coefficients() (in module sympy.ntheory.multinomial)": [[100, "sympy.ntheory.multinomial.multinomial_coefficients"]], "multinomial_coefficients_iterator() (in module sympy.ntheory.multinomial)": [[100, "sympy.ntheory.multinomial.multinomial_coefficients_iterator"]], "multiplicity() (in module sympy.ntheory.factor_)": [[100, "sympy.ntheory.factor_.multiplicity"]], "n_order() (in module sympy.ntheory.residue_ntheory)": [[100, "sympy.ntheory.residue_ntheory.n_order"]], "nextprime() (in module sympy.ntheory.generate)": [[100, "sympy.ntheory.generate.nextprime"]], "npartitions() (in module sympy.ntheory.partitions_)": [[100, "sympy.ntheory.partitions_.npartitions"]], "nthroot_mod() (in module sympy.ntheory.residue_ntheory)": [[100, "sympy.ntheory.residue_ntheory.nthroot_mod"]], "perfect_power() (in module sympy.ntheory.factor_)": [[100, "sympy.ntheory.factor_.perfect_power"]], "pi_hex_digits() (in module sympy.ntheory.bbp_pi)": [[100, "sympy.ntheory.bbp_pi.pi_hex_digits"]], "pollard_pm1() (in module sympy.ntheory.factor_)": [[100, "sympy.ntheory.factor_.pollard_pm1"]], "pollard_rho() (in module sympy.ntheory.factor_)": [[100, "sympy.ntheory.factor_.pollard_rho"]], "prevprime() (in module sympy.ntheory.generate)": [[100, "sympy.ntheory.generate.prevprime"]], "prime() (in module sympy.ntheory.generate)": [[100, "sympy.ntheory.generate.prime"]], "primefactors() (in module sympy.ntheory.factor_)": [[100, "sympy.ntheory.factor_.primefactors"]], "primenu (class in sympy.ntheory.factor_)": [[100, "sympy.ntheory.factor_.primenu"]], "primeomega (class in sympy.ntheory.factor_)": [[100, "sympy.ntheory.factor_.primeomega"]], "primepi() (in module sympy.ntheory.generate)": [[100, "sympy.ntheory.generate.primepi"]], "primerange() (in module sympy.ntheory.generate)": [[100, "sympy.ntheory.generate.primerange"]], "primerange() (sympy.ntheory.generate.sieve method)": [[100, "sympy.ntheory.generate.Sieve.primerange"]], "primitive_root() (in module sympy.ntheory.residue_ntheory)": [[100, "sympy.ntheory.residue_ntheory.primitive_root"]], "primorial() (in module sympy.ntheory.generate)": [[100, "sympy.ntheory.generate.primorial"]], "proper_divisor_count() (in module sympy.ntheory.factor_)": [[100, "sympy.ntheory.factor_.proper_divisor_count"]], "proper_divisors() (in module sympy.ntheory.factor_)": [[100, "sympy.ntheory.factor_.proper_divisors"]], "qs() (in module sympy.ntheory.qs)": [[100, "sympy.ntheory.qs.qs"]], "quadratic_residues() (in module sympy.ntheory.residue_ntheory)": [[100, "sympy.ntheory.residue_ntheory.quadratic_residues"]], "randprime() (in module sympy.ntheory.generate)": [[100, "sympy.ntheory.generate.randprime"]], "reduced_totient (class in sympy.ntheory.factor_)": [[100, "sympy.ntheory.factor_.reduced_totient"]], "search() (sympy.ntheory.generate.sieve method)": [[100, "sympy.ntheory.generate.Sieve.search"]], "smoothness() (in module sympy.ntheory.factor_)": [[100, "sympy.ntheory.factor_.smoothness"]], "smoothness_p() (in module sympy.ntheory.factor_)": [[100, "sympy.ntheory.factor_.smoothness_p"]], "solve_congruence() (in module sympy.ntheory.modular)": [[100, "sympy.ntheory.modular.solve_congruence"]], "sqrt_mod() (in module sympy.ntheory.residue_ntheory)": [[100, "sympy.ntheory.residue_ntheory.sqrt_mod"]], "sqrt_mod_iter() (in module sympy.ntheory.residue_ntheory)": [[100, "sympy.ntheory.residue_ntheory.sqrt_mod_iter"]], "symmetric_residue() (in module sympy.ntheory.modular)": [[100, "sympy.ntheory.modular.symmetric_residue"]], "sympy.ntheory.bbp_pi": [[100, "module-sympy.ntheory.bbp_pi"]], "sympy.ntheory.continued_fraction": [[100, "module-sympy.ntheory.continued_fraction"]], "sympy.ntheory.digits": [[100, "module-sympy.ntheory.digits"]], "sympy.ntheory.ecm": [[100, "module-sympy.ntheory.ecm"]], "sympy.ntheory.egyptian_fraction": [[100, "module-sympy.ntheory.egyptian_fraction"]], "sympy.ntheory.factor_": [[100, "module-sympy.ntheory.factor_"]], "sympy.ntheory.generate": [[100, "module-sympy.ntheory.generate"]], "sympy.ntheory.modular": [[100, "module-sympy.ntheory.modular"]], "sympy.ntheory.multinomial": [[100, "module-sympy.ntheory.multinomial"]], "sympy.ntheory.partitions_": [[100, "module-sympy.ntheory.partitions_"]], "sympy.ntheory.primetest": [[100, "module-sympy.ntheory.primetest"]], "sympy.ntheory.qs": [[100, "module-sympy.ntheory.qs"]], "sympy.ntheory.residue_ntheory": [[100, "module-sympy.ntheory.residue_ntheory"]], "totient (class in sympy.ntheory.factor_)": [[100, "sympy.ntheory.factor_.totient"]], "totientrange() (sympy.ntheory.generate.sieve method)": [[100, "sympy.ntheory.generate.Sieve.totientrange"]], "trailing() (in module sympy.ntheory.factor_)": [[100, "sympy.ntheory.factor_.trailing"]], "udivisor_count() (in module sympy.ntheory.factor_)": [[100, "sympy.ntheory.factor_.udivisor_count"]], "udivisor_sigma (class in sympy.ntheory.factor_)": [[100, "sympy.ntheory.factor_.udivisor_sigma"]], "udivisors() (in module sympy.ntheory.factor_)": [[100, "sympy.ntheory.factor_.udivisors"]], "latexparsingerror (class in sympy.parsing.latex)": [[102, "sympy.parsing.latex.LaTeXParsingError"]], "sympyexpression (class in sympy.parsing.sym_expr)": [[102, "sympy.parsing.sym_expr.SymPyExpression"]], "auto_number() (in module sympy.parsing.sympy_parser)": [[102, "sympy.parsing.sympy_parser.auto_number"]], "auto_symbol() (in module sympy.parsing.sympy_parser)": [[102, "sympy.parsing.sympy_parser.auto_symbol"]], "convert_to_c() (sympy.parsing.sym_expr.sympyexpression method)": [[102, "sympy.parsing.sym_expr.SymPyExpression.convert_to_c"]], "convert_to_expr() (sympy.parsing.sym_expr.sympyexpression method)": [[102, "sympy.parsing.sym_expr.SymPyExpression.convert_to_expr"]], "convert_to_fortran() (sympy.parsing.sym_expr.sympyexpression method)": [[102, "sympy.parsing.sym_expr.SymPyExpression.convert_to_fortran"]], "convert_to_python() (sympy.parsing.sym_expr.sympyexpression method)": [[102, "sympy.parsing.sym_expr.SymPyExpression.convert_to_python"]], "convert_xor() (in module sympy.parsing.sympy_parser)": [[102, "sympy.parsing.sympy_parser.convert_xor"]], "eval_expr() (in module sympy.parsing.sympy_parser)": [[102, "sympy.parsing.sympy_parser.eval_expr"]], "factorial_notation() (in module sympy.parsing.sympy_parser)": [[102, "sympy.parsing.sympy_parser.factorial_notation"]], "function_exponentiation() (in module sympy.parsing.sympy_parser)": [[102, "sympy.parsing.sympy_parser.function_exponentiation"]], "implicit_application() (in module sympy.parsing.sympy_parser)": [[102, "sympy.parsing.sympy_parser.implicit_application"]], "implicit_multiplication() (in module sympy.parsing.sympy_parser)": [[102, "sympy.parsing.sympy_parser.implicit_multiplication"]], "implicit_multiplication_application() (in module sympy.parsing.sympy_parser)": [[102, "sympy.parsing.sympy_parser.implicit_multiplication_application"]], "lambda_notation() (in module sympy.parsing.sympy_parser)": [[102, "sympy.parsing.sympy_parser.lambda_notation"]], "parse_expr() (in module sympy.parsing.sympy_parser)": [[102, "sympy.parsing.sympy_parser.parse_expr"]], "parse_latex() (in module sympy.parsing.latex)": [[102, "sympy.parsing.latex.parse_latex"]], "parse_mathematica() (in module sympy.parsing.mathematica)": [[102, "sympy.parsing.mathematica.parse_mathematica"]], "parse_maxima() (in module sympy.parsing.maxima)": [[102, "sympy.parsing.maxima.parse_maxima"]], "rationalize() (in module sympy.parsing.sympy_parser)": [[102, "sympy.parsing.sympy_parser.rationalize"]], "repeated_decimals() (in module sympy.parsing.sympy_parser)": [[102, "sympy.parsing.sympy_parser.repeated_decimals"]], "return_expr() (sympy.parsing.sym_expr.sympyexpression method)": [[102, "sympy.parsing.sym_expr.SymPyExpression.return_expr"]], "split_symbols() (in module sympy.parsing.sympy_parser)": [[102, "sympy.parsing.sympy_parser.split_symbols"]], "split_symbols_custom() (in module sympy.parsing.sympy_parser)": [[102, "sympy.parsing.sympy_parser.split_symbols_custom"]], "standard_transformations (in module sympy.parsing.sympy_parser)": [[102, "sympy.parsing.sympy_parser.standard_transformations"]], "stringify_expr() (in module sympy.parsing.sympy_parser)": [[102, "sympy.parsing.sympy_parser.stringify_expr"]], "sympy.parsing": [[102, "module-sympy.parsing"]], "sympy.parsing.sym_expr": [[102, "module-sympy.parsing.sym_expr"]], "beam (class in sympy.physics.continuum_mechanics.beam)": [[103, "sympy.physics.continuum_mechanics.beam.Beam"]], "beam3d (class in sympy.physics.continuum_mechanics.beam)": [[103, "sympy.physics.continuum_mechanics.beam.Beam3D"]], "angular_deflection() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[103, "sympy.physics.continuum_mechanics.beam.Beam3D.angular_deflection"]], "applied_loads (sympy.physics.continuum_mechanics.beam.beam property)": [[103, "sympy.physics.continuum_mechanics.beam.Beam.applied_loads"]], "apply_load() (sympy.physics.continuum_mechanics.beam.beam method)": [[103, "sympy.physics.continuum_mechanics.beam.Beam.apply_load"]], "apply_load() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[103, "sympy.physics.continuum_mechanics.beam.Beam3D.apply_load"]], "apply_moment_load() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[103, "sympy.physics.continuum_mechanics.beam.Beam3D.apply_moment_load"]], "apply_support() (sympy.physics.continuum_mechanics.beam.beam method)": [[103, "sympy.physics.continuum_mechanics.beam.Beam.apply_support"]], "area (sympy.physics.continuum_mechanics.beam.beam property)": [[103, "sympy.physics.continuum_mechanics.beam.Beam.area"]], "area (sympy.physics.continuum_mechanics.beam.beam3d property)": [[103, "sympy.physics.continuum_mechanics.beam.Beam3D.area"]], "axial_force() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[103, "sympy.physics.continuum_mechanics.beam.Beam3D.axial_force"]], "axial_stress() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[103, "sympy.physics.continuum_mechanics.beam.Beam3D.axial_stress"]], "bending_moment() (sympy.physics.continuum_mechanics.beam.beam method)": [[103, "sympy.physics.continuum_mechanics.beam.Beam.bending_moment"]], "bending_moment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[103, "sympy.physics.continuum_mechanics.beam.Beam3D.bending_moment"]], "boundary_conditions (sympy.physics.continuum_mechanics.beam.beam property)": [[103, "sympy.physics.continuum_mechanics.beam.Beam.boundary_conditions"]], "boundary_conditions (sympy.physics.continuum_mechanics.beam.beam3d property)": [[103, "sympy.physics.continuum_mechanics.beam.Beam3D.boundary_conditions"]], "cross_section (sympy.physics.continuum_mechanics.beam.beam property)": [[103, "sympy.physics.continuum_mechanics.beam.Beam.cross_section"]], "deflection() (sympy.physics.continuum_mechanics.beam.beam method)": [[103, "sympy.physics.continuum_mechanics.beam.Beam.deflection"]], "deflection() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[103, "sympy.physics.continuum_mechanics.beam.Beam3D.deflection"]], "draw() (sympy.physics.continuum_mechanics.beam.beam method)": [[103, "sympy.physics.continuum_mechanics.beam.Beam.draw"]], "elastic_modulus (sympy.physics.continuum_mechanics.beam.beam property)": [[103, "sympy.physics.continuum_mechanics.beam.Beam.elastic_modulus"]], "ild_moment (sympy.physics.continuum_mechanics.beam.beam property)": [[103, "sympy.physics.continuum_mechanics.beam.Beam.ild_moment"]], "ild_reactions (sympy.physics.continuum_mechanics.beam.beam property)": [[103, "sympy.physics.continuum_mechanics.beam.Beam.ild_reactions"]], "ild_shear (sympy.physics.continuum_mechanics.beam.beam property)": [[103, "sympy.physics.continuum_mechanics.beam.Beam.ild_shear"]], "join() (sympy.physics.continuum_mechanics.beam.beam method)": [[103, "sympy.physics.continuum_mechanics.beam.Beam.join"]], "length (sympy.physics.continuum_mechanics.beam.beam property)": [[103, "sympy.physics.continuum_mechanics.beam.Beam.length"]], "load (sympy.physics.continuum_mechanics.beam.beam property)": [[103, "sympy.physics.continuum_mechanics.beam.Beam.load"]], "load_vector (sympy.physics.continuum_mechanics.beam.beam3d property)": [[103, "sympy.physics.continuum_mechanics.beam.Beam3D.load_vector"]], "max_bending_moment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[103, "sympy.physics.continuum_mechanics.beam.Beam3D.max_bending_moment"]], "max_bmoment() (sympy.physics.continuum_mechanics.beam.beam method)": [[103, "sympy.physics.continuum_mechanics.beam.Beam.max_bmoment"]], "max_bmoment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[103, "sympy.physics.continuum_mechanics.beam.Beam3D.max_bmoment"]], "max_deflection() (sympy.physics.continuum_mechanics.beam.beam method)": [[103, "sympy.physics.continuum_mechanics.beam.Beam.max_deflection"]], "max_deflection() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[103, "sympy.physics.continuum_mechanics.beam.Beam3D.max_deflection"]], "max_shear_force() (sympy.physics.continuum_mechanics.beam.beam method)": [[103, "sympy.physics.continuum_mechanics.beam.Beam.max_shear_force"]], "max_shear_force() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[103, "sympy.physics.continuum_mechanics.beam.Beam3D.max_shear_force"]], "moment_load_vector (sympy.physics.continuum_mechanics.beam.beam3d property)": [[103, "sympy.physics.continuum_mechanics.beam.Beam3D.moment_load_vector"]], "plot_bending_moment() (sympy.physics.continuum_mechanics.beam.beam method)": [[103, "sympy.physics.continuum_mechanics.beam.Beam.plot_bending_moment"]], "plot_bending_moment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[103, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_bending_moment"]], "plot_deflection() (sympy.physics.continuum_mechanics.beam.beam method)": [[103, "sympy.physics.continuum_mechanics.beam.Beam.plot_deflection"]], "plot_deflection() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[103, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_deflection"]], "plot_ild_moment() (sympy.physics.continuum_mechanics.beam.beam method)": [[103, "sympy.physics.continuum_mechanics.beam.Beam.plot_ild_moment"]], "plot_ild_reactions() (sympy.physics.continuum_mechanics.beam.beam method)": [[103, "sympy.physics.continuum_mechanics.beam.Beam.plot_ild_reactions"]], "plot_ild_shear() (sympy.physics.continuum_mechanics.beam.beam method)": [[103, "sympy.physics.continuum_mechanics.beam.Beam.plot_ild_shear"]], "plot_loading_results() (sympy.physics.continuum_mechanics.beam.beam method)": [[103, "sympy.physics.continuum_mechanics.beam.Beam.plot_loading_results"]], "plot_loading_results() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[103, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_loading_results"]], "plot_shear_force() (sympy.physics.continuum_mechanics.beam.beam method)": [[103, "sympy.physics.continuum_mechanics.beam.Beam.plot_shear_force"]], "plot_shear_force() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[103, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_shear_force"]], "plot_shear_stress() (sympy.physics.continuum_mechanics.beam.beam method)": [[103, "sympy.physics.continuum_mechanics.beam.Beam.plot_shear_stress"]], "plot_shear_stress() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[103, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_shear_stress"]], "plot_slope() (sympy.physics.continuum_mechanics.beam.beam method)": [[103, "sympy.physics.continuum_mechanics.beam.Beam.plot_slope"]], "plot_slope() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[103, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_slope"]], "point_cflexure() (sympy.physics.continuum_mechanics.beam.beam method)": [[103, "sympy.physics.continuum_mechanics.beam.Beam.point_cflexure"]], "polar_moment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[103, "sympy.physics.continuum_mechanics.beam.Beam3D.polar_moment"]], "reaction_loads (sympy.physics.continuum_mechanics.beam.beam property)": [[103, "sympy.physics.continuum_mechanics.beam.Beam.reaction_loads"]], "remove_load() (sympy.physics.continuum_mechanics.beam.beam method)": [[103, "sympy.physics.continuum_mechanics.beam.Beam.remove_load"]], "second_moment (sympy.physics.continuum_mechanics.beam.beam property)": [[103, "sympy.physics.continuum_mechanics.beam.Beam.second_moment"]], "second_moment (sympy.physics.continuum_mechanics.beam.beam3d property)": [[103, "sympy.physics.continuum_mechanics.beam.Beam3D.second_moment"]], "shear_force() (sympy.physics.continuum_mechanics.beam.beam method)": [[103, "sympy.physics.continuum_mechanics.beam.Beam.shear_force"]], "shear_force() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[103, "sympy.physics.continuum_mechanics.beam.Beam3D.shear_force"]], "shear_modulus (sympy.physics.continuum_mechanics.beam.beam3d property)": [[103, "sympy.physics.continuum_mechanics.beam.Beam3D.shear_modulus"]], "shear_stress() (sympy.physics.continuum_mechanics.beam.beam method)": [[103, "sympy.physics.continuum_mechanics.beam.Beam.shear_stress"]], "shear_stress() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[103, "sympy.physics.continuum_mechanics.beam.Beam3D.shear_stress"]], "slope() (sympy.physics.continuum_mechanics.beam.beam method)": [[103, "sympy.physics.continuum_mechanics.beam.Beam.slope"]], "slope() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[103, "sympy.physics.continuum_mechanics.beam.Beam3D.slope"]], "solve_for_ild_moment() (sympy.physics.continuum_mechanics.beam.beam method)": [[103, "sympy.physics.continuum_mechanics.beam.Beam.solve_for_ild_moment"]], "solve_for_ild_reactions() (sympy.physics.continuum_mechanics.beam.beam method)": [[103, "sympy.physics.continuum_mechanics.beam.Beam.solve_for_ild_reactions"]], "solve_for_ild_shear() (sympy.physics.continuum_mechanics.beam.beam method)": [[103, "sympy.physics.continuum_mechanics.beam.Beam.solve_for_ild_shear"]], "solve_for_reaction_loads() (sympy.physics.continuum_mechanics.beam.beam method)": [[103, "sympy.physics.continuum_mechanics.beam.Beam.solve_for_reaction_loads"]], "solve_for_reaction_loads() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[103, "sympy.physics.continuum_mechanics.beam.Beam3D.solve_for_reaction_loads"]], "solve_for_torsion() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[103, "sympy.physics.continuum_mechanics.beam.Beam3D.solve_for_torsion"]], "sympy.physics.continuum_mechanics.beam": [[103, "module-sympy.physics.continuum_mechanics.beam"]], "torsional_moment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[103, "sympy.physics.continuum_mechanics.beam.Beam3D.torsional_moment"]], "variable (sympy.physics.continuum_mechanics.beam.beam property)": [[103, "sympy.physics.continuum_mechanics.beam.Beam.variable"]], "truss (class in sympy.physics.continuum_mechanics.truss)": [[106, "sympy.physics.continuum_mechanics.truss.Truss"]], "add_member() (sympy.physics.continuum_mechanics.truss.truss method)": [[106, "sympy.physics.continuum_mechanics.truss.Truss.add_member"]], "add_node() (sympy.physics.continuum_mechanics.truss.truss method)": [[106, "sympy.physics.continuum_mechanics.truss.Truss.add_node"]], "apply_load() (sympy.physics.continuum_mechanics.truss.truss method)": [[106, "sympy.physics.continuum_mechanics.truss.Truss.apply_load"]], "apply_support() (sympy.physics.continuum_mechanics.truss.truss method)": [[106, "sympy.physics.continuum_mechanics.truss.Truss.apply_support"]], "change_member_label() (sympy.physics.continuum_mechanics.truss.truss method)": [[106, "sympy.physics.continuum_mechanics.truss.Truss.change_member_label"]], "change_node_label() (sympy.physics.continuum_mechanics.truss.truss method)": [[106, "sympy.physics.continuum_mechanics.truss.Truss.change_node_label"]], "internal_forces (sympy.physics.continuum_mechanics.truss.truss property)": [[106, "sympy.physics.continuum_mechanics.truss.Truss.internal_forces"]], "loads (sympy.physics.continuum_mechanics.truss.truss property)": [[106, "sympy.physics.continuum_mechanics.truss.Truss.loads"]], "member_labels (sympy.physics.continuum_mechanics.truss.truss property)": [[106, "sympy.physics.continuum_mechanics.truss.Truss.member_labels"]], "members (sympy.physics.continuum_mechanics.truss.truss property)": [[106, "sympy.physics.continuum_mechanics.truss.Truss.members"]], "node_labels (sympy.physics.continuum_mechanics.truss.truss property)": [[106, "sympy.physics.continuum_mechanics.truss.Truss.node_labels"]], "node_positions (sympy.physics.continuum_mechanics.truss.truss property)": [[106, "sympy.physics.continuum_mechanics.truss.Truss.node_positions"]], "nodes (sympy.physics.continuum_mechanics.truss.truss property)": [[106, "sympy.physics.continuum_mechanics.truss.Truss.nodes"]], "reaction_loads (sympy.physics.continuum_mechanics.truss.truss property)": [[106, "sympy.physics.continuum_mechanics.truss.Truss.reaction_loads"]], "remove_load() (sympy.physics.continuum_mechanics.truss.truss method)": [[106, "sympy.physics.continuum_mechanics.truss.Truss.remove_load"]], "remove_member() (sympy.physics.continuum_mechanics.truss.truss method)": [[106, "sympy.physics.continuum_mechanics.truss.Truss.remove_member"]], "remove_node() (sympy.physics.continuum_mechanics.truss.truss method)": [[106, "sympy.physics.continuum_mechanics.truss.Truss.remove_node"]], "remove_support() (sympy.physics.continuum_mechanics.truss.truss method)": [[106, "sympy.physics.continuum_mechanics.truss.Truss.remove_support"]], "solve() (sympy.physics.continuum_mechanics.truss.truss method)": [[106, "sympy.physics.continuum_mechanics.truss.Truss.solve"]], "supports (sympy.physics.continuum_mechanics.truss.truss property)": [[106, "sympy.physics.continuum_mechanics.truss.Truss.supports"]], "sympy.physics.continuum_mechanics.truss": [[106, "module-sympy.physics.continuum_mechanics.truss"]], "bode_magnitude_numerical_data() (sympy.physics.control.control_plots method)": [[108, "sympy.physics.control.control_plots.bode_magnitude_numerical_data"]], "bode_magnitude_plot() (sympy.physics.control.control_plots method)": [[108, "sympy.physics.control.control_plots.bode_magnitude_plot"]], "bode_phase_numerical_data() (sympy.physics.control.control_plots method)": [[108, "sympy.physics.control.control_plots.bode_phase_numerical_data"]], "bode_phase_plot() (sympy.physics.control.control_plots method)": [[108, "sympy.physics.control.control_plots.bode_phase_plot"]], "bode_plot() (sympy.physics.control.control_plots method)": [[108, "sympy.physics.control.control_plots.bode_plot"]], "impulse_response_numerical_data() (sympy.physics.control.control_plots method)": [[108, "sympy.physics.control.control_plots.impulse_response_numerical_data"]], "impulse_response_plot() (sympy.physics.control.control_plots method)": [[108, "sympy.physics.control.control_plots.impulse_response_plot"]], "pole_zero_numerical_data() (sympy.physics.control.control_plots method)": [[108, "sympy.physics.control.control_plots.pole_zero_numerical_data"]], "pole_zero_plot() (sympy.physics.control.control_plots method)": [[108, "sympy.physics.control.control_plots.pole_zero_plot"]], "ramp_response_numerical_data() (sympy.physics.control.control_plots method)": [[108, "sympy.physics.control.control_plots.ramp_response_numerical_data"]], "ramp_response_plot() (sympy.physics.control.control_plots method)": [[108, "sympy.physics.control.control_plots.ramp_response_plot"]], "step_response_numerical_data() (sympy.physics.control.control_plots method)": [[108, "sympy.physics.control.control_plots.step_response_numerical_data"]], "step_response_plot() (sympy.physics.control.control_plots method)": [[108, "sympy.physics.control.control_plots.step_response_plot"]], "sympy.physics.control": [[109, "module-sympy.physics.control"]], "feedback (class in sympy.physics.control.lti)": [[110, "sympy.physics.control.lti.Feedback"]], "mimofeedback (class in sympy.physics.control.lti)": [[110, "sympy.physics.control.lti.MIMOFeedback"]], "mimoparallel (class in sympy.physics.control.lti)": [[110, "sympy.physics.control.lti.MIMOParallel"]], "mimoseries (class in sympy.physics.control.lti)": [[110, "sympy.physics.control.lti.MIMOSeries"]], "parallel (class in sympy.physics.control.lti)": [[110, "sympy.physics.control.lti.Parallel"]], "series (class in sympy.physics.control.lti)": [[110, "sympy.physics.control.lti.Series"]], "transferfunction (class in sympy.physics.control.lti)": [[110, "sympy.physics.control.lti.TransferFunction"]], "transferfunctionmatrix (class in sympy.physics.control.lti)": [[110, "sympy.physics.control.lti.TransferFunctionMatrix"]], "dc_gain() (sympy.physics.control.lti.transferfunction method)": [[110, "sympy.physics.control.lti.TransferFunction.dc_gain"]], "den (sympy.physics.control.lti.transferfunction property)": [[110, "sympy.physics.control.lti.TransferFunction.den"]], "doit() (sympy.physics.control.lti.feedback method)": [[110, "sympy.physics.control.lti.Feedback.doit"]], "doit() (sympy.physics.control.lti.mimofeedback method)": [[110, "sympy.physics.control.lti.MIMOFeedback.doit"]], "doit() (sympy.physics.control.lti.mimoparallel method)": [[110, "sympy.physics.control.lti.MIMOParallel.doit"]], "doit() (sympy.physics.control.lti.mimoseries method)": [[110, "sympy.physics.control.lti.MIMOSeries.doit"]], "doit() (sympy.physics.control.lti.parallel method)": [[110, "sympy.physics.control.lti.Parallel.doit"]], "doit() (sympy.physics.control.lti.series method)": [[110, "sympy.physics.control.lti.Series.doit"]], "elem_poles() (sympy.physics.control.lti.transferfunctionmatrix method)": [[110, "sympy.physics.control.lti.TransferFunctionMatrix.elem_poles"]], "elem_zeros() (sympy.physics.control.lti.transferfunctionmatrix method)": [[110, "sympy.physics.control.lti.TransferFunctionMatrix.elem_zeros"]], "expand() (sympy.physics.control.lti.transferfunction method)": [[110, "sympy.physics.control.lti.TransferFunction.expand"]], "expand() (sympy.physics.control.lti.transferfunctionmatrix method)": [[110, "sympy.physics.control.lti.TransferFunctionMatrix.expand"]], "from_matrix() (sympy.physics.control.lti.transferfunctionmatrix class method)": [[110, "sympy.physics.control.lti.TransferFunctionMatrix.from_Matrix"]], "from_rational_expression() (sympy.physics.control.lti.transferfunction class method)": [[110, "sympy.physics.control.lti.TransferFunction.from_rational_expression"]], "is_biproper (sympy.physics.control.lti.parallel property)": [[110, "sympy.physics.control.lti.Parallel.is_biproper"]], "is_biproper (sympy.physics.control.lti.series property)": [[110, "sympy.physics.control.lti.Series.is_biproper"]], "is_biproper (sympy.physics.control.lti.transferfunction property)": [[110, "sympy.physics.control.lti.TransferFunction.is_biproper"]], "is_proper (sympy.physics.control.lti.parallel property)": [[110, "sympy.physics.control.lti.Parallel.is_proper"]], "is_proper (sympy.physics.control.lti.series property)": [[110, "sympy.physics.control.lti.Series.is_proper"]], "is_proper (sympy.physics.control.lti.transferfunction property)": [[110, "sympy.physics.control.lti.TransferFunction.is_proper"]], "is_stable() (sympy.physics.control.lti.transferfunction method)": [[110, "sympy.physics.control.lti.TransferFunction.is_stable"]], "is_strictly_proper (sympy.physics.control.lti.parallel property)": [[110, "sympy.physics.control.lti.Parallel.is_strictly_proper"]], "is_strictly_proper (sympy.physics.control.lti.series property)": [[110, "sympy.physics.control.lti.Series.is_strictly_proper"]], "is_strictly_proper (sympy.physics.control.lti.transferfunction property)": [[110, "sympy.physics.control.lti.TransferFunction.is_strictly_proper"]], "num (sympy.physics.control.lti.transferfunction property)": [[110, "sympy.physics.control.lti.TransferFunction.num"]], "num_inputs (sympy.physics.control.lti.mimoparallel property)": [[110, "sympy.physics.control.lti.MIMOParallel.num_inputs"]], "num_inputs (sympy.physics.control.lti.mimoseries property)": [[110, "sympy.physics.control.lti.MIMOSeries.num_inputs"]], "num_inputs (sympy.physics.control.lti.transferfunctionmatrix property)": [[110, "sympy.physics.control.lti.TransferFunctionMatrix.num_inputs"]], "num_outputs (sympy.physics.control.lti.mimoparallel property)": [[110, "sympy.physics.control.lti.MIMOParallel.num_outputs"]], "num_outputs (sympy.physics.control.lti.mimoseries property)": [[110, "sympy.physics.control.lti.MIMOSeries.num_outputs"]], "num_outputs (sympy.physics.control.lti.transferfunctionmatrix property)": [[110, "sympy.physics.control.lti.TransferFunctionMatrix.num_outputs"]], "poles() (sympy.physics.control.lti.transferfunction method)": [[110, "sympy.physics.control.lti.TransferFunction.poles"]], "sensitivity (sympy.physics.control.lti.feedback property)": [[110, "sympy.physics.control.lti.Feedback.sensitivity"]], "sensitivity (sympy.physics.control.lti.mimofeedback property)": [[110, "sympy.physics.control.lti.MIMOFeedback.sensitivity"]], "shape (sympy.physics.control.lti.mimoparallel property)": [[110, "sympy.physics.control.lti.MIMOParallel.shape"]], "shape (sympy.physics.control.lti.mimoseries property)": [[110, "sympy.physics.control.lti.MIMOSeries.shape"]], "shape (sympy.physics.control.lti.transferfunctionmatrix property)": [[110, "sympy.physics.control.lti.TransferFunctionMatrix.shape"]], "sign (sympy.physics.control.lti.feedback property)": [[110, "sympy.physics.control.lti.Feedback.sign"]], "sign (sympy.physics.control.lti.mimofeedback property)": [[110, "sympy.physics.control.lti.MIMOFeedback.sign"]], "sympy.physics.control.lti": [[110, "module-sympy.physics.control.lti"]], "sys1 (sympy.physics.control.lti.feedback property)": [[110, "sympy.physics.control.lti.Feedback.sys1"]], "sys1 (sympy.physics.control.lti.mimofeedback property)": [[110, "sympy.physics.control.lti.MIMOFeedback.sys1"]], "sys2 (sympy.physics.control.lti.feedback property)": [[110, "sympy.physics.control.lti.Feedback.sys2"]], "sys2 (sympy.physics.control.lti.mimofeedback property)": [[110, "sympy.physics.control.lti.MIMOFeedback.sys2"]], "to_expr() (sympy.physics.control.lti.parallel method)": [[110, "sympy.physics.control.lti.Parallel.to_expr"]], "to_expr() (sympy.physics.control.lti.series method)": [[110, "sympy.physics.control.lti.Series.to_expr"]], "to_expr() (sympy.physics.control.lti.transferfunction method)": [[110, "sympy.physics.control.lti.TransferFunction.to_expr"]], "transpose() (sympy.physics.control.lti.transferfunctionmatrix method)": [[110, "sympy.physics.control.lti.TransferFunctionMatrix.transpose"]], "var (sympy.physics.control.lti.feedback property)": [[110, "sympy.physics.control.lti.Feedback.var"]], "var (sympy.physics.control.lti.mimofeedback property)": [[110, "sympy.physics.control.lti.MIMOFeedback.var"]], "var (sympy.physics.control.lti.mimoparallel property)": [[110, "sympy.physics.control.lti.MIMOParallel.var"]], "var (sympy.physics.control.lti.mimoseries property)": [[110, "sympy.physics.control.lti.MIMOSeries.var"]], "var (sympy.physics.control.lti.parallel property)": [[110, "sympy.physics.control.lti.Parallel.var"]], "var (sympy.physics.control.lti.series property)": [[110, "sympy.physics.control.lti.Series.var"]], "var (sympy.physics.control.lti.transferfunction property)": [[110, "sympy.physics.control.lti.TransferFunction.var"]], "var (sympy.physics.control.lti.transferfunctionmatrix property)": [[110, "sympy.physics.control.lti.TransferFunctionMatrix.var"]], "zeros() (sympy.physics.control.lti.transferfunction method)": [[110, "sympy.physics.control.lti.TransferFunction.zeros"]], "extract_type_tens() (in module sympy.physics.hep.gamma_matrices)": [[111, "sympy.physics.hep.gamma_matrices.extract_type_tens"]], "gamma_trace() (in module sympy.physics.hep.gamma_matrices)": [[111, "sympy.physics.hep.gamma_matrices.gamma_trace"]], "kahane_simplify() (in module sympy.physics.hep.gamma_matrices)": [[111, "sympy.physics.hep.gamma_matrices.kahane_simplify"]], "simplify_gpgp() (in module sympy.physics.hep.gamma_matrices)": [[111, "sympy.physics.hep.gamma_matrices.simplify_gpgp"]], "sympy.physics.hep.gamma_matrices": [[111, "module-sympy.physics.hep.gamma_matrices"]], "e_nl() (in module sympy.physics.hydrogen)": [[112, "sympy.physics.hydrogen.E_nl"]], "e_nl_dirac() (in module sympy.physics.hydrogen)": [[112, "sympy.physics.hydrogen.E_nl_dirac"]], "psi_nlm() (in module sympy.physics.hydrogen)": [[112, "sympy.physics.hydrogen.Psi_nlm"]], "r_nl() (in module sympy.physics.hydrogen)": [[112, "sympy.physics.hydrogen.R_nl"]], "sympy.physics.hydrogen": [[112, "module-sympy.physics.hydrogen"]], "mdft() (in module sympy.physics.matrices)": [[113, "sympy.physics.matrices.mdft"]], "mgamma() (in module sympy.physics.matrices)": [[113, "sympy.physics.matrices.mgamma"]], "msigma() (in module sympy.physics.matrices)": [[113, "sympy.physics.matrices.msigma"]], "pat_matrix() (in module sympy.physics.matrices)": [[113, "sympy.physics.matrices.pat_matrix"]], "sympy.physics.matrices": [[113, "module-sympy.physics.matrices"]], "body (class in sympy.physics.mechanics.body)": [[115, "sympy.physics.mechanics.body.Body"]], "ang_vel_in() (sympy.physics.mechanics.body.body method)": [[115, "sympy.physics.mechanics.body.Body.ang_vel_in"]], "apply_force() (sympy.physics.mechanics.body.body method)": [[115, "sympy.physics.mechanics.body.Body.apply_force"]], "apply_torque() (sympy.physics.mechanics.body.body method)": [[115, "sympy.physics.mechanics.body.Body.apply_torque"]], "clear_loads() (sympy.physics.mechanics.body.body method)": [[115, "sympy.physics.mechanics.body.Body.clear_loads"]], "dcm() (sympy.physics.mechanics.body.body method)": [[115, "sympy.physics.mechanics.body.Body.dcm"]], "inertia (sympy.physics.mechanics.body.body property)": [[115, "sympy.physics.mechanics.body.Body.inertia"]], "kinetic_energy() (sympy.physics.mechanics.body.body method)": [[115, "sympy.physics.mechanics.body.Body.kinetic_energy"]], "masscenter_vel() (sympy.physics.mechanics.body.body method)": [[115, "sympy.physics.mechanics.body.Body.masscenter_vel"]], "parallel_axis() (sympy.physics.mechanics.body.body method)": [[115, "sympy.physics.mechanics.body.Body.parallel_axis"]], "remove_load() (sympy.physics.mechanics.body.body method)": [[115, "sympy.physics.mechanics.body.Body.remove_load"]], "sympy.physics.mechanics.body": [[115, "module-sympy.physics.mechanics.body"]], "x (sympy.physics.mechanics.body.body property)": [[115, "sympy.physics.mechanics.body.Body.x"]], "y (sympy.physics.mechanics.body.body property)": [[115, "sympy.physics.mechanics.body.Body.y"]], "z (sympy.physics.mechanics.body.body property)": [[115, "sympy.physics.mechanics.body.Body.z"]], "find_dynamicsymbols() (in module sympy.physics.mechanics)": [[116, "sympy.physics.mechanics.find_dynamicsymbols"]], "msubs() (in module sympy.physics.mechanics)": [[116, "sympy.physics.mechanics.msubs"]], "cylindricaljoint (class in sympy.physics.mechanics.joint)": [[118, "sympy.physics.mechanics.joint.CylindricalJoint"]], "joint (class in sympy.physics.mechanics.joint)": [[118, "sympy.physics.mechanics.joint.Joint"]], "jointsmethod (class in sympy.physics.mechanics.jointsmethod)": [[118, "sympy.physics.mechanics.jointsmethod.JointsMethod"]], "pinjoint (class in sympy.physics.mechanics.joint)": [[118, "sympy.physics.mechanics.joint.PinJoint"]], "planarjoint (class in sympy.physics.mechanics.joint)": [[118, "sympy.physics.mechanics.joint.PlanarJoint"]], "prismaticjoint (class in sympy.physics.mechanics.joint)": [[118, "sympy.physics.mechanics.joint.PrismaticJoint"]], "sphericaljoint (class in sympy.physics.mechanics.joint)": [[118, "sympy.physics.mechanics.joint.SphericalJoint"]], "weldjoint (class in sympy.physics.mechanics.joint)": [[118, "sympy.physics.mechanics.joint.WeldJoint"]], "bodies (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[118, "sympy.physics.mechanics.jointsmethod.JointsMethod.bodies"]], "child (sympy.physics.mechanics.joint.joint property)": [[118, "sympy.physics.mechanics.joint.Joint.child"]], "child_axis (sympy.physics.mechanics.joint.joint property)": [[118, "sympy.physics.mechanics.joint.Joint.child_axis"]], "child_point (sympy.physics.mechanics.joint.joint property)": [[118, "sympy.physics.mechanics.joint.Joint.child_point"]], "coordinates (sympy.physics.mechanics.joint.joint property)": [[118, "sympy.physics.mechanics.joint.Joint.coordinates"]], "forcing (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[118, "sympy.physics.mechanics.jointsmethod.JointsMethod.forcing"]], "forcing_full (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[118, "sympy.physics.mechanics.jointsmethod.JointsMethod.forcing_full"]], "form_eoms() (sympy.physics.mechanics.jointsmethod.jointsmethod method)": [[118, "sympy.physics.mechanics.jointsmethod.JointsMethod.form_eoms"]], "joint_axis (sympy.physics.mechanics.joint.cylindricaljoint property)": [[118, "sympy.physics.mechanics.joint.CylindricalJoint.joint_axis"]], "joint_axis (sympy.physics.mechanics.joint.pinjoint property)": [[118, "sympy.physics.mechanics.joint.PinJoint.joint_axis"]], "joint_axis (sympy.physics.mechanics.joint.prismaticjoint property)": [[118, "sympy.physics.mechanics.joint.PrismaticJoint.joint_axis"]], "kdes (sympy.physics.mechanics.joint.joint property)": [[118, "sympy.physics.mechanics.joint.Joint.kdes"]], "kdes (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[118, "sympy.physics.mechanics.jointsmethod.JointsMethod.kdes"]], "loads (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[118, "sympy.physics.mechanics.jointsmethod.JointsMethod.loads"]], "mass_matrix (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[118, "sympy.physics.mechanics.jointsmethod.JointsMethod.mass_matrix"]], "mass_matrix_full (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[118, "sympy.physics.mechanics.jointsmethod.JointsMethod.mass_matrix_full"]], "method (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[118, "sympy.physics.mechanics.jointsmethod.JointsMethod.method"]], "name (sympy.physics.mechanics.joint.joint property)": [[118, "sympy.physics.mechanics.joint.Joint.name"]], "parent (sympy.physics.mechanics.joint.joint property)": [[118, "sympy.physics.mechanics.joint.Joint.parent"]], "parent_axis (sympy.physics.mechanics.joint.joint property)": [[118, "sympy.physics.mechanics.joint.Joint.parent_axis"]], "parent_point (sympy.physics.mechanics.joint.joint property)": [[118, "sympy.physics.mechanics.joint.Joint.parent_point"]], "planar_coordinates (sympy.physics.mechanics.joint.planarjoint property)": [[118, "sympy.physics.mechanics.joint.PlanarJoint.planar_coordinates"]], "planar_speeds (sympy.physics.mechanics.joint.planarjoint property)": [[118, "sympy.physics.mechanics.joint.PlanarJoint.planar_speeds"]], "planar_vectors (sympy.physics.mechanics.joint.planarjoint property)": [[118, "sympy.physics.mechanics.joint.PlanarJoint.planar_vectors"]], "q (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[118, "sympy.physics.mechanics.jointsmethod.JointsMethod.q"]], "rhs() (sympy.physics.mechanics.jointsmethod.jointsmethod method)": [[118, "sympy.physics.mechanics.jointsmethod.JointsMethod.rhs"]], "rotation_axis (sympy.physics.mechanics.joint.planarjoint property)": [[118, "sympy.physics.mechanics.joint.PlanarJoint.rotation_axis"]], "rotation_coordinate (sympy.physics.mechanics.joint.cylindricaljoint property)": [[118, "sympy.physics.mechanics.joint.CylindricalJoint.rotation_coordinate"]], "rotation_coordinate (sympy.physics.mechanics.joint.planarjoint property)": [[118, "sympy.physics.mechanics.joint.PlanarJoint.rotation_coordinate"]], "rotation_speed (sympy.physics.mechanics.joint.cylindricaljoint property)": [[118, "sympy.physics.mechanics.joint.CylindricalJoint.rotation_speed"]], "rotation_speed (sympy.physics.mechanics.joint.planarjoint property)": [[118, "sympy.physics.mechanics.joint.PlanarJoint.rotation_speed"]], "speeds (sympy.physics.mechanics.joint.joint property)": [[118, "sympy.physics.mechanics.joint.Joint.speeds"]], "sympy.physics.mechanics.joint": [[118, "module-sympy.physics.mechanics.joint"]], "sympy.physics.mechanics.jointsmethod": [[118, "module-sympy.physics.mechanics.jointsmethod"]], "translation_coordinate (sympy.physics.mechanics.joint.cylindricaljoint property)": [[118, "sympy.physics.mechanics.joint.CylindricalJoint.translation_coordinate"]], "translation_speed (sympy.physics.mechanics.joint.cylindricaljoint property)": [[118, "sympy.physics.mechanics.joint.CylindricalJoint.translation_speed"]], "u (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[118, "sympy.physics.mechanics.jointsmethod.JointsMethod.u"]], "kanesmethod (class in sympy.physics.mechanics.kane)": [[119, "sympy.physics.mechanics.kane.KanesMethod"]], "lagrangesmethod (class in sympy.physics.mechanics.lagrange)": [[119, "sympy.physics.mechanics.lagrange.LagrangesMethod"]], "auxiliary_eqs (sympy.physics.mechanics.kane.kanesmethod property)": [[119, "sympy.physics.mechanics.kane.KanesMethod.auxiliary_eqs"]], "forcing (sympy.physics.mechanics.kane.kanesmethod property)": [[119, "sympy.physics.mechanics.kane.KanesMethod.forcing"]], "forcing (sympy.physics.mechanics.lagrange.lagrangesmethod property)": [[119, "sympy.physics.mechanics.lagrange.LagrangesMethod.forcing"]], "forcing_full (sympy.physics.mechanics.kane.kanesmethod property)": [[119, "sympy.physics.mechanics.kane.KanesMethod.forcing_full"]], "forcing_full (sympy.physics.mechanics.lagrange.lagrangesmethod property)": [[119, "sympy.physics.mechanics.lagrange.LagrangesMethod.forcing_full"]], "forcing_kin (sympy.physics.mechanics.kane.kanesmethod property)": [[119, "sympy.physics.mechanics.kane.KanesMethod.forcing_kin"]], "form_lagranges_equations() (sympy.physics.mechanics.lagrange.lagrangesmethod method)": [[119, "sympy.physics.mechanics.lagrange.LagrangesMethod.form_lagranges_equations"]], "kanes_equations() (sympy.physics.mechanics.kane.kanesmethod method)": [[119, "sympy.physics.mechanics.kane.KanesMethod.kanes_equations"]], "kindiffdict() (sympy.physics.mechanics.kane.kanesmethod method)": [[119, "sympy.physics.mechanics.kane.KanesMethod.kindiffdict"]], "linearize() (sympy.physics.mechanics.kane.kanesmethod method)": [[119, "sympy.physics.mechanics.kane.KanesMethod.linearize"]], "linearize() (sympy.physics.mechanics.lagrange.lagrangesmethod method)": [[119, "sympy.physics.mechanics.lagrange.LagrangesMethod.linearize"]], "mass_matrix (sympy.physics.mechanics.kane.kanesmethod property)": [[119, "sympy.physics.mechanics.kane.KanesMethod.mass_matrix"]], "mass_matrix (sympy.physics.mechanics.lagrange.lagrangesmethod property)": [[119, "sympy.physics.mechanics.lagrange.LagrangesMethod.mass_matrix"]], "mass_matrix_full (sympy.physics.mechanics.kane.kanesmethod property)": [[119, "sympy.physics.mechanics.kane.KanesMethod.mass_matrix_full"]], "mass_matrix_full (sympy.physics.mechanics.lagrange.lagrangesmethod property)": [[119, "sympy.physics.mechanics.lagrange.LagrangesMethod.mass_matrix_full"]], "mass_matrix_kin (sympy.physics.mechanics.kane.kanesmethod property)": [[119, "sympy.physics.mechanics.kane.KanesMethod.mass_matrix_kin"]], "rhs() (sympy.physics.mechanics.kane.kanesmethod method)": [[119, "sympy.physics.mechanics.kane.KanesMethod.rhs"]], "rhs() (sympy.physics.mechanics.lagrange.lagrangesmethod method)": [[119, "sympy.physics.mechanics.lagrange.LagrangesMethod.rhs"]], "solve_multipliers() (sympy.physics.mechanics.lagrange.lagrangesmethod method)": [[119, "sympy.physics.mechanics.lagrange.LagrangesMethod.solve_multipliers"]], "sympy.physics.mechanics.kane": [[119, "module-sympy.physics.mechanics.kane"]], "sympy.physics.mechanics.lagrange": [[119, "module-sympy.physics.mechanics.lagrange"]], "to_linearizer() (sympy.physics.mechanics.kane.kanesmethod method)": [[119, "sympy.physics.mechanics.kane.KanesMethod.to_linearizer"]], "to_linearizer() (sympy.physics.mechanics.lagrange.lagrangesmethod method)": [[119, "sympy.physics.mechanics.lagrange.LagrangesMethod.to_linearizer"]], "linearizer (class in sympy.physics.mechanics.linearize)": [[120, "sympy.physics.mechanics.linearize.Linearizer"]], "linearize() (sympy.physics.mechanics.linearize.linearizer method)": [[120, "sympy.physics.mechanics.linearize.Linearizer.linearize"]], "sympy.physics.mechanics.linearize": [[120, "module-sympy.physics.mechanics.linearize"]], "lagrangian() (in module sympy.physics.mechanics.functions)": [[121, "sympy.physics.mechanics.functions.Lagrangian"]], "particle (class in sympy.physics.mechanics.particle)": [[121, "sympy.physics.mechanics.particle.Particle"]], "rigidbody (class in sympy.physics.mechanics.rigidbody)": [[121, "sympy.physics.mechanics.rigidbody.RigidBody"]], "angular_momentum() (in module sympy.physics.mechanics.functions)": [[121, "sympy.physics.mechanics.functions.angular_momentum"]], "angular_momentum() (sympy.physics.mechanics.particle.particle method)": [[121, "sympy.physics.mechanics.particle.Particle.angular_momentum"]], "angular_momentum() (sympy.physics.mechanics.rigidbody.rigidbody method)": [[121, "sympy.physics.mechanics.rigidbody.RigidBody.angular_momentum"]], "central_inertia (sympy.physics.mechanics.rigidbody.rigidbody property)": [[121, "sympy.physics.mechanics.rigidbody.RigidBody.central_inertia"]], "frame (sympy.physics.mechanics.rigidbody.rigidbody property)": [[121, "sympy.physics.mechanics.rigidbody.RigidBody.frame"]], "inertia (sympy.physics.mechanics.rigidbody.rigidbody property)": [[121, "sympy.physics.mechanics.rigidbody.RigidBody.inertia"]], "inertia() (in module sympy.physics.mechanics.functions)": [[121, "sympy.physics.mechanics.functions.inertia"]], "inertia_of_point_mass() (in module sympy.physics.mechanics.functions)": [[121, "sympy.physics.mechanics.functions.inertia_of_point_mass"]], "kinetic_energy() (in module sympy.physics.mechanics.functions)": [[121, "sympy.physics.mechanics.functions.kinetic_energy"]], "kinetic_energy() (sympy.physics.mechanics.particle.particle method)": [[121, "sympy.physics.mechanics.particle.Particle.kinetic_energy"]], "kinetic_energy() (sympy.physics.mechanics.rigidbody.rigidbody method)": [[121, "sympy.physics.mechanics.rigidbody.RigidBody.kinetic_energy"]], "linear_momentum() (in module sympy.physics.mechanics.functions)": [[121, "sympy.physics.mechanics.functions.linear_momentum"]], "linear_momentum() (sympy.physics.mechanics.particle.particle method)": [[121, "sympy.physics.mechanics.particle.Particle.linear_momentum"]], "linear_momentum() (sympy.physics.mechanics.rigidbody.rigidbody method)": [[121, "sympy.physics.mechanics.rigidbody.RigidBody.linear_momentum"]], "mass (sympy.physics.mechanics.particle.particle property)": [[121, "sympy.physics.mechanics.particle.Particle.mass"]], "mass (sympy.physics.mechanics.rigidbody.rigidbody property)": [[121, "sympy.physics.mechanics.rigidbody.RigidBody.mass"]], "masscenter (sympy.physics.mechanics.rigidbody.rigidbody property)": [[121, "sympy.physics.mechanics.rigidbody.RigidBody.masscenter"]], "parallel_axis() (sympy.physics.mechanics.particle.particle method)": [[121, "sympy.physics.mechanics.particle.Particle.parallel_axis"]], "parallel_axis() (sympy.physics.mechanics.rigidbody.rigidbody method)": [[121, "sympy.physics.mechanics.rigidbody.RigidBody.parallel_axis"]], "point (sympy.physics.mechanics.particle.particle property)": [[121, "sympy.physics.mechanics.particle.Particle.point"]], "potential_energy (sympy.physics.mechanics.particle.particle property)": [[121, "sympy.physics.mechanics.particle.Particle.potential_energy"]], "potential_energy (sympy.physics.mechanics.rigidbody.rigidbody property)": [[121, "sympy.physics.mechanics.rigidbody.RigidBody.potential_energy"]], "potential_energy() (in module sympy.physics.mechanics.functions)": [[121, "sympy.physics.mechanics.functions.potential_energy"]], "sympy.physics.mechanics.particle": [[121, "module-sympy.physics.mechanics.particle"]], "sympy.physics.mechanics.rigidbody": [[121, "module-sympy.physics.mechanics.rigidbody"]], "symbolicsystem (class in sympy.physics.mechanics.system)": [[123, "sympy.physics.mechanics.system.SymbolicSystem"]], "alg_con (sympy.physics.mechanics.system.symbolicsystem property)": [[123, "sympy.physics.mechanics.system.SymbolicSystem.alg_con"]], "bodies (sympy.physics.mechanics.system.symbolicsystem property)": [[123, "sympy.physics.mechanics.system.SymbolicSystem.bodies"]], "comb_explicit_rhs (sympy.physics.mechanics.system.symbolicsystem property)": [[123, "sympy.physics.mechanics.system.SymbolicSystem.comb_explicit_rhs"]], "comb_implicit_mat (sympy.physics.mechanics.system.symbolicsystem property)": [[123, "sympy.physics.mechanics.system.SymbolicSystem.comb_implicit_mat"]], "comb_implicit_rhs (sympy.physics.mechanics.system.symbolicsystem property)": [[123, "sympy.physics.mechanics.system.SymbolicSystem.comb_implicit_rhs"]], "compute_explicit_form() (sympy.physics.mechanics.system.symbolicsystem method)": [[123, "sympy.physics.mechanics.system.SymbolicSystem.compute_explicit_form"]], "constant_symbols() (sympy.physics.mechanics.system.symbolicsystem method)": [[123, "sympy.physics.mechanics.system.SymbolicSystem.constant_symbols"]], "coordinates (sympy.physics.mechanics.system.symbolicsystem property)": [[123, "sympy.physics.mechanics.system.SymbolicSystem.coordinates"]], "dyn_implicit_mat (sympy.physics.mechanics.system.symbolicsystem property)": [[123, "sympy.physics.mechanics.system.SymbolicSystem.dyn_implicit_mat"]], "dyn_implicit_rhs (sympy.physics.mechanics.system.symbolicsystem property)": [[123, "sympy.physics.mechanics.system.SymbolicSystem.dyn_implicit_rhs"]], "dynamic_symbols() (sympy.physics.mechanics.system.symbolicsystem method)": [[123, "sympy.physics.mechanics.system.SymbolicSystem.dynamic_symbols"]], "kin_explicit_rhs (sympy.physics.mechanics.system.symbolicsystem property)": [[123, "sympy.physics.mechanics.system.SymbolicSystem.kin_explicit_rhs"]], "loads (sympy.physics.mechanics.system.symbolicsystem property)": [[123, "sympy.physics.mechanics.system.SymbolicSystem.loads"]], "speeds (sympy.physics.mechanics.system.symbolicsystem property)": [[123, "sympy.physics.mechanics.system.SymbolicSystem.speeds"]], "states (sympy.physics.mechanics.system.symbolicsystem property)": [[123, "sympy.physics.mechanics.system.SymbolicSystem.states"]], "sympy.physics.mechanics.system": [[123, "module-sympy.physics.mechanics.system"]], "sympy.physics.mechanics": [[134, "module-sympy.physics.mechanics"]], "a (sympy.physics.optics.gaussopt.raytransfermatrix property)": [[143, "sympy.physics.optics.gaussopt.RayTransferMatrix.A"]], "b (sympy.physics.optics.gaussopt.raytransfermatrix property)": [[143, "sympy.physics.optics.gaussopt.RayTransferMatrix.B"]], "beamparameter (class in sympy.physics.optics.gaussopt)": [[143, "sympy.physics.optics.gaussopt.BeamParameter"]], "c (sympy.physics.optics.gaussopt.raytransfermatrix property)": [[143, "sympy.physics.optics.gaussopt.RayTransferMatrix.C"]], "curvedmirror (class in sympy.physics.optics.gaussopt)": [[143, "sympy.physics.optics.gaussopt.CurvedMirror"]], "curvedrefraction (class in sympy.physics.optics.gaussopt)": [[143, "sympy.physics.optics.gaussopt.CurvedRefraction"]], "d (sympy.physics.optics.gaussopt.raytransfermatrix property)": [[143, "sympy.physics.optics.gaussopt.RayTransferMatrix.D"]], "flatmirror (class in sympy.physics.optics.gaussopt)": [[143, "sympy.physics.optics.gaussopt.FlatMirror"]], "flatrefraction (class in sympy.physics.optics.gaussopt)": [[143, "sympy.physics.optics.gaussopt.FlatRefraction"]], "freespace (class in sympy.physics.optics.gaussopt)": [[143, "sympy.physics.optics.gaussopt.FreeSpace"]], "geometricray (class in sympy.physics.optics.gaussopt)": [[143, "sympy.physics.optics.gaussopt.GeometricRay"]], "raytransfermatrix (class in sympy.physics.optics.gaussopt)": [[143, "sympy.physics.optics.gaussopt.RayTransferMatrix"]], "thinlens (class in sympy.physics.optics.gaussopt)": [[143, "sympy.physics.optics.gaussopt.ThinLens"]], "angle (sympy.physics.optics.gaussopt.geometricray property)": [[143, "sympy.physics.optics.gaussopt.GeometricRay.angle"]], "conjugate_gauss_beams() (in module sympy.physics.optics.gaussopt)": [[143, "sympy.physics.optics.gaussopt.conjugate_gauss_beams"]], "divergence (sympy.physics.optics.gaussopt.beamparameter property)": [[143, "sympy.physics.optics.gaussopt.BeamParameter.divergence"]], "gaussian_conj() (in module sympy.physics.optics.gaussopt)": [[143, "sympy.physics.optics.gaussopt.gaussian_conj"]], "geometric_conj_ab() (in module sympy.physics.optics.gaussopt)": [[143, "sympy.physics.optics.gaussopt.geometric_conj_ab"]], "geometric_conj_af() (in module sympy.physics.optics.gaussopt)": [[143, "sympy.physics.optics.gaussopt.geometric_conj_af"]], "geometric_conj_bf() (in module sympy.physics.optics.gaussopt)": [[143, "sympy.physics.optics.gaussopt.geometric_conj_bf"]], "gouy (sympy.physics.optics.gaussopt.beamparameter property)": [[143, "sympy.physics.optics.gaussopt.BeamParameter.gouy"]], "height (sympy.physics.optics.gaussopt.geometricray property)": [[143, "sympy.physics.optics.gaussopt.GeometricRay.height"]], "q (sympy.physics.optics.gaussopt.beamparameter property)": [[143, "sympy.physics.optics.gaussopt.BeamParameter.q"]], "radius (sympy.physics.optics.gaussopt.beamparameter property)": [[143, "sympy.physics.optics.gaussopt.BeamParameter.radius"]], "rayleigh2waist() (in module sympy.physics.optics.gaussopt)": [[143, "sympy.physics.optics.gaussopt.rayleigh2waist"]], "sympy.physics.optics.gaussopt": [[143, "module-sympy.physics.optics.gaussopt"]], "w (sympy.physics.optics.gaussopt.beamparameter property)": [[143, "sympy.physics.optics.gaussopt.BeamParameter.w"]], "w_0 (sympy.physics.optics.gaussopt.beamparameter property)": [[143, "sympy.physics.optics.gaussopt.BeamParameter.w_0"]], "waist2rayleigh() (in module sympy.physics.optics.gaussopt)": [[143, "sympy.physics.optics.gaussopt.waist2rayleigh"]], "waist_approximation_limit (sympy.physics.optics.gaussopt.beamparameter property)": [[143, "sympy.physics.optics.gaussopt.BeamParameter.waist_approximation_limit"]], "medium (class in sympy.physics.optics.medium)": [[145, "sympy.physics.optics.medium.Medium"]], "refractive_index (sympy.physics.optics.medium.medium property)": [[145, "sympy.physics.optics.medium.Medium.refractive_index"]], "speed (sympy.physics.optics.medium.medium property)": [[145, "sympy.physics.optics.medium.Medium.speed"]], "sympy.physics.optics.medium": [[145, "module-sympy.physics.optics.medium"]], "half_wave_retarder() (in module sympy.physics.optics.polarization)": [[146, "sympy.physics.optics.polarization.half_wave_retarder"]], "jones_2_stokes() (in module sympy.physics.optics.polarization)": [[146, "sympy.physics.optics.polarization.jones_2_stokes"]], "jones_vector() (in module sympy.physics.optics.polarization)": [[146, "sympy.physics.optics.polarization.jones_vector"]], "linear_polarizer() (in module sympy.physics.optics.polarization)": [[146, "sympy.physics.optics.polarization.linear_polarizer"]], "mueller_matrix() (in module sympy.physics.optics.polarization)": [[146, "sympy.physics.optics.polarization.mueller_matrix"]], "phase_retarder() (in module sympy.physics.optics.polarization)": [[146, "sympy.physics.optics.polarization.phase_retarder"]], "polarizing_beam_splitter() (in module sympy.physics.optics.polarization)": [[146, "sympy.physics.optics.polarization.polarizing_beam_splitter"]], "quarter_wave_retarder() (in module sympy.physics.optics.polarization)": [[146, "sympy.physics.optics.polarization.quarter_wave_retarder"]], "reflective_filter() (in module sympy.physics.optics.polarization)": [[146, "sympy.physics.optics.polarization.reflective_filter"]], "stokes_vector() (in module sympy.physics.optics.polarization)": [[146, "sympy.physics.optics.polarization.stokes_vector"]], "sympy.physics.optics.polarization": [[146, "module-sympy.physics.optics.polarization"]], "transmissive_filter() (in module sympy.physics.optics.polarization)": [[146, "sympy.physics.optics.polarization.transmissive_filter"]], "brewster_angle() (in module sympy.physics.optics.utils)": [[147, "sympy.physics.optics.utils.brewster_angle"]], "critical_angle() (in module sympy.physics.optics.utils)": [[147, "sympy.physics.optics.utils.critical_angle"]], "deviation() (in module sympy.physics.optics.utils)": [[147, "sympy.physics.optics.utils.deviation"]], "fresnel_coefficients() (in module sympy.physics.optics.utils)": [[147, "sympy.physics.optics.utils.fresnel_coefficients"]], "hyperfocal_distance() (in module sympy.physics.optics.utils)": [[147, "sympy.physics.optics.utils.hyperfocal_distance"]], "lens_formula() (in module sympy.physics.optics.utils)": [[147, "sympy.physics.optics.utils.lens_formula"]], "lens_makers_formula() (in module sympy.physics.optics.utils)": [[147, "sympy.physics.optics.utils.lens_makers_formula"]], "mirror_formula() (in module sympy.physics.optics.utils)": [[147, "sympy.physics.optics.utils.mirror_formula"]], "refraction_angle() (in module sympy.physics.optics.utils)": [[147, "sympy.physics.optics.utils.refraction_angle"]], "sympy.physics.optics.utils": [[147, "module-sympy.physics.optics.utils"]], "transverse_magnification() (in module sympy.physics.optics.utils)": [[147, "sympy.physics.optics.utils.transverse_magnification"]], "twave (class in sympy.physics.optics.waves)": [[148, "sympy.physics.optics.waves.TWave"]], "amplitude (sympy.physics.optics.waves.twave property)": [[148, "sympy.physics.optics.waves.TWave.amplitude"]], "angular_velocity (sympy.physics.optics.waves.twave property)": [[148, "sympy.physics.optics.waves.TWave.angular_velocity"]], "frequency (sympy.physics.optics.waves.twave property)": [[148, "sympy.physics.optics.waves.TWave.frequency"]], "n (sympy.physics.optics.waves.twave property)": [[148, "sympy.physics.optics.waves.TWave.n"]], "phase (sympy.physics.optics.waves.twave property)": [[148, "sympy.physics.optics.waves.TWave.phase"]], "speed (sympy.physics.optics.waves.twave property)": [[148, "sympy.physics.optics.waves.TWave.speed"]], "sympy.physics.optics.waves": [[148, "module-sympy.physics.optics.waves"]], "time_period (sympy.physics.optics.waves.twave property)": [[148, "sympy.physics.optics.waves.TWave.time_period"]], "wavelength (sympy.physics.optics.waves.twave property)": [[148, "sympy.physics.optics.waves.TWave.wavelength"]], "wavenumber (sympy.physics.optics.waves.twave property)": [[148, "sympy.physics.optics.waves.TWave.wavenumber"]], "evaluate_pauli_product() (in module sympy.physics.paulialgebra)": [[149, "sympy.physics.paulialgebra.evaluate_pauli_product"]], "sympy.physics.paulialgebra": [[149, "module-sympy.physics.paulialgebra"]], "e_n() (in module sympy.physics.qho_1d)": [[150, "sympy.physics.qho_1d.E_n"]], "coherent_state() (in module sympy.physics.qho_1d)": [[150, "sympy.physics.qho_1d.coherent_state"]], "psi_n() (in module sympy.physics.qho_1d)": [[150, "sympy.physics.qho_1d.psi_n"]], "sympy.physics.qho_1d": [[150, "module-sympy.physics.qho_1d"]], "anticommutator (class in sympy.physics.quantum.anticommutator)": [[151, "sympy.physics.quantum.anticommutator.AntiCommutator"]], "doit() (sympy.physics.quantum.anticommutator.anticommutator method)": [[151, "sympy.physics.quantum.anticommutator.AntiCommutator.doit"]], "sympy.physics.quantum.anticommutator": [[151, "module-sympy.physics.quantum.anticommutator"]], "positionbra3d (class in sympy.physics.quantum.cartesian)": [[152, "sympy.physics.quantum.cartesian.PositionBra3D"]], "positionket3d (class in sympy.physics.quantum.cartesian)": [[152, "sympy.physics.quantum.cartesian.PositionKet3D"]], "positionstate3d (class in sympy.physics.quantum.cartesian)": [[152, "sympy.physics.quantum.cartesian.PositionState3D"]], "pxbra (class in sympy.physics.quantum.cartesian)": [[152, "sympy.physics.quantum.cartesian.PxBra"]], "pxket (class in sympy.physics.quantum.cartesian)": [[152, "sympy.physics.quantum.cartesian.PxKet"]], "pxop (class in sympy.physics.quantum.cartesian)": [[152, "sympy.physics.quantum.cartesian.PxOp"]], "xbra (class in sympy.physics.quantum.cartesian)": [[152, "sympy.physics.quantum.cartesian.XBra"]], "xket (class in sympy.physics.quantum.cartesian)": [[152, "sympy.physics.quantum.cartesian.XKet"]], "xop (class in sympy.physics.quantum.cartesian)": [[152, "sympy.physics.quantum.cartesian.XOp"]], "yop (class in sympy.physics.quantum.cartesian)": [[152, "sympy.physics.quantum.cartesian.YOp"]], "zop (class in sympy.physics.quantum.cartesian)": [[152, "sympy.physics.quantum.cartesian.ZOp"]], "momentum (sympy.physics.quantum.cartesian.pxbra property)": [[152, "sympy.physics.quantum.cartesian.PxBra.momentum"]], "momentum (sympy.physics.quantum.cartesian.pxket property)": [[152, "sympy.physics.quantum.cartesian.PxKet.momentum"]], "position (sympy.physics.quantum.cartesian.xbra property)": [[152, "sympy.physics.quantum.cartesian.XBra.position"]], "position (sympy.physics.quantum.cartesian.xket property)": [[152, "sympy.physics.quantum.cartesian.XKet.position"]], "position_x (sympy.physics.quantum.cartesian.positionstate3d property)": [[152, "sympy.physics.quantum.cartesian.PositionState3D.position_x"]], "position_y (sympy.physics.quantum.cartesian.positionstate3d property)": [[152, "sympy.physics.quantum.cartesian.PositionState3D.position_y"]], "position_z (sympy.physics.quantum.cartesian.positionstate3d property)": [[152, "sympy.physics.quantum.cartesian.PositionState3D.position_z"]], "sympy.physics.quantum.cartesian": [[152, "module-sympy.physics.quantum.cartesian"]], "cg (class in sympy.physics.quantum.cg)": [[153, "sympy.physics.quantum.cg.CG"]], "wigner3j (class in sympy.physics.quantum.cg)": [[153, "sympy.physics.quantum.cg.Wigner3j"]], "wigner6j (class in sympy.physics.quantum.cg)": [[153, "sympy.physics.quantum.cg.Wigner6j"]], "wigner9j (class in sympy.physics.quantum.cg)": [[153, "sympy.physics.quantum.cg.Wigner9j"]], "cg_simp() (in module sympy.physics.quantum.cg)": [[153, "sympy.physics.quantum.cg.cg_simp"]], "sympy.physics.quantum.cg": [[153, "module-sympy.physics.quantum.cg"]], "circuitplot (class in sympy.physics.quantum.circuitplot)": [[154, "sympy.physics.quantum.circuitplot.CircuitPlot"]], "createcgate() (in module sympy.physics.quantum.circuitplot)": [[154, "sympy.physics.quantum.circuitplot.CreateCGate"]], "mx (class in sympy.physics.quantum.circuitplot)": [[154, "sympy.physics.quantum.circuitplot.Mx"]], "mz (class in sympy.physics.quantum.circuitplot)": [[154, "sympy.physics.quantum.circuitplot.Mz"]], "circuit_plot() (in module sympy.physics.quantum.circuitplot)": [[154, "sympy.physics.quantum.circuitplot.circuit_plot"]], "control_line() (sympy.physics.quantum.circuitplot.circuitplot method)": [[154, "sympy.physics.quantum.circuitplot.CircuitPlot.control_line"]], "control_point() (sympy.physics.quantum.circuitplot.circuitplot method)": [[154, "sympy.physics.quantum.circuitplot.CircuitPlot.control_point"]], "labeller() (in module sympy.physics.quantum.circuitplot)": [[154, "sympy.physics.quantum.circuitplot.labeller"]], "not_point() (sympy.physics.quantum.circuitplot.circuitplot method)": [[154, "sympy.physics.quantum.circuitplot.CircuitPlot.not_point"]], "one_qubit_box() (sympy.physics.quantum.circuitplot.circuitplot method)": [[154, "sympy.physics.quantum.circuitplot.CircuitPlot.one_qubit_box"]], "swap_point() (sympy.physics.quantum.circuitplot.circuitplot method)": [[154, "sympy.physics.quantum.circuitplot.CircuitPlot.swap_point"]], "sympy.physics.quantum.circuitplot": [[154, "module-sympy.physics.quantum.circuitplot"]], "two_qubit_box() (sympy.physics.quantum.circuitplot.circuitplot method)": [[154, "sympy.physics.quantum.circuitplot.CircuitPlot.two_qubit_box"]], "update() (sympy.physics.quantum.circuitplot.circuitplot method)": [[154, "sympy.physics.quantum.circuitplot.CircuitPlot.update"]], "commutator (class in sympy.physics.quantum.commutator)": [[155, "sympy.physics.quantum.commutator.Commutator"]], "doit() (sympy.physics.quantum.commutator.commutator method)": [[155, "sympy.physics.quantum.commutator.Commutator.doit"]], "sympy.physics.quantum.commutator": [[155, "module-sympy.physics.quantum.commutator"]], "hbar (class in sympy.physics.quantum.constants)": [[156, "sympy.physics.quantum.constants.HBar"]], "sympy.physics.quantum.constants": [[156, "module-sympy.physics.quantum.constants"]], "dagger (class in sympy.physics.quantum.dagger)": [[157, "sympy.physics.quantum.dagger.Dagger"]], "sympy.physics.quantum.dagger": [[157, "module-sympy.physics.quantum.dagger"]], "cgate (class in sympy.physics.quantum.gate)": [[158, "sympy.physics.quantum.gate.CGate"]], "cgates (class in sympy.physics.quantum.gate)": [[158, "sympy.physics.quantum.gate.CGateS"]], "cnot (in module sympy.physics.quantum.gate)": [[158, "sympy.physics.quantum.gate.CNOT"]], "cnotgate (class in sympy.physics.quantum.gate)": [[158, "sympy.physics.quantum.gate.CNotGate"]], "gate (class in sympy.physics.quantum.gate)": [[158, "sympy.physics.quantum.gate.Gate"]], "h (in module sympy.physics.quantum.gate)": [[158, "sympy.physics.quantum.gate.H"]], "hadamardgate (class in sympy.physics.quantum.gate)": [[158, "sympy.physics.quantum.gate.HadamardGate"]], "identitygate (class in sympy.physics.quantum.gate)": [[158, "sympy.physics.quantum.gate.IdentityGate"]], "onequbitgate (class in sympy.physics.quantum.gate)": [[158, "sympy.physics.quantum.gate.OneQubitGate"]], "phase (in module sympy.physics.quantum.gate)": [[158, "sympy.physics.quantum.gate.Phase"]], "phasegate (class in sympy.physics.quantum.gate)": [[158, "sympy.physics.quantum.gate.PhaseGate"]], "s (in module sympy.physics.quantum.gate)": [[158, "sympy.physics.quantum.gate.S"]], "swap (in module sympy.physics.quantum.gate)": [[158, "sympy.physics.quantum.gate.SWAP"]], "swapgate (class in sympy.physics.quantum.gate)": [[158, "sympy.physics.quantum.gate.SwapGate"]], "t (in module sympy.physics.quantum.gate)": [[158, "sympy.physics.quantum.gate.T"]], "tgate (class in sympy.physics.quantum.gate)": [[158, "sympy.physics.quantum.gate.TGate"]], "twoqubitgate (class in sympy.physics.quantum.gate)": [[158, "sympy.physics.quantum.gate.TwoQubitGate"]], "ugate (class in sympy.physics.quantum.gate)": [[158, "sympy.physics.quantum.gate.UGate"]], "x (in module sympy.physics.quantum.gate)": [[158, "sympy.physics.quantum.gate.X"]], "xgate (class in sympy.physics.quantum.gate)": [[158, "sympy.physics.quantum.gate.XGate"]], "y (in module sympy.physics.quantum.gate)": [[158, "sympy.physics.quantum.gate.Y"]], "ygate (class in sympy.physics.quantum.gate)": [[158, "sympy.physics.quantum.gate.YGate"]], "z (in module sympy.physics.quantum.gate)": [[158, "sympy.physics.quantum.gate.Z"]], "zgate (class in sympy.physics.quantum.gate)": [[158, "sympy.physics.quantum.gate.ZGate"]], "controls (sympy.physics.quantum.gate.cgate property)": [[158, "sympy.physics.quantum.gate.CGate.controls"]], "controls (sympy.physics.quantum.gate.cnotgate property)": [[158, "sympy.physics.quantum.gate.CNotGate.controls"]], "decompose() (sympy.physics.quantum.gate.cgate method)": [[158, "sympy.physics.quantum.gate.CGate.decompose"]], "decompose() (sympy.physics.quantum.gate.swapgate method)": [[158, "sympy.physics.quantum.gate.SwapGate.decompose"]], "eval_controls() (sympy.physics.quantum.gate.cgate method)": [[158, "sympy.physics.quantum.gate.CGate.eval_controls"]], "gate (sympy.physics.quantum.gate.cgate property)": [[158, "sympy.physics.quantum.gate.CGate.gate"]], "gate (sympy.physics.quantum.gate.cnotgate property)": [[158, "sympy.physics.quantum.gate.CNotGate.gate"]], "gate_simp() (in module sympy.physics.quantum.gate)": [[158, "sympy.physics.quantum.gate.gate_simp"]], "gate_sort() (in module sympy.physics.quantum.gate)": [[158, "sympy.physics.quantum.gate.gate_sort"]], "get_target_matrix() (sympy.physics.quantum.gate.gate method)": [[158, "sympy.physics.quantum.gate.Gate.get_target_matrix"]], "get_target_matrix() (sympy.physics.quantum.gate.ugate method)": [[158, "sympy.physics.quantum.gate.UGate.get_target_matrix"]], "min_qubits (sympy.physics.quantum.gate.cgate property)": [[158, "sympy.physics.quantum.gate.CGate.min_qubits"]], "min_qubits (sympy.physics.quantum.gate.cnotgate property)": [[158, "sympy.physics.quantum.gate.CNotGate.min_qubits"]], "min_qubits (sympy.physics.quantum.gate.gate property)": [[158, "sympy.physics.quantum.gate.Gate.min_qubits"]], "normalized() (in module sympy.physics.quantum.gate)": [[158, "sympy.physics.quantum.gate.normalized"]], "nqubits (sympy.physics.quantum.gate.cgate property)": [[158, "sympy.physics.quantum.gate.CGate.nqubits"]], "nqubits (sympy.physics.quantum.gate.gate property)": [[158, "sympy.physics.quantum.gate.Gate.nqubits"]], "plot_gate() (sympy.physics.quantum.gate.cgate method)": [[158, "sympy.physics.quantum.gate.CGate.plot_gate"]], "random_circuit() (in module sympy.physics.quantum.gate)": [[158, "sympy.physics.quantum.gate.random_circuit"]], "sympy.physics.quantum.gate": [[158, "module-sympy.physics.quantum.gate"]], "targets (sympy.physics.quantum.gate.cgate property)": [[158, "sympy.physics.quantum.gate.CGate.targets"]], "targets (sympy.physics.quantum.gate.cnotgate property)": [[158, "sympy.physics.quantum.gate.CNotGate.targets"]], "targets (sympy.physics.quantum.gate.gate property)": [[158, "sympy.physics.quantum.gate.Gate.targets"]], "targets (sympy.physics.quantum.gate.ugate property)": [[158, "sympy.physics.quantum.gate.UGate.targets"]], "oraclegate (class in sympy.physics.quantum.grover)": [[159, "sympy.physics.quantum.grover.OracleGate"]], "wgate (class in sympy.physics.quantum.grover)": [[159, "sympy.physics.quantum.grover.WGate"]], "apply_grover() (in module sympy.physics.quantum.grover)": [[159, "sympy.physics.quantum.grover.apply_grover"]], "grover_iteration() (in module sympy.physics.quantum.grover)": [[159, "sympy.physics.quantum.grover.grover_iteration"]], "search_function (sympy.physics.quantum.grover.oraclegate property)": [[159, "sympy.physics.quantum.grover.OracleGate.search_function"]], "superposition_basis() (in module sympy.physics.quantum.grover)": [[159, "sympy.physics.quantum.grover.superposition_basis"]], "sympy.physics.quantum.grover": [[159, "module-sympy.physics.quantum.grover"]], "targets (sympy.physics.quantum.grover.oraclegate property)": [[159, "sympy.physics.quantum.grover.OracleGate.targets"]], "complexspace (class in sympy.physics.quantum.hilbert)": [[160, "sympy.physics.quantum.hilbert.ComplexSpace"]], "directsumhilbertspace (class in sympy.physics.quantum.hilbert)": [[160, "sympy.physics.quantum.hilbert.DirectSumHilbertSpace"]], "fockspace (class in sympy.physics.quantum.hilbert)": [[160, "sympy.physics.quantum.hilbert.FockSpace"]], "hilbertspace (class in sympy.physics.quantum.hilbert)": [[160, "sympy.physics.quantum.hilbert.HilbertSpace"]], "l2 (class in sympy.physics.quantum.hilbert)": [[160, "sympy.physics.quantum.hilbert.L2"]], "tensorpowerhilbertspace (class in sympy.physics.quantum.hilbert)": [[160, "sympy.physics.quantum.hilbert.TensorPowerHilbertSpace"]], "tensorproducthilbertspace (class in sympy.physics.quantum.hilbert)": [[160, "sympy.physics.quantum.hilbert.TensorProductHilbertSpace"]], "dimension (sympy.physics.quantum.hilbert.hilbertspace property)": [[160, "sympy.physics.quantum.hilbert.HilbertSpace.dimension"]], "eval() (sympy.physics.quantum.hilbert.directsumhilbertspace class method)": [[160, "sympy.physics.quantum.hilbert.DirectSumHilbertSpace.eval"]], "eval() (sympy.physics.quantum.hilbert.tensorproducthilbertspace class method)": [[160, "sympy.physics.quantum.hilbert.TensorProductHilbertSpace.eval"]], "spaces (sympy.physics.quantum.hilbert.directsumhilbertspace property)": [[160, "sympy.physics.quantum.hilbert.DirectSumHilbertSpace.spaces"]], "spaces (sympy.physics.quantum.hilbert.tensorproducthilbertspace property)": [[160, "sympy.physics.quantum.hilbert.TensorProductHilbertSpace.spaces"]], "sympy.physics.quantum.hilbert": [[160, "module-sympy.physics.quantum.hilbert"]], "innerproduct (class in sympy.physics.quantum.innerproduct)": [[162, "sympy.physics.quantum.innerproduct.InnerProduct"]], "sympy.physics.quantum.innerproduct": [[162, "module-sympy.physics.quantum.innerproduct"]], "differentialoperator (class in sympy.physics.quantum.operator)": [[163, "sympy.physics.quantum.operator.DifferentialOperator"]], "hermitianoperator (class in sympy.physics.quantum.operator)": [[163, "sympy.physics.quantum.operator.HermitianOperator"]], "identityoperator (class in sympy.physics.quantum.operator)": [[163, "sympy.physics.quantum.operator.IdentityOperator"]], "operator (class in sympy.physics.quantum.operator)": [[163, "sympy.physics.quantum.operator.Operator"]], "outerproduct (class in sympy.physics.quantum.operator)": [[163, "sympy.physics.quantum.operator.OuterProduct"]], "unitaryoperator (class in sympy.physics.quantum.operator)": [[163, "sympy.physics.quantum.operator.UnitaryOperator"]], "bra (sympy.physics.quantum.operator.outerproduct property)": [[163, "sympy.physics.quantum.operator.OuterProduct.bra"]], "expr (sympy.physics.quantum.operator.differentialoperator property)": [[163, "sympy.physics.quantum.operator.DifferentialOperator.expr"]], "free_symbols (sympy.physics.quantum.operator.differentialoperator property)": [[163, "sympy.physics.quantum.operator.DifferentialOperator.free_symbols"]], "function (sympy.physics.quantum.operator.differentialoperator property)": [[163, "sympy.physics.quantum.operator.DifferentialOperator.function"]], "ket (sympy.physics.quantum.operator.outerproduct property)": [[163, "sympy.physics.quantum.operator.OuterProduct.ket"]], "sympy.physics.quantum.operator": [[163, "module-sympy.physics.quantum.operator"]], "variables (sympy.physics.quantum.operator.differentialoperator property)": [[163, "sympy.physics.quantum.operator.DifferentialOperator.variables"]], "operators_to_state() (in module sympy.physics.quantum.operatorset)": [[164, "sympy.physics.quantum.operatorset.operators_to_state"]], "state_to_operators() (in module sympy.physics.quantum.operatorset)": [[164, "sympy.physics.quantum.operatorset.state_to_operators"]], "sympy.physics.quantum.operatorset": [[164, "module-sympy.physics.quantum.operatorset"]], "piabbra (class in sympy.physics.quantum.piab)": [[165, "sympy.physics.quantum.piab.PIABBra"]], "piabhamiltonian (class in sympy.physics.quantum.piab)": [[165, "sympy.physics.quantum.piab.PIABHamiltonian"]], "piabket (class in sympy.physics.quantum.piab)": [[165, "sympy.physics.quantum.piab.PIABKet"]], "sympy.physics.quantum.piab": [[165, "module-sympy.physics.quantum.piab"]], "qapply() (in module sympy.physics.quantum.qapply)": [[166, "sympy.physics.quantum.qapply.qapply"]], "sympy.physics.quantum.qapply": [[166, "module-sympy.physics.quantum.qapply"]], "iqft (class in sympy.physics.quantum.qft)": [[167, "sympy.physics.quantum.qft.IQFT"]], "qft (class in sympy.physics.quantum.qft)": [[167, "sympy.physics.quantum.qft.QFT"]], "rk (in module sympy.physics.quantum.qft)": [[167, "sympy.physics.quantum.qft.Rk"]], "rkgate (class in sympy.physics.quantum.qft)": [[167, "sympy.physics.quantum.qft.RkGate"]], "decompose() (sympy.physics.quantum.qft.iqft method)": [[167, "sympy.physics.quantum.qft.IQFT.decompose"]], "decompose() (sympy.physics.quantum.qft.qft method)": [[167, "sympy.physics.quantum.qft.QFT.decompose"]], "sympy.physics.quantum.qft": [[167, "module-sympy.physics.quantum.qft"]], "intqubit (class in sympy.physics.quantum.qubit)": [[168, "sympy.physics.quantum.qubit.IntQubit"]], "intqubitbra (class in sympy.physics.quantum.qubit)": [[168, "sympy.physics.quantum.qubit.IntQubitBra"]], "qubit (class in sympy.physics.quantum.qubit)": [[168, "sympy.physics.quantum.qubit.Qubit"]], "qubitbra (class in sympy.physics.quantum.qubit)": [[168, "sympy.physics.quantum.qubit.QubitBra"]], "matrix_to_density() (in module sympy.physics.quantum.qubit)": [[168, "sympy.physics.quantum.qubit.matrix_to_density"]], "matrix_to_qubit() (in module sympy.physics.quantum.qubit)": [[168, "sympy.physics.quantum.qubit.matrix_to_qubit"]], "measure_all() (in module sympy.physics.quantum.qubit)": [[168, "sympy.physics.quantum.qubit.measure_all"]], "measure_all_oneshot() (in module sympy.physics.quantum.qubit)": [[168, "sympy.physics.quantum.qubit.measure_all_oneshot"]], "measure_partial() (in module sympy.physics.quantum.qubit)": [[168, "sympy.physics.quantum.qubit.measure_partial"]], "measure_partial_oneshot() (in module sympy.physics.quantum.qubit)": [[168, "sympy.physics.quantum.qubit.measure_partial_oneshot"]], "qubit_to_matrix() (in module sympy.physics.quantum.qubit)": [[168, "sympy.physics.quantum.qubit.qubit_to_matrix"]], "sympy.physics.quantum.qubit": [[168, "module-sympy.physics.quantum.qubit"]], "enumerate_states() (in module sympy.physics.quantum.represent)": [[169, "sympy.physics.quantum.represent.enumerate_states"]], "get_basis() (in module sympy.physics.quantum.represent)": [[169, "sympy.physics.quantum.represent.get_basis"]], "integrate_result() (in module sympy.physics.quantum.represent)": [[169, "sympy.physics.quantum.represent.integrate_result"]], "rep_expectation() (in module sympy.physics.quantum.represent)": [[169, "sympy.physics.quantum.represent.rep_expectation"]], "rep_innerproduct() (in module sympy.physics.quantum.represent)": [[169, "sympy.physics.quantum.represent.rep_innerproduct"]], "represent() (in module sympy.physics.quantum.represent)": [[169, "sympy.physics.quantum.represent.represent"]], "sympy.physics.quantum.represent": [[169, "module-sympy.physics.quantum.represent"]], "cmod (class in sympy.physics.quantum.shor)": [[170, "sympy.physics.quantum.shor.CMod"]], "n (sympy.physics.quantum.shor.cmod property)": [[170, "sympy.physics.quantum.shor.CMod.N"]], "a (sympy.physics.quantum.shor.cmod property)": [[170, "sympy.physics.quantum.shor.CMod.a"]], "period_find() (in module sympy.physics.quantum.shor)": [[170, "sympy.physics.quantum.shor.period_find"]], "shor() (in module sympy.physics.quantum.shor)": [[170, "sympy.physics.quantum.shor.shor"]], "sympy.physics.quantum.shor": [[170, "module-sympy.physics.quantum.shor"]], "t (sympy.physics.quantum.shor.cmod property)": [[170, "sympy.physics.quantum.shor.CMod.t"]], "d() (sympy.physics.quantum.spin.rotation class method)": [[171, "sympy.physics.quantum.spin.Rotation.D"], [171, "sympy.physics.quantum.spin.Rotation.d"]], "j2op (class in sympy.physics.quantum.spin)": [[171, "sympy.physics.quantum.spin.J2Op"]], "jxbra (class in sympy.physics.quantum.spin)": [[171, "sympy.physics.quantum.spin.JxBra"]], "jxbracoupled (class in sympy.physics.quantum.spin)": [[171, "sympy.physics.quantum.spin.JxBraCoupled"]], "jxket (class in sympy.physics.quantum.spin)": [[171, "sympy.physics.quantum.spin.JxKet"]], "jxketcoupled (class in sympy.physics.quantum.spin)": [[171, "sympy.physics.quantum.spin.JxKetCoupled"]], "jybra (class in sympy.physics.quantum.spin)": [[171, "sympy.physics.quantum.spin.JyBra"]], "jybracoupled (class in sympy.physics.quantum.spin)": [[171, "sympy.physics.quantum.spin.JyBraCoupled"]], "jyket (class in sympy.physics.quantum.spin)": [[171, "sympy.physics.quantum.spin.JyKet"]], "jyketcoupled (class in sympy.physics.quantum.spin)": [[171, "sympy.physics.quantum.spin.JyKetCoupled"]], "jzbra (class in sympy.physics.quantum.spin)": [[171, "sympy.physics.quantum.spin.JzBra"]], "jzbracoupled (class in sympy.physics.quantum.spin)": [[171, "sympy.physics.quantum.spin.JzBraCoupled"]], "jzket (class in sympy.physics.quantum.spin)": [[171, "sympy.physics.quantum.spin.JzKet"]], "jzketcoupled (class in sympy.physics.quantum.spin)": [[171, "sympy.physics.quantum.spin.JzKetCoupled"]], "jzop (class in sympy.physics.quantum.spin)": [[171, "sympy.physics.quantum.spin.JzOp"]], "rotation (class in sympy.physics.quantum.spin)": [[171, "sympy.physics.quantum.spin.Rotation"]], "wignerd (class in sympy.physics.quantum.spin)": [[171, "sympy.physics.quantum.spin.WignerD"]], "couple() (in module sympy.physics.quantum.spin)": [[171, "sympy.physics.quantum.spin.couple"]], "sympy.physics.quantum.spin": [[171, "module-sympy.physics.quantum.spin"]], "uncouple() (in module sympy.physics.quantum.spin)": [[171, "sympy.physics.quantum.spin.uncouple"]], "bra (class in sympy.physics.quantum.state)": [[172, "sympy.physics.quantum.state.Bra"]], "brabase (class in sympy.physics.quantum.state)": [[172, "sympy.physics.quantum.state.BraBase"]], "ket (class in sympy.physics.quantum.state)": [[172, "sympy.physics.quantum.state.Ket"]], "ketbase (class in sympy.physics.quantum.state)": [[172, "sympy.physics.quantum.state.KetBase"]], "orthogonalbra (class in sympy.physics.quantum.state)": [[172, "sympy.physics.quantum.state.OrthogonalBra"]], "orthogonalket (class in sympy.physics.quantum.state)": [[172, "sympy.physics.quantum.state.OrthogonalKet"]], "orthogonalstate (class in sympy.physics.quantum.state)": [[172, "sympy.physics.quantum.state.OrthogonalState"]], "state (class in sympy.physics.quantum.state)": [[172, "sympy.physics.quantum.state.State"]], "statebase (class in sympy.physics.quantum.state)": [[172, "sympy.physics.quantum.state.StateBase"]], "timedepbra (class in sympy.physics.quantum.state)": [[172, "sympy.physics.quantum.state.TimeDepBra"]], "timedepket (class in sympy.physics.quantum.state)": [[172, "sympy.physics.quantum.state.TimeDepKet"]], "timedepstate (class in sympy.physics.quantum.state)": [[172, "sympy.physics.quantum.state.TimeDepState"]], "wavefunction (class in sympy.physics.quantum.state)": [[172, "sympy.physics.quantum.state.Wavefunction"]], "dual (sympy.physics.quantum.state.statebase property)": [[172, "sympy.physics.quantum.state.StateBase.dual"]], "dual_class() (sympy.physics.quantum.state.statebase class method)": [[172, "sympy.physics.quantum.state.StateBase.dual_class"]], "expr (sympy.physics.quantum.state.wavefunction property)": [[172, "sympy.physics.quantum.state.Wavefunction.expr"]], "is_commutative (sympy.physics.quantum.state.wavefunction property)": [[172, "sympy.physics.quantum.state.Wavefunction.is_commutative"]], "is_normalized (sympy.physics.quantum.state.wavefunction property)": [[172, "sympy.physics.quantum.state.Wavefunction.is_normalized"]], "label (sympy.physics.quantum.state.timedepstate property)": [[172, "sympy.physics.quantum.state.TimeDepState.label"]], "limits (sympy.physics.quantum.state.wavefunction property)": [[172, "sympy.physics.quantum.state.Wavefunction.limits"]], "norm (sympy.physics.quantum.state.wavefunction property)": [[172, "sympy.physics.quantum.state.Wavefunction.norm"]], "normalize() (sympy.physics.quantum.state.wavefunction method)": [[172, "sympy.physics.quantum.state.Wavefunction.normalize"]], "operators (sympy.physics.quantum.state.statebase property)": [[172, "sympy.physics.quantum.state.StateBase.operators"]], "prob() (sympy.physics.quantum.state.wavefunction method)": [[172, "sympy.physics.quantum.state.Wavefunction.prob"]], "sympy.physics.quantum.state": [[172, "module-sympy.physics.quantum.state"]], "time (sympy.physics.quantum.state.timedepstate property)": [[172, "sympy.physics.quantum.state.TimeDepState.time"]], "variables (sympy.physics.quantum.state.wavefunction property)": [[172, "sympy.physics.quantum.state.Wavefunction.variables"]], "tensorproduct (class in sympy.physics.quantum.tensorproduct)": [[173, "sympy.physics.quantum.tensorproduct.TensorProduct"]], "sympy.physics.quantum.tensorproduct": [[173, "module-sympy.physics.quantum.tensorproduct"]], "tensor_product_simp() (in module sympy.physics.quantum.tensorproduct)": [[173, "sympy.physics.quantum.tensorproduct.tensor_product_simp"]], "annihilateboson (class in sympy.physics.secondquant)": [[174, "sympy.physics.secondquant.AnnihilateBoson"]], "annihilatefermion (class in sympy.physics.secondquant)": [[174, "sympy.physics.secondquant.AnnihilateFermion"]], "antisymmetrictensor (class in sympy.physics.secondquant)": [[174, "sympy.physics.secondquant.AntiSymmetricTensor"]], "b (in module sympy.physics.secondquant)": [[174, "sympy.physics.secondquant.B"]], "bbra (in module sympy.physics.secondquant)": [[174, "sympy.physics.secondquant.BBra"]], "bket (in module sympy.physics.secondquant)": [[174, "sympy.physics.secondquant.BKet"]], "bd (in module sympy.physics.secondquant)": [[174, "sympy.physics.secondquant.Bd"]], "bosonicbasis (class in sympy.physics.secondquant)": [[174, "sympy.physics.secondquant.BosonicBasis"]], "commutator (class in sympy.physics.secondquant)": [[174, "sympy.physics.secondquant.Commutator"]], "createboson (class in sympy.physics.secondquant)": [[174, "sympy.physics.secondquant.CreateBoson"]], "createfermion (class in sympy.physics.secondquant)": [[174, "sympy.physics.secondquant.CreateFermion"]], "dagger (class in sympy.physics.secondquant)": [[174, "sympy.physics.secondquant.Dagger"]], "f (in module sympy.physics.secondquant)": [[174, "sympy.physics.secondquant.F"]], "fbra (in module sympy.physics.secondquant)": [[174, "sympy.physics.secondquant.FBra"]], "fket (in module sympy.physics.secondquant)": [[174, "sympy.physics.secondquant.FKet"]], "fd (in module sympy.physics.secondquant)": [[174, "sympy.physics.secondquant.Fd"]], "fixedbosonicbasis (class in sympy.physics.secondquant)": [[174, "sympy.physics.secondquant.FixedBosonicBasis"]], "fockstate (class in sympy.physics.secondquant)": [[174, "sympy.physics.secondquant.FockState"]], "fockstatebosonbra (class in sympy.physics.secondquant)": [[174, "sympy.physics.secondquant.FockStateBosonBra"]], "fockstatebosonket (class in sympy.physics.secondquant)": [[174, "sympy.physics.secondquant.FockStateBosonKet"]], "fockstatebra (class in sympy.physics.secondquant)": [[174, "sympy.physics.secondquant.FockStateBra"]], "fockstatefermionbra (class in sympy.physics.secondquant)": [[174, "sympy.physics.secondquant.FockStateFermionBra"]], "fockstatefermionket (class in sympy.physics.secondquant)": [[174, "sympy.physics.secondquant.FockStateFermionKet"]], "fockstateket (class in sympy.physics.secondquant)": [[174, "sympy.physics.secondquant.FockStateKet"]], "innerproduct (class in sympy.physics.secondquant)": [[174, "sympy.physics.secondquant.InnerProduct"]], "kroneckerdelta (class in sympy.physics.secondquant)": [[174, "sympy.physics.secondquant.KroneckerDelta"]], "no (class in sympy.physics.secondquant)": [[174, "sympy.physics.secondquant.NO"]], "permutationoperator (class in sympy.physics.secondquant)": [[174, "sympy.physics.secondquant.PermutationOperator"]], "varbosonicbasis (class in sympy.physics.secondquant)": [[174, "sympy.physics.secondquant.VarBosonicBasis"]], "apply_operator() (sympy.physics.secondquant.annihilateboson method)": [[174, "sympy.physics.secondquant.AnnihilateBoson.apply_operator"]], "apply_operator() (sympy.physics.secondquant.annihilatefermion method)": [[174, "sympy.physics.secondquant.AnnihilateFermion.apply_operator"]], "apply_operator() (sympy.physics.secondquant.createboson method)": [[174, "sympy.physics.secondquant.CreateBoson.apply_operator"]], "apply_operator() (sympy.physics.secondquant.createfermion method)": [[174, "sympy.physics.secondquant.CreateFermion.apply_operator"]], "apply_operators() (in module sympy.physics.secondquant)": [[174, "sympy.physics.secondquant.apply_operators"]], "bra (sympy.physics.secondquant.innerproduct property)": [[174, "sympy.physics.secondquant.InnerProduct.bra"]], "contraction() (in module sympy.physics.secondquant)": [[174, "sympy.physics.secondquant.contraction"]], "doit() (sympy.physics.secondquant.commutator method)": [[174, "sympy.physics.secondquant.Commutator.doit"]], "doit() (sympy.physics.secondquant.no method)": [[174, "sympy.physics.secondquant.NO.doit"]], "eval() (sympy.physics.secondquant.commutator class method)": [[174, "sympy.physics.secondquant.Commutator.eval"]], "eval() (sympy.physics.secondquant.dagger class method)": [[174, "sympy.physics.secondquant.Dagger.eval"]], "eval() (sympy.physics.secondquant.kroneckerdelta class method)": [[174, "sympy.physics.secondquant.KroneckerDelta.eval"]], "evaluate_deltas() (in module sympy.physics.secondquant)": [[174, "sympy.physics.secondquant.evaluate_deltas"]], "get_permuted() (sympy.physics.secondquant.permutationoperator method)": [[174, "sympy.physics.secondquant.PermutationOperator.get_permuted"]], "get_subno() (sympy.physics.secondquant.no method)": [[174, "sympy.physics.secondquant.NO.get_subNO"]], "has_q_annihilators (sympy.physics.secondquant.no property)": [[174, "sympy.physics.secondquant.NO.has_q_annihilators"]], "has_q_creators (sympy.physics.secondquant.no property)": [[174, "sympy.physics.secondquant.NO.has_q_creators"]], "index() (sympy.physics.secondquant.fixedbosonicbasis method)": [[174, "sympy.physics.secondquant.FixedBosonicBasis.index"]], "index() (sympy.physics.secondquant.varbosonicbasis method)": [[174, "sympy.physics.secondquant.VarBosonicBasis.index"]], "indices_contain_equal_information (sympy.physics.secondquant.kroneckerdelta property)": [[174, "sympy.physics.secondquant.KroneckerDelta.indices_contain_equal_information"]], "is_above_fermi (sympy.physics.secondquant.kroneckerdelta property)": [[174, "sympy.physics.secondquant.KroneckerDelta.is_above_fermi"]], "is_below_fermi (sympy.physics.secondquant.kroneckerdelta property)": [[174, "sympy.physics.secondquant.KroneckerDelta.is_below_fermi"]], "is_only_above_fermi (sympy.physics.secondquant.kroneckerdelta property)": [[174, "sympy.physics.secondquant.KroneckerDelta.is_only_above_fermi"]], "is_only_below_fermi (sympy.physics.secondquant.kroneckerdelta property)": [[174, "sympy.physics.secondquant.KroneckerDelta.is_only_below_fermi"]], "is_only_q_annihilator (sympy.physics.secondquant.annihilatefermion property)": [[174, "sympy.physics.secondquant.AnnihilateFermion.is_only_q_annihilator"]], "is_only_q_annihilator (sympy.physics.secondquant.createfermion property)": [[174, "sympy.physics.secondquant.CreateFermion.is_only_q_annihilator"]], "is_only_q_creator (sympy.physics.secondquant.annihilatefermion property)": [[174, "sympy.physics.secondquant.AnnihilateFermion.is_only_q_creator"]], "is_only_q_creator (sympy.physics.secondquant.createfermion property)": [[174, "sympy.physics.secondquant.CreateFermion.is_only_q_creator"]], "is_q_annihilator (sympy.physics.secondquant.annihilatefermion property)": [[174, "sympy.physics.secondquant.AnnihilateFermion.is_q_annihilator"]], "is_q_annihilator (sympy.physics.secondquant.createfermion property)": [[174, "sympy.physics.secondquant.CreateFermion.is_q_annihilator"]], "is_q_creator (sympy.physics.secondquant.annihilatefermion property)": [[174, "sympy.physics.secondquant.AnnihilateFermion.is_q_creator"]], "is_q_creator (sympy.physics.secondquant.createfermion property)": [[174, "sympy.physics.secondquant.CreateFermion.is_q_creator"]], "iter_q_annihilators() (sympy.physics.secondquant.no method)": [[174, "sympy.physics.secondquant.NO.iter_q_annihilators"]], "iter_q_creators() (sympy.physics.secondquant.no method)": [[174, "sympy.physics.secondquant.NO.iter_q_creators"]], "ket (sympy.physics.secondquant.innerproduct property)": [[174, "sympy.physics.secondquant.InnerProduct.ket"]], "killable_index (sympy.physics.secondquant.kroneckerdelta property)": [[174, "sympy.physics.secondquant.KroneckerDelta.killable_index"]], "lower (sympy.physics.secondquant.antisymmetrictensor property)": [[174, "sympy.physics.secondquant.AntiSymmetricTensor.lower"]], "matrix_rep() (in module sympy.physics.secondquant)": [[174, "sympy.physics.secondquant.matrix_rep"]], "preferred_index (sympy.physics.secondquant.kroneckerdelta property)": [[174, "sympy.physics.secondquant.KroneckerDelta.preferred_index"]], "simplify_index_permutations() (in module sympy.physics.secondquant)": [[174, "sympy.physics.secondquant.simplify_index_permutations"]], "state() (sympy.physics.secondquant.fixedbosonicbasis method)": [[174, "sympy.physics.secondquant.FixedBosonicBasis.state"]], "state() (sympy.physics.secondquant.varbosonicbasis method)": [[174, "sympy.physics.secondquant.VarBosonicBasis.state"]], "substitute_dummies() (in module sympy.physics.secondquant)": [[174, "sympy.physics.secondquant.substitute_dummies"]], "symbol (sympy.physics.secondquant.antisymmetrictensor property)": [[174, "sympy.physics.secondquant.AntiSymmetricTensor.symbol"]], "sympy.physics.secondquant": [[174, "module-sympy.physics.secondquant"]], "upper (sympy.physics.secondquant.antisymmetrictensor property)": [[174, "sympy.physics.secondquant.AntiSymmetricTensor.upper"]], "wicks() (in module sympy.physics.secondquant)": [[174, "sympy.physics.secondquant.wicks"]], "e_nl() (in module sympy.physics.sho)": [[175, "sympy.physics.sho.E_nl"]], "r_nl() (in module sympy.physics.sho)": [[175, "sympy.physics.sho.R_nl"]], "sympy.physics.sho": [[175, "module-sympy.physics.sho"]], "dimension (class in sympy.physics.units.dimensions)": [[176, "sympy.physics.units.dimensions.Dimension"]], "dimensionsystem (class in sympy.physics.units.dimensions)": [[176, "sympy.physics.units.dimensions.DimensionSystem"]], "can_transf_matrix (sympy.physics.units.dimensions.dimensionsystem property)": [[176, "sympy.physics.units.dimensions.DimensionSystem.can_transf_matrix"]], "dim (sympy.physics.units.dimensions.dimensionsystem property)": [[176, "sympy.physics.units.dimensions.DimensionSystem.dim"]], "dim_can_vector() (sympy.physics.units.dimensions.dimensionsystem method)": [[176, "sympy.physics.units.dimensions.DimensionSystem.dim_can_vector"]], "dim_vector() (sympy.physics.units.dimensions.dimensionsystem method)": [[176, "sympy.physics.units.dimensions.DimensionSystem.dim_vector"]], "has_integer_powers() (sympy.physics.units.dimensions.dimension method)": [[176, "sympy.physics.units.dimensions.Dimension.has_integer_powers"]], "inv_can_transf_matrix (sympy.physics.units.dimensions.dimensionsystem property)": [[176, "sympy.physics.units.dimensions.DimensionSystem.inv_can_transf_matrix"]], "is_consistent (sympy.physics.units.dimensions.dimensionsystem property)": [[176, "sympy.physics.units.dimensions.DimensionSystem.is_consistent"]], "is_dimensionless() (sympy.physics.units.dimensions.dimensionsystem method)": [[176, "sympy.physics.units.dimensions.DimensionSystem.is_dimensionless"]], "list_can_dims (sympy.physics.units.dimensions.dimensionsystem property)": [[176, "sympy.physics.units.dimensions.DimensionSystem.list_can_dims"]], "print_dim_base() (sympy.physics.units.dimensions.dimensionsystem method)": [[176, "sympy.physics.units.dimensions.DimensionSystem.print_dim_base"]], "sympy.physics.units.dimensions": [[176, "module-sympy.physics.units.dimensions"]], "prefix (class in sympy.physics.units.prefixes)": [[180, "sympy.physics.units.prefixes.Prefix"]], "sympy.physics.units.prefixes": [[180, "module-sympy.physics.units.prefixes"]], "quantity (class in sympy.physics.units.quantities)": [[181, "sympy.physics.units.quantities.Quantity"]], "abbrev (sympy.physics.units.quantities.quantity property)": [[181, "sympy.physics.units.quantities.Quantity.abbrev"]], "convert_to() (in module sympy.physics.units.util)": [[181, "sympy.physics.units.util.convert_to"]], "convert_to() (sympy.physics.units.quantities.quantity method)": [[181, "sympy.physics.units.quantities.Quantity.convert_to"]], "free_symbols (sympy.physics.units.quantities.quantity property)": [[181, "sympy.physics.units.quantities.Quantity.free_symbols"]], "is_prefixed (sympy.physics.units.quantities.quantity property)": [[181, "sympy.physics.units.quantities.Quantity.is_prefixed"]], "scale_factor (sympy.physics.units.quantities.quantity property)": [[181, "sympy.physics.units.quantities.Quantity.scale_factor"]], "set_global_relative_scale_factor() (sympy.physics.units.quantities.quantity method)": [[181, "sympy.physics.units.quantities.Quantity.set_global_relative_scale_factor"]], "sympy.physics.units.quantities": [[181, "module-sympy.physics.units.quantities"]], "sympy.physics.units.util": [[181, "module-sympy.physics.units.util"]], "unitsystem (class in sympy.physics.units.unitsystem)": [[182, "sympy.physics.units.unitsystem.UnitSystem"]], "dim (sympy.physics.units.unitsystem.unitsystem property)": [[182, "sympy.physics.units.unitsystem.UnitSystem.dim"]], "extend() (sympy.physics.units.unitsystem.unitsystem method)": [[182, "sympy.physics.units.unitsystem.UnitSystem.extend"]], "get_units_non_prefixed() (sympy.physics.units.unitsystem.unitsystem method)": [[182, "sympy.physics.units.unitsystem.UnitSystem.get_units_non_prefixed"]], "is_consistent (sympy.physics.units.unitsystem.unitsystem property)": [[182, "sympy.physics.units.unitsystem.UnitSystem.is_consistent"]], "sympy.physics.units.unitsystem": [[182, "module-sympy.physics.units.unitsystem"]], "coordinatesym (class in sympy.physics.vector.frame)": [[184, "sympy.physics.vector.frame.CoordinateSym"]], "dyadic (class in sympy.physics.vector.dyadic)": [[184, "sympy.physics.vector.dyadic.Dyadic"]], "referenceframe (class in sympy.physics.vector.frame)": [[184, "sympy.physics.vector.frame.ReferenceFrame"]], "vector (class in sympy.physics.vector.vector)": [[184, "sympy.physics.vector.vector.Vector"]], "ang_acc_in() (sympy.physics.vector.frame.referenceframe method)": [[184, "sympy.physics.vector.frame.ReferenceFrame.ang_acc_in"]], "ang_vel_in() (sympy.physics.vector.frame.referenceframe method)": [[184, "sympy.physics.vector.frame.ReferenceFrame.ang_vel_in"]], "angle_between() (sympy.physics.vector.vector.vector method)": [[184, "sympy.physics.vector.vector.Vector.angle_between"]], "applyfunc() (sympy.physics.vector.dyadic.dyadic method)": [[184, "sympy.physics.vector.dyadic.Dyadic.applyfunc"]], "applyfunc() (sympy.physics.vector.vector.vector method)": [[184, "sympy.physics.vector.vector.Vector.applyfunc"]], "cross() (sympy.physics.vector.dyadic.dyadic method)": [[184, "sympy.physics.vector.dyadic.Dyadic.cross"]], "cross() (sympy.physics.vector.vector.vector method)": [[184, "sympy.physics.vector.vector.Vector.cross"]], "dcm() (sympy.physics.vector.frame.referenceframe method)": [[184, "sympy.physics.vector.frame.ReferenceFrame.dcm"]], "diff() (sympy.physics.vector.vector.vector method)": [[184, "sympy.physics.vector.vector.Vector.diff"]], "doit() (sympy.physics.vector.dyadic.dyadic method)": [[184, "sympy.physics.vector.dyadic.Dyadic.doit"]], "doit() (sympy.physics.vector.vector.vector method)": [[184, "sympy.physics.vector.vector.Vector.doit"]], "dot() (sympy.physics.vector.dyadic.dyadic method)": [[184, "sympy.physics.vector.dyadic.Dyadic.dot"]], "dot() (sympy.physics.vector.vector.vector method)": [[184, "sympy.physics.vector.vector.Vector.dot"]], "dt() (sympy.physics.vector.dyadic.dyadic method)": [[184, "sympy.physics.vector.dyadic.Dyadic.dt"]], "dt() (sympy.physics.vector.vector.vector method)": [[184, "sympy.physics.vector.vector.Vector.dt"]], "express() (sympy.physics.vector.dyadic.dyadic method)": [[184, "sympy.physics.vector.dyadic.Dyadic.express"]], "express() (sympy.physics.vector.vector.vector method)": [[184, "sympy.physics.vector.vector.Vector.express"]], "free_dynamicsymbols() (sympy.physics.vector.vector.vector method)": [[184, "sympy.physics.vector.vector.Vector.free_dynamicsymbols"]], "free_symbols() (sympy.physics.vector.vector.vector method)": [[184, "sympy.physics.vector.vector.Vector.free_symbols"]], "func (sympy.physics.vector.dyadic.dyadic property)": [[184, "sympy.physics.vector.dyadic.Dyadic.func"]], "func (sympy.physics.vector.vector.vector property)": [[184, "sympy.physics.vector.vector.Vector.func"]], "magnitude() (sympy.physics.vector.vector.vector method)": [[184, "sympy.physics.vector.vector.Vector.magnitude"]], "normalize() (sympy.physics.vector.vector.vector method)": [[184, "sympy.physics.vector.vector.Vector.normalize"]], "orient() (sympy.physics.vector.frame.referenceframe method)": [[184, "sympy.physics.vector.frame.ReferenceFrame.orient"]], "orient_axis() (sympy.physics.vector.frame.referenceframe method)": [[184, "sympy.physics.vector.frame.ReferenceFrame.orient_axis"]], "orient_body_fixed() (sympy.physics.vector.frame.referenceframe method)": [[184, "sympy.physics.vector.frame.ReferenceFrame.orient_body_fixed"]], "orient_explicit() (sympy.physics.vector.frame.referenceframe method)": [[184, "sympy.physics.vector.frame.ReferenceFrame.orient_explicit"]], "orient_quaternion() (sympy.physics.vector.frame.referenceframe method)": [[184, "sympy.physics.vector.frame.ReferenceFrame.orient_quaternion"]], "orient_space_fixed() (sympy.physics.vector.frame.referenceframe method)": [[184, "sympy.physics.vector.frame.ReferenceFrame.orient_space_fixed"]], "orientnew() (sympy.physics.vector.frame.referenceframe method)": [[184, "sympy.physics.vector.frame.ReferenceFrame.orientnew"]], "outer() (sympy.physics.vector.vector.vector method)": [[184, "sympy.physics.vector.vector.Vector.outer"]], "partial_velocity() (sympy.physics.vector.frame.referenceframe method)": [[184, "sympy.physics.vector.frame.ReferenceFrame.partial_velocity"]], "separate() (sympy.physics.vector.vector.vector method)": [[184, "sympy.physics.vector.vector.Vector.separate"]], "set_ang_acc() (sympy.physics.vector.frame.referenceframe method)": [[184, "sympy.physics.vector.frame.ReferenceFrame.set_ang_acc"]], "set_ang_vel() (sympy.physics.vector.frame.referenceframe method)": [[184, "sympy.physics.vector.frame.ReferenceFrame.set_ang_vel"]], "simplify() (sympy.physics.vector.dyadic.dyadic method)": [[184, "sympy.physics.vector.dyadic.Dyadic.simplify"]], "simplify() (sympy.physics.vector.vector.vector method)": [[184, "sympy.physics.vector.vector.Vector.simplify"]], "subs() (sympy.physics.vector.dyadic.dyadic method)": [[184, "sympy.physics.vector.dyadic.Dyadic.subs"]], "subs() (sympy.physics.vector.vector.vector method)": [[184, "sympy.physics.vector.vector.Vector.subs"]], "to_matrix() (sympy.physics.vector.dyadic.dyadic method)": [[184, "sympy.physics.vector.dyadic.Dyadic.to_matrix"]], "to_matrix() (sympy.physics.vector.vector.vector method)": [[184, "sympy.physics.vector.vector.Vector.to_matrix"]], "variable_map() (sympy.physics.vector.frame.referenceframe method)": [[184, "sympy.physics.vector.frame.ReferenceFrame.variable_map"]], "x (sympy.physics.vector.frame.referenceframe property)": [[184, "sympy.physics.vector.frame.ReferenceFrame.x"]], "xreplace() (sympy.physics.vector.dyadic.dyadic method)": [[184, "sympy.physics.vector.dyadic.Dyadic.xreplace"]], "xreplace() (sympy.physics.vector.vector.vector method)": [[184, "sympy.physics.vector.vector.Vector.xreplace"]], "y (sympy.physics.vector.frame.referenceframe property)": [[184, "sympy.physics.vector.frame.ReferenceFrame.y"]], "z (sympy.physics.vector.frame.referenceframe property)": [[184, "sympy.physics.vector.frame.ReferenceFrame.z"]], "curl() (in module sympy.physics.vector.fieldfunctions)": [[185, "sympy.physics.vector.fieldfunctions.curl"]], "divergence() (in module sympy.physics.vector.fieldfunctions)": [[185, "sympy.physics.vector.fieldfunctions.divergence"]], "gradient() (in module sympy.physics.vector.fieldfunctions)": [[185, "sympy.physics.vector.fieldfunctions.gradient"]], "is_conservative() (in module sympy.physics.vector.fieldfunctions)": [[185, "sympy.physics.vector.fieldfunctions.is_conservative"]], "is_solenoidal() (in module sympy.physics.vector.fieldfunctions)": [[185, "sympy.physics.vector.fieldfunctions.is_solenoidal"]], "scalar_potential() (in module sympy.physics.vector.fieldfunctions)": [[185, "sympy.physics.vector.fieldfunctions.scalar_potential"]], "scalar_potential_difference() (in module sympy.physics.vector.fieldfunctions)": [[185, "sympy.physics.vector.fieldfunctions.scalar_potential_difference"]], "cross() (in module sympy.physics.vector.functions)": [[186, "sympy.physics.vector.functions.cross"]], "dot() (in module sympy.physics.vector.functions)": [[186, "sympy.physics.vector.functions.dot"]], "dynamicsymbols() (in module sympy.physics.vector)": [[186, "sympy.physics.vector.dynamicsymbols"]], "express() (in module sympy.physics.vector.functions)": [[186, "sympy.physics.vector.functions.express"]], "outer() (in module sympy.physics.vector.functions)": [[186, "sympy.physics.vector.functions.outer"]], "time_derivative() (in module sympy.physics.vector.functions)": [[186, "sympy.physics.vector.functions.time_derivative"]], "point (class in sympy.physics.vector.point)": [[188, "sympy.physics.vector.point.Point"]], "a1pt_theory() (sympy.physics.vector.point.point method)": [[188, "sympy.physics.vector.point.Point.a1pt_theory"]], "a2pt_theory() (sympy.physics.vector.point.point method)": [[188, "sympy.physics.vector.point.Point.a2pt_theory"]], "acc() (sympy.physics.vector.point.point method)": [[188, "sympy.physics.vector.point.Point.acc"]], "get_motion_params() (in module sympy.physics.vector.functions)": [[188, "sympy.physics.vector.functions.get_motion_params"]], "kinematic_equations() (in module sympy.physics.vector.functions)": [[188, "sympy.physics.vector.functions.kinematic_equations"]], "locatenew() (sympy.physics.vector.point.point method)": [[188, "sympy.physics.vector.point.Point.locatenew"]], "partial_velocity() (in module sympy.physics.vector.functions)": [[188, "sympy.physics.vector.functions.partial_velocity"]], "partial_velocity() (sympy.physics.vector.point.point method)": [[188, "sympy.physics.vector.point.Point.partial_velocity"]], "pos_from() (sympy.physics.vector.point.point method)": [[188, "sympy.physics.vector.point.Point.pos_from"]], "set_acc() (sympy.physics.vector.point.point method)": [[188, "sympy.physics.vector.point.Point.set_acc"]], "set_pos() (sympy.physics.vector.point.point method)": [[188, "sympy.physics.vector.point.Point.set_pos"]], "set_vel() (sympy.physics.vector.point.point method)": [[188, "sympy.physics.vector.point.Point.set_vel"]], "sympy.physics.vector.functions": [[188, "module-sympy.physics.vector.functions"]], "sympy.physics.vector.point": [[188, "module-sympy.physics.vector.point"]], "v1pt_theory() (sympy.physics.vector.point.point method)": [[188, "sympy.physics.vector.point.Point.v1pt_theory"]], "v2pt_theory() (sympy.physics.vector.point.point method)": [[188, "sympy.physics.vector.point.Point.v2pt_theory"]], "vel() (sympy.physics.vector.point.point method)": [[188, "sympy.physics.vector.point.Point.vel"]], "init_vprinting() (in module sympy.physics.vector.printing)": [[189, "sympy.physics.vector.printing.init_vprinting"]], "vlatex() (in module sympy.physics.vector.printing)": [[189, "sympy.physics.vector.printing.vlatex"]], "vpprint() (in module sympy.physics.vector.printing)": [[189, "sympy.physics.vector.printing.vpprint"]], "vprint() (in module sympy.physics.vector.printing)": [[189, "sympy.physics.vector.printing.vprint"]], "sympy.physics.vector": [[191, "module-sympy.physics.vector"]], "clebsch_gordan() (in module sympy.physics.wigner)": [[194, "sympy.physics.wigner.clebsch_gordan"]], "dot_rot_grad_ynm() (in module sympy.physics.wigner)": [[194, "sympy.physics.wigner.dot_rot_grad_Ynm"]], "gaunt() (in module sympy.physics.wigner)": [[194, "sympy.physics.wigner.gaunt"]], "racah() (in module sympy.physics.wigner)": [[194, "sympy.physics.wigner.racah"]], "real_gaunt() (in module sympy.physics.wigner)": [[194, "sympy.physics.wigner.real_gaunt"]], "sympy.physics.wigner": [[194, "module-sympy.physics.wigner"]], "wigner_3j() (in module sympy.physics.wigner)": [[194, "sympy.physics.wigner.wigner_3j"]], "wigner_6j() (in module sympy.physics.wigner)": [[194, "sympy.physics.wigner.wigner_6j"]], "wigner_9j() (in module sympy.physics.wigner)": [[194, "sympy.physics.wigner.wigner_9j"]], "wigner_d() (in module sympy.physics.wigner)": [[194, "sympy.physics.wigner.wigner_d"]], "wigner_d_small() (in module sympy.physics.wigner)": [[194, "sympy.physics.wigner.wigner_d_small"]], "basebackend (class in sympy.plotting.plot)": [[195, "sympy.plotting.plot.BaseBackend"]], "baseseries (class in sympy.plotting.plot)": [[195, "sympy.plotting.plot.BaseSeries"]], "implicitseries (class in sympy.plotting.plot_implicit)": [[195, "sympy.plotting.plot_implicit.ImplicitSeries"]], "line2dbaseseries (class in sympy.plotting.plot)": [[195, "sympy.plotting.plot.Line2DBaseSeries"]], "line3dbaseseries (class in sympy.plotting.plot)": [[195, "sympy.plotting.plot.Line3DBaseSeries"]], "lineover1drangeseries (class in sympy.plotting.plot)": [[195, "sympy.plotting.plot.LineOver1DRangeSeries"]], "matplotlibbackend (class in sympy.plotting.plot)": [[195, "sympy.plotting.plot.MatplotlibBackend"]], "parametric2dlineseries (class in sympy.plotting.plot)": [[195, "sympy.plotting.plot.Parametric2DLineSeries"]], "parametric3dlineseries (class in sympy.plotting.plot)": [[195, "sympy.plotting.plot.Parametric3DLineSeries"]], "parametricsurfaceseries (class in sympy.plotting.plot)": [[195, "sympy.plotting.plot.ParametricSurfaceSeries"]], "plot (class in sympy.plotting.plot)": [[195, "sympy.plotting.plot.Plot"]], "plotgrid (class in sympy.plotting.plot)": [[195, "sympy.plotting.plot.PlotGrid"]], "surfacebaseseries (class in sympy.plotting.plot)": [[195, "sympy.plotting.plot.SurfaceBaseSeries"]], "surfaceover2drangeseries (class in sympy.plotting.plot)": [[195, "sympy.plotting.plot.SurfaceOver2DRangeSeries"]], "textbackend (class in sympy.plotting.plot)": [[195, "sympy.plotting.plot.TextBackend"]], "append() (sympy.plotting.plot.plot method)": [[195, "sympy.plotting.plot.Plot.append"]], "extend() (sympy.plotting.plot.plot method)": [[195, "sympy.plotting.plot.Plot.extend"]], "get_data() (sympy.plotting.plot.line2dbaseseries method)": [[195, "sympy.plotting.plot.Line2DBaseSeries.get_data"]], "get_points() (sympy.plotting.plot.lineover1drangeseries method)": [[195, "sympy.plotting.plot.LineOver1DRangeSeries.get_points"]], "get_points() (sympy.plotting.plot.parametric2dlineseries method)": [[195, "sympy.plotting.plot.Parametric2DLineSeries.get_points"]], "get_segments() (sympy.plotting.plot.matplotlibbackend static method)": [[195, "sympy.plotting.plot.MatplotlibBackend.get_segments"]], "plot() (in module sympy.plotting.plot)": [[195, "sympy.plotting.plot.plot"]], "plot3d() (in module sympy.plotting.plot)": [[195, "sympy.plotting.plot.plot3d"]], "plot3d_parametric_line() (in module sympy.plotting.plot)": [[195, "sympy.plotting.plot.plot3d_parametric_line"]], "plot3d_parametric_surface() (in module sympy.plotting.plot)": [[195, "sympy.plotting.plot.plot3d_parametric_surface"]], "plot_implicit() (in module sympy.plotting.plot_implicit)": [[195, "sympy.plotting.plot_implicit.plot_implicit"]], "plot_parametric() (in module sympy.plotting.plot)": [[195, "sympy.plotting.plot.plot_parametric"]], "process_series() (sympy.plotting.plot.matplotlibbackend method)": [[195, "sympy.plotting.plot.MatplotlibBackend.process_series"]], "sympy.plotting.plot": [[195, "module-sympy.plotting.plot"]], "sympy.plotting.pygletplot": [[195, "module-sympy.plotting.pygletplot"]], "textplot() (in module sympy.plotting.textplot)": [[195, "sympy.plotting.textplot.textplot"]], "extensionelement (class in sympy.polys.agca.extensions)": [[196, "sympy.polys.agca.extensions.ExtensionElement"]], "freemodule (class in sympy.polys.agca.modules)": [[196, "sympy.polys.agca.modules.FreeModule"]], "freemoduleelement (class in sympy.polys.agca.modules)": [[196, "sympy.polys.agca.modules.FreeModuleElement"]], "ideal (class in sympy.polys.agca.ideals)": [[196, "sympy.polys.agca.ideals.Ideal"]], "module (class in sympy.polys.agca.modules)": [[196, "sympy.polys.agca.modules.Module"]], "modulehomomorphism (class in sympy.polys.agca.homomorphisms)": [[196, "sympy.polys.agca.homomorphisms.ModuleHomomorphism"]], "monogenicfiniteextension (class in sympy.polys.agca.extensions)": [[196, "sympy.polys.agca.extensions.MonogenicFiniteExtension"]], "quotientmodule (class in sympy.polys.agca.modules)": [[196, "sympy.polys.agca.modules.QuotientModule"]], "quotientmoduleelement (class in sympy.polys.agca.modules)": [[196, "sympy.polys.agca.modules.QuotientModuleElement"]], "submodule (class in sympy.polys.agca.modules)": [[196, "sympy.polys.agca.modules.SubModule"]], "subquotientmodule (class in sympy.polys.agca.modules)": [[196, "sympy.polys.agca.modules.SubQuotientModule"]], "basis() (sympy.polys.agca.modules.freemodule method)": [[196, "sympy.polys.agca.modules.FreeModule.basis"]], "contains() (sympy.polys.agca.ideals.ideal method)": [[196, "sympy.polys.agca.ideals.Ideal.contains"]], "contains() (sympy.polys.agca.modules.module method)": [[196, "sympy.polys.agca.modules.Module.contains"]], "convert() (sympy.polys.agca.modules.freemodule method)": [[196, "sympy.polys.agca.modules.FreeModule.convert"]], "convert() (sympy.polys.agca.modules.module method)": [[196, "sympy.polys.agca.modules.Module.convert"]], "convert() (sympy.polys.agca.modules.quotientmodule method)": [[196, "sympy.polys.agca.modules.QuotientModule.convert"]], "convert() (sympy.polys.agca.modules.submodule method)": [[196, "sympy.polys.agca.modules.SubModule.convert"]], "depth() (sympy.polys.agca.ideals.ideal method)": [[196, "sympy.polys.agca.ideals.Ideal.depth"]], "dtype (sympy.polys.agca.extensions.monogenicfiniteextension attribute)": [[196, "sympy.polys.agca.extensions.MonogenicFiniteExtension.dtype"]], "dtype (sympy.polys.agca.modules.freemodule attribute)": [[196, "sympy.polys.agca.modules.FreeModule.dtype"]], "dtype (sympy.polys.agca.modules.quotientmodule attribute)": [[196, "sympy.polys.agca.modules.QuotientModule.dtype"]], "eq() (sympy.polys.agca.modules.quotientmoduleelement method)": [[196, "sympy.polys.agca.modules.QuotientModuleElement.eq"]], "height() (sympy.polys.agca.ideals.ideal method)": [[196, "sympy.polys.agca.ideals.Ideal.height"]], "homomorphism() (in module sympy.polys.agca.homomorphisms)": [[196, "sympy.polys.agca.homomorphisms.homomorphism"]], "identity_hom() (sympy.polys.agca.modules.freemodule method)": [[196, "sympy.polys.agca.modules.FreeModule.identity_hom"]], "identity_hom() (sympy.polys.agca.modules.module method)": [[196, "sympy.polys.agca.modules.Module.identity_hom"]], "identity_hom() (sympy.polys.agca.modules.quotientmodule method)": [[196, "sympy.polys.agca.modules.QuotientModule.identity_hom"]], "identity_hom() (sympy.polys.agca.modules.submodule method)": [[196, "sympy.polys.agca.modules.SubModule.identity_hom"]], "image() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[196, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.image"]], "in_terms_of_generators() (sympy.polys.agca.modules.submodule method)": [[196, "sympy.polys.agca.modules.SubModule.in_terms_of_generators"]], "inclusion_hom() (sympy.polys.agca.modules.submodule method)": [[196, "sympy.polys.agca.modules.SubModule.inclusion_hom"]], "intersect() (sympy.polys.agca.ideals.ideal method)": [[196, "sympy.polys.agca.ideals.Ideal.intersect"]], "intersect() (sympy.polys.agca.modules.submodule method)": [[196, "sympy.polys.agca.modules.SubModule.intersect"]], "inverse() (sympy.polys.agca.extensions.extensionelement method)": [[196, "sympy.polys.agca.extensions.ExtensionElement.inverse"]], "is_full_module() (sympy.polys.agca.modules.submodule method)": [[196, "sympy.polys.agca.modules.SubModule.is_full_module"]], "is_full_module() (sympy.polys.agca.modules.subquotientmodule method)": [[196, "sympy.polys.agca.modules.SubQuotientModule.is_full_module"]], "is_injective() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[196, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.is_injective"]], "is_isomorphism() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[196, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.is_isomorphism"]], "is_maximal() (sympy.polys.agca.ideals.ideal method)": [[196, "sympy.polys.agca.ideals.Ideal.is_maximal"]], "is_primary() (sympy.polys.agca.ideals.ideal method)": [[196, "sympy.polys.agca.ideals.Ideal.is_primary"]], "is_prime() (sympy.polys.agca.ideals.ideal method)": [[196, "sympy.polys.agca.ideals.Ideal.is_prime"]], "is_principal() (sympy.polys.agca.ideals.ideal method)": [[196, "sympy.polys.agca.ideals.Ideal.is_principal"]], "is_radical() (sympy.polys.agca.ideals.ideal method)": [[196, "sympy.polys.agca.ideals.Ideal.is_radical"]], "is_submodule() (sympy.polys.agca.modules.freemodule method)": [[196, "sympy.polys.agca.modules.FreeModule.is_submodule"]], "is_submodule() (sympy.polys.agca.modules.module method)": [[196, "sympy.polys.agca.modules.Module.is_submodule"]], "is_submodule() (sympy.polys.agca.modules.quotientmodule method)": [[196, "sympy.polys.agca.modules.QuotientModule.is_submodule"]], "is_submodule() (sympy.polys.agca.modules.submodule method)": [[196, "sympy.polys.agca.modules.SubModule.is_submodule"]], "is_surjective() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[196, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.is_surjective"]], "is_whole_ring() (sympy.polys.agca.ideals.ideal method)": [[196, "sympy.polys.agca.ideals.Ideal.is_whole_ring"]], "is_zero() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[196, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.is_zero"]], "is_zero() (sympy.polys.agca.ideals.ideal method)": [[196, "sympy.polys.agca.ideals.Ideal.is_zero"]], "is_zero() (sympy.polys.agca.modules.freemodule method)": [[196, "sympy.polys.agca.modules.FreeModule.is_zero"]], "is_zero() (sympy.polys.agca.modules.module method)": [[196, "sympy.polys.agca.modules.Module.is_zero"]], "is_zero() (sympy.polys.agca.modules.quotientmodule method)": [[196, "sympy.polys.agca.modules.QuotientModule.is_zero"]], "is_zero() (sympy.polys.agca.modules.submodule method)": [[196, "sympy.polys.agca.modules.SubModule.is_zero"]], "kernel() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[196, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.kernel"]], "module_quotient() (sympy.polys.agca.modules.submodule method)": [[196, "sympy.polys.agca.modules.SubModule.module_quotient"]], "multiply_ideal() (sympy.polys.agca.modules.freemodule method)": [[196, "sympy.polys.agca.modules.FreeModule.multiply_ideal"]], "multiply_ideal() (sympy.polys.agca.modules.module method)": [[196, "sympy.polys.agca.modules.Module.multiply_ideal"]], "multiply_ideal() (sympy.polys.agca.modules.submodule method)": [[196, "sympy.polys.agca.modules.SubModule.multiply_ideal"]], "product() (sympy.polys.agca.ideals.ideal method)": [[196, "sympy.polys.agca.ideals.Ideal.product"]], "quotient() (sympy.polys.agca.ideals.ideal method)": [[196, "sympy.polys.agca.ideals.Ideal.quotient"]], "quotient_codomain() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[196, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.quotient_codomain"]], "quotient_domain() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[196, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.quotient_domain"]], "quotient_hom() (sympy.polys.agca.modules.quotientmodule method)": [[196, "sympy.polys.agca.modules.QuotientModule.quotient_hom"]], "quotient_hom() (sympy.polys.agca.modules.subquotientmodule method)": [[196, "sympy.polys.agca.modules.SubQuotientModule.quotient_hom"]], "quotient_module() (sympy.polys.agca.modules.freemodule method)": [[196, "sympy.polys.agca.modules.FreeModule.quotient_module"]], "quotient_module() (sympy.polys.agca.modules.module method)": [[196, "sympy.polys.agca.modules.Module.quotient_module"]], "quotient_module() (sympy.polys.agca.modules.submodule method)": [[196, "sympy.polys.agca.modules.SubModule.quotient_module"]], "radical() (sympy.polys.agca.ideals.ideal method)": [[196, "sympy.polys.agca.ideals.Ideal.radical"]], "reduce_element() (sympy.polys.agca.ideals.ideal method)": [[196, "sympy.polys.agca.ideals.Ideal.reduce_element"]], "reduce_element() (sympy.polys.agca.modules.submodule method)": [[196, "sympy.polys.agca.modules.SubModule.reduce_element"]], "restrict_codomain() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[196, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.restrict_codomain"]], "restrict_domain() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[196, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.restrict_domain"]], "saturate() (sympy.polys.agca.ideals.ideal method)": [[196, "sympy.polys.agca.ideals.Ideal.saturate"]], "submodule() (sympy.polys.agca.modules.module method)": [[196, "sympy.polys.agca.modules.Module.submodule"]], "submodule() (sympy.polys.agca.modules.quotientmodule method)": [[196, "sympy.polys.agca.modules.QuotientModule.submodule"]], "submodule() (sympy.polys.agca.modules.submodule method)": [[196, "sympy.polys.agca.modules.SubModule.submodule"]], "subset() (sympy.polys.agca.ideals.ideal method)": [[196, "sympy.polys.agca.ideals.Ideal.subset"]], "subset() (sympy.polys.agca.modules.module method)": [[196, "sympy.polys.agca.modules.Module.subset"]], "syzygy_module() (sympy.polys.agca.modules.submodule method)": [[196, "sympy.polys.agca.modules.SubModule.syzygy_module"]], "union() (sympy.polys.agca.ideals.ideal method)": [[196, "sympy.polys.agca.ideals.Ideal.union"]], "union() (sympy.polys.agca.modules.submodule method)": [[196, "sympy.polys.agca.modules.SubModule.union"]], "ddm (class in sympy.polys.matrices.ddm)": [[198, "sympy.polys.matrices.ddm.DDM"]], "domainmatrix (class in sympy.polys.matrices.domainmatrix)": [[198, "sympy.polys.matrices.domainmatrix.DomainMatrix"]], "sdm (class in sympy.polys.matrices.sdm)": [[198, "sympy.polys.matrices.sdm.SDM"]], "add() (sympy.polys.matrices.ddm.ddm method)": [[198, "sympy.polys.matrices.ddm.DDM.add"]], "add() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[198, "sympy.polys.matrices.domainmatrix.DomainMatrix.add"]], "add() (sympy.polys.matrices.sdm.sdm method)": [[198, "sympy.polys.matrices.sdm.SDM.add"]], "charpoly() (sympy.polys.matrices.ddm.ddm method)": [[198, "sympy.polys.matrices.ddm.DDM.charpoly"]], "charpoly() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[198, "sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly"]], "charpoly() (sympy.polys.matrices.sdm.sdm method)": [[198, "sympy.polys.matrices.sdm.SDM.charpoly"]], "columnspace() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[198, "sympy.polys.matrices.domainmatrix.DomainMatrix.columnspace"]], "convert_to() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[198, "sympy.polys.matrices.domainmatrix.DomainMatrix.convert_to"]], "convert_to() (sympy.polys.matrices.sdm.sdm method)": [[198, "sympy.polys.matrices.sdm.SDM.convert_to"]], "copy() (sympy.polys.matrices.sdm.sdm method)": [[198, "sympy.polys.matrices.sdm.SDM.copy"]], "det() (sympy.polys.matrices.ddm.ddm method)": [[198, "sympy.polys.matrices.ddm.DDM.det"]], "det() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[198, "sympy.polys.matrices.domainmatrix.DomainMatrix.det"]], "det() (sympy.polys.matrices.sdm.sdm method)": [[198, "sympy.polys.matrices.sdm.SDM.det"]], "diag() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[198, "sympy.polys.matrices.domainmatrix.DomainMatrix.diag"]], "eye() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[198, "sympy.polys.matrices.domainmatrix.DomainMatrix.eye"]], "eye() (sympy.polys.matrices.sdm.sdm class method)": [[198, "sympy.polys.matrices.sdm.SDM.eye"]], "from_matrix() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[198, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_Matrix"]], "from_ddm() (sympy.polys.matrices.sdm.sdm class method)": [[198, "sympy.polys.matrices.sdm.SDM.from_ddm"]], "from_dict_sympy() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[198, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_dict_sympy"]], "from_list() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[198, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_list"]], "from_list() (sympy.polys.matrices.sdm.sdm class method)": [[198, "sympy.polys.matrices.sdm.SDM.from_list"]], "from_list_sympy() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[198, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_list_sympy"]], "from_rep() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[198, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_rep"]], "hermite_normal_form() (in module sympy.polys.matrices.normalforms)": [[198, "sympy.polys.matrices.normalforms.hermite_normal_form"]], "hstack() (sympy.polys.matrices.ddm.ddm method)": [[198, "sympy.polys.matrices.ddm.DDM.hstack"]], "hstack() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[198, "sympy.polys.matrices.domainmatrix.DomainMatrix.hstack"]], "hstack() (sympy.polys.matrices.sdm.sdm method)": [[198, "sympy.polys.matrices.sdm.SDM.hstack"]], "inv() (sympy.polys.matrices.ddm.ddm method)": [[198, "sympy.polys.matrices.ddm.DDM.inv"]], "inv() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[198, "sympy.polys.matrices.domainmatrix.DomainMatrix.inv"]], "inv() (sympy.polys.matrices.sdm.sdm method)": [[198, "sympy.polys.matrices.sdm.SDM.inv"]], "is_lower (sympy.polys.matrices.domainmatrix.domainmatrix property)": [[198, "sympy.polys.matrices.domainmatrix.DomainMatrix.is_lower"]], "is_lower() (sympy.polys.matrices.ddm.ddm method)": [[198, "sympy.polys.matrices.ddm.DDM.is_lower"]], "is_lower() (sympy.polys.matrices.sdm.sdm method)": [[198, "sympy.polys.matrices.sdm.SDM.is_lower"]], "is_upper (sympy.polys.matrices.domainmatrix.domainmatrix property)": [[198, "sympy.polys.matrices.domainmatrix.DomainMatrix.is_upper"]], "is_upper() (sympy.polys.matrices.ddm.ddm method)": [[198, "sympy.polys.matrices.ddm.DDM.is_upper"]], "is_upper() (sympy.polys.matrices.sdm.sdm method)": [[198, "sympy.polys.matrices.sdm.SDM.is_upper"]], "is_zero_matrix() (sympy.polys.matrices.ddm.ddm method)": [[198, "sympy.polys.matrices.ddm.DDM.is_zero_matrix"]], "is_zero_matrix() (sympy.polys.matrices.sdm.sdm method)": [[198, "sympy.polys.matrices.sdm.SDM.is_zero_matrix"]], "lu() (sympy.polys.matrices.ddm.ddm method)": [[198, "sympy.polys.matrices.ddm.DDM.lu"]], "lu() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[198, "sympy.polys.matrices.domainmatrix.DomainMatrix.lu"]], "lu() (sympy.polys.matrices.sdm.sdm method)": [[198, "sympy.polys.matrices.sdm.SDM.lu"]], "lu_solve() (sympy.polys.matrices.ddm.ddm method)": [[198, "sympy.polys.matrices.ddm.DDM.lu_solve"]], "lu_solve() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[198, "sympy.polys.matrices.domainmatrix.DomainMatrix.lu_solve"]], "lu_solve() (sympy.polys.matrices.sdm.sdm method)": [[198, "sympy.polys.matrices.sdm.SDM.lu_solve"]], "matmul() (sympy.polys.matrices.ddm.ddm method)": [[198, "sympy.polys.matrices.ddm.DDM.matmul"]], "matmul() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[198, "sympy.polys.matrices.domainmatrix.DomainMatrix.matmul"]], "matmul() (sympy.polys.matrices.sdm.sdm method)": [[198, "sympy.polys.matrices.sdm.SDM.matmul"]], "mul() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[198, "sympy.polys.matrices.domainmatrix.DomainMatrix.mul"]], "mul() (sympy.polys.matrices.sdm.sdm method)": [[198, "sympy.polys.matrices.sdm.SDM.mul"]], "neg() (sympy.polys.matrices.ddm.ddm method)": [[198, "sympy.polys.matrices.ddm.DDM.neg"]], "neg() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[198, "sympy.polys.matrices.domainmatrix.DomainMatrix.neg"]], "neg() (sympy.polys.matrices.sdm.sdm method)": [[198, "sympy.polys.matrices.sdm.SDM.neg"]], "new() (sympy.polys.matrices.sdm.sdm class method)": [[198, "sympy.polys.matrices.sdm.SDM.new"]], "nullspace() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[198, "sympy.polys.matrices.domainmatrix.DomainMatrix.nullspace"]], "nullspace() (sympy.polys.matrices.sdm.sdm method)": [[198, "sympy.polys.matrices.sdm.SDM.nullspace"]], "ones() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[198, "sympy.polys.matrices.domainmatrix.DomainMatrix.ones"]], "pow() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[198, "sympy.polys.matrices.domainmatrix.DomainMatrix.pow"]], "rowspace() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[198, "sympy.polys.matrices.domainmatrix.DomainMatrix.rowspace"]], "rref() (sympy.polys.matrices.ddm.ddm method)": [[198, "sympy.polys.matrices.ddm.DDM.rref"]], "rref() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[198, "sympy.polys.matrices.domainmatrix.DomainMatrix.rref"]], "rref() (sympy.polys.matrices.sdm.sdm method)": [[198, "sympy.polys.matrices.sdm.SDM.rref"]], "scc() (sympy.polys.matrices.ddm.ddm method)": [[198, "sympy.polys.matrices.ddm.DDM.scc"]], "scc() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[198, "sympy.polys.matrices.domainmatrix.DomainMatrix.scc"]], "scc() (sympy.polys.matrices.sdm.sdm method)": [[198, "sympy.polys.matrices.sdm.SDM.scc"]], "smith_normal_form() (in module sympy.polys.matrices.normalforms)": [[198, "sympy.polys.matrices.normalforms.smith_normal_form"]], "sub() (sympy.polys.matrices.ddm.ddm method)": [[198, "sympy.polys.matrices.ddm.DDM.sub"]], "sub() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[198, "sympy.polys.matrices.domainmatrix.DomainMatrix.sub"]], "sub() (sympy.polys.matrices.sdm.sdm method)": [[198, "sympy.polys.matrices.sdm.SDM.sub"]], "to_matrix() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[198, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_Matrix"]], "to_ddm() (sympy.polys.matrices.sdm.sdm method)": [[198, "sympy.polys.matrices.sdm.SDM.to_ddm"]], "to_dense() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[198, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_dense"]], "to_field() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[198, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_field"]], "to_list() (sympy.polys.matrices.sdm.sdm method)": [[198, "sympy.polys.matrices.sdm.SDM.to_list"]], "to_sparse() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[198, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_sparse"]], "transpose() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[198, "sympy.polys.matrices.domainmatrix.DomainMatrix.transpose"]], "transpose() (sympy.polys.matrices.sdm.sdm method)": [[198, "sympy.polys.matrices.sdm.SDM.transpose"]], "unify() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[198, "sympy.polys.matrices.domainmatrix.DomainMatrix.unify"]], "vstack() (sympy.polys.matrices.ddm.ddm method)": [[198, "sympy.polys.matrices.ddm.DDM.vstack"]], "vstack() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[198, "sympy.polys.matrices.domainmatrix.DomainMatrix.vstack"]], "vstack() (sympy.polys.matrices.sdm.sdm method)": [[198, "sympy.polys.matrices.sdm.SDM.vstack"]], "zeros() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[198, "sympy.polys.matrices.domainmatrix.DomainMatrix.zeros"]], "zeros() (sympy.polys.matrices.sdm.sdm class method)": [[198, "sympy.polys.matrices.sdm.SDM.zeros"]], "anp (class in sympy.polys.polyclasses)": [[200, "sympy.polys.polyclasses.ANP"]], "algebraicfield (class in sympy.polys.domains)": [[200, "sympy.polys.domains.AlgebraicField"]], "complexelement (class in sympy.polys.domains.mpelements)": [[200, "sympy.polys.domains.mpelements.ComplexElement"]], "complexfield (class in sympy.polys.domains)": [[200, "sympy.polys.domains.ComplexField"]], "compositedomain (class in sympy.polys.domains.compositedomain)": [[200, "sympy.polys.domains.compositedomain.CompositeDomain"]], "dmf (class in sympy.polys.polyclasses)": [[200, "sympy.polys.polyclasses.DMF"]], "dmp (class in sympy.polys.polyclasses)": [[200, "sympy.polys.polyclasses.DMP"]], "domain (class in sympy.polys.domains.domain)": [[200, "sympy.polys.domains.domain.Domain"]], "domainelement (class in sympy.polys.domains.domainelement)": [[200, "sympy.polys.domains.domainelement.DomainElement"]], "expressiondomain (class in sympy.polys.domains)": [[200, "sympy.polys.domains.ExpressionDomain"]], "expressiondomain.expression (class in sympy.polys.domains)": [[200, "sympy.polys.domains.ExpressionDomain.Expression"]], "expressiondomain.expression (class in sympy.polys.domains.expressiondomain)": [[200, "sympy.polys.domains.expressiondomain.ExpressionDomain.Expression"]], "field (class in sympy.polys.domains.field)": [[200, "sympy.polys.domains.field.Field"]], "finitefield (class in sympy.polys.domains)": [[200, "sympy.polys.domains.FiniteField"]], "fracelement (class in sympy.polys.fields)": [[200, "sympy.polys.fields.FracElement"]], "fracfield (class in sympy.polys.fields)": [[200, "sympy.polys.fields.FracField"]], "fractionfield (class in sympy.polys.domains)": [[200, "sympy.polys.domains.FractionField"]], "gmpyfinitefield (class in sympy.polys.domains)": [[200, "sympy.polys.domains.GMPYFiniteField"]], "gmpyintegerring (class in sympy.polys.domains)": [[200, "sympy.polys.domains.GMPYIntegerRing"]], "gmpyrationalfield (class in sympy.polys.domains)": [[200, "sympy.polys.domains.GMPYRationalField"]], "gaussiandomain (class in sympy.polys.domains.gaussiandomains)": [[200, "sympy.polys.domains.gaussiandomains.GaussianDomain"]], "gaussianelement (class in sympy.polys.domains.gaussiandomains)": [[200, "sympy.polys.domains.gaussiandomains.GaussianElement"]], "gaussianinteger (class in sympy.polys.domains.gaussiandomains)": [[200, "sympy.polys.domains.gaussiandomains.GaussianInteger"]], "gaussianintegerring (class in sympy.polys.domains.gaussiandomains)": [[200, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing"]], "gaussianrational (class in sympy.polys.domains.gaussiandomains)": [[200, "sympy.polys.domains.gaussiandomains.GaussianRational"]], "gaussianrationalfield (class in sympy.polys.domains.gaussiandomains)": [[200, "sympy.polys.domains.gaussiandomains.GaussianRationalField"]], "integerring (class in sympy.polys.domains)": [[200, "sympy.polys.domains.IntegerRing"]], "lc() (sympy.polys.polyclasses.anp method)": [[200, "sympy.polys.polyclasses.ANP.LC"]], "lc() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.LC"]], "polyelement (class in sympy.polys.rings)": [[200, "sympy.polys.rings.PolyElement"]], "polyring (class in sympy.polys.rings)": [[200, "sympy.polys.rings.PolyRing"]], "polynomialring (class in sympy.polys.domains)": [[200, "sympy.polys.domains.PolynomialRing"]], "pythonfinitefield (class in sympy.polys.domains)": [[200, "sympy.polys.domains.PythonFiniteField"]], "pythonintegerring (class in sympy.polys.domains)": [[200, "sympy.polys.domains.PythonIntegerRing"]], "pythonmpq (class in sympy.external.pythonmpq)": [[200, "sympy.external.pythonmpq.PythonMPQ"]], "pythonrationalfield (class in sympy.polys.domains)": [[200, "sympy.polys.domains.PythonRationalField"]], "quotientring (class in sympy.polys.domains.quotientring)": [[200, "sympy.polys.domains.quotientring.QuotientRing"]], "rationalfield (class in sympy.polys.domains)": [[200, "sympy.polys.domains.RationalField"]], "realelement (class in sympy.polys.domains.mpelements)": [[200, "sympy.polys.domains.mpelements.RealElement"]], "realfield (class in sympy.polys.domains)": [[200, "sympy.polys.domains.RealField"]], "ring (class in sympy.polys.domains.ring)": [[200, "sympy.polys.domains.ring.Ring"]], "simpledomain (class in sympy.polys.domains.simpledomain)": [[200, "sympy.polys.domains.simpledomain.SimpleDomain"]], "tc() (sympy.polys.polyclasses.anp method)": [[200, "sympy.polys.polyclasses.ANP.TC"]], "tc() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.TC"]], "abs() (sympy.polys.domains.domain.domain method)": [[200, "sympy.polys.domains.domain.Domain.abs"]], "abs() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.abs"]], "add() (sympy.polys.domains.domain.domain method)": [[200, "sympy.polys.domains.domain.Domain.add"]], "add() (sympy.polys.polyclasses.dmf method)": [[200, "sympy.polys.polyclasses.DMF.add"]], "add() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.add"]], "add() (sympy.polys.rings.polyring method)": [[200, "sympy.polys.rings.PolyRing.add"]], "add_gens() (sympy.polys.rings.polyring method)": [[200, "sympy.polys.rings.PolyRing.add_gens"]], "add_ground() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.add_ground"]], "alg_field_from_poly() (sympy.polys.domains.domain.domain method)": [[200, "sympy.polys.domains.domain.Domain.alg_field_from_poly"]], "algebraic_field() (sympy.polys.domains.algebraicfield method)": [[200, "sympy.polys.domains.AlgebraicField.algebraic_field"]], "algebraic_field() (sympy.polys.domains.integerring method)": [[200, "sympy.polys.domains.IntegerRing.algebraic_field"]], "algebraic_field() (sympy.polys.domains.rationalfield method)": [[200, "sympy.polys.domains.RationalField.algebraic_field"]], "algebraic_field() (sympy.polys.domains.domain.domain method)": [[200, "sympy.polys.domains.domain.Domain.algebraic_field"]], "all_coeffs() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.all_coeffs"]], "all_monoms() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.all_monoms"]], "all_terms() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.all_terms"]], "almosteq() (sympy.polys.domains.complexfield method)": [[200, "sympy.polys.domains.ComplexField.almosteq"]], "almosteq() (sympy.polys.domains.realfield method)": [[200, "sympy.polys.domains.RealField.almosteq"]], "almosteq() (sympy.polys.domains.domain.domain method)": [[200, "sympy.polys.domains.domain.Domain.almosteq"]], "almosteq() (sympy.polys.rings.polyelement method)": [[200, "sympy.polys.rings.PolyElement.almosteq"]], "as_algebraicfield() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[200, "sympy.polys.domains.gaussiandomains.GaussianRationalField.as_AlgebraicField"]], "cancel() (sympy.polys.polyclasses.dmf method)": [[200, "sympy.polys.polyclasses.DMF.cancel"]], "cancel() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.cancel"]], "cancel() (sympy.polys.rings.polyelement method)": [[200, "sympy.polys.rings.PolyElement.cancel"]], "cauchy_lower_bound() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.cauchy_lower_bound"]], "cauchy_upper_bound() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.cauchy_upper_bound"]], "characteristic() (sympy.polys.domains.finitefield method)": [[200, "sympy.polys.domains.FiniteField.characteristic"]], "characteristic() (sympy.polys.domains.domain.domain method)": [[200, "sympy.polys.domains.domain.Domain.characteristic"]], "clear_denoms() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.clear_denoms"]], "coeff() (sympy.polys.rings.polyelement method)": [[200, "sympy.polys.rings.PolyElement.coeff"]], "coeffs() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.coeffs"]], "coeffs() (sympy.polys.rings.polyelement method)": [[200, "sympy.polys.rings.PolyElement.coeffs"]], "cofactors() (sympy.polys.domains.domain.domain method)": [[200, "sympy.polys.domains.domain.Domain.cofactors"]], "cofactors() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.cofactors"]], "compose() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.compose"]], "compose() (sympy.polys.rings.polyring method)": [[200, "sympy.polys.rings.PolyRing.compose"]], "const() (sympy.polys.rings.polyelement method)": [[200, "sympy.polys.rings.PolyElement.const"]], "content() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.content"]], "content() (sympy.polys.rings.polyelement method)": [[200, "sympy.polys.rings.PolyElement.content"]], "convert() (sympy.polys.domains.domain.domain method)": [[200, "sympy.polys.domains.domain.Domain.convert"]], "convert() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.convert"]], "convert_from() (sympy.polys.domains.domain.domain method)": [[200, "sympy.polys.domains.domain.Domain.convert_from"]], "copy() (sympy.polys.rings.polyelement method)": [[200, "sympy.polys.rings.PolyElement.copy"]], "count_complex_roots() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.count_complex_roots"]], "count_real_roots() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.count_real_roots"]], "cyclotomic_field() (sympy.polys.domains.domain.domain method)": [[200, "sympy.polys.domains.domain.Domain.cyclotomic_field"]], "decompose() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.decompose"]], "deflate() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.deflate"]], "degree() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.degree"]], "degree() (sympy.polys.rings.polyelement method)": [[200, "sympy.polys.rings.PolyElement.degree"]], "degree_list() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.degree_list"]], "degrees() (sympy.polys.rings.polyelement method)": [[200, "sympy.polys.rings.PolyElement.degrees"]], "denom() (sympy.polys.domains.algebraicfield method)": [[200, "sympy.polys.domains.AlgebraicField.denom"]], "denom() (sympy.polys.domains.expressiondomain method)": [[200, "sympy.polys.domains.ExpressionDomain.denom"]], "denom() (sympy.polys.domains.fractionfield method)": [[200, "sympy.polys.domains.FractionField.denom"]], "denom() (sympy.polys.domains.gmpyrationalfield method)": [[200, "sympy.polys.domains.GMPYRationalField.denom"]], "denom() (sympy.polys.domains.rationalfield method)": [[200, "sympy.polys.domains.RationalField.denom"]], "denom() (sympy.polys.domains.domain.domain method)": [[200, "sympy.polys.domains.domain.Domain.denom"]], "denom() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[200, "sympy.polys.domains.gaussiandomains.GaussianRationalField.denom"]], "denom() (sympy.polys.domains.ring.ring method)": [[200, "sympy.polys.domains.ring.Ring.denom"]], "denom() (sympy.polys.polyclasses.dmf method)": [[200, "sympy.polys.polyclasses.DMF.denom"]], "diff() (sympy.polys.fields.fracelement method)": [[200, "sympy.polys.fields.FracElement.diff"]], "diff() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.diff"]], "diff() (sympy.polys.rings.polyelement method)": [[200, "sympy.polys.rings.PolyElement.diff"]], "discriminant() (sympy.polys.domains.algebraicfield method)": [[200, "sympy.polys.domains.AlgebraicField.discriminant"]], "discriminant() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.discriminant"]], "div() (sympy.polys.domains.gmpyrationalfield method)": [[200, "sympy.polys.domains.GMPYRationalField.div"]], "div() (sympy.polys.domains.rationalfield method)": [[200, "sympy.polys.domains.RationalField.div"]], "div() (sympy.polys.domains.domain.domain method)": [[200, "sympy.polys.domains.domain.Domain.div"]], "div() (sympy.polys.domains.field.field method)": [[200, "sympy.polys.domains.field.Field.div"]], "div() (sympy.polys.domains.ring.ring method)": [[200, "sympy.polys.domains.ring.Ring.div"]], "div() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.div"]], "div() (sympy.polys.rings.polyelement method)": [[200, "sympy.polys.rings.PolyElement.div"]], "drop() (sympy.polys.domains.compositedomain.compositedomain method)": [[200, "sympy.polys.domains.compositedomain.CompositeDomain.drop"]], "drop() (sympy.polys.domains.domain.domain method)": [[200, "sympy.polys.domains.domain.Domain.drop"]], "drop() (sympy.polys.rings.polyring method)": [[200, "sympy.polys.rings.PolyRing.drop"]], "drop_to_ground() (sympy.polys.rings.polyring method)": [[200, "sympy.polys.rings.PolyRing.drop_to_ground"]], "dtype (sympy.polys.domains.algebraicfield attribute)": [[200, "sympy.polys.domains.AlgebraicField.dtype"]], "dtype (sympy.polys.domains.expressiondomain attribute)": [[200, "sympy.polys.domains.ExpressionDomain.dtype"]], "dtype (sympy.polys.domains.domain.domain attribute)": [[200, "sympy.polys.domains.domain.Domain.dtype"]], "dtype (sympy.polys.domains.gaussiandomains.gaussianintegerring attribute)": [[200, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.dtype"]], "dtype (sympy.polys.domains.gaussiandomains.gaussianrationalfield attribute)": [[200, "sympy.polys.domains.gaussiandomains.GaussianRationalField.dtype"]], "eject() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.eject"]], "eval() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.eval"]], "evalf() (sympy.polys.domains.domain.domain method)": [[200, "sympy.polys.domains.domain.Domain.evalf"]], "exclude() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.exclude"]], "exquo() (sympy.polys.domains.gmpyrationalfield method)": [[200, "sympy.polys.domains.GMPYRationalField.exquo"]], "exquo() (sympy.polys.domains.rationalfield method)": [[200, "sympy.polys.domains.RationalField.exquo"]], "exquo() (sympy.polys.domains.domain.domain method)": [[200, "sympy.polys.domains.domain.Domain.exquo"]], "exquo() (sympy.polys.domains.field.field method)": [[200, "sympy.polys.domains.field.Field.exquo"]], "exquo() (sympy.polys.domains.ring.ring method)": [[200, "sympy.polys.domains.ring.Ring.exquo"]], "exquo() (sympy.polys.polyclasses.dmf method)": [[200, "sympy.polys.polyclasses.DMF.exquo"]], "exquo() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.exquo"]], "exquo_ground() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.exquo_ground"]], "ext (sympy.polys.domains.algebraicfield attribute)": [[200, "sympy.polys.domains.AlgebraicField.ext"]], "factor_list() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.factor_list"]], "factor_list_include() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.factor_list_include"]], "factorial() (sympy.polys.domains.fractionfield method)": [[200, "sympy.polys.domains.FractionField.factorial"]], "factorial() (sympy.polys.domains.gmpyintegerring method)": [[200, "sympy.polys.domains.GMPYIntegerRing.factorial"]], "factorial() (sympy.polys.domains.gmpyrationalfield method)": [[200, "sympy.polys.domains.GMPYRationalField.factorial"]], "factorial() (sympy.polys.domains.integerring method)": [[200, "sympy.polys.domains.IntegerRing.factorial"]], "factorial() (sympy.polys.domains.polynomialring method)": [[200, "sympy.polys.domains.PolynomialRing.factorial"]], "field() (in module sympy.polys.fields)": [[200, "sympy.polys.fields.field"]], "frac_field() (sympy.polys.domains.domain.domain method)": [[200, "sympy.polys.domains.domain.Domain.frac_field"]], "frac_unify() (sympy.polys.polyclasses.dmf method)": [[200, "sympy.polys.polyclasses.DMF.frac_unify"]], "free_module() (sympy.polys.domains.ring.ring method)": [[200, "sympy.polys.domains.ring.Ring.free_module"]], "from_algebraicfield() (sympy.polys.domains.algebraicfield method)": [[200, "sympy.polys.domains.AlgebraicField.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.fractionfield method)": [[200, "sympy.polys.domains.FractionField.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.integerring method)": [[200, "sympy.polys.domains.IntegerRing.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.polynomialring method)": [[200, "sympy.polys.domains.PolynomialRing.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.rationalfield method)": [[200, "sympy.polys.domains.RationalField.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.domain.domain method)": [[200, "sympy.polys.domains.domain.Domain.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[200, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_AlgebraicField"]], "from_complexfield() (sympy.polys.domains.fractionfield method)": [[200, "sympy.polys.domains.FractionField.from_ComplexField"]], "from_complexfield() (sympy.polys.domains.polynomialring method)": [[200, "sympy.polys.domains.PolynomialRing.from_ComplexField"]], "from_complexfield() (sympy.polys.domains.domain.domain method)": [[200, "sympy.polys.domains.domain.Domain.from_ComplexField"]], "from_expressiondomain() (sympy.polys.domains.expressiondomain method)": [[200, "sympy.polys.domains.ExpressionDomain.from_ExpressionDomain"]], "from_expressiondomain() (sympy.polys.domains.domain.domain method)": [[200, "sympy.polys.domains.domain.Domain.from_ExpressionDomain"]], "from_expressionrawdomain() (sympy.polys.domains.domain.domain method)": [[200, "sympy.polys.domains.domain.Domain.from_ExpressionRawDomain"]], "from_ff() (sympy.polys.domains.finitefield method)": [[200, "sympy.polys.domains.FiniteField.from_FF"]], "from_ff() (sympy.polys.domains.integerring method)": [[200, "sympy.polys.domains.IntegerRing.from_FF"]], "from_ff() (sympy.polys.domains.domain.domain method)": [[200, "sympy.polys.domains.domain.Domain.from_FF"]], "from_ff_gmpy() (sympy.polys.domains.finitefield method)": [[200, "sympy.polys.domains.FiniteField.from_FF_gmpy"]], "from_ff_gmpy() (sympy.polys.domains.gmpyintegerring method)": [[200, "sympy.polys.domains.GMPYIntegerRing.from_FF_gmpy"]], "from_ff_gmpy() (sympy.polys.domains.integerring method)": [[200, "sympy.polys.domains.IntegerRing.from_FF_gmpy"]], "from_ff_gmpy() (sympy.polys.domains.domain.domain method)": [[200, "sympy.polys.domains.domain.Domain.from_FF_gmpy"]], "from_ff_python() (sympy.polys.domains.finitefield method)": [[200, "sympy.polys.domains.FiniteField.from_FF_python"]], "from_ff_python() (sympy.polys.domains.gmpyintegerring method)": [[200, "sympy.polys.domains.GMPYIntegerRing.from_FF_python"]], "from_ff_python() (sympy.polys.domains.integerring method)": [[200, "sympy.polys.domains.IntegerRing.from_FF_python"]], "from_ff_python() (sympy.polys.domains.domain.domain method)": [[200, "sympy.polys.domains.domain.Domain.from_FF_python"]], "from_fractionfield() (sympy.polys.domains.expressiondomain method)": [[200, "sympy.polys.domains.ExpressionDomain.from_FractionField"]], "from_fractionfield() (sympy.polys.domains.fractionfield method)": [[200, "sympy.polys.domains.FractionField.from_FractionField"]], "from_fractionfield() (sympy.polys.domains.polynomialring method)": [[200, "sympy.polys.domains.PolynomialRing.from_FractionField"]], "from_fractionfield() (sympy.polys.domains.domain.domain method)": [[200, "sympy.polys.domains.domain.Domain.from_FractionField"]], "from_gaussianintegerring() (sympy.polys.domains.algebraicfield method)": [[200, "sympy.polys.domains.AlgebraicField.from_GaussianIntegerRing"]], "from_gaussianintegerring() (sympy.polys.domains.expressiondomain method)": [[200, "sympy.polys.domains.ExpressionDomain.from_GaussianIntegerRing"]], "from_gaussianintegerring() (sympy.polys.domains.fractionfield method)": [[200, "sympy.polys.domains.FractionField.from_GaussianIntegerRing"]], "from_gaussianintegerring() (sympy.polys.domains.polynomialring method)": [[200, "sympy.polys.domains.PolynomialRing.from_GaussianIntegerRing"]], "from_gaussianintegerring() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[200, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.from_GaussianIntegerRing"]], "from_gaussianintegerring() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[200, "sympy.polys.domains.gaussiandomains.GaussianRationalField.from_GaussianIntegerRing"]], "from_gaussianrationalfield() (sympy.polys.domains.algebraicfield method)": [[200, "sympy.polys.domains.AlgebraicField.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.expressiondomain method)": [[200, "sympy.polys.domains.ExpressionDomain.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.fractionfield method)": [[200, "sympy.polys.domains.FractionField.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.gmpyrationalfield method)": [[200, "sympy.polys.domains.GMPYRationalField.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.polynomialring method)": [[200, "sympy.polys.domains.PolynomialRing.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.rationalfield method)": [[200, "sympy.polys.domains.RationalField.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[200, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[200, "sympy.polys.domains.gaussiandomains.GaussianRationalField.from_GaussianRationalField"]], "from_globalpolynomialring() (sympy.polys.domains.polynomialring method)": [[200, "sympy.polys.domains.PolynomialRing.from_GlobalPolynomialRing"]], "from_globalpolynomialring() (sympy.polys.domains.domain.domain method)": [[200, "sympy.polys.domains.domain.Domain.from_GlobalPolynomialRing"]], "from_monogenicfiniteextension() (sympy.polys.domains.domain.domain method)": [[200, "sympy.polys.domains.domain.Domain.from_MonogenicFiniteExtension"]], "from_polynomialring() (sympy.polys.domains.expressiondomain method)": [[200, "sympy.polys.domains.ExpressionDomain.from_PolynomialRing"]], "from_polynomialring() (sympy.polys.domains.fractionfield method)": [[200, "sympy.polys.domains.FractionField.from_PolynomialRing"]], "from_polynomialring() (sympy.polys.domains.polynomialring method)": [[200, "sympy.polys.domains.PolynomialRing.from_PolynomialRing"]], "from_polynomialring() (sympy.polys.domains.domain.domain method)": [[200, "sympy.polys.domains.domain.Domain.from_PolynomialRing"]], "from_qq() (sympy.polys.domains.algebraicfield method)": [[200, "sympy.polys.domains.AlgebraicField.from_QQ"]], "from_qq() (sympy.polys.domains.expressiondomain method)": [[200, "sympy.polys.domains.ExpressionDomain.from_QQ"]], "from_qq() (sympy.polys.domains.finitefield method)": [[200, "sympy.polys.domains.FiniteField.from_QQ"]], "from_qq() (sympy.polys.domains.fractionfield method)": [[200, "sympy.polys.domains.FractionField.from_QQ"]], "from_qq() (sympy.polys.domains.gmpyintegerring method)": [[200, "sympy.polys.domains.GMPYIntegerRing.from_QQ"]], "from_qq() (sympy.polys.domains.integerring method)": [[200, "sympy.polys.domains.IntegerRing.from_QQ"]], "from_qq() (sympy.polys.domains.polynomialring method)": [[200, "sympy.polys.domains.PolynomialRing.from_QQ"]], "from_qq() (sympy.polys.domains.rationalfield method)": [[200, "sympy.polys.domains.RationalField.from_QQ"]], "from_qq() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[200, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_QQ"]], "from_qq_gmpy() (sympy.polys.domains.algebraicfield method)": [[200, "sympy.polys.domains.AlgebraicField.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.expressiondomain method)": [[200, "sympy.polys.domains.ExpressionDomain.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.finitefield method)": [[200, "sympy.polys.domains.FiniteField.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.fractionfield method)": [[200, "sympy.polys.domains.FractionField.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.gmpyintegerring method)": [[200, "sympy.polys.domains.GMPYIntegerRing.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.gmpyrationalfield method)": [[200, "sympy.polys.domains.GMPYRationalField.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.integerring method)": [[200, "sympy.polys.domains.IntegerRing.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.polynomialring method)": [[200, "sympy.polys.domains.PolynomialRing.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.rationalfield method)": [[200, "sympy.polys.domains.RationalField.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.domain.domain method)": [[200, "sympy.polys.domains.domain.Domain.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[200, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_QQ_gmpy"]], "from_qq_python() (sympy.polys.domains.algebraicfield method)": [[200, "sympy.polys.domains.AlgebraicField.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.expressiondomain method)": [[200, "sympy.polys.domains.ExpressionDomain.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.finitefield method)": [[200, "sympy.polys.domains.FiniteField.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.fractionfield method)": [[200, "sympy.polys.domains.FractionField.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.gmpyintegerring method)": [[200, "sympy.polys.domains.GMPYIntegerRing.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.gmpyrationalfield method)": [[200, "sympy.polys.domains.GMPYRationalField.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.integerring method)": [[200, "sympy.polys.domains.IntegerRing.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.polynomialring method)": [[200, "sympy.polys.domains.PolynomialRing.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.rationalfield method)": [[200, "sympy.polys.domains.RationalField.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.domain.domain method)": [[200, "sympy.polys.domains.domain.Domain.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[200, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_QQ_python"]], "from_realfield() (sympy.polys.domains.algebraicfield method)": [[200, "sympy.polys.domains.AlgebraicField.from_RealField"]], "from_realfield() (sympy.polys.domains.expressiondomain method)": [[200, "sympy.polys.domains.ExpressionDomain.from_RealField"]], "from_realfield() (sympy.polys.domains.finitefield method)": [[200, "sympy.polys.domains.FiniteField.from_RealField"]], "from_realfield() (sympy.polys.domains.fractionfield method)": [[200, "sympy.polys.domains.FractionField.from_RealField"]], "from_realfield() (sympy.polys.domains.gmpyintegerring method)": [[200, "sympy.polys.domains.GMPYIntegerRing.from_RealField"]], "from_realfield() (sympy.polys.domains.gmpyrationalfield method)": [[200, "sympy.polys.domains.GMPYRationalField.from_RealField"]], "from_realfield() (sympy.polys.domains.integerring method)": [[200, "sympy.polys.domains.IntegerRing.from_RealField"]], "from_realfield() (sympy.polys.domains.polynomialring method)": [[200, "sympy.polys.domains.PolynomialRing.from_RealField"]], "from_realfield() (sympy.polys.domains.rationalfield method)": [[200, "sympy.polys.domains.RationalField.from_RealField"]], "from_realfield() (sympy.polys.domains.domain.domain method)": [[200, "sympy.polys.domains.domain.Domain.from_RealField"]], "from_zz() (sympy.polys.domains.algebraicfield method)": [[200, "sympy.polys.domains.AlgebraicField.from_ZZ"]], "from_zz() (sympy.polys.domains.expressiondomain method)": [[200, "sympy.polys.domains.ExpressionDomain.from_ZZ"]], "from_zz() (sympy.polys.domains.finitefield method)": [[200, "sympy.polys.domains.FiniteField.from_ZZ"]], "from_zz() (sympy.polys.domains.fractionfield method)": [[200, "sympy.polys.domains.FractionField.from_ZZ"]], "from_zz() (sympy.polys.domains.integerring method)": [[200, "sympy.polys.domains.IntegerRing.from_ZZ"]], "from_zz() (sympy.polys.domains.polynomialring method)": [[200, "sympy.polys.domains.PolynomialRing.from_ZZ"]], "from_zz() (sympy.polys.domains.rationalfield method)": [[200, "sympy.polys.domains.RationalField.from_ZZ"]], "from_zz() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[200, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_ZZ"]], "from_zz_gmpy() (sympy.polys.domains.algebraicfield method)": [[200, "sympy.polys.domains.AlgebraicField.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.expressiondomain method)": [[200, "sympy.polys.domains.ExpressionDomain.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.finitefield method)": [[200, "sympy.polys.domains.FiniteField.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.fractionfield method)": [[200, "sympy.polys.domains.FractionField.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.gmpyintegerring method)": [[200, "sympy.polys.domains.GMPYIntegerRing.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.gmpyrationalfield method)": [[200, "sympy.polys.domains.GMPYRationalField.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.integerring method)": [[200, "sympy.polys.domains.IntegerRing.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.polynomialring method)": [[200, "sympy.polys.domains.PolynomialRing.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.rationalfield method)": [[200, "sympy.polys.domains.RationalField.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.domain.domain method)": [[200, "sympy.polys.domains.domain.Domain.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[200, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_ZZ_gmpy"]], "from_zz_python() (sympy.polys.domains.algebraicfield method)": [[200, "sympy.polys.domains.AlgebraicField.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.expressiondomain method)": [[200, "sympy.polys.domains.ExpressionDomain.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.finitefield method)": [[200, "sympy.polys.domains.FiniteField.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.fractionfield method)": [[200, "sympy.polys.domains.FractionField.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.gmpyintegerring method)": [[200, "sympy.polys.domains.GMPYIntegerRing.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.gmpyrationalfield method)": [[200, "sympy.polys.domains.GMPYRationalField.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.integerring method)": [[200, "sympy.polys.domains.IntegerRing.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.polynomialring method)": [[200, "sympy.polys.domains.PolynomialRing.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.rationalfield method)": [[200, "sympy.polys.domains.RationalField.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.domain.domain method)": [[200, "sympy.polys.domains.domain.Domain.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[200, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_ZZ_python"]], "from_dict() (sympy.polys.polyclasses.dmp class method)": [[200, "sympy.polys.polyclasses.DMP.from_dict"]], "from_list() (sympy.polys.polyclasses.dmp class method)": [[200, "sympy.polys.polyclasses.DMP.from_list"]], "from_sympy() (sympy.polys.domains.algebraicfield method)": [[200, "sympy.polys.domains.AlgebraicField.from_sympy"]], "from_sympy() (sympy.polys.domains.complexfield method)": [[200, "sympy.polys.domains.ComplexField.from_sympy"]], "from_sympy() (sympy.polys.domains.expressiondomain method)": [[200, "sympy.polys.domains.ExpressionDomain.from_sympy"]], "from_sympy() (sympy.polys.domains.finitefield method)": [[200, "sympy.polys.domains.FiniteField.from_sympy"]], "from_sympy() (sympy.polys.domains.fractionfield method)": [[200, "sympy.polys.domains.FractionField.from_sympy"]], "from_sympy() (sympy.polys.domains.gmpyintegerring method)": [[200, "sympy.polys.domains.GMPYIntegerRing.from_sympy"]], "from_sympy() (sympy.polys.domains.gmpyrationalfield method)": [[200, "sympy.polys.domains.GMPYRationalField.from_sympy"]], "from_sympy() (sympy.polys.domains.integerring method)": [[200, "sympy.polys.domains.IntegerRing.from_sympy"]], "from_sympy() (sympy.polys.domains.polynomialring method)": [[200, "sympy.polys.domains.PolynomialRing.from_sympy"]], "from_sympy() (sympy.polys.domains.rationalfield method)": [[200, "sympy.polys.domains.RationalField.from_sympy"]], "from_sympy() (sympy.polys.domains.realfield method)": [[200, "sympy.polys.domains.RealField.from_sympy"]], "from_sympy() (sympy.polys.domains.domain.domain method)": [[200, "sympy.polys.domains.domain.Domain.from_sympy"]], "from_sympy() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[200, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_sympy"]], "from_sympy_list() (sympy.polys.polyclasses.dmp class method)": [[200, "sympy.polys.polyclasses.DMP.from_sympy_list"]], "gcd() (sympy.polys.domains.complexfield method)": [[200, "sympy.polys.domains.ComplexField.gcd"]], "gcd() (sympy.polys.domains.gmpyintegerring method)": [[200, "sympy.polys.domains.GMPYIntegerRing.gcd"]], "gcd() (sympy.polys.domains.integerring method)": [[200, "sympy.polys.domains.IntegerRing.gcd"]], "gcd() (sympy.polys.domains.polynomialring method)": [[200, "sympy.polys.domains.PolynomialRing.gcd"]], "gcd() (sympy.polys.domains.realfield method)": [[200, "sympy.polys.domains.RealField.gcd"]], "gcd() (sympy.polys.domains.domain.domain method)": [[200, "sympy.polys.domains.domain.Domain.gcd"]], "gcd() (sympy.polys.domains.field.field method)": [[200, "sympy.polys.domains.field.Field.gcd"]], "gcd() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[200, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.gcd"]], "gcd() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.gcd"]], "gcdex() (sympy.polys.domains.gmpyintegerring method)": [[200, "sympy.polys.domains.GMPYIntegerRing.gcdex"]], "gcdex() (sympy.polys.domains.integerring method)": [[200, "sympy.polys.domains.IntegerRing.gcdex"]], "gcdex() (sympy.polys.domains.polynomialring method)": [[200, "sympy.polys.domains.PolynomialRing.gcdex"]], "gcdex() (sympy.polys.domains.domain.domain method)": [[200, "sympy.polys.domains.domain.Domain.gcdex"]], "gcdex() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.gcdex"]], "get_exact() (sympy.polys.domains.complexfield method)": [[200, "sympy.polys.domains.ComplexField.get_exact"]], "get_exact() (sympy.polys.domains.realfield method)": [[200, "sympy.polys.domains.RealField.get_exact"]], "get_exact() (sympy.polys.domains.domain.domain method)": [[200, "sympy.polys.domains.domain.Domain.get_exact"]], "get_field() (sympy.polys.domains.expressiondomain method)": [[200, "sympy.polys.domains.ExpressionDomain.get_field"]], "get_field() (sympy.polys.domains.finitefield method)": [[200, "sympy.polys.domains.FiniteField.get_field"]], "get_field() (sympy.polys.domains.integerring method)": [[200, "sympy.polys.domains.IntegerRing.get_field"]], "get_field() (sympy.polys.domains.polynomialring method)": [[200, "sympy.polys.domains.PolynomialRing.get_field"]], "get_field() (sympy.polys.domains.domain.domain method)": [[200, "sympy.polys.domains.domain.Domain.get_field"]], "get_field() (sympy.polys.domains.field.field method)": [[200, "sympy.polys.domains.field.Field.get_field"]], "get_field() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[200, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.get_field"]], "get_field() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[200, "sympy.polys.domains.gaussiandomains.GaussianRationalField.get_field"]], "get_ring() (sympy.polys.domains.algebraicfield method)": [[200, "sympy.polys.domains.AlgebraicField.get_ring"]], "get_ring() (sympy.polys.domains.complexfield method)": [[200, "sympy.polys.domains.ComplexField.get_ring"]], "get_ring() (sympy.polys.domains.expressiondomain method)": [[200, "sympy.polys.domains.ExpressionDomain.get_ring"]], "get_ring() (sympy.polys.domains.fractionfield method)": [[200, "sympy.polys.domains.FractionField.get_ring"]], "get_ring() (sympy.polys.domains.gmpyrationalfield method)": [[200, "sympy.polys.domains.GMPYRationalField.get_ring"]], "get_ring() (sympy.polys.domains.rationalfield method)": [[200, "sympy.polys.domains.RationalField.get_ring"]], "get_ring() (sympy.polys.domains.realfield method)": [[200, "sympy.polys.domains.RealField.get_ring"]], "get_ring() (sympy.polys.domains.domain.domain method)": [[200, "sympy.polys.domains.domain.Domain.get_ring"]], "get_ring() (sympy.polys.domains.field.field method)": [[200, "sympy.polys.domains.field.Field.get_ring"]], "get_ring() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[200, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.get_ring"]], "get_ring() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[200, "sympy.polys.domains.gaussiandomains.GaussianRationalField.get_ring"]], "get_ring() (sympy.polys.domains.ring.ring method)": [[200, "sympy.polys.domains.ring.Ring.get_ring"]], "gff_list() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.gff_list"]], "half_gcdex() (sympy.polys.domains.domain.domain method)": [[200, "sympy.polys.domains.domain.Domain.half_gcdex"]], "half_gcdex() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.half_gcdex"]], "half_per() (sympy.polys.polyclasses.dmf method)": [[200, "sympy.polys.polyclasses.DMF.half_per"]], "has_assoc_field (sympy.polys.domains.domain.domain attribute)": [[200, "sympy.polys.domains.domain.Domain.has_assoc_Field"]], "has_assoc_ring (sympy.polys.domains.domain.domain attribute)": [[200, "sympy.polys.domains.domain.Domain.has_assoc_Ring"]], "homogeneous_order() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.homogeneous_order"]], "homogenize() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.homogenize"]], "ideal() (sympy.polys.domains.ring.ring method)": [[200, "sympy.polys.domains.ring.Ring.ideal"]], "imul_num() (sympy.polys.rings.polyelement method)": [[200, "sympy.polys.rings.PolyElement.imul_num"]], "index() (sympy.polys.rings.polyring method)": [[200, "sympy.polys.rings.PolyRing.index"]], "inject() (sympy.polys.domains.compositedomain.compositedomain method)": [[200, "sympy.polys.domains.compositedomain.CompositeDomain.inject"]], "inject() (sympy.polys.domains.domain.domain method)": [[200, "sympy.polys.domains.domain.Domain.inject"]], "inject() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[200, "sympy.polys.domains.gaussiandomains.GaussianDomain.inject"]], "inject() (sympy.polys.domains.simpledomain.simpledomain method)": [[200, "sympy.polys.domains.simpledomain.SimpleDomain.inject"]], "inject() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.inject"]], "integral_basis() (sympy.polys.domains.algebraicfield method)": [[200, "sympy.polys.domains.AlgebraicField.integral_basis"]], "integrate() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.integrate"]], "intervals() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.intervals"]], "invert() (sympy.polys.domains.domain.domain method)": [[200, "sympy.polys.domains.domain.Domain.invert"]], "invert() (sympy.polys.domains.ring.ring method)": [[200, "sympy.polys.domains.ring.Ring.invert"]], "invert() (sympy.polys.polyclasses.dmf method)": [[200, "sympy.polys.polyclasses.DMF.invert"]], "invert() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.invert"]], "is_field (sympy.polys.domains.domain.domain attribute)": [[200, "sympy.polys.domains.domain.Domain.is_Field"]], "is_pid (sympy.polys.domains.domain.domain attribute)": [[200, "sympy.polys.domains.domain.Domain.is_PID"]], "is_ring (sympy.polys.domains.domain.domain attribute)": [[200, "sympy.polys.domains.domain.Domain.is_Ring"]], "is_cyclotomic (sympy.polys.polyclasses.dmp property)": [[200, "sympy.polys.polyclasses.DMP.is_cyclotomic"]], "is_ground (sympy.polys.polyclasses.anp property)": [[200, "sympy.polys.polyclasses.ANP.is_ground"]], "is_ground (sympy.polys.polyclasses.dmp property)": [[200, "sympy.polys.polyclasses.DMP.is_ground"]], "is_homogeneous (sympy.polys.polyclasses.dmp property)": [[200, "sympy.polys.polyclasses.DMP.is_homogeneous"]], "is_irreducible (sympy.polys.polyclasses.dmp property)": [[200, "sympy.polys.polyclasses.DMP.is_irreducible"]], "is_linear (sympy.polys.polyclasses.dmp property)": [[200, "sympy.polys.polyclasses.DMP.is_linear"]], "is_monic (sympy.polys.polyclasses.dmp property)": [[200, "sympy.polys.polyclasses.DMP.is_monic"]], "is_monomial (sympy.polys.polyclasses.dmp property)": [[200, "sympy.polys.polyclasses.DMP.is_monomial"]], "is_negative() (sympy.polys.domains.algebraicfield method)": [[200, "sympy.polys.domains.AlgebraicField.is_negative"]], "is_negative() (sympy.polys.domains.complexfield method)": [[200, "sympy.polys.domains.ComplexField.is_negative"]], "is_negative() (sympy.polys.domains.expressiondomain method)": [[200, "sympy.polys.domains.ExpressionDomain.is_negative"]], "is_negative() (sympy.polys.domains.fractionfield method)": [[200, "sympy.polys.domains.FractionField.is_negative"]], "is_negative() (sympy.polys.domains.polynomialring method)": [[200, "sympy.polys.domains.PolynomialRing.is_negative"]], "is_negative() (sympy.polys.domains.domain.domain method)": [[200, "sympy.polys.domains.domain.Domain.is_negative"]], "is_negative() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[200, "sympy.polys.domains.gaussiandomains.GaussianDomain.is_negative"]], "is_nonnegative() (sympy.polys.domains.algebraicfield method)": [[200, "sympy.polys.domains.AlgebraicField.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.complexfield method)": [[200, "sympy.polys.domains.ComplexField.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.expressiondomain method)": [[200, "sympy.polys.domains.ExpressionDomain.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.fractionfield method)": [[200, "sympy.polys.domains.FractionField.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.polynomialring method)": [[200, "sympy.polys.domains.PolynomialRing.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.domain.domain method)": [[200, "sympy.polys.domains.domain.Domain.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[200, "sympy.polys.domains.gaussiandomains.GaussianDomain.is_nonnegative"]], "is_nonpositive() (sympy.polys.domains.algebraicfield method)": [[200, "sympy.polys.domains.AlgebraicField.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.complexfield method)": [[200, "sympy.polys.domains.ComplexField.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.expressiondomain method)": [[200, "sympy.polys.domains.ExpressionDomain.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.fractionfield method)": [[200, "sympy.polys.domains.FractionField.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.polynomialring method)": [[200, "sympy.polys.domains.PolynomialRing.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.domain.domain method)": [[200, "sympy.polys.domains.domain.Domain.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[200, "sympy.polys.domains.gaussiandomains.GaussianDomain.is_nonpositive"]], "is_one (sympy.polys.polyclasses.anp property)": [[200, "sympy.polys.polyclasses.ANP.is_one"]], "is_one (sympy.polys.polyclasses.dmf property)": [[200, "sympy.polys.polyclasses.DMF.is_one"]], "is_one (sympy.polys.polyclasses.dmp property)": [[200, "sympy.polys.polyclasses.DMP.is_one"]], "is_one() (sympy.polys.domains.domain.domain method)": [[200, "sympy.polys.domains.domain.Domain.is_one"]], "is_positive() (sympy.polys.domains.algebraicfield method)": [[200, "sympy.polys.domains.AlgebraicField.is_positive"]], "is_positive() (sympy.polys.domains.complexfield method)": [[200, "sympy.polys.domains.ComplexField.is_positive"]], "is_positive() (sympy.polys.domains.expressiondomain method)": [[200, "sympy.polys.domains.ExpressionDomain.is_positive"]], "is_positive() (sympy.polys.domains.fractionfield method)": [[200, "sympy.polys.domains.FractionField.is_positive"]], "is_positive() (sympy.polys.domains.polynomialring method)": [[200, "sympy.polys.domains.PolynomialRing.is_positive"]], "is_positive() (sympy.polys.domains.domain.domain method)": [[200, "sympy.polys.domains.domain.Domain.is_positive"]], "is_positive() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[200, "sympy.polys.domains.gaussiandomains.GaussianDomain.is_positive"]], "is_primitive (sympy.polys.polyclasses.dmp property)": [[200, "sympy.polys.polyclasses.DMP.is_primitive"]], "is_quadratic (sympy.polys.polyclasses.dmp property)": [[200, "sympy.polys.polyclasses.DMP.is_quadratic"]], "is_sqf (sympy.polys.polyclasses.dmp property)": [[200, "sympy.polys.polyclasses.DMP.is_sqf"]], "is_unit() (sympy.polys.domains.polynomialring method)": [[200, "sympy.polys.domains.PolynomialRing.is_unit"]], "is_unit() (sympy.polys.domains.field.field method)": [[200, "sympy.polys.domains.field.Field.is_unit"]], "is_zero (sympy.polys.polyclasses.anp property)": [[200, "sympy.polys.polyclasses.ANP.is_zero"]], "is_zero (sympy.polys.polyclasses.dmf property)": [[200, "sympy.polys.polyclasses.DMF.is_zero"]], "is_zero (sympy.polys.polyclasses.dmp property)": [[200, "sympy.polys.polyclasses.DMP.is_zero"]], "is_zero() (sympy.polys.domains.domain.domain method)": [[200, "sympy.polys.domains.domain.Domain.is_zero"]], "itercoeffs() (sympy.polys.rings.polyelement method)": [[200, "sympy.polys.rings.PolyElement.itercoeffs"]], "itermonoms() (sympy.polys.rings.polyelement method)": [[200, "sympy.polys.rings.PolyElement.itermonoms"]], "iterterms() (sympy.polys.rings.polyelement method)": [[200, "sympy.polys.rings.PolyElement.iterterms"]], "l1_norm() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.l1_norm"]], "l2_norm_squared() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.l2_norm_squared"]], "lcm() (sympy.polys.domains.complexfield method)": [[200, "sympy.polys.domains.ComplexField.lcm"]], "lcm() (sympy.polys.domains.gmpyintegerring method)": [[200, "sympy.polys.domains.GMPYIntegerRing.lcm"]], "lcm() (sympy.polys.domains.integerring method)": [[200, "sympy.polys.domains.IntegerRing.lcm"]], "lcm() (sympy.polys.domains.polynomialring method)": [[200, "sympy.polys.domains.PolynomialRing.lcm"]], "lcm() (sympy.polys.domains.realfield method)": [[200, "sympy.polys.domains.RealField.lcm"]], "lcm() (sympy.polys.domains.domain.domain method)": [[200, "sympy.polys.domains.domain.Domain.lcm"]], "lcm() (sympy.polys.domains.field.field method)": [[200, "sympy.polys.domains.field.Field.lcm"]], "lcm() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[200, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.lcm"]], "lcm() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.lcm"]], "leading_expv() (sympy.polys.rings.polyelement method)": [[200, "sympy.polys.rings.PolyElement.leading_expv"]], "leading_monom() (sympy.polys.rings.polyelement method)": [[200, "sympy.polys.rings.PolyElement.leading_monom"]], "leading_term() (sympy.polys.rings.polyelement method)": [[200, "sympy.polys.rings.PolyElement.leading_term"]], "lift() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.lift"]], "listcoeffs() (sympy.polys.rings.polyelement method)": [[200, "sympy.polys.rings.PolyElement.listcoeffs"]], "listmonoms() (sympy.polys.rings.polyelement method)": [[200, "sympy.polys.rings.PolyElement.listmonoms"]], "listterms() (sympy.polys.rings.polyelement method)": [[200, "sympy.polys.rings.PolyElement.listterms"]], "log() (sympy.polys.domains.integerring method)": [[200, "sympy.polys.domains.IntegerRing.log"]], "log() (sympy.polys.domains.domain.domain method)": [[200, "sympy.polys.domains.domain.Domain.log"]], "map() (sympy.polys.domains.domain.domain method)": [[200, "sympy.polys.domains.domain.Domain.map"]], "max_norm() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.max_norm"]], "maximal_order() (sympy.polys.domains.algebraicfield method)": [[200, "sympy.polys.domains.AlgebraicField.maximal_order"]], "mignotte_sep_bound_squared() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.mignotte_sep_bound_squared"]], "mod (sympy.polys.domains.algebraicfield attribute)": [[200, "sympy.polys.domains.AlgebraicField.mod"]], "monic() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.monic"]], "monic() (sympy.polys.rings.polyelement method)": [[200, "sympy.polys.rings.PolyElement.monic"]], "monomial_basis() (sympy.polys.rings.polyring method)": [[200, "sympy.polys.rings.PolyRing.monomial_basis"]], "monoms() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.monoms"]], "monoms() (sympy.polys.rings.polyelement method)": [[200, "sympy.polys.rings.PolyElement.monoms"]], "mul() (sympy.polys.domains.domain.domain method)": [[200, "sympy.polys.domains.domain.Domain.mul"]], "mul() (sympy.polys.polyclasses.dmf method)": [[200, "sympy.polys.polyclasses.DMF.mul"]], "mul() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.mul"]], "mul() (sympy.polys.rings.polyring method)": [[200, "sympy.polys.rings.PolyRing.mul"]], "mul_ground() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.mul_ground"]], "n() (sympy.polys.domains.domain.domain method)": [[200, "sympy.polys.domains.domain.Domain.n"]], "neg() (sympy.polys.domains.domain.domain method)": [[200, "sympy.polys.domains.domain.Domain.neg"]], "neg() (sympy.polys.polyclasses.dmf method)": [[200, "sympy.polys.polyclasses.DMF.neg"]], "neg() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.neg"]], "new() (sympy.polys.domains.gaussiandomains.gaussianelement class method)": [[200, "sympy.polys.domains.gaussiandomains.GaussianElement.new"]], "norm() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.norm"]], "normalize() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[200, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.normalize"]], "nth() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.nth"]], "numer() (sympy.polys.domains.algebraicfield method)": [[200, "sympy.polys.domains.AlgebraicField.numer"]], "numer() (sympy.polys.domains.expressiondomain method)": [[200, "sympy.polys.domains.ExpressionDomain.numer"]], "numer() (sympy.polys.domains.fractionfield method)": [[200, "sympy.polys.domains.FractionField.numer"]], "numer() (sympy.polys.domains.gmpyrationalfield method)": [[200, "sympy.polys.domains.GMPYRationalField.numer"]], "numer() (sympy.polys.domains.rationalfield method)": [[200, "sympy.polys.domains.RationalField.numer"]], "numer() (sympy.polys.domains.domain.domain method)": [[200, "sympy.polys.domains.domain.Domain.numer"]], "numer() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[200, "sympy.polys.domains.gaussiandomains.GaussianRationalField.numer"]], "numer() (sympy.polys.domains.ring.ring method)": [[200, "sympy.polys.domains.ring.Ring.numer"]], "numer() (sympy.polys.polyclasses.dmf method)": [[200, "sympy.polys.polyclasses.DMF.numer"]], "of_type() (sympy.polys.domains.domain.domain method)": [[200, "sympy.polys.domains.domain.Domain.of_type"]], "old_frac_field() (sympy.polys.domains.domain.domain method)": [[200, "sympy.polys.domains.domain.Domain.old_frac_field"]], "old_poly_ring() (sympy.polys.domains.domain.domain method)": [[200, "sympy.polys.domains.domain.Domain.old_poly_ring"]], "one (sympy.polys.domains.domain.domain attribute)": [[200, "sympy.polys.domains.domain.Domain.one"]], "orig_ext (sympy.polys.domains.algebraicfield attribute)": [[200, "sympy.polys.domains.AlgebraicField.orig_ext"]], "parent() (sympy.polys.domains.domainelement.domainelement method)": [[200, "sympy.polys.domains.domainelement.DomainElement.parent"]], "parent() (sympy.polys.domains.gaussiandomains.gaussianelement method)": [[200, "sympy.polys.domains.gaussiandomains.GaussianElement.parent"]], "pdiv() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.pdiv"]], "per() (sympy.polys.polyclasses.dmf method)": [[200, "sympy.polys.polyclasses.DMF.per"]], "per() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.per"]], "permute() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.permute"]], "pexquo() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.pexquo"]], "poly_ring() (sympy.polys.domains.domain.domain method)": [[200, "sympy.polys.domains.domain.Domain.poly_ring"]], "poly_unify() (sympy.polys.polyclasses.dmf method)": [[200, "sympy.polys.polyclasses.DMF.poly_unify"]], "pos() (sympy.polys.domains.domain.domain method)": [[200, "sympy.polys.domains.domain.Domain.pos"]], "pow() (sympy.polys.domains.domain.domain method)": [[200, "sympy.polys.domains.domain.Domain.pow"]], "pow() (sympy.polys.polyclasses.anp method)": [[200, "sympy.polys.polyclasses.ANP.pow"]], "pow() (sympy.polys.polyclasses.dmf method)": [[200, "sympy.polys.polyclasses.DMF.pow"]], "pow() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.pow"]], "pquo() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.pquo"]], "prem() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.prem"]], "primes_above() (sympy.polys.domains.algebraicfield method)": [[200, "sympy.polys.domains.AlgebraicField.primes_above"]], "primitive() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.primitive"]], "primitive() (sympy.polys.rings.polyelement method)": [[200, "sympy.polys.rings.PolyElement.primitive"]], "quadrant() (sympy.polys.domains.gaussiandomains.gaussianelement method)": [[200, "sympy.polys.domains.gaussiandomains.GaussianElement.quadrant"]], "quo() (sympy.polys.domains.gmpyrationalfield method)": [[200, "sympy.polys.domains.GMPYRationalField.quo"]], "quo() (sympy.polys.domains.rationalfield method)": [[200, "sympy.polys.domains.RationalField.quo"]], "quo() (sympy.polys.domains.domain.domain method)": [[200, "sympy.polys.domains.domain.Domain.quo"]], "quo() (sympy.polys.domains.field.field method)": [[200, "sympy.polys.domains.field.Field.quo"]], "quo() (sympy.polys.domains.ring.ring method)": [[200, "sympy.polys.domains.ring.Ring.quo"]], "quo() (sympy.polys.polyclasses.dmf method)": [[200, "sympy.polys.polyclasses.DMF.quo"]], "quo() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.quo"]], "quo_ground() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.quo_ground"]], "quotient_ring() (sympy.polys.domains.ring.ring method)": [[200, "sympy.polys.domains.ring.Ring.quotient_ring"]], "refine_root() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.refine_root"]], "rem() (sympy.polys.domains.gmpyrationalfield method)": [[200, "sympy.polys.domains.GMPYRationalField.rem"]], "rem() (sympy.polys.domains.rationalfield method)": [[200, "sympy.polys.domains.RationalField.rem"]], "rem() (sympy.polys.domains.domain.domain method)": [[200, "sympy.polys.domains.domain.Domain.rem"]], "rem() (sympy.polys.domains.field.field method)": [[200, "sympy.polys.domains.field.Field.rem"]], "rem() (sympy.polys.domains.ring.ring method)": [[200, "sympy.polys.domains.ring.Ring.rem"]], "rem() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.rem"]], "resultant() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.resultant"]], "revert() (sympy.polys.domains.domain.domain method)": [[200, "sympy.polys.domains.domain.Domain.revert"]], "revert() (sympy.polys.domains.field.field method)": [[200, "sympy.polys.domains.field.Field.revert"]], "revert() (sympy.polys.domains.ring.ring method)": [[200, "sympy.polys.domains.ring.Ring.revert"]], "revert() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.revert"]], "ring() (in module sympy.polys.rings)": [[200, "sympy.polys.rings.ring"]], "sfield() (in module sympy.polys.fields)": [[200, "sympy.polys.fields.sfield"]], "shift() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.shift"]], "slice() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.slice"]], "sqf_list() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.sqf_list"]], "sqf_list_include() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.sqf_list_include"]], "sqf_norm() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.sqf_norm"]], "sqf_part() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.sqf_part"]], "sqr() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.sqr"]], "sqrt() (sympy.polys.domains.gmpyintegerring method)": [[200, "sympy.polys.domains.GMPYIntegerRing.sqrt"]], "sqrt() (sympy.polys.domains.integerring method)": [[200, "sympy.polys.domains.IntegerRing.sqrt"]], "sqrt() (sympy.polys.domains.domain.domain method)": [[200, "sympy.polys.domains.domain.Domain.sqrt"]], "square() (sympy.polys.rings.polyelement method)": [[200, "sympy.polys.rings.PolyElement.square"]], "sring() (in module sympy.polys.rings)": [[200, "sympy.polys.rings.sring"]], "strip_zero() (sympy.polys.rings.polyelement method)": [[200, "sympy.polys.rings.PolyElement.strip_zero"]], "sturm() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.sturm"]], "sub() (sympy.polys.domains.domain.domain method)": [[200, "sympy.polys.domains.domain.Domain.sub"]], "sub() (sympy.polys.polyclasses.dmf method)": [[200, "sympy.polys.polyclasses.DMF.sub"]], "sub() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.sub"]], "sub_ground() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.sub_ground"]], "subresultants() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.subresultants"]], "tail_degree() (sympy.polys.rings.polyelement method)": [[200, "sympy.polys.rings.PolyElement.tail_degree"]], "tail_degrees() (sympy.polys.rings.polyelement method)": [[200, "sympy.polys.rings.PolyElement.tail_degrees"]], "terms() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.terms"]], "terms() (sympy.polys.rings.polyelement method)": [[200, "sympy.polys.rings.PolyElement.terms"]], "terms_gcd() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.terms_gcd"]], "to_alg_num() (sympy.polys.domains.algebraicfield method)": [[200, "sympy.polys.domains.AlgebraicField.to_alg_num"]], "to_dict() (sympy.polys.polyclasses.anp method)": [[200, "sympy.polys.polyclasses.ANP.to_dict"]], "to_dict() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.to_dict"]], "to_exact() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.to_exact"]], "to_field() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.to_field"]], "to_list() (sympy.polys.polyclasses.anp method)": [[200, "sympy.polys.polyclasses.ANP.to_list"]], "to_list() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.to_list"]], "to_rational() (sympy.polys.domains.realfield method)": [[200, "sympy.polys.domains.RealField.to_rational"]], "to_ring() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.to_ring"]], "to_sympy() (sympy.polys.domains.algebraicfield method)": [[200, "sympy.polys.domains.AlgebraicField.to_sympy"]], "to_sympy() (sympy.polys.domains.complexfield method)": [[200, "sympy.polys.domains.ComplexField.to_sympy"]], "to_sympy() (sympy.polys.domains.expressiondomain method)": [[200, "sympy.polys.domains.ExpressionDomain.to_sympy"]], "to_sympy() (sympy.polys.domains.finitefield method)": [[200, "sympy.polys.domains.FiniteField.to_sympy"]], "to_sympy() (sympy.polys.domains.fractionfield method)": [[200, "sympy.polys.domains.FractionField.to_sympy"]], "to_sympy() (sympy.polys.domains.gmpyintegerring method)": [[200, "sympy.polys.domains.GMPYIntegerRing.to_sympy"]], "to_sympy() (sympy.polys.domains.gmpyrationalfield method)": [[200, "sympy.polys.domains.GMPYRationalField.to_sympy"]], "to_sympy() (sympy.polys.domains.integerring method)": [[200, "sympy.polys.domains.IntegerRing.to_sympy"]], "to_sympy() (sympy.polys.domains.polynomialring method)": [[200, "sympy.polys.domains.PolynomialRing.to_sympy"]], "to_sympy() (sympy.polys.domains.rationalfield method)": [[200, "sympy.polys.domains.RationalField.to_sympy"]], "to_sympy() (sympy.polys.domains.realfield method)": [[200, "sympy.polys.domains.RealField.to_sympy"]], "to_sympy() (sympy.polys.domains.domain.domain method)": [[200, "sympy.polys.domains.domain.Domain.to_sympy"]], "to_sympy() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[200, "sympy.polys.domains.gaussiandomains.GaussianDomain.to_sympy"]], "to_sympy_dict() (sympy.polys.polyclasses.anp method)": [[200, "sympy.polys.polyclasses.ANP.to_sympy_dict"]], "to_sympy_dict() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.to_sympy_dict"]], "to_sympy_list() (sympy.polys.polyclasses.anp method)": [[200, "sympy.polys.polyclasses.ANP.to_sympy_list"]], "to_sympy_list() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.to_sympy_list"]], "to_tuple() (sympy.polys.polyclasses.anp method)": [[200, "sympy.polys.polyclasses.ANP.to_tuple"]], "to_tuple() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.to_tuple"]], "total_degree() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.total_degree"]], "tp (sympy.polys.domains.domain.domain property)": [[200, "sympy.polys.domains.domain.Domain.tp"]], "transform() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.transform"]], "trunc() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.trunc"]], "unify() (sympy.polys.domains.domain.domain method)": [[200, "sympy.polys.domains.domain.Domain.unify"]], "unify() (sympy.polys.polyclasses.anp method)": [[200, "sympy.polys.polyclasses.ANP.unify"]], "unify() (sympy.polys.polyclasses.dmp method)": [[200, "sympy.polys.polyclasses.DMP.unify"]], "vfield() (in module sympy.polys.fields)": [[200, "sympy.polys.fields.vfield"]], "vring() (in module sympy.polys.rings)": [[200, "sympy.polys.rings.vring"]], "xfield() (in module sympy.polys.fields)": [[200, "sympy.polys.fields.xfield"]], "xring() (in module sympy.polys.rings)": [[200, "sympy.polys.rings.xring"]], "zero (sympy.polys.domains.domain.domain attribute)": [[200, "sympy.polys.domains.domain.Domain.zero"]], "basepolynomialerror (class in sympy.polys.polyerrors)": [[202, "sympy.polys.polyerrors.BasePolynomialError"]], "coercionfailed (class in sympy.polys.polyerrors)": [[202, "sympy.polys.polyerrors.CoercionFailed"]], "computationfailed (class in sympy.polys.polyerrors)": [[202, "sympy.polys.polyerrors.ComputationFailed"]], "domainerror (class in sympy.polys.polyerrors)": [[202, "sympy.polys.polyerrors.DomainError"]], "evaluationfailed (class in sympy.polys.polyerrors)": [[202, "sympy.polys.polyerrors.EvaluationFailed"]], "exactquotientfailed (class in sympy.polys.polyerrors)": [[202, "sympy.polys.polyerrors.ExactQuotientFailed"]], "extraneousfactors (class in sympy.polys.polyerrors)": [[202, "sympy.polys.polyerrors.ExtraneousFactors"]], "flagerror (class in sympy.polys.polyerrors)": [[202, "sympy.polys.polyerrors.FlagError"]], "generatorserror (class in sympy.polys.polyerrors)": [[202, "sympy.polys.polyerrors.GeneratorsError"]], "generatorsneeded (class in sympy.polys.polyerrors)": [[202, "sympy.polys.polyerrors.GeneratorsNeeded"]], "heuristicgcdfailed (class in sympy.polys.polyerrors)": [[202, "sympy.polys.polyerrors.HeuristicGCDFailed"]], "homomorphismfailed (class in sympy.polys.polyerrors)": [[202, "sympy.polys.polyerrors.HomomorphismFailed"]], "isomorphismfailed (class in sympy.polys.polyerrors)": [[202, "sympy.polys.polyerrors.IsomorphismFailed"]], "multivariatepolynomialerror (class in sympy.polys.polyerrors)": [[202, "sympy.polys.polyerrors.MultivariatePolynomialError"]], "notalgebraic (class in sympy.polys.polyerrors)": [[202, "sympy.polys.polyerrors.NotAlgebraic"]], "notinvertible (class in sympy.polys.polyerrors)": [[202, "sympy.polys.polyerrors.NotInvertible"]], "notreversible (class in sympy.polys.polyerrors)": [[202, "sympy.polys.polyerrors.NotReversible"]], "operationnotsupported (class in sympy.polys.polyerrors)": [[202, "sympy.polys.polyerrors.OperationNotSupported"]], "optionerror (class in sympy.polys.polyerrors)": [[202, "sympy.polys.polyerrors.OptionError"]], "options (class in sympy.polys.polyoptions)": [[202, "sympy.polys.polyoptions.Options"]], "polificationfailed (class in sympy.polys.polyerrors)": [[202, "sympy.polys.polyerrors.PolificationFailed"]], "polynomialerror (class in sympy.polys.polyerrors)": [[202, "sympy.polys.polyerrors.PolynomialError"]], "refinementfailed (class in sympy.polys.polyerrors)": [[202, "sympy.polys.polyerrors.RefinementFailed"]], "unificationfailed (class in sympy.polys.polyerrors)": [[202, "sympy.polys.polyerrors.UnificationFailed"]], "univariatepolynomialerror (class in sympy.polys.polyerrors)": [[202, "sympy.polys.polyerrors.UnivariatePolynomialError"]], "_modgcd_multivariate_p() (in module sympy.polys.modulargcd)": [[202, "sympy.polys.modulargcd._modgcd_multivariate_p"]], "build_options() (in module sympy.polys.polyoptions)": [[202, "sympy.polys.polyoptions.build_options"]], "clone() (sympy.polys.polyoptions.options method)": [[202, "sympy.polys.polyoptions.Options.clone"]], "dmp_lc() (in module sympy.polys.densebasic)": [[202, "sympy.polys.densebasic.dmp_LC"]], "dmp_tc() (in module sympy.polys.densebasic)": [[202, "sympy.polys.densebasic.dmp_TC"]], "dmp_abs() (in module sympy.polys.densearith)": [[202, "sympy.polys.densearith.dmp_abs"]], "dmp_add() (in module sympy.polys.densearith)": [[202, "sympy.polys.densearith.dmp_add"]], "dmp_add_ground() (in module sympy.polys.densearith)": [[202, "sympy.polys.densearith.dmp_add_ground"]], "dmp_add_mul() (in module sympy.polys.densearith)": [[202, "sympy.polys.densearith.dmp_add_mul"]], "dmp_add_term() (in module sympy.polys.densearith)": [[202, "sympy.polys.densearith.dmp_add_term"]], "dmp_apply_pairs() (in module sympy.polys.densebasic)": [[202, "sympy.polys.densebasic.dmp_apply_pairs"]], "dmp_cancel() (in module sympy.polys.euclidtools)": [[202, "sympy.polys.euclidtools.dmp_cancel"]], "dmp_clear_denoms() (in module sympy.polys.densetools)": [[202, "sympy.polys.densetools.dmp_clear_denoms"]], "dmp_compose() (in module sympy.polys.densetools)": [[202, "sympy.polys.densetools.dmp_compose"]], "dmp_content() (in module sympy.polys.euclidtools)": [[202, "sympy.polys.euclidtools.dmp_content"]], "dmp_convert() (in module sympy.polys.densebasic)": [[202, "sympy.polys.densebasic.dmp_convert"]], "dmp_copy() (in module sympy.polys.densebasic)": [[202, "sympy.polys.densebasic.dmp_copy"]], "dmp_deflate() (in module sympy.polys.densebasic)": [[202, "sympy.polys.densebasic.dmp_deflate"]], "dmp_degree() (in module sympy.polys.densebasic)": [[202, "sympy.polys.densebasic.dmp_degree"]], "dmp_degree_in() (in module sympy.polys.densebasic)": [[202, "sympy.polys.densebasic.dmp_degree_in"]], "dmp_degree_list() (in module sympy.polys.densebasic)": [[202, "sympy.polys.densebasic.dmp_degree_list"]], "dmp_diff() (in module sympy.polys.densetools)": [[202, "sympy.polys.densetools.dmp_diff"]], "dmp_diff_eval_in() (in module sympy.polys.densetools)": [[202, "sympy.polys.densetools.dmp_diff_eval_in"]], "dmp_diff_in() (in module sympy.polys.densetools)": [[202, "sympy.polys.densetools.dmp_diff_in"]], "dmp_discriminant() (in module sympy.polys.euclidtools)": [[202, "sympy.polys.euclidtools.dmp_discriminant"]], "dmp_div() (in module sympy.polys.densearith)": [[202, "sympy.polys.densearith.dmp_div"]], "dmp_eject() (in module sympy.polys.densebasic)": [[202, "sympy.polys.densebasic.dmp_eject"]], "dmp_euclidean_prs() (in module sympy.polys.euclidtools)": [[202, "sympy.polys.euclidtools.dmp_euclidean_prs"]], "dmp_eval() (in module sympy.polys.densetools)": [[202, "sympy.polys.densetools.dmp_eval"]], "dmp_eval_in() (in module sympy.polys.densetools)": [[202, "sympy.polys.densetools.dmp_eval_in"]], "dmp_eval_tail() (in module sympy.polys.densetools)": [[202, "sympy.polys.densetools.dmp_eval_tail"]], "dmp_exclude() (in module sympy.polys.densebasic)": [[202, "sympy.polys.densebasic.dmp_exclude"]], "dmp_expand() (in module sympy.polys.densearith)": [[202, "sympy.polys.densearith.dmp_expand"]], "dmp_exquo() (in module sympy.polys.densearith)": [[202, "sympy.polys.densearith.dmp_exquo"]], "dmp_exquo_ground() (in module sympy.polys.densearith)": [[202, "sympy.polys.densearith.dmp_exquo_ground"]], "dmp_ext_factor() (in module sympy.polys.factortools)": [[202, "sympy.polys.factortools.dmp_ext_factor"]], "dmp_factor_list() (in module sympy.polys.factortools)": [[202, "sympy.polys.factortools.dmp_factor_list"]], "dmp_factor_list_include() (in module sympy.polys.factortools)": [[202, "sympy.polys.factortools.dmp_factor_list_include"]], "dmp_ff_div() (in module sympy.polys.densearith)": [[202, "sympy.polys.densearith.dmp_ff_div"]], "dmp_ff_prs_gcd() (in module sympy.polys.euclidtools)": [[202, "sympy.polys.euclidtools.dmp_ff_prs_gcd"]], "dmp_from_dict() (in module sympy.polys.densebasic)": [[202, "sympy.polys.densebasic.dmp_from_dict"]], "dmp_from_sympy() (in module sympy.polys.densebasic)": [[202, "sympy.polys.densebasic.dmp_from_sympy"]], "dmp_gcd() (in module sympy.polys.euclidtools)": [[202, "sympy.polys.euclidtools.dmp_gcd"]], "dmp_gcdex() (in module sympy.polys.euclidtools)": [[202, "sympy.polys.euclidtools.dmp_gcdex"]], "dmp_ground() (in module sympy.polys.densebasic)": [[202, "sympy.polys.densebasic.dmp_ground"]], "dmp_ground_lc() (in module sympy.polys.densebasic)": [[202, "sympy.polys.densebasic.dmp_ground_LC"]], "dmp_ground_tc() (in module sympy.polys.densebasic)": [[202, "sympy.polys.densebasic.dmp_ground_TC"]], "dmp_ground_content() (in module sympy.polys.densetools)": [[202, "sympy.polys.densetools.dmp_ground_content"]], "dmp_ground_extract() (in module sympy.polys.densetools)": [[202, "sympy.polys.densetools.dmp_ground_extract"]], "dmp_ground_monic() (in module sympy.polys.densetools)": [[202, "sympy.polys.densetools.dmp_ground_monic"]], "dmp_ground_nth() (in module sympy.polys.densebasic)": [[202, "sympy.polys.densebasic.dmp_ground_nth"]], "dmp_ground_p() (in module sympy.polys.densebasic)": [[202, "sympy.polys.densebasic.dmp_ground_p"]], "dmp_ground_primitive() (in module sympy.polys.densetools)": [[202, "sympy.polys.densetools.dmp_ground_primitive"]], "dmp_ground_trunc() (in module sympy.polys.densetools)": [[202, "sympy.polys.densetools.dmp_ground_trunc"]], "dmp_grounds() (in module sympy.polys.densebasic)": [[202, "sympy.polys.densebasic.dmp_grounds"]], "dmp_half_gcdex() (in module sympy.polys.euclidtools)": [[202, "sympy.polys.euclidtools.dmp_half_gcdex"]], "dmp_include() (in module sympy.polys.densebasic)": [[202, "sympy.polys.densebasic.dmp_include"]], "dmp_inflate() (in module sympy.polys.densebasic)": [[202, "sympy.polys.densebasic.dmp_inflate"]], "dmp_inject() (in module sympy.polys.densebasic)": [[202, "sympy.polys.densebasic.dmp_inject"]], "dmp_inner_gcd() (in module sympy.polys.euclidtools)": [[202, "sympy.polys.euclidtools.dmp_inner_gcd"]], "dmp_inner_subresultants() (in module sympy.polys.euclidtools)": [[202, "sympy.polys.euclidtools.dmp_inner_subresultants"]], "dmp_integrate() (in module sympy.polys.densetools)": [[202, "sympy.polys.densetools.dmp_integrate"]], "dmp_integrate_in() (in module sympy.polys.densetools)": [[202, "sympy.polys.densetools.dmp_integrate_in"]], "dmp_invert() (in module sympy.polys.euclidtools)": [[202, "sympy.polys.euclidtools.dmp_invert"]], "dmp_irreducible_p() (in module sympy.polys.factortools)": [[202, "sympy.polys.factortools.dmp_irreducible_p"]], "dmp_l1_norm() (in module sympy.polys.densearith)": [[202, "sympy.polys.densearith.dmp_l1_norm"]], "dmp_lcm() (in module sympy.polys.euclidtools)": [[202, "sympy.polys.euclidtools.dmp_lcm"]], "dmp_lift() (in module sympy.polys.densetools)": [[202, "sympy.polys.densetools.dmp_lift"]], "dmp_list_terms() (in module sympy.polys.densebasic)": [[202, "sympy.polys.densebasic.dmp_list_terms"]], "dmp_max_norm() (in module sympy.polys.densearith)": [[202, "sympy.polys.densearith.dmp_max_norm"]], "dmp_mul() (in module sympy.polys.densearith)": [[202, "sympy.polys.densearith.dmp_mul"]], "dmp_mul_ground() (in module sympy.polys.densearith)": [[202, "sympy.polys.densearith.dmp_mul_ground"]], "dmp_mul_term() (in module sympy.polys.densearith)": [[202, "sympy.polys.densearith.dmp_mul_term"]], "dmp_multi_deflate() (in module sympy.polys.densebasic)": [[202, "sympy.polys.densebasic.dmp_multi_deflate"]], "dmp_neg() (in module sympy.polys.densearith)": [[202, "sympy.polys.densearith.dmp_neg"]], "dmp_negative_p() (in module sympy.polys.densebasic)": [[202, "sympy.polys.densebasic.dmp_negative_p"]], "dmp_nest() (in module sympy.polys.densebasic)": [[202, "sympy.polys.densebasic.dmp_nest"]], "dmp_normal() (in module sympy.polys.densebasic)": [[202, "sympy.polys.densebasic.dmp_normal"]], "dmp_nth() (in module sympy.polys.densebasic)": [[202, "sympy.polys.densebasic.dmp_nth"]], "dmp_one() (in module sympy.polys.densebasic)": [[202, "sympy.polys.densebasic.dmp_one"]], "dmp_one_p() (in module sympy.polys.densebasic)": [[202, "sympy.polys.densebasic.dmp_one_p"]], "dmp_pdiv() (in module sympy.polys.densearith)": [[202, "sympy.polys.densearith.dmp_pdiv"]], "dmp_permute() (in module sympy.polys.densebasic)": [[202, "sympy.polys.densebasic.dmp_permute"]], "dmp_pexquo() (in module sympy.polys.densearith)": [[202, "sympy.polys.densearith.dmp_pexquo"]], "dmp_positive_p() (in module sympy.polys.densebasic)": [[202, "sympy.polys.densebasic.dmp_positive_p"]], "dmp_pow() (in module sympy.polys.densearith)": [[202, "sympy.polys.densearith.dmp_pow"]], "dmp_pquo() (in module sympy.polys.densearith)": [[202, "sympy.polys.densearith.dmp_pquo"]], "dmp_prem() (in module sympy.polys.densearith)": [[202, "sympy.polys.densearith.dmp_prem"]], "dmp_primitive() (in module sympy.polys.euclidtools)": [[202, "sympy.polys.euclidtools.dmp_primitive"]], "dmp_primitive_prs() (in module sympy.polys.euclidtools)": [[202, "sympy.polys.euclidtools.dmp_primitive_prs"]], "dmp_prs_resultant() (in module sympy.polys.euclidtools)": [[202, "sympy.polys.euclidtools.dmp_prs_resultant"]], "dmp_qq_collins_resultant() (in module sympy.polys.euclidtools)": [[202, "sympy.polys.euclidtools.dmp_qq_collins_resultant"]], "dmp_qq_heu_gcd() (in module sympy.polys.euclidtools)": [[202, "sympy.polys.euclidtools.dmp_qq_heu_gcd"]], "dmp_quo() (in module sympy.polys.densearith)": [[202, "sympy.polys.densearith.dmp_quo"]], "dmp_quo_ground() (in module sympy.polys.densearith)": [[202, "sympy.polys.densearith.dmp_quo_ground"]], "dmp_raise() (in module sympy.polys.densebasic)": [[202, "sympy.polys.densebasic.dmp_raise"]], "dmp_rem() (in module sympy.polys.densearith)": [[202, "sympy.polys.densearith.dmp_rem"]], "dmp_resultant() (in module sympy.polys.euclidtools)": [[202, "sympy.polys.euclidtools.dmp_resultant"]], "dmp_revert() (in module sympy.polys.densetools)": [[202, "sympy.polys.densetools.dmp_revert"]], "dmp_rr_div() (in module sympy.polys.densearith)": [[202, "sympy.polys.densearith.dmp_rr_div"]], "dmp_rr_prs_gcd() (in module sympy.polys.euclidtools)": [[202, "sympy.polys.euclidtools.dmp_rr_prs_gcd"]], "dmp_slice() (in module sympy.polys.densebasic)": [[202, "sympy.polys.densebasic.dmp_slice"]], "dmp_sqr() (in module sympy.polys.densearith)": [[202, "sympy.polys.densearith.dmp_sqr"]], "dmp_strip() (in module sympy.polys.densebasic)": [[202, "sympy.polys.densebasic.dmp_strip"]], "dmp_sub() (in module sympy.polys.densearith)": [[202, "sympy.polys.densearith.dmp_sub"]], "dmp_sub_ground() (in module sympy.polys.densearith)": [[202, "sympy.polys.densearith.dmp_sub_ground"]], "dmp_sub_mul() (in module sympy.polys.densearith)": [[202, "sympy.polys.densearith.dmp_sub_mul"]], "dmp_sub_term() (in module sympy.polys.densearith)": [[202, "sympy.polys.densearith.dmp_sub_term"]], "dmp_subresultants() (in module sympy.polys.euclidtools)": [[202, "sympy.polys.euclidtools.dmp_subresultants"]], "dmp_swap() (in module sympy.polys.densebasic)": [[202, "sympy.polys.densebasic.dmp_swap"]], "dmp_terms_gcd() (in module sympy.polys.densebasic)": [[202, "sympy.polys.densebasic.dmp_terms_gcd"]], "dmp_to_dict() (in module sympy.polys.densebasic)": [[202, "sympy.polys.densebasic.dmp_to_dict"]], "dmp_to_tuple() (in module sympy.polys.densebasic)": [[202, "sympy.polys.densebasic.dmp_to_tuple"]], "dmp_trial_division() (in module sympy.polys.factortools)": [[202, "sympy.polys.factortools.dmp_trial_division"]], "dmp_true_lt() (in module sympy.polys.densebasic)": [[202, "sympy.polys.densebasic.dmp_true_LT"]], "dmp_trunc() (in module sympy.polys.densetools)": [[202, "sympy.polys.densetools.dmp_trunc"]], "dmp_validate() (in module sympy.polys.densebasic)": [[202, "sympy.polys.densebasic.dmp_validate"]], "dmp_zero() (in module sympy.polys.densebasic)": [[202, "sympy.polys.densebasic.dmp_zero"]], "dmp_zero_p() (in module sympy.polys.densebasic)": [[202, "sympy.polys.densebasic.dmp_zero_p"]], "dmp_zeros() (in module sympy.polys.densebasic)": [[202, "sympy.polys.densebasic.dmp_zeros"]], "dmp_zz_collins_resultant() (in module sympy.polys.euclidtools)": [[202, "sympy.polys.euclidtools.dmp_zz_collins_resultant"]], "dmp_zz_diophantine() (in module sympy.polys.factortools)": [[202, "sympy.polys.factortools.dmp_zz_diophantine"]], "dmp_zz_factor() (in module sympy.polys.factortools)": [[202, "sympy.polys.factortools.dmp_zz_factor"]], "dmp_zz_heu_gcd() (in module sympy.polys.euclidtools)": [[202, "sympy.polys.euclidtools.dmp_zz_heu_gcd"]], "dmp_zz_mignotte_bound() (in module sympy.polys.factortools)": [[202, "sympy.polys.factortools.dmp_zz_mignotte_bound"]], "dmp_zz_modular_resultant() (in module sympy.polys.euclidtools)": [[202, "sympy.polys.euclidtools.dmp_zz_modular_resultant"]], "dmp_zz_wang() (in module sympy.polys.factortools)": [[202, "sympy.polys.factortools.dmp_zz_wang"]], "dmp_zz_wang_hensel_lifting() (in module sympy.polys.factortools)": [[202, "sympy.polys.factortools.dmp_zz_wang_hensel_lifting"]], "dmp_zz_wang_lead_coeffs() (in module sympy.polys.factortools)": [[202, "sympy.polys.factortools.dmp_zz_wang_lead_coeffs"]], "dmp_zz_wang_non_divisors() (in module sympy.polys.factortools)": [[202, "sympy.polys.factortools.dmp_zz_wang_non_divisors"]], "dmp_zz_wang_test_points() (in module sympy.polys.factortools)": [[202, "sympy.polys.factortools.dmp_zz_wang_test_points"]], "dup_content() (in module sympy.polys.densetools)": [[202, "sympy.polys.densetools.dup_content"]], "dup_cyclotomic_p() (in module sympy.polys.factortools)": [[202, "sympy.polys.factortools.dup_cyclotomic_p"]], "dup_decompose() (in module sympy.polys.densetools)": [[202, "sympy.polys.densetools.dup_decompose"]], "dup_extract() (in module sympy.polys.densetools)": [[202, "sympy.polys.densetools.dup_extract"]], "dup_gf_factor() (in module sympy.polys.factortools)": [[202, "sympy.polys.factortools.dup_gf_factor"]], "dup_lshift() (in module sympy.polys.densearith)": [[202, "sympy.polys.densearith.dup_lshift"]], "dup_mirror() (in module sympy.polys.densetools)": [[202, "sympy.polys.densetools.dup_mirror"]], "dup_monic() (in module sympy.polys.densetools)": [[202, "sympy.polys.densetools.dup_monic"]], "dup_primitive() (in module sympy.polys.densetools)": [[202, "sympy.polys.densetools.dup_primitive"]], "dup_random() (in module sympy.polys.densebasic)": [[202, "sympy.polys.densebasic.dup_random"]], "dup_real_imag() (in module sympy.polys.densetools)": [[202, "sympy.polys.densetools.dup_real_imag"]], "dup_reverse() (in module sympy.polys.densebasic)": [[202, "sympy.polys.densebasic.dup_reverse"]], "dup_rshift() (in module sympy.polys.densearith)": [[202, "sympy.polys.densearith.dup_rshift"]], "dup_scale() (in module sympy.polys.densetools)": [[202, "sympy.polys.densetools.dup_scale"]], "dup_shift() (in module sympy.polys.densetools)": [[202, "sympy.polys.densetools.dup_shift"]], "dup_sign_variations() (in module sympy.polys.densetools)": [[202, "sympy.polys.densetools.dup_sign_variations"]], "dup_transform() (in module sympy.polys.densetools)": [[202, "sympy.polys.densetools.dup_transform"]], "dup_zz_cyclotomic_factor() (in module sympy.polys.factortools)": [[202, "sympy.polys.factortools.dup_zz_cyclotomic_factor"]], "dup_zz_cyclotomic_poly() (in module sympy.polys.factortools)": [[202, "sympy.polys.factortools.dup_zz_cyclotomic_poly"]], "dup_zz_factor() (in module sympy.polys.factortools)": [[202, "sympy.polys.factortools.dup_zz_factor"]], "dup_zz_factor_sqf() (in module sympy.polys.factortools)": [[202, "sympy.polys.factortools.dup_zz_factor_sqf"]], "dup_zz_hensel_lift() (in module sympy.polys.factortools)": [[202, "sympy.polys.factortools.dup_zz_hensel_lift"]], "dup_zz_hensel_step() (in module sympy.polys.factortools)": [[202, "sympy.polys.factortools.dup_zz_hensel_step"]], "dup_zz_irreducible_p() (in module sympy.polys.factortools)": [[202, "sympy.polys.factortools.dup_zz_irreducible_p"]], "dup_zz_zassenhaus() (in module sympy.polys.factortools)": [[202, "sympy.polys.factortools.dup_zz_zassenhaus"]], "func_field_modgcd() (in module sympy.polys.modulargcd)": [[202, "sympy.polys.modulargcd.func_field_modgcd"]], "gf_lc() (in module sympy.polys.galoistools)": [[202, "sympy.polys.galoistools.gf_LC"]], "gf_qbasis() (in module sympy.polys.galoistools)": [[202, "sympy.polys.galoistools.gf_Qbasis"]], "gf_qmatrix() (in module sympy.polys.galoistools)": [[202, "sympy.polys.galoistools.gf_Qmatrix"]], "gf_tc() (in module sympy.polys.galoistools)": [[202, "sympy.polys.galoistools.gf_TC"]], "gf_add() (in module sympy.polys.galoistools)": [[202, "sympy.polys.galoistools.gf_add"]], "gf_add_ground() (in module sympy.polys.galoistools)": [[202, "sympy.polys.galoistools.gf_add_ground"]], "gf_add_mul() (in module sympy.polys.galoistools)": [[202, "sympy.polys.galoistools.gf_add_mul"]], "gf_berlekamp() (in module sympy.polys.galoistools)": [[202, "sympy.polys.galoistools.gf_berlekamp"]], "gf_cofactors() (in module sympy.polys.galoistools)": [[202, "sympy.polys.galoistools.gf_cofactors"]], "gf_compose() (in module sympy.polys.galoistools)": [[202, "sympy.polys.galoistools.gf_compose"]], "gf_compose_mod() (in module sympy.polys.galoistools)": [[202, "sympy.polys.galoistools.gf_compose_mod"]], "gf_crt() (in module sympy.polys.galoistools)": [[202, "sympy.polys.galoistools.gf_crt"]], "gf_crt1() (in module sympy.polys.galoistools)": [[202, "sympy.polys.galoistools.gf_crt1"]], "gf_crt2() (in module sympy.polys.galoistools)": [[202, "sympy.polys.galoistools.gf_crt2"]], "gf_csolve() (in module sympy.polys.galoistools)": [[202, "sympy.polys.galoistools.gf_csolve"]], "gf_degree() (in module sympy.polys.galoistools)": [[202, "sympy.polys.galoistools.gf_degree"]], "gf_diff() (in module sympy.polys.galoistools)": [[202, "sympy.polys.galoistools.gf_diff"]], "gf_div() (in module sympy.polys.galoistools)": [[202, "sympy.polys.galoistools.gf_div"]], "gf_eval() (in module sympy.polys.galoistools)": [[202, "sympy.polys.galoistools.gf_eval"]], "gf_expand() (in module sympy.polys.galoistools)": [[202, "sympy.polys.galoistools.gf_expand"]], "gf_exquo() (in module sympy.polys.galoistools)": [[202, "sympy.polys.galoistools.gf_exquo"]], "gf_factor() (in module sympy.polys.galoistools)": [[202, "sympy.polys.galoistools.gf_factor"]], "gf_factor_sqf() (in module sympy.polys.galoistools)": [[202, "sympy.polys.galoistools.gf_factor_sqf"]], "gf_from_dict() (in module sympy.polys.galoistools)": [[202, "sympy.polys.galoistools.gf_from_dict"]], "gf_from_int_poly() (in module sympy.polys.galoistools)": [[202, "sympy.polys.galoistools.gf_from_int_poly"]], "gf_gcd() (in module sympy.polys.galoistools)": [[202, "sympy.polys.galoistools.gf_gcd"]], "gf_gcdex() (in module sympy.polys.galoistools)": [[202, "sympy.polys.galoistools.gf_gcdex"]], "gf_int() (in module sympy.polys.galoistools)": [[202, "sympy.polys.galoistools.gf_int"]], "gf_irreducible() (in module sympy.polys.galoistools)": [[202, "sympy.polys.galoistools.gf_irreducible"]], "gf_irreducible_p() (in module sympy.polys.galoistools)": [[202, "sympy.polys.galoistools.gf_irreducible_p"]], "gf_lcm() (in module sympy.polys.galoistools)": [[202, "sympy.polys.galoistools.gf_lcm"]], "gf_lshift() (in module sympy.polys.galoistools)": [[202, "sympy.polys.galoistools.gf_lshift"]], "gf_monic() (in module sympy.polys.galoistools)": [[202, "sympy.polys.galoistools.gf_monic"]], "gf_mul() (in module sympy.polys.galoistools)": [[202, "sympy.polys.galoistools.gf_mul"]], "gf_mul_ground() (in module sympy.polys.galoistools)": [[202, "sympy.polys.galoistools.gf_mul_ground"]], "gf_multi_eval() (in module sympy.polys.galoistools)": [[202, "sympy.polys.galoistools.gf_multi_eval"]], "gf_neg() (in module sympy.polys.galoistools)": [[202, "sympy.polys.galoistools.gf_neg"]], "gf_normal() (in module sympy.polys.galoistools)": [[202, "sympy.polys.galoistools.gf_normal"]], "gf_pow() (in module sympy.polys.galoistools)": [[202, "sympy.polys.galoistools.gf_pow"]], "gf_pow_mod() (in module sympy.polys.galoistools)": [[202, "sympy.polys.galoistools.gf_pow_mod"]], "gf_quo() (in module sympy.polys.galoistools)": [[202, "sympy.polys.galoistools.gf_quo"]], "gf_quo_ground() (in module sympy.polys.galoistools)": [[202, "sympy.polys.galoistools.gf_quo_ground"]], "gf_random() (in module sympy.polys.galoistools)": [[202, "sympy.polys.galoistools.gf_random"]], "gf_rem() (in module sympy.polys.galoistools)": [[202, "sympy.polys.galoistools.gf_rem"]], "gf_rshift() (in module sympy.polys.galoistools)": [[202, "sympy.polys.galoistools.gf_rshift"]], "gf_shoup() (in module sympy.polys.galoistools)": [[202, "sympy.polys.galoistools.gf_shoup"]], "gf_sqf_list() (in module sympy.polys.galoistools)": [[202, "sympy.polys.galoistools.gf_sqf_list"]], "gf_sqf_p() (in module sympy.polys.galoistools)": [[202, "sympy.polys.galoistools.gf_sqf_p"]], "gf_sqf_part() (in module sympy.polys.galoistools)": [[202, "sympy.polys.galoistools.gf_sqf_part"]], "gf_sqr() (in module sympy.polys.galoistools)": [[202, "sympy.polys.galoistools.gf_sqr"]], "gf_strip() (in module sympy.polys.galoistools)": [[202, "sympy.polys.galoistools.gf_strip"]], "gf_sub() (in module sympy.polys.galoistools)": [[202, "sympy.polys.galoistools.gf_sub"]], "gf_sub_ground() (in module sympy.polys.galoistools)": [[202, "sympy.polys.galoistools.gf_sub_ground"]], "gf_sub_mul() (in module sympy.polys.galoistools)": [[202, "sympy.polys.galoistools.gf_sub_mul"]], "gf_to_dict() (in module sympy.polys.galoistools)": [[202, "sympy.polys.galoistools.gf_to_dict"]], "gf_to_int_poly() (in module sympy.polys.galoistools)": [[202, "sympy.polys.galoistools.gf_to_int_poly"]], "gf_trace_map() (in module sympy.polys.galoistools)": [[202, "sympy.polys.galoistools.gf_trace_map"]], "gf_trunc() (in module sympy.polys.galoistools)": [[202, "sympy.polys.galoistools.gf_trunc"]], "gf_value() (in module sympy.polys.galoistools)": [[202, "sympy.polys.galoistools.gf_value"]], "gf_zassenhaus() (in module sympy.polys.galoistools)": [[202, "sympy.polys.galoistools.gf_zassenhaus"]], "groebner() (in module sympy.polys.groebnertools)": [[202, "sympy.polys.groebnertools.groebner"]], "is_groebner() (in module sympy.polys.groebnertools)": [[202, "sympy.polys.groebnertools.is_groebner"]], "is_minimal() (in module sympy.polys.groebnertools)": [[202, "sympy.polys.groebnertools.is_minimal"]], "is_reduced() (in module sympy.polys.groebnertools)": [[202, "sympy.polys.groebnertools.is_reduced"]], "matrix_fglm() (in module sympy.polys.fglmtools)": [[202, "sympy.polys.fglmtools.matrix_fglm"]], "modgcd_bivariate() (in module sympy.polys.modulargcd)": [[202, "sympy.polys.modulargcd.modgcd_bivariate"]], "modgcd_multivariate() (in module sympy.polys.modulargcd)": [[202, "sympy.polys.modulargcd.modgcd_multivariate"]], "modgcd_univariate() (in module sympy.polys.modulargcd)": [[202, "sympy.polys.modulargcd.modgcd_univariate"]], "red_groebner() (in module sympy.polys.groebnertools)": [[202, "sympy.polys.groebnertools.red_groebner"]], "sdm_lc() (in module sympy.polys.distributedmodules)": [[202, "sympy.polys.distributedmodules.sdm_LC"]], "sdm_lm() (in module sympy.polys.distributedmodules)": [[202, "sympy.polys.distributedmodules.sdm_LM"]], "sdm_lt() (in module sympy.polys.distributedmodules)": [[202, "sympy.polys.distributedmodules.sdm_LT"]], "sdm_add() (in module sympy.polys.distributedmodules)": [[202, "sympy.polys.distributedmodules.sdm_add"]], "sdm_deg() (in module sympy.polys.distributedmodules)": [[202, "sympy.polys.distributedmodules.sdm_deg"]], "sdm_ecart() (in module sympy.polys.distributedmodules)": [[202, "sympy.polys.distributedmodules.sdm_ecart"]], "sdm_from_dict() (in module sympy.polys.distributedmodules)": [[202, "sympy.polys.distributedmodules.sdm_from_dict"]], "sdm_from_vector() (in module sympy.polys.distributedmodules)": [[202, "sympy.polys.distributedmodules.sdm_from_vector"]], "sdm_groebner() (in module sympy.polys.distributedmodules)": [[202, "sympy.polys.distributedmodules.sdm_groebner"]], "sdm_monomial_deg() (in module sympy.polys.distributedmodules)": [[202, "sympy.polys.distributedmodules.sdm_monomial_deg"]], "sdm_monomial_divides() (in module sympy.polys.distributedmodules)": [[202, "sympy.polys.distributedmodules.sdm_monomial_divides"]], "sdm_monomial_mul() (in module sympy.polys.distributedmodules)": [[202, "sympy.polys.distributedmodules.sdm_monomial_mul"]], "sdm_mul_term() (in module sympy.polys.distributedmodules)": [[202, "sympy.polys.distributedmodules.sdm_mul_term"]], "sdm_nf_mora() (in module sympy.polys.distributedmodules)": [[202, "sympy.polys.distributedmodules.sdm_nf_mora"]], "sdm_spoly() (in module sympy.polys.distributedmodules)": [[202, "sympy.polys.distributedmodules.sdm_spoly"]], "sdm_to_dict() (in module sympy.polys.distributedmodules)": [[202, "sympy.polys.distributedmodules.sdm_to_dict"]], "sdm_to_vector() (in module sympy.polys.distributedmodules)": [[202, "sympy.polys.distributedmodules.sdm_to_vector"]], "sdm_zero() (in module sympy.polys.distributedmodules)": [[202, "sympy.polys.distributedmodules.sdm_zero"]], "setup() (in module sympy.polys.polyconfig)": [[202, "sympy.polys.polyconfig.setup"]], "spoly() (in module sympy.polys.groebnertools)": [[202, "sympy.polys.groebnertools.spoly"]], "sympy.polys.polyconfig": [[202, "module-sympy.polys.polyconfig"]], "sympy.polys.polyoptions": [[202, "module-sympy.polys.polyoptions"]], "algintpowers (class in sympy.polys.numberfields.utilities)": [[204, "sympy.polys.numberfields.utilities.AlgIntPowers"]], "endomorphismring (class in sympy.polys.numberfields.modules)": [[204, "sympy.polys.numberfields.modules.EndomorphismRing"]], "innerendomorphism (class in sympy.polys.numberfields.modules)": [[204, "sympy.polys.numberfields.modules.InnerEndomorphism"]], "module (class in sympy.polys.numberfields.modules)": [[204, "sympy.polys.numberfields.modules.Module"]], "moduleelement (class in sympy.polys.numberfields.modules)": [[204, "sympy.polys.numberfields.modules.ModuleElement"]], "moduleendomorphism (class in sympy.polys.numberfields.modules)": [[204, "sympy.polys.numberfields.modules.ModuleEndomorphism"]], "modulehomomorphism (class in sympy.polys.numberfields.modules)": [[204, "sympy.polys.numberfields.modules.ModuleHomomorphism"]], "powerbasis (class in sympy.polys.numberfields.modules)": [[204, "sympy.polys.numberfields.modules.PowerBasis"]], "powerbasiselement (class in sympy.polys.numberfields.modules)": [[204, "sympy.polys.numberfields.modules.PowerBasisElement"]], "primeideal (class in sympy.polys.numberfields.primes)": [[204, "sympy.polys.numberfields.primes.PrimeIdeal"]], "qq_col (sympy.polys.numberfields.modules.moduleelement property)": [[204, "sympy.polys.numberfields.modules.ModuleElement.QQ_col"]], "qq_matrix (sympy.polys.numberfields.modules.submodule property)": [[204, "sympy.polys.numberfields.modules.Submodule.QQ_matrix"]], "submodule (class in sympy.polys.numberfields.modules)": [[204, "sympy.polys.numberfields.modules.Submodule"]], "t (sympy.polys.numberfields.modules.powerbasiselement property)": [[204, "sympy.polys.numberfields.modules.PowerBasisElement.T"]], "__add__() (sympy.polys.numberfields.modules.moduleelement method)": [[204, "sympy.polys.numberfields.modules.ModuleElement.__add__"]], "__add__() (sympy.polys.numberfields.primes.primeideal method)": [[204, "sympy.polys.numberfields.primes.PrimeIdeal.__add__"]], "__call__() (sympy.polys.numberfields.modules.module method)": [[204, "sympy.polys.numberfields.modules.Module.__call__"]], "__init__() (sympy.polys.numberfields.modules.endomorphismring method)": [[204, "sympy.polys.numberfields.modules.EndomorphismRing.__init__"]], "__init__() (sympy.polys.numberfields.modules.innerendomorphism method)": [[204, "sympy.polys.numberfields.modules.InnerEndomorphism.__init__"]], "__init__() (sympy.polys.numberfields.modules.moduleelement method)": [[204, "sympy.polys.numberfields.modules.ModuleElement.__init__"]], "__init__() (sympy.polys.numberfields.modules.moduleendomorphism method)": [[204, "sympy.polys.numberfields.modules.ModuleEndomorphism.__init__"]], "__init__() (sympy.polys.numberfields.modules.modulehomomorphism method)": [[204, "sympy.polys.numberfields.modules.ModuleHomomorphism.__init__"]], "__init__() (sympy.polys.numberfields.modules.powerbasis method)": [[204, "sympy.polys.numberfields.modules.PowerBasis.__init__"]], "__init__() (sympy.polys.numberfields.modules.submodule method)": [[204, "sympy.polys.numberfields.modules.Submodule.__init__"]], "__init__() (sympy.polys.numberfields.primes.primeideal method)": [[204, "sympy.polys.numberfields.primes.PrimeIdeal.__init__"]], "__init__() (sympy.polys.numberfields.utilities.algintpowers method)": [[204, "sympy.polys.numberfields.utilities.AlgIntPowers.__init__"]], "__mod__() (sympy.polys.numberfields.modules.moduleelement method)": [[204, "sympy.polys.numberfields.modules.ModuleElement.__mod__"]], "__mul__() (sympy.polys.numberfields.modules.moduleelement method)": [[204, "sympy.polys.numberfields.modules.ModuleElement.__mul__"]], "__mul__() (sympy.polys.numberfields.primes.primeideal method)": [[204, "sympy.polys.numberfields.primes.PrimeIdeal.__mul__"]], "add() (sympy.polys.numberfields.modules.submodule method)": [[204, "sympy.polys.numberfields.modules.Submodule.add"]], "ancestors() (sympy.polys.numberfields.modules.module method)": [[204, "sympy.polys.numberfields.modules.Module.ancestors"]], "as_expr() (sympy.polys.numberfields.modules.powerbasiselement method)": [[204, "sympy.polys.numberfields.modules.PowerBasisElement.as_expr"]], "as_submodule() (sympy.polys.numberfields.primes.primeideal method)": [[204, "sympy.polys.numberfields.primes.PrimeIdeal.as_submodule"]], "basis_element_pullbacks() (sympy.polys.numberfields.modules.submodule method)": [[204, "sympy.polys.numberfields.modules.Submodule.basis_element_pullbacks"]], "basis_elements() (sympy.polys.numberfields.modules.module method)": [[204, "sympy.polys.numberfields.modules.Module.basis_elements"]], "coeff_search() (in module sympy.polys.numberfields.utilities)": [[204, "sympy.polys.numberfields.utilities.coeff_search"]], "column() (sympy.polys.numberfields.modules.moduleelement method)": [[204, "sympy.polys.numberfields.modules.ModuleElement.column"]], "discard_before() (sympy.polys.numberfields.modules.submodule method)": [[204, "sympy.polys.numberfields.modules.Submodule.discard_before"]], "element_from_anp() (sympy.polys.numberfields.modules.powerbasis method)": [[204, "sympy.polys.numberfields.modules.PowerBasis.element_from_ANP"]], "element_from_alg_num() (sympy.polys.numberfields.modules.powerbasis method)": [[204, "sympy.polys.numberfields.modules.PowerBasis.element_from_alg_num"]], "element_from_poly() (sympy.polys.numberfields.modules.powerbasis method)": [[204, "sympy.polys.numberfields.modules.PowerBasis.element_from_poly"]], "element_from_rational() (sympy.polys.numberfields.modules.module method)": [[204, "sympy.polys.numberfields.modules.Module.element_from_rational"]], "endomorphism_ring() (sympy.polys.numberfields.modules.module method)": [[204, "sympy.polys.numberfields.modules.Module.endomorphism_ring"]], "equiv() (sympy.polys.numberfields.modules.moduleelement method)": [[204, "sympy.polys.numberfields.modules.ModuleElement.equiv"]], "extract_fundamental_discriminant() (in module sympy.polys.numberfields.utilities)": [[204, "sympy.polys.numberfields.utilities.extract_fundamental_discriminant"]], "field_isomorphism() (in module sympy.polys.numberfields.subfield)": [[204, "sympy.polys.numberfields.subfield.field_isomorphism"]], "find_min_poly() (in module sympy.polys.numberfields.modules)": [[204, "sympy.polys.numberfields.modules.find_min_poly"]], "from_int_list() (sympy.polys.numberfields.modules.moduleelement class method)": [[204, "sympy.polys.numberfields.modules.ModuleElement.from_int_list"]], "generator (sympy.polys.numberfields.modules.powerbasiselement property)": [[204, "sympy.polys.numberfields.modules.PowerBasisElement.generator"]], "get_num_denom() (in module sympy.polys.numberfields.utilities)": [[204, "sympy.polys.numberfields.utilities.get_num_denom"]], "inner_endomorphism() (sympy.polys.numberfields.modules.endomorphismring method)": [[204, "sympy.polys.numberfields.modules.EndomorphismRing.inner_endomorphism"]], "is_compat() (sympy.polys.numberfields.modules.moduleelement method)": [[204, "sympy.polys.numberfields.modules.ModuleElement.is_compat"]], "is_compat_col() (sympy.polys.numberfields.modules.module method)": [[204, "sympy.polys.numberfields.modules.Module.is_compat_col"]], "is_inert (sympy.polys.numberfields.primes.primeideal property)": [[204, "sympy.polys.numberfields.primes.PrimeIdeal.is_inert"]], "is_int() (in module sympy.polys.numberfields.utilities)": [[204, "sympy.polys.numberfields.utilities.is_int"]], "is_rat() (in module sympy.polys.numberfields.utilities)": [[204, "sympy.polys.numberfields.utilities.is_rat"]], "is_rational (sympy.polys.numberfields.modules.powerbasiselement property)": [[204, "sympy.polys.numberfields.modules.PowerBasisElement.is_rational"]], "isolate() (in module sympy.polys.numberfields.utilities)": [[204, "sympy.polys.numberfields.utilities.isolate"]], "kernel() (sympy.polys.numberfields.modules.modulehomomorphism method)": [[204, "sympy.polys.numberfields.modules.ModuleHomomorphism.kernel"]], "make_mod_elt() (in module sympy.polys.numberfields.modules)": [[204, "sympy.polys.numberfields.modules.make_mod_elt"]], "matrix() (sympy.polys.numberfields.modules.modulehomomorphism method)": [[204, "sympy.polys.numberfields.modules.ModuleHomomorphism.matrix"]], "minimal_polynomial() (in module sympy.polys.numberfields.minpoly)": [[204, "sympy.polys.numberfields.minpoly.minimal_polynomial"]], "minpoly() (in module sympy.polys.numberfields.minpoly)": [[204, "sympy.polys.numberfields.minpoly.minpoly"]], "mul() (sympy.polys.numberfields.modules.submodule method)": [[204, "sympy.polys.numberfields.modules.Submodule.mul"]], "mult_tab() (sympy.polys.numberfields.modules.module method)": [[204, "sympy.polys.numberfields.modules.Module.mult_tab"]], "n (sympy.polys.numberfields.modules.module property)": [[204, "sympy.polys.numberfields.modules.Module.n"]], "n (sympy.polys.numberfields.modules.moduleelement property)": [[204, "sympy.polys.numberfields.modules.ModuleElement.n"]], "nearest_common_ancestor() (sympy.polys.numberfields.modules.module method)": [[204, "sympy.polys.numberfields.modules.Module.nearest_common_ancestor"]], "norm() (sympy.polys.numberfields.modules.powerbasiselement method)": [[204, "sympy.polys.numberfields.modules.PowerBasisElement.norm"]], "number_field (sympy.polys.numberfields.modules.module property)": [[204, "sympy.polys.numberfields.modules.Module.number_field"]], "numerator() (sympy.polys.numberfields.modules.powerbasiselement method)": [[204, "sympy.polys.numberfields.modules.PowerBasisElement.numerator"]], "one() (sympy.polys.numberfields.modules.module method)": [[204, "sympy.polys.numberfields.modules.Module.one"]], "over_power_basis() (sympy.polys.numberfields.modules.moduleelement method)": [[204, "sympy.polys.numberfields.modules.ModuleElement.over_power_basis"]], "parent (sympy.polys.numberfields.modules.module property)": [[204, "sympy.polys.numberfields.modules.Module.parent"]], "poly() (sympy.polys.numberfields.modules.powerbasiselement method)": [[204, "sympy.polys.numberfields.modules.PowerBasisElement.poly"]], "power_basis_ancestor() (sympy.polys.numberfields.modules.module method)": [[204, "sympy.polys.numberfields.modules.Module.power_basis_ancestor"]], "prime_decomp() (in module sympy.polys.numberfields.primes)": [[204, "sympy.polys.numberfields.primes.prime_decomp"]], "prime_valuation() (in module sympy.polys.numberfields.primes)": [[204, "sympy.polys.numberfields.primes.prime_valuation"]], "primitive_element() (in module sympy.polys.numberfields.subfield)": [[204, "sympy.polys.numberfields.subfield.primitive_element"]], "reduce_anp() (sympy.polys.numberfields.primes.primeideal method)": [[204, "sympy.polys.numberfields.primes.PrimeIdeal.reduce_ANP"]], "reduce_alg_num() (sympy.polys.numberfields.primes.primeideal method)": [[204, "sympy.polys.numberfields.primes.PrimeIdeal.reduce_alg_num"]], "reduce_element() (sympy.polys.numberfields.modules.submodule method)": [[204, "sympy.polys.numberfields.modules.Submodule.reduce_element"]], "reduce_element() (sympy.polys.numberfields.primes.primeideal method)": [[204, "sympy.polys.numberfields.primes.PrimeIdeal.reduce_element"]], "reduced() (sympy.polys.numberfields.modules.moduleelement method)": [[204, "sympy.polys.numberfields.modules.ModuleElement.reduced"]], "reduced() (sympy.polys.numberfields.modules.submodule method)": [[204, "sympy.polys.numberfields.modules.Submodule.reduced"]], "reduced_mod_p() (sympy.polys.numberfields.modules.moduleelement method)": [[204, "sympy.polys.numberfields.modules.ModuleElement.reduced_mod_p"]], "repr() (sympy.polys.numberfields.primes.primeideal method)": [[204, "sympy.polys.numberfields.primes.PrimeIdeal.repr"]], "represent() (sympy.polys.numberfields.modules.endomorphismring method)": [[204, "sympy.polys.numberfields.modules.EndomorphismRing.represent"]], "represent() (sympy.polys.numberfields.modules.module method)": [[204, "sympy.polys.numberfields.modules.Module.represent"]], "represent() (sympy.polys.numberfields.modules.powerbasis method)": [[204, "sympy.polys.numberfields.modules.PowerBasis.represent"]], "represent() (sympy.polys.numberfields.modules.submodule method)": [[204, "sympy.polys.numberfields.modules.Submodule.represent"]], "round_two() (in module sympy.polys.numberfields.basis)": [[204, "sympy.polys.numberfields.basis.round_two"]], "starts_with_unity() (sympy.polys.numberfields.modules.module method)": [[204, "sympy.polys.numberfields.modules.Module.starts_with_unity"]], "submodule_from_gens() (sympy.polys.numberfields.modules.module method)": [[204, "sympy.polys.numberfields.modules.Module.submodule_from_gens"]], "submodule_from_matrix() (sympy.polys.numberfields.modules.module method)": [[204, "sympy.polys.numberfields.modules.Module.submodule_from_matrix"]], "supplement_a_subspace() (in module sympy.polys.numberfields.utilities)": [[204, "sympy.polys.numberfields.utilities.supplement_a_subspace"]], "sympy.polys.numberfields.modules": [[204, "module-sympy.polys.numberfields.modules"]], "sympy.polys.numberfields.subfield": [[204, "module-sympy.polys.numberfields.subfield"]], "test_factor() (sympy.polys.numberfields.primes.primeideal method)": [[204, "sympy.polys.numberfields.primes.PrimeIdeal.test_factor"]], "to_anp() (sympy.polys.numberfields.modules.powerbasiselement method)": [[204, "sympy.polys.numberfields.modules.PowerBasisElement.to_ANP"]], "to_alg_num() (sympy.polys.numberfields.modules.powerbasiselement method)": [[204, "sympy.polys.numberfields.modules.PowerBasisElement.to_alg_num"]], "to_ancestor() (sympy.polys.numberfields.modules.moduleelement method)": [[204, "sympy.polys.numberfields.modules.ModuleElement.to_ancestor"]], "to_number_field() (in module sympy.polys.numberfields.subfield)": [[204, "sympy.polys.numberfields.subfield.to_number_field"]], "to_parent() (sympy.polys.numberfields.modules.moduleelement method)": [[204, "sympy.polys.numberfields.modules.ModuleElement.to_parent"]], "unify() (sympy.polys.numberfields.modules.moduleelement method)": [[204, "sympy.polys.numberfields.modules.ModuleElement.unify"]], "valuation() (sympy.polys.numberfields.primes.primeideal method)": [[204, "sympy.polys.numberfields.primes.PrimeIdeal.valuation"]], "whole_submodule() (sympy.polys.numberfields.modules.module method)": [[204, "sympy.polys.numberfields.modules.Module.whole_submodule"]], "zero() (sympy.polys.numberfields.modules.module method)": [[204, "sympy.polys.numberfields.modules.Module.zero"]], "complexrootof (class in sympy.polys.rootoftools)": [[205, "sympy.polys.rootoftools.ComplexRootOf"]], "ec() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.EC"]], "em() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.EM"]], "et() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.ET"]], "gradedlexorder (class in sympy.polys.orderings)": [[205, "sympy.polys.orderings.GradedLexOrder"]], "groebnerbasis (class in sympy.polys.polytools)": [[205, "sympy.polys.polytools.GroebnerBasis"]], "lc() (in module sympy.polys.polytools)": [[205, "sympy.polys.polytools.LC"]], "lc() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.LC"]], "lm() (in module sympy.polys.polytools)": [[205, "sympy.polys.polytools.LM"]], "lm() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.LM"]], "lt() (in module sympy.polys.polytools)": [[205, "sympy.polys.polytools.LT"]], "lt() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.LT"]], "lexorder (class in sympy.polys.orderings)": [[205, "sympy.polys.orderings.LexOrder"]], "monomial (class in sympy.polys.monomials)": [[205, "sympy.polys.monomials.Monomial"]], "monomialorder (class in sympy.polys.orderings)": [[205, "sympy.polys.orderings.MonomialOrder"]], "poly (class in sympy.polys.polytools)": [[205, "sympy.polys.polytools.Poly"]], "purepoly (class in sympy.polys.polytools)": [[205, "sympy.polys.polytools.PurePoly"]], "reversedgradedlexorder (class in sympy.polys.orderings)": [[205, "sympy.polys.orderings.ReversedGradedLexOrder"]], "rootof (class in sympy.polys.rootoftools)": [[205, "sympy.polys.rootoftools.RootOf"]], "rootsum (class in sympy.polys.rootoftools)": [[205, "sympy.polys.rootoftools.RootSum"]], "tc() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.TC"]], "_all_roots() (sympy.polys.rootoftools.complexrootof class method)": [[205, "sympy.polys.rootoftools.ComplexRootOf._all_roots"]], "_complexes_index() (sympy.polys.rootoftools.complexrootof class method)": [[205, "sympy.polys.rootoftools.ComplexRootOf._complexes_index"]], "_complexes_sorted() (sympy.polys.rootoftools.complexrootof class method)": [[205, "sympy.polys.rootoftools.ComplexRootOf._complexes_sorted"]], "_count_roots() (sympy.polys.rootoftools.complexrootof class method)": [[205, "sympy.polys.rootoftools.ComplexRootOf._count_roots"]], "_ensure_complexes_init() (sympy.polys.rootoftools.complexrootof method)": [[205, "sympy.polys.rootoftools.ComplexRootOf._ensure_complexes_init"]], "_ensure_reals_init() (sympy.polys.rootoftools.complexrootof method)": [[205, "sympy.polys.rootoftools.ComplexRootOf._ensure_reals_init"]], "_eval_evalf() (sympy.polys.rootoftools.complexrootof method)": [[205, "sympy.polys.rootoftools.ComplexRootOf._eval_evalf"]], "_eval_is_imaginary() (sympy.polys.rootoftools.complexrootof method)": [[205, "sympy.polys.rootoftools.ComplexRootOf._eval_is_imaginary"]], "_eval_is_real() (sympy.polys.rootoftools.complexrootof method)": [[205, "sympy.polys.rootoftools.ComplexRootOf._eval_is_real"]], "_get_complexes() (sympy.polys.rootoftools.complexrootof class method)": [[205, "sympy.polys.rootoftools.ComplexRootOf._get_complexes"]], "_get_complexes_sqf() (sympy.polys.rootoftools.complexrootof class method)": [[205, "sympy.polys.rootoftools.ComplexRootOf._get_complexes_sqf"]], "_get_interval() (sympy.polys.rootoftools.complexrootof method)": [[205, "sympy.polys.rootoftools.ComplexRootOf._get_interval"]], "_get_reals() (sympy.polys.rootoftools.complexrootof class method)": [[205, "sympy.polys.rootoftools.ComplexRootOf._get_reals"]], "_get_reals_sqf() (sympy.polys.rootoftools.complexrootof class method)": [[205, "sympy.polys.rootoftools.ComplexRootOf._get_reals_sqf"]], "_get_roots() (sympy.polys.rootoftools.complexrootof class method)": [[205, "sympy.polys.rootoftools.ComplexRootOf._get_roots"]], "_indexed_root() (sympy.polys.rootoftools.complexrootof class method)": [[205, "sympy.polys.rootoftools.ComplexRootOf._indexed_root"]], "_new() (sympy.polys.rootoftools.complexrootof class method)": [[205, "sympy.polys.rootoftools.ComplexRootOf._new"]], "_postprocess_root() (sympy.polys.rootoftools.complexrootof class method)": [[205, "sympy.polys.rootoftools.ComplexRootOf._postprocess_root"]], "_preprocess_roots() (sympy.polys.rootoftools.complexrootof class method)": [[205, "sympy.polys.rootoftools.ComplexRootOf._preprocess_roots"]], "_real_roots() (sympy.polys.rootoftools.complexrootof class method)": [[205, "sympy.polys.rootoftools.ComplexRootOf._real_roots"]], "_reals_index() (sympy.polys.rootoftools.complexrootof class method)": [[205, "sympy.polys.rootoftools.ComplexRootOf._reals_index"]], "_reals_sorted() (sympy.polys.rootoftools.complexrootof class method)": [[205, "sympy.polys.rootoftools.ComplexRootOf._reals_sorted"]], "_refine_complexes() (sympy.polys.rootoftools.complexrootof class method)": [[205, "sympy.polys.rootoftools.ComplexRootOf._refine_complexes"]], "_reset() (sympy.polys.rootoftools.complexrootof method)": [[205, "sympy.polys.rootoftools.ComplexRootOf._reset"]], "_roots_trivial() (sympy.polys.rootoftools.complexrootof class method)": [[205, "sympy.polys.rootoftools.ComplexRootOf._roots_trivial"]], "_set_interval() (sympy.polys.rootoftools.complexrootof method)": [[205, "sympy.polys.rootoftools.ComplexRootOf._set_interval"]], "abs() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.abs"]], "add() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.add"]], "add_ground() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.add_ground"]], "all_coeffs() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.all_coeffs"]], "all_monoms() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.all_monoms"]], "all_roots() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.all_roots"]], "all_roots() (sympy.polys.rootoftools.complexrootof class method)": [[205, "sympy.polys.rootoftools.ComplexRootOf.all_roots"]], "all_terms() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.all_terms"]], "andre_poly() (in module sympy.polys.appellseqs)": [[205, "sympy.polys.appellseqs.andre_poly"]], "apart() (in module sympy.polys.partfrac)": [[205, "sympy.polys.partfrac.apart"]], "apart_list() (in module sympy.polys.partfrac)": [[205, "sympy.polys.partfrac.apart_list"]], "as_dict() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.as_dict"]], "as_expr() (sympy.polys.monomials.monomial method)": [[205, "sympy.polys.monomials.Monomial.as_expr"]], "as_expr() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.as_expr"]], "as_list() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.as_list"]], "as_poly() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.as_poly"]], "assemble_partfrac_list() (in module sympy.polys.partfrac)": [[205, "sympy.polys.partfrac.assemble_partfrac_list"]], "bernoulli_c_poly() (in module sympy.polys.appellseqs)": [[205, "sympy.polys.appellseqs.bernoulli_c_poly"]], "bernoulli_poly() (in module sympy.polys.appellseqs)": [[205, "sympy.polys.appellseqs.bernoulli_poly"]], "cancel() (in module sympy.polys.polytools)": [[205, "sympy.polys.polytools.cancel"]], "cancel() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.cancel"]], "chebyshevt_poly() (in module sympy.polys.orthopolys)": [[205, "sympy.polys.orthopolys.chebyshevt_poly"]], "chebyshevu_poly() (in module sympy.polys.orthopolys)": [[205, "sympy.polys.orthopolys.chebyshevu_poly"]], "clear_cache() (sympy.polys.rootoftools.complexrootof class method)": [[205, "sympy.polys.rootoftools.ComplexRootOf.clear_cache"]], "clear_denoms() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.clear_denoms"]], "coeff_monomial() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.coeff_monomial"]], "coeffs() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.coeffs"]], "cofactors() (in module sympy.polys.polytools)": [[205, "sympy.polys.polytools.cofactors"]], "cofactors() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.cofactors"]], "compose() (in module sympy.polys.polytools)": [[205, "sympy.polys.polytools.compose"]], "compose() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.compose"]], "construct_domain() (in module sympy.polys.constructor)": [[205, "sympy.polys.constructor.construct_domain"]], "contains() (sympy.polys.polytools.groebnerbasis method)": [[205, "sympy.polys.polytools.GroebnerBasis.contains"]], "content() (in module sympy.polys.polytools)": [[205, "sympy.polys.polytools.content"]], "content() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.content"]], "count_roots() (in module sympy.polys.polytools)": [[205, "sympy.polys.polytools.count_roots"]], "count_roots() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.count_roots"]], "cyclotomic_poly() (in module sympy.polys.specialpolys)": [[205, "sympy.polys.specialpolys.cyclotomic_poly"]], "decompose() (in module sympy.polys.polytools)": [[205, "sympy.polys.polytools.decompose"]], "decompose() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.decompose"]], "deflate() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.deflate"]], "degree() (in module sympy.polys.polytools)": [[205, "sympy.polys.polytools.degree"]], "degree() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.degree"]], "degree_list() (in module sympy.polys.polytools)": [[205, "sympy.polys.polytools.degree_list"]], "degree_list() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.degree_list"]], "diff() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.diff"]], "discriminant() (in module sympy.polys.polytools)": [[205, "sympy.polys.polytools.discriminant"]], "discriminant() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.discriminant"]], "dispersion() (in module sympy.polys.dispersion)": [[205, "sympy.polys.dispersion.dispersion"]], "dispersion() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.dispersion"]], "dispersionset() (in module sympy.polys.dispersion)": [[205, "sympy.polys.dispersion.dispersionset"]], "dispersionset() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.dispersionset"]], "div() (in module sympy.polys.polytools)": [[205, "sympy.polys.polytools.div"]], "div() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.div"]], "domain (sympy.polys.polytools.poly property)": [[205, "sympy.polys.polytools.Poly.domain"]], "eject() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.eject"]], "euler_poly() (in module sympy.polys.appellseqs)": [[205, "sympy.polys.appellseqs.euler_poly"]], "eval() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.eval"]], "eval_approx() (sympy.polys.rootoftools.complexrootof method)": [[205, "sympy.polys.rootoftools.ComplexRootOf.eval_approx"]], "eval_rational() (sympy.polys.rootoftools.complexrootof method)": [[205, "sympy.polys.rootoftools.ComplexRootOf.eval_rational"]], "exclude() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.exclude"]], "exquo() (in module sympy.polys.polytools)": [[205, "sympy.polys.polytools.exquo"]], "exquo() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.exquo"]], "exquo_ground() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.exquo_ground"]], "factor() (in module sympy.polys.polytools)": [[205, "sympy.polys.polytools.factor"]], "factor_list() (in module sympy.polys.polytools)": [[205, "sympy.polys.polytools.factor_list"]], "factor_list() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.factor_list"]], "factor_list_include() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.factor_list_include"]], "fglm() (sympy.polys.polytools.groebnerbasis method)": [[205, "sympy.polys.polytools.GroebnerBasis.fglm"]], "free_symbols (sympy.polys.polytools.poly property)": [[205, "sympy.polys.polytools.Poly.free_symbols"]], "free_symbols (sympy.polys.polytools.purepoly property)": [[205, "sympy.polys.polytools.PurePoly.free_symbols"]], "free_symbols_in_domain (sympy.polys.polytools.poly property)": [[205, "sympy.polys.polytools.Poly.free_symbols_in_domain"]], "from_dict() (sympy.polys.polytools.poly class method)": [[205, "sympy.polys.polytools.Poly.from_dict"]], "from_expr() (sympy.polys.polytools.poly class method)": [[205, "sympy.polys.polytools.Poly.from_expr"]], "from_list() (sympy.polys.polytools.poly class method)": [[205, "sympy.polys.polytools.Poly.from_list"]], "from_poly() (sympy.polys.polytools.poly class method)": [[205, "sympy.polys.polytools.Poly.from_poly"]], "gcd() (in module sympy.polys.polytools)": [[205, "sympy.polys.polytools.gcd"]], "gcd() (sympy.polys.monomials.monomial method)": [[205, "sympy.polys.monomials.Monomial.gcd"]], "gcd() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.gcd"]], "gcd_list() (in module sympy.polys.polytools)": [[205, "sympy.polys.polytools.gcd_list"]], "gcdex() (in module sympy.polys.polytools)": [[205, "sympy.polys.polytools.gcdex"]], "gcdex() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.gcdex"]], "gegenbauer_poly() (in module sympy.polys.orthopolys)": [[205, "sympy.polys.orthopolys.gegenbauer_poly"]], "gen (sympy.polys.polytools.poly property)": [[205, "sympy.polys.polytools.Poly.gen"]], "genocchi_poly() (in module sympy.polys.appellseqs)": [[205, "sympy.polys.appellseqs.genocchi_poly"]], "get_domain() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.get_domain"]], "get_modulus() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.get_modulus"]], "gff() (in module sympy.polys.polytools)": [[205, "sympy.polys.polytools.gff"]], "gff_list() (in module sympy.polys.polytools)": [[205, "sympy.polys.polytools.gff_list"]], "gff_list() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.gff_list"]], "groebner() (in module sympy.polys.polytools)": [[205, "sympy.polys.polytools.groebner"]], "ground_roots() (in module sympy.polys.polytools)": [[205, "sympy.polys.polytools.ground_roots"]], "ground_roots() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.ground_roots"]], "half_gcdex() (in module sympy.polys.polytools)": [[205, "sympy.polys.polytools.half_gcdex"]], "half_gcdex() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.half_gcdex"]], "has_only_gens() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.has_only_gens"]], "hermite_poly() (in module sympy.polys.orthopolys)": [[205, "sympy.polys.orthopolys.hermite_poly"]], "hermite_prob_poly() (in module sympy.polys.orthopolys)": [[205, "sympy.polys.orthopolys.hermite_prob_poly"]], "homogeneous_order() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.homogeneous_order"]], "homogenize() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.homogenize"]], "horner() (in module sympy.polys.polyfuncs)": [[205, "sympy.polys.polyfuncs.horner"]], "inject() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.inject"]], "integrate() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.integrate"]], "interpolate() (in module sympy.polys.polyfuncs)": [[205, "sympy.polys.polyfuncs.interpolate"]], "interpolating_poly() (in module sympy.polys.specialpolys)": [[205, "sympy.polys.specialpolys.interpolating_poly"]], "intervals() (in module sympy.polys.polytools)": [[205, "sympy.polys.polytools.intervals"]], "intervals() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.intervals"]], "invert() (in module sympy.polys.polytools)": [[205, "sympy.polys.polytools.invert"]], "invert() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.invert"]], "is_cyclotomic (sympy.polys.polytools.poly property)": [[205, "sympy.polys.polytools.Poly.is_cyclotomic"]], "is_ground (sympy.polys.polytools.poly property)": [[205, "sympy.polys.polytools.Poly.is_ground"]], "is_homogeneous (sympy.polys.polytools.poly property)": [[205, "sympy.polys.polytools.Poly.is_homogeneous"]], "is_irreducible (sympy.polys.polytools.poly property)": [[205, "sympy.polys.polytools.Poly.is_irreducible"]], "is_linear (sympy.polys.polytools.poly property)": [[205, "sympy.polys.polytools.Poly.is_linear"]], "is_monic (sympy.polys.polytools.poly property)": [[205, "sympy.polys.polytools.Poly.is_monic"]], "is_monomial (sympy.polys.polytools.poly property)": [[205, "sympy.polys.polytools.Poly.is_monomial"]], "is_multivariate (sympy.polys.polytools.poly property)": [[205, "sympy.polys.polytools.Poly.is_multivariate"]], "is_one (sympy.polys.polytools.poly property)": [[205, "sympy.polys.polytools.Poly.is_one"]], "is_primitive (sympy.polys.polytools.poly property)": [[205, "sympy.polys.polytools.Poly.is_primitive"]], "is_quadratic (sympy.polys.polytools.poly property)": [[205, "sympy.polys.polytools.Poly.is_quadratic"]], "is_sqf (sympy.polys.polytools.poly property)": [[205, "sympy.polys.polytools.Poly.is_sqf"]], "is_univariate (sympy.polys.polytools.poly property)": [[205, "sympy.polys.polytools.Poly.is_univariate"]], "is_zero (sympy.polys.polytools.poly property)": [[205, "sympy.polys.polytools.Poly.is_zero"]], "is_zero_dimensional (sympy.polys.polytools.groebnerbasis property)": [[205, "sympy.polys.polytools.GroebnerBasis.is_zero_dimensional"]], "is_zero_dimensional() (in module sympy.polys.polytools)": [[205, "sympy.polys.polytools.is_zero_dimensional"]], "itermonomials() (in module sympy.polys.monomials)": [[205, "sympy.polys.monomials.itermonomials"]], "jacobi_poly() (in module sympy.polys.orthopolys)": [[205, "sympy.polys.orthopolys.jacobi_poly"]], "l1_norm() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.l1_norm"]], "laguerre_poly() (in module sympy.polys.orthopolys)": [[205, "sympy.polys.orthopolys.laguerre_poly"]], "lcm() (in module sympy.polys.polytools)": [[205, "sympy.polys.polytools.lcm"]], "lcm() (sympy.polys.monomials.monomial method)": [[205, "sympy.polys.monomials.Monomial.lcm"]], "lcm() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.lcm"]], "lcm_list() (in module sympy.polys.polytools)": [[205, "sympy.polys.polytools.lcm_list"]], "legendre_poly() (in module sympy.polys.orthopolys)": [[205, "sympy.polys.orthopolys.legendre_poly"]], "length() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.length"]], "lift() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.lift"]], "ltrim() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.ltrim"]], "match() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.match"]], "max_norm() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.max_norm"]], "monic() (in module sympy.polys.polytools)": [[205, "sympy.polys.polytools.monic"]], "monic() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.monic"]], "monomial_count() (in module sympy.polys.monomials)": [[205, "sympy.polys.monomials.monomial_count"]], "monoms() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.monoms"]], "mul() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.mul"]], "mul_ground() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.mul_ground"]], "neg() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.neg"]], "new() (sympy.polys.polytools.poly class method)": [[205, "sympy.polys.polytools.Poly.new"]], "new() (sympy.polys.rootoftools.rootsum class method)": [[205, "sympy.polys.rootoftools.RootSum.new"]], "norm() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.norm"]], "nroots() (in module sympy.polys.polytools)": [[205, "sympy.polys.polytools.nroots"]], "nroots() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.nroots"]], "nth() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.nth"]], "nth_power_roots_poly() (in module sympy.polys.polytools)": [[205, "sympy.polys.polytools.nth_power_roots_poly"]], "nth_power_roots_poly() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.nth_power_roots_poly"]], "one (sympy.polys.polytools.poly property)": [[205, "sympy.polys.polytools.Poly.one"]], "parallel_poly_from_expr() (in module sympy.polys.polytools)": [[205, "sympy.polys.polytools.parallel_poly_from_expr"]], "pdiv() (in module sympy.polys.polytools)": [[205, "sympy.polys.polytools.pdiv"]], "pdiv() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.pdiv"]], "per() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.per"]], "pexquo() (in module sympy.polys.polytools)": [[205, "sympy.polys.polytools.pexquo"]], "pexquo() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.pexquo"]], "poly() (in module sympy.polys.polytools)": [[205, "sympy.polys.polytools.poly"]], "poly_from_expr() (in module sympy.polys.polytools)": [[205, "sympy.polys.polytools.poly_from_expr"]], "pow() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.pow"]], "pquo() (in module sympy.polys.polytools)": [[205, "sympy.polys.polytools.pquo"]], "pquo() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.pquo"]], "prem() (in module sympy.polys.polytools)": [[205, "sympy.polys.polytools.prem"]], "prem() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.prem"]], "primitive() (in module sympy.polys.polytools)": [[205, "sympy.polys.polytools.primitive"]], "primitive() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.primitive"]], "quo() (in module sympy.polys.polytools)": [[205, "sympy.polys.polytools.quo"]], "quo() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.quo"]], "quo_ground() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.quo_ground"]], "random_poly() (in module sympy.polys.specialpolys)": [[205, "sympy.polys.specialpolys.random_poly"]], "rat_clear_denoms() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.rat_clear_denoms"]], "real_roots() (in module sympy.polys.polytools)": [[205, "sympy.polys.polytools.real_roots"]], "real_roots() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.real_roots"]], "real_roots() (sympy.polys.rootoftools.complexrootof class method)": [[205, "sympy.polys.rootoftools.ComplexRootOf.real_roots"]], "reduce() (sympy.polys.polytools.groebnerbasis method)": [[205, "sympy.polys.polytools.GroebnerBasis.reduce"]], "reduced() (in module sympy.polys.polytools)": [[205, "sympy.polys.polytools.reduced"]], "refine_root() (in module sympy.polys.polytools)": [[205, "sympy.polys.polytools.refine_root"]], "refine_root() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.refine_root"]], "rem() (in module sympy.polys.polytools)": [[205, "sympy.polys.polytools.rem"]], "rem() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.rem"]], "reorder() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.reorder"]], "replace() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.replace"]], "resultant() (in module sympy.polys.polytools)": [[205, "sympy.polys.polytools.resultant"]], "resultant() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.resultant"]], "retract() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.retract"]], "revert() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.revert"]], "root() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.root"]], "rootof() (in module sympy.polys.rootoftools)": [[205, "sympy.polys.rootoftools.rootof"]], "roots() (in module sympy.polys.polyroots)": [[205, "sympy.polys.polyroots.roots"]], "same_root() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.same_root"]], "set_domain() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.set_domain"]], "set_modulus() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.set_modulus"]], "shift() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.shift"]], "slice() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.slice"]], "spherical_bessel_fn() (in module sympy.polys.orthopolys)": [[205, "sympy.polys.orthopolys.spherical_bessel_fn"]], "sqf() (in module sympy.polys.polytools)": [[205, "sympy.polys.polytools.sqf"]], "sqf_list() (in module sympy.polys.polytools)": [[205, "sympy.polys.polytools.sqf_list"]], "sqf_list() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.sqf_list"]], "sqf_list_include() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.sqf_list_include"]], "sqf_norm() (in module sympy.polys.polytools)": [[205, "sympy.polys.polytools.sqf_norm"]], "sqf_norm() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.sqf_norm"]], "sqf_part() (in module sympy.polys.polytools)": [[205, "sympy.polys.polytools.sqf_part"]], "sqf_part() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.sqf_part"]], "sqr() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.sqr"]], "sturm() (in module sympy.polys.polytools)": [[205, "sympy.polys.polytools.sturm"]], "sturm() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.sturm"]], "sub() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.sub"]], "sub_ground() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.sub_ground"]], "subresultants() (in module sympy.polys.polytools)": [[205, "sympy.polys.polytools.subresultants"]], "subresultants() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.subresultants"]], "swinnerton_dyer_poly() (in module sympy.polys.specialpolys)": [[205, "sympy.polys.specialpolys.swinnerton_dyer_poly"]], "symmetric_poly() (in module sympy.polys.specialpolys)": [[205, "sympy.polys.specialpolys.symmetric_poly"]], "symmetrize() (in module sympy.polys.polyfuncs)": [[205, "sympy.polys.polyfuncs.symmetrize"]], "sympy.polys": [[205, "module-sympy.polys"]], "terms() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.terms"]], "terms_gcd() (in module sympy.polys.polytools)": [[205, "sympy.polys.polytools.terms_gcd"]], "terms_gcd() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.terms_gcd"]], "termwise() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.termwise"]], "to_exact() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.to_exact"]], "to_field() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.to_field"]], "to_ring() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.to_ring"]], "together() (in module sympy.polys.rationaltools)": [[205, "sympy.polys.rationaltools.together"]], "total_degree() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.total_degree"]], "transform() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.transform"]], "trunc() (in module sympy.polys.polytools)": [[205, "sympy.polys.polytools.trunc"]], "trunc() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.trunc"]], "unify() (sympy.polys.polytools.poly method)": [[205, "sympy.polys.polytools.Poly.unify"]], "unit (sympy.polys.polytools.poly property)": [[205, "sympy.polys.polytools.Poly.unit"]], "viete() (in module sympy.polys.polyfuncs)": [[205, "sympy.polys.polyfuncs.viete"]], "zero (sympy.polys.polytools.poly property)": [[205, "sympy.polys.polytools.Poly.zero"]], "_tan1() (in module sympy.polys.ring_series)": [[206, "sympy.polys.ring_series._tan1"]], "mul_xin() (in module sympy.polys.ring_series)": [[206, "sympy.polys.ring_series.mul_xin"]], "pow_xin() (in module sympy.polys.ring_series)": [[206, "sympy.polys.ring_series.pow_xin"]], "rs_lambertw() (in module sympy.polys.ring_series)": [[206, "sympy.polys.ring_series.rs_LambertW"]], "rs_asin() (in module sympy.polys.ring_series)": [[206, "sympy.polys.ring_series.rs_asin"]], "rs_atan() (in module sympy.polys.ring_series)": [[206, "sympy.polys.ring_series.rs_atan"]], "rs_atanh() (in module sympy.polys.ring_series)": [[206, "sympy.polys.ring_series.rs_atanh"]], "rs_compose_add() (in module sympy.polys.ring_series)": [[206, "sympy.polys.ring_series.rs_compose_add"]], "rs_cos() (in module sympy.polys.ring_series)": [[206, "sympy.polys.ring_series.rs_cos"]], "rs_cos_sin() (in module sympy.polys.ring_series)": [[206, "sympy.polys.ring_series.rs_cos_sin"]], "rs_cosh() (in module sympy.polys.ring_series)": [[206, "sympy.polys.ring_series.rs_cosh"]], "rs_cot() (in module sympy.polys.ring_series)": [[206, "sympy.polys.ring_series.rs_cot"]], "rs_diff() (in module sympy.polys.ring_series)": [[206, "sympy.polys.ring_series.rs_diff"]], "rs_exp() (in module sympy.polys.ring_series)": [[206, "sympy.polys.ring_series.rs_exp"]], "rs_fun() (in module sympy.polys.ring_series)": [[206, "sympy.polys.ring_series.rs_fun"]], "rs_hadamard_exp() (in module sympy.polys.ring_series)": [[206, "sympy.polys.ring_series.rs_hadamard_exp"]], "rs_integrate() (in module sympy.polys.ring_series)": [[206, "sympy.polys.ring_series.rs_integrate"]], "rs_is_puiseux() (in module sympy.polys.ring_series)": [[206, "sympy.polys.ring_series.rs_is_puiseux"]], "rs_log() (in module sympy.polys.ring_series)": [[206, "sympy.polys.ring_series.rs_log"]], "rs_mul() (in module sympy.polys.ring_series)": [[206, "sympy.polys.ring_series.rs_mul"]], "rs_newton() (in module sympy.polys.ring_series)": [[206, "sympy.polys.ring_series.rs_newton"]], "rs_nth_root() (in module sympy.polys.ring_series)": [[206, "sympy.polys.ring_series.rs_nth_root"]], "rs_pow() (in module sympy.polys.ring_series)": [[206, "sympy.polys.ring_series.rs_pow"]], "rs_puiseux() (in module sympy.polys.ring_series)": [[206, "sympy.polys.ring_series.rs_puiseux"]], "rs_puiseux2() (in module sympy.polys.ring_series)": [[206, "sympy.polys.ring_series.rs_puiseux2"]], "rs_series_from_list() (in module sympy.polys.ring_series)": [[206, "sympy.polys.ring_series.rs_series_from_list"]], "rs_series_inversion() (in module sympy.polys.ring_series)": [[206, "sympy.polys.ring_series.rs_series_inversion"]], "rs_series_reversion() (in module sympy.polys.ring_series)": [[206, "sympy.polys.ring_series.rs_series_reversion"]], "rs_sin() (in module sympy.polys.ring_series)": [[206, "sympy.polys.ring_series.rs_sin"]], "rs_sinh() (in module sympy.polys.ring_series)": [[206, "sympy.polys.ring_series.rs_sinh"]], "rs_square() (in module sympy.polys.ring_series)": [[206, "sympy.polys.ring_series.rs_square"]], "rs_subs() (in module sympy.polys.ring_series)": [[206, "sympy.polys.ring_series.rs_subs"]], "rs_tan() (in module sympy.polys.ring_series)": [[206, "sympy.polys.ring_series.rs_tan"]], "rs_tanh() (in module sympy.polys.ring_series)": [[206, "sympy.polys.ring_series.rs_tanh"]], "rs_trunc() (in module sympy.polys.ring_series)": [[206, "sympy.polys.ring_series.rs_trunc"]], "_solve_lin_sys() (in module sympy.polys.solvers)": [[207, "sympy.polys.solvers._solve_lin_sys"]], "_solve_lin_sys_component() (in module sympy.polys.solvers)": [[207, "sympy.polys.solvers._solve_lin_sys_component"]], "eqs_to_matrix() (in module sympy.polys.solvers)": [[207, "sympy.polys.solvers.eqs_to_matrix"]], "solve_lin_sys() (in module sympy.polys.solvers)": [[207, "sympy.polys.solvers.solve_lin_sys"]], "sympy.polys.solvers": [[207, "module-sympy.polys.solvers"]], "sympy_eqs_to_ring() (in module sympy.polys.solvers)": [[207, "sympy.polys.solvers.sympy_eqs_to_ring"]], "aesaraprinter (class in sympy.printing.aesaracode)": [[209, "sympy.printing.aesaracode.AesaraPrinter"]], "assignmenterror": [[209, "sympy.printing.codeprinter.AssignmentError"]], "c89codeprinter (class in sympy.printing.c)": [[209, "sympy.printing.c.C89CodePrinter"]], "c99codeprinter (class in sympy.printing.c)": [[209, "sympy.printing.c.C99CodePrinter"]], "cxx11codeprinter (class in sympy.printing.cxx)": [[209, "sympy.printing.cxx.CXX11CodePrinter"]], "cxx98codeprinter (class in sympy.printing.cxx)": [[209, "sympy.printing.cxx.CXX98CodePrinter"]], "codeprinter (class in sympy.printing.codeprinter)": [[209, "sympy.printing.codeprinter.CodePrinter"]], "fcodeprinter (class in sympy.printing.fortran)": [[209, "sympy.printing.fortran.FCodePrinter"]], "g() (in module sympy.printing.pretty.pretty_symbology)": [[209, "sympy.printing.pretty.pretty_symbology.G"], [209, "sympy.printing.pretty.pretty_symbology.g"]], "javascriptcodeprinter (class in sympy.printing.jscode)": [[209, "sympy.printing.jscode.JavascriptCodePrinter"]], "juliacodeprinter (class in sympy.printing.julia)": [[209, "sympy.printing.julia.JuliaCodePrinter"]], "lambdaprinter (class in sympy.printing.lambdarepr)": [[209, "sympy.printing.lambdarepr.LambdaPrinter"]], "latexprinter (class in sympy.printing.latex)": [[209, "sympy.printing.latex.LatexPrinter"]], "mcodeprinter (class in sympy.printing.mathematica)": [[209, "sympy.printing.mathematica.MCodePrinter"]], "maplecodeprinter (class in sympy.printing.maple)": [[209, "sympy.printing.maple.MapleCodePrinter"]], "mathmlcontentprinter (class in sympy.printing.mathml)": [[209, "sympy.printing.mathml.MathMLContentPrinter"]], "mathmlpresentationprinter (class in sympy.printing.mathml)": [[209, "sympy.printing.mathml.MathMLPresentationPrinter"]], "mathmlprinterbase (class in sympy.printing.mathml)": [[209, "sympy.printing.mathml.MathMLPrinterBase"]], "mpmathprinter (class in sympy.printing.pycode)": [[209, "sympy.printing.pycode.MpmathPrinter"]], "octavecodeprinter (class in sympy.printing.octave)": [[209, "sympy.printing.octave.OctaveCodePrinter"]], "precedence (in module sympy.printing.precedence)": [[209, "sympy.printing.precedence.PRECEDENCE"]], "precedence_functions (in module sympy.printing.precedence)": [[209, "sympy.printing.precedence.PRECEDENCE_FUNCTIONS"]], "precedence_values (in module sympy.printing.precedence)": [[209, "sympy.printing.precedence.PRECEDENCE_VALUES"]], "prettyprinter (class in sympy.printing.pretty.pretty)": [[209, "sympy.printing.pretty.pretty.PrettyPrinter"]], "printer (class in sympy.printing.printer)": [[209, "sympy.printing.printer.Printer"]], "rcodeprinter (class in sympy.printing.rcode)": [[209, "sympy.printing.rcode.RCodePrinter"]], "reprprinter (class in sympy.printing.repr)": [[209, "sympy.printing.repr.ReprPrinter"]], "rustcodeprinter (class in sympy.printing.rust)": [[209, "sympy.printing.rust.RustCodePrinter"]], "smtlibprinter (class in sympy.printing.smtlib)": [[209, "sympy.printing.smtlib.SMTLibPrinter"]], "strprinter (class in sympy.printing.str)": [[209, "sympy.printing.str.StrPrinter"]], "u() (in module sympy.printing.pretty.pretty_symbology)": [[209, "sympy.printing.pretty.pretty_symbology.U"]], "vf() (in module sympy.printing.pretty.pretty_symbology)": [[209, "sympy.printing.pretty.pretty_symbology.VF"]], "_default_settings (sympy.printing.smtlib.smtlibprinter attribute)": [[209, "sympy.printing.smtlib.SMTLibPrinter._default_settings"]], "_print() (sympy.printing.printer.printer method)": [[209, "sympy.printing.printer.Printer._print"]], "above() (sympy.printing.pretty.stringpict.stringpict method)": [[209, "sympy.printing.pretty.stringpict.stringPict.above"]], "accepted_latex_functions (in module sympy.printing.latex)": [[209, "sympy.printing.latex.accepted_latex_functions"]], "aesara_code() (in module sympy.printing.aesaracode)": [[209, "sympy.printing.aesaracode.aesara_code"]], "aesara_function() (in module sympy.printing.aesaracode)": [[209, "sympy.printing.aesaracode.aesara_function"]], "annotated() (in module sympy.printing.pretty.pretty_symbology)": [[209, "sympy.printing.pretty.pretty_symbology.annotated"]], "apply() (sympy.printing.pretty.stringpict.prettyform static method)": [[209, "sympy.printing.pretty.stringpict.prettyForm.apply"]], "atoms_table (in module sympy.printing.pretty.pretty_symbology)": [[209, "sympy.printing.pretty.pretty_symbology.atoms_table"]], "below() (sympy.printing.pretty.stringpict.stringpict method)": [[209, "sympy.printing.pretty.stringpict.stringPict.below"]], "ccode() (in module sympy.printing.c)": [[209, "sympy.printing.c.ccode"]], "cxxcode() (in module sympy.printing.codeprinter)": [[209, "sympy.printing.codeprinter.cxxcode"]], "digit_2txt (in module sympy.printing.pretty.pretty_symbology)": [[209, "sympy.printing.pretty.pretty_symbology.digit_2txt"]], "dim_handling() (in module sympy.printing.aesaracode)": [[209, "sympy.printing.aesaracode.dim_handling"]], "doprint() (sympy.printing.aesaracode.aesaraprinter method)": [[209, "sympy.printing.aesaracode.AesaraPrinter.doprint"]], "doprint() (sympy.printing.codeprinter.codeprinter method)": [[209, "sympy.printing.codeprinter.CodePrinter.doprint"]], "doprint() (sympy.printing.mathml.mathmlprinterbase method)": [[209, "sympy.printing.mathml.MathMLPrinterBase.doprint"]], "doprint() (sympy.printing.printer.printer method)": [[209, "sympy.printing.printer.Printer.doprint"]], "dotprint() (in module sympy.printing.dot)": [[209, "sympy.printing.dot.dotprint"]], "emptyprinter() (sympy.printing.repr.reprprinter method)": [[209, "sympy.printing.repr.ReprPrinter.emptyPrinter"]], "fcode() (in module sympy.printing.fortran)": [[209, "sympy.printing.fortran.fcode"]], "frac (in module sympy.printing.pretty.pretty_symbology)": [[209, "sympy.printing.pretty.pretty_symbology.frac"]], "greek_letters (in module sympy.printing.pretty.pretty_symbology)": [[209, "sympy.printing.pretty.pretty_symbology.greek_letters"]], "height() (sympy.printing.pretty.stringpict.stringpict method)": [[209, "sympy.printing.pretty.stringpict.stringPict.height"]], "hobj() (in module sympy.printing.pretty.pretty_symbology)": [[209, "sympy.printing.pretty.pretty_symbology.hobj"]], "indent_code() (sympy.printing.c.c89codeprinter method)": [[209, "sympy.printing.c.C89CodePrinter.indent_code"]], "indent_code() (sympy.printing.fortran.fcodeprinter method)": [[209, "sympy.printing.fortran.FCodePrinter.indent_code"]], "indent_code() (sympy.printing.jscode.javascriptcodeprinter method)": [[209, "sympy.printing.jscode.JavascriptCodePrinter.indent_code"]], "indent_code() (sympy.printing.julia.juliacodeprinter method)": [[209, "sympy.printing.julia.JuliaCodePrinter.indent_code"]], "indent_code() (sympy.printing.octave.octavecodeprinter method)": [[209, "sympy.printing.octave.OctaveCodePrinter.indent_code"]], "indent_code() (sympy.printing.rcode.rcodeprinter method)": [[209, "sympy.printing.rcode.RCodePrinter.indent_code"]], "indent_code() (sympy.printing.rust.rustcodeprinter method)": [[209, "sympy.printing.rust.RustCodePrinter.indent_code"]], "jscode() (in module sympy.printing.jscode)": [[209, "sympy.printing.jscode.jscode"]], "julia_code() (in module sympy.printing.julia)": [[209, "sympy.printing.julia.julia_code"]], "known_fcns_src1 (in module sympy.printing.julia)": [[209, "sympy.printing.julia.known_fcns_src1"]], "known_fcns_src1 (in module sympy.printing.octave)": [[209, "sympy.printing.octave.known_fcns_src1"]], "known_fcns_src2 (in module sympy.printing.julia)": [[209, "sympy.printing.julia.known_fcns_src2"]], "known_fcns_src2 (in module sympy.printing.octave)": [[209, "sympy.printing.octave.known_fcns_src2"]], "known_functions (in module sympy.printing.jscode)": [[209, "sympy.printing.jscode.known_functions"]], "known_functions (in module sympy.printing.mathematica)": [[209, "sympy.printing.mathematica.known_functions"]], "known_functions (in module sympy.printing.rcode)": [[209, "sympy.printing.rcode.known_functions"]], "known_functions (in module sympy.printing.rust)": [[209, "sympy.printing.rust.known_functions"]], "known_functions_c89 (in module sympy.printing.c)": [[209, "sympy.printing.c.known_functions_C89"]], "known_functions_c99 (in module sympy.printing.c)": [[209, "sympy.printing.c.known_functions_C99"]], "lambdarepr() (in module sympy.printing.lambdarepr)": [[209, "sympy.printing.lambdarepr.lambdarepr"]], "latex() (in module sympy.printing.latex)": [[209, "sympy.printing.latex.latex"]], "left() (sympy.printing.pretty.stringpict.stringpict method)": [[209, "sympy.printing.pretty.stringpict.stringPict.left"]], "leftslash() (sympy.printing.pretty.stringpict.stringpict method)": [[209, "sympy.printing.pretty.stringpict.stringPict.leftslash"]], "maple_code() (in module sympy.printing.maple)": [[209, "sympy.printing.maple.maple_code"]], "mathematica_code() (in module sympy.printing.mathematica)": [[209, "sympy.printing.mathematica.mathematica_code"]], "mathml() (in module sympy.printing.mathml)": [[209, "sympy.printing.mathml.mathml"]], "mathml_tag() (sympy.printing.mathml.mathmlcontentprinter method)": [[209, "sympy.printing.mathml.MathMLContentPrinter.mathml_tag"]], "mathml_tag() (sympy.printing.mathml.mathmlpresentationprinter method)": [[209, "sympy.printing.mathml.MathMLPresentationPrinter.mathml_tag"]], "next() (sympy.printing.pretty.stringpict.stringpict static method)": [[209, "sympy.printing.pretty.stringpict.stringPict.next"]], "octave_code() (in module sympy.printing.octave)": [[209, "sympy.printing.octave.octave_code"]], "parens() (sympy.printing.pretty.stringpict.stringpict method)": [[209, "sympy.printing.pretty.stringpict.stringPict.parens"]], "parenthesize_super() (sympy.printing.latex.latexprinter method)": [[209, "sympy.printing.latex.LatexPrinter.parenthesize_super"]], "pprint_nodes() (in module sympy.printing.tree)": [[209, "sympy.printing.tree.pprint_nodes"]], "precedence() (in module sympy.printing.precedence)": [[209, "sympy.printing.precedence.precedence"]], "pretty() (in module sympy.printing.pretty.pretty)": [[209, "sympy.printing.pretty.pretty.pretty"]], "prettyform (class in sympy.printing.pretty.stringpict)": [[209, "sympy.printing.pretty.stringpict.prettyForm"]], "pretty_atom() (in module sympy.printing.pretty.pretty_symbology)": [[209, "sympy.printing.pretty.pretty_symbology.pretty_atom"]], "pretty_print() (in module sympy.printing.pretty.pretty)": [[209, "sympy.printing.pretty.pretty.pretty_print"]], "pretty_symbol() (in module sympy.printing.pretty.pretty_symbology)": [[209, "sympy.printing.pretty.pretty_symbology.pretty_symbol"]], "pretty_try_use_unicode() (in module sympy.printing.pretty.pretty_symbology)": [[209, "sympy.printing.pretty.pretty_symbology.pretty_try_use_unicode"]], "pretty_use_unicode() (in module sympy.printing.pretty.pretty_symbology)": [[209, "sympy.printing.pretty.pretty_symbology.pretty_use_unicode"]], "preview() (in module sympy.printing.preview)": [[209, "sympy.printing.preview.preview"]], "print_ccode() (in module sympy.printing.c)": [[209, "sympy.printing.c.print_ccode"]], "print_fcode() (in module sympy.printing.fortran)": [[209, "sympy.printing.fortran.print_fcode"]], "print_gtk() (in module sympy.printing.gtk)": [[209, "sympy.printing.gtk.print_gtk"]], "print_latex() (in module sympy.printing.latex)": [[209, "sympy.printing.latex.print_latex"]], "print_maple_code() (in module sympy.printing.maple)": [[209, "sympy.printing.maple.print_maple_code"]], "print_mathml() (in module sympy.printing.mathml)": [[209, "sympy.printing.mathml.print_mathml"]], "print_node() (in module sympy.printing.tree)": [[209, "sympy.printing.tree.print_node"]], "print_rcode() (in module sympy.printing.rcode)": [[209, "sympy.printing.rcode.print_rcode"]], "print_tree() (in module sympy.printing.tree)": [[209, "sympy.printing.tree.print_tree"]], "printmethod (sympy.printing.aesaracode.aesaraprinter attribute)": [[209, "sympy.printing.aesaracode.AesaraPrinter.printmethod"]], "printmethod (sympy.printing.c.c89codeprinter attribute)": [[209, "sympy.printing.c.C89CodePrinter.printmethod"]], "printmethod (sympy.printing.c.c99codeprinter attribute)": [[209, "sympy.printing.c.C99CodePrinter.printmethod"]], "printmethod (sympy.printing.codeprinter.codeprinter attribute)": [[209, "sympy.printing.codeprinter.CodePrinter.printmethod"]], "printmethod (sympy.printing.cxx.cxx11codeprinter attribute)": [[209, "sympy.printing.cxx.CXX11CodePrinter.printmethod"]], "printmethod (sympy.printing.cxx.cxx98codeprinter attribute)": [[209, "sympy.printing.cxx.CXX98CodePrinter.printmethod"]], "printmethod (sympy.printing.fortran.fcodeprinter attribute)": [[209, "sympy.printing.fortran.FCodePrinter.printmethod"]], "printmethod (sympy.printing.jscode.javascriptcodeprinter attribute)": [[209, "sympy.printing.jscode.JavascriptCodePrinter.printmethod"]], "printmethod (sympy.printing.julia.juliacodeprinter attribute)": [[209, "sympy.printing.julia.JuliaCodePrinter.printmethod"]], "printmethod (sympy.printing.lambdarepr.lambdaprinter attribute)": [[209, "sympy.printing.lambdarepr.LambdaPrinter.printmethod"]], "printmethod (sympy.printing.latex.latexprinter attribute)": [[209, "sympy.printing.latex.LatexPrinter.printmethod"]], "printmethod (sympy.printing.maple.maplecodeprinter attribute)": [[209, "sympy.printing.maple.MapleCodePrinter.printmethod"]], "printmethod (sympy.printing.mathematica.mcodeprinter attribute)": [[209, "sympy.printing.mathematica.MCodePrinter.printmethod"]], "printmethod (sympy.printing.mathml.mathmlcontentprinter attribute)": [[209, "sympy.printing.mathml.MathMLContentPrinter.printmethod"]], "printmethod (sympy.printing.mathml.mathmlpresentationprinter attribute)": [[209, "sympy.printing.mathml.MathMLPresentationPrinter.printmethod"]], "printmethod (sympy.printing.octave.octavecodeprinter attribute)": [[209, "sympy.printing.octave.OctaveCodePrinter.printmethod"]], "printmethod (sympy.printing.pretty.pretty.prettyprinter attribute)": [[209, "sympy.printing.pretty.pretty.PrettyPrinter.printmethod"]], "printmethod (sympy.printing.printer.printer attribute)": [[209, "sympy.printing.printer.Printer.printmethod"]], "printmethod (sympy.printing.rcode.rcodeprinter attribute)": [[209, "sympy.printing.rcode.RCodePrinter.printmethod"]], "printmethod (sympy.printing.repr.reprprinter attribute)": [[209, "sympy.printing.repr.ReprPrinter.printmethod"]], "printmethod (sympy.printing.rust.rustcodeprinter attribute)": [[209, "sympy.printing.rust.RustCodePrinter.printmethod"]], "printmethod (sympy.printing.smtlib.smtlibprinter attribute)": [[209, "sympy.printing.smtlib.SMTLibPrinter.printmethod"]], "printmethod (sympy.printing.str.strprinter attribute)": [[209, "sympy.printing.str.StrPrinter.printmethod"]], "pycode() (in module sympy.printing.pycode)": [[209, "sympy.printing.pycode.pycode"]], "rcode() (in module sympy.printing.rcode)": [[209, "sympy.printing.rcode.rcode"]], "render() (sympy.printing.pretty.stringpict.stringpict method)": [[209, "sympy.printing.pretty.stringpict.stringPict.render"]], "reprify() (sympy.printing.repr.reprprinter method)": [[209, "sympy.printing.repr.ReprPrinter.reprify"]], "right() (sympy.printing.pretty.stringpict.stringpict method)": [[209, "sympy.printing.pretty.stringpict.stringPict.right"]], "root (in module sympy.printing.pretty.pretty_symbology)": [[209, "sympy.printing.pretty.pretty_symbology.root"]], "root() (sympy.printing.pretty.stringpict.stringpict method)": [[209, "sympy.printing.pretty.stringpict.stringPict.root"]], "rust_code() (in module sympy.printing.rust)": [[209, "sympy.printing.rust.rust_code"]], "set_global_settings() (sympy.printing.printer.printer class method)": [[209, "sympy.printing.printer.Printer.set_global_settings"]], "smtlib_code() (in module sympy.printing.smtlib)": [[209, "sympy.printing.smtlib.smtlib_code"]], "split_super_sub() (in module sympy.printing.conventions)": [[209, "sympy.printing.conventions.split_super_sub"]], "srepr() (in module sympy.printing.repr)": [[209, "sympy.printing.repr.srepr"]], "sstr() (in module sympy.printing.str)": [[209, "sympy.printing.str.sstr"]], "sstrrepr() (in module sympy.printing.str)": [[209, "sympy.printing.str.sstrrepr"]], "stack() (sympy.printing.pretty.stringpict.stringpict static method)": [[209, "sympy.printing.pretty.stringpict.stringPict.stack"]], "stringpict (class in sympy.printing.pretty.stringpict)": [[209, "sympy.printing.pretty.stringpict.stringPict"]], "sub (in module sympy.printing.pretty.pretty_symbology)": [[209, "sympy.printing.pretty.pretty_symbology.sub"]], "sup (in module sympy.printing.pretty.pretty_symbology)": [[209, "sympy.printing.pretty.pretty_symbology.sup"]], "symb_2txt (in module sympy.printing.pretty.pretty_symbology)": [[209, "sympy.printing.pretty.pretty_symbology.symb_2txt"]], "sympy.printing.aesaracode": [[209, "module-sympy.printing.aesaracode"]], "sympy.printing.c": [[209, "module-sympy.printing.c"]], "sympy.printing.codeprinter": [[209, "module-sympy.printing.codeprinter"]], "sympy.printing.conventions": [[209, "module-sympy.printing.conventions"]], "sympy.printing.cxx": [[209, "module-sympy.printing.cxx"]], "sympy.printing.fortran": [[209, "module-sympy.printing.fortran"]], "sympy.printing.gtk": [[209, "module-sympy.printing.gtk"]], "sympy.printing.jscode": [[209, "module-sympy.printing.jscode"]], "sympy.printing.julia": [[209, "module-sympy.printing.julia"]], "sympy.printing.lambdarepr": [[209, "module-sympy.printing.lambdarepr"]], "sympy.printing.latex": [[209, "module-sympy.printing.latex"]], "sympy.printing.maple": [[209, "module-sympy.printing.maple"]], "sympy.printing.mathematica": [[209, "module-sympy.printing.mathematica"]], "sympy.printing.mathml": [[209, "module-sympy.printing.mathml"]], "sympy.printing.octave": [[209, "module-sympy.printing.octave"]], "sympy.printing.precedence": [[209, "module-sympy.printing.precedence"]], "sympy.printing.pretty": [[209, "module-sympy.printing.pretty"]], "sympy.printing.pretty.pretty": [[209, "module-sympy.printing.pretty.pretty"]], "sympy.printing.pretty.pretty_symbology": [[209, "module-sympy.printing.pretty.pretty_symbology"]], "sympy.printing.pretty.stringpict": [[209, "module-sympy.printing.pretty.stringpict"]], "sympy.printing.preview": [[209, "module-sympy.printing.preview"]], "sympy.printing.printer": [[209, "module-sympy.printing.printer"]], "sympy.printing.pycode": [[209, "module-sympy.printing.pycode"]], "sympy.printing.python": [[209, "module-sympy.printing.python"]], "sympy.printing.rcode": [[209, "module-sympy.printing.rcode"]], "sympy.printing.repr": [[209, "module-sympy.printing.repr"]], "sympy.printing.rust": [[209, "module-sympy.printing.rust"]], "sympy.printing.smtlib": [[209, "module-sympy.printing.smtlib"]], "sympy.printing.str": [[209, "module-sympy.printing.str"]], "sympy.printing.tree": [[209, "module-sympy.printing.tree"]], "terminal_width() (sympy.printing.pretty.stringpict.stringpict method)": [[209, "sympy.printing.pretty.stringpict.stringPict.terminal_width"]], "tree() (in module sympy.printing.tree)": [[209, "sympy.printing.tree.tree"]], "vobj() (in module sympy.printing.pretty.pretty_symbology)": [[209, "sympy.printing.pretty.pretty_symbology.vobj"]], "width() (sympy.printing.pretty.stringpict.stringpict method)": [[209, "sympy.printing.pretty.stringpict.stringPict.width"]], "xobj() (in module sympy.printing.pretty.pretty_symbology)": [[209, "sympy.printing.pretty.pretty_symbology.xobj"]], "xstr() (in module sympy.printing.pretty.pretty_symbology)": [[209, "sympy.printing.pretty.pretty_symbology.xstr"]], "xsym() (in module sympy.printing.pretty.pretty_symbology)": [[209, "sympy.printing.pretty.pretty_symbology.xsym"]], "finiteformalpowerseries (class in sympy.series.formal)": [[211, "sympy.series.formal.FiniteFormalPowerSeries"]], "formalpowerseries (class in sympy.series.formal)": [[211, "sympy.series.formal.FormalPowerSeries"]], "formalpowerseriescompose (class in sympy.series.formal)": [[211, "sympy.series.formal.FormalPowerSeriesCompose"]], "formalpowerseriesinverse (class in sympy.series.formal)": [[211, "sympy.series.formal.FormalPowerSeriesInverse"]], "formalpowerseriesproduct (class in sympy.series.formal)": [[211, "sympy.series.formal.FormalPowerSeriesProduct"]], "coeff_bell() (sympy.series.formal.formalpowerseries method)": [[211, "sympy.series.formal.FormalPowerSeries.coeff_bell"]], "compose() (sympy.series.formal.formalpowerseries method)": [[211, "sympy.series.formal.FormalPowerSeries.compose"]], "compute_fps() (in module sympy.series.formal)": [[211, "sympy.series.formal.compute_fps"]], "exp_re() (in module sympy.series.formal)": [[211, "sympy.series.formal.exp_re"]], "fps() (in module sympy.series.formal)": [[211, "sympy.series.formal.fps"]], "function (sympy.series.formal.formalpowerseriescompose property)": [[211, "sympy.series.formal.FormalPowerSeriesCompose.function"]], "function (sympy.series.formal.formalpowerseriesinverse property)": [[211, "sympy.series.formal.FormalPowerSeriesInverse.function"]], "function (sympy.series.formal.formalpowerseriesproduct property)": [[211, "sympy.series.formal.FormalPowerSeriesProduct.function"]], "hyper_algorithm() (in module sympy.series.formal)": [[211, "sympy.series.formal.hyper_algorithm"]], "hyper_re() (in module sympy.series.formal)": [[211, "sympy.series.formal.hyper_re"]], "infinite (sympy.series.formal.formalpowerseries property)": [[211, "sympy.series.formal.FormalPowerSeries.infinite"]], "integrate() (sympy.series.formal.formalpowerseries method)": [[211, "sympy.series.formal.FormalPowerSeries.integrate"]], "inverse() (sympy.series.formal.formalpowerseries method)": [[211, "sympy.series.formal.FormalPowerSeries.inverse"]], "polynomial() (sympy.series.formal.formalpowerseries method)": [[211, "sympy.series.formal.FormalPowerSeries.polynomial"]], "product() (sympy.series.formal.formalpowerseries method)": [[211, "sympy.series.formal.FormalPowerSeries.product"]], "rational_algorithm() (in module sympy.series.formal)": [[211, "sympy.series.formal.rational_algorithm"]], "rational_independent() (in module sympy.series.formal)": [[211, "sympy.series.formal.rational_independent"]], "rsolve_hypergeometric() (in module sympy.series.formal)": [[211, "sympy.series.formal.rsolve_hypergeometric"]], "simplede() (in module sympy.series.formal)": [[211, "sympy.series.formal.simpleDE"]], "solve_de() (in module sympy.series.formal)": [[211, "sympy.series.formal.solve_de"]], "truncate() (sympy.series.formal.formalpowerseries method)": [[211, "sympy.series.formal.FormalPowerSeries.truncate"]], "fourierseries (class in sympy.series.fourier)": [[212, "sympy.series.fourier.FourierSeries"]], "fourier_series() (in module sympy.series.fourier)": [[212, "sympy.series.fourier.fourier_series"]], "scale() (sympy.series.fourier.fourierseries method)": [[212, "sympy.series.fourier.FourierSeries.scale"]], "scalex() (sympy.series.fourier.fourierseries method)": [[212, "sympy.series.fourier.FourierSeries.scalex"]], "shift() (sympy.series.fourier.fourierseries method)": [[212, "sympy.series.fourier.FourierSeries.shift"]], "shiftx() (sympy.series.fourier.fourierseries method)": [[212, "sympy.series.fourier.FourierSeries.shiftx"]], "sigma_approximation() (sympy.series.fourier.fourierseries method)": [[212, "sympy.series.fourier.FourierSeries.sigma_approximation"]], "truncate() (sympy.series.fourier.fourierseries method)": [[212, "sympy.series.fourier.FourierSeries.truncate"]], "difference_delta() (in module sympy.series.limitseq)": [[214, "sympy.series.limitseq.difference_delta"]], "dominant() (in module sympy.series.limitseq)": [[214, "sympy.series.limitseq.dominant"]], "limit_seq() (in module sympy.series.limitseq)": [[214, "sympy.series.limitseq.limit_seq"]], "emptysequence (class in sympy.series.sequences)": [[215, "sympy.series.sequences.EmptySequence"]], "recursiveseq (class in sympy.series.sequences)": [[215, "sympy.series.sequences.RecursiveSeq"]], "seqadd (class in sympy.series.sequences)": [[215, "sympy.series.sequences.SeqAdd"]], "seqbase (class in sympy.series.sequences)": [[215, "sympy.series.sequences.SeqBase"]], "seqformula (class in sympy.series.sequences)": [[215, "sympy.series.sequences.SeqFormula"]], "seqmul (class in sympy.series.sequences)": [[215, "sympy.series.sequences.SeqMul"]], "seqper (class in sympy.series.sequences)": [[215, "sympy.series.sequences.SeqPer"]], "coeff() (sympy.series.sequences.seqbase method)": [[215, "sympy.series.sequences.SeqBase.coeff"]], "coeff_mul() (sympy.series.sequences.emptysequence method)": [[215, "sympy.series.sequences.EmptySequence.coeff_mul"]], "coeff_mul() (sympy.series.sequences.seqbase method)": [[215, "sympy.series.sequences.SeqBase.coeff_mul"]], "coeff_mul() (sympy.series.sequences.seqformula method)": [[215, "sympy.series.sequences.SeqFormula.coeff_mul"]], "coeff_mul() (sympy.series.sequences.seqper method)": [[215, "sympy.series.sequences.SeqPer.coeff_mul"]], "find_linear_recurrence() (sympy.series.sequences.seqbase method)": [[215, "sympy.series.sequences.SeqBase.find_linear_recurrence"]], "free_symbols (sympy.series.sequences.seqbase property)": [[215, "sympy.series.sequences.SeqBase.free_symbols"]], "gen (sympy.series.sequences.seqbase property)": [[215, "sympy.series.sequences.SeqBase.gen"]], "initial (sympy.series.sequences.recursiveseq property)": [[215, "sympy.series.sequences.RecursiveSeq.initial"]], "interval (sympy.series.sequences.recursiveseq property)": [[215, "sympy.series.sequences.RecursiveSeq.interval"]], "interval (sympy.series.sequences.seqbase property)": [[215, "sympy.series.sequences.SeqBase.interval"]], "length (sympy.series.sequences.seqbase property)": [[215, "sympy.series.sequences.SeqBase.length"]], "n (sympy.series.sequences.recursiveseq property)": [[215, "sympy.series.sequences.RecursiveSeq.n"]], "recurrence (sympy.series.sequences.recursiveseq property)": [[215, "sympy.series.sequences.RecursiveSeq.recurrence"]], "reduce() (sympy.series.sequences.seqadd static method)": [[215, "sympy.series.sequences.SeqAdd.reduce"]], "reduce() (sympy.series.sequences.seqmul static method)": [[215, "sympy.series.sequences.SeqMul.reduce"]], "sequence() (in module sympy.series.sequences)": [[215, "sympy.series.sequences.sequence"]], "start (sympy.series.sequences.recursiveseq property)": [[215, "sympy.series.sequences.RecursiveSeq.start"]], "start (sympy.series.sequences.seqbase property)": [[215, "sympy.series.sequences.SeqBase.start"]], "stop (sympy.series.sequences.recursiveseq property)": [[215, "sympy.series.sequences.RecursiveSeq.stop"]], "stop (sympy.series.sequences.seqbase property)": [[215, "sympy.series.sequences.SeqBase.stop"]], "variables (sympy.series.sequences.seqbase property)": [[215, "sympy.series.sequences.SeqBase.variables"]], "y (sympy.series.sequences.recursiveseq property)": [[215, "sympy.series.sequences.RecursiveSeq.y"]], "yn (sympy.series.sequences.recursiveseq property)": [[215, "sympy.series.sequences.RecursiveSeq.yn"]], "limit (class in sympy.series.limits)": [[216, "sympy.series.limits.Limit"]], "order (class in sympy.series.order)": [[216, "sympy.series.order.Order"]], "subsset (class in sympy.series.gruntz)": [[216, "sympy.series.gruntz.SubsSet"]], "build_expression_tree() (in module sympy.series.gruntz)": [[216, "sympy.series.gruntz.build_expression_tree"]], "calculate_series() (in module sympy.series.gruntz)": [[216, "sympy.series.gruntz.calculate_series"]], "compare() (in module sympy.series.gruntz)": [[216, "sympy.series.gruntz.compare"]], "contains() (sympy.series.order.order method)": [[216, "sympy.series.order.Order.contains"]], "copy() (sympy.series.gruntz.subsset method)": [[216, "sympy.series.gruntz.SubsSet.copy"]], "do_subs() (sympy.series.gruntz.subsset method)": [[216, "sympy.series.gruntz.SubsSet.do_subs"]], "doit() (sympy.series.limits.limit method)": [[216, "sympy.series.limits.Limit.doit"]], "gruntz() (in module sympy.series.gruntz)": [[216, "sympy.series.gruntz.gruntz"]], "limit() (in module sympy.series.limits)": [[216, "sympy.series.limits.limit"]], "limitinf() (in module sympy.series.gruntz)": [[216, "sympy.series.gruntz.limitinf"]], "meets() (sympy.series.gruntz.subsset method)": [[216, "sympy.series.gruntz.SubsSet.meets"]], "mrv() (in module sympy.series.gruntz)": [[216, "sympy.series.gruntz.mrv"]], "mrv_leadterm() (in module sympy.series.gruntz)": [[216, "sympy.series.gruntz.mrv_leadterm"]], "mrv_max1() (in module sympy.series.gruntz)": [[216, "sympy.series.gruntz.mrv_max1"]], "mrv_max3() (in module sympy.series.gruntz)": [[216, "sympy.series.gruntz.mrv_max3"]], "residue() (in module sympy.series.residues)": [[216, "sympy.series.residues.residue"]], "rewrite() (in module sympy.series.gruntz)": [[216, "sympy.series.gruntz.rewrite"]], "richardson() (in module sympy.series.acceleration)": [[216, "sympy.series.acceleration.richardson"]], "series() (in module sympy.series.series)": [[216, "sympy.series.series.series"]], "shanks() (in module sympy.series.acceleration)": [[216, "sympy.series.acceleration.shanks"]], "sign() (in module sympy.series.gruntz)": [[216, "sympy.series.gruntz.sign"]], "union() (sympy.series.gruntz.subsset method)": [[216, "sympy.series.gruntz.SubsSet.union"]], "cartesiancomplexregion (class in sympy.sets.fancysets)": [[217, "sympy.sets.fancysets.CartesianComplexRegion"]], "complement (class in sympy.sets.sets)": [[217, "sympy.sets.sets.Complement"]], "complexregion (class in sympy.sets.fancysets)": [[217, "sympy.sets.fancysets.ComplexRegion"]], "complexes (class in sympy.sets.fancysets)": [[217, "sympy.sets.fancysets.Complexes"]], "conditionset (class in sympy.sets.conditionset)": [[217, "sympy.sets.conditionset.ConditionSet"]], "contains (class in sympy.sets.conditionset)": [[217, "sympy.sets.conditionset.Contains"]], "disjointunion (class in sympy.sets.sets)": [[217, "sympy.sets.sets.DisjointUnion"]], "emptyset (class in sympy.sets.sets)": [[217, "sympy.sets.sets.EmptySet"]], "finiteset (class in sympy.sets.sets)": [[217, "sympy.sets.sets.FiniteSet"]], "imageset (class in sympy.sets.fancysets)": [[217, "sympy.sets.fancysets.ImageSet"]], "integers (class in sympy.sets.fancysets)": [[217, "sympy.sets.fancysets.Integers"]], "intersection (class in sympy.sets.sets)": [[217, "sympy.sets.sets.Intersection"]], "interval (class in sympy.sets.sets)": [[217, "sympy.sets.sets.Interval"]], "lopen() (sympy.sets.sets.interval class method)": [[217, "sympy.sets.sets.Interval.Lopen"]], "naturals (class in sympy.sets.fancysets)": [[217, "sympy.sets.fancysets.Naturals"]], "naturals0 (class in sympy.sets.fancysets)": [[217, "sympy.sets.fancysets.Naturals0"]], "polarcomplexregion (class in sympy.sets.fancysets)": [[217, "sympy.sets.fancysets.PolarComplexRegion"]], "powerset (class in sympy.sets.powerset)": [[217, "sympy.sets.powerset.PowerSet"]], "productset (class in sympy.sets.sets)": [[217, "sympy.sets.sets.ProductSet"]], "range (class in sympy.sets.fancysets)": [[217, "sympy.sets.fancysets.Range"]], "rationals (class in sympy.sets.fancysets)": [[217, "sympy.sets.fancysets.Rationals"]], "reals (class in sympy.sets.fancysets)": [[217, "sympy.sets.fancysets.Reals"]], "ropen() (sympy.sets.sets.interval class method)": [[217, "sympy.sets.sets.Interval.Ropen"]], "set (class in sympy.sets.sets)": [[217, "sympy.sets.sets.Set"]], "setkind (class in sympy.sets.conditionset)": [[217, "sympy.sets.conditionset.SetKind"]], "symmetricdifference (class in sympy.sets.sets)": [[217, "sympy.sets.sets.SymmetricDifference"]], "union (class in sympy.sets.sets)": [[217, "sympy.sets.sets.Union"]], "universalset (class in sympy.sets.sets)": [[217, "sympy.sets.sets.UniversalSet"]], "a_interval (sympy.sets.fancysets.complexregion property)": [[217, "sympy.sets.fancysets.ComplexRegion.a_interval"]], "as_relational() (sympy.sets.fancysets.range method)": [[217, "sympy.sets.fancysets.Range.as_relational"]], "as_relational() (sympy.sets.sets.complement method)": [[217, "sympy.sets.sets.Complement.as_relational"]], "as_relational() (sympy.sets.sets.finiteset method)": [[217, "sympy.sets.sets.FiniteSet.as_relational"]], "as_relational() (sympy.sets.sets.intersection method)": [[217, "sympy.sets.sets.Intersection.as_relational"]], "as_relational() (sympy.sets.sets.interval method)": [[217, "sympy.sets.sets.Interval.as_relational"]], "as_relational() (sympy.sets.sets.symmetricdifference method)": [[217, "sympy.sets.sets.SymmetricDifference.as_relational"]], "as_relational() (sympy.sets.sets.union method)": [[217, "sympy.sets.sets.Union.as_relational"]], "b_interval (sympy.sets.fancysets.complexregion property)": [[217, "sympy.sets.fancysets.ComplexRegion.b_interval"]], "boundary (sympy.sets.sets.set property)": [[217, "sympy.sets.sets.Set.boundary"]], "closure (sympy.sets.sets.set property)": [[217, "sympy.sets.sets.Set.closure"]], "complement() (sympy.sets.sets.set method)": [[217, "sympy.sets.sets.Set.complement"]], "contains() (sympy.sets.sets.set method)": [[217, "sympy.sets.sets.Set.contains"]], "end (sympy.sets.sets.interval property)": [[217, "sympy.sets.sets.Interval.end"]], "from_real() (sympy.sets.fancysets.complexregion class method)": [[217, "sympy.sets.fancysets.ComplexRegion.from_real"]], "imageset() (in module sympy.sets.sets)": [[217, "sympy.sets.sets.imageset"]], "inf (sympy.sets.sets.set property)": [[217, "sympy.sets.sets.Set.inf"]], "interior (sympy.sets.sets.set property)": [[217, "sympy.sets.sets.Set.interior"]], "intersect() (sympy.sets.sets.set method)": [[217, "sympy.sets.sets.Set.intersect"]], "intersection() (sympy.sets.sets.set method)": [[217, "sympy.sets.sets.Set.intersection"]], "is_closed (sympy.sets.sets.set property)": [[217, "sympy.sets.sets.Set.is_closed"]], "is_disjoint() (sympy.sets.sets.set method)": [[217, "sympy.sets.sets.Set.is_disjoint"]], "is_iterable (sympy.sets.sets.productset property)": [[217, "sympy.sets.sets.ProductSet.is_iterable"]], "is_left_unbounded (sympy.sets.sets.interval property)": [[217, "sympy.sets.sets.Interval.is_left_unbounded"]], "is_open (sympy.sets.sets.set property)": [[217, "sympy.sets.sets.Set.is_open"]], "is_proper_subset() (sympy.sets.sets.set method)": [[217, "sympy.sets.sets.Set.is_proper_subset"]], "is_proper_superset() (sympy.sets.sets.set method)": [[217, "sympy.sets.sets.Set.is_proper_superset"]], "is_right_unbounded (sympy.sets.sets.interval property)": [[217, "sympy.sets.sets.Interval.is_right_unbounded"]], "is_subset() (sympy.sets.sets.set method)": [[217, "sympy.sets.sets.Set.is_subset"]], "is_superset() (sympy.sets.sets.set method)": [[217, "sympy.sets.sets.Set.is_superset"]], "isdisjoint() (sympy.sets.sets.set method)": [[217, "sympy.sets.sets.Set.isdisjoint"]], "issubset() (sympy.sets.sets.set method)": [[217, "sympy.sets.sets.Set.issubset"]], "issuperset() (sympy.sets.sets.set method)": [[217, "sympy.sets.sets.Set.issuperset"]], "kind (sympy.sets.sets.set property)": [[217, "sympy.sets.sets.Set.kind"]], "left_open (sympy.sets.sets.interval property)": [[217, "sympy.sets.sets.Interval.left_open"]], "measure (sympy.sets.sets.set property)": [[217, "sympy.sets.sets.Set.measure"]], "normalize_theta_set() (in module sympy.sets.fancysets)": [[217, "sympy.sets.fancysets.normalize_theta_set"]], "open() (sympy.sets.sets.interval class method)": [[217, "sympy.sets.sets.Interval.open"]], "powerset() (sympy.sets.sets.set method)": [[217, "sympy.sets.sets.Set.powerset"]], "psets (sympy.sets.fancysets.complexregion property)": [[217, "sympy.sets.fancysets.ComplexRegion.psets"]], "reduce() (sympy.sets.sets.complement static method)": [[217, "sympy.sets.sets.Complement.reduce"]], "reversed (sympy.sets.fancysets.range property)": [[217, "sympy.sets.fancysets.Range.reversed"]], "right_open (sympy.sets.sets.interval property)": [[217, "sympy.sets.sets.Interval.right_open"]], "sets (sympy.sets.fancysets.complexregion property)": [[217, "sympy.sets.fancysets.ComplexRegion.sets"]], "start (sympy.sets.sets.interval property)": [[217, "sympy.sets.sets.Interval.start"]], "sup (sympy.sets.sets.set property)": [[217, "sympy.sets.sets.Set.sup"]], "symmetric_difference() (sympy.sets.sets.set method)": [[217, "sympy.sets.sets.Set.symmetric_difference"]], "sympy.sets.conditionset": [[217, "module-sympy.sets.conditionset"]], "sympy.sets.fancysets": [[217, "module-sympy.sets.fancysets"]], "sympy.sets.powerset": [[217, "module-sympy.sets.powerset"]], "sympy.sets.sets": [[217, "module-sympy.sets.sets"]], "union() (sympy.sets.sets.set method)": [[217, "sympy.sets.sets.Set.union"]], "tr0() (in module sympy.simplify.fu)": [[218, "sympy.simplify.fu.TR0"]], "tr1() (in module sympy.simplify.fu)": [[218, "sympy.simplify.fu.TR1"]], "tr10() (in module sympy.simplify.fu)": [[218, "sympy.simplify.fu.TR10"]], "tr10i() (in module sympy.simplify.fu)": [[218, "sympy.simplify.fu.TR10i"]], "tr11() (in module sympy.simplify.fu)": [[218, "sympy.simplify.fu.TR11"]], "tr111() (in module sympy.simplify.fu)": [[218, "sympy.simplify.fu.TR111"]], "tr12() (in module sympy.simplify.fu)": [[218, "sympy.simplify.fu.TR12"]], "tr12i() (in module sympy.simplify.fu)": [[218, "sympy.simplify.fu.TR12i"]], "tr13() (in module sympy.simplify.fu)": [[218, "sympy.simplify.fu.TR13"]], "tr14() (in module sympy.simplify.fu)": [[218, "sympy.simplify.fu.TR14"]], "tr15() (in module sympy.simplify.fu)": [[218, "sympy.simplify.fu.TR15"]], "tr16() (in module sympy.simplify.fu)": [[218, "sympy.simplify.fu.TR16"]], "tr2() (in module sympy.simplify.fu)": [[218, "sympy.simplify.fu.TR2"]], "tr22() (in module sympy.simplify.fu)": [[218, "sympy.simplify.fu.TR22"]], "tr2i() (in module sympy.simplify.fu)": [[218, "sympy.simplify.fu.TR2i"]], "tr3() (in module sympy.simplify.fu)": [[218, "sympy.simplify.fu.TR3"]], "tr4() (in module sympy.simplify.fu)": [[218, "sympy.simplify.fu.TR4"]], "tr5() (in module sympy.simplify.fu)": [[218, "sympy.simplify.fu.TR5"]], "tr6() (in module sympy.simplify.fu)": [[218, "sympy.simplify.fu.TR6"]], "tr7() (in module sympy.simplify.fu)": [[218, "sympy.simplify.fu.TR7"]], "tr8() (in module sympy.simplify.fu)": [[218, "sympy.simplify.fu.TR8"]], "tr9() (in module sympy.simplify.fu)": [[218, "sympy.simplify.fu.TR9"]], "trmorrie() (in module sympy.simplify.fu)": [[218, "sympy.simplify.fu.TRmorrie"]], "trpower() (in module sympy.simplify.fu)": [[218, "sympy.simplify.fu.TRpower"]], "fu() (in module sympy.simplify.fu)": [[218, "sympy.simplify.fu.fu"]], "sympy.simplify.hyperexpand_doc": [[219, "module-sympy.simplify.hyperexpand_doc"]], "epath (class in sympy.simplify.epathtools)": [[221, "sympy.simplify.epathtools.EPath"]], "apply() (sympy.simplify.epathtools.epath method)": [[221, "sympy.simplify.epathtools.EPath.apply"]], "besselsimp() (in module sympy.simplify.simplify)": [[221, "sympy.simplify.simplify.besselsimp"]], "collect() (in module sympy.simplify.radsimp)": [[221, "sympy.simplify.radsimp.collect"]], "collect_const() (in module sympy.simplify.radsimp)": [[221, "sympy.simplify.radsimp.collect_const"]], "collect_sqrt() (in module sympy.simplify.radsimp)": [[221, "sympy.simplify.radsimp.collect_sqrt"]], "combsimp() (in module sympy.simplify.combsimp)": [[221, "sympy.simplify.combsimp.combsimp"]], "cse() (in module sympy.simplify.cse_main)": [[221, "sympy.simplify.cse_main.cse"]], "epath() (in module sympy.simplify.epathtools)": [[221, "sympy.simplify.epathtools.epath"]], "fraction() (in module sympy.simplify.radsimp)": [[221, "sympy.simplify.radsimp.fraction"]], "hyperexpand() (in module sympy.simplify.hyperexpand)": [[221, "sympy.simplify.hyperexpand.hyperexpand"]], "hypersimilar() (in module sympy.simplify.simplify)": [[221, "sympy.simplify.simplify.hypersimilar"]], "hypersimp() (in module sympy.simplify.simplify)": [[221, "sympy.simplify.simplify.hypersimp"]], "kroneckersimp() (in module sympy.simplify.simplify)": [[221, "sympy.simplify.simplify.kroneckersimp"]], "logcombine() (in module sympy.simplify.simplify)": [[221, "sympy.simplify.simplify.logcombine"]], "nsimplify() (in module sympy.simplify.simplify)": [[221, "sympy.simplify.simplify.nsimplify"]], "nthroot() (in module sympy.simplify.simplify)": [[221, "sympy.simplify.simplify.nthroot"]], "opt_cse() (in module sympy.simplify.cse_main)": [[221, "sympy.simplify.cse_main.opt_cse"]], "posify() (in module sympy.simplify.simplify)": [[221, "sympy.simplify.simplify.posify"]], "powdenest() (in module sympy.simplify.powsimp)": [[221, "sympy.simplify.powsimp.powdenest"]], "powsimp() (in module sympy.simplify.powsimp)": [[221, "sympy.simplify.powsimp.powsimp"]], "rad_rationalize() (in module sympy.simplify.radsimp)": [[221, "sympy.simplify.radsimp.rad_rationalize"]], "radsimp() (in module sympy.simplify.radsimp)": [[221, "sympy.simplify.radsimp.radsimp"]], "ratsimp() (in module sympy.simplify.ratsimp)": [[221, "sympy.simplify.ratsimp.ratsimp"]], "ratsimpmodprime() (in module sympy.simplify.ratsimp)": [[221, "sympy.simplify.ratsimp.ratsimpmodprime"]], "rcollect() (in module sympy.simplify.radsimp)": [[221, "sympy.simplify.radsimp.rcollect"]], "select() (sympy.simplify.epathtools.epath method)": [[221, "sympy.simplify.epathtools.EPath.select"]], "separatevars() (in module sympy.simplify.simplify)": [[221, "sympy.simplify.simplify.separatevars"]], "simplify() (in module sympy.simplify.simplify)": [[221, "sympy.simplify.simplify.simplify"]], "sqrtdenest() (in module sympy.simplify.sqrtdenest)": [[221, "sympy.simplify.sqrtdenest.sqrtdenest"]], "sympy.simplify.combsimp": [[221, "module-sympy.simplify.combsimp"]], "sympy.simplify.cse_main": [[221, "module-sympy.simplify.cse_main"]], "sympy.simplify.epathtools": [[221, "module-sympy.simplify.epathtools"]], "sympy.simplify.hyperexpand": [[221, "module-sympy.simplify.hyperexpand"]], "sympy.simplify.powsimp": [[221, "module-sympy.simplify.powsimp"]], "sympy.simplify.radsimp": [[221, "module-sympy.simplify.radsimp"]], "sympy.simplify.ratsimp": [[221, "module-sympy.simplify.ratsimp"]], "sympy.simplify.sqrtdenest": [[221, "module-sympy.simplify.sqrtdenest"]], "sympy.simplify.trigsimp": [[221, "module-sympy.simplify.trigsimp"]], "tree_cse() (in module sympy.simplify.cse_main)": [[221, "sympy.simplify.cse_main.tree_cse"]], "trigsimp() (in module sympy.simplify.trigsimp)": [[221, "sympy.simplify.trigsimp.trigsimp"]], "binaryquadratic (class in sympy.solvers.diophantine.diophantine)": [[222, "sympy.solvers.diophantine.diophantine.BinaryQuadratic"]], "cubicthue (class in sympy.solvers.diophantine.diophantine)": [[222, "sympy.solvers.diophantine.diophantine.CubicThue"]], "diophantineequationtype (class in sympy.solvers.diophantine.diophantine)": [[222, "sympy.solvers.diophantine.diophantine.DiophantineEquationType"]], "diophantinesolutionset (class in sympy.solvers.diophantine.diophantine)": [[222, "sympy.solvers.diophantine.diophantine.DiophantineSolutionSet"]], "generalpythagorean (class in sympy.solvers.diophantine.diophantine)": [[222, "sympy.solvers.diophantine.diophantine.GeneralPythagorean"]], "generalsumofevenpowers (class in sympy.solvers.diophantine.diophantine)": [[222, "sympy.solvers.diophantine.diophantine.GeneralSumOfEvenPowers"]], "generalsumofsquares (class in sympy.solvers.diophantine.diophantine)": [[222, "sympy.solvers.diophantine.diophantine.GeneralSumOfSquares"]], "homogeneousgeneralquadratic (class in sympy.solvers.diophantine.diophantine)": [[222, "sympy.solvers.diophantine.diophantine.HomogeneousGeneralQuadratic"]], "homogeneousternaryquadratic (class in sympy.solvers.diophantine.diophantine)": [[222, "sympy.solvers.diophantine.diophantine.HomogeneousTernaryQuadratic"]], "homogeneousternaryquadraticnormal (class in sympy.solvers.diophantine.diophantine)": [[222, "sympy.solvers.diophantine.diophantine.HomogeneousTernaryQuadraticNormal"]], "inhomogeneousgeneralquadratic (class in sympy.solvers.diophantine.diophantine)": [[222, "sympy.solvers.diophantine.diophantine.InhomogeneousGeneralQuadratic"]], "inhomogeneousternaryquadratic (class in sympy.solvers.diophantine.diophantine)": [[222, "sympy.solvers.diophantine.diophantine.InhomogeneousTernaryQuadratic"]], "linear (class in sympy.solvers.diophantine.diophantine)": [[222, "sympy.solvers.diophantine.diophantine.Linear"]], "pqa() (in module sympy.solvers.diophantine.diophantine)": [[222, "sympy.solvers.diophantine.diophantine.PQa"]], "univariate (class in sympy.solvers.diophantine.diophantine)": [[222, "sympy.solvers.diophantine.diophantine.Univariate"]], "base_solution_linear() (in module sympy.solvers.diophantine.diophantine)": [[222, "sympy.solvers.diophantine.diophantine.base_solution_linear"]], "classify_diop() (in module sympy.solvers.diophantine.diophantine)": [[222, "sympy.solvers.diophantine.diophantine.classify_diop"]], "cornacchia() (in module sympy.solvers.diophantine.diophantine)": [[222, "sympy.solvers.diophantine.diophantine.cornacchia"]], "descent() (in module sympy.solvers.diophantine.diophantine)": [[222, "sympy.solvers.diophantine.diophantine.descent"]], "diop_dn() (in module sympy.solvers.diophantine.diophantine)": [[222, "sympy.solvers.diophantine.diophantine.diop_DN"]], "diop_bf_dn() (in module sympy.solvers.diophantine.diophantine)": [[222, "sympy.solvers.diophantine.diophantine.diop_bf_DN"]], "diop_general_pythagorean() (in module sympy.solvers.diophantine.diophantine)": [[222, "sympy.solvers.diophantine.diophantine.diop_general_pythagorean"]], "diop_general_sum_of_even_powers() (in module sympy.solvers.diophantine.diophantine)": [[222, "sympy.solvers.diophantine.diophantine.diop_general_sum_of_even_powers"]], "diop_general_sum_of_squares() (in module sympy.solvers.diophantine.diophantine)": [[222, "sympy.solvers.diophantine.diophantine.diop_general_sum_of_squares"]], "diop_linear() (in module sympy.solvers.diophantine.diophantine)": [[222, "sympy.solvers.diophantine.diophantine.diop_linear"]], "diop_quadratic() (in module sympy.solvers.diophantine.diophantine)": [[222, "sympy.solvers.diophantine.diophantine.diop_quadratic"]], "diop_solve() (in module sympy.solvers.diophantine.diophantine)": [[222, "sympy.solvers.diophantine.diophantine.diop_solve"]], "diop_ternary_quadratic() (in module sympy.solvers.diophantine.diophantine)": [[222, "sympy.solvers.diophantine.diophantine.diop_ternary_quadratic"]], "diop_ternary_quadratic_normal() (in module sympy.solvers.diophantine.diophantine)": [[222, "sympy.solvers.diophantine.diophantine.diop_ternary_quadratic_normal"]], "diophantine() (in module sympy.solvers.diophantine.diophantine)": [[222, "sympy.solvers.diophantine.diophantine.diophantine"]], "divisible() (in module sympy.solvers.diophantine.diophantine)": [[222, "sympy.solvers.diophantine.diophantine.divisible"]], "equivalent() (in module sympy.solvers.diophantine.diophantine)": [[222, "sympy.solvers.diophantine.diophantine.equivalent"]], "find_dn() (in module sympy.solvers.diophantine.diophantine)": [[222, "sympy.solvers.diophantine.diophantine.find_DN"]], "gaussian_reduce() (in module sympy.solvers.diophantine.diophantine)": [[222, "sympy.solvers.diophantine.diophantine.gaussian_reduce"]], "holzer() (in module sympy.solvers.diophantine.diophantine)": [[222, "sympy.solvers.diophantine.diophantine.holzer"]], "ldescent() (in module sympy.solvers.diophantine.diophantine)": [[222, "sympy.solvers.diophantine.diophantine.ldescent"]], "matches() (sympy.solvers.diophantine.diophantine.diophantineequationtype method)": [[222, "sympy.solvers.diophantine.diophantine.DiophantineEquationType.matches"]], "merge_solution() (in module sympy.solvers.diophantine.diophantine)": [[222, "sympy.solvers.diophantine.diophantine.merge_solution"]], "parametrize_ternary_quadratic() (in module sympy.solvers.diophantine.diophantine)": [[222, "sympy.solvers.diophantine.diophantine.parametrize_ternary_quadratic"]], "partition() (in module sympy.solvers.diophantine.diophantine)": [[222, "sympy.solvers.diophantine.diophantine.partition"]], "power_representation() (in module sympy.solvers.diophantine.diophantine)": [[222, "sympy.solvers.diophantine.diophantine.power_representation"]], "prime_as_sum_of_two_squares() (in module sympy.solvers.diophantine.diophantine)": [[222, "sympy.solvers.diophantine.diophantine.prime_as_sum_of_two_squares"]], "reconstruct() (in module sympy.solvers.diophantine.diophantine)": [[222, "sympy.solvers.diophantine.diophantine.reconstruct"]], "sqf_normal() (in module sympy.solvers.diophantine.diophantine)": [[222, "sympy.solvers.diophantine.diophantine.sqf_normal"]], "square_factor() (in module sympy.solvers.diophantine.diophantine)": [[222, "sympy.solvers.diophantine.diophantine.square_factor"]], "sum_of_four_squares() (in module sympy.solvers.diophantine.diophantine)": [[222, "sympy.solvers.diophantine.diophantine.sum_of_four_squares"]], "sum_of_powers() (in module sympy.solvers.diophantine.diophantine)": [[222, "sympy.solvers.diophantine.diophantine.sum_of_powers"]], "sum_of_squares() (in module sympy.solvers.diophantine.diophantine)": [[222, "sympy.solvers.diophantine.diophantine.sum_of_squares"]], "sum_of_three_squares() (in module sympy.solvers.diophantine.diophantine)": [[222, "sympy.solvers.diophantine.diophantine.sum_of_three_squares"]], "transformation_to_dn() (in module sympy.solvers.diophantine.diophantine)": [[222, "sympy.solvers.diophantine.diophantine.transformation_to_DN"]], "transformation_to_normal() (in module sympy.solvers.diophantine.diophantine)": [[222, "sympy.solvers.diophantine.diophantine.transformation_to_normal"]], "reduce_abs_inequalities() (in module sympy.solvers.inequalities)": [[224, "sympy.solvers.inequalities.reduce_abs_inequalities"]], "reduce_abs_inequality() (in module sympy.solvers.inequalities)": [[224, "sympy.solvers.inequalities.reduce_abs_inequality"]], "reduce_inequalities() (in module sympy.solvers.inequalities)": [[224, "sympy.solvers.inequalities.reduce_inequalities"]], "reduce_rational_inequalities() (in module sympy.solvers.inequalities)": [[224, "sympy.solvers.inequalities.reduce_rational_inequalities"]], "solve_poly_inequalities() (in module sympy.solvers.inequalities)": [[224, "sympy.solvers.inequalities.solve_poly_inequalities"]], "solve_poly_inequality() (in module sympy.solvers.inequalities)": [[224, "sympy.solvers.inequalities.solve_poly_inequality"]], "solve_rational_inequalities() (in module sympy.solvers.inequalities)": [[224, "sympy.solvers.inequalities.solve_rational_inequalities"]], "solve_univariate_inequality() (in module sympy.solvers.inequalities)": [[224, "sympy.solvers.inequalities.solve_univariate_inequality"]], "sympy.solvers.inequalities": [[224, "module-sympy.solvers.inequalities"]], "almostlinear (class in sympy.solvers.ode.single)": [[225, "sympy.solvers.ode.single.AlmostLinear"]], "bernoulli (class in sympy.solvers.ode.single)": [[225, "sympy.solvers.ode.single.Bernoulli"]], "factorable (class in sympy.solvers.ode.single)": [[225, "sympy.solvers.ode.single.Factorable"]], "firstexact (class in sympy.solvers.ode.single)": [[225, "sympy.solvers.ode.single.FirstExact"]], "firstlinear (class in sympy.solvers.ode.single)": [[225, "sympy.solvers.ode.single.FirstLinear"]], "homogeneouscoeffbest (class in sympy.solvers.ode.single)": [[225, "sympy.solvers.ode.single.HomogeneousCoeffBest"]], "homogeneouscoeffsubsdepdivindep (class in sympy.solvers.ode.single)": [[225, "sympy.solvers.ode.single.HomogeneousCoeffSubsDepDivIndep"]], "homogeneouscoeffsubsindepdivdep (class in sympy.solvers.ode.single)": [[225, "sympy.solvers.ode.single.HomogeneousCoeffSubsIndepDivDep"]], "liegroup (class in sympy.solvers.ode.single)": [[225, "sympy.solvers.ode.single.LieGroup"]], "linearcoefficients (class in sympy.solvers.ode.single)": [[225, "sympy.solvers.ode.single.LinearCoefficients"]], "liouville (class in sympy.solvers.ode.single)": [[225, "sympy.solvers.ode.single.Liouville"]], "nthalgebraic (class in sympy.solvers.ode.single)": [[225, "sympy.solvers.ode.single.NthAlgebraic"]], "nthlinearconstantcoeffhomogeneous (class in sympy.solvers.ode.single)": [[225, "sympy.solvers.ode.single.NthLinearConstantCoeffHomogeneous"]], "nthlinearconstantcoeffundeterminedcoefficients (class in sympy.solvers.ode.single)": [[225, "sympy.solvers.ode.single.NthLinearConstantCoeffUndeterminedCoefficients"]], "nthlinearconstantcoeffvariationofparameters (class in sympy.solvers.ode.single)": [[225, "sympy.solvers.ode.single.NthLinearConstantCoeffVariationOfParameters"]], "nthlineareulereqhomogeneous (class in sympy.solvers.ode.single)": [[225, "sympy.solvers.ode.single.NthLinearEulerEqHomogeneous"]], "nthlineareulereqnonhomogeneousundeterminedcoefficients (class in sympy.solvers.ode.single)": [[225, "sympy.solvers.ode.single.NthLinearEulerEqNonhomogeneousUndeterminedCoefficients"]], "nthlineareulereqnonhomogeneousvariationofparameters (class in sympy.solvers.ode.single)": [[225, "sympy.solvers.ode.single.NthLinearEulerEqNonhomogeneousVariationOfParameters"]], "nthorderreducible (class in sympy.solvers.ode.single)": [[225, "sympy.solvers.ode.single.NthOrderReducible"]], "rationalriccati (class in sympy.solvers.ode.single)": [[225, "sympy.solvers.ode.single.RationalRiccati"]], "riccatispecial (class in sympy.solvers.ode.single)": [[225, "sympy.solvers.ode.single.RiccatiSpecial"]], "secondhypergeometric (class in sympy.solvers.ode.single)": [[225, "sympy.solvers.ode.single.SecondHypergeometric"]], "secondlinearairy (class in sympy.solvers.ode.single)": [[225, "sympy.solvers.ode.single.SecondLinearAiry"]], "secondlinearbessel (class in sympy.solvers.ode.single)": [[225, "sympy.solvers.ode.single.SecondLinearBessel"]], "separable (class in sympy.solvers.ode.single)": [[225, "sympy.solvers.ode.single.Separable"]], "separablereduced (class in sympy.solvers.ode.single)": [[225, "sympy.solvers.ode.single.SeparableReduced"]], "_handle_integral() (in module sympy.solvers.ode.ode)": [[225, "sympy.solvers.ode.ode._handle_Integral"]], "_linear_2eq_order1_type6() (in module sympy.solvers.ode.ode)": [[225, "sympy.solvers.ode.ode._linear_2eq_order1_type6"]], "_linear_2eq_order1_type7() (in module sympy.solvers.ode.ode)": [[225, "sympy.solvers.ode.ode._linear_2eq_order1_type7"]], "_nonlinear_2eq_order1_type1() (in module sympy.solvers.ode.ode)": [[225, "sympy.solvers.ode.ode._nonlinear_2eq_order1_type1"]], "_nonlinear_2eq_order1_type2() (in module sympy.solvers.ode.ode)": [[225, "sympy.solvers.ode.ode._nonlinear_2eq_order1_type2"]], "_nonlinear_2eq_order1_type3() (in module sympy.solvers.ode.ode)": [[225, "sympy.solvers.ode.ode._nonlinear_2eq_order1_type3"]], "_nonlinear_2eq_order1_type4() (in module sympy.solvers.ode.ode)": [[225, "sympy.solvers.ode.ode._nonlinear_2eq_order1_type4"]], "_nonlinear_2eq_order1_type5() (in module sympy.solvers.ode.ode)": [[225, "sympy.solvers.ode.ode._nonlinear_2eq_order1_type5"]], "_nonlinear_3eq_order1_type1() (in module sympy.solvers.ode.ode)": [[225, "sympy.solvers.ode.ode._nonlinear_3eq_order1_type1"]], "_nonlinear_3eq_order1_type2() (in module sympy.solvers.ode.ode)": [[225, "sympy.solvers.ode.ode._nonlinear_3eq_order1_type2"]], "_nonlinear_3eq_order1_type3() (in module sympy.solvers.ode.ode)": [[225, "sympy.solvers.ode.ode._nonlinear_3eq_order1_type3"]], "_nonlinear_3eq_order1_type4() (in module sympy.solvers.ode.ode)": [[225, "sympy.solvers.ode.ode._nonlinear_3eq_order1_type4"]], "_nonlinear_3eq_order1_type5() (in module sympy.solvers.ode.ode)": [[225, "sympy.solvers.ode.ode._nonlinear_3eq_order1_type5"]], "allhints (in module sympy.solvers.ode)": [[225, "sympy.solvers.ode.allhints"]], "canonical_odes() (in module sympy.solvers.ode.systems)": [[225, "sympy.solvers.ode.systems.canonical_odes"]], "checkinfsol() (in module sympy.solvers.ode)": [[225, "sympy.solvers.ode.checkinfsol"]], "checkodesol() (in module sympy.solvers.ode)": [[225, "sympy.solvers.ode.checkodesol"]], "classify_ode() (in module sympy.solvers.ode)": [[225, "sympy.solvers.ode.classify_ode"]], "compute_m_ybar() (in module sympy.solvers.ode.riccati)": [[225, "sympy.solvers.ode.riccati.compute_m_ybar"]], "constant_renumber() (in module sympy.solvers.ode.ode)": [[225, "sympy.solvers.ode.ode.constant_renumber"]], "constantsimp() (in module sympy.solvers.ode)": [[225, "sympy.solvers.ode.constantsimp"]], "construct_c() (in module sympy.solvers.ode.riccati)": [[225, "sympy.solvers.ode.riccati.construct_c"]], "construct_d() (in module sympy.solvers.ode.riccati)": [[225, "sympy.solvers.ode.riccati.construct_d"]], "dsolve() (in module sympy.solvers.ode)": [[225, "sympy.solvers.ode.dsolve"]], "dsolve_system() (in module sympy.solvers.ode.systems)": [[225, "sympy.solvers.ode.systems.dsolve_system"]], "get_gen_sol_from_part_sol() (in module sympy.solvers.ode.riccati)": [[225, "sympy.solvers.ode.riccati.get_gen_sol_from_part_sol"]], "homogeneous_order() (in module sympy.solvers.ode)": [[225, "sympy.solvers.ode.homogeneous_order"]], "infinitesimals() (in module sympy.solvers.ode)": [[225, "sympy.solvers.ode.infinitesimals"]], "lie_heuristic_abaco1_product() (in module sympy.solvers.ode.lie_group)": [[225, "sympy.solvers.ode.lie_group.lie_heuristic_abaco1_product"]], "lie_heuristic_abaco1_simple() (in module sympy.solvers.ode.lie_group)": [[225, "sympy.solvers.ode.lie_group.lie_heuristic_abaco1_simple"]], "lie_heuristic_abaco2_similar() (in module sympy.solvers.ode.lie_group)": [[225, "sympy.solvers.ode.lie_group.lie_heuristic_abaco2_similar"]], "lie_heuristic_abaco2_unique_general() (in module sympy.solvers.ode.lie_group)": [[225, "sympy.solvers.ode.lie_group.lie_heuristic_abaco2_unique_general"]], "lie_heuristic_abaco2_unique_unknown() (in module sympy.solvers.ode.lie_group)": [[225, "sympy.solvers.ode.lie_group.lie_heuristic_abaco2_unique_unknown"]], "lie_heuristic_bivariate() (in module sympy.solvers.ode.lie_group)": [[225, "sympy.solvers.ode.lie_group.lie_heuristic_bivariate"]], "lie_heuristic_chi() (in module sympy.solvers.ode.lie_group)": [[225, "sympy.solvers.ode.lie_group.lie_heuristic_chi"]], "lie_heuristic_function_sum() (in module sympy.solvers.ode.lie_group)": [[225, "sympy.solvers.ode.lie_group.lie_heuristic_function_sum"]], "lie_heuristic_linear() (in module sympy.solvers.ode.lie_group)": [[225, "sympy.solvers.ode.lie_group.lie_heuristic_linear"]], "linear_ode_to_matrix() (in module sympy.solvers.ode.systems)": [[225, "sympy.solvers.ode.systems.linear_ode_to_matrix"]], "linodesolve() (in module sympy.solvers.ode.systems)": [[225, "sympy.solvers.ode.systems.linodesolve"]], "linodesolve_type() (in module sympy.solvers.ode.systems)": [[225, "sympy.solvers.ode.systems.linodesolve_type"]], "matrix_exp() (in module sympy.solvers.ode.systems)": [[225, "sympy.solvers.ode.systems.matrix_exp"]], "matrix_exp_jordan_form() (in module sympy.solvers.ode.systems)": [[225, "sympy.solvers.ode.systems.matrix_exp_jordan_form"]], "ode_1st_power_series() (in module sympy.solvers.ode.ode)": [[225, "sympy.solvers.ode.ode.ode_1st_power_series"]], "ode_2nd_power_series_ordinary() (in module sympy.solvers.ode.ode)": [[225, "sympy.solvers.ode.ode.ode_2nd_power_series_ordinary"]], "ode_2nd_power_series_regular() (in module sympy.solvers.ode.ode)": [[225, "sympy.solvers.ode.ode.ode_2nd_power_series_regular"]], "ode_sol_simplicity() (in module sympy.solvers.ode.ode)": [[225, "sympy.solvers.ode.ode.ode_sol_simplicity"]], "odesimp() (in module sympy.solvers.ode.ode)": [[225, "sympy.solvers.ode.ode.odesimp"]], "rational_laurent_series() (in module sympy.solvers.ode.riccati)": [[225, "sympy.solvers.ode.riccati.rational_laurent_series"]], "remove_redundant_sols() (in module sympy.solvers.ode.riccati)": [[225, "sympy.solvers.ode.riccati.remove_redundant_sols"]], "riccati_inverse_normal() (in module sympy.solvers.ode.riccati)": [[225, "sympy.solvers.ode.riccati.riccati_inverse_normal"]], "riccati_normal() (in module sympy.solvers.ode.riccati)": [[225, "sympy.solvers.ode.riccati.riccati_normal"]], "riccati_reduced() (in module sympy.solvers.ode.riccati)": [[225, "sympy.solvers.ode.riccati.riccati_reduced"]], "solve_aux_eq() (in module sympy.solvers.ode.riccati)": [[225, "sympy.solvers.ode.riccati.solve_aux_eq"]], "solve_riccati() (in module sympy.solvers.ode.riccati)": [[225, "sympy.solvers.ode.riccati.solve_riccati"]], "sympy.solvers.ode": [[225, "module-sympy.solvers.ode"]], "sympy.solvers.ode.ode": [[225, "module-sympy.solvers.ode.ode"]], "checkpdesol() (in module sympy.solvers.pde)": [[226, "sympy.solvers.pde.checkpdesol"]], "classify_pde() (in module sympy.solvers.pde)": [[226, "sympy.solvers.pde.classify_pde"]], "pde_1st_linear_constant_coeff() (in module sympy.solvers.pde)": [[226, "sympy.solvers.pde.pde_1st_linear_constant_coeff"]], "pde_1st_linear_constant_coeff_homogeneous() (in module sympy.solvers.pde)": [[226, "sympy.solvers.pde.pde_1st_linear_constant_coeff_homogeneous"]], "pde_1st_linear_variable_coeff() (in module sympy.solvers.pde)": [[226, "sympy.solvers.pde.pde_1st_linear_variable_coeff"]], "pde_separate() (in module sympy.solvers.pde)": [[226, "sympy.solvers.pde.pde_separate"]], "pde_separate_add() (in module sympy.solvers.pde)": [[226, "sympy.solvers.pde.pde_separate_add"]], "pde_separate_mul() (in module sympy.solvers.pde)": [[226, "sympy.solvers.pde.pde_separate_mul"]], "pdsolve() (in module sympy.solvers.pde)": [[226, "sympy.solvers.pde.pdsolve"]], "sympy.solvers.pde": [[226, "module-sympy.solvers.pde"]], "checksol() (in module sympy.solvers.solvers)": [[227, "sympy.solvers.solvers.checksol"]], "nsolve() (in module sympy.solvers.solvers)": [[227, "sympy.solvers.solvers.nsolve"]], "ode_order() (in module sympy.solvers.deutils)": [[227, "sympy.solvers.deutils.ode_order"]], "rsolve() (in module sympy.solvers.recurr)": [[227, "sympy.solvers.recurr.rsolve"]], "rsolve_hyper() (in module sympy.solvers.recurr)": [[227, "sympy.solvers.recurr.rsolve_hyper"]], "rsolve_poly() (in module sympy.solvers.recurr)": [[227, "sympy.solvers.recurr.rsolve_poly"]], "rsolve_ratio() (in module sympy.solvers.recurr)": [[227, "sympy.solvers.recurr.rsolve_ratio"]], "solve() (in module sympy.solvers.solvers)": [[227, "sympy.solvers.solvers.solve"]], "solve_linear() (in module sympy.solvers.solvers)": [[227, "sympy.solvers.solvers.solve_linear"]], "solve_linear_system() (in module sympy.solvers.solvers)": [[227, "sympy.solvers.solvers.solve_linear_system"]], "solve_linear_system_lu() (in module sympy.solvers.solvers)": [[227, "sympy.solvers.solvers.solve_linear_system_LU"]], "solve_poly_system() (in module sympy.solvers.polysys)": [[227, "sympy.solvers.polysys.solve_poly_system"]], "solve_triangulated() (in module sympy.solvers.polysys)": [[227, "sympy.solvers.polysys.solve_triangulated"]], "solve_undetermined_coeffs() (in module sympy.solvers.solvers)": [[227, "sympy.solvers.solvers.solve_undetermined_coeffs"]], "sympy.solvers": [[227, "module-sympy.solvers"]], "sympy.solvers.recurr": [[227, "module-sympy.solvers.recurr"]], "unrad() (in module sympy.solvers.solvers)": [[227, "sympy.solvers.solvers.unrad"]], "_is_exponential() (in module sympy.solvers.solveset)": [[228, "sympy.solvers.solveset._is_exponential"]], "_is_logarithmic() (in module sympy.solvers.solveset)": [[228, "sympy.solvers.solveset._is_logarithmic"]], "_solve_exponential() (in module sympy.solvers.solveset)": [[228, "sympy.solvers.solveset._solve_exponential"]], "_solve_logarithm() (in module sympy.solvers.solveset)": [[228, "sympy.solvers.solveset._solve_logarithm"]], "_transolve() (in module sympy.solvers.solveset)": [[228, "sympy.solvers.solveset._transolve"]], "domain_check() (in module sympy.solvers.solveset)": [[228, "sympy.solvers.solveset.domain_check"]], "invert_complex() (in module sympy.solvers.solveset)": [[228, "sympy.solvers.solveset.invert_complex"]], "invert_real() (in module sympy.solvers.solveset)": [[228, "sympy.solvers.solveset.invert_real"]], "linear_eq_to_matrix() (in module sympy.solvers.solveset)": [[228, "sympy.solvers.solveset.linear_eq_to_matrix"]], "linsolve() (in module sympy.solvers.solveset)": [[228, "sympy.solvers.solveset.linsolve"]], "nonlinsolve() (in module sympy.solvers.solveset)": [[228, "sympy.solvers.solveset.nonlinsolve"]], "solveset() (in module sympy.solvers.solveset)": [[228, "sympy.solvers.solveset.solveset"]], "solveset_complex() (in module sympy.solvers.solveset)": [[228, "sympy.solvers.solveset.solveset_complex"]], "solveset_real() (in module sympy.solvers.solveset)": [[228, "sympy.solvers.solveset.solveset_real"]], "solvify() (in module sympy.solvers.solveset)": [[228, "sympy.solvers.solveset.solvify"]], "sympy.solvers.solveset": [[228, "module-sympy.solvers.solveset"]], "arcsin() (in module sympy.stats)": [[229, "sympy.stats.Arcsin"]], "benini() (in module sympy.stats)": [[229, "sympy.stats.Benini"]], "bernoulli() (in module sympy.stats)": [[229, "sympy.stats.Bernoulli"]], "bernoulliprocess (class in sympy.stats)": [[229, "sympy.stats.BernoulliProcess"]], "beta() (in module sympy.stats)": [[229, "sympy.stats.Beta"]], "betabinomial() (in module sympy.stats)": [[229, "sympy.stats.BetaBinomial"]], "betanoncentral() (in module sympy.stats)": [[229, "sympy.stats.BetaNoncentral"]], "betaprime() (in module sympy.stats)": [[229, "sympy.stats.BetaPrime"]], "binomial() (in module sympy.stats)": [[229, "sympy.stats.Binomial"]], "boundedpareto() (in module sympy.stats)": [[229, "sympy.stats.BoundedPareto"]], "cauchy() (in module sympy.stats)": [[229, "sympy.stats.Cauchy"]], "centralmoment (class in sympy.stats)": [[229, "sympy.stats.CentralMoment"]], "chi() (in module sympy.stats)": [[229, "sympy.stats.Chi"]], "chinoncentral() (in module sympy.stats)": [[229, "sympy.stats.ChiNoncentral"]], "chisquared() (in module sympy.stats)": [[229, "sympy.stats.ChiSquared"]], "coin() (in module sympy.stats)": [[229, "sympy.stats.Coin"]], "compounddistribution (class in sympy.stats.compound_rv)": [[229, "sympy.stats.compound_rv.CompoundDistribution"]], "conditionaldomain (class in sympy.stats.rv)": [[229, "sympy.stats.rv.ConditionalDomain"]], "continuousdomain (class in sympy.stats.crv)": [[229, "sympy.stats.crv.ContinuousDomain"]], "continuousmarkovchain (class in sympy.stats)": [[229, "sympy.stats.ContinuousMarkovChain"]], "continuouspspace (class in sympy.stats.crv)": [[229, "sympy.stats.crv.ContinuousPSpace"]], "continuousrv() (in module sympy.stats)": [[229, "sympy.stats.ContinuousRV"]], "covariance (class in sympy.stats)": [[229, "sympy.stats.Covariance"]], "crosscovariancematrix (class in sympy.stats)": [[229, "sympy.stats.CrossCovarianceMatrix"]], "dagum() (in module sympy.stats)": [[229, "sympy.stats.Dagum"]], "die() (in module sympy.stats)": [[229, "sympy.stats.Die"]], "diepspace (class in sympy.stats.frv_types)": [[229, "sympy.stats.frv_types.DiePSpace"]], "discretemarkovchain (class in sympy.stats)": [[229, "sympy.stats.DiscreteMarkovChain"]], "discreteuniform() (in module sympy.stats)": [[229, "sympy.stats.DiscreteUniform"]], "e() (in module sympy.stats)": [[229, "sympy.stats.E"]], "erlang() (in module sympy.stats)": [[229, "sympy.stats.Erlang"]], "exgaussian() (in module sympy.stats)": [[229, "sympy.stats.ExGaussian"]], "expectation (class in sympy.stats)": [[229, "sympy.stats.Expectation"]], "expectationmatrix (class in sympy.stats)": [[229, "sympy.stats.ExpectationMatrix"]], "exponential() (in module sympy.stats)": [[229, "sympy.stats.Exponential"]], "fdistribution() (in module sympy.stats)": [[229, "sympy.stats.FDistribution"]], "finitedomain (class in sympy.stats.frv)": [[229, "sympy.stats.frv.FiniteDomain"]], "finitepspace (class in sympy.stats.frv)": [[229, "sympy.stats.frv.FinitePSpace"]], "finiterv() (in module sympy.stats)": [[229, "sympy.stats.FiniteRV"]], "fisherz() (in module sympy.stats)": [[229, "sympy.stats.FisherZ"]], "frechet() (in module sympy.stats)": [[229, "sympy.stats.Frechet"]], "gamma() (in module sympy.stats)": [[229, "sympy.stats.Gamma"]], "gammainverse() (in module sympy.stats)": [[229, "sympy.stats.GammaInverse"]], "gammaprocess (class in sympy.stats)": [[229, "sympy.stats.GammaProcess"]], "generalizedmultivariateloggamma() (in module sympy.stats)": [[229, "sympy.stats.GeneralizedMultivariateLogGamma"]], "generalizedmultivariateloggammaomega() (in module sympy.stats)": [[229, "sympy.stats.GeneralizedMultivariateLogGammaOmega"]], "geometric() (in module sympy.stats)": [[229, "sympy.stats.Geometric"]], "gompertz() (in module sympy.stats)": [[229, "sympy.stats.Gompertz"]], "gumbel() (in module sympy.stats)": [[229, "sympy.stats.Gumbel"]], "hermite() (in module sympy.stats)": [[229, "sympy.stats.Hermite"]], "hypergeometric() (in module sympy.stats)": [[229, "sympy.stats.Hypergeometric"]], "jointrv() (in module sympy.stats)": [[229, "sympy.stats.JointRV"]], "kumaraswamy() (in module sympy.stats)": [[229, "sympy.stats.Kumaraswamy"]], "laplace() (in module sympy.stats)": [[229, "sympy.stats.Laplace"]], "levy() (in module sympy.stats)": [[229, "sympy.stats.Levy"]], "loglogistic() (in module sympy.stats)": [[229, "sympy.stats.LogLogistic"]], "lognormal() (in module sympy.stats)": [[229, "sympy.stats.LogNormal"]], "logarithmic() (in module sympy.stats)": [[229, "sympy.stats.Logarithmic"]], "logistic() (in module sympy.stats)": [[229, "sympy.stats.Logistic"]], "lomax() (in module sympy.stats)": [[229, "sympy.stats.Lomax"]], "matrixgamma() (in module sympy.stats)": [[229, "sympy.stats.MatrixGamma"]], "matrixnormal() (in module sympy.stats)": [[229, "sympy.stats.MatrixNormal"]], "maxwell() (in module sympy.stats)": [[229, "sympy.stats.Maxwell"]], "moment (class in sympy.stats)": [[229, "sympy.stats.Moment"]], "moyal() (in module sympy.stats)": [[229, "sympy.stats.Moyal"]], "multinomial() (in module sympy.stats)": [[229, "sympy.stats.Multinomial"]], "multivariatebeta() (in module sympy.stats)": [[229, "sympy.stats.MultivariateBeta"]], "multivariateewens() (in module sympy.stats)": [[229, "sympy.stats.MultivariateEwens"]], "multivariatelaplace() (in module sympy.stats)": [[229, "sympy.stats.MultivariateLaplace"]], "multivariatenormal() (in module sympy.stats)": [[229, "sympy.stats.MultivariateNormal"]], "multivariatet() (in module sympy.stats)": [[229, "sympy.stats.MultivariateT"]], "nakagami() (in module sympy.stats)": [[229, "sympy.stats.Nakagami"]], "negativebinomial() (in module sympy.stats)": [[229, "sympy.stats.NegativeBinomial"]], "negativemultinomial() (in module sympy.stats)": [[229, "sympy.stats.NegativeMultinomial"]], "normal() (in module sympy.stats)": [[229, "sympy.stats.Normal"]], "normalgamma() (in module sympy.stats)": [[229, "sympy.stats.NormalGamma"]], "normalpspace (class in sympy.stats.crv_types)": [[229, "sympy.stats.crv_types.NormalPSpace"]], "p() (in module sympy.stats)": [[229, "sympy.stats.P"]], "pspace (class in sympy.stats.rv)": [[229, "sympy.stats.rv.PSpace"]], "pareto() (in module sympy.stats)": [[229, "sympy.stats.Pareto"]], "poisson() (in module sympy.stats)": [[229, "sympy.stats.Poisson"]], "poissonprocess (class in sympy.stats)": [[229, "sympy.stats.PoissonProcess"]], "powerfunction() (in module sympy.stats)": [[229, "sympy.stats.PowerFunction"]], "probability (class in sympy.stats)": [[229, "sympy.stats.Probability"]], "productdomain (class in sympy.stats.rv)": [[229, "sympy.stats.rv.ProductDomain"]], "productpspace (class in sympy.stats.rv)": [[229, "sympy.stats.rv.ProductPSpace"]], "quadraticu() (in module sympy.stats)": [[229, "sympy.stats.QuadraticU"]], "rademacher() (in module sympy.stats)": [[229, "sympy.stats.Rademacher"]], "raisedcosine() (in module sympy.stats)": [[229, "sympy.stats.RaisedCosine"]], "randomdomain (class in sympy.stats.rv)": [[229, "sympy.stats.rv.RandomDomain"]], "randomsymbol (class in sympy.stats.rv)": [[229, "sympy.stats.rv.RandomSymbol"]], "rayleigh() (in module sympy.stats)": [[229, "sympy.stats.Rayleigh"]], "reciprocal() (in module sympy.stats)": [[229, "sympy.stats.Reciprocal"]], "shiftedgompertz() (in module sympy.stats)": [[229, "sympy.stats.ShiftedGompertz"]], "singledomain (class in sympy.stats.rv)": [[229, "sympy.stats.rv.SingleDomain"]], "singlepspace (class in sympy.stats.rv)": [[229, "sympy.stats.rv.SinglePSpace"]], "skellam() (in module sympy.stats)": [[229, "sympy.stats.Skellam"]], "studentt() (in module sympy.stats)": [[229, "sympy.stats.StudentT"]], "trapezoidal() (in module sympy.stats)": [[229, "sympy.stats.Trapezoidal"]], "triangular() (in module sympy.stats)": [[229, "sympy.stats.Triangular"]], "uniform() (in module sympy.stats)": [[229, "sympy.stats.Uniform"]], "uniformsum() (in module sympy.stats)": [[229, "sympy.stats.UniformSum"]], "variance (class in sympy.stats)": [[229, "sympy.stats.Variance"]], "variancematrix (class in sympy.stats)": [[229, "sympy.stats.VarianceMatrix"]], "vonmises() (in module sympy.stats)": [[229, "sympy.stats.VonMises"]], "wald() (in module sympy.stats)": [[229, "sympy.stats.Wald"]], "weibull() (in module sympy.stats)": [[229, "sympy.stats.Weibull"]], "wienerprocess (class in sympy.stats)": [[229, "sympy.stats.WienerProcess"]], "wignersemicircle() (in module sympy.stats)": [[229, "sympy.stats.WignerSemicircle"]], "wishart() (in module sympy.stats)": [[229, "sympy.stats.Wishart"]], "yulesimon() (in module sympy.stats)": [[229, "sympy.stats.YuleSimon"]], "zeta() (in module sympy.stats)": [[229, "sympy.stats.Zeta"]], "absorbing_probabilities() (sympy.stats.discretemarkovchain method)": [[229, "sympy.stats.DiscreteMarkovChain.absorbing_probabilities"]], "canonical_form() (sympy.stats.discretemarkovchain method)": [[229, "sympy.stats.DiscreteMarkovChain.canonical_form"]], "cmoment() (in module sympy.stats)": [[229, "sympy.stats.cmoment"]], "communication_classes() (sympy.stats.discretemarkovchain method)": [[229, "sympy.stats.DiscreteMarkovChain.communication_classes"]], "correlation() (in module sympy.stats)": [[229, "sympy.stats.correlation"]], "coskewness() (in module sympy.stats)": [[229, "sympy.stats.coskewness"]], "covariance() (in module sympy.stats)": [[229, "sympy.stats.covariance"]], "decompose() (sympy.stats.discretemarkovchain method)": [[229, "sympy.stats.DiscreteMarkovChain.decompose"]], "density() (in module sympy.stats)": [[229, "sympy.stats.density"]], "entropy() (in module sympy.stats)": [[229, "sympy.stats.entropy"]], "expectation() (sympy.stats.bernoulliprocess method)": [[229, "sympy.stats.BernoulliProcess.expectation"]], "factorial_moment() (in module sympy.stats)": [[229, "sympy.stats.factorial_moment"]], "fixed_row_vector() (sympy.stats.discretemarkovchain method)": [[229, "sympy.stats.DiscreteMarkovChain.fixed_row_vector"]], "fundamental_matrix() (sympy.stats.discretemarkovchain method)": [[229, "sympy.stats.DiscreteMarkovChain.fundamental_matrix"]], "given() (in module sympy.stats)": [[229, "sympy.stats.given"]], "kurtosis() (in module sympy.stats)": [[229, "sympy.stats.kurtosis"]], "limiting_distribution (sympy.stats.discretemarkovchain property)": [[229, "sympy.stats.DiscreteMarkovChain.limiting_distribution"]], "marginal_distribution() (in module sympy.stats)": [[229, "sympy.stats.marginal_distribution"]], "median() (in module sympy.stats)": [[229, "sympy.stats.median"]], "moment() (in module sympy.stats)": [[229, "sympy.stats.moment"]], "probability() (sympy.stats.bernoulliprocess method)": [[229, "sympy.stats.BernoulliProcess.probability"]], "pspace() (in module sympy.stats.rv)": [[229, "sympy.stats.rv.pspace"]], "quantile() (in module sympy.stats)": [[229, "sympy.stats.quantile"]], "random_symbols() (in module sympy.stats.rv)": [[229, "sympy.stats.rv.random_symbols"]], "rs_swap() (in module sympy.stats.rv)": [[229, "sympy.stats.rv.rs_swap"]], "sample() (in module sympy.stats)": [[229, "sympy.stats.sample"]], "sample() (sympy.stats.discretemarkovchain method)": [[229, "sympy.stats.DiscreteMarkovChain.sample"]], "sample_iter() (in module sympy.stats)": [[229, "sympy.stats.sample_iter"]], "sampling_e() (in module sympy.stats.rv)": [[229, "sympy.stats.rv.sampling_E"]], "sampling_p() (in module sympy.stats.rv)": [[229, "sympy.stats.rv.sampling_P"]], "sampling_density() (in module sympy.stats.rv)": [[229, "sympy.stats.rv.sampling_density"]], "skewness() (in module sympy.stats)": [[229, "sympy.stats.skewness"]], "stationary_distribution() (sympy.stats.discretemarkovchain method)": [[229, "sympy.stats.DiscreteMarkovChain.stationary_distribution"]], "std() (in module sympy.stats)": [[229, "sympy.stats.std"]], "sympy.stats": [[229, "module-sympy.stats"]], "sympy.stats.die() (in module sympy.stats.crv_types)": [[229, "sympy.stats.crv_types.sympy.stats.Die"]], "sympy.stats.normal() (in module sympy.stats.crv_types)": [[229, "sympy.stats.crv_types.sympy.stats.Normal"]], "sympy.stats.crv": [[229, "module-sympy.stats.crv"]], "sympy.stats.crv_types": [[229, "module-sympy.stats.crv_types"]], "sympy.stats.frv": [[229, "module-sympy.stats.frv"]], "sympy.stats.frv_types": [[229, "module-sympy.stats.frv_types"]], "sympy.stats.rv": [[229, "module-sympy.stats.rv"]], "transition_probabilities (sympy.stats.discretemarkovchain property)": [[229, "sympy.stats.DiscreteMarkovChain.transition_probabilities"]], "variance() (in module sympy.stats)": [[229, "sympy.stats.variance"]], "where() (in module sympy.stats)": [[229, "sympy.stats.where"]], "immutabledensendimarray (class in sympy.tensor.array)": [[230, "sympy.tensor.array.ImmutableDenseNDimArray"]], "immutablesparsendimarray (class in sympy.tensor.array)": [[230, "sympy.tensor.array.ImmutableSparseNDimArray"]], "mutabledensendimarray (class in sympy.tensor.array)": [[230, "sympy.tensor.array.MutableDenseNDimArray"]], "mutablesparsendimarray (class in sympy.tensor.array)": [[230, "sympy.tensor.array.MutableSparseNDimArray"]], "derive_by_array() (in module sympy.tensor.array)": [[230, "sympy.tensor.array.derive_by_array"]], "permutedims() (in module sympy.tensor.array)": [[230, "sympy.tensor.array.permutedims"]], "sympy.tensor.array": [[230, "module-sympy.tensor.array"]], "tensorcontraction() (in module sympy.tensor.array)": [[230, "sympy.tensor.array.tensorcontraction"]], "tensordiagonal() (in module sympy.tensor.array)": [[230, "sympy.tensor.array.tensordiagonal"]], "tensorproduct() (in module sympy.tensor.array)": [[230, "sympy.tensor.array.tensorproduct"]], "sympy.tensor.array.expressions": [[231, "module-sympy.tensor.array.expressions"]], "sympy.tensor": [[232, "module-sympy.tensor"]], "get_contraction_structure() (in module sympy.tensor.index_methods)": [[233, "sympy.tensor.index_methods.get_contraction_structure"]], "get_indices() (in module sympy.tensor.index_methods)": [[233, "sympy.tensor.index_methods.get_indices"]], "sympy.tensor.index_methods": [[233, "module-sympy.tensor.index_methods"]], "idx (class in sympy.tensor.indexed)": [[234, "sympy.tensor.indexed.Idx"]], "indexed (class in sympy.tensor.indexed)": [[234, "sympy.tensor.indexed.Indexed"]], "indexedbase (class in sympy.tensor.indexed)": [[234, "sympy.tensor.indexed.IndexedBase"]], "base (sympy.tensor.indexed.indexed property)": [[234, "sympy.tensor.indexed.Indexed.base"]], "indices (sympy.tensor.indexed.indexed property)": [[234, "sympy.tensor.indexed.Indexed.indices"]], "label (sympy.tensor.indexed.idx property)": [[234, "sympy.tensor.indexed.Idx.label"]], "label (sympy.tensor.indexed.indexedbase property)": [[234, "sympy.tensor.indexed.IndexedBase.label"]], "lower (sympy.tensor.indexed.idx property)": [[234, "sympy.tensor.indexed.Idx.lower"]], "offset (sympy.tensor.indexed.indexedbase property)": [[234, "sympy.tensor.indexed.IndexedBase.offset"]], "ranges (sympy.tensor.indexed.indexed property)": [[234, "sympy.tensor.indexed.Indexed.ranges"]], "rank (sympy.tensor.indexed.indexed property)": [[234, "sympy.tensor.indexed.Indexed.rank"]], "shape (sympy.tensor.indexed.indexed property)": [[234, "sympy.tensor.indexed.Indexed.shape"]], "shape (sympy.tensor.indexed.indexedbase property)": [[234, "sympy.tensor.indexed.IndexedBase.shape"]], "strides (sympy.tensor.indexed.indexedbase property)": [[234, "sympy.tensor.indexed.IndexedBase.strides"]], "sympy.tensor.indexed": [[234, "module-sympy.tensor.indexed"]], "upper (sympy.tensor.indexed.idx property)": [[234, "sympy.tensor.indexed.Idx.upper"]], "tensadd (class in sympy.tensor.tensor)": [[235, "sympy.tensor.tensor.TensAdd"]], "tensexpr (class in sympy.tensor.tensor)": [[235, "sympy.tensor.tensor.TensExpr"]], "tensmul (class in sympy.tensor.tensor)": [[235, "sympy.tensor.tensor.TensMul"]], "tensorhead (class in sympy.tensor.tensor)": [[235, "sympy.tensor.tensor.TensorHead"]], "tensorindex (class in sympy.tensor.tensor)": [[235, "sympy.tensor.tensor.TensorIndex"]], "tensorindextype (class in sympy.tensor.tensor)": [[235, "sympy.tensor.tensor.TensorIndexType"]], "tensorsymmetry (class in sympy.tensor.tensor)": [[235, "sympy.tensor.tensor.TensorSymmetry"]], "tensortype (class in sympy.tensor.tensor)": [[235, "sympy.tensor.tensor.TensorType"]], "_tensormanager (class in sympy.tensor.tensor)": [[235, "sympy.tensor.tensor._TensorManager"]], "canon_bp() (in module sympy.tensor.tensor)": [[235, "sympy.tensor.tensor.canon_bp"]], "canon_bp() (sympy.tensor.tensor.tensadd method)": [[235, "sympy.tensor.tensor.TensAdd.canon_bp"]], "canon_bp() (sympy.tensor.tensor.tensmul method)": [[235, "sympy.tensor.tensor.TensMul.canon_bp"]], "clear() (sympy.tensor.tensor._tensormanager method)": [[235, "sympy.tensor.tensor._TensorManager.clear"]], "comm_i2symbol() (sympy.tensor.tensor._tensormanager method)": [[235, "sympy.tensor.tensor._TensorManager.comm_i2symbol"]], "comm_symbols2i() (sympy.tensor.tensor._tensormanager method)": [[235, "sympy.tensor.tensor._TensorManager.comm_symbols2i"]], "commutes_with() (sympy.tensor.tensor.tensorhead method)": [[235, "sympy.tensor.tensor.TensorHead.commutes_with"]], "contract_metric() (sympy.tensor.tensor.tensadd method)": [[235, "sympy.tensor.tensor.TensAdd.contract_metric"]], "contract_metric() (sympy.tensor.tensor.tensmul method)": [[235, "sympy.tensor.tensor.TensMul.contract_metric"]], "direct_product() (sympy.tensor.tensor.tensorsymmetry class method)": [[235, "sympy.tensor.tensor.TensorSymmetry.direct_product"]], "fully_symmetric() (sympy.tensor.tensor.tensorsymmetry class method)": [[235, "sympy.tensor.tensor.TensorSymmetry.fully_symmetric"]], "get_comm() (sympy.tensor.tensor._tensormanager method)": [[235, "sympy.tensor.tensor._TensorManager.get_comm"]], "get_free_indices() (sympy.tensor.tensor.tensmul method)": [[235, "sympy.tensor.tensor.TensMul.get_free_indices"]], "get_indices() (sympy.tensor.tensor.tensmul method)": [[235, "sympy.tensor.tensor.TensMul.get_indices"]], "get_matrix() (sympy.tensor.tensor.tensexpr method)": [[235, "sympy.tensor.tensor.TensExpr.get_matrix"]], "no_symmetry() (sympy.tensor.tensor.tensorsymmetry class method)": [[235, "sympy.tensor.tensor.TensorSymmetry.no_symmetry"]], "perm2tensor() (sympy.tensor.tensor.tensmul method)": [[235, "sympy.tensor.tensor.TensMul.perm2tensor"]], "replace_with_arrays() (sympy.tensor.tensor.tensexpr method)": [[235, "sympy.tensor.tensor.TensExpr.replace_with_arrays"]], "riemann() (sympy.tensor.tensor.tensorsymmetry class method)": [[235, "sympy.tensor.tensor.TensorSymmetry.riemann"]], "riemann_cyclic() (in module sympy.tensor.tensor)": [[235, "sympy.tensor.tensor.riemann_cyclic"]], "riemann_cyclic_replace() (in module sympy.tensor.tensor)": [[235, "sympy.tensor.tensor.riemann_cyclic_replace"]], "set_comm() (sympy.tensor.tensor._tensormanager method)": [[235, "sympy.tensor.tensor._TensorManager.set_comm"]], "set_comms() (sympy.tensor.tensor._tensormanager method)": [[235, "sympy.tensor.tensor._TensorManager.set_comms"]], "sorted_components() (sympy.tensor.tensor.tensmul method)": [[235, "sympy.tensor.tensor.TensMul.sorted_components"]], "split() (sympy.tensor.tensor.tensmul method)": [[235, "sympy.tensor.tensor.TensMul.split"]], "sympy.tensor.tensor": [[235, "module-sympy.tensor.tensor"]], "tensor_heads() (in module sympy.tensor.tensor)": [[235, "sympy.tensor.tensor.tensor_heads"]], "tensorsymmetry() (in module sympy.tensor.tensor)": [[235, "sympy.tensor.tensor.tensorsymmetry"]], "partialderivative (class in sympy.tensor.toperators)": [[236, "sympy.tensor.toperators.PartialDerivative"]], "sympy.tensor.toperators": [[236, "module-sympy.tensor.toperators"]], "sympy.testing": [[237, "module-sympy.testing"]], "skip() (in module sympy.testing.pytest)": [[238, "sympy.testing.pytest.SKIP"]], "nocache_fail() (in module sympy.testing.pytest)": [[238, "sympy.testing.pytest.nocache_fail"]], "raises() (in module sympy.testing.pytest)": [[238, "sympy.testing.pytest.raises"]], "sympy.testing.pytest": [[238, "module-sympy.testing.pytest"]], "warns() (in module sympy.testing.pytest)": [[238, "sympy.testing.pytest.warns"]], "warns_deprecated_sympy() (in module sympy.testing.pytest)": [[238, "sympy.testing.pytest.warns_deprecated_sympy"]], "sympy.testing.randtest": [[239, "module-sympy.testing.randtest"]], "pytestreporter (class in sympy.testing.runtests)": [[240, "sympy.testing.runtests.PyTestReporter"]], "reporter (class in sympy.testing.runtests)": [[240, "sympy.testing.runtests.Reporter"]], "sympydoctestfinder (class in sympy.testing.runtests)": [[240, "sympy.testing.runtests.SymPyDocTestFinder"]], "sympydoctestrunner (class in sympy.testing.runtests)": [[240, "sympy.testing.runtests.SymPyDocTestRunner"]], "sympyoutputchecker (class in sympy.testing.runtests)": [[240, "sympy.testing.runtests.SymPyOutputChecker"]], "sympytestresults (class in sympy.testing.runtests)": [[240, "sympy.testing.runtests.SymPyTestResults"]], "attempted (sympy.testing.runtests.sympytestresults attribute)": [[240, "sympy.testing.runtests.SymPyTestResults.attempted"]], "check_output() (sympy.testing.runtests.sympyoutputchecker method)": [[240, "sympy.testing.runtests.SymPyOutputChecker.check_output"]], "convert_to_native_paths() (in module sympy.testing.runtests)": [[240, "sympy.testing.runtests.convert_to_native_paths"]], "doctest() (in module sympy.testing.runtests)": [[240, "sympy.testing.runtests.doctest"]], "failed (sympy.testing.runtests.sympytestresults attribute)": [[240, "sympy.testing.runtests.SymPyTestResults.failed"]], "get_sympy_dir() (in module sympy.testing.runtests)": [[240, "sympy.testing.runtests.get_sympy_dir"]], "raise_on_deprecated() (in module sympy.testing.runtests)": [[240, "sympy.testing.runtests.raise_on_deprecated"]], "run() (sympy.testing.runtests.sympydoctestrunner method)": [[240, "sympy.testing.runtests.SymPyDocTestRunner.run"]], "run_all_tests() (in module sympy.testing.runtests)": [[240, "sympy.testing.runtests.run_all_tests"]], "run_in_subprocess_with_hash_randomization() (in module sympy.testing.runtests)": [[240, "sympy.testing.runtests.run_in_subprocess_with_hash_randomization"]], "split_list() (in module sympy.testing.runtests)": [[240, "sympy.testing.runtests.split_list"]], "sympy.testing.runtests": [[240, "module-sympy.testing.runtests"]], "sympytestfile() (in module sympy.testing.runtests)": [[240, "sympy.testing.runtests.sympytestfile"]], "test() (in module sympy.testing.runtests)": [[240, "sympy.testing.runtests.test"]], "write() (sympy.testing.runtests.pytestreporter method)": [[240, "sympy.testing.runtests.PyTestReporter.write"]], "codewrapper (class in sympy.utilities.autowrap)": [[241, "sympy.utilities.autowrap.CodeWrapper"]], "cythoncodewrapper (class in sympy.utilities.autowrap)": [[241, "sympy.utilities.autowrap.CythonCodeWrapper"]], "dummywrapper (class in sympy.utilities.autowrap)": [[241, "sympy.utilities.autowrap.DummyWrapper"]], "f2pycodewrapper (class in sympy.utilities.autowrap)": [[241, "sympy.utilities.autowrap.F2PyCodeWrapper"]], "ufuncifycodewrapper (class in sympy.utilities.autowrap)": [[241, "sympy.utilities.autowrap.UfuncifyCodeWrapper"]], "autowrap() (in module sympy.utilities.autowrap)": [[241, "sympy.utilities.autowrap.autowrap"]], "binary_function() (in module sympy.utilities.autowrap)": [[241, "sympy.utilities.autowrap.binary_function"]], "dump_c() (sympy.utilities.autowrap.ufuncifycodewrapper method)": [[241, "sympy.utilities.autowrap.UfuncifyCodeWrapper.dump_c"]], "dump_pyx() (sympy.utilities.autowrap.cythoncodewrapper method)": [[241, "sympy.utilities.autowrap.CythonCodeWrapper.dump_pyx"]], "sympy.utilities.autowrap": [[241, "module-sympy.utilities.autowrap"]], "ufuncify() (in module sympy.utilities.autowrap)": [[241, "sympy.utilities.autowrap.ufuncify"]], "argument (class in sympy.utilities.codegen)": [[242, "sympy.utilities.codegen.Argument"]], "ccodegen (class in sympy.utilities.codegen)": [[242, "sympy.utilities.codegen.CCodeGen"]], "codegen (class in sympy.utilities.codegen)": [[242, "sympy.utilities.codegen.CodeGen"]], "datatype (class in sympy.utilities.codegen)": [[242, "sympy.utilities.codegen.DataType"]], "fcodegen (class in sympy.utilities.codegen)": [[242, "sympy.utilities.codegen.FCodeGen"]], "juliacodegen (class in sympy.utilities.codegen)": [[242, "sympy.utilities.codegen.JuliaCodeGen"]], "octavecodegen (class in sympy.utilities.codegen)": [[242, "sympy.utilities.codegen.OctaveCodeGen"]], "outputargument (class in sympy.utilities.codegen)": [[242, "sympy.utilities.codegen.OutputArgument"]], "result (class in sympy.utilities.codegen)": [[242, "sympy.utilities.codegen.Result"]], "routine (class in sympy.utilities.codegen)": [[242, "sympy.utilities.codegen.Routine"]], "rustcodegen (class in sympy.utilities.codegen)": [[242, "sympy.utilities.codegen.RustCodeGen"]], "codegen() (in module sympy.utilities.codegen)": [[242, "sympy.utilities.codegen.codegen"]], "dump_c() (sympy.utilities.codegen.ccodegen method)": [[242, "sympy.utilities.codegen.CCodeGen.dump_c"]], "dump_code() (sympy.utilities.codegen.codegen method)": [[242, "sympy.utilities.codegen.CodeGen.dump_code"]], "dump_f95() (sympy.utilities.codegen.fcodegen method)": [[242, "sympy.utilities.codegen.FCodeGen.dump_f95"]], "dump_h() (sympy.utilities.codegen.ccodegen method)": [[242, "sympy.utilities.codegen.CCodeGen.dump_h"]], "dump_h() (sympy.utilities.codegen.fcodegen method)": [[242, "sympy.utilities.codegen.FCodeGen.dump_h"]], "dump_jl() (sympy.utilities.codegen.juliacodegen method)": [[242, "sympy.utilities.codegen.JuliaCodeGen.dump_jl"]], "dump_m() (sympy.utilities.codegen.octavecodegen method)": [[242, "sympy.utilities.codegen.OctaveCodeGen.dump_m"]], "dump_rs() (sympy.utilities.codegen.rustcodegen method)": [[242, "sympy.utilities.codegen.RustCodeGen.dump_rs"]], "get_default_datatype() (in module sympy.utilities.codegen)": [[242, "sympy.utilities.codegen.get_default_datatype"]], "get_interface() (sympy.utilities.codegen.fcodegen method)": [[242, "sympy.utilities.codegen.FCodeGen.get_interface"]], "get_prototype() (sympy.utilities.codegen.ccodegen method)": [[242, "sympy.utilities.codegen.CCodeGen.get_prototype"]], "get_prototype() (sympy.utilities.codegen.rustcodegen method)": [[242, "sympy.utilities.codegen.RustCodeGen.get_prototype"]], "make_routine() (in module sympy.utilities.codegen)": [[242, "sympy.utilities.codegen.make_routine"]], "result_variables (sympy.utilities.codegen.routine property)": [[242, "sympy.utilities.codegen.Routine.result_variables"]], "routine() (sympy.utilities.codegen.codegen method)": [[242, "sympy.utilities.codegen.CodeGen.routine"]], "routine() (sympy.utilities.codegen.juliacodegen method)": [[242, "sympy.utilities.codegen.JuliaCodeGen.routine"]], "routine() (sympy.utilities.codegen.octavecodegen method)": [[242, "sympy.utilities.codegen.OctaveCodeGen.routine"]], "routine() (sympy.utilities.codegen.rustcodegen method)": [[242, "sympy.utilities.codegen.RustCodeGen.routine"]], "sympy.utilities.codegen": [[242, "module-sympy.utilities.codegen"]], "variables (sympy.utilities.codegen.routine property)": [[242, "sympy.utilities.codegen.Routine.variables"]], "write() (sympy.utilities.codegen.codegen method)": [[242, "sympy.utilities.codegen.CodeGen.write"]], "conserve_mpmath_dps() (in module sympy.utilities.decorator)": [[243, "sympy.utilities.decorator.conserve_mpmath_dps"]], "deprecated() (in module sympy.utilities.decorator)": [[243, "sympy.utilities.decorator.deprecated"]], "doctest_depends_on() (in module sympy.utilities.decorator)": [[243, "sympy.utilities.decorator.doctest_depends_on"]], "memoize_property() (in module sympy.utilities.decorator)": [[243, "sympy.utilities.decorator.memoize_property"]], "no_attrs_in_subclass (class in sympy.utilities.decorator)": [[243, "sympy.utilities.decorator.no_attrs_in_subclass"]], "public() (in module sympy.utilities.decorator)": [[243, "sympy.utilities.decorator.public"]], "sympy.utilities.decorator": [[243, "module-sympy.utilities.decorator"]], "threaded() (in module sympy.utilities.decorator)": [[243, "sympy.utilities.decorator.threaded"]], "threaded_factory() (in module sympy.utilities.decorator)": [[243, "sympy.utilities.decorator.threaded_factory"]], "xthreaded() (in module sympy.utilities.decorator)": [[243, "sympy.utilities.decorator.xthreaded"]], "multisetpartitiontraverser (class in sympy.utilities.enumerative)": [[244, "sympy.utilities.enumerative.MultisetPartitionTraverser"]], "count_partitions() (sympy.utilities.enumerative.multisetpartitiontraverser method)": [[244, "sympy.utilities.enumerative.MultisetPartitionTraverser.count_partitions"]], "enum_all() (sympy.utilities.enumerative.multisetpartitiontraverser method)": [[244, "sympy.utilities.enumerative.MultisetPartitionTraverser.enum_all"]], "enum_large() (sympy.utilities.enumerative.multisetpartitiontraverser method)": [[244, "sympy.utilities.enumerative.MultisetPartitionTraverser.enum_large"]], "enum_range() (sympy.utilities.enumerative.multisetpartitiontraverser method)": [[244, "sympy.utilities.enumerative.MultisetPartitionTraverser.enum_range"]], "enum_small() (sympy.utilities.enumerative.multisetpartitiontraverser method)": [[244, "sympy.utilities.enumerative.MultisetPartitionTraverser.enum_small"]], "factoring_visitor() (in module sympy.utilities.enumerative)": [[244, "sympy.utilities.enumerative.factoring_visitor"]], "list_visitor() (in module sympy.utilities.enumerative)": [[244, "sympy.utilities.enumerative.list_visitor"]], "multiset_partitions_taocp() (in module sympy.utilities.enumerative)": [[244, "sympy.utilities.enumerative.multiset_partitions_taocp"]], "sympy.utilities.enumerative": [[244, "module-sympy.utilities.enumerative"]], "sympydeprecationwarning": [[245, "sympy.utilities.exceptions.SymPyDeprecationWarning"]], "ignore_warnings() (in module sympy.utilities.exceptions)": [[245, "sympy.utilities.exceptions.ignore_warnings"]], "sympy.utilities.exceptions": [[245, "module-sympy.utilities.exceptions"]], "sympy_deprecation_warning() (in module sympy.utilities.exceptions)": [[245, "sympy.utilities.exceptions.sympy_deprecation_warning"]], "sympy.utilities": [[246, "module-sympy.utilities"]], "notiterable (class in sympy.utilities.iterables)": [[247, "sympy.utilities.iterables.NotIterable"]], "binary_partitions() (in module sympy.utilities.iterables)": [[247, "sympy.utilities.iterables.binary_partitions"]], "bracelets() (in module sympy.utilities.iterables)": [[247, "sympy.utilities.iterables.bracelets"]], "capture() (in module sympy.utilities.iterables)": [[247, "sympy.utilities.iterables.capture"]], "common_prefix() (in module sympy.utilities.iterables)": [[247, "sympy.utilities.iterables.common_prefix"]], "common_suffix() (in module sympy.utilities.iterables)": [[247, "sympy.utilities.iterables.common_suffix"]], "connected_components() (in module sympy.utilities.iterables)": [[247, "sympy.utilities.iterables.connected_components"]], "dict_merge() (in module sympy.utilities.iterables)": [[247, "sympy.utilities.iterables.dict_merge"]], "filter_symbols() (in module sympy.utilities.iterables)": [[247, "sympy.utilities.iterables.filter_symbols"]], "flatten() (in module sympy.utilities.iterables)": [[247, "sympy.utilities.iterables.flatten"]], "generate_bell() (in module sympy.utilities.iterables)": [[247, "sympy.utilities.iterables.generate_bell"]], "generate_derangements() (in module sympy.utilities.iterables)": [[247, "sympy.utilities.iterables.generate_derangements"]], "generate_involutions() (in module sympy.utilities.iterables)": [[247, "sympy.utilities.iterables.generate_involutions"]], "generate_oriented_forest() (in module sympy.utilities.iterables)": [[247, "sympy.utilities.iterables.generate_oriented_forest"]], "group() (in module sympy.utilities.iterables)": [[247, "sympy.utilities.iterables.group"]], "has_dups() (in module sympy.utilities.iterables)": [[247, "sympy.utilities.iterables.has_dups"]], "has_variety() (in module sympy.utilities.iterables)": [[247, "sympy.utilities.iterables.has_variety"]], "ibin() (in module sympy.utilities.iterables)": [[247, "sympy.utilities.iterables.ibin"]], "iproduct() (in module sympy.utilities.iterables)": [[247, "sympy.utilities.iterables.iproduct"]], "is_palindromic() (in module sympy.utilities.iterables)": [[247, "sympy.utilities.iterables.is_palindromic"]], "is_sequence() (in module sympy.utilities.iterables)": [[247, "sympy.utilities.iterables.is_sequence"]], "iterable() (in module sympy.utilities.iterables)": [[247, "sympy.utilities.iterables.iterable"]], "kbins() (in module sympy.utilities.iterables)": [[247, "sympy.utilities.iterables.kbins"]], "least_rotation() (in module sympy.utilities.iterables)": [[247, "sympy.utilities.iterables.least_rotation"]], "minlex() (in module sympy.utilities.iterables)": [[247, "sympy.utilities.iterables.minlex"]], "multiset() (in module sympy.utilities.iterables)": [[247, "sympy.utilities.iterables.multiset"]], "multiset_combinations() (in module sympy.utilities.iterables)": [[247, "sympy.utilities.iterables.multiset_combinations"]], "multiset_derangements() (in module sympy.utilities.iterables)": [[247, "sympy.utilities.iterables.multiset_derangements"]], "multiset_partitions() (in module sympy.utilities.iterables)": [[247, "sympy.utilities.iterables.multiset_partitions"]], "multiset_permutations() (in module sympy.utilities.iterables)": [[247, "sympy.utilities.iterables.multiset_permutations"]], "necklaces() (in module sympy.utilities.iterables)": [[247, "sympy.utilities.iterables.necklaces"]], "numbered_symbols() (in module sympy.utilities.iterables)": [[247, "sympy.utilities.iterables.numbered_symbols"]], "ordered_partitions() (in module sympy.utilities.iterables)": [[247, "sympy.utilities.iterables.ordered_partitions"]], "partitions() (in module sympy.utilities.iterables)": [[247, "sympy.utilities.iterables.partitions"]], "permute_signs() (in module sympy.utilities.iterables)": [[247, "sympy.utilities.iterables.permute_signs"]], "postfixes() (in module sympy.utilities.iterables)": [[247, "sympy.utilities.iterables.postfixes"]], "prefixes() (in module sympy.utilities.iterables)": [[247, "sympy.utilities.iterables.prefixes"]], "random_derangement() (in module sympy.utilities.iterables)": [[247, "sympy.utilities.iterables.random_derangement"]], "reshape() (in module sympy.utilities.iterables)": [[247, "sympy.utilities.iterables.reshape"]], "rotate_left() (in module sympy.utilities.iterables)": [[247, "sympy.utilities.iterables.rotate_left"]], "rotate_right() (in module sympy.utilities.iterables)": [[247, "sympy.utilities.iterables.rotate_right"]], "rotations() (in module sympy.utilities.iterables)": [[247, "sympy.utilities.iterables.rotations"]], "roundrobin() (in module sympy.utilities.iterables)": [[247, "sympy.utilities.iterables.roundrobin"]], "runs() (in module sympy.utilities.iterables)": [[247, "sympy.utilities.iterables.runs"]], "sift() (in module sympy.utilities.iterables)": [[247, "sympy.utilities.iterables.sift"]], "signed_permutations() (in module sympy.utilities.iterables)": [[247, "sympy.utilities.iterables.signed_permutations"]], "strongly_connected_components() (in module sympy.utilities.iterables)": [[247, "sympy.utilities.iterables.strongly_connected_components"]], "subsets() (in module sympy.utilities.iterables)": [[247, "sympy.utilities.iterables.subsets"]], "sympy.utilities.iterables": [[247, "module-sympy.utilities.iterables"]], "take() (in module sympy.utilities.iterables)": [[247, "sympy.utilities.iterables.take"]], "topological_sort() (in module sympy.utilities.iterables)": [[247, "sympy.utilities.iterables.topological_sort"]], "unflatten() (in module sympy.utilities.iterables)": [[247, "sympy.utilities.iterables.unflatten"]], "uniq() (in module sympy.utilities.iterables)": [[247, "sympy.utilities.iterables.uniq"]], "variations() (in module sympy.utilities.iterables)": [[247, "sympy.utilities.iterables.variations"]], "implemented_function() (in module sympy.utilities.lambdify)": [[248, "sympy.utilities.lambdify.implemented_function"]], "lambdastr() (in module sympy.utilities.lambdify)": [[248, "sympy.utilities.lambdify.lambdastr"]], "lambdify() (in module sympy.utilities.lambdify)": [[248, "sympy.utilities.lambdify.lambdify"]], "sympy.utilities.lambdify": [[248, "module-sympy.utilities.lambdify"]], "assoc_recurrence_memo() (in module sympy.utilities.memoization)": [[249, "sympy.utilities.memoization.assoc_recurrence_memo"]], "recurrence_memo() (in module sympy.utilities.memoization)": [[249, "sympy.utilities.memoization.recurrence_memo"]], "sympy.utilities.memoization": [[249, "module-sympy.utilities.memoization"]], "as_int() (in module sympy.utilities.misc)": [[250, "sympy.utilities.misc.as_int"]], "debug() (in module sympy.utilities.misc)": [[250, "sympy.utilities.misc.debug"]], "debug_decorator() (in module sympy.utilities.misc)": [[250, "sympy.utilities.misc.debug_decorator"]], "filldedent() (in module sympy.utilities.misc)": [[250, "sympy.utilities.misc.filldedent"]], "find_executable() (in module sympy.utilities.misc)": [[250, "sympy.utilities.misc.find_executable"]], "func_name() (in module sympy.utilities.misc)": [[250, "sympy.utilities.misc.func_name"]], "ordinal() (in module sympy.utilities.misc)": [[250, "sympy.utilities.misc.ordinal"]], "rawlines() (in module sympy.utilities.misc)": [[250, "sympy.utilities.misc.rawlines"]], "replace() (in module sympy.utilities.misc)": [[250, "sympy.utilities.misc.replace"]], "strlines() (in module sympy.utilities.misc)": [[250, "sympy.utilities.misc.strlines"]], "sympy.utilities.misc": [[250, "module-sympy.utilities.misc"]], "translate() (in module sympy.utilities.misc)": [[250, "sympy.utilities.misc.translate"]], "get_resource() (in module sympy.utilities.pkgdata)": [[251, "sympy.utilities.pkgdata.get_resource"]], "sympy.utilities.pkgdata": [[251, "module-sympy.utilities.pkgdata"]], "get_class() (in module sympy.utilities.source)": [[252, "sympy.utilities.source.get_class"]], "get_mod_func() (in module sympy.utilities.source)": [[252, "sympy.utilities.source.get_mod_func"]], "source() (in module sympy.utilities.source)": [[252, "sympy.utilities.source.source"]], "sympy.utilities.source": [[252, "module-sympy.utilities.source"]], "sympy.utilities.timeutils": [[253, "module-sympy.utilities.timeutils"]], "timed() (in module sympy.utilities.timeutils)": [[253, "sympy.utilities.timeutils.timed"]], "coordsys3d (class in sympy.vector.coordsysrect)": [[254, "sympy.vector.coordsysrect.CoordSys3D"]], "del (class in sympy.vector.deloperator)": [[254, "sympy.vector.deloperator.Del"]], "dyadic (class in sympy.vector.dyadic)": [[254, "sympy.vector.dyadic.Dyadic"]], "implicitregion (class in sympy.vector.implicitregion)": [[254, "sympy.vector.implicitregion.ImplicitRegion"]], "parametricintegral (class in sympy.vector.integrals)": [[254, "sympy.vector.integrals.ParametricIntegral"]], "parametricregion (class in sympy.vector.parametricregion)": [[254, "sympy.vector.parametricregion.ParametricRegion"]], "vector (class in sympy.vector.vector)": [[254, "sympy.vector.vector.Vector"]], "__init__() (sympy.vector.coordsysrect.coordsys3d method)": [[254, "sympy.vector.coordsysrect.CoordSys3D.__init__"]], "components (sympy.vector.dyadic.dyadic property)": [[254, "sympy.vector.dyadic.Dyadic.components"]], "components (sympy.vector.vector.vector property)": [[254, "sympy.vector.vector.Vector.components"]], "create_new() (sympy.vector.coordsysrect.coordsys3d method)": [[254, "sympy.vector.coordsysrect.CoordSys3D.create_new"]], "cross() (sympy.vector.deloperator.del method)": [[254, "sympy.vector.deloperator.Del.cross"]], "cross() (sympy.vector.dyadic.dyadic method)": [[254, "sympy.vector.dyadic.Dyadic.cross"]], "cross() (sympy.vector.vector.vector method)": [[254, "sympy.vector.vector.Vector.cross"]], "dot() (sympy.vector.deloperator.del method)": [[254, "sympy.vector.deloperator.Del.dot"]], "dot() (sympy.vector.dyadic.dyadic method)": [[254, "sympy.vector.dyadic.Dyadic.dot"]], "dot() (sympy.vector.vector.vector method)": [[254, "sympy.vector.vector.Vector.dot"]], "gradient() (sympy.vector.deloperator.del method)": [[254, "sympy.vector.deloperator.Del.gradient"]], "locate_new() (sympy.vector.coordsysrect.coordsys3d method)": [[254, "sympy.vector.coordsysrect.CoordSys3D.locate_new"]], "magnitude() (sympy.vector.vector.vector method)": [[254, "sympy.vector.vector.Vector.magnitude"]], "multiplicity() (sympy.vector.implicitregion.implicitregion method)": [[254, "sympy.vector.implicitregion.ImplicitRegion.multiplicity"]], "normalize() (sympy.vector.vector.vector method)": [[254, "sympy.vector.vector.Vector.normalize"]], "orient_new() (sympy.vector.coordsysrect.coordsys3d method)": [[254, "sympy.vector.coordsysrect.CoordSys3D.orient_new"]], "orient_new_axis() (sympy.vector.coordsysrect.coordsys3d method)": [[254, "sympy.vector.coordsysrect.CoordSys3D.orient_new_axis"]], "orient_new_body() (sympy.vector.coordsysrect.coordsys3d method)": [[254, "sympy.vector.coordsysrect.CoordSys3D.orient_new_body"]], "orient_new_quaternion() (sympy.vector.coordsysrect.coordsys3d method)": [[254, "sympy.vector.coordsysrect.CoordSys3D.orient_new_quaternion"]], "orient_new_space() (sympy.vector.coordsysrect.coordsys3d method)": [[254, "sympy.vector.coordsysrect.CoordSys3D.orient_new_space"]], "outer() (sympy.vector.vector.vector method)": [[254, "sympy.vector.vector.Vector.outer"]], "position_wrt() (sympy.vector.coordsysrect.coordsys3d method)": [[254, "sympy.vector.coordsysrect.CoordSys3D.position_wrt"]], "projection() (sympy.vector.vector.vector method)": [[254, "sympy.vector.vector.Vector.projection"]], "rational_parametrization() (sympy.vector.implicitregion.implicitregion method)": [[254, "sympy.vector.implicitregion.ImplicitRegion.rational_parametrization"]], "regular_point() (sympy.vector.implicitregion.implicitregion method)": [[254, "sympy.vector.implicitregion.ImplicitRegion.regular_point"]], "rotation_matrix() (sympy.vector.coordsysrect.coordsys3d method)": [[254, "sympy.vector.coordsysrect.CoordSys3D.rotation_matrix"]], "scalar_map() (sympy.vector.coordsysrect.coordsys3d method)": [[254, "sympy.vector.coordsysrect.CoordSys3D.scalar_map"]], "separate() (sympy.vector.vector.vector method)": [[254, "sympy.vector.vector.Vector.separate"]], "singular_points() (sympy.vector.implicitregion.implicitregion method)": [[254, "sympy.vector.implicitregion.ImplicitRegion.singular_points"]], "to_matrix() (sympy.vector.dyadic.dyadic method)": [[254, "sympy.vector.dyadic.Dyadic.to_matrix"]], "to_matrix() (sympy.vector.vector.vector method)": [[254, "sympy.vector.vector.Vector.to_matrix"]], "axisorienter (class in sympy.vector.orienters)": [[256, "sympy.vector.orienters.AxisOrienter"]], "bodyorienter (class in sympy.vector.orienters)": [[256, "sympy.vector.orienters.BodyOrienter"]], "orienter (class in sympy.vector.orienters)": [[256, "sympy.vector.orienters.Orienter"]], "quaternionorienter (class in sympy.vector.orienters)": [[256, "sympy.vector.orienters.QuaternionOrienter"]], "spaceorienter (class in sympy.vector.orienters)": [[256, "sympy.vector.orienters.SpaceOrienter"]], "__init__() (sympy.vector.orienters.axisorienter method)": [[256, "sympy.vector.orienters.AxisOrienter.__init__"]], "__init__() (sympy.vector.orienters.bodyorienter method)": [[256, "sympy.vector.orienters.BodyOrienter.__init__"]], "__init__() (sympy.vector.orienters.quaternionorienter method)": [[256, "sympy.vector.orienters.QuaternionOrienter.__init__"]], "__init__() (sympy.vector.orienters.spaceorienter method)": [[256, "sympy.vector.orienters.SpaceOrienter.__init__"]], "rotation_matrix() (sympy.vector.orienters.axisorienter method)": [[256, "sympy.vector.orienters.AxisOrienter.rotation_matrix"]], "rotation_matrix() (sympy.vector.orienters.orienter method)": [[256, "sympy.vector.orienters.Orienter.rotation_matrix"]], "curl() (in module sympy.vector)": [[257, "sympy.vector.curl"]], "divergence() (in module sympy.vector)": [[257, "sympy.vector.divergence"]], "express() (in module sympy.vector)": [[257, "sympy.vector.express"]], "gradient() (in module sympy.vector)": [[257, "sympy.vector.gradient"]], "is_conservative() (in module sympy.vector)": [[257, "sympy.vector.is_conservative"]], "is_solenoidal() (in module sympy.vector)": [[257, "sympy.vector.is_solenoidal"]], "matrix_to_vector() (in module sympy.vector)": [[257, "sympy.vector.matrix_to_vector"]], "scalar_potential() (in module sympy.vector)": [[257, "sympy.vector.scalar_potential"]], "scalar_potential_difference() (in module sympy.vector)": [[257, "sympy.vector.scalar_potential_difference"]], "vector_integrate() (in module sympy.vector.integrals)": [[257, "sympy.vector.integrals.vector_integrate"]], "sympy.vector": [[262, "module-sympy.vector"]], "sympy.physics": [[271, "module-sympy.physics"]]}})
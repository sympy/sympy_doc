Search.setIndex({"docnames": ["citing", "contributing/build-docs", "contributing/debug", "contributing/dependencies", "contributing/deprecations", "contributing/dev-setup", "contributing/docstring", "contributing/documentation-style-guide", "contributing/index", "contributing/make-a-contribution", "explanation/active-deprecations", "explanation/glossary", "explanation/gotchas", "explanation/index", "explanation/solve_output", "explanation/special_topics/classification", "explanation/special_topics/finite_diff_derivatives", "explanation/special_topics/index", "guides/assumptions", "guides/booleans", "guides/custom-functions", "guides/index", "guides/solving/find-roots-polynomial", "guides/solving/index", "guides/solving/reduce-inequalities-algebraically", "guides/solving/solve-diophantine-equation", "guides/solving/solve-equation-algebraically", "guides/solving/solve-matrix-equation", "guides/solving/solve-numerically", "guides/solving/solve-ode", "guides/solving/solve-system-of-equations-algebraically", "guides/solving/solving-guidance", "index", "install", "modules/abc", "modules/algebras", "modules/assumptions/ask", "modules/assumptions/assume", "modules/assumptions/index", "modules/assumptions/predicates", "modules/assumptions/refine", "modules/calculus/index", "modules/categories", "modules/codegen", "modules/combinatorics/fp_groups", "modules/combinatorics/graycode", "modules/combinatorics/group_constructs", "modules/combinatorics/group_numbers", "modules/combinatorics/index", "modules/combinatorics/named_groups", "modules/combinatorics/partitions", "modules/combinatorics/pc_groups", "modules/combinatorics/perm_groups", "modules/combinatorics/permutations", "modules/combinatorics/polyhedron", "modules/combinatorics/prufer", "modules/combinatorics/subsets", "modules/combinatorics/tensor_can", "modules/combinatorics/testutil", "modules/combinatorics/util", "modules/concrete", "modules/core", "modules/crypto", "modules/diffgeom", "modules/discrete", "modules/evalf", "modules/functions/combinatorial", "modules/functions/elementary", "modules/functions/index", "modules/functions/special", "modules/geometry/curves", "modules/geometry/ellipses", "modules/geometry/entities", "modules/geometry/index", "modules/geometry/lines", "modules/geometry/plane", "modules/geometry/points", "modules/geometry/polygons", "modules/geometry/utils", "modules/holonomic/about", "modules/holonomic/convert", "modules/holonomic/index", "modules/holonomic/internal", "modules/holonomic/operations", "modules/holonomic/represent", "modules/holonomic/uses", "modules/integrals/g-functions", "modules/integrals/index", "modules/integrals/integrals", "modules/interactive", "modules/liealgebras/index", "modules/logic", "modules/matrices/common", "modules/matrices/dense", "modules/matrices/expressions", "modules/matrices/immutablematrices", "modules/matrices/index", "modules/matrices/matrices", "modules/matrices/normalforms", "modules/matrices/sparse", "modules/matrices/sparsetools", "modules/ntheory", "modules/numeric-computation", "modules/parsing", "modules/physics/continuum_mechanics/beam", "modules/physics/continuum_mechanics/beam_problems", "modules/physics/continuum_mechanics/index", "modules/physics/continuum_mechanics/truss", "modules/physics/control/control", "modules/physics/control/control_plots", "modules/physics/control/index", "modules/physics/control/lti", "modules/physics/hep/index", "modules/physics/hydrogen", "modules/physics/matrices", "modules/physics/mechanics/advanced", "modules/physics/mechanics/api/body", "modules/physics/mechanics/api/expr_manip", "modules/physics/mechanics/api/index", "modules/physics/mechanics/api/joint", "modules/physics/mechanics/api/kane_lagrange", "modules/physics/mechanics/api/linearize", "modules/physics/mechanics/api/part_bod", "modules/physics/mechanics/api/printing", "modules/physics/mechanics/api/system", "modules/physics/mechanics/autolev_parser", "modules/physics/mechanics/examples", "modules/physics/mechanics/examples/bicycle_example", "modules/physics/mechanics/examples/four_bar_linkage_example", "modules/physics/mechanics/examples/lin_pend_nonmin_example", "modules/physics/mechanics/examples/multi_degree_freedom_holonomic_system", "modules/physics/mechanics/examples/rollingdisc_example", "modules/physics/mechanics/examples/rollingdisc_example_kane", "modules/physics/mechanics/examples/rollingdisc_example_kane_constraints", "modules/physics/mechanics/examples/rollingdisc_example_lagrange", "modules/physics/mechanics/index", "modules/physics/mechanics/joints", "modules/physics/mechanics/kane", "modules/physics/mechanics/lagrange", "modules/physics/mechanics/linearize", "modules/physics/mechanics/masses", "modules/physics/mechanics/reference", "modules/physics/mechanics/sympy_mechanics_for_autolev_users", "modules/physics/mechanics/symsystem", "modules/physics/optics/gaussopt", "modules/physics/optics/index", "modules/physics/optics/medium", "modules/physics/optics/polarization", "modules/physics/optics/utils", "modules/physics/optics/waves", "modules/physics/paulialgebra", "modules/physics/qho_1d", "modules/physics/quantum/anticommutator", "modules/physics/quantum/cartesian", "modules/physics/quantum/cg", "modules/physics/quantum/circuitplot", "modules/physics/quantum/commutator", "modules/physics/quantum/constants", "modules/physics/quantum/dagger", "modules/physics/quantum/gate", "modules/physics/quantum/grover", "modules/physics/quantum/hilbert", "modules/physics/quantum/index", "modules/physics/quantum/innerproduct", "modules/physics/quantum/operator", "modules/physics/quantum/operatorset", "modules/physics/quantum/piab", "modules/physics/quantum/qapply", "modules/physics/quantum/qft", "modules/physics/quantum/qubit", "modules/physics/quantum/represent", "modules/physics/quantum/shor", "modules/physics/quantum/spin", "modules/physics/quantum/state", "modules/physics/quantum/tensorproduct", "modules/physics/secondquant", "modules/physics/sho", "modules/physics/units/dimensions", "modules/physics/units/examples", "modules/physics/units/index", "modules/physics/units/philosophy", "modules/physics/units/prefixes", "modules/physics/units/quantities", "modules/physics/units/unitsystem", "modules/physics/vector/advanced", "modules/physics/vector/api/classes", "modules/physics/vector/api/fieldfunctions", "modules/physics/vector/api/functions", "modules/physics/vector/api/index", "modules/physics/vector/api/kinematics", "modules/physics/vector/api/printing", "modules/physics/vector/fields", "modules/physics/vector/index", "modules/physics/vector/kinematics", "modules/physics/vector/vectors", "modules/physics/wigner", "modules/plotting", "modules/polys/agca", "modules/polys/basics", "modules/polys/domainmatrix", "modules/polys/domainsintro", "modules/polys/domainsref", "modules/polys/index", "modules/polys/internals", "modules/polys/literature", "modules/polys/numberfields", "modules/polys/reference", "modules/polys/ringseries", "modules/polys/solvers", "modules/polys/wester", "modules/printing", "modules/rewriting", "modules/series/formal", "modules/series/fourier", "modules/series/index", "modules/series/limitseq", "modules/series/sequences", "modules/series/series", "modules/sets", "modules/simplify/fu", "modules/simplify/hyperexpand", "modules/simplify/index", "modules/simplify/simplify", "modules/solvers/diophantine", "modules/solvers/index", "modules/solvers/inequalities", "modules/solvers/ode", "modules/solvers/pde", "modules/solvers/solvers", "modules/solvers/solveset", "modules/stats", "modules/tensor/array", "modules/tensor/array_expressions", "modules/tensor/index", "modules/tensor/index_methods", "modules/tensor/indexed", "modules/tensor/tensor", "modules/tensor/toperators", "modules/testing/index", "modules/testing/pytest", "modules/testing/randtest", "modules/testing/runtests", "modules/utilities/autowrap", "modules/utilities/codegen", "modules/utilities/decorator", "modules/utilities/enumerative", "modules/utilities/exceptions", "modules/utilities/index", "modules/utilities/iterables", "modules/utilities/lambdify", "modules/utilities/memoization", "modules/utilities/misc", "modules/utilities/pkgdata", "modules/utilities/source", "modules/utilities/timeutils", "modules/vector/api/classes", "modules/vector/api/index", "modules/vector/api/orienterclasses", "modules/vector/api/vectorfunctions", "modules/vector/basics", "modules/vector/coordsys", "modules/vector/examples", "modules/vector/fields", "modules/vector/index", "modules/vector/intro", "modules/vector/vector_integration", "reference/index", "reference/public/basics/index", "reference/public/codegeneration/index", "reference/public/logic/index", "reference/public/matrices/index", "reference/public/numbertheory/index", "reference/public/physics/index", "reference/public/topics/index", "reference/public/utilities/index", "tutorials/index", "tutorials/intro-tutorial/basic_operations", "tutorials/intro-tutorial/calculus", "tutorials/intro-tutorial/features", "tutorials/intro-tutorial/gotchas", "tutorials/intro-tutorial/index", "tutorials/intro-tutorial/intro", "tutorials/intro-tutorial/manipulation", "tutorials/intro-tutorial/matrices", "tutorials/intro-tutorial/next", "tutorials/intro-tutorial/preliminaries", "tutorials/intro-tutorial/printing", "tutorials/intro-tutorial/simplification", "tutorials/intro-tutorial/solvers"], "filenames": ["citing.md", "contributing/build-docs.rst", "contributing/debug.rst", "contributing/dependencies.md", "contributing/deprecations.md", "contributing/dev-setup.rst", "contributing/docstring.rst", "contributing/documentation-style-guide.rst", "contributing/index.rst", "contributing/make-a-contribution.rst", "explanation/active-deprecations.md", "explanation/glossary.md", "explanation/gotchas.rst", "explanation/index.rst", "explanation/solve_output.rst", "explanation/special_topics/classification.rst", "explanation/special_topics/finite_diff_derivatives.rst", "explanation/special_topics/index.rst", "guides/assumptions.rst", "guides/booleans.rst", "guides/custom-functions.md", "guides/index.rst", "guides/solving/find-roots-polynomial.md", "guides/solving/index.md", "guides/solving/reduce-inequalities-algebraically.md", "guides/solving/solve-diophantine-equation.md", "guides/solving/solve-equation-algebraically.md", "guides/solving/solve-matrix-equation.md", "guides/solving/solve-numerically.md", "guides/solving/solve-ode.md", "guides/solving/solve-system-of-equations-algebraically.md", "guides/solving/solving-guidance.md", "index.rst", "install.md", "modules/abc.rst", "modules/algebras.rst", "modules/assumptions/ask.rst", "modules/assumptions/assume.rst", "modules/assumptions/index.rst", "modules/assumptions/predicates.rst", "modules/assumptions/refine.rst", "modules/calculus/index.rst", "modules/categories.rst", "modules/codegen.rst", "modules/combinatorics/fp_groups.rst", "modules/combinatorics/graycode.rst", "modules/combinatorics/group_constructs.rst", "modules/combinatorics/group_numbers.rst", "modules/combinatorics/index.rst", "modules/combinatorics/named_groups.rst", "modules/combinatorics/partitions.rst", "modules/combinatorics/pc_groups.rst", "modules/combinatorics/perm_groups.rst", "modules/combinatorics/permutations.rst", "modules/combinatorics/polyhedron.rst", "modules/combinatorics/prufer.rst", "modules/combinatorics/subsets.rst", "modules/combinatorics/tensor_can.rst", "modules/combinatorics/testutil.rst", "modules/combinatorics/util.rst", "modules/concrete.rst", "modules/core.rst", "modules/crypto.rst", "modules/diffgeom.rst", "modules/discrete.rst", "modules/evalf.rst", "modules/functions/combinatorial.rst", "modules/functions/elementary.rst", "modules/functions/index.rst", "modules/functions/special.rst", "modules/geometry/curves.rst", "modules/geometry/ellipses.rst", "modules/geometry/entities.rst", "modules/geometry/index.rst", "modules/geometry/lines.rst", "modules/geometry/plane.rst", "modules/geometry/points.rst", "modules/geometry/polygons.rst", "modules/geometry/utils.rst", "modules/holonomic/about.rst", "modules/holonomic/convert.rst", "modules/holonomic/index.rst", "modules/holonomic/internal.rst", "modules/holonomic/operations.rst", "modules/holonomic/represent.rst", "modules/holonomic/uses.rst", "modules/integrals/g-functions.rst", "modules/integrals/index.rst", "modules/integrals/integrals.rst", "modules/interactive.rst", "modules/liealgebras/index.rst", "modules/logic.rst", "modules/matrices/common.rst", "modules/matrices/dense.rst", "modules/matrices/expressions.rst", "modules/matrices/immutablematrices.rst", "modules/matrices/index.rst", "modules/matrices/matrices.rst", "modules/matrices/normalforms.rst", "modules/matrices/sparse.rst", "modules/matrices/sparsetools.rst", "modules/ntheory.rst", "modules/numeric-computation.rst", "modules/parsing.rst", "modules/physics/continuum_mechanics/beam.rst", "modules/physics/continuum_mechanics/beam_problems.rst", "modules/physics/continuum_mechanics/index.rst", "modules/physics/continuum_mechanics/truss.rst", "modules/physics/control/control.rst", "modules/physics/control/control_plots.rst", "modules/physics/control/index.rst", "modules/physics/control/lti.rst", "modules/physics/hep/index.rst", "modules/physics/hydrogen.rst", "modules/physics/matrices.rst", "modules/physics/mechanics/advanced.rst", "modules/physics/mechanics/api/body.rst", "modules/physics/mechanics/api/expr_manip.rst", "modules/physics/mechanics/api/index.rst", "modules/physics/mechanics/api/joint.rst", "modules/physics/mechanics/api/kane_lagrange.rst", "modules/physics/mechanics/api/linearize.rst", "modules/physics/mechanics/api/part_bod.rst", "modules/physics/mechanics/api/printing.rst", "modules/physics/mechanics/api/system.rst", "modules/physics/mechanics/autolev_parser.rst", "modules/physics/mechanics/examples.rst", "modules/physics/mechanics/examples/bicycle_example.rst", "modules/physics/mechanics/examples/four_bar_linkage_example.rst", "modules/physics/mechanics/examples/lin_pend_nonmin_example.rst", "modules/physics/mechanics/examples/multi_degree_freedom_holonomic_system.rst", "modules/physics/mechanics/examples/rollingdisc_example.rst", "modules/physics/mechanics/examples/rollingdisc_example_kane.rst", "modules/physics/mechanics/examples/rollingdisc_example_kane_constraints.rst", "modules/physics/mechanics/examples/rollingdisc_example_lagrange.rst", "modules/physics/mechanics/index.rst", "modules/physics/mechanics/joints.rst", "modules/physics/mechanics/kane.rst", "modules/physics/mechanics/lagrange.rst", "modules/physics/mechanics/linearize.rst", "modules/physics/mechanics/masses.rst", "modules/physics/mechanics/reference.rst", "modules/physics/mechanics/sympy_mechanics_for_autolev_users.rst", "modules/physics/mechanics/symsystem.rst", "modules/physics/optics/gaussopt.rst", "modules/physics/optics/index.rst", "modules/physics/optics/medium.rst", "modules/physics/optics/polarization.rst", "modules/physics/optics/utils.rst", "modules/physics/optics/waves.rst", "modules/physics/paulialgebra.rst", "modules/physics/qho_1d.rst", "modules/physics/quantum/anticommutator.rst", "modules/physics/quantum/cartesian.rst", "modules/physics/quantum/cg.rst", "modules/physics/quantum/circuitplot.rst", "modules/physics/quantum/commutator.rst", "modules/physics/quantum/constants.rst", "modules/physics/quantum/dagger.rst", "modules/physics/quantum/gate.rst", "modules/physics/quantum/grover.rst", "modules/physics/quantum/hilbert.rst", "modules/physics/quantum/index.rst", "modules/physics/quantum/innerproduct.rst", "modules/physics/quantum/operator.rst", "modules/physics/quantum/operatorset.rst", "modules/physics/quantum/piab.rst", "modules/physics/quantum/qapply.rst", "modules/physics/quantum/qft.rst", "modules/physics/quantum/qubit.rst", "modules/physics/quantum/represent.rst", "modules/physics/quantum/shor.rst", "modules/physics/quantum/spin.rst", "modules/physics/quantum/state.rst", "modules/physics/quantum/tensorproduct.rst", "modules/physics/secondquant.rst", "modules/physics/sho.rst", "modules/physics/units/dimensions.rst", "modules/physics/units/examples.rst", "modules/physics/units/index.rst", "modules/physics/units/philosophy.rst", "modules/physics/units/prefixes.rst", "modules/physics/units/quantities.rst", "modules/physics/units/unitsystem.rst", "modules/physics/vector/advanced.rst", "modules/physics/vector/api/classes.rst", "modules/physics/vector/api/fieldfunctions.rst", "modules/physics/vector/api/functions.rst", "modules/physics/vector/api/index.rst", "modules/physics/vector/api/kinematics.rst", "modules/physics/vector/api/printing.rst", "modules/physics/vector/fields.rst", "modules/physics/vector/index.rst", "modules/physics/vector/kinematics.rst", "modules/physics/vector/vectors.rst", "modules/physics/wigner.rst", "modules/plotting.rst", "modules/polys/agca.rst", "modules/polys/basics.rst", "modules/polys/domainmatrix.rst", "modules/polys/domainsintro.rst", "modules/polys/domainsref.rst", "modules/polys/index.rst", "modules/polys/internals.rst", "modules/polys/literature.rst", "modules/polys/numberfields.rst", "modules/polys/reference.rst", "modules/polys/ringseries.rst", "modules/polys/solvers.rst", "modules/polys/wester.rst", "modules/printing.rst", "modules/rewriting.rst", "modules/series/formal.rst", "modules/series/fourier.rst", "modules/series/index.rst", "modules/series/limitseq.rst", "modules/series/sequences.rst", "modules/series/series.rst", "modules/sets.rst", "modules/simplify/fu.rst", "modules/simplify/hyperexpand.rst", "modules/simplify/index.rst", "modules/simplify/simplify.rst", "modules/solvers/diophantine.rst", "modules/solvers/index.rst", "modules/solvers/inequalities.rst", "modules/solvers/ode.rst", "modules/solvers/pde.rst", "modules/solvers/solvers.rst", "modules/solvers/solveset.rst", "modules/stats.rst", "modules/tensor/array.rst", "modules/tensor/array_expressions.rst", "modules/tensor/index.rst", "modules/tensor/index_methods.rst", "modules/tensor/indexed.rst", "modules/tensor/tensor.rst", "modules/tensor/toperators.rst", "modules/testing/index.rst", "modules/testing/pytest.rst", "modules/testing/randtest.rst", "modules/testing/runtests.rst", "modules/utilities/autowrap.rst", "modules/utilities/codegen.rst", "modules/utilities/decorator.rst", "modules/utilities/enumerative.rst", "modules/utilities/exceptions.rst", "modules/utilities/index.rst", "modules/utilities/iterables.rst", "modules/utilities/lambdify.rst", "modules/utilities/memoization.rst", "modules/utilities/misc.rst", "modules/utilities/pkgdata.rst", "modules/utilities/source.rst", "modules/utilities/timeutils.rst", "modules/vector/api/classes.rst", "modules/vector/api/index.rst", "modules/vector/api/orienterclasses.rst", "modules/vector/api/vectorfunctions.rst", "modules/vector/basics.rst", "modules/vector/coordsys.rst", "modules/vector/examples.rst", "modules/vector/fields.rst", "modules/vector/index.rst", "modules/vector/intro.rst", "modules/vector/vector_integration.rst", "reference/index.rst", "reference/public/basics/index.rst", "reference/public/codegeneration/index.rst", "reference/public/logic/index.rst", "reference/public/matrices/index.rst", "reference/public/numbertheory/index.rst", "reference/public/physics/index.rst", "reference/public/topics/index.rst", "reference/public/utilities/index.rst", "tutorials/index.rst", "tutorials/intro-tutorial/basic_operations.rst", "tutorials/intro-tutorial/calculus.rst", "tutorials/intro-tutorial/features.rst", "tutorials/intro-tutorial/gotchas.rst", "tutorials/intro-tutorial/index.rst", "tutorials/intro-tutorial/intro.rst", "tutorials/intro-tutorial/manipulation.rst", "tutorials/intro-tutorial/matrices.rst", "tutorials/intro-tutorial/next.rst", "tutorials/intro-tutorial/preliminaries.rst", "tutorials/intro-tutorial/printing.rst", "tutorials/intro-tutorial/simplification.rst", "tutorials/intro-tutorial/solvers.rst"], "titles": ["Citing SymPy", "Build the Documentation", "Debugging", "Dependencies", "Deprecation Policy", "Development Environment Setup", "SymPy Docstrings Style Guide", "Docstring Style Guide", "Contributing", "Making a Contribution", "List of active deprecations", "Glossary", "Gotchas and Pitfalls", "Explanations", "Solve Output by Type", "Classification of SymPy objects", "Finite Difference Approximations to Derivatives", "SymPy Special Topics", "Assumptions", "Symbolic and fuzzy booleans", "Writing Custom Functions", "How-to Guides", "Find the Roots of a Polynomial Algebraically or Numerically", "Solve Equations", "Reduce One or a System of Inequalities for a Single Variable Algebraically", "Solve a Diophantine Equation Algebraically", "Solve an Equation Algebraically", "Solve a Matrix Equation Algebraically", "Solve One or a System of Equations Numerically", "Solve an Ordinary Differential Equation (ODE) Algebraically", "Solve a System of Equations Algebraically", "Solving Guidance", "Welcome to SymPy\u2019s documentation!", "Installation", "abc", "Algebras", "Ask", "Assume", "Assumptions", "Predicates", "Refine", "Calculus", "Category Theory", "Code Generation", "Finitely Presented Groups", "Gray Code", "Group constructors", "Nilpotent, Abelian and Cyclic Numbers", "Combinatorics", "Named Groups", "Partitions", "Polycyclic Groups", "Permutation Groups", "Permutations", "Polyhedron", "Prufer Sequences", "Subsets", "Tensor Canonicalization", "Test Utilities", "Utilities", "Concrete", "Core", "Cryptography", "Differential Geometry", "Discrete", "Numerical Evaluation", "Combinatorial", "Elementary", "Functions", "Special", "Curves", "Ellipses", "Entities", "Geometry", "Lines", "Plane", "Points", "Polygons", "Utils", "About Holonomic Functions", "Converting other representations to holonomic", "Holonomic", "Internal API", "Operations on holonomic functions", "Representation of holonomic functions in SymPy", "Uses and Current limitations", "Computing Integrals using Meijer G-Functions", "Integrals", "Integrals", "Interactive", "Lie Algebra", "Logic", "Common Matrices", "Dense Matrices", "Matrix Expressions", "Immutable Matrices", "Matrices", "Matrices (linear algebra)", "Matrix Normal Forms", "Sparse Matrices", "Sparse Tools", "Number Theory", "Numeric Computation", "Parsing", "Beam (Docstrings)", "Solving Beam Bending Problems using Singularity Functions", "Continuum Mechanics", "Truss (Docstrings)", "Control", "Control System Plots", "Control Module", "Control API", "High energy physics", "Hydrogen Wavefunctions", "Matrices", "Potential Issues/Advanced Topics/Future Features in Physics/Mechanics", "Body (Docstrings)", "Expression Manipulation (Docstrings)", "Mechanics API Reference", "Joints Framework (Docstrings)", "Kane\u2019s Method &amp; Lagrange\u2019s Method (Docstrings)", "Linearization (Docstrings)", "Masses, Inertias &amp; Particles, RigidBodys (Docstrings)", "Printing (Docstrings)", "SymbolicSystem (Docstrings)", "Autolev Parser", "Examples for Physics/Mechanics", "A bicycle", "A four bar linkage", "Nonminimal Coordinates Pendulum", "Multi Degree of Freedom Holonomic System", "A rolling disc", "A rolling disc, with Kane\u2019s method", "A rolling disc, with Kane\u2019s method and constraint forces", "A rolling disc using Lagrange\u2019s Method", "Classical Mechanics", "Joints Framework in Physics/Mechanics", "Kane\u2019s Method in Physics/Mechanics", "Lagrange\u2019s Method in Physics/Mechanics", "Linearization in Physics/Mechanics", "Masses, Inertias, Particles and Rigid Bodies in Physics/Mechanics", "References for Physics/Mechanics", "SymPy Mechanics for Autolev Users", "Symbolic Systems in Physics/Mechanics", "Gaussian Optics", "Optics Module", "Medium", "Polarization", "Utilities", "Waves", "Pauli Algebra", "Quantum Harmonic Oscillator in 1-D", "Anticommutator", "Cartesian Operators and States", "Clebsch-Gordan Coefficients", "Circuit Plot", "Commutator", "Constants", "Dagger", "Gates", "Grover\u2019s Algorithm", "Hilbert Space", "Quantum Mechanics", "Inner Product", "Operator", "Operator/State Helper Functions", "Particle in a Box", "Qapply", "QFT", "Qubit", "Represent", "Shor\u2019s Algorithm", "Spin", "State", "Tensor Product", "Second Quantization", "Quantum Harmonic Oscillator in 3-D", "Dimensions and dimension systems", "Examples", "Unit systems", "Philosophy behind unit systems", "Unit prefixes", "Physical quantities", "Units and unit systems", "Potential Issues/Advanced Topics/Future Features in Physics/Vector Module", "Essential Classes", "Docstrings for basic field functions", "Essential Functions (Docstrings)", "Physics Vector API", "Kinematics (Docstrings)", "Printing (Docstrings)", "Scalar and Vector Field Functionality", "The Physics Vector Module", "Vector: Kinematics", "Vector &amp; ReferenceFrame", "Wigner Symbols", "Plotting", "AGCA - Algebraic Geometry and Commutative Algebra Module", "Basic functionality of the module", "Introducing the domainmatrix of the poly module", "Introducing the Domains of the poly module", "Reference docs for the Poly Domains", "Polynomial Manipulation", "Internals of the Polynomial Manipulation Module", "Literature", "Number Fields", "Polynomials Manipulation Module Reference", "Series Manipulation using Polynomials", "Poly solvers", "Examples from Wester\u2019s Article", "Printing", "Term Rewriting", "Formal Power Series", "Fourier Series", "Series", "Limits of Sequences", "Sequences", "Series Expansions", "Sets", "Hongguang Fu\u2019s Trigonometric Simplification", "Hypergeometric Expansion", "Simplify", "Simplify", "Diophantine", "Solvers", "Inequality Solvers", "ODE", "PDE", "Solvers", "Solveset", "Stats", "N-dim array", "N-dim array expressions", "Tensor", "Methods", "Indexed Objects", "Tensor", "Tensor Operators", "Testing", "pytest", "Randomised Testing", "Run Tests", "Autowrap Module", "Codegen", "Decorator", "Enumerative", "Exceptions and Warnings", "Utilities", "Iterables", "Lambdify", "Memoization", "Miscellaneous", "PKGDATA", "Source Code Inspection", "Timing Utilities", "Essential Classes in sympy.vector (docstrings)", "Vector API", "Orienter classes (docstrings)", "Essential Functions in sympy.vector (docstrings)", "Basic Implementation details", "More about Coordinate Systems", "General examples of usage", "Scalar and Vector Field Functionality", "Vector", "Introduction", "Applications of Vector Integrals", "API Reference", "Basics", "Code Generation", "Logic", "Matrices", "Number Theory", "Physics", "Topics", "Utilities", "Tutorials", "Basic Operations", "Calculus", "SymPy Features", "Gotchas", "Introductory Tutorial", "Introduction", "Advanced Expression Manipulation", "Matrices", "What\u2019s Next", "Preliminaries", "Printing", "Simplification", "Solvers"], "terms": {"To": [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 16, 19, 20, 24, 25, 26, 28, 29, 30, 31, 33, 34, 37, 38, 41, 42, 43, 44, 51, 52, 53, 57, 60, 61, 62, 63, 65, 66, 67, 68, 69, 74, 84, 86, 88, 90, 91, 92, 94, 97, 101, 103, 104, 105, 109, 111, 112, 114, 116, 119, 120, 138, 139, 142, 152, 156, 169, 178, 180, 184, 191, 194, 196, 198, 200, 201, 203, 205, 206, 207, 209, 210, 217, 218, 220, 223, 226, 227, 228, 229, 230, 231, 234, 235, 239, 241, 242, 245, 246, 248, 249, 255, 257, 259, 260, 262, 264, 265, 276, 277, 279, 280, 282, 283, 286, 287, 288], "public": [0, 6, 43, 61, 62, 83, 200, 201, 203, 204, 208, 223, 226, 230, 244, 255], "us": [0, 1, 2, 4, 5, 6, 8, 11, 12, 14, 15, 17, 18, 19, 20, 23, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 81, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 100, 101, 103, 104, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 142, 143, 144, 147, 148, 150, 152, 154, 155, 156, 159, 161, 163, 164, 165, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 184, 185, 186, 187, 189, 190, 191, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 216, 217, 218, 219, 220, 222, 223, 225, 226, 227, 228, 230, 231, 232, 234, 235, 236, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 255, 258, 259, 261, 262, 264, 265, 267, 272, 273, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288], "meurer": 0, "A": [0, 3, 4, 6, 7, 10, 11, 12, 14, 15, 17, 18, 19, 20, 22, 24, 26, 27, 28, 29, 30, 31, 32, 35, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 83, 84, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 100, 101, 103, 104, 105, 107, 109, 111, 115, 116, 117, 119, 120, 121, 122, 125, 126, 129, 130, 135, 136, 137, 140, 141, 142, 143, 144, 147, 149, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 177, 180, 181, 183, 184, 185, 187, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 216, 217, 218, 219, 220, 222, 223, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 241, 242, 243, 244, 245, 246, 248, 249, 255, 257, 259, 260, 261, 262, 264, 265, 272, 278, 280, 282, 283, 287], "smith": [0, 10, 98, 199], "cp": [0, 53, 102, 198], "paprocki": 0, "m": [0, 1, 10, 12, 16, 18, 20, 35, 39, 43, 44, 49, 50, 52, 53, 57, 60, 61, 62, 63, 64, 66, 69, 71, 73, 77, 78, 86, 88, 90, 92, 93, 94, 95, 97, 98, 100, 101, 103, 104, 105, 107, 111, 113, 114, 116, 119, 120, 121, 122, 124, 125, 129, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 146, 151, 158, 172, 173, 176, 178, 180, 191, 195, 197, 198, 199, 201, 203, 204, 205, 206, 207, 210, 211, 212, 213, 215, 216, 217, 218, 220, 222, 223, 226, 228, 229, 230, 231, 232, 235, 236, 242, 243, 245, 248, 250, 255, 258, 260, 264, 265, 277, 283, 286, 287, 288], "\u010dert\u00edk": 0, "o": [0, 1, 6, 11, 12, 16, 18, 34, 42, 43, 52, 53, 59, 61, 62, 67, 69, 71, 72, 74, 75, 77, 83, 86, 101, 105, 116, 120, 122, 124, 125, 137, 138, 139, 140, 142, 143, 165, 175, 186, 189, 191, 193, 195, 203, 204, 206, 207, 210, 212, 217, 220, 226, 230, 235, 241, 248, 251, 252, 258, 261, 277], "kirpichev": 0, "sb": 0, "rocklin": 0, "kumar": [0, 229], "ivanov": 0, "": [0, 3, 4, 5, 6, 7, 9, 10, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 50, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 69, 70, 71, 73, 74, 75, 77, 78, 79, 80, 83, 84, 86, 88, 89, 90, 91, 92, 94, 95, 97, 100, 101, 102, 103, 104, 105, 109, 111, 113, 115, 116, 118, 119, 122, 125, 127, 131, 135, 136, 140, 142, 146, 147, 148, 154, 155, 157, 159, 161, 162, 165, 169, 170, 172, 173, 175, 178, 180, 184, 185, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 210, 211, 212, 213, 216, 217, 218, 220, 221, 222, 223, 225, 226, 227, 230, 236, 241, 242, 243, 244, 245, 246, 248, 249, 251, 255, 257, 261, 262, 264, 267, 272, 273, 275, 276, 277, 279, 280, 281, 282, 283, 287, 288], "moor": [0, 27, 94, 97], "jk": 0, "singh": 0, "rathnayak": 0, "t": [0, 1, 4, 6, 7, 10, 11, 12, 19, 20, 22, 29, 35, 38, 39, 41, 43, 44, 45, 52, 53, 54, 55, 57, 61, 62, 63, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 85, 86, 88, 90, 91, 92, 93, 94, 97, 101, 102, 103, 107, 111, 112, 115, 116, 117, 119, 120, 121, 122, 124, 125, 128, 129, 130, 137, 138, 139, 140, 142, 143, 147, 149, 155, 159, 171, 173, 175, 177, 178, 180, 184, 185, 187, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 209, 210, 213, 217, 218, 219, 220, 222, 223, 226, 227, 228, 229, 230, 231, 232, 236, 239, 241, 244, 248, 249, 255, 258, 260, 264, 276, 277, 281, 282, 283, 286, 287, 288], "vig": 0, "granger": [0, 161], "BE": 0, "muller": 0, "rp": [0, 77, 147], "bonazzi": 0, "f": [0, 1, 6, 10, 11, 12, 16, 20, 22, 25, 26, 28, 29, 41, 42, 43, 44, 51, 52, 53, 57, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 79, 84, 85, 86, 88, 90, 92, 94, 97, 101, 102, 103, 105, 109, 119, 120, 124, 130, 135, 137, 138, 142, 144, 148, 149, 160, 161, 164, 173, 175, 178, 185, 190, 191, 194, 195, 196, 197, 198, 200, 201, 203, 204, 205, 206, 207, 209, 210, 212, 213, 216, 217, 218, 219, 220, 222, 223, 226, 227, 228, 229, 230, 231, 235, 236, 241, 242, 243, 244, 245, 248, 249, 251, 261, 262, 265, 276, 277, 282, 286, 287, 288], "gupta": [0, 229], "h": [0, 12, 16, 41, 42, 43, 44, 45, 52, 57, 60, 61, 62, 66, 69, 83, 86, 88, 92, 93, 97, 98, 103, 111, 119, 122, 140, 144, 147, 159, 161, 164, 169, 173, 180, 195, 196, 197, 198, 199, 203, 204, 205, 206, 209, 210, 218, 222, 226, 228, 229, 230, 231, 236, 243, 265, 277, 286], "vat": 0, "johansson": 0, "pedregosa": 0, "curri": [0, 161], "mj": 0, "terrel": 0, "ar": [0, 1, 3, 4, 5, 7, 8, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 97, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 112, 115, 116, 117, 119, 120, 121, 122, 124, 125, 126, 127, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 147, 148, 149, 150, 152, 154, 156, 159, 161, 163, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 189, 190, 191, 193, 195, 196, 197, 198, 199, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 222, 223, 225, 226, 227, 228, 230, 231, 232, 234, 235, 236, 237, 239, 241, 242, 243, 245, 246, 247, 248, 249, 251, 255, 257, 258, 259, 260, 261, 262, 264, 266, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288], "rou\u010dka": 0, "\u0161": 0, "saboo": 0, "fernando": 0, "i": [0, 1, 2, 3, 5, 6, 7, 8, 10, 11, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 100, 101, 103, 104, 105, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 155, 156, 158, 159, 161, 163, 164, 165, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 215, 216, 217, 218, 219, 220, 222, 223, 225, 226, 227, 228, 230, 231, 232, 234, 235, 236, 237, 239, 241, 242, 243, 244, 245, 246, 248, 249, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 264, 265, 276, 277, 279, 280, 282, 283, 285, 286, 287, 288], "kulal": 0, "cimrman": 0, "r": [0, 1, 6, 7, 10, 12, 16, 18, 20, 22, 35, 42, 43, 44, 45, 52, 53, 61, 62, 63, 65, 66, 67, 74, 75, 77, 79, 83, 84, 86, 88, 97, 101, 103, 105, 107, 111, 113, 116, 119, 120, 121, 122, 124, 125, 127, 129, 132, 133, 134, 139, 140, 141, 142, 143, 144, 147, 171, 172, 175, 176, 178, 185, 186, 189, 191, 193, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 210, 211, 212, 217, 218, 220, 222, 223, 226, 228, 229, 230, 236, 241, 243, 245, 255, 258, 260, 261, 262, 265, 287], "scopatz": 0, "2017": [0, 195], "symbol": [0, 3, 6, 7, 10, 11, 14, 16, 21, 22, 23, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 51, 53, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 83, 84, 85, 86, 88, 89, 91, 92, 94, 97, 101, 102, 103, 104, 105, 107, 108, 109, 111, 113, 115, 116, 117, 119, 120, 121, 122, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 140, 142, 144, 147, 148, 149, 150, 152, 154, 155, 157, 159, 161, 163, 164, 167, 170, 172, 173, 174, 175, 176, 177, 178, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 193, 194, 196, 197, 198, 199, 201, 202, 203, 204, 205, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 220, 222, 223, 225, 226, 227, 228, 230, 231, 233, 234, 235, 236, 237, 242, 248, 249, 255, 257, 258, 260, 261, 262, 265, 272, 276, 277, 280, 282, 283, 286, 287, 288], "comput": [0, 3, 4, 6, 7, 10, 11, 12, 16, 18, 19, 20, 22, 23, 26, 27, 28, 33, 35, 41, 43, 44, 45, 50, 52, 53, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 76, 80, 83, 84, 85, 87, 88, 90, 92, 94, 97, 98, 100, 101, 103, 104, 105, 109, 111, 115, 119, 120, 121, 124, 125, 127, 128, 132, 135, 142, 159, 160, 161, 169, 174, 175, 177, 179, 180, 184, 185, 186, 191, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 212, 213, 215, 217, 218, 219, 220, 222, 223, 226, 228, 229, 230, 232, 242, 245, 248, 249, 255, 257, 258, 259, 260, 261, 262, 264, 267, 276, 277, 279, 280, 283, 287], "python": [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 15, 18, 19, 20, 22, 23, 26, 27, 29, 31, 32, 33, 36, 37, 38, 41, 53, 61, 62, 65, 67, 73, 89, 91, 92, 94, 97, 101, 102, 103, 104, 115, 125, 142, 185, 196, 197, 198, 200, 201, 207, 209, 210, 218, 222, 226, 229, 231, 241, 242, 243, 244, 245, 248, 249, 251, 255, 279, 280, 281, 282, 283, 285, 286, 287], "peerj": 0, "scienc": [0, 53, 86, 97, 141, 142, 197, 204, 219, 220, 277], "3": [0, 4, 5, 7, 12, 14, 16, 18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 31, 33, 35, 36, 38, 39, 40, 41, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 107, 109, 111, 112, 113, 114, 116, 117, 119, 122, 124, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 142, 143, 144, 146, 148, 152, 154, 155, 156, 160, 164, 169, 170, 172, 174, 175, 178, 181, 182, 184, 185, 186, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 235, 236, 237, 241, 242, 244, 245, 246, 248, 249, 251, 253, 255, 257, 258, 259, 260, 262, 264, 265, 272, 276, 277, 279, 281, 282, 283, 286, 287, 288], "e103": 0, "http": [0, 1, 3, 4, 5, 6, 7, 10, 18, 20, 33, 35, 37, 38, 39, 41, 42, 43, 45, 49, 50, 52, 53, 54, 55, 60, 61, 62, 63, 64, 65, 66, 67, 69, 71, 73, 77, 78, 79, 83, 86, 88, 89, 90, 91, 92, 94, 97, 101, 104, 109, 111, 113, 114, 144, 146, 147, 148, 150, 151, 152, 156, 157, 158, 161, 163, 164, 173, 175, 185, 187, 190, 192, 195, 204, 206, 209, 210, 213, 215, 217, 218, 219, 222, 223, 226, 229, 230, 242, 243, 244, 246, 248, 249, 251, 255, 257, 261, 263, 265, 283, 286], "doi": [0, 6, 41, 53, 97, 204, 219, 222, 230], "org": [0, 3, 6, 7, 12, 18, 20, 35, 37, 38, 39, 41, 42, 43, 49, 50, 52, 53, 60, 61, 62, 63, 64, 66, 67, 69, 71, 73, 77, 78, 79, 88, 89, 90, 91, 92, 94, 97, 101, 109, 111, 113, 114, 144, 146, 147, 148, 150, 151, 152, 156, 157, 158, 161, 163, 164, 173, 175, 185, 187, 190, 192, 204, 206, 210, 213, 217, 218, 219, 222, 223, 226, 229, 230, 242, 243, 244, 246, 248, 255, 257, 261, 263, 265, 283, 286], "10": [0, 3, 6, 12, 20, 22, 28, 29, 31, 33, 35, 41, 43, 50, 52, 53, 57, 59, 60, 61, 62, 64, 65, 66, 67, 69, 74, 75, 77, 78, 86, 88, 89, 91, 92, 94, 97, 98, 101, 102, 103, 104, 107, 109, 111, 112, 117, 122, 125, 127, 142, 144, 148, 159, 169, 170, 181, 185, 186, 187, 189, 195, 196, 198, 199, 200, 201, 203, 204, 205, 206, 207, 209, 210, 213, 216, 217, 218, 219, 222, 223, 226, 229, 230, 231, 240, 241, 246, 248, 249, 251, 255, 258, 276, 283, 287], "7717": 0, "c": [0, 1, 3, 11, 12, 16, 18, 20, 22, 23, 25, 27, 34, 35, 41, 42, 45, 46, 50, 52, 53, 54, 56, 57, 58, 60, 61, 62, 64, 66, 67, 69, 70, 71, 73, 74, 75, 77, 78, 84, 86, 88, 90, 91, 92, 94, 97, 101, 102, 103, 104, 105, 107, 111, 113, 115, 117, 119, 120, 125, 130, 132, 133, 134, 136, 138, 139, 140, 142, 144, 148, 154, 155, 156, 159, 161, 164, 169, 172, 174, 175, 180, 185, 189, 193, 194, 195, 196, 198, 199, 200, 201, 203, 204, 205, 206, 207, 209, 217, 218, 219, 220, 222, 223, 226, 227, 228, 229, 230, 231, 235, 236, 242, 243, 245, 248, 251, 252, 255, 257, 258, 259, 260, 261, 262, 265, 277, 279, 286, 287, 288], "103": [0, 52], "bibtex": 0, "entri": [0, 10, 27, 39, 44, 51, 53, 59, 62, 73, 86, 90, 92, 93, 94, 100, 120, 125, 127, 140, 147, 199, 203, 205, 206, 220, 230, 249], "latex": [0, 1, 3, 6, 11, 20, 31, 33, 69, 89, 184, 185, 190, 194, 196, 201, 210, 281, 282], "user": [0, 1, 3, 4, 5, 6, 7, 10, 11, 15, 17, 18, 20, 42, 43, 44, 52, 53, 60, 61, 62, 63, 69, 73, 86, 90, 94, 97, 103, 104, 105, 109, 111, 115, 125, 135, 138, 140, 143, 163, 164, 173, 179, 180, 184, 185, 189, 193, 197, 200, 203, 205, 207, 208, 209, 210, 211, 219, 222, 228, 229, 230, 239, 242, 243, 245, 246, 249, 255, 259, 260, 265, 272, 276, 279, 280, 282, 283, 284], "articl": [0, 61, 62, 94, 97, 202, 204, 205, 210, 219, 255, 273, 281], "titl": [0, 6, 7, 29, 196], "author": [0, 6, 101, 161, 205], "aaron": 0, "christoph": [0, 255], "p": [0, 1, 10, 11, 12, 16, 18, 19, 20, 22, 23, 25, 35, 37, 38, 39, 43, 44, 49, 50, 51, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 71, 74, 75, 76, 77, 78, 83, 84, 86, 88, 92, 94, 97, 101, 103, 104, 105, 107, 111, 112, 116, 119, 120, 121, 122, 124, 125, 129, 136, 137, 138, 139, 140, 141, 142, 143, 144, 147, 148, 154, 173, 175, 180, 186, 189, 191, 193, 195, 196, 198, 199, 200, 203, 204, 206, 207, 210, 212, 213, 217, 218, 220, 222, 223, 226, 228, 229, 230, 231, 235, 236, 248, 255, 258, 259, 260, 261, 262, 264, 283, 287], "mateusz": 0, "v": [0, 1, 5, 14, 22, 26, 31, 35, 43, 51, 57, 60, 61, 62, 63, 64, 65, 69, 75, 86, 90, 92, 97, 101, 105, 116, 117, 119, 122, 127, 139, 140, 142, 143, 147, 148, 160, 175, 180, 185, 187, 189, 191, 193, 194, 196, 203, 204, 205, 206, 210, 220, 222, 223, 226, 228, 230, 241, 248, 255, 258, 259, 260, 261, 262, 264], "ert": 0, "k": [0, 7, 12, 14, 18, 20, 25, 35, 41, 42, 43, 44, 45, 47, 51, 52, 55, 56, 59, 60, 61, 62, 64, 65, 66, 67, 69, 74, 79, 86, 88, 91, 92, 94, 97, 101, 119, 120, 130, 137, 139, 140, 142, 149, 163, 164, 167, 171, 173, 175, 184, 191, 195, 197, 199, 200, 203, 204, 205, 206, 207, 210, 212, 213, 215, 216, 217, 218, 219, 220, 222, 223, 226, 228, 230, 231, 232, 234, 235, 236, 237, 241, 245, 248, 255, 257, 258, 259, 260, 261, 262, 264, 265, 286, 287], "ond": 0, "ej": 0, "sergei": 0, "b": [0, 5, 10, 11, 12, 14, 18, 19, 20, 22, 23, 25, 27, 35, 42, 43, 44, 45, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 84, 86, 88, 90, 91, 92, 93, 94, 97, 101, 103, 104, 105, 107, 109, 111, 116, 117, 119, 120, 121, 122, 125, 129, 130, 139, 140, 142, 144, 147, 152, 154, 156, 158, 163, 164, 167, 172, 173, 174, 175, 185, 187, 189, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 210, 212, 213, 215, 216, 217, 218, 219, 220, 222, 223, 226, 227, 228, 229, 230, 231, 232, 235, 236, 237, 241, 244, 245, 248, 251, 255, 257, 258, 259, 260, 261, 277, 279, 283, 287, 288], "matthew": 0, "amit": [0, 229], "sergiu": 0, "jason": [0, 210], "sartaj": 0, "thilina": 0, "sean": 0, "brian": [0, 161], "e": [0, 1, 3, 4, 5, 6, 7, 10, 11, 12, 18, 19, 20, 23, 27, 28, 31, 34, 35, 39, 41, 42, 43, 44, 50, 51, 52, 53, 54, 57, 59, 60, 61, 62, 63, 65, 66, 67, 69, 71, 73, 74, 75, 76, 77, 78, 83, 84, 86, 88, 90, 91, 92, 97, 101, 103, 104, 105, 107, 111, 112, 116, 119, 120, 122, 124, 125, 138, 139, 142, 143, 144, 147, 154, 155, 159, 164, 165, 167, 170, 172, 174, 175, 180, 181, 185, 190, 191, 194, 195, 196, 197, 198, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 216, 217, 218, 219, 220, 222, 223, 226, 227, 228, 229, 230, 231, 234, 235, 236, 237, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 255, 259, 262, 264, 265, 276, 277, 281, 282, 287], "richard": [0, 101], "francesco": 0, "harsh": [0, 229], "shivam": 0, "fredrik": 0, "fabian": 0, "j": [0, 7, 10, 12, 35, 39, 41, 43, 44, 47, 51, 52, 53, 57, 59, 60, 62, 63, 65, 66, 69, 83, 86, 88, 90, 92, 94, 97, 101, 109, 112, 119, 140, 141, 142, 147, 154, 155, 172, 175, 180, 184, 191, 195, 197, 199, 201, 203, 204, 205, 206, 207, 209, 210, 212, 218, 220, 222, 223, 226, 228, 229, 230, 231, 232, 234, 235, 236, 237, 242, 248, 255, 257, 258, 259, 260, 261, 262, 264, 265], "andi": [0, 141], "rou": 0, "ka": 0, "n": [0, 5, 6, 7, 11, 12, 16, 18, 20, 22, 25, 26, 34, 39, 41, 43, 44, 45, 47, 49, 50, 51, 52, 53, 55, 57, 59, 60, 61, 62, 63, 65, 66, 67, 69, 71, 74, 75, 76, 77, 78, 83, 84, 86, 88, 90, 91, 92, 94, 97, 98, 101, 103, 104, 105, 107, 111, 113, 114, 116, 119, 120, 122, 124, 125, 127, 128, 129, 130, 132, 133, 134, 137, 138, 139, 140, 142, 143, 144, 146, 148, 149, 151, 155, 160, 161, 164, 169, 171, 172, 173, 175, 176, 178, 180, 182, 184, 185, 187, 189, 190, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 209, 210, 212, 213, 215, 216, 217, 218, 219, 220, 222, 223, 226, 228, 229, 230, 233, 235, 236, 239, 242, 248, 250, 251, 255, 257, 258, 259, 260, 264, 270, 277, 283, 286, 287, 288], "ashutosh": 0, "isuru": 0, "sumith": 0, "robert": [0, 230], "anthoni": 0, "year": [0, 4, 6, 10], "month": 0, "jan": [0, 62], "keyword": [0, 4, 6, 11, 14, 20, 42, 43, 44, 52, 53, 61, 62, 65, 66, 74, 76, 77, 78, 92, 97, 101, 104, 109, 111, 120, 137, 138, 169, 175, 190, 196, 198, 200, 201, 203, 205, 206, 209, 210, 211, 217, 222, 223, 228, 235, 241, 242, 244, 246, 249, 251, 260, 283], "algebra": [0, 7, 11, 12, 14, 18, 23, 28, 31, 39, 44, 52, 61, 62, 65, 67, 79, 82, 83, 84, 86, 88, 91, 92, 96, 98, 101, 102, 103, 124, 135, 142, 143, 195, 198, 199, 201, 202, 203, 204, 206, 207, 210, 212, 220, 223, 225, 226, 229, 266, 267, 270, 272, 273, 278, 279, 281, 283], "system": [0, 1, 2, 3, 5, 7, 10, 11, 12, 14, 15, 16, 19, 20, 22, 23, 27, 29, 36, 38, 52, 61, 62, 63, 67, 86, 89, 90, 91, 92, 97, 102, 103, 104, 107, 108, 110, 111, 115, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 132, 134, 135, 136, 137, 138, 139, 140, 142, 153, 154, 169, 172, 173, 175, 178, 182, 185, 189, 190, 191, 193, 194, 195, 197, 198, 200, 201, 202, 203, 204, 205, 208, 209, 210, 218, 219, 225, 229, 230, 241, 242, 255, 257, 258, 261, 263, 265, 270, 272, 279, 281, 283, 287, 288], "abstract": [0, 10, 41, 42, 50, 61, 63, 67, 69, 74, 79, 94, 119, 125, 159, 161, 170, 173, 174, 175, 197, 205, 229, 230, 232, 236, 243, 264], "an": [0, 1, 3, 4, 6, 7, 9, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 50, 51, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 109, 111, 112, 113, 115, 116, 119, 120, 122, 124, 127, 129, 135, 137, 139, 140, 142, 143, 146, 147, 148, 152, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 168, 169, 170, 172, 173, 175, 176, 177, 184, 185, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 222, 223, 225, 226, 227, 228, 230, 231, 234, 235, 236, 237, 239, 241, 242, 243, 244, 245, 246, 248, 249, 251, 252, 255, 257, 259, 260, 262, 263, 264, 265, 276, 277, 278, 279, 280, 281, 283, 286, 287, 288], "open": [0, 1, 3, 4, 6, 7, 9, 10, 26, 27, 28, 30, 33, 41, 61, 63, 67, 88, 91, 111, 125, 128, 142, 210, 218, 225, 229, 230, 252, 281, 283], "sourc": [0, 1, 5, 6, 7, 11, 20, 27, 28, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 80, 82, 83, 84, 86, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 103, 104, 107, 109, 111, 112, 113, 114, 116, 117, 119, 120, 121, 122, 124, 125, 142, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 185, 186, 187, 189, 190, 191, 195, 196, 197, 199, 200, 201, 203, 205, 206, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 222, 223, 225, 226, 227, 228, 229, 230, 231, 234, 235, 236, 237, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 257, 258, 262, 274, 281], "written": [0, 3, 6, 7, 11, 18, 20, 39, 43, 49, 52, 53, 57, 61, 66, 69, 73, 79, 84, 86, 90, 91, 100, 101, 129, 135, 142, 175, 191, 192, 193, 194, 197, 198, 206, 210, 213, 217, 220, 223, 226, 243, 262, 264, 280, 281, 282, 287], "pure": [0, 3, 11, 26, 28, 35, 62, 67, 88, 91, 94, 111, 139, 180, 200, 201, 203, 206, 210, 230, 248], "It": [0, 1, 3, 4, 5, 6, 7, 10, 11, 12, 16, 18, 19, 20, 22, 25, 26, 28, 29, 30, 33, 35, 36, 37, 38, 41, 42, 43, 49, 52, 53, 55, 56, 57, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 73, 74, 77, 78, 84, 86, 88, 90, 91, 97, 101, 102, 103, 104, 105, 107, 109, 111, 113, 115, 116, 117, 119, 120, 125, 127, 133, 135, 136, 137, 138, 140, 142, 144, 148, 149, 159, 164, 165, 170, 171, 172, 173, 174, 175, 177, 180, 183, 185, 189, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 205, 206, 207, 210, 213, 217, 218, 219, 220, 222, 223, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 241, 242, 243, 244, 245, 246, 249, 255, 258, 259, 260, 262, 264, 265, 276, 277, 279, 280, 281, 282, 283, 285, 286, 287], "built": [0, 1, 3, 6, 7, 11, 12, 15, 36, 38, 44, 61, 67, 88, 97, 125, 142, 198, 201, 210, 211, 215, 226, 229, 230, 236, 245, 248, 249, 281, 282, 286], "focu": [0, 10, 18, 71, 228, 281], "extens": [0, 3, 6, 7, 18, 20, 52, 61, 66, 67, 73, 77, 88, 97, 122, 142, 198, 200, 201, 203, 204, 205, 206, 210, 220, 222, 226, 228, 229, 242, 243, 252, 280, 287], "eas": [0, 125, 194, 196, 210, 213], "through": [0, 1, 4, 6, 11, 12, 18, 20, 22, 26, 27, 29, 31, 33, 41, 43, 52, 53, 55, 60, 61, 62, 65, 66, 69, 71, 72, 73, 74, 75, 77, 86, 90, 91, 97, 101, 104, 105, 109, 116, 120, 125, 127, 135, 140, 146, 147, 185, 196, 197, 203, 205, 210, 216, 220, 222, 226, 228, 229, 230, 231, 242, 248, 255, 257, 262, 265, 278, 279, 280, 285], "both": [0, 3, 4, 6, 7, 10, 11, 12, 15, 18, 19, 20, 22, 24, 25, 26, 29, 34, 35, 41, 42, 43, 53, 56, 57, 59, 60, 61, 62, 66, 67, 69, 76, 85, 86, 88, 91, 92, 97, 101, 103, 104, 105, 111, 116, 119, 120, 127, 129, 130, 136, 139, 147, 148, 159, 165, 172, 175, 180, 185, 189, 193, 194, 196, 197, 198, 200, 201, 203, 205, 206, 208, 209, 210, 212, 217, 218, 219, 220, 222, 223, 226, 228, 229, 231, 235, 241, 243, 248, 249, 255, 257, 277, 280, 281, 282, 287, 288], "interact": [0, 11, 14, 26, 34, 61, 75, 88, 95, 97, 142, 172, 190, 194, 200, 201, 222, 230, 246, 253, 266, 274, 279, 281, 282, 286, 287], "programmat": [0, 11, 14, 15, 30, 31, 229, 260], "applic": [0, 7, 10, 23, 26, 44, 45, 51, 52, 53, 54, 61, 62, 67, 88, 92, 97, 101, 104, 107, 119, 120, 124, 125, 135, 139, 141, 142, 159, 160, 185, 189, 193, 198, 203, 204, 205, 206, 210, 212, 217, 223, 226, 229, 243, 248, 255, 262, 263, 270, 281], "These": [0, 3, 6, 7, 10, 11, 12, 13, 14, 16, 18, 19, 20, 31, 32, 34, 42, 43, 52, 60, 61, 62, 63, 69, 86, 88, 91, 97, 103, 105, 111, 119, 120, 121, 127, 129, 133, 139, 142, 165, 170, 171, 185, 186, 191, 193, 194, 197, 198, 199, 200, 201, 203, 206, 210, 220, 223, 226, 227, 229, 230, 232, 237, 241, 242, 243, 248, 262, 277, 280, 283, 286, 287], "characterist": [0, 63, 79, 97, 193, 199, 201, 203, 204, 226, 228, 283], "have": [0, 1, 4, 5, 6, 7, 11, 12, 15, 16, 18, 19, 20, 22, 24, 25, 27, 28, 29, 31, 33, 35, 37, 38, 39, 41, 42, 43, 44, 45, 51, 52, 53, 54, 57, 59, 60, 61, 62, 63, 65, 66, 67, 69, 71, 72, 76, 77, 79, 84, 85, 86, 88, 90, 91, 92, 93, 94, 97, 100, 101, 102, 103, 104, 105, 109, 111, 112, 114, 115, 119, 120, 122, 125, 126, 127, 133, 135, 139, 142, 159, 161, 164, 168, 170, 172, 173, 174, 175, 177, 178, 179, 180, 183, 184, 185, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 210, 212, 213, 215, 217, 218, 219, 220, 222, 223, 226, 228, 229, 230, 231, 234, 236, 237, 239, 240, 241, 243, 244, 245, 248, 249, 251, 255, 257, 259, 260, 261, 262, 265, 276, 277, 279, 280, 281, 282, 283, 286, 287, 288], "led": 0, "becom": [0, 4, 6, 7, 10, 11, 12, 16, 18, 52, 57, 60, 61, 62, 65, 84, 89, 97, 103, 190, 193, 197, 198, 200, 207, 210, 213, 219, 226, 229, 230, 236, 251, 258, 260, 287], "popular": [0, 3, 62, 102, 142, 281], "librari": [0, 3, 4, 6, 10, 11, 18, 20, 28, 32, 33, 43, 61, 62, 66, 86, 88, 89, 97, 102, 115, 125, 142, 196, 200, 201, 230, 241, 242, 243, 248, 249, 276, 279, 280, 281], "scientif": [0, 11, 33, 61, 142], "ecosystem": 0, "thi": [0, 1, 3, 4, 5, 6, 7, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 101, 102, 103, 104, 105, 107, 108, 109, 111, 112, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 146, 147, 148, 149, 150, 152, 154, 155, 156, 158, 159, 161, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 184, 185, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 234, 235, 236, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 253, 255, 257, 258, 259, 260, 261, 262, 263, 264, 266, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288], "paper": [0, 6, 101, 127, 194, 205, 206, 219, 220, 223, 226, 230], "present": [0, 3, 7, 10, 11, 12, 16, 41, 42, 45, 48, 52, 53, 55, 59, 61, 64, 88, 97, 101, 104, 107, 109, 111, 120, 127, 175, 177, 185, 187, 190, 191, 196, 197, 203, 204, 205, 209, 210, 223, 229, 243, 249, 252, 258, 259, 260, 264, 267, 288], "architectur": [0, 142, 200, 241], "descript": [0, 4, 6, 7, 10, 23, 32, 42, 44, 51, 69, 88, 101, 147, 165, 172, 183, 193, 194, 195, 210, 234, 241, 243, 245, 246, 266, 284], "its": [0, 3, 4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 31, 35, 37, 38, 39, 42, 43, 44, 45, 49, 51, 52, 53, 60, 61, 62, 63, 66, 67, 69, 71, 73, 77, 79, 86, 88, 89, 91, 92, 94, 97, 101, 103, 104, 105, 107, 111, 115, 116, 119, 120, 122, 125, 127, 128, 129, 135, 136, 139, 140, 142, 143, 148, 154, 160, 161, 163, 164, 169, 170, 173, 175, 180, 182, 185, 186, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 216, 217, 218, 222, 225, 226, 228, 229, 230, 234, 235, 236, 241, 244, 245, 248, 249, 252, 255, 258, 259, 260, 262, 265, 281, 282, 283, 286, 287], "featur": [0, 3, 4, 7, 10, 12, 13, 20, 32, 33, 61, 63, 65, 92, 103, 125, 135, 142, 192, 210, 226, 230, 239, 243, 246, 263, 272, 275, 280, 281, 285, 287], "discuss": [0, 4, 6, 7, 10, 12, 13, 14, 16, 18, 19, 20, 32, 44, 52, 62, 69, 101, 115, 120, 125, 135, 139, 140, 184, 192, 193, 194, 200, 236, 245, 266, 276, 278, 279, 281, 282, 284, 286, 287], "select": [0, 1, 13, 14, 27, 32, 43, 45, 52, 53, 60, 61, 62, 70, 75, 89, 91, 92, 101, 103, 117, 140, 180, 190, 200, 201, 203, 204, 206, 210, 219, 222, 228], "submodul": [0, 3, 4, 6, 11, 43, 115, 197, 201, 203, 205], "The": [0, 1, 3, 5, 6, 7, 8, 11, 12, 14, 16, 17, 19, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 41, 42, 43, 45, 47, 49, 50, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 112, 113, 115, 116, 117, 119, 120, 121, 122, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 142, 143, 144, 146, 147, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 184, 185, 186, 187, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 239, 241, 242, 243, 244, 245, 246, 248, 249, 251, 252, 253, 255, 257, 258, 259, 260, 263, 264, 265, 272, 276, 277, 279, 280, 282, 283, 284, 285, 286, 287, 288], "supplementari": 0, "materi": [0, 104, 146, 285], "provid": [0, 1, 3, 4, 6, 7, 10, 13, 14, 16, 17, 18, 19, 20, 23, 24, 28, 32, 35, 41, 42, 43, 44, 50, 51, 52, 53, 59, 60, 61, 63, 65, 69, 70, 72, 77, 80, 83, 84, 88, 89, 91, 92, 94, 97, 98, 100, 101, 102, 103, 105, 107, 109, 115, 116, 119, 120, 122, 124, 127, 128, 129, 130, 135, 136, 137, 138, 139, 140, 142, 143, 148, 149, 169, 177, 178, 179, 183, 184, 185, 186, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 205, 206, 207, 208, 209, 210, 213, 215, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 235, 236, 241, 242, 243, 245, 246, 248, 249, 251, 255, 258, 259, 260, 262, 263, 265, 277, 281, 282, 283, 287], "addit": [0, 3, 4, 7, 10, 11, 12, 14, 16, 33, 43, 51, 52, 53, 60, 61, 67, 69, 73, 79, 81, 85, 86, 88, 89, 91, 94, 97, 103, 108, 109, 111, 115, 116, 120, 139, 140, 143, 161, 173, 174, 177, 190, 193, 194, 195, 196, 197, 198, 199, 200, 203, 205, 206, 210, 216, 219, 220, 222, 223, 226, 227, 228, 229, 230, 241, 242, 243, 245, 246, 248, 249, 251, 259, 279, 281, 282, 283, 286, 287], "exampl": [0, 2, 3, 4, 5, 7, 10, 11, 12, 14, 15, 16, 18, 19, 23, 26, 27, 29, 31, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 83, 84, 86, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 107, 109, 111, 113, 114, 116, 117, 119, 120, 122, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 140, 142, 144, 146, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 169, 170, 172, 173, 174, 175, 176, 177, 179, 181, 182, 185, 186, 187, 189, 190, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 211, 212, 213, 215, 216, 218, 219, 222, 223, 225, 226, 227, 228, 229, 234, 236, 237, 239, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 255, 257, 258, 260, 262, 263, 264, 265, 270, 272, 273, 276, 277, 278, 279, 280, 282, 283, 285, 286, 288], "further": [0, 3, 5, 18, 20, 22, 38, 42, 62, 67, 69, 73, 86, 88, 93, 94, 97, 103, 104, 108, 109, 116, 119, 120, 140, 147, 193, 195, 196, 197, 203, 205, 206, 219, 220, 222, 226, 230, 236, 280, 281], "outlin": [0, 3, 4, 18, 20, 59, 88, 197, 226], "detail": [0, 3, 4, 5, 6, 7, 8, 10, 11, 13, 15, 18, 20, 32, 42, 52, 61, 63, 66, 68, 69, 86, 87, 88, 89, 92, 97, 101, 109, 119, 120, 125, 140, 142, 147, 165, 169, 185, 187, 195, 196, 197, 203, 205, 212, 217, 222, 223, 224, 226, 227, 230, 235, 236, 241, 244, 246, 249, 260, 261, 262, 263, 266, 270, 277, 279, 283, 284, 286], "volum": [0, 6, 43, 60, 69, 86, 195, 204, 220, 223, 226, 245, 255], "page": [0, 1, 3, 4, 6, 7, 10, 11, 12, 18, 19, 22, 23, 25, 26, 30, 32, 43, 44, 60, 66, 86, 101, 102, 119, 120, 142, 180, 196, 199, 200, 201, 204, 210, 220, 223, 246, 264, 287], "journal": [0, 6, 60, 66, 101, 112, 204, 222, 245], "issn": 0, "2376": 0, "5992": 0, "url": [0, 62, 246], "bsd": [0, 1, 3, 281], "licens": [0, 1, 3, 281], "so": [0, 3, 4, 6, 7, 10, 11, 12, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 49, 50, 52, 53, 55, 57, 59, 61, 62, 65, 67, 69, 71, 73, 74, 75, 77, 83, 84, 85, 86, 88, 89, 90, 91, 92, 94, 97, 98, 101, 103, 104, 105, 111, 115, 119, 120, 125, 127, 129, 135, 136, 137, 139, 142, 143, 148, 159, 161, 169, 171, 172, 173, 175, 177, 179, 180, 184, 185, 194, 195, 196, 197, 198, 199, 200, 201, 203, 205, 206, 207, 208, 209, 210, 211, 212, 217, 218, 219, 220, 222, 223, 225, 226, 227, 228, 229, 230, 234, 235, 239, 241, 242, 245, 246, 248, 249, 251, 261, 265, 276, 277, 279, 281, 282, 283, 286, 287, 288], "you": [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 15, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 37, 38, 39, 41, 43, 44, 52, 53, 60, 61, 62, 63, 65, 67, 68, 69, 73, 75, 77, 79, 80, 85, 86, 88, 89, 91, 92, 94, 95, 97, 98, 101, 102, 103, 111, 113, 114, 115, 119, 120, 121, 122, 125, 126, 136, 137, 139, 140, 142, 164, 169, 170, 173, 175, 184, 185, 187, 191, 193, 194, 196, 197, 198, 199, 200, 201, 203, 205, 206, 207, 210, 211, 213, 217, 218, 222, 223, 226, 227, 228, 229, 230, 234, 235, 236, 239, 241, 242, 243, 244, 246, 248, 249, 252, 259, 260, 261, 262, 275, 276, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288], "free": [0, 10, 11, 22, 27, 28, 33, 41, 42, 43, 51, 52, 57, 61, 73, 88, 92, 94, 97, 101, 104, 105, 109, 112, 119, 135, 144, 164, 182, 185, 192, 196, 197, 201, 203, 205, 206, 210, 212, 218, 220, 222, 223, 226, 228, 229, 236, 248, 281], "howev": [0, 1, 3, 4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 22, 25, 26, 29, 36, 38, 43, 52, 53, 57, 60, 61, 62, 63, 66, 67, 69, 71, 86, 88, 91, 92, 97, 101, 102, 103, 104, 107, 119, 125, 139, 143, 175, 194, 195, 196, 197, 198, 200, 201, 203, 205, 206, 207, 209, 210, 211, 217, 218, 219, 220, 222, 226, 227, 228, 229, 241, 242, 249, 259, 260, 264, 276, 279, 281, 283, 287, 288], "like": [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 15, 18, 19, 20, 27, 29, 30, 31, 32, 33, 43, 44, 46, 52, 53, 60, 61, 62, 65, 66, 67, 69, 71, 81, 84, 88, 89, 91, 92, 94, 95, 96, 97, 101, 102, 103, 107, 111, 115, 119, 122, 125, 127, 136, 139, 140, 142, 143, 157, 159, 169, 170, 173, 174, 175, 180, 184, 185, 189, 191, 193, 196, 197, 198, 200, 201, 202, 203, 205, 206, 208, 209, 210, 213, 217, 218, 219, 220, 222, 223, 226, 227, 228, 229, 230, 231, 234, 236, 237, 239, 241, 242, 243, 244, 248, 249, 251, 252, 259, 260, 262, 264, 276, 277, 279, 280, 281, 282, 283, 287], "academ": [0, 42, 45, 204], "commerci": [0, 281], "creat": [0, 1, 3, 4, 5, 6, 7, 9, 11, 18, 19, 24, 25, 26, 27, 29, 30, 31, 37, 42, 43, 44, 50, 52, 53, 61, 62, 63, 65, 67, 68, 69, 71, 73, 74, 76, 77, 82, 84, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 101, 102, 103, 104, 107, 111, 116, 119, 120, 122, 125, 128, 129, 130, 132, 134, 136, 138, 139, 140, 142, 143, 152, 154, 156, 160, 163, 164, 165, 169, 170, 172, 173, 175, 178, 181, 184, 185, 187, 189, 193, 194, 196, 197, 199, 200, 201, 203, 205, 206, 207, 210, 217, 222, 226, 229, 230, 231, 235, 236, 241, 242, 243, 245, 246, 248, 249, 255, 260, 262, 277, 279, 282, 283, 286, 287, 288], "fork": [0, 5, 7, 10, 127], "deriv": [0, 6, 10, 11, 17, 20, 26, 41, 42, 43, 45, 51, 52, 61, 63, 67, 68, 69, 71, 78, 83, 84, 86, 88, 89, 91, 94, 97, 107, 111, 115, 117, 119, 120, 124, 127, 129, 130, 132, 135, 137, 138, 139, 140, 164, 173, 177, 180, 181, 184, 185, 187, 189, 190, 191, 193, 196, 197, 198, 201, 203, 205, 206, 207, 210, 212, 220, 222, 226, 227, 228, 232, 237, 243, 255, 258, 259, 278, 281, 288], "long": [0, 6, 7, 8, 22, 31, 43, 53, 60, 61, 62, 64, 74, 86, 88, 89, 91, 97, 101, 104, 105, 127, 190, 206, 207, 210, 219, 220, 228, 230, 242, 251, 258, 279, 282], "copi": [0, 1, 5, 10, 12, 18, 44, 53, 54, 61, 77, 97, 101, 102, 199, 201, 203, 205, 209, 210, 217, 228, 241, 248, 251, 286], "statement": [0, 6, 18, 19, 20, 33, 42, 43, 61, 69, 86, 91, 94, 125, 154, 210, 230, 239, 243, 248], "redistribut": [0, 206], "see": [0, 1, 3, 4, 7, 8, 10, 11, 12, 15, 16, 18, 19, 20, 21, 32, 36, 37, 38, 39, 41, 42, 43, 47, 49, 52, 53, 54, 57, 60, 62, 63, 66, 67, 68, 69, 73, 77, 78, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 94, 97, 98, 101, 102, 103, 109, 115, 119, 120, 131, 133, 137, 139, 140, 144, 147, 150, 151, 160, 164, 165, 169, 170, 171, 172, 174, 175, 178, 180, 185, 190, 193, 195, 196, 197, 198, 199, 200, 201, 203, 205, 206, 207, 209, 210, 212, 213, 216, 217, 218, 219, 220, 222, 223, 226, 227, 228, 229, 230, 235, 236, 239, 241, 242, 243, 244, 245, 246, 249, 250, 255, 257, 265, 276, 277, 279, 281, 282, 283, 285, 286, 287, 288], "file": [0, 1, 3, 4, 5, 6, 7, 11, 12, 43, 97, 125, 142, 164, 210, 217, 220, 222, 239, 241, 242, 243, 249, 252], "That": [0, 4, 7, 11, 12, 18, 19, 20, 61, 62, 67, 91, 97, 135, 172, 177, 183, 193, 194, 197, 198, 200, 201, 203, 205, 216, 217, 226, 230, 242, 243, 249, 276, 279, 282, 287], "said": [0, 4, 11, 35, 39, 43, 47, 101, 180, 191, 193, 194, 198, 226, 229, 230, 255, 262], "although": [0, 3, 4, 6, 7, 11, 12, 15, 16, 18, 20, 25, 53, 61, 62, 67, 73, 85, 86, 89, 91, 92, 94, 97, 101, 104, 115, 127, 142, 197, 200, 201, 203, 205, 206, 218, 219, 222, 223, 228, 242, 248, 249, 279, 282, 287], "requir": [0, 3, 6, 7, 8, 10, 11, 12, 20, 27, 31, 33, 43, 52, 61, 62, 64, 65, 69, 71, 72, 74, 75, 78, 80, 91, 97, 100, 101, 102, 103, 104, 109, 115, 116, 119, 120, 122, 124, 125, 127, 129, 136, 140, 149, 172, 184, 185, 187, 195, 196, 197, 200, 201, 203, 205, 207, 210, 213, 219, 220, 223, 226, 228, 229, 230, 234, 241, 242, 243, 244, 246, 248, 249, 258, 259, 260, 283, 285], "conveni": [0, 1, 10, 11, 12, 24, 26, 31, 34, 41, 43, 53, 61, 62, 66, 69, 88, 91, 103, 125, 142, 184, 187, 193, 194, 196, 197, 198, 199, 200, 201, 205, 208, 217, 218, 222, 228, 234, 235, 242, 244, 245, 249, 262, 277, 279], "pleas": [0, 4, 6, 7, 9, 10, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 39, 41, 61, 69, 73, 86, 101, 115, 120, 125, 135, 139, 140, 147, 148, 169, 184, 194, 195, 196, 197, 203, 204, 218, 222, 223, 228, 229, 249, 255, 260, 284, 288], "when": [0, 1, 3, 6, 7, 8, 10, 11, 12, 14, 15, 16, 18, 19, 20, 22, 26, 28, 29, 30, 33, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 52, 53, 54, 59, 60, 61, 62, 63, 65, 66, 67, 69, 70, 71, 73, 74, 75, 76, 77, 78, 85, 88, 89, 91, 92, 93, 97, 101, 102, 103, 107, 109, 111, 112, 115, 119, 125, 127, 133, 135, 136, 137, 138, 139, 140, 143, 148, 149, 154, 159, 160, 164, 167, 169, 177, 178, 179, 184, 190, 193, 194, 196, 197, 198, 200, 201, 203, 205, 206, 207, 209, 210, 211, 212, 216, 217, 218, 219, 220, 222, 223, 226, 227, 228, 229, 230, 234, 235, 239, 241, 242, 243, 244, 246, 248, 249, 251, 252, 254, 259, 277, 279, 281, 282, 287, 288], "your": [0, 1, 3, 4, 5, 6, 7, 9, 10, 12, 20, 22, 23, 24, 25, 27, 29, 30, 31, 33, 37, 61, 62, 88, 89, 97, 102, 103, 111, 115, 119, 137, 139, 194, 196, 210, 217, 222, 226, 229, 230, 248, 249, 277, 281, 283, 284, 286, 287], "work": [0, 1, 3, 4, 6, 10, 11, 12, 15, 16, 18, 19, 20, 22, 28, 33, 36, 38, 41, 42, 43, 52, 53, 54, 61, 62, 65, 69, 86, 88, 90, 91, 92, 94, 97, 98, 101, 103, 115, 119, 125, 127, 136, 140, 142, 155, 159, 164, 168, 169, 170, 171, 174, 177, 187, 194, 195, 196, 197, 198, 199, 200, 201, 203, 205, 206, 210, 217, 218, 219, 220, 222, 223, 226, 228, 229, 230, 236, 241, 242, 243, 245, 248, 249, 250, 251, 259, 260, 279, 280, 281, 282, 283, 286, 287], "also": [0, 1, 3, 4, 7, 8, 10, 11, 12, 14, 16, 18, 19, 20, 22, 23, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 41, 42, 43, 50, 52, 53, 60, 62, 63, 65, 66, 67, 68, 69, 73, 77, 79, 81, 83, 84, 86, 88, 90, 91, 92, 95, 97, 98, 101, 102, 103, 104, 105, 107, 108, 109, 111, 115, 116, 117, 119, 120, 124, 125, 127, 128, 129, 130, 133, 136, 137, 138, 139, 140, 142, 143, 144, 148, 158, 159, 161, 165, 169, 174, 175, 178, 180, 184, 185, 187, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 205, 206, 207, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 222, 223, 225, 226, 227, 228, 229, 230, 231, 234, 235, 236, 239, 241, 242, 243, 244, 245, 246, 249, 251, 255, 258, 259, 260, 261, 262, 264, 265, 276, 277, 279, 281, 282, 283, 286, 287, 288], "consid": [0, 4, 7, 10, 11, 12, 15, 18, 19, 20, 31, 39, 42, 43, 50, 53, 56, 60, 61, 62, 64, 65, 66, 67, 69, 71, 73, 77, 85, 86, 88, 89, 90, 91, 92, 94, 97, 101, 111, 115, 116, 122, 126, 137, 143, 165, 172, 175, 180, 186, 190, 191, 193, 196, 197, 198, 199, 200, 201, 203, 205, 206, 207, 209, 210, 213, 217, 222, 223, 226, 227, 228, 229, 230, 241, 243, 248, 258, 260, 262, 264, 265, 279, 283, 287], "contribut": [0, 3, 4, 5, 6, 7, 33, 77, 101, 120, 130, 133, 200, 203, 205, 226, 265, 284], "all": [0, 1, 3, 4, 5, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 27, 31, 32, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 49, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 74, 76, 77, 78, 86, 88, 90, 91, 92, 93, 94, 97, 100, 101, 102, 103, 104, 105, 107, 109, 111, 112, 116, 117, 119, 120, 122, 124, 125, 127, 128, 130, 135, 137, 139, 142, 143, 149, 154, 155, 159, 169, 171, 172, 173, 175, 177, 178, 179, 180, 182, 183, 190, 191, 194, 195, 196, 197, 198, 199, 200, 201, 203, 205, 206, 207, 209, 210, 211, 212, 213, 216, 217, 218, 219, 220, 222, 223, 225, 226, 227, 228, 229, 230, 231, 234, 236, 237, 239, 241, 242, 243, 244, 246, 248, 249, 251, 255, 257, 259, 261, 262, 263, 264, 266, 276, 277, 279, 281, 282, 283, 286, 287, 288], "chang": [0, 1, 6, 7, 8, 11, 12, 18, 33, 42, 43, 44, 52, 53, 57, 60, 61, 62, 65, 66, 67, 69, 75, 76, 86, 88, 91, 97, 101, 103, 104, 107, 111, 119, 122, 125, 127, 132, 149, 160, 170, 180, 181, 184, 191, 193, 194, 195, 196, 197, 198, 199, 203, 206, 207, 210, 217, 218, 219, 220, 222, 225, 226, 228, 229, 230, 231, 241, 248, 249, 260, 262, 276, 279, 282, 286], "back": [0, 20, 25, 26, 28, 42, 43, 57, 60, 61, 62, 67, 69, 76, 77, 83, 85, 86, 88, 89, 92, 101, 102, 111, 169, 190, 193, 200, 205, 206, 208, 210, 220, 226, 228, 231, 232], "we": [0, 3, 4, 5, 6, 7, 10, 12, 16, 18, 19, 20, 22, 23, 24, 25, 27, 29, 30, 31, 36, 37, 38, 41, 42, 43, 44, 45, 50, 51, 52, 53, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 69, 74, 79, 84, 85, 86, 88, 89, 90, 91, 92, 97, 98, 100, 101, 111, 114, 115, 116, 117, 119, 120, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 142, 147, 150, 158, 161, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 177, 178, 180, 184, 185, 187, 189, 191, 193, 194, 196, 197, 198, 199, 200, 201, 203, 205, 206, 207, 209, 210, 217, 218, 220, 222, 223, 225, 226, 227, 228, 230, 234, 236, 241, 242, 243, 245, 246, 248, 249, 255, 259, 260, 261, 262, 264, 265, 276, 277, 279, 281, 282, 283, 286, 287, 288], "can": [0, 1, 3, 4, 5, 6, 7, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 23, 27, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 56, 57, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 79, 80, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 97, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 113, 115, 116, 117, 119, 120, 121, 122, 124, 125, 128, 129, 130, 133, 135, 136, 137, 138, 139, 140, 142, 143, 147, 148, 149, 154, 156, 159, 163, 164, 165, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 184, 185, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 216, 217, 218, 219, 220, 222, 223, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 239, 241, 242, 243, 245, 246, 248, 249, 251, 258, 259, 260, 261, 262, 264, 265, 276, 277, 279, 281, 282, 283, 285, 286, 287, 288], "incorpor": [0, 3, 16, 198, 222], "u": [0, 12, 16, 18, 19, 20, 26, 35, 41, 42, 43, 52, 57, 60, 61, 62, 64, 75, 78, 83, 86, 88, 94, 97, 101, 116, 119, 120, 121, 124, 125, 127, 129, 132, 135, 136, 137, 139, 140, 142, 143, 147, 148, 159, 164, 170, 180, 189, 191, 193, 195, 196, 197, 198, 199, 203, 205, 206, 209, 210, 217, 220, 222, 223, 226, 227, 228, 229, 230, 235, 249, 262, 279, 281, 282, 283], "benefit": [0, 3, 20, 24, 43, 115, 139, 190], "end": [0, 3, 6, 10, 12, 16, 18, 19, 20, 23, 27, 29, 41, 42, 43, 51, 52, 57, 59, 60, 61, 62, 66, 67, 69, 71, 73, 77, 86, 89, 91, 92, 94, 97, 101, 103, 104, 105, 107, 124, 127, 129, 132, 137, 138, 139, 140, 180, 185, 190, 191, 194, 195, 199, 203, 210, 213, 216, 218, 219, 223, 226, 227, 228, 229, 230, 231, 241, 243, 244, 246, 248, 251, 262, 277, 281, 283, 287], "develop": [0, 4, 6, 7, 8, 9, 11, 16, 18, 20, 32, 33, 41, 44, 59, 103, 142, 179, 196, 197, 200, 203, 228, 229, 281, 284], "team": [0, 4], "member": [0, 6, 10, 18, 22, 42, 50, 52, 62, 84, 107, 197, 218, 235], "list": [0, 3, 4, 6, 7, 13, 18, 25, 26, 27, 28, 29, 30, 31, 33, 35, 38, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 83, 84, 86, 88, 89, 90, 91, 92, 94, 97, 100, 101, 102, 103, 104, 111, 116, 119, 120, 124, 127, 129, 132, 136, 137, 138, 142, 143, 148, 159, 161, 164, 165, 169, 170, 172, 173, 175, 177, 185, 189, 194, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 216, 218, 219, 220, 222, 223, 226, 227, 228, 229, 230, 231, 234, 235, 236, 239, 241, 242, 243, 244, 245, 246, 248, 249, 251, 276, 280, 281, 283, 286, 287, 288], "github": [0, 1, 3, 4, 5, 7, 10, 26, 30, 33, 41, 61, 77, 88, 97, 179, 218, 229, 283], "found": [0, 1, 3, 4, 6, 7, 18, 19, 22, 26, 41, 44, 52, 53, 55, 57, 59, 61, 62, 63, 71, 72, 77, 86, 88, 97, 101, 111, 117, 119, 120, 121, 139, 142, 179, 193, 197, 198, 200, 205, 206, 207, 210, 212, 213, 216, 217, 220, 223, 226, 227, 228, 229, 230, 234, 248, 249, 251, 252, 286], "zotero": 0, "start": [1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 20, 28, 32, 33, 42, 43, 45, 50, 51, 52, 53, 57, 60, 61, 62, 63, 69, 91, 92, 94, 97, 100, 101, 102, 104, 105, 107, 125, 127, 137, 138, 170, 171, 174, 178, 193, 194, 196, 200, 203, 205, 206, 210, 213, 216, 218, 219, 220, 223, 226, 228, 229, 230, 231, 234, 241, 242, 248, 250, 251, 261, 275, 276, 279, 281], "either": [1, 3, 6, 7, 10, 11, 12, 18, 19, 20, 22, 25, 26, 27, 28, 30, 35, 39, 41, 42, 45, 53, 60, 61, 62, 65, 66, 67, 69, 76, 78, 84, 86, 88, 89, 91, 92, 97, 101, 111, 116, 119, 120, 121, 124, 125, 138, 140, 142, 159, 165, 172, 175, 177, 190, 194, 196, 198, 199, 200, 201, 203, 205, 206, 210, 212, 217, 218, 219, 220, 223, 226, 227, 228, 229, 230, 231, 234, 235, 242, 248, 249, 255, 264, 279, 282, 283], "machin": [1, 3, 5, 6, 211, 222, 226, 276], "imag": [1, 3, 52, 119, 131, 136, 142, 144, 148, 197, 201, 203, 210, 218, 229], "contain": [1, 3, 4, 6, 7, 10, 11, 12, 14, 19, 20, 24, 25, 26, 27, 29, 30, 31, 34, 36, 37, 41, 42, 43, 44, 52, 53, 57, 59, 60, 63, 64, 65, 67, 69, 70, 72, 74, 75, 76, 77, 78, 87, 88, 90, 91, 92, 94, 97, 100, 101, 102, 103, 104, 106, 109, 110, 112, 116, 120, 121, 122, 124, 127, 129, 139, 140, 142, 143, 144, 145, 146, 148, 149, 150, 162, 165, 167, 170, 172, 175, 184, 194, 195, 196, 197, 198, 199, 200, 201, 203, 206, 210, 211, 212, 217, 218, 220, 222, 223, 224, 226, 227, 228, 229, 230, 234, 235, 236, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 255, 258, 266, 277, 279, 283, 287], "them": [1, 3, 4, 5, 6, 7, 10, 11, 12, 15, 16, 18, 19, 20, 22, 25, 26, 27, 29, 31, 34, 37, 39, 42, 43, 50, 52, 53, 60, 61, 62, 63, 65, 66, 69, 72, 77, 79, 81, 83, 84, 86, 90, 91, 94, 97, 100, 101, 102, 115, 120, 122, 125, 127, 129, 130, 135, 137, 139, 140, 142, 148, 152, 168, 169, 175, 177, 180, 183, 185, 191, 193, 194, 197, 198, 200, 201, 203, 205, 206, 207, 209, 210, 211, 217, 218, 219, 220, 222, 223, 226, 228, 229, 231, 232, 241, 243, 245, 248, 258, 276, 277, 279, 281, 282, 287], "If": [1, 3, 4, 6, 7, 10, 11, 12, 14, 15, 16, 18, 19, 20, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 50, 52, 53, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 83, 84, 86, 88, 89, 90, 91, 92, 94, 97, 98, 100, 101, 102, 103, 104, 109, 111, 112, 114, 115, 116, 117, 119, 120, 121, 122, 124, 125, 126, 137, 138, 139, 140, 142, 143, 148, 152, 156, 159, 165, 169, 170, 171, 172, 173, 175, 183, 184, 185, 186, 187, 189, 190, 191, 194, 196, 197, 198, 199, 200, 201, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 222, 223, 226, 227, 228, 229, 230, 231, 234, 235, 236, 237, 239, 241, 242, 243, 244, 245, 246, 248, 249, 251, 255, 258, 260, 262, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288], "instead": [1, 3, 4, 6, 7, 10, 11, 12, 14, 18, 19, 20, 24, 26, 27, 29, 30, 31, 34, 36, 38, 42, 43, 52, 54, 57, 61, 63, 64, 65, 66, 69, 88, 89, 91, 92, 94, 95, 97, 101, 109, 112, 114, 124, 125, 127, 129, 139, 142, 173, 177, 179, 185, 190, 191, 193, 194, 197, 200, 201, 203, 205, 206, 208, 210, 212, 220, 222, 226, 228, 229, 230, 234, 235, 236, 239, 244, 245, 246, 248, 249, 253, 262, 265, 276, 277, 279, 281, 282, 283, 287, 288], "follow": [1, 3, 4, 6, 7, 10, 12, 14, 16, 18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 30, 31, 33, 36, 38, 41, 42, 43, 44, 50, 51, 52, 53, 54, 57, 60, 61, 62, 65, 66, 67, 69, 73, 75, 77, 84, 85, 86, 88, 91, 92, 94, 97, 101, 102, 104, 105, 107, 119, 120, 125, 127, 135, 136, 137, 138, 139, 140, 142, 144, 148, 167, 170, 172, 175, 178, 180, 185, 191, 193, 194, 195, 196, 197, 198, 203, 204, 205, 206, 208, 209, 210, 211, 212, 217, 219, 220, 222, 223, 226, 227, 228, 229, 230, 231, 234, 235, 236, 241, 244, 245, 248, 249, 252, 259, 260, 262, 276, 277, 279, 280, 282, 283, 287, 288], "specif": [1, 5, 6, 7, 10, 11, 18, 20, 21, 25, 32, 52, 53, 61, 62, 63, 69, 73, 88, 90, 92, 97, 116, 119, 120, 124, 125, 135, 142, 144, 180, 194, 196, 197, 201, 203, 205, 206, 209, 210, 211, 216, 222, 223, 226, 227, 228, 230, 236, 241, 242, 243, 248, 283, 287], "instruct": [1, 3, 5, 6, 7, 9, 10, 12, 16, 21, 32, 43, 210, 228, 242, 243], "below": [1, 3, 4, 6, 7, 10, 12, 18, 20, 22, 26, 29, 30, 31, 33, 41, 42, 43, 51, 52, 53, 61, 62, 66, 68, 69, 70, 71, 77, 78, 84, 86, 88, 92, 97, 100, 101, 103, 104, 105, 111, 116, 119, 120, 124, 125, 127, 129, 130, 131, 136, 137, 138, 139, 142, 169, 175, 180, 185, 194, 195, 196, 197, 199, 206, 210, 211, 213, 219, 222, 223, 225, 226, 227, 228, 229, 230, 241, 243, 248, 249, 251, 260, 262, 265, 266, 283, 287], "mai": [1, 3, 4, 5, 6, 10, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 39, 41, 42, 43, 44, 52, 53, 54, 60, 61, 62, 63, 65, 66, 67, 69, 71, 73, 74, 76, 77, 78, 86, 88, 89, 91, 92, 93, 97, 98, 100, 101, 103, 107, 117, 120, 121, 125, 129, 135, 139, 161, 170, 175, 176, 177, 182, 185, 189, 191, 193, 196, 197, 198, 199, 203, 205, 209, 210, 211, 218, 219, 220, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 234, 236, 239, 241, 242, 243, 244, 245, 246, 248, 249, 251, 252, 262, 264, 276, 277, 279, 282, 283, 287, 288], "choos": [1, 6, 26, 29, 52, 57, 61, 63, 66, 97, 101, 105, 109, 129, 140, 175, 179, 185, 193, 194, 206, 207, 210, 217, 219, 220, 226, 227, 230, 241, 246, 287], "cd": [1, 5, 6, 229, 248], "dockerfil": 1, "htmldoc": 1, "sympy_htmldoc": 1, "option": [1, 4, 5, 6, 7, 8, 12, 20, 22, 24, 36, 38, 41, 43, 52, 59, 60, 61, 62, 63, 64, 65, 67, 70, 71, 74, 75, 77, 78, 80, 88, 89, 92, 94, 97, 98, 101, 102, 103, 104, 109, 111, 115, 116, 117, 119, 120, 121, 124, 142, 148, 159, 164, 165, 167, 170, 172, 177, 184, 185, 190, 196, 197, 198, 199, 200, 201, 205, 206, 207, 209, 210, 211, 212, 213, 215, 217, 218, 219, 222, 223, 226, 227, 228, 229, 230, 235, 236, 241, 242, 243, 246, 248, 249, 255, 280, 286, 287], "now": [1, 2, 3, 5, 7, 10, 12, 16, 18, 19, 20, 22, 33, 42, 43, 53, 61, 62, 66, 69, 72, 77, 78, 83, 85, 86, 90, 97, 101, 111, 116, 119, 124, 125, 128, 130, 133, 135, 142, 143, 178, 180, 185, 190, 193, 194, 197, 198, 200, 203, 206, 207, 211, 218, 219, 220, 222, 223, 226, 228, 229, 230, 231, 236, 241, 242, 249, 260, 261, 279, 281, 282, 287, 288], "skip": [1, 3, 4, 6, 12, 42, 45, 61, 92, 97, 101, 185, 205, 209, 210, 212, 226, 228, 239, 241, 277, 285, 286], "down": [1, 4, 6, 18, 66, 94, 113, 127, 129, 193, 194, 196, 201, 212, 218, 220, 222, 226, 245, 283, 287], "section": [1, 4, 7, 8, 11, 18, 20, 21, 35, 42, 44, 52, 53, 60, 61, 62, 64, 68, 69, 71, 77, 86, 91, 92, 97, 104, 105, 119, 125, 140, 178, 180, 184, 191, 194, 197, 200, 203, 205, 210, 213, 217, 220, 226, 236, 245, 246, 248, 259, 260, 261, 262, 266, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288], "For": [1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 15, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 49, 50, 51, 52, 53, 54, 57, 60, 61, 62, 63, 64, 65, 66, 67, 69, 73, 75, 76, 79, 82, 84, 85, 86, 90, 91, 92, 97, 101, 102, 103, 104, 105, 111, 113, 117, 119, 120, 121, 125, 129, 135, 136, 137, 138, 139, 140, 142, 144, 158, 159, 164, 168, 170, 172, 173, 174, 175, 177, 180, 181, 185, 189, 190, 191, 193, 194, 196, 197, 198, 200, 201, 203, 205, 206, 207, 209, 210, 211, 212, 213, 216, 217, 218, 219, 220, 222, 223, 225, 226, 228, 229, 230, 231, 234, 235, 236, 237, 241, 242, 243, 245, 246, 248, 249, 252, 253, 255, 257, 260, 262, 264, 265, 276, 277, 279, 282, 283, 287, 288], "apt": [1, 5], "get": [1, 2, 4, 6, 7, 8, 10, 15, 16, 18, 19, 20, 26, 28, 29, 30, 33, 34, 37, 38, 41, 42, 43, 45, 50, 51, 53, 54, 56, 57, 60, 61, 62, 63, 65, 66, 67, 69, 74, 84, 86, 88, 90, 94, 97, 101, 103, 104, 109, 111, 114, 120, 125, 128, 129, 137, 138, 139, 142, 147, 148, 155, 159, 164, 169, 170, 171, 172, 177, 180, 194, 198, 200, 201, 203, 205, 206, 207, 208, 209, 210, 212, 218, 219, 220, 222, 223, 226, 227, 228, 229, 230, 231, 232, 236, 237, 242, 248, 249, 250, 252, 255, 259, 276, 279, 281, 282, 283, 286, 287, 288], "python3": [1, 3, 43, 103, 210], "sphinx": [1, 4, 7, 8, 67, 226, 241, 246], "texliv": [1, 3, 210], "recommend": [1, 5, 6, 10, 11, 12, 13, 18, 20, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 42, 43, 61, 62, 65, 92, 115, 137, 142, 169, 185, 193, 198, 199, 200, 201, 207, 223, 226, 229, 235, 239, 246, 259, 260, 285, 288], "dvipng": 1, "librsvg2": 1, "bin": [1, 2, 3, 5, 6, 89, 210, 241, 248], "imagemagick": 1, "docbook2x": 1, "graphviz": [1, 7, 282, 286], "pip": [1, 3, 33, 103], "sudo": 1, "virtual": [1, 4, 8, 33, 61, 77, 194, 280], "environ": [1, 3, 8, 9, 10, 11, 61, 89, 190, 210, 230, 241, 251, 279, 281, 286], "venv": 1, "path": [1, 5, 6, 10, 52, 77, 83, 111, 133, 191, 193, 219, 222, 226, 229, 241, 242, 245, 246, 248, 251, 252, 253, 262], "my": [1, 210, 276], "Then": [1, 5, 11, 16, 18, 52, 57, 60, 61, 86, 90, 97, 101, 117, 120, 122, 132, 134, 135, 140, 144, 172, 180, 193, 197, 198, 200, 203, 205, 207, 210, 217, 220, 222, 223, 226, 228, 249], "activ": [1, 4, 5, 13, 127, 196, 239, 244, 246], "need": [1, 3, 4, 6, 7, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 37, 38, 41, 42, 43, 46, 52, 53, 57, 59, 60, 61, 62, 63, 67, 69, 72, 76, 77, 84, 85, 86, 88, 89, 91, 92, 97, 101, 102, 103, 104, 105, 107, 111, 115, 120, 122, 124, 125, 127, 128, 129, 130, 132, 133, 134, 136, 137, 138, 139, 140, 143, 144, 155, 159, 167, 173, 178, 184, 185, 190, 193, 194, 197, 198, 199, 200, 201, 203, 205, 206, 207, 209, 210, 217, 218, 220, 222, 223, 225, 226, 228, 229, 230, 234, 235, 236, 237, 239, 242, 243, 244, 245, 246, 248, 251, 255, 259, 261, 262, 265, 276, 277, 279, 282, 283, 285, 287], "rerun": [1, 206, 241], "each": [1, 3, 4, 10, 11, 12, 14, 18, 20, 22, 24, 25, 26, 27, 29, 32, 38, 39, 41, 42, 43, 44, 45, 52, 53, 57, 61, 62, 63, 64, 65, 66, 67, 69, 71, 76, 77, 78, 83, 84, 86, 88, 90, 91, 92, 94, 97, 101, 104, 107, 109, 111, 117, 119, 120, 125, 127, 129, 132, 134, 136, 137, 140, 159, 172, 175, 184, 185, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 205, 206, 208, 210, 218, 219, 220, 222, 223, 226, 227, 228, 229, 230, 231, 234, 235, 236, 239, 241, 243, 245, 248, 249, 251, 255, 257, 258, 260, 262, 264, 277, 280, 282, 287, 288], "time": [1, 3, 4, 7, 10, 11, 12, 16, 18, 19, 22, 29, 31, 34, 38, 39, 43, 52, 53, 57, 61, 62, 66, 69, 84, 86, 91, 92, 97, 98, 100, 101, 102, 103, 108, 109, 111, 115, 120, 121, 124, 125, 127, 129, 132, 133, 135, 137, 138, 139, 140, 142, 143, 149, 159, 164, 172, 173, 177, 178, 180, 181, 184, 185, 187, 189, 190, 191, 192, 193, 194, 195, 197, 199, 200, 203, 204, 205, 206, 207, 209, 210, 217, 218, 219, 220, 222, 226, 228, 230, 239, 241, 242, 247, 248, 249, 262, 264, 274, 277, 281, 282, 283], "new": [1, 3, 4, 5, 7, 11, 18, 20, 25, 32, 37, 38, 42, 43, 44, 52, 53, 60, 61, 62, 63, 69, 74, 77, 86, 88, 89, 92, 97, 101, 104, 107, 111, 116, 119, 125, 132, 134, 140, 141, 142, 144, 165, 171, 172, 175, 177, 180, 181, 183, 185, 189, 194, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 210, 217, 220, 222, 223, 226, 228, 229, 230, 231, 241, 242, 246, 249, 255, 257, 259, 275, 276, 279, 282, 283, 285], "termin": [1, 52, 61, 67, 89, 101, 190, 210, 217, 241, 286], "after": [1, 4, 5, 6, 7, 10, 12, 33, 35, 37, 38, 42, 44, 49, 52, 53, 57, 59, 60, 61, 62, 63, 67, 76, 78, 83, 88, 92, 97, 101, 103, 104, 111, 136, 137, 139, 142, 144, 148, 160, 172, 180, 184, 191, 194, 199, 203, 205, 206, 207, 208, 210, 211, 216, 223, 226, 227, 228, 229, 231, 241, 244, 249, 251, 255, 258, 262, 276, 277, 279, 283, 287], "two": [1, 3, 4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 22, 24, 26, 29, 30, 35, 41, 42, 43, 44, 46, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 83, 84, 86, 88, 90, 91, 92, 94, 97, 101, 102, 104, 105, 107, 108, 111, 112, 115, 116, 119, 120, 128, 133, 135, 136, 137, 139, 140, 147, 148, 149, 154, 155, 159, 161, 164, 165, 170, 171, 172, 173, 174, 175, 177, 180, 184, 185, 186, 187, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 205, 206, 207, 209, 210, 211, 212, 217, 218, 219, 220, 222, 223, 226, 227, 228, 229, 230, 231, 232, 235, 245, 248, 249, 255, 258, 260, 261, 262, 264, 276, 277, 280, 282, 283, 287], "method": [1, 3, 4, 6, 7, 11, 12, 17, 18, 22, 24, 25, 26, 28, 29, 30, 37, 38, 39, 41, 42, 43, 44, 45, 52, 53, 54, 60, 61, 62, 63, 64, 65, 67, 68, 69, 72, 73, 74, 75, 77, 80, 83, 85, 86, 88, 90, 92, 93, 94, 97, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 115, 118, 119, 124, 125, 128, 130, 131, 135, 136, 141, 142, 149, 152, 154, 156, 164, 165, 170, 172, 175, 177, 182, 183, 184, 185, 187, 191, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 211, 212, 213, 215, 216, 217, 218, 222, 223, 226, 228, 230, 231, 233, 235, 236, 237, 241, 243, 245, 248, 249, 255, 259, 262, 265, 266, 270, 272, 276, 277, 278, 279, 282, 287], "given": [1, 3, 4, 7, 10, 11, 12, 14, 16, 18, 20, 22, 24, 27, 29, 35, 37, 38, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 57, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 83, 84, 85, 86, 88, 90, 91, 92, 94, 97, 100, 101, 103, 104, 107, 109, 112, 116, 117, 119, 120, 122, 124, 125, 129, 140, 148, 165, 170, 172, 180, 181, 183, 185, 186, 187, 189, 191, 194, 195, 196, 197, 198, 199, 200, 201, 203, 205, 206, 207, 208, 209, 210, 213, 215, 216, 217, 218, 219, 220, 222, 223, 225, 226, 227, 228, 229, 230, 231, 235, 236, 239, 241, 243, 245, 248, 249, 251, 252, 253, 255, 258, 260, 262, 264, 276, 282, 285, 287, 288], "abov": [1, 3, 4, 6, 7, 10, 12, 14, 16, 19, 20, 22, 24, 28, 29, 31, 41, 42, 43, 44, 45, 51, 52, 53, 57, 60, 61, 65, 66, 69, 71, 74, 77, 78, 86, 88, 91, 92, 97, 101, 102, 103, 105, 111, 115, 119, 120, 122, 124, 125, 127, 128, 129, 130, 135, 136, 138, 139, 140, 143, 170, 172, 175, 185, 191, 193, 194, 196, 197, 198, 200, 201, 203, 205, 206, 207, 209, 210, 211, 217, 220, 222, 223, 226, 228, 229, 230, 234, 235, 242, 243, 249, 259, 260, 261, 262, 265, 279, 281, 282, 283, 287], "run": [1, 4, 6, 7, 8, 11, 12, 16, 18, 20, 44, 52, 53, 55, 61, 62, 86, 97, 102, 103, 120, 127, 142, 175, 190, 196, 197, 210, 220, 222, 226, 227, 228, 238, 242, 244, 245, 248, 249, 274, 279, 286], "txt": [1, 210], "mpmath": [1, 3, 5, 11, 20, 27, 28, 43, 66, 69, 97, 102, 142, 200, 201, 210, 218, 228, 244, 249], "error": [1, 3, 4, 6, 7, 10, 14, 18, 19, 24, 25, 26, 27, 28, 29, 31, 34, 41, 43, 50, 53, 60, 61, 62, 67, 71, 76, 86, 88, 97, 100, 101, 103, 125, 194, 195, 198, 200, 201, 203, 207, 210, 212, 218, 226, 227, 228, 229, 230, 241, 242, 243, 246, 248, 251, 255, 276], "packag": [1, 3, 23, 27, 28, 33, 89, 102, 103, 108, 135, 142, 190, 210, 241, 252, 261, 262, 281], "matplotlib": [1, 3, 6, 7, 10, 29, 33, 84, 89, 109, 142, 155, 190, 196, 286], "mayb": [1, 19, 24], "other": [1, 3, 4, 5, 6, 7, 10, 11, 12, 14, 15, 16, 19, 21, 22, 24, 25, 26, 27, 29, 30, 31, 35, 39, 42, 43, 44, 52, 53, 54, 57, 58, 60, 61, 62, 63, 65, 66, 67, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 81, 86, 88, 91, 92, 94, 97, 101, 102, 103, 104, 105, 111, 115, 116, 119, 120, 125, 126, 129, 130, 135, 136, 139, 140, 142, 144, 147, 148, 149, 159, 170, 172, 173, 174, 175, 178, 180, 181, 182, 184, 185, 187, 189, 193, 194, 196, 197, 198, 199, 200, 201, 203, 205, 206, 207, 210, 211, 212, 215, 216, 217, 218, 219, 220, 222, 223, 225, 226, 227, 228, 229, 230, 231, 236, 237, 239, 242, 243, 244, 245, 248, 249, 255, 258, 259, 262, 264, 266, 273, 276, 277, 279, 281, 282, 283, 287], "rpm": 1, "base": [1, 3, 4, 5, 6, 7, 9, 11, 12, 18, 20, 22, 33, 37, 38, 41, 43, 44, 50, 51, 52, 57, 58, 59, 61, 62, 64, 66, 67, 68, 69, 72, 74, 77, 84, 88, 89, 90, 91, 93, 94, 101, 102, 108, 116, 119, 125, 127, 142, 143, 144, 153, 155, 159, 160, 164, 170, 171, 173, 175, 177, 180, 181, 183, 185, 187, 190, 191, 194, 195, 196, 199, 200, 201, 202, 203, 204, 205, 206, 210, 212, 217, 218, 219, 220, 222, 223, 226, 228, 230, 234, 235, 236, 241, 242, 243, 244, 245, 246, 248, 249, 250, 255, 258, 259, 262, 282, 287], "distribut": [1, 3, 33, 52, 59, 61, 69, 77, 88, 104, 105, 174, 198, 201, 206, 210, 236], "prerequisit": 1, "dnf": [1, 91], "scheme": [1, 4, 18, 53, 60, 65, 195, 196, 203, 206, 235], "medium": [1, 20, 144, 145, 148, 149, 159, 203, 272], "tool": [1, 7, 11, 20, 52, 89, 96, 97, 102, 111, 142, 194, 197, 202, 203, 210, 242, 248, 254, 263, 270], "first": [1, 3, 5, 6, 7, 8, 11, 12, 16, 18, 19, 20, 22, 26, 29, 30, 33, 42, 43, 44, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 74, 75, 77, 78, 85, 86, 88, 90, 91, 92, 97, 100, 101, 104, 105, 111, 112, 117, 119, 120, 124, 125, 127, 128, 129, 130, 135, 136, 139, 140, 143, 147, 148, 152, 156, 159, 164, 165, 168, 169, 170, 171, 172, 174, 175, 178, 180, 185, 189, 193, 194, 196, 197, 199, 201, 203, 204, 205, 206, 207, 210, 211, 212, 213, 216, 217, 219, 220, 222, 223, 226, 227, 228, 229, 230, 234, 236, 239, 241, 242, 243, 244, 248, 249, 251, 260, 265, 276, 277, 279, 281, 282, 283, 285, 287, 288], "homebrew": 1, "brew": 1, "sh": 1, "docbook": 1, "librsvg": 1, "conda": [1, 3, 5, 33, 103], "Or": [1, 7, 10, 12, 19, 24, 26, 52, 61, 62, 63, 69, 86, 91, 101, 122, 197, 207, 209, 210, 222, 229, 230, 241, 249, 262, 282, 285], "forg": [1, 3, 103], "make": [1, 3, 4, 6, 7, 8, 10, 11, 12, 14, 16, 18, 19, 20, 22, 27, 28, 30, 34, 37, 38, 39, 41, 43, 44, 51, 52, 60, 61, 62, 63, 64, 65, 66, 67, 69, 73, 77, 88, 89, 91, 97, 100, 101, 102, 103, 104, 105, 107, 120, 124, 125, 127, 128, 132, 133, 137, 139, 140, 142, 155, 172, 177, 190, 193, 196, 199, 200, 201, 203, 205, 206, 207, 209, 210, 213, 218, 219, 220, 222, 226, 227, 228, 229, 234, 236, 239, 241, 242, 243, 244, 246, 248, 249, 259, 264, 265, 279, 280, 281, 282, 283, 287], "success": [1, 7, 42, 52, 61, 69, 86, 88, 101, 119, 127, 185, 197, 203, 205, 218, 219, 226, 229, 230, 248, 255, 257], "tricki": [1, 61, 86], "becaus": [1, 3, 4, 6, 7, 10, 11, 12, 14, 18, 19, 20, 22, 25, 26, 27, 28, 29, 30, 31, 33, 34, 39, 43, 53, 60, 61, 62, 67, 73, 77, 78, 86, 88, 91, 95, 97, 101, 103, 119, 125, 129, 155, 163, 175, 177, 180, 193, 196, 197, 199, 200, 201, 203, 205, 206, 207, 209, 210, 213, 217, 220, 222, 223, 226, 227, 228, 229, 239, 241, 242, 244, 248, 249, 251, 259, 277, 279, 281, 282, 283, 286, 287, 288], "some": [1, 3, 4, 6, 11, 12, 16, 18, 19, 20, 22, 25, 26, 27, 28, 30, 31, 33, 34, 39, 42, 43, 44, 49, 52, 53, 59, 60, 61, 62, 65, 66, 67, 69, 71, 72, 73, 77, 86, 88, 90, 91, 92, 94, 97, 101, 102, 103, 109, 112, 115, 116, 119, 122, 124, 125, 126, 127, 128, 129, 130, 136, 137, 139, 140, 143, 155, 160, 164, 172, 175, 180, 181, 184, 186, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 205, 206, 207, 210, 212, 216, 217, 218, 219, 220, 222, 223, 225, 226, 227, 228, 230, 236, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 255, 257, 258, 260, 262, 266, 276, 277, 279, 281, 282, 283, 285, 286, 287], "avail": [1, 3, 5, 7, 10, 11, 12, 18, 22, 28, 31, 32, 33, 42, 43, 52, 53, 60, 61, 66, 69, 88, 97, 102, 103, 125, 139, 142, 200, 201, 203, 206, 210, 211, 216, 218, 220, 222, 223, 228, 229, 230, 231, 235, 236, 241, 248, 249, 254, 255, 279, 286], "subsystem": [1, 210], "linux": [1, 33], "possibl": [1, 6, 10, 11, 14, 18, 19, 20, 22, 25, 30, 33, 41, 43, 44, 45, 50, 52, 53, 55, 56, 57, 61, 62, 66, 67, 69, 71, 73, 75, 76, 78, 83, 85, 86, 88, 90, 91, 92, 94, 97, 101, 112, 113, 115, 127, 138, 140, 169, 171, 175, 177, 180, 189, 191, 195, 196, 197, 198, 200, 201, 203, 205, 206, 207, 209, 210, 211, 212, 216, 217, 218, 219, 222, 223, 226, 227, 228, 229, 230, 231, 236, 241, 243, 244, 245, 246, 248, 249, 259, 260, 262, 278, 279, 282, 287], "workaround": [1, 249], "solut": [1, 10, 11, 12, 14, 16, 19, 20, 23, 24, 43, 57, 61, 62, 67, 69, 71, 79, 83, 84, 85, 88, 97, 101, 104, 108, 115, 120, 125, 129, 135, 139, 144, 180, 184, 197, 203, 204, 205, 206, 207, 208, 209, 218, 223, 225, 226, 227, 228, 288], "shell": [1, 12, 89, 142, 209], "tutori": [1, 7, 11, 12, 16, 17, 33, 77, 125, 142, 198, 209, 210, 226, 249, 279, 282, 284, 285, 286, 287, 288], "com": [1, 3, 4, 5, 6, 7, 10, 20, 33, 35, 39, 41, 52, 54, 55, 61, 62, 64, 65, 66, 67, 69, 71, 77, 78, 86, 88, 92, 97, 101, 109, 195, 204, 213, 215, 218, 219, 222, 223, 226, 229, 230, 248, 251, 283], "microsoftdoc": 1, "wsl": 1, "blob": [1, 88], "win10": 1, "md": [1, 4, 7, 239, 246], "In": [1, 3, 4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 22, 26, 31, 33, 39, 41, 42, 43, 44, 45, 50, 51, 52, 53, 60, 61, 62, 63, 65, 66, 67, 69, 74, 76, 77, 78, 79, 86, 88, 89, 90, 91, 92, 94, 97, 98, 101, 103, 105, 107, 111, 115, 119, 120, 125, 128, 129, 130, 135, 136, 137, 138, 139, 140, 142, 143, 161, 163, 164, 165, 170, 174, 175, 178, 180, 189, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 209, 210, 217, 218, 219, 220, 222, 223, 226, 227, 228, 229, 230, 231, 234, 236, 239, 241, 243, 245, 246, 248, 249, 252, 255, 259, 260, 262, 264, 276, 279, 280, 281, 282, 283, 286, 287, 288], "command": [1, 3, 5, 6, 11, 12, 22, 25, 31, 33, 43, 65, 89, 125, 137, 142, 190, 196, 210, 241, 242, 286], "prompt": [1, 6, 11], "transfer": [1, 108, 109, 111, 144, 229], "html": [1, 3, 4, 6, 7, 39, 43, 45, 53, 54, 55, 61, 62, 64, 66, 67, 69, 71, 77, 78, 88, 89, 97, 101, 109, 204, 210, 213, 215, 218, 219, 223, 226, 230, 242, 244, 246, 248, 249, 283], "note": [1, 3, 6, 7, 10, 11, 12, 14, 16, 18, 19, 23, 24, 25, 27, 28, 29, 30, 35, 36, 38, 39, 40, 41, 42, 43, 44, 51, 52, 53, 54, 57, 59, 60, 62, 65, 66, 67, 68, 69, 71, 72, 74, 75, 76, 77, 78, 86, 88, 89, 91, 92, 94, 97, 101, 103, 111, 112, 116, 117, 119, 120, 121, 124, 125, 127, 129, 132, 140, 142, 148, 151, 159, 169, 170, 172, 174, 175, 176, 178, 184, 185, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 205, 206, 207, 209, 210, 211, 212, 213, 216, 218, 220, 222, 223, 225, 226, 227, 228, 229, 230, 235, 236, 239, 241, 242, 243, 244, 245, 246, 248, 249, 251, 252, 260, 262, 264, 276, 277, 278, 280, 281, 282, 283, 287], "via": [1, 3, 11, 16, 20, 27, 31, 33, 36, 37, 38, 52, 53, 61, 66, 69, 86, 88, 91, 97, 101, 102, 103, 104, 185, 195, 197, 201, 203, 205, 206, 209, 210, 229, 239, 242, 243, 255, 264, 282], "want": [1, 3, 4, 5, 6, 10, 11, 12, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 39, 41, 43, 44, 45, 53, 61, 62, 68, 73, 75, 77, 80, 86, 88, 92, 94, 97, 98, 101, 102, 109, 111, 114, 121, 125, 142, 158, 168, 169, 172, 175, 178, 180, 187, 189, 193, 194, 196, 198, 199, 200, 203, 205, 206, 207, 209, 210, 211, 217, 218, 220, 222, 223, 226, 227, 228, 229, 230, 236, 239, 241, 243, 245, 248, 249, 260, 262, 265, 276, 277, 279, 281, 282, 283, 284, 286, 287], "directori": [1, 3, 6, 7, 33, 38, 43, 226, 241, 242, 251], "folder": 1, "prepend": [1, 42, 52, 97, 111, 182, 210, 236], "mnt": 1, "navig": 1, "better": [1, 3, 4, 6, 10, 11, 12, 18, 19, 20, 42, 43, 53, 61, 65, 69, 88, 91, 111, 125, 155, 179, 183, 196, 199, 200, 201, 213, 217, 218, 219, 220, 226, 227, 228, 229, 230, 242, 248, 249, 281, 287], "compat": [1, 3, 4, 15, 43, 61, 69, 89, 92, 97, 102, 115, 177, 182, 190, 196, 199, 201, 205, 206, 210, 230, 234, 237, 241, 243, 249], "than": [1, 3, 4, 6, 7, 10, 11, 12, 14, 16, 17, 18, 19, 20, 22, 24, 26, 27, 28, 29, 30, 31, 34, 39, 43, 44, 46, 52, 53, 54, 60, 61, 62, 65, 66, 67, 69, 70, 75, 76, 77, 79, 83, 86, 88, 90, 91, 92, 94, 97, 98, 100, 101, 102, 103, 107, 109, 111, 115, 120, 124, 125, 129, 132, 149, 155, 169, 172, 173, 175, 184, 194, 195, 198, 199, 200, 201, 203, 206, 207, 208, 210, 213, 217, 218, 219, 220, 222, 223, 225, 226, 227, 228, 229, 230, 237, 242, 243, 245, 248, 249, 251, 252, 276, 277, 279, 280, 281, 282, 283, 285, 287], "cygwin": 1, "msys2": 1, "more": [1, 3, 4, 6, 7, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 22, 24, 25, 26, 27, 28, 30, 31, 33, 34, 38, 39, 41, 42, 43, 44, 47, 51, 52, 53, 58, 60, 61, 62, 63, 65, 66, 67, 68, 69, 73, 74, 75, 76, 77, 78, 79, 83, 86, 88, 91, 92, 94, 95, 97, 98, 100, 101, 102, 103, 109, 111, 115, 119, 120, 121, 125, 127, 129, 131, 133, 135, 137, 138, 139, 140, 142, 144, 147, 159, 163, 164, 169, 172, 173, 174, 175, 180, 184, 185, 189, 190, 194, 195, 196, 197, 198, 199, 200, 201, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 219, 220, 222, 223, 226, 227, 228, 229, 230, 241, 243, 244, 245, 248, 249, 251, 255, 259, 263, 270, 276, 277, 279, 280, 282, 283, 285, 286, 287, 288], "partial": [1, 11, 41, 52, 59, 60, 61, 63, 65, 66, 67, 101, 103, 142, 169, 185, 189, 191, 201, 204, 207, 210, 212, 219, 222, 226, 227, 231, 237, 255, 262, 277, 287], "workflow": [1, 3, 5, 8, 9, 28, 29, 32, 142, 200, 243, 249, 284], "onli": [1, 4, 6, 7, 10, 11, 12, 14, 15, 16, 18, 19, 20, 22, 25, 26, 27, 28, 30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 47, 50, 51, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 71, 72, 74, 75, 77, 78, 79, 84, 86, 88, 89, 90, 91, 92, 97, 98, 101, 102, 103, 107, 109, 111, 117, 119, 125, 127, 128, 129, 131, 132, 134, 136, 137, 139, 140, 143, 148, 150, 169, 170, 174, 175, 177, 179, 180, 184, 185, 187, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 205, 206, 207, 209, 210, 211, 212, 213, 216, 217, 218, 219, 220, 222, 223, 226, 227, 228, 230, 231, 234, 235, 236, 237, 239, 241, 242, 243, 244, 245, 246, 248, 249, 250, 255, 258, 260, 262, 264, 265, 276, 277, 279, 280, 282, 283, 287, 288], "viabl": [1, 62], "64": [1, 46, 52, 101, 141, 195, 209, 219, 228, 230, 241, 248, 251, 286], "bit": [1, 16, 20, 42, 43, 45, 61, 62, 64, 91, 92, 97, 101, 169, 180, 197, 206, 220, 223, 229, 241, 248, 259, 260, 286], "chocolatei": 1, "choco": 1, "rsvg": 1, "convert": [1, 3, 4, 10, 11, 12, 14, 18, 19, 20, 25, 27, 28, 29, 35, 39, 43, 45, 53, 57, 61, 62, 65, 66, 67, 75, 76, 78, 81, 82, 85, 89, 91, 92, 97, 100, 101, 103, 111, 169, 172, 178, 179, 180, 182, 189, 196, 197, 199, 201, 203, 205, 206, 207, 208, 210, 211, 212, 218, 219, 220, 222, 223, 226, 227, 229, 230, 231, 232, 235, 241, 242, 248, 249, 251, 253, 258, 273, 278, 279, 282, 287], "chose": [1, 62], "rm": [1, 43], "absolut": [1, 10, 39, 40, 43, 60, 61, 67, 69, 76, 86, 88, 92, 97, 113, 173, 201, 205, 206, 220, 222, 225, 230, 241, 264, 265, 266], "Be": [1, 4, 6, 20, 41, 61, 91, 97, 203, 226, 229, 237, 249], "sure": [1, 4, 6, 7, 20, 43, 52, 61, 73, 124, 125, 155, 180, 206, 207, 217, 226, 228, 229, 242, 248, 279, 282, 287], "substitut": [1, 10, 11, 12, 16, 19, 22, 25, 29, 31, 43, 61, 62, 67, 69, 86, 88, 97, 102, 103, 111, 120, 121, 125, 127, 129, 139, 164, 173, 175, 178, 185, 187, 189, 207, 208, 211, 212, 217, 220, 222, 223, 226, 227, 228, 229, 249, 258, 278, 279], "actual": [1, 3, 4, 6, 7, 10, 11, 12, 16, 18, 19, 20, 42, 43, 44, 50, 52, 59, 61, 62, 69, 73, 86, 88, 90, 94, 97, 101, 111, 115, 125, 127, 137, 138, 139, 190, 197, 200, 205, 210, 218, 220, 222, 223, 226, 229, 237, 241, 242, 245, 246, 248, 249, 281], "filesystem": 1, "from": [1, 3, 4, 5, 6, 7, 11, 14, 15, 16, 18, 19, 20, 22, 24, 28, 29, 30, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 119, 120, 122, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 222, 223, 225, 226, 227, 228, 229, 230, 231, 234, 235, 236, 237, 239, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 253, 255, 257, 258, 259, 260, 261, 262, 264, 265, 273, 276, 277, 279, 281, 282, 283, 286, 287, 288], "ani": [1, 3, 4, 5, 6, 7, 10, 11, 12, 14, 15, 18, 19, 20, 22, 24, 25, 26, 29, 33, 36, 38, 39, 40, 41, 42, 43, 44, 50, 51, 52, 53, 59, 60, 61, 62, 63, 65, 66, 67, 69, 71, 72, 73, 76, 77, 78, 86, 88, 89, 91, 92, 95, 97, 98, 101, 103, 104, 105, 107, 111, 113, 116, 119, 120, 121, 122, 124, 125, 135, 138, 139, 140, 143, 144, 148, 161, 164, 169, 170, 173, 175, 177, 180, 184, 185, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 205, 206, 207, 210, 211, 216, 217, 218, 219, 220, 222, 223, 226, 227, 228, 230, 232, 235, 236, 241, 242, 244, 245, 246, 248, 249, 255, 259, 260, 261, 262, 264, 265, 276, 277, 279, 282, 283, 286, 287, 288], "makefil": 1, "subdirectori": 1, "ha": [1, 3, 4, 6, 7, 10, 11, 12, 16, 18, 19, 20, 22, 23, 24, 26, 27, 28, 29, 30, 31, 39, 41, 42, 43, 44, 45, 50, 51, 52, 53, 55, 57, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 73, 74, 76, 77, 78, 84, 86, 88, 90, 91, 92, 94, 97, 98, 100, 101, 102, 104, 105, 107, 111, 112, 116, 119, 120, 125, 127, 129, 135, 140, 142, 148, 149, 159, 160, 169, 172, 177, 180, 184, 185, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 215, 217, 218, 220, 222, 223, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 241, 242, 243, 244, 245, 246, 248, 251, 255, 257, 259, 260, 262, 264, 265, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288], "collect": [1, 3, 7, 17, 42, 43, 52, 61, 78, 88, 101, 104, 111, 124, 133, 142, 175, 182, 195, 201, 206, 219, 220, 222, 226, 230, 241, 248], "offici": [1, 12, 33, 61, 115, 142, 184, 194, 229, 249, 285], "which": [1, 2, 3, 4, 6, 7, 10, 11, 12, 16, 17, 18, 19, 20, 22, 23, 25, 27, 28, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 50, 51, 52, 53, 54, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 74, 75, 76, 77, 80, 83, 84, 85, 86, 88, 89, 90, 91, 92, 94, 95, 97, 100, 101, 103, 104, 105, 107, 108, 109, 111, 112, 113, 115, 116, 117, 119, 120, 122, 124, 125, 127, 128, 130, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 146, 148, 149, 161, 164, 170, 171, 172, 173, 175, 179, 180, 181, 184, 185, 187, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 205, 206, 207, 208, 209, 211, 212, 213, 216, 217, 218, 219, 220, 222, 223, 225, 226, 227, 228, 229, 230, 234, 236, 241, 242, 243, 244, 245, 246, 248, 249, 251, 255, 257, 260, 264, 265, 276, 277, 279, 280, 281, 282, 283, 284, 286, 287, 288], "gener": [1, 4, 8, 10, 11, 12, 14, 16, 18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 30, 31, 33, 37, 39, 40, 41, 42, 44, 45, 46, 49, 50, 52, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 71, 75, 77, 79, 84, 86, 88, 89, 90, 91, 94, 97, 101, 102, 103, 111, 115, 116, 119, 120, 121, 124, 125, 127, 128, 129, 130, 132, 134, 135, 136, 138, 139, 140, 142, 143, 147, 158, 159, 160, 161, 164, 169, 170, 173, 174, 175, 180, 182, 184, 185, 186, 189, 190, 191, 193, 195, 196, 197, 198, 199, 201, 203, 206, 207, 208, 209, 210, 211, 212, 216, 219, 220, 222, 223, 225, 226, 227, 228, 230, 235, 236, 242, 243, 245, 246, 247, 248, 249, 255, 259, 260, 262, 263, 264, 270, 277, 279, 280, 281, 282, 283, 287, 288], "svg": [1, 89, 190], "store": [1, 5, 10, 12, 18, 42, 43, 51, 52, 61, 83, 85, 94, 97, 101, 103, 116, 120, 122, 124, 125, 140, 169, 175, 189, 193, 194, 196, 197, 200, 205, 206, 207, 217, 220, 231, 234, 235, 243, 244, 245, 248, 260, 262, 282], "_build": [1, 6], "same": [1, 4, 6, 7, 10, 11, 12, 16, 18, 19, 20, 22, 24, 26, 29, 35, 36, 37, 38, 39, 41, 42, 43, 50, 51, 52, 53, 57, 60, 61, 62, 63, 66, 68, 69, 71, 74, 75, 76, 77, 78, 83, 84, 86, 88, 90, 91, 92, 94, 97, 101, 103, 104, 105, 111, 112, 115, 116, 119, 123, 125, 129, 132, 133, 136, 139, 140, 159, 161, 169, 172, 173, 175, 177, 178, 180, 182, 183, 184, 185, 187, 190, 191, 193, 194, 196, 197, 198, 199, 200, 201, 203, 205, 206, 207, 208, 209, 210, 211, 217, 218, 219, 220, 222, 223, 226, 227, 228, 229, 230, 231, 235, 236, 237, 239, 241, 243, 244, 245, 246, 248, 249, 251, 255, 257, 259, 260, 264, 277, 279, 282, 283, 286, 287], "inform": [1, 3, 4, 6, 7, 11, 12, 15, 18, 19, 22, 31, 32, 38, 39, 42, 43, 44, 47, 52, 53, 59, 61, 62, 66, 69, 73, 86, 88, 90, 94, 97, 102, 105, 116, 117, 119, 120, 124, 125, 127, 135, 136, 137, 139, 140, 142, 143, 170, 175, 180, 184, 185, 190, 194, 196, 200, 205, 206, 210, 211, 217, 220, 222, 223, 228, 229, 230, 234, 235, 236, 241, 242, 243, 244, 245, 255, 260, 262, 287], "onc": [1, 4, 11, 12, 18, 19, 20, 43, 45, 52, 57, 61, 62, 66, 69, 77, 86, 88, 102, 105, 117, 119, 135, 139, 180, 185, 187, 194, 196, 198, 200, 206, 210, 211, 219, 220, 222, 226, 229, 236, 248, 259, 276, 277, 287, 288], "under": [1, 3, 4, 6, 11, 12, 18, 19, 37, 38, 40, 41, 43, 44, 51, 52, 57, 59, 69, 79, 86, 88, 90, 91, 97, 101, 103, 104, 105, 144, 170, 195, 197, 198, 205, 206, 210, 217, 218, 220, 223, 226, 228, 229, 230, 236, 239, 281, 287], "prefer": [1, 3, 6, 10, 11, 18, 20, 22, 27, 28, 29, 43, 53, 60, 61, 69, 101, 103, 119, 125, 175, 180, 185, 196, 199, 201, 203, 205, 210, 218, 222, 226, 228, 235, 241, 243, 246, 249, 281, 283], "web": [1, 7, 62, 73, 142, 192, 204, 223], "browser": 1, "drop": [1, 67, 88, 102, 132, 201, 203], "menu": 1, "index": [1, 3, 10, 12, 20, 22, 29, 30, 31, 35, 43, 50, 52, 53, 57, 60, 61, 62, 63, 66, 67, 69, 72, 77, 86, 88, 91, 92, 94, 97, 100, 101, 111, 124, 125, 142, 143, 144, 146, 148, 149, 159, 168, 170, 172, 175, 180, 185, 196, 197, 201, 205, 206, 207, 210, 215, 216, 220, 228, 230, 231, 233, 234, 236, 237, 242, 270], "told": 1, "how": [1, 3, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 22, 23, 42, 43, 52, 53, 60, 61, 67, 68, 69, 73, 84, 88, 91, 92, 94, 97, 101, 103, 104, 115, 119, 120, 125, 126, 132, 137, 138, 140, 142, 146, 147, 163, 167, 170, 171, 172, 177, 178, 185, 193, 196, 197, 200, 201, 203, 205, 209, 210, 213, 217, 218, 220, 222, 223, 226, 227, 228, 230, 236, 241, 242, 243, 244, 246, 248, 249, 260, 277, 279, 281, 282, 283, 284, 286, 287], "load": [1, 43, 61, 89, 104, 105, 107, 116, 119, 120, 124, 128, 130, 143, 155, 190], "ll": [1, 42, 59, 97, 129, 193, 194, 239], "manual": [1, 3, 4, 7, 10, 11, 20, 25, 43, 44, 52, 65, 71, 88, 89, 103, 111, 124, 125, 128, 139, 143, 196, 203, 210, 226, 228, 229, 244, 277, 287], "repeat": [1, 11, 12, 52, 55, 60, 61, 67, 69, 88, 90, 92, 97, 101, 103, 159, 161, 175, 196, 197, 198, 203, 205, 206, 210, 216, 226, 230, 234, 235, 242, 244, 248, 287], "step": [1, 4, 5, 20, 21, 32, 41, 43, 52, 56, 57, 60, 61, 62, 69, 85, 86, 88, 97, 101, 102, 120, 132, 135, 137, 142, 143, 177, 189, 194, 195, 196, 200, 201, 203, 206, 210, 211, 212, 215, 218, 219, 220, 222, 223, 226, 228, 230, 235, 242, 248, 249, 277], "reload": 1, "There": [1, 3, 4, 5, 6, 7, 10, 11, 12, 15, 18, 19, 20, 22, 25, 26, 30, 43, 44, 52, 53, 54, 55, 58, 60, 61, 62, 65, 66, 69, 85, 86, 88, 89, 90, 91, 94, 97, 101, 104, 105, 107, 111, 115, 124, 135, 137, 139, 148, 165, 170, 184, 185, 190, 193, 194, 196, 200, 201, 202, 203, 205, 206, 207, 210, 211, 212, 218, 219, 220, 222, 223, 226, 228, 229, 230, 235, 244, 245, 248, 249, 251, 260, 276, 277, 279, 281, 282, 286, 287], "altern": [1, 4, 6, 10, 11, 12, 19, 20, 33, 43, 49, 52, 53, 60, 61, 65, 66, 67, 68, 69, 92, 94, 98, 102, 125, 137, 139, 185, 193, 195, 196, 198, 199, 200, 205, 206, 210, 215, 217, 219, 228, 229, 231, 248, 279, 281, 283], "approach": [1, 16, 22, 25, 26, 27, 29, 30, 31, 42, 60, 61, 88, 111, 129, 135, 200, 203, 204, 207, 218, 227, 228, 230, 242, 245, 248, 277, 283], "set": [1, 2, 3, 4, 6, 7, 11, 12, 14, 16, 17, 18, 19, 22, 24, 25, 31, 34, 37, 41, 42, 43, 44, 49, 50, 52, 53, 54, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 74, 76, 78, 79, 80, 83, 84, 86, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 101, 103, 104, 105, 111, 115, 119, 120, 124, 125, 127, 128, 129, 134, 136, 137, 138, 139, 142, 143, 159, 165, 170, 175, 177, 180, 182, 183, 184, 185, 187, 189, 190, 191, 193, 196, 197, 198, 199, 200, 203, 205, 206, 209, 210, 211, 212, 217, 219, 220, 222, 223, 225, 226, 227, 228, 230, 234, 235, 236, 239, 241, 242, 243, 244, 248, 249, 255, 258, 260, 266, 269, 276, 278, 287], "up": [1, 3, 4, 10, 11, 16, 18, 19, 20, 29, 33, 38, 41, 43, 52, 53, 55, 61, 62, 63, 65, 66, 67, 69, 70, 77, 78, 82, 86, 88, 89, 91, 92, 97, 101, 102, 104, 113, 115, 122, 124, 127, 128, 132, 134, 139, 140, 142, 143, 155, 170, 172, 189, 195, 196, 197, 200, 201, 205, 207, 210, 211, 212, 217, 219, 220, 222, 223, 226, 227, 228, 229, 242, 243, 244, 245, 246, 249, 278, 279, 282, 283, 285], "monitor": 1, "automat": [1, 3, 4, 6, 7, 10, 11, 12, 14, 18, 25, 26, 29, 31, 42, 43, 44, 53, 61, 63, 64, 65, 66, 67, 69, 74, 76, 80, 86, 89, 91, 101, 103, 104, 120, 125, 127, 133, 161, 163, 164, 173, 175, 189, 193, 196, 197, 200, 201, 205, 206, 207, 210, 213, 216, 217, 219, 220, 222, 223, 226, 228, 229, 235, 236, 241, 242, 243, 246, 260, 265, 277, 279, 281, 282, 286, 287, 288], "detect": [1, 3, 34, 41, 94, 97, 101, 196, 200, 210, 226, 227, 229, 231, 248, 286], "procedur": [1, 25, 27, 44, 46, 52, 58, 59, 60, 88, 97, 120, 140, 203, 205, 222, 223, 228, 229, 255, 283], "again": [1, 4, 12, 16, 19, 53, 61, 76, 101, 125, 127, 140, 170, 171, 185, 193, 197, 198, 205, 213, 220, 226, 239, 259, 279, 287], "whether": [1, 4, 10, 11, 18, 19, 20, 22, 27, 29, 30, 31, 41, 42, 43, 47, 52, 60, 61, 62, 68, 69, 73, 76, 88, 89, 91, 92, 97, 101, 107, 115, 120, 121, 124, 125, 163, 182, 187, 194, 196, 199, 200, 201, 205, 206, 210, 213, 217, 218, 222, 223, 226, 228, 229, 230, 231, 241, 243, 248, 249, 255, 258, 279, 283], "8000": [1, 104], "80": [1, 4, 6, 12, 20, 41, 52, 61, 64, 88, 97, 101, 104, 105, 109, 206, 209, 226, 230, 246, 248], "localhost": 1, "differ": [1, 4, 6, 7, 10, 11, 12, 14, 15, 17, 19, 20, 22, 24, 25, 26, 27, 28, 29, 30, 34, 42, 43, 44, 50, 51, 52, 53, 57, 60, 61, 62, 63, 65, 66, 67, 69, 72, 74, 76, 77, 81, 83, 85, 86, 88, 89, 90, 91, 94, 97, 101, 102, 103, 104, 109, 115, 116, 122, 125, 127, 131, 139, 140, 143, 147, 148, 160, 161, 169, 170, 173, 175, 177, 180, 184, 185, 186, 189, 190, 191, 194, 196, 197, 198, 199, 201, 203, 205, 206, 207, 209, 210, 211, 212, 213, 215, 217, 218, 219, 222, 223, 226, 227, 228, 229, 230, 231, 234, 236, 239, 241, 242, 243, 244, 245, 246, 248, 249, 255, 258, 262, 264, 278, 279, 281, 282, 283, 286, 287], "port": [1, 103, 127, 147], "finish": [1, 43, 44, 169, 244, 284], "stop": [1, 4, 43, 44, 53, 61, 97, 101, 196, 216, 218, 226, 230], "ctrl": 1, "detach": 1, "mode": [1, 2, 22, 61, 89, 103, 147, 170, 190, 206, 210, 241, 252], "d": [1, 6, 7, 10, 11, 12, 16, 20, 23, 25, 27, 29, 35, 42, 45, 50, 52, 53, 54, 56, 57, 59, 60, 61, 62, 63, 66, 69, 71, 75, 79, 84, 86, 88, 90, 91, 92, 93, 94, 97, 98, 100, 101, 103, 104, 107, 119, 120, 142, 144, 147, 148, 154, 164, 172, 174, 175, 180, 184, 185, 187, 193, 194, 195, 196, 198, 199, 200, 201, 203, 204, 205, 206, 207, 210, 212, 216, 220, 222, 223, 226, 227, 228, 229, 230, 231, 232, 234, 236, 248, 251, 255, 257, 258, 259, 260, 264, 272, 283, 288], "name": [1, 3, 4, 5, 6, 7, 10, 11, 12, 18, 20, 29, 30, 34, 37, 38, 42, 43, 44, 48, 51, 54, 57, 60, 61, 62, 63, 66, 67, 68, 69, 71, 74, 86, 88, 89, 90, 94, 97, 101, 103, 104, 107, 116, 119, 122, 124, 125, 127, 142, 146, 155, 170, 177, 179, 180, 181, 182, 183, 184, 185, 187, 189, 191, 194, 196, 197, 198, 200, 201, 203, 205, 207, 210, 216, 220, 222, 223, 226, 227, 229, 230, 235, 236, 239, 241, 242, 243, 244, 249, 251, 252, 253, 255, 259, 262, 267, 276, 279, 282, 283, 287], "livehtml": 1, "simpli": [1, 3, 4, 7, 18, 19, 24, 25, 39, 44, 60, 61, 63, 67, 71, 92, 94, 97, 101, 103, 104, 107, 112, 116, 125, 127, 139, 165, 170, 180, 191, 194, 200, 206, 207, 218, 219, 220, 225, 226, 229, 246, 248, 249, 262], "should": [1, 3, 5, 6, 7, 8, 10, 11, 12, 15, 18, 19, 20, 22, 29, 31, 34, 36, 38, 41, 42, 43, 44, 52, 53, 54, 55, 57, 60, 61, 62, 64, 65, 67, 69, 71, 72, 73, 74, 75, 76, 78, 83, 84, 85, 86, 88, 89, 90, 91, 92, 94, 97, 101, 103, 104, 109, 111, 115, 120, 125, 127, 129, 137, 139, 140, 142, 143, 144, 155, 159, 163, 165, 167, 169, 170, 173, 175, 177, 178, 180, 181, 185, 190, 193, 194, 196, 197, 198, 199, 200, 201, 203, 205, 206, 209, 210, 212, 213, 216, 217, 218, 219, 220, 222, 223, 225, 226, 228, 229, 230, 234, 235, 239, 241, 242, 243, 244, 245, 246, 248, 249, 251, 255, 259, 276, 277, 279, 280, 283], "tab": [1, 10, 12, 57, 142], "show": [1, 3, 4, 6, 7, 12, 15, 16, 17, 18, 19, 20, 29, 43, 53, 60, 61, 65, 67, 84, 86, 88, 97, 101, 104, 105, 109, 115, 125, 131, 136, 140, 142, 170, 174, 178, 180, 185, 193, 194, 196, 197, 200, 201, 203, 205, 206, 210, 211, 213, 217, 218, 219, 220, 222, 223, 226, 228, 230, 231, 239, 242, 243, 246, 248, 249, 279, 281, 283, 286], "necessari": [1, 3, 4, 6, 8, 10, 12, 18, 20, 32, 41, 42, 52, 53, 61, 71, 86, 88, 91, 97, 101, 120, 127, 135, 196, 198, 200, 205, 206, 210, 213, 219, 222, 226, 227, 228, 229, 230, 231, 236, 241, 243, 248, 249, 255, 280, 285], "major": [1, 3, 4, 7, 10, 22, 31, 71, 115, 235, 281, 287], "contributor": [1, 3, 7, 10, 20], "action": [1, 3, 7, 52, 90, 167, 170, 180, 206, 222, 229], "pull": [1, 3, 4, 5, 6, 7, 9, 10, 20, 33, 43, 61, 66, 69, 174, 211, 222, 226, 229, 283, 287], "request": [1, 3, 4, 6, 7, 9, 10, 18, 22, 33, 41, 61, 65, 77, 86, 101, 125, 175, 203, 206, 234, 242], "releas": [1, 7, 10, 61, 88, 92, 103, 139, 196, 235, 246, 249, 282], "includ": [1, 3, 4, 6, 7, 9, 10, 11, 12, 18, 20, 22, 25, 26, 30, 33, 38, 39, 41, 42, 43, 53, 57, 60, 61, 62, 63, 65, 66, 67, 69, 73, 79, 86, 88, 91, 92, 94, 96, 97, 101, 102, 103, 113, 115, 124, 125, 127, 129, 130, 135, 137, 139, 142, 155, 159, 164, 169, 172, 173, 183, 191, 194, 198, 201, 202, 203, 205, 206, 209, 210, 211, 216, 217, 218, 220, 222, 225, 226, 227, 228, 230, 233, 236, 239, 241, 243, 244, 245, 246, 248, 255, 257, 259, 264, 266, 277, 281, 282, 283, 287, 288], "fail": [1, 3, 4, 6, 7, 10, 18, 19, 20, 22, 43, 52, 53, 57, 60, 61, 65, 67, 85, 86, 88, 89, 97, 98, 101, 103, 127, 165, 170, 190, 196, 199, 200, 201, 203, 205, 206, 210, 217, 220, 226, 228, 230, 239, 241, 248, 249, 283], "99": [1, 43, 61, 62, 97, 101, 203, 204], "due": [1, 6, 10, 16, 20, 28, 41, 43, 51, 52, 61, 63, 78, 97, 101, 104, 107, 125, 127, 139, 148, 175, 191, 194, 200, 206, 210, 213, 223, 225, 227, 230, 246, 258, 264, 287], "bad": [1, 10, 60, 101, 177, 210], "math": [1, 3, 6, 20, 31, 35, 39, 42, 44, 52, 61, 66, 69, 71, 88, 97, 101, 102, 125, 135, 191, 196, 201, 204, 209, 210, 226, 227, 230, 242, 243, 249, 260, 261, 262, 263, 264, 276, 277, 281], "format": [1, 4, 8, 11, 14, 16, 26, 29, 30, 42, 53, 62, 83, 84, 88, 91, 97, 100, 101, 104, 124, 143, 148, 159, 169, 196, 199, 200, 205, 206, 208, 210, 220, 226, 229, 241, 251, 255, 259, 280, 283, 286], "doubl": [1, 6, 7, 29, 41, 43, 57, 61, 62, 66, 97, 103, 119, 134, 135, 193, 200, 210, 219, 220, 243, 287], "check": [1, 3, 4, 6, 7, 11, 12, 14, 15, 16, 18, 19, 20, 25, 29, 31, 37, 38, 41, 42, 43, 47, 50, 52, 53, 54, 59, 60, 61, 62, 66, 69, 73, 84, 86, 90, 91, 92, 94, 97, 98, 101, 111, 116, 117, 125, 139, 142, 155, 163, 175, 177, 178, 183, 191, 196, 197, 199, 200, 201, 203, 205, 206, 212, 218, 220, 222, 226, 227, 228, 229, 230, 234, 235, 239, 241, 243, 246, 248, 258, 262, 279, 287], "ad": [1, 6, 7, 10, 18, 24, 26, 35, 42, 43, 45, 51, 52, 61, 62, 72, 76, 83, 86, 90, 101, 103, 107, 115, 116, 119, 125, 126, 142, 149, 177, 180, 186, 195, 196, 205, 207, 209, 210, 212, 220, 223, 226, 229, 230, 232, 235, 236, 241, 258, 279], "correctli": [1, 3, 4, 6, 7, 10, 19, 20, 41, 65, 86, 89, 97, 125, 127, 139, 210, 217, 223, 226], "backtick": [1, 6, 7], "code": [1, 6, 8, 9, 11, 12, 16, 18, 19, 20, 25, 28, 29, 30, 31, 33, 34, 44, 48, 52, 55, 56, 61, 62, 63, 65, 69, 73, 86, 88, 89, 97, 101, 102, 103, 116, 119, 125, 127, 133, 135, 136, 140, 142, 143, 169, 175, 184, 190, 193, 195, 196, 197, 198, 200, 203, 209, 220, 222, 226, 228, 229, 230, 235, 238, 239, 241, 242, 243, 246, 247, 248, 249, 259, 267, 274, 279, 281, 284, 286], "singl": [1, 4, 7, 10, 11, 16, 18, 20, 23, 29, 34, 42, 43, 45, 52, 61, 62, 66, 67, 69, 74, 75, 77, 78, 79, 86, 88, 91, 92, 97, 100, 103, 111, 112, 117, 119, 129, 136, 155, 159, 161, 169, 172, 175, 182, 185, 189, 196, 197, 199, 200, 201, 203, 205, 206, 210, 211, 212, 219, 220, 222, 223, 225, 226, 227, 228, 229, 230, 231, 235, 241, 243, 245, 248, 249, 251, 277, 279, 282, 283, 288], "render": [1, 3, 6, 7, 43, 61, 89, 190, 196, 210, 286], "resourc": [1, 6, 7, 20, 97, 204, 226, 242, 252], "style": [1, 8, 42, 61, 89, 169, 190, 196, 210, 229, 286], "guid": [1, 3, 8, 9, 11, 13, 20, 27, 33, 42, 61, 68, 125, 139, 210, 223, 225, 226, 228, 229, 236, 280, 284, 285, 288], "tip": [1, 6, 61, 139, 226, 227, 287], "few": [1, 3, 4, 10, 11, 18, 25, 31, 39, 51, 53, 61, 62, 88, 89, 101, 102, 127, 135, 178, 184, 190, 193, 194, 197, 205, 210, 218, 219, 220, 226, 229, 230, 243, 248, 287], "extra": [1, 10, 43, 61, 62, 101, 102, 133, 180, 191, 203, 210, 220, 226, 241, 242, 243, 262], "xelatex": 1, "latexmk": 1, "chrome": 1, "chromium": 1, "On": [1, 10, 18, 38, 54, 61, 63, 69, 88, 91, 101, 125, 180, 191, 200, 203, 204, 205, 206, 226, 228, 245, 249, 262, 264], "xetex": 1, "font": [1, 89, 190, 210], "lmodern": 1, "cask": 1, "tap": 1, "dejavu": 1, "strawberryperl": 1, "miktex": [1, 3], "dejavufont": 1, "appdata": 1, "microsoft": 1, "right": [1, 4, 6, 7, 10, 12, 16, 20, 23, 24, 27, 29, 41, 43, 44, 52, 53, 57, 61, 62, 64, 66, 67, 69, 77, 78, 86, 88, 91, 92, 97, 100, 101, 103, 104, 105, 111, 120, 124, 125, 139, 140, 142, 143, 147, 154, 159, 161, 163, 164, 169, 172, 175, 185, 191, 194, 195, 196, 197, 199, 205, 206, 207, 208, 210, 212, 213, 217, 218, 220, 226, 227, 229, 230, 241, 243, 245, 248, 262, 277, 281, 283, 287], "click": 1, "result": [1, 3, 6, 10, 11, 12, 14, 15, 16, 18, 19, 20, 31, 35, 36, 37, 38, 39, 41, 42, 43, 51, 52, 53, 57, 60, 61, 62, 63, 65, 67, 69, 73, 78, 79, 83, 85, 86, 88, 90, 91, 92, 94, 97, 100, 101, 102, 103, 104, 111, 112, 115, 116, 117, 121, 125, 129, 135, 139, 142, 160, 167, 169, 170, 172, 174, 175, 177, 178, 180, 184, 185, 194, 196, 197, 200, 201, 203, 204, 205, 206, 207, 208, 210, 212, 217, 218, 219, 220, 222, 223, 225, 226, 227, 228, 229, 230, 231, 234, 235, 237, 241, 242, 243, 245, 246, 248, 249, 251, 255, 258, 260, 279, 281, 282, 283, 287], "version": [1, 3, 4, 5, 6, 7, 12, 18, 19, 20, 31, 32, 33, 36, 42, 43, 52, 53, 59, 61, 62, 66, 67, 69, 74, 88, 91, 92, 93, 95, 97, 99, 101, 114, 116, 119, 125, 159, 173, 177, 185, 195, 196, 197, 200, 201, 203, 205, 206, 210, 213, 222, 228, 230, 240, 241, 243, 244, 245, 246, 248, 249, 253, 255, 261, 279, 282, 283], "where": [1, 4, 5, 6, 7, 10, 11, 12, 16, 18, 19, 20, 22, 25, 26, 27, 29, 31, 34, 35, 39, 41, 42, 43, 44, 50, 51, 52, 53, 55, 57, 59, 60, 61, 62, 63, 65, 66, 67, 69, 71, 74, 76, 77, 78, 79, 83, 84, 85, 86, 88, 90, 91, 92, 93, 94, 97, 101, 104, 107, 108, 111, 115, 119, 120, 121, 122, 124, 125, 127, 138, 139, 140, 142, 143, 149, 159, 164, 170, 172, 174, 175, 176, 177, 178, 185, 189, 191, 193, 194, 195, 197, 198, 199, 200, 201, 203, 205, 206, 207, 208, 210, 211, 212, 213, 216, 217, 218, 219, 220, 222, 223, 226, 227, 228, 230, 231, 234, 236, 241, 242, 243, 244, 248, 249, 251, 255, 262, 264, 277, 279, 281, 283, 287, 288], "g": [1, 3, 4, 5, 7, 10, 12, 18, 19, 20, 28, 29, 31, 41, 42, 43, 44, 46, 49, 51, 52, 53, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 73, 77, 78, 79, 84, 87, 88, 90, 91, 92, 97, 101, 103, 104, 111, 112, 116, 119, 122, 124, 125, 127, 129, 130, 132, 133, 134, 139, 140, 142, 143, 155, 159, 164, 170, 172, 173, 175, 178, 180, 181, 185, 191, 196, 197, 198, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 216, 217, 218, 219, 222, 223, 226, 227, 228, 229, 230, 231, 234, 235, 236, 241, 242, 243, 244, 246, 248, 249, 250, 251, 264, 267, 277, 282, 286, 287, 288], "1": [1, 3, 4, 7, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 107, 109, 111, 112, 113, 114, 115, 116, 117, 119, 120, 122, 124, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 140, 142, 143, 144, 146, 147, 148, 149, 150, 154, 157, 158, 159, 160, 161, 163, 164, 165, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 184, 185, 186, 187, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 251, 253, 255, 258, 259, 260, 262, 265, 272, 276, 277, 279, 281, 282, 283, 286, 287, 288], "dev": [1, 3, 4, 5, 246], "sympi": [2, 3, 4, 7, 8, 9, 11, 13, 14, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 31, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 104, 105, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 260, 261, 263, 264, 265, 266, 270, 272, 273, 275, 277, 279, 280, 282, 283, 284, 285, 286, 287, 288], "sympy_debug": [2, 88, 251], "variabl": [2, 3, 6, 7, 10, 11, 14, 16, 19, 20, 22, 23, 25, 26, 28, 30, 34, 35, 36, 38, 39, 41, 43, 44, 56, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 78, 80, 86, 88, 89, 91, 92, 97, 103, 104, 105, 107, 109, 111, 124, 125, 132, 134, 142, 143, 149, 164, 169, 173, 175, 178, 184, 185, 187, 191, 198, 200, 201, 203, 205, 206, 207, 210, 211, 216, 217, 222, 223, 225, 226, 227, 228, 229, 237, 241, 243, 244, 245, 249, 255, 258, 259, 261, 262, 264, 277, 279, 281, 283, 288], "instanc": [2, 4, 6, 7, 10, 11, 15, 18, 19, 20, 36, 37, 38, 40, 42, 43, 52, 54, 56, 61, 63, 65, 66, 67, 69, 74, 77, 78, 79, 84, 85, 88, 89, 92, 94, 97, 101, 103, 104, 112, 116, 120, 124, 125, 143, 148, 155, 159, 165, 169, 170, 172, 174, 175, 185, 187, 190, 191, 196, 200, 201, 205, 206, 207, 208, 210, 218, 220, 222, 226, 228, 229, 230, 234, 235, 236, 241, 242, 243, 245, 248, 249, 255, 257, 258, 259, 260, 262, 264, 276, 277, 282, 287, 288], "unix": [2, 241, 242], "would": [2, 4, 5, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 23, 26, 28, 33, 42, 43, 44, 50, 52, 53, 60, 61, 62, 66, 67, 73, 77, 86, 88, 92, 97, 101, 103, 104, 111, 112, 113, 115, 117, 119, 125, 129, 139, 142, 170, 172, 175, 180, 184, 185, 191, 193, 196, 199, 200, 201, 203, 206, 207, 209, 210, 211, 213, 218, 219, 220, 222, 223, 226, 227, 228, 229, 230, 234, 235, 241, 243, 245, 248, 249, 251, 252, 260, 261, 262, 264, 276, 277, 279, 281, 282, 283, 286, 287, 288], "do": [2, 3, 4, 6, 7, 10, 11, 12, 16, 18, 19, 20, 21, 22, 25, 26, 27, 28, 29, 30, 32, 33, 34, 37, 38, 39, 41, 42, 43, 44, 53, 57, 60, 61, 62, 63, 64, 67, 69, 71, 73, 76, 77, 80, 86, 88, 89, 91, 92, 94, 95, 97, 98, 101, 102, 108, 111, 115, 119, 120, 122, 124, 125, 126, 128, 129, 133, 136, 137, 142, 147, 150, 155, 159, 164, 167, 169, 171, 177, 179, 180, 183, 184, 186, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 205, 206, 207, 209, 210, 211, 213, 217, 218, 219, 220, 222, 223, 226, 227, 228, 232, 235, 236, 239, 241, 242, 244, 246, 248, 249, 251, 258, 260, 261, 262, 264, 276, 277, 279, 280, 281, 282, 283, 285, 287], "true": [2, 3, 6, 10, 11, 12, 14, 15, 18, 19, 20, 22, 24, 25, 26, 27, 29, 30, 31, 35, 36, 37, 38, 39, 40, 41, 42, 43, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 80, 82, 83, 86, 88, 89, 91, 92, 93, 94, 97, 98, 101, 103, 104, 105, 109, 111, 112, 113, 114, 115, 117, 119, 120, 121, 125, 127, 129, 142, 146, 147, 156, 159, 160, 167, 169, 170, 173, 174, 175, 178, 184, 185, 186, 187, 190, 191, 194, 195, 196, 197, 198, 199, 200, 201, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 217, 218, 219, 220, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 239, 241, 242, 243, 244, 246, 248, 249, 251, 255, 258, 259, 260, 261, 262, 265, 276, 277, 279, 281, 282, 283, 286, 287, 288], "isympi": [2, 3, 11, 12, 89], "window": [2, 251], "just": [2, 4, 6, 7, 10, 11, 12, 18, 19, 20, 24, 26, 29, 33, 39, 42, 43, 52, 59, 61, 62, 63, 67, 84, 86, 88, 89, 90, 91, 97, 101, 102, 113, 115, 116, 122, 125, 129, 133, 139, 140, 142, 155, 160, 165, 175, 180, 184, 190, 191, 193, 197, 199, 200, 201, 203, 205, 209, 210, 217, 218, 219, 220, 222, 226, 229, 239, 241, 243, 244, 246, 261, 262, 264, 276, 277, 279, 280, 281, 282, 283, 287, 288], "limit": [2, 4, 10, 12, 26, 27, 31, 33, 39, 41, 43, 60, 61, 63, 65, 66, 67, 69, 70, 73, 81, 83, 88, 89, 91, 97, 101, 109, 140, 164, 170, 173, 190, 196, 201, 203, 206, 207, 210, 213, 214, 216, 218, 222, 223, 225, 226, 227, 228, 230, 235, 242, 245, 248, 249, 251, 254, 255, 265, 267, 273, 278, 279, 281, 283], "function": [2, 3, 4, 7, 8, 11, 14, 15, 16, 18, 19, 21, 23, 25, 27, 30, 32, 36, 37, 38, 40, 41, 42, 44, 52, 53, 56, 57, 59, 62, 63, 64, 65, 66, 70, 71, 72, 73, 78, 81, 82, 85, 87, 88, 89, 90, 92, 94, 96, 100, 102, 104, 106, 108, 109, 111, 112, 113, 117, 119, 122, 123, 124, 125, 128, 129, 130, 131, 135, 137, 138, 142, 147, 148, 149, 150, 154, 159, 160, 161, 164, 169, 170, 171, 172, 173, 174, 175, 178, 184, 185, 188, 189, 190, 192, 194, 195, 197, 202, 203, 204, 205, 207, 208, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 224, 225, 228, 229, 230, 232, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 251, 252, 253, 254, 255, 256, 260, 261, 263, 264, 265, 266, 267, 270, 272, 273, 276, 277, 278, 279, 280, 281, 282, 283, 285, 288], "nice": [2, 4, 6, 33, 61, 73, 97, 101, 125, 139, 142, 196, 210, 220, 251, 282], "print": [2, 4, 6, 7, 11, 12, 16, 18, 19, 22, 25, 26, 28, 33, 36, 37, 38, 39, 41, 42, 44, 45, 50, 52, 53, 60, 61, 62, 65, 66, 67, 69, 88, 90, 91, 94, 97, 98, 101, 102, 103, 104, 105, 111, 118, 120, 125, 127, 135, 141, 147, 155, 168, 169, 173, 175, 185, 188, 192, 194, 196, 199, 200, 201, 205, 206, 216, 217, 219, 220, 222, 226, 228, 235, 237, 241, 243, 248, 249, 251, 253, 255, 259, 266, 272, 274, 277, 278, 279, 280, 281, 282, 283, 287], "tree": [2, 10, 11, 15, 52, 55, 61, 103, 117, 125, 167, 170, 185, 206, 217, 219, 222, 229, 232, 234, 245, 248, 251, 278], "veri": [2, 3, 4, 6, 10, 11, 12, 14, 15, 18, 20, 22, 43, 57, 61, 62, 65, 66, 71, 73, 79, 83, 86, 88, 91, 97, 101, 111, 115, 125, 129, 142, 147, 180, 193, 194, 197, 200, 203, 205, 206, 207, 209, 210, 211, 217, 218, 219, 220, 222, 223, 226, 228, 229, 230, 241, 242, 243, 249, 276, 279, 282, 287], "sever": [3, 4, 5, 6, 10, 11, 15, 18, 20, 22, 26, 33, 43, 46, 52, 53, 60, 61, 65, 66, 68, 69, 73, 86, 88, 101, 117, 136, 180, 182, 196, 198, 200, 203, 205, 209, 210, 211, 217, 218, 226, 230, 241, 243, 253, 266, 279, 283, 286], "instal": [3, 5, 7, 11, 12, 65, 102, 200, 201, 210, 242, 249, 280, 286], "enabl": [3, 7, 11, 20, 33, 61, 88, 89, 101, 105, 125, 127, 175, 185, 190, 210, 226, 230, 241, 246, 249, 283, 286, 287], "certain": [3, 7, 11, 20, 31, 33, 40, 42, 43, 52, 59, 61, 65, 69, 77, 86, 88, 101, 103, 139, 185, 186, 197, 200, 203, 205, 210, 211, 217, 220, 222, 223, 226, 228, 229, 230, 232, 243, 244, 249, 255, 258, 264, 287], "most": [3, 4, 6, 7, 10, 11, 12, 15, 16, 18, 19, 20, 22, 24, 26, 27, 28, 29, 30, 31, 33, 36, 37, 38, 41, 42, 43, 44, 52, 53, 60, 61, 62, 65, 67, 71, 73, 88, 91, 92, 93, 94, 95, 97, 99, 100, 101, 102, 103, 111, 115, 119, 120, 125, 133, 136, 139, 140, 143, 177, 184, 185, 189, 195, 196, 197, 198, 200, 201, 203, 205, 206, 207, 208, 209, 210, 217, 218, 220, 223, 226, 227, 228, 229, 230, 239, 242, 243, 244, 245, 246, 248, 249, 251, 258, 260, 276, 279, 281, 282, 283, 285, 286, 287], "mention": [3, 4, 6, 20, 22, 29, 52, 86, 88, 111, 127, 143, 144, 191, 220, 223, 226, 230, 259, 260, 261, 262, 283], "except": [3, 4, 6, 10, 11, 12, 16, 18, 19, 20, 27, 31, 41, 43, 52, 53, 61, 62, 65, 66, 67, 69, 86, 88, 101, 133, 181, 195, 197, 200, 201, 205, 206, 207, 208, 210, 219, 222, 223, 226, 227, 229, 234, 239, 241, 243, 244, 247, 248, 249, 259, 262, 274, 276, 279, 282, 283], "unless": [3, 6, 11, 18, 20, 36, 38, 41, 43, 52, 60, 61, 62, 66, 69, 76, 77, 86, 97, 100, 148, 193, 194, 198, 200, 205, 206, 210, 215, 218, 219, 226, 228, 241, 245, 248, 249, 251, 255, 264, 277, 283, 287], "thei": [3, 4, 6, 7, 10, 11, 12, 14, 18, 19, 20, 22, 27, 29, 30, 31, 33, 39, 42, 43, 44, 49, 51, 52, 53, 59, 60, 61, 62, 63, 66, 67, 69, 71, 74, 75, 76, 77, 78, 83, 86, 88, 89, 91, 92, 94, 95, 97, 100, 101, 103, 115, 119, 120, 122, 124, 125, 127, 133, 135, 137, 138, 139, 142, 143, 149, 154, 159, 164, 167, 172, 177, 178, 180, 181, 185, 189, 190, 191, 194, 195, 196, 197, 198, 200, 201, 203, 205, 206, 207, 208, 210, 211, 216, 217, 219, 220, 222, 223, 226, 227, 228, 229, 230, 231, 232, 236, 239, 241, 243, 245, 248, 249, 251, 255, 262, 264, 277, 279, 280, 281, 282, 283, 287], "intend": [3, 4, 6, 10, 14, 18, 61, 62, 72, 81, 86, 101, 103, 117, 170, 200, 201, 205, 208, 223, 226, 227, 239, 244, 276], "part": [3, 4, 6, 7, 10, 11, 18, 19, 20, 22, 35, 40, 52, 53, 60, 61, 62, 66, 67, 69, 77, 84, 86, 88, 91, 92, 94, 101, 111, 115, 116, 119, 120, 124, 125, 127, 133, 135, 136, 140, 142, 159, 171, 175, 184, 194, 198, 200, 201, 203, 205, 206, 207, 209, 210, 211, 218, 220, 222, 223, 226, 228, 241, 243, 245, 248, 277, 282, 287], "those": [3, 6, 10, 11, 12, 14, 18, 19, 22, 26, 30, 31, 34, 39, 42, 43, 44, 52, 53, 59, 60, 61, 62, 65, 74, 75, 86, 88, 91, 97, 100, 101, 115, 119, 120, 127, 133, 136, 148, 172, 184, 187, 190, 193, 194, 196, 200, 201, 203, 205, 206, 208, 209, 210, 216, 218, 222, 226, 227, 228, 229, 230, 236, 239, 241, 245, 248, 255, 258, 279, 281, 287], "everi": [3, 4, 6, 11, 18, 20, 22, 26, 32, 37, 38, 39, 42, 47, 49, 52, 53, 61, 62, 76, 90, 92, 97, 101, 111, 140, 191, 193, 194, 196, 197, 198, 200, 201, 203, 205, 210, 215, 218, 220, 222, 223, 226, 229, 230, 232, 259, 262, 264, 280, 282, 283, 287], "doe": [3, 6, 7, 8, 10, 11, 15, 18, 19, 20, 22, 23, 29, 30, 31, 32, 33, 34, 37, 38, 41, 42, 43, 44, 52, 53, 57, 59, 60, 61, 62, 63, 65, 67, 69, 71, 72, 74, 75, 77, 86, 88, 91, 92, 97, 100, 101, 103, 113, 115, 117, 125, 127, 132, 136, 155, 159, 165, 169, 171, 174, 184, 193, 194, 196, 198, 199, 200, 201, 203, 205, 206, 207, 210, 217, 218, 219, 220, 222, 223, 225, 226, 228, 235, 236, 239, 241, 243, 245, 248, 249, 251, 255, 257, 260, 276, 277, 279, 282, 283, 286, 287, 288], "themselv": [3, 7, 10, 20, 39, 42, 53, 57, 59, 61, 88, 101, 135, 136, 179, 200, 201, 205, 216, 230, 236, 245, 248, 251, 287], "incomplet": [3, 6, 7, 61, 66, 69, 198, 200, 206, 210, 212, 228, 229], "main": [3, 5, 6, 7, 10, 12, 28, 38, 39, 43, 61, 67, 86, 92, 97, 100, 125, 133, 173, 179, 190, 194, 196, 197, 201, 210, 217, 226, 229, 235, 242, 287, 288], "webpag": [3, 7], "complet": [3, 4, 6, 10, 11, 12, 18, 26, 29, 38, 43, 61, 62, 63, 65, 67, 68, 69, 77, 86, 88, 97, 101, 115, 120, 121, 129, 135, 142, 161, 164, 165, 194, 203, 206, 207, 211, 217, 222, 223, 226, 229, 230, 241, 243, 251, 281, 282, 287], "io": [3, 7, 89, 210, 249], "one": [3, 4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 32, 34, 35, 38, 39, 41, 42, 43, 45, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 67, 69, 71, 72, 73, 74, 75, 77, 78, 83, 84, 85, 86, 88, 89, 90, 91, 92, 94, 96, 97, 100, 101, 102, 103, 104, 105, 108, 109, 111, 112, 115, 116, 119, 120, 125, 126, 129, 139, 140, 142, 144, 147, 148, 149, 155, 160, 169, 173, 175, 177, 178, 180, 183, 184, 185, 189, 190, 191, 193, 194, 195, 196, 197, 198, 200, 201, 203, 205, 206, 207, 208, 209, 210, 211, 217, 218, 219, 220, 222, 223, 226, 227, 228, 229, 230, 231, 234, 236, 237, 241, 242, 243, 245, 248, 249, 251, 255, 260, 262, 264, 275, 276, 277, 279, 281, 282, 283, 285, 286, 287], "arbitrari": [3, 6, 10, 11, 12, 18, 20, 22, 26, 28, 30, 31, 41, 46, 53, 54, 60, 61, 62, 65, 66, 69, 72, 73, 75, 91, 92, 97, 105, 136, 140, 161, 164, 194, 196, 197, 200, 201, 203, 205, 207, 222, 226, 227, 228, 236, 246, 249, 255, 257, 276, 277, 282, 287, 288], "precis": [3, 4, 6, 11, 12, 18, 19, 20, 22, 26, 43, 52, 61, 64, 65, 66, 69, 77, 88, 97, 101, 109, 140, 195, 197, 200, 201, 205, 206, 207, 210, 217, 222, 223, 228, 229, 242, 243, 251, 276, 287], "arithmet": [3, 43, 61, 62, 65, 92, 97, 101, 164, 171, 195, 196, 197, 199, 200, 201, 203, 204, 208, 211], "hood": [3, 11], "whenev": [3, 4, 10, 11, 12, 20, 59, 86, 88, 97, 182, 196, 197, 198, 212, 217, 220, 230, 277, 279, 282], "calcul": [3, 12, 16, 18, 28, 29, 35, 41, 44, 53, 59, 61, 62, 63, 64, 65, 67, 69, 71, 73, 74, 75, 77, 78, 88, 92, 94, 97, 101, 104, 105, 113, 115, 116, 119, 120, 124, 127, 128, 129, 144, 147, 148, 151, 154, 170, 171, 172, 173, 175, 176, 184, 185, 186, 187, 189, 191, 193, 194, 195, 196, 197, 200, 201, 203, 205, 206, 207, 212, 217, 226, 230, 234, 242, 243, 249, 255, 258, 262, 264, 283, 286], "float": [3, 11, 18, 20, 24, 43, 52, 61, 67, 69, 76, 78, 88, 89, 92, 97, 101, 103, 109, 111, 142, 148, 190, 196, 200, 201, 210, 222, 228, 230, 241, 249, 251, 276, 279], "point": [3, 4, 6, 7, 11, 12, 16, 18, 26, 28, 29, 33, 35, 41, 43, 44, 52, 59, 60, 61, 62, 63, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 80, 83, 84, 85, 86, 88, 97, 101, 104, 105, 107, 109, 116, 119, 120, 121, 122, 124, 125, 127, 129, 131, 132, 133, 134, 136, 137, 138, 139, 140, 142, 143, 155, 177, 180, 186, 189, 191, 194, 196, 197, 200, 201, 203, 205, 206, 210, 212, 216, 217, 218, 226, 228, 229, 230, 242, 245, 248, 249, 251, 255, 258, 260, 261, 262, 264, 265, 273, 276, 277, 279, 282], "valu": [3, 4, 6, 7, 10, 11, 12, 16, 18, 20, 22, 25, 26, 27, 28, 29, 30, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 50, 52, 53, 57, 60, 61, 62, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 83, 84, 86, 88, 89, 91, 92, 93, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 109, 111, 113, 116, 119, 120, 121, 122, 124, 125, 127, 139, 142, 144, 148, 151, 154, 159, 161, 164, 167, 169, 170, 171, 172, 175, 176, 178, 179, 180, 185, 186, 189, 191, 193, 194, 195, 196, 198, 199, 200, 201, 203, 205, 206, 207, 208, 210, 211, 216, 217, 218, 219, 222, 223, 225, 226, 227, 228, 229, 230, 231, 234, 235, 236, 237, 241, 243, 244, 248, 249, 251, 258, 260, 262, 265, 277, 279, 282], "evalf": [3, 6, 11, 12, 18, 22, 28, 31, 43, 60, 65, 66, 67, 69, 80, 83, 84, 92, 97, 103, 125, 127, 142, 157, 201, 206, 210, 217, 218, 222, 230, 242, 249, 278], "cannot": [3, 4, 6, 7, 10, 11, 12, 15, 19, 20, 22, 25, 28, 33, 36, 37, 38, 39, 40, 41, 43, 53, 58, 60, 61, 63, 65, 67, 71, 73, 74, 76, 78, 83, 88, 90, 93, 95, 97, 99, 101, 111, 170, 178, 180, 193, 194, 196, 201, 203, 205, 206, 207, 210, 217, 218, 222, 223, 225, 226, 228, 229, 230, 231, 239, 241, 242, 243, 248, 252, 255, 257, 281, 282, 283, 287, 288], "without": [3, 4, 6, 7, 10, 11, 12, 18, 20, 33, 37, 39, 40, 43, 60, 61, 62, 63, 65, 69, 86, 88, 89, 92, 94, 97, 111, 112, 119, 125, 131, 133, 138, 139, 175, 180, 184, 185, 186, 193, 196, 199, 200, 203, 206, 210, 212, 218, 219, 220, 222, 223, 226, 227, 228, 229, 230, 232, 235, 236, 239, 241, 242, 243, 246, 248, 249, 251, 258, 261, 283, 287], "import": [3, 4, 8, 11, 12, 14, 15, 16, 18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 109, 111, 112, 113, 114, 115, 116, 117, 119, 120, 122, 124, 125, 127, 128, 129, 130, 132, 133, 134, 136, 137, 138, 139, 140, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 169, 170, 172, 173, 174, 175, 176, 177, 178, 180, 182, 184, 185, 186, 187, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 239, 241, 242, 243, 244, 245, 246, 248, 249, 251, 252, 253, 255, 257, 258, 259, 260, 261, 262, 265, 276, 277, 279, 281, 282, 283, 285, 286, 287, 288], "importerror": 3, "extern": [3, 33, 89, 103, 107, 109, 127, 135, 190, 200, 201, 211, 218, 222, 230, 241, 242], "doc": [3, 4, 6, 7, 8, 12, 32, 43, 52, 60, 61, 77, 89, 140, 177, 200, 202, 223, 226, 241, 242, 244, 246, 248, 255, 260, 273], "latest": [3, 5, 33, 42, 244, 246, 249], "mean": [3, 4, 6, 7, 10, 11, 12, 18, 19, 20, 22, 30, 39, 44, 53, 60, 61, 62, 63, 79, 86, 88, 89, 91, 92, 95, 97, 101, 104, 115, 136, 175, 177, 180, 185, 190, 193, 196, 197, 198, 200, 203, 205, 209, 210, 220, 222, 223, 225, 226, 228, 229, 230, 231, 232, 234, 235, 241, 248, 260, 276, 277, 279, 281, 282, 283, 287, 288], "did": [3, 7, 19, 61, 88, 101, 115, 132, 180, 203, 207, 218, 228, 239, 249, 279, 281, 287], "explain": [3, 4, 6, 7, 18, 22, 31, 42, 57, 61, 69, 79, 84, 197, 200, 203, 205, 207, 217], "ones": [3, 4, 10, 20, 33, 43, 52, 57, 61, 86, 88, 91, 92, 94, 97, 100, 101, 125, 148, 169, 175, 199, 203, 213, 223, 226, 231, 237, 243, 251, 255, 260, 283, 286], "typic": [3, 4, 10, 11, 20, 57, 67, 86, 101, 111, 116, 122, 126, 184, 194, 196, 198, 203, 207, 220, 242, 243, 260], "directli": [3, 4, 6, 10, 11, 12, 16, 18, 19, 20, 22, 33, 37, 38, 41, 42, 43, 52, 60, 61, 63, 67, 72, 92, 94, 97, 101, 125, 161, 173, 178, 185, 189, 196, 197, 199, 200, 201, 205, 206, 218, 219, 220, 222, 223, 226, 227, 228, 229, 230, 241, 242, 243, 244, 245, 246, 277, 288], "git": [3, 8], "repositori": [3, 5, 7, 33, 223], "vast": [3, 31, 88, 202], "wrap": [3, 4, 6, 36, 37, 38, 39, 43, 50, 61, 67, 89, 102, 190, 194, 196, 199, 200, 203, 210, 213, 229, 235, 242, 246, 249, 251, 282], "addition": [3, 6, 10, 61, 137, 173, 194, 203, 210, 230, 239, 246, 259], "ci": [3, 7, 69, 86, 210, 286], "wish": [3, 6, 12, 20, 29, 33, 43, 61, 62, 65, 86, 101, 170, 184, 194, 245, 249, 277, 281, 283, 288], "local": [3, 34, 36, 37, 38, 61, 63, 86, 103, 132, 134, 187, 197, 203, 228, 241], "improv": [3, 4, 10, 19, 20, 61, 86, 196, 200, 203, 204, 206, 207, 209, 211, 226, 229, 235, 277, 283], "perform": [3, 10, 11, 12, 15, 16, 18, 20, 40, 42, 43, 44, 52, 53, 56, 60, 61, 62, 64, 65, 67, 74, 78, 85, 88, 95, 97, 101, 102, 117, 120, 127, 129, 135, 139, 140, 142, 159, 160, 169, 172, 175, 191, 194, 198, 199, 200, 203, 205, 206, 211, 212, 213, 217, 222, 223, 226, 228, 229, 230, 231, 242, 248, 255, 257, 259, 262, 276, 277, 281, 282, 287], "gmpy2": [3, 200, 201], "wrapper": [3, 10, 11, 20, 37, 39, 43, 53, 61, 69, 97, 139, 187, 190, 199, 200, 203, 210, 217, 226, 229, 230, 242, 246, 248], "gmp": 3, "multipl": [3, 4, 6, 10, 11, 12, 14, 18, 20, 24, 26, 30, 31, 37, 38, 39, 41, 42, 43, 44, 50, 52, 53, 57, 60, 61, 62, 66, 67, 69, 71, 76, 79, 81, 86, 88, 90, 91, 92, 94, 97, 98, 101, 103, 108, 111, 115, 127, 135, 142, 143, 159, 160, 161, 165, 172, 174, 177, 180, 181, 182, 185, 189, 193, 196, 197, 198, 199, 200, 201, 203, 204, 206, 207, 210, 215, 216, 218, 219, 220, 222, 223, 226, 227, 228, 229, 230, 231, 234, 236, 239, 243, 244, 245, 246, 248, 249, 251, 255, 260, 276, 277, 279, 280, 282, 283, 288], "larg": [3, 4, 6, 12, 18, 22, 27, 52, 53, 61, 62, 71, 86, 88, 100, 101, 115, 121, 139, 142, 155, 180, 184, 195, 200, 201, 203, 206, 209, 210, 211, 217, 220, 222, 230, 235, 242, 249, 251, 258, 276, 281, 287], "integ": [3, 6, 7, 10, 11, 12, 18, 20, 24, 25, 26, 36, 37, 38, 39, 41, 43, 44, 50, 52, 53, 54, 55, 57, 60, 61, 62, 63, 64, 65, 66, 69, 71, 74, 85, 86, 88, 89, 90, 91, 92, 94, 97, 98, 101, 103, 104, 111, 113, 119, 164, 169, 171, 172, 173, 175, 177, 185, 187, 190, 195, 196, 197, 198, 199, 201, 203, 204, 205, 206, 207, 209, 210, 212, 215, 216, 217, 218, 219, 220, 222, 223, 226, 228, 229, 230, 234, 235, 236, 242, 243, 245, 248, 251, 277, 279, 282, 286, 287], "faster": [3, 18, 22, 27, 28, 43, 46, 61, 69, 92, 101, 102, 115, 117, 120, 121, 139, 199, 200, 201, 203, 205, 206, 207, 211, 213, 217, 222, 223, 226, 227, 229, 242, 245], "int": [3, 6, 7, 10, 11, 12, 18, 19, 20, 35, 41, 43, 53, 61, 62, 63, 66, 67, 69, 70, 77, 86, 88, 89, 91, 92, 97, 98, 101, 103, 109, 111, 119, 155, 159, 160, 169, 185, 187, 189, 190, 195, 196, 200, 201, 205, 206, 207, 210, 212, 213, 215, 226, 227, 230, 242, 246, 248, 251, 279, 281, 282, 286, 287], "core": [3, 4, 5, 6, 11, 12, 15, 18, 19, 20, 24, 39, 41, 43, 52, 62, 67, 68, 70, 78, 92, 101, 103, 173, 174, 198, 200, 201, 202, 203, 205, 206, 207, 210, 217, 218, 222, 223, 226, 230, 240, 241, 242, 248, 249, 253, 266, 267, 279, 282], "oper": [3, 5, 6, 11, 18, 19, 20, 27, 28, 29, 31, 35, 39, 43, 52, 53, 54, 60, 61, 62, 63, 64, 65, 67, 69, 71, 79, 81, 84, 86, 91, 92, 94, 101, 103, 111, 112, 115, 120, 121, 129, 133, 139, 142, 147, 151, 152, 156, 158, 159, 160, 161, 166, 167, 170, 172, 173, 174, 175, 184, 185, 187, 192, 197, 198, 199, 200, 201, 203, 205, 206, 207, 210, 213, 215, 218, 219, 222, 225, 226, 228, 229, 232, 233, 234, 235, 241, 242, 245, 248, 249, 255, 266, 270, 272, 273, 278, 279, 280, 282, 287], "poli": [3, 11, 12, 22, 60, 61, 62, 66, 67, 69, 70, 77, 83, 88, 92, 94, 97, 101, 142, 197, 198, 202, 203, 205, 206, 207, 209, 212, 225, 226, 228, 229, 241, 273], "refer": [3, 4, 5, 7, 10, 11, 12, 16, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 33, 37, 38, 39, 41, 43, 45, 47, 49, 50, 52, 53, 54, 55, 59, 62, 64, 66, 67, 69, 71, 76, 77, 78, 83, 89, 90, 91, 92, 98, 102, 104, 109, 111, 112, 114, 116, 119, 120, 122, 124, 125, 127, 135, 137, 140, 142, 143, 144, 146, 148, 152, 154, 156, 157, 158, 161, 163, 164, 172, 173, 175, 184, 185, 186, 187, 189, 191, 193, 199, 200, 202, 210, 212, 213, 215, 218, 222, 225, 226, 227, 228, 230, 236, 245, 248, 249, 251, 255, 259, 260, 264, 272, 273, 279, 283, 284, 287, 288], "domain": [3, 6, 10, 11, 16, 20, 22, 27, 41, 42, 61, 62, 64, 66, 67, 69, 80, 82, 83, 86, 88, 94, 97, 98, 101, 108, 111, 125, 142, 197, 199, 202, 203, 205, 207, 208, 225, 226, 228, 230, 273, 283, 288], "No": [3, 6, 7, 12, 31, 42, 61, 69, 76, 91, 101, 104, 112, 125, 170, 196, 206, 212, 213, 222, 223, 228, 229, 230, 235, 239, 245, 246, 248, 276, 288], "mani": [3, 4, 6, 11, 12, 14, 16, 18, 19, 20, 22, 23, 24, 26, 28, 29, 31, 33, 41, 42, 43, 44, 49, 52, 57, 61, 62, 63, 65, 67, 69, 73, 86, 88, 91, 92, 97, 101, 102, 120, 121, 125, 127, 135, 138, 139, 142, 159, 175, 183, 194, 197, 199, 200, 201, 203, 205, 214, 217, 218, 220, 222, 223, 226, 227, 228, 229, 230, 234, 243, 248, 276, 277, 279, 280, 281, 282, 286, 287, 288], "algorithm": [3, 6, 11, 12, 18, 22, 26, 28, 30, 31, 41, 45, 46, 51, 52, 53, 55, 57, 59, 60, 61, 62, 65, 66, 67, 73, 78, 86, 88, 91, 94, 97, 98, 101, 104, 112, 119, 139, 162, 180, 185, 195, 196, 197, 198, 199, 200, 201, 204, 205, 207, 211, 215, 218, 219, 222, 223, 226, 228, 229, 230, 236, 245, 248, 272, 277, 282, 283, 287], "simplif": [3, 11, 12, 18, 36, 38, 40, 41, 43, 61, 63, 66, 67, 86, 92, 97, 103, 117, 125, 139, 142, 159, 175, 185, 206, 211, 221, 222, 226, 228, 229, 266, 267, 276, 278, 280, 281], "factor": [3, 10, 11, 12, 44, 52, 53, 60, 61, 62, 65, 66, 67, 69, 86, 88, 97, 101, 104, 111, 142, 144, 152, 156, 159, 171, 175, 180, 181, 182, 197, 200, 201, 202, 204, 205, 206, 213, 219, 220, 222, 223, 226, 228, 230, 234, 245, 259, 262, 281, 283], "matric": [3, 6, 11, 17, 18, 39, 43, 61, 62, 88, 98, 100, 111, 119, 120, 121, 125, 129, 139, 142, 144, 147, 148, 150, 158, 159, 169, 174, 185, 194, 195, 199, 205, 210, 211, 218, 220, 222, 223, 226, 228, 229, 231, 243, 244, 272, 278, 280, 281], "thu": [3, 4, 10, 11, 12, 16, 24, 26, 27, 29, 39, 46, 52, 53, 61, 62, 63, 67, 69, 84, 86, 88, 92, 95, 97, 100, 101, 112, 124, 129, 135, 139, 180, 185, 198, 203, 205, 207, 211, 217, 220, 222, 243, 248, 249, 260, 261, 279, 282, 287, 288], "speed": [3, 6, 10, 38, 43, 52, 61, 62, 65, 92, 101, 102, 113, 119, 120, 121, 124, 125, 127, 128, 129, 130, 132, 133, 134, 136, 137, 138, 142, 143, 146, 149, 184, 185, 189, 194, 195, 207, 210, 211, 217, 222, 226, 242, 245, 248, 282, 283], "non": [3, 4, 11, 12, 18, 20, 22, 28, 29, 31, 34, 39, 41, 44, 51, 54, 60, 61, 62, 66, 67, 68, 69, 70, 71, 74, 75, 76, 88, 90, 91, 92, 93, 94, 97, 98, 100, 115, 120, 122, 127, 129, 133, 137, 138, 142, 159, 164, 174, 175, 177, 191, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 209, 210, 213, 217, 218, 220, 222, 223, 225, 226, 228, 229, 230, 231, 234, 235, 236, 241, 243, 248, 251, 262, 282, 287, 288], "who": [3, 4, 6, 16, 20, 62, 63, 142, 194, 203, 210, 280], "abl": [3, 4, 6, 11, 16, 18, 20, 25, 29, 42, 43, 52, 57, 61, 62, 63, 72, 80, 88, 94, 97, 101, 108, 125, 137, 139, 140, 142, 143, 197, 200, 207, 226, 229, 241, 259, 281, 286, 288], "experi": [3, 127, 229, 230], "design": [3, 4, 6, 10, 11, 13, 15, 19, 20, 23, 28, 32, 39, 44, 51, 61, 97, 100, 103, 142, 143, 200, 204, 210, 215, 220, 226, 229, 281, 282, 286], "interfac": [3, 7, 11, 26, 41, 61, 89, 119, 144, 170, 190, 194, 200, 203, 208, 229, 242, 243], "ipython": [3, 6, 10, 11, 12, 33, 89, 142, 190, 249, 253, 254, 285, 286], "jupyt": [3, 10, 11, 20, 249, 253], "notebook": [3, 11, 20, 33, 89, 190, 249, 285, 286], "init_sess": [3, 89, 286], "usual": [3, 10, 11, 12, 16, 18, 22, 42, 44, 52, 60, 61, 62, 79, 86, 88, 97, 135, 161, 173, 180, 191, 193, 194, 197, 198, 200, 201, 203, 209, 210, 211, 217, 220, 226, 229, 230, 231, 235, 236, 243, 245, 249, 255, 264, 276, 279, 282, 286, 287], "flag": [3, 4, 14, 20, 22, 41, 43, 52, 53, 57, 59, 61, 74, 76, 88, 91, 92, 93, 97, 101, 119, 125, 159, 196, 201, 203, 206, 207, 210, 211, 212, 218, 222, 223, 226, 228, 229, 236, 241, 242, 248, 251, 276, 287], "auto_symbol": [3, 89, 103], "auto_int_to_integ": [3, 89], "qt": 3, "consol": [3, 4, 12, 61, 89, 190, 196, 286], "express": [3, 4, 6, 7, 11, 14, 15, 18, 19, 20, 23, 24, 27, 29, 31, 36, 37, 38, 39, 40, 41, 53, 60, 61, 62, 63, 64, 65, 66, 67, 69, 71, 74, 76, 77, 84, 85, 86, 88, 89, 92, 95, 96, 97, 100, 101, 102, 104, 111, 112, 114, 115, 116, 118, 119, 121, 122, 125, 129, 135, 136, 137, 138, 139, 140, 142, 143, 150, 154, 158, 159, 163, 164, 167, 170, 172, 173, 174, 175, 177, 178, 180, 182, 184, 185, 187, 189, 190, 191, 194, 195, 196, 197, 198, 201, 203, 205, 206, 207, 210, 211, 213, 215, 216, 217, 218, 219, 220, 222, 223, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 239, 242, 243, 244, 245, 246, 249, 251, 255, 257, 258, 259, 261, 262, 264, 270, 272, 277, 278, 279, 280, 281, 283, 286, 287, 288], "mathjax": [3, 7, 89, 190, 286], "preview": [3, 42, 244], "save": [3, 11, 41, 61, 97, 101, 196, 209, 228, 245], "viewer": [3, 7, 42, 210, 244], "parser": [3, 94, 103, 135, 142, 241, 272], "modul": [3, 4, 5, 6, 7, 11, 12, 15, 18, 25, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 51, 53, 61, 62, 64, 66, 67, 69, 73, 77, 81, 84, 87, 88, 89, 91, 94, 95, 96, 97, 102, 103, 104, 106, 107, 109, 112, 115, 125, 126, 131, 135, 137, 138, 142, 144, 147, 149, 150, 162, 165, 178, 179, 180, 181, 191, 194, 196, 201, 202, 204, 207, 208, 210, 214, 217, 220, 224, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 258, 260, 262, 263, 264, 265, 266, 272, 273, 274, 276, 279, 281, 287, 288], "parse_expr": [3, 10, 18, 31, 103], "mathematca": 3, "parse_mathematica": [3, 10, 103], "maxima": [3, 26, 103, 229], "parse_maxima": [3, 103], "antlr": [3, 103, 125], "runtim": [3, 11, 43, 61, 121], "autolev": [3, 127, 135, 272], "call": [3, 4, 6, 7, 11, 12, 15, 16, 18, 19, 20, 22, 23, 26, 27, 28, 29, 30, 35, 36, 37, 38, 39, 42, 43, 44, 45, 46, 50, 51, 52, 53, 59, 61, 62, 64, 65, 66, 68, 69, 71, 76, 77, 79, 84, 86, 88, 90, 91, 92, 93, 94, 95, 97, 99, 100, 101, 103, 104, 105, 111, 115, 119, 125, 127, 129, 136, 139, 140, 165, 167, 170, 175, 180, 185, 191, 193, 194, 195, 196, 197, 198, 200, 201, 203, 205, 206, 207, 208, 209, 210, 212, 217, 218, 220, 222, 223, 225, 226, 228, 229, 230, 232, 234, 236, 237, 239, 241, 242, 243, 244, 245, 246, 248, 249, 251, 255, 258, 259, 262, 264, 277, 279, 281, 282, 283, 286, 287, 288], "antlr4": [3, 103], "awar": [3, 4, 6, 11, 12, 19, 41, 61, 65, 91, 97, 220, 230, 249], "must": [3, 4, 5, 6, 10, 11, 12, 18, 19, 29, 35, 36, 37, 38, 43, 52, 53, 55, 57, 59, 60, 61, 62, 63, 66, 67, 69, 71, 74, 77, 80, 83, 84, 86, 88, 91, 92, 93, 94, 97, 100, 101, 104, 105, 107, 109, 111, 112, 119, 120, 121, 125, 127, 135, 137, 138, 139, 140, 142, 155, 170, 172, 175, 184, 185, 194, 195, 196, 197, 198, 201, 203, 205, 206, 210, 211, 218, 219, 220, 222, 223, 226, 228, 229, 230, 234, 235, 241, 242, 243, 244, 245, 246, 248, 249, 252, 279, 281, 282, 286, 287], "match": [3, 4, 6, 10, 12, 18, 20, 29, 52, 53, 60, 61, 69, 74, 86, 88, 92, 97, 119, 124, 151, 176, 184, 185, 199, 206, 222, 223, 226, 227, 228, 230, 239, 241, 243, 248, 249, 261, 277], "wa": [3, 4, 10, 12, 14, 18, 20, 29, 50, 52, 53, 55, 61, 62, 63, 69, 74, 97, 101, 103, 115, 116, 125, 127, 129, 139, 140, 170, 180, 193, 194, 195, 197, 203, 205, 206, 207, 209, 210, 219, 220, 222, 226, 228, 230, 239, 241, 244, 246, 248, 249, 277, 279, 281, 282, 285], "compil": [3, 43, 89, 102, 115, 142, 190, 210, 222, 235, 241, 242, 243, 266, 281], "4": [3, 7, 12, 14, 16, 18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 30, 31, 35, 36, 38, 39, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 74, 75, 76, 77, 78, 80, 83, 84, 86, 88, 90, 91, 92, 93, 94, 95, 97, 98, 100, 101, 103, 104, 107, 109, 111, 112, 113, 117, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 139, 140, 142, 143, 144, 147, 151, 154, 159, 169, 170, 172, 173, 174, 175, 176, 178, 184, 185, 186, 189, 191, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 235, 236, 241, 242, 245, 248, 249, 255, 258, 259, 260, 262, 264, 265, 276, 277, 279, 281, 282, 283, 287, 288], "clang": [3, 103], "bind": [3, 43, 210, 242], "parse_c": 3, "lfortran": [3, 103], "fortran": [3, 11, 16, 20, 41, 102, 103, 115, 142, 195, 243, 286], "satisfi": [3, 7, 10, 18, 25, 26, 30, 38, 39, 41, 44, 49, 52, 57, 61, 62, 66, 69, 71, 84, 86, 90, 91, 97, 101, 121, 139, 159, 164, 197, 198, 203, 205, 206, 210, 216, 217, 218, 223, 226, 227, 228, 229, 230, 236, 282, 287], "implement": [3, 6, 7, 10, 11, 13, 15, 19, 20, 26, 28, 30, 31, 32, 35, 36, 37, 38, 41, 42, 43, 44, 46, 51, 52, 53, 58, 61, 62, 64, 66, 67, 69, 72, 74, 81, 82, 84, 85, 88, 91, 92, 93, 97, 101, 102, 103, 115, 125, 135, 144, 146, 147, 150, 159, 160, 168, 169, 171, 179, 184, 186, 193, 194, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 209, 211, 214, 217, 218, 219, 222, 223, 226, 227, 228, 229, 230, 234, 235, 245, 248, 249, 252, 263, 266, 270, 277, 281, 287], "dpll": 3, "But": [3, 4, 7, 10, 11, 12, 20, 22, 31, 60, 61, 69, 75, 85, 92, 97, 101, 163, 164, 175, 180, 185, 197, 198, 203, 207, 217, 219, 220, 222, 223, 226, 228, 229, 235, 245, 248, 249, 258, 277, 279, 281, 282, 287], "sat": [3, 37], "solver": [3, 6, 11, 25, 28, 37, 69, 97, 101, 124, 135, 142, 143, 199, 202, 210, 222, 223, 227, 241, 266, 267, 273, 278, 280], "ask": [3, 6, 11, 12, 15, 18, 19, 37, 38, 39, 40, 61, 73, 86, 125, 180, 197, 216, 222, 229, 248, 267, 279], "pycosat": 3, "forc": [3, 12, 16, 19, 20, 61, 65, 67, 71, 77, 86, 88, 91, 104, 105, 107, 116, 119, 120, 124, 127, 129, 130, 131, 132, 135, 137, 138, 139, 142, 163, 164, 178, 191, 194, 196, 198, 200, 219, 222, 223, 228, 241, 262, 264, 272, 286, 287], "pysat": 3, "minisat": 3, "minisat22": 3, "heavi": [3, 230, 282], "primarili": [3, 11, 18, 43, 61, 67, 101, 104, 174, 206, 208, 242, 245, 251, 259], "support": [3, 4, 5, 6, 7, 10, 11, 12, 20, 28, 33, 35, 36, 37, 38, 41, 42, 43, 53, 61, 65, 68, 69, 71, 85, 88, 94, 97, 101, 102, 103, 104, 105, 107, 108, 111, 115, 119, 125, 142, 170, 185, 193, 196, 198, 199, 200, 201, 203, 205, 206, 207, 210, 215, 216, 217, 218, 222, 226, 227, 228, 229, 230, 231, 235, 239, 241, 242, 243, 249, 260, 262, 277, 279, 282, 286], "give": [3, 4, 6, 12, 14, 18, 19, 20, 22, 24, 26, 27, 28, 29, 30, 31, 36, 38, 43, 44, 50, 52, 53, 54, 55, 60, 61, 62, 63, 66, 67, 69, 71, 73, 74, 76, 77, 85, 86, 88, 89, 91, 94, 97, 100, 101, 102, 104, 107, 111, 119, 125, 142, 154, 169, 170, 172, 173, 177, 178, 180, 181, 183, 185, 189, 191, 193, 194, 195, 196, 197, 198, 200, 201, 203, 205, 206, 207, 210, 211, 212, 213, 217, 218, 219, 220, 222, 223, 226, 228, 229, 230, 241, 242, 243, 248, 259, 264, 279, 280, 282, 287, 288], "rudimentari": [3, 20, 203], "text": [3, 4, 6, 7, 11, 20, 33, 43, 52, 62, 66, 67, 69, 79, 86, 89, 92, 97, 101, 140, 180, 190, 195, 196, 197, 210, 217, 223, 226, 229, 230, 241], "pyglet": [3, 210], "pygletplot": [3, 196], "2d": [3, 10, 74, 75, 77, 104, 105, 107, 153, 185, 196, 210, 223, 235, 281], "3d": [3, 10, 35, 45, 74, 75, 104, 153, 176, 191, 196, 259, 261, 262, 263, 264], "evalu": [3, 6, 11, 16, 18, 19, 23, 29, 31, 36, 37, 38, 41, 43, 61, 63, 66, 67, 69, 72, 76, 77, 86, 88, 91, 94, 97, 101, 102, 103, 111, 115, 117, 125, 139, 140, 150, 152, 154, 156, 161, 164, 172, 175, 195, 196, 200, 201, 203, 204, 206, 210, 211, 216, 217, 218, 220, 222, 223, 226, 228, 229, 230, 232, 242, 243, 244, 249, 262, 267, 276, 277, 278, 279, 281, 283], "numer": [3, 6, 10, 11, 12, 14, 16, 18, 23, 24, 25, 26, 27, 30, 39, 41, 43, 60, 61, 66, 69, 73, 77, 84, 97, 101, 103, 107, 108, 109, 111, 119, 120, 121, 125, 127, 135, 139, 143, 147, 154, 157, 172, 179, 184, 194, 196, 200, 201, 203, 204, 205, 206, 209, 210, 219, 220, 222, 226, 228, 229, 235, 241, 242, 248, 249, 267, 276, 279, 283, 287], "variou": [3, 6, 7, 11, 16, 20, 22, 25, 41, 43, 45, 52, 60, 61, 66, 81, 86, 88, 91, 97, 122, 154, 158, 159, 170, 172, 184, 197, 198, 201, 202, 203, 205, 211, 217, 220, 223, 226, 227, 229, 243, 287], "primari": [3, 4, 6, 7, 18, 20, 61, 73, 91, 194, 197, 243, 249], "vehicl": 3, "between": [3, 4, 11, 15, 19, 20, 22, 26, 42, 43, 51, 52, 53, 55, 59, 61, 63, 66, 69, 71, 73, 74, 75, 76, 77, 78, 88, 90, 91, 94, 95, 97, 101, 102, 103, 107, 108, 109, 111, 119, 122, 124, 125, 128, 132, 134, 136, 139, 140, 142, 143, 144, 147, 148, 154, 161, 163, 164, 165, 169, 172, 173, 174, 175, 178, 180, 185, 186, 187, 189, 191, 193, 194, 196, 197, 199, 203, 205, 206, 210, 212, 222, 226, 227, 228, 229, 230, 231, 244, 249, 255, 258, 259, 262, 264, 279], "standard": [3, 7, 10, 11, 12, 18, 20, 22, 26, 27, 29, 31, 43, 61, 65, 67, 69, 84, 86, 88, 89, 90, 91, 95, 97, 101, 102, 103, 114, 152, 156, 185, 191, 195, 197, 200, 201, 203, 210, 213, 218, 222, 223, 226, 229, 230, 243, 249, 252, 259, 264, 276, 279, 287], "wai": [3, 4, 5, 6, 7, 10, 11, 12, 15, 16, 17, 18, 19, 20, 22, 24, 26, 29, 34, 42, 44, 45, 50, 52, 53, 54, 57, 61, 63, 66, 69, 77, 81, 85, 86, 88, 90, 94, 97, 100, 101, 103, 104, 107, 115, 120, 122, 124, 125, 129, 131, 132, 135, 139, 155, 169, 172, 173, 178, 180, 183, 184, 185, 187, 189, 191, 193, 196, 197, 198, 199, 200, 201, 203, 205, 206, 207, 209, 210, 217, 220, 222, 223, 226, 227, 229, 231, 232, 235, 236, 239, 243, 245, 248, 249, 252, 255, 259, 260, 261, 262, 264, 276, 277, 279, 280, 281, 282, 287, 288], "principl": [3, 62, 92, 101, 146, 195, 197, 198, 203, 219, 228], "pass": [3, 4, 5, 6, 11, 12, 14, 15, 18, 19, 20, 24, 25, 28, 29, 31, 34, 35, 38, 41, 42, 43, 52, 53, 61, 62, 63, 65, 67, 68, 69, 71, 74, 75, 77, 88, 89, 91, 92, 94, 97, 98, 101, 103, 104, 109, 111, 116, 124, 125, 129, 142, 143, 147, 164, 165, 169, 170, 172, 173, 185, 190, 196, 197, 199, 200, 201, 203, 205, 206, 208, 210, 211, 217, 218, 222, 223, 226, 227, 228, 229, 230, 231, 234, 235, 236, 239, 241, 242, 243, 244, 246, 248, 249, 251, 254, 255, 276, 277, 282, 286, 287, 288], "appropri": [3, 6, 7, 10, 12, 16, 26, 30, 52, 61, 67, 76, 97, 115, 127, 164, 165, 175, 185, 193, 199, 200, 206, 207, 210, 216, 217, 222, 223, 228, 230, 235, 243, 260, 286], "namespac": [3, 6, 10, 34, 43, 44, 61, 201, 223, 226, 227, 241, 243, 244, 249], "dictionari": [3, 10, 11, 25, 29, 31, 42, 43, 50, 52, 53, 59, 61, 66, 75, 77, 90, 92, 97, 100, 101, 103, 104, 117, 120, 121, 124, 125, 127, 129, 132, 137, 139, 165, 175, 185, 194, 196, 198, 201, 203, 205, 206, 208, 210, 217, 222, 223, 226, 227, 228, 229, 230, 234, 236, 241, 245, 248, 249, 255, 276, 283], "third": [3, 4, 14, 22, 43, 52, 53, 61, 69, 71, 75, 111, 119, 172, 178, 193, 198, 206, 220, 226, 229, 230, 246, 248, 277, 282], "argument": [3, 4, 5, 6, 11, 15, 18, 19, 20, 22, 24, 28, 29, 30, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44, 52, 53, 56, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 74, 77, 78, 86, 88, 89, 91, 92, 94, 97, 100, 101, 103, 104, 109, 111, 119, 120, 124, 125, 137, 138, 142, 149, 152, 156, 158, 161, 164, 169, 170, 172, 173, 174, 175, 183, 190, 191, 195, 196, 197, 198, 200, 201, 203, 205, 206, 209, 210, 211, 212, 216, 217, 218, 219, 220, 222, 223, 226, 227, 228, 230, 234, 235, 241, 242, 243, 244, 245, 246, 248, 249, 251, 259, 260, 262, 276, 277, 282, 283, 287], "default": [3, 4, 6, 7, 11, 12, 18, 20, 22, 26, 27, 29, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 51, 52, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 74, 75, 76, 77, 78, 80, 83, 88, 89, 91, 92, 94, 97, 98, 101, 102, 103, 104, 105, 107, 109, 111, 113, 115, 116, 117, 119, 120, 121, 125, 139, 148, 165, 167, 170, 172, 173, 175, 181, 184, 185, 187, 189, 190, 195, 196, 198, 199, 200, 201, 203, 205, 206, 207, 209, 210, 211, 212, 213, 217, 218, 219, 222, 223, 226, 227, 228, 229, 230, 235, 236, 241, 242, 243, 245, 246, 248, 249, 251, 255, 276, 277, 281, 283, 286, 287], "translat": [3, 10, 43, 52, 61, 70, 72, 76, 78, 102, 103, 111, 114, 119, 120, 132, 134, 136, 140, 193, 196, 210, 226, 228, 242, 243, 249, 251, 260], "numpi": [3, 6, 10, 11, 20, 22, 27, 28, 29, 33, 43, 61, 84, 89, 102, 109, 125, 142, 159, 169, 199, 210, 230, 235, 242, 243, 249, 276, 279], "By": [3, 12, 18, 20, 22, 26, 27, 29, 36, 38, 43, 51, 60, 61, 63, 65, 66, 69, 75, 76, 80, 84, 86, 91, 92, 97, 100, 101, 102, 103, 104, 105, 109, 116, 170, 175, 196, 198, 200, 201, 203, 205, 206, 207, 209, 210, 212, 217, 219, 222, 223, 226, 228, 229, 230, 234, 236, 237, 241, 244, 248, 249, 262, 276, 281, 282, 287], "produc": [3, 6, 7, 11, 19, 20, 25, 27, 28, 29, 31, 42, 52, 61, 62, 74, 88, 91, 97, 185, 200, 205, 206, 210, 217, 226, 227, 228, 230, 239, 241, 245, 246, 248, 286], "behavior": [3, 4, 10, 11, 12, 20, 52, 61, 66, 69, 88, 103, 114, 115, 135, 139, 170, 197, 198, 205, 206, 210, 211, 215, 217, 219, 222, 239, 242, 244, 248, 249, 279], "backward": [3, 8, 16, 41, 61, 92, 97, 210, 248, 287], "scipi": [3, 11, 22, 24, 27, 43, 61, 69, 115, 142, 169, 210, 230, 242, 249, 276, 285], "special": [3, 6, 11, 13, 18, 20, 27, 31, 34, 35, 53, 61, 62, 64, 65, 66, 68, 76, 79, 86, 88, 92, 97, 142, 159, 164, 191, 197, 200, 203, 204, 205, 210, 219, 220, 222, 225, 226, 227, 228, 230, 241, 242, 243, 246, 248, 249, 259, 262, 264, 267, 277, 278, 282], "cupi": [3, 102], "cuda": [3, 102], "gpu": [3, 102, 142], "jax": [3, 102, 249], "xla": [3, 102], "program": [3, 7, 12, 18, 43, 45, 53, 142, 180, 195, 243, 245, 279, 281, 285, 287], "tpu": [3, 102], "compatibli": 3, "tensorflow": [3, 249], "learn": [3, 5, 7, 23, 29, 31, 97, 140, 194, 219, 229, 276, 279, 280, 281, 285], "numexpr": [3, 249], "fast": [3, 18, 29, 43, 61, 88, 96, 97, 101, 147, 201, 202, 203, 204, 205, 206, 207, 213, 217, 226, 228, 245, 248, 249], "alreadi": [3, 4, 10, 12, 18, 20, 25, 26, 29, 31, 33, 52, 53, 61, 62, 70, 71, 74, 75, 77, 86, 88, 92, 98, 101, 107, 112, 116, 125, 139, 144, 170, 172, 175, 191, 193, 194, 196, 199, 200, 203, 205, 209, 213, 219, 220, 222, 226, 229, 230, 236, 260, 262, 277, 279, 280, 281, 285, 286, 287, 288], "number": [3, 4, 5, 6, 7, 10, 11, 14, 15, 18, 20, 22, 25, 26, 27, 30, 31, 35, 37, 38, 41, 42, 43, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 62, 63, 66, 67, 69, 71, 74, 75, 76, 77, 78, 80, 88, 89, 90, 91, 92, 94, 97, 98, 100, 102, 103, 105, 107, 109, 111, 112, 113, 115, 120, 121, 124, 125, 129, 139, 140, 142, 148, 151, 154, 155, 158, 159, 160, 161, 163, 164, 169, 170, 171, 172, 173, 175, 176, 177, 179, 180, 183, 184, 185, 189, 190, 191, 193, 194, 195, 196, 198, 199, 201, 202, 203, 204, 206, 207, 210, 212, 216, 217, 218, 219, 220, 222, 223, 226, 228, 229, 230, 231, 235, 236, 241, 243, 245, 248, 251, 255, 258, 259, 261, 262, 264, 267, 273, 276, 277, 279, 281, 282, 283, 287], "languag": [3, 7, 11, 12, 16, 20, 43, 67, 97, 103, 115, 125, 142, 210, 215, 230, 242, 243, 279, 281, 283, 285, 287], "valid": [3, 6, 7, 10, 18, 19, 20, 25, 29, 36, 38, 40, 41, 42, 43, 54, 60, 61, 66, 67, 77, 97, 101, 117, 119, 120, 125, 127, 140, 144, 148, 167, 172, 182, 185, 190, 194, 200, 203, 206, 209, 210, 218, 222, 223, 226, 228, 229, 230, 249, 283, 287], "rather": [3, 4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 22, 26, 29, 30, 31, 34, 39, 43, 44, 52, 53, 54, 61, 65, 67, 72, 77, 79, 86, 91, 92, 94, 97, 101, 103, 124, 132, 142, 155, 169, 173, 175, 184, 193, 197, 200, 203, 206, 208, 213, 220, 223, 225, 226, 229, 230, 245, 248, 249, 252, 264, 279, 281, 282], "string": [3, 4, 6, 7, 11, 12, 20, 36, 42, 43, 45, 50, 61, 62, 63, 64, 65, 68, 74, 84, 89, 90, 91, 94, 97, 101, 103, 104, 107, 109, 115, 116, 119, 122, 146, 155, 159, 169, 173, 177, 183, 184, 185, 189, 190, 191, 196, 199, 201, 205, 210, 211, 217, 222, 226, 230, 231, 234, 235, 236, 241, 242, 243, 248, 249, 251, 253, 255, 257, 259, 278, 279, 282, 286], "repres": [3, 10, 11, 12, 15, 18, 19, 20, 25, 27, 29, 35, 37, 39, 42, 43, 44, 45, 50, 51, 52, 53, 54, 56, 57, 60, 61, 62, 63, 66, 67, 69, 71, 72, 74, 76, 77, 78, 83, 84, 88, 90, 91, 92, 94, 97, 101, 103, 104, 105, 108, 109, 111, 116, 119, 120, 122, 124, 125, 127, 128, 129, 130, 133, 135, 137, 138, 139, 140, 142, 144, 146, 147, 149, 161, 162, 164, 168, 169, 172, 173, 175, 177, 180, 181, 182, 183, 184, 185, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 201, 203, 206, 208, 210, 212, 213, 216, 217, 218, 220, 222, 223, 226, 228, 229, 230, 232, 234, 235, 236, 243, 245, 248, 249, 255, 258, 262, 264, 272, 277, 279, 281, 282, 287, 288], "take": [3, 4, 5, 7, 10, 11, 12, 16, 18, 19, 20, 24, 25, 26, 27, 29, 38, 41, 43, 44, 46, 51, 52, 56, 60, 61, 62, 63, 67, 69, 73, 74, 84, 88, 90, 91, 92, 97, 101, 102, 103, 104, 107, 111, 115, 119, 120, 122, 124, 125, 127, 139, 140, 142, 144, 158, 161, 164, 165, 169, 171, 172, 173, 174, 175, 177, 180, 183, 184, 185, 186, 187, 190, 193, 194, 196, 197, 198, 199, 200, 201, 203, 206, 207, 210, 213, 216, 217, 218, 219, 220, 222, 223, 226, 228, 229, 230, 232, 235, 241, 242, 244, 245, 248, 249, 255, 257, 258, 276, 277, 279, 281, 282, 283, 287], "within": [3, 7, 10, 11, 18, 28, 41, 42, 43, 61, 67, 74, 77, 91, 92, 94, 101, 102, 104, 132, 170, 184, 185, 193, 194, 198, 200, 206, 208, 218, 226, 228, 229, 230, 241, 242, 251], "case": [3, 4, 6, 7, 10, 11, 12, 16, 18, 19, 22, 25, 26, 27, 28, 29, 30, 31, 41, 42, 43, 44, 46, 49, 52, 53, 57, 60, 61, 62, 63, 65, 66, 67, 69, 73, 76, 77, 78, 79, 83, 86, 88, 91, 92, 94, 97, 98, 101, 102, 103, 105, 111, 115, 119, 120, 125, 127, 128, 129, 130, 136, 138, 140, 142, 148, 159, 165, 170, 172, 174, 175, 180, 181, 189, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 205, 206, 207, 209, 210, 215, 217, 218, 219, 220, 222, 223, 225, 226, 227, 228, 230, 231, 234, 236, 239, 241, 243, 244, 246, 248, 249, 250, 251, 252, 255, 258, 259, 277, 281, 282, 283, 286, 287, 288], "subpackag": [3, 266], "f2py": [3, 43, 102, 242, 243], "ufuncifi": [3, 43, 242], "cython": [3, 43, 102, 142, 242], "codegen": [3, 20, 102, 210, 242, 247, 274], "relat": [3, 4, 6, 7, 11, 19, 36, 38, 39, 41, 44, 45, 51, 52, 59, 63, 66, 67, 77, 83, 86, 88, 92, 97, 101, 107, 114, 120, 129, 132, 135, 136, 142, 144, 149, 157, 159, 185, 189, 193, 195, 196, 197, 203, 205, 206, 207, 209, 210, 214, 216, 217, 220, 222, 223, 225, 226, 228, 229, 230, 248, 287], "reli": [3, 10, 12, 43, 97, 102, 108, 203, 209, 210, 217, 222, 229, 244, 249, 283], "llvm": 3, "gcc": [3, 243], "ifort": 3, "therefor": [3, 4, 6, 20, 22, 26, 44, 52, 57, 61, 65, 69, 77, 90, 101, 111, 119, 191, 194, 195, 196, 200, 203, 206, 210, 226, 229, 230, 231, 236, 255, 257, 259, 260, 262, 264], "aesara": [3, 10, 43, 142], "aesaracod": [3, 10, 43, 102, 210], "aeseara": 3, "previous": [3, 4, 10, 60, 119, 133, 136, 191, 209, 222, 230, 262], "theano": [3, 10, 142, 286], "return": [3, 4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 22, 25, 26, 28, 30, 31, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 49, 50, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 83, 84, 86, 88, 90, 91, 92, 93, 94, 97, 98, 100, 101, 103, 104, 107, 109, 111, 112, 113, 114, 116, 117, 119, 120, 121, 122, 124, 125, 127, 129, 133, 137, 139, 140, 142, 144, 146, 147, 148, 149, 151, 152, 156, 159, 160, 161, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 189, 191, 194, 195, 196, 197, 198, 199, 200, 201, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 222, 223, 225, 226, 227, 228, 230, 231, 234, 235, 236, 237, 239, 241, 242, 243, 244, 245, 246, 248, 249, 251, 252, 253, 255, 258, 260, 262, 276, 277, 282, 283, 286, 287, 288], "graph": [3, 6, 11, 53, 69, 90, 97, 102, 199, 210, 229, 248, 282, 286], "object": [3, 4, 6, 7, 11, 12, 17, 18, 19, 20, 29, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 51, 52, 53, 54, 55, 56, 60, 61, 63, 66, 67, 69, 71, 72, 73, 74, 76, 77, 78, 86, 88, 91, 92, 94, 95, 97, 102, 103, 104, 105, 109, 111, 112, 115, 116, 119, 120, 121, 122, 124, 125, 129, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 148, 149, 150, 158, 159, 161, 169, 170, 174, 175, 177, 178, 181, 182, 184, 185, 189, 190, 193, 194, 196, 197, 198, 199, 200, 201, 203, 205, 206, 210, 212, 213, 216, 217, 218, 219, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 241, 242, 243, 244, 245, 248, 249, 252, 253, 258, 259, 260, 265, 266, 270, 276, 277, 279, 281, 282, 283, 286, 287], "llvmlite": 3, "llvmjitcod": 3, "jit": [3, 219], "around": [3, 4, 6, 7, 10, 11, 12, 19, 20, 33, 41, 50, 53, 61, 62, 63, 65, 67, 70, 77, 81, 100, 101, 107, 116, 119, 135, 139, 143, 194, 200, 203, 205, 210, 212, 217, 223, 226, 229, 230, 241, 255, 257, 277, 279, 281], "llvm_callabl": 3, "callabl": [3, 12, 29, 43, 52, 97, 103, 160, 205, 210, 211, 222, 239, 242, 243, 248, 249, 250], "unlik": [3, 6, 11, 12, 18, 19, 22, 29, 40, 62, 88, 97, 101, 103, 125, 193, 203, 210, 223, 226, 229, 245, 246, 279, 281, 282, 283, 286], "tensorflow_cod": 3, "order": [3, 4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 22, 24, 29, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 71, 74, 77, 78, 80, 83, 86, 88, 89, 90, 91, 92, 97, 98, 101, 102, 103, 104, 105, 111, 112, 115, 119, 120, 124, 125, 126, 127, 128, 136, 137, 138, 139, 140, 148, 152, 156, 159, 169, 170, 171, 172, 173, 174, 175, 180, 184, 185, 187, 189, 190, 193, 194, 196, 197, 198, 199, 200, 201, 203, 205, 207, 209, 210, 211, 212, 213, 216, 218, 222, 223, 226, 227, 228, 229, 230, 231, 232, 235, 236, 237, 241, 242, 243, 245, 248, 249, 251, 255, 257, 259, 260, 265, 277, 279, 280, 282, 286, 287, 288], "assum": [3, 6, 11, 12, 15, 18, 20, 26, 29, 30, 38, 43, 44, 45, 50, 52, 60, 61, 62, 63, 66, 67, 69, 71, 78, 79, 86, 88, 97, 101, 104, 107, 111, 124, 125, 131, 137, 138, 139, 140, 142, 148, 170, 174, 175, 185, 189, 191, 197, 198, 200, 203, 206, 208, 210, 217, 218, 220, 222, 223, 226, 227, 229, 230, 234, 235, 236, 243, 248, 251, 258, 260, 264, 267, 280, 282, 285, 287, 288], "wurlitz": 3, "allow": [3, 4, 7, 10, 11, 12, 18, 20, 22, 39, 42, 43, 44, 45, 52, 54, 57, 60, 61, 62, 65, 67, 69, 71, 72, 73, 86, 89, 91, 92, 94, 95, 97, 101, 102, 103, 105, 119, 120, 125, 127, 135, 139, 140, 142, 147, 159, 175, 179, 180, 181, 194, 196, 197, 200, 201, 203, 205, 206, 207, 210, 215, 217, 218, 219, 222, 223, 226, 228, 229, 230, 231, 235, 241, 244, 246, 248, 249, 260, 279, 282], "captur": [3, 61, 248], "output": [3, 6, 7, 10, 12, 13, 16, 18, 20, 26, 29, 31, 42, 43, 61, 62, 69, 85, 88, 89, 91, 92, 94, 97, 101, 102, 103, 108, 111, 120, 124, 125, 133, 139, 142, 143, 147, 148, 159, 171, 175, 184, 185, 189, 190, 191, 194, 200, 203, 206, 210, 211, 220, 222, 223, 225, 226, 228, 230, 235, 241, 242, 243, 245, 248, 249, 255, 279, 281, 282, 283, 286, 287, 288], "suit": [3, 4, 7, 18, 20, 26, 27, 42, 196, 206, 239, 241], "stat": [3, 266, 273], "sampl": [3, 8, 16, 52, 64, 109, 159, 196, 210, 230, 277, 281], "At": [3, 10, 18, 20, 26, 41, 57, 67, 69, 88, 101, 104, 105, 115, 180, 184, 194, 205, 220, 249], "least": [3, 4, 7, 10, 14, 18, 29, 39, 41, 43, 52, 61, 67, 73, 85, 86, 88, 97, 101, 102, 120, 155, 169, 177, 197, 198, 200, 201, 203, 205, 206, 217, 219, 222, 226, 228, 229, 230, 243, 287], "random": [3, 6, 10, 45, 50, 52, 53, 59, 62, 71, 74, 75, 96, 97, 101, 159, 171, 196, 203, 210, 240, 241, 244, 248, 279, 283, 287], "pymc": [3, 230], "manipul": [3, 11, 15, 16, 18, 22, 25, 27, 29, 42, 43, 44, 52, 61, 67, 69, 86, 101, 102, 118, 125, 135, 140, 173, 193, 199, 200, 201, 204, 209, 210, 212, 219, 222, 233, 248, 266, 272, 273, 276, 277, 278, 279, 280, 281, 283, 286, 287], "use_symengin": 3, "physic": [3, 6, 16, 43, 54, 97, 101, 104, 105, 107, 108, 109, 110, 111, 113, 114, 116, 117, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 185, 186, 187, 189, 190, 195, 204, 230, 245, 248, 262, 281, 287], "mechan": [3, 20, 61, 84, 88, 104, 116, 117, 119, 120, 121, 122, 124, 125, 127, 128, 129, 130, 132, 133, 134, 157, 161, 164, 170, 172, 173, 174, 177, 184, 185, 192, 195, 272], "liealgebra": [3, 90], "thing": [3, 4, 6, 7, 10, 11, 12, 13, 18, 19, 20, 22, 24, 32, 39, 43, 51, 52, 53, 61, 63, 73, 89, 90, 91, 92, 97, 102, 115, 122, 125, 139, 142, 159, 175, 180, 193, 194, 207, 209, 217, 218, 219, 222, 226, 229, 234, 244, 246, 248, 276, 277, 279, 281, 282, 283, 286, 287], "configur": [3, 4, 5, 10, 53, 91, 111, 119, 120, 128, 129, 132, 134, 135, 137, 139, 210], "otherwis": [3, 4, 14, 18, 19, 20, 41, 42, 43, 52, 53, 57, 60, 61, 62, 65, 67, 69, 70, 71, 74, 75, 76, 77, 86, 88, 90, 91, 93, 97, 100, 101, 103, 109, 111, 113, 116, 124, 125, 160, 165, 171, 189, 192, 193, 197, 201, 203, 205, 206, 208, 210, 212, 213, 215, 216, 218, 222, 223, 226, 227, 228, 229, 230, 231, 239, 241, 243, 248, 249, 276, 277, 286], "ordinari": [3, 18, 19, 23, 41, 43, 52, 61, 65, 66, 67, 69, 79, 83, 84, 88, 98, 111, 135, 197, 199, 200, 209, 216, 226, 231, 245, 281, 287], "x": [3, 4, 6, 7, 10, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 50, 52, 53, 57, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 97, 100, 101, 102, 103, 104, 105, 107, 109, 111, 114, 115, 116, 117, 119, 120, 121, 122, 124, 125, 127, 128, 129, 130, 132, 133, 134, 136, 137, 138, 139, 140, 142, 143, 147, 149, 150, 151, 152, 153, 155, 156, 159, 164, 165, 170, 172, 173, 174, 175, 176, 184, 185, 186, 187, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 222, 223, 225, 226, 227, 228, 229, 230, 231, 234, 235, 236, 237, 241, 242, 243, 244, 246, 248, 249, 251, 255, 258, 259, 260, 261, 262, 264, 265, 276, 277, 279, 281, 282, 283, 286, 287, 288], "still": [3, 4, 6, 7, 10, 11, 12, 18, 20, 33, 34, 42, 53, 60, 61, 62, 69, 73, 88, 92, 97, 125, 175, 194, 196, 197, 198, 203, 205, 210, 217, 219, 220, 222, 226, 228, 229, 235, 241, 248, 262, 283], "matchpi": 3, "pattern": [3, 10, 11, 12, 18, 20, 61, 86, 88, 91, 92, 103, 169, 200, 220, 222, 226, 228, 277, 282], "anywher": [3, 4, 6, 10, 18, 43, 61, 69, 75, 175, 251, 281], "els": [3, 4, 10, 11, 12, 18, 19, 20, 24, 43, 51, 53, 57, 61, 62, 69, 71, 75, 77, 78, 86, 88, 91, 97, 101, 111, 175, 185, 196, 201, 205, 206, 210, 211, 218, 222, 226, 228, 229, 234, 236, 241, 248, 251, 255, 258, 276, 282], "mathemat": [3, 4, 7, 8, 10, 11, 15, 18, 20, 24, 26, 28, 29, 31, 32, 37, 38, 41, 43, 44, 47, 51, 53, 60, 61, 62, 63, 66, 67, 68, 69, 74, 75, 86, 88, 91, 94, 97, 101, 102, 103, 111, 112, 115, 129, 141, 180, 191, 193, 194, 197, 198, 200, 201, 204, 209, 210, 218, 219, 223, 225, 226, 229, 230, 235, 242, 243, 249, 255, 259, 262, 264, 276, 279, 280, 281, 282, 285, 287], "softwar": [3, 7, 88, 204, 281], "itself": [3, 4, 6, 7, 10, 11, 20, 39, 50, 52, 53, 59, 61, 63, 66, 67, 74, 78, 83, 101, 120, 124, 125, 140, 165, 172, 191, 193, 196, 197, 200, 203, 205, 206, 210, 218, 219, 222, 229, 234, 235, 236, 243, 245, 248, 264, 281], "_sage_": 3, "basic": [3, 4, 5, 6, 7, 10, 11, 18, 20, 31, 35, 37, 42, 43, 44, 49, 52, 56, 59, 60, 64, 67, 77, 79, 84, 85, 86, 91, 92, 95, 98, 111, 119, 125, 137, 138, 140, 142, 143, 149, 159, 173, 180, 183, 188, 191, 192, 194, 196, 197, 199, 201, 202, 203, 205, 207, 208, 210, 211, 217, 222, 223, 226, 227, 228, 229, 230, 241, 243, 248, 249, 253, 261, 262, 263, 270, 272, 273, 277, 278, 279, 280, 285], "beyond": [3, 18, 24, 55, 77, 101, 139, 197, 200, 219, 222, 283], "control": [3, 5, 10, 12, 14, 18, 20, 42, 44, 61, 62, 65, 86, 91, 92, 139, 142, 155, 159, 170, 171, 175, 179, 206, 207, 211, 218, 223, 229, 248, 272, 276], "pytest": [3, 4, 10, 238, 244, 246, 249, 274], "entir": [3, 4, 18, 52, 61, 62, 65, 66, 69, 75, 77, 86, 100, 117, 136, 140, 185, 197, 199, 205, 218, 235, 244, 246, 281, 287], "import_modul": 3, "own": [3, 5, 6, 12, 20, 37, 45, 52, 53, 61, 77, 105, 119, 125, 142, 205, 210, 217, 222, 226, 245, 248, 249, 281], "runner": [3, 241], "access": [3, 6, 7, 11, 12, 18, 20, 36, 37, 38, 43, 61, 69, 90, 91, 94, 97, 102, 105, 111, 112, 119, 120, 124, 125, 143, 184, 185, 191, 194, 196, 200, 201, 203, 205, 222, 226, 230, 231, 234, 242, 243, 259, 262, 282, 286], "script": [3, 5, 6, 11, 34, 69, 190, 242], "cloudpickl": 3, "effect": [3, 6, 10, 20, 28, 33, 52, 54, 61, 78, 86, 88, 92, 97, 104, 125, 127, 139, 147, 175, 185, 196, 200, 203, 207, 209, 226, 279], "pickl": 3, "util": [3, 4, 5, 6, 7, 24, 26, 41, 48, 50, 52, 53, 66, 67, 72, 73, 74, 77, 91, 92, 101, 102, 145, 179, 182, 199, 203, 207, 210, 222, 223, 239, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 267, 272, 273], "test_pickl": 3, "py": [3, 4, 5, 6, 12, 18, 33, 42, 61, 72, 86, 88, 97, 153, 155, 196, 199, 201, 207, 210, 217, 220, 226, 227, 236, 239, 241, 246, 249], "pdf": [3, 7, 8, 29, 32, 41, 42, 52, 62, 64, 66, 83, 88, 97, 101, 104, 105, 109, 196, 204, 209, 210, 213, 219, 222, 223, 226, 230, 248, 255], "view": [3, 6, 8, 11, 31, 43, 44, 61, 97, 104, 177, 180, 194, 196, 203, 210, 226, 229, 243, 245, 248], "host": [3, 7], "onlin": [3, 6, 120, 223, 248], "sympy_benchmark": 3, "readm": 3, "yourself": [3, 20, 31, 43, 127, 244, 277], "reproduc": [3, 22, 206, 241, 287], "add": [3, 4, 5, 6, 10, 11, 12, 15, 18, 29, 35, 37, 41, 43, 50, 52, 57, 62, 65, 68, 76, 78, 86, 90, 94, 97, 101, 104, 107, 116, 125, 142, 153, 159, 169, 174, 175, 178, 193, 194, 196, 199, 200, 201, 203, 205, 206, 207, 210, 211, 220, 222, 223, 226, 227, 229, 230, 232, 234, 235, 236, 244, 249, 253, 277, 279, 282, 286, 287], "asv": 3, "airspe": 3, "veloc": [3, 115, 116, 119, 120, 122, 127, 128, 129, 132, 133, 134, 136, 139, 140, 142, 149, 177, 180, 184, 185, 189, 191, 194, 262, 264], "describ": [4, 6, 7, 10, 12, 18, 19, 20, 22, 29, 42, 44, 51, 52, 53, 55, 56, 59, 60, 61, 62, 66, 69, 71, 76, 77, 86, 88, 92, 97, 100, 101, 111, 115, 119, 120, 122, 124, 125, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 154, 175, 179, 180, 184, 185, 191, 193, 194, 197, 200, 203, 205, 211, 217, 220, 222, 223, 226, 229, 230, 234, 243, 248, 249, 255, 257, 262, 277], "properli": [4, 11, 20, 42, 61, 67, 73, 86, 97, 121, 125, 137, 152, 156, 159, 173, 198, 200, 210, 226, 229, 239, 243, 249, 283, 288], "current": [4, 7, 10, 12, 18, 24, 25, 35, 38, 41, 42, 43, 44, 45, 52, 55, 56, 58, 59, 60, 61, 63, 67, 69, 71, 73, 76, 81, 84, 86, 88, 90, 92, 97, 101, 103, 104, 108, 115, 119, 125, 135, 169, 174, 175, 179, 183, 194, 196, 197, 198, 199, 201, 203, 206, 207, 209, 210, 211, 217, 220, 222, 223, 225, 226, 227, 228, 229, 230, 236, 241, 242, 243, 245, 259, 273, 283, 288], "updat": [4, 10, 12, 29, 33, 61, 129, 155, 165, 168, 169, 171, 195, 203, 206, 210, 223, 236, 246], "continu": [4, 6, 7, 10, 16, 19, 20, 41, 43, 51, 53, 55, 61, 66, 67, 69, 86, 89, 92, 101, 108, 109, 170, 173, 190, 201, 203, 206, 223, 225, 226, 234, 278], "someon": [4, 226, 245, 280], "warn": [4, 6, 12, 20, 61, 62, 76, 103, 185, 194, 198, 210, 226, 228, 239, 241, 243, 247, 248, 274, 283], "screen": [4, 11, 89, 190, 194, 241, 286], "indic": [4, 6, 12, 15, 18, 26, 29, 30, 41, 42, 43, 44, 45, 50, 52, 53, 54, 56, 57, 59, 60, 61, 64, 65, 66, 69, 71, 76, 77, 86, 88, 91, 92, 94, 97, 100, 101, 112, 124, 129, 159, 170, 172, 173, 175, 180, 184, 185, 195, 199, 200, 201, 205, 206, 207, 210, 217, 218, 219, 222, 223, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 241, 242, 243, 248, 283], "remov": [4, 10, 18, 24, 36, 37, 52, 55, 59, 61, 65, 67, 76, 77, 86, 91, 92, 97, 101, 104, 107, 116, 119, 132, 134, 139, 159, 175, 201, 203, 206, 208, 209, 210, 222, 223, 226, 228, 229, 231, 232, 242, 243, 244, 246, 248, 249, 276, 287], "futur": [4, 12, 18, 19, 43, 44, 61, 86, 88, 92, 97, 103, 119, 124, 127, 135, 139, 175, 179, 192, 196, 198, 209, 210, 222, 226, 235, 241, 244, 246, 249, 272, 282, 288], "chanc": [4, 12, 19, 61, 89, 220, 230, 282], "break": [4, 6, 10, 20, 42, 43, 53, 61, 62, 101, 193, 207, 210, 218, 248], "opportun": [4, 6, 222], "messag": [4, 10, 62, 89, 244, 246], "wrong": [4, 7, 10, 52, 61, 62, 69, 71, 97, 185, 200, 226, 244, 279, 283], "answer": [4, 18, 20, 22, 52, 61, 65, 83, 86, 88, 91, 97, 101, 180, 203, 207, 219, 220, 222, 228, 230, 245, 251, 281, 283, 287], "made": [4, 7, 10, 11, 12, 18, 20, 30, 55, 57, 61, 62, 67, 70, 71, 74, 77, 78, 88, 91, 97, 101, 103, 125, 136, 139, 142, 194, 197, 201, 203, 205, 206, 210, 211, 217, 218, 219, 222, 226, 228, 229, 230, 243, 248, 251, 264, 282], "lightli": 4, "fix": [4, 6, 9, 10, 43, 52, 54, 57, 59, 62, 66, 69, 73, 90, 104, 105, 107, 116, 119, 122, 127, 136, 142, 159, 164, 168, 171, 175, 180, 185, 189, 193, 194, 196, 200, 203, 205, 206, 207, 210, 216, 220, 228, 230, 248, 255, 257], "worth": [4, 18, 20, 185, 260, 262], "pain": 4, "frustrat": 4, "go": [4, 5, 6, 7, 20, 33, 42, 43, 52, 62, 66, 67, 86, 120, 125, 127, 140, 142, 143, 169, 180, 189, 196, 205, 206, 217, 220, 226, 279, 281, 282, 285, 287], "seek": [4, 228], "stabl": [4, 6, 20, 61, 89, 97, 103, 107, 111, 276], "done": [4, 6, 10, 11, 12, 16, 20, 37, 38, 40, 41, 42, 43, 52, 54, 59, 61, 62, 63, 66, 69, 72, 73, 86, 88, 92, 97, 101, 119, 125, 127, 133, 140, 142, 161, 170, 171, 172, 175, 177, 178, 185, 191, 193, 194, 196, 197, 199, 203, 206, 207, 209, 210, 211, 219, 222, 223, 226, 228, 229, 230, 235, 236, 241, 242, 245, 249, 259, 260, 276, 279, 281, 282, 283], "exist": [4, 10, 11, 16, 18, 20, 28, 31, 41, 42, 45, 52, 61, 65, 71, 73, 76, 77, 78, 79, 88, 91, 97, 101, 107, 165, 191, 194, 196, 197, 198, 199, 203, 205, 210, 217, 218, 220, 223, 226, 228, 229, 241, 249, 260, 281, 283, 288], "necessarili": [4, 6, 18, 39, 61, 62, 63, 86, 88, 91, 120, 197, 198, 205, 206, 208, 222, 226, 228, 229], "supplant": 4, "old": [4, 10, 11, 12, 61, 62, 63, 89, 139, 144, 179, 180, 190, 196, 197, 201, 210, 211, 222, 226, 229, 231, 276], "sometim": [4, 6, 7, 11, 12, 18, 20, 22, 29, 42, 43, 61, 66, 69, 85, 86, 111, 135, 139, 167, 175, 194, 197, 200, 205, 210, 212, 217, 219, 223, 226, 228, 239, 248, 276, 283], "alongsid": [4, 10, 20, 94], "newer": [4, 11, 193, 228], "solveset": [4, 20, 28, 31, 142, 208, 224, 225, 228, 267, 288], "superior": [4, 210], "replac": [4, 6, 10, 11, 12, 18, 41, 43, 52, 60, 61, 62, 65, 66, 67, 69, 71, 75, 88, 91, 92, 97, 101, 102, 103, 115, 117, 119, 142, 164, 170, 185, 197, 203, 206, 207, 211, 217, 219, 220, 222, 226, 228, 229, 236, 237, 248, 249, 251, 276, 285], "older": [4, 7, 11, 84, 125, 200, 210, 228], "solv": [4, 6, 10, 11, 12, 13, 16, 18, 20, 21, 43, 45, 57, 60, 61, 69, 74, 86, 88, 92, 93, 97, 104, 106, 107, 119, 120, 121, 125, 128, 129, 132, 134, 135, 137, 139, 142, 178, 199, 203, 207, 208, 209, 210, 212, 222, 223, 225, 226, 227, 230, 272, 277, 278, 281, 283, 286], "remain": [4, 10, 11, 20, 37, 38, 43, 52, 53, 55, 57, 61, 62, 67, 86, 92, 101, 103, 112, 125, 174, 191, 193, 194, 205, 206, 207, 216, 219, 220, 226, 227, 228, 230, 232, 236, 245, 248, 249, 259, 264, 276, 279, 281, 282, 283], "intact": [4, 10, 43, 242], "cogniz": 4, "properti": [4, 11, 15, 20, 22, 27, 29, 37, 38, 41, 42, 43, 44, 45, 49, 50, 52, 53, 54, 55, 56, 60, 61, 62, 63, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 84, 86, 88, 92, 94, 97, 101, 104, 105, 107, 108, 111, 116, 119, 120, 122, 124, 140, 142, 144, 146, 149, 150, 153, 154, 159, 160, 161, 163, 164, 171, 173, 175, 177, 180, 182, 183, 185, 186, 187, 191, 194, 195, 196, 198, 199, 200, 201, 203, 205, 206, 209, 212, 213, 216, 217, 218, 220, 223, 226, 229, 230, 235, 236, 241, 243, 244, 255, 258, 259, 260, 262, 264, 283], "attr": [4, 43], "imposs": [4, 6, 10, 11, 20, 29, 61, 200, 219, 226, 227, 239, 279, 287], "later": [4, 10, 16, 43, 52, 86, 91, 92, 115, 121, 122, 127, 129, 130, 137, 139, 140, 142, 149, 184, 193, 200, 203, 209, 210, 211, 220, 222, 226, 245, 259, 276, 277, 279, 281, 282, 287], "unsur": [4, 6], "about": [4, 5, 6, 7, 10, 11, 12, 13, 16, 18, 19, 20, 22, 27, 29, 31, 32, 33, 35, 36, 38, 39, 42, 43, 52, 53, 54, 55, 61, 65, 67, 69, 71, 72, 73, 75, 76, 77, 81, 83, 87, 88, 90, 97, 101, 104, 105, 111, 115, 116, 117, 119, 120, 121, 122, 124, 125, 129, 139, 140, 170, 172, 173, 175, 179, 184, 185, 193, 194, 195, 197, 199, 200, 205, 207, 210, 212, 217, 222, 223, 224, 226, 230, 234, 235, 241, 242, 243, 244, 245, 246, 255, 257, 259, 262, 263, 270, 273, 276, 278, 279, 281, 282, 283, 287], "mark": [4, 6, 7, 109, 148, 160, 223, 239, 244, 246], "explicitli": [4, 10, 11, 18, 20, 43, 52, 53, 61, 62, 64, 67, 69, 74, 78, 94, 97, 102, 111, 125, 184, 185, 196, 198, 200, 201, 203, 206, 210, 222, 226, 228, 246, 279, 283, 286, 288], "privat": [4, 6, 61, 62, 125, 196, 243], "experiment": [4, 222], "With": [4, 12, 19, 33, 43, 60, 61, 65, 86, 101, 128, 129, 130, 136, 138, 139, 148, 172, 175, 194, 196, 197, 198, 200, 201, 208, 209, 210, 217, 222, 231, 248, 281, 282], "being": [4, 7, 10, 11, 12, 14, 18, 19, 39, 41, 43, 52, 53, 59, 60, 61, 62, 66, 67, 69, 71, 73, 74, 77, 78, 86, 91, 92, 97, 98, 101, 104, 105, 107, 115, 124, 125, 127, 139, 140, 142, 143, 171, 180, 187, 191, 193, 194, 195, 196, 197, 199, 200, 205, 206, 207, 209, 210, 219, 220, 222, 223, 226, 227, 228, 229, 230, 236, 239, 241, 245, 246, 248, 249, 251, 255, 260, 264, 281, 283], "decid": [4, 6, 16, 18, 19, 20, 22, 42, 60, 92, 115, 139, 168, 179, 200, 203, 205, 206, 210, 226, 229, 243, 283], "reason": [4, 7, 10, 11, 14, 18, 19, 20, 28, 29, 43, 53, 59, 61, 65, 69, 86, 89, 95, 97, 120, 121, 125, 127, 132, 135, 139, 146, 180, 190, 194, 200, 203, 204, 207, 210, 218, 220, 222, 226, 229, 239, 245, 246, 248, 249, 276, 277, 281, 282, 283], "confus": [4, 7, 10, 11, 18, 25, 61, 66, 91, 148, 194, 198, 206, 229, 276, 277, 279], "unnecessari": [4, 6, 7, 39, 43, 206, 209, 230, 241, 280], "redund": [4, 18, 52, 59, 91, 97, 226, 243], "usabl": [4, 29, 200, 201, 210, 229, 281], "breakag": 4, "serious": 4, "taken": [4, 11, 43, 44, 49, 52, 59, 60, 61, 66, 67, 69, 78, 92, 101, 111, 113, 115, 116, 139, 142, 172, 178, 185, 189, 195, 196, 200, 205, 206, 210, 213, 217, 219, 220, 229, 230, 235, 243, 248, 255], "commun": [4, 7, 33, 195, 226, 228, 230, 283], "inde": [4, 16, 20, 49, 52, 60, 86, 197, 220, 226, 237, 241, 281], "second": [4, 7, 10, 11, 12, 16, 18, 19, 20, 22, 24, 26, 27, 29, 31, 34, 38, 41, 43, 52, 53, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 69, 71, 74, 75, 77, 88, 97, 101, 102, 104, 105, 109, 111, 112, 115, 116, 119, 120, 125, 129, 132, 134, 135, 136, 138, 140, 146, 148, 149, 152, 156, 161, 164, 169, 170, 172, 173, 178, 180, 182, 184, 185, 186, 193, 194, 196, 199, 200, 203, 204, 205, 206, 210, 212, 220, 222, 223, 226, 228, 229, 230, 231, 232, 248, 249, 255, 258, 259, 260, 272, 276, 281, 282, 283], "know": [4, 6, 7, 10, 11, 12, 18, 19, 20, 22, 29, 30, 31, 36, 38, 42, 53, 61, 62, 65, 73, 78, 86, 88, 97, 101, 122, 125, 143, 169, 173, 177, 178, 180, 184, 185, 193, 194, 196, 206, 207, 209, 210, 220, 222, 226, 228, 229, 230, 244, 248, 249, 260, 276, 277, 279, 280, 281, 282, 285, 287], "count": [4, 7, 11, 53, 60, 61, 62, 66, 71, 91, 97, 100, 101, 170, 206, 218, 219, 222, 229, 230, 236, 245, 248], "basi": [4, 61, 63, 90, 94, 97, 116, 132, 134, 160, 169, 170, 172, 175, 177, 180, 183, 184, 185, 191, 193, 195, 197, 199, 201, 206, 209, 220, 222, 228, 229, 231, 236, 258, 259, 262, 285], "exact": [4, 10, 11, 12, 18, 20, 28, 39, 60, 61, 62, 65, 71, 76, 83, 86, 88, 92, 97, 104, 142, 169, 200, 201, 203, 206, 217, 222, 226, 228, 241, 251, 279, 281, 286], "rule": [4, 7, 10, 16, 18, 20, 43, 52, 53, 60, 61, 69, 84, 86, 88, 91, 92, 97, 104, 125, 156, 159, 180, 185, 191, 194, 195, 207, 209, 210, 211, 216, 220, 222, 226, 236, 248, 249, 262, 279, 282], "doesn": [4, 6, 10, 12, 20, 22, 43, 85, 125, 129, 139, 142, 194, 198, 207, 209, 219, 222, 229, 288], "constitut": [4, 7, 11, 88, 101, 210], "yet": [4, 5, 12, 18, 20, 36, 38, 41, 42, 65, 88, 139, 155, 197, 200, 201, 205, 207, 209, 218, 226, 229, 277], "fulli": [4, 6, 10, 18, 52, 61, 78, 88, 91, 103, 104, 105, 119, 125, 142, 175, 193, 200, 201, 207, 217, 230, 236, 252], "codifi": 4, "clean": [4, 241], "distinct": [4, 7, 11, 14, 18, 20, 30, 43, 52, 53, 61, 62, 66, 74, 86, 91, 97, 101, 124, 193, 200, 205, 206, 210, 218, 220, 287], "well": [4, 6, 7, 10, 11, 12, 14, 16, 18, 20, 33, 39, 41, 42, 43, 44, 45, 53, 60, 61, 66, 67, 69, 88, 92, 95, 97, 107, 112, 115, 119, 125, 127, 129, 130, 139, 165, 174, 177, 178, 184, 193, 195, 196, 197, 199, 200, 201, 203, 205, 210, 217, 218, 219, 220, 222, 226, 228, 229, 241, 242, 259, 260, 264, 279, 281, 282, 287], "categor": [4, 22, 97, 197], "issu": [4, 7, 9, 10, 11, 12, 19, 20, 22, 24, 25, 26, 27, 28, 29, 30, 33, 34, 41, 60, 61, 78, 88, 91, 97, 102, 121, 135, 155, 192, 195, 204, 205, 207, 210, 218, 219, 228, 229, 241, 243, 245, 246, 248, 251, 272, 278, 279, 282, 287], "here": [4, 6, 7, 10, 11, 14, 16, 18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 32, 33, 37, 38, 43, 44, 45, 50, 51, 52, 53, 59, 60, 61, 62, 63, 65, 66, 67, 69, 77, 78, 79, 83, 84, 86, 88, 91, 92, 97, 100, 101, 102, 103, 104, 107, 111, 115, 120, 125, 126, 127, 132, 133, 134, 137, 139, 140, 142, 143, 165, 170, 175, 184, 190, 191, 193, 194, 196, 197, 200, 201, 203, 205, 206, 207, 210, 211, 217, 219, 220, 222, 223, 226, 228, 229, 230, 234, 235, 242, 243, 245, 246, 248, 249, 260, 262, 264, 275, 276, 277, 279, 281, 282, 283, 285, 286, 287], "guidelin": [4, 8, 31, 226], "exhaust": [4, 18, 220, 248, 280], "alwai": [4, 6, 7, 10, 11, 12, 18, 19, 20, 27, 33, 35, 42, 52, 53, 60, 61, 62, 63, 65, 67, 69, 71, 73, 76, 77, 85, 86, 88, 91, 92, 97, 100, 101, 107, 111, 112, 124, 125, 127, 129, 133, 143, 175, 177, 180, 181, 191, 193, 197, 198, 200, 201, 203, 205, 206, 210, 211, 212, 218, 219, 220, 222, 223, 226, 227, 228, 229, 230, 237, 241, 243, 248, 249, 255, 257, 262, 277, 279, 280, 281, 282, 287], "posit": [4, 10, 11, 12, 18, 19, 20, 22, 26, 36, 37, 38, 39, 40, 42, 43, 44, 45, 50, 52, 53, 54, 56, 57, 60, 61, 62, 63, 65, 66, 67, 69, 71, 73, 74, 77, 86, 88, 90, 91, 92, 93, 97, 98, 100, 101, 104, 105, 107, 111, 113, 119, 122, 125, 127, 129, 132, 134, 136, 139, 140, 142, 144, 147, 149, 153, 170, 173, 175, 186, 187, 189, 191, 193, 194, 197, 198, 199, 200, 201, 203, 205, 206, 207, 209, 210, 215, 216, 218, 219, 220, 222, 223, 226, 228, 229, 230, 231, 236, 248, 255, 258, 259, 260, 262, 264, 265, 283, 287, 288], "convent": [4, 6, 7, 9, 20, 29, 52, 53, 57, 60, 61, 62, 66, 67, 69, 71, 76, 86, 88, 91, 103, 104, 105, 107, 111, 114, 127, 142, 144, 148, 169, 170, 172, 177, 178, 191, 196, 210, 226, 227, 229, 230, 236, 264, 279, 287], "defin": [4, 6, 7, 10, 11, 12, 14, 16, 18, 19, 31, 34, 35, 37, 38, 41, 43, 44, 45, 51, 52, 53, 56, 59, 60, 61, 62, 63, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 79, 84, 86, 88, 89, 92, 94, 97, 101, 104, 105, 109, 115, 116, 119, 122, 124, 125, 127, 128, 132, 134, 135, 136, 140, 142, 143, 146, 152, 154, 156, 161, 164, 170, 172, 173, 177, 178, 179, 180, 181, 182, 183, 184, 185, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 205, 206, 207, 209, 210, 212, 213, 216, 217, 218, 220, 222, 223, 226, 228, 229, 230, 231, 235, 236, 242, 243, 244, 249, 250, 251, 255, 257, 258, 259, 260, 261, 262, 264, 265, 279, 281, 287], "And": [4, 10, 12, 19, 20, 24, 37, 52, 53, 60, 61, 62, 69, 86, 91, 92, 97, 100, 119, 147, 194, 196, 198, 206, 207, 210, 218, 222, 223, 228, 229, 230, 248, 249, 260, 287], "aren": [4, 10, 11, 20, 43, 61, 125, 209, 229], "don": [4, 10, 12, 19, 20, 38, 43, 86, 91, 97, 102, 103, 115, 125, 184, 193, 194, 200, 210, 220, 229, 239, 244, 264, 276, 277, 281, 282, 287], "form": [4, 7, 10, 11, 16, 18, 20, 27, 28, 35, 38, 39, 40, 41, 43, 44, 51, 52, 53, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 74, 77, 81, 83, 84, 86, 88, 90, 92, 94, 96, 97, 101, 103, 104, 105, 107, 108, 111, 115, 116, 119, 120, 121, 124, 125, 127, 129, 132, 134, 135, 136, 137, 138, 140, 142, 143, 152, 155, 156, 157, 159, 169, 170, 173, 175, 177, 180, 183, 184, 185, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 216, 218, 219, 220, 222, 223, 226, 227, 228, 229, 230, 235, 236, 241, 242, 248, 255, 258, 259, 261, 262, 264, 270, 277, 281, 282, 283, 286, 287, 288], "equival": [4, 10, 11, 12, 14, 18, 19, 20, 27, 29, 35, 39, 43, 44, 51, 52, 57, 61, 62, 65, 67, 69, 86, 88, 97, 101, 103, 108, 109, 111, 119, 125, 158, 169, 172, 175, 178, 185, 190, 194, 196, 197, 198, 200, 201, 205, 206, 210, 217, 218, 222, 223, 226, 228, 229, 231, 232, 235, 236, 245, 249, 251, 252], "intern": [4, 10, 11, 12, 18, 19, 24, 41, 43, 44, 52, 61, 64, 65, 66, 69, 77, 78, 81, 93, 97, 101, 105, 107, 109, 127, 139, 148, 169, 170, 180, 197, 199, 201, 202, 204, 206, 208, 210, 220, 222, 225, 226, 227, 228, 229, 230, 234, 236, 239, 243, 245, 248, 273, 282, 286], "Such": [4, 6, 18, 43, 61, 77, 129, 197, 198, 205, 211, 219, 220, 222, 276, 282], "prefix": [4, 43, 61, 97, 101, 179, 182, 183, 200, 203, 207, 210, 223, 226, 242, 243, 248, 272], "underscor": [4, 6, 10, 61, 97, 226, 236, 244], "_": [4, 6, 7, 10, 12, 14, 16, 20, 37, 38, 42, 49, 50, 52, 53, 54, 57, 60, 61, 62, 63, 64, 65, 66, 67, 69, 72, 74, 75, 76, 77, 86, 88, 91, 92, 93, 94, 95, 97, 99, 101, 103, 111, 137, 140, 142, 154, 175, 180, 184, 190, 193, 195, 201, 206, 209, 210, 211, 213, 217, 218, 219, 220, 222, 223, 226, 227, 228, 231, 248, 258, 260, 286], "univers": [4, 11, 43, 195, 204, 218, 223, 228, 229], "adher": [4, 7, 86], "codebas": [4, 10, 18, 200, 239], "anyth": [4, 6, 7, 10, 12, 20, 41, 43, 61, 62, 72, 76, 97, 125, 149, 159, 207, 210, 216, 218, 222, 226, 228, 242, 248, 251, 279], "were": [4, 7, 10, 11, 12, 14, 18, 20, 42, 53, 55, 61, 62, 67, 78, 86, 92, 97, 101, 102, 103, 115, 124, 139, 184, 191, 194, 197, 203, 204, 205, 206, 209, 210, 211, 219, 222, 228, 248, 249, 251, 279, 281, 282, 286, 287], "incorrect": [4, 7, 10, 19, 20, 28, 52, 61, 71, 101, 109, 189, 201, 226, 229, 242, 245, 246], "bug": [4, 6, 18, 20, 33, 41, 62, 200, 218, 226, 229, 279], "despit": [4, 22, 31, 61, 287], "sai": [4, 7, 11, 12, 16, 18, 44, 51, 60, 61, 62, 90, 115, 120, 125, 135, 142, 180, 193, 194, 197, 198, 199, 203, 205, 209, 210, 217, 220, 223, 226, 228, 229, 230, 249, 276, 281, 287], "befor": [4, 6, 10, 11, 12, 18, 19, 20, 29, 31, 33, 43, 52, 53, 55, 57, 61, 62, 63, 69, 89, 92, 97, 101, 103, 104, 105, 115, 121, 125, 127, 128, 129, 132, 133, 139, 142, 144, 175, 184, 190, 194, 198, 200, 205, 206, 210, 211, 217, 218, 222, 223, 226, 228, 229, 230, 237, 241, 244, 248, 249, 259, 280, 281, 282, 287], "recent": [4, 10, 12, 15, 18, 19, 20, 22, 24, 26, 27, 28, 29, 30, 31, 36, 37, 38, 43, 44, 53, 61, 62, 65, 69, 71, 88, 91, 92, 93, 94, 95, 97, 99, 100, 103, 111, 195, 197, 200, 201, 203, 206, 209, 217, 218, 226, 228, 229, 239, 242, 244, 246, 248, 249, 251, 279, 283], "best": [4, 8, 12, 22, 26, 28, 29, 32, 33, 43, 61, 69, 86, 88, 102, 174, 196, 207, 210, 219, 220, 222, 226, 229, 234, 242, 275, 279, 280, 286, 287], "determin": [4, 7, 10, 11, 12, 14, 16, 18, 19, 20, 22, 25, 26, 27, 30, 36, 38, 39, 40, 41, 43, 44, 45, 52, 61, 62, 63, 64, 65, 67, 71, 72, 74, 76, 77, 88, 89, 90, 94, 97, 101, 103, 104, 105, 111, 117, 119, 121, 122, 124, 134, 140, 143, 154, 167, 169, 171, 172, 175, 178, 180, 185, 191, 196, 197, 198, 199, 203, 205, 210, 216, 217, 218, 220, 222, 223, 225, 226, 228, 229, 230, 234, 246, 248, 255, 262, 265, 279, 287], "someth": [4, 6, 7, 10, 11, 12, 18, 19, 20, 31, 41, 43, 61, 62, 65, 71, 86, 91, 92, 97, 101, 115, 125, 126, 142, 168, 181, 184, 196, 200, 201, 209, 217, 218, 222, 226, 229, 241, 243, 249, 276, 279, 281, 282, 285], "re": [4, 12, 20, 40, 41, 43, 52, 53, 61, 62, 65, 67, 69, 86, 88, 97, 185, 187, 191, 197, 203, 210, 211, 212, 218, 219, 220, 226, 228, 241, 258, 260, 277, 279, 282], "harm": 4, "even": [4, 6, 7, 11, 12, 15, 18, 20, 22, 25, 28, 29, 30, 31, 36, 37, 38, 39, 40, 43, 44, 49, 52, 53, 60, 61, 62, 65, 66, 67, 69, 73, 77, 86, 88, 91, 92, 97, 100, 101, 112, 125, 135, 160, 171, 178, 180, 185, 195, 198, 199, 200, 201, 203, 205, 206, 207, 210, 211, 218, 219, 220, 222, 223, 226, 228, 229, 237, 241, 264, 276, 277, 279, 281, 282, 287, 288], "might": [4, 6, 10, 11, 12, 14, 18, 19, 20, 24, 28, 41, 61, 65, 67, 74, 83, 86, 94, 97, 101, 103, 115, 125, 126, 142, 155, 185, 193, 196, 200, 201, 206, 207, 210, 211, 218, 219, 220, 222, 223, 228, 229, 230, 242, 243, 246, 248, 251, 276, 279, 281, 282, 284, 287], "while": [4, 6, 10, 11, 12, 18, 20, 23, 24, 29, 31, 42, 43, 44, 52, 53, 54, 57, 60, 61, 62, 63, 65, 66, 67, 71, 75, 77, 85, 91, 92, 97, 101, 102, 103, 104, 107, 116, 119, 121, 125, 129, 139, 159, 180, 185, 191, 197, 205, 208, 210, 226, 229, 241, 243, 245, 248, 264, 276, 282, 283], "peopl": [4, 6, 64, 69, 88, 97, 180, 230], "upgrad": [4, 34], "immedi": [4, 18, 27, 52, 61, 86, 91, 175, 197, 200, 242, 249], "fire": 4, "uncondition": 4, "correct": [4, 6, 7, 10, 12, 19, 20, 25, 27, 29, 43, 50, 52, 58, 60, 61, 65, 67, 85, 86, 88, 97, 101, 111, 125, 139, 193, 194, 203, 206, 217, 223, 226, 228, 229, 234, 242, 248, 279, 286], "question": [4, 6, 7, 16, 18, 60, 63, 71, 78, 86, 88, 91, 101, 115, 177, 180, 184, 197, 200, 205, 220, 229, 248, 251], "read": [4, 6, 7, 9, 10, 20, 31, 53, 67, 86, 101, 105, 142, 193, 194, 199, 200, 201, 207, 210, 223, 236, 237, 245, 252, 280, 286, 287], "previou": [4, 6, 10, 20, 45, 50, 51, 52, 53, 56, 61, 66, 67, 88, 91, 92, 100, 116, 139, 177, 193, 194, 203, 216, 223, 227, 231, 248, 280, 282, 287], "unchang": [4, 10, 11, 20, 52, 53, 61, 88, 97, 111, 206, 210, 216, 219, 222, 229, 276], "dure": [4, 10, 12, 34, 43, 61, 62, 92, 97, 101, 103, 116, 120, 142, 143, 193, 205, 210, 219, 228, 229, 246, 248], "period": [4, 6, 10, 26, 41, 61, 62, 67, 86, 101, 139, 149, 171, 178, 205, 210, 213, 216, 225, 229, 230, 248], "silenc": [4, 239, 246], "filterwarn": [4, 10], "caus": [4, 7, 10, 11, 20, 29, 33, 61, 62, 65, 67, 97, 125, 133, 139, 193, 210, 219, 226, 227, 228, 245, 246, 283], "anoth": [4, 6, 7, 10, 11, 12, 15, 16, 18, 19, 20, 22, 24, 26, 27, 28, 29, 30, 39, 42, 43, 53, 58, 60, 61, 62, 63, 67, 69, 71, 72, 73, 74, 75, 76, 77, 78, 86, 88, 94, 97, 101, 104, 105, 116, 122, 136, 164, 180, 182, 185, 189, 193, 194, 196, 198, 200, 201, 203, 205, 206, 207, 210, 211, 217, 218, 220, 226, 228, 229, 230, 242, 243, 249, 255, 259, 260, 264, 276, 279, 281, 282, 287, 288], "over": [4, 7, 8, 10, 12, 15, 20, 22, 25, 32, 35, 41, 42, 43, 44, 52, 53, 56, 60, 61, 62, 63, 64, 65, 66, 75, 77, 84, 86, 90, 91, 94, 97, 98, 101, 104, 105, 113, 119, 125, 142, 143, 154, 170, 173, 175, 179, 180, 191, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 210, 213, 215, 217, 222, 223, 225, 226, 228, 229, 230, 231, 234, 235, 244, 248, 249, 255, 258, 262, 265, 281, 285, 287], "defeat": [4, 226], "three": [4, 11, 12, 14, 16, 18, 20, 29, 30, 35, 39, 43, 52, 53, 54, 57, 61, 62, 66, 69, 71, 75, 76, 77, 86, 90, 91, 92, 104, 105, 119, 124, 128, 131, 132, 133, 148, 170, 172, 177, 185, 189, 193, 194, 195, 196, 197, 198, 201, 203, 206, 210, 220, 222, 223, 228, 229, 230, 241, 255, 257, 262, 265, 279, 282, 287], "natur": [4, 10, 12, 18, 27, 35, 39, 43, 44, 52, 61, 62, 66, 67, 95, 101, 125, 177, 179, 180, 197, 200, 201, 203, 205, 207, 210, 218, 219, 223, 229, 230, 248, 265, 282, 287], "heavili": [4, 217, 227], "consider": [4, 19, 61, 102, 115, 200, 209, 218, 223, 226, 259], "easi": [4, 11, 49, 53, 61, 69, 86, 102, 122, 129, 135, 193, 197, 200, 205, 210, 217, 220, 223, 226, 229, 234, 235, 236, 276, 277, 279, 280, 281, 282, 283, 286], "account": [4, 11, 67, 97, 213, 222, 226], "nonetheless": [4, 62, 177, 222, 226], "deprecat": 4, "won": [4, 12, 20, 43, 222, 229, 282], "until": [4, 16, 18, 22, 24, 25, 26, 27, 28, 29, 30, 34, 53, 55, 61, 62, 71, 88, 97, 101, 139, 194, 203, 206, 219, 226, 279], "come": [4, 27, 33, 52, 57, 59, 60, 61, 67, 69, 86, 88, 97, 102, 115, 125, 127, 137, 178, 194, 197, 200, 203, 205, 206, 220, 223, 226, 229, 239, 241, 246, 249, 279, 281, 282, 285, 287], "minimum": [4, 10, 26, 41, 43, 52, 53, 55, 57, 61, 62, 65, 67, 97, 115, 120, 127, 159, 184, 196, 198, 203, 229, 230, 244, 277], "longer": [4, 6, 12, 17, 61, 71, 101, 129, 139, 198, 203, 210, 219, 222, 248, 251, 279, 287], "especi": [4, 6, 20, 31, 60, 97, 115, 125, 142, 169, 184, 194, 222, 226, 228, 241, 276, 277], "hard": [4, 8, 11, 18, 53, 62, 97, 101, 125, 175, 200, 210, 217, 226, 229, 279, 281], "migrat": 4, "lengthen": 4, "impos": [4, 105], "signific": [4, 12, 18, 43, 61, 62, 65, 88, 97, 115, 140, 169, 200, 229, 249, 282], "mainten": [4, 38], "burden": [4, 210], "keep": [4, 6, 12, 15, 20, 57, 61, 62, 65, 66, 69, 86, 97, 120, 128, 136, 140, 159, 175, 196, 199, 200, 201, 206, 217, 218, 220, 222, 226, 228, 236, 264, 277, 282], "firstli": [4, 10, 18, 20, 220], "regular": [4, 10, 12, 18, 19, 44, 49, 61, 62, 65, 69, 77, 83, 84, 88, 101, 125, 169, 200, 207, 226, 236, 241, 286, 287], "schedul": 4, "Being": [4, 57, 71, 77, 200], "assur": [4, 101, 206], "suffici": [4, 6, 18, 42, 43, 52, 53, 57, 61, 97, 180, 213, 217, 226, 230, 245, 287], "regardless": [4, 6, 10, 20, 53, 61, 88, 101, 203, 218, 222, 248, 259, 264, 287], "often": [4, 6, 11, 18, 19, 20, 22, 28, 42, 43, 44, 51, 61, 69, 71, 73, 86, 88, 97, 101, 102, 111, 135, 139, 184, 193, 194, 197, 198, 200, 203, 206, 211, 217, 218, 223, 226, 230, 248, 276, 281, 282, 283, 287], "happen": [4, 6, 10, 11, 16, 18, 19, 20, 26, 35, 43, 53, 60, 61, 65, 73, 76, 85, 119, 170, 174, 180, 197, 203, 205, 206, 209, 218, 222, 226, 230, 249, 260, 279, 286, 287], "secondli": [4, 20, 220], "rigor": [4, 69, 194, 243], "semant": [4, 11, 18, 94, 228], "surfac": [4, 67, 69, 75, 86, 105, 119, 144, 148, 175, 196, 222, 255], "enough": [4, 6, 24, 26, 52, 61, 65, 88, 97, 100, 101, 111, 125, 142, 201, 203, 210, 226, 277, 279], "encod": [4, 10, 45, 53, 59, 62, 91, 210, 241, 245, 248], "backport": 4, "prior": [4, 10, 33, 189, 206, 222, 283], "extrem": [4, 27, 52, 65, 71, 77, 88, 94, 107, 139, 194, 222, 230], "accur": [4, 10, 12, 16, 20, 22, 41, 52, 61, 65, 66, 83, 88, 108, 196, 217, 276, 283], "model": [4, 11, 65, 91, 101, 111, 121, 127, 129, 130, 131, 147, 206, 219, 230], "final": [4, 6, 7, 10, 18, 20, 29, 42, 53, 60, 61, 67, 69, 86, 88, 91, 97, 101, 105, 109, 119, 120, 127, 132, 134, 135, 137, 140, 155, 167, 170, 172, 173, 175, 177, 178, 180, 185, 193, 194, 197, 200, 203, 205, 212, 218, 219, 220, 222, 223, 226, 228, 229, 236, 248, 249, 280, 281, 282], "temptat": [4, 219, 287], "fudg": 4, "earli": [4, 61, 101, 164, 223], "acceler": [4, 102, 122, 127, 132, 134, 139, 140, 142, 178, 185, 189, 191, 245, 264], "myst": [4, 7], "checkbox": 4, "tag": [4, 210, 228], "nest": [4, 25, 29, 61, 63, 67, 69, 88, 92, 111, 198, 200, 203, 210, 220, 222, 225, 229, 230, 231, 232, 234, 237, 248, 249, 282], "ensur": [4, 12, 20, 22, 24, 25, 26, 27, 30, 33, 61, 62, 65, 93, 97, 119, 140, 205, 206, 210, 241, 246, 249], "realli": [4, 10, 11, 16, 18, 19, 20, 61, 73, 101, 127, 177, 200, 209, 211, 217, 219, 220, 222, 226, 242, 251, 279, 281], "per": [4, 62, 97, 102, 107, 149, 185, 191, 196, 201, 206, 207, 255, 259, 261, 264], "everywher": [4, 11, 12, 61, 69, 86, 111, 191, 264], "doctest": [4, 6, 7, 12, 20, 54, 69, 97, 101, 127, 164, 175, 200, 206, 226, 241, 244, 246, 286], "sympy_deprecation_warn": [4, 239, 244, 246], "write": [4, 8, 10, 11, 16, 18, 19, 21, 22, 34, 43, 50, 61, 62, 68, 69, 86, 88, 94, 142, 155, 193, 194, 198, 203, 205, 210, 219, 220, 223, 226, 229, 235, 241, 242, 243, 249, 280, 281, 282, 287], "multilin": [4, 210], "deprecated_since_vers": [4, 239, 244, 246], "active_deprecations_target": [4, 239, 244, 246], "target": [4, 6, 11, 41, 42, 43, 61, 101, 117, 155, 159, 160, 219, 222, 225, 228, 229, 239, 242, 243, 246, 287], "stacklevel": [4, 239, 244, 246], "line": [4, 6, 10, 11, 12, 16, 18, 33, 42, 43, 52, 53, 57, 62, 71, 72, 73, 75, 76, 77, 78, 83, 86, 88, 89, 90, 97, 101, 104, 109, 112, 125, 127, 133, 155, 185, 190, 191, 193, 195, 196, 210, 213, 220, 222, 226, 230, 231, 239, 241, 242, 243, 246, 249, 251, 262, 265, 273, 279], "visual": [4, 61, 101, 105, 111, 209, 222], "confirm": [4, 10, 52, 101, 226], "look": [4, 6, 7, 10, 12, 18, 19, 20, 34, 42, 43, 52, 61, 66, 67, 69, 82, 97, 101, 120, 125, 127, 135, 159, 169, 170, 173, 189, 196, 200, 201, 205, 210, 212, 213, 217, 220, 222, 223, 226, 227, 241, 245, 249, 251, 260, 277, 282, 285, 286], "good": [4, 7, 11, 18, 20, 25, 31, 43, 61, 62, 65, 73, 86, 97, 101, 127, 139, 142, 197, 200, 201, 210, 217, 219, 220, 222, 226, 248, 276, 280, 283], "top": [4, 6, 7, 10, 11, 24, 43, 60, 61, 62, 77, 78, 88, 91, 97, 104, 105, 119, 124, 170, 177, 200, 210, 220, 226, 243, 244, 249, 265, 282], "relev": [4, 6, 7, 18, 43, 59, 74, 89, 90, 116, 120, 122, 127, 180, 190, 194, 200, 220, 226, 227, 236, 241, 263], "docstr": [4, 8, 10, 12, 20, 24, 42, 43, 54, 61, 83, 86, 88, 97, 101, 106, 110, 112, 118, 135, 140, 145, 162, 168, 169, 171, 188, 192, 206, 213, 216, 217, 219, 222, 226, 227, 228, 229, 235, 236, 241, 244, 249, 251, 256, 263, 266, 270, 272], "src": [4, 6, 7, 103, 226, 241, 246], "explan": [4, 7, 12, 14, 18, 21, 35, 36, 37, 38, 39, 40, 42, 43, 46, 49, 50, 52, 53, 54, 56, 58, 59, 60, 61, 62, 63, 67, 69, 73, 83, 84, 86, 88, 92, 97, 101, 111, 114, 116, 117, 119, 120, 122, 133, 144, 146, 149, 152, 154, 156, 158, 170, 175, 195, 196, 197, 199, 201, 205, 206, 208, 212, 213, 215, 216, 217, 218, 220, 222, 223, 226, 228, 230, 231, 235, 236, 241, 244, 246, 249, 284], "cross": [4, 7, 8, 11, 61, 71, 77, 92, 97, 104, 105, 119, 133, 140, 142, 155, 185, 187, 193, 194, 223, 229, 255, 259, 261, 262], "xyz": [4, 73, 103, 104, 185, 194, 255, 257, 260], "header": [4, 43, 242, 243], "why": [4, 10, 12, 18, 43, 61, 194, 201, 207, 217, 220, 249, 280, 282, 283], "test": [4, 6, 7, 8, 11, 12, 17, 19, 20, 24, 25, 38, 39, 41, 42, 43, 48, 52, 53, 60, 61, 62, 68, 71, 76, 86, 92, 94, 97, 101, 155, 164, 168, 169, 170, 178, 194, 200, 201, 203, 205, 207, 218, 220, 223, 226, 227, 228, 229, 239, 242, 243, 244, 245, 246, 248, 249, 251, 266, 267, 274, 279, 281, 282], "warns_deprecated_sympi": [4, 239, 244, 246], "pr": [4, 10, 60, 119, 201, 203, 204, 206, 229], "merg": [4, 43, 52, 53, 61, 183, 210, 218, 230, 241, 248, 249], "wiki": [4, 5, 6, 7, 8, 12, 18, 20, 32, 35, 37, 38, 39, 41, 42, 43, 49, 50, 52, 53, 60, 61, 62, 63, 64, 66, 67, 69, 71, 73, 77, 78, 79, 88, 89, 90, 91, 92, 94, 97, 101, 109, 111, 114, 144, 146, 147, 148, 150, 151, 152, 156, 157, 158, 161, 163, 164, 173, 175, 179, 185, 187, 192, 196, 206, 213, 217, 218, 219, 223, 226, 229, 230, 243, 248, 255, 257, 261, 263, 265, 283, 284], "decor": [4, 20, 52, 61, 69, 239, 241, 246, 247, 250, 251, 274], "sympydeprecationwarn": [4, 10, 239, 241, 244, 246], "class": [4, 7, 8, 10, 11, 12, 17, 18, 19, 20, 22, 26, 27, 31, 32, 35, 36, 37, 38, 39, 44, 45, 50, 51, 52, 53, 54, 55, 56, 57, 61, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 83, 84, 86, 88, 89, 90, 91, 92, 93, 94, 103, 104, 107, 108, 109, 111, 116, 119, 120, 121, 122, 124, 125, 129, 130, 135, 136, 140, 142, 143, 144, 146, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 177, 180, 181, 182, 183, 184, 188, 189, 190, 192, 197, 199, 200, 201, 203, 206, 207, 208, 209, 211, 212, 213, 216, 217, 218, 220, 222, 226, 227, 228, 229, 230, 235, 236, 237, 241, 242, 243, 244, 245, 246, 248, 249, 253, 256, 259, 260, 262, 263, 265, 266, 270, 272, 277, 279, 282, 287], "context": [4, 6, 7, 10, 14, 18, 20, 28, 36, 37, 38, 61, 63, 69, 88, 91, 125, 180, 200, 203, 205, 218, 239, 241, 246, 255], "manag": [4, 10, 33, 37, 38, 103, 155, 203, 222, 236, 239, 241, 246], "filter": [4, 10, 15, 26, 61, 62, 86, 147, 206, 239, 241, 246, 248], "emit": [4, 210, 239, 246], "assert": [4, 42, 50, 51, 52, 53, 61, 71, 73, 103, 139, 210, 218, 226, 227, 239, 246, 248], "separ": [4, 6, 10, 11, 12, 16, 19, 20, 24, 30, 42, 49, 61, 62, 67, 69, 86, 88, 97, 112, 119, 124, 139, 140, 143, 148, 172, 175, 184, 185, 196, 198, 201, 203, 206, 207, 210, 219, 222, 223, 226, 227, 229, 234, 239, 241, 245, 249, 251, 255, 279], "block": [4, 6, 10, 31, 43, 50, 52, 62, 92, 97, 119, 124, 125, 127, 130, 185, 194, 199, 223, 249, 259], "behavior1": 4, "behavior2": 4, "everyth": [4, 7, 12, 20, 43, 61, 63, 69, 88, 95, 113, 139, 171, 172, 196, 210, 282, 286], "ignore_warn": [4, 239, 244, 246, 249], "prevent": [4, 12, 26, 31, 43, 61, 67, 98, 101, 115, 199, 201, 206, 210, 222, 230, 239, 246, 278], "trigger": [4, 20, 53, 103, 175, 239], "twice": [4, 12, 43, 61, 63, 75, 101, 185, 187, 193, 206, 210, 245, 246, 255, 257, 277], "similar": [4, 5, 10, 12, 16, 18, 20, 22, 53, 60, 61, 62, 65, 66, 67, 69, 72, 77, 78, 82, 91, 97, 102, 111, 125, 127, 129, 139, 140, 173, 191, 193, 194, 198, 200, 201, 203, 207, 217, 219, 220, 222, 226, 228, 231, 236, 239, 242, 245, 246, 255, 257, 259, 260, 264, 276, 281, 282, 283, 285, 287], "somewher": [4, 6, 7, 11, 43], "sign": [4, 6, 7, 11, 22, 26, 31, 35, 40, 43, 57, 61, 62, 66, 67, 71, 77, 86, 88, 97, 101, 104, 105, 107, 111, 127, 148, 160, 185, 191, 193, 195, 203, 210, 215, 217, 222, 223, 228, 248, 262, 265, 280], "readi": [4, 18, 124, 200, 210, 226], "paragraph": [4, 6, 7, 20, 42], "metadata": [4, 42, 244, 246], "link": [4, 6, 7, 11, 12, 23, 27, 43, 62, 71, 77, 88, 112, 119, 128, 136, 242, 245, 246, 285], "rememb": [4, 6, 12, 20, 29, 91, 97, 112, 115, 142, 193, 194, 210, 222, 228, 231, 249, 282, 287], "shown": [4, 6, 10, 11, 18, 19, 20, 50, 53, 60, 61, 65, 67, 69, 86, 103, 105, 109, 111, 115, 120, 122, 128, 129, 130, 136, 137, 138, 140, 184, 185, 193, 194, 196, 199, 200, 201, 206, 210, 226, 230, 246, 248, 259, 260, 280], "plain": [4, 6, 18, 69, 89, 190, 206, 210], "rst": [4, 6, 7, 11, 44, 226, 241], "markdown": [4, 8, 11], "markup": [4, 210], "clearli": [4, 6, 20, 101, 194, 200, 220, 283], "delin": 4, "newlin": [4, 97, 251], "charact": [4, 6, 7, 61, 62, 86, 89, 103, 155, 185, 190, 210, 226, 241, 243, 246, 251, 279, 281, 286], "full": [4, 6, 7, 8, 9, 10, 12, 14, 18, 20, 25, 32, 39, 41, 43, 52, 53, 61, 65, 69, 73, 74, 88, 94, 97, 103, 137, 138, 185, 200, 203, 204, 206, 210, 212, 222, 223, 281, 284, 287], "abc": [4, 6, 12, 14, 15, 20, 22, 24, 26, 28, 29, 30, 31, 35, 36, 37, 38, 39, 40, 41, 43, 50, 52, 54, 60, 61, 62, 63, 66, 67, 69, 70, 71, 72, 74, 75, 76, 77, 78, 84, 85, 86, 88, 89, 91, 92, 94, 97, 100, 102, 109, 111, 113, 146, 148, 150, 151, 156, 173, 175, 176, 197, 199, 201, 203, 205, 206, 207, 210, 211, 212, 213, 215, 216, 217, 218, 219, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 235, 237, 242, 243, 244, 245, 246, 248, 249, 251, 255, 258, 259, 260, 265, 267, 279, 282, 286], "func": [4, 6, 11, 17, 20, 37, 41, 43, 61, 63, 66, 69, 80, 82, 88, 101, 164, 185, 203, 206, 210, 211, 222, 226, 227, 228, 239, 244, 246, 248, 249, 251, 254], "larger": [4, 7, 11, 20, 27, 43, 52, 53, 60, 61, 62, 69, 86, 94, 97, 101, 129, 133, 201, 207, 211, 217, 222, 228, 243, 245, 279, 287], "easier": [4, 11, 19, 30, 61, 105, 125, 127, 193, 201, 205, 207, 220, 226, 229, 243, 249, 259, 281, 287, 288], "exactli": [4, 6, 7, 10, 11, 12, 20, 22, 29, 31, 39, 45, 52, 61, 64, 65, 97, 103, 140, 195, 220, 222, 226, 229, 231, 245, 248, 249, 277, 279, 281, 286, 287], "direct": [4, 6, 7, 10, 11, 17, 29, 35, 37, 38, 42, 46, 49, 52, 57, 60, 61, 63, 65, 67, 70, 74, 75, 76, 77, 91, 92, 97, 104, 105, 107, 115, 116, 119, 127, 129, 133, 142, 161, 185, 191, 193, 194, 197, 199, 200, 203, 207, 217, 220, 236, 239, 248, 255, 260, 261, 264], "syntax": [4, 6, 7, 10, 11, 12, 20, 29, 36, 38, 53, 61, 88, 103, 125, 142, 172, 196, 200, 209, 210, 222, 228, 232, 251, 277, 279, 281, 286, 288], "paramet": [4, 7, 10, 11, 12, 22, 28, 30, 35, 36, 38, 41, 43, 44, 52, 53, 57, 59, 61, 62, 63, 64, 66, 67, 69, 70, 71, 72, 74, 75, 76, 77, 78, 80, 84, 86, 88, 89, 91, 92, 94, 97, 98, 100, 101, 103, 104, 107, 109, 111, 112, 113, 115, 116, 117, 119, 120, 121, 122, 124, 125, 127, 142, 144, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 163, 164, 165, 167, 169, 170, 172, 173, 174, 175, 176, 177, 185, 186, 187, 189, 190, 191, 194, 195, 196, 198, 199, 201, 203, 205, 206, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 222, 223, 225, 226, 227, 228, 230, 231, 232, 235, 236, 239, 241, 242, 243, 245, 246, 248, 249, 255, 257, 258, 259, 260, 265, 277, 282], "short": [4, 7, 12, 34, 44, 51, 53, 57, 61, 62, 63, 64, 67, 95, 101, 115, 161, 180, 184, 194, 197, 204, 231, 241, 251, 282, 286], "renam": [4, 43, 88], "rest": [4, 10, 86, 89, 91, 95, 105, 113, 125, 129, 135, 180, 197, 200, 230, 248, 279, 280, 287], "left": [4, 7, 10, 16, 18, 20, 23, 24, 27, 41, 43, 44, 52, 53, 57, 61, 62, 63, 66, 67, 69, 77, 78, 84, 86, 88, 89, 91, 92, 97, 100, 101, 111, 116, 124, 140, 147, 154, 159, 163, 164, 167, 172, 185, 191, 195, 196, 197, 199, 206, 207, 208, 209, 210, 212, 213, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 241, 242, 243, 245, 248, 262, 277, 281, 283, 287], "imaginari": [4, 6, 12, 18, 20, 22, 26, 28, 35, 39, 40, 61, 65, 67, 69, 92, 142, 200, 201, 206, 210, 211, 218, 222, 229], "simplify_thi": [4, 6, 244], "expr": [4, 6, 11, 12, 18, 20, 26, 28, 31, 37, 38, 40, 41, 43, 53, 60, 63, 65, 67, 69, 71, 83, 86, 88, 91, 94, 97, 102, 103, 111, 115, 117, 125, 139, 152, 156, 158, 160, 164, 167, 170, 172, 173, 175, 182, 185, 187, 190, 196, 198, 199, 200, 201, 203, 205, 206, 207, 208, 210, 211, 212, 213, 215, 217, 219, 222, 225, 226, 227, 228, 229, 230, 231, 232, 234, 236, 237, 242, 243, 244, 246, 249, 255, 257, 258, 259, 260, 262, 276, 277, 279, 281, 282, 286, 287, 288], "simplifi": [4, 6, 11, 12, 16, 18, 19, 20, 27, 28, 29, 36, 38, 40, 41, 60, 61, 63, 65, 66, 67, 69, 73, 78, 83, 86, 88, 91, 92, 93, 94, 97, 104, 111, 112, 117, 119, 121, 128, 129, 132, 133, 134, 139, 147, 154, 159, 174, 175, 182, 185, 191, 197, 205, 207, 209, 211, 216, 218, 219, 220, 223, 226, 227, 228, 229, 230, 244, 246, 249, 259, 261, 267, 276, 278, 279, 281, 282, 283], "def": [4, 6, 7, 10, 11, 12, 16, 18, 19, 20, 37, 38, 42, 61, 66, 73, 91, 97, 101, 103, 133, 170, 200, 206, 210, 219, 222, 229, 244, 246, 248, 249, 252, 276, 279, 282, 283, 287], "ref": [4, 52, 67, 97, 109, 142, 215, 230, 244, 283], "is_this_zero": [4, 246], "y": [4, 6, 10, 11, 12, 14, 15, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 36, 37, 38, 39, 40, 41, 43, 44, 52, 53, 60, 61, 62, 63, 64, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 84, 86, 88, 89, 90, 91, 92, 93, 94, 97, 101, 102, 103, 104, 105, 107, 109, 111, 116, 117, 119, 122, 125, 127, 128, 129, 130, 132, 133, 134, 136, 140, 142, 143, 152, 153, 156, 159, 164, 170, 172, 173, 175, 176, 184, 185, 186, 187, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 216, 217, 218, 219, 220, 222, 223, 225, 226, 227, 228, 229, 230, 231, 234, 235, 236, 237, 242, 243, 246, 248, 249, 251, 255, 258, 259, 260, 261, 262, 264, 265, 276, 277, 279, 281, 282, 286, 287, 288], "0": [4, 6, 11, 12, 14, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 109, 111, 112, 113, 114, 116, 117, 119, 120, 122, 125, 127, 128, 129, 130, 132, 134, 137, 138, 139, 140, 142, 143, 144, 147, 148, 149, 151, 154, 159, 160, 161, 164, 169, 170, 171, 172, 173, 174, 175, 176, 180, 182, 185, 186, 187, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 205, 206, 207, 208, 209, 210, 212, 213, 215, 216, 217, 218, 219, 220, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 239, 241, 242, 244, 245, 246, 248, 249, 250, 255, 257, 258, 259, 260, 261, 262, 265, 276, 277, 279, 281, 282, 283, 286, 287, 288], "zero": [4, 11, 12, 14, 18, 19, 20, 27, 28, 35, 39, 40, 43, 51, 52, 53, 57, 60, 61, 64, 65, 66, 67, 69, 71, 75, 76, 77, 86, 88, 90, 91, 92, 94, 96, 97, 100, 101, 103, 104, 111, 119, 122, 125, 127, 130, 133, 136, 137, 138, 142, 147, 169, 173, 175, 177, 189, 191, 193, 194, 195, 197, 198, 199, 200, 201, 205, 206, 208, 210, 213, 217, 218, 220, 222, 223, 226, 227, 228, 229, 230, 231, 246, 248, 249, 259, 261, 262, 282, 288], "is_zero": [4, 18, 20, 76, 97, 197, 201, 206, 246, 283], "mail": [4, 10, 22, 24, 25, 26, 27, 28, 29, 30, 31, 33, 210, 280], "summar": [4, 241, 287], "idea": [4, 11, 18, 19, 20, 46, 52, 59, 61, 62, 73, 79, 86, 88, 101, 112, 125, 175, 179, 180, 197, 199, 200, 219, 222, 223, 226, 229, 243, 249, 287], "fit": [4, 11, 42, 86, 97, 100, 101, 194, 210, 226, 251, 282], "put": [4, 6, 10, 11, 12, 16, 20, 24, 43, 57, 58, 61, 62, 63, 67, 91, 92, 97, 147, 152, 156, 171, 172, 206, 210, 211, 219, 220, 222, 226, 231, 237, 242, 283, 287], "word": [4, 7, 11, 20, 39, 57, 60, 61, 62, 67, 69, 91, 111, 120, 125, 140, 197, 200, 205, 222, 223, 226, 228, 243, 255, 260, 279], "global": [4, 6, 10, 36, 37, 38, 41, 43, 44, 61, 73, 86, 103, 159, 165, 185, 187, 196, 197, 200, 201, 203, 210, 223, 226, 227, 230, 241, 243, 244, 249, 258], "uniqu": [4, 10, 11, 41, 42, 44, 52, 55, 57, 61, 62, 63, 66, 69, 76, 79, 84, 88, 90, 91, 97, 101, 119, 164, 173, 185, 194, 197, 198, 200, 203, 205, 206, 211, 215, 222, 223, 226, 228, 229, 230, 234, 243, 248, 251, 259, 264, 279, 282], "across": [4, 7, 52, 59, 61, 72, 88, 105, 174, 175, 182, 196, 210, 245, 247, 248, 249, 285], "level": [4, 6, 7, 10, 11, 12, 18, 19, 24, 26, 43, 52, 59, 61, 67, 69, 88, 91, 97, 101, 115, 129, 142, 170, 175, 180, 184, 187, 194, 196, 199, 200, 208, 210, 219, 223, 229, 230, 234, 242, 243, 248, 282, 283, 285], "correspond": [4, 6, 7, 10, 16, 18, 19, 20, 25, 29, 41, 42, 43, 44, 51, 52, 53, 55, 56, 57, 60, 61, 62, 63, 64, 67, 71, 72, 74, 75, 76, 77, 84, 86, 90, 91, 92, 97, 100, 101, 104, 105, 111, 117, 119, 120, 124, 125, 127, 129, 143, 147, 151, 165, 169, 170, 172, 176, 177, 180, 185, 189, 191, 195, 196, 198, 199, 200, 201, 203, 205, 206, 210, 216, 217, 220, 222, 223, 226, 227, 228, 229, 230, 232, 234, 235, 236, 243, 244, 245, 246, 248, 249, 251, 255, 257, 259, 260, 262, 264, 282, 288], "share": [4, 18, 20, 62, 101, 201, 205, 210, 230, 243], "__init__": [4, 6, 20, 61, 120, 205, 255, 257, 282], "func_nam": [4, 43, 67, 92, 251], "help": [4, 5, 6, 7, 18, 26, 34, 43, 51, 61, 69, 86, 88, 97, 101, 102, 104, 109, 125, 142, 150, 160, 194, 196, 205, 207, 210, 219, 220, 223, 226, 227, 230, 241, 242, 243, 249, 272, 280, 283], "rais": [4, 10, 12, 14, 18, 19, 20, 36, 38, 41, 43, 50, 53, 61, 62, 63, 65, 67, 70, 71, 74, 76, 77, 78, 86, 88, 92, 94, 97, 98, 100, 101, 109, 111, 149, 161, 191, 194, 197, 198, 199, 200, 201, 203, 205, 206, 207, 210, 212, 218, 222, 225, 226, 227, 228, 229, 230, 234, 236, 239, 241, 243, 246, 248, 249, 251, 252, 262, 283], "been": [4, 12, 18, 20, 22, 41, 43, 44, 52, 53, 54, 57, 60, 61, 62, 67, 73, 86, 88, 97, 101, 102, 103, 119, 120, 125, 127, 135, 139, 140, 148, 160, 170, 172, 180, 184, 191, 192, 193, 194, 197, 200, 201, 205, 207, 208, 210, 212, 217, 220, 222, 227, 228, 229, 231, 240, 241, 243, 244, 246, 248, 251, 259, 262, 279, 280, 282, 283, 287], "simplfiy_thi": 4, "ident": [4, 11, 12, 20, 39, 42, 44, 51, 52, 53, 59, 61, 62, 66, 67, 77, 84, 90, 92, 94, 97, 112, 114, 119, 120, 140, 159, 161, 164, 180, 197, 198, 199, 203, 204, 205, 206, 210, 219, 222, 226, 229, 234, 236, 241, 248, 249, 251, 260, 279, 283, 287], "much": [4, 6, 10, 16, 18, 19, 20, 22, 28, 42, 43, 46, 57, 65, 69, 83, 86, 88, 139, 183, 184, 193, 194, 195, 197, 200, 203, 206, 217, 220, 222, 226, 227, 228, 229, 243, 245, 279, 281, 287], "trivial": [4, 44, 52, 57, 60, 61, 62, 67, 76, 91, 94, 97, 101, 137, 175, 197, 198, 203, 206, 220, 223, 226, 229, 234], "furthermor": [4, 10, 20, 39, 61, 62, 91, 205, 219, 279, 281, 282], "particular": [4, 6, 10, 11, 12, 18, 19, 23, 25, 39, 44, 52, 61, 62, 65, 69, 72, 86, 88, 91, 94, 97, 101, 104, 107, 135, 159, 170, 198, 199, 200, 201, 203, 205, 206, 216, 218, 220, 222, 223, 226, 228, 229, 241, 243, 245, 283, 285, 287], "expr1": [4, 18, 111, 196, 228, 282], "expr2": [4, 18, 111, 196, 282], "dozen": [4, 11, 20, 287], "search": [4, 6, 23, 41, 52, 53, 57, 59, 61, 67, 97, 101, 125, 197, 205, 206, 210, 219, 220, 222, 227, 230, 242], "upcom": 4, "bot": 4, "push": [5, 86], "respect": [5, 6, 10, 11, 12, 20, 29, 36, 38, 39, 41, 42, 43, 44, 51, 52, 53, 56, 57, 59, 60, 61, 63, 66, 67, 69, 71, 73, 77, 78, 83, 84, 86, 88, 91, 92, 94, 97, 101, 103, 104, 105, 107, 111, 116, 117, 119, 122, 129, 136, 138, 140, 142, 149, 164, 177, 178, 179, 184, 185, 189, 191, 194, 195, 196, 197, 200, 203, 205, 206, 207, 210, 212, 213, 216, 218, 222, 226, 227, 228, 229, 230, 231, 235, 236, 241, 243, 255, 257, 258, 259, 260, 261, 262, 263, 264, 277, 287], "handbook": [5, 6, 44, 51, 52, 59, 69, 101], "internet": 5, "practic": [5, 8, 16, 18, 22, 25, 28, 31, 50, 52, 62, 71, 136, 139, 142, 196, 197, 198, 200, 205, 207, 234, 279, 280], "project": [5, 7, 10, 43, 74, 75, 76, 90, 97, 141, 242, 243, 255], "purpos": [5, 6, 7, 8, 10, 11, 17, 18, 20, 29, 42, 43, 52, 58, 61, 62, 88, 97, 125, 142, 180, 184, 194, 200, 203, 207, 209, 210, 217, 226, 229, 235, 245, 247, 249, 259, 260, 277, 287], "nn": 5, "brows": 5, "clone": [5, 33, 203], "download": [5, 7, 33, 42, 83, 204, 219, 226, 230, 255, 281], "origin": [5, 11, 12, 16, 18, 25, 33, 35, 52, 53, 54, 57, 60, 61, 62, 65, 66, 67, 69, 70, 72, 74, 76, 86, 88, 92, 97, 101, 109, 111, 112, 119, 129, 139, 142, 167, 170, 180, 186, 191, 196, 197, 201, 205, 206, 209, 210, 218, 219, 220, 222, 223, 226, 227, 228, 229, 230, 236, 241, 248, 249, 255, 258, 259, 260, 261, 262, 264, 265, 287], "77": [5, 50, 69, 97, 101, 209, 210, 243], "mib": 5, "remot": [5, 61], "collabor": 5, "upstream": 5, "fetch": 5, "branch": [5, 19, 41, 61, 66, 67, 68, 69, 207, 220, 229, 282, 287], "checkout": [5, 42], "advantag": [5, 10, 14, 18, 20, 22, 38, 41, 43, 61, 62, 66, 88, 91, 97, 101, 108, 179, 199, 200, 207, 218, 223, 226, 229, 245, 279, 281, 283, 287], "isol": [5, 22, 41, 67, 201, 205, 206, 207, 228, 243], "wide": [5, 18, 89, 97, 142, 190, 200, 206, 210, 230], "flake8": 5, "usernam": 5, "easiest": [5, 7, 10, 11, 12, 61, 197, 200, 223, 249, 260, 276, 282, 287], "consult": [5, 44], "kwarg": [5, 12, 37, 38, 39, 43, 52, 53, 60, 61, 62, 63, 67, 69, 71, 72, 74, 75, 76, 77, 78, 83, 86, 88, 92, 93, 94, 95, 97, 99, 100, 109, 111, 117, 120, 129, 144, 153, 155, 159, 160, 164, 166, 168, 169, 171, 172, 173, 185, 189, 190, 196, 199, 201, 206, 210, 212, 216, 217, 218, 222, 226, 227, 228, 230, 231, 236, 241, 242, 244, 251, 260], "test_bas": [5, 241], "similarli": [5, 10, 18, 22, 29, 57, 61, 62, 69, 73, 97, 104, 105, 111, 120, 140, 196, 197, 200, 205, 207, 217, 218, 220, 226, 241, 249, 260, 261, 283], "qualiti": [5, 102, 210], "code_qu": 5, "liter": [6, 12, 20, 43, 51, 61, 89, 91, 103, 175, 182, 222], "occur": [6, 10, 11, 12, 52, 53, 61, 65, 69, 78, 86, 92, 103, 115, 119, 139, 184, 185, 193, 205, 213, 222, 227, 228, 231, 241, 248, 282], "definit": [6, 10, 11, 12, 19, 35, 39, 43, 44, 52, 53, 58, 60, 61, 63, 64, 66, 67, 69, 74, 77, 84, 86, 88, 92, 93, 94, 97, 101, 103, 119, 127, 132, 133, 140, 177, 180, 183, 185, 193, 194, 197, 198, 201, 206, 207, 210, 217, 230, 231, 242, 243, 244, 248, 249, 255, 259, 260, 261, 262, 277, 287], "__doc__": [6, 12], "attribut": [6, 11, 15, 18, 20, 37, 38, 42, 43, 52, 53, 61, 69, 70, 71, 74, 75, 76, 77, 94, 97, 103, 105, 111, 116, 119, 120, 121, 122, 124, 132, 140, 143, 164, 169, 173, 180, 184, 185, 191, 194, 196, 197, 200, 201, 205, 210, 218, 222, 223, 235, 236, 242, 244, 248, 249, 252, 259, 282], "fdiff": [6, 20, 43, 61, 67, 68, 69], "self": [6, 18, 20, 27, 35, 37, 38, 42, 43, 52, 53, 58, 60, 61, 63, 67, 70, 71, 72, 74, 75, 76, 77, 88, 92, 97, 101, 116, 127, 170, 175, 185, 187, 189, 197, 199, 201, 203, 205, 206, 210, 212, 217, 218, 236, 255], "argindex": [6, 20, 43, 61, 67, 68, 69], "heavisid": [6, 69, 86, 88, 210], "diff": [6, 10, 11, 16, 20, 26, 29, 41, 43, 61, 66, 67, 68, 69, 78, 83, 94, 97, 115, 117, 128, 129, 142, 173, 185, 187, 190, 191, 194, 196, 201, 206, 209, 210, 220, 226, 227, 228, 231, 232, 237, 259, 262, 277, 281, 288], "diracdelta": [6, 69, 88, 170, 175, 210], "what": [6, 7, 8, 10, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 32, 41, 43, 53, 55, 60, 61, 62, 63, 67, 68, 71, 72, 76, 86, 88, 90, 97, 101, 103, 116, 119, 120, 122, 125, 129, 136, 142, 174, 175, 178, 180, 185, 193, 194, 201, 203, 206, 209, 210, 211, 217, 219, 220, 222, 223, 226, 228, 235, 239, 241, 243, 244, 249, 259, 260, 265, 277, 279, 280, 282, 286, 287], "scope": [6, 43, 135, 139, 239, 287], "high": [6, 7, 12, 16, 18, 22, 26, 43, 61, 65, 66, 89, 101, 142, 190, 200, 205, 208, 210, 223, 228, 272, 283], "od": [6, 11, 20, 84, 120, 124, 135, 142, 224, 227, 267, 288], "seen": [6, 16, 18, 35, 53, 86, 88, 103, 107, 119, 124, 136, 180, 193, 197, 200, 203, 206, 226, 229, 246, 248, 259, 279, 282, 286], "hand": [6, 10, 16, 18, 20, 24, 29, 42, 43, 53, 54, 61, 67, 69, 88, 91, 92, 97, 101, 104, 120, 124, 125, 139, 143, 147, 164, 167, 185, 191, 194, 195, 197, 200, 201, 203, 205, 208, 220, 229, 241, 243, 245, 249, 252, 262, 264, 281], "less": [6, 7, 10, 11, 16, 22, 25, 27, 39, 43, 44, 52, 53, 60, 61, 62, 65, 66, 67, 69, 75, 76, 77, 92, 97, 101, 109, 111, 125, 127, 175, 200, 203, 205, 206, 219, 220, 222, 223, 226, 228, 229, 230, 241, 243], "understand": [6, 12, 18, 19, 20, 31, 61, 62, 86, 125, 135, 137, 138, 142, 180, 193, 196, 199, 200, 205, 210, 220, 223, 242, 249, 278, 279, 286, 287], "clear": [6, 10, 18, 37, 51, 61, 86, 90, 116, 193, 194, 196, 201, 203, 206, 220, 228, 229, 236, 241, 245, 264, 279], "begin": [6, 10, 12, 18, 20, 23, 27, 29, 61, 62, 66, 67, 69, 86, 92, 94, 97, 101, 129, 137, 138, 139, 140, 171, 180, 185, 194, 195, 199, 210, 220, 223, 226, 227, 229, 230, 241, 251, 279, 281, 283, 287], "convers": [6, 7, 10, 18, 25, 43, 61, 81, 103, 139, 179, 198, 199, 200, 201, 203, 205, 207, 210, 223, 235, 242, 255], "aim": [6, 7, 79, 86, 180, 197, 220, 226, 229, 280, 281], "comment": [6, 7, 43, 52, 125, 127, 207, 210, 243, 248], "distract": 6, "input": [6, 7, 10, 11, 12, 20, 26, 29, 35, 41, 44, 57, 61, 62, 64, 65, 66, 67, 75, 88, 90, 91, 97, 101, 103, 108, 109, 111, 115, 119, 121, 124, 125, 127, 128, 129, 139, 142, 143, 148, 171, 185, 187, 189, 200, 201, 203, 206, 207, 208, 209, 210, 211, 218, 222, 223, 226, 228, 230, 232, 242, 243, 245, 246, 248, 249, 251, 276, 282, 283, 287], "consum": [6, 43, 69, 121, 139], "human": [6, 14, 86, 177, 206, 210], "beings": 6, "english": [6, 62], "likewis": [6, 18, 42, 104, 128, 129], "reader": [6, 7, 20, 42, 44, 140, 197, 210, 245, 280, 285], "machineri": [6, 61, 205, 249], "mind": [6, 12, 15, 18, 26, 61, 97, 140, 196, 217, 218, 264, 282], "platform": [6, 61, 175, 194, 226, 242], "anyon": [6, 7, 10, 32, 206, 210, 275, 285, 286], "restructuredtext": [6, 7], "extend": [6, 7, 18, 20, 25, 39, 43, 52, 53, 61, 62, 66, 73, 86, 88, 97, 101, 142, 183, 190, 196, 198, 201, 203, 205, 206, 207, 210, 217, 219, 223, 225, 226, 229, 230, 231, 243, 245, 279, 281], "concis": [6, 142], "quick": [6, 7, 20, 61, 97, 101, 222, 228, 249], "depth": [6, 7, 9, 12, 13, 32, 52, 61, 127, 196, 197, 210], "tripl": [6, 25, 78, 97, 194, 195, 197, 205, 251], "quot": [6, 12, 43, 91, 210, 251], "raw": [6, 7, 43, 61, 62, 67, 102, 103, 169, 174, 200, 201, 206, 218, 222, 286], "backslash": [6, 61, 210], "blank": [6, 103, 121, 196], "close": [6, 11, 28, 43, 60, 61, 65, 66, 69, 77, 79, 86, 88, 90, 111, 128, 196, 197, 198, 204, 205, 218, 228, 229, 243, 277, 287], "rare": [6, 20, 61, 226, 230, 239, 279], "underlin": [6, 7], "numpydoc": [6, 7], "build": [6, 7, 8, 15, 37, 38, 43, 61, 63, 69, 91, 142, 169, 180, 185, 194, 197, 202, 205, 206, 207, 217, 230, 259, 276, 279, 282], "consist": [6, 7, 10, 11, 16, 18, 24, 26, 30, 42, 52, 53, 57, 61, 62, 66, 67, 69, 71, 77, 79, 86, 91, 104, 107, 119, 136, 140, 149, 169, 175, 180, 183, 189, 196, 198, 200, 201, 203, 218, 226, 228, 229, 230, 234, 239, 242, 243, 248, 280, 282], "review": [6, 7, 141], "head": [6, 15, 42, 61, 228, 230, 236, 251, 282], "plural": [6, 7], "length": [6, 10, 43, 45, 51, 52, 53, 55, 59, 61, 62, 64, 66, 67, 69, 70, 74, 76, 77, 78, 91, 92, 97, 100, 101, 104, 105, 115, 120, 124, 128, 129, 130, 140, 144, 148, 172, 177, 178, 180, 185, 189, 194, 205, 206, 210, 216, 220, 222, 226, 230, 241, 242, 248, 251, 255, 257, 265], "equal": [6, 10, 11, 14, 18, 19, 20, 22, 29, 31, 35, 39, 42, 43, 44, 50, 51, 52, 53, 57, 59, 60, 61, 62, 63, 65, 66, 67, 69, 74, 75, 76, 77, 78, 80, 86, 91, 92, 94, 97, 101, 104, 107, 111, 112, 116, 120, 122, 127, 137, 138, 159, 160, 175, 180, 185, 189, 194, 197, 198, 199, 200, 201, 203, 205, 206, 208, 210, 216, 218, 220, 223, 226, 227, 228, 229, 230, 236, 241, 242, 243, 248, 251, 255, 260, 265, 277, 280, 288], "clutter": 6, "harder": [6, 10, 18, 61, 86, 200, 241], "minim": [6, 18, 20, 41, 52, 53, 57, 60, 61, 62, 86, 88, 91, 101, 116, 129, 144, 199, 200, 201, 203, 206, 209, 219, 222, 223, 228, 248, 252], "amount": [6, 42, 61, 62, 73, 119, 135, 185, 191, 194, 203, 213, 241, 255, 257], "deprec": [6, 8, 13, 24, 36, 53, 61, 74, 88, 92, 114, 119, 139, 206, 210, 230, 236, 239, 240, 244, 246, 249, 253], "notifi": 6, "awai": [6, 42, 44, 62, 104, 105, 107, 127, 205, 210], "encourag": [6, 10, 42, 137, 138, 205], "label": [6, 29, 42, 43, 55, 61, 71, 84, 88, 107, 148, 155, 159, 164, 173, 175, 196, 210, 211, 213, 222, 235, 236, 286], "elabor": [6, 21, 191, 262], "suffic": [6, 198, 228], "clarifi": 6, "complic": [6, 12, 14, 18, 20, 22, 28, 43, 52, 60, 62, 63, 65, 66, 67, 69, 86, 88, 94, 135, 137, 175, 194, 200, 203, 207, 209, 220, 222, 229, 230, 234, 235, 243, 245, 249, 251, 277, 279, 282, 283], "demonstr": [6, 7, 12, 18, 20, 22, 26, 27, 28, 52, 53, 61, 88, 101, 116, 119, 125, 129, 130, 139, 197, 200, 261, 287], "api": [6, 7, 10, 18, 21, 25, 27, 43, 61, 73, 81, 102, 103, 110, 135, 142, 171, 184, 192, 196, 203, 223, 225, 249, 252, 259, 260, 263, 270, 272, 273, 280, 281, 284], "simpl": [6, 11, 12, 16, 18, 20, 28, 33, 42, 43, 52, 60, 61, 65, 69, 73, 77, 79, 86, 88, 90, 97, 101, 102, 104, 105, 111, 112, 115, 119, 120, 122, 124, 127, 129, 130, 132, 134, 135, 139, 143, 149, 163, 164, 172, 173, 174, 185, 193, 194, 200, 201, 202, 206, 207, 210, 212, 217, 219, 220, 222, 223, 226, 229, 236, 242, 243, 248, 252, 254, 255, 257, 258, 262, 276, 279, 282, 283, 287], "too": [6, 12, 20, 31, 52, 53, 61, 67, 69, 71, 74, 76, 86, 91, 100, 101, 102, 137, 144, 217, 218, 222, 223, 226, 228, 229, 230, 241, 242, 258, 259], "thought": [6, 11, 61, 217, 226, 279, 282], "perfect": [6, 20, 29, 52, 61, 101, 223, 229, 281, 282], "tell": [6, 7, 18, 19, 22, 26, 29, 43, 53, 62, 65, 69, 92, 103, 124, 180, 200, 205, 209, 217, 220, 226, 242, 279], "think": [6, 10, 11, 18, 19, 20, 26, 33, 41, 52, 127, 180, 245, 249, 279, 287], "test_": [6, 241], "coverage_doctest": 6, "coverag": 6, "6868680200532414": 6, "dsolv": [6, 11, 29, 226, 227, 228, 277, 281, 288], "co": [6, 10, 12, 20, 23, 24, 26, 28, 29, 30, 31, 35, 41, 43, 60, 61, 63, 65, 66, 67, 69, 70, 71, 74, 75, 77, 79, 83, 84, 85, 86, 88, 92, 97, 101, 103, 116, 117, 119, 125, 127, 128, 130, 132, 133, 134, 139, 142, 147, 149, 185, 187, 189, 191, 193, 194, 195, 196, 200, 203, 206, 207, 209, 210, 211, 212, 213, 217, 218, 219, 220, 222, 226, 228, 229, 230, 231, 237, 249, 255, 257, 258, 259, 260, 265, 276, 277, 279, 281, 287, 288], "sin": [6, 7, 10, 11, 12, 18, 20, 23, 26, 28, 29, 31, 33, 35, 41, 43, 60, 61, 63, 65, 66, 67, 69, 70, 71, 75, 79, 80, 83, 84, 85, 86, 88, 89, 92, 97, 102, 103, 113, 116, 117, 119, 124, 125, 127, 128, 130, 132, 133, 134, 139, 142, 147, 149, 173, 185, 187, 189, 191, 193, 194, 195, 196, 198, 200, 206, 207, 209, 210, 211, 212, 213, 217, 218, 219, 220, 222, 225, 226, 228, 229, 231, 237, 243, 249, 255, 257, 258, 259, 260, 265, 276, 277, 279, 281, 282, 287, 288], "hint": [6, 20, 42, 45, 52, 61, 64, 67, 88, 92, 97, 101, 111, 142, 152, 156, 172, 174, 175, 185, 206, 217, 220, 228, 287], "1st_exact": [6, 226], "eq": [6, 11, 12, 14, 18, 20, 24, 25, 29, 31, 39, 41, 43, 61, 66, 67, 69, 71, 74, 78, 86, 91, 178, 196, 197, 201, 206, 208, 210, 212, 216, 218, 219, 222, 223, 225, 226, 227, 228, 229, 230, 242, 243, 249, 255, 279, 281, 288], "c1": [6, 16, 29, 62, 71, 78, 92, 94, 119, 161, 175, 218, 223, 226, 228, 261, 288], "comma": [6, 7, 12, 43, 61, 210, 249, 279], "readabl": [6, 34, 42, 89, 115, 206, 209, 210, 217, 219, 252], "accept": [6, 11, 20, 24, 31, 42, 43, 52, 61, 67, 75, 88, 91, 92, 94, 97, 100, 103, 125, 169, 185, 190, 196, 205, 206, 209, 210, 211, 218, 220, 222, 228, 242, 249, 255, 257, 260, 283], "rang": [6, 10, 11, 16, 20, 22, 25, 26, 41, 43, 50, 51, 52, 53, 55, 57, 61, 62, 66, 67, 69, 75, 92, 97, 101, 105, 109, 113, 144, 175, 196, 200, 201, 202, 203, 205, 206, 207, 212, 213, 216, 218, 219, 222, 226, 229, 230, 231, 235, 241, 248, 276, 287], "30": [6, 35, 41, 43, 47, 61, 62, 64, 65, 66, 69, 75, 77, 88, 92, 97, 98, 101, 104, 105, 125, 148, 199, 201, 205, 206, 210, 216, 219, 222, 230, 231, 287], "7": [6, 12, 18, 20, 22, 25, 29, 35, 37, 38, 41, 43, 45, 47, 50, 51, 52, 53, 54, 55, 57, 59, 60, 61, 62, 64, 65, 66, 67, 69, 71, 74, 75, 76, 77, 83, 86, 88, 91, 92, 94, 95, 97, 101, 103, 104, 109, 111, 127, 134, 137, 138, 142, 175, 180, 182, 195, 196, 198, 199, 200, 201, 203, 204, 205, 206, 207, 209, 210, 212, 213, 216, 217, 218, 219, 220, 222, 223, 225, 226, 227, 228, 229, 230, 231, 235, 236, 241, 242, 245, 248, 249, 255, 265, 277, 282, 283, 286], "8": [6, 16, 22, 28, 33, 35, 36, 41, 43, 45, 52, 53, 54, 57, 59, 61, 62, 64, 65, 66, 67, 69, 71, 74, 75, 77, 83, 86, 88, 90, 91, 92, 94, 95, 97, 98, 100, 101, 103, 104, 109, 111, 113, 127, 142, 147, 148, 159, 195, 196, 198, 199, 200, 201, 203, 205, 206, 207, 209, 210, 212, 213, 216, 218, 219, 220, 222, 223, 225, 226, 227, 228, 229, 230, 231, 235, 241, 243, 245, 248, 255, 258, 259, 265, 276, 277, 281, 283, 287], "9": [6, 14, 29, 31, 33, 41, 43, 49, 51, 52, 53, 57, 59, 60, 61, 62, 64, 66, 67, 69, 70, 71, 74, 75, 77, 83, 86, 88, 92, 93, 94, 95, 97, 98, 100, 101, 103, 104, 109, 111, 112, 113, 114, 116, 125, 127, 130, 136, 142, 144, 148, 180, 195, 196, 198, 199, 200, 201, 203, 205, 206, 207, 209, 210, 216, 218, 219, 220, 222, 223, 226, 228, 229, 230, 231, 241, 245, 248, 255, 258, 281, 283, 288], "11": [6, 18, 37, 38, 43, 52, 55, 57, 59, 61, 62, 64, 66, 69, 73, 74, 75, 77, 78, 86, 88, 91, 92, 93, 97, 101, 103, 111, 125, 127, 140, 159, 169, 195, 196, 198, 199, 201, 203, 204, 205, 206, 207, 209, 210, 217, 219, 223, 226, 228, 229, 230, 231, 242, 248, 259], "12": [6, 12, 20, 22, 35, 41, 42, 43, 47, 49, 50, 52, 53, 54, 57, 59, 60, 61, 62, 64, 66, 67, 69, 71, 74, 75, 77, 86, 88, 92, 97, 98, 101, 104, 105, 109, 111, 113, 119, 127, 128, 140, 172, 185, 195, 198, 199, 200, 203, 205, 206, 207, 209, 210, 216, 218, 219, 223, 225, 226, 230, 231, 242, 245, 248, 258, 283, 287], "13": [6, 35, 43, 50, 52, 57, 61, 62, 64, 66, 69, 73, 74, 75, 76, 86, 91, 97, 101, 105, 109, 111, 125, 140, 196, 203, 205, 206, 207, 209, 210, 216, 223, 225, 227, 228, 230, 231, 242, 265], "14": [6, 22, 43, 50, 52, 56, 57, 59, 61, 62, 66, 67, 69, 86, 97, 98, 101, 102, 104, 109, 125, 195, 196, 199, 201, 203, 204, 205, 206, 207, 209, 210, 219, 222, 223, 226, 228, 230, 231, 277], "15": [6, 12, 20, 41, 47, 50, 52, 57, 59, 61, 62, 64, 65, 66, 69, 71, 74, 75, 77, 78, 86, 88, 91, 92, 93, 97, 98, 101, 104, 116, 148, 195, 196, 198, 199, 200, 201, 205, 206, 207, 209, 210, 212, 216, 217, 219, 222, 223, 227, 228, 229, 230, 231, 248, 276, 277, 282, 283], "16": [6, 22, 31, 35, 41, 43, 52, 53, 56, 60, 61, 62, 66, 69, 70, 71, 75, 86, 88, 91, 97, 98, 100, 101, 105, 191, 198, 199, 200, 203, 204, 205, 206, 209, 210, 216, 218, 219, 220, 223, 230, 231, 248, 255, 264, 283], "17": [6, 10, 28, 29, 31, 50, 52, 53, 61, 62, 65, 66, 67, 71, 74, 77, 86, 97, 101, 111, 200, 201, 205, 206, 209, 210, 217, 219, 223, 226, 231, 245, 249, 281], "18": [6, 28, 52, 53, 64, 66, 69, 71, 74, 77, 93, 97, 101, 104, 105, 109, 111, 113, 186, 195, 203, 204, 209, 210, 218, 219, 223, 226, 228, 229, 230, 231, 258], "19": [6, 28, 52, 61, 64, 69, 71, 74, 77, 97, 101, 103, 104, 195, 201, 205, 206, 209, 219, 223, 225, 228, 242, 276], "20": [6, 12, 28, 31, 39, 43, 50, 52, 53, 60, 61, 62, 65, 66, 69, 77, 78, 88, 97, 101, 104, 105, 107, 111, 122, 180, 182, 195, 196, 200, 204, 205, 206, 207, 209, 210, 216, 217, 218, 219, 222, 223, 226, 229, 230, 255, 277], "21": [6, 10, 47, 52, 61, 64, 66, 74, 75, 83, 97, 101, 103, 104, 140, 196, 201, 203, 204, 205, 207, 209, 210, 216, 226, 230, 231, 287], "22": [6, 12, 52, 61, 64, 65, 66, 69, 97, 101, 104, 105, 140, 204, 209, 222, 223, 228, 230], "23": [6, 41, 52, 53, 61, 64, 67, 69, 75, 77, 97, 101, 104, 140, 201, 206, 209, 216, 223, 248], "24": [6, 25, 27, 28, 35, 41, 49, 53, 54, 61, 64, 66, 69, 75, 83, 88, 97, 101, 104, 105, 109, 111, 172, 182, 195, 201, 203, 205, 206, 207, 209, 212, 217, 223, 226, 230, 245, 248, 265, 277, 283], "25": [6, 12, 25, 28, 52, 53, 62, 64, 66, 69, 71, 74, 76, 93, 97, 100, 101, 104, 105, 111, 116, 122, 189, 195, 203, 205, 206, 209, 210, 216, 217, 219, 223, 225, 226, 227, 230, 242], "26": [6, 50, 61, 62, 64, 69, 73, 97, 101, 104, 105, 206, 223, 230], "27": [6, 26, 43, 44, 52, 56, 66, 71, 97, 101, 104, 105, 111, 113, 203, 206, 228], "28": [6, 43, 52, 60, 64, 65, 69, 97, 101, 104, 127, 219, 223, 226, 282], "29": [6, 35, 50, 52, 53, 61, 62, 64, 66, 67, 74, 75, 97, 101, 111, 164, 200, 218, 230], "assumpt": [6, 11, 12, 17, 19, 21, 25, 26, 27, 36, 37, 39, 40, 42, 43, 52, 53, 55, 60, 63, 65, 67, 68, 88, 91, 92, 97, 98, 104, 111, 115, 142, 182, 187, 199, 209, 210, 218, 219, 222, 226, 228, 229, 235, 243, 248, 266, 267, 287], "parenthes": [6, 12, 61, 103, 115, 163, 164, 194, 210, 234, 251], "type": [6, 8, 10, 11, 12, 13, 15, 18, 19, 20, 23, 25, 26, 31, 37, 38, 41, 52, 53, 57, 60, 61, 62, 63, 64, 65, 67, 71, 72, 73, 74, 75, 76, 79, 86, 88, 89, 90, 91, 92, 93, 94, 97, 101, 102, 103, 104, 105, 107, 109, 111, 115, 119, 120, 125, 136, 142, 147, 161, 169, 170, 171, 173, 185, 189, 190, 194, 196, 197, 200, 201, 204, 205, 206, 207, 208, 210, 211, 212, 218, 219, 220, 222, 223, 225, 226, 228, 234, 235, 236, 239, 241, 242, 243, 248, 249, 251, 259, 262, 265, 277, 279, 281, 282, 283, 286, 287, 288], "enclos": [6, 71, 72, 77, 100, 112, 210, 220, 249], "colon": [6, 61], "preced": [6, 7, 12, 44, 53, 61, 62, 65, 66, 155, 222, 249], "space": [6, 12, 20, 41, 42, 43, 61, 62, 63, 70, 71, 72, 74, 76, 77, 90, 97, 103, 104, 113, 119, 120, 121, 122, 144, 146, 149, 159, 162, 164, 170, 172, 179, 185, 189, 191, 194, 195, 196, 197, 205, 229, 230, 241, 245, 255, 257, 259, 260, 261, 262, 264, 265, 272, 279, 282], "omit": [6, 10, 18, 20, 43, 53, 60, 61, 62, 66, 86, 88, 91, 97, 177, 210, 211, 218, 220, 228, 234, 243, 248, 277], "absent": [6, 45, 228], "specifi": [6, 7, 10, 14, 18, 20, 22, 27, 28, 30, 31, 42, 43, 44, 56, 60, 61, 62, 63, 64, 67, 69, 70, 74, 77, 86, 88, 90, 91, 92, 94, 97, 101, 103, 104, 105, 111, 116, 119, 120, 124, 125, 127, 129, 130, 132, 135, 137, 138, 139, 140, 142, 143, 159, 164, 169, 170, 172, 173, 178, 184, 185, 187, 189, 191, 193, 194, 197, 198, 199, 200, 201, 203, 205, 206, 207, 210, 212, 213, 216, 217, 218, 220, 222, 226, 227, 228, 229, 230, 231, 235, 236, 237, 241, 242, 243, 248, 249, 255, 257, 258, 261, 264, 283], "displai": [6, 7, 12, 18, 19, 29, 61, 62, 65, 86, 90, 104, 105, 109, 146, 179, 185, 189, 190, 196, 200, 201, 210, 218, 234, 241], "signatur": [6, 20, 37, 38, 53, 61, 97, 243, 244, 248, 249], "brace": [6, 66, 125, 210], "appear": [6, 7, 11, 12, 14, 29, 42, 43, 45, 50, 52, 61, 62, 66, 67, 70, 71, 74, 77, 80, 84, 86, 88, 92, 97, 101, 103, 125, 129, 159, 175, 177, 180, 196, 198, 200, 203, 205, 206, 210, 219, 222, 226, 227, 228, 230, 234, 236, 241, 248, 249, 255, 260], "shape": [6, 10, 43, 77, 92, 94, 97, 99, 100, 109, 111, 119, 124, 125, 185, 196, 197, 199, 210, 213, 220, 230, 231, 232, 234, 235, 236, 249, 286], "combin": [6, 10, 12, 20, 22, 30, 42, 61, 65, 66, 69, 88, 90, 91, 92, 101, 105, 111, 119, 124, 128, 135, 143, 154, 161, 169, 170, 172, 173, 174, 178, 180, 181, 197, 198, 200, 201, 203, 205, 206, 210, 211, 219, 220, 222, 223, 226, 228, 230, 231, 245, 248, 276, 279, 282], "incorrectli": [6, 10, 20, 70, 71, 97, 198], "opt_cs": [6, 222], "canon": [6, 11, 18, 24, 43, 45, 50, 52, 53, 57, 61, 62, 63, 67, 77, 86, 91, 97, 101, 103, 120, 152, 156, 175, 177, 180, 182, 203, 211, 218, 219, 222, 226, 228, 230, 236, 248, 287], "find": [6, 11, 12, 14, 16, 17, 20, 23, 24, 25, 26, 27, 29, 30, 31, 35, 38, 41, 43, 44, 52, 55, 56, 57, 60, 61, 65, 67, 69, 71, 73, 74, 75, 78, 83, 86, 88, 90, 97, 101, 103, 117, 126, 133, 140, 142, 144, 160, 167, 169, 170, 171, 175, 178, 180, 193, 196, 197, 198, 199, 200, 201, 203, 207, 209, 210, 215, 216, 217, 218, 219, 220, 222, 223, 225, 226, 228, 229, 230, 236, 245, 248, 249, 251, 255, 265, 277, 279, 281, 283, 288], "optim": [6, 11, 28, 43, 45, 52, 65, 91, 101, 115, 142, 155, 159, 206, 210, 211, 219, 222, 230, 242], "mul": [6, 10, 11, 12, 15, 20, 35, 86, 88, 92, 101, 155, 159, 169, 170, 199, 200, 201, 205, 206, 210, 211, 212, 219, 222, 226, 227, 228, 229, 234, 282], "pow": [6, 10, 11, 12, 35, 40, 43, 61, 62, 67, 86, 92, 101, 174, 199, 200, 201, 206, 210, 212, 219, 222, 228, 229, 282, 286], "neg": [6, 11, 12, 18, 19, 26, 39, 40, 43, 44, 56, 60, 61, 66, 67, 69, 71, 73, 74, 77, 86, 88, 90, 91, 92, 97, 100, 101, 104, 105, 107, 108, 109, 111, 119, 175, 185, 195, 198, 199, 201, 203, 205, 206, 207, 210, 216, 218, 219, 220, 222, 223, 226, 228, 229, 230], "coeffici": [6, 14, 16, 18, 22, 25, 27, 38, 41, 43, 60, 61, 63, 65, 66, 69, 74, 79, 80, 83, 84, 86, 90, 91, 94, 97, 98, 101, 112, 120, 125, 148, 162, 172, 180, 195, 197, 198, 199, 200, 201, 202, 205, 206, 207, 208, 209, 212, 213, 216, 217, 220, 222, 223, 225, 226, 227, 228, 229, 230, 236, 242, 259, 262, 272, 282, 287], "none": [6, 7, 10, 11, 18, 19, 20, 35, 36, 37, 38, 39, 41, 42, 43, 50, 51, 52, 53, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 69, 70, 71, 72, 74, 75, 76, 77, 78, 80, 82, 83, 84, 86, 88, 89, 91, 92, 94, 97, 98, 101, 102, 103, 104, 111, 116, 117, 119, 120, 121, 122, 124, 125, 144, 146, 148, 149, 155, 160, 165, 170, 172, 175, 177, 181, 182, 183, 185, 187, 189, 190, 194, 195, 196, 197, 199, 200, 201, 203, 205, 206, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 222, 223, 226, 227, 228, 229, 230, 231, 234, 235, 236, 239, 241, 242, 243, 244, 248, 249, 251, 254, 255, 258, 283, 287, 288], "process": [6, 7, 10, 11, 12, 18, 40, 43, 52, 53, 59, 61, 62, 67, 69, 77, 86, 88, 97, 101, 111, 121, 125, 127, 133, 136, 137, 139, 142, 196, 197, 203, 210, 211, 218, 222, 226, 228, 241, 245, 287], "concern": [6, 11, 18, 41, 44, 60, 65, 101, 191, 196, 198, 199, 200, 209, 210, 211, 222, 223, 228, 242, 243, 245, 251], "item": [6, 7, 11, 12, 14, 22, 29, 43, 50, 51, 53, 61, 66, 72, 78, 92, 97, 101, 120, 196, 200, 203, 206, 210, 218, 226, 227, 230, 241, 242, 245, 248, 249, 287], "fragment": [6, 62], "desir": [6, 10, 12, 16, 20, 24, 29, 31, 34, 52, 53, 61, 62, 64, 65, 66, 67, 71, 75, 77, 91, 92, 97, 100, 101, 102, 120, 121, 122, 124, 135, 139, 160, 185, 193, 194, 199, 201, 203, 205, 206, 207, 210, 211, 213, 218, 222, 226, 228, 229, 242, 244, 245, 248, 262, 276], "span": [6, 10, 90, 97, 104, 105, 119, 205, 210, 246, 283], "subsequ": [6, 12, 29, 61, 67, 185, 201, 203, 206, 245, 248, 259, 262], "indent": [6, 12, 251], "embed": [6, 7, 41, 53, 61, 89, 205], "hyperlink": 6, "classnam": 6, "erf": [6, 69, 86, 88, 210, 220, 230], "gauss": [6, 27, 69, 88, 97, 144, 198, 205, 208, 228, 229], "erfc": [6, 69, 86, 210, 230], "complementari": [6, 69, 111], "erfi": [6, 69, 86, 210], "erf2": [6, 69, 210], "erfinv": [6, 69, 210, 230], "invers": [6, 27, 29, 35, 52, 53, 61, 62, 63, 69, 88, 94, 97, 101, 119, 120, 164, 168, 169, 172, 177, 180, 197, 198, 199, 201, 203, 206, 207, 210, 212, 220, 222, 226, 228, 229, 230, 248, 283, 287], "erfcinv": [6, 69, 210], "erf2inv": [6, 69, 210], "besselj": [6, 69, 83, 210, 222, 226, 281], "besselbas": [6, 69], "bessel": [6, 7, 67, 79, 88, 206, 222, 226, 230, 281], "kind": [6, 7, 10, 11, 17, 18, 19, 20, 42, 43, 63, 66, 69, 81, 88, 92, 104, 107, 120, 125, 138, 191, 198, 200, 201, 206, 211, 212, 218, 226, 227, 230, 248, 262, 264, 277, 287], "bess": [6, 69, 210, 222, 226, 230], "besselk": [6, 69, 210, 230], "cite": [6, 21], "citat": [6, 60, 204], "meant": [6, 7, 10, 12, 18, 20, 43, 61, 69, 74, 88, 101, 125, 142, 196, 201, 218, 222, 227, 260, 282], "augment": [6, 43, 97, 120, 137, 138, 142, 208, 228, 229, 246, 249, 288], "freeli": [6, 34, 95, 119, 197], "wikipedia": [6, 11, 18, 20, 35, 37, 38, 39, 41, 42, 43, 49, 50, 52, 53, 60, 61, 62, 63, 64, 66, 67, 69, 71, 73, 77, 78, 79, 88, 90, 91, 92, 94, 97, 101, 109, 111, 114, 144, 146, 147, 148, 150, 151, 152, 156, 157, 158, 161, 163, 164, 173, 175, 178, 185, 187, 192, 206, 213, 217, 218, 219, 226, 229, 230, 243, 248, 255, 257, 261, 263, 265, 281, 283, 285], "wolfram": [6, 39, 54, 55, 61, 62, 64, 66, 67, 69, 71, 77, 88, 97, 101, 103, 204, 210, 212, 213, 215, 218, 223, 230, 248, 283], "mathworld": [6, 11, 39, 54, 55, 61, 62, 64, 66, 67, 69, 71, 77, 88, 97, 101, 204, 213, 218, 223, 230, 248], "nist": [6, 67, 69, 180], "digit": [6, 11, 12, 28, 43, 61, 62, 64, 65, 71, 88, 91, 101, 135, 185, 200, 206, 217, 222, 248, 276], "dlmf": [6, 67, 69], "suffer": 6, "rot": [6, 77, 172], "publish": [6, 86, 220], "identifi": [6, 10, 18, 19, 41, 54, 61, 64, 65, 88, 97, 107, 137, 163, 164, 197, 200, 201, 211, 219, 222, 226, 227, 229, 230, 249, 252], "clickabl": 6, "kozen89": [6, 203, 204], "kozen": [6, 204], "landau": [6, 204, 277], "polynomi": [6, 7, 11, 16, 18, 23, 25, 31, 39, 52, 60, 61, 62, 65, 66, 79, 80, 82, 84, 88, 91, 92, 94, 97, 101, 105, 111, 140, 142, 197, 199, 204, 208, 212, 217, 219, 220, 222, 223, 225, 226, 229, 241, 266, 273, 278, 283, 288], "decomposit": [6, 22, 27, 52, 59, 93, 94, 97, 199, 201, 203, 204, 212, 287], "1989": [6, 204, 228], "pp": [6, 52, 53, 59, 60, 61, 62, 66, 67, 88, 92, 97, 129, 139, 195, 198, 203, 204, 226, 227, 230], "445": [6, 204], "456": [6, 61, 204], "abramowitz": [6, 69], "milton": [6, 69], "stegun": [6, 69], "iren": [6, 69], "chapter": [6, 52, 69, 101, 125, 204], "formula": [6, 16, 22, 41, 55, 60, 61, 65, 66, 67, 69, 74, 91, 97, 101, 195, 197, 203, 206, 210, 212, 216, 219, 222, 223, 226, 281, 287], "tabl": [6, 18, 44, 52, 61, 66, 69, 82, 88, 97, 101, 119, 142, 195, 205, 232], "ed": [6, 53, 69, 97, 204, 228, 230], "1965": [6, 69, 92], "luke": [6, 69, 86, 220], "l": [6, 10, 12, 41, 42, 43, 44, 50, 52, 53, 60, 62, 69, 72, 73, 74, 75, 76, 78, 79, 84, 86, 88, 90, 93, 94, 97, 101, 104, 105, 111, 113, 119, 120, 122, 124, 125, 128, 129, 130, 132, 133, 134, 138, 139, 140, 141, 142, 143, 144, 147, 173, 176, 177, 178, 180, 193, 194, 195, 197, 199, 201, 203, 204, 210, 212, 213, 219, 220, 223, 226, 228, 230, 234, 235, 236, 237, 241, 243, 248, 265, 287], "Their": [6, 61, 69, 86, 195, 196, 200, 203, 220], "approxim": [6, 12, 17, 31, 41, 52, 60, 61, 62, 65, 69, 71, 77, 86, 88, 97, 101, 105, 108, 144, 178, 196, 200, 201, 206, 213, 217, 220, 230, 277, 281], "1969": [6, 62, 69, 86, 204, 220], "en": [6, 7, 18, 20, 35, 37, 38, 39, 41, 42, 43, 49, 50, 52, 53, 60, 61, 62, 63, 64, 66, 67, 69, 71, 73, 77, 78, 79, 88, 89, 90, 91, 92, 94, 97, 101, 109, 111, 114, 144, 146, 147, 148, 150, 151, 152, 156, 157, 158, 161, 163, 164, 173, 175, 185, 187, 192, 206, 207, 213, 217, 218, 219, 226, 229, 230, 243, 248, 249, 255, 257, 261, 263, 265, 283], "bessel_funct": [6, 69], "typefunct": [6, 69], "gamma": [6, 7, 12, 20, 60, 61, 63, 65, 66, 86, 88, 114, 142, 172, 194, 195, 210, 220, 222, 226, 230, 287], "infti": [6, 11, 18, 39, 60, 61, 62, 66, 67, 69, 86, 88, 197, 206, 213, 217, 220, 226, 229, 230, 277, 281, 287], "mathrm": [6, 33, 51, 60, 61, 62, 69, 86, 88, 97, 201, 203, 210, 218, 220, 226, 229, 230, 277, 281], "factori": [6, 16, 20, 27, 60, 61, 65, 66, 69, 97, 101, 103, 195, 201, 203, 205, 206, 210, 212, 222, 228, 230, 243, 244, 248, 249, 287], "z": [6, 10, 11, 12, 14, 18, 20, 25, 28, 29, 30, 39, 40, 43, 44, 52, 53, 60, 61, 62, 63, 64, 66, 67, 69, 73, 74, 75, 76, 77, 86, 88, 91, 92, 94, 97, 103, 104, 105, 113, 116, 117, 119, 122, 125, 127, 128, 129, 130, 132, 133, 134, 136, 139, 140, 142, 143, 144, 153, 155, 159, 169, 170, 172, 176, 180, 184, 185, 186, 187, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 209, 210, 211, 217, 218, 219, 220, 222, 223, 226, 227, 228, 229, 230, 231, 234, 235, 236, 242, 243, 249, 255, 258, 259, 260, 261, 262, 264, 265, 276, 277, 279, 281, 282, 286, 287, 288], "whole": [6, 10, 18, 61, 63, 69, 88, 105, 113, 196, 197, 205, 206, 210, 213, 218, 220, 226, 229, 248], "complex": [6, 10, 11, 12, 15, 18, 20, 25, 26, 27, 31, 35, 39, 40, 41, 43, 52, 61, 62, 64, 65, 66, 69, 73, 83, 86, 92, 93, 97, 101, 102, 103, 109, 111, 115, 125, 142, 144, 148, 158, 161, 163, 164, 175, 184, 185, 194, 198, 199, 201, 205, 206, 210, 211, 215, 218, 220, 222, 226, 228, 229, 230, 243, 251, 287, 288], "plane": [6, 35, 61, 69, 71, 73, 74, 76, 77, 88, 109, 119, 127, 147, 148, 193, 194, 218, 229, 265, 273, 287], "pole": [6, 11, 69, 86, 111, 119, 148, 217, 220, 226], "pi": [6, 10, 11, 12, 15, 18, 20, 23, 24, 26, 29, 31, 34, 35, 36, 38, 39, 40, 41, 43, 53, 60, 61, 63, 65, 66, 67, 69, 70, 71, 72, 74, 75, 76, 77, 80, 86, 88, 97, 101, 113, 119, 127, 142, 144, 146, 147, 148, 149, 151, 159, 170, 172, 173, 176, 178, 185, 195, 196, 198, 200, 201, 206, 210, 213, 217, 218, 219, 220, 222, 225, 226, 228, 229, 230, 248, 255, 258, 265, 276, 281, 287], "oo": [6, 11, 14, 18, 19, 24, 39, 41, 60, 61, 65, 66, 67, 69, 74, 86, 88, 91, 97, 111, 113, 161, 173, 176, 201, 203, 206, 215, 216, 217, 218, 222, 225, 226, 228, 229, 230, 235, 248, 251, 277, 281], "known": [6, 11, 18, 19, 20, 29, 38, 42, 43, 44, 50, 52, 53, 61, 62, 65, 66, 69, 71, 74, 79, 86, 88, 89, 98, 101, 109, 111, 112, 114, 116, 122, 139, 178, 185, 193, 199, 200, 201, 205, 206, 210, 213, 216, 218, 219, 220, 222, 225, 226, 227, 228, 230, 248, 249, 255, 262, 264, 287], "sqrt": [6, 10, 11, 14, 18, 20, 22, 23, 24, 25, 26, 30, 31, 35, 39, 40, 41, 43, 61, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 84, 85, 86, 88, 89, 92, 93, 97, 101, 103, 104, 107, 111, 113, 127, 144, 146, 148, 149, 154, 159, 169, 170, 172, 173, 175, 176, 178, 185, 191, 194, 195, 198, 200, 201, 203, 205, 206, 209, 210, 211, 216, 219, 220, 222, 223, 225, 226, 228, 229, 230, 248, 249, 251, 255, 264, 265, 276, 281, 286, 287, 288], "obei": [6, 69, 195, 210, 220], "mirror": [6, 69, 88, 148], "symmetri": [6, 10, 49, 54, 57, 69, 92, 154, 195, 226, 234, 236, 276, 287], "conjug": [6, 22, 39, 50, 51, 52, 61, 67, 69, 92, 97, 113, 144, 158, 161, 175, 206, 210, 226, 236], "differenti": [6, 7, 10, 11, 23, 41, 61, 66, 67, 69, 78, 79, 81, 84, 111, 119, 120, 124, 125, 127, 129, 132, 135, 136, 137, 138, 139, 142, 143, 164, 170, 184, 185, 187, 189, 191, 194, 197, 203, 207, 209, 210, 215, 220, 222, 226, 227, 255, 262, 263, 266, 273, 277, 278, 281], "polygamma": [6, 66, 69, 210], "seri": [6, 16, 29, 41, 42, 43, 44, 51, 52, 60, 61, 63, 65, 66, 67, 69, 84, 85, 86, 90, 101, 108, 111, 125, 132, 134, 142, 189, 193, 202, 203, 210, 215, 216, 220, 226, 229, 267, 273, 278], "expans": [6, 16, 20, 43, 61, 63, 66, 67, 69, 88, 97, 101, 139, 154, 156, 206, 207, 212, 213, 214, 219, 221, 222, 226, 228, 229, 267, 278, 287], "eulergamma": [6, 61, 65, 66, 69], "zeta": [6, 11, 12, 60, 61, 65, 66, 201, 205, 210, 217, 230], "40": [6, 31, 43, 64, 66, 69, 71, 78, 92, 97, 101, 104, 196, 207, 209, 210, 230, 251, 276], "288037795340032417959588909060233922890": [6, 69], "49801566811835604271": [6, 69], "15494982830181068512": [6, 69], "lowergamma": [6, 69, 230], "lower": [6, 10, 11, 18, 24, 39, 41, 43, 52, 53, 60, 61, 63, 69, 70, 72, 77, 78, 88, 92, 93, 94, 97, 109, 114, 119, 175, 189, 195, 197, 199, 201, 203, 206, 210, 219, 220, 222, 226, 235, 236, 245, 255, 277, 285], "uppergamma": [6, 66, 69, 210, 230], "upper": [6, 39, 60, 62, 65, 69, 70, 77, 78, 92, 93, 94, 97, 100, 101, 109, 119, 168, 175, 195, 199, 201, 203, 205, 206, 210, 220, 228, 235, 255], "loggamma": [6, 7, 69, 210], "log": [6, 7, 12, 20, 33, 35, 41, 43, 52, 60, 61, 65, 66, 67, 69, 79, 83, 85, 86, 88, 92, 97, 101, 196, 201, 210, 212, 217, 220, 222, 226, 229, 230, 237, 277, 287, 288], "digamma": [6, 66, 69, 210], "trigamma": [6, 69, 210], "beta": [6, 12, 43, 52, 61, 88, 172, 185, 195, 205, 207, 210, 226, 230], "euler": [6, 41, 42, 60, 61, 62, 65, 66, 69, 77, 83, 89, 101, 119, 172, 185, 190, 194, 195, 206, 210, 226, 230, 255, 257], "gamma_funct": [6, 69], "gov": [6, 67, 69], "gammafunct": [6, 69], "gammabetaerf": [6, 66, 69], "unusu": [6, 18, 127, 241], "inlin": [6, 89, 190, 210, 243], "pretti": [6, 11, 20, 42, 43, 69, 88, 89, 97, 101, 105, 111, 127, 190, 220, 222, 229, 264, 278, 281, 283, 287], "As": [6, 10, 15, 16, 19, 20, 22, 27, 28, 29, 34, 43, 52, 53, 61, 62, 65, 66, 67, 69, 85, 86, 91, 97, 100, 101, 103, 119, 124, 125, 127, 129, 136, 139, 140, 175, 180, 193, 197, 198, 200, 201, 203, 206, 207, 209, 210, 217, 218, 220, 226, 229, 230, 248, 249, 259, 260, 276, 277, 279, 281, 282, 283, 286, 287], "literatur": [6, 11, 86, 202, 273], "fact": [6, 10, 11, 18, 19, 20, 26, 38, 39, 61, 66, 69, 79, 86, 101, 107, 127, 139, 180, 197, 198, 200, 203, 205, 207, 209, 220, 222, 226, 229, 241, 249, 264, 276, 279, 280, 281, 282, 287], "eval": [6, 10, 18, 37, 38, 43, 61, 67, 69, 161, 175, 201, 206, 210, 243, 276], "illumin": 6, "tone": 6, "narr": [6, 8, 280], "excerpt": 6, "geometri": [6, 70, 71, 72, 74, 75, 76, 77, 78, 88, 135, 148, 202, 258, 265, 266, 273, 281], "autofunct": 6, "intersect": [6, 18, 26, 41, 42, 52, 71, 72, 74, 75, 76, 77, 78, 148, 197, 206, 210, 216, 217, 218, 229], "convex_hul": [6, 73, 77, 78], "are_similar": [6, 72, 73, 78], "autoclass": 6, "linearent": [6, 71, 74, 75, 76, 77], "rai": [6, 71, 73, 74, 75, 77, 78, 144, 148], "segment": [6, 10, 52, 71, 73, 74, 75, 76, 77, 78, 193, 196, 226, 241], "curv": [6, 42, 63, 73, 88, 101, 104, 144, 196, 197, 226, 255, 265, 273, 277], "ellips": [6, 72, 73, 77, 147, 196, 210, 273, 286], "circl": [6, 20, 61, 71, 72, 73, 75, 76, 77, 78, 86, 148, 155, 196, 229, 255, 258, 265], "polygon": [6, 71, 72, 73, 78, 196, 265, 273], "regularpolygon": [6, 72, 73, 77, 196], "triangl": [6, 20, 42, 66, 72, 73, 77, 78, 88, 92, 101, 195, 196, 258, 265], "rel": [6, 7, 10, 25, 42, 43, 51, 52, 53, 54, 58, 59, 60, 61, 62, 65, 72, 86, 101, 116, 119, 122, 130, 139, 140, 147, 174, 185, 189, 193, 194, 197, 199, 200, 203, 205, 218, 220, 225, 228, 230, 241, 248, 259, 260, 264, 281], "cumbersom": [6, 31], "viewcod": 6, "aco": [6, 12, 35, 67, 74, 77, 127, 142, 148, 185, 210, 226, 255, 287], "obj": [6, 10, 18, 61, 201, 206, 210, 244], "qualifi": [6, 252], "elementari": [6, 18, 19, 20, 52, 61, 62, 65, 68, 69, 83, 86, 88, 92, 97, 101, 140, 168, 171, 206, 207, 248, 249, 259, 267], "trigonometr": [6, 20, 24, 31, 61, 88, 207, 213, 221, 222, 225, 226, 229, 249, 267, 278, 288], "trail": [6, 53, 101, 201, 203, 206, 246, 251], "pair": [6, 12, 16, 22, 25, 42, 43, 52, 53, 61, 62, 67, 73, 78, 85, 97, 101, 125, 129, 165, 167, 169, 170, 175, 184, 195, 197, 200, 203, 205, 206, 211, 216, 217, 219, 220, 222, 223, 226, 229, 230, 243, 248, 259, 276, 283], "www": [6, 7, 35, 41, 52, 53, 62, 64, 66, 69, 83, 88, 89, 101, 109, 190, 204, 209, 210, 219, 222, 223, 226, 230, 248, 283, 286], "master": [6, 7, 33, 88, 241], "usag": [6, 7, 11, 12, 18, 19, 20, 34, 37, 63, 67, 88, 172, 191, 196, 197, 203, 210, 218, 220, 223, 226, 227, 231, 245, 249, 250, 262, 263, 270, 282], "expect": [6, 7, 12, 18, 20, 42, 44, 46, 61, 67, 69, 73, 91, 101, 102, 111, 119, 125, 169, 200, 203, 205, 207, 208, 217, 222, 225, 228, 229, 230, 239, 241, 242, 245, 248, 249, 281, 282], "vector": [6, 16, 35, 39, 43, 45, 52, 53, 61, 63, 69, 74, 75, 76, 83, 84, 90, 92, 97, 102, 104, 107, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 127, 129, 132, 133, 134, 136, 137, 138, 139, 140, 142, 143, 147, 148, 161, 170, 172, 177, 180, 185, 187, 189, 190, 197, 205, 210, 220, 226, 228, 230, 235, 236, 241, 242, 257, 261, 266, 270, 272, 283], "dynamicsymbol": [6, 115, 116, 117, 119, 120, 122, 124, 125, 127, 128, 129, 130, 132, 133, 134, 136, 137, 138, 139, 140, 142, 143, 185, 187, 189, 190, 191, 193, 194], "custom": [6, 10, 21, 43, 53, 61, 65, 68, 89, 92, 97, 117, 119, 184, 190, 191, 212, 216, 223, 230, 236, 242, 249, 255, 264, 281, 283], "sine": [6, 20, 61, 67, 69, 86, 88, 149, 207, 213, 219, 276], "expand": [6, 10, 11, 12, 16, 18, 22, 43, 61, 63, 65, 66, 67, 69, 86, 88, 92, 111, 125, 127, 142, 156, 164, 167, 174, 175, 198, 200, 203, 205, 206, 207, 210, 213, 217, 219, 220, 222, 226, 229, 230, 234, 242, 249, 261, 276, 281], "troubleshoot": [6, 139], "spell": [6, 10, 11, 226], "try": [6, 7, 8, 10, 11, 12, 18, 19, 20, 22, 24, 25, 28, 29, 31, 53, 60, 61, 65, 69, 71, 76, 86, 88, 91, 94, 97, 100, 101, 165, 167, 174, 175, 196, 200, 205, 210, 215, 217, 218, 219, 220, 222, 223, 226, 228, 249, 251, 276, 279, 282, 283, 287], "referencefram": [6, 10, 116, 117, 119, 120, 122, 125, 127, 128, 129, 132, 133, 134, 137, 138, 139, 140, 142, 143, 185, 186, 187, 189, 190, 191, 192, 193, 272], "though": [6, 11, 12, 18, 19, 20, 22, 28, 29, 30, 31, 34, 44, 61, 62, 63, 73, 77, 86, 88, 92, 97, 101, 115, 120, 127, 137, 139, 170, 184, 185, 193, 194, 198, 200, 201, 206, 207, 219, 220, 222, 226, 227, 228, 229, 241, 262, 277, 282, 287], "frame": [6, 115, 116, 117, 119, 120, 122, 124, 125, 127, 128, 129, 130, 132, 134, 136, 137, 138, 139, 140, 142, 143, 184, 185, 186, 187, 189, 191, 193, 245, 255, 262], "notimplementederror": [6, 24, 26, 29, 30, 31, 41, 60, 71, 74, 78, 88, 97, 109, 199, 205, 209, 218, 225, 226, 227, 228, 229], "outsid": [6, 26, 39, 52, 61, 69, 72, 77, 92, 101, 115, 180, 194, 206, 222, 277, 282], "plot": [6, 20, 29, 33, 70, 71, 73, 74, 77, 84, 89, 97, 104, 105, 110, 142, 159, 162, 168, 213, 266, 272, 273, 281, 286], "ahead": [6, 101], "submit": 6, "sub": [6, 10, 11, 12, 14, 18, 19, 20, 22, 25, 26, 28, 29, 43, 60, 61, 67, 69, 70, 71, 72, 73, 74, 75, 77, 88, 91, 92, 94, 97, 101, 103, 104, 105, 111, 115, 117, 125, 127, 128, 129, 132, 133, 139, 142, 172, 173, 178, 185, 195, 197, 199, 200, 201, 206, 210, 217, 218, 222, 223, 226, 227, 228, 230, 241, 242, 244, 276, 277, 279], "common": [6, 7, 10, 11, 12, 18, 19, 20, 23, 24, 25, 26, 29, 41, 43, 52, 53, 61, 62, 67, 72, 75, 78, 88, 94, 96, 97, 101, 102, 109, 111, 116, 119, 121, 128, 135, 140, 142, 147, 180, 185, 193, 194, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 208, 212, 218, 219, 220, 222, 223, 226, 228, 229, 230, 242, 243, 246, 248, 249, 262, 264, 270, 276, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288], "matrixcommon": [6, 92, 94, 97], "dyadic": [6, 64, 116, 122, 125, 127, 132, 134, 142, 185, 187, 190, 192, 255, 258, 263], "shorten": 6, "highli": [7, 61, 65, 108, 200, 206, 215, 243], "aspect": [7, 18, 97, 200], "teach": [7, 53, 62, 230], "conduct": 7, "accord": [7, 12, 43, 49, 52, 53, 57, 60, 61, 62, 69, 91, 94, 97, 101, 103, 119, 126, 135, 169, 175, 196, 201, 203, 205, 207, 223, 228, 229, 236, 241, 243, 248, 264], "survei": 7, "commonli": [7, 11, 53, 66, 69, 88, 97, 115, 193, 198, 226, 262], "encount": [7, 12, 16, 22, 61, 88, 97, 167, 198, 203, 206, 228, 229, 243, 255, 283], "problem": [7, 10, 11, 12, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 45, 55, 57, 61, 62, 73, 86, 88, 92, 97, 101, 104, 106, 107, 112, 115, 125, 129, 130, 133, 135, 137, 184, 193, 194, 197, 198, 203, 220, 222, 223, 226, 229, 245, 248, 272, 277, 279, 283], "offer": [7, 42, 43, 52, 61, 102, 115, 142, 184, 194, 200, 205, 245, 263], "bring": [7, 86, 120, 133, 199, 213, 222, 283], "greater": [7, 22, 39, 53, 61, 66, 67, 69, 86, 90, 101, 111, 203, 206, 209, 217, 222, 226, 228, 230, 245, 248, 262, 277], "clariti": [7, 52, 189], "mission": [7, 42, 95], "ca": [7, 33, 62, 69, 88, 209, 210, 248], "dedic": [7, 43, 202, 225, 243, 260, 262], "essenti": [7, 45, 56, 61, 65, 67, 68, 69, 86, 122, 127, 188, 191, 192, 194, 197, 198, 201, 205, 217, 220, 256, 259, 262, 263, 264, 270, 272], "element": [7, 10, 11, 12, 15, 18, 25, 35, 39, 42, 43, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 77, 84, 86, 88, 90, 91, 92, 93, 94, 97, 100, 101, 102, 104, 105, 111, 112, 122, 142, 144, 147, 161, 172, 180, 189, 192, 194, 196, 197, 198, 199, 201, 203, 206, 208, 209, 210, 216, 217, 218, 220, 222, 223, 226, 228, 229, 230, 231, 235, 242, 244, 245, 248, 249, 250, 258, 277, 282, 283, 286, 287], "deviat": [7, 148, 230], "advanc": [7, 15, 17, 20, 37, 52, 61, 65, 66, 97, 98, 135, 140, 192, 196, 199, 200, 202, 204, 205, 212, 219, 226, 241, 242, 243, 248, 272, 276, 278, 280, 284, 285, 286, 287], "docutil": 7, "sourceforg": [7, 42], "net": [7, 42, 77, 204, 226, 230, 248], "ext": [7, 197, 201], "autodoc": 7, "associ": [7, 10, 11, 18, 25, 42, 44, 59, 61, 62, 68, 69, 83, 84, 86, 90, 140, 142, 165, 173, 184, 185, 193, 194, 198, 199, 200, 201, 203, 205, 210, 218, 220, 223, 236, 250], "graphic": [7, 29, 109], "info": [7, 12, 111, 210, 226, 227], "bear": [7, 18], "linkcod": 7, "readthedoc": [7, 89, 249], "subset": [7, 16, 18, 20, 22, 41, 42, 45, 48, 52, 53, 59, 66, 67, 73, 84, 86, 88, 90, 101, 197, 199, 203, 205, 210, 218, 248, 267], "modifi": [7, 11, 12, 42, 43, 52, 61, 67, 69, 101, 103, 138, 147, 196, 203, 205, 206, 207, 210, 222, 228, 229, 230, 241, 244, 245, 248, 249, 276, 281, 283], "sphinx_math_dollar": 7, "delimit": [7, 61, 210], "dollar": [7, 281], "2": [7, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 30, 31, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 100, 101, 103, 104, 107, 109, 111, 112, 113, 114, 115, 116, 117, 119, 120, 122, 124, 127, 128, 129, 130, 132, 133, 134, 136, 137, 138, 140, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 164, 165, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 182, 184, 185, 186, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 235, 236, 237, 239, 241, 242, 243, 244, 245, 248, 249, 251, 255, 257, 258, 259, 260, 261, 262, 264, 265, 276, 277, 279, 281, 282, 283, 286, 287, 288], "sphinxext": 7, "plot_direct": 7, "figur": [7, 61, 62, 71, 72, 74, 76, 77, 88, 105, 125, 170, 193, 194, 195, 196, 207, 210, 265, 287], "devel": [7, 195], "supersed": [7, 125, 142], "pep": [7, 43, 61, 91], "257": [7, 101, 228], "our": [7, 9, 10, 16, 20, 33, 43, 61, 69, 86, 97, 101, 128, 180, 193, 194, 196, 197, 199, 205, 206, 207, 210, 217, 220, 223, 226, 229, 241, 276, 279, 280, 282, 287], "introduct": [7, 10, 17, 52, 53, 66, 69, 201, 203, 204, 206, 210, 223, 226, 229, 263, 270, 280, 286], "four": [7, 27, 43, 53, 61, 65, 69, 91, 94, 101, 107, 112, 126, 135, 140, 148, 185, 196, 197, 203, 206, 210, 218, 223, 226, 228, 230, 231, 255, 257, 260, 272], "locat": [7, 10, 53, 61, 75, 97, 101, 104, 105, 107, 119, 129, 136, 139, 143, 189, 191, 205, 206, 210, 222, 230, 244, 253, 255, 259, 261, 264], "websit": [7, 285], "advertis": 7, "serv": [7, 11, 16, 20, 37, 38, 43, 58, 61, 68, 84, 205, 226, 227, 251, 280], "initi": [7, 11, 18, 28, 37, 52, 56, 61, 62, 63, 66, 69, 77, 79, 80, 83, 84, 85, 86, 89, 101, 103, 105, 107, 109, 111, 116, 120, 122, 124, 125, 127, 129, 134, 137, 138, 139, 142, 143, 147, 155, 164, 186, 187, 190, 194, 195, 203, 205, 206, 210, 216, 220, 222, 226, 228, 229, 235, 243, 250, 251, 255, 257, 258, 259, 260], "obtain": [7, 11, 12, 14, 16, 25, 26, 31, 37, 38, 42, 44, 45, 52, 53, 54, 57, 61, 62, 64, 65, 66, 67, 69, 71, 72, 74, 75, 77, 83, 86, 88, 90, 92, 97, 100, 101, 108, 111, 135, 138, 140, 148, 170, 175, 180, 197, 198, 201, 203, 205, 206, 209, 211, 218, 219, 220, 222, 223, 226, 227, 228, 229, 248, 251, 259, 260], "technic": [7, 10, 13, 20, 32, 42, 61, 142, 161, 197, 226, 243, 248, 262, 279, 282], "place": [7, 8, 10, 11, 12, 18, 20, 26, 32, 42, 53, 54, 61, 62, 67, 77, 93, 97, 100, 101, 103, 111, 142, 143, 204, 205, 210, 211, 217, 219, 222, 226, 245, 248, 275, 276, 283, 287], "site": [7, 101, 244], "upload": [7, 101], "belong": [7, 18, 39, 42, 52, 57, 61, 84, 97, 175, 185, 193, 196, 197, 199, 200, 203, 205, 206, 217, 218, 222, 223, 229, 236], "insid": [7, 10, 11, 12, 20, 52, 53, 58, 61, 71, 72, 77, 104, 115, 117, 129, 139, 174, 175, 180, 190, 194, 206, 210, 218, 220, 223, 228, 229, 230, 232, 234, 245, 282, 283], "spars": [7, 11, 94, 96, 97, 169, 199, 205, 206, 207, 230, 231, 270, 282], "substanti": [7, 102], "edit": [7, 88, 97, 101, 203, 204, 206], "arg": [7, 11, 18, 20, 24, 26, 29, 35, 37, 38, 39, 40, 41, 42, 43, 45, 52, 53, 55, 58, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 74, 76, 77, 78, 83, 86, 88, 91, 92, 93, 94, 95, 97, 99, 101, 103, 111, 144, 150, 153, 155, 158, 159, 160, 161, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 185, 190, 194, 196, 199, 201, 203, 205, 206, 207, 210, 212, 213, 216, 217, 218, 219, 222, 226, 228, 229, 230, 231, 235, 236, 241, 242, 243, 244, 248, 249, 251, 255, 257], "invari": [7, 10, 20, 52, 57, 108, 111, 195, 201, 205, 206, 220, 226], "polici": [7, 8, 10, 244, 246], "5": [7, 12, 14, 18, 20, 22, 24, 26, 28, 31, 35, 37, 38, 39, 41, 43, 44, 45, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 71, 72, 73, 74, 75, 76, 77, 78, 83, 84, 86, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 100, 101, 103, 104, 107, 109, 111, 113, 114, 116, 122, 125, 127, 128, 132, 133, 134, 135, 137, 144, 148, 169, 170, 173, 175, 182, 184, 186, 189, 191, 194, 195, 196, 197, 198, 199, 200, 201, 203, 205, 206, 207, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 222, 223, 225, 226, 227, 228, 229, 230, 231, 235, 236, 241, 242, 248, 249, 255, 258, 260, 262, 264, 265, 276, 277, 279, 282, 283, 286, 287], "center": [7, 10, 16, 41, 52, 60, 61, 71, 75, 77, 78, 88, 97, 116, 119, 122, 125, 127, 132, 134, 136, 140, 142, 148, 193, 196, 205, 210, 218, 265], "resid": 7, "standalon": [7, 142], "restructur": 7, "appli": [7, 10, 11, 19, 20, 27, 31, 35, 36, 37, 38, 39, 43, 52, 53, 54, 59, 60, 61, 62, 63, 64, 67, 68, 71, 76, 77, 79, 88, 91, 92, 93, 97, 101, 103, 104, 105, 107, 111, 112, 116, 117, 127, 130, 137, 139, 141, 152, 156, 159, 160, 164, 167, 168, 172, 175, 185, 194, 196, 198, 200, 201, 203, 205, 206, 207, 209, 210, 211, 212, 216, 217, 218, 219, 222, 226, 227, 228, 229, 230, 231, 234, 241, 244, 248, 255, 257, 260, 283, 286, 287], "surround": [7, 61, 78, 148, 218, 251], "nu": [7, 12, 69, 88, 101, 176, 198, 210, 222, 230, 236, 281], "equat": [7, 11, 12, 14, 16, 21, 24, 41, 43, 57, 60, 61, 63, 67, 69, 71, 74, 75, 79, 83, 84, 85, 86, 89, 92, 97, 104, 107, 111, 113, 115, 119, 120, 121, 124, 125, 127, 128, 129, 130, 132, 134, 135, 136, 141, 142, 143, 144, 148, 184, 189, 190, 193, 194, 195, 196, 197, 203, 204, 205, 208, 209, 210, 216, 220, 222, 225, 226, 227, 235, 255, 260, 261, 265, 277, 278, 281], "strip": [7, 62, 88, 101, 203, 246, 251], "out": [7, 12, 18, 19, 20, 25, 42, 43, 52, 53, 61, 62, 63, 66, 69, 77, 86, 88, 94, 97, 101, 104, 111, 112, 125, 127, 129, 132, 142, 152, 156, 167, 170, 172, 174, 175, 197, 198, 200, 201, 205, 206, 207, 208, 210, 211, 217, 220, 222, 226, 231, 241, 243, 248, 249, 279, 281, 282, 286, 287], "unimport": 7, "bullet": 7, "avoid": [7, 8, 10, 11, 19, 20, 22, 25, 43, 44, 61, 62, 67, 86, 88, 91, 97, 100, 103, 129, 139, 169, 193, 194, 198, 200, 206, 210, 211, 218, 222, 226, 228, 230, 234, 243, 246, 249, 279, 280], "whitespac": [7, 61, 246], "invalid": [7, 12, 31, 61, 62, 103, 127, 200, 203, 218], "dx": [7, 10, 11, 16, 20, 25, 41, 43, 57, 61, 63, 65, 69, 78, 80, 83, 84, 85, 86, 88, 97, 104, 114, 120, 121, 164, 194, 206, 207, 213, 223, 226, 227, 231, 277, 281, 286, 288], "meta": [7, 61, 226, 227], "stackexchang": [7, 71], "5020": 7, "wikibook": [7, 88, 89], "overleaf": 7, "mathematical_express": 7, "verbatim": [7, 210], "_rewrit": 7, "_expand": 7, "difficult": [7, 18, 29, 31, 61, 97, 125, 207, 220, 226, 227, 229, 242, 265, 281, 287], "sentenc": [7, 91], "thumb": [7, 91, 248], "greek": [7, 11, 34, 61, 101, 103, 197, 210], "letter": [7, 11, 12, 34, 54, 61, 62, 101, 175, 210, 248, 277, 279], "\u03b1": [7, 195, 209], "alpha": [7, 12, 52, 61, 69, 88, 90, 147, 151, 154, 172, 189, 193, 194, 195, 201, 203, 205, 206, 209, 210, 222, 226, 230], "logarithm": [7, 12, 35, 41, 43, 61, 62, 67, 86, 88, 97, 101, 201, 203, 207, 210, 220, 222, 229, 230, 278], "italic": 7, "emphasi": [7, 200], "asterisk": 7, "stirl": [7, 53, 66, 248], "fals": [7, 11, 12, 18, 19, 20, 22, 24, 31, 35, 36, 37, 38, 39, 40, 41, 42, 43, 47, 51, 52, 53, 54, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 71, 72, 73, 74, 75, 76, 77, 78, 80, 83, 86, 88, 89, 91, 92, 93, 94, 97, 98, 101, 103, 104, 105, 109, 111, 113, 114, 117, 120, 121, 122, 125, 127, 128, 132, 133, 134, 136, 137, 138, 139, 140, 143, 147, 159, 160, 164, 167, 172, 173, 174, 175, 178, 182, 185, 186, 187, 189, 190, 193, 194, 196, 197, 198, 199, 200, 201, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 217, 218, 219, 222, 223, 225, 226, 227, 228, 229, 230, 235, 236, 239, 241, 242, 243, 244, 248, 249, 251, 255, 258, 279, 282, 283, 286], "permut": [7, 44, 46, 48, 49, 51, 54, 57, 58, 59, 62, 66, 69, 92, 94, 97, 121, 175, 195, 199, 201, 206, 223, 231, 232, 236, 248, 267, 287], "cycl": [7, 10, 43, 49, 52, 53, 59, 61, 64, 66, 92, 101, 149, 218, 248], "partit": [7, 48, 52, 66, 101, 129, 139, 141, 223, 230, 245, 267], "reduc": [7, 12, 19, 23, 30, 36, 38, 40, 44, 57, 61, 62, 64, 66, 67, 69, 76, 77, 86, 88, 97, 101, 111, 112, 139, 157, 175, 197, 199, 200, 201, 203, 204, 205, 206, 207, 211, 216, 218, 219, 220, 222, 223, 225, 226, 227, 228, 229, 230, 248, 283], "ge": [7, 18, 61, 66, 67, 69, 86, 92, 97, 101, 195, 198, 203, 206, 220, 248], "consecut": [7, 43, 52, 57, 60, 62, 66, 77, 222, 228], "group": [7, 42, 47, 48, 53, 54, 57, 58, 59, 61, 64, 66, 90, 91, 101, 154, 163, 164, 175, 195, 196, 197, 205, 206, 222, 226, 228, 229, 236, 248, 267], "pairwis": [7, 39, 42, 61, 66, 78, 97, 101, 223, 228], "ital": [7, 210], "last": [7, 8, 10, 12, 14, 15, 16, 18, 19, 20, 22, 24, 26, 27, 28, 29, 30, 31, 36, 37, 38, 42, 43, 44, 51, 52, 53, 57, 60, 61, 62, 65, 71, 88, 91, 92, 93, 94, 95, 97, 99, 100, 101, 103, 111, 124, 147, 180, 195, 196, 197, 198, 200, 201, 203, 206, 209, 210, 217, 218, 223, 226, 228, 229, 230, 231, 236, 239, 241, 242, 243, 244, 246, 248, 249, 251, 277, 279, 282, 283], "talk": [7, 13, 32, 62, 197, 205, 259], "handl": [7, 16, 18, 19, 20, 41, 49, 53, 61, 67, 88, 89, 91, 96, 101, 102, 103, 104, 112, 115, 125, 139, 155, 158, 164, 165, 170, 200, 206, 207, 216, 222, 226, 228, 231, 234, 242, 248, 249, 251, 282, 287], "referenc": [7, 8, 45, 50, 101, 124, 127, 172, 205], "overlin": [7, 18, 69], "normal": [7, 10, 12, 18, 19, 20, 31, 35, 39, 43, 52, 60, 61, 65, 67, 71, 74, 75, 76, 88, 89, 91, 95, 96, 97, 101, 103, 113, 115, 119, 125, 127, 133, 142, 148, 159, 169, 172, 173, 174, 175, 176, 180, 183, 185, 194, 197, 199, 200, 201, 203, 205, 206, 210, 211, 213, 218, 219, 223, 226, 230, 235, 241, 246, 248, 255, 270], "assign": [7, 18, 29, 42, 43, 44, 57, 61, 66, 77, 88, 90, 91, 97, 103, 120, 125, 132, 142, 180, 191, 194, 196, 198, 203, 210, 228, 229, 236, 243, 259, 262, 279], "structur": [7, 10, 11, 15, 18, 20, 40, 42, 43, 49, 52, 53, 59, 61, 86, 88, 91, 92, 97, 104, 105, 107, 124, 173, 175, 196, 197, 200, 203, 205, 206, 207, 222, 226, 228, 229, 230, 234, 235, 243, 245, 248, 249, 279, 287], "suggest": [7, 10, 27, 44, 52, 88, 97, 101, 125, 208, 283], "american": [7, 47, 62], "color": [7, 89, 109, 190, 210, 241, 248, 286], "colour": 7, "quotat": 7, "line_color": [7, 196, 213], "aesthet": [7, 11, 196], "ariti": [7, 196], "term": [7, 10, 11, 12, 16, 18, 20, 22, 25, 27, 29, 31, 43, 52, 61, 62, 63, 65, 66, 67, 69, 80, 84, 85, 86, 88, 91, 92, 97, 101, 105, 109, 111, 117, 120, 127, 129, 132, 135, 137, 139, 140, 154, 159, 171, 172, 175, 177, 180, 185, 187, 191, 193, 195, 197, 198, 199, 200, 201, 203, 205, 206, 207, 210, 212, 213, 215, 216, 218, 219, 220, 222, 223, 226, 227, 228, 229, 230, 234, 235, 248, 255, 258, 262, 267, 277, 279, 281, 282, 287], "unrestrict": [7, 50, 248], "necklac": [7, 248], "bracelet": [7, 248], "impli": [7, 11, 12, 18, 35, 39, 43, 52, 91, 107, 175, 196, 201, 203, 210, 218, 220, 226, 228, 231, 234, 235, 248, 262], "turn": [7, 10, 11, 18, 31, 43, 61, 67, 69, 76, 86, 95, 119, 133, 137, 191, 197, 205, 207, 210, 217, 218, 220, 222, 223, 226, 241, 248, 264, 279, 281], "sequenc": [7, 12, 41, 43, 45, 48, 51, 52, 53, 57, 59, 60, 61, 62, 64, 66, 69, 71, 74, 75, 76, 77, 78, 85, 91, 92, 94, 97, 100, 101, 142, 148, 174, 175, 201, 204, 210, 212, 214, 217, 219, 220, 222, 223, 226, 227, 229, 236, 239, 242, 243, 248, 250, 251, 267], "revers": [7, 45, 50, 53, 60, 61, 62, 67, 88, 89, 91, 97, 101, 111, 174, 185, 190, 197, 199, 203, 206, 207, 210, 211, 218, 222, 226, 248, 287], "ambigu": [7, 10, 12, 14, 61, 163, 169, 222, 234, 239], "person": [7, 11], "chebyshev": [7, 41, 61, 88, 203, 206], "pafnuti": 7, "lvovich": 7, "tchebychev": 7, "whose": [7, 10, 11, 18, 20, 22, 42, 44, 45, 50, 53, 60, 61, 62, 67, 71, 75, 77, 78, 84, 88, 91, 97, 101, 122, 137, 147, 170, 180, 186, 187, 191, 194, 198, 199, 201, 205, 206, 217, 218, 222, 226, 227, 228, 230, 236, 241, 245, 248, 249, 255, 258, 260, 262], "transliter": 7, "russian": 7, "chebyshevt": [7, 69, 210], "orthogonalpolynomi": 7, "t_n": [7, 66, 69, 88, 203, 206, 260], "tens": 7, "inclus": [7, 60, 107, 168, 197, 216, 217, 218, 229], "pronoun": 7, "gender": 7, "neutral": 7, "he": [7, 66, 86, 203], "she": [7, 229], "extran": [7, 226], "belittl": 7, "obvious": [7, 44, 52, 178, 193, 200, 220], "easili": [7, 10, 18, 20, 29, 33, 61, 62, 84, 86, 97, 101, 102, 119, 137, 173, 193, 206, 209, 210, 215, 222, 223, 226, 228, 229, 242, 281], "straightforward": [7, 20, 52, 62, 97, 220], "unwelcom": 7, "judgement": 7, "phrase": [7, 11, 62], "friendli": [7, 43, 86, 223, 225, 226, 228, 229, 243, 288], "mistak": [7, 12, 25, 52, 249], "goe": [8, 20, 32, 97, 217, 220, 229, 279, 282], "content": [8, 13, 43, 61, 62, 96, 198, 201, 203, 206, 209, 210, 238, 243, 246, 247, 267, 268, 269, 270, 271, 272, 273, 274, 278, 280], "setup": [8, 10, 43, 61, 128, 129, 130, 144, 185, 203, 206, 208, 209, 220, 241, 242, 244, 254, 286], "depend": [8, 10, 11, 12, 14, 18, 20, 22, 27, 28, 29, 33, 41, 43, 44, 52, 53, 60, 61, 62, 63, 66, 67, 69, 73, 78, 85, 86, 88, 89, 90, 97, 101, 102, 103, 109, 113, 116, 120, 121, 124, 125, 127, 129, 135, 137, 147, 148, 149, 164, 173, 175, 177, 180, 190, 191, 196, 198, 201, 203, 205, 206, 207, 209, 210, 211, 216, 220, 222, 223, 226, 227, 228, 229, 230, 241, 242, 243, 244, 248, 249, 262, 264, 265, 279, 281], "document": [8, 10, 11, 17, 20, 23, 37, 38, 39, 52, 57, 61, 62, 67, 68, 69, 73, 83, 86, 87, 89, 94, 97, 102, 105, 115, 120, 135, 137, 138, 140, 142, 150, 164, 170, 184, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 203, 206, 210, 220, 224, 226, 228, 229, 239, 241, 243, 244, 246, 248, 255, 262, 263, 266, 277, 279, 280, 286, 287], "auto": [8, 10, 12, 25, 41, 61, 62, 89, 196, 203, 206, 210, 222, 226, 230], "rebuild": [8, 11, 20, 61, 206, 282], "live": [8, 34, 44, 142, 205, 223], "server": 8, "debug": [8, 43, 61, 88, 127, 164, 241, 242, 251], "incompat": [8, 24], "pick": [9, 18, 62, 66, 139, 169, 171, 287], "ignor": [10, 12, 14, 20, 43, 52, 61, 62, 66, 67, 71, 76, 86, 91, 97, 101, 111, 117, 127, 172, 175, 185, 196, 206, 210, 211, 222, 228, 229, 242, 287], "regex": 10, "categori": [10, 197, 266, 273], "lead": [10, 11, 18, 19, 20, 22, 31, 60, 61, 67, 71, 88, 91, 97, 101, 113, 121, 159, 185, 194, 198, 201, 203, 205, 206, 207, 210, 217, 219, 222, 226, 229, 243, 246, 251, 280, 287], "against": [10, 18, 20, 31, 62, 104, 125, 242], "unrel": [10, 27, 61, 68, 198, 279], "capabl": [10, 11, 18, 28, 41, 43, 61, 65, 73, 86, 101, 104, 105, 135, 142, 196, 207, 210, 229, 280, 281, 287, 288], "w": [10, 12, 31, 43, 45, 51, 60, 61, 62, 63, 64, 67, 69, 86, 88, 91, 97, 98, 119, 122, 133, 140, 141, 144, 149, 160, 164, 173, 189, 191, 192, 195, 196, 198, 199, 203, 204, 205, 206, 207, 211, 217, 218, 220, 222, 223, 226, 227, 229, 230, 241, 249, 251, 262, 288], "pythonwarn": 10, "NOT": [10, 91, 111, 155, 159, 174, 177, 239, 242], "blog": [10, 20, 43, 66, 92, 223, 229], "post": [10, 18, 22, 24, 25, 26, 27, 28, 29, 30, 31, 43, 55, 61, 210, 211, 222, 241, 282], "ned": 10, "batcheld": 10, "kanesmethod": [10, 119, 120, 125, 127, 128, 129, 130, 132, 133, 136, 137, 139, 142], "pinjoint": [10, 119, 128, 130, 136], "prismaticjoint": [10, 119, 130, 136], "q_": [10, 61, 119, 190, 223, 226], "u_": [10, 97, 119], "had": [10, 20, 26, 27, 53, 61, 62, 97, 101, 125, 139, 205, 206, 207, 210, 218, 220, 226, 228, 229, 244, 249, 276, 279, 282, 283], "templat": [10, 248], "axi": [10, 29, 35, 54, 66, 67, 71, 72, 74, 75, 77, 83, 86, 88, 94, 97, 104, 109, 114, 119, 125, 127, 129, 132, 133, 134, 136, 139, 142, 143, 144, 147, 148, 172, 185, 187, 189, 191, 193, 194, 196, 201, 229, 255, 257, 260, 262, 265], "parent_axi": [10, 119], "child_axi": [10, 119], "parent": [10, 52, 61, 84, 119, 136, 185, 189, 196, 200, 201, 205, 241, 245, 255, 259, 260], "child": [10, 11, 119, 136, 185, 200, 245], "bodi": [10, 12, 43, 86, 103, 114, 115, 118, 119, 120, 122, 124, 125, 127, 128, 129, 130, 132, 135, 136, 137, 142, 143, 178, 184, 185, 189, 193, 194, 255, 257, 272], "parent_interfram": [10, 119, 136], "child_interfram": [10, 119, 136], "rotat": [10, 35, 49, 52, 54, 61, 70, 71, 72, 74, 76, 77, 92, 97, 104, 105, 119, 127, 130, 132, 134, 136, 140, 143, 159, 172, 185, 189, 191, 193, 194, 195, 196, 248, 255, 257, 260, 262, 264], "joint_axi": [10, 119, 128, 130, 136], "transform": [10, 11, 31, 35, 40, 43, 57, 60, 61, 62, 63, 65, 66, 69, 76, 94, 97, 109, 111, 119, 127, 136, 147, 168, 170, 172, 177, 195, 198, 201, 203, 205, 206, 212, 217, 218, 219, 222, 223, 225, 226, 227, 228, 229, 230, 235, 243, 249, 255, 262, 281], "suppos": [10, 19, 20, 53, 60, 61, 62, 86, 197, 199, 203, 205, 206, 210, 217, 220, 226, 228, 239, 248, 260, 265, 279, 281, 287], "pin": [10, 35, 104, 105, 107, 119], "dcm": [10, 116, 119, 125, 127, 142, 185, 193, 194, 255], "q_pin": 10, "inspect": [10, 18, 97, 205, 216, 247, 249, 274], "notic": [10, 12, 20, 52, 53, 59, 61, 97, 163, 184, 200, 220, 236, 237, 248, 249, 279, 281, 282, 287], "theta_pin": 10, "rad": [10, 62, 109, 125, 205], "int_fram": 10, "orient_axi": [10, 116, 119, 185, 187], "align": [10, 43, 71, 97, 119, 194, 195, 210, 228, 241], "orient": [10, 35, 73, 77, 92, 119, 125, 127, 129, 132, 136, 140, 142, 185, 189, 191, 193, 194, 203, 248, 255, 256, 263, 264, 270], "parent_joint_po": [10, 119], "child_joint_po": [10, 119], "parent_point": [10, 119, 128, 130, 136], "child_point": [10, 119, 128, 130, 136], "mass": [10, 78, 113, 114, 115, 116, 118, 119, 120, 124, 125, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 142, 143, 151, 176, 178, 179, 180, 191, 193, 241, 264, 272], "pos_from": [10, 119, 125, 127, 128, 129, 136, 142, 189, 193], "masscent": [10, 116, 119, 122, 128, 136, 140, 142], "parent_fram": [10, 136], "child_fram": [10, 136], "locatenew": [10, 116, 122, 127, 129, 132, 133, 134, 139, 140, 142, 143, 186, 189, 191, 193], "pars": [10, 53, 61, 94, 125, 136, 207, 209, 266, 274], "comprehens": [10, 18, 26, 27, 29, 204, 218, 230, 276], "additional_transl": 10, "recogn": [10, 12, 22, 27, 29, 61, 62, 66, 76, 101, 104, 112, 198, 201, 209, 218, 219, 228, 235, 279], "logic": [10, 11, 18, 20, 36, 37, 38, 39, 42, 61, 63, 86, 88, 101, 167, 169, 170, 174, 210, 212, 218, 226, 230, 248, 279, 280, 281, 283], "node": [10, 11, 41, 55, 61, 88, 103, 107, 117, 151, 176, 185, 195, 200, 210, 217, 229, 234, 245, 282, 286], "maximum": [10, 12, 26, 27, 41, 43, 44, 52, 53, 61, 67, 88, 97, 101, 104, 127, 172, 180, 196, 201, 203, 206, 210, 217, 218, 222, 223, 226, 229, 230, 245, 248], "multipli": [10, 12, 27, 35, 39, 43, 52, 61, 72, 76, 83, 90, 92, 97, 101, 120, 129, 138, 139, 140, 152, 161, 175, 180, 181, 197, 198, 199, 201, 203, 205, 206, 210, 212, 219, 220, 223, 226, 231, 248, 259, 279, 282], "max": [10, 43, 52, 53, 61, 67, 69, 71, 88, 97, 101, 103, 104, 195, 196, 205, 206, 210, 217, 219, 220, 249], "min": [10, 53, 57, 61, 66, 67, 97, 103, 195, 196, 205, 210, 216, 226], "is_perfect_squar": 10, "ntheori": [10, 39, 52, 61, 62, 203, 206, 223, 248], "primetest": [10, 61, 101], "is_squar": [10, 61, 92, 101], "is_prim": [10, 18, 61, 197], "isprim": [10, 39, 62, 101], "divid": [10, 11, 52, 60, 61, 62, 77, 97, 101, 179, 180, 198, 200, 201, 203, 205, 206, 210, 226, 245, 282], "bottom_up": [10, 61], "interactive_travers": 10, "postorder_travers": [10, 61, 282], "preorder_travers": [10, 61, 282], "refactor": [10, 226, 234, 245], "tr": [10, 44, 52, 210, 219], "quantum": [10, 113, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 195, 272], "ever": [10, 11, 20, 67, 194, 197, 206, 220, 226, 243, 246, 282], "helper": [10, 25, 41, 43, 52, 56, 59, 61, 86, 89, 90, 160, 162, 171, 207, 217, 220, 223, 226, 227, 229, 242, 272], "default_sort_kei": [10, 42, 50, 61, 234], "matrixel": [10, 43], "matrixsymbol": [10, 15, 18, 27, 39, 40, 43, 61, 92, 94, 97, 210, 230, 232], "layer": [10, 111, 203, 249], "imprecis": 10, "free_symbol": [10, 11, 25, 43, 61, 70, 88, 92, 164, 182, 185, 206, 216, 223], "sinc": [10, 11, 12, 14, 15, 16, 18, 19, 20, 36, 41, 43, 44, 52, 53, 54, 57, 58, 59, 61, 62, 64, 66, 67, 69, 70, 71, 73, 74, 77, 79, 85, 86, 88, 90, 91, 92, 97, 101, 114, 119, 127, 140, 142, 151, 175, 176, 180, 184, 191, 194, 197, 198, 200, 201, 203, 205, 206, 210, 213, 218, 219, 220, 222, 223, 226, 228, 229, 230, 236, 240, 244, 245, 246, 248, 249, 253, 259, 261, 262, 264, 276, 281, 283, 286, 287, 288], "atomicexpr": [10, 61], "concept": [10, 11, 18, 52, 127, 194, 200, 202, 205, 210, 229, 234, 264, 280, 285], "misappli": 10, "noth": [10, 22, 42, 52, 61, 74, 88, 159, 175, 197, 201, 209, 210, 222, 226, 228, 239, 241, 249, 251, 279], "introduc": [10, 19, 25, 57, 60, 61, 69, 86, 97, 102, 105, 125, 127, 132, 133, 134, 138, 175, 180, 194, 201, 202, 206, 207, 210, 217, 220, 223, 230, 246, 273, 280, 283, 285, 287], "21494": 10, "size": [10, 16, 27, 43, 44, 45, 50, 52, 53, 54, 55, 56, 57, 61, 62, 64, 66, 89, 92, 94, 97, 100, 101, 109, 127, 137, 138, 139, 148, 170, 171, 190, 196, 199, 203, 210, 222, 223, 226, 230, 248, 277], "die": [10, 205, 230], "histor": [10, 11, 14, 20, 62, 226, 230], "21563": 10, "revert": [10, 201, 206], "sample_it": [10, 230], "consequ": [10, 20, 39, 61, 198, 200, 279, 287], "subclass": [10, 11, 18, 20, 37, 38, 43, 61, 68, 72, 74, 88, 91, 144, 150, 159, 163, 164, 165, 170, 172, 173, 196, 197, 199, 200, 201, 205, 206, 210, 230, 241, 242, 243, 246, 249, 255, 259, 282], "kei": [10, 11, 12, 14, 22, 24, 36, 39, 42, 50, 52, 53, 61, 62, 63, 66, 77, 90, 92, 97, 100, 101, 104, 124, 125, 167, 170, 175, 194, 196, 198, 200, 201, 202, 203, 205, 206, 207, 208, 210, 222, 226, 227, 228, 230, 234, 245, 248, 249, 251, 283, 284, 287], "domainmatrix": [10, 27, 93, 97, 202, 205, 208, 273], "switch": [10, 52, 59, 88, 101, 111, 203, 206], "21402": 10, "earlier": [10, 115, 207, 211, 220, 222, 249, 260, 262, 282], "could": [10, 11, 12, 16, 18, 20, 26, 28, 30, 38, 43, 54, 61, 73, 86, 88, 91, 119, 122, 125, 135, 139, 175, 178, 180, 197, 200, 203, 205, 207, 210, 218, 220, 222, 226, 227, 228, 229, 230, 231, 234, 235, 242, 246, 260, 261, 279, 282, 287], "traceback": [10, 12, 15, 18, 19, 20, 22, 24, 26, 27, 28, 29, 30, 31, 36, 37, 38, 43, 44, 53, 61, 62, 65, 71, 88, 91, 92, 93, 94, 95, 97, 99, 100, 103, 111, 195, 197, 200, 201, 203, 206, 209, 217, 218, 226, 228, 229, 239, 241, 242, 244, 246, 248, 249, 251, 279, 283], "typeerror": [10, 12, 19, 20, 26, 29, 36, 37, 38, 53, 61, 71, 76, 91, 93, 95, 99, 111, 149, 217, 218, 242, 249], "unsupport": [10, 12, 15, 111, 210], "operand": [10, 12, 53, 61, 186, 205, 258], "dict": [10, 12, 14, 18, 22, 25, 26, 30, 31, 43, 53, 61, 62, 63, 77, 78, 91, 92, 97, 101, 103, 120, 121, 155, 167, 170, 181, 183, 185, 196, 199, 200, 201, 203, 205, 206, 207, 208, 210, 222, 223, 226, 227, 228, 229, 230, 234, 241, 242, 248, 255, 288], "solve_lin_si": [10, 208], "heurisch": [10, 88], "smith_normal_form": [10, 98, 199], "newmatrix": 10, "holonom": [10, 82, 85, 126, 127, 128, 129, 135, 137, 138, 266, 272, 273], "polymatrix": 10, "risch": [10, 88, 277], "broken": [10, 50, 61, 193, 210, 226, 251], "20780": 10, "20759": 10, "20621": 10, "19882": 10, "18844": 10, "21441": 10, "21427": 10, "21496": 10, "potenti": [10, 18, 73, 94, 97, 101, 120, 121, 122, 124, 134, 135, 186, 192, 200, 205, 210, 217, 220, 222, 226, 244, 245, 258, 264, 272], "impact": 10, "downstream": [10, 18], "goal": [10, 11, 42, 115, 143, 205, 207, 241, 242, 244, 280, 281], "perhap": [10, 14, 43, 61, 91, 101, 160, 200, 228, 243, 276], "tableform": [10, 228, 251], "isn": [10, 20, 29, 88, 115, 125, 229, 281], "advis": [10, 18, 31, 42, 119, 125], "usecas": 10, "unclear": [10, 18, 115], "line2dbaseseri": [10, 196], "linecollect": [10, 196], "bokeh": 10, "plotli": 10, "mayavi": 10, "k3d": 10, "matplotlibbackend": [10, 196], "get_point": [10, 196], "uniformli": [10, 16, 52, 77, 78, 104, 109, 196, 244], "adapt": [10, 109, 196, 216, 228, 248, 254], "get_data": [10, 196, 252], "dft": [10, 64, 114], "fourier": [10, 61, 69, 88, 114, 168, 214, 267], "as_explicit": [10, 27, 94, 97, 114, 232], "exp": [10, 11, 12, 14, 18, 20, 28, 29, 31, 35, 41, 43, 51, 60, 61, 63, 65, 66, 67, 69, 79, 80, 83, 86, 88, 92, 94, 97, 101, 113, 151, 154, 170, 176, 195, 200, 201, 206, 207, 210, 212, 217, 220, 222, 226, 227, 228, 229, 230, 231, 248, 265, 277, 281, 283, 288], "discret": [10, 41, 43, 44, 51, 53, 61, 62, 69, 101, 175, 180, 212, 215, 226, 228, 229, 267, 276], "unevalu": [10, 11, 18, 19, 20, 37, 38, 41, 53, 60, 61, 67, 69, 78, 88, 101, 111, 152, 156, 163, 164, 175, 206, 209, 217, 218, 222, 226, 228, 229, 230, 277, 281, 282, 288], "represent": [10, 11, 20, 22, 26, 35, 42, 43, 44, 52, 55, 61, 62, 67, 69, 73, 81, 83, 85, 86, 88, 90, 91, 92, 93, 94, 100, 101, 108, 109, 114, 115, 116, 124, 135, 139, 140, 144, 159, 164, 169, 170, 172, 173, 175, 177, 184, 190, 191, 193, 196, 197, 199, 201, 203, 205, 206, 207, 208, 209, 210, 212, 220, 222, 223, 226, 229, 230, 235, 236, 251, 255, 258, 265, 273, 277, 279, 282], "21626": 10, "expos": [10, 42, 230], "mutat": [10, 111, 199, 201, 230], "flat": [10, 75, 92, 242], "todok": [10, 92], "ey": [10, 27, 92, 93, 94, 95, 96, 97, 99, 199, 205, 231, 251, 283], "converg": [10, 43, 60, 65, 69, 88, 101, 144, 206, 213, 217, 220, 277], "legacy_matrix": [10, 88], "discontinu": [10, 41, 65, 67, 88, 104, 213, 228], "theano_cod": 10, "aesara_cod": [10, 210], "theanoprint": 10, "aesaraprint": [10, 210], "predic": [10, 11, 36, 37, 41, 103, 206, 222, 248, 267], "experienc": [10, 44], "big": [10, 12, 16, 18, 45, 61, 63, 101, 142, 155, 195, 209, 210, 217, 251, 277, 279], "registr": 10, "add_handl": 10, "remove_handl": [10, 36], "multipledispatch": [10, 36], "regist": [10, 36, 37, 38, 62, 171], "register_mani": [10, 37, 38], "askprimehandl": 10, "staticmethod": [10, 241], "register_handl": [10, 36], "prime": [10, 18, 29, 36, 37, 38, 39, 52, 59, 60, 61, 62, 64, 66, 69, 101, 146, 197, 198, 200, 201, 203, 206, 220, 222, 223, 230, 245], "Not": [10, 11, 19, 20, 27, 61, 66, 91, 111, 210, 229, 230, 248, 281, 288], "primepred": [10, 39], "q": [10, 11, 12, 15, 18, 23, 25, 34, 35, 36, 37, 38, 39, 40, 43, 53, 57, 60, 61, 62, 69, 78, 83, 84, 86, 88, 90, 92, 97, 103, 104, 111, 112, 119, 120, 121, 124, 125, 127, 129, 134, 136, 137, 138, 139, 142, 143, 144, 155, 169, 175, 178, 185, 186, 187, 189, 190, 191, 193, 196, 197, 198, 200, 201, 203, 205, 206, 207, 209, 210, 212, 220, 223, 226, 228, 230, 235, 236, 251, 255, 258, 259, 261, 264, 283, 287], "20209": 10, "stochast": 10, "timestamp": 10, "wienerprocess": [10, 230], "normaldistribut": [10, 230], "20078": 10, "misspel": 10, "absorbing_prob": [10, 230], "absorb": [10, 11, 86, 226, 230, 277], "probabilit": 10, "shutil": 10, "power": [10, 12, 24, 29, 35, 40, 43, 51, 52, 53, 62, 64, 65, 67, 83, 84, 86, 88, 90, 92, 94, 101, 102, 111, 125, 142, 147, 158, 161, 174, 177, 180, 181, 185, 197, 198, 200, 201, 202, 203, 205, 206, 207, 209, 210, 211, 214, 217, 219, 222, 223, 226, 228, 229, 230, 234, 243, 248, 267, 276, 277, 278, 279, 280, 282, 283, 286], "immut": [10, 11, 61, 93, 96, 99, 194, 201, 226, 231, 270, 276, 283], "coordsystem": [10, 63], "explicit": [10, 11, 18, 20, 22, 25, 26, 53, 60, 61, 65, 77, 78, 88, 100, 101, 120, 124, 125, 129, 139, 143, 194, 197, 206, 209, 210, 212, 218, 220, 226, 227, 228, 229, 245], "patch": [10, 63, 210], "real": [10, 11, 12, 15, 16, 18, 19, 20, 22, 25, 26, 35, 37, 39, 40, 41, 43, 53, 61, 62, 63, 65, 66, 67, 68, 69, 73, 77, 78, 83, 86, 88, 91, 92, 94, 97, 101, 103, 107, 113, 125, 142, 144, 147, 148, 155, 173, 187, 195, 198, 201, 205, 206, 207, 210, 211, 213, 217, 218, 220, 222, 225, 226, 228, 229, 230, 235, 239, 243, 252, 281, 287, 288], "manifold": [10, 63], "track": [10, 12, 52, 61, 65, 69, 124, 136, 140, 159, 194, 217, 236, 277], "coord_system": 10, "connect_to": 10, "coord_tuple_transform_to": [10, 63], "constructor": [10, 11, 20, 37, 38, 42, 43, 48, 52, 53, 54, 61, 68, 69, 90, 95, 97, 129, 168, 169, 173, 177, 196, 197, 199, 200, 201, 210, 218, 226, 235, 243, 259, 267, 278, 282], "str": [10, 11, 20, 37, 42, 43, 44, 53, 61, 62, 63, 65, 70, 71, 74, 77, 78, 89, 91, 94, 101, 103, 109, 119, 120, 122, 142, 159, 169, 175, 185, 187, 189, 196, 201, 205, 210, 222, 226, 230, 246, 248, 249, 251, 255], "unord": [10, 12, 61, 101, 201, 229, 248, 249], "lambidfi": 10, "guess": [10, 14, 42, 62, 65, 86, 89, 190, 203, 206, 220, 223, 282], "construct": [10, 16, 24, 37, 38, 42, 43, 61, 63, 67, 69, 71, 75, 77, 89, 94, 97, 102, 105, 115, 116, 120, 122, 125, 127, 160, 164, 173, 174, 177, 181, 197, 200, 201, 203, 205, 206, 210, 223, 228, 230, 231, 235, 243, 245, 246, 259, 261, 262, 279, 282, 283, 287], "superclass": [10, 11, 18, 60, 61, 88, 94, 201], "scalar": [10, 28, 35, 61, 63, 76, 90, 92, 94, 97, 102, 122, 125, 174, 185, 186, 187, 192, 194, 197, 199, 203, 210, 226, 231, 243, 249, 255, 257, 258, 259, 260, 261, 263, 265, 270, 272], "boolean": [10, 11, 20, 21, 24, 29, 36, 37, 38, 39, 40, 41, 43, 61, 67, 71, 75, 76, 77, 78, 89, 92, 97, 98, 101, 104, 109, 111, 120, 160, 185, 187, 190, 196, 199, 201, 203, 205, 207, 210, 222, 226, 228, 230, 248, 258, 283], "sens": [10, 11, 16, 18, 20, 35, 39, 41, 42, 61, 63, 66, 69, 86, 91, 120, 127, 180, 185, 194, 197, 203, 205, 219, 220, 222, 229, 230, 242, 243, 248, 264, 287], "exponenti": [10, 12, 18, 29, 35, 43, 52, 57, 61, 62, 66, 88, 91, 92, 97, 101, 103, 161, 177, 207, 222, 226, 229, 230, 278, 279, 283], "trick": [10, 11, 12, 57, 220, 236], "treat": [10, 11, 18, 19, 20, 25, 29, 30, 51, 52, 59, 61, 66, 69, 76, 77, 97, 103, 122, 125, 148, 185, 191, 198, 200, 201, 203, 205, 206, 207, 209, 210, 217, 218, 220, 222, 223, 226, 228, 234, 242, 245, 262, 279, 283], "cdot": [10, 18, 44, 60, 66, 69, 79, 83, 84, 86, 92, 94, 97, 101, 112, 114, 140, 180, 191, 193, 194, 195, 197, 198, 206, 213, 217, 220, 226, 228, 231, 232, 261, 262, 281, 282, 287], "attributeerror": [10, 18, 61, 97, 229, 249, 283], "as_coeff_mul": [10, 61, 86, 94], "tri": [10, 11, 12, 18, 24, 26, 29, 42, 61, 69, 77, 86, 88, 127, 139, 170, 197, 198, 205, 210, 212, 222, 226, 227, 229, 241, 279, 287], "benchmark": [10, 127, 141], "runtest": [10, 241], "tmpfile": 10, "random_complex_numb": [10, 61], "verify_numer": [10, 61], "test_derivative_numer": [10, 61], "_randrang": [10, 61, 62], "_randint": [10, 61, 203], "as_poli": [10, 61, 198, 206], "as_expr": [10, 61, 97, 200, 205, 206, 207, 283], "combintor": 10, "perm_cycl": [10, 53, 210], "printer": [10, 11, 20, 53, 61, 69, 89, 97, 102, 190, 235, 242, 243, 249, 278, 282], "init_print": [10, 22, 27, 33, 43, 53, 65, 88, 89, 97, 105, 190, 197, 198, 209, 277, 281, 283, 286, 287, 288], "problemat": [10, 20, 200], "affect": [10, 18, 20, 60, 61, 97, 184, 206, 228, 229, 260], "18056": 10, "15416": 10, "100x": 10, "slowdown": [10, 65], "significantli": [10, 27, 43, 65, 115, 137, 201, 212, 242, 245], "slower": [10, 20, 22, 27, 57, 97, 200, 205, 249, 276], "_sympifi": [10, 61, 94, 282], "strict": [10, 11, 22, 52, 53, 61, 65, 66, 92, 97, 203, 206, 228, 229, 248, 251, 287], "lot": [10, 52, 61, 79, 86, 88, 97, 125, 142, 196, 209, 213, 223, 229, 241, 287], "secur": 10, "whatev": [10, 12, 20, 52, 61, 62, 222, 226, 227, 229, 249], "__repr__": [10, 210], "12524": 10, "repr": [10, 43, 88, 169, 200, 205, 210, 241, 286], "plenti": 10, "_sympy_": [10, 61], "disabl": [10, 11, 29, 61, 62, 86, 88, 101, 203, 206, 210, 218, 226, 228, 239, 241, 244, 248], "constant": [10, 11, 22, 24, 25, 27, 30, 41, 43, 60, 61, 65, 67, 69, 85, 86, 88, 104, 105, 111, 124, 125, 127, 142, 143, 152, 156, 162, 178, 179, 181, 182, 183, 186, 189, 191, 196, 198, 201, 203, 205, 206, 207, 210, 212, 217, 220, 222, 223, 226, 227, 228, 229, 230, 241, 243, 248, 249, 258, 262, 265, 272, 277, 283, 288], "lh": [10, 14, 24, 29, 43, 51, 61, 208, 210, 226, 228, 229, 261], "tensexpr": [10, 112, 236], "substitute_indic": 10, "danger": [10, 198], "tensor_head": [10, 112, 236], "shorter": [10, 31, 61, 71, 115, 137, 184, 197, 201, 210, 243, 251], "creation": [10, 12, 20, 61, 63, 97, 116, 122, 132, 135, 136, 137, 138, 139, 149, 159, 163, 164, 165, 175, 193, 194, 210, 230, 235, 243, 249], "_dummy_fmt": 10, "l_": [10, 88, 97, 195], "obsolet": 10, "dummy_nam": [10, 236], "clearer": [10, 259], "metric_symmetri": [10, 236], "set_metr": [10, 236], "delta": [10, 12, 43, 45, 55, 66, 84, 86, 90, 109, 139, 147, 175, 195, 210, 217, 223, 226, 230, 231, 236], "epsilon": [10, 12, 60, 62, 69, 86, 88, 146, 210, 236], "latter": [10, 15, 20, 43, 52, 61, 66, 69, 86, 101, 197, 201, 205, 210, 220, 223, 236, 243, 248, 249, 279], "involv": [10, 12, 16, 18, 22, 24, 26, 38, 40, 52, 60, 61, 62, 66, 73, 74, 86, 88, 101, 111, 116, 120, 125, 154, 164, 170, 172, 182, 193, 194, 197, 198, 201, 203, 205, 206, 207, 211, 212, 217, 218, 219, 220, 222, 223, 226, 228, 231, 249, 287], "obscur": [10, 18], "young": [10, 104, 236], "tableau": 10, "favor": 10, "tensorindex": [10, 236], "tensor_indic": [10, 112, 236], "denot": [10, 11, 12, 16, 52, 53, 61, 63, 69, 83, 84, 86, 88, 90, 91, 92, 97, 101, 103, 111, 180, 185, 191, 196, 197, 198, 203, 205, 213, 217, 218, 220, 226, 230, 235, 236, 255, 257, 259, 260, 262, 264], "set_dimens": 10, "unit_system": [10, 182], "set_quantity_dimens": [10, 178], "set_global_dimens": 10, "set_scale_factor": 10, "set_quantity_scale_factor": [10, 178], "set_global_relative_scale_factor": [10, 182], "get_dimensional_expr": 10, "unitsystem": [10, 183], "dimension": [10, 27, 41, 43, 45, 63, 73, 74, 75, 76, 77, 94, 97, 105, 112, 142, 149, 151, 161, 177, 191, 192, 196, 197, 203, 205, 206, 209, 210, 228, 229, 231, 232, 236, 242, 264, 288], "_collect_factor_and_dimens": 10, "motiv": [10, 13, 20, 32, 206], "emptyset": [10, 18, 26, 41, 42, 91, 210, 218, 229, 255, 288], "is_empti": [10, 18, 53], "unknown": [10, 11, 15, 18, 19, 20, 27, 29, 30, 35, 61, 62, 105, 160, 208, 225, 226, 227, 228, 229, 248, 288], "empti": [10, 11, 18, 22, 25, 26, 30, 37, 41, 42, 43, 44, 52, 56, 60, 61, 73, 76, 77, 78, 91, 92, 97, 101, 120, 139, 170, 183, 201, 205, 206, 210, 216, 217, 218, 220, 226, 228, 229, 241, 243, 248, 251, 282], "individu": [10, 18, 20, 24, 27, 61, 67, 72, 77, 78, 90, 92, 94, 97, 111, 140, 147, 165, 169, 195, 218, 226, 241, 283], "denest": [10, 61, 206, 222, 228, 248], "particl": [10, 116, 118, 119, 120, 125, 129, 130, 135, 137, 139, 142, 143, 151, 154, 161, 162, 173, 175, 178, 180, 193, 236, 272], "rigidbodi": [10, 116, 118, 120, 124, 127, 132, 133, 134, 135, 140, 142, 272], "potential_energi": [10, 119, 120, 122, 134, 140], "energi": [10, 113, 116, 120, 122, 125, 134, 151, 176, 180, 191, 236, 262, 272], "setter": [10, 125, 142], "getter": [10, 61, 125, 142], "set_": 10, "set_condit": 10, "17749": 10, "side": [10, 12, 16, 18, 24, 26, 29, 43, 52, 53, 61, 73, 77, 88, 97, 101, 104, 111, 120, 124, 139, 140, 143, 163, 164, 180, 185, 195, 197, 203, 205, 208, 210, 227, 229, 230, 234, 241, 243, 265, 277], "unpack": [10, 61, 92, 97, 248, 249], "emul": [10, 222, 229, 231, 249], "is_deriv": [10, 61], "as_finite_differ": [10, 41, 61, 277], "17881": 10, "get_matrix": [10, 236], "__getitem__": [10, 61, 92, 235], "__iter__": [10, 53, 61, 222], "_components_data_full_destroi": 10, "__pow__": [10, 92, 201, 207], "flaw": 10, "replace_with_arrai": [10, 236, 237], "cach": [10, 18, 66, 86, 197, 206, 210, 239, 244, 245], "safe": [10, 61, 101, 200, 206, 228, 234, 277], "squar": [10, 12, 18, 22, 25, 26, 31, 35, 39, 43, 52, 61, 62, 67, 77, 78, 86, 88, 92, 93, 97, 100, 101, 104, 111, 113, 137, 138, 161, 177, 185, 195, 199, 201, 203, 205, 206, 207, 210, 218, 222, 223, 226, 229, 230, 281], "jordan": [10, 27, 86, 92, 97, 208, 226, 228, 229], "band": [10, 92, 100], "eigenvalu": [10, 92, 97, 125, 127, 169, 172, 281], "elif": [10, 18, 19, 20, 67], "getsourc": [10, 249, 253], "sum": [10, 16, 18, 25, 43, 50, 53, 60, 61, 64, 66, 69, 74, 76, 84, 86, 88, 90, 91, 92, 94, 97, 101, 107, 122, 137, 154, 158, 161, 169, 172, 174, 175, 195, 197, 198, 200, 201, 205, 206, 207, 210, 212, 213, 215, 217, 219, 220, 222, 223, 226, 228, 229, 230, 231, 232, 234, 236, 245, 248, 287], "meter": [10, 104, 105, 146, 149, 178, 180, 181, 182], "si": [10, 20, 69, 85, 86, 148, 177, 178, 180, 181, 182, 210], "cg": [10, 154, 172], "aris": [10, 18, 19, 61, 66, 86, 88, 172, 194, 200, 205], "scale": [10, 70, 71, 72, 76, 77, 78, 89, 104, 155, 176, 178, 180, 182, 183, 190, 194, 196, 206, 213, 230, 262, 264], "kilomet": [10, 181, 182], "1000": [10, 12, 43, 45, 61, 62, 65, 94, 101, 142, 180, 181, 182, 195, 209, 210, 219], "dimensionsystem": [10, 177], "14318": 10, "duplic": [10, 12, 52, 55, 62, 67, 69, 97, 101, 218, 226, 248, 280], "flatten": [10, 42, 61, 200, 232, 237, 248, 249], "neither": [10, 18, 19, 39, 61, 149, 170, 196, 206, 217, 218, 219, 226, 236, 249, 255, 264, 287], "polymorph": 10, "anymor": [10, 196], "temporarili": [10, 61], "point3d": [10, 74, 75, 76, 148], "p1": [10, 44, 52, 53, 57, 60, 71, 73, 74, 75, 76, 77, 104, 111, 116, 119, 129, 142, 144, 189, 196, 200, 201, 203, 207, 219, 230, 231], "p2": [10, 19, 52, 53, 60, 71, 73, 74, 75, 76, 77, 104, 111, 116, 119, 142, 189, 196, 200, 201, 203, 207, 219, 230], "conflict": [10, 67, 101, 111, 125, 243], "throughout": [11, 86, 91, 203, 213, 229, 264, 279], "elsewher": [11, 18, 66, 90, 127, 199, 241], "termnam": 11, "antideriv": [11, 67, 69, 88, 226, 277], "frac": [11, 16, 18, 20, 22, 23, 27, 29, 41, 60, 61, 62, 63, 66, 67, 69, 86, 88, 97, 101, 103, 111, 129, 140, 178, 190, 191, 193, 194, 195, 199, 203, 206, 210, 212, 213, 217, 220, 223, 226, 227, 229, 230, 231, 248, 262, 264, 277, 281, 282, 286, 287], "indefinit": [11, 35, 67, 85, 86, 88, 97, 201, 203, 204, 206, 215, 277], "integr": [11, 12, 15, 23, 33, 35, 41, 53, 60, 61, 63, 66, 67, 79, 80, 81, 84, 90, 92, 97, 100, 101, 111, 113, 120, 125, 135, 142, 161, 170, 173, 176, 179, 184, 186, 191, 195, 197, 200, 201, 203, 206, 207, 210, 212, 213, 220, 226, 227, 230, 243, 251, 255, 258, 259, 262, 263, 267, 270, 278, 281, 286], "primit": [11, 52, 61, 62, 69, 101, 169, 173, 197, 198, 200, 201, 203, 205, 206, 209, 210, 223, 277], "terminologi": [11, 23, 236], "tupl": [11, 20, 25, 28, 29, 30, 35, 37, 38, 41, 42, 43, 44, 52, 53, 60, 61, 62, 63, 67, 68, 69, 70, 71, 72, 74, 76, 77, 78, 83, 86, 88, 92, 97, 100, 101, 103, 104, 105, 109, 116, 119, 120, 122, 124, 137, 138, 140, 142, 144, 159, 160, 161, 164, 169, 172, 173, 174, 175, 185, 189, 194, 196, 197, 199, 200, 201, 203, 207, 208, 210, 211, 212, 216, 218, 222, 223, 226, 227, 228, 229, 230, 231, 235, 236, 241, 242, 243, 244, 248, 249, 251, 255, 259, 277, 282, 283, 286], "subexpress": [11, 20, 43, 61, 67, 92, 115, 117, 205, 206, 210, 217, 222, 229, 243, 249, 276], "togeth": [11, 12, 16, 43, 52, 61, 65, 90, 97, 101, 135, 161, 172, 180, 194, 197, 201, 203, 205, 206, 209, 210, 222, 226, 228, 230, 241, 242, 248, 281, 287], "walk": [11, 43, 45, 61, 167, 170, 220], "extract": [11, 22, 26, 30, 31, 41, 61, 88, 92, 94, 97, 101, 112, 127, 135, 184, 194, 203, 205, 206, 228, 229, 230, 241, 243, 248], "rebuilt": [11, 282], "atom": [11, 24, 43, 53, 61, 88, 91, 92, 113, 176, 200, 207, 210, 228, 229, 235], "queri": [11, 18, 19, 20, 36, 39, 40, 41, 43, 61, 73, 206, 222, 230], "is_real": [11, 18, 20, 22, 26, 61, 63, 67, 68, 97, 187, 210, 235], "restrict": [11, 18, 20, 24, 43, 50, 61, 62, 69, 97, 104, 105, 175, 197, 200, 205, 207, 225], "never": [11, 18, 20, 29, 61, 67, 88, 177, 206, 207, 210, 218, 228, 230, 239, 259, 279, 280], "is_": [11, 20, 61], "leav": [11, 18, 20, 28, 30, 43, 61, 88, 97, 101, 121, 135, 159, 175, 217, 245, 276, 282, 287], "recurs": [11, 12, 15, 18, 20, 41, 61, 66, 86, 88, 91, 92, 101, 127, 196, 203, 206, 207, 210, 211, 215, 217, 222, 228, 229, 234, 239, 241, 245, 246, 248, 278, 287], "canonic": [11, 48, 61, 219, 236, 267], "excess": 11, "discourag": [11, 18, 61, 222], "expens": [11, 20, 29, 61, 139, 219, 226, 227, 228, 244, 283], "matrix": [11, 15, 16, 18, 23, 28, 30, 35, 43, 50, 53, 61, 62, 63, 69, 76, 86, 88, 90, 92, 93, 95, 96, 99, 100, 102, 103, 111, 112, 114, 116, 119, 120, 121, 124, 125, 127, 128, 129, 130, 132, 133, 134, 136, 137, 138, 142, 143, 144, 147, 148, 150, 158, 159, 164, 169, 170, 172, 174, 175, 177, 180, 184, 185, 194, 195, 197, 199, 203, 205, 208, 210, 211, 218, 220, 222, 223, 226, 228, 229, 231, 232, 234, 235, 236, 237, 242, 243, 248, 249, 251, 255, 257, 258, 260, 264, 270, 278, 281, 282, 287, 288], "sympifi": [11, 12, 18, 19, 43, 65, 71, 91, 140, 148, 173, 175, 185, 186, 200, 201, 276, 282], "bound": [11, 24, 39, 43, 44, 60, 61, 70, 71, 72, 74, 76, 77, 88, 101, 173, 201, 203, 205, 206, 210, 216, 226, 228, 229, 230, 235, 245, 251, 255], "dummi": [11, 43, 57, 60, 61, 67, 86, 88, 97, 125, 142, 170, 175, 200, 201, 205, 206, 207, 216, 217, 218, 220, 222, 226, 229, 234, 236, 239, 243, 248, 249], "ration": [11, 18, 20, 22, 36, 38, 39, 41, 43, 60, 61, 65, 66, 67, 69, 71, 74, 76, 78, 82, 86, 88, 89, 94, 97, 101, 103, 111, 144, 177, 195, 198, 203, 204, 205, 207, 210, 215, 218, 219, 220, 222, 223, 225, 228, 229, 230, 248, 255, 278, 279, 282, 286], "unequ": [11, 12, 14, 61, 104, 210], "accident": 11, "clash": [11, 34, 61, 97], "contrast": [11, 20, 60, 61, 129, 200, 220, 226, 281], "_eval_": 11, "_eval_deriv": [11, 20, 61, 69], "overrid": [11, 12, 43, 61, 70, 71, 77, 103, 173, 210, 235, 242, 243, 248, 249], "pre": [11, 42, 43, 61, 195, 196, 211, 219, 222, 228, 229, 241, 260, 264, 282], "dispatch": [11, 37, 38, 39, 61, 62, 170, 210, 229, 245], "shorthand": [11, 12, 18, 20, 61, 91, 169, 205, 218, 239], "stand": [11, 60, 61, 142, 198, 200, 201, 207], "reserv": [11, 18, 125, 236, 243, 283], "smaller": [11, 43, 52, 53, 61, 62, 66, 69, 77, 88, 94, 101, 137, 198, 200, 203, 206, 213, 219, 220, 228, 248, 276, 287], "children": [11, 61, 62, 200, 245], "leaf": [11, 200, 210, 219, 282], "strictli": [11, 12, 15, 17, 18, 39, 41, 61, 69, 97, 101, 111, 203, 222, 228], "dag": 11, "map": [11, 18, 20, 41, 42, 43, 51, 52, 53, 61, 62, 73, 77, 84, 86, 88, 91, 92, 101, 109, 120, 129, 153, 164, 165, 170, 185, 194, 196, 197, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 217, 222, 226, 227, 228, 229, 230, 234, 235, 242, 245, 248, 249, 251, 255], "colloqui": [11, 23], "lambda": [11, 12, 20, 24, 28, 37, 38, 41, 43, 52, 53, 61, 62, 63, 67, 88, 92, 93, 94, 97, 100, 101, 103, 125, 138, 139, 142, 143, 160, 196, 203, 205, 206, 210, 211, 218, 219, 222, 226, 228, 229, 230, 231, 239, 248, 249, 255, 257, 260, 276, 283], "hyper": [11, 61, 66, 69, 80, 83, 210, 212, 220, 222, 228, 230, 287], "primepi": [11, 20, 101], "divisor_sigma": [11, 101], "undefin": [11, 20, 26, 29, 37, 38, 41, 61, 67, 68, 69, 88, 94, 103, 116, 194, 205, 216, 217, 220, 249, 277, 288], "interchang": [11, 57, 60, 86, 226], "memori": [11, 43, 61, 101, 206, 231, 242, 245], "maintain": [11, 12, 61, 62, 101, 105, 210, 218, 219, 226, 229, 245], "mental": 11, "hidden": [11, 184], "state": [11, 16, 18, 29, 52, 59, 61, 69, 101, 104, 111, 113, 119, 120, 121, 124, 127, 129, 143, 147, 151, 152, 154, 155, 156, 158, 159, 160, 164, 167, 169, 170, 171, 172, 174, 175, 206, 210, 219, 220, 222, 230, 245, 272, 283], "hashabl": [11, 58, 86, 248], "repl": [11, 236], "intermedi": [11, 43, 44, 84, 92, 119, 125, 127, 132, 136, 159, 169, 177, 178, 185, 189, 193, 229, 243, 284], "execut": [11, 18, 33, 43, 89, 92, 142, 196, 210, 226, 229, 239, 241, 243, 244, 249, 251, 254, 266, 281, 286], "idiom": [11, 252, 279, 280], "anti": [11, 35, 39, 57, 67, 88, 92, 147, 152, 236], "frown": 11, "upon": [11, 18, 43, 61, 101, 124, 127, 137, 138, 139, 142, 169, 175, 191, 193, 194, 218, 226, 235, 242, 262, 287], "lowercas": [11, 12, 226, 241, 277], "is_integ": [11, 18, 20, 61, 187, 210, 235], "capit": [11, 60, 62, 111, 226], "wherea": [11, 16, 18, 22, 27, 39, 43, 62, 71, 77, 86, 91, 111, 180, 197, 200, 206, 210, 228, 229, 248, 287], "is_capit": 11, "unneed": 11, "achiev": [11, 12, 20, 61, 65, 69, 94, 101, 125, 142, 209, 217, 220, 222, 229, 244, 260], "isinst": [11, 15, 18, 20, 43, 61, 92, 94, 111, 200, 201, 210, 211, 222, 231, 234, 243, 282], "ship": [11, 102], "session": [11, 34, 43, 61, 73, 88, 190, 194, 200, 246, 279, 286], "sort": [11, 24, 37, 38, 42, 43, 50, 53, 57, 86, 88, 91, 97, 100, 101, 112, 115, 120, 159, 175, 180, 184, 196, 203, 206, 207, 217, 222, 223, 226, 227, 228, 234, 236, 241, 243, 248, 259, 279, 281, 282], "numberkind": [11, 15, 61, 92, 218], "matrixkind": [11, 15, 61, 92, 218], "booleankind": [11, 61], "ring": [11, 22, 64, 84, 97, 98, 193, 198, 199, 203, 205, 206, 207, 208, 209, 210, 248], "classif": [11, 17, 61, 226, 227], "lamda": [11, 94, 210, 218, 230, 283], "\u03bb": [11, 283], "lambdifi": [11, 20, 28, 29, 43, 69, 127, 210, 228, 242, 247, 274, 278], "matrixexpr": [11, 20, 92, 94, 95], "mutabl": [11, 12, 44, 61, 93, 94, 95, 104, 201, 210, 211, 222, 231, 283], "dens": [11, 92, 94, 96, 97, 199, 205, 206, 231, 270, 282], "underli": [11, 43, 53, 59, 61, 90, 97, 109, 125, 170, 183, 228, 229, 230], "quit": [11, 16, 20, 69, 97, 101, 127, 193, 196, 207, 209, 220, 228, 248, 264, 279, 282], "rung": [11, 41, 83], "kutta": [11, 83], "condit": [11, 18, 19, 22, 24, 43, 52, 61, 63, 67, 69, 79, 80, 83, 84, 85, 88, 91, 97, 101, 103, 104, 105, 107, 111, 117, 121, 127, 135, 139, 142, 144, 189, 195, 207, 210, 213, 220, 223, 225, 226, 228, 229, 230, 235, 287], "loss": [11, 43, 86, 175, 242, 261], "stabil": [11, 52, 57, 59, 65, 111, 139, 234], "focus": [11, 28, 203, 223, 225, 226, 228, 229, 288], "is_numb": [11, 18, 61, 69, 88], "infin": [11, 18, 24, 39, 60, 61, 66, 67, 69, 74, 86, 88, 97, 148, 201, 203, 206, 210, 215, 216, 217, 218, 222, 225, 226, 230], "resembl": [11, 63, 69, 88, 235], "zoo": [11, 14, 18, 39, 61, 66, 67, 69, 88, 217, 219, 222], "data": [11, 16, 43, 52, 61, 62, 69, 88, 97, 102, 109, 120, 154, 196, 197, 200, 201, 203, 206, 207, 210, 222, 235, 236, 241, 243, 245, 248, 252], "effici": [11, 16, 18, 22, 27, 41, 43, 45, 52, 57, 61, 64, 65, 66, 77, 78, 94, 97, 101, 102, 111, 119, 120, 142, 195, 198, 199, 200, 201, 203, 206, 207, 208, 209, 222, 223, 228, 242, 249, 276, 282, 283, 287], "act": [11, 42, 51, 52, 53, 57, 61, 69, 77, 90, 91, 97, 104, 107, 116, 119, 124, 125, 130, 138, 147, 159, 164, 167, 168, 218, 229, 231, 260, 264, 276], "pprint": [11, 12, 20, 26, 41, 42, 63, 69, 88, 97, 101, 111, 147, 195, 210, 211, 218, 222, 226, 227, 229, 230, 248, 286], "inequ": [11, 18, 19, 20, 23, 61, 196, 203, 218, 220, 224, 267], "neq": [11, 20, 61, 67, 69, 86, 88, 92, 180, 194, 195, 203, 206, 223, 226, 228, 287], "ne": [11, 14, 18, 61, 62, 66, 67, 74, 86, 101, 198, 200, 203, 220, 226, 230], "hold": [11, 12, 20, 38, 42, 52, 57, 61, 62, 63, 67, 69, 83, 86, 97, 100, 103, 111, 113, 119, 121, 122, 140, 171, 206, 220, 222, 226, 230, 243, 287], "singleton": [11, 53, 91, 229, 282], "gotcha": [11, 13, 61, 194, 249, 280, 288], "somehow": [11, 20], "simpler": [11, 19, 20, 22, 61, 65, 69, 85, 86, 132, 194, 203, 219, 220, 222, 226, 228, 229, 287], "adject": [11, 230], "heurist": [11, 18, 29, 53, 86, 88, 92, 203, 204, 217, 219, 222, 228, 229, 241, 277, 287], "appar": [11, 12, 61, 251, 287], "commut": [11, 18, 35, 39, 42, 52, 53, 57, 61, 63, 84, 88, 97, 152, 159, 162, 163, 164, 174, 175, 180, 187, 194, 198, 201, 202, 203, 204, 206, 210, 217, 218, 220, 226, 236, 272, 273, 282], "law": [11, 42, 135, 178, 194, 198], "xreplac": [11, 61, 92, 97, 185], "knowledg": [11, 60, 61, 62, 205, 226, 282, 285], "round": [11, 20, 28, 41, 43, 61, 65, 66, 67, 97, 148, 205, 206, 217, 219, 230], "analyt": [11, 33, 66, 69, 86, 97, 135, 226, 277], "implicitli": [11, 18, 19, 20, 53, 61, 88, 197, 200, 228], "independ": [11, 12, 20, 27, 39, 41, 43, 52, 60, 61, 63, 69, 78, 86, 88, 90, 97, 111, 120, 121, 125, 127, 129, 137, 139, 173, 180, 191, 196, 198, 200, 205, 206, 212, 213, 220, 222, 223, 226, 227, 228, 229, 230, 236, 241, 242, 262, 281, 282], "nativ": [11, 61, 111, 201, 206, 241], "parsabl": 11, "iter": [11, 22, 25, 26, 27, 31, 41, 43, 50, 52, 53, 56, 57, 61, 62, 63, 64, 66, 69, 77, 91, 101, 116, 117, 119, 120, 121, 124, 139, 143, 160, 175, 189, 196, 197, 198, 199, 201, 203, 206, 210, 211, 212, 213, 216, 222, 223, 226, 228, 229, 230, 231, 234, 242, 243, 244, 245, 247, 249, 255, 260, 274], "fuzzi": [11, 18, 20, 21], "noncomput": 11, "philosoph": 11, "OR": [11, 41, 64, 91, 203], "One": [11, 12, 15, 18, 20, 41, 42, 43, 51, 53, 60, 61, 66, 67, 69, 80, 83, 85, 86, 88, 91, 97, 101, 104, 105, 125, 140, 142, 151, 180, 201, 203, 204, 206, 209, 212, 218, 222, 225, 228, 229, 230, 231, 236, 249, 262, 276, 277, 279, 282, 283, 287], "care": [11, 12, 19, 20, 52, 61, 69, 88, 91, 97, 104, 115, 125, 139, 185, 194, 200, 205, 222, 223, 226, 228, 229, 234, 237, 242, 276, 279, 281], "falsi": 11, "is_posit": [11, 18, 19, 20, 61, 187, 201], "unevaluatedexpr": [11, 61, 210, 282], "surpris": [11, 18, 229], "north": 11, "riemann": [11, 63, 66, 67, 86, 197, 222, 236], "sphere": [11, 147, 255, 265], "behav": [12, 39, 41, 61, 62, 67, 69, 101, 206, 218, 222, 228, 231, 237, 283], "mapl": [12, 88, 226, 281], "mathematica": [12, 43, 53, 103, 281, 283], "faq": 12, "introductori": [12, 16, 32, 33, 142, 200, 201, 206], "remaind": [12, 60, 61, 62, 101, 198, 200, 201, 204, 206, 226], "familiar": [12, 20, 88, 125, 140, 159, 207, 277, 279, 285], "java": 12, "minut": [12, 27, 115, 127, 184], "subtract": [12, 26, 43, 53, 61, 65, 76, 101, 111, 119, 177, 198, 199, 200, 201, 203, 205, 206, 282, 287], "proper": [12, 52, 61, 88, 101, 115, 125, 184, 200, 201, 205, 210, 218, 226, 231, 242, 243, 262, 283], "trigsimp": [12, 35, 61, 97, 119, 125, 133, 185, 219, 222, 259], "fill": [12, 17, 52, 62, 92, 94, 97, 100, 175, 196, 241, 244, 248, 251, 283], "alter": [12, 44, 52, 61, 185, 200, 210, 212, 229], "afterward": [12, 43, 61, 122, 129], "quantiti": [12, 53, 61, 66, 69, 73, 78, 105, 115, 120, 133, 140, 154, 177, 179, 183, 191, 193, 194, 205, 222, 230, 259, 264, 272], "simultan": [12, 61, 67, 74, 92, 101, 196, 219], "var": [12, 25, 41, 43, 60, 61, 65, 66, 84, 88, 91, 97, 111, 185, 196, 205, 209, 210, 222, 223, 249, 288], "rate": [12, 127, 193, 230, 262, 277], "short_lif": 12, "haven": 12, "160": [12, 104, 204], "ctimesd": 12, "circular": [12, 18, 109, 147, 203], "relationship": [12, 14, 18, 43, 61, 66, 68, 88, 101, 136, 159, 185, 191, 194, 200, 228], "runtimeerror": [12, 41, 218, 229, 248], "compileflag": [12, 241], "glob": [12, 241], "exceed": [12, 127], "stdin": [12, 244, 246], "nameerror": [12, 89, 244, 279], "__future__": [12, 16, 279, 286], "divis": [12, 20, 61, 97, 101, 177, 197, 200, 201, 202, 203, 206, 208, 210, 223, 226, 228, 241, 249, 279, 282, 286], "cl": [12, 18, 20, 29, 43, 52, 61, 88, 92, 175, 189, 201, 205, 226, 235, 244, 248, 261, 277, 286, 288], "dir": [12, 61, 104, 212, 217, 248], "__builtins__": 12, "__file__": [12, 252], "__name__": [12, 210, 252], "__package__": 12, "_greek": 12, "_latin": 12, "chi": [12, 69, 86, 147, 210, 220, 226, 230, 236], "eta": [12, 69, 86, 205, 210, 226, 227, 230], "iota": [12, 210], "kappa": [12, 195, 210, 230], "mu": [12, 69, 86, 101, 112, 114, 146, 210, 230, 236], "omega": [12, 43, 44, 52, 86, 101, 116, 122, 124, 140, 143, 149, 151, 176, 185, 189, 190, 193, 195, 210, 217, 230], "omicron": [12, 210], "phi": [12, 52, 61, 62, 66, 69, 86, 90, 97, 101, 113, 142, 149, 158, 160, 195, 197, 205, 210, 226, 255, 265], "psi": [12, 66, 69, 86, 147, 158, 159, 165, 173, 205, 210, 236], "rho": [12, 63, 86, 97, 101, 128, 169, 210, 230, 236, 265], "sigma": [12, 53, 84, 86, 92, 97, 210, 213, 230], "tau": [12, 43, 86, 88, 97, 205, 210, 226], "theta": [12, 61, 63, 67, 69, 86, 89, 97, 103, 113, 124, 143, 147, 185, 194, 195, 201, 205, 210, 213, 218, 229, 230, 255, 257, 260, 262, 265], "upsilon": [12, 210], "xi": [12, 20, 63, 86, 210, 226, 227, 228], "lastli": [12, 88, 105, 143, 226], "unit": [12, 20, 35, 39, 42, 61, 62, 66, 74, 75, 76, 88, 97, 101, 104, 109, 111, 113, 114, 119, 125, 140, 142, 151, 176, 177, 178, 182, 184, 185, 191, 194, 196, 198, 201, 203, 205, 206, 208, 210, 218, 220, 223, 229, 231, 255, 257, 259, 264, 265, 272], "mnemon": [12, 219, 248], "osineq": 12, "reimport": 12, "restor": [12, 200, 222], "__": [12, 69, 88, 210, 230, 235], "press": [12, 42, 44, 45, 53, 62, 88, 92, 195, 204, 223, 228], "autocomplet": 12, "lose": [12, 197], "abil": [12, 18, 41, 97, 135, 205, 209, 226, 229, 281, 287], "past": [12, 67, 101, 209, 210, 286], "f1": [12, 28, 52, 86, 88, 97, 111, 116, 125, 133, 142, 196, 201, 203, 206, 210, 212, 228], "f2": [12, 28, 61, 86, 97, 111, 116, 125, 133, 142, 178, 196, 203, 206, 210, 212, 228], "6": [12, 14, 16, 22, 30, 31, 35, 37, 38, 41, 43, 44, 45, 49, 50, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 71, 73, 74, 75, 76, 77, 83, 84, 86, 88, 90, 91, 92, 94, 95, 97, 98, 100, 101, 103, 104, 107, 109, 111, 112, 113, 127, 128, 132, 133, 134, 144, 148, 154, 172, 184, 185, 194, 195, 196, 198, 199, 200, 201, 203, 205, 206, 207, 209, 210, 212, 215, 216, 217, 218, 219, 222, 223, 226, 227, 228, 229, 230, 231, 241, 242, 245, 248, 249, 255, 258, 260, 265, 277, 283, 287, 288], "accuraci": [12, 16, 41, 61, 206, 283], "2000000000000002": 12, "py3k": 12, "20000000000000": 12, "sympyifi": 12, "worri": [12, 61, 282], "reus": [12, 20, 43, 175, 281], "142857142857143": 12, "receiv": [12, 31, 61, 62, 101, 116, 170, 205, 235], "fraction": [12, 61, 62, 65, 67, 77, 88, 97, 101, 117, 181, 200, 201, 203, 204, 207, 210, 212, 222, 223, 226, 228, 278], "interpret": [12, 19, 29, 31, 43, 52, 60, 61, 66, 67, 69, 74, 77, 88, 92, 94, 97, 101, 103, 115, 180, 196, 198, 205, 206, 210, 217, 223, 228, 229, 230, 235, 241, 242, 245, 251, 283], "100": [12, 20, 43, 45, 50, 60, 61, 62, 65, 69, 77, 84, 91, 92, 97, 101, 104, 196, 200, 205, 207, 209, 210, 217, 228, 229, 248, 276], "000000000000": 12, "00": [12, 61, 101, 159, 169, 223, 248], "null": [12, 61, 97], "34": [12, 43, 53, 66, 74, 97, 101, 116, 157, 204, 209, 216, 222, 223], "3400000000000": 12, "250": [12, 101, 223], "143": [12, 154, 195], "next": [12, 16, 18, 20, 34, 43, 44, 45, 50, 52, 53, 55, 56, 61, 62, 67, 86, 88, 91, 97, 101, 115, 116, 119, 120, 128, 129, 130, 132, 134, 135, 136, 143, 193, 194, 197, 201, 205, 206, 210, 218, 220, 223, 226, 245, 246, 248, 280, 281, 282], "binari": [12, 19, 20, 25, 39, 43, 45, 56, 61, 62, 88, 91, 101, 102, 169, 181, 197, 200, 206, 223, 242, 245, 248], "decim": [12, 20, 43, 61, 64, 65, 101, 103, 109, 200, 206, 281], "far": [12, 42, 61, 75, 88, 195, 197, 200, 210, 220, 249, 276, 277, 279], "142857": 12, "25000000000000000000": 12, "14285278320312500000": 12, "realiz": [12, 46, 52, 63, 91, 101, 129, 197, 198, 203, 230], "pad": [12, 43, 62, 63, 64, 76, 101], "inexact": [12, 31, 61, 201], "low": [12, 18, 19, 43, 61, 62, 69, 101, 200, 203, 208, 210, 222, 242, 243, 248], "higher": [12, 16, 22, 41, 43, 61, 63, 65, 69, 72, 97, 189, 195, 197, 200, 203, 206, 212, 213, 217, 219, 222, 226, 228, 231, 249, 277], "engin": [12, 107, 141, 142, 192, 226, 286], "increas": [12, 27, 41, 42, 53, 59, 60, 61, 64, 65, 69, 92, 101, 102, 115, 126, 159, 184, 185, 187, 193, 194, 200, 203, 205, 206, 212, 215, 219, 226, 230, 246, 248], "2000061035": 12, "highest": [12, 43, 55, 90, 115, 197, 206, 213, 223, 226], "hopefulli": [12, 17, 86], "unsimplifi": [12, 219], "12345678901234567890": 12, "big_trig_ident": 12, "ab": [12, 40, 43, 44, 60, 61, 62, 65, 66, 67, 69, 73, 84, 86, 91, 92, 97, 107, 113, 142, 175, 198, 201, 205, 206, 210, 223, 225, 228, 229, 230, 236, 245, 248, 251, 261, 287], "gave": [12, 61, 248], "gain": [12, 62, 111, 137, 138, 142], "impress": 12, "91": [12, 44, 204, 209, 216, 230], "compar": [12, 18, 31, 41, 43, 53, 58, 61, 66, 67, 78, 91, 97, 101, 102, 127, 154, 178, 182, 200, 203, 206, 207, 210, 215, 217, 222, 226, 229, 231, 235, 241, 248, 279, 282, 287], "4e": [12, 228], "nearli": [12, 101, 219], "snippet": [12, 43], "expr_modifi": 12, "__main__": [12, 43, 283], "declar": [12, 18, 26, 43, 74, 86, 97, 103, 112, 125, 127, 142, 154, 199, 210, 217, 220, 225, 226, 227, 230, 243], "asid": [12, 91, 226, 227, 281], "2x": [12, 25, 61, 69, 86, 103, 222, 223, 229, 230, 276, 279, 287], "syntaxerror": [12, 103], "asin": [12, 67, 69, 75, 207, 210, 220, 222, 226, 230, 287], "arcsin": [12, 67, 207, 210, 230], "arcco": [12, 67, 210], "root": [12, 18, 20, 23, 26, 31, 41, 43, 60, 61, 62, 67, 69, 83, 84, 85, 86, 88, 90, 93, 97, 101, 142, 180, 195, 197, 198, 201, 205, 207, 209, 210, 220, 222, 226, 228, 229, 230, 241, 245, 248, 281, 283, 286, 288], "expon": [12, 22, 31, 40, 43, 61, 62, 67, 68, 69, 86, 88, 94, 101, 109, 111, 181, 198, 199, 200, 206, 207, 210, 219, 222, 226, 229, 234, 245, 287], "half": [12, 20, 43, 61, 62, 66, 67, 69, 71, 77, 88, 90, 97, 101, 103, 104, 144, 147, 172, 195, 201, 203, 205, 206, 218, 219, 220, 222, 230, 241, 248], "denomin": [12, 61, 65, 69, 88, 101, 111, 117, 198, 200, 201, 203, 205, 206, 209, 210, 219, 220, 222, 223, 226, 228, 287], "wild": [12, 61, 222, 248], "interest": [12, 14, 20, 22, 25, 31, 57, 61, 63, 66, 67, 77, 86, 88, 97, 101, 126, 127, 175, 180, 194, 197, 201, 205, 206, 207, 209, 217, 220, 222, 223, 228, 229, 242, 243, 260, 277, 280, 282, 283, 284, 287], "sq": [12, 223], "is_pow": [12, 43, 61, 67], "is_rat": [12, 18, 205, 248], "bracket": [12, 20, 28, 30, 53, 61, 69, 173, 175, 185, 210], "notat": [12, 16, 22, 26, 29, 31, 49, 53, 54, 60, 61, 62, 66, 69, 86, 94, 97, 103, 111, 173, 184, 185, 190, 194, 197, 210, 217, 222, 229, 235, 236, 248, 262, 277], "curli": [12, 125, 210], "suppli": [12, 28, 29, 41, 42, 43, 52, 53, 61, 63, 71, 75, 97, 101, 116, 119, 120, 122, 127, 129, 132, 137, 138, 148, 175, 184, 189, 194, 196, 205, 207, 212, 219, 226, 242, 248, 249, 255, 257, 260], "powsimp": [12, 61, 67, 219, 222], "deep": [12, 20, 61, 67, 91, 92, 206, 217, 222, 230, 282], "measur": [12, 35, 67, 69, 77, 93, 115, 155, 164, 169, 177, 180, 182, 184, 185, 189, 191, 194, 206, 218, 219, 222, 230, 254, 255, 258, 259, 261, 262, 264], "count_op": [12, 61, 219, 222], "radic": [12, 22, 61, 62, 97, 197, 205, 206, 222, 228, 229], "join": [12, 24, 53, 61, 62, 74, 92, 104, 105, 210, 222, 226, 228, 231, 248, 252], "autoexpand": [12, 222], "violat": [12, 125, 195, 207, 222], "naiv": [12, 15, 52, 58, 61, 86, 92, 97, 180, 220, 228, 229, 236], "strategi": [12, 44, 61, 88, 203, 204, 217, 220, 222, 227], "radsimp": [12, 61, 222], "logcombin": [12, 222, 226, 229], "robust": [12, 29, 58, 61, 65, 202, 222, 226], "cancel": [12, 16, 20, 43, 61, 65, 69, 77, 86, 88, 97, 101, 111, 112, 200, 201, 203, 206, 209, 222, 228, 281], "topic": [13, 21, 32, 43, 135, 140, 192, 193, 194, 195, 197, 199, 200, 205, 229, 272, 279, 284], "behind": [13, 32, 112, 125, 139, 179, 199, 219, 222, 226, 229, 272, 279], "decis": [13, 32, 61, 67, 88, 219, 228, 243], "opinion": [13, 32], "pitfal": [13, 20, 194, 200, 279, 284, 287], "glossari": 13, "seem": [14, 18, 20, 85, 86, 125, 180, 197, 222, 226, 287], "unwieldi": 14, "arbitrarili": [14, 22, 41, 61, 74, 101, 203, 205, 217, 220, 226, 227, 230], "six": [14, 105, 210, 223, 229, 230], "bias": 14, "toward": [14, 43, 61, 69, 197, 217, 229], "enter": [14, 53, 61, 62, 66, 74, 101, 103, 104, 120, 124, 127, 137, 210, 220, 228, 241, 282, 286], "attempt": [14, 16, 19, 20, 22, 25, 29, 31, 43, 52, 57, 59, 61, 65, 66, 73, 86, 88, 97, 101, 115, 117, 170, 200, 205, 210, 212, 219, 222, 223, 226, 228, 229, 230, 241, 279, 287], "unambigu": [14, 210, 226, 251], "univari": [14, 22, 31, 41, 60, 61, 67, 84, 88, 197, 198, 200, 201, 204, 205, 206, 207, 212, 223, 225, 228, 230], "linear": [14, 20, 23, 25, 27, 28, 31, 42, 43, 53, 60, 61, 62, 64, 65, 69, 74, 84, 86, 88, 90, 92, 94, 96, 104, 108, 111, 118, 119, 120, 122, 127, 129, 130, 135, 137, 141, 142, 147, 169, 172, 173, 189, 196, 197, 201, 203, 205, 206, 208, 216, 218, 220, 223, 226, 227, 228, 229, 248, 270, 272, 288], "undetermin": [14, 61, 97, 206, 212, 226, 228], "nonlinear": [14, 23, 29, 31, 60, 142, 206, 226, 228, 229], "sol": [14, 28, 97, 223, 226, 227, 228], "insuffici": [14, 92], "elimin": [14, 16, 27, 43, 57, 61, 91, 93, 97, 115, 201, 208, 209, 211, 213, 222, 226, 228, 229, 236, 243, 283], "nsolv": [14, 22, 28, 30, 31, 142, 228], "z_eq": 14, "zsol": 14, "906425478894557": 14, "sol0": 14, "90642547889456": 14, "reduce_inequ": [14, 24, 225, 228], "rh": [14, 24, 27, 29, 43, 51, 53, 61, 92, 93, 97, 119, 120, 125, 132, 133, 134, 199, 208, 210, 212, 226, 228, 229, 261], "classifi": [15, 97, 200, 226, 227, 229, 230], "distinguish": [15, 18, 19, 42, 52, 65, 90, 125, 174, 180, 197], "former": [15, 43, 61, 66, 125, 203, 205, 206, 223, 248], "retriev": [15, 59, 92, 206, 222, 236], "guarante": [15, 18, 22, 28, 43, 52, 53, 61, 73, 86, 88, 97, 200, 203, 205, 206, 226, 228, 229, 246, 251, 283, 287], "catch": [15, 61, 226, 241, 283], "theori": [15, 20, 44, 50, 51, 52, 53, 59, 61, 62, 66, 69, 90, 98, 120, 125, 139, 141, 154, 172, 175, 185, 189, 199, 203, 204, 205, 209, 223, 245, 255, 273, 281], "is_subset": [15, 218], "valueerror": [15, 18, 28, 29, 36, 38, 41, 43, 44, 53, 61, 62, 70, 71, 74, 76, 77, 88, 92, 94, 97, 100, 101, 104, 109, 111, 149, 189, 191, 195, 197, 199, 203, 205, 218, 226, 228, 229, 248, 251, 262], "odd": [15, 18, 25, 36, 38, 39, 40, 49, 53, 61, 62, 66, 67, 69, 91, 100, 101, 112, 195, 205, 206, 210, 228], "appliedpred": [15, 36, 37, 38], "analysi": [16, 43, 44, 52, 61, 62, 67, 108, 127, 139, 140, 143, 197, 206, 220, 223, 230], "vari": [16, 41, 43, 61, 75, 77, 104, 109, 115, 120, 140, 173, 194, 217, 228, 248, 262], "hope": [16, 52, 115, 197], "research": [16, 53, 207, 222], "establish": [16, 57, 86, 119, 130, 220], "envis": 16, "along": [16, 20, 22, 43, 52, 61, 62, 63, 67, 69, 70, 71, 75, 76, 79, 81, 84, 86, 92, 94, 97, 104, 105, 107, 114, 115, 119, 120, 127, 129, 132, 133, 134, 137, 138, 139, 142, 144, 172, 184, 185, 191, 194, 196, 199, 200, 205, 206, 226, 229, 258, 262, 264], "small": [16, 25, 43, 44, 52, 53, 61, 65, 66, 88, 91, 97, 101, 111, 129, 133, 142, 172, 195, 196, 203, 204, 205, 222, 223, 228, 248, 276, 279, 281], "x_": [16, 25, 29, 43, 51, 61, 62, 66, 103, 201, 203, 206, 212, 223, 226, 231], "taylor": [16, 61, 67, 125, 139, 142, 201, 203, 206, 207, 217, 226], "let": [16, 18, 19, 20, 41, 43, 52, 57, 61, 62, 71, 79, 84, 86, 90, 94, 97, 98, 101, 103, 116, 125, 142, 180, 185, 193, 197, 198, 199, 203, 205, 206, 207, 210, 217, 220, 222, 223, 226, 228, 229, 236, 239, 242, 246, 249, 260, 261, 265, 276, 279, 281, 282, 287], "df": [16, 63, 226], "c_": [16, 23, 29, 62, 84, 86, 194, 198, 226], "grid": [16, 41, 42, 109, 196], "f_": [16, 61, 66, 69, 88, 137, 138, 139, 203, 209, 210, 220, 226], "constraint": [16, 24, 97, 105, 111, 119, 120, 121, 124, 125, 127, 128, 129, 131, 135, 137, 138, 139, 142, 207, 272], "formul": [16, 27, 119, 128, 129, 135, 137, 138, 175, 194], "assess": 16, "brute": [16, 219, 223], "frequent": [16, 52, 205, 217, 229], "cover": [16, 67, 101, 103, 115, 125, 184, 193, 236, 243, 277, 279], "treatment": [16, 86, 206], "shall": [16, 52, 86, 125, 142, 217, 220, 282], "job": [16, 20, 53, 155, 207, 210], "truncat": [16, 53, 61, 97, 101, 105, 180, 196, 207, 209, 212, 213], "approx": [16, 23, 28, 61, 88], "lowest": [16, 43, 52, 57, 101, 197, 212, 229], "2h": 16, "print_funct": 16, "x0": [16, 29, 41, 43, 51, 61, 69, 80, 82, 84, 85, 101, 147, 200, 211, 212, 217, 222, 226, 228, 230, 248, 277], "x_0": [16, 51, 52, 62, 83, 84, 85, 203, 212, 223, 226, 230, 277], "fi": 16, "fip1": 16, "fip2": 16, "c_0": [16, 62, 84], "c_1": [16, 29, 62, 84, 86, 217, 220, 226], "c_2": [16, 29, 86, 217, 226], "2f": [16, 288], "c_i": [16, 86, 217, 220, 226], "nth": [16, 61, 66, 69, 90, 101, 201, 206, 207, 216, 222, 226, 230], "degre": [16, 22, 44, 52, 59, 60, 66, 69, 77, 88, 92, 97, 104, 107, 109, 111, 119, 120, 125, 126, 129, 135, 143, 147, 194, 197, 198, 201, 203, 205, 206, 209, 213, 216, 219, 220, 222, 223, 226, 228, 230, 255, 272], "x_i": [16, 20, 51, 69, 88, 97, 198, 201, 203, 206, 207, 210, 229], "m11": [16, 230], "m12": [16, 230], "m13": 16, "m21": [16, 230], "m22": [16, 230], "m23": 16, "m31": 16, "m32": 16, "m33": [16, 101], "3x3": [16, 27, 76, 97, 260], "invert": [16, 27, 31, 39, 61, 62, 92, 94, 97, 111, 129, 177, 198, 200, 201, 205, 206, 226, 228, 229, 236, 283], "inv": [16, 27, 53, 93, 97, 119, 120, 127, 132, 133, 142, 164, 199, 226], "fim1": 16, "eight": [16, 31, 210], "dfdxcheck": 16, "c3": [16, 29, 64, 90, 92, 94, 101, 226, 230, 261, 288], "c5": [16, 226], "120": [16, 60, 61, 66, 67, 83, 101, 104, 105, 207, 209, 210, 212, 226, 277], "c7": [16, 52], "5040": [16, 66, 83, 206, 207], "quickli": [16, 20, 52, 53, 61, 62, 65, 101, 203, 206, 219, 229, 245], "tediou": [16, 88], "certainli": [16, 73, 103, 245], "fine": [16, 20, 25, 61, 65, 89, 190, 200, 210, 222], "devis": 16, "xn": [16, 20, 201], "x_n": [16, 20, 44, 51, 62, 83, 97, 198, 201, 203, 206, 223, 229], "fn": [16, 29, 88, 97, 197, 206], "fnm1": 16, "fnm2": 16, "dth": 16, "Of": [16, 18, 22, 60, 86, 97, 226, 229, 248, 287], "cours": [16, 18, 45, 52, 60, 69, 86, 88, 97, 98, 101, 191, 199, 200, 204, 205, 217, 219, 220, 262, 287], "etc": [16, 18, 19, 38, 41, 43, 57, 61, 62, 66, 67, 79, 90, 91, 96, 101, 125, 146, 155, 159, 172, 175, 179, 187, 191, 193, 194, 196, 197, 198, 200, 203, 205, 210, 211, 218, 219, 220, 222, 226, 229, 230, 234, 242, 243, 248, 260, 264], "discrit": 16, "bengt": [16, 41], "fornberg": [16, 41], "weight": [16, 61, 69, 76, 78, 88, 90, 97, 159, 222, 277], "gap": [17, 52, 101, 125, 207], "matur": [17, 18, 228, 229], "finit": [17, 18, 26, 39, 43, 47, 48, 49, 52, 60, 61, 62, 64, 65, 88, 90, 91, 161, 185, 195, 198, 201, 204, 206, 207, 210, 212, 213, 216, 218, 223, 225, 226, 229, 248, 255, 257, 267, 278, 281, 287], "concret": [18, 42, 53, 61, 66, 67, 88, 90, 97, 101, 125, 180, 201, 205, 210, 267], "obviou": [18, 19, 20, 27, 52, 60, 197, 200, 209, 223, 281], "situat": [18, 31, 65, 86, 194, 226, 228, 230, 246, 279], "refus": [18, 287], "roughli": [18, 61, 62, 102, 126, 226, 249], "possibli": [18, 43, 53, 59, 61, 86, 88, 101, 178, 179, 203, 217, 218, 228, 243, 277, 283], "infinit": [18, 20, 24, 25, 39, 60, 61, 62, 65, 66, 67, 74, 75, 88, 97, 101, 111, 131, 161, 180, 197, 205, 210, 211, 212, 215, 216, 217, 218, 222, 223, 225, 228, 235, 248, 287, 288], "is_neg": [18, 20, 201], "unknow": 18, "resolv": [18, 19, 22, 24, 25, 26, 27, 28, 29, 30, 61, 219, 222, 228], "undecid": [18, 20, 26, 97, 200, 229, 283], "conclud": [18, 69, 84, 127, 191, 217, 228, 264], "particularli": [18, 65, 88, 200, 201, 220, 287, 288], "mix": [18, 34, 60, 67, 92, 97, 103, 184, 200, 201, 206, 210, 229, 232, 234, 236, 249], "ideal": [18, 43, 98, 122, 125, 135, 185, 193, 199, 201, 203, 204, 205, 206, 207, 222, 229, 255], "slow": [18, 20, 22, 27, 57, 61, 65, 88, 102, 115, 127, 147, 184, 194, 200, 201, 210, 211, 212, 213, 222, 226, 228, 229, 241, 242, 287], "indetermin": [18, 19, 61, 97, 203, 215, 228], "contradict": 18, "infer": [18, 37, 38, 53, 61, 88, 200, 209, 210, 215, 220, 226, 242], "prepar": [18, 120, 208], "presum": [18, 86, 200, 220, 243], "singletonregistri": [18, 61], "x1": [18, 20, 28, 29, 51, 61, 66, 142, 147, 200, 201, 211, 212, 222, 226, 228, 230, 248], "x2": [18, 28, 51, 61, 66, 142, 147, 200, 212, 226, 228, 230], "posifi": [18, 222], "_x": [18, 20, 97, 136, 140, 190, 193, 194, 201, 207, 222, 226, 242], "rep": [18, 52, 57, 61, 159, 197, 199, 200, 201, 204, 205, 206, 219, 222, 251], "feel": [18, 33, 142, 143, 222, 226, 228], "among": [18, 42, 43, 44, 45, 52, 53, 62, 89, 102, 206, 226, 231, 234, 236, 259], "behaviour": [18, 86, 91, 116, 203, 207, 213, 216], "symbolc": 18, "implicit": [18, 29, 43, 59, 61, 103, 120, 124, 143, 196, 226, 228, 232, 235, 242, 243, 255, 258, 265, 279], "tailor": 18, "assumptions0": [18, 61], "extended_neg": [18, 61], "extended_nonneg": [18, 61], "extended_nonposit": [18, 61], "extended_nonzero": [18, 61, 210], "extended_posit": [18, 61], "extended_r": [18, 39, 61, 210, 225, 229], "hermitian": [18, 27, 39, 61, 92, 93, 97, 158, 164, 175, 210], "irrat": [18, 22, 39, 41, 61, 101, 200, 206, 210, 218, 281], "noninteg": [18, 39, 61, 200, 210], "nonneg": [18, 20, 39, 61, 62, 63, 66, 69, 94, 142, 198, 200, 206, 223, 230, 287], "nonposit": [18, 39, 61, 66, 69, 142], "nonzero": [18, 20, 39, 40, 60, 61, 76, 97, 113, 198, 199, 200, 201, 210, 213, 229], "transcendent": [18, 26, 30, 31, 39, 61, 69, 88, 200, 205, 210, 228, 229, 283, 288], "field": [18, 29, 35, 39, 43, 61, 62, 63, 69, 79, 88, 147, 148, 187, 188, 192, 197, 198, 199, 201, 202, 204, 206, 207, 208, 223, 228, 241, 255, 258, 260, 261, 263, 265, 270, 272, 273], "antihermitian": [18, 39, 61], "mathbb": [18, 20, 25, 39, 44, 52, 60, 61, 62, 67, 69, 86, 92, 97, 139, 195, 197, 198, 200, 201, 203, 205, 206, 209, 217, 218, 220, 223, 229, 230, 287], "ii": [18, 67, 86, 88, 101, 206, 210, 218, 226, 229], "cup": [18, 206, 218, 229], "pm": [18, 22, 23, 25, 60, 86, 88, 198, 209, 217, 223, 226], "yi": 18, "composit": [18, 39, 42, 50, 52, 53, 61, 62, 79, 81, 88, 101, 104, 201, 203, 206, 209, 222, 229, 244], "2k": [18, 61, 66, 86, 101, 223], "pariti": [18, 53, 206], "product": [18, 35, 46, 49, 52, 53, 57, 59, 60, 61, 62, 63, 65, 66, 69, 71, 74, 76, 77, 84, 86, 88, 90, 91, 92, 94, 97, 101, 102, 111, 112, 113, 115, 119, 127, 140, 142, 150, 154, 155, 158, 160, 161, 162, 164, 167, 169, 170, 172, 173, 175, 180, 181, 184, 185, 187, 192, 193, 194, 195, 197, 198, 199, 201, 203, 205, 206, 207, 210, 211, 212, 215, 218, 219, 222, 223, 226, 227, 228, 229, 230, 232, 234, 235, 236, 242, 245, 248, 255, 259, 272], "le": [18, 44, 57, 61, 69, 86, 92, 101, 134, 203, 220, 230], "commutative_properti": [18, 61], "skew": [18, 84, 101, 230], "hermitian_matrix": 18, "complex_numb": [18, 39, 61], "algebraic_numb": [18, 39, 61], "transcendental_numb": [18, 61], "extended_real_number_lin": 18, "real_numb": [18, 39], "imaginary_numb": [18, 39, 61], "rational_numb": [18, 39], "irrational_numb": [18, 39, 61], "parity_": [18, 61], "prime_numb": [18, 61, 101], "composite_numb": [18, 61], "positive_real_numb": 18, "negative_numb": [18, 61], "inconsist": [18, 20, 36, 38, 60, 180, 185, 189, 193, 222, 226, 229], "inconsistentassumpt": 18, "deal": [18, 43, 60, 61, 65, 73, 81, 86, 88, 108, 115, 120, 121, 125, 191, 193, 194, 198, 203, 206, 223, 228, 239, 249, 251, 259, 264, 279, 281, 287], "is_zero_matrix": [18, 92, 199], "generalis": [18, 69, 86, 197], "gaussian": [18, 69, 88, 97, 101, 145, 203, 206, 223, 228, 230, 272, 283], "notion": [18, 42, 180, 183, 197, 229, 259, 264], "chain": [18, 20, 43, 52, 57, 61, 69, 78, 102, 193, 205, 230], "superset": [18, 41, 50, 56, 64, 142, 200, 218, 228], "vanilla": 18, "attach": [18, 53, 55, 86, 102, 104, 119, 120, 136, 194, 242, 244, 249], "is_commut": [18, 88, 164, 173, 248], "is_complex": [18, 61], "is_finit": [18, 61], "permit": [18, 53, 63, 67, 91, 101, 196], "formal": [18, 25, 42, 60, 61, 69, 86, 91, 144, 180, 200, 203, 214, 217, 267], "littl": [18, 20, 42, 53, 71, 97, 101, 102, 127, 180, 204, 206, 210, 220, 222, 230, 245, 259], "n1": [18, 43, 52, 61, 62, 125, 142, 144, 148, 184, 223, 230, 255], "n2": [18, 43, 52, 61, 62, 142, 144, 148, 223, 230], "misunderstand": 18, "is_nonneg": [18, 20, 201], "intent": [18, 43, 60, 61, 103, 243], "meaning": [18, 36, 38, 42, 62], "alon": [18, 62, 89, 203, 226, 228, 235, 248, 281, 282], "tempt": [18, 20, 61, 101], "meet": [18, 62, 217], "criteria": [18, 61, 282], "noncommut": [18, 61, 84, 282], "finiteset": [18, 26, 41, 42, 218, 229, 230, 288], "s1": [18, 52, 60, 74, 77, 84, 111, 186, 197, 206, 213, 223, 248, 258], "s2": [18, 52, 53, 60, 74, 77, 111, 186, 197, 206, 213, 217, 223, 248, 258], "bool": [18, 41, 43, 57, 59, 61, 62, 64, 67, 88, 89, 91, 92, 94, 97, 101, 103, 120, 121, 159, 187, 190, 196, 205, 206, 208, 210, 211, 212, 217, 218, 222, 225, 230, 242, 243, 248, 249, 255, 258, 279], "plai": [18, 60, 127, 137, 223, 279, 281, 282], "role": [18, 67, 208], "connect": [18, 55, 62, 63, 76, 77, 97, 102, 104, 107, 116, 119, 127, 130, 136, 197, 198, 199, 208, 226, 230, 248, 255], "is_finite_set": 18, "zero_matrix": 18, "setsymbol": 18, "is_compar": [18, 61], "capitalis": 18, "4142135623731": [18, 28, 210, 228], "predict": [18, 175, 222, 248], "expreal": 18, "fuzzy_and": [18, 19, 20], "fuzzy_or": [18, 19], "is_extended_nonneg": 18, "classmethod": [18, 20, 35, 37, 38, 43, 45, 50, 52, 53, 55, 56, 61, 67, 68, 69, 76, 92, 97, 111, 161, 172, 173, 175, 199, 201, 205, 206, 210, 218, 236, 241], "is_extended_r": 18, "is_infinit": 18, "is_extended_neg": 18, "is_extended_posit": [18, 19], "_eval_is_finit": 18, "is_extended_nonposit": 18, "_eval_is_algebra": 18, "is_nonzero": [18, 76], "_eval_is_integ": 18, "_eval_is_zero": [18, 20], "__new__": [18, 20, 43, 52, 61, 282], "verifi": [18, 22, 27, 29, 33, 41, 52, 58, 62, 63, 125, 197, 203, 209, 226, 228, 229, 231, 232, 287], "importantli": [18, 20, 207, 245], "reject": [18, 19, 101, 223, 251], "_eval_is_": 18, "is_algebra": [18, 61, 201], "interfer": [18, 210], "determinist": [18, 52, 88, 101, 203, 204], "reach": [18, 101, 111, 205, 206, 226], "claus": [18, 91], "flow": [18, 205], "inner": [18, 29, 60, 86, 97, 158, 161, 162, 167, 169, 170, 173, 175, 185, 189, 199, 205, 212, 255, 272], "optimis": [18, 226], "stage": [18, 42, 60, 101, 217, 287], "briefli": [18, 198, 203], "managedproperti": [18, 61], "metaclass": [18, 61], "default_assumpt": 18, "_ask": 18, "_eval_i": 18, "enumer": [18, 32, 45, 50, 53, 56, 64, 68, 86, 91, 101, 205, 206, 220, 245, 248, 267], "randomis": [18, 238, 274], "unresolv": 18, "factrul": 18, "_assume_rul": 18, "preprocess": [18, 88, 208], "defined_fact": 18, "full_impl": 18, "defaultdict": [18, 61, 248], "precomput": [18, 66, 101, 249], "static": [18, 35, 43, 52, 53, 55, 61, 67, 74, 75, 76, 77, 94, 105, 127, 135, 196, 210, 216, 218, 230, 242], "knowabl": 18, "stdfactkb": 18, "_eval_is_r": [18, 20, 206], "_assumpt": [18, 61], "amongst": [18, 228], "indirectli": 18, "manifest": [18, 198], "jointli": 18, "fundament": [18, 20, 41, 44, 51, 79, 86, 88, 97, 180, 200, 205, 223, 226, 230, 283], "theoret": [18, 42, 44, 52, 62, 66, 204, 205, 220, 279], "isposit": 19, "xpo": 19, "xneg": 19, "strictgreaterthan": [19, 61, 210], "analogu": [19, 39, 60, 75, 200, 201], "piecewis": [19, 20, 43, 60, 66, 69, 88, 91, 104, 173, 210, 212, 213, 228, 229, 230, 249, 277], "nonetyp": [19, 43], "quirk": 19, "both_posit": 19, "falsei": 19, "both_positive_bett": 19, "negat": [19, 20, 39, 61, 67, 91, 111, 185, 199, 201, 203, 206], "fuzzy_not": [19, 20], "both_positive_best": 19, "silent": [19, 65, 101, 242], "carefulli": [19, 61, 185, 203, 212], "truth": [19, 36, 37, 38, 39, 40, 61, 92, 222], "bitwis": [19, 64, 91], "footnot": [19, 180, 282, 283, 286], "combinatori": [20, 45, 53, 60, 61, 68, 69, 206, 212, 222, 248, 250, 267, 287], "dig": [20, 43, 282], "handler": [20, 36, 37, 38, 39, 40, 61, 68, 97], "spectrum": 20, "matter": [20, 41, 50, 53, 60, 61, 66, 86, 88, 140, 217, 248, 281, 282], "use_unicod": [20, 27, 41, 42, 43, 65, 69, 88, 89, 97, 105, 111, 147, 190, 195, 197, 198, 209, 210, 211, 229, 230, 277, 281, 283, 286, 287, 288], "np": [20, 29, 66, 84, 101, 125, 242, 249], "arang": [20, 242, 276], "arrai": [20, 23, 27, 28, 29, 43, 52, 53, 57, 58, 62, 69, 88, 92, 94, 97, 101, 102, 109, 142, 172, 196, 199, 201, 206, 210, 229, 230, 233, 235, 236, 237, 242, 243, 245, 249, 270, 283], "ultim": [20, 67, 180], "cosin": [20, 61, 67, 69, 76, 88, 116, 119, 185, 194, 206, 207, 213, 219, 230, 255, 287], "todai": [20, 197], "operatornam": [20, 66, 67, 69, 86, 88, 195, 198, 206, 210, 213, 218, 220, 228], "modern": [20, 43, 197, 204, 210], "recal": [20, 61, 97, 203, 205, 220, 279, 281, 282, 288], "redefin": [20, 53, 61, 137, 139, 198, 249], "antipattern": [20, 280], "stai": [20, 205], "trig": [20, 61, 88, 206, 210, 219, 222, 287], "wouldn": 20, "cheap": [20, 61, 101], "as_two_term": [20, 61], "split": [20, 43, 61, 62, 65, 86, 88, 103, 203, 205, 208, 209, 210, 228, 230, 236, 241, 248, 253, 282, 287], "hadn": 20, "wors": [20, 91, 222], "expand_trig": [20, 61, 276], "mid": [20, 44, 62, 65, 105, 218, 223], "troubl": [20, 69], "bigger": [20, 43, 61, 66, 220, 226, 287], "deduc": [20, 43, 86, 91, 220, 281], "disallow": [20, 61, 206, 211, 222, 244], "great": [20, 144, 207, 210, 223, 249], "simplest": [20, 29, 42, 91, 97, 101, 102, 195, 196, 207, 211, 219, 222, 226, 277, 287], "\u03c0": [20, 65, 147, 210, 229, 277, 281, 287, 288], "as_independ": [20, 61, 229], "coeff": [20, 61, 63, 91, 142, 201, 205, 206, 216, 222, 226, 228, 236, 287], "apart": [20, 35, 52, 57, 61, 65, 67, 88, 191, 198, 201, 203, 206, 209, 212, 223, 229, 236, 260, 262, 282], "is_even": [20, 49, 52, 53], "nonreal": [20, 28, 228], "cosh": [20, 61, 67, 69, 80, 86, 207, 210, 211, 220, 222, 228, 283, 287], "5919532755215": 20, "_eval_is_nonneg": 20, "exercis": [20, 52, 245, 280, 287], "_eval_is_posit": 20, "as_add": [20, 61], "pi_": 20, "fuzzy_": 20, "deduct": [20, 43], "subtl": [20, 219], "nontrivi": [20, 52, 61, 101], "_eval_evalf": [20, 206], "prec": [20, 28, 61, 71, 77, 101, 109, 195, 201, 206, 207, 222, 228], "dp": [20, 43, 61, 64, 69, 101, 200, 201, 228, 244], "53": [20, 62, 64, 97, 144, 198, 200, 201], "459697694131860": 20, "hook": [20, 102, 210], "_eval_rewrit": [20, 61], "rewritten": [20, 61, 66, 67, 69, 88, 125, 172, 217, 222, 226, 228, 287], "caller": 20, "ve": [20, 127], "nonintegr": 20, "iff": [20, 39, 53, 62, 91, 97, 194, 197, 205, 220, 223, 241], "isint": 20, "xy": [20, 41, 42, 75, 97, 122, 194, 196, 197, 203, 210, 222, 229, 265, 282, 287], "happi": 20, "demand": [20, 34], "_eval_expand_": 20, "expand_": 20, "predefin": [20, 63, 142, 200, 210, 211, 222, 229, 236, 255, 260], "expand_log": [20, 43, 61, 222], "_eval_expand_trig": 20, "sophist": [20, 102, 228], "th": [20, 35, 44, 52, 53, 59, 62, 63, 65, 66, 67, 69, 90, 91, 97, 101, 120, 201, 203, 205, 206, 212, 215, 220, 223, 226, 228, 230, 231, 236], "x_1": [20, 44, 51, 52, 62, 66, 83, 97, 170, 198, 201, 203, 206, 212, 223, 229], "ldot": [20, 25, 44, 51, 52, 60, 61, 62, 66, 69, 86, 101, 105, 180, 195, 197, 198, 201, 203, 205, 210, 213, 217, 220, 223, 228, 231, 287], "x_k": [20, 62, 203], "dy": [20, 43, 63, 78, 97, 104, 114, 142, 206, 210, 223, 226, 227, 277], "dz": [20, 104, 114, 220], "argumentindexerror": 20, "varion": 20, "middl": [20, 69, 77, 86, 97, 105, 155, 196, 220, 287], "iverson": 20, "printmethod": [20, 210], "latexprint": 20, "_latex": [20, 210], "_print": [20, 210], "_m": [20, 69], "_n": [20, 62, 66, 69, 88, 206, 220, 229], "arcversin": 20, "aversin": 20, "im": [20, 40, 61, 67, 86, 95, 197, 210, 211, 218, 226, 283], "sinh": [20, 41, 61, 65, 67, 69, 80, 86, 207, 210, 211, 220, 287], "expand_complex": [20, 61], "analog": [20, 22, 27, 54, 60, 62, 66, 140, 193, 194, 197, 198, 199, 203, 215, 231, 248], "vers": 20, "geometr": [20, 63, 70, 71, 72, 73, 74, 75, 76, 77, 78, 97, 144, 194, 197, 204, 230, 283], "angl": [20, 35, 67, 69, 70, 71, 72, 74, 75, 76, 77, 107, 113, 119, 124, 125, 127, 128, 129, 130, 136, 139, 144, 147, 148, 149, 172, 180, 185, 193, 194, 195, 210, 219, 229, 255, 257, 260, 287], "horizont": [20, 31, 42, 71, 74, 76, 92, 107, 147, 196, 199, 210], "distanc": [20, 42, 45, 53, 71, 74, 75, 76, 77, 104, 105, 114, 115, 119, 129, 130, 144, 148, 178, 189, 191, 264], "rightmost": [20, 175], "scientificamerican": 20, "uniti": [20, 67, 69, 86, 170, 205], "secret": [20, 62], "teacher": 20, "taught": [20, 88], "nr": 20, "sake": [20, 66, 223], "simplic": [20, 220, 226], "divisor": [20, 39, 52, 61, 62, 97, 101, 197, 198, 200, 201, 203, 204, 205, 206, 209], "hardwar": [20, 43], "regard": [20, 44, 62, 69, 89, 143, 175, 197, 198, 212, 228, 229], "c99codeprint": [20, 43, 210], "cxx11codeprint": [20, 210], "cfunction": 20, "e2": [20, 41, 61, 64, 71, 78, 88, 97, 101, 109, 125, 200, 205, 217, 226, 229, 230, 248], "93accumulate_oper": 20, "fused_multipli": 20, "93add": 20, "ccode": [20, 43, 210, 235, 243], "cxxcode": [20, 43, 210], "_ccode": [20, 210], "_y": [20, 24, 136, 140, 190, 193, 194], "_z": [20, 88, 136, 140, 193, 194, 230], "_cxxcode": [20, 210], "std": [20, 210, 230], "28318530717959": 20, "trigonometricfunct": 20, "inversetrigonometricfunct": 20, "reciprocaltrigonometricfunct": 20, "bypass": [20, 226], "fragil": 20, "tend": [20, 34, 43, 61, 66, 203, 205, 215, 217, 220, 280, 287], "prone": [20, 25, 43, 61], "move": [20, 52, 53, 61, 62, 75, 77, 104, 119, 127, 129, 135, 163, 189, 193, 194, 222, 231, 240, 262], "task": [21, 23, 32, 67, 135, 136, 142, 200, 205, 277, 284], "deeper": [21, 234, 282], "explor": [21, 137, 138, 196, 205, 245, 287], "ax": [22, 23, 25, 27, 35, 62, 65, 71, 74, 86, 93, 97, 104, 109, 119, 147, 172, 185, 194, 195, 196, 199, 207, 223, 226, 229, 231, 232, 235, 255, 257, 259, 262, 264, 287], "bx": [22, 23, 86, 230, 236], "yield": [22, 24, 25, 26, 27, 29, 30, 41, 43, 52, 61, 62, 66, 69, 85, 86, 101, 104, 111, 117, 169, 195, 198, 203, 205, 206, 211, 212, 217, 218, 219, 222, 223, 228, 245, 248, 283], "4ac": [22, 23, 223], "2a": [22, 23, 230], "quadrat": [22, 25, 61, 62, 88, 101, 197, 201, 205, 206, 223, 228, 230], "convei": 22, "five": [22, 25, 42, 50, 86, 107, 210, 223], "rootof": [22, 67, 206], "ill": [22, 178], "spuriou": [22, 203, 228], "interv": [22, 24, 26, 29, 39, 41, 52, 61, 65, 67, 69, 70, 71, 74, 77, 86, 88, 91, 101, 161, 170, 201, 203, 205, 206, 213, 216, 218, 225, 229, 230, 288], "irreduc": [22, 198, 201, 203, 205, 206, 209, 230, 236, 287], "reveal": [22, 25, 27, 43, 101, 229, 282], "lie": [22, 53, 63, 75, 76, 77, 206, 230, 266, 273], "cubic": [22, 69, 197, 206, 223, 228], "quartic": [22, 71, 206, 228], "fourth": [22, 61, 62, 198, 226, 277], "687": 22, "144": [22, 31, 66, 88, 195], "emphas": [22, 60], "quintic": [22, 206, 228], "fifth": 22, "techniqu": [22, 26, 27, 29, 44, 56, 86, 88, 210, 212, 222, 226, 229, 283], "abel": [22, 31, 97], "ruffini": [22, 31, 97], "theorem": [22, 31, 49, 62, 69, 71, 77, 88, 92, 97, 101, 114, 115, 127, 175, 184, 193, 197, 200, 203, 217, 220, 223, 229], "expression_expand": 22, "symbolic_expand": 22, "cube": [22, 41, 43, 45, 52, 54, 67, 88, 203, 204, 223, 229, 265], "nois": 22, "neglig": 22, "compon": [22, 42, 43, 57, 61, 63, 76, 88, 94, 97, 112, 119, 122, 135, 136, 140, 147, 172, 177, 184, 185, 191, 192, 193, 194, 195, 196, 197, 198, 199, 206, 208, 230, 232, 235, 236, 245, 248, 255, 258, 261, 262], "18482169793536e": 22, "55872552179222e": 22, "contrarili": 22, "rq0": 22, "rq1": 22, "rq2": 22, "rq3": 22, "237": [22, 204], "36": [22, 55, 62, 66, 77, 88, 92, 97, 101, 105, 206, 210, 223, 226, 230, 265], "349745826211722": 22, "438990337475312": 22, "wilkinson": [22, 92], "expression_complex": 22, "symbolic_complex": 22, "expression_complex_poli": 22, "travers": [22, 77, 101, 117, 206, 219, 235, 245, 282], "loop": [22, 25, 29, 42, 43, 101, 111, 128, 185, 196, 207, 210, 226, 245, 248, 282], "my_real_root": 22, "my_root": 22, "324": [22, 101, 204], "fifth_ord": 22, "16730397826142": 22, "181232444469875": 22, "08395410131771": 22, "764884433600585": 22, "352471546031726": 22, "polyerror": [22, 203, 206], "unsolvablefactorerror": [22, 206, 228], "complexrootof": [22, 61, 97, 201, 206, 226], "fifth_order_solv": 22, "167303978": 22, "1812324445": 22, "083954101": 22, "7648844336": 22, "352471546": 22, "sole": 22, "croot": 22, "r0": [22, 206], "r1": [22, 35, 71, 74, 90, 104, 105, 148, 185, 191, 206, 255], "r2": [22, 35, 63, 74, 90, 92, 104, 105, 148, 185, 206, 210, 222, 255], "r3": [22, 37, 90, 104, 105, 222], "r4": [22, 37, 90, 104], "opposit": [22, 57, 77, 91, 92, 116, 198, 201, 218, 222, 229, 237, 248, 255, 257, 287], "robustli": 22, "diophantin": [23, 24, 101, 203, 224, 267], "guidanc": 23, "2z": [23, 30, 69, 229, 230], "4z": [23, 30, 229], "6z": [23, 30], "739085133215161": [23, 28, 30, 31, 228], "9y": [23, 29], "3x": [23, 29, 61, 103, 203, 229, 279], "cc": [23, 27, 62, 77, 195, 198, 200, 206, 283], "2e": [23, 27, 61], "ce": [23, 27], "2pq": [23, 25], "linprog": 24, "as_set": [24, 91], "accomplish": [24, 88, 139, 142, 262], "exclud": [24, 29, 31, 43, 60, 61, 88, 97, 117, 142, 198, 201, 203, 206, 216, 226, 228, 241, 244, 248], "rel_op": [24, 61], "relations_sort": 24, "append": [24, 29, 52, 61, 62, 97, 105, 142, 170, 196, 201, 210, 228, 231, 243, 244, 248, 287], "x_y_reduc": 24, "insight": [24, 280], "x_reduc": 24, "y_reduc": 24, "solve_univariate_inequ": [24, 225, 229], "calculu": [24, 26, 61, 66, 88, 97, 142, 191, 219, 230, 261, 262, 263, 266, 267, 278, 280, 285], "reflect": [24, 31, 45, 49, 53, 61, 71, 72, 77, 90, 107, 144, 147, 148, 185], "parameter": [25, 63, 70, 71, 74, 77, 223], "pythagorean": [25, 223], "sage": [25, 61, 101, 195, 281], "ellipticcurv": 25, "ineffici": [25, 61, 97, 200], "my_sym": 25, "pythag_eq": 25, "sym": [25, 41, 51, 52, 57, 61, 66, 185, 210, 213, 218, 222, 223, 228, 230, 236, 248, 287], "pythag": 25, "a_1x_1": [25, 223], "a_2x_2": [25, 223], "a_nx_n": [25, 223], "bxy": [25, 223], "cy": [25, 223], "ei": [25, 29, 69, 86, 205, 210, 220, 223, 226, 236], "homogen": [25, 84, 88, 97, 111, 201, 203, 206, 223, 226, 227, 230], "ternari": [25, 43, 61, 210, 223], "cz": [25, 64, 223], "dxy": [25, 223], "eyz": [25, 223], "fzx": [25, 223], "a_": [25, 57, 61, 62, 69, 86, 90, 92, 94, 111, 112, 140, 212, 220, 223, 226, 228, 230, 231], "pythogorean": 25, "subscript": [25, 27, 53, 201, 210, 220, 223, 248], "solution_dict": [25, 29], "zip": [25, 41, 51, 62, 91, 101, 206, 216, 223, 226, 245, 248], "elegantli": 25, "forget": [25, 42, 287], "solution_list": [25, 26], "solution_first": 25, "solution_p4q3": 25, "p_val": 25, "q_val": 25, "pythag_v": 25, "union": [25, 34, 39, 41, 43, 50, 52, 59, 91, 103, 197, 205, 210, 216, 217, 218, 225, 229, 230, 248], "4y": [25, 203, 229, 276], "rearrang": [26, 112, 120, 137, 138, 159, 226], "eqn": [26, 29, 41, 229], "solutions_set": 26, "solution_set": 26, "256": [26, 43, 52, 101, 206, 210], "solution_outside_2_3": 26, "critic": [26, 41, 148, 193, 205, 229], "minima": [26, 229], "critical_point": 26, "point1": [26, 186, 258], "point2": [26, 186, 258], "curvatur": [26, 144, 148], "membership": [26, 59, 205, 218], "candid": [26, 52, 61, 97, 101, 203, 222], "solution_set_arg": 26, "linalg": [27, 28, 43], "lu_solv": [27, 97, 199], "linear_eq_to_matrix": [27, 226, 229], "matrixbas": [27, 92, 93, 94, 97, 199], "column": [27, 39, 42, 43, 44, 89, 91, 92, 94, 97, 98, 100, 111, 120, 124, 127, 140, 170, 177, 185, 190, 195, 199, 205, 210, 226, 229, 235, 255], "row": [27, 39, 42, 43, 44, 50, 53, 61, 66, 92, 93, 94, 97, 98, 100, 101, 111, 124, 125, 127, 140, 142, 143, 170, 185, 194, 199, 205, 210, 220, 229, 230, 235, 249, 255, 257], "shapeerror": [27, 92, 94, 97], "penros": [27, 94, 97], "pseudoinvers": [27, 97], "lu": [27, 94, 97, 199, 204], "lusolv": [27, 93, 97, 119, 121, 139, 143, 228, 283], "repeatedli": [27, 101, 112, 242], "b2": [27, 69, 101, 104, 105, 116, 125, 142, 185, 199, 201, 210, 220, 223, 226, 261], "solution2": 27, "almost": [27, 86, 95, 103, 177, 196, 197, 201, 206, 207, 226, 230, 244, 245, 248, 281], "prioriti": [27, 43, 84, 115, 125, 194, 249], "computation": [27, 57, 67, 119, 120, 121], "tractabl": [27, 229], "rapidli": [27, 61, 65, 86, 217], "dimens": [27, 43, 45, 62, 63, 69, 70, 72, 74, 75, 76, 78, 90, 92, 94, 97, 100, 104, 112, 129, 149, 159, 161, 164, 169, 178, 179, 182, 183, 185, 196, 199, 210, 223, 226, 228, 230, 231, 235, 236, 243, 255, 258, 260, 272], "4x4": [27, 76, 100, 147, 230], "a\u2080\u2080": 27, "a\u2080\u2081": 27, "a\u2080\u2082": 27, "a\u2080\u2083": 27, "a\u2081\u2080": 27, "a\u2081\u2081": 27, "a\u2081\u2082": 27, "a\u2081\u2083": 27, "a\u2082\u2080": 27, "a\u2082\u2081": 27, "a\u2082\u2082": 27, "a\u2082\u2083": 27, "a\u2083\u2080": 27, "a\u2083\u2081": 27, "a\u2083\u2082": 27, "a\u2083\u2083": 27, "det": [27, 35, 97, 98, 142, 194, 199, 283], "a\u2081": [27, 105, 287], "\u2083": [27, 210], "slowest": [27, 88, 102], "symmetr": [27, 39, 40, 44, 49, 52, 53, 57, 77, 92, 93, 94, 97, 101, 184, 195, 201, 203, 206, 209, 218, 220, 236, 248], "triangular": [27, 39, 92, 93, 97, 199, 205, 228, 230, 265], "prove": [27, 61, 86, 88, 97, 197, 217, 226, 261], "noninvertiblematrixerror": [27, 94, 283], "overli": 28, "float64": [28, 43, 102, 230], "fsolv": 28, "findroot": [28, 69, 228], "overdetermin": [28, 228, 229], "toler": [28, 43, 61, 65, 201, 222, 228], "18466446988997098217": 28, "16840434497100886801e": 28, "tweak": [28, 210, 228], "closest": [28, 61, 74], "closer": [28, 127, 229, 282], "00000000000000": [28, 61, 65, 176, 210, 230], "bisect": [28, 101, 206, 228], "multidimension": [28, 204, 241], "19287309935246": [28, 228], "27844411169911": [28, 228], "192873099352460791205211": 28, "278444111699106966687122": 28, "root_scalar": 28, "lam_f": [28, 249], "3416277185114782": 28, "slightli": [28, 34, 43, 57, 101, 103, 127, 196, 197, 201, 203, 206, 210, 220, 222], "x_valu": 28, "12757857962640e": 28, "73908513321516": 28, "4877893607115270300540019e": 28, "6543612251060553497428174e": 28, "solve_ivp": 29, "checkodesol": [29, 226], "c2": [29, 62, 71, 78, 92, 94, 119, 161, 175, 218, 226, 230, 258, 261, 288], "ypp": 29, "yp": 29, "classify_od": [29, 226], "choic": [29, 43, 53, 66, 69, 86, 88, 102, 139, 171, 180, 184, 185, 193, 201, 203, 206, 210, 222, 226, 248, 281], "ic": [29, 101, 226], "y0": [29, 61, 80, 82, 84, 226], "y1": [29, 61, 142], "y_": [29, 43, 69, 86, 113, 195], "initialor": 29, "classic": [29, 41, 67, 69, 97, 161, 177, 185, 194, 197, 272], "explic": 29, "eqs_one_soln_set": 29, "solutions_one_soln_set": 29, "solution_one_soln_set_dict": 29, "outer": [29, 88, 122, 140, 142, 158, 163, 164, 185, 187, 189, 194, 212, 218, 234, 255, 258, 259], "fashion": [29, 43, 61, 67, 94, 127, 137, 138, 140, 194, 197, 248], "solutions_list": 29, "leverag": [29, 43, 102, 210], "chemic": 29, "kinet": [29, 116, 120, 122], "r_f": [29, 206], "k_f": 29, "y_0": [29, 223, 226], "y_1": [29, 44, 223, 230], "r_b": 29, "k_b": 29, "y_2": [29, 44, 223, 230], "dt": [29, 63, 69, 129, 142, 184, 185, 187, 193, 194, 206, 226, 287], "vec": [29, 92, 97, 119, 142, 185, 195, 203, 261, 262, 264], "bmatrix": [29, 92, 94, 97, 129, 137, 138, 139, 140, 185, 194, 223], "pyplot": [29, 84, 142], "plt": [29, 84, 142], "y2": [29, 61, 142, 200], "kf": 29, "kb": 29, "rf": [29, 60, 66, 206], "rb": [29, 252], "speci": [29, 60, 61], "ydot": 29, "k_val": 29, "42": [29, 43, 50, 61, 64, 66, 74, 75, 77, 92, 93, 95, 97, 99, 101, 201, 206, 223, 241], "t_eval": 29, "linspac": [29, 43, 84, 102, 125, 142], "50": [29, 44, 52, 64, 65, 66, 69, 77, 97, 101, 104, 105, 148, 206, 210, 219, 228], "concentr": [29, 105, 230], "legend": [29, 142, 196, 213], "NO": [29, 175], "br": 29, "_2": [29, 97, 119, 184, 185, 195, 226], "nobr": 29, "shadow": [29, 54], "xlabel": [29, 196], "ylabel": [29, 196], "annot": [29, 101, 196, 210], "png": [29, 42, 89, 97, 104, 105, 109, 190, 196, 210, 213], "hire": [29, 97, 104, 105, 109, 196, 213], "_integr": [29, 226, 227], "separable_integr": [29, 226], "routin": [29, 43, 50, 60, 61, 62, 63, 86, 91, 92, 97, 101, 147, 175, 199, 203, 206, 209, 210, 211, 222, 223, 226, 227, 228, 229, 242, 248, 262], "hang": [29, 97, 129, 133, 226, 227], "unintegr": 29, "all_integr": [29, 226, 227], "coupl": [29, 61, 97, 139, 154, 169, 172, 195], "educ": [29, 62, 97], "chaotic": 29, "lorenz": 29, "pendulum": [29, 119, 124, 126, 130, 135, 139, 143, 193, 272], "scienceworld": 29, "theta_1": 29, "theta_2": 29, "2g": 29, "theta1": [29, 129], "theta2": 29, "eq1": [29, 71, 226, 228, 229], "eq2": [29, 71, 91, 226, 229], "interrog": 30, "overconstrain": 30, "solvabl": [31, 52, 107, 223, 226, 229, 288], "groebnerbasi": [31, 198, 206, 209], "lambert": [31, 67, 88, 207], "decompos": [31, 52, 53, 59, 61, 63, 67, 72, 97, 101, 159, 168, 169, 171, 201, 206, 209, 230], "lack": [31, 43, 63, 65, 122, 210, 277], "crootof": [31, 61, 206, 226, 228], "765": 31, "352": 31, "181": 31, "08": [31, 127], "total": [31, 44, 50, 52, 61, 66, 77, 90, 91, 92, 94, 127, 129, 137, 144, 148, 154, 159, 172, 181, 195, 201, 203, 206, 219, 222, 226, 234, 236, 265], "scroll": 31, "56": [31, 64, 88, 101, 206], "1307": 31, "432": [31, 74, 205], "434607": 31, "0509758447494279": 31, "313552108895239": 31, "14751999969868": 31, "estim": [31, 41, 60, 61, 65, 86, 277], "preserv": [31, 42, 43, 52, 61, 97, 173, 201, 206, 211, 212, 222], "77245385090552": 31, "4142135623730951": 31, "varieti": [31, 43, 44, 53, 61, 102, 105, 140, 197, 204, 206, 230, 248], "risk": 31, "parse_latex": [31, 103], "central": [32, 52, 58, 69, 71, 77, 116, 122, 140, 196, 205, 206, 223, 230], "pypi": 33, "continuum": [33, 272], "qtconsol": [33, 286], "nicer": [33, 61, 133], "setupegg": 33, "enthought": 33, "canopi": 33, "activepython": 33, "spack": 33, "freshli": 33, "starter": 33, "sy": [33, 43, 63, 125, 142, 210, 241, 252, 261, 279], "wherev": [33, 125, 222, 229, 259], "visit": [33, 45, 52, 61, 66, 284], "chat": 33, "gitter": [33, 283], "excel": [33, 65, 205, 285], "ticket": 33, "export": [34, 210], "latin": 34, "clunki": 34, "collid": [34, 236], "win": 34, "throwawai": 34, "surviv": 34, "foo": [34, 41, 43, 61, 170, 190, 248, 251], "report": [34, 41, 52, 61, 74, 92, 101, 207, 218, 229, 241, 283, 288], "stick": 34, "_clash1": [34, 61], "_clash2": [34, 61], "multi": [34, 61, 62, 126, 135, 142, 155, 159, 169, 196, 210, 229, 272], "_clash": [34, 61], "sympif": [34, 61], "real_field": 35, "instanti": [35, 42, 43, 53, 61, 69, 74, 76, 77, 94, 97, 165, 173, 185, 196, 197, 201, 205, 230, 255, 259], "q1": [35, 97, 104, 115, 125, 127, 128, 129, 130, 132, 133, 134, 137, 138, 139, 143, 184, 185, 187, 189, 190, 193, 194, 200, 255, 257], "q2": [35, 104, 115, 125, 127, 128, 129, 130, 132, 133, 134, 137, 138, 143, 184, 185, 187, 189, 190, 193, 194, 200, 255, 257], "euclideanspac": 35, "realnormedalgebra": 35, "q3": [35, 115, 127, 128, 130, 132, 133, 134, 137, 185, 187, 189, 194, 255, 257], "bi": [35, 61, 67, 69, 88, 194, 217, 226], "cj": 35, "dk": [35, 104, 205], "atan2": [35, 40, 63, 67, 149, 210, 255], "atan": [35, 40, 63, 65, 67, 72, 77, 85, 88, 129, 143, 144, 207, 210, 212], "arc_coplanar": 35, "arc": [35, 67, 287], "coplanar": [35, 75, 194], "parallel": [35, 71, 74, 75, 77, 88, 108, 111, 114, 193, 194, 203, 261, 265], "vector_coplanar": 35, "is_pur": 35, "mathbf": [35, 94, 120, 135, 137, 138, 140, 180, 184, 185, 190, 191, 193, 194, 210, 220, 231, 259, 260, 262, 264, 265], "versor": 35, "0i": 35, "0j": [35, 200], "0k": 35, "vector_part": 35, "from_axis_angl": 35, "radian": [35, 67, 70, 71, 72, 74, 75, 76, 97, 109, 125, 148, 149, 185], "from_rotation_matrix": 35, "orthogon": [35, 39, 76, 90, 97, 173, 185, 194, 255, 257], "index_vector": 35, "mod": [35, 62, 67, 91, 97, 98, 101, 171, 197, 199, 200, 201, 203, 205, 206, 210, 212, 220, 223], "magnitud": [35, 43, 60, 61, 65, 69, 102, 104, 105, 107, 109, 129, 142, 173, 182, 185, 191, 194, 196, 255, 262, 264], "norm": [35, 97, 173, 185, 201, 203, 205, 206], "scalar_part": 35, "is_zero_quaternion": 35, "mensor": 35, "60": [35, 47, 52, 54, 60, 61, 66, 69, 88, 97, 101, 104, 105, 209, 210, 223, 226, 248], "pth": 35, "668": 35, "224": [35, 178, 204], "336": 35, "448": 35, "pow_cos_sin": 35, "900": 35, "1800": [35, 62], "2700": [35, 104], "3600": [35, 66], "rotate_point": 35, "coordin": [35, 43, 62, 63, 67, 69, 70, 72, 76, 78, 94, 97, 104, 107, 109, 113, 119, 120, 121, 124, 125, 126, 127, 128, 130, 132, 135, 136, 137, 138, 141, 143, 151, 153, 172, 173, 176, 184, 185, 186, 187, 189, 191, 194, 197, 205, 206, 218, 226, 255, 257, 258, 261, 263, 265, 270, 272], "to_axis_angl": 35, "to_rotation_matrix": 35, "assumptionkei": 36, "proposit": [36, 38, 91], "is_tru": [36, 38, 39], "assumptionscontext": [36, 37, 38], "global_assumpt": [36, 37, 38], "discern": [36, 38], "refin": [36, 38, 61, 92, 197, 201, 205, 206, 222, 243, 267], "progress": [36, 38, 101, 243], "inherit": [36, 61, 68, 91, 94, 95, 119, 164, 173, 195, 210, 230, 235, 243, 244], "askhandl": 36, "mere": [37, 38, 43, 65, 170], "thin": [37, 97, 131, 144], "undefinedpred": [37, 38], "sexi": [37, 38], "sexyprimepred": [37, 38], "sexyprim": [37, 38], "int1": [37, 38], "int2": [37, 38], "assump": [37, 38], "predicate_": [37, 38], "mathematical_log": [37, 38], "sexy_prim": [37, 38], "resolut": [37, 38, 223], "askpredicatehandl": [37, 38], "r5": [38, 222], "r6": 38, "notabl": [38, 43, 64, 69, 86, 102, 200], "truth_maintenance_system": 38, "istruepred": 39, "gt": [39, 43, 61, 230, 248], "istruehandl": 39, "commutativepred": 39, "commutativehandl": 39, "finitepred": 39, "nor": [39, 41, 61, 91, 101, 149, 196, 206, 217, 219, 226, 236, 255], "nan": [39, 40, 61, 67, 69, 117, 222, 230, 277], "finitehandl": 39, "r7": 39, "infinitepred": 39, "infinitehandl": 39, "symmetricpred": 39, "transpos": [39, 42, 92, 94, 97, 111, 142, 158, 185, 194, 199, 205, 223, 231, 236, 237, 283], "diagon": [39, 66, 92, 93, 94, 97, 100, 124, 147, 199, 232], "symmetrichandl": 39, "r8": 39, "symmetric_matrix": 39, "invertiblepred": 39, "fullrank": [39, 43], "invertiblehandl": 39, "r9": 39, "invertible_matrix": 39, "orthogonalpred": 39, "tm": [39, 148], "mm": [39, 42, 101, 120, 127, 132, 133, 173, 199], "orthogonalhandl": 39, "r10": 39, "orthogonal_matrix": 39, "unitarypred": 39, "unitari": [39, 88, 101, 159, 164, 195], "unitaryhandl": 39, "r11": 39, "unitary_matrix": 39, "positivedefinitepred": 39, "tmz": 39, "positive_definit": 39, "positivedefinitehandl": 39, "r12": 39, "definite_matrix": 39, "uppertriangularpred": 39, "m_": [39, 138, 195, 203], "ij": [39, 175, 180, 195, 230], "zeromatrix": [39, 94], "upper_triangular": [39, 92], "uppertriangularhandl": 39, "r13": 39, "uppertriangularmatrix": 39, "lowertriangularpred": 39, "lower_triangular": [39, 92], "lowertriangularhandl": 39, "r14": 39, "lowertriangularmatrix": 39, "diagonalpred": 39, "diagonalhandl": 39, "r15": 39, "diagonal_matrix": 39, "fullrankpred": 39, "rank": [39, 43, 44, 45, 50, 52, 53, 55, 56, 57, 76, 90, 97, 98, 185, 187, 197, 199, 201, 203, 205, 231, 235, 236, 283], "linearli": [39, 43, 69, 85, 97, 203, 226, 228, 236], "fullrankhandl": 39, "squarepred": 39, "squarehandl": 39, "r16": 39, "square_matrix": 39, "integerelementspred": 39, "integer_el": 39, "integerelementshandl": 39, "realelementspred": 39, "real_el": 39, "realelementshandl": 39, "complexelementspred": 39, "complex_el": 39, "complexelementshandl": 39, "singularpred": 39, "singular": [39, 43, 53, 61, 65, 67, 68, 69, 83, 84, 86, 88, 97, 104, 106, 139, 185, 197, 204, 217, 226, 229, 255, 272, 277], "singularhandl": 39, "fore": 39, "r17": 39, "singularmatrix": 39, "normalpred": 39, "normalhandl": 39, "r18": 39, "normal_matrix": 39, "triangularpred": 39, "triangularhandl": 39, "r19": 39, "triangular_matrix": 39, "unittriangularpred": 39, "unit_triangular": 39, "unittriangularhandl": 39, "evenpred": 39, "evenhandl": 39, "oddpred": 39, "oddhandl": 39, "primehandl": 39, "subject": [39, 71, 77, 105, 115, 143, 205], "compositepred": 39, "compositehandl": 39, "positivepred": 39, "positivehandl": 39, "negativepred": 39, "negativehandl": 39, "zeropred": 39, "zerohandl": 39, "nonzeropred": 39, "nonzerohandl": 39, "nonpositivepred": 39, "nonpositivehandl": 39, "nonnegativepred": 39, "nonnegativehandl": 39, "integerpred": 39, "integerhandl": 39, "r20": 39, "rationalpred": 39, "rationalhandl": 39, "r21": 39, "irrationalpred": 39, "ratio": [39, 51, 52, 60, 61, 65, 66, 69, 71, 74, 75, 76, 77, 93, 101, 111, 148, 180, 210, 219, 222, 228], "irrationalhandl": 39, "r22": 39, "realpred": 39, "disjoint": [39, 42, 50, 53, 206, 218, 248], "realhandl": 39, "r23": 39, "extendedrealpred": 39, "extendedrealhandl": 39, "hermitianpred": 39, "hermitianhandl": 39, "r24": 39, "hermitianoper": [39, 164], "complexpred": 39, "complexhandl": 39, "r25": 39, "imaginarypred": 39, "imaginaryhandl": 39, "r26": 39, "antihermitianpred": 39, "antihermitianhandl": 39, "r27": 39, "algebraicpred": 39, "askalgebraicpredicatehandl": 39, "r28": 39, "algebraichandl": 39, "transcendentalpred": 39, "transcedent": 39, "refine_pow": 40, "refine_ab": 40, "refine_arg": 40, "refine_atan2": 40, "refine_im": 40, "refine_matrixel": 40, "refine_r": 40, "refine_sign": 40, "lagrang": [41, 61, 118, 119, 131, 135, 206, 223, 272], "lagrangian": [41, 120, 122, 129, 134, 138, 139], "euler_equ": 41, "r29": 41, "93lagrange_equ": 41, "decreas": [41, 43, 53, 203], "monoton": [41, 43, 78], "is_decreas": 41, "lopen": [41, 61, 218, 225, 230], "ropen": [41, 67, 218, 230], "is_increas": 41, "72": [41, 61, 74, 97, 101, 104, 195, 209], "is_monoton": 41, "is_strictly_decreas": 41, "is_strictly_increas": 41, "monotonicity_help": 41, "held": [41, 62, 139, 234, 287], "r30": 41, "mathematical_singular": 41, "interpol": [41, 66, 70, 142, 203, 206], "finite_diff_weight": [41, 61, 277], "apply_finite_diff": [41, 61, 277], "differentiate_finit": [41, 61, 277], "finite_diff": [41, 61], "x_list": [41, 277], "y_list": [41, 277], "xlist": 41, "55271367880050e": 41, "indexedbas": [41, 43, 60, 61, 210, 228, 234, 235, 242], "idx": [41, 43, 210, 234, 235, 242], "region": [41, 69, 78, 88, 196, 218, 226, 229, 230, 255, 258, 265], "bewar": [41, 69], "phenomenon": [41, 180, 203, 213, 282], "90": [41, 52, 59, 69, 92, 97, 103, 104, 107, 115, 125, 143, 210, 212, 222, 230, 243], "finitediff": 41, "wrt": [41, 43, 61, 63, 69, 78, 97, 125, 142, 185, 186, 203, 206, 255, 257, 258, 262], "len": [41, 49, 50, 51, 52, 53, 57, 59, 61, 62, 66, 69, 76, 86, 91, 129, 144, 148, 159, 169, 206, 222, 226, 235, 248], "nearest": [41, 205], "furthest": [41, 62], "sublist": [41, 57, 62, 88, 172, 277], "fd": [41, 43, 175], "0th": [41, 53, 62, 69], "1st": [41, 53, 101, 111, 226, 227, 251, 277], "forward": [41, 43, 92, 111, 127, 135, 168, 193, 222, 241], "pai": 41, "attent": [41, 52, 67], "gridpoint": 41, "plan": [41, 115, 201, 286], "mycoeff": 41, "3rd": [41, 53, 67, 101, 142, 206, 228, 231, 248], "2nd": [41, 53, 62, 101, 111, 142, 226, 231, 248], "cost": [41, 43, 101, 129, 229, 281], "poorer": 41, "grand": 41, "r31": 41, "51": [41, 97, 101], "184": [41, 226], "1988": [41, 154, 172, 203, 204], "699": 41, "706": [41, 97], "1090": [41, 206], "s0025": [41, 101], "5718": [41, 101], "0935077": 41, "continuous_domain": [41, 225], "tan": [41, 61, 66, 67, 88, 103, 117, 132, 133, 134, 139, 207, 209, 210, 217, 219, 226, 229, 287], "function_rang": 41, "is_convex": [41, 77], "convex": [41, 77, 78, 88], "unspecifi": [41, 61, 76, 277], "multivari": [41, 61, 69, 197, 198, 200, 201, 202, 204, 206, 207, 217, 222, 228, 229, 230, 287], "concav": [41, 144], "r32": 41, "convex_funct": 41, "r33": 41, "ifp": 41, "illinoi": 41, "edu": [41, 45, 52, 53, 62, 64, 66, 88, 97, 101, 204, 209, 219, 223, 226, 230, 255], "angelia": 41, "l3_convfunc": 41, "r34": 41, "logarithmically_convex_funct": 41, "r35": 41, "logarithmically_concave_funct": 41, "r36": 41, "concave_funct": 41, "lcim": 41, "mixtur": [41, 43, 78, 197, 243], "incommensur": 41, "not_empty_in": [41, 229], "finset_intersect": 41, "finite_set": [41, 218], "tracker": [41, 218, 229, 283], "aperiod": 41, "smallest": [41, 55, 67, 74, 76, 83, 91, 97, 101, 172, 185, 201, 246, 248], "verif": [41, 199, 228], "reliabl": [41, 61, 226, 246, 277], "henc": [41, 43, 51, 52, 61, 63, 67, 69, 73, 86, 89, 91, 101, 107, 191, 196, 197, 198, 203, 210, 220, 223, 227, 229, 241, 245, 260, 261, 262, 282, 287], "stationary_point": 41, "stationari": [41, 230], "tikz": 42, "joyofcat": 42, "adamek": 42, "herrlich": 42, "strecker": 42, "joi": 42, "cat": [42, 184], "book": [42, 52, 62, 67, 120, 125, 128, 136, 140, 141, 160, 204, 209, 210, 280], "katmat": 42, "uni": [42, 88, 248], "bremen": 42, "de": [42, 62, 66, 101, 180, 195, 196, 207, 212, 223, 226, 248], "acc": [42, 142, 189, 193], "embryon": 42, "morphism": [42, 197], "codomain": [42, 197, 205], "arrow": [42, 90, 104, 196, 210], "namedmorph": 42, "prohibit": [42, 53, 54, 185], "identitymorph": 42, "compositemorph": 42, "compos": [42, 61, 62, 129, 139, 177, 179, 180, 193, 197, 201, 205, 206, 207, 210, 212, 222], "circ": [42, 61, 72, 78, 86, 94], "new_nam": 42, "id_a": 42, "id_b": 42, "commutative_diagram": 42, "quadrupl": [42, 206], "mbox": 42, "hom": 42, "id": [42, 57, 67], "rightarrow": [42, 53, 57, 62, 66, 67, 69, 83, 84, 86, 88, 91, 92, 101, 196, 205, 217, 229, 248, 277], "monoid": 42, "pare1970": 42, "accompani": 42, "premis": 42, "conclus": [42, 61], "carri": [42, 43, 61, 167, 173, 180, 197, 200, 203, 205, 207, 208, 249], "premises_kei": 42, "et": [42, 88, 154, 203, 206, 207, 219, 222], "pareigi": 42, "functor": 42, "1970": [42, 97], "is_subdiagram": 42, "subdiagram": 42, "d1": [42, 57, 185, 197, 217, 230, 255], "subdiagram_from_object": 42, "veryuniqu": 42, "diagram_draw": 42, "diagramgrid": 42, "analys": [42, 109, 111, 142, 230], "drawn": [42, 52, 90, 196, 200, 208], "moprhism": 42, "strive": 42, "nevertheless": 42, "laid": [42, 125, 172], "width": [42, 43, 89, 190, 196, 206, 210, 241], "height": [42, 43, 77, 94, 144, 196, 197, 210, 217, 265], "emploi": [42, 60, 65, 88, 101, 206, 209, 226, 230], "lai": 42, "layout": 42, "sequenti": [42, 45, 62, 67, 255, 257], "test_draw": 42, "lemma": [42, 52, 86, 198], "fivelemma": 42, "five_lemma": 42, "arrowstringdescript": 42, "curving_amount": 42, "looping_start": 42, "looping_end": 42, "horizontal_direct": 42, "vertical_direct": 42, "label_posit": 42, "pic": 42, "princip": [42, 62, 67, 69, 86, 88, 98, 113, 127, 148, 197, 198, 199, 200, 201, 203, 205, 206, 207], "offset": [42, 43, 61, 66, 69, 235], "cell": 42, "vertic": [42, 45, 54, 55, 71, 72, 74, 76, 77, 78, 88, 90, 92, 97, 105, 124, 130, 147, 155, 195, 196, 199, 205, 210, 218, 248, 265], "disregard": 42, "unexplain": 42, "astr": 42, "dr": [42, 63, 210, 226], "12mm": 42, "correspondingli": 42, "label_displac": 42, "arrow_styl": 42, "dash": 42, "xypicdiagramdraw": 42, "formatt": 42, "utilis": 42, "xypic": 42, "drawer": 42, "xymatrix": 42, "ld": 42, "arrow_formatt": 42, "therebi": 42, "default_arrow_formatt": 42, "farther": 42, "centr": [42, 58, 196], "default_formatt": 42, "45": [42, 61, 66, 77, 97, 101, 107, 206, 207, 223], "_3mm": 42, "default_curving_amount": 42, "cm": [42, 142, 230], "_1cm": 42, "default_curving_step": 42, "h1": [42, 122], "1cm": 42, "rr": [42, 61, 79, 199, 200, 206, 207], "h_": [42, 52, 57, 66, 69, 88], "_2cm": 42, "mask": [42, 210], "diagram_format": 42, "proceed": [42, 44, 86, 88, 141, 204, 220], "xypic_draw_diagram": 42, "shortcut": [42, 61, 93, 194, 210, 218, 222, 287], "insert": [42, 44, 92, 103, 104, 170, 175, 210, 230, 251], "preview_diagram": 42, "brief": [43, 229, 241, 264], "fab": [43, 210], "cse_main": [43, 211, 222], "cse": [43, 102, 115, 164, 211, 222, 243, 249], "meat": 43, "lightweight": [43, 205, 281], "pycod": [43, 210], "lambdarepr": [43, 210, 249], "aesara_funct": [43, 102, 210], "float80": [43, 210], "assign_to": [43, 210], "type_alias": [43, 210], "0l": [43, 210], "powl": [43, 210], "c99": [43, 210, 243], "expm1": [43, 210], "thrown": [43, 210], "fcode": [43, 210], "contract": [43, 63, 112, 175, 210, 219, 232, 234, 235, 236, 237], "len_i": [43, 210], "mat_1": 43, "mat_2": 43, "jscode": [43, 210], "user_funct": [43, 210], "argument_test": [43, 210], "cfunction_str": [43, 210], "octav": [43, 142, 243], "custom_funct": [43, 210], "existing_octave_fcn": [43, 210], "is_matrix": [43, 210], "my_mat_fcn": [43, 210], "my_fcn": [43, 210], "mat": [43, 94, 144, 169, 210], "octave_cod": [43, 210], "summat": [43, 60, 61, 65, 66, 69, 175, 204, 206, 210, 213, 222, 230, 231, 234, 235, 236, 242], "mathematica_cod": [43, 210], "g1": [43, 46, 51, 52, 86, 97, 111], "g2": [43, 46, 51, 52, 86, 90, 97, 111], "gamma_1": [43, 114], "gamma_2": [43, 114], "\u03b3\u2081": 43, "\u03b3\u2082": 43, "\u03b2": [43, 195], "h_i": [43, 57], "c89": [43, 210, 243], "julia_cod": [43, 210], "rust_cod": [43, 210], "powi": [43, 210], "make_routin": [43, 243], "f95": [43, 242, 243], "matlab": [43, 115, 142, 243, 283], "breadth": [43, 61, 230], "c_name": [43, 243], "c_code": [43, 243], "h_name": [43, 243], "c_header": [43, 243], "volume_result": 43, "ifndef": [43, 243], "project__test__h": [43, 243], "endif": [43, 243], "preprocessor": [43, 211, 222, 243], "global_var": [43, 243], "insensit": [43, 97, 142, 210, 241, 243], "argument_sequ": [43, 243], "name_expr": [43, 243], "to_fil": [43, 243], "f_name": [43, 243], "f_code": [43, 243], "hydrogen": [43, 272], "r_nl": [43, 113, 176], "my_routin": 43, "result_var": [43, 243], "result\u2085\u2081\u2084\u2082\u2083\u2084\u2081\u2086\u2088\u2081\u2083\u2089\u2087\u2087\u2081\u2089\u2084\u2082\u2088": 43, "__________": [43, 198], "\u212f": [43, 147, 195, 210, 277, 281, 283, 287, 288], "assoc_laguerr": [43, 69, 210], "fcn": [43, 243], "result_5397460570204848505": [43, 243], "out_8598435338387848786": [43, 243], "examin": [43, 62, 164, 241, 243, 287], "inputargu": [43, 243], "outputargu": [43, 243], "inoutargu": [43, 243], "disk": [43, 62, 218, 229, 249], "binary_funct": [43, 102, 242], "tensor": [43, 48, 63, 97, 112, 122, 140, 154, 160, 161, 162, 172, 175, 184, 185, 210, 231, 232, 234, 235, 242, 249, 259, 260, 266, 267, 270, 272], "binary_func": [43, 242], "servic": [43, 230], "tempdir": [43, 242], "qho_1d": [43, 151], "psi_n": [43, 151], "qho": 43, "tmp": 43, "subroutin": [43, 52, 171, 203], "autofunc": 43, "hbar": [43, 151, 157, 170, 176, 180, 182, 195], "05457162d": 43, "14159265358979d0": 43, "0d0": [43, 210], "74126166983329d": 43, "33": [43, 61, 64, 97, 140, 148, 203, 207, 210, 230], "verbos": [43, 61, 92, 101, 210, 241, 242, 286], "mute": [43, 242], "backend": [43, 89, 102, 103, 109, 128, 130, 136, 190, 207, 242, 249], "auxiliari": [43, 88, 120, 125, 137, 226, 242], "function_nam": [43, 242], "sympy_express": [43, 242], "mandatori": [43, 210, 242], "illustr": [43, 97, 126, 129, 180, 200, 213, 217], "psi_nl": 43, "766": 43, "incur": [43, 102], "get_numpy_arrai": 43, "tight": 43, "temp": [43, 127], "alloc": [43, 67], "fuse": 43, "wise": [43, 44, 67, 92, 199, 203, 210, 216, 242], "unabl": [43, 74, 78, 103, 228, 255, 276, 277], "fortun": [43, 102, 129, 206, 207], "reconnect": 43, "autom": [43, 67, 102, 219, 242, 281], "ideologi": [43, 229], "broadcast": [43, 102, 210, 235, 242], "outperform": 43, "jensen": 43, "quantit": [43, 177], "ufunc": [43, 102, 242, 249], "fn_numpi": 43, "fn_fortran": 43, "xx": [43, 97, 122, 194, 248], "21306132": 43, "98101184": 43, "44626032": 43, "timeit": [43, 207], "10000": [43, 65, 101, 102, 104, 228], "18891601900395472": 43, "004707066000264604": 43, "facil": 43, "comparison": [43, 60, 61, 91, 97, 125, 197, 205, 209, 228, 241, 248], "thereof": [43, 61, 197, 203, 205], "optims_c99": 43, "log1p": [43, 210], "expm1_opt": 43, "log1p_opt": 43, "exp2_opt": 43, "log2_opt": 43, "log2const_opt": 43, "funcminusoneoptim": 43, "func_m_1": 43, "opportunist": 43, "replaceoptim": 43, "catastroph": 43, "replace_in_add": 43, "cost_funct": 43, "__call__": [43, 53, 61, 205], "exp2": [43, 210], "create_expand_pow_optim": 43, "base_req": 43, "is_symbol": [43, 92], "expand_opt": 43, "opt2": 43, "is_funct": 43, "log2": [43, 69, 210], "matin_opt": 43, "matinv_opt": 43, "matrixsolv": [43, 210], "matrix_nod": 43, "numpyprint": 43, "doprint": [43, 210], "seriesapprox": 43, "reltol": 43, "max_ord": 43, "n_point_check": 43, "threshold": [43, 101], "largest": [43, 53, 55, 61, 67, 69, 97, 100, 101, 155, 197, 201, 228, 248], "series_approx2": 43, "1e": [43, 61, 65, 97, 109, 144, 206, 228], "series_approx3": 43, "series_approx8": 43, "sumapprox": 43, "neglect": 43, "2000": [43, 47, 88, 101, 204], "sum_approx3": 43, "sum_approx2": 43, "sum_approx1": 43, "token": [43, 86, 89, 103], "diagram": [43, 50, 90, 104, 128, 129, 130, 135, 155, 235, 260, 282], "codegenast": 43, "assignmentbas": 43, "augmentedassign": 43, "addaugmentedassign": 43, "subaugmentedassign": 43, "mulaugmentedassign": 43, "divaugmentedassign": 43, "modaugmentedassign": 43, "codeblock": [43, 103], "quotedstr": 43, "intbasetyp": 43, "_sizedinttyp": 43, "signedinttyp": 43, "unsignedinttyp": 43, "floatbasetyp": 43, "floattyp": 43, "complexbasetyp": 43, "complextyp": 43, "pointer": [43, 243, 244], "functionprototyp": 43, "functiondefinit": [43, 103], "stream": [43, 62, 211, 222, 248], "functioncal": 43, "breaktoken": 43, "continuetoken": 43, "nonetoken": 43, "float32": [43, 102, 103, 249], "codeprint": 43, "complex_": 43, "bool_": 43, "intc": [43, 103], "intp": 43, "unsign": [43, 66, 222], "int8": 43, "int16": 43, "int32": 43, "int64": [43, 230], "uint8": 43, "uint16": 43, "uint32": 43, "uint64": 43, "x86": 43, "amd64": 43, "complex64": 43, "complex128": 43, "newton": [43, 69, 135, 178, 182, 203, 207], "aug_assign": 43, "tol": [43, 61, 201], "val": [43, 61, 73, 201, 205, 249], "whl": 43, "py_str": 43, "inf": [43, 53, 61, 97, 201, 206, 218, 226, 230], "exec": [43, 61, 89, 249], "1121416371": 43, "909672693737": 43, "867263818209": 43, "865477135298": 43, "865474033111": 43, "1g": 43, "3e": 43, "2003": [43, 195, 204, 210, 223], "source_format": [43, 210], "op": [43, 61, 97, 164, 175, 189, 193, 219, 248, 249], "parametr": [43, 69, 70, 74, 97, 196, 223, 229, 255, 258, 265], "volatil": 43, "binop": 43, "exit": [43, 101, 241], "premad": 43, "break_": 43, "lift": [43, 57, 67, 69, 86, 201, 203, 206], "left_hand_sid": 43, "topological_sort": [43, 248], "postprocess": [43, 206, 211, 222], "topolog": [43, 61, 63, 199, 248], "continue_": 43, "untyp": 43, "compliant": 43, "ok": [43, 53, 210, 226], "elem": [43, 52, 197], "ijk": [43, 235], "stride": [43, 235], "lmn": 43, "cast_nocheck": 43, "alia": [43, 54, 61, 71, 77, 92, 93, 95, 99, 159, 168, 175, 197, 200, 201, 205, 209, 218, 241, 251, 287], "nbit": 43, "storag": [43, 61, 97, 169, 195, 203], "nmant": 43, "mantissa": 43, "nexp": 43, "half_precis": 43, "f16": 43, "65504": 43, "tini": [43, 61], "ep": [43, 52, 60, 201, 205, 206], "decimal_dig": 43, "cast_check": 43, "1e5": 43, "cast": [43, 94, 279], "subnorm": [43, 52], "idempot": 43, "loos": [43, 61], "overflow": [43, 245], "max_expon": 43, "min_expon": 43, "for_i": 43, "for_ji": 43, "for_kji": 43, "function_arg": [43, 241], "fcall": 43, "bar": [43, 69, 126, 135, 164, 170, 251, 272], "baz": 43, "return_typ": 43, "fp": [43, 44, 61, 206, 212], "from_functionprototyp": 43, "prototyp": [43, 102, 243], "value_const": 43, "pointer_const": 43, "attr_param": 43, "looking_for": 43, "as_declar": 43, "formatstr": 43, "5g": 43, "stdout": [43, 241], "stderr": 43, "oppos": [43, 249, 277], "_field": 43, "_construct_": 43, "not_in_arg": 43, "float16": 43, "inttyp": 43, "super": [43, 69, 201, 210, 255, 257], "from_expr": [43, 206], "v6": 43, "123456": [43, 61, 101], "v10": 43, "12345": [43, 65], "67894": 43, "boost_mp50": 43, "boost": 43, "multiprecis": [43, 200], "cpp_dec_float_50": 43, "r37": 43, "rtol": 43, "atol": 43, "precision_target": 43, "v18": 43, "123456789012345646": 43, "123456789012345649": 43, "Will": [43, 97, 103, 205, 210, 241], "decl1": 43, "decl2": 43, "alt": 43, "secondarili": [43, 206], "mathcin": 43, "cbrt": [43, 67, 210], "minu": [43, 60, 61, 191, 203, 210, 262], "0e": [43, 61], "fma": [43, 210], "cpu": [43, 102, 142], "hypot": [43, 210], "hypotenus": [43, 77], "log10": [43, 210], "ten": [43, 102], "plu": [43, 60, 97, 103, 142, 155, 206, 210, 220, 249], "famili": [43, 45, 79, 88, 198], "commaoper": 43, "goto": 43, "preincrement": 43, "postdecr": 43, "decrement": [43, 245], "postincr": 43, "increment": [43, 52, 53, 54, 60, 77, 101, 230], "predecr": 43, "alignof": 43, "sizeof": 43, "struct": [43, 195], "dsign": 43, "arrayconstructor": 43, "ac": [43, 53, 73, 107, 122, 140, 152, 230, 248, 251], "95": [43, 59, 101, 203, 210, 226, 228, 243], "do1": 43, "1d0": 43, "do2": 43, "extent": 43, "intent_out": 43, "dim": [43, 63, 76, 102, 177, 183, 210, 233, 236, 270], "arr": 43, "fortranreturn": 43, "aid": [43, 127], "implieddoloop": 43, "idl": 43, "signallib": 43, "prog": [43, 154], "myprogram": 43, "mysub": 43, "subroutinecal": 43, "inout": 43, "bind_c": 43, "sum_": [43, 60, 61, 62, 66, 69, 86, 88, 92, 94, 101, 195, 206, 207, 212, 213, 220, 226, 230], "cmplx": [43, 210], "intent_in": 43, "intrins": 43, "isign": 43, "lbound": 43, "lb": [43, 83, 245], "literal_dp": 43, "num": [43, 52, 61, 101, 111, 201, 222, 226, 245, 251], "literal_sp": 43, "reshap": [43, 92, 125, 142, 231, 237, 248], "arrayexpr": 43, "shp": 43, "metric": [43, 53, 57, 63, 112, 222, 226, 229, 236], "snr": 43, "convolution2d": 43, "use_renam": 43, "ren": 43, "thingi": 43, "newtons_method": 43, "itermax": 43, "counter": [43, 61, 67, 73, 92, 105, 107], "raphson": 43, "criterion": [43, 52, 141, 198, 203], "netwon": 43, "algo": [43, 53], "r38": 43, "27s_method": 43, "newtons_method_funct": 43, "param": [43, 63, 97, 223], "render_as_modul": 43, "py_mod": 43, "865474033102": 43, "render_as_source_fil": 43, "printer_set": 43, "fcodeprint": [43, 210], "fpgroup": [44, 52], "studi": [44, 51, 60, 63, 97, 194, 197, 203, 206, 223, 230], "combinator": [44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 66, 94, 101, 212, 231, 236, 245, 248, 267, 281, 287], "free_group": [44, 51, 52], "vfree_group": 44, "xfree_group": 44, "fp_group": [44, 52], "coset_enumeration_r": 44, "fall": [44, 60, 61, 66, 89, 190, 205, 210, 223, 227, 230], "famou": [44, 69, 88, 101, 223], "langl": [44, 52, 154, 195], "rangl": [44, 52, 154, 172, 195], "gen0": 44, "gen1": 44, "gen_": 44, "freegroup": 44, "x_2": [44, 51, 66, 83, 170, 198, 203, 206, 212, 223, 229], "x_3": [44, 51, 83, 170], "s_1": 44, "r_1": [44, 197, 207], "s_2": 44, "r_2": 44, "s_k": 44, "r_k": [44, 168], "s_i": [44, 57, 88, 90], "r_i": [44, 207], "reduct": [44, 97, 121, 203, 205, 223], "ho05": [44, 51], "cdhw73": 44, "hav91": 44, "coset_enumeration_c": 44, "coset_enumer": 44, "relator_bas": 44, "coset_table_bas": 44, "influenc": [44, 104, 197, 198], "coset_table_max_limit": 44, "4096000": 44, "safeti": [44, 53, 95], "max_coset": 44, "cox": [44, 204, 206], "c_r": [44, 220], "max_stack_s": 44, "500": [44, 65, 122], "deduction_stack": 44, "stack": [44, 78, 92, 142, 199, 205, 210, 239, 245, 283], "occurr": [44, 61, 101, 125, 185, 222, 230], "exce": [44, 101, 236], "modest": 44, "low_index_subgroup": 44, "conjugaci": [44, 52], "coset_t": [44, 52], "reidemeister_present": 44, "john": [44, 52, 69, 206, 223, 226], "cannon": 44, "lucien": 44, "dimino": [44, 52], "georg": [44, 197, 226, 248], "hava": 44, "jane": 44, "watson": [44, 222], "comp": [44, 226], "463": [44, 141], "490": [44, 53], "1973": [44, 62, 192], "derek": [44, 51], "holt": [44, 51, 52, 59], "chapman": [44, 51], "hall": [44, 51, 230], "crc": [44, 51, 53], "2005": [44, 51, 88, 101, 206], "xvi": [44, 51], "514": [44, 51, 204], "symposium": [44, 86, 203, 204, 220], "issac": [44, 88, 204, 228], "bonn": 44, "1991": [44, 204], "191": [44, 229], "199": 44, "acm": [44, 60, 86, 88, 204, 220, 222, 226, 228], "graycod": 45, "kw_arg": [45, 55, 175, 235, 236], "hamiltonian": [45, 166], "edg": [45, 54, 55, 90, 199, 210, 229, 248, 286], "hamilton": [45, 92], "vertex": [45, 55, 72, 77, 88, 199], "000": [45, 65, 88, 91, 169, 248], "110": [45, 91, 226, 228, 242, 248], "010": [45, 91, 248], "011": [45, 91, 169, 248], "111": [45, 64, 71, 91, 101, 248], "101": [45, 69, 91, 101, 169, 248], "001": [45, 65, 91, 144, 248], "delet": [45, 90, 92, 97, 207, 251, 287], "statist": [45, 62, 69, 230, 241, 281], "manner": [45, 62, 69, 139, 173, 191, 223, 226, 231, 248, 264], "generate_grai": 45, "0000": 45, "0001": [45, 65], "0011": [45, 56], "0010": 45, "0110": 45, "0111": [45, 169], "0101": [45, 169], "0100": 45, "1100": 45, "1101": 45, "1111": 45, "1110": 45, "1010": 45, "1011": 45, "1001": 45, "r39": 45, "nijenhui": 45, "wilf": [45, 60, 228], "1978": [45, 52, 180, 204], "r40": 45, "knuth": [45, 53, 245], "2011": [45, 53, 86, 101, 192, 219], "art": [45, 53, 197, 210, 212, 245], "vol": [45, 53, 62, 66, 69, 86, 97, 112, 205, 206, 220, 245, 248], "addison": [45, 53, 101, 204], "weslei": [45, 53, 101, 204], "r41": 45, "brgc": 45, "6th": [45, 101], "unrank": [45, 50, 52, 53, 55], "r42": 45, "statweb": 45, "stanford": 45, "susan": 45, "s208": 45, "node12": 45, "tail": [45, 60, 61, 201, 230], "00010": 45, "random_bitstr": 45, "bitlist": [45, 56], "gray_to_bin": 45, "endian": 45, "bin_to_grai": 45, "get_subset_from_bitstr": 45, "bitstr": 45, "graycode_subset": 45, "group_construct": 46, "directproduct": [46, 49], "__mul__": [46, 52, 92, 97, 201, 205], "shift": [46, 52, 53, 55, 62, 69, 72, 76, 78, 91, 196, 201, 203, 206, 213, 220, 228, 230], "gn": 46, "named_group": [46, 49, 51, 52, 58, 59], "cyclicgroup": [46, 49, 52], "perm_group": [46, 51, 52, 53, 58, 59], "permutationgroup": [46, 49, 51, 52, 53, 58, 59], "group_numb": 47, "is_nilpotent_numb": 47, "r43": 47, "randprim": [47, 101], "pakianathan": 47, "shankar": 47, "monthli": [47, 62, 97], "107": [47, 204], "631": 47, "634": 47, "is_abelian_numb": 47, "r44": 47, "is_cyclic_numb": 47, "r45": 47, "polyhedron": [48, 52, 88, 248, 267], "prufer": [48, 267], "grai": [48, 56, 89, 144, 190, 196, 267], "nilpot": [48, 52, 97, 267], "abelian": [48, 49, 52, 90, 180, 197, 267], "cyclic": [48, 49, 52, 53, 54, 64, 92, 101, 236, 248, 267], "polycycl": [48, 52, 267], "symmetricgroup": [49, 51, 52, 58, 59], "transposit": [49, 52, 53, 62, 92, 94, 232], "is_group": [49, 52], "generate_schreier_sim": [49, 52], "af": [49, 52, 58, 142], "dihedralgroup": [49, 52, 59], "alternatinggroup": [49, 52, 58], "r46": 49, "symmetric_group": 49, "generators_and_rel": 49, "dihedr": [49, 53], "d_n": [49, 90, 206], "gon": 49, "bab": 49, "generate_dimino": [49, 52], "perm": [49, 51, 52, 53, 54, 59, 66, 92, 94, 97, 231], "cyclic_form": [49, 53, 54], "r47": 49, "dihedral_group": 49, "31": [49, 61, 64, 65, 77, 101, 140, 195, 206, 223], "ex": [49, 88, 112, 124, 200, 205, 206, 236, 244], "r48": 49, "armstrong": 49, "abeliangroup": [49, 52], "cyclic_ord": 49, "r49": 49, "groupprop": [49, 52], "subwiki": [49, 52], "structure_theorem_for_finitely_generated_abelian_group": 49, "multiset_partit": [50, 66, 86, 245, 248], "rg": 50, "growth": [50, 101, 203, 277], "from_rg": 50, "abcd": [50, 54, 175, 248, 251], "cbead": 50, "sort_kei": [50, 61, 226], "ti": [50, 53, 61, 101], "integerpartit": [50, 248], "summand": [50, 205], "r50": 50, "partition_": [50, 66], "28number_theori": 50, "as_dict": [50, 200, 206], "as_ferr": 50, "char": 50, "ferrer": 50, "next_lex": [50, 53], "lexic": [50, 155, 248], "prev_lex": 50, "random_integer_partit": 50, "seed": [50, 52, 61, 62, 71, 74, 75, 97, 101, 203, 230, 241, 248], "85": [50, 65, 66, 97, 101, 127, 173, 195, 230], "rgs_gener": 50, "37": [50, 62, 67, 71, 97, 101, 105, 195, 210, 223], "52": [50, 66, 101, 104, 105, 195, 209, 223, 226, 248, 277], "151": 50, "203": [50, 66], "rgs_enum": 50, "rgs_unrank": 50, "rgs_rank": 50, "pcgroup": 51, "pcg": 51, "pc_seri": [51, 52], "polycyl": 51, "pc_present": 51, "pc_sequenc": [51, 52], "miss": [51, 52, 78, 210, 228, 243, 287], "adjac": [51, 52, 53, 61, 66, 111, 147, 199, 248], "der": [51, 52], "relative_ord": [51, 52], "polycyclic_group": [51, 52], "gen": [51, 52, 57, 58, 59, 61, 97, 197, 200, 201, 203, 205, 206, 207, 208, 216, 222, 225, 228], "is_ident": [51, 53, 61], "poss": [51, 127, 194], "pc_group": 51, "a_j": [51, 69, 86, 180, 203, 212, 220], "notin": [51, 86, 218], "_order": 51, "minimal_uncollected_subword": 51, "subword_index": 51, "i_1": [51, 175, 206, 231], "a_1": [51, 52, 62, 69, 83, 86, 92, 97, 112, 175, 180, 198, 203, 220, 223, 226, 230, 287], "i_r": 51, "a_r": [51, 220], "i_2": [51, 175, 206], "s_": [51, 57, 125, 203], "s_j": [51, 90, 203], "x3": [51, 61, 66, 200, 226, 230], "collected_word": 51, "free_to_perm": 51, "bottom": [51, 52, 61, 62, 77, 92, 97, 100, 124, 205, 210, 219, 265], "pictur": [51, 210], "x_3x_2": 51, "x_3x_1": 51, "x_2x_1": 51, "x_3x_0": 51, "x_2x_0": 51, "x_1x_0": 51, "varii": 51, "derived_seri": [51, 52], "pc_resent": 51, "k_arrai": 51, "array_form": [51, 53, 54], "v_arrai": 51, "e_1": [51, 97, 197, 203, 206], "e_n": [51, 66, 90, 97, 151, 197, 206], "exponent_vector": 51, "leading_expon": 51, "dup": [52, 201], "pn": [52, 129, 139], "motion": [52, 115, 119, 120, 121, 124, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 142, 143, 189, 190, 193, 194, 230], "front": [52, 61, 127, 128, 144, 174, 201, 203, 206, 210, 222, 287], "face": [52, 54, 74, 88, 125, 203, 207, 210, 223, 265, 283], "rubik": 52, "3674160": 52, "pgroup": [52, 54], "corner": [52, 54, 92, 206, 226, 229, 249], "reset": [52, 54, 196, 203, 206, 241, 244, 246], "p10": 52, "make_perm": 52, "r51": 52, "eick": [52, 59], "brien": [52, 59], "r52": 52, "seress": 52, "r53": 52, "schreier_vector": 52, "r54": 52, "nielsen_transform": 52, "product_replacement_algorithm": 52, "r55": 52, "frank": [52, 53, 97], "celler": 52, "charl": 52, "leedham": 52, "green": [52, 136, 196], "scott": 52, "murrai": 52, "alic": [52, 62], "niemey": 52, "r56": 52, "block_": 52, "28permutation_group_theori": 52, "r57": 52, "algorithmist": 52, "php": [52, 69, 101, 223, 230], "union_find": 52, "r58": 52, "multiply_transitive_group": 52, "r59": 52, "center_": 52, "28group_theori": 52, "centralizer_and_norm": 52, "derived_subgroup": 52, "nilpotent_group": 52, "colost": 52, "hulpk": 52, "cgt": 52, "cgtnote": 52, "__contains__": 52, "__weakref__": [52, 92], "weak": [52, 61, 92, 200, 203], "_coset_repres": 52, "hg": 52, "transvers": [52, 57, 59, 148, 149], "coset_transvers": 52, "_distinct_primes_lemma": 52, "_element": 52, "_eval_is_alt_sym_monte_carlo": 52, "05": [52, 83, 109, 192, 195], "mont": 52, "carlo": 52, "randomli": [52, 61, 62, 101, 169], "n_ep": 52, "_check_cycles_alt_sym": [52, 59], "_eval_is_alt_sym_na": 52, "only_sym": 52, "only_alt": 52, "_p_elements_group": 52, "subgroup": [52, 53, 57, 59, 90, 101], "_random_pr_init": 52, "_random_prec_n": 52, "modif": [52, 67, 97, 229, 230, 245], "69": [52, 97, 228, 245], "71": [52, 77, 97, 178], "_random_gen": 52, "accumul": [52, 241, 245], "random_pr": 52, "chosen": [52, 53, 62, 63, 74, 75, 97, 101, 104, 143, 177, 180, 196, 197, 201, 203, 205, 210, 217, 220, 226, 230, 241, 255], "gh": [52, 198, 229, 236], "eventu": [52, 69, 88, 196, 197, 217, 243, 248], "_sylow_alt_sym": 52, "sylow": 52, "p_1": [52, 57, 62, 79, 101, 193, 220, 223], "p_2": [52, 62, 79, 101, 193, 220], "p_p": 52, "sylow_subgroup": 52, "is_alt_sym": [52, 59], "_union_find_merg": 52, "not_rep": 52, "atkinson": 52, "83": [52, 209], "87": [52, 67, 97, 101], "minimal_block": 52, "_union_find_rep": 52, "r60": 52, "r66": 52, "compress": [52, 97, 100, 107], "r62": 52, "r68": [52, 53], "_verifi": 52, "_h": [52, 229], "gens_k": 52, "rels_k": 52, "gens_h": 52, "inject": [52, 61, 197, 201, 206, 283], "homomorph": 52, "rels_h": 52, "strong_present": 52, "abelian_invari": 52, "isomorph": [52, 55, 197, 200, 203, 205], "t_1": [52, 66, 223], "t_2": [52, 66, 223], "t_r": [52, 140, 236], "542": 52, "adopt": [52, 236], "schreier": [52, 57, 59], "sim": [52, 57, 59, 86], "b_1": [52, 59, 69, 83, 86, 197, 220, 223, 226, 287], "b_2": [52, 59, 69, 83, 220, 226], "dot": [52, 53, 57, 59, 62, 74, 76, 83, 92, 97, 111, 120, 127, 128, 129, 132, 133, 134, 137, 138, 139, 140, 142, 159, 185, 187, 190, 193, 194, 195, 197, 198, 203, 206, 210, 229, 230, 248, 255, 259, 261, 262], "b_k": [52, 59, 62, 66, 69, 212, 213], "strong": [52, 57, 58, 59, 101, 102], "89": [52, 59, 88], "55": [52, 64, 66, 97, 195, 196, 206, 223], "57": [52, 97, 101, 230], "coset": [52, 57, 205], "strong_gen": [52, 58, 59], "basic_transvers": [52, 59], "basic_orbit": [52, 59], "basic_stabil": 52, "baseswap": 52, "po": [52, 86, 91, 92, 122, 140, 142, 201, 228], "strong_gens_distr": [52, 59], "swap": [52, 53, 54, 92, 97, 155, 159, 168, 230, 248], "orbit": [52, 59, 175, 176, 178], "b_": [52, 57, 59, 61, 66, 69, 86, 94, 111, 212, 220, 223, 231], "b_i": [52, 57, 59, 86, 197, 220], "la": [52, 142, 180], "vega": 52, "testutil": [52, 58, 59], "_verify_bsg": [52, 58, 59], "schreier_sim": [52, 58, 59], "bsg": [52, 57, 59, 236], "102": [52, 97], "98": [52, 62, 141, 206, 226], "pseudocod": 52, "beta_": 52, "g_": [52, 59, 60, 69, 86, 223], "foral": [52, 60, 63, 180], "zg": 52, "gz": 52, "c_g": 52, "sg": [52, 230, 236], "is_subgroup": 52, "subgroup_search": 52, "hgh": 52, "closur": [52, 58, 84, 155, 205, 218], "composition_seri": 52, "h_0": [52, 57], "h_1": [52, 57, 229], "h_2": [52, 229], "1024": [52, 210, 230], "512": [52, 69], "128": [52, 66, 69, 71, 101, 204, 210], "32": [52, 64, 67, 69, 71, 97, 101, 104, 109, 140, 204, 206, 207, 219, 220, 223, 230, 241], "243": [52, 69, 228], "81": [52, 66, 71, 92, 97, 101, 125, 127, 195, 209], "conjugacy_class": 52, "xax": 52, "s_3": 52, "s3": [52, 60, 111, 213, 223], "feasibl": [52, 111], "resiz": [52, 53, 92, 94], "coset_factor": 52, "factor_index": 52, "_basic_orbit": 52, "u1": [52, 101, 125, 127, 128, 129, 130, 132, 133, 137, 139, 142, 185, 187, 189, 190, 193, 226], "u2": [52, 100, 101, 125, 127, 128, 129, 130, 132, 133, 137, 142, 185, 189, 193, 226], "_strip": [52, 59], "coset_rank": 52, "lexicograph": [52, 53, 56, 57, 61, 203, 206, 248], "coset_unrank": 52, "standardis": [52, 200], "subsect": [52, 262], "compris": [52, 62, 94, 122, 140, 143, 206, 248], "g_0": [52, 223], "g_1": [52, 206, 217, 223, 226], "g_2": [52, 90, 217, 226], "g_i": [52, 217], "g_k": 52, "tetrahedron": [52, 54], "r64": 52, "axiom": [52, 197], "doy": 52, "sc": [52, 88], "thesi": [52, 61, 217, 255], "generator_product": 52, "sn": [52, 53, 60, 83], "is_abelian": 52, "_random_prec": 52, "probabl": [52, 61, 66, 69, 73, 101, 125, 169, 173, 220, 226, 229, 230, 242, 279, 285], "transit": [52, 142, 203, 230], "82": [52, 88, 97, 230], "proport": [52, 62, 217], "226": 52, "227": 52, "is_altern": 52, "quicker": [52, 101], "taxonomi": 52, "is_cycl": 52, "p_": [52, 57, 61, 88, 180, 223, 226, 231], "p_i": [52, 57, 101], "equiv": [52, 62, 66, 101, 205, 220, 223], "pmod": [52, 61, 62, 66, 97, 220], "p_j": [52, 57], "r65": 52, "35": [52, 55, 64, 66, 74, 75, 88, 97, 101, 127, 205, 210, 223, 226, 230], "rose": 52, "is_elementari": 52, "is_nilpot": [52, 97], "lower_central_seri": 52, "is_solv": 52, "is_norm": [52, 173], "gr": 52, "is_perfect": [52, 101], "is_polycycl": 52, "is_primit": [52, 201, 206], "cardin": [52, 53, 56, 197, 218], "badli": 52, "random_stab": 52, "g3": [52, 111], "s5": 52, "is_symmetr": [52, 92], "is_transit": 52, "is_trivi": 52, "cba": [52, 231, 248], "mainli": [52, 69, 97, 102, 180, 190, 203, 220, 223, 226], "max_div": 52, "siev": [52, 101], "nonempti": 52, "gb": 52, "moreov": [52, 62, 86, 179, 191, 197, 198, 203, 211, 260], "congruenc": [52, 61, 101, 220, 223], "p_0": [52, 57, 79, 220, 223], "maxim": [52, 62, 90, 197, 201, 205, 217, 219], "intransit": 52, "normal_closur": 52, "adjoin": [52, 198], "yx": [52, 194], "73": [52, 60, 61, 74, 101, 226], "74": [52, 66, 101], "orb": 52, "78": [52, 75, 97, 101, 105, 180, 226, 230], "orbit_transvers": 52, "orbit_rep": 52, "send": [52, 61, 62, 67, 101, 197, 226, 228], "proof": [52, 55, 86, 88, 229], "79": [52, 53, 105], "pointwise_stabil": 52, "pointwis": [52, 59], "p_k": [52, 101], "p20": 52, "stab": 52, "schreier_sims_increment": [52, 59], "polycyclicgroup": 52, "eliminate_gen": 52, "gen_count": 52, "b1": [52, 57, 69, 101, 104, 105, 116, 125, 142, 185, 201, 210, 220, 223, 226, 261], "b_r": 52, "slp_dict": 52, "seq": [52, 61, 64, 97, 201, 203, 206, 216, 228, 248], "93": [52, 204], "schreier_sims_random": [52, 59], "consec_succ": 52, "consec": 52, "_succ": 52, "97": [52, 62, 101, 203], "sift": [52, 59, 248], "amend": 52, "unsuccess": [52, 59], "accordingli": [52, 198, 205], "halt": 52, "signifi": [52, 61, 104, 206, 230], "g_t": 52, "leq": [52, 60, 62, 69, 86, 97, 101, 195, 203, 205, 216, 217, 223, 230], "prop": [52, 205], "init_subgroup": 52, "supergroup": 52, "sought": [52, 101, 160, 170, 222, 228, 229], "prune": 52, "prop_even": 52, "lengthi": 52, "114": [52, 101], "117": [52, 69], "terribl": 52, "crucial": [52, 60, 200], "len1": 52, "len2": 52, "len3": 52, "transitivity_degre": 52, "fold": [52, 61, 67, 210, 217, 222], "a_2": [52, 62, 83, 97, 203, 220, 223, 226, 230, 287], "a_k": [52, 62, 207, 213], "arrang": [53, 111, 120, 140, 142, 219, 223, 236], "r69": 53, "reorder": [53, 60, 67, 175, 206, 226, 230, 248], "pretty_print": [53, 89, 122, 127, 128, 132, 133, 134, 136, 137, 138, 140, 143, 185, 187, 189, 190, 193, 194, 210], "understood": [53, 101, 180, 197, 201], "economi": 53, "caution": [53, 61, 67, 210, 222], "indexerror": [53, 97, 206], "autos": [53, 100], "watch": 53, "print_cycl": 53, "econom": [53, 88, 248], "retain": [53, 61, 67, 69, 88, 103, 206, 211, 219, 222], "biject": [53, 55, 62, 92, 197], "full_cyclic_form": 53, "rmul": 53, "unrank_lex": 53, "r73": 53, "zo42": 53, "from_sequ": 53, "a1": [53, 57, 61, 89, 92, 101, 105, 125, 142, 149, 226, 230, 231, 261, 287], "a2": [53, 57, 61, 90, 92, 101, 105, 125, 142, 149, 199, 230, 231, 261, 287], "a3": [53, 57, 61, 90, 92, 142, 261, 287], "perfectli": [53, 60, 61, 62, 203, 206, 209], "skiena": 53, "ma": [53, 60, 130], "1990": [53, 86, 220, 255], "r70": 53, "wendi": 53, "myrvold": 53, "ruskei": 53, "2001": [53, 101, 204], "lett": 53, "septemb": [53, 245], "281": 53, "284": [53, 101], "1016": 53, "s0020": 53, "0190": 53, "01": [53, 61, 65, 125, 169, 204, 222, 248], "00141": 53, "r71": 53, "kreher": 53, "stinson": 53, "1999": [53, 97, 204, 209, 226], "r72": 53, "graham": [53, 66, 67, 101], "patashnik": 53, "foundat": [53, 204, 205], "1994": [53, 203, 204, 206], "product_and_invers": 53, "r74": 53, "lehmer_cod": 53, "appliedpermut": 53, "magic": [53, 222, 241, 279], "_array_form": 53, "ascent": 53, "ie": [53, 223], "descent": [53, 223], "fg": [53, 63, 226, 229], "gf": [53, 62, 197, 199, 200, 203, 205], "r75": 53, "commutes_with": [53, 236], "cycle_structur": 53, "from_inversion_vector": 53, "get_adjacency_dist": 53, "n_adj": 53, "reev": 53, "colin": 53, "landscap": 53, "annal": 53, "86": [53, 97, 141, 209, 219], "473": 53, "josephu": 53, "get_precedence_matrix": 53, "get_precedence_dist": 53, "get_adjacency_matrix": 53, "get_positional_dist": 53, "inversion_vector": 53, "lesser": [53, 107, 206], "lehmer": 53, "ith": [53, 90, 101, 201, 207, 229, 230], "variat": [53, 61, 203, 217, 226], "r76": 53, "eng": 53, "chula": 53, "piak": 53, "algo2008": 53, "htm": [53, 69, 88, 223], "is_singleton": 53, "is_odd": 53, "shuffl": [53, 97, 287], "012345": 53, "345": 53, "253": 53, "2531": 53, "25314": 53, "253140": 53, "r77": 53, "flavius_josephu": 53, "r78": 53, "josephus_problem": 53, "r79": 53, "wou": 53, "burtonl": 53, "trim": [53, 139], "unmov": 53, "mul_inv": 53, "next_nonlex": 53, "nonlex": 53, "rank_nonlex": 53, "unrank_nonlex": 53, "next_trotterjohnson": [53, 248], "trotter": 53, "johnson": [53, 97], "generate_bel": [53, 248], "rank_trotterjohnson": 53, "unrank_trotterjohnson": 53, "_af_par": 53, "pseudo": [53, 97, 101, 201, 203, 206], "inv_perm": 53, "enforc": [53, 127], "rmul_with_af": 53, "ascend": [53, 248], "r80": 53, "transposition_": 53, "28mathemat": [53, 61, 218], "flexibl": [53, 61, 125, 142, 193, 196, 200, 229, 277], "investig": [53, 86, 195, 197, 220, 248, 279], "cn": [53, 210, 286], "2n": [53, 60, 66, 69, 88, 92, 107, 112, 138, 195, 213, 220], "dn": [53, 230], "klein": 53, "s4": [53, 111], "polyhedr": 54, "psg": 54, "platon": 54, "solid": [54, 75, 119, 196, 265], "tetrahedr": 54, "octahedr": 54, "icosahedr": 54, "r81": 54, "polyhedralgroup": 54, "polyhedra": 54, "h5": 54, "heinz": 55, "caylei": [55, 92], "r82": 55, "labeledtre": 55, "tree_repr": 55, "prufer_rank": 55, "prev": [55, 61], "prufer_repr": 55, "record": [55, 61, 205, 210, 241], "to_pruf": 55, "778": 55, "779": 55, "777": [55, 64], "1296": 55, "to_tre": 55, "r83": 55, "hamberg": 55, "erlend": 55, "2010": [55, 227, 248], "06": [55, 61, 127, 195, 230], "compact": [55, 61, 108, 120, 142, 173, 190, 206, 210, 228, 245], "next_binari": 56, "prev_binari": 56, "bitlist_from_subset": 56, "subset_from_bitlist": 56, "superset_s": 56, "iterate_binari": 56, "iterate_graycod": 56, "prev_grai": 56, "next_grai": 56, "next_lexicograph": 56, "prev_lexicograph": 56, "rank_binari": 56, "unrank_binari": 56, "rank_grai": 56, "unrank_grai": 56, "rank_lexicograph": 56, "43": [56, 97, 101, 104, 105, 230, 287], "super_set": 56, "subset_indic": 56, "ksubset": 56, "itertool": [56, 248], "tensor_can": [57, 236], "msym": 57, "contravari": [57, 97, 236, 237], "covari": [57, 63, 97, 230, 236, 237], "d0": 57, "base_i": 57, "gens_i": 57, "n_i": [57, 203, 228], "sym_i": 57, "failur": [57, 65, 78, 86, 101, 230, 241, 287], "canonicalize_na": 57, "exchang": [57, 62, 97, 195, 199, 248], "anticommut": [57, 162, 164, 174, 175, 236, 272], "canonical_fre": 57, "slot": [57, 159, 231, 235, 236, 282], "residu": [57, 62, 101, 203, 220], "tensor_gen": 57, "list_free_indic": 57, "double_coset_can_rep": 57, "reintroduc": 57, "antisymmetr": [57, 63, 92, 175, 236], "d2": [57, 185, 197, 217, 230, 248, 255], "ord": [57, 62, 97], "t_c": 57, "get_symmetric_group_sg": [57, 236], "bsgs_direct_product": 57, "base2a": 57, "gens2a": 57, "t0": 57, "t1": [57, 77, 78, 101, 116, 122, 223, 230], "a_m": [57, 226], "a_n": [57, 62, 69, 86, 90, 180, 198, 203, 213, 223, 226, 287], "_a": [57, 69, 175, 206], "_b": [57, 69, 175], "base_f": 57, "gens_f": 57, "base1": 57, "gens1": 57, "base_a": 57, "gens_a": 57, "sgen": 57, "s_transvers": 57, "butler": [57, 236], "portug": [57, 236], "grow": [57, 61, 86, 97, 101, 200, 203], "absenc": [57, 91], "observ": [57, 83, 86, 164, 194, 197, 220, 223, 226, 230, 264, 287], "ind": [57, 212, 236], "d3": [57, 217], "a0": [57, 226, 287], "a4": [57, 61, 90, 142, 287], "a5": [57, 61], "leftrightarrow": 57, "_af_rmul": 57, "t_": [57, 66], "b0": [57, 69, 201, 220, 226], "d_": [57, 220], "p0": [57, 71, 205, 226], "dbase": 57, "recomput": [57, 206], "d_i": [57, 86, 180], "s_0": 57, "d_0": [57, 62], "b_0": [57, 62, 66, 220, 223, 226], "b_j": [57, 59, 69, 86, 220], "sx": 57, "trace": [57, 92, 94, 112, 142, 203, 210, 230, 231, 232, 234, 248, 283], "h_n": [57, 69, 88, 206, 229], "tab1": 57, "get_transvers": 57, "antisym": 57, "base2": 57, "gens2": 57, "_cmp_perm_list": 58, "ls1": 58, "ls2": 58, "_naive_list_centr": 58, "_verify_centr": 58, "_verify_normal_closur": 58, "_base_ord": 59, "base_ord": 59, "backtrack": 59, "108": [59, 101, 105], "132": [59, 66, 185], "r84": 59, "_distribute_gens_by_bas": 59, "_strong_gens_from_distr": 59, "_orbits_transversals_from_bsg": 59, "_handle_precomputed_bsg": 59, "transversals_onli": 59, "slp": 59, "_remove_gen": 59, "new_gen": 59, "r85": 59, "r86": 59, "recurr": [60, 66, 83, 97, 205, 216, 222, 226, 230, 250], "annihil": [60, 79, 80, 84, 151, 175, 228], "is_hypergeometr": 60, "binomi": [60, 65, 66, 69, 101, 206, 210, 215, 222, 226, 230, 248, 287], "ff": [60, 62, 66, 195, 198, 199, 200, 205, 206], "rise": [60, 66, 69, 195, 222, 226, 230, 259], "hypersimp": [60, 222], "quotient": [60, 61, 64, 67, 101, 197, 198, 200, 203, 206, 220, 222, 226], "dummy_vari": 60, "karr": 60, "quad": [60, 61, 63, 65, 69, 88, 92], "exclus": [60, 61, 67, 91, 97, 203, 279], "typeset": [60, 210], "doit": [60, 61, 63, 66, 67, 69, 88, 94, 111, 152, 154, 156, 167, 169, 172, 173, 175, 185, 195, 206, 212, 217, 222, 226, 227, 230, 232, 255, 258, 259, 261, 262, 277, 282], "seemingli": [60, 229], "nonsens": [60, 69], "r87": 60, "michael": [60, 204, 209], "april": 60, "1981": [60, 204], "305": 60, "350": [60, 122], "dl": [60, 194, 204, 222], "cfm": [60, 204], "doid": [60, 204], "322248": 60, "322255": 60, "r88": 60, "sigma_not": 60, "r89": 60, "empty_sum": 60, "euler_maclaurin": [60, 65], "eval_integr": 60, "maclaurin": [60, 65], "endpoint": [60, 61, 65, 74, 191, 218, 262], "28333333333333": 60, "sstr": [60, 190, 210], "full_prec": [60, 210], "26629073187415": 60, "0175000000000000": 60, "soon": [60, 61, 125, 180, 207], "eval_zeta_funct": 60, "is_absolutely_converg": 60, "sequence_term": 60, "is_converg": 60, "r90": 60, "absolute_converg": 60, "analogi": [60, 203], "prod_": [60, 66, 69, 86, 101, 180, 220], "respons": [60, 61, 111, 125, 196, 243], "diverg": [60, 69, 144, 186, 255, 258], "dirichlet": [60, 69, 230], "r91": 60, "convergence_test": 60, "reverse_ord": 60, "selector": [60, 92, 222, 248], "handi": [60, 61, 97, 210, 282], "s0": [60, 84, 86, 147], "expr_with_intlimit": [60, 88], "exprwithintlimit": [60, 88], "reorder_limit": 60, "r92": 60, "walli": 60, "w2": [60, 149], "w2e": 60, "risingfactori": [60, 66, 69, 210, 212], "combsimp": [60, 61, 66, 222], "pe": 60, "gammasimp": [60, 61, 222], "rewrit": [60, 61, 63, 66, 67, 69, 86, 88, 91, 104, 111, 172, 206, 217, 218, 219, 222, 226, 227, 228, 229, 230, 267, 281, 283], "r93": 60, "r94": 60, "capital_pi_not": 60, "r95": 60, "empty_product": 60, "r96": 60, "infinite_product": 60, "r97": 60, "expr_with_limit": [60, 88], "exprwithlimit": [60, 88], "change_index": 60, "trafo": 60, "newvar": 60, "mapsto": [60, 86, 92, 205], "p3": [60, 71, 73, 74, 76, 77, 111, 196, 200, 219, 230], "has_empty_sequ": [60, 88], "has_reversed_limit": [60, 88], "has_finite_limit": [60, 88], "____": [60, 65, 88, 147, 198, 211, 230, 248, 288], "___": [60, 65, 88, 89, 97, 198, 222, 230, 235, 248, 286], "rubric": [60, 61], "_____": [60, 230], "gosper": 60, "gosper_norm": 60, "monic": [60, 69, 197, 198, 201, 203, 205, 206, 209], "gcd": [60, 61, 62, 97, 101, 171, 200, 201, 204, 205, 206, 210, 222, 223], "gosper_term": 60, "s_n": [60, 206], "f_k": [60, 120, 137, 203], "g_n": [60, 66, 206], "f_n": [60, 66, 69, 197, 203, 206, 226], "gosper_sum": 60, "r98": 60, "marko": 60, "petkovsek": [60, 228], "herbert": 60, "doron": 60, "zeilberg": [60, 228], "ak": [60, 212], "peter": [60, 66, 69, 101, 141, 192, 206, 248], "ltd": 60, "welleslei": 60, "usa": [60, 204], "1997": [60, 86, 101, 204, 220], "convert_xor": [61, 103], "09": [61, 109, 195], "xor": [61, 64, 91, 103, 210, 279], "sympifyerror": 61, "coerc": [61, 139, 203], "cooper": 61, "shouldn": [61, 207], "unsanit": [61, 249, 276], "bitcount": 61, "improperli": 61, "unbound": [61, 235], "23903": 61, "fallback": [61, 89, 175, 190, 200, 210, 228], "ast": [61, 210], "mylist1": 61, "mylist": 61, "mylist2": 61, "xxx": [61, 88, 97, 248, 250], "autosimplif": [61, 219, 222], "kern": 61, "r101": 61, "7649": 61, "r100": 61, "r104": 61, "r102": 61, "r103": 61, "r105": 61, "r106": 61, "r107": 61, "r99": 61, "imaginaryunit": [61, 210], "negativeinfin": [61, 210], "complexinfin": [61, 111], "recreat": [61, 119], "isfinit": 61, "__cacheit": 61, "maxsiz": 61, "cacheit": 61, "noqa": [61, 89, 201, 244], "f811": 61, "sympy_use_cach": 61, "cot": [61, 67, 69, 103, 207, 210, 219], "_arg": [61, 67], "as_mut": [61, 93, 94], "as_content_primit": [61, 97, 198, 206], "stub": 61, "as_dummi": [61, 88], "_0": [61, 66, 86, 92, 97, 206, 249], "_r": [61, 175, 220, 229], "bound_symbol": [61, 88], "besid": [61, 203, 228], "typeinfo": 61, "truli": [61, 69, 180], "piec": [61, 65, 220, 243], "numbersymbol": [61, 210], "scan": 61, "appliedundef": 61, "canonical_vari": 61, "class_kei": 61, "sorted_class": 61, "dummy_eq": 61, "eg": [61, 125, 182, 229], "fromit": 61, "has_fre": 61, "has_xfre": 61, "exp_polar": [61, 67, 69, 220], "dif": 61, "_prec": 61, "r_": [61, 113, 176, 207], "repl_dict": 61, "rcall": [61, 63], "simul": [61, 125, 142, 209], "abus": [61, 236], "succe": [61, 86, 91, 101, 165, 205, 228], "newtyp": 61, "intuit": [61, 180, 226], "is_mul": 61, "is_add": [61, 229], "mysin": [61, 249, 276], "_eval_rewrite_as_": 61, "_eval_rewrite_as_co": 61, "tie": [61, 248], "delai": [61, 109, 139, 219, 241, 277], "unsort": [61, 115, 184], "333333333333333333333": 61, "333333333333333314830": 61, "wildcard": [61, 222], "evalfmixin": 61, "registri": 61, "metaprogram": 61, "address": [61, 210, 229], "mostli": [61, 67, 88, 97, 142, 170, 193, 197, 209, 210, 220, 228, 286], "__truediv__": [61, 201], "class_nam": 61, "mysingleton": 61, "_eval_is_g": 61, "_eval_is_eq": 61, "args_cnc": 61, "cset": 61, "split_1": 61, "suppress": [61, 103, 239, 246], "as_coeff_add": 61, "dep": [61, 226], "as_coeff_expon": 61, "as_coeffici": 61, "zz": [61, 66, 83, 84, 88, 94, 97, 98, 101, 122, 194, 197, 198, 199, 200, 203, 205, 206, 207, 208, 225], "coeff_monomi": [61, 206], "polytool": [61, 206, 229], "monomi": [61, 88, 91, 101, 198, 200, 201, 203, 209, 210, 287], "as_coefficients_dict": 61, "inquiri": 61, "expand_mul": [61, 86], "121": [61, 66, 101, 111, 185, 228], "84": [61, 65, 101], "separatevar": [61, 222, 226], "n3": [61, 125], "as_leading_term": [61, 217], "logx": [61, 217], "cdir": 61, "_eval_as_leading_term": 61, "as_numer_denom": [61, 228], "as_ordered_factor": 61, "as_ordered_term": 61, "as_powers_dict": 61, "lost": 61, "as_real_imag": [61, 67, 92, 211], "as_term": 61, "aseri": 61, "hir": 61, "asymptot": [61, 86, 111, 277], "hierarch": 61, "normalis": [61, 212], "induc": [61, 92, 205, 219, 248], "gruntz": [61, 212], "majorli": 61, "mrv": [61, 217], "overal": [61, 182, 196, 228], "till": [61, 104, 105, 125, 226], "r108": 61, "dominik": [61, 212], "proc": [61, 228], "1993": [61, 204], "symp": 61, "239": 61, "244": [61, 203], "r109": 61, "p90": 61, "r110": 61, "asymptotic_expans": 61, "_first": [61, 67], "factor_term": [61, 133, 206, 219, 222], "distribute_order_term": [61, 222], "compute_leading_term": 61, "could_extract_minus_sign": 61, "signsimp": [61, 133, 222], "failing_express": 61, "modulu": [61, 62, 64, 69, 71, 77, 92, 101, 104, 105, 197, 201, 203, 205, 206, 209, 229], "power_bas": [61, 92], "power_exp": [61, 92], "multinomi": [61, 92, 101, 230], "expr_free_symbol": 61, "extract_addit": 61, "extract_multipl": 61, "extract_branch_factor": 61, "allow_half": 61, "fourier_seri": [61, 213], "geto": 61, "getn": 61, "mod_invers": [61, 206], "is_algebraic_expr": 61, "is_rational_funct": 61, "r111": 61, "algebraic_express": 61, "is_const": 61, "constanc": 61, "agre": [61, 62, 69, 76, 86, 220], "test_expr": 61, "failing_numb": 61, "is_meromorph": 61, "meromorph": [61, 69], "multivalu": [61, 67], "cut": [61, 66, 67, 69, 77, 86, 197, 220, 245, 251, 287], "hit": [61, 282], "is_polynomi": 61, "rational_funct": 61, "leadterm": 61, "xlim": [61, 196], "lseri": 61, "exaxmpl": 61, "nseri": 61, "_eval_nseri": 61, "innermost": 61, "disadvantag": 61, "met": [61, 107, 223, 229, 244, 287], "poleerror": 61, "nsimplifi": [61, 65, 222], "ratsimp": [61, 222], "removeo": [61, 142, 210, 277], "chop": [61, 65, 69, 92, 97, 228, 276], "123": [61, 66, 71, 91, 119, 172, 185, 248, 255, 257], "lazi": [61, 94, 206], "smooth": [61, 65, 101, 212], "taylor_term": [61, 67], "previous_term": [61, 67], "wildfunct": 61, "dummy_index": 61, "temporari": [61, 242], "_dummy_10": 61, "contigu": [61, 220, 243], "x4": [61, 66, 200], "x5": [61, 66, 200], "x6": [61, 200], "x7": [61, 200], "x8": [61, 200], "x9": [61, 200], "x50": 61, "x51": 61, "y3": [61, 200], "y4": 61, "xa": [61, 198, 203], "xb": [61, 251], "xc": [61, 174, 251], "disambigu": 61, "x01": 61, "x02": 61, "x11": 61, "x12": 61, "escap": [61, 103, 196, 210, 251], "newli": [61, 86, 220], "undefinedfunct": [61, 187, 210, 242, 249], "f821": [61, 244], "cofactor": [61, 97, 201, 203, 206], "lcm": [61, 101, 201, 203, 206, 210], "50000000000000": [61, 65], "100000000000000000000": 61, "1e20": 61, "00000000000000e": 61, "23456789123456789": 61, "23456789123457": 61, "00100": 61, "sent": [61, 88, 222, 228], "789": [61, 101], "123_456": 61, "123456789": 61, "12e": 61, "012": 61, "60e2": 61, "6000": 61, "600e": 61, "125": [61, 65, 88, 101, 201, 216, 223], "099609": 61, "12500": 61, "12500000000000000000": 61, "5404319552844595": 61, "54": [61, 97, 105, 203, 209, 248], "29999999999999998890": 61, "30000000000000000000": 61, "_mpf_": [61, 200], "4915": 61, "70": [61, 62, 78, 88, 97, 101, 209, 210, 223, 230, 251], "307": 61, "mpf": [61, 200, 201], "is_float": 61, "unprejud": 61, "3602879701896397": 61, "18014398509481984": [61, 222], "limit_denomin": 61, "320": 61, "75": [61, 64, 230, 255], "use_tri": [61, 101], "use_rho": [61, 101], "use_pm1": [61, 101], "factorint": [61, 101, 205, 206, 245], "trial": [61, 101, 203, 215, 219, 226, 230], "max_denomin": 61, "1000000": [61, 101], "141592653589793": 61, "311": [61, 101], "discard": [61, 205, 210, 229], "99999999999999999999": 61, "algebraicnumb": [61, 201, 205, 209], "hookrightarrow": 61, "minpoli": [61, 200, 201, 205], "dmp": [61, 197, 201, 206], "anp": [61, 200, 201, 205, 206], "to_list": [61, 199, 201], "minpoly_of_el": 61, "414213562": 61, "scratch": [61, 180], "6x": [61, 203], "to_number_field": [61, 205], "to_root": 61, "primitive_el": [61, 200, 201, 205], "knew": [61, 287], "golden": [61, 65, 101], "5th": [61, 142, 203, 205], "cyclotom": [61, 201, 203, 204, 205, 206], "cyclotomic_poli": [61, 205, 206], "61803398874989": 61, "2i": 61, "a6": 61, "a6_wrong": 61, "309016994374947": 61, "951056516295154": 61, "field_el": 61, "is_alias": 61, "is_primitive_el": 61, "native_coeff": 61, "to_algebraic_integ": 61, "to_primitive_el": 61, "Its": [61, 67, 77, 142, 173, 203, 210, 218], "a_prim": 61, "number_cl": 61, "realnumb": 61, "igcd": [61, 101, 198], "greatest": [61, 66, 71, 101, 198, 200, 201, 203, 204, 206, 209], "euclid": [61, 203, 204], "r112": 61, "euclidean_algorithm": 61, "ilcm": [61, 101], "seterr": 61, "r113": 61, "r114": 61, "1_": 61, "28number": 61, "negativeon": [61, 67, 282], "r115": 61, "88": [61, 97, 101], "921_": 61, "r116": 61, "one_half": 61, "holder": 61, "ieee": [61, 62], "754": 61, "r117": 61, "affin": [61, 62, 76, 197], "compactif": 61, "r118": 61, "tild": [61, 67, 231], "phase": [61, 88, 109, 144, 147, 149, 159, 160, 229], "exp1": [61, 210], "718281828": 61, "napier": 61, "r119": 61, "e_": [61, 66, 97], "28mathematical_const": 61, "r120": 61, "imaginary_unit": [61, 210], "141592654": 61, "circumfer": [61, 71], "diamet": [61, 71], "area": [61, 71, 73, 77, 78, 104, 105], "is_irr": 61, "r121": 61, "mascheroni": [61, 69], "5772157": 61, "recur": 61, "harmon": [61, 66, 101, 113, 154, 195, 210, 272], "lim": [61, 217, 277], "limits_": [61, 195, 212, 281], "ln": [61, 67, 88, 210, 212, 226, 230, 287], "r122": 61, "93mascheroni_const": 61, "catalan": [61, 66, 210], "91596559": 61, "r123": 61, "27s_constant": 61, "goldenratio": [61, 65, 211, 222], "r124": 61, "golden_ratio": 61, "tribonacciconst": 61, "tribonacci": [61, 66], "fibonacci": [61, 65, 66, 101], "predetermin": [61, 241], "8392867552141611326": 61, "r125": 61, "generalizations_of_fibonacci_numb": [61, 66], "tribonacci_numb": [61, 66], "modulo": [61, 62, 98, 101, 171, 197, 199, 200, 201, 203, 205, 206, 207, 209, 210, 213, 222], "r126": 61, "modular_multiplicative_invers": 61, "r127": 61, "extended_euclidean_algorithm": 61, "oscil": [61, 272], "conform": [61, 229, 234, 235], "r128": 61, "r129": 61, "zero_to_the_power_of_zero": 61, "r130": 61, "indeterminate_form": 61, "as_base_exp": [61, 67, 68, 248], "expand_power_bas": [61, 222], "integer_nthroot": [61, 67, 101], "floor": [61, 67, 101, 119, 200, 201, 210, 230], "integer_log": 61, "geq": [61, 62, 69, 97, 206, 223, 230, 287], "factor_": [61, 62, 101, 206, 223], "perfect_pow": [61, 101], "infix": 61, "matmul": [61, 94, 199], "as_coef_mul": 61, "undesir": [61, 115, 125, 139, 198, 201, 220], "4596": 61, "compound": [61, 130, 173], "5728": 61, "suspect": [61, 101], "5706": 61, "moot": 61, "off": [61, 71, 86, 92, 100, 102, 127, 136, 159, 197, 206, 210, 226, 241, 252, 255, 281], "nb": 61, "sensit": [61, 111, 142, 196, 203, 222, 241], "assocop": 61, "prod": [61, 200, 207, 219], "matadd": [61, 94, 210], "as_coef_add": 61, "extract_leading_ord": 61, "commutative_part": 61, "noncommutative_part": 61, "order_symbol": 61, "subprocess": [61, 210, 241, 242], "dividend": [61, 201], "rop": 61, "validrelationoper": 61, "greaterthan": [61, 210], "lessthan": [61, 210], "strictlessthan": [61, 210, 251], "lt": [61, 206, 251], "my_equ": 61, "my_inequ": 61, "reversedsign": 61, "_eval_eq": 61, "respond": 61, "boolalg": [61, 91], "client": [61, 245], "counterpart": [61, 62, 226, 277], "litter": 61, "oddbal": 61, "minor": [61, 71, 97, 210, 241], "caveat": [61, 206, 279], "succinctli": 61, "annoy": 61, "succinct": 61, "occasion": 61, "r131": 61, "operar": 61, "circuit": [61, 159, 162, 272], "greaterthanobject": 61, "__bool__": 61, "335": 61, "march": 61, "2012": 61, "r132": 61, "r133": 61, "r134": 61, "mdarg": 61, "fgh": 61, "vsin": 61, "vdiff": 61, "narg": [61, 203], "naturals0": [61, 210, 218, 229, 230], "evalul": 61, "fairli": [61, 69, 86, 127, 135, 184, 197], "conserv": [61, 120, 138, 186, 258, 264], "136": [61, 97], "indirect": [61, 63, 69, 101, 175, 226], "implic": [61, 91, 203], "fx": [61, 63, 196, 226, 227], "fxx": 61, "insconsist": 61, "presenc": [61, 67, 91, 107, 124, 129, 139, 226, 234], "nonvanish": 61, "_diff_wrt": 61, "_sort_variable_count": 61, "vc": 61, "vsort": 61, "collaps": [61, 169, 222], "vsort0": 61, "vi": 61, "dfx": 61, "equidist": 61, "sq2": 61, "xl": 61, "d2fdxdy": 61, "doit_numer": 61, "z0": [61, 217], "unifi": [61, 143, 199, 201, 203, 205, 206, 218], "zeroth": [61, 205], "idiff": [61, 78], "r135": 61, "legaci": [61, 88, 97, 230], "v5_2": 61, "infunct": 61, "algebraiccomput": 61, "functionclass": [61, 210, 249], "f_real": [61, 68], "f_real_inherit": [61, 68], "is_singular": [61, 68, 84], "holomorph": [61, 68, 86], "superfici": 61, "unexpect": [61, 241], "ss": [61, 201], "denom": [61, 200, 201, 205, 222], "_eval_expand_bas": 61, "_eval_expand_complex": 61, "shut": [61, 206], "unwant": [61, 228, 248], "alphabet": [61, 62, 111, 180, 198, 223, 243], "expand_hint": 61, "_eval_expand_hint": 61, "liabl": [61, 91], "metahint": 61, "myclass": 61, "_eval_expand_doubl": 61, "expand_multinomi": 61, "expand_power_exp": 61, "expand_func": [61, 66, 69], "hyperexpand": [61, 69, 83, 86, 220, 222], "div": [61, 198, 200, 201, 206, 210, 222, 282], "horner": [61, 142, 203, 206], "untouch": 61, "unexpand": [61, 200, 209, 219, 242], "nfloat": [61, 222], "dkei": 61, "mixin": [61, 248], "maxn": [61, 65, 92], "subresult": [61, 201, 204, 206], "000100000000000000": 61, "precisionexhaust": [61, 65], "maxprec": 61, "quadratur": [61, 65, 88, 226], "tanh": [61, 65, 67, 88, 207, 210, 222, 287], "oscillatori": [61, 65, 215], "osc": [61, 65], "advers": 61, "1e16": 61, "291": 61, "builtin": [61, 201, 210, 218, 251, 286], "speedup": [61, 97, 102, 203, 207, 249], "framework": [61, 118, 125, 135, 235, 241, 243, 249, 272], "slice": [61, 91, 92, 97, 103, 201, 206, 216, 218, 222, 231, 248], "tuplekind": [61, 92, 218], "parametris": [61, 218], "element_kind": [61, 92, 218], "tuple_count": 61, "setkind": [61, 92], "gcd_term": [61, 206], "isprimit": 61, "_gcd_term": 61, "terms_gcd": [61, 201, 206], "entiti": [61, 71, 74, 75, 77, 78, 86, 125, 140, 191, 229, 264, 273, 283], "broad": [61, 282], "undefinedkind": [61, 92, 218], "lex": [61, 89, 190, 198, 200, 201, 203, 206, 207, 209, 210, 222], "grlex": [61, 89, 190, 201, 206, 209, 210], "grevlex": [61, 89, 190, 198, 203, 206, 209, 210], "rev": 61, "unaffect": [61, 229], "_node": 61, "fastest": [61, 66, 88, 101, 102, 207], "undecor": 61, "breaker": 61, "hash": [61, 201, 203, 211, 222, 226, 241, 243], "collis": [61, 100, 210], "wast": [61, 98, 199], "rng": 61, "getstat": 61, "intention": 61, "tn": 61, "td": [61, 210, 286], "randrang": 61, "999": [61, 65], "238": [61, 101], "randint": [61, 97, 203], "ri": [61, 210], "rv": [61, 219, 230, 248], "nonbas": 61, "postord": 61, "descend": [61, 197, 205, 243], "subtre": [61, 210, 245], "cryptograph": 62, "encrypt": 62, "hide": [62, 210], "cipher": 62, "vigener": 62, "hill": [62, 69, 120, 141, 185, 192, 255], "bifid": 62, "rsa": 62, "kid": 62, "feedback": [62, 108, 111, 280], "elgam": 62, "plaintext": [62, 210], "ciphertext": 62, "monoalphabet": 62, "polyalphabet": 62, "crypto": 62, "az": [62, 223], "uppercas": [62, 220], "hello": [62, 248], "world": [62, 107, 129, 139, 248], "helloworld": 62, "check_and_join": 62, "padded_kei": 62, "puppi": 62, "opqrstuvwxi": 62, "puyoqrstvwx": 62, "artist": 62, "aphras": 62, "ara": 62, "hp": 62, "cycle_list": 62, "encipher_shift": 62, "msg": [62, 88], "decipher_shift": 62, "gonavybeatarmi": 62, "ct": [62, 90, 203], "hpobwzcfbubsnz": 62, "deciph": 62, "l1": [62, 71, 73, 74, 119, 122, 128, 140, 201, 203, 206, 223, 230], "l2": [62, 73, 74, 119, 122, 128, 161, 177, 201, 203, 230], "caesar": 62, "juliu": 62, "suetoniu": 62, "protect": [62, 210], "militari": 62, "nephew": 62, "augustu": 62, "reportedli": 62, "r136": 62, "caesar_ciph": 62, "r137": 62, "caesarsmethod": 62, "encipher_rot13": 62, "rot13": 62, "caeser": 62, "midwai": 62, "decipher_rot13": 62, "r138": 62, "decrypt": 62, "tbanilorngnezl": 62, "encipher_affin": 62, "_invers": 62, "cx": [62, 105], "recov": [62, 88, 180, 203, 205, 206, 223, 226], "decipher_affin": 62, "r139": 62, "affine_ciph": 62, "reciph": 62, "navi": 62, "beat": 62, "armi": 62, "trobmvenbgbalv": 62, "encipher_atbash": 62, "enciph": 62, "atbash": 62, "hebrew": 62, "decipher_atbash": 62, "tlmzebyvzgzinb": 62, "r140": 62, "encipher_substitut": 62, "oeyag": 62, "034": 62, "60n": 62, "v4b3": 62, "rm4": 62, "immateri": 62, "anyv": 62, "wherebi": 62, "r141": 62, "substitution_ciph": 62, "encipher_vigener": 62, "me": [62, 125, 142, 185, 210, 232], "mondai": 62, "qrgkkthrzqebpr": 62, "krypto": 62, "sculptur": 62, "cia": 62, "headquart": 62, "r143": 62, "decipher_vigener": 62, "alp": 62, "palimpsest": 62, "emufphzlrfaxyusdjkzldkrnshgnfivj": 62, "betweensubtleshadingandtheabsenc": 62, "blais": 62, "sixteenth": 62, "centuri": [62, 197], "diplomat": 62, "accid": [62, 249], "invent": [62, 205, 228, 281], "giovan": 62, "batista": 62, "belaso": 62, "1553": 62, "civil": [62, 104], "war": 62, "confederaci": 62, "brass": 62, "nsa": 62, "museum": 62, "fort": 62, "mead": 62, "r142": 62, "sender": 62, "assembl": [62, 86, 217], "concaten": [62, 92], "frequenc": [62, 88, 109, 111, 149, 151, 159, 176], "kasiski": 62, "discov": [62, 86, 115, 234, 283], "babbag": 62, "unbreak": 62, "ye": [62, 91, 226], "gonavybeatarmyyesyoucan": 62, "gold": 62, "auto_kei": 62, "goldbuggonavybeatarmyy": 62, "mcydwshkogamkzcelyfgayr": 62, "pt": [62, 70, 71, 72, 74, 75, 76, 77, 216], "vigenere_ciph": 62, "archiv": [62, 141, 223], "20071116100808": 62, "r144": 62, "filebox": 62, "vt": 62, "batman": 62, "goo": 62, "gl": 62, "ijr22d": 62, "decod": 62, "qrgk": 62, "kt": [62, 130], "hrzqe": 62, "bpr": 62, "meetmeonmondai": 62, "encipher_hil": 62, "z_": [62, 222], "r145": 62, "lester": 62, "1920": 62, "r146": 62, "polygraph": 62, "bare": [62, 120], "ceil": [62, 67, 101, 119, 210], "l_1": [62, 66, 112, 195, 220, 236], "l_t": 62, "c_t": 62, "l_i": [62, 195, 220], "decipher_hil": 62, "hill_ciph": 62, "june": [62, 97], "juli": [62, 223], "1929": 62, "306": 62, "312": [62, 185, 228, 255, 257], "ueqdueodoctcwq": 62, "st": [62, 88, 175], "hjeb": 62, "stqq": 62, "ispk": 62, "stzz": 62, "hd": 62, "ormv": 62, "uiki": 62, "encipher_bifid": 62, "polybiu": 62, "printabl": 62, "bifid5": 62, "decipher_bifid": 62, "encipher_bifid5": 62, "encipher_bifid6": 62, "r147": 62, "bifid_ciph": 62, "ieilhhfstsfqy": 62, "ieilh": 62, "hfst": 62, "fqyej": 62, "bmtwmg": 62, "bio": 62, "gold_bug": 62, "hg2sfuei7t": 62, "pug": 62, "heldo": 62, "wor6d": 62, "bifid5_squar": 62, "5x5": 62, "cap": [62, 65, 175, 218, 229], "tradition": [62, 69], "decipher_bifid5": 62, "round_trip": 62, "josi": 62, "osi": 62, "iosi": 62, "qiq": 62, "1901": 62, "felix": 62, "delastel": 62, "onto": [62, 74, 75, 76, 86, 90, 97, 100, 102, 205], "helen": 62, "cryptanalysi": 62, "german": 62, "fridai": 62, "ieilehfstsfxe": 62, "okai": 62, "decipher_bifid6": 62, "8am": 62, "kfkljjhf5mmmktfrgpl": 62, "meetmeonmondayat8am": 62, "bifid6_squar": 62, "6x6": 62, "rsa_public_kei": 62, "totient": [62, 101], "carmichael": [62, 101], "p_n": [62, 66, 69, 88, 206], "multiprim": 62, "land": 62, "reduced_toti": [62, 101], "uniquenss": 62, "rsa_private_kei": 62, "e_0": 62, "canonicalz": 62, "61": [62, 66, 77, 97, 101, 206, 212], "3233": 62, "797": 62, "1577": 62, "multipow": 62, "cryptosystem": 62, "coprim": [62, 88, 101, 171, 203, 223], "30030": 62, "becam": [62, 135], "hardest": 62, "claim": [62, 194, 220, 229], "encipher_rsa": 62, "decipher_rsa": 62, "r148": 62, "rsa_": 62, "28cryptosystem": 62, "r149": 62, "cacr": 62, "uwaterloo": 62, "techreport": 62, "2006": [62, 219], "cacr2006": 62, "r150": 62, "springer": [62, 88, 101, 203, 204, 226], "1007": 62, "2fbfb0055738": 62, "r151": 62, "itii": 62, "manuscript": 62, "1381": 62, "2753": 62, "413": 62, "1193": 62, "823": 62, "r152": 62, "r153": 62, "r154": 62, "r155": 62, "bmod": [62, 206, 210], "vice": [62, 88, 101, 104, 165, 185, 197, 201, 259, 260, 279], "versa": [62, 88, 101, 104, 165, 185, 197, 201, 259, 260, 279], "asymmetr": [62, 77], "puk": 62, "prk": 62, "chines": [62, 101, 203], "k_1": [62, 101, 203, 220], "k_2": 62, "k_n": [62, 69, 203], "p_3": [62, 193], "k_3": 62, "moduli": [62, 101, 203], "2048": [62, 101, 210], "overhead": [62, 102, 207], "modular": [62, 101, 171, 204, 229], "crt": [62, 101, 203], "overcompens": 62, "new_msg": 62, "kid_rsa_public_kei": 62, "grade": [62, 89, 190, 206], "school": [62, 219], "bob": [62, 119], "369": 62, "58": [62, 97, 236], "kid_rsa_private_kei": 62, "encipher_kid_rsa": 62, "200": [62, 92, 97, 101, 104, 109, 255], "161": 62, "decipher_kid_rsa": 62, "pub": [62, 255], "pri": 62, "encode_mors": 62, "sep": [62, 210, 227, 241], "mors": 62, "attack": 62, "flank": 62, "r156": 62, "morse_cod": 62, "decode_mors": 62, "word_sep": 62, "mc": [62, 130], "east": 62, "r157": 62, "lfsr_sequenc": 62, "lfsr": 62, "c_k": 62, "golomb": [62, 101], "g157": 62, "autocorrel": 62, "lim_": [62, 67, 69, 86, 88, 217, 277, 281], "balanc": [62, 141, 197, 230, 241], "solomon": 62, "aegean": 62, "park": 62, "laguna": 62, "1967": [62, 204], "lfsr_autocorrel": 62, "lfsr_connection_polynomi": 62, "massei": 62, "m158": 62, "jame": [62, 203], "synthesi": 62, "bch": 62, "tran": 62, "122": [62, 64, 69], "127": [62, 101], "elgamal_public_kei": 62, "elgamal_private_kei": 62, "1031": 62, "636": 62, "212": [62, 88, 204], "dlp": 62, "is_primitive_root": [62, 101], "encipher_elgam": 62, "encryp": 62, "decipher_elgam": 62, "eucliden": 62, "dh_public_kei": 62, "dh_private_kei": 62, "_p": [62, 175, 201, 203, 205, 217, 220, 228], "_g": 62, "diffi": 62, "hellman": [62, 101], "publicli": 62, "secretli": 62, "dh_shared_kei": 62, "sk": 62, "gm_public_kei": 62, "goldwass": 62, "micali": 62, "gm_private_kei": 62, "b_n": [62, 66, 90, 197, 213], "jacobi_symbol": [62, 101], "reconstruct": [62, 97, 203, 223, 282], "residuos": 62, "entropi": [62, 230], "encipher_gm": 62, "public_kei": 62, "gm": [62, 178], "decipher_gm": 62, "encipher_railf": 62, "rail": 62, "railfenc": 62, "horel": 62, "ollwd": 62, "r160": 62, "rail_fence_ciph": 62, "decipher_railf": 62, "diffgeom": 63, "euclidean": [63, 74, 76, 185, 201, 203, 206], "r161": 63, "chart": [63, 196], "r162": 63, "sussman": 63, "wisdom": 63, "farr": 63, "2013": [63, 73, 92, 285], "cartesian": [63, 104, 143, 148, 162, 165, 170, 191, 196, 197, 218, 229, 248, 259, 260, 262, 263, 272], "polar": [63, 67, 69, 71, 77, 104, 113, 145, 196, 218, 222, 229, 272], "relation_dict": 63, "car2d": 63, "pol": 63, "coordinatesymbol": 63, "jacobian": [63, 97, 139, 228], "jacobian_determin": 63, "r163": 63, "coordinate_system": 63, "base_oneform": 63, "coord_index": 63, "oneform": 63, "base_scalar": 63, "basescalarfield": 63, "base_vector": [63, 255], "coord_funct": 63, "to_si": 63, "coord": [63, 76, 78, 115, 173, 189], "immutabledensematrix": [63, 92, 93, 94, 95, 230], "rn": 63, "r2_r": 63, "r2_p": 63, "jacobian_matrix": 63, "point_to_coord": 63, "coord_si": [63, 258], "imbu": 63, "difficulti": [63, 126], "arriv": [63, 203, 220, 222, 226, 230, 287], "inappropri": 63, "poin": 63, "unappropri": 63, "fy": [63, 196, 227], "ftheta": 63, "basevectorfield": 63, "point_p": 63, "point_r": 63, "s_field": 63, "dxi": 63, "v1": [63, 74, 97, 122, 142, 185, 186, 189, 230, 249, 255, 258, 259, 260, 261], "v2": [63, 74, 97, 122, 185, 186, 189, 249, 255, 258, 259, 260, 261], "v_1": [63, 205, 228], "v_2": [63, 205], "e_x": [63, 236], "e_i": [63, 197, 220, 236], "e_r": 63, "c_xy": 63, "c_xr": 63, "unfortun": [63, 65, 102, 209, 223], "e_rho": 63, "form_field": 63, "exterior": [63, 77], "dg": 63, "tensorproduct": [63, 172, 174, 231, 232], "multilinear": 63, "wedg": [63, 86], "tp1": 63, "tp": [63, 147, 174, 201], "wedgeproduct": 63, "wp1": 63, "liederiv": 63, "v_field": 63, "transport": 63, "pushforward": 63, "e_theta": 63, "basecovarderivativeop": 63, "christoffel": 63, "metric_to_christoffel_2nd": 63, "ch": [63, 97, 223], "cvd": 63, "covarderivativeop": 63, "intcurve_seri": 63, "vector_field": [63, 262], "start_point": 63, "f_i": [63, 86, 97, 203, 207], "movement": 63, "intcurve_diffequ": 63, "init_cond": 63, "f_1": [63, 66, 69, 86, 111, 121, 124, 143, 197, 203, 206, 226], "f_0": [63, 66, 121, 203], "vectors_in_basi": 63, "kept": [63, 177, 194, 248, 282], "twoform_to_matrix": 63, "twoform": 63, "e_j": 63, "metric_to_christoffel_1st": 63, "levi": [63, 69, 230, 236], "civita": [63, 69, 236], "metric_to_riemann_compon": 63, "non_trivial_metr": 63, "dtheta": 63, "drho": 63, "metric_to_ricci_compon": 63, "ricci": 63, "fft": [64, 142], "ifft": 64, "ntt": 64, "intt": 64, "fwht": 64, "ifwht": 64, "mobius_transform": 64, "inverse_mobius_transform": 64, "convolution_fft": 64, "convolution_ntt": 64, "convolution_fwht": 64, "convolution_subset": 64, "covering_product": 64, "intersecting_product": 64, "radix": 64, "r164": 64, "coolei": 64, "93tukey_fft_algorithm": 64, "r165": 64, "fastfouriertransform": 64, "r166": 64, "r167": 64, "pz": [64, 109, 236], "643": [64, 101], "767": 64, "387": 64, "415": 64, "384": 64, "353": [64, 97], "r168": 64, "apfloat": 64, "r169": 64, "numbertheoretictransform": 64, "r170": 64, "discrete_fourier_transform_": 64, "r171": 64, "r172": 64, "r173": 64, "wht": 64, "r174": 64, "hadamard_transform": 64, "r175": 64, "fast_walsh": 64, "93hadamard_transform": 64, "r176": 64, "r177": 64, "mobiu": [64, 101], "lattic": [64, 223], "bitmask": 64, "r178": 64, "b6bius_inversion_formula": 64, "r179": 64, "csail": 64, "mit": 64, "rrw": 64, "conv": 64, "r180": 64, "arxiv": [64, 66, 69, 97, 113, 206, 248], "1211": 64, "0189": 64, "r181": 64, "r182": 64, "r183": 64, "888": 64, "444": 64, "1283": 64, "19351": 64, "14219": 64, "15502": 64, "44": [64, 66, 97, 101, 219, 230], "41": [64, 71, 97, 101, 201, 223], "63": [64, 97, 101], "r184": 64, "convolution_theorem": 64, "r185": 64, "333": [64, 101], "555": 64, "222": 64, "666": 64, "15555": 64, "19404": 64, "r186": 64, "r187": 64, "68": [64, 89, 97, 101, 223], "48": [64, 71, 105, 223, 228, 230, 277], "2057": 64, "1870": 64, "r188": 64, "radioeng": 64, "fulltext": 64, "2002": [64, 197, 204, 207], "02_03_40_42": 64, "r189": 64, "r190": 64, "r191": 64, "AND": [64, 91], "327": [64, 226], "r192": 64, "44288293815837": 65, "4429": 65, "4428829381583662470158809900606936986146216893757": 65, "28902548222223624241": 65, "091999668350375232456": 65, "14159265358979": [65, 69, 228], "333333333333333": [65, 200, 222], "1415926535": 65, "7182818284": 65, "100000": [65, 101, 109], "951": 65, "95678796130331164628399634646042209010610577945815": 65, "gmpy": [65, 200, 201, 286], "googl": [65, 195, 196, 229], "100000000000000": 65, "1000000000": 65, "125000000000000000000000000000": 65, "100000000000000005551115123126": 65, "100000000000000000000000000000": 65, "1415": 65, "uncertainti": [65, 180], "003": 65, "31417": 65, "propag": [65, 74, 146, 149], "5000": [65, 104], "50000000000000000000000000000": 65, "varphi": [65, 69, 205, 210, 226], "erron": 65, "34665576869e": 65, "208": [65, 206], "64613129282185e": 65, "60123853010113e": 65, "210": [65, 101, 223], "thousand": [65, 101, 276], "43466557686937456435688527675040625802564660517371780402481729089536555417949051890403879840079255169295922593080322634775209689623239873322471161642996440906533187938298969649928516003704476137795166849228875": 65, "binet": 65, "104": 65, "1336": 65, "portion": [65, 77, 92, 97], "meaningless": 65, "012297": 65, "9562288417661": 65, "956": 65, "29128599706266": 65, "2912859970626635404072825905956005414986193682745": 65, "14159265358979323846264338328": 65, "integrand": [65, 69, 85, 86, 88, 220], "struggl": [65, 209], "346": 65, "34635637913639": 65, "dealt": [65, 86], "504067061906928": 65, "50406706190692837199": 65, "wrap_lin": [65, 88, 89, 97, 105, 190, 197, 198, 209, 210, 226], "intgrl": 65, "extrapol": [65, 217], "richardson": [65, 217, 229], "slowli": [65, 217], "64493406684823": 65, "577215664901533": 65, "57721566490153286060651209008240243104215933593992": 65, "10000000": [65, 206], "20000000": [65, 206], "693147255559946": 65, "tune": [65, 89, 190, 210], "worthwhil": 65, "hypergeometr": [65, 66, 79, 85, 86, 204, 221, 222, 226, 228, 230, 267, 287], "ramanujan": [65, 66, 101], "9801": 65, "1103": 65, "26390": 65, "396": [65, 125], "141592653589793238462643383279502884197169399375105820974944592307816406286208": 65, "99862803482534211706798214808651328230664709384460955058223172535940812848111745": 65, "02841027019385211055596446229489549303819644288109756659334461284756482337867831": 65, "355": [65, 101, 204], "113": [65, 101, 223], "33333": [65, 88], "635": 65, "504": [65, 204], "130198866629986772369127970337": 65, "49": [65, 66, 101, 105, 203, 223], "___________": [65, 105, 226], "bell": [66, 159, 212, 248], "k_sym": 66, "binom": [66, 101, 230, 287], "dotsc": [66, 212], "j_1": [66, 154, 155, 172, 195, 212, 231], "j_2": [66, 154, 155, 172, 195, 212], "dotsb": [66, 212], "atop": [66, 69, 212, 220], "2j_2": [66, 212], "3j_2": [66, 212], "j_": [66, 69, 86, 88, 172, 212, 220, 281], "bernoulli": [66, 69, 206, 210, 226, 228, 230], "877": 66, "4140": 66, "21147": 66, "115975": 66, "846749014511809332450147": 66, "luca": [66, 101, 210, 216], "genocchi": [66, 69, 206], "r193": 66, "bell_numb": 66, "r194": 66, "bellnumb": 66, "r195": 66, "bellpolynomi": 66, "hurwitz": [66, 69], "6k": 66, "appel": [66, 69], "confer": [66, 102, 285], "r200": 66, "66": [66, 92, 97, 206, 210], "1000001": 66, "andr": [66, 206], "appellseq": [66, 206], "bernoulli_poli": [66, 206], "r196": 66, "bernoulli_numb": 66, "r197": 66, "bernoulli_polynomi": [66, 206], "r198": 66, "bernoullinumb": 66, "r199": 66, "bernoullipolynomi": 66, "luschni": [66, 69, 206], "manifesto": 66, "r201": 66, "2009": [66, 69, 101, 195, 206], "06743": [66, 69, 206], "_k": [66, 69, 88, 195, 205, 230], "6435": 66, "pascal": [66, 101], "4th": [66, 67, 83, 97, 101, 142], "195": 66, "r202": 66, "johndcook": 66, "binomial_coeffici": [66, 101], "c_n": [66, 69, 90, 206, 226], "429": [66, 210], "1430": 66, "4862": 66, "39764993382373624267": 66, "020884341620842555705": 66, "r203": 66, "catalan_numb": 66, "r204": 66, "catalannumb": [66, 210], "r205": 66, "r206": 66, "geomet": [66, 197], "mathcircl": 66, "2j": [66, 203, 230], "1385": [66, 206], "272": [66, 206], "7936": [66, 206], "2702765": 66, "4096": 66, "euler_poli": [66, 206], "r207": 66, "euler_numb": 66, "r208": 66, "eulernumb": 66, "r209": 66, "alternating_permut": 66, "r210": 66, "alternatingpermut": 66, "swing": 66, "factorial2": [66, 176, 210], "fallingfactori": [66, 210], "subfactori": [66, 210, 248], "derang": [66, 248], "r212": 66, "generate_derang": [66, 248], "r211": 66, "r213": 66, "double_factori": 66, "texttt": [66, 218], "r214": 66, "r215": 66, "paul": [66, 245], "235": 66, "268": 66, "1995": [66, 204, 222, 228], "f_z": [66, 191, 262], "f_2": [66, 86, 111, 121, 124, 143, 203, 220, 226], "r217": 66, "fibonacci_numb": 66, "r218": 66, "fibonaccinumb": 66, "t_0": [66, 223], "149": [66, 101], "r219": 66, "r220": 66, "tribonaccinumb": 66, "r221": 66, "oei": [66, 69, 101, 206], "a000073": 66, "137": [66, 97, 113], "205": [66, 86, 220], "5269": 66, "761": 66, "280": 66, "83711": 66, "27720": 66, "30247": 66, "9900": 66, "983697455232980674869851942390639915940": 66, "r222": 66, "harmonic_numb": 66, "r223": 66, "harmonicnumb": [66, 210], "r224": 66, "harmonicnumber2": 66, "l_0": [66, 112, 236, 237], "47": [66, 69, 97, 101, 113, 148, 180, 209], "76": [66, 69, 97, 101, 203, 206], "r225": 66, "lucas_numb": 66, "r226": 66, "lucasnumb": 66, "2t": 66, "genocchi_poli": [66, 206], "r227": 66, "genocchi_numb": 66, "r228": 66, "genocchinumb": 66, "r229": 66, "mathcal": [66, 67, 86, 111, 140, 172, 195, 206, 218], "a000111": [66, 206], "zigzag": 66, "li": [66, 69, 77, 88, 101, 175, 210, 265], "50521": [66, 206], "691": 66, "2730": 66, "andre_poli": [66, 206], "r230": 66, "r231": 66, "eulerzigzagnumb": 66, "r232": 66, "irrelev": 66, "r233": 66, "number_theori": 66, "r234": 66, "pentagonal_number_theorem": 66, "multifactori": 66, "pochhamm": [66, 210, 222], "r235": 66, "r236": 66, "pochhammer_symbol": 66, "274": 66, "225": [66, 101, 204], "511": 66, "9330": 66, "34105": 66, "42525": 66, "22827": 66, "5880": 66, "750": 66, "r237": 66, "stirling_numbers_of_the_first_kind": 66, "r238": 66, "stirling_numbers_of_the_second_kind": 66, "multiset": [66, 86, 245, 248], "nc": 66, "nt": [66, 248], "babi": [66, 101, 248], "aa": [66, 195], "bb": [66, 195, 222, 248], "multiset_combin": [66, 248], "aab": [66, 248], "aabc": 66, "aaaabbbbcccc": 66, "m_1": [66, 111, 154, 172, 195, 223], "m_2": [66, 124, 143, 154, 172, 195], "m_k": 66, "r239": 66, "r240": 66, "tinyurl": 66, "cep849r": 66, "ba": [66, 248], "multiset_permut": [66, 248], "r241": 66, "aabbc": 66, "mississippi": [66, 248], "609": 66, "1521": 66, "1768": 66, "1224": [66, 101], "579": 66, "197": 66, "r242": 66, "undergradu": 66, "csse": 66, "uwa": 66, "au": 66, "cits7209": 66, "707106781186548": 67, "tangent": [67, 71, 73, 77, 88, 207, 226], "643501108793284": 67, "r243": 67, "ib": [67, 130], "complex_conjug": 67, "polar_lift": [67, 69, 222], "periodic_argu": 67, "principal_branch": [67, 86], "r247": 67, "csc": [67, 103, 210, 219], "sec": [67, 88, 109, 205, 210, 219, 287], "acsc": [67, 210], "asec": [67, 210], "acot": [67, 210], "r244": 67, "trigonometric_funct": 67, "r245": 67, "r246": 67, "elementaryfunct": 67, "trigonometryangl": 67, "r248": 67, "r249": 67, "r250": 67, "r251": 67, "r252": 67, "r253": 67, "cotang": [67, 207], "r254": 67, "r255": 67, "r256": 67, "secant": [67, 206], "r257": 67, "r258": 67, "r259": 67, "cosec": 67, "r260": 67, "r261": 67, "r262": 67, "unnorm": [67, 69], "qquad": [67, 180, 203], "jn": [67, 69, 172, 206, 210, 281], "spheric": [67, 113, 119, 154, 195, 196, 206, 255, 259, 260, 281], "r263": 67, "sinc_funct": 67, "asinh": [67, 210], "r264": 67, "inverse_trigonometric_funct": 67, "r265": 67, "r266": 67, "r267": 67, "r268": 67, "r269": 67, "r270": 67, "r271": 67, "r272": 67, "arctan": [67, 207, 210], "acoth": [67, 210], "r273": 67, "r274": 67, "arccot": [67, 210], "r278": 67, "r275": 67, "r276": 67, "r277": 67, "arcsec": [67, 210], "r279": 67, "r280": 67, "r281": 67, "arccsc": [67, 210], "quadrant": [67, 201, 229], "clock": [67, 219], "reurn": 67, "r282": 67, "r283": 67, "r284": 67, "arctan2": [67, 210], "hyperbolicfunct": 67, "coth": [67, 210, 222], "acosh": [67, 210], "atanh": [67, 207, 210, 220], "sech": [67, 210], "csch": [67, 210], "asech": [67, 210], "r285": 67, "hyperbolic_funct": 67, "r286": 67, "r287": 67, "arcsech": [67, 210], "acsch": [67, 210], "r288": 67, "r289": 67, "r290": 67, "arccsch": [67, 210], "567": 67, "r291": 67, "r292": 67, "ceilingfunct": 67, "r293": 67, "r294": 67, "floorfunct": 67, "roundfunct": 67, "r295": 67, "lfloor": [67, 201, 229, 230], "rfloor": [67, 201, 229, 230], "fractional_part": 67, "r296": 67, "fractionalpart": 67, "lambertw": [67, 207, 210, 228, 229, 288], "r297": 67, "w_k": 67, "635564016364870": 67, "34747534407696": 67, "41624341514535": 67, "lambert_w_funct": 67, "exprcondpair": 67, "cond": [67, 86, 88, 218], "piecewise_fold": 67, "folded_cond": 67, "ITE": [67, 91, 210], "piecewise_exclus": 67, "_eval_integr": [67, 88], "piecewise_integr": 67, "as_expr_set_pair": 67, "skip_nan": 67, "mutual": [67, 86, 194], "conjunct": [67, 91, 196, 220, 241, 287], "identityfunct": 67, "supremum": [67, 218], "r298": 67, "directed_complete_partial_ord": 67, "r299": 67, "lattice_": 67, "28order": 67, "global_paramet": 67, "real_root": [67, 206, 228], "rootoftool": [67, 97, 206], "r300": 67, "square_root": 67, "r301": 67, "r302": 67, "root_of_un": 67, "r303": 67, "principal_valu": [67, 88], "r304": 67, "cuberoot": 67, "powdenest": [67, 222], "misc": [67, 92, 251], "r305": 67, "r306": 67, "r307": 67, "cube_root": 67, "r308": 67, "delta_funct": [69, 88], "int_": [69, 85, 86, 88, 206, 213, 277, 281], "sum_i": [69, 217], "is_simpl": 69, "tensor_funct": 69, "kroneckerdelta": [69, 94, 175, 210, 222], "r309": 69, "deltafunct": [69, 88], "h0": 69, "electron": [69, 113, 219], "signal": [69, 91, 101, 109, 111, 142, 203, 282], "improp": [69, 88], "convolut": [69, 212], "r310": 69, "heavisidestepfunct": 69, "r311": 69, "iv": [69, 207], "105": [69, 101, 206, 223], "parg": 69, "singularity_funct": 69, "singularityfunct": [69, 88, 104], "macaulai": 69, "heavisidediracdelta": 69, "r312": 69, "r313": 69, "r314": 69, "r315": 69, "r316": 69, "setminu": [69, 86], "17805383034794561964694160130": 69, "65092319930185633889": 69, "8724366472624298171": 69, "r317": 69, "r318": 69, "r319": 69, "loggammafunct": 69, "r320": 69, "espinosa": 69, "moll": 69, "r325": 69, "19093197": 69, "5173168": 69, "ni": [69, 101], "r321": 69, "polygamma_funct": 69, "r322": 69, "polygammafunct": 69, "r323": 69, "r324": 69, "polygamma2": 69, "2004": [69, 204, 223], "115": 69, "r326": 69, "digamma_funct": 69, "r327": 69, "digammafunct": 69, "r328": 69, "r329": 69, "trigamma_funct": 69, "r330": 69, "trigammafunct": 69, "r331": 69, "int_x": 69, "_1f_1": 69, "confluent": [69, 220], "xt": 69, "expint": [69, 210], "r332": 69, "incomplete_gamma_funct": 69, "upper_incomplete_gamma_funct": 69, "r333": 69, "r334": 69, "r335": 69, "gamma2": 69, "r336": 69, "gamma3": 69, "r337": 69, "exponential_integr": 69, "relation_with_other_funct": 69, "int_0": [69, 86, 88, 277, 287], "r338": 69, "lower_incomplete_gamma_funct": 69, "r339": 69, "r340": 69, "r341": 69, "r342": 69, "multigamma": 69, "gamma_p": 69, "r343": 69, "multivariate_gamma_funct": 69, "beta_funct": 69, "eulerian": 69, "02671848900111377452242355235388489324562": 69, "2112723729365330143": 69, "7655283165378005676": 69, "r344": 69, "r345": 69, "betafunct": 69, "r346": 69, "error_funct": 69, "999999984582742099719981147840": 69, "1296959": 69, "73071763923152794095062": 69, "r347": 69, "r348": 69, "r349": 69, "r350": 69, "0000000154172579002800188521596734869": 69, "r351": 69, "r352": 69, "r353": 69, "r354": 69, "5648024145755525987042919132": 69, "995322265018952734162069256367": 69, "r355": 69, "r356": 69, "r357": 69, "r358": 69, "179143454621291692285822705344": 69, "r359": 69, "inverse_funct": 69, "r360": 69, "inverseerf": [69, 210], "r361": 69, "r362": 69, "inverseerfc": [69, 210], "r363": 69, "inverseerf2": 69, "fresnelintegr": 69, "343415678363698242195300815958": 69, "fresnelc": [69, 210, 220], "r364": 69, "fresnel_integr": 69, "r365": 69, "r366": 69, "r367": 69, "r368": 69, "wrench": 69, "jr": 69, "vicki": 69, "allei": 69, "488253406075340754500223503357": 69, "r369": 69, "r370": 69, "r371": 69, "r372": 69, "r373": 69, "background": [69, 89, 190, 193, 285], "cauchi": [69, 86, 88, 201, 226, 230], "219383934395520": 69, "21938393439552": 69, "shi": [69, 86, 210, 220], "e1": [69, 71, 78, 125, 200, 205, 217, 226, 229], "hyperbol": [69, 207, 229, 283, 287], "r374": 69, "r375": 69, "r376": 69, "sfu": [69, 88], "cbm": [69, 88], "aand": [69, 88], "page_228": 69, "int_1": [69, 86], "zt": [69, 86], "unbranch": [69, 86], "meijerg": [69, 80, 86, 88, 210, 230, 287], "postiv": 69, "r377": 69, "r378": 69, "expintegral": [69, 210], "r379": 69, "04516378011749278484458888919": 69, "0652795784357498247001125598": 69, "08346052231061726610939702133": 69, "soldner": 69, "45136923488338": 69, "r380": 69, "logarithmic_integr": 69, "r381": 69, "logarithmicintegr": 69, "r382": 69, "r383": 69, "soldnersconst": 69, "92242131492155809316615998938": 69, "r384": 69, "r385": 69, "r386": 69, "r387": 69, "trigonometric_integr": 69, "_1": [69, 97, 119, 185, 195, 220, 249], "somewhat": [69, 88, 125, 201], "r388": 69, "r389": 69, "r390": 69, "laurent": [69, 201, 207, 226], "j_n": [69, 172], "r391": 69, "r392": 69, "r393": 69, "r394": 69, "yn": [69, 210, 216], "r395": 69, "i_": [69, 86, 220, 230, 231], "iz": 69, "r396": 69, "k_": [69, 86, 120, 137, 138], "r397": 69, "hankel1": [69, 210], "hankel": [69, 88], "iy_": 69, "hankel2": [69, 210], "r398": 69, "hankelh1": [69, 210], "r399": 69, "hankelh2": [69, 210], "orthopoli": [69, 206], "spherical_bessel_fn": [69, 206], "3j": [69, 154, 195], "099419756723640344491": 69, "054525080242173562897": 69, "r400": 69, "y_n": [69, 223], "18525034196069722536": 69, "014895573969924817587": 69, "r401": 69, "jn_zero": 69, "besseljzero": 69, "sph_jn": 69, "7635": 69, "095": 69, "323": [69, 101], "515": 69, "marcumq": 69, "marcum": 69, "q_m": 69, "r402": 69, "marcum_q": 69, "r403": 69, "airybas": 69, "airyai": [69, 210, 226], "ai": [69, 101, 206, 223, 251, 287], "airyaiprim": [69, 210], "22740742820168557599192443603787379946077222541710": 69, "airybi": [69, 210, 226], "airybiprim": [69, 210], "r404": 69, "airy_funct": 69, "r405": 69, "r406": 69, "encyclopediaofmath": 69, "r407": 69, "airyfunct": 69, "41230258795639848808323405461146104203453483447240": 69, "r408": 69, "r409": 69, "r410": 69, "r411": 69, "61825902074169104140626429133247528291577794512415": 69, "r412": 69, "r413": 69, "r414": 69, "r415": 69, "27879516692116952268509756941098324140300059345163": 69, "r416": 69, "r417": 69, "r418": 69, "r419": 69, "bspline": 69, "bspline_basi": 69, "knot": 69, "bspline_basis_set": 69, "r420": 69, "interpolating_splin": 69, "131": [69, 185], "39": [69, 101, 209], "interpolating_poli": [69, 206], "zeta_funct": 69, "admit": [69, 226], "lerch": 69, "transcend": 69, "lerchphi": [69, 210], "dirichlet_eta": [69, 210], "20205690315959": 69, "polylog": [69, 210], "r421": 69, "r422": 69, "hurwitz_zeta_funct": 69, "r423": 69, "dirichlet_eta_funct": 69, "r424": 69, "polylogarithm": 69, "sheet": [69, 219], "phi_0": 69, "ze": 69, "r425": 69, "bateman": 69, "erdelyi": 69, "1953": [69, 205], "york": [69, 86, 141, 220, 228], "mcgraw": [69, 120, 141, 185, 192, 255], "r426": 69, "r427": 69, "lerch_transcend": 69, "stieltj": [69, 210], "gamma_": [69, 112, 114], "r428": 69, "stieltjes_const": 69, "ap": [69, 73, 220], "bq": [69, 198, 199, 220], "a_p": [69, 86, 220, 287], "b_q": [69, 86, 220, 287], "_pf_q": [69, 220, 226, 287], "unicod": [69, 89, 97, 190, 210, 241, 281], "r429": 69, "r430": 69, "generalized_hypergeometric_funct": 69, "convergence_stat": 69, "radius_of_converg": 69, "radiu": [69, 71, 75, 77, 132, 134, 144, 148, 196, 229, 230, 265], "meijer": [69, 79, 87, 88, 267, 277, 287], "mellin": [69, 88], "barn": 69, "b_m": [69, 86, 228], "confusingli": 69, "int_l": [69, 86, 220], "contour": [69, 71, 86, 196, 220], "__1": 69, "subvector": 69, "aother": 69, "bm": 69, "bother": [69, 282], "slater": [69, 220], "allow_hyp": [69, 222], "subsum": 69, "r431": 69, "r432": 69, "meijer_g": 69, "get_period": [69, 86], "appellf1": [69, 210], "0063339426292673": 69, "172870711": 69, "659936": 69, "15605338197184": 69, "r433": 69, "appell_seri": 69, "r434": 69, "hypergeometricfunct": 69, "elliptic_integr": 69, "elliptic_k": [69, 210], "tfrac": [69, 226, 230], "eccentr": [69, 71], "50923695405127": 69, "625146415202697": 69, "elliptic_f": [69, 210], "r435": 69, "r436": 69, "ellipticintegr": 69, "elliptick": [69, 210], "909449841483": 69, "74720545502474": 69, "r437": 69, "r438": 69, "ellipticf": 69, "elliptic_": [69, 71, 210], "55203744279187": 69, "290764986058437": 69, "991052601328069": 69, "81879421395609": 69, "r439": 69, "r440": 69, "elliptice2": 69, "r441": 69, "elliptic": [69, 210], "elliptic_pi": [69, 210], "50232379629182": 69, "760939574180767": 69, "29136443417283": 69, "32555634906645": 69, "r442": 69, "r443": 69, "ellipticpi3": 69, "r444": 69, "ellipticpi": [69, 210], "mathieu_funct": 69, "mathieubas": 69, "mathieusprim": [69, 210], "mathieuc": [69, 210], "mathieucprim": [69, 210], "r445": 69, "r446": 69, "r447": 69, "r448": 69, "mathieuandspheroidalfunct": 69, "r449": 69, "r450": 69, "r451": 69, "r452": 69, "r453": 69, "r454": 69, "r455": 69, "r456": 69, "r457": 69, "r458": 69, "r459": 69, "r460": 69, "chebyshevu": [69, 210], "chebyshevt_root": 69, "chebyshevu_root": 69, "assoc_legendr": [69, 210], "hermite_prob": 69, "jacobi_poli": [69, 206], "gegenbauer_poli": [69, 206], "chebyshevt_poli": [69, 206], "chebyshevu_poli": [69, 206], "hermite_poli": [69, 206], "legendre_poli": [69, 206], "laguerre_poli": [69, 206], "r461": 69, "jacobi_polynomi": 69, "r462": 69, "jacobipolynomi": 69, "r463": 69, "jacobip": [69, 210], "jacobi_norm": 69, "normilz": 69, "p_m": 69, "delta_": [69, 172, 180, 195], "r464": 69, "r465": 69, "r466": 69, "hermite_prob_poli": [69, 206], "r467": 69, "gegenbauer_polynomi": 69, "r468": 69, "gegenbauerpolynomi": 69, "r469": 69, "gegenbauerc3": 69, "r470": 69, "chebyshev_polynomi": 69, "r471": 69, "chebyshevpolynomialofthefirstkind": 69, "r472": 69, "chebyshevpolynomialofthesecondkind": 69, "r473": 69, "r474": 69, "u_n": [69, 88, 203, 205, 206], "r475": 69, "r476": 69, "r477": 69, "r478": 69, "r479": 69, "chebyshev_root": 69, "r480": 69, "legendre_polynomi": 69, "r481": 69, "legendrepolynomi": 69, "r482": 69, "legendrep": [69, 210], "r483": 69, "legendrep2": 69, "r484": 69, "associated_legendre_polynomi": 69, "r485": 69, "r486": 69, "r487": 69, "r488": 69, "hermite_polynomi": 69, "r489": 69, "hermitepolynomi": 69, "r490": 69, "hermiteh": [69, 210], "probabilist": [69, 206, 230], "he_n": [69, 206], "telephon": 69, "a000085": 69, "232": 69, "764": 69, "2620": 69, "9496": 69, "r491": 69, "r492": 69, "l_n": [69, 88, 206], "r493": 69, "laguerre_polynomi": 69, "r494": 69, "laguerrepolynomi": 69, "r495": 69, "laguerrel": [69, 210], "r496": 69, "laguerrel3": 69, "r497": 69, "generalized_laguerre_polynomi": 69, "r498": 69, "associatedlaguerrepolynomi": 69, "r499": 69, "r500": 69, "spherical_harmon": 69, "ynm": [69, 195], "ynm_c": 69, "znm": 69, "r501": 69, "r502": 69, "sphericalharmon": 69, "r503": 69, "sphericalharmonici": 69, "r504": 69, "r505": 69, "r506": 69, "r507": 69, "z_n": [69, 204], "r508": 69, "r509": 69, "r510": 69, "eijk": 69, "levicivita": [69, 97], "eval_levicivita": 69, "pseudotensor": 69, "delta_rang": [69, 175], "kroneck": [69, 174, 175, 195, 231, 236], "r511": 69, "kronecker_delta": [69, 175], "indices_contain_equal_inform": [69, 175], "fermi": [69, 175], "above_fermi": [69, 175], "below_fermi": [69, 175], "is_above_fermi": [69, 175], "is_below_fermi": [69, 175], "is_only_below_fermi": [69, 175], "is_only_above_fermi": [69, 175], "killable_index": [69, 175], "preferred_index": [69, 175], "point2d": [70, 71, 72, 73, 74, 76, 77, 78], "arbitrary_point": [70, 71, 72, 73, 74, 75, 77], "polyfunc": [70, 206], "ambient_dimens": [70, 72, 74, 76], "plot_interv": [70, 71, 74, 77], "lower_bound": [70, 71, 74, 77], "upper_bound": [70, 71, 74, 77], "counterclockwis": [70, 71, 72, 76, 104, 105], "geometryent": [70, 71, 72, 74, 76, 77, 78], "hradiu": 71, "vradiu": 71, "ellipt": [71, 101, 197], "geometryerror": [71, 74, 77, 78], "radii": 71, "foci": 71, "periapsi": 71, "apoapsi": 71, "focus_dist": 71, "shortest": [71, 74, 77, 193, 216, 222, 226, 248], "auxiliary_circl": 71, "xmin": [71, 72, 74, 76, 77, 196], "ymin": [71, 72, 74, 76, 77, 196], "xmax": [71, 72, 74, 76, 77, 196], "ymax": [71, 72, 74, 76, 77, 196], "rectangl": [71, 72, 74, 76, 77, 196, 206], "director_circl": 71, "perpendicular": [71, 74, 75, 77, 90, 119, 133, 148, 194], "director": 71, "130": 71, "r512": 71, "encloses_point": [71, 72, 77], "border": [71, 77], "_slope": 71, "slope": [71, 72, 74, 77, 104, 105, 109, 119], "r513": 71, "108270": 71, "r514": 71, "equation_of_a_shifted_ellips": 71, "evolut": 71, "focal": [71, 144, 148], "100500": 71, "363": [71, 101, 204], "175": [71, 97, 203, 204], "is_tang": [71, 73], "tangent_lin": 71, "normal_lin": 71, "line2d": [71, 74, 77], "2020": [71, 154], "polar_second_moment_of_area": [71, 77], "moment": [71, 77, 104, 105, 127, 135, 138, 184, 196, 206, 223, 230], "constitu": [71, 77, 122, 185, 216, 255], "planar": [71, 77, 105, 119, 148], "resist": [71, 77, 104, 105, 219], "deflect": [71, 77, 104, 105], "bend": [71, 77, 104, 106, 272], "r515": 71, "polar_moment_of_inertia": [71, 77], "random_point": [71, 74, 75], "arb": 71, "364": 71, "notimpl": [71, 205], "second_moment_of_area": [71, 77], "centroid": [71, 77, 78, 104], "i_xx": [71, 77], "i_yi": [71, 77], "i_xi": [71, 77], "ellis": 71, "r516": 71, "list_of_second_moments_of_area": 71, "section_modulu": [71, 77], "sympify": [71, 77, 104, 107, 116, 122, 146, 149, 187], "farthest": [71, 77], "s_x": [71, 77], "s_y": [71, 77], "r517": 71, "semilatus_rectum": 71, "semi": [71, 74, 101], "latu": 71, "rectum": 71, "chord": 71, "conic": [71, 223, 255], "directrix": 71, "r518": 71, "semilatusrectum": 71, "r519": 71, "latus_rectum": 71, "collinear": [71, 73, 75, 76, 77, 196], "gx": 71, "hy": 71, "synonym": [71, 205], "p4": [71, 74, 76, 77, 196], "boundari": [72, 74, 104, 105, 189, 207, 218, 226, 230], "t2": [72, 77, 78, 101, 116, 122, 223, 230, 236], "ordering_of_class": 72, "is_similar": [72, 74, 77, 78], "uniform": [72, 196, 228, 230], "enlarg": 72, "shrink": [72, 86], "parameter_valu": [72, 75], "pent": 72, "rpent": 72, "rcirc": 72, "entity1": 73, "entity2": 73, "zp": 73, "is_collinear": [73, 76], "segment2d": [73, 74, 77, 78], "wikipappu": 73, "bc": [73, 107, 248, 251, 261], "subs_point": 73, "p11": 73, "p12": 73, "p13": 73, "p21": 73, "p22": 73, "p23": 73, "ll1": 73, "ll2": 73, "ll3": 73, "ll4": 73, "ll5": 73, "ll6": 73, "pp1": 73, "pp2": 73, "pp3": 73, "encyclopedia": [73, 192], "apr": 73, "s_hexagon_theorem": 73, "clockwis": [73, 88, 92, 104, 105, 107], "overlap": [73, 78, 100, 197, 218, 251], "infanc": 73, "geometryresult": 73, "fair": [73, 230], "angle_between": [74, 75, 77, 185], "reflex": 74, "eman": 74, "readili": [74, 97], "sw": 74, "obtus": 74, "smallest_angle_between": 74, "line3d": [74, 75, 76], "is_perpendicular": [74, 75, 76, 77], "ray2d": [74, 77], "closing_angl": 74, "are_concurr": [74, 75], "concurr": [74, 75, 207], "l3": [74, 128, 203], "l4": [74, 128], "bisector": [74, 77], "p5": [74, 76, 77, 196], "p6": [74, 77, 196], "p7": [74, 77, 196], "segment3d": [74, 75], "direction_ratio": [74, 76], "is_parallel": [74, 75], "parallel_lin": 74, "perpendicular_lin": [74, 75], "perpendicular_seg": 74, "reform": 74, "92": [74, 204, 226, 230], "ccw": [74, 77], "ray3d": [74, 75, 148], "xdirect": 74, "ydirect": 74, "midpoint": [74, 76, 77, 88, 196, 261], "170": [74, 230], "341": 74, "perpendicular_bisector": 74, "linearentity2d": 74, "linearentity3d": [74, 75], "direction_cosin": [74, 76], "zdirect": 74, "normal_vector": [75, 148], "proce": [75, 139, 203, 205, 220, 228], "147": 75, "321": 75, "is_coplanar": 75, "perpendicualar": 75, "parallel_plan": 75, "on_circl": 75, "off_circl": 75, "perpendicular_plan": 75, "pt1": 75, "projection_lin": 75, "on_morph": 76, "affine_rank": 76, "are_coplanar": 76, "canberra_dist": 76, "canberra": 76, "geometricent": 76, "taxicab_dist": 76, "is_concycl": 76, "concycl": 76, "fewer": [76, 77, 139, 230, 277], "is_scalar_multipl": 76, "ambient": 76, "orthogonal_direct": 76, "taxicab": 76, "_nocheck": 76, "are_collinear": 76, "unrot": 77, "circumscrib": 77, "spin": [77, 113, 127, 161, 162, 170, 272], "perimet": 77, "contact": [77, 127, 131, 132, 133, 134, 193, 234], "38": [77, 97, 101, 210, 223, 225, 230], "cut_sect": 77, "upper_polygon": 77, "lower_polygon": 77, "upper_seg": 77, "lower_seg": 77, "r520": 77, "r521": 77, "paulbourk": 77, "polygonmesh": 77, "insidepoli": 77, "first_moment_of_area": 77, "q_x": [77, 193], "q_y": [77, 193], "625": [77, 265], "3125": [77, 230], "525": 77, "3000": [77, 104], "r522": 77, "skyciv": 77, "beam": [77, 107, 144, 147, 272], "bmd": 77, "r523": 77, "mechanicalc": 77, "poly1": 77, "poly2": 77, "interior": [77, 206, 218], "180": [77, 194, 204], "r524": 77, "r525": 77, "r526": 77, "apothem": 77, "interior_angl": 77, "exterior_angl": 77, "circumcircl": 77, "incircl": 77, "inradiu": 77, "inscrib": 77, "circumcent": 77, "circumradiu": 77, "leg": 77, "square_in_unit_circl": 77, "kite": 77, "asa": 77, "sa": [77, 206], "sss": 77, "altitud": 77, "orthocent": 77, "exradii": 77, "median": [77, 230], "medial": 77, "nine_point_circl": 77, "straight": [77, 83, 109, 129, 193, 226], "eulerlin": 77, "equilater": 77, "coincid": [77, 97, 100, 119, 125, 197, 255, 260, 279], "excent": 77, "excircl": 77, "touch": [77, 127, 219], "r527": 77, "ly": [77, 97, 201], "exradiu": 77, "r528": 77, "r529": 77, "incent": 77, "is_equilater": 77, "is_isoscel": 77, "is_right": 77, "is_scalen": 77, "nine": [77, 210], "feet": 77, "real_num": 78, "hull": 78, "r530": 78, "graham_scan": 78, "r531": 78, "andrew": 78, "1979": [78, 180], "geomalgorithm": 78, "a10": 78, "_hull": 78, "t3": [78, 223], "averag": [78, 88, 101, 203, 230], "qq": [79, 80, 82, 83, 84, 88, 197, 198, 199, 200, 203, 205, 206, 207], "p_r": 79, "holonomic_funct": 79, "from_hyp": [80, 83], "holonomicfunct": [80, 83, 84], "from_meijerg": [80, 83], "initcond": [80, 82, 83], "expr_to_holonom": [80, 83, 84, 85], "lenic": [80, 82], "ground": [80, 119, 127, 131, 132, 133, 134, 197, 200, 201, 203, 205, 206, 228, 286], "meijerint": [80, 82, 86, 88], "_rewrite1": [80, 86], "_convert_poly_rat_alg": [80, 82], "_create_t": [80, 82], "_create_lookup_t": [82, 86], "differentialoper": [83, 84, 164], "old_poly_r": [83, 84, 197, 200, 201], "to_expr": [83, 84, 85, 111], "to_sequ": 83, "n_0": [83, 203, 228, 229], "indici": [83, 84, 85, 226], "c_j": [83, 86, 220], "holonomicsequ": 83, "r532": 83, "hal": 83, "inria": [83, 88], "fr": [83, 88, 101, 120, 125, 127, 129, 132, 133, 137, 139, 142, 230], "00070025": 83, "r533": 83, "risc": [83, 226, 255], "jku": [83, 226, 255], "risc_2244": 83, "diplform": 83, "_recur": 83, "rk4": 83, "71828182845905": 83, "10517083333333": 83, "22140257085069": 83, "34985849706254": 83, "49182424008069": 83, "64872063859684": 83, "82211796209193": 83, "01375162659678": 83, "22553956329232": 83, "45960141378007": 83, "71827974413517": 83, "331": 83, "4641": 83, "61051": 83, "771561": 83, "9487171": 83, "14358881": 83, "357947691": 83, "5937424601": 83, "to_hyp": 83, "as_list": [83, 206], "to_meijerg": 83, "1_0": 84, "1_1": 84, "0_0": 84, "0_1": 84, "list_of_poli": 84, "weyl": [84, 90], "differentialoperatoralgebra": 84, "Ore": 84, "dxa": 84, "endomorph": [84, 205], "frobeniu": [85, 97, 101, 203, 204], "subtleti": 86, "recast": [86, 222, 228, 229], "branchpoint": 86, "crude": [86, 127, 196], "decre": 86, "biholomorph": 86, "topologi": [86, 218], "neighbourhood": 86, "evid": [86, 120, 133, 220], "peculiar": [86, 194], "_split_mul": 86, "_mytyp": 86, "inequival": 86, "_mul_as_two_part": 86, "twist": 86, "recognis": [86, 200, 220, 222], "anywai": [86, 222, 226], "analyitc": 86, "_rewrite_singl": 86, "_rewrite2": 86, "_rewrite_saxena_1": 86, "_rewrite_saxena": 86, "blogpost": 86, "remedi": 86, "exploit": [86, 242], "transpar": [86, 89, 190], "nessgrh": 86, "wordpress": [86, 223], "07": 86, "stade": 86, "c_u": 86, "d_1": [86, 180, 206, 230], "d_v": 86, "amalgam": 86, "prudnikov1990": [86, 220], "luke1969": [86, 220], "c_3": [86, 226], "c_4": 86, "visibl": [86, 196], "fulfil": [86, 195], "vee": [86, 91], "lceil": 86, "rceil": 86, "d_j": [86, 180, 220], "lambda_c": [86, 138], "lambda_": 86, "z_0": [86, 222], "z_1": 86, "a_i": [86, 180, 185, 194, 198, 203, 220], "c_5": 86, "c_6": 86, "c_7": 86, "c_8": 86, "lvert": 86, "rvert": 86, "c_9": 86, "versatil": 86, "bz": [86, 223, 236], "deform": [86, 105], "encircl": 86, "appeal": 86, "fox": 86, "obstacl": 86, "identif": [86, 229], "domin": [86, 92, 215, 217], "iT": 86, "omega_": 86, "disguis": 86, "meijerint_indefinit": 86, "meijerint_definit": 86, "meijerint_invers": 86, "kelli": [86, 220], "roach": [86, 220], "211": [86, 101, 206, 220, 226], "prudnikov": [86, 220], "yu": [86, 195, 220], "brychkov": [86, 220], "marichev": [86, 220], "gordon": [86, 154, 220], "breach": [86, 220], "_coeffexpvalueerror": 86, "_get_coeff_exp": 86, "_check_anteced": 86, "_check_antecedents_1": 86, "mt": 86, "_check_antecedents_invers": 86, "anteced": [86, 217], "_condsimp": 86, "hoc": 86, "simp": [86, 127, 185], "_dummi": 86, "_dummy_": 86, "_eval_cond": 86, "_expon": 86, "_find_splitting_point": 86, "fsp": 86, "_flip_g": 86, "_function": 86, "_guess_expans": 86, "sensibl": [86, 88], "_inflate_fox_h": 86, "_inflate_g": 86, "_int0oo": 86, "_int0oo_1": 86, "_int_invers": 86, "_is_analyt": 86, "_meijerint_definite_2": 86, "trigexpand": 86, "_meijerint_definite_3": 86, "_meijerint_definite_4": 86, "only_doubl": 86, "_meijerint_indefinite_1": 86, "_mul_arg": 86, "_my_principal_branch": 86, "full_pb": 86, "nearer": 86, "superflu": 86, "opaqu": [86, 210], "fac": 86, "_rewrite_invers": 86, "costli": [86, 129, 283], "tx": [86, 285], "happili": [88, 234], "nonelementari": 88, "mellin_transform": 88, "bilater": 88, "laplac": [88, 108, 109, 111, 230], "mellintransform": 88, "integraltransform": 88, "nocond": 88, "inverse_mellin_transform": 88, "laplace_transform": [88, 111], "fourier_transform": 88, "hankel_transform": 88, "inverse_hankel_transform": 88, "suitabl": [88, 94, 103, 195, 198, 200, 203, 205, 210, 220, 223, 226, 229, 231, 280], "inversemellintransform": 88, "laplacetransform": 88, "inverse_laplace_transform": 88, "singularit": [88, 139], "inverselaplacetransform": 88, "_fast_inverse_laplac": 88, "rootsum": [88, 206, 212], "fouriertransform": 88, "_fourier_transform": 88, "inverse_fourier_transform": 88, "sine_transform": 88, "inverse_sine_transform": 88, "cosine_transform": 88, "inverse_cosine_transform": 88, "bixk": 88, "inversefouriertransform": 88, "sinetransform": 88, "inversesinetransform": 88, "cosinetransform": 88, "inversecosinetransform": 88, "hankeltransform": 88, "ht": 88, "inversehankeltransform": 88, "_compute_transform": 88, "_as_integr": 88, "integraltransformerror": 88, "_name": 88, "_collapse_extra": 88, "needev": 88, "function_vari": 88, "transform_vari": 88, "lazard": [88, 203, 206], "rioboo": 88, "trager": 88, "horowitz": 88, "ostrogradski": 88, "ratint": 88, "rationaltool": [88, 206], "ratint_logpart": 88, "ratint_ratpart": 88, "r534": 88, "bronstein": [88, 204, 206, 212, 228], "verlag": [88, 204], "deg": [88, 109, 125, 198, 203, 205, 206], "q_i": [88, 121, 139], "_t": [88, 125, 128, 142, 175, 184, 185, 189, 220, 230], "trigintegr": 88, "trigonometri": 88, "r535": 88, "integration_techniqu": 88, "deltaintegr": 88, "couldn": 88, "didn": [88, 97, 139], "singularityintegr": 88, "risch_integr": 88, "nonelementaryintegr": 88, "proven": [88, 101, 261, 279], "handle_first": 88, "separate_integr": 88, "rewrite_complex": 88, "forthcom": 88, "5109": 88, "pop": [88, 223], "manualintegr": 88, "integral_step": 88, "student": [88, 219, 223, 230], "_i": [88, 175, 180, 207], "namedtupl": 88, "substep": 88, "sympy_gamma": 88, "app": 88, "intstep": 88, "urul": 88, "u_var": 88, "_u": [88, 175], "u_func": 88, "arctanrul": 88, "trigrul": 88, "rewriterul": 88, "addrul": 88, "powerrul": 88, "constanttimesrul": 88, "constantrul": 88, "norman": 88, "retri": [88, 101], "degree_offset": 88, "unnecessary_permut": 88, "_try_heurisch": 88, "manuel": [88, 215], "poor": [88, 102], "man": [88, 204], "airi": [88, 226], "whittak": 88, "r536": 88, "sop": [88, 91], "cafe": 88, "pmint": 88, "r537": 88, "gedd": [88, 204], "stefanu": 88, "217": [88, 204], "r538": 88, "davenport": [88, 203, 204], "eurocam": 88, "lnc": [88, 204, 228], "157": [88, 101, 105, 204], "r539": 88, "iii": [88, 210, 226], "sigsam": 88, "bulletin": 88, "1982": [88, 195], "r540": 88, "transact": [88, 204], "1985": [88, 120, 141, 185, 255], "356": [88, 205, 228], "362": 88, "lookup": [88, 97, 101, 220], "huge": [88, 101, 206, 246], "entail": 88, "delic": [88, 197], "albeit": [88, 259], "mimic": [88, 89, 190, 249], "moder": 88, "irrespect": [88, 223, 226, 251], "line_integr": 88, "as_sum": 88, "subinterv": 88, "trapezoid": [88, 97, 230], "730": 88, "809": 88, "decai": 88, "r541": 88, "riemann_sum": 88, "r542": 88, "cauchy_principal_valu": 88, "r543": 88, "cauchyprincipalvalu": 88, "int_a": 88, "uvar": 88, "ui": [88, 101, 227], "3aissu": 88, "3aopen": 88, "3aintegr": 88, "gauss_legendr": 88, "n_digit": 88, "legendr": [88, 101, 206, 210, 223], "r544": 88, "w_i": [88, 144, 206, 226], "7746": 88, "55556": 88, "88889": 88, "86114": 88, "33998": 88, "34785": 88, "65215": 88, "gauss_laguerr": 88, "gauss_gen_laguerr": 88, "gauss_hermit": 88, "gauss_chebyshev_t": 88, "gauss_chebyshev_u": 88, "gauss_jacobi": 88, "gauss_lobatto": 88, "gaussian_quadratur": 88, "r545": 88, "fsu": 88, "jburkardt": 88, "cpp_src": 88, "legendre_rul": 88, "laguerr": [88, 206, 210], "r546": 88, "41577": 88, "2943": 88, "2899": 88, "71109": 88, "27852": 88, "010389": 88, "22285": 88, "1889": 88, "9927": 88, "7751": 88, "8375": 88, "983": 88, "45896": 88, "417": [88, 222], "11337": 88, "010399": 88, "00026102": 88, "9855e": 88, "93laguerre_quadratur": 88, "r547": 88, "laguerre_rul": 88, "hermit": [88, 92, 97, 98, 199, 205, 206, 210, 230], "r548": 88, "2247": 88, "29541": 88, "1816": 88, "3506": 88, "3358": 88, "43608": 88, "00453": 88, "15707": 88, "72463": 88, "hermite_quadratur": 88, "r549": 88, "hermite_rul": 88, "r550": 88, "gen_hermite_rul": 88, "r551": 88, "19016": 88, "7845": 88, "5253": 88, "4493": 88, "31413": 88, "00906": 88, "97851": 88, "9904": 88, "3193": 88, "712": 88, "53087": 88, "67721": 88, "11895": 88, "0023152": 88, "r552": 88, "gen_laguerre_rul": 88, "r553": 88, "86602": 88, "0472": 88, "96593": 88, "70711": 88, "25882": 88, "5236": 88, "93gauss_quadratur": 88, "r554": 88, "chebyshev1_rul": 88, "r555": 88, "3927": 88, "7854": 88, "90097": 88, "62349": 88, "22252": 88, "084489": 88, "27433": 88, "42658": 88, "r556": 88, "chebyshev2_rul": 88, "jacobi": [88, 101, 113, 206, 210], "r557": 88, "7063": 88, "0973": 88, "33795": 88, "87174": 88, "5917": 88, "2093": 88, "050584": 88, "22169": 88, "39439": 88, "93jacobi_quadratur": 88, "r558": 88, "jacobi_rul": 88, "r559": 88, "gegenbauer_rul": 88, "lobatto": 88, "r560": 88, "3333": 88, "44721": 88, "16667": 88, "83333": 88, "93lobatto_rul": 88, "r561": 88, "page_888": 88, "intpoli": 88, "chin": 88, "al": [88, 125, 154, 203, 219, 222], "2015": [88, 229], "unit_cub": 88, "polytope_integr": 88, "eric": [88, 204], "jean": 88, "lasserr": 88, "sukumar": 88, "nonconvex": 88, "967": 88, "981": 88, "dilbert": 88, "engr": 88, "ucdavi": 88, "suku": 88, "max_degre": [88, 206], "689": [88, 105], "21875": 88, "octahedron": 88, "trivari": 88, "enable_automatic_int_sympif": 89, "enable_automatic_symbol": 89, "init_ipython_sess": 89, "argv": [89, 241], "init_python_sess": 89, "use_latex": [89, 190, 286], "quiet": 89, "str_printer": [89, 190], "latex_print": [89, 190], "pylab": 89, "stringifi": [89, 190], "sstrrepr": [89, 190, 210], "lexograph": [89, 190], "gui": [89, 190], "statu": 89, "\u03b8": [89, 119, 147, 229], "int_to_integ": 89, "decistmt": 89, "f401": 89, "0x12": 89, "num_column": [89, 190, 210, 226], "no_glob": [89, 190], "ip": [89, 163, 169, 190], "forecolor": [89, 190], "backcolor": [89, 190], "fontsiz": [89, 190, 210], "10pt": [89, 190, 210], "latex_mod": [89, 190], "print_builtin": [89, 190], "interactiveconsol": [89, 190], "preambl": [89, 190, 210], "handwritten": [89, 190], "ctan": [89, 190], "pkg": [89, 190], "dvi": [89, 190, 210], "foreground": [89, 190], "black": [89, 160, 171, 190, 210, 286], "white": [89, 190, 230], "documentclass": [89, 190, 210], "dpi": [89, 190], "u03b8": 89, "dvip": 89, "r562": 89, "r563": 89, "the_68_standard_colors_known_to_dvip": 89, "config": 89, "root_system": 90, "rootsystem": 90, "cartantyp": 90, "cartan": 90, "subalgebra": 90, "adjoint": [90, 92, 97, 152, 156], "hyperplan": 90, "k_y": 90, "r564": 90, "r565": 90, "humphrei": 90, "add_as_root": 90, "root1": 90, "root2": 90, "add_simple_root": 90, "newroot": 90, "all_root": [90, 101, 206], "cartan_matrix": 90, "dynkin_diagram": 90, "dynkin": 90, "root_spac": 90, "simple_root": 90, "type_a": 90, "typea": 90, "basic_root": 90, "iin": 90, "jth": [90, 229], "ijth": 90, "cartan_typ": 90, "highest_root": 90, "lie_algebra": 90, "positive_root": 90, "type_b": 90, "typeb": 90, "b4": 90, "b3": [90, 125, 142, 185, 261], "type_c": 90, "typec": 90, "c4": [90, 92, 94, 226], "type_d": 90, "d4": [90, 230], "dmension": 90, "type_": 90, "e6": 90, "type_f": 90, "typef": 90, "f_4": [90, 121], "f4": [90, 196], "type_g": 90, "typeg": 90, "weyl_group": 90, "weylgroup": 90, "semisimpl": 90, "isometri": 90, "coxet": 90, "coxeter_diagram": 90, "undirect": [90, 248], "s_is_j": 90, "delete_doubl": 90, "element_ord": 90, "weylelt": 90, "group_nam": 90, "group_ord": 90, "192": 90, "matrix_form": 90, "cartantype_gener": 90, "standard_cartan": 90, "dynkindiagram": 90, "cartanmatrix": 90, "sopform": 91, "minterm": 91, "dontcar": 91, "simplified_pair": 91, "combo": 91, "outcom": [91, 178, 230], "posform": 91, "r566": 91, "quin": 91, "mccluskey_algorithm": 91, "r567": 91, "27t": 91, "care_term": 91, "r568": 91, "r569": 91, "anfform": 91, "truthvalu": 91, "anf": 91, "zhegalkin": 91, "r570": 91, "zhegalkin_polynomi": 91, "booleantru": 91, "doubt": [91, 125], "greet": 91, "booleanfals": 91, "universalset": [91, 218], "nand": 91, "xnor": 91, "gate": [91, 155, 160, 162, 168, 169, 171, 272], "perspect": [91, 101, 111, 180, 196, 243, 260, 264], "multiplex": 91, "disjunct": 91, "to_anf": 91, "oplu": [91, 159], "to_cnf": 91, "cnf": 91, "mccluskei": 91, "to_dnf": 91, "to_nnf": 91, "nnf": 91, "is_anf": 91, "is_cnf": 91, "is_dnf": 91, "is_nnf": 91, "gateinputcount": 91, "simplify_log": 91, "fewest": [91, 169], "r571": 91, "bool_map": 91, "bool1": 91, "bool2": 91, "function1": 91, "function2": 91, "distribute_and_over_or": 91, "distribute_or_over_and": 91, "distribute_xor_over_and": 91, "eliminate_impl": 91, "truth_tabl": 91, "ibin": [91, 248], "integer_to_term": 91, "0001111011": [91, 248], "1101111000": [91, 248], "term_to_integ": 91, "bool_maxterm": 91, "maxterm": 91, "complement": [91, 94, 206, 218, 229], "r572": 91, "canonical_normal_form": 91, "indexing_maxterm": 91, "bool_minterm": 91, "r573": 91, "indexing_minterm": 91, "bool_monomi": 91, "anf_coeff": 91, "to_int_repr": 91, "all_model": 91, "unsatisfi": 91, "use_model": 91, "unsat": 91, "dirac": [92, 97, 109, 113, 114, 173, 210], "__abs__": [92, 201], "__add__": [92, 201, 205], "__len__": 92, "96": [92, 97, 230], "mismatch": 92, "matrix_multiply_elementwis": [92, 97], "applyfunc": [92, 93, 97, 133, 185, 231], "col": [92, 94, 97, 100, 111, 142, 199, 205, 283], "col_del": [92, 97, 283], "col_join": [92, 97, 127], "col_insert": [92, 283], "row_insert": [92, 283], "row_join": [92, 97, 127], "companion": [92, 94], "c0": [92, 94, 217, 226, 228], "sparsematrix": [92, 97, 100, 211, 222], "diag": [92, 94, 97, 100, 142, 199, 236, 283], "immutablematrix": [92, 93, 94, 111, 185, 230, 255, 258, 283], "blockmatrix": [92, 94, 97], "sparsetool": [92, 100], "kth": [92, 101], "rowslist": [92, 199], "colslist": 92, "submatrix": [92, 97, 203, 230], "get_diag_block": [92, 94, 97], "decoupl": 92, "hstack": [92, 199], "is_anti_symmetr": 92, "is_diagon": [92, 97], "is_low": [92, 199], "is_upp": [92, 199], "matrixeigen": [92, 97], "is_diagonaliz": [92, 97], "is_hermitian": [92, 97], "is_lower_hessenberg": 92, "hessenberg": [92, 97], "superdiagon": 92, "is_upper_hessenberg": 92, "is_strongly_diagonally_domin": 92, "strongli": [92, 97, 199, 248], "m1": [92, 97, 101, 104, 105, 146, 154, 172, 174, 178, 223, 226, 231, 236], "subdiagon": [92, 97], "is_weakly_diagonally_domin": 92, "weakli": [92, 248], "vacuou": 92, "jordan_block": [92, 97], "eigenv": [92, 97, 125, 127, 142, 169, 281, 283], "rectangular": [92, 97, 218, 229, 259], "r574": 92, "jordan_matrix": [92, 226], "dotprodsimp": 92, "blowup": 92, "multiply_elementwis": [92, 97], "hadamard": [92, 94, 97, 159, 160, 171, 210], "elementwis": [92, 94, 97, 231], "300": [92, 97, 101, 104, 191, 196, 207, 264], "a_0": [92, 97, 213, 223, 226, 231, 287], "vdot": [92, 94, 97, 180], "alpha_0": 92, "alpha_1": [92, 101, 205], "alpha_": [92, 195], "permute_col": 92, "permute_row": 92, "mulsimp": 92, "rmultipli": 92, "__rmul__": 92, "rot90": 92, "anticlockwis": 92, "row_del": [92, 97, 283], "todod": 92, "tolist": [92, 231], "vech": 92, "check_symmetri": 92, "vstack": [92, 199], "w_": [92, 205], "wminu": 92, "wplu": 92, "r575": 92, "mathwork": [92, 109, 230, 283], "cleve": 92, "04": [92, 230], "r576": 92, "claredon": 92, "oxford": 92, "662": 92, "intm": 92, "mutabledensematrix": [93, 199, 251], "densematrix": [93, 97], "ldldecomposit": [93, 97], "ldl": [93, 97], "choleski": [93, 97], "ludecomposit": [93, 94, 97, 283], "qrdecomposit": [93, 97], "as_immut": 93, "lower_triangular_solv": [93, 97], "upper_triangular_solv": [93, 97], "gauss_jordan_solv": [93, 97], "cholesky_solv": [93, 97], "diagonal_solv": [93, 97], "ldlsolv": [93, 97], "qrsolv": [93, 97], "pinv_solv": [93, 97], "permutedim": [94, 231, 232], "arraytensorproduct": [94, 232], "from_index_summ": 94, "first_index": 94, "last_index": 94, "longrightarrow": 94, "matpow": [94, 210], "hadamard_product": 94, "aka": 94, "hadamardproduct": [94, 210], "hadamardpow": [94, 210], "ddot": [94, 97, 129, 138, 190, 193, 210, 287], "functionmatrix": 94, "lazili": [94, 216], "342923500": 94, "permutationmatrix": [94, 97], "matrixpermut": 94, "companionmatrix": 94, "matrixset": [94, 218], "submatric": [94, 97, 199, 230], "block_collaps": 94, "dat": [94, 248], "irregular": [94, 97], "ldudecomposit": 94, "ldu": 94, "2x2": [94, 100, 144, 199, 226], "udldecomposit": 94, "udl": 94, "schur": 94, "pinv": [94, 97], "r577": 94, "schur_compl": 94, "blockdiagmatrix": [94, 97], "diag_block": 94, "alias": [95, 201], "bridg": [95, 107, 125, 249], "tension": 95, "gramschmidt": 97, "m2": [97, 101, 104, 105, 122, 146, 154, 172, 174, 178, 205, 223, 226, 231, 236], "126": [97, 101, 209], "150": [97, 111, 223], "v3": [97, 185, 189, 261], "glue": 97, "m3": [97, 154, 223, 231], "adj": 97, "qr": 97, "cheat": 97, "soln": 97, "gram": [97, 180, 182], "schmidt": 97, "out1": 97, "out2": 97, "1692": 97, "1551": 97, "423": 97, "6707": 97, "spot": [97, 143], "eigenvector": [97, 125, 169, 170, 195], "nullspac": [97, 199], "matrixdetermin": 97, "adjug": 97, "berkowitz": 97, "bareiss": 97, "cofactor_matrix": 97, "charpoli": [97, 199, 283], "_simplifi": 97, "purepoli": [97, 206], "samuelson": 97, "minor_submatrix": 97, "iszerofunc": [97, 283], "barei": 97, "det_lu": 97, "functiontyp": 97, "_iszero": [97, 283], "_is_zero_after_expand_mul": 97, "unrecogn": 97, "nonsquarematrixerror": [97, 226], "i3": [97, 112, 125, 142, 236], "perman": 97, "ryser": 97, "450": 97, "r578": 97, "prof": 97, "ben": 97, "berkelei": 97, "bernd": 97, "ban275": 97, "r579": 97, "permanent_": 97, "r580": 97, "r581": 97, "0904": 97, "3251": 97, "matrixreduct": 97, "echelon_form": [97, 283], "with_pivot": 97, "echelon": [97, 199, 229, 283], "elementary_col_op": 97, "kn": [97, 104, 105], "col1": 97, "col2": 97, "km": [97, 101, 115, 120, 127, 129, 132, 133, 137, 139, 142, 181], "elementary_row_op": 97, "row1": 97, "row2": 97, "is_echelon": [97, 283], "rref": [97, 199], "pivot": [97, 199, 283], "normalize_last": 97, "rref_matrix": [97, 199], "rref_pivot": [97, 199], "301369863013699": 97, "712328767123288": 97, "noramlize_last": 97, "matrixsubspac": 97, "subspac": [97, 205], "columnspac": [97, 199], "rowspac": [97, 199], "orthonorm": [97, 142, 170, 194, 259], "rankcheck": 97, "r582": 97, "93schmidt_process": 97, "eigen": [97, 151], "bidiagonal_decomposit": 97, "ubv": 97, "bidiagon": 97, "bidiagn": 97, "r583": 97, "golub": 97, "van": [97, 101, 204], "loan": 97, "r584": 97, "vslobodi": 97, "household": 97, "r585": 97, "r586": 97, "reals_onli": 97, "throw": [97, 103, 125, 205, 223, 229], "error_when_incomplet": 97, "eig": [97, 125, 142], "matrixerror": 97, "got": [97, 197, 200, 203, 206, 209, 241, 242, 248, 249, 279, 281, 282], "eigenvect": [97, 125, 142, 169, 283], "tidi": 97, "artifact": 97, "ret": 97, "eigenspac": 97, "rag": 97, "a_3": 97, "diagonaliz": [97, 283], "is_indefinit": 97, "semidefinit": [97, 230], "plot3d": [97, 196], "is_positive_definit": 97, "is_positive_semidefinit": 97, "is_negative_definit": 97, "is_negative_semidefinit": 97, "defer": [97, 252], "r587": 97, "definiteness_of_a_matrix": 97, "r588": 97, "positivedefinitematrix": 97, "r589": 97, "amer": 97, "259": 97, "264": [97, 228], "r590": 97, "r591": 97, "r592": 97, "r593": 97, "r594": 97, "r595": 97, "r596": 97, "r597": 97, "r598": 97, "r599": 97, "r600": 97, "r601": 97, "jordan_form": 97, "calc_transform": 97, "left_eigenvect": 97, "singular_valu": 97, "condition_numb": 97, "matrixcalculu": 97, "hessian": 97, "wronskian": [97, 226], "simpfunc": 97, "permutebkwd": 97, "permutefwd": 97, "lucombin": 97, "defici": [97, 101, 229], "matrixi": 97, "ludecomposition_simpl": [97, 283], "ludecompositionff": 97, "pa": [97, 120, 122, 137, 140, 143], "r602": 97, "zhou": 97, "jeffrei": [97, 222], "frontier": [97, 218], "china": 97, "67": [97, 204], "2008": [97, 195, 204, 206, 210], "row_swap": 97, "permute_backward": 97, "permute_forward": 97, "intiuit": 97, "lu_": 97, "_find_reasonable_pivot": 97, "qr_solv": 97, "167": 97, "158": [97, 105], "27261": 97, "30625": 97, "348": 97, "1914": 97, "6125": 97, "30589": 97, "198": 97, "1225": 97, "q_aug": 97, "r_aug": 97, "analytic_func": 97, "connected_compon": [97, 248], "connected_components_decomposit": 97, "relax": [97, 103], "3x1": 97, "1x3": 97, "conjugate_convent": 97, "dual": [97, 167, 173], "anti_symmetr": 97, "speak": [97, 205, 262], "freevar": 97, "underdetermin": [97, 228, 229], "free_var_index": 97, "tau0": [97, 229, 230], "tau1": 97, "taus_zero": 97, "sol_uniqu": 97, "r603": 97, "gaussian_elimin": 97, "try_block_diag": 97, "inverse_g": [97, 283], "inverse_lu": [97, 283], "inverse_adj": [97, 283], "inverse_ch": 97, "inverse_ldl": 97, "inverse_qr": 97, "inv_mod": 97, "cof": 97, "inverse_block": 97, "blockwis": 97, "ntop": 97, "key2bound": 97, "key2ij": 97, "reciproc": [97, 230, 287], "fro": 97, "sing": 97, "spectral": 97, "rd": [97, 125, 210], "r604": 97, "penrose_pseudoinvers": 97, "arbitrary_matrix": 97, "wn_m": 97, "_w0_0": 97, "_w1_0": 97, "_w2_0": 97, "59": [97, 226], "r605": 97, "obtaining_all_solutions_of_a_linear_system": 97, "print_nonzero": [97, 248], "symb": [97, 210], "rank_decomposit": 97, "r606": 97, "rank_factor": 97, "r607": 97, "piziak": 97, "odel": 97, "magazin": 97, "193": [97, 109], "2307": 97, "2690882": 97, "singular_value_decomposit": 97, "condens": [97, 229], "v_aug": 97, "u_aug": 97, "s_aug": 97, "gj": 97, "solve_least_squar": 97, "strongly_connected_compon": [97, 199, 248], "62": [97, 203], "strongly_connected_components_decomposit": 97, "rowstart": 97, "rowend": 97, "rowsep": 97, "colsep": 97, "strprinter": [97, 190], "upper_hessenberg_decomposit": 97, "213": 97, "134": 97, "216": [97, 203], "hessenbergdecomposit": 97, "jordan_cel": 97, "varlist": 97, "r608": 97, "hessian_matrix": 97, "vlist": 97, "r609": 97, "casoratian": 97, "kernel": [97, 197, 203, 205, 228], "vanish": [97, 175, 203, 206, 209, 226, 255], "rsolve_hyp": [97, 228], "randmatrix": 97, "percent": [97, 229], "prng": 97, "percentag": [97, 101], "46": [97, 104, 180, 209, 228, 230], "list2numpi": 97, "dtype": [97, 102, 197, 199, 200, 201, 210, 249], "matrix2numpi": 97, "symarrai": 97, "ndarrai": [97, 230, 236, 242], "prefix_i1_i2_": 97, "a_0_0": 97, "a_0_1": 97, "a_0_2": 97, "a_1_0": 97, "a_1_1": 97, "a_1_2": 97, "a_0_0_0": 97, "a_0_0_1": 97, "a_0_1_0": 97, "a_0_1_1": 97, "a_0_2_0": 97, "a_0_2_1": 97, "a_1_0_0": 97, "a_1_0_1": 97, "a_1_1_0": 97, "a_1_1_1": 97, "a_1_2_0": 97, "a_1_2_1": 97, "rot_axis1": 97, "rot_axis2": 97, "rot_axis3": 97, "a2idx": 97, "normalform": [98, 199], "hermite_normal_form": [98, 199, 205], "check_rank": [98, 199], "hnf": [98, 199, 205], "explos": [98, 199], "believ": [98, 101, 199], "dmdomainerror": [98, 199], "dmshapeerror": [98, 199], "r610": 98, "cohen": [98, 199, 204, 205], "mutablesparsematrix": 99, "_doktocsr": 100, "csr": 100, "ja": 100, "ia": 100, "_csrtodok": 100, "dok": 100, "1x1": [100, 230], "vert": [100, 191, 194, 264], "saw": [100, 200, 287], "dynam": [101, 108, 109, 111, 115, 117, 120, 121, 124, 127, 135, 137, 138, 139, 140, 141, 142, 143, 184, 185, 187, 189, 193, 194, 245, 246, 255], "eratosthen": 101, "_reset": [101, 206], "_list": 101, "extend_to_no": 101, "mobiusrang": 101, "primerang": 101, "10th": 101, "totientrang": 101, "1e11": 101, "50000": 101, "primal": [101, 197], "1299709": 101, "r611": 101, "prime_number_theorem": 101, "table_of_": 101, "cf": [101, 203], "28x": 101, "2c_x_": 101, "2f_log_x": 101, "2c_and_li": 101, "r612": 101, "approximations_for_the_nth_prime_numb": 101, "r613": 101, "27_number": 101, "arr1": 101, "arr2": 101, "prevprim": 101, "9th": 101, "nextprim": 101, "occupi": [101, 175, 236], "conjectur": [101, 203], "twin": 101, "bertrand": 101, "brocard": 101, "primori": 101, "r614": 101, "r615": 101, "utm": 101, "postul": 101, "r616": 101, "s_postul": 101, "primefactor": 101, "argu": 101, "cycle_length": 101, "nmax": 101, "brent": [101, 245], "floyd": 101, "cycle_detect": 101, "17737": 101, "20000": 101, "compositepi": 101, "831": 101, "smoothness_p": 101, "sm": [101, 125, 142, 197], "psm": 101, "govern": 101, "10431": 101, "21477639576571": 101, "4410317": 101, "1787": 101, "4869863": 101, "2434931": 101, "multiplicity_in_factori": 101, "nfac": 101, "52818775009509558395695966887": 101, "is2pow": 101, "pollard_rho": 101, "1234": [101, 223], "max_step": 101, "pollard": [101, 226], "leader": 101, "16843009": 101, "32767": 101, "4i": 101, "3i": 101, "2489": 101, "1482": 101, "285": [101, 228], "leadup": 101, "r617": 101, "crandal": 101, "carl": [101, 245], "pomer": [101, 245], "229": 101, "231": [101, 185], "pollard_pm1": 101, "likelihood": 101, "1009": 101, "am": [101, 180, 210], "255": 101, "crack": 101, "617": 101, "1786": 101, "worst": [101, 206, 226], "scenario": [101, 230], "divisisor": 101, "realist": 101, "r618": 101, "236": 101, "r619": 101, "washington": 101, "2007": [101, 141, 245], "spring": [101, 116, 119, 120, 125, 130], "ent": 101, "node81": 101, "r620": 101, "toronto": 101, "yuvalf": 101, "use_ecm": 101, "65537": [101, 209], "1407633717262338957430697921446883": 101, "991": 101, "202916782076162456022877024859": 101, "4200": 101, "1764": 101, "toggl": [101, 196], "12345678910111213141516": 101, "2507191691": 101, "1231026625769": 101, "factorrat": 101, "rat": 101, "987": 101, "10000000001": 101, "99009901": 101, "divisor_count": 101, "tim": [101, 248], "stackoverflow": [101, 248, 251], "1010381": 101, "proper_divisor": 101, "proper_divisor_count": 101, "udivisor": 101, "udivisor_count": 101, "r621": 101, "unitary_divisor": 101, "r622": 101, "unitarydivisor": 101, "r623": 101, "unitarydivisorfunct": 101, "antidivisor": 101, "r624": 101, "margin": [101, 111, 196, 230], "antidivisor_count": 101, "a066272": 101, "a066272a": 101, "r625": 101, "r626": 101, "27s_totient_funct": 101, "r627": 101, "totientfunct": 101, "r628": 101, "carmichael_funct": 101, "r629": 101, "carmichaelfunct": 101, "sigma_k": 101, "m_i": [101, 195, 203], "m_ik": 101, "r630": 101, "divisor_funct": 101, "udivisor_sigma": 101, "47450": 101, "152": 101, "r631": 101, "core_t": 101, "core_2": 101, "squarefre": [101, 205], "cubefre": 101, "9424": 101, "1178": 101, "379238": 101, "square_factor": [101, 223], "r632": 101, "free_integ": 101, "squarefree_cor": 101, "primenu": 101, "r633": 101, "primeomega": 101, "r634": 101, "mersenne_prime_expon": 101, "mersenn": 101, "4423": 101, "r635": 101, "perfectnumb": 101, "r636": 101, "perfect_numb": 101, "is_mersenne_prim": 101, "r637": 101, "mersenneprim": 101, "abund": 101, "is_abund": 101, "r638": 101, "abundantnumb": 101, "is_defici": 101, "r639": 101, "deficientnumb": 101, "is_amic": 101, "amic": 101, "220": [101, 206], "r640": 101, "amicable_numb": 101, "symmetric_residu": 101, "v_i": [101, 205, 228], "65": [101, 111, 203, 230], "639985": [101, 203], "912285": [101, 203], "954": 101, "gf_crt": [101, 203], "solve_congru": [101, 203], "programm": [101, 210], "galoistool": [101, 203], "crt1": 101, "4536": 101, "252": 101, "756": 101, "crt2": 101, "remainder_modulus_pair": 101, "mi": [101, 210], "k1": [101, 142, 173, 200, 201, 203], "k2": [101, 142, 200], "c_kn": 101, "binomial_coefficients_list": 101, "multinomial_coeffici": 101, "k_m": 101, "k_i": [101, 203, 220], "yann": 101, "laigl": 101, "chapui": 101, "permiss": [101, 195], "multinomial_coefficients_iter": 101, "_tupl": 101, "m53": 101, "partitions_": 101, "npartit": 101, "hardi": 101, "rademach": [101, 230], "r641": 101, "1958": [101, 195], "partitionfunctionp": 101, "is_euler_pseudoprim": 101, "pseudoprim": 101, "r642": 101, "euler_pseudoprim": 101, "prep": [101, 226, 227], "r643": 101, "mersenneforum": 101, "showpost": 101, "110896": 101, "mr": 101, "miller": 101, "rabin": 101, "wit": 101, "1373651": 101, "479001599": 101, "r644": 101, "135": 101, "138": 101, "93rabin_primality_test": 101, "deterministic_vari": 101, "is_lucas_prp": 101, "selfridg": 101, "377": 101, "1159": 101, "1829": 101, "3827": 101, "5459": 101, "5777": 101, "9071": 101, "9179": 101, "bailli": 101, "wagstaff": 101, "1980": [101, 248], "mpq": [101, 200], "lucaspseudoprim": 101, "a217120": 101, "lucas_pseudoprim": 101, "is_strong_lucas_prp": 101, "bpsw": 101, "10877": 101, "16109": 101, "18971": 101, "a217255": 101, "psw_primality_test": 101, "is_extra_strong_lucas_prp": 101, "grantham": 101, "mo": [101, 142, 210], "jone": [101, 147], "preprint": 101, "a217719": 101, "perl": 101, "counterexampl": [101, 287], "989": 101, "3239": 101, "jon": 101, "mcom": 101, "234": 101, "01197": 101, "1e3": 101, "1e23": [101, 251], "near_int": 101, "strong_pseudoprim": 101, "is_gaussian_prim": 101, "r645": 101, "gaussian_prim": 101, "residue_ntheori": 101, "n_order": 101, "cong": [101, 203], "primitive_root": [101, 205], "r646": 101, "stein": [101, 226], "r647": 101, "hackman": 101, "sqrt_mod": 101, "sqrt_mod_it": 101, "quadratic_residu": 101, "nthroot_mod": 101, "109": [101, 204, 223], "is_nthpow_residu": 101, "r648": 101, "is_quad_residu": 101, "legendre_symbol": 101, "genfrac": 101, "nonresidu": 101, "alpha_2": [101, 205], "alpha_k": 101, "discrete_log": 101, "prime_ord": 101, "giant": [101, 229], "pohlig": 101, "r649": 101, "discretelogarithm": 101, "r650": 101, "cryptographi": [101, 266, 273], "menez": 101, "vanston": 101, "continued_fract": 101, "continued_fraction_period": 101, "continued_fraction_reduc": 101, "continued_fraction_converg": 101, "continued_fraction_iter": 101, "106": 101, "103993": 101, "33102": 101, "104348": 101, "33215": 101, "208341": 101, "66317": 101, "292": 101, "r651": 101, "discrimin": [101, 201, 203, 205, 206], "r652": 101, "periodic_continued_fract": 101, "r653": 101, "rosen": 101, "379": [101, 206], "381": 101, "januari": 101, "1992": [101, 204, 228], "233": [101, 204, 226], "718281835": 101, "287": 101, "count_digit": 101, "1111339": 101, "0xfa": 101, "c77": 101, "is_palindrom": [101, 248], "palindrom": 101, "0o121": 101, "oct": 101, "0o171": 101, "fermion": [101, 175], "r654": 101, "b6bius_funct": 101, "r655": 101, "thoma": [101, 141], "koshi": 101, "egyptian_fract": 101, "greedi": [101, 203, 219, 222], "egyptian": 101, "r656": 101, "jewett": 101, "takenouchi": 101, "3192": 101, "1118": 101, "2580": 101, "sylvest": [101, 203], "r657": 101, "seldom": 101, "blow": 101, "doubli": 101, "exhibit": [101, 195, 205, 219], "singli": 101, "tendenc": 101, "r658": 101, "1921": 101, "golumb": 101, "1962": 101, "propos": 101, "bleicher": 101, "1972": 101, "r659": 101, "420": [101, 223], "140": 101, "574": 101, "2788": 101, "6460": 101, "11590": 101, "33062": 101, "113820": 101, "greedy_algorithm_for_egyptian_fract": 101, "uci": 101, "eppstein": 101, "numth": 101, "egypt": 101, "ami": 101, "ektf": 101, "hu": 101, "finalpdf": 101, "ami_42_from129to134": 101, "bbp_pi": 101, "pi_hex_digit": 101, "hex": 101, "3243f6a8885a30": 101, "r660": 101, "numberworld": 101, "subexponenti": 101, "comfort": [101, 102], "15154262241479": 101, "15423094826093": 101, "799333555511111": 101, "809709509409109": 101, "888888877777777": 101, "914148152112161": 101, "factoris": [101, 200, 201, 226], "max_curv": 101, "lenstra": 101, "ecm_one_factor": 101, "pseudorandom": [101, 248], "25645121643901801": 101, "5394769": 101, "4753701529": 101, "9804659461513846513": 101, "4641991": 101, "2112166839943": 101, "7060005655815754299976961394452809": 101, "6988699669998001": 101, "1010203040506070809": 101, "122921448543883967430908091422761898618349713604256384403202282756086473494959648313841": 101, "2709077133180915240135586837960864768806330782747": 101, "248": 101, "prime_bound": 101, "error_term": 101, "siq": 101, "modn": 101, "r661": 101, "semanticscholar": 101, "5c52": 101, "8a975c1405bd35c65993abf5a4edb667c1db": 101, "r662": 101, "rieselprim": 101, "ziki": 101, "initializing_quadratic_siev": 101, "5915587277": 101, "3267000013": 101, "facilit": [102, 135, 146, 192, 241], "000507214304613640": 102, "microsecond": 102, "000507214304614": 102, "hundr": [102, 281], "nanosecond": 102, "84147098": [102, 249, 276], "84119981": 102, "84092844": 102, "05426074": 102, "05433146": 102, "05440211": 102, "nano": 102, "manufactur": 102, "asnumpi": 102, "jnp": 102, "asarrai": 102, "84147096": 102, "8411998": 102, "05426079": 102, "05433151": 102, "autowrap": [102, 235, 243, 247, 274], "implemented_funct": [102, 242, 249], "effort": [102, 201, 203], "50u": 102, "1u": 102, "10n": 102, "sympy_pars": 103, "local_dict": 103, "lambda_not": 103, "repeated_decim": 103, "auto_numb": 103, "factorial_not": 103, "global_dict": 103, "standard_transform": 103, "implicit_multiplication_appl": 103, "implicit_appl": 103, "implicit_multipl": 103, "convert_equals_sign": 103, "function_exponenti": 103, "stringify_expr": 103, "eval_expr": 103, "name_dict": 103, "fullform": 103, "setdelai": 103, "datatyp": [103, 201, 210, 243], "split_symbol": 103, "split_symbols_custom": 103, "_token_splitt": 103, "can_split": 103, "unsplitt": 103, "10sin": 103, "3xyz": 103, "2111": 103, "latex2sympi": 103, "typograph": 103, "stricter": 103, "liber": [103, 115, 281], "618": 103, "latexparsingerror": 103, "sym_expr": 103, "sympyexpress": 103, "source_cod": 103, "return_expr": 103, "src2": 103, "convert_to_expr": 103, "convert_to_c": 103, "src3": 103, "convert_to_python": 103, "src_code": 103, "filenam": [103, 210, 241, 242, 243, 251], "convert_to_fortran": 103, "continuum_mechan": [104, 105, 107], "elastic_modulu": 104, "second_mo": 104, "base_char": 104, "withstand": [104, 105], "character": [104, 105, 191, 194, 217, 230, 236, 264], "profil": 104, "shear": [104, 105], "downward": [104, 105, 107, 205], "apply_load": [104, 105, 107], "bc_deflect": [104, 105], "boundary_condit": 104, "solve_for_reaction_load": [104, 105], "shear_forc": [104, 105], "bending_mo": [104, 105], "reaction": [104, 105, 107], "upward": [104, 205], "reaction_load": [104, 105, 107], "applied_load": 104, "nm": [104, 105, 173, 231], "pointload": [104, 105], "ramp": [104, 105], "parabol": 104, "apply_support": [104, 107], "loc": 104, "freedom": [104, 119, 120, 126, 129, 135, 230, 272], "roller": [104, 105, 107], "r_10": 104, "r_30": 104, "4000": [104, 105], "bc_slope": [104, 105], "cross_sect": 104, "elast": [104, 105], "12000": 104, "draw": [104, 155, 210, 230], "pictori": 104, "ild_moment": 104, "ild_react": 104, "ild_shear": 104, "axial": [104, 144], "hing": [104, 105, 136], "cantilev": [104, 105], "inertia": [104, 105, 114, 115, 116, 118, 124, 125, 127, 128, 130, 132, 133, 134, 135, 142, 185, 193, 194, 205, 272], "666666666666667": [104, 105], "max_bmoment": 104, "max_deflect": 104, "max_shear_forc": 104, "plot_bending_mo": [104, 105], "gpa": 104, "400": [104, 196, 206], "13750": 104, "31250": 104, "plot_deflect": [104, 105], "00138541666666667": 104, "86458333333333e": 104, "04166666666667e": 104, "20833333333333e": 104, "51041666666667e": 104, "plot_ild_mo": 104, "solve_for_ild_mo": 104, "1kn": 104, "r_0": 104, "r_8": 104, "solve_for_ild_react": 104, "plot_ild_react": 104, "5kn": 104, "r_7": 104, "plotgrid": 104, "plot_ild_shear": 104, "solve_for_ild_shear": 104, "plot_loading_result": [104, 105], "subplot": [104, 196], "plot_shear_forc": [104, 105], "plot_shear_stress": 104, "stress": 104, "6875": 104, "2500": 104, "15625": [104, 182], "plot_slop": [104, 105], "59375e": 104, "125e": 104, "08333333333333e": 104, "0001953125": 104, "point_cflexur": 104, "overhang": [104, 105], "10kn": 104, "20kn": [104, 105], "3kn": 104, "remove_load": [104, 107, 116], "shear_stress": 104, "beam3d": 104, "shear_modulu": 104, "apply_moment_load": 104, "solve_slope_deflect": 104, "r663": 104, "home": [104, 205, 223, 230], "aau": 104, "jc": 104, "femtesemest": 104, "beams3d": 104, "angular_deflect": 104, "depict": [104, 191, 229, 264], "angular": [104, 113, 116, 119, 122, 127, 128, 129, 130, 132, 134, 136, 139, 142, 144, 148, 149, 151, 154, 172, 176, 185, 189, 195], "axial_forc": 104, "axial_stress": 104, "load_vector": 104, "max_bending_mo": 104, "16000": 104, "495": 104, "10793": 104, "6400": 104, "301": [104, 220, 223], "560": 104, "2400": 104, "moment_load_vector": 104, "40000": 104, "4013": 104, "90300": 104, "1520": 104, "903": 104, "1600": [104, 105], "172": 104, "polar_mo": 104, "i1": [104, 112, 125, 142, 236], "1350": 104, "solve_for_tors": 104, "torsion": 104, "torqu": [104, 116, 120, 124, 130, 137, 138, 142], "torsional_mo": 104, "_________________": 105, "________________": [105, 226], "_______________v": 105, "_______________": 105, "equilibrium": [105, 107, 127, 139], "20e9": 105, "25e": 105, "______________________________________________": 105, "_______________________________________________": 105, "r\u2081": 105, "r\u2082": 105, "______________________": 105, "________________________": 105, "8kn": 105, "_____________": 105, "1m": 105, "3m": 105, "2m": 105, "5m": [105, 245], "679": 105, "12kn": 105, "________________________________": 105, "____________________________________________________": 105, "o____________________________________________________": 105, "4m": 105, "_____________________________________": 105, "m\u2081": 105, "m\u2082": 105, "connector": 105, "_____________________": 105, "_______________________": 105, "_____________________o_______________________": 105, "oooo": [105, 248], "r\u2083": 105, "_______i_______": 105, "flexur": 105, "rigid": [105, 107, 116, 120, 122, 125, 127, 130, 135, 142, 185, 193, 272], "____________": 105, "____________o________________________": 105, "a\u2082": [105, 287], "assembli": [107, 127], "joint": [107, 118, 128, 130, 135, 272], "add_nod": 107, "node_1": 107, "node_2": 107, "node_3": 107, "node_4": 107, "add_memb": 107, "member_1": 107, "member_2": 107, "member_3": 107, "member_4": 107, "member_5": 107, "270": 107, "360": 107, "change_member_label": 107, "new_label": 107, "change_node_label": 107, "bc_new": 107, "internal_forc": 107, "member_label": 107, "node_label": 107, "node_posit": 107, "remove_memb": 107, "remove_nod": 107, "remove_support": 107, "unstabl": 107, "revolv": 107, "tensil": 107, "r_node_1_x": 107, "r_node_1_i": 107, "r_node_2_i": 107, "lti": [108, 109], "transferfunct": [108, 109, 111], "interconnect": [108, 111, 119], "mimo": [108, 111], "transferfunctionmatrix": [108, 111], "mimoseri": [108, 111], "mimoparallel": [108, 111], "mimofeedback": [108, 111], "control_plot": 109, "pole_zero_plot": 109, "pole_color": 109, "blue": [109, 136, 196, 210], "pole_markers": 109, "zero_color": 109, "orang": 109, "zero_markers": 109, "show_ax": 109, "marker": [109, 196], "sisolineartimeinvari": [109, 111], "markers": 109, "tf1": [109, 111], "pole_zero_numerical_data": 109, "r664": 109, "93zero_plot": 109, "siso": [109, 111], "8660254j": 109, "bode_plot": 109, "initial_exp": 109, "final_exp": 109, "freq_unit": 109, "phase_unit": 109, "semilog": 109, "hz": 109, "hertz": 109, "bode_magnitude_plot": 109, "bode_phase_plot": 109, "bode_magnitude_numerical_data": 109, "5148378120533502e": 109, "68437": 109, "36188804005": 109, "020599914256786": 109, "0205999155219505": 109, "4117304087953": 109, "00000000260573": 109, "bode_phase_numerical_data": 109, "4472354033813751e": 109, "035581932165858e": 109, "47577": 109, "3248186011": 109, "67884": 109, "09326036123": 109, "5000000000291665e": 109, "6180885085e": 109, "08895483066e": 109, "1415085799262523": 109, "14155265358979": 109, "impulse_response_plot": 109, "lower_limit": [109, 277], "upper_limit": [109, 277], "step_response_plot": 109, "ramp_response_plot": 109, "r665": 109, "impulse_response_numerical_data": 109, "nb_of_point": [109, 196], "lineover1drangeseri": [109, 196], "amplitud": [109, 149], "06616480200395854": 109, "854500743565858": 109, "9999999799999999": 109, "7042848373025861": 109, "170748906965121e": 109, "1901263495547205e": 109, "r666": 109, "step_response_numerical_data": 109, "025413462339411542": 109, "0484508722725343": 109, "670250533855183": 109, "844291913708725": 109, "023844582399907256": 109, "042894276802320226": 109, "828770759094287e": 109, "456457160755703e": 109, "mx": [109, 155, 217], "r667": 109, "ramp_funct": 109, "ramp_response_numerical_data": 109, "12166980856813935": 109, "861246379582118": 109, "4504508011325967e": 109, "006046440489058766": 109, "12499999999568202": 109, "12499999999661349": 109, "den": [111, 201, 222, 226], "superscript": [111, 210], "impuls": 111, "tf2": 111, "tf3": 111, "tf4": 111, "tf5": 111, "tf6": 111, "500000000000000": 111, "tf7": 111, "tf8": 111, "tf9": 111, "tf10": 111, "tf11": 111, "tf12": 111, "r668": 111, "transfer_funct": 111, "r669": 111, "dc_gain": 111, "dc": [111, 138], "from_rational_express": 111, "zerodivisionerror": [111, 201, 239, 249], "tf": [111, 249], "is_biprop": 111, "is_prop": 111, "is_stabl": 111, "is_strictly_prop": 111, "sys1": 111, "sys2": 111, "feedforward": 111, "fed": 111, "sit": [111, 194], "plant": 111, "compulsori": 111, "tf_1": 111, "tf_2": 111, "tf_3": 111, "tf_4": 111, "tfm_1": 111, "num_input": 111, "num_output": 111, "tfm_2": 111, "tf_5": 111, "tf_6": 111, "tf_7": 111, "tf_8": 111, "tfm_3": 111, "tfm_4": 111, "tfm_5": 111, "tfm_6": 111, "tf_9": 111, "tf_10": 111, "tfm_7": 111, "tfm_8": 111, "tfm_9": 111, "tfm_10": 111, "tfm_11": 111, "tfm_12": 111, "elem_pol": 111, "elem_zero": 111, "from_matrix": [111, 199], "m_tf": 111, "tfm": 111, "tfm1": 111, "tfm2": 111, "g4": 111, "tfm3": 111, "mimolineartimeinvari": 111, "mat_a": 111, "mat_b": 111, "mat_c": 111, "tfm_a": 111, "tfm_b": 111, "tfm_c": 111, "expr_1": 111, "expr_2": 111, "expr_3": 111, "expr_4": 111, "plant_mat": 111, "controller_mat": 111, "neg_feedback": 111, "hep": 112, "gamma_matric": [112, 114], "gammamatrix": 112, "lorentzindex": 112, "gammamatrixhead": 112, "extract_type_ten": 112, "gamma_trac": 112, "i0": [112, 147, 236], "i2": [112, 125, 142, 236], "i4": [112, 236], "i5": 112, "kahane_simplifi": 112, "spinor": 112, "ta": [112, 219], "tb": [112, 219, 241], "tc": [112, 201, 206, 219], "joseph": [112, 204], "kahan": 112, "octob": 112, "1968": 112, "simplify_gpgp": 112, "e_nl": [113, 176], "hartre": 113, "helium": 113, "2209": 113, "e_nl_dirac": 113, "spin_up": 113, "035999037000": 113, "relativist": 113, "momentum": [113, 122, 125, 142, 153, 154, 172, 176, 195, 236], "light": [113, 147, 180, 190, 197], "035999037": 113, "1012": 113, "3627": 113, "500006656595360": 113, "125002080189006": 113, "125000416028342": 113, "0555562951740285": 113, "0555558020932949": 113, "0555556377366884": 113, "psi_nlm": 113, "wave": [113, 145, 146, 147, 213, 272], "psi_": [113, 151], "nlm": 113, "radial": [113, 129, 176], "nl": [113, 176], "magnet": [113, 146, 191, 264], "azimuth": 113, "wf": [113, 127], "abs_sqrd": 113, "silver": 113, "94": [113, 204], "141": 113, "4418": 113, "mdft": 114, "mgamma": 114, "gamma_5": 114, "gamma_0": 114, "gamma_3": 114, "r670": 114, "msigma": 114, "pauli": [114, 272], "sigma_i": [114, 230], "r671": 114, "pauli_matric": [114, 150], "pat_matrix": 114, "unansw": [115, 184], "kane": [115, 118, 119, 125, 131, 135, 136, 141, 142, 184, 185, 255, 272], "q1d": [115, 125, 127, 129, 132, 133, 134, 137, 138, 139, 140, 184, 190, 194], "q2d": [115, 125, 127, 129, 132, 133, 134, 137, 138, 189, 190], "q3d": [115, 132, 133, 134, 137], "kinemat": [115, 119, 120, 124, 125, 127, 128, 129, 130, 132, 134, 136, 137, 139, 140, 142, 143, 185, 188, 192, 194, 272], "dyad": [115, 142, 259], "mprint": [115, 132, 133, 134, 137], "mpprint": [115, 137], "mlatex": 115, "sub_dict": [115, 117, 127], "msub": [115, 117, 139], "cleaner": [115, 142, 226], "gsl": [115, 243], "lsoda": 115, "penalti": 115, "central_inertia": [116, 122, 128, 130], "possess": [116, 140, 236], "name_of_bodi": 116, "ixx": [116, 122, 185], "body_inertia": 116, "ang_vel_in": [116, 119, 125, 132, 133, 142, 185, 193], "set_ang_vel": [116, 122, 125, 127, 132, 133, 139, 140, 142, 143, 185, 187, 189, 193], "apply_forc": [116, 119, 130], "reaction_bodi": [116, 119, 130], "reaction_point": 116, "oppposit": 116, "desri": 116, "force1": 116, "b_masscent": 116, "b_frame": [116, 119], "newtonion": [116, 119], "spring_forc": 116, "n_frame": 116, "apply_torqu": [116, 130], "torquess": 116, "torque1": 116, "b1_frame": 116, "b2_frame": 116, "clear_load": 116, "kinetic_energi": [116, 122, 140, 142], "inerti": [116, 119, 120, 122, 127, 129, 132, 137, 138, 140, 142], "set_vel": [116, 120, 122, 125, 127, 129, 132, 133, 134, 137, 138, 139, 140, 142, 143, 189, 193], "b_ixx": 116, "b_mass": [116, 119], "masscenter_vel": [116, 119], "parallel_axi": [116, 122], "to_matrix": [116, 119, 184, 185, 194, 199, 205, 255, 258, 260], "a_ixx": 116, "a_mass": 116, "a_ixi": 116, "a_izx": 116, "a_iyi": 116, "a_iyz": 116, "a_izz": 116, "smart": [117, 139, 217, 223, 226], "sub1": [117, 210], "sub2": [117, 210], "find_dynamicsymbol": 117, "reference_fram": [117, 185], "symbolicsystem": [118, 135, 272], "interfram": [119, 189], "_generate_coordin": 119, "_generate_spe": 119, "_orient_fram": 119, "_set_angular_veloc": 119, "_set_linear_veloc": 119, "kde": [119, 128, 129, 136, 139], "revolut": 119, "\u03c9": 119, "pc": [119, 207], "p_masscent": 119, "c_masscent": 119, "p_frame": 119, "c_frame": 119, "q_pc": 119, "u_pc": 119, "upper_bob": 119, "lower_bob": 119, "ceiling_joint": 119, "pendulum_joint": 119, "q_p1": 119, "q_p2": 119, "u_fram": 119, "l_frame": 119, "u_p1": 119, "u_p2": 119, "vel": [119, 125, 127, 129, 133, 136, 142, 189, 193, 262], "prismat": 119, "slide": 119, "wall": [119, 130], "part1": 119, "part2": 119, "j1": [119, 128, 130, 154, 172], "j2": [119, 128, 130, 154, 172], "q_j1": 119, "w_frame": 119, "q_j2": 119, "p1_frame": 119, "u_j1": 119, "cylindricaljoint": 119, "rotation_coordin": 119, "translation_coordin": 119, "rotation_spe": 119, "translation_spe": 119, "cylindr": [119, 196, 262], "q0_": 119, "q1_": 119, "u0_": 119, "u1_": 119, "q0_pc": 119, "q1_pc": 119, "u0_pc": 119, "u1_pc": 119, "tube": 119, "floor_joint": 119, "flag_joint": 119, "q0_c1": 119, "q0_c2": 119, "q1_c1": 119, "floor_fram": 119, "q1_c2": 119, "tube_fram": 119, "flag_fram": 119, "u0_c1": 119, "u0_c2": 119, "u1_c1": 119, "planarjoint": 119, "planar_coordin": 119, "planar_spe": 119, "q2_": 119, "u2_": 119, "nonparallel": 119, "q_1": [119, 128, 129, 130, 139, 155, 193, 206, 223], "q_2": [119, 128, 129, 130, 139, 193], "hat": [119, 136, 140, 184, 185, 190, 191, 193, 194, 259, 260, 262, 264, 265], "q_0": [119, 155, 223], "rotation_axi": 119, "planar_vector": 119, "q2_pc": 119, "u2_pc": 119, "parent_vector": 119, "plane_vector": 119, "g_frame": 119, "sphericaljoint": 119, "rot_typ": [119, 185, 189, 191], "rot_ord": [119, 185, 189, 257], "ball": 119, "socket": 119, "tait": [119, 185, 255, 257], "bryan": [119, 185, 255, 257], "joint_point": 119, "zxz": [119, 185, 194, 255, 257], "weldjoint": 119, "weld": 119, "quarter": [119, 147], "rotated_fram": 119, "jointsmethod": [119, 128, 130], "damper": [119, 120, 125, 130], "form_eom": [119, 130, 136], "mass_matrix_ful": [119, 120, 125, 130, 137, 138], "forcing_ful": [119, 120, 125, 130, 137, 138], "mass_matrix": [119, 120, 124, 127, 132, 133, 137, 138, 143], "lagrangesmethod": [119, 120, 129, 134, 138, 139], "qd": [119, 120, 127, 137, 189], "inv_method": [119, 120], "solveabl": 119, "q_ind": [120, 121, 125, 127, 128, 129, 132, 133, 137, 139, 142], "u_ind": [120, 121, 125, 127, 128, 129, 132, 133, 137, 139, 142], "kd_eq": [120, 125, 127, 128, 129, 132, 133, 139, 142], "q_depend": [120, 127, 128, 129, 137, 142], "configuration_constraint": [120, 127, 128, 129, 137], "u_depend": [120, 127, 128, 129, 137, 142], "velocity_constraint": [120, 127, 128, 129, 137, 142], "acceleration_constraint": 120, "u_auxiliari": [120, 133, 137, 142], "forcelist": [120, 125, 128, 129, 132, 133, 138, 139, 142], "explicit_kinemat": 120, "levinson": [120, 141, 185, 255], "udot": [120, 127], "22626": 120, "ud": [120, 137], "kd": [120, 127, 132, 133, 137], "fl": [120, 127, 137, 138, 142, 204], "bl": [120, 127, 137, 142], "frstar": [120, 125, 127, 129, 132, 133, 137, 139, 142], "kanes_equ": [120, 125, 127, 129, 132, 133, 137, 139, 142], "a_and_b": [120, 121, 129], "auxiliary_eq": [120, 133], "k_d": [120, 137], "k_dnh": 120, "f_d": [120, 137, 138, 203], "f_dnh": 120, "mass_matrix_kin": 120, "k_kqdot": 120, "forcing_kin": 120, "k_ku": 120, "constrain": [120, 129, 138, 142], "kindiffdict": [120, 127, 132, 133, 137, 142], "new_method": [120, 129], "intens": [120, 121, 144, 147], "perm_mat": [120, 121, 139], "op_point": [120, 121, 129, 139], "beforehand": [120, 243], "to_linear": [120, 139], "recalcul": [120, 206], "hol_coneq": [120, 129, 138], "nonhol_coneq": [120, 129, 138], "nonconserv": 120, "form_lagranges_equ": [120, 129, 134, 138, 139], "qdot": [120, 127, 128, 189], "qdoubledot": 120, "lam": [120, 121, 143], "lagranges_equ": 120, "qd_ind": [120, 139], "q_dep": [120, 137, 139], "qd_dep": [120, 139], "solve_multipli": [120, 129], "sol_typ": 120, "array_lik": 120, "f_3": [121, 124, 143, 226], "f_c": [121, 129], "f_v": [121, 129], "f_a": 121, "q_d": 121, "u_i": [121, 139, 193, 203], "u_d": [121, 142], "q_op": [121, 129], "u_op": [121, 129], "qd_op": 121, "ud_op": [121, 129], "spatial": [122, 149, 185, 210], "angular_momentum": [122, 140, 142], "init_vprint": [122, 123, 140, 143, 185, 187, 189, 190, 193, 194], "linear_momentum": [122, 140, 142], "inertia_tupl": 122, "mv": 122, "iyi": [122, 185], "izz": [122, 185], "ixi": [122, 185], "iyz": [122, 185], "izx": 122, "yy": [122, 194, 226], "yz": [122, 194, 196], "zx": [122, 194], "inertia_of_point_mass": 122, "pos_vec": 122, "px": [122, 165, 170, 236], "body1": 122, "body2": 122, "body3": 122, "h2": 122, "multibodi": [122, 125, 135, 141, 142, 143, 193], "vprint": [123, 184, 189, 190, 194], "vpprint": [123, 184, 190, 194], "vlatex": [123, 184, 185, 190, 194], "coord_stat": 124, "right_hand_sid": 124, "coordinate_deriv": [124, 143], "alg_con": [124, 143], "output_eqn": 124, "coord_idx": [124, 143], "speed_idx": [124, 143], "m_3": [124, 143, 154, 195], "exogen": [124, 143], "ref_fram": 124, "graviti": [124, 125, 129, 130, 132, 134, 142, 191, 264], "theta_dot": 124, "kin_explicit_rh": [124, 143], "dyn_implicit_mat": [124, 143], "dyn_implicit_rh": [124, 143], "symsystem": 124, "dae": [124, 143], "adjust": [124, 213, 217], "comb_implicit_mat": [124, 143], "comb_implicit_rh": [124, 143], "kinema": 124, "comb_explicit_rh": [124, 143], "compute_explicit_form": 124, "awhil": 124, "constant_symbol": 124, "dynamic_symbol": 124, "motiongenesi": [125, 142], "double_pendulum": 125, "motionvari": [125, 142], "newtonian": [125, 142], "simprot": [125, 142], "n_a": 125, "n_b": 125, "w_a_n": 125, "w_b_n": [125, 142], "p_o_p": 125, "p_p_r": 125, "v_o_n": [125, 142], "v2pt": [125, 142], "v_p_n": 125, "v_r_n": 125, "force_p": 125, "force_r": 125, "tfinal": 125, "integstp": 125, "some_filenam": 125, "parse_autolev": 125, "sympy_cod": 125, "include_numer": 125, "include_pydi": 125, "pydi": [125, 142, 185], "u1d": [125, 127, 129, 132, 133, 137], "u2d": [125, 127, 129, 132, 133, 137], "frame_n": 125, "frame_a": 125, "frame_b": 125, "point_o": 125, "particle_p": 125, "p_pt": 125, "particle_r": 125, "r_pt": 125, "set_po": [125, 189, 193], "v2pt_theori": [125, 127, 132, 133, 134, 139, 140, 142, 143, 189, 193], "initial_condit": [125, 142], "overwritten": 125, "e2row": 125, "eigvec": [125, 142], "eigenvec": 125, "deg2rad": 125, "0174533": 125, "wo": 125, "coef": [125, 142], "u3": [125, 127, 128, 130, 132, 133, 137, 142, 185, 189, 193], "strai": 125, "reassign": 125, "inher": [125, 249, 279], "rhs_x": 125, "i_b_bo": 125, "body_b": 125, "body_b_f": 125, "b_cm": 125, "b_f": 125, "scene": [125, 222, 279], "i_c_d": 125, "i_p_q": 125, "i_b_o": 125, "e3": [125, 217, 226], "i_p_o": 125, "e4": [125, 217], "p_so_o": 125, "nicheck": 125, "plug": [125, 180], "hurdl": 125, "gitlab": 125, "repo": 125, "ch4": 125, "ch5": 125, "ch6": 125, "cst": 125, "grammar": [125, 222], "roll": [126, 127, 135, 193, 230, 272], "disc": [126, 135, 193, 272], "bicycl": [126, 135, 141, 272], "nonminim": [126, 135, 139, 272], "linkag": [126, 135, 272], "meijaard2007": [127, 141], "steer": [127, 141], "purposefulli": 127, "mechanics_print": [127, 128, 132, 133, 134, 136, 137, 138], "yaw": 127, "ang": 127, "rear": 127, "wheel": 127, "pitch": 127, "q4": [127, 137, 187], "q5": [127, 187], "q4d": [127, 137], "q5d": 127, "u4": [127, 133, 137, 142], "u5": [127, 133], "u6": [127, 133], "u3d": [127, 132, 133], "u4d": 127, "u5d": 127, "u6d": 127, "explanatori": 127, "wfrad": 127, "wrrad": 127, "htangl": 127, "forkoffset": 127, "forklength": 127, "framelength": 127, "forkcg1": 127, "forkcg3": 127, "framecg1": 127, "framecg3": 127, "iwr11": 127, "iwr22": 127, "iwf11": 127, "iwf22": 127, "iframe11": 127, "iframe22": 127, "iframe33": 127, "iframe31": 127, "ifork11": 127, "ifork22": 127, "ifork33": 127, "ifork31": 127, "mframe": 127, "mfork": 127, "mwf": 127, "mwr": 127, "wr": 127, "tempfram": 127, "tempfork": 127, "orientnew": [127, 129, 132, 133, 134, 139, 143, 185, 187, 189, 191, 193, 194], "wr_cont": 127, "wr_mc": 127, "frame_mc": 127, "fork_mc": 127, "wf_mc": 127, "wf_cont": 127, "flip": [127, 160, 169, 230], "frame_i": 127, "fork_i": 127, "wr_i": 127, "wf_i": 127, "bodyfram": 127, "bodyfork": 127, "bodywr": 127, "bodywf": 127, "nonholonom": 127, "slip": [127, 131, 133, 193], "replic": 127, "conlist_spe": 127, "conlist_coord": 127, "gravit": [127, 132, 178, 191, 264], "aforement": [127, 191, 223, 262], "paperradrear": 127, "paperradfront": 127, "hta": 127, "trailpap": 127, "rake": 127, "paperwb": 127, "02": 127, "paperframecgx": 127, "paperframecgz": 127, "paperforkcgx": 127, "paperforkcgz": 127, "framecgnorm": 127, "framecgpar": 127, "tempa": 127, "tempb": 127, "tempc": 127, "paperforkl": 127, "forkcgnorm": 127, "forkcgpar": 127, "upright": 127, "val_dict": 127, "0603": 127, "1405": 127, "05892": 127, "00708": 127, "00756": 127, "kdd": [127, 132, 133], "centripet": 127, "corioli": 127, "forcing_lin": 127, "mm_full": 127, "_k_kqdot": 127, "xdot": 127, "lean": [127, 132, 134], "amat": 127, "summari": [128, 241, 266], "q_3": [128, 130, 193], "u_1": [128, 129, 130, 193, 205, 226], "u_2": [128, 129, 130, 193, 205, 226], "u_3": [128, 130, 193], "densiti": [128, 230, 241, 265], "link1": 128, "link2": 128, "link3": 128, "link4": 128, "joint1": 128, "joint2": 128, "joint3": 128, "j3": [128, 130, 154, 172], "fh": 128, "fhd": 128, "_method": 128, "_form_eom": 128, "eom": [129, 130, 139], "dq_dict": 129, "presimplifi": 129, "inp_vec": [129, 139], "lag": [129, 134, 139], "lm": [129, 138, 139, 203, 206], "lag_eq": [129, 139], "lam_op": 129, "mb": [130, 142], "ibzz": 130, "compound_pend": 130, "simple_pend": 130, "slider": 130, "rev1": 130, "rev2": 130, "w_r_n_qd": [132, 133], "dmc": [132, 133, 134], "uv": [132, 133, 175], "bodyd": [132, 133, 134], "bodylist": [132, 133], "revisit": [133, 193], "kane1985": [133, 137, 140, 141], "thorough": [133, 139, 223], "simplifc": 133, "f3": [133, 196, 210], "necessit": 133, "simplify_auxiliary_eq": 133, "lrh": 134, "planet": 135, "robot": 135, "fascin": 135, "trajectori": 135, "challeng": 135, "came": [135, 282], "tackl": [135, 243], "organ": 135, "amen": 135, "arduou": 135, "child_izz": 136, "child_mass": 136, "f_h": 137, "nh": 137, "ku": [137, 210], "dnh": 137, "f_r": [137, 139, 203], "speed_con": 137, "coord_con": 137, "u_dep": 137, "m_d": 138, "lam1": 138, "0_": 139, "blajer1994": [139, 141], "brought": [139, 230], "vel_p": 139, "a_op": 139, "b_op": 139, "m_op": 139, "a_lin": 139, "hasn": 139, "wikidyad": [140, 192], "wikidyadicproduct": [140, 192], "juxtaposit": [140, 184, 259], "otim": [140, 231], "l_p": 140, "likins1973": [140, 192], "l_b": 140, "requisit": 140, "t_p": 140, "t_b": 140, "t_t": 140, "virtu": [140, 142], "blajer": 141, "wojciech": 141, "werner": 141, "schiehlen": 141, "walter": 141, "schirm": 141, "kane1983": [141, 194], "likin": [141, 192], "david": [141, 206], "spacecraft": 141, "1983": [141, 245], "meijaard": 141, "jim": 141, "papadopoulo": 141, "ruina": 141, "schwab": 141, "royal": 141, "societi": [141, 223], "2084": 141, "1955": 141, "982": 141, "lectur": [142, 204, 230], "rigibodi": 142, "proprietari": 142, "k3": [142, 200], "k4": 142, "b11": 142, "b12": 142, "b21": 142, "b22": 142, "xd": 142, "xd2": 142, "y1d": 142, "y2d": 142, "tina": 142, "overwrit": [142, 184], "dt2": 142, "dy2": 142, "ty": 142, "linsolv": [142, 208, 228, 229, 288], "nonlinsolv": [142, 228, 229, 288], "rowmatrix": 142, "colmatrix": 142, "diagmat": 142, "eigval": 142, "row_matrix": 142, "col_matrix": 142, "ao": 142, "i12": 142, "i23": 142, "i31": 142, "bf": 142, "p_o_q": 142, "mag": 142, "unitvec": 142, "qo": 142, "p_p_q": 142, "partial_veloc": [142, 185, 189], "a_o_n": 142, "set_acc": [142, 189, 193], "qb": [142, 198], "qbd": 142, "alf_b_n": 142, "set_ang_acc": [142, 185], "ang_acc_in": [142, 185], "force_o": 142, "torque_a": 142, "qa": 142, "qad": 142, "a_b": 142, "v1pt": 142, "v1pt_theori": [142, 189, 193], "a1pt": 142, "a1pt_theori": [142, 189], "a2pt": 142, "a2pt_theori": [142, 189, 193], "angvel": 142, "force_vector": 142, "center_of_mass": 142, "kindiff": 142, "ke": 142, "configura": 142, "tion_constraint": 142, "pendent": 142, "velocity_con": 142, "traint": 142, "acceleration_": 142, "u_auxilia": 142, "ry": 142, "matlplotlib": 142, "stiff": 142, "damp": 142, "introspect": 142, "rich": [142, 222], "media": [142, 148], "histori": 142, "esqu": 142, "cpython": 142, "pertin": [143, 197, 205], "alg_con_ful": 143, "symsystem1": 143, "symsystem2": 143, "symsystem3": 143, "raytransfermatrix": 144, "geometricrai": 144, "beamparamet": 144, "geometric_conj": 144, "gauss_conj": 144, "conjugate_gauss_beam": 144, "lens": 144, "gaussopt": 144, "wavelen": 144, "z_r": 144, "wavelength": [144, 149], "waist": 144, "rayleigh": [144, 230], "refract": [144, 146, 148, 149], "530e": 144, "88679245283019": 144, "92753330865999": 144, "w_0": [144, 223], "00100000000000000": 144, "freespac": 144, "00101413072159615": 144, "00210803120913829": 144, "r672": 144, "complex_beam_paramet": 144, "r673": 144, "gaussian_beam": 144, "spread": [144, 210, 230, 245], "00053": 144, "goui": 144, "55998576005696": 144, "2809": 144, "peak": 144, "waist_approximation_limit": 144, "paraxi": [144, 148], "06e": 144, "curvedmirror": 144, "curvedrefract": 144, "flatmirror": 144, "flatrefract": 144, "2x1": 144, "thinlen": 144, "r674": 144, "ray_transfer_matrix_analysi": 144, "waist_in": 144, "waist_out": 144, "s_in": 144, "s_out": 144, "w_o": 144, "gaussian_conj": 144, "z_r_in": 144, "incid": [144, 148], "z_r_out": 144, "emerg": [144, 198], "geometric_conj_ab": 144, "geometric_conj_af": 144, "geometric_conj_bf": 144, "rayleigh2waist": 144, "waist2rayleigh": 144, "optic": [146, 147, 148, 149, 272], "permitt": 146, "permeabl": 146, "fermat": 146, "electr": [146, 148, 191, 262, 264], "electromagnet": [146, 191, 236, 264], "intrinsic_imped": 146, "149896229": [146, 149], "kilogram": [146, 178, 180, 182], "1250000": 146, "amper": 146, "refractive_index": 146, "299792458": [146, 149, 182], "r675": 146, "optical_medium": 146, "travel": [146, 149, 191, 262, 264], "stoke": 147, "mueller": 147, "jones_vector": 147, "stokes_vector": 147, "half_wave_retard": 147, "polarizing_beam_splitt": 147, "jones_2_stok": 147, "\u2148": [147, 195, 209, 210, 229, 288], "\u03c7": 147, "\u03c8": 147, "i\u2080": 147, "plate": 147, "hwp": 147, "splitter": 147, "transmit": [147, 148], "pb": 147, "transmitted_port": 147, "reflected_port": 147, "transmitted_pow": 147, "reflected_pow": 147, "r676": 147, "jones_calculu": 147, "r677": 147, "mueller_calculu": 147, "r678": 147, "stokes_paramet": 147, "retard": 147, "poincar\u00e9": 147, "tilt": 147, "mayor": 147, "linear_polar": 147, "transmiss": [147, 148], "mueller_matrix": 147, "quarter_wave_retard": 147, "phase_retard": 147, "\u03b4": 147, "phia": 147, "phib": 147, "4x1": [147, 230], "phi_a": 147, "phi_b": 147, "qwp": 147, "reflective_filt": 147, "unpolar": 147, "transmissive_filt": 147, "attenu": 147, "transmitt": 147, "ndf": 147, "refraction_angl": 148, "fresnel_coeffici": 148, "brewster_angl": 148, "critical_angl": 148, "lens_makers_formula": 148, "mirror_formula": 148, "lens_formula": 148, "hyperfocal_dist": 148, "transverse_magnif": 148, "medium1": 148, "medium2": 148, "brewster": 148, "926093295503462": 148, "onset": 148, "850908514477849": 148, "02005": 148, "angle_of_incid": 148, "fresnel": [148, 210, 220], "polaris": 148, "te": 148, "undergo": 148, "317843553417859": 148, "348645229818821": 148, "658921776708929": 148, "651354770181179": 148, "235625382192159": 148, "971843958291041": 148, "816477005968898": 148, "577377951366403": 148, "r679": 148, "fresnel_equ": 148, "coc": 148, "0033": 148, "focal_length": 148, "n_len": 148, "n_surr": 148, "thick": 148, "1515151515151": 148, "0000000000000": 148, "3418463277618": 148, "41152": 148, "magnif": 148, "twave": 149, "time_period": 149, "wavenumb": 149, "phi1": 149, "phi2": 149, "w1": [149, 222], "w3": [149, 210], "superposit": [149, 160, 171, 197], "angular_veloc": 149, "tempor": 149, "r680": 150, "paulialgebra": 150, "evaluate_pauli_product": 150, "paulimatric": 150, "sigma3": 150, "nodal": [151, 176, 197], "hw": [151, 176], "coherent_st": 151, "coher": [151, 177, 183], "1d": [151, 153, 166, 185, 235], "wavefunct": [151, 164, 173, 176, 272], "r681": 152, "__cmp__": [152, 156, 175], "dagger": [152, 156, 162, 164, 167, 169, 174, 175, 272], "todo": [153, 155, 159, 160, 164, 165, 167, 168, 169, 170, 171, 203, 210, 217, 235], "operatorset": [153, 165], "positionbra3d": 153, "eigenbra": [153, 166, 172], "positionket3d": 153, "eigenket": [153, 166, 172], "positionstate3d": 153, "eigenst": [153, 165, 170, 172, 173], "position_x": 153, "position_i": 153, "position_z": 153, "pxbra": [153, 165], "pxket": [153, 165, 170], "pxop": [153, 165, 170], "xbra": [153, 165, 170], "xket": [153, 165, 170], "xop": [153, 165, 170], "yop": 153, "zop": 153, "momenta": 154, "uncoupl": [154, 172], "r682": 154, "j_3": [154, 172, 195], "r683": 154, "wigner3j": [154, 195], "wigner": [154, 172, 230, 272], "varshalovich": [154, 172], "zyla": 154, "theor": 154, "phy": [154, 180, 195], "083c01": 154, "r684": 154, "w3j": 154, "715": [154, 195, 210], "wigner6j": [154, 195], "j12": [154, 172], "j23": 154, "6j": [154, 195], "wigner9j": [154, 195], "j4": 154, "j34": 154, "j13": 154, "j24": 154, "9j": [154, 195], "cg_simp": 154, "r685": 154, "clebsh": 154, "rethink": 155, "figsiz": 155, "circuitplot": 155, "nqubit": [155, 159, 160, 169], "control_lin": 155, "gate_idx": [155, 159], "min_wir": 155, "max_wir": 155, "control_point": 155, "wire_idx": 155, "not_point": 155, "one_qubit_box": 155, "box": [155, 160, 162, 171, 173, 265, 272], "qubit": [155, 159, 160, 161, 162, 168, 272], "swap_point": 155, "two_qubit_box": 155, "createcg": 155, "latexnam": 155, "mock": 155, "mz": 155, "circuit_plot": 155, "min_qubit": [155, 159], "autogener": 155, "wire": 155, "j_0": 155, "r686": 156, "comm": [156, 175, 236], "plank": 157, "r687": 157, "05457162000000e": 157, "planck_const": 157, "hermetian": 158, "r688": 158, "r689": 158, "ket": [158, 163, 164, 165, 167, 169, 170, 173, 175], "bra": [158, 163, 164, 165, 167, 169, 170, 173, 175], "innerproduct": [158, 163, 164, 170, 172, 175], "outerproduct": [158, 164], "seamlessli": 158, "hermitian_adjoint": 158, "hermitian_transpos": 158, "_apply_operators_qubit": 159, "gate_sort": 159, "gate_simp": 159, "ugat": 159, "cgate": 159, "control_valu": 159, "cnot": 159, "eval_control": 159, "plot_gat": 159, "circ_plot": 159, "simplify_cg": 159, "cphase": 159, "cnotgat": 159, "qappli": [159, 160, 162, 164, 169, 272], "get_target_matrix": 159, "hadamardg": 159, "identityg": 159, "onequbitg": 159, "phaseg": 159, "swapgat": 159, "target1": 159, "target2": 159, "tgate": 159, "twoqubitg": 159, "xgate": 159, "ygate": 159, "zgate": 159, "bubbl": 159, "random_circuit": 159, "ngate": 159, "gate_spac": 159, "mermin": 160, "_represent_zg": 160, "oracleg": 160, "oracl": 160, "intqubit": [160, 169], "search_funct": 160, "wgate": 160, "apply_grov": 160, "grover_iter": 160, "qstate": 160, "wv": 160, "superposition_basi": 160, "numqubit": 160, "basis_st": 160, "matt": 161, "complexspac": 161, "directsumhilbertspac": 161, "r690": 161, "hilbertspac": 161, "fockspac": 161, "hilbert_spac": [161, 164, 173], "direct_sum": 161, "quantiz": [161, 272], "r691": 161, "mess": [161, 226, 229, 287], "fock_spac": 161, "r692": 161, "tensorpowerhilbertspac": 161, "r693": 161, "tensor_product": 161, "tensorproducthilbertspac": 161, "r694": 161, "clebsch": [162, 172, 195, 272], "gordan": [162, 172, 195, 272], "hilbert": [162, 164, 170, 272], "grover": [162, 272], "qft": [162, 171, 272], "shor": [162, 272], "brabas": [163, 164, 170, 173], "ketbas": [163, 164, 170, 173], "r695": 163, "inner_product": 163, "apply_oper": [164, 175], "identityoper": 164, "r696": 164, "r697": 164, "polymoni": 164, "operator_": 164, "28physic": 164, "old_assumpt": 164, "r698": 164, "outer_product": 164, "unitaryoper": 164, "operators_to_st": 165, "state_to_oper": 165, "_operators_to_st": 165, "state_map": 165, "_state_to_oper": 165, "statebas": [165, 170, 173], "piab": 166, "piabbra": 166, "piabhamiltonian": 166, "piabket": 166, "ip_doit": 167, "smarter": [168, 219], "rk": 168, "iqft": 168, "rkgate": 168, "qtf": 168, "povm": 169, "as_int": [169, 251], "qubit_valu": 169, "intqubitbra": 169, "00001": 169, "qubitbra": 169, "matrix_to_dens": 169, "matrix_to_qubit": 169, "measure_al": 169, "ensembl": 169, "measure_all_oneshot": 169, "oneshot": 169, "measure_parti": 169, "measure_partial_oneshot": 169, "qubit_to_matrix": 169, "enumerate_st": 170, "_enumerate_st": 170, "foo_1": 170, "foo_2": 170, "foo_3": 170, "test2": 170, "bar_4": 170, "bar_5": 170, "bar_10": 170, "get_basi": 170, "replace_non": 170, "operator_to_st": 170, "qexpr": 170, "integrate_result": 170, "orig_expr": 170, "x_ket": 170, "x_op": 170, "rep_expect": 170, "px_2": 170, "px_1": 170, "rep_innerproduct": 170, "_repres": 170, "_represent_foobasi": 170, "foobasi": 170, "_represent_szop": 170, "szupket": 170, "szop": 170, "sz": 170, "cmod": 171, "reformat": 171, "period_find": 171, "momemtum": 172, "j2op": 172, "jxbra": 172, "jx": 172, "jzket": 172, "jxbracoupl": 172, "jcoupl": 172, "jzketcoupl": 172, "jxket": 172, "jxketcoupl": 172, "jybra": 172, "jy": 172, "jybracoupl": 172, "jyket": 172, "jyketcoupl": 172, "jzbra": 172, "jz": 172, "jzbracoupl": 172, "j_4": [172, 195], "argular": 172, "jzop": 172, "passiv": 172, "r699": 172, "wignerd": 172, "mp": [172, 228, 244], "jm": 172, "jj": 172, "r700": 172, "jcoupling_list": 172, "coupledspinst": 172, "spinstat": 172, "r701": 173, "dual_class": 173, "mn": [173, 210, 230], "ket_not": 173, "r702": 173, "k0": [173, 201, 203, 230], "orthogonalbra": 173, "orthogonalket": 173, "orthogonalst": 173, "_eval_adjoint": 173, "timedepbra": 173, "timedepst": 173, "timedepket": 173, "prob": [173, 230], "412214747707527": 173, "matrix_tensor_product": 174, "axb": 174, "xdagger": 174, "axc": 174, "bxc": 174, "tensor_product_simp": 174, "cxd": 174, "boson": 175, "fetter": 175, "welecka": 175, "secondqu": 175, "annihilateboson": 175, "fockstateket": 175, "bket": 175, "fockstatebosonket": 175, "annihilatefermion": 175, "createboson": 175, "is_only_q_annihil": 175, "destroi": [175, 219], "quasi": 175, "hole": 175, "is_only_q_cr": 175, "is_q_annihil": 175, "is_q_creat": 175, "antisymmetrictensor": 175, "bbra": 175, "fockstatebosonbra": 175, "bd": 175, "bosonicbasi": 175, "fock": 175, "createfermion": 175, "wick": 175, "fbra": 175, "fockstatefermionbra": 175, "fket": 175, "fockstatefermionket": 175, "fixedbosonicbasi": 175, "n_particl": 175, "n_level": 175, "fockstat": 175, "occup": 175, "bosonbra": 175, "fockstatebra": 175, "fermi_level": 175, "r703": 175, "textwrap": [175, 251], "_q": 175, "get_subno": 175, "fermionicoper": 175, "has_q_annihil": 175, "q_annihil": 175, "has_q_creat": 175, "leftmost": 175, "q_creator": 175, "iter_q_annihil": 175, "iter_q_cr": 175, "0x": 175, "permutationoper": 175, "get_permut": 175, "varbosonicbasi": 175, "n_max": 175, "creator": 175, "evaluate_delta": 175, "einstein": [175, 236], "d_ij": 175, "_j": [175, 180, 195, 212], "d_ip": 175, "d_qp": 175, "matrix_rep": 175, "simplify_index_permut": 175, "permutation_oper": 175, "schemat": [175, 180], "abij": 175, "abji": 175, "baij": 175, "baji": 175, "permutlist": 175, "substitute_dummi": 175, "new_indic": 175, "pretty_indic": 175, "_get_ordered_dummi": 175, "_c": 175, "_d": 175, "index_group": 175, "string_of_lett": 175, "my_dummi": 175, "_v": [175, 194], "_p_0": 175, "_p_1": 175, "keep_only_fully_contract": 175, "sho": 176, "isotrop": 176, "mk": [177, 180], "legal": 177, "temperatur": [177, 191, 264], "dimensions": 177, "dimsys_si": [177, 178], "get_dimensional_depend": [177, 178], "has_integer_pow": 177, "dim_si": 177, "base_dim": 177, "derived_dim": 177, "dimensional_depend": 177, "can_transf_matrix": 177, "useless": [177, 201, 203], "inv_can_transf_matrix": 177, "dim_can_vector": 177, "dim_vector": 177, "is_consist": [177, 183], "is_dimensionless": 177, "list_can_dim": 177, "print_dim_bas": 177, "gravitational_const": [178, 182], "equivalent_dim": 178, "grav_eq": 178, "kepler": [178, 255], "venu": 178, "701": 178, "dai": [178, 182, 226], "venus_a": 178, "108208000e3": 178, "solar": 178, "solar_mass": 178, "9891e30": 178, "convert_to": [178, 182, 199, 205], "5112118495813": 178, "659097795948": 178, "astrophys": 178, "astrophysicist": 179, "ua": [179, 198], "earth": [179, 191, 264], "sun": 179, "theoricist": 179, "philosophi": [179, 226, 229, 272], "rough": 180, "mole": 180, "dimensionless": 180, "unavoid": 180, "d_3": 180, "d_2": [180, 206, 230], "underbrac": [180, 193], "countabl": [180, 229], "pmatrix": 180, "kg": [180, 265], "glu": 180, "men": 180, "heat": 180, "joul": 180, "calori": 180, "stori": 180, "chemistri": 180, "page52": 180, "1952": 180, "page78": 180, "deboer79": 180, "boer": 180, "818": 180, "levyleblond77": 180, "l\u00e9vy": 180, "leblond": 180, "conceptu": [180, 197, 264], "rivista": 180, "del": [180, 245, 255, 263, 287], "nuovo": [180, 195], "cimento": [180, 195], "1977": 180, "187": [180, 204], "214": 180, "anticip": 180, "bin_prefix": 181, "abbrev": [181, 182, 210], "latex_repr": [181, 182], "encapsul": [181, 203, 229, 243], "kilo": 181, "scale_factor": 182, "pretty_unicode_repr": 182, "pretty_ascii_repr": 182, "mathml_presentation_repr": 182, "is_prefix": 182, "abbrevi": [182, 198, 210, 229, 231], "speed_of_light": 182, "reference_quant": 182, "target_unit": 182, "mile": 182, "atomic_mass_const": 182, "centimet": 182, "25146": 182, "609344": 182, "86400": 182, "660539060e": 182, "300000": 182, "planck": 182, "62963087839509e": 182, "base_unit": 183, "descr": 183, "dimension_system": 183, "derived_unit": 183, "overridden": [183, 197, 212, 287], "get_units_non_prefix": 183, "rigidli": 184, "entireti": 184, "_str": 184, "coordinatesym": [185, 187], "otherfram": [185, 255], "n_alpha_b": 185, "ny": 185, "_3": [185, 195], "orient_body_fix": 185, "orient_space_fix": 185, "orient_quaternion": 185, "quaternion": [185, 189, 194, 255, 257], "userwarn": [185, 239, 246, 283], "rotation_ord": [185, 255, 257], "xzx": 185, "xyx": [185, 255, 257], "yzy": 185, "zyz": 185, "yxy": [185, 194], "yzx": [185, 194], "zxy": 185, "xzy": 185, "zyx": 185, "yxz": 185, "orient_explicit": 185, "lambda_x": [185, 255, 257], "lambda_i": [185, 255, 257], "lambda_z": [185, 255, 257], "q0": [185, 226, 255, 257], "newnam": 185, "gen_spe": [185, 189], "variable_map": 185, "a_x": [185, 194, 210], "b_x": [185, 187, 194, 236], "b_y": [185, 187, 194, 236], "a_z": [185, 194], "b_z": [185, 194, 236], "inlist": 185, "var_in_dcm": 185, "reexpress": [185, 260], "time_deriv": [185, 187, 191], "free_dynamicsymbol": 185, "codirect": 185, "dyadic_tensor": [185, 255], "frame1": 185, "frame2": [185, 187], "second_reference_fram": 185, "ixz": 185, "inertia_dyad": 185, "pertain": [186, 192], "fieldfunct": [186, 191], "curl": [186, 255, 258, 265], "vect": [186, 255, 258], "r_x": [186, 191], "r_y": [186, 191], "r_z": [186, 191], "gradient": [186, 195, 196, 255, 258, 264], "scalar_potenti": [186, 191, 258, 262], "scalar_field": [186, 191, 255, 258, 262], "grad_field": [186, 258], "scalar_potential_differ": [186, 191, 258, 262], "sympyfi": [186, 187, 189, 258], "position2": [186, 258], "vectfield": [186, 191, 258, 262], "is_conserv": [186, 191, 258, 262], "is_solenoid": [186, 191, 258, 262], "solenoid": [186, 258], "q6": 187, "vec1": 187, "vec2": 187, "n_x": 187, "rotating_reference_fram": 187, "time_derivatives_in_the_two_fram": 187, "otherpoint": 189, "outfram": 189, "fixedfram": 189, "get_motion_param": 189, "vectori": [189, 191, 259, 264], "timevalue1": 189, "timevalue2": 189, "313": 189, "vel_vec": 189, "q1dd": 190, "q2dd": 190, "charg": [191, 264], "displac": [191, 193, 264], "temper": 191, "4xy": [191, 264], "electric_potenti": [191, 262], "r1_x": 191, "r1_y": 191, "infinitesim": [191, 226, 262], "nabla": [191, 255, 261, 262], "f_y": [191, 262], "f_x": [191, 229, 262], "sink": [191, 262], "irrot": [191, 262], "conservative_field": [191, 262], "aug": [192, 229], "dyadic_product": [192, 263], "inc": [192, 204], "w_x": 193, "w_y": 193, "w_z": 193, "w_1": [193, 205], "w_2": [193, 205], "w_3": 193, "textrm": [193, 194, 218], "u_x": 193, "sp": 193, "oq": 193, "qp": 193, "rod": 193, "went": 193, "parallelogram": 194, "c_x": 194, "c_y": 194, "c_z": 194, "train": 194, "friend": 194, "xz": [194, 196], "zy": 194, "undergon": [194, 229], "vastli": 194, "wait": 194, "mold": 194, "bp": [194, 226], "bpp": 194, "zzx": 194, "multifram": 194, "direction": 194, "racah": 195, "gaunt": 195, "rasch03": 195, "regge58": 195, "regg": 195, "544": 195, "regge59": 195, "116": [195, 204], "1959": 195, "edmonds74": 195, "edmond": 195, "princeton": [195, 230], "1957": 195, "rasch": 195, "siam": [195, 248], "sci": 195, "1416": 195, "1428": 195, "liberatodebrito82": 195, "liberato": 195, "brito": 195, "homeier96": 195, "homeier": 195, "steinborn": 195, "mol": 195, "368": 195, "1996": [195, 204, 220, 228, 255], "forum": [195, 229], "m4nzdu": 195, "7o38": 195, "jen": 195, "03": [195, 230], "oscar": 195, "gerardo": 195, "lazo": 195, "arjona": 195, "phil": 195, "adam": [195, 206], "lemaitr": 195, "2022": 195, "jyr2000": 195, "gmail": 195, "clebsch_gordan": 195, "2j_3": 195, "dot_rot_grad_ynm": 195, "_l": 195, "l_2": 195, "l_3": 195, "drastic": 195, "2l_1": 195, "2l_2": 195, "2l_3": 195, "1200": 195, "00689500421922113448": 195, "inflect": 195, "unsuit": 195, "dd": [195, 215], "ee": [195, 205], "j_5": 195, "j_6": 195, "richer": 195, "real_gaunt": 195, "realgaunt": 195, "m0": [195, 236], "00002480019791932209313156167": 195, "wigner_3j": 195, "wigner_6j": 195, "wigner_9j": 195, "j_7": 195, "j_8": 195, "j_9": 195, "05555555": 195, "1666666": 195, "wigner_d": 195, "j_z": 195, "j_y": 195, "\u03b3": [195, 277, 287], "wigner_d_smal": 195, "textbackend": 196, "plot_parametr": 196, "plot_implicit": 196, "plot3d_parametric_lin": 196, "plot3d_parametric_surfac": 196, "zlabel": 196, "aspect_ratio": 196, "ylim": 196, "axis_cent": 196, "xscale": 196, "yscale": 196, "autoscal": 196, "textplot": 196, "_seri": [196, 207], "baseseri": 196, "nonparametr": 196, "basebackend": 196, "parametric2dlineseri": 196, "parametric3dlineseri": 196, "red": 196, "cyan": 196, "grayscal": 196, "integers_onli": 196, "surfaceover2drangeseri": 196, "parametricsurfaceseri": 196, "surface_color": 196, "range1": 196, "range2": 196, "fill_between": 196, "inch": 196, "expr_x": 196, "expr_i": 196, "canva": 196, "range_x": 196, "range_i": 196, "nb_of_points_x": 196, "nb_of_points_i": 196, "expr_z": 196, "range_u": 196, "range_v": 196, "nb_of_points_u": 196, "nb_of_points_v": 196, "x_var": 196, "y_var": 196, "mesh": 196, "p8": 196, "p9": 196, "nrow": [196, 199], "ncolumn": 196, "stuff": [196, 241, 243, 251], "is_2dlin": 196, "oblig": 196, "only_integ": 196, "get_seg": 196, "get_color_arrai": 196, "var_start_end": 196, "r704": 196, "luiz": 196, "henriqu": 196, "figueiredo": 196, "r705": 196, "line3dbaseseri": 196, "surfacebaseseri": 196, "var_start_end_x": 196, "var_start_end_i": 196, "var_start_end_u": 196, "var_start_end_v": 196, "implicitseri": 196, "has_equ": 196, "use_interval_math": 196, "centric": 196, "get_mesh": 196, "process_seri": 196, "_process_seri": 196, "keyboard": 196, "mous": 196, "pyglet_plot": 196, "screenshot": 196, "camera": 196, "zoom": 196, "numpad": 196, "ordin": [196, 226, 251], "f5": 196, "f6": 196, "f8": 196, "drag": 196, "button": [196, 242], "curvilinear": [196, 259, 260], "__setitem__": 196, "zfade4": 196, "key1": 196, "value1": 196, "key2": 196, "value2": 196, "unbound_theta": 196, "wirefram": 196, "saddl": 196, "fz": 196, "_______________________________________________________": 196, "mediterranean": 197, "cultur": 197, "arab": 197, "lighten": 197, "tapestri": 197, "woven": 197, "european": 197, "soil": 197, "plausibl": 197, "teeter": 197, "totter": 197, "outweigh": 197, "excit": 197, "amus": 197, "kempf": 197, "1944": 197, "20th": 197, "dedekind": 197, "intim": 197, "disciplin": 197, "toolset": 197, "atiyah69": [197, 204], "gear": 197, "greuel2008": [197, 204], "interspers": 197, "lr": 197, "ilex": 197, "\u211a": [197, 210], "localis": 197, "abridg": 197, "free_modul": [197, 201], "quotient_r": [197, 201], "overload": [197, 200, 201, 259, 282], "polynomialr": [197, 201, 208], "domain_or_r": [197, 201], "quotientr": [197, 201], "base_id": [197, 201], "elbow": 197, "room": 197, "componentwis": [197, 210], "inclin": 197, "biproduct": 197, "quotient_modul": 197, "is_submodul": 197, "multiply_id": 197, "identity_hom": 197, "freemodul": 197, "freemoduleel": 197, "conicis": 197, "_contain": 197, "_syzygi": 197, "_in_terms_of_gener": 197, "_intersect": 197, "_module_quoti": 197, "reduce_el": [197, 205], "represantit": 197, "in_terms_of_gener": 197, "inclusion_hom": 197, "rela": 197, "relb": 197, "is_full_modul": 197, "module_quoti": 197, "opt": [197, 203, 222, 241, 283], "coincis": 197, "syzygy_modul": 197, "r_n": 197, "_contains_elem": 197, "_contains_id": 197, "_quotient": 197, "_union": 197, "_product": 197, "is_whole_r": 197, "is_maxim": 197, "is_primari": 197, "is_rad": 197, "is_princip": 197, "xj": 197, "satur": 197, "subquoti": 197, "quotientmodul": 197, "subquotientmodul": 197, "killed_modul": 197, "quotientmoduleel": 197, "kill": [197, 201, 241], "quotient_hom": 197, "ker": 197, "surject": 197, "cokernel": 197, "coker": 197, "meaningfulli": 197, "restrict_domain": 197, "homomoprh": 197, "modulehomomorph": [197, 205], "_ker": 197, "_img": 197, "_kernel": 197, "_imag": 197, "_restrict_domain": 197, "_restrict_codomain": 197, "_quotient_domain": 197, "_quotient_codomain": 197, "_appli": 197, "_mul_scalar": 197, "_compos": 197, "_add": [197, 216], "is_inject": 197, "quotient_domain": 197, "is_isomorph": 197, "preimag": 197, "restrict_codomain": 197, "is_surject": 197, "quotient_codomain": 197, "induct": 197, "monogen": 197, "monogenicfiniteextens": [197, 201], "finiteextens": 197, "sqrt2": [197, 200], "_5": 197, "extensionel": [197, 201], "notinvert": [197, 203, 206], "overview": [198, 229, 263, 264], "nu_1": 198, "nu_2": 198, "nu_n": 198, "nu_i": 198, "customarili": 198, "endow": [198, 206], "resp": [198, 201, 226], "divmod": [198, 200, 201], "cb": [198, 248], "sqf_list": [198, 201, 206], "sqf": [198, 201, 206, 223], "buchberg": [198, 203, 204, 206], "solve_poly_system": [198, 206, 228, 229], "ddm": 199, "fmt": [199, 201, 205], "matrix1": 199, "sdm": [199, 203], "dmnonsquarematrixerror": 199, "zz_i": [199, 200], "from_dict_sympi": 199, "ncol": 199, "elemsdict": 199, "from_list_sympi": 199, "from_list": [199, 201, 206, 207], "construct_domain": [199, 200, 201, 206], "from_rep": 199, "drep": 199, "dm": [199, 205], "ownership": 199, "scc": 199, "substract": 199, "to_dens": 199, "to_field": [199, 201, 206], "to_spars": 199, "aq": 199, "ccc": [199, 229], "from_ddm": 199, "domainerror": [199, 203, 206], "to_ddm": 199, "r706": 199, "pythonmpq": [200, 201], "srepr": [200, 282], "strength": 200, "richardon": 200, "dup_factor_list": 200, "factortool": [200, 203], "dup_": [200, 203], "dmp_": [200, 203], "z1": [200, 201, 228], "is_field": [200, 201], "quo": [200, 201, 203, 206], "rem": [200, 201, 203, 206], "exquo": [200, 201, 206], "exactquotientfail": [200, 201, 203, 206], "mpz": [200, 201], "of_typ": [200, 201], "z1_sympi": 200, "to_sympi": [200, 201], "from_sympi": [200, 201], "forth": [200, 205], "z_sympi": 200, "z_zz": 200, "coercionfail": [200, 203], "sum_domain": 200, "expressions_sympi": 200, "expressions_dom": 200, "result_dom": 200, "e_dom": 200, "result_sympi": 200, "qq_i": 200, "gaussianinteg": [200, 201], "gaussianrationalfield": [200, 201], "gaussianr": [200, 201], "galoi": [200, 203, 205], "finitefield": [200, 201], "pythonfinitefield": [200, 201], "gmpyfinitefield": [200, 201], "welcom": [200, 226, 280], "realel": [200, 201], "complexel": [200, 201], "mpc": 200, "xr": [200, 208], "zc": 200, "1j": 200, "_mpc_": 200, "realfield": [200, 201], "rr100": 200, "33333333333333333333333333333": 200, "hack": [200, 226, 239], "algebraic_field": [200, 201, 203, 205], "algebraicfield": [200, 201, 203, 205], "sqrt3": 200, "x_dom": 200, "p_expr": [200, 201], "polyel": [200, 201, 203, 207, 208, 210], "p_dom": 200, "xk": [200, 201, 212], "yk": [200, 201], "poly_r": [200, 201], "old_polynomialr": 200, "globalpolynomialr": 200, "polyclass": [200, 201, 206], "yr": [200, 208], "broader": 200, "get_field": [200, 201], "frac_field": [200, 201], "rationalfield": [200, 201], "old_frac_field": [200, 201], "fractionfield": [200, 201], "old_fractionfield": 200, "xf": 200, "yf": 200, "fracfield": [200, 201], "expressiondomain": [200, 201], "elements_sympi": 200, "elements_k": 200, "convert_from": [200, 201], "num_zz": 200, "num_qq": 200, "domainel": [200, 201, 208], "encompass": 200, "all_coeff": [200, 201, 206], "dom": [200, 201, 203, 218], "strang": 200, "hybrid": 200, "unreli": 200, "usefulli": 201, "pythonr": [201, 208], "p_domain": 201, "ez": [201, 236], "get_r": 201, "has_assoc_field": 201, "has_assoc_r": 201, "alg_field_from_poli": [201, 205], "root_index": 201, "almosteq": 201, "cyclotomic_field": [201, 205], "zeta7": 201, "zeta_": 201, "lexord": [201, 206], "from_algebraicfield": 201, "from_complexfield": 201, "from_expressiondomain": 201, "from_expressionrawdomain": 201, "from_ff": 201, "modularinteg": 201, "from_ff_gmpi": 201, "from_ff_python": 201, "from_fractionfield": 201, "from_globalpolynomialr": 201, "from_monogenicfiniteextens": 201, "from_polynomialr": 201, "from_qq_gmpi": 201, "from_qq_python": 201, "from_realfield": 201, "from_zz_gmpi": 201, "from_zz_python": 201, "gcdex": [201, 206], "get_exact": 201, "half_gcdex": [201, 206], "is_pid": 201, "is_r": 201, "is_nonposit": 201, "is_on": [201, 206], "rersiv": 201, "__neg__": 201, "__pos__": 201, "__sub__": 201, "q_domain": 201, "q_expr": 201, "x_domain": 201, "alg": [201, 205, 209], "trait": 201, "is_unit": 201, "__divmod__": 201, "__floordiv__": 201, "__mod__": [201, 205], "simpledomain": 201, "compositedomain": 201, "from_qq": 201, "from_zz": 201, "gmpyinteg": 201, "pythoninteg": 201, "gmpyrationalfield": 201, "pythonrationalfield": 201, "from_gaussianrationalfield": 201, "gaussianel": 201, "gaussiandomain": 201, "qq_python": 201, "zz_python": 201, "z2": 201, "z3": 201, "z4": 201, "from_gaussianinteg": 201, "as_algebraicfield": 201, "orig_ext": 201, "integral_basi": [201, 205], "maximal_ord": [201, 205], "zeta5": 201, "primes_abov": [201, 205], "primeid": [201, 205], "to_alg_num": [201, 205], "legibl": 201, "to_rat": 201, "mpelement": 201, "complexfield": 201, "lc": [201, 203, 206], "domain_or_field": 201, "dmf": 201, "coercibl": 201, "monomialord": [201, 206], "xring": 201, "vring": 201, "sring": [201, 207, 208], "polyr": [201, 203, 208], "factor_list": [201, 206, 287], "add_gen": 201, "drop_to_ground": 201, "monomial_basi": 201, "206": [201, 206], "744": 201, "945": [201, 207], "is_monomi": [201, 206], "const": [201, 210], "inplac": 201, "shallow": [201, 217], "zero_monom": 201, "fv": 201, "clo": 201, "p64": 201, "qv": 201, "f0": 201, "imul_num": 201, "itercoeff": 201, "itermonom": 201, "iterterm": 201, "leading_expv": 201, "leading_monom": 201, "leading_term": 201, "listcoeff": 201, "listmonom": 201, "listterm": 201, "monom": [201, 206], "strip_zero": 201, "tail_degre": 201, "xfield": 201, "vfield": [201, 261], "sfield": [201, 261], "fracel": [201, 210], "lev": 201, "add_ground": [201, 206], "all_monom": [201, 206], "all_term": [201, 206], "cauchy_lower_bound": 201, "cauchy_upper_bound": 201, "clear_denom": [201, 206], "count_complex_root": 201, "sup": [201, 206, 210, 218], "count_real_root": 201, "deflat": [201, 206], "y_i": [201, 203, 205, 206, 226], "x_j": [201, 203, 206], "degree_list": [201, 206], "eject": [201, 206], "exquo_ground": [201, 206], "factor_list_includ": [201, 206], "from_dict": [201, 206], "from_sympy_list": 201, "gff_list": [201, 206], "homogeneous_ord": [201, 206, 223, 226], "is_cyclotom": [201, 206], "is_ground": [201, 206], "is_homogen": [201, 206], "is_irreduc": [201, 206], "is_linear": [201, 206], "is_mon": [201, 206], "is_quadrat": [201, 206], "is_sqf": [201, 206], "l1_norm": [201, 206], "l2_norm_squar": 201, "max_norm": [201, 206], "mignotte_sep_bound_squar": 201, "mignott": [201, 203], "mul_ground": [201, 206], "pdiv": [201, 206], "pexquo": [201, 206], "pquo": [201, 206], "prem": [201, 206], "quo_ground": [201, 206], "refine_root": [201, 205, 206], "includepr": [201, 203, 206], "sqf_list_includ": [201, 206], "sqf_norm": [201, 206], "sqf_part": [201, 206], "sqr": [201, 206], "sturm": [201, 206], "sub_ground": [201, 206], "to_dict": 201, "to_exact": [201, 206], "to_r": [201, 206], "to_sympy_dict": 201, "to_sympy_list": 201, "to_tupl": 201, "total_degre": [201, 206, 223], "trunc": [201, 206, 209], "frac_unifi": 201, "half_per": 201, "poly_unifi": 201, "gr\u00f6bner": 202, "wester": [202, 273], "agca": [202, 273], "l0": 203, "legitim": 203, "uninterest": 203, "bulk": [203, 220], "x_u": 203, "dup__": 203, "densebas": 203, "dmp_lc": 203, "poly_lc": 203, "dmp_tc": 203, "poly_tc": 203, "dmp_ground_lc": 203, "dmp_ground_tc": 203, "dmp_true_lt": 203, "n_1": [203, 228, 230], "n_k": 203, "dmp_degre": 203, "dmp_degree_in": 203, "dmp_degree_list": 203, "dmp_strip": 203, "dmp_valid": 203, "dup_revers": 203, "dmp_copi": 203, "dmp_to_tupl": 203, "dmp_normal": 203, "dmp_convert": 203, "to_domain": 203, "dmp_from_sympi": 203, "dmp_nth": 203, "dmp_ground_nth": 203, "dmp_zero_p": 203, "dmp_zero": 203, "dmp_one_p": 203, "dmp_one": 203, "dmp_ground_p": 203, "dmp_ground": 203, "dmp_negative_p": 203, "dmp_positive_p": 203, "dmp_from_dict": 203, "dmp_to_dict": 203, "dmp_swap": 203, "dmp_permut": 203, "dmp_nest": 203, "dmp_rais": 203, "dmp_deflat": 203, "dmp_multi_defl": 203, "dmp_inflat": 203, "dmp_exclud": 203, "dmp_includ": 203, "dmp_inject": 203, "dmp_eject": 203, "dmp_terms_gcd": 203, "dmp_list_term": 203, "dmp_apply_pair": 203, "dmp_slice": 203, "dup_random": 203, "densearith": 203, "dmp_add_term": 203, "dmp_sub_term": 203, "dmp_mul_term": 203, "dmp_add_ground": 203, "dmp_sub_ground": 203, "dmp_mul_ground": 203, "dmp_quo_ground": 203, "dmp_exquo_ground": 203, "dup_lshift": 203, "dup_rshift": 203, "dmp_ab": 203, "dmp_neg": 203, "dmp_add": 203, "dmp_sub": 203, "dmp_add_mul": 203, "dmp_sub_mul": 203, "dmp_mul": 203, "dmp_sqr": 203, "dmp_pow": 203, "dmp_pdiv": 203, "dmp_prem": 203, "dmp_pquo": 203, "dmp_pexquo": 203, "dmp_rr_div": 203, "dmp_ff_div": 203, "dmp_div": 203, "dmp_rem": 203, "dmp_quo": 203, "dmp_exquo": 203, "dmp_max_norm": 203, "dmp_l1_norm": 203, "dmp_expand": 203, "densetool": 203, "dmp_integr": 203, "dmp_integrate_in": 203, "dmp_diff": 203, "dmp_diff_in": 203, "dmp_eval": 203, "dmp_eval_in": 203, "dmp_eval_tail": 203, "dmp_diff_eval_in": 203, "dmp_trunc": 203, "dmp_ground_trunc": 203, "dup_mon": 203, "dmp_ground_mon": 203, "dup_cont": 203, "dmp_ground_cont": 203, "dup_primit": 203, "dmp_ground_primit": 203, "dup_extract": 203, "dmp_ground_extract": 203, "dup_real_imag": 203, "bivari": [203, 209, 226, 230], "dup_mirror": 203, "dup_scal": 203, "dup_shift": 203, "dup_transform": 203, "dmp_compos": 203, "dup_decompos": 203, "t_m": 203, "r707": 203, "dmp_lift": 203, "dup_sign_vari": 203, "dmp_clear_denom": 203, "k_0": 203, "dmp_revert": 203, "gf_": 203, "justifi": 203, "necess": 203, "u_0": 203, "m_0": [203, 223], "m_n": 203, "gf_crt1": 203, "9215": 203, "9405": 203, "9603": 203, "gf_crt2": 203, "gf_int": 203, "gf_degre": 203, "gf_lc": 203, "gf_tc": 203, "gf_strip": 203, "gf_trunc": 203, "gf_normal": 203, "gf_from_dict": 203, "gf_to_dict": 203, "gf_from_int_poli": 203, "gf_to_int_poli": 203, "gf_neg": 203, "gf_add_ground": 203, "gf_sub_ground": 203, "gf_mul_ground": 203, "gf_quo_ground": 203, "gf_add": 203, "gf_sub": 203, "gf_mul": 203, "gf_sqr": 203, "gf_add_mul": 203, "gf_sub_mul": 203, "gf_expand": 203, "gf_div": 203, "r708": 203, "monagan93": [203, 204], "r709": 203, "gathen99": [203, 204], "gf_rem": 203, "gf_quo": 203, "gf_exquo": 203, "gf_lshift": 203, "gf_rshift": 203, "gf_pow": 203, "gf_pow_mod": 203, "r710": 203, "gf_gcd": 203, "gf_lcm": 203, "gf_cofactor": 203, "gf_gcdex": 203, "eea": 203, "r711": 203, "gf_monic": 203, "gf_diff": 203, "gf_eval": 203, "gf_multi_ev": 203, "gf_compos": 203, "gf_compose_mod": 203, "gf_trace_map": 203, "r712": 203, "gathen92": [203, 204], "gf_random": 203, "gf_irreduc": 203, "gf_irreducible_p": 203, "gf_sqf_p": 203, "gf_sqf_part": 203, "gf_sqf_list": 203, "e_2": [203, 206], "e_k": 203, "f_j": [203, 220], "gf_sqf": 203, "r713": 203, "geddes92": [203, 204], "gf_qmatrix": 203, "berlekamp": 203, "gf_qbasi": 203, "gf_berlekamp": 203, "gf_zassenhau": 203, "gf_shoup": 203, "gf_factor_sqf": 203, "gf_factor": 203, "e_d": 203, "cantor": 203, "zassenhau": [203, 205], "shoup": [203, 204], "kaltofen": [203, 204], "gathen": [203, 204], "gf_factor_method": 203, "r714": 203, "gf_valu": 203, "2204": 203, "gf_csolv": 203, "congruent": [203, 220, 223], "189": 203, "112": [203, 207], "139": 203, "r715": 203, "ivan": 203, "niven": 203, "zuckerman": 203, "montgomeri": 203, "infeas": [203, 206], "sdm_": 203, "distributedmodul": 203, "sdm_monomial_mul": 203, "sdm_monomial_deg": 203, "f_5": 203, "sdm_monomial_divid": 203, "sdm_lc": 203, "sdm_to_dict": 203, "sdm_from_dict": 203, "dic": 203, "sdm_add": 203, "2f_1": 203, "3f_1": 203, "yf_1": 203, "xf_1": 203, "sdm_lm": 203, "sdm_lt": 203, "sdm_mul_term": 203, "2xy": [203, 281], "8xy": 203, "2y": [203, 223, 226, 229, 281], "sdm_zero": 203, "sdm_deg": 203, "sdm_from_vector": 203, "sdm_to_vector": 203, "variant": [203, 226, 229], "qg": 203, "remark": [203, 209, 220, 226], "uf": 203, "vg": 203, "zout": 203, "euclidtool": 203, "dmp_half_gcdex": 203, "dmp_gcdex": 203, "dmp_invert": 203, "dmp_euclidean_pr": 203, "dmp_primitive_pr": 203, "exceedingli": 203, "collin": [203, 204], "collins67": [203, 204], "subdomain": 203, "2l": 203, "remainin": 203, "subdetermin": 203, "n_2": [203, 230], "n_": [203, 223], "abnorm": 203, "gamma_i": 203, "brown": [203, 204, 230], "traub": [203, 204], "browntraub71": [203, 204], "brown78": [203, 204], "discoveri": [203, 283], "dmp_inner_subresult": 203, "729": 203, "sre": 203, "dmp_subresult": 203, "dmp_prs_result": 203, "dmp_zz_modular_result": 203, "dmp_zz_collins_result": 203, "dmp_qq_collins_result": 203, "dmp_result": 203, "dmp_discrimin": 203, "dmp_rr_prs_gcd": 203, "cff": [203, 206], "cfg": [203, 206], "dmp_ff_prs_gcd": 203, "dmp_zz_heu_gcd": 203, "r716": 203, "liao95": [203, 204], "dmp_qq_heu_gcd": 203, "dmp_inner_gcd": 203, "dmp_gcd": 203, "dmp_lcm": 203, "dmp_content": 203, "dmp_primit": 203, "dmp_cancel": 203, "dmp_trial_divis": 203, "dmp_zz_mignotte_bound": 203, "dup_zz_hensel_step": 203, "hensel": 203, "r717": 203, "dup_zz_hensel_lift": 203, "f_list": 203, "multifactor": 203, "r718": 203, "dup_zz_zassenhau": 203, "dup_zz_irreducible_p": 203, "eisenstein": 203, "dup_cyclotomic_p": 203, "bradford": 203, "russel": 203, "251": 203, "berlin": 203, "heidelberg": 203, "dup_zz_cyclotomic_poli": 203, "dup_zz_cyclotomic_factor": 203, "r719": 203, "weisstein09": [203, 204], "dup_zz_factor_sqf": 203, "dup_zz_factor": 203, "r720": 203, "dmp_zz_wang_non_divisor": 203, "wang": [203, 204], "eez": 203, "dmp_zz_wang_test_point": 203, "dmp_zz_wang_lead_coeff": 203, "dmp_zz_diophantin": 203, "dmp_zz_wang_hensel_lift": 203, "dmp_zz_wang": 203, "enhanc": [203, 230], "r721": 203, "wang78": [203, 204], "r722": 203, "dmp_zz_factor": 203, "r723": 203, "dmp_ext_factor": 203, "dup_gf_factor": 203, "dmp_factor_list": 203, "dmp_factor_list_includ": 203, "dmp_irreducible_p": 203, "groebnertool": 203, "polyconfig": [203, 206], "f5b": [203, 206], "spoli": 203, "red_groebn": 203, "beckerweispfenning93": 203, "is_groebn": 203, "is_minim": 203, "is_reduc": 203, "fglmtool": 203, "matrix_fglm": 203, "o_to": 203, "o_from": 203, "r724": 203, "fauger": [203, 206], "gianni": [203, 206, 228], "mora": [203, 204, 206, 228], "sdm_spoli": 203, "phantom": 203, "sca": 203, "defn": 203, "sdm_ecart": 203, "ecart": 203, "sdm_nf_mora": 203, "nf": 203, "sdm_groebner": 203, "sugar": [203, 204, 235], "giovini": [203, 204], "polyopt": [203, 207], "build_opt": 203, "basepolynomialerror": 203, "operationnotsupport": 203, "heuristicgcdfail": 203, "homomorphismfail": 203, "isomorphismfail": [203, 205], "extraneousfactor": 203, "evaluationfail": 203, "refinementfail": 203, "notrevers": [203, 206], "notalgebra": 203, "polynomialerror": [203, 206], "unificationfail": [203, 205], "generatorsneed": 203, "computationfail": 203, "exc": 203, "generatorserror": 203, "univariatepolynomialerror": 203, "multivariatepolynomialerror": [203, 206], "polificationfail": 203, "orig": 203, "optionerror": 203, "flagerror": 203, "modulargcd": 203, "modgcd_univari": 203, "monagan00": [203, 204], "modgcd_bivari": 203, "modgcd_multivari": 203, "_modgcd_multivariate_p": 203, "brown71": [203, 204], "degbound": 203, "contbound": 203, "func_field_modgcd": 203, "reconstuct": 203, "z_p": 203, "hoeij04": [203, 204], "scarc": 203, "hsin": 204, "chao": 204, "liao": 204, "fateman": 204, "montreal": 204, "quebec": 204, "canada": 204, "240": [204, 212, 258], "247": [204, 228], "von": [204, 230], "zur": 204, "gerhard": 204, "cambridg": [204, 223], "weisstein": 204, "cyclotomicpolynomi": 204, "1215": 204, "1231": 204, "czapor": 204, "labahn": 204, "monagan": [204, 222], "disco": 204, "721": 204, "kaltofen98": 204, "subquadrat": 204, "223": 204, "1998": [204, 223], "1179": 204, "1197": 204, "shoup95": 204, "397": 204, "shoup91": 204, "cox97": [204, 206], "shea": [204, 206], "ajwa95": 204, "ajwa": 204, "liu": 204, "groebner": [204, 205, 206, 209, 222, 228, 229], "cites": 204, "ist": [204, 219], "psu": [204, 219], "mycites": 204, "login": 204, "bose03": 204, "bose": 204, "guiver": 204, "giovini91": 204, "bronstein93": [204, 206], "salvi": [204, 207], "kiev": 204, "ukrain": 204, "buchberger01": [204, 206], "theorist": 204, "moreno": 204, "diaz": 204, "freir": 204, "eurocast": 204, "februari": 204, "davenport88": 204, "siret": 204, "tournier": 204, "london": [204, 223], "124": [204, 276], "greuel": 204, "pfister": 204, "atiyah": 204, "macdonald": 204, "142": 204, "1971": [204, 226], "505": 204, "249": 204, "wittkopf": 204, "478": 204, "hoeij": 204, "297": [204, 206], "304": [204, 206], "wang81": 204, "adic": 204, "symsac": 204, "hoeij02": 204, "manwright94": [204, 206], "yiu": 204, "kwong": 204, "franci": 204, "wright": 204, "dispers": [204, 230], "190347": 204, "190413": 204, "koepf98": [204, 206], "koepf": [204, 212, 222], "vieweg": 204, "abramov71": [204, 206], "abramov": [204, 228], "ussr": 204, "330": 204, "man93": [204, 206], "376": 204, "sciencedirect": [204, 219], "pii": [204, 219], "s0747717183710539": 204, "kapur1994": 204, "deepak": 204, "kapur": 204, "tushar": 204, "saxena": 204, "yang": 204, "dixon": 204, "researchg": [204, 230], "2514261_algebraic_and_geometric_reasoning_using_dixon_result": 204, "palancz08": 204, "pal\u00e1ncz": 204, "zaletnyik": 204, "jl": [204, 243], "awang": 204, "ew": 204, "grafarend": 204, "geodet": 204, "geodesi": 204, "225607735_dixon_result": 204, "s_solution_of_systems_of_geodetic_polynomial_equ": 204, "bruce97": 204, "bruce": 204, "randal": 204, "donald": [204, 245], "mundi": 204, "artifici": [204, 213], "intellig": [204, 222, 226, 287], "orlando": 204, "www2": 204, "duke": 204, "donaldlab": 204, "symbolicnumericalcomput": 204, "045": 204, "087": 204, "stiller96": 204, "stiller": 204, "citeseerx": [204, 219], "viewdoc": [204, 219], "590": 204, "2021": 204, "rep1": [204, 219], "cohen93": [204, 205], "henri": 204, "olga": 205, "tausski": 205, "zimmer": 205, "pohst": 205, "articul": 205, "numberfield": 205, "mathfrak": 205, "regul": 205, "alpha_m": 205, "round_two": 205, "prime_decomp": 205, "prime_valu": 205, "minimal_polynomi": 205, "field_isomorph": 205, "nilrad": 205, "z_k": 205, "zk": 205, "ordinarili": 205, "503": 205, "r725": 205, "r726": 205, "powerbasisel": 205, "ramif": 205, "as_submodul": 205, "bundl": 205, "test_factor": 205, "deliber": 205, "is_inert": 205, "inert": [205, 226], "reduce_anp": 205, "elt": 205, "reduce_alg_num": 205, "field_gen": 205, "just_gen": 205, "reagent": 205, "kummer": 205, "1847": 205, "ueber": 205, "zerlegung": 205, "crell": 205, "r727": 205, "_minpoly_compos": 205, "stall": 205, "alli": 205, "monomorph": 205, "alpha_i": 205, "alpha_n": 205, "lincomb": 205, "primtiiv": 205, "meanwhil": 205, "moduleel": 205, "powerbasi": 205, "submodule_from_matrix": 205, "ancestor": 205, "to_col": 205, "nca": 205, "circumst": [205, 281], "_mult_tab": 205, "successfulli": 205, "moduleendomorph": 205, "innerendomorph": 205, "endomorphismr": 205, "spec": [205, 206], "i_n": [205, 206, 231], "include_self": 205, "basis_el": 205, "element_from_r": 205, "endomorphism_r": 205, "is_compat_col": 205, "mult_tab": 205, "mult": 205, "closurefailur": 205, "nearest_common_ancestor": 205, "number_field": 205, "power_basis_ancestor": 205, "incom": 205, "halv": 205, "submodule_from_gen": 205, "over_power_basi": 205, "starts_with_un": 205, "hnf_modulu": 205, "whole_submodul": 205, "element_from_anp": 205, "element_from_alg_num": 205, "element_from_poli": 205, "qq_matrix": 205, "basis_element_pullback": 205, "discard_befor": 205, "structureerror": 205, "cohen00": 205, "make_mod_elt": 205, "qq_col": 205, "from_int_list": 205, "is_compat": 205, "reduced_mod_p": 205, "to_ancestor": 205, "anc": 205, "to_par": 205, "to_anp": 205, "inner_endomorph": 205, "event": [205, 230], "find_min_poli": 205, "missingunityerror": 205, "is_int": 205, "get_num_denom": 205, "extract_fundamental_discrimin": 205, "r728": 205, "algintpow": 205, "zeta_pow": 205, "r729": 205, "coeff_search": 205, "supplement_a_subspac": 205, "dmrankerror": 205, "v_n": 205, "w_r": 205, "w_j": 205, "u_j": 205, "r730": 205, "poly_from_expr": 206, "parallel_poly_from_expr": 206, "exprtool": 206, "gcd_list": 206, "lcm_list": 206, "destruct": 206, "2079": 206, "1401": 206, "2715": 206, "6720": 206, "1092": 206, "gff": 206, "check_sqf": 206, "count_root": 206, "nroot": [206, 228], "maxstep": 206, "cleanup": 206, "73205080756888": 206, "73205080756887729352744634151": 206, "ground_root": 206, "nth_power_roots_poli": 206, "r_g": 206, "_signsimp": 206, "q_n": 206, "is_zero_dimension": [206, 229], "donal": 206, "230": [206, 228], "ec": 206, "em": 206, "di": 206, "dispersionset": 206, "gp": [206, 226], "free_symbols_in_domain": 206, "from_poli": 206, "get_domain": 206, "get_modulu": 206, "has_only_gen": 206, "vincent": [206, 248], "akrita": 206, "strzebonski": 206, "va": 206, "alkiviadi": 206, "panagioti": 206, "vigkla": 206, "265": 206, "279": 206, "polnomi": 206, "is_multivari": 206, "is_univari": 206, "ltrim": 206, "_only_": 206, "sturmian": 206, "subresultants_qq_zz": 206, "suffix": [206, 243], "_pg": 206, "_amv": 206, "rem_z": 206, "premultipli": 206, "rat_clear_denom": 206, "_ignor": 206, "retract": 206, "same_root": 206, "set_domain": 206, "set_modulu": 206, "termwis": 206, "fglm": 206, "r731": 206, "horner_schem": 206, "equispac": 206, "viet": 206, "itermonomi": 206, "min_degre": 206, "gib": 206, "monomial_kei": 206, "monomial_count": 206, "gradedlexord": 206, "reversedgradedlexord": 206, "clear_cach": 206, "_get_interv": 206, "165": [206, 230, 248], "169": 206, "eval_approx": 206, "evalf_r": 206, "eval_r": 206, "69629": 206, "71318": 206, "805": 206, "3275": 206, "65536": [206, 209, 210], "414645": 206, "131072": 206, "6545": 206, "104755": 206, "2097152": 206, "6634255": 206, "_all_root": 206, "use_cach": 206, "_complexes_index": 206, "_complexes_sort": 206, "_count_root": 206, "_ensure_complexes_init": 206, "_ensure_reals_init": 206, "_eval_is_imaginari": 206, "_get_complex": 206, "_get_complexes_sqf": 206, "currentfactor": 206, "_get_real": 206, "_get_reals_sqf": 206, "_get_root": 206, "_indexed_root": 206, "_new": 206, "_postprocess_root": 206, "_preprocess_root": 206, "heroic": [206, 228], "_real_root": 206, "_reals_index": 206, "_reals_sort": 206, "_refine_complex": 206, "_roots_trivi": 206, "_set_interv": 206, "861136": 206, "86113631159405258": 206, "polyroot": 206, "unread": [206, 246], "casu": 206, "irreducibili": 206, "inexpress": 206, "unsolv": [206, 229], "r732": 206, "cubic_funct": 206, "trigonometric_": 206, "28and_hyperbol": 206, "29_method": 206, "specialpoli": 206, "swinnerton_dyer_poli": 206, "swinnerton": 206, "dyer": 206, "symmetric_poli": 206, "random_poli": 206, "gegenbau": [206, 210], "jakob": 206, "psum": 206, "3144337": 206, "r733": 206, "bernoulli_c_poli": 206, "reindex": 206, "swiss": 206, "knife": 206, "630": 206, "5124": 206, "12465": 206, "155": 206, "r734": 206, "partfrac": [206, 212], "undertermin": 206, "_w": [206, 217], "apart_list": 206, "assemble_partfrac_list": 206, "bunch": 206, "pfd": 206, "r735": 206, "partial_list": 206, "reassembl": 206, "pfda": 206, "r736": 206, "r737": 206, "r738": 206, "r739": 206, "r740": 206, "r741": 206, "r742": 206, "r743": 206, "widen": 207, "ring_seri": 207, "rs_sin": 207, "166666666666667": 207, "puiseux": 207, "rs_co": 207, "rs_tan": 207, "took": [207, 219], "eleg": [207, 209], "rs_exp": 207, "everyon": 207, "blazingli": 207, "promin": 207, "gradual": 207, "rs_": 207, "rs_log": 207, "rs_lambertw": 207, "rs_atan": 207, "arctang": 207, "rs_asin": 207, "_tan1": 207, "rs_cot": 207, "rs_cos_sin": 207, "rs_atanh": 207, "rs_sinh": 207, "rs_cosh": 207, "rs_tanh": 207, "rs_hadamard_exp": 207, "inver": 207, "rs_mul": 207, "rs_squar": 207, "rs_pow": 207, "rs_series_invers": 207, "rs_series_revers": 207, "a_kx_k": 207, "ar_i": 207, "ar_": 207, "ae": 207, "rs_trunc": 207, "rs_nth_root": 207, "160249952256379": 207, "44224957030741": 207, "rs_sub": 207, "rs_diff": 207, "rs_integr": 207, "rs_newton": 207, "rs_compose_add": 207, "r744": 207, "bostan": 207, "flajolet": 207, "schost": 207, "4579": 207, "institut": 207, "nation": 207, "recherch": 207, "informatiqu": 207, "automatiqu": 207, "rs_is_puiseux": 207, "rs_puiseux": 207, "rs_puiseux2": 207, "rs_series_from_list": 207, "concur": 207, "rs_fun": 207, "_tan": 207, "_nth": 207, "_root": 207, "_fun": 207, "mul_xin": 207, "pow_xin": 207, "_raw": 208, "sympy_eqs_to_r": 208, "eqs_r": 208, "eqs_to_matrix": 208, "eqs_coeff": 208, "eqs_rh": 208, "_solve_lin_si": 208, "_solve_lin_sys_compon": 208, "critiqu": 209, "wester1999": 209, "systemat": 209, "153": 209, "\u2124": [209, 210, 229, 288], "unm": 209, "driver": [210, 242], "adequ": 210, "emptyprint": 210, "_sympystr": 210, "mathml": 210, "inconveni": 210, "_print_": 210, "expr_class": 210, "hierarchi": [210, 230], "_print_rat": 210, "_print_numb": 210, "_print_atom": 210, "_print_bas": 210, "print_latex": 210, "mylatexprint": 210, "_print_deriv": 210, "print_my_latex": 210, "modop": 210, "subcompon": 210, "outermost": [210, 218, 222, 234], "modopmodewrong": 210, "modopnestedwrong": 210, "modopsettingswrong": 210, "subobject": 210, "infrastructur": [210, 227], "printer_exampl": 210, "set_global_set": 210, "stringpict": 210, "pretty_symbologi": 210, "prettyform": 210, "hline": 210, "vline": 210, "ascii": 210, "_pretti": 210, "use_unicode_sqrt_char": 210, "root_not": 210, "mat_symbol_styl": 210, "prettifi": 210, "bold": 210, "c89codeprint": 210, "print_ccod": 210, "tgamma": 210, "known_functions_c89": 210, "known_functions_c99": 210, "fmax": 210, "fmin": 210, "lgamma": 210, "indent_cod": 210, "cfunction_format": 210, "derefer": 210, "dereferenc": 210, "symbols_to_declar": 210, "not_supported_funct": 210, "code_text": 210, "m_sqrt2": 210, "math_macro": 210, "m_sqrt2l": 210, "cxx": 210, "cxx98codeprint": 210, "print_rcod": 210, "rcode": 210, "known_funct": 210, "_rcode": 210, "rfunction_str": 210, "rfunction_format": 210, "ifels": 210, "type_map": 210, "name_mangl": 210, "mangl": 210, "floor1": 210, "floor2": 210, "print_fcod": 210, "_fcode": 210, "conjg": 210, "32768": 210, "7182818284590452d0": 210, "1415926535897932d0": 210, "718281828459045235360287d0": 210, "141592653589793238462643d0": 210, "869604401089358618834491d0": 210, "mygamma": 210, "allow_unknown_funct": 210, "smtlib": 210, "smtlibprint": 210, "symbol_t": 210, "_smtlib": 210, "_default_set": 210, "known_const": 210, "ite": 210, "known_typ": 210, "smtlib_cod": 210, "auto_assert": 210, "auto_declar": 210, "prefix_express": 210, "suffix_express": 210, "log_warn": 210, "booleanfunct": 210, "dreal": 210, "14159": 210, "my_smt_variable_for_pi": 210, "postfix": [210, 248], "riski": 210, "sound": [210, 287], "noop": 210, "pw": 210, "pythontyp": 210, "smt_builtin_func": 210, "existing_smtlib_fcn": 210, "user_def_func": 210, "fun": [210, 227, 280], "coshintegr": 210, "cosintegr": 210, "expintegralei": 210, "factorialpow": 210, "heavisidetheta": 210, "sinhintegr": 210, "sinintegr": 210, "arccosh": 210, "arccoth": 210, "arcsinh": 210, "arctanh": 210, "dirichleteta": 210, "gegenbauerc": 210, "hypergeometricpfq": 210, "sphericalbesselj": 210, "logintegr": 210, "lucasl": 210, "mathieu": 210, "riemann_xi": 210, "riemannxi": 210, "stieltjesgamma": 210, "sphericalbess": 210, "mcodeprint": 210, "_mcode": 210, "mcode": 210, "maplecodeprint": 210, "_mapl": 210, "maple_cod": 210, "print_maple_cod": 210, "javascriptcodeprint": 210, "_javascript": 210, "js_function_str": 210, "known_fcns_src1": 210, "known_fcns_src2": 210, "conj": 210, "juliacodeprint": 210, "_julia": 210, "harmless": [210, 283], "cosmet": 210, "existing_julia_fcn": 210, "coshint": 210, "cosint": 210, "sinhint": 210, "sinint": 210, "bincoeff": 210, "logint": 210, "gammaln": 210, "octavecodeprint": 210, "_octav": 210, "recip": [210, 248], "powf": 210, "signum": 210, "rustcodeprint": 210, "_rust_cod": 210, "7_f64": 210, "_aesara": 210, "tensorvari": 210, "floatx": 210, "squeez": 210, "dim_handl": 210, "gtkmathview": 210, "widget": 210, "print_gtk": 210, "libgtkmathview": 210, "start_view": 210, "_lambdacod": 210, "accepted_latex_funct": 210, "parenthesize_sup": 210, "fold_frac_pow": 210, "fold_func_bracket": 210, "fold_short_frac": 210, "inv_trig_styl": 210, "itex": 210, "ln_notat": 210, "long_frac_ratio": 210, "mat_delim": 210, "mat_str": 210, "mul_symbol": 210, "symbol_nam": 210, "gothic_re_im": 210, "decimal_separ": 210, "diff_oper": 210, "smallmatrix": [210, 281], "amsmath": 210, "fracton": 210, "semicolon": 210, "monospac": 210, "mathtt": 210, "mathml2": 210, "mathmlprinterbas": 210, "mathmlcontentprint": 210, "mathmlpresentationprint": 210, "chapter4": 210, "_mathml_cont": 210, "mathml_tag": 210, "chapter3": 210, "_mathml_present": 210, "utf": 210, "mul_symbol_mathml_numb": 210, "xb7": 210, "print_mathml": [210, 286], "mrow": 210, "mpmathprint": 210, "fully_qualified_modul": 210, "print_python": 210, "textual": 210, "reprprint": 210, "_sympyrepr": 210, "reprifi": 210, "sympy_integ": 210, "displayhook": [210, 241], "pprint_nod": 210, "nb2": 210, "print_nod": 210, "asssumpt": 210, "determinisit": 210, "backtrac": 210, "print_tre": 210, "outputbuff": 210, "dvioption": 210, "outputtexfil": 210, "extra_preambl": 210, "latex_set": 210, "postscript": 210, "tex": 210, "eulervm": 210, "sty": 210, "debian": 210, "ubuntu": 210, "unset": [210, 222], "gimp": 210, "evinc": 210, "kdvi": 210, "xdvi": 210, "xdg": 210, "system_default_view": 210, "gracefulli": [210, 234], "bytesio": 210, "usepackag": 210, "amsfont": 210, "renewcommand": 210, "popen": 210, "phidd": 210, "bitmap": 210, "split_super_sub": 210, "var_sub1__sup_sub2": 210, "assignmenterror": 210, "bitwiseand": 210, "bitwiseor": 210, "bitwisexor": 210, "precedence_valu": 210, "kroneckerproduct": 210, "tensadd": [210, 236], "tensmul": [210, 236], "precedence_funct": 210, "precedence_float": 210, "precedence_fracel": 210, "precedence_integ": 210, "precedence_mul": 210, "precedence_polyel": 210, "precedence_r": 210, "precedence_unevaluatedexpr": 210, "databas": [210, 220], "pretty_use_unicod": 210, "pretty_try_use_unicod": 210, "xstr": 210, "greek_lett": 210, "digit_2txt": 210, "ONE": 210, "seven": 210, "symb_2txt": 210, "parenthesi": [210, 234], "\u2080": 210, "\u2081": 210, "\u2082": 210, "\u2084": 210, "\u2085": 210, "\u2086": 210, "\u2087": 210, "\u2088": 210, "\u2089": 210, "\u2090": 210, "\u1d66": 210, "\u1d6a": 210, "\u2091": 210, "\u1d67": 210, "\u2095": 210, "\u1d62": 210, "\u2096": 210, "\u2097": 210, "\u2098": 210, "\u2099": 210, "\u2092": 210, "\u209a": 210, "\u1d69": 210, "\u1d63": 210, "\u1d68": 210, "\u209b": 210, "\u209c": 210, "\u1d64": 210, "\u1d65": 210, "\u2093": 210, "\u2070": 210, "\u00b9": 210, "\u00b2": 210, "\u00b3": 210, "\u2074": 210, "\u2075": 210, "\u2076": 210, "\u2077": 210, "\u2078": 210, "\u2079": 210, "\u2071": 210, "\u207f": 210, "xobj": 210, "vobj": 210, "hobj": 210, "vf": 210, "\u00bd": 210, "\u2153": 210, "\u00bc": 210, "\u2155": 210, "\u2159": 210, "\u215b": 210, "\u2154": 210, "\u2156": 210, "\u00be": 210, "\u2157": 210, "\u215c": 210, "\u2158": 210, "\u215a": 210, "\u215d": 210, "\u215e": 210, "xsym": 210, "symbologi": 210, "atoms_t": 210, "\u2102": [210, 288], "emptysequ": [210, 216], "\u2115": 210, "\u2115\u2080": 210, "\u211d": [210, 288], "symmetricdiffer": [210, 218, 229], "pretty_atom": 210, "atom_nam": 210, "pretty_symbol": 210, "symb_nam": 210, "bold_nam": 210, "stylis": 210, "_print_meijerg": 210, "_print_hyp": 210, "jurjen": 210, "bo": 210, "hate": 210, "spammer": 210, "pietjepuk314": 210, "oc": [210, 261], "oohai": 210, "gedg": 210, "email": 210, "mun": 210, "terminal_str": 210, "baselin": 210, "leftslash": 210, "slash": [210, 241], "paren": 210, "ifascii_nougli": 210, "line_break": 210, "ugli": 210, "terminal_width": 210, "wider": 210, "maxdepth": 210, "labelfunc": 210, "digraph": [210, 248, 286], "rankdir": [210, 286], "_sparse_": 211, "flavor": 211, "________": [211, 230, 248], "x\u2080": 211, "greatli": 211, "numbered_symbol": [211, 222, 226, 248], "postprocessor": [211, 222], "reduced_expr": [211, 222], "formalpowerseri": 212, "coeff_bel": 212, "formalpowerseriescompos": 212, "r745": 212, "comtet": 212, "loui": 212, "reidel": 212, "1974": 212, "720": [212, 226, 248], "formalpowerseriesinvers": 212, "r746": 212, "upto": [212, 217, 226], "formalpowerseriesproduct": 212, "rational_algorithm": 212, "compute_fp": 212, "hyper_algorithm": 212, "omposit": 212, "bell_seq": 212, "finiteformalpowerseri": 212, "rational_independ": 212, "ra": 212, "admiss": [212, 215], "r747": 212, "r748": 212, "simpled": 212, "exp_r": 212, "explik": 212, "hyper_r": 212, "rsolve_hypergeometr": 212, "r749": 212, "r750": 212, "solve_d": 212, "fourierseri": 213, "scalex": 213, "shiftx": 213, "sigma_approxim": 213, "gibb": 213, "bigl": 213, "bigr": 213, "lanczo": 213, "r751": 213, "gibbs_phenomenon": 213, "r752": 213, "sawtooth": 213, "bn": 213, "r753": 213, "limitseq": 215, "difference_delta": 215, "r754": 215, "differencedelta": 215, "limit_seq": [215, 217], "safeguard": 215, "r755": 215, "kauer": 215, "seqper": 216, "seqformula": 216, "seqbas": 216, "coeff_mul": 216, "find_linear_recurr": 216, "gfvar": 216, "seqadd": 216, "seqmul": 216, "_mul": 216, "recursiveseq": 216, "fib": 216, "invok": [217, 241, 242], "workhors": 217, "succ": [217, 230], "asymp": 217, "exposit": 217, "gloss": 217, "wsym": 217, "test_rewrite1": 217, "build_expression_tre": 217, "mrv_leadterm": 217, "e0": 217, "calculate_seri": 217, "limitinf": 217, "constantli": 217, "subsset": 217, "mrv_max1": 217, "mrv_max3": 217, "expsf": 217, "expsg": 217, "expsboth": 217, "o2": 217, "do_sub": 217, "r756": 217, "limsup_": 217, "7048138294": 217, "7182818285": 217, "6349839002": 217, "6449340668": 217, "shank": 217, "6881721793": 217, "6931396564": 217, "6931471806": 217, "6931471805599453094172321215": 217, "r757": 217, "residue_theorem": 217, "neighborhood": 218, "rim": 218, "conditionset": [218, 229, 230, 288], "affirm": 218, "infimum": 218, "imageset": [218, 229, 288], "is_clos": 218, "closed": 218, "is_disjoint": 218, "r758": 218, "disjoint_set": 218, "is_open": 218, "is_proper_subset": 218, "is_proper_superset": 218, "left_open": 218, "is_superset": 218, "isdisjoint": 218, "issubset": 218, "issuperset": 218, "productset": [218, 229], "powerset": 218, "fancyset": 218, "complexregion": [218, 229], "disjointunion": 218, "lebesgu": 218, "r759": 218, "power_set": 218, "symmetric_differ": 218, "r760": 218, "right_open": 218, "mpi": 218, "r761": 218, "interval_": 218, "as_rel": 218, "is_left_unbound": 218, "is_right_unbound": 218, "r762": 218, "r763": 218, "union_": 218, "28set_theori": 218, "r764": 218, "intersection_": 218, "coin": [218, 230], "r765": 218, "cartesian_product": 218, "is_iter": 218, "r766": 218, "complementset": 218, "r767": 218, "disjoint_union": 218, "r768": 218, "empty_set": 218, "r769": 218, "universal_set": 218, "flambda": 218, "square_iter": 218, "base_set": 218, "cartesiancomplexregion": 218, "polarcomplexregion": 218, "unit_disk": 218, "upper_half_unit_disk": 218, "a_interv": 218, "b_interv": 218, "from_real": 218, "pset": 218, "rset": 218, "thetaset": 218, "upper_half_plan": 218, "normalize_theta_set": 218, "r770": 218, "r771": 218, "axiom_of_power_set": 218, "sin_sol": 218, "r772": 218, "element_": 218, "varnoth": 218, "tr0": 219, "tr1": 219, "tr2": 219, "tr2i": 219, "tr3": 219, "tr4": 219, "tr5": 219, "tr6": 219, "tr7": 219, "tr8": 219, "tr9": 219, "tr10": 219, "tr10i": 219, "tr11": 219, "tr12": 219, "tr12i": 219, "tr13": 219, "trmorri": 219, "tr14": 219, "tr15": 219, "tr16": 219, "tr22": 219, "tr111": 219, "ctr1": 219, "ctr4": 219, "rl1": 219, "rl2": 219, "deem": 219, "932": 219, "016": 219, "serendipit": 219, "dead": 219, "newa": 219, "lucki": 219, "sqt": 219, "_tr56": 219, "un": [219, 220], "r773": 219, "morri": 219, "27s_law": 219, "trpower": 219, "r774": 219, "list_of_trigonometric_ident": 219, "reduction_formula": 219, "ctr2": 219, "ctr3": 219, "r775": 219, "s0895717706001609": 219, "dimitar": 219, "vlahovski": 219, "technolog": 219, "xiuqin": 219, "zhong": 219, "zhenb": 219, "zeng": 219, "1169": 219, "1177": 219, "657": 219, "2478": 219, "sosmath": 219, "trig5": 219, "symplifi": [220, 222], "roach1996": 220, "roach1997": 220, "p_q": 220, "reachabl": [220, 230], "f_q": 220, "undo": [220, 287], "whenc": 220, "game": 220, "twofold": 220, "incongru": 220, "wlog": 220, "alpha_r": 220, "beta_r": 220, "blindli": 220, "messi": 220, "k_u": 220, "l_v": 220, "k_j": 220, "c_w": 220, "r_j": 220, "l_u": 220, "res_": 220, "delta_i": 220, "add_formula": 220, "addb": 220, "sum_0": 220, "test_hyperexpand": 220, "test_formula": 220, "typo": 220, "suboptim": 220, "imath": 220, "b1prime": 220, "vital": [220, 230], "308": 220, "hongguang": [221, 267], "fu": [221, 222, 267], "unmodifi": 222, "my_measur": 222, "nthroot": 222, "max_len": 222, "surd": 222, "kroneckersimp": 222, "besselsimp": 222, "strigonometr": 222, "399": 222, "hypersimilar": 222, "rational_convers": 222, "base10": 222, "6004799503160655": 222, "eq_x": 222, "max_term": 222, "collect_sqrt": 222, "polish": 222, "rad_ration": 222, "collect_const": 222, "rcollect": 222, "analyz": [222, 235], "ratsimpmodprim": 222, "r776": 222, "pearc": 222, "1145": 222, "1145768": 222, "1145809": 222, "trigsimp_groebn": 222, "bb1": 222, "be1": 222, "bb2": 222, "be2": 222, "bei": 222, "sqrtdenest": 222, "max_it": 222, "unrad": [222, 228], "r777": 222, "ibm": 222, "fagin": 222, "symb85": 222, "r778": 222, "cybertest": 222, "opt_sub": 222, "as_unevaluated_bas": 222, "tree_cs": 222, "hyperegeometr": 222, "epathtool": 222, "epath": 222, "ebnf": 222, "za": [222, 230], "xml": 222, "xpath": 222, "hasattr": [222, 244], "beginn": [223, 225, 226, 228, 229, 288], "diophantu": 223, "mathematician": [223, 229], "citi": 223, "alexandria": 223, "father": 223, "hi": 223, "arithmetica": 223, "diop_solv": 223, "classify_diop": 223, "diop_linear": 223, "diop_quadrat": 223, "diop_ternary_quadrat": 223, "diop_ternary_quadratic_norm": 223, "diop_general_pythagorean": 223, "diop_general_sum_of_squar": 223, "diop_general_sum_of_even_pow": 223, "merge_solut": 223, "3y": 223, "9369318": 223, "find_dn": 223, "diop_dn": 223, "transformation_to_dn": 223, "920": 223, "5y": 223, "BY": 223, "transformation_to_norm": 223, "t4": 223, "t5": 223, "sum_of_squar": 223, "providean": 223, "eqyptian": 223, "thilinaatsympi": 223, "andreescu": 223, "titu": 223, "andrica": 223, "dorin": 223, "cucurezeanu": 223, "ion": 223, "diophantineequ": 223, "alpertron": 223, "20160323033111": 223, "jpr2718": 223, "ax2p": 223, "permute_sign": [223, 248], "signed_permut": [223, 248], "_dict": 223, "base_solution_linear": 223, "r779": 223, "r780": 223, "pell": 223, "lmm": 223, "r781": 223, "393": 223, "13y": 223, "986": 223, "49299": 223, "1570": 223, "diop_bf_dn": 223, "robertson": 223, "20160323033128": 223, "cornacchia": 223, "r782": 223, "nitaj": 223, "r783": 223, "numbertheori": 223, "r784": 223, "r785": 223, "676": 223, "884": 223, "fxz": 223, "3xy": 223, "r786": 223, "fxy": 223, "gyz": 223, "hxz": 223, "r787": 223, "cremona": 223, "rusin": 223, "2x_": 223, "m4": 223, "general_sum_of_squar": 223, "8m": 223, "r788": 223, "2345": 223, "proofwiki": 223, "integer_as_sum_of_three_squar": 223, "general_sum_of_even_pow": 223, "power_represent": 223, "1729": 223, "stopiter": 223, "sum_of_three_squar": 223, "r789": 223, "44542": 223, "207": 223, "schorn": 223, "sum_of_four_squar": 223, "3456": 223, "1294585930293": 223, "2161": 223, "1137796": 223, "r790": 223, "sum_of_pow": 223, "evenli": 223, "var_t": 223, "pqa": 223, "r791": 223, "ur": 223, "dv": 223, "vr": 223, "r792": 223, "parametrize_ternary_quadrat": 223, "r793": 223, "nigel": 223, "ldescent": 223, "4x": [223, 229, 276], "7y": 223, "5x": 223, "r794": 223, "r795": 223, "nottingham": 223, "worktrib": 223, "1023265": 223, "gaussian_reduc": 223, "r796": 223, "cuhk": 223, "hk": 223, "wkshum": 223, "404": 223, "r797": 223, "holzer": 223, "mordel": 223, "r798": 223, "r799": 223, "prime_as_sum_of_two_squar": 223, "r800": 223, "sqf_normal": 223, "r801": 223, "legrang": 223, "csusm": 223, "aitken_html": 223, "diophantinesolutionset": 223, "symbols_seq": 223, "dict_iter": 223, "diophantineequationtyp": 223, "binaryquadrat": 223, "r802": 223, "r803": 223, "inhomogeneousternaryquadrat": 223, "inhomogen": [223, 226, 228], "homogeneousternaryquadraticnorm": 223, "homogeneousternaryquadrat": 223, "inhomogeneousgeneralquadrat": 223, "homogeneousgeneralquadrat": 223, "generalsumofsquar": 223, "r804": 223, "generalpythagorean": 223, "cubicthu": 223, "thue": 223, "generalsumofevenpow": 223, "pde": [224, 226, 267], "subcategori": [225, 266], "solve_rational_inequ": 225, "solve_poly_inequ": 225, "reduce_rational_inequ": 225, "reduce_abs_inequ": 225, "solvifi": [225, 229], "autodetect": [226, 227], "odesimp": 226, "ode_ord": [226, 227, 228], "deutil": [226, 227], "best_hint": 226, "unevaluat": 226, "test_od": 226, "ode_": 226, "hintnam": [226, 227], "classify_sysod": 226, "almost_linear": 226, "dsolve_system": 226, "ode_hintnam": 226, "allhint": [226, 227], "tough": 226, "nth_linear_homogeneous_constant_coeff_integr": 226, "1st_linear": 226, "nth_linear": 226, "indep": 226, "indep_div_dep": 226, "undetermined_coeffici": 226, "_best": 226, "nth_algebra": 226, "1st_homogeneous_coeff_best": 226, "1st_homogeneous_coeff_subs_indep_div_dep": 226, "1st_homogeneous_coeff_subs_dep_div_indep": 226, "1st_power_seri": 226, "lie_group": 226, "nth_linear_constant_coeff_homogen": 226, "nth_linear_euler_eq_homogen": 226, "nth_algebraic_integr": 226, "1st_exact_integr": 226, "1st_linear_integr": 226, "bernoulli_integr": 226, "1st_homogeneous_coeff_subs_indep_div_dep_integr": 226, "1st_homogeneous_coeff_subs_dep_div_indep_integr": 226, "nth_linear_constant_coeff_undetermined_coeffici": 226, "nth_linear_constant_coeff_variation_of_paramet": 226, "nth_linear_constant_coeff_variation_of_parameters_integr": 226, "solve_for_func": [226, 227], "homogeneouscoeffsubsdepdivindep": 226, "homogeneouscoeffsubsindepdivdep": 226, "varepsilon": 226, "genform": [226, 227], "starrett": 226, "checkinfsol": 226, "constantsimp": 226, "symbolnam": 226, "startnumb": 226, "endnumb": 226, "renumb": 226, "absorpt": 226, "assist": 226, "constant_renumb": 226, "1st_rational_riccati": 226, "riccati_special_minus2": 226, "linear_coeffici": 226, "separable_reduc": 226, "nth_linear_euler_eq_nonhomogeneous_undetermined_coeffici": 226, "nth_linear_euler_eq_nonhomogeneous_variation_of_paramet": 226, "liouvil": 226, "2nd_linear_airi": 226, "2nd_linear_bessel": 226, "2nd_hypergeometr": 226, "2nd_hypergeometric_integr": 226, "nth_order_reduc": 226, "2nd_power_series_ordinari": 226, "2nd_power_series_regular": 226, "almost_linear_integr": 226, "linear_coefficients_integr": 226, "separable_reduced_integr": 226, "nth_linear_euler_eq_nonhomogeneous_variation_of_parameters_integr": 226, "liouville_integr": 226, "2nd_nonlinear_autonomous_conserv": 226, "2nd_nonlinear_autonomous_conserved_integr": 226, "newconst": 226, "ode_sol_simpl": 226, "trysolv": 226, "sola": 226, "solb": 226, "listofsolut": 226, "ode_problem": 226, "firstexact": 226, "exact_differential_equ": 226, "tenenbaum": 226, "dover": 226, "1963": 226, "homogeneouscoeffbest": 226, "ode_1st_homogeneous_coeff_best_integr": 226, "homogeneous_differential_equ": 226, "firstlinear": 226, "linear_differential_equ": 226, "first_order_equ": 226, "rationalriccati": 226, "atleast": 226, "riccati_equ": 226, "thieu": 226, "vo": 226, "www3": [226, 255], "risc_5387": 226, "phdthesisthieu": 226, "secondlinearairi": 226, "secondlinearbessel": 226, "math24": 226, "bernoulli_differential_equ": 226, "goldstein": 226, "braun": 226, "maplesoft": 226, "aspx": 226, "odeadvisor": 226, "riccatispeci": 226, "__________________": 226, "eqworld": 226, "ipmnet": 226, "ru": 226, "ode0106": 226, "ode0123": 226, "nthlinearconstantcoeffhomogen": 226, "nth_linear_constant_coeff_homogeneous_integr": 226, "nonhomogeneous_equation_with_constant_coeffici": 226, "nthlinearconstantcoeffundeterminedcoeffici": 226, "method_of_undetermined_coeffici": 226, "221": 226, "nthlinearconstantcoeffvariationofparamet": 226, "cramer": 226, "variation_of_paramet": 226, "planetmath": 226, "variationofparamet": 226, "nthlineareulereqhomogen": 226, "equidimension": 226, "nth_linear_euler_eq_homogeneous_integr": 226, "sollist": 226, "93euler_equ": 226, "bender": 226, "orszag": 226, "scientist": 226, "nthlineareulereqnonhomogeneousvariationofparamet": 226, "nthlineareulereqnonhomogeneousundeterminedcoeffici": 226, "nthalgebra": 226, "nthorderreduc": 226, "caught": 226, "fault": 226, "almostlinear": 226, "first_linear": 226, "joel": 226, "mose": 226, "stormi": 226, "decad": 226, "august": [226, 245], "558": 226, "linearcoeffici": 226, "separablereduc": 226, "liegroup": 226, "secondhypergeometr": 226, "2f1": 226, "1f1": 226, "0f1": 226, "liouvillian": 226, "pfq": 226, "chan": 226, "cheb": 226, "terrab": 226, "ode_1st_power_seri": 226, "travi": 226, "walker": 226, "ode_2nd_power_series_ordinari": 226, "lamar": 226, "seriessolut": 226, "simmon": 226, "176": 226, "ode_2nd_power_series_regular": 226, "lie_heuristic_abaco1_simpl": 226, "duart": 226, "da": 226, "mota": 226, "lie_heuristic_abaco1_product": 226, "roch": 226, "lie_heuristic_bivari": 226, "329": 226, "lie_heuristic_chi": 226, "lie_heuristic_abaco2_similar": 226, "lie_heuristic_function_sum": 226, "lie_heuristic_abaco2_unique_unknown": 226, "lie_heuristic_abaco2_unique_gener": 226, "lie_heuristic_linear": 226, "gy": 226, "bh": 226, "impract": 226, "riccati_norm": 226, "riccati_inverse_norm": 226, "riccati_reduc": 226, "construct_c": 226, "construct_d": 226, "val_inf": 226, "valuat": 226, "rational_laurent_seri": 226, "compute_m_ybar": 226, "ybar": 226, "solve_aux_eq": 226, "numa": 226, "dena": 226, "numi": 226, "deni": 226, "remove_redundant_sol": 226, "sol1": 226, "sol2": 226, "get_gen_sol_from_part_sol": 226, "part_sol": 226, "haaheim": 226, "solve_riccati": 226, "gensol": 226, "_linear_2eq_order1_type6": 226, "_linear_2eq_order1_type7": 226, "fgp": 226, "ag": 226, "bg": 226, "linear_ode_to_matrix": 226, "odeordererror": 226, "odenonlinearerror": 226, "eqs_mat": 226, "r805": 226, "matrix_differential_equ": 226, "canonical_od": 226, "canonical_eq": 226, "canonical_system": 226, "linodesolve_typ": 226, "linodesolv": 226, "type1": 226, "type2": 226, "type3": 226, "type4": 226, "type5": 226, "type6": 226, "type_of_equ": 226, "a_t": 226, "a_non_commut": 226, "matrix_exp_jordan_form": 226, "expj": 226, "matrix_exp": 226, "defect": 226, "p_invers": 226, "r806": 226, "defective_matrix": 226, "r807": 226, "r808": 226, "jordan_normal_form": 226, "comupt": 226, "r809": 226, "r810": 226, "matrix_exponenti": 226, "antiderv": 226, "subscheck": 226, "system_info": 226, "sol_vector": 226, "sol_vector_evalu": 226, "_nonlinear_2eq_order1_type1": 226, "_nonlinear_2eq_order1_type2": 226, "_nonlinear_2eq_order1_type3": 226, "autonom": 226, "_nonlinear_2eq_order1_type4": 226, "_nonlinear_2eq_order1_type5": 226, "clairaut": 226, "envelop": 226, "_nonlinear_3eq_order1_type1": 226, "enspac": [226, 229], "sysod": 226, "sode0401": 226, "_nonlinear_3eq_order1_type2": 226, "sode0402": 226, "_nonlinear_3eq_order1_type3": 226, "sode0404": 226, "_nonlinear_3eq_order1_type4": 226, "sode0405": 226, "_nonlinear_3eq_order1_type5": 226, "sode0406": 226, "_handle_integr": 226, "gather": 226, "unhind": 226, "wolphramalpha": 226, "detool": 226, "hint_integr": 226, "alphanumer": 226, "hinder": 226, "matching_hint": 226, "matchdict": 226, "1st_homogeneous_coeff": 226, "your_hint": 226, "xfail": [226, 239, 241], "pde_separ": 227, "uxt": 227, "pde_separate_add": 227, "pde_separate_mul": 227, "uxi": 227, "pdsolv": 227, "solvefun": 227, "classify_pd": 227, "test_pd": 227, "pde_hintnam": 227, "ux": 227, "1st_linear_constant_coeff_homogen": 227, "checkpdesol": 227, "_preprocess": 227, "inabl": 227, "_xi_1": 227, "pde_1st_linear_constant_coeff_homogen": 227, "viktor": 227, "grigoryan": 227, "124a": 227, "pde_1st_linear_constant_coeff": 227, "substack": 227, "1st_linear_constant_coeff_integr": 227, "pde_1st_linear_variable_coeff": 227, "du": 227, "inspir": [227, 283], "pde_hint": 227, "checksol": 228, "ect": 228, "attain": [228, 260], "star": 228, "052": 228, "cov": 228, "pval": 228, "xval": 228, "rsolv": 228, "solve_linear": 228, "solve_linear_system": 228, "msymbol": 228, "degener": [228, 229], "solve_linear_system_lu": 228, "solve_undetermined_coeff": 228, "equ": 228, "73908513321516064165531208767387340401341175890076": 228, "steep": 228, "39267e": 228, "1684e": 228, "588469032184": 228, "315": 228, "730061685774": 228, "46792545969349058": 228, "inconclus": 228, "init": 228, "dissimilar": 228, "v_0": 228, "n_m": 228, "v_m": 228, "rsolve_poli": 228, "rsolve_ratio": 228, "r811": 228, "levelt": 228, "290": [228, 258], "296": 228, "r812": 228, "r813": 228, "revis": 228, "r814": 228, "289": 228, "alembertian": 228, "r815": 228, "r816": 228, "polysi": 228, "solve_triangul": 228, "kalkbrenn": 228, "patrizia": 228, "teo": 228, "aaecc": 228, "argand": 229, "uncount": 229, "bizarr": 229, "her": 229, "sol_f": 229, "solveset_r": 229, "solveset_complex": 229, "methodologi": [229, 280], "_solve_real_trig": 229, "invert_r": 229, "invert_complex": 229, "_solve_rad": 229, "_solve_ab": 229, "_solve_as_r": 229, "_solve_as_poly_r": 229, "_solve_as_poly_complex": 229, "_solve_as_poli": 229, "gsoc": 229, "2014": [229, 230], "iamit": 229, "2948": 229, "6659": 229, "7523": 229, "sibx0afl3q": 229, "9696": 229, "27s_theorem": 229, "inftyright": 229, "nright": 229, "0right": 229, "domain_check": 229, "3z": 229, "9z": 229, "nonlinearerror": 229, "cccc": 229, "eq3": 229, "eq4": 229, "391": 229, "_solve_system": 229, "_solve_using_known_valu": 229, "_transolv": 229, "_tsolv": 229, "tsolv": 229, "outright": 229, "interf": 229, "add_typ": 229, "_is_exponenti": 229, "new_eq": 229, "_solve_exponenti": 229, "_is_class": 229, "_solve_class": 229, "_solve_expo": 229, "9x": 229, "solve_expo": 229, "log_b": 229, "_solve_logarithm": 229, "solve_log": 229, "_is_logarithm": 229, "prebuilt": 230, "finiterv": 230, "varianc": 230, "dice": 230, "continuousrv": 230, "continuousdistributionhandmad": 230, "dist": 230, "discreterv": 230, "discretedistributionhandmad": 230, "pmf": 230, "finitedistributionhandmad": 230, "discreteuniform": 230, "randomsymbol": 230, "r817": 230, "discrete_uniform_distribut": 230, "r818": 230, "discreteuniformdistribut": 230, "d6": 230, "diedistribut": 230, "toss": 230, "r819": 230, "bernoulli_distribut": 230, "r820": 230, "bernoullidistribut": 230, "unfair": 230, "r821": 230, "coin_flip": 230, "binomialdistribut": 230, "r822": 230, "binomial_distribut": 230, "r823": 230, "betabinomi": 230, "r824": 230, "r825": 230, "betabinomialdistribut": 230, "popul": 230, "marbl": 230, "r826": 230, "hypergeometric_distribut": 230, "r827": 230, "hypergeometricdistribut": 230, "700000000000000": 230, "r828": 230, "rademacher_distribut": 230, "r829": 230, "geometric_distribut": 230, "r830": 230, "geometricdistribut": 230, "r831": 230, "hermite_distribut": 230, "poisson": 230, "r832": 230, "poisson_distribut": 230, "r833": 230, "poissondistribut": 230, "r834": 230, "logarithmic_distribut": 230, "r835": 230, "logarithmicdistribut": 230, "negativebinomi": 230, "r836": 230, "negative_binomial_distribut": 230, "r837": 230, "negativebinomialdistribut": 230, "skellam": 230, "mu1": 230, "mu2": 230, "mu_1": 230, "mu_2": 230, "i_k": 230, "r838": 230, "skellam_distribut": 230, "yulesimon": 230, "yule": 230, "simon": 230, "r839": 230, "93simon_distribut": 230, "8100": 230, "r840": 230, "zeta_distribut": 230, "cdf": 230, "r841": 230, "arcsine_distribut": 230, "benini": 230, "r842": 230, "benini_distribut": 230, "r843": 230, "v8": 230, "beninidistribut": 230, "r844": 230, "beta_distribut": 230, "r845": 230, "betadistribut": 230, "betanoncentr": 230, "noncentr": 230, "r846": 230, "noncentral_beta_distribut": 230, "r847": 230, "noncentralbetadistribut": 230, "betaprim": 230, "r848": 230, "beta_prime_distribut": 230, "r849": 230, "betaprimedistribut": 230, "boundedpareto": 230, "pareto": 230, "r850": 230, "pareto_distribut": 230, "bounded_pareto_distribut": 230, "r851": 230, "cauchy_distribut": 230, "r852": 230, "cauchydistribut": 230, "r853": 230, "chi_distribut": 230, "r854": 230, "chidistribut": 230, "chinoncentr": 230, "r855": 230, "noncentral_chi_distribut": 230, "chisquar": 230, "r856": 230, "chi_squared_distribut": 230, "r857": 230, "squareddistribut": 230, "dagum": 230, "r858": 230, "dagum_distribut": 230, "erlang": 230, "r859": 230, "erlang_distribut": 230, "r860": 230, "erlangdistribut": 230, "exgaussian": 230, "emg": 230, "r861": 230, "exponentially_modified_gaussian_distribut": 230, "quantil": 230, "r862": 230, "exponential_distribut": 230, "r863": 230, "exponentialdistribut": 230, "fdistribut": 230, "______________________________": 230, "r864": 230, "r865": 230, "fisherz": 230, "fisher": 230, "2d_1": 230, "d_1z": 230, "d_1e": 230, "r866": 230, "27s_z": 230, "r867": 230, "fishersz": 230, "frechet": 230, "r868": 230, "a9chet_distribut": 230, "r869": 230, "gamma_distribut": 230, "r870": 230, "gammadistribut": 230, "gammainvers": 230, "r871": 230, "gompertz": 230, "r872": 230, "gompertz_distribut": 230, "gumbel": 230, "dfrac": 230, "r873": 230, "gumbeldistribut": 230, "r874": 230, "gumbel_distribut": 230, "r875": 230, "mathwav": 230, "easyfit": 230, "gumbel_max": 230, "r876": 230, "gumbel_min": 230, "kumaraswami": 230, "r877": 230, "kumaraswamy_distribut": 230, "r878": 230, "laplace_distribut": 230, "r879": 230, "laplacedistribut": 230, "r880": 230, "a9vy_distribut": 230, "r881": 230, "levydistribut": 230, "logist": 230, "r882": 230, "logistic_distribut": 230, "r883": 230, "logisticdistribut": 230, "loglogist": 230, "unimod": 230, "r884": 230, "lognorm": 230, "r885": 230, "r886": 230, "lognormaldistribut": 230, "lomax": 230, "r887": 230, "lomax_distribut": 230, "maxwel": 230, "r888": 230, "maxwell_distribut": 230, "r889": 230, "maxwelldistribut": 230, "moyal": 230, "r890": 230, "moyaldistribut": 230, "r891": 230, "rice": 230, "dobelman": 230, "textfil": 230, "distributionshandbook": 230, "nakagami": 230, "r892": 230, "nakagami_distribut": 230, "marginal_distribut": 230, "r893": 230, "normal_distribut": 230, "r894": 230, "normaldistributionfunct": 230, "xm": 230, "x_m": 230, "r895": 230, "r896": 230, "paretodistribut": 230, "powerfunct": 230, "r897": 230, "power_func": 230, "quadraticu": 230, "r898": 230, "quadratic_distribut": 230, "raisedcosin": 230, "r899": 230, "raised_cosine_distribut": 230, "r900": 230, "rayleigh_distribut": 230, "r901": 230, "rayleighdistribut": 230, "r902": 230, "reciprocal_distribut": 230, "studentt": 230, "r903": 230, "student_t": 230, "r904": 230, "studentst": 230, "shiftedgompertz": 230, "r905": 230, "shifted_gompertz_distribut": 230, "r906": 230, "trapezoidal_distribut": 230, "r907": 230, "triangular_distribut": 230, "r908": 230, "triangulardistribut": 230, "r909": 230, "uniform_distribution_": 230, "28continu": 230, "r910": 230, "uniformdistribut": 230, "uniformsum": 230, "irwin": 230, "r911": 230, "uniform_sum_distribut": 230, "r912": 230, "uniformsumdistribut": 230, "vonmis": 230, "mise": 230, "i_0": 230, "r913": 230, "von_mises_distribut": 230, "r914": 230, "vonmisesdistribut": 230, "wald": 230, "gaussianinvers": 230, "r915": 230, "inverse_gaussian_distribut": 230, "r916": 230, "inversegaussiandistribut": 230, "weibul": 230, "geq0": 230, "r917": 230, "weibull_distribut": 230, "r918": 230, "weibulldistribut": 230, "wignersemicircl": 230, "semicircl": 230, "frac2": 230, "r919": 230, "wigner_semicircle_distribut": 230, "r920": 230, "wignerssemicirclelaw": 230, "jointrv": 230, "_set": 230, "multivariatenorm": 230, "noninvert": 230, "ob": 230, "r921": 230, "multivariate_normal_distribut": 230, "multivariatelaplac": 230, "r922": 230, "multivariate_laplace_distribut": 230, "generalizedmultivariateloggamma": 230, "joint_rv_typ": 230, "gd": 230, "y_3": 230, "gmvlg": 230, "generalizedmultivariateloggammaomega": 230, "r923": 230, "generalized_multivariate_log": 230, "r924": 230, "234137346_on_a_multivariate_log": 230, "gamma_distribution_and_the_use_of_the_distribution_in_the_bayesian_analysi": 230, "correl": 230, "gmvlgo": 230, "r925": 230, "r926": 230, "r927": 230, "multinomial_distribut": 230, "r928": 230, "multinomialdistribut": 230, "multivariatebeta": 230, "r929": 230, "dirichlet_distribut": 230, "r930": 230, "dirichletdistribut": 230, "multivariateewen": 230, "ewen": 230, "r931": 230, "27s_sampling_formula": 230, "r932": 230, "rutger": 230, "hcrane": 230, "sts529": 230, "multivariatet": 230, "negativemultinomi": 230, "n_c": 230, "r933": 230, "negative_multinomial_distribut": 230, "r934": 230, "normalgamma": 230, "r935": 230, "discretemarkovchain": 230, "state_spac": 230, "trans_prob": 230, "markov": 230, "characteris": 230, "transitionmatrixof": 230, "transition_prob": 230, "sunni": 230, "cloudi": 230, "raini": 230, "randomindexedsymbol": 230, "409": 230, "6963328": 230, "3096": 230, "query_gt": 230, "64705": 230, "r936": 230, "markov_chain": 230, "time_markov_chain": 230, "r937": 230, "dartmouth": 230, "teaching_aid": 230, "books_articl": 230, "probability_book": 230, "chapter11": 230, "canonical_form": 230, "transient": 230, "p_new": 230, "new_matrix": 230, "communication_class": 230, "r938": 230, "onlinelibrari": 230, "wilei": 230, "1002": 230, "9780470316887": 230, "app1": 230, "r939": 230, "columbia": 230, "ww2040": 230, "6711f12": 230, "lect1023big": 230, "is_recurr": 230, "tarjan": [230, 248], "r940": 230, "4701sum07": 230, "4701": 230, "mcii": 230, "r941": 230, "ceca": 230, "clemson": 230, "shierd": 230, "shier": 230, "r942": 230, "ujcont": 230, "uj": 230, "7506": 230, "content1": 230, "r943": 230, "econ": 230, "dtmc": 230, "reccur": 230, "r944": 230, "absorbing_markov_chain": 230, "r945": 230, "brandei": 230, "igusa": 230, "math56as08": 230, "math56a_s08_notes015": 230, "fixed_row_vector": 230, "stationary_distribut": 230, "fundamental_matrix": 230, "r946": 230, "lip": 230, "limiting_distribut": 230, "condition_set": 230, "wm": 230, "r947": 230, "probabilitycours": 230, "11_2_6_stationary_and_limiting_distribut": 230, "r948": 230, "galton": 230, "uchicago": 230, "yibi": 230, "stat317": 230, "lecture4_6up": 230, "continuousmarkovchain": 230, "gen_mat": 230, "generator_matrix": 230, "45279": 230, "58602": 230, "37933": 230, "34211": 230, "7143": 230, "4002723175": 230, "6832579186": 230, "r949": 230, "r950": 230, "biu": 230, "il": 230, "amirgi": 230, "ctmcnote": 230, "bernoulliprocess": 230, "joint_distribut": 230, "jointdistributionhandmad": 230, "r951": 230, "bernoulli_process": 230, "r952": 230, "mathc": 230, "clarku": 230, "djoyc": 230, "ma217": 230, "given_condit": 230, "poissonprocess": 230, "648": 230, "r953": 230, "11_0_0_intro": 230, "r954": 230, "poisson_point_process": 230, "wiener": 230, "brownian": 230, "scottish": 230, "botanist": 230, "r955": 230, "11_4_0_brownian_motion_wiener_process": 230, "r956": 230, "wiener_process": 230, "gammaprocess": 230, "jump": [230, 287], "472": 230, "r957": 230, "gamma_process": 230, "matrixgamma": 230, "scale_matrix": 230, "r958": 230, "matrix_gamma_distribut": 230, "wishart": 230, "r959": 230, "wishart_distribut": 230, "matrixnorm": 230, "location_matrix": 230, "scale_matrix_1": 230, "scale_matrix_2": 230, "r960": 230, "matrix_normal_distribut": 230, "compound_rv": 230, "compounddistribut": 230, "crv_type": 230, "r961": 230, "compound_probability_distribut": 230, "numsampl": 230, "evaluate_integr": 230, "r962": 230, "entropy_": 230, "information_theori": 230, "r963": 230, "crmarsh": 230, "charles_marsh_continuous_entropi": 230, "r964": 230, "uconn": 230, "kconrad": 230, "blurb": 230, "entropypost": 230, "arg1": 230, "arg2": 230, "cexpr": 230, "coskew": 230, "sigma_": 230, "r965": 230, "r966": 230, "probability_distribut": 230, "randomst": 230, "die_rol": 230, "samp": 230, "pspace": 230, "samp_list": 230, "sam": 230, "42519758": 230, "40207856": 230, "94991743": 230, "85819627": 230, "83403519": 230, "9412172": 230, "85768055": 230, "38954165": 230, "11163337": 230, "3176591": 230, "79115232": 230, "63232916": 230, "01747268": 230, "96716083": 230, "sampling_p": 230, "sampling_": 230, "factorial_mo": 230, "r967": 230, "r968": 230, "factorialmo": 230, "kurtosi": 230, "outlier": 230, "sigma_x": 230, "r969": 230, "r970": 230, "asymmetri": 230, "pearson": 230, "sampling_dens": 230, "centralmo": 230, "cmoment": 230, "expectationmatrix": 230, "randommatrixsymbol": 230, "n11": 230, "n12": 230, "n21": 230, "n22": 230, "variancematrix": 230, "crosscovariancematrix": 230, "randomdomain": 230, "singledomain": 230, "singlepspac": 230, "productdomain": 230, "productpspac": 230, "conditionaldomain": 230, "frv": 230, "finitedomain": 230, "finitepspac": 230, "crv": 230, "continuousdomain": 230, "continuouspspac": 230, "diepspac": 230, "singlefinitepspac": 230, "normalpspac": 230, "singlecontinuouspspac": 230, "frv_type": 230, "randomvari": 230, "tactic": 230, "random_symbol": 230, "rs_swap": 230, "pspace1": 230, "pspace2": 230, "immutabledensendimarrai": 231, "tomatrix": 231, "j_m": 231, "i_a": 231, "i_b": 231, "sum_k": 231, "tensorcontract": [231, 232], "tensordiagon": [231, 232], "derive_by_arrai": 231, "sum_m": 231, "immutablesparsendimarrai": 231, "mutabledensendimarrai": 231, "mutablesparsendimarrai": 231, "index_order_old": 231, "index_order_new": 231, "cab": 231, "contraction_ax": 231, "diagonal_ax": 231, "arraycontract": 232, "arraydiagon": 232, "arraysymbol": 232, "convert_indexed_to_arrai": 232, "arrayadd": 232, "convert_matrix_to_arrai": 232, "convert_array_to_matrix": 232, "expr_tr": 232, "array_der": 232, "index_method": 234, "get_contraction_structur": [234, 235], "deepest": 234, "nested_contract": 234, "get_indic": [234, 235, 236, 237], "indexconformanceexcept": 234, "______": 235, "stem": 235, "dim1": 235, "dim2": 235, "qwerti": 235, "a_ij": 235, "b_ij": 235, "syntact": 235, "a_real": 235, "c_inherit": 235, "c_explicit": 235, "unrol": 235, "tensorindextyp": [236, 237], "eps_dim": 236, "metric_nam": 236, "su": 236, "lorentz": 236, "tensor_index_typ": 236, "is_up": 236, "tensor_inde_typ": 236, "typ": 236, "tensorhead": [236, 237], "index_typ": 236, "tensorsymmetri": 236, "monoterm": 236, "_tensormanag": 236, "set_comm": 236, "asym2": 236, "fully_symmetr": 236, "tensori": [236, 237], "e_z": 236, "no_symmetri": 236, "p_x": 236, "p_y": 236, "p_z": 236, "ipos1": 236, "ipos2": 236, "icomp1": 236, "icomp2": 236, "nameless": 236, "replacement_dict": 236, "free_arg": 236, "addend": 236, "canon_bp": 236, "contract_metr": 236, "contract_al": 236, "ipo": 236, "icomp": 236, "nonrep": 236, "dum": 236, "ext_rank": 236, "is_canon_bp": 236, "get_free_indic": [236, 237], "perm2tensor": 236, "tid": 236, "sorted_compon": 236, "riemann_cyclic_replac": 236, "riemann_cycl": 236, "cadabra": 236, "multiterm": 236, "bianchi": 236, "sym2": 236, "direct_product": 236, "monotorem": 236, "tableaux": 236, "tensortyp": 236, "repetit": [236, 248], "tensormanag": 236, "comm_i2symbol": 236, "comm_symbols2i": 236, "get_comm": 236, "gcomm": 236, "ghcomm": 236, "toper": 237, "partialderiv": 237, "valenc": 237, "uncontract": 237, "compa": 237, "compb": 237, "derivand": 237, "xpass": [239, 241], "nocache_fail": 239, "expectedexcept": 239, "assertionerror": 239, "exceptioninfo": 239, "abort": 239, "9999": 239, "warningcl": [239, 246], "test_stacklevel": 239, "randtest": 240, "portabl": [241, 242], "pytestreport": 241, "force_color": 241, "readlin": 241, "sympydoctestfind": 241, "doctestpars": 241, "exclude_empti": 241, "sympydoctestrunn": 241, "checker": 241, "optionflag": 241, "5140": 241, "doctestrunn": 241, "clear_glob": 241, "writer": 241, "garbag": 241, "check_output": 241, "report_": 241, "sympyoutputcheck": 241, "outputcheck": 241, "stdlib": 241, "testrunn": 241, "sympytestresult": 241, "convert_to_native_path": 241, "lst": 241, "blacklist": 241, "get_sympy_dir": 241, "raise_on_deprec": 241, "deprecationwarn": [241, 246], "run_all_test": 241, "test_arg": 241, "test_kwarg": 241, "doctest_arg": 241, "doctest_kwarg": 241, "examples_arg": 241, "examples_kwarg": 241, "run_in_subprocess_with_hash_random": 241, "function_kwarg": 241, "hostedtoolcach": 241, "x64": 241, "pythonhashse": 241, "_test": 241, "split_list": 241, "sympytestfil": 241, "module_rel": 241, "extraglob": 241, "raise_on_error": 241, "basenam": [241, 242, 243], "slate": 241, "dont_accept_true_for_1": 241, "dont_accept_blanklin": 241, "normalize_whitespac": 241, "ellipsi": 241, "ignore_exception_detail": 241, "report_udiff": 241, "report_cdiff": 241, "report_ndiff": 241, "report_only_first_failur": 241, "mortem": 241, "tomfooleri": 241, "testmod": 241, "tester": 241, "fiddl": [241, 287], "timeout": 241, "keyboardinterrupt": 241, "interrupt": 241, "_basic": 241, "kw": 241, "test_equ": 241, "pdb": 241, "pipe": 241, "time_bal": 241, "tandem": 242, "matvec": 242, "codewrapp": 242, "distutil": 242, "fwrap": 242, "swig": 242, "binary_cal": 242, "22925376": 242, "25165824": 242, "_imp_": [242, 249], "filepath": 242, "cythoncodewrapp": 242, "dump_pyx": 242, "dummywrapp": 242, "f2pycodewrapp": 242, "ufuncifycodewrapp": 242, "dump_c": [242, 243], "funcnam": 242, "code_gen": [242, 243], "argument_tupl": 242, "include_dir": 242, "library_dir": 242, "extra_compile_arg": 242, "extra_link_arg": 242, "symfunc": [242, 249], "funtion_nam": 242, "ndimension": 242, "f_fortran": 242, "f_cython": 242, "r971": 242, "fortran77": 243, "fortran90": 243, "julia": 243, "rust": 243, "mileston": 243, "unsurmount": 243, "pyf": 243, "inputoutput": 243, "tcc": 243, "libtcc": 243, "date": 243, "hostnam": 243, "sha1": 243, "ccodegen": 243, "preprocessor_stat": 243, "dump_h": 243, "guard": 243, "get_prototyp": 243, "codegenerror": 243, "function_prototyp": 243, "dump_cod": 243, "cname": 243, "fname": 243, "pynam": 243, "jlname": 243, "octnam": 243, "rsname": 243, "fcodegen": 243, "f90": 243, "dump_f95": 243, "get_interfac": 243, "juliacodegen": 243, "dump_jl": 243, "octavecodegen": 243, "dump_m": 243, "returnvalu": 243, "destin": 243, "local_var": 243, "result_vari": 243, "unnam": 243, "rustcodegen": 243, "dump_r": 243, "f_result": 243, "myfcn": 243, "fcn2": 243, "myfcn_result": 243, "void": 243, "get_default_datatyp": 243, "complex_allow": 243, "agnost": 243, "conserve_mpmath_dp": 244, "doctest_depends_on": 244, "disable_view": 244, "python_vers": 244, "memoize_properti": 244, "propfunc": 244, "no_attrs_in_subclass": 244, "__all__": 244, "some_funct": 244, "thread": 244, "xthread": 244, "threaded_factori": 244, "use_add": 244, "multiset_partitions_taocp": 245, "visitor": 245, "pstack": 245, "lpart": 245, "topmost": 245, "partcompon": 245, "peek": [245, 287], "unpredict": 245, "list_visitor": 245, "abb": [245, 248], "factoring_visitor": 245, "multisetpartitiontravers": 245, "aocp": 245, "count_partit": 245, "127750": 245, "686": 245, "4a": 245, "factorisatio": 245, "oppenheim": 245, "numerorum": 245, "canfield": 245, "erdo": 245, "OF": 245, "yorgei": 245, "monad": 245, "persist": 245, "288716": 245, "memoiz": [245, 247, 274], "dramat": 245, "hypothet": 245, "borrow": 245, "coalesc": 245, "_rang": 245, "stretch": 245, "brain": 245, "histogram": 245, "enum_al": 245, "enum_larg": 245, "enum_rang": 245, "enum_smal": 245, "ub": 245, "parti": 246, "catch_warn": 246, "simplefilt": 246, "dedent": [246, 251], "enum": [247, 274], "miscellan": [247, 274], "pkgdata": [247, 274], "notiter": 248, "binary_partit": 248, "r972": 248, "taocp": 248, "nx": 248, "common_prefix": 248, "common_suffix": 248, "unhash": 248, "r973": 248, "connected_component_": 248, "graph_theori": 248, "r974": 248, "27s_strongly_connected_components_algorithm": 248, "dict_merg": 248, "filter_symbol": 248, "myop": 248, "kog": 248, "informatik": 248, "hamburg": 248, "mein": 248, "python_trick": 248, "neighbor": 248, "xxxxxx": 248, "xxxx": 248, "r975": 248, "method_ring": 248, "r976": 248, "4856615": 248, "4857018": 248, "r977": 248, "programminggeek": 248, "r978": 248, "steinhau": 248, "93johnson": 248, "93trotter_algorithm": 248, "r979": 248, "involut": 248, "eco": 248, "vajnovszki": 248, "dmtc": 248, "generate_involut": 248, "r980": 248, "permutationinvolut": 248, "generate_oriented_forest": 248, "forest": 248, "acycl": 248, "r981": 248, "beyer": 248, "hedetniemi": 248, "novemb": 248, "r982": 248, "1633833": 248, "has_dup": 248, "has_varieti": 248, "iproduct": 248, "abcbb": 248, "is_sequ": 248, "generatortyp": 248, "_iter": 248, "kbin": 248, "ordered_flag": 248, "least_rot": 248, "rotate_left": 248, "r983": 248, "lexicographically_minimal_string_rot": 248, "minlex": 248, "acb": 248, "11010011000": 248, "00011010011": 248, "00011001011": 248, "aaa": 248, "abi": 248, "bby": 248, "abracadabra": 248, "banana": 248, "multiset_derang": 248, "uniq": 248, "1233": 248, "3312": 248, "3321": 248, "aba": 248, "baa": 248, "bead": 248, "ooo": 248, "r984": 248, "ordered_partit": 248, "r985": 248, "jeromekelleh": 248, "r986": 248, "jerom": 248, "kelleh": 248, "barri": 248, "sullivan": 248, "0909": 248, "2331v2": 248, "r987": 248, "activest": 248, "218332": 248, "random_derang": 248, "reseed": 248, "rotate_right": 248, "roundrobin": 248, "ef": 248, "credit": 248, "sakki": 248, "keyfunc": 248, "subgraph": 248, "r988": 248, "r989": 248, "longest": 248, "r990": 248, "unflatten": 248, "bcd": 248, "afunc": 249, "lambdastr": 249, "dummifi": 249, "use_imp": 249, "custom_sin": 249, "38177329": 249, "49315059": 249, "8414709848078965": 249, "eager": 249, "enable_eager_execut": 249, "eagertensor": 249, "__class__": 249, "placehold": 249, "user_guid": 249, "runtimewarn": 249, "sin_cos_sympi": 249, "sin_co": 249, "sin_cos_numpi": 249, "38177329068": 249, "module_dictionari": 249, "_lambdifygener": 249, "__globals__": 249, "lambdaprint": 249, "90929743": [249, 276], "assoc_recurrence_memo": 250, "base_seq": 250, "memo": 250, "pn0": 250, "recurrence_memo": 250, "specfun": 250, "__index__": 251, "sanit": 251, "99999999999999991611392": 251, "debug_decor": 251, "fillded": 251, "strline": 251, "rawlin": 251, "find_execut": 251, "pathsep": 251, "pastabl": 251, "bee": 251, "spamham": 251, "sha": 251, "spam": 251, "egg": 251, "md5": 251, "eggsham": 251, "r991": 251, "6116978": 251, "roken": 251, "deletechar": 251, "multicharact": 251, "oldchar": 251, "newchar": 251, "acquir": 252, "getresourc": 252, "pkgname": 252, "pkgpath": 252, "dirnam": 252, "normpath": 252, "__loader__": 252, "stringio": 252, "get_resourc": 252, "ioerror": 252, "mydata": 252, "mypkgdata": 252, "jpg": 252, "get_class": 253, "lookup_view": 253, "get_mod_func": 253, "callback": 253, "timeutil": 254, "coordsysrect": 255, "coordsys3d": [255, 257, 258, 259, 261, 262, 265], "rotation_matrix": [255, 257, 260], "vector_nam": 255, "variable_nam": [255, 262], "latex_vect": 255, "pretty_vect": 255, "latex_scalar": 255, "pretty_scalar": 255, "new_system": 255, "create_new": [255, 260], "transformation_to_par": 255, "transformation_from_par": 255, "locate_new": [255, 258, 259, 260, 261, 262], "position_wrt": [255, 259, 260, 261], "orient_new": [255, 257], "axisorient": [255, 257, 260], "axis_orient": [255, 260], "bodyorient": [255, 257, 260], "body_orient": [255, 257, 260], "spaceorient": [255, 257, 260], "space_orient": [255, 257], "quaternionorient": [255, 257, 260], "q_orient": [255, 257], "orient_new_axi": [255, 258, 260], "orient_new_bodi": [255, 260], "angle1": [255, 257], "angle2": [255, 257], "angle3": [255, 257], "euler_angl": [255, 257], "orient_new_quaternion": [255, 260], "orient_new_spac": [255, 260], "coordsyrect": 255, "v_a": 255, "v_b": 255, "scalar_map": 255, "basevector": [255, 259, 260], "delop": [255, 261, 262], "r992": 255, "r993": 255, "basedyad": [255, 259], "second_system": 255, "deloper": [255, 263], "parametricregion": [255, 258, 265], "implicitregion": [255, 258, 265], "parabola": 255, "rational_parametr": 255, "singular_point": 255, "regular_point": 255, "reg_point": 255, "cubic_curv": 255, "calulc": 255, "hoffmann": 255, "purdu": 255, "lib": 255, "cgi": 255, "viewcont": 255, "1827": 255, "cstech": 255, "erik": 255, "hillgart": 255, "diploma": 255, "linz": 255, "universitat": 255, "risc_1355": 255, "20point": 255, "20on": 255, "20conic": 255, "parametricintegr": 255, "semispher": [255, 265], "axis_orienter1": 257, "axis_orienter2": 257, "axis_orienter3": 257, "body_orienter1": 257, "body_orienter2": 257, "body_orienter3": 257, "matrix_to_vector": 258, "system2": 258, "vector_integr": [258, 265], "essenc": 259, "vectormul": 259, "vectoradd": 259, "ofcours": 259, "vectorzero": 259, "expressli": 259, "express_coordin": [259, 260], "dyadicmul": 259, "dyadicadd": 259, "cleanest": 260, "orient_new_": 260, "basescalar": [260, 262], "oabc": 261, "oa": 261, "pq": 261, "sr": 261, "wikidel": 261, "ffield": 261, "gradient_field": 262, "instantan": 262, "directional_deriv": 262, "lame": 262, "dyadicproduct": 263, "quantifi": 264, "necesssari": 265, "param_circl": 265, "implicit_circl": 265, "obextj": 265, "solidspher": 265, "lamina": 265, "\ud835\udc45": 265, "cylind": 265, "vectorfield": 265, "hemispher": 265, "top_fac": 265, "bottom_fac": 265, "27_theorem": 265, "cone": 265, "divergence_theorem": 265, "12288": 265, "truss": 272, "str_expr": 276, "82842712474619": 276, "141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117068": 276, "0874989834394464": 276, "roundoff": 276, "14112001": 276, "7568025": 276, "95892427": 276, "2794155": 276, "6569866": 276, "98935825": 276, "41211849": 276, "0998334166468": 276, "sympy_nam": 276, "numerical_funct": 276, "rephras": 277, "oh": 277, "integration_vari": 277, "dfdx": 277, "equidistantli": 277, "d2fdx2": 277, "django": 279, "oop": 279, "crazi": 279, "abcdef": 279, "reevalu": 279, "infal": 279, "entertain": 280, "preliminari": 280, "82842712475": 281, "cass": 281, "wrote": [281, 282], "theme": 281, "expanded_expr": 281, "whet": 281, "appetit": 281, "c\u2082": [281, 288], "c\u2081": [281, 288], "\u03bd": 281, "sell": 281, "battl": 281, "confid": 281, "gigabyt": 281, "tear": 282, "dotprint": [282, 286], "stopper": 282, "uexpr": 282, "downsid": 283, "algebraic_multipl": 283, "pdp": 283, "undertest": 283, "underevalu": 283, "my_iszero": 283, "stronger": 283, "tradeoff": 283, "wonder": 283, "5b7c3e8ee5b40332abdb206c": 283, "15141": 283, "19548": 283, "10120": 283, "10279": 283, "constant_problem": 283, "possiblezeroq": 283, "mupad_ref": 283, "iszero": 283, "congratul": 284, "decent": 285, "austin": 285, "video": 285, "javascript": 286, "bvar": 286, "unnecessarili": 287, "whittl": 287, "catchal": 287, "collected_expr": 287, "cdot1": 287, "undertak": 287, "undon": 287, "cdot2": 287, "nck": 287, "pronounc": 287, "_2f_1": 287, "cfrac": 287, "list_to_frac": 287, "a\u2080": 287, "a\u2083": 287, "a\u2084": 287, "pointless": 287, "orig_frac": 287, "diffeq": 288}, "objects": {"": [[32, 0, 0, "-", "sympy"]], "sympy": [[34, 0, 0, "-", "abc"], [35, 0, 0, "-", "algebras"], [38, 0, 0, "-", "assumptions"], [41, 0, 0, "-", "calculus"], [42, 0, 0, "-", "categories"], [63, 0, 0, "-", "diffgeom"], [64, 0, 0, "-", "discrete"], [68, 0, 0, "-", "functions"], [81, 0, 0, "-", "holonomic"], [88, 0, 0, "-", "integrals"], [89, 0, 0, "-", "interactive"], [90, 0, 0, "-", "liealgebras"], [91, 0, 0, "-", "logic"], [96, 0, 0, "-", "matrices"], [103, 0, 0, "-", "parsing"], [272, 0, 0, "-", "physics"], [206, 0, 0, "-", "polys"], [228, 0, 0, "-", "solvers"], [230, 0, 0, "-", "stats"], [233, 0, 0, "-", "tensor"], [238, 0, 0, "-", "testing"], [247, 0, 0, "-", "utilities"], [263, 0, 0, "-", "vector"]], "sympy.algebras": [[35, 1, 1, "", "Quaternion"]], "sympy.algebras.Quaternion": [[35, 2, 1, "", "add"], [35, 2, 1, "", "angle"], [35, 2, 1, "", "arc_coplanar"], [35, 2, 1, "", "axis"], [35, 2, 1, "", "exp"], [35, 2, 1, "", "from_axis_angle"], [35, 2, 1, "", "from_rotation_matrix"], [35, 2, 1, "", "index_vector"], [35, 2, 1, "", "integrate"], [35, 2, 1, "", "inverse"], [35, 2, 1, "", "is_pure"], [35, 2, 1, "", "is_zero_quaternion"], [35, 2, 1, "", "mensor"], [35, 2, 1, "", "mul"], [35, 2, 1, "", "norm"], [35, 2, 1, "", "normalize"], [35, 2, 1, "", "orthogonal"], [35, 2, 1, "", "parallel"], [35, 2, 1, "", "pow"], [35, 2, 1, "", "pow_cos_sin"], [35, 2, 1, "", "rotate_point"], [35, 2, 1, "", "scalar_part"], [35, 2, 1, "", "to_axis_angle"], [35, 2, 1, "", "to_rotation_matrix"], [35, 2, 1, "", "vector_coplanar"], [35, 2, 1, "", "vector_part"]], "sympy.assumptions": [[36, 0, 0, "-", "ask"], [37, 0, 0, "-", "assume"], [39, 0, 0, "-", "predicates"], [40, 0, 0, "-", "refine"]], "sympy.assumptions.ask": [[36, 1, 1, "", "AssumptionKeys"], [36, 3, 1, "", "ask"], [36, 3, 1, "", "register_handler"], [36, 3, 1, "", "remove_handler"]], "sympy.assumptions.assume": [[37, 1, 1, "", "AppliedPredicate"], [37, 1, 1, "", "AssumptionsContext"], [37, 1, 1, "", "Predicate"], [37, 1, 1, "", "UndefinedPredicate"], [37, 3, 1, "", "assuming"]], "sympy.assumptions.assume.AppliedPredicate": [[37, 4, 1, "", "arg"], [37, 4, 1, "", "arguments"], [37, 4, 1, "", "function"]], "sympy.assumptions.assume.AssumptionsContext": [[37, 2, 1, "", "add"]], "sympy.assumptions.assume.Predicate": [[37, 2, 1, "", "eval"], [37, 5, 1, "", "handler"], [37, 2, 1, "", "register"], [37, 2, 1, "", "register_many"]], "sympy.assumptions.predicates.calculus": [[39, 1, 1, "", "FinitePredicate"], [39, 1, 1, "", "InfinitePredicate"]], "sympy.assumptions.predicates.calculus.FinitePredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.calculus.InfinitePredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.common": [[39, 1, 1, "", "CommutativePredicate"], [39, 1, 1, "", "IsTruePredicate"]], "sympy.assumptions.predicates.common.CommutativePredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.common.IsTruePredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices": [[39, 1, 1, "", "ComplexElementsPredicate"], [39, 1, 1, "", "DiagonalPredicate"], [39, 1, 1, "", "FullRankPredicate"], [39, 1, 1, "", "IntegerElementsPredicate"], [39, 1, 1, "", "InvertiblePredicate"], [39, 1, 1, "", "LowerTriangularPredicate"], [39, 1, 1, "", "NormalPredicate"], [39, 1, 1, "", "OrthogonalPredicate"], [39, 1, 1, "", "PositiveDefinitePredicate"], [39, 1, 1, "", "RealElementsPredicate"], [39, 1, 1, "", "SingularPredicate"], [39, 1, 1, "", "SquarePredicate"], [39, 1, 1, "", "SymmetricPredicate"], [39, 1, 1, "", "TriangularPredicate"], [39, 1, 1, "", "UnitTriangularPredicate"], [39, 1, 1, "", "UnitaryPredicate"], [39, 1, 1, "", "UpperTriangularPredicate"]], "sympy.assumptions.predicates.matrices.ComplexElementsPredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.DiagonalPredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.FullRankPredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.IntegerElementsPredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.InvertiblePredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.LowerTriangularPredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.NormalPredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.OrthogonalPredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.PositiveDefinitePredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.RealElementsPredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.SingularPredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.SquarePredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.SymmetricPredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.TriangularPredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.UnitTriangularPredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.UnitaryPredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.UpperTriangularPredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.ntheory": [[39, 1, 1, "", "CompositePredicate"], [39, 1, 1, "", "EvenPredicate"], [39, 1, 1, "", "OddPredicate"], [39, 1, 1, "", "PrimePredicate"]], "sympy.assumptions.predicates.ntheory.CompositePredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.ntheory.EvenPredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.ntheory.OddPredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.ntheory.PrimePredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order": [[39, 1, 1, "", "NegativePredicate"], [39, 1, 1, "", "NonNegativePredicate"], [39, 1, 1, "", "NonPositivePredicate"], [39, 1, 1, "", "NonZeroPredicate"], [39, 1, 1, "", "PositivePredicate"], [39, 1, 1, "", "ZeroPredicate"]], "sympy.assumptions.predicates.order.NegativePredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order.NonNegativePredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order.NonPositivePredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order.NonZeroPredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order.PositivePredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order.ZeroPredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets": [[39, 1, 1, "", "AlgebraicPredicate"], [39, 1, 1, "", "AntihermitianPredicate"], [39, 1, 1, "", "ComplexPredicate"], [39, 1, 1, "", "ExtendedRealPredicate"], [39, 1, 1, "", "HermitianPredicate"], [39, 1, 1, "", "ImaginaryPredicate"], [39, 1, 1, "", "IntegerPredicate"], [39, 1, 1, "", "IrrationalPredicate"], [39, 1, 1, "", "RationalPredicate"], [39, 1, 1, "", "RealPredicate"], [39, 1, 1, "", "TranscendentalPredicate"]], "sympy.assumptions.predicates.sets.AlgebraicPredicate": [[39, 5, 1, "", "AlgebraicHandler"], [39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.AntihermitianPredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.ComplexPredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.ExtendedRealPredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.HermitianPredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.ImaginaryPredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.IntegerPredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.IrrationalPredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.RationalPredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.RealPredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.TranscendentalPredicate": [[39, 5, 1, "", "handler"]], "sympy.assumptions.refine": [[40, 3, 1, "", "refine"], [40, 3, 1, "", "refine_Pow"], [40, 3, 1, "", "refine_abs"], [40, 3, 1, "", "refine_arg"], [40, 3, 1, "", "refine_atan2"], [40, 3, 1, "", "refine_im"], [40, 3, 1, "", "refine_matrixelement"], [40, 3, 1, "", "refine_re"], [40, 3, 1, "", "refine_sign"]], "sympy.calculus": [[41, 0, 0, "-", "euler"], [41, 0, 0, "-", "finite_diff"], [41, 0, 0, "-", "singularities"], [41, 0, 0, "-", "util"]], "sympy.calculus.euler": [[41, 3, 1, "", "euler_equations"]], "sympy.calculus.finite_diff": [[41, 3, 1, "", "apply_finite_diff"], [41, 3, 1, "", "differentiate_finite"], [41, 3, 1, "", "finite_diff_weights"]], "sympy.calculus.singularities": [[41, 3, 1, "", "is_decreasing"], [41, 3, 1, "", "is_increasing"], [41, 3, 1, "", "is_monotonic"], [41, 3, 1, "", "is_strictly_decreasing"], [41, 3, 1, "", "is_strictly_increasing"], [41, 3, 1, "", "monotonicity_helper"], [41, 3, 1, "", "singularities"]], "sympy.calculus.util": [[41, 3, 1, "", "continuous_domain"], [41, 3, 1, "", "function_range"], [41, 3, 1, "", "is_convex"], [41, 3, 1, "", "lcim"], [41, 3, 1, "", "maximum"], [41, 3, 1, "", "minimum"], [41, 3, 1, "", "not_empty_in"], [41, 3, 1, "", "periodicity"], [41, 3, 1, "", "stationary_points"]], "sympy.categories": [[42, 1, 1, "", "Category"], [42, 1, 1, "", "CompositeMorphism"], [42, 1, 1, "", "Diagram"], [42, 1, 1, "", "IdentityMorphism"], [42, 1, 1, "", "Morphism"], [42, 1, 1, "", "NamedMorphism"], [42, 1, 1, "", "Object"], [42, 0, 0, "-", "diagram_drawing"]], "sympy.categories.Category": [[42, 4, 1, "", "commutative_diagrams"], [42, 4, 1, "", "name"], [42, 4, 1, "", "objects"]], "sympy.categories.CompositeMorphism": [[42, 4, 1, "", "codomain"], [42, 4, 1, "", "components"], [42, 4, 1, "", "domain"], [42, 2, 1, "", "flatten"]], "sympy.categories.Diagram": [[42, 4, 1, "", "conclusions"], [42, 2, 1, "", "hom"], [42, 2, 1, "", "is_subdiagram"], [42, 4, 1, "", "objects"], [42, 4, 1, "", "premises"], [42, 2, 1, "", "subdiagram_from_objects"]], "sympy.categories.Morphism": [[42, 4, 1, "", "codomain"], [42, 2, 1, "", "compose"], [42, 4, 1, "", "domain"]], "sympy.categories.NamedMorphism": [[42, 4, 1, "", "name"]], "sympy.categories.diagram_drawing": [[42, 1, 1, "", "ArrowStringDescription"], [42, 1, 1, "", "DiagramGrid"], [42, 1, 1, "", "XypicDiagramDrawer"], [42, 3, 1, "", "preview_diagram"], [42, 3, 1, "", "xypic_draw_diagram"]], "sympy.categories.diagram_drawing.DiagramGrid": [[42, 4, 1, "", "height"], [42, 4, 1, "", "morphisms"], [42, 4, 1, "", "width"]], "sympy.categories.diagram_drawing.XypicDiagramDrawer": [[42, 2, 1, "", "draw"]], "sympy.codegen": [[43, 0, 0, "-", "algorithms"], [43, 0, 0, "-", "approximations"], [43, 0, 0, "-", "ast"], [43, 0, 0, "-", "cfunctions"], [43, 0, 0, "-", "cnodes"], [43, 0, 0, "-", "cutils"], [43, 0, 0, "-", "cxxnodes"], [43, 0, 0, "-", "fnodes"], [43, 0, 0, "-", "futils"], [43, 0, 0, "-", "matrix_nodes"], [43, 0, 0, "-", "pyutils"], [43, 0, 0, "-", "rewriting"]], "sympy.codegen.algorithms": [[43, 3, 1, "", "newtons_method"], [43, 3, 1, "", "newtons_method_function"]], "sympy.codegen.approximations": [[43, 1, 1, "", "SeriesApprox"], [43, 1, 1, "", "SumApprox"]], "sympy.codegen.ast": [[43, 1, 1, "", "Assignment"], [43, 1, 1, "", "AssignmentBase"], [43, 1, 1, "", "Attribute"], [43, 1, 1, "", "AugmentedAssignment"], [43, 1, 1, "", "BreakToken"], [43, 1, 1, "", "CodeBlock"], [43, 1, 1, "", "Comment"], [43, 1, 1, "", "ComplexType"], [43, 1, 1, "", "ContinueToken"], [43, 1, 1, "", "Declaration"], [43, 1, 1, "", "Element"], [43, 1, 1, "", "FloatBaseType"], [43, 1, 1, "", "FloatType"], [43, 1, 1, "", "For"], [43, 1, 1, "", "FunctionCall"], [43, 1, 1, "", "FunctionDefinition"], [43, 1, 1, "", "FunctionPrototype"], [43, 1, 1, "", "IntBaseType"], [43, 1, 1, "", "Node"], [43, 1, 1, "", "NoneToken"], [43, 1, 1, "", "Pointer"], [43, 1, 1, "", "Print"], [43, 1, 1, "", "QuotedString"], [43, 1, 1, "", "Return"], [43, 1, 1, "", "Scope"], [43, 1, 1, "", "SignedIntType"], [43, 1, 1, "", "Stream"], [43, 1, 1, "", "String"], [43, 1, 1, "", "Token"], [43, 1, 1, "", "Type"], [43, 1, 1, "", "UnsignedIntType"], [43, 1, 1, "", "Variable"], [43, 1, 1, "", "While"], [43, 3, 1, "", "aug_assign"]], "sympy.codegen.ast.CodeBlock": [[43, 2, 1, "", "cse"], [43, 2, 1, "", "topological_sort"]], "sympy.codegen.ast.FloatBaseType": [[43, 5, 1, "", "cast_nocheck"]], "sympy.codegen.ast.FloatType": [[43, 2, 1, "", "cast_nocheck"], [43, 4, 1, "", "decimal_dig"], [43, 4, 1, "", "dig"], [43, 4, 1, "", "eps"], [43, 4, 1, "", "max"], [43, 4, 1, "", "max_exponent"], [43, 4, 1, "", "min_exponent"], [43, 4, 1, "", "tiny"]], "sympy.codegen.ast.Node": [[43, 2, 1, "", "attr_params"]], "sympy.codegen.ast.Token": [[43, 2, 1, "", "kwargs"]], "sympy.codegen.ast.Type": [[43, 2, 1, "", "cast_check"], [43, 2, 1, "", "from_expr"]], "sympy.codegen.ast.Variable": [[43, 2, 1, "", "as_Declaration"], [43, 2, 1, "", "deduced"]], "sympy.codegen.cfunctions": [[43, 1, 1, "", "Cbrt"], [43, 1, 1, "", "Sqrt"], [43, 1, 1, "", "exp2"], [43, 1, 1, "", "expm1"], [43, 1, 1, "", "fma"], [43, 1, 1, "", "hypot"], [43, 1, 1, "", "log10"], [43, 1, 1, "", "log1p"], [43, 1, 1, "", "log2"]], "sympy.codegen.cfunctions.Cbrt": [[43, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.Sqrt": [[43, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.exp2": [[43, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.expm1": [[43, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.fma": [[43, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.hypot": [[43, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.log10": [[43, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.log1p": [[43, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.log2": [[43, 2, 1, "", "fdiff"]], "sympy.codegen.cnodes": [[43, 1, 1, "", "CommaOperator"], [43, 1, 1, "", "Label"], [43, 1, 1, "", "PostDecrement"], [43, 1, 1, "", "PostIncrement"], [43, 1, 1, "", "PreDecrement"], [43, 1, 1, "", "PreIncrement"], [43, 3, 1, "", "alignof"], [43, 1, 1, "", "goto"], [43, 3, 1, "", "sizeof"], [43, 1, 1, "", "struct"], [43, 1, 1, "", "union"]], "sympy.codegen.cutils": [[43, 3, 1, "", "render_as_source_file"]], "sympy.codegen.cxxnodes": [[43, 1, 1, "", "using"]], "sympy.codegen.fnodes": [[43, 1, 1, "", "ArrayConstructor"], [43, 1, 1, "", "Do"], [43, 1, 1, "", "Extent"], [43, 1, 1, "", "FortranReturn"], [43, 1, 1, "", "GoTo"], [43, 1, 1, "", "ImpliedDoLoop"], [43, 1, 1, "", "Module"], [43, 1, 1, "", "Program"], [43, 1, 1, "", "Subroutine"], [43, 1, 1, "", "SubroutineCall"], [43, 3, 1, "", "allocated"], [43, 3, 1, "", "array"], [43, 3, 1, "", "bind_C"], [43, 1, 1, "", "cmplx"], [43, 3, 1, "", "dimension"], [43, 1, 1, "", "dsign"], [43, 1, 1, "", "isign"], [43, 1, 1, "", "kind"], [43, 3, 1, "", "lbound"], [43, 1, 1, "", "literal_dp"], [43, 1, 1, "", "literal_sp"], [43, 1, 1, "", "merge"], [43, 3, 1, "", "reshape"], [43, 3, 1, "", "shape"], [43, 3, 1, "", "size"], [43, 1, 1, "", "use"], [43, 1, 1, "", "use_rename"]], "sympy.codegen.futils": [[43, 3, 1, "", "render_as_module"]], "sympy.codegen.matrix_nodes": [[43, 1, 1, "", "MatrixSolve"]], "sympy.codegen.pyutils": [[43, 3, 1, "", "render_as_module"]], "sympy.codegen.rewriting": [[43, 1, 1, "", "FuncMinusOneOptim"], [43, 1, 1, "", "Optimization"], [43, 1, 1, "", "ReplaceOptim"], [43, 3, 1, "", "create_expand_pow_optimization"], [43, 3, 1, "", "optimize"]], "sympy.codegen.rewriting.FuncMinusOneOptim": [[43, 2, 1, "", "replace_in_Add"]], "sympy.combinatorics": [[53, 0, 0, "-", "generators"], [45, 0, 0, "-", "graycode"], [46, 0, 0, "-", "group_constructs"], [47, 0, 0, "-", "group_numbers"], [49, 0, 0, "-", "named_groups"], [50, 0, 0, "-", "partitions"], [52, 0, 0, "-", "perm_groups"], [53, 0, 0, "-", "permutations"], [54, 0, 0, "-", "polyhedron"], [55, 0, 0, "-", "prufer"], [56, 0, 0, "-", "subsets"], [57, 0, 0, "-", "tensor_can"], [58, 0, 0, "-", "testutil"], [59, 0, 0, "-", "util"]], "sympy.combinatorics.generators": [[53, 2, 1, "", "alternating"], [53, 2, 1, "", "cyclic"], [53, 2, 1, "", "dihedral"], [53, 2, 1, "", "symmetric"]], "sympy.combinatorics.graycode": [[45, 1, 1, "", "GrayCode"], [45, 2, 1, "", "bin_to_gray"], [45, 2, 1, "", "get_subset_from_bitstring"], [45, 2, 1, "", "gray_to_bin"], [45, 2, 1, "", "graycode_subsets"], [45, 2, 1, "", "random_bitstring"]], "sympy.combinatorics.graycode.GrayCode": [[45, 4, 1, "", "current"], [45, 2, 1, "", "generate_gray"], [45, 4, 1, "", "n"], [45, 2, 1, "", "next"], [45, 4, 1, "", "rank"], [45, 4, 1, "", "selections"], [45, 2, 1, "", "skip"], [45, 2, 1, "", "unrank"]], "sympy.combinatorics.group_constructs": [[46, 3, 1, "", "DirectProduct"]], "sympy.combinatorics.group_numbers": [[47, 3, 1, "", "is_abelian_number"], [47, 3, 1, "", "is_cyclic_number"], [47, 3, 1, "", "is_nilpotent_number"]], "sympy.combinatorics.named_groups": [[49, 3, 1, "", "AbelianGroup"], [49, 3, 1, "", "AlternatingGroup"], [49, 3, 1, "", "CyclicGroup"], [49, 3, 1, "", "DihedralGroup"], [49, 3, 1, "", "SymmetricGroup"]], "sympy.combinatorics.partitions": [[50, 1, 1, "", "IntegerPartition"], [50, 1, 1, "", "Partition"], [50, 3, 1, "", "RGS_enum"], [50, 3, 1, "", "RGS_generalized"], [50, 3, 1, "", "RGS_rank"], [50, 3, 1, "", "RGS_unrank"], [50, 3, 1, "", "random_integer_partition"]], "sympy.combinatorics.partitions.IntegerPartition": [[50, 2, 1, "", "as_dict"], [50, 2, 1, "", "as_ferrers"], [50, 4, 1, "", "conjugate"], [50, 2, 1, "", "next_lex"], [50, 2, 1, "", "prev_lex"]], "sympy.combinatorics.partitions.Partition": [[50, 4, 1, "", "RGS"], [50, 2, 1, "", "from_rgs"], [50, 4, 1, "", "partition"], [50, 4, 1, "", "rank"], [50, 2, 1, "", "sort_key"]], "sympy.combinatorics.perm_groups": [[52, 1, 1, "", "PermutationGroup"]], "sympy.combinatorics.perm_groups.PermutationGroup": [[52, 2, 1, "", "__contains__"], [52, 2, 1, "", "__mul__"], [52, 2, 1, "", "__new__"], [52, 5, 1, "", "__weakref__"], [52, 2, 1, "", "_coset_representative"], [52, 2, 1, "", "_distinct_primes_lemma"], [52, 4, 1, "", "_elements"], [52, 2, 1, "", "_eval_is_alt_sym_monte_carlo"], [52, 2, 1, "", "_eval_is_alt_sym_naive"], [52, 2, 1, "", "_p_elements_group"], [52, 2, 1, "", "_random_pr_init"], [52, 2, 1, "", "_sylow_alt_sym"], [52, 2, 1, "", "_union_find_merge"], [52, 2, 1, "", "_union_find_rep"], [52, 2, 1, "", "_verify"], [52, 2, 1, "", "abelian_invariants"], [52, 4, 1, "", "base"], [52, 2, 1, "", "baseswap"], [52, 4, 1, "", "basic_orbits"], [52, 4, 1, "", "basic_stabilizers"], [52, 4, 1, "", "basic_transversals"], [52, 2, 1, "", "center"], [52, 2, 1, "", "centralizer"], [52, 2, 1, "", "commutator"], [52, 2, 1, "", "composition_series"], [52, 2, 1, "", "conjugacy_class"], [52, 2, 1, "", "conjugacy_classes"], [52, 2, 1, "", "contains"], [52, 2, 1, "", "coset_factor"], [52, 2, 1, "", "coset_rank"], [52, 2, 1, "", "coset_table"], [52, 2, 1, "", "coset_transversal"], [52, 2, 1, "", "coset_unrank"], [52, 4, 1, "", "degree"], [52, 2, 1, "", "derived_series"], [52, 2, 1, "", "derived_subgroup"], [52, 4, 1, "", "elements"], [52, 2, 1, "", "equals"], [52, 2, 1, "", "generate"], [52, 2, 1, "", "generate_dimino"], [52, 2, 1, "", "generate_schreier_sims"], [52, 2, 1, "", "generator_product"], [52, 4, 1, "", "generators"], [52, 4, 1, "", "identity"], [52, 2, 1, "", "index"], [52, 4, 1, "", "is_abelian"], [52, 2, 1, "", "is_alt_sym"], [52, 4, 1, "", "is_alternating"], [52, 4, 1, "", "is_cyclic"], [52, 2, 1, "", "is_elementary"], [52, 4, 1, "", "is_nilpotent"], [52, 2, 1, "", "is_normal"], [52, 4, 1, "", "is_perfect"], [52, 4, 1, "", "is_polycyclic"], [52, 2, 1, "", "is_primitive"], [52, 4, 1, "", "is_solvable"], [52, 2, 1, "", "is_subgroup"], [52, 4, 1, "", "is_symmetric"], [52, 2, 1, "", "is_transitive"], [52, 4, 1, "", "is_trivial"], [52, 2, 1, "", "lower_central_series"], [52, 2, 1, "", "make_perm"], [52, 4, 1, "", "max_div"], [52, 2, 1, "", "minimal_block"], [52, 2, 1, "", "minimal_blocks"], [52, 2, 1, "", "normal_closure"], [52, 2, 1, "", "orbit"], [52, 2, 1, "", "orbit_rep"], [52, 2, 1, "", "orbit_transversal"], [52, 2, 1, "", "orbits"], [52, 2, 1, "", "order"], [52, 2, 1, "", "pointwise_stabilizer"], [52, 2, 1, "", "polycyclic_group"], [52, 2, 1, "", "presentation"], [52, 2, 1, "", "random"], [52, 2, 1, "", "random_pr"], [52, 2, 1, "", "random_stab"], [52, 2, 1, "", "schreier_sims"], [52, 2, 1, "", "schreier_sims_incremental"], [52, 2, 1, "", "schreier_sims_random"], [52, 2, 1, "", "schreier_vector"], [52, 2, 1, "", "stabilizer"], [52, 4, 1, "", "strong_gens"], [52, 2, 1, "", "strong_presentation"], [52, 2, 1, "", "subgroup"], [52, 2, 1, "", "subgroup_search"], [52, 2, 1, "", "sylow_subgroup"], [52, 4, 1, "", "transitivity_degree"]], "sympy.combinatorics.permutations": [[53, 1, 1, "", "Cycle"], [53, 1, 1, "", "Permutation"], [53, 3, 1, "", "_af_parity"]], "sympy.combinatorics.permutations.Cycle": [[53, 2, 1, "", "list"]], "sympy.combinatorics.permutations.Permutation": [[53, 2, 1, "", "apply"], [53, 4, 1, "", "array_form"], [53, 2, 1, "", "ascents"], [53, 2, 1, "", "atoms"], [53, 4, 1, "", "cardinality"], [53, 2, 1, "", "commutator"], [53, 2, 1, "", "commutes_with"], [53, 4, 1, "", "cycle_structure"], [53, 4, 1, "", "cycles"], [53, 4, 1, "", "cyclic_form"], [53, 2, 1, "", "descents"], [53, 2, 1, "", "from_inversion_vector"], [53, 2, 1, "", "from_sequence"], [53, 4, 1, "", "full_cyclic_form"], [53, 2, 1, "", "get_adjacency_distance"], [53, 2, 1, "", "get_adjacency_matrix"], [53, 2, 1, "", "get_positional_distance"], [53, 2, 1, "", "get_precedence_distance"], [53, 2, 1, "", "get_precedence_matrix"], [53, 2, 1, "", "index"], [53, 2, 1, "", "inversion_vector"], [53, 2, 1, "", "inversions"], [53, 4, 1, "", "is_Empty"], [53, 4, 1, "", "is_Identity"], [53, 4, 1, "", "is_Singleton"], [53, 4, 1, "", "is_even"], [53, 4, 1, "", "is_odd"], [53, 2, 1, "", "josephus"], [53, 2, 1, "", "length"], [53, 2, 1, "", "list"], [53, 2, 1, "", "max"], [53, 2, 1, "", "min"], [53, 2, 1, "", "mul_inv"], [53, 2, 1, "", "next_lex"], [53, 2, 1, "", "next_nonlex"], [53, 2, 1, "", "next_trotterjohnson"], [53, 2, 1, "", "order"], [53, 2, 1, "", "parity"], [53, 2, 1, "", "random"], [53, 2, 1, "", "rank"], [53, 2, 1, "", "rank_nonlex"], [53, 2, 1, "", "rank_trotterjohnson"], [53, 2, 1, "", "resize"], [53, 2, 1, "", "rmul"], [53, 2, 1, "", "rmul_with_af"], [53, 2, 1, "", "runs"], [53, 2, 1, "", "signature"], [53, 4, 1, "", "size"], [53, 2, 1, "", "support"], [53, 2, 1, "", "transpositions"], [53, 2, 1, "", "unrank_lex"], [53, 2, 1, "", "unrank_nonlex"], [53, 2, 1, "", "unrank_trotterjohnson"]], "sympy.combinatorics.polyhedron": [[54, 1, 1, "", "Polyhedron"]], "sympy.combinatorics.polyhedron.Polyhedron": [[54, 4, 1, "", "array_form"], [54, 4, 1, "", "corners"], [54, 4, 1, "", "cyclic_form"], [54, 4, 1, "", "edges"], [54, 4, 1, "", "faces"], [54, 4, 1, "", "pgroup"], [54, 2, 1, "", "reset"], [54, 2, 1, "", "rotate"], [54, 4, 1, "", "size"], [54, 4, 1, "", "vertices"]], "sympy.combinatorics.prufer": [[55, 1, 1, "", "Prufer"]], "sympy.combinatorics.prufer.Prufer": [[55, 2, 1, "", "edges"], [55, 2, 1, "", "next"], [55, 4, 1, "", "nodes"], [55, 2, 1, "", "prev"], [55, 2, 1, "", "prufer_rank"], [55, 4, 1, "", "prufer_repr"], [55, 4, 1, "", "rank"], [55, 4, 1, "", "size"], [55, 2, 1, "", "to_prufer"], [55, 2, 1, "", "to_tree"], [55, 4, 1, "", "tree_repr"], [55, 2, 1, "", "unrank"]], "sympy.combinatorics.subsets": [[56, 1, 1, "", "Subset"], [56, 2, 1, "", "ksubsets"]], "sympy.combinatorics.subsets.Subset": [[56, 2, 1, "", "bitlist_from_subset"], [56, 4, 1, "", "cardinality"], [56, 2, 1, "", "iterate_binary"], [56, 2, 1, "", "iterate_graycode"], [56, 2, 1, "", "next_binary"], [56, 2, 1, "", "next_gray"], [56, 2, 1, "", "next_lexicographic"], [56, 2, 1, "", "prev_binary"], [56, 2, 1, "", "prev_gray"], [56, 2, 1, "", "prev_lexicographic"], [56, 4, 1, "", "rank_binary"], [56, 4, 1, "", "rank_gray"], [56, 4, 1, "", "rank_lexicographic"], [56, 4, 1, "", "size"], [56, 4, 1, "", "subset"], [56, 2, 1, "", "subset_from_bitlist"], [56, 2, 1, "", "subset_indices"], [56, 4, 1, "", "superset"], [56, 4, 1, "", "superset_size"], [56, 2, 1, "", "unrank_binary"], [56, 2, 1, "", "unrank_gray"]], "sympy.combinatorics.tensor_can": [[57, 3, 1, "", "bsgs_direct_product"], [57, 3, 1, "", "canonicalize"], [57, 3, 1, "", "double_coset_can_rep"], [57, 3, 1, "", "get_symmetric_group_sgs"]], "sympy.combinatorics.testutil": [[58, 3, 1, "", "_cmp_perm_lists"], [58, 3, 1, "", "_naive_list_centralizer"], [58, 3, 1, "", "_verify_bsgs"], [58, 3, 1, "", "_verify_centralizer"], [58, 3, 1, "", "_verify_normal_closure"]], "sympy.combinatorics.util": [[59, 3, 1, "", "_base_ordering"], [59, 3, 1, "", "_check_cycles_alt_sym"], [59, 3, 1, "", "_distribute_gens_by_base"], [59, 3, 1, "", "_handle_precomputed_bsgs"], [59, 3, 1, "", "_orbits_transversals_from_bsgs"], [59, 3, 1, "", "_remove_gens"], [59, 3, 1, "", "_strip"], [59, 3, 1, "", "_strong_gens_from_distr"]], "sympy.concrete.expr_with_intlimits": [[60, 1, 1, "", "ExprWithIntLimits"]], "sympy.concrete.expr_with_intlimits.ExprWithIntLimits": [[60, 2, 1, "", "change_index"], [60, 4, 1, "", "has_empty_sequence"], [60, 2, 1, "", "index"], [60, 2, 1, "", "reorder"], [60, 2, 1, "", "reorder_limit"]], "sympy.concrete.expr_with_limits": [[88, 1, 1, "", "ExprWithLimits"]], "sympy.concrete.expr_with_limits.ExprWithLimits": [[88, 4, 1, "", "bound_symbols"], [88, 4, 1, "", "free_symbols"], [88, 4, 1, "", "function"], [88, 4, 1, "", "has_finite_limits"], [88, 4, 1, "", "has_reversed_limits"], [88, 4, 1, "", "is_number"], [88, 4, 1, "", "limits"], [88, 4, 1, "", "variables"]], "sympy.concrete.gosper": [[60, 3, 1, "", "gosper_normal"], [60, 3, 1, "", "gosper_sum"], [60, 3, 1, "", "gosper_term"]], "sympy.concrete.products": [[60, 1, 1, "", "Product"], [60, 3, 1, "", "product"]], "sympy.concrete.products.Product": [[60, 2, 1, "", "is_convergent"], [60, 2, 1, "", "reverse_order"]], "sympy.concrete.summations": [[60, 1, 1, "", "Sum"], [60, 3, 1, "", "summation"]], "sympy.concrete.summations.Sum": [[60, 2, 1, "", "euler_maclaurin"], [60, 2, 1, "", "eval_zeta_function"], [60, 2, 1, "", "is_absolutely_convergent"], [60, 2, 1, "", "is_convergent"], [60, 2, 1, "", "reverse_order"]], "sympy.core": [[61, 0, 0, "-", "add"], [61, 0, 0, "-", "assumptions"], [61, 0, 0, "-", "basic"], [61, 0, 0, "-", "cache"], [61, 0, 0, "-", "containers"], [61, 0, 0, "-", "evalf"], [61, 0, 0, "-", "expr"], [61, 0, 0, "-", "exprtools"], [61, 0, 0, "-", "function"], [61, 0, 0, "-", "kind"], [61, 0, 0, "-", "mod"], [61, 0, 0, "-", "mul"], [61, 0, 0, "-", "multidimensional"], [61, 0, 0, "-", "numbers"], [61, 0, 0, "-", "power"], [61, 0, 0, "-", "random"], [61, 0, 0, "-", "relational"], [61, 0, 0, "-", "singleton"], [61, 0, 0, "-", "symbol"], [61, 0, 0, "-", "sympify"], [61, 0, 0, "-", "traversal"]], "sympy.core.add": [[61, 1, 1, "", "Add"]], "sympy.core.add.Add": [[61, 2, 1, "", "as_coeff_Add"], [61, 2, 1, "", "as_coeff_add"], [61, 2, 1, "", "as_content_primitive"], [61, 2, 1, "", "as_numer_denom"], [61, 2, 1, "", "as_real_imag"], [61, 2, 1, "", "as_two_terms"], [61, 2, 1, "", "class_key"], [61, 2, 1, "", "extract_leading_order"], [61, 2, 1, "", "flatten"], [61, 2, 1, "", "primitive"]], "sympy.core.basic": [[61, 1, 1, "", "Atom"], [61, 1, 1, "", "Basic"]], "sympy.core.basic.Basic": [[61, 4, 1, "", "args"], [61, 2, 1, "", "as_content_primitive"], [61, 2, 1, "", "as_dummy"], [61, 4, 1, "", "assumptions0"], [61, 2, 1, "", "atoms"], [61, 4, 1, "", "canonical_variables"], [61, 2, 1, "", "class_key"], [61, 2, 1, "", "compare"], [61, 2, 1, "", "count"], [61, 2, 1, "", "count_ops"], [61, 2, 1, "", "doit"], [61, 2, 1, "", "dummy_eq"], [61, 2, 1, "", "find"], [61, 4, 1, "", "free_symbols"], [61, 2, 1, "", "fromiter"], [61, 4, 1, "", "func"], [61, 2, 1, "", "has"], [61, 2, 1, "", "has_free"], [61, 2, 1, "", "has_xfree"], [61, 4, 1, "", "is_comparable"], [61, 2, 1, "", "match"], [61, 2, 1, "", "matches"], [61, 2, 1, "", "rcall"], [61, 2, 1, "", "refine"], [61, 2, 1, "", "replace"], [61, 2, 1, "", "rewrite"], [61, 2, 1, "", "simplify"], [61, 2, 1, "", "sort_key"], [61, 2, 1, "", "subs"], [61, 2, 1, "", "xreplace"]], "sympy.core.cache": [[61, 3, 1, "", "__cacheit"]], "sympy.core.containers": [[61, 1, 1, "", "Dict"], [61, 1, 1, "", "Tuple"], [61, 1, 1, "", "TupleKind"]], "sympy.core.containers.Dict": [[61, 2, 1, "", "get"], [61, 2, 1, "", "items"], [61, 2, 1, "", "keys"], [61, 2, 1, "", "values"]], "sympy.core.containers.Tuple": [[61, 2, 1, "", "index"], [61, 4, 1, "", "kind"], [61, 2, 1, "", "tuple_count"]], "sympy.core.evalf": [[61, 1, 1, "", "EvalfMixin"], [61, 3, 1, "", "N"], [61, 1, 1, "", "PrecisionExhausted"]], "sympy.core.evalf.EvalfMixin": [[61, 2, 1, "", "evalf"], [61, 2, 1, "", "n"]], "sympy.core.expr": [[61, 1, 1, "", "AtomicExpr"], [61, 1, 1, "", "Expr"], [61, 1, 1, "", "UnevaluatedExpr"]], "sympy.core.expr.Expr": [[61, 2, 1, "", "apart"], [61, 2, 1, "", "args_cnc"], [61, 2, 1, "", "as_coeff_Add"], [61, 2, 1, "", "as_coeff_Mul"], [61, 2, 1, "", "as_coeff_add"], [61, 2, 1, "", "as_coeff_exponent"], [61, 2, 1, "", "as_coeff_mul"], [61, 2, 1, "", "as_coefficient"], [61, 2, 1, "", "as_coefficients_dict"], [61, 2, 1, "", "as_content_primitive"], [61, 2, 1, "", "as_expr"], [61, 2, 1, "", "as_independent"], [61, 2, 1, "", "as_leading_term"], [61, 2, 1, "", "as_numer_denom"], [61, 2, 1, "", "as_ordered_factors"], [61, 2, 1, "", "as_ordered_terms"], [61, 2, 1, "", "as_poly"], [61, 2, 1, "", "as_powers_dict"], [61, 2, 1, "", "as_real_imag"], [61, 2, 1, "", "as_terms"], [61, 2, 1, "", "aseries"], [61, 2, 1, "", "cancel"], [61, 2, 1, "", "coeff"], [61, 2, 1, "", "collect"], [61, 2, 1, "", "combsimp"], [61, 2, 1, "", "compute_leading_term"], [61, 2, 1, "", "conjugate"], [61, 2, 1, "", "could_extract_minus_sign"], [61, 2, 1, "", "count_ops"], [61, 2, 1, "", "equals"], [61, 2, 1, "", "expand"], [61, 4, 1, "", "expr_free_symbols"], [61, 2, 1, "", "extract_additively"], [61, 2, 1, "", "extract_branch_factor"], [61, 2, 1, "", "extract_multiplicatively"], [61, 2, 1, "", "factor"], [61, 2, 1, "", "fourier_series"], [61, 2, 1, "", "fps"], [61, 2, 1, "", "gammasimp"], [61, 2, 1, "", "getO"], [61, 2, 1, "", "getn"], [61, 2, 1, "", "integrate"], [61, 2, 1, "", "invert"], [61, 2, 1, "", "is_algebraic_expr"], [61, 2, 1, "", "is_constant"], [61, 2, 1, "", "is_meromorphic"], [61, 4, 1, "", "is_number"], [61, 2, 1, "", "is_polynomial"], [61, 2, 1, "", "is_rational_function"], [61, 2, 1, "", "leadterm"], [61, 2, 1, "", "limit"], [61, 2, 1, "", "lseries"], [61, 2, 1, "", "normal"], [61, 2, 1, "", "nseries"], [61, 2, 1, "", "nsimplify"], [61, 2, 1, "", "powsimp"], [61, 2, 1, "", "primitive"], [61, 2, 1, "", "radsimp"], [61, 2, 1, "", "ratsimp"], [61, 2, 1, "", "removeO"], [61, 2, 1, "", "round"], [61, 2, 1, "", "separate"], [61, 2, 1, "", "series"], [61, 2, 1, "", "taylor_term"], [61, 2, 1, "", "together"], [61, 2, 1, "", "trigsimp"]], "sympy.core.exprtools": [[61, 3, 1, "", "factor_terms"], [61, 3, 1, "", "gcd_terms"]], "sympy.core.function": [[61, 1, 1, "", "Derivative"], [61, 1, 1, "", "Function"], [61, 1, 1, "", "FunctionClass"], [61, 1, 1, "", "Lambda"], [61, 1, 1, "", "PoleError"], [61, 1, 1, "", "Subs"], [61, 1, 1, "", "WildFunction"], [61, 3, 1, "", "count_ops"], [61, 3, 1, "", "diff"], [61, 3, 1, "", "expand"], [61, 3, 1, "", "expand_complex"], [61, 3, 1, "", "expand_func"], [61, 3, 1, "", "expand_log"], [61, 3, 1, "", "expand_mul"], [61, 3, 1, "", "expand_multinomial"], [61, 3, 1, "", "expand_power_base"], [61, 3, 1, "", "expand_power_exp"], [61, 3, 1, "", "expand_trig"], [61, 3, 1, "", "nfloat"]], "sympy.core.function.Derivative": [[61, 4, 1, "", "_diff_wrt"], [61, 2, 1, "", "_sort_variable_count"], [61, 2, 1, "", "as_finite_difference"], [61, 2, 1, "", "doit_numerically"]], "sympy.core.function.Function": [[61, 2, 1, "", "as_base_exp"], [61, 2, 1, "", "fdiff"], [61, 2, 1, "", "is_singular"]], "sympy.core.function.FunctionClass": [[61, 4, 1, "", "nargs"]], "sympy.core.function.Lambda": [[61, 4, 1, "", "bound_symbols"], [61, 4, 1, "", "expr"], [61, 4, 1, "", "is_identity"], [61, 4, 1, "", "signature"], [61, 4, 1, "", "variables"]], "sympy.core.function.Subs": [[61, 4, 1, "", "bound_symbols"], [61, 4, 1, "", "expr"], [61, 4, 1, "", "point"], [61, 4, 1, "", "variables"]], "sympy.core.kind": [[61, 5, 1, "", "BooleanKind"], [61, 1, 1, "", "Kind"], [61, 5, 1, "", "NumberKind"], [61, 5, 1, "", "UndefinedKind"]], "sympy.core.mod": [[61, 1, 1, "", "Mod"]], "sympy.core.mul": [[61, 1, 1, "", "Mul"], [61, 3, 1, "", "prod"]], "sympy.core.mul.Mul": [[61, 2, 1, "", "as_coeff_Mul"], [61, 2, 1, "", "as_content_primitive"], [61, 2, 1, "", "as_ordered_factors"], [61, 2, 1, "", "as_two_terms"], [61, 2, 1, "", "flatten"]], "sympy.core.multidimensional": [[61, 1, 1, "", "vectorize"]], "sympy.core.numbers": [[61, 1, 1, "", "AlgebraicNumber"], [61, 1, 1, "", "Catalan"], [61, 1, 1, "", "ComplexInfinity"], [61, 1, 1, "", "EulerGamma"], [61, 1, 1, "", "Exp1"], [61, 1, 1, "", "Float"], [61, 1, 1, "", "GoldenRatio"], [61, 1, 1, "", "Half"], [61, 1, 1, "", "ImaginaryUnit"], [61, 1, 1, "", "Infinity"], [61, 1, 1, "", "Integer"], [61, 1, 1, "", "NaN"], [61, 1, 1, "", "NegativeInfinity"], [61, 1, 1, "", "NegativeOne"], [61, 1, 1, "", "Number"], [61, 1, 1, "", "NumberSymbol"], [61, 1, 1, "", "One"], [61, 1, 1, "", "Pi"], [61, 1, 1, "", "Rational"], [61, 5, 1, "", "RealNumber"], [61, 1, 1, "", "TribonacciConstant"], [61, 1, 1, "", "Zero"], [61, 3, 1, "", "igcd"], [61, 3, 1, "", "ilcm"], [61, 3, 1, "", "mod_inverse"], [61, 3, 1, "", "seterr"]], "sympy.core.numbers.AlgebraicNumber": [[61, 2, 1, "", "__new__"], [61, 2, 1, "", "as_expr"], [61, 2, 1, "", "as_poly"], [61, 2, 1, "", "coeffs"], [61, 2, 1, "", "field_element"], [61, 4, 1, "", "is_aliased"], [61, 4, 1, "", "is_primitive_element"], [61, 2, 1, "", "minpoly_of_element"], [61, 2, 1, "", "native_coeffs"], [61, 2, 1, "", "primitive_element"], [61, 2, 1, "", "to_algebraic_integer"], [61, 2, 1, "", "to_primitive_element"], [61, 2, 1, "", "to_root"]], "sympy.core.numbers.Number": [[61, 2, 1, "", "as_coeff_Add"], [61, 2, 1, "", "as_coeff_Mul"], [61, 2, 1, "", "cofactors"], [61, 2, 1, "", "gcd"], [61, 2, 1, "", "lcm"]], "sympy.core.numbers.NumberSymbol": [[61, 2, 1, "", "approximation"]], "sympy.core.numbers.Rational": [[61, 2, 1, "", "as_coeff_Add"], [61, 2, 1, "", "as_coeff_Mul"], [61, 2, 1, "", "as_content_primitive"], [61, 2, 1, "", "factors"], [61, 2, 1, "", "limit_denominator"]], "sympy.core.power": [[61, 1, 1, "", "Pow"], [61, 3, 1, "", "integer_log"], [61, 3, 1, "", "integer_nthroot"]], "sympy.core.power.Pow": [[61, 2, 1, "", "as_base_exp"], [61, 2, 1, "", "as_content_primitive"]], "sympy.core.random": [[61, 3, 1, "", "_randint"], [61, 3, 1, "", "_randrange"], [61, 3, 1, "", "random_complex_number"], [61, 3, 1, "", "test_derivative_numerically"], [61, 3, 1, "", "verify_numerically"]], "sympy.core.relational": [[61, 5, 1, "", "Eq"], [61, 1, 1, "", "Equality"], [61, 5, 1, "", "Ge"], [61, 1, 1, "", "GreaterThan"], [61, 5, 1, "", "Gt"], [61, 5, 1, "", "Le"], [61, 1, 1, "", "LessThan"], [61, 5, 1, "", "Lt"], [61, 5, 1, "", "Ne"], [61, 5, 1, "", "Rel"], [61, 1, 1, "", "Relational"], [61, 1, 1, "", "StrictGreaterThan"], [61, 1, 1, "", "StrictLessThan"], [61, 1, 1, "", "Unequality"]], "sympy.core.relational.Equality": [[61, 2, 1, "", "as_poly"], [61, 2, 1, "", "integrate"]], "sympy.core.relational.Relational": [[61, 4, 1, "", "canonical"], [61, 2, 1, "", "equals"], [61, 4, 1, "", "lhs"], [61, 4, 1, "", "negated"], [61, 4, 1, "", "reversed"], [61, 4, 1, "", "reversedsign"], [61, 4, 1, "", "rhs"], [61, 4, 1, "", "strict"], [61, 4, 1, "", "weak"]], "sympy.core.singleton": [[61, 1, 1, "", "Singleton"], [61, 1, 1, "", "SingletonRegistry"]], "sympy.core.sorting": [[61, 3, 1, "", "default_sort_key"], [61, 3, 1, "", "ordered"]], "sympy.core.symbol": [[61, 1, 1, "", "Dummy"], [61, 1, 1, "", "Symbol"], [61, 1, 1, "", "Wild"], [61, 3, 1, "", "symbols"], [61, 3, 1, "", "var"]], "sympy.core.sympify": [[61, 3, 1, "", "sympify"]], "sympy.core.traversal": [[61, 3, 1, "", "bottom_up"], [61, 3, 1, "", "postorder_traversal"], [61, 3, 1, "", "preorder_traversal"], [61, 3, 1, "", "use"], [61, 3, 1, "", "walk"]], "sympy.crypto": [[62, 0, 0, "-", "crypto"]], "sympy.crypto.crypto": [[62, 3, 1, "", "AZ"], [62, 3, 1, "", "bifid5_square"], [62, 3, 1, "", "bifid6_square"], [62, 3, 1, "", "check_and_join"], [62, 3, 1, "", "cycle_list"], [62, 3, 1, "", "decipher_affine"], [62, 3, 1, "", "decipher_atbash"], [62, 3, 1, "", "decipher_bifid"], [62, 3, 1, "", "decipher_bifid5"], [62, 3, 1, "", "decipher_bifid6"], [62, 3, 1, "", "decipher_elgamal"], [62, 3, 1, "", "decipher_gm"], [62, 3, 1, "", "decipher_hill"], [62, 3, 1, "", "decipher_kid_rsa"], [62, 3, 1, "", "decipher_railfence"], [62, 3, 1, "", "decipher_rot13"], [62, 3, 1, "", "decipher_rsa"], [62, 3, 1, "", "decipher_shift"], [62, 3, 1, "", "decipher_vigenere"], [62, 3, 1, "", "decode_morse"], [62, 3, 1, "", "dh_private_key"], [62, 3, 1, "", "dh_public_key"], [62, 3, 1, "", "dh_shared_key"], [62, 3, 1, "", "elgamal_private_key"], [62, 3, 1, "", "elgamal_public_key"], [62, 3, 1, "", "encipher_affine"], [62, 3, 1, "", "encipher_atbash"], [62, 3, 1, "", "encipher_bifid"], [62, 3, 1, "", "encipher_bifid5"], [62, 3, 1, "", "encipher_bifid6"], [62, 3, 1, "", "encipher_elgamal"], [62, 3, 1, "", "encipher_gm"], [62, 3, 1, "", "encipher_hill"], [62, 3, 1, "", "encipher_kid_rsa"], [62, 3, 1, "", "encipher_railfence"], [62, 3, 1, "", "encipher_rot13"], [62, 3, 1, "", "encipher_rsa"], [62, 3, 1, "", "encipher_shift"], [62, 3, 1, "", "encipher_substitution"], [62, 3, 1, "", "encipher_vigenere"], [62, 3, 1, "", "encode_morse"], [62, 3, 1, "", "gm_private_key"], [62, 3, 1, "", "gm_public_key"], [62, 3, 1, "", "kid_rsa_private_key"], [62, 3, 1, "", "kid_rsa_public_key"], [62, 3, 1, "", "lfsr_autocorrelation"], [62, 3, 1, "", "lfsr_connection_polynomial"], [62, 3, 1, "", "lfsr_sequence"], [62, 3, 1, "", "padded_key"], [62, 3, 1, "", "rsa_private_key"], [62, 3, 1, "", "rsa_public_key"]], "sympy.diffgeom": [[63, 1, 1, "", "BaseCovarDerivativeOp"], [63, 1, 1, "", "BaseScalarField"], [63, 1, 1, "", "BaseVectorField"], [63, 1, 1, "", "Commutator"], [63, 1, 1, "", "CoordSystem"], [63, 1, 1, "", "CoordinateSymbol"], [63, 1, 1, "", "CovarDerivativeOp"], [63, 1, 1, "", "Differential"], [63, 1, 1, "", "LieDerivative"], [63, 1, 1, "", "Manifold"], [63, 1, 1, "", "Patch"], [63, 1, 1, "", "Point"], [63, 1, 1, "", "TensorProduct"], [63, 1, 1, "", "WedgeProduct"], [63, 3, 1, "", "intcurve_diffequ"], [63, 3, 1, "", "intcurve_series"], [63, 3, 1, "", "metric_to_Christoffel_1st"], [63, 3, 1, "", "metric_to_Christoffel_2nd"], [63, 3, 1, "", "metric_to_Ricci_components"], [63, 3, 1, "", "metric_to_Riemann_components"], [63, 3, 1, "", "twoform_to_matrix"], [63, 3, 1, "", "vectors_in_basis"]], "sympy.diffgeom.CoordSystem": [[63, 2, 1, "", "base_oneform"], [63, 2, 1, "", "base_oneforms"], [63, 2, 1, "", "base_scalar"], [63, 2, 1, "", "base_scalars"], [63, 2, 1, "", "base_vector"], [63, 2, 1, "", "base_vectors"], [63, 2, 1, "", "coord_function"], [63, 2, 1, "", "coord_functions"], [63, 2, 1, "", "coord_tuple_transform_to"], [63, 2, 1, "", "jacobian"], [63, 2, 1, "", "jacobian_determinant"], [63, 2, 1, "", "jacobian_matrix"], [63, 2, 1, "", "point"], [63, 2, 1, "", "point_to_coords"], [63, 2, 1, "", "transform"], [63, 2, 1, "", "transformation"]], "sympy.diffgeom.Point": [[63, 2, 1, "", "coords"]], "sympy.discrete": [[64, 0, 0, "-", "convolutions"], [64, 0, 0, "-", "transforms"]], "sympy.discrete.convolutions": [[64, 3, 1, "", "convolution"], [64, 3, 1, "", "convolution_fft"], [64, 3, 1, "", "convolution_fwht"], [64, 3, 1, "", "convolution_ntt"], [64, 3, 1, "", "convolution_subset"], [64, 3, 1, "", "covering_product"], [64, 3, 1, "", "intersecting_product"]], "sympy.discrete.transforms": [[64, 3, 1, "", "fft"], [64, 3, 1, "", "fwht"], [64, 3, 1, "", "ifft"], [64, 3, 1, "", "ifwht"], [64, 3, 1, "", "intt"], [64, 3, 1, "", "inverse_mobius_transform"], [64, 3, 1, "", "mobius_transform"], [64, 3, 1, "", "ntt"]], "sympy.external.pythonmpq": [[201, 1, 1, "", "PythonMPQ"]], "sympy.functions.combinatorial.factorials": [[66, 1, 1, "", "FallingFactorial"], [66, 1, 1, "", "MultiFactorial"], [66, 1, 1, "", "RisingFactorial"], [66, 1, 1, "", "binomial"], [66, 1, 1, "", "factorial"], [66, 1, 1, "", "factorial2"], [66, 1, 1, "", "subfactorial"]], "sympy.functions.combinatorial.numbers": [[66, 1, 1, "", "andre"], [66, 1, 1, "", "bell"], [66, 1, 1, "", "bernoulli"], [66, 1, 1, "", "catalan"], [66, 1, 1, "", "euler"], [66, 1, 1, "", "fibonacci"], [66, 1, 1, "", "genocchi"], [66, 1, 1, "", "harmonic"], [66, 1, 1, "", "lucas"], [66, 3, 1, "", "nC"], [66, 3, 1, "", "nP"], [66, 3, 1, "", "nT"], [66, 1, 1, "", "partition"], [66, 3, 1, "", "stirling"], [66, 1, 1, "", "tribonacci"]], "sympy.functions.elementary.complexes": [[67, 1, 1, "", "Abs"], [67, 1, 1, "", "arg"], [67, 1, 1, "", "conjugate"], [67, 1, 1, "", "im"], [67, 1, 1, "", "periodic_argument"], [67, 1, 1, "", "polar_lift"], [67, 1, 1, "", "principal_branch"], [67, 1, 1, "", "re"], [67, 1, 1, "", "sign"]], "sympy.functions.elementary.complexes.Abs": [[67, 2, 1, "", "fdiff"]], "sympy.functions.elementary.complexes.im": [[67, 2, 1, "", "as_real_imag"]], "sympy.functions.elementary.complexes.re": [[67, 2, 1, "", "as_real_imag"]], "sympy.functions.elementary.exponential": [[67, 1, 1, "", "LambertW"], [67, 1, 1, "", "exp"], [67, 1, 1, "", "exp_polar"], [67, 1, 1, "", "log"]], "sympy.functions.elementary.exponential.LambertW": [[67, 2, 1, "", "fdiff"]], "sympy.functions.elementary.exponential.exp": [[67, 2, 1, "", "as_real_imag"], [67, 4, 1, "", "base"], [67, 2, 1, "", "fdiff"], [67, 2, 1, "", "taylor_term"]], "sympy.functions.elementary.exponential.log": [[67, 2, 1, "", "as_base_exp"], [67, 2, 1, "", "as_real_imag"], [67, 2, 1, "", "fdiff"], [67, 2, 1, "", "inverse"], [67, 2, 1, "", "taylor_term"]], "sympy.functions.elementary.hyperbolic": [[67, 1, 1, "", "HyperbolicFunction"], [67, 1, 1, "", "acosh"], [67, 1, 1, "", "acoth"], [67, 1, 1, "", "acsch"], [67, 1, 1, "", "asech"], [67, 1, 1, "", "asinh"], [67, 1, 1, "", "atanh"], [67, 1, 1, "", "cosh"], [67, 1, 1, "", "coth"], [67, 1, 1, "", "csch"], [67, 1, 1, "", "sech"], [67, 1, 1, "", "sinh"], [67, 1, 1, "", "tanh"]], "sympy.functions.elementary.hyperbolic.acosh": [[67, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.acoth": [[67, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.acsch": [[67, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.asech": [[67, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.asinh": [[67, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.atanh": [[67, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.coth": [[67, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.csch": [[67, 2, 1, "", "fdiff"], [67, 2, 1, "", "taylor_term"]], "sympy.functions.elementary.hyperbolic.sinh": [[67, 2, 1, "", "as_real_imag"], [67, 2, 1, "", "fdiff"], [67, 2, 1, "", "inverse"], [67, 2, 1, "", "taylor_term"]], "sympy.functions.elementary.hyperbolic.tanh": [[67, 2, 1, "", "inverse"]], "sympy.functions.elementary.integers": [[67, 1, 1, "", "RoundFunction"], [67, 1, 1, "", "ceiling"], [67, 1, 1, "", "floor"], [67, 1, 1, "", "frac"]], "sympy.functions.elementary.miscellaneous": [[67, 1, 1, "", "IdentityFunction"], [67, 1, 1, "", "Max"], [67, 1, 1, "", "Min"], [67, 3, 1, "", "cbrt"], [67, 3, 1, "", "real_root"], [67, 3, 1, "", "root"], [67, 3, 1, "", "sqrt"]], "sympy.functions.elementary.piecewise": [[67, 1, 1, "", "ExprCondPair"], [67, 1, 1, "", "Piecewise"], [67, 3, 1, "", "piecewise_exclusive"], [67, 3, 1, "", "piecewise_fold"]], "sympy.functions.elementary.piecewise.ExprCondPair": [[67, 4, 1, "", "cond"], [67, 4, 1, "", "expr"]], "sympy.functions.elementary.piecewise.Piecewise": [[67, 2, 1, "", "_eval_integral"], [67, 2, 1, "", "as_expr_set_pairs"], [67, 2, 1, "", "doit"], [67, 2, 1, "", "eval"], [67, 2, 1, "", "piecewise_integrate"]], "sympy.functions.elementary.trigonometric": [[67, 1, 1, "", "acos"], [67, 1, 1, "", "acot"], [67, 1, 1, "", "acsc"], [67, 1, 1, "", "asec"], [67, 1, 1, "", "asin"], [67, 1, 1, "", "atan"], [67, 1, 1, "", "atan2"], [67, 1, 1, "", "cos"], [67, 1, 1, "", "cot"], [67, 1, 1, "", "csc"], [67, 1, 1, "", "sec"], [67, 1, 1, "", "sin"], [67, 1, 1, "", "sinc"], [67, 1, 1, "", "tan"]], "sympy.functions.elementary.trigonometric.acos": [[67, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.acot": [[67, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.acsc": [[67, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.asec": [[67, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.asin": [[67, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.atan": [[67, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.cot": [[67, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.tan": [[67, 2, 1, "", "inverse"]], "sympy.functions.special": [[69, 0, 0, "-", "bessel"], [69, 0, 0, "-", "beta_functions"], [69, 0, 0, "-", "elliptic_integrals"], [69, 0, 0, "-", "error_functions"], [69, 0, 0, "-", "gamma_functions"], [69, 0, 0, "-", "mathieu_functions"], [69, 0, 0, "-", "polynomials"], [69, 0, 0, "-", "singularity_functions"], [69, 0, 0, "-", "zeta_functions"]], "sympy.functions.special.bessel": [[69, 1, 1, "", "AiryBase"], [69, 1, 1, "", "BesselBase"], [69, 1, 1, "", "airyai"], [69, 1, 1, "", "airyaiprime"], [69, 1, 1, "", "airybi"], [69, 1, 1, "", "airybiprime"], [69, 1, 1, "", "besseli"], [69, 1, 1, "", "besselj"], [69, 1, 1, "", "besselk"], [69, 1, 1, "", "bessely"], [69, 1, 1, "", "hankel1"], [69, 1, 1, "", "hankel2"], [69, 1, 1, "", "jn"], [69, 3, 1, "", "jn_zeros"], [69, 1, 1, "", "marcumq"], [69, 1, 1, "", "yn"]], "sympy.functions.special.bessel.BesselBase": [[69, 4, 1, "", "argument"], [69, 4, 1, "", "order"]], "sympy.functions.special.beta_functions": [[69, 1, 1, "", "beta"]], "sympy.functions.special.bsplines": [[69, 3, 1, "", "bspline_basis"], [69, 3, 1, "", "bspline_basis_set"], [69, 3, 1, "", "interpolating_spline"]], "sympy.functions.special.delta_functions": [[69, 1, 1, "", "DiracDelta"], [69, 1, 1, "", "Heaviside"]], "sympy.functions.special.delta_functions.DiracDelta": [[69, 2, 1, "", "eval"], [69, 2, 1, "", "fdiff"], [69, 2, 1, "", "is_simple"]], "sympy.functions.special.delta_functions.Heaviside": [[69, 2, 1, "", "eval"], [69, 2, 1, "", "fdiff"], [69, 4, 1, "", "pargs"]], "sympy.functions.special.elliptic_integrals": [[69, 1, 1, "", "elliptic_e"], [69, 1, 1, "", "elliptic_f"], [69, 1, 1, "", "elliptic_k"], [69, 1, 1, "", "elliptic_pi"]], "sympy.functions.special.error_functions": [[69, 1, 1, "", "Chi"], [69, 1, 1, "", "Ci"], [69, 3, 1, "", "E1"], [69, 1, 1, "", "Ei"], [69, 1, 1, "", "FresnelIntegral"], [69, 1, 1, "", "Li"], [69, 1, 1, "", "Shi"], [69, 1, 1, "", "Si"], [69, 1, 1, "", "erf"], [69, 1, 1, "", "erf2"], [69, 1, 1, "", "erf2inv"], [69, 1, 1, "", "erfc"], [69, 1, 1, "", "erfcinv"], [69, 1, 1, "", "erfi"], [69, 1, 1, "", "erfinv"], [69, 1, 1, "", "expint"], [69, 1, 1, "", "fresnelc"], [69, 1, 1, "", "fresnels"], [69, 1, 1, "", "li"]], "sympy.functions.special.error_functions.erf": [[69, 2, 1, "", "inverse"]], "sympy.functions.special.error_functions.erfc": [[69, 2, 1, "", "inverse"]], "sympy.functions.special.error_functions.erfcinv": [[69, 2, 1, "", "inverse"]], "sympy.functions.special.error_functions.erfinv": [[69, 2, 1, "", "inverse"]], "sympy.functions.special.gamma_functions": [[69, 1, 1, "", "digamma"], [69, 1, 1, "", "gamma"], [69, 1, 1, "", "loggamma"], [69, 1, 1, "", "lowergamma"], [69, 1, 1, "", "multigamma"], [69, 1, 1, "", "polygamma"], [69, 1, 1, "", "trigamma"], [69, 1, 1, "", "uppergamma"]], "sympy.functions.special.hyper": [[69, 1, 1, "", "appellf1"], [69, 1, 1, "", "hyper"], [69, 1, 1, "", "meijerg"]], "sympy.functions.special.hyper.hyper": [[69, 4, 1, "", "ap"], [69, 4, 1, "", "argument"], [69, 4, 1, "", "bq"], [69, 4, 1, "", "convergence_statement"], [69, 4, 1, "", "eta"], [69, 4, 1, "", "radius_of_convergence"]], "sympy.functions.special.hyper.meijerg": [[69, 4, 1, "", "an"], [69, 4, 1, "", "aother"], [69, 4, 1, "", "ap"], [69, 4, 1, "", "argument"], [69, 4, 1, "", "bm"], [69, 4, 1, "", "bother"], [69, 4, 1, "", "bq"], [69, 4, 1, "", "delta"], [69, 2, 1, "", "get_period"], [69, 2, 1, "", "integrand"], [69, 4, 1, "", "is_number"], [69, 4, 1, "", "nu"]], "sympy.functions.special.mathieu_functions": [[69, 1, 1, "", "MathieuBase"], [69, 1, 1, "", "mathieuc"], [69, 1, 1, "", "mathieucprime"], [69, 1, 1, "", "mathieus"], [69, 1, 1, "", "mathieusprime"]], "sympy.functions.special.polynomials": [[69, 1, 1, "", "assoc_laguerre"], [69, 1, 1, "", "assoc_legendre"], [69, 1, 1, "", "chebyshevt"], [69, 1, 1, "", "chebyshevt_root"], [69, 1, 1, "", "chebyshevu"], [69, 1, 1, "", "chebyshevu_root"], [69, 1, 1, "", "gegenbauer"], [69, 1, 1, "", "hermite"], [69, 1, 1, "", "hermite_prob"], [69, 1, 1, "", "jacobi"], [69, 3, 1, "", "jacobi_normalized"], [69, 1, 1, "", "laguerre"], [69, 1, 1, "", "legendre"]], "sympy.functions.special.singularity_functions": [[69, 1, 1, "", "SingularityFunction"]], "sympy.functions.special.singularity_functions.SingularityFunction": [[69, 2, 1, "", "eval"], [69, 2, 1, "", "fdiff"]], "sympy.functions.special.spherical_harmonics": [[69, 1, 1, "", "Ynm"], [69, 3, 1, "", "Ynm_c"], [69, 1, 1, "", "Znm"]], "sympy.functions.special.tensor_functions": [[69, 3, 1, "", "Eijk"], [69, 1, 1, "", "KroneckerDelta"], [69, 1, 1, "", "LeviCivita"], [69, 3, 1, "", "eval_levicivita"]], "sympy.functions.special.tensor_functions.KroneckerDelta": [[69, 2, 1, "", "eval"], [69, 4, 1, "", "indices_contain_equal_information"], [69, 4, 1, "", "is_above_fermi"], [69, 4, 1, "", "is_below_fermi"], [69, 4, 1, "", "is_only_above_fermi"], [69, 4, 1, "", "is_only_below_fermi"], [69, 4, 1, "", "killable_index"], [69, 4, 1, "", "preferred_index"]], "sympy.functions.special.zeta_functions": [[69, 1, 1, "", "dirichlet_eta"], [69, 1, 1, "", "lerchphi"], [69, 1, 1, "", "polylog"], [69, 1, 1, "", "stieltjes"], [69, 1, 1, "", "zeta"]], "sympy.geometry": [[70, 0, 0, "-", "curve"], [71, 0, 0, "-", "ellipse"], [72, 0, 0, "-", "entity"], [74, 0, 0, "-", "line"], [75, 0, 0, "-", "plane"], [76, 0, 0, "-", "point"], [77, 0, 0, "-", "polygon"], [78, 0, 0, "-", "util"]], "sympy.geometry.curve": [[70, 1, 1, "", "Curve"]], "sympy.geometry.curve.Curve": [[70, 4, 1, "", "ambient_dimension"], [70, 2, 1, "", "arbitrary_point"], [70, 4, 1, "", "free_symbols"], [70, 4, 1, "", "functions"], [70, 4, 1, "", "length"], [70, 4, 1, "", "limits"], [70, 4, 1, "", "parameter"], [70, 2, 1, "", "plot_interval"], [70, 2, 1, "", "rotate"], [70, 2, 1, "", "scale"], [70, 2, 1, "", "translate"]], "sympy.geometry.ellipse": [[71, 1, 1, "", "Circle"], [71, 1, 1, "", "Ellipse"]], "sympy.geometry.ellipse.Circle": [[71, 4, 1, "", "circumference"], [71, 2, 1, "", "equation"], [71, 2, 1, "", "intersection"], [71, 4, 1, "", "radius"], [71, 2, 1, "", "reflect"], [71, 2, 1, "", "scale"], [71, 4, 1, "", "vradius"]], "sympy.geometry.ellipse.Ellipse": [[71, 4, 1, "", "apoapsis"], [71, 2, 1, "", "arbitrary_point"], [71, 4, 1, "", "area"], [71, 2, 1, "", "auxiliary_circle"], [71, 4, 1, "", "bounds"], [71, 4, 1, "", "center"], [71, 4, 1, "", "circumference"], [71, 2, 1, "", "director_circle"], [71, 4, 1, "", "eccentricity"], [71, 2, 1, "", "encloses_point"], [71, 2, 1, "", "equation"], [71, 2, 1, "", "evolute"], [71, 4, 1, "", "foci"], [71, 4, 1, "", "focus_distance"], [71, 4, 1, "", "hradius"], [71, 2, 1, "", "intersection"], [71, 2, 1, "", "is_tangent"], [71, 4, 1, "", "major"], [71, 4, 1, "", "minor"], [71, 2, 1, "", "normal_lines"], [71, 4, 1, "", "periapsis"], [71, 2, 1, "", "plot_interval"], [71, 2, 1, "", "polar_second_moment_of_area"], [71, 2, 1, "", "random_point"], [71, 2, 1, "", "reflect"], [71, 2, 1, "", "rotate"], [71, 2, 1, "", "scale"], [71, 2, 1, "", "second_moment_of_area"], [71, 2, 1, "", "section_modulus"], [71, 4, 1, "", "semilatus_rectum"], [71, 2, 1, "", "tangent_lines"], [71, 4, 1, "", "vradius"]], "sympy.geometry.entity": [[72, 1, 1, "", "GeometryEntity"]], "sympy.geometry.entity.GeometryEntity": [[72, 4, 1, "", "ambient_dimension"], [72, 4, 1, "", "bounds"], [72, 2, 1, "", "encloses"], [72, 2, 1, "", "intersection"], [72, 2, 1, "", "is_similar"], [72, 2, 1, "", "parameter_value"], [72, 2, 1, "", "reflect"], [72, 2, 1, "", "rotate"], [72, 2, 1, "", "scale"], [72, 2, 1, "", "translate"]], "sympy.geometry.line": [[74, 1, 1, "", "Line"], [74, 1, 1, "", "Line2D"], [74, 1, 1, "", "Line3D"], [74, 1, 1, "", "LinearEntity"], [74, 1, 1, "", "LinearEntity2D"], [74, 1, 1, "", "LinearEntity3D"], [74, 1, 1, "", "Ray"], [74, 1, 1, "", "Ray2D"], [74, 1, 1, "", "Ray3D"], [74, 1, 1, "", "Segment"], [74, 1, 1, "", "Segment2D"], [74, 1, 1, "", "Segment3D"]], "sympy.geometry.line.Line": [[74, 2, 1, "", "contains"], [74, 2, 1, "", "distance"], [74, 2, 1, "", "equals"], [74, 2, 1, "", "plot_interval"]], "sympy.geometry.line.Line2D": [[74, 4, 1, "", "coefficients"], [74, 2, 1, "", "equation"]], "sympy.geometry.line.Line3D": [[74, 2, 1, "", "equation"]], "sympy.geometry.line.LinearEntity": [[74, 4, 1, "", "ambient_dimension"], [74, 2, 1, "", "angle_between"], [74, 2, 1, "", "arbitrary_point"], [74, 2, 1, "", "are_concurrent"], [74, 2, 1, "", "bisectors"], [74, 2, 1, "", "contains"], [74, 4, 1, "", "direction"], [74, 2, 1, "", "intersection"], [74, 2, 1, "", "is_parallel"], [74, 2, 1, "", "is_perpendicular"], [74, 2, 1, "", "is_similar"], [74, 4, 1, "", "length"], [74, 4, 1, "", "p1"], [74, 4, 1, "", "p2"], [74, 2, 1, "", "parallel_line"], [74, 2, 1, "", "perpendicular_line"], [74, 2, 1, "", "perpendicular_segment"], [74, 4, 1, "", "points"], [74, 2, 1, "", "projection"], [74, 2, 1, "", "random_point"], [74, 2, 1, "", "smallest_angle_between"]], "sympy.geometry.line.LinearEntity2D": [[74, 4, 1, "", "bounds"], [74, 2, 1, "", "perpendicular_line"], [74, 4, 1, "", "slope"]], "sympy.geometry.line.LinearEntity3D": [[74, 4, 1, "", "direction_cosine"], [74, 4, 1, "", "direction_ratio"]], "sympy.geometry.line.Ray": [[74, 2, 1, "", "contains"], [74, 2, 1, "", "distance"], [74, 2, 1, "", "equals"], [74, 2, 1, "", "plot_interval"], [74, 4, 1, "", "source"]], "sympy.geometry.line.Ray2D": [[74, 2, 1, "", "closing_angle"], [74, 4, 1, "", "xdirection"], [74, 4, 1, "", "ydirection"]], "sympy.geometry.line.Ray3D": [[74, 4, 1, "", "xdirection"], [74, 4, 1, "", "ydirection"], [74, 4, 1, "", "zdirection"]], "sympy.geometry.line.Segment": [[74, 2, 1, "", "contains"], [74, 2, 1, "", "distance"], [74, 2, 1, "", "equals"], [74, 4, 1, "", "length"], [74, 4, 1, "", "midpoint"], [74, 2, 1, "", "perpendicular_bisector"], [74, 2, 1, "", "plot_interval"]], "sympy.geometry.plane": [[75, 1, 1, "", "Plane"]], "sympy.geometry.plane.Plane": [[75, 2, 1, "", "angle_between"], [75, 2, 1, "", "arbitrary_point"], [75, 2, 1, "", "are_concurrent"], [75, 2, 1, "", "distance"], [75, 2, 1, "", "equals"], [75, 2, 1, "", "equation"], [75, 2, 1, "", "intersection"], [75, 2, 1, "", "is_coplanar"], [75, 2, 1, "", "is_parallel"], [75, 2, 1, "", "is_perpendicular"], [75, 4, 1, "", "normal_vector"], [75, 4, 1, "", "p1"], [75, 2, 1, "", "parallel_plane"], [75, 2, 1, "", "parameter_value"], [75, 2, 1, "", "perpendicular_line"], [75, 2, 1, "", "perpendicular_plane"], [75, 2, 1, "", "projection"], [75, 2, 1, "", "projection_line"], [75, 2, 1, "", "random_point"]], "sympy.geometry.point": [[76, 1, 1, "", "Point"], [76, 1, 1, "", "Point2D"], [76, 1, 1, "", "Point3D"]], "sympy.geometry.point.Point": [[76, 2, 1, "", "affine_rank"], [76, 4, 1, "", "ambient_dimension"], [76, 2, 1, "", "are_coplanar"], [76, 2, 1, "", "canberra_distance"], [76, 2, 1, "", "distance"], [76, 2, 1, "", "dot"], [76, 2, 1, "", "equals"], [76, 2, 1, "", "intersection"], [76, 2, 1, "", "is_collinear"], [76, 2, 1, "", "is_concyclic"], [76, 4, 1, "", "is_nonzero"], [76, 2, 1, "", "is_scalar_multiple"], [76, 4, 1, "", "is_zero"], [76, 4, 1, "", "length"], [76, 2, 1, "", "midpoint"], [76, 4, 1, "", "origin"], [76, 4, 1, "", "orthogonal_direction"], [76, 2, 1, "", "project"], [76, 2, 1, "", "taxicab_distance"], [76, 4, 1, "", "unit"]], "sympy.geometry.point.Point2D": [[76, 4, 1, "", "bounds"], [76, 4, 1, "", "coordinates"], [76, 2, 1, "", "rotate"], [76, 2, 1, "", "scale"], [76, 2, 1, "", "transform"], [76, 2, 1, "", "translate"], [76, 4, 1, "", "x"], [76, 4, 1, "", "y"]], "sympy.geometry.point.Point3D": [[76, 2, 1, "", "are_collinear"], [76, 4, 1, "", "coordinates"], [76, 2, 1, "", "direction_cosine"], [76, 2, 1, "", "direction_ratio"], [76, 2, 1, "", "intersection"], [76, 2, 1, "", "scale"], [76, 2, 1, "", "transform"], [76, 2, 1, "", "translate"], [76, 4, 1, "", "x"], [76, 4, 1, "", "y"], [76, 4, 1, "", "z"]], "sympy.geometry.polygon": [[77, 1, 1, "", "Polygon"], [77, 1, 1, "", "RegularPolygon"], [77, 1, 1, "", "Triangle"]], "sympy.geometry.polygon.Polygon": [[77, 4, 1, "", "angles"], [77, 2, 1, "", "arbitrary_point"], [77, 4, 1, "", "area"], [77, 2, 1, "", "bisectors"], [77, 4, 1, "", "bounds"], [77, 4, 1, "", "centroid"], [77, 2, 1, "", "cut_section"], [77, 2, 1, "", "distance"], [77, 2, 1, "", "encloses_point"], [77, 2, 1, "", "first_moment_of_area"], [77, 2, 1, "", "intersection"], [77, 2, 1, "", "is_convex"], [77, 4, 1, "", "perimeter"], [77, 2, 1, "", "plot_interval"], [77, 2, 1, "", "polar_second_moment_of_area"], [77, 2, 1, "", "second_moment_of_area"], [77, 2, 1, "", "section_modulus"], [77, 4, 1, "", "sides"], [77, 4, 1, "", "vertices"]], "sympy.geometry.polygon.RegularPolygon": [[77, 4, 1, "", "angles"], [77, 4, 1, "", "apothem"], [77, 4, 1, "", "area"], [77, 4, 1, "", "args"], [77, 4, 1, "", "center"], [77, 4, 1, "", "centroid"], [77, 4, 1, "", "circumcenter"], [77, 4, 1, "", "circumcircle"], [77, 4, 1, "", "circumradius"], [77, 2, 1, "", "encloses_point"], [77, 4, 1, "", "exterior_angle"], [77, 4, 1, "", "incircle"], [77, 4, 1, "", "inradius"], [77, 4, 1, "", "interior_angle"], [77, 4, 1, "", "length"], [77, 4, 1, "", "radius"], [77, 2, 1, "", "reflect"], [77, 2, 1, "", "rotate"], [77, 4, 1, "", "rotation"], [77, 2, 1, "", "scale"], [77, 2, 1, "", "spin"], [77, 4, 1, "", "vertices"]], "sympy.geometry.polygon.Triangle": [[77, 4, 1, "", "altitudes"], [77, 2, 1, "", "bisectors"], [77, 4, 1, "", "circumcenter"], [77, 4, 1, "", "circumcircle"], [77, 4, 1, "", "circumradius"], [77, 4, 1, "", "eulerline"], [77, 4, 1, "", "excenters"], [77, 4, 1, "", "exradii"], [77, 4, 1, "", "incenter"], [77, 4, 1, "", "incircle"], [77, 4, 1, "", "inradius"], [77, 2, 1, "", "is_equilateral"], [77, 2, 1, "", "is_isosceles"], [77, 2, 1, "", "is_right"], [77, 2, 1, "", "is_scalene"], [77, 2, 1, "", "is_similar"], [77, 4, 1, "", "medial"], [77, 4, 1, "", "medians"], [77, 4, 1, "", "nine_point_circle"], [77, 4, 1, "", "orthocenter"], [77, 4, 1, "", "vertices"]], "sympy.geometry.util": [[78, 3, 1, "", "are_similar"], [78, 3, 1, "", "centroid"], [78, 3, 1, "", "convex_hull"], [78, 3, 1, "", "idiff"], [78, 3, 1, "", "intersection"]], "sympy.holonomic.holonomic": [[84, 1, 1, "", "DifferentialOperator"], [84, 1, 1, "", "DifferentialOperatorAlgebra"], [84, 3, 1, "", "DifferentialOperators"], [84, 1, 1, "", "HolonomicFunction"], [82, 3, 1, "", "_convert_poly_rat_alg"], [82, 3, 1, "", "_create_table"], [80, 3, 1, "", "expr_to_holonomic"], [80, 3, 1, "", "from_hyper"], [80, 3, 1, "", "from_meijerg"]], "sympy.holonomic.holonomic.DifferentialOperator": [[84, 2, 1, "", "is_singular"]], "sympy.holonomic.holonomic.HolonomicFunction": [[83, 2, 1, "", "composition"], [83, 2, 1, "", "diff"], [83, 2, 1, "", "evalf"], [83, 2, 1, "", "integrate"], [83, 2, 1, "", "series"], [83, 2, 1, "", "to_expr"], [83, 2, 1, "", "to_hyper"], [83, 2, 1, "", "to_meijerg"], [83, 2, 1, "", "to_sequence"]], "sympy.integrals.deltafunctions": [[88, 3, 1, "", "deltaintegrate"]], "sympy.integrals.heurisch": [[88, 3, 1, "", "components"], [88, 3, 1, "", "heurisch"]], "sympy.integrals.integrals": [[88, 1, 1, "", "Integral"], [88, 3, 1, "", "integrate"], [88, 3, 1, "", "line_integrate"]], "sympy.integrals.integrals.Integral": [[88, 2, 1, "", "as_sum"], [88, 2, 1, "", "doit"], [88, 4, 1, "", "free_symbols"], [88, 6, 1, "", "is_commutative"], [88, 2, 1, "", "principal_value"], [88, 2, 1, "", "transform"]], "sympy.integrals": [[88, 0, 0, "-", "intpoly"], [86, 0, 0, "-", "meijerint"], [86, 0, 0, "-", "meijerint_doc"], [88, 0, 0, "-", "transforms"]], "sympy.integrals.intpoly": [[88, 3, 1, "", "polytope_integrate"]], "sympy.integrals.manualintegrate": [[88, 3, 1, "", "integral_steps"], [88, 3, 1, "", "manualintegrate"]], "sympy.integrals.meijerint": [[86, 7, 1, "", "_CoeffExpValueError"], [86, 3, 1, "", "_check_antecedents"], [86, 3, 1, "", "_check_antecedents_1"], [86, 3, 1, "", "_check_antecedents_inversion"], [86, 3, 1, "", "_condsimp"], [86, 3, 1, "", "_create_lookup_table"], [86, 3, 1, "", "_dummy"], [86, 3, 1, "", "_dummy_"], [86, 3, 1, "", "_eval_cond"], [86, 3, 1, "", "_exponents"], [86, 3, 1, "", "_find_splitting_points"], [86, 3, 1, "", "_flip_g"], [86, 3, 1, "", "_functions"], [86, 3, 1, "", "_get_coeff_exp"], [86, 3, 1, "", "_guess_expansion"], [86, 3, 1, "", "_inflate_fox_h"], [86, 3, 1, "", "_inflate_g"], [86, 3, 1, "", "_int0oo"], [86, 3, 1, "", "_int0oo_1"], [86, 3, 1, "", "_int_inversion"], [86, 3, 1, "", "_is_analytic"], [86, 3, 1, "", "_meijerint_definite_2"], [86, 3, 1, "", "_meijerint_definite_3"], [86, 3, 1, "", "_meijerint_definite_4"], [86, 3, 1, "", "_meijerint_indefinite_1"], [86, 3, 1, "", "_mul_args"], [86, 3, 1, "", "_mul_as_two_parts"], [86, 3, 1, "", "_my_principal_branch"], [86, 3, 1, "", "_mytype"], [86, 3, 1, "", "_rewrite1"], [86, 3, 1, "", "_rewrite2"], [86, 3, 1, "", "_rewrite_inversion"], [86, 3, 1, "", "_rewrite_saxena"], [86, 3, 1, "", "_rewrite_saxena_1"], [86, 3, 1, "", "_rewrite_single"], [86, 3, 1, "", "_split_mul"], [86, 3, 1, "", "meijerint_definite"], [86, 3, 1, "", "meijerint_indefinite"], [86, 3, 1, "", "meijerint_inversion"]], "sympy.integrals.quadrature": [[88, 3, 1, "", "gauss_chebyshev_t"], [88, 3, 1, "", "gauss_chebyshev_u"], [88, 3, 1, "", "gauss_gen_laguerre"], [88, 3, 1, "", "gauss_hermite"], [88, 3, 1, "", "gauss_jacobi"], [88, 3, 1, "", "gauss_laguerre"], [88, 3, 1, "", "gauss_legendre"], [88, 3, 1, "", "gauss_lobatto"]], "sympy.integrals.rationaltools": [[88, 3, 1, "", "ratint"], [88, 3, 1, "", "ratint_logpart"], [88, 3, 1, "", "ratint_ratpart"]], "sympy.integrals.risch": [[88, 1, 1, "", "NonElementaryIntegral"], [88, 3, 1, "", "risch_integrate"]], "sympy.integrals.singularityfunctions": [[88, 3, 1, "", "singularityintegrate"]], "sympy.integrals.transforms": [[88, 1, 1, "", "CosineTransform"], [88, 1, 1, "", "FourierTransform"], [88, 1, 1, "", "HankelTransform"], [88, 1, 1, "", "IntegralTransform"], [88, 7, 1, "", "IntegralTransformError"], [88, 1, 1, "", "InverseCosineTransform"], [88, 1, 1, "", "InverseFourierTransform"], [88, 1, 1, "", "InverseHankelTransform"], [88, 1, 1, "", "InverseLaplaceTransform"], [88, 1, 1, "", "InverseMellinTransform"], [88, 1, 1, "", "InverseSineTransform"], [88, 1, 1, "", "LaplaceTransform"], [88, 1, 1, "", "MellinTransform"], [88, 1, 1, "", "SineTransform"], [88, 3, 1, "", "_fast_inverse_laplace"], [88, 3, 1, "", "_fourier_transform"], [88, 3, 1, "", "cosine_transform"], [88, 3, 1, "", "fourier_transform"], [88, 3, 1, "", "hankel_transform"], [88, 3, 1, "", "inverse_cosine_transform"], [88, 3, 1, "", "inverse_fourier_transform"], [88, 3, 1, "", "inverse_hankel_transform"], [88, 3, 1, "", "inverse_laplace_transform"], [88, 3, 1, "", "inverse_mellin_transform"], [88, 3, 1, "", "inverse_sine_transform"], [88, 3, 1, "", "laplace_transform"], [88, 3, 1, "", "mellin_transform"], [88, 3, 1, "", "sine_transform"]], "sympy.integrals.transforms.IntegralTransform": [[88, 2, 1, "", "doit"], [88, 4, 1, "", "function"], [88, 4, 1, "", "function_variable"], [88, 4, 1, "", "transform_variable"]], "sympy.integrals.trigonometry": [[88, 3, 1, "", "trigintegrate"]], "sympy.interactive": [[89, 0, 0, "-", "printing"], [89, 0, 0, "-", "session"]], "sympy.interactive.printing": [[89, 3, 1, "", "init_printing"]], "sympy.interactive.session": [[89, 3, 1, "", "enable_automatic_int_sympification"], [89, 3, 1, "", "enable_automatic_symbols"], [89, 3, 1, "", "init_ipython_session"], [89, 3, 1, "", "init_python_session"], [89, 3, 1, "", "init_session"], [89, 3, 1, "", "int_to_Integer"]], "sympy.liealgebras.cartan_matrix": [[90, 3, 1, "", "CartanMatrix"]], "sympy.liealgebras.cartan_type": [[90, 1, 1, "", "CartanType_generator"], [90, 1, 1, "", "Standard_Cartan"]], "sympy.liealgebras.cartan_type.Standard_Cartan": [[90, 2, 1, "", "rank"], [90, 2, 1, "", "series"]], "sympy.liealgebras.dynkin_diagram": [[90, 3, 1, "", "DynkinDiagram"]], "sympy.liealgebras.root_system": [[90, 1, 1, "", "RootSystem"]], "sympy.liealgebras.root_system.RootSystem": [[90, 2, 1, "", "add_as_roots"], [90, 2, 1, "", "add_simple_roots"], [90, 2, 1, "", "all_roots"], [90, 2, 1, "", "cartan_matrix"], [90, 2, 1, "", "dynkin_diagram"], [90, 2, 1, "", "root_space"], [90, 2, 1, "", "simple_roots"]], "sympy.liealgebras.type_a": [[90, 1, 1, "", "TypeA"]], "sympy.liealgebras.type_a.TypeA": [[90, 2, 1, "", "basic_root"], [90, 2, 1, "", "basis"], [90, 2, 1, "", "cartan_matrix"], [90, 2, 1, "", "dimension"], [90, 2, 1, "", "highest_root"], [90, 2, 1, "", "lie_algebra"], [90, 2, 1, "", "positive_roots"], [90, 2, 1, "", "roots"], [90, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_b": [[90, 1, 1, "", "TypeB"]], "sympy.liealgebras.type_b.TypeB": [[90, 2, 1, "", "basic_root"], [90, 2, 1, "", "basis"], [90, 2, 1, "", "cartan_matrix"], [90, 2, 1, "", "dimension"], [90, 2, 1, "", "lie_algebra"], [90, 2, 1, "", "positive_roots"], [90, 2, 1, "", "roots"], [90, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_c": [[90, 1, 1, "", "TypeC"]], "sympy.liealgebras.type_c.TypeC": [[90, 2, 1, "", "basic_root"], [90, 2, 1, "", "basis"], [90, 2, 1, "", "cartan_matrix"], [90, 2, 1, "", "dimension"], [90, 2, 1, "", "lie_algebra"], [90, 2, 1, "", "positive_roots"], [90, 2, 1, "", "roots"], [90, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_d": [[90, 1, 1, "", "TypeD"]], "sympy.liealgebras.type_d.TypeD": [[90, 2, 1, "", "basic_root"], [90, 2, 1, "", "basis"], [90, 2, 1, "", "cartan_matrix"], [90, 2, 1, "", "dimension"], [90, 2, 1, "", "lie_algebra"], [90, 2, 1, "", "positive_roots"], [90, 2, 1, "", "roots"], [90, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_e": [[90, 1, 1, "", "TypeE"]], "sympy.liealgebras.type_e.TypeE": [[90, 2, 1, "", "basic_root"], [90, 2, 1, "", "basis"], [90, 2, 1, "", "cartan_matrix"], [90, 2, 1, "", "dimension"], [90, 2, 1, "", "positive_roots"], [90, 2, 1, "", "roots"], [90, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_f": [[90, 1, 1, "", "TypeF"]], "sympy.liealgebras.type_f.TypeF": [[90, 2, 1, "", "basic_root"], [90, 2, 1, "", "basis"], [90, 2, 1, "", "cartan_matrix"], [90, 2, 1, "", "dimension"], [90, 2, 1, "", "positive_roots"], [90, 2, 1, "", "roots"], [90, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_g": [[90, 1, 1, "", "TypeG"]], "sympy.liealgebras.type_g.TypeG": [[90, 2, 1, "", "basis"], [90, 2, 1, "", "cartan_matrix"], [90, 2, 1, "", "dimension"], [90, 2, 1, "", "positive_roots"], [90, 2, 1, "", "roots"], [90, 2, 1, "", "simple_root"]], "sympy.liealgebras.weyl_group": [[90, 1, 1, "", "WeylGroup"]], "sympy.liealgebras.weyl_group.WeylGroup": [[90, 2, 1, "", "coxeter_diagram"], [90, 2, 1, "", "delete_doubles"], [90, 2, 1, "", "element_order"], [90, 2, 1, "", "generators"], [90, 2, 1, "", "group_name"], [90, 2, 1, "", "group_order"], [90, 2, 1, "", "matrix_form"]], "sympy.logic.boolalg": [[91, 3, 1, "", "ANFform"], [91, 1, 1, "", "And"], [91, 1, 1, "", "Boolean"], [91, 1, 1, "", "BooleanFalse"], [91, 1, 1, "", "BooleanTrue"], [91, 1, 1, "", "Equivalent"], [91, 1, 1, "", "Exclusive"], [91, 1, 1, "", "ITE"], [91, 1, 1, "", "Implies"], [91, 1, 1, "", "Nand"], [91, 1, 1, "", "Nor"], [91, 1, 1, "", "Not"], [91, 1, 1, "", "Or"], [91, 3, 1, "", "POSform"], [91, 3, 1, "", "SOPform"], [91, 1, 1, "", "Xnor"], [91, 1, 1, "", "Xor"], [91, 3, 1, "", "anf_coeffs"], [91, 3, 1, "", "bool_map"], [91, 3, 1, "", "bool_maxterm"], [91, 3, 1, "", "bool_minterm"], [91, 3, 1, "", "bool_monomial"], [91, 3, 1, "", "distribute_and_over_or"], [91, 3, 1, "", "distribute_or_over_and"], [91, 3, 1, "", "distribute_xor_over_and"], [91, 3, 1, "", "eliminate_implications"], [91, 3, 1, "", "gateinputcount"], [91, 3, 1, "", "integer_to_term"], [91, 3, 1, "", "is_anf"], [91, 3, 1, "", "is_cnf"], [91, 3, 1, "", "is_dnf"], [91, 3, 1, "", "is_nnf"], [91, 3, 1, "", "simplify_logic"], [91, 3, 1, "", "term_to_integer"], [91, 3, 1, "", "to_anf"], [91, 3, 1, "", "to_cnf"], [91, 3, 1, "", "to_dnf"], [91, 3, 1, "", "to_int_repr"], [91, 3, 1, "", "to_nnf"], [91, 3, 1, "", "truth_table"]], "sympy.logic.boolalg.Boolean": [[91, 2, 1, "", "as_set"], [91, 2, 1, "", "equals"]], "sympy.logic.boolalg.BooleanFalse": [[91, 2, 1, "", "as_set"]], "sympy.logic.boolalg.BooleanTrue": [[91, 2, 1, "", "as_set"]], "sympy.logic": [[91, 0, 0, "-", "inference"]], "sympy.logic.inference": [[91, 3, 1, "", "satisfiable"]], "sympy.matrices": [[92, 0, 0, "-", "common"], [94, 0, 0, "-", "expressions"], [95, 0, 0, "-", "immutable"], [97, 0, 0, "-", "matrices"], [99, 0, 0, "-", "sparse"], [100, 0, 0, "-", "sparsetools"]], "sympy.matrices.common": [[92, 1, 1, "", "MatrixCommon"], [92, 1, 1, "", "MatrixKind"]], "sympy.matrices.common.MatrixCommon": [[92, 4, 1, "", "C"], [92, 4, 1, "", "H"], [92, 4, 1, "", "T"], [92, 2, 1, "", "__abs__"], [92, 2, 1, "", "__add__"], [92, 2, 1, "", "__getitem__"], [92, 2, 1, "", "__len__"], [92, 2, 1, "", "__mul__"], [92, 2, 1, "", "__pow__"], [92, 5, 1, "", "__weakref__"], [92, 2, 1, "", "adjoint"], [92, 2, 1, "", "applyfunc"], [92, 2, 1, "", "as_real_imag"], [92, 2, 1, "", "atoms"], [92, 2, 1, "", "col"], [92, 2, 1, "", "col_del"], [92, 2, 1, "", "col_insert"], [92, 2, 1, "", "col_join"], [92, 2, 1, "", "companion"], [92, 2, 1, "", "conjugate"], [92, 2, 1, "", "diag"], [92, 2, 1, "", "diagonal"], [92, 2, 1, "", "evalf"], [92, 2, 1, "", "expand"], [92, 2, 1, "", "extract"], [92, 2, 1, "", "eye"], [92, 4, 1, "", "free_symbols"], [92, 2, 1, "", "get_diag_blocks"], [92, 2, 1, "", "has"], [92, 2, 1, "", "hstack"], [92, 2, 1, "", "is_anti_symmetric"], [92, 2, 1, "", "is_diagonal"], [92, 4, 1, "", "is_hermitian"], [92, 4, 1, "", "is_lower"], [92, 4, 1, "", "is_lower_hessenberg"], [92, 4, 1, "", "is_square"], [92, 4, 1, "", "is_strongly_diagonally_dominant"], [92, 2, 1, "", "is_symbolic"], [92, 2, 1, "", "is_symmetric"], [92, 4, 1, "", "is_upper"], [92, 4, 1, "", "is_upper_hessenberg"], [92, 4, 1, "", "is_weakly_diagonally_dominant"], [92, 4, 1, "", "is_zero_matrix"], [92, 2, 1, "", "jordan_block"], [92, 2, 1, "", "lower_triangular"], [92, 2, 1, "", "multiply"], [92, 2, 1, "", "multiply_elementwise"], [92, 2, 1, "", "n"], [92, 2, 1, "", "ones"], [92, 2, 1, "", "permute"], [92, 2, 1, "", "permute_cols"], [92, 2, 1, "", "permute_rows"], [92, 2, 1, "", "pow"], [92, 2, 1, "", "refine"], [92, 2, 1, "", "replace"], [92, 2, 1, "", "reshape"], [92, 2, 1, "", "rmultiply"], [92, 2, 1, "", "rot90"], [92, 2, 1, "", "row"], [92, 2, 1, "", "row_del"], [92, 2, 1, "", "row_insert"], [92, 2, 1, "", "row_join"], [92, 4, 1, "", "shape"], [92, 2, 1, "", "simplify"], [92, 2, 1, "", "subs"], [92, 2, 1, "", "todod"], [92, 2, 1, "", "todok"], [92, 2, 1, "", "tolist"], [92, 2, 1, "", "trace"], [92, 2, 1, "", "transpose"], [92, 2, 1, "", "upper_triangular"], [92, 2, 1, "", "values"], [92, 2, 1, "", "vec"], [92, 2, 1, "", "vech"], [92, 2, 1, "", "vstack"], [92, 2, 1, "", "wilkinson"], [92, 2, 1, "", "xreplace"], [92, 2, 1, "", "zeros"]], "sympy.matrices.dense": [[93, 1, 1, "", "DenseMatrix"], [97, 3, 1, "", "GramSchmidt"], [93, 5, 1, "", "Matrix"], [93, 1, 1, "", "MutableDenseMatrix"], [97, 3, 1, "", "casoratian"], [97, 3, 1, "", "diag"], [97, 3, 1, "", "eye"], [97, 3, 1, "", "hessian"], [97, 3, 1, "", "jordan_cell"], [97, 3, 1, "", "list2numpy"], [97, 3, 1, "", "matrix2numpy"], [97, 3, 1, "", "matrix_multiply_elementwise"], [97, 3, 1, "", "ones"], [97, 3, 1, "", "randMatrix"], [97, 3, 1, "", "rot_axis1"], [97, 3, 1, "", "rot_axis2"], [97, 3, 1, "", "rot_axis3"], [97, 3, 1, "", "symarray"], [97, 3, 1, "", "wronskian"], [97, 3, 1, "", "zeros"]], "sympy.matrices.dense.DenseMatrix": [[93, 2, 1, "", "LDLdecomposition"], [93, 2, 1, "", "as_immutable"], [93, 2, 1, "", "as_mutable"], [93, 2, 1, "", "cholesky"], [93, 2, 1, "", "lower_triangular_solve"], [93, 2, 1, "", "upper_triangular_solve"]], "sympy.matrices.dense.MutableDenseMatrix": [[93, 2, 1, "", "simplify"]], "sympy.matrices.expressions": [[94, 1, 1, "", "CompanionMatrix"], [94, 1, 1, "", "FunctionMatrix"], [94, 1, 1, "", "HadamardPower"], [94, 1, 1, "", "HadamardProduct"], [94, 1, 1, "", "Identity"], [94, 1, 1, "", "Inverse"], [94, 1, 1, "", "MatAdd"], [94, 1, 1, "", "MatMul"], [94, 1, 1, "", "MatPow"], [94, 1, 1, "", "MatrixExpr"], [94, 1, 1, "", "MatrixPermute"], [94, 1, 1, "", "MatrixSet"], [94, 1, 1, "", "MatrixSymbol"], [94, 1, 1, "", "PermutationMatrix"], [94, 1, 1, "", "Trace"], [94, 1, 1, "", "Transpose"], [94, 1, 1, "", "ZeroMatrix"], [94, 0, 0, "-", "blockmatrix"], [94, 3, 1, "", "hadamard_product"]], "sympy.matrices.expressions.MatrixExpr": [[94, 4, 1, "", "T"], [94, 2, 1, "", "as_coeff_Mul"], [94, 2, 1, "", "as_explicit"], [94, 2, 1, "", "as_mutable"], [94, 2, 1, "", "equals"], [94, 2, 1, "", "from_index_summation"]], "sympy.matrices.expressions.blockmatrix": [[94, 1, 1, "", "BlockDiagMatrix"], [94, 1, 1, "", "BlockMatrix"], [94, 3, 1, "", "block_collapse"]], "sympy.matrices.expressions.blockmatrix.BlockDiagMatrix": [[94, 2, 1, "", "get_diag_blocks"]], "sympy.matrices.expressions.blockmatrix.BlockMatrix": [[94, 2, 1, "", "LDUdecomposition"], [94, 2, 1, "", "LUdecomposition"], [94, 2, 1, "", "UDLdecomposition"], [94, 2, 1, "", "schur"], [94, 2, 1, "", "transpose"]], "sympy.matrices.immutable": [[95, 1, 1, "", "ImmutableDenseMatrix"], [95, 5, 1, "", "ImmutableMatrix"], [99, 1, 1, "", "ImmutableSparseMatrix"]], "sympy.matrices.matrices": [[97, 1, 1, "", "MatrixBase"], [97, 1, 1, "", "MatrixCalculus"], [97, 1, 1, "", "MatrixDeterminant"], [97, 1, 1, "", "MatrixEigen"], [97, 1, 1, "", "MatrixError"], [97, 1, 1, "", "MatrixReductions"], [97, 1, 1, "", "MatrixSubspaces"], [97, 1, 1, "", "NonSquareMatrixError"], [97, 1, 1, "", "ShapeError"], [97, 3, 1, "", "a2idx"]], "sympy.matrices.matrices.MatrixBase": [[97, 4, 1, "", "D"], [97, 2, 1, "", "LDLdecomposition"], [97, 2, 1, "", "LDLsolve"], [97, 2, 1, "", "LUdecomposition"], [97, 2, 1, "", "LUdecompositionFF"], [97, 2, 1, "", "LUdecomposition_Simple"], [97, 2, 1, "", "LUsolve"], [97, 2, 1, "", "QRdecomposition"], [97, 2, 1, "", "QRsolve"], [97, 2, 1, "", "add"], [97, 2, 1, "", "analytic_func"], [97, 2, 1, "", "cholesky"], [97, 2, 1, "", "cholesky_solve"], [97, 2, 1, "", "condition_number"], [97, 2, 1, "", "connected_components"], [97, 2, 1, "", "connected_components_decomposition"], [97, 2, 1, "", "copy"], [97, 2, 1, "", "cross"], [97, 2, 1, "", "diagonal_solve"], [97, 2, 1, "", "dot"], [97, 2, 1, "", "dual"], [97, 2, 1, "", "exp"], [97, 2, 1, "", "gauss_jordan_solve"], [97, 2, 1, "", "inv"], [97, 2, 1, "", "inv_mod"], [97, 2, 1, "", "inverse_ADJ"], [97, 2, 1, "", "inverse_BLOCK"], [97, 2, 1, "", "inverse_CH"], [97, 2, 1, "", "inverse_GE"], [97, 2, 1, "", "inverse_LDL"], [97, 2, 1, "", "inverse_LU"], [97, 2, 1, "", "inverse_QR"], [97, 2, 1, "", "irregular"], [97, 2, 1, "", "is_nilpotent"], [97, 2, 1, "", "key2bounds"], [97, 2, 1, "", "key2ij"], [97, 2, 1, "", "log"], [97, 2, 1, "", "lower_triangular_solve"], [97, 2, 1, "", "norm"], [97, 2, 1, "", "normalized"], [97, 2, 1, "", "pinv"], [97, 2, 1, "", "pinv_solve"], [97, 2, 1, "", "print_nonzero"], [97, 2, 1, "", "project"], [97, 2, 1, "", "rank_decomposition"], [97, 2, 1, "", "singular_value_decomposition"], [97, 2, 1, "", "solve"], [97, 2, 1, "", "solve_least_squares"], [97, 2, 1, "", "strongly_connected_components"], [97, 2, 1, "", "strongly_connected_components_decomposition"], [97, 2, 1, "", "table"], [97, 2, 1, "", "upper_hessenberg_decomposition"], [97, 2, 1, "", "upper_triangular_solve"]], "sympy.matrices.matrices.MatrixCalculus": [[97, 2, 1, "", "diff"], [97, 2, 1, "", "integrate"], [97, 2, 1, "", "jacobian"], [97, 2, 1, "", "limit"]], "sympy.matrices.matrices.MatrixDeterminant": [[97, 2, 1, "", "adjugate"], [97, 2, 1, "", "charpoly"], [97, 2, 1, "", "cofactor"], [97, 2, 1, "", "cofactor_matrix"], [97, 2, 1, "", "det"], [97, 2, 1, "", "minor"], [97, 2, 1, "", "minor_submatrix"], [97, 2, 1, "", "per"]], "sympy.matrices.matrices.MatrixEigen": [[97, 2, 1, "", "bidiagonal_decomposition"], [97, 2, 1, "", "bidiagonalize"], [97, 2, 1, "", "diagonalize"], [97, 2, 1, "", "eigenvals"], [97, 2, 1, "", "eigenvects"], [97, 2, 1, "", "is_diagonalizable"], [97, 4, 1, "", "is_indefinite"], [97, 4, 1, "", "is_negative_definite"], [97, 4, 1, "", "is_negative_semidefinite"], [97, 4, 1, "", "is_positive_definite"], [97, 4, 1, "", "is_positive_semidefinite"], [97, 2, 1, "", "jordan_form"], [97, 2, 1, "", "left_eigenvects"], [97, 2, 1, "", "singular_values"]], "sympy.matrices.matrices.MatrixReductions": [[97, 2, 1, "", "echelon_form"], [97, 2, 1, "", "elementary_col_op"], [97, 2, 1, "", "elementary_row_op"], [97, 4, 1, "", "is_echelon"], [97, 2, 1, "", "rank"], [97, 2, 1, "", "rref"]], "sympy.matrices.matrices.MatrixSubspaces": [[97, 2, 1, "", "columnspace"], [97, 2, 1, "", "nullspace"], [97, 2, 1, "", "orthogonalize"], [97, 2, 1, "", "rowspace"]], "sympy.matrices.normalforms": [[98, 3, 1, "", "hermite_normal_form"], [98, 3, 1, "", "smith_normal_form"]], "sympy.matrices.sparse": [[99, 1, 1, "", "MutableSparseMatrix"], [99, 5, 1, "", "SparseMatrix"]], "sympy.matrices.sparsetools": [[100, 2, 1, "", "_csrtodok"], [100, 2, 1, "", "_doktocsr"], [100, 2, 1, "", "banded"]], "sympy.ntheory": [[101, 0, 0, "-", "bbp_pi"], [101, 0, 0, "-", "continued_fraction"], [101, 0, 0, "-", "digits"], [101, 0, 0, "-", "ecm"], [101, 0, 0, "-", "egyptian_fraction"], [101, 0, 0, "-", "factor_"], [101, 0, 0, "-", "generate"], [101, 1, 1, "", "mobius"], [101, 0, 0, "-", "modular"], [101, 0, 0, "-", "multinomial"], [101, 0, 0, "-", "partitions_"], [101, 0, 0, "-", "primetest"], [101, 0, 0, "-", "qs"], [101, 0, 0, "-", "residue_ntheory"]], "sympy.ntheory.bbp_pi": [[101, 3, 1, "", "pi_hex_digits"]], "sympy.ntheory.continued_fraction": [[101, 3, 1, "", "continued_fraction"], [101, 3, 1, "", "continued_fraction_convergents"], [101, 3, 1, "", "continued_fraction_iterator"], [101, 3, 1, "", "continued_fraction_periodic"], [101, 3, 1, "", "continued_fraction_reduce"]], "sympy.ntheory.digits": [[101, 3, 1, "", "count_digits"], [101, 3, 1, "", "digits"], [101, 3, 1, "", "is_palindromic"]], "sympy.ntheory.ecm": [[101, 3, 1, "", "ecm"]], "sympy.ntheory.egyptian_fraction": [[101, 3, 1, "", "egyptian_fraction"]], "sympy.ntheory.factor_": [[101, 3, 1, "", "abundance"], [101, 3, 1, "", "antidivisor_count"], [101, 3, 1, "", "antidivisors"], [101, 3, 1, "", "core"], [101, 3, 1, "", "digits"], [101, 3, 1, "", "divisor_count"], [101, 1, 1, "", "divisor_sigma"], [101, 3, 1, "", "divisors"], [101, 3, 1, "", "factorint"], [101, 3, 1, "", "factorrat"], [101, 3, 1, "", "is_abundant"], [101, 3, 1, "", "is_amicable"], [101, 3, 1, "", "is_deficient"], [101, 3, 1, "", "is_mersenne_prime"], [101, 3, 1, "", "is_perfect"], [101, 3, 1, "", "mersenne_prime_exponent"], [101, 3, 1, "", "multiplicity"], [101, 3, 1, "", "perfect_power"], [101, 3, 1, "", "pollard_pm1"], [101, 3, 1, "", "pollard_rho"], [101, 3, 1, "", "primefactors"], [101, 1, 1, "", "primenu"], [101, 1, 1, "", "primeomega"], [101, 3, 1, "", "proper_divisor_count"], [101, 3, 1, "", "proper_divisors"], [101, 1, 1, "", "reduced_totient"], [101, 3, 1, "", "smoothness"], [101, 3, 1, "", "smoothness_p"], [101, 1, 1, "", "totient"], [101, 3, 1, "", "trailing"], [101, 3, 1, "", "udivisor_count"], [101, 1, 1, "", "udivisor_sigma"], [101, 3, 1, "", "udivisors"]], "sympy.ntheory.generate": [[101, 1, 1, "", "Sieve"], [101, 3, 1, "", "composite"], [101, 3, 1, "", "compositepi"], [101, 3, 1, "", "cycle_length"], [101, 3, 1, "", "nextprime"], [101, 3, 1, "", "prevprime"], [101, 3, 1, "", "prime"], [101, 3, 1, "", "primepi"], [101, 3, 1, "", "primerange"], [101, 3, 1, "", "primorial"], [101, 3, 1, "", "randprime"]], "sympy.ntheory.generate.Sieve": [[101, 2, 1, "", "extend"], [101, 2, 1, "", "extend_to_no"], [101, 2, 1, "", "mobiusrange"], [101, 2, 1, "", "primerange"], [101, 2, 1, "", "search"], [101, 2, 1, "", "totientrange"]], "sympy.ntheory.modular": [[101, 3, 1, "", "crt"], [101, 3, 1, "", "crt1"], [101, 3, 1, "", "crt2"], [101, 3, 1, "", "solve_congruence"], [101, 3, 1, "", "symmetric_residue"]], "sympy.ntheory.multinomial": [[101, 3, 1, "", "binomial_coefficients"], [101, 3, 1, "", "binomial_coefficients_list"], [101, 3, 1, "", "multinomial_coefficients"], [101, 3, 1, "", "multinomial_coefficients_iterator"]], "sympy.ntheory.partitions_": [[101, 3, 1, "", "npartitions"]], "sympy.ntheory.primetest": [[101, 3, 1, "", "is_euler_pseudoprime"], [101, 3, 1, "", "is_extra_strong_lucas_prp"], [101, 3, 1, "", "is_gaussian_prime"], [101, 3, 1, "", "is_lucas_prp"], [101, 3, 1, "", "is_square"], [101, 3, 1, "", "is_strong_lucas_prp"], [101, 3, 1, "", "isprime"], [101, 3, 1, "", "mr"]], "sympy.ntheory.qs": [[101, 3, 1, "", "qs"]], "sympy.ntheory.residue_ntheory": [[101, 3, 1, "", "discrete_log"], [101, 3, 1, "", "is_nthpow_residue"], [101, 3, 1, "", "is_primitive_root"], [101, 3, 1, "", "is_quad_residue"], [101, 3, 1, "", "jacobi_symbol"], [101, 3, 1, "", "legendre_symbol"], [101, 3, 1, "", "n_order"], [101, 3, 1, "", "nthroot_mod"], [101, 3, 1, "", "primitive_root"], [101, 3, 1, "", "quadratic_residues"], [101, 3, 1, "", "sqrt_mod"], [101, 3, 1, "", "sqrt_mod_iter"]], "sympy.parsing.latex": [[103, 1, 1, "", "LaTeXParsingError"], [103, 3, 1, "", "parse_latex"]], "sympy.parsing.mathematica": [[103, 3, 1, "", "parse_mathematica"]], "sympy.parsing.maxima": [[103, 3, 1, "", "parse_maxima"]], "sympy.parsing": [[103, 0, 0, "-", "sym_expr"]], "sympy.parsing.sym_expr": [[103, 1, 1, "", "SymPyExpression"]], "sympy.parsing.sym_expr.SymPyExpression": [[103, 2, 1, "", "convert_to_c"], [103, 2, 1, "", "convert_to_expr"], [103, 2, 1, "", "convert_to_fortran"], [103, 2, 1, "", "convert_to_python"], [103, 2, 1, "", "return_expr"]], "sympy.parsing.sympy_parser": [[103, 3, 1, "", "auto_number"], [103, 3, 1, "", "auto_symbol"], [103, 3, 1, "", "convert_xor"], [103, 3, 1, "", "eval_expr"], [103, 3, 1, "", "factorial_notation"], [103, 3, 1, "", "function_exponentiation"], [103, 3, 1, "", "implicit_application"], [103, 3, 1, "", "implicit_multiplication"], [103, 3, 1, "", "implicit_multiplication_application"], [103, 3, 1, "", "lambda_notation"], [103, 3, 1, "", "parse_expr"], [103, 3, 1, "", "rationalize"], [103, 3, 1, "", "repeated_decimals"], [103, 3, 1, "", "split_symbols"], [103, 3, 1, "", "split_symbols_custom"], [103, 6, 1, "", "standard_transformations"], [103, 3, 1, "", "stringify_expr"]], "sympy.physics.continuum_mechanics": [[104, 0, 0, "-", "beam"], [107, 0, 0, "-", "truss"]], "sympy.physics.continuum_mechanics.beam": [[104, 1, 1, "", "Beam"], [104, 1, 1, "", "Beam3D"]], "sympy.physics.continuum_mechanics.beam.Beam": [[104, 4, 1, "", "applied_loads"], [104, 2, 1, "", "apply_load"], [104, 2, 1, "", "apply_support"], [104, 4, 1, "", "area"], [104, 2, 1, "", "bending_moment"], [104, 4, 1, "", "boundary_conditions"], [104, 4, 1, "", "cross_section"], [104, 2, 1, "", "deflection"], [104, 2, 1, "", "draw"], [104, 4, 1, "", "elastic_modulus"], [104, 4, 1, "", "ild_moment"], [104, 4, 1, "", "ild_reactions"], [104, 4, 1, "", "ild_shear"], [104, 2, 1, "", "join"], [104, 4, 1, "", "length"], [104, 4, 1, "", "load"], [104, 2, 1, "", "max_bmoment"], [104, 2, 1, "", "max_deflection"], [104, 2, 1, "", "max_shear_force"], [104, 2, 1, "", "plot_bending_moment"], [104, 2, 1, "", "plot_deflection"], [104, 2, 1, "", "plot_ild_moment"], [104, 2, 1, "", "plot_ild_reactions"], [104, 2, 1, "", "plot_ild_shear"], [104, 2, 1, "", "plot_loading_results"], [104, 2, 1, "", "plot_shear_force"], [104, 2, 1, "", "plot_shear_stress"], [104, 2, 1, "", "plot_slope"], [104, 2, 1, "", "point_cflexure"], [104, 4, 1, "", "reaction_loads"], [104, 2, 1, "", "remove_load"], [104, 4, 1, "", "second_moment"], [104, 2, 1, "", "shear_force"], [104, 2, 1, "", "shear_stress"], [104, 2, 1, "", "slope"], [104, 2, 1, "", "solve_for_ild_moment"], [104, 2, 1, "", "solve_for_ild_reactions"], [104, 2, 1, "", "solve_for_ild_shear"], [104, 2, 1, "", "solve_for_reaction_loads"], [104, 4, 1, "", "variable"]], "sympy.physics.continuum_mechanics.beam.Beam3D": [[104, 2, 1, "", "angular_deflection"], [104, 2, 1, "", "apply_load"], [104, 2, 1, "", "apply_moment_load"], [104, 4, 1, "", "area"], [104, 2, 1, "", "axial_force"], [104, 2, 1, "", "axial_stress"], [104, 2, 1, "", "bending_moment"], [104, 4, 1, "", "boundary_conditions"], [104, 2, 1, "", "deflection"], [104, 4, 1, "", "load_vector"], [104, 2, 1, "", "max_bending_moment"], [104, 2, 1, "", "max_bmoment"], [104, 2, 1, "", "max_deflection"], [104, 2, 1, "", "max_shear_force"], [104, 4, 1, "", "moment_load_vector"], [104, 2, 1, "", "plot_bending_moment"], [104, 2, 1, "", "plot_deflection"], [104, 2, 1, "", "plot_loading_results"], [104, 2, 1, "", "plot_shear_force"], [104, 2, 1, "", "plot_shear_stress"], [104, 2, 1, "", "plot_slope"], [104, 2, 1, "", "polar_moment"], [104, 4, 1, "", "second_moment"], [104, 2, 1, "", "shear_force"], [104, 4, 1, "", "shear_modulus"], [104, 2, 1, "", "shear_stress"], [104, 2, 1, "", "slope"], [104, 2, 1, "", "solve_for_reaction_loads"], [104, 2, 1, "", "solve_for_torsion"], [104, 2, 1, "", "torsional_moment"]], "sympy.physics.continuum_mechanics.truss": [[107, 1, 1, "", "Truss"]], "sympy.physics.continuum_mechanics.truss.Truss": [[107, 2, 1, "", "add_member"], [107, 2, 1, "", "add_node"], [107, 2, 1, "", "apply_load"], [107, 2, 1, "", "apply_support"], [107, 2, 1, "", "change_member_label"], [107, 2, 1, "", "change_node_label"], [107, 4, 1, "", "internal_forces"], [107, 4, 1, "", "loads"], [107, 4, 1, "", "member_labels"], [107, 4, 1, "", "members"], [107, 4, 1, "", "node_labels"], [107, 4, 1, "", "node_positions"], [107, 4, 1, "", "nodes"], [107, 4, 1, "", "reaction_loads"], [107, 2, 1, "", "remove_load"], [107, 2, 1, "", "remove_member"], [107, 2, 1, "", "remove_node"], [107, 2, 1, "", "remove_support"], [107, 2, 1, "", "solve"], [107, 4, 1, "", "supports"]], "sympy.physics": [[110, 0, 0, "-", "control"], [113, 0, 0, "-", "hydrogen"], [114, 0, 0, "-", "matrices"], [135, 0, 0, "-", "mechanics"], [150, 0, 0, "-", "paulialgebra"], [151, 0, 0, "-", "qho_1d"], [175, 0, 0, "-", "secondquant"], [176, 0, 0, "-", "sho"], [192, 0, 0, "-", "vector"], [195, 0, 0, "-", "wigner"]], "sympy.physics.control.control_plots": [[109, 2, 1, "", "bode_magnitude_numerical_data"], [109, 2, 1, "", "bode_magnitude_plot"], [109, 2, 1, "", "bode_phase_numerical_data"], [109, 2, 1, "", "bode_phase_plot"], [109, 2, 1, "", "bode_plot"], [109, 2, 1, "", "impulse_response_numerical_data"], [109, 2, 1, "", "impulse_response_plot"], [109, 2, 1, "", "pole_zero_numerical_data"], [109, 2, 1, "", "pole_zero_plot"], [109, 2, 1, "", "ramp_response_numerical_data"], [109, 2, 1, "", "ramp_response_plot"], [109, 2, 1, "", "step_response_numerical_data"], [109, 2, 1, "", "step_response_plot"]], "sympy.physics.control": [[111, 0, 0, "-", "lti"]], "sympy.physics.control.lti": [[111, 1, 1, "", "Feedback"], [111, 1, 1, "", "MIMOFeedback"], [111, 1, 1, "", "MIMOParallel"], [111, 1, 1, "", "MIMOSeries"], [111, 1, 1, "", "Parallel"], [111, 1, 1, "", "Series"], [111, 1, 1, "", "TransferFunction"], [111, 1, 1, "", "TransferFunctionMatrix"]], "sympy.physics.control.lti.Feedback": [[111, 2, 1, "", "doit"], [111, 4, 1, "", "sensitivity"], [111, 4, 1, "", "sign"], [111, 4, 1, "", "sys1"], [111, 4, 1, "", "sys2"], [111, 4, 1, "", "var"]], "sympy.physics.control.lti.MIMOFeedback": [[111, 2, 1, "", "doit"], [111, 4, 1, "", "sensitivity"], [111, 4, 1, "", "sign"], [111, 4, 1, "", "sys1"], [111, 4, 1, "", "sys2"], [111, 4, 1, "", "var"]], "sympy.physics.control.lti.MIMOParallel": [[111, 2, 1, "", "doit"], [111, 4, 1, "", "num_inputs"], [111, 4, 1, "", "num_outputs"], [111, 4, 1, "", "shape"], [111, 4, 1, "", "var"]], "sympy.physics.control.lti.MIMOSeries": [[111, 2, 1, "", "doit"], [111, 4, 1, "", "num_inputs"], [111, 4, 1, "", "num_outputs"], [111, 4, 1, "", "shape"], [111, 4, 1, "", "var"]], "sympy.physics.control.lti.Parallel": [[111, 2, 1, "", "doit"], [111, 4, 1, "", "is_biproper"], [111, 4, 1, "", "is_proper"], [111, 4, 1, "", "is_strictly_proper"], [111, 2, 1, "", "to_expr"], [111, 4, 1, "", "var"]], "sympy.physics.control.lti.Series": [[111, 2, 1, "", "doit"], [111, 4, 1, "", "is_biproper"], [111, 4, 1, "", "is_proper"], [111, 4, 1, "", "is_strictly_proper"], [111, 2, 1, "", "to_expr"], [111, 4, 1, "", "var"]], "sympy.physics.control.lti.TransferFunction": [[111, 2, 1, "", "dc_gain"], [111, 4, 1, "", "den"], [111, 2, 1, "", "expand"], [111, 2, 1, "", "from_rational_expression"], [111, 4, 1, "", "is_biproper"], [111, 4, 1, "", "is_proper"], [111, 2, 1, "", "is_stable"], [111, 4, 1, "", "is_strictly_proper"], [111, 4, 1, "", "num"], [111, 2, 1, "", "poles"], [111, 2, 1, "", "to_expr"], [111, 4, 1, "", "var"], [111, 2, 1, "", "zeros"]], "sympy.physics.control.lti.TransferFunctionMatrix": [[111, 2, 1, "", "elem_poles"], [111, 2, 1, "", "elem_zeros"], [111, 2, 1, "", "expand"], [111, 2, 1, "", "from_Matrix"], [111, 4, 1, "", "num_inputs"], [111, 4, 1, "", "num_outputs"], [111, 4, 1, "", "shape"], [111, 2, 1, "", "transpose"], [111, 4, 1, "", "var"]], "sympy.physics.hep": [[112, 0, 0, "-", "gamma_matrices"]], "sympy.physics.hep.gamma_matrices": [[112, 3, 1, "", "extract_type_tens"], [112, 3, 1, "", "gamma_trace"], [112, 3, 1, "", "kahane_simplify"], [112, 3, 1, "", "simplify_gpgp"]], "sympy.physics.hydrogen": [[113, 3, 1, "", "E_nl"], [113, 3, 1, "", "E_nl_dirac"], [113, 3, 1, "", "Psi_nlm"], [113, 3, 1, "", "R_nl"]], "sympy.physics.matrices": [[114, 3, 1, "", "mdft"], [114, 3, 1, "", "mgamma"], [114, 3, 1, "", "msigma"], [114, 3, 1, "", "pat_matrix"]], "sympy.physics.mechanics": [[116, 0, 0, "-", "body"], [117, 3, 1, "", "find_dynamicsymbols"], [119, 0, 0, "-", "joint"], [119, 0, 0, "-", "jointsmethod"], [120, 0, 0, "-", "kane"], [120, 0, 0, "-", "lagrange"], [121, 0, 0, "-", "linearize"], [117, 3, 1, "", "msubs"], [122, 0, 0, "-", "particle"], [122, 0, 0, "-", "rigidbody"], [124, 0, 0, "-", "system"]], "sympy.physics.mechanics.body": [[116, 1, 1, "", "Body"]], "sympy.physics.mechanics.body.Body": [[116, 2, 1, "", "ang_vel_in"], [116, 2, 1, "", "apply_force"], [116, 2, 1, "", "apply_torque"], [116, 2, 1, "", "clear_loads"], [116, 2, 1, "", "dcm"], [116, 4, 1, "", "inertia"], [116, 2, 1, "", "kinetic_energy"], [116, 2, 1, "", "masscenter_vel"], [116, 2, 1, "", "parallel_axis"], [116, 2, 1, "", "remove_load"], [116, 4, 1, "", "x"], [116, 4, 1, "", "y"], [116, 4, 1, "", "z"]], "sympy.physics.mechanics.functions": [[122, 3, 1, "", "Lagrangian"], [122, 3, 1, "", "angular_momentum"], [122, 3, 1, "", "inertia"], [122, 3, 1, "", "inertia_of_point_mass"], [122, 3, 1, "", "kinetic_energy"], [122, 3, 1, "", "linear_momentum"], [122, 3, 1, "", "potential_energy"]], "sympy.physics.mechanics.joint": [[119, 1, 1, "", "CylindricalJoint"], [119, 1, 1, "", "Joint"], [119, 1, 1, "", "PinJoint"], [119, 1, 1, "", "PlanarJoint"], [119, 1, 1, "", "PrismaticJoint"], [119, 1, 1, "", "SphericalJoint"], [119, 1, 1, "", "WeldJoint"]], "sympy.physics.mechanics.joint.CylindricalJoint": [[119, 4, 1, "", "joint_axis"], [119, 4, 1, "", "rotation_coordinate"], [119, 4, 1, "", "rotation_speed"], [119, 4, 1, "", "translation_coordinate"], [119, 4, 1, "", "translation_speed"]], "sympy.physics.mechanics.joint.Joint": [[119, 4, 1, "", "child"], [119, 4, 1, "", "child_axis"], [119, 4, 1, "", "child_point"], [119, 4, 1, "", "coordinates"], [119, 4, 1, "", "kdes"], [119, 4, 1, "", "name"], [119, 4, 1, "", "parent"], [119, 4, 1, "", "parent_axis"], [119, 4, 1, "", "parent_point"], [119, 4, 1, "", "speeds"]], "sympy.physics.mechanics.joint.PinJoint": [[119, 4, 1, "", "joint_axis"]], "sympy.physics.mechanics.joint.PlanarJoint": [[119, 4, 1, "", "planar_coordinates"], [119, 4, 1, "", "planar_speeds"], [119, 4, 1, "", "planar_vectors"], [119, 4, 1, "", "rotation_axis"], [119, 4, 1, "", "rotation_coordinate"], [119, 4, 1, "", "rotation_speed"]], "sympy.physics.mechanics.joint.PrismaticJoint": [[119, 4, 1, "", "joint_axis"]], "sympy.physics.mechanics.jointsmethod": [[119, 1, 1, "", "JointsMethod"]], "sympy.physics.mechanics.jointsmethod.JointsMethod": [[119, 4, 1, "", "bodies"], [119, 4, 1, "", "forcing"], [119, 4, 1, "", "forcing_full"], [119, 2, 1, "", "form_eoms"], [119, 4, 1, "", "kdes"], [119, 4, 1, "", "loads"], [119, 4, 1, "", "mass_matrix"], [119, 4, 1, "", "mass_matrix_full"], [119, 4, 1, "", "method"], [119, 4, 1, "", "q"], [119, 2, 1, "", "rhs"], [119, 4, 1, "", "u"]], "sympy.physics.mechanics.kane": [[120, 1, 1, "", "KanesMethod"]], "sympy.physics.mechanics.kane.KanesMethod": [[120, 4, 1, "", "auxiliary_eqs"], [120, 4, 1, "", "forcing"], [120, 4, 1, "", "forcing_full"], [120, 4, 1, "", "forcing_kin"], [120, 2, 1, "", "kanes_equations"], [120, 2, 1, "", "kindiffdict"], [120, 2, 1, "", "linearize"], [120, 4, 1, "", "mass_matrix"], [120, 4, 1, "", "mass_matrix_full"], [120, 4, 1, "", "mass_matrix_kin"], [120, 2, 1, "", "rhs"], [120, 2, 1, "", "to_linearizer"]], "sympy.physics.mechanics.lagrange": [[120, 1, 1, "", "LagrangesMethod"]], "sympy.physics.mechanics.lagrange.LagrangesMethod": [[120, 4, 1, "", "forcing"], [120, 4, 1, "", "forcing_full"], [120, 2, 1, "", "form_lagranges_equations"], [120, 2, 1, "", "linearize"], [120, 4, 1, "", "mass_matrix"], [120, 4, 1, "", "mass_matrix_full"], [120, 2, 1, "", "rhs"], [120, 2, 1, "", "solve_multipliers"], [120, 2, 1, "", "to_linearizer"]], "sympy.physics.mechanics.linearize": [[121, 1, 1, "", "Linearizer"]], "sympy.physics.mechanics.linearize.Linearizer": [[121, 2, 1, "", "linearize"]], "sympy.physics.mechanics.particle": [[122, 1, 1, "", "Particle"]], "sympy.physics.mechanics.particle.Particle": [[122, 2, 1, "", "angular_momentum"], [122, 2, 1, "", "kinetic_energy"], [122, 2, 1, "", "linear_momentum"], [122, 4, 1, "", "mass"], [122, 2, 1, "", "parallel_axis"], [122, 4, 1, "", "point"], [122, 4, 1, "", "potential_energy"]], "sympy.physics.mechanics.rigidbody": [[122, 1, 1, "", "RigidBody"]], "sympy.physics.mechanics.rigidbody.RigidBody": [[122, 2, 1, "", "angular_momentum"], [122, 4, 1, "", "central_inertia"], [122, 4, 1, "", "frame"], [122, 4, 1, "", "inertia"], [122, 2, 1, "", "kinetic_energy"], [122, 2, 1, "", "linear_momentum"], [122, 4, 1, "", "mass"], [122, 4, 1, "", "masscenter"], [122, 2, 1, "", "parallel_axis"], [122, 4, 1, "", "potential_energy"]], "sympy.physics.mechanics.system": [[124, 1, 1, "", "SymbolicSystem"]], "sympy.physics.mechanics.system.SymbolicSystem": [[124, 4, 1, "", "alg_con"], [124, 4, 1, "", "bodies"], [124, 4, 1, "", "comb_explicit_rhs"], [124, 4, 1, "", "comb_implicit_mat"], [124, 4, 1, "", "comb_implicit_rhs"], [124, 2, 1, "", "compute_explicit_form"], [124, 2, 1, "", "constant_symbols"], [124, 4, 1, "", "coordinates"], [124, 4, 1, "", "dyn_implicit_mat"], [124, 4, 1, "", "dyn_implicit_rhs"], [124, 2, 1, "", "dynamic_symbols"], [124, 4, 1, "", "kin_explicit_rhs"], [124, 4, 1, "", "loads"], [124, 4, 1, "", "speeds"], [124, 4, 1, "", "states"]], "sympy.physics.optics": [[144, 0, 0, "-", "gaussopt"], [146, 0, 0, "-", "medium"], [147, 0, 0, "-", "polarization"], [148, 0, 0, "-", "utils"], [149, 0, 0, "-", "waves"]], "sympy.physics.optics.gaussopt": [[144, 1, 1, "", "BeamParameter"], [144, 1, 1, "", "CurvedMirror"], [144, 1, 1, "", "CurvedRefraction"], [144, 1, 1, "", "FlatMirror"], [144, 1, 1, "", "FlatRefraction"], [144, 1, 1, "", "FreeSpace"], [144, 1, 1, "", "GeometricRay"], [144, 1, 1, "", "RayTransferMatrix"], [144, 1, 1, "", "ThinLens"], [144, 3, 1, "", "conjugate_gauss_beams"], [144, 3, 1, "", "gaussian_conj"], [144, 3, 1, "", "geometric_conj_ab"], [144, 3, 1, "", "geometric_conj_af"], [144, 3, 1, "", "geometric_conj_bf"], [144, 3, 1, "", "rayleigh2waist"], [144, 3, 1, "", "waist2rayleigh"]], "sympy.physics.optics.gaussopt.BeamParameter": [[144, 4, 1, "", "divergence"], [144, 4, 1, "", "gouy"], [144, 4, 1, "", "q"], [144, 4, 1, "", "radius"], [144, 4, 1, "", "w"], [144, 4, 1, "", "w_0"], [144, 4, 1, "", "waist_approximation_limit"]], "sympy.physics.optics.gaussopt.GeometricRay": [[144, 4, 1, "", "angle"], [144, 4, 1, "", "height"]], "sympy.physics.optics.gaussopt.RayTransferMatrix": [[144, 4, 1, "", "A"], [144, 4, 1, "", "B"], [144, 4, 1, "", "C"], [144, 4, 1, "", "D"]], "sympy.physics.optics.medium": [[146, 1, 1, "", "Medium"]], "sympy.physics.optics.medium.Medium": [[146, 4, 1, "", "refractive_index"], [146, 4, 1, "", "speed"]], "sympy.physics.optics.polarization": [[147, 3, 1, "", "half_wave_retarder"], [147, 3, 1, "", "jones_2_stokes"], [147, 3, 1, "", "jones_vector"], [147, 3, 1, "", "linear_polarizer"], [147, 3, 1, "", "mueller_matrix"], [147, 3, 1, "", "phase_retarder"], [147, 3, 1, "", "polarizing_beam_splitter"], [147, 3, 1, "", "quarter_wave_retarder"], [147, 3, 1, "", "reflective_filter"], [147, 3, 1, "", "stokes_vector"], [147, 3, 1, "", "transmissive_filter"]], "sympy.physics.optics.utils": [[148, 3, 1, "", "brewster_angle"], [148, 3, 1, "", "critical_angle"], [148, 3, 1, "", "deviation"], [148, 3, 1, "", "fresnel_coefficients"], [148, 3, 1, "", "hyperfocal_distance"], [148, 3, 1, "", "lens_formula"], [148, 3, 1, "", "lens_makers_formula"], [148, 3, 1, "", "mirror_formula"], [148, 3, 1, "", "refraction_angle"], [148, 3, 1, "", "transverse_magnification"]], "sympy.physics.optics.waves": [[149, 1, 1, "", "TWave"]], "sympy.physics.optics.waves.TWave": [[149, 4, 1, "", "amplitude"], [149, 4, 1, "", "angular_velocity"], [149, 4, 1, "", "frequency"], [149, 4, 1, "", "n"], [149, 4, 1, "", "phase"], [149, 4, 1, "", "speed"], [149, 4, 1, "", "time_period"], [149, 4, 1, "", "wavelength"], [149, 4, 1, "", "wavenumber"]], "sympy.physics.paulialgebra": [[150, 3, 1, "", "evaluate_pauli_product"]], "sympy.physics.qho_1d": [[151, 3, 1, "", "E_n"], [151, 3, 1, "", "coherent_state"], [151, 3, 1, "", "psi_n"]], "sympy.physics.quantum": [[152, 0, 0, "-", "anticommutator"], [153, 0, 0, "-", "cartesian"], [154, 0, 0, "-", "cg"], [155, 0, 0, "-", "circuitplot"], [156, 0, 0, "-", "commutator"], [157, 0, 0, "-", "constants"], [158, 0, 0, "-", "dagger"], [159, 0, 0, "-", "gate"], [160, 0, 0, "-", "grover"], [161, 0, 0, "-", "hilbert"], [163, 0, 0, "-", "innerproduct"], [164, 0, 0, "-", "operator"], [165, 0, 0, "-", "operatorset"], [166, 0, 0, "-", "piab"], [167, 0, 0, "-", "qapply"], [168, 0, 0, "-", "qft"], [169, 0, 0, "-", "qubit"], [170, 0, 0, "-", "represent"], [171, 0, 0, "-", "shor"], [172, 0, 0, "-", "spin"], [173, 0, 0, "-", "state"], [174, 0, 0, "-", "tensorproduct"]], "sympy.physics.quantum.anticommutator": [[152, 1, 1, "", "AntiCommutator"]], "sympy.physics.quantum.anticommutator.AntiCommutator": [[152, 2, 1, "", "doit"]], "sympy.physics.quantum.cartesian": [[153, 1, 1, "", "PositionBra3D"], [153, 1, 1, "", "PositionKet3D"], [153, 1, 1, "", "PositionState3D"], [153, 1, 1, "", "PxBra"], [153, 1, 1, "", "PxKet"], [153, 1, 1, "", "PxOp"], [153, 1, 1, "", "XBra"], [153, 1, 1, "", "XKet"], [153, 1, 1, "", "XOp"], [153, 1, 1, "", "YOp"], [153, 1, 1, "", "ZOp"]], "sympy.physics.quantum.cartesian.PositionState3D": [[153, 4, 1, "", "position_x"], [153, 4, 1, "", "position_y"], [153, 4, 1, "", "position_z"]], "sympy.physics.quantum.cartesian.PxBra": [[153, 4, 1, "", "momentum"]], "sympy.physics.quantum.cartesian.PxKet": [[153, 4, 1, "", "momentum"]], "sympy.physics.quantum.cartesian.XBra": [[153, 4, 1, "", "position"]], "sympy.physics.quantum.cartesian.XKet": [[153, 4, 1, "", "position"]], "sympy.physics.quantum.cg": [[154, 1, 1, "", "CG"], [154, 1, 1, "", "Wigner3j"], [154, 1, 1, "", "Wigner6j"], [154, 1, 1, "", "Wigner9j"], [154, 3, 1, "", "cg_simp"]], "sympy.physics.quantum.circuitplot": [[155, 1, 1, "", "CircuitPlot"], [155, 3, 1, "", "CreateCGate"], [155, 1, 1, "", "Mx"], [155, 1, 1, "", "Mz"], [155, 3, 1, "", "circuit_plot"], [155, 3, 1, "", "labeller"]], "sympy.physics.quantum.circuitplot.CircuitPlot": [[155, 2, 1, "", "control_line"], [155, 2, 1, "", "control_point"], [155, 2, 1, "", "not_point"], [155, 2, 1, "", "one_qubit_box"], [155, 2, 1, "", "swap_point"], [155, 2, 1, "", "two_qubit_box"], [155, 2, 1, "", "update"]], "sympy.physics.quantum.commutator": [[156, 1, 1, "", "Commutator"]], "sympy.physics.quantum.commutator.Commutator": [[156, 2, 1, "", "doit"]], "sympy.physics.quantum.constants": [[157, 1, 1, "", "HBar"]], "sympy.physics.quantum.dagger": [[158, 1, 1, "", "Dagger"]], "sympy.physics.quantum.gate": [[159, 1, 1, "", "CGate"], [159, 1, 1, "", "CGateS"], [159, 5, 1, "", "CNOT"], [159, 1, 1, "", "CNotGate"], [159, 1, 1, "", "Gate"], [159, 5, 1, "", "H"], [159, 1, 1, "", "HadamardGate"], [159, 1, 1, "", "IdentityGate"], [159, 1, 1, "", "OneQubitGate"], [159, 5, 1, "", "Phase"], [159, 1, 1, "", "PhaseGate"], [159, 5, 1, "", "S"], [159, 5, 1, "", "SWAP"], [159, 1, 1, "", "SwapGate"], [159, 5, 1, "", "T"], [159, 1, 1, "", "TGate"], [159, 1, 1, "", "TwoQubitGate"], [159, 1, 1, "", "UGate"], [159, 5, 1, "", "X"], [159, 1, 1, "", "XGate"], [159, 5, 1, "", "Y"], [159, 1, 1, "", "YGate"], [159, 5, 1, "", "Z"], [159, 1, 1, "", "ZGate"], [159, 3, 1, "", "gate_simp"], [159, 3, 1, "", "gate_sort"], [159, 3, 1, "", "normalized"], [159, 3, 1, "", "random_circuit"]], "sympy.physics.quantum.gate.CGate": [[159, 4, 1, "", "controls"], [159, 2, 1, "", "decompose"], [159, 2, 1, "", "eval_controls"], [159, 4, 1, "", "gate"], [159, 4, 1, "", "min_qubits"], [159, 4, 1, "", "nqubits"], [159, 2, 1, "", "plot_gate"], [159, 4, 1, "", "targets"]], "sympy.physics.quantum.gate.CNotGate": [[159, 4, 1, "", "controls"], [159, 4, 1, "", "gate"], [159, 4, 1, "", "min_qubits"], [159, 4, 1, "", "targets"]], "sympy.physics.quantum.gate.Gate": [[159, 2, 1, "", "get_target_matrix"], [159, 4, 1, "", "min_qubits"], [159, 4, 1, "", "nqubits"], [159, 4, 1, "", "targets"]], "sympy.physics.quantum.gate.SwapGate": [[159, 2, 1, "", "decompose"]], "sympy.physics.quantum.gate.UGate": [[159, 2, 1, "", "get_target_matrix"], [159, 4, 1, "", "targets"]], "sympy.physics.quantum.grover": [[160, 1, 1, "", "OracleGate"], [160, 1, 1, "", "WGate"], [160, 3, 1, "", "apply_grover"], [160, 3, 1, "", "grover_iteration"], [160, 3, 1, "", "superposition_basis"]], "sympy.physics.quantum.grover.OracleGate": [[160, 4, 1, "", "search_function"], [160, 4, 1, "", "targets"]], "sympy.physics.quantum.hilbert": [[161, 1, 1, "", "ComplexSpace"], [161, 1, 1, "", "DirectSumHilbertSpace"], [161, 1, 1, "", "FockSpace"], [161, 1, 1, "", "HilbertSpace"], [161, 1, 1, "", "L2"], [161, 1, 1, "", "TensorPowerHilbertSpace"], [161, 1, 1, "", "TensorProductHilbertSpace"]], "sympy.physics.quantum.hilbert.DirectSumHilbertSpace": [[161, 2, 1, "", "eval"], [161, 4, 1, "", "spaces"]], "sympy.physics.quantum.hilbert.HilbertSpace": [[161, 4, 1, "", "dimension"]], "sympy.physics.quantum.hilbert.TensorProductHilbertSpace": [[161, 2, 1, "", "eval"], [161, 4, 1, "", "spaces"]], "sympy.physics.quantum.innerproduct": [[163, 1, 1, "", "InnerProduct"]], "sympy.physics.quantum.operator": [[164, 1, 1, "", "DifferentialOperator"], [164, 1, 1, "", "HermitianOperator"], [164, 1, 1, "", "IdentityOperator"], [164, 1, 1, "", "Operator"], [164, 1, 1, "", "OuterProduct"], [164, 1, 1, "", "UnitaryOperator"]], "sympy.physics.quantum.operator.DifferentialOperator": [[164, 4, 1, "", "expr"], [164, 4, 1, "", "free_symbols"], [164, 4, 1, "", "function"], [164, 4, 1, "", "variables"]], "sympy.physics.quantum.operator.OuterProduct": [[164, 4, 1, "", "bra"], [164, 4, 1, "", "ket"]], "sympy.physics.quantum.operatorset": [[165, 3, 1, "", "operators_to_state"], [165, 3, 1, "", "state_to_operators"]], "sympy.physics.quantum.piab": [[166, 1, 1, "", "PIABBra"], [166, 1, 1, "", "PIABHamiltonian"], [166, 1, 1, "", "PIABKet"]], "sympy.physics.quantum.qapply": [[167, 3, 1, "", "qapply"]], "sympy.physics.quantum.qft": [[168, 1, 1, "", "IQFT"], [168, 1, 1, "", "QFT"], [168, 5, 1, "", "Rk"], [168, 1, 1, "", "RkGate"]], "sympy.physics.quantum.qft.IQFT": [[168, 2, 1, "", "decompose"]], "sympy.physics.quantum.qft.QFT": [[168, 2, 1, "", "decompose"]], "sympy.physics.quantum.qubit": [[169, 1, 1, "", "IntQubit"], [169, 1, 1, "", "IntQubitBra"], [169, 1, 1, "", "Qubit"], [169, 1, 1, "", "QubitBra"], [169, 3, 1, "", "matrix_to_density"], [169, 3, 1, "", "matrix_to_qubit"], [169, 3, 1, "", "measure_all"], [169, 3, 1, "", "measure_all_oneshot"], [169, 3, 1, "", "measure_partial"], [169, 3, 1, "", "measure_partial_oneshot"], [169, 3, 1, "", "qubit_to_matrix"]], "sympy.physics.quantum.represent": [[170, 3, 1, "", "enumerate_states"], [170, 3, 1, "", "get_basis"], [170, 3, 1, "", "integrate_result"], [170, 3, 1, "", "rep_expectation"], [170, 3, 1, "", "rep_innerproduct"], [170, 3, 1, "", "represent"]], "sympy.physics.quantum.shor": [[171, 1, 1, "", "CMod"], [171, 3, 1, "", "period_find"], [171, 3, 1, "", "shor"]], "sympy.physics.quantum.shor.CMod": [[171, 4, 1, "", "N"], [171, 4, 1, "", "a"], [171, 4, 1, "", "t"]], "sympy.physics.quantum.spin": [[172, 1, 1, "", "J2Op"], [172, 1, 1, "", "JxBra"], [172, 1, 1, "", "JxBraCoupled"], [172, 1, 1, "", "JxKet"], [172, 1, 1, "", "JxKetCoupled"], [172, 1, 1, "", "JyBra"], [172, 1, 1, "", "JyBraCoupled"], [172, 1, 1, "", "JyKet"], [172, 1, 1, "", "JyKetCoupled"], [172, 1, 1, "", "JzBra"], [172, 1, 1, "", "JzBraCoupled"], [172, 1, 1, "", "JzKet"], [172, 1, 1, "", "JzKetCoupled"], [172, 1, 1, "", "JzOp"], [172, 1, 1, "", "Rotation"], [172, 1, 1, "", "WignerD"], [172, 3, 1, "", "couple"], [172, 3, 1, "", "uncouple"]], "sympy.physics.quantum.spin.Rotation": [[172, 2, 1, "", "D"], [172, 2, 1, "", "d"]], "sympy.physics.quantum.state": [[173, 1, 1, "", "Bra"], [173, 1, 1, "", "BraBase"], [173, 1, 1, "", "Ket"], [173, 1, 1, "", "KetBase"], [173, 1, 1, "", "OrthogonalBra"], [173, 1, 1, "", "OrthogonalKet"], [173, 1, 1, "", "OrthogonalState"], [173, 1, 1, "", "State"], [173, 1, 1, "", "StateBase"], [173, 1, 1, "", "TimeDepBra"], [173, 1, 1, "", "TimeDepKet"], [173, 1, 1, "", "TimeDepState"], [173, 1, 1, "", "Wavefunction"]], "sympy.physics.quantum.state.StateBase": [[173, 4, 1, "", "dual"], [173, 2, 1, "", "dual_class"], [173, 4, 1, "", "operators"]], "sympy.physics.quantum.state.TimeDepState": [[173, 4, 1, "", "label"], [173, 4, 1, "", "time"]], "sympy.physics.quantum.state.Wavefunction": [[173, 4, 1, "", "expr"], [173, 4, 1, "", "is_commutative"], [173, 4, 1, "", "is_normalized"], [173, 4, 1, "", "limits"], [173, 4, 1, "", "norm"], [173, 2, 1, "", "normalize"], [173, 2, 1, "", "prob"], [173, 4, 1, "", "variables"]], "sympy.physics.quantum.tensorproduct": [[174, 1, 1, "", "TensorProduct"], [174, 3, 1, "", "tensor_product_simp"]], "sympy.physics.secondquant": [[175, 1, 1, "", "AnnihilateBoson"], [175, 1, 1, "", "AnnihilateFermion"], [175, 1, 1, "", "AntiSymmetricTensor"], [175, 5, 1, "", "B"], [175, 5, 1, "", "BBra"], [175, 5, 1, "", "BKet"], [175, 5, 1, "", "Bd"], [175, 1, 1, "", "BosonicBasis"], [175, 1, 1, "", "Commutator"], [175, 1, 1, "", "CreateBoson"], [175, 1, 1, "", "CreateFermion"], [175, 1, 1, "", "Dagger"], [175, 5, 1, "", "F"], [175, 5, 1, "", "FBra"], [175, 5, 1, "", "FKet"], [175, 5, 1, "", "Fd"], [175, 1, 1, "", "FixedBosonicBasis"], [175, 1, 1, "", "FockState"], [175, 1, 1, "", "FockStateBosonBra"], [175, 1, 1, "", "FockStateBosonKet"], [175, 1, 1, "", "FockStateBra"], [175, 1, 1, "", "FockStateFermionBra"], [175, 1, 1, "", "FockStateFermionKet"], [175, 1, 1, "", "FockStateKet"], [175, 1, 1, "", "InnerProduct"], [175, 1, 1, "", "KroneckerDelta"], [175, 1, 1, "", "NO"], [175, 1, 1, "", "PermutationOperator"], [175, 1, 1, "", "VarBosonicBasis"], [175, 3, 1, "", "apply_operators"], [175, 3, 1, "", "contraction"], [175, 3, 1, "", "evaluate_deltas"], [175, 3, 1, "", "matrix_rep"], [175, 3, 1, "", "simplify_index_permutations"], [175, 3, 1, "", "substitute_dummies"], [175, 3, 1, "", "wicks"]], "sympy.physics.secondquant.AnnihilateBoson": [[175, 2, 1, "", "apply_operator"]], "sympy.physics.secondquant.AnnihilateFermion": [[175, 2, 1, "", "apply_operator"], [175, 4, 1, "", "is_only_q_annihilator"], [175, 4, 1, "", "is_only_q_creator"], [175, 4, 1, "", "is_q_annihilator"], [175, 4, 1, "", "is_q_creator"]], "sympy.physics.secondquant.AntiSymmetricTensor": [[175, 4, 1, "", "lower"], [175, 4, 1, "", "symbol"], [175, 4, 1, "", "upper"]], "sympy.physics.secondquant.Commutator": [[175, 2, 1, "", "doit"], [175, 2, 1, "", "eval"]], "sympy.physics.secondquant.CreateBoson": [[175, 2, 1, "", "apply_operator"]], "sympy.physics.secondquant.CreateFermion": [[175, 2, 1, "", "apply_operator"], [175, 4, 1, "", "is_only_q_annihilator"], [175, 4, 1, "", "is_only_q_creator"], [175, 4, 1, "", "is_q_annihilator"], [175, 4, 1, "", "is_q_creator"]], "sympy.physics.secondquant.Dagger": [[175, 2, 1, "", "eval"]], "sympy.physics.secondquant.FixedBosonicBasis": [[175, 2, 1, "", "index"], [175, 2, 1, "", "state"]], "sympy.physics.secondquant.InnerProduct": [[175, 4, 1, "", "bra"], [175, 4, 1, "", "ket"]], "sympy.physics.secondquant.KroneckerDelta": [[175, 2, 1, "", "eval"], [175, 4, 1, "", "indices_contain_equal_information"], [175, 4, 1, "", "is_above_fermi"], [175, 4, 1, "", "is_below_fermi"], [175, 4, 1, "", "is_only_above_fermi"], [175, 4, 1, "", "is_only_below_fermi"], [175, 4, 1, "", "killable_index"], [175, 4, 1, "", "preferred_index"]], "sympy.physics.secondquant.NO": [[175, 2, 1, "", "doit"], [175, 2, 1, "", "get_subNO"], [175, 4, 1, "", "has_q_annihilators"], [175, 4, 1, "", "has_q_creators"], [175, 2, 1, "", "iter_q_annihilators"], [175, 2, 1, "", "iter_q_creators"]], "sympy.physics.secondquant.PermutationOperator": [[175, 2, 1, "", "get_permuted"]], "sympy.physics.secondquant.VarBosonicBasis": [[175, 2, 1, "", "index"], [175, 2, 1, "", "state"]], "sympy.physics.sho": [[176, 3, 1, "", "E_nl"], [176, 3, 1, "", "R_nl"]], "sympy.physics.units": [[177, 0, 0, "-", "dimensions"], [181, 0, 0, "-", "prefixes"], [182, 0, 0, "-", "quantities"], [183, 0, 0, "-", "unitsystem"], [182, 0, 0, "-", "util"]], "sympy.physics.units.dimensions": [[177, 1, 1, "", "Dimension"], [177, 1, 1, "", "DimensionSystem"]], "sympy.physics.units.dimensions.Dimension": [[177, 2, 1, "", "has_integer_powers"]], "sympy.physics.units.dimensions.DimensionSystem": [[177, 4, 1, "", "can_transf_matrix"], [177, 4, 1, "", "dim"], [177, 2, 1, "", "dim_can_vector"], [177, 2, 1, "", "dim_vector"], [177, 4, 1, "", "inv_can_transf_matrix"], [177, 4, 1, "", "is_consistent"], [177, 2, 1, "", "is_dimensionless"], [177, 4, 1, "", "list_can_dims"], [177, 2, 1, "", "print_dim_base"]], "sympy.physics.units.prefixes": [[181, 1, 1, "", "Prefix"]], "sympy.physics.units.quantities": [[182, 1, 1, "", "Quantity"]], "sympy.physics.units.quantities.Quantity": [[182, 4, 1, "", "abbrev"], [182, 2, 1, "", "convert_to"], [182, 4, 1, "", "free_symbols"], [182, 4, 1, "", "is_prefixed"], [182, 4, 1, "", "scale_factor"], [182, 2, 1, "", "set_global_relative_scale_factor"]], "sympy.physics.units.unitsystem": [[183, 1, 1, "", "UnitSystem"]], "sympy.physics.units.unitsystem.UnitSystem": [[183, 4, 1, "", "dim"], [183, 2, 1, "", "extend"], [183, 2, 1, "", "get_units_non_prefixed"], [183, 4, 1, "", "is_consistent"]], "sympy.physics.units.util": [[182, 3, 1, "", "convert_to"]], "sympy.physics.vector.dyadic": [[185, 1, 1, "", "Dyadic"]], "sympy.physics.vector.dyadic.Dyadic": [[185, 2, 1, "", "applyfunc"], [185, 2, 1, "", "cross"], [185, 2, 1, "", "doit"], [185, 2, 1, "", "dot"], [185, 2, 1, "", "dt"], [185, 2, 1, "", "express"], [185, 4, 1, "", "func"], [185, 2, 1, "", "simplify"], [185, 2, 1, "", "subs"], [185, 2, 1, "", "to_matrix"], [185, 2, 1, "", "xreplace"]], "sympy.physics.vector": [[187, 3, 1, "", "dynamicsymbols"], [189, 0, 0, "-", "functions"], [189, 0, 0, "-", "point"]], "sympy.physics.vector.fieldfunctions": [[186, 3, 1, "", "curl"], [186, 3, 1, "", "divergence"], [186, 3, 1, "", "gradient"], [186, 3, 1, "", "is_conservative"], [186, 3, 1, "", "is_solenoidal"], [186, 3, 1, "", "scalar_potential"], [186, 3, 1, "", "scalar_potential_difference"]], "sympy.physics.vector.frame": [[185, 1, 1, "", "CoordinateSym"], [185, 1, 1, "", "ReferenceFrame"]], "sympy.physics.vector.frame.ReferenceFrame": [[185, 2, 1, "", "ang_acc_in"], [185, 2, 1, "", "ang_vel_in"], [185, 2, 1, "", "dcm"], [185, 2, 1, "", "orient"], [185, 2, 1, "", "orient_axis"], [185, 2, 1, "", "orient_body_fixed"], [185, 2, 1, "", "orient_explicit"], [185, 2, 1, "", "orient_quaternion"], [185, 2, 1, "", "orient_space_fixed"], [185, 2, 1, "", "orientnew"], [185, 2, 1, "", "partial_velocity"], [185, 2, 1, "", "set_ang_acc"], [185, 2, 1, "", "set_ang_vel"], [185, 2, 1, "", "variable_map"], [185, 4, 1, "", "x"], [185, 4, 1, "", "y"], [185, 4, 1, "", "z"]], "sympy.physics.vector.functions": [[187, 3, 1, "", "cross"], [187, 3, 1, "", "dot"], [187, 3, 1, "", "express"], [189, 3, 1, "", "get_motion_params"], [189, 3, 1, "", "kinematic_equations"], [187, 3, 1, "", "outer"], [189, 3, 1, "", "partial_velocity"], [187, 3, 1, "", "time_derivative"]], "sympy.physics.vector.point": [[189, 1, 1, "", "Point"]], "sympy.physics.vector.point.Point": [[189, 2, 1, "", "a1pt_theory"], [189, 2, 1, "", "a2pt_theory"], [189, 2, 1, "", "acc"], [189, 2, 1, "", "locatenew"], [189, 2, 1, "", "partial_velocity"], [189, 2, 1, "", "pos_from"], [189, 2, 1, "", "set_acc"], [189, 2, 1, "", "set_pos"], [189, 2, 1, "", "set_vel"], [189, 2, 1, "", "v1pt_theory"], [189, 2, 1, "", "v2pt_theory"], [189, 2, 1, "", "vel"]], "sympy.physics.vector.printing": [[190, 3, 1, "", "init_vprinting"], [190, 3, 1, "", "vlatex"], [190, 3, 1, "", "vpprint"], [190, 3, 1, "", "vprint"]], "sympy.physics.vector.vector": [[185, 1, 1, "", "Vector"]], "sympy.physics.vector.vector.Vector": [[185, 2, 1, "", "angle_between"], [185, 2, 1, "", "applyfunc"], [185, 2, 1, "", "cross"], [185, 2, 1, "", "diff"], [185, 2, 1, "", "doit"], [185, 2, 1, "", "dot"], [185, 2, 1, "", "dt"], [185, 2, 1, "", "express"], [185, 2, 1, "", "free_dynamicsymbols"], [185, 2, 1, "", "free_symbols"], [185, 4, 1, "", "func"], [185, 2, 1, "", "magnitude"], [185, 2, 1, "", "normalize"], [185, 2, 1, "", "outer"], [185, 2, 1, "", "separate"], [185, 2, 1, "", "simplify"], [185, 2, 1, "", "subs"], [185, 2, 1, "", "to_matrix"], [185, 2, 1, "", "xreplace"]], "sympy.physics.wigner": [[195, 3, 1, "", "clebsch_gordan"], [195, 3, 1, "", "dot_rot_grad_Ynm"], [195, 3, 1, "", "gaunt"], [195, 3, 1, "", "racah"], [195, 3, 1, "", "real_gaunt"], [195, 3, 1, "", "wigner_3j"], [195, 3, 1, "", "wigner_6j"], [195, 3, 1, "", "wigner_9j"], [195, 3, 1, "", "wigner_d"], [195, 3, 1, "", "wigner_d_small"]], "sympy.plotting": [[196, 0, 0, "-", "plot"], [196, 0, 0, "-", "pygletplot"]], "sympy.plotting.plot": [[196, 1, 1, "", "BaseBackend"], [196, 1, 1, "", "BaseSeries"], [196, 1, 1, "", "Line2DBaseSeries"], [196, 1, 1, "", "Line3DBaseSeries"], [196, 1, 1, "", "LineOver1DRangeSeries"], [196, 1, 1, "", "MatplotlibBackend"], [196, 1, 1, "", "Parametric2DLineSeries"], [196, 1, 1, "", "Parametric3DLineSeries"], [196, 1, 1, "", "ParametricSurfaceSeries"], [196, 1, 1, "", "Plot"], [196, 1, 1, "", "PlotGrid"], [196, 1, 1, "", "SurfaceBaseSeries"], [196, 1, 1, "", "SurfaceOver2DRangeSeries"], [196, 1, 1, "", "TextBackend"], [196, 3, 1, "", "plot"], [196, 3, 1, "", "plot3d"], [196, 3, 1, "", "plot3d_parametric_line"], [196, 3, 1, "", "plot3d_parametric_surface"], [196, 3, 1, "", "plot_parametric"]], "sympy.plotting.plot.Line2DBaseSeries": [[196, 2, 1, "", "get_data"]], "sympy.plotting.plot.LineOver1DRangeSeries": [[196, 2, 1, "", "get_points"]], "sympy.plotting.plot.MatplotlibBackend": [[196, 2, 1, "", "get_segments"], [196, 2, 1, "", "process_series"]], "sympy.plotting.plot.Parametric2DLineSeries": [[196, 2, 1, "", "get_points"]], "sympy.plotting.plot.Plot": [[196, 2, 1, "", "append"], [196, 2, 1, "", "extend"]], "sympy.plotting.plot_implicit": [[196, 1, 1, "", "ImplicitSeries"], [196, 3, 1, "", "plot_implicit"]], "sympy.plotting.textplot": [[196, 3, 1, "", "textplot"]], "sympy.polys.agca.extensions": [[197, 1, 1, "", "ExtensionElement"], [197, 1, 1, "", "MonogenicFiniteExtension"]], "sympy.polys.agca.extensions.ExtensionElement": [[197, 2, 1, "", "inverse"]], "sympy.polys.agca.extensions.MonogenicFiniteExtension": [[197, 5, 1, "", "dtype"]], "sympy.polys.agca.homomorphisms": [[197, 1, 1, "", "ModuleHomomorphism"], [197, 3, 1, "", "homomorphism"]], "sympy.polys.agca.homomorphisms.ModuleHomomorphism": [[197, 2, 1, "", "image"], [197, 2, 1, "", "is_injective"], [197, 2, 1, "", "is_isomorphism"], [197, 2, 1, "", "is_surjective"], [197, 2, 1, "", "is_zero"], [197, 2, 1, "", "kernel"], [197, 2, 1, "", "quotient_codomain"], [197, 2, 1, "", "quotient_domain"], [197, 2, 1, "", "restrict_codomain"], [197, 2, 1, "", "restrict_domain"]], "sympy.polys.agca.ideals": [[197, 1, 1, "", "Ideal"]], "sympy.polys.agca.ideals.Ideal": [[197, 2, 1, "", "contains"], [197, 2, 1, "", "depth"], [197, 2, 1, "", "height"], [197, 2, 1, "", "intersect"], [197, 2, 1, "", "is_maximal"], [197, 2, 1, "", "is_primary"], [197, 2, 1, "", "is_prime"], [197, 2, 1, "", "is_principal"], [197, 2, 1, "", "is_radical"], [197, 2, 1, "", "is_whole_ring"], [197, 2, 1, "", "is_zero"], [197, 2, 1, "", "product"], [197, 2, 1, "", "quotient"], [197, 2, 1, "", "radical"], [197, 2, 1, "", "reduce_element"], [197, 2, 1, "", "saturate"], [197, 2, 1, "", "subset"], [197, 2, 1, "", "union"]], "sympy.polys.agca.modules": [[197, 1, 1, "", "FreeModule"], [197, 1, 1, "", "FreeModuleElement"], [197, 1, 1, "", "Module"], [197, 1, 1, "", "QuotientModule"], [197, 1, 1, "", "QuotientModuleElement"], [197, 1, 1, "", "SubModule"], [197, 1, 1, "", "SubQuotientModule"]], "sympy.polys.agca.modules.FreeModule": [[197, 2, 1, "", "basis"], [197, 2, 1, "", "convert"], [197, 5, 1, "", "dtype"], [197, 2, 1, "", "identity_hom"], [197, 2, 1, "", "is_submodule"], [197, 2, 1, "", "is_zero"], [197, 2, 1, "", "multiply_ideal"], [197, 2, 1, "", "quotient_module"]], "sympy.polys.agca.modules.Module": [[197, 2, 1, "", "contains"], [197, 2, 1, "", "convert"], [197, 2, 1, "", "identity_hom"], [197, 2, 1, "", "is_submodule"], [197, 2, 1, "", "is_zero"], [197, 2, 1, "", "multiply_ideal"], [197, 2, 1, "", "quotient_module"], [197, 2, 1, "", "submodule"], [197, 2, 1, "", "subset"]], "sympy.polys.agca.modules.QuotientModule": [[197, 2, 1, "", "convert"], [197, 5, 1, "", "dtype"], [197, 2, 1, "", "identity_hom"], [197, 2, 1, "", "is_submodule"], [197, 2, 1, "", "is_zero"], [197, 2, 1, "", "quotient_hom"], [197, 2, 1, "", "submodule"]], "sympy.polys.agca.modules.QuotientModuleElement": [[197, 2, 1, "", "eq"]], "sympy.polys.agca.modules.SubModule": [[197, 2, 1, "", "convert"], [197, 2, 1, "", "identity_hom"], [197, 2, 1, "", "in_terms_of_generators"], [197, 2, 1, "", "inclusion_hom"], [197, 2, 1, "", "intersect"], [197, 2, 1, "", "is_full_module"], [197, 2, 1, "", "is_submodule"], [197, 2, 1, "", "is_zero"], [197, 2, 1, "", "module_quotient"], [197, 2, 1, "", "multiply_ideal"], [197, 2, 1, "", "quotient_module"], [197, 2, 1, "", "reduce_element"], [197, 2, 1, "", "submodule"], [197, 2, 1, "", "syzygy_module"], [197, 2, 1, "", "union"]], "sympy.polys.agca.modules.SubQuotientModule": [[197, 2, 1, "", "is_full_module"], [197, 2, 1, "", "quotient_hom"]], "sympy.polys.appellseqs": [[206, 3, 1, "", "andre_poly"], [206, 3, 1, "", "bernoulli_c_poly"], [206, 3, 1, "", "bernoulli_poly"], [206, 3, 1, "", "euler_poly"], [206, 3, 1, "", "genocchi_poly"]], "sympy.polys.constructor": [[206, 3, 1, "", "construct_domain"]], "sympy.polys.densearith": [[203, 3, 1, "", "dmp_abs"], [203, 3, 1, "", "dmp_add"], [203, 3, 1, "", "dmp_add_ground"], [203, 3, 1, "", "dmp_add_mul"], [203, 3, 1, "", "dmp_add_term"], [203, 3, 1, "", "dmp_div"], [203, 3, 1, "", "dmp_expand"], [203, 3, 1, "", "dmp_exquo"], [203, 3, 1, "", "dmp_exquo_ground"], [203, 3, 1, "", "dmp_ff_div"], [203, 3, 1, "", "dmp_l1_norm"], [203, 3, 1, "", "dmp_max_norm"], [203, 3, 1, "", "dmp_mul"], [203, 3, 1, "", "dmp_mul_ground"], [203, 3, 1, "", "dmp_mul_term"], [203, 3, 1, "", "dmp_neg"], [203, 3, 1, "", "dmp_pdiv"], [203, 3, 1, "", "dmp_pexquo"], [203, 3, 1, "", "dmp_pow"], [203, 3, 1, "", "dmp_pquo"], [203, 3, 1, "", "dmp_prem"], [203, 3, 1, "", "dmp_quo"], [203, 3, 1, "", "dmp_quo_ground"], [203, 3, 1, "", "dmp_rem"], [203, 3, 1, "", "dmp_rr_div"], [203, 3, 1, "", "dmp_sqr"], [203, 3, 1, "", "dmp_sub"], [203, 3, 1, "", "dmp_sub_ground"], [203, 3, 1, "", "dmp_sub_mul"], [203, 3, 1, "", "dmp_sub_term"], [203, 3, 1, "", "dup_lshift"], [203, 3, 1, "", "dup_rshift"]], "sympy.polys.densebasic": [[203, 3, 1, "", "dmp_LC"], [203, 3, 1, "", "dmp_TC"], [203, 3, 1, "", "dmp_apply_pairs"], [203, 3, 1, "", "dmp_convert"], [203, 3, 1, "", "dmp_copy"], [203, 3, 1, "", "dmp_deflate"], [203, 3, 1, "", "dmp_degree"], [203, 3, 1, "", "dmp_degree_in"], [203, 3, 1, "", "dmp_degree_list"], [203, 3, 1, "", "dmp_eject"], [203, 3, 1, "", "dmp_exclude"], [203, 3, 1, "", "dmp_from_dict"], [203, 3, 1, "", "dmp_from_sympy"], [203, 3, 1, "", "dmp_ground"], [203, 3, 1, "", "dmp_ground_LC"], [203, 3, 1, "", "dmp_ground_TC"], [203, 3, 1, "", "dmp_ground_nth"], [203, 3, 1, "", "dmp_ground_p"], [203, 3, 1, "", "dmp_grounds"], [203, 3, 1, "", "dmp_include"], [203, 3, 1, "", "dmp_inflate"], [203, 3, 1, "", "dmp_inject"], [203, 3, 1, "", "dmp_list_terms"], [203, 3, 1, "", "dmp_multi_deflate"], [203, 3, 1, "", "dmp_negative_p"], [203, 3, 1, "", "dmp_nest"], [203, 3, 1, "", "dmp_normal"], [203, 3, 1, "", "dmp_nth"], [203, 3, 1, "", "dmp_one"], [203, 3, 1, "", "dmp_one_p"], [203, 3, 1, "", "dmp_permute"], [203, 3, 1, "", "dmp_positive_p"], [203, 3, 1, "", "dmp_raise"], [203, 3, 1, "", "dmp_slice"], [203, 3, 1, "", "dmp_strip"], [203, 3, 1, "", "dmp_swap"], [203, 3, 1, "", "dmp_terms_gcd"], [203, 3, 1, "", "dmp_to_dict"], [203, 3, 1, "", "dmp_to_tuple"], [203, 3, 1, "", "dmp_true_LT"], [203, 3, 1, "", "dmp_validate"], [203, 3, 1, "", "dmp_zero"], [203, 3, 1, "", "dmp_zero_p"], [203, 3, 1, "", "dmp_zeros"], [203, 3, 1, "", "dup_random"], [203, 3, 1, "", "dup_reverse"]], "sympy.polys.densetools": [[203, 3, 1, "", "dmp_clear_denoms"], [203, 3, 1, "", "dmp_compose"], [203, 3, 1, "", "dmp_diff"], [203, 3, 1, "", "dmp_diff_eval_in"], [203, 3, 1, "", "dmp_diff_in"], [203, 3, 1, "", "dmp_eval"], [203, 3, 1, "", "dmp_eval_in"], [203, 3, 1, "", "dmp_eval_tail"], [203, 3, 1, "", "dmp_ground_content"], [203, 3, 1, "", "dmp_ground_extract"], [203, 3, 1, "", "dmp_ground_monic"], [203, 3, 1, "", "dmp_ground_primitive"], [203, 3, 1, "", "dmp_ground_trunc"], [203, 3, 1, "", "dmp_integrate"], [203, 3, 1, "", "dmp_integrate_in"], [203, 3, 1, "", "dmp_lift"], [203, 3, 1, "", "dmp_revert"], [203, 3, 1, "", "dmp_trunc"], [203, 3, 1, "", "dup_content"], [203, 3, 1, "", "dup_decompose"], [203, 3, 1, "", "dup_extract"], [203, 3, 1, "", "dup_mirror"], [203, 3, 1, "", "dup_monic"], [203, 3, 1, "", "dup_primitive"], [203, 3, 1, "", "dup_real_imag"], [203, 3, 1, "", "dup_scale"], [203, 3, 1, "", "dup_shift"], [203, 3, 1, "", "dup_sign_variations"], [203, 3, 1, "", "dup_transform"]], "sympy.polys.dispersion": [[206, 3, 1, "", "dispersion"], [206, 3, 1, "", "dispersionset"]], "sympy.polys.distributedmodules": [[203, 3, 1, "", "sdm_LC"], [203, 3, 1, "", "sdm_LM"], [203, 3, 1, "", "sdm_LT"], [203, 3, 1, "", "sdm_add"], [203, 3, 1, "", "sdm_deg"], [203, 3, 1, "", "sdm_ecart"], [203, 3, 1, "", "sdm_from_dict"], [203, 3, 1, "", "sdm_from_vector"], [203, 3, 1, "", "sdm_groebner"], [203, 3, 1, "", "sdm_monomial_deg"], [203, 3, 1, "", "sdm_monomial_divides"], [203, 3, 1, "", "sdm_monomial_mul"], [203, 3, 1, "", "sdm_mul_term"], [203, 3, 1, "", "sdm_nf_mora"], [203, 3, 1, "", "sdm_spoly"], [203, 3, 1, "", "sdm_to_dict"], [203, 3, 1, "", "sdm_to_vector"], [203, 3, 1, "", "sdm_zero"]], "sympy.polys.domains": [[201, 1, 1, "", "AlgebraicField"], [201, 1, 1, "", "ComplexField"], [201, 1, 1, "", "ExpressionDomain"], [201, 1, 1, "", "FiniteField"], [201, 1, 1, "", "FractionField"], [201, 1, 1, "", "GMPYFiniteField"], [201, 1, 1, "", "GMPYIntegerRing"], [201, 1, 1, "", "GMPYRationalField"], [201, 1, 1, "", "IntegerRing"], [201, 1, 1, "", "PolynomialRing"], [201, 1, 1, "", "PythonFiniteField"], [201, 1, 1, "", "PythonIntegerRing"], [201, 1, 1, "", "PythonRationalField"], [201, 1, 1, "", "RationalField"], [201, 1, 1, "", "RealField"]], "sympy.polys.domains.AlgebraicField": [[201, 2, 1, "", "algebraic_field"], [201, 2, 1, "", "denom"], [201, 2, 1, "", "discriminant"], [201, 5, 1, "", "dtype"], [201, 5, 1, "", "ext"], [201, 2, 1, "", "from_AlgebraicField"], [201, 2, 1, "", "from_GaussianIntegerRing"], [201, 2, 1, "", "from_GaussianRationalField"], [201, 2, 1, "", "from_QQ"], [201, 2, 1, "", "from_QQ_gmpy"], [201, 2, 1, "", "from_QQ_python"], [201, 2, 1, "", "from_RealField"], [201, 2, 1, "", "from_ZZ"], [201, 2, 1, "", "from_ZZ_gmpy"], [201, 2, 1, "", "from_ZZ_python"], [201, 2, 1, "", "from_sympy"], [201, 2, 1, "", "get_ring"], [201, 2, 1, "", "integral_basis"], [201, 2, 1, "", "is_negative"], [201, 2, 1, "", "is_nonnegative"], [201, 2, 1, "", "is_nonpositive"], [201, 2, 1, "", "is_positive"], [201, 2, 1, "", "maximal_order"], [201, 5, 1, "", "mod"], [201, 2, 1, "", "numer"], [201, 5, 1, "", "orig_ext"], [201, 2, 1, "", "primes_above"], [201, 2, 1, "", "to_alg_num"], [201, 2, 1, "", "to_sympy"]], "sympy.polys.domains.ComplexField": [[201, 2, 1, "", "almosteq"], [201, 2, 1, "", "from_sympy"], [201, 2, 1, "", "gcd"], [201, 2, 1, "", "get_exact"], [201, 2, 1, "", "get_ring"], [201, 2, 1, "", "is_negative"], [201, 2, 1, "", "is_nonnegative"], [201, 2, 1, "", "is_nonpositive"], [201, 2, 1, "", "is_positive"], [201, 2, 1, "", "lcm"], [201, 2, 1, "", "to_sympy"]], "sympy.polys.domains.ExpressionDomain": [[201, 1, 1, "", "Expression"], [201, 2, 1, "", "denom"], [201, 5, 1, "", "dtype"], [201, 2, 1, "", "from_ExpressionDomain"], [201, 2, 1, "", "from_FractionField"], [201, 2, 1, "", "from_GaussianIntegerRing"], [201, 2, 1, "", "from_GaussianRationalField"], [201, 2, 1, "", "from_PolynomialRing"], [201, 2, 1, "", "from_QQ"], [201, 2, 1, "", "from_QQ_gmpy"], [201, 2, 1, "", "from_QQ_python"], [201, 2, 1, "", "from_RealField"], [201, 2, 1, "", "from_ZZ"], [201, 2, 1, "", "from_ZZ_gmpy"], [201, 2, 1, "", "from_ZZ_python"], [201, 2, 1, "", "from_sympy"], [201, 2, 1, "", "get_field"], [201, 2, 1, "", "get_ring"], [201, 2, 1, "", "is_negative"], [201, 2, 1, "", "is_nonnegative"], [201, 2, 1, "", "is_nonpositive"], [201, 2, 1, "", "is_positive"], [201, 2, 1, "", "numer"], [201, 2, 1, "", "to_sympy"]], "sympy.polys.domains.FiniteField": [[201, 2, 1, "", "characteristic"], [201, 2, 1, "", "from_FF"], [201, 2, 1, "", "from_FF_gmpy"], [201, 2, 1, "", "from_FF_python"], [201, 2, 1, "", "from_QQ"], [201, 2, 1, "", "from_QQ_gmpy"], [201, 2, 1, "", "from_QQ_python"], [201, 2, 1, "", "from_RealField"], [201, 2, 1, "", "from_ZZ"], [201, 2, 1, "", "from_ZZ_gmpy"], [201, 2, 1, "", "from_ZZ_python"], [201, 2, 1, "", "from_sympy"], [201, 2, 1, "", "get_field"], [201, 2, 1, "", "to_sympy"]], "sympy.polys.domains.FractionField": [[201, 2, 1, "", "denom"], [201, 2, 1, "", "factorial"], [201, 2, 1, "", "from_AlgebraicField"], [201, 2, 1, "", "from_ComplexField"], [201, 2, 1, "", "from_FractionField"], [201, 2, 1, "", "from_GaussianIntegerRing"], [201, 2, 1, "", "from_GaussianRationalField"], [201, 2, 1, "", "from_PolynomialRing"], [201, 2, 1, "", "from_QQ"], [201, 2, 1, "", "from_QQ_gmpy"], [201, 2, 1, "", "from_QQ_python"], [201, 2, 1, "", "from_RealField"], [201, 2, 1, "", "from_ZZ"], [201, 2, 1, "", "from_ZZ_gmpy"], [201, 2, 1, "", "from_ZZ_python"], [201, 2, 1, "", "from_sympy"], [201, 2, 1, "", "get_ring"], [201, 2, 1, "", "is_negative"], [201, 2, 1, "", "is_nonnegative"], [201, 2, 1, "", "is_nonpositive"], [201, 2, 1, "", "is_positive"], [201, 2, 1, "", "numer"], [201, 2, 1, "", "to_sympy"]], "sympy.polys.domains.GMPYIntegerRing": [[201, 2, 1, "", "factorial"], [201, 2, 1, "", "from_FF_gmpy"], [201, 2, 1, "", "from_FF_python"], [201, 2, 1, "", "from_QQ"], [201, 2, 1, "", "from_QQ_gmpy"], [201, 2, 1, "", "from_QQ_python"], [201, 2, 1, "", "from_RealField"], [201, 2, 1, "", "from_ZZ_gmpy"], [201, 2, 1, "", "from_ZZ_python"], [201, 2, 1, "", "from_sympy"], [201, 2, 1, "", "gcd"], [201, 2, 1, "", "gcdex"], [201, 2, 1, "", "lcm"], [201, 2, 1, "", "sqrt"], [201, 2, 1, "", "to_sympy"]], "sympy.polys.domains.GMPYRationalField": [[201, 2, 1, "", "denom"], [201, 2, 1, "", "div"], [201, 2, 1, "", "exquo"], [201, 2, 1, "", "factorial"], [201, 2, 1, "", "from_GaussianRationalField"], [201, 2, 1, "", "from_QQ_gmpy"], [201, 2, 1, "", "from_QQ_python"], [201, 2, 1, "", "from_RealField"], [201, 2, 1, "", "from_ZZ_gmpy"], [201, 2, 1, "", "from_ZZ_python"], [201, 2, 1, "", "from_sympy"], [201, 2, 1, "", "get_ring"], [201, 2, 1, "", "numer"], [201, 2, 1, "", "quo"], [201, 2, 1, "", "rem"], [201, 2, 1, "", "to_sympy"]], "sympy.polys.domains.IntegerRing": [[201, 2, 1, "", "algebraic_field"], [201, 2, 1, "", "factorial"], [201, 2, 1, "", "from_AlgebraicField"], [201, 2, 1, "", "from_FF"], [201, 2, 1, "", "from_FF_gmpy"], [201, 2, 1, "", "from_FF_python"], [201, 2, 1, "", "from_QQ"], [201, 2, 1, "", "from_QQ_gmpy"], [201, 2, 1, "", "from_QQ_python"], [201, 2, 1, "", "from_RealField"], [201, 2, 1, "", "from_ZZ"], [201, 2, 1, "", "from_ZZ_gmpy"], [201, 2, 1, "", "from_ZZ_python"], [201, 2, 1, "", "from_sympy"], [201, 2, 1, "", "gcd"], [201, 2, 1, "", "gcdex"], [201, 2, 1, "", "get_field"], [201, 2, 1, "", "lcm"], [201, 2, 1, "", "log"], [201, 2, 1, "", "sqrt"], [201, 2, 1, "", "to_sympy"]], "sympy.polys.domains.PolynomialRing": [[201, 2, 1, "", "factorial"], [201, 2, 1, "", "from_AlgebraicField"], [201, 2, 1, "", "from_ComplexField"], [201, 2, 1, "", "from_FractionField"], [201, 2, 1, "", "from_GaussianIntegerRing"], [201, 2, 1, "", "from_GaussianRationalField"], [201, 2, 1, "", "from_GlobalPolynomialRing"], [201, 2, 1, "", "from_PolynomialRing"], [201, 2, 1, "", "from_QQ"], [201, 2, 1, "", "from_QQ_gmpy"], [201, 2, 1, "", "from_QQ_python"], [201, 2, 1, "", "from_RealField"], [201, 2, 1, "", "from_ZZ"], [201, 2, 1, "", "from_ZZ_gmpy"], [201, 2, 1, "", "from_ZZ_python"], [201, 2, 1, "", "from_sympy"], [201, 2, 1, "", "gcd"], [201, 2, 1, "", "gcdex"], [201, 2, 1, "", "get_field"], [201, 2, 1, "", "is_negative"], [201, 2, 1, "", "is_nonnegative"], [201, 2, 1, "", "is_nonpositive"], [201, 2, 1, "", "is_positive"], [201, 2, 1, "", "is_unit"], [201, 2, 1, "", "lcm"], [201, 2, 1, "", "to_sympy"]], "sympy.polys.domains.RationalField": [[201, 2, 1, "", "algebraic_field"], [201, 2, 1, "", "denom"], [201, 2, 1, "", "div"], [201, 2, 1, "", "exquo"], [201, 2, 1, "", "from_AlgebraicField"], [201, 2, 1, "", "from_GaussianRationalField"], [201, 2, 1, "", "from_QQ"], [201, 2, 1, "", "from_QQ_gmpy"], [201, 2, 1, "", "from_QQ_python"], [201, 2, 1, "", "from_RealField"], [201, 2, 1, "", "from_ZZ"], [201, 2, 1, "", "from_ZZ_gmpy"], [201, 2, 1, "", "from_ZZ_python"], [201, 2, 1, "", "from_sympy"], [201, 2, 1, "", "get_ring"], [201, 2, 1, "", "numer"], [201, 2, 1, "", "quo"], [201, 2, 1, "", "rem"], [201, 2, 1, "", "to_sympy"]], "sympy.polys.domains.RealField": [[201, 2, 1, "", "almosteq"], [201, 2, 1, "", "from_sympy"], [201, 2, 1, "", "gcd"], [201, 2, 1, "", "get_exact"], [201, 2, 1, "", "get_ring"], [201, 2, 1, "", "lcm"], [201, 2, 1, "", "to_rational"], [201, 2, 1, "", "to_sympy"]], "sympy.polys.domains.compositedomain": [[201, 1, 1, "", "CompositeDomain"]], "sympy.polys.domains.compositedomain.CompositeDomain": [[201, 2, 1, "", "drop"], [201, 2, 1, "", "inject"]], "sympy.polys.domains.domain": [[201, 1, 1, "", "Domain"]], "sympy.polys.domains.domain.Domain": [[201, 2, 1, "", "abs"], [201, 2, 1, "", "add"], [201, 2, 1, "", "alg_field_from_poly"], [201, 2, 1, "", "algebraic_field"], [201, 2, 1, "", "almosteq"], [201, 2, 1, "", "characteristic"], [201, 2, 1, "", "cofactors"], [201, 2, 1, "", "convert"], [201, 2, 1, "", "convert_from"], [201, 2, 1, "", "cyclotomic_field"], [201, 2, 1, "", "denom"], [201, 2, 1, "", "div"], [201, 2, 1, "", "drop"], [201, 5, 1, "", "dtype"], [201, 2, 1, "", "evalf"], [201, 2, 1, "", "exquo"], [201, 2, 1, "", "frac_field"], [201, 2, 1, "", "from_AlgebraicField"], [201, 2, 1, "", "from_ComplexField"], [201, 2, 1, "", "from_ExpressionDomain"], [201, 2, 1, "", "from_ExpressionRawDomain"], [201, 2, 1, "", "from_FF"], [201, 2, 1, "", "from_FF_gmpy"], [201, 2, 1, "", "from_FF_python"], [201, 2, 1, "", "from_FractionField"], [201, 2, 1, "", "from_GlobalPolynomialRing"], [201, 2, 1, "", "from_MonogenicFiniteExtension"], [201, 2, 1, "", "from_PolynomialRing"], [201, 2, 1, "", "from_QQ_gmpy"], [201, 2, 1, "", "from_QQ_python"], [201, 2, 1, "", "from_RealField"], [201, 2, 1, "", "from_ZZ_gmpy"], [201, 2, 1, "", "from_ZZ_python"], [201, 2, 1, "", "from_sympy"], [201, 2, 1, "", "gcd"], [201, 2, 1, "", "gcdex"], [201, 2, 1, "", "get_exact"], [201, 2, 1, "", "get_field"], [201, 2, 1, "", "get_ring"], [201, 2, 1, "", "half_gcdex"], [201, 5, 1, "", "has_assoc_Field"], [201, 5, 1, "", "has_assoc_Ring"], [201, 2, 1, "", "inject"], [201, 2, 1, "", "invert"], [201, 5, 1, "", "is_Field"], [201, 5, 1, "", "is_PID"], [201, 5, 1, "", "is_Ring"], [201, 2, 1, "", "is_negative"], [201, 2, 1, "", "is_nonnegative"], [201, 2, 1, "", "is_nonpositive"], [201, 2, 1, "", "is_one"], [201, 2, 1, "", "is_positive"], [201, 2, 1, "", "is_zero"], [201, 2, 1, "", "lcm"], [201, 2, 1, "", "log"], [201, 2, 1, "", "map"], [201, 2, 1, "", "mul"], [201, 2, 1, "", "n"], [201, 2, 1, "", "neg"], [201, 2, 1, "", "numer"], [201, 2, 1, "", "of_type"], [201, 2, 1, "", "old_frac_field"], [201, 2, 1, "", "old_poly_ring"], [201, 5, 1, "", "one"], [201, 2, 1, "", "poly_ring"], [201, 2, 1, "", "pos"], [201, 2, 1, "", "pow"], [201, 2, 1, "", "quo"], [201, 2, 1, "", "rem"], [201, 2, 1, "", "revert"], [201, 2, 1, "", "sqrt"], [201, 2, 1, "", "sub"], [201, 2, 1, "", "to_sympy"], [201, 4, 1, "", "tp"], [201, 2, 1, "", "unify"], [201, 5, 1, "", "zero"]], "sympy.polys.domains.domainelement": [[201, 1, 1, "", "DomainElement"]], "sympy.polys.domains.domainelement.DomainElement": [[201, 2, 1, "", "parent"]], "sympy.polys.domains.expressiondomain.ExpressionDomain": [[201, 1, 1, "", "Expression"]], "sympy.polys.domains.field": [[201, 1, 1, "", "Field"]], "sympy.polys.domains.field.Field": [[201, 2, 1, "", "div"], [201, 2, 1, "", "exquo"], [201, 2, 1, "", "gcd"], [201, 2, 1, "", "get_field"], [201, 2, 1, "", "get_ring"], [201, 2, 1, "", "is_unit"], [201, 2, 1, "", "lcm"], [201, 2, 1, "", "quo"], [201, 2, 1, "", "rem"], [201, 2, 1, "", "revert"]], "sympy.polys.domains.gaussiandomains": [[201, 1, 1, "", "GaussianDomain"], [201, 1, 1, "", "GaussianElement"], [201, 1, 1, "", "GaussianInteger"], [201, 1, 1, "", "GaussianIntegerRing"], [201, 1, 1, "", "GaussianRational"], [201, 1, 1, "", "GaussianRationalField"]], "sympy.polys.domains.gaussiandomains.GaussianDomain": [[201, 2, 1, "", "from_AlgebraicField"], [201, 2, 1, "", "from_QQ"], [201, 2, 1, "", "from_QQ_gmpy"], [201, 2, 1, "", "from_QQ_python"], [201, 2, 1, "", "from_ZZ"], [201, 2, 1, "", "from_ZZ_gmpy"], [201, 2, 1, "", "from_ZZ_python"], [201, 2, 1, "", "from_sympy"], [201, 2, 1, "", "inject"], [201, 2, 1, "", "is_negative"], [201, 2, 1, "", "is_nonnegative"], [201, 2, 1, "", "is_nonpositive"], [201, 2, 1, "", "is_positive"], [201, 2, 1, "", "to_sympy"]], "sympy.polys.domains.gaussiandomains.GaussianElement": [[201, 2, 1, "", "new"], [201, 2, 1, "", "parent"], [201, 2, 1, "", "quadrant"]], "sympy.polys.domains.gaussiandomains.GaussianIntegerRing": [[201, 5, 1, "", "dtype"], [201, 2, 1, "", "from_GaussianIntegerRing"], [201, 2, 1, "", "from_GaussianRationalField"], [201, 2, 1, "", "gcd"], [201, 2, 1, "", "get_field"], [201, 2, 1, "", "get_ring"], [201, 2, 1, "", "lcm"], [201, 2, 1, "", "normalize"]], "sympy.polys.domains.gaussiandomains.GaussianRationalField": [[201, 2, 1, "", "as_AlgebraicField"], [201, 2, 1, "", "denom"], [201, 5, 1, "", "dtype"], [201, 2, 1, "", "from_GaussianIntegerRing"], [201, 2, 1, "", "from_GaussianRationalField"], [201, 2, 1, "", "get_field"], [201, 2, 1, "", "get_ring"], [201, 2, 1, "", "numer"]], "sympy.polys.domains.mpelements": [[201, 1, 1, "", "ComplexElement"], [201, 1, 1, "", "RealElement"]], "sympy.polys.domains.quotientring": [[201, 1, 1, "", "QuotientRing"]], "sympy.polys.domains.ring": [[201, 1, 1, "", "Ring"]], "sympy.polys.domains.ring.Ring": [[201, 2, 1, "", "denom"], [201, 2, 1, "", "div"], [201, 2, 1, "", "exquo"], [201, 2, 1, "", "free_module"], [201, 2, 1, "", "get_ring"], [201, 2, 1, "", "ideal"], [201, 2, 1, "", "invert"], [201, 2, 1, "", "numer"], [201, 2, 1, "", "quo"], [201, 2, 1, "", "quotient_ring"], [201, 2, 1, "", "rem"], [201, 2, 1, "", "revert"]], "sympy.polys.domains.simpledomain": [[201, 1, 1, "", "SimpleDomain"]], "sympy.polys.domains.simpledomain.SimpleDomain": [[201, 2, 1, "", "inject"]], "sympy.polys.euclidtools": [[203, 3, 1, "", "dmp_cancel"], [203, 3, 1, "", "dmp_content"], [203, 3, 1, "", "dmp_discriminant"], [203, 3, 1, "", "dmp_euclidean_prs"], [203, 3, 1, "", "dmp_ff_prs_gcd"], [203, 3, 1, "", "dmp_gcd"], [203, 3, 1, "", "dmp_gcdex"], [203, 3, 1, "", "dmp_half_gcdex"], [203, 3, 1, "", "dmp_inner_gcd"], [203, 3, 1, "", "dmp_inner_subresultants"], [203, 3, 1, "", "dmp_invert"], [203, 3, 1, "", "dmp_lcm"], [203, 3, 1, "", "dmp_primitive"], [203, 3, 1, "", "dmp_primitive_prs"], [203, 3, 1, "", "dmp_prs_resultant"], [203, 3, 1, "", "dmp_qq_collins_resultant"], [203, 3, 1, "", "dmp_qq_heu_gcd"], [203, 3, 1, "", "dmp_resultant"], [203, 3, 1, "", "dmp_rr_prs_gcd"], [203, 3, 1, "", "dmp_subresultants"], [203, 3, 1, "", "dmp_zz_collins_resultant"], [203, 3, 1, "", "dmp_zz_heu_gcd"], [203, 3, 1, "", "dmp_zz_modular_resultant"]], "sympy.polys.factortools": [[203, 3, 1, "", "dmp_ext_factor"], [203, 3, 1, "", "dmp_factor_list"], [203, 3, 1, "", "dmp_factor_list_include"], [203, 3, 1, "", "dmp_irreducible_p"], [203, 3, 1, "", "dmp_trial_division"], [203, 3, 1, "", "dmp_zz_diophantine"], [203, 3, 1, "", "dmp_zz_factor"], [203, 3, 1, "", "dmp_zz_mignotte_bound"], [203, 3, 1, "", "dmp_zz_wang"], [203, 3, 1, "", "dmp_zz_wang_hensel_lifting"], [203, 3, 1, "", "dmp_zz_wang_lead_coeffs"], [203, 3, 1, "", "dmp_zz_wang_non_divisors"], [203, 3, 1, "", "dmp_zz_wang_test_points"], [203, 3, 1, "", "dup_cyclotomic_p"], [203, 3, 1, "", "dup_gf_factor"], [203, 3, 1, "", "dup_zz_cyclotomic_factor"], [203, 3, 1, "", "dup_zz_cyclotomic_poly"], [203, 3, 1, "", "dup_zz_factor"], [203, 3, 1, "", "dup_zz_factor_sqf"], [203, 3, 1, "", "dup_zz_hensel_lift"], [203, 3, 1, "", "dup_zz_hensel_step"], [203, 3, 1, "", "dup_zz_irreducible_p"], [203, 3, 1, "", "dup_zz_zassenhaus"]], "sympy.polys.fglmtools": [[203, 3, 1, "", "matrix_fglm"]], "sympy.polys.fields": [[201, 1, 1, "", "FracElement"], [201, 1, 1, "", "FracField"], [201, 3, 1, "", "field"], [201, 3, 1, "", "sfield"], [201, 3, 1, "", "vfield"], [201, 3, 1, "", "xfield"]], "sympy.polys.fields.FracElement": [[201, 2, 1, "", "diff"]], "sympy.polys.galoistools": [[203, 3, 1, "", "gf_LC"], [203, 3, 1, "", "gf_Qbasis"], [203, 3, 1, "", "gf_Qmatrix"], [203, 3, 1, "", "gf_TC"], [203, 3, 1, "", "gf_add"], [203, 3, 1, "", "gf_add_ground"], [203, 3, 1, "", "gf_add_mul"], [203, 3, 1, "", "gf_berlekamp"], [203, 3, 1, "", "gf_cofactors"], [203, 3, 1, "", "gf_compose"], [203, 3, 1, "", "gf_compose_mod"], [203, 3, 1, "", "gf_crt"], [203, 3, 1, "", "gf_crt1"], [203, 3, 1, "", "gf_crt2"], [203, 3, 1, "", "gf_csolve"], [203, 3, 1, "", "gf_degree"], [203, 3, 1, "", "gf_diff"], [203, 3, 1, "", "gf_div"], [203, 3, 1, "", "gf_eval"], [203, 3, 1, "", "gf_expand"], [203, 3, 1, "", "gf_exquo"], [203, 3, 1, "", "gf_factor"], [203, 3, 1, "", "gf_factor_sqf"], [203, 3, 1, "", "gf_from_dict"], [203, 3, 1, "", "gf_from_int_poly"], [203, 3, 1, "", "gf_gcd"], [203, 3, 1, "", "gf_gcdex"], [203, 3, 1, "", "gf_int"], [203, 3, 1, "", "gf_irreducible"], [203, 3, 1, "", "gf_irreducible_p"], [203, 3, 1, "", "gf_lcm"], [203, 3, 1, "", "gf_lshift"], [203, 3, 1, "", "gf_monic"], [203, 3, 1, "", "gf_mul"], [203, 3, 1, "", "gf_mul_ground"], [203, 3, 1, "", "gf_multi_eval"], [203, 3, 1, "", "gf_neg"], [203, 3, 1, "", "gf_normal"], [203, 3, 1, "", "gf_pow"], [203, 3, 1, "", "gf_pow_mod"], [203, 3, 1, "", "gf_quo"], [203, 3, 1, "", "gf_quo_ground"], [203, 3, 1, "", "gf_random"], [203, 3, 1, "", "gf_rem"], [203, 3, 1, "", "gf_rshift"], [203, 3, 1, "", "gf_shoup"], [203, 3, 1, "", "gf_sqf_list"], [203, 3, 1, "", "gf_sqf_p"], [203, 3, 1, "", "gf_sqf_part"], [203, 3, 1, "", "gf_sqr"], [203, 3, 1, "", "gf_strip"], [203, 3, 1, "", "gf_sub"], [203, 3, 1, "", "gf_sub_ground"], [203, 3, 1, "", "gf_sub_mul"], [203, 3, 1, "", "gf_to_dict"], [203, 3, 1, "", "gf_to_int_poly"], [203, 3, 1, "", "gf_trace_map"], [203, 3, 1, "", "gf_trunc"], [203, 3, 1, "", "gf_value"], [203, 3, 1, "", "gf_zassenhaus"]], "sympy.polys.groebnertools": [[203, 3, 1, "", "groebner"], [203, 3, 1, "", "is_groebner"], [203, 3, 1, "", "is_minimal"], [203, 3, 1, "", "is_reduced"], [203, 3, 1, "", "red_groebner"], [203, 3, 1, "", "spoly"]], "sympy.polys.matrices.ddm": [[199, 1, 1, "", "DDM"]], "sympy.polys.matrices.ddm.DDM": [[199, 2, 1, "", "add"], [199, 2, 1, "", "charpoly"], [199, 2, 1, "", "det"], [199, 2, 1, "", "hstack"], [199, 2, 1, "", "inv"], [199, 2, 1, "", "is_lower"], [199, 2, 1, "", "is_upper"], [199, 2, 1, "", "is_zero_matrix"], [199, 2, 1, "", "lu"], [199, 2, 1, "", "lu_solve"], [199, 2, 1, "", "matmul"], [199, 2, 1, "", "neg"], [199, 2, 1, "", "rref"], [199, 2, 1, "", "scc"], [199, 2, 1, "", "sub"], [199, 2, 1, "", "vstack"]], "sympy.polys.matrices.domainmatrix": [[199, 1, 1, "", "DomainMatrix"]], "sympy.polys.matrices.domainmatrix.DomainMatrix": [[199, 2, 1, "", "add"], [199, 2, 1, "", "charpoly"], [199, 2, 1, "", "columnspace"], [199, 2, 1, "", "convert_to"], [199, 2, 1, "", "det"], [199, 2, 1, "", "diag"], [199, 2, 1, "", "eye"], [199, 2, 1, "", "from_Matrix"], [199, 2, 1, "", "from_dict_sympy"], [199, 2, 1, "", "from_list"], [199, 2, 1, "", "from_list_sympy"], [199, 2, 1, "", "from_rep"], [199, 2, 1, "", "hstack"], [199, 2, 1, "", "inv"], [199, 4, 1, "", "is_lower"], [199, 4, 1, "", "is_upper"], [199, 2, 1, "", "lu"], [199, 2, 1, "", "lu_solve"], [199, 2, 1, "", "matmul"], [199, 2, 1, "", "mul"], [199, 2, 1, "", "neg"], [199, 2, 1, "", "nullspace"], [199, 2, 1, "", "ones"], [199, 2, 1, "", "pow"], [199, 2, 1, "", "rowspace"], [199, 2, 1, "", "rref"], [199, 2, 1, "", "scc"], [199, 2, 1, "", "sub"], [199, 2, 1, "", "to_Matrix"], [199, 2, 1, "", "to_dense"], [199, 2, 1, "", "to_field"], [199, 2, 1, "", "to_sparse"], [199, 2, 1, "", "transpose"], [199, 2, 1, "", "unify"], [199, 2, 1, "", "vstack"], [199, 2, 1, "", "zeros"]], "sympy.polys.matrices.normalforms": [[199, 3, 1, "", "hermite_normal_form"], [199, 3, 1, "", "smith_normal_form"]], "sympy.polys.matrices.sdm": [[199, 1, 1, "", "SDM"]], "sympy.polys.matrices.sdm.SDM": [[199, 2, 1, "", "add"], [199, 2, 1, "", "charpoly"], [199, 2, 1, "", "convert_to"], [199, 2, 1, "", "copy"], [199, 2, 1, "", "det"], [199, 2, 1, "", "eye"], [199, 2, 1, "", "from_ddm"], [199, 2, 1, "", "from_list"], [199, 2, 1, "", "hstack"], [199, 2, 1, "", "inv"], [199, 2, 1, "", "is_lower"], [199, 2, 1, "", "is_upper"], [199, 2, 1, "", "is_zero_matrix"], [199, 2, 1, "", "lu"], [199, 2, 1, "", "lu_solve"], [199, 2, 1, "", "matmul"], [199, 2, 1, "", "mul"], [199, 2, 1, "", "neg"], [199, 2, 1, "", "new"], [199, 2, 1, "", "nullspace"], [199, 2, 1, "", "rref"], [199, 2, 1, "", "scc"], [199, 2, 1, "", "sub"], [199, 2, 1, "", "to_ddm"], [199, 2, 1, "", "to_list"], [199, 2, 1, "", "transpose"], [199, 2, 1, "", "vstack"], [199, 2, 1, "", "zeros"]], "sympy.polys.modulargcd": [[203, 3, 1, "", "_modgcd_multivariate_p"], [203, 3, 1, "", "func_field_modgcd"], [203, 3, 1, "", "modgcd_bivariate"], [203, 3, 1, "", "modgcd_multivariate"], [203, 3, 1, "", "modgcd_univariate"]], "sympy.polys.monomials": [[206, 1, 1, "", "Monomial"], [206, 3, 1, "", "itermonomials"], [206, 3, 1, "", "monomial_count"]], "sympy.polys.monomials.Monomial": [[206, 2, 1, "", "as_expr"], [206, 2, 1, "", "gcd"], [206, 2, 1, "", "lcm"]], "sympy.polys.numberfields.basis": [[205, 3, 1, "", "round_two"]], "sympy.polys.numberfields.minpoly": [[205, 3, 1, "", "minimal_polynomial"], [205, 3, 1, "", "minpoly"]], "sympy.polys.numberfields": [[205, 0, 0, "-", "modules"], [205, 0, 0, "-", "subfield"]], "sympy.polys.numberfields.modules": [[205, 1, 1, "", "EndomorphismRing"], [205, 1, 1, "", "InnerEndomorphism"], [205, 1, 1, "", "Module"], [205, 1, 1, "", "ModuleElement"], [205, 1, 1, "", "ModuleEndomorphism"], [205, 1, 1, "", "ModuleHomomorphism"], [205, 1, 1, "", "PowerBasis"], [205, 1, 1, "", "PowerBasisElement"], [205, 1, 1, "", "Submodule"], [205, 3, 1, "", "find_min_poly"], [205, 3, 1, "", "make_mod_elt"]], "sympy.polys.numberfields.modules.EndomorphismRing": [[205, 2, 1, "", "__init__"], [205, 2, 1, "", "inner_endomorphism"], [205, 2, 1, "", "represent"]], "sympy.polys.numberfields.modules.InnerEndomorphism": [[205, 2, 1, "", "__init__"]], "sympy.polys.numberfields.modules.Module": [[205, 2, 1, "", "__call__"], [205, 2, 1, "", "ancestors"], [205, 2, 1, "", "basis_elements"], [205, 2, 1, "", "element_from_rational"], [205, 2, 1, "", "endomorphism_ring"], [205, 2, 1, "", "is_compat_col"], [205, 2, 1, "", "mult_tab"], [205, 4, 1, "", "n"], [205, 2, 1, "", "nearest_common_ancestor"], [205, 4, 1, "", "number_field"], [205, 2, 1, "", "one"], [205, 4, 1, "", "parent"], [205, 2, 1, "", "power_basis_ancestor"], [205, 2, 1, "", "represent"], [205, 2, 1, "", "starts_with_unity"], [205, 2, 1, "", "submodule_from_gens"], [205, 2, 1, "", "submodule_from_matrix"], [205, 2, 1, "", "whole_submodule"], [205, 2, 1, "", "zero"]], "sympy.polys.numberfields.modules.ModuleElement": [[205, 4, 1, "", "QQ_col"], [205, 2, 1, "", "__add__"], [205, 2, 1, "", "__init__"], [205, 2, 1, "", "__mod__"], [205, 2, 1, "", "__mul__"], [205, 2, 1, "", "column"], [205, 2, 1, "", "equiv"], [205, 2, 1, "", "from_int_list"], [205, 2, 1, "", "is_compat"], [205, 4, 1, "", "n"], [205, 2, 1, "", "over_power_basis"], [205, 2, 1, "", "reduced"], [205, 2, 1, "", "reduced_mod_p"], [205, 2, 1, "", "to_ancestor"], [205, 2, 1, "", "to_parent"], [205, 2, 1, "", "unify"]], "sympy.polys.numberfields.modules.ModuleEndomorphism": [[205, 2, 1, "", "__init__"]], "sympy.polys.numberfields.modules.ModuleHomomorphism": [[205, 2, 1, "", "__init__"], [205, 2, 1, "", "kernel"], [205, 2, 1, "", "matrix"]], "sympy.polys.numberfields.modules.PowerBasis": [[205, 2, 1, "", "__init__"], [205, 2, 1, "", "element_from_ANP"], [205, 2, 1, "", "element_from_alg_num"], [205, 2, 1, "", "element_from_poly"], [205, 2, 1, "", "represent"]], "sympy.polys.numberfields.modules.PowerBasisElement": [[205, 4, 1, "", "T"], [205, 2, 1, "", "as_expr"], [205, 4, 1, "", "generator"], [205, 4, 1, "", "is_rational"], [205, 2, 1, "", "norm"], [205, 2, 1, "", "numerator"], [205, 2, 1, "", "poly"], [205, 2, 1, "", "to_ANP"], [205, 2, 1, "", "to_alg_num"]], "sympy.polys.numberfields.modules.Submodule": [[205, 4, 1, "", "QQ_matrix"], [205, 2, 1, "", "__init__"], [205, 2, 1, "", "add"], [205, 2, 1, "", "basis_element_pullbacks"], [205, 2, 1, "", "discard_before"], [205, 2, 1, "", "mul"], [205, 2, 1, "", "reduce_element"], [205, 2, 1, "", "reduced"], [205, 2, 1, "", "represent"]], "sympy.polys.numberfields.primes": [[205, 1, 1, "", "PrimeIdeal"], [205, 3, 1, "", "prime_decomp"], [205, 3, 1, "", "prime_valuation"]], "sympy.polys.numberfields.primes.PrimeIdeal": [[205, 2, 1, "", "__add__"], [205, 2, 1, "", "__init__"], [205, 2, 1, "", "__mul__"], [205, 2, 1, "", "as_submodule"], [205, 4, 1, "", "is_inert"], [205, 2, 1, "", "reduce_ANP"], [205, 2, 1, "", "reduce_alg_num"], [205, 2, 1, "", "reduce_element"], [205, 2, 1, "", "repr"], [205, 2, 1, "", "test_factor"], [205, 2, 1, "", "valuation"]], "sympy.polys.numberfields.subfield": [[205, 3, 1, "", "field_isomorphism"], [205, 3, 1, "", "primitive_element"], [205, 3, 1, "", "to_number_field"]], "sympy.polys.numberfields.utilities": [[205, 1, 1, "", "AlgIntPowers"], [205, 3, 1, "", "coeff_search"], [205, 3, 1, "", "extract_fundamental_discriminant"], [205, 3, 1, "", "get_num_denom"], [205, 3, 1, "", "is_int"], [205, 3, 1, "", "is_rat"], [205, 3, 1, "", "isolate"], [205, 3, 1, "", "supplement_a_subspace"]], "sympy.polys.numberfields.utilities.AlgIntPowers": [[205, 2, 1, "", "__init__"]], "sympy.polys.orderings": [[206, 1, 1, "", "GradedLexOrder"], [206, 1, 1, "", "LexOrder"], [206, 1, 1, "", "MonomialOrder"], [206, 1, 1, "", "ReversedGradedLexOrder"]], "sympy.polys.orthopolys": [[206, 3, 1, "", "chebyshevt_poly"], [206, 3, 1, "", "chebyshevu_poly"], [206, 3, 1, "", "gegenbauer_poly"], [206, 3, 1, "", "hermite_poly"], [206, 3, 1, "", "hermite_prob_poly"], [206, 3, 1, "", "jacobi_poly"], [206, 3, 1, "", "laguerre_poly"], [206, 3, 1, "", "legendre_poly"], [206, 3, 1, "", "spherical_bessel_fn"]], "sympy.polys.partfrac": [[206, 3, 1, "", "apart"], [206, 3, 1, "", "apart_list"], [206, 3, 1, "", "assemble_partfrac_list"]], "sympy.polys.polyclasses": [[201, 1, 1, "", "ANP"], [201, 1, 1, "", "DMF"], [201, 1, 1, "", "DMP"]], "sympy.polys.polyclasses.ANP": [[201, 2, 1, "", "LC"], [201, 2, 1, "", "TC"], [201, 4, 1, "", "is_ground"], [201, 4, 1, "", "is_one"], [201, 4, 1, "", "is_zero"], [201, 2, 1, "", "pow"], [201, 2, 1, "", "to_dict"], [201, 2, 1, "", "to_list"], [201, 2, 1, "", "to_sympy_dict"], [201, 2, 1, "", "to_sympy_list"], [201, 2, 1, "", "to_tuple"], [201, 2, 1, "", "unify"]], "sympy.polys.polyclasses.DMF": [[201, 2, 1, "", "add"], [201, 2, 1, "", "cancel"], [201, 2, 1, "", "denom"], [201, 2, 1, "", "exquo"], [201, 2, 1, "", "frac_unify"], [201, 2, 1, "", "half_per"], [201, 2, 1, "", "invert"], [201, 4, 1, "", "is_one"], [201, 4, 1, "", "is_zero"], [201, 2, 1, "", "mul"], [201, 2, 1, "", "neg"], [201, 2, 1, "", "numer"], [201, 2, 1, "", "per"], [201, 2, 1, "", "poly_unify"], [201, 2, 1, "", "pow"], [201, 2, 1, "", "quo"], [201, 2, 1, "", "sub"]], "sympy.polys.polyclasses.DMP": [[201, 2, 1, "", "LC"], [201, 2, 1, "", "TC"], [201, 2, 1, "", "abs"], [201, 2, 1, "", "add"], [201, 2, 1, "", "add_ground"], [201, 2, 1, "", "all_coeffs"], [201, 2, 1, "", "all_monoms"], [201, 2, 1, "", "all_terms"], [201, 2, 1, "", "cancel"], [201, 2, 1, "", "cauchy_lower_bound"], [201, 2, 1, "", "cauchy_upper_bound"], [201, 2, 1, "", "clear_denoms"], [201, 2, 1, "", "coeffs"], [201, 2, 1, "", "cofactors"], [201, 2, 1, "", "compose"], [201, 2, 1, "", "content"], [201, 2, 1, "", "convert"], [201, 2, 1, "", "count_complex_roots"], [201, 2, 1, "", "count_real_roots"], [201, 2, 1, "", "decompose"], [201, 2, 1, "", "deflate"], [201, 2, 1, "", "degree"], [201, 2, 1, "", "degree_list"], [201, 2, 1, "", "diff"], [201, 2, 1, "", "discriminant"], [201, 2, 1, "", "div"], [201, 2, 1, "", "eject"], [201, 2, 1, "", "eval"], [201, 2, 1, "", "exclude"], [201, 2, 1, "", "exquo"], [201, 2, 1, "", "exquo_ground"], [201, 2, 1, "", "factor_list"], [201, 2, 1, "", "factor_list_include"], [201, 2, 1, "", "from_dict"], [201, 2, 1, "", "from_list"], [201, 2, 1, "", "from_sympy_list"], [201, 2, 1, "", "gcd"], [201, 2, 1, "", "gcdex"], [201, 2, 1, "", "gff_list"], [201, 2, 1, "", "half_gcdex"], [201, 2, 1, "", "homogeneous_order"], [201, 2, 1, "", "homogenize"], [201, 2, 1, "", "inject"], [201, 2, 1, "", "integrate"], [201, 2, 1, "", "intervals"], [201, 2, 1, "", "invert"], [201, 4, 1, "", "is_cyclotomic"], [201, 4, 1, "", "is_ground"], [201, 4, 1, "", "is_homogeneous"], [201, 4, 1, "", "is_irreducible"], [201, 4, 1, "", "is_linear"], [201, 4, 1, "", "is_monic"], [201, 4, 1, "", "is_monomial"], [201, 4, 1, "", "is_one"], [201, 4, 1, "", "is_primitive"], [201, 4, 1, "", "is_quadratic"], [201, 4, 1, "", "is_sqf"], [201, 4, 1, "", "is_zero"], [201, 2, 1, "", "l1_norm"], [201, 2, 1, "", "l2_norm_squared"], [201, 2, 1, "", "lcm"], [201, 2, 1, "", "lift"], [201, 2, 1, "", "max_norm"], [201, 2, 1, "", "mignotte_sep_bound_squared"], [201, 2, 1, "", "monic"], [201, 2, 1, "", "monoms"], [201, 2, 1, "", "mul"], [201, 2, 1, "", "mul_ground"], [201, 2, 1, "", "neg"], [201, 2, 1, "", "norm"], [201, 2, 1, "", "nth"], [201, 2, 1, "", "pdiv"], [201, 2, 1, "", "per"], [201, 2, 1, "", "permute"], [201, 2, 1, "", "pexquo"], [201, 2, 1, "", "pow"], [201, 2, 1, "", "pquo"], [201, 2, 1, "", "prem"], [201, 2, 1, "", "primitive"], [201, 2, 1, "", "quo"], [201, 2, 1, "", "quo_ground"], [201, 2, 1, "", "refine_root"], [201, 2, 1, "", "rem"], [201, 2, 1, "", "resultant"], [201, 2, 1, "", "revert"], [201, 2, 1, "", "shift"], [201, 2, 1, "", "slice"], [201, 2, 1, "", "sqf_list"], [201, 2, 1, "", "sqf_list_include"], [201, 2, 1, "", "sqf_norm"], [201, 2, 1, "", "sqf_part"], [201, 2, 1, "", "sqr"], [201, 2, 1, "", "sturm"], [201, 2, 1, "", "sub"], [201, 2, 1, "", "sub_ground"], [201, 2, 1, "", "subresultants"], [201, 2, 1, "", "terms"], [201, 2, 1, "", "terms_gcd"], [201, 2, 1, "", "to_dict"], [201, 2, 1, "", "to_exact"], [201, 2, 1, "", "to_field"], [201, 2, 1, "", "to_list"], [201, 2, 1, "", "to_ring"], [201, 2, 1, "", "to_sympy_dict"], [201, 2, 1, "", "to_sympy_list"], [201, 2, 1, "", "to_tuple"], [201, 2, 1, "", "total_degree"], [201, 2, 1, "", "transform"], [201, 2, 1, "", "trunc"], [201, 2, 1, "", "unify"]], "sympy.polys": [[203, 0, 0, "-", "polyconfig"], [203, 0, 0, "-", "polyoptions"], [208, 0, 0, "-", "solvers"]], "sympy.polys.polyconfig": [[203, 3, 1, "", "setup"]], "sympy.polys.polyerrors": [[203, 1, 1, "", "BasePolynomialError"], [203, 1, 1, "", "CoercionFailed"], [203, 1, 1, "", "ComputationFailed"], [203, 1, 1, "", "DomainError"], [203, 1, 1, "", "EvaluationFailed"], [203, 1, 1, "", "ExactQuotientFailed"], [203, 1, 1, "", "ExtraneousFactors"], [203, 1, 1, "", "FlagError"], [203, 1, 1, "", "GeneratorsError"], [203, 1, 1, "", "GeneratorsNeeded"], [203, 1, 1, "", "HeuristicGCDFailed"], [203, 1, 1, "", "HomomorphismFailed"], [203, 1, 1, "", "IsomorphismFailed"], [203, 1, 1, "", "MultivariatePolynomialError"], [203, 1, 1, "", "NotAlgebraic"], [203, 1, 1, "", "NotInvertible"], [203, 1, 1, "", "NotReversible"], [203, 1, 1, "", "OperationNotSupported"], [203, 1, 1, "", "OptionError"], [203, 1, 1, "", "PolificationFailed"], [203, 1, 1, "", "PolynomialError"], [203, 1, 1, "", "RefinementFailed"], [203, 1, 1, "", "UnificationFailed"], [203, 1, 1, "", "UnivariatePolynomialError"]], "sympy.polys.polyfuncs": [[206, 3, 1, "", "horner"], [206, 3, 1, "", "interpolate"], [206, 3, 1, "", "symmetrize"], [206, 3, 1, "", "viete"]], "sympy.polys.polyoptions": [[203, 1, 1, "", "Options"], [203, 3, 1, "", "build_options"]], "sympy.polys.polyoptions.Options": [[203, 2, 1, "", "clone"]], "sympy.polys.polyroots": [[206, 3, 1, "", "roots"]], "sympy.polys.polytools": [[206, 1, 1, "", "GroebnerBasis"], [206, 3, 1, "", "LC"], [206, 3, 1, "", "LM"], [206, 3, 1, "", "LT"], [206, 1, 1, "", "Poly"], [206, 1, 1, "", "PurePoly"], [206, 3, 1, "", "cancel"], [206, 3, 1, "", "cofactors"], [206, 3, 1, "", "compose"], [206, 3, 1, "", "content"], [206, 3, 1, "", "count_roots"], [206, 3, 1, "", "decompose"], [206, 3, 1, "", "degree"], [206, 3, 1, "", "degree_list"], [206, 3, 1, "", "discriminant"], [206, 3, 1, "", "div"], [206, 3, 1, "", "exquo"], [206, 3, 1, "", "factor"], [206, 3, 1, "", "factor_list"], [206, 3, 1, "", "gcd"], [206, 3, 1, "", "gcd_list"], [206, 3, 1, "", "gcdex"], [206, 3, 1, "", "gff"], [206, 3, 1, "", "gff_list"], [206, 3, 1, "", "groebner"], [206, 3, 1, "", "ground_roots"], [206, 3, 1, "", "half_gcdex"], [206, 3, 1, "", "intervals"], [206, 3, 1, "", "invert"], [206, 3, 1, "", "is_zero_dimensional"], [206, 3, 1, "", "lcm"], [206, 3, 1, "", "lcm_list"], [206, 3, 1, "", "monic"], [206, 3, 1, "", "nroots"], [206, 3, 1, "", "nth_power_roots_poly"], [206, 3, 1, "", "parallel_poly_from_expr"], [206, 3, 1, "", "pdiv"], [206, 3, 1, "", "pexquo"], [206, 3, 1, "", "poly"], [206, 3, 1, "", "poly_from_expr"], [206, 3, 1, "", "pquo"], [206, 3, 1, "", "prem"], [206, 3, 1, "", "primitive"], [206, 3, 1, "", "quo"], [206, 3, 1, "", "real_roots"], [206, 3, 1, "", "reduced"], [206, 3, 1, "", "refine_root"], [206, 3, 1, "", "rem"], [206, 3, 1, "", "resultant"], [206, 3, 1, "", "sqf"], [206, 3, 1, "", "sqf_list"], [206, 3, 1, "", "sqf_norm"], [206, 3, 1, "", "sqf_part"], [206, 3, 1, "", "sturm"], [206, 3, 1, "", "subresultants"], [206, 3, 1, "", "terms_gcd"], [206, 3, 1, "", "trunc"]], "sympy.polys.polytools.GroebnerBasis": [[206, 2, 1, "", "contains"], [206, 2, 1, "", "fglm"], [206, 4, 1, "", "is_zero_dimensional"], [206, 2, 1, "", "reduce"]], "sympy.polys.polytools.Poly": [[206, 2, 1, "", "EC"], [206, 2, 1, "", "EM"], [206, 2, 1, "", "ET"], [206, 2, 1, "", "LC"], [206, 2, 1, "", "LM"], [206, 2, 1, "", "LT"], [206, 2, 1, "", "TC"], [206, 2, 1, "", "abs"], [206, 2, 1, "", "add"], [206, 2, 1, "", "add_ground"], [206, 2, 1, "", "all_coeffs"], [206, 2, 1, "", "all_monoms"], [206, 2, 1, "", "all_roots"], [206, 2, 1, "", "all_terms"], [206, 2, 1, "", "as_dict"], [206, 2, 1, "", "as_expr"], [206, 2, 1, "", "as_list"], [206, 2, 1, "", "as_poly"], [206, 2, 1, "", "cancel"], [206, 2, 1, "", "clear_denoms"], [206, 2, 1, "", "coeff_monomial"], [206, 2, 1, "", "coeffs"], [206, 2, 1, "", "cofactors"], [206, 2, 1, "", "compose"], [206, 2, 1, "", "content"], [206, 2, 1, "", "count_roots"], [206, 2, 1, "", "decompose"], [206, 2, 1, "", "deflate"], [206, 2, 1, "", "degree"], [206, 2, 1, "", "degree_list"], [206, 2, 1, "", "diff"], [206, 2, 1, "", "discriminant"], [206, 2, 1, "", "dispersion"], [206, 2, 1, "", "dispersionset"], [206, 2, 1, "", "div"], [206, 4, 1, "", "domain"], [206, 2, 1, "", "eject"], [206, 2, 1, "", "eval"], [206, 2, 1, "", "exclude"], [206, 2, 1, "", "exquo"], [206, 2, 1, "", "exquo_ground"], [206, 2, 1, "", "factor_list"], [206, 2, 1, "", "factor_list_include"], [206, 4, 1, "", "free_symbols"], [206, 4, 1, "", "free_symbols_in_domain"], [206, 2, 1, "", "from_dict"], [206, 2, 1, "", "from_expr"], [206, 2, 1, "", "from_list"], [206, 2, 1, "", "from_poly"], [206, 2, 1, "", "gcd"], [206, 2, 1, "", "gcdex"], [206, 4, 1, "", "gen"], [206, 2, 1, "", "get_domain"], [206, 2, 1, "", "get_modulus"], [206, 2, 1, "", "gff_list"], [206, 2, 1, "", "ground_roots"], [206, 2, 1, "", "half_gcdex"], [206, 2, 1, "", "has_only_gens"], [206, 2, 1, "", "homogeneous_order"], [206, 2, 1, "", "homogenize"], [206, 2, 1, "", "inject"], [206, 2, 1, "", "integrate"], [206, 2, 1, "", "intervals"], [206, 2, 1, "", "invert"], [206, 4, 1, "", "is_cyclotomic"], [206, 4, 1, "", "is_ground"], [206, 4, 1, "", "is_homogeneous"], [206, 4, 1, "", "is_irreducible"], [206, 4, 1, "", "is_linear"], [206, 4, 1, "", "is_monic"], [206, 4, 1, "", "is_monomial"], [206, 4, 1, "", "is_multivariate"], [206, 4, 1, "", "is_one"], [206, 4, 1, "", "is_primitive"], [206, 4, 1, "", "is_quadratic"], [206, 4, 1, "", "is_sqf"], [206, 4, 1, "", "is_univariate"], [206, 4, 1, "", "is_zero"], [206, 2, 1, "", "l1_norm"], [206, 2, 1, "", "lcm"], [206, 2, 1, "", "length"], [206, 2, 1, "", "lift"], [206, 2, 1, "", "ltrim"], [206, 2, 1, "", "match"], [206, 2, 1, "", "max_norm"], [206, 2, 1, "", "monic"], [206, 2, 1, "", "monoms"], [206, 2, 1, "", "mul"], [206, 2, 1, "", "mul_ground"], [206, 2, 1, "", "neg"], [206, 2, 1, "", "new"], [206, 2, 1, "", "norm"], [206, 2, 1, "", "nroots"], [206, 2, 1, "", "nth"], [206, 2, 1, "", "nth_power_roots_poly"], [206, 4, 1, "", "one"], [206, 2, 1, "", "pdiv"], [206, 2, 1, "", "per"], [206, 2, 1, "", "pexquo"], [206, 2, 1, "", "pow"], [206, 2, 1, "", "pquo"], [206, 2, 1, "", "prem"], [206, 2, 1, "", "primitive"], [206, 2, 1, "", "quo"], [206, 2, 1, "", "quo_ground"], [206, 2, 1, "", "rat_clear_denoms"], [206, 2, 1, "", "real_roots"], [206, 2, 1, "", "refine_root"], [206, 2, 1, "", "rem"], [206, 2, 1, "", "reorder"], [206, 2, 1, "", "replace"], [206, 2, 1, "", "resultant"], [206, 2, 1, "", "retract"], [206, 2, 1, "", "revert"], [206, 2, 1, "", "root"], [206, 2, 1, "", "same_root"], [206, 2, 1, "", "set_domain"], [206, 2, 1, "", "set_modulus"], [206, 2, 1, "", "shift"], [206, 2, 1, "", "slice"], [206, 2, 1, "", "sqf_list"], [206, 2, 1, "", "sqf_list_include"], [206, 2, 1, "", "sqf_norm"], [206, 2, 1, "", "sqf_part"], [206, 2, 1, "", "sqr"], [206, 2, 1, "", "sturm"], [206, 2, 1, "", "sub"], [206, 2, 1, "", "sub_ground"], [206, 2, 1, "", "subresultants"], [206, 2, 1, "", "terms"], [206, 2, 1, "", "terms_gcd"], [206, 2, 1, "", "termwise"], [206, 2, 1, "", "to_exact"], [206, 2, 1, "", "to_field"], [206, 2, 1, "", "to_ring"], [206, 2, 1, "", "total_degree"], [206, 2, 1, "", "transform"], [206, 2, 1, "", "trunc"], [206, 2, 1, "", "unify"], [206, 4, 1, "", "unit"], [206, 4, 1, "", "zero"]], "sympy.polys.polytools.PurePoly": [[206, 4, 1, "", "free_symbols"]], "sympy.polys.rationaltools": [[206, 3, 1, "", "together"]], "sympy.polys.ring_series": [[207, 3, 1, "", "_tan1"], [207, 3, 1, "", "mul_xin"], [207, 3, 1, "", "pow_xin"], [207, 3, 1, "", "rs_LambertW"], [207, 3, 1, "", "rs_asin"], [207, 3, 1, "", "rs_atan"], [207, 3, 1, "", "rs_atanh"], [207, 3, 1, "", "rs_compose_add"], [207, 3, 1, "", "rs_cos"], [207, 3, 1, "", "rs_cos_sin"], [207, 3, 1, "", "rs_cosh"], [207, 3, 1, "", "rs_cot"], [207, 3, 1, "", "rs_diff"], [207, 3, 1, "", "rs_exp"], [207, 3, 1, "", "rs_fun"], [207, 3, 1, "", "rs_hadamard_exp"], [207, 3, 1, "", "rs_integrate"], [207, 3, 1, "", "rs_is_puiseux"], [207, 3, 1, "", "rs_log"], [207, 3, 1, "", "rs_mul"], [207, 3, 1, "", "rs_newton"], [207, 3, 1, "", "rs_nth_root"], [207, 3, 1, "", "rs_pow"], [207, 3, 1, "", "rs_puiseux"], [207, 3, 1, "", "rs_puiseux2"], [207, 3, 1, "", "rs_series_from_list"], [207, 3, 1, "", "rs_series_inversion"], [207, 3, 1, "", "rs_series_reversion"], [207, 3, 1, "", "rs_sin"], [207, 3, 1, "", "rs_sinh"], [207, 3, 1, "", "rs_square"], [207, 3, 1, "", "rs_subs"], [207, 3, 1, "", "rs_tan"], [207, 3, 1, "", "rs_tanh"], [207, 3, 1, "", "rs_trunc"]], "sympy.polys.rings": [[201, 1, 1, "", "PolyElement"], [201, 1, 1, "", "PolyRing"], [201, 3, 1, "", "ring"], [201, 3, 1, "", "sring"], [201, 3, 1, "", "vring"], [201, 3, 1, "", "xring"]], "sympy.polys.rings.PolyElement": [[201, 2, 1, "", "almosteq"], [201, 2, 1, "", "cancel"], [201, 2, 1, "", "coeff"], [201, 2, 1, "", "coeffs"], [201, 2, 1, "", "const"], [201, 2, 1, "", "content"], [201, 2, 1, "", "copy"], [201, 2, 1, "", "degree"], [201, 2, 1, "", "degrees"], [201, 2, 1, "", "diff"], [201, 2, 1, "", "div"], [201, 2, 1, "", "imul_num"], [201, 2, 1, "", "itercoeffs"], [201, 2, 1, "", "itermonoms"], [201, 2, 1, "", "iterterms"], [201, 2, 1, "", "leading_expv"], [201, 2, 1, "", "leading_monom"], [201, 2, 1, "", "leading_term"], [201, 2, 1, "", "listcoeffs"], [201, 2, 1, "", "listmonoms"], [201, 2, 1, "", "listterms"], [201, 2, 1, "", "monic"], [201, 2, 1, "", "monoms"], [201, 2, 1, "", "primitive"], [201, 2, 1, "", "square"], [201, 2, 1, "", "strip_zero"], [201, 2, 1, "", "tail_degree"], [201, 2, 1, "", "tail_degrees"], [201, 2, 1, "", "terms"]], "sympy.polys.rings.PolyRing": [[201, 2, 1, "", "add"], [201, 2, 1, "", "add_gens"], [201, 2, 1, "", "compose"], [201, 2, 1, "", "drop"], [201, 2, 1, "", "drop_to_ground"], [201, 2, 1, "", "index"], [201, 2, 1, "", "monomial_basis"], [201, 2, 1, "", "mul"]], "sympy.polys.rootoftools": [[206, 1, 1, "", "ComplexRootOf"], [206, 1, 1, "", "RootOf"], [206, 1, 1, "", "RootSum"], [206, 3, 1, "", "rootof"]], "sympy.polys.rootoftools.ComplexRootOf": [[206, 2, 1, "", "_all_roots"], [206, 2, 1, "", "_complexes_index"], [206, 2, 1, "", "_complexes_sorted"], [206, 2, 1, "", "_count_roots"], [206, 2, 1, "", "_ensure_complexes_init"], [206, 2, 1, "", "_ensure_reals_init"], [206, 2, 1, "", "_eval_evalf"], [206, 2, 1, "", "_eval_is_imaginary"], [206, 2, 1, "", "_eval_is_real"], [206, 2, 1, "", "_get_complexes"], [206, 2, 1, "", "_get_complexes_sqf"], [206, 2, 1, "", "_get_interval"], [206, 2, 1, "", "_get_reals"], [206, 2, 1, "", "_get_reals_sqf"], [206, 2, 1, "", "_get_roots"], [206, 2, 1, "", "_indexed_root"], [206, 2, 1, "", "_new"], [206, 2, 1, "", "_postprocess_root"], [206, 2, 1, "", "_preprocess_roots"], [206, 2, 1, "", "_real_roots"], [206, 2, 1, "", "_reals_index"], [206, 2, 1, "", "_reals_sorted"], [206, 2, 1, "", "_refine_complexes"], [206, 2, 1, "", "_reset"], [206, 2, 1, "", "_roots_trivial"], [206, 2, 1, "", "_set_interval"], [206, 2, 1, "", "all_roots"], [206, 2, 1, "", "clear_cache"], [206, 2, 1, "", "eval_approx"], [206, 2, 1, "", "eval_rational"], [206, 2, 1, "", "real_roots"]], "sympy.polys.rootoftools.RootSum": [[206, 2, 1, "", "new"]], "sympy.polys.solvers": [[208, 3, 1, "", "_solve_lin_sys"], [208, 3, 1, "", "_solve_lin_sys_component"], [208, 3, 1, "", "eqs_to_matrix"], [208, 3, 1, "", "solve_lin_sys"], [208, 3, 1, "", "sympy_eqs_to_ring"]], "sympy.polys.specialpolys": [[206, 3, 1, "", "cyclotomic_poly"], [206, 3, 1, "", "interpolating_poly"], [206, 3, 1, "", "random_poly"], [206, 3, 1, "", "swinnerton_dyer_poly"], [206, 3, 1, "", "symmetric_poly"]], "sympy.printing": [[210, 0, 0, "-", "aesaracode"], [210, 0, 0, "-", "c"], [210, 0, 0, "-", "codeprinter"], [210, 0, 0, "-", "conventions"], [210, 0, 0, "-", "cxx"], [210, 0, 0, "-", "fortran"], [210, 0, 0, "-", "gtk"], [210, 0, 0, "-", "jscode"], [210, 0, 0, "-", "julia"], [210, 0, 0, "-", "lambdarepr"], [210, 0, 0, "-", "latex"], [210, 0, 0, "-", "maple"], [210, 0, 0, "-", "mathematica"], [210, 0, 0, "-", "mathml"], [210, 0, 0, "-", "octave"], [210, 0, 0, "-", "precedence"], [210, 0, 0, "-", "pretty"], [210, 0, 0, "-", "preview"], [210, 0, 0, "-", "printer"], [210, 0, 0, "-", "pycode"], [210, 0, 0, "-", "python"], [210, 0, 0, "-", "rcode"], [210, 0, 0, "-", "repr"], [210, 0, 0, "-", "rust"], [210, 0, 0, "-", "smtlib"], [210, 0, 0, "-", "str"], [210, 0, 0, "-", "tree"]], "sympy.printing.aesaracode": [[210, 1, 1, "", "AesaraPrinter"], [210, 3, 1, "", "aesara_code"], [210, 3, 1, "", "aesara_function"], [210, 3, 1, "", "dim_handling"]], "sympy.printing.aesaracode.AesaraPrinter": [[210, 2, 1, "", "doprint"], [210, 5, 1, "", "printmethod"]], "sympy.printing.c": [[210, 1, 1, "", "C89CodePrinter"], [210, 1, 1, "", "C99CodePrinter"], [210, 3, 1, "", "ccode"], [210, 6, 1, "", "known_functions_C89"], [210, 6, 1, "", "known_functions_C99"], [210, 3, 1, "", "print_ccode"]], "sympy.printing.c.C89CodePrinter": [[210, 2, 1, "", "indent_code"], [210, 5, 1, "", "printmethod"]], "sympy.printing.c.C99CodePrinter": [[210, 5, 1, "", "printmethod"]], "sympy.printing.codeprinter": [[210, 7, 1, "", "AssignmentError"], [210, 1, 1, "", "CodePrinter"], [210, 3, 1, "", "cxxcode"]], "sympy.printing.codeprinter.CodePrinter": [[210, 2, 1, "", "doprint"], [210, 5, 1, "", "printmethod"]], "sympy.printing.conventions": [[210, 3, 1, "", "split_super_sub"]], "sympy.printing.cxx": [[210, 1, 1, "", "CXX11CodePrinter"], [210, 1, 1, "", "CXX98CodePrinter"]], "sympy.printing.cxx.CXX11CodePrinter": [[210, 5, 1, "", "printmethod"]], "sympy.printing.cxx.CXX98CodePrinter": [[210, 5, 1, "", "printmethod"]], "sympy.printing.dot": [[210, 3, 1, "", "dotprint"]], "sympy.printing.fortran": [[210, 1, 1, "", "FCodePrinter"], [210, 3, 1, "", "fcode"], [210, 3, 1, "", "print_fcode"]], "sympy.printing.fortran.FCodePrinter": [[210, 2, 1, "", "indent_code"], [210, 5, 1, "", "printmethod"]], "sympy.printing.gtk": [[210, 3, 1, "", "print_gtk"]], "sympy.printing.jscode": [[210, 1, 1, "", "JavascriptCodePrinter"], [210, 3, 1, "", "jscode"], [210, 6, 1, "", "known_functions"]], "sympy.printing.jscode.JavascriptCodePrinter": [[210, 2, 1, "", "indent_code"], [210, 5, 1, "", "printmethod"]], "sympy.printing.julia": [[210, 1, 1, "", "JuliaCodePrinter"], [210, 3, 1, "", "julia_code"], [210, 6, 1, "", "known_fcns_src1"], [210, 6, 1, "", "known_fcns_src2"]], "sympy.printing.julia.JuliaCodePrinter": [[210, 2, 1, "", "indent_code"], [210, 5, 1, "", "printmethod"]], "sympy.printing.lambdarepr": [[210, 1, 1, "", "LambdaPrinter"], [210, 3, 1, "", "lambdarepr"]], "sympy.printing.lambdarepr.LambdaPrinter": [[210, 5, 1, "", "printmethod"]], "sympy.printing.latex": [[210, 1, 1, "", "LatexPrinter"], [210, 6, 1, "", "accepted_latex_functions"], [210, 3, 1, "", "latex"], [210, 3, 1, "", "print_latex"]], "sympy.printing.latex.LatexPrinter": [[210, 2, 1, "", "parenthesize_super"], [210, 5, 1, "", "printmethod"]], "sympy.printing.maple": [[210, 1, 1, "", "MapleCodePrinter"], [210, 3, 1, "", "maple_code"], [210, 3, 1, "", "print_maple_code"]], "sympy.printing.maple.MapleCodePrinter": [[210, 5, 1, "", "printmethod"]], "sympy.printing.mathematica": [[210, 1, 1, "", "MCodePrinter"], [210, 6, 1, "", "known_functions"], [210, 3, 1, "", "mathematica_code"]], "sympy.printing.mathematica.MCodePrinter": [[210, 5, 1, "", "printmethod"]], "sympy.printing.mathml": [[210, 1, 1, "", "MathMLContentPrinter"], [210, 1, 1, "", "MathMLPresentationPrinter"], [210, 1, 1, "", "MathMLPrinterBase"], [210, 3, 1, "", "mathml"], [210, 3, 1, "", "print_mathml"]], "sympy.printing.mathml.MathMLContentPrinter": [[210, 2, 1, "", "mathml_tag"], [210, 5, 1, "", "printmethod"]], "sympy.printing.mathml.MathMLPresentationPrinter": [[210, 2, 1, "", "mathml_tag"], [210, 5, 1, "", "printmethod"]], "sympy.printing.mathml.MathMLPrinterBase": [[210, 2, 1, "", "doprint"]], "sympy.printing.octave": [[210, 1, 1, "", "OctaveCodePrinter"], [210, 6, 1, "", "known_fcns_src1"], [210, 6, 1, "", "known_fcns_src2"], [210, 3, 1, "", "octave_code"]], "sympy.printing.octave.OctaveCodePrinter": [[210, 2, 1, "", "indent_code"], [210, 5, 1, "", "printmethod"]], "sympy.printing.precedence": [[210, 6, 1, "", "PRECEDENCE"], [210, 6, 1, "", "PRECEDENCE_FUNCTIONS"], [210, 6, 1, "", "PRECEDENCE_VALUES"], [210, 3, 1, "", "precedence"]], "sympy.printing.pretty": [[210, 0, 0, "-", "pretty"], [210, 0, 0, "-", "pretty_symbology"], [210, 0, 0, "-", "stringpict"]], "sympy.printing.pretty.pretty": [[210, 1, 1, "", "PrettyPrinter"], [210, 3, 1, "", "pretty"], [210, 3, 1, "", "pretty_print"]], "sympy.printing.pretty.pretty.PrettyPrinter": [[210, 5, 1, "", "printmethod"]], "sympy.printing.pretty.pretty_symbology": [[210, 3, 1, "", "G"], [210, 3, 1, "", "U"], [210, 3, 1, "", "VF"], [210, 3, 1, "", "annotated"], [210, 6, 1, "", "atoms_table"], [210, 6, 1, "", "digit_2txt"], [210, 6, 1, "", "frac"], [210, 3, 1, "", "g"], [210, 6, 1, "", "greek_letters"], [210, 3, 1, "", "hobj"], [210, 3, 1, "", "pretty_atom"], [210, 3, 1, "", "pretty_symbol"], [210, 3, 1, "", "pretty_try_use_unicode"], [210, 3, 1, "", "pretty_use_unicode"], [210, 6, 1, "", "root"], [210, 6, 1, "", "sub"], [210, 6, 1, "", "sup"], [210, 6, 1, "", "symb_2txt"], [210, 3, 1, "", "vobj"], [210, 3, 1, "", "xobj"], [210, 3, 1, "", "xstr"], [210, 3, 1, "", "xsym"]], "sympy.printing.pretty.stringpict": [[210, 1, 1, "", "prettyForm"], [210, 1, 1, "", "stringPict"]], "sympy.printing.pretty.stringpict.prettyForm": [[210, 2, 1, "", "apply"]], "sympy.printing.pretty.stringpict.stringPict": [[210, 2, 1, "", "above"], [210, 2, 1, "", "below"], [210, 2, 1, "", "height"], [210, 2, 1, "", "left"], [210, 2, 1, "", "leftslash"], [210, 2, 1, "", "next"], [210, 2, 1, "", "parens"], [210, 2, 1, "", "render"], [210, 2, 1, "", "right"], [210, 2, 1, "", "root"], [210, 2, 1, "", "stack"], [210, 2, 1, "", "terminal_width"], [210, 2, 1, "", "width"]], "sympy.printing.preview": [[210, 3, 1, "", "preview"]], "sympy.printing.printer": [[210, 1, 1, "", "Printer"]], "sympy.printing.printer.Printer": [[210, 2, 1, "", "_print"], [210, 2, 1, "", "doprint"], [210, 5, 1, "", "printmethod"], [210, 2, 1, "", "set_global_settings"]], "sympy.printing.pycode": [[210, 1, 1, "", "MpmathPrinter"], [210, 3, 1, "", "pycode"]], "sympy.printing.rcode": [[210, 1, 1, "", "RCodePrinter"], [210, 6, 1, "", "known_functions"], [210, 3, 1, "", "print_rcode"], [210, 3, 1, "", "rcode"]], "sympy.printing.rcode.RCodePrinter": [[210, 2, 1, "", "indent_code"], [210, 5, 1, "", "printmethod"]], "sympy.printing.repr": [[210, 1, 1, "", "ReprPrinter"], [210, 3, 1, "", "srepr"]], "sympy.printing.repr.ReprPrinter": [[210, 2, 1, "", "emptyPrinter"], [210, 5, 1, "", "printmethod"], [210, 2, 1, "", "reprify"]], "sympy.printing.rust": [[210, 1, 1, "", "RustCodePrinter"], [210, 6, 1, "", "known_functions"], [210, 3, 1, "", "rust_code"]], "sympy.printing.rust.RustCodePrinter": [[210, 2, 1, "", "indent_code"], [210, 5, 1, "", "printmethod"]], "sympy.printing.smtlib": [[210, 1, 1, "", "SMTLibPrinter"], [210, 3, 1, "", "smtlib_code"]], "sympy.printing.smtlib.SMTLibPrinter": [[210, 5, 1, "", "_default_settings"], [210, 5, 1, "", "printmethod"]], "sympy.printing.str": [[210, 1, 1, "", "StrPrinter"], [210, 3, 1, "", "sstr"], [210, 3, 1, "", "sstrrepr"]], "sympy.printing.str.StrPrinter": [[210, 5, 1, "", "printmethod"]], "sympy.printing.tree": [[210, 3, 1, "", "pprint_nodes"], [210, 3, 1, "", "print_node"], [210, 3, 1, "", "print_tree"], [210, 3, 1, "", "tree"]], "sympy.series.acceleration": [[217, 3, 1, "", "richardson"], [217, 3, 1, "", "shanks"]], "sympy.series.formal": [[212, 1, 1, "", "FiniteFormalPowerSeries"], [212, 1, 1, "", "FormalPowerSeries"], [212, 1, 1, "", "FormalPowerSeriesCompose"], [212, 1, 1, "", "FormalPowerSeriesInverse"], [212, 1, 1, "", "FormalPowerSeriesProduct"], [212, 3, 1, "", "compute_fps"], [212, 3, 1, "", "exp_re"], [212, 3, 1, "", "fps"], [212, 3, 1, "", "hyper_algorithm"], [212, 3, 1, "", "hyper_re"], [212, 3, 1, "", "rational_algorithm"], [212, 3, 1, "", "rational_independent"], [212, 3, 1, "", "rsolve_hypergeometric"], [212, 3, 1, "", "simpleDE"], [212, 3, 1, "", "solve_de"]], "sympy.series.formal.FormalPowerSeries": [[212, 2, 1, "", "coeff_bell"], [212, 2, 1, "", "compose"], [212, 4, 1, "", "infinite"], [212, 2, 1, "", "integrate"], [212, 2, 1, "", "inverse"], [212, 2, 1, "", "polynomial"], [212, 2, 1, "", "product"], [212, 2, 1, "", "truncate"]], "sympy.series.formal.FormalPowerSeriesCompose": [[212, 4, 1, "", "function"]], "sympy.series.formal.FormalPowerSeriesInverse": [[212, 4, 1, "", "function"]], "sympy.series.formal.FormalPowerSeriesProduct": [[212, 4, 1, "", "function"]], "sympy.series.fourier": [[213, 1, 1, "", "FourierSeries"], [213, 3, 1, "", "fourier_series"]], "sympy.series.fourier.FourierSeries": [[213, 2, 1, "", "scale"], [213, 2, 1, "", "scalex"], [213, 2, 1, "", "shift"], [213, 2, 1, "", "shiftx"], [213, 2, 1, "", "sigma_approximation"], [213, 2, 1, "", "truncate"]], "sympy.series.gruntz": [[217, 1, 1, "", "SubsSet"], [217, 3, 1, "", "build_expression_tree"], [217, 3, 1, "", "calculate_series"], [217, 3, 1, "", "compare"], [217, 3, 1, "", "gruntz"], [217, 3, 1, "", "limitinf"], [217, 3, 1, "", "mrv"], [217, 3, 1, "", "mrv_leadterm"], [217, 3, 1, "", "mrv_max1"], [217, 3, 1, "", "mrv_max3"], [217, 3, 1, "", "rewrite"], [217, 3, 1, "", "sign"]], "sympy.series.gruntz.SubsSet": [[217, 2, 1, "", "copy"], [217, 2, 1, "", "do_subs"], [217, 2, 1, "", "meets"], [217, 2, 1, "", "union"]], "sympy.series.limits": [[217, 1, 1, "", "Limit"], [217, 3, 1, "", "limit"]], "sympy.series.limits.Limit": [[217, 2, 1, "", "doit"]], "sympy.series.limitseq": [[215, 3, 1, "", "difference_delta"], [215, 3, 1, "", "dominant"], [215, 3, 1, "", "limit_seq"]], "sympy.series.order": [[217, 1, 1, "", "Order"]], "sympy.series.order.Order": [[217, 2, 1, "", "contains"]], "sympy.series.residues": [[217, 3, 1, "", "residue"]], "sympy.series.sequences": [[216, 1, 1, "", "EmptySequence"], [216, 1, 1, "", "RecursiveSeq"], [216, 1, 1, "", "SeqAdd"], [216, 1, 1, "", "SeqBase"], [216, 1, 1, "", "SeqFormula"], [216, 1, 1, "", "SeqMul"], [216, 1, 1, "", "SeqPer"], [216, 3, 1, "", "sequence"]], "sympy.series.sequences.EmptySequence": [[216, 2, 1, "", "coeff_mul"]], "sympy.series.sequences.RecursiveSeq": [[216, 4, 1, "", "initial"], [216, 4, 1, "", "interval"], [216, 4, 1, "", "n"], [216, 4, 1, "", "recurrence"], [216, 4, 1, "", "start"], [216, 4, 1, "", "stop"], [216, 4, 1, "", "y"], [216, 4, 1, "", "yn"]], "sympy.series.sequences.SeqAdd": [[216, 2, 1, "", "reduce"]], "sympy.series.sequences.SeqBase": [[216, 2, 1, "", "coeff"], [216, 2, 1, "", "coeff_mul"], [216, 2, 1, "", "find_linear_recurrence"], [216, 4, 1, "", "free_symbols"], [216, 4, 1, "", "gen"], [216, 4, 1, "", "interval"], [216, 4, 1, "", "length"], [216, 4, 1, "", "start"], [216, 4, 1, "", "stop"], [216, 4, 1, "", "variables"]], "sympy.series.sequences.SeqFormula": [[216, 2, 1, "", "coeff_mul"]], "sympy.series.sequences.SeqMul": [[216, 2, 1, "", "reduce"]], "sympy.series.sequences.SeqPer": [[216, 2, 1, "", "coeff_mul"]], "sympy.series.series": [[217, 3, 1, "", "series"]], "sympy.sets": [[218, 0, 0, "-", "conditionset"], [218, 0, 0, "-", "fancysets"], [218, 0, 0, "-", "powerset"], [218, 0, 0, "-", "sets"]], "sympy.sets.conditionset": [[218, 1, 1, "", "ConditionSet"], [218, 1, 1, "", "Contains"], [218, 1, 1, "", "SetKind"]], "sympy.sets.fancysets": [[218, 1, 1, "", "CartesianComplexRegion"], [218, 1, 1, "", "ComplexRegion"], [218, 1, 1, "", "Complexes"], [218, 1, 1, "", "ImageSet"], [218, 1, 1, "", "Integers"], [218, 1, 1, "", "Naturals"], [218, 1, 1, "", "Naturals0"], [218, 1, 1, "", "PolarComplexRegion"], [218, 1, 1, "", "Range"], [218, 1, 1, "", "Rationals"], [218, 1, 1, "", "Reals"], [218, 3, 1, "", "normalize_theta_set"]], "sympy.sets.fancysets.ComplexRegion": [[218, 4, 1, "", "a_interval"], [218, 4, 1, "", "b_interval"], [218, 2, 1, "", "from_real"], [218, 4, 1, "", "psets"], [218, 4, 1, "", "sets"]], "sympy.sets.fancysets.Range": [[218, 2, 1, "", "as_relational"], [218, 4, 1, "", "reversed"]], "sympy.sets.powerset": [[218, 1, 1, "", "PowerSet"]], "sympy.sets.sets": [[218, 1, 1, "", "Complement"], [218, 1, 1, "", "DisjointUnion"], [218, 1, 1, "", "EmptySet"], [218, 1, 1, "", "FiniteSet"], [218, 1, 1, "", "Intersection"], [218, 1, 1, "", "Interval"], [218, 1, 1, "", "ProductSet"], [218, 1, 1, "", "Set"], [218, 1, 1, "", "SymmetricDifference"], [218, 1, 1, "", "Union"], [218, 1, 1, "", "UniversalSet"], [218, 3, 1, "", "imageset"]], "sympy.sets.sets.Complement": [[218, 2, 1, "", "as_relational"], [218, 2, 1, "", "reduce"]], "sympy.sets.sets.FiniteSet": [[218, 2, 1, "", "as_relational"]], "sympy.sets.sets.Intersection": [[218, 2, 1, "", "as_relational"]], "sympy.sets.sets.Interval": [[218, 2, 1, "", "Lopen"], [218, 2, 1, "", "Ropen"], [218, 2, 1, "", "as_relational"], [218, 4, 1, "", "end"], [218, 4, 1, "", "is_left_unbounded"], [218, 4, 1, "", "is_right_unbounded"], [218, 4, 1, "", "left_open"], [218, 2, 1, "", "open"], [218, 4, 1, "", "right_open"], [218, 4, 1, "", "start"]], "sympy.sets.sets.ProductSet": [[218, 4, 1, "", "is_iterable"]], "sympy.sets.sets.Set": [[218, 4, 1, "", "boundary"], [218, 4, 1, "", "closure"], [218, 2, 1, "", "complement"], [218, 2, 1, "", "contains"], [218, 4, 1, "", "inf"], [218, 4, 1, "", "interior"], [218, 2, 1, "", "intersect"], [218, 2, 1, "", "intersection"], [218, 4, 1, "", "is_closed"], [218, 2, 1, "", "is_disjoint"], [218, 4, 1, "", "is_open"], [218, 2, 1, "", "is_proper_subset"], [218, 2, 1, "", "is_proper_superset"], [218, 2, 1, "", "is_subset"], [218, 2, 1, "", "is_superset"], [218, 2, 1, "", "isdisjoint"], [218, 2, 1, "", "issubset"], [218, 2, 1, "", "issuperset"], [218, 4, 1, "", "kind"], [218, 4, 1, "", "measure"], [218, 2, 1, "", "powerset"], [218, 4, 1, "", "sup"], [218, 2, 1, "", "symmetric_difference"], [218, 2, 1, "", "union"]], "sympy.sets.sets.SymmetricDifference": [[218, 2, 1, "", "as_relational"]], "sympy.sets.sets.Union": [[218, 2, 1, "", "as_relational"]], "sympy.simplify": [[222, 0, 0, "-", "combsimp"], [222, 0, 0, "-", "cse_main"], [222, 0, 0, "-", "epathtools"], [222, 0, 0, "-", "hyperexpand"], [220, 0, 0, "-", "hyperexpand_doc"], [222, 0, 0, "-", "powsimp"], [222, 0, 0, "-", "radsimp"], [222, 0, 0, "-", "ratsimp"], [12, 0, 0, "-", "simplify"], [222, 0, 0, "-", "sqrtdenest"], [222, 0, 0, "-", "trigsimp"]], "sympy.simplify.combsimp": [[222, 3, 1, "", "combsimp"]], "sympy.simplify.cse_main": [[222, 3, 1, "", "cse"], [222, 3, 1, "", "opt_cse"], [222, 3, 1, "", "tree_cse"]], "sympy.simplify.epathtools": [[222, 1, 1, "", "EPath"], [222, 3, 1, "", "epath"]], "sympy.simplify.epathtools.EPath": [[222, 2, 1, "", "apply"], [222, 2, 1, "", "select"]], "sympy.simplify.fu": [[219, 3, 1, "", "TR0"], [219, 3, 1, "", "TR1"], [219, 3, 1, "", "TR10"], [219, 3, 1, "", "TR10i"], [219, 3, 1, "", "TR11"], [219, 3, 1, "", "TR111"], [219, 3, 1, "", "TR12"], [219, 3, 1, "", "TR12i"], [219, 3, 1, "", "TR13"], [219, 3, 1, "", "TR14"], [219, 3, 1, "", "TR15"], [219, 3, 1, "", "TR16"], [219, 3, 1, "", "TR2"], [219, 3, 1, "", "TR22"], [219, 3, 1, "", "TR2i"], [219, 3, 1, "", "TR3"], [219, 3, 1, "", "TR4"], [219, 3, 1, "", "TR5"], [219, 3, 1, "", "TR6"], [219, 3, 1, "", "TR7"], [219, 3, 1, "", "TR8"], [219, 3, 1, "", "TR9"], [219, 3, 1, "", "TRmorrie"], [219, 3, 1, "", "TRpower"], [219, 3, 1, "", "fu"]], "sympy.simplify.hyperexpand": [[222, 3, 1, "", "hyperexpand"]], "sympy.simplify.powsimp": [[222, 3, 1, "", "powdenest"], [222, 3, 1, "", "powsimp"]], "sympy.simplify.radsimp": [[222, 3, 1, "", "collect"], [222, 3, 1, "", "collect_const"], [222, 3, 1, "", "collect_sqrt"], [222, 3, 1, "", "fraction"], [222, 3, 1, "", "rad_rationalize"], [222, 3, 1, "", "radsimp"], [222, 3, 1, "", "rcollect"]], "sympy.simplify.ratsimp": [[222, 3, 1, "", "ratsimp"], [222, 3, 1, "", "ratsimpmodprime"]], "sympy.simplify.simplify": [[222, 3, 1, "", "besselsimp"], [222, 3, 1, "", "hypersimilar"], [222, 3, 1, "", "hypersimp"], [222, 3, 1, "", "kroneckersimp"], [222, 3, 1, "", "logcombine"], [222, 3, 1, "", "nsimplify"], [222, 3, 1, "", "nthroot"], [222, 3, 1, "", "posify"], [222, 3, 1, "", "separatevars"], [222, 3, 1, "", "simplify"]], "sympy.simplify.sqrtdenest": [[222, 3, 1, "", "sqrtdenest"]], "sympy.simplify.trigsimp": [[222, 3, 1, "", "trigsimp"]], "sympy.solvers.deutils": [[228, 3, 1, "", "ode_order"]], "sympy.solvers.diophantine.diophantine": [[223, 1, 1, "", "BinaryQuadratic"], [223, 1, 1, "", "CubicThue"], [223, 1, 1, "", "DiophantineEquationType"], [223, 1, 1, "", "DiophantineSolutionSet"], [223, 1, 1, "", "GeneralPythagorean"], [223, 1, 1, "", "GeneralSumOfEvenPowers"], [223, 1, 1, "", "GeneralSumOfSquares"], [223, 1, 1, "", "HomogeneousGeneralQuadratic"], [223, 1, 1, "", "HomogeneousTernaryQuadratic"], [223, 1, 1, "", "HomogeneousTernaryQuadraticNormal"], [223, 1, 1, "", "InhomogeneousGeneralQuadratic"], [223, 1, 1, "", "InhomogeneousTernaryQuadratic"], [223, 1, 1, "", "Linear"], [223, 3, 1, "", "PQa"], [223, 1, 1, "", "Univariate"], [223, 3, 1, "", "base_solution_linear"], [223, 3, 1, "", "classify_diop"], [223, 3, 1, "", "cornacchia"], [223, 3, 1, "", "descent"], [223, 3, 1, "", "diop_DN"], [223, 3, 1, "", "diop_bf_DN"], [223, 3, 1, "", "diop_general_pythagorean"], [223, 3, 1, "", "diop_general_sum_of_even_powers"], [223, 3, 1, "", "diop_general_sum_of_squares"], [223, 3, 1, "", "diop_linear"], [223, 3, 1, "", "diop_quadratic"], [223, 3, 1, "", "diop_solve"], [223, 3, 1, "", "diop_ternary_quadratic"], [223, 3, 1, "", "diop_ternary_quadratic_normal"], [223, 3, 1, "", "diophantine"], [223, 3, 1, "", "divisible"], [223, 3, 1, "", "equivalent"], [223, 3, 1, "", "find_DN"], [223, 3, 1, "", "gaussian_reduce"], [223, 3, 1, "", "holzer"], [223, 3, 1, "", "ldescent"], [223, 3, 1, "", "merge_solution"], [223, 3, 1, "", "parametrize_ternary_quadratic"], [223, 3, 1, "", "partition"], [223, 3, 1, "", "power_representation"], [223, 3, 1, "", "prime_as_sum_of_two_squares"], [223, 3, 1, "", "reconstruct"], [223, 3, 1, "", "sqf_normal"], [223, 3, 1, "", "square_factor"], [223, 3, 1, "", "sum_of_four_squares"], [223, 3, 1, "", "sum_of_powers"], [223, 3, 1, "", "sum_of_squares"], [223, 3, 1, "", "sum_of_three_squares"], [223, 3, 1, "", "transformation_to_DN"], [223, 3, 1, "", "transformation_to_normal"]], "sympy.solvers.diophantine.diophantine.DiophantineEquationType": [[223, 2, 1, "", "matches"]], "sympy.solvers": [[225, 0, 0, "-", "inequalities"], [226, 0, 0, "-", "ode"], [227, 0, 0, "-", "pde"], [228, 0, 0, "-", "recurr"], [229, 0, 0, "-", "solveset"]], "sympy.solvers.inequalities": [[225, 3, 1, "", "reduce_abs_inequalities"], [225, 3, 1, "", "reduce_abs_inequality"], [225, 3, 1, "", "reduce_inequalities"], [225, 3, 1, "", "reduce_rational_inequalities"], [225, 3, 1, "", "solve_poly_inequalities"], [225, 3, 1, "", "solve_poly_inequality"], [225, 3, 1, "", "solve_rational_inequalities"], [225, 3, 1, "", "solve_univariate_inequality"]], "sympy.solvers.ode": [[226, 6, 1, "", "allhints"], [226, 3, 1, "", "checkinfsol"], [226, 3, 1, "", "checkodesol"], [226, 3, 1, "", "classify_ode"], [226, 3, 1, "", "constantsimp"], [226, 3, 1, "", "dsolve"], [226, 3, 1, "", "homogeneous_order"], [226, 3, 1, "", "infinitesimals"], [226, 0, 0, "-", "ode"]], "sympy.solvers.ode.lie_group": [[226, 3, 1, "", "lie_heuristic_abaco1_product"], [226, 3, 1, "", "lie_heuristic_abaco1_simple"], [226, 3, 1, "", "lie_heuristic_abaco2_similar"], [226, 3, 1, "", "lie_heuristic_abaco2_unique_general"], [226, 3, 1, "", "lie_heuristic_abaco2_unique_unknown"], [226, 3, 1, "", "lie_heuristic_bivariate"], [226, 3, 1, "", "lie_heuristic_chi"], [226, 3, 1, "", "lie_heuristic_function_sum"], [226, 3, 1, "", "lie_heuristic_linear"]], "sympy.solvers.ode.ode": [[226, 3, 1, "", "_handle_Integral"], [226, 3, 1, "", "_linear_2eq_order1_type6"], [226, 3, 1, "", "_linear_2eq_order1_type7"], [226, 3, 1, "", "_nonlinear_2eq_order1_type1"], [226, 3, 1, "", "_nonlinear_2eq_order1_type2"], [226, 3, 1, "", "_nonlinear_2eq_order1_type3"], [226, 3, 1, "", "_nonlinear_2eq_order1_type4"], [226, 3, 1, "", "_nonlinear_2eq_order1_type5"], [226, 3, 1, "", "_nonlinear_3eq_order1_type1"], [226, 3, 1, "", "_nonlinear_3eq_order1_type2"], [226, 3, 1, "", "_nonlinear_3eq_order1_type3"], [226, 3, 1, "", "_nonlinear_3eq_order1_type4"], [226, 3, 1, "", "_nonlinear_3eq_order1_type5"], [226, 3, 1, "", "constant_renumber"], [226, 3, 1, "", "ode_1st_power_series"], [226, 3, 1, "", "ode_2nd_power_series_ordinary"], [226, 3, 1, "", "ode_2nd_power_series_regular"], [226, 3, 1, "", "ode_sol_simplicity"], [226, 3, 1, "", "odesimp"]], "sympy.solvers.ode.riccati": [[226, 3, 1, "", "compute_m_ybar"], [226, 3, 1, "", "construct_c"], [226, 3, 1, "", "construct_d"], [226, 3, 1, "", "get_gen_sol_from_part_sol"], [226, 3, 1, "", "rational_laurent_series"], [226, 3, 1, "", "remove_redundant_sols"], [226, 3, 1, "", "riccati_inverse_normal"], [226, 3, 1, "", "riccati_normal"], [226, 3, 1, "", "riccati_reduced"], [226, 3, 1, "", "solve_aux_eq"], [226, 3, 1, "", "solve_riccati"]], "sympy.solvers.ode.single": [[226, 1, 1, "", "AlmostLinear"], [226, 1, 1, "", "Bernoulli"], [226, 1, 1, "", "Factorable"], [226, 1, 1, "", "FirstExact"], [226, 1, 1, "", "FirstLinear"], [226, 1, 1, "", "HomogeneousCoeffBest"], [226, 1, 1, "", "HomogeneousCoeffSubsDepDivIndep"], [226, 1, 1, "", "HomogeneousCoeffSubsIndepDivDep"], [226, 1, 1, "", "LieGroup"], [226, 1, 1, "", "LinearCoefficients"], [226, 1, 1, "", "Liouville"], [226, 1, 1, "", "NthAlgebraic"], [226, 1, 1, "", "NthLinearConstantCoeffHomogeneous"], [226, 1, 1, "", "NthLinearConstantCoeffUndeterminedCoefficients"], [226, 1, 1, "", "NthLinearConstantCoeffVariationOfParameters"], [226, 1, 1, "", "NthLinearEulerEqHomogeneous"], [226, 1, 1, "", "NthLinearEulerEqNonhomogeneousUndeterminedCoefficients"], [226, 1, 1, "", "NthLinearEulerEqNonhomogeneousVariationOfParameters"], [226, 1, 1, "", "NthOrderReducible"], [226, 1, 1, "", "RationalRiccati"], [226, 1, 1, "", "RiccatiSpecial"], [226, 1, 1, "", "SecondHypergeometric"], [226, 1, 1, "", "SecondLinearAiry"], [226, 1, 1, "", "SecondLinearBessel"], [226, 1, 1, "", "Separable"], [226, 1, 1, "", "SeparableReduced"]], "sympy.solvers.ode.systems": [[226, 3, 1, "", "canonical_odes"], [226, 3, 1, "", "dsolve_system"], [226, 3, 1, "", "linear_ode_to_matrix"], [226, 3, 1, "", "linodesolve"], [226, 3, 1, "", "linodesolve_type"], [226, 3, 1, "", "matrix_exp"], [226, 3, 1, "", "matrix_exp_jordan_form"]], "sympy.solvers.pde": [[227, 3, 1, "", "checkpdesol"], [227, 3, 1, "", "classify_pde"], [227, 3, 1, "", "pde_1st_linear_constant_coeff"], [227, 3, 1, "", "pde_1st_linear_constant_coeff_homogeneous"], [227, 3, 1, "", "pde_1st_linear_variable_coeff"], [227, 3, 1, "", "pde_separate"], [227, 3, 1, "", "pde_separate_add"], [227, 3, 1, "", "pde_separate_mul"], [227, 3, 1, "", "pdsolve"]], "sympy.solvers.polysys": [[228, 3, 1, "", "solve_poly_system"], [228, 3, 1, "", "solve_triangulated"]], "sympy.solvers.recurr": [[228, 3, 1, "", "rsolve"], [228, 3, 1, "", "rsolve_hyper"], [228, 3, 1, "", "rsolve_poly"], [228, 3, 1, "", "rsolve_ratio"]], "sympy.solvers.solvers": [[228, 3, 1, "", "checksol"], [228, 3, 1, "", "nsolve"], [228, 3, 1, "", "solve"], [228, 3, 1, "", "solve_linear"], [228, 3, 1, "", "solve_linear_system"], [228, 3, 1, "", "solve_linear_system_LU"], [228, 3, 1, "", "solve_undetermined_coeffs"], [228, 3, 1, "", "unrad"]], "sympy.solvers.solveset": [[229, 3, 1, "", "_is_exponential"], [229, 3, 1, "", "_is_logarithmic"], [229, 3, 1, "", "_solve_exponential"], [229, 3, 1, "", "_solve_logarithm"], [229, 3, 1, "", "_transolve"], [229, 3, 1, "", "domain_check"], [229, 3, 1, "", "invert_complex"], [229, 3, 1, "", "invert_real"], [229, 3, 1, "", "linear_eq_to_matrix"], [229, 3, 1, "", "linsolve"], [229, 3, 1, "", "nonlinsolve"], [229, 3, 1, "", "solveset"], [229, 3, 1, "", "solveset_complex"], [229, 3, 1, "", "solveset_real"], [229, 3, 1, "", "solvify"]], "sympy.stats": [[230, 3, 1, "", "Arcsin"], [230, 3, 1, "", "Benini"], [230, 3, 1, "", "Bernoulli"], [230, 1, 1, "", "BernoulliProcess"], [230, 3, 1, "", "Beta"], [230, 3, 1, "", "BetaBinomial"], [230, 3, 1, "", "BetaNoncentral"], [230, 3, 1, "", "BetaPrime"], [230, 3, 1, "", "Binomial"], [230, 3, 1, "", "BoundedPareto"], [230, 3, 1, "", "Cauchy"], [230, 1, 1, "", "CentralMoment"], [230, 3, 1, "", "Chi"], [230, 3, 1, "", "ChiNoncentral"], [230, 3, 1, "", "ChiSquared"], [230, 3, 1, "", "Coin"], [230, 1, 1, "", "ContinuousMarkovChain"], [230, 3, 1, "", "ContinuousRV"], [230, 1, 1, "", "Covariance"], [230, 1, 1, "", "CrossCovarianceMatrix"], [230, 3, 1, "", "Dagum"], [230, 3, 1, "", "Die"], [230, 1, 1, "", "DiscreteMarkovChain"], [230, 3, 1, "", "DiscreteUniform"], [230, 3, 1, "", "E"], [230, 3, 1, "", "Erlang"], [230, 3, 1, "", "ExGaussian"], [230, 1, 1, "", "Expectation"], [230, 1, 1, "", "ExpectationMatrix"], [230, 3, 1, "", "Exponential"], [230, 3, 1, "", "FDistribution"], [230, 3, 1, "", "FiniteRV"], [230, 3, 1, "", "FisherZ"], [230, 3, 1, "", "Frechet"], [230, 3, 1, "", "Gamma"], [230, 3, 1, "", "GammaInverse"], [230, 1, 1, "", "GammaProcess"], [230, 3, 1, "", "GeneralizedMultivariateLogGamma"], [230, 3, 1, "", "GeneralizedMultivariateLogGammaOmega"], [230, 3, 1, "", "Geometric"], [230, 3, 1, "", "Gompertz"], [230, 3, 1, "", "Gumbel"], [230, 3, 1, "", "Hermite"], [230, 3, 1, "", "Hypergeometric"], [230, 3, 1, "", "JointRV"], [230, 3, 1, "", "Kumaraswamy"], [230, 3, 1, "", "Laplace"], [230, 3, 1, "", "Levy"], [230, 3, 1, "", "LogLogistic"], [230, 3, 1, "", "LogNormal"], [230, 3, 1, "", "Logarithmic"], [230, 3, 1, "", "Logistic"], [230, 3, 1, "", "Lomax"], [230, 3, 1, "", "MatrixGamma"], [230, 3, 1, "", "MatrixNormal"], [230, 3, 1, "", "Maxwell"], [230, 1, 1, "", "Moment"], [230, 3, 1, "", "Moyal"], [230, 3, 1, "", "Multinomial"], [230, 3, 1, "", "MultivariateBeta"], [230, 3, 1, "", "MultivariateEwens"], [230, 3, 1, "", "MultivariateLaplace"], [230, 3, 1, "", "MultivariateNormal"], [230, 3, 1, "", "MultivariateT"], [230, 3, 1, "", "Nakagami"], [230, 3, 1, "", "NegativeBinomial"], [230, 3, 1, "", "NegativeMultinomial"], [230, 3, 1, "", "Normal"], [230, 3, 1, "", "NormalGamma"], [230, 3, 1, "", "P"], [230, 3, 1, "", "Pareto"], [230, 3, 1, "", "Poisson"], [230, 1, 1, "", "PoissonProcess"], [230, 3, 1, "", "PowerFunction"], [230, 1, 1, "", "Probability"], [230, 3, 1, "", "QuadraticU"], [230, 3, 1, "", "Rademacher"], [230, 3, 1, "", "RaisedCosine"], [230, 3, 1, "", "Rayleigh"], [230, 3, 1, "", "Reciprocal"], [230, 3, 1, "", "ShiftedGompertz"], [230, 3, 1, "", "Skellam"], [230, 3, 1, "", "StudentT"], [230, 3, 1, "", "Trapezoidal"], [230, 3, 1, "", "Triangular"], [230, 3, 1, "", "Uniform"], [230, 3, 1, "", "UniformSum"], [230, 1, 1, "", "Variance"], [230, 1, 1, "", "VarianceMatrix"], [230, 3, 1, "", "VonMises"], [230, 3, 1, "", "Wald"], [230, 3, 1, "", "Weibull"], [230, 1, 1, "", "WienerProcess"], [230, 3, 1, "", "WignerSemicircle"], [230, 3, 1, "", "Wishart"], [230, 3, 1, "", "YuleSimon"], [230, 3, 1, "", "Zeta"], [230, 3, 1, "", "cmoment"], [230, 3, 1, "", "correlation"], [230, 3, 1, "", "coskewness"], [230, 3, 1, "", "covariance"], [230, 0, 0, "-", "crv"], [230, 0, 0, "-", "crv_types"], [230, 3, 1, "", "density"], [230, 3, 1, "", "entropy"], [230, 3, 1, "", "factorial_moment"], [230, 0, 0, "-", "frv"], [230, 0, 0, "-", "frv_types"], [230, 3, 1, "", "given"], [230, 3, 1, "", "kurtosis"], [230, 3, 1, "", "marginal_distribution"], [230, 3, 1, "", "median"], [230, 3, 1, "", "moment"], [230, 3, 1, "", "quantile"], [230, 0, 0, "-", "rv"], [230, 3, 1, "", "sample"], [230, 3, 1, "", "sample_iter"], [230, 3, 1, "", "skewness"], [230, 3, 1, "", "std"], [230, 3, 1, "", "variance"], [230, 3, 1, "", "where"]], "sympy.stats.BernoulliProcess": [[230, 2, 1, "", "expectation"], [230, 2, 1, "", "probability"]], "sympy.stats.DiscreteMarkovChain": [[230, 2, 1, "", "absorbing_probabilities"], [230, 2, 1, "", "canonical_form"], [230, 2, 1, "", "communication_classes"], [230, 2, 1, "", "decompose"], [230, 2, 1, "", "fixed_row_vector"], [230, 2, 1, "", "fundamental_matrix"], [230, 4, 1, "", "limiting_distribution"], [230, 2, 1, "", "sample"], [230, 2, 1, "", "stationary_distribution"], [230, 4, 1, "", "transition_probabilities"]], "sympy.stats.compound_rv": [[230, 1, 1, "", "CompoundDistribution"]], "sympy.stats.crv": [[230, 1, 1, "", "ContinuousDomain"], [230, 1, 1, "", "ContinuousPSpace"]], "sympy.stats.crv_types": [[230, 1, 1, "", "NormalPSpace"]], "sympy.stats.crv_types.sympy.stats": [[230, 3, 1, "", "Die"], [230, 3, 1, "", "Normal"]], "sympy.stats.frv": [[230, 1, 1, "", "FiniteDomain"], [230, 1, 1, "", "FinitePSpace"]], "sympy.stats.frv_types": [[230, 1, 1, "", "DiePSpace"]], "sympy.stats.rv": [[230, 1, 1, "", "ConditionalDomain"], [230, 1, 1, "", "PSpace"], [230, 1, 1, "", "ProductDomain"], [230, 1, 1, "", "ProductPSpace"], [230, 1, 1, "", "RandomDomain"], [230, 1, 1, "", "RandomSymbol"], [230, 1, 1, "", "SingleDomain"], [230, 1, 1, "", "SinglePSpace"], [230, 3, 1, "", "pspace"], [230, 3, 1, "", "random_symbols"], [230, 3, 1, "", "rs_swap"], [230, 3, 1, "", "sampling_E"], [230, 3, 1, "", "sampling_P"], [230, 3, 1, "", "sampling_density"]], "sympy.tensor": [[231, 0, 0, "-", "array"], [234, 0, 0, "-", "index_methods"], [235, 0, 0, "-", "indexed"], [236, 0, 0, "-", "tensor"], [237, 0, 0, "-", "toperators"]], "sympy.tensor.array": [[231, 1, 1, "", "ImmutableDenseNDimArray"], [231, 1, 1, "", "ImmutableSparseNDimArray"], [231, 1, 1, "", "MutableDenseNDimArray"], [231, 1, 1, "", "MutableSparseNDimArray"], [231, 3, 1, "", "derive_by_array"], [232, 0, 0, "-", "expressions"], [231, 3, 1, "", "permutedims"], [231, 3, 1, "", "tensorcontraction"], [231, 3, 1, "", "tensordiagonal"], [231, 3, 1, "", "tensorproduct"]], "sympy.tensor.index_methods": [[234, 3, 1, "", "get_contraction_structure"], [234, 3, 1, "", "get_indices"]], "sympy.tensor.indexed": [[235, 1, 1, "", "Idx"], [235, 1, 1, "", "Indexed"], [235, 1, 1, "", "IndexedBase"]], "sympy.tensor.indexed.Idx": [[235, 4, 1, "", "label"], [235, 4, 1, "", "lower"], [235, 4, 1, "", "upper"]], "sympy.tensor.indexed.Indexed": [[235, 4, 1, "", "base"], [235, 4, 1, "", "indices"], [235, 4, 1, "", "ranges"], [235, 4, 1, "", "rank"], [235, 4, 1, "", "shape"]], "sympy.tensor.indexed.IndexedBase": [[235, 4, 1, "", "label"], [235, 4, 1, "", "offset"], [235, 4, 1, "", "shape"], [235, 4, 1, "", "strides"]], "sympy.tensor.tensor": [[236, 1, 1, "", "TensAdd"], [236, 1, 1, "", "TensExpr"], [236, 1, 1, "", "TensMul"], [236, 1, 1, "", "TensorHead"], [236, 1, 1, "", "TensorIndex"], [236, 1, 1, "", "TensorIndexType"], [236, 1, 1, "", "TensorSymmetry"], [236, 1, 1, "", "TensorType"], [236, 1, 1, "", "_TensorManager"], [236, 3, 1, "", "canon_bp"], [236, 3, 1, "", "riemann_cyclic"], [236, 3, 1, "", "riemann_cyclic_replace"], [236, 3, 1, "", "tensor_heads"], [236, 3, 1, "", "tensorsymmetry"]], "sympy.tensor.tensor.TensAdd": [[236, 2, 1, "", "canon_bp"], [236, 2, 1, "", "contract_metric"]], "sympy.tensor.tensor.TensExpr": [[236, 2, 1, "", "get_matrix"], [236, 2, 1, "", "replace_with_arrays"]], "sympy.tensor.tensor.TensMul": [[236, 2, 1, "", "canon_bp"], [236, 2, 1, "", "contract_metric"], [236, 2, 1, "", "get_free_indices"], [236, 2, 1, "", "get_indices"], [236, 2, 1, "", "perm2tensor"], [236, 2, 1, "", "sorted_components"], [236, 2, 1, "", "split"]], "sympy.tensor.tensor.TensorHead": [[236, 2, 1, "", "commutes_with"]], "sympy.tensor.tensor.TensorSymmetry": [[236, 2, 1, "", "direct_product"], [236, 2, 1, "", "fully_symmetric"], [236, 2, 1, "", "no_symmetry"], [236, 2, 1, "", "riemann"]], "sympy.tensor.tensor._TensorManager": [[236, 2, 1, "", "clear"], [236, 2, 1, "", "comm_i2symbol"], [236, 2, 1, "", "comm_symbols2i"], [236, 2, 1, "", "get_comm"], [236, 2, 1, "", "set_comm"], [236, 2, 1, "", "set_comms"]], "sympy.tensor.toperators": [[237, 1, 1, "", "PartialDerivative"]], "sympy.testing": [[239, 0, 0, "-", "pytest"], [240, 0, 0, "-", "randtest"], [241, 0, 0, "-", "runtests"]], "sympy.testing.pytest": [[239, 3, 1, "", "SKIP"], [239, 3, 1, "", "nocache_fail"], [239, 3, 1, "", "raises"], [239, 3, 1, "", "warns"], [239, 3, 1, "", "warns_deprecated_sympy"]], "sympy.testing.runtests": [[241, 1, 1, "", "PyTestReporter"], [241, 1, 1, "", "Reporter"], [241, 1, 1, "", "SymPyDocTestFinder"], [241, 1, 1, "", "SymPyDocTestRunner"], [241, 1, 1, "", "SymPyOutputChecker"], [241, 1, 1, "", "SymPyTestResults"], [241, 3, 1, "", "convert_to_native_paths"], [241, 3, 1, "", "doctest"], [241, 3, 1, "", "get_sympy_dir"], [241, 3, 1, "", "raise_on_deprecated"], [241, 3, 1, "", "run_all_tests"], [241, 3, 1, "", "run_in_subprocess_with_hash_randomization"], [241, 3, 1, "", "split_list"], [241, 3, 1, "", "sympytestfile"], [241, 3, 1, "", "test"]], "sympy.testing.runtests.PyTestReporter": [[241, 2, 1, "", "write"]], "sympy.testing.runtests.SymPyDocTestRunner": [[241, 2, 1, "", "run"]], "sympy.testing.runtests.SymPyOutputChecker": [[241, 2, 1, "", "check_output"]], "sympy.testing.runtests.SymPyTestResults": [[241, 5, 1, "", "attempted"], [241, 5, 1, "", "failed"]], "sympy.utilities": [[242, 0, 0, "-", "autowrap"], [243, 0, 0, "-", "codegen"], [244, 0, 0, "-", "decorator"], [245, 0, 0, "-", "enumerative"], [246, 0, 0, "-", "exceptions"], [248, 0, 0, "-", "iterables"], [249, 0, 0, "-", "lambdify"], [250, 0, 0, "-", "memoization"], [251, 0, 0, "-", "misc"], [252, 0, 0, "-", "pkgdata"], [253, 0, 0, "-", "source"], [254, 0, 0, "-", "timeutils"]], "sympy.utilities.autowrap": [[242, 1, 1, "", "CodeWrapper"], [242, 1, 1, "", "CythonCodeWrapper"], [242, 1, 1, "", "DummyWrapper"], [242, 1, 1, "", "F2PyCodeWrapper"], [242, 1, 1, "", "UfuncifyCodeWrapper"], [242, 3, 1, "", "autowrap"], [242, 3, 1, "", "binary_function"], [242, 3, 1, "", "ufuncify"]], "sympy.utilities.autowrap.CythonCodeWrapper": [[242, 2, 1, "", "dump_pyx"]], "sympy.utilities.autowrap.UfuncifyCodeWrapper": [[242, 2, 1, "", "dump_c"]], "sympy.utilities.codegen": [[243, 1, 1, "", "Argument"], [243, 1, 1, "", "CCodeGen"], [243, 1, 1, "", "CodeGen"], [243, 1, 1, "", "DataType"], [243, 1, 1, "", "FCodeGen"], [243, 1, 1, "", "JuliaCodeGen"], [243, 1, 1, "", "OctaveCodeGen"], [243, 1, 1, "", "OutputArgument"], [243, 1, 1, "", "Result"], [243, 1, 1, "", "Routine"], [243, 1, 1, "", "RustCodeGen"], [243, 3, 1, "", "codegen"], [243, 3, 1, "", "get_default_datatype"], [243, 3, 1, "", "make_routine"]], "sympy.utilities.codegen.CCodeGen": [[243, 2, 1, "", "dump_c"], [243, 2, 1, "", "dump_h"], [243, 2, 1, "", "get_prototype"]], "sympy.utilities.codegen.CodeGen": [[243, 2, 1, "", "dump_code"], [243, 2, 1, "", "routine"], [243, 2, 1, "", "write"]], "sympy.utilities.codegen.FCodeGen": [[243, 2, 1, "", "dump_f95"], [243, 2, 1, "", "dump_h"], [243, 2, 1, "", "get_interface"]], "sympy.utilities.codegen.JuliaCodeGen": [[243, 2, 1, "", "dump_jl"], [243, 2, 1, "", "routine"]], "sympy.utilities.codegen.OctaveCodeGen": [[243, 2, 1, "", "dump_m"], [243, 2, 1, "", "routine"]], "sympy.utilities.codegen.Routine": [[243, 4, 1, "", "result_variables"], [243, 4, 1, "", "variables"]], "sympy.utilities.codegen.RustCodeGen": [[243, 2, 1, "", "dump_rs"], [243, 2, 1, "", "get_prototype"], [243, 2, 1, "", "routine"]], "sympy.utilities.decorator": [[244, 3, 1, "", "conserve_mpmath_dps"], [244, 3, 1, "", "deprecated"], [244, 3, 1, "", "doctest_depends_on"], [244, 3, 1, "", "memoize_property"], [244, 1, 1, "", "no_attrs_in_subclass"], [244, 3, 1, "", "public"], [244, 3, 1, "", "threaded"], [244, 3, 1, "", "threaded_factory"], [244, 3, 1, "", "xthreaded"]], "sympy.utilities.enumerative": [[245, 1, 1, "", "MultisetPartitionTraverser"], [245, 3, 1, "", "factoring_visitor"], [245, 3, 1, "", "list_visitor"], [245, 3, 1, "", "multiset_partitions_taocp"]], "sympy.utilities.enumerative.MultisetPartitionTraverser": [[245, 2, 1, "", "count_partitions"], [245, 2, 1, "", "enum_all"], [245, 2, 1, "", "enum_large"], [245, 2, 1, "", "enum_range"], [245, 2, 1, "", "enum_small"]], "sympy.utilities.exceptions": [[246, 7, 1, "", "SymPyDeprecationWarning"], [246, 3, 1, "", "ignore_warnings"], [246, 3, 1, "", "sympy_deprecation_warning"]], "sympy.utilities.iterables": [[248, 1, 1, "", "NotIterable"], [248, 3, 1, "", "binary_partitions"], [248, 3, 1, "", "bracelets"], [248, 3, 1, "", "capture"], [248, 3, 1, "", "common_prefix"], [248, 3, 1, "", "common_suffix"], [248, 3, 1, "", "connected_components"], [248, 3, 1, "", "dict_merge"], [248, 3, 1, "", "filter_symbols"], [248, 3, 1, "", "flatten"], [248, 3, 1, "", "generate_bell"], [248, 3, 1, "", "generate_derangements"], [248, 3, 1, "", "generate_involutions"], [248, 3, 1, "", "generate_oriented_forest"], [248, 3, 1, "", "group"], [248, 3, 1, "", "has_dups"], [248, 3, 1, "", "has_variety"], [248, 3, 1, "", "ibin"], [248, 3, 1, "", "iproduct"], [248, 3, 1, "", "is_palindromic"], [248, 3, 1, "", "is_sequence"], [248, 3, 1, "", "iterable"], [248, 3, 1, "", "kbins"], [248, 3, 1, "", "least_rotation"], [248, 3, 1, "", "minlex"], [248, 3, 1, "", "multiset"], [248, 3, 1, "", "multiset_combinations"], [248, 3, 1, "", "multiset_derangements"], [248, 3, 1, "", "multiset_partitions"], [248, 3, 1, "", "multiset_permutations"], [248, 3, 1, "", "necklaces"], [248, 3, 1, "", "numbered_symbols"], [248, 3, 1, "", "ordered_partitions"], [248, 3, 1, "", "partitions"], [248, 3, 1, "", "permute_signs"], [248, 3, 1, "", "postfixes"], [248, 3, 1, "", "prefixes"], [248, 3, 1, "", "random_derangement"], [248, 3, 1, "", "reshape"], [248, 3, 1, "", "rotate_left"], [248, 3, 1, "", "rotate_right"], [248, 3, 1, "", "rotations"], [248, 3, 1, "", "roundrobin"], [248, 3, 1, "", "runs"], [248, 3, 1, "", "sift"], [248, 3, 1, "", "signed_permutations"], [248, 3, 1, "", "strongly_connected_components"], [248, 3, 1, "", "subsets"], [248, 3, 1, "", "take"], [248, 3, 1, "", "topological_sort"], [248, 3, 1, "", "unflatten"], [248, 3, 1, "", "uniq"], [248, 3, 1, "", "variations"]], "sympy.utilities.lambdify": [[249, 3, 1, "", "implemented_function"], [249, 3, 1, "", "lambdastr"], [249, 3, 1, "", "lambdify"]], "sympy.utilities.memoization": [[250, 3, 1, "", "assoc_recurrence_memo"], [250, 3, 1, "", "recurrence_memo"]], "sympy.utilities.misc": [[251, 3, 1, "", "as_int"], [251, 3, 1, "", "debug"], [251, 3, 1, "", "debug_decorator"], [251, 3, 1, "", "filldedent"], [251, 3, 1, "", "find_executable"], [251, 3, 1, "", "func_name"], [251, 3, 1, "", "ordinal"], [251, 3, 1, "", "rawlines"], [251, 3, 1, "", "replace"], [251, 3, 1, "", "strlines"], [251, 3, 1, "", "translate"]], "sympy.utilities.pkgdata": [[252, 3, 1, "", "get_resource"]], "sympy.utilities.source": [[253, 3, 1, "", "get_class"], [253, 3, 1, "", "get_mod_func"], [253, 3, 1, "", "source"]], "sympy.utilities.timeutils": [[254, 3, 1, "", "timed"]], "sympy.vector.coordsysrect": [[255, 1, 1, "", "CoordSys3D"]], "sympy.vector.coordsysrect.CoordSys3D": [[255, 2, 1, "", "__init__"], [255, 2, 1, "", "create_new"], [255, 2, 1, "", "locate_new"], [255, 2, 1, "", "orient_new"], [255, 2, 1, "", "orient_new_axis"], [255, 2, 1, "", "orient_new_body"], [255, 2, 1, "", "orient_new_quaternion"], [255, 2, 1, "", "orient_new_space"], [255, 2, 1, "", "position_wrt"], [255, 2, 1, "", "rotation_matrix"], [255, 2, 1, "", "scalar_map"]], "sympy.vector": [[258, 3, 1, "", "curl"], [258, 3, 1, "", "divergence"], [258, 3, 1, "", "express"], [258, 3, 1, "", "gradient"], [258, 3, 1, "", "is_conservative"], [258, 3, 1, "", "is_solenoidal"], [258, 3, 1, "", "matrix_to_vector"], [258, 3, 1, "", "scalar_potential"], [258, 3, 1, "", "scalar_potential_difference"]], "sympy.vector.deloperator": [[255, 1, 1, "", "Del"]], "sympy.vector.deloperator.Del": [[255, 2, 1, "", "cross"], [255, 2, 1, "", "dot"], [255, 2, 1, "", "gradient"]], "sympy.vector.dyadic": [[255, 1, 1, "", "Dyadic"]], "sympy.vector.dyadic.Dyadic": [[255, 4, 1, "", "components"], [255, 2, 1, "", "cross"], [255, 2, 1, "", "dot"], [255, 2, 1, "", "to_matrix"]], "sympy.vector.implicitregion": [[255, 1, 1, "", "ImplicitRegion"]], "sympy.vector.implicitregion.ImplicitRegion": [[255, 2, 1, "", "multiplicity"], [255, 2, 1, "", "rational_parametrization"], [255, 2, 1, "", "regular_point"], [255, 2, 1, "", "singular_points"]], "sympy.vector.integrals": [[255, 1, 1, "", "ParametricIntegral"], [258, 3, 1, "", "vector_integrate"]], "sympy.vector.orienters": [[257, 1, 1, "", "AxisOrienter"], [257, 1, 1, "", "BodyOrienter"], [257, 1, 1, "", "Orienter"], [257, 1, 1, "", "QuaternionOrienter"], [257, 1, 1, "", "SpaceOrienter"]], "sympy.vector.orienters.AxisOrienter": [[257, 2, 1, "", "__init__"], [257, 2, 1, "", "rotation_matrix"]], "sympy.vector.orienters.BodyOrienter": [[257, 2, 1, "", "__init__"]], "sympy.vector.orienters.Orienter": [[257, 2, 1, "", "rotation_matrix"]], "sympy.vector.orienters.QuaternionOrienter": [[257, 2, 1, "", "__init__"]], "sympy.vector.orienters.SpaceOrienter": [[257, 2, 1, "", "__init__"]], "sympy.vector.parametricregion": [[255, 1, 1, "", "ParametricRegion"]], "sympy.vector.vector": [[255, 1, 1, "", "Vector"]], "sympy.vector.vector.Vector": [[255, 4, 1, "", "components"], [255, 2, 1, "", "cross"], [255, 2, 1, "", "dot"], [255, 2, 1, "", "magnitude"], [255, 2, 1, "", "normalize"], [255, 2, 1, "", "outer"], [255, 2, 1, "", "projection"], [255, 2, 1, "", "separate"], [255, 2, 1, "", "to_matrix"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:property", "5": "py:attribute", "6": "py:data", "7": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "property", "Python property"], "5": ["py", "attribute", "Python attribute"], "6": ["py", "data", "Python data"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"cite": 0, "sympi": [0, 1, 5, 6, 10, 12, 15, 16, 17, 24, 26, 30, 32, 33, 43, 84, 103, 142, 191, 200, 255, 258, 259, 262, 276, 278, 281], "build": [1, 3], "document": [1, 3, 4, 6, 7, 32], "requir": [1, 4], "depend": [1, 3, 139, 200, 260], "docker": 1, "debian": 1, "ubuntu": 1, "fedora": 1, "mac": 1, "window": [1, 196], "10": [1, 10, 105], "doc": [1, 201], "local": 1, "instal": [1, 32, 33, 103, 285], "logo": 1, "view": 1, "auto": 1, "rebuild": 1, "live": 1, "server": 1, "pdf": 1, "debug": 2, "hard": 3, "option": [3, 26, 29, 30, 31, 203], "recommend": [3, 7], "interact": [3, 89, 196], "us": [3, 7, 10, 16, 22, 24, 25, 26, 27, 28, 29, 30, 31, 43, 64, 85, 86, 102, 105, 134, 139, 140, 194, 196, 207, 229, 260], "print": [3, 10, 20, 43, 89, 115, 123, 184, 190, 210, 286], "pars": [3, 31, 103], "logic": [3, 19, 91, 266, 269], "plot": [3, 10, 109, 155, 196], "lambdifi": [3, 10, 102, 249, 276], "code": [3, 4, 5, 7, 10, 43, 45, 115, 194, 210, 253, 266, 268], "gener": [3, 6, 7, 43, 51, 53, 200, 205, 229, 261, 266, 268], "autowrap": [3, 43, 242], "printer": [3, 43, 210, 286], "test": [3, 5, 10, 58, 91, 209, 238, 240, 241, 283], "onli": [3, 24, 29, 229], "statist": 3, "symengin": 3, "backend": [3, 196], "experiment": [3, 103], "rubi": 3, "integr": [3, 10, 29, 65, 69, 83, 85, 86, 87, 88, 115, 198, 205, 265, 277], "sage": 3, "develop": [3, 5, 61], "get": [3, 5, 12, 22], "sourc": [3, 10, 12, 253], "run": [3, 5, 33, 241], "benchmark": 3, "deprec": [4, 10], "polici": 4, "what": [4, 139, 199, 200, 229, 281, 284], "i": [4, 12, 28, 29, 86, 102, 139, 199, 210, 229, 281], "try": 4, "avoid": 4, "backward": 4, "incompat": 4, "chang": [4, 10], "first": [4, 10], "place": 4, "when": [4, 31, 86], "doe": [4, 12, 229], "public": 4, "api": [4, 32, 82, 86, 88, 111, 118, 188, 229, 242, 243, 256, 266], "Not": [4, 22, 24, 25, 26, 28, 29, 30, 31], "The": [4, 10, 18, 20, 44, 51, 86, 139, 180, 192, 205, 217, 220, 261, 262, 281], "purpos": 4, "technic": 4, "possibl": [4, 26, 283], "how": [4, 21, 32, 86, 194, 229], "long": 4, "should": [4, 102], "last": 4, "checklist": 4, "ad": 4, "releas": 4, "note": [4, 20, 61, 73, 139, 217, 219, 279, 288], "entri": [4, 97], "environ": 5, "setup": 5, "git": [5, 33], "virtual": 5, "docstr": [6, 7, 104, 107, 116, 117, 119, 120, 121, 122, 123, 124, 186, 187, 189, 190, 255, 257, 258], "style": [6, 7], "guid": [6, 7, 21, 32, 135, 192, 263], "guidelin": [6, 7], "format": [6, 7, 10, 31], "section": 6, "1": [6, 10, 29, 86, 105, 125, 139, 151], "singl": [6, 12, 14, 24], "sentenc": 6, "summari": 6, "2": [6, 10, 29, 86, 105, 125, 139], "explan": [6, 13, 32], "3": [6, 10, 88, 105, 125, 176], "exampl": [6, 20, 22, 24, 25, 28, 30, 34, 61, 73, 85, 88, 101, 105, 112, 126, 139, 143, 147, 178, 180, 194, 209, 210, 217, 220, 230, 231, 232, 235, 261, 281, 287], "4": [6, 10, 105], "paramet": [6, 25, 220, 229], "5": [6, 10, 105], "see": [6, 61, 248, 261], "also": [6, 61, 248], "6": [6, 10, 105], "refer": [6, 18, 32, 35, 42, 60, 61, 63, 73, 79, 86, 88, 94, 95, 97, 99, 101, 103, 118, 141, 147, 150, 180, 192, 194, 195, 196, 197, 201, 203, 205, 206, 207, 217, 219, 220, 223, 229, 242, 243, 263, 266], "sampl": [6, 10], "class": [6, 15, 42, 43, 60, 63, 95, 97, 99, 101, 139, 185, 196, 205, 210, 223, 231, 255, 257], "ar": [6, 24, 29, 194, 200, 229], "mathemat": [6, 12, 22, 142], "function": [6, 10, 12, 20, 22, 24, 26, 28, 29, 31, 43, 51, 60, 61, 67, 68, 69, 79, 80, 83, 84, 86, 91, 97, 101, 103, 105, 115, 140, 162, 165, 186, 187, 191, 196, 198, 200, 201, 206, 209, 210, 220, 223, 226, 227, 231, 258, 262, 286, 287], "best": [6, 7, 20], "practic": [6, 7, 20], "write": [6, 7, 20], "import": [6, 10], "sphinx": 6, "cross": 6, "referenc": 6, "type": [7, 14, 24, 43, 69, 186, 229, 230], "narr": 7, "markdown": 7, "prefer": [7, 31], "math": [7, 43], "latex": [7, 103, 286], "head": 7, "spell": 7, "punctuat": 7, "capit": 7, "tone": 7, "contribut": [8, 9, 32, 207], "make": [9, 26, 31], "list": [10, 12, 14, 22, 24], "activ": 10, "silenc": 10, "warn": [10, 246], "version": 10, "12": 10, "new": [10, 260], "joint": [10, 119, 136, 230], "coordin": [10, 115, 129, 139, 196, 259, 260, 262, 264], "intermedi": 10, "frame": [10, 194], "attach": 10, "point": [10, 20, 65, 76, 115, 184, 193, 259], "argument": [10, 12, 229], "11": [10, 105], "mathematica": [10, 210], "parser": [10, 125], "redund": 10, "static": 10, "method": [10, 16, 20, 27, 33, 120, 129, 132, 133, 134, 137, 138, 139, 210, 227, 229, 234, 260, 283], "carmichael": 10, "check": [10, 186], "hadamardproduct": 10, "matadd": 10, "matmul": 10, "some": [10, 29, 142, 229], "travers": [10, 61], "have": [10, 26, 30, 209], "been": 10, "move": [10, 220], "core": [10, 61, 94], "trace": 10, "compat": [10, 232], "submodul": [10, 73], "9": [10, 105], "expr_free_symbol": 10, "stat": [10, 230], "numsampl": 10, "n": [10, 231, 232], "poli": [10, 199, 200, 201, 208], "solver": [10, 29, 208, 224, 225, 226, 228, 229, 288], "rawmatrix": 10, "non": 10, "expr": [10, 61], "object": [10, 15, 235], "matrix": [10, 27, 39, 94, 97, 98, 139, 230, 283], "get_seg": 10, "attribut": [10, 44, 51], "mdft": 10, "physic": [10, 112, 115, 126, 136, 137, 138, 139, 140, 141, 142, 143, 182, 184, 188, 191, 192, 193, 194, 266, 272], "matric": [10, 16, 27, 92, 93, 94, 95, 96, 97, 99, 112, 114, 232, 266, 270, 283], "privat": 10, "sparsematrix": [10, 99], "_smat": 10, "densematrix": 10, "_mat": 10, "laplace_transform": 10, "nocond": 10, "fals": 10, "8": [10, 105], "theanocod": 10, "assumpt": [10, 15, 18, 20, 38, 61], "handler": [10, 18], "askhandl": 10, "relat": [10, 12, 14, 18, 24, 61, 69, 91, 191, 194, 262], "7": [10, 105], "call": [10, 24, 31], "stochasticprocess": 10, "distribut": [10, 203, 230], "randomindexedsymbol": 10, "discretemarkovchain": 10, "absorbing_probabilit": 10, "util": [10, 43, 58, 59, 78, 97, 148, 205, 228, 247, 254, 266, 274], "misc": [10, 38], "find_execut": 10, "mutabl": 10, "diffgeom": 10, "unicod": [10, 286], "pretti": [10, 210, 286], "stringpict": 10, "prettyform": 10, "pretty_symbologi": 10, "xstr": 10, "pass": 10, "set": [10, 15, 26, 29, 30, 39, 73, 194, 218, 229, 286], "oper": [10, 12, 83, 97, 153, 162, 164, 165, 186, 191, 194, 220, 231, 237, 259, 261, 262, 276, 283], "longer": 10, "accept": 10, "arg": [10, 282], "variou": [10, 209], "randtest": 10, "mix": 10, "polynomi": [10, 22, 69, 83, 198, 200, 201, 202, 203, 205, 206, 207, 209, 228, 287], "express": [10, 12, 22, 25, 26, 28, 43, 73, 80, 83, 91, 94, 103, 117, 200, 209, 232, 260, 276, 282], "binari": 10, "print_cycl": 10, "flag": 10, "combinator": [10, 48], "permut": [10, 52, 53], "string": [10, 18, 31, 276], "fallback": 10, "sympifi": [10, 61], "creat": [10, 12, 20, 28, 97], "an": [10, 26, 28, 29, 73, 125, 180, 220, 229, 282], "indefinit": 10, "eq": [10, 26], "tensor": [10, 57, 69, 174, 233, 236, 237], "fun_ev": 10, "__call__": 10, "tensortyp": 10, "dummy_fmt": 10, "tensorindextyp": 10, "metric": 10, "get_kronecker_delta": 10, "get_epsilon": 10, "tensorsymmetri": 10, "tensorhead": 10, "unit": [10, 179, 180, 181, 183], "quantiti": [10, 178, 180, 182, 260], "is_emptyset": 10, "productset": 10, "iter": [10, 218, 248], "set_potential_energi": 10, "mechan": [10, 18, 106, 115, 118, 126, 135, 136, 137, 138, 139, 140, 141, 142, 143, 162, 230], "condit": [10, 29, 86, 218], "conditionset": 10, "max_degre": 10, "get_upper_degre": 10, "properti": [10, 18, 197], "multivariate_result": 10, "dixonresult": 10, "rh": 10, "default": 10, "0": 10, "tupl": [10, 12, 14, 24, 206], "lambda": 10, "evalu": [10, 12, 20, 22, 65, 83, 142, 282], "differentiate_finit": 10, "data": 10, "clear_cach": 10, "clear_subproduct": 10, "keyword": [10, 12], "is_diagonaliz": 10, "row": [10, 283], "col": 10, "jordan_block": 10, "dimens": [10, 73, 177, 180], "scale_factor": 10, "quanit": 10, "classof": 10, "a2idx": 10, "from": [10, 12, 25, 26, 27, 31, 209, 232], "dot": [10, 286], "product": [10, 64, 163, 174, 231, 261], "column": [10, 283], "vector": [10, 27, 51, 135, 184, 186, 188, 191, 192, 193, 194, 203, 255, 256, 258, 259, 260, 262, 263, 264, 265], "geometri": [10, 63, 73, 197], "line3d": 10, "equat": [10, 22, 23, 25, 26, 27, 28, 29, 30, 31, 137, 138, 139, 178, 198, 223, 228, 229, 288], "need": [10, 180], "k": [10, 201], "modul": [10, 110, 145, 184, 192, 197, 198, 199, 200, 203, 205, 206, 223, 226, 227, 229, 242], "arrai": [10, 231, 232], "conv_": 10, "renam": 10, "from_": 10, "glossari": 11, "gotcha": [12, 18, 125, 279], "pitfal": 12, "introduct": [12, 16, 35, 42, 43, 44, 51, 63, 73, 91, 125, 142, 180, 191, 193, 196, 197, 198, 205, 209, 264, 281], "equal": [12, 25, 26, 279], "sign": [12, 279], "doubl": 12, "variabl": [12, 24, 29, 31, 196, 230, 260], "assign": 12, "between": [12, 18, 182, 200], "symbol": [12, 18, 19, 20, 24, 25, 27, 61, 80, 139, 143, 195, 200, 206, 209, 229, 279, 281], "python": [12, 43], "number": [12, 39, 47, 61, 64, 65, 86, 101, 200, 205, 209, 266, 271], "v": [12, 19, 200], "float": [12, 65], "ration": [12, 200, 201, 206, 209, 212, 226, 287], "immut": [12, 95], "invers": [12, 20, 67, 86], "trig": 12, "sqrt": 12, "special": [12, 17, 43, 69, 206, 218, 287], "dictionari": [12, 14, 22, 30], "help": 12, "within": 12, "solv": [14, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 105, 198, 205, 228, 229, 288], "output": [14, 115, 229], "empti": 14, "Of": 14, "valu": [14, 19, 31], "boolean": [14, 19, 91], "classif": 15, "kind": [15, 61], "func": [15, 282], "finit": [16, 41, 44, 197, 200, 203, 205, 209, 220, 230, 277], "differ": [16, 18, 41, 142, 200, 260, 277], "approxim": [16, 22, 43], "deriv": [16, 29, 194, 231, 262, 277], "A": [16, 127, 128, 131, 132, 133, 134, 139, 281, 288], "direct": [16, 262], "topic": [17, 115, 184, 266, 273], "old": [18, 200], "system": [18, 24, 28, 30, 109, 130, 143, 177, 179, 180, 183, 226, 228, 259, 260, 262, 264], "appli": [18, 86, 220], "input": [18, 229], "predic": [18, 38, 39], "abov": 18, "definit": [18, 20, 79], "implic": 18, "interpret": 18, "other": [18, 20, 33, 80, 191, 260], "is_": 18, "implement": [18, 86, 191, 210, 220, 242, 243, 259, 262], "limit": [18, 24, 25, 85, 125, 215, 217, 277], "combin": [18, 83], "fuzzi": 19, "three": [19, 73], "bool": 19, "custom": [20, 196, 210], "easi": 20, "case": [20, 229], "fulli": 20, "defin": [20, 29], "automat": [20, 209], "eval": 20, "remind": 20, "kei": [20, 142, 282], "numer": [20, 22, 28, 29, 31, 65, 83, 88, 102, 115, 142], "evalf": [20, 61, 102, 276], "rewrit": [20, 43, 211, 287], "simplif": [20, 65, 91, 219, 287], "doit": 20, "expand": [20, 209, 211, 287], "differenti": [20, 29, 63, 83, 115, 228, 229, 288], "as_real_imag": 20, "miscellan": [20, 67, 73, 251], "_eval_": 20, "complet": [20, 22, 125], "versin": 20, "divid": 20, "fuse": 20, "multipli": 20, "add": [20, 61], "fma": 20, "addit": [20, 83], "tip": [20, 276, 277, 279, 282, 283], "find": [22, 28, 205, 206], "root": [22, 28, 206], "algebra": [22, 24, 25, 26, 27, 29, 30, 35, 90, 97, 150, 194, 197, 200, 205, 209, 228, 288], "altern": [22, 24, 25, 26, 27, 28, 29, 30, 194], "consid": [22, 24, 25, 26, 27, 28, 29, 30], "guidanc": [22, 24, 25, 26, 27, 28, 29, 30, 31], "solut": [22, 25, 26, 27, 28, 29, 30, 31, 162, 229, 261], "without": [22, 29], "multipl": [22, 29, 83, 194, 205], "With": [22, 25, 26, 27, 28, 29, 30, 31], "factor": [22, 198, 203, 209, 287], "exact": [22, 31], "real_root": 22, "nroot": 22, "complex": [22, 28, 67, 200], "result": [22, 24, 25, 26, 27, 28, 29, 30, 209], "all_root": 22, "tradeoff": 22, "speed": [22, 26, 27, 30, 31, 115, 139], "all": [22, 24, 25, 26, 28, 29, 30], "perhap": 22, "implicitli": [22, 29], "crootof": 22, "repres": [22, 26, 31, 86, 170, 200, 205], "can": [22, 24, 25, 26, 28, 29, 30, 31], "Be": [22, 24, 25, 26, 27, 28, 29], "No": [22, 25, 26, 27, 29], "close": [22, 26, 29, 30, 31], "form": [22, 26, 29, 30, 31, 91, 98, 139, 232], "report": [22, 24, 25, 26, 27, 28, 29, 30, 31], "bug": [22, 24, 25, 26, 27, 28, 29, 30, 31, 88], "reduc": [24, 209], "One": [24, 28, 29], "inequ": [24, 225, 228, 229], "includ": [24, 29, 31], "extract": [24, 25, 27, 29], "decompos": 24, "reduct": [24, 220], "interest": [24, 281], "per": 24, "That": [24, 25, 26, 28, 30, 31], "return": [24, 29, 229], "period": 24, "which": [24, 26, 30, 102, 210], "cannot": [24, 26, 29, 30], "satisfi": 24, "analyt": [24, 162], "diophantin": [25, 223, 228, 229], "zero": [25, 26, 31, 109, 203, 209, 283], "specifi": [25, 29, 196], "order": [25, 39, 206, 217, 220], "work": [25, 27, 29, 73, 209], "verifi": [25, 265], "programmat": [25, 26], "your": 26, "Into": [26, 28, 30], "put": 26, "restrict": 26, "domain": [26, 198, 200, 201, 206, 209, 229], "explicitli": [26, 29], "infinit": [26, 229], "substitut": [26, 28, 115, 184, 276], "solveset": [26, 229], "necessarili": 26, "interrog": 26, "up": [26, 27, 30, 31, 286], "usual": 27, "must": 27, "squar": [27, 198], "sever": 27, "same": 27, "element": [27, 139, 200, 205], "real": [28, 200], "ensur": [28, 31, 229], "found": 28, "given": [28, 30], "interv": [28, 196], "increas": 28, "precis": 28, "scipi": [28, 29], "ordinari": [29, 228, 229], "od": [29, 226, 228, 229], "Its": 29, "independ": 29, "initi": 29, "boundari": 29, "bewar": 29, "copi": 29, "past": 29, "pair": 29, "If": 29, "There": 29, "arbitrari": 29, "constant": [29, 157, 180], "hint": [29, 226, 227], "unevalu": 29, "select": 29, "specif": [29, 43], "linear": [30, 83, 97, 115, 121, 139, 140, 180, 209], "nonlinear": 30, "you": 31, "might": 31, "consist": 31, "ani": [31, 229], "denomin": 31, "do": [31, 229], "simplifi": [31, 43, 203, 221, 222, 287], "welcom": 32, "": [32, 120, 129, 132, 133, 134, 137, 138, 139, 160, 171, 209, 219, 228, 229, 260, 265, 284], "tutori": [32, 223, 275, 280], "anaconda": 33, "mpmath": 33, "question": 33, "abc": 34, "caveat": [34, 103], "quaternion": 35, "ask": 36, "assum": 37, "queri": 38, "content": [38, 48, 68, 81, 87, 202, 214, 224, 233], "perform": 38, "improv": [38, 125], "common": [39, 92, 115, 184, 209, 210, 211], "calculu": [39, 41, 194, 277], "theori": [39, 42, 101, 266, 271], "refin": 40, "singular": [41, 105], "weight": 41, "categori": 42, "base": [42, 63, 97, 197, 198, 209, 216, 229], "diagram": 42, "draw": 42, "codegen": [43, 243], "tool": [43, 100], "abstract": [43, 106, 110, 112, 135, 145, 162, 192, 201], "syntax": 43, "tree": [43, 200, 210, 282], "ast": [43, 125], "predefin": 43, "node": 43, "c": [43, 210], "cfunction": 43, "cnode": 43, "cxxnode": 43, "fortran": [43, 210], "fnode": 43, "algorithm": [43, 44, 160, 171, 203, 206, 212, 217, 220], "pyutil": 43, "cutil": 43, "futil": 43, "present": [44, 51], "group": [44, 46, 49, 51, 52, 180], "overview": [44, 51, 86], "facil": 44, "construct": [44, 51, 232], "free": [44, 198], "word": [44, 51], "coset": 44, "enumer": [44, 66], "todd": 44, "coxet": 44, "cosett": 44, "compress": 44, "standard": 44, "subgroup": 44, "index": [44, 51, 232, 235], "low": 44, "reidemeist": 44, "schreier": 44, "bibliographi": [44, 51], "grai": 45, "constructor": [46, 206, 283], "nilpot": 47, "abelian": 47, "cyclic": 47, "name": 49, "partit": [50, 248], "polycycl": 51, "polycyclicgroup": 51, "collector": 51, "comput": [51, 86, 102, 162, 209, 281], "minim": [51, 205], "uncollect": 51, "subword": 51, "collect": [51, 211, 287], "expon": [51, 209], "depth": [51, 73], "lead": 51, "polyhedron": 54, "prufer": 55, "sequenc": [55, 83, 203, 206, 215, 216], "subset": [56, 64], "canonic": 57, "concret": 60, "hypergeometr": [60, 69, 80, 83, 212, 220], "term": [60, 209, 211, 217], "cach": 61, "basic": [61, 65, 97, 186, 198, 200, 206, 218, 259, 266, 267, 276, 283], "singleton": [61, 216, 218], "power": [61, 212, 218, 281, 287], "mul": 61, "mod": 61, "multidimension": 61, "contain": 61, "exprtool": 61, "sort": 61, "random": [61, 230], "cryptographi": 62, "discret": [64, 230], "transform": [64, 86, 88, 103, 260], "fast": 64, "fourier": [64, 213], "theoret": 64, "walsh": 64, "hadamard": 64, "m\u00f6biu": 64, "convolut": 64, "cover": 64, "intersect": [64, 73], "accuraci": 65, "error": [65, 69], "handl": [65, 229], "sum": 65, "combinatori": 66, "elementari": [67, 197, 216, 218], "trigonometr": [67, 69, 219, 287], "hyperbol": 67, "integ": [67, 200], "exponenti": [67, 69, 287], "piecewis": 67, "dirac": 69, "delta": 69, "discontinu": 69, "gamma": [69, 112], "beta": 69, "fresnel": 69, "logarithm": [69, 287], "bessel": 69, "airi": 69, "b": 69, "spline": 69, "riemann": 69, "zeta": 69, "ellipt": 69, "mathieu": 69, "orthogon": [69, 206, 262], "jacobi": 69, "gegenbau": 69, "chebyshev": 69, "legendr": 69, "hermit": 69, "laguerr": 69, "spheric": 69, "harmon": [69, 151, 176], "curv": 70, "ellips": 71, "entiti": [72, 73, 196], "avail": 73, "usag": [73, 125, 143, 200, 261], "median": 73, "pappu": 73, "hexagon": 73, "theorem": [73, 86, 265], "futur": [73, 115, 125, 184], "truth": [73, 91], "beyond": 73, "visual": [73, 142], "line": 74, "plane": [75, 86], "polygon": [77, 88], "about": [79, 229, 260, 288], "holonom": [79, 80, 81, 83, 84, 130], "convert": [80, 83, 200, 276], "represent": [80, 84, 180, 194, 200], "meijer": [80, 83, 86, 220], "g": [80, 83, 86, 220], "intern": [82, 86, 88, 200, 203, 205, 223], "composit": 83, "seri": [83, 196, 207, 212, 213, 214, 217, 277], "expans": [83, 217, 220, 277], "current": 85, "polar": [86, 147], "branch": 86, "argand": 86, "tabl": [86, 91, 220], "lookup": 86, "mellin": 86, "converg": 86, "laplac": 86, "thi": [86, 229], "valid": 86, "exist": 86, "formula": [86, 220], "todo": 88, "over": [88, 209, 218], "polytop": 88, "For": 88, "2d": 88, "polyhedra": 88, "session": 89, "lie": [90, 226], "equival": [91, 142], "manipul": [91, 97, 117, 202, 203, 206, 207, 229, 282], "infer": 91, "dens": [93, 200, 201, 203], "block": 94, "immutablematrix": 95, "except": [97, 103, 203, 246], "numpi": 97, "normal": [98, 209], "spars": [99, 100, 200, 201, 203], "immutablesparsematrix": 99, "ntheori": 101, "ecm": 101, "q": 101, "sub": 102, "ufuncifi": 102, "aesara": [102, 210], "so": 102, "mathrm": [103, 286], "runtim": 103, "beam": [104, 105, 106], "bend": 105, "problem": [105, 205, 261], "continuum": 106, "truss": [106, 107], "control": [108, 109, 110, 111, 196], "pole": 109, "bode": 109, "impuls": 109, "respons": [109, 210], "step": [109, 229], "ramp": 109, "lti": 111, "high": 112, "energi": [112, 140], "hydrogen": 113, "wavefunct": 113, "potenti": [115, 139, 140, 184, 191, 262], "issu": [115, 125, 139, 184, 283], "advanc": [115, 184, 209, 282, 283], "featur": [115, 184, 278], "choic": 115, "acceler": [115, 184, 193, 217], "interfac": [115, 184, 196, 230], "bodi": [116, 140, 265], "framework": [119, 136], "kane": [120, 129, 132, 133, 137, 139], "lagrang": [120, 129, 134, 138, 139], "mass": [122, 140, 265], "inertia": [122, 140, 184], "particl": [122, 140, 166], "rigidbodi": 122, "mechanics_print": 123, "mprint": 123, "mpprint": 123, "mlatex": 123, "symbolicsystem": [124, 143], "autolev": [125, 142], "dynam": 125, "onlin": 125, "fix": 125, "switch": 125, "bicycl": 127, "four": 128, "bar": 128, "linkag": 128, "nonminim": 129, "pendulum": 129, "multi": 130, "degre": 130, "freedom": 130, "roll": [131, 132, 133, 134], "disc": [131, 132, 133, 134], "constraint": 133, "forc": 133, "classic": [135, 203], "jointsmethod": 136, "structur": [137, 138, 180, 223], "background": 139, "directli": [139, 260], "new_method": 139, "kwarg": 139, "a_and_b": 139, "true": 139, "slow": 139, "ha": 139, "nan": 139, "zoo": 139, "oo": 139, "further": [139, 279], "rigid": 140, "dyadic": [140, 184, 259, 260], "momentum": 140, "angular": [140, 193], "momenta": 140, "kinet": 140, "lagrangian": 140, "user": [142, 223, 226, 227], "rough": 142, "link": 142, "gaussian": [144, 200, 201, 209], "optic": [144, 145], "medium": 146, "wave": 149, "pauli": 150, "quantum": [151, 162, 176], "oscil": [151, 176], "d": [151, 176], "anticommut": 152, "cartesian": 153, "state": [153, 162, 165, 173], "clebsch": 154, "gordan": 154, "coeffici": [154, 203], "circuit": 155, "commut": [156, 197], "dagger": 158, "gate": 159, "grover": 160, "hilbert": 161, "space": [161, 180, 220], "inner": 163, "helper": [165, 210], "box": 166, "qappli": 167, "qft": 168, "qubit": 169, "shor": 171, "spin": 172, "second": 175, "quantiz": 175, "dimension": 178, "analysi": 178, "philosophi": 180, "behind": 180, "literatur": [180, 204, 209], "prefix": 181, "convers": 182, "referencefram": [184, 194], "dynamicsymbol": 184, "essenti": [185, 187, 255, 258], "field": [186, 191, 200, 203, 205, 209, 262, 264], "kinemat": [189, 193], "kinematic_equ": 189, "scalar": [191, 262, 264], "curl": [191, 262], "diverg": [191, 262, 265], "gradient": [191, 262], "conserv": [191, 262], "solenoid": [191, 262], "veloc": 193, "basi": [194, 203, 205], "wigner": 195, "credit": 195, "copyright": 195, "author": 195, "plotgrid": 196, "pyglet": 196, "mode": 196, "color": 196, "geometr": 196, "ascii": [196, 286], "art": 196, "agca": 197, "ring": [197, 200, 201], "ideal": 197, "homomorph": [197, 205], "syzygi": 197, "extens": [197, 209], "concept": 198, "divis": 198, "factori": 198, "euclidean": 198, "gcd": [198, 203, 209], "lcm": 198, "groebner": [198, 203], "introduc": [199, 200], "domainmatrix": 199, "dup": 200, "dmp": 200, "polyr": 200, "polynomialr": 200, "choos": 200, "unifi": 200, "gf": 201, "p": [201, 205], "zz": 201, "qq": 201, "mpq": 201, "zz_i": 201, "qq_i": 201, "rr": 201, "cc": 201, "x": 201, "ex": 201, "quotient": 201, "level": 203, "multivari": [203, 209], "univari": [203, 209], "remaind": 203, "subresult": 203, "configur": 203, "modular": 203, "undocu": 203, "main": 205, "prime": 205, "decomposit": [205, 206, 209], "adic": 205, "valuat": 205, "subfield": 205, "As": 205, "arithmet": 205, "extra": 206, "monomi": 206, "encod": 206, "formal": [206, 212], "appel": 206, "partial": [206, 209, 228, 229], "fraction": [206, 209, 287], "dispers": 206, "rs_seri": 207, "wester": 209, "articl": 209, "simpl": 209, "support": 209, "back": 209, "cyclotom": 209, "gr\u00f6bner": 209, "mistak": 210, "prettyprint": 210, "rcodeprint": 210, "smt": 210, "lib": 210, "mapl": 210, "javascript": 210, "julia": 210, "octav": 210, "matlab": 210, "rust": 210, "gtk": 210, "lambdaprint": 210, "latexprint": 210, "mathmlprint": 210, "pythoncodeprint": 210, "pythonprint": 210, "srepr": [210, 286], "strprinter": 210, "preview": 210, "codeprint": 210, "preced": 210, "dotprint": 210, "subexpress": 211, "detect": 211, "compound": [216, 218, 230], "recurs": [216, 282], "gruntz": 217, "more": [217, 260, 281], "intuit": 217, "residu": 217, "setkind": 218, "hongguang": 219, "fu": 219, "rule": [219, 261], "notat": 220, "increment": 220, "decrement": 220, "indic": 220, "around": 220, "loos": 220, "end": 220, "confluenc": 220, "extend": 220, "heurist": 226, "riccati": 226, "inform": [226, 227], "pde": [227, 228, 229], "deutil": 228, "recurr": 228, "de": [228, 229], "wrong": 229, "why": [229, 281], "we": 229, "emploi": 229, "search": 229, "deal": 229, "where": 229, "known": 229, "plan": 229, "transolv": 229, "continu": [230, 287], "stochast": 230, "process": 230, "dim": [231, 232], "contract": 231, "diagon": [231, 283], "explicit": 232, "pytest": 239, "randomis": 240, "detail": [242, 243, 259], "routin": 243, "decor": 244, "enum": 245, "variat": 248, "memoiz": 250, "pkgdata": 252, "inspect": 253, "time": 254, "orient": [257, 260], "locat": 260, "coordsys3d": 260, "orient_new": 260, "AND": 260, "quadrilater": 261, "third": 261, "del": [261, 262], "curvilinear": 262, "applic": 265, "calcul": 265, "perimet": 265, "surfac": 265, "area": 265, "volum": 265, "flux": 265, "stoke": 265, "introductori": [275, 280], "quick": [276, 277, 279, 282, 283], "two": 279, "final": 279, "read": 279, "understand": 282, "through": 282, "invari": 282, "walk": 282, "prevent": 282, "shape": 283, "access": 283, "delet": 283, "insert": 283, "determin": 283, "rref": 283, "nullspac": 283, "columnspac": 283, "eigenvalu": 283, "eigenvector": 283, "next": 284, "preliminari": 285, "exercis": 285, "str": 286, "mathml": 286, "cancel": 287, "apart": 287, "trigsimp": 287, "expand_trig": 287, "powsimp": 287, "expand_power_exp": 287, "expand_power_bas": 287, "powdenest": 287, "expand_log": 287, "logcombin": 287, "expand_func": 287, "hyperexpand": 287, "combsimp": 287, "gammasimp": 287}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"Citing SymPy": [[0, "citing-sympy"]], "Build the Documentation": [[1, "build-the-documentation"]], "Required dependencies": [[1, "required-dependencies"]], "Docker": [[1, "docker"], [1, "id3"], [1, "id4"]], "Debian/Ubuntu": [[1, "debian-ubuntu"]], "Fedora": [[1, "fedora"]], "Mac": [[1, "mac"]], "Windows 10": [[1, "windows-10"]], "Build the Docs": [[1, "build-the-docs"]], "Local Installation": [[1, "local-installation"], [1, "id5"]], "SymPy Logos": [[1, "sympy-logos"]], "View the Docs": [[1, "view-the-docs"]], "Auto-Rebuild with the Live Server": [[1, "auto-rebuild-with-the-live-server"]], "PDF Documentation": [[1, "pdf-documentation"]], "Debugging": [[2, "debugging"]], "Dependencies": [[3, "dependencies"]], "Hard Dependencies": [[3, "hard-dependencies"]], "Optional Dependencies": [[3, "optional-dependencies"]], "Recommended Optional Dependencies": [[3, "recommended-optional-dependencies"]], "Interactive Use": [[3, "interactive-use"]], "Printing": [[3, "printing"], [20, "printing"], [89, "module-sympy.interactive.printing"], [115, "printing"], [184, "printing"], [210, "printing"], [286, "printing"]], "Parsing": [[3, "parsing"], [103, "module-sympy.parsing"]], "Logic": [[3, "logic"], [91, "module-sympy.logic"], [266, "logic"], [269, "logic"]], "Plotting": [[3, "plotting"], [196, "module-sympy.plotting.plot"]], "lambdify": [[3, "lambdify"], [276, "lambdify"]], "Code Generation": [[3, "code-generation"], [43, "code-generation"], [266, "code-generation"], [268, "code-generation"]], "Autowrap": [[3, "autowrap"], [43, "autowrap"]], "Code Printers": [[3, "code-printers"]], "Testing-Only Dependencies": [[3, "testing-only-dependencies"]], "Statistics": [[3, "statistics"]], "Optional SymEngine Backend": [[3, "optional-symengine-backend"]], "Experimental Rubi Integrator": [[3, "experimental-rubi-integrator"]], "Sage": [[3, "sage"]], "Development Dependencies": [[3, "development-dependencies"]], "Getting the Source Code": [[3, "getting-the-source-code"]], "Running the Tests": [[3, "running-the-tests"]], "Building the Documentation": [[3, "building-the-documentation"]], "Running the Benchmarks": [[3, "running-the-benchmarks"]], "Deprecation Policy": [[4, "deprecation-policy"]], "What is a deprecation?": [[4, "what-is-a-deprecation"]], "Try to avoid backwards incompatible changes in the first place": [[4, "try-to-avoid-backwards-incompatible-changes-in-the-first-place"]], "When does a change require deprecation?": [[4, "when-does-a-change-require-deprecation"]], "Public API": [[4, null]], "Not Public API": [[4, null]], "The purpose of deprecation": [[4, "the-purpose-of-deprecation"]], "When it is not technically possible to deprecate": [[4, "when-it-is-not-technically-possible-to-deprecate"]], "How long should deprecations last?": [[4, "how-long-should-deprecations-last"]], "How to deprecate code": [[4, "how-to-deprecate-code"]], "Checklist": [[4, "checklist"]], "Adding the deprecation to the code": [[4, "adding-the-deprecation-to-the-code"]], "Documenting a deprecation": [[4, "documenting-a-deprecation"]], "Release notes entry": [[4, "release-notes-entry"]], "Development Environment Setup": [[5, "development-environment-setup"]], "Git Setup": [[5, "git-setup"]], "Get the SymPy Code": [[5, "get-the-sympy-code"]], "Virtual Environment Setup": [[5, "virtual-environment-setup"]], "Run the Tests": [[5, "run-the-tests"]], "SymPy Docstrings Style Guide": [[6, "sympy-docstrings-style-guide"]], "General Guidelines": [[6, "general-guidelines"], [7, "general-guidelines"]], "Formatting": [[6, "formatting"]], "Sections": [[6, "sections"]], "1. Single-Sentence Summary": [[6, "single-sentence-summary"]], "2. Explanation Section": [[6, "explanation-section"]], "3. Examples Section": [[6, "examples-section"]], "4. Parameters Section": [[6, "parameters-section"]], "5. See Also Section": [[6, "see-also-section"]], "6. References Section": [[6, "references-section"]], "Sample Docstring": [[6, "sample-docstring"]], "Docstrings for Classes that are Mathematical Functions": [[6, "docstrings-for-classes-that-are-mathematical-functions"]], "Best Practices for Writing Docstrings": [[6, "best-practices-for-writing-docstrings"]], "Importing Docstrings into the Sphinx Documentation": [[6, "importing-docstrings-into-the-sphinx-documentation"]], "Cross-Referencing": [[6, "cross-referencing"]], "Docstring Style Guide": [[7, "docstring-style-guide"]], "Types of Documentation": [[7, "types-of-documentation"]], "Narrative Documentation Guidelines": [[7, "narrative-documentation-guidelines"]], "Documentation using Markdown": [[7, "documentation-using-markdown"]], "Best Practices for Writing Documentation": [[7, "best-practices-for-writing-documentation"]], "Formatting Preferences": [[7, "formatting-preferences"]], "Math": [[7, "math"]], "LaTeX Recommendations": [[7, "latex-recommendations"]], "Code": [[7, "code"]], "Headings": [[7, "headings"]], "Style Preferences": [[7, "style-preferences"]], "Spelling and Punctuation": [[7, "spelling-and-punctuation"]], "Capitalization": [[7, "capitalization"]], "Tone Preferences": [[7, "tone-preferences"]], "Contributing": [[8, "contributing"], [32, "contributing"]], "Making a Contribution": [[9, "making-a-contribution"]], "List of active deprecations": [[10, "list-of-active-deprecations"]], "Silencing SymPy Deprecation Warnings": [[10, "silencing-sympy-deprecation-warnings"]], "Version 1.12": [[10, "version-1-12"]], "New Joint coordinate format": [[10, "new-joint-coordinate-format"]], "New Joint intermediate frames": [[10, "new-joint-intermediate-frames"]], "Change in joint attachment point argument": [[10, "change-in-joint-attachment-point-argument"]], "Version 1.11": [[10, "version-1-11"]], "New Mathematica code parser": [[10, "new-mathematica-code-parser"]], "Redundant static methods in carmichael": [[10, "redundant-static-methods-in-carmichael"]], "The check argument to HadamardProduct, MatAdd and MatMul": [[10, "the-check-argument-to-hadamardproduct-matadd-and-matmul"]], "Version 1.10": [[10, "version-1-10"]], "Some traversal functions have been moved": [[10, "some-traversal-functions-have-been-moved"]], "sympy.core.trace": [[10, "sympy-core-trace"]], "The sympy.core.compatibility submodule": [[10, "the-sympy-core-compatibility-submodule"]], "Version 1.9": [[10, "version-1-9"]], "expr_free_symbols": [[10, "expr-free-symbols"]], "sympy.stats.sample(numsamples=n)": [[10, "sympy-stats-sample-numsamples-n"]], "sympy.polys.solvers.RawMatrix": [[10, "sympy-polys-solvers-rawmatrix"]], "Non-Expr objects in a Matrix": [[10, "non-expr-objects-in-a-matrix"]], "The get_segments attribute of plotting objects": [[10, "the-get-segments-attribute-of-plotting-objects"]], "The mdft function in sympy.physics.matrices": [[10, "the-mdft-function-in-sympy-physics-matrices"]], "The private SparseMatrix._smat and DenseMatrix._mat attributes": [[10, "the-private-sparsematrix-smat-and-densematrix-mat-attributes"]], "laplace_transform of a Matrix with noconds=False": [[10, "laplace-transform-of-a-matrix-with-noconds-false"]], "Version 1.8": [[10, "version-1-8"]], "sympy.printing.theanocode": [[10, "sympy-printing-theanocode"]], "sympy.assumptions.handlers.AskHandler and related methods": [[10, "sympy-assumptions-handlers-askhandler-and-related-methods"]], "Version 1.7.1": [[10, "version-1-7-1"]], "Calling sympy.stats.StochasticProcess.distribution with RandomIndexedSymbol": [[10, "calling-sympy-stats-stochasticprocess-distribution-with-randomindexedsymbol"]], "Version 1.7": [[10, "version-1-7"]], "sympy.stats.DiscreteMarkovChain.absorbing_probabilites()": [[10, "sympy-stats-discretemarkovchain-absorbing-probabilites"]], "sympy.utilities.misc.find_executable()": [[10, "sympy-utilities-misc-find-executable"]], "Mutable attributes in sympy.diffgeom": [[10, "mutable-attributes-in-sympy-diffgeom"]], "The unicode argument and attribute to sympy.printing.pretty.stringpict.prettyForm and the sympy.printing.pretty.pretty_symbology.xstr function": [[10, "the-unicode-argument-and-attribute-to-sympy-printing-pretty-stringpict-prettyform-and-the-sympy-printing-pretty-pretty-symbology-xstr-function"]], "Passing the arguments to lambdify as a set": [[10, "passing-the-arguments-to-lambdify-as-a-set"]], "Core operators no longer accept non-Expr args": [[10, "core-operators-no-longer-accept-non-expr-args"]], "Version 1.6": [[10, "version-1-6"]], "Various sympy.utilities submodules have moved": [[10, "various-sympy-utilities-submodules-have-moved"]], "sympy.testing.randtest": [[10, "sympy-testing-randtest"]], "Mixing Poly and non-polynomial expressions in binary operations": [[10, "mixing-poly-and-non-polynomial-expressions-in-binary-operations"]], "The print_cyclic flag of sympy.combinatorics.Permutation": [[10, "the-print-cyclic-flag-of-sympy-combinatorics-permutation"]], "Using integrate with Poly": [[10, "using-integrate-with-poly"]], "The string fallback in sympify()": [[10, "the-string-fallback-in-sympify"]], "Creating an indefinite Integral with an Eq argument": [[10, "creating-an-indefinite-integral-with-an-eq-argument"]], "Version 1.5": [[10, "version-1-5"]], "Tensor.fun_eval and Tensor.__call__": [[10, "tensor-fun-eval-and-tensor-call"]], "TensorType": [[10, "tensortype"]], "The dummy_fmt argument to TensorIndexType": [[10, "the-dummy-fmt-argument-to-tensorindextype"]], "The metric argument to TensorIndexType": [[10, "the-metric-argument-to-tensorindextype"]], "The get_kronecker_delta() and get_epsilon() methods of TensorIndexType": [[10, "the-get-kronecker-delta-and-get-epsilon-methods-of-tensorindextype"]], "The tensorsymmetry() function": [[10, "the-tensorsymmetry-function"]], "The tensorhead() function": [[10, "the-tensorhead-function"]], "Methods to sympy.physics.units.Quantity": [[10, "methods-to-sympy-physics-units-quantity"]], "The is_EmptySet attribute of sets": [[10, "the-is-emptyset-attribute-of-sets"]], "ProductSet(iterable)": [[10, "productset-iterable"]], "The set_potential_energy method in sympy.physics.mechanics": [[10, "the-set-potential-energy-method-in-sympy-physics-mechanics"]], "Using a set for the condition in ConditionSet": [[10, "using-a-set-for-the-condition-in-conditionset"]], "The max_degree and get_upper_degree properties of sympy.polys.multivariate_resultants.DixonResultant": [[10, "the-max-degree-and-get-upper-degree-properties-of-sympy-polys-multivariate-resultants-dixonresultant"]], "Eq(expr) with the rhs defaulting to 0": [[10, "eq-expr-with-the-rhs-defaulting-to-0"]], "Non-tuple iterable for the first argument to Lambda": [[10, "non-tuple-iterable-for-the-first-argument-to-lambda"]], "The evaluate flag to differentiate_finite": [[10, "the-evaluate-flag-to-differentiate-finite"]], "Version 1.4": [[10, "version-1-4"]], "TensorIndexType.data and related methods": [[10, "tensorindextype-data-and-related-methods"]], "The clear_cache and clear_subproducts keywords to Matrix.is_diagonalizable": [[10, "the-clear-cache-and-clear-subproducts-keywords-to-matrix-is-diagonalizable"]], "The rows and cols keyword arguments to Matrix.jordan_block": [[10, "the-rows-and-cols-keyword-arguments-to-matrix-jordan-block"]], "Version 1.3": [[10, "version-1-3"]], "The source() function": [[10, "the-source-function"]], "The dimension and scale_factor arguments to sympy.physics.units.Quanitity": [[10, "the-dimension-and-scale-factor-arguments-to-sympy-physics-units-quanitity"]], "Importing classof and a2idx from sympy.matrices.matrices": [[10, "importing-classof-and-a2idx-from-sympy-matrices-matrices"]], "Version 1.2": [[10, "version-1-2"]], "Dot product of non-row/column vectors": [[10, "dot-product-of-non-row-column-vectors"]], "sympy.geometry.Line3D.equation no longer needs the k argument": [[10, "sympy-geometry-line3d-equation-no-longer-needs-the-k-argument"]], "Modules sympy.tensor.array.expressions.conv_* renamed to sympy.tensor.array.expressions.from_*": [[10, "modules-sympy-tensor-array-expressions-conv-renamed-to-sympy-tensor-array-expressions-from"]], "Glossary": [[11, "glossary"]], "Gotchas and Pitfalls": [[12, "gotchas-and-pitfalls"]], "Introduction": [[12, "introduction"], [16, "introduction"], [35, "introduction"], [42, "introduction"], [43, "introduction"], [44, "introduction"], [51, "introduction"], [63, "introduction"], [73, "introduction"], [91, "introduction"], [125, "introduction"], [142, "introduction"], [180, "introduction"], [191, "introduction"], [196, "introduction"], [197, "introduction"], [198, "introduction"], [205, "introduction"], [209, "introduction"], [264, "introduction"], [281, "introduction"]], "Equals Signs (=)": [[12, "equals-signs"]], "Single Equals Sign": [[12, "single-equals-sign"]], "Double Equals Signs": [[12, "double-equals-signs"]], "Variables": [[12, "variables"]], "Variables Assignment does not Create a Relation Between Expressions": [[12, "variables-assignment-does-not-create-a-relation-between-expressions"]], "Symbols": [[12, "symbols"], [279, "symbols"]], "Functions": [[12, "functions"], [68, "functions"], [231, "functions"]], "Symbolic Expressions": [[12, "symbolic-expressions"]], "Python numbers vs. SymPy Numbers": [[12, "python-numbers-vs-sympy-numbers"]], "Evaluating Expressions with Floats and Rationals": [[12, "evaluating-expressions-with-floats-and-rationals"]], "Immutability of Expressions": [[12, "immutability-of-expressions"]], "Mathematical Operators": [[12, "mathematical-operators"]], "Inverse Trig Functions": [[12, "inverse-trig-functions"]], "Sqrt is not a Function": [[12, "sqrt-is-not-a-function"]], "Special Symbols": [[12, "special-symbols"]], "Lists": [[12, "lists"]], "Dictionaries": [[12, "dictionaries"]], "Tuples": [[12, "tuples"]], "Keyword Arguments": [[12, "keyword-arguments"]], "Getting help from within SymPy": [[12, "getting-help-from-within-sympy"]], "help()": [[12, "help"]], "source()": [[12, "source"]], "Explanations": [[13, "explanations"], [32, "explanations"]], "Solve Output by Type": [[14, "solve-output-by-type"]], "Empty List": [[14, "empty-list"]], "List Of Values": [[14, "list-of-values"]], "Single Dictionary": [[14, "single-dictionary"]], "List of Tuples": [[14, "list-of-tuples"]], "List of Dictionaries": [[14, "list-of-dictionaries"]], "Boolean or Relational": [[14, "boolean-or-relational"]], "Classification of SymPy objects": [[15, "classification-of-sympy-objects"]], "class": [[15, "class"]], "kind": [[15, "kind"], [61, "module-sympy.core.kind"]], "sets and assumptions": [[15, "sets-and-assumptions"]], "func": [[15, "func"], [282, "func"]], "Finite Difference Approximations to Derivatives": [[16, "finite-difference-approximations-to-derivatives"]], "A Direct Method Using SymPy Matrices": [[16, "a-direct-method-using-sympy-matrices"]], "SymPy Special Topics": [[17, "sympy-special-topics"]], "Assumptions": [[18, "assumptions"], [20, "assumptions"], [38, "module-sympy.assumptions"]], "The (old) assumptions system": [[18, "the-old-assumptions-system"]], "Gotcha: symbols with different assumptions": [[18, "gotcha-symbols-with-different-assumptions"]], "Applying assumptions to string inputs": [[18, "applying-assumptions-to-string-inputs"]], "Predicates": [[18, "predicates"], [39, "id1"]], "Assumptions predicates for the (old) assumptions": [[18, "id28"]], "References for the above definitions": [[18, "references-for-the-above-definitions"]], "Implications": [[18, "implications"]], "Interpretation of the predicates": [[18, "interpretation-of-the-predicates"]], "Other is_* properties": [[18, "other-is-properties"]], "Implementing assumptions handlers": [[18, "implementing-assumptions-handlers"]], "Mechanism of the assumptions system": [[18, "mechanism-of-the-assumptions-system"]], "Limitations": [[18, "limitations"], [25, "limitations"], [85, "limitations"]], "Combining predicates with or": [[18, "combining-predicates-with-or"]], "Relations between different symbols": [[18, "relations-between-different-symbols"]], "Symbolic and fuzzy booleans": [[19, "symbolic-and-fuzzy-booleans"]], "Symbolic Boolean vs three valued bool": [[19, "symbolic-boolean-vs-three-valued-bool"]], "Three-valued logic with fuzzy bools": [[19, "three-valued-logic-with-fuzzy-bools"]], "Three-valued logic with symbolic Booleans": [[19, "three-valued-logic-with-symbolic-booleans"]], "Writing Custom Functions": [[20, "writing-custom-functions"]], "Easy Cases: Fully Symbolic or Fully Evaluated": [[20, "easy-cases-fully-symbolic-or-fully-evaluated"]], "The Fully Symbolic Case": [[20, "the-fully-symbolic-case"]], "The Fully Evaluated Case": [[20, "the-fully-evaluated-case"]], "Creating a Custom Function": [[20, "creating-a-custom-function"]], "Defining Automatic Evaluation with eval()": [[20, "defining-automatic-evaluation-with-eval"]], "Reminder": [[20, null]], "Best Practices for eval()": [[20, "best-practices-for-eval"]], "Key Point": [[20, null]], "Note": [[20, null]], "Numerical Evaluation with evalf()": [[20, "numerical-evaluation-with-evalf"]], "Rewriting and Simplification": [[20, "rewriting-and-simplification"]], "rewrite()": [[20, "rewrite"]], "doit()": [[20, "doit"]], "expand()": [[20, "expand"]], "Differentiation": [[20, "differentiation"]], "Other Methods": [[20, "other-methods"], [33, "other-methods"]], "inverse()": [[20, "inverse"]], "as_real_imag()": [[20, "as-real-imag"]], "Miscellaneous _eval_* methods": [[20, "miscellaneous-eval-methods"]], "Complete Examples": [[20, "complete-examples"]], "Versine": [[20, "versine"]], "Definition": [[20, "definition"], [20, "id2"], [20, "id4"], [79, "definition"]], "Examples": [[20, "examples"], [20, "id3"], [20, "id5"], [24, "examples"], [34, "examples"], [61, "examples"], [61, "id47"], [85, "examples"], [88, "examples"], [88, "id37"], [101, "examples"], [101, "id61"], [105, "examples"], [112, "examples"], [147, "examples"], [178, "examples"], [194, "examples"], [194, "id1"], [209, "examples"], [217, "examples"], [217, "id3"], [230, "examples"], [231, "examples"], [232, "examples"], [235, "examples"]], "divides": [[20, "divides"]], "Fused Multiply-Add (FMA)": [[20, "fused-multiply-add-fma"]], "Additional Tips": [[20, "additional-tips"]], "How-to Guides": [[21, "how-to-guides"], [32, "how-to-guides"]], "Find the Roots of a Polynomial Algebraically or Numerically": [[22, "find-the-roots-of-a-polynomial-algebraically-or-numerically"]], "Alternatives to Consider": [[22, "alternatives-to-consider"], [24, "alternatives-to-consider"], [25, "alternatives-to-consider"], [27, "alternatives-to-consider"], [28, "alternatives-to-consider"], [29, "alternatives-to-consider"], [30, "alternatives-to-consider"]], "Example of Finding the Roots of a Polynomial Algebraically": [[22, "example-of-finding-the-roots-of-a-polynomial-algebraically"]], "Functions to Find the Roots of a Polynomial": [[22, "functions-to-find-the-roots-of-a-polynomial"]], "Guidance": [[22, "guidance"], [24, "guidance"], [25, "guidance"], [26, "guidance"], [27, "guidance"], [28, "guidance"], [29, "guidance"], [30, "guidance"]], "Find the Roots of a Polynomial": [[22, "find-the-roots-of-a-polynomial"]], "Algebraic Solution Without Root Multiplicities": [[22, "algebraic-solution-without-root-multiplicities"]], "Algebraic Solution With Root Multiplicities": [[22, "algebraic-solution-with-root-multiplicities"]], "roots": [[22, "roots"]], "Factor the Equation": [[22, "factor-the-equation"]], "Exact Numeric Solution With Root Multiplicities": [[22, "exact-numeric-solution-with-root-multiplicities"]], "real_roots": [[22, "real-roots"]], "Approximate Numeric Solution With Root Multiplicities": [[22, "approximate-numeric-solution-with-root-multiplicities"]], "nroots": [[22, "nroots"]], "Complex Roots": [[22, "complex-roots"]], "Use the Solution Result": [[22, "use-the-solution-result"], [25, "use-the-solution-result"], [26, "use-the-solution-result"], [27, "use-the-solution-result"], [28, "use-the-solution-result"], [29, "use-the-solution-result"]], "List (all_roots, real_roots, nroots)": [[22, "list-all-roots-real-roots-nroots"]], "List of dictionaries (solve)": [[22, "list-of-dictionaries-solve"]], "Dictionary (roots)": [[22, "dictionary-roots"]], "Expression (factor)": [[22, "expression-factor"]], "Tradeoffs": [[22, "tradeoffs"]], "Mathematical Exactness, Completeness of List of Roots, and Speed": [[22, "mathematical-exactness-completeness-of-list-of-roots-and-speed"]], "Get All Roots, Perhaps Implicitly": [[22, "get-all-roots-perhaps-implicitly"]], "Numerically Evaluate CRootOf Roots": [[22, "numerically-evaluate-crootof-roots"]], "Representing Roots": [[22, "representing-roots"]], "Not All Equations Can Be Solved": [[22, "not-all-equations-can-be-solved"], [25, "not-all-equations-can-be-solved"], [26, "not-all-equations-can-be-solved"], [29, "not-all-equations-can-be-solved"]], "Equations With No Closed-Form Solution": [[22, "equations-with-no-closed-form-solution"], [26, "equations-with-no-closed-form-solution"], [29, "equations-with-no-closed-form-solution"]], "Report a Bug": [[22, "report-a-bug"], [24, "report-a-bug"], [25, "report-a-bug"], [26, "report-a-bug"], [27, "report-a-bug"], [28, "report-a-bug"], [29, "report-a-bug"], [30, "report-a-bug"], [31, "report-a-bug"]], "Solve Equations": [[23, "solve-equations"]], "Reduce One or a System of Inequalities for a Single Variable Algebraically": [[24, "reduce-one-or-a-system-of-inequalities-for-a-single-variable-algebraically"]], "Reducing a System of Inequalities for a Single Variable Algebraically": [[24, "reducing-a-system-of-inequalities-for-a-single-variable-algebraically"]], "Reducing One Inequality for a Single Variable Algebraically": [[24, "reducing-one-inequality-for-a-single-variable-algebraically"]], "Include the Variable to Be Reduced for in the Function Call": [[24, "include-the-variable-to-be-reduced-for-in-the-function-call"]], "Reduce a System of Inequalities Algebraically": [[24, "reduce-a-system-of-inequalities-algebraically"]], "Use the Result": [[24, "use-the-result"]], "Extract a List of Decomposed Relations": [[24, "extract-a-list-of-decomposed-relations"]], "Extract a Tuple of Relations": [[24, "extract-a-tuple-of-relations"]], "Limitations of Inequality Reduction Using SymPy": [[24, "limitations-of-inequality-reduction-using-sympy"]], "SymPy Can Reduce for Only One Symbol of Interest Per Inequality": [[24, "sympy-can-reduce-for-only-one-symbol-of-interest-per-inequality"]], "Limitations on Types of Inequalities That SymPy Can Solve": [[24, "limitations-on-types-of-inequalities-that-sympy-can-solve"]], "Not All Results Are Returned for Periodic Functions": [[24, "not-all-results-are-returned-for-periodic-functions"]], "Not All Systems of Inequalities Can Be Reduced": [[24, "not-all-systems-of-inequalities-can-be-reduced"]], "Systems of Inequalities Which Cannot Be Satisfied": [[24, "systems-of-inequalities-which-cannot-be-satisfied"]], "Systems of Inequalities That Cannot Be Reduced Analytically": [[24, "systems-of-inequalities-that-cannot-be-reduced-analytically"]], "Inequalities Which Can Be Reduced Analytically, and SymPy Cannot Reduce": [[24, "inequalities-which-can-be-reduced-analytically-and-sympy-cannot-reduce"]], "Solve a Diophantine Equation Algebraically": [[25, "solve-a-diophantine-equation-algebraically"]], "Example of Solving a Diophantine Equation": [[25, "example-of-solving-a-diophantine-equation"]], "Diophantine Equation Can be Expressed as Expression That Equals Zero": [[25, "diophantine-equation-can-be-expressed-as-expression-that-equals-zero"]], "Specify the Order of Symbols in the Result": [[25, "specify-the-order-of-symbols-in-the-result"]], "Extract Expressions From the Result": [[25, "extract-expressions-from-the-result"]], "Work With Parameters": [[25, "work-with-parameters"]], "Verify a Solution": [[25, "verify-a-solution"]], "Programmatically Extract Parameter Symbols": [[25, "programmatically-extract-parameter-symbols"]], "Equations With No Solution": [[25, "equations-with-no-solution"], [27, "equations-with-no-solution"], [29, "equations-with-no-solution"]], "Solve an Equation Algebraically": [[26, "solve-an-equation-algebraically"], [26, "id1"]], "Alternatives to consider": [[26, "alternatives-to-consider"]], "Solving Functions": [[26, "solving-functions"]], "Make Your Equation Into an Expression That Equals Zero": [[26, "make-your-equation-into-an-expression-that-equals-zero"]], "Put Your Equation Into Eq Form": [[26, "put-your-equation-into-eq-form"]], "Restrict the Domain of Solutions": [[26, "restrict-the-domain-of-solutions"]], "Explicitly Represent Infinite Sets of Possible Solutions": [[26, "explicitly-represent-infinite-sets-of-possible-solutions"]], "Substitute Solutions From solve() Into an Expression": [[26, "substitute-solutions-from-solve-into-an-expression"]], "solveset() Solution Sets Cannot Necessarily Be Interrogated Programmatically": [[26, "solveset-solution-sets-cannot-necessarily-be-interrogated-programmatically"]], "Options That Can Speed up solve()": [[26, "options-that-can-speed-up-solve"], [30, "options-that-can-speed-up-solve"], [31, "options-that-can-speed-up-solve"]], "Equations Which Have a Closed-Form Solution, and SymPy Cannot Solve": [[26, "equations-which-have-a-closed-form-solution-and-sympy-cannot-solve"], [30, "equations-which-have-a-closed-form-solution-and-sympy-cannot-solve"]], "Solve a Matrix Equation Algebraically": [[27, "solve-a-matrix-equation-algebraically"]], "Solve a Matrix Equation": [[27, "solve-a-matrix-equation"]], "Matrix Usually Must Be Square": [[27, "matrix-usually-must-be-square"]], "Methods for Solving Matrix Equations": [[27, "methods-for-solving-matrix-equations"]], "Solving Several Matrix Equations With the Same Matrix": [[27, "solving-several-matrix-equations-with-the-same-matrix"]], "Work With Symbolic Matrices": [[27, "work-with-symbolic-matrices"]], "Speed up Solving Matrix Equations": [[27, "speed-up-solving-matrix-equations"]], "Use the Solution as a Vector": [[27, "use-the-solution-as-a-vector"]], "Extract Elements From the Solution": [[27, "extract-elements-from-the-solution"]], "Solve One or a System of Equations Numerically": [[28, "solve-one-or-a-system-of-equations-numerically"]], "Example of Numerically Solving an Equation": [[28, "example-of-numerically-solving-an-equation"]], "Find Complex Roots of a Real Function": [[28, "find-complex-roots-of-a-real-function"]], "Ensure the Root Found is in a Given Interval": [[28, "ensure-the-root-found-is-in-a-given-interval"]], "Solve a System of Equations Numerically": [[28, "solve-a-system-of-equations-numerically"]], "Increase Precision of the Solution": [[28, "increase-precision-of-the-solution"]], "Create a Function That Can Be Solved With SciPy": [[28, "create-a-function-that-can-be-solved-with-scipy"]], "Substitute the Result Into an Expression": [[28, "substitute-the-result-into-an-expression"]], "Not all Equations Can be Solved": [[28, "not-all-equations-can-be-solved"]], "Equations With no Solution": [[28, "equations-with-no-solution"]], "Solve an Ordinary Differential Equation (ODE) Algebraically": [[29, "solve-an-ordinary-differential-equation-ode-algebraically"]], "Solve an Ordinary Differential Equation (ODE)": [[29, "solve-an-ordinary-differential-equation-ode"]], "Defining Derivatives": [[29, "defining-derivatives"]], "Options to Define an ODE": [[29, "options-to-define-an-ode"]], "Option 1: Define a Function Without Including Its Independent Variable": [[29, "option-1-define-a-function-without-including-its-independent-variable"]], "Specify Initial Conditions or Boundary Conditions": [[29, "specify-initial-conditions-or-boundary-conditions"], [29, "id1"]], "Option 2: Define a Function of an Independent Variable": [[29, "option-2-define-a-function-of-an-independent-variable"]], "Beware Copying and Pasting Results": [[29, "beware-copying-and-pasting-results"]], "Extract the Result for One Solution and Function": [[29, "extract-the-result-for-one-solution-and-function"]], "Some ODEs Cannot Be Solved Explicitly, Only Implicitly": [[29, "some-odes-cannot-be-solved-explicitly-only-implicitly"]], "Extract the Result for Multiple Function-Solution Pairs": [[29, "extract-the-result-for-multiple-function-solution-pairs"]], "If There is One Solution Set": [[29, "if-there-is-one-solution-set"]], "If There are Multiple Solution Sets": [[29, "if-there-are-multiple-solution-sets"]], "Work With Arbitrary Constants": [[29, "work-with-arbitrary-constants"]], "Numerically Solve an ODE in SciPy": [[29, "numerically-solve-an-ode-in-scipy"]], "Ordinary Differential Equation Solving Hints": [[29, "ordinary-differential-equation-solving-hints"]], "Return Unevaluated Integrals": [[29, "return-unevaluated-integrals"]], "Select a Specific Solver": [[29, "select-a-specific-solver"]], "Solve a System of Equations Algebraically": [[30, "solve-a-system-of-equations-algebraically"]], "Examples of Solving a System of Equations Algebraically": [[30, "examples-of-solving-a-system-of-equations-algebraically"]], "Solve a System of Linear Equations Algebraically": [[30, "solve-a-system-of-linear-equations-algebraically"]], "Solve a System of Nonlinear Equations Algebraically": [[30, "solve-a-system-of-nonlinear-equations-algebraically"]], "Solve and Use Results in a Dictionary": [[30, "solve-and-use-results-in-a-dictionary"]], "Solve Into a Solution Given as a Dictionary": [[30, "solve-into-a-solution-given-as-a-dictionary"]], "Use a Solution Given as a Dictionary": [[30, "use-a-solution-given-as-a-dictionary"]], "Solve Results in a Set": [[30, "solve-results-in-a-set"]], "Not All Systems of Equations Can be Solved": [[30, "not-all-systems-of-equations-can-be-solved"]], "Systems of Equations With no Solution": [[30, "systems-of-equations-with-no-solution"]], "Systems of Equations With no Closed-Form Solution": [[30, "systems-of-equations-with-no-closed-form-solution"]], "Solving Guidance": [[31, "solving-guidance"]], "Numeric Solutions": [[31, "numeric-solutions"]], "Equations With no Closed-Form Solution": [[31, "equations-with-no-closed-form-solution"]], "When You Might Prefer a Numeric Solution": [[31, "when-you-might-prefer-a-numeric-solution"]], "Use Exact Values": [[31, "use-exact-values"]], "Include the Variable to be Solved for in the Function Call": [[31, "include-the-variable-to-be-solved-for-in-the-function-call"]], "Ensure Consistent Formatting From solve()": [[31, "ensure-consistent-formatting-from-solve"]], "Include Solutions Making Any Denominator Zero": [[31, "include-solutions-making-any-denominator-zero"]], "Do Not Simplify Solutions": [[31, "do-not-simplify-solutions"]], "Parse a String Representing the Equation": [[31, "parse-a-string-representing-the-equation"]], "Welcome to SymPy\u2019s documentation!": [[32, "welcome-to-sympy-s-documentation"]], "Installation": [[32, "installation"], [33, "installation"], [285, "installation"]], "Tutorials": [[32, "tutorials"], [275, "tutorials"]], "API Reference": [[32, "api-reference"], [242, "module-sympy.utilities.autowrap"], [243, "module-sympy.utilities.codegen"], [266, "api-reference"]], "Anaconda": [[33, "anaconda"]], "Git": [[33, "git"]], "Run SymPy": [[33, "run-sympy"]], "mpmath": [[33, "mpmath"]], "Questions": [[33, "questions"]], "abc": [[34, "module-sympy.abc"]], "Caveats": [[34, "caveats"]], "Algebras": [[35, "algebras"]], "Quaternion Reference": [[35, "module-sympy.algebras"]], "Ask": [[36, "module-sympy.assumptions.ask"]], "Assume": [[37, "module-sympy.assumptions.assume"]], "Predicate": [[38, "predicate"]], "Querying": [[38, "querying"]], "Contents": [[38, "contents"], [48, "contents"], [68, "contents"], [81, "contents"], [87, "contents"], [202, "contents"], [214, "contents"], [224, "contents"], [233, "contents"]], "Performance improvements": [[38, "performance-improvements"]], "Misc": [[38, "misc"]], "Common": [[39, "common"]], "Calculus": [[39, "calculus"], [41, "module-sympy.calculus"], [277, "calculus"]], "Matrix": [[39, "matrix"]], "Number Theory": [[39, "number-theory"], [101, "module-sympy.ntheory.generate"], [266, "number-theory"], [271, "number-theory"]], "Order": [[39, "order"]], "Sets": [[39, "sets"], [218, "sets"]], "Refine": [[40, "module-sympy.assumptions.refine"]], "Singularities": [[41, "singularities"]], "Finite difference weights": [[41, "finite-difference-weights"]], "Category Theory": [[42, "category-theory"]], "Base Class Reference": [[42, "module-sympy.categories"], [63, "base-class-reference"]], "Diagram Drawing": [[42, "module-sympy.categories.diagram_drawing"]], "Code printers (sympy.printing)": [[43, "code-printers-sympy-printing"]], "Codegen (sympy.utilities.codegen)": [[43, "codegen-sympy-utilities-codegen"]], "Classes and functions for rewriting expressions (sympy.codegen.rewriting)": [[43, "module-sympy.codegen.rewriting"]], "Tools for simplifying expressions using approximations (sympy.codegen.approximations)": [[43, "module-sympy.codegen.approximations"]], "Classes for abstract syntax trees (sympy.codegen.ast)": [[43, "module-sympy.codegen.ast"]], "AST Type Tree": [[43, "ast-type-tree"]], "Predefined types": [[43, "predefined-types"]], "Using the nodes": [[43, "using-the-nodes"]], "Special C math functions (sympy.codegen.cfunctions)": [[43, "module-sympy.codegen.cfunctions"]], "C specific AST nodes (sympy.codegen.cnodes)": [[43, "module-sympy.codegen.cnodes"]], "C++ specific AST nodes (sympy.codegen.cxxnodes)": [[43, "module-sympy.codegen.cxxnodes"]], "Fortran specific AST nodes (sympy.codegen.fnodes)": [[43, "module-sympy.codegen.fnodes"]], "Algorithms (sympy.codegen.algorithms)": [[43, "module-sympy.codegen.algorithms"]], "Python utilities (sympy.codegen.pyutils)": [[43, "module-sympy.codegen.pyutils"]], "C utilities (sympy.codegen.cutils)": [[43, "module-sympy.codegen.cutils"]], "Fortran utilities (sympy.codegen.futils)": [[43, "module-sympy.codegen.futils"]], "Finitely Presented Groups": [[44, "finitely-presented-groups"]], "Overview of Facilities": [[44, "overview-of-facilities"]], "The Construction of Finitely Presented Groups": [[44, "the-construction-of-finitely-presented-groups"]], "Free Groups and Words": [[44, "free-groups-and-words"]], "Construction of a Free Group": [[44, "construction-of-a-free-group"]], "Construction of words": [[44, "construction-of-words"]], "Coset Enumeration: The Todd-Coxeter Algorithm": [[44, "coset-enumeration-the-todd-coxeter-algorithm"]], "CosetTable": [[44, "cosettable"]], "Attributes of CosetTable": [[44, "attributes-of-cosettable"]], "Compression and Standardization": [[44, "compression-and-standardization"]], "Subgroups of Finite Index": [[44, "subgroups-of-finite-index"]], "Low Index Subgroups": [[44, "low-index-subgroups"]], "Constructing a presentation for a subgroup": [[44, "constructing-a-presentation-for-a-subgroup"]], "Reidemeister Schreier algorithm": [[44, "reidemeister-schreier-algorithm"]], "Bibliography": [[44, "bibliography"], [51, "bibliography"]], "Gray Code": [[45, "module-sympy.combinatorics.graycode"]], "Group constructors": [[46, "module-sympy.combinatorics.group_constructs"]], "Nilpotent, Abelian and Cyclic Numbers": [[47, "module-sympy.combinatorics.group_numbers"]], "Combinatorics": [[48, "combinatorics"]], "Named Groups": [[49, "module-sympy.combinatorics.named_groups"]], "Partitions": [[50, "module-sympy.combinatorics.partitions"]], "Polycyclic Groups": [[51, "polycyclic-groups"]], "Overview of functionalities": [[51, "overview-of-functionalities"]], "The Construction of Polycyclic Groups": [[51, "the-construction-of-polycyclic-groups"]], "Attributes of PolycyclicGroup": [[51, "attributes-of-polycyclicgroup"]], "The Construction of Collector": [[51, "the-construction-of-collector"]], "Attributes of Collector": [[51, "attributes-of-collector"]], "Computation of Minimal Uncollected Subword": [[51, "computation-of-minimal-uncollected-subword"]], "Computation of Subword Index": [[51, "computation-of-subword-index"]], "Computation of Collected Word": [[51, "computation-of-collected-word"]], "Computation of Polycyclic Presentation": [[51, "computation-of-polycyclic-presentation"]], "Computation of Exponent Vector": [[51, "computation-of-exponent-vector"]], "Depth of Polycyclic generator": [[51, "depth-of-polycyclic-generator"]], "Computation of Leading Exponent": [[51, "computation-of-leading-exponent"]], "Permutation Groups": [[52, "module-sympy.combinatorics.perm_groups"]], "Permutations": [[53, "module-sympy.combinatorics.permutations"]], "Generators": [[53, "module-sympy.combinatorics.generators"]], "Polyhedron": [[54, "module-sympy.combinatorics.polyhedron"]], "Prufer Sequences": [[55, "module-sympy.combinatorics.prufer"]], "Subsets": [[56, "module-sympy.combinatorics.subsets"]], "Tensor Canonicalization": [[57, "module-sympy.combinatorics.tensor_can"]], "Test Utilities": [[58, "module-sympy.combinatorics.testutil"]], "Utilities": [[59, "module-sympy.combinatorics.util"], [148, "module-sympy.physics.optics.utils"], [205, "utilities"], [247, "module-sympy.utilities"], [266, "utilities"], [274, "utilities"]], "Concrete": [[60, "concrete"]], "Hypergeometric terms": [[60, "hypergeometric-terms"]], "Concrete Class Reference": [[60, "concrete-class-reference"]], "Concrete Functions Reference": [[60, "concrete-functions-reference"]], "Core": [[61, "core"]], "sympify": [[61, "module-sympy.core.sympify"]], "assumptions": [[61, "module-sympy.core.assumptions"]], "See Also": [[61, "see-also"], [248, "see-also"]], "Notes": [[61, "notes"], [217, "notes"], [219, "notes"]], "Developers Notes": [[61, "developers-notes"]], "References": [[61, "references"], [73, "references"], [79, "references"], [88, "references"], [147, "references"], [150, "references"], [195, "references"], [219, "references"], [220, "references"], [223, "references"], [229, "references"]], "cache": [[61, "module-sympy.core.cache"]], "basic": [[61, "module-sympy.core.basic"]], "singleton": [[61, "module-sympy.core.singleton"]], "expr": [[61, "module-sympy.core.expr"]], "symbol": [[61, "module-sympy.core.symbol"]], "numbers": [[61, "module-sympy.core.numbers"]], "power": [[61, "module-sympy.core.power"]], "mul": [[61, "module-sympy.core.mul"]], "add": [[61, "module-sympy.core.add"]], "mod": [[61, "module-sympy.core.mod"]], "relational": [[61, "module-sympy.core.relational"]], "multidimensional": [[61, "module-sympy.core.multidimensional"]], "function": [[61, "module-sympy.core.function"]], "evalf": [[61, "module-sympy.core.evalf"], [276, "evalf"]], "containers": [[61, "module-sympy.core.containers"]], "exprtools": [[61, "module-sympy.core.exprtools"]], "Sorting": [[61, "sorting"]], "Random": [[61, "module-sympy.core.random"]], "Traversal": [[61, "module-sympy.core.traversal"]], "Cryptography": [[62, "cryptography"]], "Differential Geometry": [[63, "module-sympy.diffgeom"]], "Discrete": [[64, "discrete"]], "Transforms": [[64, "module-sympy.discrete.transforms"]], "Fast Fourier Transform": [[64, "fast-fourier-transform"]], "Number Theoretic Transform": [[64, "number-theoretic-transform"]], "Fast Walsh Hadamard Transform": [[64, "fast-walsh-hadamard-transform"]], "M\u00f6bius Transform": [[64, "mobius-transform"]], "Convolutions": [[64, "module-sympy.discrete.convolutions"]], "Convolution": [[64, "convolution"]], "Convolution using Fast Fourier Transform": [[64, "convolution-using-fast-fourier-transform"]], "Convolution using Number Theoretic Transform": [[64, "convolution-using-number-theoretic-transform"]], "Convolution using Fast Walsh Hadamard Transform": [[64, "convolution-using-fast-walsh-hadamard-transform"]], "Subset Convolution": [[64, "subset-convolution"]], "Covering Product": [[64, "covering-product"]], "Intersecting Product": [[64, "intersecting-product"]], "Numerical Evaluation": [[65, "numerical-evaluation"]], "Basics": [[65, "basics"], [266, "basics"], [267, "basics"]], "Floating-point numbers": [[65, "floating-point-numbers"]], "Accuracy and error handling": [[65, "accuracy-and-error-handling"]], "Sums and integrals": [[65, "sums-and-integrals"]], "Numerical simplification": [[65, "numerical-simplification"]], "Combinatorial": [[66, "combinatorial"]], "Enumeration": [[66, "enumeration"]], "Elementary": [[67, "elementary"]], "Complex Functions": [[67, "complex-functions"]], "Trigonometric": [[67, "trigonometric"]], "Trigonometric Functions": [[67, "trigonometric-functions"]], "Trigonometric Inverses": [[67, "trigonometric-inverses"]], "Hyperbolic": [[67, "hyperbolic"]], "Hyperbolic Functions": [[67, "hyperbolic-functions"]], "Hyperbolic Inverses": [[67, "hyperbolic-inverses"]], "Integer Functions": [[67, "integer-functions"]], "Exponential": [[67, "exponential"]], "Piecewise": [[67, "piecewise"]], "Miscellaneous": [[67, "miscellaneous"], [251, "module-sympy.utilities.misc"]], "Special": [[69, "special"]], "Dirac Delta and Related Discontinuous Functions": [[69, "dirac-delta-and-related-discontinuous-functions"]], "Gamma, Beta and Related Functions": [[69, "module-sympy.functions.special.gamma_functions"]], "Error Functions and Fresnel Integrals": [[69, "module-sympy.functions.special.error_functions"]], "Exponential, Logarithmic and Trigonometric Integrals": [[69, "exponential-logarithmic-and-trigonometric-integrals"]], "Bessel Type Functions": [[69, "module-sympy.functions.special.bessel"]], "Airy Functions": [[69, "airy-functions"]], "B-Splines": [[69, "b-splines"]], "Riemann Zeta and Related Functions": [[69, "module-sympy.functions.special.zeta_functions"]], "Hypergeometric Functions": [[69, "hypergeometric-functions"]], "Elliptic integrals": [[69, "module-sympy.functions.special.elliptic_integrals"]], "Mathieu Functions": [[69, "module-sympy.functions.special.mathieu_functions"]], "Orthogonal Polynomials": [[69, "module-sympy.functions.special.polynomials"]], "Jacobi Polynomials": [[69, "jacobi-polynomials"]], "Gegenbauer Polynomials": [[69, "gegenbauer-polynomials"]], "Chebyshev Polynomials": [[69, "chebyshev-polynomials"]], "Legendre Polynomials": [[69, "legendre-polynomials"]], "Hermite Polynomials": [[69, "hermite-polynomials"]], "Laguerre Polynomials": [[69, "laguerre-polynomials"]], "Spherical Harmonics": [[69, "spherical-harmonics"]], "Tensor Functions": [[69, "tensor-functions"]], "Curves": [[70, "module-sympy.geometry.curve"]], "Ellipses": [[71, "module-sympy.geometry.ellipse"]], "Entities": [[72, "module-sympy.geometry.entity"]], "Geometry": [[73, "geometry"]], "Available Entities": [[73, "available-entities"]], "Example Usage": [[73, "example-usage"]], "Intersection of medians": [[73, "intersection-of-medians"]], "An in-depth example: Pappus\u2019 Hexagon Theorem": [[73, "an-in-depth-example-pappus-hexagon-theorem"]], "Miscellaneous Notes": [[73, "miscellaneous-notes"]], "Future Work": [[73, "future-work"]], "Truth Setting Expressions": [[73, "truth-setting-expressions"]], "Three Dimensions and Beyond": [[73, "three-dimensions-and-beyond"]], "Geometry Visualization": [[73, "geometry-visualization"]], "Submodules": [[73, "submodules"]], "Lines": [[74, "module-sympy.geometry.line"]], "Plane": [[75, "module-sympy.geometry.plane"]], "Points": [[76, "module-sympy.geometry.point"], [259, "points"]], "Polygons": [[77, "module-sympy.geometry.polygon"]], "Utils": [[78, "module-sympy.geometry.util"]], "About Holonomic Functions": [[79, "about-holonomic-functions"]], "Converting other representations to holonomic": [[80, "converting-other-representations-to-holonomic"]], "Converting hypergeometric functions": [[80, "converting-hypergeometric-functions"]], "Converting Meijer G-functions": [[80, "converting-meijer-g-functions"]], "Converting symbolic expressions": [[80, "converting-symbolic-expressions"]], "Holonomic": [[81, "module-sympy.holonomic"]], "Internal API": [[82, "internal-api"]], "Operations on holonomic functions": [[83, "operations-on-holonomic-functions"]], "Addition and Multiplication": [[83, "addition-and-multiplication"]], "Integration and Differentiation": [[83, "integration-and-differentiation"]], "Composition with polynomials": [[83, "composition-with-polynomials"]], "Convert to holonomic sequence": [[83, "convert-to-holonomic-sequence"]], "Series expansion": [[83, "series-expansion"]], "Numerical evaluation": [[83, "numerical-evaluation"]], "Convert to a linear combination of hypergeometric functions": [[83, "convert-to-a-linear-combination-of-hypergeometric-functions"]], "Convert to a linear combination of Meijer G-functions": [[83, "convert-to-a-linear-combination-of-meijer-g-functions"]], "Convert to expressions": [[83, "convert-to-expressions"]], "Representation of holonomic functions in SymPy": [[84, "representation-of-holonomic-functions-in-sympy"]], "Uses and Current limitations": [[85, "uses-and-current-limitations"]], "Integration": [[85, "integration"]], "Computing Integrals using Meijer G-Functions": [[86, "computing-integrals-using-meijer-g-functions"]], "Overview": [[86, "overview"]], "Polar Numbers and Branched Functions": [[86, "polar-numbers-and-branched-functions"]], "Representing Branched Functions on the Argand Plane": [[86, "representing-branched-functions-on-the-argand-plane"]], "Table Lookups and Inverse Mellin Transforms": [[86, "table-lookups-and-inverse-mellin-transforms"]], "Applying the Integral Theorems": [[86, "applying-the-integral-theorems"]], "The G-Function Integration Theorems": [[86, "the-g-function-integration-theorems"]], "Conditions of Convergence for Integral (1)": [[86, "conditions-of-convergence-for-integral-1"]], "Conditions of Convergence for Integral (2)": [[86, "conditions-of-convergence-for-integral-2"]], "The Inverse Laplace Transform of a G-function": [[86, "the-inverse-laplace-transform-of-a-g-function"]], "How to compute the integral": [[86, "how-to-compute-the-integral"]], "When this computation is valid": [[86, "when-this-computation-is-valid"]], "When the integral exists": [[86, "when-the-integral-exists"]], "Implemented G-Function Formulae": [[86, "implemented-g-function-formulae"]], "Internal API Reference": [[86, "module-sympy.integrals.meijerint"]], "Integrals": [[87, "integrals"], [88, "module-sympy.integrals"], [277, "integrals"]], "Integral Transforms": [[88, "module-sympy.integrals.transforms"]], "Internals": [[88, "internals"], [205, "internals"]], "API reference": [[88, "api-reference"], [88, "id38"]], "TODO and Bugs": [[88, "todo-and-bugs"]], "Numeric Integrals": [[88, "numeric-integrals"]], "Integration over Polytopes": [[88, "module-sympy.integrals.intpoly"]], "For 2D Polygons": [[88, "for-2d-polygons"]], "For 3-Polytopes/Polyhedra": [[88, "for-3-polytopes-polyhedra"]], "Interactive": [[89, "module-sympy.interactive"]], "Session": [[89, "module-sympy.interactive.session"]], "Lie Algebra": [[90, "module-sympy.liealgebras"]], "Forming logical expressions": [[91, "forming-logical-expressions"]], "Boolean functions": [[91, "boolean-functions"]], "Simplification and equivalence-testing": [[91, "simplification-and-equivalence-testing"]], "Manipulating expressions": [[91, "manipulating-expressions"]], "Truth tables and related functions": [[91, "truth-tables-and-related-functions"]], "Inference": [[91, "module-sympy.logic.inference"]], "Common Matrices": [[92, "module-sympy.matrices.common"]], "Dense Matrices": [[93, "dense-matrices"]], "Matrix Expressions": [[94, "module-sympy.matrices.expressions"]], "Matrix Expressions Core Reference": [[94, "matrix-expressions-core-reference"]], "Block Matrices": [[94, "block-matrices"]], "Immutable Matrices": [[95, "immutable-matrices"]], "ImmutableMatrix Class Reference": [[95, "module-sympy.matrices.immutable"]], "Matrices": [[96, "module-sympy.matrices"], [114, "module-sympy.physics.matrices"], [266, "matrices"], [270, "matrices"], [283, "matrices"]], "Matrices (linear algebra)": [[97, "module-sympy.matrices.matrices"]], "Creating Matrices": [[97, "creating-matrices"]], "Basic Manipulation": [[97, "basic-manipulation"]], "Operations on entries": [[97, "operations-on-entries"]], "Linear algebra": [[97, "linear-algebra"]], "Reference": [[97, "reference"], [197, "reference"], [203, "reference"], [207, "reference"], [217, "reference"], [217, "id2"], [217, "id4"], [217, "id7"], [217, "id8"]], "Matrix Base Classes": [[97, "matrix-base-classes"]], "Matrix Exceptions": [[97, "matrix-exceptions"]], "Matrix Functions": [[97, "matrix-functions"]], "Numpy Utility Functions": [[97, "numpy-utility-functions"]], "Matrix Normal Forms": [[98, "matrix-normal-forms"]], "Sparse Matrices": [[99, "module-sympy.matrices.sparse"]], "SparseMatrix Class Reference": [[99, "sparsematrix-class-reference"]], "ImmutableSparseMatrix Class Reference": [[99, "immutablesparsematrix-class-reference"]], "Sparse Tools": [[100, "module-sympy.matrices.sparsetools"]], "Ntheory Class Reference": [[101, "ntheory-class-reference"]], "Ntheory Functions Reference": [[101, "ntheory-functions-reference"]], "ECM function": [[101, "ecm-function"]], "QS function": [[101, "qs-function"]], "Numeric Computation": [[102, "numeric-computation"]], "Subs/evalf": [[102, "subs-evalf"]], "Lambdify": [[102, "lambdify"], [249, "module-sympy.utilities.lambdify"]], "uFuncify": [[102, "ufuncify"]], "Aesara": [[102, "aesara"]], "So Which Should I Use?": [[102, "so-which-should-i-use"]], "Parsing Functions Reference": [[103, "parsing-functions-reference"]], "Parsing Transformations Reference": [[103, "parsing-transformations-reference"]], "Experimental \\mathrm{\\LaTeX} Parsing": [[103, "experimental-mathrm-latex-parsing"]], "\\mathrm{\\LaTeX} Parsing Caveats": [[103, "mathrm-latex-parsing-caveats"]], "\\mathrm{\\LaTeX} Parsing Functions Reference": [[103, "mathrm-latex-parsing-functions-reference"]], "\\mathrm{\\LaTeX} Parsing Exceptions Reference": [[103, "mathrm-latex-parsing-exceptions-reference"]], "SymPy Expression Reference": [[103, "module-sympy.parsing.sym_expr"]], "Runtime Installation": [[103, "runtime-installation"]], "Beam (Docstrings)": [[104, "module-sympy.physics.continuum_mechanics.beam"]], "Solving Beam Bending Problems using Singularity Functions": [[105, "solving-beam-bending-problems-using-singularity-functions"]], "Beam": [[105, "beam"], [106, "beam"]], "Example 1": [[105, "example-1"]], "Example 2": [[105, "example-2"]], "Example 3": [[105, "example-3"]], "Example 4": [[105, "example-4"]], "Example 5": [[105, "example-5"]], "Example 6": [[105, "example-6"]], "Example 7": [[105, "example-7"]], "Example 8": [[105, "example-8"]], "Example 9": [[105, "example-9"]], "Example 10": [[105, "example-10"]], "Example 11": [[105, "example-11"]], "Continuum Mechanics": [[106, "continuum-mechanics"]], "Abstract": [[106, null], [110, null], [112, null], [135, null], [145, null], [162, null], [192, null]], "Truss": [[106, "truss"]], "Truss (Docstrings)": [[107, "module-sympy.physics.continuum_mechanics.truss"]], "Control": [[108, "control"]], "Control System Plots": [[109, "control-system-plots"]], "Pole-Zero Plot": [[109, "pole-zero-plot"]], "Bode Plot": [[109, "bode-plot"]], "Impulse-Response Plot": [[109, "impulse-response-plot"]], "Step-Response Plot": [[109, "step-response-plot"]], "Ramp-Response Plot": [[109, "ramp-response-plot"]], "Control Module": [[110, "module-sympy.physics.control"]], "Control API": [[111, "control-api"]], "lti": [[111, "module-sympy.physics.control.lti"]], "High energy physics": [[112, "high-energy-physics"]], "Gamma matrices": [[112, "module-sympy.physics.hep.gamma_matrices"]], "Hydrogen Wavefunctions": [[113, "module-sympy.physics.hydrogen"]], "Potential Issues/Advanced Topics/Future Features in Physics/Mechanics": [[115, "potential-issues-advanced-topics-future-features-in-physics-mechanics"]], "Common Issues": [[115, "common-issues"], [184, "common-issues"]], "Numerically Integrating Code": [[115, "numerically-integrating-code"]], "Differentiating": [[115, "differentiating"]], "Choice of Coordinates and Speeds": [[115, "choice-of-coordinates-and-speeds"]], "Substitution": [[115, "substitution"], [184, "substitution"], [276, "substitution"]], "Linearization": [[115, "linearization"]], "Acceleration of Points": [[115, "acceleration-of-points"], [184, "acceleration-of-points"]], "Advanced Interfaces": [[115, "advanced-interfaces"], [184, "advanced-interfaces"]], "Advanced Functionality": [[115, "advanced-functionality"]], "Future Features": [[115, "future-features"]], "Code Output": [[115, "code-output"]], "Body (Docstrings)": [[116, "module-sympy.physics.mechanics.body"]], "Expression Manipulation (Docstrings)": [[117, "expression-manipulation-docstrings"]], "Mechanics API Reference": [[118, "mechanics-api-reference"]], "Joints Framework (Docstrings)": [[119, "joints-framework-docstrings"]], "Joint (Docstrings)": [[119, "module-sympy.physics.mechanics.joint"]], "Kane\u2019s Method & Lagrange\u2019s Method (Docstrings)": [[120, "module-sympy.physics.mechanics.kane"]], "Linearization (Docstrings)": [[121, "module-sympy.physics.mechanics.linearize"]], "Masses, Inertias & Particles, RigidBodys (Docstrings)": [[122, "module-sympy.physics.mechanics.particle"]], "Printing (Docstrings)": [[123, "printing-docstrings"], [190, "printing-docstrings"]], "mechanics_printing": [[123, "mechanics-printing"]], "mprint": [[123, "mprint"]], "mpprint": [[123, "mpprint"]], "mlatex": [[123, "mlatex"]], "SymbolicSystem (Docstrings)": [[124, "module-sympy.physics.mechanics.system"]], "Autolev Parser": [[125, "autolev-parser"]], "Usage": [[125, "usage"]], "Gotchas": [[125, "gotchas"], [279, "gotchas"]], "Limitations and Issues": [[125, "limitations-and-issues"]], "Future Improvements": [[125, "future-improvements"]], "1. Completing Dynamics Online": [[125, "completing-dynamics-online"]], "2. Fixing Issues": [[125, "fixing-issues"]], "3. Switching to an AST": [[125, "switching-to-an-ast"]], "Examples for Physics/Mechanics": [[126, "examples-for-physics-mechanics"]], "A bicycle": [[127, "a-bicycle"]], "A four bar linkage": [[128, "a-four-bar-linkage"]], "Nonminimal Coordinates Pendulum": [[129, "nonminimal-coordinates-pendulum"]], "Kane\u2019s Method": [[129, "kane-s-method"]], "Lagrange\u2019s Method": [[129, "lagrange-s-method"]], "Multi Degree of Freedom Holonomic System": [[130, "multi-degree-of-freedom-holonomic-system"]], "A rolling disc": [[131, "a-rolling-disc"]], "A rolling disc, with Kane\u2019s method": [[132, "a-rolling-disc-with-kane-s-method"]], "A rolling disc, with Kane\u2019s method and constraint forces": [[133, "a-rolling-disc-with-kane-s-method-and-constraint-forces"]], "A rolling disc using Lagrange\u2019s Method": [[134, "a-rolling-disc-using-lagrange-s-method"]], "Classical Mechanics": [[135, "classical-mechanics"]], "Vector": [[135, "vector"], [194, "vector"], [263, "vector"]], "Mechanics": [[135, "mechanics"], [230, "module-sympy.stats.rv"]], "Guide to Mechanics": [[135, "guide-to-mechanics"]], "Joints Framework in Physics/Mechanics": [[136, "joints-framework-in-physics-mechanics"]], "Joints in Physics/Mechanics": [[136, "joints-in-physics-mechanics"]], "JointsMethod in Physics/Mechanics": [[136, "jointsmethod-in-physics-mechanics"]], "Kane\u2019s Method in Physics/Mechanics": [[137, "kane-s-method-in-physics-mechanics"], [137, "id2"]], "Structure of Equations": [[137, "structure-of-equations"], [138, "structure-of-equations"]], "Lagrange\u2019s Method in Physics/Mechanics": [[138, "lagrange-s-method-in-physics-mechanics"], [138, "id1"]], "Linearization in Physics/Mechanics": [[139, "linearization-in-physics-mechanics"]], "Background": [[139, "background"]], "A Note on Dependent Coordinates and Speeds": [[139, null]], "Linearizing Kane\u2019s Equations": [[139, "linearizing-kane-s-equations"]], "1. Using the Linearizer class directly:": [[139, "using-the-linearizer-class-directly"], [139, "id2"]], "2. Using the linearize class method:": [[139, "using-the-linearize-class-method"], [139, "id3"]], "What\u2019s with the new_method kwarg?": [[139, null]], "Linearizing Lagrange\u2019s Equations": [[139, "linearizing-lagrange-s-equations"]], "Potential Issues": [[139, "potential-issues"]], "1. Symbolic linearization with A_and_B=True is slow": [[139, "symbolic-linearization-with-a-and-b-true-is-slow"]], "2. The linearized form has nan, zoo, or oo as matrix elements": [[139, "the-linearized-form-has-nan-zoo-or-oo-as-matrix-elements"]], "Further Examples": [[139, "further-examples"]], "Masses, Inertias, Particles and Rigid Bodies in Physics/Mechanics": [[140, "masses-inertias-particles-and-rigid-bodies-in-physics-mechanics"]], "Mass": [[140, "mass"]], "Particle": [[140, "particle"]], "Inertia": [[140, "inertia"]], "Rigid Body": [[140, "rigid-body"]], "Dyadic": [[140, "dyadic"]], "Linear Momentum": [[140, "linear-momentum"]], "Angular Momentum": [[140, "angular-momentum"]], "Using momenta functions in Mechanics": [[140, "using-momenta-functions-in-mechanics"]], "Kinetic Energy": [[140, "kinetic-energy"]], "Potential Energy": [[140, "potential-energy"]], "Lagrangian": [[140, "lagrangian"]], "Using energy functions in Mechanics": [[140, "using-energy-functions-in-mechanics"]], "References for Physics/Mechanics": [[141, "references-for-physics-mechanics"]], "SymPy Mechanics for Autolev Users": [[142, "sympy-mechanics-for-autolev-users"]], "Some Key Differences": [[142, "some-key-differences"]], "Rough Autolev-SymPy Equivalents": [[142, "rough-autolev-sympy-equivalents"]], "Mathematical Equivalents": [[142, "mathematical-equivalents"]], "Physical Equivalents": [[142, "physical-equivalents"]], "Numerical Evaluation and Visualization": [[142, "numerical-evaluation-and-visualization"]], "Links": [[142, "links"]], "Symbolic Systems in Physics/Mechanics": [[143, "symbolic-systems-in-physics-mechanics"]], "SymbolicSystem Example Usage": [[143, "symbolicsystem-example-usage"]], "Gaussian Optics": [[144, "module-sympy.physics.optics.gaussopt"]], "Optics Module": [[145, "optics-module"]], "Medium": [[146, "module-sympy.physics.optics.medium"]], "Polarization": [[147, "module-sympy.physics.optics.polarization"]], "Waves": [[149, "module-sympy.physics.optics.waves"]], "Pauli Algebra": [[150, "module-sympy.physics.paulialgebra"]], "Quantum Harmonic Oscillator in 1-D": [[151, "module-sympy.physics.qho_1d"]], "Anticommutator": [[152, "module-sympy.physics.quantum.anticommutator"]], "Cartesian Operators and States": [[153, "module-sympy.physics.quantum.cartesian"]], "Clebsch-Gordan Coefficients": [[154, "module-sympy.physics.quantum.cg"]], "Circuit Plot": [[155, "module-sympy.physics.quantum.circuitplot"]], "Commutator": [[156, "module-sympy.physics.quantum.commutator"]], "Constants": [[157, "module-sympy.physics.quantum.constants"], [180, "constants"]], "Dagger": [[158, "module-sympy.physics.quantum.dagger"]], "Gates": [[159, "module-sympy.physics.quantum.gate"]], "Grover\u2019s Algorithm": [[160, "module-sympy.physics.quantum.grover"]], "Hilbert Space": [[161, "module-sympy.physics.quantum.hilbert"]], "Quantum Mechanics": [[162, "quantum-mechanics"]], "Quantum Functions": [[162, "quantum-functions"]], "States and Operators": [[162, "states-and-operators"]], "Quantum Computation": [[162, "quantum-computation"]], "Analytic Solutions": [[162, "analytic-solutions"]], "Inner Product": [[163, "module-sympy.physics.quantum.innerproduct"]], "Operator": [[164, "module-sympy.physics.quantum.operator"]], "Operator/State Helper Functions": [[165, "module-sympy.physics.quantum.operatorset"]], "Particle in a Box": [[166, "module-sympy.physics.quantum.piab"]], "Qapply": [[167, "module-sympy.physics.quantum.qapply"]], "QFT": [[168, "module-sympy.physics.quantum.qft"]], "Qubit": [[169, "module-sympy.physics.quantum.qubit"]], "Represent": [[170, "module-sympy.physics.quantum.represent"]], "Shor\u2019s Algorithm": [[171, "module-sympy.physics.quantum.shor"]], "Spin": [[172, "module-sympy.physics.quantum.spin"]], "State": [[173, "module-sympy.physics.quantum.state"]], "Tensor Product": [[174, "module-sympy.physics.quantum.tensorproduct"]], "Second Quantization": [[175, "module-sympy.physics.secondquant"]], "Quantum Harmonic Oscillator in 3-D": [[176, "module-sympy.physics.sho"]], "Dimensions and dimension systems": [[177, "module-sympy.physics.units.dimensions"]], "Dimensional analysis": [[178, "dimensional-analysis"]], "Equation with quantities": [[178, "equation-with-quantities"]], "Unit systems": [[179, "unit-systems"]], "Philosophy behind unit systems": [[180, "philosophy-behind-unit-systems"]], "Dimensions": [[180, "dimensions"]], "Group structure": [[180, "group-structure"]], "Linear space representation": [[180, "linear-space-representation"]], "An example": [[180, "an-example"], [220, "an-example"]], "Quantities": [[180, "quantities"]], "Units": [[180, "units"]], "The need for a reference": [[180, "the-need-for-a-reference"]], "Literature": [[180, "literature"], [204, "literature"], [209, "literature"]], "Unit prefixes": [[181, "module-sympy.physics.units.prefixes"]], "Physical quantities": [[182, "module-sympy.physics.units.quantities"]], "Conversion between quantities": [[182, "module-sympy.physics.units.util"]], "Units and unit systems": [[183, "module-sympy.physics.units.unitsystem"]], "Potential Issues/Advanced Topics/Future Features in Physics/Vector Module": [[184, "potential-issues-advanced-topics-future-features-in-physics-vector-module"]], "Inertia (Dyadics)": [[184, "inertia-dyadics"]], "ReferenceFrame": [[184, "referenceframe"]], "dynamicsymbols": [[184, "dynamicsymbols"]], "Essential Classes": [[185, "essential-classes"]], "Docstrings for basic field functions": [[186, "docstrings-for-basic-field-functions"]], "Field operation functions": [[186, "field-operation-functions"]], "Checking the type of vector field": [[186, "checking-the-type-of-vector-field"]], "Essential Functions (Docstrings)": [[187, "essential-functions-docstrings"]], "Physics Vector API": [[188, "physics-vector-api"]], "Kinematics (Docstrings)": [[189, "module-sympy.physics.vector.point"]], "kinematic_equations": [[189, "module-sympy.physics.vector.functions"]], "Scalar and Vector Field Functionality": [[191, "scalar-and-vector-field-functionality"], [262, "scalar-and-vector-field-functionality"]], "Vectors and Scalars": [[191, "vectors-and-scalars"], [264, "vectors-and-scalars"]], "Fields": [[191, "fields"], [264, "fields"]], "Implementation of fields in sympy.physics.vector": [[191, "implementation-of-fields-in-sympy-physics-vector"]], "Field operators and other related functions": [[191, "field-operators-and-other-related-functions"]], "Curl": [[191, "curl"], [262, "curl"]], "Divergence": [[191, "divergence"], [262, "divergence"]], "Gradient": [[191, "gradient"], [262, "gradient"]], "Conservative and Solenoidal fields": [[191, "conservative-and-solenoidal-fields"], [262, "conservative-and-solenoidal-fields"]], "Scalar potential functions": [[191, "scalar-potential-functions"], [262, "scalar-potential-functions"]], "The Physics Vector Module": [[192, "the-physics-vector-module"]], "References for Physics/Vector": [[192, "references-for-physics-vector"]], "Guide to Vector": [[192, "guide-to-vector"], [263, "guide-to-vector"]], "Vector: Kinematics": [[193, "vector-kinematics"]], "Introduction to Kinematics": [[193, "introduction-to-kinematics"]], "Angular Velocity": [[193, "angular-velocity"]], "Angular Acceleration": [[193, "angular-acceleration"]], "Point Velocity & Acceleration": [[193, "point-velocity-acceleration"]], "Kinematics in physics.vector": [[193, "kinematics-in-physics-vector"]], "Vector & ReferenceFrame": [[194, "vector-referenceframe"]], "Vector Algebra": [[194, "vector-algebra"]], "Vector Operations": [[194, "vector-operations"]], "Alternative Representation": [[194, "alternative-representation"]], "Vector Calculus": [[194, "vector-calculus"]], "Derivatives of Vectors": [[194, "derivatives-of-vectors"]], "Relating Sets of Basis Vectors": [[194, "relating-sets-of-basis-vectors"]], "Derivatives with Multiple Frames": [[194, "derivatives-with-multiple-frames"]], "Using Vectors and Reference Frames": [[194, "using-vectors-and-reference-frames"]], "Vector Algebra, in physics.vector": [[194, "vector-algebra-in-physics-vector"]], "Vector Calculus, in physics.vector": [[194, "vector-calculus-in-physics-vector"]], "How Vectors are Coded": [[194, "how-vectors-are-coded"]], "Wigner Symbols": [[195, "module-sympy.physics.wigner"]], "Credits and Copyright": [[195, "credits-and-copyright"]], "Authors": [[195, "authors"]], "Plot Class": [[196, "plot-class"]], "Plotting Function Reference": [[196, "plotting-function-reference"]], "PlotGrid Class": [[196, "plotgrid-class"]], "Series Classes": [[196, "series-classes"]], "Backends": [[196, "backends"]], "Pyglet Plotting": [[196, "module-sympy.plotting.pygletplot"]], "Plot Window Controls": [[196, "plot-window-controls"]], "Coordinate Modes": [[196, "coordinate-modes"]], "Specifying Intervals for Variables": [[196, "specifying-intervals-for-variables"]], "Using the Interactive Interface": [[196, "using-the-interactive-interface"]], "Using Custom Color Functions": [[196, "using-custom-color-functions"]], "Plotting Geometric Entities": [[196, "plotting-geometric-entities"]], "Plotting with ASCII art": [[196, "plotting-with-ascii-art"]], "AGCA - Algebraic Geometry and Commutative Algebra Module": [[197, "agca-algebraic-geometry-and-commutative-algebra-module"]], "Base Rings": [[197, "base-rings"]], "Modules, Ideals and their Elementary Properties": [[197, "modules-ideals-and-their-elementary-properties"]], "Module Homomorphisms and Syzygies": [[197, "module-homomorphisms-and-syzygies"]], "Finite Extensions": [[197, "finite-extensions"]], "Basic functionality of the module": [[198, "basic-functionality-of-the-module"]], "Basic concepts": [[198, "basic-concepts"]], "Polynomials": [[198, "polynomials"]], "Divisibility": [[198, "divisibility"]], "Integral domains": [[198, "integral-domains"]], "Factorial domains": [[198, "factorial-domains"]], "Euclidean domains": [[198, "euclidean-domains"]], "Divisibility of polynomials": [[198, "divisibility-of-polynomials"]], "Basic functionality": [[198, "basic-functionality"]], "Division": [[198, "division"]], "GCD and LCM": [[198, "gcd-and-lcm"]], "Square-free factorization": [[198, "square-free-factorization"]], "Factorization": [[198, "factorization"]], "Groebner bases": [[198, "groebner-bases"]], "Solving Equations": [[198, "solving-equations"]], "Introducing the domainmatrix of the poly module": [[199, "introducing-the-domainmatrix-of-the-poly-module"]], "What is domainmatrix?": [[199, "what-is-domainmatrix"]], "Introducing the Domains of the poly module": [[200, "introducing-the-domains-of-the-poly-module"]], "What are the domains?": [[200, "what-are-the-domains"]], "Representing expressions symbolically": [[200, "representing-expressions-symbolically"]], "Tree representation": [[200, "tree-representation"]], "DUP representation": [[200, "dup-representation"]], "DMP representation": [[200, "dmp-representation"]], "Sparse polynomial representation": [[200, "sparse-polynomial-representation"]], "Basic usage of domains": [[200, "basic-usage-of-domains"]], "Domain elements vs sympy expressions": [[200, "domain-elements-vs-sympy-expressions"]], "Gaussian integers and Gaussian rationals": [[200, "gaussian-integers-and-gaussian-rationals"]], "Finite fields": [[200, "finite-fields"]], "Real and complex fields": [[200, "real-and-complex-fields"]], "Algebraic number fields": [[200, "algebraic-number-fields"], [205, "algebraic-number-fields"]], "Polynomial ring domains": [[200, "polynomial-ring-domains"]], "Old (dense) polynomial rings": [[200, "old-dense-polynomial-rings"]], "PolyRing vs PolynomialRing": [[200, "polyring-vs-polynomialring"]], "Rational function fields": [[200, "rational-function-fields"]], "Expression domain": [[200, "expression-domain"]], "Choosing a domain": [[200, "choosing-a-domain"]], "Converting elements between different domains": [[200, "converting-elements-between-different-domains"]], "Unifying domains": [[200, "unifying-domains"]], "Internals of a Poly": [[200, "internals-of-a-poly"]], "Choosing a domain for a Poly": [[200, "choosing-a-domain-for-a-poly"]], "Choosing generators": [[200, "choosing-generators"]], "Algebraically dependent generators": [[200, "algebraically-dependent-generators"]], "Reference docs for the Poly Domains": [[201, "reference-docs-for-the-poly-domains"]], "Domains": [[201, "domains"]], "Abstract Domains": [[201, "abstract-domains"]], "GF(p)": [[201, "gf-p"]], "ZZ": [[201, "zz"]], "QQ": [[201, "qq"]], "MPQ": [[201, "mpq"]], "Gaussian domains": [[201, "gaussian-domains"]], "ZZ_I": [[201, "zz-i"]], "QQ_I": [[201, "qq-i"]], "QQ<a>": [[201, "qq-a"]], "RR": [[201, "rr"]], "CC": [[201, "cc"]], "K[x]": [[201, "k-x"]], "K(x)": [[201, "id11"]], "EX": [[201, "ex"]], "Quotient ring": [[201, "quotient-ring"]], "Sparse polynomials": [[201, "sparse-polynomials"]], "Sparse rational functions": [[201, "sparse-rational-functions"]], "Dense polynomials": [[201, "dense-polynomials"]], "Polynomial Manipulation": [[202, "polynomial-manipulation"]], "Internals of the Polynomial Manipulation Module": [[203, "internals-of-the-polynomial-manipulation-module"]], "Level Zero": [[203, "level-zero"]], "Manipulation of dense, multivariate polynomials": [[203, "manipulation-of-dense-multivariate-polynomials"]], "Manipulation of dense, univariate polynomials with finite field coefficients": [[203, "manipulation-of-dense-univariate-polynomials-with-finite-field-coefficients"]], "Manipulation of sparse, distributed polynomials and vectors": [[203, "manipulation-of-sparse-distributed-polynomials-and-vectors"]], "Polynomial factorization algorithms": [[203, "polynomial-factorization-algorithms"]], "Classical remainder sequence": [[203, "classical-remainder-sequence"]], "Simplified remainder sequences": [[203, "simplified-remainder-sequences"]], "Subresultant sequence": [[203, "subresultant-sequence"]], "Groebner basis algorithms": [[203, "groebner-basis-algorithms"]], "Options": [[203, "module-sympy.polys.polyoptions"]], "Configuration": [[203, "module-sympy.polys.polyconfig"]], "Exceptions": [[203, "exceptions"]], "Modular GCD": [[203, "modular-gcd"]], "Undocumented": [[203, "undocumented"]], "Number Fields": [[205, "number-fields"]], "Solving the Main Problems": [[205, "solving-the-main-problems"]], "Integral Basis": [[205, "integral-basis"]], "Prime Decomposition": [[205, "prime-decomposition"]], "p-adic Valuation": [[205, "p-adic-valuation"]], "Finding Minimal Polynomials": [[205, "finding-minimal-polynomials"]], "The Subfield Problem": [[205, "the-subfield-problem"]], "Representing algebraic numbers": [[205, "representing-algebraic-numbers"]], "As number field elements": [[205, "as-number-field-elements"]], "As elements of finitely-generated modules": [[205, "as-elements-of-finitely-generated-modules"]], "Finitely-generated modules": [[205, "module-sympy.polys.numberfields.modules"]], "Arithmetic with module elements": [[205, "arithmetic-with-module-elements"]], "Multiplication": [[205, "multiplication"]], "Module Homomorphisms": [[205, "module-homomorphisms"]], "Class Reference": [[205, "class-reference"]], "Polynomials Manipulation Module Reference": [[206, "module-sympy.polys"]], "Basic polynomial manipulation functions": [[206, "basic-polynomial-manipulation-functions"]], "Extra polynomial manipulation functions": [[206, "extra-polynomial-manipulation-functions"]], "Domain constructors": [[206, "domain-constructors"]], "Monomials encoded as tuples": [[206, "monomials-encoded-as-tuples"]], "Orderings of monomials": [[206, "orderings-of-monomials"]], "Formal manipulation of roots of polynomials": [[206, "formal-manipulation-of-roots-of-polynomials"]], "Symbolic root-finding algorithms": [[206, "symbolic-root-finding-algorithms"]], "Special polynomials": [[206, "special-polynomials"]], "Orthogonal polynomials": [[206, "orthogonal-polynomials"]], "Appell sequences": [[206, "appell-sequences"]], "Manipulation of rational functions": [[206, "manipulation-of-rational-functions"]], "Partial fraction decomposition": [[206, "partial-fraction-decomposition"], [209, "partial-fraction-decomposition"]], "Dispersion of Polynomials": [[206, "dispersion-of-polynomials"]], "Series Manipulation using Polynomials": [[207, "series-manipulation-using-polynomials"]], "rs_series": [[207, "rs-series"]], "Contribute": [[207, "contribute"]], "Poly solvers": [[208, "poly-solvers"]], "Examples from Wester\u2019s Article": [[209, "examples-from-wester-s-article"]], "Simple univariate polynomial factorization": [[209, "simple-univariate-polynomial-factorization"]], "Univariate GCD, resultant and factorization": [[209, "univariate-gcd-resultant-and-factorization"]], "Multivariate GCD and factorization": [[209, "multivariate-gcd-and-factorization"]], "Support for symbols in exponents": [[209, "support-for-symbols-in-exponents"]], "Testing if polynomials have common zeros": [[209, "testing-if-polynomials-have-common-zeros"]], "Normalizing simple rational functions": [[209, "normalizing-simple-rational-functions"]], "Expanding expressions and factoring back": [[209, "expanding-expressions-and-factoring-back"]], "Factoring in terms of cyclotomic polynomials": [[209, "factoring-in-terms-of-cyclotomic-polynomials"]], "Univariate factoring over Gaussian numbers": [[209, "univariate-factoring-over-gaussian-numbers"]], "Computing with automatic field extensions": [[209, "computing-with-automatic-field-extensions"]], "Univariate factoring over various domains": [[209, "univariate-factoring-over-various-domains"]], "Factoring polynomials into linear factors": [[209, "factoring-polynomials-into-linear-factors"]], "Advanced factoring over finite fields": [[209, "advanced-factoring-over-finite-fields"]], "Working with expressions as polynomials": [[209, "working-with-expressions-as-polynomials"]], "Computing reduced Gr\u00f6bner bases": [[209, "computing-reduced-grobner-bases"]], "Multivariate factoring over algebraic numbers": [[209, "multivariate-factoring-over-algebraic-numbers"]], "Printer Class": [[210, "module-sympy.printing.printer"]], "Which Method is Responsible for Printing?": [[210, "which-method-is-responsible-for-printing"]], "Example of Custom Printer": [[210, "example-of-custom-printer"]], "Example of Custom Printing Method": [[210, "example-of-custom-printing-method"]], "Common mistakes": [[210, "common-mistakes"]], "PrettyPrinter Class": [[210, "prettyprinter-class"]], "C code printers": [[210, "module-sympy.printing.c"]], "C++ code printers": [[210, "module-sympy.printing.cxx"]], "RCodePrinter": [[210, "module-sympy.printing.rcode"]], "Fortran Printing": [[210, "fortran-printing"]], "SMT-Lib printing": [[210, "module-sympy.printing.smtlib"]], "Mathematica code printing": [[210, "module-sympy.printing.mathematica"]], "Maple code printing": [[210, "module-sympy.printing.maple"]], "Javascript Code printing": [[210, "module-sympy.printing.jscode"]], "Julia code printing": [[210, "module-sympy.printing.julia"]], "Octave (and Matlab) Code printing": [[210, "module-sympy.printing.octave"]], "Rust code printing": [[210, "module-sympy.printing.rust"]], "Aesara Code printing": [[210, "module-sympy.printing.aesaracode"]], "Gtk": [[210, "module-sympy.printing.gtk"]], "LambdaPrinter": [[210, "module-sympy.printing.lambdarepr"]], "LatexPrinter": [[210, "module-sympy.printing.latex"]], "MathMLPrinter": [[210, "module-sympy.printing.mathml"]], "PythonCodePrinter": [[210, "module-sympy.printing.pycode"]], "PythonPrinter": [[210, "module-sympy.printing.python"]], "srepr": [[210, "module-sympy.printing.repr"], [286, "srepr"]], "StrPrinter": [[210, "module-sympy.printing.str"]], "Tree Printing": [[210, "module-sympy.printing.tree"]], "Preview": [[210, "preview"]], "Implementation - Helper Classes/Functions": [[210, "module-sympy.printing.conventions"]], "CodePrinter": [[210, "module-sympy.printing.codeprinter"]], "Precedence": [[210, "module-sympy.printing.precedence"]], "Pretty-Printing Implementation Helpers": [[210, "module-sympy.printing.pretty.pretty_symbology"]], "dotprint": [[210, "dotprint"]], "Term Rewriting": [[211, "term-rewriting"]], "Expanding": [[211, "expanding"]], "Common Subexpression Detection and Collection": [[211, "common-subexpression-detection-and-collection"]], "Formal Power Series": [[212, "formal-power-series"]], "Rational Algorithm": [[212, "rational-algorithm"]], "Hypergeometric Algorithm": [[212, "hypergeometric-algorithm"]], "Fourier Series": [[213, "fourier-series"]], "Series": [[214, "series"]], "Limits of Sequences": [[215, "limits-of-sequences"]], "Sequences": [[216, "sequences"]], "Sequences Base": [[216, "sequences-base"]], "Elementary Sequences": [[216, "elementary-sequences"]], "Singleton Sequences": [[216, "singleton-sequences"]], "Compound Sequences": [[216, "compound-sequences"]], "Recursive Sequences": [[216, "recursive-sequences"]], "Series Expansions": [[217, "series-expansions"]], "Limits": [[217, "limits"], [277, "limits"]], "The Gruntz Algorithm": [[217, "the-gruntz-algorithm"]], "More Intuitive Series Expansion": [[217, "more-intuitive-series-expansion"]], "Order Terms": [[217, "order-terms"]], "Series Acceleration": [[217, "series-acceleration"]], "Residues": [[217, "residues"]], "Basic Sets": [[218, "module-sympy.sets.sets"]], "Elementary Sets": [[218, "elementary-sets"]], "Compound Sets": [[218, "compound-sets"]], "Singleton Sets": [[218, "singleton-sets"]], "Special Sets": [[218, "module-sympy.sets.fancysets"]], "Power sets": [[218, "module-sympy.sets.powerset"]], "Condition Sets": [[218, "module-sympy.sets.conditionset"]], "SetKind": [[218, "setkind"]], "Iteration over sets": [[218, "iteration-over-sets"]], "Hongguang Fu\u2019s Trigonometric Simplification": [[219, "hongguang-fu-s-trigonometric-simplification"]], "Rules": [[219, "rules"]], "Hypergeometric Expansion": [[220, "hypergeometric-expansion"]], "Hypergeometric Function Expansion Algorithm": [[220, "hypergeometric-function-expansion-algorithm"]], "Notation": [[220, "notation"]], "Incrementing and decrementing indices": [[220, "incrementing-and-decrementing-indices"]], "Reduction of Order": [[220, "reduction-of-order"]], "Moving Around in the Parameter Space": [[220, "moving-around-in-the-parameter-space"]], "Applying the Operators": [[220, "applying-the-operators"]], "Loose Ends": [[220, "loose-ends"]], "Meijer G-Functions of Finite Confluence": [[220, "meijer-g-functions-of-finite-confluence"]], "Extending The Hypergeometric Tables": [[220, "extending-the-hypergeometric-tables"]], "Implemented Hypergeometric Formulae": [[220, "implemented-hypergeometric-formulae"]], "Simplify": [[221, "simplify"], [222, "simplify"]], "Diophantine": [[223, "diophantine"]], "Diophantine equations": [[223, "diophantine-equations"]], "Module structure": [[223, "module-structure"]], "Tutorial": [[223, "tutorial"]], "User Functions": [[223, "user-functions"], [226, "user-functions"], [227, "user-functions"]], "Internal Functions": [[223, "internal-functions"]], "Internal Classes": [[223, "internal-classes"]], "Solvers": [[224, "solvers"], [228, "module-sympy.solvers"], [288, "solvers"]], "Inequality Solvers": [[225, "inequality-solvers"]], "ODE": [[226, "ode"]], "Hint Functions": [[226, "hint-functions"]], "Lie heuristics": [[226, "lie-heuristics"]], "Rational Riccati Solver": [[226, "rational-riccati-solver"]], "System of ODEs": [[226, "system-of-odes"]], "Information on the ode module": [[226, "module-sympy.solvers.ode.ode"]], "PDE": [[227, "pde"]], "Hint Methods": [[227, "hint-methods"]], "Information on the pde module": [[227, "module-sympy.solvers.pde"]], "Algebraic equations": [[228, "algebraic-equations"]], "Ordinary Differential equations (ODEs)": [[228, "ordinary-differential-equations-odes"], [229, "ordinary-differential-equations-odes"]], "Partial Differential Equations (PDEs)": [[228, "partial-differential-equations-pdes"], [229, "partial-differential-equations-pdes"]], "Deutils (Utilities for solving ODE\u2019s and PDE\u2019s)": [[228, "deutils-utilities-for-solving-ode-s-and-pde-s"]], "Recurrence Equations": [[228, "module-sympy.solvers.recurr"]], "Systems of Polynomial Equations": [[228, "systems-of-polynomial-equations"]], "Diophantine Equations (DEs)": [[228, "diophantine-equations-des"], [229, "diophantine-equations-des"]], "Inequalities": [[228, "inequalities"], [229, "inequalities"]], "Solveset": [[229, "solveset"]], "What\u2019s wrong with solve():": [[229, "what-s-wrong-with-solve"]], "Why Solveset?": [[229, "why-solveset"]], "Why do we use Sets as an output type?": [[229, "why-do-we-use-sets-as-an-output-type"]], "Input API of solveset": [[229, "input-api-of-solveset"]], "What is this domain argument about?": [[229, "what-is-this-domain-argument-about"]], "What are the general methods employed by solveset to solve an equation?": [[229, "what-are-the-general-methods-employed-by-solveset-to-solve-an-equation"]], "How do we manipulate and return an infinite solution?": [[229, "how-do-we-manipulate-and-return-an-infinite-solution"]], "How does solveset ensure that it is not returning any wrong solution?": [[229, "how-does-solveset-ensure-that-it-is-not-returning-any-wrong-solution"]], "Search based solver and step-by-step solution": [[229, "search-based-solver-and-step-by-step-solution"]], "How do we deal with cases where only some of the solutions are known?": [[229, "how-do-we-deal-with-cases-where-only-some-of-the-solutions-are-known"]], "What is the plan for solve and solveset?": [[229, "what-is-the-plan-for-solve-and-solveset"]], "How are symbolic parameters handled in solveset?": [[229, "how-are-symbolic-parameters-handled-in-solveset"]], "Solveset Module Reference": [[229, "solveset-module-reference"]], "transolve": [[229, "transolve"]], "Stats": [[230, "module-sympy.stats"]], "Random Variable Types": [[230, "random-variable-types"]], "Finite Types": [[230, "finite-types"]], "Discrete Types": [[230, "discrete-types"]], "Continuous Types": [[230, "continuous-types"]], "Joint Types": [[230, "joint-types"]], "Stochastic Processes": [[230, "stochastic-processes"]], "Matrix Distributions": [[230, "matrix-distributions"]], "Compound Distribution": [[230, "compound-distribution"]], "Interface": [[230, "interface"]], "N-dim array": [[231, "module-sympy.tensor.array"]], "Products and contractions": [[231, "products-and-contractions"]], "Diagonal operator": [[231, "diagonal-operator"]], "Derivatives by array": [[231, "derivatives-by-array"]], "Classes": [[231, "classes"]], "N-dim array expressions": [[232, "module-sympy.tensor.array.expressions"]], "Constructing array expressions from index-explicit forms": [[232, "constructing-array-expressions-from-index-explicit-forms"]], "Compatibility with matrices": [[232, "compatibility-with-matrices"]], "Tensor": [[233, "module-sympy.tensor"], [236, "module-sympy.tensor.tensor"]], "Methods": [[234, "module-sympy.tensor.index_methods"]], "Indexed Objects": [[235, "module-sympy.tensor.indexed"]], "Tensor Operators": [[237, "module-sympy.tensor.toperators"]], "Testing": [[238, "testing"]], "pytest": [[239, "module-sympy.testing.pytest"]], "Randomised Testing": [[240, "module-sympy.testing.randtest"]], "Run Tests": [[241, "module-sympy.testing.runtests"]], "Autowrap Module": [[242, "autowrap-module"]], "Implementation details": [[242, "implementation-details"]], "Codegen": [[243, "codegen"]], "Implementation Details": [[243, "implementation-details"]], "Routine": [[243, "routine"]], "Decorator": [[244, "module-sympy.utilities.decorator"]], "Enumerative": [[245, "module-sympy.utilities.enumerative"]], "Exceptions and Warnings": [[246, "module-sympy.utilities.exceptions"]], "Iterables": [[248, "module-sympy.utilities.iterables"]], "variations": [[248, "variations"]], "partitions": [[248, "partitions"]], "Memoization": [[250, "module-sympy.utilities.memoization"]], "PKGDATA": [[252, "module-sympy.utilities.pkgdata"]], "Source Code Inspection": [[253, "module-sympy.utilities.source"]], "Timing Utilities": [[254, "module-sympy.utilities.timeutils"]], "Essential Classes in sympy.vector (docstrings)": [[255, "essential-classes-in-sympy-vector-docstrings"]], "Vector API": [[256, "vector-api"]], "Orienter classes (docstrings)": [[257, "orienter-classes-docstrings"]], "Essential Functions in sympy.vector (docstrings)": [[258, "essential-functions-in-sympy-vector-docstrings"]], "Basic Implementation details": [[259, "basic-implementation-details"]], "Coordinate Systems and Vectors": [[259, "coordinate-systems-and-vectors"]], "SymPy operations on Vectors": [[259, "sympy-operations-on-vectors"]], "Dyadics": [[259, "dyadics"]], "More about Coordinate Systems": [[260, "more-about-coordinate-systems"]], "Locating new systems": [[260, "locating-new-systems"]], "Orienting new systems": [[260, "orienting-new-systems"]], "Using a method of CoordSys3D directly": [[260, "using-a-method-of-coordsys3d-directly"]], "Using Orienter(s) and the orient_new method": [[260, "using-orienter-s-and-the-orient-new-method"]], "Orienting AND Locating new systems": [[260, "orienting-and-locating-new-systems"]], "Transforming new system": [[260, "transforming-new-system"]], "Expression of quantities in different coordinate systems": [[260, "expression-of-quantities-in-different-coordinate-systems"]], "Vectors and Dyadics": [[260, "vectors-and-dyadics"]], "Coordinate Variables": [[260, "coordinate-variables"]], "Other expression-dependent methods": [[260, "other-expression-dependent-methods"]], "General examples of usage": [[261, "general-examples-of-usage"]], "Quadrilateral problem": [[261, "quadrilateral-problem"]], "The Problem": [[261, "the-problem"], [261, "id1"]], "Solution": [[261, "solution"], [261, "id2"]], "Third product rule for Del operator": [[261, "third-product-rule-for-del-operator"]], "See": [[261, "see"]], "Implementation in sympy.vector": [[262, "implementation-in-sympy-vector"]], "Scalar and vector fields": [[262, "scalar-and-vector-fields"]], "The Del operator": [[262, "the-del-operator"]], "Field operators and related functions": [[262, "field-operators-and-related-functions"]], "Directional Derivative": [[262, "directional-derivative"]], "Field operator in orthogonal curvilinear coordinate system": [[262, "field-operator-in-orthogonal-curvilinear-coordinate-system"]], "References for Vector": [[263, "references-for-vector"]], "Coordinate Systems": [[264, "coordinate-systems"]], "Applications of Vector Integrals": [[265, "applications-of-vector-integrals"]], "Calculation of Perimeter, Surface Area, and Volume": [[265, "calculation-of-perimeter-surface-area-and-volume"]], "Calculation of mass of a body": [[265, "calculation-of-mass-of-a-body"]], "Calculation of Flux": [[265, "calculation-of-flux"]], "Verifying Stoke\u2019s Theorem": [[265, "verifying-stoke-s-theorem"]], "Verifying Divergence Theorem": [[265, "verifying-divergence-theorem"]], "Physics": [[266, "physics"], [272, "module-sympy.physics"]], "Topics": [[266, "topics"], [273, "topics"]], "Introductory Tutorial": [[275, "introductory-tutorial"], [280, "introductory-tutorial"]], "Basic Operations": [[276, "basic-operations"], [283, "basic-operations"]], "Quick Tip": [[276, null], [277, null], [279, null], [282, null], [283, null]], "Converting Strings to SymPy Expressions": [[276, "converting-strings-to-sympy-expressions"]], "Derivatives": [[277, "derivatives"]], "Series Expansion": [[277, "series-expansion"]], "Finite differences": [[277, "finite-differences"]], "SymPy Features": [[278, "sympy-features"]], "Equals signs": [[279, "equals-signs"]], "Two Final Notes: ^ and /": [[279, "two-final-notes-and"]], "Further Reading": [[279, "further-reading"]], "What is Symbolic Computation?": [[281, "what-is-symbolic-computation"]], "A More Interesting Example": [[281, "a-more-interesting-example"]], "The Power of Symbolic Computation": [[281, "the-power-of-symbolic-computation"]], "Why SymPy?": [[281, "why-sympy"]], "Advanced Expression Manipulation": [[282, "advanced-expression-manipulation"]], "Understanding Expression Trees": [[282, "understanding-expression-trees"]], "Recursing through an Expression Tree": [[282, "recursing-through-an-expression-tree"]], "args": [[282, "args"]], "Key Invariant": [[282, null]], "Walking the Tree": [[282, "walking-the-tree"]], "Prevent expression evaluation": [[282, "prevent-expression-evaluation"]], "Shape": [[283, "shape"]], "Accessing Rows and Columns": [[283, "accessing-rows-and-columns"]], "Deleting and Inserting Rows and Columns": [[283, "deleting-and-inserting-rows-and-columns"]], "Basic Methods": [[283, "basic-methods"]], "Matrix Constructors": [[283, "matrix-constructors"]], "Advanced Methods": [[283, "advanced-methods"]], "Determinant": [[283, "determinant"]], "RREF": [[283, "rref"]], "Nullspace": [[283, "nullspace"]], "Columnspace": [[283, "columnspace"]], "Eigenvalues, Eigenvectors, and Diagonalization": [[283, "eigenvalues-eigenvectors-and-diagonalization"]], "Possible Issues": [[283, "possible-issues"]], "Zero Testing": [[283, "zero-testing"]], "What\u2019s Next": [[284, "whats-next"]], "Preliminaries": [[285, "preliminaries"]], "Exercises": [[285, "exercises"]], "Printers": [[286, "printers"]], "Setting up Pretty Printing": [[286, "setting-up-pretty-printing"]], "Printing Functions": [[286, "printing-functions"]], "str": [[286, "str"]], "ASCII Pretty Printer": [[286, "ascii-pretty-printer"]], "Unicode Pretty Printer": [[286, "unicode-pretty-printer"]], "\\mathrm{\\LaTeX}": [[286, "mathrm-latex"]], "MathML": [[286, "mathml"]], "Dot": [[286, "dot"]], "Simplification": [[287, "simplification"]], "simplify": [[287, "simplify"]], "Polynomial/Rational Function Simplification": [[287, "polynomial-rational-function-simplification"]], "expand": [[287, "expand"]], "factor": [[287, "factor"]], "collect": [[287, "collect"]], "cancel": [[287, "cancel"]], "apart": [[287, "apart"]], "Trigonometric Simplification": [[287, "trigonometric-simplification"]], "trigsimp": [[287, "trigsimp"]], "expand_trig": [[287, "expand-trig"]], "Powers": [[287, "powers"]], "powsimp": [[287, "powsimp"]], "expand_power_exp / expand_power_base": [[287, "expand-power-exp-expand-power-base"]], "powdenest": [[287, "powdenest"]], "Exponentials and logarithms": [[287, "exponentials-and-logarithms"]], "expand_log": [[287, "expand-log"]], "logcombine": [[287, "logcombine"]], "Special Functions": [[287, "special-functions"]], "rewrite": [[287, "rewrite"]], "expand_func": [[287, "expand-func"]], "hyperexpand": [[287, "hyperexpand"]], "combsimp": [[287, "combsimp"]], "gammasimp": [[287, "gammasimp"]], "Example: Continued Fractions": [[287, "example-continued-fractions"]], "A Note about Equations": [[288, "a-note-about-equations"]], "Solving Equations Algebraically": [[288, "solving-equations-algebraically"]], "Solving Differential Equations": [[288, "solving-differential-equations"]]}, "indexentries": {"antiderivative": [[11, "term-Antiderivative"]], "assumptions": [[11, "term-Assumptions"]], "atom": [[11, "term-Atom"]], "automatic simplification": [[11, "term-Automatic-Simplification"]], "basic": [[11, "term-Basic"]], "boolean": [[11, "term-Boolean"]], "bound symbols": [[11, "term-Bound-symbols"]], "canonical form": [[11, "term-Canonical-Form"]], "canonicalize": [[11, "term-Canonicalize"]], "code generation": [[11, "term-Code-Generation"]], "core": [[11, "term-Core"]], "dummy": [[11, "term-Dummy"]], "equation": [[11, "term-Equation"]], "evaluate": [[11, "term-Evaluate"]], "expr": [[11, "term-Expr"]], "expression": [[11, "term-Expression"]], "expression tree": [[11, "term-Expression-Tree"]], "free symbols": [[11, "term-Free-symbols"]], "function": [[11, "term-Function"]], "function (class)": [[11, "term-Function-class"]], "immutable": [[11, "term-Immutable"]], "interactive": [[11, "term-Interactive"]], "kind": [[11, "term-Kind"]], "matrix": [[11, "term-Matrix"]], "number": [[11, "term-Number"]], "numeric": [[11, "term-Numeric"]], "polys": [[11, "term-Polys"]], "printing": [[11, "term-Printing"]], "relational": [[11, "term-Relational"]], "s": [[11, "term-S"]], "simplification": [[11, "term-Simplification"]], "solve": [[11, "term-Solve"]], "solvers": [[11, "term-Solvers"]], "structural equality": [[11, "term-Structural-Equality"]], "subexpression": [[11, "term-Subexpression"]], "substitution": [[11, "term-Substitution"]], "symbol": [[11, "term-Symbol"]], "symbolic": [[11, "term-Symbolic"]], "three-valued logic": [[11, "term-Three-valued-logic"]], "undefined function": [[11, "term-Undefined-Function"]], "unevaluated": [[11, "term-Unevaluated"]], "_eval_*": [[11, "term-_eval_"]], "args": [[11, "term-args"]], "evalf": [[11, "term-evalf"]], "func": [[11, "term-func"]], "is_*": [[11, "term-is_"]], "isympy": [[11, "term-isympy"]], "lambdify()": [[11, "term-lambdify"]], "lamda": [[11, "term-lamda"]], "mpmath": [[11, "term-mpmath"]], "oo": [[11, "term-oo"]], "sympify()": [[11, "term-sympify"]], "zoo": [[11, "term-zoo"]], "module": [[12, "module-sympy.simplify.simplify"], [32, "module-sympy"], [34, "module-sympy.abc"], [35, "module-sympy.algebras"], [36, "module-sympy.assumptions.ask"], [37, "module-sympy.assumptions.assume"], [38, "module-sympy.assumptions"], [39, "module-sympy.assumptions.predicates"], [40, "module-sympy.assumptions.refine"], [41, "module-sympy.calculus"], [41, "module-sympy.calculus.euler"], [41, "module-sympy.calculus.finite_diff"], [41, "module-sympy.calculus.singularities"], [41, "module-sympy.calculus.util"], [42, "module-sympy.categories"], [42, "module-sympy.categories.diagram_drawing"], [43, "module-sympy.codegen.algorithms"], [43, "module-sympy.codegen.approximations"], [43, "module-sympy.codegen.ast"], [43, "module-sympy.codegen.cfunctions"], [43, "module-sympy.codegen.cnodes"], [43, "module-sympy.codegen.cutils"], [43, "module-sympy.codegen.cxxnodes"], [43, "module-sympy.codegen.fnodes"], [43, "module-sympy.codegen.futils"], [43, "module-sympy.codegen.matrix_nodes"], [43, "module-sympy.codegen.pyutils"], [43, "module-sympy.codegen.rewriting"], [45, "module-sympy.combinatorics.graycode"], [46, "module-sympy.combinatorics.group_constructs"], [47, "module-sympy.combinatorics.group_numbers"], [49, "module-sympy.combinatorics.named_groups"], [50, "module-sympy.combinatorics.partitions"], [52, "module-sympy.combinatorics.perm_groups"], [53, "module-sympy.combinatorics.generators"], [53, "module-sympy.combinatorics.permutations"], [54, "module-sympy.combinatorics.polyhedron"], [55, "module-sympy.combinatorics.prufer"], [56, "module-sympy.combinatorics.subsets"], [57, "module-sympy.combinatorics.tensor_can"], [58, "module-sympy.combinatorics.testutil"], [59, "module-sympy.combinatorics.util"], [61, "module-sympy.core.add"], [61, "module-sympy.core.assumptions"], [61, "module-sympy.core.basic"], [61, "module-sympy.core.cache"], [61, "module-sympy.core.containers"], [61, "module-sympy.core.evalf"], [61, "module-sympy.core.expr"], [61, "module-sympy.core.exprtools"], [61, "module-sympy.core.function"], [61, "module-sympy.core.kind"], [61, "module-sympy.core.mod"], [61, "module-sympy.core.mul"], [61, "module-sympy.core.multidimensional"], [61, "module-sympy.core.numbers"], [61, "module-sympy.core.power"], [61, "module-sympy.core.random"], [61, "module-sympy.core.relational"], [61, "module-sympy.core.singleton"], [61, "module-sympy.core.symbol"], [61, "module-sympy.core.sympify"], [61, "module-sympy.core.traversal"], [62, "module-sympy.crypto.crypto"], [63, "module-sympy.diffgeom"], [64, "module-sympy.discrete"], [64, "module-sympy.discrete.convolutions"], [64, "module-sympy.discrete.transforms"], [68, "module-sympy.functions"], [69, "module-sympy.functions.special.bessel"], [69, "module-sympy.functions.special.beta_functions"], [69, "module-sympy.functions.special.elliptic_integrals"], [69, "module-sympy.functions.special.error_functions"], [69, "module-sympy.functions.special.gamma_functions"], [69, "module-sympy.functions.special.mathieu_functions"], [69, "module-sympy.functions.special.polynomials"], [69, "module-sympy.functions.special.singularity_functions"], [69, "module-sympy.functions.special.zeta_functions"], [70, "module-sympy.geometry.curve"], [71, "module-sympy.geometry.ellipse"], [72, "module-sympy.geometry.entity"], [74, "module-sympy.geometry.line"], [75, "module-sympy.geometry.plane"], [76, "module-sympy.geometry.point"], [77, "module-sympy.geometry.polygon"], [78, "module-sympy.geometry.util"], [81, "module-sympy.holonomic"], [86, "module-sympy.integrals.meijerint"], [86, "module-sympy.integrals.meijerint_doc"], [88, "module-sympy.integrals"], [88, "module-sympy.integrals.intpoly"], [88, "module-sympy.integrals.transforms"], [89, "module-sympy.interactive"], [89, "module-sympy.interactive.printing"], [89, "module-sympy.interactive.session"], [90, "module-sympy.liealgebras"], [91, "module-sympy.logic"], [91, "module-sympy.logic.inference"], [92, "module-sympy.matrices.common"], [94, "module-sympy.matrices.expressions"], [94, "module-sympy.matrices.expressions.blockmatrix"], [95, "module-sympy.matrices.immutable"], [96, "module-sympy.matrices"], [97, "module-sympy.matrices.matrices"], [99, "module-sympy.matrices.sparse"], [100, "module-sympy.matrices.sparsetools"], [101, "module-sympy.ntheory.bbp_pi"], [101, "module-sympy.ntheory.continued_fraction"], [101, "module-sympy.ntheory.digits"], [101, "module-sympy.ntheory.ecm"], [101, "module-sympy.ntheory.egyptian_fraction"], [101, "module-sympy.ntheory.factor_"], [101, "module-sympy.ntheory.generate"], [101, "module-sympy.ntheory.modular"], [101, "module-sympy.ntheory.multinomial"], [101, "module-sympy.ntheory.partitions_"], [101, "module-sympy.ntheory.primetest"], [101, "module-sympy.ntheory.qs"], [101, "module-sympy.ntheory.residue_ntheory"], [103, "module-sympy.parsing"], [103, "module-sympy.parsing.sym_expr"], [104, "module-sympy.physics.continuum_mechanics.beam"], [107, "module-sympy.physics.continuum_mechanics.truss"], [110, "module-sympy.physics.control"], [111, "module-sympy.physics.control.lti"], [112, "module-sympy.physics.hep.gamma_matrices"], [113, "module-sympy.physics.hydrogen"], [114, "module-sympy.physics.matrices"], [116, "module-sympy.physics.mechanics.body"], [119, "module-sympy.physics.mechanics.joint"], [119, "module-sympy.physics.mechanics.jointsmethod"], [120, "module-sympy.physics.mechanics.kane"], [120, "module-sympy.physics.mechanics.lagrange"], [121, "module-sympy.physics.mechanics.linearize"], [122, "module-sympy.physics.mechanics.particle"], [122, "module-sympy.physics.mechanics.rigidbody"], [124, "module-sympy.physics.mechanics.system"], [135, "module-sympy.physics.mechanics"], [144, "module-sympy.physics.optics.gaussopt"], [146, "module-sympy.physics.optics.medium"], [147, "module-sympy.physics.optics.polarization"], [148, "module-sympy.physics.optics.utils"], [149, "module-sympy.physics.optics.waves"], [150, "module-sympy.physics.paulialgebra"], [151, "module-sympy.physics.qho_1d"], [152, "module-sympy.physics.quantum.anticommutator"], [153, "module-sympy.physics.quantum.cartesian"], [154, "module-sympy.physics.quantum.cg"], [155, "module-sympy.physics.quantum.circuitplot"], [156, "module-sympy.physics.quantum.commutator"], [157, "module-sympy.physics.quantum.constants"], [158, "module-sympy.physics.quantum.dagger"], [159, "module-sympy.physics.quantum.gate"], [160, "module-sympy.physics.quantum.grover"], [161, "module-sympy.physics.quantum.hilbert"], [163, "module-sympy.physics.quantum.innerproduct"], [164, "module-sympy.physics.quantum.operator"], [165, "module-sympy.physics.quantum.operatorset"], [166, "module-sympy.physics.quantum.piab"], [167, "module-sympy.physics.quantum.qapply"], [168, "module-sympy.physics.quantum.qft"], [169, "module-sympy.physics.quantum.qubit"], [170, "module-sympy.physics.quantum.represent"], [171, "module-sympy.physics.quantum.shor"], [172, "module-sympy.physics.quantum.spin"], [173, "module-sympy.physics.quantum.state"], [174, "module-sympy.physics.quantum.tensorproduct"], [175, "module-sympy.physics.secondquant"], [176, "module-sympy.physics.sho"], [177, "module-sympy.physics.units.dimensions"], [181, "module-sympy.physics.units.prefixes"], [182, "module-sympy.physics.units.quantities"], [182, "module-sympy.physics.units.util"], [183, "module-sympy.physics.units.unitsystem"], [189, "module-sympy.physics.vector.functions"], [189, "module-sympy.physics.vector.point"], [192, "module-sympy.physics.vector"], [195, "module-sympy.physics.wigner"], [196, "module-sympy.plotting.plot"], [196, "module-sympy.plotting.pygletplot"], [203, "module-sympy.polys.polyconfig"], [203, "module-sympy.polys.polyoptions"], [205, "module-sympy.polys.numberfields.modules"], [205, "module-sympy.polys.numberfields.subfield"], [206, "module-sympy.polys"], [208, "module-sympy.polys.solvers"], [210, "module-sympy.printing.aesaracode"], [210, "module-sympy.printing.c"], [210, "module-sympy.printing.codeprinter"], [210, "module-sympy.printing.conventions"], [210, "module-sympy.printing.cxx"], [210, "module-sympy.printing.fortran"], [210, "module-sympy.printing.gtk"], [210, "module-sympy.printing.jscode"], [210, "module-sympy.printing.julia"], [210, "module-sympy.printing.lambdarepr"], [210, "module-sympy.printing.latex"], [210, "module-sympy.printing.maple"], [210, "module-sympy.printing.mathematica"], [210, "module-sympy.printing.mathml"], [210, "module-sympy.printing.octave"], [210, "module-sympy.printing.precedence"], [210, "module-sympy.printing.pretty"], [210, "module-sympy.printing.pretty.pretty"], [210, "module-sympy.printing.pretty.pretty_symbology"], [210, "module-sympy.printing.pretty.stringpict"], [210, "module-sympy.printing.preview"], [210, "module-sympy.printing.printer"], [210, "module-sympy.printing.pycode"], [210, "module-sympy.printing.python"], [210, "module-sympy.printing.rcode"], [210, "module-sympy.printing.repr"], [210, "module-sympy.printing.rust"], [210, "module-sympy.printing.smtlib"], [210, "module-sympy.printing.str"], [210, "module-sympy.printing.tree"], [218, "module-sympy.sets.conditionset"], [218, "module-sympy.sets.fancysets"], [218, "module-sympy.sets.powerset"], [218, "module-sympy.sets.sets"], [220, "module-sympy.simplify.hyperexpand_doc"], [222, "module-sympy.simplify.combsimp"], [222, "module-sympy.simplify.cse_main"], [222, "module-sympy.simplify.epathtools"], [222, "module-sympy.simplify.hyperexpand"], [222, "module-sympy.simplify.powsimp"], [222, "module-sympy.simplify.radsimp"], [222, "module-sympy.simplify.ratsimp"], [222, "module-sympy.simplify.sqrtdenest"], [222, "module-sympy.simplify.trigsimp"], [225, "module-sympy.solvers.inequalities"], [226, "module-sympy.solvers.ode"], [226, "module-sympy.solvers.ode.ode"], [227, "module-sympy.solvers.pde"], [228, "module-sympy.solvers"], [228, "module-sympy.solvers.recurr"], [229, "module-sympy.solvers.solveset"], [230, "module-sympy.stats"], [230, "module-sympy.stats.crv"], [230, "module-sympy.stats.crv_types"], [230, "module-sympy.stats.frv"], [230, "module-sympy.stats.frv_types"], [230, "module-sympy.stats.rv"], [231, "module-sympy.tensor.array"], [232, "module-sympy.tensor.array.expressions"], [233, "module-sympy.tensor"], [234, "module-sympy.tensor.index_methods"], [235, "module-sympy.tensor.indexed"], [236, "module-sympy.tensor.tensor"], [237, "module-sympy.tensor.toperators"], [238, "module-sympy.testing"], [239, "module-sympy.testing.pytest"], [240, "module-sympy.testing.randtest"], [241, "module-sympy.testing.runtests"], [242, "module-sympy.utilities.autowrap"], [243, "module-sympy.utilities.codegen"], [244, "module-sympy.utilities.decorator"], [245, "module-sympy.utilities.enumerative"], [246, "module-sympy.utilities.exceptions"], [247, "module-sympy.utilities"], [248, "module-sympy.utilities.iterables"], [249, "module-sympy.utilities.lambdify"], [250, "module-sympy.utilities.memoization"], [251, "module-sympy.utilities.misc"], [252, "module-sympy.utilities.pkgdata"], [253, "module-sympy.utilities.source"], [254, "module-sympy.utilities.timeutils"], [263, "module-sympy.vector"], [272, "module-sympy.physics"]], "sympy.simplify.simplify": [[12, "module-sympy.simplify.simplify"]], "sympy": [[32, "module-sympy"]], "sympy.abc": [[34, "module-sympy.abc"]], "quaternion (class in sympy.algebras)": [[35, "sympy.algebras.Quaternion"]], "add() (sympy.algebras.quaternion method)": [[35, "sympy.algebras.Quaternion.add"]], "angle() (sympy.algebras.quaternion method)": [[35, "sympy.algebras.Quaternion.angle"]], "arc_coplanar() (sympy.algebras.quaternion method)": [[35, "sympy.algebras.Quaternion.arc_coplanar"]], "axis() (sympy.algebras.quaternion method)": [[35, "sympy.algebras.Quaternion.axis"]], "exp() (sympy.algebras.quaternion method)": [[35, "sympy.algebras.Quaternion.exp"]], "from_axis_angle() (sympy.algebras.quaternion class method)": [[35, "sympy.algebras.Quaternion.from_axis_angle"]], "from_rotation_matrix() (sympy.algebras.quaternion class method)": [[35, "sympy.algebras.Quaternion.from_rotation_matrix"]], "index_vector() (sympy.algebras.quaternion method)": [[35, "sympy.algebras.Quaternion.index_vector"]], "integrate() (sympy.algebras.quaternion method)": [[35, "sympy.algebras.Quaternion.integrate"]], "inverse() (sympy.algebras.quaternion method)": [[35, "sympy.algebras.Quaternion.inverse"]], "is_pure() (sympy.algebras.quaternion method)": [[35, "sympy.algebras.Quaternion.is_pure"]], "is_zero_quaternion() (sympy.algebras.quaternion method)": [[35, "sympy.algebras.Quaternion.is_zero_quaternion"]], "mensor() (sympy.algebras.quaternion method)": [[35, "sympy.algebras.Quaternion.mensor"]], "mul() (sympy.algebras.quaternion method)": [[35, "sympy.algebras.Quaternion.mul"]], "norm() (sympy.algebras.quaternion method)": [[35, "sympy.algebras.Quaternion.norm"]], "normalize() (sympy.algebras.quaternion method)": [[35, "sympy.algebras.Quaternion.normalize"]], "orthogonal() (sympy.algebras.quaternion method)": [[35, "sympy.algebras.Quaternion.orthogonal"]], "parallel() (sympy.algebras.quaternion method)": [[35, "sympy.algebras.Quaternion.parallel"]], "pow() (sympy.algebras.quaternion method)": [[35, "sympy.algebras.Quaternion.pow"]], "pow_cos_sin() (sympy.algebras.quaternion method)": [[35, "sympy.algebras.Quaternion.pow_cos_sin"]], "rotate_point() (sympy.algebras.quaternion static method)": [[35, "sympy.algebras.Quaternion.rotate_point"]], "scalar_part() (sympy.algebras.quaternion method)": [[35, "sympy.algebras.Quaternion.scalar_part"]], "sympy.algebras": [[35, "module-sympy.algebras"]], "to_axis_angle() (sympy.algebras.quaternion method)": [[35, "sympy.algebras.Quaternion.to_axis_angle"]], "to_rotation_matrix() (sympy.algebras.quaternion method)": [[35, "sympy.algebras.Quaternion.to_rotation_matrix"]], "vector_coplanar() (sympy.algebras.quaternion class method)": [[35, "sympy.algebras.Quaternion.vector_coplanar"]], "vector_part() (sympy.algebras.quaternion method)": [[35, "sympy.algebras.Quaternion.vector_part"]], "assumptionkeys (class in sympy.assumptions.ask)": [[36, "sympy.assumptions.ask.AssumptionKeys"]], "ask() (in module sympy.assumptions.ask)": [[36, "sympy.assumptions.ask.ask"]], "register_handler() (in module sympy.assumptions.ask)": [[36, "sympy.assumptions.ask.register_handler"]], "remove_handler() (in module sympy.assumptions.ask)": [[36, "sympy.assumptions.ask.remove_handler"]], "sympy.assumptions.ask": [[36, "module-sympy.assumptions.ask"]], "appliedpredicate (class in sympy.assumptions.assume)": [[37, "sympy.assumptions.assume.AppliedPredicate"]], "assumptionscontext (class in sympy.assumptions.assume)": [[37, "sympy.assumptions.assume.AssumptionsContext"]], "predicate (class in sympy.assumptions.assume)": [[37, "sympy.assumptions.assume.Predicate"]], "undefinedpredicate (class in sympy.assumptions.assume)": [[37, "sympy.assumptions.assume.UndefinedPredicate"]], "add() (sympy.assumptions.assume.assumptionscontext method)": [[37, "sympy.assumptions.assume.AssumptionsContext.add"]], "arg (sympy.assumptions.assume.appliedpredicate property)": [[37, "sympy.assumptions.assume.AppliedPredicate.arg"]], "arguments (sympy.assumptions.assume.appliedpredicate property)": [[37, "sympy.assumptions.assume.AppliedPredicate.arguments"]], "assuming() (in module sympy.assumptions.assume)": [[37, "sympy.assumptions.assume.assuming"]], "eval() (sympy.assumptions.assume.predicate method)": [[37, "sympy.assumptions.assume.Predicate.eval"]], "function (sympy.assumptions.assume.appliedpredicate property)": [[37, "sympy.assumptions.assume.AppliedPredicate.function"]], "handler (sympy.assumptions.assume.predicate attribute)": [[37, "sympy.assumptions.assume.Predicate.handler"]], "register() (sympy.assumptions.assume.predicate class method)": [[37, "sympy.assumptions.assume.Predicate.register"]], "register_many() (sympy.assumptions.assume.predicate class method)": [[37, "sympy.assumptions.assume.Predicate.register_many"]], "sympy.assumptions.assume": [[37, "module-sympy.assumptions.assume"]], "sympy.assumptions": [[38, "module-sympy.assumptions"]], "algebraichandler (sympy.assumptions.predicates.sets.algebraicpredicate attribute)": [[39, "sympy.assumptions.predicates.sets.AlgebraicPredicate.AlgebraicHandler"]], "algebraicpredicate (class in sympy.assumptions.predicates.sets)": [[39, "sympy.assumptions.predicates.sets.AlgebraicPredicate"]], "antihermitianpredicate (class in sympy.assumptions.predicates.sets)": [[39, "sympy.assumptions.predicates.sets.AntihermitianPredicate"]], "commutativepredicate (class in sympy.assumptions.predicates.common)": [[39, "sympy.assumptions.predicates.common.CommutativePredicate"]], "complexelementspredicate (class in sympy.assumptions.predicates.matrices)": [[39, "sympy.assumptions.predicates.matrices.ComplexElementsPredicate"]], "complexpredicate (class in sympy.assumptions.predicates.sets)": [[39, "sympy.assumptions.predicates.sets.ComplexPredicate"]], "compositepredicate (class in sympy.assumptions.predicates.ntheory)": [[39, "sympy.assumptions.predicates.ntheory.CompositePredicate"]], "diagonalpredicate (class in sympy.assumptions.predicates.matrices)": [[39, "sympy.assumptions.predicates.matrices.DiagonalPredicate"]], "evenpredicate (class in sympy.assumptions.predicates.ntheory)": [[39, "sympy.assumptions.predicates.ntheory.EvenPredicate"]], "extendedrealpredicate (class in sympy.assumptions.predicates.sets)": [[39, "sympy.assumptions.predicates.sets.ExtendedRealPredicate"]], "finitepredicate (class in sympy.assumptions.predicates.calculus)": [[39, "sympy.assumptions.predicates.calculus.FinitePredicate"]], "fullrankpredicate (class in sympy.assumptions.predicates.matrices)": [[39, "sympy.assumptions.predicates.matrices.FullRankPredicate"]], "hermitianpredicate (class in sympy.assumptions.predicates.sets)": [[39, "sympy.assumptions.predicates.sets.HermitianPredicate"]], "imaginarypredicate (class in sympy.assumptions.predicates.sets)": [[39, "sympy.assumptions.predicates.sets.ImaginaryPredicate"]], "infinitepredicate (class in sympy.assumptions.predicates.calculus)": [[39, "sympy.assumptions.predicates.calculus.InfinitePredicate"]], "integerelementspredicate (class in sympy.assumptions.predicates.matrices)": [[39, "sympy.assumptions.predicates.matrices.IntegerElementsPredicate"]], "integerpredicate (class in sympy.assumptions.predicates.sets)": [[39, "sympy.assumptions.predicates.sets.IntegerPredicate"]], "invertiblepredicate (class in sympy.assumptions.predicates.matrices)": [[39, "sympy.assumptions.predicates.matrices.InvertiblePredicate"]], "irrationalpredicate (class in sympy.assumptions.predicates.sets)": [[39, "sympy.assumptions.predicates.sets.IrrationalPredicate"]], "istruepredicate (class in sympy.assumptions.predicates.common)": [[39, "sympy.assumptions.predicates.common.IsTruePredicate"]], "lowertriangularpredicate (class in sympy.assumptions.predicates.matrices)": [[39, "sympy.assumptions.predicates.matrices.LowerTriangularPredicate"]], "negativepredicate (class in sympy.assumptions.predicates.order)": [[39, "sympy.assumptions.predicates.order.NegativePredicate"]], "nonnegativepredicate (class in sympy.assumptions.predicates.order)": [[39, "sympy.assumptions.predicates.order.NonNegativePredicate"]], "nonpositivepredicate (class in sympy.assumptions.predicates.order)": [[39, "sympy.assumptions.predicates.order.NonPositivePredicate"]], "nonzeropredicate (class in sympy.assumptions.predicates.order)": [[39, "sympy.assumptions.predicates.order.NonZeroPredicate"]], "normalpredicate (class in sympy.assumptions.predicates.matrices)": [[39, "sympy.assumptions.predicates.matrices.NormalPredicate"]], "oddpredicate (class in sympy.assumptions.predicates.ntheory)": [[39, "sympy.assumptions.predicates.ntheory.OddPredicate"]], "orthogonalpredicate (class in sympy.assumptions.predicates.matrices)": [[39, "sympy.assumptions.predicates.matrices.OrthogonalPredicate"]], "positivedefinitepredicate (class in sympy.assumptions.predicates.matrices)": [[39, "sympy.assumptions.predicates.matrices.PositiveDefinitePredicate"]], "positivepredicate (class in sympy.assumptions.predicates.order)": [[39, "sympy.assumptions.predicates.order.PositivePredicate"]], "primepredicate (class in sympy.assumptions.predicates.ntheory)": [[39, "sympy.assumptions.predicates.ntheory.PrimePredicate"]], "rationalpredicate (class in sympy.assumptions.predicates.sets)": [[39, "sympy.assumptions.predicates.sets.RationalPredicate"]], "realelementspredicate (class in sympy.assumptions.predicates.matrices)": [[39, "sympy.assumptions.predicates.matrices.RealElementsPredicate"]], "realpredicate (class in sympy.assumptions.predicates.sets)": [[39, "sympy.assumptions.predicates.sets.RealPredicate"]], "singularpredicate (class in sympy.assumptions.predicates.matrices)": [[39, "sympy.assumptions.predicates.matrices.SingularPredicate"]], "squarepredicate (class in sympy.assumptions.predicates.matrices)": [[39, "sympy.assumptions.predicates.matrices.SquarePredicate"]], "symmetricpredicate (class in sympy.assumptions.predicates.matrices)": [[39, "sympy.assumptions.predicates.matrices.SymmetricPredicate"]], "transcendentalpredicate (class in sympy.assumptions.predicates.sets)": [[39, "sympy.assumptions.predicates.sets.TranscendentalPredicate"]], "triangularpredicate (class in sympy.assumptions.predicates.matrices)": [[39, "sympy.assumptions.predicates.matrices.TriangularPredicate"]], "unittriangularpredicate (class in sympy.assumptions.predicates.matrices)": [[39, "sympy.assumptions.predicates.matrices.UnitTriangularPredicate"]], "unitarypredicate (class in sympy.assumptions.predicates.matrices)": [[39, "sympy.assumptions.predicates.matrices.UnitaryPredicate"]], "uppertriangularpredicate (class in sympy.assumptions.predicates.matrices)": [[39, "sympy.assumptions.predicates.matrices.UpperTriangularPredicate"]], "zeropredicate (class in sympy.assumptions.predicates.order)": [[39, "sympy.assumptions.predicates.order.ZeroPredicate"]], "handler (sympy.assumptions.predicates.calculus.finitepredicate attribute)": [[39, "sympy.assumptions.predicates.calculus.FinitePredicate.handler"]], "handler (sympy.assumptions.predicates.calculus.infinitepredicate attribute)": [[39, "sympy.assumptions.predicates.calculus.InfinitePredicate.handler"]], "handler (sympy.assumptions.predicates.common.commutativepredicate attribute)": [[39, "sympy.assumptions.predicates.common.CommutativePredicate.handler"]], "handler (sympy.assumptions.predicates.common.istruepredicate attribute)": [[39, "sympy.assumptions.predicates.common.IsTruePredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.complexelementspredicate attribute)": [[39, "sympy.assumptions.predicates.matrices.ComplexElementsPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.diagonalpredicate attribute)": [[39, "sympy.assumptions.predicates.matrices.DiagonalPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.fullrankpredicate attribute)": [[39, "sympy.assumptions.predicates.matrices.FullRankPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.integerelementspredicate attribute)": [[39, "sympy.assumptions.predicates.matrices.IntegerElementsPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.invertiblepredicate attribute)": [[39, "sympy.assumptions.predicates.matrices.InvertiblePredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.lowertriangularpredicate attribute)": [[39, "sympy.assumptions.predicates.matrices.LowerTriangularPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.normalpredicate attribute)": [[39, "sympy.assumptions.predicates.matrices.NormalPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.orthogonalpredicate attribute)": [[39, "sympy.assumptions.predicates.matrices.OrthogonalPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.positivedefinitepredicate attribute)": [[39, "sympy.assumptions.predicates.matrices.PositiveDefinitePredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.realelementspredicate attribute)": [[39, "sympy.assumptions.predicates.matrices.RealElementsPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.singularpredicate attribute)": [[39, "sympy.assumptions.predicates.matrices.SingularPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.squarepredicate attribute)": [[39, "sympy.assumptions.predicates.matrices.SquarePredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.symmetricpredicate attribute)": [[39, "sympy.assumptions.predicates.matrices.SymmetricPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.triangularpredicate attribute)": [[39, "sympy.assumptions.predicates.matrices.TriangularPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.unittriangularpredicate attribute)": [[39, "sympy.assumptions.predicates.matrices.UnitTriangularPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.unitarypredicate attribute)": [[39, "sympy.assumptions.predicates.matrices.UnitaryPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.uppertriangularpredicate attribute)": [[39, "sympy.assumptions.predicates.matrices.UpperTriangularPredicate.handler"]], "handler (sympy.assumptions.predicates.ntheory.compositepredicate attribute)": [[39, "sympy.assumptions.predicates.ntheory.CompositePredicate.handler"]], "handler (sympy.assumptions.predicates.ntheory.evenpredicate attribute)": [[39, "sympy.assumptions.predicates.ntheory.EvenPredicate.handler"]], "handler (sympy.assumptions.predicates.ntheory.oddpredicate attribute)": [[39, "sympy.assumptions.predicates.ntheory.OddPredicate.handler"]], "handler (sympy.assumptions.predicates.ntheory.primepredicate attribute)": [[39, "sympy.assumptions.predicates.ntheory.PrimePredicate.handler"]], "handler (sympy.assumptions.predicates.order.negativepredicate attribute)": [[39, "sympy.assumptions.predicates.order.NegativePredicate.handler"]], "handler (sympy.assumptions.predicates.order.nonnegativepredicate attribute)": [[39, "sympy.assumptions.predicates.order.NonNegativePredicate.handler"]], "handler (sympy.assumptions.predicates.order.nonpositivepredicate attribute)": [[39, "sympy.assumptions.predicates.order.NonPositivePredicate.handler"]], "handler (sympy.assumptions.predicates.order.nonzeropredicate attribute)": [[39, "sympy.assumptions.predicates.order.NonZeroPredicate.handler"]], "handler (sympy.assumptions.predicates.order.positivepredicate attribute)": [[39, "sympy.assumptions.predicates.order.PositivePredicate.handler"]], "handler (sympy.assumptions.predicates.order.zeropredicate attribute)": [[39, "sympy.assumptions.predicates.order.ZeroPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.algebraicpredicate attribute)": [[39, "sympy.assumptions.predicates.sets.AlgebraicPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.antihermitianpredicate attribute)": [[39, "sympy.assumptions.predicates.sets.AntihermitianPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.complexpredicate attribute)": [[39, "sympy.assumptions.predicates.sets.ComplexPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.extendedrealpredicate attribute)": [[39, "sympy.assumptions.predicates.sets.ExtendedRealPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.hermitianpredicate attribute)": [[39, "sympy.assumptions.predicates.sets.HermitianPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.imaginarypredicate attribute)": [[39, "sympy.assumptions.predicates.sets.ImaginaryPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.integerpredicate attribute)": [[39, "sympy.assumptions.predicates.sets.IntegerPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.irrationalpredicate attribute)": [[39, "sympy.assumptions.predicates.sets.IrrationalPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.rationalpredicate attribute)": [[39, "sympy.assumptions.predicates.sets.RationalPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.realpredicate attribute)": [[39, "sympy.assumptions.predicates.sets.RealPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.transcendentalpredicate attribute)": [[39, "sympy.assumptions.predicates.sets.TranscendentalPredicate.handler"]], "sympy.assumptions.predicates": [[39, "module-sympy.assumptions.predicates"]], "refine() (in module sympy.assumptions.refine)": [[40, "sympy.assumptions.refine.refine"]], "refine_pow() (in module sympy.assumptions.refine)": [[40, "sympy.assumptions.refine.refine_Pow"]], "refine_abs() (in module sympy.assumptions.refine)": [[40, "sympy.assumptions.refine.refine_abs"]], "refine_arg() (in module sympy.assumptions.refine)": [[40, "sympy.assumptions.refine.refine_arg"]], "refine_atan2() (in module sympy.assumptions.refine)": [[40, "sympy.assumptions.refine.refine_atan2"]], "refine_im() (in module sympy.assumptions.refine)": [[40, "sympy.assumptions.refine.refine_im"]], "refine_matrixelement() (in module sympy.assumptions.refine)": [[40, "sympy.assumptions.refine.refine_matrixelement"]], "refine_re() (in module sympy.assumptions.refine)": [[40, "sympy.assumptions.refine.refine_re"]], "refine_sign() (in module sympy.assumptions.refine)": [[40, "sympy.assumptions.refine.refine_sign"]], "sympy.assumptions.refine": [[40, "module-sympy.assumptions.refine"]], "apply_finite_diff() (in module sympy.calculus.finite_diff)": [[41, "sympy.calculus.finite_diff.apply_finite_diff"]], "continuous_domain() (in module sympy.calculus.util)": [[41, "sympy.calculus.util.continuous_domain"]], "differentiate_finite() (in module sympy.calculus.finite_diff)": [[41, "sympy.calculus.finite_diff.differentiate_finite"]], "euler_equations() (in module sympy.calculus.euler)": [[41, "sympy.calculus.euler.euler_equations"]], "finite_diff_weights() (in module sympy.calculus.finite_diff)": [[41, "sympy.calculus.finite_diff.finite_diff_weights"]], "function_range() (in module sympy.calculus.util)": [[41, "sympy.calculus.util.function_range"]], "is_convex() (in module sympy.calculus.util)": [[41, "sympy.calculus.util.is_convex"]], "is_decreasing() (in module sympy.calculus.singularities)": [[41, "sympy.calculus.singularities.is_decreasing"]], "is_increasing() (in module sympy.calculus.singularities)": [[41, "sympy.calculus.singularities.is_increasing"]], "is_monotonic() (in module sympy.calculus.singularities)": [[41, "sympy.calculus.singularities.is_monotonic"]], "is_strictly_decreasing() (in module sympy.calculus.singularities)": [[41, "sympy.calculus.singularities.is_strictly_decreasing"]], "is_strictly_increasing() (in module sympy.calculus.singularities)": [[41, "sympy.calculus.singularities.is_strictly_increasing"]], "lcim() (in module sympy.calculus.util)": [[41, "sympy.calculus.util.lcim"]], "maximum() (in module sympy.calculus.util)": [[41, "sympy.calculus.util.maximum"]], "minimum() (in module sympy.calculus.util)": [[41, "sympy.calculus.util.minimum"]], "monotonicity_helper() (in module sympy.calculus.singularities)": [[41, "sympy.calculus.singularities.monotonicity_helper"]], "not_empty_in() (in module sympy.calculus.util)": [[41, "sympy.calculus.util.not_empty_in"]], "periodicity() (in module sympy.calculus.util)": [[41, "sympy.calculus.util.periodicity"]], "singularities() (in module sympy.calculus.singularities)": [[41, "sympy.calculus.singularities.singularities"]], "stationary_points() (in module sympy.calculus.util)": [[41, "sympy.calculus.util.stationary_points"]], "sympy.calculus": [[41, "module-sympy.calculus"]], "sympy.calculus.euler": [[41, "module-sympy.calculus.euler"]], "sympy.calculus.finite_diff": [[41, "module-sympy.calculus.finite_diff"]], "sympy.calculus.singularities": [[41, "module-sympy.calculus.singularities"]], "sympy.calculus.util": [[41, "module-sympy.calculus.util"]], "arrowstringdescription (class in sympy.categories.diagram_drawing)": [[42, "sympy.categories.diagram_drawing.ArrowStringDescription"]], "category (class in sympy.categories)": [[42, "sympy.categories.Category"]], "compositemorphism (class in sympy.categories)": [[42, "sympy.categories.CompositeMorphism"]], "diagram (class in sympy.categories)": [[42, "sympy.categories.Diagram"]], "diagramgrid (class in sympy.categories.diagram_drawing)": [[42, "sympy.categories.diagram_drawing.DiagramGrid"]], "identitymorphism (class in sympy.categories)": [[42, "sympy.categories.IdentityMorphism"]], "morphism (class in sympy.categories)": [[42, "sympy.categories.Morphism"]], "namedmorphism (class in sympy.categories)": [[42, "sympy.categories.NamedMorphism"]], "object (class in sympy.categories)": [[42, "sympy.categories.Object"]], "xypicdiagramdrawer (class in sympy.categories.diagram_drawing)": [[42, "sympy.categories.diagram_drawing.XypicDiagramDrawer"]], "codomain (sympy.categories.compositemorphism property)": [[42, "sympy.categories.CompositeMorphism.codomain"]], "codomain (sympy.categories.morphism property)": [[42, "sympy.categories.Morphism.codomain"]], "commutative_diagrams (sympy.categories.category property)": [[42, "sympy.categories.Category.commutative_diagrams"]], "components (sympy.categories.compositemorphism property)": [[42, "sympy.categories.CompositeMorphism.components"]], "compose() (sympy.categories.morphism method)": [[42, "sympy.categories.Morphism.compose"]], "conclusions (sympy.categories.diagram property)": [[42, "sympy.categories.Diagram.conclusions"]], "domain (sympy.categories.compositemorphism property)": [[42, "sympy.categories.CompositeMorphism.domain"]], "domain (sympy.categories.morphism property)": [[42, "sympy.categories.Morphism.domain"]], "draw() (sympy.categories.diagram_drawing.xypicdiagramdrawer method)": [[42, "sympy.categories.diagram_drawing.XypicDiagramDrawer.draw"]], "flatten() (sympy.categories.compositemorphism method)": [[42, "sympy.categories.CompositeMorphism.flatten"]], "height (sympy.categories.diagram_drawing.diagramgrid property)": [[42, "sympy.categories.diagram_drawing.DiagramGrid.height"]], "hom() (sympy.categories.diagram method)": [[42, "sympy.categories.Diagram.hom"]], "is_subdiagram() (sympy.categories.diagram method)": [[42, "sympy.categories.Diagram.is_subdiagram"]], "morphisms (sympy.categories.diagram_drawing.diagramgrid property)": [[42, "sympy.categories.diagram_drawing.DiagramGrid.morphisms"]], "name (sympy.categories.category property)": [[42, "sympy.categories.Category.name"]], "name (sympy.categories.namedmorphism property)": [[42, "sympy.categories.NamedMorphism.name"]], "objects (sympy.categories.category property)": [[42, "sympy.categories.Category.objects"]], "objects (sympy.categories.diagram property)": [[42, "sympy.categories.Diagram.objects"]], "premises (sympy.categories.diagram property)": [[42, "sympy.categories.Diagram.premises"]], "preview_diagram() (in module sympy.categories.diagram_drawing)": [[42, "sympy.categories.diagram_drawing.preview_diagram"]], "subdiagram_from_objects() (sympy.categories.diagram method)": [[42, "sympy.categories.Diagram.subdiagram_from_objects"]], "sympy.categories": [[42, "module-sympy.categories"]], "sympy.categories.diagram_drawing": [[42, "module-sympy.categories.diagram_drawing"]], "width (sympy.categories.diagram_drawing.diagramgrid property)": [[42, "sympy.categories.diagram_drawing.DiagramGrid.width"]], "xypic_draw_diagram() (in module sympy.categories.diagram_drawing)": [[42, "sympy.categories.diagram_drawing.xypic_draw_diagram"]], "arrayconstructor (class in sympy.codegen.fnodes)": [[43, "sympy.codegen.fnodes.ArrayConstructor"]], "assignment (class in sympy.codegen.ast)": [[43, "sympy.codegen.ast.Assignment"]], "assignmentbase (class in sympy.codegen.ast)": [[43, "sympy.codegen.ast.AssignmentBase"]], "attribute (class in sympy.codegen.ast)": [[43, "sympy.codegen.ast.Attribute"]], "augmentedassignment (class in sympy.codegen.ast)": [[43, "sympy.codegen.ast.AugmentedAssignment"]], "breaktoken (class in sympy.codegen.ast)": [[43, "sympy.codegen.ast.BreakToken"]], "cbrt (class in sympy.codegen.cfunctions)": [[43, "sympy.codegen.cfunctions.Cbrt"]], "codeblock (class in sympy.codegen.ast)": [[43, "sympy.codegen.ast.CodeBlock"]], "commaoperator (class in sympy.codegen.cnodes)": [[43, "sympy.codegen.cnodes.CommaOperator"]], "comment (class in sympy.codegen.ast)": [[43, "sympy.codegen.ast.Comment"]], "complextype (class in sympy.codegen.ast)": [[43, "sympy.codegen.ast.ComplexType"]], "continuetoken (class in sympy.codegen.ast)": [[43, "sympy.codegen.ast.ContinueToken"]], "declaration (class in sympy.codegen.ast)": [[43, "sympy.codegen.ast.Declaration"]], "do (class in sympy.codegen.fnodes)": [[43, "sympy.codegen.fnodes.Do"]], "element (class in sympy.codegen.ast)": [[43, "sympy.codegen.ast.Element"]], "extent (class in sympy.codegen.fnodes)": [[43, "sympy.codegen.fnodes.Extent"]], "floatbasetype (class in sympy.codegen.ast)": [[43, "sympy.codegen.ast.FloatBaseType"]], "floattype (class in sympy.codegen.ast)": [[43, "sympy.codegen.ast.FloatType"]], "for (class in sympy.codegen.ast)": [[43, "sympy.codegen.ast.For"]], "fortranreturn (class in sympy.codegen.fnodes)": [[43, "sympy.codegen.fnodes.FortranReturn"]], "funcminusoneoptim (class in sympy.codegen.rewriting)": [[43, "sympy.codegen.rewriting.FuncMinusOneOptim"]], "functioncall (class in sympy.codegen.ast)": [[43, "sympy.codegen.ast.FunctionCall"]], "functiondefinition (class in sympy.codegen.ast)": [[43, "sympy.codegen.ast.FunctionDefinition"]], "functionprototype (class in sympy.codegen.ast)": [[43, "sympy.codegen.ast.FunctionPrototype"]], "goto (class in sympy.codegen.fnodes)": [[43, "sympy.codegen.fnodes.GoTo"]], "implieddoloop (class in sympy.codegen.fnodes)": [[43, "sympy.codegen.fnodes.ImpliedDoLoop"]], "intbasetype (class in sympy.codegen.ast)": [[43, "sympy.codegen.ast.IntBaseType"]], "label (class in sympy.codegen.cnodes)": [[43, "sympy.codegen.cnodes.Label"]], "matrixsolve (class in sympy.codegen.matrix_nodes)": [[43, "sympy.codegen.matrix_nodes.MatrixSolve"]], "module (class in sympy.codegen.fnodes)": [[43, "sympy.codegen.fnodes.Module"]], "node (class in sympy.codegen.ast)": [[43, "sympy.codegen.ast.Node"]], "nonetoken (class in sympy.codegen.ast)": [[43, "sympy.codegen.ast.NoneToken"]], "optimization (class in sympy.codegen.rewriting)": [[43, "sympy.codegen.rewriting.Optimization"]], "pointer (class in sympy.codegen.ast)": [[43, "sympy.codegen.ast.Pointer"]], "postdecrement (class in sympy.codegen.cnodes)": [[43, "sympy.codegen.cnodes.PostDecrement"]], "postincrement (class in sympy.codegen.cnodes)": [[43, "sympy.codegen.cnodes.PostIncrement"]], "predecrement (class in sympy.codegen.cnodes)": [[43, "sympy.codegen.cnodes.PreDecrement"]], "preincrement (class in sympy.codegen.cnodes)": [[43, "sympy.codegen.cnodes.PreIncrement"]], "print (class in sympy.codegen.ast)": [[43, "sympy.codegen.ast.Print"]], "program (class in sympy.codegen.fnodes)": [[43, "sympy.codegen.fnodes.Program"]], "quotedstring (class in sympy.codegen.ast)": [[43, "sympy.codegen.ast.QuotedString"]], "replaceoptim (class in sympy.codegen.rewriting)": [[43, "sympy.codegen.rewriting.ReplaceOptim"]], "return (class in sympy.codegen.ast)": [[43, "sympy.codegen.ast.Return"]], "scope (class in sympy.codegen.ast)": [[43, "sympy.codegen.ast.Scope"]], "seriesapprox (class in sympy.codegen.approximations)": [[43, "sympy.codegen.approximations.SeriesApprox"]], "signedinttype (class in sympy.codegen.ast)": [[43, "sympy.codegen.ast.SignedIntType"]], "sqrt (class in sympy.codegen.cfunctions)": [[43, "sympy.codegen.cfunctions.Sqrt"]], "stream (class in sympy.codegen.ast)": [[43, "sympy.codegen.ast.Stream"]], "string (class in sympy.codegen.ast)": [[43, "sympy.codegen.ast.String"]], "subroutine (class in sympy.codegen.fnodes)": [[43, "sympy.codegen.fnodes.Subroutine"]], "subroutinecall (class in sympy.codegen.fnodes)": [[43, "sympy.codegen.fnodes.SubroutineCall"]], "sumapprox (class in sympy.codegen.approximations)": [[43, "sympy.codegen.approximations.SumApprox"]], "token (class in sympy.codegen.ast)": [[43, "sympy.codegen.ast.Token"]], "type (class in sympy.codegen.ast)": [[43, "sympy.codegen.ast.Type"]], "unsignedinttype (class in sympy.codegen.ast)": [[43, "sympy.codegen.ast.UnsignedIntType"]], "variable (class in sympy.codegen.ast)": [[43, "sympy.codegen.ast.Variable"]], "while (class in sympy.codegen.ast)": [[43, "sympy.codegen.ast.While"]], "alignof() (in module sympy.codegen.cnodes)": [[43, "sympy.codegen.cnodes.alignof"]], "allocated() (in module sympy.codegen.fnodes)": [[43, "sympy.codegen.fnodes.allocated"]], "array() (in module sympy.codegen.fnodes)": [[43, "sympy.codegen.fnodes.array"]], "as_declaration() (sympy.codegen.ast.variable method)": [[43, "sympy.codegen.ast.Variable.as_Declaration"]], "attr_params() (sympy.codegen.ast.node method)": [[43, "sympy.codegen.ast.Node.attr_params"]], "aug_assign() (in module sympy.codegen.ast)": [[43, "sympy.codegen.ast.aug_assign"]], "bind_c() (in module sympy.codegen.fnodes)": [[43, "sympy.codegen.fnodes.bind_C"]], "cast_check() (sympy.codegen.ast.type method)": [[43, "sympy.codegen.ast.Type.cast_check"]], "cast_nocheck (sympy.codegen.ast.floatbasetype attribute)": [[43, "sympy.codegen.ast.FloatBaseType.cast_nocheck"]], "cast_nocheck() (sympy.codegen.ast.floattype method)": [[43, "sympy.codegen.ast.FloatType.cast_nocheck"]], "cmplx (class in sympy.codegen.fnodes)": [[43, "sympy.codegen.fnodes.cmplx"]], "create_expand_pow_optimization() (in module sympy.codegen.rewriting)": [[43, "sympy.codegen.rewriting.create_expand_pow_optimization"]], "cse() (sympy.codegen.ast.codeblock method)": [[43, "sympy.codegen.ast.CodeBlock.cse"]], "decimal_dig (sympy.codegen.ast.floattype property)": [[43, "sympy.codegen.ast.FloatType.decimal_dig"]], "deduced() (sympy.codegen.ast.variable class method)": [[43, "sympy.codegen.ast.Variable.deduced"]], "dig (sympy.codegen.ast.floattype property)": [[43, "sympy.codegen.ast.FloatType.dig"]], "dimension() (in module sympy.codegen.fnodes)": [[43, "sympy.codegen.fnodes.dimension"]], "dsign (class in sympy.codegen.fnodes)": [[43, "sympy.codegen.fnodes.dsign"]], "eps (sympy.codegen.ast.floattype property)": [[43, "sympy.codegen.ast.FloatType.eps"]], "exp2 (class in sympy.codegen.cfunctions)": [[43, "sympy.codegen.cfunctions.exp2"]], "expm1 (class in sympy.codegen.cfunctions)": [[43, "sympy.codegen.cfunctions.expm1"]], "fdiff() (sympy.codegen.cfunctions.cbrt method)": [[43, "sympy.codegen.cfunctions.Cbrt.fdiff"]], "fdiff() (sympy.codegen.cfunctions.sqrt method)": [[43, "sympy.codegen.cfunctions.Sqrt.fdiff"]], "fdiff() (sympy.codegen.cfunctions.exp2 method)": [[43, "sympy.codegen.cfunctions.exp2.fdiff"]], "fdiff() (sympy.codegen.cfunctions.expm1 method)": [[43, "sympy.codegen.cfunctions.expm1.fdiff"]], "fdiff() (sympy.codegen.cfunctions.fma method)": [[43, "sympy.codegen.cfunctions.fma.fdiff"]], "fdiff() (sympy.codegen.cfunctions.hypot method)": [[43, "sympy.codegen.cfunctions.hypot.fdiff"]], "fdiff() (sympy.codegen.cfunctions.log10 method)": [[43, "sympy.codegen.cfunctions.log10.fdiff"]], "fdiff() (sympy.codegen.cfunctions.log1p method)": [[43, "sympy.codegen.cfunctions.log1p.fdiff"]], "fdiff() (sympy.codegen.cfunctions.log2 method)": [[43, "sympy.codegen.cfunctions.log2.fdiff"]], "fma (class in sympy.codegen.cfunctions)": [[43, "sympy.codegen.cfunctions.fma"]], "from_expr() (sympy.codegen.ast.type class method)": [[43, "sympy.codegen.ast.Type.from_expr"]], "goto (class in sympy.codegen.cnodes)": [[43, "sympy.codegen.cnodes.goto"]], "hypot (class in sympy.codegen.cfunctions)": [[43, "sympy.codegen.cfunctions.hypot"]], "isign (class in sympy.codegen.fnodes)": [[43, "sympy.codegen.fnodes.isign"]], "kind (class in sympy.codegen.fnodes)": [[43, "sympy.codegen.fnodes.kind"]], "kwargs() (sympy.codegen.ast.token method)": [[43, "sympy.codegen.ast.Token.kwargs"]], "lbound() (in module sympy.codegen.fnodes)": [[43, "sympy.codegen.fnodes.lbound"]], "literal_dp (class in sympy.codegen.fnodes)": [[43, "sympy.codegen.fnodes.literal_dp"]], "literal_sp (class in sympy.codegen.fnodes)": [[43, "sympy.codegen.fnodes.literal_sp"]], "log10 (class in sympy.codegen.cfunctions)": [[43, "sympy.codegen.cfunctions.log10"]], "log1p (class in sympy.codegen.cfunctions)": [[43, "sympy.codegen.cfunctions.log1p"]], "log2 (class in sympy.codegen.cfunctions)": [[43, "sympy.codegen.cfunctions.log2"]], "max (sympy.codegen.ast.floattype property)": [[43, "sympy.codegen.ast.FloatType.max"]], "max_exponent (sympy.codegen.ast.floattype property)": [[43, "sympy.codegen.ast.FloatType.max_exponent"]], "merge (class in sympy.codegen.fnodes)": [[43, "sympy.codegen.fnodes.merge"]], "min_exponent (sympy.codegen.ast.floattype property)": [[43, "sympy.codegen.ast.FloatType.min_exponent"]], "newtons_method() (in module sympy.codegen.algorithms)": [[43, "sympy.codegen.algorithms.newtons_method"]], "newtons_method_function() (in module sympy.codegen.algorithms)": [[43, "sympy.codegen.algorithms.newtons_method_function"]], "optimize() (in module sympy.codegen.rewriting)": [[43, "sympy.codegen.rewriting.optimize"]], "render_as_module() (in module sympy.codegen.futils)": [[43, "sympy.codegen.futils.render_as_module"]], "render_as_module() (in module sympy.codegen.pyutils)": [[43, "sympy.codegen.pyutils.render_as_module"]], "render_as_source_file() (in module sympy.codegen.cutils)": [[43, "sympy.codegen.cutils.render_as_source_file"]], "replace_in_add() (sympy.codegen.rewriting.funcminusoneoptim method)": [[43, "sympy.codegen.rewriting.FuncMinusOneOptim.replace_in_Add"]], "reshape() (in module sympy.codegen.fnodes)": [[43, "sympy.codegen.fnodes.reshape"]], "shape() (in module sympy.codegen.fnodes)": [[43, "sympy.codegen.fnodes.shape"]], "size() (in module sympy.codegen.fnodes)": [[43, "sympy.codegen.fnodes.size"]], "sizeof() (in module sympy.codegen.cnodes)": [[43, "sympy.codegen.cnodes.sizeof"]], "struct (class in sympy.codegen.cnodes)": [[43, "sympy.codegen.cnodes.struct"]], "sympy.codegen.algorithms": [[43, "module-sympy.codegen.algorithms"]], "sympy.codegen.approximations": [[43, "module-sympy.codegen.approximations"]], "sympy.codegen.ast": [[43, "module-sympy.codegen.ast"]], "sympy.codegen.cfunctions": [[43, "module-sympy.codegen.cfunctions"]], "sympy.codegen.cnodes": [[43, "module-sympy.codegen.cnodes"]], "sympy.codegen.cutils": [[43, "module-sympy.codegen.cutils"]], "sympy.codegen.cxxnodes": [[43, "module-sympy.codegen.cxxnodes"]], "sympy.codegen.fnodes": [[43, "module-sympy.codegen.fnodes"]], "sympy.codegen.futils": [[43, "module-sympy.codegen.futils"]], "sympy.codegen.matrix_nodes": [[43, "module-sympy.codegen.matrix_nodes"]], "sympy.codegen.pyutils": [[43, "module-sympy.codegen.pyutils"]], "sympy.codegen.rewriting": [[43, "module-sympy.codegen.rewriting"]], "tiny (sympy.codegen.ast.floattype property)": [[43, "sympy.codegen.ast.FloatType.tiny"]], "topological_sort() (sympy.codegen.ast.codeblock class method)": [[43, "sympy.codegen.ast.CodeBlock.topological_sort"]], "union (class in sympy.codegen.cnodes)": [[43, "sympy.codegen.cnodes.union"]], "use (class in sympy.codegen.fnodes)": [[43, "sympy.codegen.fnodes.use"]], "use_rename (class in sympy.codegen.fnodes)": [[43, "sympy.codegen.fnodes.use_rename"]], "using (class in sympy.codegen.cxxnodes)": [[43, "sympy.codegen.cxxnodes.using"]], "graycode (class in sympy.combinatorics.graycode)": [[45, "sympy.combinatorics.graycode.GrayCode"]], "bin_to_gray() (sympy.combinatorics.graycode method)": [[45, "sympy.combinatorics.graycode.bin_to_gray"]], "current (sympy.combinatorics.graycode.graycode property)": [[45, "sympy.combinatorics.graycode.GrayCode.current"]], "generate_gray() (sympy.combinatorics.graycode.graycode method)": [[45, "sympy.combinatorics.graycode.GrayCode.generate_gray"]], "get_subset_from_bitstring() (sympy.combinatorics.graycode method)": [[45, "sympy.combinatorics.graycode.get_subset_from_bitstring"]], "gray_to_bin() (sympy.combinatorics.graycode method)": [[45, "sympy.combinatorics.graycode.gray_to_bin"]], "graycode_subsets() (sympy.combinatorics.graycode method)": [[45, "sympy.combinatorics.graycode.graycode_subsets"]], "n (sympy.combinatorics.graycode.graycode property)": [[45, "sympy.combinatorics.graycode.GrayCode.n"]], "next() (sympy.combinatorics.graycode.graycode method)": [[45, "sympy.combinatorics.graycode.GrayCode.next"]], "random_bitstring() (sympy.combinatorics.graycode method)": [[45, "sympy.combinatorics.graycode.random_bitstring"]], "rank (sympy.combinatorics.graycode.graycode property)": [[45, "sympy.combinatorics.graycode.GrayCode.rank"]], "selections (sympy.combinatorics.graycode.graycode property)": [[45, "sympy.combinatorics.graycode.GrayCode.selections"]], "skip() (sympy.combinatorics.graycode.graycode method)": [[45, "sympy.combinatorics.graycode.GrayCode.skip"]], "sympy.combinatorics.graycode": [[45, "module-sympy.combinatorics.graycode"]], "unrank() (sympy.combinatorics.graycode.graycode class method)": [[45, "sympy.combinatorics.graycode.GrayCode.unrank"]], "directproduct() (in module sympy.combinatorics.group_constructs)": [[46, "sympy.combinatorics.group_constructs.DirectProduct"]], "sympy.combinatorics.group_constructs": [[46, "module-sympy.combinatorics.group_constructs"]], "is_abelian_number() (in module sympy.combinatorics.group_numbers)": [[47, "sympy.combinatorics.group_numbers.is_abelian_number"]], "is_cyclic_number() (in module sympy.combinatorics.group_numbers)": [[47, "sympy.combinatorics.group_numbers.is_cyclic_number"]], "is_nilpotent_number() (in module sympy.combinatorics.group_numbers)": [[47, "sympy.combinatorics.group_numbers.is_nilpotent_number"]], "sympy.combinatorics.group_numbers": [[47, "module-sympy.combinatorics.group_numbers"]], "abeliangroup() (in module sympy.combinatorics.named_groups)": [[49, "sympy.combinatorics.named_groups.AbelianGroup"]], "alternatinggroup() (in module sympy.combinatorics.named_groups)": [[49, "sympy.combinatorics.named_groups.AlternatingGroup"]], "cyclicgroup() (in module sympy.combinatorics.named_groups)": [[49, "sympy.combinatorics.named_groups.CyclicGroup"]], "dihedralgroup() (in module sympy.combinatorics.named_groups)": [[49, "sympy.combinatorics.named_groups.DihedralGroup"]], "symmetricgroup() (in module sympy.combinatorics.named_groups)": [[49, "sympy.combinatorics.named_groups.SymmetricGroup"]], "sympy.combinatorics.named_groups": [[49, "module-sympy.combinatorics.named_groups"]], "integerpartition (class in sympy.combinatorics.partitions)": [[50, "sympy.combinatorics.partitions.IntegerPartition"]], "partition (class in sympy.combinatorics.partitions)": [[50, "sympy.combinatorics.partitions.Partition"]], "rgs (sympy.combinatorics.partitions.partition property)": [[50, "sympy.combinatorics.partitions.Partition.RGS"]], "rgs_enum() (in module sympy.combinatorics.partitions)": [[50, "sympy.combinatorics.partitions.RGS_enum"]], "rgs_generalized() (in module sympy.combinatorics.partitions)": [[50, "sympy.combinatorics.partitions.RGS_generalized"]], "rgs_rank() (in module sympy.combinatorics.partitions)": [[50, "sympy.combinatorics.partitions.RGS_rank"]], "rgs_unrank() (in module sympy.combinatorics.partitions)": [[50, "sympy.combinatorics.partitions.RGS_unrank"]], "as_dict() (sympy.combinatorics.partitions.integerpartition method)": [[50, "sympy.combinatorics.partitions.IntegerPartition.as_dict"]], "as_ferrers() (sympy.combinatorics.partitions.integerpartition method)": [[50, "sympy.combinatorics.partitions.IntegerPartition.as_ferrers"]], "conjugate (sympy.combinatorics.partitions.integerpartition property)": [[50, "sympy.combinatorics.partitions.IntegerPartition.conjugate"]], "from_rgs() (sympy.combinatorics.partitions.partition class method)": [[50, "sympy.combinatorics.partitions.Partition.from_rgs"]], "next_lex() (sympy.combinatorics.partitions.integerpartition method)": [[50, "sympy.combinatorics.partitions.IntegerPartition.next_lex"]], "partition (sympy.combinatorics.partitions.partition property)": [[50, "sympy.combinatorics.partitions.Partition.partition"]], "prev_lex() (sympy.combinatorics.partitions.integerpartition method)": [[50, "sympy.combinatorics.partitions.IntegerPartition.prev_lex"]], "random_integer_partition() (in module sympy.combinatorics.partitions)": [[50, "sympy.combinatorics.partitions.random_integer_partition"]], "rank (sympy.combinatorics.partitions.partition property)": [[50, "sympy.combinatorics.partitions.Partition.rank"]], "sort_key() (sympy.combinatorics.partitions.partition method)": [[50, "sympy.combinatorics.partitions.Partition.sort_key"]], "sympy.combinatorics.partitions": [[50, "module-sympy.combinatorics.partitions"]], "permutationgroup (class in sympy.combinatorics.perm_groups)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup"]], "__contains__() (sympy.combinatorics.perm_groups.permutationgroup method)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.__contains__"]], "__mul__() (sympy.combinatorics.perm_groups.permutationgroup method)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.__mul__"]], "__new__() (sympy.combinatorics.perm_groups.permutationgroup static method)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.__new__"]], "__weakref__ (sympy.combinatorics.perm_groups.permutationgroup attribute)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.__weakref__"]], "_coset_representative() (sympy.combinatorics.perm_groups.permutationgroup method)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup._coset_representative"]], "_distinct_primes_lemma() (sympy.combinatorics.perm_groups.permutationgroup class method)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup._distinct_primes_lemma"]], "_elements (sympy.combinatorics.perm_groups.permutationgroup property)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup._elements"]], "_eval_is_alt_sym_monte_carlo() (sympy.combinatorics.perm_groups.permutationgroup method)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup._eval_is_alt_sym_monte_carlo"]], "_eval_is_alt_sym_naive() (sympy.combinatorics.perm_groups.permutationgroup method)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup._eval_is_alt_sym_naive"]], "_p_elements_group() (sympy.combinatorics.perm_groups.permutationgroup method)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup._p_elements_group"]], "_random_pr_init() (sympy.combinatorics.perm_groups.permutationgroup method)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup._random_pr_init"]], "_sylow_alt_sym() (sympy.combinatorics.perm_groups.permutationgroup method)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup._sylow_alt_sym"]], "_union_find_merge() (sympy.combinatorics.perm_groups.permutationgroup method)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup._union_find_merge"]], "_union_find_rep() (sympy.combinatorics.perm_groups.permutationgroup method)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup._union_find_rep"]], "_verify() (sympy.combinatorics.perm_groups.permutationgroup method)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup._verify"]], "abelian_invariants() (sympy.combinatorics.perm_groups.permutationgroup method)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.abelian_invariants"]], "base (sympy.combinatorics.perm_groups.permutationgroup property)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.base"]], "baseswap() (sympy.combinatorics.perm_groups.permutationgroup method)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.baseswap"]], "basic_orbits (sympy.combinatorics.perm_groups.permutationgroup property)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.basic_orbits"]], "basic_stabilizers (sympy.combinatorics.perm_groups.permutationgroup property)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.basic_stabilizers"]], "basic_transversals (sympy.combinatorics.perm_groups.permutationgroup property)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.basic_transversals"]], "center() (sympy.combinatorics.perm_groups.permutationgroup method)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.center"]], "centralizer() (sympy.combinatorics.perm_groups.permutationgroup method)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.centralizer"]], "commutator() (sympy.combinatorics.perm_groups.permutationgroup method)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.commutator"]], "composition_series() (sympy.combinatorics.perm_groups.permutationgroup method)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.composition_series"]], "conjugacy_class() (sympy.combinatorics.perm_groups.permutationgroup method)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.conjugacy_class"]], "conjugacy_classes() (sympy.combinatorics.perm_groups.permutationgroup method)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.conjugacy_classes"]], "contains() (sympy.combinatorics.perm_groups.permutationgroup method)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.contains"]], "coset_factor() (sympy.combinatorics.perm_groups.permutationgroup method)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.coset_factor"]], "coset_rank() (sympy.combinatorics.perm_groups.permutationgroup method)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.coset_rank"]], "coset_table() (sympy.combinatorics.perm_groups.permutationgroup method)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.coset_table"]], "coset_transversal() (sympy.combinatorics.perm_groups.permutationgroup method)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.coset_transversal"]], "coset_unrank() (sympy.combinatorics.perm_groups.permutationgroup method)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.coset_unrank"]], "degree (sympy.combinatorics.perm_groups.permutationgroup property)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.degree"]], "derived_series() (sympy.combinatorics.perm_groups.permutationgroup method)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.derived_series"]], "derived_subgroup() (sympy.combinatorics.perm_groups.permutationgroup method)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.derived_subgroup"]], "elements (sympy.combinatorics.perm_groups.permutationgroup property)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.elements"]], "equals() (sympy.combinatorics.perm_groups.permutationgroup method)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.equals"]], "generate() (sympy.combinatorics.perm_groups.permutationgroup method)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.generate"]], "generate_dimino() (sympy.combinatorics.perm_groups.permutationgroup method)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.generate_dimino"]], "generate_schreier_sims() (sympy.combinatorics.perm_groups.permutationgroup method)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.generate_schreier_sims"]], "generator_product() (sympy.combinatorics.perm_groups.permutationgroup method)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.generator_product"]], "generators (sympy.combinatorics.perm_groups.permutationgroup property)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.generators"]], "identity (sympy.combinatorics.perm_groups.permutationgroup property)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.identity"]], "index() (sympy.combinatorics.perm_groups.permutationgroup method)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.index"]], "is_abelian (sympy.combinatorics.perm_groups.permutationgroup property)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.is_abelian"]], "is_alt_sym() (sympy.combinatorics.perm_groups.permutationgroup method)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.is_alt_sym"]], "is_alternating (sympy.combinatorics.perm_groups.permutationgroup property)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.is_alternating"]], "is_cyclic (sympy.combinatorics.perm_groups.permutationgroup property)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.is_cyclic"]], "is_elementary() (sympy.combinatorics.perm_groups.permutationgroup method)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.is_elementary"]], "is_nilpotent (sympy.combinatorics.perm_groups.permutationgroup property)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.is_nilpotent"]], "is_normal() (sympy.combinatorics.perm_groups.permutationgroup method)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.is_normal"]], "is_perfect (sympy.combinatorics.perm_groups.permutationgroup property)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.is_perfect"]], "is_polycyclic (sympy.combinatorics.perm_groups.permutationgroup property)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.is_polycyclic"]], "is_primitive() (sympy.combinatorics.perm_groups.permutationgroup method)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.is_primitive"]], "is_solvable (sympy.combinatorics.perm_groups.permutationgroup property)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.is_solvable"]], "is_subgroup() (sympy.combinatorics.perm_groups.permutationgroup method)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.is_subgroup"]], "is_symmetric (sympy.combinatorics.perm_groups.permutationgroup property)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.is_symmetric"]], "is_transitive() (sympy.combinatorics.perm_groups.permutationgroup method)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.is_transitive"]], "is_trivial (sympy.combinatorics.perm_groups.permutationgroup property)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.is_trivial"]], "lower_central_series() (sympy.combinatorics.perm_groups.permutationgroup method)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.lower_central_series"]], "make_perm() (sympy.combinatorics.perm_groups.permutationgroup method)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.make_perm"]], "max_div (sympy.combinatorics.perm_groups.permutationgroup property)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.max_div"]], "minimal_block() (sympy.combinatorics.perm_groups.permutationgroup method)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.minimal_block"]], "minimal_blocks() (sympy.combinatorics.perm_groups.permutationgroup method)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.minimal_blocks"]], "normal_closure() (sympy.combinatorics.perm_groups.permutationgroup method)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.normal_closure"]], "orbit() (sympy.combinatorics.perm_groups.permutationgroup method)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.orbit"]], "orbit_rep() (sympy.combinatorics.perm_groups.permutationgroup method)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.orbit_rep"]], "orbit_transversal() (sympy.combinatorics.perm_groups.permutationgroup method)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.orbit_transversal"]], "orbits() (sympy.combinatorics.perm_groups.permutationgroup method)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.orbits"]], "order() (sympy.combinatorics.perm_groups.permutationgroup method)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.order"]], "pointwise_stabilizer() (sympy.combinatorics.perm_groups.permutationgroup method)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.pointwise_stabilizer"]], "polycyclic_group() (sympy.combinatorics.perm_groups.permutationgroup method)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.polycyclic_group"]], "presentation() (sympy.combinatorics.perm_groups.permutationgroup method)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.presentation"]], "random() (sympy.combinatorics.perm_groups.permutationgroup method)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.random"]], "random_pr() (sympy.combinatorics.perm_groups.permutationgroup method)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.random_pr"]], "random_stab() (sympy.combinatorics.perm_groups.permutationgroup method)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.random_stab"]], "schreier_sims() (sympy.combinatorics.perm_groups.permutationgroup method)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims"]], "schreier_sims_incremental() (sympy.combinatorics.perm_groups.permutationgroup method)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims_incremental"]], "schreier_sims_random() (sympy.combinatorics.perm_groups.permutationgroup method)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims_random"]], "schreier_vector() (sympy.combinatorics.perm_groups.permutationgroup method)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.schreier_vector"]], "stabilizer() (sympy.combinatorics.perm_groups.permutationgroup method)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.stabilizer"]], "strong_gens (sympy.combinatorics.perm_groups.permutationgroup property)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.strong_gens"]], "strong_presentation() (sympy.combinatorics.perm_groups.permutationgroup method)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.strong_presentation"]], "subgroup() (sympy.combinatorics.perm_groups.permutationgroup method)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.subgroup"]], "subgroup_search() (sympy.combinatorics.perm_groups.permutationgroup method)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.subgroup_search"]], "sylow_subgroup() (sympy.combinatorics.perm_groups.permutationgroup method)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.sylow_subgroup"]], "sympy.combinatorics.perm_groups": [[52, "module-sympy.combinatorics.perm_groups"]], "transitivity_degree (sympy.combinatorics.perm_groups.permutationgroup property)": [[52, "sympy.combinatorics.perm_groups.PermutationGroup.transitivity_degree"]], "cycle (class in sympy.combinatorics.permutations)": [[53, "sympy.combinatorics.permutations.Cycle"]], "permutation (class in sympy.combinatorics.permutations)": [[53, "sympy.combinatorics.permutations.Permutation"]], "_af_parity() (in module sympy.combinatorics.permutations)": [[53, "sympy.combinatorics.permutations._af_parity"]], "alternating() (sympy.combinatorics.generators method)": [[53, "sympy.combinatorics.generators.alternating"]], "apply() (sympy.combinatorics.permutations.permutation method)": [[53, "sympy.combinatorics.permutations.Permutation.apply"]], "array_form (sympy.combinatorics.permutations.permutation property)": [[53, "sympy.combinatorics.permutations.Permutation.array_form"]], "ascents() (sympy.combinatorics.permutations.permutation method)": [[53, "sympy.combinatorics.permutations.Permutation.ascents"]], "atoms() (sympy.combinatorics.permutations.permutation method)": [[53, "sympy.combinatorics.permutations.Permutation.atoms"]], "cardinality (sympy.combinatorics.permutations.permutation property)": [[53, "sympy.combinatorics.permutations.Permutation.cardinality"]], "commutator() (sympy.combinatorics.permutations.permutation method)": [[53, "sympy.combinatorics.permutations.Permutation.commutator"]], "commutes_with() (sympy.combinatorics.permutations.permutation method)": [[53, "sympy.combinatorics.permutations.Permutation.commutes_with"]], "cycle_structure (sympy.combinatorics.permutations.permutation property)": [[53, "sympy.combinatorics.permutations.Permutation.cycle_structure"]], "cycles (sympy.combinatorics.permutations.permutation property)": [[53, "sympy.combinatorics.permutations.Permutation.cycles"]], "cyclic() (sympy.combinatorics.generators method)": [[53, "sympy.combinatorics.generators.cyclic"]], "cyclic_form (sympy.combinatorics.permutations.permutation property)": [[53, "sympy.combinatorics.permutations.Permutation.cyclic_form"]], "descents() (sympy.combinatorics.permutations.permutation method)": [[53, "sympy.combinatorics.permutations.Permutation.descents"]], "dihedral() (sympy.combinatorics.generators method)": [[53, "sympy.combinatorics.generators.dihedral"]], "from_inversion_vector() (sympy.combinatorics.permutations.permutation class method)": [[53, "sympy.combinatorics.permutations.Permutation.from_inversion_vector"]], "from_sequence() (sympy.combinatorics.permutations.permutation class method)": [[53, "sympy.combinatorics.permutations.Permutation.from_sequence"]], "full_cyclic_form (sympy.combinatorics.permutations.permutation property)": [[53, "sympy.combinatorics.permutations.Permutation.full_cyclic_form"]], "get_adjacency_distance() (sympy.combinatorics.permutations.permutation method)": [[53, "sympy.combinatorics.permutations.Permutation.get_adjacency_distance"]], "get_adjacency_matrix() (sympy.combinatorics.permutations.permutation method)": [[53, "sympy.combinatorics.permutations.Permutation.get_adjacency_matrix"]], "get_positional_distance() (sympy.combinatorics.permutations.permutation method)": [[53, "sympy.combinatorics.permutations.Permutation.get_positional_distance"]], "get_precedence_distance() (sympy.combinatorics.permutations.permutation method)": [[53, "sympy.combinatorics.permutations.Permutation.get_precedence_distance"]], "get_precedence_matrix() (sympy.combinatorics.permutations.permutation method)": [[53, "sympy.combinatorics.permutations.Permutation.get_precedence_matrix"]], "index() (sympy.combinatorics.permutations.permutation method)": [[53, "sympy.combinatorics.permutations.Permutation.index"]], "inversion_vector() (sympy.combinatorics.permutations.permutation method)": [[53, "sympy.combinatorics.permutations.Permutation.inversion_vector"]], "inversions() (sympy.combinatorics.permutations.permutation method)": [[53, "sympy.combinatorics.permutations.Permutation.inversions"]], "is_empty (sympy.combinatorics.permutations.permutation property)": [[53, "sympy.combinatorics.permutations.Permutation.is_Empty"]], "is_identity (sympy.combinatorics.permutations.permutation property)": [[53, "sympy.combinatorics.permutations.Permutation.is_Identity"]], "is_singleton (sympy.combinatorics.permutations.permutation property)": [[53, "sympy.combinatorics.permutations.Permutation.is_Singleton"]], "is_even (sympy.combinatorics.permutations.permutation property)": [[53, "sympy.combinatorics.permutations.Permutation.is_even"]], "is_odd (sympy.combinatorics.permutations.permutation property)": [[53, "sympy.combinatorics.permutations.Permutation.is_odd"]], "josephus() (sympy.combinatorics.permutations.permutation class method)": [[53, "sympy.combinatorics.permutations.Permutation.josephus"]], "length() (sympy.combinatorics.permutations.permutation method)": [[53, "sympy.combinatorics.permutations.Permutation.length"]], "list() (sympy.combinatorics.permutations.cycle method)": [[53, "sympy.combinatorics.permutations.Cycle.list"]], "list() (sympy.combinatorics.permutations.permutation method)": [[53, "sympy.combinatorics.permutations.Permutation.list"]], "max() (sympy.combinatorics.permutations.permutation method)": [[53, "sympy.combinatorics.permutations.Permutation.max"]], "min() (sympy.combinatorics.permutations.permutation method)": [[53, "sympy.combinatorics.permutations.Permutation.min"]], "mul_inv() (sympy.combinatorics.permutations.permutation method)": [[53, "sympy.combinatorics.permutations.Permutation.mul_inv"]], "next_lex() (sympy.combinatorics.permutations.permutation method)": [[53, "sympy.combinatorics.permutations.Permutation.next_lex"]], "next_nonlex() (sympy.combinatorics.permutations.permutation method)": [[53, "sympy.combinatorics.permutations.Permutation.next_nonlex"]], "next_trotterjohnson() (sympy.combinatorics.permutations.permutation method)": [[53, "sympy.combinatorics.permutations.Permutation.next_trotterjohnson"]], "order() (sympy.combinatorics.permutations.permutation method)": [[53, "sympy.combinatorics.permutations.Permutation.order"]], "parity() (sympy.combinatorics.permutations.permutation method)": [[53, "sympy.combinatorics.permutations.Permutation.parity"]], "random() (sympy.combinatorics.permutations.permutation class method)": [[53, "sympy.combinatorics.permutations.Permutation.random"]], "rank() (sympy.combinatorics.permutations.permutation method)": [[53, "sympy.combinatorics.permutations.Permutation.rank"]], "rank_nonlex() (sympy.combinatorics.permutations.permutation method)": [[53, "sympy.combinatorics.permutations.Permutation.rank_nonlex"]], "rank_trotterjohnson() (sympy.combinatorics.permutations.permutation method)": [[53, "sympy.combinatorics.permutations.Permutation.rank_trotterjohnson"]], "resize() (sympy.combinatorics.permutations.permutation method)": [[53, "sympy.combinatorics.permutations.Permutation.resize"]], "rmul() (sympy.combinatorics.permutations.permutation static method)": [[53, "sympy.combinatorics.permutations.Permutation.rmul"]], "rmul_with_af() (sympy.combinatorics.permutations.permutation class method)": [[53, "sympy.combinatorics.permutations.Permutation.rmul_with_af"]], "runs() (sympy.combinatorics.permutations.permutation method)": [[53, "sympy.combinatorics.permutations.Permutation.runs"]], "signature() (sympy.combinatorics.permutations.permutation method)": [[53, "sympy.combinatorics.permutations.Permutation.signature"]], "size (sympy.combinatorics.permutations.permutation property)": [[53, "sympy.combinatorics.permutations.Permutation.size"]], "support() (sympy.combinatorics.permutations.permutation method)": [[53, "sympy.combinatorics.permutations.Permutation.support"]], "symmetric() (sympy.combinatorics.generators method)": [[53, "sympy.combinatorics.generators.symmetric"]], "sympy.combinatorics.generators": [[53, "module-sympy.combinatorics.generators"]], "sympy.combinatorics.permutations": [[53, "module-sympy.combinatorics.permutations"]], "transpositions() (sympy.combinatorics.permutations.permutation method)": [[53, "sympy.combinatorics.permutations.Permutation.transpositions"]], "unrank_lex() (sympy.combinatorics.permutations.permutation class method)": [[53, "sympy.combinatorics.permutations.Permutation.unrank_lex"]], "unrank_nonlex() (sympy.combinatorics.permutations.permutation class method)": [[53, "sympy.combinatorics.permutations.Permutation.unrank_nonlex"]], "unrank_trotterjohnson() (sympy.combinatorics.permutations.permutation class method)": [[53, "sympy.combinatorics.permutations.Permutation.unrank_trotterjohnson"]], "polyhedron (class in sympy.combinatorics.polyhedron)": [[54, "sympy.combinatorics.polyhedron.Polyhedron"]], "array_form (sympy.combinatorics.polyhedron.polyhedron property)": [[54, "sympy.combinatorics.polyhedron.Polyhedron.array_form"]], "corners (sympy.combinatorics.polyhedron.polyhedron property)": [[54, "sympy.combinatorics.polyhedron.Polyhedron.corners"]], "cyclic_form (sympy.combinatorics.polyhedron.polyhedron property)": [[54, "sympy.combinatorics.polyhedron.Polyhedron.cyclic_form"]], "edges (sympy.combinatorics.polyhedron.polyhedron property)": [[54, "sympy.combinatorics.polyhedron.Polyhedron.edges"]], "faces (sympy.combinatorics.polyhedron.polyhedron property)": [[54, "sympy.combinatorics.polyhedron.Polyhedron.faces"]], "pgroup (sympy.combinatorics.polyhedron.polyhedron property)": [[54, "sympy.combinatorics.polyhedron.Polyhedron.pgroup"]], "reset() (sympy.combinatorics.polyhedron.polyhedron method)": [[54, "sympy.combinatorics.polyhedron.Polyhedron.reset"]], "rotate() (sympy.combinatorics.polyhedron.polyhedron method)": [[54, "sympy.combinatorics.polyhedron.Polyhedron.rotate"]], "size (sympy.combinatorics.polyhedron.polyhedron property)": [[54, "sympy.combinatorics.polyhedron.Polyhedron.size"]], "sympy.combinatorics.polyhedron": [[54, "module-sympy.combinatorics.polyhedron"]], "vertices (sympy.combinatorics.polyhedron.polyhedron property)": [[54, "sympy.combinatorics.polyhedron.Polyhedron.vertices"]], "prufer (class in sympy.combinatorics.prufer)": [[55, "sympy.combinatorics.prufer.Prufer"]], "edges() (sympy.combinatorics.prufer.prufer static method)": [[55, "sympy.combinatorics.prufer.Prufer.edges"]], "next() (sympy.combinatorics.prufer.prufer method)": [[55, "sympy.combinatorics.prufer.Prufer.next"]], "nodes (sympy.combinatorics.prufer.prufer property)": [[55, "sympy.combinatorics.prufer.Prufer.nodes"]], "prev() (sympy.combinatorics.prufer.prufer method)": [[55, "sympy.combinatorics.prufer.Prufer.prev"]], "prufer_rank() (sympy.combinatorics.prufer.prufer method)": [[55, "sympy.combinatorics.prufer.Prufer.prufer_rank"]], "prufer_repr (sympy.combinatorics.prufer.prufer property)": [[55, "sympy.combinatorics.prufer.Prufer.prufer_repr"]], "rank (sympy.combinatorics.prufer.prufer property)": [[55, "sympy.combinatorics.prufer.Prufer.rank"]], "size (sympy.combinatorics.prufer.prufer property)": [[55, "sympy.combinatorics.prufer.Prufer.size"]], "sympy.combinatorics.prufer": [[55, "module-sympy.combinatorics.prufer"]], "to_prufer() (sympy.combinatorics.prufer.prufer static method)": [[55, "sympy.combinatorics.prufer.Prufer.to_prufer"]], "to_tree() (sympy.combinatorics.prufer.prufer static method)": [[55, "sympy.combinatorics.prufer.Prufer.to_tree"]], "tree_repr (sympy.combinatorics.prufer.prufer property)": [[55, "sympy.combinatorics.prufer.Prufer.tree_repr"]], "unrank() (sympy.combinatorics.prufer.prufer class method)": [[55, "sympy.combinatorics.prufer.Prufer.unrank"]], "subset (class in sympy.combinatorics.subsets)": [[56, "sympy.combinatorics.subsets.Subset"]], "bitlist_from_subset() (sympy.combinatorics.subsets.subset class method)": [[56, "sympy.combinatorics.subsets.Subset.bitlist_from_subset"]], "cardinality (sympy.combinatorics.subsets.subset property)": [[56, "sympy.combinatorics.subsets.Subset.cardinality"]], "iterate_binary() (sympy.combinatorics.subsets.subset method)": [[56, "sympy.combinatorics.subsets.Subset.iterate_binary"]], "iterate_graycode() (sympy.combinatorics.subsets.subset method)": [[56, "sympy.combinatorics.subsets.Subset.iterate_graycode"]], "ksubsets() (sympy.combinatorics.subsets method)": [[56, "sympy.combinatorics.subsets.ksubsets"]], "next_binary() (sympy.combinatorics.subsets.subset method)": [[56, "sympy.combinatorics.subsets.Subset.next_binary"]], "next_gray() (sympy.combinatorics.subsets.subset method)": [[56, "sympy.combinatorics.subsets.Subset.next_gray"]], "next_lexicographic() (sympy.combinatorics.subsets.subset method)": [[56, "sympy.combinatorics.subsets.Subset.next_lexicographic"]], "prev_binary() (sympy.combinatorics.subsets.subset method)": [[56, "sympy.combinatorics.subsets.Subset.prev_binary"]], "prev_gray() (sympy.combinatorics.subsets.subset method)": [[56, "sympy.combinatorics.subsets.Subset.prev_gray"]], "prev_lexicographic() (sympy.combinatorics.subsets.subset method)": [[56, "sympy.combinatorics.subsets.Subset.prev_lexicographic"]], "rank_binary (sympy.combinatorics.subsets.subset property)": [[56, "sympy.combinatorics.subsets.Subset.rank_binary"]], "rank_gray (sympy.combinatorics.subsets.subset property)": [[56, "sympy.combinatorics.subsets.Subset.rank_gray"]], "rank_lexicographic (sympy.combinatorics.subsets.subset property)": [[56, "sympy.combinatorics.subsets.Subset.rank_lexicographic"]], "size (sympy.combinatorics.subsets.subset property)": [[56, "sympy.combinatorics.subsets.Subset.size"]], "subset (sympy.combinatorics.subsets.subset property)": [[56, "sympy.combinatorics.subsets.Subset.subset"]], "subset_from_bitlist() (sympy.combinatorics.subsets.subset class method)": [[56, "sympy.combinatorics.subsets.Subset.subset_from_bitlist"]], "subset_indices() (sympy.combinatorics.subsets.subset class method)": [[56, "sympy.combinatorics.subsets.Subset.subset_indices"]], "superset (sympy.combinatorics.subsets.subset property)": [[56, "sympy.combinatorics.subsets.Subset.superset"]], "superset_size (sympy.combinatorics.subsets.subset property)": [[56, "sympy.combinatorics.subsets.Subset.superset_size"]], "sympy.combinatorics.subsets": [[56, "module-sympy.combinatorics.subsets"]], "unrank_binary() (sympy.combinatorics.subsets.subset class method)": [[56, "sympy.combinatorics.subsets.Subset.unrank_binary"]], "unrank_gray() (sympy.combinatorics.subsets.subset class method)": [[56, "sympy.combinatorics.subsets.Subset.unrank_gray"]], "bsgs_direct_product() (in module sympy.combinatorics.tensor_can)": [[57, "sympy.combinatorics.tensor_can.bsgs_direct_product"]], "canonicalize() (in module sympy.combinatorics.tensor_can)": [[57, "sympy.combinatorics.tensor_can.canonicalize"]], "double_coset_can_rep() (in module sympy.combinatorics.tensor_can)": [[57, "sympy.combinatorics.tensor_can.double_coset_can_rep"]], "get_symmetric_group_sgs() (in module sympy.combinatorics.tensor_can)": [[57, "sympy.combinatorics.tensor_can.get_symmetric_group_sgs"]], "sympy.combinatorics.tensor_can": [[57, "module-sympy.combinatorics.tensor_can"]], "_cmp_perm_lists() (in module sympy.combinatorics.testutil)": [[58, "sympy.combinatorics.testutil._cmp_perm_lists"]], "_naive_list_centralizer() (in module sympy.combinatorics.testutil)": [[58, "sympy.combinatorics.testutil._naive_list_centralizer"]], "_verify_bsgs() (in module sympy.combinatorics.testutil)": [[58, "sympy.combinatorics.testutil._verify_bsgs"]], "_verify_centralizer() (in module sympy.combinatorics.testutil)": [[58, "sympy.combinatorics.testutil._verify_centralizer"]], "_verify_normal_closure() (in module sympy.combinatorics.testutil)": [[58, "sympy.combinatorics.testutil._verify_normal_closure"]], "sympy.combinatorics.testutil": [[58, "module-sympy.combinatorics.testutil"]], "_base_ordering() (in module sympy.combinatorics.util)": [[59, "sympy.combinatorics.util._base_ordering"]], "_check_cycles_alt_sym() (in module sympy.combinatorics.util)": [[59, "sympy.combinatorics.util._check_cycles_alt_sym"]], "_distribute_gens_by_base() (in module sympy.combinatorics.util)": [[59, "sympy.combinatorics.util._distribute_gens_by_base"]], "_handle_precomputed_bsgs() (in module sympy.combinatorics.util)": [[59, "sympy.combinatorics.util._handle_precomputed_bsgs"]], "_orbits_transversals_from_bsgs() (in module sympy.combinatorics.util)": [[59, "sympy.combinatorics.util._orbits_transversals_from_bsgs"]], "_remove_gens() (in module sympy.combinatorics.util)": [[59, "sympy.combinatorics.util._remove_gens"]], "_strip() (in module sympy.combinatorics.util)": [[59, "sympy.combinatorics.util._strip"]], "_strong_gens_from_distr() (in module sympy.combinatorics.util)": [[59, "sympy.combinatorics.util._strong_gens_from_distr"]], "sympy.combinatorics.util": [[59, "module-sympy.combinatorics.util"]], "exprwithintlimits (class in sympy.concrete.expr_with_intlimits)": [[60, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits"]], "product (class in sympy.concrete.products)": [[60, "sympy.concrete.products.Product"]], "sum (class in sympy.concrete.summations)": [[60, "sympy.concrete.summations.Sum"]], "change_index() (sympy.concrete.expr_with_intlimits.exprwithintlimits method)": [[60, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits.change_index"]], "euler_maclaurin() (sympy.concrete.summations.sum method)": [[60, "sympy.concrete.summations.Sum.euler_maclaurin"]], "eval_zeta_function() (sympy.concrete.summations.sum method)": [[60, "sympy.concrete.summations.Sum.eval_zeta_function"]], "gosper_normal() (in module sympy.concrete.gosper)": [[60, "sympy.concrete.gosper.gosper_normal"]], "gosper_sum() (in module sympy.concrete.gosper)": [[60, "sympy.concrete.gosper.gosper_sum"]], "gosper_term() (in module sympy.concrete.gosper)": [[60, "sympy.concrete.gosper.gosper_term"]], "has_empty_sequence (sympy.concrete.expr_with_intlimits.exprwithintlimits property)": [[60, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits.has_empty_sequence"]], "index() (sympy.concrete.expr_with_intlimits.exprwithintlimits method)": [[60, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits.index"]], "is_absolutely_convergent() (sympy.concrete.summations.sum method)": [[60, "sympy.concrete.summations.Sum.is_absolutely_convergent"]], "is_convergent() (sympy.concrete.products.product method)": [[60, "sympy.concrete.products.Product.is_convergent"]], "is_convergent() (sympy.concrete.summations.sum method)": [[60, "sympy.concrete.summations.Sum.is_convergent"]], "product() (in module sympy.concrete.products)": [[60, "sympy.concrete.products.product"]], "reorder() (sympy.concrete.expr_with_intlimits.exprwithintlimits method)": [[60, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits.reorder"]], "reorder_limit() (sympy.concrete.expr_with_intlimits.exprwithintlimits method)": [[60, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits.reorder_limit"]], "reverse_order() (sympy.concrete.products.product method)": [[60, "sympy.concrete.products.Product.reverse_order"]], "reverse_order() (sympy.concrete.summations.sum method)": [[60, "sympy.concrete.summations.Sum.reverse_order"]], "summation() (in module sympy.concrete.summations)": [[60, "sympy.concrete.summations.summation"]], "add (class in sympy.core.add)": [[61, "sympy.core.add.Add"]], "algebraicnumber (class in sympy.core.numbers)": [[61, "sympy.core.numbers.AlgebraicNumber"]], "atom (class in sympy.core.basic)": [[61, "sympy.core.basic.Atom"]], "atomicexpr (class in sympy.core.expr)": [[61, "sympy.core.expr.AtomicExpr"]], "basic (class in sympy.core.basic)": [[61, "sympy.core.basic.Basic"]], "booleankind (in module sympy.core.kind)": [[61, "sympy.core.kind.BooleanKind"]], "catalan (class in sympy.core.numbers)": [[61, "sympy.core.numbers.Catalan"]], "complexinfinity (class in sympy.core.numbers)": [[61, "sympy.core.numbers.ComplexInfinity"]], "derivative (class in sympy.core.function)": [[61, "sympy.core.function.Derivative"]], "dict (class in sympy.core.containers)": [[61, "sympy.core.containers.Dict"]], "dummy (class in sympy.core.symbol)": [[61, "sympy.core.symbol.Dummy"]], "eq (in module sympy.core.relational)": [[61, "sympy.core.relational.Eq"]], "equality (class in sympy.core.relational)": [[61, "sympy.core.relational.Equality"]], "eulergamma (class in sympy.core.numbers)": [[61, "sympy.core.numbers.EulerGamma"]], "evalfmixin (class in sympy.core.evalf)": [[61, "sympy.core.evalf.EvalfMixin"]], "exp1 (class in sympy.core.numbers)": [[61, "sympy.core.numbers.Exp1"]], "expr (class in sympy.core.expr)": [[61, "sympy.core.expr.Expr"]], "float (class in sympy.core.numbers)": [[61, "sympy.core.numbers.Float"]], "function (class in sympy.core.function)": [[61, "sympy.core.function.Function"]], "functionclass (class in sympy.core.function)": [[61, "sympy.core.function.FunctionClass"]], "ge (in module sympy.core.relational)": [[61, "sympy.core.relational.Ge"]], "goldenratio (class in sympy.core.numbers)": [[61, "sympy.core.numbers.GoldenRatio"]], "greaterthan (class in sympy.core.relational)": [[61, "sympy.core.relational.GreaterThan"]], "gt (in module sympy.core.relational)": [[61, "sympy.core.relational.Gt"]], "half (class in sympy.core.numbers)": [[61, "sympy.core.numbers.Half"]], "imaginaryunit (class in sympy.core.numbers)": [[61, "sympy.core.numbers.ImaginaryUnit"]], "infinity (class in sympy.core.numbers)": [[61, "sympy.core.numbers.Infinity"]], "integer (class in sympy.core.numbers)": [[61, "sympy.core.numbers.Integer"]], "kind (class in sympy.core.kind)": [[61, "sympy.core.kind.Kind"]], "lambda (class in sympy.core.function)": [[61, "sympy.core.function.Lambda"]], "le (in module sympy.core.relational)": [[61, "sympy.core.relational.Le"]], "lessthan (class in sympy.core.relational)": [[61, "sympy.core.relational.LessThan"]], "lt (in module sympy.core.relational)": [[61, "sympy.core.relational.Lt"]], "mod (class in sympy.core.mod)": [[61, "sympy.core.mod.Mod"]], "mul (class in sympy.core.mul)": [[61, "sympy.core.mul.Mul"]], "n() (in module sympy.core.evalf)": [[61, "sympy.core.evalf.N"]], "nan (class in sympy.core.numbers)": [[61, "sympy.core.numbers.NaN"]], "ne (in module sympy.core.relational)": [[61, "sympy.core.relational.Ne"]], "negativeinfinity (class in sympy.core.numbers)": [[61, "sympy.core.numbers.NegativeInfinity"]], "negativeone (class in sympy.core.numbers)": [[61, "sympy.core.numbers.NegativeOne"]], "number (class in sympy.core.numbers)": [[61, "sympy.core.numbers.Number"]], "numberkind (in module sympy.core.kind)": [[61, "sympy.core.kind.NumberKind"]], "numbersymbol (class in sympy.core.numbers)": [[61, "sympy.core.numbers.NumberSymbol"]], "one (class in sympy.core.numbers)": [[61, "sympy.core.numbers.One"]], "pep 335": [[61, "index-0"], [61, "index-1"], [61, "index-2"], [61, "index-3"]], "pi (class in sympy.core.numbers)": [[61, "sympy.core.numbers.Pi"]], "poleerror (class in sympy.core.function)": [[61, "sympy.core.function.PoleError"]], "pow (class in sympy.core.power)": [[61, "sympy.core.power.Pow"]], "precisionexhausted (class in sympy.core.evalf)": [[61, "sympy.core.evalf.PrecisionExhausted"]], "python enhancement proposals": [[61, "index-0"], [61, "index-1"], [61, "index-2"], [61, "index-3"]], "rational (class in sympy.core.numbers)": [[61, "sympy.core.numbers.Rational"]], "realnumber (in module sympy.core.numbers)": [[61, "sympy.core.numbers.RealNumber"]], "rel (in module sympy.core.relational)": [[61, "sympy.core.relational.Rel"]], "relational (class in sympy.core.relational)": [[61, "sympy.core.relational.Relational"]], "singleton (class in sympy.core.singleton)": [[61, "sympy.core.singleton.Singleton"]], "singletonregistry (class in sympy.core.singleton)": [[61, "sympy.core.singleton.SingletonRegistry"]], "strictgreaterthan (class in sympy.core.relational)": [[61, "sympy.core.relational.StrictGreaterThan"]], "strictlessthan (class in sympy.core.relational)": [[61, "sympy.core.relational.StrictLessThan"]], "subs (class in sympy.core.function)": [[61, "sympy.core.function.Subs"]], "symbol (class in sympy.core.symbol)": [[61, "sympy.core.symbol.Symbol"]], "tribonacciconstant (class in sympy.core.numbers)": [[61, "sympy.core.numbers.TribonacciConstant"]], "tuple (class in sympy.core.containers)": [[61, "sympy.core.containers.Tuple"]], "tuplekind (class in sympy.core.containers)": [[61, "sympy.core.containers.TupleKind"]], "undefinedkind (in module sympy.core.kind)": [[61, "sympy.core.kind.UndefinedKind"]], "unequality (class in sympy.core.relational)": [[61, "sympy.core.relational.Unequality"]], "unevaluatedexpr (class in sympy.core.expr)": [[61, "sympy.core.expr.UnevaluatedExpr"]], "wild (class in sympy.core.symbol)": [[61, "sympy.core.symbol.Wild"]], "wildfunction (class in sympy.core.function)": [[61, "sympy.core.function.WildFunction"]], "zero (class in sympy.core.numbers)": [[61, "sympy.core.numbers.Zero"]], "__cacheit() (in module sympy.core.cache)": [[61, "sympy.core.cache.__cacheit"]], "__new__() (sympy.core.numbers.algebraicnumber static method)": [[61, "sympy.core.numbers.AlgebraicNumber.__new__"]], "_diff_wrt (sympy.core.function.derivative property)": [[61, "sympy.core.function.Derivative._diff_wrt"]], "_randint() (in module sympy.core.random)": [[61, "sympy.core.random._randint"]], "_randrange() (in module sympy.core.random)": [[61, "sympy.core.random._randrange"]], "_sort_variable_count() (sympy.core.function.derivative class method)": [[61, "sympy.core.function.Derivative._sort_variable_count"]], "algebraic": [[61, "term-algebraic"]], "antihermitian": [[61, "term-antihermitian"]], "apart() (sympy.core.expr.expr method)": [[61, "sympy.core.expr.Expr.apart"]], "approximation() (sympy.core.numbers.numbersymbol method)": [[61, "sympy.core.numbers.NumberSymbol.approximation"]], "args (sympy.core.basic.basic property)": [[61, "sympy.core.basic.Basic.args"]], "args_cnc() (sympy.core.expr.expr method)": [[61, "sympy.core.expr.Expr.args_cnc"]], "as_base_exp() (sympy.core.function.function method)": [[61, "sympy.core.function.Function.as_base_exp"]], "as_base_exp() (sympy.core.power.pow method)": [[61, "sympy.core.power.Pow.as_base_exp"]], "as_coeff_add() (sympy.core.add.add method)": [[61, "sympy.core.add.Add.as_coeff_Add"], [61, "sympy.core.add.Add.as_coeff_add"]], "as_coeff_add() (sympy.core.expr.expr method)": [[61, "sympy.core.expr.Expr.as_coeff_Add"], [61, "sympy.core.expr.Expr.as_coeff_add"]], "as_coeff_add() (sympy.core.numbers.number method)": [[61, "sympy.core.numbers.Number.as_coeff_Add"]], "as_coeff_add() (sympy.core.numbers.rational method)": [[61, "sympy.core.numbers.Rational.as_coeff_Add"]], "as_coeff_mul() (sympy.core.expr.expr method)": [[61, "sympy.core.expr.Expr.as_coeff_Mul"], [61, "sympy.core.expr.Expr.as_coeff_mul"]], "as_coeff_mul() (sympy.core.mul.mul method)": [[61, "sympy.core.mul.Mul.as_coeff_Mul"]], "as_coeff_mul() (sympy.core.numbers.number method)": [[61, "sympy.core.numbers.Number.as_coeff_Mul"]], "as_coeff_mul() (sympy.core.numbers.rational method)": [[61, "sympy.core.numbers.Rational.as_coeff_Mul"]], "as_coeff_exponent() (sympy.core.expr.expr method)": [[61, "sympy.core.expr.Expr.as_coeff_exponent"]], "as_coefficient() (sympy.core.expr.expr method)": [[61, "sympy.core.expr.Expr.as_coefficient"]], "as_coefficients_dict() (sympy.core.expr.expr method)": [[61, "sympy.core.expr.Expr.as_coefficients_dict"]], "as_content_primitive() (sympy.core.add.add method)": [[61, "sympy.core.add.Add.as_content_primitive"]], "as_content_primitive() (sympy.core.basic.basic method)": [[61, "sympy.core.basic.Basic.as_content_primitive"]], "as_content_primitive() (sympy.core.expr.expr method)": [[61, "sympy.core.expr.Expr.as_content_primitive"]], "as_content_primitive() (sympy.core.mul.mul method)": [[61, "sympy.core.mul.Mul.as_content_primitive"]], "as_content_primitive() (sympy.core.numbers.rational method)": [[61, "sympy.core.numbers.Rational.as_content_primitive"]], "as_content_primitive() (sympy.core.power.pow method)": [[61, "sympy.core.power.Pow.as_content_primitive"]], "as_dummy() (sympy.core.basic.basic method)": [[61, "sympy.core.basic.Basic.as_dummy"]], "as_expr() (sympy.core.expr.expr method)": [[61, "sympy.core.expr.Expr.as_expr"]], "as_expr() (sympy.core.numbers.algebraicnumber method)": [[61, "sympy.core.numbers.AlgebraicNumber.as_expr"]], "as_finite_difference() (sympy.core.function.derivative method)": [[61, "sympy.core.function.Derivative.as_finite_difference"]], "as_independent() (sympy.core.expr.expr method)": [[61, "sympy.core.expr.Expr.as_independent"]], "as_leading_term() (sympy.core.expr.expr method)": [[61, "sympy.core.expr.Expr.as_leading_term"]], "as_numer_denom() (sympy.core.add.add method)": [[61, "sympy.core.add.Add.as_numer_denom"]], "as_numer_denom() (sympy.core.expr.expr method)": [[61, "sympy.core.expr.Expr.as_numer_denom"]], "as_ordered_factors() (sympy.core.expr.expr method)": [[61, "sympy.core.expr.Expr.as_ordered_factors"]], "as_ordered_factors() (sympy.core.mul.mul method)": [[61, "sympy.core.mul.Mul.as_ordered_factors"]], "as_ordered_terms() (sympy.core.expr.expr method)": [[61, "sympy.core.expr.Expr.as_ordered_terms"]], "as_poly() (sympy.core.expr.expr method)": [[61, "sympy.core.expr.Expr.as_poly"]], "as_poly() (sympy.core.numbers.algebraicnumber method)": [[61, "sympy.core.numbers.AlgebraicNumber.as_poly"]], "as_poly() (sympy.core.relational.equality method)": [[61, "sympy.core.relational.Equality.as_poly"]], "as_powers_dict() (sympy.core.expr.expr method)": [[61, "sympy.core.expr.Expr.as_powers_dict"]], "as_real_imag() (sympy.core.add.add method)": [[61, "sympy.core.add.Add.as_real_imag"]], "as_real_imag() (sympy.core.expr.expr method)": [[61, "sympy.core.expr.Expr.as_real_imag"]], "as_terms() (sympy.core.expr.expr method)": [[61, "sympy.core.expr.Expr.as_terms"]], "as_two_terms() (sympy.core.add.add method)": [[61, "sympy.core.add.Add.as_two_terms"]], "as_two_terms() (sympy.core.mul.mul method)": [[61, "sympy.core.mul.Mul.as_two_terms"]], "aseries() (sympy.core.expr.expr method)": [[61, "sympy.core.expr.Expr.aseries"]], "assumptions0 (sympy.core.basic.basic property)": [[61, "sympy.core.basic.Basic.assumptions0"]], "atoms() (sympy.core.basic.basic method)": [[61, "sympy.core.basic.Basic.atoms"]], "bottom_up() (in module sympy.core.traversal)": [[61, "sympy.core.traversal.bottom_up"]], "bound_symbols (sympy.core.function.lambda property)": [[61, "sympy.core.function.Lambda.bound_symbols"]], "bound_symbols (sympy.core.function.subs property)": [[61, "sympy.core.function.Subs.bound_symbols"]], "cancel() (sympy.core.expr.expr method)": [[61, "sympy.core.expr.Expr.cancel"]], "canonical (sympy.core.relational.relational property)": [[61, "sympy.core.relational.Relational.canonical"]], "canonical_variables (sympy.core.basic.basic property)": [[61, "sympy.core.basic.Basic.canonical_variables"]], "class_key() (sympy.core.add.add class method)": [[61, "sympy.core.add.Add.class_key"]], "class_key() (sympy.core.basic.basic class method)": [[61, "sympy.core.basic.Basic.class_key"]], "coeff() (sympy.core.expr.expr method)": [[61, "sympy.core.expr.Expr.coeff"]], "coeffs() (sympy.core.numbers.algebraicnumber method)": [[61, "sympy.core.numbers.AlgebraicNumber.coeffs"]], "cofactors() (sympy.core.numbers.number method)": [[61, "sympy.core.numbers.Number.cofactors"]], "collect() (sympy.core.expr.expr method)": [[61, "sympy.core.expr.Expr.collect"]], "combsimp() (sympy.core.expr.expr method)": [[61, "sympy.core.expr.Expr.combsimp"]], "commutative": [[61, "term-commutative"]], "compare() (sympy.core.basic.basic method)": [[61, "sympy.core.basic.Basic.compare"]], "complex": [[61, "term-complex"]], "composite": [[61, "term-composite"]], "compute_leading_term() (sympy.core.expr.expr method)": [[61, "sympy.core.expr.Expr.compute_leading_term"]], "conjugate() (sympy.core.expr.expr method)": [[61, "sympy.core.expr.Expr.conjugate"]], "could_extract_minus_sign() (sympy.core.expr.expr method)": [[61, "sympy.core.expr.Expr.could_extract_minus_sign"]], "count() (sympy.core.basic.basic method)": [[61, "sympy.core.basic.Basic.count"]], "count_ops() (in module sympy.core.function)": [[61, "sympy.core.function.count_ops"]], "count_ops() (sympy.core.basic.basic method)": [[61, "sympy.core.basic.Basic.count_ops"]], "count_ops() (sympy.core.expr.expr method)": [[61, "sympy.core.expr.Expr.count_ops"]], "default_sort_key() (in module sympy.core.sorting)": [[61, "sympy.core.sorting.default_sort_key"]], "diff() (in module sympy.core.function)": [[61, "sympy.core.function.diff"]], "doit() (sympy.core.basic.basic method)": [[61, "sympy.core.basic.Basic.doit"]], "doit_numerically() (sympy.core.function.derivative method)": [[61, "sympy.core.function.Derivative.doit_numerically"]], "dummy_eq() (sympy.core.basic.basic method)": [[61, "sympy.core.basic.Basic.dummy_eq"]], "equals() (sympy.core.expr.expr method)": [[61, "sympy.core.expr.Expr.equals"]], "equals() (sympy.core.relational.relational method)": [[61, "sympy.core.relational.Relational.equals"]], "evalf() (sympy.core.evalf.evalfmixin method)": [[61, "sympy.core.evalf.EvalfMixin.evalf"]], "even": [[61, "term-even"]], "expand() (in module sympy.core.function)": [[61, "sympy.core.function.expand"]], "expand() (sympy.core.expr.expr method)": [[61, "sympy.core.expr.Expr.expand"]], "expand_complex() (in module sympy.core.function)": [[61, "sympy.core.function.expand_complex"]], "expand_func() (in module sympy.core.function)": [[61, "sympy.core.function.expand_func"]], "expand_log() (in module sympy.core.function)": [[61, "sympy.core.function.expand_log"]], "expand_mul() (in module sympy.core.function)": [[61, "sympy.core.function.expand_mul"]], "expand_multinomial() (in module sympy.core.function)": [[61, "sympy.core.function.expand_multinomial"]], "expand_power_base() (in module sympy.core.function)": [[61, "sympy.core.function.expand_power_base"]], "expand_power_exp() (in module sympy.core.function)": [[61, "sympy.core.function.expand_power_exp"]], "expand_trig() (in module sympy.core.function)": [[61, "sympy.core.function.expand_trig"]], "expr (sympy.core.function.lambda property)": [[61, "sympy.core.function.Lambda.expr"]], "expr (sympy.core.function.subs property)": [[61, "sympy.core.function.Subs.expr"]], "expr_free_symbols (sympy.core.expr.expr property)": [[61, "sympy.core.expr.Expr.expr_free_symbols"]], "extended_negative": [[61, "term-extended_negative"]], "extended_nonnegative": [[61, "term-extended_nonnegative"]], "extended_nonpositive": [[61, "term-extended_nonpositive"]], "extended_nonzero": [[61, "term-extended_nonzero"]], "extended_positive": [[61, "term-extended_positive"]], "extended_real": [[61, "term-extended_real"]], "extract_additively() (sympy.core.expr.expr method)": [[61, "sympy.core.expr.Expr.extract_additively"]], "extract_branch_factor() (sympy.core.expr.expr method)": [[61, "sympy.core.expr.Expr.extract_branch_factor"]], "extract_leading_order() (sympy.core.add.add method)": [[61, "sympy.core.add.Add.extract_leading_order"]], "extract_multiplicatively() (sympy.core.expr.expr method)": [[61, "sympy.core.expr.Expr.extract_multiplicatively"]], "factor() (sympy.core.expr.expr method)": [[61, "sympy.core.expr.Expr.factor"]], "factor_terms() (in module sympy.core.exprtools)": [[61, "sympy.core.exprtools.factor_terms"]], "factors() (sympy.core.numbers.rational method)": [[61, "sympy.core.numbers.Rational.factors"]], "fdiff() (sympy.core.function.function method)": [[61, "sympy.core.function.Function.fdiff"]], "field_element() (sympy.core.numbers.algebraicnumber method)": [[61, "sympy.core.numbers.AlgebraicNumber.field_element"]], "find() (sympy.core.basic.basic method)": [[61, "sympy.core.basic.Basic.find"]], "finite": [[61, "term-finite"]], "flatten() (sympy.core.add.add class method)": [[61, "sympy.core.add.Add.flatten"]], "flatten() (sympy.core.mul.mul class method)": [[61, "sympy.core.mul.Mul.flatten"]], "fourier_series() (sympy.core.expr.expr method)": [[61, "sympy.core.expr.Expr.fourier_series"]], "fps() (sympy.core.expr.expr method)": [[61, "sympy.core.expr.Expr.fps"]], "free_symbols (sympy.core.basic.basic property)": [[61, "sympy.core.basic.Basic.free_symbols"]], "fromiter() (sympy.core.basic.basic class method)": [[61, "sympy.core.basic.Basic.fromiter"]], "func (sympy.core.basic.basic property)": [[61, "sympy.core.basic.Basic.func"]], "gammasimp() (sympy.core.expr.expr method)": [[61, "sympy.core.expr.Expr.gammasimp"]], "gcd() (sympy.core.numbers.number method)": [[61, "sympy.core.numbers.Number.gcd"]], "gcd_terms() (in module sympy.core.exprtools)": [[61, "sympy.core.exprtools.gcd_terms"]], "get() (sympy.core.containers.dict method)": [[61, "sympy.core.containers.Dict.get"]], "geto() (sympy.core.expr.expr method)": [[61, "sympy.core.expr.Expr.getO"]], "getn() (sympy.core.expr.expr method)": [[61, "sympy.core.expr.Expr.getn"]], "has() (sympy.core.basic.basic method)": [[61, "sympy.core.basic.Basic.has"]], "has_free() (sympy.core.basic.basic method)": [[61, "sympy.core.basic.Basic.has_free"]], "has_xfree() (sympy.core.basic.basic method)": [[61, "sympy.core.basic.Basic.has_xfree"]], "hermitian": [[61, "term-hermitian"]], "igcd() (in module sympy.core.numbers)": [[61, "sympy.core.numbers.igcd"]], "ilcm() (in module sympy.core.numbers)": [[61, "sympy.core.numbers.ilcm"]], "imaginary": [[61, "term-imaginary"]], "index() (sympy.core.containers.tuple method)": [[61, "sympy.core.containers.Tuple.index"]], "infinite": [[61, "term-infinite"]], "integer": [[61, "term-integer"]], "integer_log() (in module sympy.core.power)": [[61, "sympy.core.power.integer_log"]], "integer_nthroot() (in module sympy.core.power)": [[61, "sympy.core.power.integer_nthroot"]], "integrate() (sympy.core.expr.expr method)": [[61, "sympy.core.expr.Expr.integrate"]], "integrate() (sympy.core.relational.equality method)": [[61, "sympy.core.relational.Equality.integrate"]], "invert() (sympy.core.expr.expr method)": [[61, "sympy.core.expr.Expr.invert"]], "irrational": [[61, "term-irrational"]], "is_algebraic_expr() (sympy.core.expr.expr method)": [[61, "sympy.core.expr.Expr.is_algebraic_expr"]], "is_aliased (sympy.core.numbers.algebraicnumber property)": [[61, "sympy.core.numbers.AlgebraicNumber.is_aliased"]], "is_comparable (sympy.core.basic.basic property)": [[61, "sympy.core.basic.Basic.is_comparable"]], "is_constant() (sympy.core.expr.expr method)": [[61, "sympy.core.expr.Expr.is_constant"]], "is_identity (sympy.core.function.lambda property)": [[61, "sympy.core.function.Lambda.is_identity"]], "is_meromorphic() (sympy.core.expr.expr method)": [[61, "sympy.core.expr.Expr.is_meromorphic"]], "is_number (sympy.core.expr.expr property)": [[61, "sympy.core.expr.Expr.is_number"]], "is_polynomial() (sympy.core.expr.expr method)": [[61, "sympy.core.expr.Expr.is_polynomial"]], "is_primitive_element (sympy.core.numbers.algebraicnumber property)": [[61, "sympy.core.numbers.AlgebraicNumber.is_primitive_element"]], "is_rational_function() (sympy.core.expr.expr method)": [[61, "sympy.core.expr.Expr.is_rational_function"]], "is_singular() (sympy.core.function.function class method)": [[61, "sympy.core.function.Function.is_singular"]], "items() (sympy.core.containers.dict method)": [[61, "sympy.core.containers.Dict.items"]], "keys() (sympy.core.containers.dict method)": [[61, "sympy.core.containers.Dict.keys"]], "kind (sympy.core.containers.tuple property)": [[61, "sympy.core.containers.Tuple.kind"]], "lcm() (sympy.core.numbers.number method)": [[61, "sympy.core.numbers.Number.lcm"]], "leadterm() (sympy.core.expr.expr method)": [[61, "sympy.core.expr.Expr.leadterm"]], "lhs (sympy.core.relational.relational property)": [[61, "sympy.core.relational.Relational.lhs"]], "limit() (sympy.core.expr.expr method)": [[61, "sympy.core.expr.Expr.limit"]], "limit_denominator() (sympy.core.numbers.rational method)": [[61, "sympy.core.numbers.Rational.limit_denominator"]], "lseries() (sympy.core.expr.expr method)": [[61, "sympy.core.expr.Expr.lseries"]], "match() (sympy.core.basic.basic method)": [[61, "sympy.core.basic.Basic.match"]], "matches() (sympy.core.basic.basic method)": [[61, "sympy.core.basic.Basic.matches"]], "minpoly_of_element() (sympy.core.numbers.algebraicnumber method)": [[61, "sympy.core.numbers.AlgebraicNumber.minpoly_of_element"]], "mod_inverse() (in module sympy.core.numbers)": [[61, "sympy.core.numbers.mod_inverse"]], "n() (sympy.core.evalf.evalfmixin method)": [[61, "sympy.core.evalf.EvalfMixin.n"]], "nargs (sympy.core.function.functionclass property)": [[61, "sympy.core.function.FunctionClass.nargs"]], "native_coeffs() (sympy.core.numbers.algebraicnumber method)": [[61, "sympy.core.numbers.AlgebraicNumber.native_coeffs"]], "negated (sympy.core.relational.relational property)": [[61, "sympy.core.relational.Relational.negated"]], "negative": [[61, "term-negative"]], "nfloat() (in module sympy.core.function)": [[61, "sympy.core.function.nfloat"]], "nonnegative": [[61, "term-nonnegative"]], "nonpositive": [[61, "term-nonpositive"]], "nonzero": [[61, "term-nonzero"]], "normal() (sympy.core.expr.expr method)": [[61, "sympy.core.expr.Expr.normal"]], "nseries() (sympy.core.expr.expr method)": [[61, "sympy.core.expr.Expr.nseries"]], "nsimplify() (sympy.core.expr.expr method)": [[61, "sympy.core.expr.Expr.nsimplify"]], "odd": [[61, "term-odd"]], "ordered() (in module sympy.core.sorting)": [[61, "sympy.core.sorting.ordered"]], "point (sympy.core.function.subs property)": [[61, "sympy.core.function.Subs.point"]], "positive": [[61, "term-positive"]], "postorder_traversal() (in module sympy.core.traversal)": [[61, "sympy.core.traversal.postorder_traversal"]], "powsimp() (sympy.core.expr.expr method)": [[61, "sympy.core.expr.Expr.powsimp"]], "preorder_traversal() (in module sympy.core.traversal)": [[61, "sympy.core.traversal.preorder_traversal"]], "prime": [[61, "term-prime"]], "primitive() (sympy.core.add.add method)": [[61, "sympy.core.add.Add.primitive"]], "primitive() (sympy.core.expr.expr method)": [[61, "sympy.core.expr.Expr.primitive"]], "primitive_element() (sympy.core.numbers.algebraicnumber method)": [[61, "sympy.core.numbers.AlgebraicNumber.primitive_element"]], "prod() (in module sympy.core.mul)": [[61, "sympy.core.mul.prod"]], "radsimp() (sympy.core.expr.expr method)": [[61, "sympy.core.expr.Expr.radsimp"]], "random_complex_number() (in module sympy.core.random)": [[61, "sympy.core.random.random_complex_number"]], "rational": [[61, "term-rational"]], "ratsimp() (sympy.core.expr.expr method)": [[61, "sympy.core.expr.Expr.ratsimp"]], "rcall() (sympy.core.basic.basic method)": [[61, "sympy.core.basic.Basic.rcall"]], "real": [[61, "term-real"]], "refine() (sympy.core.basic.basic method)": [[61, "sympy.core.basic.Basic.refine"]], "removeo() (sympy.core.expr.expr method)": [[61, "sympy.core.expr.Expr.removeO"]], "replace() (sympy.core.basic.basic method)": [[61, "sympy.core.basic.Basic.replace"]], "reversed (sympy.core.relational.relational property)": [[61, "sympy.core.relational.Relational.reversed"]], "reversedsign (sympy.core.relational.relational property)": [[61, "sympy.core.relational.Relational.reversedsign"]], "rewrite() (sympy.core.basic.basic method)": [[61, "sympy.core.basic.Basic.rewrite"]], "rhs (sympy.core.relational.relational property)": [[61, "sympy.core.relational.Relational.rhs"]], "round() (sympy.core.expr.expr method)": [[61, "sympy.core.expr.Expr.round"]], "separate() (sympy.core.expr.expr method)": [[61, "sympy.core.expr.Expr.separate"]], "series() (sympy.core.expr.expr method)": [[61, "sympy.core.expr.Expr.series"]], "seterr() (in module sympy.core.numbers)": [[61, "sympy.core.numbers.seterr"]], "signature (sympy.core.function.lambda property)": [[61, "sympy.core.function.Lambda.signature"]], "simplify() (sympy.core.basic.basic method)": [[61, "sympy.core.basic.Basic.simplify"]], "sort_key() (sympy.core.basic.basic method)": [[61, "sympy.core.basic.Basic.sort_key"]], "strict (sympy.core.relational.relational property)": [[61, "sympy.core.relational.Relational.strict"]], "subs() (sympy.core.basic.basic method)": [[61, "sympy.core.basic.Basic.subs"]], "symbols() (in module sympy.core.symbol)": [[61, "sympy.core.symbol.symbols"]], "sympify() (in module sympy.core.sympify)": [[61, "sympy.core.sympify.sympify"]], "sympy.core.add": [[61, "module-sympy.core.add"]], "sympy.core.assumptions": [[61, "module-sympy.core.assumptions"]], "sympy.core.basic": [[61, "module-sympy.core.basic"]], "sympy.core.cache": [[61, "module-sympy.core.cache"]], "sympy.core.containers": [[61, "module-sympy.core.containers"]], "sympy.core.evalf": [[61, "module-sympy.core.evalf"]], "sympy.core.expr": [[61, "module-sympy.core.expr"]], "sympy.core.exprtools": [[61, "module-sympy.core.exprtools"]], "sympy.core.function": [[61, "module-sympy.core.function"]], "sympy.core.kind": [[61, "module-sympy.core.kind"]], "sympy.core.mod": [[61, "module-sympy.core.mod"]], "sympy.core.mul": [[61, "module-sympy.core.mul"]], "sympy.core.multidimensional": [[61, "module-sympy.core.multidimensional"]], "sympy.core.numbers": [[61, "module-sympy.core.numbers"]], "sympy.core.power": [[61, "module-sympy.core.power"]], "sympy.core.random": [[61, "module-sympy.core.random"]], "sympy.core.relational": [[61, "module-sympy.core.relational"]], "sympy.core.singleton": [[61, "module-sympy.core.singleton"]], "sympy.core.symbol": [[61, "module-sympy.core.symbol"]], "sympy.core.sympify": [[61, "module-sympy.core.sympify"]], "sympy.core.traversal": [[61, "module-sympy.core.traversal"]], "taylor_term() (sympy.core.expr.expr method)": [[61, "sympy.core.expr.Expr.taylor_term"]], "test_derivative_numerically() (in module sympy.core.random)": [[61, "sympy.core.random.test_derivative_numerically"]], "to_algebraic_integer() (sympy.core.numbers.algebraicnumber method)": [[61, "sympy.core.numbers.AlgebraicNumber.to_algebraic_integer"]], "to_primitive_element() (sympy.core.numbers.algebraicnumber method)": [[61, "sympy.core.numbers.AlgebraicNumber.to_primitive_element"]], "to_root() (sympy.core.numbers.algebraicnumber method)": [[61, "sympy.core.numbers.AlgebraicNumber.to_root"]], "together() (sympy.core.expr.expr method)": [[61, "sympy.core.expr.Expr.together"]], "transcendental": [[61, "term-transcendental"]], "trigsimp() (sympy.core.expr.expr method)": [[61, "sympy.core.expr.Expr.trigsimp"]], "tuple_count() (sympy.core.containers.tuple method)": [[61, "sympy.core.containers.Tuple.tuple_count"]], "use() (in module sympy.core.traversal)": [[61, "sympy.core.traversal.use"]], "values() (sympy.core.containers.dict method)": [[61, "sympy.core.containers.Dict.values"]], "var() (in module sympy.core.symbol)": [[61, "sympy.core.symbol.var"]], "variables (sympy.core.function.lambda property)": [[61, "sympy.core.function.Lambda.variables"]], "variables (sympy.core.function.subs property)": [[61, "sympy.core.function.Subs.variables"]], "vectorize (class in sympy.core.multidimensional)": [[61, "sympy.core.multidimensional.vectorize"]], "verify_numerically() (in module sympy.core.random)": [[61, "sympy.core.random.verify_numerically"]], "walk() (in module sympy.core.traversal)": [[61, "sympy.core.traversal.walk"]], "weak (sympy.core.relational.relational property)": [[61, "sympy.core.relational.Relational.weak"]], "xreplace() (sympy.core.basic.basic method)": [[61, "sympy.core.basic.Basic.xreplace"]], "zero": [[61, "term-zero"]], "az() (in module sympy.crypto.crypto)": [[62, "sympy.crypto.crypto.AZ"]], "bifid5_square() (in module sympy.crypto.crypto)": [[62, "sympy.crypto.crypto.bifid5_square"]], "bifid6_square() (in module sympy.crypto.crypto)": [[62, "sympy.crypto.crypto.bifid6_square"]], "check_and_join() (in module sympy.crypto.crypto)": [[62, "sympy.crypto.crypto.check_and_join"]], "cycle_list() (in module sympy.crypto.crypto)": [[62, "sympy.crypto.crypto.cycle_list"]], "decipher_affine() (in module sympy.crypto.crypto)": [[62, "sympy.crypto.crypto.decipher_affine"]], "decipher_atbash() (in module sympy.crypto.crypto)": [[62, "sympy.crypto.crypto.decipher_atbash"]], "decipher_bifid() (in module sympy.crypto.crypto)": [[62, "sympy.crypto.crypto.decipher_bifid"]], "decipher_bifid5() (in module sympy.crypto.crypto)": [[62, "sympy.crypto.crypto.decipher_bifid5"]], "decipher_bifid6() (in module sympy.crypto.crypto)": [[62, "sympy.crypto.crypto.decipher_bifid6"]], "decipher_elgamal() (in module sympy.crypto.crypto)": [[62, "sympy.crypto.crypto.decipher_elgamal"]], "decipher_gm() (in module sympy.crypto.crypto)": [[62, "sympy.crypto.crypto.decipher_gm"]], "decipher_hill() (in module sympy.crypto.crypto)": [[62, "sympy.crypto.crypto.decipher_hill"]], "decipher_kid_rsa() (in module sympy.crypto.crypto)": [[62, "sympy.crypto.crypto.decipher_kid_rsa"]], "decipher_railfence() (in module sympy.crypto.crypto)": [[62, "sympy.crypto.crypto.decipher_railfence"]], "decipher_rot13() (in module sympy.crypto.crypto)": [[62, "sympy.crypto.crypto.decipher_rot13"]], "decipher_rsa() (in module sympy.crypto.crypto)": [[62, "sympy.crypto.crypto.decipher_rsa"]], "decipher_shift() (in module sympy.crypto.crypto)": [[62, "sympy.crypto.crypto.decipher_shift"]], "decipher_vigenere() (in module sympy.crypto.crypto)": [[62, "sympy.crypto.crypto.decipher_vigenere"]], "decode_morse() (in module sympy.crypto.crypto)": [[62, "sympy.crypto.crypto.decode_morse"]], "dh_private_key() (in module sympy.crypto.crypto)": [[62, "sympy.crypto.crypto.dh_private_key"]], "dh_public_key() (in module sympy.crypto.crypto)": [[62, "sympy.crypto.crypto.dh_public_key"]], "dh_shared_key() (in module sympy.crypto.crypto)": [[62, "sympy.crypto.crypto.dh_shared_key"]], "elgamal_private_key() (in module sympy.crypto.crypto)": [[62, "sympy.crypto.crypto.elgamal_private_key"]], "elgamal_public_key() (in module sympy.crypto.crypto)": [[62, "sympy.crypto.crypto.elgamal_public_key"]], "encipher_affine() (in module sympy.crypto.crypto)": [[62, "sympy.crypto.crypto.encipher_affine"]], "encipher_atbash() (in module sympy.crypto.crypto)": [[62, "sympy.crypto.crypto.encipher_atbash"]], "encipher_bifid() (in module sympy.crypto.crypto)": [[62, "sympy.crypto.crypto.encipher_bifid"]], "encipher_bifid5() (in module sympy.crypto.crypto)": [[62, "sympy.crypto.crypto.encipher_bifid5"]], "encipher_bifid6() (in module sympy.crypto.crypto)": [[62, "sympy.crypto.crypto.encipher_bifid6"]], "encipher_elgamal() (in module sympy.crypto.crypto)": [[62, "sympy.crypto.crypto.encipher_elgamal"]], "encipher_gm() (in module sympy.crypto.crypto)": [[62, "sympy.crypto.crypto.encipher_gm"]], "encipher_hill() (in module sympy.crypto.crypto)": [[62, "sympy.crypto.crypto.encipher_hill"]], "encipher_kid_rsa() (in module sympy.crypto.crypto)": [[62, "sympy.crypto.crypto.encipher_kid_rsa"]], "encipher_railfence() (in module sympy.crypto.crypto)": [[62, "sympy.crypto.crypto.encipher_railfence"]], "encipher_rot13() (in module sympy.crypto.crypto)": [[62, "sympy.crypto.crypto.encipher_rot13"]], "encipher_rsa() (in module sympy.crypto.crypto)": [[62, "sympy.crypto.crypto.encipher_rsa"]], "encipher_shift() (in module sympy.crypto.crypto)": [[62, "sympy.crypto.crypto.encipher_shift"]], "encipher_substitution() (in module sympy.crypto.crypto)": [[62, "sympy.crypto.crypto.encipher_substitution"]], "encipher_vigenere() (in module sympy.crypto.crypto)": [[62, "sympy.crypto.crypto.encipher_vigenere"]], "encode_morse() (in module sympy.crypto.crypto)": [[62, "sympy.crypto.crypto.encode_morse"]], "gm_private_key() (in module sympy.crypto.crypto)": [[62, "sympy.crypto.crypto.gm_private_key"]], "gm_public_key() (in module sympy.crypto.crypto)": [[62, "sympy.crypto.crypto.gm_public_key"]], "kid_rsa_private_key() (in module sympy.crypto.crypto)": [[62, "sympy.crypto.crypto.kid_rsa_private_key"]], "kid_rsa_public_key() (in module sympy.crypto.crypto)": [[62, "sympy.crypto.crypto.kid_rsa_public_key"]], "lfsr_autocorrelation() (in module sympy.crypto.crypto)": [[62, "sympy.crypto.crypto.lfsr_autocorrelation"]], "lfsr_connection_polynomial() (in module sympy.crypto.crypto)": [[62, "sympy.crypto.crypto.lfsr_connection_polynomial"]], "lfsr_sequence() (in module sympy.crypto.crypto)": [[62, "sympy.crypto.crypto.lfsr_sequence"]], "padded_key() (in module sympy.crypto.crypto)": [[62, "sympy.crypto.crypto.padded_key"]], "rsa_private_key() (in module sympy.crypto.crypto)": [[62, "sympy.crypto.crypto.rsa_private_key"]], "rsa_public_key() (in module sympy.crypto.crypto)": [[62, "sympy.crypto.crypto.rsa_public_key"]], "sympy.crypto.crypto": [[62, "module-sympy.crypto.crypto"]], "basecovarderivativeop (class in sympy.diffgeom)": [[63, "sympy.diffgeom.BaseCovarDerivativeOp"]], "basescalarfield (class in sympy.diffgeom)": [[63, "sympy.diffgeom.BaseScalarField"]], "basevectorfield (class in sympy.diffgeom)": [[63, "sympy.diffgeom.BaseVectorField"]], "commutator (class in sympy.diffgeom)": [[63, "sympy.diffgeom.Commutator"]], "coordsystem (class in sympy.diffgeom)": [[63, "sympy.diffgeom.CoordSystem"]], "coordinatesymbol (class in sympy.diffgeom)": [[63, "sympy.diffgeom.CoordinateSymbol"]], "covarderivativeop (class in sympy.diffgeom)": [[63, "sympy.diffgeom.CovarDerivativeOp"]], "differential (class in sympy.diffgeom)": [[63, "sympy.diffgeom.Differential"]], "liederivative (class in sympy.diffgeom)": [[63, "sympy.diffgeom.LieDerivative"]], "manifold (class in sympy.diffgeom)": [[63, "sympy.diffgeom.Manifold"]], "patch (class in sympy.diffgeom)": [[63, "sympy.diffgeom.Patch"]], "point (class in sympy.diffgeom)": [[63, "sympy.diffgeom.Point"]], "tensorproduct (class in sympy.diffgeom)": [[63, "sympy.diffgeom.TensorProduct"]], "wedgeproduct (class in sympy.diffgeom)": [[63, "sympy.diffgeom.WedgeProduct"]], "base_oneform() (sympy.diffgeom.coordsystem method)": [[63, "sympy.diffgeom.CoordSystem.base_oneform"]], "base_oneforms() (sympy.diffgeom.coordsystem method)": [[63, "sympy.diffgeom.CoordSystem.base_oneforms"]], "base_scalar() (sympy.diffgeom.coordsystem method)": [[63, "sympy.diffgeom.CoordSystem.base_scalar"]], "base_scalars() (sympy.diffgeom.coordsystem method)": [[63, "sympy.diffgeom.CoordSystem.base_scalars"]], "base_vector() (sympy.diffgeom.coordsystem method)": [[63, "sympy.diffgeom.CoordSystem.base_vector"]], "base_vectors() (sympy.diffgeom.coordsystem method)": [[63, "sympy.diffgeom.CoordSystem.base_vectors"]], "coord_function() (sympy.diffgeom.coordsystem method)": [[63, "sympy.diffgeom.CoordSystem.coord_function"]], "coord_functions() (sympy.diffgeom.coordsystem method)": [[63, "sympy.diffgeom.CoordSystem.coord_functions"]], "coord_tuple_transform_to() (sympy.diffgeom.coordsystem method)": [[63, "sympy.diffgeom.CoordSystem.coord_tuple_transform_to"]], "coords() (sympy.diffgeom.point method)": [[63, "sympy.diffgeom.Point.coords"]], "intcurve_diffequ() (in module sympy.diffgeom)": [[63, "sympy.diffgeom.intcurve_diffequ"]], "intcurve_series() (in module sympy.diffgeom)": [[63, "sympy.diffgeom.intcurve_series"]], "jacobian() (sympy.diffgeom.coordsystem method)": [[63, "sympy.diffgeom.CoordSystem.jacobian"]], "jacobian_determinant() (sympy.diffgeom.coordsystem method)": [[63, "sympy.diffgeom.CoordSystem.jacobian_determinant"]], "jacobian_matrix() (sympy.diffgeom.coordsystem method)": [[63, "sympy.diffgeom.CoordSystem.jacobian_matrix"]], "metric_to_christoffel_1st() (in module sympy.diffgeom)": [[63, "sympy.diffgeom.metric_to_Christoffel_1st"]], "metric_to_christoffel_2nd() (in module sympy.diffgeom)": [[63, "sympy.diffgeom.metric_to_Christoffel_2nd"]], "metric_to_ricci_components() (in module sympy.diffgeom)": [[63, "sympy.diffgeom.metric_to_Ricci_components"]], "metric_to_riemann_components() (in module sympy.diffgeom)": [[63, "sympy.diffgeom.metric_to_Riemann_components"]], "point() (sympy.diffgeom.coordsystem method)": [[63, "sympy.diffgeom.CoordSystem.point"]], "point_to_coords() (sympy.diffgeom.coordsystem method)": [[63, "sympy.diffgeom.CoordSystem.point_to_coords"]], "sympy.diffgeom": [[63, "module-sympy.diffgeom"]], "transform() (sympy.diffgeom.coordsystem method)": [[63, "sympy.diffgeom.CoordSystem.transform"]], "transformation() (sympy.diffgeom.coordsystem method)": [[63, "sympy.diffgeom.CoordSystem.transformation"]], "twoform_to_matrix() (in module sympy.diffgeom)": [[63, "sympy.diffgeom.twoform_to_matrix"]], "vectors_in_basis() (in module sympy.diffgeom)": [[63, "sympy.diffgeom.vectors_in_basis"]], "convolution() (in module sympy.discrete.convolutions)": [[64, "sympy.discrete.convolutions.convolution"]], "convolution_fft() (in module sympy.discrete.convolutions)": [[64, "sympy.discrete.convolutions.convolution_fft"]], "convolution_fwht() (in module sympy.discrete.convolutions)": [[64, "sympy.discrete.convolutions.convolution_fwht"]], "convolution_ntt() (in module sympy.discrete.convolutions)": [[64, "sympy.discrete.convolutions.convolution_ntt"]], "convolution_subset() (in module sympy.discrete.convolutions)": [[64, "sympy.discrete.convolutions.convolution_subset"]], "covering_product() (in module sympy.discrete.convolutions)": [[64, "sympy.discrete.convolutions.covering_product"]], "fft() (in module sympy.discrete.transforms)": [[64, "sympy.discrete.transforms.fft"]], "fwht() (in module sympy.discrete.transforms)": [[64, "sympy.discrete.transforms.fwht"]], "ifft() (in module sympy.discrete.transforms)": [[64, "sympy.discrete.transforms.ifft"]], "ifwht() (in module sympy.discrete.transforms)": [[64, "sympy.discrete.transforms.ifwht"]], "intersecting_product() (in module sympy.discrete.convolutions)": [[64, "sympy.discrete.convolutions.intersecting_product"]], "intt() (in module sympy.discrete.transforms)": [[64, "sympy.discrete.transforms.intt"]], "inverse_mobius_transform() (in module sympy.discrete.transforms)": [[64, "sympy.discrete.transforms.inverse_mobius_transform"]], "mobius_transform() (in module sympy.discrete.transforms)": [[64, "sympy.discrete.transforms.mobius_transform"]], "ntt() (in module sympy.discrete.transforms)": [[64, "sympy.discrete.transforms.ntt"]], "sympy.discrete": [[64, "module-sympy.discrete"]], "sympy.discrete.convolutions": [[64, "module-sympy.discrete.convolutions"]], "sympy.discrete.transforms": [[64, "module-sympy.discrete.transforms"]], "fallingfactorial (class in sympy.functions.combinatorial.factorials)": [[66, "sympy.functions.combinatorial.factorials.FallingFactorial"]], "multifactorial (class in sympy.functions.combinatorial.factorials)": [[66, "sympy.functions.combinatorial.factorials.MultiFactorial"]], "risingfactorial (class in sympy.functions.combinatorial.factorials)": [[66, "sympy.functions.combinatorial.factorials.RisingFactorial"]], "andre (class in sympy.functions.combinatorial.numbers)": [[66, "sympy.functions.combinatorial.numbers.andre"]], "bell (class in sympy.functions.combinatorial.numbers)": [[66, "sympy.functions.combinatorial.numbers.bell"]], "bernoulli (class in sympy.functions.combinatorial.numbers)": [[66, "sympy.functions.combinatorial.numbers.bernoulli"]], "binomial (class in sympy.functions.combinatorial.factorials)": [[66, "sympy.functions.combinatorial.factorials.binomial"]], "catalan (class in sympy.functions.combinatorial.numbers)": [[66, "sympy.functions.combinatorial.numbers.catalan"]], "euler (class in sympy.functions.combinatorial.numbers)": [[66, "sympy.functions.combinatorial.numbers.euler"]], "factorial (class in sympy.functions.combinatorial.factorials)": [[66, "sympy.functions.combinatorial.factorials.factorial"]], "factorial2 (class in sympy.functions.combinatorial.factorials)": [[66, "sympy.functions.combinatorial.factorials.factorial2"]], "fibonacci (class in sympy.functions.combinatorial.numbers)": [[66, "sympy.functions.combinatorial.numbers.fibonacci"]], "genocchi (class in sympy.functions.combinatorial.numbers)": [[66, "sympy.functions.combinatorial.numbers.genocchi"]], "harmonic (class in sympy.functions.combinatorial.numbers)": [[66, "sympy.functions.combinatorial.numbers.harmonic"]], "lucas (class in sympy.functions.combinatorial.numbers)": [[66, "sympy.functions.combinatorial.numbers.lucas"]], "nc() (in module sympy.functions.combinatorial.numbers)": [[66, "sympy.functions.combinatorial.numbers.nC"]], "np() (in module sympy.functions.combinatorial.numbers)": [[66, "sympy.functions.combinatorial.numbers.nP"]], "nt() (in module sympy.functions.combinatorial.numbers)": [[66, "sympy.functions.combinatorial.numbers.nT"]], "partition (class in sympy.functions.combinatorial.numbers)": [[66, "sympy.functions.combinatorial.numbers.partition"]], "stirling() (in module sympy.functions.combinatorial.numbers)": [[66, "sympy.functions.combinatorial.numbers.stirling"]], "subfactorial (class in sympy.functions.combinatorial.factorials)": [[66, "sympy.functions.combinatorial.factorials.subfactorial"]], "tribonacci (class in sympy.functions.combinatorial.numbers)": [[66, "sympy.functions.combinatorial.numbers.tribonacci"]], "abs (class in sympy.functions.elementary.complexes)": [[67, "sympy.functions.elementary.complexes.Abs"]], "exprcondpair (class in sympy.functions.elementary.piecewise)": [[67, "sympy.functions.elementary.piecewise.ExprCondPair"]], "hyperbolicfunction (class in sympy.functions.elementary.hyperbolic)": [[67, "sympy.functions.elementary.hyperbolic.HyperbolicFunction"]], "identityfunction (class in sympy.functions.elementary.miscellaneous)": [[67, "sympy.functions.elementary.miscellaneous.IdentityFunction"]], "lambertw (class in sympy.functions.elementary.exponential)": [[67, "sympy.functions.elementary.exponential.LambertW"]], "max (class in sympy.functions.elementary.miscellaneous)": [[67, "sympy.functions.elementary.miscellaneous.Max"]], "min (class in sympy.functions.elementary.miscellaneous)": [[67, "sympy.functions.elementary.miscellaneous.Min"]], "piecewise (class in sympy.functions.elementary.piecewise)": [[67, "sympy.functions.elementary.piecewise.Piecewise"]], "roundfunction (class in sympy.functions.elementary.integers)": [[67, "sympy.functions.elementary.integers.RoundFunction"]], "_eval_integral() (sympy.functions.elementary.piecewise.piecewise method)": [[67, "sympy.functions.elementary.piecewise.Piecewise._eval_integral"]], "acos (class in sympy.functions.elementary.trigonometric)": [[67, "sympy.functions.elementary.trigonometric.acos"]], "acosh (class in sympy.functions.elementary.hyperbolic)": [[67, "sympy.functions.elementary.hyperbolic.acosh"]], "acot (class in sympy.functions.elementary.trigonometric)": [[67, "sympy.functions.elementary.trigonometric.acot"]], "acoth (class in sympy.functions.elementary.hyperbolic)": [[67, "sympy.functions.elementary.hyperbolic.acoth"]], "acsc (class in sympy.functions.elementary.trigonometric)": [[67, "sympy.functions.elementary.trigonometric.acsc"]], "acsch (class in sympy.functions.elementary.hyperbolic)": [[67, "sympy.functions.elementary.hyperbolic.acsch"]], "arg (class in sympy.functions.elementary.complexes)": [[67, "sympy.functions.elementary.complexes.arg"]], "as_base_exp() (sympy.functions.elementary.exponential.log method)": [[67, "sympy.functions.elementary.exponential.log.as_base_exp"]], "as_expr_set_pairs() (sympy.functions.elementary.piecewise.piecewise method)": [[67, "sympy.functions.elementary.piecewise.Piecewise.as_expr_set_pairs"]], "as_real_imag() (sympy.functions.elementary.complexes.im method)": [[67, "sympy.functions.elementary.complexes.im.as_real_imag"]], "as_real_imag() (sympy.functions.elementary.complexes.re method)": [[67, "sympy.functions.elementary.complexes.re.as_real_imag"]], "as_real_imag() (sympy.functions.elementary.exponential.exp method)": [[67, "sympy.functions.elementary.exponential.exp.as_real_imag"]], "as_real_imag() (sympy.functions.elementary.exponential.log method)": [[67, "sympy.functions.elementary.exponential.log.as_real_imag"]], "as_real_imag() (sympy.functions.elementary.hyperbolic.sinh method)": [[67, "sympy.functions.elementary.hyperbolic.sinh.as_real_imag"]], "asec (class in sympy.functions.elementary.trigonometric)": [[67, "sympy.functions.elementary.trigonometric.asec"]], "asech (class in sympy.functions.elementary.hyperbolic)": [[67, "sympy.functions.elementary.hyperbolic.asech"]], "asin (class in sympy.functions.elementary.trigonometric)": [[67, "sympy.functions.elementary.trigonometric.asin"]], "asinh (class in sympy.functions.elementary.hyperbolic)": [[67, "sympy.functions.elementary.hyperbolic.asinh"]], "atan (class in sympy.functions.elementary.trigonometric)": [[67, "sympy.functions.elementary.trigonometric.atan"]], "atan2 (class in sympy.functions.elementary.trigonometric)": [[67, "sympy.functions.elementary.trigonometric.atan2"]], "atanh (class in sympy.functions.elementary.hyperbolic)": [[67, "sympy.functions.elementary.hyperbolic.atanh"]], "base (sympy.functions.elementary.exponential.exp property)": [[67, "sympy.functions.elementary.exponential.exp.base"]], "cbrt() (in module sympy.functions.elementary.miscellaneous)": [[67, "sympy.functions.elementary.miscellaneous.cbrt"]], "ceiling (class in sympy.functions.elementary.integers)": [[67, "sympy.functions.elementary.integers.ceiling"]], "cond (sympy.functions.elementary.piecewise.exprcondpair property)": [[67, "sympy.functions.elementary.piecewise.ExprCondPair.cond"]], "conjugate (class in sympy.functions.elementary.complexes)": [[67, "sympy.functions.elementary.complexes.conjugate"]], "cos (class in sympy.functions.elementary.trigonometric)": [[67, "sympy.functions.elementary.trigonometric.cos"]], "cosh (class in sympy.functions.elementary.hyperbolic)": [[67, "sympy.functions.elementary.hyperbolic.cosh"]], "cot (class in sympy.functions.elementary.trigonometric)": [[67, "sympy.functions.elementary.trigonometric.cot"]], "coth (class in sympy.functions.elementary.hyperbolic)": [[67, "sympy.functions.elementary.hyperbolic.coth"]], "csc (class in sympy.functions.elementary.trigonometric)": [[67, "sympy.functions.elementary.trigonometric.csc"]], "csch (class in sympy.functions.elementary.hyperbolic)": [[67, "sympy.functions.elementary.hyperbolic.csch"]], "doit() (sympy.functions.elementary.piecewise.piecewise method)": [[67, "sympy.functions.elementary.piecewise.Piecewise.doit"]], "eval() (sympy.functions.elementary.piecewise.piecewise class method)": [[67, "sympy.functions.elementary.piecewise.Piecewise.eval"]], "exp (class in sympy.functions.elementary.exponential)": [[67, "sympy.functions.elementary.exponential.exp"]], "exp_polar (class in sympy.functions.elementary.exponential)": [[67, "sympy.functions.elementary.exponential.exp_polar"]], "expr (sympy.functions.elementary.piecewise.exprcondpair property)": [[67, "sympy.functions.elementary.piecewise.ExprCondPair.expr"]], "fdiff() (sympy.functions.elementary.complexes.abs method)": [[67, "sympy.functions.elementary.complexes.Abs.fdiff"]], "fdiff() (sympy.functions.elementary.exponential.lambertw method)": [[67, "sympy.functions.elementary.exponential.LambertW.fdiff"]], "fdiff() (sympy.functions.elementary.exponential.exp method)": [[67, "sympy.functions.elementary.exponential.exp.fdiff"]], "fdiff() (sympy.functions.elementary.exponential.log method)": [[67, "sympy.functions.elementary.exponential.log.fdiff"]], "fdiff() (sympy.functions.elementary.hyperbolic.csch method)": [[67, "sympy.functions.elementary.hyperbolic.csch.fdiff"]], "fdiff() (sympy.functions.elementary.hyperbolic.sinh method)": [[67, "sympy.functions.elementary.hyperbolic.sinh.fdiff"]], "floor (class in sympy.functions.elementary.integers)": [[67, "sympy.functions.elementary.integers.floor"]], "frac (class in sympy.functions.elementary.integers)": [[67, "sympy.functions.elementary.integers.frac"]], "im (class in sympy.functions.elementary.complexes)": [[67, "sympy.functions.elementary.complexes.im"]], "inverse() (sympy.functions.elementary.exponential.log method)": [[67, "sympy.functions.elementary.exponential.log.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.acosh method)": [[67, "sympy.functions.elementary.hyperbolic.acosh.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.acoth method)": [[67, "sympy.functions.elementary.hyperbolic.acoth.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.acsch method)": [[67, "sympy.functions.elementary.hyperbolic.acsch.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.asech method)": [[67, "sympy.functions.elementary.hyperbolic.asech.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.asinh method)": [[67, "sympy.functions.elementary.hyperbolic.asinh.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.atanh method)": [[67, "sympy.functions.elementary.hyperbolic.atanh.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.coth method)": [[67, "sympy.functions.elementary.hyperbolic.coth.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.sinh method)": [[67, "sympy.functions.elementary.hyperbolic.sinh.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.tanh method)": [[67, "sympy.functions.elementary.hyperbolic.tanh.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.acos method)": [[67, "sympy.functions.elementary.trigonometric.acos.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.acot method)": [[67, "sympy.functions.elementary.trigonometric.acot.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.acsc method)": [[67, "sympy.functions.elementary.trigonometric.acsc.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.asec method)": [[67, "sympy.functions.elementary.trigonometric.asec.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.asin method)": [[67, "sympy.functions.elementary.trigonometric.asin.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.atan method)": [[67, "sympy.functions.elementary.trigonometric.atan.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.cot method)": [[67, "sympy.functions.elementary.trigonometric.cot.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.tan method)": [[67, "sympy.functions.elementary.trigonometric.tan.inverse"]], "log (class in sympy.functions.elementary.exponential)": [[67, "sympy.functions.elementary.exponential.log"]], "periodic_argument (class in sympy.functions.elementary.complexes)": [[67, "sympy.functions.elementary.complexes.periodic_argument"]], "piecewise_exclusive() (in module sympy.functions.elementary.piecewise)": [[67, "sympy.functions.elementary.piecewise.piecewise_exclusive"]], "piecewise_fold() (in module sympy.functions.elementary.piecewise)": [[67, "sympy.functions.elementary.piecewise.piecewise_fold"]], "piecewise_integrate() (sympy.functions.elementary.piecewise.piecewise method)": [[67, "sympy.functions.elementary.piecewise.Piecewise.piecewise_integrate"]], "polar_lift (class in sympy.functions.elementary.complexes)": [[67, "sympy.functions.elementary.complexes.polar_lift"]], "principal_branch (class in sympy.functions.elementary.complexes)": [[67, "sympy.functions.elementary.complexes.principal_branch"]], "re (class in sympy.functions.elementary.complexes)": [[67, "sympy.functions.elementary.complexes.re"]], "real_root() (in module sympy.functions.elementary.miscellaneous)": [[67, "sympy.functions.elementary.miscellaneous.real_root"]], "root() (in module sympy.functions.elementary.miscellaneous)": [[67, "sympy.functions.elementary.miscellaneous.root"]], "sec (class in sympy.functions.elementary.trigonometric)": [[67, "sympy.functions.elementary.trigonometric.sec"]], "sech (class in sympy.functions.elementary.hyperbolic)": [[67, "sympy.functions.elementary.hyperbolic.sech"]], "sign (class in sympy.functions.elementary.complexes)": [[67, "sympy.functions.elementary.complexes.sign"]], "sin (class in sympy.functions.elementary.trigonometric)": [[67, "sympy.functions.elementary.trigonometric.sin"]], "sinc (class in sympy.functions.elementary.trigonometric)": [[67, "sympy.functions.elementary.trigonometric.sinc"]], "sinh (class in sympy.functions.elementary.hyperbolic)": [[67, "sympy.functions.elementary.hyperbolic.sinh"]], "sqrt() (in module sympy.functions.elementary.miscellaneous)": [[67, "sympy.functions.elementary.miscellaneous.sqrt"]], "tan (class in sympy.functions.elementary.trigonometric)": [[67, "sympy.functions.elementary.trigonometric.tan"]], "tanh (class in sympy.functions.elementary.hyperbolic)": [[67, "sympy.functions.elementary.hyperbolic.tanh"]], "taylor_term() (sympy.functions.elementary.exponential.exp static method)": [[67, "sympy.functions.elementary.exponential.exp.taylor_term"]], "taylor_term() (sympy.functions.elementary.exponential.log static method)": [[67, "sympy.functions.elementary.exponential.log.taylor_term"]], "taylor_term() (sympy.functions.elementary.hyperbolic.csch static method)": [[67, "sympy.functions.elementary.hyperbolic.csch.taylor_term"]], "taylor_term() (sympy.functions.elementary.hyperbolic.sinh static method)": [[67, "sympy.functions.elementary.hyperbolic.sinh.taylor_term"]], "sympy.functions": [[68, "module-sympy.functions"]], "airybase (class in sympy.functions.special.bessel)": [[69, "sympy.functions.special.bessel.AiryBase"]], "besselbase (class in sympy.functions.special.bessel)": [[69, "sympy.functions.special.bessel.BesselBase"]], "chi (class in sympy.functions.special.error_functions)": [[69, "sympy.functions.special.error_functions.Chi"]], "ci (class in sympy.functions.special.error_functions)": [[69, "sympy.functions.special.error_functions.Ci"]], "diracdelta (class in sympy.functions.special.delta_functions)": [[69, "sympy.functions.special.delta_functions.DiracDelta"]], "e1() (in module sympy.functions.special.error_functions)": [[69, "sympy.functions.special.error_functions.E1"]], "ei (class in sympy.functions.special.error_functions)": [[69, "sympy.functions.special.error_functions.Ei"]], "eijk() (in module sympy.functions.special.tensor_functions)": [[69, "sympy.functions.special.tensor_functions.Eijk"]], "fresnelintegral (class in sympy.functions.special.error_functions)": [[69, "sympy.functions.special.error_functions.FresnelIntegral"]], "heaviside (class in sympy.functions.special.delta_functions)": [[69, "sympy.functions.special.delta_functions.Heaviside"]], "kroneckerdelta (class in sympy.functions.special.tensor_functions)": [[69, "sympy.functions.special.tensor_functions.KroneckerDelta"]], "levicivita (class in sympy.functions.special.tensor_functions)": [[69, "sympy.functions.special.tensor_functions.LeviCivita"]], "li (class in sympy.functions.special.error_functions)": [[69, "sympy.functions.special.error_functions.Li"], [69, "sympy.functions.special.error_functions.li"]], "mathieubase (class in sympy.functions.special.mathieu_functions)": [[69, "sympy.functions.special.mathieu_functions.MathieuBase"]], "shi (class in sympy.functions.special.error_functions)": [[69, "sympy.functions.special.error_functions.Shi"]], "si (class in sympy.functions.special.error_functions)": [[69, "sympy.functions.special.error_functions.Si"]], "singularityfunction (class in sympy.functions.special.singularity_functions)": [[69, "sympy.functions.special.singularity_functions.SingularityFunction"]], "ynm (class in sympy.functions.special.spherical_harmonics)": [[69, "sympy.functions.special.spherical_harmonics.Ynm"]], "ynm_c() (in module sympy.functions.special.spherical_harmonics)": [[69, "sympy.functions.special.spherical_harmonics.Ynm_c"]], "znm (class in sympy.functions.special.spherical_harmonics)": [[69, "sympy.functions.special.spherical_harmonics.Znm"]], "airyai (class in sympy.functions.special.bessel)": [[69, "sympy.functions.special.bessel.airyai"]], "airyaiprime (class in sympy.functions.special.bessel)": [[69, "sympy.functions.special.bessel.airyaiprime"]], "airybi (class in sympy.functions.special.bessel)": [[69, "sympy.functions.special.bessel.airybi"]], "airybiprime (class in sympy.functions.special.bessel)": [[69, "sympy.functions.special.bessel.airybiprime"]], "an (sympy.functions.special.hyper.meijerg property)": [[69, "sympy.functions.special.hyper.meijerg.an"]], "aother (sympy.functions.special.hyper.meijerg property)": [[69, "sympy.functions.special.hyper.meijerg.aother"]], "ap (sympy.functions.special.hyper.hyper property)": [[69, "sympy.functions.special.hyper.hyper.ap"]], "ap (sympy.functions.special.hyper.meijerg property)": [[69, "sympy.functions.special.hyper.meijerg.ap"]], "appellf1 (class in sympy.functions.special.hyper)": [[69, "sympy.functions.special.hyper.appellf1"]], "argument (sympy.functions.special.bessel.besselbase property)": [[69, "sympy.functions.special.bessel.BesselBase.argument"]], "argument (sympy.functions.special.hyper.hyper property)": [[69, "sympy.functions.special.hyper.hyper.argument"]], "argument (sympy.functions.special.hyper.meijerg property)": [[69, "sympy.functions.special.hyper.meijerg.argument"]], "assoc_laguerre (class in sympy.functions.special.polynomials)": [[69, "sympy.functions.special.polynomials.assoc_laguerre"]], "assoc_legendre (class in sympy.functions.special.polynomials)": [[69, "sympy.functions.special.polynomials.assoc_legendre"]], "besseli (class in sympy.functions.special.bessel)": [[69, "sympy.functions.special.bessel.besseli"]], "besselj (class in sympy.functions.special.bessel)": [[69, "sympy.functions.special.bessel.besselj"]], "besselk (class in sympy.functions.special.bessel)": [[69, "sympy.functions.special.bessel.besselk"]], "bessely (class in sympy.functions.special.bessel)": [[69, "sympy.functions.special.bessel.bessely"]], "beta (class in sympy.functions.special.beta_functions)": [[69, "sympy.functions.special.beta_functions.beta"]], "bm (sympy.functions.special.hyper.meijerg property)": [[69, "sympy.functions.special.hyper.meijerg.bm"]], "bother (sympy.functions.special.hyper.meijerg property)": [[69, "sympy.functions.special.hyper.meijerg.bother"]], "bq (sympy.functions.special.hyper.hyper property)": [[69, "sympy.functions.special.hyper.hyper.bq"]], "bq (sympy.functions.special.hyper.meijerg property)": [[69, "sympy.functions.special.hyper.meijerg.bq"]], "bspline_basis() (in module sympy.functions.special.bsplines)": [[69, "sympy.functions.special.bsplines.bspline_basis"]], "bspline_basis_set() (in module sympy.functions.special.bsplines)": [[69, "sympy.functions.special.bsplines.bspline_basis_set"]], "chebyshevt (class in sympy.functions.special.polynomials)": [[69, "sympy.functions.special.polynomials.chebyshevt"]], "chebyshevt_root (class in sympy.functions.special.polynomials)": [[69, "sympy.functions.special.polynomials.chebyshevt_root"]], "chebyshevu (class in sympy.functions.special.polynomials)": [[69, "sympy.functions.special.polynomials.chebyshevu"]], "chebyshevu_root (class in sympy.functions.special.polynomials)": [[69, "sympy.functions.special.polynomials.chebyshevu_root"]], "convergence_statement (sympy.functions.special.hyper.hyper property)": [[69, "sympy.functions.special.hyper.hyper.convergence_statement"]], "delta (sympy.functions.special.hyper.meijerg property)": [[69, "sympy.functions.special.hyper.meijerg.delta"]], "digamma (class in sympy.functions.special.gamma_functions)": [[69, "sympy.functions.special.gamma_functions.digamma"]], "dirichlet_eta (class in sympy.functions.special.zeta_functions)": [[69, "sympy.functions.special.zeta_functions.dirichlet_eta"]], "elliptic_e (class in sympy.functions.special.elliptic_integrals)": [[69, "sympy.functions.special.elliptic_integrals.elliptic_e"]], "elliptic_f (class in sympy.functions.special.elliptic_integrals)": [[69, "sympy.functions.special.elliptic_integrals.elliptic_f"]], "elliptic_k (class in sympy.functions.special.elliptic_integrals)": [[69, "sympy.functions.special.elliptic_integrals.elliptic_k"]], "elliptic_pi (class in sympy.functions.special.elliptic_integrals)": [[69, "sympy.functions.special.elliptic_integrals.elliptic_pi"]], "erf (class in sympy.functions.special.error_functions)": [[69, "sympy.functions.special.error_functions.erf"]], "erf2 (class in sympy.functions.special.error_functions)": [[69, "sympy.functions.special.error_functions.erf2"]], "erf2inv (class in sympy.functions.special.error_functions)": [[69, "sympy.functions.special.error_functions.erf2inv"]], "erfc (class in sympy.functions.special.error_functions)": [[69, "sympy.functions.special.error_functions.erfc"]], "erfcinv (class in sympy.functions.special.error_functions)": [[69, "sympy.functions.special.error_functions.erfcinv"]], "erfi (class in sympy.functions.special.error_functions)": [[69, "sympy.functions.special.error_functions.erfi"]], "erfinv (class in sympy.functions.special.error_functions)": [[69, "sympy.functions.special.error_functions.erfinv"]], "eta (sympy.functions.special.hyper.hyper property)": [[69, "sympy.functions.special.hyper.hyper.eta"]], "eval() (sympy.functions.special.delta_functions.diracdelta class method)": [[69, "sympy.functions.special.delta_functions.DiracDelta.eval"]], "eval() (sympy.functions.special.delta_functions.heaviside class method)": [[69, "sympy.functions.special.delta_functions.Heaviside.eval"]], "eval() (sympy.functions.special.singularity_functions.singularityfunction class method)": [[69, "sympy.functions.special.singularity_functions.SingularityFunction.eval"]], "eval() (sympy.functions.special.tensor_functions.kroneckerdelta class method)": [[69, "sympy.functions.special.tensor_functions.KroneckerDelta.eval"]], "eval_levicivita() (in module sympy.functions.special.tensor_functions)": [[69, "sympy.functions.special.tensor_functions.eval_levicivita"]], "expint (class in sympy.functions.special.error_functions)": [[69, "sympy.functions.special.error_functions.expint"]], "fdiff() (sympy.functions.special.delta_functions.diracdelta method)": [[69, "sympy.functions.special.delta_functions.DiracDelta.fdiff"]], "fdiff() (sympy.functions.special.delta_functions.heaviside method)": [[69, "sympy.functions.special.delta_functions.Heaviside.fdiff"]], "fdiff() (sympy.functions.special.singularity_functions.singularityfunction method)": [[69, "sympy.functions.special.singularity_functions.SingularityFunction.fdiff"]], "fresnelc (class in sympy.functions.special.error_functions)": [[69, "sympy.functions.special.error_functions.fresnelc"]], "fresnels (class in sympy.functions.special.error_functions)": [[69, "sympy.functions.special.error_functions.fresnels"]], "gamma (class in sympy.functions.special.gamma_functions)": [[69, "sympy.functions.special.gamma_functions.gamma"]], "gegenbauer (class in sympy.functions.special.polynomials)": [[69, "sympy.functions.special.polynomials.gegenbauer"]], "get_period() (sympy.functions.special.hyper.meijerg method)": [[69, "sympy.functions.special.hyper.meijerg.get_period"]], "hankel1 (class in sympy.functions.special.bessel)": [[69, "sympy.functions.special.bessel.hankel1"]], "hankel2 (class in sympy.functions.special.bessel)": [[69, "sympy.functions.special.bessel.hankel2"]], "hermite (class in sympy.functions.special.polynomials)": [[69, "sympy.functions.special.polynomials.hermite"]], "hermite_prob (class in sympy.functions.special.polynomials)": [[69, "sympy.functions.special.polynomials.hermite_prob"]], "hyper (class in sympy.functions.special.hyper)": [[69, "sympy.functions.special.hyper.hyper"]], "indices_contain_equal_information (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[69, "sympy.functions.special.tensor_functions.KroneckerDelta.indices_contain_equal_information"]], "integrand() (sympy.functions.special.hyper.meijerg method)": [[69, "sympy.functions.special.hyper.meijerg.integrand"]], "interpolating_spline() (in module sympy.functions.special.bsplines)": [[69, "sympy.functions.special.bsplines.interpolating_spline"]], "inverse() (sympy.functions.special.error_functions.erf method)": [[69, "sympy.functions.special.error_functions.erf.inverse"]], "inverse() (sympy.functions.special.error_functions.erfc method)": [[69, "sympy.functions.special.error_functions.erfc.inverse"]], "inverse() (sympy.functions.special.error_functions.erfcinv method)": [[69, "sympy.functions.special.error_functions.erfcinv.inverse"]], "inverse() (sympy.functions.special.error_functions.erfinv method)": [[69, "sympy.functions.special.error_functions.erfinv.inverse"]], "is_above_fermi (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[69, "sympy.functions.special.tensor_functions.KroneckerDelta.is_above_fermi"]], "is_below_fermi (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[69, "sympy.functions.special.tensor_functions.KroneckerDelta.is_below_fermi"]], "is_number (sympy.functions.special.hyper.meijerg property)": [[69, "sympy.functions.special.hyper.meijerg.is_number"]], "is_only_above_fermi (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[69, "sympy.functions.special.tensor_functions.KroneckerDelta.is_only_above_fermi"]], "is_only_below_fermi (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[69, "sympy.functions.special.tensor_functions.KroneckerDelta.is_only_below_fermi"]], "is_simple() (sympy.functions.special.delta_functions.diracdelta method)": [[69, "sympy.functions.special.delta_functions.DiracDelta.is_simple"]], "jacobi (class in sympy.functions.special.polynomials)": [[69, "sympy.functions.special.polynomials.jacobi"]], "jacobi_normalized() (in module sympy.functions.special.polynomials)": [[69, "sympy.functions.special.polynomials.jacobi_normalized"]], "jn (class in sympy.functions.special.bessel)": [[69, "sympy.functions.special.bessel.jn"]], "jn_zeros() (in module sympy.functions.special.bessel)": [[69, "sympy.functions.special.bessel.jn_zeros"]], "killable_index (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[69, "sympy.functions.special.tensor_functions.KroneckerDelta.killable_index"]], "laguerre (class in sympy.functions.special.polynomials)": [[69, "sympy.functions.special.polynomials.laguerre"]], "legendre (class in sympy.functions.special.polynomials)": [[69, "sympy.functions.special.polynomials.legendre"]], "lerchphi (class in sympy.functions.special.zeta_functions)": [[69, "sympy.functions.special.zeta_functions.lerchphi"]], "loggamma (class in sympy.functions.special.gamma_functions)": [[69, "sympy.functions.special.gamma_functions.loggamma"]], "lowergamma (class in sympy.functions.special.gamma_functions)": [[69, "sympy.functions.special.gamma_functions.lowergamma"]], "marcumq (class in sympy.functions.special.bessel)": [[69, "sympy.functions.special.bessel.marcumq"]], "mathieuc (class in sympy.functions.special.mathieu_functions)": [[69, "sympy.functions.special.mathieu_functions.mathieuc"]], "mathieucprime (class in sympy.functions.special.mathieu_functions)": [[69, "sympy.functions.special.mathieu_functions.mathieucprime"]], "mathieus (class in sympy.functions.special.mathieu_functions)": [[69, "sympy.functions.special.mathieu_functions.mathieus"]], "mathieusprime (class in sympy.functions.special.mathieu_functions)": [[69, "sympy.functions.special.mathieu_functions.mathieusprime"]], "meijerg (class in sympy.functions.special.hyper)": [[69, "sympy.functions.special.hyper.meijerg"]], "multigamma (class in sympy.functions.special.gamma_functions)": [[69, "sympy.functions.special.gamma_functions.multigamma"]], "nu (sympy.functions.special.hyper.meijerg property)": [[69, "sympy.functions.special.hyper.meijerg.nu"]], "order (sympy.functions.special.bessel.besselbase property)": [[69, "sympy.functions.special.bessel.BesselBase.order"]], "pargs (sympy.functions.special.delta_functions.heaviside property)": [[69, "sympy.functions.special.delta_functions.Heaviside.pargs"]], "polygamma (class in sympy.functions.special.gamma_functions)": [[69, "sympy.functions.special.gamma_functions.polygamma"]], "polylog (class in sympy.functions.special.zeta_functions)": [[69, "sympy.functions.special.zeta_functions.polylog"]], "preferred_index (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[69, "sympy.functions.special.tensor_functions.KroneckerDelta.preferred_index"]], "radius_of_convergence (sympy.functions.special.hyper.hyper property)": [[69, "sympy.functions.special.hyper.hyper.radius_of_convergence"]], "stieltjes (class in sympy.functions.special.zeta_functions)": [[69, "sympy.functions.special.zeta_functions.stieltjes"]], "sympy.functions.special.bessel": [[69, "module-sympy.functions.special.bessel"]], "sympy.functions.special.beta_functions": [[69, "module-sympy.functions.special.beta_functions"]], "sympy.functions.special.elliptic_integrals": [[69, "module-sympy.functions.special.elliptic_integrals"]], "sympy.functions.special.error_functions": [[69, "module-sympy.functions.special.error_functions"]], "sympy.functions.special.gamma_functions": [[69, "module-sympy.functions.special.gamma_functions"]], "sympy.functions.special.mathieu_functions": [[69, "module-sympy.functions.special.mathieu_functions"]], "sympy.functions.special.polynomials": [[69, "module-sympy.functions.special.polynomials"]], "sympy.functions.special.singularity_functions": [[69, "module-sympy.functions.special.singularity_functions"]], "sympy.functions.special.zeta_functions": [[69, "module-sympy.functions.special.zeta_functions"]], "trigamma (class in sympy.functions.special.gamma_functions)": [[69, "sympy.functions.special.gamma_functions.trigamma"]], "uppergamma (class in sympy.functions.special.gamma_functions)": [[69, "sympy.functions.special.gamma_functions.uppergamma"]], "yn (class in sympy.functions.special.bessel)": [[69, "sympy.functions.special.bessel.yn"]], "zeta (class in sympy.functions.special.zeta_functions)": [[69, "sympy.functions.special.zeta_functions.zeta"]], "curve (class in sympy.geometry.curve)": [[70, "sympy.geometry.curve.Curve"]], "ambient_dimension (sympy.geometry.curve.curve property)": [[70, "sympy.geometry.curve.Curve.ambient_dimension"]], "arbitrary_point() (sympy.geometry.curve.curve method)": [[70, "sympy.geometry.curve.Curve.arbitrary_point"]], "free_symbols (sympy.geometry.curve.curve property)": [[70, "sympy.geometry.curve.Curve.free_symbols"]], "functions (sympy.geometry.curve.curve property)": [[70, "sympy.geometry.curve.Curve.functions"]], "length (sympy.geometry.curve.curve property)": [[70, "sympy.geometry.curve.Curve.length"]], "limits (sympy.geometry.curve.curve property)": [[70, "sympy.geometry.curve.Curve.limits"]], "parameter (sympy.geometry.curve.curve property)": [[70, "sympy.geometry.curve.Curve.parameter"]], "plot_interval() (sympy.geometry.curve.curve method)": [[70, "sympy.geometry.curve.Curve.plot_interval"]], "rotate() (sympy.geometry.curve.curve method)": [[70, "sympy.geometry.curve.Curve.rotate"]], "scale() (sympy.geometry.curve.curve method)": [[70, "sympy.geometry.curve.Curve.scale"]], "sympy.geometry.curve": [[70, "module-sympy.geometry.curve"]], "translate() (sympy.geometry.curve.curve method)": [[70, "sympy.geometry.curve.Curve.translate"]], "circle (class in sympy.geometry.ellipse)": [[71, "sympy.geometry.ellipse.Circle"]], "ellipse (class in sympy.geometry.ellipse)": [[71, "sympy.geometry.ellipse.Ellipse"]], "apoapsis (sympy.geometry.ellipse.ellipse property)": [[71, "sympy.geometry.ellipse.Ellipse.apoapsis"]], "arbitrary_point() (sympy.geometry.ellipse.ellipse method)": [[71, "sympy.geometry.ellipse.Ellipse.arbitrary_point"]], "area (sympy.geometry.ellipse.ellipse property)": [[71, "sympy.geometry.ellipse.Ellipse.area"]], "auxiliary_circle() (sympy.geometry.ellipse.ellipse method)": [[71, "sympy.geometry.ellipse.Ellipse.auxiliary_circle"]], "bounds (sympy.geometry.ellipse.ellipse property)": [[71, "sympy.geometry.ellipse.Ellipse.bounds"]], "center (sympy.geometry.ellipse.ellipse property)": [[71, "sympy.geometry.ellipse.Ellipse.center"]], "circumference (sympy.geometry.ellipse.circle property)": [[71, "sympy.geometry.ellipse.Circle.circumference"]], "circumference (sympy.geometry.ellipse.ellipse property)": [[71, "sympy.geometry.ellipse.Ellipse.circumference"]], "director_circle() (sympy.geometry.ellipse.ellipse method)": [[71, "sympy.geometry.ellipse.Ellipse.director_circle"]], "eccentricity (sympy.geometry.ellipse.ellipse property)": [[71, "sympy.geometry.ellipse.Ellipse.eccentricity"]], "encloses_point() (sympy.geometry.ellipse.ellipse method)": [[71, "sympy.geometry.ellipse.Ellipse.encloses_point"]], "equation() (sympy.geometry.ellipse.circle method)": [[71, "sympy.geometry.ellipse.Circle.equation"]], "equation() (sympy.geometry.ellipse.ellipse method)": [[71, "sympy.geometry.ellipse.Ellipse.equation"]], "evolute() (sympy.geometry.ellipse.ellipse method)": [[71, "sympy.geometry.ellipse.Ellipse.evolute"]], "foci (sympy.geometry.ellipse.ellipse property)": [[71, "sympy.geometry.ellipse.Ellipse.foci"]], "focus_distance (sympy.geometry.ellipse.ellipse property)": [[71, "sympy.geometry.ellipse.Ellipse.focus_distance"]], "hradius (sympy.geometry.ellipse.ellipse property)": [[71, "sympy.geometry.ellipse.Ellipse.hradius"]], "intersection() (sympy.geometry.ellipse.circle method)": [[71, "sympy.geometry.ellipse.Circle.intersection"]], "intersection() (sympy.geometry.ellipse.ellipse method)": [[71, "sympy.geometry.ellipse.Ellipse.intersection"]], "is_tangent() (sympy.geometry.ellipse.ellipse method)": [[71, "sympy.geometry.ellipse.Ellipse.is_tangent"]], "major (sympy.geometry.ellipse.ellipse property)": [[71, "sympy.geometry.ellipse.Ellipse.major"]], "minor (sympy.geometry.ellipse.ellipse property)": [[71, "sympy.geometry.ellipse.Ellipse.minor"]], "normal_lines() (sympy.geometry.ellipse.ellipse method)": [[71, "sympy.geometry.ellipse.Ellipse.normal_lines"]], "periapsis (sympy.geometry.ellipse.ellipse property)": [[71, "sympy.geometry.ellipse.Ellipse.periapsis"]], "plot_interval() (sympy.geometry.ellipse.ellipse method)": [[71, "sympy.geometry.ellipse.Ellipse.plot_interval"]], "polar_second_moment_of_area() (sympy.geometry.ellipse.ellipse method)": [[71, "sympy.geometry.ellipse.Ellipse.polar_second_moment_of_area"]], "radius (sympy.geometry.ellipse.circle property)": [[71, "sympy.geometry.ellipse.Circle.radius"]], "random_point() (sympy.geometry.ellipse.ellipse method)": [[71, "sympy.geometry.ellipse.Ellipse.random_point"]], "reflect() (sympy.geometry.ellipse.circle method)": [[71, "sympy.geometry.ellipse.Circle.reflect"]], "reflect() (sympy.geometry.ellipse.ellipse method)": [[71, "sympy.geometry.ellipse.Ellipse.reflect"]], "rotate() (sympy.geometry.ellipse.ellipse method)": [[71, "sympy.geometry.ellipse.Ellipse.rotate"]], "scale() (sympy.geometry.ellipse.circle method)": [[71, "sympy.geometry.ellipse.Circle.scale"]], "scale() (sympy.geometry.ellipse.ellipse method)": [[71, "sympy.geometry.ellipse.Ellipse.scale"]], "second_moment_of_area() (sympy.geometry.ellipse.ellipse method)": [[71, "sympy.geometry.ellipse.Ellipse.second_moment_of_area"]], "section_modulus() (sympy.geometry.ellipse.ellipse method)": [[71, "sympy.geometry.ellipse.Ellipse.section_modulus"]], "semilatus_rectum (sympy.geometry.ellipse.ellipse property)": [[71, "sympy.geometry.ellipse.Ellipse.semilatus_rectum"]], "sympy.geometry.ellipse": [[71, "module-sympy.geometry.ellipse"]], "tangent_lines() (sympy.geometry.ellipse.ellipse method)": [[71, "sympy.geometry.ellipse.Ellipse.tangent_lines"]], "vradius (sympy.geometry.ellipse.circle property)": [[71, "sympy.geometry.ellipse.Circle.vradius"]], "vradius (sympy.geometry.ellipse.ellipse property)": [[71, "sympy.geometry.ellipse.Ellipse.vradius"]], "geometryentity (class in sympy.geometry.entity)": [[72, "sympy.geometry.entity.GeometryEntity"]], "ambient_dimension (sympy.geometry.entity.geometryentity property)": [[72, "sympy.geometry.entity.GeometryEntity.ambient_dimension"]], "bounds (sympy.geometry.entity.geometryentity property)": [[72, "sympy.geometry.entity.GeometryEntity.bounds"]], "encloses() (sympy.geometry.entity.geometryentity method)": [[72, "sympy.geometry.entity.GeometryEntity.encloses"]], "intersection() (sympy.geometry.entity.geometryentity method)": [[72, "sympy.geometry.entity.GeometryEntity.intersection"]], "is_similar() (sympy.geometry.entity.geometryentity method)": [[72, "sympy.geometry.entity.GeometryEntity.is_similar"]], "parameter_value() (sympy.geometry.entity.geometryentity method)": [[72, "sympy.geometry.entity.GeometryEntity.parameter_value"]], "reflect() (sympy.geometry.entity.geometryentity method)": [[72, "sympy.geometry.entity.GeometryEntity.reflect"]], "rotate() (sympy.geometry.entity.geometryentity method)": [[72, "sympy.geometry.entity.GeometryEntity.rotate"]], "scale() (sympy.geometry.entity.geometryentity method)": [[72, "sympy.geometry.entity.GeometryEntity.scale"]], "sympy.geometry.entity": [[72, "module-sympy.geometry.entity"]], "translate() (sympy.geometry.entity.geometryentity method)": [[72, "sympy.geometry.entity.GeometryEntity.translate"]], "line (class in sympy.geometry.line)": [[74, "sympy.geometry.line.Line"]], "line2d (class in sympy.geometry.line)": [[74, "sympy.geometry.line.Line2D"]], "line3d (class in sympy.geometry.line)": [[74, "sympy.geometry.line.Line3D"]], "linearentity (class in sympy.geometry.line)": [[74, "sympy.geometry.line.LinearEntity"]], "linearentity2d (class in sympy.geometry.line)": [[74, "sympy.geometry.line.LinearEntity2D"]], "linearentity3d (class in sympy.geometry.line)": [[74, "sympy.geometry.line.LinearEntity3D"]], "ray (class in sympy.geometry.line)": [[74, "sympy.geometry.line.Ray"]], "ray2d (class in sympy.geometry.line)": [[74, "sympy.geometry.line.Ray2D"]], "ray3d (class in sympy.geometry.line)": [[74, "sympy.geometry.line.Ray3D"]], "segment (class in sympy.geometry.line)": [[74, "sympy.geometry.line.Segment"]], "segment2d (class in sympy.geometry.line)": [[74, "sympy.geometry.line.Segment2D"]], "segment3d (class in sympy.geometry.line)": [[74, "sympy.geometry.line.Segment3D"]], "ambient_dimension (sympy.geometry.line.linearentity property)": [[74, "sympy.geometry.line.LinearEntity.ambient_dimension"]], "angle_between() (sympy.geometry.line.linearentity method)": [[74, "sympy.geometry.line.LinearEntity.angle_between"]], "arbitrary_point() (sympy.geometry.line.linearentity method)": [[74, "sympy.geometry.line.LinearEntity.arbitrary_point"]], "are_concurrent() (sympy.geometry.line.linearentity static method)": [[74, "sympy.geometry.line.LinearEntity.are_concurrent"]], "bisectors() (sympy.geometry.line.linearentity method)": [[74, "sympy.geometry.line.LinearEntity.bisectors"]], "bounds (sympy.geometry.line.linearentity2d property)": [[74, "sympy.geometry.line.LinearEntity2D.bounds"]], "closing_angle() (sympy.geometry.line.ray2d method)": [[74, "sympy.geometry.line.Ray2D.closing_angle"]], "coefficients (sympy.geometry.line.line2d property)": [[74, "sympy.geometry.line.Line2D.coefficients"]], "contains() (sympy.geometry.line.line method)": [[74, "sympy.geometry.line.Line.contains"]], "contains() (sympy.geometry.line.linearentity method)": [[74, "sympy.geometry.line.LinearEntity.contains"]], "contains() (sympy.geometry.line.ray method)": [[74, "sympy.geometry.line.Ray.contains"]], "contains() (sympy.geometry.line.segment method)": [[74, "sympy.geometry.line.Segment.contains"]], "direction (sympy.geometry.line.linearentity property)": [[74, "sympy.geometry.line.LinearEntity.direction"]], "direction_cosine (sympy.geometry.line.linearentity3d property)": [[74, "sympy.geometry.line.LinearEntity3D.direction_cosine"]], "direction_ratio (sympy.geometry.line.linearentity3d property)": [[74, "sympy.geometry.line.LinearEntity3D.direction_ratio"]], "distance() (sympy.geometry.line.line method)": [[74, "sympy.geometry.line.Line.distance"]], "distance() (sympy.geometry.line.ray method)": [[74, "sympy.geometry.line.Ray.distance"]], "distance() (sympy.geometry.line.segment method)": [[74, "sympy.geometry.line.Segment.distance"]], "equals() (sympy.geometry.line.line method)": [[74, "sympy.geometry.line.Line.equals"]], "equals() (sympy.geometry.line.ray method)": [[74, "sympy.geometry.line.Ray.equals"]], "equals() (sympy.geometry.line.segment method)": [[74, "sympy.geometry.line.Segment.equals"]], "equation() (sympy.geometry.line.line2d method)": [[74, "sympy.geometry.line.Line2D.equation"]], "equation() (sympy.geometry.line.line3d method)": [[74, "sympy.geometry.line.Line3D.equation"]], "intersection() (sympy.geometry.line.linearentity method)": [[74, "sympy.geometry.line.LinearEntity.intersection"]], "is_parallel() (sympy.geometry.line.linearentity method)": [[74, "sympy.geometry.line.LinearEntity.is_parallel"]], "is_perpendicular() (sympy.geometry.line.linearentity method)": [[74, "sympy.geometry.line.LinearEntity.is_perpendicular"]], "is_similar() (sympy.geometry.line.linearentity method)": [[74, "sympy.geometry.line.LinearEntity.is_similar"]], "length (sympy.geometry.line.linearentity property)": [[74, "sympy.geometry.line.LinearEntity.length"]], "length (sympy.geometry.line.segment property)": [[74, "sympy.geometry.line.Segment.length"]], "midpoint (sympy.geometry.line.segment property)": [[74, "sympy.geometry.line.Segment.midpoint"]], "p1 (sympy.geometry.line.linearentity property)": [[74, "sympy.geometry.line.LinearEntity.p1"]], "p2 (sympy.geometry.line.linearentity property)": [[74, "sympy.geometry.line.LinearEntity.p2"]], "parallel_line() (sympy.geometry.line.linearentity method)": [[74, "sympy.geometry.line.LinearEntity.parallel_line"]], "perpendicular_bisector() (sympy.geometry.line.segment method)": [[74, "sympy.geometry.line.Segment.perpendicular_bisector"]], "perpendicular_line() (sympy.geometry.line.linearentity method)": [[74, "sympy.geometry.line.LinearEntity.perpendicular_line"]], "perpendicular_line() (sympy.geometry.line.linearentity2d method)": [[74, "sympy.geometry.line.LinearEntity2D.perpendicular_line"]], "perpendicular_segment() (sympy.geometry.line.linearentity method)": [[74, "sympy.geometry.line.LinearEntity.perpendicular_segment"]], "plot_interval() (sympy.geometry.line.line method)": [[74, "sympy.geometry.line.Line.plot_interval"]], "plot_interval() (sympy.geometry.line.ray method)": [[74, "sympy.geometry.line.Ray.plot_interval"]], "plot_interval() (sympy.geometry.line.segment method)": [[74, "sympy.geometry.line.Segment.plot_interval"]], "points (sympy.geometry.line.linearentity property)": [[74, "sympy.geometry.line.LinearEntity.points"]], "projection() (sympy.geometry.line.linearentity method)": [[74, "sympy.geometry.line.LinearEntity.projection"]], "random_point() (sympy.geometry.line.linearentity method)": [[74, "sympy.geometry.line.LinearEntity.random_point"]], "slope (sympy.geometry.line.linearentity2d property)": [[74, "sympy.geometry.line.LinearEntity2D.slope"]], "smallest_angle_between() (sympy.geometry.line.linearentity method)": [[74, "sympy.geometry.line.LinearEntity.smallest_angle_between"]], "source (sympy.geometry.line.ray property)": [[74, "sympy.geometry.line.Ray.source"]], "sympy.geometry.line": [[74, "module-sympy.geometry.line"]], "xdirection (sympy.geometry.line.ray2d property)": [[74, "sympy.geometry.line.Ray2D.xdirection"]], "xdirection (sympy.geometry.line.ray3d property)": [[74, "sympy.geometry.line.Ray3D.xdirection"]], "ydirection (sympy.geometry.line.ray2d property)": [[74, "sympy.geometry.line.Ray2D.ydirection"]], "ydirection (sympy.geometry.line.ray3d property)": [[74, "sympy.geometry.line.Ray3D.ydirection"]], "zdirection (sympy.geometry.line.ray3d property)": [[74, "sympy.geometry.line.Ray3D.zdirection"]], "plane (class in sympy.geometry.plane)": [[75, "sympy.geometry.plane.Plane"]], "angle_between() (sympy.geometry.plane.plane method)": [[75, "sympy.geometry.plane.Plane.angle_between"]], "arbitrary_point() (sympy.geometry.plane.plane method)": [[75, "sympy.geometry.plane.Plane.arbitrary_point"]], "are_concurrent() (sympy.geometry.plane.plane static method)": [[75, "sympy.geometry.plane.Plane.are_concurrent"]], "distance() (sympy.geometry.plane.plane method)": [[75, "sympy.geometry.plane.Plane.distance"]], "equals() (sympy.geometry.plane.plane method)": [[75, "sympy.geometry.plane.Plane.equals"]], "equation() (sympy.geometry.plane.plane method)": [[75, "sympy.geometry.plane.Plane.equation"]], "intersection() (sympy.geometry.plane.plane method)": [[75, "sympy.geometry.plane.Plane.intersection"]], "is_coplanar() (sympy.geometry.plane.plane method)": [[75, "sympy.geometry.plane.Plane.is_coplanar"]], "is_parallel() (sympy.geometry.plane.plane method)": [[75, "sympy.geometry.plane.Plane.is_parallel"]], "is_perpendicular() (sympy.geometry.plane.plane method)": [[75, "sympy.geometry.plane.Plane.is_perpendicular"]], "normal_vector (sympy.geometry.plane.plane property)": [[75, "sympy.geometry.plane.Plane.normal_vector"]], "p1 (sympy.geometry.plane.plane property)": [[75, "sympy.geometry.plane.Plane.p1"]], "parallel_plane() (sympy.geometry.plane.plane method)": [[75, "sympy.geometry.plane.Plane.parallel_plane"]], "parameter_value() (sympy.geometry.plane.plane method)": [[75, "sympy.geometry.plane.Plane.parameter_value"]], "perpendicular_line() (sympy.geometry.plane.plane method)": [[75, "sympy.geometry.plane.Plane.perpendicular_line"]], "perpendicular_plane() (sympy.geometry.plane.plane method)": [[75, "sympy.geometry.plane.Plane.perpendicular_plane"]], "projection() (sympy.geometry.plane.plane method)": [[75, "sympy.geometry.plane.Plane.projection"]], "projection_line() (sympy.geometry.plane.plane method)": [[75, "sympy.geometry.plane.Plane.projection_line"]], "random_point() (sympy.geometry.plane.plane method)": [[75, "sympy.geometry.plane.Plane.random_point"]], "sympy.geometry.plane": [[75, "module-sympy.geometry.plane"]], "point (class in sympy.geometry.point)": [[76, "sympy.geometry.point.Point"]], "point2d (class in sympy.geometry.point)": [[76, "sympy.geometry.point.Point2D"]], "point3d (class in sympy.geometry.point)": [[76, "sympy.geometry.point.Point3D"]], "affine_rank() (sympy.geometry.point.point static method)": [[76, "sympy.geometry.point.Point.affine_rank"]], "ambient_dimension (sympy.geometry.point.point property)": [[76, "sympy.geometry.point.Point.ambient_dimension"]], "are_collinear() (sympy.geometry.point.point3d static method)": [[76, "sympy.geometry.point.Point3D.are_collinear"]], "are_coplanar() (sympy.geometry.point.point class method)": [[76, "sympy.geometry.point.Point.are_coplanar"]], "bounds (sympy.geometry.point.point2d property)": [[76, "sympy.geometry.point.Point2D.bounds"]], "canberra_distance() (sympy.geometry.point.point method)": [[76, "sympy.geometry.point.Point.canberra_distance"]], "coordinates (sympy.geometry.point.point2d property)": [[76, "sympy.geometry.point.Point2D.coordinates"]], "coordinates (sympy.geometry.point.point3d property)": [[76, "sympy.geometry.point.Point3D.coordinates"]], "direction_cosine() (sympy.geometry.point.point3d method)": [[76, "sympy.geometry.point.Point3D.direction_cosine"]], "direction_ratio() (sympy.geometry.point.point3d method)": [[76, "sympy.geometry.point.Point3D.direction_ratio"]], "distance() (sympy.geometry.point.point method)": [[76, "sympy.geometry.point.Point.distance"]], "dot() (sympy.geometry.point.point method)": [[76, "sympy.geometry.point.Point.dot"]], "equals() (sympy.geometry.point.point method)": [[76, "sympy.geometry.point.Point.equals"]], "intersection() (sympy.geometry.point.point method)": [[76, "sympy.geometry.point.Point.intersection"]], "intersection() (sympy.geometry.point.point3d method)": [[76, "sympy.geometry.point.Point3D.intersection"]], "is_collinear() (sympy.geometry.point.point method)": [[76, "sympy.geometry.point.Point.is_collinear"]], "is_concyclic() (sympy.geometry.point.point method)": [[76, "sympy.geometry.point.Point.is_concyclic"]], "is_nonzero (sympy.geometry.point.point property)": [[76, "sympy.geometry.point.Point.is_nonzero"]], "is_scalar_multiple() (sympy.geometry.point.point method)": [[76, "sympy.geometry.point.Point.is_scalar_multiple"]], "is_zero (sympy.geometry.point.point property)": [[76, "sympy.geometry.point.Point.is_zero"]], "length (sympy.geometry.point.point property)": [[76, "sympy.geometry.point.Point.length"]], "midpoint() (sympy.geometry.point.point method)": [[76, "sympy.geometry.point.Point.midpoint"]], "origin (sympy.geometry.point.point property)": [[76, "sympy.geometry.point.Point.origin"]], "orthogonal_direction (sympy.geometry.point.point property)": [[76, "sympy.geometry.point.Point.orthogonal_direction"]], "project() (sympy.geometry.point.point static method)": [[76, "sympy.geometry.point.Point.project"]], "rotate() (sympy.geometry.point.point2d method)": [[76, "sympy.geometry.point.Point2D.rotate"]], "scale() (sympy.geometry.point.point2d method)": [[76, "sympy.geometry.point.Point2D.scale"]], "scale() (sympy.geometry.point.point3d method)": [[76, "sympy.geometry.point.Point3D.scale"]], "sympy.geometry.point": [[76, "module-sympy.geometry.point"]], "taxicab_distance() (sympy.geometry.point.point method)": [[76, "sympy.geometry.point.Point.taxicab_distance"]], "transform() (sympy.geometry.point.point2d method)": [[76, "sympy.geometry.point.Point2D.transform"]], "transform() (sympy.geometry.point.point3d method)": [[76, "sympy.geometry.point.Point3D.transform"]], "translate() (sympy.geometry.point.point2d method)": [[76, "sympy.geometry.point.Point2D.translate"]], "translate() (sympy.geometry.point.point3d method)": [[76, "sympy.geometry.point.Point3D.translate"]], "unit (sympy.geometry.point.point property)": [[76, "sympy.geometry.point.Point.unit"]], "x (sympy.geometry.point.point2d property)": [[76, "sympy.geometry.point.Point2D.x"]], "x (sympy.geometry.point.point3d property)": [[76, "sympy.geometry.point.Point3D.x"]], "y (sympy.geometry.point.point2d property)": [[76, "sympy.geometry.point.Point2D.y"]], "y (sympy.geometry.point.point3d property)": [[76, "sympy.geometry.point.Point3D.y"]], "z (sympy.geometry.point.point3d property)": [[76, "sympy.geometry.point.Point3D.z"]], "polygon (class in sympy.geometry.polygon)": [[77, "sympy.geometry.polygon.Polygon"]], "regularpolygon (class in sympy.geometry.polygon)": [[77, "sympy.geometry.polygon.RegularPolygon"]], "triangle (class in sympy.geometry.polygon)": [[77, "sympy.geometry.polygon.Triangle"]], "altitudes (sympy.geometry.polygon.triangle property)": [[77, "sympy.geometry.polygon.Triangle.altitudes"]], "angles (sympy.geometry.polygon.polygon property)": [[77, "sympy.geometry.polygon.Polygon.angles"]], "angles (sympy.geometry.polygon.regularpolygon property)": [[77, "sympy.geometry.polygon.RegularPolygon.angles"]], "apothem (sympy.geometry.polygon.regularpolygon property)": [[77, "sympy.geometry.polygon.RegularPolygon.apothem"]], "arbitrary_point() (sympy.geometry.polygon.polygon method)": [[77, "sympy.geometry.polygon.Polygon.arbitrary_point"]], "area (sympy.geometry.polygon.polygon property)": [[77, "sympy.geometry.polygon.Polygon.area"]], "area (sympy.geometry.polygon.regularpolygon property)": [[77, "sympy.geometry.polygon.RegularPolygon.area"]], "args (sympy.geometry.polygon.regularpolygon property)": [[77, "sympy.geometry.polygon.RegularPolygon.args"]], "bisectors() (sympy.geometry.polygon.polygon method)": [[77, "sympy.geometry.polygon.Polygon.bisectors"]], "bisectors() (sympy.geometry.polygon.triangle method)": [[77, "sympy.geometry.polygon.Triangle.bisectors"]], "bounds (sympy.geometry.polygon.polygon property)": [[77, "sympy.geometry.polygon.Polygon.bounds"]], "center (sympy.geometry.polygon.regularpolygon property)": [[77, "sympy.geometry.polygon.RegularPolygon.center"]], "centroid (sympy.geometry.polygon.polygon property)": [[77, "sympy.geometry.polygon.Polygon.centroid"]], "centroid (sympy.geometry.polygon.regularpolygon property)": [[77, "sympy.geometry.polygon.RegularPolygon.centroid"]], "circumcenter (sympy.geometry.polygon.regularpolygon property)": [[77, "sympy.geometry.polygon.RegularPolygon.circumcenter"]], "circumcenter (sympy.geometry.polygon.triangle property)": [[77, "sympy.geometry.polygon.Triangle.circumcenter"]], "circumcircle (sympy.geometry.polygon.regularpolygon property)": [[77, "sympy.geometry.polygon.RegularPolygon.circumcircle"]], "circumcircle (sympy.geometry.polygon.triangle property)": [[77, "sympy.geometry.polygon.Triangle.circumcircle"]], "circumradius (sympy.geometry.polygon.regularpolygon property)": [[77, "sympy.geometry.polygon.RegularPolygon.circumradius"]], "circumradius (sympy.geometry.polygon.triangle property)": [[77, "sympy.geometry.polygon.Triangle.circumradius"]], "cut_section() (sympy.geometry.polygon.polygon method)": [[77, "sympy.geometry.polygon.Polygon.cut_section"]], "distance() (sympy.geometry.polygon.polygon method)": [[77, "sympy.geometry.polygon.Polygon.distance"]], "encloses_point() (sympy.geometry.polygon.polygon method)": [[77, "sympy.geometry.polygon.Polygon.encloses_point"]], "encloses_point() (sympy.geometry.polygon.regularpolygon method)": [[77, "sympy.geometry.polygon.RegularPolygon.encloses_point"]], "eulerline (sympy.geometry.polygon.triangle property)": [[77, "sympy.geometry.polygon.Triangle.eulerline"]], "excenters (sympy.geometry.polygon.triangle property)": [[77, "sympy.geometry.polygon.Triangle.excenters"]], "exradii (sympy.geometry.polygon.triangle property)": [[77, "sympy.geometry.polygon.Triangle.exradii"]], "exterior_angle (sympy.geometry.polygon.regularpolygon property)": [[77, "sympy.geometry.polygon.RegularPolygon.exterior_angle"]], "first_moment_of_area() (sympy.geometry.polygon.polygon method)": [[77, "sympy.geometry.polygon.Polygon.first_moment_of_area"]], "incenter (sympy.geometry.polygon.triangle property)": [[77, "sympy.geometry.polygon.Triangle.incenter"]], "incircle (sympy.geometry.polygon.regularpolygon property)": [[77, "sympy.geometry.polygon.RegularPolygon.incircle"]], "incircle (sympy.geometry.polygon.triangle property)": [[77, "sympy.geometry.polygon.Triangle.incircle"]], "inradius (sympy.geometry.polygon.regularpolygon property)": [[77, "sympy.geometry.polygon.RegularPolygon.inradius"]], "inradius (sympy.geometry.polygon.triangle property)": [[77, "sympy.geometry.polygon.Triangle.inradius"]], "interior_angle (sympy.geometry.polygon.regularpolygon property)": [[77, "sympy.geometry.polygon.RegularPolygon.interior_angle"]], "intersection() (sympy.geometry.polygon.polygon method)": [[77, "sympy.geometry.polygon.Polygon.intersection"]], "is_convex() (sympy.geometry.polygon.polygon method)": [[77, "sympy.geometry.polygon.Polygon.is_convex"]], "is_equilateral() (sympy.geometry.polygon.triangle method)": [[77, "sympy.geometry.polygon.Triangle.is_equilateral"]], "is_isosceles() (sympy.geometry.polygon.triangle method)": [[77, "sympy.geometry.polygon.Triangle.is_isosceles"]], "is_right() (sympy.geometry.polygon.triangle method)": [[77, "sympy.geometry.polygon.Triangle.is_right"]], "is_scalene() (sympy.geometry.polygon.triangle method)": [[77, "sympy.geometry.polygon.Triangle.is_scalene"]], "is_similar() (sympy.geometry.polygon.triangle method)": [[77, "sympy.geometry.polygon.Triangle.is_similar"]], "length (sympy.geometry.polygon.regularpolygon property)": [[77, "sympy.geometry.polygon.RegularPolygon.length"]], "medial (sympy.geometry.polygon.triangle property)": [[77, "sympy.geometry.polygon.Triangle.medial"]], "medians (sympy.geometry.polygon.triangle property)": [[77, "sympy.geometry.polygon.Triangle.medians"]], "nine_point_circle (sympy.geometry.polygon.triangle property)": [[77, "sympy.geometry.polygon.Triangle.nine_point_circle"]], "orthocenter (sympy.geometry.polygon.triangle property)": [[77, "sympy.geometry.polygon.Triangle.orthocenter"]], "perimeter (sympy.geometry.polygon.polygon property)": [[77, "sympy.geometry.polygon.Polygon.perimeter"]], "plot_interval() (sympy.geometry.polygon.polygon method)": [[77, "sympy.geometry.polygon.Polygon.plot_interval"]], "polar_second_moment_of_area() (sympy.geometry.polygon.polygon method)": [[77, "sympy.geometry.polygon.Polygon.polar_second_moment_of_area"]], "radius (sympy.geometry.polygon.regularpolygon property)": [[77, "sympy.geometry.polygon.RegularPolygon.radius"]], "reflect() (sympy.geometry.polygon.regularpolygon method)": [[77, "sympy.geometry.polygon.RegularPolygon.reflect"]], "rotate() (sympy.geometry.polygon.regularpolygon method)": [[77, "sympy.geometry.polygon.RegularPolygon.rotate"]], "rotation (sympy.geometry.polygon.regularpolygon property)": [[77, "sympy.geometry.polygon.RegularPolygon.rotation"]], "scale() (sympy.geometry.polygon.regularpolygon method)": [[77, "sympy.geometry.polygon.RegularPolygon.scale"]], "second_moment_of_area() (sympy.geometry.polygon.polygon method)": [[77, "sympy.geometry.polygon.Polygon.second_moment_of_area"]], "section_modulus() (sympy.geometry.polygon.polygon method)": [[77, "sympy.geometry.polygon.Polygon.section_modulus"]], "sides (sympy.geometry.polygon.polygon property)": [[77, "sympy.geometry.polygon.Polygon.sides"]], "spin() (sympy.geometry.polygon.regularpolygon method)": [[77, "sympy.geometry.polygon.RegularPolygon.spin"]], "sympy.geometry.polygon": [[77, "module-sympy.geometry.polygon"]], "vertices (sympy.geometry.polygon.polygon property)": [[77, "sympy.geometry.polygon.Polygon.vertices"]], "vertices (sympy.geometry.polygon.regularpolygon property)": [[77, "sympy.geometry.polygon.RegularPolygon.vertices"]], "vertices (sympy.geometry.polygon.triangle property)": [[77, "sympy.geometry.polygon.Triangle.vertices"]], "are_similar() (in module sympy.geometry.util)": [[78, "sympy.geometry.util.are_similar"]], "centroid() (in module sympy.geometry.util)": [[78, "sympy.geometry.util.centroid"]], "convex_hull() (in module sympy.geometry.util)": [[78, "sympy.geometry.util.convex_hull"]], "idiff() (in module sympy.geometry.util)": [[78, "sympy.geometry.util.idiff"]], "intersection() (in module sympy.geometry.util)": [[78, "sympy.geometry.util.intersection"]], "sympy.geometry.util": [[78, "module-sympy.geometry.util"]], "expr_to_holonomic() (in module sympy.holonomic.holonomic)": [[80, "sympy.holonomic.holonomic.expr_to_holonomic"]], "from_hyper() (in module sympy.holonomic.holonomic)": [[80, "sympy.holonomic.holonomic.from_hyper"]], "from_meijerg() (in module sympy.holonomic.holonomic)": [[80, "sympy.holonomic.holonomic.from_meijerg"]], "sympy.holonomic": [[81, "module-sympy.holonomic"]], "_convert_poly_rat_alg() (in module sympy.holonomic.holonomic)": [[82, "sympy.holonomic.holonomic._convert_poly_rat_alg"]], "_create_table() (in module sympy.holonomic.holonomic)": [[82, "sympy.holonomic.holonomic._create_table"]], "composition() (sympy.holonomic.holonomic.holonomicfunction method)": [[83, "sympy.holonomic.holonomic.HolonomicFunction.composition"]], "diff() (sympy.holonomic.holonomic.holonomicfunction method)": [[83, "sympy.holonomic.holonomic.HolonomicFunction.diff"]], "evalf() (sympy.holonomic.holonomic.holonomicfunction method)": [[83, "sympy.holonomic.holonomic.HolonomicFunction.evalf"]], "integrate() (sympy.holonomic.holonomic.holonomicfunction method)": [[83, "sympy.holonomic.holonomic.HolonomicFunction.integrate"]], "series() (sympy.holonomic.holonomic.holonomicfunction method)": [[83, "sympy.holonomic.holonomic.HolonomicFunction.series"]], "to_expr() (sympy.holonomic.holonomic.holonomicfunction method)": [[83, "sympy.holonomic.holonomic.HolonomicFunction.to_expr"]], "to_hyper() (sympy.holonomic.holonomic.holonomicfunction method)": [[83, "sympy.holonomic.holonomic.HolonomicFunction.to_hyper"]], "to_meijerg() (sympy.holonomic.holonomic.holonomicfunction method)": [[83, "sympy.holonomic.holonomic.HolonomicFunction.to_meijerg"]], "to_sequence() (sympy.holonomic.holonomic.holonomicfunction method)": [[83, "sympy.holonomic.holonomic.HolonomicFunction.to_sequence"]], "differentialoperator (class in sympy.holonomic.holonomic)": [[84, "sympy.holonomic.holonomic.DifferentialOperator"]], "differentialoperatoralgebra (class in sympy.holonomic.holonomic)": [[84, "sympy.holonomic.holonomic.DifferentialOperatorAlgebra"]], "differentialoperators() (in module sympy.holonomic.holonomic)": [[84, "sympy.holonomic.holonomic.DifferentialOperators"]], "holonomicfunction (class in sympy.holonomic.holonomic)": [[84, "sympy.holonomic.holonomic.HolonomicFunction"]], "is_singular() (sympy.holonomic.holonomic.differentialoperator method)": [[84, "sympy.holonomic.holonomic.DifferentialOperator.is_singular"]], "_coeffexpvalueerror": [[86, "sympy.integrals.meijerint._CoeffExpValueError"]], "_check_antecedents() (in module sympy.integrals.meijerint)": [[86, "sympy.integrals.meijerint._check_antecedents"]], "_check_antecedents_1() (in module sympy.integrals.meijerint)": [[86, "sympy.integrals.meijerint._check_antecedents_1"]], "_check_antecedents_inversion() (in module sympy.integrals.meijerint)": [[86, "sympy.integrals.meijerint._check_antecedents_inversion"]], "_condsimp() (in module sympy.integrals.meijerint)": [[86, "sympy.integrals.meijerint._condsimp"]], "_create_lookup_table() (in module sympy.integrals.meijerint)": [[86, "sympy.integrals.meijerint._create_lookup_table"]], "_dummy() (in module sympy.integrals.meijerint)": [[86, "sympy.integrals.meijerint._dummy"]], "_dummy_() (in module sympy.integrals.meijerint)": [[86, "sympy.integrals.meijerint._dummy_"]], "_eval_cond() (in module sympy.integrals.meijerint)": [[86, "sympy.integrals.meijerint._eval_cond"]], "_exponents() (in module sympy.integrals.meijerint)": [[86, "sympy.integrals.meijerint._exponents"]], "_find_splitting_points() (in module sympy.integrals.meijerint)": [[86, "sympy.integrals.meijerint._find_splitting_points"]], "_flip_g() (in module sympy.integrals.meijerint)": [[86, "sympy.integrals.meijerint._flip_g"]], "_functions() (in module sympy.integrals.meijerint)": [[86, "sympy.integrals.meijerint._functions"]], "_get_coeff_exp() (in module sympy.integrals.meijerint)": [[86, "sympy.integrals.meijerint._get_coeff_exp"]], "_guess_expansion() (in module sympy.integrals.meijerint)": [[86, "sympy.integrals.meijerint._guess_expansion"]], "_inflate_fox_h() (in module sympy.integrals.meijerint)": [[86, "sympy.integrals.meijerint._inflate_fox_h"]], "_inflate_g() (in module sympy.integrals.meijerint)": [[86, "sympy.integrals.meijerint._inflate_g"]], "_int0oo() (in module sympy.integrals.meijerint)": [[86, "sympy.integrals.meijerint._int0oo"]], "_int0oo_1() (in module sympy.integrals.meijerint)": [[86, "sympy.integrals.meijerint._int0oo_1"]], "_int_inversion() (in module sympy.integrals.meijerint)": [[86, "sympy.integrals.meijerint._int_inversion"]], "_is_analytic() (in module sympy.integrals.meijerint)": [[86, "sympy.integrals.meijerint._is_analytic"]], "_meijerint_definite_2() (in module sympy.integrals.meijerint)": [[86, "sympy.integrals.meijerint._meijerint_definite_2"]], "_meijerint_definite_3() (in module sympy.integrals.meijerint)": [[86, "sympy.integrals.meijerint._meijerint_definite_3"]], "_meijerint_definite_4() (in module sympy.integrals.meijerint)": [[86, "sympy.integrals.meijerint._meijerint_definite_4"]], "_meijerint_indefinite_1() (in module sympy.integrals.meijerint)": [[86, "sympy.integrals.meijerint._meijerint_indefinite_1"]], "_mul_args() (in module sympy.integrals.meijerint)": [[86, "sympy.integrals.meijerint._mul_args"]], "_mul_as_two_parts() (in module sympy.integrals.meijerint)": [[86, "sympy.integrals.meijerint._mul_as_two_parts"]], "_my_principal_branch() (in module sympy.integrals.meijerint)": [[86, "sympy.integrals.meijerint._my_principal_branch"]], "_mytype() (in module sympy.integrals.meijerint)": [[86, "sympy.integrals.meijerint._mytype"]], "_rewrite1() (in module sympy.integrals.meijerint)": [[86, "sympy.integrals.meijerint._rewrite1"]], "_rewrite2() (in module sympy.integrals.meijerint)": [[86, "sympy.integrals.meijerint._rewrite2"]], "_rewrite_inversion() (in module sympy.integrals.meijerint)": [[86, "sympy.integrals.meijerint._rewrite_inversion"]], "_rewrite_saxena() (in module sympy.integrals.meijerint)": [[86, "sympy.integrals.meijerint._rewrite_saxena"]], "_rewrite_saxena_1() (in module sympy.integrals.meijerint)": [[86, "sympy.integrals.meijerint._rewrite_saxena_1"]], "_rewrite_single() (in module sympy.integrals.meijerint)": [[86, "sympy.integrals.meijerint._rewrite_single"]], "_split_mul() (in module sympy.integrals.meijerint)": [[86, "sympy.integrals.meijerint._split_mul"]], "meijerint_definite() (in module sympy.integrals.meijerint)": [[86, "sympy.integrals.meijerint.meijerint_definite"]], "meijerint_indefinite() (in module sympy.integrals.meijerint)": [[86, "sympy.integrals.meijerint.meijerint_indefinite"]], "meijerint_inversion() (in module sympy.integrals.meijerint)": [[86, "sympy.integrals.meijerint.meijerint_inversion"]], "sympy.integrals.meijerint": [[86, "module-sympy.integrals.meijerint"]], "sympy.integrals.meijerint_doc": [[86, "module-sympy.integrals.meijerint_doc"]], "cosinetransform (class in sympy.integrals.transforms)": [[88, "sympy.integrals.transforms.CosineTransform"]], "exprwithlimits (class in sympy.concrete.expr_with_limits)": [[88, "sympy.concrete.expr_with_limits.ExprWithLimits"]], "fouriertransform (class in sympy.integrals.transforms)": [[88, "sympy.integrals.transforms.FourierTransform"]], "hankeltransform (class in sympy.integrals.transforms)": [[88, "sympy.integrals.transforms.HankelTransform"]], "integral (class in sympy.integrals.integrals)": [[88, "sympy.integrals.integrals.Integral"]], "integral.is_commutative (in module sympy.integrals.integrals)": [[88, "sympy.integrals.integrals.Integral.is_commutative"]], "integraltransform (class in sympy.integrals.transforms)": [[88, "sympy.integrals.transforms.IntegralTransform"]], "integraltransformerror": [[88, "sympy.integrals.transforms.IntegralTransformError"]], "inversecosinetransform (class in sympy.integrals.transforms)": [[88, "sympy.integrals.transforms.InverseCosineTransform"]], "inversefouriertransform (class in sympy.integrals.transforms)": [[88, "sympy.integrals.transforms.InverseFourierTransform"]], "inversehankeltransform (class in sympy.integrals.transforms)": [[88, "sympy.integrals.transforms.InverseHankelTransform"]], "inverselaplacetransform (class in sympy.integrals.transforms)": [[88, "sympy.integrals.transforms.InverseLaplaceTransform"]], "inversemellintransform (class in sympy.integrals.transforms)": [[88, "sympy.integrals.transforms.InverseMellinTransform"]], "inversesinetransform (class in sympy.integrals.transforms)": [[88, "sympy.integrals.transforms.InverseSineTransform"]], "laplacetransform (class in sympy.integrals.transforms)": [[88, "sympy.integrals.transforms.LaplaceTransform"]], "mellintransform (class in sympy.integrals.transforms)": [[88, "sympy.integrals.transforms.MellinTransform"]], "nonelementaryintegral (class in sympy.integrals.risch)": [[88, "sympy.integrals.risch.NonElementaryIntegral"]], "sinetransform (class in sympy.integrals.transforms)": [[88, "sympy.integrals.transforms.SineTransform"]], "_fast_inverse_laplace() (in module sympy.integrals.transforms)": [[88, "sympy.integrals.transforms._fast_inverse_laplace"]], "_fourier_transform() (in module sympy.integrals.transforms)": [[88, "sympy.integrals.transforms._fourier_transform"]], "as_sum() (sympy.integrals.integrals.integral method)": [[88, "sympy.integrals.integrals.Integral.as_sum"]], "bound_symbols (sympy.concrete.expr_with_limits.exprwithlimits property)": [[88, "sympy.concrete.expr_with_limits.ExprWithLimits.bound_symbols"]], "components() (in module sympy.integrals.heurisch)": [[88, "sympy.integrals.heurisch.components"]], "cosine_transform() (in module sympy.integrals.transforms)": [[88, "sympy.integrals.transforms.cosine_transform"]], "deltaintegrate() (in module sympy.integrals.deltafunctions)": [[88, "sympy.integrals.deltafunctions.deltaintegrate"]], "doit() (sympy.integrals.integrals.integral method)": [[88, "sympy.integrals.integrals.Integral.doit"]], "doit() (sympy.integrals.transforms.integraltransform method)": [[88, "sympy.integrals.transforms.IntegralTransform.doit"]], "fourier_transform() (in module sympy.integrals.transforms)": [[88, "sympy.integrals.transforms.fourier_transform"]], "free_symbols (sympy.concrete.expr_with_limits.exprwithlimits property)": [[88, "sympy.concrete.expr_with_limits.ExprWithLimits.free_symbols"]], "free_symbols (sympy.integrals.integrals.integral property)": [[88, "sympy.integrals.integrals.Integral.free_symbols"]], "function (sympy.concrete.expr_with_limits.exprwithlimits property)": [[88, "sympy.concrete.expr_with_limits.ExprWithLimits.function"]], "function (sympy.integrals.transforms.integraltransform property)": [[88, "sympy.integrals.transforms.IntegralTransform.function"]], "function_variable (sympy.integrals.transforms.integraltransform property)": [[88, "sympy.integrals.transforms.IntegralTransform.function_variable"]], "gauss_chebyshev_t() (in module sympy.integrals.quadrature)": [[88, "sympy.integrals.quadrature.gauss_chebyshev_t"]], "gauss_chebyshev_u() (in module sympy.integrals.quadrature)": [[88, "sympy.integrals.quadrature.gauss_chebyshev_u"]], "gauss_gen_laguerre() (in module sympy.integrals.quadrature)": [[88, "sympy.integrals.quadrature.gauss_gen_laguerre"]], "gauss_hermite() (in module sympy.integrals.quadrature)": [[88, "sympy.integrals.quadrature.gauss_hermite"]], "gauss_jacobi() (in module sympy.integrals.quadrature)": [[88, "sympy.integrals.quadrature.gauss_jacobi"]], "gauss_laguerre() (in module sympy.integrals.quadrature)": [[88, "sympy.integrals.quadrature.gauss_laguerre"]], "gauss_legendre() (in module sympy.integrals.quadrature)": [[88, "sympy.integrals.quadrature.gauss_legendre"]], "gauss_lobatto() (in module sympy.integrals.quadrature)": [[88, "sympy.integrals.quadrature.gauss_lobatto"]], "hankel_transform() (in module sympy.integrals.transforms)": [[88, "sympy.integrals.transforms.hankel_transform"]], "has_finite_limits (sympy.concrete.expr_with_limits.exprwithlimits property)": [[88, "sympy.concrete.expr_with_limits.ExprWithLimits.has_finite_limits"]], "has_reversed_limits (sympy.concrete.expr_with_limits.exprwithlimits property)": [[88, "sympy.concrete.expr_with_limits.ExprWithLimits.has_reversed_limits"]], "heurisch() (in module sympy.integrals.heurisch)": [[88, "sympy.integrals.heurisch.heurisch"]], "integral_steps() (in module sympy.integrals.manualintegrate)": [[88, "sympy.integrals.manualintegrate.integral_steps"]], "integrate() (in module sympy.integrals.integrals)": [[88, "sympy.integrals.integrals.integrate"]], "inverse_cosine_transform() (in module sympy.integrals.transforms)": [[88, "sympy.integrals.transforms.inverse_cosine_transform"]], "inverse_fourier_transform() (in module sympy.integrals.transforms)": [[88, "sympy.integrals.transforms.inverse_fourier_transform"]], "inverse_hankel_transform() (in module sympy.integrals.transforms)": [[88, "sympy.integrals.transforms.inverse_hankel_transform"]], "inverse_laplace_transform() (in module sympy.integrals.transforms)": [[88, "sympy.integrals.transforms.inverse_laplace_transform"]], "inverse_mellin_transform() (in module sympy.integrals.transforms)": [[88, "sympy.integrals.transforms.inverse_mellin_transform"]], "inverse_sine_transform() (in module sympy.integrals.transforms)": [[88, "sympy.integrals.transforms.inverse_sine_transform"]], "is_number (sympy.concrete.expr_with_limits.exprwithlimits property)": [[88, "sympy.concrete.expr_with_limits.ExprWithLimits.is_number"]], "laplace_transform() (in module sympy.integrals.transforms)": [[88, "sympy.integrals.transforms.laplace_transform"]], "limits (sympy.concrete.expr_with_limits.exprwithlimits property)": [[88, "sympy.concrete.expr_with_limits.ExprWithLimits.limits"]], "line_integrate() (in module sympy.integrals.integrals)": [[88, "sympy.integrals.integrals.line_integrate"]], "manualintegrate() (in module sympy.integrals.manualintegrate)": [[88, "sympy.integrals.manualintegrate.manualintegrate"]], "mellin_transform() (in module sympy.integrals.transforms)": [[88, "sympy.integrals.transforms.mellin_transform"]], "polytope_integrate() (in module sympy.integrals.intpoly)": [[88, "sympy.integrals.intpoly.polytope_integrate"]], "principal_value() (sympy.integrals.integrals.integral method)": [[88, "sympy.integrals.integrals.Integral.principal_value"]], "ratint() (in module sympy.integrals.rationaltools)": [[88, "sympy.integrals.rationaltools.ratint"]], "ratint_logpart() (in module sympy.integrals.rationaltools)": [[88, "sympy.integrals.rationaltools.ratint_logpart"]], "ratint_ratpart() (in module sympy.integrals.rationaltools)": [[88, "sympy.integrals.rationaltools.ratint_ratpart"]], "risch_integrate() (in module sympy.integrals.risch)": [[88, "sympy.integrals.risch.risch_integrate"]], "sine_transform() (in module sympy.integrals.transforms)": [[88, "sympy.integrals.transforms.sine_transform"]], "singularityintegrate() (in module sympy.integrals.singularityfunctions)": [[88, "sympy.integrals.singularityfunctions.singularityintegrate"]], "sympy.integrals": [[88, "module-sympy.integrals"]], "sympy.integrals.intpoly": [[88, "module-sympy.integrals.intpoly"]], "sympy.integrals.transforms": [[88, "module-sympy.integrals.transforms"]], "transform() (sympy.integrals.integrals.integral method)": [[88, "sympy.integrals.integrals.Integral.transform"]], "transform_variable (sympy.integrals.transforms.integraltransform property)": [[88, "sympy.integrals.transforms.IntegralTransform.transform_variable"]], "trigintegrate() (in module sympy.integrals.trigonometry)": [[88, "sympy.integrals.trigonometry.trigintegrate"]], "variables (sympy.concrete.expr_with_limits.exprwithlimits property)": [[88, "sympy.concrete.expr_with_limits.ExprWithLimits.variables"]], "enable_automatic_int_sympification() (in module sympy.interactive.session)": [[89, "sympy.interactive.session.enable_automatic_int_sympification"]], "enable_automatic_symbols() (in module sympy.interactive.session)": [[89, "sympy.interactive.session.enable_automatic_symbols"]], "init_ipython_session() (in module sympy.interactive.session)": [[89, "sympy.interactive.session.init_ipython_session"]], "init_printing() (in module sympy.interactive.printing)": [[89, "sympy.interactive.printing.init_printing"]], "init_python_session() (in module sympy.interactive.session)": [[89, "sympy.interactive.session.init_python_session"]], "init_session() (in module sympy.interactive.session)": [[89, "sympy.interactive.session.init_session"]], "int_to_integer() (in module sympy.interactive.session)": [[89, "sympy.interactive.session.int_to_Integer"]], "sympy.interactive": [[89, "module-sympy.interactive"]], "sympy.interactive.printing": [[89, "module-sympy.interactive.printing"]], "sympy.interactive.session": [[89, "module-sympy.interactive.session"]], "cartanmatrix() (in module sympy.liealgebras.cartan_matrix)": [[90, "sympy.liealgebras.cartan_matrix.CartanMatrix"]], "cartantype_generator (class in sympy.liealgebras.cartan_type)": [[90, "sympy.liealgebras.cartan_type.CartanType_generator"]], "dynkindiagram() (in module sympy.liealgebras.dynkin_diagram)": [[90, "sympy.liealgebras.dynkin_diagram.DynkinDiagram"]], "rootsystem (class in sympy.liealgebras.root_system)": [[90, "sympy.liealgebras.root_system.RootSystem"]], "standard_cartan (class in sympy.liealgebras.cartan_type)": [[90, "sympy.liealgebras.cartan_type.Standard_Cartan"]], "typea (class in sympy.liealgebras.type_a)": [[90, "sympy.liealgebras.type_a.TypeA"]], "typeb (class in sympy.liealgebras.type_b)": [[90, "sympy.liealgebras.type_b.TypeB"]], "typec (class in sympy.liealgebras.type_c)": [[90, "sympy.liealgebras.type_c.TypeC"]], "typed (class in sympy.liealgebras.type_d)": [[90, "sympy.liealgebras.type_d.TypeD"]], "typee (class in sympy.liealgebras.type_e)": [[90, "sympy.liealgebras.type_e.TypeE"]], "typef (class in sympy.liealgebras.type_f)": [[90, "sympy.liealgebras.type_f.TypeF"]], "typeg (class in sympy.liealgebras.type_g)": [[90, "sympy.liealgebras.type_g.TypeG"]], "weylgroup (class in sympy.liealgebras.weyl_group)": [[90, "sympy.liealgebras.weyl_group.WeylGroup"]], "add_as_roots() (sympy.liealgebras.root_system.rootsystem method)": [[90, "sympy.liealgebras.root_system.RootSystem.add_as_roots"]], "add_simple_roots() (sympy.liealgebras.root_system.rootsystem method)": [[90, "sympy.liealgebras.root_system.RootSystem.add_simple_roots"]], "all_roots() (sympy.liealgebras.root_system.rootsystem method)": [[90, "sympy.liealgebras.root_system.RootSystem.all_roots"]], "basic_root() (sympy.liealgebras.type_a.typea method)": [[90, "sympy.liealgebras.type_a.TypeA.basic_root"]], "basic_root() (sympy.liealgebras.type_b.typeb method)": [[90, "sympy.liealgebras.type_b.TypeB.basic_root"]], "basic_root() (sympy.liealgebras.type_c.typec method)": [[90, "sympy.liealgebras.type_c.TypeC.basic_root"]], "basic_root() (sympy.liealgebras.type_d.typed method)": [[90, "sympy.liealgebras.type_d.TypeD.basic_root"]], "basic_root() (sympy.liealgebras.type_e.typee method)": [[90, "sympy.liealgebras.type_e.TypeE.basic_root"]], "basic_root() (sympy.liealgebras.type_f.typef method)": [[90, "sympy.liealgebras.type_f.TypeF.basic_root"]], "basis() (sympy.liealgebras.type_a.typea method)": [[90, "sympy.liealgebras.type_a.TypeA.basis"]], "basis() (sympy.liealgebras.type_b.typeb method)": [[90, "sympy.liealgebras.type_b.TypeB.basis"]], "basis() (sympy.liealgebras.type_c.typec method)": [[90, "sympy.liealgebras.type_c.TypeC.basis"]], "basis() (sympy.liealgebras.type_d.typed method)": [[90, "sympy.liealgebras.type_d.TypeD.basis"]], "basis() (sympy.liealgebras.type_e.typee method)": [[90, "sympy.liealgebras.type_e.TypeE.basis"]], "basis() (sympy.liealgebras.type_f.typef method)": [[90, "sympy.liealgebras.type_f.TypeF.basis"]], "basis() (sympy.liealgebras.type_g.typeg method)": [[90, "sympy.liealgebras.type_g.TypeG.basis"]], "cartan_matrix() (sympy.liealgebras.root_system.rootsystem method)": [[90, "sympy.liealgebras.root_system.RootSystem.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_a.typea method)": [[90, "sympy.liealgebras.type_a.TypeA.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_b.typeb method)": [[90, "sympy.liealgebras.type_b.TypeB.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_c.typec method)": [[90, "sympy.liealgebras.type_c.TypeC.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_d.typed method)": [[90, "sympy.liealgebras.type_d.TypeD.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_e.typee method)": [[90, "sympy.liealgebras.type_e.TypeE.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_f.typef method)": [[90, "sympy.liealgebras.type_f.TypeF.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_g.typeg method)": [[90, "sympy.liealgebras.type_g.TypeG.cartan_matrix"]], "coxeter_diagram() (sympy.liealgebras.weyl_group.weylgroup method)": [[90, "sympy.liealgebras.weyl_group.WeylGroup.coxeter_diagram"]], "delete_doubles() (sympy.liealgebras.weyl_group.weylgroup method)": [[90, "sympy.liealgebras.weyl_group.WeylGroup.delete_doubles"]], "dimension() (sympy.liealgebras.type_a.typea method)": [[90, "sympy.liealgebras.type_a.TypeA.dimension"]], "dimension() (sympy.liealgebras.type_b.typeb method)": [[90, "sympy.liealgebras.type_b.TypeB.dimension"]], "dimension() (sympy.liealgebras.type_c.typec method)": [[90, "sympy.liealgebras.type_c.TypeC.dimension"]], "dimension() (sympy.liealgebras.type_d.typed method)": [[90, "sympy.liealgebras.type_d.TypeD.dimension"]], "dimension() (sympy.liealgebras.type_e.typee method)": [[90, "sympy.liealgebras.type_e.TypeE.dimension"]], "dimension() (sympy.liealgebras.type_f.typef method)": [[90, "sympy.liealgebras.type_f.TypeF.dimension"]], "dimension() (sympy.liealgebras.type_g.typeg method)": [[90, "sympy.liealgebras.type_g.TypeG.dimension"]], "dynkin_diagram() (sympy.liealgebras.root_system.rootsystem method)": [[90, "sympy.liealgebras.root_system.RootSystem.dynkin_diagram"]], "element_order() (sympy.liealgebras.weyl_group.weylgroup method)": [[90, "sympy.liealgebras.weyl_group.WeylGroup.element_order"]], "generators() (sympy.liealgebras.weyl_group.weylgroup method)": [[90, "sympy.liealgebras.weyl_group.WeylGroup.generators"]], "group_name() (sympy.liealgebras.weyl_group.weylgroup method)": [[90, "sympy.liealgebras.weyl_group.WeylGroup.group_name"]], "group_order() (sympy.liealgebras.weyl_group.weylgroup method)": [[90, "sympy.liealgebras.weyl_group.WeylGroup.group_order"]], "highest_root() (sympy.liealgebras.type_a.typea method)": [[90, "sympy.liealgebras.type_a.TypeA.highest_root"]], "lie_algebra() (sympy.liealgebras.type_a.typea method)": [[90, "sympy.liealgebras.type_a.TypeA.lie_algebra"]], "lie_algebra() (sympy.liealgebras.type_b.typeb method)": [[90, "sympy.liealgebras.type_b.TypeB.lie_algebra"]], "lie_algebra() (sympy.liealgebras.type_c.typec method)": [[90, "sympy.liealgebras.type_c.TypeC.lie_algebra"]], "lie_algebra() (sympy.liealgebras.type_d.typed method)": [[90, "sympy.liealgebras.type_d.TypeD.lie_algebra"]], "matrix_form() (sympy.liealgebras.weyl_group.weylgroup method)": [[90, "sympy.liealgebras.weyl_group.WeylGroup.matrix_form"]], "positive_roots() (sympy.liealgebras.type_a.typea method)": [[90, "sympy.liealgebras.type_a.TypeA.positive_roots"]], "positive_roots() (sympy.liealgebras.type_b.typeb method)": [[90, "sympy.liealgebras.type_b.TypeB.positive_roots"]], "positive_roots() (sympy.liealgebras.type_c.typec method)": [[90, "sympy.liealgebras.type_c.TypeC.positive_roots"]], "positive_roots() (sympy.liealgebras.type_d.typed method)": [[90, "sympy.liealgebras.type_d.TypeD.positive_roots"]], "positive_roots() (sympy.liealgebras.type_e.typee method)": [[90, "sympy.liealgebras.type_e.TypeE.positive_roots"]], "positive_roots() (sympy.liealgebras.type_f.typef method)": [[90, "sympy.liealgebras.type_f.TypeF.positive_roots"]], "positive_roots() (sympy.liealgebras.type_g.typeg method)": [[90, "sympy.liealgebras.type_g.TypeG.positive_roots"]], "rank() (sympy.liealgebras.cartan_type.standard_cartan method)": [[90, "sympy.liealgebras.cartan_type.Standard_Cartan.rank"]], "root_space() (sympy.liealgebras.root_system.rootsystem method)": [[90, "sympy.liealgebras.root_system.RootSystem.root_space"]], "roots() (sympy.liealgebras.type_a.typea method)": [[90, "sympy.liealgebras.type_a.TypeA.roots"]], "roots() (sympy.liealgebras.type_b.typeb method)": [[90, "sympy.liealgebras.type_b.TypeB.roots"]], "roots() (sympy.liealgebras.type_c.typec method)": [[90, "sympy.liealgebras.type_c.TypeC.roots"]], "roots() (sympy.liealgebras.type_d.typed method)": [[90, "sympy.liealgebras.type_d.TypeD.roots"]], "roots() (sympy.liealgebras.type_e.typee method)": [[90, "sympy.liealgebras.type_e.TypeE.roots"]], "roots() (sympy.liealgebras.type_f.typef method)": [[90, "sympy.liealgebras.type_f.TypeF.roots"]], "roots() (sympy.liealgebras.type_g.typeg method)": [[90, "sympy.liealgebras.type_g.TypeG.roots"]], "series() (sympy.liealgebras.cartan_type.standard_cartan method)": [[90, "sympy.liealgebras.cartan_type.Standard_Cartan.series"]], "simple_root() (sympy.liealgebras.type_a.typea method)": [[90, "sympy.liealgebras.type_a.TypeA.simple_root"]], "simple_root() (sympy.liealgebras.type_b.typeb method)": [[90, "sympy.liealgebras.type_b.TypeB.simple_root"]], "simple_root() (sympy.liealgebras.type_c.typec method)": [[90, "sympy.liealgebras.type_c.TypeC.simple_root"]], "simple_root() (sympy.liealgebras.type_d.typed method)": [[90, "sympy.liealgebras.type_d.TypeD.simple_root"]], "simple_root() (sympy.liealgebras.type_e.typee method)": [[90, "sympy.liealgebras.type_e.TypeE.simple_root"]], "simple_root() (sympy.liealgebras.type_f.typef method)": [[90, "sympy.liealgebras.type_f.TypeF.simple_root"]], "simple_root() (sympy.liealgebras.type_g.typeg method)": [[90, "sympy.liealgebras.type_g.TypeG.simple_root"]], "simple_roots() (sympy.liealgebras.root_system.rootsystem method)": [[90, "sympy.liealgebras.root_system.RootSystem.simple_roots"]], "sympy.liealgebras": [[90, "module-sympy.liealgebras"]], "anfform() (in module sympy.logic.boolalg)": [[91, "sympy.logic.boolalg.ANFform"]], "and (class in sympy.logic.boolalg)": [[91, "sympy.logic.boolalg.And"]], "boolean (class in sympy.logic.boolalg)": [[91, "sympy.logic.boolalg.Boolean"]], "booleanfalse (class in sympy.logic.boolalg)": [[91, "sympy.logic.boolalg.BooleanFalse"]], "booleantrue (class in sympy.logic.boolalg)": [[91, "sympy.logic.boolalg.BooleanTrue"]], "equivalent (class in sympy.logic.boolalg)": [[91, "sympy.logic.boolalg.Equivalent"]], "exclusive (class in sympy.logic.boolalg)": [[91, "sympy.logic.boolalg.Exclusive"]], "ite (class in sympy.logic.boolalg)": [[91, "sympy.logic.boolalg.ITE"]], "implies (class in sympy.logic.boolalg)": [[91, "sympy.logic.boolalg.Implies"]], "nand (class in sympy.logic.boolalg)": [[91, "sympy.logic.boolalg.Nand"]], "nor (class in sympy.logic.boolalg)": [[91, "sympy.logic.boolalg.Nor"]], "not (class in sympy.logic.boolalg)": [[91, "sympy.logic.boolalg.Not"]], "or (class in sympy.logic.boolalg)": [[91, "sympy.logic.boolalg.Or"]], "posform() (in module sympy.logic.boolalg)": [[91, "sympy.logic.boolalg.POSform"]], "sopform() (in module sympy.logic.boolalg)": [[91, "sympy.logic.boolalg.SOPform"]], "xnor (class in sympy.logic.boolalg)": [[91, "sympy.logic.boolalg.Xnor"]], "xor (class in sympy.logic.boolalg)": [[91, "sympy.logic.boolalg.Xor"]], "anf_coeffs() (in module sympy.logic.boolalg)": [[91, "sympy.logic.boolalg.anf_coeffs"]], "as_set() (sympy.logic.boolalg.boolean method)": [[91, "sympy.logic.boolalg.Boolean.as_set"]], "as_set() (sympy.logic.boolalg.booleanfalse method)": [[91, "sympy.logic.boolalg.BooleanFalse.as_set"]], "as_set() (sympy.logic.boolalg.booleantrue method)": [[91, "sympy.logic.boolalg.BooleanTrue.as_set"]], "bool_map() (in module sympy.logic.boolalg)": [[91, "sympy.logic.boolalg.bool_map"]], "bool_maxterm() (in module sympy.logic.boolalg)": [[91, "sympy.logic.boolalg.bool_maxterm"]], "bool_minterm() (in module sympy.logic.boolalg)": [[91, "sympy.logic.boolalg.bool_minterm"]], "bool_monomial() (in module sympy.logic.boolalg)": [[91, "sympy.logic.boolalg.bool_monomial"]], "distribute_and_over_or() (in module sympy.logic.boolalg)": [[91, "sympy.logic.boolalg.distribute_and_over_or"]], "distribute_or_over_and() (in module sympy.logic.boolalg)": [[91, "sympy.logic.boolalg.distribute_or_over_and"]], "distribute_xor_over_and() (in module sympy.logic.boolalg)": [[91, "sympy.logic.boolalg.distribute_xor_over_and"]], "eliminate_implications() (in module sympy.logic.boolalg)": [[91, "sympy.logic.boolalg.eliminate_implications"]], "equals() (sympy.logic.boolalg.boolean method)": [[91, "sympy.logic.boolalg.Boolean.equals"]], "gateinputcount() (in module sympy.logic.boolalg)": [[91, "sympy.logic.boolalg.gateinputcount"]], "integer_to_term() (in module sympy.logic.boolalg)": [[91, "sympy.logic.boolalg.integer_to_term"]], "is_anf() (in module sympy.logic.boolalg)": [[91, "sympy.logic.boolalg.is_anf"]], "is_cnf() (in module sympy.logic.boolalg)": [[91, "sympy.logic.boolalg.is_cnf"]], "is_dnf() (in module sympy.logic.boolalg)": [[91, "sympy.logic.boolalg.is_dnf"]], "is_nnf() (in module sympy.logic.boolalg)": [[91, "sympy.logic.boolalg.is_nnf"]], "satisfiable() (in module sympy.logic.inference)": [[91, "sympy.logic.inference.satisfiable"]], "simplify_logic() (in module sympy.logic.boolalg)": [[91, "sympy.logic.boolalg.simplify_logic"]], "sympy.logic": [[91, "module-sympy.logic"]], "sympy.logic.inference": [[91, "module-sympy.logic.inference"]], "term_to_integer() (in module sympy.logic.boolalg)": [[91, "sympy.logic.boolalg.term_to_integer"]], "to_anf() (in module sympy.logic.boolalg)": [[91, "sympy.logic.boolalg.to_anf"]], "to_cnf() (in module sympy.logic.boolalg)": [[91, "sympy.logic.boolalg.to_cnf"]], "to_dnf() (in module sympy.logic.boolalg)": [[91, "sympy.logic.boolalg.to_dnf"]], "to_int_repr() (in module sympy.logic.boolalg)": [[91, "sympy.logic.boolalg.to_int_repr"]], "to_nnf() (in module sympy.logic.boolalg)": [[91, "sympy.logic.boolalg.to_nnf"]], "truth_table() (in module sympy.logic.boolalg)": [[91, "sympy.logic.boolalg.truth_table"]], "c (sympy.matrices.common.matrixcommon property)": [[92, "sympy.matrices.common.MatrixCommon.C"]], "h (sympy.matrices.common.matrixcommon property)": [[92, "sympy.matrices.common.MatrixCommon.H"]], "matrixcommon (class in sympy.matrices.common)": [[92, "sympy.matrices.common.MatrixCommon"]], "matrixkind (class in sympy.matrices.common)": [[92, "sympy.matrices.common.MatrixKind"]], "t (sympy.matrices.common.matrixcommon property)": [[92, "sympy.matrices.common.MatrixCommon.T"]], "__abs__() (sympy.matrices.common.matrixcommon method)": [[92, "sympy.matrices.common.MatrixCommon.__abs__"]], "__add__() (sympy.matrices.common.matrixcommon method)": [[92, "sympy.matrices.common.MatrixCommon.__add__"]], "__getitem__() (sympy.matrices.common.matrixcommon method)": [[92, "sympy.matrices.common.MatrixCommon.__getitem__"]], "__len__() (sympy.matrices.common.matrixcommon method)": [[92, "sympy.matrices.common.MatrixCommon.__len__"]], "__mul__() (sympy.matrices.common.matrixcommon method)": [[92, "sympy.matrices.common.MatrixCommon.__mul__"]], "__pow__() (sympy.matrices.common.matrixcommon method)": [[92, "sympy.matrices.common.MatrixCommon.__pow__"]], "__weakref__ (sympy.matrices.common.matrixcommon attribute)": [[92, "sympy.matrices.common.MatrixCommon.__weakref__"]], "adjoint() (sympy.matrices.common.matrixcommon method)": [[92, "sympy.matrices.common.MatrixCommon.adjoint"]], "applyfunc() (sympy.matrices.common.matrixcommon method)": [[92, "sympy.matrices.common.MatrixCommon.applyfunc"]], "as_real_imag() (sympy.matrices.common.matrixcommon method)": [[92, "sympy.matrices.common.MatrixCommon.as_real_imag"]], "atoms() (sympy.matrices.common.matrixcommon method)": [[92, "sympy.matrices.common.MatrixCommon.atoms"]], "col() (sympy.matrices.common.matrixcommon method)": [[92, "sympy.matrices.common.MatrixCommon.col"]], "col_del() (sympy.matrices.common.matrixcommon method)": [[92, "sympy.matrices.common.MatrixCommon.col_del"]], "col_insert() (sympy.matrices.common.matrixcommon method)": [[92, "sympy.matrices.common.MatrixCommon.col_insert"]], "col_join() (sympy.matrices.common.matrixcommon method)": [[92, "sympy.matrices.common.MatrixCommon.col_join"]], "companion() (sympy.matrices.common.matrixcommon class method)": [[92, "sympy.matrices.common.MatrixCommon.companion"]], "conjugate() (sympy.matrices.common.matrixcommon method)": [[92, "sympy.matrices.common.MatrixCommon.conjugate"]], "diag() (sympy.matrices.common.matrixcommon class method)": [[92, "sympy.matrices.common.MatrixCommon.diag"]], "diagonal() (sympy.matrices.common.matrixcommon method)": [[92, "sympy.matrices.common.MatrixCommon.diagonal"]], "evalf() (sympy.matrices.common.matrixcommon method)": [[92, "sympy.matrices.common.MatrixCommon.evalf"]], "expand() (sympy.matrices.common.matrixcommon method)": [[92, "sympy.matrices.common.MatrixCommon.expand"]], "extract() (sympy.matrices.common.matrixcommon method)": [[92, "sympy.matrices.common.MatrixCommon.extract"]], "eye() (sympy.matrices.common.matrixcommon class method)": [[92, "sympy.matrices.common.MatrixCommon.eye"]], "free_symbols (sympy.matrices.common.matrixcommon property)": [[92, "sympy.matrices.common.MatrixCommon.free_symbols"]], "get_diag_blocks() (sympy.matrices.common.matrixcommon method)": [[92, "sympy.matrices.common.MatrixCommon.get_diag_blocks"]], "has() (sympy.matrices.common.matrixcommon method)": [[92, "sympy.matrices.common.MatrixCommon.has"]], "hstack() (sympy.matrices.common.matrixcommon class method)": [[92, "sympy.matrices.common.MatrixCommon.hstack"]], "is_anti_symmetric() (sympy.matrices.common.matrixcommon method)": [[92, "sympy.matrices.common.MatrixCommon.is_anti_symmetric"]], "is_diagonal() (sympy.matrices.common.matrixcommon method)": [[92, "sympy.matrices.common.MatrixCommon.is_diagonal"]], "is_hermitian (sympy.matrices.common.matrixcommon property)": [[92, "sympy.matrices.common.MatrixCommon.is_hermitian"]], "is_lower (sympy.matrices.common.matrixcommon property)": [[92, "sympy.matrices.common.MatrixCommon.is_lower"]], "is_lower_hessenberg (sympy.matrices.common.matrixcommon property)": [[92, "sympy.matrices.common.MatrixCommon.is_lower_hessenberg"]], "is_square (sympy.matrices.common.matrixcommon property)": [[92, "sympy.matrices.common.MatrixCommon.is_square"]], "is_strongly_diagonally_dominant (sympy.matrices.common.matrixcommon property)": [[92, "sympy.matrices.common.MatrixCommon.is_strongly_diagonally_dominant"]], "is_symbolic() (sympy.matrices.common.matrixcommon method)": [[92, "sympy.matrices.common.MatrixCommon.is_symbolic"]], "is_symmetric() (sympy.matrices.common.matrixcommon method)": [[92, "sympy.matrices.common.MatrixCommon.is_symmetric"]], "is_upper (sympy.matrices.common.matrixcommon property)": [[92, "sympy.matrices.common.MatrixCommon.is_upper"]], "is_upper_hessenberg (sympy.matrices.common.matrixcommon property)": [[92, "sympy.matrices.common.MatrixCommon.is_upper_hessenberg"]], "is_weakly_diagonally_dominant (sympy.matrices.common.matrixcommon property)": [[92, "sympy.matrices.common.MatrixCommon.is_weakly_diagonally_dominant"]], "is_zero_matrix (sympy.matrices.common.matrixcommon property)": [[92, "sympy.matrices.common.MatrixCommon.is_zero_matrix"]], "jordan_block() (sympy.matrices.common.matrixcommon class method)": [[92, "sympy.matrices.common.MatrixCommon.jordan_block"]], "lower_triangular() (sympy.matrices.common.matrixcommon method)": [[92, "sympy.matrices.common.MatrixCommon.lower_triangular"]], "multiply() (sympy.matrices.common.matrixcommon method)": [[92, "sympy.matrices.common.MatrixCommon.multiply"]], "multiply_elementwise() (sympy.matrices.common.matrixcommon method)": [[92, "sympy.matrices.common.MatrixCommon.multiply_elementwise"]], "n() (sympy.matrices.common.matrixcommon method)": [[92, "sympy.matrices.common.MatrixCommon.n"]], "ones() (sympy.matrices.common.matrixcommon class method)": [[92, "sympy.matrices.common.MatrixCommon.ones"]], "permute() (sympy.matrices.common.matrixcommon method)": [[92, "sympy.matrices.common.MatrixCommon.permute"]], "permute_cols() (sympy.matrices.common.matrixcommon method)": [[92, "sympy.matrices.common.MatrixCommon.permute_cols"]], "permute_rows() (sympy.matrices.common.matrixcommon method)": [[92, "sympy.matrices.common.MatrixCommon.permute_rows"]], "pow() (sympy.matrices.common.matrixcommon method)": [[92, "sympy.matrices.common.MatrixCommon.pow"]], "refine() (sympy.matrices.common.matrixcommon method)": [[92, "sympy.matrices.common.MatrixCommon.refine"]], "replace() (sympy.matrices.common.matrixcommon method)": [[92, "sympy.matrices.common.MatrixCommon.replace"]], "reshape() (sympy.matrices.common.matrixcommon method)": [[92, "sympy.matrices.common.MatrixCommon.reshape"]], "rmultiply() (sympy.matrices.common.matrixcommon method)": [[92, "sympy.matrices.common.MatrixCommon.rmultiply"]], "rot90() (sympy.matrices.common.matrixcommon method)": [[92, "sympy.matrices.common.MatrixCommon.rot90"]], "row() (sympy.matrices.common.matrixcommon method)": [[92, "sympy.matrices.common.MatrixCommon.row"]], "row_del() (sympy.matrices.common.matrixcommon method)": [[92, "sympy.matrices.common.MatrixCommon.row_del"]], "row_insert() (sympy.matrices.common.matrixcommon method)": [[92, "sympy.matrices.common.MatrixCommon.row_insert"]], "row_join() (sympy.matrices.common.matrixcommon method)": [[92, "sympy.matrices.common.MatrixCommon.row_join"]], "shape (sympy.matrices.common.matrixcommon property)": [[92, "sympy.matrices.common.MatrixCommon.shape"]], "simplify() (sympy.matrices.common.matrixcommon method)": [[92, "sympy.matrices.common.MatrixCommon.simplify"]], "subs() (sympy.matrices.common.matrixcommon method)": [[92, "sympy.matrices.common.MatrixCommon.subs"]], "sympy.matrices.common": [[92, "module-sympy.matrices.common"]], "todod() (sympy.matrices.common.matrixcommon method)": [[92, "sympy.matrices.common.MatrixCommon.todod"]], "todok() (sympy.matrices.common.matrixcommon method)": [[92, "sympy.matrices.common.MatrixCommon.todok"]], "tolist() (sympy.matrices.common.matrixcommon method)": [[92, "sympy.matrices.common.MatrixCommon.tolist"]], "trace() (sympy.matrices.common.matrixcommon method)": [[92, "sympy.matrices.common.MatrixCommon.trace"]], "transpose() (sympy.matrices.common.matrixcommon method)": [[92, "sympy.matrices.common.MatrixCommon.transpose"]], "upper_triangular() (sympy.matrices.common.matrixcommon method)": [[92, "sympy.matrices.common.MatrixCommon.upper_triangular"]], "values() (sympy.matrices.common.matrixcommon method)": [[92, "sympy.matrices.common.MatrixCommon.values"]], "vec() (sympy.matrices.common.matrixcommon method)": [[92, "sympy.matrices.common.MatrixCommon.vec"]], "vech() (sympy.matrices.common.matrixcommon method)": [[92, "sympy.matrices.common.MatrixCommon.vech"]], "vstack() (sympy.matrices.common.matrixcommon class method)": [[92, "sympy.matrices.common.MatrixCommon.vstack"]], "wilkinson() (sympy.matrices.common.matrixcommon class method)": [[92, "sympy.matrices.common.MatrixCommon.wilkinson"]], "xreplace() (sympy.matrices.common.matrixcommon method)": [[92, "sympy.matrices.common.MatrixCommon.xreplace"]], "zeros() (sympy.matrices.common.matrixcommon class method)": [[92, "sympy.matrices.common.MatrixCommon.zeros"]], "densematrix (class in sympy.matrices.dense)": [[93, "sympy.matrices.dense.DenseMatrix"]], "ldldecomposition() (sympy.matrices.dense.densematrix method)": [[93, "sympy.matrices.dense.DenseMatrix.LDLdecomposition"]], "matrix (in module sympy.matrices.dense)": [[93, "sympy.matrices.dense.Matrix"]], "mutabledensematrix (class in sympy.matrices.dense)": [[93, "sympy.matrices.dense.MutableDenseMatrix"]], "as_immutable() (sympy.matrices.dense.densematrix method)": [[93, "sympy.matrices.dense.DenseMatrix.as_immutable"]], "as_mutable() (sympy.matrices.dense.densematrix method)": [[93, "sympy.matrices.dense.DenseMatrix.as_mutable"]], "cholesky() (sympy.matrices.dense.densematrix method)": [[93, "sympy.matrices.dense.DenseMatrix.cholesky"]], "lower_triangular_solve() (sympy.matrices.dense.densematrix method)": [[93, "sympy.matrices.dense.DenseMatrix.lower_triangular_solve"]], "simplify() (sympy.matrices.dense.mutabledensematrix method)": [[93, "sympy.matrices.dense.MutableDenseMatrix.simplify"]], "upper_triangular_solve() (sympy.matrices.dense.densematrix method)": [[93, "sympy.matrices.dense.DenseMatrix.upper_triangular_solve"]], "blockdiagmatrix (class in sympy.matrices.expressions.blockmatrix)": [[94, "sympy.matrices.expressions.blockmatrix.BlockDiagMatrix"]], "blockmatrix (class in sympy.matrices.expressions.blockmatrix)": [[94, "sympy.matrices.expressions.blockmatrix.BlockMatrix"]], "companionmatrix (class in sympy.matrices.expressions)": [[94, "sympy.matrices.expressions.CompanionMatrix"]], "functionmatrix (class in sympy.matrices.expressions)": [[94, "sympy.matrices.expressions.FunctionMatrix"]], "hadamardpower (class in sympy.matrices.expressions)": [[94, "sympy.matrices.expressions.HadamardPower"]], "hadamardproduct (class in sympy.matrices.expressions)": [[94, "sympy.matrices.expressions.HadamardProduct"]], "identity (class in sympy.matrices.expressions)": [[94, "sympy.matrices.expressions.Identity"]], "inverse (class in sympy.matrices.expressions)": [[94, "sympy.matrices.expressions.Inverse"]], "ldudecomposition() (sympy.matrices.expressions.blockmatrix.blockmatrix method)": [[94, "sympy.matrices.expressions.blockmatrix.BlockMatrix.LDUdecomposition"]], "ludecomposition() (sympy.matrices.expressions.blockmatrix.blockmatrix method)": [[94, "sympy.matrices.expressions.blockmatrix.BlockMatrix.LUdecomposition"]], "matadd (class in sympy.matrices.expressions)": [[94, "sympy.matrices.expressions.MatAdd"]], "matmul (class in sympy.matrices.expressions)": [[94, "sympy.matrices.expressions.MatMul"]], "matpow (class in sympy.matrices.expressions)": [[94, "sympy.matrices.expressions.MatPow"]], "matrixexpr (class in sympy.matrices.expressions)": [[94, "sympy.matrices.expressions.MatrixExpr"]], "matrixpermute (class in sympy.matrices.expressions)": [[94, "sympy.matrices.expressions.MatrixPermute"]], "matrixset (class in sympy.matrices.expressions)": [[94, "sympy.matrices.expressions.MatrixSet"]], "matrixsymbol (class in sympy.matrices.expressions)": [[94, "sympy.matrices.expressions.MatrixSymbol"]], "permutationmatrix (class in sympy.matrices.expressions)": [[94, "sympy.matrices.expressions.PermutationMatrix"]], "t (sympy.matrices.expressions.matrixexpr property)": [[94, "sympy.matrices.expressions.MatrixExpr.T"]], "trace (class in sympy.matrices.expressions)": [[94, "sympy.matrices.expressions.Trace"]], "transpose (class in sympy.matrices.expressions)": [[94, "sympy.matrices.expressions.Transpose"]], "udldecomposition() (sympy.matrices.expressions.blockmatrix.blockmatrix method)": [[94, "sympy.matrices.expressions.blockmatrix.BlockMatrix.UDLdecomposition"]], "zeromatrix (class in sympy.matrices.expressions)": [[94, "sympy.matrices.expressions.ZeroMatrix"]], "as_coeff_mul() (sympy.matrices.expressions.matrixexpr method)": [[94, "sympy.matrices.expressions.MatrixExpr.as_coeff_Mul"]], "as_explicit() (sympy.matrices.expressions.matrixexpr method)": [[94, "sympy.matrices.expressions.MatrixExpr.as_explicit"]], "as_mutable() (sympy.matrices.expressions.matrixexpr method)": [[94, "sympy.matrices.expressions.MatrixExpr.as_mutable"]], "block_collapse() (in module sympy.matrices.expressions.blockmatrix)": [[94, "sympy.matrices.expressions.blockmatrix.block_collapse"]], "equals() (sympy.matrices.expressions.matrixexpr method)": [[94, "sympy.matrices.expressions.MatrixExpr.equals"]], "from_index_summation() (sympy.matrices.expressions.matrixexpr static method)": [[94, "sympy.matrices.expressions.MatrixExpr.from_index_summation"]], "get_diag_blocks() (sympy.matrices.expressions.blockmatrix.blockdiagmatrix method)": [[94, "sympy.matrices.expressions.blockmatrix.BlockDiagMatrix.get_diag_blocks"]], "hadamard_product() (in module sympy.matrices.expressions)": [[94, "sympy.matrices.expressions.hadamard_product"]], "schur() (sympy.matrices.expressions.blockmatrix.blockmatrix method)": [[94, "sympy.matrices.expressions.blockmatrix.BlockMatrix.schur"]], "sympy.matrices.expressions": [[94, "module-sympy.matrices.expressions"]], "sympy.matrices.expressions.blockmatrix": [[94, "module-sympy.matrices.expressions.blockmatrix"]], "transpose() (sympy.matrices.expressions.blockmatrix.blockmatrix method)": [[94, "sympy.matrices.expressions.blockmatrix.BlockMatrix.transpose"]], "immutabledensematrix (class in sympy.matrices.immutable)": [[95, "sympy.matrices.immutable.ImmutableDenseMatrix"]], "immutablematrix (in module sympy.matrices.immutable)": [[95, "sympy.matrices.immutable.ImmutableMatrix"]], "sympy.matrices.immutable": [[95, "module-sympy.matrices.immutable"]], "sympy.matrices": [[96, "module-sympy.matrices"]], "d (sympy.matrices.matrices.matrixbase property)": [[97, "sympy.matrices.matrices.MatrixBase.D"]], "gramschmidt() (in module sympy.matrices.dense)": [[97, "sympy.matrices.dense.GramSchmidt"]], "ldldecomposition() (sympy.matrices.matrices.matrixbase method)": [[97, "sympy.matrices.matrices.MatrixBase.LDLdecomposition"]], "ldlsolve() (sympy.matrices.matrices.matrixbase method)": [[97, "sympy.matrices.matrices.MatrixBase.LDLsolve"]], "ludecomposition() (sympy.matrices.matrices.matrixbase method)": [[97, "sympy.matrices.matrices.MatrixBase.LUdecomposition"]], "ludecompositionff() (sympy.matrices.matrices.matrixbase method)": [[97, "sympy.matrices.matrices.MatrixBase.LUdecompositionFF"]], "ludecomposition_simple() (sympy.matrices.matrices.matrixbase method)": [[97, "sympy.matrices.matrices.MatrixBase.LUdecomposition_Simple"]], "lusolve() (sympy.matrices.matrices.matrixbase method)": [[97, "sympy.matrices.matrices.MatrixBase.LUsolve"]], "matrixbase (class in sympy.matrices.matrices)": [[97, "sympy.matrices.matrices.MatrixBase"]], "matrixcalculus (class in sympy.matrices.matrices)": [[97, "sympy.matrices.matrices.MatrixCalculus"]], "matrixdeterminant (class in sympy.matrices.matrices)": [[97, "sympy.matrices.matrices.MatrixDeterminant"]], "matrixeigen (class in sympy.matrices.matrices)": [[97, "sympy.matrices.matrices.MatrixEigen"]], "matrixerror (class in sympy.matrices.matrices)": [[97, "sympy.matrices.matrices.MatrixError"]], "matrixreductions (class in sympy.matrices.matrices)": [[97, "sympy.matrices.matrices.MatrixReductions"]], "matrixsubspaces (class in sympy.matrices.matrices)": [[97, "sympy.matrices.matrices.MatrixSubspaces"]], "nonsquarematrixerror (class in sympy.matrices.matrices)": [[97, "sympy.matrices.matrices.NonSquareMatrixError"]], "qrdecomposition() (sympy.matrices.matrices.matrixbase method)": [[97, "sympy.matrices.matrices.MatrixBase.QRdecomposition"]], "qrsolve() (sympy.matrices.matrices.matrixbase method)": [[97, "sympy.matrices.matrices.MatrixBase.QRsolve"]], "shapeerror (class in sympy.matrices.matrices)": [[97, "sympy.matrices.matrices.ShapeError"]], "a2idx() (in module sympy.matrices.matrices)": [[97, "sympy.matrices.matrices.a2idx"]], "add() (sympy.matrices.matrices.matrixbase method)": [[97, "sympy.matrices.matrices.MatrixBase.add"]], "adjugate() (sympy.matrices.matrices.matrixdeterminant method)": [[97, "sympy.matrices.matrices.MatrixDeterminant.adjugate"]], "analytic_func() (sympy.matrices.matrices.matrixbase method)": [[97, "sympy.matrices.matrices.MatrixBase.analytic_func"]], "bidiagonal_decomposition() (sympy.matrices.matrices.matrixeigen method)": [[97, "sympy.matrices.matrices.MatrixEigen.bidiagonal_decomposition"]], "bidiagonalize() (sympy.matrices.matrices.matrixeigen method)": [[97, "sympy.matrices.matrices.MatrixEigen.bidiagonalize"]], "casoratian() (in module sympy.matrices.dense)": [[97, "sympy.matrices.dense.casoratian"]], "charpoly() (sympy.matrices.matrices.matrixdeterminant method)": [[97, "sympy.matrices.matrices.MatrixDeterminant.charpoly"]], "cholesky() (sympy.matrices.matrices.matrixbase method)": [[97, "sympy.matrices.matrices.MatrixBase.cholesky"]], "cholesky_solve() (sympy.matrices.matrices.matrixbase method)": [[97, "sympy.matrices.matrices.MatrixBase.cholesky_solve"]], "cofactor() (sympy.matrices.matrices.matrixdeterminant method)": [[97, "sympy.matrices.matrices.MatrixDeterminant.cofactor"]], "cofactor_matrix() (sympy.matrices.matrices.matrixdeterminant method)": [[97, "sympy.matrices.matrices.MatrixDeterminant.cofactor_matrix"]], "columnspace() (sympy.matrices.matrices.matrixsubspaces method)": [[97, "sympy.matrices.matrices.MatrixSubspaces.columnspace"]], "condition_number() (sympy.matrices.matrices.matrixbase method)": [[97, "sympy.matrices.matrices.MatrixBase.condition_number"]], "connected_components() (sympy.matrices.matrices.matrixbase method)": [[97, "sympy.matrices.matrices.MatrixBase.connected_components"]], "connected_components_decomposition() (sympy.matrices.matrices.matrixbase method)": [[97, "sympy.matrices.matrices.MatrixBase.connected_components_decomposition"]], "copy() (sympy.matrices.matrices.matrixbase method)": [[97, "sympy.matrices.matrices.MatrixBase.copy"]], "cross() (sympy.matrices.matrices.matrixbase method)": [[97, "sympy.matrices.matrices.MatrixBase.cross"]], "det() (sympy.matrices.matrices.matrixdeterminant method)": [[97, "sympy.matrices.matrices.MatrixDeterminant.det"]], "diag() (in module sympy.matrices.dense)": [[97, "sympy.matrices.dense.diag"]], "diagonal_solve() (sympy.matrices.matrices.matrixbase method)": [[97, "sympy.matrices.matrices.MatrixBase.diagonal_solve"]], "diagonalize() (sympy.matrices.matrices.matrixeigen method)": [[97, "sympy.matrices.matrices.MatrixEigen.diagonalize"]], "diff() (sympy.matrices.matrices.matrixcalculus method)": [[97, "sympy.matrices.matrices.MatrixCalculus.diff"]], "dot() (sympy.matrices.matrices.matrixbase method)": [[97, "sympy.matrices.matrices.MatrixBase.dot"]], "dual() (sympy.matrices.matrices.matrixbase method)": [[97, "sympy.matrices.matrices.MatrixBase.dual"]], "echelon_form() (sympy.matrices.matrices.matrixreductions method)": [[97, "sympy.matrices.matrices.MatrixReductions.echelon_form"]], "eigenvals() (sympy.matrices.matrices.matrixeigen method)": [[97, "sympy.matrices.matrices.MatrixEigen.eigenvals"]], "eigenvects() (sympy.matrices.matrices.matrixeigen method)": [[97, "sympy.matrices.matrices.MatrixEigen.eigenvects"]], "elementary_col_op() (sympy.matrices.matrices.matrixreductions method)": [[97, "sympy.matrices.matrices.MatrixReductions.elementary_col_op"]], "elementary_row_op() (sympy.matrices.matrices.matrixreductions method)": [[97, "sympy.matrices.matrices.MatrixReductions.elementary_row_op"]], "exp() (sympy.matrices.matrices.matrixbase method)": [[97, "sympy.matrices.matrices.MatrixBase.exp"]], "eye() (in module sympy.matrices.dense)": [[97, "sympy.matrices.dense.eye"]], "gauss_jordan_solve() (sympy.matrices.matrices.matrixbase method)": [[97, "sympy.matrices.matrices.MatrixBase.gauss_jordan_solve"]], "hessian() (in module sympy.matrices.dense)": [[97, "sympy.matrices.dense.hessian"]], "integrate() (sympy.matrices.matrices.matrixcalculus method)": [[97, "sympy.matrices.matrices.MatrixCalculus.integrate"]], "inv() (sympy.matrices.matrices.matrixbase method)": [[97, "sympy.matrices.matrices.MatrixBase.inv"]], "inv_mod() (sympy.matrices.matrices.matrixbase method)": [[97, "sympy.matrices.matrices.MatrixBase.inv_mod"]], "inverse_adj() (sympy.matrices.matrices.matrixbase method)": [[97, "sympy.matrices.matrices.MatrixBase.inverse_ADJ"]], "inverse_block() (sympy.matrices.matrices.matrixbase method)": [[97, "sympy.matrices.matrices.MatrixBase.inverse_BLOCK"]], "inverse_ch() (sympy.matrices.matrices.matrixbase method)": [[97, "sympy.matrices.matrices.MatrixBase.inverse_CH"]], "inverse_ge() (sympy.matrices.matrices.matrixbase method)": [[97, "sympy.matrices.matrices.MatrixBase.inverse_GE"]], "inverse_ldl() (sympy.matrices.matrices.matrixbase method)": [[97, "sympy.matrices.matrices.MatrixBase.inverse_LDL"]], "inverse_lu() (sympy.matrices.matrices.matrixbase method)": [[97, "sympy.matrices.matrices.MatrixBase.inverse_LU"]], "inverse_qr() (sympy.matrices.matrices.matrixbase method)": [[97, "sympy.matrices.matrices.MatrixBase.inverse_QR"]], "irregular() (sympy.matrices.matrices.matrixbase class method)": [[97, "sympy.matrices.matrices.MatrixBase.irregular"]], "is_diagonalizable() (sympy.matrices.matrices.matrixeigen method)": [[97, "sympy.matrices.matrices.MatrixEigen.is_diagonalizable"]], "is_echelon (sympy.matrices.matrices.matrixreductions property)": [[97, "sympy.matrices.matrices.MatrixReductions.is_echelon"]], "is_indefinite (sympy.matrices.matrices.matrixeigen property)": [[97, "sympy.matrices.matrices.MatrixEigen.is_indefinite"]], "is_negative_definite (sympy.matrices.matrices.matrixeigen property)": [[97, "sympy.matrices.matrices.MatrixEigen.is_negative_definite"]], "is_negative_semidefinite (sympy.matrices.matrices.matrixeigen property)": [[97, "sympy.matrices.matrices.MatrixEigen.is_negative_semidefinite"]], "is_nilpotent() (sympy.matrices.matrices.matrixbase method)": [[97, "sympy.matrices.matrices.MatrixBase.is_nilpotent"]], "is_positive_definite (sympy.matrices.matrices.matrixeigen property)": [[97, "sympy.matrices.matrices.MatrixEigen.is_positive_definite"]], "is_positive_semidefinite (sympy.matrices.matrices.matrixeigen property)": [[97, "sympy.matrices.matrices.MatrixEigen.is_positive_semidefinite"]], "jacobian() (sympy.matrices.matrices.matrixcalculus method)": [[97, "sympy.matrices.matrices.MatrixCalculus.jacobian"]], "jordan_cell() (in module sympy.matrices.dense)": [[97, "sympy.matrices.dense.jordan_cell"]], "jordan_form() (sympy.matrices.matrices.matrixeigen method)": [[97, "sympy.matrices.matrices.MatrixEigen.jordan_form"]], "key2bounds() (sympy.matrices.matrices.matrixbase method)": [[97, "sympy.matrices.matrices.MatrixBase.key2bounds"]], "key2ij() (sympy.matrices.matrices.matrixbase method)": [[97, "sympy.matrices.matrices.MatrixBase.key2ij"]], "left_eigenvects() (sympy.matrices.matrices.matrixeigen method)": [[97, "sympy.matrices.matrices.MatrixEigen.left_eigenvects"]], "limit() (sympy.matrices.matrices.matrixcalculus method)": [[97, "sympy.matrices.matrices.MatrixCalculus.limit"]], "list2numpy() (in module sympy.matrices.dense)": [[97, "sympy.matrices.dense.list2numpy"]], "log() (sympy.matrices.matrices.matrixbase method)": [[97, "sympy.matrices.matrices.MatrixBase.log"]], "lower_triangular_solve() (sympy.matrices.matrices.matrixbase method)": [[97, "sympy.matrices.matrices.MatrixBase.lower_triangular_solve"]], "matrix2numpy() (in module sympy.matrices.dense)": [[97, "sympy.matrices.dense.matrix2numpy"]], "matrix_multiply_elementwise() (in module sympy.matrices.dense)": [[97, "sympy.matrices.dense.matrix_multiply_elementwise"]], "minor() (sympy.matrices.matrices.matrixdeterminant method)": [[97, "sympy.matrices.matrices.MatrixDeterminant.minor"]], "minor_submatrix() (sympy.matrices.matrices.matrixdeterminant method)": [[97, "sympy.matrices.matrices.MatrixDeterminant.minor_submatrix"]], "norm() (sympy.matrices.matrices.matrixbase method)": [[97, "sympy.matrices.matrices.MatrixBase.norm"]], "normalized() (sympy.matrices.matrices.matrixbase method)": [[97, "sympy.matrices.matrices.MatrixBase.normalized"]], "nullspace() (sympy.matrices.matrices.matrixsubspaces method)": [[97, "sympy.matrices.matrices.MatrixSubspaces.nullspace"]], "ones() (in module sympy.matrices.dense)": [[97, "sympy.matrices.dense.ones"]], "orthogonalize() (sympy.matrices.matrices.matrixsubspaces class method)": [[97, "sympy.matrices.matrices.MatrixSubspaces.orthogonalize"]], "per() (sympy.matrices.matrices.matrixdeterminant method)": [[97, "sympy.matrices.matrices.MatrixDeterminant.per"]], "pinv() (sympy.matrices.matrices.matrixbase method)": [[97, "sympy.matrices.matrices.MatrixBase.pinv"]], "pinv_solve() (sympy.matrices.matrices.matrixbase method)": [[97, "sympy.matrices.matrices.MatrixBase.pinv_solve"]], "print_nonzero() (sympy.matrices.matrices.matrixbase method)": [[97, "sympy.matrices.matrices.MatrixBase.print_nonzero"]], "project() (sympy.matrices.matrices.matrixbase method)": [[97, "sympy.matrices.matrices.MatrixBase.project"]], "randmatrix() (in module sympy.matrices.dense)": [[97, "sympy.matrices.dense.randMatrix"]], "rank() (sympy.matrices.matrices.matrixreductions method)": [[97, "sympy.matrices.matrices.MatrixReductions.rank"]], "rank_decomposition() (sympy.matrices.matrices.matrixbase method)": [[97, "sympy.matrices.matrices.MatrixBase.rank_decomposition"]], "rot_axis1() (in module sympy.matrices.dense)": [[97, "sympy.matrices.dense.rot_axis1"]], "rot_axis2() (in module sympy.matrices.dense)": [[97, "sympy.matrices.dense.rot_axis2"]], "rot_axis3() (in module sympy.matrices.dense)": [[97, "sympy.matrices.dense.rot_axis3"]], "rowspace() (sympy.matrices.matrices.matrixsubspaces method)": [[97, "sympy.matrices.matrices.MatrixSubspaces.rowspace"]], "rref() (sympy.matrices.matrices.matrixreductions method)": [[97, "sympy.matrices.matrices.MatrixReductions.rref"]], "singular_value_decomposition() (sympy.matrices.matrices.matrixbase method)": [[97, "sympy.matrices.matrices.MatrixBase.singular_value_decomposition"]], "singular_values() (sympy.matrices.matrices.matrixeigen method)": [[97, "sympy.matrices.matrices.MatrixEigen.singular_values"]], "solve() (sympy.matrices.matrices.matrixbase method)": [[97, "sympy.matrices.matrices.MatrixBase.solve"]], "solve_least_squares() (sympy.matrices.matrices.matrixbase method)": [[97, "sympy.matrices.matrices.MatrixBase.solve_least_squares"]], "strongly_connected_components() (sympy.matrices.matrices.matrixbase method)": [[97, "sympy.matrices.matrices.MatrixBase.strongly_connected_components"]], "strongly_connected_components_decomposition() (sympy.matrices.matrices.matrixbase method)": [[97, "sympy.matrices.matrices.MatrixBase.strongly_connected_components_decomposition"]], "symarray() (in module sympy.matrices.dense)": [[97, "sympy.matrices.dense.symarray"]], "sympy.matrices.matrices": [[97, "module-sympy.matrices.matrices"]], "table() (sympy.matrices.matrices.matrixbase method)": [[97, "sympy.matrices.matrices.MatrixBase.table"]], "upper_hessenberg_decomposition() (sympy.matrices.matrices.matrixbase method)": [[97, "sympy.matrices.matrices.MatrixBase.upper_hessenberg_decomposition"]], "upper_triangular_solve() (sympy.matrices.matrices.matrixbase method)": [[97, "sympy.matrices.matrices.MatrixBase.upper_triangular_solve"]], "wronskian() (in module sympy.matrices.dense)": [[97, "sympy.matrices.dense.wronskian"]], "zeros() (in module sympy.matrices.dense)": [[97, "sympy.matrices.dense.zeros"]], "hermite_normal_form() (in module sympy.matrices.normalforms)": [[98, "sympy.matrices.normalforms.hermite_normal_form"]], "smith_normal_form() (in module sympy.matrices.normalforms)": [[98, "sympy.matrices.normalforms.smith_normal_form"]], "immutablesparsematrix (class in sympy.matrices.immutable)": [[99, "sympy.matrices.immutable.ImmutableSparseMatrix"]], "mutablesparsematrix (class in sympy.matrices.sparse)": [[99, "sympy.matrices.sparse.MutableSparseMatrix"]], "sparsematrix (in module sympy.matrices.sparse)": [[99, "sympy.matrices.sparse.SparseMatrix"]], "sympy.matrices.sparse": [[99, "module-sympy.matrices.sparse"]], "_csrtodok() (in module sympy.matrices.sparsetools)": [[100, "sympy.matrices.sparsetools._csrtodok"]], "_doktocsr() (in module sympy.matrices.sparsetools)": [[100, "sympy.matrices.sparsetools._doktocsr"]], "banded() (in module sympy.matrices.sparsetools)": [[100, "sympy.matrices.sparsetools.banded"]], "sympy.matrices.sparsetools": [[100, "module-sympy.matrices.sparsetools"]], "sieve (class in sympy.ntheory.generate)": [[101, "sympy.ntheory.generate.Sieve"]], "abundance() (in module sympy.ntheory.factor_)": [[101, "sympy.ntheory.factor_.abundance"]], "antidivisor_count() (in module sympy.ntheory.factor_)": [[101, "sympy.ntheory.factor_.antidivisor_count"]], "antidivisors() (in module sympy.ntheory.factor_)": [[101, "sympy.ntheory.factor_.antidivisors"]], "binomial_coefficients() (in module sympy.ntheory.multinomial)": [[101, "sympy.ntheory.multinomial.binomial_coefficients"]], "binomial_coefficients_list() (in module sympy.ntheory.multinomial)": [[101, "sympy.ntheory.multinomial.binomial_coefficients_list"]], "composite() (in module sympy.ntheory.generate)": [[101, "sympy.ntheory.generate.composite"]], "compositepi() (in module sympy.ntheory.generate)": [[101, "sympy.ntheory.generate.compositepi"]], "continued_fraction() (in module sympy.ntheory.continued_fraction)": [[101, "sympy.ntheory.continued_fraction.continued_fraction"]], "continued_fraction_convergents() (in module sympy.ntheory.continued_fraction)": [[101, "sympy.ntheory.continued_fraction.continued_fraction_convergents"]], "continued_fraction_iterator() (in module sympy.ntheory.continued_fraction)": [[101, "sympy.ntheory.continued_fraction.continued_fraction_iterator"]], "continued_fraction_periodic() (in module sympy.ntheory.continued_fraction)": [[101, "sympy.ntheory.continued_fraction.continued_fraction_periodic"]], "continued_fraction_reduce() (in module sympy.ntheory.continued_fraction)": [[101, "sympy.ntheory.continued_fraction.continued_fraction_reduce"]], "core() (in module sympy.ntheory.factor_)": [[101, "sympy.ntheory.factor_.core"]], "count_digits() (in module sympy.ntheory.digits)": [[101, "sympy.ntheory.digits.count_digits"]], "crt() (in module sympy.ntheory.modular)": [[101, "sympy.ntheory.modular.crt"]], "crt1() (in module sympy.ntheory.modular)": [[101, "sympy.ntheory.modular.crt1"]], "crt2() (in module sympy.ntheory.modular)": [[101, "sympy.ntheory.modular.crt2"]], "cycle_length() (in module sympy.ntheory.generate)": [[101, "sympy.ntheory.generate.cycle_length"]], "digits() (in module sympy.ntheory.digits)": [[101, "sympy.ntheory.digits.digits"]], "digits() (in module sympy.ntheory.factor_)": [[101, "sympy.ntheory.factor_.digits"]], "discrete_log() (in module sympy.ntheory.residue_ntheory)": [[101, "sympy.ntheory.residue_ntheory.discrete_log"]], "divisor_count() (in module sympy.ntheory.factor_)": [[101, "sympy.ntheory.factor_.divisor_count"]], "divisor_sigma (class in sympy.ntheory.factor_)": [[101, "sympy.ntheory.factor_.divisor_sigma"]], "divisors() (in module sympy.ntheory.factor_)": [[101, "sympy.ntheory.factor_.divisors"]], "ecm() (in module sympy.ntheory.ecm)": [[101, "sympy.ntheory.ecm.ecm"]], "egyptian_fraction() (in module sympy.ntheory.egyptian_fraction)": [[101, "sympy.ntheory.egyptian_fraction.egyptian_fraction"]], "extend() (sympy.ntheory.generate.sieve method)": [[101, "sympy.ntheory.generate.Sieve.extend"]], "extend_to_no() (sympy.ntheory.generate.sieve method)": [[101, "sympy.ntheory.generate.Sieve.extend_to_no"]], "factorint() (in module sympy.ntheory.factor_)": [[101, "sympy.ntheory.factor_.factorint"]], "factorrat() (in module sympy.ntheory.factor_)": [[101, "sympy.ntheory.factor_.factorrat"]], "is_abundant() (in module sympy.ntheory.factor_)": [[101, "sympy.ntheory.factor_.is_abundant"]], "is_amicable() (in module sympy.ntheory.factor_)": [[101, "sympy.ntheory.factor_.is_amicable"]], "is_deficient() (in module sympy.ntheory.factor_)": [[101, "sympy.ntheory.factor_.is_deficient"]], "is_euler_pseudoprime() (in module sympy.ntheory.primetest)": [[101, "sympy.ntheory.primetest.is_euler_pseudoprime"]], "is_extra_strong_lucas_prp() (in module sympy.ntheory.primetest)": [[101, "sympy.ntheory.primetest.is_extra_strong_lucas_prp"]], "is_gaussian_prime() (in module sympy.ntheory.primetest)": [[101, "sympy.ntheory.primetest.is_gaussian_prime"]], "is_lucas_prp() (in module sympy.ntheory.primetest)": [[101, "sympy.ntheory.primetest.is_lucas_prp"]], "is_mersenne_prime() (in module sympy.ntheory.factor_)": [[101, "sympy.ntheory.factor_.is_mersenne_prime"]], "is_nthpow_residue() (in module sympy.ntheory.residue_ntheory)": [[101, "sympy.ntheory.residue_ntheory.is_nthpow_residue"]], "is_palindromic() (in module sympy.ntheory.digits)": [[101, "sympy.ntheory.digits.is_palindromic"]], "is_perfect() (in module sympy.ntheory.factor_)": [[101, "sympy.ntheory.factor_.is_perfect"]], "is_primitive_root() (in module sympy.ntheory.residue_ntheory)": [[101, "sympy.ntheory.residue_ntheory.is_primitive_root"]], "is_quad_residue() (in module sympy.ntheory.residue_ntheory)": [[101, "sympy.ntheory.residue_ntheory.is_quad_residue"]], "is_square() (in module sympy.ntheory.primetest)": [[101, "sympy.ntheory.primetest.is_square"]], "is_strong_lucas_prp() (in module sympy.ntheory.primetest)": [[101, "sympy.ntheory.primetest.is_strong_lucas_prp"]], "isprime() (in module sympy.ntheory.primetest)": [[101, "sympy.ntheory.primetest.isprime"]], "jacobi_symbol() (in module sympy.ntheory.residue_ntheory)": [[101, "sympy.ntheory.residue_ntheory.jacobi_symbol"]], "legendre_symbol() (in module sympy.ntheory.residue_ntheory)": [[101, "sympy.ntheory.residue_ntheory.legendre_symbol"]], "mersenne_prime_exponent() (in module sympy.ntheory.factor_)": [[101, "sympy.ntheory.factor_.mersenne_prime_exponent"]], "mobius (class in sympy.ntheory)": [[101, "sympy.ntheory.mobius"]], "mobiusrange() (sympy.ntheory.generate.sieve method)": [[101, "sympy.ntheory.generate.Sieve.mobiusrange"]], "mr() (in module sympy.ntheory.primetest)": [[101, "sympy.ntheory.primetest.mr"]], "multinomial_coefficients() (in module sympy.ntheory.multinomial)": [[101, "sympy.ntheory.multinomial.multinomial_coefficients"]], "multinomial_coefficients_iterator() (in module sympy.ntheory.multinomial)": [[101, "sympy.ntheory.multinomial.multinomial_coefficients_iterator"]], "multiplicity() (in module sympy.ntheory.factor_)": [[101, "sympy.ntheory.factor_.multiplicity"]], "n_order() (in module sympy.ntheory.residue_ntheory)": [[101, "sympy.ntheory.residue_ntheory.n_order"]], "nextprime() (in module sympy.ntheory.generate)": [[101, "sympy.ntheory.generate.nextprime"]], "npartitions() (in module sympy.ntheory.partitions_)": [[101, "sympy.ntheory.partitions_.npartitions"]], "nthroot_mod() (in module sympy.ntheory.residue_ntheory)": [[101, "sympy.ntheory.residue_ntheory.nthroot_mod"]], "perfect_power() (in module sympy.ntheory.factor_)": [[101, "sympy.ntheory.factor_.perfect_power"]], "pi_hex_digits() (in module sympy.ntheory.bbp_pi)": [[101, "sympy.ntheory.bbp_pi.pi_hex_digits"]], "pollard_pm1() (in module sympy.ntheory.factor_)": [[101, "sympy.ntheory.factor_.pollard_pm1"]], "pollard_rho() (in module sympy.ntheory.factor_)": [[101, "sympy.ntheory.factor_.pollard_rho"]], "prevprime() (in module sympy.ntheory.generate)": [[101, "sympy.ntheory.generate.prevprime"]], "prime() (in module sympy.ntheory.generate)": [[101, "sympy.ntheory.generate.prime"]], "primefactors() (in module sympy.ntheory.factor_)": [[101, "sympy.ntheory.factor_.primefactors"]], "primenu (class in sympy.ntheory.factor_)": [[101, "sympy.ntheory.factor_.primenu"]], "primeomega (class in sympy.ntheory.factor_)": [[101, "sympy.ntheory.factor_.primeomega"]], "primepi() (in module sympy.ntheory.generate)": [[101, "sympy.ntheory.generate.primepi"]], "primerange() (in module sympy.ntheory.generate)": [[101, "sympy.ntheory.generate.primerange"]], "primerange() (sympy.ntheory.generate.sieve method)": [[101, "sympy.ntheory.generate.Sieve.primerange"]], "primitive_root() (in module sympy.ntheory.residue_ntheory)": [[101, "sympy.ntheory.residue_ntheory.primitive_root"]], "primorial() (in module sympy.ntheory.generate)": [[101, "sympy.ntheory.generate.primorial"]], "proper_divisor_count() (in module sympy.ntheory.factor_)": [[101, "sympy.ntheory.factor_.proper_divisor_count"]], "proper_divisors() (in module sympy.ntheory.factor_)": [[101, "sympy.ntheory.factor_.proper_divisors"]], "qs() (in module sympy.ntheory.qs)": [[101, "sympy.ntheory.qs.qs"]], "quadratic_residues() (in module sympy.ntheory.residue_ntheory)": [[101, "sympy.ntheory.residue_ntheory.quadratic_residues"]], "randprime() (in module sympy.ntheory.generate)": [[101, "sympy.ntheory.generate.randprime"]], "reduced_totient (class in sympy.ntheory.factor_)": [[101, "sympy.ntheory.factor_.reduced_totient"]], "search() (sympy.ntheory.generate.sieve method)": [[101, "sympy.ntheory.generate.Sieve.search"]], "smoothness() (in module sympy.ntheory.factor_)": [[101, "sympy.ntheory.factor_.smoothness"]], "smoothness_p() (in module sympy.ntheory.factor_)": [[101, "sympy.ntheory.factor_.smoothness_p"]], "solve_congruence() (in module sympy.ntheory.modular)": [[101, "sympy.ntheory.modular.solve_congruence"]], "sqrt_mod() (in module sympy.ntheory.residue_ntheory)": [[101, "sympy.ntheory.residue_ntheory.sqrt_mod"]], "sqrt_mod_iter() (in module sympy.ntheory.residue_ntheory)": [[101, "sympy.ntheory.residue_ntheory.sqrt_mod_iter"]], "symmetric_residue() (in module sympy.ntheory.modular)": [[101, "sympy.ntheory.modular.symmetric_residue"]], "sympy.ntheory.bbp_pi": [[101, "module-sympy.ntheory.bbp_pi"]], "sympy.ntheory.continued_fraction": [[101, "module-sympy.ntheory.continued_fraction"]], "sympy.ntheory.digits": [[101, "module-sympy.ntheory.digits"]], "sympy.ntheory.ecm": [[101, "module-sympy.ntheory.ecm"]], "sympy.ntheory.egyptian_fraction": [[101, "module-sympy.ntheory.egyptian_fraction"]], "sympy.ntheory.factor_": [[101, "module-sympy.ntheory.factor_"]], "sympy.ntheory.generate": [[101, "module-sympy.ntheory.generate"]], "sympy.ntheory.modular": [[101, "module-sympy.ntheory.modular"]], "sympy.ntheory.multinomial": [[101, "module-sympy.ntheory.multinomial"]], "sympy.ntheory.partitions_": [[101, "module-sympy.ntheory.partitions_"]], "sympy.ntheory.primetest": [[101, "module-sympy.ntheory.primetest"]], "sympy.ntheory.qs": [[101, "module-sympy.ntheory.qs"]], "sympy.ntheory.residue_ntheory": [[101, "module-sympy.ntheory.residue_ntheory"]], "totient (class in sympy.ntheory.factor_)": [[101, "sympy.ntheory.factor_.totient"]], "totientrange() (sympy.ntheory.generate.sieve method)": [[101, "sympy.ntheory.generate.Sieve.totientrange"]], "trailing() (in module sympy.ntheory.factor_)": [[101, "sympy.ntheory.factor_.trailing"]], "udivisor_count() (in module sympy.ntheory.factor_)": [[101, "sympy.ntheory.factor_.udivisor_count"]], "udivisor_sigma (class in sympy.ntheory.factor_)": [[101, "sympy.ntheory.factor_.udivisor_sigma"]], "udivisors() (in module sympy.ntheory.factor_)": [[101, "sympy.ntheory.factor_.udivisors"]], "latexparsingerror (class in sympy.parsing.latex)": [[103, "sympy.parsing.latex.LaTeXParsingError"]], "sympyexpression (class in sympy.parsing.sym_expr)": [[103, "sympy.parsing.sym_expr.SymPyExpression"]], "auto_number() (in module sympy.parsing.sympy_parser)": [[103, "sympy.parsing.sympy_parser.auto_number"]], "auto_symbol() (in module sympy.parsing.sympy_parser)": [[103, "sympy.parsing.sympy_parser.auto_symbol"]], "convert_to_c() (sympy.parsing.sym_expr.sympyexpression method)": [[103, "sympy.parsing.sym_expr.SymPyExpression.convert_to_c"]], "convert_to_expr() (sympy.parsing.sym_expr.sympyexpression method)": [[103, "sympy.parsing.sym_expr.SymPyExpression.convert_to_expr"]], "convert_to_fortran() (sympy.parsing.sym_expr.sympyexpression method)": [[103, "sympy.parsing.sym_expr.SymPyExpression.convert_to_fortran"]], "convert_to_python() (sympy.parsing.sym_expr.sympyexpression method)": [[103, "sympy.parsing.sym_expr.SymPyExpression.convert_to_python"]], "convert_xor() (in module sympy.parsing.sympy_parser)": [[103, "sympy.parsing.sympy_parser.convert_xor"]], "eval_expr() (in module sympy.parsing.sympy_parser)": [[103, "sympy.parsing.sympy_parser.eval_expr"]], "factorial_notation() (in module sympy.parsing.sympy_parser)": [[103, "sympy.parsing.sympy_parser.factorial_notation"]], "function_exponentiation() (in module sympy.parsing.sympy_parser)": [[103, "sympy.parsing.sympy_parser.function_exponentiation"]], "implicit_application() (in module sympy.parsing.sympy_parser)": [[103, "sympy.parsing.sympy_parser.implicit_application"]], "implicit_multiplication() (in module sympy.parsing.sympy_parser)": [[103, "sympy.parsing.sympy_parser.implicit_multiplication"]], "implicit_multiplication_application() (in module sympy.parsing.sympy_parser)": [[103, "sympy.parsing.sympy_parser.implicit_multiplication_application"]], "lambda_notation() (in module sympy.parsing.sympy_parser)": [[103, "sympy.parsing.sympy_parser.lambda_notation"]], "parse_expr() (in module sympy.parsing.sympy_parser)": [[103, "sympy.parsing.sympy_parser.parse_expr"]], "parse_latex() (in module sympy.parsing.latex)": [[103, "sympy.parsing.latex.parse_latex"]], "parse_mathematica() (in module sympy.parsing.mathematica)": [[103, "sympy.parsing.mathematica.parse_mathematica"]], "parse_maxima() (in module sympy.parsing.maxima)": [[103, "sympy.parsing.maxima.parse_maxima"]], "rationalize() (in module sympy.parsing.sympy_parser)": [[103, "sympy.parsing.sympy_parser.rationalize"]], "repeated_decimals() (in module sympy.parsing.sympy_parser)": [[103, "sympy.parsing.sympy_parser.repeated_decimals"]], "return_expr() (sympy.parsing.sym_expr.sympyexpression method)": [[103, "sympy.parsing.sym_expr.SymPyExpression.return_expr"]], "split_symbols() (in module sympy.parsing.sympy_parser)": [[103, "sympy.parsing.sympy_parser.split_symbols"]], "split_symbols_custom() (in module sympy.parsing.sympy_parser)": [[103, "sympy.parsing.sympy_parser.split_symbols_custom"]], "standard_transformations (in module sympy.parsing.sympy_parser)": [[103, "sympy.parsing.sympy_parser.standard_transformations"]], "stringify_expr() (in module sympy.parsing.sympy_parser)": [[103, "sympy.parsing.sympy_parser.stringify_expr"]], "sympy.parsing": [[103, "module-sympy.parsing"]], "sympy.parsing.sym_expr": [[103, "module-sympy.parsing.sym_expr"]], "beam (class in sympy.physics.continuum_mechanics.beam)": [[104, "sympy.physics.continuum_mechanics.beam.Beam"]], "beam3d (class in sympy.physics.continuum_mechanics.beam)": [[104, "sympy.physics.continuum_mechanics.beam.Beam3D"]], "angular_deflection() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[104, "sympy.physics.continuum_mechanics.beam.Beam3D.angular_deflection"]], "applied_loads (sympy.physics.continuum_mechanics.beam.beam property)": [[104, "sympy.physics.continuum_mechanics.beam.Beam.applied_loads"]], "apply_load() (sympy.physics.continuum_mechanics.beam.beam method)": [[104, "sympy.physics.continuum_mechanics.beam.Beam.apply_load"]], "apply_load() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[104, "sympy.physics.continuum_mechanics.beam.Beam3D.apply_load"]], "apply_moment_load() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[104, "sympy.physics.continuum_mechanics.beam.Beam3D.apply_moment_load"]], "apply_support() (sympy.physics.continuum_mechanics.beam.beam method)": [[104, "sympy.physics.continuum_mechanics.beam.Beam.apply_support"]], "area (sympy.physics.continuum_mechanics.beam.beam property)": [[104, "sympy.physics.continuum_mechanics.beam.Beam.area"]], "area (sympy.physics.continuum_mechanics.beam.beam3d property)": [[104, "sympy.physics.continuum_mechanics.beam.Beam3D.area"]], "axial_force() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[104, "sympy.physics.continuum_mechanics.beam.Beam3D.axial_force"]], "axial_stress() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[104, "sympy.physics.continuum_mechanics.beam.Beam3D.axial_stress"]], "bending_moment() (sympy.physics.continuum_mechanics.beam.beam method)": [[104, "sympy.physics.continuum_mechanics.beam.Beam.bending_moment"]], "bending_moment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[104, "sympy.physics.continuum_mechanics.beam.Beam3D.bending_moment"]], "boundary_conditions (sympy.physics.continuum_mechanics.beam.beam property)": [[104, "sympy.physics.continuum_mechanics.beam.Beam.boundary_conditions"]], "boundary_conditions (sympy.physics.continuum_mechanics.beam.beam3d property)": [[104, "sympy.physics.continuum_mechanics.beam.Beam3D.boundary_conditions"]], "cross_section (sympy.physics.continuum_mechanics.beam.beam property)": [[104, "sympy.physics.continuum_mechanics.beam.Beam.cross_section"]], "deflection() (sympy.physics.continuum_mechanics.beam.beam method)": [[104, "sympy.physics.continuum_mechanics.beam.Beam.deflection"]], "deflection() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[104, "sympy.physics.continuum_mechanics.beam.Beam3D.deflection"]], "draw() (sympy.physics.continuum_mechanics.beam.beam method)": [[104, "sympy.physics.continuum_mechanics.beam.Beam.draw"]], "elastic_modulus (sympy.physics.continuum_mechanics.beam.beam property)": [[104, "sympy.physics.continuum_mechanics.beam.Beam.elastic_modulus"]], "ild_moment (sympy.physics.continuum_mechanics.beam.beam property)": [[104, "sympy.physics.continuum_mechanics.beam.Beam.ild_moment"]], "ild_reactions (sympy.physics.continuum_mechanics.beam.beam property)": [[104, "sympy.physics.continuum_mechanics.beam.Beam.ild_reactions"]], "ild_shear (sympy.physics.continuum_mechanics.beam.beam property)": [[104, "sympy.physics.continuum_mechanics.beam.Beam.ild_shear"]], "join() (sympy.physics.continuum_mechanics.beam.beam method)": [[104, "sympy.physics.continuum_mechanics.beam.Beam.join"]], "length (sympy.physics.continuum_mechanics.beam.beam property)": [[104, "sympy.physics.continuum_mechanics.beam.Beam.length"]], "load (sympy.physics.continuum_mechanics.beam.beam property)": [[104, "sympy.physics.continuum_mechanics.beam.Beam.load"]], "load_vector (sympy.physics.continuum_mechanics.beam.beam3d property)": [[104, "sympy.physics.continuum_mechanics.beam.Beam3D.load_vector"]], "max_bending_moment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[104, "sympy.physics.continuum_mechanics.beam.Beam3D.max_bending_moment"]], "max_bmoment() (sympy.physics.continuum_mechanics.beam.beam method)": [[104, "sympy.physics.continuum_mechanics.beam.Beam.max_bmoment"]], "max_bmoment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[104, "sympy.physics.continuum_mechanics.beam.Beam3D.max_bmoment"]], "max_deflection() (sympy.physics.continuum_mechanics.beam.beam method)": [[104, "sympy.physics.continuum_mechanics.beam.Beam.max_deflection"]], "max_deflection() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[104, "sympy.physics.continuum_mechanics.beam.Beam3D.max_deflection"]], "max_shear_force() (sympy.physics.continuum_mechanics.beam.beam method)": [[104, "sympy.physics.continuum_mechanics.beam.Beam.max_shear_force"]], "max_shear_force() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[104, "sympy.physics.continuum_mechanics.beam.Beam3D.max_shear_force"]], "moment_load_vector (sympy.physics.continuum_mechanics.beam.beam3d property)": [[104, "sympy.physics.continuum_mechanics.beam.Beam3D.moment_load_vector"]], "plot_bending_moment() (sympy.physics.continuum_mechanics.beam.beam method)": [[104, "sympy.physics.continuum_mechanics.beam.Beam.plot_bending_moment"]], "plot_bending_moment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[104, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_bending_moment"]], "plot_deflection() (sympy.physics.continuum_mechanics.beam.beam method)": [[104, "sympy.physics.continuum_mechanics.beam.Beam.plot_deflection"]], "plot_deflection() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[104, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_deflection"]], "plot_ild_moment() (sympy.physics.continuum_mechanics.beam.beam method)": [[104, "sympy.physics.continuum_mechanics.beam.Beam.plot_ild_moment"]], "plot_ild_reactions() (sympy.physics.continuum_mechanics.beam.beam method)": [[104, "sympy.physics.continuum_mechanics.beam.Beam.plot_ild_reactions"]], "plot_ild_shear() (sympy.physics.continuum_mechanics.beam.beam method)": [[104, "sympy.physics.continuum_mechanics.beam.Beam.plot_ild_shear"]], "plot_loading_results() (sympy.physics.continuum_mechanics.beam.beam method)": [[104, "sympy.physics.continuum_mechanics.beam.Beam.plot_loading_results"]], "plot_loading_results() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[104, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_loading_results"]], "plot_shear_force() (sympy.physics.continuum_mechanics.beam.beam method)": [[104, "sympy.physics.continuum_mechanics.beam.Beam.plot_shear_force"]], "plot_shear_force() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[104, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_shear_force"]], "plot_shear_stress() (sympy.physics.continuum_mechanics.beam.beam method)": [[104, "sympy.physics.continuum_mechanics.beam.Beam.plot_shear_stress"]], "plot_shear_stress() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[104, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_shear_stress"]], "plot_slope() (sympy.physics.continuum_mechanics.beam.beam method)": [[104, "sympy.physics.continuum_mechanics.beam.Beam.plot_slope"]], "plot_slope() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[104, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_slope"]], "point_cflexure() (sympy.physics.continuum_mechanics.beam.beam method)": [[104, "sympy.physics.continuum_mechanics.beam.Beam.point_cflexure"]], "polar_moment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[104, "sympy.physics.continuum_mechanics.beam.Beam3D.polar_moment"]], "reaction_loads (sympy.physics.continuum_mechanics.beam.beam property)": [[104, "sympy.physics.continuum_mechanics.beam.Beam.reaction_loads"]], "remove_load() (sympy.physics.continuum_mechanics.beam.beam method)": [[104, "sympy.physics.continuum_mechanics.beam.Beam.remove_load"]], "second_moment (sympy.physics.continuum_mechanics.beam.beam property)": [[104, "sympy.physics.continuum_mechanics.beam.Beam.second_moment"]], "second_moment (sympy.physics.continuum_mechanics.beam.beam3d property)": [[104, "sympy.physics.continuum_mechanics.beam.Beam3D.second_moment"]], "shear_force() (sympy.physics.continuum_mechanics.beam.beam method)": [[104, "sympy.physics.continuum_mechanics.beam.Beam.shear_force"]], "shear_force() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[104, "sympy.physics.continuum_mechanics.beam.Beam3D.shear_force"]], "shear_modulus (sympy.physics.continuum_mechanics.beam.beam3d property)": [[104, "sympy.physics.continuum_mechanics.beam.Beam3D.shear_modulus"]], "shear_stress() (sympy.physics.continuum_mechanics.beam.beam method)": [[104, "sympy.physics.continuum_mechanics.beam.Beam.shear_stress"]], "shear_stress() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[104, "sympy.physics.continuum_mechanics.beam.Beam3D.shear_stress"]], "slope() (sympy.physics.continuum_mechanics.beam.beam method)": [[104, "sympy.physics.continuum_mechanics.beam.Beam.slope"]], "slope() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[104, "sympy.physics.continuum_mechanics.beam.Beam3D.slope"]], "solve_for_ild_moment() (sympy.physics.continuum_mechanics.beam.beam method)": [[104, "sympy.physics.continuum_mechanics.beam.Beam.solve_for_ild_moment"]], "solve_for_ild_reactions() (sympy.physics.continuum_mechanics.beam.beam method)": [[104, "sympy.physics.continuum_mechanics.beam.Beam.solve_for_ild_reactions"]], "solve_for_ild_shear() (sympy.physics.continuum_mechanics.beam.beam method)": [[104, "sympy.physics.continuum_mechanics.beam.Beam.solve_for_ild_shear"]], "solve_for_reaction_loads() (sympy.physics.continuum_mechanics.beam.beam method)": [[104, "sympy.physics.continuum_mechanics.beam.Beam.solve_for_reaction_loads"]], "solve_for_reaction_loads() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[104, "sympy.physics.continuum_mechanics.beam.Beam3D.solve_for_reaction_loads"]], "solve_for_torsion() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[104, "sympy.physics.continuum_mechanics.beam.Beam3D.solve_for_torsion"]], "sympy.physics.continuum_mechanics.beam": [[104, "module-sympy.physics.continuum_mechanics.beam"]], "torsional_moment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[104, "sympy.physics.continuum_mechanics.beam.Beam3D.torsional_moment"]], "variable (sympy.physics.continuum_mechanics.beam.beam property)": [[104, "sympy.physics.continuum_mechanics.beam.Beam.variable"]], "truss (class in sympy.physics.continuum_mechanics.truss)": [[107, "sympy.physics.continuum_mechanics.truss.Truss"]], "add_member() (sympy.physics.continuum_mechanics.truss.truss method)": [[107, "sympy.physics.continuum_mechanics.truss.Truss.add_member"]], "add_node() (sympy.physics.continuum_mechanics.truss.truss method)": [[107, "sympy.physics.continuum_mechanics.truss.Truss.add_node"]], "apply_load() (sympy.physics.continuum_mechanics.truss.truss method)": [[107, "sympy.physics.continuum_mechanics.truss.Truss.apply_load"]], "apply_support() (sympy.physics.continuum_mechanics.truss.truss method)": [[107, "sympy.physics.continuum_mechanics.truss.Truss.apply_support"]], "change_member_label() (sympy.physics.continuum_mechanics.truss.truss method)": [[107, "sympy.physics.continuum_mechanics.truss.Truss.change_member_label"]], "change_node_label() (sympy.physics.continuum_mechanics.truss.truss method)": [[107, "sympy.physics.continuum_mechanics.truss.Truss.change_node_label"]], "internal_forces (sympy.physics.continuum_mechanics.truss.truss property)": [[107, "sympy.physics.continuum_mechanics.truss.Truss.internal_forces"]], "loads (sympy.physics.continuum_mechanics.truss.truss property)": [[107, "sympy.physics.continuum_mechanics.truss.Truss.loads"]], "member_labels (sympy.physics.continuum_mechanics.truss.truss property)": [[107, "sympy.physics.continuum_mechanics.truss.Truss.member_labels"]], "members (sympy.physics.continuum_mechanics.truss.truss property)": [[107, "sympy.physics.continuum_mechanics.truss.Truss.members"]], "node_labels (sympy.physics.continuum_mechanics.truss.truss property)": [[107, "sympy.physics.continuum_mechanics.truss.Truss.node_labels"]], "node_positions (sympy.physics.continuum_mechanics.truss.truss property)": [[107, "sympy.physics.continuum_mechanics.truss.Truss.node_positions"]], "nodes (sympy.physics.continuum_mechanics.truss.truss property)": [[107, "sympy.physics.continuum_mechanics.truss.Truss.nodes"]], "reaction_loads (sympy.physics.continuum_mechanics.truss.truss property)": [[107, "sympy.physics.continuum_mechanics.truss.Truss.reaction_loads"]], "remove_load() (sympy.physics.continuum_mechanics.truss.truss method)": [[107, "sympy.physics.continuum_mechanics.truss.Truss.remove_load"]], "remove_member() (sympy.physics.continuum_mechanics.truss.truss method)": [[107, "sympy.physics.continuum_mechanics.truss.Truss.remove_member"]], "remove_node() (sympy.physics.continuum_mechanics.truss.truss method)": [[107, "sympy.physics.continuum_mechanics.truss.Truss.remove_node"]], "remove_support() (sympy.physics.continuum_mechanics.truss.truss method)": [[107, "sympy.physics.continuum_mechanics.truss.Truss.remove_support"]], "solve() (sympy.physics.continuum_mechanics.truss.truss method)": [[107, "sympy.physics.continuum_mechanics.truss.Truss.solve"]], "supports (sympy.physics.continuum_mechanics.truss.truss property)": [[107, "sympy.physics.continuum_mechanics.truss.Truss.supports"]], "sympy.physics.continuum_mechanics.truss": [[107, "module-sympy.physics.continuum_mechanics.truss"]], "bode_magnitude_numerical_data() (sympy.physics.control.control_plots method)": [[109, "sympy.physics.control.control_plots.bode_magnitude_numerical_data"]], "bode_magnitude_plot() (sympy.physics.control.control_plots method)": [[109, "sympy.physics.control.control_plots.bode_magnitude_plot"]], "bode_phase_numerical_data() (sympy.physics.control.control_plots method)": [[109, "sympy.physics.control.control_plots.bode_phase_numerical_data"]], "bode_phase_plot() (sympy.physics.control.control_plots method)": [[109, "sympy.physics.control.control_plots.bode_phase_plot"]], "bode_plot() (sympy.physics.control.control_plots method)": [[109, "sympy.physics.control.control_plots.bode_plot"]], "impulse_response_numerical_data() (sympy.physics.control.control_plots method)": [[109, "sympy.physics.control.control_plots.impulse_response_numerical_data"]], "impulse_response_plot() (sympy.physics.control.control_plots method)": [[109, "sympy.physics.control.control_plots.impulse_response_plot"]], "pole_zero_numerical_data() (sympy.physics.control.control_plots method)": [[109, "sympy.physics.control.control_plots.pole_zero_numerical_data"]], "pole_zero_plot() (sympy.physics.control.control_plots method)": [[109, "sympy.physics.control.control_plots.pole_zero_plot"]], "ramp_response_numerical_data() (sympy.physics.control.control_plots method)": [[109, "sympy.physics.control.control_plots.ramp_response_numerical_data"]], "ramp_response_plot() (sympy.physics.control.control_plots method)": [[109, "sympy.physics.control.control_plots.ramp_response_plot"]], "step_response_numerical_data() (sympy.physics.control.control_plots method)": [[109, "sympy.physics.control.control_plots.step_response_numerical_data"]], "step_response_plot() (sympy.physics.control.control_plots method)": [[109, "sympy.physics.control.control_plots.step_response_plot"]], "sympy.physics.control": [[110, "module-sympy.physics.control"]], "feedback (class in sympy.physics.control.lti)": [[111, "sympy.physics.control.lti.Feedback"]], "mimofeedback (class in sympy.physics.control.lti)": [[111, "sympy.physics.control.lti.MIMOFeedback"]], "mimoparallel (class in sympy.physics.control.lti)": [[111, "sympy.physics.control.lti.MIMOParallel"]], "mimoseries (class in sympy.physics.control.lti)": [[111, "sympy.physics.control.lti.MIMOSeries"]], "parallel (class in sympy.physics.control.lti)": [[111, "sympy.physics.control.lti.Parallel"]], "series (class in sympy.physics.control.lti)": [[111, "sympy.physics.control.lti.Series"]], "transferfunction (class in sympy.physics.control.lti)": [[111, "sympy.physics.control.lti.TransferFunction"]], "transferfunctionmatrix (class in sympy.physics.control.lti)": [[111, "sympy.physics.control.lti.TransferFunctionMatrix"]], "dc_gain() (sympy.physics.control.lti.transferfunction method)": [[111, "sympy.physics.control.lti.TransferFunction.dc_gain"]], "den (sympy.physics.control.lti.transferfunction property)": [[111, "sympy.physics.control.lti.TransferFunction.den"]], "doit() (sympy.physics.control.lti.feedback method)": [[111, "sympy.physics.control.lti.Feedback.doit"]], "doit() (sympy.physics.control.lti.mimofeedback method)": [[111, "sympy.physics.control.lti.MIMOFeedback.doit"]], "doit() (sympy.physics.control.lti.mimoparallel method)": [[111, "sympy.physics.control.lti.MIMOParallel.doit"]], "doit() (sympy.physics.control.lti.mimoseries method)": [[111, "sympy.physics.control.lti.MIMOSeries.doit"]], "doit() (sympy.physics.control.lti.parallel method)": [[111, "sympy.physics.control.lti.Parallel.doit"]], "doit() (sympy.physics.control.lti.series method)": [[111, "sympy.physics.control.lti.Series.doit"]], "elem_poles() (sympy.physics.control.lti.transferfunctionmatrix method)": [[111, "sympy.physics.control.lti.TransferFunctionMatrix.elem_poles"]], "elem_zeros() (sympy.physics.control.lti.transferfunctionmatrix method)": [[111, "sympy.physics.control.lti.TransferFunctionMatrix.elem_zeros"]], "expand() (sympy.physics.control.lti.transferfunction method)": [[111, "sympy.physics.control.lti.TransferFunction.expand"]], "expand() (sympy.physics.control.lti.transferfunctionmatrix method)": [[111, "sympy.physics.control.lti.TransferFunctionMatrix.expand"]], "from_matrix() (sympy.physics.control.lti.transferfunctionmatrix class method)": [[111, "sympy.physics.control.lti.TransferFunctionMatrix.from_Matrix"]], "from_rational_expression() (sympy.physics.control.lti.transferfunction class method)": [[111, "sympy.physics.control.lti.TransferFunction.from_rational_expression"]], "is_biproper (sympy.physics.control.lti.parallel property)": [[111, "sympy.physics.control.lti.Parallel.is_biproper"]], "is_biproper (sympy.physics.control.lti.series property)": [[111, "sympy.physics.control.lti.Series.is_biproper"]], "is_biproper (sympy.physics.control.lti.transferfunction property)": [[111, "sympy.physics.control.lti.TransferFunction.is_biproper"]], "is_proper (sympy.physics.control.lti.parallel property)": [[111, "sympy.physics.control.lti.Parallel.is_proper"]], "is_proper (sympy.physics.control.lti.series property)": [[111, "sympy.physics.control.lti.Series.is_proper"]], "is_proper (sympy.physics.control.lti.transferfunction property)": [[111, "sympy.physics.control.lti.TransferFunction.is_proper"]], "is_stable() (sympy.physics.control.lti.transferfunction method)": [[111, "sympy.physics.control.lti.TransferFunction.is_stable"]], "is_strictly_proper (sympy.physics.control.lti.parallel property)": [[111, "sympy.physics.control.lti.Parallel.is_strictly_proper"]], "is_strictly_proper (sympy.physics.control.lti.series property)": [[111, "sympy.physics.control.lti.Series.is_strictly_proper"]], "is_strictly_proper (sympy.physics.control.lti.transferfunction property)": [[111, "sympy.physics.control.lti.TransferFunction.is_strictly_proper"]], "num (sympy.physics.control.lti.transferfunction property)": [[111, "sympy.physics.control.lti.TransferFunction.num"]], "num_inputs (sympy.physics.control.lti.mimoparallel property)": [[111, "sympy.physics.control.lti.MIMOParallel.num_inputs"]], "num_inputs (sympy.physics.control.lti.mimoseries property)": [[111, "sympy.physics.control.lti.MIMOSeries.num_inputs"]], "num_inputs (sympy.physics.control.lti.transferfunctionmatrix property)": [[111, "sympy.physics.control.lti.TransferFunctionMatrix.num_inputs"]], "num_outputs (sympy.physics.control.lti.mimoparallel property)": [[111, "sympy.physics.control.lti.MIMOParallel.num_outputs"]], "num_outputs (sympy.physics.control.lti.mimoseries property)": [[111, "sympy.physics.control.lti.MIMOSeries.num_outputs"]], "num_outputs (sympy.physics.control.lti.transferfunctionmatrix property)": [[111, "sympy.physics.control.lti.TransferFunctionMatrix.num_outputs"]], "poles() (sympy.physics.control.lti.transferfunction method)": [[111, "sympy.physics.control.lti.TransferFunction.poles"]], "sensitivity (sympy.physics.control.lti.feedback property)": [[111, "sympy.physics.control.lti.Feedback.sensitivity"]], "sensitivity (sympy.physics.control.lti.mimofeedback property)": [[111, "sympy.physics.control.lti.MIMOFeedback.sensitivity"]], "shape (sympy.physics.control.lti.mimoparallel property)": [[111, "sympy.physics.control.lti.MIMOParallel.shape"]], "shape (sympy.physics.control.lti.mimoseries property)": [[111, "sympy.physics.control.lti.MIMOSeries.shape"]], "shape (sympy.physics.control.lti.transferfunctionmatrix property)": [[111, "sympy.physics.control.lti.TransferFunctionMatrix.shape"]], "sign (sympy.physics.control.lti.feedback property)": [[111, "sympy.physics.control.lti.Feedback.sign"]], "sign (sympy.physics.control.lti.mimofeedback property)": [[111, "sympy.physics.control.lti.MIMOFeedback.sign"]], "sympy.physics.control.lti": [[111, "module-sympy.physics.control.lti"]], "sys1 (sympy.physics.control.lti.feedback property)": [[111, "sympy.physics.control.lti.Feedback.sys1"]], "sys1 (sympy.physics.control.lti.mimofeedback property)": [[111, "sympy.physics.control.lti.MIMOFeedback.sys1"]], "sys2 (sympy.physics.control.lti.feedback property)": [[111, "sympy.physics.control.lti.Feedback.sys2"]], "sys2 (sympy.physics.control.lti.mimofeedback property)": [[111, "sympy.physics.control.lti.MIMOFeedback.sys2"]], "to_expr() (sympy.physics.control.lti.parallel method)": [[111, "sympy.physics.control.lti.Parallel.to_expr"]], "to_expr() (sympy.physics.control.lti.series method)": [[111, "sympy.physics.control.lti.Series.to_expr"]], "to_expr() (sympy.physics.control.lti.transferfunction method)": [[111, "sympy.physics.control.lti.TransferFunction.to_expr"]], "transpose() (sympy.physics.control.lti.transferfunctionmatrix method)": [[111, "sympy.physics.control.lti.TransferFunctionMatrix.transpose"]], "var (sympy.physics.control.lti.feedback property)": [[111, "sympy.physics.control.lti.Feedback.var"]], "var (sympy.physics.control.lti.mimofeedback property)": [[111, "sympy.physics.control.lti.MIMOFeedback.var"]], "var (sympy.physics.control.lti.mimoparallel property)": [[111, "sympy.physics.control.lti.MIMOParallel.var"]], "var (sympy.physics.control.lti.mimoseries property)": [[111, "sympy.physics.control.lti.MIMOSeries.var"]], "var (sympy.physics.control.lti.parallel property)": [[111, "sympy.physics.control.lti.Parallel.var"]], "var (sympy.physics.control.lti.series property)": [[111, "sympy.physics.control.lti.Series.var"]], "var (sympy.physics.control.lti.transferfunction property)": [[111, "sympy.physics.control.lti.TransferFunction.var"]], "var (sympy.physics.control.lti.transferfunctionmatrix property)": [[111, "sympy.physics.control.lti.TransferFunctionMatrix.var"]], "zeros() (sympy.physics.control.lti.transferfunction method)": [[111, "sympy.physics.control.lti.TransferFunction.zeros"]], "extract_type_tens() (in module sympy.physics.hep.gamma_matrices)": [[112, "sympy.physics.hep.gamma_matrices.extract_type_tens"]], "gamma_trace() (in module sympy.physics.hep.gamma_matrices)": [[112, "sympy.physics.hep.gamma_matrices.gamma_trace"]], "kahane_simplify() (in module sympy.physics.hep.gamma_matrices)": [[112, "sympy.physics.hep.gamma_matrices.kahane_simplify"]], "simplify_gpgp() (in module sympy.physics.hep.gamma_matrices)": [[112, "sympy.physics.hep.gamma_matrices.simplify_gpgp"]], "sympy.physics.hep.gamma_matrices": [[112, "module-sympy.physics.hep.gamma_matrices"]], "e_nl() (in module sympy.physics.hydrogen)": [[113, "sympy.physics.hydrogen.E_nl"]], "e_nl_dirac() (in module sympy.physics.hydrogen)": [[113, "sympy.physics.hydrogen.E_nl_dirac"]], "psi_nlm() (in module sympy.physics.hydrogen)": [[113, "sympy.physics.hydrogen.Psi_nlm"]], "r_nl() (in module sympy.physics.hydrogen)": [[113, "sympy.physics.hydrogen.R_nl"]], "sympy.physics.hydrogen": [[113, "module-sympy.physics.hydrogen"]], "mdft() (in module sympy.physics.matrices)": [[114, "sympy.physics.matrices.mdft"]], "mgamma() (in module sympy.physics.matrices)": [[114, "sympy.physics.matrices.mgamma"]], "msigma() (in module sympy.physics.matrices)": [[114, "sympy.physics.matrices.msigma"]], "pat_matrix() (in module sympy.physics.matrices)": [[114, "sympy.physics.matrices.pat_matrix"]], "sympy.physics.matrices": [[114, "module-sympy.physics.matrices"]], "body (class in sympy.physics.mechanics.body)": [[116, "sympy.physics.mechanics.body.Body"]], "ang_vel_in() (sympy.physics.mechanics.body.body method)": [[116, "sympy.physics.mechanics.body.Body.ang_vel_in"]], "apply_force() (sympy.physics.mechanics.body.body method)": [[116, "sympy.physics.mechanics.body.Body.apply_force"]], "apply_torque() (sympy.physics.mechanics.body.body method)": [[116, "sympy.physics.mechanics.body.Body.apply_torque"]], "clear_loads() (sympy.physics.mechanics.body.body method)": [[116, "sympy.physics.mechanics.body.Body.clear_loads"]], "dcm() (sympy.physics.mechanics.body.body method)": [[116, "sympy.physics.mechanics.body.Body.dcm"]], "inertia (sympy.physics.mechanics.body.body property)": [[116, "sympy.physics.mechanics.body.Body.inertia"]], "kinetic_energy() (sympy.physics.mechanics.body.body method)": [[116, "sympy.physics.mechanics.body.Body.kinetic_energy"]], "masscenter_vel() (sympy.physics.mechanics.body.body method)": [[116, "sympy.physics.mechanics.body.Body.masscenter_vel"]], "parallel_axis() (sympy.physics.mechanics.body.body method)": [[116, "sympy.physics.mechanics.body.Body.parallel_axis"]], "remove_load() (sympy.physics.mechanics.body.body method)": [[116, "sympy.physics.mechanics.body.Body.remove_load"]], "sympy.physics.mechanics.body": [[116, "module-sympy.physics.mechanics.body"]], "x (sympy.physics.mechanics.body.body property)": [[116, "sympy.physics.mechanics.body.Body.x"]], "y (sympy.physics.mechanics.body.body property)": [[116, "sympy.physics.mechanics.body.Body.y"]], "z (sympy.physics.mechanics.body.body property)": [[116, "sympy.physics.mechanics.body.Body.z"]], "find_dynamicsymbols() (in module sympy.physics.mechanics)": [[117, "sympy.physics.mechanics.find_dynamicsymbols"]], "msubs() (in module sympy.physics.mechanics)": [[117, "sympy.physics.mechanics.msubs"]], "cylindricaljoint (class in sympy.physics.mechanics.joint)": [[119, "sympy.physics.mechanics.joint.CylindricalJoint"]], "joint (class in sympy.physics.mechanics.joint)": [[119, "sympy.physics.mechanics.joint.Joint"]], "jointsmethod (class in sympy.physics.mechanics.jointsmethod)": [[119, "sympy.physics.mechanics.jointsmethod.JointsMethod"]], "pinjoint (class in sympy.physics.mechanics.joint)": [[119, "sympy.physics.mechanics.joint.PinJoint"]], "planarjoint (class in sympy.physics.mechanics.joint)": [[119, "sympy.physics.mechanics.joint.PlanarJoint"]], "prismaticjoint (class in sympy.physics.mechanics.joint)": [[119, "sympy.physics.mechanics.joint.PrismaticJoint"]], "sphericaljoint (class in sympy.physics.mechanics.joint)": [[119, "sympy.physics.mechanics.joint.SphericalJoint"]], "weldjoint (class in sympy.physics.mechanics.joint)": [[119, "sympy.physics.mechanics.joint.WeldJoint"]], "bodies (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[119, "sympy.physics.mechanics.jointsmethod.JointsMethod.bodies"]], "child (sympy.physics.mechanics.joint.joint property)": [[119, "sympy.physics.mechanics.joint.Joint.child"]], "child_axis (sympy.physics.mechanics.joint.joint property)": [[119, "sympy.physics.mechanics.joint.Joint.child_axis"]], "child_point (sympy.physics.mechanics.joint.joint property)": [[119, "sympy.physics.mechanics.joint.Joint.child_point"]], "coordinates (sympy.physics.mechanics.joint.joint property)": [[119, "sympy.physics.mechanics.joint.Joint.coordinates"]], "forcing (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[119, "sympy.physics.mechanics.jointsmethod.JointsMethod.forcing"]], "forcing_full (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[119, "sympy.physics.mechanics.jointsmethod.JointsMethod.forcing_full"]], "form_eoms() (sympy.physics.mechanics.jointsmethod.jointsmethod method)": [[119, "sympy.physics.mechanics.jointsmethod.JointsMethod.form_eoms"]], "joint_axis (sympy.physics.mechanics.joint.cylindricaljoint property)": [[119, "sympy.physics.mechanics.joint.CylindricalJoint.joint_axis"]], "joint_axis (sympy.physics.mechanics.joint.pinjoint property)": [[119, "sympy.physics.mechanics.joint.PinJoint.joint_axis"]], "joint_axis (sympy.physics.mechanics.joint.prismaticjoint property)": [[119, "sympy.physics.mechanics.joint.PrismaticJoint.joint_axis"]], "kdes (sympy.physics.mechanics.joint.joint property)": [[119, "sympy.physics.mechanics.joint.Joint.kdes"]], "kdes (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[119, "sympy.physics.mechanics.jointsmethod.JointsMethod.kdes"]], "loads (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[119, "sympy.physics.mechanics.jointsmethod.JointsMethod.loads"]], "mass_matrix (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[119, "sympy.physics.mechanics.jointsmethod.JointsMethod.mass_matrix"]], "mass_matrix_full (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[119, "sympy.physics.mechanics.jointsmethod.JointsMethod.mass_matrix_full"]], "method (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[119, "sympy.physics.mechanics.jointsmethod.JointsMethod.method"]], "name (sympy.physics.mechanics.joint.joint property)": [[119, "sympy.physics.mechanics.joint.Joint.name"]], "parent (sympy.physics.mechanics.joint.joint property)": [[119, "sympy.physics.mechanics.joint.Joint.parent"]], "parent_axis (sympy.physics.mechanics.joint.joint property)": [[119, "sympy.physics.mechanics.joint.Joint.parent_axis"]], "parent_point (sympy.physics.mechanics.joint.joint property)": [[119, "sympy.physics.mechanics.joint.Joint.parent_point"]], "planar_coordinates (sympy.physics.mechanics.joint.planarjoint property)": [[119, "sympy.physics.mechanics.joint.PlanarJoint.planar_coordinates"]], "planar_speeds (sympy.physics.mechanics.joint.planarjoint property)": [[119, "sympy.physics.mechanics.joint.PlanarJoint.planar_speeds"]], "planar_vectors (sympy.physics.mechanics.joint.planarjoint property)": [[119, "sympy.physics.mechanics.joint.PlanarJoint.planar_vectors"]], "q (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[119, "sympy.physics.mechanics.jointsmethod.JointsMethod.q"]], "rhs() (sympy.physics.mechanics.jointsmethod.jointsmethod method)": [[119, "sympy.physics.mechanics.jointsmethod.JointsMethod.rhs"]], "rotation_axis (sympy.physics.mechanics.joint.planarjoint property)": [[119, "sympy.physics.mechanics.joint.PlanarJoint.rotation_axis"]], "rotation_coordinate (sympy.physics.mechanics.joint.cylindricaljoint property)": [[119, "sympy.physics.mechanics.joint.CylindricalJoint.rotation_coordinate"]], "rotation_coordinate (sympy.physics.mechanics.joint.planarjoint property)": [[119, "sympy.physics.mechanics.joint.PlanarJoint.rotation_coordinate"]], "rotation_speed (sympy.physics.mechanics.joint.cylindricaljoint property)": [[119, "sympy.physics.mechanics.joint.CylindricalJoint.rotation_speed"]], "rotation_speed (sympy.physics.mechanics.joint.planarjoint property)": [[119, "sympy.physics.mechanics.joint.PlanarJoint.rotation_speed"]], "speeds (sympy.physics.mechanics.joint.joint property)": [[119, "sympy.physics.mechanics.joint.Joint.speeds"]], "sympy.physics.mechanics.joint": [[119, "module-sympy.physics.mechanics.joint"]], "sympy.physics.mechanics.jointsmethod": [[119, "module-sympy.physics.mechanics.jointsmethod"]], "translation_coordinate (sympy.physics.mechanics.joint.cylindricaljoint property)": [[119, "sympy.physics.mechanics.joint.CylindricalJoint.translation_coordinate"]], "translation_speed (sympy.physics.mechanics.joint.cylindricaljoint property)": [[119, "sympy.physics.mechanics.joint.CylindricalJoint.translation_speed"]], "u (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[119, "sympy.physics.mechanics.jointsmethod.JointsMethod.u"]], "kanesmethod (class in sympy.physics.mechanics.kane)": [[120, "sympy.physics.mechanics.kane.KanesMethod"]], "lagrangesmethod (class in sympy.physics.mechanics.lagrange)": [[120, "sympy.physics.mechanics.lagrange.LagrangesMethod"]], "auxiliary_eqs (sympy.physics.mechanics.kane.kanesmethod property)": [[120, "sympy.physics.mechanics.kane.KanesMethod.auxiliary_eqs"]], "forcing (sympy.physics.mechanics.kane.kanesmethod property)": [[120, "sympy.physics.mechanics.kane.KanesMethod.forcing"]], "forcing (sympy.physics.mechanics.lagrange.lagrangesmethod property)": [[120, "sympy.physics.mechanics.lagrange.LagrangesMethod.forcing"]], "forcing_full (sympy.physics.mechanics.kane.kanesmethod property)": [[120, "sympy.physics.mechanics.kane.KanesMethod.forcing_full"]], "forcing_full (sympy.physics.mechanics.lagrange.lagrangesmethod property)": [[120, "sympy.physics.mechanics.lagrange.LagrangesMethod.forcing_full"]], "forcing_kin (sympy.physics.mechanics.kane.kanesmethod property)": [[120, "sympy.physics.mechanics.kane.KanesMethod.forcing_kin"]], "form_lagranges_equations() (sympy.physics.mechanics.lagrange.lagrangesmethod method)": [[120, "sympy.physics.mechanics.lagrange.LagrangesMethod.form_lagranges_equations"]], "kanes_equations() (sympy.physics.mechanics.kane.kanesmethod method)": [[120, "sympy.physics.mechanics.kane.KanesMethod.kanes_equations"]], "kindiffdict() (sympy.physics.mechanics.kane.kanesmethod method)": [[120, "sympy.physics.mechanics.kane.KanesMethod.kindiffdict"]], "linearize() (sympy.physics.mechanics.kane.kanesmethod method)": [[120, "sympy.physics.mechanics.kane.KanesMethod.linearize"]], "linearize() (sympy.physics.mechanics.lagrange.lagrangesmethod method)": [[120, "sympy.physics.mechanics.lagrange.LagrangesMethod.linearize"]], "mass_matrix (sympy.physics.mechanics.kane.kanesmethod property)": [[120, "sympy.physics.mechanics.kane.KanesMethod.mass_matrix"]], "mass_matrix (sympy.physics.mechanics.lagrange.lagrangesmethod property)": [[120, "sympy.physics.mechanics.lagrange.LagrangesMethod.mass_matrix"]], "mass_matrix_full (sympy.physics.mechanics.kane.kanesmethod property)": [[120, "sympy.physics.mechanics.kane.KanesMethod.mass_matrix_full"]], "mass_matrix_full (sympy.physics.mechanics.lagrange.lagrangesmethod property)": [[120, "sympy.physics.mechanics.lagrange.LagrangesMethod.mass_matrix_full"]], "mass_matrix_kin (sympy.physics.mechanics.kane.kanesmethod property)": [[120, "sympy.physics.mechanics.kane.KanesMethod.mass_matrix_kin"]], "rhs() (sympy.physics.mechanics.kane.kanesmethod method)": [[120, "sympy.physics.mechanics.kane.KanesMethod.rhs"]], "rhs() (sympy.physics.mechanics.lagrange.lagrangesmethod method)": [[120, "sympy.physics.mechanics.lagrange.LagrangesMethod.rhs"]], "solve_multipliers() (sympy.physics.mechanics.lagrange.lagrangesmethod method)": [[120, "sympy.physics.mechanics.lagrange.LagrangesMethod.solve_multipliers"]], "sympy.physics.mechanics.kane": [[120, "module-sympy.physics.mechanics.kane"]], "sympy.physics.mechanics.lagrange": [[120, "module-sympy.physics.mechanics.lagrange"]], "to_linearizer() (sympy.physics.mechanics.kane.kanesmethod method)": [[120, "sympy.physics.mechanics.kane.KanesMethod.to_linearizer"]], "to_linearizer() (sympy.physics.mechanics.lagrange.lagrangesmethod method)": [[120, "sympy.physics.mechanics.lagrange.LagrangesMethod.to_linearizer"]], "linearizer (class in sympy.physics.mechanics.linearize)": [[121, "sympy.physics.mechanics.linearize.Linearizer"]], "linearize() (sympy.physics.mechanics.linearize.linearizer method)": [[121, "sympy.physics.mechanics.linearize.Linearizer.linearize"]], "sympy.physics.mechanics.linearize": [[121, "module-sympy.physics.mechanics.linearize"]], "lagrangian() (in module sympy.physics.mechanics.functions)": [[122, "sympy.physics.mechanics.functions.Lagrangian"]], "particle (class in sympy.physics.mechanics.particle)": [[122, "sympy.physics.mechanics.particle.Particle"]], "rigidbody (class in sympy.physics.mechanics.rigidbody)": [[122, "sympy.physics.mechanics.rigidbody.RigidBody"]], "angular_momentum() (in module sympy.physics.mechanics.functions)": [[122, "sympy.physics.mechanics.functions.angular_momentum"]], "angular_momentum() (sympy.physics.mechanics.particle.particle method)": [[122, "sympy.physics.mechanics.particle.Particle.angular_momentum"]], "angular_momentum() (sympy.physics.mechanics.rigidbody.rigidbody method)": [[122, "sympy.physics.mechanics.rigidbody.RigidBody.angular_momentum"]], "central_inertia (sympy.physics.mechanics.rigidbody.rigidbody property)": [[122, "sympy.physics.mechanics.rigidbody.RigidBody.central_inertia"]], "frame (sympy.physics.mechanics.rigidbody.rigidbody property)": [[122, "sympy.physics.mechanics.rigidbody.RigidBody.frame"]], "inertia (sympy.physics.mechanics.rigidbody.rigidbody property)": [[122, "sympy.physics.mechanics.rigidbody.RigidBody.inertia"]], "inertia() (in module sympy.physics.mechanics.functions)": [[122, "sympy.physics.mechanics.functions.inertia"]], "inertia_of_point_mass() (in module sympy.physics.mechanics.functions)": [[122, "sympy.physics.mechanics.functions.inertia_of_point_mass"]], "kinetic_energy() (in module sympy.physics.mechanics.functions)": [[122, "sympy.physics.mechanics.functions.kinetic_energy"]], "kinetic_energy() (sympy.physics.mechanics.particle.particle method)": [[122, "sympy.physics.mechanics.particle.Particle.kinetic_energy"]], "kinetic_energy() (sympy.physics.mechanics.rigidbody.rigidbody method)": [[122, "sympy.physics.mechanics.rigidbody.RigidBody.kinetic_energy"]], "linear_momentum() (in module sympy.physics.mechanics.functions)": [[122, "sympy.physics.mechanics.functions.linear_momentum"]], "linear_momentum() (sympy.physics.mechanics.particle.particle method)": [[122, "sympy.physics.mechanics.particle.Particle.linear_momentum"]], "linear_momentum() (sympy.physics.mechanics.rigidbody.rigidbody method)": [[122, "sympy.physics.mechanics.rigidbody.RigidBody.linear_momentum"]], "mass (sympy.physics.mechanics.particle.particle property)": [[122, "sympy.physics.mechanics.particle.Particle.mass"]], "mass (sympy.physics.mechanics.rigidbody.rigidbody property)": [[122, "sympy.physics.mechanics.rigidbody.RigidBody.mass"]], "masscenter (sympy.physics.mechanics.rigidbody.rigidbody property)": [[122, "sympy.physics.mechanics.rigidbody.RigidBody.masscenter"]], "parallel_axis() (sympy.physics.mechanics.particle.particle method)": [[122, "sympy.physics.mechanics.particle.Particle.parallel_axis"]], "parallel_axis() (sympy.physics.mechanics.rigidbody.rigidbody method)": [[122, "sympy.physics.mechanics.rigidbody.RigidBody.parallel_axis"]], "point (sympy.physics.mechanics.particle.particle property)": [[122, "sympy.physics.mechanics.particle.Particle.point"]], "potential_energy (sympy.physics.mechanics.particle.particle property)": [[122, "sympy.physics.mechanics.particle.Particle.potential_energy"]], "potential_energy (sympy.physics.mechanics.rigidbody.rigidbody property)": [[122, "sympy.physics.mechanics.rigidbody.RigidBody.potential_energy"]], "potential_energy() (in module sympy.physics.mechanics.functions)": [[122, "sympy.physics.mechanics.functions.potential_energy"]], "sympy.physics.mechanics.particle": [[122, "module-sympy.physics.mechanics.particle"]], "sympy.physics.mechanics.rigidbody": [[122, "module-sympy.physics.mechanics.rigidbody"]], "symbolicsystem (class in sympy.physics.mechanics.system)": [[124, "sympy.physics.mechanics.system.SymbolicSystem"]], "alg_con (sympy.physics.mechanics.system.symbolicsystem property)": [[124, "sympy.physics.mechanics.system.SymbolicSystem.alg_con"]], "bodies (sympy.physics.mechanics.system.symbolicsystem property)": [[124, "sympy.physics.mechanics.system.SymbolicSystem.bodies"]], "comb_explicit_rhs (sympy.physics.mechanics.system.symbolicsystem property)": [[124, "sympy.physics.mechanics.system.SymbolicSystem.comb_explicit_rhs"]], "comb_implicit_mat (sympy.physics.mechanics.system.symbolicsystem property)": [[124, "sympy.physics.mechanics.system.SymbolicSystem.comb_implicit_mat"]], "comb_implicit_rhs (sympy.physics.mechanics.system.symbolicsystem property)": [[124, "sympy.physics.mechanics.system.SymbolicSystem.comb_implicit_rhs"]], "compute_explicit_form() (sympy.physics.mechanics.system.symbolicsystem method)": [[124, "sympy.physics.mechanics.system.SymbolicSystem.compute_explicit_form"]], "constant_symbols() (sympy.physics.mechanics.system.symbolicsystem method)": [[124, "sympy.physics.mechanics.system.SymbolicSystem.constant_symbols"]], "coordinates (sympy.physics.mechanics.system.symbolicsystem property)": [[124, "sympy.physics.mechanics.system.SymbolicSystem.coordinates"]], "dyn_implicit_mat (sympy.physics.mechanics.system.symbolicsystem property)": [[124, "sympy.physics.mechanics.system.SymbolicSystem.dyn_implicit_mat"]], "dyn_implicit_rhs (sympy.physics.mechanics.system.symbolicsystem property)": [[124, "sympy.physics.mechanics.system.SymbolicSystem.dyn_implicit_rhs"]], "dynamic_symbols() (sympy.physics.mechanics.system.symbolicsystem method)": [[124, "sympy.physics.mechanics.system.SymbolicSystem.dynamic_symbols"]], "kin_explicit_rhs (sympy.physics.mechanics.system.symbolicsystem property)": [[124, "sympy.physics.mechanics.system.SymbolicSystem.kin_explicit_rhs"]], "loads (sympy.physics.mechanics.system.symbolicsystem property)": [[124, "sympy.physics.mechanics.system.SymbolicSystem.loads"]], "speeds (sympy.physics.mechanics.system.symbolicsystem property)": [[124, "sympy.physics.mechanics.system.SymbolicSystem.speeds"]], "states (sympy.physics.mechanics.system.symbolicsystem property)": [[124, "sympy.physics.mechanics.system.SymbolicSystem.states"]], "sympy.physics.mechanics.system": [[124, "module-sympy.physics.mechanics.system"]], "sympy.physics.mechanics": [[135, "module-sympy.physics.mechanics"]], "a (sympy.physics.optics.gaussopt.raytransfermatrix property)": [[144, "sympy.physics.optics.gaussopt.RayTransferMatrix.A"]], "b (sympy.physics.optics.gaussopt.raytransfermatrix property)": [[144, "sympy.physics.optics.gaussopt.RayTransferMatrix.B"]], "beamparameter (class in sympy.physics.optics.gaussopt)": [[144, "sympy.physics.optics.gaussopt.BeamParameter"]], "c (sympy.physics.optics.gaussopt.raytransfermatrix property)": [[144, "sympy.physics.optics.gaussopt.RayTransferMatrix.C"]], "curvedmirror (class in sympy.physics.optics.gaussopt)": [[144, "sympy.physics.optics.gaussopt.CurvedMirror"]], "curvedrefraction (class in sympy.physics.optics.gaussopt)": [[144, "sympy.physics.optics.gaussopt.CurvedRefraction"]], "d (sympy.physics.optics.gaussopt.raytransfermatrix property)": [[144, "sympy.physics.optics.gaussopt.RayTransferMatrix.D"]], "flatmirror (class in sympy.physics.optics.gaussopt)": [[144, "sympy.physics.optics.gaussopt.FlatMirror"]], "flatrefraction (class in sympy.physics.optics.gaussopt)": [[144, "sympy.physics.optics.gaussopt.FlatRefraction"]], "freespace (class in sympy.physics.optics.gaussopt)": [[144, "sympy.physics.optics.gaussopt.FreeSpace"]], "geometricray (class in sympy.physics.optics.gaussopt)": [[144, "sympy.physics.optics.gaussopt.GeometricRay"]], "raytransfermatrix (class in sympy.physics.optics.gaussopt)": [[144, "sympy.physics.optics.gaussopt.RayTransferMatrix"]], "thinlens (class in sympy.physics.optics.gaussopt)": [[144, "sympy.physics.optics.gaussopt.ThinLens"]], "angle (sympy.physics.optics.gaussopt.geometricray property)": [[144, "sympy.physics.optics.gaussopt.GeometricRay.angle"]], "conjugate_gauss_beams() (in module sympy.physics.optics.gaussopt)": [[144, "sympy.physics.optics.gaussopt.conjugate_gauss_beams"]], "divergence (sympy.physics.optics.gaussopt.beamparameter property)": [[144, "sympy.physics.optics.gaussopt.BeamParameter.divergence"]], "gaussian_conj() (in module sympy.physics.optics.gaussopt)": [[144, "sympy.physics.optics.gaussopt.gaussian_conj"]], "geometric_conj_ab() (in module sympy.physics.optics.gaussopt)": [[144, "sympy.physics.optics.gaussopt.geometric_conj_ab"]], "geometric_conj_af() (in module sympy.physics.optics.gaussopt)": [[144, "sympy.physics.optics.gaussopt.geometric_conj_af"]], "geometric_conj_bf() (in module sympy.physics.optics.gaussopt)": [[144, "sympy.physics.optics.gaussopt.geometric_conj_bf"]], "gouy (sympy.physics.optics.gaussopt.beamparameter property)": [[144, "sympy.physics.optics.gaussopt.BeamParameter.gouy"]], "height (sympy.physics.optics.gaussopt.geometricray property)": [[144, "sympy.physics.optics.gaussopt.GeometricRay.height"]], "q (sympy.physics.optics.gaussopt.beamparameter property)": [[144, "sympy.physics.optics.gaussopt.BeamParameter.q"]], "radius (sympy.physics.optics.gaussopt.beamparameter property)": [[144, "sympy.physics.optics.gaussopt.BeamParameter.radius"]], "rayleigh2waist() (in module sympy.physics.optics.gaussopt)": [[144, "sympy.physics.optics.gaussopt.rayleigh2waist"]], "sympy.physics.optics.gaussopt": [[144, "module-sympy.physics.optics.gaussopt"]], "w (sympy.physics.optics.gaussopt.beamparameter property)": [[144, "sympy.physics.optics.gaussopt.BeamParameter.w"]], "w_0 (sympy.physics.optics.gaussopt.beamparameter property)": [[144, "sympy.physics.optics.gaussopt.BeamParameter.w_0"]], "waist2rayleigh() (in module sympy.physics.optics.gaussopt)": [[144, "sympy.physics.optics.gaussopt.waist2rayleigh"]], "waist_approximation_limit (sympy.physics.optics.gaussopt.beamparameter property)": [[144, "sympy.physics.optics.gaussopt.BeamParameter.waist_approximation_limit"]], "medium (class in sympy.physics.optics.medium)": [[146, "sympy.physics.optics.medium.Medium"]], "refractive_index (sympy.physics.optics.medium.medium property)": [[146, "sympy.physics.optics.medium.Medium.refractive_index"]], "speed (sympy.physics.optics.medium.medium property)": [[146, "sympy.physics.optics.medium.Medium.speed"]], "sympy.physics.optics.medium": [[146, "module-sympy.physics.optics.medium"]], "half_wave_retarder() (in module sympy.physics.optics.polarization)": [[147, "sympy.physics.optics.polarization.half_wave_retarder"]], "jones_2_stokes() (in module sympy.physics.optics.polarization)": [[147, "sympy.physics.optics.polarization.jones_2_stokes"]], "jones_vector() (in module sympy.physics.optics.polarization)": [[147, "sympy.physics.optics.polarization.jones_vector"]], "linear_polarizer() (in module sympy.physics.optics.polarization)": [[147, "sympy.physics.optics.polarization.linear_polarizer"]], "mueller_matrix() (in module sympy.physics.optics.polarization)": [[147, "sympy.physics.optics.polarization.mueller_matrix"]], "phase_retarder() (in module sympy.physics.optics.polarization)": [[147, "sympy.physics.optics.polarization.phase_retarder"]], "polarizing_beam_splitter() (in module sympy.physics.optics.polarization)": [[147, "sympy.physics.optics.polarization.polarizing_beam_splitter"]], "quarter_wave_retarder() (in module sympy.physics.optics.polarization)": [[147, "sympy.physics.optics.polarization.quarter_wave_retarder"]], "reflective_filter() (in module sympy.physics.optics.polarization)": [[147, "sympy.physics.optics.polarization.reflective_filter"]], "stokes_vector() (in module sympy.physics.optics.polarization)": [[147, "sympy.physics.optics.polarization.stokes_vector"]], "sympy.physics.optics.polarization": [[147, "module-sympy.physics.optics.polarization"]], "transmissive_filter() (in module sympy.physics.optics.polarization)": [[147, "sympy.physics.optics.polarization.transmissive_filter"]], "brewster_angle() (in module sympy.physics.optics.utils)": [[148, "sympy.physics.optics.utils.brewster_angle"]], "critical_angle() (in module sympy.physics.optics.utils)": [[148, "sympy.physics.optics.utils.critical_angle"]], "deviation() (in module sympy.physics.optics.utils)": [[148, "sympy.physics.optics.utils.deviation"]], "fresnel_coefficients() (in module sympy.physics.optics.utils)": [[148, "sympy.physics.optics.utils.fresnel_coefficients"]], "hyperfocal_distance() (in module sympy.physics.optics.utils)": [[148, "sympy.physics.optics.utils.hyperfocal_distance"]], "lens_formula() (in module sympy.physics.optics.utils)": [[148, "sympy.physics.optics.utils.lens_formula"]], "lens_makers_formula() (in module sympy.physics.optics.utils)": [[148, "sympy.physics.optics.utils.lens_makers_formula"]], "mirror_formula() (in module sympy.physics.optics.utils)": [[148, "sympy.physics.optics.utils.mirror_formula"]], "refraction_angle() (in module sympy.physics.optics.utils)": [[148, "sympy.physics.optics.utils.refraction_angle"]], "sympy.physics.optics.utils": [[148, "module-sympy.physics.optics.utils"]], "transverse_magnification() (in module sympy.physics.optics.utils)": [[148, "sympy.physics.optics.utils.transverse_magnification"]], "twave (class in sympy.physics.optics.waves)": [[149, "sympy.physics.optics.waves.TWave"]], "amplitude (sympy.physics.optics.waves.twave property)": [[149, "sympy.physics.optics.waves.TWave.amplitude"]], "angular_velocity (sympy.physics.optics.waves.twave property)": [[149, "sympy.physics.optics.waves.TWave.angular_velocity"]], "frequency (sympy.physics.optics.waves.twave property)": [[149, "sympy.physics.optics.waves.TWave.frequency"]], "n (sympy.physics.optics.waves.twave property)": [[149, "sympy.physics.optics.waves.TWave.n"]], "phase (sympy.physics.optics.waves.twave property)": [[149, "sympy.physics.optics.waves.TWave.phase"]], "speed (sympy.physics.optics.waves.twave property)": [[149, "sympy.physics.optics.waves.TWave.speed"]], "sympy.physics.optics.waves": [[149, "module-sympy.physics.optics.waves"]], "time_period (sympy.physics.optics.waves.twave property)": [[149, "sympy.physics.optics.waves.TWave.time_period"]], "wavelength (sympy.physics.optics.waves.twave property)": [[149, "sympy.physics.optics.waves.TWave.wavelength"]], "wavenumber (sympy.physics.optics.waves.twave property)": [[149, "sympy.physics.optics.waves.TWave.wavenumber"]], "evaluate_pauli_product() (in module sympy.physics.paulialgebra)": [[150, "sympy.physics.paulialgebra.evaluate_pauli_product"]], "sympy.physics.paulialgebra": [[150, "module-sympy.physics.paulialgebra"]], "e_n() (in module sympy.physics.qho_1d)": [[151, "sympy.physics.qho_1d.E_n"]], "coherent_state() (in module sympy.physics.qho_1d)": [[151, "sympy.physics.qho_1d.coherent_state"]], "psi_n() (in module sympy.physics.qho_1d)": [[151, "sympy.physics.qho_1d.psi_n"]], "sympy.physics.qho_1d": [[151, "module-sympy.physics.qho_1d"]], "anticommutator (class in sympy.physics.quantum.anticommutator)": [[152, "sympy.physics.quantum.anticommutator.AntiCommutator"]], "doit() (sympy.physics.quantum.anticommutator.anticommutator method)": [[152, "sympy.physics.quantum.anticommutator.AntiCommutator.doit"]], "sympy.physics.quantum.anticommutator": [[152, "module-sympy.physics.quantum.anticommutator"]], "positionbra3d (class in sympy.physics.quantum.cartesian)": [[153, "sympy.physics.quantum.cartesian.PositionBra3D"]], "positionket3d (class in sympy.physics.quantum.cartesian)": [[153, "sympy.physics.quantum.cartesian.PositionKet3D"]], "positionstate3d (class in sympy.physics.quantum.cartesian)": [[153, "sympy.physics.quantum.cartesian.PositionState3D"]], "pxbra (class in sympy.physics.quantum.cartesian)": [[153, "sympy.physics.quantum.cartesian.PxBra"]], "pxket (class in sympy.physics.quantum.cartesian)": [[153, "sympy.physics.quantum.cartesian.PxKet"]], "pxop (class in sympy.physics.quantum.cartesian)": [[153, "sympy.physics.quantum.cartesian.PxOp"]], "xbra (class in sympy.physics.quantum.cartesian)": [[153, "sympy.physics.quantum.cartesian.XBra"]], "xket (class in sympy.physics.quantum.cartesian)": [[153, "sympy.physics.quantum.cartesian.XKet"]], "xop (class in sympy.physics.quantum.cartesian)": [[153, "sympy.physics.quantum.cartesian.XOp"]], "yop (class in sympy.physics.quantum.cartesian)": [[153, "sympy.physics.quantum.cartesian.YOp"]], "zop (class in sympy.physics.quantum.cartesian)": [[153, "sympy.physics.quantum.cartesian.ZOp"]], "momentum (sympy.physics.quantum.cartesian.pxbra property)": [[153, "sympy.physics.quantum.cartesian.PxBra.momentum"]], "momentum (sympy.physics.quantum.cartesian.pxket property)": [[153, "sympy.physics.quantum.cartesian.PxKet.momentum"]], "position (sympy.physics.quantum.cartesian.xbra property)": [[153, "sympy.physics.quantum.cartesian.XBra.position"]], "position (sympy.physics.quantum.cartesian.xket property)": [[153, "sympy.physics.quantum.cartesian.XKet.position"]], "position_x (sympy.physics.quantum.cartesian.positionstate3d property)": [[153, "sympy.physics.quantum.cartesian.PositionState3D.position_x"]], "position_y (sympy.physics.quantum.cartesian.positionstate3d property)": [[153, "sympy.physics.quantum.cartesian.PositionState3D.position_y"]], "position_z (sympy.physics.quantum.cartesian.positionstate3d property)": [[153, "sympy.physics.quantum.cartesian.PositionState3D.position_z"]], "sympy.physics.quantum.cartesian": [[153, "module-sympy.physics.quantum.cartesian"]], "cg (class in sympy.physics.quantum.cg)": [[154, "sympy.physics.quantum.cg.CG"]], "wigner3j (class in sympy.physics.quantum.cg)": [[154, "sympy.physics.quantum.cg.Wigner3j"]], "wigner6j (class in sympy.physics.quantum.cg)": [[154, "sympy.physics.quantum.cg.Wigner6j"]], "wigner9j (class in sympy.physics.quantum.cg)": [[154, "sympy.physics.quantum.cg.Wigner9j"]], "cg_simp() (in module sympy.physics.quantum.cg)": [[154, "sympy.physics.quantum.cg.cg_simp"]], "sympy.physics.quantum.cg": [[154, "module-sympy.physics.quantum.cg"]], "circuitplot (class in sympy.physics.quantum.circuitplot)": [[155, "sympy.physics.quantum.circuitplot.CircuitPlot"]], "createcgate() (in module sympy.physics.quantum.circuitplot)": [[155, "sympy.physics.quantum.circuitplot.CreateCGate"]], "mx (class in sympy.physics.quantum.circuitplot)": [[155, "sympy.physics.quantum.circuitplot.Mx"]], "mz (class in sympy.physics.quantum.circuitplot)": [[155, "sympy.physics.quantum.circuitplot.Mz"]], "circuit_plot() (in module sympy.physics.quantum.circuitplot)": [[155, "sympy.physics.quantum.circuitplot.circuit_plot"]], "control_line() (sympy.physics.quantum.circuitplot.circuitplot method)": [[155, "sympy.physics.quantum.circuitplot.CircuitPlot.control_line"]], "control_point() (sympy.physics.quantum.circuitplot.circuitplot method)": [[155, "sympy.physics.quantum.circuitplot.CircuitPlot.control_point"]], "labeller() (in module sympy.physics.quantum.circuitplot)": [[155, "sympy.physics.quantum.circuitplot.labeller"]], "not_point() (sympy.physics.quantum.circuitplot.circuitplot method)": [[155, "sympy.physics.quantum.circuitplot.CircuitPlot.not_point"]], "one_qubit_box() (sympy.physics.quantum.circuitplot.circuitplot method)": [[155, "sympy.physics.quantum.circuitplot.CircuitPlot.one_qubit_box"]], "swap_point() (sympy.physics.quantum.circuitplot.circuitplot method)": [[155, "sympy.physics.quantum.circuitplot.CircuitPlot.swap_point"]], "sympy.physics.quantum.circuitplot": [[155, "module-sympy.physics.quantum.circuitplot"]], "two_qubit_box() (sympy.physics.quantum.circuitplot.circuitplot method)": [[155, "sympy.physics.quantum.circuitplot.CircuitPlot.two_qubit_box"]], "update() (sympy.physics.quantum.circuitplot.circuitplot method)": [[155, "sympy.physics.quantum.circuitplot.CircuitPlot.update"]], "commutator (class in sympy.physics.quantum.commutator)": [[156, "sympy.physics.quantum.commutator.Commutator"]], "doit() (sympy.physics.quantum.commutator.commutator method)": [[156, "sympy.physics.quantum.commutator.Commutator.doit"]], "sympy.physics.quantum.commutator": [[156, "module-sympy.physics.quantum.commutator"]], "hbar (class in sympy.physics.quantum.constants)": [[157, "sympy.physics.quantum.constants.HBar"]], "sympy.physics.quantum.constants": [[157, "module-sympy.physics.quantum.constants"]], "dagger (class in sympy.physics.quantum.dagger)": [[158, "sympy.physics.quantum.dagger.Dagger"]], "sympy.physics.quantum.dagger": [[158, "module-sympy.physics.quantum.dagger"]], "cgate (class in sympy.physics.quantum.gate)": [[159, "sympy.physics.quantum.gate.CGate"]], "cgates (class in sympy.physics.quantum.gate)": [[159, "sympy.physics.quantum.gate.CGateS"]], "cnot (in module sympy.physics.quantum.gate)": [[159, "sympy.physics.quantum.gate.CNOT"]], "cnotgate (class in sympy.physics.quantum.gate)": [[159, "sympy.physics.quantum.gate.CNotGate"]], "gate (class in sympy.physics.quantum.gate)": [[159, "sympy.physics.quantum.gate.Gate"]], "h (in module sympy.physics.quantum.gate)": [[159, "sympy.physics.quantum.gate.H"]], "hadamardgate (class in sympy.physics.quantum.gate)": [[159, "sympy.physics.quantum.gate.HadamardGate"]], "identitygate (class in sympy.physics.quantum.gate)": [[159, "sympy.physics.quantum.gate.IdentityGate"]], "onequbitgate (class in sympy.physics.quantum.gate)": [[159, "sympy.physics.quantum.gate.OneQubitGate"]], "phase (in module sympy.physics.quantum.gate)": [[159, "sympy.physics.quantum.gate.Phase"]], "phasegate (class in sympy.physics.quantum.gate)": [[159, "sympy.physics.quantum.gate.PhaseGate"]], "s (in module sympy.physics.quantum.gate)": [[159, "sympy.physics.quantum.gate.S"]], "swap (in module sympy.physics.quantum.gate)": [[159, "sympy.physics.quantum.gate.SWAP"]], "swapgate (class in sympy.physics.quantum.gate)": [[159, "sympy.physics.quantum.gate.SwapGate"]], "t (in module sympy.physics.quantum.gate)": [[159, "sympy.physics.quantum.gate.T"]], "tgate (class in sympy.physics.quantum.gate)": [[159, "sympy.physics.quantum.gate.TGate"]], "twoqubitgate (class in sympy.physics.quantum.gate)": [[159, "sympy.physics.quantum.gate.TwoQubitGate"]], "ugate (class in sympy.physics.quantum.gate)": [[159, "sympy.physics.quantum.gate.UGate"]], "x (in module sympy.physics.quantum.gate)": [[159, "sympy.physics.quantum.gate.X"]], "xgate (class in sympy.physics.quantum.gate)": [[159, "sympy.physics.quantum.gate.XGate"]], "y (in module sympy.physics.quantum.gate)": [[159, "sympy.physics.quantum.gate.Y"]], "ygate (class in sympy.physics.quantum.gate)": [[159, "sympy.physics.quantum.gate.YGate"]], "z (in module sympy.physics.quantum.gate)": [[159, "sympy.physics.quantum.gate.Z"]], "zgate (class in sympy.physics.quantum.gate)": [[159, "sympy.physics.quantum.gate.ZGate"]], "controls (sympy.physics.quantum.gate.cgate property)": [[159, "sympy.physics.quantum.gate.CGate.controls"]], "controls (sympy.physics.quantum.gate.cnotgate property)": [[159, "sympy.physics.quantum.gate.CNotGate.controls"]], "decompose() (sympy.physics.quantum.gate.cgate method)": [[159, "sympy.physics.quantum.gate.CGate.decompose"]], "decompose() (sympy.physics.quantum.gate.swapgate method)": [[159, "sympy.physics.quantum.gate.SwapGate.decompose"]], "eval_controls() (sympy.physics.quantum.gate.cgate method)": [[159, "sympy.physics.quantum.gate.CGate.eval_controls"]], "gate (sympy.physics.quantum.gate.cgate property)": [[159, "sympy.physics.quantum.gate.CGate.gate"]], "gate (sympy.physics.quantum.gate.cnotgate property)": [[159, "sympy.physics.quantum.gate.CNotGate.gate"]], "gate_simp() (in module sympy.physics.quantum.gate)": [[159, "sympy.physics.quantum.gate.gate_simp"]], "gate_sort() (in module sympy.physics.quantum.gate)": [[159, "sympy.physics.quantum.gate.gate_sort"]], "get_target_matrix() (sympy.physics.quantum.gate.gate method)": [[159, "sympy.physics.quantum.gate.Gate.get_target_matrix"]], "get_target_matrix() (sympy.physics.quantum.gate.ugate method)": [[159, "sympy.physics.quantum.gate.UGate.get_target_matrix"]], "min_qubits (sympy.physics.quantum.gate.cgate property)": [[159, "sympy.physics.quantum.gate.CGate.min_qubits"]], "min_qubits (sympy.physics.quantum.gate.cnotgate property)": [[159, "sympy.physics.quantum.gate.CNotGate.min_qubits"]], "min_qubits (sympy.physics.quantum.gate.gate property)": [[159, "sympy.physics.quantum.gate.Gate.min_qubits"]], "normalized() (in module sympy.physics.quantum.gate)": [[159, "sympy.physics.quantum.gate.normalized"]], "nqubits (sympy.physics.quantum.gate.cgate property)": [[159, "sympy.physics.quantum.gate.CGate.nqubits"]], "nqubits (sympy.physics.quantum.gate.gate property)": [[159, "sympy.physics.quantum.gate.Gate.nqubits"]], "plot_gate() (sympy.physics.quantum.gate.cgate method)": [[159, "sympy.physics.quantum.gate.CGate.plot_gate"]], "random_circuit() (in module sympy.physics.quantum.gate)": [[159, "sympy.physics.quantum.gate.random_circuit"]], "sympy.physics.quantum.gate": [[159, "module-sympy.physics.quantum.gate"]], "targets (sympy.physics.quantum.gate.cgate property)": [[159, "sympy.physics.quantum.gate.CGate.targets"]], "targets (sympy.physics.quantum.gate.cnotgate property)": [[159, "sympy.physics.quantum.gate.CNotGate.targets"]], "targets (sympy.physics.quantum.gate.gate property)": [[159, "sympy.physics.quantum.gate.Gate.targets"]], "targets (sympy.physics.quantum.gate.ugate property)": [[159, "sympy.physics.quantum.gate.UGate.targets"]], "oraclegate (class in sympy.physics.quantum.grover)": [[160, "sympy.physics.quantum.grover.OracleGate"]], "wgate (class in sympy.physics.quantum.grover)": [[160, "sympy.physics.quantum.grover.WGate"]], "apply_grover() (in module sympy.physics.quantum.grover)": [[160, "sympy.physics.quantum.grover.apply_grover"]], "grover_iteration() (in module sympy.physics.quantum.grover)": [[160, "sympy.physics.quantum.grover.grover_iteration"]], "search_function (sympy.physics.quantum.grover.oraclegate property)": [[160, "sympy.physics.quantum.grover.OracleGate.search_function"]], "superposition_basis() (in module sympy.physics.quantum.grover)": [[160, "sympy.physics.quantum.grover.superposition_basis"]], "sympy.physics.quantum.grover": [[160, "module-sympy.physics.quantum.grover"]], "targets (sympy.physics.quantum.grover.oraclegate property)": [[160, "sympy.physics.quantum.grover.OracleGate.targets"]], "complexspace (class in sympy.physics.quantum.hilbert)": [[161, "sympy.physics.quantum.hilbert.ComplexSpace"]], "directsumhilbertspace (class in sympy.physics.quantum.hilbert)": [[161, "sympy.physics.quantum.hilbert.DirectSumHilbertSpace"]], "fockspace (class in sympy.physics.quantum.hilbert)": [[161, "sympy.physics.quantum.hilbert.FockSpace"]], "hilbertspace (class in sympy.physics.quantum.hilbert)": [[161, "sympy.physics.quantum.hilbert.HilbertSpace"]], "l2 (class in sympy.physics.quantum.hilbert)": [[161, "sympy.physics.quantum.hilbert.L2"]], "tensorpowerhilbertspace (class in sympy.physics.quantum.hilbert)": [[161, "sympy.physics.quantum.hilbert.TensorPowerHilbertSpace"]], "tensorproducthilbertspace (class in sympy.physics.quantum.hilbert)": [[161, "sympy.physics.quantum.hilbert.TensorProductHilbertSpace"]], "dimension (sympy.physics.quantum.hilbert.hilbertspace property)": [[161, "sympy.physics.quantum.hilbert.HilbertSpace.dimension"]], "eval() (sympy.physics.quantum.hilbert.directsumhilbertspace class method)": [[161, "sympy.physics.quantum.hilbert.DirectSumHilbertSpace.eval"]], "eval() (sympy.physics.quantum.hilbert.tensorproducthilbertspace class method)": [[161, "sympy.physics.quantum.hilbert.TensorProductHilbertSpace.eval"]], "spaces (sympy.physics.quantum.hilbert.directsumhilbertspace property)": [[161, "sympy.physics.quantum.hilbert.DirectSumHilbertSpace.spaces"]], "spaces (sympy.physics.quantum.hilbert.tensorproducthilbertspace property)": [[161, "sympy.physics.quantum.hilbert.TensorProductHilbertSpace.spaces"]], "sympy.physics.quantum.hilbert": [[161, "module-sympy.physics.quantum.hilbert"]], "innerproduct (class in sympy.physics.quantum.innerproduct)": [[163, "sympy.physics.quantum.innerproduct.InnerProduct"]], "sympy.physics.quantum.innerproduct": [[163, "module-sympy.physics.quantum.innerproduct"]], "differentialoperator (class in sympy.physics.quantum.operator)": [[164, "sympy.physics.quantum.operator.DifferentialOperator"]], "hermitianoperator (class in sympy.physics.quantum.operator)": [[164, "sympy.physics.quantum.operator.HermitianOperator"]], "identityoperator (class in sympy.physics.quantum.operator)": [[164, "sympy.physics.quantum.operator.IdentityOperator"]], "operator (class in sympy.physics.quantum.operator)": [[164, "sympy.physics.quantum.operator.Operator"]], "outerproduct (class in sympy.physics.quantum.operator)": [[164, "sympy.physics.quantum.operator.OuterProduct"]], "unitaryoperator (class in sympy.physics.quantum.operator)": [[164, "sympy.physics.quantum.operator.UnitaryOperator"]], "bra (sympy.physics.quantum.operator.outerproduct property)": [[164, "sympy.physics.quantum.operator.OuterProduct.bra"]], "expr (sympy.physics.quantum.operator.differentialoperator property)": [[164, "sympy.physics.quantum.operator.DifferentialOperator.expr"]], "free_symbols (sympy.physics.quantum.operator.differentialoperator property)": [[164, "sympy.physics.quantum.operator.DifferentialOperator.free_symbols"]], "function (sympy.physics.quantum.operator.differentialoperator property)": [[164, "sympy.physics.quantum.operator.DifferentialOperator.function"]], "ket (sympy.physics.quantum.operator.outerproduct property)": [[164, "sympy.physics.quantum.operator.OuterProduct.ket"]], "sympy.physics.quantum.operator": [[164, "module-sympy.physics.quantum.operator"]], "variables (sympy.physics.quantum.operator.differentialoperator property)": [[164, "sympy.physics.quantum.operator.DifferentialOperator.variables"]], "operators_to_state() (in module sympy.physics.quantum.operatorset)": [[165, "sympy.physics.quantum.operatorset.operators_to_state"]], "state_to_operators() (in module sympy.physics.quantum.operatorset)": [[165, "sympy.physics.quantum.operatorset.state_to_operators"]], "sympy.physics.quantum.operatorset": [[165, "module-sympy.physics.quantum.operatorset"]], "piabbra (class in sympy.physics.quantum.piab)": [[166, "sympy.physics.quantum.piab.PIABBra"]], "piabhamiltonian (class in sympy.physics.quantum.piab)": [[166, "sympy.physics.quantum.piab.PIABHamiltonian"]], "piabket (class in sympy.physics.quantum.piab)": [[166, "sympy.physics.quantum.piab.PIABKet"]], "sympy.physics.quantum.piab": [[166, "module-sympy.physics.quantum.piab"]], "qapply() (in module sympy.physics.quantum.qapply)": [[167, "sympy.physics.quantum.qapply.qapply"]], "sympy.physics.quantum.qapply": [[167, "module-sympy.physics.quantum.qapply"]], "iqft (class in sympy.physics.quantum.qft)": [[168, "sympy.physics.quantum.qft.IQFT"]], "qft (class in sympy.physics.quantum.qft)": [[168, "sympy.physics.quantum.qft.QFT"]], "rk (in module sympy.physics.quantum.qft)": [[168, "sympy.physics.quantum.qft.Rk"]], "rkgate (class in sympy.physics.quantum.qft)": [[168, "sympy.physics.quantum.qft.RkGate"]], "decompose() (sympy.physics.quantum.qft.iqft method)": [[168, "sympy.physics.quantum.qft.IQFT.decompose"]], "decompose() (sympy.physics.quantum.qft.qft method)": [[168, "sympy.physics.quantum.qft.QFT.decompose"]], "sympy.physics.quantum.qft": [[168, "module-sympy.physics.quantum.qft"]], "intqubit (class in sympy.physics.quantum.qubit)": [[169, "sympy.physics.quantum.qubit.IntQubit"]], "intqubitbra (class in sympy.physics.quantum.qubit)": [[169, "sympy.physics.quantum.qubit.IntQubitBra"]], "qubit (class in sympy.physics.quantum.qubit)": [[169, "sympy.physics.quantum.qubit.Qubit"]], "qubitbra (class in sympy.physics.quantum.qubit)": [[169, "sympy.physics.quantum.qubit.QubitBra"]], "matrix_to_density() (in module sympy.physics.quantum.qubit)": [[169, "sympy.physics.quantum.qubit.matrix_to_density"]], "matrix_to_qubit() (in module sympy.physics.quantum.qubit)": [[169, "sympy.physics.quantum.qubit.matrix_to_qubit"]], "measure_all() (in module sympy.physics.quantum.qubit)": [[169, "sympy.physics.quantum.qubit.measure_all"]], "measure_all_oneshot() (in module sympy.physics.quantum.qubit)": [[169, "sympy.physics.quantum.qubit.measure_all_oneshot"]], "measure_partial() (in module sympy.physics.quantum.qubit)": [[169, "sympy.physics.quantum.qubit.measure_partial"]], "measure_partial_oneshot() (in module sympy.physics.quantum.qubit)": [[169, "sympy.physics.quantum.qubit.measure_partial_oneshot"]], "qubit_to_matrix() (in module sympy.physics.quantum.qubit)": [[169, "sympy.physics.quantum.qubit.qubit_to_matrix"]], "sympy.physics.quantum.qubit": [[169, "module-sympy.physics.quantum.qubit"]], "enumerate_states() (in module sympy.physics.quantum.represent)": [[170, "sympy.physics.quantum.represent.enumerate_states"]], "get_basis() (in module sympy.physics.quantum.represent)": [[170, "sympy.physics.quantum.represent.get_basis"]], "integrate_result() (in module sympy.physics.quantum.represent)": [[170, "sympy.physics.quantum.represent.integrate_result"]], "rep_expectation() (in module sympy.physics.quantum.represent)": [[170, "sympy.physics.quantum.represent.rep_expectation"]], "rep_innerproduct() (in module sympy.physics.quantum.represent)": [[170, "sympy.physics.quantum.represent.rep_innerproduct"]], "represent() (in module sympy.physics.quantum.represent)": [[170, "sympy.physics.quantum.represent.represent"]], "sympy.physics.quantum.represent": [[170, "module-sympy.physics.quantum.represent"]], "cmod (class in sympy.physics.quantum.shor)": [[171, "sympy.physics.quantum.shor.CMod"]], "n (sympy.physics.quantum.shor.cmod property)": [[171, "sympy.physics.quantum.shor.CMod.N"]], "a (sympy.physics.quantum.shor.cmod property)": [[171, "sympy.physics.quantum.shor.CMod.a"]], "period_find() (in module sympy.physics.quantum.shor)": [[171, "sympy.physics.quantum.shor.period_find"]], "shor() (in module sympy.physics.quantum.shor)": [[171, "sympy.physics.quantum.shor.shor"]], "sympy.physics.quantum.shor": [[171, "module-sympy.physics.quantum.shor"]], "t (sympy.physics.quantum.shor.cmod property)": [[171, "sympy.physics.quantum.shor.CMod.t"]], "d() (sympy.physics.quantum.spin.rotation class method)": [[172, "sympy.physics.quantum.spin.Rotation.D"], [172, "sympy.physics.quantum.spin.Rotation.d"]], "j2op (class in sympy.physics.quantum.spin)": [[172, "sympy.physics.quantum.spin.J2Op"]], "jxbra (class in sympy.physics.quantum.spin)": [[172, "sympy.physics.quantum.spin.JxBra"]], "jxbracoupled (class in sympy.physics.quantum.spin)": [[172, "sympy.physics.quantum.spin.JxBraCoupled"]], "jxket (class in sympy.physics.quantum.spin)": [[172, "sympy.physics.quantum.spin.JxKet"]], "jxketcoupled (class in sympy.physics.quantum.spin)": [[172, "sympy.physics.quantum.spin.JxKetCoupled"]], "jybra (class in sympy.physics.quantum.spin)": [[172, "sympy.physics.quantum.spin.JyBra"]], "jybracoupled (class in sympy.physics.quantum.spin)": [[172, "sympy.physics.quantum.spin.JyBraCoupled"]], "jyket (class in sympy.physics.quantum.spin)": [[172, "sympy.physics.quantum.spin.JyKet"]], "jyketcoupled (class in sympy.physics.quantum.spin)": [[172, "sympy.physics.quantum.spin.JyKetCoupled"]], "jzbra (class in sympy.physics.quantum.spin)": [[172, "sympy.physics.quantum.spin.JzBra"]], "jzbracoupled (class in sympy.physics.quantum.spin)": [[172, "sympy.physics.quantum.spin.JzBraCoupled"]], "jzket (class in sympy.physics.quantum.spin)": [[172, "sympy.physics.quantum.spin.JzKet"]], "jzketcoupled (class in sympy.physics.quantum.spin)": [[172, "sympy.physics.quantum.spin.JzKetCoupled"]], "jzop (class in sympy.physics.quantum.spin)": [[172, "sympy.physics.quantum.spin.JzOp"]], "rotation (class in sympy.physics.quantum.spin)": [[172, "sympy.physics.quantum.spin.Rotation"]], "wignerd (class in sympy.physics.quantum.spin)": [[172, "sympy.physics.quantum.spin.WignerD"]], "couple() (in module sympy.physics.quantum.spin)": [[172, "sympy.physics.quantum.spin.couple"]], "sympy.physics.quantum.spin": [[172, "module-sympy.physics.quantum.spin"]], "uncouple() (in module sympy.physics.quantum.spin)": [[172, "sympy.physics.quantum.spin.uncouple"]], "bra (class in sympy.physics.quantum.state)": [[173, "sympy.physics.quantum.state.Bra"]], "brabase (class in sympy.physics.quantum.state)": [[173, "sympy.physics.quantum.state.BraBase"]], "ket (class in sympy.physics.quantum.state)": [[173, "sympy.physics.quantum.state.Ket"]], "ketbase (class in sympy.physics.quantum.state)": [[173, "sympy.physics.quantum.state.KetBase"]], "orthogonalbra (class in sympy.physics.quantum.state)": [[173, "sympy.physics.quantum.state.OrthogonalBra"]], "orthogonalket (class in sympy.physics.quantum.state)": [[173, "sympy.physics.quantum.state.OrthogonalKet"]], "orthogonalstate (class in sympy.physics.quantum.state)": [[173, "sympy.physics.quantum.state.OrthogonalState"]], "state (class in sympy.physics.quantum.state)": [[173, "sympy.physics.quantum.state.State"]], "statebase (class in sympy.physics.quantum.state)": [[173, "sympy.physics.quantum.state.StateBase"]], "timedepbra (class in sympy.physics.quantum.state)": [[173, "sympy.physics.quantum.state.TimeDepBra"]], "timedepket (class in sympy.physics.quantum.state)": [[173, "sympy.physics.quantum.state.TimeDepKet"]], "timedepstate (class in sympy.physics.quantum.state)": [[173, "sympy.physics.quantum.state.TimeDepState"]], "wavefunction (class in sympy.physics.quantum.state)": [[173, "sympy.physics.quantum.state.Wavefunction"]], "dual (sympy.physics.quantum.state.statebase property)": [[173, "sympy.physics.quantum.state.StateBase.dual"]], "dual_class() (sympy.physics.quantum.state.statebase class method)": [[173, "sympy.physics.quantum.state.StateBase.dual_class"]], "expr (sympy.physics.quantum.state.wavefunction property)": [[173, "sympy.physics.quantum.state.Wavefunction.expr"]], "is_commutative (sympy.physics.quantum.state.wavefunction property)": [[173, "sympy.physics.quantum.state.Wavefunction.is_commutative"]], "is_normalized (sympy.physics.quantum.state.wavefunction property)": [[173, "sympy.physics.quantum.state.Wavefunction.is_normalized"]], "label (sympy.physics.quantum.state.timedepstate property)": [[173, "sympy.physics.quantum.state.TimeDepState.label"]], "limits (sympy.physics.quantum.state.wavefunction property)": [[173, "sympy.physics.quantum.state.Wavefunction.limits"]], "norm (sympy.physics.quantum.state.wavefunction property)": [[173, "sympy.physics.quantum.state.Wavefunction.norm"]], "normalize() (sympy.physics.quantum.state.wavefunction method)": [[173, "sympy.physics.quantum.state.Wavefunction.normalize"]], "operators (sympy.physics.quantum.state.statebase property)": [[173, "sympy.physics.quantum.state.StateBase.operators"]], "prob() (sympy.physics.quantum.state.wavefunction method)": [[173, "sympy.physics.quantum.state.Wavefunction.prob"]], "sympy.physics.quantum.state": [[173, "module-sympy.physics.quantum.state"]], "time (sympy.physics.quantum.state.timedepstate property)": [[173, "sympy.physics.quantum.state.TimeDepState.time"]], "variables (sympy.physics.quantum.state.wavefunction property)": [[173, "sympy.physics.quantum.state.Wavefunction.variables"]], "tensorproduct (class in sympy.physics.quantum.tensorproduct)": [[174, "sympy.physics.quantum.tensorproduct.TensorProduct"]], "sympy.physics.quantum.tensorproduct": [[174, "module-sympy.physics.quantum.tensorproduct"]], "tensor_product_simp() (in module sympy.physics.quantum.tensorproduct)": [[174, "sympy.physics.quantum.tensorproduct.tensor_product_simp"]], "annihilateboson (class in sympy.physics.secondquant)": [[175, "sympy.physics.secondquant.AnnihilateBoson"]], "annihilatefermion (class in sympy.physics.secondquant)": [[175, "sympy.physics.secondquant.AnnihilateFermion"]], "antisymmetrictensor (class in sympy.physics.secondquant)": [[175, "sympy.physics.secondquant.AntiSymmetricTensor"]], "b (in module sympy.physics.secondquant)": [[175, "sympy.physics.secondquant.B"]], "bbra (in module sympy.physics.secondquant)": [[175, "sympy.physics.secondquant.BBra"]], "bket (in module sympy.physics.secondquant)": [[175, "sympy.physics.secondquant.BKet"]], "bd (in module sympy.physics.secondquant)": [[175, "sympy.physics.secondquant.Bd"]], "bosonicbasis (class in sympy.physics.secondquant)": [[175, "sympy.physics.secondquant.BosonicBasis"]], "commutator (class in sympy.physics.secondquant)": [[175, "sympy.physics.secondquant.Commutator"]], "createboson (class in sympy.physics.secondquant)": [[175, "sympy.physics.secondquant.CreateBoson"]], "createfermion (class in sympy.physics.secondquant)": [[175, "sympy.physics.secondquant.CreateFermion"]], "dagger (class in sympy.physics.secondquant)": [[175, "sympy.physics.secondquant.Dagger"]], "f (in module sympy.physics.secondquant)": [[175, "sympy.physics.secondquant.F"]], "fbra (in module sympy.physics.secondquant)": [[175, "sympy.physics.secondquant.FBra"]], "fket (in module sympy.physics.secondquant)": [[175, "sympy.physics.secondquant.FKet"]], "fd (in module sympy.physics.secondquant)": [[175, "sympy.physics.secondquant.Fd"]], "fixedbosonicbasis (class in sympy.physics.secondquant)": [[175, "sympy.physics.secondquant.FixedBosonicBasis"]], "fockstate (class in sympy.physics.secondquant)": [[175, "sympy.physics.secondquant.FockState"]], "fockstatebosonbra (class in sympy.physics.secondquant)": [[175, "sympy.physics.secondquant.FockStateBosonBra"]], "fockstatebosonket (class in sympy.physics.secondquant)": [[175, "sympy.physics.secondquant.FockStateBosonKet"]], "fockstatebra (class in sympy.physics.secondquant)": [[175, "sympy.physics.secondquant.FockStateBra"]], "fockstatefermionbra (class in sympy.physics.secondquant)": [[175, "sympy.physics.secondquant.FockStateFermionBra"]], "fockstatefermionket (class in sympy.physics.secondquant)": [[175, "sympy.physics.secondquant.FockStateFermionKet"]], "fockstateket (class in sympy.physics.secondquant)": [[175, "sympy.physics.secondquant.FockStateKet"]], "innerproduct (class in sympy.physics.secondquant)": [[175, "sympy.physics.secondquant.InnerProduct"]], "kroneckerdelta (class in sympy.physics.secondquant)": [[175, "sympy.physics.secondquant.KroneckerDelta"]], "no (class in sympy.physics.secondquant)": [[175, "sympy.physics.secondquant.NO"]], "permutationoperator (class in sympy.physics.secondquant)": [[175, "sympy.physics.secondquant.PermutationOperator"]], "varbosonicbasis (class in sympy.physics.secondquant)": [[175, "sympy.physics.secondquant.VarBosonicBasis"]], "apply_operator() (sympy.physics.secondquant.annihilateboson method)": [[175, "sympy.physics.secondquant.AnnihilateBoson.apply_operator"]], "apply_operator() (sympy.physics.secondquant.annihilatefermion method)": [[175, "sympy.physics.secondquant.AnnihilateFermion.apply_operator"]], "apply_operator() (sympy.physics.secondquant.createboson method)": [[175, "sympy.physics.secondquant.CreateBoson.apply_operator"]], "apply_operator() (sympy.physics.secondquant.createfermion method)": [[175, "sympy.physics.secondquant.CreateFermion.apply_operator"]], "apply_operators() (in module sympy.physics.secondquant)": [[175, "sympy.physics.secondquant.apply_operators"]], "bra (sympy.physics.secondquant.innerproduct property)": [[175, "sympy.physics.secondquant.InnerProduct.bra"]], "contraction() (in module sympy.physics.secondquant)": [[175, "sympy.physics.secondquant.contraction"]], "doit() (sympy.physics.secondquant.commutator method)": [[175, "sympy.physics.secondquant.Commutator.doit"]], "doit() (sympy.physics.secondquant.no method)": [[175, "sympy.physics.secondquant.NO.doit"]], "eval() (sympy.physics.secondquant.commutator class method)": [[175, "sympy.physics.secondquant.Commutator.eval"]], "eval() (sympy.physics.secondquant.dagger class method)": [[175, "sympy.physics.secondquant.Dagger.eval"]], "eval() (sympy.physics.secondquant.kroneckerdelta class method)": [[175, "sympy.physics.secondquant.KroneckerDelta.eval"]], "evaluate_deltas() (in module sympy.physics.secondquant)": [[175, "sympy.physics.secondquant.evaluate_deltas"]], "get_permuted() (sympy.physics.secondquant.permutationoperator method)": [[175, "sympy.physics.secondquant.PermutationOperator.get_permuted"]], "get_subno() (sympy.physics.secondquant.no method)": [[175, "sympy.physics.secondquant.NO.get_subNO"]], "has_q_annihilators (sympy.physics.secondquant.no property)": [[175, "sympy.physics.secondquant.NO.has_q_annihilators"]], "has_q_creators (sympy.physics.secondquant.no property)": [[175, "sympy.physics.secondquant.NO.has_q_creators"]], "index() (sympy.physics.secondquant.fixedbosonicbasis method)": [[175, "sympy.physics.secondquant.FixedBosonicBasis.index"]], "index() (sympy.physics.secondquant.varbosonicbasis method)": [[175, "sympy.physics.secondquant.VarBosonicBasis.index"]], "indices_contain_equal_information (sympy.physics.secondquant.kroneckerdelta property)": [[175, "sympy.physics.secondquant.KroneckerDelta.indices_contain_equal_information"]], "is_above_fermi (sympy.physics.secondquant.kroneckerdelta property)": [[175, "sympy.physics.secondquant.KroneckerDelta.is_above_fermi"]], "is_below_fermi (sympy.physics.secondquant.kroneckerdelta property)": [[175, "sympy.physics.secondquant.KroneckerDelta.is_below_fermi"]], "is_only_above_fermi (sympy.physics.secondquant.kroneckerdelta property)": [[175, "sympy.physics.secondquant.KroneckerDelta.is_only_above_fermi"]], "is_only_below_fermi (sympy.physics.secondquant.kroneckerdelta property)": [[175, "sympy.physics.secondquant.KroneckerDelta.is_only_below_fermi"]], "is_only_q_annihilator (sympy.physics.secondquant.annihilatefermion property)": [[175, "sympy.physics.secondquant.AnnihilateFermion.is_only_q_annihilator"]], "is_only_q_annihilator (sympy.physics.secondquant.createfermion property)": [[175, "sympy.physics.secondquant.CreateFermion.is_only_q_annihilator"]], "is_only_q_creator (sympy.physics.secondquant.annihilatefermion property)": [[175, "sympy.physics.secondquant.AnnihilateFermion.is_only_q_creator"]], "is_only_q_creator (sympy.physics.secondquant.createfermion property)": [[175, "sympy.physics.secondquant.CreateFermion.is_only_q_creator"]], "is_q_annihilator (sympy.physics.secondquant.annihilatefermion property)": [[175, "sympy.physics.secondquant.AnnihilateFermion.is_q_annihilator"]], "is_q_annihilator (sympy.physics.secondquant.createfermion property)": [[175, "sympy.physics.secondquant.CreateFermion.is_q_annihilator"]], "is_q_creator (sympy.physics.secondquant.annihilatefermion property)": [[175, "sympy.physics.secondquant.AnnihilateFermion.is_q_creator"]], "is_q_creator (sympy.physics.secondquant.createfermion property)": [[175, "sympy.physics.secondquant.CreateFermion.is_q_creator"]], "iter_q_annihilators() (sympy.physics.secondquant.no method)": [[175, "sympy.physics.secondquant.NO.iter_q_annihilators"]], "iter_q_creators() (sympy.physics.secondquant.no method)": [[175, "sympy.physics.secondquant.NO.iter_q_creators"]], "ket (sympy.physics.secondquant.innerproduct property)": [[175, "sympy.physics.secondquant.InnerProduct.ket"]], "killable_index (sympy.physics.secondquant.kroneckerdelta property)": [[175, "sympy.physics.secondquant.KroneckerDelta.killable_index"]], "lower (sympy.physics.secondquant.antisymmetrictensor property)": [[175, "sympy.physics.secondquant.AntiSymmetricTensor.lower"]], "matrix_rep() (in module sympy.physics.secondquant)": [[175, "sympy.physics.secondquant.matrix_rep"]], "preferred_index (sympy.physics.secondquant.kroneckerdelta property)": [[175, "sympy.physics.secondquant.KroneckerDelta.preferred_index"]], "simplify_index_permutations() (in module sympy.physics.secondquant)": [[175, "sympy.physics.secondquant.simplify_index_permutations"]], "state() (sympy.physics.secondquant.fixedbosonicbasis method)": [[175, "sympy.physics.secondquant.FixedBosonicBasis.state"]], "state() (sympy.physics.secondquant.varbosonicbasis method)": [[175, "sympy.physics.secondquant.VarBosonicBasis.state"]], "substitute_dummies() (in module sympy.physics.secondquant)": [[175, "sympy.physics.secondquant.substitute_dummies"]], "symbol (sympy.physics.secondquant.antisymmetrictensor property)": [[175, "sympy.physics.secondquant.AntiSymmetricTensor.symbol"]], "sympy.physics.secondquant": [[175, "module-sympy.physics.secondquant"]], "upper (sympy.physics.secondquant.antisymmetrictensor property)": [[175, "sympy.physics.secondquant.AntiSymmetricTensor.upper"]], "wicks() (in module sympy.physics.secondquant)": [[175, "sympy.physics.secondquant.wicks"]], "e_nl() (in module sympy.physics.sho)": [[176, "sympy.physics.sho.E_nl"]], "r_nl() (in module sympy.physics.sho)": [[176, "sympy.physics.sho.R_nl"]], "sympy.physics.sho": [[176, "module-sympy.physics.sho"]], "dimension (class in sympy.physics.units.dimensions)": [[177, "sympy.physics.units.dimensions.Dimension"]], "dimensionsystem (class in sympy.physics.units.dimensions)": [[177, "sympy.physics.units.dimensions.DimensionSystem"]], "can_transf_matrix (sympy.physics.units.dimensions.dimensionsystem property)": [[177, "sympy.physics.units.dimensions.DimensionSystem.can_transf_matrix"]], "dim (sympy.physics.units.dimensions.dimensionsystem property)": [[177, "sympy.physics.units.dimensions.DimensionSystem.dim"]], "dim_can_vector() (sympy.physics.units.dimensions.dimensionsystem method)": [[177, "sympy.physics.units.dimensions.DimensionSystem.dim_can_vector"]], "dim_vector() (sympy.physics.units.dimensions.dimensionsystem method)": [[177, "sympy.physics.units.dimensions.DimensionSystem.dim_vector"]], "has_integer_powers() (sympy.physics.units.dimensions.dimension method)": [[177, "sympy.physics.units.dimensions.Dimension.has_integer_powers"]], "inv_can_transf_matrix (sympy.physics.units.dimensions.dimensionsystem property)": [[177, "sympy.physics.units.dimensions.DimensionSystem.inv_can_transf_matrix"]], "is_consistent (sympy.physics.units.dimensions.dimensionsystem property)": [[177, "sympy.physics.units.dimensions.DimensionSystem.is_consistent"]], "is_dimensionless() (sympy.physics.units.dimensions.dimensionsystem method)": [[177, "sympy.physics.units.dimensions.DimensionSystem.is_dimensionless"]], "list_can_dims (sympy.physics.units.dimensions.dimensionsystem property)": [[177, "sympy.physics.units.dimensions.DimensionSystem.list_can_dims"]], "print_dim_base() (sympy.physics.units.dimensions.dimensionsystem method)": [[177, "sympy.physics.units.dimensions.DimensionSystem.print_dim_base"]], "sympy.physics.units.dimensions": [[177, "module-sympy.physics.units.dimensions"]], "prefix (class in sympy.physics.units.prefixes)": [[181, "sympy.physics.units.prefixes.Prefix"]], "sympy.physics.units.prefixes": [[181, "module-sympy.physics.units.prefixes"]], "quantity (class in sympy.physics.units.quantities)": [[182, "sympy.physics.units.quantities.Quantity"]], "abbrev (sympy.physics.units.quantities.quantity property)": [[182, "sympy.physics.units.quantities.Quantity.abbrev"]], "convert_to() (in module sympy.physics.units.util)": [[182, "sympy.physics.units.util.convert_to"]], "convert_to() (sympy.physics.units.quantities.quantity method)": [[182, "sympy.physics.units.quantities.Quantity.convert_to"]], "free_symbols (sympy.physics.units.quantities.quantity property)": [[182, "sympy.physics.units.quantities.Quantity.free_symbols"]], "is_prefixed (sympy.physics.units.quantities.quantity property)": [[182, "sympy.physics.units.quantities.Quantity.is_prefixed"]], "scale_factor (sympy.physics.units.quantities.quantity property)": [[182, "sympy.physics.units.quantities.Quantity.scale_factor"]], "set_global_relative_scale_factor() (sympy.physics.units.quantities.quantity method)": [[182, "sympy.physics.units.quantities.Quantity.set_global_relative_scale_factor"]], "sympy.physics.units.quantities": [[182, "module-sympy.physics.units.quantities"]], "sympy.physics.units.util": [[182, "module-sympy.physics.units.util"]], "unitsystem (class in sympy.physics.units.unitsystem)": [[183, "sympy.physics.units.unitsystem.UnitSystem"]], "dim (sympy.physics.units.unitsystem.unitsystem property)": [[183, "sympy.physics.units.unitsystem.UnitSystem.dim"]], "extend() (sympy.physics.units.unitsystem.unitsystem method)": [[183, "sympy.physics.units.unitsystem.UnitSystem.extend"]], "get_units_non_prefixed() (sympy.physics.units.unitsystem.unitsystem method)": [[183, "sympy.physics.units.unitsystem.UnitSystem.get_units_non_prefixed"]], "is_consistent (sympy.physics.units.unitsystem.unitsystem property)": [[183, "sympy.physics.units.unitsystem.UnitSystem.is_consistent"]], "sympy.physics.units.unitsystem": [[183, "module-sympy.physics.units.unitsystem"]], "coordinatesym (class in sympy.physics.vector.frame)": [[185, "sympy.physics.vector.frame.CoordinateSym"]], "dyadic (class in sympy.physics.vector.dyadic)": [[185, "sympy.physics.vector.dyadic.Dyadic"]], "referenceframe (class in sympy.physics.vector.frame)": [[185, "sympy.physics.vector.frame.ReferenceFrame"]], "vector (class in sympy.physics.vector.vector)": [[185, "sympy.physics.vector.vector.Vector"]], "ang_acc_in() (sympy.physics.vector.frame.referenceframe method)": [[185, "sympy.physics.vector.frame.ReferenceFrame.ang_acc_in"]], "ang_vel_in() (sympy.physics.vector.frame.referenceframe method)": [[185, "sympy.physics.vector.frame.ReferenceFrame.ang_vel_in"]], "angle_between() (sympy.physics.vector.vector.vector method)": [[185, "sympy.physics.vector.vector.Vector.angle_between"]], "applyfunc() (sympy.physics.vector.dyadic.dyadic method)": [[185, "sympy.physics.vector.dyadic.Dyadic.applyfunc"]], "applyfunc() (sympy.physics.vector.vector.vector method)": [[185, "sympy.physics.vector.vector.Vector.applyfunc"]], "cross() (sympy.physics.vector.dyadic.dyadic method)": [[185, "sympy.physics.vector.dyadic.Dyadic.cross"]], "cross() (sympy.physics.vector.vector.vector method)": [[185, "sympy.physics.vector.vector.Vector.cross"]], "dcm() (sympy.physics.vector.frame.referenceframe method)": [[185, "sympy.physics.vector.frame.ReferenceFrame.dcm"]], "diff() (sympy.physics.vector.vector.vector method)": [[185, "sympy.physics.vector.vector.Vector.diff"]], "doit() (sympy.physics.vector.dyadic.dyadic method)": [[185, "sympy.physics.vector.dyadic.Dyadic.doit"]], "doit() (sympy.physics.vector.vector.vector method)": [[185, "sympy.physics.vector.vector.Vector.doit"]], "dot() (sympy.physics.vector.dyadic.dyadic method)": [[185, "sympy.physics.vector.dyadic.Dyadic.dot"]], "dot() (sympy.physics.vector.vector.vector method)": [[185, "sympy.physics.vector.vector.Vector.dot"]], "dt() (sympy.physics.vector.dyadic.dyadic method)": [[185, "sympy.physics.vector.dyadic.Dyadic.dt"]], "dt() (sympy.physics.vector.vector.vector method)": [[185, "sympy.physics.vector.vector.Vector.dt"]], "express() (sympy.physics.vector.dyadic.dyadic method)": [[185, "sympy.physics.vector.dyadic.Dyadic.express"]], "express() (sympy.physics.vector.vector.vector method)": [[185, "sympy.physics.vector.vector.Vector.express"]], "free_dynamicsymbols() (sympy.physics.vector.vector.vector method)": [[185, "sympy.physics.vector.vector.Vector.free_dynamicsymbols"]], "free_symbols() (sympy.physics.vector.vector.vector method)": [[185, "sympy.physics.vector.vector.Vector.free_symbols"]], "func (sympy.physics.vector.dyadic.dyadic property)": [[185, "sympy.physics.vector.dyadic.Dyadic.func"]], "func (sympy.physics.vector.vector.vector property)": [[185, "sympy.physics.vector.vector.Vector.func"]], "magnitude() (sympy.physics.vector.vector.vector method)": [[185, "sympy.physics.vector.vector.Vector.magnitude"]], "normalize() (sympy.physics.vector.vector.vector method)": [[185, "sympy.physics.vector.vector.Vector.normalize"]], "orient() (sympy.physics.vector.frame.referenceframe method)": [[185, "sympy.physics.vector.frame.ReferenceFrame.orient"]], "orient_axis() (sympy.physics.vector.frame.referenceframe method)": [[185, "sympy.physics.vector.frame.ReferenceFrame.orient_axis"]], "orient_body_fixed() (sympy.physics.vector.frame.referenceframe method)": [[185, "sympy.physics.vector.frame.ReferenceFrame.orient_body_fixed"]], "orient_explicit() (sympy.physics.vector.frame.referenceframe method)": [[185, "sympy.physics.vector.frame.ReferenceFrame.orient_explicit"]], "orient_quaternion() (sympy.physics.vector.frame.referenceframe method)": [[185, "sympy.physics.vector.frame.ReferenceFrame.orient_quaternion"]], "orient_space_fixed() (sympy.physics.vector.frame.referenceframe method)": [[185, "sympy.physics.vector.frame.ReferenceFrame.orient_space_fixed"]], "orientnew() (sympy.physics.vector.frame.referenceframe method)": [[185, "sympy.physics.vector.frame.ReferenceFrame.orientnew"]], "outer() (sympy.physics.vector.vector.vector method)": [[185, "sympy.physics.vector.vector.Vector.outer"]], "partial_velocity() (sympy.physics.vector.frame.referenceframe method)": [[185, "sympy.physics.vector.frame.ReferenceFrame.partial_velocity"]], "separate() (sympy.physics.vector.vector.vector method)": [[185, "sympy.physics.vector.vector.Vector.separate"]], "set_ang_acc() (sympy.physics.vector.frame.referenceframe method)": [[185, "sympy.physics.vector.frame.ReferenceFrame.set_ang_acc"]], "set_ang_vel() (sympy.physics.vector.frame.referenceframe method)": [[185, "sympy.physics.vector.frame.ReferenceFrame.set_ang_vel"]], "simplify() (sympy.physics.vector.dyadic.dyadic method)": [[185, "sympy.physics.vector.dyadic.Dyadic.simplify"]], "simplify() (sympy.physics.vector.vector.vector method)": [[185, "sympy.physics.vector.vector.Vector.simplify"]], "subs() (sympy.physics.vector.dyadic.dyadic method)": [[185, "sympy.physics.vector.dyadic.Dyadic.subs"]], "subs() (sympy.physics.vector.vector.vector method)": [[185, "sympy.physics.vector.vector.Vector.subs"]], "to_matrix() (sympy.physics.vector.dyadic.dyadic method)": [[185, "sympy.physics.vector.dyadic.Dyadic.to_matrix"]], "to_matrix() (sympy.physics.vector.vector.vector method)": [[185, "sympy.physics.vector.vector.Vector.to_matrix"]], "variable_map() (sympy.physics.vector.frame.referenceframe method)": [[185, "sympy.physics.vector.frame.ReferenceFrame.variable_map"]], "x (sympy.physics.vector.frame.referenceframe property)": [[185, "sympy.physics.vector.frame.ReferenceFrame.x"]], "xreplace() (sympy.physics.vector.dyadic.dyadic method)": [[185, "sympy.physics.vector.dyadic.Dyadic.xreplace"]], "xreplace() (sympy.physics.vector.vector.vector method)": [[185, "sympy.physics.vector.vector.Vector.xreplace"]], "y (sympy.physics.vector.frame.referenceframe property)": [[185, "sympy.physics.vector.frame.ReferenceFrame.y"]], "z (sympy.physics.vector.frame.referenceframe property)": [[185, "sympy.physics.vector.frame.ReferenceFrame.z"]], "curl() (in module sympy.physics.vector.fieldfunctions)": [[186, "sympy.physics.vector.fieldfunctions.curl"]], "divergence() (in module sympy.physics.vector.fieldfunctions)": [[186, "sympy.physics.vector.fieldfunctions.divergence"]], "gradient() (in module sympy.physics.vector.fieldfunctions)": [[186, "sympy.physics.vector.fieldfunctions.gradient"]], "is_conservative() (in module sympy.physics.vector.fieldfunctions)": [[186, "sympy.physics.vector.fieldfunctions.is_conservative"]], "is_solenoidal() (in module sympy.physics.vector.fieldfunctions)": [[186, "sympy.physics.vector.fieldfunctions.is_solenoidal"]], "scalar_potential() (in module sympy.physics.vector.fieldfunctions)": [[186, "sympy.physics.vector.fieldfunctions.scalar_potential"]], "scalar_potential_difference() (in module sympy.physics.vector.fieldfunctions)": [[186, "sympy.physics.vector.fieldfunctions.scalar_potential_difference"]], "cross() (in module sympy.physics.vector.functions)": [[187, "sympy.physics.vector.functions.cross"]], "dot() (in module sympy.physics.vector.functions)": [[187, "sympy.physics.vector.functions.dot"]], "dynamicsymbols() (in module sympy.physics.vector)": [[187, "sympy.physics.vector.dynamicsymbols"]], "express() (in module sympy.physics.vector.functions)": [[187, "sympy.physics.vector.functions.express"]], "outer() (in module sympy.physics.vector.functions)": [[187, "sympy.physics.vector.functions.outer"]], "time_derivative() (in module sympy.physics.vector.functions)": [[187, "sympy.physics.vector.functions.time_derivative"]], "point (class in sympy.physics.vector.point)": [[189, "sympy.physics.vector.point.Point"]], "a1pt_theory() (sympy.physics.vector.point.point method)": [[189, "sympy.physics.vector.point.Point.a1pt_theory"]], "a2pt_theory() (sympy.physics.vector.point.point method)": [[189, "sympy.physics.vector.point.Point.a2pt_theory"]], "acc() (sympy.physics.vector.point.point method)": [[189, "sympy.physics.vector.point.Point.acc"]], "get_motion_params() (in module sympy.physics.vector.functions)": [[189, "sympy.physics.vector.functions.get_motion_params"]], "kinematic_equations() (in module sympy.physics.vector.functions)": [[189, "sympy.physics.vector.functions.kinematic_equations"]], "locatenew() (sympy.physics.vector.point.point method)": [[189, "sympy.physics.vector.point.Point.locatenew"]], "partial_velocity() (in module sympy.physics.vector.functions)": [[189, "sympy.physics.vector.functions.partial_velocity"]], "partial_velocity() (sympy.physics.vector.point.point method)": [[189, "sympy.physics.vector.point.Point.partial_velocity"]], "pos_from() (sympy.physics.vector.point.point method)": [[189, "sympy.physics.vector.point.Point.pos_from"]], "set_acc() (sympy.physics.vector.point.point method)": [[189, "sympy.physics.vector.point.Point.set_acc"]], "set_pos() (sympy.physics.vector.point.point method)": [[189, "sympy.physics.vector.point.Point.set_pos"]], "set_vel() (sympy.physics.vector.point.point method)": [[189, "sympy.physics.vector.point.Point.set_vel"]], "sympy.physics.vector.functions": [[189, "module-sympy.physics.vector.functions"]], "sympy.physics.vector.point": [[189, "module-sympy.physics.vector.point"]], "v1pt_theory() (sympy.physics.vector.point.point method)": [[189, "sympy.physics.vector.point.Point.v1pt_theory"]], "v2pt_theory() (sympy.physics.vector.point.point method)": [[189, "sympy.physics.vector.point.Point.v2pt_theory"]], "vel() (sympy.physics.vector.point.point method)": [[189, "sympy.physics.vector.point.Point.vel"]], "init_vprinting() (in module sympy.physics.vector.printing)": [[190, "sympy.physics.vector.printing.init_vprinting"]], "vlatex() (in module sympy.physics.vector.printing)": [[190, "sympy.physics.vector.printing.vlatex"]], "vpprint() (in module sympy.physics.vector.printing)": [[190, "sympy.physics.vector.printing.vpprint"]], "vprint() (in module sympy.physics.vector.printing)": [[190, "sympy.physics.vector.printing.vprint"]], "sympy.physics.vector": [[192, "module-sympy.physics.vector"]], "clebsch_gordan() (in module sympy.physics.wigner)": [[195, "sympy.physics.wigner.clebsch_gordan"]], "dot_rot_grad_ynm() (in module sympy.physics.wigner)": [[195, "sympy.physics.wigner.dot_rot_grad_Ynm"]], "gaunt() (in module sympy.physics.wigner)": [[195, "sympy.physics.wigner.gaunt"]], "racah() (in module sympy.physics.wigner)": [[195, "sympy.physics.wigner.racah"]], "real_gaunt() (in module sympy.physics.wigner)": [[195, "sympy.physics.wigner.real_gaunt"]], "sympy.physics.wigner": [[195, "module-sympy.physics.wigner"]], "wigner_3j() (in module sympy.physics.wigner)": [[195, "sympy.physics.wigner.wigner_3j"]], "wigner_6j() (in module sympy.physics.wigner)": [[195, "sympy.physics.wigner.wigner_6j"]], "wigner_9j() (in module sympy.physics.wigner)": [[195, "sympy.physics.wigner.wigner_9j"]], "wigner_d() (in module sympy.physics.wigner)": [[195, "sympy.physics.wigner.wigner_d"]], "wigner_d_small() (in module sympy.physics.wigner)": [[195, "sympy.physics.wigner.wigner_d_small"]], "basebackend (class in sympy.plotting.plot)": [[196, "sympy.plotting.plot.BaseBackend"]], "baseseries (class in sympy.plotting.plot)": [[196, "sympy.plotting.plot.BaseSeries"]], "implicitseries (class in sympy.plotting.plot_implicit)": [[196, "sympy.plotting.plot_implicit.ImplicitSeries"]], "line2dbaseseries (class in sympy.plotting.plot)": [[196, "sympy.plotting.plot.Line2DBaseSeries"]], "line3dbaseseries (class in sympy.plotting.plot)": [[196, "sympy.plotting.plot.Line3DBaseSeries"]], "lineover1drangeseries (class in sympy.plotting.plot)": [[196, "sympy.plotting.plot.LineOver1DRangeSeries"]], "matplotlibbackend (class in sympy.plotting.plot)": [[196, "sympy.plotting.plot.MatplotlibBackend"]], "parametric2dlineseries (class in sympy.plotting.plot)": [[196, "sympy.plotting.plot.Parametric2DLineSeries"]], "parametric3dlineseries (class in sympy.plotting.plot)": [[196, "sympy.plotting.plot.Parametric3DLineSeries"]], "parametricsurfaceseries (class in sympy.plotting.plot)": [[196, "sympy.plotting.plot.ParametricSurfaceSeries"]], "plot (class in sympy.plotting.plot)": [[196, "sympy.plotting.plot.Plot"]], "plotgrid (class in sympy.plotting.plot)": [[196, "sympy.plotting.plot.PlotGrid"]], "surfacebaseseries (class in sympy.plotting.plot)": [[196, "sympy.plotting.plot.SurfaceBaseSeries"]], "surfaceover2drangeseries (class in sympy.plotting.plot)": [[196, "sympy.plotting.plot.SurfaceOver2DRangeSeries"]], "textbackend (class in sympy.plotting.plot)": [[196, "sympy.plotting.plot.TextBackend"]], "append() (sympy.plotting.plot.plot method)": [[196, "sympy.plotting.plot.Plot.append"]], "extend() (sympy.plotting.plot.plot method)": [[196, "sympy.plotting.plot.Plot.extend"]], "get_data() (sympy.plotting.plot.line2dbaseseries method)": [[196, "sympy.plotting.plot.Line2DBaseSeries.get_data"]], "get_points() (sympy.plotting.plot.lineover1drangeseries method)": [[196, "sympy.plotting.plot.LineOver1DRangeSeries.get_points"]], "get_points() (sympy.plotting.plot.parametric2dlineseries method)": [[196, "sympy.plotting.plot.Parametric2DLineSeries.get_points"]], "get_segments() (sympy.plotting.plot.matplotlibbackend static method)": [[196, "sympy.plotting.plot.MatplotlibBackend.get_segments"]], "plot() (in module sympy.plotting.plot)": [[196, "sympy.plotting.plot.plot"]], "plot3d() (in module sympy.plotting.plot)": [[196, "sympy.plotting.plot.plot3d"]], "plot3d_parametric_line() (in module sympy.plotting.plot)": [[196, "sympy.plotting.plot.plot3d_parametric_line"]], "plot3d_parametric_surface() (in module sympy.plotting.plot)": [[196, "sympy.plotting.plot.plot3d_parametric_surface"]], "plot_implicit() (in module sympy.plotting.plot_implicit)": [[196, "sympy.plotting.plot_implicit.plot_implicit"]], "plot_parametric() (in module sympy.plotting.plot)": [[196, "sympy.plotting.plot.plot_parametric"]], "process_series() (sympy.plotting.plot.matplotlibbackend method)": [[196, "sympy.plotting.plot.MatplotlibBackend.process_series"]], "sympy.plotting.plot": [[196, "module-sympy.plotting.plot"]], "sympy.plotting.pygletplot": [[196, "module-sympy.plotting.pygletplot"]], "textplot() (in module sympy.plotting.textplot)": [[196, "sympy.plotting.textplot.textplot"]], "extensionelement (class in sympy.polys.agca.extensions)": [[197, "sympy.polys.agca.extensions.ExtensionElement"]], "freemodule (class in sympy.polys.agca.modules)": [[197, "sympy.polys.agca.modules.FreeModule"]], "freemoduleelement (class in sympy.polys.agca.modules)": [[197, "sympy.polys.agca.modules.FreeModuleElement"]], "ideal (class in sympy.polys.agca.ideals)": [[197, "sympy.polys.agca.ideals.Ideal"]], "module (class in sympy.polys.agca.modules)": [[197, "sympy.polys.agca.modules.Module"]], "modulehomomorphism (class in sympy.polys.agca.homomorphisms)": [[197, "sympy.polys.agca.homomorphisms.ModuleHomomorphism"]], "monogenicfiniteextension (class in sympy.polys.agca.extensions)": [[197, "sympy.polys.agca.extensions.MonogenicFiniteExtension"]], "quotientmodule (class in sympy.polys.agca.modules)": [[197, "sympy.polys.agca.modules.QuotientModule"]], "quotientmoduleelement (class in sympy.polys.agca.modules)": [[197, "sympy.polys.agca.modules.QuotientModuleElement"]], "submodule (class in sympy.polys.agca.modules)": [[197, "sympy.polys.agca.modules.SubModule"]], "subquotientmodule (class in sympy.polys.agca.modules)": [[197, "sympy.polys.agca.modules.SubQuotientModule"]], "basis() (sympy.polys.agca.modules.freemodule method)": [[197, "sympy.polys.agca.modules.FreeModule.basis"]], "contains() (sympy.polys.agca.ideals.ideal method)": [[197, "sympy.polys.agca.ideals.Ideal.contains"]], "contains() (sympy.polys.agca.modules.module method)": [[197, "sympy.polys.agca.modules.Module.contains"]], "convert() (sympy.polys.agca.modules.freemodule method)": [[197, "sympy.polys.agca.modules.FreeModule.convert"]], "convert() (sympy.polys.agca.modules.module method)": [[197, "sympy.polys.agca.modules.Module.convert"]], "convert() (sympy.polys.agca.modules.quotientmodule method)": [[197, "sympy.polys.agca.modules.QuotientModule.convert"]], "convert() (sympy.polys.agca.modules.submodule method)": [[197, "sympy.polys.agca.modules.SubModule.convert"]], "depth() (sympy.polys.agca.ideals.ideal method)": [[197, "sympy.polys.agca.ideals.Ideal.depth"]], "dtype (sympy.polys.agca.extensions.monogenicfiniteextension attribute)": [[197, "sympy.polys.agca.extensions.MonogenicFiniteExtension.dtype"]], "dtype (sympy.polys.agca.modules.freemodule attribute)": [[197, "sympy.polys.agca.modules.FreeModule.dtype"]], "dtype (sympy.polys.agca.modules.quotientmodule attribute)": [[197, "sympy.polys.agca.modules.QuotientModule.dtype"]], "eq() (sympy.polys.agca.modules.quotientmoduleelement method)": [[197, "sympy.polys.agca.modules.QuotientModuleElement.eq"]], "height() (sympy.polys.agca.ideals.ideal method)": [[197, "sympy.polys.agca.ideals.Ideal.height"]], "homomorphism() (in module sympy.polys.agca.homomorphisms)": [[197, "sympy.polys.agca.homomorphisms.homomorphism"]], "identity_hom() (sympy.polys.agca.modules.freemodule method)": [[197, "sympy.polys.agca.modules.FreeModule.identity_hom"]], "identity_hom() (sympy.polys.agca.modules.module method)": [[197, "sympy.polys.agca.modules.Module.identity_hom"]], "identity_hom() (sympy.polys.agca.modules.quotientmodule method)": [[197, "sympy.polys.agca.modules.QuotientModule.identity_hom"]], "identity_hom() (sympy.polys.agca.modules.submodule method)": [[197, "sympy.polys.agca.modules.SubModule.identity_hom"]], "image() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[197, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.image"]], "in_terms_of_generators() (sympy.polys.agca.modules.submodule method)": [[197, "sympy.polys.agca.modules.SubModule.in_terms_of_generators"]], "inclusion_hom() (sympy.polys.agca.modules.submodule method)": [[197, "sympy.polys.agca.modules.SubModule.inclusion_hom"]], "intersect() (sympy.polys.agca.ideals.ideal method)": [[197, "sympy.polys.agca.ideals.Ideal.intersect"]], "intersect() (sympy.polys.agca.modules.submodule method)": [[197, "sympy.polys.agca.modules.SubModule.intersect"]], "inverse() (sympy.polys.agca.extensions.extensionelement method)": [[197, "sympy.polys.agca.extensions.ExtensionElement.inverse"]], "is_full_module() (sympy.polys.agca.modules.submodule method)": [[197, "sympy.polys.agca.modules.SubModule.is_full_module"]], "is_full_module() (sympy.polys.agca.modules.subquotientmodule method)": [[197, "sympy.polys.agca.modules.SubQuotientModule.is_full_module"]], "is_injective() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[197, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.is_injective"]], "is_isomorphism() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[197, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.is_isomorphism"]], "is_maximal() (sympy.polys.agca.ideals.ideal method)": [[197, "sympy.polys.agca.ideals.Ideal.is_maximal"]], "is_primary() (sympy.polys.agca.ideals.ideal method)": [[197, "sympy.polys.agca.ideals.Ideal.is_primary"]], "is_prime() (sympy.polys.agca.ideals.ideal method)": [[197, "sympy.polys.agca.ideals.Ideal.is_prime"]], "is_principal() (sympy.polys.agca.ideals.ideal method)": [[197, "sympy.polys.agca.ideals.Ideal.is_principal"]], "is_radical() (sympy.polys.agca.ideals.ideal method)": [[197, "sympy.polys.agca.ideals.Ideal.is_radical"]], "is_submodule() (sympy.polys.agca.modules.freemodule method)": [[197, "sympy.polys.agca.modules.FreeModule.is_submodule"]], "is_submodule() (sympy.polys.agca.modules.module method)": [[197, "sympy.polys.agca.modules.Module.is_submodule"]], "is_submodule() (sympy.polys.agca.modules.quotientmodule method)": [[197, "sympy.polys.agca.modules.QuotientModule.is_submodule"]], "is_submodule() (sympy.polys.agca.modules.submodule method)": [[197, "sympy.polys.agca.modules.SubModule.is_submodule"]], "is_surjective() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[197, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.is_surjective"]], "is_whole_ring() (sympy.polys.agca.ideals.ideal method)": [[197, "sympy.polys.agca.ideals.Ideal.is_whole_ring"]], "is_zero() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[197, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.is_zero"]], "is_zero() (sympy.polys.agca.ideals.ideal method)": [[197, "sympy.polys.agca.ideals.Ideal.is_zero"]], "is_zero() (sympy.polys.agca.modules.freemodule method)": [[197, "sympy.polys.agca.modules.FreeModule.is_zero"]], "is_zero() (sympy.polys.agca.modules.module method)": [[197, "sympy.polys.agca.modules.Module.is_zero"]], "is_zero() (sympy.polys.agca.modules.quotientmodule method)": [[197, "sympy.polys.agca.modules.QuotientModule.is_zero"]], "is_zero() (sympy.polys.agca.modules.submodule method)": [[197, "sympy.polys.agca.modules.SubModule.is_zero"]], "kernel() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[197, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.kernel"]], "module_quotient() (sympy.polys.agca.modules.submodule method)": [[197, "sympy.polys.agca.modules.SubModule.module_quotient"]], "multiply_ideal() (sympy.polys.agca.modules.freemodule method)": [[197, "sympy.polys.agca.modules.FreeModule.multiply_ideal"]], "multiply_ideal() (sympy.polys.agca.modules.module method)": [[197, "sympy.polys.agca.modules.Module.multiply_ideal"]], "multiply_ideal() (sympy.polys.agca.modules.submodule method)": [[197, "sympy.polys.agca.modules.SubModule.multiply_ideal"]], "product() (sympy.polys.agca.ideals.ideal method)": [[197, "sympy.polys.agca.ideals.Ideal.product"]], "quotient() (sympy.polys.agca.ideals.ideal method)": [[197, "sympy.polys.agca.ideals.Ideal.quotient"]], "quotient_codomain() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[197, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.quotient_codomain"]], "quotient_domain() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[197, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.quotient_domain"]], "quotient_hom() (sympy.polys.agca.modules.quotientmodule method)": [[197, "sympy.polys.agca.modules.QuotientModule.quotient_hom"]], "quotient_hom() (sympy.polys.agca.modules.subquotientmodule method)": [[197, "sympy.polys.agca.modules.SubQuotientModule.quotient_hom"]], "quotient_module() (sympy.polys.agca.modules.freemodule method)": [[197, "sympy.polys.agca.modules.FreeModule.quotient_module"]], "quotient_module() (sympy.polys.agca.modules.module method)": [[197, "sympy.polys.agca.modules.Module.quotient_module"]], "quotient_module() (sympy.polys.agca.modules.submodule method)": [[197, "sympy.polys.agca.modules.SubModule.quotient_module"]], "radical() (sympy.polys.agca.ideals.ideal method)": [[197, "sympy.polys.agca.ideals.Ideal.radical"]], "reduce_element() (sympy.polys.agca.ideals.ideal method)": [[197, "sympy.polys.agca.ideals.Ideal.reduce_element"]], "reduce_element() (sympy.polys.agca.modules.submodule method)": [[197, "sympy.polys.agca.modules.SubModule.reduce_element"]], "restrict_codomain() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[197, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.restrict_codomain"]], "restrict_domain() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[197, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.restrict_domain"]], "saturate() (sympy.polys.agca.ideals.ideal method)": [[197, "sympy.polys.agca.ideals.Ideal.saturate"]], "submodule() (sympy.polys.agca.modules.module method)": [[197, "sympy.polys.agca.modules.Module.submodule"]], "submodule() (sympy.polys.agca.modules.quotientmodule method)": [[197, "sympy.polys.agca.modules.QuotientModule.submodule"]], "submodule() (sympy.polys.agca.modules.submodule method)": [[197, "sympy.polys.agca.modules.SubModule.submodule"]], "subset() (sympy.polys.agca.ideals.ideal method)": [[197, "sympy.polys.agca.ideals.Ideal.subset"]], "subset() (sympy.polys.agca.modules.module method)": [[197, "sympy.polys.agca.modules.Module.subset"]], "syzygy_module() (sympy.polys.agca.modules.submodule method)": [[197, "sympy.polys.agca.modules.SubModule.syzygy_module"]], "union() (sympy.polys.agca.ideals.ideal method)": [[197, "sympy.polys.agca.ideals.Ideal.union"]], "union() (sympy.polys.agca.modules.submodule method)": [[197, "sympy.polys.agca.modules.SubModule.union"]], "ddm (class in sympy.polys.matrices.ddm)": [[199, "sympy.polys.matrices.ddm.DDM"]], "domainmatrix (class in sympy.polys.matrices.domainmatrix)": [[199, "sympy.polys.matrices.domainmatrix.DomainMatrix"]], "sdm (class in sympy.polys.matrices.sdm)": [[199, "sympy.polys.matrices.sdm.SDM"]], "add() (sympy.polys.matrices.ddm.ddm method)": [[199, "sympy.polys.matrices.ddm.DDM.add"]], "add() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[199, "sympy.polys.matrices.domainmatrix.DomainMatrix.add"]], "add() (sympy.polys.matrices.sdm.sdm method)": [[199, "sympy.polys.matrices.sdm.SDM.add"]], "charpoly() (sympy.polys.matrices.ddm.ddm method)": [[199, "sympy.polys.matrices.ddm.DDM.charpoly"]], "charpoly() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[199, "sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly"]], "charpoly() (sympy.polys.matrices.sdm.sdm method)": [[199, "sympy.polys.matrices.sdm.SDM.charpoly"]], "columnspace() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[199, "sympy.polys.matrices.domainmatrix.DomainMatrix.columnspace"]], "convert_to() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[199, "sympy.polys.matrices.domainmatrix.DomainMatrix.convert_to"]], "convert_to() (sympy.polys.matrices.sdm.sdm method)": [[199, "sympy.polys.matrices.sdm.SDM.convert_to"]], "copy() (sympy.polys.matrices.sdm.sdm method)": [[199, "sympy.polys.matrices.sdm.SDM.copy"]], "det() (sympy.polys.matrices.ddm.ddm method)": [[199, "sympy.polys.matrices.ddm.DDM.det"]], "det() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[199, "sympy.polys.matrices.domainmatrix.DomainMatrix.det"]], "det() (sympy.polys.matrices.sdm.sdm method)": [[199, "sympy.polys.matrices.sdm.SDM.det"]], "diag() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[199, "sympy.polys.matrices.domainmatrix.DomainMatrix.diag"]], "eye() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[199, "sympy.polys.matrices.domainmatrix.DomainMatrix.eye"]], "eye() (sympy.polys.matrices.sdm.sdm class method)": [[199, "sympy.polys.matrices.sdm.SDM.eye"]], "from_matrix() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[199, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_Matrix"]], "from_ddm() (sympy.polys.matrices.sdm.sdm class method)": [[199, "sympy.polys.matrices.sdm.SDM.from_ddm"]], "from_dict_sympy() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[199, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_dict_sympy"]], "from_list() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[199, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_list"]], "from_list() (sympy.polys.matrices.sdm.sdm class method)": [[199, "sympy.polys.matrices.sdm.SDM.from_list"]], "from_list_sympy() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[199, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_list_sympy"]], "from_rep() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[199, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_rep"]], "hermite_normal_form() (in module sympy.polys.matrices.normalforms)": [[199, "sympy.polys.matrices.normalforms.hermite_normal_form"]], "hstack() (sympy.polys.matrices.ddm.ddm method)": [[199, "sympy.polys.matrices.ddm.DDM.hstack"]], "hstack() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[199, "sympy.polys.matrices.domainmatrix.DomainMatrix.hstack"]], "hstack() (sympy.polys.matrices.sdm.sdm method)": [[199, "sympy.polys.matrices.sdm.SDM.hstack"]], "inv() (sympy.polys.matrices.ddm.ddm method)": [[199, "sympy.polys.matrices.ddm.DDM.inv"]], "inv() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[199, "sympy.polys.matrices.domainmatrix.DomainMatrix.inv"]], "inv() (sympy.polys.matrices.sdm.sdm method)": [[199, "sympy.polys.matrices.sdm.SDM.inv"]], "is_lower (sympy.polys.matrices.domainmatrix.domainmatrix property)": [[199, "sympy.polys.matrices.domainmatrix.DomainMatrix.is_lower"]], "is_lower() (sympy.polys.matrices.ddm.ddm method)": [[199, "sympy.polys.matrices.ddm.DDM.is_lower"]], "is_lower() (sympy.polys.matrices.sdm.sdm method)": [[199, "sympy.polys.matrices.sdm.SDM.is_lower"]], "is_upper (sympy.polys.matrices.domainmatrix.domainmatrix property)": [[199, "sympy.polys.matrices.domainmatrix.DomainMatrix.is_upper"]], "is_upper() (sympy.polys.matrices.ddm.ddm method)": [[199, "sympy.polys.matrices.ddm.DDM.is_upper"]], "is_upper() (sympy.polys.matrices.sdm.sdm method)": [[199, "sympy.polys.matrices.sdm.SDM.is_upper"]], "is_zero_matrix() (sympy.polys.matrices.ddm.ddm method)": [[199, "sympy.polys.matrices.ddm.DDM.is_zero_matrix"]], "is_zero_matrix() (sympy.polys.matrices.sdm.sdm method)": [[199, "sympy.polys.matrices.sdm.SDM.is_zero_matrix"]], "lu() (sympy.polys.matrices.ddm.ddm method)": [[199, "sympy.polys.matrices.ddm.DDM.lu"]], "lu() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[199, "sympy.polys.matrices.domainmatrix.DomainMatrix.lu"]], "lu() (sympy.polys.matrices.sdm.sdm method)": [[199, "sympy.polys.matrices.sdm.SDM.lu"]], "lu_solve() (sympy.polys.matrices.ddm.ddm method)": [[199, "sympy.polys.matrices.ddm.DDM.lu_solve"]], "lu_solve() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[199, "sympy.polys.matrices.domainmatrix.DomainMatrix.lu_solve"]], "lu_solve() (sympy.polys.matrices.sdm.sdm method)": [[199, "sympy.polys.matrices.sdm.SDM.lu_solve"]], "matmul() (sympy.polys.matrices.ddm.ddm method)": [[199, "sympy.polys.matrices.ddm.DDM.matmul"]], "matmul() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[199, "sympy.polys.matrices.domainmatrix.DomainMatrix.matmul"]], "matmul() (sympy.polys.matrices.sdm.sdm method)": [[199, "sympy.polys.matrices.sdm.SDM.matmul"]], "mul() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[199, "sympy.polys.matrices.domainmatrix.DomainMatrix.mul"]], "mul() (sympy.polys.matrices.sdm.sdm method)": [[199, "sympy.polys.matrices.sdm.SDM.mul"]], "neg() (sympy.polys.matrices.ddm.ddm method)": [[199, "sympy.polys.matrices.ddm.DDM.neg"]], "neg() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[199, "sympy.polys.matrices.domainmatrix.DomainMatrix.neg"]], "neg() (sympy.polys.matrices.sdm.sdm method)": [[199, "sympy.polys.matrices.sdm.SDM.neg"]], "new() (sympy.polys.matrices.sdm.sdm class method)": [[199, "sympy.polys.matrices.sdm.SDM.new"]], "nullspace() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[199, "sympy.polys.matrices.domainmatrix.DomainMatrix.nullspace"]], "nullspace() (sympy.polys.matrices.sdm.sdm method)": [[199, "sympy.polys.matrices.sdm.SDM.nullspace"]], "ones() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[199, "sympy.polys.matrices.domainmatrix.DomainMatrix.ones"]], "pow() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[199, "sympy.polys.matrices.domainmatrix.DomainMatrix.pow"]], "rowspace() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[199, "sympy.polys.matrices.domainmatrix.DomainMatrix.rowspace"]], "rref() (sympy.polys.matrices.ddm.ddm method)": [[199, "sympy.polys.matrices.ddm.DDM.rref"]], "rref() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[199, "sympy.polys.matrices.domainmatrix.DomainMatrix.rref"]], "rref() (sympy.polys.matrices.sdm.sdm method)": [[199, "sympy.polys.matrices.sdm.SDM.rref"]], "scc() (sympy.polys.matrices.ddm.ddm method)": [[199, "sympy.polys.matrices.ddm.DDM.scc"]], "scc() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[199, "sympy.polys.matrices.domainmatrix.DomainMatrix.scc"]], "scc() (sympy.polys.matrices.sdm.sdm method)": [[199, "sympy.polys.matrices.sdm.SDM.scc"]], "smith_normal_form() (in module sympy.polys.matrices.normalforms)": [[199, "sympy.polys.matrices.normalforms.smith_normal_form"]], "sub() (sympy.polys.matrices.ddm.ddm method)": [[199, "sympy.polys.matrices.ddm.DDM.sub"]], "sub() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[199, "sympy.polys.matrices.domainmatrix.DomainMatrix.sub"]], "sub() (sympy.polys.matrices.sdm.sdm method)": [[199, "sympy.polys.matrices.sdm.SDM.sub"]], "to_matrix() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[199, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_Matrix"]], "to_ddm() (sympy.polys.matrices.sdm.sdm method)": [[199, "sympy.polys.matrices.sdm.SDM.to_ddm"]], "to_dense() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[199, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_dense"]], "to_field() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[199, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_field"]], "to_list() (sympy.polys.matrices.sdm.sdm method)": [[199, "sympy.polys.matrices.sdm.SDM.to_list"]], "to_sparse() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[199, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_sparse"]], "transpose() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[199, "sympy.polys.matrices.domainmatrix.DomainMatrix.transpose"]], "transpose() (sympy.polys.matrices.sdm.sdm method)": [[199, "sympy.polys.matrices.sdm.SDM.transpose"]], "unify() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[199, "sympy.polys.matrices.domainmatrix.DomainMatrix.unify"]], "vstack() (sympy.polys.matrices.ddm.ddm method)": [[199, "sympy.polys.matrices.ddm.DDM.vstack"]], "vstack() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[199, "sympy.polys.matrices.domainmatrix.DomainMatrix.vstack"]], "vstack() (sympy.polys.matrices.sdm.sdm method)": [[199, "sympy.polys.matrices.sdm.SDM.vstack"]], "zeros() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[199, "sympy.polys.matrices.domainmatrix.DomainMatrix.zeros"]], "zeros() (sympy.polys.matrices.sdm.sdm class method)": [[199, "sympy.polys.matrices.sdm.SDM.zeros"]], "anp (class in sympy.polys.polyclasses)": [[201, "sympy.polys.polyclasses.ANP"]], "algebraicfield (class in sympy.polys.domains)": [[201, "sympy.polys.domains.AlgebraicField"]], "complexelement (class in sympy.polys.domains.mpelements)": [[201, "sympy.polys.domains.mpelements.ComplexElement"]], "complexfield (class in sympy.polys.domains)": [[201, "sympy.polys.domains.ComplexField"]], "compositedomain (class in sympy.polys.domains.compositedomain)": [[201, "sympy.polys.domains.compositedomain.CompositeDomain"]], "dmf (class in sympy.polys.polyclasses)": [[201, "sympy.polys.polyclasses.DMF"]], "dmp (class in sympy.polys.polyclasses)": [[201, "sympy.polys.polyclasses.DMP"]], "domain (class in sympy.polys.domains.domain)": [[201, "sympy.polys.domains.domain.Domain"]], "domainelement (class in sympy.polys.domains.domainelement)": [[201, "sympy.polys.domains.domainelement.DomainElement"]], "expressiondomain (class in sympy.polys.domains)": [[201, "sympy.polys.domains.ExpressionDomain"]], "expressiondomain.expression (class in sympy.polys.domains)": [[201, "sympy.polys.domains.ExpressionDomain.Expression"]], "expressiondomain.expression (class in sympy.polys.domains.expressiondomain)": [[201, "sympy.polys.domains.expressiondomain.ExpressionDomain.Expression"]], "field (class in sympy.polys.domains.field)": [[201, "sympy.polys.domains.field.Field"]], "finitefield (class in sympy.polys.domains)": [[201, "sympy.polys.domains.FiniteField"]], "fracelement (class in sympy.polys.fields)": [[201, "sympy.polys.fields.FracElement"]], "fracfield (class in sympy.polys.fields)": [[201, "sympy.polys.fields.FracField"]], "fractionfield (class in sympy.polys.domains)": [[201, "sympy.polys.domains.FractionField"]], "gmpyfinitefield (class in sympy.polys.domains)": [[201, "sympy.polys.domains.GMPYFiniteField"]], "gmpyintegerring (class in sympy.polys.domains)": [[201, "sympy.polys.domains.GMPYIntegerRing"]], "gmpyrationalfield (class in sympy.polys.domains)": [[201, "sympy.polys.domains.GMPYRationalField"]], "gaussiandomain (class in sympy.polys.domains.gaussiandomains)": [[201, "sympy.polys.domains.gaussiandomains.GaussianDomain"]], "gaussianelement (class in sympy.polys.domains.gaussiandomains)": [[201, "sympy.polys.domains.gaussiandomains.GaussianElement"]], "gaussianinteger (class in sympy.polys.domains.gaussiandomains)": [[201, "sympy.polys.domains.gaussiandomains.GaussianInteger"]], "gaussianintegerring (class in sympy.polys.domains.gaussiandomains)": [[201, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing"]], "gaussianrational (class in sympy.polys.domains.gaussiandomains)": [[201, "sympy.polys.domains.gaussiandomains.GaussianRational"]], "gaussianrationalfield (class in sympy.polys.domains.gaussiandomains)": [[201, "sympy.polys.domains.gaussiandomains.GaussianRationalField"]], "integerring (class in sympy.polys.domains)": [[201, "sympy.polys.domains.IntegerRing"]], "lc() (sympy.polys.polyclasses.anp method)": [[201, "sympy.polys.polyclasses.ANP.LC"]], "lc() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.LC"]], "polyelement (class in sympy.polys.rings)": [[201, "sympy.polys.rings.PolyElement"]], "polyring (class in sympy.polys.rings)": [[201, "sympy.polys.rings.PolyRing"]], "polynomialring (class in sympy.polys.domains)": [[201, "sympy.polys.domains.PolynomialRing"]], "pythonfinitefield (class in sympy.polys.domains)": [[201, "sympy.polys.domains.PythonFiniteField"]], "pythonintegerring (class in sympy.polys.domains)": [[201, "sympy.polys.domains.PythonIntegerRing"]], "pythonmpq (class in sympy.external.pythonmpq)": [[201, "sympy.external.pythonmpq.PythonMPQ"]], "pythonrationalfield (class in sympy.polys.domains)": [[201, "sympy.polys.domains.PythonRationalField"]], "quotientring (class in sympy.polys.domains.quotientring)": [[201, "sympy.polys.domains.quotientring.QuotientRing"]], "rationalfield (class in sympy.polys.domains)": [[201, "sympy.polys.domains.RationalField"]], "realelement (class in sympy.polys.domains.mpelements)": [[201, "sympy.polys.domains.mpelements.RealElement"]], "realfield (class in sympy.polys.domains)": [[201, "sympy.polys.domains.RealField"]], "ring (class in sympy.polys.domains.ring)": [[201, "sympy.polys.domains.ring.Ring"]], "simpledomain (class in sympy.polys.domains.simpledomain)": [[201, "sympy.polys.domains.simpledomain.SimpleDomain"]], "tc() (sympy.polys.polyclasses.anp method)": [[201, "sympy.polys.polyclasses.ANP.TC"]], "tc() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.TC"]], "abs() (sympy.polys.domains.domain.domain method)": [[201, "sympy.polys.domains.domain.Domain.abs"]], "abs() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.abs"]], "add() (sympy.polys.domains.domain.domain method)": [[201, "sympy.polys.domains.domain.Domain.add"]], "add() (sympy.polys.polyclasses.dmf method)": [[201, "sympy.polys.polyclasses.DMF.add"]], "add() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.add"]], "add() (sympy.polys.rings.polyring method)": [[201, "sympy.polys.rings.PolyRing.add"]], "add_gens() (sympy.polys.rings.polyring method)": [[201, "sympy.polys.rings.PolyRing.add_gens"]], "add_ground() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.add_ground"]], "alg_field_from_poly() (sympy.polys.domains.domain.domain method)": [[201, "sympy.polys.domains.domain.Domain.alg_field_from_poly"]], "algebraic_field() (sympy.polys.domains.algebraicfield method)": [[201, "sympy.polys.domains.AlgebraicField.algebraic_field"]], "algebraic_field() (sympy.polys.domains.integerring method)": [[201, "sympy.polys.domains.IntegerRing.algebraic_field"]], "algebraic_field() (sympy.polys.domains.rationalfield method)": [[201, "sympy.polys.domains.RationalField.algebraic_field"]], "algebraic_field() (sympy.polys.domains.domain.domain method)": [[201, "sympy.polys.domains.domain.Domain.algebraic_field"]], "all_coeffs() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.all_coeffs"]], "all_monoms() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.all_monoms"]], "all_terms() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.all_terms"]], "almosteq() (sympy.polys.domains.complexfield method)": [[201, "sympy.polys.domains.ComplexField.almosteq"]], "almosteq() (sympy.polys.domains.realfield method)": [[201, "sympy.polys.domains.RealField.almosteq"]], "almosteq() (sympy.polys.domains.domain.domain method)": [[201, "sympy.polys.domains.domain.Domain.almosteq"]], "almosteq() (sympy.polys.rings.polyelement method)": [[201, "sympy.polys.rings.PolyElement.almosteq"]], "as_algebraicfield() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[201, "sympy.polys.domains.gaussiandomains.GaussianRationalField.as_AlgebraicField"]], "cancel() (sympy.polys.polyclasses.dmf method)": [[201, "sympy.polys.polyclasses.DMF.cancel"]], "cancel() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.cancel"]], "cancel() (sympy.polys.rings.polyelement method)": [[201, "sympy.polys.rings.PolyElement.cancel"]], "cauchy_lower_bound() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.cauchy_lower_bound"]], "cauchy_upper_bound() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.cauchy_upper_bound"]], "characteristic() (sympy.polys.domains.finitefield method)": [[201, "sympy.polys.domains.FiniteField.characteristic"]], "characteristic() (sympy.polys.domains.domain.domain method)": [[201, "sympy.polys.domains.domain.Domain.characteristic"]], "clear_denoms() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.clear_denoms"]], "coeff() (sympy.polys.rings.polyelement method)": [[201, "sympy.polys.rings.PolyElement.coeff"]], "coeffs() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.coeffs"]], "coeffs() (sympy.polys.rings.polyelement method)": [[201, "sympy.polys.rings.PolyElement.coeffs"]], "cofactors() (sympy.polys.domains.domain.domain method)": [[201, "sympy.polys.domains.domain.Domain.cofactors"]], "cofactors() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.cofactors"]], "compose() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.compose"]], "compose() (sympy.polys.rings.polyring method)": [[201, "sympy.polys.rings.PolyRing.compose"]], "const() (sympy.polys.rings.polyelement method)": [[201, "sympy.polys.rings.PolyElement.const"]], "content() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.content"]], "content() (sympy.polys.rings.polyelement method)": [[201, "sympy.polys.rings.PolyElement.content"]], "convert() (sympy.polys.domains.domain.domain method)": [[201, "sympy.polys.domains.domain.Domain.convert"]], "convert() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.convert"]], "convert_from() (sympy.polys.domains.domain.domain method)": [[201, "sympy.polys.domains.domain.Domain.convert_from"]], "copy() (sympy.polys.rings.polyelement method)": [[201, "sympy.polys.rings.PolyElement.copy"]], "count_complex_roots() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.count_complex_roots"]], "count_real_roots() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.count_real_roots"]], "cyclotomic_field() (sympy.polys.domains.domain.domain method)": [[201, "sympy.polys.domains.domain.Domain.cyclotomic_field"]], "decompose() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.decompose"]], "deflate() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.deflate"]], "degree() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.degree"]], "degree() (sympy.polys.rings.polyelement method)": [[201, "sympy.polys.rings.PolyElement.degree"]], "degree_list() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.degree_list"]], "degrees() (sympy.polys.rings.polyelement method)": [[201, "sympy.polys.rings.PolyElement.degrees"]], "denom() (sympy.polys.domains.algebraicfield method)": [[201, "sympy.polys.domains.AlgebraicField.denom"]], "denom() (sympy.polys.domains.expressiondomain method)": [[201, "sympy.polys.domains.ExpressionDomain.denom"]], "denom() (sympy.polys.domains.fractionfield method)": [[201, "sympy.polys.domains.FractionField.denom"]], "denom() (sympy.polys.domains.gmpyrationalfield method)": [[201, "sympy.polys.domains.GMPYRationalField.denom"]], "denom() (sympy.polys.domains.rationalfield method)": [[201, "sympy.polys.domains.RationalField.denom"]], "denom() (sympy.polys.domains.domain.domain method)": [[201, "sympy.polys.domains.domain.Domain.denom"]], "denom() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[201, "sympy.polys.domains.gaussiandomains.GaussianRationalField.denom"]], "denom() (sympy.polys.domains.ring.ring method)": [[201, "sympy.polys.domains.ring.Ring.denom"]], "denom() (sympy.polys.polyclasses.dmf method)": [[201, "sympy.polys.polyclasses.DMF.denom"]], "diff() (sympy.polys.fields.fracelement method)": [[201, "sympy.polys.fields.FracElement.diff"]], "diff() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.diff"]], "diff() (sympy.polys.rings.polyelement method)": [[201, "sympy.polys.rings.PolyElement.diff"]], "discriminant() (sympy.polys.domains.algebraicfield method)": [[201, "sympy.polys.domains.AlgebraicField.discriminant"]], "discriminant() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.discriminant"]], "div() (sympy.polys.domains.gmpyrationalfield method)": [[201, "sympy.polys.domains.GMPYRationalField.div"]], "div() (sympy.polys.domains.rationalfield method)": [[201, "sympy.polys.domains.RationalField.div"]], "div() (sympy.polys.domains.domain.domain method)": [[201, "sympy.polys.domains.domain.Domain.div"]], "div() (sympy.polys.domains.field.field method)": [[201, "sympy.polys.domains.field.Field.div"]], "div() (sympy.polys.domains.ring.ring method)": [[201, "sympy.polys.domains.ring.Ring.div"]], "div() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.div"]], "div() (sympy.polys.rings.polyelement method)": [[201, "sympy.polys.rings.PolyElement.div"]], "drop() (sympy.polys.domains.compositedomain.compositedomain method)": [[201, "sympy.polys.domains.compositedomain.CompositeDomain.drop"]], "drop() (sympy.polys.domains.domain.domain method)": [[201, "sympy.polys.domains.domain.Domain.drop"]], "drop() (sympy.polys.rings.polyring method)": [[201, "sympy.polys.rings.PolyRing.drop"]], "drop_to_ground() (sympy.polys.rings.polyring method)": [[201, "sympy.polys.rings.PolyRing.drop_to_ground"]], "dtype (sympy.polys.domains.algebraicfield attribute)": [[201, "sympy.polys.domains.AlgebraicField.dtype"]], "dtype (sympy.polys.domains.expressiondomain attribute)": [[201, "sympy.polys.domains.ExpressionDomain.dtype"]], "dtype (sympy.polys.domains.domain.domain attribute)": [[201, "sympy.polys.domains.domain.Domain.dtype"]], "dtype (sympy.polys.domains.gaussiandomains.gaussianintegerring attribute)": [[201, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.dtype"]], "dtype (sympy.polys.domains.gaussiandomains.gaussianrationalfield attribute)": [[201, "sympy.polys.domains.gaussiandomains.GaussianRationalField.dtype"]], "eject() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.eject"]], "eval() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.eval"]], "evalf() (sympy.polys.domains.domain.domain method)": [[201, "sympy.polys.domains.domain.Domain.evalf"]], "exclude() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.exclude"]], "exquo() (sympy.polys.domains.gmpyrationalfield method)": [[201, "sympy.polys.domains.GMPYRationalField.exquo"]], "exquo() (sympy.polys.domains.rationalfield method)": [[201, "sympy.polys.domains.RationalField.exquo"]], "exquo() (sympy.polys.domains.domain.domain method)": [[201, "sympy.polys.domains.domain.Domain.exquo"]], "exquo() (sympy.polys.domains.field.field method)": [[201, "sympy.polys.domains.field.Field.exquo"]], "exquo() (sympy.polys.domains.ring.ring method)": [[201, "sympy.polys.domains.ring.Ring.exquo"]], "exquo() (sympy.polys.polyclasses.dmf method)": [[201, "sympy.polys.polyclasses.DMF.exquo"]], "exquo() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.exquo"]], "exquo_ground() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.exquo_ground"]], "ext (sympy.polys.domains.algebraicfield attribute)": [[201, "sympy.polys.domains.AlgebraicField.ext"]], "factor_list() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.factor_list"]], "factor_list_include() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.factor_list_include"]], "factorial() (sympy.polys.domains.fractionfield method)": [[201, "sympy.polys.domains.FractionField.factorial"]], "factorial() (sympy.polys.domains.gmpyintegerring method)": [[201, "sympy.polys.domains.GMPYIntegerRing.factorial"]], "factorial() (sympy.polys.domains.gmpyrationalfield method)": [[201, "sympy.polys.domains.GMPYRationalField.factorial"]], "factorial() (sympy.polys.domains.integerring method)": [[201, "sympy.polys.domains.IntegerRing.factorial"]], "factorial() (sympy.polys.domains.polynomialring method)": [[201, "sympy.polys.domains.PolynomialRing.factorial"]], "field() (in module sympy.polys.fields)": [[201, "sympy.polys.fields.field"]], "frac_field() (sympy.polys.domains.domain.domain method)": [[201, "sympy.polys.domains.domain.Domain.frac_field"]], "frac_unify() (sympy.polys.polyclasses.dmf method)": [[201, "sympy.polys.polyclasses.DMF.frac_unify"]], "free_module() (sympy.polys.domains.ring.ring method)": [[201, "sympy.polys.domains.ring.Ring.free_module"]], "from_algebraicfield() (sympy.polys.domains.algebraicfield method)": [[201, "sympy.polys.domains.AlgebraicField.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.fractionfield method)": [[201, "sympy.polys.domains.FractionField.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.integerring method)": [[201, "sympy.polys.domains.IntegerRing.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.polynomialring method)": [[201, "sympy.polys.domains.PolynomialRing.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.rationalfield method)": [[201, "sympy.polys.domains.RationalField.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.domain.domain method)": [[201, "sympy.polys.domains.domain.Domain.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[201, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_AlgebraicField"]], "from_complexfield() (sympy.polys.domains.fractionfield method)": [[201, "sympy.polys.domains.FractionField.from_ComplexField"]], "from_complexfield() (sympy.polys.domains.polynomialring method)": [[201, "sympy.polys.domains.PolynomialRing.from_ComplexField"]], "from_complexfield() (sympy.polys.domains.domain.domain method)": [[201, "sympy.polys.domains.domain.Domain.from_ComplexField"]], "from_expressiondomain() (sympy.polys.domains.expressiondomain method)": [[201, "sympy.polys.domains.ExpressionDomain.from_ExpressionDomain"]], "from_expressiondomain() (sympy.polys.domains.domain.domain method)": [[201, "sympy.polys.domains.domain.Domain.from_ExpressionDomain"]], "from_expressionrawdomain() (sympy.polys.domains.domain.domain method)": [[201, "sympy.polys.domains.domain.Domain.from_ExpressionRawDomain"]], "from_ff() (sympy.polys.domains.finitefield method)": [[201, "sympy.polys.domains.FiniteField.from_FF"]], "from_ff() (sympy.polys.domains.integerring method)": [[201, "sympy.polys.domains.IntegerRing.from_FF"]], "from_ff() (sympy.polys.domains.domain.domain method)": [[201, "sympy.polys.domains.domain.Domain.from_FF"]], "from_ff_gmpy() (sympy.polys.domains.finitefield method)": [[201, "sympy.polys.domains.FiniteField.from_FF_gmpy"]], "from_ff_gmpy() (sympy.polys.domains.gmpyintegerring method)": [[201, "sympy.polys.domains.GMPYIntegerRing.from_FF_gmpy"]], "from_ff_gmpy() (sympy.polys.domains.integerring method)": [[201, "sympy.polys.domains.IntegerRing.from_FF_gmpy"]], "from_ff_gmpy() (sympy.polys.domains.domain.domain method)": [[201, "sympy.polys.domains.domain.Domain.from_FF_gmpy"]], "from_ff_python() (sympy.polys.domains.finitefield method)": [[201, "sympy.polys.domains.FiniteField.from_FF_python"]], "from_ff_python() (sympy.polys.domains.gmpyintegerring method)": [[201, "sympy.polys.domains.GMPYIntegerRing.from_FF_python"]], "from_ff_python() (sympy.polys.domains.integerring method)": [[201, "sympy.polys.domains.IntegerRing.from_FF_python"]], "from_ff_python() (sympy.polys.domains.domain.domain method)": [[201, "sympy.polys.domains.domain.Domain.from_FF_python"]], "from_fractionfield() (sympy.polys.domains.expressiondomain method)": [[201, "sympy.polys.domains.ExpressionDomain.from_FractionField"]], "from_fractionfield() (sympy.polys.domains.fractionfield method)": [[201, "sympy.polys.domains.FractionField.from_FractionField"]], "from_fractionfield() (sympy.polys.domains.polynomialring method)": [[201, "sympy.polys.domains.PolynomialRing.from_FractionField"]], "from_fractionfield() (sympy.polys.domains.domain.domain method)": [[201, "sympy.polys.domains.domain.Domain.from_FractionField"]], "from_gaussianintegerring() (sympy.polys.domains.algebraicfield method)": [[201, "sympy.polys.domains.AlgebraicField.from_GaussianIntegerRing"]], "from_gaussianintegerring() (sympy.polys.domains.expressiondomain method)": [[201, "sympy.polys.domains.ExpressionDomain.from_GaussianIntegerRing"]], "from_gaussianintegerring() (sympy.polys.domains.fractionfield method)": [[201, "sympy.polys.domains.FractionField.from_GaussianIntegerRing"]], "from_gaussianintegerring() (sympy.polys.domains.polynomialring method)": [[201, "sympy.polys.domains.PolynomialRing.from_GaussianIntegerRing"]], "from_gaussianintegerring() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[201, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.from_GaussianIntegerRing"]], "from_gaussianintegerring() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[201, "sympy.polys.domains.gaussiandomains.GaussianRationalField.from_GaussianIntegerRing"]], "from_gaussianrationalfield() (sympy.polys.domains.algebraicfield method)": [[201, "sympy.polys.domains.AlgebraicField.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.expressiondomain method)": [[201, "sympy.polys.domains.ExpressionDomain.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.fractionfield method)": [[201, "sympy.polys.domains.FractionField.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.gmpyrationalfield method)": [[201, "sympy.polys.domains.GMPYRationalField.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.polynomialring method)": [[201, "sympy.polys.domains.PolynomialRing.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.rationalfield method)": [[201, "sympy.polys.domains.RationalField.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[201, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[201, "sympy.polys.domains.gaussiandomains.GaussianRationalField.from_GaussianRationalField"]], "from_globalpolynomialring() (sympy.polys.domains.polynomialring method)": [[201, "sympy.polys.domains.PolynomialRing.from_GlobalPolynomialRing"]], "from_globalpolynomialring() (sympy.polys.domains.domain.domain method)": [[201, "sympy.polys.domains.domain.Domain.from_GlobalPolynomialRing"]], "from_monogenicfiniteextension() (sympy.polys.domains.domain.domain method)": [[201, "sympy.polys.domains.domain.Domain.from_MonogenicFiniteExtension"]], "from_polynomialring() (sympy.polys.domains.expressiondomain method)": [[201, "sympy.polys.domains.ExpressionDomain.from_PolynomialRing"]], "from_polynomialring() (sympy.polys.domains.fractionfield method)": [[201, "sympy.polys.domains.FractionField.from_PolynomialRing"]], "from_polynomialring() (sympy.polys.domains.polynomialring method)": [[201, "sympy.polys.domains.PolynomialRing.from_PolynomialRing"]], "from_polynomialring() (sympy.polys.domains.domain.domain method)": [[201, "sympy.polys.domains.domain.Domain.from_PolynomialRing"]], "from_qq() (sympy.polys.domains.algebraicfield method)": [[201, "sympy.polys.domains.AlgebraicField.from_QQ"]], "from_qq() (sympy.polys.domains.expressiondomain method)": [[201, "sympy.polys.domains.ExpressionDomain.from_QQ"]], "from_qq() (sympy.polys.domains.finitefield method)": [[201, "sympy.polys.domains.FiniteField.from_QQ"]], "from_qq() (sympy.polys.domains.fractionfield method)": [[201, "sympy.polys.domains.FractionField.from_QQ"]], "from_qq() (sympy.polys.domains.gmpyintegerring method)": [[201, "sympy.polys.domains.GMPYIntegerRing.from_QQ"]], "from_qq() (sympy.polys.domains.integerring method)": [[201, "sympy.polys.domains.IntegerRing.from_QQ"]], "from_qq() (sympy.polys.domains.polynomialring method)": [[201, "sympy.polys.domains.PolynomialRing.from_QQ"]], "from_qq() (sympy.polys.domains.rationalfield method)": [[201, "sympy.polys.domains.RationalField.from_QQ"]], "from_qq() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[201, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_QQ"]], "from_qq_gmpy() (sympy.polys.domains.algebraicfield method)": [[201, "sympy.polys.domains.AlgebraicField.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.expressiondomain method)": [[201, "sympy.polys.domains.ExpressionDomain.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.finitefield method)": [[201, "sympy.polys.domains.FiniteField.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.fractionfield method)": [[201, "sympy.polys.domains.FractionField.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.gmpyintegerring method)": [[201, "sympy.polys.domains.GMPYIntegerRing.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.gmpyrationalfield method)": [[201, "sympy.polys.domains.GMPYRationalField.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.integerring method)": [[201, "sympy.polys.domains.IntegerRing.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.polynomialring method)": [[201, "sympy.polys.domains.PolynomialRing.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.rationalfield method)": [[201, "sympy.polys.domains.RationalField.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.domain.domain method)": [[201, "sympy.polys.domains.domain.Domain.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[201, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_QQ_gmpy"]], "from_qq_python() (sympy.polys.domains.algebraicfield method)": [[201, "sympy.polys.domains.AlgebraicField.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.expressiondomain method)": [[201, "sympy.polys.domains.ExpressionDomain.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.finitefield method)": [[201, "sympy.polys.domains.FiniteField.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.fractionfield method)": [[201, "sympy.polys.domains.FractionField.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.gmpyintegerring method)": [[201, "sympy.polys.domains.GMPYIntegerRing.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.gmpyrationalfield method)": [[201, "sympy.polys.domains.GMPYRationalField.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.integerring method)": [[201, "sympy.polys.domains.IntegerRing.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.polynomialring method)": [[201, "sympy.polys.domains.PolynomialRing.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.rationalfield method)": [[201, "sympy.polys.domains.RationalField.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.domain.domain method)": [[201, "sympy.polys.domains.domain.Domain.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[201, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_QQ_python"]], "from_realfield() (sympy.polys.domains.algebraicfield method)": [[201, "sympy.polys.domains.AlgebraicField.from_RealField"]], "from_realfield() (sympy.polys.domains.expressiondomain method)": [[201, "sympy.polys.domains.ExpressionDomain.from_RealField"]], "from_realfield() (sympy.polys.domains.finitefield method)": [[201, "sympy.polys.domains.FiniteField.from_RealField"]], "from_realfield() (sympy.polys.domains.fractionfield method)": [[201, "sympy.polys.domains.FractionField.from_RealField"]], "from_realfield() (sympy.polys.domains.gmpyintegerring method)": [[201, "sympy.polys.domains.GMPYIntegerRing.from_RealField"]], "from_realfield() (sympy.polys.domains.gmpyrationalfield method)": [[201, "sympy.polys.domains.GMPYRationalField.from_RealField"]], "from_realfield() (sympy.polys.domains.integerring method)": [[201, "sympy.polys.domains.IntegerRing.from_RealField"]], "from_realfield() (sympy.polys.domains.polynomialring method)": [[201, "sympy.polys.domains.PolynomialRing.from_RealField"]], "from_realfield() (sympy.polys.domains.rationalfield method)": [[201, "sympy.polys.domains.RationalField.from_RealField"]], "from_realfield() (sympy.polys.domains.domain.domain method)": [[201, "sympy.polys.domains.domain.Domain.from_RealField"]], "from_zz() (sympy.polys.domains.algebraicfield method)": [[201, "sympy.polys.domains.AlgebraicField.from_ZZ"]], "from_zz() (sympy.polys.domains.expressiondomain method)": [[201, "sympy.polys.domains.ExpressionDomain.from_ZZ"]], "from_zz() (sympy.polys.domains.finitefield method)": [[201, "sympy.polys.domains.FiniteField.from_ZZ"]], "from_zz() (sympy.polys.domains.fractionfield method)": [[201, "sympy.polys.domains.FractionField.from_ZZ"]], "from_zz() (sympy.polys.domains.integerring method)": [[201, "sympy.polys.domains.IntegerRing.from_ZZ"]], "from_zz() (sympy.polys.domains.polynomialring method)": [[201, "sympy.polys.domains.PolynomialRing.from_ZZ"]], "from_zz() (sympy.polys.domains.rationalfield method)": [[201, "sympy.polys.domains.RationalField.from_ZZ"]], "from_zz() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[201, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_ZZ"]], "from_zz_gmpy() (sympy.polys.domains.algebraicfield method)": [[201, "sympy.polys.domains.AlgebraicField.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.expressiondomain method)": [[201, "sympy.polys.domains.ExpressionDomain.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.finitefield method)": [[201, "sympy.polys.domains.FiniteField.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.fractionfield method)": [[201, "sympy.polys.domains.FractionField.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.gmpyintegerring method)": [[201, "sympy.polys.domains.GMPYIntegerRing.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.gmpyrationalfield method)": [[201, "sympy.polys.domains.GMPYRationalField.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.integerring method)": [[201, "sympy.polys.domains.IntegerRing.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.polynomialring method)": [[201, "sympy.polys.domains.PolynomialRing.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.rationalfield method)": [[201, "sympy.polys.domains.RationalField.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.domain.domain method)": [[201, "sympy.polys.domains.domain.Domain.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[201, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_ZZ_gmpy"]], "from_zz_python() (sympy.polys.domains.algebraicfield method)": [[201, "sympy.polys.domains.AlgebraicField.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.expressiondomain method)": [[201, "sympy.polys.domains.ExpressionDomain.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.finitefield method)": [[201, "sympy.polys.domains.FiniteField.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.fractionfield method)": [[201, "sympy.polys.domains.FractionField.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.gmpyintegerring method)": [[201, "sympy.polys.domains.GMPYIntegerRing.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.gmpyrationalfield method)": [[201, "sympy.polys.domains.GMPYRationalField.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.integerring method)": [[201, "sympy.polys.domains.IntegerRing.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.polynomialring method)": [[201, "sympy.polys.domains.PolynomialRing.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.rationalfield method)": [[201, "sympy.polys.domains.RationalField.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.domain.domain method)": [[201, "sympy.polys.domains.domain.Domain.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[201, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_ZZ_python"]], "from_dict() (sympy.polys.polyclasses.dmp class method)": [[201, "sympy.polys.polyclasses.DMP.from_dict"]], "from_list() (sympy.polys.polyclasses.dmp class method)": [[201, "sympy.polys.polyclasses.DMP.from_list"]], "from_sympy() (sympy.polys.domains.algebraicfield method)": [[201, "sympy.polys.domains.AlgebraicField.from_sympy"]], "from_sympy() (sympy.polys.domains.complexfield method)": [[201, "sympy.polys.domains.ComplexField.from_sympy"]], "from_sympy() (sympy.polys.domains.expressiondomain method)": [[201, "sympy.polys.domains.ExpressionDomain.from_sympy"]], "from_sympy() (sympy.polys.domains.finitefield method)": [[201, "sympy.polys.domains.FiniteField.from_sympy"]], "from_sympy() (sympy.polys.domains.fractionfield method)": [[201, "sympy.polys.domains.FractionField.from_sympy"]], "from_sympy() (sympy.polys.domains.gmpyintegerring method)": [[201, "sympy.polys.domains.GMPYIntegerRing.from_sympy"]], "from_sympy() (sympy.polys.domains.gmpyrationalfield method)": [[201, "sympy.polys.domains.GMPYRationalField.from_sympy"]], "from_sympy() (sympy.polys.domains.integerring method)": [[201, "sympy.polys.domains.IntegerRing.from_sympy"]], "from_sympy() (sympy.polys.domains.polynomialring method)": [[201, "sympy.polys.domains.PolynomialRing.from_sympy"]], "from_sympy() (sympy.polys.domains.rationalfield method)": [[201, "sympy.polys.domains.RationalField.from_sympy"]], "from_sympy() (sympy.polys.domains.realfield method)": [[201, "sympy.polys.domains.RealField.from_sympy"]], "from_sympy() (sympy.polys.domains.domain.domain method)": [[201, "sympy.polys.domains.domain.Domain.from_sympy"]], "from_sympy() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[201, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_sympy"]], "from_sympy_list() (sympy.polys.polyclasses.dmp class method)": [[201, "sympy.polys.polyclasses.DMP.from_sympy_list"]], "gcd() (sympy.polys.domains.complexfield method)": [[201, "sympy.polys.domains.ComplexField.gcd"]], "gcd() (sympy.polys.domains.gmpyintegerring method)": [[201, "sympy.polys.domains.GMPYIntegerRing.gcd"]], "gcd() (sympy.polys.domains.integerring method)": [[201, "sympy.polys.domains.IntegerRing.gcd"]], "gcd() (sympy.polys.domains.polynomialring method)": [[201, "sympy.polys.domains.PolynomialRing.gcd"]], "gcd() (sympy.polys.domains.realfield method)": [[201, "sympy.polys.domains.RealField.gcd"]], "gcd() (sympy.polys.domains.domain.domain method)": [[201, "sympy.polys.domains.domain.Domain.gcd"]], "gcd() (sympy.polys.domains.field.field method)": [[201, "sympy.polys.domains.field.Field.gcd"]], "gcd() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[201, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.gcd"]], "gcd() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.gcd"]], "gcdex() (sympy.polys.domains.gmpyintegerring method)": [[201, "sympy.polys.domains.GMPYIntegerRing.gcdex"]], "gcdex() (sympy.polys.domains.integerring method)": [[201, "sympy.polys.domains.IntegerRing.gcdex"]], "gcdex() (sympy.polys.domains.polynomialring method)": [[201, "sympy.polys.domains.PolynomialRing.gcdex"]], "gcdex() (sympy.polys.domains.domain.domain method)": [[201, "sympy.polys.domains.domain.Domain.gcdex"]], "gcdex() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.gcdex"]], "get_exact() (sympy.polys.domains.complexfield method)": [[201, "sympy.polys.domains.ComplexField.get_exact"]], "get_exact() (sympy.polys.domains.realfield method)": [[201, "sympy.polys.domains.RealField.get_exact"]], "get_exact() (sympy.polys.domains.domain.domain method)": [[201, "sympy.polys.domains.domain.Domain.get_exact"]], "get_field() (sympy.polys.domains.expressiondomain method)": [[201, "sympy.polys.domains.ExpressionDomain.get_field"]], "get_field() (sympy.polys.domains.finitefield method)": [[201, "sympy.polys.domains.FiniteField.get_field"]], "get_field() (sympy.polys.domains.integerring method)": [[201, "sympy.polys.domains.IntegerRing.get_field"]], "get_field() (sympy.polys.domains.polynomialring method)": [[201, "sympy.polys.domains.PolynomialRing.get_field"]], "get_field() (sympy.polys.domains.domain.domain method)": [[201, "sympy.polys.domains.domain.Domain.get_field"]], "get_field() (sympy.polys.domains.field.field method)": [[201, "sympy.polys.domains.field.Field.get_field"]], "get_field() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[201, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.get_field"]], "get_field() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[201, "sympy.polys.domains.gaussiandomains.GaussianRationalField.get_field"]], "get_ring() (sympy.polys.domains.algebraicfield method)": [[201, "sympy.polys.domains.AlgebraicField.get_ring"]], "get_ring() (sympy.polys.domains.complexfield method)": [[201, "sympy.polys.domains.ComplexField.get_ring"]], "get_ring() (sympy.polys.domains.expressiondomain method)": [[201, "sympy.polys.domains.ExpressionDomain.get_ring"]], "get_ring() (sympy.polys.domains.fractionfield method)": [[201, "sympy.polys.domains.FractionField.get_ring"]], "get_ring() (sympy.polys.domains.gmpyrationalfield method)": [[201, "sympy.polys.domains.GMPYRationalField.get_ring"]], "get_ring() (sympy.polys.domains.rationalfield method)": [[201, "sympy.polys.domains.RationalField.get_ring"]], "get_ring() (sympy.polys.domains.realfield method)": [[201, "sympy.polys.domains.RealField.get_ring"]], "get_ring() (sympy.polys.domains.domain.domain method)": [[201, "sympy.polys.domains.domain.Domain.get_ring"]], "get_ring() (sympy.polys.domains.field.field method)": [[201, "sympy.polys.domains.field.Field.get_ring"]], "get_ring() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[201, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.get_ring"]], "get_ring() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[201, "sympy.polys.domains.gaussiandomains.GaussianRationalField.get_ring"]], "get_ring() (sympy.polys.domains.ring.ring method)": [[201, "sympy.polys.domains.ring.Ring.get_ring"]], "gff_list() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.gff_list"]], "half_gcdex() (sympy.polys.domains.domain.domain method)": [[201, "sympy.polys.domains.domain.Domain.half_gcdex"]], "half_gcdex() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.half_gcdex"]], "half_per() (sympy.polys.polyclasses.dmf method)": [[201, "sympy.polys.polyclasses.DMF.half_per"]], "has_assoc_field (sympy.polys.domains.domain.domain attribute)": [[201, "sympy.polys.domains.domain.Domain.has_assoc_Field"]], "has_assoc_ring (sympy.polys.domains.domain.domain attribute)": [[201, "sympy.polys.domains.domain.Domain.has_assoc_Ring"]], "homogeneous_order() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.homogeneous_order"]], "homogenize() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.homogenize"]], "ideal() (sympy.polys.domains.ring.ring method)": [[201, "sympy.polys.domains.ring.Ring.ideal"]], "imul_num() (sympy.polys.rings.polyelement method)": [[201, "sympy.polys.rings.PolyElement.imul_num"]], "index() (sympy.polys.rings.polyring method)": [[201, "sympy.polys.rings.PolyRing.index"]], "inject() (sympy.polys.domains.compositedomain.compositedomain method)": [[201, "sympy.polys.domains.compositedomain.CompositeDomain.inject"]], "inject() (sympy.polys.domains.domain.domain method)": [[201, "sympy.polys.domains.domain.Domain.inject"]], "inject() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[201, "sympy.polys.domains.gaussiandomains.GaussianDomain.inject"]], "inject() (sympy.polys.domains.simpledomain.simpledomain method)": [[201, "sympy.polys.domains.simpledomain.SimpleDomain.inject"]], "inject() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.inject"]], "integral_basis() (sympy.polys.domains.algebraicfield method)": [[201, "sympy.polys.domains.AlgebraicField.integral_basis"]], "integrate() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.integrate"]], "intervals() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.intervals"]], "invert() (sympy.polys.domains.domain.domain method)": [[201, "sympy.polys.domains.domain.Domain.invert"]], "invert() (sympy.polys.domains.ring.ring method)": [[201, "sympy.polys.domains.ring.Ring.invert"]], "invert() (sympy.polys.polyclasses.dmf method)": [[201, "sympy.polys.polyclasses.DMF.invert"]], "invert() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.invert"]], "is_field (sympy.polys.domains.domain.domain attribute)": [[201, "sympy.polys.domains.domain.Domain.is_Field"]], "is_pid (sympy.polys.domains.domain.domain attribute)": [[201, "sympy.polys.domains.domain.Domain.is_PID"]], "is_ring (sympy.polys.domains.domain.domain attribute)": [[201, "sympy.polys.domains.domain.Domain.is_Ring"]], "is_cyclotomic (sympy.polys.polyclasses.dmp property)": [[201, "sympy.polys.polyclasses.DMP.is_cyclotomic"]], "is_ground (sympy.polys.polyclasses.anp property)": [[201, "sympy.polys.polyclasses.ANP.is_ground"]], "is_ground (sympy.polys.polyclasses.dmp property)": [[201, "sympy.polys.polyclasses.DMP.is_ground"]], "is_homogeneous (sympy.polys.polyclasses.dmp property)": [[201, "sympy.polys.polyclasses.DMP.is_homogeneous"]], "is_irreducible (sympy.polys.polyclasses.dmp property)": [[201, "sympy.polys.polyclasses.DMP.is_irreducible"]], "is_linear (sympy.polys.polyclasses.dmp property)": [[201, "sympy.polys.polyclasses.DMP.is_linear"]], "is_monic (sympy.polys.polyclasses.dmp property)": [[201, "sympy.polys.polyclasses.DMP.is_monic"]], "is_monomial (sympy.polys.polyclasses.dmp property)": [[201, "sympy.polys.polyclasses.DMP.is_monomial"]], "is_negative() (sympy.polys.domains.algebraicfield method)": [[201, "sympy.polys.domains.AlgebraicField.is_negative"]], "is_negative() (sympy.polys.domains.complexfield method)": [[201, "sympy.polys.domains.ComplexField.is_negative"]], "is_negative() (sympy.polys.domains.expressiondomain method)": [[201, "sympy.polys.domains.ExpressionDomain.is_negative"]], "is_negative() (sympy.polys.domains.fractionfield method)": [[201, "sympy.polys.domains.FractionField.is_negative"]], "is_negative() (sympy.polys.domains.polynomialring method)": [[201, "sympy.polys.domains.PolynomialRing.is_negative"]], "is_negative() (sympy.polys.domains.domain.domain method)": [[201, "sympy.polys.domains.domain.Domain.is_negative"]], "is_negative() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[201, "sympy.polys.domains.gaussiandomains.GaussianDomain.is_negative"]], "is_nonnegative() (sympy.polys.domains.algebraicfield method)": [[201, "sympy.polys.domains.AlgebraicField.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.complexfield method)": [[201, "sympy.polys.domains.ComplexField.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.expressiondomain method)": [[201, "sympy.polys.domains.ExpressionDomain.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.fractionfield method)": [[201, "sympy.polys.domains.FractionField.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.polynomialring method)": [[201, "sympy.polys.domains.PolynomialRing.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.domain.domain method)": [[201, "sympy.polys.domains.domain.Domain.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[201, "sympy.polys.domains.gaussiandomains.GaussianDomain.is_nonnegative"]], "is_nonpositive() (sympy.polys.domains.algebraicfield method)": [[201, "sympy.polys.domains.AlgebraicField.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.complexfield method)": [[201, "sympy.polys.domains.ComplexField.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.expressiondomain method)": [[201, "sympy.polys.domains.ExpressionDomain.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.fractionfield method)": [[201, "sympy.polys.domains.FractionField.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.polynomialring method)": [[201, "sympy.polys.domains.PolynomialRing.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.domain.domain method)": [[201, "sympy.polys.domains.domain.Domain.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[201, "sympy.polys.domains.gaussiandomains.GaussianDomain.is_nonpositive"]], "is_one (sympy.polys.polyclasses.anp property)": [[201, "sympy.polys.polyclasses.ANP.is_one"]], "is_one (sympy.polys.polyclasses.dmf property)": [[201, "sympy.polys.polyclasses.DMF.is_one"]], "is_one (sympy.polys.polyclasses.dmp property)": [[201, "sympy.polys.polyclasses.DMP.is_one"]], "is_one() (sympy.polys.domains.domain.domain method)": [[201, "sympy.polys.domains.domain.Domain.is_one"]], "is_positive() (sympy.polys.domains.algebraicfield method)": [[201, "sympy.polys.domains.AlgebraicField.is_positive"]], "is_positive() (sympy.polys.domains.complexfield method)": [[201, "sympy.polys.domains.ComplexField.is_positive"]], "is_positive() (sympy.polys.domains.expressiondomain method)": [[201, "sympy.polys.domains.ExpressionDomain.is_positive"]], "is_positive() (sympy.polys.domains.fractionfield method)": [[201, "sympy.polys.domains.FractionField.is_positive"]], "is_positive() (sympy.polys.domains.polynomialring method)": [[201, "sympy.polys.domains.PolynomialRing.is_positive"]], "is_positive() (sympy.polys.domains.domain.domain method)": [[201, "sympy.polys.domains.domain.Domain.is_positive"]], "is_positive() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[201, "sympy.polys.domains.gaussiandomains.GaussianDomain.is_positive"]], "is_primitive (sympy.polys.polyclasses.dmp property)": [[201, "sympy.polys.polyclasses.DMP.is_primitive"]], "is_quadratic (sympy.polys.polyclasses.dmp property)": [[201, "sympy.polys.polyclasses.DMP.is_quadratic"]], "is_sqf (sympy.polys.polyclasses.dmp property)": [[201, "sympy.polys.polyclasses.DMP.is_sqf"]], "is_unit() (sympy.polys.domains.polynomialring method)": [[201, "sympy.polys.domains.PolynomialRing.is_unit"]], "is_unit() (sympy.polys.domains.field.field method)": [[201, "sympy.polys.domains.field.Field.is_unit"]], "is_zero (sympy.polys.polyclasses.anp property)": [[201, "sympy.polys.polyclasses.ANP.is_zero"]], "is_zero (sympy.polys.polyclasses.dmf property)": [[201, "sympy.polys.polyclasses.DMF.is_zero"]], "is_zero (sympy.polys.polyclasses.dmp property)": [[201, "sympy.polys.polyclasses.DMP.is_zero"]], "is_zero() (sympy.polys.domains.domain.domain method)": [[201, "sympy.polys.domains.domain.Domain.is_zero"]], "itercoeffs() (sympy.polys.rings.polyelement method)": [[201, "sympy.polys.rings.PolyElement.itercoeffs"]], "itermonoms() (sympy.polys.rings.polyelement method)": [[201, "sympy.polys.rings.PolyElement.itermonoms"]], "iterterms() (sympy.polys.rings.polyelement method)": [[201, "sympy.polys.rings.PolyElement.iterterms"]], "l1_norm() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.l1_norm"]], "l2_norm_squared() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.l2_norm_squared"]], "lcm() (sympy.polys.domains.complexfield method)": [[201, "sympy.polys.domains.ComplexField.lcm"]], "lcm() (sympy.polys.domains.gmpyintegerring method)": [[201, "sympy.polys.domains.GMPYIntegerRing.lcm"]], "lcm() (sympy.polys.domains.integerring method)": [[201, "sympy.polys.domains.IntegerRing.lcm"]], "lcm() (sympy.polys.domains.polynomialring method)": [[201, "sympy.polys.domains.PolynomialRing.lcm"]], "lcm() (sympy.polys.domains.realfield method)": [[201, "sympy.polys.domains.RealField.lcm"]], "lcm() (sympy.polys.domains.domain.domain method)": [[201, "sympy.polys.domains.domain.Domain.lcm"]], "lcm() (sympy.polys.domains.field.field method)": [[201, "sympy.polys.domains.field.Field.lcm"]], "lcm() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[201, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.lcm"]], "lcm() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.lcm"]], "leading_expv() (sympy.polys.rings.polyelement method)": [[201, "sympy.polys.rings.PolyElement.leading_expv"]], "leading_monom() (sympy.polys.rings.polyelement method)": [[201, "sympy.polys.rings.PolyElement.leading_monom"]], "leading_term() (sympy.polys.rings.polyelement method)": [[201, "sympy.polys.rings.PolyElement.leading_term"]], "lift() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.lift"]], "listcoeffs() (sympy.polys.rings.polyelement method)": [[201, "sympy.polys.rings.PolyElement.listcoeffs"]], "listmonoms() (sympy.polys.rings.polyelement method)": [[201, "sympy.polys.rings.PolyElement.listmonoms"]], "listterms() (sympy.polys.rings.polyelement method)": [[201, "sympy.polys.rings.PolyElement.listterms"]], "log() (sympy.polys.domains.integerring method)": [[201, "sympy.polys.domains.IntegerRing.log"]], "log() (sympy.polys.domains.domain.domain method)": [[201, "sympy.polys.domains.domain.Domain.log"]], "map() (sympy.polys.domains.domain.domain method)": [[201, "sympy.polys.domains.domain.Domain.map"]], "max_norm() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.max_norm"]], "maximal_order() (sympy.polys.domains.algebraicfield method)": [[201, "sympy.polys.domains.AlgebraicField.maximal_order"]], "mignotte_sep_bound_squared() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.mignotte_sep_bound_squared"]], "mod (sympy.polys.domains.algebraicfield attribute)": [[201, "sympy.polys.domains.AlgebraicField.mod"]], "monic() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.monic"]], "monic() (sympy.polys.rings.polyelement method)": [[201, "sympy.polys.rings.PolyElement.monic"]], "monomial_basis() (sympy.polys.rings.polyring method)": [[201, "sympy.polys.rings.PolyRing.monomial_basis"]], "monoms() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.monoms"]], "monoms() (sympy.polys.rings.polyelement method)": [[201, "sympy.polys.rings.PolyElement.monoms"]], "mul() (sympy.polys.domains.domain.domain method)": [[201, "sympy.polys.domains.domain.Domain.mul"]], "mul() (sympy.polys.polyclasses.dmf method)": [[201, "sympy.polys.polyclasses.DMF.mul"]], "mul() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.mul"]], "mul() (sympy.polys.rings.polyring method)": [[201, "sympy.polys.rings.PolyRing.mul"]], "mul_ground() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.mul_ground"]], "n() (sympy.polys.domains.domain.domain method)": [[201, "sympy.polys.domains.domain.Domain.n"]], "neg() (sympy.polys.domains.domain.domain method)": [[201, "sympy.polys.domains.domain.Domain.neg"]], "neg() (sympy.polys.polyclasses.dmf method)": [[201, "sympy.polys.polyclasses.DMF.neg"]], "neg() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.neg"]], "new() (sympy.polys.domains.gaussiandomains.gaussianelement class method)": [[201, "sympy.polys.domains.gaussiandomains.GaussianElement.new"]], "norm() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.norm"]], "normalize() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[201, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.normalize"]], "nth() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.nth"]], "numer() (sympy.polys.domains.algebraicfield method)": [[201, "sympy.polys.domains.AlgebraicField.numer"]], "numer() (sympy.polys.domains.expressiondomain method)": [[201, "sympy.polys.domains.ExpressionDomain.numer"]], "numer() (sympy.polys.domains.fractionfield method)": [[201, "sympy.polys.domains.FractionField.numer"]], "numer() (sympy.polys.domains.gmpyrationalfield method)": [[201, "sympy.polys.domains.GMPYRationalField.numer"]], "numer() (sympy.polys.domains.rationalfield method)": [[201, "sympy.polys.domains.RationalField.numer"]], "numer() (sympy.polys.domains.domain.domain method)": [[201, "sympy.polys.domains.domain.Domain.numer"]], "numer() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[201, "sympy.polys.domains.gaussiandomains.GaussianRationalField.numer"]], "numer() (sympy.polys.domains.ring.ring method)": [[201, "sympy.polys.domains.ring.Ring.numer"]], "numer() (sympy.polys.polyclasses.dmf method)": [[201, "sympy.polys.polyclasses.DMF.numer"]], "of_type() (sympy.polys.domains.domain.domain method)": [[201, "sympy.polys.domains.domain.Domain.of_type"]], "old_frac_field() (sympy.polys.domains.domain.domain method)": [[201, "sympy.polys.domains.domain.Domain.old_frac_field"]], "old_poly_ring() (sympy.polys.domains.domain.domain method)": [[201, "sympy.polys.domains.domain.Domain.old_poly_ring"]], "one (sympy.polys.domains.domain.domain attribute)": [[201, "sympy.polys.domains.domain.Domain.one"]], "orig_ext (sympy.polys.domains.algebraicfield attribute)": [[201, "sympy.polys.domains.AlgebraicField.orig_ext"]], "parent() (sympy.polys.domains.domainelement.domainelement method)": [[201, "sympy.polys.domains.domainelement.DomainElement.parent"]], "parent() (sympy.polys.domains.gaussiandomains.gaussianelement method)": [[201, "sympy.polys.domains.gaussiandomains.GaussianElement.parent"]], "pdiv() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.pdiv"]], "per() (sympy.polys.polyclasses.dmf method)": [[201, "sympy.polys.polyclasses.DMF.per"]], "per() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.per"]], "permute() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.permute"]], "pexquo() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.pexquo"]], "poly_ring() (sympy.polys.domains.domain.domain method)": [[201, "sympy.polys.domains.domain.Domain.poly_ring"]], "poly_unify() (sympy.polys.polyclasses.dmf method)": [[201, "sympy.polys.polyclasses.DMF.poly_unify"]], "pos() (sympy.polys.domains.domain.domain method)": [[201, "sympy.polys.domains.domain.Domain.pos"]], "pow() (sympy.polys.domains.domain.domain method)": [[201, "sympy.polys.domains.domain.Domain.pow"]], "pow() (sympy.polys.polyclasses.anp method)": [[201, "sympy.polys.polyclasses.ANP.pow"]], "pow() (sympy.polys.polyclasses.dmf method)": [[201, "sympy.polys.polyclasses.DMF.pow"]], "pow() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.pow"]], "pquo() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.pquo"]], "prem() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.prem"]], "primes_above() (sympy.polys.domains.algebraicfield method)": [[201, "sympy.polys.domains.AlgebraicField.primes_above"]], "primitive() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.primitive"]], "primitive() (sympy.polys.rings.polyelement method)": [[201, "sympy.polys.rings.PolyElement.primitive"]], "quadrant() (sympy.polys.domains.gaussiandomains.gaussianelement method)": [[201, "sympy.polys.domains.gaussiandomains.GaussianElement.quadrant"]], "quo() (sympy.polys.domains.gmpyrationalfield method)": [[201, "sympy.polys.domains.GMPYRationalField.quo"]], "quo() (sympy.polys.domains.rationalfield method)": [[201, "sympy.polys.domains.RationalField.quo"]], "quo() (sympy.polys.domains.domain.domain method)": [[201, "sympy.polys.domains.domain.Domain.quo"]], "quo() (sympy.polys.domains.field.field method)": [[201, "sympy.polys.domains.field.Field.quo"]], "quo() (sympy.polys.domains.ring.ring method)": [[201, "sympy.polys.domains.ring.Ring.quo"]], "quo() (sympy.polys.polyclasses.dmf method)": [[201, "sympy.polys.polyclasses.DMF.quo"]], "quo() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.quo"]], "quo_ground() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.quo_ground"]], "quotient_ring() (sympy.polys.domains.ring.ring method)": [[201, "sympy.polys.domains.ring.Ring.quotient_ring"]], "refine_root() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.refine_root"]], "rem() (sympy.polys.domains.gmpyrationalfield method)": [[201, "sympy.polys.domains.GMPYRationalField.rem"]], "rem() (sympy.polys.domains.rationalfield method)": [[201, "sympy.polys.domains.RationalField.rem"]], "rem() (sympy.polys.domains.domain.domain method)": [[201, "sympy.polys.domains.domain.Domain.rem"]], "rem() (sympy.polys.domains.field.field method)": [[201, "sympy.polys.domains.field.Field.rem"]], "rem() (sympy.polys.domains.ring.ring method)": [[201, "sympy.polys.domains.ring.Ring.rem"]], "rem() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.rem"]], "resultant() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.resultant"]], "revert() (sympy.polys.domains.domain.domain method)": [[201, "sympy.polys.domains.domain.Domain.revert"]], "revert() (sympy.polys.domains.field.field method)": [[201, "sympy.polys.domains.field.Field.revert"]], "revert() (sympy.polys.domains.ring.ring method)": [[201, "sympy.polys.domains.ring.Ring.revert"]], "revert() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.revert"]], "ring() (in module sympy.polys.rings)": [[201, "sympy.polys.rings.ring"]], "sfield() (in module sympy.polys.fields)": [[201, "sympy.polys.fields.sfield"]], "shift() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.shift"]], "slice() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.slice"]], "sqf_list() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.sqf_list"]], "sqf_list_include() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.sqf_list_include"]], "sqf_norm() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.sqf_norm"]], "sqf_part() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.sqf_part"]], "sqr() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.sqr"]], "sqrt() (sympy.polys.domains.gmpyintegerring method)": [[201, "sympy.polys.domains.GMPYIntegerRing.sqrt"]], "sqrt() (sympy.polys.domains.integerring method)": [[201, "sympy.polys.domains.IntegerRing.sqrt"]], "sqrt() (sympy.polys.domains.domain.domain method)": [[201, "sympy.polys.domains.domain.Domain.sqrt"]], "square() (sympy.polys.rings.polyelement method)": [[201, "sympy.polys.rings.PolyElement.square"]], "sring() (in module sympy.polys.rings)": [[201, "sympy.polys.rings.sring"]], "strip_zero() (sympy.polys.rings.polyelement method)": [[201, "sympy.polys.rings.PolyElement.strip_zero"]], "sturm() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.sturm"]], "sub() (sympy.polys.domains.domain.domain method)": [[201, "sympy.polys.domains.domain.Domain.sub"]], "sub() (sympy.polys.polyclasses.dmf method)": [[201, "sympy.polys.polyclasses.DMF.sub"]], "sub() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.sub"]], "sub_ground() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.sub_ground"]], "subresultants() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.subresultants"]], "tail_degree() (sympy.polys.rings.polyelement method)": [[201, "sympy.polys.rings.PolyElement.tail_degree"]], "tail_degrees() (sympy.polys.rings.polyelement method)": [[201, "sympy.polys.rings.PolyElement.tail_degrees"]], "terms() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.terms"]], "terms() (sympy.polys.rings.polyelement method)": [[201, "sympy.polys.rings.PolyElement.terms"]], "terms_gcd() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.terms_gcd"]], "to_alg_num() (sympy.polys.domains.algebraicfield method)": [[201, "sympy.polys.domains.AlgebraicField.to_alg_num"]], "to_dict() (sympy.polys.polyclasses.anp method)": [[201, "sympy.polys.polyclasses.ANP.to_dict"]], "to_dict() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.to_dict"]], "to_exact() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.to_exact"]], "to_field() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.to_field"]], "to_list() (sympy.polys.polyclasses.anp method)": [[201, "sympy.polys.polyclasses.ANP.to_list"]], "to_list() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.to_list"]], "to_rational() (sympy.polys.domains.realfield method)": [[201, "sympy.polys.domains.RealField.to_rational"]], "to_ring() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.to_ring"]], "to_sympy() (sympy.polys.domains.algebraicfield method)": [[201, "sympy.polys.domains.AlgebraicField.to_sympy"]], "to_sympy() (sympy.polys.domains.complexfield method)": [[201, "sympy.polys.domains.ComplexField.to_sympy"]], "to_sympy() (sympy.polys.domains.expressiondomain method)": [[201, "sympy.polys.domains.ExpressionDomain.to_sympy"]], "to_sympy() (sympy.polys.domains.finitefield method)": [[201, "sympy.polys.domains.FiniteField.to_sympy"]], "to_sympy() (sympy.polys.domains.fractionfield method)": [[201, "sympy.polys.domains.FractionField.to_sympy"]], "to_sympy() (sympy.polys.domains.gmpyintegerring method)": [[201, "sympy.polys.domains.GMPYIntegerRing.to_sympy"]], "to_sympy() (sympy.polys.domains.gmpyrationalfield method)": [[201, "sympy.polys.domains.GMPYRationalField.to_sympy"]], "to_sympy() (sympy.polys.domains.integerring method)": [[201, "sympy.polys.domains.IntegerRing.to_sympy"]], "to_sympy() (sympy.polys.domains.polynomialring method)": [[201, "sympy.polys.domains.PolynomialRing.to_sympy"]], "to_sympy() (sympy.polys.domains.rationalfield method)": [[201, "sympy.polys.domains.RationalField.to_sympy"]], "to_sympy() (sympy.polys.domains.realfield method)": [[201, "sympy.polys.domains.RealField.to_sympy"]], "to_sympy() (sympy.polys.domains.domain.domain method)": [[201, "sympy.polys.domains.domain.Domain.to_sympy"]], "to_sympy() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[201, "sympy.polys.domains.gaussiandomains.GaussianDomain.to_sympy"]], "to_sympy_dict() (sympy.polys.polyclasses.anp method)": [[201, "sympy.polys.polyclasses.ANP.to_sympy_dict"]], "to_sympy_dict() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.to_sympy_dict"]], "to_sympy_list() (sympy.polys.polyclasses.anp method)": [[201, "sympy.polys.polyclasses.ANP.to_sympy_list"]], "to_sympy_list() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.to_sympy_list"]], "to_tuple() (sympy.polys.polyclasses.anp method)": [[201, "sympy.polys.polyclasses.ANP.to_tuple"]], "to_tuple() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.to_tuple"]], "total_degree() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.total_degree"]], "tp (sympy.polys.domains.domain.domain property)": [[201, "sympy.polys.domains.domain.Domain.tp"]], "transform() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.transform"]], "trunc() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.trunc"]], "unify() (sympy.polys.domains.domain.domain method)": [[201, "sympy.polys.domains.domain.Domain.unify"]], "unify() (sympy.polys.polyclasses.anp method)": [[201, "sympy.polys.polyclasses.ANP.unify"]], "unify() (sympy.polys.polyclasses.dmp method)": [[201, "sympy.polys.polyclasses.DMP.unify"]], "vfield() (in module sympy.polys.fields)": [[201, "sympy.polys.fields.vfield"]], "vring() (in module sympy.polys.rings)": [[201, "sympy.polys.rings.vring"]], "xfield() (in module sympy.polys.fields)": [[201, "sympy.polys.fields.xfield"]], "xring() (in module sympy.polys.rings)": [[201, "sympy.polys.rings.xring"]], "zero (sympy.polys.domains.domain.domain attribute)": [[201, "sympy.polys.domains.domain.Domain.zero"]], "basepolynomialerror (class in sympy.polys.polyerrors)": [[203, "sympy.polys.polyerrors.BasePolynomialError"]], "coercionfailed (class in sympy.polys.polyerrors)": [[203, "sympy.polys.polyerrors.CoercionFailed"]], "computationfailed (class in sympy.polys.polyerrors)": [[203, "sympy.polys.polyerrors.ComputationFailed"]], "domainerror (class in sympy.polys.polyerrors)": [[203, "sympy.polys.polyerrors.DomainError"]], "evaluationfailed (class in sympy.polys.polyerrors)": [[203, "sympy.polys.polyerrors.EvaluationFailed"]], "exactquotientfailed (class in sympy.polys.polyerrors)": [[203, "sympy.polys.polyerrors.ExactQuotientFailed"]], "extraneousfactors (class in sympy.polys.polyerrors)": [[203, "sympy.polys.polyerrors.ExtraneousFactors"]], "flagerror (class in sympy.polys.polyerrors)": [[203, "sympy.polys.polyerrors.FlagError"]], "generatorserror (class in sympy.polys.polyerrors)": [[203, "sympy.polys.polyerrors.GeneratorsError"]], "generatorsneeded (class in sympy.polys.polyerrors)": [[203, "sympy.polys.polyerrors.GeneratorsNeeded"]], "heuristicgcdfailed (class in sympy.polys.polyerrors)": [[203, "sympy.polys.polyerrors.HeuristicGCDFailed"]], "homomorphismfailed (class in sympy.polys.polyerrors)": [[203, "sympy.polys.polyerrors.HomomorphismFailed"]], "isomorphismfailed (class in sympy.polys.polyerrors)": [[203, "sympy.polys.polyerrors.IsomorphismFailed"]], "multivariatepolynomialerror (class in sympy.polys.polyerrors)": [[203, "sympy.polys.polyerrors.MultivariatePolynomialError"]], "notalgebraic (class in sympy.polys.polyerrors)": [[203, "sympy.polys.polyerrors.NotAlgebraic"]], "notinvertible (class in sympy.polys.polyerrors)": [[203, "sympy.polys.polyerrors.NotInvertible"]], "notreversible (class in sympy.polys.polyerrors)": [[203, "sympy.polys.polyerrors.NotReversible"]], "operationnotsupported (class in sympy.polys.polyerrors)": [[203, "sympy.polys.polyerrors.OperationNotSupported"]], "optionerror (class in sympy.polys.polyerrors)": [[203, "sympy.polys.polyerrors.OptionError"]], "options (class in sympy.polys.polyoptions)": [[203, "sympy.polys.polyoptions.Options"]], "polificationfailed (class in sympy.polys.polyerrors)": [[203, "sympy.polys.polyerrors.PolificationFailed"]], "polynomialerror (class in sympy.polys.polyerrors)": [[203, "sympy.polys.polyerrors.PolynomialError"]], "refinementfailed (class in sympy.polys.polyerrors)": [[203, "sympy.polys.polyerrors.RefinementFailed"]], "unificationfailed (class in sympy.polys.polyerrors)": [[203, "sympy.polys.polyerrors.UnificationFailed"]], "univariatepolynomialerror (class in sympy.polys.polyerrors)": [[203, "sympy.polys.polyerrors.UnivariatePolynomialError"]], "_modgcd_multivariate_p() (in module sympy.polys.modulargcd)": [[203, "sympy.polys.modulargcd._modgcd_multivariate_p"]], "build_options() (in module sympy.polys.polyoptions)": [[203, "sympy.polys.polyoptions.build_options"]], "clone() (sympy.polys.polyoptions.options method)": [[203, "sympy.polys.polyoptions.Options.clone"]], "dmp_lc() (in module sympy.polys.densebasic)": [[203, "sympy.polys.densebasic.dmp_LC"]], "dmp_tc() (in module sympy.polys.densebasic)": [[203, "sympy.polys.densebasic.dmp_TC"]], "dmp_abs() (in module sympy.polys.densearith)": [[203, "sympy.polys.densearith.dmp_abs"]], "dmp_add() (in module sympy.polys.densearith)": [[203, "sympy.polys.densearith.dmp_add"]], "dmp_add_ground() (in module sympy.polys.densearith)": [[203, "sympy.polys.densearith.dmp_add_ground"]], "dmp_add_mul() (in module sympy.polys.densearith)": [[203, "sympy.polys.densearith.dmp_add_mul"]], "dmp_add_term() (in module sympy.polys.densearith)": [[203, "sympy.polys.densearith.dmp_add_term"]], "dmp_apply_pairs() (in module sympy.polys.densebasic)": [[203, "sympy.polys.densebasic.dmp_apply_pairs"]], "dmp_cancel() (in module sympy.polys.euclidtools)": [[203, "sympy.polys.euclidtools.dmp_cancel"]], "dmp_clear_denoms() (in module sympy.polys.densetools)": [[203, "sympy.polys.densetools.dmp_clear_denoms"]], "dmp_compose() (in module sympy.polys.densetools)": [[203, "sympy.polys.densetools.dmp_compose"]], "dmp_content() (in module sympy.polys.euclidtools)": [[203, "sympy.polys.euclidtools.dmp_content"]], "dmp_convert() (in module sympy.polys.densebasic)": [[203, "sympy.polys.densebasic.dmp_convert"]], "dmp_copy() (in module sympy.polys.densebasic)": [[203, "sympy.polys.densebasic.dmp_copy"]], "dmp_deflate() (in module sympy.polys.densebasic)": [[203, "sympy.polys.densebasic.dmp_deflate"]], "dmp_degree() (in module sympy.polys.densebasic)": [[203, "sympy.polys.densebasic.dmp_degree"]], "dmp_degree_in() (in module sympy.polys.densebasic)": [[203, "sympy.polys.densebasic.dmp_degree_in"]], "dmp_degree_list() (in module sympy.polys.densebasic)": [[203, "sympy.polys.densebasic.dmp_degree_list"]], "dmp_diff() (in module sympy.polys.densetools)": [[203, "sympy.polys.densetools.dmp_diff"]], "dmp_diff_eval_in() (in module sympy.polys.densetools)": [[203, "sympy.polys.densetools.dmp_diff_eval_in"]], "dmp_diff_in() (in module sympy.polys.densetools)": [[203, "sympy.polys.densetools.dmp_diff_in"]], "dmp_discriminant() (in module sympy.polys.euclidtools)": [[203, "sympy.polys.euclidtools.dmp_discriminant"]], "dmp_div() (in module sympy.polys.densearith)": [[203, "sympy.polys.densearith.dmp_div"]], "dmp_eject() (in module sympy.polys.densebasic)": [[203, "sympy.polys.densebasic.dmp_eject"]], "dmp_euclidean_prs() (in module sympy.polys.euclidtools)": [[203, "sympy.polys.euclidtools.dmp_euclidean_prs"]], "dmp_eval() (in module sympy.polys.densetools)": [[203, "sympy.polys.densetools.dmp_eval"]], "dmp_eval_in() (in module sympy.polys.densetools)": [[203, "sympy.polys.densetools.dmp_eval_in"]], "dmp_eval_tail() (in module sympy.polys.densetools)": [[203, "sympy.polys.densetools.dmp_eval_tail"]], "dmp_exclude() (in module sympy.polys.densebasic)": [[203, "sympy.polys.densebasic.dmp_exclude"]], "dmp_expand() (in module sympy.polys.densearith)": [[203, "sympy.polys.densearith.dmp_expand"]], "dmp_exquo() (in module sympy.polys.densearith)": [[203, "sympy.polys.densearith.dmp_exquo"]], "dmp_exquo_ground() (in module sympy.polys.densearith)": [[203, "sympy.polys.densearith.dmp_exquo_ground"]], "dmp_ext_factor() (in module sympy.polys.factortools)": [[203, "sympy.polys.factortools.dmp_ext_factor"]], "dmp_factor_list() (in module sympy.polys.factortools)": [[203, "sympy.polys.factortools.dmp_factor_list"]], "dmp_factor_list_include() (in module sympy.polys.factortools)": [[203, "sympy.polys.factortools.dmp_factor_list_include"]], "dmp_ff_div() (in module sympy.polys.densearith)": [[203, "sympy.polys.densearith.dmp_ff_div"]], "dmp_ff_prs_gcd() (in module sympy.polys.euclidtools)": [[203, "sympy.polys.euclidtools.dmp_ff_prs_gcd"]], "dmp_from_dict() (in module sympy.polys.densebasic)": [[203, "sympy.polys.densebasic.dmp_from_dict"]], "dmp_from_sympy() (in module sympy.polys.densebasic)": [[203, "sympy.polys.densebasic.dmp_from_sympy"]], "dmp_gcd() (in module sympy.polys.euclidtools)": [[203, "sympy.polys.euclidtools.dmp_gcd"]], "dmp_gcdex() (in module sympy.polys.euclidtools)": [[203, "sympy.polys.euclidtools.dmp_gcdex"]], "dmp_ground() (in module sympy.polys.densebasic)": [[203, "sympy.polys.densebasic.dmp_ground"]], "dmp_ground_lc() (in module sympy.polys.densebasic)": [[203, "sympy.polys.densebasic.dmp_ground_LC"]], "dmp_ground_tc() (in module sympy.polys.densebasic)": [[203, "sympy.polys.densebasic.dmp_ground_TC"]], "dmp_ground_content() (in module sympy.polys.densetools)": [[203, "sympy.polys.densetools.dmp_ground_content"]], "dmp_ground_extract() (in module sympy.polys.densetools)": [[203, "sympy.polys.densetools.dmp_ground_extract"]], "dmp_ground_monic() (in module sympy.polys.densetools)": [[203, "sympy.polys.densetools.dmp_ground_monic"]], "dmp_ground_nth() (in module sympy.polys.densebasic)": [[203, "sympy.polys.densebasic.dmp_ground_nth"]], "dmp_ground_p() (in module sympy.polys.densebasic)": [[203, "sympy.polys.densebasic.dmp_ground_p"]], "dmp_ground_primitive() (in module sympy.polys.densetools)": [[203, "sympy.polys.densetools.dmp_ground_primitive"]], "dmp_ground_trunc() (in module sympy.polys.densetools)": [[203, "sympy.polys.densetools.dmp_ground_trunc"]], "dmp_grounds() (in module sympy.polys.densebasic)": [[203, "sympy.polys.densebasic.dmp_grounds"]], "dmp_half_gcdex() (in module sympy.polys.euclidtools)": [[203, "sympy.polys.euclidtools.dmp_half_gcdex"]], "dmp_include() (in module sympy.polys.densebasic)": [[203, "sympy.polys.densebasic.dmp_include"]], "dmp_inflate() (in module sympy.polys.densebasic)": [[203, "sympy.polys.densebasic.dmp_inflate"]], "dmp_inject() (in module sympy.polys.densebasic)": [[203, "sympy.polys.densebasic.dmp_inject"]], "dmp_inner_gcd() (in module sympy.polys.euclidtools)": [[203, "sympy.polys.euclidtools.dmp_inner_gcd"]], "dmp_inner_subresultants() (in module sympy.polys.euclidtools)": [[203, "sympy.polys.euclidtools.dmp_inner_subresultants"]], "dmp_integrate() (in module sympy.polys.densetools)": [[203, "sympy.polys.densetools.dmp_integrate"]], "dmp_integrate_in() (in module sympy.polys.densetools)": [[203, "sympy.polys.densetools.dmp_integrate_in"]], "dmp_invert() (in module sympy.polys.euclidtools)": [[203, "sympy.polys.euclidtools.dmp_invert"]], "dmp_irreducible_p() (in module sympy.polys.factortools)": [[203, "sympy.polys.factortools.dmp_irreducible_p"]], "dmp_l1_norm() (in module sympy.polys.densearith)": [[203, "sympy.polys.densearith.dmp_l1_norm"]], "dmp_lcm() (in module sympy.polys.euclidtools)": [[203, "sympy.polys.euclidtools.dmp_lcm"]], "dmp_lift() (in module sympy.polys.densetools)": [[203, "sympy.polys.densetools.dmp_lift"]], "dmp_list_terms() (in module sympy.polys.densebasic)": [[203, "sympy.polys.densebasic.dmp_list_terms"]], "dmp_max_norm() (in module sympy.polys.densearith)": [[203, "sympy.polys.densearith.dmp_max_norm"]], "dmp_mul() (in module sympy.polys.densearith)": [[203, "sympy.polys.densearith.dmp_mul"]], "dmp_mul_ground() (in module sympy.polys.densearith)": [[203, "sympy.polys.densearith.dmp_mul_ground"]], "dmp_mul_term() (in module sympy.polys.densearith)": [[203, "sympy.polys.densearith.dmp_mul_term"]], "dmp_multi_deflate() (in module sympy.polys.densebasic)": [[203, "sympy.polys.densebasic.dmp_multi_deflate"]], "dmp_neg() (in module sympy.polys.densearith)": [[203, "sympy.polys.densearith.dmp_neg"]], "dmp_negative_p() (in module sympy.polys.densebasic)": [[203, "sympy.polys.densebasic.dmp_negative_p"]], "dmp_nest() (in module sympy.polys.densebasic)": [[203, "sympy.polys.densebasic.dmp_nest"]], "dmp_normal() (in module sympy.polys.densebasic)": [[203, "sympy.polys.densebasic.dmp_normal"]], "dmp_nth() (in module sympy.polys.densebasic)": [[203, "sympy.polys.densebasic.dmp_nth"]], "dmp_one() (in module sympy.polys.densebasic)": [[203, "sympy.polys.densebasic.dmp_one"]], "dmp_one_p() (in module sympy.polys.densebasic)": [[203, "sympy.polys.densebasic.dmp_one_p"]], "dmp_pdiv() (in module sympy.polys.densearith)": [[203, "sympy.polys.densearith.dmp_pdiv"]], "dmp_permute() (in module sympy.polys.densebasic)": [[203, "sympy.polys.densebasic.dmp_permute"]], "dmp_pexquo() (in module sympy.polys.densearith)": [[203, "sympy.polys.densearith.dmp_pexquo"]], "dmp_positive_p() (in module sympy.polys.densebasic)": [[203, "sympy.polys.densebasic.dmp_positive_p"]], "dmp_pow() (in module sympy.polys.densearith)": [[203, "sympy.polys.densearith.dmp_pow"]], "dmp_pquo() (in module sympy.polys.densearith)": [[203, "sympy.polys.densearith.dmp_pquo"]], "dmp_prem() (in module sympy.polys.densearith)": [[203, "sympy.polys.densearith.dmp_prem"]], "dmp_primitive() (in module sympy.polys.euclidtools)": [[203, "sympy.polys.euclidtools.dmp_primitive"]], "dmp_primitive_prs() (in module sympy.polys.euclidtools)": [[203, "sympy.polys.euclidtools.dmp_primitive_prs"]], "dmp_prs_resultant() (in module sympy.polys.euclidtools)": [[203, "sympy.polys.euclidtools.dmp_prs_resultant"]], "dmp_qq_collins_resultant() (in module sympy.polys.euclidtools)": [[203, "sympy.polys.euclidtools.dmp_qq_collins_resultant"]], "dmp_qq_heu_gcd() (in module sympy.polys.euclidtools)": [[203, "sympy.polys.euclidtools.dmp_qq_heu_gcd"]], "dmp_quo() (in module sympy.polys.densearith)": [[203, "sympy.polys.densearith.dmp_quo"]], "dmp_quo_ground() (in module sympy.polys.densearith)": [[203, "sympy.polys.densearith.dmp_quo_ground"]], "dmp_raise() (in module sympy.polys.densebasic)": [[203, "sympy.polys.densebasic.dmp_raise"]], "dmp_rem() (in module sympy.polys.densearith)": [[203, "sympy.polys.densearith.dmp_rem"]], "dmp_resultant() (in module sympy.polys.euclidtools)": [[203, "sympy.polys.euclidtools.dmp_resultant"]], "dmp_revert() (in module sympy.polys.densetools)": [[203, "sympy.polys.densetools.dmp_revert"]], "dmp_rr_div() (in module sympy.polys.densearith)": [[203, "sympy.polys.densearith.dmp_rr_div"]], "dmp_rr_prs_gcd() (in module sympy.polys.euclidtools)": [[203, "sympy.polys.euclidtools.dmp_rr_prs_gcd"]], "dmp_slice() (in module sympy.polys.densebasic)": [[203, "sympy.polys.densebasic.dmp_slice"]], "dmp_sqr() (in module sympy.polys.densearith)": [[203, "sympy.polys.densearith.dmp_sqr"]], "dmp_strip() (in module sympy.polys.densebasic)": [[203, "sympy.polys.densebasic.dmp_strip"]], "dmp_sub() (in module sympy.polys.densearith)": [[203, "sympy.polys.densearith.dmp_sub"]], "dmp_sub_ground() (in module sympy.polys.densearith)": [[203, "sympy.polys.densearith.dmp_sub_ground"]], "dmp_sub_mul() (in module sympy.polys.densearith)": [[203, "sympy.polys.densearith.dmp_sub_mul"]], "dmp_sub_term() (in module sympy.polys.densearith)": [[203, "sympy.polys.densearith.dmp_sub_term"]], "dmp_subresultants() (in module sympy.polys.euclidtools)": [[203, "sympy.polys.euclidtools.dmp_subresultants"]], "dmp_swap() (in module sympy.polys.densebasic)": [[203, "sympy.polys.densebasic.dmp_swap"]], "dmp_terms_gcd() (in module sympy.polys.densebasic)": [[203, "sympy.polys.densebasic.dmp_terms_gcd"]], "dmp_to_dict() (in module sympy.polys.densebasic)": [[203, "sympy.polys.densebasic.dmp_to_dict"]], "dmp_to_tuple() (in module sympy.polys.densebasic)": [[203, "sympy.polys.densebasic.dmp_to_tuple"]], "dmp_trial_division() (in module sympy.polys.factortools)": [[203, "sympy.polys.factortools.dmp_trial_division"]], "dmp_true_lt() (in module sympy.polys.densebasic)": [[203, "sympy.polys.densebasic.dmp_true_LT"]], "dmp_trunc() (in module sympy.polys.densetools)": [[203, "sympy.polys.densetools.dmp_trunc"]], "dmp_validate() (in module sympy.polys.densebasic)": [[203, "sympy.polys.densebasic.dmp_validate"]], "dmp_zero() (in module sympy.polys.densebasic)": [[203, "sympy.polys.densebasic.dmp_zero"]], "dmp_zero_p() (in module sympy.polys.densebasic)": [[203, "sympy.polys.densebasic.dmp_zero_p"]], "dmp_zeros() (in module sympy.polys.densebasic)": [[203, "sympy.polys.densebasic.dmp_zeros"]], "dmp_zz_collins_resultant() (in module sympy.polys.euclidtools)": [[203, "sympy.polys.euclidtools.dmp_zz_collins_resultant"]], "dmp_zz_diophantine() (in module sympy.polys.factortools)": [[203, "sympy.polys.factortools.dmp_zz_diophantine"]], "dmp_zz_factor() (in module sympy.polys.factortools)": [[203, "sympy.polys.factortools.dmp_zz_factor"]], "dmp_zz_heu_gcd() (in module sympy.polys.euclidtools)": [[203, "sympy.polys.euclidtools.dmp_zz_heu_gcd"]], "dmp_zz_mignotte_bound() (in module sympy.polys.factortools)": [[203, "sympy.polys.factortools.dmp_zz_mignotte_bound"]], "dmp_zz_modular_resultant() (in module sympy.polys.euclidtools)": [[203, "sympy.polys.euclidtools.dmp_zz_modular_resultant"]], "dmp_zz_wang() (in module sympy.polys.factortools)": [[203, "sympy.polys.factortools.dmp_zz_wang"]], "dmp_zz_wang_hensel_lifting() (in module sympy.polys.factortools)": [[203, "sympy.polys.factortools.dmp_zz_wang_hensel_lifting"]], "dmp_zz_wang_lead_coeffs() (in module sympy.polys.factortools)": [[203, "sympy.polys.factortools.dmp_zz_wang_lead_coeffs"]], "dmp_zz_wang_non_divisors() (in module sympy.polys.factortools)": [[203, "sympy.polys.factortools.dmp_zz_wang_non_divisors"]], "dmp_zz_wang_test_points() (in module sympy.polys.factortools)": [[203, "sympy.polys.factortools.dmp_zz_wang_test_points"]], "dup_content() (in module sympy.polys.densetools)": [[203, "sympy.polys.densetools.dup_content"]], "dup_cyclotomic_p() (in module sympy.polys.factortools)": [[203, "sympy.polys.factortools.dup_cyclotomic_p"]], "dup_decompose() (in module sympy.polys.densetools)": [[203, "sympy.polys.densetools.dup_decompose"]], "dup_extract() (in module sympy.polys.densetools)": [[203, "sympy.polys.densetools.dup_extract"]], "dup_gf_factor() (in module sympy.polys.factortools)": [[203, "sympy.polys.factortools.dup_gf_factor"]], "dup_lshift() (in module sympy.polys.densearith)": [[203, "sympy.polys.densearith.dup_lshift"]], "dup_mirror() (in module sympy.polys.densetools)": [[203, "sympy.polys.densetools.dup_mirror"]], "dup_monic() (in module sympy.polys.densetools)": [[203, "sympy.polys.densetools.dup_monic"]], "dup_primitive() (in module sympy.polys.densetools)": [[203, "sympy.polys.densetools.dup_primitive"]], "dup_random() (in module sympy.polys.densebasic)": [[203, "sympy.polys.densebasic.dup_random"]], "dup_real_imag() (in module sympy.polys.densetools)": [[203, "sympy.polys.densetools.dup_real_imag"]], "dup_reverse() (in module sympy.polys.densebasic)": [[203, "sympy.polys.densebasic.dup_reverse"]], "dup_rshift() (in module sympy.polys.densearith)": [[203, "sympy.polys.densearith.dup_rshift"]], "dup_scale() (in module sympy.polys.densetools)": [[203, "sympy.polys.densetools.dup_scale"]], "dup_shift() (in module sympy.polys.densetools)": [[203, "sympy.polys.densetools.dup_shift"]], "dup_sign_variations() (in module sympy.polys.densetools)": [[203, "sympy.polys.densetools.dup_sign_variations"]], "dup_transform() (in module sympy.polys.densetools)": [[203, "sympy.polys.densetools.dup_transform"]], "dup_zz_cyclotomic_factor() (in module sympy.polys.factortools)": [[203, "sympy.polys.factortools.dup_zz_cyclotomic_factor"]], "dup_zz_cyclotomic_poly() (in module sympy.polys.factortools)": [[203, "sympy.polys.factortools.dup_zz_cyclotomic_poly"]], "dup_zz_factor() (in module sympy.polys.factortools)": [[203, "sympy.polys.factortools.dup_zz_factor"]], "dup_zz_factor_sqf() (in module sympy.polys.factortools)": [[203, "sympy.polys.factortools.dup_zz_factor_sqf"]], "dup_zz_hensel_lift() (in module sympy.polys.factortools)": [[203, "sympy.polys.factortools.dup_zz_hensel_lift"]], "dup_zz_hensel_step() (in module sympy.polys.factortools)": [[203, "sympy.polys.factortools.dup_zz_hensel_step"]], "dup_zz_irreducible_p() (in module sympy.polys.factortools)": [[203, "sympy.polys.factortools.dup_zz_irreducible_p"]], "dup_zz_zassenhaus() (in module sympy.polys.factortools)": [[203, "sympy.polys.factortools.dup_zz_zassenhaus"]], "func_field_modgcd() (in module sympy.polys.modulargcd)": [[203, "sympy.polys.modulargcd.func_field_modgcd"]], "gf_lc() (in module sympy.polys.galoistools)": [[203, "sympy.polys.galoistools.gf_LC"]], "gf_qbasis() (in module sympy.polys.galoistools)": [[203, "sympy.polys.galoistools.gf_Qbasis"]], "gf_qmatrix() (in module sympy.polys.galoistools)": [[203, "sympy.polys.galoistools.gf_Qmatrix"]], "gf_tc() (in module sympy.polys.galoistools)": [[203, "sympy.polys.galoistools.gf_TC"]], "gf_add() (in module sympy.polys.galoistools)": [[203, "sympy.polys.galoistools.gf_add"]], "gf_add_ground() (in module sympy.polys.galoistools)": [[203, "sympy.polys.galoistools.gf_add_ground"]], "gf_add_mul() (in module sympy.polys.galoistools)": [[203, "sympy.polys.galoistools.gf_add_mul"]], "gf_berlekamp() (in module sympy.polys.galoistools)": [[203, "sympy.polys.galoistools.gf_berlekamp"]], "gf_cofactors() (in module sympy.polys.galoistools)": [[203, "sympy.polys.galoistools.gf_cofactors"]], "gf_compose() (in module sympy.polys.galoistools)": [[203, "sympy.polys.galoistools.gf_compose"]], "gf_compose_mod() (in module sympy.polys.galoistools)": [[203, "sympy.polys.galoistools.gf_compose_mod"]], "gf_crt() (in module sympy.polys.galoistools)": [[203, "sympy.polys.galoistools.gf_crt"]], "gf_crt1() (in module sympy.polys.galoistools)": [[203, "sympy.polys.galoistools.gf_crt1"]], "gf_crt2() (in module sympy.polys.galoistools)": [[203, "sympy.polys.galoistools.gf_crt2"]], "gf_csolve() (in module sympy.polys.galoistools)": [[203, "sympy.polys.galoistools.gf_csolve"]], "gf_degree() (in module sympy.polys.galoistools)": [[203, "sympy.polys.galoistools.gf_degree"]], "gf_diff() (in module sympy.polys.galoistools)": [[203, "sympy.polys.galoistools.gf_diff"]], "gf_div() (in module sympy.polys.galoistools)": [[203, "sympy.polys.galoistools.gf_div"]], "gf_eval() (in module sympy.polys.galoistools)": [[203, "sympy.polys.galoistools.gf_eval"]], "gf_expand() (in module sympy.polys.galoistools)": [[203, "sympy.polys.galoistools.gf_expand"]], "gf_exquo() (in module sympy.polys.galoistools)": [[203, "sympy.polys.galoistools.gf_exquo"]], "gf_factor() (in module sympy.polys.galoistools)": [[203, "sympy.polys.galoistools.gf_factor"]], "gf_factor_sqf() (in module sympy.polys.galoistools)": [[203, "sympy.polys.galoistools.gf_factor_sqf"]], "gf_from_dict() (in module sympy.polys.galoistools)": [[203, "sympy.polys.galoistools.gf_from_dict"]], "gf_from_int_poly() (in module sympy.polys.galoistools)": [[203, "sympy.polys.galoistools.gf_from_int_poly"]], "gf_gcd() (in module sympy.polys.galoistools)": [[203, "sympy.polys.galoistools.gf_gcd"]], "gf_gcdex() (in module sympy.polys.galoistools)": [[203, "sympy.polys.galoistools.gf_gcdex"]], "gf_int() (in module sympy.polys.galoistools)": [[203, "sympy.polys.galoistools.gf_int"]], "gf_irreducible() (in module sympy.polys.galoistools)": [[203, "sympy.polys.galoistools.gf_irreducible"]], "gf_irreducible_p() (in module sympy.polys.galoistools)": [[203, "sympy.polys.galoistools.gf_irreducible_p"]], "gf_lcm() (in module sympy.polys.galoistools)": [[203, "sympy.polys.galoistools.gf_lcm"]], "gf_lshift() (in module sympy.polys.galoistools)": [[203, "sympy.polys.galoistools.gf_lshift"]], "gf_monic() (in module sympy.polys.galoistools)": [[203, "sympy.polys.galoistools.gf_monic"]], "gf_mul() (in module sympy.polys.galoistools)": [[203, "sympy.polys.galoistools.gf_mul"]], "gf_mul_ground() (in module sympy.polys.galoistools)": [[203, "sympy.polys.galoistools.gf_mul_ground"]], "gf_multi_eval() (in module sympy.polys.galoistools)": [[203, "sympy.polys.galoistools.gf_multi_eval"]], "gf_neg() (in module sympy.polys.galoistools)": [[203, "sympy.polys.galoistools.gf_neg"]], "gf_normal() (in module sympy.polys.galoistools)": [[203, "sympy.polys.galoistools.gf_normal"]], "gf_pow() (in module sympy.polys.galoistools)": [[203, "sympy.polys.galoistools.gf_pow"]], "gf_pow_mod() (in module sympy.polys.galoistools)": [[203, "sympy.polys.galoistools.gf_pow_mod"]], "gf_quo() (in module sympy.polys.galoistools)": [[203, "sympy.polys.galoistools.gf_quo"]], "gf_quo_ground() (in module sympy.polys.galoistools)": [[203, "sympy.polys.galoistools.gf_quo_ground"]], "gf_random() (in module sympy.polys.galoistools)": [[203, "sympy.polys.galoistools.gf_random"]], "gf_rem() (in module sympy.polys.galoistools)": [[203, "sympy.polys.galoistools.gf_rem"]], "gf_rshift() (in module sympy.polys.galoistools)": [[203, "sympy.polys.galoistools.gf_rshift"]], "gf_shoup() (in module sympy.polys.galoistools)": [[203, "sympy.polys.galoistools.gf_shoup"]], "gf_sqf_list() (in module sympy.polys.galoistools)": [[203, "sympy.polys.galoistools.gf_sqf_list"]], "gf_sqf_p() (in module sympy.polys.galoistools)": [[203, "sympy.polys.galoistools.gf_sqf_p"]], "gf_sqf_part() (in module sympy.polys.galoistools)": [[203, "sympy.polys.galoistools.gf_sqf_part"]], "gf_sqr() (in module sympy.polys.galoistools)": [[203, "sympy.polys.galoistools.gf_sqr"]], "gf_strip() (in module sympy.polys.galoistools)": [[203, "sympy.polys.galoistools.gf_strip"]], "gf_sub() (in module sympy.polys.galoistools)": [[203, "sympy.polys.galoistools.gf_sub"]], "gf_sub_ground() (in module sympy.polys.galoistools)": [[203, "sympy.polys.galoistools.gf_sub_ground"]], "gf_sub_mul() (in module sympy.polys.galoistools)": [[203, "sympy.polys.galoistools.gf_sub_mul"]], "gf_to_dict() (in module sympy.polys.galoistools)": [[203, "sympy.polys.galoistools.gf_to_dict"]], "gf_to_int_poly() (in module sympy.polys.galoistools)": [[203, "sympy.polys.galoistools.gf_to_int_poly"]], "gf_trace_map() (in module sympy.polys.galoistools)": [[203, "sympy.polys.galoistools.gf_trace_map"]], "gf_trunc() (in module sympy.polys.galoistools)": [[203, "sympy.polys.galoistools.gf_trunc"]], "gf_value() (in module sympy.polys.galoistools)": [[203, "sympy.polys.galoistools.gf_value"]], "gf_zassenhaus() (in module sympy.polys.galoistools)": [[203, "sympy.polys.galoistools.gf_zassenhaus"]], "groebner() (in module sympy.polys.groebnertools)": [[203, "sympy.polys.groebnertools.groebner"]], "is_groebner() (in module sympy.polys.groebnertools)": [[203, "sympy.polys.groebnertools.is_groebner"]], "is_minimal() (in module sympy.polys.groebnertools)": [[203, "sympy.polys.groebnertools.is_minimal"]], "is_reduced() (in module sympy.polys.groebnertools)": [[203, "sympy.polys.groebnertools.is_reduced"]], "matrix_fglm() (in module sympy.polys.fglmtools)": [[203, "sympy.polys.fglmtools.matrix_fglm"]], "modgcd_bivariate() (in module sympy.polys.modulargcd)": [[203, "sympy.polys.modulargcd.modgcd_bivariate"]], "modgcd_multivariate() (in module sympy.polys.modulargcd)": [[203, "sympy.polys.modulargcd.modgcd_multivariate"]], "modgcd_univariate() (in module sympy.polys.modulargcd)": [[203, "sympy.polys.modulargcd.modgcd_univariate"]], "red_groebner() (in module sympy.polys.groebnertools)": [[203, "sympy.polys.groebnertools.red_groebner"]], "sdm_lc() (in module sympy.polys.distributedmodules)": [[203, "sympy.polys.distributedmodules.sdm_LC"]], "sdm_lm() (in module sympy.polys.distributedmodules)": [[203, "sympy.polys.distributedmodules.sdm_LM"]], "sdm_lt() (in module sympy.polys.distributedmodules)": [[203, "sympy.polys.distributedmodules.sdm_LT"]], "sdm_add() (in module sympy.polys.distributedmodules)": [[203, "sympy.polys.distributedmodules.sdm_add"]], "sdm_deg() (in module sympy.polys.distributedmodules)": [[203, "sympy.polys.distributedmodules.sdm_deg"]], "sdm_ecart() (in module sympy.polys.distributedmodules)": [[203, "sympy.polys.distributedmodules.sdm_ecart"]], "sdm_from_dict() (in module sympy.polys.distributedmodules)": [[203, "sympy.polys.distributedmodules.sdm_from_dict"]], "sdm_from_vector() (in module sympy.polys.distributedmodules)": [[203, "sympy.polys.distributedmodules.sdm_from_vector"]], "sdm_groebner() (in module sympy.polys.distributedmodules)": [[203, "sympy.polys.distributedmodules.sdm_groebner"]], "sdm_monomial_deg() (in module sympy.polys.distributedmodules)": [[203, "sympy.polys.distributedmodules.sdm_monomial_deg"]], "sdm_monomial_divides() (in module sympy.polys.distributedmodules)": [[203, "sympy.polys.distributedmodules.sdm_monomial_divides"]], "sdm_monomial_mul() (in module sympy.polys.distributedmodules)": [[203, "sympy.polys.distributedmodules.sdm_monomial_mul"]], "sdm_mul_term() (in module sympy.polys.distributedmodules)": [[203, "sympy.polys.distributedmodules.sdm_mul_term"]], "sdm_nf_mora() (in module sympy.polys.distributedmodules)": [[203, "sympy.polys.distributedmodules.sdm_nf_mora"]], "sdm_spoly() (in module sympy.polys.distributedmodules)": [[203, "sympy.polys.distributedmodules.sdm_spoly"]], "sdm_to_dict() (in module sympy.polys.distributedmodules)": [[203, "sympy.polys.distributedmodules.sdm_to_dict"]], "sdm_to_vector() (in module sympy.polys.distributedmodules)": [[203, "sympy.polys.distributedmodules.sdm_to_vector"]], "sdm_zero() (in module sympy.polys.distributedmodules)": [[203, "sympy.polys.distributedmodules.sdm_zero"]], "setup() (in module sympy.polys.polyconfig)": [[203, "sympy.polys.polyconfig.setup"]], "spoly() (in module sympy.polys.groebnertools)": [[203, "sympy.polys.groebnertools.spoly"]], "sympy.polys.polyconfig": [[203, "module-sympy.polys.polyconfig"]], "sympy.polys.polyoptions": [[203, "module-sympy.polys.polyoptions"]], "algintpowers (class in sympy.polys.numberfields.utilities)": [[205, "sympy.polys.numberfields.utilities.AlgIntPowers"]], "endomorphismring (class in sympy.polys.numberfields.modules)": [[205, "sympy.polys.numberfields.modules.EndomorphismRing"]], "innerendomorphism (class in sympy.polys.numberfields.modules)": [[205, "sympy.polys.numberfields.modules.InnerEndomorphism"]], "module (class in sympy.polys.numberfields.modules)": [[205, "sympy.polys.numberfields.modules.Module"]], "moduleelement (class in sympy.polys.numberfields.modules)": [[205, "sympy.polys.numberfields.modules.ModuleElement"]], "moduleendomorphism (class in sympy.polys.numberfields.modules)": [[205, "sympy.polys.numberfields.modules.ModuleEndomorphism"]], "modulehomomorphism (class in sympy.polys.numberfields.modules)": [[205, "sympy.polys.numberfields.modules.ModuleHomomorphism"]], "powerbasis (class in sympy.polys.numberfields.modules)": [[205, "sympy.polys.numberfields.modules.PowerBasis"]], "powerbasiselement (class in sympy.polys.numberfields.modules)": [[205, "sympy.polys.numberfields.modules.PowerBasisElement"]], "primeideal (class in sympy.polys.numberfields.primes)": [[205, "sympy.polys.numberfields.primes.PrimeIdeal"]], "qq_col (sympy.polys.numberfields.modules.moduleelement property)": [[205, "sympy.polys.numberfields.modules.ModuleElement.QQ_col"]], "qq_matrix (sympy.polys.numberfields.modules.submodule property)": [[205, "sympy.polys.numberfields.modules.Submodule.QQ_matrix"]], "submodule (class in sympy.polys.numberfields.modules)": [[205, "sympy.polys.numberfields.modules.Submodule"]], "t (sympy.polys.numberfields.modules.powerbasiselement property)": [[205, "sympy.polys.numberfields.modules.PowerBasisElement.T"]], "__add__() (sympy.polys.numberfields.modules.moduleelement method)": [[205, "sympy.polys.numberfields.modules.ModuleElement.__add__"]], "__add__() (sympy.polys.numberfields.primes.primeideal method)": [[205, "sympy.polys.numberfields.primes.PrimeIdeal.__add__"]], "__call__() (sympy.polys.numberfields.modules.module method)": [[205, "sympy.polys.numberfields.modules.Module.__call__"]], "__init__() (sympy.polys.numberfields.modules.endomorphismring method)": [[205, "sympy.polys.numberfields.modules.EndomorphismRing.__init__"]], "__init__() (sympy.polys.numberfields.modules.innerendomorphism method)": [[205, "sympy.polys.numberfields.modules.InnerEndomorphism.__init__"]], "__init__() (sympy.polys.numberfields.modules.moduleelement method)": [[205, "sympy.polys.numberfields.modules.ModuleElement.__init__"]], "__init__() (sympy.polys.numberfields.modules.moduleendomorphism method)": [[205, "sympy.polys.numberfields.modules.ModuleEndomorphism.__init__"]], "__init__() (sympy.polys.numberfields.modules.modulehomomorphism method)": [[205, "sympy.polys.numberfields.modules.ModuleHomomorphism.__init__"]], "__init__() (sympy.polys.numberfields.modules.powerbasis method)": [[205, "sympy.polys.numberfields.modules.PowerBasis.__init__"]], "__init__() (sympy.polys.numberfields.modules.submodule method)": [[205, "sympy.polys.numberfields.modules.Submodule.__init__"]], "__init__() (sympy.polys.numberfields.primes.primeideal method)": [[205, "sympy.polys.numberfields.primes.PrimeIdeal.__init__"]], "__init__() (sympy.polys.numberfields.utilities.algintpowers method)": [[205, "sympy.polys.numberfields.utilities.AlgIntPowers.__init__"]], "__mod__() (sympy.polys.numberfields.modules.moduleelement method)": [[205, "sympy.polys.numberfields.modules.ModuleElement.__mod__"]], "__mul__() (sympy.polys.numberfields.modules.moduleelement method)": [[205, "sympy.polys.numberfields.modules.ModuleElement.__mul__"]], "__mul__() (sympy.polys.numberfields.primes.primeideal method)": [[205, "sympy.polys.numberfields.primes.PrimeIdeal.__mul__"]], "add() (sympy.polys.numberfields.modules.submodule method)": [[205, "sympy.polys.numberfields.modules.Submodule.add"]], "ancestors() (sympy.polys.numberfields.modules.module method)": [[205, "sympy.polys.numberfields.modules.Module.ancestors"]], "as_expr() (sympy.polys.numberfields.modules.powerbasiselement method)": [[205, "sympy.polys.numberfields.modules.PowerBasisElement.as_expr"]], "as_submodule() (sympy.polys.numberfields.primes.primeideal method)": [[205, "sympy.polys.numberfields.primes.PrimeIdeal.as_submodule"]], "basis_element_pullbacks() (sympy.polys.numberfields.modules.submodule method)": [[205, "sympy.polys.numberfields.modules.Submodule.basis_element_pullbacks"]], "basis_elements() (sympy.polys.numberfields.modules.module method)": [[205, "sympy.polys.numberfields.modules.Module.basis_elements"]], "coeff_search() (in module sympy.polys.numberfields.utilities)": [[205, "sympy.polys.numberfields.utilities.coeff_search"]], "column() (sympy.polys.numberfields.modules.moduleelement method)": [[205, "sympy.polys.numberfields.modules.ModuleElement.column"]], "discard_before() (sympy.polys.numberfields.modules.submodule method)": [[205, "sympy.polys.numberfields.modules.Submodule.discard_before"]], "element_from_anp() (sympy.polys.numberfields.modules.powerbasis method)": [[205, "sympy.polys.numberfields.modules.PowerBasis.element_from_ANP"]], "element_from_alg_num() (sympy.polys.numberfields.modules.powerbasis method)": [[205, "sympy.polys.numberfields.modules.PowerBasis.element_from_alg_num"]], "element_from_poly() (sympy.polys.numberfields.modules.powerbasis method)": [[205, "sympy.polys.numberfields.modules.PowerBasis.element_from_poly"]], "element_from_rational() (sympy.polys.numberfields.modules.module method)": [[205, "sympy.polys.numberfields.modules.Module.element_from_rational"]], "endomorphism_ring() (sympy.polys.numberfields.modules.module method)": [[205, "sympy.polys.numberfields.modules.Module.endomorphism_ring"]], "equiv() (sympy.polys.numberfields.modules.moduleelement method)": [[205, "sympy.polys.numberfields.modules.ModuleElement.equiv"]], "extract_fundamental_discriminant() (in module sympy.polys.numberfields.utilities)": [[205, "sympy.polys.numberfields.utilities.extract_fundamental_discriminant"]], "field_isomorphism() (in module sympy.polys.numberfields.subfield)": [[205, "sympy.polys.numberfields.subfield.field_isomorphism"]], "find_min_poly() (in module sympy.polys.numberfields.modules)": [[205, "sympy.polys.numberfields.modules.find_min_poly"]], "from_int_list() (sympy.polys.numberfields.modules.moduleelement class method)": [[205, "sympy.polys.numberfields.modules.ModuleElement.from_int_list"]], "generator (sympy.polys.numberfields.modules.powerbasiselement property)": [[205, "sympy.polys.numberfields.modules.PowerBasisElement.generator"]], "get_num_denom() (in module sympy.polys.numberfields.utilities)": [[205, "sympy.polys.numberfields.utilities.get_num_denom"]], "inner_endomorphism() (sympy.polys.numberfields.modules.endomorphismring method)": [[205, "sympy.polys.numberfields.modules.EndomorphismRing.inner_endomorphism"]], "is_compat() (sympy.polys.numberfields.modules.moduleelement method)": [[205, "sympy.polys.numberfields.modules.ModuleElement.is_compat"]], "is_compat_col() (sympy.polys.numberfields.modules.module method)": [[205, "sympy.polys.numberfields.modules.Module.is_compat_col"]], "is_inert (sympy.polys.numberfields.primes.primeideal property)": [[205, "sympy.polys.numberfields.primes.PrimeIdeal.is_inert"]], "is_int() (in module sympy.polys.numberfields.utilities)": [[205, "sympy.polys.numberfields.utilities.is_int"]], "is_rat() (in module sympy.polys.numberfields.utilities)": [[205, "sympy.polys.numberfields.utilities.is_rat"]], "is_rational (sympy.polys.numberfields.modules.powerbasiselement property)": [[205, "sympy.polys.numberfields.modules.PowerBasisElement.is_rational"]], "isolate() (in module sympy.polys.numberfields.utilities)": [[205, "sympy.polys.numberfields.utilities.isolate"]], "kernel() (sympy.polys.numberfields.modules.modulehomomorphism method)": [[205, "sympy.polys.numberfields.modules.ModuleHomomorphism.kernel"]], "make_mod_elt() (in module sympy.polys.numberfields.modules)": [[205, "sympy.polys.numberfields.modules.make_mod_elt"]], "matrix() (sympy.polys.numberfields.modules.modulehomomorphism method)": [[205, "sympy.polys.numberfields.modules.ModuleHomomorphism.matrix"]], "minimal_polynomial() (in module sympy.polys.numberfields.minpoly)": [[205, "sympy.polys.numberfields.minpoly.minimal_polynomial"]], "minpoly() (in module sympy.polys.numberfields.minpoly)": [[205, "sympy.polys.numberfields.minpoly.minpoly"]], "mul() (sympy.polys.numberfields.modules.submodule method)": [[205, "sympy.polys.numberfields.modules.Submodule.mul"]], "mult_tab() (sympy.polys.numberfields.modules.module method)": [[205, "sympy.polys.numberfields.modules.Module.mult_tab"]], "n (sympy.polys.numberfields.modules.module property)": [[205, "sympy.polys.numberfields.modules.Module.n"]], "n (sympy.polys.numberfields.modules.moduleelement property)": [[205, "sympy.polys.numberfields.modules.ModuleElement.n"]], "nearest_common_ancestor() (sympy.polys.numberfields.modules.module method)": [[205, "sympy.polys.numberfields.modules.Module.nearest_common_ancestor"]], "norm() (sympy.polys.numberfields.modules.powerbasiselement method)": [[205, "sympy.polys.numberfields.modules.PowerBasisElement.norm"]], "number_field (sympy.polys.numberfields.modules.module property)": [[205, "sympy.polys.numberfields.modules.Module.number_field"]], "numerator() (sympy.polys.numberfields.modules.powerbasiselement method)": [[205, "sympy.polys.numberfields.modules.PowerBasisElement.numerator"]], "one() (sympy.polys.numberfields.modules.module method)": [[205, "sympy.polys.numberfields.modules.Module.one"]], "over_power_basis() (sympy.polys.numberfields.modules.moduleelement method)": [[205, "sympy.polys.numberfields.modules.ModuleElement.over_power_basis"]], "parent (sympy.polys.numberfields.modules.module property)": [[205, "sympy.polys.numberfields.modules.Module.parent"]], "poly() (sympy.polys.numberfields.modules.powerbasiselement method)": [[205, "sympy.polys.numberfields.modules.PowerBasisElement.poly"]], "power_basis_ancestor() (sympy.polys.numberfields.modules.module method)": [[205, "sympy.polys.numberfields.modules.Module.power_basis_ancestor"]], "prime_decomp() (in module sympy.polys.numberfields.primes)": [[205, "sympy.polys.numberfields.primes.prime_decomp"]], "prime_valuation() (in module sympy.polys.numberfields.primes)": [[205, "sympy.polys.numberfields.primes.prime_valuation"]], "primitive_element() (in module sympy.polys.numberfields.subfield)": [[205, "sympy.polys.numberfields.subfield.primitive_element"]], "reduce_anp() (sympy.polys.numberfields.primes.primeideal method)": [[205, "sympy.polys.numberfields.primes.PrimeIdeal.reduce_ANP"]], "reduce_alg_num() (sympy.polys.numberfields.primes.primeideal method)": [[205, "sympy.polys.numberfields.primes.PrimeIdeal.reduce_alg_num"]], "reduce_element() (sympy.polys.numberfields.modules.submodule method)": [[205, "sympy.polys.numberfields.modules.Submodule.reduce_element"]], "reduce_element() (sympy.polys.numberfields.primes.primeideal method)": [[205, "sympy.polys.numberfields.primes.PrimeIdeal.reduce_element"]], "reduced() (sympy.polys.numberfields.modules.moduleelement method)": [[205, "sympy.polys.numberfields.modules.ModuleElement.reduced"]], "reduced() (sympy.polys.numberfields.modules.submodule method)": [[205, "sympy.polys.numberfields.modules.Submodule.reduced"]], "reduced_mod_p() (sympy.polys.numberfields.modules.moduleelement method)": [[205, "sympy.polys.numberfields.modules.ModuleElement.reduced_mod_p"]], "repr() (sympy.polys.numberfields.primes.primeideal method)": [[205, "sympy.polys.numberfields.primes.PrimeIdeal.repr"]], "represent() (sympy.polys.numberfields.modules.endomorphismring method)": [[205, "sympy.polys.numberfields.modules.EndomorphismRing.represent"]], "represent() (sympy.polys.numberfields.modules.module method)": [[205, "sympy.polys.numberfields.modules.Module.represent"]], "represent() (sympy.polys.numberfields.modules.powerbasis method)": [[205, "sympy.polys.numberfields.modules.PowerBasis.represent"]], "represent() (sympy.polys.numberfields.modules.submodule method)": [[205, "sympy.polys.numberfields.modules.Submodule.represent"]], "round_two() (in module sympy.polys.numberfields.basis)": [[205, "sympy.polys.numberfields.basis.round_two"]], "starts_with_unity() (sympy.polys.numberfields.modules.module method)": [[205, "sympy.polys.numberfields.modules.Module.starts_with_unity"]], "submodule_from_gens() (sympy.polys.numberfields.modules.module method)": [[205, "sympy.polys.numberfields.modules.Module.submodule_from_gens"]], "submodule_from_matrix() (sympy.polys.numberfields.modules.module method)": [[205, "sympy.polys.numberfields.modules.Module.submodule_from_matrix"]], "supplement_a_subspace() (in module sympy.polys.numberfields.utilities)": [[205, "sympy.polys.numberfields.utilities.supplement_a_subspace"]], "sympy.polys.numberfields.modules": [[205, "module-sympy.polys.numberfields.modules"]], "sympy.polys.numberfields.subfield": [[205, "module-sympy.polys.numberfields.subfield"]], "test_factor() (sympy.polys.numberfields.primes.primeideal method)": [[205, "sympy.polys.numberfields.primes.PrimeIdeal.test_factor"]], "to_anp() (sympy.polys.numberfields.modules.powerbasiselement method)": [[205, "sympy.polys.numberfields.modules.PowerBasisElement.to_ANP"]], "to_alg_num() (sympy.polys.numberfields.modules.powerbasiselement method)": [[205, "sympy.polys.numberfields.modules.PowerBasisElement.to_alg_num"]], "to_ancestor() (sympy.polys.numberfields.modules.moduleelement method)": [[205, "sympy.polys.numberfields.modules.ModuleElement.to_ancestor"]], "to_number_field() (in module sympy.polys.numberfields.subfield)": [[205, "sympy.polys.numberfields.subfield.to_number_field"]], "to_parent() (sympy.polys.numberfields.modules.moduleelement method)": [[205, "sympy.polys.numberfields.modules.ModuleElement.to_parent"]], "unify() (sympy.polys.numberfields.modules.moduleelement method)": [[205, "sympy.polys.numberfields.modules.ModuleElement.unify"]], "valuation() (sympy.polys.numberfields.primes.primeideal method)": [[205, "sympy.polys.numberfields.primes.PrimeIdeal.valuation"]], "whole_submodule() (sympy.polys.numberfields.modules.module method)": [[205, "sympy.polys.numberfields.modules.Module.whole_submodule"]], "zero() (sympy.polys.numberfields.modules.module method)": [[205, "sympy.polys.numberfields.modules.Module.zero"]], "complexrootof (class in sympy.polys.rootoftools)": [[206, "sympy.polys.rootoftools.ComplexRootOf"]], "ec() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.EC"]], "em() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.EM"]], "et() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.ET"]], "gradedlexorder (class in sympy.polys.orderings)": [[206, "sympy.polys.orderings.GradedLexOrder"]], "groebnerbasis (class in sympy.polys.polytools)": [[206, "sympy.polys.polytools.GroebnerBasis"]], "lc() (in module sympy.polys.polytools)": [[206, "sympy.polys.polytools.LC"]], "lc() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.LC"]], "lm() (in module sympy.polys.polytools)": [[206, "sympy.polys.polytools.LM"]], "lm() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.LM"]], "lt() (in module sympy.polys.polytools)": [[206, "sympy.polys.polytools.LT"]], "lt() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.LT"]], "lexorder (class in sympy.polys.orderings)": [[206, "sympy.polys.orderings.LexOrder"]], "monomial (class in sympy.polys.monomials)": [[206, "sympy.polys.monomials.Monomial"]], "monomialorder (class in sympy.polys.orderings)": [[206, "sympy.polys.orderings.MonomialOrder"]], "poly (class in sympy.polys.polytools)": [[206, "sympy.polys.polytools.Poly"]], "purepoly (class in sympy.polys.polytools)": [[206, "sympy.polys.polytools.PurePoly"]], "reversedgradedlexorder (class in sympy.polys.orderings)": [[206, "sympy.polys.orderings.ReversedGradedLexOrder"]], "rootof (class in sympy.polys.rootoftools)": [[206, "sympy.polys.rootoftools.RootOf"]], "rootsum (class in sympy.polys.rootoftools)": [[206, "sympy.polys.rootoftools.RootSum"]], "tc() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.TC"]], "_all_roots() (sympy.polys.rootoftools.complexrootof class method)": [[206, "sympy.polys.rootoftools.ComplexRootOf._all_roots"]], "_complexes_index() (sympy.polys.rootoftools.complexrootof class method)": [[206, "sympy.polys.rootoftools.ComplexRootOf._complexes_index"]], "_complexes_sorted() (sympy.polys.rootoftools.complexrootof class method)": [[206, "sympy.polys.rootoftools.ComplexRootOf._complexes_sorted"]], "_count_roots() (sympy.polys.rootoftools.complexrootof class method)": [[206, "sympy.polys.rootoftools.ComplexRootOf._count_roots"]], "_ensure_complexes_init() (sympy.polys.rootoftools.complexrootof method)": [[206, "sympy.polys.rootoftools.ComplexRootOf._ensure_complexes_init"]], "_ensure_reals_init() (sympy.polys.rootoftools.complexrootof method)": [[206, "sympy.polys.rootoftools.ComplexRootOf._ensure_reals_init"]], "_eval_evalf() (sympy.polys.rootoftools.complexrootof method)": [[206, "sympy.polys.rootoftools.ComplexRootOf._eval_evalf"]], "_eval_is_imaginary() (sympy.polys.rootoftools.complexrootof method)": [[206, "sympy.polys.rootoftools.ComplexRootOf._eval_is_imaginary"]], "_eval_is_real() (sympy.polys.rootoftools.complexrootof method)": [[206, "sympy.polys.rootoftools.ComplexRootOf._eval_is_real"]], "_get_complexes() (sympy.polys.rootoftools.complexrootof class method)": [[206, "sympy.polys.rootoftools.ComplexRootOf._get_complexes"]], "_get_complexes_sqf() (sympy.polys.rootoftools.complexrootof class method)": [[206, "sympy.polys.rootoftools.ComplexRootOf._get_complexes_sqf"]], "_get_interval() (sympy.polys.rootoftools.complexrootof method)": [[206, "sympy.polys.rootoftools.ComplexRootOf._get_interval"]], "_get_reals() (sympy.polys.rootoftools.complexrootof class method)": [[206, "sympy.polys.rootoftools.ComplexRootOf._get_reals"]], "_get_reals_sqf() (sympy.polys.rootoftools.complexrootof class method)": [[206, "sympy.polys.rootoftools.ComplexRootOf._get_reals_sqf"]], "_get_roots() (sympy.polys.rootoftools.complexrootof class method)": [[206, "sympy.polys.rootoftools.ComplexRootOf._get_roots"]], "_indexed_root() (sympy.polys.rootoftools.complexrootof class method)": [[206, "sympy.polys.rootoftools.ComplexRootOf._indexed_root"]], "_new() (sympy.polys.rootoftools.complexrootof class method)": [[206, "sympy.polys.rootoftools.ComplexRootOf._new"]], "_postprocess_root() (sympy.polys.rootoftools.complexrootof class method)": [[206, "sympy.polys.rootoftools.ComplexRootOf._postprocess_root"]], "_preprocess_roots() (sympy.polys.rootoftools.complexrootof class method)": [[206, "sympy.polys.rootoftools.ComplexRootOf._preprocess_roots"]], "_real_roots() (sympy.polys.rootoftools.complexrootof class method)": [[206, "sympy.polys.rootoftools.ComplexRootOf._real_roots"]], "_reals_index() (sympy.polys.rootoftools.complexrootof class method)": [[206, "sympy.polys.rootoftools.ComplexRootOf._reals_index"]], "_reals_sorted() (sympy.polys.rootoftools.complexrootof class method)": [[206, "sympy.polys.rootoftools.ComplexRootOf._reals_sorted"]], "_refine_complexes() (sympy.polys.rootoftools.complexrootof class method)": [[206, "sympy.polys.rootoftools.ComplexRootOf._refine_complexes"]], "_reset() (sympy.polys.rootoftools.complexrootof method)": [[206, "sympy.polys.rootoftools.ComplexRootOf._reset"]], "_roots_trivial() (sympy.polys.rootoftools.complexrootof class method)": [[206, "sympy.polys.rootoftools.ComplexRootOf._roots_trivial"]], "_set_interval() (sympy.polys.rootoftools.complexrootof method)": [[206, "sympy.polys.rootoftools.ComplexRootOf._set_interval"]], "abs() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.abs"]], "add() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.add"]], "add_ground() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.add_ground"]], "all_coeffs() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.all_coeffs"]], "all_monoms() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.all_monoms"]], "all_roots() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.all_roots"]], "all_roots() (sympy.polys.rootoftools.complexrootof class method)": [[206, "sympy.polys.rootoftools.ComplexRootOf.all_roots"]], "all_terms() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.all_terms"]], "andre_poly() (in module sympy.polys.appellseqs)": [[206, "sympy.polys.appellseqs.andre_poly"]], "apart() (in module sympy.polys.partfrac)": [[206, "sympy.polys.partfrac.apart"]], "apart_list() (in module sympy.polys.partfrac)": [[206, "sympy.polys.partfrac.apart_list"]], "as_dict() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.as_dict"]], "as_expr() (sympy.polys.monomials.monomial method)": [[206, "sympy.polys.monomials.Monomial.as_expr"]], "as_expr() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.as_expr"]], "as_list() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.as_list"]], "as_poly() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.as_poly"]], "assemble_partfrac_list() (in module sympy.polys.partfrac)": [[206, "sympy.polys.partfrac.assemble_partfrac_list"]], "bernoulli_c_poly() (in module sympy.polys.appellseqs)": [[206, "sympy.polys.appellseqs.bernoulli_c_poly"]], "bernoulli_poly() (in module sympy.polys.appellseqs)": [[206, "sympy.polys.appellseqs.bernoulli_poly"]], "cancel() (in module sympy.polys.polytools)": [[206, "sympy.polys.polytools.cancel"]], "cancel() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.cancel"]], "chebyshevt_poly() (in module sympy.polys.orthopolys)": [[206, "sympy.polys.orthopolys.chebyshevt_poly"]], "chebyshevu_poly() (in module sympy.polys.orthopolys)": [[206, "sympy.polys.orthopolys.chebyshevu_poly"]], "clear_cache() (sympy.polys.rootoftools.complexrootof class method)": [[206, "sympy.polys.rootoftools.ComplexRootOf.clear_cache"]], "clear_denoms() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.clear_denoms"]], "coeff_monomial() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.coeff_monomial"]], "coeffs() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.coeffs"]], "cofactors() (in module sympy.polys.polytools)": [[206, "sympy.polys.polytools.cofactors"]], "cofactors() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.cofactors"]], "compose() (in module sympy.polys.polytools)": [[206, "sympy.polys.polytools.compose"]], "compose() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.compose"]], "construct_domain() (in module sympy.polys.constructor)": [[206, "sympy.polys.constructor.construct_domain"]], "contains() (sympy.polys.polytools.groebnerbasis method)": [[206, "sympy.polys.polytools.GroebnerBasis.contains"]], "content() (in module sympy.polys.polytools)": [[206, "sympy.polys.polytools.content"]], "content() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.content"]], "count_roots() (in module sympy.polys.polytools)": [[206, "sympy.polys.polytools.count_roots"]], "count_roots() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.count_roots"]], "cyclotomic_poly() (in module sympy.polys.specialpolys)": [[206, "sympy.polys.specialpolys.cyclotomic_poly"]], "decompose() (in module sympy.polys.polytools)": [[206, "sympy.polys.polytools.decompose"]], "decompose() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.decompose"]], "deflate() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.deflate"]], "degree() (in module sympy.polys.polytools)": [[206, "sympy.polys.polytools.degree"]], "degree() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.degree"]], "degree_list() (in module sympy.polys.polytools)": [[206, "sympy.polys.polytools.degree_list"]], "degree_list() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.degree_list"]], "diff() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.diff"]], "discriminant() (in module sympy.polys.polytools)": [[206, "sympy.polys.polytools.discriminant"]], "discriminant() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.discriminant"]], "dispersion() (in module sympy.polys.dispersion)": [[206, "sympy.polys.dispersion.dispersion"]], "dispersion() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.dispersion"]], "dispersionset() (in module sympy.polys.dispersion)": [[206, "sympy.polys.dispersion.dispersionset"]], "dispersionset() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.dispersionset"]], "div() (in module sympy.polys.polytools)": [[206, "sympy.polys.polytools.div"]], "div() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.div"]], "domain (sympy.polys.polytools.poly property)": [[206, "sympy.polys.polytools.Poly.domain"]], "eject() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.eject"]], "euler_poly() (in module sympy.polys.appellseqs)": [[206, "sympy.polys.appellseqs.euler_poly"]], "eval() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.eval"]], "eval_approx() (sympy.polys.rootoftools.complexrootof method)": [[206, "sympy.polys.rootoftools.ComplexRootOf.eval_approx"]], "eval_rational() (sympy.polys.rootoftools.complexrootof method)": [[206, "sympy.polys.rootoftools.ComplexRootOf.eval_rational"]], "exclude() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.exclude"]], "exquo() (in module sympy.polys.polytools)": [[206, "sympy.polys.polytools.exquo"]], "exquo() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.exquo"]], "exquo_ground() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.exquo_ground"]], "factor() (in module sympy.polys.polytools)": [[206, "sympy.polys.polytools.factor"]], "factor_list() (in module sympy.polys.polytools)": [[206, "sympy.polys.polytools.factor_list"]], "factor_list() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.factor_list"]], "factor_list_include() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.factor_list_include"]], "fglm() (sympy.polys.polytools.groebnerbasis method)": [[206, "sympy.polys.polytools.GroebnerBasis.fglm"]], "free_symbols (sympy.polys.polytools.poly property)": [[206, "sympy.polys.polytools.Poly.free_symbols"]], "free_symbols (sympy.polys.polytools.purepoly property)": [[206, "sympy.polys.polytools.PurePoly.free_symbols"]], "free_symbols_in_domain (sympy.polys.polytools.poly property)": [[206, "sympy.polys.polytools.Poly.free_symbols_in_domain"]], "from_dict() (sympy.polys.polytools.poly class method)": [[206, "sympy.polys.polytools.Poly.from_dict"]], "from_expr() (sympy.polys.polytools.poly class method)": [[206, "sympy.polys.polytools.Poly.from_expr"]], "from_list() (sympy.polys.polytools.poly class method)": [[206, "sympy.polys.polytools.Poly.from_list"]], "from_poly() (sympy.polys.polytools.poly class method)": [[206, "sympy.polys.polytools.Poly.from_poly"]], "gcd() (in module sympy.polys.polytools)": [[206, "sympy.polys.polytools.gcd"]], "gcd() (sympy.polys.monomials.monomial method)": [[206, "sympy.polys.monomials.Monomial.gcd"]], "gcd() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.gcd"]], "gcd_list() (in module sympy.polys.polytools)": [[206, "sympy.polys.polytools.gcd_list"]], "gcdex() (in module sympy.polys.polytools)": [[206, "sympy.polys.polytools.gcdex"]], "gcdex() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.gcdex"]], "gegenbauer_poly() (in module sympy.polys.orthopolys)": [[206, "sympy.polys.orthopolys.gegenbauer_poly"]], "gen (sympy.polys.polytools.poly property)": [[206, "sympy.polys.polytools.Poly.gen"]], "genocchi_poly() (in module sympy.polys.appellseqs)": [[206, "sympy.polys.appellseqs.genocchi_poly"]], "get_domain() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.get_domain"]], "get_modulus() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.get_modulus"]], "gff() (in module sympy.polys.polytools)": [[206, "sympy.polys.polytools.gff"]], "gff_list() (in module sympy.polys.polytools)": [[206, "sympy.polys.polytools.gff_list"]], "gff_list() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.gff_list"]], "groebner() (in module sympy.polys.polytools)": [[206, "sympy.polys.polytools.groebner"]], "ground_roots() (in module sympy.polys.polytools)": [[206, "sympy.polys.polytools.ground_roots"]], "ground_roots() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.ground_roots"]], "half_gcdex() (in module sympy.polys.polytools)": [[206, "sympy.polys.polytools.half_gcdex"]], "half_gcdex() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.half_gcdex"]], "has_only_gens() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.has_only_gens"]], "hermite_poly() (in module sympy.polys.orthopolys)": [[206, "sympy.polys.orthopolys.hermite_poly"]], "hermite_prob_poly() (in module sympy.polys.orthopolys)": [[206, "sympy.polys.orthopolys.hermite_prob_poly"]], "homogeneous_order() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.homogeneous_order"]], "homogenize() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.homogenize"]], "horner() (in module sympy.polys.polyfuncs)": [[206, "sympy.polys.polyfuncs.horner"]], "inject() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.inject"]], "integrate() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.integrate"]], "interpolate() (in module sympy.polys.polyfuncs)": [[206, "sympy.polys.polyfuncs.interpolate"]], "interpolating_poly() (in module sympy.polys.specialpolys)": [[206, "sympy.polys.specialpolys.interpolating_poly"]], "intervals() (in module sympy.polys.polytools)": [[206, "sympy.polys.polytools.intervals"]], "intervals() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.intervals"]], "invert() (in module sympy.polys.polytools)": [[206, "sympy.polys.polytools.invert"]], "invert() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.invert"]], "is_cyclotomic (sympy.polys.polytools.poly property)": [[206, "sympy.polys.polytools.Poly.is_cyclotomic"]], "is_ground (sympy.polys.polytools.poly property)": [[206, "sympy.polys.polytools.Poly.is_ground"]], "is_homogeneous (sympy.polys.polytools.poly property)": [[206, "sympy.polys.polytools.Poly.is_homogeneous"]], "is_irreducible (sympy.polys.polytools.poly property)": [[206, "sympy.polys.polytools.Poly.is_irreducible"]], "is_linear (sympy.polys.polytools.poly property)": [[206, "sympy.polys.polytools.Poly.is_linear"]], "is_monic (sympy.polys.polytools.poly property)": [[206, "sympy.polys.polytools.Poly.is_monic"]], "is_monomial (sympy.polys.polytools.poly property)": [[206, "sympy.polys.polytools.Poly.is_monomial"]], "is_multivariate (sympy.polys.polytools.poly property)": [[206, "sympy.polys.polytools.Poly.is_multivariate"]], "is_one (sympy.polys.polytools.poly property)": [[206, "sympy.polys.polytools.Poly.is_one"]], "is_primitive (sympy.polys.polytools.poly property)": [[206, "sympy.polys.polytools.Poly.is_primitive"]], "is_quadratic (sympy.polys.polytools.poly property)": [[206, "sympy.polys.polytools.Poly.is_quadratic"]], "is_sqf (sympy.polys.polytools.poly property)": [[206, "sympy.polys.polytools.Poly.is_sqf"]], "is_univariate (sympy.polys.polytools.poly property)": [[206, "sympy.polys.polytools.Poly.is_univariate"]], "is_zero (sympy.polys.polytools.poly property)": [[206, "sympy.polys.polytools.Poly.is_zero"]], "is_zero_dimensional (sympy.polys.polytools.groebnerbasis property)": [[206, "sympy.polys.polytools.GroebnerBasis.is_zero_dimensional"]], "is_zero_dimensional() (in module sympy.polys.polytools)": [[206, "sympy.polys.polytools.is_zero_dimensional"]], "itermonomials() (in module sympy.polys.monomials)": [[206, "sympy.polys.monomials.itermonomials"]], "jacobi_poly() (in module sympy.polys.orthopolys)": [[206, "sympy.polys.orthopolys.jacobi_poly"]], "l1_norm() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.l1_norm"]], "laguerre_poly() (in module sympy.polys.orthopolys)": [[206, "sympy.polys.orthopolys.laguerre_poly"]], "lcm() (in module sympy.polys.polytools)": [[206, "sympy.polys.polytools.lcm"]], "lcm() (sympy.polys.monomials.monomial method)": [[206, "sympy.polys.monomials.Monomial.lcm"]], "lcm() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.lcm"]], "lcm_list() (in module sympy.polys.polytools)": [[206, "sympy.polys.polytools.lcm_list"]], "legendre_poly() (in module sympy.polys.orthopolys)": [[206, "sympy.polys.orthopolys.legendre_poly"]], "length() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.length"]], "lift() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.lift"]], "ltrim() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.ltrim"]], "match() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.match"]], "max_norm() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.max_norm"]], "monic() (in module sympy.polys.polytools)": [[206, "sympy.polys.polytools.monic"]], "monic() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.monic"]], "monomial_count() (in module sympy.polys.monomials)": [[206, "sympy.polys.monomials.monomial_count"]], "monoms() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.monoms"]], "mul() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.mul"]], "mul_ground() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.mul_ground"]], "neg() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.neg"]], "new() (sympy.polys.polytools.poly class method)": [[206, "sympy.polys.polytools.Poly.new"]], "new() (sympy.polys.rootoftools.rootsum class method)": [[206, "sympy.polys.rootoftools.RootSum.new"]], "norm() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.norm"]], "nroots() (in module sympy.polys.polytools)": [[206, "sympy.polys.polytools.nroots"]], "nroots() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.nroots"]], "nth() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.nth"]], "nth_power_roots_poly() (in module sympy.polys.polytools)": [[206, "sympy.polys.polytools.nth_power_roots_poly"]], "nth_power_roots_poly() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.nth_power_roots_poly"]], "one (sympy.polys.polytools.poly property)": [[206, "sympy.polys.polytools.Poly.one"]], "parallel_poly_from_expr() (in module sympy.polys.polytools)": [[206, "sympy.polys.polytools.parallel_poly_from_expr"]], "pdiv() (in module sympy.polys.polytools)": [[206, "sympy.polys.polytools.pdiv"]], "pdiv() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.pdiv"]], "per() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.per"]], "pexquo() (in module sympy.polys.polytools)": [[206, "sympy.polys.polytools.pexquo"]], "pexquo() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.pexquo"]], "poly() (in module sympy.polys.polytools)": [[206, "sympy.polys.polytools.poly"]], "poly_from_expr() (in module sympy.polys.polytools)": [[206, "sympy.polys.polytools.poly_from_expr"]], "pow() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.pow"]], "pquo() (in module sympy.polys.polytools)": [[206, "sympy.polys.polytools.pquo"]], "pquo() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.pquo"]], "prem() (in module sympy.polys.polytools)": [[206, "sympy.polys.polytools.prem"]], "prem() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.prem"]], "primitive() (in module sympy.polys.polytools)": [[206, "sympy.polys.polytools.primitive"]], "primitive() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.primitive"]], "quo() (in module sympy.polys.polytools)": [[206, "sympy.polys.polytools.quo"]], "quo() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.quo"]], "quo_ground() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.quo_ground"]], "random_poly() (in module sympy.polys.specialpolys)": [[206, "sympy.polys.specialpolys.random_poly"]], "rat_clear_denoms() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.rat_clear_denoms"]], "real_roots() (in module sympy.polys.polytools)": [[206, "sympy.polys.polytools.real_roots"]], "real_roots() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.real_roots"]], "real_roots() (sympy.polys.rootoftools.complexrootof class method)": [[206, "sympy.polys.rootoftools.ComplexRootOf.real_roots"]], "reduce() (sympy.polys.polytools.groebnerbasis method)": [[206, "sympy.polys.polytools.GroebnerBasis.reduce"]], "reduced() (in module sympy.polys.polytools)": [[206, "sympy.polys.polytools.reduced"]], "refine_root() (in module sympy.polys.polytools)": [[206, "sympy.polys.polytools.refine_root"]], "refine_root() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.refine_root"]], "rem() (in module sympy.polys.polytools)": [[206, "sympy.polys.polytools.rem"]], "rem() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.rem"]], "reorder() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.reorder"]], "replace() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.replace"]], "resultant() (in module sympy.polys.polytools)": [[206, "sympy.polys.polytools.resultant"]], "resultant() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.resultant"]], "retract() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.retract"]], "revert() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.revert"]], "root() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.root"]], "rootof() (in module sympy.polys.rootoftools)": [[206, "sympy.polys.rootoftools.rootof"]], "roots() (in module sympy.polys.polyroots)": [[206, "sympy.polys.polyroots.roots"]], "same_root() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.same_root"]], "set_domain() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.set_domain"]], "set_modulus() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.set_modulus"]], "shift() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.shift"]], "slice() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.slice"]], "spherical_bessel_fn() (in module sympy.polys.orthopolys)": [[206, "sympy.polys.orthopolys.spherical_bessel_fn"]], "sqf() (in module sympy.polys.polytools)": [[206, "sympy.polys.polytools.sqf"]], "sqf_list() (in module sympy.polys.polytools)": [[206, "sympy.polys.polytools.sqf_list"]], "sqf_list() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.sqf_list"]], "sqf_list_include() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.sqf_list_include"]], "sqf_norm() (in module sympy.polys.polytools)": [[206, "sympy.polys.polytools.sqf_norm"]], "sqf_norm() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.sqf_norm"]], "sqf_part() (in module sympy.polys.polytools)": [[206, "sympy.polys.polytools.sqf_part"]], "sqf_part() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.sqf_part"]], "sqr() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.sqr"]], "sturm() (in module sympy.polys.polytools)": [[206, "sympy.polys.polytools.sturm"]], "sturm() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.sturm"]], "sub() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.sub"]], "sub_ground() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.sub_ground"]], "subresultants() (in module sympy.polys.polytools)": [[206, "sympy.polys.polytools.subresultants"]], "subresultants() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.subresultants"]], "swinnerton_dyer_poly() (in module sympy.polys.specialpolys)": [[206, "sympy.polys.specialpolys.swinnerton_dyer_poly"]], "symmetric_poly() (in module sympy.polys.specialpolys)": [[206, "sympy.polys.specialpolys.symmetric_poly"]], "symmetrize() (in module sympy.polys.polyfuncs)": [[206, "sympy.polys.polyfuncs.symmetrize"]], "sympy.polys": [[206, "module-sympy.polys"]], "terms() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.terms"]], "terms_gcd() (in module sympy.polys.polytools)": [[206, "sympy.polys.polytools.terms_gcd"]], "terms_gcd() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.terms_gcd"]], "termwise() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.termwise"]], "to_exact() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.to_exact"]], "to_field() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.to_field"]], "to_ring() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.to_ring"]], "together() (in module sympy.polys.rationaltools)": [[206, "sympy.polys.rationaltools.together"]], "total_degree() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.total_degree"]], "transform() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.transform"]], "trunc() (in module sympy.polys.polytools)": [[206, "sympy.polys.polytools.trunc"]], "trunc() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.trunc"]], "unify() (sympy.polys.polytools.poly method)": [[206, "sympy.polys.polytools.Poly.unify"]], "unit (sympy.polys.polytools.poly property)": [[206, "sympy.polys.polytools.Poly.unit"]], "viete() (in module sympy.polys.polyfuncs)": [[206, "sympy.polys.polyfuncs.viete"]], "zero (sympy.polys.polytools.poly property)": [[206, "sympy.polys.polytools.Poly.zero"]], "_tan1() (in module sympy.polys.ring_series)": [[207, "sympy.polys.ring_series._tan1"]], "mul_xin() (in module sympy.polys.ring_series)": [[207, "sympy.polys.ring_series.mul_xin"]], "pow_xin() (in module sympy.polys.ring_series)": [[207, "sympy.polys.ring_series.pow_xin"]], "rs_lambertw() (in module sympy.polys.ring_series)": [[207, "sympy.polys.ring_series.rs_LambertW"]], "rs_asin() (in module sympy.polys.ring_series)": [[207, "sympy.polys.ring_series.rs_asin"]], "rs_atan() (in module sympy.polys.ring_series)": [[207, "sympy.polys.ring_series.rs_atan"]], "rs_atanh() (in module sympy.polys.ring_series)": [[207, "sympy.polys.ring_series.rs_atanh"]], "rs_compose_add() (in module sympy.polys.ring_series)": [[207, "sympy.polys.ring_series.rs_compose_add"]], "rs_cos() (in module sympy.polys.ring_series)": [[207, "sympy.polys.ring_series.rs_cos"]], "rs_cos_sin() (in module sympy.polys.ring_series)": [[207, "sympy.polys.ring_series.rs_cos_sin"]], "rs_cosh() (in module sympy.polys.ring_series)": [[207, "sympy.polys.ring_series.rs_cosh"]], "rs_cot() (in module sympy.polys.ring_series)": [[207, "sympy.polys.ring_series.rs_cot"]], "rs_diff() (in module sympy.polys.ring_series)": [[207, "sympy.polys.ring_series.rs_diff"]], "rs_exp() (in module sympy.polys.ring_series)": [[207, "sympy.polys.ring_series.rs_exp"]], "rs_fun() (in module sympy.polys.ring_series)": [[207, "sympy.polys.ring_series.rs_fun"]], "rs_hadamard_exp() (in module sympy.polys.ring_series)": [[207, "sympy.polys.ring_series.rs_hadamard_exp"]], "rs_integrate() (in module sympy.polys.ring_series)": [[207, "sympy.polys.ring_series.rs_integrate"]], "rs_is_puiseux() (in module sympy.polys.ring_series)": [[207, "sympy.polys.ring_series.rs_is_puiseux"]], "rs_log() (in module sympy.polys.ring_series)": [[207, "sympy.polys.ring_series.rs_log"]], "rs_mul() (in module sympy.polys.ring_series)": [[207, "sympy.polys.ring_series.rs_mul"]], "rs_newton() (in module sympy.polys.ring_series)": [[207, "sympy.polys.ring_series.rs_newton"]], "rs_nth_root() (in module sympy.polys.ring_series)": [[207, "sympy.polys.ring_series.rs_nth_root"]], "rs_pow() (in module sympy.polys.ring_series)": [[207, "sympy.polys.ring_series.rs_pow"]], "rs_puiseux() (in module sympy.polys.ring_series)": [[207, "sympy.polys.ring_series.rs_puiseux"]], "rs_puiseux2() (in module sympy.polys.ring_series)": [[207, "sympy.polys.ring_series.rs_puiseux2"]], "rs_series_from_list() (in module sympy.polys.ring_series)": [[207, "sympy.polys.ring_series.rs_series_from_list"]], "rs_series_inversion() (in module sympy.polys.ring_series)": [[207, "sympy.polys.ring_series.rs_series_inversion"]], "rs_series_reversion() (in module sympy.polys.ring_series)": [[207, "sympy.polys.ring_series.rs_series_reversion"]], "rs_sin() (in module sympy.polys.ring_series)": [[207, "sympy.polys.ring_series.rs_sin"]], "rs_sinh() (in module sympy.polys.ring_series)": [[207, "sympy.polys.ring_series.rs_sinh"]], "rs_square() (in module sympy.polys.ring_series)": [[207, "sympy.polys.ring_series.rs_square"]], "rs_subs() (in module sympy.polys.ring_series)": [[207, "sympy.polys.ring_series.rs_subs"]], "rs_tan() (in module sympy.polys.ring_series)": [[207, "sympy.polys.ring_series.rs_tan"]], "rs_tanh() (in module sympy.polys.ring_series)": [[207, "sympy.polys.ring_series.rs_tanh"]], "rs_trunc() (in module sympy.polys.ring_series)": [[207, "sympy.polys.ring_series.rs_trunc"]], "_solve_lin_sys() (in module sympy.polys.solvers)": [[208, "sympy.polys.solvers._solve_lin_sys"]], "_solve_lin_sys_component() (in module sympy.polys.solvers)": [[208, "sympy.polys.solvers._solve_lin_sys_component"]], "eqs_to_matrix() (in module sympy.polys.solvers)": [[208, "sympy.polys.solvers.eqs_to_matrix"]], "solve_lin_sys() (in module sympy.polys.solvers)": [[208, "sympy.polys.solvers.solve_lin_sys"]], "sympy.polys.solvers": [[208, "module-sympy.polys.solvers"]], "sympy_eqs_to_ring() (in module sympy.polys.solvers)": [[208, "sympy.polys.solvers.sympy_eqs_to_ring"]], "aesaraprinter (class in sympy.printing.aesaracode)": [[210, "sympy.printing.aesaracode.AesaraPrinter"]], "assignmenterror": [[210, "sympy.printing.codeprinter.AssignmentError"]], "c89codeprinter (class in sympy.printing.c)": [[210, "sympy.printing.c.C89CodePrinter"]], "c99codeprinter (class in sympy.printing.c)": [[210, "sympy.printing.c.C99CodePrinter"]], "cxx11codeprinter (class in sympy.printing.cxx)": [[210, "sympy.printing.cxx.CXX11CodePrinter"]], "cxx98codeprinter (class in sympy.printing.cxx)": [[210, "sympy.printing.cxx.CXX98CodePrinter"]], "codeprinter (class in sympy.printing.codeprinter)": [[210, "sympy.printing.codeprinter.CodePrinter"]], "fcodeprinter (class in sympy.printing.fortran)": [[210, "sympy.printing.fortran.FCodePrinter"]], "g() (in module sympy.printing.pretty.pretty_symbology)": [[210, "sympy.printing.pretty.pretty_symbology.G"], [210, "sympy.printing.pretty.pretty_symbology.g"]], "javascriptcodeprinter (class in sympy.printing.jscode)": [[210, "sympy.printing.jscode.JavascriptCodePrinter"]], "juliacodeprinter (class in sympy.printing.julia)": [[210, "sympy.printing.julia.JuliaCodePrinter"]], "lambdaprinter (class in sympy.printing.lambdarepr)": [[210, "sympy.printing.lambdarepr.LambdaPrinter"]], "latexprinter (class in sympy.printing.latex)": [[210, "sympy.printing.latex.LatexPrinter"]], "mcodeprinter (class in sympy.printing.mathematica)": [[210, "sympy.printing.mathematica.MCodePrinter"]], "maplecodeprinter (class in sympy.printing.maple)": [[210, "sympy.printing.maple.MapleCodePrinter"]], "mathmlcontentprinter (class in sympy.printing.mathml)": [[210, "sympy.printing.mathml.MathMLContentPrinter"]], "mathmlpresentationprinter (class in sympy.printing.mathml)": [[210, "sympy.printing.mathml.MathMLPresentationPrinter"]], "mathmlprinterbase (class in sympy.printing.mathml)": [[210, "sympy.printing.mathml.MathMLPrinterBase"]], "mpmathprinter (class in sympy.printing.pycode)": [[210, "sympy.printing.pycode.MpmathPrinter"]], "octavecodeprinter (class in sympy.printing.octave)": [[210, "sympy.printing.octave.OctaveCodePrinter"]], "precedence (in module sympy.printing.precedence)": [[210, "sympy.printing.precedence.PRECEDENCE"]], "precedence_functions (in module sympy.printing.precedence)": [[210, "sympy.printing.precedence.PRECEDENCE_FUNCTIONS"]], "precedence_values (in module sympy.printing.precedence)": [[210, "sympy.printing.precedence.PRECEDENCE_VALUES"]], "prettyprinter (class in sympy.printing.pretty.pretty)": [[210, "sympy.printing.pretty.pretty.PrettyPrinter"]], "printer (class in sympy.printing.printer)": [[210, "sympy.printing.printer.Printer"]], "rcodeprinter (class in sympy.printing.rcode)": [[210, "sympy.printing.rcode.RCodePrinter"]], "reprprinter (class in sympy.printing.repr)": [[210, "sympy.printing.repr.ReprPrinter"]], "rustcodeprinter (class in sympy.printing.rust)": [[210, "sympy.printing.rust.RustCodePrinter"]], "smtlibprinter (class in sympy.printing.smtlib)": [[210, "sympy.printing.smtlib.SMTLibPrinter"]], "strprinter (class in sympy.printing.str)": [[210, "sympy.printing.str.StrPrinter"]], "u() (in module sympy.printing.pretty.pretty_symbology)": [[210, "sympy.printing.pretty.pretty_symbology.U"]], "vf() (in module sympy.printing.pretty.pretty_symbology)": [[210, "sympy.printing.pretty.pretty_symbology.VF"]], "_default_settings (sympy.printing.smtlib.smtlibprinter attribute)": [[210, "sympy.printing.smtlib.SMTLibPrinter._default_settings"]], "_print() (sympy.printing.printer.printer method)": [[210, "sympy.printing.printer.Printer._print"]], "above() (sympy.printing.pretty.stringpict.stringpict method)": [[210, "sympy.printing.pretty.stringpict.stringPict.above"]], "accepted_latex_functions (in module sympy.printing.latex)": [[210, "sympy.printing.latex.accepted_latex_functions"]], "aesara_code() (in module sympy.printing.aesaracode)": [[210, "sympy.printing.aesaracode.aesara_code"]], "aesara_function() (in module sympy.printing.aesaracode)": [[210, "sympy.printing.aesaracode.aesara_function"]], "annotated() (in module sympy.printing.pretty.pretty_symbology)": [[210, "sympy.printing.pretty.pretty_symbology.annotated"]], "apply() (sympy.printing.pretty.stringpict.prettyform static method)": [[210, "sympy.printing.pretty.stringpict.prettyForm.apply"]], "atoms_table (in module sympy.printing.pretty.pretty_symbology)": [[210, "sympy.printing.pretty.pretty_symbology.atoms_table"]], "below() (sympy.printing.pretty.stringpict.stringpict method)": [[210, "sympy.printing.pretty.stringpict.stringPict.below"]], "ccode() (in module sympy.printing.c)": [[210, "sympy.printing.c.ccode"]], "cxxcode() (in module sympy.printing.codeprinter)": [[210, "sympy.printing.codeprinter.cxxcode"]], "digit_2txt (in module sympy.printing.pretty.pretty_symbology)": [[210, "sympy.printing.pretty.pretty_symbology.digit_2txt"]], "dim_handling() (in module sympy.printing.aesaracode)": [[210, "sympy.printing.aesaracode.dim_handling"]], "doprint() (sympy.printing.aesaracode.aesaraprinter method)": [[210, "sympy.printing.aesaracode.AesaraPrinter.doprint"]], "doprint() (sympy.printing.codeprinter.codeprinter method)": [[210, "sympy.printing.codeprinter.CodePrinter.doprint"]], "doprint() (sympy.printing.mathml.mathmlprinterbase method)": [[210, "sympy.printing.mathml.MathMLPrinterBase.doprint"]], "doprint() (sympy.printing.printer.printer method)": [[210, "sympy.printing.printer.Printer.doprint"]], "dotprint() (in module sympy.printing.dot)": [[210, "sympy.printing.dot.dotprint"]], "emptyprinter() (sympy.printing.repr.reprprinter method)": [[210, "sympy.printing.repr.ReprPrinter.emptyPrinter"]], "fcode() (in module sympy.printing.fortran)": [[210, "sympy.printing.fortran.fcode"]], "frac (in module sympy.printing.pretty.pretty_symbology)": [[210, "sympy.printing.pretty.pretty_symbology.frac"]], "greek_letters (in module sympy.printing.pretty.pretty_symbology)": [[210, "sympy.printing.pretty.pretty_symbology.greek_letters"]], "height() (sympy.printing.pretty.stringpict.stringpict method)": [[210, "sympy.printing.pretty.stringpict.stringPict.height"]], "hobj() (in module sympy.printing.pretty.pretty_symbology)": [[210, "sympy.printing.pretty.pretty_symbology.hobj"]], "indent_code() (sympy.printing.c.c89codeprinter method)": [[210, "sympy.printing.c.C89CodePrinter.indent_code"]], "indent_code() (sympy.printing.fortran.fcodeprinter method)": [[210, "sympy.printing.fortran.FCodePrinter.indent_code"]], "indent_code() (sympy.printing.jscode.javascriptcodeprinter method)": [[210, "sympy.printing.jscode.JavascriptCodePrinter.indent_code"]], "indent_code() (sympy.printing.julia.juliacodeprinter method)": [[210, "sympy.printing.julia.JuliaCodePrinter.indent_code"]], "indent_code() (sympy.printing.octave.octavecodeprinter method)": [[210, "sympy.printing.octave.OctaveCodePrinter.indent_code"]], "indent_code() (sympy.printing.rcode.rcodeprinter method)": [[210, "sympy.printing.rcode.RCodePrinter.indent_code"]], "indent_code() (sympy.printing.rust.rustcodeprinter method)": [[210, "sympy.printing.rust.RustCodePrinter.indent_code"]], "jscode() (in module sympy.printing.jscode)": [[210, "sympy.printing.jscode.jscode"]], "julia_code() (in module sympy.printing.julia)": [[210, "sympy.printing.julia.julia_code"]], "known_fcns_src1 (in module sympy.printing.julia)": [[210, "sympy.printing.julia.known_fcns_src1"]], "known_fcns_src1 (in module sympy.printing.octave)": [[210, "sympy.printing.octave.known_fcns_src1"]], "known_fcns_src2 (in module sympy.printing.julia)": [[210, "sympy.printing.julia.known_fcns_src2"]], "known_fcns_src2 (in module sympy.printing.octave)": [[210, "sympy.printing.octave.known_fcns_src2"]], "known_functions (in module sympy.printing.jscode)": [[210, "sympy.printing.jscode.known_functions"]], "known_functions (in module sympy.printing.mathematica)": [[210, "sympy.printing.mathematica.known_functions"]], "known_functions (in module sympy.printing.rcode)": [[210, "sympy.printing.rcode.known_functions"]], "known_functions (in module sympy.printing.rust)": [[210, "sympy.printing.rust.known_functions"]], "known_functions_c89 (in module sympy.printing.c)": [[210, "sympy.printing.c.known_functions_C89"]], "known_functions_c99 (in module sympy.printing.c)": [[210, "sympy.printing.c.known_functions_C99"]], "lambdarepr() (in module sympy.printing.lambdarepr)": [[210, "sympy.printing.lambdarepr.lambdarepr"]], "latex() (in module sympy.printing.latex)": [[210, "sympy.printing.latex.latex"]], "left() (sympy.printing.pretty.stringpict.stringpict method)": [[210, "sympy.printing.pretty.stringpict.stringPict.left"]], "leftslash() (sympy.printing.pretty.stringpict.stringpict method)": [[210, "sympy.printing.pretty.stringpict.stringPict.leftslash"]], "maple_code() (in module sympy.printing.maple)": [[210, "sympy.printing.maple.maple_code"]], "mathematica_code() (in module sympy.printing.mathematica)": [[210, "sympy.printing.mathematica.mathematica_code"]], "mathml() (in module sympy.printing.mathml)": [[210, "sympy.printing.mathml.mathml"]], "mathml_tag() (sympy.printing.mathml.mathmlcontentprinter method)": [[210, "sympy.printing.mathml.MathMLContentPrinter.mathml_tag"]], "mathml_tag() (sympy.printing.mathml.mathmlpresentationprinter method)": [[210, "sympy.printing.mathml.MathMLPresentationPrinter.mathml_tag"]], "next() (sympy.printing.pretty.stringpict.stringpict static method)": [[210, "sympy.printing.pretty.stringpict.stringPict.next"]], "octave_code() (in module sympy.printing.octave)": [[210, "sympy.printing.octave.octave_code"]], "parens() (sympy.printing.pretty.stringpict.stringpict method)": [[210, "sympy.printing.pretty.stringpict.stringPict.parens"]], "parenthesize_super() (sympy.printing.latex.latexprinter method)": [[210, "sympy.printing.latex.LatexPrinter.parenthesize_super"]], "pprint_nodes() (in module sympy.printing.tree)": [[210, "sympy.printing.tree.pprint_nodes"]], "precedence() (in module sympy.printing.precedence)": [[210, "sympy.printing.precedence.precedence"]], "pretty() (in module sympy.printing.pretty.pretty)": [[210, "sympy.printing.pretty.pretty.pretty"]], "prettyform (class in sympy.printing.pretty.stringpict)": [[210, "sympy.printing.pretty.stringpict.prettyForm"]], "pretty_atom() (in module sympy.printing.pretty.pretty_symbology)": [[210, "sympy.printing.pretty.pretty_symbology.pretty_atom"]], "pretty_print() (in module sympy.printing.pretty.pretty)": [[210, "sympy.printing.pretty.pretty.pretty_print"]], "pretty_symbol() (in module sympy.printing.pretty.pretty_symbology)": [[210, "sympy.printing.pretty.pretty_symbology.pretty_symbol"]], "pretty_try_use_unicode() (in module sympy.printing.pretty.pretty_symbology)": [[210, "sympy.printing.pretty.pretty_symbology.pretty_try_use_unicode"]], "pretty_use_unicode() (in module sympy.printing.pretty.pretty_symbology)": [[210, "sympy.printing.pretty.pretty_symbology.pretty_use_unicode"]], "preview() (in module sympy.printing.preview)": [[210, "sympy.printing.preview.preview"]], "print_ccode() (in module sympy.printing.c)": [[210, "sympy.printing.c.print_ccode"]], "print_fcode() (in module sympy.printing.fortran)": [[210, "sympy.printing.fortran.print_fcode"]], "print_gtk() (in module sympy.printing.gtk)": [[210, "sympy.printing.gtk.print_gtk"]], "print_latex() (in module sympy.printing.latex)": [[210, "sympy.printing.latex.print_latex"]], "print_maple_code() (in module sympy.printing.maple)": [[210, "sympy.printing.maple.print_maple_code"]], "print_mathml() (in module sympy.printing.mathml)": [[210, "sympy.printing.mathml.print_mathml"]], "print_node() (in module sympy.printing.tree)": [[210, "sympy.printing.tree.print_node"]], "print_rcode() (in module sympy.printing.rcode)": [[210, "sympy.printing.rcode.print_rcode"]], "print_tree() (in module sympy.printing.tree)": [[210, "sympy.printing.tree.print_tree"]], "printmethod (sympy.printing.aesaracode.aesaraprinter attribute)": [[210, "sympy.printing.aesaracode.AesaraPrinter.printmethod"]], "printmethod (sympy.printing.c.c89codeprinter attribute)": [[210, "sympy.printing.c.C89CodePrinter.printmethod"]], "printmethod (sympy.printing.c.c99codeprinter attribute)": [[210, "sympy.printing.c.C99CodePrinter.printmethod"]], "printmethod (sympy.printing.codeprinter.codeprinter attribute)": [[210, "sympy.printing.codeprinter.CodePrinter.printmethod"]], "printmethod (sympy.printing.cxx.cxx11codeprinter attribute)": [[210, "sympy.printing.cxx.CXX11CodePrinter.printmethod"]], "printmethod (sympy.printing.cxx.cxx98codeprinter attribute)": [[210, "sympy.printing.cxx.CXX98CodePrinter.printmethod"]], "printmethod (sympy.printing.fortran.fcodeprinter attribute)": [[210, "sympy.printing.fortran.FCodePrinter.printmethod"]], "printmethod (sympy.printing.jscode.javascriptcodeprinter attribute)": [[210, "sympy.printing.jscode.JavascriptCodePrinter.printmethod"]], "printmethod (sympy.printing.julia.juliacodeprinter attribute)": [[210, "sympy.printing.julia.JuliaCodePrinter.printmethod"]], "printmethod (sympy.printing.lambdarepr.lambdaprinter attribute)": [[210, "sympy.printing.lambdarepr.LambdaPrinter.printmethod"]], "printmethod (sympy.printing.latex.latexprinter attribute)": [[210, "sympy.printing.latex.LatexPrinter.printmethod"]], "printmethod (sympy.printing.maple.maplecodeprinter attribute)": [[210, "sympy.printing.maple.MapleCodePrinter.printmethod"]], "printmethod (sympy.printing.mathematica.mcodeprinter attribute)": [[210, "sympy.printing.mathematica.MCodePrinter.printmethod"]], "printmethod (sympy.printing.mathml.mathmlcontentprinter attribute)": [[210, "sympy.printing.mathml.MathMLContentPrinter.printmethod"]], "printmethod (sympy.printing.mathml.mathmlpresentationprinter attribute)": [[210, "sympy.printing.mathml.MathMLPresentationPrinter.printmethod"]], "printmethod (sympy.printing.octave.octavecodeprinter attribute)": [[210, "sympy.printing.octave.OctaveCodePrinter.printmethod"]], "printmethod (sympy.printing.pretty.pretty.prettyprinter attribute)": [[210, "sympy.printing.pretty.pretty.PrettyPrinter.printmethod"]], "printmethod (sympy.printing.printer.printer attribute)": [[210, "sympy.printing.printer.Printer.printmethod"]], "printmethod (sympy.printing.rcode.rcodeprinter attribute)": [[210, "sympy.printing.rcode.RCodePrinter.printmethod"]], "printmethod (sympy.printing.repr.reprprinter attribute)": [[210, "sympy.printing.repr.ReprPrinter.printmethod"]], "printmethod (sympy.printing.rust.rustcodeprinter attribute)": [[210, "sympy.printing.rust.RustCodePrinter.printmethod"]], "printmethod (sympy.printing.smtlib.smtlibprinter attribute)": [[210, "sympy.printing.smtlib.SMTLibPrinter.printmethod"]], "printmethod (sympy.printing.str.strprinter attribute)": [[210, "sympy.printing.str.StrPrinter.printmethod"]], "pycode() (in module sympy.printing.pycode)": [[210, "sympy.printing.pycode.pycode"]], "rcode() (in module sympy.printing.rcode)": [[210, "sympy.printing.rcode.rcode"]], "render() (sympy.printing.pretty.stringpict.stringpict method)": [[210, "sympy.printing.pretty.stringpict.stringPict.render"]], "reprify() (sympy.printing.repr.reprprinter method)": [[210, "sympy.printing.repr.ReprPrinter.reprify"]], "right() (sympy.printing.pretty.stringpict.stringpict method)": [[210, "sympy.printing.pretty.stringpict.stringPict.right"]], "root (in module sympy.printing.pretty.pretty_symbology)": [[210, "sympy.printing.pretty.pretty_symbology.root"]], "root() (sympy.printing.pretty.stringpict.stringpict method)": [[210, "sympy.printing.pretty.stringpict.stringPict.root"]], "rust_code() (in module sympy.printing.rust)": [[210, "sympy.printing.rust.rust_code"]], "set_global_settings() (sympy.printing.printer.printer class method)": [[210, "sympy.printing.printer.Printer.set_global_settings"]], "smtlib_code() (in module sympy.printing.smtlib)": [[210, "sympy.printing.smtlib.smtlib_code"]], "split_super_sub() (in module sympy.printing.conventions)": [[210, "sympy.printing.conventions.split_super_sub"]], "srepr() (in module sympy.printing.repr)": [[210, "sympy.printing.repr.srepr"]], "sstr() (in module sympy.printing.str)": [[210, "sympy.printing.str.sstr"]], "sstrrepr() (in module sympy.printing.str)": [[210, "sympy.printing.str.sstrrepr"]], "stack() (sympy.printing.pretty.stringpict.stringpict static method)": [[210, "sympy.printing.pretty.stringpict.stringPict.stack"]], "stringpict (class in sympy.printing.pretty.stringpict)": [[210, "sympy.printing.pretty.stringpict.stringPict"]], "sub (in module sympy.printing.pretty.pretty_symbology)": [[210, "sympy.printing.pretty.pretty_symbology.sub"]], "sup (in module sympy.printing.pretty.pretty_symbology)": [[210, "sympy.printing.pretty.pretty_symbology.sup"]], "symb_2txt (in module sympy.printing.pretty.pretty_symbology)": [[210, "sympy.printing.pretty.pretty_symbology.symb_2txt"]], "sympy.printing.aesaracode": [[210, "module-sympy.printing.aesaracode"]], "sympy.printing.c": [[210, "module-sympy.printing.c"]], "sympy.printing.codeprinter": [[210, "module-sympy.printing.codeprinter"]], "sympy.printing.conventions": [[210, "module-sympy.printing.conventions"]], "sympy.printing.cxx": [[210, "module-sympy.printing.cxx"]], "sympy.printing.fortran": [[210, "module-sympy.printing.fortran"]], "sympy.printing.gtk": [[210, "module-sympy.printing.gtk"]], "sympy.printing.jscode": [[210, "module-sympy.printing.jscode"]], "sympy.printing.julia": [[210, "module-sympy.printing.julia"]], "sympy.printing.lambdarepr": [[210, "module-sympy.printing.lambdarepr"]], "sympy.printing.latex": [[210, "module-sympy.printing.latex"]], "sympy.printing.maple": [[210, "module-sympy.printing.maple"]], "sympy.printing.mathematica": [[210, "module-sympy.printing.mathematica"]], "sympy.printing.mathml": [[210, "module-sympy.printing.mathml"]], "sympy.printing.octave": [[210, "module-sympy.printing.octave"]], "sympy.printing.precedence": [[210, "module-sympy.printing.precedence"]], "sympy.printing.pretty": [[210, "module-sympy.printing.pretty"]], "sympy.printing.pretty.pretty": [[210, "module-sympy.printing.pretty.pretty"]], "sympy.printing.pretty.pretty_symbology": [[210, "module-sympy.printing.pretty.pretty_symbology"]], "sympy.printing.pretty.stringpict": [[210, "module-sympy.printing.pretty.stringpict"]], "sympy.printing.preview": [[210, "module-sympy.printing.preview"]], "sympy.printing.printer": [[210, "module-sympy.printing.printer"]], "sympy.printing.pycode": [[210, "module-sympy.printing.pycode"]], "sympy.printing.python": [[210, "module-sympy.printing.python"]], "sympy.printing.rcode": [[210, "module-sympy.printing.rcode"]], "sympy.printing.repr": [[210, "module-sympy.printing.repr"]], "sympy.printing.rust": [[210, "module-sympy.printing.rust"]], "sympy.printing.smtlib": [[210, "module-sympy.printing.smtlib"]], "sympy.printing.str": [[210, "module-sympy.printing.str"]], "sympy.printing.tree": [[210, "module-sympy.printing.tree"]], "terminal_width() (sympy.printing.pretty.stringpict.stringpict method)": [[210, "sympy.printing.pretty.stringpict.stringPict.terminal_width"]], "tree() (in module sympy.printing.tree)": [[210, "sympy.printing.tree.tree"]], "vobj() (in module sympy.printing.pretty.pretty_symbology)": [[210, "sympy.printing.pretty.pretty_symbology.vobj"]], "width() (sympy.printing.pretty.stringpict.stringpict method)": [[210, "sympy.printing.pretty.stringpict.stringPict.width"]], "xobj() (in module sympy.printing.pretty.pretty_symbology)": [[210, "sympy.printing.pretty.pretty_symbology.xobj"]], "xstr() (in module sympy.printing.pretty.pretty_symbology)": [[210, "sympy.printing.pretty.pretty_symbology.xstr"]], "xsym() (in module sympy.printing.pretty.pretty_symbology)": [[210, "sympy.printing.pretty.pretty_symbology.xsym"]], "finiteformalpowerseries (class in sympy.series.formal)": [[212, "sympy.series.formal.FiniteFormalPowerSeries"]], "formalpowerseries (class in sympy.series.formal)": [[212, "sympy.series.formal.FormalPowerSeries"]], "formalpowerseriescompose (class in sympy.series.formal)": [[212, "sympy.series.formal.FormalPowerSeriesCompose"]], "formalpowerseriesinverse (class in sympy.series.formal)": [[212, "sympy.series.formal.FormalPowerSeriesInverse"]], "formalpowerseriesproduct (class in sympy.series.formal)": [[212, "sympy.series.formal.FormalPowerSeriesProduct"]], "coeff_bell() (sympy.series.formal.formalpowerseries method)": [[212, "sympy.series.formal.FormalPowerSeries.coeff_bell"]], "compose() (sympy.series.formal.formalpowerseries method)": [[212, "sympy.series.formal.FormalPowerSeries.compose"]], "compute_fps() (in module sympy.series.formal)": [[212, "sympy.series.formal.compute_fps"]], "exp_re() (in module sympy.series.formal)": [[212, "sympy.series.formal.exp_re"]], "fps() (in module sympy.series.formal)": [[212, "sympy.series.formal.fps"]], "function (sympy.series.formal.formalpowerseriescompose property)": [[212, "sympy.series.formal.FormalPowerSeriesCompose.function"]], "function (sympy.series.formal.formalpowerseriesinverse property)": [[212, "sympy.series.formal.FormalPowerSeriesInverse.function"]], "function (sympy.series.formal.formalpowerseriesproduct property)": [[212, "sympy.series.formal.FormalPowerSeriesProduct.function"]], "hyper_algorithm() (in module sympy.series.formal)": [[212, "sympy.series.formal.hyper_algorithm"]], "hyper_re() (in module sympy.series.formal)": [[212, "sympy.series.formal.hyper_re"]], "infinite (sympy.series.formal.formalpowerseries property)": [[212, "sympy.series.formal.FormalPowerSeries.infinite"]], "integrate() (sympy.series.formal.formalpowerseries method)": [[212, "sympy.series.formal.FormalPowerSeries.integrate"]], "inverse() (sympy.series.formal.formalpowerseries method)": [[212, "sympy.series.formal.FormalPowerSeries.inverse"]], "polynomial() (sympy.series.formal.formalpowerseries method)": [[212, "sympy.series.formal.FormalPowerSeries.polynomial"]], "product() (sympy.series.formal.formalpowerseries method)": [[212, "sympy.series.formal.FormalPowerSeries.product"]], "rational_algorithm() (in module sympy.series.formal)": [[212, "sympy.series.formal.rational_algorithm"]], "rational_independent() (in module sympy.series.formal)": [[212, "sympy.series.formal.rational_independent"]], "rsolve_hypergeometric() (in module sympy.series.formal)": [[212, "sympy.series.formal.rsolve_hypergeometric"]], "simplede() (in module sympy.series.formal)": [[212, "sympy.series.formal.simpleDE"]], "solve_de() (in module sympy.series.formal)": [[212, "sympy.series.formal.solve_de"]], "truncate() (sympy.series.formal.formalpowerseries method)": [[212, "sympy.series.formal.FormalPowerSeries.truncate"]], "fourierseries (class in sympy.series.fourier)": [[213, "sympy.series.fourier.FourierSeries"]], "fourier_series() (in module sympy.series.fourier)": [[213, "sympy.series.fourier.fourier_series"]], "scale() (sympy.series.fourier.fourierseries method)": [[213, "sympy.series.fourier.FourierSeries.scale"]], "scalex() (sympy.series.fourier.fourierseries method)": [[213, "sympy.series.fourier.FourierSeries.scalex"]], "shift() (sympy.series.fourier.fourierseries method)": [[213, "sympy.series.fourier.FourierSeries.shift"]], "shiftx() (sympy.series.fourier.fourierseries method)": [[213, "sympy.series.fourier.FourierSeries.shiftx"]], "sigma_approximation() (sympy.series.fourier.fourierseries method)": [[213, "sympy.series.fourier.FourierSeries.sigma_approximation"]], "truncate() (sympy.series.fourier.fourierseries method)": [[213, "sympy.series.fourier.FourierSeries.truncate"]], "difference_delta() (in module sympy.series.limitseq)": [[215, "sympy.series.limitseq.difference_delta"]], "dominant() (in module sympy.series.limitseq)": [[215, "sympy.series.limitseq.dominant"]], "limit_seq() (in module sympy.series.limitseq)": [[215, "sympy.series.limitseq.limit_seq"]], "emptysequence (class in sympy.series.sequences)": [[216, "sympy.series.sequences.EmptySequence"]], "recursiveseq (class in sympy.series.sequences)": [[216, "sympy.series.sequences.RecursiveSeq"]], "seqadd (class in sympy.series.sequences)": [[216, "sympy.series.sequences.SeqAdd"]], "seqbase (class in sympy.series.sequences)": [[216, "sympy.series.sequences.SeqBase"]], "seqformula (class in sympy.series.sequences)": [[216, "sympy.series.sequences.SeqFormula"]], "seqmul (class in sympy.series.sequences)": [[216, "sympy.series.sequences.SeqMul"]], "seqper (class in sympy.series.sequences)": [[216, "sympy.series.sequences.SeqPer"]], "coeff() (sympy.series.sequences.seqbase method)": [[216, "sympy.series.sequences.SeqBase.coeff"]], "coeff_mul() (sympy.series.sequences.emptysequence method)": [[216, "sympy.series.sequences.EmptySequence.coeff_mul"]], "coeff_mul() (sympy.series.sequences.seqbase method)": [[216, "sympy.series.sequences.SeqBase.coeff_mul"]], "coeff_mul() (sympy.series.sequences.seqformula method)": [[216, "sympy.series.sequences.SeqFormula.coeff_mul"]], "coeff_mul() (sympy.series.sequences.seqper method)": [[216, "sympy.series.sequences.SeqPer.coeff_mul"]], "find_linear_recurrence() (sympy.series.sequences.seqbase method)": [[216, "sympy.series.sequences.SeqBase.find_linear_recurrence"]], "free_symbols (sympy.series.sequences.seqbase property)": [[216, "sympy.series.sequences.SeqBase.free_symbols"]], "gen (sympy.series.sequences.seqbase property)": [[216, "sympy.series.sequences.SeqBase.gen"]], "initial (sympy.series.sequences.recursiveseq property)": [[216, "sympy.series.sequences.RecursiveSeq.initial"]], "interval (sympy.series.sequences.recursiveseq property)": [[216, "sympy.series.sequences.RecursiveSeq.interval"]], "interval (sympy.series.sequences.seqbase property)": [[216, "sympy.series.sequences.SeqBase.interval"]], "length (sympy.series.sequences.seqbase property)": [[216, "sympy.series.sequences.SeqBase.length"]], "n (sympy.series.sequences.recursiveseq property)": [[216, "sympy.series.sequences.RecursiveSeq.n"]], "recurrence (sympy.series.sequences.recursiveseq property)": [[216, "sympy.series.sequences.RecursiveSeq.recurrence"]], "reduce() (sympy.series.sequences.seqadd static method)": [[216, "sympy.series.sequences.SeqAdd.reduce"]], "reduce() (sympy.series.sequences.seqmul static method)": [[216, "sympy.series.sequences.SeqMul.reduce"]], "sequence() (in module sympy.series.sequences)": [[216, "sympy.series.sequences.sequence"]], "start (sympy.series.sequences.recursiveseq property)": [[216, "sympy.series.sequences.RecursiveSeq.start"]], "start (sympy.series.sequences.seqbase property)": [[216, "sympy.series.sequences.SeqBase.start"]], "stop (sympy.series.sequences.recursiveseq property)": [[216, "sympy.series.sequences.RecursiveSeq.stop"]], "stop (sympy.series.sequences.seqbase property)": [[216, "sympy.series.sequences.SeqBase.stop"]], "variables (sympy.series.sequences.seqbase property)": [[216, "sympy.series.sequences.SeqBase.variables"]], "y (sympy.series.sequences.recursiveseq property)": [[216, "sympy.series.sequences.RecursiveSeq.y"]], "yn (sympy.series.sequences.recursiveseq property)": [[216, "sympy.series.sequences.RecursiveSeq.yn"]], "limit (class in sympy.series.limits)": [[217, "sympy.series.limits.Limit"]], "order (class in sympy.series.order)": [[217, "sympy.series.order.Order"]], "subsset (class in sympy.series.gruntz)": [[217, "sympy.series.gruntz.SubsSet"]], "build_expression_tree() (in module sympy.series.gruntz)": [[217, "sympy.series.gruntz.build_expression_tree"]], "calculate_series() (in module sympy.series.gruntz)": [[217, "sympy.series.gruntz.calculate_series"]], "compare() (in module sympy.series.gruntz)": [[217, "sympy.series.gruntz.compare"]], "contains() (sympy.series.order.order method)": [[217, "sympy.series.order.Order.contains"]], "copy() (sympy.series.gruntz.subsset method)": [[217, "sympy.series.gruntz.SubsSet.copy"]], "do_subs() (sympy.series.gruntz.subsset method)": [[217, "sympy.series.gruntz.SubsSet.do_subs"]], "doit() (sympy.series.limits.limit method)": [[217, "sympy.series.limits.Limit.doit"]], "gruntz() (in module sympy.series.gruntz)": [[217, "sympy.series.gruntz.gruntz"]], "limit() (in module sympy.series.limits)": [[217, "sympy.series.limits.limit"]], "limitinf() (in module sympy.series.gruntz)": [[217, "sympy.series.gruntz.limitinf"]], "meets() (sympy.series.gruntz.subsset method)": [[217, "sympy.series.gruntz.SubsSet.meets"]], "mrv() (in module sympy.series.gruntz)": [[217, "sympy.series.gruntz.mrv"]], "mrv_leadterm() (in module sympy.series.gruntz)": [[217, "sympy.series.gruntz.mrv_leadterm"]], "mrv_max1() (in module sympy.series.gruntz)": [[217, "sympy.series.gruntz.mrv_max1"]], "mrv_max3() (in module sympy.series.gruntz)": [[217, "sympy.series.gruntz.mrv_max3"]], "residue() (in module sympy.series.residues)": [[217, "sympy.series.residues.residue"]], "rewrite() (in module sympy.series.gruntz)": [[217, "sympy.series.gruntz.rewrite"]], "richardson() (in module sympy.series.acceleration)": [[217, "sympy.series.acceleration.richardson"]], "series() (in module sympy.series.series)": [[217, "sympy.series.series.series"]], "shanks() (in module sympy.series.acceleration)": [[217, "sympy.series.acceleration.shanks"]], "sign() (in module sympy.series.gruntz)": [[217, "sympy.series.gruntz.sign"]], "union() (sympy.series.gruntz.subsset method)": [[217, "sympy.series.gruntz.SubsSet.union"]], "cartesiancomplexregion (class in sympy.sets.fancysets)": [[218, "sympy.sets.fancysets.CartesianComplexRegion"]], "complement (class in sympy.sets.sets)": [[218, "sympy.sets.sets.Complement"]], "complexregion (class in sympy.sets.fancysets)": [[218, "sympy.sets.fancysets.ComplexRegion"]], "complexes (class in sympy.sets.fancysets)": [[218, "sympy.sets.fancysets.Complexes"]], "conditionset (class in sympy.sets.conditionset)": [[218, "sympy.sets.conditionset.ConditionSet"]], "contains (class in sympy.sets.conditionset)": [[218, "sympy.sets.conditionset.Contains"]], "disjointunion (class in sympy.sets.sets)": [[218, "sympy.sets.sets.DisjointUnion"]], "emptyset (class in sympy.sets.sets)": [[218, "sympy.sets.sets.EmptySet"]], "finiteset (class in sympy.sets.sets)": [[218, "sympy.sets.sets.FiniteSet"]], "imageset (class in sympy.sets.fancysets)": [[218, "sympy.sets.fancysets.ImageSet"]], "integers (class in sympy.sets.fancysets)": [[218, "sympy.sets.fancysets.Integers"]], "intersection (class in sympy.sets.sets)": [[218, "sympy.sets.sets.Intersection"]], "interval (class in sympy.sets.sets)": [[218, "sympy.sets.sets.Interval"]], "lopen() (sympy.sets.sets.interval class method)": [[218, "sympy.sets.sets.Interval.Lopen"]], "naturals (class in sympy.sets.fancysets)": [[218, "sympy.sets.fancysets.Naturals"]], "naturals0 (class in sympy.sets.fancysets)": [[218, "sympy.sets.fancysets.Naturals0"]], "polarcomplexregion (class in sympy.sets.fancysets)": [[218, "sympy.sets.fancysets.PolarComplexRegion"]], "powerset (class in sympy.sets.powerset)": [[218, "sympy.sets.powerset.PowerSet"]], "productset (class in sympy.sets.sets)": [[218, "sympy.sets.sets.ProductSet"]], "range (class in sympy.sets.fancysets)": [[218, "sympy.sets.fancysets.Range"]], "rationals (class in sympy.sets.fancysets)": [[218, "sympy.sets.fancysets.Rationals"]], "reals (class in sympy.sets.fancysets)": [[218, "sympy.sets.fancysets.Reals"]], "ropen() (sympy.sets.sets.interval class method)": [[218, "sympy.sets.sets.Interval.Ropen"]], "set (class in sympy.sets.sets)": [[218, "sympy.sets.sets.Set"]], "setkind (class in sympy.sets.conditionset)": [[218, "sympy.sets.conditionset.SetKind"]], "symmetricdifference (class in sympy.sets.sets)": [[218, "sympy.sets.sets.SymmetricDifference"]], "union (class in sympy.sets.sets)": [[218, "sympy.sets.sets.Union"]], "universalset (class in sympy.sets.sets)": [[218, "sympy.sets.sets.UniversalSet"]], "a_interval (sympy.sets.fancysets.complexregion property)": [[218, "sympy.sets.fancysets.ComplexRegion.a_interval"]], "as_relational() (sympy.sets.fancysets.range method)": [[218, "sympy.sets.fancysets.Range.as_relational"]], "as_relational() (sympy.sets.sets.complement method)": [[218, "sympy.sets.sets.Complement.as_relational"]], "as_relational() (sympy.sets.sets.finiteset method)": [[218, "sympy.sets.sets.FiniteSet.as_relational"]], "as_relational() (sympy.sets.sets.intersection method)": [[218, "sympy.sets.sets.Intersection.as_relational"]], "as_relational() (sympy.sets.sets.interval method)": [[218, "sympy.sets.sets.Interval.as_relational"]], "as_relational() (sympy.sets.sets.symmetricdifference method)": [[218, "sympy.sets.sets.SymmetricDifference.as_relational"]], "as_relational() (sympy.sets.sets.union method)": [[218, "sympy.sets.sets.Union.as_relational"]], "b_interval (sympy.sets.fancysets.complexregion property)": [[218, "sympy.sets.fancysets.ComplexRegion.b_interval"]], "boundary (sympy.sets.sets.set property)": [[218, "sympy.sets.sets.Set.boundary"]], "closure (sympy.sets.sets.set property)": [[218, "sympy.sets.sets.Set.closure"]], "complement() (sympy.sets.sets.set method)": [[218, "sympy.sets.sets.Set.complement"]], "contains() (sympy.sets.sets.set method)": [[218, "sympy.sets.sets.Set.contains"]], "end (sympy.sets.sets.interval property)": [[218, "sympy.sets.sets.Interval.end"]], "from_real() (sympy.sets.fancysets.complexregion class method)": [[218, "sympy.sets.fancysets.ComplexRegion.from_real"]], "imageset() (in module sympy.sets.sets)": [[218, "sympy.sets.sets.imageset"]], "inf (sympy.sets.sets.set property)": [[218, "sympy.sets.sets.Set.inf"]], "interior (sympy.sets.sets.set property)": [[218, "sympy.sets.sets.Set.interior"]], "intersect() (sympy.sets.sets.set method)": [[218, "sympy.sets.sets.Set.intersect"]], "intersection() (sympy.sets.sets.set method)": [[218, "sympy.sets.sets.Set.intersection"]], "is_closed (sympy.sets.sets.set property)": [[218, "sympy.sets.sets.Set.is_closed"]], "is_disjoint() (sympy.sets.sets.set method)": [[218, "sympy.sets.sets.Set.is_disjoint"]], "is_iterable (sympy.sets.sets.productset property)": [[218, "sympy.sets.sets.ProductSet.is_iterable"]], "is_left_unbounded (sympy.sets.sets.interval property)": [[218, "sympy.sets.sets.Interval.is_left_unbounded"]], "is_open (sympy.sets.sets.set property)": [[218, "sympy.sets.sets.Set.is_open"]], "is_proper_subset() (sympy.sets.sets.set method)": [[218, "sympy.sets.sets.Set.is_proper_subset"]], "is_proper_superset() (sympy.sets.sets.set method)": [[218, "sympy.sets.sets.Set.is_proper_superset"]], "is_right_unbounded (sympy.sets.sets.interval property)": [[218, "sympy.sets.sets.Interval.is_right_unbounded"]], "is_subset() (sympy.sets.sets.set method)": [[218, "sympy.sets.sets.Set.is_subset"]], "is_superset() (sympy.sets.sets.set method)": [[218, "sympy.sets.sets.Set.is_superset"]], "isdisjoint() (sympy.sets.sets.set method)": [[218, "sympy.sets.sets.Set.isdisjoint"]], "issubset() (sympy.sets.sets.set method)": [[218, "sympy.sets.sets.Set.issubset"]], "issuperset() (sympy.sets.sets.set method)": [[218, "sympy.sets.sets.Set.issuperset"]], "kind (sympy.sets.sets.set property)": [[218, "sympy.sets.sets.Set.kind"]], "left_open (sympy.sets.sets.interval property)": [[218, "sympy.sets.sets.Interval.left_open"]], "measure (sympy.sets.sets.set property)": [[218, "sympy.sets.sets.Set.measure"]], "normalize_theta_set() (in module sympy.sets.fancysets)": [[218, "sympy.sets.fancysets.normalize_theta_set"]], "open() (sympy.sets.sets.interval class method)": [[218, "sympy.sets.sets.Interval.open"]], "powerset() (sympy.sets.sets.set method)": [[218, "sympy.sets.sets.Set.powerset"]], "psets (sympy.sets.fancysets.complexregion property)": [[218, "sympy.sets.fancysets.ComplexRegion.psets"]], "reduce() (sympy.sets.sets.complement static method)": [[218, "sympy.sets.sets.Complement.reduce"]], "reversed (sympy.sets.fancysets.range property)": [[218, "sympy.sets.fancysets.Range.reversed"]], "right_open (sympy.sets.sets.interval property)": [[218, "sympy.sets.sets.Interval.right_open"]], "sets (sympy.sets.fancysets.complexregion property)": [[218, "sympy.sets.fancysets.ComplexRegion.sets"]], "start (sympy.sets.sets.interval property)": [[218, "sympy.sets.sets.Interval.start"]], "sup (sympy.sets.sets.set property)": [[218, "sympy.sets.sets.Set.sup"]], "symmetric_difference() (sympy.sets.sets.set method)": [[218, "sympy.sets.sets.Set.symmetric_difference"]], "sympy.sets.conditionset": [[218, "module-sympy.sets.conditionset"]], "sympy.sets.fancysets": [[218, "module-sympy.sets.fancysets"]], "sympy.sets.powerset": [[218, "module-sympy.sets.powerset"]], "sympy.sets.sets": [[218, "module-sympy.sets.sets"]], "union() (sympy.sets.sets.set method)": [[218, "sympy.sets.sets.Set.union"]], "tr0() (in module sympy.simplify.fu)": [[219, "sympy.simplify.fu.TR0"]], "tr1() (in module sympy.simplify.fu)": [[219, "sympy.simplify.fu.TR1"]], "tr10() (in module sympy.simplify.fu)": [[219, "sympy.simplify.fu.TR10"]], "tr10i() (in module sympy.simplify.fu)": [[219, "sympy.simplify.fu.TR10i"]], "tr11() (in module sympy.simplify.fu)": [[219, "sympy.simplify.fu.TR11"]], "tr111() (in module sympy.simplify.fu)": [[219, "sympy.simplify.fu.TR111"]], "tr12() (in module sympy.simplify.fu)": [[219, "sympy.simplify.fu.TR12"]], "tr12i() (in module sympy.simplify.fu)": [[219, "sympy.simplify.fu.TR12i"]], "tr13() (in module sympy.simplify.fu)": [[219, "sympy.simplify.fu.TR13"]], "tr14() (in module sympy.simplify.fu)": [[219, "sympy.simplify.fu.TR14"]], "tr15() (in module sympy.simplify.fu)": [[219, "sympy.simplify.fu.TR15"]], "tr16() (in module sympy.simplify.fu)": [[219, "sympy.simplify.fu.TR16"]], "tr2() (in module sympy.simplify.fu)": [[219, "sympy.simplify.fu.TR2"]], "tr22() (in module sympy.simplify.fu)": [[219, "sympy.simplify.fu.TR22"]], "tr2i() (in module sympy.simplify.fu)": [[219, "sympy.simplify.fu.TR2i"]], "tr3() (in module sympy.simplify.fu)": [[219, "sympy.simplify.fu.TR3"]], "tr4() (in module sympy.simplify.fu)": [[219, "sympy.simplify.fu.TR4"]], "tr5() (in module sympy.simplify.fu)": [[219, "sympy.simplify.fu.TR5"]], "tr6() (in module sympy.simplify.fu)": [[219, "sympy.simplify.fu.TR6"]], "tr7() (in module sympy.simplify.fu)": [[219, "sympy.simplify.fu.TR7"]], "tr8() (in module sympy.simplify.fu)": [[219, "sympy.simplify.fu.TR8"]], "tr9() (in module sympy.simplify.fu)": [[219, "sympy.simplify.fu.TR9"]], "trmorrie() (in module sympy.simplify.fu)": [[219, "sympy.simplify.fu.TRmorrie"]], "trpower() (in module sympy.simplify.fu)": [[219, "sympy.simplify.fu.TRpower"]], "fu() (in module sympy.simplify.fu)": [[219, "sympy.simplify.fu.fu"]], "sympy.simplify.hyperexpand_doc": [[220, "module-sympy.simplify.hyperexpand_doc"]], "epath (class in sympy.simplify.epathtools)": [[222, "sympy.simplify.epathtools.EPath"]], "apply() (sympy.simplify.epathtools.epath method)": [[222, "sympy.simplify.epathtools.EPath.apply"]], "besselsimp() (in module sympy.simplify.simplify)": [[222, "sympy.simplify.simplify.besselsimp"]], "collect() (in module sympy.simplify.radsimp)": [[222, "sympy.simplify.radsimp.collect"]], "collect_const() (in module sympy.simplify.radsimp)": [[222, "sympy.simplify.radsimp.collect_const"]], "collect_sqrt() (in module sympy.simplify.radsimp)": [[222, "sympy.simplify.radsimp.collect_sqrt"]], "combsimp() (in module sympy.simplify.combsimp)": [[222, "sympy.simplify.combsimp.combsimp"]], "cse() (in module sympy.simplify.cse_main)": [[222, "sympy.simplify.cse_main.cse"]], "epath() (in module sympy.simplify.epathtools)": [[222, "sympy.simplify.epathtools.epath"]], "fraction() (in module sympy.simplify.radsimp)": [[222, "sympy.simplify.radsimp.fraction"]], "hyperexpand() (in module sympy.simplify.hyperexpand)": [[222, "sympy.simplify.hyperexpand.hyperexpand"]], "hypersimilar() (in module sympy.simplify.simplify)": [[222, "sympy.simplify.simplify.hypersimilar"]], "hypersimp() (in module sympy.simplify.simplify)": [[222, "sympy.simplify.simplify.hypersimp"]], "kroneckersimp() (in module sympy.simplify.simplify)": [[222, "sympy.simplify.simplify.kroneckersimp"]], "logcombine() (in module sympy.simplify.simplify)": [[222, "sympy.simplify.simplify.logcombine"]], "nsimplify() (in module sympy.simplify.simplify)": [[222, "sympy.simplify.simplify.nsimplify"]], "nthroot() (in module sympy.simplify.simplify)": [[222, "sympy.simplify.simplify.nthroot"]], "opt_cse() (in module sympy.simplify.cse_main)": [[222, "sympy.simplify.cse_main.opt_cse"]], "posify() (in module sympy.simplify.simplify)": [[222, "sympy.simplify.simplify.posify"]], "powdenest() (in module sympy.simplify.powsimp)": [[222, "sympy.simplify.powsimp.powdenest"]], "powsimp() (in module sympy.simplify.powsimp)": [[222, "sympy.simplify.powsimp.powsimp"]], "rad_rationalize() (in module sympy.simplify.radsimp)": [[222, "sympy.simplify.radsimp.rad_rationalize"]], "radsimp() (in module sympy.simplify.radsimp)": [[222, "sympy.simplify.radsimp.radsimp"]], "ratsimp() (in module sympy.simplify.ratsimp)": [[222, "sympy.simplify.ratsimp.ratsimp"]], "ratsimpmodprime() (in module sympy.simplify.ratsimp)": [[222, "sympy.simplify.ratsimp.ratsimpmodprime"]], "rcollect() (in module sympy.simplify.radsimp)": [[222, "sympy.simplify.radsimp.rcollect"]], "select() (sympy.simplify.epathtools.epath method)": [[222, "sympy.simplify.epathtools.EPath.select"]], "separatevars() (in module sympy.simplify.simplify)": [[222, "sympy.simplify.simplify.separatevars"]], "simplify() (in module sympy.simplify.simplify)": [[222, "sympy.simplify.simplify.simplify"]], "sqrtdenest() (in module sympy.simplify.sqrtdenest)": [[222, "sympy.simplify.sqrtdenest.sqrtdenest"]], "sympy.simplify.combsimp": [[222, "module-sympy.simplify.combsimp"]], "sympy.simplify.cse_main": [[222, "module-sympy.simplify.cse_main"]], "sympy.simplify.epathtools": [[222, "module-sympy.simplify.epathtools"]], "sympy.simplify.hyperexpand": [[222, "module-sympy.simplify.hyperexpand"]], "sympy.simplify.powsimp": [[222, "module-sympy.simplify.powsimp"]], "sympy.simplify.radsimp": [[222, "module-sympy.simplify.radsimp"]], "sympy.simplify.ratsimp": [[222, "module-sympy.simplify.ratsimp"]], "sympy.simplify.sqrtdenest": [[222, "module-sympy.simplify.sqrtdenest"]], "sympy.simplify.trigsimp": [[222, "module-sympy.simplify.trigsimp"]], "tree_cse() (in module sympy.simplify.cse_main)": [[222, "sympy.simplify.cse_main.tree_cse"]], "trigsimp() (in module sympy.simplify.trigsimp)": [[222, "sympy.simplify.trigsimp.trigsimp"]], "binaryquadratic (class in sympy.solvers.diophantine.diophantine)": [[223, "sympy.solvers.diophantine.diophantine.BinaryQuadratic"]], "cubicthue (class in sympy.solvers.diophantine.diophantine)": [[223, "sympy.solvers.diophantine.diophantine.CubicThue"]], "diophantineequationtype (class in sympy.solvers.diophantine.diophantine)": [[223, "sympy.solvers.diophantine.diophantine.DiophantineEquationType"]], "diophantinesolutionset (class in sympy.solvers.diophantine.diophantine)": [[223, "sympy.solvers.diophantine.diophantine.DiophantineSolutionSet"]], "generalpythagorean (class in sympy.solvers.diophantine.diophantine)": [[223, "sympy.solvers.diophantine.diophantine.GeneralPythagorean"]], "generalsumofevenpowers (class in sympy.solvers.diophantine.diophantine)": [[223, "sympy.solvers.diophantine.diophantine.GeneralSumOfEvenPowers"]], "generalsumofsquares (class in sympy.solvers.diophantine.diophantine)": [[223, "sympy.solvers.diophantine.diophantine.GeneralSumOfSquares"]], "homogeneousgeneralquadratic (class in sympy.solvers.diophantine.diophantine)": [[223, "sympy.solvers.diophantine.diophantine.HomogeneousGeneralQuadratic"]], "homogeneousternaryquadratic (class in sympy.solvers.diophantine.diophantine)": [[223, "sympy.solvers.diophantine.diophantine.HomogeneousTernaryQuadratic"]], "homogeneousternaryquadraticnormal (class in sympy.solvers.diophantine.diophantine)": [[223, "sympy.solvers.diophantine.diophantine.HomogeneousTernaryQuadraticNormal"]], "inhomogeneousgeneralquadratic (class in sympy.solvers.diophantine.diophantine)": [[223, "sympy.solvers.diophantine.diophantine.InhomogeneousGeneralQuadratic"]], "inhomogeneousternaryquadratic (class in sympy.solvers.diophantine.diophantine)": [[223, "sympy.solvers.diophantine.diophantine.InhomogeneousTernaryQuadratic"]], "linear (class in sympy.solvers.diophantine.diophantine)": [[223, "sympy.solvers.diophantine.diophantine.Linear"]], "pqa() (in module sympy.solvers.diophantine.diophantine)": [[223, "sympy.solvers.diophantine.diophantine.PQa"]], "univariate (class in sympy.solvers.diophantine.diophantine)": [[223, "sympy.solvers.diophantine.diophantine.Univariate"]], "base_solution_linear() (in module sympy.solvers.diophantine.diophantine)": [[223, "sympy.solvers.diophantine.diophantine.base_solution_linear"]], "classify_diop() (in module sympy.solvers.diophantine.diophantine)": [[223, "sympy.solvers.diophantine.diophantine.classify_diop"]], "cornacchia() (in module sympy.solvers.diophantine.diophantine)": [[223, "sympy.solvers.diophantine.diophantine.cornacchia"]], "descent() (in module sympy.solvers.diophantine.diophantine)": [[223, "sympy.solvers.diophantine.diophantine.descent"]], "diop_dn() (in module sympy.solvers.diophantine.diophantine)": [[223, "sympy.solvers.diophantine.diophantine.diop_DN"]], "diop_bf_dn() (in module sympy.solvers.diophantine.diophantine)": [[223, "sympy.solvers.diophantine.diophantine.diop_bf_DN"]], "diop_general_pythagorean() (in module sympy.solvers.diophantine.diophantine)": [[223, "sympy.solvers.diophantine.diophantine.diop_general_pythagorean"]], "diop_general_sum_of_even_powers() (in module sympy.solvers.diophantine.diophantine)": [[223, "sympy.solvers.diophantine.diophantine.diop_general_sum_of_even_powers"]], "diop_general_sum_of_squares() (in module sympy.solvers.diophantine.diophantine)": [[223, "sympy.solvers.diophantine.diophantine.diop_general_sum_of_squares"]], "diop_linear() (in module sympy.solvers.diophantine.diophantine)": [[223, "sympy.solvers.diophantine.diophantine.diop_linear"]], "diop_quadratic() (in module sympy.solvers.diophantine.diophantine)": [[223, "sympy.solvers.diophantine.diophantine.diop_quadratic"]], "diop_solve() (in module sympy.solvers.diophantine.diophantine)": [[223, "sympy.solvers.diophantine.diophantine.diop_solve"]], "diop_ternary_quadratic() (in module sympy.solvers.diophantine.diophantine)": [[223, "sympy.solvers.diophantine.diophantine.diop_ternary_quadratic"]], "diop_ternary_quadratic_normal() (in module sympy.solvers.diophantine.diophantine)": [[223, "sympy.solvers.diophantine.diophantine.diop_ternary_quadratic_normal"]], "diophantine() (in module sympy.solvers.diophantine.diophantine)": [[223, "sympy.solvers.diophantine.diophantine.diophantine"]], "divisible() (in module sympy.solvers.diophantine.diophantine)": [[223, "sympy.solvers.diophantine.diophantine.divisible"]], "equivalent() (in module sympy.solvers.diophantine.diophantine)": [[223, "sympy.solvers.diophantine.diophantine.equivalent"]], "find_dn() (in module sympy.solvers.diophantine.diophantine)": [[223, "sympy.solvers.diophantine.diophantine.find_DN"]], "gaussian_reduce() (in module sympy.solvers.diophantine.diophantine)": [[223, "sympy.solvers.diophantine.diophantine.gaussian_reduce"]], "holzer() (in module sympy.solvers.diophantine.diophantine)": [[223, "sympy.solvers.diophantine.diophantine.holzer"]], "ldescent() (in module sympy.solvers.diophantine.diophantine)": [[223, "sympy.solvers.diophantine.diophantine.ldescent"]], "matches() (sympy.solvers.diophantine.diophantine.diophantineequationtype method)": [[223, "sympy.solvers.diophantine.diophantine.DiophantineEquationType.matches"]], "merge_solution() (in module sympy.solvers.diophantine.diophantine)": [[223, "sympy.solvers.diophantine.diophantine.merge_solution"]], "parametrize_ternary_quadratic() (in module sympy.solvers.diophantine.diophantine)": [[223, "sympy.solvers.diophantine.diophantine.parametrize_ternary_quadratic"]], "partition() (in module sympy.solvers.diophantine.diophantine)": [[223, "sympy.solvers.diophantine.diophantine.partition"]], "power_representation() (in module sympy.solvers.diophantine.diophantine)": [[223, "sympy.solvers.diophantine.diophantine.power_representation"]], "prime_as_sum_of_two_squares() (in module sympy.solvers.diophantine.diophantine)": [[223, "sympy.solvers.diophantine.diophantine.prime_as_sum_of_two_squares"]], "reconstruct() (in module sympy.solvers.diophantine.diophantine)": [[223, "sympy.solvers.diophantine.diophantine.reconstruct"]], "sqf_normal() (in module sympy.solvers.diophantine.diophantine)": [[223, "sympy.solvers.diophantine.diophantine.sqf_normal"]], "square_factor() (in module sympy.solvers.diophantine.diophantine)": [[223, "sympy.solvers.diophantine.diophantine.square_factor"]], "sum_of_four_squares() (in module sympy.solvers.diophantine.diophantine)": [[223, "sympy.solvers.diophantine.diophantine.sum_of_four_squares"]], "sum_of_powers() (in module sympy.solvers.diophantine.diophantine)": [[223, "sympy.solvers.diophantine.diophantine.sum_of_powers"]], "sum_of_squares() (in module sympy.solvers.diophantine.diophantine)": [[223, "sympy.solvers.diophantine.diophantine.sum_of_squares"]], "sum_of_three_squares() (in module sympy.solvers.diophantine.diophantine)": [[223, "sympy.solvers.diophantine.diophantine.sum_of_three_squares"]], "transformation_to_dn() (in module sympy.solvers.diophantine.diophantine)": [[223, "sympy.solvers.diophantine.diophantine.transformation_to_DN"]], "transformation_to_normal() (in module sympy.solvers.diophantine.diophantine)": [[223, "sympy.solvers.diophantine.diophantine.transformation_to_normal"]], "reduce_abs_inequalities() (in module sympy.solvers.inequalities)": [[225, "sympy.solvers.inequalities.reduce_abs_inequalities"]], "reduce_abs_inequality() (in module sympy.solvers.inequalities)": [[225, "sympy.solvers.inequalities.reduce_abs_inequality"]], "reduce_inequalities() (in module sympy.solvers.inequalities)": [[225, "sympy.solvers.inequalities.reduce_inequalities"]], "reduce_rational_inequalities() (in module sympy.solvers.inequalities)": [[225, "sympy.solvers.inequalities.reduce_rational_inequalities"]], "solve_poly_inequalities() (in module sympy.solvers.inequalities)": [[225, "sympy.solvers.inequalities.solve_poly_inequalities"]], "solve_poly_inequality() (in module sympy.solvers.inequalities)": [[225, "sympy.solvers.inequalities.solve_poly_inequality"]], "solve_rational_inequalities() (in module sympy.solvers.inequalities)": [[225, "sympy.solvers.inequalities.solve_rational_inequalities"]], "solve_univariate_inequality() (in module sympy.solvers.inequalities)": [[225, "sympy.solvers.inequalities.solve_univariate_inequality"]], "sympy.solvers.inequalities": [[225, "module-sympy.solvers.inequalities"]], "almostlinear (class in sympy.solvers.ode.single)": [[226, "sympy.solvers.ode.single.AlmostLinear"]], "bernoulli (class in sympy.solvers.ode.single)": [[226, "sympy.solvers.ode.single.Bernoulli"]], "factorable (class in sympy.solvers.ode.single)": [[226, "sympy.solvers.ode.single.Factorable"]], "firstexact (class in sympy.solvers.ode.single)": [[226, "sympy.solvers.ode.single.FirstExact"]], "firstlinear (class in sympy.solvers.ode.single)": [[226, "sympy.solvers.ode.single.FirstLinear"]], "homogeneouscoeffbest (class in sympy.solvers.ode.single)": [[226, "sympy.solvers.ode.single.HomogeneousCoeffBest"]], "homogeneouscoeffsubsdepdivindep (class in sympy.solvers.ode.single)": [[226, "sympy.solvers.ode.single.HomogeneousCoeffSubsDepDivIndep"]], "homogeneouscoeffsubsindepdivdep (class in sympy.solvers.ode.single)": [[226, "sympy.solvers.ode.single.HomogeneousCoeffSubsIndepDivDep"]], "liegroup (class in sympy.solvers.ode.single)": [[226, "sympy.solvers.ode.single.LieGroup"]], "linearcoefficients (class in sympy.solvers.ode.single)": [[226, "sympy.solvers.ode.single.LinearCoefficients"]], "liouville (class in sympy.solvers.ode.single)": [[226, "sympy.solvers.ode.single.Liouville"]], "nthalgebraic (class in sympy.solvers.ode.single)": [[226, "sympy.solvers.ode.single.NthAlgebraic"]], "nthlinearconstantcoeffhomogeneous (class in sympy.solvers.ode.single)": [[226, "sympy.solvers.ode.single.NthLinearConstantCoeffHomogeneous"]], "nthlinearconstantcoeffundeterminedcoefficients (class in sympy.solvers.ode.single)": [[226, "sympy.solvers.ode.single.NthLinearConstantCoeffUndeterminedCoefficients"]], "nthlinearconstantcoeffvariationofparameters (class in sympy.solvers.ode.single)": [[226, "sympy.solvers.ode.single.NthLinearConstantCoeffVariationOfParameters"]], "nthlineareulereqhomogeneous (class in sympy.solvers.ode.single)": [[226, "sympy.solvers.ode.single.NthLinearEulerEqHomogeneous"]], "nthlineareulereqnonhomogeneousundeterminedcoefficients (class in sympy.solvers.ode.single)": [[226, "sympy.solvers.ode.single.NthLinearEulerEqNonhomogeneousUndeterminedCoefficients"]], "nthlineareulereqnonhomogeneousvariationofparameters (class in sympy.solvers.ode.single)": [[226, "sympy.solvers.ode.single.NthLinearEulerEqNonhomogeneousVariationOfParameters"]], "nthorderreducible (class in sympy.solvers.ode.single)": [[226, "sympy.solvers.ode.single.NthOrderReducible"]], "rationalriccati (class in sympy.solvers.ode.single)": [[226, "sympy.solvers.ode.single.RationalRiccati"]], "riccatispecial (class in sympy.solvers.ode.single)": [[226, "sympy.solvers.ode.single.RiccatiSpecial"]], "secondhypergeometric (class in sympy.solvers.ode.single)": [[226, "sympy.solvers.ode.single.SecondHypergeometric"]], "secondlinearairy (class in sympy.solvers.ode.single)": [[226, "sympy.solvers.ode.single.SecondLinearAiry"]], "secondlinearbessel (class in sympy.solvers.ode.single)": [[226, "sympy.solvers.ode.single.SecondLinearBessel"]], "separable (class in sympy.solvers.ode.single)": [[226, "sympy.solvers.ode.single.Separable"]], "separablereduced (class in sympy.solvers.ode.single)": [[226, "sympy.solvers.ode.single.SeparableReduced"]], "_handle_integral() (in module sympy.solvers.ode.ode)": [[226, "sympy.solvers.ode.ode._handle_Integral"]], "_linear_2eq_order1_type6() (in module sympy.solvers.ode.ode)": [[226, "sympy.solvers.ode.ode._linear_2eq_order1_type6"]], "_linear_2eq_order1_type7() (in module sympy.solvers.ode.ode)": [[226, "sympy.solvers.ode.ode._linear_2eq_order1_type7"]], "_nonlinear_2eq_order1_type1() (in module sympy.solvers.ode.ode)": [[226, "sympy.solvers.ode.ode._nonlinear_2eq_order1_type1"]], "_nonlinear_2eq_order1_type2() (in module sympy.solvers.ode.ode)": [[226, "sympy.solvers.ode.ode._nonlinear_2eq_order1_type2"]], "_nonlinear_2eq_order1_type3() (in module sympy.solvers.ode.ode)": [[226, "sympy.solvers.ode.ode._nonlinear_2eq_order1_type3"]], "_nonlinear_2eq_order1_type4() (in module sympy.solvers.ode.ode)": [[226, "sympy.solvers.ode.ode._nonlinear_2eq_order1_type4"]], "_nonlinear_2eq_order1_type5() (in module sympy.solvers.ode.ode)": [[226, "sympy.solvers.ode.ode._nonlinear_2eq_order1_type5"]], "_nonlinear_3eq_order1_type1() (in module sympy.solvers.ode.ode)": [[226, "sympy.solvers.ode.ode._nonlinear_3eq_order1_type1"]], "_nonlinear_3eq_order1_type2() (in module sympy.solvers.ode.ode)": [[226, "sympy.solvers.ode.ode._nonlinear_3eq_order1_type2"]], "_nonlinear_3eq_order1_type3() (in module sympy.solvers.ode.ode)": [[226, "sympy.solvers.ode.ode._nonlinear_3eq_order1_type3"]], "_nonlinear_3eq_order1_type4() (in module sympy.solvers.ode.ode)": [[226, "sympy.solvers.ode.ode._nonlinear_3eq_order1_type4"]], "_nonlinear_3eq_order1_type5() (in module sympy.solvers.ode.ode)": [[226, "sympy.solvers.ode.ode._nonlinear_3eq_order1_type5"]], "allhints (in module sympy.solvers.ode)": [[226, "sympy.solvers.ode.allhints"]], "canonical_odes() (in module sympy.solvers.ode.systems)": [[226, "sympy.solvers.ode.systems.canonical_odes"]], "checkinfsol() (in module sympy.solvers.ode)": [[226, "sympy.solvers.ode.checkinfsol"]], "checkodesol() (in module sympy.solvers.ode)": [[226, "sympy.solvers.ode.checkodesol"]], "classify_ode() (in module sympy.solvers.ode)": [[226, "sympy.solvers.ode.classify_ode"]], "compute_m_ybar() (in module sympy.solvers.ode.riccati)": [[226, "sympy.solvers.ode.riccati.compute_m_ybar"]], "constant_renumber() (in module sympy.solvers.ode.ode)": [[226, "sympy.solvers.ode.ode.constant_renumber"]], "constantsimp() (in module sympy.solvers.ode)": [[226, "sympy.solvers.ode.constantsimp"]], "construct_c() (in module sympy.solvers.ode.riccati)": [[226, "sympy.solvers.ode.riccati.construct_c"]], "construct_d() (in module sympy.solvers.ode.riccati)": [[226, "sympy.solvers.ode.riccati.construct_d"]], "dsolve() (in module sympy.solvers.ode)": [[226, "sympy.solvers.ode.dsolve"]], "dsolve_system() (in module sympy.solvers.ode.systems)": [[226, "sympy.solvers.ode.systems.dsolve_system"]], "get_gen_sol_from_part_sol() (in module sympy.solvers.ode.riccati)": [[226, "sympy.solvers.ode.riccati.get_gen_sol_from_part_sol"]], "homogeneous_order() (in module sympy.solvers.ode)": [[226, "sympy.solvers.ode.homogeneous_order"]], "infinitesimals() (in module sympy.solvers.ode)": [[226, "sympy.solvers.ode.infinitesimals"]], "lie_heuristic_abaco1_product() (in module sympy.solvers.ode.lie_group)": [[226, "sympy.solvers.ode.lie_group.lie_heuristic_abaco1_product"]], "lie_heuristic_abaco1_simple() (in module sympy.solvers.ode.lie_group)": [[226, "sympy.solvers.ode.lie_group.lie_heuristic_abaco1_simple"]], "lie_heuristic_abaco2_similar() (in module sympy.solvers.ode.lie_group)": [[226, "sympy.solvers.ode.lie_group.lie_heuristic_abaco2_similar"]], "lie_heuristic_abaco2_unique_general() (in module sympy.solvers.ode.lie_group)": [[226, "sympy.solvers.ode.lie_group.lie_heuristic_abaco2_unique_general"]], "lie_heuristic_abaco2_unique_unknown() (in module sympy.solvers.ode.lie_group)": [[226, "sympy.solvers.ode.lie_group.lie_heuristic_abaco2_unique_unknown"]], "lie_heuristic_bivariate() (in module sympy.solvers.ode.lie_group)": [[226, "sympy.solvers.ode.lie_group.lie_heuristic_bivariate"]], "lie_heuristic_chi() (in module sympy.solvers.ode.lie_group)": [[226, "sympy.solvers.ode.lie_group.lie_heuristic_chi"]], "lie_heuristic_function_sum() (in module sympy.solvers.ode.lie_group)": [[226, "sympy.solvers.ode.lie_group.lie_heuristic_function_sum"]], "lie_heuristic_linear() (in module sympy.solvers.ode.lie_group)": [[226, "sympy.solvers.ode.lie_group.lie_heuristic_linear"]], "linear_ode_to_matrix() (in module sympy.solvers.ode.systems)": [[226, "sympy.solvers.ode.systems.linear_ode_to_matrix"]], "linodesolve() (in module sympy.solvers.ode.systems)": [[226, "sympy.solvers.ode.systems.linodesolve"]], "linodesolve_type() (in module sympy.solvers.ode.systems)": [[226, "sympy.solvers.ode.systems.linodesolve_type"]], "matrix_exp() (in module sympy.solvers.ode.systems)": [[226, "sympy.solvers.ode.systems.matrix_exp"]], "matrix_exp_jordan_form() (in module sympy.solvers.ode.systems)": [[226, "sympy.solvers.ode.systems.matrix_exp_jordan_form"]], "ode_1st_power_series() (in module sympy.solvers.ode.ode)": [[226, "sympy.solvers.ode.ode.ode_1st_power_series"]], "ode_2nd_power_series_ordinary() (in module sympy.solvers.ode.ode)": [[226, "sympy.solvers.ode.ode.ode_2nd_power_series_ordinary"]], "ode_2nd_power_series_regular() (in module sympy.solvers.ode.ode)": [[226, "sympy.solvers.ode.ode.ode_2nd_power_series_regular"]], "ode_sol_simplicity() (in module sympy.solvers.ode.ode)": [[226, "sympy.solvers.ode.ode.ode_sol_simplicity"]], "odesimp() (in module sympy.solvers.ode.ode)": [[226, "sympy.solvers.ode.ode.odesimp"]], "rational_laurent_series() (in module sympy.solvers.ode.riccati)": [[226, "sympy.solvers.ode.riccati.rational_laurent_series"]], "remove_redundant_sols() (in module sympy.solvers.ode.riccati)": [[226, "sympy.solvers.ode.riccati.remove_redundant_sols"]], "riccati_inverse_normal() (in module sympy.solvers.ode.riccati)": [[226, "sympy.solvers.ode.riccati.riccati_inverse_normal"]], "riccati_normal() (in module sympy.solvers.ode.riccati)": [[226, "sympy.solvers.ode.riccati.riccati_normal"]], "riccati_reduced() (in module sympy.solvers.ode.riccati)": [[226, "sympy.solvers.ode.riccati.riccati_reduced"]], "solve_aux_eq() (in module sympy.solvers.ode.riccati)": [[226, "sympy.solvers.ode.riccati.solve_aux_eq"]], "solve_riccati() (in module sympy.solvers.ode.riccati)": [[226, "sympy.solvers.ode.riccati.solve_riccati"]], "sympy.solvers.ode": [[226, "module-sympy.solvers.ode"]], "sympy.solvers.ode.ode": [[226, "module-sympy.solvers.ode.ode"]], "checkpdesol() (in module sympy.solvers.pde)": [[227, "sympy.solvers.pde.checkpdesol"]], "classify_pde() (in module sympy.solvers.pde)": [[227, "sympy.solvers.pde.classify_pde"]], "pde_1st_linear_constant_coeff() (in module sympy.solvers.pde)": [[227, "sympy.solvers.pde.pde_1st_linear_constant_coeff"]], "pde_1st_linear_constant_coeff_homogeneous() (in module sympy.solvers.pde)": [[227, "sympy.solvers.pde.pde_1st_linear_constant_coeff_homogeneous"]], "pde_1st_linear_variable_coeff() (in module sympy.solvers.pde)": [[227, "sympy.solvers.pde.pde_1st_linear_variable_coeff"]], "pde_separate() (in module sympy.solvers.pde)": [[227, "sympy.solvers.pde.pde_separate"]], "pde_separate_add() (in module sympy.solvers.pde)": [[227, "sympy.solvers.pde.pde_separate_add"]], "pde_separate_mul() (in module sympy.solvers.pde)": [[227, "sympy.solvers.pde.pde_separate_mul"]], "pdsolve() (in module sympy.solvers.pde)": [[227, "sympy.solvers.pde.pdsolve"]], "sympy.solvers.pde": [[227, "module-sympy.solvers.pde"]], "checksol() (in module sympy.solvers.solvers)": [[228, "sympy.solvers.solvers.checksol"]], "nsolve() (in module sympy.solvers.solvers)": [[228, "sympy.solvers.solvers.nsolve"]], "ode_order() (in module sympy.solvers.deutils)": [[228, "sympy.solvers.deutils.ode_order"]], "rsolve() (in module sympy.solvers.recurr)": [[228, "sympy.solvers.recurr.rsolve"]], "rsolve_hyper() (in module sympy.solvers.recurr)": [[228, "sympy.solvers.recurr.rsolve_hyper"]], "rsolve_poly() (in module sympy.solvers.recurr)": [[228, "sympy.solvers.recurr.rsolve_poly"]], "rsolve_ratio() (in module sympy.solvers.recurr)": [[228, "sympy.solvers.recurr.rsolve_ratio"]], "solve() (in module sympy.solvers.solvers)": [[228, "sympy.solvers.solvers.solve"]], "solve_linear() (in module sympy.solvers.solvers)": [[228, "sympy.solvers.solvers.solve_linear"]], "solve_linear_system() (in module sympy.solvers.solvers)": [[228, "sympy.solvers.solvers.solve_linear_system"]], "solve_linear_system_lu() (in module sympy.solvers.solvers)": [[228, "sympy.solvers.solvers.solve_linear_system_LU"]], "solve_poly_system() (in module sympy.solvers.polysys)": [[228, "sympy.solvers.polysys.solve_poly_system"]], "solve_triangulated() (in module sympy.solvers.polysys)": [[228, "sympy.solvers.polysys.solve_triangulated"]], "solve_undetermined_coeffs() (in module sympy.solvers.solvers)": [[228, "sympy.solvers.solvers.solve_undetermined_coeffs"]], "sympy.solvers": [[228, "module-sympy.solvers"]], "sympy.solvers.recurr": [[228, "module-sympy.solvers.recurr"]], "unrad() (in module sympy.solvers.solvers)": [[228, "sympy.solvers.solvers.unrad"]], "_is_exponential() (in module sympy.solvers.solveset)": [[229, "sympy.solvers.solveset._is_exponential"]], "_is_logarithmic() (in module sympy.solvers.solveset)": [[229, "sympy.solvers.solveset._is_logarithmic"]], "_solve_exponential() (in module sympy.solvers.solveset)": [[229, "sympy.solvers.solveset._solve_exponential"]], "_solve_logarithm() (in module sympy.solvers.solveset)": [[229, "sympy.solvers.solveset._solve_logarithm"]], "_transolve() (in module sympy.solvers.solveset)": [[229, "sympy.solvers.solveset._transolve"]], "domain_check() (in module sympy.solvers.solveset)": [[229, "sympy.solvers.solveset.domain_check"]], "invert_complex() (in module sympy.solvers.solveset)": [[229, "sympy.solvers.solveset.invert_complex"]], "invert_real() (in module sympy.solvers.solveset)": [[229, "sympy.solvers.solveset.invert_real"]], "linear_eq_to_matrix() (in module sympy.solvers.solveset)": [[229, "sympy.solvers.solveset.linear_eq_to_matrix"]], "linsolve() (in module sympy.solvers.solveset)": [[229, "sympy.solvers.solveset.linsolve"]], "nonlinsolve() (in module sympy.solvers.solveset)": [[229, "sympy.solvers.solveset.nonlinsolve"]], "solveset() (in module sympy.solvers.solveset)": [[229, "sympy.solvers.solveset.solveset"]], "solveset_complex() (in module sympy.solvers.solveset)": [[229, "sympy.solvers.solveset.solveset_complex"]], "solveset_real() (in module sympy.solvers.solveset)": [[229, "sympy.solvers.solveset.solveset_real"]], "solvify() (in module sympy.solvers.solveset)": [[229, "sympy.solvers.solveset.solvify"]], "sympy.solvers.solveset": [[229, "module-sympy.solvers.solveset"]], "arcsin() (in module sympy.stats)": [[230, "sympy.stats.Arcsin"]], "benini() (in module sympy.stats)": [[230, "sympy.stats.Benini"]], "bernoulli() (in module sympy.stats)": [[230, "sympy.stats.Bernoulli"]], "bernoulliprocess (class in sympy.stats)": [[230, "sympy.stats.BernoulliProcess"]], "beta() (in module sympy.stats)": [[230, "sympy.stats.Beta"]], "betabinomial() (in module sympy.stats)": [[230, "sympy.stats.BetaBinomial"]], "betanoncentral() (in module sympy.stats)": [[230, "sympy.stats.BetaNoncentral"]], "betaprime() (in module sympy.stats)": [[230, "sympy.stats.BetaPrime"]], "binomial() (in module sympy.stats)": [[230, "sympy.stats.Binomial"]], "boundedpareto() (in module sympy.stats)": [[230, "sympy.stats.BoundedPareto"]], "cauchy() (in module sympy.stats)": [[230, "sympy.stats.Cauchy"]], "centralmoment (class in sympy.stats)": [[230, "sympy.stats.CentralMoment"]], "chi() (in module sympy.stats)": [[230, "sympy.stats.Chi"]], "chinoncentral() (in module sympy.stats)": [[230, "sympy.stats.ChiNoncentral"]], "chisquared() (in module sympy.stats)": [[230, "sympy.stats.ChiSquared"]], "coin() (in module sympy.stats)": [[230, "sympy.stats.Coin"]], "compounddistribution (class in sympy.stats.compound_rv)": [[230, "sympy.stats.compound_rv.CompoundDistribution"]], "conditionaldomain (class in sympy.stats.rv)": [[230, "sympy.stats.rv.ConditionalDomain"]], "continuousdomain (class in sympy.stats.crv)": [[230, "sympy.stats.crv.ContinuousDomain"]], "continuousmarkovchain (class in sympy.stats)": [[230, "sympy.stats.ContinuousMarkovChain"]], "continuouspspace (class in sympy.stats.crv)": [[230, "sympy.stats.crv.ContinuousPSpace"]], "continuousrv() (in module sympy.stats)": [[230, "sympy.stats.ContinuousRV"]], "covariance (class in sympy.stats)": [[230, "sympy.stats.Covariance"]], "crosscovariancematrix (class in sympy.stats)": [[230, "sympy.stats.CrossCovarianceMatrix"]], "dagum() (in module sympy.stats)": [[230, "sympy.stats.Dagum"]], "die() (in module sympy.stats)": [[230, "sympy.stats.Die"]], "diepspace (class in sympy.stats.frv_types)": [[230, "sympy.stats.frv_types.DiePSpace"]], "discretemarkovchain (class in sympy.stats)": [[230, "sympy.stats.DiscreteMarkovChain"]], "discreteuniform() (in module sympy.stats)": [[230, "sympy.stats.DiscreteUniform"]], "e() (in module sympy.stats)": [[230, "sympy.stats.E"]], "erlang() (in module sympy.stats)": [[230, "sympy.stats.Erlang"]], "exgaussian() (in module sympy.stats)": [[230, "sympy.stats.ExGaussian"]], "expectation (class in sympy.stats)": [[230, "sympy.stats.Expectation"]], "expectationmatrix (class in sympy.stats)": [[230, "sympy.stats.ExpectationMatrix"]], "exponential() (in module sympy.stats)": [[230, "sympy.stats.Exponential"]], "fdistribution() (in module sympy.stats)": [[230, "sympy.stats.FDistribution"]], "finitedomain (class in sympy.stats.frv)": [[230, "sympy.stats.frv.FiniteDomain"]], "finitepspace (class in sympy.stats.frv)": [[230, "sympy.stats.frv.FinitePSpace"]], "finiterv() (in module sympy.stats)": [[230, "sympy.stats.FiniteRV"]], "fisherz() (in module sympy.stats)": [[230, "sympy.stats.FisherZ"]], "frechet() (in module sympy.stats)": [[230, "sympy.stats.Frechet"]], "gamma() (in module sympy.stats)": [[230, "sympy.stats.Gamma"]], "gammainverse() (in module sympy.stats)": [[230, "sympy.stats.GammaInverse"]], "gammaprocess (class in sympy.stats)": [[230, "sympy.stats.GammaProcess"]], "generalizedmultivariateloggamma() (in module sympy.stats)": [[230, "sympy.stats.GeneralizedMultivariateLogGamma"]], "generalizedmultivariateloggammaomega() (in module sympy.stats)": [[230, "sympy.stats.GeneralizedMultivariateLogGammaOmega"]], "geometric() (in module sympy.stats)": [[230, "sympy.stats.Geometric"]], "gompertz() (in module sympy.stats)": [[230, "sympy.stats.Gompertz"]], "gumbel() (in module sympy.stats)": [[230, "sympy.stats.Gumbel"]], "hermite() (in module sympy.stats)": [[230, "sympy.stats.Hermite"]], "hypergeometric() (in module sympy.stats)": [[230, "sympy.stats.Hypergeometric"]], "jointrv() (in module sympy.stats)": [[230, "sympy.stats.JointRV"]], "kumaraswamy() (in module sympy.stats)": [[230, "sympy.stats.Kumaraswamy"]], "laplace() (in module sympy.stats)": [[230, "sympy.stats.Laplace"]], "levy() (in module sympy.stats)": [[230, "sympy.stats.Levy"]], "loglogistic() (in module sympy.stats)": [[230, "sympy.stats.LogLogistic"]], "lognormal() (in module sympy.stats)": [[230, "sympy.stats.LogNormal"]], "logarithmic() (in module sympy.stats)": [[230, "sympy.stats.Logarithmic"]], "logistic() (in module sympy.stats)": [[230, "sympy.stats.Logistic"]], "lomax() (in module sympy.stats)": [[230, "sympy.stats.Lomax"]], "matrixgamma() (in module sympy.stats)": [[230, "sympy.stats.MatrixGamma"]], "matrixnormal() (in module sympy.stats)": [[230, "sympy.stats.MatrixNormal"]], "maxwell() (in module sympy.stats)": [[230, "sympy.stats.Maxwell"]], "moment (class in sympy.stats)": [[230, "sympy.stats.Moment"]], "moyal() (in module sympy.stats)": [[230, "sympy.stats.Moyal"]], "multinomial() (in module sympy.stats)": [[230, "sympy.stats.Multinomial"]], "multivariatebeta() (in module sympy.stats)": [[230, "sympy.stats.MultivariateBeta"]], "multivariateewens() (in module sympy.stats)": [[230, "sympy.stats.MultivariateEwens"]], "multivariatelaplace() (in module sympy.stats)": [[230, "sympy.stats.MultivariateLaplace"]], "multivariatenormal() (in module sympy.stats)": [[230, "sympy.stats.MultivariateNormal"]], "multivariatet() (in module sympy.stats)": [[230, "sympy.stats.MultivariateT"]], "nakagami() (in module sympy.stats)": [[230, "sympy.stats.Nakagami"]], "negativebinomial() (in module sympy.stats)": [[230, "sympy.stats.NegativeBinomial"]], "negativemultinomial() (in module sympy.stats)": [[230, "sympy.stats.NegativeMultinomial"]], "normal() (in module sympy.stats)": [[230, "sympy.stats.Normal"]], "normalgamma() (in module sympy.stats)": [[230, "sympy.stats.NormalGamma"]], "normalpspace (class in sympy.stats.crv_types)": [[230, "sympy.stats.crv_types.NormalPSpace"]], "p() (in module sympy.stats)": [[230, "sympy.stats.P"]], "pspace (class in sympy.stats.rv)": [[230, "sympy.stats.rv.PSpace"]], "pareto() (in module sympy.stats)": [[230, "sympy.stats.Pareto"]], "poisson() (in module sympy.stats)": [[230, "sympy.stats.Poisson"]], "poissonprocess (class in sympy.stats)": [[230, "sympy.stats.PoissonProcess"]], "powerfunction() (in module sympy.stats)": [[230, "sympy.stats.PowerFunction"]], "probability (class in sympy.stats)": [[230, "sympy.stats.Probability"]], "productdomain (class in sympy.stats.rv)": [[230, "sympy.stats.rv.ProductDomain"]], "productpspace (class in sympy.stats.rv)": [[230, "sympy.stats.rv.ProductPSpace"]], "quadraticu() (in module sympy.stats)": [[230, "sympy.stats.QuadraticU"]], "rademacher() (in module sympy.stats)": [[230, "sympy.stats.Rademacher"]], "raisedcosine() (in module sympy.stats)": [[230, "sympy.stats.RaisedCosine"]], "randomdomain (class in sympy.stats.rv)": [[230, "sympy.stats.rv.RandomDomain"]], "randomsymbol (class in sympy.stats.rv)": [[230, "sympy.stats.rv.RandomSymbol"]], "rayleigh() (in module sympy.stats)": [[230, "sympy.stats.Rayleigh"]], "reciprocal() (in module sympy.stats)": [[230, "sympy.stats.Reciprocal"]], "shiftedgompertz() (in module sympy.stats)": [[230, "sympy.stats.ShiftedGompertz"]], "singledomain (class in sympy.stats.rv)": [[230, "sympy.stats.rv.SingleDomain"]], "singlepspace (class in sympy.stats.rv)": [[230, "sympy.stats.rv.SinglePSpace"]], "skellam() (in module sympy.stats)": [[230, "sympy.stats.Skellam"]], "studentt() (in module sympy.stats)": [[230, "sympy.stats.StudentT"]], "trapezoidal() (in module sympy.stats)": [[230, "sympy.stats.Trapezoidal"]], "triangular() (in module sympy.stats)": [[230, "sympy.stats.Triangular"]], "uniform() (in module sympy.stats)": [[230, "sympy.stats.Uniform"]], "uniformsum() (in module sympy.stats)": [[230, "sympy.stats.UniformSum"]], "variance (class in sympy.stats)": [[230, "sympy.stats.Variance"]], "variancematrix (class in sympy.stats)": [[230, "sympy.stats.VarianceMatrix"]], "vonmises() (in module sympy.stats)": [[230, "sympy.stats.VonMises"]], "wald() (in module sympy.stats)": [[230, "sympy.stats.Wald"]], "weibull() (in module sympy.stats)": [[230, "sympy.stats.Weibull"]], "wienerprocess (class in sympy.stats)": [[230, "sympy.stats.WienerProcess"]], "wignersemicircle() (in module sympy.stats)": [[230, "sympy.stats.WignerSemicircle"]], "wishart() (in module sympy.stats)": [[230, "sympy.stats.Wishart"]], "yulesimon() (in module sympy.stats)": [[230, "sympy.stats.YuleSimon"]], "zeta() (in module sympy.stats)": [[230, "sympy.stats.Zeta"]], "absorbing_probabilities() (sympy.stats.discretemarkovchain method)": [[230, "sympy.stats.DiscreteMarkovChain.absorbing_probabilities"]], "canonical_form() (sympy.stats.discretemarkovchain method)": [[230, "sympy.stats.DiscreteMarkovChain.canonical_form"]], "cmoment() (in module sympy.stats)": [[230, "sympy.stats.cmoment"]], "communication_classes() (sympy.stats.discretemarkovchain method)": [[230, "sympy.stats.DiscreteMarkovChain.communication_classes"]], "correlation() (in module sympy.stats)": [[230, "sympy.stats.correlation"]], "coskewness() (in module sympy.stats)": [[230, "sympy.stats.coskewness"]], "covariance() (in module sympy.stats)": [[230, "sympy.stats.covariance"]], "decompose() (sympy.stats.discretemarkovchain method)": [[230, "sympy.stats.DiscreteMarkovChain.decompose"]], "density() (in module sympy.stats)": [[230, "sympy.stats.density"]], "entropy() (in module sympy.stats)": [[230, "sympy.stats.entropy"]], "expectation() (sympy.stats.bernoulliprocess method)": [[230, "sympy.stats.BernoulliProcess.expectation"]], "factorial_moment() (in module sympy.stats)": [[230, "sympy.stats.factorial_moment"]], "fixed_row_vector() (sympy.stats.discretemarkovchain method)": [[230, "sympy.stats.DiscreteMarkovChain.fixed_row_vector"]], "fundamental_matrix() (sympy.stats.discretemarkovchain method)": [[230, "sympy.stats.DiscreteMarkovChain.fundamental_matrix"]], "given() (in module sympy.stats)": [[230, "sympy.stats.given"]], "kurtosis() (in module sympy.stats)": [[230, "sympy.stats.kurtosis"]], "limiting_distribution (sympy.stats.discretemarkovchain property)": [[230, "sympy.stats.DiscreteMarkovChain.limiting_distribution"]], "marginal_distribution() (in module sympy.stats)": [[230, "sympy.stats.marginal_distribution"]], "median() (in module sympy.stats)": [[230, "sympy.stats.median"]], "moment() (in module sympy.stats)": [[230, "sympy.stats.moment"]], "probability() (sympy.stats.bernoulliprocess method)": [[230, "sympy.stats.BernoulliProcess.probability"]], "pspace() (in module sympy.stats.rv)": [[230, "sympy.stats.rv.pspace"]], "quantile() (in module sympy.stats)": [[230, "sympy.stats.quantile"]], "random_symbols() (in module sympy.stats.rv)": [[230, "sympy.stats.rv.random_symbols"]], "rs_swap() (in module sympy.stats.rv)": [[230, "sympy.stats.rv.rs_swap"]], "sample() (in module sympy.stats)": [[230, "sympy.stats.sample"]], "sample() (sympy.stats.discretemarkovchain method)": [[230, "sympy.stats.DiscreteMarkovChain.sample"]], "sample_iter() (in module sympy.stats)": [[230, "sympy.stats.sample_iter"]], "sampling_e() (in module sympy.stats.rv)": [[230, "sympy.stats.rv.sampling_E"]], "sampling_p() (in module sympy.stats.rv)": [[230, "sympy.stats.rv.sampling_P"]], "sampling_density() (in module sympy.stats.rv)": [[230, "sympy.stats.rv.sampling_density"]], "skewness() (in module sympy.stats)": [[230, "sympy.stats.skewness"]], "stationary_distribution() (sympy.stats.discretemarkovchain method)": [[230, "sympy.stats.DiscreteMarkovChain.stationary_distribution"]], "std() (in module sympy.stats)": [[230, "sympy.stats.std"]], "sympy.stats": [[230, "module-sympy.stats"]], "sympy.stats.die() (in module sympy.stats.crv_types)": [[230, "sympy.stats.crv_types.sympy.stats.Die"]], "sympy.stats.normal() (in module sympy.stats.crv_types)": [[230, "sympy.stats.crv_types.sympy.stats.Normal"]], "sympy.stats.crv": [[230, "module-sympy.stats.crv"]], "sympy.stats.crv_types": [[230, "module-sympy.stats.crv_types"]], "sympy.stats.frv": [[230, "module-sympy.stats.frv"]], "sympy.stats.frv_types": [[230, "module-sympy.stats.frv_types"]], "sympy.stats.rv": [[230, "module-sympy.stats.rv"]], "transition_probabilities (sympy.stats.discretemarkovchain property)": [[230, "sympy.stats.DiscreteMarkovChain.transition_probabilities"]], "variance() (in module sympy.stats)": [[230, "sympy.stats.variance"]], "where() (in module sympy.stats)": [[230, "sympy.stats.where"]], "immutabledensendimarray (class in sympy.tensor.array)": [[231, "sympy.tensor.array.ImmutableDenseNDimArray"]], "immutablesparsendimarray (class in sympy.tensor.array)": [[231, "sympy.tensor.array.ImmutableSparseNDimArray"]], "mutabledensendimarray (class in sympy.tensor.array)": [[231, "sympy.tensor.array.MutableDenseNDimArray"]], "mutablesparsendimarray (class in sympy.tensor.array)": [[231, "sympy.tensor.array.MutableSparseNDimArray"]], "derive_by_array() (in module sympy.tensor.array)": [[231, "sympy.tensor.array.derive_by_array"]], "permutedims() (in module sympy.tensor.array)": [[231, "sympy.tensor.array.permutedims"]], "sympy.tensor.array": [[231, "module-sympy.tensor.array"]], "tensorcontraction() (in module sympy.tensor.array)": [[231, "sympy.tensor.array.tensorcontraction"]], "tensordiagonal() (in module sympy.tensor.array)": [[231, "sympy.tensor.array.tensordiagonal"]], "tensorproduct() (in module sympy.tensor.array)": [[231, "sympy.tensor.array.tensorproduct"]], "sympy.tensor.array.expressions": [[232, "module-sympy.tensor.array.expressions"]], "sympy.tensor": [[233, "module-sympy.tensor"]], "get_contraction_structure() (in module sympy.tensor.index_methods)": [[234, "sympy.tensor.index_methods.get_contraction_structure"]], "get_indices() (in module sympy.tensor.index_methods)": [[234, "sympy.tensor.index_methods.get_indices"]], "sympy.tensor.index_methods": [[234, "module-sympy.tensor.index_methods"]], "idx (class in sympy.tensor.indexed)": [[235, "sympy.tensor.indexed.Idx"]], "indexed (class in sympy.tensor.indexed)": [[235, "sympy.tensor.indexed.Indexed"]], "indexedbase (class in sympy.tensor.indexed)": [[235, "sympy.tensor.indexed.IndexedBase"]], "base (sympy.tensor.indexed.indexed property)": [[235, "sympy.tensor.indexed.Indexed.base"]], "indices (sympy.tensor.indexed.indexed property)": [[235, "sympy.tensor.indexed.Indexed.indices"]], "label (sympy.tensor.indexed.idx property)": [[235, "sympy.tensor.indexed.Idx.label"]], "label (sympy.tensor.indexed.indexedbase property)": [[235, "sympy.tensor.indexed.IndexedBase.label"]], "lower (sympy.tensor.indexed.idx property)": [[235, "sympy.tensor.indexed.Idx.lower"]], "offset (sympy.tensor.indexed.indexedbase property)": [[235, "sympy.tensor.indexed.IndexedBase.offset"]], "ranges (sympy.tensor.indexed.indexed property)": [[235, "sympy.tensor.indexed.Indexed.ranges"]], "rank (sympy.tensor.indexed.indexed property)": [[235, "sympy.tensor.indexed.Indexed.rank"]], "shape (sympy.tensor.indexed.indexed property)": [[235, "sympy.tensor.indexed.Indexed.shape"]], "shape (sympy.tensor.indexed.indexedbase property)": [[235, "sympy.tensor.indexed.IndexedBase.shape"]], "strides (sympy.tensor.indexed.indexedbase property)": [[235, "sympy.tensor.indexed.IndexedBase.strides"]], "sympy.tensor.indexed": [[235, "module-sympy.tensor.indexed"]], "upper (sympy.tensor.indexed.idx property)": [[235, "sympy.tensor.indexed.Idx.upper"]], "tensadd (class in sympy.tensor.tensor)": [[236, "sympy.tensor.tensor.TensAdd"]], "tensexpr (class in sympy.tensor.tensor)": [[236, "sympy.tensor.tensor.TensExpr"]], "tensmul (class in sympy.tensor.tensor)": [[236, "sympy.tensor.tensor.TensMul"]], "tensorhead (class in sympy.tensor.tensor)": [[236, "sympy.tensor.tensor.TensorHead"]], "tensorindex (class in sympy.tensor.tensor)": [[236, "sympy.tensor.tensor.TensorIndex"]], "tensorindextype (class in sympy.tensor.tensor)": [[236, "sympy.tensor.tensor.TensorIndexType"]], "tensorsymmetry (class in sympy.tensor.tensor)": [[236, "sympy.tensor.tensor.TensorSymmetry"]], "tensortype (class in sympy.tensor.tensor)": [[236, "sympy.tensor.tensor.TensorType"]], "_tensormanager (class in sympy.tensor.tensor)": [[236, "sympy.tensor.tensor._TensorManager"]], "canon_bp() (in module sympy.tensor.tensor)": [[236, "sympy.tensor.tensor.canon_bp"]], "canon_bp() (sympy.tensor.tensor.tensadd method)": [[236, "sympy.tensor.tensor.TensAdd.canon_bp"]], "canon_bp() (sympy.tensor.tensor.tensmul method)": [[236, "sympy.tensor.tensor.TensMul.canon_bp"]], "clear() (sympy.tensor.tensor._tensormanager method)": [[236, "sympy.tensor.tensor._TensorManager.clear"]], "comm_i2symbol() (sympy.tensor.tensor._tensormanager method)": [[236, "sympy.tensor.tensor._TensorManager.comm_i2symbol"]], "comm_symbols2i() (sympy.tensor.tensor._tensormanager method)": [[236, "sympy.tensor.tensor._TensorManager.comm_symbols2i"]], "commutes_with() (sympy.tensor.tensor.tensorhead method)": [[236, "sympy.tensor.tensor.TensorHead.commutes_with"]], "contract_metric() (sympy.tensor.tensor.tensadd method)": [[236, "sympy.tensor.tensor.TensAdd.contract_metric"]], "contract_metric() (sympy.tensor.tensor.tensmul method)": [[236, "sympy.tensor.tensor.TensMul.contract_metric"]], "direct_product() (sympy.tensor.tensor.tensorsymmetry class method)": [[236, "sympy.tensor.tensor.TensorSymmetry.direct_product"]], "fully_symmetric() (sympy.tensor.tensor.tensorsymmetry class method)": [[236, "sympy.tensor.tensor.TensorSymmetry.fully_symmetric"]], "get_comm() (sympy.tensor.tensor._tensormanager method)": [[236, "sympy.tensor.tensor._TensorManager.get_comm"]], "get_free_indices() (sympy.tensor.tensor.tensmul method)": [[236, "sympy.tensor.tensor.TensMul.get_free_indices"]], "get_indices() (sympy.tensor.tensor.tensmul method)": [[236, "sympy.tensor.tensor.TensMul.get_indices"]], "get_matrix() (sympy.tensor.tensor.tensexpr method)": [[236, "sympy.tensor.tensor.TensExpr.get_matrix"]], "no_symmetry() (sympy.tensor.tensor.tensorsymmetry class method)": [[236, "sympy.tensor.tensor.TensorSymmetry.no_symmetry"]], "perm2tensor() (sympy.tensor.tensor.tensmul method)": [[236, "sympy.tensor.tensor.TensMul.perm2tensor"]], "replace_with_arrays() (sympy.tensor.tensor.tensexpr method)": [[236, "sympy.tensor.tensor.TensExpr.replace_with_arrays"]], "riemann() (sympy.tensor.tensor.tensorsymmetry class method)": [[236, "sympy.tensor.tensor.TensorSymmetry.riemann"]], "riemann_cyclic() (in module sympy.tensor.tensor)": [[236, "sympy.tensor.tensor.riemann_cyclic"]], "riemann_cyclic_replace() (in module sympy.tensor.tensor)": [[236, "sympy.tensor.tensor.riemann_cyclic_replace"]], "set_comm() (sympy.tensor.tensor._tensormanager method)": [[236, "sympy.tensor.tensor._TensorManager.set_comm"]], "set_comms() (sympy.tensor.tensor._tensormanager method)": [[236, "sympy.tensor.tensor._TensorManager.set_comms"]], "sorted_components() (sympy.tensor.tensor.tensmul method)": [[236, "sympy.tensor.tensor.TensMul.sorted_components"]], "split() (sympy.tensor.tensor.tensmul method)": [[236, "sympy.tensor.tensor.TensMul.split"]], "sympy.tensor.tensor": [[236, "module-sympy.tensor.tensor"]], "tensor_heads() (in module sympy.tensor.tensor)": [[236, "sympy.tensor.tensor.tensor_heads"]], "tensorsymmetry() (in module sympy.tensor.tensor)": [[236, "sympy.tensor.tensor.tensorsymmetry"]], "partialderivative (class in sympy.tensor.toperators)": [[237, "sympy.tensor.toperators.PartialDerivative"]], "sympy.tensor.toperators": [[237, "module-sympy.tensor.toperators"]], "sympy.testing": [[238, "module-sympy.testing"]], "skip() (in module sympy.testing.pytest)": [[239, "sympy.testing.pytest.SKIP"]], "nocache_fail() (in module sympy.testing.pytest)": [[239, "sympy.testing.pytest.nocache_fail"]], "raises() (in module sympy.testing.pytest)": [[239, "sympy.testing.pytest.raises"]], "sympy.testing.pytest": [[239, "module-sympy.testing.pytest"]], "warns() (in module sympy.testing.pytest)": [[239, "sympy.testing.pytest.warns"]], "warns_deprecated_sympy() (in module sympy.testing.pytest)": [[239, "sympy.testing.pytest.warns_deprecated_sympy"]], "sympy.testing.randtest": [[240, "module-sympy.testing.randtest"]], "pytestreporter (class in sympy.testing.runtests)": [[241, "sympy.testing.runtests.PyTestReporter"]], "reporter (class in sympy.testing.runtests)": [[241, "sympy.testing.runtests.Reporter"]], "sympydoctestfinder (class in sympy.testing.runtests)": [[241, "sympy.testing.runtests.SymPyDocTestFinder"]], "sympydoctestrunner (class in sympy.testing.runtests)": [[241, "sympy.testing.runtests.SymPyDocTestRunner"]], "sympyoutputchecker (class in sympy.testing.runtests)": [[241, "sympy.testing.runtests.SymPyOutputChecker"]], "sympytestresults (class in sympy.testing.runtests)": [[241, "sympy.testing.runtests.SymPyTestResults"]], "attempted (sympy.testing.runtests.sympytestresults attribute)": [[241, "sympy.testing.runtests.SymPyTestResults.attempted"]], "check_output() (sympy.testing.runtests.sympyoutputchecker method)": [[241, "sympy.testing.runtests.SymPyOutputChecker.check_output"]], "convert_to_native_paths() (in module sympy.testing.runtests)": [[241, "sympy.testing.runtests.convert_to_native_paths"]], "doctest() (in module sympy.testing.runtests)": [[241, "sympy.testing.runtests.doctest"]], "failed (sympy.testing.runtests.sympytestresults attribute)": [[241, "sympy.testing.runtests.SymPyTestResults.failed"]], "get_sympy_dir() (in module sympy.testing.runtests)": [[241, "sympy.testing.runtests.get_sympy_dir"]], "raise_on_deprecated() (in module sympy.testing.runtests)": [[241, "sympy.testing.runtests.raise_on_deprecated"]], "run() (sympy.testing.runtests.sympydoctestrunner method)": [[241, "sympy.testing.runtests.SymPyDocTestRunner.run"]], "run_all_tests() (in module sympy.testing.runtests)": [[241, "sympy.testing.runtests.run_all_tests"]], "run_in_subprocess_with_hash_randomization() (in module sympy.testing.runtests)": [[241, "sympy.testing.runtests.run_in_subprocess_with_hash_randomization"]], "split_list() (in module sympy.testing.runtests)": [[241, "sympy.testing.runtests.split_list"]], "sympy.testing.runtests": [[241, "module-sympy.testing.runtests"]], "sympytestfile() (in module sympy.testing.runtests)": [[241, "sympy.testing.runtests.sympytestfile"]], "test() (in module sympy.testing.runtests)": [[241, "sympy.testing.runtests.test"]], "write() (sympy.testing.runtests.pytestreporter method)": [[241, "sympy.testing.runtests.PyTestReporter.write"]], "codewrapper (class in sympy.utilities.autowrap)": [[242, "sympy.utilities.autowrap.CodeWrapper"]], "cythoncodewrapper (class in sympy.utilities.autowrap)": [[242, "sympy.utilities.autowrap.CythonCodeWrapper"]], "dummywrapper (class in sympy.utilities.autowrap)": [[242, "sympy.utilities.autowrap.DummyWrapper"]], "f2pycodewrapper (class in sympy.utilities.autowrap)": [[242, "sympy.utilities.autowrap.F2PyCodeWrapper"]], "ufuncifycodewrapper (class in sympy.utilities.autowrap)": [[242, "sympy.utilities.autowrap.UfuncifyCodeWrapper"]], "autowrap() (in module sympy.utilities.autowrap)": [[242, "sympy.utilities.autowrap.autowrap"]], "binary_function() (in module sympy.utilities.autowrap)": [[242, "sympy.utilities.autowrap.binary_function"]], "dump_c() (sympy.utilities.autowrap.ufuncifycodewrapper method)": [[242, "sympy.utilities.autowrap.UfuncifyCodeWrapper.dump_c"]], "dump_pyx() (sympy.utilities.autowrap.cythoncodewrapper method)": [[242, "sympy.utilities.autowrap.CythonCodeWrapper.dump_pyx"]], "sympy.utilities.autowrap": [[242, "module-sympy.utilities.autowrap"]], "ufuncify() (in module sympy.utilities.autowrap)": [[242, "sympy.utilities.autowrap.ufuncify"]], "argument (class in sympy.utilities.codegen)": [[243, "sympy.utilities.codegen.Argument"]], "ccodegen (class in sympy.utilities.codegen)": [[243, "sympy.utilities.codegen.CCodeGen"]], "codegen (class in sympy.utilities.codegen)": [[243, "sympy.utilities.codegen.CodeGen"]], "datatype (class in sympy.utilities.codegen)": [[243, "sympy.utilities.codegen.DataType"]], "fcodegen (class in sympy.utilities.codegen)": [[243, "sympy.utilities.codegen.FCodeGen"]], "juliacodegen (class in sympy.utilities.codegen)": [[243, "sympy.utilities.codegen.JuliaCodeGen"]], "octavecodegen (class in sympy.utilities.codegen)": [[243, "sympy.utilities.codegen.OctaveCodeGen"]], "outputargument (class in sympy.utilities.codegen)": [[243, "sympy.utilities.codegen.OutputArgument"]], "result (class in sympy.utilities.codegen)": [[243, "sympy.utilities.codegen.Result"]], "routine (class in sympy.utilities.codegen)": [[243, "sympy.utilities.codegen.Routine"]], "rustcodegen (class in sympy.utilities.codegen)": [[243, "sympy.utilities.codegen.RustCodeGen"]], "codegen() (in module sympy.utilities.codegen)": [[243, "sympy.utilities.codegen.codegen"]], "dump_c() (sympy.utilities.codegen.ccodegen method)": [[243, "sympy.utilities.codegen.CCodeGen.dump_c"]], "dump_code() (sympy.utilities.codegen.codegen method)": [[243, "sympy.utilities.codegen.CodeGen.dump_code"]], "dump_f95() (sympy.utilities.codegen.fcodegen method)": [[243, "sympy.utilities.codegen.FCodeGen.dump_f95"]], "dump_h() (sympy.utilities.codegen.ccodegen method)": [[243, "sympy.utilities.codegen.CCodeGen.dump_h"]], "dump_h() (sympy.utilities.codegen.fcodegen method)": [[243, "sympy.utilities.codegen.FCodeGen.dump_h"]], "dump_jl() (sympy.utilities.codegen.juliacodegen method)": [[243, "sympy.utilities.codegen.JuliaCodeGen.dump_jl"]], "dump_m() (sympy.utilities.codegen.octavecodegen method)": [[243, "sympy.utilities.codegen.OctaveCodeGen.dump_m"]], "dump_rs() (sympy.utilities.codegen.rustcodegen method)": [[243, "sympy.utilities.codegen.RustCodeGen.dump_rs"]], "get_default_datatype() (in module sympy.utilities.codegen)": [[243, "sympy.utilities.codegen.get_default_datatype"]], "get_interface() (sympy.utilities.codegen.fcodegen method)": [[243, "sympy.utilities.codegen.FCodeGen.get_interface"]], "get_prototype() (sympy.utilities.codegen.ccodegen method)": [[243, "sympy.utilities.codegen.CCodeGen.get_prototype"]], "get_prototype() (sympy.utilities.codegen.rustcodegen method)": [[243, "sympy.utilities.codegen.RustCodeGen.get_prototype"]], "make_routine() (in module sympy.utilities.codegen)": [[243, "sympy.utilities.codegen.make_routine"]], "result_variables (sympy.utilities.codegen.routine property)": [[243, "sympy.utilities.codegen.Routine.result_variables"]], "routine() (sympy.utilities.codegen.codegen method)": [[243, "sympy.utilities.codegen.CodeGen.routine"]], "routine() (sympy.utilities.codegen.juliacodegen method)": [[243, "sympy.utilities.codegen.JuliaCodeGen.routine"]], "routine() (sympy.utilities.codegen.octavecodegen method)": [[243, "sympy.utilities.codegen.OctaveCodeGen.routine"]], "routine() (sympy.utilities.codegen.rustcodegen method)": [[243, "sympy.utilities.codegen.RustCodeGen.routine"]], "sympy.utilities.codegen": [[243, "module-sympy.utilities.codegen"]], "variables (sympy.utilities.codegen.routine property)": [[243, "sympy.utilities.codegen.Routine.variables"]], "write() (sympy.utilities.codegen.codegen method)": [[243, "sympy.utilities.codegen.CodeGen.write"]], "conserve_mpmath_dps() (in module sympy.utilities.decorator)": [[244, "sympy.utilities.decorator.conserve_mpmath_dps"]], "deprecated() (in module sympy.utilities.decorator)": [[244, "sympy.utilities.decorator.deprecated"]], "doctest_depends_on() (in module sympy.utilities.decorator)": [[244, "sympy.utilities.decorator.doctest_depends_on"]], "memoize_property() (in module sympy.utilities.decorator)": [[244, "sympy.utilities.decorator.memoize_property"]], "no_attrs_in_subclass (class in sympy.utilities.decorator)": [[244, "sympy.utilities.decorator.no_attrs_in_subclass"]], "public() (in module sympy.utilities.decorator)": [[244, "sympy.utilities.decorator.public"]], "sympy.utilities.decorator": [[244, "module-sympy.utilities.decorator"]], "threaded() (in module sympy.utilities.decorator)": [[244, "sympy.utilities.decorator.threaded"]], "threaded_factory() (in module sympy.utilities.decorator)": [[244, "sympy.utilities.decorator.threaded_factory"]], "xthreaded() (in module sympy.utilities.decorator)": [[244, "sympy.utilities.decorator.xthreaded"]], "multisetpartitiontraverser (class in sympy.utilities.enumerative)": [[245, "sympy.utilities.enumerative.MultisetPartitionTraverser"]], "count_partitions() (sympy.utilities.enumerative.multisetpartitiontraverser method)": [[245, "sympy.utilities.enumerative.MultisetPartitionTraverser.count_partitions"]], "enum_all() (sympy.utilities.enumerative.multisetpartitiontraverser method)": [[245, "sympy.utilities.enumerative.MultisetPartitionTraverser.enum_all"]], "enum_large() (sympy.utilities.enumerative.multisetpartitiontraverser method)": [[245, "sympy.utilities.enumerative.MultisetPartitionTraverser.enum_large"]], "enum_range() (sympy.utilities.enumerative.multisetpartitiontraverser method)": [[245, "sympy.utilities.enumerative.MultisetPartitionTraverser.enum_range"]], "enum_small() (sympy.utilities.enumerative.multisetpartitiontraverser method)": [[245, "sympy.utilities.enumerative.MultisetPartitionTraverser.enum_small"]], "factoring_visitor() (in module sympy.utilities.enumerative)": [[245, "sympy.utilities.enumerative.factoring_visitor"]], "list_visitor() (in module sympy.utilities.enumerative)": [[245, "sympy.utilities.enumerative.list_visitor"]], "multiset_partitions_taocp() (in module sympy.utilities.enumerative)": [[245, "sympy.utilities.enumerative.multiset_partitions_taocp"]], "sympy.utilities.enumerative": [[245, "module-sympy.utilities.enumerative"]], "sympydeprecationwarning": [[246, "sympy.utilities.exceptions.SymPyDeprecationWarning"]], "ignore_warnings() (in module sympy.utilities.exceptions)": [[246, "sympy.utilities.exceptions.ignore_warnings"]], "sympy.utilities.exceptions": [[246, "module-sympy.utilities.exceptions"]], "sympy_deprecation_warning() (in module sympy.utilities.exceptions)": [[246, "sympy.utilities.exceptions.sympy_deprecation_warning"]], "sympy.utilities": [[247, "module-sympy.utilities"]], "notiterable (class in sympy.utilities.iterables)": [[248, "sympy.utilities.iterables.NotIterable"]], "binary_partitions() (in module sympy.utilities.iterables)": [[248, "sympy.utilities.iterables.binary_partitions"]], "bracelets() (in module sympy.utilities.iterables)": [[248, "sympy.utilities.iterables.bracelets"]], "capture() (in module sympy.utilities.iterables)": [[248, "sympy.utilities.iterables.capture"]], "common_prefix() (in module sympy.utilities.iterables)": [[248, "sympy.utilities.iterables.common_prefix"]], "common_suffix() (in module sympy.utilities.iterables)": [[248, "sympy.utilities.iterables.common_suffix"]], "connected_components() (in module sympy.utilities.iterables)": [[248, "sympy.utilities.iterables.connected_components"]], "dict_merge() (in module sympy.utilities.iterables)": [[248, "sympy.utilities.iterables.dict_merge"]], "filter_symbols() (in module sympy.utilities.iterables)": [[248, "sympy.utilities.iterables.filter_symbols"]], "flatten() (in module sympy.utilities.iterables)": [[248, "sympy.utilities.iterables.flatten"]], "generate_bell() (in module sympy.utilities.iterables)": [[248, "sympy.utilities.iterables.generate_bell"]], "generate_derangements() (in module sympy.utilities.iterables)": [[248, "sympy.utilities.iterables.generate_derangements"]], "generate_involutions() (in module sympy.utilities.iterables)": [[248, "sympy.utilities.iterables.generate_involutions"]], "generate_oriented_forest() (in module sympy.utilities.iterables)": [[248, "sympy.utilities.iterables.generate_oriented_forest"]], "group() (in module sympy.utilities.iterables)": [[248, "sympy.utilities.iterables.group"]], "has_dups() (in module sympy.utilities.iterables)": [[248, "sympy.utilities.iterables.has_dups"]], "has_variety() (in module sympy.utilities.iterables)": [[248, "sympy.utilities.iterables.has_variety"]], "ibin() (in module sympy.utilities.iterables)": [[248, "sympy.utilities.iterables.ibin"]], "iproduct() (in module sympy.utilities.iterables)": [[248, "sympy.utilities.iterables.iproduct"]], "is_palindromic() (in module sympy.utilities.iterables)": [[248, "sympy.utilities.iterables.is_palindromic"]], "is_sequence() (in module sympy.utilities.iterables)": [[248, "sympy.utilities.iterables.is_sequence"]], "iterable() (in module sympy.utilities.iterables)": [[248, "sympy.utilities.iterables.iterable"]], "kbins() (in module sympy.utilities.iterables)": [[248, "sympy.utilities.iterables.kbins"]], "least_rotation() (in module sympy.utilities.iterables)": [[248, "sympy.utilities.iterables.least_rotation"]], "minlex() (in module sympy.utilities.iterables)": [[248, "sympy.utilities.iterables.minlex"]], "multiset() (in module sympy.utilities.iterables)": [[248, "sympy.utilities.iterables.multiset"]], "multiset_combinations() (in module sympy.utilities.iterables)": [[248, "sympy.utilities.iterables.multiset_combinations"]], "multiset_derangements() (in module sympy.utilities.iterables)": [[248, "sympy.utilities.iterables.multiset_derangements"]], "multiset_partitions() (in module sympy.utilities.iterables)": [[248, "sympy.utilities.iterables.multiset_partitions"]], "multiset_permutations() (in module sympy.utilities.iterables)": [[248, "sympy.utilities.iterables.multiset_permutations"]], "necklaces() (in module sympy.utilities.iterables)": [[248, "sympy.utilities.iterables.necklaces"]], "numbered_symbols() (in module sympy.utilities.iterables)": [[248, "sympy.utilities.iterables.numbered_symbols"]], "ordered_partitions() (in module sympy.utilities.iterables)": [[248, "sympy.utilities.iterables.ordered_partitions"]], "partitions() (in module sympy.utilities.iterables)": [[248, "sympy.utilities.iterables.partitions"]], "permute_signs() (in module sympy.utilities.iterables)": [[248, "sympy.utilities.iterables.permute_signs"]], "postfixes() (in module sympy.utilities.iterables)": [[248, "sympy.utilities.iterables.postfixes"]], "prefixes() (in module sympy.utilities.iterables)": [[248, "sympy.utilities.iterables.prefixes"]], "random_derangement() (in module sympy.utilities.iterables)": [[248, "sympy.utilities.iterables.random_derangement"]], "reshape() (in module sympy.utilities.iterables)": [[248, "sympy.utilities.iterables.reshape"]], "rotate_left() (in module sympy.utilities.iterables)": [[248, "sympy.utilities.iterables.rotate_left"]], "rotate_right() (in module sympy.utilities.iterables)": [[248, "sympy.utilities.iterables.rotate_right"]], "rotations() (in module sympy.utilities.iterables)": [[248, "sympy.utilities.iterables.rotations"]], "roundrobin() (in module sympy.utilities.iterables)": [[248, "sympy.utilities.iterables.roundrobin"]], "runs() (in module sympy.utilities.iterables)": [[248, "sympy.utilities.iterables.runs"]], "sift() (in module sympy.utilities.iterables)": [[248, "sympy.utilities.iterables.sift"]], "signed_permutations() (in module sympy.utilities.iterables)": [[248, "sympy.utilities.iterables.signed_permutations"]], "strongly_connected_components() (in module sympy.utilities.iterables)": [[248, "sympy.utilities.iterables.strongly_connected_components"]], "subsets() (in module sympy.utilities.iterables)": [[248, "sympy.utilities.iterables.subsets"]], "sympy.utilities.iterables": [[248, "module-sympy.utilities.iterables"]], "take() (in module sympy.utilities.iterables)": [[248, "sympy.utilities.iterables.take"]], "topological_sort() (in module sympy.utilities.iterables)": [[248, "sympy.utilities.iterables.topological_sort"]], "unflatten() (in module sympy.utilities.iterables)": [[248, "sympy.utilities.iterables.unflatten"]], "uniq() (in module sympy.utilities.iterables)": [[248, "sympy.utilities.iterables.uniq"]], "variations() (in module sympy.utilities.iterables)": [[248, "sympy.utilities.iterables.variations"]], "implemented_function() (in module sympy.utilities.lambdify)": [[249, "sympy.utilities.lambdify.implemented_function"]], "lambdastr() (in module sympy.utilities.lambdify)": [[249, "sympy.utilities.lambdify.lambdastr"]], "lambdify() (in module sympy.utilities.lambdify)": [[249, "sympy.utilities.lambdify.lambdify"]], "sympy.utilities.lambdify": [[249, "module-sympy.utilities.lambdify"]], "assoc_recurrence_memo() (in module sympy.utilities.memoization)": [[250, "sympy.utilities.memoization.assoc_recurrence_memo"]], "recurrence_memo() (in module sympy.utilities.memoization)": [[250, "sympy.utilities.memoization.recurrence_memo"]], "sympy.utilities.memoization": [[250, "module-sympy.utilities.memoization"]], "as_int() (in module sympy.utilities.misc)": [[251, "sympy.utilities.misc.as_int"]], "debug() (in module sympy.utilities.misc)": [[251, "sympy.utilities.misc.debug"]], "debug_decorator() (in module sympy.utilities.misc)": [[251, "sympy.utilities.misc.debug_decorator"]], "filldedent() (in module sympy.utilities.misc)": [[251, "sympy.utilities.misc.filldedent"]], "find_executable() (in module sympy.utilities.misc)": [[251, "sympy.utilities.misc.find_executable"]], "func_name() (in module sympy.utilities.misc)": [[251, "sympy.utilities.misc.func_name"]], "ordinal() (in module sympy.utilities.misc)": [[251, "sympy.utilities.misc.ordinal"]], "rawlines() (in module sympy.utilities.misc)": [[251, "sympy.utilities.misc.rawlines"]], "replace() (in module sympy.utilities.misc)": [[251, "sympy.utilities.misc.replace"]], "strlines() (in module sympy.utilities.misc)": [[251, "sympy.utilities.misc.strlines"]], "sympy.utilities.misc": [[251, "module-sympy.utilities.misc"]], "translate() (in module sympy.utilities.misc)": [[251, "sympy.utilities.misc.translate"]], "get_resource() (in module sympy.utilities.pkgdata)": [[252, "sympy.utilities.pkgdata.get_resource"]], "sympy.utilities.pkgdata": [[252, "module-sympy.utilities.pkgdata"]], "get_class() (in module sympy.utilities.source)": [[253, "sympy.utilities.source.get_class"]], "get_mod_func() (in module sympy.utilities.source)": [[253, "sympy.utilities.source.get_mod_func"]], "source() (in module sympy.utilities.source)": [[253, "sympy.utilities.source.source"]], "sympy.utilities.source": [[253, "module-sympy.utilities.source"]], "sympy.utilities.timeutils": [[254, "module-sympy.utilities.timeutils"]], "timed() (in module sympy.utilities.timeutils)": [[254, "sympy.utilities.timeutils.timed"]], "coordsys3d (class in sympy.vector.coordsysrect)": [[255, "sympy.vector.coordsysrect.CoordSys3D"]], "del (class in sympy.vector.deloperator)": [[255, "sympy.vector.deloperator.Del"]], "dyadic (class in sympy.vector.dyadic)": [[255, "sympy.vector.dyadic.Dyadic"]], "implicitregion (class in sympy.vector.implicitregion)": [[255, "sympy.vector.implicitregion.ImplicitRegion"]], "parametricintegral (class in sympy.vector.integrals)": [[255, "sympy.vector.integrals.ParametricIntegral"]], "parametricregion (class in sympy.vector.parametricregion)": [[255, "sympy.vector.parametricregion.ParametricRegion"]], "vector (class in sympy.vector.vector)": [[255, "sympy.vector.vector.Vector"]], "__init__() (sympy.vector.coordsysrect.coordsys3d method)": [[255, "sympy.vector.coordsysrect.CoordSys3D.__init__"]], "components (sympy.vector.dyadic.dyadic property)": [[255, "sympy.vector.dyadic.Dyadic.components"]], "components (sympy.vector.vector.vector property)": [[255, "sympy.vector.vector.Vector.components"]], "create_new() (sympy.vector.coordsysrect.coordsys3d method)": [[255, "sympy.vector.coordsysrect.CoordSys3D.create_new"]], "cross() (sympy.vector.deloperator.del method)": [[255, "sympy.vector.deloperator.Del.cross"]], "cross() (sympy.vector.dyadic.dyadic method)": [[255, "sympy.vector.dyadic.Dyadic.cross"]], "cross() (sympy.vector.vector.vector method)": [[255, "sympy.vector.vector.Vector.cross"]], "dot() (sympy.vector.deloperator.del method)": [[255, "sympy.vector.deloperator.Del.dot"]], "dot() (sympy.vector.dyadic.dyadic method)": [[255, "sympy.vector.dyadic.Dyadic.dot"]], "dot() (sympy.vector.vector.vector method)": [[255, "sympy.vector.vector.Vector.dot"]], "gradient() (sympy.vector.deloperator.del method)": [[255, "sympy.vector.deloperator.Del.gradient"]], "locate_new() (sympy.vector.coordsysrect.coordsys3d method)": [[255, "sympy.vector.coordsysrect.CoordSys3D.locate_new"]], "magnitude() (sympy.vector.vector.vector method)": [[255, "sympy.vector.vector.Vector.magnitude"]], "multiplicity() (sympy.vector.implicitregion.implicitregion method)": [[255, "sympy.vector.implicitregion.ImplicitRegion.multiplicity"]], "normalize() (sympy.vector.vector.vector method)": [[255, "sympy.vector.vector.Vector.normalize"]], "orient_new() (sympy.vector.coordsysrect.coordsys3d method)": [[255, "sympy.vector.coordsysrect.CoordSys3D.orient_new"]], "orient_new_axis() (sympy.vector.coordsysrect.coordsys3d method)": [[255, "sympy.vector.coordsysrect.CoordSys3D.orient_new_axis"]], "orient_new_body() (sympy.vector.coordsysrect.coordsys3d method)": [[255, "sympy.vector.coordsysrect.CoordSys3D.orient_new_body"]], "orient_new_quaternion() (sympy.vector.coordsysrect.coordsys3d method)": [[255, "sympy.vector.coordsysrect.CoordSys3D.orient_new_quaternion"]], "orient_new_space() (sympy.vector.coordsysrect.coordsys3d method)": [[255, "sympy.vector.coordsysrect.CoordSys3D.orient_new_space"]], "outer() (sympy.vector.vector.vector method)": [[255, "sympy.vector.vector.Vector.outer"]], "position_wrt() (sympy.vector.coordsysrect.coordsys3d method)": [[255, "sympy.vector.coordsysrect.CoordSys3D.position_wrt"]], "projection() (sympy.vector.vector.vector method)": [[255, "sympy.vector.vector.Vector.projection"]], "rational_parametrization() (sympy.vector.implicitregion.implicitregion method)": [[255, "sympy.vector.implicitregion.ImplicitRegion.rational_parametrization"]], "regular_point() (sympy.vector.implicitregion.implicitregion method)": [[255, "sympy.vector.implicitregion.ImplicitRegion.regular_point"]], "rotation_matrix() (sympy.vector.coordsysrect.coordsys3d method)": [[255, "sympy.vector.coordsysrect.CoordSys3D.rotation_matrix"]], "scalar_map() (sympy.vector.coordsysrect.coordsys3d method)": [[255, "sympy.vector.coordsysrect.CoordSys3D.scalar_map"]], "separate() (sympy.vector.vector.vector method)": [[255, "sympy.vector.vector.Vector.separate"]], "singular_points() (sympy.vector.implicitregion.implicitregion method)": [[255, "sympy.vector.implicitregion.ImplicitRegion.singular_points"]], "to_matrix() (sympy.vector.dyadic.dyadic method)": [[255, "sympy.vector.dyadic.Dyadic.to_matrix"]], "to_matrix() (sympy.vector.vector.vector method)": [[255, "sympy.vector.vector.Vector.to_matrix"]], "axisorienter (class in sympy.vector.orienters)": [[257, "sympy.vector.orienters.AxisOrienter"]], "bodyorienter (class in sympy.vector.orienters)": [[257, "sympy.vector.orienters.BodyOrienter"]], "orienter (class in sympy.vector.orienters)": [[257, "sympy.vector.orienters.Orienter"]], "quaternionorienter (class in sympy.vector.orienters)": [[257, "sympy.vector.orienters.QuaternionOrienter"]], "spaceorienter (class in sympy.vector.orienters)": [[257, "sympy.vector.orienters.SpaceOrienter"]], "__init__() (sympy.vector.orienters.axisorienter method)": [[257, "sympy.vector.orienters.AxisOrienter.__init__"]], "__init__() (sympy.vector.orienters.bodyorienter method)": [[257, "sympy.vector.orienters.BodyOrienter.__init__"]], "__init__() (sympy.vector.orienters.quaternionorienter method)": [[257, "sympy.vector.orienters.QuaternionOrienter.__init__"]], "__init__() (sympy.vector.orienters.spaceorienter method)": [[257, "sympy.vector.orienters.SpaceOrienter.__init__"]], "rotation_matrix() (sympy.vector.orienters.axisorienter method)": [[257, "sympy.vector.orienters.AxisOrienter.rotation_matrix"]], "rotation_matrix() (sympy.vector.orienters.orienter method)": [[257, "sympy.vector.orienters.Orienter.rotation_matrix"]], "curl() (in module sympy.vector)": [[258, "sympy.vector.curl"]], "divergence() (in module sympy.vector)": [[258, "sympy.vector.divergence"]], "express() (in module sympy.vector)": [[258, "sympy.vector.express"]], "gradient() (in module sympy.vector)": [[258, "sympy.vector.gradient"]], "is_conservative() (in module sympy.vector)": [[258, "sympy.vector.is_conservative"]], "is_solenoidal() (in module sympy.vector)": [[258, "sympy.vector.is_solenoidal"]], "matrix_to_vector() (in module sympy.vector)": [[258, "sympy.vector.matrix_to_vector"]], "scalar_potential() (in module sympy.vector)": [[258, "sympy.vector.scalar_potential"]], "scalar_potential_difference() (in module sympy.vector)": [[258, "sympy.vector.scalar_potential_difference"]], "vector_integrate() (in module sympy.vector.integrals)": [[258, "sympy.vector.integrals.vector_integrate"]], "sympy.vector": [[263, "module-sympy.vector"]], "sympy.physics": [[272, "module-sympy.physics"]]}})
Search.setIndex({"docnames": ["citing", "contributing/debug", "contributing/dependencies", "contributing/deprecations", "contributing/docstring", "contributing/documentation-style-guide", "contributing/index", "contributing/introduction-to-contributing", "contributing/new-contributors-guide/build-docs", "contributing/new-contributors-guide/dev-setup", "contributing/new-contributors-guide/index", "contributing/new-contributors-guide/workflow-process", "contributing/new-contributors-guide/writing-tests", "explanation/active-deprecations", "explanation/glossary", "explanation/gotchas", "explanation/index", "explanation/solve_output", "explanation/special_topics/classification", "explanation/special_topics/finite_diff_derivatives", "explanation/special_topics/index", "guides/assumptions", "guides/booleans", "guides/custom-functions", "guides/index", "guides/physics/control_problems", "guides/physics/index", "guides/solving/find-roots-polynomial", "guides/solving/index", "guides/solving/reduce-inequalities-algebraically", "guides/solving/solve-diophantine-equation", "guides/solving/solve-equation-algebraically", "guides/solving/solve-matrix-equation", "guides/solving/solve-numerically", "guides/solving/solve-ode", "guides/solving/solve-system-of-equations-algebraically", "guides/solving/solving-guidance", "index", "install", "modules/abc", "modules/algebras", "modules/assumptions/ask", "modules/assumptions/assume", "modules/assumptions/index", "modules/assumptions/predicates", "modules/assumptions/refine", "modules/calculus/index", "modules/categories", "modules/codegen", "modules/combinatorics/fp_groups", "modules/combinatorics/galois", "modules/combinatorics/graycode", "modules/combinatorics/group_constructs", "modules/combinatorics/group_numbers", "modules/combinatorics/index", "modules/combinatorics/named_groups", "modules/combinatorics/partitions", "modules/combinatorics/pc_groups", "modules/combinatorics/perm_groups", "modules/combinatorics/permutations", "modules/combinatorics/polyhedron", "modules/combinatorics/prufer", "modules/combinatorics/subsets", "modules/combinatorics/tensor_can", "modules/combinatorics/testutil", "modules/combinatorics/util", "modules/concrete", "modules/core", "modules/crypto", "modules/diffgeom", "modules/discrete", "modules/evalf", "modules/functions/combinatorial", "modules/functions/elementary", "modules/functions/index", "modules/functions/special", "modules/geometry/curves", "modules/geometry/ellipses", "modules/geometry/entities", "modules/geometry/index", "modules/geometry/lines", "modules/geometry/plane", "modules/geometry/points", "modules/geometry/polygons", "modules/geometry/utils", "modules/holonomic/about", "modules/holonomic/convert", "modules/holonomic/index", "modules/holonomic/internal", "modules/holonomic/operations", "modules/holonomic/represent", "modules/holonomic/uses", "modules/integrals/g-functions", "modules/integrals/index", "modules/integrals/integrals", "modules/interactive", "modules/liealgebras/index", "modules/logic", "modules/matrices/common", "modules/matrices/dense", "modules/matrices/expressions", "modules/matrices/immutablematrices", "modules/matrices/index", "modules/matrices/matrices", "modules/matrices/normalforms", "modules/matrices/sparse", "modules/matrices/sparsetools", "modules/ntheory", "modules/numeric-computation", "modules/parsing", "modules/physics/continuum_mechanics/beam", "modules/physics/continuum_mechanics/beam_problems", "modules/physics/continuum_mechanics/index", "modules/physics/continuum_mechanics/truss", "modules/physics/control/control", "modules/physics/control/control_plots", "modules/physics/control/index", "modules/physics/control/lti", "modules/physics/hep/index", "modules/physics/hydrogen", "modules/physics/matrices", "modules/physics/mechanics/advanced", "modules/physics/mechanics/api/body", "modules/physics/mechanics/api/expr_manip", "modules/physics/mechanics/api/index", "modules/physics/mechanics/api/joint", "modules/physics/mechanics/api/kane_lagrange", "modules/physics/mechanics/api/linearize", "modules/physics/mechanics/api/part_bod", "modules/physics/mechanics/api/printing", "modules/physics/mechanics/api/system", "modules/physics/mechanics/autolev_parser", "modules/physics/mechanics/examples", "modules/physics/mechanics/examples/bicycle_example", "modules/physics/mechanics/examples/four_bar_linkage_example", "modules/physics/mechanics/examples/lin_pend_nonmin_example", "modules/physics/mechanics/examples/multi_degree_freedom_holonomic_system", "modules/physics/mechanics/examples/rollingdisc_example", "modules/physics/mechanics/examples/rollingdisc_example_kane", "modules/physics/mechanics/examples/rollingdisc_example_kane_constraints", "modules/physics/mechanics/examples/rollingdisc_example_lagrange", "modules/physics/mechanics/index", "modules/physics/mechanics/joints", "modules/physics/mechanics/kane", "modules/physics/mechanics/lagrange", "modules/physics/mechanics/linearize", "modules/physics/mechanics/masses", "modules/physics/mechanics/reference", "modules/physics/mechanics/sympy_mechanics_for_autolev_users", "modules/physics/mechanics/symsystem", "modules/physics/optics/gaussopt", "modules/physics/optics/index", "modules/physics/optics/medium", "modules/physics/optics/polarization", "modules/physics/optics/utils", "modules/physics/optics/waves", "modules/physics/paulialgebra", "modules/physics/qho_1d", "modules/physics/quantum/anticommutator", "modules/physics/quantum/cartesian", "modules/physics/quantum/cg", "modules/physics/quantum/circuitplot", "modules/physics/quantum/commutator", "modules/physics/quantum/constants", "modules/physics/quantum/dagger", "modules/physics/quantum/gate", "modules/physics/quantum/grover", "modules/physics/quantum/hilbert", "modules/physics/quantum/index", "modules/physics/quantum/innerproduct", "modules/physics/quantum/operator", "modules/physics/quantum/operatorset", "modules/physics/quantum/piab", "modules/physics/quantum/qapply", "modules/physics/quantum/qft", "modules/physics/quantum/qubit", "modules/physics/quantum/represent", "modules/physics/quantum/shor", "modules/physics/quantum/spin", "modules/physics/quantum/state", "modules/physics/quantum/tensorproduct", "modules/physics/secondquant", "modules/physics/sho", "modules/physics/units/dimensions", "modules/physics/units/examples", "modules/physics/units/index", "modules/physics/units/philosophy", "modules/physics/units/prefixes", "modules/physics/units/quantities", "modules/physics/units/unitsystem", "modules/physics/vector/advanced", "modules/physics/vector/api/classes", "modules/physics/vector/api/fieldfunctions", "modules/physics/vector/api/functions", "modules/physics/vector/api/index", "modules/physics/vector/api/kinematics", "modules/physics/vector/api/printing", "modules/physics/vector/fields", "modules/physics/vector/index", "modules/physics/vector/kinematics", "modules/physics/vector/vectors", "modules/physics/wigner", "modules/plotting", "modules/polys/agca", "modules/polys/basics", "modules/polys/domainmatrix", "modules/polys/domainsintro", "modules/polys/domainsref", "modules/polys/index", "modules/polys/internals", "modules/polys/literature", "modules/polys/numberfields", "modules/polys/reference", "modules/polys/ringseries", "modules/polys/solvers", "modules/polys/wester", "modules/printing", "modules/rewriting", "modules/series/formal", "modules/series/fourier", "modules/series/index", "modules/series/limitseq", "modules/series/sequences", "modules/series/series", "modules/sets", "modules/simplify/fu", "modules/simplify/hyperexpand", "modules/simplify/index", "modules/simplify/simplify", "modules/solvers/diophantine", "modules/solvers/index", "modules/solvers/inequalities", "modules/solvers/ode", "modules/solvers/pde", "modules/solvers/solvers", "modules/solvers/solveset", "modules/stats", "modules/tensor/array", "modules/tensor/array_expressions", "modules/tensor/index", "modules/tensor/index_methods", "modules/tensor/indexed", "modules/tensor/tensor", "modules/tensor/toperators", "modules/testing/index", "modules/testing/pytest", "modules/testing/randtest", "modules/testing/runtests", "modules/utilities/autowrap", "modules/utilities/codegen", "modules/utilities/decorator", "modules/utilities/enumerative", "modules/utilities/exceptions", "modules/utilities/index", "modules/utilities/iterables", "modules/utilities/lambdify", "modules/utilities/memoization", "modules/utilities/misc", "modules/utilities/pkgdata", "modules/utilities/source", "modules/utilities/timeutils", "modules/vector/api/classes", "modules/vector/api/index", "modules/vector/api/orienterclasses", "modules/vector/api/vectorfunctions", "modules/vector/basics", "modules/vector/coordsys", "modules/vector/examples", "modules/vector/fields", "modules/vector/index", "modules/vector/intro", "modules/vector/vector_integration", "reference/index", "reference/public/basics/index", "reference/public/codegeneration/index", "reference/public/logic/index", "reference/public/matrices/index", "reference/public/numbertheory/index", "reference/public/physics/index", "reference/public/topics/index", "reference/public/utilities/index", "tutorials/index", "tutorials/intro-tutorial/basic_operations", "tutorials/intro-tutorial/calculus", "tutorials/intro-tutorial/features", "tutorials/intro-tutorial/gotchas", "tutorials/intro-tutorial/index", "tutorials/intro-tutorial/intro", "tutorials/intro-tutorial/manipulation", "tutorials/intro-tutorial/matrices", "tutorials/intro-tutorial/next", "tutorials/intro-tutorial/preliminaries", "tutorials/intro-tutorial/printing", "tutorials/intro-tutorial/simplification", "tutorials/intro-tutorial/solvers"], "filenames": ["citing.md", "contributing/debug.rst", "contributing/dependencies.md", "contributing/deprecations.md", "contributing/docstring.rst", "contributing/documentation-style-guide.rst", "contributing/index.md", "contributing/introduction-to-contributing.md", "contributing/new-contributors-guide/build-docs.rst", "contributing/new-contributors-guide/dev-setup.md", "contributing/new-contributors-guide/index.md", "contributing/new-contributors-guide/workflow-process.md", "contributing/new-contributors-guide/writing-tests.md", "explanation/active-deprecations.md", "explanation/glossary.md", "explanation/gotchas.rst", "explanation/index.rst", "explanation/solve_output.rst", "explanation/special_topics/classification.rst", "explanation/special_topics/finite_diff_derivatives.rst", "explanation/special_topics/index.rst", "guides/assumptions.rst", "guides/booleans.rst", "guides/custom-functions.md", "guides/index.rst", "guides/physics/control_problems.rst", "guides/physics/index.rst", "guides/solving/find-roots-polynomial.md", "guides/solving/index.md", "guides/solving/reduce-inequalities-algebraically.md", "guides/solving/solve-diophantine-equation.md", "guides/solving/solve-equation-algebraically.md", "guides/solving/solve-matrix-equation.md", "guides/solving/solve-numerically.md", "guides/solving/solve-ode.md", "guides/solving/solve-system-of-equations-algebraically.md", "guides/solving/solving-guidance.md", "index.rst", "install.md", "modules/abc.rst", "modules/algebras.rst", "modules/assumptions/ask.rst", "modules/assumptions/assume.rst", "modules/assumptions/index.rst", "modules/assumptions/predicates.rst", "modules/assumptions/refine.rst", "modules/calculus/index.rst", "modules/categories.rst", "modules/codegen.rst", "modules/combinatorics/fp_groups.rst", "modules/combinatorics/galois.rst", "modules/combinatorics/graycode.rst", "modules/combinatorics/group_constructs.rst", "modules/combinatorics/group_numbers.rst", "modules/combinatorics/index.rst", "modules/combinatorics/named_groups.rst", "modules/combinatorics/partitions.rst", "modules/combinatorics/pc_groups.rst", "modules/combinatorics/perm_groups.rst", "modules/combinatorics/permutations.rst", "modules/combinatorics/polyhedron.rst", "modules/combinatorics/prufer.rst", "modules/combinatorics/subsets.rst", "modules/combinatorics/tensor_can.rst", "modules/combinatorics/testutil.rst", "modules/combinatorics/util.rst", "modules/concrete.rst", "modules/core.rst", "modules/crypto.rst", "modules/diffgeom.rst", "modules/discrete.rst", "modules/evalf.rst", "modules/functions/combinatorial.rst", "modules/functions/elementary.rst", "modules/functions/index.rst", "modules/functions/special.rst", "modules/geometry/curves.rst", "modules/geometry/ellipses.rst", "modules/geometry/entities.rst", "modules/geometry/index.rst", "modules/geometry/lines.rst", "modules/geometry/plane.rst", "modules/geometry/points.rst", "modules/geometry/polygons.rst", "modules/geometry/utils.rst", "modules/holonomic/about.rst", "modules/holonomic/convert.rst", "modules/holonomic/index.rst", "modules/holonomic/internal.rst", "modules/holonomic/operations.rst", "modules/holonomic/represent.rst", "modules/holonomic/uses.rst", "modules/integrals/g-functions.rst", "modules/integrals/index.rst", "modules/integrals/integrals.rst", "modules/interactive.rst", "modules/liealgebras/index.rst", "modules/logic.rst", "modules/matrices/common.rst", "modules/matrices/dense.rst", "modules/matrices/expressions.rst", "modules/matrices/immutablematrices.rst", "modules/matrices/index.rst", "modules/matrices/matrices.rst", "modules/matrices/normalforms.rst", "modules/matrices/sparse.rst", "modules/matrices/sparsetools.rst", "modules/ntheory.rst", "modules/numeric-computation.rst", "modules/parsing.rst", "modules/physics/continuum_mechanics/beam.rst", "modules/physics/continuum_mechanics/beam_problems.rst", "modules/physics/continuum_mechanics/index.rst", "modules/physics/continuum_mechanics/truss.rst", "modules/physics/control/control.rst", "modules/physics/control/control_plots.rst", "modules/physics/control/index.rst", "modules/physics/control/lti.rst", "modules/physics/hep/index.rst", "modules/physics/hydrogen.rst", "modules/physics/matrices.rst", "modules/physics/mechanics/advanced.rst", "modules/physics/mechanics/api/body.rst", "modules/physics/mechanics/api/expr_manip.rst", "modules/physics/mechanics/api/index.rst", "modules/physics/mechanics/api/joint.rst", "modules/physics/mechanics/api/kane_lagrange.rst", "modules/physics/mechanics/api/linearize.rst", "modules/physics/mechanics/api/part_bod.rst", "modules/physics/mechanics/api/printing.rst", "modules/physics/mechanics/api/system.rst", "modules/physics/mechanics/autolev_parser.rst", "modules/physics/mechanics/examples.rst", "modules/physics/mechanics/examples/bicycle_example.rst", "modules/physics/mechanics/examples/four_bar_linkage_example.rst", "modules/physics/mechanics/examples/lin_pend_nonmin_example.rst", "modules/physics/mechanics/examples/multi_degree_freedom_holonomic_system.rst", "modules/physics/mechanics/examples/rollingdisc_example.rst", "modules/physics/mechanics/examples/rollingdisc_example_kane.rst", "modules/physics/mechanics/examples/rollingdisc_example_kane_constraints.rst", "modules/physics/mechanics/examples/rollingdisc_example_lagrange.rst", "modules/physics/mechanics/index.rst", "modules/physics/mechanics/joints.rst", "modules/physics/mechanics/kane.rst", "modules/physics/mechanics/lagrange.rst", "modules/physics/mechanics/linearize.rst", "modules/physics/mechanics/masses.rst", "modules/physics/mechanics/reference.rst", "modules/physics/mechanics/sympy_mechanics_for_autolev_users.rst", "modules/physics/mechanics/symsystem.rst", "modules/physics/optics/gaussopt.rst", "modules/physics/optics/index.rst", "modules/physics/optics/medium.rst", "modules/physics/optics/polarization.rst", "modules/physics/optics/utils.rst", "modules/physics/optics/waves.rst", "modules/physics/paulialgebra.rst", "modules/physics/qho_1d.rst", "modules/physics/quantum/anticommutator.rst", "modules/physics/quantum/cartesian.rst", "modules/physics/quantum/cg.rst", "modules/physics/quantum/circuitplot.rst", "modules/physics/quantum/commutator.rst", "modules/physics/quantum/constants.rst", "modules/physics/quantum/dagger.rst", "modules/physics/quantum/gate.rst", "modules/physics/quantum/grover.rst", "modules/physics/quantum/hilbert.rst", "modules/physics/quantum/index.rst", "modules/physics/quantum/innerproduct.rst", "modules/physics/quantum/operator.rst", "modules/physics/quantum/operatorset.rst", "modules/physics/quantum/piab.rst", "modules/physics/quantum/qapply.rst", "modules/physics/quantum/qft.rst", "modules/physics/quantum/qubit.rst", "modules/physics/quantum/represent.rst", "modules/physics/quantum/shor.rst", "modules/physics/quantum/spin.rst", "modules/physics/quantum/state.rst", "modules/physics/quantum/tensorproduct.rst", "modules/physics/secondquant.rst", "modules/physics/sho.rst", "modules/physics/units/dimensions.rst", "modules/physics/units/examples.rst", "modules/physics/units/index.rst", "modules/physics/units/philosophy.rst", "modules/physics/units/prefixes.rst", "modules/physics/units/quantities.rst", "modules/physics/units/unitsystem.rst", "modules/physics/vector/advanced.rst", "modules/physics/vector/api/classes.rst", "modules/physics/vector/api/fieldfunctions.rst", "modules/physics/vector/api/functions.rst", "modules/physics/vector/api/index.rst", "modules/physics/vector/api/kinematics.rst", "modules/physics/vector/api/printing.rst", "modules/physics/vector/fields.rst", "modules/physics/vector/index.rst", "modules/physics/vector/kinematics.rst", "modules/physics/vector/vectors.rst", "modules/physics/wigner.rst", "modules/plotting.rst", "modules/polys/agca.rst", "modules/polys/basics.rst", "modules/polys/domainmatrix.rst", "modules/polys/domainsintro.rst", "modules/polys/domainsref.rst", "modules/polys/index.rst", "modules/polys/internals.rst", "modules/polys/literature.rst", "modules/polys/numberfields.rst", "modules/polys/reference.rst", "modules/polys/ringseries.rst", "modules/polys/solvers.rst", "modules/polys/wester.rst", "modules/printing.rst", "modules/rewriting.rst", "modules/series/formal.rst", "modules/series/fourier.rst", "modules/series/index.rst", "modules/series/limitseq.rst", "modules/series/sequences.rst", "modules/series/series.rst", "modules/sets.rst", "modules/simplify/fu.rst", "modules/simplify/hyperexpand.rst", "modules/simplify/index.rst", "modules/simplify/simplify.rst", "modules/solvers/diophantine.rst", "modules/solvers/index.rst", "modules/solvers/inequalities.rst", "modules/solvers/ode.rst", "modules/solvers/pde.rst", "modules/solvers/solvers.rst", "modules/solvers/solveset.rst", "modules/stats.rst", "modules/tensor/array.rst", "modules/tensor/array_expressions.rst", "modules/tensor/index.rst", "modules/tensor/index_methods.rst", "modules/tensor/indexed.rst", "modules/tensor/tensor.rst", "modules/tensor/toperators.rst", "modules/testing/index.rst", "modules/testing/pytest.rst", "modules/testing/randtest.rst", "modules/testing/runtests.rst", "modules/utilities/autowrap.rst", "modules/utilities/codegen.rst", "modules/utilities/decorator.rst", "modules/utilities/enumerative.rst", "modules/utilities/exceptions.rst", "modules/utilities/index.rst", "modules/utilities/iterables.rst", "modules/utilities/lambdify.rst", "modules/utilities/memoization.rst", "modules/utilities/misc.rst", "modules/utilities/pkgdata.rst", "modules/utilities/source.rst", "modules/utilities/timeutils.rst", "modules/vector/api/classes.rst", "modules/vector/api/index.rst", "modules/vector/api/orienterclasses.rst", "modules/vector/api/vectorfunctions.rst", "modules/vector/basics.rst", "modules/vector/coordsys.rst", "modules/vector/examples.rst", "modules/vector/fields.rst", "modules/vector/index.rst", "modules/vector/intro.rst", "modules/vector/vector_integration.rst", "reference/index.rst", "reference/public/basics/index.rst", "reference/public/codegeneration/index.rst", "reference/public/logic/index.rst", "reference/public/matrices/index.rst", "reference/public/numbertheory/index.rst", "reference/public/physics/index.rst", "reference/public/topics/index.rst", "reference/public/utilities/index.rst", "tutorials/index.rst", "tutorials/intro-tutorial/basic_operations.rst", "tutorials/intro-tutorial/calculus.rst", "tutorials/intro-tutorial/features.rst", "tutorials/intro-tutorial/gotchas.rst", "tutorials/intro-tutorial/index.rst", "tutorials/intro-tutorial/intro.rst", "tutorials/intro-tutorial/manipulation.rst", "tutorials/intro-tutorial/matrices.rst", "tutorials/intro-tutorial/next.rst", "tutorials/intro-tutorial/preliminaries.rst", "tutorials/intro-tutorial/printing.rst", "tutorials/intro-tutorial/simplification.rst", "tutorials/intro-tutorial/solvers.rst"], "titles": ["Citing SymPy", "Debugging", "Dependencies", "Deprecation Policy", "SymPy Docstrings Style Guide", "Docstring Style Guide", "Contributing", "Introduction to Contributing", "Building the Documentation", "Setup Development Environment", "Guide for New Contributors", "Development Workflow Process", "Writing Tests", "List of active deprecations", "Glossary", "Gotchas and Pitfalls", "Explanations", "Solve Output by Type", "Classification of SymPy objects", "Finite Difference Approximations to Derivatives", "SymPy Special Topics", "Assumptions", "Symbolic and fuzzy booleans", "Writing Custom Functions", "How-to Guides", "Control Package Examples", "Physics", "Find the Roots of a Polynomial Algebraically or Numerically", "Solve Equations", "Reduce One or a System of Inequalities for a Single Variable Algebraically", "Solve a Diophantine Equation Algebraically", "Solve an Equation Algebraically", "Solve a Matrix Equation Algebraically", "Solve One or a System of Equations Numerically", "Solve an Ordinary Differential Equation (ODE) Algebraically", "Solve a System of Equations Algebraically", "Solving Guidance", "Welcome to SymPy\u2019s documentation!", "Installation", "abc", "Algebras", "Ask", "Assume", "Assumptions", "Predicates", "Refine", "Calculus", "Category Theory", "Code Generation", "Finitely Presented Groups", "Galois Groups", "Gray Code", "Group constructors", "Nilpotent, Abelian and Cyclic Numbers", "Combinatorics", "Named Groups", "Partitions", "Polycyclic Groups", "Permutation Groups", "Permutations", "Polyhedron", "Prufer Sequences", "Subsets", "Tensor Canonicalization", "Test Utilities", "Utilities", "Concrete", "Core", "Cryptography", "Differential Geometry", "Discrete", "Numerical Evaluation", "Combinatorial", "Elementary", "Functions", "Special", "Curves", "Ellipses", "Entities", "Geometry", "Lines", "Plane", "Points", "Polygons", "Utils", "About Holonomic Functions", "Converting other representations to holonomic", "Holonomic", "Internal API", "Operations on holonomic functions", "Representation of holonomic functions in SymPy", "Uses and Current limitations", "Computing Integrals using Meijer G-Functions", "Integrals", "Integrals", "Interactive", "Lie Algebra", "Logic", "Common Matrices", "Dense Matrices", "Matrix Expressions", "Immutable Matrices", "Matrices", "Matrices (linear algebra)", "Matrix Normal Forms", "Sparse Matrices", "Sparse Tools", "Number Theory", "Numeric Computation", "Parsing", "Beam (Docstrings)", "Solving Beam Bending Problems using Singularity Functions", "Continuum Mechanics", "Truss (Docstrings)", "Control", "Control System Plots", "Control Module", "Control API", "High energy physics", "Hydrogen Wavefunctions", "Matrices", "Potential Issues/Advanced Topics/Future Features in Physics/Mechanics", "Body (Docstrings)", "Expression Manipulation (Docstrings)", "Mechanics API Reference", "Joints Framework (Docstrings)", "Kane\u2019s Method &amp; Lagrange\u2019s Method (Docstrings)", "Linearization (Docstrings)", "Bodies, Inertias, Loads &amp; Other Functions (Docstrings)", "Printing (Docstrings)", "SymbolicSystem (Docstrings)", "Autolev Parser", "Examples for Physics/Mechanics", "A bicycle", "A four bar linkage", "Nonminimal Coordinates Pendulum", "Multi Degree of Freedom Holonomic System", "A rolling disc", "A rolling disc, with Kane\u2019s method", "A rolling disc, with Kane\u2019s method and constraint forces", "A rolling disc using Lagrange\u2019s Method", "Classical Mechanics", "Joints Framework in Physics/Mechanics", "Kane\u2019s Method in Physics/Mechanics", "Lagrange\u2019s Method in Physics/Mechanics", "Linearization in Physics/Mechanics", "Masses, Inertias, Particles and Rigid Bodies in Physics/Mechanics", "References for Physics/Mechanics", "SymPy Mechanics for Autolev Users", "Symbolic Systems in Physics/Mechanics", "Gaussian Optics", "Optics Module", "Medium", "Polarization", "Utilities", "Waves", "Pauli Algebra", "Quantum Harmonic Oscillator in 1-D", "Anticommutator", "Cartesian Operators and States", "Clebsch-Gordan Coefficients", "Circuit Plot", "Commutator", "Constants", "Dagger", "Gates", "Grover\u2019s Algorithm", "Hilbert Space", "Quantum Mechanics", "Inner Product", "Operator", "Operator/State Helper Functions", "Particle in a Box", "Qapply", "QFT", "Qubit", "Represent", "Shor\u2019s Algorithm", "Spin", "State", "Tensor Product", "Second Quantization", "Quantum Harmonic Oscillator in 3-D", "Dimensions and dimension systems", "More examples", "Unit systems", "Philosophy behind unit systems", "Unit prefixes", "Physical quantities", "Units and unit systems", "Potential Issues/Advanced Topics/Future Features in Physics/Vector Module", "Essential Classes", "Docstrings for basic field functions", "Essential Functions (Docstrings)", "Physics Vector API", "Kinematics (Docstrings)", "Printing (Docstrings)", "Scalar and Vector Field Functionality", "The Physics Vector Module", "Vector: Kinematics", "Vector &amp; ReferenceFrame", "Wigner Symbols", "Plotting", "AGCA - Algebraic Geometry and Commutative Algebra Module", "Basic functionality of the module", "Introducing the domainmatrix of the poly module", "Introducing the Domains of the poly module", "Reference docs for the Poly Domains", "Polynomial Manipulation", "Internals of the Polynomial Manipulation Module", "Literature", "Number Fields", "Polynomials Manipulation Module Reference", "Series Manipulation using Polynomials", "Poly solvers", "Examples from Wester\u2019s Article", "Printing", "Term Rewriting", "Formal Power Series", "Fourier Series", "Series", "Limits of Sequences", "Sequences", "Series Expansions", "Sets", "Hongguang Fu\u2019s Trigonometric Simplification", "Hypergeometric Expansion", "Simplify", "Simplify", "Diophantine", "Solvers", "Inequality Solvers", "ODE", "PDE", "Solvers", "Solveset", "Stats", "N-dim array", "N-dim array expressions", "Tensor", "Methods", "Indexed Objects", "Tensor", "Tensor Operators", "Testing", "pytest", "Randomised Testing", "Run Tests", "Autowrap Module", "Codegen", "Decorator", "Enumerative", "Exceptions and Warnings", "Utilities", "Iterables", "Lambdify", "Memoization", "Miscellaneous", "PKGDATA", "Source Code Inspection", "Timing Utilities", "Essential Classes in sympy.vector (docstrings)", "Vector API", "Orienter classes (docstrings)", "Essential Functions in sympy.vector (docstrings)", "Basic Implementation details", "More about Coordinate Systems", "General examples of usage", "Scalar and Vector Field Functionality", "Vector", "Introduction", "Applications of Vector Integrals", "API Reference", "Basics", "Code Generation", "Logic", "Matrices", "Number Theory", "Physics", "Topics", "Utilities", "Tutorials", "Basic Operations", "Calculus", "SymPy Features", "Gotchas", "Introductory Tutorial", "Introduction", "Advanced Expression Manipulation", "Matrices", "What\u2019s Next", "Preliminaries", "Printing", "Simplification", "Solvers"], "terms": {"To": [0, 1, 2, 3, 4, 5, 8, 9, 11, 12, 13, 14, 15, 19, 22, 23, 25, 29, 30, 31, 33, 34, 35, 36, 38, 39, 42, 43, 46, 47, 48, 49, 57, 58, 59, 63, 66, 67, 68, 69, 71, 72, 73, 74, 75, 80, 90, 92, 94, 96, 97, 98, 100, 103, 107, 109, 110, 111, 115, 117, 118, 120, 122, 125, 126, 130, 144, 145, 146, 148, 158, 162, 175, 184, 186, 197, 200, 202, 204, 206, 207, 209, 211, 212, 213, 215, 216, 223, 224, 226, 229, 232, 233, 234, 235, 236, 237, 240, 241, 245, 247, 248, 251, 252, 254, 255, 261, 263, 265, 266, 268, 270, 271, 282, 283, 285, 286, 288, 289, 292, 293, 294], "public": [0, 4, 11, 12, 48, 67, 68, 89, 206, 207, 209, 210, 214, 229, 232, 236, 250, 261], "us": [0, 1, 3, 4, 8, 9, 10, 11, 12, 14, 15, 17, 18, 20, 21, 22, 23, 25, 26, 28, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 110, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 141, 142, 143, 144, 148, 149, 150, 153, 154, 156, 158, 160, 161, 162, 165, 167, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 190, 191, 192, 193, 195, 196, 197, 199, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 228, 229, 231, 232, 233, 234, 236, 237, 238, 240, 241, 242, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 261, 264, 265, 267, 268, 270, 271, 273, 278, 279, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294], "meurer": 0, "A": [0, 2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 23, 25, 27, 29, 31, 32, 33, 34, 35, 36, 37, 40, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 89, 90, 92, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 106, 107, 109, 110, 111, 113, 115, 117, 121, 122, 123, 125, 126, 127, 128, 130, 131, 132, 135, 136, 141, 142, 143, 146, 147, 148, 149, 150, 153, 155, 158, 160, 161, 162, 164, 165, 166, 167, 169, 170, 171, 173, 175, 176, 177, 178, 179, 180, 181, 183, 185, 186, 187, 189, 190, 191, 193, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 228, 229, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 247, 248, 249, 250, 251, 252, 254, 255, 261, 263, 265, 266, 267, 268, 270, 271, 278, 284, 286, 288, 289, 293], "smith": [0, 13, 104, 205], "cp": [0, 59, 108, 204], "paprocki": 0, "m": [0, 8, 9, 11, 12, 13, 15, 19, 21, 23, 25, 38, 40, 44, 48, 49, 55, 56, 58, 59, 63, 66, 67, 68, 69, 70, 72, 75, 77, 79, 83, 84, 92, 94, 96, 98, 99, 100, 101, 103, 104, 106, 107, 109, 110, 111, 113, 117, 119, 120, 122, 125, 126, 127, 128, 130, 131, 135, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 152, 157, 164, 178, 179, 182, 184, 186, 197, 201, 203, 204, 205, 207, 209, 210, 211, 212, 213, 216, 217, 218, 219, 221, 222, 223, 224, 226, 228, 229, 232, 234, 235, 236, 237, 238, 241, 242, 248, 249, 251, 254, 256, 261, 264, 266, 270, 271, 283, 289, 292, 293, 294], "\u010dert\u00edk": 0, "o": [0, 4, 8, 11, 12, 14, 15, 19, 21, 39, 47, 48, 58, 59, 65, 67, 68, 73, 75, 77, 78, 80, 81, 83, 89, 92, 107, 111, 122, 126, 128, 130, 131, 143, 144, 145, 146, 148, 149, 171, 181, 192, 195, 197, 199, 201, 209, 210, 212, 213, 216, 218, 223, 226, 232, 236, 241, 247, 254, 257, 258, 264, 267, 283], "kirpichev": 0, "sb": 0, "rocklin": 0, "kumar": [0, 235], "ivanov": 0, "": [0, 2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 56, 57, 58, 59, 61, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 75, 76, 77, 79, 80, 81, 83, 84, 85, 86, 89, 90, 92, 94, 95, 96, 97, 98, 100, 101, 103, 106, 107, 108, 109, 110, 111, 115, 117, 119, 121, 122, 124, 125, 127, 128, 130, 131, 133, 137, 141, 142, 146, 148, 152, 153, 154, 160, 161, 163, 165, 167, 168, 171, 175, 176, 178, 179, 181, 184, 185, 186, 190, 191, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 216, 217, 218, 219, 222, 223, 224, 226, 227, 228, 229, 231, 232, 233, 236, 242, 247, 248, 249, 250, 251, 252, 254, 255, 257, 261, 263, 267, 268, 270, 273, 278, 279, 281, 282, 283, 285, 286, 287, 288, 289, 293, 294], "moor": [0, 32, 100, 103], "jk": 0, "singh": 0, "rathnayak": 0, "t": [0, 3, 4, 5, 7, 8, 11, 12, 13, 14, 15, 22, 23, 25, 27, 34, 40, 43, 44, 46, 48, 49, 51, 58, 59, 60, 61, 63, 67, 68, 69, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 91, 92, 94, 96, 97, 98, 99, 100, 103, 107, 108, 109, 113, 117, 118, 121, 122, 123, 125, 126, 127, 128, 130, 131, 134, 135, 136, 143, 144, 145, 146, 148, 149, 153, 155, 161, 165, 177, 179, 181, 183, 184, 186, 190, 191, 193, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 215, 216, 219, 223, 224, 225, 226, 228, 229, 232, 233, 234, 235, 236, 237, 238, 242, 245, 247, 250, 254, 255, 261, 264, 266, 270, 282, 283, 287, 288, 289, 292, 293, 294], "vig": 0, "granger": [0, 167], "BE": [0, 12], "muller": 0, "rp": [0, 83, 153], "bonazzi": 0, "f": [0, 4, 8, 11, 12, 13, 14, 15, 19, 23, 25, 27, 30, 31, 33, 34, 46, 47, 48, 49, 50, 57, 58, 59, 63, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 85, 90, 91, 92, 94, 96, 98, 100, 103, 107, 108, 109, 111, 113, 115, 125, 126, 127, 130, 136, 141, 143, 144, 148, 150, 154, 155, 166, 167, 170, 179, 181, 184, 191, 196, 197, 200, 201, 202, 203, 204, 206, 207, 209, 210, 211, 212, 213, 215, 216, 218, 219, 222, 223, 224, 225, 226, 228, 229, 232, 233, 234, 235, 236, 237, 241, 242, 247, 248, 249, 250, 251, 254, 255, 257, 267, 268, 271, 282, 283, 288, 292, 293, 294], "gupta": [0, 235], "h": [0, 15, 19, 46, 47, 48, 49, 50, 51, 58, 63, 66, 67, 68, 72, 75, 89, 92, 94, 98, 99, 103, 104, 109, 117, 125, 128, 146, 150, 153, 165, 167, 170, 175, 179, 186, 201, 202, 203, 204, 205, 209, 210, 211, 212, 215, 216, 224, 228, 232, 234, 235, 236, 237, 242, 249, 271, 283, 292], "vat": 0, "johansson": 0, "pedregosa": 0, "curri": [0, 167], "mj": 0, "terrel": 0, "ar": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 103, 106, 107, 108, 109, 110, 111, 113, 114, 115, 117, 118, 121, 122, 123, 125, 126, 127, 128, 130, 131, 132, 133, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 153, 154, 155, 156, 158, 160, 162, 165, 167, 169, 170, 171, 173, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 195, 196, 197, 199, 201, 202, 203, 204, 205, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 228, 229, 231, 232, 233, 234, 236, 237, 238, 240, 241, 242, 243, 245, 247, 248, 249, 251, 252, 253, 254, 255, 257, 261, 263, 264, 265, 266, 267, 268, 270, 272, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294], "rou\u010dka": 0, "\u0161": 0, "saboo": 0, "fernando": 0, "i": [0, 1, 2, 4, 5, 7, 8, 9, 10, 11, 13, 14, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 110, 111, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 165, 167, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 221, 222, 223, 224, 225, 226, 228, 229, 231, 232, 233, 234, 236, 237, 238, 240, 241, 242, 243, 245, 247, 248, 249, 250, 251, 252, 254, 255, 257, 258, 260, 261, 263, 264, 265, 266, 267, 268, 270, 271, 282, 283, 285, 286, 288, 289, 291, 292, 293, 294], "kulal": 0, "cimrman": 0, "r": [0, 4, 5, 8, 12, 13, 15, 19, 21, 23, 27, 40, 47, 48, 49, 51, 58, 59, 67, 68, 69, 71, 72, 73, 80, 81, 83, 85, 89, 90, 92, 94, 103, 107, 109, 111, 113, 117, 119, 122, 125, 126, 127, 128, 130, 131, 133, 135, 138, 139, 140, 145, 146, 147, 148, 149, 150, 153, 177, 178, 181, 182, 184, 191, 192, 195, 197, 199, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 216, 217, 218, 223, 224, 226, 228, 229, 232, 234, 235, 236, 242, 247, 249, 251, 261, 264, 266, 267, 268, 271, 293], "scopatz": 0, "2017": [0, 7, 201], "symbol": [0, 2, 4, 5, 7, 11, 12, 13, 14, 17, 19, 24, 25, 26, 27, 28, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 57, 59, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 89, 90, 91, 92, 94, 95, 97, 98, 100, 103, 107, 108, 109, 110, 111, 113, 114, 115, 117, 119, 121, 122, 123, 125, 126, 127, 128, 130, 131, 133, 134, 135, 136, 138, 139, 140, 141, 146, 148, 150, 153, 154, 155, 156, 158, 160, 161, 163, 165, 167, 169, 170, 173, 176, 178, 179, 180, 181, 182, 183, 184, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 199, 200, 202, 203, 204, 205, 207, 208, 209, 210, 211, 213, 214, 216, 217, 218, 219, 221, 222, 223, 224, 226, 228, 229, 231, 232, 233, 234, 236, 237, 239, 240, 241, 242, 243, 248, 254, 255, 261, 263, 264, 266, 267, 268, 271, 278, 282, 283, 286, 288, 289, 292, 293, 294], "comput": [0, 2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 19, 21, 22, 23, 25, 27, 28, 31, 32, 33, 38, 40, 46, 48, 49, 50, 51, 56, 58, 59, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 80, 82, 86, 89, 90, 91, 93, 94, 96, 98, 100, 103, 104, 106, 107, 109, 110, 111, 115, 117, 121, 125, 126, 127, 130, 131, 133, 134, 138, 141, 148, 165, 166, 167, 175, 180, 181, 183, 185, 186, 190, 191, 192, 197, 199, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 218, 219, 221, 223, 224, 225, 226, 228, 229, 232, 234, 235, 236, 238, 248, 251, 254, 255, 261, 263, 264, 265, 266, 267, 268, 270, 273, 282, 283, 285, 286, 289, 293], "python": [0, 1, 2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 18, 21, 22, 23, 26, 27, 28, 31, 32, 34, 36, 37, 38, 41, 42, 43, 46, 59, 67, 68, 71, 73, 79, 95, 97, 98, 100, 103, 107, 108, 109, 110, 121, 131, 148, 191, 202, 203, 204, 206, 207, 213, 215, 216, 224, 228, 232, 235, 237, 247, 248, 249, 250, 251, 254, 255, 261, 285, 286, 287, 288, 289, 291, 292, 293], "peerj": [0, 7], "scienc": [0, 59, 92, 103, 147, 148, 203, 210, 225, 226, 283], "3": [0, 3, 5, 7, 9, 11, 12, 13, 15, 17, 19, 21, 22, 23, 27, 29, 30, 31, 32, 33, 34, 36, 38, 40, 41, 43, 44, 45, 46, 48, 49, 51, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 113, 115, 117, 118, 119, 120, 122, 123, 125, 128, 130, 133, 134, 135, 136, 138, 139, 140, 141, 142, 144, 145, 146, 148, 149, 150, 152, 154, 158, 160, 161, 162, 166, 170, 175, 176, 178, 180, 181, 184, 185, 187, 188, 191, 192, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 247, 248, 250, 251, 252, 254, 255, 257, 261, 263, 264, 265, 266, 268, 270, 271, 278, 282, 283, 285, 287, 288, 289, 292, 293, 294], "e103": 0, "http": [0, 2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 21, 23, 38, 40, 42, 43, 44, 46, 47, 48, 50, 51, 55, 56, 58, 59, 60, 61, 66, 67, 68, 69, 70, 71, 72, 73, 75, 77, 79, 83, 84, 85, 89, 92, 94, 95, 96, 97, 98, 100, 103, 107, 110, 115, 117, 119, 120, 150, 152, 153, 154, 156, 157, 158, 162, 163, 164, 167, 169, 170, 179, 181, 191, 193, 196, 198, 201, 205, 207, 210, 212, 215, 216, 219, 221, 223, 224, 225, 228, 229, 232, 235, 236, 248, 249, 250, 252, 254, 255, 257, 261, 263, 267, 269, 271, 289, 292], "doi": [0, 4, 40, 46, 59, 66, 103, 127, 207, 210, 225, 228, 236, 254], "org": [0, 2, 4, 5, 11, 12, 15, 21, 23, 40, 42, 43, 44, 46, 47, 48, 50, 51, 55, 56, 58, 59, 66, 67, 68, 69, 70, 72, 73, 75, 77, 79, 83, 84, 85, 94, 95, 96, 97, 98, 100, 103, 107, 115, 117, 119, 120, 150, 152, 153, 154, 156, 157, 158, 162, 163, 164, 167, 169, 170, 179, 181, 191, 193, 196, 198, 205, 207, 210, 212, 216, 219, 223, 224, 225, 228, 229, 232, 235, 236, 248, 249, 250, 252, 254, 261, 263, 267, 269, 271, 289, 292], "10": [0, 2, 4, 12, 15, 23, 25, 27, 33, 34, 36, 38, 40, 46, 48, 56, 58, 59, 63, 65, 66, 67, 68, 70, 71, 72, 73, 75, 80, 81, 83, 84, 92, 94, 95, 97, 98, 100, 103, 104, 107, 108, 109, 110, 113, 115, 117, 118, 123, 127, 128, 131, 133, 148, 150, 154, 165, 175, 176, 187, 191, 192, 193, 195, 201, 202, 204, 205, 206, 207, 209, 210, 211, 212, 213, 215, 216, 219, 222, 223, 224, 225, 228, 229, 232, 235, 236, 237, 246, 247, 252, 254, 255, 257, 261, 264, 282, 289, 293], "7717": 0, "c": [0, 2, 7, 8, 12, 14, 15, 19, 21, 23, 25, 27, 28, 30, 32, 39, 40, 46, 47, 51, 52, 56, 58, 59, 60, 62, 63, 64, 66, 67, 68, 70, 72, 73, 75, 76, 77, 79, 80, 81, 83, 84, 90, 92, 94, 96, 97, 98, 100, 103, 107, 108, 109, 110, 111, 113, 117, 119, 121, 123, 125, 126, 128, 131, 136, 138, 139, 140, 142, 144, 145, 148, 150, 154, 160, 161, 162, 165, 167, 170, 175, 178, 180, 181, 186, 190, 191, 195, 199, 200, 201, 202, 204, 205, 206, 207, 209, 210, 211, 212, 213, 215, 223, 224, 225, 226, 228, 229, 232, 233, 234, 235, 236, 237, 241, 242, 248, 249, 251, 254, 257, 258, 261, 263, 264, 265, 266, 267, 268, 271, 283, 285, 292, 293, 294], "103": [0, 7, 58], "bibtex": 0, "entri": [0, 11, 32, 44, 49, 57, 59, 65, 68, 79, 92, 96, 98, 99, 100, 106, 126, 128, 131, 133, 146, 153, 205, 209, 211, 212, 226, 236, 255], "latex": [0, 2, 4, 8, 12, 14, 23, 36, 38, 75, 95, 190, 191, 196, 200, 202, 207, 216, 287, 288], "user": [0, 2, 3, 4, 5, 8, 9, 11, 12, 13, 14, 18, 20, 21, 23, 47, 48, 49, 58, 59, 66, 67, 68, 69, 75, 79, 92, 96, 100, 103, 109, 110, 111, 113, 115, 117, 121, 131, 141, 144, 146, 149, 169, 170, 179, 185, 186, 191, 195, 199, 203, 206, 209, 211, 213, 214, 215, 216, 217, 225, 228, 234, 235, 236, 245, 248, 249, 251, 252, 255, 261, 265, 266, 271, 278, 282, 285, 286, 288, 289, 290], "articl": [0, 7, 9, 11, 67, 68, 100, 103, 208, 210, 211, 216, 225, 261, 279, 287], "titl": [0, 4, 5, 34, 202], "author": [0, 4, 7, 107, 167, 211], "aaron": 0, "christoph": [0, 261], "p": [0, 8, 13, 14, 15, 19, 21, 22, 23, 25, 27, 28, 30, 40, 42, 43, 44, 48, 49, 50, 55, 56, 57, 58, 59, 60, 61, 63, 65, 66, 67, 68, 69, 70, 72, 73, 75, 77, 80, 81, 82, 83, 84, 89, 90, 92, 94, 98, 100, 103, 107, 109, 110, 111, 113, 117, 118, 122, 125, 126, 127, 128, 130, 131, 135, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 154, 160, 179, 181, 186, 192, 195, 197, 199, 201, 202, 204, 205, 206, 209, 210, 212, 213, 216, 218, 219, 223, 224, 226, 228, 229, 232, 234, 235, 236, 237, 241, 242, 254, 261, 264, 265, 266, 267, 268, 270, 289, 293], "mateusz": 0, "v": [0, 8, 9, 17, 25, 27, 31, 36, 40, 48, 57, 63, 66, 67, 68, 69, 70, 71, 75, 81, 92, 94, 96, 98, 103, 107, 111, 122, 123, 125, 128, 133, 145, 146, 148, 149, 153, 154, 166, 181, 186, 190, 191, 193, 195, 197, 199, 200, 202, 209, 210, 211, 212, 216, 226, 228, 229, 232, 234, 236, 247, 254, 261, 264, 265, 266, 267, 268, 270], "ert": 0, "k": [0, 5, 12, 15, 17, 21, 23, 25, 30, 40, 46, 47, 48, 49, 51, 53, 57, 58, 61, 62, 65, 66, 67, 68, 70, 71, 72, 73, 75, 85, 92, 94, 97, 98, 100, 103, 107, 117, 125, 126, 130, 136, 143, 145, 148, 155, 169, 170, 173, 177, 179, 181, 190, 197, 201, 203, 205, 206, 209, 210, 211, 212, 213, 216, 218, 219, 221, 222, 223, 224, 225, 226, 228, 229, 232, 234, 236, 237, 238, 240, 241, 242, 243, 247, 251, 254, 261, 263, 264, 265, 266, 267, 268, 270, 271, 292, 293], "ond": 0, "ej": 0, "sergei": 0, "b": [0, 11, 12, 14, 15, 17, 21, 22, 23, 25, 27, 28, 30, 32, 40, 47, 48, 49, 51, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 77, 78, 79, 80, 81, 82, 83, 90, 92, 94, 96, 97, 98, 99, 100, 103, 107, 109, 110, 111, 113, 115, 117, 122, 123, 125, 126, 127, 128, 130, 131, 135, 136, 145, 146, 148, 150, 153, 158, 160, 162, 164, 169, 170, 173, 178, 179, 180, 181, 190, 191, 193, 195, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 216, 218, 219, 221, 222, 223, 224, 225, 226, 228, 229, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 247, 250, 251, 254, 257, 261, 263, 264, 265, 266, 267, 283, 285, 289, 293, 294], "matthew": 0, "amit": [0, 235], "sergiu": 0, "jason": [0, 216], "sartaj": 0, "thilina": 0, "sean": 0, "brian": [0, 167], "e": [0, 2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 21, 22, 23, 25, 28, 32, 33, 36, 38, 39, 40, 44, 46, 47, 48, 49, 56, 57, 58, 59, 60, 63, 65, 66, 67, 68, 69, 71, 72, 73, 75, 77, 79, 80, 81, 82, 83, 84, 89, 90, 92, 94, 96, 97, 98, 103, 107, 109, 110, 111, 113, 117, 118, 122, 125, 126, 128, 130, 131, 144, 145, 148, 149, 150, 153, 160, 161, 165, 170, 171, 173, 176, 178, 180, 181, 186, 187, 191, 196, 197, 200, 201, 202, 203, 204, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 222, 223, 224, 225, 226, 228, 229, 232, 233, 234, 235, 236, 237, 240, 241, 242, 243, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 261, 265, 268, 270, 271, 282, 283, 287, 288, 293], "richard": [0, 107], "francesco": 0, "harsh": [0, 235], "shivam": 0, "fredrik": 0, "fabian": 0, "j": [0, 5, 15, 25, 40, 44, 46, 48, 49, 53, 57, 58, 59, 63, 65, 66, 68, 69, 71, 72, 75, 89, 92, 94, 96, 98, 100, 103, 107, 115, 118, 125, 130, 147, 148, 153, 160, 161, 178, 181, 186, 190, 197, 201, 203, 205, 207, 209, 210, 211, 212, 213, 215, 216, 218, 224, 226, 228, 229, 232, 234, 235, 236, 237, 238, 240, 241, 242, 243, 248, 254, 261, 263, 264, 265, 266, 267, 268, 270, 271], "andi": [0, 147], "rou": 0, "ka": 0, "n": [0, 4, 5, 9, 12, 14, 15, 19, 21, 23, 27, 30, 31, 39, 44, 46, 48, 49, 50, 51, 53, 55, 56, 57, 58, 59, 61, 63, 65, 66, 67, 68, 69, 71, 72, 73, 75, 77, 80, 81, 82, 83, 84, 89, 90, 92, 94, 96, 97, 98, 100, 103, 104, 107, 109, 110, 111, 113, 115, 117, 119, 120, 122, 125, 126, 128, 130, 131, 133, 134, 135, 136, 138, 139, 140, 143, 144, 145, 146, 148, 149, 150, 152, 154, 155, 157, 161, 166, 167, 170, 175, 177, 178, 179, 181, 182, 184, 186, 188, 190, 191, 193, 195, 196, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 215, 216, 218, 219, 221, 222, 223, 224, 225, 226, 228, 229, 232, 234, 235, 236, 239, 241, 242, 245, 248, 254, 256, 257, 261, 263, 264, 265, 266, 270, 276, 283, 289, 292, 293, 294], "ashutosh": 0, "isuru": 0, "sumith": 0, "robert": [0, 236], "anthoni": 0, "year": [0, 3, 4, 13, 185], "month": 0, "jan": [0, 68], "keyword": [0, 3, 4, 12, 13, 14, 17, 23, 47, 48, 49, 58, 59, 67, 68, 71, 72, 80, 82, 83, 84, 98, 103, 107, 110, 115, 117, 126, 143, 144, 175, 181, 196, 202, 204, 206, 207, 209, 211, 212, 215, 216, 217, 223, 228, 229, 234, 241, 247, 248, 250, 252, 254, 255, 257, 266, 289], "algebra": [0, 5, 14, 15, 17, 21, 26, 28, 33, 36, 44, 49, 50, 58, 67, 68, 71, 73, 85, 88, 89, 90, 92, 94, 97, 98, 102, 104, 107, 108, 109, 130, 141, 148, 149, 201, 204, 205, 207, 208, 209, 210, 212, 213, 216, 218, 226, 229, 231, 232, 235, 272, 273, 276, 278, 279, 284, 285, 287, 289], "system": [0, 1, 2, 5, 7, 8, 9, 13, 14, 15, 17, 18, 19, 22, 23, 25, 26, 27, 28, 32, 34, 41, 43, 58, 67, 68, 69, 73, 92, 95, 96, 97, 98, 103, 108, 109, 110, 113, 114, 116, 117, 121, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 138, 140, 141, 142, 143, 144, 145, 146, 148, 159, 160, 175, 178, 179, 181, 184, 188, 191, 195, 196, 197, 199, 200, 201, 203, 204, 206, 207, 208, 209, 210, 211, 214, 215, 216, 224, 225, 231, 235, 236, 247, 248, 261, 263, 264, 267, 269, 271, 276, 278, 285, 287, 289, 293, 294], "abstract": [0, 13, 46, 47, 56, 67, 69, 73, 75, 80, 85, 100, 125, 131, 165, 167, 176, 179, 180, 181, 203, 211, 235, 236, 238, 242, 249, 270], "an": [0, 2, 3, 4, 5, 7, 8, 9, 10, 12, 14, 15, 17, 18, 19, 21, 22, 23, 25, 27, 28, 29, 30, 32, 35, 36, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 115, 117, 118, 119, 121, 122, 125, 126, 127, 128, 130, 133, 135, 141, 143, 145, 146, 148, 149, 152, 153, 154, 158, 160, 161, 162, 164, 165, 166, 167, 169, 170, 171, 174, 175, 176, 178, 179, 181, 182, 183, 185, 190, 191, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 228, 229, 231, 232, 233, 234, 236, 237, 240, 241, 242, 243, 245, 247, 248, 249, 250, 251, 252, 254, 255, 257, 258, 261, 263, 265, 266, 268, 269, 270, 271, 282, 283, 284, 285, 286, 287, 289, 292, 293, 294], "open": [0, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 31, 32, 33, 35, 38, 46, 67, 69, 73, 94, 97, 117, 131, 134, 148, 216, 224, 231, 235, 236, 258, 287, 289], "sourc": [0, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 23, 32, 33, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 86, 88, 89, 90, 92, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 109, 110, 113, 115, 117, 118, 119, 120, 122, 123, 125, 126, 127, 128, 130, 131, 148, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 187, 188, 189, 191, 192, 193, 195, 196, 197, 201, 202, 203, 205, 206, 207, 209, 211, 212, 213, 214, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 263, 264, 268, 280, 287], "written": [0, 2, 4, 5, 11, 12, 14, 21, 23, 44, 48, 55, 58, 59, 63, 67, 72, 75, 79, 85, 90, 92, 96, 97, 106, 107, 135, 141, 148, 181, 197, 198, 199, 200, 203, 204, 212, 216, 219, 223, 226, 229, 232, 249, 268, 270, 286, 287, 288, 293], "pure": [0, 2, 14, 31, 33, 40, 68, 73, 94, 97, 100, 117, 145, 186, 206, 207, 209, 212, 216, 236, 254], "It": [0, 2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 19, 21, 22, 23, 27, 30, 31, 33, 34, 35, 38, 40, 41, 42, 43, 46, 47, 48, 55, 58, 59, 61, 62, 63, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 79, 83, 84, 90, 92, 94, 96, 97, 103, 107, 108, 109, 110, 111, 113, 115, 117, 119, 121, 122, 123, 125, 126, 130, 131, 133, 139, 141, 142, 143, 144, 146, 148, 150, 154, 155, 165, 170, 171, 176, 177, 178, 179, 180, 181, 183, 186, 189, 191, 195, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 216, 219, 223, 224, 225, 226, 228, 229, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 247, 248, 249, 250, 251, 252, 255, 261, 264, 265, 266, 268, 270, 271, 282, 283, 285, 286, 287, 288, 289, 291, 292, 293], "built": [0, 2, 4, 5, 8, 14, 15, 18, 41, 43, 49, 67, 73, 94, 103, 131, 148, 204, 207, 216, 217, 221, 232, 235, 236, 242, 251, 254, 255, 287, 288, 292], "focu": [0, 13, 21, 77, 234, 287], "extens": [0, 2, 4, 5, 7, 12, 21, 23, 58, 67, 72, 73, 79, 83, 94, 103, 128, 148, 204, 206, 207, 209, 210, 211, 212, 216, 226, 228, 232, 234, 235, 248, 249, 258, 286, 293], "eas": [0, 131, 200, 202, 216, 219], "through": [0, 3, 4, 7, 8, 13, 14, 15, 21, 23, 27, 31, 32, 34, 36, 38, 46, 48, 58, 59, 61, 66, 67, 68, 71, 72, 75, 77, 78, 79, 80, 81, 83, 92, 96, 97, 103, 107, 110, 111, 115, 122, 126, 131, 133, 141, 146, 152, 153, 191, 202, 203, 209, 211, 216, 222, 226, 228, 232, 234, 235, 236, 237, 248, 254, 261, 263, 268, 271, 284, 285, 286, 291], "both": [0, 2, 3, 4, 5, 7, 11, 12, 13, 14, 15, 18, 21, 22, 23, 27, 29, 30, 31, 34, 39, 40, 46, 47, 48, 59, 62, 63, 65, 66, 67, 68, 72, 73, 75, 82, 91, 92, 94, 97, 98, 103, 107, 109, 110, 111, 117, 122, 125, 126, 128, 130, 133, 135, 136, 142, 145, 153, 154, 165, 171, 178, 181, 185, 186, 191, 195, 199, 200, 202, 203, 204, 206, 207, 209, 211, 212, 214, 215, 216, 218, 223, 224, 225, 226, 228, 229, 232, 234, 235, 237, 241, 247, 249, 254, 255, 261, 263, 283, 286, 287, 288, 293, 294], "interact": [0, 11, 14, 17, 31, 39, 67, 81, 94, 101, 103, 148, 178, 196, 200, 206, 207, 228, 236, 252, 259, 272, 280, 285, 287, 288, 292, 293], "programmat": [0, 14, 17, 18, 35, 36, 235, 266], "applic": [0, 5, 13, 28, 31, 49, 50, 51, 57, 58, 59, 60, 67, 68, 73, 94, 98, 103, 107, 110, 113, 125, 126, 130, 131, 141, 145, 147, 148, 165, 166, 191, 195, 199, 204, 205, 209, 210, 211, 212, 216, 218, 223, 229, 232, 235, 249, 254, 261, 268, 269, 276, 287], "These": [0, 2, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 36, 37, 39, 47, 48, 58, 66, 67, 68, 69, 75, 92, 94, 97, 103, 107, 109, 111, 117, 125, 126, 127, 133, 135, 139, 145, 148, 171, 176, 177, 185, 191, 192, 197, 199, 200, 203, 204, 205, 206, 207, 209, 212, 216, 226, 229, 232, 233, 235, 236, 238, 243, 247, 248, 249, 254, 268, 283, 286, 289, 292, 293], "characterist": [0, 69, 85, 103, 199, 205, 207, 209, 210, 232, 234, 289], "have": [0, 3, 4, 5, 7, 8, 9, 10, 11, 12, 14, 15, 18, 19, 21, 22, 23, 25, 27, 29, 30, 32, 33, 34, 36, 38, 40, 42, 43, 44, 46, 47, 48, 49, 50, 51, 57, 58, 59, 60, 63, 65, 66, 67, 68, 69, 71, 72, 73, 75, 77, 78, 82, 83, 85, 90, 91, 92, 94, 96, 97, 98, 99, 100, 103, 106, 107, 108, 109, 110, 111, 115, 117, 118, 120, 121, 125, 126, 127, 128, 130, 131, 132, 133, 139, 141, 145, 146, 148, 165, 167, 170, 174, 176, 178, 179, 180, 181, 183, 184, 186, 189, 190, 191, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 216, 218, 219, 221, 223, 224, 225, 226, 228, 229, 232, 234, 235, 236, 237, 238, 240, 242, 243, 245, 246, 247, 249, 250, 251, 254, 255, 257, 261, 263, 265, 266, 267, 268, 271, 282, 283, 285, 286, 287, 288, 289, 292, 293, 294], "led": 0, "becom": [0, 3, 4, 5, 11, 12, 13, 14, 15, 19, 21, 58, 63, 66, 67, 68, 71, 90, 95, 103, 109, 130, 196, 199, 203, 204, 206, 213, 216, 219, 225, 232, 235, 236, 242, 255, 257, 264, 266, 293], "popular": [0, 2, 68, 108, 148, 287], "librari": [0, 2, 3, 4, 12, 13, 14, 21, 23, 33, 37, 38, 48, 67, 68, 72, 92, 94, 95, 103, 108, 121, 130, 131, 148, 185, 202, 206, 207, 236, 247, 248, 249, 254, 255, 282, 285, 286, 287], "scientif": [0, 14, 38, 67, 148], "ecosystem": 0, "thi": [0, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 107, 108, 109, 110, 111, 113, 114, 115, 117, 118, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 152, 153, 154, 155, 156, 158, 160, 161, 162, 164, 165, 167, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 190, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 240, 241, 242, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 259, 261, 263, 264, 265, 266, 267, 268, 269, 270, 272, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294], "paper": [0, 4, 107, 133, 200, 211, 212, 225, 226, 229, 232], "present": [0, 2, 5, 13, 14, 15, 19, 46, 47, 51, 54, 58, 59, 61, 65, 67, 70, 94, 103, 107, 110, 113, 115, 117, 126, 130, 133, 181, 183, 191, 193, 196, 197, 202, 203, 209, 210, 211, 215, 216, 229, 235, 249, 255, 258, 264, 265, 266, 270, 273, 294], "architectur": [0, 12, 148, 206, 247], "descript": [0, 3, 4, 5, 13, 28, 37, 47, 49, 57, 75, 94, 107, 153, 171, 178, 189, 199, 200, 201, 216, 240, 247, 249, 251, 252, 272, 290], "its": [0, 2, 3, 4, 5, 7, 12, 13, 14, 15, 17, 19, 21, 22, 23, 27, 29, 30, 31, 32, 33, 34, 36, 40, 42, 43, 44, 47, 48, 49, 51, 55, 57, 58, 59, 66, 67, 68, 69, 72, 73, 75, 77, 79, 83, 85, 92, 94, 95, 97, 98, 100, 103, 107, 109, 110, 111, 113, 117, 121, 122, 125, 126, 128, 130, 131, 133, 134, 135, 141, 142, 145, 146, 148, 149, 154, 160, 166, 167, 169, 170, 175, 176, 179, 181, 185, 186, 188, 191, 192, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 222, 223, 224, 228, 231, 232, 234, 235, 236, 238, 240, 241, 242, 247, 250, 251, 254, 255, 258, 261, 264, 265, 266, 268, 271, 287, 288, 289, 292, 293], "featur": [0, 2, 3, 5, 7, 11, 12, 13, 15, 16, 23, 37, 38, 67, 69, 71, 109, 131, 141, 148, 198, 216, 232, 236, 245, 249, 252, 269, 278, 281, 286, 287, 291, 293], "discuss": [0, 3, 4, 5, 7, 11, 12, 13, 15, 16, 17, 19, 21, 22, 23, 37, 49, 58, 68, 75, 107, 121, 126, 131, 141, 145, 146, 190, 198, 199, 200, 206, 242, 251, 272, 282, 284, 285, 287, 288, 290, 292, 293], "select": [0, 8, 16, 17, 32, 37, 48, 51, 58, 59, 66, 67, 68, 76, 81, 95, 97, 98, 107, 109, 123, 126, 186, 196, 206, 207, 209, 210, 212, 216, 225, 228, 234], "submodul": [0, 2, 3, 4, 11, 12, 14, 48, 121, 203, 207, 209, 211], "The": [0, 2, 4, 5, 6, 7, 8, 9, 11, 12, 14, 15, 17, 19, 20, 22, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 46, 47, 48, 50, 51, 53, 55, 56, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 108, 109, 110, 111, 113, 114, 115, 117, 118, 119, 121, 122, 123, 125, 126, 127, 128, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 148, 149, 150, 152, 153, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 190, 191, 192, 193, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 245, 247, 248, 249, 250, 251, 252, 254, 255, 257, 258, 261, 263, 264, 265, 266, 269, 270, 271, 278, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294], "supplementari": 0, "materi": [0, 110, 152, 291], "provid": [0, 2, 3, 4, 5, 7, 8, 9, 11, 13, 16, 17, 19, 20, 21, 22, 23, 25, 28, 29, 33, 37, 40, 46, 47, 48, 49, 50, 56, 57, 58, 59, 65, 66, 67, 69, 71, 75, 76, 78, 83, 86, 89, 90, 94, 95, 97, 98, 100, 103, 104, 106, 107, 108, 109, 111, 113, 115, 121, 122, 125, 126, 128, 130, 133, 134, 135, 136, 141, 142, 143, 144, 145, 146, 148, 149, 154, 155, 175, 183, 184, 185, 189, 191, 192, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215, 216, 219, 221, 224, 225, 226, 228, 232, 233, 234, 235, 236, 237, 241, 242, 247, 248, 249, 251, 252, 254, 255, 257, 261, 264, 265, 266, 268, 269, 271, 283, 287, 288, 289, 293], "addit": [0, 2, 3, 5, 9, 12, 13, 14, 15, 17, 19, 38, 40, 48, 57, 58, 59, 66, 67, 73, 75, 79, 85, 87, 91, 92, 94, 95, 97, 100, 103, 109, 114, 115, 117, 121, 122, 126, 145, 149, 167, 179, 180, 183, 190, 196, 199, 200, 201, 202, 203, 204, 205, 206, 209, 211, 212, 216, 222, 225, 226, 228, 229, 232, 233, 234, 235, 236, 247, 248, 249, 251, 252, 254, 255, 257, 265, 285, 287, 288, 289, 292, 293], "exampl": [0, 1, 2, 3, 5, 7, 12, 13, 14, 15, 17, 18, 19, 21, 22, 26, 28, 31, 32, 34, 36, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 89, 90, 92, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109, 110, 113, 115, 117, 119, 120, 122, 123, 125, 126, 128, 130, 131, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 146, 148, 150, 152, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 173, 175, 176, 178, 179, 180, 181, 182, 183, 187, 188, 190, 191, 192, 193, 195, 196, 197, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 217, 218, 219, 221, 222, 224, 225, 228, 229, 231, 232, 233, 234, 235, 240, 242, 243, 245, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 261, 263, 264, 266, 268, 269, 270, 271, 276, 278, 279, 282, 283, 284, 285, 286, 288, 289, 291, 292, 294], "further": [0, 2, 11, 21, 23, 27, 43, 47, 68, 73, 75, 79, 92, 94, 99, 100, 103, 109, 110, 114, 115, 122, 125, 126, 146, 153, 199, 201, 202, 203, 209, 211, 212, 225, 226, 228, 232, 236, 242, 286, 287], "outlin": [0, 2, 3, 11, 21, 23, 65, 94, 203, 232], "detail": [0, 2, 3, 4, 5, 6, 9, 11, 12, 13, 14, 16, 18, 21, 23, 37, 47, 58, 67, 69, 72, 74, 75, 92, 93, 94, 95, 103, 107, 115, 125, 126, 131, 146, 148, 153, 171, 175, 191, 193, 201, 202, 203, 209, 211, 218, 223, 228, 229, 230, 232, 233, 236, 241, 242, 247, 250, 252, 255, 266, 267, 268, 269, 272, 276, 283, 285, 289, 290, 292], "volum": [0, 4, 48, 66, 75, 92, 94, 201, 210, 226, 229, 232, 251, 261], "page": [0, 2, 3, 4, 5, 7, 8, 11, 12, 13, 14, 15, 21, 22, 27, 28, 30, 31, 35, 37, 48, 49, 50, 66, 72, 92, 107, 108, 125, 126, 148, 186, 202, 205, 206, 207, 210, 216, 226, 229, 252, 270, 293], "journal": [0, 4, 7, 40, 66, 72, 107, 118, 210, 228, 251, 254], "issn": 0, "2376": 0, "5992": 0, "url": [0, 68, 252], "bsd": [0, 2, 8, 287], "licens": [0, 2, 8, 287], "so": [0, 2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 18, 19, 21, 22, 23, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 51, 55, 56, 58, 59, 61, 63, 65, 67, 68, 71, 73, 75, 77, 79, 80, 81, 83, 89, 90, 91, 92, 94, 95, 96, 97, 98, 100, 103, 104, 107, 109, 110, 111, 117, 121, 125, 126, 130, 131, 133, 135, 141, 142, 143, 145, 146, 148, 149, 154, 165, 167, 175, 177, 178, 179, 181, 183, 185, 186, 190, 191, 200, 201, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215, 216, 217, 218, 223, 224, 225, 226, 228, 229, 231, 232, 233, 234, 235, 236, 240, 241, 245, 247, 248, 251, 252, 254, 255, 257, 267, 271, 282, 283, 285, 287, 288, 289, 292, 293, 294], "you": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 22, 23, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 42, 43, 44, 46, 48, 49, 50, 58, 59, 66, 67, 68, 69, 71, 73, 74, 75, 79, 81, 83, 85, 86, 91, 92, 94, 95, 97, 98, 100, 101, 103, 104, 107, 108, 109, 117, 119, 120, 121, 125, 126, 127, 128, 130, 131, 132, 142, 143, 145, 146, 148, 170, 175, 176, 179, 181, 185, 190, 191, 193, 197, 199, 200, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 216, 217, 219, 223, 224, 228, 229, 232, 233, 234, 235, 236, 237, 240, 241, 242, 245, 247, 248, 249, 250, 252, 254, 255, 258, 265, 266, 267, 268, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 293, 294], "free": [0, 9, 11, 12, 13, 14, 27, 32, 33, 38, 46, 47, 48, 57, 58, 63, 67, 79, 94, 98, 100, 103, 107, 110, 111, 115, 118, 125, 128, 141, 150, 170, 188, 191, 198, 202, 203, 207, 209, 211, 212, 216, 218, 224, 226, 228, 229, 232, 234, 235, 242, 254, 287], "howev": [0, 2, 3, 4, 5, 8, 11, 12, 13, 14, 15, 17, 19, 21, 22, 23, 27, 30, 31, 34, 41, 43, 48, 50, 58, 59, 63, 66, 67, 68, 69, 72, 73, 75, 77, 92, 94, 97, 98, 103, 107, 108, 109, 110, 113, 125, 126, 128, 130, 131, 145, 149, 181, 200, 201, 202, 203, 204, 206, 207, 209, 211, 212, 213, 215, 216, 217, 223, 224, 225, 226, 228, 232, 233, 234, 235, 247, 248, 255, 265, 266, 270, 282, 285, 287, 289, 293, 294], "like": [0, 1, 2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 18, 21, 22, 23, 32, 34, 35, 36, 37, 38, 48, 49, 50, 52, 58, 59, 66, 67, 68, 71, 72, 73, 75, 77, 87, 90, 94, 95, 97, 98, 100, 101, 102, 103, 107, 108, 109, 113, 117, 121, 125, 131, 133, 142, 145, 148, 149, 163, 165, 175, 176, 179, 180, 181, 185, 186, 190, 191, 195, 197, 199, 202, 203, 204, 206, 207, 208, 209, 211, 212, 214, 215, 216, 219, 223, 224, 225, 226, 228, 229, 232, 233, 234, 235, 236, 237, 238, 240, 242, 243, 245, 247, 248, 249, 250, 254, 255, 257, 258, 265, 266, 268, 270, 282, 283, 285, 286, 287, 288, 289, 293], "academ": [0, 47, 51, 210], "commerci": [0, 287], "creat": [0, 2, 4, 5, 7, 8, 12, 14, 21, 22, 29, 30, 31, 32, 34, 35, 36, 40, 42, 47, 48, 49, 56, 58, 59, 67, 68, 69, 71, 73, 74, 75, 77, 79, 80, 82, 83, 88, 90, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 107, 108, 109, 110, 113, 117, 122, 125, 126, 128, 130, 131, 134, 135, 136, 138, 140, 142, 144, 145, 146, 148, 149, 158, 160, 162, 166, 169, 170, 171, 175, 176, 178, 179, 181, 184, 187, 190, 191, 193, 195, 199, 200, 202, 203, 205, 206, 207, 209, 211, 212, 213, 216, 223, 228, 232, 235, 236, 237, 241, 242, 247, 248, 249, 251, 252, 254, 255, 261, 266, 268, 283, 285, 288, 289, 292, 293, 294], "fork": [0, 5, 13, 133], "deriv": [0, 4, 11, 12, 13, 14, 20, 23, 31, 46, 47, 48, 51, 57, 58, 67, 69, 73, 74, 75, 77, 84, 89, 90, 92, 94, 95, 97, 100, 103, 113, 117, 121, 123, 125, 126, 127, 128, 130, 133, 135, 136, 138, 141, 143, 144, 145, 170, 179, 183, 186, 187, 190, 191, 193, 195, 196, 197, 199, 202, 203, 204, 205, 207, 209, 211, 212, 213, 216, 218, 226, 228, 232, 233, 234, 238, 243, 249, 261, 264, 265, 284, 287, 294], "long": [0, 4, 5, 11, 12, 27, 36, 48, 59, 66, 67, 68, 70, 80, 92, 94, 95, 97, 103, 107, 110, 111, 133, 146, 196, 212, 213, 216, 225, 226, 234, 236, 248, 255, 257, 264, 285, 288], "copi": [0, 8, 9, 11, 12, 13, 15, 21, 49, 59, 60, 67, 83, 103, 107, 108, 205, 207, 209, 211, 215, 216, 223, 234, 247, 254, 257, 292], "statement": [0, 4, 13, 21, 22, 23, 38, 47, 48, 67, 75, 92, 97, 100, 131, 160, 216, 236, 245, 249, 254], "redistribut": [0, 212], "see": [0, 2, 3, 5, 7, 8, 9, 11, 12, 13, 14, 15, 18, 19, 21, 22, 23, 24, 37, 41, 42, 43, 44, 46, 47, 48, 50, 53, 55, 58, 59, 60, 63, 66, 68, 69, 72, 73, 74, 75, 79, 83, 84, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 100, 103, 104, 107, 108, 109, 115, 121, 125, 126, 127, 130, 137, 139, 143, 145, 150, 153, 156, 157, 166, 170, 171, 175, 176, 177, 178, 180, 181, 184, 186, 191, 196, 199, 201, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 215, 216, 218, 219, 222, 223, 224, 225, 226, 228, 229, 232, 233, 234, 235, 236, 241, 242, 245, 247, 248, 249, 250, 251, 252, 255, 256, 261, 263, 271, 282, 283, 285, 287, 288, 289, 291, 292, 293, 294], "file": [0, 2, 3, 4, 5, 7, 8, 9, 12, 14, 15, 48, 103, 131, 148, 170, 216, 223, 226, 228, 236, 245, 247, 248, 249, 255, 258], "That": [0, 3, 5, 11, 12, 14, 15, 21, 22, 23, 67, 68, 73, 97, 103, 141, 178, 183, 189, 199, 200, 203, 204, 206, 207, 209, 211, 222, 223, 232, 236, 248, 249, 255, 282, 285, 288, 293], "said": [0, 3, 14, 40, 44, 48, 53, 107, 186, 197, 199, 200, 204, 232, 235, 236, 261, 268], "although": [0, 2, 3, 4, 5, 11, 12, 14, 15, 18, 19, 21, 23, 30, 59, 67, 68, 73, 79, 91, 92, 95, 97, 98, 100, 103, 107, 110, 121, 133, 148, 203, 206, 207, 209, 211, 212, 224, 225, 228, 229, 234, 248, 254, 255, 285, 288, 293], "requir": [0, 2, 4, 5, 7, 9, 11, 12, 13, 14, 15, 23, 32, 36, 38, 48, 58, 67, 68, 70, 71, 75, 77, 78, 80, 81, 84, 86, 97, 103, 106, 107, 108, 109, 110, 115, 121, 122, 125, 126, 128, 130, 131, 133, 135, 142, 146, 155, 178, 190, 191, 193, 201, 202, 203, 205, 206, 207, 209, 211, 213, 216, 219, 225, 226, 229, 232, 234, 235, 236, 240, 247, 248, 249, 250, 252, 254, 255, 264, 265, 266, 289, 291], "conveni": [0, 8, 13, 14, 15, 29, 31, 36, 39, 46, 48, 59, 67, 68, 72, 75, 94, 97, 109, 131, 146, 148, 193, 199, 200, 202, 203, 204, 205, 206, 207, 211, 214, 223, 224, 228, 234, 240, 241, 248, 250, 251, 255, 268, 283, 285], "pleas": [0, 3, 4, 5, 7, 12, 13, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 44, 46, 67, 75, 79, 92, 107, 121, 126, 131, 141, 145, 146, 153, 154, 175, 190, 200, 201, 202, 203, 209, 210, 224, 228, 229, 234, 235, 255, 261, 266, 290, 294], "when": [0, 2, 4, 5, 7, 8, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 25, 27, 31, 33, 34, 35, 38, 40, 41, 42, 43, 44, 46, 47, 48, 49, 51, 58, 59, 60, 65, 66, 67, 68, 69, 71, 72, 73, 75, 76, 77, 79, 80, 81, 82, 83, 84, 91, 94, 95, 97, 98, 99, 103, 107, 108, 109, 113, 115, 117, 118, 121, 125, 128, 130, 131, 133, 139, 141, 142, 143, 144, 145, 146, 149, 154, 155, 160, 165, 166, 170, 173, 175, 183, 184, 185, 190, 196, 199, 200, 202, 203, 204, 206, 207, 209, 211, 212, 213, 215, 216, 217, 218, 222, 223, 224, 225, 226, 228, 229, 232, 233, 234, 235, 236, 238, 240, 241, 245, 247, 248, 249, 250, 252, 254, 255, 257, 258, 260, 265, 283, 285, 287, 288, 293, 294], "your": [0, 2, 3, 4, 5, 8, 12, 13, 15, 23, 27, 28, 29, 30, 32, 34, 35, 36, 38, 42, 67, 68, 94, 95, 103, 108, 109, 117, 121, 125, 143, 145, 200, 202, 216, 223, 228, 232, 235, 236, 254, 255, 283, 287, 289, 290, 292, 293], "work": [0, 2, 3, 4, 8, 9, 11, 12, 13, 14, 15, 18, 19, 21, 22, 23, 27, 33, 38, 41, 43, 46, 47, 48, 50, 58, 59, 60, 67, 68, 71, 75, 92, 94, 96, 97, 98, 100, 103, 104, 107, 109, 121, 125, 131, 133, 142, 146, 148, 161, 165, 170, 174, 175, 176, 177, 180, 183, 193, 200, 201, 202, 203, 204, 205, 206, 207, 209, 211, 212, 216, 223, 224, 225, 226, 228, 229, 232, 234, 235, 236, 242, 247, 248, 249, 251, 254, 255, 256, 257, 265, 266, 285, 286, 287, 288, 289, 292, 293], "also": [0, 2, 3, 5, 7, 8, 9, 11, 12, 13, 14, 15, 17, 19, 21, 22, 23, 25, 27, 28, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 46, 47, 48, 50, 56, 58, 59, 66, 68, 69, 71, 72, 73, 74, 75, 79, 83, 85, 87, 89, 90, 92, 94, 96, 97, 98, 101, 103, 104, 107, 108, 109, 110, 111, 113, 114, 115, 117, 121, 122, 123, 125, 126, 128, 130, 131, 133, 134, 135, 136, 139, 142, 143, 144, 145, 146, 148, 149, 150, 154, 164, 165, 167, 171, 175, 180, 181, 184, 185, 186, 190, 191, 193, 195, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 228, 229, 231, 232, 233, 234, 235, 236, 237, 240, 241, 242, 245, 247, 248, 249, 250, 251, 252, 255, 257, 261, 264, 265, 266, 267, 268, 270, 271, 282, 283, 285, 287, 288, 289, 292, 293, 294], "consid": [0, 3, 5, 12, 13, 14, 15, 18, 21, 22, 23, 25, 36, 40, 44, 47, 48, 56, 59, 62, 66, 67, 68, 70, 71, 72, 73, 75, 77, 79, 83, 91, 92, 94, 95, 96, 97, 98, 100, 103, 107, 117, 121, 122, 128, 132, 143, 149, 171, 178, 181, 185, 186, 192, 196, 197, 199, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 215, 216, 219, 223, 228, 229, 232, 233, 234, 235, 236, 247, 249, 254, 264, 266, 268, 270, 271, 285, 289, 293], "contribut": [0, 2, 3, 4, 5, 9, 10, 12, 38, 83, 107, 126, 136, 139, 206, 209, 211, 232, 271, 290], "all": [0, 2, 3, 4, 5, 8, 9, 11, 12, 13, 14, 15, 17, 19, 21, 22, 23, 32, 36, 37, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 80, 82, 83, 84, 92, 94, 96, 97, 98, 99, 100, 103, 106, 107, 108, 109, 110, 111, 113, 115, 117, 118, 122, 123, 125, 126, 127, 128, 130, 131, 133, 134, 136, 141, 143, 145, 148, 149, 155, 160, 161, 165, 175, 177, 178, 179, 181, 183, 184, 185, 186, 188, 189, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 228, 229, 231, 232, 233, 234, 235, 236, 237, 240, 242, 243, 245, 247, 248, 249, 250, 252, 254, 255, 257, 261, 263, 265, 267, 268, 269, 270, 272, 282, 283, 285, 287, 288, 289, 292, 293, 294], "chang": [0, 4, 5, 7, 8, 12, 14, 15, 21, 38, 47, 48, 49, 58, 59, 63, 66, 67, 68, 71, 72, 73, 75, 81, 82, 92, 94, 97, 103, 107, 109, 110, 113, 117, 125, 128, 130, 131, 133, 138, 155, 166, 176, 186, 187, 190, 197, 199, 200, 201, 202, 203, 204, 205, 209, 212, 213, 216, 223, 224, 225, 226, 228, 231, 232, 234, 235, 236, 237, 247, 254, 255, 266, 268, 282, 285, 288, 292], "back": [0, 23, 30, 31, 33, 47, 48, 63, 66, 67, 68, 73, 75, 82, 83, 89, 91, 92, 94, 95, 98, 107, 108, 117, 175, 196, 199, 206, 211, 212, 214, 216, 226, 232, 234, 237, 238], "we": [0, 2, 3, 4, 5, 7, 9, 11, 12, 13, 15, 19, 21, 22, 23, 27, 28, 29, 30, 32, 34, 35, 36, 41, 42, 43, 46, 47, 48, 49, 50, 51, 56, 57, 58, 59, 60, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 75, 80, 85, 90, 91, 92, 94, 95, 96, 97, 98, 103, 104, 106, 107, 117, 120, 121, 122, 123, 125, 126, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 148, 153, 156, 164, 167, 170, 171, 173, 174, 175, 176, 177, 178, 180, 181, 183, 184, 186, 190, 191, 193, 195, 197, 199, 200, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 215, 216, 223, 224, 226, 228, 229, 231, 232, 233, 234, 236, 238, 240, 242, 247, 248, 249, 251, 252, 254, 255, 261, 265, 266, 267, 268, 270, 271, 282, 283, 285, 287, 288, 289, 292, 293, 294], "can": [0, 2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 26, 28, 32, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 55, 56, 57, 58, 59, 60, 62, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 83, 84, 85, 86, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 103, 106, 107, 108, 109, 110, 111, 113, 114, 115, 117, 119, 121, 122, 123, 125, 126, 127, 128, 130, 131, 134, 135, 136, 139, 141, 142, 143, 144, 145, 146, 148, 149, 153, 154, 155, 160, 162, 165, 169, 170, 171, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 190, 191, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 228, 229, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 245, 247, 248, 249, 251, 252, 254, 255, 257, 264, 265, 266, 267, 268, 270, 271, 282, 283, 285, 287, 288, 289, 291, 292, 293, 294], "incorpor": [0, 2, 19, 204, 228], "u": [0, 8, 9, 15, 19, 21, 22, 23, 25, 31, 40, 46, 47, 48, 58, 63, 66, 67, 68, 70, 81, 84, 89, 92, 94, 100, 103, 107, 122, 125, 126, 127, 130, 131, 133, 135, 138, 141, 142, 143, 145, 148, 149, 153, 154, 165, 170, 176, 186, 190, 191, 195, 197, 199, 201, 202, 203, 204, 205, 209, 211, 212, 215, 216, 223, 226, 228, 229, 232, 233, 234, 235, 236, 241, 255, 268, 285, 287, 288, 289], "benefit": [0, 2, 23, 29, 48, 121, 145, 196], "end": [0, 2, 4, 7, 11, 12, 13, 15, 19, 21, 22, 23, 25, 28, 32, 34, 40, 46, 47, 48, 57, 58, 63, 65, 66, 67, 68, 72, 73, 75, 77, 79, 83, 92, 95, 97, 98, 100, 103, 107, 109, 110, 111, 113, 130, 133, 135, 138, 143, 144, 145, 186, 190, 191, 196, 197, 200, 201, 205, 209, 216, 219, 222, 224, 225, 229, 232, 233, 234, 235, 236, 237, 238, 247, 249, 250, 252, 254, 257, 268, 283, 287, 289, 293], "develop": [0, 3, 4, 5, 6, 10, 14, 19, 21, 23, 37, 46, 49, 65, 109, 148, 185, 202, 203, 206, 209, 234, 235, 287, 290], "team": [0, 3, 11], "member": [0, 4, 13, 21, 27, 47, 56, 58, 68, 90, 113, 203, 224, 241], "list": [0, 2, 3, 4, 5, 9, 11, 12, 16, 21, 30, 31, 32, 33, 34, 35, 36, 38, 40, 43, 46, 47, 48, 49, 50, 51, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 90, 92, 94, 95, 96, 97, 98, 100, 103, 106, 107, 108, 109, 110, 117, 122, 125, 126, 130, 133, 135, 138, 142, 143, 144, 148, 149, 154, 165, 167, 170, 171, 175, 176, 178, 179, 181, 183, 191, 195, 200, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 222, 224, 225, 226, 228, 229, 232, 233, 234, 235, 236, 237, 240, 241, 242, 245, 247, 248, 249, 250, 251, 252, 254, 255, 257, 282, 286, 287, 289, 292, 293, 294], "github": [0, 2, 3, 5, 7, 8, 10, 11, 13, 31, 35, 38, 46, 67, 71, 83, 94, 103, 185, 224, 235, 289], "found": [0, 2, 3, 4, 5, 8, 11, 12, 21, 22, 27, 31, 46, 49, 50, 58, 59, 61, 63, 65, 67, 68, 69, 77, 78, 83, 92, 94, 103, 107, 117, 123, 125, 126, 127, 145, 148, 185, 199, 203, 204, 206, 211, 212, 213, 216, 218, 219, 222, 223, 226, 229, 232, 233, 234, 235, 236, 240, 254, 255, 257, 258, 292], "zotero": 0, "start": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 23, 33, 37, 38, 47, 48, 50, 51, 56, 57, 58, 59, 63, 66, 67, 68, 69, 75, 97, 98, 100, 103, 106, 107, 108, 110, 111, 113, 131, 133, 143, 144, 176, 177, 180, 184, 199, 200, 202, 206, 209, 211, 212, 216, 219, 222, 224, 225, 226, 229, 232, 234, 235, 236, 237, 240, 247, 248, 254, 256, 257, 267, 281, 282, 285, 287], "sympi": [1, 2, 3, 5, 6, 10, 11, 12, 14, 16, 17, 21, 22, 23, 24, 25, 26, 27, 28, 30, 32, 33, 34, 36, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 266, 267, 269, 270, 271, 272, 276, 278, 279, 281, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294], "mode": [1, 8, 27, 67, 95, 109, 153, 176, 196, 212, 216, 247, 258], "set": [1, 2, 3, 4, 5, 7, 8, 11, 12, 14, 15, 17, 19, 20, 21, 22, 27, 29, 30, 36, 39, 40, 42, 46, 47, 48, 49, 50, 55, 56, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 80, 82, 84, 85, 86, 89, 90, 92, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 107, 109, 110, 111, 117, 121, 125, 126, 127, 130, 131, 133, 134, 135, 140, 142, 143, 144, 145, 148, 149, 165, 171, 176, 181, 183, 186, 188, 189, 190, 191, 193, 195, 196, 197, 199, 202, 203, 204, 205, 206, 209, 211, 212, 215, 216, 217, 218, 223, 225, 226, 228, 229, 231, 232, 233, 234, 236, 240, 241, 242, 245, 247, 248, 249, 250, 254, 255, 261, 264, 266, 272, 275, 282, 284, 293], "sympy_debug": [1, 94, 257], "variabl": [1, 2, 4, 5, 11, 12, 13, 14, 17, 19, 22, 23, 25, 27, 28, 30, 31, 33, 35, 39, 40, 41, 43, 44, 46, 48, 49, 62, 66, 67, 68, 71, 72, 73, 74, 75, 76, 77, 84, 86, 92, 94, 95, 97, 98, 103, 109, 110, 111, 113, 115, 117, 127, 130, 131, 138, 140, 148, 149, 155, 170, 175, 179, 181, 184, 190, 191, 193, 197, 204, 206, 207, 209, 211, 212, 213, 216, 217, 222, 223, 228, 229, 231, 232, 233, 234, 235, 243, 247, 249, 250, 251, 255, 261, 264, 265, 267, 268, 270, 283, 285, 287, 289, 294], "For": [1, 2, 3, 4, 5, 8, 9, 11, 12, 13, 14, 15, 18, 21, 22, 23, 24, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 56, 57, 58, 59, 60, 63, 66, 67, 68, 69, 70, 71, 72, 73, 75, 79, 81, 82, 85, 88, 90, 91, 92, 96, 97, 98, 103, 107, 108, 109, 110, 111, 113, 117, 119, 123, 125, 126, 127, 130, 131, 135, 141, 142, 143, 144, 145, 146, 148, 150, 164, 165, 170, 174, 176, 178, 179, 180, 181, 183, 185, 186, 187, 190, 191, 195, 196, 197, 199, 200, 202, 203, 204, 206, 207, 209, 211, 212, 213, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 228, 229, 231, 232, 234, 235, 236, 237, 240, 241, 242, 243, 247, 248, 249, 251, 252, 254, 255, 258, 259, 261, 263, 266, 268, 270, 271, 282, 283, 285, 288, 289, 293, 294], "instanc": [1, 3, 4, 5, 12, 13, 14, 18, 21, 22, 23, 41, 42, 43, 45, 47, 48, 50, 58, 60, 62, 67, 69, 71, 72, 73, 75, 80, 83, 84, 85, 90, 91, 94, 95, 98, 100, 103, 107, 109, 110, 118, 122, 126, 130, 131, 149, 154, 161, 165, 171, 175, 176, 178, 180, 181, 191, 193, 196, 197, 202, 206, 207, 211, 212, 213, 214, 216, 224, 226, 228, 232, 234, 235, 236, 240, 241, 242, 247, 248, 249, 251, 254, 255, 261, 263, 264, 265, 266, 268, 270, 282, 283, 288, 293, 294], "unix": [1, 247, 248], "would": [1, 3, 4, 5, 9, 11, 12, 13, 14, 15, 17, 19, 21, 22, 23, 28, 31, 33, 38, 47, 48, 49, 56, 58, 59, 66, 67, 68, 72, 73, 79, 83, 92, 94, 98, 103, 107, 109, 110, 117, 118, 119, 121, 123, 125, 131, 135, 145, 148, 176, 178, 181, 186, 190, 191, 197, 199, 202, 205, 206, 207, 209, 212, 213, 215, 216, 217, 219, 224, 225, 226, 228, 229, 232, 233, 234, 235, 236, 238, 240, 241, 247, 249, 251, 254, 255, 257, 258, 266, 267, 268, 270, 282, 283, 285, 287, 288, 289, 292, 293, 294], "do": [1, 2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 19, 21, 22, 23, 24, 27, 30, 31, 32, 33, 34, 35, 37, 38, 39, 42, 43, 44, 46, 47, 48, 49, 50, 59, 63, 66, 67, 68, 69, 70, 73, 75, 77, 79, 82, 83, 86, 92, 94, 95, 97, 98, 100, 101, 103, 104, 107, 108, 114, 117, 121, 125, 126, 130, 131, 132, 134, 135, 139, 142, 143, 146, 148, 153, 156, 161, 165, 170, 173, 175, 177, 183, 185, 186, 189, 192, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 215, 216, 217, 219, 223, 224, 225, 226, 228, 229, 232, 233, 234, 238, 241, 242, 245, 247, 248, 250, 252, 254, 255, 257, 264, 266, 267, 268, 270, 282, 283, 285, 286, 287, 288, 289, 291, 293], "true": [1, 2, 4, 12, 13, 14, 15, 17, 18, 21, 22, 23, 25, 27, 29, 30, 31, 32, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 53, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 86, 88, 89, 92, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 115, 117, 118, 119, 120, 121, 123, 125, 126, 127, 128, 130, 131, 135, 148, 152, 153, 162, 165, 166, 173, 175, 176, 179, 180, 181, 184, 190, 191, 192, 193, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 223, 224, 225, 226, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 245, 247, 248, 249, 250, 252, 254, 255, 257, 261, 264, 265, 266, 267, 268, 271, 282, 283, 285, 287, 288, 289, 292, 293, 294], "bin": [1, 2, 4, 8, 9, 11, 12, 95, 216, 247, 254], "isympi": [1, 2, 14, 15, 95], "window": [1, 9, 11, 257], "now": [1, 2, 5, 8, 9, 11, 12, 13, 15, 19, 21, 22, 23, 27, 38, 47, 48, 59, 67, 68, 72, 75, 78, 83, 84, 89, 91, 92, 96, 103, 107, 117, 122, 125, 130, 131, 134, 136, 139, 141, 148, 149, 184, 186, 191, 196, 199, 200, 203, 204, 206, 209, 212, 213, 217, 224, 225, 226, 228, 229, 232, 234, 235, 236, 237, 242, 247, 248, 255, 266, 267, 285, 287, 288, 293, 294], "just": [1, 3, 4, 5, 11, 12, 13, 14, 15, 21, 22, 23, 29, 31, 34, 38, 44, 47, 48, 58, 65, 67, 68, 69, 73, 90, 92, 94, 95, 96, 97, 103, 107, 108, 119, 121, 122, 131, 135, 139, 145, 146, 148, 161, 166, 171, 181, 186, 190, 196, 197, 199, 203, 205, 206, 207, 209, 211, 215, 216, 223, 224, 225, 226, 228, 232, 235, 237, 245, 247, 249, 250, 252, 267, 268, 270, 282, 283, 285, 286, 287, 288, 289, 293, 294], "limit": [1, 3, 13, 15, 25, 31, 32, 36, 38, 44, 46, 48, 66, 67, 69, 71, 72, 73, 75, 76, 79, 87, 89, 94, 95, 97, 103, 107, 115, 146, 170, 176, 179, 196, 202, 207, 209, 212, 213, 216, 219, 220, 222, 224, 228, 229, 231, 232, 233, 234, 236, 241, 248, 251, 254, 255, 257, 260, 261, 271, 273, 279, 284, 285, 287, 289], "function": [1, 2, 3, 5, 7, 11, 14, 17, 18, 19, 21, 22, 24, 25, 28, 30, 32, 35, 37, 41, 42, 43, 45, 46, 47, 49, 50, 58, 59, 62, 63, 65, 68, 69, 70, 71, 72, 76, 77, 78, 79, 84, 87, 88, 91, 93, 94, 95, 96, 98, 100, 102, 106, 108, 110, 112, 113, 114, 115, 117, 118, 119, 123, 124, 125, 129, 130, 131, 134, 135, 136, 137, 141, 143, 144, 148, 153, 154, 155, 156, 160, 165, 166, 167, 170, 175, 176, 177, 178, 179, 180, 181, 184, 185, 190, 191, 194, 195, 196, 198, 200, 201, 203, 208, 209, 210, 211, 213, 214, 217, 218, 219, 220, 221, 222, 223, 224, 225, 228, 230, 231, 234, 235, 236, 238, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 257, 258, 259, 260, 261, 262, 266, 267, 269, 270, 271, 272, 273, 276, 278, 279, 282, 283, 284, 285, 286, 287, 288, 289, 291, 294], "get": [1, 3, 4, 5, 8, 11, 12, 13, 18, 19, 21, 22, 23, 31, 33, 34, 35, 38, 39, 42, 43, 46, 47, 48, 50, 51, 56, 57, 59, 60, 62, 63, 66, 67, 68, 69, 71, 72, 73, 75, 80, 90, 92, 94, 96, 100, 103, 107, 109, 110, 115, 117, 120, 126, 131, 134, 135, 143, 144, 145, 146, 148, 153, 154, 161, 165, 170, 175, 176, 177, 178, 183, 185, 186, 200, 204, 206, 207, 209, 211, 212, 213, 214, 215, 216, 218, 224, 225, 226, 228, 229, 232, 233, 234, 235, 236, 237, 238, 242, 243, 248, 254, 255, 256, 258, 261, 265, 282, 285, 287, 288, 289, 292, 293, 294], "nice": [1, 4, 9, 38, 67, 79, 103, 107, 131, 145, 148, 202, 216, 226, 257, 288], "print": [1, 3, 4, 5, 7, 11, 12, 14, 15, 19, 21, 22, 25, 27, 30, 31, 33, 38, 41, 42, 43, 44, 46, 47, 49, 50, 51, 56, 58, 59, 66, 67, 68, 71, 72, 73, 75, 94, 96, 97, 100, 103, 104, 107, 108, 109, 110, 111, 117, 124, 126, 130, 131, 133, 141, 147, 153, 161, 174, 175, 179, 181, 191, 194, 198, 200, 202, 205, 206, 207, 209, 211, 212, 222, 223, 225, 226, 228, 232, 234, 241, 243, 247, 249, 254, 255, 257, 261, 265, 272, 278, 280, 283, 284, 285, 286, 287, 288, 289, 293], "tree": [1, 7, 13, 14, 18, 58, 61, 67, 109, 123, 131, 173, 176, 191, 212, 223, 225, 228, 235, 238, 240, 251, 254, 257, 284], "which": [1, 2, 3, 4, 5, 8, 9, 11, 12, 13, 14, 15, 19, 21, 22, 23, 25, 27, 28, 30, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 56, 57, 58, 59, 60, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 80, 81, 82, 83, 86, 89, 90, 91, 92, 94, 95, 96, 97, 98, 100, 101, 103, 106, 107, 109, 110, 111, 113, 114, 115, 117, 118, 119, 121, 122, 123, 125, 126, 127, 128, 130, 131, 133, 134, 136, 139, 141, 142, 143, 144, 145, 146, 148, 149, 150, 152, 154, 155, 167, 170, 176, 177, 178, 179, 181, 185, 186, 187, 190, 191, 193, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215, 217, 218, 219, 222, 223, 224, 225, 226, 228, 229, 231, 232, 233, 234, 235, 236, 237, 240, 242, 247, 248, 249, 250, 251, 252, 254, 255, 257, 261, 263, 266, 270, 271, 282, 283, 285, 286, 287, 288, 289, 290, 292, 293, 294], "veri": [1, 2, 3, 4, 11, 12, 13, 14, 15, 17, 18, 21, 23, 27, 48, 63, 67, 68, 71, 72, 77, 79, 85, 89, 92, 94, 97, 103, 107, 117, 121, 131, 135, 148, 153, 186, 199, 200, 203, 206, 209, 211, 212, 213, 215, 216, 217, 223, 224, 225, 226, 228, 229, 232, 234, 235, 236, 247, 248, 249, 255, 282, 285, 288, 293], "There": [2, 3, 4, 5, 7, 8, 11, 12, 13, 14, 15, 18, 21, 22, 23, 27, 30, 31, 35, 48, 49, 58, 59, 60, 61, 64, 66, 67, 68, 71, 72, 75, 91, 92, 94, 95, 96, 97, 100, 103, 107, 110, 111, 113, 117, 121, 130, 141, 143, 145, 146, 154, 171, 176, 191, 196, 199, 200, 202, 206, 207, 208, 209, 211, 212, 213, 216, 217, 218, 224, 225, 226, 228, 229, 232, 234, 235, 236, 238, 241, 250, 251, 254, 255, 257, 266, 282, 283, 285, 287, 288, 292, 293], "sever": [2, 3, 4, 11, 12, 13, 14, 18, 21, 23, 27, 31, 38, 48, 52, 58, 59, 66, 67, 71, 72, 74, 75, 79, 92, 94, 107, 123, 126, 127, 142, 186, 188, 202, 204, 206, 209, 211, 215, 216, 217, 223, 224, 232, 236, 247, 249, 259, 272, 285, 289, 292], "packag": [2, 7, 8, 9, 11, 12, 26, 28, 32, 33, 38, 95, 108, 109, 114, 141, 148, 196, 216, 247, 258, 267, 268, 287], "instal": [2, 5, 12, 14, 15, 71, 108, 206, 207, 216, 248, 255, 286, 292], "enabl": [2, 5, 9, 14, 23, 38, 67, 94, 95, 107, 111, 131, 133, 181, 191, 196, 216, 232, 236, 247, 252, 255, 289, 292, 293], "certain": [2, 5, 12, 14, 23, 36, 38, 45, 47, 48, 50, 58, 65, 67, 71, 75, 83, 92, 94, 107, 109, 130, 145, 191, 192, 203, 206, 209, 211, 216, 217, 223, 226, 228, 229, 232, 234, 235, 236, 238, 249, 250, 255, 261, 264, 270, 293], "most": [2, 3, 4, 5, 7, 11, 12, 13, 14, 15, 18, 19, 21, 22, 23, 27, 29, 31, 32, 33, 34, 35, 36, 38, 41, 42, 43, 46, 47, 48, 49, 58, 59, 66, 67, 68, 71, 73, 77, 79, 94, 97, 98, 99, 100, 101, 103, 105, 106, 107, 108, 109, 117, 121, 125, 126, 131, 139, 142, 145, 146, 149, 183, 185, 190, 191, 195, 201, 202, 203, 204, 206, 207, 209, 211, 212, 213, 214, 215, 216, 223, 224, 226, 229, 232, 233, 234, 235, 236, 245, 248, 249, 250, 251, 252, 254, 255, 257, 264, 266, 282, 285, 287, 288, 289, 291, 292, 293], "contributor": [2, 5, 6, 7, 8, 11, 13, 23], "need": [2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 42, 43, 46, 47, 48, 52, 58, 59, 63, 65, 66, 67, 68, 69, 72, 73, 75, 78, 82, 83, 90, 91, 92, 94, 95, 97, 98, 103, 107, 108, 109, 110, 111, 113, 117, 121, 126, 128, 130, 131, 133, 134, 135, 136, 138, 139, 140, 142, 143, 144, 145, 146, 149, 150, 161, 165, 173, 179, 184, 190, 191, 196, 199, 200, 203, 204, 205, 206, 207, 209, 211, 212, 213, 215, 216, 223, 224, 226, 228, 229, 231, 232, 234, 235, 236, 240, 241, 242, 243, 245, 248, 249, 250, 251, 252, 254, 257, 261, 265, 267, 268, 271, 282, 283, 285, 288, 289, 291, 293], "ani": [2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 17, 18, 21, 22, 23, 27, 29, 30, 31, 34, 38, 44, 45, 46, 47, 48, 49, 56, 57, 58, 59, 65, 66, 67, 68, 69, 71, 72, 73, 75, 77, 78, 79, 82, 83, 84, 92, 94, 95, 97, 98, 101, 103, 104, 107, 109, 110, 111, 113, 117, 119, 122, 125, 126, 127, 128, 130, 131, 141, 144, 145, 146, 149, 150, 154, 167, 170, 175, 176, 179, 181, 183, 186, 191, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 216, 217, 222, 223, 224, 225, 226, 228, 229, 232, 233, 234, 236, 238, 241, 242, 247, 248, 250, 251, 252, 254, 255, 261, 265, 266, 267, 268, 270, 271, 282, 283, 285, 288, 289, 292, 293, 294], "mention": [2, 3, 4, 23, 27, 34, 58, 92, 94, 117, 133, 149, 150, 197, 226, 229, 232, 236, 265, 266, 267, 268, 289], "below": [2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 15, 21, 23, 25, 27, 31, 34, 35, 36, 38, 46, 47, 48, 57, 58, 59, 67, 68, 72, 74, 75, 76, 77, 83, 84, 90, 92, 94, 98, 103, 106, 107, 109, 110, 111, 117, 122, 125, 126, 127, 128, 130, 131, 133, 135, 136, 137, 142, 143, 144, 145, 146, 148, 175, 181, 186, 191, 200, 201, 202, 203, 205, 212, 216, 217, 219, 225, 228, 229, 231, 232, 233, 234, 235, 236, 247, 249, 254, 255, 257, 266, 268, 271, 272, 289, 293], "except": [2, 3, 4, 11, 13, 14, 15, 19, 21, 22, 23, 32, 36, 46, 48, 58, 59, 67, 68, 71, 72, 73, 75, 92, 94, 107, 139, 185, 187, 201, 203, 205, 206, 207, 211, 212, 213, 214, 216, 225, 228, 229, 232, 233, 235, 240, 245, 247, 249, 250, 253, 254, 255, 265, 268, 280, 282, 285, 288, 289], "unless": [2, 4, 11, 12, 14, 21, 23, 41, 43, 46, 48, 58, 66, 67, 68, 72, 75, 82, 83, 92, 103, 106, 154, 199, 200, 204, 206, 211, 212, 216, 221, 224, 225, 232, 234, 247, 251, 254, 255, 257, 261, 270, 283, 289, 293], "thei": [2, 3, 4, 5, 11, 12, 13, 14, 15, 17, 21, 22, 23, 27, 32, 34, 35, 36, 38, 44, 47, 48, 49, 55, 57, 58, 59, 65, 66, 67, 68, 69, 72, 73, 75, 77, 80, 81, 82, 83, 84, 89, 92, 94, 95, 97, 98, 100, 101, 103, 106, 107, 109, 121, 125, 126, 128, 130, 131, 133, 139, 141, 143, 144, 145, 148, 149, 155, 160, 165, 170, 173, 178, 183, 184, 186, 187, 191, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 216, 217, 222, 223, 225, 226, 228, 229, 232, 233, 234, 235, 236, 237, 238, 242, 245, 247, 249, 251, 254, 255, 257, 261, 268, 270, 283, 285, 286, 287, 288, 289, 293], "intend": [2, 3, 4, 7, 9, 11, 12, 13, 17, 21, 67, 68, 78, 87, 92, 107, 109, 123, 128, 176, 206, 207, 211, 214, 229, 232, 233, 245, 250, 257, 282], "part": [2, 3, 4, 5, 7, 11, 12, 13, 14, 21, 22, 23, 27, 40, 45, 58, 59, 66, 67, 68, 72, 73, 75, 83, 90, 92, 94, 97, 98, 100, 107, 117, 121, 122, 125, 126, 130, 131, 133, 139, 141, 142, 146, 148, 165, 177, 181, 190, 200, 204, 206, 207, 209, 211, 212, 213, 215, 216, 217, 224, 226, 228, 229, 232, 234, 247, 249, 251, 254, 283, 288, 293], "those": [2, 4, 11, 12, 13, 14, 15, 17, 21, 22, 27, 31, 35, 36, 39, 44, 47, 48, 49, 50, 58, 59, 65, 66, 67, 68, 71, 80, 81, 92, 94, 97, 103, 106, 107, 113, 121, 125, 126, 130, 133, 139, 142, 154, 178, 190, 193, 196, 199, 200, 202, 206, 207, 209, 211, 212, 214, 215, 216, 222, 224, 228, 232, 233, 234, 235, 236, 242, 245, 247, 251, 254, 261, 264, 285, 287, 293], "everi": [2, 3, 4, 7, 11, 12, 14, 21, 23, 27, 31, 37, 42, 43, 44, 47, 53, 55, 58, 59, 67, 68, 82, 94, 96, 98, 103, 107, 117, 146, 185, 197, 199, 200, 202, 203, 204, 206, 207, 209, 211, 216, 221, 224, 226, 228, 229, 232, 235, 236, 238, 265, 268, 270, 286, 288, 289, 293], "conda": [2, 8, 9, 38, 109], "via": [2, 8, 9, 14, 19, 23, 32, 36, 38, 41, 42, 43, 58, 59, 67, 72, 75, 92, 94, 97, 103, 107, 108, 109, 110, 191, 201, 203, 207, 209, 211, 212, 215, 216, 235, 245, 248, 249, 261, 270, 288], "forg": [2, 8, 109], "pip": [2, 8, 9, 12, 38, 109], "doe": [2, 4, 5, 7, 9, 11, 12, 13, 14, 18, 21, 22, 23, 27, 28, 34, 35, 36, 37, 38, 39, 42, 43, 46, 47, 48, 49, 58, 59, 63, 65, 66, 67, 68, 69, 71, 73, 75, 77, 78, 81, 83, 92, 94, 97, 98, 103, 106, 107, 109, 119, 121, 123, 126, 127, 130, 131, 133, 138, 142, 146, 161, 165, 171, 175, 177, 180, 199, 200, 202, 204, 205, 206, 207, 209, 211, 212, 213, 216, 223, 224, 225, 226, 228, 229, 231, 232, 234, 237, 241, 242, 245, 247, 249, 251, 254, 255, 257, 261, 263, 266, 282, 283, 285, 288, 289, 292, 293, 294], "themselv": [2, 5, 12, 13, 23, 44, 47, 59, 63, 65, 67, 94, 107, 141, 142, 206, 207, 211, 222, 236, 242, 251, 254, 257, 293], "incomplet": [2, 4, 5, 67, 72, 75, 204, 206, 212, 216, 218, 234, 235], "main": [2, 4, 5, 7, 9, 11, 13, 15, 33, 43, 44, 48, 67, 73, 92, 98, 103, 106, 131, 139, 179, 196, 200, 202, 203, 207, 216, 223, 232, 235, 241, 248, 293, 294], "webpag": [2, 5], "more": [2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 27, 29, 30, 31, 32, 33, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 53, 57, 58, 59, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 79, 80, 81, 82, 83, 84, 85, 89, 92, 94, 97, 98, 100, 101, 103, 104, 106, 107, 108, 109, 115, 117, 121, 125, 126, 127, 130, 131, 133, 135, 137, 139, 141, 143, 144, 145, 146, 148, 150, 153, 165, 169, 170, 175, 178, 179, 180, 181, 186, 190, 191, 195, 196, 200, 201, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 225, 226, 228, 229, 232, 233, 234, 235, 236, 247, 249, 250, 251, 254, 255, 257, 261, 265, 269, 276, 278, 282, 283, 285, 286, 288, 289, 291, 292, 293, 294], "complet": [2, 3, 4, 9, 11, 12, 13, 14, 15, 21, 31, 34, 43, 48, 67, 68, 69, 71, 73, 74, 75, 83, 92, 94, 103, 107, 121, 126, 127, 135, 141, 148, 167, 170, 171, 200, 209, 211, 212, 213, 217, 223, 228, 229, 232, 235, 236, 247, 249, 257, 287, 288, 293], "io": [2, 5, 95, 216, 255], "ha": [2, 3, 4, 5, 7, 8, 11, 12, 13, 14, 15, 19, 21, 22, 23, 27, 28, 29, 31, 32, 33, 34, 35, 36, 44, 46, 47, 48, 49, 50, 51, 56, 57, 58, 59, 61, 63, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 79, 80, 82, 83, 84, 90, 92, 94, 96, 97, 98, 100, 103, 104, 106, 107, 108, 110, 111, 113, 117, 118, 122, 125, 126, 130, 131, 133, 135, 141, 146, 148, 154, 155, 165, 166, 175, 178, 183, 186, 190, 191, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 221, 223, 224, 226, 228, 229, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 247, 248, 249, 250, 251, 252, 254, 257, 261, 263, 265, 266, 268, 270, 271, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294], "one": [2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 17, 19, 21, 22, 23, 27, 28, 29, 30, 31, 32, 33, 34, 37, 39, 40, 43, 44, 46, 47, 48, 50, 51, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 75, 77, 78, 79, 80, 81, 83, 84, 89, 90, 91, 92, 94, 95, 96, 97, 98, 100, 102, 103, 106, 107, 108, 109, 110, 111, 113, 114, 115, 117, 118, 121, 122, 125, 126, 128, 130, 131, 132, 135, 145, 146, 148, 150, 153, 154, 155, 161, 166, 175, 179, 181, 183, 184, 185, 186, 189, 190, 191, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 209, 211, 212, 213, 214, 215, 216, 217, 223, 224, 225, 226, 228, 229, 232, 233, 234, 235, 236, 237, 240, 242, 243, 247, 248, 249, 251, 254, 255, 257, 261, 266, 268, 270, 281, 282, 283, 285, 287, 288, 289, 291, 292, 293], "mpmath": [2, 8, 9, 12, 14, 23, 32, 33, 48, 72, 75, 103, 108, 148, 206, 207, 216, 224, 234, 250, 255], "arbitrari": [2, 4, 13, 14, 15, 21, 23, 27, 31, 33, 35, 36, 46, 52, 59, 60, 66, 67, 68, 71, 72, 75, 78, 79, 81, 97, 98, 103, 111, 127, 142, 146, 167, 170, 200, 202, 203, 206, 207, 209, 211, 213, 228, 232, 233, 234, 242, 252, 255, 261, 263, 282, 283, 288, 293, 294], "precis": [2, 3, 4, 14, 15, 21, 22, 23, 27, 31, 48, 58, 67, 70, 71, 72, 75, 83, 94, 103, 107, 115, 146, 201, 203, 206, 207, 211, 212, 213, 216, 223, 228, 229, 234, 235, 248, 249, 257, 282, 293], "arithmet": [2, 48, 67, 68, 71, 98, 103, 107, 170, 177, 201, 202, 203, 205, 206, 207, 209, 210, 214, 217], "under": [2, 3, 4, 8, 12, 14, 15, 21, 22, 42, 43, 45, 46, 48, 49, 57, 58, 63, 65, 75, 85, 92, 94, 96, 97, 103, 107, 109, 110, 111, 150, 176, 201, 203, 204, 211, 212, 216, 223, 224, 226, 229, 232, 234, 235, 236, 242, 245, 287, 293], "hood": [2, 14], "whenev": [2, 3, 12, 13, 14, 15, 23, 65, 92, 94, 103, 188, 202, 203, 204, 207, 218, 223, 226, 236, 283, 285, 288], "calcul": [2, 15, 19, 21, 33, 34, 40, 46, 49, 59, 65, 67, 68, 69, 70, 71, 73, 75, 77, 79, 80, 81, 83, 84, 94, 98, 100, 103, 107, 110, 111, 119, 121, 122, 125, 126, 130, 133, 134, 135, 150, 153, 154, 157, 160, 176, 177, 178, 179, 181, 182, 190, 191, 192, 193, 195, 197, 199, 200, 201, 202, 203, 205, 206, 207, 209, 211, 212, 213, 218, 223, 232, 236, 240, 248, 249, 255, 261, 264, 268, 270, 289, 292], "float": [2, 12, 14, 21, 23, 29, 48, 58, 67, 73, 75, 82, 84, 94, 95, 98, 103, 107, 109, 115, 117, 148, 154, 196, 202, 206, 207, 216, 228, 234, 236, 247, 255, 257, 282, 285], "point": [2, 3, 4, 5, 12, 14, 15, 19, 21, 31, 33, 34, 38, 40, 46, 48, 49, 58, 65, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 86, 89, 90, 91, 92, 94, 103, 107, 110, 111, 113, 115, 122, 125, 126, 127, 128, 130, 131, 133, 135, 137, 138, 139, 140, 142, 143, 144, 145, 146, 148, 149, 161, 183, 186, 192, 195, 197, 200, 202, 203, 206, 207, 209, 211, 212, 216, 218, 222, 223, 224, 232, 234, 235, 236, 248, 251, 254, 255, 257, 261, 264, 266, 267, 268, 270, 271, 279, 282, 283, 285, 288], "valu": [2, 3, 4, 5, 12, 13, 14, 15, 19, 21, 23, 25, 27, 30, 31, 32, 33, 34, 35, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 56, 58, 59, 63, 66, 67, 68, 69, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 90, 92, 94, 95, 97, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 115, 117, 119, 122, 125, 126, 127, 128, 130, 131, 133, 145, 148, 150, 154, 157, 160, 165, 167, 170, 173, 175, 176, 177, 178, 181, 182, 184, 186, 191, 192, 195, 197, 199, 200, 201, 202, 204, 205, 206, 207, 209, 211, 212, 213, 214, 216, 217, 222, 223, 224, 225, 228, 229, 231, 232, 233, 234, 235, 236, 237, 240, 241, 242, 243, 247, 249, 250, 254, 255, 257, 264, 266, 268, 271, 283, 285, 288], "g": [2, 3, 5, 8, 9, 11, 12, 13, 15, 21, 22, 23, 25, 33, 34, 36, 46, 47, 48, 49, 52, 55, 57, 58, 59, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 79, 83, 84, 85, 90, 93, 94, 96, 97, 98, 103, 107, 109, 110, 113, 117, 118, 122, 125, 127, 128, 130, 131, 133, 135, 136, 138, 139, 140, 145, 146, 148, 149, 161, 165, 170, 176, 178, 179, 181, 184, 186, 187, 191, 197, 202, 203, 204, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 228, 229, 232, 233, 234, 235, 236, 237, 240, 241, 242, 247, 248, 249, 250, 252, 254, 255, 256, 257, 270, 273, 283, 288, 292, 293, 294], "evalf": [2, 4, 14, 15, 21, 27, 33, 36, 48, 66, 71, 72, 73, 75, 86, 89, 90, 98, 103, 109, 131, 133, 148, 163, 207, 212, 216, 223, 224, 228, 236, 248, 255, 284], "cannot": [2, 3, 4, 5, 12, 13, 14, 15, 18, 22, 23, 27, 30, 33, 38, 41, 42, 43, 44, 45, 46, 48, 59, 64, 66, 67, 69, 71, 73, 77, 79, 80, 82, 84, 89, 94, 96, 99, 101, 103, 105, 107, 109, 117, 176, 184, 186, 199, 200, 202, 207, 209, 211, 212, 213, 216, 223, 224, 228, 229, 231, 232, 234, 235, 236, 237, 245, 247, 248, 249, 254, 258, 261, 263, 287, 288, 289, 293, 294], "without": [2, 3, 4, 5, 11, 12, 13, 14, 15, 21, 23, 25, 38, 42, 44, 45, 48, 66, 67, 68, 69, 71, 75, 92, 94, 95, 98, 100, 103, 117, 118, 125, 131, 137, 139, 144, 145, 181, 185, 186, 190, 191, 192, 199, 202, 205, 206, 209, 212, 216, 218, 224, 225, 226, 228, 229, 232, 233, 234, 235, 236, 238, 241, 242, 245, 247, 248, 249, 252, 254, 255, 257, 264, 267, 289, 293], "fail": [2, 3, 4, 5, 8, 11, 13, 21, 22, 23, 27, 48, 58, 59, 63, 66, 67, 71, 73, 91, 92, 94, 95, 103, 104, 107, 109, 133, 171, 176, 196, 202, 205, 206, 207, 209, 211, 212, 216, 223, 226, 232, 234, 236, 245, 247, 254, 255, 289], "import": [2, 3, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 25, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 115, 117, 118, 119, 120, 121, 122, 123, 125, 126, 128, 130, 131, 133, 134, 135, 136, 138, 139, 140, 142, 143, 144, 145, 146, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 173, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 245, 247, 248, 249, 250, 251, 252, 254, 255, 257, 258, 259, 261, 263, 264, 265, 266, 267, 268, 271, 282, 283, 285, 287, 288, 289, 291, 292, 293, 294], "If": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 27, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 56, 58, 59, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 90, 92, 94, 95, 96, 97, 98, 100, 103, 104, 106, 107, 108, 109, 110, 115, 117, 118, 120, 121, 122, 123, 125, 126, 127, 128, 130, 131, 132, 143, 144, 145, 146, 148, 149, 154, 158, 162, 165, 171, 175, 176, 177, 178, 179, 181, 185, 189, 190, 191, 192, 193, 195, 196, 197, 200, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 228, 229, 232, 233, 234, 235, 236, 237, 240, 241, 242, 243, 245, 247, 248, 249, 250, 251, 252, 254, 255, 257, 261, 264, 266, 268, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294], "error": [2, 3, 4, 5, 8, 11, 12, 13, 17, 21, 22, 29, 30, 31, 32, 33, 34, 36, 39, 46, 48, 56, 59, 66, 67, 68, 73, 77, 82, 92, 94, 103, 106, 107, 109, 126, 130, 131, 200, 201, 204, 206, 207, 209, 213, 216, 218, 224, 232, 233, 234, 235, 236, 247, 248, 249, 252, 254, 257, 261, 282], "importerror": 2, "extern": [2, 38, 67, 95, 109, 113, 115, 133, 141, 196, 206, 207, 217, 224, 228, 236, 247, 248], "doc": [2, 3, 4, 5, 7, 11, 12, 15, 37, 48, 58, 66, 67, 83, 95, 183, 206, 208, 229, 232, 247, 248, 250, 252, 254, 261, 266, 279], "latest": [2, 9, 12, 38, 47, 250, 252, 255], "html": [2, 4, 5, 8, 11, 12, 44, 48, 51, 59, 60, 61, 67, 68, 70, 72, 73, 75, 77, 83, 84, 94, 95, 103, 107, 115, 210, 216, 219, 221, 224, 225, 229, 232, 236, 248, 250, 252, 254, 255, 289], "inform": [2, 3, 4, 5, 7, 8, 9, 11, 14, 15, 18, 21, 22, 27, 36, 37, 43, 44, 47, 48, 49, 53, 58, 59, 65, 67, 68, 72, 75, 79, 92, 94, 96, 100, 103, 108, 111, 122, 123, 125, 126, 128, 130, 131, 133, 141, 142, 143, 145, 146, 148, 149, 176, 181, 186, 191, 196, 200, 202, 206, 211, 212, 216, 217, 223, 226, 228, 229, 234, 235, 236, 240, 241, 242, 247, 248, 249, 250, 251, 261, 266, 268, 293], "mean": [2, 3, 4, 5, 11, 12, 13, 14, 15, 21, 22, 23, 27, 35, 44, 49, 59, 66, 67, 68, 69, 85, 92, 94, 95, 97, 98, 101, 103, 107, 110, 121, 142, 181, 183, 186, 191, 196, 199, 202, 203, 204, 206, 209, 211, 215, 216, 226, 228, 229, 231, 232, 234, 235, 236, 237, 238, 240, 241, 247, 254, 266, 282, 283, 285, 287, 288, 289, 293, 294], "did": [2, 5, 11, 22, 67, 94, 107, 121, 138, 186, 209, 213, 224, 234, 245, 255, 285, 287, 293], "correctli": [2, 3, 4, 5, 8, 11, 12, 13, 22, 23, 46, 71, 92, 95, 103, 131, 133, 145, 216, 223, 229, 232], "explain": [2, 3, 4, 5, 7, 12, 21, 27, 36, 47, 63, 67, 75, 85, 90, 203, 206, 209, 211, 213, 223], "how": [2, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 27, 28, 47, 48, 50, 58, 59, 66, 67, 73, 74, 75, 79, 90, 94, 97, 98, 100, 103, 107, 109, 110, 121, 125, 126, 131, 132, 138, 143, 144, 146, 148, 152, 153, 169, 173, 176, 177, 178, 183, 184, 191, 199, 202, 203, 206, 207, 209, 211, 215, 216, 219, 223, 224, 226, 228, 229, 232, 233, 234, 236, 242, 247, 248, 249, 250, 252, 254, 255, 257, 266, 283, 285, 287, 288, 289, 290, 292, 293], "method": [2, 3, 4, 5, 8, 11, 12, 14, 15, 20, 21, 27, 29, 30, 31, 33, 34, 35, 40, 42, 43, 44, 46, 47, 48, 49, 50, 51, 58, 59, 60, 66, 67, 68, 69, 70, 71, 73, 74, 75, 78, 79, 80, 81, 83, 86, 89, 91, 92, 94, 96, 98, 99, 100, 103, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 121, 124, 125, 127, 128, 130, 131, 134, 136, 137, 141, 142, 146, 147, 148, 155, 158, 160, 162, 170, 171, 176, 178, 181, 183, 185, 188, 189, 190, 191, 193, 197, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 217, 218, 219, 221, 222, 223, 224, 228, 229, 232, 234, 236, 237, 239, 241, 242, 243, 247, 249, 251, 254, 255, 261, 265, 268, 271, 272, 276, 278, 282, 283, 284, 285, 288, 293], "ones": [2, 3, 13, 23, 38, 48, 58, 63, 67, 92, 94, 97, 98, 100, 103, 106, 107, 131, 154, 175, 181, 185, 205, 209, 219, 229, 232, 237, 243, 249, 257, 261, 266, 289, 292], "guid": [2, 6, 7, 8, 9, 11, 14, 16, 23, 32, 38, 47, 67, 74, 131, 145, 216, 229, 231, 232, 234, 235, 242, 286, 290, 291, 294], "automat": [2, 3, 4, 5, 8, 11, 12, 13, 14, 15, 17, 21, 30, 31, 34, 36, 47, 48, 49, 59, 67, 69, 70, 71, 72, 73, 75, 80, 82, 86, 92, 95, 97, 107, 109, 110, 126, 130, 131, 133, 139, 167, 169, 170, 179, 181, 185, 195, 199, 202, 203, 206, 207, 211, 212, 213, 216, 219, 222, 223, 225, 226, 228, 229, 232, 234, 235, 241, 242, 247, 248, 249, 252, 255, 266, 271, 283, 285, 287, 288, 292, 293, 294], "typic": [2, 3, 12, 13, 14, 23, 63, 73, 92, 107, 117, 122, 128, 132, 146, 200, 202, 204, 209, 213, 226, 248, 249, 266], "manual": [2, 3, 5, 8, 12, 13, 14, 23, 30, 48, 49, 58, 71, 77, 94, 95, 109, 117, 128, 130, 131, 134, 145, 149, 202, 209, 216, 232, 234, 235, 250, 283, 293], "actual": [2, 3, 4, 5, 8, 9, 11, 12, 14, 15, 19, 21, 22, 23, 25, 47, 48, 49, 56, 58, 65, 67, 68, 75, 79, 92, 94, 96, 100, 103, 107, 117, 121, 131, 133, 143, 144, 145, 196, 203, 206, 211, 216, 224, 226, 228, 229, 232, 235, 243, 247, 248, 251, 252, 254, 255, 287], "directli": [2, 3, 4, 11, 12, 13, 14, 15, 19, 21, 22, 23, 27, 38, 42, 43, 46, 47, 48, 58, 66, 67, 69, 73, 78, 98, 100, 103, 107, 130, 131, 164, 167, 179, 184, 191, 195, 202, 203, 205, 206, 207, 211, 212, 224, 225, 226, 228, 229, 232, 233, 234, 235, 236, 247, 248, 249, 250, 251, 252, 283, 294], "git": [2, 7, 10, 11, 12], "repositori": [2, 5, 9, 38, 229], "vast": [2, 36, 94, 208], "major": [2, 3, 5, 8, 13, 27, 36, 77, 121, 241, 287, 293], "them": [2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 18, 19, 21, 22, 23, 27, 30, 31, 32, 34, 36, 39, 42, 44, 47, 48, 56, 58, 59, 66, 67, 68, 69, 71, 72, 75, 78, 83, 85, 87, 89, 90, 92, 96, 97, 100, 103, 106, 107, 108, 121, 126, 128, 130, 131, 133, 135, 136, 141, 143, 145, 148, 154, 158, 174, 175, 181, 183, 186, 189, 190, 191, 197, 199, 200, 203, 204, 206, 207, 209, 211, 212, 213, 215, 216, 217, 223, 224, 225, 226, 228, 229, 232, 234, 235, 237, 238, 247, 249, 251, 254, 264, 282, 283, 285, 287, 288, 293], "few": [2, 3, 8, 12, 13, 14, 21, 30, 36, 44, 57, 59, 67, 68, 94, 95, 107, 108, 133, 141, 184, 190, 196, 199, 200, 203, 211, 216, 224, 225, 226, 232, 235, 236, 249, 254, 293], "wrap": [2, 3, 4, 11, 12, 41, 42, 43, 44, 48, 56, 67, 73, 95, 108, 196, 200, 202, 205, 206, 209, 216, 219, 235, 241, 248, 252, 255, 257, 288], "addition": [2, 4, 11, 13, 67, 143, 179, 200, 209, 216, 236, 245, 252, 265], "some": [2, 3, 4, 7, 8, 9, 11, 12, 14, 15, 19, 21, 22, 23, 25, 27, 30, 31, 32, 33, 35, 36, 38, 39, 40, 44, 47, 48, 49, 50, 55, 58, 59, 65, 66, 67, 68, 71, 72, 73, 75, 77, 78, 79, 83, 92, 94, 96, 97, 98, 100, 103, 107, 108, 109, 115, 118, 121, 122, 125, 128, 130, 131, 132, 133, 134, 135, 136, 142, 143, 145, 149, 161, 166, 170, 178, 181, 185, 186, 187, 190, 192, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 216, 218, 222, 223, 224, 225, 226, 228, 229, 231, 232, 233, 234, 236, 242, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 261, 263, 264, 266, 268, 272, 282, 283, 285, 287, 288, 289, 291, 292, 293], "skip": [2, 3, 4, 8, 15, 47, 51, 67, 98, 103, 107, 191, 211, 215, 216, 218, 232, 234, 245, 247, 283, 291, 292], "action": [2, 5, 8, 11, 58, 96, 128, 173, 176, 186, 212, 228, 235], "ci": [2, 5, 9, 11, 12, 75, 92, 216, 292], "pull": [2, 3, 4, 5, 8, 9, 12, 13, 23, 38, 48, 67, 72, 75, 180, 217, 228, 232, 235, 289, 293], "request": [2, 3, 4, 5, 8, 9, 12, 13, 21, 27, 38, 46, 67, 71, 83, 92, 107, 131, 181, 209, 212, 240, 248], "mai": [2, 3, 4, 8, 9, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 44, 46, 47, 48, 49, 50, 58, 59, 60, 66, 67, 68, 69, 71, 72, 73, 75, 77, 79, 80, 82, 83, 84, 92, 94, 95, 97, 98, 99, 103, 104, 106, 107, 109, 113, 123, 126, 127, 130, 131, 135, 141, 145, 167, 176, 181, 182, 183, 185, 188, 191, 195, 197, 199, 202, 203, 204, 205, 207, 209, 211, 215, 216, 217, 224, 225, 226, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 240, 242, 245, 247, 248, 249, 250, 251, 252, 254, 255, 257, 258, 268, 270, 282, 283, 285, 288, 289, 293, 294], "wish": [2, 4, 11, 15, 23, 34, 38, 48, 67, 68, 71, 92, 107, 176, 190, 200, 251, 255, 283, 287, 289, 294], "local": [2, 11, 12, 39, 41, 42, 43, 67, 69, 92, 109, 138, 140, 193, 203, 209, 234, 247], "improv": [2, 3, 7, 11, 12, 13, 22, 23, 67, 92, 130, 202, 206, 209, 210, 212, 213, 215, 217, 232, 235, 241, 283, 289], "perform": [2, 11, 12, 13, 14, 15, 18, 19, 21, 23, 45, 47, 48, 49, 58, 59, 62, 66, 67, 68, 70, 71, 73, 80, 84, 91, 94, 101, 103, 107, 108, 123, 126, 133, 135, 141, 145, 146, 148, 165, 166, 175, 178, 181, 197, 200, 204, 205, 206, 209, 211, 212, 217, 218, 219, 223, 228, 229, 232, 234, 235, 236, 237, 248, 254, 261, 263, 265, 268, 282, 283, 287, 288, 293], "gmpy2": [2, 206, 207], "wrapper": [2, 13, 14, 23, 42, 44, 48, 59, 67, 75, 103, 145, 193, 196, 205, 206, 209, 216, 223, 232, 235, 236, 248, 252, 254], "gmp": 2, "multipl": [2, 3, 4, 11, 12, 13, 14, 15, 17, 21, 23, 25, 29, 31, 35, 36, 40, 42, 43, 44, 46, 47, 48, 49, 56, 58, 59, 63, 66, 67, 68, 72, 73, 75, 77, 82, 85, 87, 92, 94, 96, 97, 98, 100, 103, 104, 107, 109, 114, 117, 121, 133, 141, 148, 149, 165, 166, 167, 171, 178, 180, 183, 186, 187, 188, 191, 195, 199, 202, 203, 204, 205, 206, 207, 209, 210, 212, 213, 216, 221, 222, 224, 225, 226, 228, 229, 232, 233, 234, 235, 236, 237, 240, 242, 245, 249, 250, 251, 252, 254, 255, 257, 261, 266, 282, 283, 285, 286, 288, 289, 294], "larg": [2, 3, 4, 7, 11, 12, 15, 21, 27, 32, 58, 59, 67, 68, 77, 92, 94, 106, 107, 121, 127, 145, 148, 161, 186, 190, 201, 206, 207, 209, 212, 215, 216, 217, 223, 226, 228, 236, 241, 248, 255, 257, 264, 282, 287, 293], "integ": [2, 4, 5, 12, 13, 14, 15, 21, 23, 29, 30, 31, 41, 42, 43, 44, 46, 48, 49, 56, 58, 59, 60, 61, 63, 66, 67, 68, 69, 70, 71, 72, 75, 77, 80, 91, 92, 94, 95, 96, 97, 98, 100, 103, 104, 107, 109, 110, 117, 119, 125, 170, 175, 177, 178, 179, 181, 183, 191, 193, 196, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213, 215, 216, 218, 221, 222, 223, 224, 225, 226, 228, 229, 232, 234, 235, 236, 240, 241, 242, 248, 249, 251, 254, 257, 283, 285, 288, 292, 293], "faster": [2, 11, 21, 27, 32, 33, 48, 52, 67, 75, 98, 107, 108, 121, 123, 126, 127, 145, 205, 206, 207, 209, 211, 212, 213, 217, 219, 223, 228, 229, 232, 233, 235, 248, 251], "than": [2, 3, 4, 5, 8, 9, 11, 12, 13, 14, 15, 17, 19, 20, 21, 22, 23, 27, 29, 31, 32, 33, 34, 35, 36, 39, 40, 44, 48, 49, 50, 52, 58, 59, 60, 66, 67, 68, 71, 72, 73, 75, 76, 81, 82, 83, 85, 89, 92, 94, 96, 97, 98, 100, 103, 104, 106, 107, 108, 109, 113, 115, 117, 121, 126, 130, 131, 135, 138, 155, 161, 175, 178, 179, 181, 190, 200, 201, 204, 205, 206, 207, 209, 212, 213, 214, 216, 219, 223, 224, 225, 226, 228, 229, 231, 232, 233, 234, 235, 236, 243, 248, 249, 251, 254, 255, 257, 258, 282, 283, 285, 286, 287, 288, 289, 291, 293], "int": [2, 4, 5, 12, 13, 14, 15, 21, 22, 23, 40, 46, 48, 59, 67, 68, 69, 72, 73, 75, 76, 83, 92, 94, 95, 97, 98, 103, 104, 107, 109, 115, 117, 125, 161, 165, 166, 175, 191, 193, 195, 196, 201, 202, 206, 207, 211, 212, 213, 216, 218, 219, 221, 232, 233, 236, 248, 252, 254, 255, 257, 285, 287, 288, 292, 293], "core": [2, 3, 4, 7, 11, 12, 14, 15, 18, 21, 22, 23, 29, 44, 46, 48, 58, 68, 73, 74, 76, 84, 92, 98, 107, 109, 179, 180, 204, 206, 207, 208, 209, 211, 212, 213, 216, 223, 224, 228, 229, 232, 236, 246, 247, 248, 254, 255, 259, 272, 273, 285, 288], "oper": [2, 4, 9, 14, 21, 22, 23, 32, 33, 34, 36, 40, 44, 48, 58, 59, 60, 66, 67, 68, 69, 70, 71, 73, 75, 77, 85, 87, 90, 92, 97, 98, 100, 107, 109, 117, 118, 121, 126, 127, 135, 139, 145, 146, 148, 153, 157, 158, 162, 164, 165, 166, 167, 172, 173, 176, 178, 179, 180, 181, 191, 193, 198, 203, 204, 205, 206, 207, 209, 211, 212, 213, 216, 219, 221, 224, 225, 228, 231, 232, 234, 235, 238, 239, 240, 241, 247, 248, 251, 254, 255, 261, 272, 276, 278, 279, 284, 285, 286, 288, 293], "poli": [2, 14, 27, 50, 66, 67, 68, 72, 73, 75, 76, 83, 89, 94, 98, 100, 103, 107, 148, 203, 204, 208, 209, 211, 212, 213, 215, 218, 231, 232, 234, 235, 247, 279], "refer": [2, 3, 5, 11, 12, 13, 14, 15, 19, 22, 23, 24, 27, 29, 30, 31, 32, 33, 35, 36, 38, 42, 43, 44, 46, 48, 51, 53, 55, 56, 58, 59, 60, 61, 65, 68, 70, 72, 73, 75, 77, 82, 83, 84, 89, 95, 96, 97, 98, 104, 108, 110, 115, 117, 118, 120, 122, 125, 126, 127, 128, 130, 131, 133, 141, 143, 146, 148, 149, 150, 152, 154, 158, 160, 162, 163, 164, 167, 169, 170, 178, 179, 181, 190, 191, 192, 193, 195, 197, 199, 205, 206, 208, 216, 218, 219, 221, 224, 228, 231, 232, 233, 234, 236, 242, 251, 254, 255, 257, 261, 265, 266, 270, 278, 279, 285, 289, 290, 293, 294], "domain": [2, 4, 11, 13, 14, 19, 23, 25, 27, 32, 46, 47, 67, 68, 70, 72, 73, 75, 86, 88, 89, 92, 94, 100, 103, 104, 107, 114, 117, 131, 148, 203, 205, 208, 209, 211, 213, 214, 231, 232, 234, 236, 279, 289, 294], "No": [2, 4, 5, 11, 15, 36, 47, 67, 75, 82, 97, 107, 110, 118, 131, 176, 202, 212, 218, 219, 228, 229, 234, 235, 236, 241, 245, 251, 252, 254, 282, 294], "mani": [2, 3, 4, 7, 12, 14, 15, 17, 19, 21, 22, 23, 27, 28, 29, 31, 33, 34, 36, 38, 46, 47, 48, 49, 55, 58, 63, 67, 68, 69, 71, 72, 73, 75, 79, 92, 94, 97, 98, 103, 107, 108, 126, 127, 131, 133, 141, 144, 145, 148, 165, 181, 189, 200, 203, 205, 206, 207, 209, 211, 220, 223, 224, 226, 228, 229, 232, 233, 234, 235, 236, 240, 249, 254, 282, 283, 285, 286, 287, 288, 292, 293, 294], "integr": [2, 11, 12, 14, 15, 18, 28, 38, 40, 46, 59, 66, 67, 69, 72, 73, 85, 86, 87, 90, 96, 98, 103, 106, 107, 117, 119, 126, 130, 131, 141, 148, 167, 176, 179, 182, 185, 190, 192, 197, 201, 203, 206, 207, 209, 212, 213, 216, 218, 219, 226, 232, 233, 236, 249, 257, 261, 264, 265, 268, 269, 273, 276, 284, 287, 292], "algorithm": [2, 4, 14, 21, 27, 31, 33, 35, 36, 46, 51, 52, 57, 58, 59, 61, 63, 65, 66, 67, 68, 71, 72, 73, 79, 84, 92, 94, 97, 100, 103, 104, 107, 110, 118, 125, 145, 168, 186, 191, 201, 202, 203, 204, 205, 206, 207, 210, 211, 213, 217, 221, 224, 225, 228, 229, 232, 234, 235, 236, 242, 251, 254, 278, 283, 288, 289, 293], "simplif": [2, 14, 15, 21, 25, 41, 43, 45, 46, 48, 67, 69, 72, 73, 92, 98, 103, 109, 123, 131, 145, 148, 165, 181, 191, 212, 217, 227, 228, 232, 234, 235, 272, 273, 282, 284, 286, 287], "collect": [2, 5, 8, 20, 47, 48, 58, 67, 84, 94, 107, 110, 117, 130, 139, 148, 181, 188, 201, 207, 212, 225, 226, 228, 232, 236, 247, 254], "factor": [2, 12, 14, 15, 49, 58, 59, 66, 67, 68, 71, 72, 73, 75, 92, 94, 103, 107, 110, 117, 148, 150, 158, 162, 165, 177, 181, 185, 186, 187, 188, 203, 206, 207, 208, 210, 211, 212, 219, 225, 226, 228, 229, 232, 234, 236, 240, 251, 265, 268, 287, 289], "matric": [2, 4, 14, 20, 21, 44, 48, 67, 68, 94, 104, 106, 117, 125, 126, 127, 131, 135, 145, 148, 150, 153, 154, 156, 164, 165, 175, 180, 191, 200, 201, 205, 211, 216, 217, 224, 226, 228, 229, 232, 234, 235, 237, 249, 250, 278, 284, 286, 287], "thu": [2, 3, 11, 13, 14, 15, 19, 29, 31, 32, 34, 44, 52, 58, 59, 67, 68, 69, 73, 75, 90, 92, 94, 98, 101, 103, 106, 107, 118, 126, 127, 130, 135, 141, 145, 186, 191, 204, 209, 211, 213, 217, 223, 226, 228, 249, 254, 255, 266, 267, 285, 288, 293, 294], "speed": [2, 4, 11, 13, 43, 48, 58, 67, 68, 71, 98, 107, 108, 119, 125, 126, 127, 130, 131, 133, 134, 135, 136, 138, 139, 140, 142, 143, 144, 148, 149, 152, 155, 185, 190, 191, 195, 200, 201, 213, 216, 217, 223, 228, 232, 248, 251, 254, 288, 289], "up": [2, 3, 7, 8, 9, 11, 12, 13, 14, 19, 21, 22, 23, 34, 38, 43, 46, 48, 50, 58, 59, 61, 67, 68, 69, 71, 72, 73, 75, 76, 83, 84, 88, 92, 94, 95, 97, 98, 103, 107, 108, 110, 119, 121, 128, 130, 133, 134, 138, 140, 145, 146, 148, 149, 161, 176, 178, 195, 201, 202, 203, 206, 207, 211, 213, 216, 217, 218, 223, 225, 226, 228, 229, 232, 233, 234, 235, 248, 249, 250, 251, 252, 255, 284, 285, 288, 289, 291], "becaus": [2, 3, 4, 5, 8, 11, 12, 13, 14, 15, 17, 21, 22, 23, 27, 30, 31, 32, 33, 34, 35, 36, 38, 39, 44, 48, 59, 66, 67, 68, 73, 79, 83, 84, 92, 94, 97, 101, 103, 107, 109, 125, 130, 131, 135, 161, 169, 181, 183, 185, 186, 199, 202, 203, 205, 206, 207, 209, 211, 212, 213, 215, 216, 219, 223, 226, 228, 229, 232, 233, 234, 235, 245, 247, 248, 250, 254, 255, 257, 265, 283, 285, 287, 288, 289, 292, 293, 294], "make": [2, 3, 4, 5, 8, 9, 12, 13, 14, 15, 17, 19, 21, 22, 23, 27, 32, 33, 35, 39, 42, 43, 44, 46, 48, 49, 57, 58, 66, 67, 68, 69, 70, 71, 72, 73, 75, 79, 83, 94, 95, 97, 103, 106, 107, 108, 109, 110, 111, 113, 126, 130, 131, 133, 134, 138, 139, 143, 145, 146, 148, 161, 178, 183, 190, 196, 199, 202, 205, 206, 207, 209, 211, 212, 213, 215, 216, 219, 224, 225, 226, 228, 232, 233, 234, 235, 240, 242, 245, 247, 248, 249, 250, 252, 254, 255, 265, 270, 271, 285, 286, 287, 288, 289, 293], "non": [2, 3, 12, 14, 15, 21, 23, 27, 33, 34, 36, 39, 44, 46, 49, 57, 60, 66, 67, 68, 72, 73, 74, 75, 76, 77, 80, 81, 82, 94, 96, 97, 98, 99, 100, 103, 104, 106, 107, 121, 126, 128, 133, 135, 139, 143, 144, 148, 165, 170, 180, 181, 183, 197, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 215, 216, 219, 223, 224, 226, 228, 229, 231, 232, 234, 235, 236, 237, 240, 241, 242, 247, 249, 254, 257, 268, 288, 293, 294], "who": [2, 3, 4, 9, 11, 12, 19, 23, 68, 69, 148, 200, 209, 216, 286], "abl": [2, 3, 4, 11, 12, 14, 19, 21, 23, 30, 34, 47, 48, 58, 63, 67, 68, 69, 78, 86, 94, 100, 103, 107, 114, 131, 143, 145, 146, 148, 149, 203, 206, 207, 213, 232, 235, 247, 265, 287, 292, 294], "better": [2, 3, 4, 8, 11, 12, 13, 14, 15, 21, 22, 23, 40, 47, 48, 59, 67, 71, 75, 94, 97, 117, 131, 161, 189, 202, 205, 206, 207, 219, 223, 224, 225, 226, 232, 233, 234, 235, 236, 248, 254, 255, 287, 293], "experi": [2, 133, 235, 236], "design": [2, 3, 4, 13, 14, 16, 18, 22, 23, 25, 28, 33, 37, 44, 49, 57, 67, 103, 106, 109, 130, 148, 149, 206, 210, 216, 221, 226, 232, 235, 287, 288, 292], "interfac": [2, 5, 7, 9, 11, 12, 14, 31, 46, 67, 95, 125, 150, 176, 196, 200, 206, 209, 214, 235, 248, 249], "ipython": [2, 4, 14, 15, 38, 95, 148, 196, 255, 260, 291, 292], "jupyt": [2, 7, 11, 14, 23, 255], "notebook": [2, 14, 23, 38, 95, 196, 255, 291, 292], "init_sess": [2, 95, 292], "command": [2, 4, 8, 9, 11, 12, 14, 15, 27, 30, 36, 38, 48, 71, 95, 131, 143, 148, 196, 202, 216, 247, 248, 292], "In": [2, 3, 4, 5, 8, 9, 11, 12, 13, 14, 15, 17, 19, 21, 22, 23, 27, 31, 36, 38, 44, 46, 47, 48, 49, 50, 51, 56, 57, 58, 59, 66, 67, 68, 69, 71, 72, 73, 75, 80, 82, 83, 84, 85, 92, 94, 95, 96, 97, 98, 100, 103, 104, 107, 109, 111, 113, 117, 121, 125, 126, 128, 130, 131, 134, 135, 136, 141, 142, 143, 144, 145, 146, 148, 149, 167, 169, 170, 171, 176, 180, 181, 184, 185, 186, 190, 195, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 215, 216, 223, 224, 225, 226, 228, 229, 232, 233, 234, 235, 236, 237, 238, 240, 242, 245, 247, 249, 251, 252, 254, 255, 258, 261, 265, 266, 268, 270, 282, 285, 286, 287, 288, 289, 292, 293, 294], "usual": [2, 12, 13, 14, 15, 19, 21, 27, 47, 49, 58, 66, 67, 68, 85, 92, 94, 103, 141, 167, 179, 185, 186, 197, 199, 200, 203, 204, 206, 207, 209, 215, 216, 217, 223, 226, 232, 235, 236, 237, 241, 242, 249, 251, 255, 261, 270, 282, 285, 288, 292, 293], "matplotlib": [2, 4, 5, 8, 13, 34, 38, 90, 95, 115, 148, 161, 196, 202, 292], "flag": [2, 3, 17, 23, 27, 46, 48, 58, 59, 63, 65, 67, 82, 94, 97, 98, 99, 103, 107, 125, 131, 165, 202, 207, 209, 212, 213, 216, 217, 218, 224, 228, 229, 232, 234, 235, 242, 247, 248, 254, 257, 282, 293], "auto_symbol": [2, 95, 109], "auto_int_to_integ": [2, 95], "qt": 2, "consol": [2, 3, 15, 67, 95, 196, 202, 292], "express": [2, 3, 4, 5, 14, 17, 18, 21, 22, 23, 28, 29, 32, 34, 36, 40, 41, 42, 43, 44, 45, 46, 59, 66, 67, 68, 69, 70, 71, 72, 73, 75, 77, 80, 82, 83, 90, 91, 92, 94, 95, 98, 101, 102, 103, 106, 107, 108, 110, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 130, 131, 135, 141, 142, 143, 144, 145, 146, 148, 149, 156, 160, 164, 165, 169, 170, 173, 176, 178, 179, 180, 181, 183, 184, 185, 186, 188, 190, 191, 193, 195, 196, 197, 200, 201, 202, 203, 204, 207, 209, 211, 212, 213, 216, 217, 219, 221, 222, 223, 224, 225, 226, 228, 229, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 245, 248, 249, 250, 251, 252, 255, 257, 261, 263, 264, 265, 267, 268, 270, 276, 278, 283, 284, 285, 286, 287, 289, 292, 293, 294], "mathjax": [2, 5, 95, 196, 292], "preview": [2, 11, 47, 250], "convert": [2, 3, 8, 13, 14, 15, 17, 21, 22, 23, 25, 30, 32, 33, 34, 40, 44, 48, 51, 59, 63, 67, 68, 71, 72, 73, 80, 81, 82, 84, 87, 88, 91, 95, 97, 98, 103, 106, 107, 109, 117, 128, 146, 175, 178, 184, 185, 186, 188, 195, 202, 203, 205, 207, 209, 211, 212, 213, 214, 216, 217, 218, 224, 225, 226, 228, 229, 232, 233, 235, 236, 237, 238, 241, 247, 248, 254, 255, 257, 259, 264, 279, 284, 285, 288, 293], "imag": [2, 8, 58, 125, 137, 142, 148, 150, 154, 203, 207, 209, 216, 224, 235], "render": [2, 4, 5, 8, 11, 12, 48, 67, 95, 196, 202, 216, 255, 292], "either": [2, 4, 5, 8, 11, 12, 13, 14, 15, 21, 22, 23, 27, 30, 31, 32, 33, 35, 40, 44, 46, 47, 51, 59, 66, 67, 68, 71, 72, 73, 75, 82, 84, 90, 92, 94, 95, 97, 98, 103, 107, 117, 122, 125, 126, 127, 130, 131, 144, 146, 148, 165, 171, 178, 181, 183, 185, 196, 200, 202, 204, 205, 206, 207, 209, 211, 212, 216, 218, 223, 224, 225, 226, 229, 232, 233, 234, 235, 236, 237, 240, 241, 248, 254, 255, 261, 270, 285, 288, 289], "save": [2, 9, 12, 13, 14, 46, 67, 103, 107, 202, 215, 234, 251], "show": [2, 3, 4, 5, 8, 11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 34, 48, 59, 66, 67, 71, 73, 90, 92, 94, 103, 107, 110, 111, 113, 115, 121, 131, 137, 142, 146, 148, 176, 180, 184, 186, 191, 199, 200, 202, 203, 206, 207, 209, 211, 212, 216, 217, 219, 223, 224, 225, 226, 228, 229, 232, 234, 236, 237, 245, 248, 249, 252, 254, 255, 285, 287, 289, 292], "viewer": [2, 5, 47, 216, 250], "distribut": [2, 8, 38, 58, 65, 67, 75, 83, 94, 110, 111, 180, 204, 207, 212, 216, 242], "texliv": [2, 8, 216], "miktex": [2, 8], "note": [2, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 17, 19, 21, 22, 25, 28, 29, 30, 32, 33, 34, 35, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 57, 58, 59, 60, 63, 65, 66, 68, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 84, 92, 94, 95, 97, 98, 100, 103, 107, 109, 117, 118, 122, 123, 125, 126, 127, 130, 131, 133, 135, 138, 146, 148, 154, 157, 165, 175, 176, 178, 180, 181, 182, 184, 190, 191, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 215, 216, 217, 218, 219, 222, 224, 226, 228, 229, 231, 232, 233, 234, 235, 236, 241, 242, 245, 247, 248, 249, 250, 251, 252, 254, 255, 257, 258, 266, 268, 270, 282, 283, 284, 286, 287, 288, 289, 293], "parser": [2, 100, 109, 141, 148, 247, 278], "modul": [2, 3, 4, 5, 7, 11, 12, 14, 15, 18, 21, 25, 30, 38, 39, 40, 41, 42, 43, 46, 47, 48, 49, 50, 57, 59, 67, 68, 70, 72, 73, 75, 79, 83, 87, 90, 93, 94, 95, 97, 100, 101, 102, 103, 108, 109, 110, 112, 113, 115, 118, 121, 130, 131, 132, 137, 141, 143, 144, 146, 148, 150, 153, 155, 156, 168, 171, 184, 185, 186, 187, 197, 200, 202, 207, 208, 210, 213, 214, 216, 220, 223, 226, 230, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 264, 266, 268, 269, 270, 271, 272, 278, 279, 280, 282, 285, 287, 293, 294], "time": [2, 3, 5, 7, 8, 11, 12, 13, 14, 15, 19, 21, 22, 25, 27, 34, 36, 39, 43, 44, 48, 50, 58, 59, 63, 67, 68, 72, 75, 90, 92, 97, 98, 103, 104, 106, 107, 108, 109, 114, 115, 117, 121, 126, 127, 130, 131, 133, 135, 138, 139, 141, 143, 144, 145, 146, 148, 149, 155, 165, 170, 178, 179, 183, 184, 185, 186, 187, 190, 191, 193, 195, 196, 197, 198, 199, 200, 201, 203, 205, 206, 209, 210, 211, 212, 213, 215, 216, 223, 224, 225, 226, 228, 232, 234, 236, 245, 247, 248, 253, 254, 255, 268, 270, 280, 283, 287, 288, 289], "parse_expr": [2, 13, 21, 36, 109], "mathematca": 2, "parse_mathematica": [2, 13, 109], "maxima": [2, 31, 109, 235], "parse_maxima": [2, 109], "antlr": [2, 109, 131], "runtim": [2, 14, 48, 67, 127, 255], "autolev": [2, 133, 141, 278], "call": [2, 3, 4, 5, 7, 9, 11, 12, 14, 15, 18, 19, 21, 22, 23, 27, 28, 31, 32, 33, 34, 35, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 56, 57, 58, 59, 65, 67, 68, 70, 71, 72, 74, 75, 77, 82, 83, 85, 90, 92, 94, 96, 97, 98, 99, 100, 101, 103, 105, 106, 107, 109, 110, 111, 117, 121, 125, 131, 133, 135, 142, 145, 146, 171, 173, 176, 181, 185, 186, 191, 197, 199, 200, 201, 202, 203, 204, 206, 207, 209, 211, 212, 213, 214, 215, 216, 218, 223, 224, 226, 228, 229, 231, 232, 234, 235, 236, 237, 238, 240, 242, 243, 245, 247, 248, 249, 250, 251, 252, 254, 255, 257, 261, 264, 265, 268, 270, 283, 285, 287, 288, 289, 292, 293, 294], "antlr4": [2, 109], "python3": [2, 8, 48, 109, 216], "awar": [2, 3, 4, 12, 14, 15, 22, 46, 67, 71, 97, 103, 226, 236, 255], "version": [2, 3, 4, 5, 7, 8, 9, 11, 12, 21, 22, 23, 36, 37, 38, 41, 47, 48, 58, 59, 65, 67, 68, 72, 73, 75, 94, 97, 99, 101, 103, 105, 107, 120, 122, 125, 131, 165, 179, 183, 191, 201, 202, 203, 206, 207, 209, 211, 212, 216, 219, 228, 234, 236, 246, 247, 249, 250, 251, 252, 254, 255, 259, 261, 267, 285, 288, 289], "must": [2, 3, 4, 11, 12, 13, 14, 15, 21, 22, 34, 40, 41, 42, 43, 48, 58, 59, 61, 63, 65, 66, 67, 68, 69, 72, 73, 75, 77, 80, 83, 86, 89, 90, 92, 94, 97, 98, 99, 100, 103, 106, 107, 110, 111, 113, 115, 117, 118, 125, 126, 127, 130, 131, 133, 141, 143, 144, 145, 146, 148, 161, 176, 178, 181, 191, 200, 201, 202, 203, 204, 205, 207, 209, 211, 212, 216, 217, 224, 225, 226, 228, 229, 232, 234, 235, 236, 240, 241, 247, 248, 249, 250, 251, 252, 254, 255, 258, 285, 287, 288, 292, 293], "match": [2, 3, 4, 11, 12, 13, 15, 21, 23, 34, 58, 59, 66, 67, 75, 80, 92, 94, 98, 103, 125, 130, 157, 182, 190, 191, 205, 212, 228, 229, 232, 233, 234, 236, 245, 247, 249, 254, 255, 267, 283], "wa": [2, 3, 9, 11, 12, 13, 15, 17, 21, 23, 34, 50, 56, 58, 59, 61, 67, 68, 69, 75, 80, 103, 107, 109, 121, 122, 128, 131, 133, 135, 145, 146, 176, 186, 199, 200, 201, 203, 209, 211, 212, 213, 215, 216, 225, 226, 228, 232, 234, 236, 245, 247, 250, 252, 254, 255, 283, 285, 287, 288, 291], "compil": [2, 48, 95, 108, 121, 148, 196, 216, 228, 241, 247, 248, 249, 272, 287], "4": [2, 5, 11, 12, 15, 17, 19, 21, 22, 23, 27, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 43, 44, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 80, 81, 82, 83, 84, 86, 89, 90, 92, 94, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 110, 113, 115, 117, 118, 119, 123, 131, 133, 134, 135, 136, 138, 139, 140, 141, 142, 145, 146, 148, 149, 150, 153, 157, 160, 165, 175, 176, 178, 179, 180, 181, 182, 184, 191, 192, 195, 197, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 247, 248, 251, 254, 255, 261, 264, 265, 266, 268, 270, 271, 282, 283, 285, 287, 288, 289, 293, 294], "clang": [2, 109], "bind": [2, 48, 216, 248], "parse_c": 2, "lfortran": [2, 109], "fortran": [2, 14, 19, 23, 46, 108, 109, 121, 148, 201, 249, 292], "satisfi": [2, 5, 12, 13, 21, 30, 31, 35, 43, 44, 46, 49, 55, 58, 63, 67, 68, 72, 75, 77, 90, 92, 96, 97, 103, 107, 127, 145, 165, 170, 203, 204, 207, 209, 211, 212, 216, 222, 223, 224, 229, 232, 233, 234, 235, 236, 242, 288, 293], "includ": [2, 3, 4, 5, 8, 11, 12, 13, 14, 15, 21, 23, 27, 30, 31, 35, 38, 43, 44, 46, 47, 48, 59, 63, 66, 67, 68, 69, 71, 72, 73, 75, 79, 85, 92, 94, 97, 98, 100, 102, 103, 107, 108, 109, 119, 121, 130, 131, 133, 135, 136, 141, 143, 145, 148, 161, 165, 170, 175, 178, 179, 189, 197, 200, 204, 207, 208, 209, 211, 212, 215, 216, 217, 222, 223, 224, 226, 228, 231, 232, 233, 234, 236, 239, 242, 245, 247, 249, 250, 251, 252, 254, 261, 263, 265, 270, 272, 283, 287, 288, 289, 293, 294], "implement": [2, 4, 5, 11, 12, 13, 14, 16, 18, 22, 23, 31, 33, 35, 36, 37, 40, 41, 42, 43, 46, 47, 48, 49, 52, 57, 58, 59, 64, 67, 68, 70, 72, 73, 75, 78, 80, 87, 88, 90, 91, 94, 97, 98, 99, 103, 107, 108, 109, 121, 131, 141, 146, 150, 152, 153, 156, 165, 166, 174, 175, 177, 185, 190, 192, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 217, 220, 223, 224, 225, 228, 229, 232, 233, 234, 235, 236, 240, 241, 251, 254, 255, 258, 269, 272, 276, 283, 287, 293], "dpll": 2, "But": [2, 3, 5, 7, 12, 13, 14, 15, 23, 27, 36, 66, 67, 75, 81, 91, 98, 103, 107, 169, 170, 181, 186, 191, 203, 204, 209, 213, 223, 225, 226, 228, 229, 232, 234, 235, 241, 251, 254, 255, 264, 283, 285, 287, 288, 293], "sat": [2, 42], "solver": [2, 4, 11, 12, 14, 30, 33, 42, 75, 103, 107, 126, 130, 141, 148, 149, 205, 208, 216, 228, 229, 233, 247, 272, 273, 279, 284, 286], "ask": [2, 4, 7, 9, 11, 14, 15, 18, 21, 22, 42, 43, 44, 45, 67, 79, 92, 131, 186, 203, 222, 228, 235, 254, 273, 285], "pycosat": 2, "forc": [2, 15, 19, 22, 23, 67, 71, 73, 77, 83, 92, 94, 97, 110, 111, 113, 122, 125, 126, 128, 130, 133, 135, 136, 137, 138, 141, 143, 144, 145, 146, 148, 169, 170, 184, 197, 200, 202, 204, 206, 225, 228, 229, 234, 247, 268, 270, 278, 292, 293], "pysat": 2, "minisat": 2, "minisat22": 2, "heavi": [2, 12, 236, 288], "primarili": [2, 14, 21, 48, 67, 73, 107, 110, 180, 212, 214, 248, 251, 257, 265], "support": [2, 3, 4, 5, 11, 13, 14, 15, 23, 33, 38, 40, 41, 42, 43, 46, 47, 48, 59, 67, 71, 74, 75, 77, 91, 94, 100, 103, 107, 108, 109, 110, 111, 113, 114, 117, 121, 125, 131, 148, 176, 191, 199, 202, 204, 205, 206, 207, 209, 211, 212, 213, 216, 221, 222, 223, 224, 228, 232, 233, 234, 235, 236, 237, 241, 245, 247, 248, 249, 255, 266, 268, 283, 285, 288, 292], "give": [2, 3, 4, 7, 11, 15, 17, 21, 22, 23, 27, 29, 31, 32, 33, 34, 35, 36, 40, 41, 43, 48, 49, 56, 58, 59, 60, 61, 66, 67, 68, 69, 72, 73, 75, 77, 79, 80, 82, 83, 91, 92, 94, 95, 97, 100, 103, 106, 107, 108, 110, 113, 117, 125, 131, 148, 160, 175, 176, 178, 179, 183, 184, 186, 187, 189, 191, 195, 197, 199, 200, 201, 202, 203, 204, 206, 207, 209, 211, 212, 213, 216, 217, 218, 219, 223, 224, 225, 226, 228, 229, 232, 234, 235, 236, 247, 248, 249, 254, 265, 270, 285, 286, 288, 293, 294], "rudimentari": [2, 23, 209], "text": [2, 3, 4, 5, 11, 12, 13, 14, 23, 38, 48, 58, 68, 72, 73, 75, 85, 92, 95, 98, 103, 107, 146, 186, 196, 201, 202, 203, 216, 223, 229, 232, 235, 236, 247], "pyglet": [2, 216], "pygletplot": [2, 202], "2d": [2, 80, 81, 83, 110, 111, 113, 159, 191, 202, 216, 229, 241, 287], "3d": [2, 40, 51, 80, 81, 110, 159, 182, 197, 202, 265, 267, 268, 269, 270], "evalu": [2, 4, 14, 19, 21, 22, 28, 34, 36, 40, 41, 42, 43, 46, 48, 67, 69, 72, 73, 75, 78, 82, 83, 92, 94, 97, 100, 103, 107, 108, 109, 117, 121, 123, 131, 145, 146, 156, 158, 160, 162, 164, 167, 170, 178, 181, 201, 202, 206, 207, 209, 210, 212, 216, 217, 222, 223, 224, 226, 228, 229, 232, 234, 235, 236, 237, 238, 248, 249, 250, 255, 268, 273, 282, 283, 284, 285, 287, 289], "numer": [2, 4, 12, 13, 14, 15, 17, 19, 21, 28, 29, 30, 31, 32, 35, 40, 44, 46, 48, 66, 67, 72, 75, 79, 83, 90, 103, 107, 109, 113, 114, 115, 117, 125, 126, 127, 131, 133, 141, 145, 146, 149, 153, 160, 163, 178, 190, 200, 202, 206, 207, 209, 210, 211, 212, 215, 216, 225, 226, 228, 232, 234, 235, 241, 247, 248, 254, 255, 273, 282, 285, 289, 293], "variou": [2, 4, 5, 14, 19, 23, 27, 30, 46, 48, 50, 51, 58, 66, 67, 72, 87, 92, 94, 97, 103, 128, 146, 160, 164, 165, 176, 178, 203, 204, 207, 208, 209, 211, 217, 223, 226, 229, 232, 233, 235, 249, 293], "primari": [2, 3, 4, 5, 12, 21, 23, 67, 79, 97, 200, 203, 249, 255], "vehicl": 2, "between": [2, 3, 9, 12, 13, 14, 18, 22, 23, 27, 31, 47, 48, 57, 58, 59, 61, 65, 67, 69, 72, 75, 77, 79, 80, 81, 82, 83, 84, 94, 96, 97, 100, 101, 103, 107, 108, 109, 113, 114, 115, 117, 125, 128, 130, 131, 134, 138, 140, 142, 145, 146, 148, 149, 150, 153, 154, 160, 167, 169, 170, 171, 175, 178, 179, 180, 181, 184, 185, 186, 190, 191, 192, 193, 195, 197, 199, 200, 202, 203, 205, 209, 211, 212, 216, 218, 228, 232, 233, 234, 235, 236, 237, 250, 255, 261, 264, 265, 268, 270, 285], "standard": [2, 5, 12, 13, 14, 15, 21, 23, 27, 31, 32, 34, 36, 48, 67, 71, 73, 75, 90, 92, 94, 95, 96, 97, 101, 103, 107, 108, 109, 120, 158, 162, 191, 197, 201, 203, 206, 207, 209, 216, 219, 224, 228, 229, 232, 235, 236, 238, 249, 255, 258, 265, 270, 282, 285, 293], "wai": [2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 27, 29, 31, 34, 39, 47, 49, 50, 51, 56, 58, 59, 60, 63, 67, 69, 72, 75, 83, 87, 91, 92, 94, 96, 100, 103, 106, 107, 109, 110, 113, 121, 126, 128, 130, 131, 135, 137, 138, 141, 145, 161, 175, 178, 179, 184, 186, 189, 190, 191, 193, 195, 197, 199, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 215, 216, 223, 226, 228, 229, 232, 233, 235, 237, 238, 241, 242, 245, 249, 251, 254, 255, 258, 261, 265, 266, 267, 268, 270, 282, 283, 285, 286, 287, 288, 293, 294], "principl": [2, 68, 98, 107, 152, 201, 203, 204, 209, 225, 234], "pass": [2, 3, 4, 11, 12, 14, 15, 17, 18, 21, 22, 23, 29, 30, 33, 34, 36, 39, 40, 43, 46, 47, 48, 58, 59, 67, 68, 69, 71, 73, 74, 75, 77, 80, 81, 83, 94, 95, 97, 98, 100, 103, 104, 107, 109, 110, 115, 117, 122, 126, 130, 131, 135, 146, 148, 149, 153, 170, 171, 175, 176, 178, 179, 191, 196, 202, 203, 205, 206, 207, 209, 211, 212, 214, 216, 217, 223, 224, 228, 229, 232, 233, 234, 235, 236, 237, 240, 241, 242, 245, 247, 248, 249, 250, 252, 254, 255, 257, 260, 261, 282, 283, 288, 292, 293, 294], "appropri": [2, 4, 5, 11, 12, 13, 15, 19, 31, 35, 58, 67, 73, 82, 103, 121, 133, 170, 171, 181, 191, 199, 205, 206, 212, 213, 216, 222, 223, 228, 229, 234, 236, 241, 249, 266, 292], "namespac": [2, 4, 13, 39, 48, 49, 67, 130, 207, 229, 232, 233, 247, 249, 250, 255], "dictionari": [2, 12, 13, 14, 30, 34, 36, 47, 48, 56, 58, 59, 65, 67, 72, 81, 83, 94, 96, 98, 103, 106, 107, 109, 110, 123, 126, 127, 130, 131, 133, 135, 138, 143, 145, 171, 181, 191, 200, 202, 204, 207, 209, 211, 212, 214, 216, 223, 228, 229, 232, 233, 234, 235, 236, 240, 242, 247, 251, 254, 255, 261, 282, 289], "third": [2, 3, 17, 27, 40, 48, 58, 59, 67, 75, 77, 81, 103, 117, 125, 130, 178, 184, 185, 199, 204, 212, 226, 232, 235, 236, 238, 252, 254, 283, 288], "argument": [2, 3, 4, 11, 12, 14, 18, 21, 22, 23, 27, 29, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 58, 59, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 80, 83, 84, 92, 94, 95, 97, 98, 100, 103, 106, 107, 109, 110, 115, 117, 125, 126, 130, 131, 143, 144, 146, 148, 155, 158, 162, 164, 167, 170, 175, 176, 178, 179, 180, 181, 189, 196, 197, 201, 202, 203, 204, 206, 207, 209, 211, 212, 215, 216, 217, 218, 222, 223, 224, 225, 226, 228, 229, 232, 233, 234, 236, 238, 240, 241, 247, 248, 249, 250, 251, 252, 254, 255, 257, 265, 266, 268, 282, 283, 288, 289, 293], "default": [2, 3, 4, 5, 11, 12, 13, 14, 15, 21, 23, 27, 31, 32, 34, 39, 40, 41, 42, 43, 46, 47, 48, 49, 50, 51, 57, 58, 65, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 80, 81, 82, 83, 84, 86, 89, 94, 95, 97, 98, 100, 103, 104, 107, 108, 109, 110, 111, 113, 115, 117, 119, 121, 122, 123, 125, 126, 127, 130, 131, 145, 154, 171, 173, 176, 178, 179, 181, 185, 187, 190, 191, 193, 195, 196, 201, 202, 204, 205, 206, 207, 209, 211, 212, 213, 215, 216, 217, 218, 219, 223, 224, 225, 228, 229, 232, 233, 234, 235, 236, 241, 242, 247, 248, 249, 251, 252, 254, 255, 257, 261, 282, 283, 287, 289, 292, 293], "translat": [2, 13, 48, 58, 67, 76, 78, 82, 84, 108, 109, 117, 120, 125, 126, 130, 138, 140, 142, 146, 199, 202, 216, 232, 234, 248, 249, 255, 257, 266], "numpi": [2, 4, 12, 13, 14, 23, 27, 32, 33, 34, 38, 48, 67, 90, 95, 108, 115, 131, 148, 165, 175, 205, 216, 236, 241, 248, 249, 255, 282, 285], "By": [2, 15, 21, 23, 27, 31, 32, 34, 40, 41, 43, 48, 57, 66, 67, 69, 71, 72, 75, 81, 82, 86, 90, 92, 97, 98, 103, 106, 107, 108, 109, 110, 111, 115, 122, 176, 181, 202, 204, 206, 207, 209, 211, 212, 213, 215, 216, 218, 223, 225, 228, 229, 232, 234, 235, 236, 240, 242, 243, 247, 250, 254, 255, 268, 282, 287, 288, 293], "produc": [2, 4, 5, 12, 14, 22, 23, 30, 32, 33, 34, 36, 47, 58, 67, 68, 80, 94, 97, 103, 191, 205, 206, 211, 212, 216, 223, 232, 233, 234, 236, 245, 247, 251, 252, 254, 255, 292], "math": [2, 4, 8, 12, 23, 36, 40, 44, 47, 49, 58, 67, 72, 75, 77, 94, 103, 107, 108, 113, 131, 141, 197, 202, 207, 210, 215, 216, 232, 233, 236, 248, 249, 255, 266, 267, 268, 269, 270, 282, 283, 287], "behavior": [2, 3, 12, 13, 14, 15, 23, 58, 67, 72, 75, 94, 109, 120, 121, 141, 145, 176, 203, 204, 211, 212, 216, 217, 221, 223, 225, 228, 245, 248, 250, 254, 255, 285], "backward": [2, 19, 46, 67, 98, 103, 117, 130, 216, 254, 293], "compat": [2, 3, 8, 18, 48, 67, 75, 95, 98, 103, 108, 121, 130, 183, 188, 196, 202, 205, 207, 211, 212, 216, 236, 240, 243, 247, 249, 255], "scipi": [2, 7, 14, 27, 29, 32, 75, 121, 148, 175, 216, 236, 255, 282, 291], "special": [2, 4, 11, 14, 16, 21, 23, 32, 36, 39, 40, 50, 59, 67, 68, 70, 71, 72, 74, 82, 85, 92, 94, 98, 103, 148, 165, 170, 197, 203, 206, 209, 210, 211, 216, 225, 226, 228, 231, 232, 233, 234, 236, 247, 248, 249, 252, 254, 255, 265, 268, 270, 273, 283, 284, 288], "cupi": [2, 108], "cuda": [2, 108], "gpu": [2, 108, 148], "jax": [2, 108, 255], "xla": [2, 108], "program": [2, 5, 15, 21, 48, 51, 59, 148, 186, 201, 249, 251, 285, 287, 291, 293], "tpu": [2, 108], "compatibli": 2, "tensorflow": [2, 255], "machin": [2, 4, 7, 8, 9, 217, 228, 232, 282], "learn": [2, 5, 8, 28, 34, 36, 103, 146, 200, 225, 235, 282, 285, 286, 287, 291], "numexpr": [2, 255], "fast": [2, 21, 34, 48, 67, 102, 103, 107, 126, 127, 153, 207, 208, 209, 210, 211, 212, 213, 219, 223, 232, 234, 251, 254, 255], "alreadi": [2, 3, 7, 9, 10, 11, 12, 13, 15, 21, 23, 30, 31, 34, 36, 38, 40, 58, 59, 67, 68, 76, 77, 80, 81, 83, 92, 94, 98, 104, 107, 113, 118, 122, 130, 131, 145, 150, 176, 178, 181, 197, 199, 200, 202, 205, 206, 209, 211, 215, 219, 225, 226, 228, 232, 235, 236, 242, 266, 268, 283, 285, 286, 287, 291, 292, 293, 294], "number": [2, 3, 4, 5, 11, 12, 13, 14, 17, 18, 21, 23, 25, 27, 30, 31, 32, 35, 36, 40, 42, 43, 46, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 68, 69, 72, 73, 75, 77, 80, 81, 82, 83, 84, 86, 94, 95, 96, 97, 98, 100, 103, 104, 106, 108, 109, 111, 113, 115, 117, 118, 119, 121, 126, 127, 130, 131, 135, 145, 146, 148, 154, 157, 160, 161, 164, 165, 166, 167, 169, 170, 175, 176, 177, 178, 179, 181, 182, 183, 186, 189, 190, 191, 195, 196, 197, 199, 200, 201, 202, 204, 205, 207, 208, 209, 210, 212, 213, 216, 218, 222, 223, 224, 225, 226, 228, 229, 232, 234, 235, 236, 237, 241, 242, 247, 249, 251, 254, 255, 257, 261, 264, 265, 267, 268, 270, 273, 279, 282, 283, 285, 287, 288, 289, 293], "languag": [2, 5, 14, 15, 19, 23, 48, 73, 103, 109, 121, 131, 148, 216, 221, 236, 248, 249, 285, 287, 289, 291, 293], "valid": [2, 4, 5, 11, 13, 21, 22, 23, 30, 34, 41, 43, 45, 46, 47, 48, 60, 66, 67, 72, 73, 83, 103, 107, 109, 123, 125, 126, 127, 130, 131, 133, 150, 154, 173, 178, 185, 188, 190, 191, 196, 200, 206, 209, 212, 215, 216, 224, 228, 229, 232, 234, 235, 236, 255, 289, 293], "rather": [2, 3, 4, 5, 11, 12, 13, 14, 15, 17, 19, 21, 22, 23, 27, 31, 34, 35, 36, 39, 44, 48, 49, 50, 58, 59, 60, 67, 71, 73, 78, 83, 85, 92, 97, 98, 100, 103, 107, 109, 130, 138, 148, 161, 175, 179, 181, 185, 190, 199, 203, 206, 209, 212, 214, 219, 226, 229, 231, 232, 235, 236, 238, 251, 254, 255, 258, 270, 285, 287, 288], "simpli": [2, 3, 5, 8, 12, 21, 22, 29, 30, 44, 49, 50, 66, 67, 69, 73, 77, 98, 100, 103, 107, 109, 110, 113, 118, 122, 131, 133, 145, 171, 176, 186, 197, 200, 206, 212, 213, 224, 225, 226, 231, 232, 235, 252, 254, 255, 268], "string": [2, 3, 4, 5, 7, 11, 12, 14, 15, 23, 40, 41, 47, 48, 51, 56, 67, 68, 69, 70, 71, 74, 80, 90, 95, 96, 97, 100, 103, 107, 109, 110, 113, 115, 121, 122, 125, 126, 127, 128, 152, 161, 165, 175, 179, 183, 189, 190, 191, 195, 196, 197, 202, 205, 207, 211, 216, 217, 223, 228, 232, 236, 237, 240, 241, 242, 247, 248, 249, 254, 255, 257, 259, 261, 263, 265, 284, 285, 288, 292], "repres": [2, 12, 13, 14, 15, 18, 21, 22, 23, 25, 30, 32, 34, 40, 42, 44, 47, 48, 49, 50, 51, 56, 57, 58, 59, 60, 62, 63, 66, 67, 68, 69, 72, 73, 75, 77, 78, 80, 82, 83, 84, 89, 90, 94, 96, 97, 98, 100, 103, 107, 109, 110, 111, 114, 115, 117, 122, 125, 126, 128, 130, 131, 133, 134, 135, 136, 139, 141, 143, 144, 145, 146, 148, 150, 152, 153, 155, 167, 168, 170, 174, 175, 178, 179, 181, 183, 185, 186, 187, 188, 189, 190, 191, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 207, 209, 212, 214, 216, 218, 219, 222, 223, 224, 226, 228, 229, 232, 234, 235, 236, 237, 238, 240, 241, 242, 249, 251, 254, 255, 261, 264, 268, 270, 278, 283, 285, 287, 288, 293, 294], "take": [2, 3, 5, 9, 11, 12, 13, 14, 15, 19, 21, 22, 23, 29, 30, 31, 32, 34, 43, 46, 48, 49, 52, 57, 58, 62, 66, 67, 68, 69, 73, 75, 79, 80, 90, 94, 96, 97, 98, 103, 107, 108, 109, 110, 113, 117, 121, 125, 126, 128, 130, 131, 133, 145, 148, 150, 164, 167, 170, 171, 175, 177, 178, 179, 180, 181, 183, 186, 189, 190, 191, 192, 193, 196, 199, 200, 202, 203, 204, 205, 206, 207, 209, 212, 213, 216, 219, 222, 223, 224, 225, 226, 228, 229, 232, 234, 235, 236, 238, 241, 247, 248, 250, 251, 254, 255, 261, 263, 264, 282, 283, 285, 287, 288, 289, 293], "within": [2, 5, 12, 13, 14, 21, 33, 46, 47, 48, 50, 67, 73, 80, 83, 97, 98, 100, 107, 108, 110, 138, 146, 176, 191, 199, 200, 204, 206, 207, 212, 214, 224, 232, 234, 235, 236, 247, 248, 257], "case": [2, 3, 4, 5, 11, 12, 13, 14, 15, 19, 21, 22, 25, 27, 30, 31, 32, 33, 34, 35, 36, 40, 46, 47, 48, 49, 50, 52, 55, 58, 59, 63, 66, 67, 68, 69, 71, 72, 73, 75, 79, 82, 83, 84, 85, 89, 92, 94, 97, 98, 100, 103, 104, 107, 108, 109, 111, 117, 121, 125, 126, 131, 133, 134, 135, 136, 142, 144, 146, 148, 154, 165, 171, 176, 178, 180, 181, 186, 187, 195, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 215, 216, 221, 223, 224, 225, 226, 228, 229, 231, 232, 233, 234, 236, 237, 240, 242, 245, 247, 249, 250, 252, 254, 255, 256, 257, 258, 261, 264, 265, 283, 287, 288, 289, 292, 293, 294], "abov": [2, 3, 4, 5, 8, 11, 12, 13, 15, 17, 19, 22, 23, 25, 27, 29, 33, 34, 36, 46, 47, 48, 49, 51, 57, 58, 59, 63, 66, 67, 71, 72, 75, 77, 80, 83, 84, 92, 94, 97, 98, 103, 108, 109, 111, 117, 121, 125, 126, 128, 130, 131, 133, 134, 135, 136, 141, 142, 144, 145, 146, 149, 176, 178, 181, 191, 197, 199, 200, 202, 203, 204, 206, 207, 209, 211, 212, 213, 215, 216, 217, 223, 226, 228, 229, 232, 234, 235, 236, 240, 241, 248, 249, 255, 265, 266, 267, 268, 271, 285, 287, 288, 289, 293], "subpackag": [2, 272], "f2py": [2, 48, 108, 248, 249], "ufuncifi": [2, 48, 248], "cython": [2, 48, 108, 148, 248], "codegen": [2, 23, 108, 216, 248, 253, 280], "relat": [2, 3, 4, 5, 11, 12, 14, 22, 41, 43, 44, 46, 49, 51, 57, 58, 65, 69, 72, 73, 83, 89, 92, 94, 103, 107, 113, 120, 126, 135, 138, 141, 142, 148, 150, 155, 163, 165, 185, 191, 195, 199, 201, 202, 203, 209, 211, 212, 213, 215, 216, 220, 222, 223, 226, 228, 229, 231, 232, 234, 235, 236, 254, 293], "reli": [2, 12, 13, 48, 103, 108, 114, 209, 215, 216, 223, 228, 235, 250, 255, 289], "llvm": 2, "gcc": [2, 249], "ifort": 2, "therefor": [2, 3, 4, 12, 23, 27, 31, 49, 58, 63, 67, 71, 75, 80, 83, 96, 107, 117, 125, 130, 197, 200, 201, 202, 206, 209, 212, 216, 232, 235, 236, 237, 242, 261, 263, 265, 266, 268, 270], "given": [2, 3, 5, 8, 12, 13, 14, 15, 17, 19, 21, 23, 25, 27, 29, 32, 34, 40, 42, 43, 46, 47, 48, 49, 51, 55, 56, 57, 58, 59, 60, 61, 63, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 89, 90, 91, 92, 94, 96, 97, 98, 100, 103, 106, 107, 109, 110, 113, 115, 117, 118, 122, 123, 125, 126, 128, 130, 131, 135, 146, 154, 171, 176, 178, 185, 186, 187, 189, 191, 192, 193, 195, 197, 200, 201, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215, 216, 219, 221, 222, 223, 224, 225, 226, 228, 229, 231, 232, 233, 234, 235, 236, 237, 241, 242, 245, 247, 249, 251, 254, 255, 257, 258, 261, 264, 266, 268, 270, 282, 288, 291, 293, 294], "instead": [2, 3, 4, 5, 8, 11, 12, 13, 14, 15, 17, 21, 22, 23, 29, 31, 32, 34, 35, 36, 39, 40, 41, 43, 47, 48, 58, 60, 63, 67, 69, 70, 71, 72, 75, 94, 95, 97, 98, 100, 101, 103, 107, 115, 118, 120, 130, 131, 133, 135, 145, 148, 179, 183, 191, 196, 197, 199, 200, 203, 206, 207, 209, 211, 212, 214, 216, 218, 226, 228, 232, 234, 235, 236, 240, 241, 242, 245, 250, 251, 252, 254, 255, 268, 271, 282, 283, 285, 287, 288, 289, 293, 294], "aesara": [2, 13, 48, 148], "aesaracod": [2, 13, 48, 108, 216], "contain": [2, 3, 4, 5, 8, 11, 12, 13, 14, 15, 17, 21, 22, 23, 29, 30, 31, 32, 34, 35, 36, 39, 41, 42, 46, 47, 48, 49, 50, 58, 59, 63, 65, 66, 69, 70, 71, 73, 75, 76, 78, 80, 81, 82, 83, 84, 93, 94, 96, 97, 98, 100, 103, 106, 107, 108, 109, 110, 112, 113, 115, 116, 118, 122, 126, 127, 128, 130, 133, 135, 145, 146, 148, 149, 150, 151, 152, 154, 155, 156, 168, 171, 173, 176, 178, 181, 200, 201, 202, 203, 204, 205, 206, 207, 209, 211, 212, 216, 217, 218, 223, 224, 226, 228, 229, 230, 232, 233, 234, 235, 236, 240, 241, 242, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 261, 264, 272, 283, 285, 289, 293], "aeseara": 2, "previous": [2, 3, 11, 13, 66, 125, 139, 142, 197, 215, 228, 236, 268], "theano": [2, 13, 148, 292], "return": [2, 3, 4, 5, 11, 12, 13, 14, 15, 17, 19, 21, 22, 23, 27, 30, 31, 33, 35, 36, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 55, 56, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 90, 92, 94, 96, 97, 98, 99, 100, 103, 104, 106, 107, 109, 110, 113, 115, 117, 118, 119, 120, 122, 123, 125, 126, 127, 128, 130, 131, 133, 135, 139, 143, 145, 146, 148, 150, 152, 153, 154, 155, 157, 158, 162, 165, 166, 167, 170, 171, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 187, 188, 189, 190, 191, 192, 193, 195, 197, 200, 201, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 228, 229, 231, 232, 233, 234, 236, 237, 238, 240, 241, 242, 243, 245, 247, 248, 249, 250, 251, 252, 254, 255, 257, 258, 259, 261, 264, 266, 268, 282, 283, 288, 289, 292, 293, 294], "graph": [2, 4, 14, 59, 75, 96, 103, 108, 205, 216, 235, 236, 254, 288, 292], "object": [2, 3, 4, 5, 7, 11, 12, 14, 15, 20, 21, 22, 23, 25, 34, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 51, 57, 58, 59, 60, 61, 62, 66, 67, 69, 72, 73, 75, 77, 78, 79, 80, 82, 83, 84, 92, 94, 97, 98, 100, 101, 103, 108, 109, 110, 111, 113, 115, 117, 118, 121, 122, 125, 126, 127, 128, 130, 131, 135, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 154, 155, 156, 164, 165, 167, 175, 176, 180, 181, 183, 184, 185, 187, 188, 191, 195, 196, 199, 200, 202, 203, 204, 205, 206, 207, 209, 211, 212, 216, 218, 219, 222, 223, 224, 225, 228, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 247, 248, 249, 250, 251, 254, 255, 258, 259, 264, 265, 266, 271, 272, 276, 282, 283, 285, 287, 288, 289, 292, 293], "llvmlite": 2, "llvmjitcod": 2, "jit": [2, 225], "from": [2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 17, 18, 19, 21, 22, 23, 25, 27, 29, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 130, 131, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 173, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 228, 229, 231, 232, 233, 234, 235, 236, 237, 240, 241, 242, 243, 245, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 259, 261, 263, 264, 265, 266, 267, 268, 270, 271, 279, 282, 283, 285, 287, 288, 289, 292, 293, 294], "around": [2, 3, 4, 5, 7, 11, 12, 13, 14, 15, 22, 23, 38, 46, 56, 59, 67, 68, 69, 71, 73, 76, 83, 87, 103, 106, 107, 113, 122, 125, 141, 145, 149, 200, 206, 209, 211, 216, 218, 223, 229, 232, 235, 236, 247, 261, 263, 283, 285, 287], "llvm_callabl": 2, "callabl": [2, 15, 34, 48, 58, 103, 109, 126, 127, 166, 211, 216, 217, 228, 245, 248, 249, 254, 255, 256], "unlik": [2, 4, 12, 14, 15, 21, 22, 27, 34, 45, 68, 94, 103, 107, 109, 131, 199, 209, 216, 229, 232, 235, 251, 252, 285, 287, 288, 289, 292], "two": [2, 3, 4, 5, 7, 8, 11, 12, 13, 14, 15, 17, 19, 21, 22, 23, 27, 29, 31, 34, 35, 40, 46, 47, 48, 49, 52, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 71, 72, 73, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 89, 90, 92, 94, 96, 97, 98, 100, 103, 107, 108, 110, 111, 113, 114, 117, 118, 121, 122, 125, 126, 134, 139, 141, 142, 143, 145, 146, 153, 154, 155, 160, 161, 165, 167, 170, 171, 176, 177, 178, 179, 180, 181, 183, 185, 186, 190, 191, 192, 193, 195, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 215, 216, 217, 218, 223, 224, 225, 226, 228, 229, 232, 233, 234, 235, 236, 237, 238, 241, 251, 254, 255, 261, 264, 266, 267, 268, 270, 282, 283, 286, 288, 289, 293], "tensorflow_cod": 2, "avail": [2, 5, 7, 8, 9, 13, 14, 15, 21, 27, 33, 36, 37, 38, 47, 48, 58, 59, 66, 67, 72, 75, 94, 103, 107, 108, 109, 131, 145, 148, 206, 207, 209, 212, 216, 217, 222, 224, 226, 228, 229, 234, 235, 236, 237, 241, 242, 247, 254, 255, 260, 261, 285, 292], "order": [2, 3, 4, 5, 11, 12, 13, 14, 15, 17, 19, 21, 22, 25, 27, 29, 34, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 77, 80, 83, 84, 86, 89, 92, 94, 95, 96, 97, 98, 103, 104, 107, 108, 109, 110, 111, 117, 118, 121, 125, 126, 130, 131, 132, 133, 134, 142, 143, 144, 145, 146, 154, 158, 162, 165, 175, 176, 177, 178, 179, 180, 181, 185, 186, 190, 191, 193, 195, 196, 199, 200, 202, 203, 204, 205, 206, 207, 209, 211, 213, 215, 216, 217, 218, 219, 222, 224, 228, 229, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 247, 248, 249, 251, 254, 255, 257, 261, 263, 265, 266, 271, 283, 285, 286, 288, 292, 293, 294], "detect": [2, 8, 39, 46, 100, 103, 107, 202, 206, 216, 232, 233, 235, 237, 254, 292], "assum": [2, 4, 14, 15, 18, 21, 23, 31, 34, 35, 40, 43, 48, 49, 51, 56, 58, 66, 67, 68, 69, 72, 73, 75, 77, 84, 85, 92, 94, 103, 107, 110, 113, 117, 130, 131, 137, 143, 144, 145, 146, 148, 154, 176, 180, 181, 191, 195, 197, 203, 204, 206, 209, 212, 214, 216, 223, 224, 226, 228, 229, 232, 233, 235, 236, 240, 241, 242, 249, 254, 257, 264, 266, 270, 273, 286, 288, 291, 293, 294], "wurlitz": 2, "allow": [2, 3, 5, 11, 12, 13, 14, 15, 21, 23, 27, 44, 47, 48, 49, 51, 58, 60, 63, 66, 67, 68, 71, 73, 75, 77, 78, 79, 92, 95, 97, 98, 100, 101, 103, 107, 108, 109, 111, 125, 126, 131, 133, 141, 145, 146, 148, 153, 165, 181, 185, 186, 187, 200, 202, 203, 206, 207, 209, 211, 212, 213, 216, 221, 223, 224, 225, 228, 229, 232, 234, 235, 236, 237, 241, 247, 250, 252, 254, 255, 266, 285, 288], "captur": [2, 67, 254], "output": [2, 4, 5, 11, 12, 13, 15, 16, 19, 21, 23, 25, 31, 34, 36, 47, 48, 67, 68, 75, 91, 94, 95, 97, 98, 100, 103, 107, 108, 109, 114, 117, 126, 130, 131, 139, 145, 148, 149, 153, 154, 165, 177, 181, 190, 191, 195, 196, 197, 200, 206, 209, 212, 216, 217, 226, 228, 229, 231, 232, 234, 236, 241, 247, 248, 249, 251, 254, 255, 261, 285, 287, 288, 289, 292, 293, 294], "suit": [2, 3, 5, 11, 12, 21, 23, 31, 32, 47, 202, 212, 245, 247], "stat": [2, 9, 272, 279], "sampl": [2, 19, 58, 70, 115, 117, 165, 202, 216, 236, 283, 287], "At": [2, 12, 21, 23, 31, 46, 63, 73, 75, 94, 107, 110, 111, 121, 186, 190, 200, 211, 226, 255], "least": [2, 3, 5, 7, 11, 12, 13, 17, 21, 34, 44, 46, 48, 58, 67, 73, 79, 91, 92, 94, 103, 107, 108, 126, 161, 175, 183, 185, 203, 204, 206, 207, 209, 211, 212, 223, 225, 228, 232, 234, 235, 236, 249, 293], "follow": [2, 3, 4, 5, 7, 8, 11, 12, 13, 15, 17, 19, 21, 22, 23, 25, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 41, 43, 46, 47, 48, 49, 50, 56, 57, 58, 59, 60, 63, 66, 67, 68, 71, 72, 73, 75, 79, 81, 83, 90, 91, 92, 94, 97, 98, 100, 103, 107, 108, 110, 111, 113, 125, 126, 128, 130, 131, 133, 141, 142, 143, 144, 145, 146, 148, 150, 154, 173, 176, 178, 181, 184, 186, 190, 191, 197, 199, 200, 201, 202, 203, 204, 207, 209, 210, 211, 212, 214, 215, 216, 217, 218, 223, 225, 226, 228, 229, 232, 233, 234, 235, 236, 237, 240, 241, 242, 247, 250, 251, 254, 255, 258, 265, 266, 268, 282, 283, 285, 286, 288, 289, 293, 294], "random": [2, 4, 13, 50, 51, 56, 58, 59, 65, 68, 77, 80, 81, 102, 103, 107, 165, 177, 202, 207, 209, 211, 212, 216, 246, 247, 250, 254, 285, 289, 293], "pymc": [2, 236], "manipul": [2, 14, 18, 19, 21, 27, 30, 32, 34, 47, 48, 49, 58, 67, 73, 75, 92, 107, 108, 124, 131, 141, 146, 179, 199, 205, 206, 207, 210, 215, 216, 218, 225, 228, 239, 254, 272, 278, 279, 282, 283, 284, 285, 286, 287, 289, 292, 293], "first": [2, 4, 5, 7, 8, 9, 11, 12, 14, 15, 19, 21, 22, 23, 27, 31, 34, 35, 38, 40, 47, 48, 49, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 80, 81, 83, 84, 91, 92, 94, 96, 97, 98, 103, 106, 107, 110, 111, 117, 118, 123, 125, 126, 128, 130, 131, 133, 134, 135, 136, 141, 142, 145, 146, 149, 153, 154, 158, 162, 165, 170, 171, 174, 175, 176, 177, 178, 180, 181, 184, 186, 191, 195, 199, 200, 202, 203, 205, 207, 209, 210, 211, 212, 213, 216, 217, 218, 219, 222, 223, 225, 226, 228, 229, 232, 233, 234, 235, 236, 240, 242, 245, 247, 248, 249, 250, 254, 255, 257, 266, 271, 282, 283, 285, 287, 288, 289, 291, 293, 294], "use_symengin": 2, "1": [2, 3, 5, 7, 8, 11, 12, 14, 15, 17, 18, 19, 21, 22, 23, 27, 28, 29, 30, 31, 32, 33, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 113, 115, 117, 118, 119, 120, 121, 122, 123, 125, 126, 128, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 146, 148, 149, 150, 152, 153, 154, 155, 156, 160, 163, 164, 165, 166, 167, 169, 170, 171, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 257, 261, 264, 265, 266, 268, 271, 278, 282, 283, 285, 287, 288, 289, 292, 293, 294], "environ": [2, 6, 8, 10, 11, 12, 13, 14, 67, 95, 196, 216, 236, 247, 257, 285, 287, 292], "physic": [2, 4, 19, 24, 25, 48, 60, 103, 107, 110, 111, 113, 114, 115, 116, 117, 119, 120, 122, 123, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 138, 139, 140, 141, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 191, 192, 193, 195, 196, 201, 210, 236, 251, 254, 268, 287, 293], "mechan": [2, 23, 26, 67, 90, 94, 103, 110, 122, 123, 125, 126, 127, 128, 130, 131, 133, 134, 135, 136, 138, 139, 140, 163, 167, 170, 176, 178, 179, 180, 183, 190, 191, 198, 201, 278], "liealgebra": [2, 96], "thing": [2, 3, 4, 5, 7, 11, 12, 13, 14, 15, 16, 21, 22, 23, 27, 29, 37, 44, 48, 57, 58, 59, 67, 69, 79, 95, 96, 97, 98, 103, 108, 121, 131, 145, 148, 165, 181, 186, 199, 200, 213, 215, 223, 224, 225, 228, 232, 235, 240, 250, 252, 254, 282, 283, 285, 287, 288, 289, 292, 293], "configur": [2, 3, 11, 12, 13, 25, 59, 97, 117, 125, 126, 134, 135, 138, 140, 141, 143, 145, 216], "otherwis": [2, 3, 12, 17, 21, 22, 23, 46, 47, 48, 58, 59, 63, 66, 67, 68, 71, 73, 75, 76, 77, 80, 81, 82, 83, 92, 94, 96, 97, 99, 103, 106, 107, 109, 115, 117, 119, 122, 130, 131, 166, 171, 177, 195, 198, 199, 203, 207, 209, 211, 212, 214, 216, 218, 219, 221, 222, 224, 228, 229, 232, 233, 234, 235, 236, 237, 245, 247, 249, 254, 255, 282, 283, 292], "ordinari": [2, 21, 22, 28, 46, 48, 58, 67, 71, 72, 73, 75, 85, 89, 90, 94, 104, 117, 141, 203, 205, 206, 215, 222, 232, 237, 251, 287, 293], "x": [2, 3, 4, 5, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 56, 58, 59, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 103, 106, 107, 108, 109, 110, 111, 113, 115, 117, 120, 121, 122, 123, 125, 126, 127, 128, 130, 131, 133, 134, 135, 136, 138, 139, 140, 142, 143, 144, 145, 146, 148, 149, 153, 155, 156, 157, 158, 159, 161, 162, 165, 170, 171, 176, 178, 179, 180, 181, 182, 190, 191, 192, 193, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 228, 229, 231, 232, 233, 234, 235, 236, 237, 240, 241, 242, 243, 247, 248, 249, 250, 252, 254, 255, 257, 261, 264, 265, 266, 267, 268, 270, 271, 282, 283, 285, 287, 288, 289, 292, 293, 294], "still": [2, 3, 4, 5, 12, 13, 14, 15, 21, 23, 38, 39, 40, 47, 59, 66, 67, 68, 75, 79, 94, 98, 103, 131, 181, 200, 202, 203, 204, 209, 211, 216, 223, 225, 226, 228, 232, 234, 235, 241, 247, 254, 268, 289], "experiment": [2, 3, 130, 228], "mathemat": [2, 3, 5, 12, 13, 14, 18, 21, 23, 29, 31, 33, 34, 36, 37, 40, 42, 43, 46, 48, 49, 53, 57, 59, 66, 67, 68, 69, 72, 73, 74, 75, 80, 81, 92, 94, 97, 100, 103, 107, 108, 109, 117, 118, 121, 135, 147, 186, 197, 199, 200, 203, 204, 206, 207, 210, 215, 216, 224, 225, 229, 231, 232, 235, 236, 241, 248, 249, 255, 261, 265, 268, 270, 282, 285, 286, 287, 288, 291, 293], "softwar": [2, 5, 94, 210, 287], "itself": [2, 3, 4, 5, 7, 11, 12, 13, 14, 23, 44, 56, 58, 59, 65, 67, 69, 72, 73, 80, 84, 89, 107, 126, 130, 131, 146, 171, 178, 197, 199, 202, 203, 206, 209, 211, 212, 216, 224, 225, 228, 235, 240, 241, 242, 249, 251, 254, 270, 287], "_sage_": 2, "basic": [2, 3, 4, 5, 7, 10, 11, 13, 14, 21, 23, 36, 40, 42, 47, 48, 49, 55, 58, 62, 65, 66, 70, 73, 83, 85, 90, 91, 92, 97, 98, 101, 104, 117, 125, 130, 131, 143, 144, 146, 148, 149, 155, 165, 179, 186, 189, 194, 197, 198, 200, 202, 203, 205, 207, 208, 209, 211, 213, 214, 216, 217, 223, 228, 229, 232, 233, 234, 235, 236, 247, 249, 254, 255, 259, 267, 268, 269, 276, 278, 279, 283, 284, 285, 286, 291], "should": [2, 4, 5, 8, 9, 11, 12, 13, 14, 15, 18, 21, 22, 23, 27, 34, 36, 39, 41, 43, 46, 47, 48, 49, 58, 59, 60, 61, 63, 66, 67, 68, 70, 71, 73, 75, 77, 78, 79, 80, 81, 82, 84, 89, 90, 91, 92, 94, 95, 96, 97, 98, 100, 103, 107, 109, 110, 115, 117, 121, 126, 127, 130, 131, 133, 135, 143, 145, 146, 148, 149, 150, 161, 164, 165, 169, 171, 173, 175, 176, 179, 181, 183, 184, 186, 187, 191, 196, 199, 200, 202, 203, 204, 205, 206, 207, 209, 211, 212, 215, 216, 218, 219, 222, 223, 224, 225, 226, 228, 229, 231, 232, 234, 235, 236, 240, 241, 245, 247, 248, 249, 250, 251, 252, 254, 255, 257, 261, 265, 282, 283, 285, 286, 289], "beyond": [2, 11, 12, 21, 29, 61, 83, 107, 145, 203, 206, 225, 228, 289], "control": [2, 7, 9, 13, 15, 17, 21, 23, 26, 47, 49, 67, 68, 71, 92, 97, 98, 145, 148, 161, 165, 176, 177, 181, 212, 213, 217, 224, 229, 235, 254, 278, 282], "workflow": [2, 6, 7, 8, 9, 10, 12, 33, 34, 37, 148, 206, 249, 255, 290], "instruct": [2, 4, 5, 7, 8, 9, 11, 13, 15, 19, 24, 37, 48, 216, 234, 248, 249], "base": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 15, 21, 23, 27, 38, 40, 42, 43, 46, 48, 49, 56, 57, 58, 63, 64, 65, 67, 68, 70, 72, 73, 74, 75, 78, 80, 83, 90, 94, 95, 96, 97, 99, 100, 107, 108, 114, 122, 125, 128, 130, 131, 133, 148, 149, 150, 159, 161, 165, 166, 170, 176, 177, 179, 181, 183, 186, 187, 189, 191, 193, 196, 197, 200, 201, 202, 205, 206, 207, 208, 209, 210, 211, 212, 216, 218, 223, 224, 225, 226, 228, 229, 232, 234, 236, 240, 241, 242, 247, 248, 249, 250, 251, 252, 254, 255, 256, 261, 264, 265, 268, 288, 293], "pytest": [2, 3, 11, 12, 13, 244, 250, 252, 255, 280], "entir": [2, 3, 12, 21, 58, 67, 68, 71, 72, 75, 81, 83, 92, 106, 123, 130, 142, 146, 191, 203, 205, 211, 224, 241, 250, 252, 287, 293], "import_modul": [2, 12], "own": [2, 4, 9, 11, 12, 15, 23, 42, 51, 58, 59, 67, 83, 111, 125, 131, 148, 211, 216, 223, 228, 232, 251, 254, 255, 287], "runner": [2, 12, 247], "access": [2, 4, 5, 9, 14, 15, 21, 23, 41, 42, 43, 48, 67, 75, 96, 97, 100, 103, 108, 111, 117, 118, 125, 126, 130, 131, 149, 190, 191, 197, 200, 202, 206, 207, 209, 211, 228, 232, 237, 240, 248, 249, 265, 268, 288, 292], "script": [2, 4, 11, 14, 39, 75, 196, 248], "directori": [2, 4, 5, 7, 8, 11, 12, 38, 43, 48, 232, 247, 248, 257], "prefer": [2, 4, 8, 9, 11, 12, 13, 14, 21, 23, 27, 32, 33, 34, 48, 50, 59, 66, 67, 75, 107, 109, 125, 131, 181, 185, 186, 191, 202, 205, 207, 209, 211, 216, 224, 228, 232, 234, 241, 247, 249, 252, 255, 287, 289], "cloudpickl": 2, "effect": [2, 4, 7, 12, 23, 33, 38, 58, 60, 67, 84, 92, 94, 98, 103, 110, 131, 133, 145, 153, 181, 191, 202, 206, 209, 213, 215, 232, 285], "pickl": 2, "util": [2, 3, 4, 5, 7, 11, 29, 31, 46, 54, 56, 58, 59, 72, 73, 78, 79, 80, 83, 97, 98, 107, 108, 126, 151, 185, 188, 205, 209, 213, 216, 228, 229, 245, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 273, 278, 279], "test_pickl": 2, "py": [2, 3, 4, 11, 12, 21, 47, 67, 78, 92, 94, 103, 130, 159, 161, 202, 205, 207, 213, 216, 223, 226, 232, 233, 242, 245, 247, 252, 255], "necessari": [2, 3, 4, 6, 8, 11, 12, 13, 15, 21, 23, 37, 46, 47, 58, 59, 67, 77, 92, 94, 97, 103, 107, 126, 133, 141, 202, 204, 206, 211, 212, 216, 219, 225, 228, 232, 233, 234, 235, 236, 237, 242, 247, 249, 254, 255, 261, 286, 291], "want": [2, 3, 4, 8, 9, 11, 12, 13, 14, 15, 18, 19, 21, 22, 23, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 44, 46, 48, 49, 50, 51, 59, 67, 68, 74, 79, 81, 83, 86, 92, 94, 98, 100, 103, 104, 107, 108, 115, 117, 120, 127, 131, 148, 164, 174, 175, 178, 181, 184, 186, 193, 195, 199, 200, 202, 204, 205, 206, 209, 211, 212, 213, 215, 216, 217, 223, 224, 226, 228, 229, 232, 233, 234, 235, 236, 237, 242, 245, 247, 249, 251, 254, 255, 266, 268, 271, 282, 283, 285, 287, 288, 289, 290, 292, 293], "check": [2, 3, 4, 5, 7, 8, 9, 11, 14, 15, 17, 18, 19, 21, 22, 23, 30, 34, 36, 42, 43, 46, 47, 48, 50, 53, 56, 58, 59, 60, 65, 66, 67, 68, 72, 75, 79, 90, 92, 96, 97, 98, 100, 103, 104, 107, 117, 122, 123, 130, 131, 145, 148, 161, 169, 181, 183, 184, 189, 197, 202, 203, 205, 206, 207, 209, 211, 212, 218, 224, 226, 228, 232, 233, 234, 235, 236, 240, 241, 245, 247, 249, 252, 254, 264, 268, 285, 293], "pdf": [2, 5, 7, 25, 34, 37, 46, 47, 58, 68, 70, 72, 89, 94, 103, 107, 110, 111, 113, 115, 117, 202, 205, 207, 210, 215, 216, 219, 225, 228, 229, 232, 236, 254, 261], "view": [2, 4, 7, 11, 12, 14, 36, 48, 49, 50, 67, 103, 110, 183, 186, 200, 202, 209, 216, 232, 235, 249, 251, 254], "host": [2, 5], "onlin": [2, 4, 126, 229, 254], "dev": [2, 3, 8, 9, 11, 252], "index": [2, 8, 11, 12, 13, 15, 23, 27, 34, 35, 36, 40, 48, 56, 58, 59, 63, 66, 67, 68, 69, 72, 73, 75, 78, 83, 92, 94, 97, 98, 100, 103, 106, 107, 117, 130, 131, 148, 149, 150, 152, 154, 155, 165, 174, 176, 178, 181, 186, 191, 202, 203, 207, 211, 212, 213, 216, 221, 222, 226, 234, 236, 237, 239, 240, 242, 243, 248, 276], "com": [2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 23, 25, 38, 40, 44, 46, 58, 60, 61, 67, 68, 70, 71, 72, 73, 75, 77, 83, 84, 92, 94, 98, 103, 107, 115, 201, 210, 219, 221, 224, 225, 228, 229, 232, 235, 236, 254, 257, 289], "sympy_benchmark": 2, "readm": 2, "yourself": [2, 7, 11, 12, 23, 36, 48, 133, 250, 283], "reproduc": [2, 12, 27, 212, 247, 293], "result": [2, 4, 8, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 36, 40, 41, 42, 43, 44, 46, 47, 48, 57, 58, 59, 63, 66, 67, 68, 69, 71, 73, 75, 79, 84, 85, 89, 91, 92, 94, 96, 97, 98, 100, 103, 106, 107, 108, 109, 110, 117, 118, 121, 122, 123, 126, 127, 131, 135, 141, 145, 148, 164, 166, 173, 175, 176, 178, 180, 181, 183, 184, 185, 186, 190, 191, 200, 202, 203, 206, 207, 209, 210, 211, 212, 213, 214, 216, 218, 223, 224, 225, 226, 228, 229, 231, 232, 233, 234, 235, 236, 237, 240, 241, 243, 247, 248, 249, 251, 252, 254, 255, 257, 261, 264, 266, 285, 287, 288, 289, 293], "add": [2, 3, 4, 9, 12, 13, 14, 15, 18, 21, 34, 40, 42, 46, 48, 56, 58, 63, 68, 71, 74, 82, 84, 92, 96, 100, 103, 107, 110, 113, 122, 130, 131, 148, 159, 165, 175, 180, 181, 184, 199, 200, 202, 205, 206, 207, 209, 211, 212, 213, 216, 217, 226, 228, 229, 232, 233, 235, 236, 238, 240, 241, 242, 250, 255, 259, 283, 285, 288, 292, 293], "new": [2, 3, 5, 6, 7, 8, 9, 12, 14, 21, 23, 30, 37, 42, 43, 47, 48, 49, 58, 59, 66, 67, 68, 69, 75, 80, 83, 92, 94, 95, 98, 103, 107, 110, 113, 117, 122, 125, 131, 138, 140, 147, 148, 150, 171, 177, 178, 181, 183, 186, 187, 189, 190, 191, 195, 200, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 216, 223, 226, 228, 229, 232, 234, 235, 236, 237, 238, 247, 248, 252, 255, 261, 263, 265, 281, 282, 285, 288, 289, 291], "asv": 2, "airspe": 2, "veloc": [2, 103, 121, 122, 125, 126, 128, 130, 133, 134, 135, 138, 139, 140, 142, 145, 146, 148, 155, 183, 185, 186, 190, 191, 195, 197, 200, 268, 270], "name": [2, 3, 4, 5, 8, 12, 13, 14, 15, 21, 23, 34, 35, 39, 42, 43, 47, 48, 49, 50, 54, 57, 60, 63, 66, 67, 68, 69, 72, 73, 74, 75, 77, 80, 92, 94, 95, 96, 100, 103, 107, 109, 110, 113, 122, 125, 128, 130, 131, 133, 148, 152, 161, 176, 183, 186, 187, 188, 189, 190, 191, 193, 195, 197, 200, 202, 203, 204, 206, 207, 209, 211, 213, 216, 222, 226, 228, 229, 232, 233, 235, 236, 241, 242, 245, 247, 248, 249, 250, 255, 257, 258, 259, 261, 265, 268, 273, 282, 285, 288, 289, 293], "describ": [3, 4, 5, 7, 11, 13, 15, 21, 22, 23, 27, 34, 40, 47, 49, 57, 58, 59, 61, 62, 65, 66, 67, 68, 72, 75, 77, 82, 83, 92, 94, 98, 103, 106, 107, 117, 121, 125, 126, 127, 128, 130, 131, 134, 135, 136, 138, 140, 141, 142, 143, 144, 145, 146, 160, 181, 186, 190, 191, 197, 199, 200, 203, 206, 209, 211, 217, 223, 226, 228, 229, 232, 235, 236, 240, 249, 254, 255, 261, 263, 268, 283], "step": [3, 8, 9, 23, 24, 25, 37, 46, 48, 58, 62, 63, 66, 67, 68, 75, 91, 92, 94, 103, 107, 108, 126, 130, 138, 141, 143, 148, 149, 183, 195, 200, 201, 202, 206, 207, 209, 211, 212, 216, 217, 218, 221, 224, 225, 226, 228, 229, 232, 234, 236, 241, 248, 254, 255, 283], "properli": [3, 11, 12, 14, 23, 47, 67, 73, 79, 92, 103, 127, 131, 143, 158, 162, 165, 179, 204, 206, 216, 232, 235, 245, 249, 255, 289, 294], "current": [3, 5, 11, 12, 13, 15, 21, 29, 30, 40, 43, 46, 47, 48, 49, 51, 58, 61, 62, 64, 65, 66, 67, 69, 73, 75, 77, 79, 82, 87, 90, 92, 94, 96, 98, 103, 107, 109, 110, 114, 121, 125, 131, 141, 175, 180, 181, 185, 189, 200, 202, 203, 204, 205, 207, 209, 212, 213, 215, 216, 217, 223, 226, 228, 229, 231, 232, 233, 234, 235, 236, 242, 247, 248, 249, 251, 265, 279, 289, 294], "activ": [3, 8, 9, 16, 133, 202, 245, 250, 252], "updat": [3, 11, 13, 15, 34, 38, 67, 130, 135, 161, 171, 174, 175, 177, 201, 205, 209, 212, 216, 229, 242, 252], "continu": [3, 4, 5, 12, 13, 19, 22, 23, 25, 46, 48, 57, 59, 61, 67, 72, 73, 75, 92, 95, 98, 107, 114, 115, 117, 176, 179, 196, 207, 209, 212, 229, 231, 232, 240, 284], "someon": [3, 11, 12, 232, 251, 286], "warn": [3, 4, 15, 23, 67, 68, 82, 109, 191, 200, 204, 216, 232, 234, 245, 247, 249, 253, 254, 280, 289], "screen": [3, 14, 95, 196, 200, 247, 292], "indic": [3, 4, 11, 12, 15, 18, 21, 31, 34, 35, 46, 47, 48, 49, 51, 56, 58, 59, 60, 62, 63, 65, 66, 67, 70, 71, 72, 75, 77, 82, 83, 92, 94, 97, 98, 100, 103, 106, 107, 118, 130, 135, 165, 176, 178, 179, 181, 186, 190, 191, 201, 205, 206, 207, 211, 212, 213, 216, 223, 224, 225, 228, 229, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 247, 248, 249, 254, 289], "remov": [3, 11, 12, 13, 21, 29, 40, 41, 42, 58, 61, 65, 67, 71, 73, 82, 83, 92, 97, 103, 107, 110, 113, 122, 125, 126, 138, 140, 145, 165, 181, 207, 209, 212, 214, 215, 216, 228, 229, 232, 234, 235, 237, 238, 248, 249, 250, 252, 254, 255, 282, 293], "futur": [3, 11, 12, 21, 22, 48, 49, 67, 92, 94, 103, 109, 125, 130, 133, 141, 145, 181, 185, 198, 202, 204, 215, 216, 228, 232, 241, 247, 250, 252, 255, 278, 288, 294], "chanc": [3, 12, 15, 22, 67, 95, 103, 226, 236, 288], "break": [3, 4, 11, 12, 13, 23, 47, 48, 59, 67, 68, 107, 199, 213, 216, 224, 254], "opportun": [3, 4, 228], "messag": [3, 7, 12, 13, 68, 95, 245, 250, 252, 257], "wrong": [3, 5, 11, 12, 13, 58, 67, 68, 75, 77, 103, 191, 206, 232, 250, 285, 289], "answer": [3, 7, 12, 21, 23, 27, 58, 67, 71, 89, 92, 94, 97, 103, 107, 186, 209, 213, 225, 226, 228, 234, 236, 251, 257, 287, 289, 293], "made": [3, 5, 11, 12, 13, 14, 15, 21, 23, 35, 61, 63, 67, 68, 73, 76, 77, 80, 83, 84, 94, 97, 103, 107, 109, 131, 142, 145, 148, 200, 203, 207, 209, 211, 212, 216, 217, 223, 224, 225, 228, 232, 234, 235, 236, 249, 254, 257, 270, 288], "lightli": 3, "fix": [3, 4, 7, 12, 13, 48, 58, 60, 63, 65, 68, 72, 75, 79, 96, 103, 107, 110, 111, 122, 125, 128, 130, 133, 142, 148, 165, 170, 174, 177, 181, 186, 191, 195, 199, 200, 202, 206, 209, 211, 212, 213, 216, 222, 226, 234, 236, 254, 261, 263], "whether": [3, 7, 8, 12, 13, 14, 21, 22, 23, 27, 32, 34, 35, 36, 46, 47, 48, 53, 58, 66, 67, 68, 74, 75, 79, 82, 94, 95, 97, 98, 103, 107, 113, 121, 126, 127, 130, 131, 164, 169, 188, 193, 200, 202, 205, 206, 207, 211, 212, 216, 219, 223, 224, 228, 229, 232, 234, 235, 236, 237, 247, 249, 254, 255, 261, 264, 285, 289], "worth": [3, 21, 23, 126, 191, 266, 268], "pain": 3, "frustrat": 3, "go": [3, 4, 5, 7, 9, 11, 12, 23, 38, 47, 48, 58, 68, 72, 73, 92, 126, 131, 133, 146, 148, 149, 175, 186, 195, 202, 211, 212, 223, 226, 232, 285, 287, 288, 291, 293], "seek": [3, 234], "stabl": [3, 4, 5, 23, 25, 48, 67, 95, 103, 109, 113, 117, 248, 282], "altern": [3, 4, 8, 13, 14, 15, 22, 23, 38, 48, 55, 58, 59, 66, 67, 71, 72, 73, 74, 75, 98, 100, 104, 108, 131, 143, 145, 191, 199, 201, 202, 204, 205, 206, 211, 212, 216, 221, 223, 225, 234, 235, 237, 238, 254, 285, 287, 289], "done": [3, 4, 9, 11, 12, 13, 14, 15, 19, 23, 42, 43, 45, 46, 47, 48, 58, 60, 65, 67, 68, 69, 72, 75, 78, 79, 92, 94, 98, 103, 107, 125, 126, 130, 131, 133, 139, 146, 148, 167, 176, 177, 178, 181, 183, 184, 191, 197, 199, 200, 202, 203, 205, 209, 212, 213, 215, 216, 217, 225, 228, 229, 232, 234, 235, 236, 241, 242, 247, 248, 251, 255, 265, 266, 282, 285, 287, 288, 289], "exist": [3, 7, 11, 13, 14, 19, 21, 23, 33, 36, 46, 47, 48, 51, 58, 67, 71, 77, 79, 82, 83, 84, 85, 94, 97, 103, 107, 113, 127, 130, 171, 197, 200, 202, 203, 204, 205, 207, 209, 211, 216, 223, 224, 226, 229, 232, 234, 235, 247, 255, 266, 287, 289, 294], "necessarili": [3, 4, 21, 44, 67, 68, 69, 92, 94, 97, 126, 203, 204, 211, 212, 214, 228, 232, 234, 235], "supplant": 3, "old": [3, 12, 13, 14, 15, 67, 68, 69, 95, 145, 150, 186, 196, 202, 203, 207, 216, 217, 228, 232, 235, 237, 282], "sometim": [3, 4, 5, 11, 12, 14, 15, 21, 23, 27, 34, 47, 48, 67, 72, 75, 91, 92, 117, 141, 145, 173, 181, 200, 203, 206, 211, 216, 218, 223, 225, 229, 232, 234, 245, 254, 282, 289], "alongsid": [3, 11, 12, 13, 23, 100], "newer": [3, 12, 14, 199, 234], "solveset": [3, 23, 33, 36, 126, 148, 214, 230, 231, 234, 273, 294], "superior": [3, 216], "replac": [3, 4, 9, 12, 13, 14, 15, 21, 46, 48, 58, 66, 67, 68, 71, 72, 73, 75, 77, 81, 94, 97, 98, 103, 107, 108, 109, 121, 123, 125, 148, 170, 176, 191, 202, 203, 209, 212, 213, 217, 223, 225, 226, 228, 232, 234, 235, 242, 243, 254, 255, 257, 282, 291], "older": [3, 5, 12, 14, 90, 131, 206, 216, 234], "solv": [3, 4, 11, 13, 14, 15, 16, 19, 21, 23, 24, 25, 26, 48, 51, 63, 66, 67, 75, 80, 92, 94, 98, 99, 103, 107, 110, 112, 113, 125, 126, 127, 130, 131, 134, 135, 138, 140, 141, 143, 145, 148, 184, 205, 209, 213, 214, 215, 216, 218, 228, 229, 231, 232, 233, 236, 278, 283, 284, 287, 289, 292], "remain": [3, 12, 13, 14, 23, 42, 43, 48, 58, 59, 61, 63, 67, 68, 73, 92, 98, 107, 109, 118, 131, 180, 197, 199, 200, 211, 212, 213, 222, 225, 226, 232, 233, 234, 236, 238, 242, 251, 254, 255, 265, 270, 282, 285, 287, 288, 289], "intact": [3, 13, 48, 248], "cogniz": 3, "properti": [3, 14, 18, 23, 27, 32, 34, 40, 42, 43, 46, 47, 48, 49, 50, 51, 55, 56, 58, 59, 60, 61, 62, 66, 67, 68, 69, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 90, 92, 94, 98, 100, 103, 107, 110, 111, 113, 114, 117, 122, 125, 126, 128, 130, 146, 148, 150, 152, 155, 156, 159, 160, 165, 166, 167, 169, 170, 177, 179, 181, 183, 185, 186, 188, 189, 190, 191, 192, 193, 197, 200, 201, 202, 204, 205, 206, 207, 209, 211, 212, 215, 218, 219, 222, 223, 224, 226, 229, 232, 235, 236, 241, 242, 247, 249, 250, 261, 264, 265, 266, 268, 270, 289], "attr": [3, 48], "imposs": [3, 4, 12, 13, 14, 23, 34, 67, 206, 225, 232, 233, 245, 285, 293], "later": [3, 13, 19, 48, 58, 92, 97, 98, 121, 127, 128, 130, 133, 135, 136, 143, 145, 148, 155, 190, 199, 206, 209, 215, 216, 217, 226, 228, 232, 251, 265, 282, 283, 285, 287, 288, 293], "unsur": [3, 4, 12], "about": [3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 16, 19, 21, 22, 23, 27, 32, 34, 36, 37, 38, 40, 41, 43, 44, 47, 48, 58, 59, 60, 61, 67, 71, 73, 75, 77, 78, 79, 81, 82, 83, 87, 89, 93, 94, 96, 103, 107, 110, 111, 117, 121, 122, 123, 125, 126, 127, 128, 130, 131, 135, 145, 146, 176, 178, 179, 181, 185, 190, 191, 199, 200, 201, 203, 205, 206, 211, 213, 216, 218, 223, 228, 229, 230, 232, 236, 240, 241, 247, 248, 249, 250, 251, 252, 261, 263, 265, 268, 269, 276, 279, 282, 284, 285, 287, 288, 289, 293], "option": [3, 4, 5, 8, 11, 12, 15, 23, 27, 29, 41, 43, 46, 48, 58, 65, 66, 67, 68, 69, 70, 71, 73, 76, 77, 80, 81, 83, 84, 86, 94, 95, 98, 100, 103, 104, 107, 108, 109, 110, 115, 117, 121, 122, 123, 125, 126, 127, 128, 130, 146, 148, 154, 165, 170, 171, 173, 176, 178, 183, 185, 190, 191, 196, 202, 203, 204, 205, 206, 207, 211, 212, 213, 215, 216, 217, 218, 219, 221, 223, 224, 225, 228, 229, 232, 233, 234, 235, 236, 238, 241, 242, 247, 248, 249, 252, 254, 255, 261, 286, 292, 293], "mark": [3, 4, 5, 115, 154, 166, 229, 245, 250, 252], "explicitli": [3, 12, 13, 14, 21, 23, 48, 58, 59, 67, 68, 70, 73, 75, 80, 84, 100, 103, 108, 117, 131, 146, 191, 202, 204, 206, 207, 209, 212, 216, 228, 232, 234, 252, 285, 289, 292, 294], "privat": [3, 4, 67, 68, 131, 202, 249], "With": [3, 13, 15, 22, 25, 38, 48, 50, 66, 67, 71, 92, 107, 130, 134, 135, 136, 142, 144, 145, 154, 178, 181, 200, 202, 203, 204, 206, 207, 214, 215, 216, 223, 228, 237, 254, 287, 288], "being": [3, 5, 12, 14, 15, 17, 21, 22, 44, 46, 48, 58, 59, 65, 66, 67, 68, 72, 73, 75, 77, 79, 80, 83, 84, 92, 97, 98, 103, 104, 107, 110, 111, 113, 121, 130, 131, 133, 145, 146, 148, 149, 177, 186, 190, 193, 197, 199, 200, 201, 202, 203, 205, 206, 211, 212, 213, 215, 216, 225, 226, 228, 229, 232, 233, 234, 235, 236, 242, 245, 247, 251, 252, 254, 255, 257, 261, 266, 270, 287, 289], "decid": [3, 4, 9, 19, 21, 22, 23, 27, 47, 66, 98, 121, 145, 174, 206, 209, 211, 212, 216, 232, 235, 249, 289], "reason": [3, 5, 11, 12, 13, 14, 17, 21, 22, 23, 33, 34, 40, 48, 59, 65, 67, 71, 75, 92, 95, 101, 103, 126, 127, 131, 133, 138, 141, 145, 152, 186, 196, 200, 205, 206, 209, 210, 213, 216, 224, 226, 228, 232, 235, 245, 251, 252, 254, 255, 282, 283, 287, 288, 289], "confus": [3, 5, 12, 13, 14, 21, 30, 67, 72, 97, 154, 200, 204, 212, 235, 282, 283, 285], "unnecessari": [3, 4, 5, 12, 44, 48, 212, 215, 236, 247, 286], "redund": [3, 12, 21, 58, 65, 97, 103, 232, 249], "usabl": [3, 34, 206, 207, 216, 235, 287], "breakag": 3, "serious": 3, "taken": [3, 12, 14, 48, 49, 50, 55, 58, 65, 66, 67, 72, 73, 75, 84, 98, 107, 117, 119, 121, 122, 145, 148, 178, 184, 191, 195, 201, 202, 206, 211, 212, 216, 219, 223, 225, 226, 235, 236, 241, 249, 254, 261], "commun": [3, 5, 7, 11, 38, 201, 232, 234, 236, 289], "Be": [3, 4, 8, 23, 46, 67, 97, 103, 209, 232, 235, 243, 255], "sure": [3, 4, 5, 8, 9, 11, 12, 23, 48, 58, 67, 79, 130, 131, 161, 186, 212, 213, 223, 232, 234, 235, 248, 254, 285, 288, 293], "inde": [3, 12, 19, 23, 55, 58, 66, 92, 203, 226, 232, 243, 247, 287], "right": [3, 4, 5, 8, 11, 12, 13, 15, 19, 23, 25, 28, 29, 32, 34, 40, 46, 48, 49, 58, 59, 63, 67, 68, 70, 72, 73, 75, 83, 84, 92, 94, 97, 98, 103, 106, 107, 109, 110, 111, 113, 117, 126, 130, 131, 145, 148, 149, 153, 160, 165, 167, 169, 170, 175, 178, 181, 190, 191, 197, 200, 201, 202, 203, 205, 211, 212, 213, 214, 216, 218, 219, 223, 224, 226, 232, 233, 235, 236, 247, 249, 251, 254, 268, 283, 287, 289, 293], "again": [3, 8, 9, 12, 15, 19, 22, 50, 59, 67, 82, 107, 130, 131, 133, 176, 177, 190, 191, 199, 203, 204, 211, 219, 226, 232, 245, 265, 285, 293], "second": [3, 5, 9, 11, 12, 14, 15, 19, 21, 22, 23, 27, 29, 31, 32, 34, 36, 39, 40, 43, 46, 48, 58, 59, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 75, 77, 80, 81, 83, 94, 103, 107, 108, 110, 111, 115, 117, 118, 121, 122, 125, 126, 128, 131, 135, 138, 140, 141, 142, 144, 146, 152, 154, 155, 158, 162, 167, 170, 175, 176, 178, 179, 184, 185, 186, 188, 190, 191, 192, 199, 200, 202, 205, 206, 209, 210, 211, 212, 216, 218, 226, 228, 229, 232, 234, 235, 236, 237, 238, 254, 255, 261, 264, 265, 266, 278, 282, 287, 288, 289], "know": [3, 4, 5, 12, 13, 14, 15, 21, 22, 23, 27, 34, 35, 36, 41, 43, 47, 50, 59, 67, 68, 71, 79, 84, 92, 94, 103, 107, 131, 146, 149, 175, 179, 183, 184, 186, 191, 199, 200, 202, 212, 213, 215, 216, 226, 228, 232, 234, 235, 236, 250, 254, 255, 266, 282, 283, 285, 286, 287, 288, 291, 293], "stop": [3, 8, 11, 48, 49, 59, 67, 103, 107, 202, 222, 224, 232, 236], "after": [3, 4, 5, 8, 9, 11, 12, 13, 15, 38, 40, 42, 43, 47, 49, 55, 58, 59, 63, 65, 66, 67, 68, 69, 73, 82, 84, 89, 94, 98, 103, 107, 109, 110, 117, 130, 142, 143, 145, 148, 150, 154, 166, 178, 186, 190, 197, 200, 205, 209, 211, 212, 213, 214, 216, 217, 222, 229, 232, 233, 234, 235, 237, 247, 250, 255, 257, 261, 264, 268, 282, 283, 285, 289, 293], "count": [3, 5, 14, 59, 66, 67, 68, 72, 77, 97, 103, 106, 107, 176, 212, 224, 225, 228, 235, 236, 242, 251, 254], "basi": [3, 67, 69, 96, 100, 103, 122, 128, 138, 140, 166, 175, 176, 178, 181, 183, 186, 189, 190, 191, 197, 199, 201, 203, 205, 207, 212, 215, 226, 228, 234, 235, 237, 242, 264, 265, 268, 291], "exact": [3, 11, 12, 13, 14, 15, 21, 23, 25, 33, 44, 66, 67, 68, 71, 77, 82, 89, 92, 94, 98, 103, 110, 148, 175, 206, 207, 209, 212, 223, 228, 232, 234, 247, 257, 285, 287, 292], "rule": [3, 5, 11, 12, 13, 19, 21, 23, 48, 58, 59, 66, 67, 75, 90, 92, 94, 97, 98, 103, 110, 126, 131, 162, 165, 186, 191, 197, 200, 201, 207, 213, 215, 216, 217, 222, 226, 228, 232, 242, 254, 255, 268, 285, 288], "doesn": [3, 4, 12, 13, 15, 23, 27, 48, 91, 131, 135, 145, 148, 200, 204, 213, 215, 225, 228, 235, 294], "constitut": [3, 5, 14, 94, 107, 216], "yet": [3, 9, 11, 15, 21, 23, 41, 43, 46, 47, 71, 94, 130, 145, 161, 203, 206, 207, 211, 213, 215, 224, 232, 235, 283], "fulli": [3, 4, 11, 13, 21, 58, 67, 84, 94, 97, 109, 110, 111, 125, 131, 148, 181, 199, 206, 207, 213, 223, 236, 242, 258], "codifi": 3, "clean": [3, 247], "distinct": [3, 5, 14, 17, 21, 23, 35, 48, 58, 59, 67, 68, 72, 80, 92, 97, 103, 107, 130, 199, 206, 211, 212, 216, 224, 226, 293], "well": [3, 4, 5, 7, 11, 13, 14, 15, 17, 19, 21, 23, 38, 44, 46, 47, 48, 49, 50, 51, 59, 66, 67, 72, 73, 75, 94, 98, 101, 103, 113, 118, 121, 125, 130, 131, 133, 135, 136, 145, 146, 171, 180, 183, 184, 190, 199, 201, 202, 203, 205, 206, 207, 209, 211, 216, 223, 224, 225, 226, 228, 232, 234, 235, 247, 248, 265, 266, 270, 285, 287, 288, 293], "categor": [3, 27, 103, 203], "issu": [3, 5, 7, 12, 13, 14, 15, 22, 23, 27, 29, 30, 31, 32, 33, 34, 35, 38, 39, 46, 66, 67, 84, 94, 97, 103, 108, 141, 161, 198, 201, 210, 211, 213, 216, 224, 225, 234, 235, 247, 249, 251, 252, 254, 257, 278, 284, 285, 288, 293], "here": [3, 4, 5, 7, 9, 11, 12, 13, 14, 17, 19, 21, 22, 23, 27, 29, 30, 31, 32, 33, 34, 37, 38, 42, 43, 48, 49, 51, 56, 57, 58, 59, 65, 66, 67, 68, 69, 71, 72, 73, 75, 83, 84, 85, 89, 90, 92, 94, 97, 98, 103, 106, 107, 108, 109, 110, 113, 117, 121, 126, 131, 132, 133, 138, 139, 140, 143, 145, 146, 148, 149, 171, 176, 181, 190, 196, 197, 199, 200, 202, 203, 206, 207, 209, 211, 212, 213, 216, 217, 223, 225, 226, 228, 229, 232, 234, 235, 236, 240, 241, 248, 249, 251, 252, 254, 255, 266, 268, 270, 281, 282, 283, 285, 287, 288, 289, 291, 292, 293], "gener": [3, 8, 11, 12, 13, 14, 15, 17, 19, 21, 22, 23, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 40, 42, 44, 45, 46, 47, 49, 50, 51, 52, 55, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 77, 81, 83, 85, 90, 92, 94, 95, 96, 97, 100, 103, 107, 108, 109, 117, 121, 122, 125, 126, 127, 130, 131, 133, 134, 135, 136, 138, 140, 141, 142, 144, 145, 146, 148, 149, 153, 164, 165, 166, 167, 170, 175, 176, 179, 180, 181, 186, 188, 191, 192, 195, 196, 197, 199, 201, 202, 203, 204, 205, 207, 209, 212, 213, 214, 215, 216, 217, 218, 222, 225, 226, 228, 229, 231, 232, 233, 234, 236, 241, 242, 248, 249, 251, 252, 253, 254, 255, 261, 265, 266, 268, 269, 270, 276, 283, 285, 286, 287, 288, 289, 293, 294], "guidelin": [3, 11, 36, 232], "exhaust": [3, 21, 226, 254, 286], "alwai": [3, 4, 5, 11, 12, 13, 14, 15, 21, 22, 23, 32, 38, 40, 47, 58, 59, 66, 67, 68, 69, 71, 73, 75, 77, 79, 82, 83, 91, 92, 94, 97, 98, 103, 106, 107, 113, 117, 118, 130, 131, 133, 135, 139, 149, 181, 183, 186, 187, 197, 199, 203, 204, 206, 207, 209, 211, 212, 216, 217, 218, 224, 225, 226, 228, 229, 232, 233, 234, 235, 236, 243, 247, 249, 254, 255, 261, 263, 268, 283, 285, 286, 287, 288, 293], "posit": [3, 11, 12, 13, 14, 15, 21, 22, 23, 25, 27, 31, 41, 42, 43, 44, 45, 47, 48, 49, 51, 56, 58, 59, 60, 62, 63, 66, 67, 68, 69, 71, 72, 73, 75, 77, 79, 80, 83, 92, 94, 96, 97, 98, 99, 103, 104, 106, 107, 110, 111, 113, 117, 119, 125, 128, 131, 133, 135, 138, 140, 142, 145, 146, 148, 150, 153, 155, 159, 176, 179, 181, 192, 193, 195, 197, 199, 200, 203, 204, 205, 206, 207, 209, 211, 212, 213, 215, 216, 221, 222, 224, 225, 226, 228, 229, 232, 234, 235, 236, 237, 242, 254, 255, 261, 264, 265, 266, 268, 270, 271, 289, 293, 294], "convent": [3, 4, 5, 23, 34, 58, 59, 63, 66, 67, 68, 72, 73, 75, 77, 82, 92, 94, 97, 109, 110, 111, 113, 117, 120, 133, 148, 150, 154, 175, 176, 178, 183, 184, 197, 202, 216, 232, 233, 235, 236, 242, 270, 285, 293], "defin": [3, 4, 5, 11, 12, 13, 14, 15, 17, 19, 21, 22, 36, 39, 40, 42, 43, 46, 48, 49, 50, 51, 57, 58, 59, 62, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 85, 90, 92, 94, 95, 98, 100, 103, 107, 110, 111, 115, 121, 122, 125, 128, 130, 131, 133, 134, 138, 140, 141, 142, 146, 148, 149, 152, 158, 160, 162, 167, 170, 176, 178, 179, 183, 184, 185, 186, 187, 188, 189, 190, 191, 195, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 215, 216, 218, 219, 222, 223, 224, 226, 228, 229, 232, 234, 235, 236, 237, 241, 242, 248, 249, 250, 254, 255, 256, 257, 261, 263, 264, 265, 266, 267, 268, 270, 271, 285, 287, 293], "And": [3, 11, 12, 13, 22, 23, 29, 42, 58, 59, 66, 67, 68, 75, 92, 97, 98, 103, 106, 125, 153, 200, 202, 204, 212, 213, 216, 224, 228, 229, 234, 235, 236, 254, 255, 266, 293], "aren": [3, 11, 12, 13, 14, 23, 48, 67, 131, 215, 235], "don": [3, 11, 12, 13, 15, 22, 23, 43, 48, 92, 97, 103, 108, 109, 121, 131, 190, 199, 200, 206, 216, 226, 235, 237, 245, 250, 270, 282, 283, 287, 288, 293], "onli": [3, 4, 5, 8, 9, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 27, 30, 31, 32, 33, 35, 36, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 53, 56, 57, 58, 59, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 77, 78, 80, 81, 83, 84, 85, 90, 92, 94, 95, 96, 97, 98, 103, 104, 107, 108, 109, 113, 115, 117, 123, 125, 126, 128, 131, 133, 134, 135, 137, 138, 140, 142, 143, 145, 146, 149, 154, 156, 175, 176, 180, 181, 183, 186, 190, 191, 193, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 228, 229, 232, 233, 234, 236, 237, 240, 241, 242, 243, 245, 247, 248, 249, 250, 251, 252, 254, 255, 256, 261, 264, 266, 268, 270, 271, 282, 283, 285, 286, 288, 289, 293, 294], "form": [3, 5, 11, 12, 13, 14, 19, 21, 23, 25, 32, 33, 40, 43, 44, 45, 46, 48, 49, 57, 58, 59, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 80, 83, 87, 89, 90, 92, 94, 96, 98, 100, 102, 103, 107, 109, 110, 111, 113, 114, 117, 121, 122, 125, 126, 127, 130, 131, 133, 135, 138, 140, 141, 142, 143, 144, 146, 148, 149, 158, 161, 162, 163, 165, 175, 176, 179, 181, 183, 186, 189, 190, 191, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 222, 224, 225, 226, 228, 229, 232, 233, 234, 235, 236, 241, 242, 247, 248, 254, 261, 264, 265, 267, 268, 270, 276, 283, 287, 288, 289, 292, 293, 294], "differ": [3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 17, 18, 20, 22, 23, 27, 29, 30, 31, 32, 33, 34, 35, 39, 47, 48, 49, 50, 56, 57, 58, 59, 63, 66, 67, 68, 69, 71, 72, 73, 75, 78, 80, 82, 83, 87, 89, 91, 92, 94, 95, 96, 97, 100, 103, 107, 108, 109, 110, 115, 117, 121, 122, 126, 128, 130, 131, 133, 137, 145, 149, 153, 154, 166, 167, 175, 176, 179, 181, 183, 185, 186, 190, 191, 192, 195, 196, 197, 200, 202, 203, 204, 205, 207, 209, 211, 212, 213, 215, 216, 217, 218, 219, 221, 223, 224, 225, 228, 229, 232, 233, 234, 235, 236, 237, 240, 242, 245, 247, 248, 249, 250, 251, 252, 254, 255, 261, 264, 268, 270, 284, 285, 287, 288, 289, 292, 293], "equival": [3, 12, 13, 14, 15, 17, 21, 22, 23, 25, 32, 34, 40, 44, 48, 49, 57, 58, 63, 67, 68, 71, 73, 75, 92, 94, 103, 107, 109, 114, 115, 117, 125, 131, 164, 175, 178, 181, 184, 185, 191, 196, 200, 202, 203, 204, 206, 207, 211, 212, 216, 223, 224, 228, 229, 232, 234, 235, 237, 238, 241, 242, 251, 255, 257, 258], "same": [3, 4, 5, 8, 11, 12, 13, 14, 15, 19, 21, 22, 23, 27, 29, 31, 34, 40, 42, 43, 44, 46, 47, 48, 50, 56, 57, 58, 59, 63, 66, 67, 68, 69, 72, 74, 75, 77, 80, 81, 82, 83, 84, 89, 90, 92, 94, 96, 97, 98, 100, 103, 107, 109, 110, 111, 117, 118, 121, 122, 125, 129, 131, 135, 138, 139, 142, 145, 165, 167, 175, 178, 179, 181, 183, 184, 185, 186, 188, 189, 190, 191, 193, 196, 197, 199, 200, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215, 216, 217, 223, 224, 225, 226, 228, 229, 232, 233, 234, 235, 236, 237, 241, 242, 243, 245, 247, 249, 250, 251, 252, 254, 255, 257, 261, 263, 265, 266, 270, 283, 285, 288, 289, 292, 293], "intern": [3, 13, 14, 15, 21, 22, 29, 46, 48, 49, 58, 67, 70, 71, 72, 75, 83, 84, 87, 99, 103, 107, 111, 113, 115, 133, 145, 146, 154, 175, 176, 186, 203, 205, 207, 208, 210, 212, 214, 216, 226, 228, 231, 232, 233, 234, 235, 236, 240, 242, 245, 249, 251, 254, 279, 288, 292], "Such": [3, 4, 12, 21, 48, 67, 83, 135, 203, 204, 211, 217, 225, 226, 228, 282, 288], "prefix": [3, 11, 48, 67, 103, 107, 185, 188, 189, 206, 209, 213, 216, 229, 232, 248, 249, 254, 278], "underscor": [3, 4, 12, 13, 67, 103, 232, 242, 250], "_": [3, 4, 5, 11, 13, 15, 17, 19, 23, 25, 42, 43, 47, 55, 56, 58, 59, 60, 63, 66, 67, 68, 69, 70, 71, 72, 73, 75, 78, 80, 81, 82, 83, 92, 94, 97, 98, 99, 100, 101, 103, 105, 107, 109, 117, 143, 146, 148, 160, 181, 186, 190, 196, 199, 201, 207, 211, 212, 215, 216, 217, 219, 223, 224, 225, 226, 228, 229, 232, 233, 234, 237, 238, 254, 264, 266, 292], "univers": [3, 14, 48, 201, 207, 210, 224, 229, 234, 235], "adher": [3, 5, 92], "codebas": [3, 12, 13, 21, 206, 245], "anyth": [3, 4, 5, 12, 13, 15, 23, 46, 48, 67, 68, 78, 82, 103, 131, 155, 165, 213, 216, 222, 224, 228, 232, 234, 248, 254, 257, 285], "were": [3, 5, 11, 12, 13, 14, 15, 17, 21, 23, 47, 50, 59, 61, 67, 68, 73, 84, 92, 98, 103, 107, 108, 109, 121, 130, 145, 190, 197, 200, 203, 207, 209, 210, 211, 212, 215, 216, 217, 225, 228, 234, 254, 255, 257, 285, 287, 288, 292, 293], "incorrect": [3, 5, 11, 12, 13, 22, 23, 33, 58, 67, 77, 107, 115, 195, 207, 232, 235, 248, 251, 252], "bug": [3, 4, 7, 11, 12, 21, 23, 38, 46, 68, 206, 224, 232, 235, 285], "despit": [3, 27, 36, 67, 293], "sai": [3, 5, 11, 14, 15, 19, 21, 49, 57, 66, 67, 68, 96, 107, 121, 126, 131, 141, 148, 186, 199, 200, 203, 204, 205, 209, 211, 215, 216, 223, 226, 229, 232, 234, 235, 236, 255, 282, 287, 293], "befor": [3, 4, 7, 9, 10, 11, 12, 13, 14, 15, 21, 22, 23, 34, 36, 38, 48, 58, 59, 61, 63, 67, 68, 69, 75, 95, 98, 103, 107, 109, 110, 111, 121, 127, 130, 131, 133, 134, 135, 138, 139, 145, 148, 150, 181, 190, 196, 200, 204, 206, 211, 212, 216, 217, 223, 224, 228, 229, 232, 234, 235, 236, 243, 247, 250, 254, 255, 265, 286, 287, 288, 293], "recent": [3, 12, 13, 15, 18, 21, 22, 23, 27, 29, 31, 32, 33, 34, 35, 36, 41, 42, 43, 48, 49, 59, 67, 68, 71, 75, 77, 94, 97, 98, 99, 100, 101, 103, 105, 106, 109, 117, 201, 203, 206, 207, 209, 212, 215, 223, 224, 232, 234, 235, 245, 248, 250, 252, 254, 255, 257, 285, 289], "best": [3, 7, 11, 12, 13, 15, 27, 31, 33, 34, 37, 38, 48, 67, 75, 92, 94, 108, 180, 202, 213, 216, 225, 226, 228, 232, 235, 240, 248, 281, 285, 286, 292, 293], "determin": [3, 5, 13, 14, 17, 19, 21, 22, 23, 25, 27, 30, 31, 32, 35, 41, 43, 44, 45, 46, 48, 49, 50, 51, 58, 67, 68, 69, 70, 71, 73, 77, 78, 80, 82, 83, 94, 95, 96, 100, 103, 107, 109, 110, 111, 117, 123, 125, 127, 128, 130, 140, 146, 149, 160, 173, 175, 177, 178, 181, 184, 186, 191, 197, 202, 203, 204, 205, 209, 211, 212, 216, 222, 223, 224, 226, 228, 229, 231, 232, 234, 235, 236, 240, 252, 254, 261, 268, 271, 285, 293], "someth": [3, 4, 5, 9, 11, 13, 14, 15, 21, 22, 23, 36, 46, 48, 67, 68, 71, 77, 92, 97, 98, 103, 107, 121, 131, 132, 148, 174, 187, 190, 202, 206, 207, 215, 223, 224, 228, 232, 235, 247, 249, 255, 282, 285, 287, 288, 291], "re": [3, 11, 15, 23, 45, 46, 48, 58, 59, 67, 68, 71, 73, 75, 92, 94, 103, 191, 193, 197, 203, 209, 216, 217, 218, 224, 225, 226, 232, 234, 247, 264, 266, 283, 285, 288], "harm": 3, "even": [3, 4, 5, 9, 11, 12, 14, 15, 18, 21, 23, 27, 30, 33, 34, 35, 36, 41, 42, 43, 44, 45, 48, 49, 50, 55, 58, 59, 66, 67, 68, 71, 72, 73, 75, 79, 83, 92, 94, 97, 98, 103, 106, 107, 118, 131, 141, 166, 177, 184, 186, 191, 201, 204, 205, 206, 207, 209, 211, 212, 213, 216, 217, 224, 225, 226, 228, 229, 232, 234, 235, 243, 247, 270, 282, 283, 285, 287, 288, 293, 294], "might": [3, 4, 9, 11, 12, 13, 14, 15, 17, 21, 22, 23, 29, 33, 46, 48, 67, 71, 73, 80, 89, 92, 100, 103, 107, 109, 121, 131, 132, 148, 161, 191, 199, 202, 206, 207, 212, 213, 216, 217, 224, 225, 226, 228, 229, 234, 235, 236, 248, 249, 252, 254, 257, 282, 285, 287, 288, 290, 293], "while": [3, 4, 7, 11, 12, 14, 15, 21, 23, 28, 29, 34, 36, 47, 48, 49, 58, 59, 60, 63, 66, 67, 68, 69, 71, 72, 73, 77, 81, 83, 91, 97, 98, 103, 107, 108, 109, 110, 113, 122, 125, 126, 127, 130, 131, 135, 145, 165, 185, 186, 191, 197, 203, 211, 214, 216, 232, 235, 247, 249, 251, 254, 270, 282, 288, 289], "peopl": [3, 4, 7, 9, 11, 70, 75, 94, 103, 186, 236], "upgrad": [3, 39], "immedi": [3, 12, 21, 32, 50, 58, 67, 92, 97, 130, 181, 203, 206, 237, 248, 255], "fire": 3, "uncondition": [3, 12], "correct": [3, 4, 5, 11, 12, 13, 15, 22, 23, 30, 32, 34, 48, 56, 58, 64, 66, 67, 71, 73, 91, 92, 94, 103, 107, 117, 131, 145, 199, 200, 209, 212, 223, 229, 232, 234, 235, 240, 248, 254, 285, 292], "question": [3, 4, 5, 7, 11, 12, 19, 21, 66, 69, 77, 84, 92, 94, 97, 107, 121, 183, 186, 190, 203, 206, 211, 226, 235, 254, 257], "read": [3, 4, 5, 9, 11, 12, 13, 23, 36, 59, 73, 92, 107, 111, 148, 199, 200, 205, 206, 207, 213, 216, 229, 242, 243, 251, 255, 258, 286, 292, 293], "previou": [3, 4, 12, 13, 23, 51, 56, 57, 58, 59, 62, 67, 72, 73, 94, 97, 98, 106, 122, 145, 183, 199, 200, 209, 222, 229, 233, 237, 254, 286, 288, 293], "unchang": [3, 13, 14, 23, 58, 59, 67, 94, 103, 117, 185, 212, 216, 222, 225, 228, 235, 282], "dure": [3, 12, 13, 15, 39, 48, 67, 68, 98, 103, 107, 109, 122, 126, 148, 149, 199, 211, 216, 225, 234, 235, 252, 254], "period": [3, 4, 11, 13, 31, 46, 67, 68, 73, 92, 107, 117, 145, 155, 177, 184, 211, 216, 219, 222, 231, 235, 236, 254], "silenc": [3, 245, 252], "filterwarn": [3, 13], "caus": [3, 5, 12, 13, 14, 23, 34, 38, 67, 68, 71, 73, 103, 131, 139, 145, 199, 216, 225, 232, 233, 234, 251, 252, 289], "anoth": [3, 4, 5, 11, 12, 13, 14, 15, 18, 19, 21, 22, 23, 27, 29, 31, 32, 33, 34, 35, 44, 47, 48, 59, 64, 66, 67, 68, 69, 73, 75, 77, 78, 79, 80, 81, 82, 83, 84, 92, 94, 100, 103, 107, 110, 111, 122, 126, 128, 142, 146, 170, 185, 186, 188, 191, 195, 199, 200, 202, 204, 206, 207, 209, 211, 212, 213, 216, 217, 223, 224, 226, 232, 234, 235, 236, 248, 249, 255, 261, 265, 266, 270, 282, 285, 287, 288, 293, 294], "over": [3, 5, 6, 7, 10, 11, 12, 13, 15, 18, 23, 27, 30, 37, 40, 46, 47, 48, 49, 58, 59, 62, 66, 67, 68, 69, 70, 71, 72, 81, 83, 90, 92, 96, 97, 100, 103, 104, 107, 110, 111, 113, 119, 125, 130, 131, 148, 149, 160, 176, 179, 181, 185, 186, 197, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 216, 219, 221, 223, 228, 229, 231, 232, 234, 235, 236, 237, 238, 240, 241, 250, 254, 255, 261, 264, 268, 271, 287, 291, 293], "defeat": [3, 12, 232], "three": [3, 14, 15, 17, 19, 21, 23, 34, 35, 40, 44, 48, 58, 59, 60, 63, 67, 68, 72, 75, 77, 81, 82, 83, 92, 96, 97, 110, 111, 125, 130, 134, 137, 138, 139, 154, 176, 178, 183, 191, 195, 199, 200, 201, 202, 203, 204, 207, 209, 212, 216, 226, 228, 229, 234, 235, 236, 247, 261, 263, 268, 271, 285, 288, 293], "natur": [3, 12, 15, 21, 25, 32, 40, 44, 48, 49, 50, 58, 67, 68, 72, 73, 101, 107, 131, 183, 185, 186, 203, 206, 207, 209, 211, 213, 216, 224, 225, 229, 235, 236, 254, 271, 288, 293], "heavili": [3, 223, 233], "consider": [3, 12, 22, 67, 108, 121, 206, 215, 224, 229, 232, 265], "easi": [3, 7, 11, 12, 14, 55, 59, 67, 75, 92, 94, 108, 135, 141, 199, 203, 206, 211, 216, 223, 226, 229, 232, 235, 240, 241, 242, 282, 283, 285, 286, 287, 288, 289, 292], "account": [3, 14, 73, 103, 219, 228, 232], "nonetheless": [3, 68, 183, 228, 232], "deprecat": 3, "won": [3, 11, 12, 15, 23, 48, 228, 235, 288], "until": [3, 12, 19, 21, 27, 29, 30, 31, 32, 33, 34, 35, 39, 59, 61, 67, 68, 77, 94, 103, 107, 145, 200, 209, 212, 225, 232, 285], "come": [3, 11, 12, 32, 38, 58, 63, 65, 66, 67, 73, 75, 92, 94, 103, 108, 121, 131, 133, 143, 184, 200, 203, 206, 209, 211, 212, 226, 229, 232, 235, 245, 247, 252, 255, 285, 287, 288, 291, 293], "minimum": [3, 13, 31, 46, 48, 58, 59, 61, 63, 67, 68, 71, 73, 103, 121, 126, 133, 165, 190, 202, 204, 209, 235, 236, 250, 283], "longer": [3, 4, 11, 12, 15, 20, 67, 77, 107, 135, 145, 204, 209, 216, 225, 228, 254, 257, 285, 293], "especi": [3, 4, 12, 23, 36, 66, 103, 121, 131, 146, 148, 175, 200, 228, 232, 234, 247, 282, 283], "hard": [3, 11, 12, 13, 14, 21, 59, 68, 103, 107, 131, 181, 206, 216, 223, 232, 235, 285, 287], "migrat": 3, "lengthen": 3, "impos": [3, 111], "signific": [3, 15, 21, 48, 67, 68, 71, 94, 103, 121, 175, 190, 206, 235, 255, 288], "mainten": [3, 43], "burden": [3, 216], "keep": [3, 4, 11, 12, 15, 18, 23, 63, 67, 68, 71, 72, 75, 92, 103, 126, 134, 142, 146, 165, 181, 190, 202, 205, 206, 207, 212, 223, 224, 226, 228, 232, 234, 237, 242, 270, 283, 288], "firstli": [3, 13, 21, 23, 226], "regular": [3, 11, 12, 13, 15, 21, 22, 49, 55, 67, 68, 71, 75, 83, 89, 90, 94, 107, 131, 175, 206, 213, 232, 242, 247, 292, 293], "schedul": 3, "singl": [3, 5, 8, 11, 13, 14, 19, 21, 23, 28, 34, 39, 40, 47, 48, 51, 58, 67, 68, 72, 73, 75, 80, 81, 83, 84, 85, 92, 94, 97, 98, 103, 106, 109, 117, 118, 123, 125, 126, 135, 142, 161, 165, 167, 175, 178, 181, 188, 191, 195, 202, 203, 205, 206, 207, 209, 211, 212, 216, 217, 218, 225, 226, 228, 229, 231, 232, 233, 234, 235, 236, 237, 241, 247, 249, 251, 254, 255, 257, 283, 285, 288, 289, 294], "Being": [3, 63, 77, 83, 206], "assur": [3, 107, 212], "suffici": [3, 4, 11, 21, 47, 48, 58, 59, 63, 67, 103, 186, 207, 219, 223, 232, 236, 251, 293], "regardless": [3, 4, 23, 59, 67, 94, 107, 209, 224, 228, 254, 265, 270, 293], "often": [3, 4, 11, 12, 14, 21, 22, 23, 27, 33, 47, 48, 49, 57, 67, 75, 77, 79, 92, 94, 103, 107, 108, 117, 126, 127, 141, 145, 146, 199, 200, 203, 204, 206, 209, 212, 217, 223, 224, 229, 232, 236, 254, 255, 282, 287, 288, 289, 293], "happen": [3, 4, 7, 11, 12, 13, 14, 19, 21, 22, 23, 31, 40, 48, 59, 66, 67, 71, 79, 82, 91, 125, 176, 180, 186, 203, 209, 211, 212, 215, 224, 228, 232, 236, 255, 266, 285, 292, 293], "secondli": [3, 23, 226], "rigor": [3, 75, 200, 249], "scheme": [3, 8, 21, 59, 66, 71, 201, 202, 209, 212, 241], "semant": [3, 14, 21, 100, 234], "surfac": [3, 73, 75, 81, 92, 111, 125, 150, 154, 181, 202, 228, 261], "enough": [3, 4, 11, 29, 31, 58, 67, 71, 94, 103, 106, 107, 117, 131, 148, 207, 209, 216, 232, 283, 285], "virtual": [3, 8, 38, 67, 83, 200, 286], "encod": [3, 13, 51, 59, 65, 68, 97, 216, 247, 251, 254], "backport": 3, "prior": [3, 12, 13, 38, 195, 212, 228, 289], "extrem": [3, 12, 32, 58, 71, 77, 83, 94, 100, 113, 145, 200, 228, 236], "accur": [3, 13, 15, 19, 23, 27, 46, 58, 67, 71, 72, 89, 94, 114, 202, 223, 282, 289], "model": [3, 14, 71, 97, 107, 117, 127, 130, 133, 135, 136, 137, 153, 212, 225, 236], "final": [3, 4, 5, 11, 12, 13, 21, 23, 25, 34, 47, 59, 66, 67, 73, 75, 92, 94, 97, 103, 107, 111, 115, 125, 126, 133, 138, 140, 141, 143, 146, 161, 173, 176, 178, 179, 181, 183, 184, 186, 191, 199, 200, 203, 206, 209, 211, 218, 224, 225, 226, 228, 229, 232, 234, 235, 242, 254, 255, 286, 287, 288], "temptat": [3, 225, 293], "fudg": 3, "down": [3, 4, 8, 11, 12, 21, 72, 100, 119, 135, 199, 200, 202, 207, 218, 224, 226, 228, 232, 251, 289, 293], "earli": [3, 11, 67, 107, 170, 229], "acceler": [3, 108, 128, 130, 133, 138, 140, 145, 146, 148, 184, 191, 195, 197, 251, 270], "each": [3, 8, 9, 11, 12, 13, 14, 15, 17, 21, 23, 27, 29, 30, 31, 32, 34, 37, 40, 43, 44, 46, 47, 48, 49, 50, 51, 58, 59, 63, 67, 68, 69, 70, 71, 72, 73, 75, 77, 82, 83, 84, 89, 90, 92, 94, 96, 97, 98, 100, 103, 107, 110, 113, 115, 117, 123, 125, 126, 131, 133, 135, 138, 140, 142, 143, 146, 165, 178, 181, 190, 191, 195, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 211, 212, 214, 216, 224, 225, 226, 228, 229, 232, 233, 234, 235, 236, 237, 240, 241, 242, 245, 247, 249, 251, 254, 255, 257, 261, 263, 264, 266, 268, 270, 283, 286, 288, 293, 294], "ensur": [3, 11, 12, 15, 23, 27, 29, 30, 31, 32, 35, 38, 67, 68, 71, 99, 103, 125, 211, 212, 216, 247, 252, 255], "realli": [3, 11, 12, 13, 14, 19, 21, 22, 23, 67, 79, 107, 133, 183, 206, 215, 217, 223, 225, 226, 228, 232, 248, 257, 285, 287], "per": [3, 68, 103, 108, 113, 126, 155, 185, 191, 197, 202, 207, 212, 213, 261, 265, 267, 270], "everywher": [3, 14, 15, 67, 75, 92, 117, 197, 254, 270], "doctest": [3, 4, 5, 11, 15, 23, 60, 75, 103, 107, 133, 170, 181, 206, 212, 232, 247, 250, 252, 292], "sympy_deprecation_warn": [3, 245, 250, 252], "write": [3, 6, 7, 9, 10, 13, 14, 19, 21, 22, 24, 27, 39, 48, 56, 67, 68, 74, 75, 92, 94, 100, 148, 161, 199, 200, 204, 207, 209, 211, 216, 225, 226, 229, 232, 235, 241, 247, 248, 249, 255, 286, 287, 288, 293], "multilin": [3, 216], "deprecated_since_vers": [3, 245, 250, 252], "active_deprecations_target": [3, 245, 250, 252], "target": [3, 4, 14, 46, 47, 48, 50, 67, 107, 123, 161, 165, 166, 185, 225, 228, 231, 234, 235, 245, 248, 249, 252, 293], "md": [3, 5, 12, 245, 252], "stacklevel": [3, 12, 245, 250, 252], "line": [3, 4, 9, 11, 12, 13, 14, 15, 19, 21, 38, 47, 48, 50, 58, 59, 63, 68, 77, 78, 79, 81, 82, 83, 84, 89, 92, 94, 95, 96, 103, 107, 110, 113, 115, 118, 128, 131, 133, 139, 161, 191, 196, 197, 199, 201, 202, 216, 219, 226, 228, 232, 236, 237, 245, 247, 248, 249, 252, 255, 257, 268, 271, 279, 285], "visual": [3, 13, 67, 107, 111, 117, 215, 228], "confirm": [3, 12, 13, 58, 107, 232], "look": [3, 4, 5, 7, 9, 11, 12, 13, 15, 21, 22, 23, 39, 47, 48, 58, 67, 72, 73, 75, 88, 103, 107, 126, 131, 133, 141, 165, 175, 176, 179, 195, 202, 206, 207, 211, 216, 218, 219, 223, 226, 228, 229, 232, 233, 238, 247, 251, 255, 257, 266, 283, 288, 291, 292], "good": [3, 5, 7, 12, 14, 21, 23, 30, 36, 48, 67, 68, 71, 79, 92, 103, 107, 133, 145, 148, 203, 206, 207, 216, 223, 225, 226, 228, 232, 254, 282, 286, 289], "top": [3, 4, 5, 12, 13, 14, 29, 48, 66, 67, 68, 83, 84, 94, 97, 103, 110, 111, 125, 130, 176, 183, 206, 216, 226, 232, 249, 250, 255, 271, 288], "relev": [3, 4, 5, 11, 12, 13, 21, 48, 65, 80, 95, 96, 122, 126, 128, 130, 133, 186, 196, 200, 206, 226, 232, 233, 242, 247, 269], "docstr": [3, 6, 7, 11, 12, 13, 15, 23, 29, 47, 48, 60, 67, 89, 92, 94, 103, 107, 112, 116, 118, 124, 141, 146, 151, 168, 174, 175, 177, 194, 198, 212, 219, 222, 223, 225, 228, 232, 233, 234, 235, 241, 242, 247, 250, 255, 257, 262, 269, 272, 276, 278], "section": [3, 5, 8, 10, 11, 12, 14, 21, 23, 24, 40, 47, 49, 58, 59, 66, 67, 68, 70, 74, 75, 77, 83, 92, 97, 103, 110, 111, 125, 131, 146, 184, 186, 197, 200, 203, 206, 209, 211, 216, 219, 223, 226, 232, 242, 251, 252, 254, 265, 266, 267, 268, 272, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294], "src": [3, 4, 5, 7, 11, 12, 109, 232, 247, 252], "explan": [3, 5, 12, 15, 17, 21, 24, 40, 41, 42, 43, 44, 45, 47, 48, 52, 55, 56, 58, 59, 60, 62, 64, 65, 66, 67, 68, 69, 73, 75, 79, 89, 90, 92, 94, 98, 103, 107, 117, 120, 122, 123, 125, 126, 128, 130, 139, 150, 152, 155, 158, 160, 162, 164, 176, 181, 201, 202, 203, 205, 207, 211, 212, 214, 218, 219, 221, 222, 223, 224, 226, 228, 229, 232, 234, 236, 237, 238, 241, 242, 247, 250, 252, 254, 255, 290], "cross": [3, 5, 11, 12, 14, 67, 77, 83, 98, 103, 110, 111, 125, 128, 139, 148, 161, 190, 191, 193, 199, 200, 229, 235, 261, 265, 267, 268], "xyz": [3, 40, 79, 109, 110, 113, 191, 200, 261, 263, 266], "header": [3, 12, 48, 248, 249], "why": [3, 12, 13, 15, 21, 48, 67, 200, 207, 213, 223, 226, 255, 286, 288, 289], "test": [3, 4, 5, 6, 9, 10, 14, 15, 20, 22, 23, 29, 30, 43, 44, 46, 47, 48, 54, 58, 59, 66, 67, 68, 74, 77, 82, 92, 98, 100, 103, 107, 130, 161, 170, 174, 175, 176, 184, 200, 206, 207, 209, 211, 213, 224, 226, 229, 232, 233, 234, 235, 245, 248, 249, 250, 251, 252, 254, 255, 257, 272, 273, 280, 285, 287, 288], "warns_deprecated_sympi": [3, 12, 245, 250, 252], "run": [3, 4, 5, 8, 14, 15, 19, 21, 23, 49, 58, 59, 61, 67, 68, 92, 103, 108, 109, 126, 130, 133, 148, 181, 196, 202, 203, 216, 226, 228, 232, 233, 234, 244, 245, 248, 250, 251, 254, 255, 280, 285, 292], "other": [3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 17, 18, 19, 22, 24, 27, 29, 30, 31, 32, 34, 35, 36, 40, 44, 47, 48, 49, 50, 58, 59, 60, 63, 64, 66, 67, 68, 69, 71, 72, 73, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 87, 92, 94, 97, 98, 100, 103, 107, 108, 109, 110, 111, 117, 121, 122, 124, 125, 126, 130, 131, 132, 135, 136, 141, 142, 145, 146, 148, 150, 153, 154, 155, 165, 176, 178, 179, 180, 181, 184, 185, 186, 187, 188, 190, 191, 193, 195, 199, 200, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 216, 217, 218, 221, 222, 223, 224, 225, 226, 228, 229, 231, 232, 233, 234, 235, 236, 237, 242, 243, 245, 248, 249, 250, 251, 254, 255, 261, 264, 265, 268, 270, 272, 278, 279, 282, 283, 285, 287, 288, 289, 293], "pr": [3, 11, 12, 13, 66, 125, 207, 209, 210, 212, 235], "onc": [3, 8, 9, 11, 12, 14, 15, 21, 22, 23, 48, 50, 51, 58, 63, 67, 68, 72, 75, 83, 92, 94, 108, 111, 123, 125, 141, 145, 186, 191, 193, 200, 202, 204, 206, 212, 216, 217, 225, 226, 228, 232, 235, 242, 254, 265, 282, 283, 293, 294], "merg": [3, 7, 11, 12, 48, 58, 59, 67, 189, 216, 224, 236, 247, 254, 255], "wiki": [3, 4, 5, 11, 15, 21, 23, 37, 40, 42, 43, 44, 46, 47, 48, 50, 55, 56, 58, 59, 66, 67, 68, 69, 70, 72, 73, 75, 77, 79, 83, 84, 85, 94, 95, 96, 97, 98, 100, 103, 107, 115, 117, 120, 150, 152, 153, 154, 156, 157, 158, 162, 163, 164, 167, 169, 170, 179, 181, 185, 191, 193, 198, 202, 205, 212, 219, 223, 224, 225, 229, 232, 235, 236, 249, 254, 261, 263, 267, 269, 271, 289, 290], "decor": [3, 12, 23, 58, 67, 75, 245, 247, 252, 253, 256, 257, 280], "sympydeprecationwarn": [3, 12, 13, 245, 247, 250, 252], "class": [3, 5, 7, 11, 12, 14, 15, 20, 21, 22, 23, 25, 27, 31, 32, 36, 37, 40, 41, 42, 43, 44, 49, 50, 51, 56, 57, 58, 59, 60, 61, 62, 63, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 89, 90, 92, 94, 95, 96, 97, 98, 99, 100, 109, 110, 113, 114, 115, 117, 122, 125, 126, 127, 128, 130, 131, 135, 136, 141, 142, 146, 148, 149, 150, 152, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 183, 186, 187, 188, 189, 194, 195, 196, 198, 203, 205, 206, 207, 209, 212, 213, 214, 215, 217, 218, 219, 222, 223, 224, 226, 228, 232, 233, 234, 235, 236, 238, 241, 242, 243, 247, 248, 249, 250, 251, 252, 254, 255, 259, 262, 265, 266, 268, 269, 271, 272, 276, 278, 283, 285, 288, 293], "context": [3, 4, 5, 11, 12, 13, 17, 21, 23, 33, 41, 42, 43, 67, 69, 75, 97, 131, 186, 206, 209, 211, 224, 245, 247, 252, 261], "manag": [3, 7, 9, 12, 38, 42, 43, 109, 161, 209, 228, 242, 245, 247, 252], "filter": [3, 13, 18, 31, 67, 68, 92, 153, 212, 245, 247, 252, 254], "emit": [3, 12, 216, 245, 252], "assert": [3, 11, 12, 47, 56, 57, 58, 59, 67, 77, 79, 109, 145, 205, 216, 224, 232, 233, 245, 252, 254], "separ": [3, 4, 11, 12, 13, 14, 15, 19, 22, 23, 29, 35, 47, 55, 67, 68, 73, 75, 92, 94, 103, 118, 125, 130, 145, 146, 149, 154, 178, 181, 191, 202, 204, 207, 209, 212, 213, 216, 225, 228, 229, 232, 233, 235, 240, 245, 247, 251, 255, 257, 261, 285], "block": [3, 4, 25, 36, 48, 56, 58, 68, 98, 103, 125, 130, 131, 133, 136, 191, 200, 205, 229, 255, 265], "behavior1": 3, "behavior2": 3, "everyth": [3, 5, 12, 15, 23, 48, 67, 69, 75, 94, 101, 119, 145, 177, 178, 202, 216, 288, 292], "els": [3, 7, 11, 12, 13, 14, 21, 22, 23, 29, 48, 57, 59, 63, 67, 68, 75, 77, 81, 83, 84, 92, 94, 97, 103, 107, 117, 181, 191, 202, 207, 211, 212, 216, 217, 224, 228, 232, 234, 235, 240, 242, 247, 254, 257, 261, 264, 282, 288], "anywher": [3, 4, 13, 21, 48, 67, 75, 81, 181, 257, 287], "ignore_warn": [3, 245, 250, 252, 255], "prevent": [3, 7, 12, 15, 31, 36, 48, 67, 73, 104, 107, 121, 130, 205, 207, 212, 216, 228, 236, 245, 252, 284], "trigger": [3, 12, 23, 59, 109, 181, 245], "twice": [3, 15, 48, 67, 69, 81, 107, 191, 193, 199, 212, 216, 251, 252, 261, 263, 283], "similar": [3, 9, 11, 12, 13, 15, 19, 21, 23, 27, 59, 66, 67, 68, 71, 72, 73, 75, 78, 83, 84, 88, 97, 103, 108, 117, 131, 133, 135, 145, 146, 179, 190, 197, 199, 200, 204, 206, 207, 209, 213, 223, 225, 226, 228, 232, 234, 237, 242, 245, 248, 251, 252, 261, 263, 265, 266, 270, 282, 287, 288, 289, 291, 293], "somewher": [3, 4, 5, 12, 14, 48], "sign": [3, 4, 5, 9, 12, 14, 25, 27, 31, 36, 40, 45, 48, 63, 67, 68, 72, 73, 77, 83, 92, 94, 103, 107, 110, 111, 113, 117, 133, 154, 166, 191, 197, 199, 201, 209, 216, 221, 223, 228, 229, 234, 254, 268, 271, 286], "readi": [3, 11, 21, 130, 206, 216, 232], "paragraph": [3, 4, 5, 23, 47], "metadata": [3, 11, 47, 250, 252], "link": [3, 4, 5, 7, 11, 14, 15, 28, 32, 48, 68, 77, 83, 94, 118, 125, 134, 142, 248, 251, 252, 291], "rememb": [3, 4, 11, 12, 15, 23, 34, 97, 103, 118, 121, 148, 199, 200, 216, 228, 234, 237, 255, 288, 293], "shown": [3, 4, 12, 13, 14, 21, 22, 23, 56, 59, 66, 67, 71, 73, 75, 92, 109, 111, 115, 117, 121, 126, 128, 134, 135, 136, 142, 143, 144, 190, 191, 199, 200, 202, 205, 206, 207, 212, 216, 232, 236, 252, 254, 265, 266, 286], "plain": [3, 4, 11, 12, 21, 67, 75, 95, 196, 212, 216], "rst": [3, 4, 5, 11, 14, 49, 232, 247], "markdown": [3, 11, 14], "markup": [3, 11, 216], "clearli": [3, 4, 23, 107, 200, 206, 226, 289], "delin": 3, "newlin": [3, 12, 103, 257], "80": [3, 4, 8, 12, 15, 23, 46, 58, 67, 70, 94, 103, 107, 110, 111, 115, 212, 215, 232, 236, 252, 254], "charact": [3, 4, 5, 11, 12, 67, 68, 92, 95, 109, 161, 191, 196, 216, 232, 247, 249, 252, 257, 285, 287, 292], "full": [3, 4, 5, 11, 12, 13, 15, 17, 21, 23, 30, 37, 44, 46, 48, 58, 59, 67, 71, 75, 79, 80, 94, 100, 103, 109, 130, 143, 144, 191, 206, 209, 210, 212, 216, 218, 228, 229, 255, 287, 290, 293], "abc": [3, 4, 11, 12, 15, 17, 18, 23, 25, 27, 29, 31, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 48, 56, 58, 60, 66, 67, 68, 69, 72, 73, 75, 76, 77, 78, 80, 81, 82, 83, 84, 90, 91, 92, 94, 95, 97, 98, 100, 103, 106, 107, 108, 115, 117, 119, 152, 154, 156, 157, 162, 179, 181, 182, 203, 205, 207, 209, 211, 212, 213, 216, 217, 218, 219, 221, 222, 223, 224, 225, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 241, 243, 248, 249, 250, 251, 252, 254, 255, 257, 261, 264, 265, 266, 271, 273, 285, 288, 292], "func": [3, 4, 12, 14, 20, 23, 42, 46, 48, 67, 69, 72, 75, 86, 88, 107, 128, 170, 191, 209, 212, 216, 217, 228, 232, 233, 234, 245, 250, 252, 254, 255, 257, 260], "larger": [3, 5, 14, 23, 32, 48, 58, 59, 66, 67, 68, 75, 92, 100, 103, 107, 135, 139, 205, 207, 213, 217, 223, 228, 234, 249, 251, 285, 293], "easier": [3, 9, 11, 12, 13, 14, 22, 35, 50, 67, 111, 131, 133, 199, 207, 211, 213, 226, 232, 235, 249, 255, 265, 287, 293, 294], "exactli": [3, 4, 5, 11, 12, 13, 14, 15, 23, 27, 34, 36, 44, 51, 58, 67, 70, 71, 103, 109, 146, 201, 226, 228, 232, 235, 237, 251, 254, 255, 283, 285, 287, 292, 293], "sphinx": [3, 5, 8, 11, 73, 232, 247, 252], "direct": [3, 4, 5, 13, 14, 20, 34, 40, 42, 43, 47, 52, 55, 58, 63, 66, 67, 69, 71, 73, 76, 80, 81, 82, 83, 97, 98, 103, 110, 111, 113, 121, 122, 125, 128, 130, 133, 135, 139, 148, 167, 191, 197, 199, 200, 203, 205, 206, 209, 213, 223, 226, 242, 245, 254, 261, 266, 267, 270], "syntax": [3, 4, 5, 11, 13, 14, 15, 23, 34, 41, 43, 59, 67, 94, 109, 131, 148, 178, 202, 206, 215, 216, 228, 234, 238, 257, 283, 285, 287, 292, 294], "paramet": [3, 5, 12, 13, 14, 15, 27, 33, 35, 40, 41, 43, 46, 48, 49, 50, 58, 59, 63, 65, 67, 68, 69, 70, 72, 73, 75, 76, 77, 78, 80, 81, 82, 83, 84, 86, 90, 92, 94, 95, 97, 98, 100, 103, 104, 106, 107, 109, 110, 113, 115, 117, 118, 119, 121, 122, 123, 125, 126, 127, 128, 130, 131, 133, 148, 150, 152, 153, 154, 156, 157, 158, 160, 161, 162, 164, 165, 166, 169, 170, 171, 173, 175, 176, 178, 179, 180, 181, 182, 183, 185, 191, 192, 193, 195, 196, 197, 200, 201, 202, 204, 205, 207, 209, 211, 212, 213, 214, 216, 217, 218, 219, 221, 222, 223, 224, 228, 229, 231, 232, 233, 234, 236, 237, 238, 241, 242, 245, 247, 248, 249, 251, 252, 254, 255, 261, 263, 264, 265, 266, 271, 283, 288], "short": [3, 5, 11, 12, 15, 39, 49, 57, 59, 63, 67, 68, 69, 70, 73, 101, 107, 121, 167, 186, 190, 200, 203, 210, 237, 247, 257, 288, 292], "format": [3, 8, 11, 12, 14, 17, 19, 31, 34, 35, 47, 59, 68, 89, 90, 94, 97, 103, 106, 107, 110, 126, 127, 130, 149, 154, 165, 175, 202, 205, 206, 211, 212, 214, 216, 226, 232, 235, 247, 257, 261, 265, 286, 289, 292], "renam": [3, 48, 94], "rest": [3, 13, 92, 95, 97, 101, 111, 119, 131, 135, 141, 186, 203, 206, 236, 254, 285, 286, 293], "left": [3, 5, 13, 19, 21, 23, 25, 28, 29, 32, 40, 46, 48, 49, 58, 59, 63, 67, 68, 69, 72, 73, 75, 83, 84, 90, 92, 94, 95, 97, 98, 103, 106, 107, 117, 122, 130, 153, 160, 165, 169, 170, 173, 178, 190, 191, 197, 201, 202, 203, 205, 212, 213, 214, 215, 216, 218, 219, 223, 224, 225, 226, 228, 232, 233, 234, 235, 236, 247, 248, 249, 251, 254, 268, 283, 287, 289, 293], "imaginari": [3, 4, 15, 21, 23, 27, 31, 33, 40, 44, 45, 67, 71, 73, 75, 98, 148, 206, 207, 212, 216, 217, 224, 228, 235], "simplify_thi": [3, 4, 250], "expr": [3, 4, 12, 14, 15, 21, 23, 31, 33, 36, 42, 43, 45, 46, 48, 59, 66, 69, 71, 73, 75, 77, 89, 92, 94, 97, 100, 103, 107, 108, 109, 117, 121, 123, 128, 130, 131, 145, 158, 162, 164, 166, 170, 173, 176, 178, 179, 181, 188, 191, 193, 196, 202, 204, 205, 206, 207, 209, 211, 212, 213, 214, 216, 217, 218, 219, 221, 223, 225, 228, 231, 232, 233, 234, 235, 236, 237, 238, 240, 242, 243, 248, 249, 250, 252, 255, 261, 263, 264, 265, 266, 268, 282, 283, 285, 287, 288, 292, 293, 294], "simplifi": [3, 4, 11, 12, 14, 15, 19, 21, 22, 23, 25, 32, 33, 34, 41, 43, 45, 46, 66, 67, 69, 71, 72, 73, 75, 79, 84, 89, 92, 94, 97, 98, 99, 100, 103, 110, 117, 118, 123, 125, 126, 127, 130, 134, 135, 138, 139, 140, 145, 153, 160, 165, 180, 181, 185, 188, 191, 197, 203, 211, 213, 215, 217, 222, 224, 225, 226, 229, 232, 233, 234, 235, 236, 238, 250, 252, 255, 265, 267, 273, 282, 284, 285, 287, 288, 289], "def": [3, 4, 5, 11, 12, 13, 14, 15, 19, 21, 22, 23, 42, 43, 47, 67, 72, 79, 97, 103, 107, 109, 139, 176, 206, 212, 216, 225, 228, 235, 250, 252, 254, 255, 258, 282, 285, 288, 289, 293], "ref": [3, 58, 73, 103, 115, 148, 221, 236, 250, 289], "is_this_zero": [3, 252], "y": [3, 4, 11, 12, 13, 14, 15, 17, 18, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 58, 59, 66, 67, 68, 69, 70, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 90, 92, 94, 95, 96, 97, 98, 99, 100, 103, 107, 108, 109, 110, 111, 113, 115, 117, 122, 123, 125, 128, 130, 131, 133, 134, 135, 136, 138, 139, 140, 142, 146, 148, 149, 158, 159, 162, 165, 170, 176, 178, 179, 181, 182, 190, 191, 192, 193, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 222, 223, 224, 225, 226, 228, 229, 231, 232, 233, 234, 235, 236, 237, 240, 241, 242, 243, 248, 249, 252, 254, 255, 257, 261, 264, 265, 266, 267, 268, 270, 271, 282, 283, 285, 287, 288, 292, 293, 294], "0": [3, 4, 11, 12, 13, 14, 15, 17, 19, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 115, 117, 118, 119, 120, 122, 123, 125, 126, 128, 130, 131, 133, 134, 135, 136, 138, 140, 143, 144, 145, 146, 148, 149, 150, 153, 154, 155, 157, 160, 165, 166, 167, 170, 175, 176, 177, 178, 179, 180, 181, 182, 186, 188, 190, 191, 192, 193, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215, 216, 218, 219, 221, 222, 223, 224, 225, 226, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 245, 247, 248, 250, 251, 252, 254, 255, 256, 261, 263, 264, 265, 266, 267, 268, 271, 282, 283, 285, 287, 288, 289, 292, 293, 294], "zero": [3, 14, 15, 17, 21, 22, 23, 25, 32, 33, 40, 44, 45, 48, 57, 58, 59, 63, 66, 67, 70, 71, 72, 73, 75, 77, 81, 82, 83, 92, 94, 96, 97, 98, 100, 102, 103, 106, 107, 109, 110, 117, 125, 126, 127, 128, 130, 131, 133, 136, 139, 142, 143, 144, 148, 153, 175, 179, 181, 183, 195, 197, 199, 200, 201, 203, 204, 205, 206, 207, 211, 212, 214, 216, 219, 223, 224, 226, 228, 229, 232, 233, 234, 235, 236, 237, 252, 254, 255, 265, 267, 268, 288, 294], "is_zero": [3, 21, 23, 82, 103, 203, 207, 212, 252, 289], "where": [3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 19, 21, 22, 23, 25, 27, 30, 31, 32, 34, 36, 39, 40, 44, 46, 47, 48, 49, 56, 57, 58, 59, 61, 63, 65, 66, 67, 68, 69, 71, 72, 73, 75, 77, 80, 82, 83, 84, 85, 89, 90, 91, 92, 94, 96, 97, 98, 99, 100, 103, 107, 110, 113, 114, 117, 121, 125, 126, 127, 128, 130, 131, 133, 144, 145, 146, 148, 149, 155, 165, 170, 176, 178, 180, 181, 182, 183, 184, 190, 191, 195, 197, 199, 200, 201, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 216, 217, 218, 219, 222, 223, 224, 225, 226, 228, 229, 232, 233, 234, 236, 237, 240, 242, 247, 248, 249, 250, 254, 255, 257, 261, 268, 270, 283, 285, 287, 289, 293, 294], "mail": [3, 9, 11, 13, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 216, 286], "summar": [3, 11, 247, 293], "idea": [3, 7, 11, 12, 14, 21, 22, 23, 52, 58, 65, 67, 68, 79, 85, 92, 94, 107, 118, 131, 181, 185, 186, 203, 205, 206, 225, 228, 229, 232, 235, 249, 255, 293], "fit": [3, 14, 47, 92, 103, 106, 107, 200, 216, 232, 257, 288], "put": [3, 4, 11, 13, 14, 15, 19, 23, 29, 48, 63, 64, 67, 68, 69, 73, 97, 98, 103, 153, 158, 162, 177, 178, 212, 216, 217, 225, 226, 228, 232, 237, 243, 248, 289, 293], "word": [3, 5, 9, 12, 14, 23, 44, 63, 66, 67, 68, 73, 75, 97, 117, 126, 131, 146, 203, 206, 211, 228, 229, 232, 234, 249, 261, 266, 285], "global": [3, 4, 9, 12, 13, 41, 42, 43, 46, 48, 49, 67, 79, 92, 109, 130, 165, 171, 191, 193, 202, 203, 206, 207, 209, 216, 229, 232, 233, 236, 247, 249, 250, 255, 264], "uniqu": [3, 13, 14, 46, 47, 49, 58, 61, 63, 67, 68, 69, 72, 75, 82, 85, 90, 94, 96, 97, 103, 107, 125, 126, 170, 179, 191, 200, 203, 204, 206, 209, 211, 212, 217, 221, 228, 229, 232, 234, 235, 236, 240, 249, 254, 257, 265, 270, 285, 288], "across": [3, 5, 11, 58, 65, 67, 78, 94, 111, 180, 181, 188, 202, 216, 251, 253, 254, 255, 291], "level": [3, 4, 5, 7, 12, 13, 14, 15, 21, 22, 29, 31, 48, 58, 65, 67, 73, 75, 94, 97, 103, 107, 121, 135, 148, 176, 181, 186, 190, 193, 200, 202, 205, 206, 214, 216, 225, 229, 235, 236, 240, 248, 249, 254, 288, 289, 291], "correspond": [3, 4, 5, 7, 11, 12, 13, 19, 21, 22, 23, 25, 30, 34, 46, 47, 48, 49, 57, 58, 59, 61, 62, 63, 66, 67, 68, 69, 70, 73, 75, 77, 78, 80, 81, 82, 83, 90, 92, 94, 96, 97, 98, 103, 106, 107, 110, 111, 117, 123, 125, 126, 127, 128, 130, 131, 133, 135, 149, 153, 157, 171, 175, 176, 178, 182, 183, 186, 191, 195, 197, 201, 202, 204, 205, 206, 207, 209, 211, 212, 216, 222, 223, 226, 228, 229, 232, 233, 234, 235, 236, 238, 240, 241, 242, 249, 250, 251, 252, 254, 255, 257, 261, 263, 265, 266, 268, 270, 288, 294], "share": [3, 7, 21, 23, 68, 107, 207, 211, 216, 236, 249], "__init__": [3, 4, 23, 67, 126, 127, 211, 261, 263, 288], "func_nam": [3, 48, 73, 98, 257], "help": [3, 4, 5, 7, 9, 11, 12, 21, 31, 39, 48, 57, 67, 75, 92, 94, 103, 107, 108, 110, 115, 131, 148, 156, 166, 200, 202, 211, 213, 216, 225, 226, 229, 232, 233, 236, 247, 248, 249, 255, 278, 286, 289], "rais": [3, 11, 12, 13, 15, 17, 21, 22, 23, 41, 43, 46, 48, 56, 59, 67, 68, 69, 71, 73, 76, 77, 80, 82, 83, 84, 92, 94, 98, 100, 103, 104, 106, 107, 109, 115, 117, 155, 167, 197, 200, 203, 204, 205, 206, 207, 209, 211, 212, 213, 216, 218, 224, 228, 231, 232, 233, 234, 235, 236, 240, 242, 245, 247, 249, 252, 254, 255, 257, 258, 268, 289], "been": [3, 11, 15, 21, 23, 27, 46, 48, 49, 58, 59, 60, 63, 66, 67, 68, 73, 79, 92, 94, 103, 107, 108, 109, 125, 126, 130, 131, 133, 141, 145, 146, 154, 166, 176, 178, 186, 197, 198, 199, 200, 203, 206, 207, 211, 213, 214, 216, 218, 223, 226, 228, 233, 234, 235, 237, 238, 246, 247, 249, 250, 252, 254, 257, 265, 268, 285, 286, 288, 289, 293], "simplfiy_thi": 3, "ident": [3, 14, 15, 23, 44, 47, 49, 57, 58, 59, 65, 67, 68, 72, 73, 83, 90, 96, 98, 100, 103, 118, 120, 125, 126, 146, 165, 167, 170, 186, 203, 204, 205, 209, 210, 211, 212, 216, 225, 228, 232, 235, 240, 242, 247, 254, 255, 257, 266, 285, 289, 293], "much": [3, 4, 11, 12, 19, 21, 22, 23, 27, 33, 47, 48, 52, 63, 67, 71, 75, 89, 92, 94, 145, 146, 189, 199, 200, 201, 203, 206, 209, 212, 223, 226, 228, 232, 233, 234, 235, 249, 251, 285, 287, 293], "trivial": [3, 49, 58, 63, 66, 67, 68, 73, 82, 97, 100, 103, 107, 143, 181, 203, 204, 209, 212, 226, 229, 232, 235, 240], "furthermor": [3, 13, 23, 44, 67, 68, 97, 211, 225, 285, 287, 288], "particular": [3, 4, 11, 12, 13, 14, 15, 21, 22, 28, 30, 44, 49, 58, 67, 68, 71, 75, 78, 92, 94, 97, 100, 103, 107, 110, 113, 141, 165, 176, 204, 205, 206, 207, 209, 211, 212, 222, 224, 226, 228, 229, 232, 234, 235, 247, 249, 251, 289, 291, 293], "expr1": [3, 21, 117, 202, 234, 288], "expr2": [3, 21, 117, 202, 288], "dozen": [3, 14, 23, 293], "search": [3, 4, 28, 46, 50, 58, 59, 63, 65, 67, 73, 103, 107, 131, 203, 211, 212, 216, 225, 226, 228, 233, 236, 248], "upcom": 3, "bot": [3, 11], "liter": [4, 12, 15, 23, 48, 57, 67, 95, 97, 109, 181, 188, 228], "occur": [4, 13, 14, 15, 58, 59, 67, 71, 75, 84, 92, 98, 109, 121, 125, 145, 190, 191, 199, 211, 219, 228, 233, 234, 237, 238, 247, 254, 288], "definit": [4, 13, 14, 15, 22, 40, 44, 48, 49, 58, 59, 64, 66, 67, 69, 70, 72, 73, 75, 80, 83, 90, 92, 94, 98, 99, 100, 103, 107, 109, 125, 130, 133, 138, 139, 146, 183, 186, 189, 191, 199, 200, 203, 204, 207, 212, 213, 216, 223, 236, 237, 248, 249, 250, 254, 255, 261, 265, 266, 267, 268, 283, 293], "__doc__": [4, 15], "attribut": [4, 14, 18, 21, 23, 42, 43, 47, 48, 58, 59, 67, 75, 76, 77, 80, 81, 82, 83, 100, 103, 109, 111, 117, 122, 125, 126, 127, 128, 130, 138, 146, 149, 170, 175, 179, 186, 190, 191, 197, 200, 202, 203, 206, 207, 211, 216, 224, 228, 229, 241, 242, 248, 250, 254, 255, 258, 265, 288], "fdiff": [4, 11, 23, 48, 67, 73, 74, 75], "self": [4, 11, 12, 21, 23, 32, 40, 42, 43, 47, 48, 58, 59, 64, 66, 67, 69, 73, 76, 77, 78, 80, 81, 82, 83, 94, 98, 103, 107, 122, 133, 176, 181, 191, 193, 195, 203, 205, 207, 209, 211, 212, 216, 218, 223, 224, 242, 261], "argindex": [4, 11, 23, 48, 67, 73, 74, 75], "heavisid": [4, 11, 75, 92, 94, 216], "diff": [4, 9, 11, 12, 13, 14, 19, 23, 25, 31, 34, 46, 48, 67, 72, 73, 74, 75, 84, 89, 94, 100, 103, 121, 123, 128, 134, 135, 148, 179, 191, 193, 196, 197, 200, 202, 207, 212, 215, 216, 226, 232, 233, 234, 237, 238, 243, 265, 268, 283, 287, 294], "diracdelta": [4, 11, 75, 94, 176, 181, 216], "what": [4, 5, 7, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 27, 28, 37, 46, 48, 59, 61, 66, 67, 68, 69, 73, 74, 77, 78, 82, 92, 94, 96, 103, 107, 109, 122, 125, 126, 130, 131, 135, 142, 148, 180, 181, 184, 186, 191, 199, 200, 207, 209, 212, 215, 216, 217, 223, 225, 226, 228, 229, 232, 234, 241, 245, 247, 249, 250, 255, 265, 266, 271, 283, 285, 286, 288, 292, 293], "specif": [4, 5, 7, 8, 11, 12, 13, 14, 21, 23, 24, 30, 37, 58, 59, 67, 68, 69, 75, 79, 94, 96, 98, 103, 122, 125, 126, 130, 131, 141, 148, 150, 186, 200, 202, 203, 207, 209, 211, 212, 215, 216, 217, 222, 228, 229, 232, 233, 234, 236, 242, 247, 248, 249, 254, 289, 293], "purpos": [4, 5, 9, 12, 13, 14, 20, 21, 23, 34, 47, 48, 58, 64, 67, 68, 94, 103, 131, 146, 148, 186, 200, 206, 209, 213, 215, 216, 223, 232, 235, 241, 251, 253, 255, 265, 266, 283, 293], "scope": [4, 11, 48, 141, 145, 245, 293], "high": [4, 5, 7, 11, 12, 15, 19, 21, 26, 27, 31, 48, 67, 71, 72, 95, 107, 148, 196, 206, 211, 214, 216, 229, 234, 278, 289], "od": [4, 12, 14, 23, 90, 126, 130, 141, 148, 230, 233, 273, 294], "seen": [4, 11, 19, 21, 40, 59, 92, 94, 109, 113, 125, 128, 130, 142, 186, 199, 203, 206, 209, 212, 232, 235, 252, 254, 265, 285, 288, 292], "hand": [4, 12, 13, 19, 21, 23, 29, 34, 47, 48, 50, 59, 60, 67, 73, 75, 94, 97, 98, 103, 107, 110, 113, 126, 130, 131, 145, 146, 149, 153, 170, 173, 185, 191, 197, 200, 201, 203, 206, 207, 209, 211, 214, 226, 235, 247, 249, 251, 255, 258, 268, 270, 287], "code": [4, 8, 10, 14, 19, 21, 22, 23, 30, 33, 34, 35, 36, 38, 39, 49, 54, 58, 61, 62, 67, 68, 69, 75, 79, 92, 94, 95, 103, 107, 108, 109, 122, 125, 131, 133, 139, 141, 142, 148, 149, 175, 181, 190, 196, 199, 201, 202, 203, 204, 205, 206, 209, 215, 226, 228, 232, 234, 235, 236, 238, 241, 244, 245, 247, 248, 249, 252, 253, 254, 255, 265, 273, 280, 285, 287, 290, 292], "less": [4, 5, 11, 14, 19, 27, 30, 32, 40, 44, 48, 49, 50, 58, 59, 66, 67, 68, 71, 72, 73, 75, 81, 82, 83, 98, 103, 107, 115, 117, 130, 131, 133, 181, 206, 209, 211, 212, 225, 226, 228, 229, 232, 234, 235, 236, 247, 249], "understand": [4, 11, 12, 15, 21, 22, 23, 36, 67, 68, 92, 131, 141, 143, 144, 148, 186, 199, 202, 205, 206, 211, 216, 226, 229, 248, 255, 284, 285, 292, 293], "clear": [4, 7, 11, 12, 13, 21, 42, 57, 67, 92, 96, 122, 199, 200, 202, 207, 209, 212, 226, 234, 235, 242, 247, 251, 270, 285], "begin": [4, 7, 11, 12, 13, 15, 21, 23, 25, 28, 32, 34, 40, 67, 68, 72, 73, 75, 92, 98, 100, 103, 107, 135, 143, 144, 145, 146, 177, 186, 190, 191, 200, 201, 205, 216, 226, 229, 232, 233, 235, 236, 247, 257, 285, 287, 289, 293], "convers": [4, 5, 13, 21, 30, 48, 67, 87, 109, 145, 185, 204, 205, 206, 207, 209, 211, 213, 216, 229, 241, 248, 261], "aim": [4, 5, 12, 85, 92, 186, 203, 226, 232, 235, 286, 287], "comment": [4, 5, 11, 12, 48, 58, 131, 133, 213, 216, 249, 254], "distract": 4, "input": [4, 5, 11, 12, 14, 15, 23, 25, 31, 34, 40, 46, 49, 63, 67, 68, 70, 71, 72, 73, 81, 94, 96, 97, 103, 107, 109, 113, 114, 115, 117, 121, 125, 127, 130, 131, 133, 134, 135, 145, 148, 149, 154, 177, 191, 193, 195, 206, 207, 209, 212, 213, 214, 215, 216, 217, 224, 228, 229, 232, 234, 236, 238, 248, 249, 251, 252, 254, 255, 257, 282, 288, 289, 293], "consum": [4, 48, 75, 127, 145], "human": [4, 11, 17, 92, 183, 212, 216], "beings": 4, "english": [4, 11, 68], "likewis": [4, 21, 47, 110, 134, 135], "reader": [4, 5, 11, 12, 23, 47, 49, 146, 203, 216, 251, 286, 291], "machineri": [4, 67, 211, 255], "mind": [4, 11, 12, 15, 18, 21, 31, 67, 103, 146, 202, 223, 224, 270, 288], "platform": [4, 67, 181, 200, 232, 248], "anyon": [4, 5, 13, 37, 212, 216, 281, 291, 292], "restructuredtext": [4, 5], "extend": [4, 5, 12, 21, 23, 30, 44, 48, 58, 59, 67, 68, 72, 79, 92, 94, 103, 107, 148, 189, 196, 202, 204, 207, 209, 211, 212, 213, 216, 223, 225, 229, 231, 232, 235, 236, 237, 249, 251, 285, 287], "concis": [4, 148], "quick": [4, 5, 11, 23, 67, 103, 107, 228, 234, 255], "depth": [4, 5, 15, 16, 37, 58, 67, 133, 202, 203, 216], "tripl": [4, 11, 30, 84, 103, 200, 201, 203, 207, 211, 257], "doubl": [4, 5, 8, 34, 46, 48, 63, 67, 68, 72, 103, 109, 125, 140, 141, 199, 206, 216, 225, 226, 249, 293], "quot": [4, 11, 15, 48, 97, 216, 257], "raw": [4, 5, 48, 67, 68, 73, 108, 109, 175, 180, 206, 207, 212, 224, 228, 292], "backslash": [4, 67, 216], "blank": [4, 11, 12, 109, 202], "close": [4, 11, 14, 25, 33, 48, 66, 67, 71, 72, 75, 83, 85, 92, 94, 96, 117, 134, 202, 203, 204, 210, 211, 224, 234, 235, 249, 283, 293], "rare": [4, 12, 23, 67, 232, 236, 245, 285], "underlin": [4, 5], "numpydoc": [4, 5], "build": [4, 5, 6, 10, 11, 12, 18, 42, 43, 48, 67, 69, 75, 97, 148, 175, 186, 191, 200, 203, 208, 211, 212, 213, 223, 236, 265, 282, 285, 288], "cd": [4, 8, 9, 113, 235, 238, 254], "_build": [4, 8], "consist": [4, 5, 13, 14, 19, 21, 29, 31, 35, 47, 58, 59, 63, 67, 68, 72, 73, 75, 77, 83, 85, 92, 97, 107, 110, 113, 125, 128, 142, 146, 155, 175, 181, 186, 189, 195, 202, 204, 206, 207, 209, 224, 232, 234, 235, 236, 240, 245, 248, 249, 254, 286, 288], "review": [4, 5, 11, 12, 147], "head": [4, 18, 47, 67, 234, 236, 242, 257, 288], "plural": [4, 5], "length": [4, 13, 40, 48, 51, 57, 58, 59, 61, 65, 67, 68, 70, 72, 73, 75, 76, 80, 82, 83, 84, 97, 98, 103, 106, 107, 110, 111, 113, 121, 126, 130, 134, 135, 136, 146, 150, 154, 178, 183, 184, 185, 186, 191, 195, 200, 211, 212, 216, 222, 226, 228, 232, 236, 247, 248, 254, 257, 261, 263, 271], "equal": [4, 12, 13, 14, 17, 21, 22, 23, 27, 34, 36, 40, 44, 47, 48, 49, 56, 57, 58, 59, 63, 65, 66, 67, 68, 69, 71, 72, 73, 75, 80, 81, 82, 83, 84, 86, 92, 97, 98, 100, 103, 107, 110, 113, 117, 118, 122, 126, 128, 130, 133, 143, 144, 165, 166, 181, 185, 186, 191, 195, 200, 203, 204, 205, 206, 207, 209, 211, 212, 214, 216, 222, 224, 226, 229, 232, 233, 234, 235, 236, 242, 247, 248, 249, 254, 257, 261, 266, 271, 283, 286, 294], "clutter": 4, "harder": [4, 12, 13, 21, 67, 92, 206, 247], "minim": [4, 21, 23, 46, 58, 59, 63, 66, 67, 68, 92, 94, 97, 103, 107, 122, 135, 150, 205, 206, 207, 209, 212, 215, 225, 228, 229, 234, 254, 258], "amount": [4, 12, 47, 67, 68, 79, 125, 141, 191, 197, 200, 209, 219, 247, 261, 263], "deprec": [4, 6, 16, 29, 41, 59, 67, 94, 98, 120, 125, 126, 145, 202, 212, 216, 236, 242, 245, 246, 250, 252, 255], "notifi": 4, "awai": [4, 47, 49, 68, 110, 111, 113, 133, 211, 216], "encourag": [4, 13, 47, 143, 144, 211], "choos": [4, 8, 9, 11, 31, 34, 58, 63, 67, 69, 72, 103, 107, 111, 115, 135, 146, 181, 185, 191, 199, 200, 212, 213, 216, 223, 225, 226, 232, 233, 236, 247, 252, 293], "label": [4, 7, 34, 47, 48, 61, 67, 77, 90, 94, 113, 154, 161, 165, 170, 179, 181, 202, 216, 217, 219, 228, 241, 242, 292], "elabor": [4, 24, 197, 268], "suffic": [4, 204, 234], "clarifi": 4, "complic": [4, 12, 15, 17, 21, 23, 27, 33, 40, 48, 58, 66, 68, 69, 71, 72, 73, 75, 92, 94, 100, 141, 143, 181, 200, 206, 209, 213, 215, 226, 228, 235, 236, 240, 241, 249, 251, 255, 257, 283, 285, 288, 289], "demonstr": [4, 5, 15, 21, 23, 25, 27, 31, 32, 33, 58, 59, 67, 94, 107, 122, 125, 131, 135, 136, 145, 203, 206, 267, 293], "api": [4, 5, 11, 13, 21, 24, 30, 32, 48, 67, 79, 87, 108, 109, 116, 141, 146, 148, 177, 198, 202, 209, 229, 231, 255, 258, 265, 266, 269, 276, 278, 279, 286, 287, 290], "simpl": [4, 11, 12, 14, 15, 19, 21, 23, 33, 38, 47, 48, 58, 66, 67, 71, 75, 79, 83, 85, 92, 94, 96, 103, 107, 108, 110, 111, 117, 118, 121, 125, 126, 128, 130, 133, 135, 136, 138, 140, 141, 145, 149, 155, 169, 170, 178, 179, 180, 191, 199, 200, 206, 207, 208, 212, 213, 216, 218, 223, 225, 226, 228, 229, 232, 235, 242, 248, 249, 254, 258, 260, 261, 263, 264, 268, 282, 285, 288, 289, 293], "too": [4, 7, 11, 12, 15, 23, 36, 58, 59, 67, 73, 75, 77, 80, 82, 92, 97, 106, 107, 108, 126, 143, 150, 223, 224, 228, 229, 232, 234, 235, 236, 247, 248, 264, 265], "thought": [4, 12, 14, 67, 223, 232, 285, 288], "perfect": [4, 23, 34, 58, 67, 107, 229, 235, 287, 288], "tell": [4, 5, 11, 21, 22, 27, 31, 34, 48, 59, 68, 71, 75, 98, 109, 130, 186, 206, 211, 215, 223, 226, 232, 248, 285], "think": [4, 11, 12, 13, 14, 21, 22, 23, 31, 38, 46, 58, 133, 186, 251, 255, 285, 293], "test_": [4, 11, 12, 247], "coverage_doctest": 4, "coverag": 4, "ad": [4, 5, 7, 8, 9, 11, 12, 13, 21, 29, 31, 40, 47, 48, 51, 57, 58, 67, 68, 78, 82, 89, 92, 96, 107, 109, 113, 121, 122, 125, 130, 131, 132, 148, 155, 183, 186, 192, 201, 202, 211, 213, 215, 216, 218, 226, 229, 232, 235, 236, 238, 241, 242, 247, 264, 285], "6868680200532414": [4, 12], "prompt": [4, 8, 12, 14], "dsolv": [4, 12, 14, 34, 232, 233, 234, 283, 287, 294], "co": [4, 9, 12, 13, 15, 23, 25, 28, 29, 31, 33, 34, 35, 36, 40, 46, 48, 66, 67, 69, 71, 72, 73, 75, 76, 77, 80, 81, 83, 85, 89, 90, 91, 92, 94, 98, 103, 107, 109, 122, 123, 125, 130, 131, 133, 134, 136, 138, 139, 140, 145, 148, 153, 155, 191, 193, 195, 197, 199, 200, 201, 202, 206, 209, 212, 213, 215, 216, 217, 218, 219, 223, 224, 225, 226, 228, 232, 234, 235, 236, 237, 243, 255, 261, 263, 264, 265, 266, 271, 282, 283, 285, 287, 293, 294], "sin": [4, 5, 12, 13, 14, 15, 21, 23, 25, 28, 31, 33, 34, 36, 38, 40, 46, 48, 66, 67, 69, 71, 72, 73, 75, 76, 77, 81, 85, 86, 89, 90, 91, 92, 94, 95, 98, 103, 108, 109, 119, 122, 123, 125, 130, 131, 133, 134, 136, 138, 139, 140, 145, 148, 153, 155, 179, 191, 193, 195, 197, 199, 200, 201, 202, 204, 206, 212, 213, 215, 216, 217, 218, 219, 223, 224, 225, 226, 228, 231, 232, 234, 235, 237, 243, 249, 255, 261, 263, 264, 265, 266, 271, 282, 283, 285, 287, 288, 293, 294], "hint": [4, 12, 23, 47, 51, 58, 67, 70, 73, 94, 98, 103, 107, 117, 148, 158, 162, 178, 180, 181, 191, 212, 223, 226, 234, 293], "1st_exact": [4, 12, 232], "eq": [4, 12, 14, 15, 17, 21, 23, 29, 30, 34, 36, 44, 46, 48, 67, 72, 73, 75, 77, 80, 84, 92, 97, 184, 202, 203, 207, 212, 214, 216, 218, 222, 224, 225, 228, 229, 231, 232, 233, 234, 235, 236, 248, 249, 255, 261, 285, 287, 294], "c1": [4, 12, 19, 34, 68, 77, 84, 98, 100, 125, 167, 181, 224, 229, 232, 234, 267, 294], "comma": [4, 5, 12, 15, 48, 67, 216, 255, 285], "readabl": [4, 12, 39, 47, 95, 121, 212, 215, 216, 223, 225, 258], "accept": [4, 11, 12, 14, 23, 29, 36, 47, 48, 58, 67, 73, 80, 81, 94, 97, 98, 100, 103, 106, 109, 117, 131, 175, 185, 191, 196, 202, 211, 212, 215, 216, 217, 224, 226, 228, 234, 248, 255, 261, 263, 266, 289], "rang": [4, 13, 14, 19, 23, 27, 30, 31, 46, 48, 56, 57, 58, 59, 61, 63, 67, 68, 72, 73, 75, 81, 98, 103, 107, 111, 113, 115, 119, 150, 181, 202, 205, 206, 207, 208, 209, 211, 212, 213, 218, 219, 222, 224, 225, 228, 232, 235, 236, 237, 241, 247, 254, 282, 293], "30": [4, 40, 46, 48, 53, 67, 68, 70, 71, 72, 75, 81, 83, 94, 98, 103, 104, 107, 110, 111, 131, 154, 205, 207, 211, 212, 216, 222, 225, 228, 236, 237, 293], "7": [4, 11, 12, 15, 21, 23, 25, 27, 30, 34, 40, 42, 43, 46, 48, 51, 53, 56, 57, 58, 59, 60, 61, 63, 65, 66, 67, 68, 70, 71, 72, 73, 75, 77, 80, 81, 82, 83, 89, 92, 94, 97, 98, 100, 101, 103, 107, 109, 110, 115, 117, 133, 140, 143, 144, 148, 181, 186, 188, 201, 202, 204, 205, 206, 207, 209, 210, 211, 212, 213, 215, 216, 218, 219, 222, 223, 224, 225, 226, 228, 229, 231, 232, 233, 234, 235, 236, 237, 241, 242, 247, 248, 251, 254, 255, 261, 271, 283, 288, 289, 292], "8": [4, 11, 12, 19, 25, 27, 33, 38, 40, 41, 46, 48, 51, 58, 59, 60, 63, 65, 67, 68, 70, 71, 72, 73, 75, 77, 80, 81, 83, 89, 92, 94, 96, 97, 98, 100, 101, 103, 104, 106, 107, 109, 110, 113, 115, 117, 119, 133, 148, 153, 154, 165, 201, 202, 204, 205, 206, 207, 209, 211, 212, 213, 215, 216, 218, 219, 222, 224, 225, 226, 228, 229, 231, 232, 233, 234, 235, 236, 237, 241, 247, 249, 251, 254, 261, 264, 265, 271, 282, 283, 287, 289, 293], "9": [4, 11, 12, 17, 25, 34, 36, 38, 46, 48, 55, 57, 58, 59, 63, 65, 66, 67, 68, 70, 72, 73, 75, 76, 77, 80, 81, 83, 89, 92, 94, 98, 99, 100, 101, 103, 104, 106, 107, 109, 110, 115, 117, 118, 119, 120, 122, 131, 133, 136, 142, 148, 150, 154, 186, 201, 202, 204, 205, 206, 207, 209, 211, 212, 213, 215, 216, 222, 224, 225, 226, 228, 229, 232, 234, 235, 236, 237, 247, 251, 254, 261, 264, 287, 289, 294], "11": [4, 21, 42, 43, 48, 58, 61, 63, 65, 67, 68, 70, 72, 75, 79, 80, 81, 83, 84, 92, 94, 97, 98, 99, 103, 107, 109, 117, 131, 133, 165, 175, 190, 201, 202, 204, 205, 207, 209, 210, 211, 212, 213, 215, 216, 223, 225, 229, 232, 234, 235, 236, 237, 247, 248, 254, 265], "12": [4, 12, 15, 23, 25, 27, 40, 46, 47, 48, 53, 55, 56, 58, 59, 60, 63, 65, 66, 67, 68, 70, 72, 73, 75, 77, 80, 81, 83, 92, 94, 98, 103, 104, 107, 110, 111, 115, 117, 119, 125, 133, 134, 178, 190, 191, 201, 204, 205, 206, 209, 211, 212, 213, 215, 216, 222, 224, 225, 229, 231, 232, 236, 237, 248, 251, 254, 264, 289, 293], "13": [4, 12, 40, 48, 56, 58, 63, 67, 68, 70, 72, 75, 79, 80, 81, 82, 92, 97, 103, 107, 111, 115, 117, 131, 190, 202, 205, 209, 211, 212, 213, 215, 216, 222, 229, 231, 233, 234, 236, 237, 248, 254, 271], "14": [4, 25, 27, 48, 56, 58, 62, 63, 65, 67, 68, 72, 73, 75, 92, 103, 104, 107, 108, 110, 115, 131, 201, 202, 205, 207, 209, 210, 211, 212, 213, 215, 216, 225, 228, 229, 232, 234, 236, 237, 283], "15": [4, 15, 23, 46, 53, 56, 58, 63, 65, 67, 68, 70, 71, 72, 75, 77, 80, 81, 83, 84, 92, 94, 97, 98, 99, 103, 104, 107, 110, 122, 154, 201, 202, 204, 205, 206, 207, 211, 212, 213, 215, 216, 218, 222, 223, 225, 228, 229, 233, 234, 235, 236, 237, 254, 282, 283, 288, 289], "16": [4, 12, 25, 27, 36, 40, 46, 48, 50, 58, 59, 62, 66, 67, 68, 72, 75, 76, 77, 81, 92, 94, 97, 103, 104, 106, 107, 111, 197, 204, 205, 206, 209, 210, 211, 212, 215, 216, 222, 224, 225, 226, 229, 236, 237, 254, 261, 270, 289], "17": [4, 33, 34, 36, 56, 58, 59, 67, 68, 71, 72, 73, 77, 80, 83, 92, 103, 107, 117, 206, 207, 211, 212, 215, 216, 223, 225, 229, 232, 237, 251, 255, 287], "18": [4, 33, 50, 58, 59, 67, 70, 72, 75, 77, 80, 83, 99, 103, 107, 110, 111, 115, 117, 119, 192, 201, 209, 210, 215, 216, 224, 225, 229, 232, 234, 235, 236, 237, 264], "19": [4, 25, 33, 58, 67, 70, 75, 77, 80, 83, 103, 107, 109, 110, 201, 207, 211, 212, 215, 225, 229, 231, 234, 248, 282], "20": [4, 15, 25, 33, 36, 44, 48, 56, 58, 59, 66, 67, 68, 71, 72, 75, 83, 84, 94, 103, 107, 110, 111, 113, 117, 128, 186, 188, 201, 202, 206, 210, 211, 212, 213, 215, 216, 222, 223, 224, 225, 228, 229, 232, 235, 236, 261, 283], "21": [4, 13, 53, 58, 67, 70, 72, 80, 81, 89, 103, 107, 109, 110, 190, 202, 207, 209, 210, 211, 213, 215, 216, 222, 232, 236, 237, 293], "22": [4, 12, 15, 58, 67, 70, 71, 72, 75, 103, 107, 110, 111, 190, 210, 215, 228, 229, 234, 236], "23": [4, 46, 58, 59, 67, 70, 73, 75, 81, 83, 103, 107, 110, 190, 207, 209, 212, 215, 222, 229, 254], "24": [4, 11, 12, 30, 32, 33, 40, 46, 55, 59, 60, 67, 70, 72, 75, 81, 89, 94, 103, 107, 110, 111, 115, 117, 178, 188, 201, 207, 209, 211, 212, 213, 215, 218, 223, 229, 232, 236, 251, 254, 271, 283, 289], "25": [4, 15, 25, 30, 33, 58, 59, 68, 70, 72, 75, 77, 80, 82, 99, 103, 106, 107, 110, 111, 117, 122, 128, 195, 201, 205, 209, 211, 212, 215, 216, 222, 223, 225, 229, 231, 232, 233, 236, 248], "26": [4, 56, 67, 68, 70, 75, 79, 103, 107, 110, 111, 212, 229, 236], "27": [4, 11, 31, 48, 49, 58, 62, 72, 77, 103, 107, 110, 111, 117, 119, 209, 212, 234], "28": [4, 48, 58, 66, 70, 71, 75, 103, 107, 110, 133, 225, 229, 232, 288], "29": [4, 21, 40, 42, 43, 50, 56, 58, 59, 67, 68, 70, 72, 73, 80, 81, 103, 107, 117, 170, 206, 224, 236, 254], "assumpt": [4, 12, 14, 15, 20, 22, 24, 30, 31, 32, 41, 42, 44, 45, 47, 48, 58, 59, 61, 66, 69, 71, 73, 74, 94, 97, 98, 103, 104, 110, 117, 121, 148, 185, 188, 193, 205, 215, 216, 224, 225, 228, 232, 234, 235, 241, 249, 254, 272, 273, 293], "parenthes": [4, 12, 15, 67, 109, 121, 169, 170, 200, 216, 240, 257], "respect": [4, 9, 13, 14, 15, 23, 25, 34, 41, 43, 44, 46, 47, 48, 49, 57, 58, 59, 62, 63, 65, 66, 67, 69, 72, 73, 75, 77, 79, 83, 84, 89, 90, 92, 94, 97, 98, 100, 103, 107, 109, 110, 111, 113, 117, 122, 123, 125, 128, 130, 135, 142, 144, 146, 148, 155, 170, 183, 184, 190, 191, 195, 197, 200, 201, 202, 203, 206, 209, 211, 212, 213, 216, 218, 219, 222, 224, 228, 232, 233, 234, 235, 236, 237, 241, 242, 247, 249, 261, 263, 264, 265, 266, 267, 268, 269, 270, 283, 293], "type": [4, 7, 9, 11, 13, 14, 15, 16, 18, 21, 22, 23, 25, 28, 30, 31, 36, 42, 43, 46, 50, 58, 59, 63, 66, 67, 68, 69, 70, 71, 73, 77, 78, 79, 80, 81, 82, 85, 92, 94, 95, 96, 97, 98, 99, 100, 103, 107, 108, 109, 110, 111, 113, 115, 117, 121, 125, 126, 130, 131, 142, 148, 153, 167, 175, 176, 177, 179, 185, 191, 195, 196, 200, 202, 203, 206, 207, 210, 211, 212, 213, 214, 216, 217, 218, 224, 225, 226, 228, 229, 231, 232, 234, 240, 241, 242, 245, 247, 248, 249, 254, 255, 257, 265, 268, 271, 283, 285, 287, 288, 289, 292, 293, 294], "enclos": [4, 77, 78, 83, 106, 118, 216, 226, 255], "backtick": [4, 5, 8], "colon": [4, 67], "preced": [4, 5, 15, 49, 59, 67, 68, 71, 72, 161, 228, 255], "space": [4, 12, 15, 23, 46, 47, 48, 67, 68, 69, 76, 77, 78, 80, 82, 83, 96, 103, 109, 110, 119, 125, 126, 127, 128, 150, 152, 155, 165, 168, 170, 176, 178, 191, 195, 197, 200, 201, 202, 203, 211, 235, 236, 247, 251, 261, 263, 265, 266, 267, 268, 270, 271, 278, 285, 288], "omit": [4, 13, 21, 23, 48, 59, 66, 67, 68, 72, 92, 94, 97, 103, 183, 216, 217, 224, 226, 234, 240, 249, 254, 283], "absent": [4, 51, 234], "possibl": [4, 8, 11, 12, 13, 14, 17, 21, 22, 23, 25, 27, 30, 35, 38, 46, 48, 49, 50, 51, 56, 58, 59, 61, 62, 63, 67, 68, 72, 73, 75, 77, 79, 81, 82, 84, 89, 91, 92, 94, 96, 97, 98, 100, 103, 107, 118, 119, 121, 126, 133, 144, 175, 177, 181, 183, 185, 186, 190, 195, 197, 201, 202, 203, 204, 206, 207, 209, 211, 212, 213, 215, 216, 217, 218, 222, 223, 224, 225, 228, 229, 232, 233, 234, 235, 236, 237, 242, 247, 249, 250, 251, 252, 254, 255, 265, 266, 268, 284, 285, 288, 293], "specifi": [4, 5, 13, 17, 21, 23, 27, 32, 33, 35, 36, 47, 48, 49, 62, 66, 67, 68, 69, 70, 73, 75, 76, 80, 83, 92, 94, 96, 97, 98, 100, 103, 107, 109, 110, 111, 117, 122, 125, 126, 130, 131, 133, 135, 136, 138, 141, 143, 144, 145, 146, 148, 149, 165, 170, 175, 176, 178, 179, 184, 190, 191, 193, 195, 197, 199, 200, 203, 204, 205, 206, 207, 209, 211, 212, 213, 216, 218, 219, 222, 223, 224, 226, 228, 232, 233, 234, 235, 236, 237, 241, 242, 243, 247, 248, 249, 254, 255, 261, 263, 264, 267, 270, 289], "displai": [4, 5, 7, 11, 15, 21, 22, 34, 67, 68, 71, 92, 96, 110, 111, 115, 152, 185, 191, 195, 196, 202, 206, 207, 216, 224, 240, 247], "signatur": [4, 7, 23, 42, 43, 59, 67, 103, 249, 250, 254, 255], "brace": [4, 72, 131, 216], "appear": [4, 5, 11, 12, 14, 15, 17, 34, 47, 48, 51, 56, 58, 67, 68, 72, 73, 76, 77, 80, 83, 86, 90, 92, 94, 98, 103, 107, 109, 131, 135, 165, 181, 183, 186, 202, 204, 206, 209, 211, 212, 216, 225, 228, 232, 233, 234, 236, 240, 242, 247, 254, 255, 261, 266], "shape": [4, 13, 48, 83, 98, 100, 103, 105, 106, 115, 117, 125, 130, 131, 191, 202, 203, 205, 216, 219, 226, 236, 237, 238, 240, 241, 242, 255, 292], "combin": [4, 11, 13, 15, 23, 27, 35, 47, 67, 71, 72, 75, 94, 96, 97, 98, 107, 111, 117, 125, 130, 134, 141, 149, 160, 167, 175, 176, 178, 179, 180, 184, 185, 186, 187, 203, 204, 206, 207, 209, 211, 212, 216, 217, 225, 226, 228, 229, 232, 234, 236, 237, 251, 254, 282, 285, 288], "incorrectli": [4, 11, 13, 23, 76, 77, 103, 204], "opt_cs": [4, 228], "canon": [4, 14, 21, 29, 48, 51, 56, 58, 59, 63, 67, 68, 69, 73, 83, 92, 97, 103, 107, 109, 126, 158, 162, 181, 183, 186, 188, 209, 217, 224, 225, 228, 232, 234, 236, 242, 254, 293], "find": [4, 9, 11, 12, 14, 15, 17, 19, 20, 23, 25, 28, 29, 30, 31, 32, 34, 35, 36, 40, 43, 46, 48, 49, 50, 58, 61, 62, 63, 66, 67, 71, 73, 75, 77, 79, 80, 81, 84, 89, 92, 94, 96, 103, 107, 109, 123, 128, 132, 139, 146, 148, 150, 166, 173, 175, 176, 177, 181, 184, 186, 199, 202, 203, 204, 205, 206, 207, 209, 213, 215, 216, 221, 222, 223, 224, 225, 226, 228, 229, 231, 232, 234, 235, 236, 242, 251, 254, 255, 257, 261, 271, 283, 285, 287, 289, 294], "optim": [4, 14, 33, 48, 51, 58, 71, 97, 107, 121, 148, 161, 165, 212, 216, 217, 225, 228, 236, 248], "mul": [4, 13, 14, 15, 18, 23, 40, 92, 94, 98, 107, 161, 165, 175, 176, 205, 206, 207, 211, 212, 216, 217, 218, 225, 228, 232, 233, 234, 235, 240, 288], "pow": [4, 13, 14, 15, 40, 45, 48, 67, 68, 73, 92, 98, 107, 180, 205, 206, 207, 212, 216, 218, 225, 228, 234, 235, 288, 292], "neg": [4, 14, 15, 21, 22, 25, 31, 44, 45, 48, 49, 62, 66, 67, 72, 73, 75, 77, 79, 80, 83, 92, 94, 96, 97, 98, 103, 106, 107, 110, 111, 113, 114, 115, 117, 125, 181, 191, 201, 204, 205, 207, 209, 211, 212, 213, 216, 222, 224, 225, 226, 228, 229, 232, 234, 235, 236, 255], "coeffici": [4, 17, 19, 21, 27, 30, 32, 43, 46, 48, 66, 67, 69, 71, 72, 75, 80, 85, 86, 89, 90, 92, 96, 97, 100, 103, 104, 107, 117, 118, 126, 131, 154, 168, 178, 186, 201, 203, 204, 205, 206, 207, 208, 211, 212, 213, 214, 215, 218, 219, 222, 223, 226, 228, 229, 231, 232, 233, 234, 235, 236, 242, 248, 265, 268, 278, 288, 293], "none": [4, 5, 12, 13, 14, 21, 22, 23, 40, 41, 42, 43, 44, 46, 47, 48, 50, 56, 57, 58, 59, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 75, 76, 77, 78, 80, 81, 82, 83, 84, 86, 88, 89, 90, 92, 94, 95, 97, 98, 100, 103, 104, 107, 108, 109, 110, 113, 117, 122, 123, 125, 126, 127, 128, 130, 131, 150, 152, 154, 155, 161, 166, 171, 176, 178, 181, 183, 187, 188, 189, 191, 193, 195, 196, 200, 201, 202, 203, 205, 206, 207, 209, 211, 212, 214, 216, 217, 218, 219, 221, 222, 223, 224, 225, 228, 229, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 245, 247, 248, 249, 250, 254, 255, 257, 260, 261, 264, 289, 293, 294], "process": [4, 5, 6, 7, 9, 10, 12, 13, 14, 15, 21, 45, 48, 58, 59, 65, 67, 68, 73, 75, 83, 92, 94, 103, 107, 117, 126, 127, 130, 131, 133, 139, 142, 143, 145, 148, 202, 203, 209, 216, 217, 224, 228, 232, 234, 238, 247, 251, 293], "concern": [4, 12, 14, 21, 46, 49, 66, 71, 107, 197, 202, 204, 205, 206, 215, 216, 217, 228, 229, 234, 248, 249, 251, 257], "item": [4, 5, 14, 15, 17, 27, 34, 48, 56, 57, 59, 67, 72, 78, 84, 98, 103, 107, 126, 128, 146, 202, 206, 209, 212, 216, 224, 232, 233, 236, 247, 248, 251, 254, 255, 293], "fragment": [4, 68], "desir": [4, 13, 15, 19, 23, 29, 34, 36, 39, 58, 59, 67, 68, 70, 71, 72, 73, 77, 81, 83, 97, 98, 103, 106, 107, 108, 126, 127, 128, 130, 141, 145, 166, 191, 199, 200, 205, 207, 209, 211, 212, 213, 216, 217, 219, 224, 228, 232, 234, 235, 248, 250, 251, 254, 268, 282], "span": [4, 13, 96, 103, 110, 111, 125, 211, 216, 252, 289], "subsequ": [4, 11, 12, 15, 34, 67, 73, 191, 207, 209, 212, 251, 254, 265, 268], "indent": [4, 15, 257], "embed": [4, 5, 46, 59, 67, 95, 211], "hyperlink": 4, "classnam": 4, "erf": [4, 75, 92, 94, 216, 226, 236], "gauss": [4, 32, 75, 94, 103, 150, 204, 211, 214, 234, 235], "erfc": [4, 75, 92, 216, 236], "complementari": [4, 75, 117], "erfi": [4, 75, 92, 216], "erf2": [4, 75, 216], "erfinv": [4, 75, 216, 236], "invers": [4, 12, 32, 34, 40, 58, 59, 67, 68, 69, 75, 94, 100, 103, 107, 125, 126, 130, 170, 174, 175, 178, 183, 186, 203, 204, 205, 207, 209, 212, 213, 216, 218, 226, 228, 232, 234, 235, 236, 254, 289, 293], "erfcinv": [4, 75, 216], "erf2inv": [4, 75, 216], "besselj": [4, 75, 89, 216, 228, 232, 287], "besselbas": [4, 75], "bessel": [4, 5, 73, 85, 94, 212, 228, 232, 236, 287], "kind": [4, 5, 13, 14, 20, 21, 22, 23, 47, 48, 69, 72, 75, 87, 94, 98, 110, 113, 126, 131, 144, 185, 197, 204, 206, 207, 212, 217, 218, 224, 232, 233, 236, 254, 268, 270, 283, 293], "bess": [4, 75, 216, 228, 232, 236], "besselk": [4, 75, 216, 236], "cite": [4, 24], "resourc": [4, 5, 8, 23, 103, 210, 232, 248, 258], "citat": 4, "meant": [4, 5, 12, 13, 15, 21, 23, 48, 67, 75, 80, 94, 107, 131, 148, 202, 207, 224, 228, 233, 238, 266, 288], "augment": [4, 48, 103, 126, 130, 143, 144, 148, 214, 234, 235, 252, 255, 294], "freeli": [4, 39, 101, 125, 203], "wikipedia": [4, 14, 21, 23, 40, 42, 43, 44, 46, 47, 48, 50, 55, 56, 58, 59, 66, 67, 68, 69, 70, 72, 73, 75, 77, 79, 83, 84, 85, 94, 96, 97, 98, 100, 103, 107, 115, 117, 120, 150, 152, 153, 154, 156, 157, 158, 162, 163, 164, 167, 169, 170, 179, 181, 184, 191, 193, 198, 205, 212, 219, 223, 224, 225, 232, 235, 236, 249, 254, 261, 263, 267, 269, 271, 287, 289, 291], "wolfram": [4, 44, 60, 61, 67, 68, 70, 72, 73, 75, 77, 83, 94, 103, 107, 109, 210, 216, 218, 219, 221, 224, 229, 236, 254, 289], "mathworld": [4, 14, 44, 60, 61, 67, 68, 70, 72, 73, 75, 77, 83, 94, 103, 107, 210, 219, 224, 229, 236, 254], "nist": [4, 73, 75, 186], "digit": [4, 11, 14, 15, 33, 48, 67, 68, 70, 71, 77, 94, 97, 107, 141, 191, 206, 212, 223, 228, 254, 282], "dlmf": [4, 73, 75], "suffer": 4, "rot": [4, 83, 178], "publish": [4, 92, 226], "identifi": [4, 12, 13, 21, 22, 46, 60, 67, 70, 71, 94, 103, 113, 130, 143, 169, 170, 203, 206, 207, 217, 225, 228, 232, 233, 235, 236, 255, 258], "clickabl": 4, "kozen89": [4, 209, 210], "d": [4, 5, 7, 8, 11, 12, 13, 14, 15, 19, 23, 25, 28, 30, 32, 34, 40, 47, 51, 56, 58, 59, 60, 62, 63, 65, 66, 67, 68, 69, 72, 75, 77, 81, 85, 90, 92, 94, 96, 97, 98, 99, 100, 103, 104, 106, 107, 109, 110, 113, 117, 125, 126, 127, 148, 150, 153, 154, 160, 170, 178, 180, 181, 186, 190, 191, 193, 199, 200, 201, 202, 204, 205, 206, 207, 209, 210, 211, 212, 213, 216, 218, 222, 226, 228, 229, 232, 233, 234, 235, 236, 237, 238, 240, 242, 254, 257, 261, 263, 264, 265, 266, 270, 278, 289, 294], "kozen": [4, 210], "landau": [4, 210, 283], "polynomi": [4, 5, 14, 19, 21, 28, 30, 36, 44, 58, 66, 67, 68, 71, 72, 85, 86, 88, 90, 94, 97, 98, 100, 103, 107, 111, 117, 148, 190, 203, 205, 210, 214, 218, 223, 225, 226, 228, 229, 231, 232, 235, 247, 272, 279, 284, 289, 294], "decomposit": [4, 27, 32, 58, 65, 99, 100, 103, 205, 207, 209, 210, 218, 293], "1989": [4, 210, 234], "pp": [4, 58, 59, 65, 66, 67, 68, 72, 73, 94, 98, 103, 127, 135, 145, 201, 204, 205, 209, 210, 232, 233, 236], "445": [4, 210], "456": [4, 67, 210], "abramowitz": [4, 75], "milton": [4, 75], "stegun": [4, 75], "iren": [4, 75], "chapter": [4, 58, 75, 107, 131, 210], "handbook": [4, 49, 57, 58, 65, 75, 107], "formula": [4, 19, 27, 40, 46, 61, 66, 67, 71, 72, 73, 75, 80, 97, 103, 107, 201, 203, 209, 212, 216, 218, 222, 225, 228, 229, 232, 287, 293], "tabl": [4, 21, 49, 58, 67, 72, 75, 88, 94, 103, 107, 125, 148, 201, 211, 238], "ed": [4, 59, 75, 94, 103, 210, 234, 236], "1965": [4, 75, 98], "luke": [4, 75, 92, 226], "l": [4, 13, 15, 46, 47, 48, 49, 56, 58, 59, 66, 68, 75, 78, 79, 80, 81, 82, 84, 85, 90, 92, 94, 96, 99, 100, 103, 107, 110, 111, 117, 119, 125, 126, 127, 128, 130, 131, 134, 135, 136, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 153, 179, 182, 183, 184, 186, 199, 200, 201, 203, 205, 207, 209, 210, 216, 218, 219, 225, 226, 229, 232, 234, 236, 240, 241, 242, 243, 247, 249, 254, 271, 293], "Their": [4, 67, 75, 92, 201, 202, 206, 209, 226], "approxim": [4, 15, 20, 36, 46, 58, 66, 67, 68, 71, 75, 77, 83, 92, 94, 103, 107, 111, 114, 150, 184, 202, 206, 207, 212, 219, 223, 226, 236, 283, 287], "1969": [4, 68, 75, 92, 210, 226], "en": [4, 5, 8, 9, 11, 12, 21, 23, 40, 42, 43, 44, 46, 47, 48, 50, 55, 56, 58, 59, 66, 67, 68, 69, 70, 72, 73, 75, 77, 79, 83, 84, 85, 94, 95, 96, 97, 98, 100, 103, 107, 115, 117, 120, 150, 152, 153, 154, 156, 157, 158, 162, 163, 164, 167, 169, 170, 179, 181, 191, 193, 198, 205, 212, 213, 219, 223, 224, 225, 232, 235, 236, 249, 254, 255, 261, 263, 267, 269, 271, 289], "bessel_funct": [4, 75], "typefunct": [4, 75], "gamma": [4, 5, 12, 15, 23, 66, 67, 69, 71, 72, 92, 94, 120, 148, 178, 200, 201, 216, 226, 228, 232, 236, 293], "infti": [4, 14, 21, 44, 66, 67, 68, 72, 73, 75, 92, 94, 203, 212, 219, 223, 226, 232, 235, 236, 283, 287, 293], "mathrm": [4, 38, 57, 66, 67, 68, 75, 92, 94, 103, 207, 209, 216, 224, 226, 232, 235, 236, 283, 287], "factori": [4, 12, 19, 23, 32, 66, 67, 71, 72, 75, 103, 107, 109, 201, 207, 209, 211, 212, 216, 218, 228, 234, 236, 249, 250, 254, 255, 293], "z": [4, 13, 14, 15, 17, 21, 23, 30, 33, 34, 35, 40, 44, 45, 48, 49, 58, 59, 66, 67, 68, 69, 70, 72, 73, 75, 79, 80, 81, 82, 83, 92, 94, 97, 98, 100, 103, 109, 110, 111, 117, 119, 122, 123, 125, 128, 130, 131, 133, 134, 135, 136, 138, 139, 140, 142, 145, 146, 148, 149, 150, 159, 161, 165, 175, 176, 178, 182, 186, 190, 191, 192, 193, 195, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 215, 216, 217, 223, 224, 225, 226, 228, 229, 232, 233, 234, 235, 236, 237, 240, 241, 242, 248, 249, 255, 261, 264, 265, 266, 267, 268, 270, 271, 282, 283, 285, 287, 288, 292, 293, 294], "whole": [4, 12, 13, 21, 67, 69, 75, 94, 111, 119, 202, 203, 211, 212, 216, 219, 224, 226, 232, 235, 254], "complex": [4, 7, 12, 13, 14, 15, 18, 21, 23, 30, 31, 32, 36, 40, 44, 45, 46, 48, 58, 67, 68, 70, 71, 72, 75, 79, 89, 92, 98, 99, 103, 107, 108, 109, 115, 117, 121, 126, 130, 131, 148, 150, 154, 164, 167, 169, 170, 181, 190, 191, 200, 204, 205, 207, 211, 212, 216, 217, 221, 224, 226, 228, 232, 234, 235, 236, 249, 257, 293, 294], "plane": [4, 25, 40, 67, 75, 77, 79, 80, 82, 83, 94, 103, 115, 125, 133, 153, 154, 199, 200, 224, 235, 271, 279, 293], "pole": [4, 14, 25, 75, 92, 117, 125, 154, 223, 226, 232], "pi": [4, 12, 13, 14, 15, 18, 21, 23, 28, 29, 31, 34, 36, 39, 40, 41, 43, 44, 45, 46, 48, 59, 66, 67, 69, 71, 72, 73, 75, 76, 77, 78, 80, 81, 82, 83, 86, 92, 94, 103, 107, 119, 125, 133, 148, 150, 152, 153, 154, 155, 157, 165, 176, 178, 179, 182, 184, 191, 201, 202, 204, 206, 207, 212, 216, 219, 223, 224, 225, 226, 228, 231, 232, 234, 235, 236, 254, 261, 264, 271, 282, 287, 293], "oo": [4, 14, 17, 21, 22, 25, 29, 44, 46, 66, 67, 71, 72, 73, 75, 80, 92, 94, 97, 103, 117, 119, 167, 179, 182, 207, 209, 212, 221, 222, 223, 224, 228, 231, 232, 234, 235, 236, 241, 254, 257, 283, 287], "known": [4, 11, 12, 14, 21, 22, 23, 25, 34, 43, 47, 48, 49, 50, 56, 58, 59, 67, 68, 71, 72, 75, 77, 80, 85, 92, 94, 95, 104, 107, 115, 117, 118, 120, 122, 128, 130, 145, 184, 191, 199, 205, 206, 207, 211, 212, 216, 219, 222, 224, 225, 226, 228, 231, 232, 233, 234, 236, 254, 255, 261, 268, 270, 293], "sqrt": [4, 12, 13, 14, 17, 21, 23, 25, 27, 28, 29, 30, 31, 35, 36, 40, 44, 45, 46, 48, 67, 69, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 90, 91, 92, 94, 95, 98, 99, 103, 107, 109, 110, 113, 117, 119, 133, 150, 152, 154, 155, 160, 165, 175, 176, 178, 179, 181, 182, 184, 185, 191, 197, 200, 201, 204, 206, 207, 209, 211, 212, 215, 216, 217, 222, 225, 226, 228, 229, 231, 232, 234, 235, 236, 254, 255, 257, 261, 270, 271, 282, 287, 292, 293, 294], "obei": [4, 75, 201, 216, 226], "mirror": [4, 75, 94, 154], "symmetri": [4, 13, 50, 55, 60, 63, 75, 98, 160, 201, 232, 240, 242, 282, 293], "conjug": [4, 27, 44, 56, 57, 58, 67, 73, 75, 98, 103, 119, 150, 164, 167, 181, 212, 216, 232, 242], "differenti": [4, 5, 12, 13, 14, 25, 28, 46, 67, 72, 73, 75, 84, 85, 87, 90, 94, 117, 125, 126, 130, 131, 133, 135, 138, 141, 142, 143, 144, 145, 148, 149, 170, 176, 190, 191, 193, 195, 197, 200, 203, 209, 213, 215, 216, 221, 226, 228, 232, 233, 261, 268, 269, 272, 279, 283, 284, 287], "polygamma": [4, 72, 75, 216], "seri": [4, 11, 12, 13, 19, 25, 34, 46, 47, 48, 49, 57, 58, 66, 67, 69, 71, 72, 73, 75, 90, 91, 92, 96, 107, 114, 117, 131, 138, 140, 148, 195, 199, 208, 209, 216, 221, 222, 226, 232, 235, 273, 279, 284], "expans": [4, 11, 19, 23, 48, 67, 69, 72, 73, 75, 94, 103, 107, 145, 160, 162, 212, 213, 218, 219, 220, 225, 227, 228, 232, 234, 235, 273, 284, 293], "eulergamma": [4, 67, 71, 72, 75], "zeta": [4, 14, 15, 66, 67, 71, 72, 207, 211, 216, 223, 236], "40": [4, 36, 48, 70, 72, 75, 77, 84, 98, 103, 107, 110, 202, 213, 215, 216, 236, 257, 282], "288037795340032417959588909060233922890": [4, 75], "49801566811835604271": [4, 75], "15494982830181068512": [4, 75], "lowergamma": [4, 75, 236], "lower": [4, 14, 21, 29, 44, 46, 48, 58, 59, 66, 67, 69, 75, 76, 78, 83, 84, 94, 98, 99, 100, 103, 115, 120, 125, 181, 195, 201, 203, 205, 207, 209, 212, 216, 225, 226, 228, 232, 241, 242, 251, 261, 283, 291], "uppergamma": [4, 72, 75, 216, 236], "upper": [4, 44, 66, 68, 71, 75, 76, 83, 84, 98, 99, 100, 103, 106, 107, 115, 125, 174, 181, 201, 205, 207, 209, 211, 212, 216, 226, 234, 241, 261], "loggamma": [4, 5, 75, 216], "log": [4, 5, 9, 11, 12, 15, 23, 38, 40, 46, 48, 58, 66, 67, 71, 72, 73, 75, 85, 89, 91, 92, 94, 98, 103, 107, 202, 207, 216, 218, 223, 226, 228, 232, 235, 236, 243, 283, 293, 294], "digamma": [4, 72, 75, 216], "trigamma": [4, 75, 216], "beta": [4, 15, 48, 58, 67, 94, 178, 191, 201, 211, 213, 216, 232, 236], "euler": [4, 40, 46, 47, 66, 67, 68, 71, 72, 75, 83, 89, 95, 107, 125, 178, 191, 196, 200, 201, 212, 216, 232, 236, 261, 263], "gamma_funct": [4, 75], "gov": [4, 73, 75], "gammafunct": [4, 75], "gammabetaerf": [4, 72, 75], "unusu": [4, 21, 133, 247], "inlin": [4, 12, 95, 196, 216, 249], "pretti": [4, 9, 11, 12, 14, 23, 47, 48, 75, 94, 95, 103, 107, 111, 117, 133, 196, 226, 228, 235, 270, 284, 287, 289, 293], "As": [4, 18, 19, 22, 23, 27, 32, 33, 34, 39, 48, 58, 59, 67, 68, 71, 72, 73, 75, 91, 92, 97, 103, 106, 107, 109, 125, 130, 131, 133, 135, 142, 145, 146, 181, 186, 199, 203, 204, 206, 207, 209, 212, 213, 215, 216, 223, 224, 226, 232, 235, 236, 254, 255, 265, 266, 282, 283, 285, 287, 288, 289, 292, 293], "literatur": [4, 14, 92, 208, 279], "fact": [4, 12, 13, 14, 21, 22, 23, 31, 43, 44, 67, 72, 75, 85, 92, 107, 113, 133, 145, 186, 203, 204, 206, 209, 211, 213, 215, 226, 228, 232, 235, 247, 255, 270, 282, 285, 286, 287, 288, 293], "eval": [4, 13, 21, 42, 43, 48, 67, 73, 75, 167, 181, 207, 212, 216, 249, 282], "illumin": 4, "tone": 4, "narr": [4, 286], "excerpt": 4, "geometri": [4, 76, 77, 78, 80, 81, 82, 83, 84, 94, 141, 154, 208, 264, 271, 272, 279, 287], "autofunct": [4, 11], "intersect": [4, 21, 31, 46, 47, 58, 77, 78, 80, 81, 82, 83, 84, 103, 154, 203, 212, 216, 222, 223, 224, 235], "convex_hul": [4, 79, 83, 84], "are_similar": [4, 78, 79, 84], "autoclass": 4, "linearent": [4, 77, 80, 81, 82, 83], "rai": [4, 77, 79, 80, 81, 83, 84, 150, 154], "segment": [4, 13, 58, 77, 79, 80, 81, 82, 83, 84, 199, 202, 232, 247], "curv": [4, 47, 69, 79, 94, 107, 110, 150, 202, 203, 232, 261, 271, 279, 283], "ellips": [4, 78, 79, 83, 153, 202, 216, 279, 292], "circl": [4, 23, 67, 77, 78, 79, 81, 82, 83, 84, 92, 154, 161, 202, 235, 261, 264, 271], "polygon": [4, 77, 78, 79, 84, 202, 271, 279], "regularpolygon": [4, 78, 79, 83, 202], "triangl": [4, 23, 47, 72, 78, 79, 83, 84, 94, 98, 107, 201, 202, 264, 271], "rel": [4, 5, 30, 47, 48, 57, 58, 59, 60, 64, 65, 66, 67, 68, 71, 78, 92, 103, 107, 122, 125, 126, 128, 136, 145, 146, 153, 180, 191, 195, 199, 200, 203, 205, 206, 209, 211, 224, 226, 231, 234, 236, 247, 254, 265, 266, 270, 287], "cumbersom": [4, 11, 36], "path": [4, 8, 11, 12, 13, 58, 83, 89, 117, 139, 197, 199, 225, 228, 232, 235, 247, 248, 251, 252, 254, 257, 258, 259, 268], "viewcod": 4, "aco": [4, 15, 40, 73, 80, 83, 133, 148, 154, 191, 216, 232, 261, 293], "obj": [4, 21, 67, 207, 212, 216, 250], "qualifi": [4, 258], "elementari": [4, 11, 12, 21, 22, 23, 58, 67, 68, 71, 74, 75, 89, 92, 94, 98, 103, 107, 146, 174, 177, 207, 212, 213, 254, 255, 265, 273], "trigonometr": [4, 23, 29, 36, 67, 94, 213, 219, 227, 228, 231, 232, 235, 255, 273, 284, 294], "trail": [4, 12, 59, 107, 207, 209, 212, 252, 257], "pair": [4, 15, 19, 27, 30, 47, 48, 58, 59, 67, 68, 73, 79, 84, 91, 103, 107, 131, 135, 146, 171, 173, 175, 176, 181, 201, 203, 206, 207, 209, 211, 212, 217, 222, 223, 225, 226, 228, 229, 232, 235, 236, 249, 254, 265, 282, 289], "www": [4, 5, 25, 40, 46, 58, 59, 68, 70, 72, 94, 95, 107, 115, 117, 196, 210, 215, 216, 225, 228, 229, 232, 236, 254, 289, 292], "master": [4, 5, 7, 11, 12, 38, 94, 247], "usag": [4, 5, 12, 14, 15, 21, 22, 23, 39, 42, 69, 73, 94, 107, 178, 197, 202, 203, 209, 216, 224, 226, 229, 232, 233, 237, 251, 255, 256, 268, 269, 276, 288], "expect": [4, 5, 7, 15, 21, 23, 25, 47, 49, 52, 67, 73, 75, 79, 97, 107, 108, 117, 125, 131, 175, 206, 209, 211, 213, 214, 223, 228, 231, 234, 235, 236, 245, 247, 248, 251, 254, 255, 287, 288], "vector": [4, 13, 19, 26, 40, 44, 48, 51, 58, 59, 67, 69, 75, 80, 81, 82, 89, 90, 96, 98, 103, 108, 110, 113, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 133, 135, 138, 139, 140, 142, 143, 144, 145, 146, 148, 149, 153, 154, 167, 176, 178, 183, 186, 191, 193, 195, 196, 203, 211, 216, 226, 232, 234, 236, 241, 242, 247, 248, 263, 267, 272, 276, 278, 289], "dynamicsymbol": [4, 103, 121, 122, 123, 125, 126, 128, 130, 131, 133, 134, 135, 136, 138, 139, 140, 142, 143, 144, 145, 146, 148, 149, 191, 193, 195, 196, 197, 199, 200], "custom": [4, 9, 13, 24, 48, 59, 67, 71, 74, 95, 98, 103, 123, 125, 190, 196, 197, 218, 222, 229, 236, 242, 248, 255, 261, 270, 287, 289], "sine": [4, 23, 67, 73, 75, 92, 94, 155, 213, 219, 225, 282], "expand": [4, 12, 13, 14, 15, 19, 21, 25, 27, 48, 67, 69, 71, 72, 73, 75, 92, 94, 98, 117, 131, 133, 148, 162, 170, 173, 180, 181, 204, 206, 209, 211, 212, 213, 216, 219, 223, 225, 226, 228, 232, 235, 236, 240, 248, 255, 267, 282, 287], "troubleshoot": [4, 9, 145], "tip": [4, 7, 8, 12, 67, 145, 232, 233, 293], "spell": [4, 13, 14, 232], "try": [4, 5, 11, 12, 13, 14, 15, 21, 22, 23, 27, 29, 30, 33, 34, 36, 59, 66, 67, 71, 75, 77, 82, 92, 94, 97, 100, 103, 106, 107, 109, 130, 171, 173, 180, 181, 202, 206, 207, 211, 216, 221, 223, 224, 225, 226, 228, 229, 232, 234, 254, 255, 257, 282, 285, 288, 289, 293], "referencefram": [4, 13, 122, 123, 125, 126, 128, 130, 131, 133, 134, 135, 138, 139, 140, 143, 144, 145, 146, 148, 149, 191, 192, 193, 195, 196, 197, 198, 199, 278], "though": [4, 11, 14, 15, 21, 22, 23, 27, 33, 34, 35, 36, 39, 49, 67, 68, 69, 72, 79, 83, 92, 94, 98, 103, 107, 121, 126, 133, 143, 145, 176, 185, 190, 191, 199, 200, 204, 206, 207, 212, 213, 225, 226, 228, 232, 233, 234, 235, 247, 268, 283, 288, 293], "frame": [4, 121, 122, 123, 125, 126, 128, 130, 131, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 148, 149, 190, 191, 192, 193, 195, 197, 199, 251, 261, 268], "notimplementederror": [4, 29, 31, 34, 35, 36, 46, 66, 77, 80, 84, 94, 103, 115, 205, 211, 215, 224, 231, 232, 233, 234, 235], "outsid": [4, 31, 44, 58, 67, 75, 78, 83, 98, 107, 121, 186, 200, 212, 228, 283, 288], "plot": [4, 23, 25, 34, 38, 76, 77, 79, 80, 83, 90, 95, 103, 110, 111, 113, 116, 148, 165, 168, 174, 219, 272, 278, 279, 287, 292], "recommend": [4, 8, 9, 11, 13, 14, 15, 16, 21, 23, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 47, 48, 67, 68, 71, 98, 121, 143, 148, 175, 191, 199, 204, 205, 206, 207, 213, 229, 232, 235, 241, 245, 252, 265, 266, 291, 294], "ahead": [4, 107], "submit": [4, 11], "sub": [4, 12, 13, 14, 15, 17, 21, 22, 23, 25, 27, 30, 31, 33, 34, 48, 66, 67, 73, 75, 76, 77, 78, 79, 80, 81, 83, 94, 97, 98, 100, 103, 107, 109, 110, 111, 117, 121, 123, 131, 133, 134, 135, 138, 139, 145, 148, 178, 179, 184, 191, 201, 203, 205, 206, 207, 212, 216, 223, 224, 228, 229, 232, 233, 234, 236, 247, 248, 250, 282, 283, 285], "common": [4, 5, 9, 11, 12, 14, 15, 21, 22, 23, 28, 29, 30, 31, 34, 46, 48, 58, 59, 67, 68, 73, 78, 81, 84, 94, 100, 102, 103, 107, 108, 109, 115, 117, 122, 125, 127, 130, 134, 141, 146, 148, 153, 186, 191, 199, 200, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 214, 218, 224, 225, 226, 228, 229, 232, 234, 235, 236, 248, 249, 252, 254, 255, 268, 270, 276, 282, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294], "matrixcommon": [4, 98, 100, 103], "dyadic": [4, 70, 122, 128, 131, 133, 138, 140, 148, 191, 193, 196, 198, 261, 264, 269], "shorten": 4, "due": [4, 8, 12, 13, 19, 23, 33, 46, 48, 50, 57, 58, 67, 69, 84, 103, 107, 110, 113, 130, 131, 133, 145, 154, 181, 197, 200, 206, 207, 212, 216, 219, 229, 231, 233, 236, 252, 264, 270, 293], "highli": [5, 67, 71, 114, 206, 212, 221, 249], "aspect": [5, 7, 11, 12, 21, 103, 206], "project": [5, 9, 10, 11, 13, 48, 50, 80, 81, 82, 96, 103, 147, 248, 249, 261], "teach": [5, 59, 68, 72, 236], "conduct": 5, "accord": [5, 15, 48, 55, 58, 59, 63, 66, 67, 68, 75, 97, 100, 103, 107, 109, 125, 130, 132, 141, 175, 181, 202, 207, 209, 211, 213, 229, 234, 235, 242, 247, 249, 254, 270], "survei": 5, "commonli": [5, 14, 59, 72, 75, 94, 103, 121, 199, 204, 232, 268], "encount": [5, 15, 19, 27, 67, 94, 103, 126, 173, 204, 209, 212, 234, 235, 249, 261, 289], "problem": [5, 9, 11, 12, 13, 14, 15, 19, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 51, 61, 63, 67, 68, 79, 92, 94, 98, 103, 107, 110, 112, 113, 118, 121, 126, 131, 135, 136, 139, 141, 143, 190, 199, 200, 203, 204, 209, 226, 228, 229, 232, 235, 251, 254, 278, 283, 285, 289], "offer": [5, 47, 48, 58, 67, 108, 121, 148, 190, 200, 206, 211, 251, 269], "bring": [5, 92, 126, 139, 205, 219, 228, 289], "greater": [5, 27, 44, 59, 67, 72, 73, 75, 92, 96, 107, 117, 130, 207, 209, 212, 215, 223, 228, 232, 234, 236, 251, 254, 268, 283], "clariti": [5, 58, 195], "mission": [5, 47, 101], "ca": [5, 38, 68, 72, 75, 94, 107, 215, 216, 254], "dedic": [5, 48, 50, 146, 208, 231, 249, 266, 268], "tool": [5, 8, 9, 11, 12, 14, 23, 58, 95, 102, 103, 108, 117, 130, 148, 200, 203, 208, 209, 216, 248, 254, 260, 269, 276], "essenti": [5, 51, 62, 67, 71, 73, 74, 75, 92, 128, 133, 194, 197, 198, 200, 203, 204, 207, 211, 223, 226, 262, 265, 268, 269, 270, 276, 278], "element": [5, 13, 14, 15, 18, 21, 25, 30, 40, 44, 47, 48, 50, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 83, 90, 92, 94, 96, 97, 98, 99, 100, 103, 106, 107, 108, 110, 111, 117, 118, 128, 148, 150, 153, 167, 178, 186, 195, 198, 200, 202, 203, 204, 205, 207, 209, 212, 214, 215, 216, 222, 223, 224, 226, 228, 229, 232, 234, 235, 236, 237, 241, 248, 250, 251, 254, 255, 256, 264, 283, 288, 289, 292, 293], "deviat": [5, 154, 236], "advanc": [5, 18, 20, 23, 42, 58, 67, 71, 72, 103, 104, 141, 146, 198, 202, 205, 206, 208, 210, 211, 218, 225, 232, 247, 248, 249, 254, 278, 282, 284, 286, 290, 291, 292, 293], "docutil": 5, "sourceforg": [5, 47], "ext": [5, 203, 207], "autodoc": 5, "associ": [5, 9, 11, 14, 21, 30, 47, 49, 65, 67, 68, 74, 75, 89, 90, 92, 96, 128, 130, 146, 148, 171, 179, 190, 191, 199, 200, 204, 205, 206, 207, 209, 211, 216, 224, 226, 229, 242, 256], "graphviz": [5, 8, 288, 292], "graphic": [5, 34, 115], "info": [5, 9, 11, 15, 117, 216, 232, 233], "bear": [5, 21], "linkcod": 5, "readthedoc": [5, 95, 255], "subset": [5, 11, 12, 19, 21, 23, 27, 46, 47, 51, 54, 58, 59, 65, 72, 73, 79, 90, 92, 94, 96, 107, 127, 203, 205, 209, 211, 216, 224, 254, 273], "modifi": [5, 12, 14, 15, 47, 48, 58, 67, 73, 75, 107, 109, 144, 153, 202, 209, 211, 212, 213, 216, 228, 234, 235, 236, 247, 250, 251, 254, 255, 282, 287, 289], "sphinx_math_dollar": 5, "delimit": [5, 67, 216], "dollar": [5, 12, 287], "2": [5, 7, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 27, 28, 29, 30, 31, 32, 33, 35, 36, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 110, 113, 115, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 130, 133, 134, 135, 136, 138, 139, 140, 142, 143, 144, 146, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 170, 171, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 190, 191, 192, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 245, 247, 248, 249, 250, 251, 254, 255, 257, 261, 263, 264, 265, 266, 267, 268, 270, 271, 282, 283, 285, 287, 288, 289, 292, 293, 294], "sphinxext": 5, "plot_direct": 5, "figur": [5, 11, 13, 67, 68, 77, 78, 80, 82, 83, 94, 111, 131, 176, 199, 200, 201, 202, 205, 213, 216, 271, 293], "devel": [5, 201], "supersed": [5, 131, 148], "pep": [5, 48, 67, 97], "257": [5, 107, 234], "our": [5, 11, 13, 19, 23, 38, 48, 67, 75, 92, 103, 107, 126, 130, 134, 186, 199, 200, 202, 203, 205, 207, 211, 212, 213, 216, 223, 226, 229, 232, 235, 247, 282, 285, 286, 288, 293], "introduct": [5, 6, 13, 20, 58, 59, 72, 75, 205, 207, 209, 210, 212, 216, 229, 232, 235, 269, 276, 286, 292], "four": [5, 32, 48, 50, 59, 67, 71, 75, 97, 100, 107, 113, 118, 132, 141, 146, 154, 191, 202, 203, 209, 212, 216, 224, 229, 232, 234, 236, 237, 261, 263, 266, 278], "locat": [5, 11, 12, 13, 50, 59, 67, 81, 103, 107, 110, 111, 113, 125, 128, 130, 135, 142, 145, 146, 149, 195, 197, 211, 212, 216, 228, 236, 250, 259, 261, 265, 267, 270], "websit": [5, 7, 291], "advertis": 5, "serv": [5, 12, 14, 19, 23, 42, 43, 48, 50, 64, 67, 74, 90, 211, 232, 233, 257, 286], "initi": [5, 14, 21, 25, 33, 42, 58, 62, 67, 68, 69, 72, 75, 83, 85, 86, 89, 90, 91, 92, 94, 95, 107, 109, 111, 113, 115, 117, 122, 126, 128, 130, 131, 133, 135, 140, 143, 144, 145, 148, 149, 153, 161, 170, 192, 193, 196, 200, 201, 209, 211, 212, 216, 222, 226, 228, 232, 234, 235, 241, 249, 256, 257, 261, 263, 264, 265, 266], "web": [5, 7, 8, 11, 51, 59, 68, 72, 75, 79, 84, 94, 107, 148, 198, 205, 210, 228, 229, 236, 254, 289], "obtain": [5, 14, 15, 17, 19, 25, 30, 31, 36, 42, 43, 47, 49, 51, 58, 59, 60, 63, 67, 68, 70, 71, 72, 73, 75, 77, 78, 80, 81, 83, 89, 92, 94, 96, 98, 103, 106, 107, 114, 117, 126, 141, 144, 154, 176, 181, 186, 190, 203, 204, 207, 209, 211, 212, 215, 217, 224, 225, 226, 228, 229, 232, 233, 234, 235, 254, 257, 265, 266], "technic": [5, 13, 16, 23, 37, 47, 67, 148, 167, 203, 232, 249, 254, 268, 285, 288], "download": [5, 7, 9, 38, 47, 89, 210, 225, 232, 261, 287], "place": [5, 7, 9, 11, 12, 13, 14, 15, 21, 23, 31, 37, 47, 59, 60, 67, 68, 73, 83, 99, 103, 106, 107, 109, 117, 148, 149, 210, 211, 216, 217, 223, 225, 228, 232, 251, 254, 281, 282, 289, 293], "tutori": [5, 7, 8, 9, 11, 12, 14, 15, 19, 20, 38, 83, 131, 148, 204, 215, 216, 232, 255, 285, 288, 290, 291, 292, 293, 294], "site": [5, 107, 250], "upload": [5, 107], "belong": [5, 12, 21, 44, 47, 58, 63, 67, 90, 103, 128, 181, 191, 199, 202, 203, 205, 206, 207, 209, 211, 212, 223, 224, 228, 229, 235, 242], "insid": [5, 12, 13, 14, 15, 23, 58, 59, 64, 67, 77, 78, 83, 110, 121, 123, 135, 145, 180, 181, 185, 186, 196, 200, 212, 216, 224, 226, 229, 234, 235, 236, 238, 240, 251, 255, 288, 289], "spars": [5, 14, 100, 102, 103, 175, 205, 211, 212, 213, 236, 237, 276, 288], "substanti": [5, 108], "edit": [5, 9, 11, 12, 94, 103, 107, 209, 210, 212], "arg": [5, 11, 14, 21, 23, 29, 31, 34, 40, 42, 43, 44, 45, 46, 47, 48, 51, 58, 59, 61, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 82, 83, 84, 89, 92, 94, 97, 98, 99, 100, 101, 103, 105, 107, 109, 117, 150, 156, 159, 161, 164, 165, 166, 167, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 191, 196, 200, 202, 205, 207, 209, 211, 212, 213, 216, 218, 219, 222, 223, 224, 225, 228, 232, 234, 235, 236, 237, 238, 241, 242, 247, 248, 249, 250, 254, 255, 257, 261, 263], "invari": [5, 13, 23, 58, 63, 114, 117, 201, 207, 211, 212, 226, 232], "polici": [5, 6, 13, 250, 252], "releas": [5, 8, 11, 13, 67, 94, 98, 109, 145, 202, 241, 252, 255, 288], "5": [5, 11, 12, 15, 17, 21, 23, 27, 29, 31, 33, 36, 40, 42, 43, 44, 46, 48, 49, 50, 51, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 77, 78, 79, 80, 81, 82, 83, 84, 89, 90, 92, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 110, 113, 115, 117, 119, 120, 122, 127, 128, 131, 133, 134, 138, 139, 140, 141, 143, 146, 150, 154, 175, 176, 179, 181, 188, 192, 195, 197, 200, 201, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 247, 248, 254, 255, 261, 264, 266, 268, 270, 271, 282, 283, 285, 288, 289, 292, 293], "center": [5, 7, 13, 19, 46, 58, 66, 67, 77, 81, 83, 84, 94, 103, 122, 125, 128, 131, 133, 138, 140, 142, 146, 148, 154, 199, 202, 211, 216, 224, 271], "resid": 5, "standalon": [5, 148], "restructur": 5, "myst": 5, "appli": [5, 9, 11, 12, 13, 14, 22, 23, 25, 32, 36, 40, 41, 42, 43, 44, 48, 58, 59, 60, 65, 66, 67, 68, 69, 70, 73, 74, 77, 82, 83, 85, 94, 97, 98, 99, 103, 107, 109, 110, 111, 113, 117, 118, 122, 123, 128, 130, 133, 136, 143, 145, 147, 158, 162, 165, 166, 170, 173, 174, 178, 181, 191, 200, 202, 204, 206, 207, 209, 211, 212, 213, 215, 216, 217, 218, 222, 223, 224, 225, 228, 232, 233, 234, 235, 236, 237, 240, 247, 250, 254, 261, 263, 266, 289, 292, 293], "surround": [5, 12, 67, 84, 154, 224, 257], "nu": [5, 15, 75, 94, 107, 182, 204, 216, 228, 236, 242, 287], "equat": [5, 14, 15, 17, 19, 24, 25, 29, 46, 48, 63, 66, 67, 69, 73, 75, 77, 80, 81, 85, 89, 90, 91, 92, 94, 95, 98, 103, 107, 110, 113, 117, 119, 121, 125, 126, 127, 130, 131, 133, 134, 135, 136, 138, 140, 141, 142, 147, 148, 149, 150, 154, 190, 195, 196, 199, 200, 201, 202, 203, 207, 209, 210, 211, 214, 215, 216, 222, 226, 228, 231, 232, 233, 241, 261, 266, 267, 271, 283, 284, 287], "strip": [5, 12, 68, 94, 107, 209, 252, 257], "out": [5, 11, 12, 15, 21, 22, 23, 30, 47, 48, 58, 59, 67, 68, 69, 72, 75, 83, 92, 94, 100, 103, 107, 110, 117, 118, 131, 133, 135, 138, 146, 148, 158, 162, 173, 176, 178, 180, 181, 203, 204, 206, 207, 211, 212, 213, 214, 216, 217, 223, 226, 228, 232, 237, 238, 247, 249, 254, 255, 285, 287, 288, 292, 293], "unimport": 5, "bullet": [5, 11, 12], "avoid": [5, 11, 12, 13, 14, 22, 23, 27, 30, 40, 48, 49, 67, 68, 73, 92, 94, 97, 103, 106, 109, 135, 145, 175, 199, 200, 204, 206, 212, 216, 217, 224, 228, 232, 234, 236, 240, 249, 252, 255, 285, 286], "whitespac": [5, 12, 67, 252], "easiest": [5, 9, 11, 13, 14, 15, 67, 203, 206, 229, 255, 266, 282, 288, 293], "invalid": [5, 11, 12, 15, 36, 67, 68, 109, 133, 206, 209, 224], "dx": [5, 13, 14, 19, 23, 30, 46, 48, 63, 67, 69, 71, 75, 84, 86, 89, 90, 91, 92, 94, 103, 110, 120, 126, 170, 200, 212, 213, 219, 229, 232, 233, 237, 283, 287, 292, 294], "meta": [5, 67, 232, 233], "stackexchang": [5, 58, 77], "5020": 5, "wikibook": [5, 94, 95], "overleaf": 5, "mathematical_express": 5, "verbatim": [5, 216], "_rewrit": 5, "_expand": 5, "difficult": [5, 11, 12, 21, 34, 36, 67, 103, 131, 213, 226, 232, 233, 235, 248, 255, 271, 287, 293], "sentenc": [5, 11, 97], "thumb": [5, 97, 254], "greek": [5, 14, 39, 67, 107, 109, 203, 216], "letter": [5, 14, 15, 39, 60, 67, 68, 107, 181, 216, 254, 283, 285], "\u03b1": [5, 201, 215], "alpha": [5, 15, 58, 67, 75, 94, 96, 117, 153, 157, 160, 178, 195, 199, 200, 201, 207, 209, 211, 212, 215, 216, 228, 232, 236], "logarithm": [5, 15, 40, 46, 48, 67, 68, 73, 92, 94, 103, 107, 207, 209, 213, 216, 226, 228, 235, 236, 284], "italic": 5, "emphasi": [5, 206], "asterisk": 5, "stirl": [5, 59, 72, 254], "fals": [5, 12, 14, 15, 21, 22, 23, 27, 29, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 53, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 77, 78, 79, 80, 81, 82, 83, 84, 86, 89, 92, 94, 95, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 115, 117, 119, 120, 123, 126, 127, 128, 130, 131, 133, 134, 138, 139, 140, 142, 143, 144, 145, 146, 149, 153, 165, 166, 170, 173, 178, 179, 180, 181, 184, 188, 191, 192, 193, 195, 196, 199, 200, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 223, 224, 225, 228, 229, 231, 232, 233, 234, 235, 236, 241, 242, 245, 247, 248, 249, 250, 254, 255, 257, 261, 264, 285, 288, 289, 292], "permut": [5, 49, 50, 52, 54, 55, 57, 60, 63, 64, 65, 68, 72, 75, 98, 100, 103, 127, 181, 201, 205, 207, 212, 229, 237, 238, 242, 254, 273, 293], "cycl": [5, 13, 48, 55, 58, 59, 65, 67, 70, 72, 98, 107, 155, 224, 254], "partit": [5, 54, 58, 72, 107, 135, 145, 147, 229, 236, 251, 273], "reduc": [5, 15, 22, 25, 28, 35, 41, 43, 45, 49, 63, 67, 68, 70, 72, 73, 75, 82, 83, 92, 94, 103, 107, 117, 118, 145, 163, 181, 203, 205, 206, 207, 209, 210, 211, 212, 213, 217, 222, 224, 225, 226, 228, 229, 231, 232, 233, 234, 235, 236, 238, 254, 255, 289], "ge": [5, 21, 67, 72, 73, 75, 92, 98, 103, 107, 201, 204, 209, 212, 226, 254], "consecut": [5, 48, 58, 63, 66, 68, 72, 83, 228, 234], "group": [5, 7, 47, 53, 54, 59, 60, 63, 64, 65, 67, 70, 72, 96, 97, 107, 160, 169, 170, 181, 201, 202, 203, 207, 212, 228, 232, 234, 235, 242, 254, 273], "pairwis": [5, 44, 47, 67, 72, 84, 103, 107, 229, 234], "ital": [5, 216], "last": [5, 11, 12, 13, 15, 17, 18, 19, 21, 22, 23, 27, 29, 31, 32, 33, 34, 35, 36, 41, 42, 43, 47, 48, 49, 57, 58, 59, 63, 66, 67, 68, 71, 77, 94, 97, 98, 99, 100, 101, 103, 105, 106, 107, 109, 117, 130, 153, 185, 186, 201, 202, 203, 204, 206, 207, 209, 212, 215, 216, 223, 224, 229, 232, 234, 235, 236, 237, 238, 242, 245, 247, 248, 249, 250, 252, 254, 255, 257, 283, 285, 288, 289], "talk": [5, 11, 12, 16, 37, 68, 203, 211, 265], "handl": [5, 7, 11, 12, 19, 21, 22, 23, 46, 48, 55, 59, 67, 73, 94, 95, 97, 102, 107, 108, 109, 110, 118, 121, 131, 145, 161, 164, 170, 171, 176, 185, 206, 212, 213, 222, 228, 232, 234, 237, 240, 248, 254, 255, 257, 288, 293], "referenc": [5, 11, 51, 56, 107, 130, 133, 178, 211], "overlin": [5, 21, 75], "normal": [5, 12, 13, 15, 21, 22, 23, 36, 40, 44, 48, 58, 66, 67, 71, 73, 77, 80, 81, 82, 94, 95, 97, 101, 102, 103, 107, 109, 119, 121, 125, 131, 133, 139, 148, 154, 165, 175, 178, 179, 180, 181, 182, 186, 189, 191, 200, 203, 205, 206, 207, 209, 211, 212, 216, 217, 219, 224, 225, 229, 232, 236, 241, 247, 252, 254, 255, 261, 276], "assign": [5, 9, 21, 34, 47, 48, 49, 63, 67, 72, 83, 94, 96, 97, 103, 109, 126, 131, 138, 148, 186, 197, 200, 202, 204, 209, 216, 234, 235, 242, 249, 265, 268, 285], "structur": [5, 13, 14, 18, 21, 23, 45, 47, 48, 55, 58, 59, 65, 67, 92, 94, 97, 98, 103, 110, 111, 113, 130, 179, 181, 202, 203, 206, 209, 211, 212, 213, 228, 232, 234, 235, 236, 240, 241, 249, 251, 254, 255, 285, 293], "success": [5, 8, 47, 58, 67, 75, 92, 94, 107, 125, 133, 191, 203, 209, 211, 224, 225, 232, 235, 236, 254, 261, 263], "suggest": [5, 7, 11, 13, 32, 49, 58, 94, 103, 107, 131, 214, 289], "american": [5, 53, 68], "color": [5, 9, 95, 115, 196, 216, 247, 254, 292], "colour": 5, "quotat": 5, "line_color": [5, 202, 219], "aesthet": [5, 14, 202], "ariti": [5, 202], "term": [5, 12, 14, 15, 19, 21, 23, 27, 30, 32, 34, 36, 48, 58, 67, 68, 69, 71, 72, 73, 75, 86, 90, 91, 92, 94, 97, 98, 103, 107, 111, 115, 117, 123, 126, 133, 135, 138, 141, 143, 145, 160, 165, 177, 178, 181, 183, 185, 186, 190, 191, 193, 197, 199, 201, 203, 204, 205, 206, 207, 209, 211, 212, 213, 216, 218, 219, 221, 222, 224, 225, 226, 228, 229, 232, 233, 234, 235, 236, 240, 241, 254, 261, 264, 268, 273, 283, 285, 287, 288, 293], "unrestrict": [5, 56, 254], "necklac": [5, 254], "bracelet": [5, 254], "impli": [5, 14, 15, 21, 40, 44, 48, 58, 97, 113, 181, 202, 207, 209, 216, 224, 226, 232, 234, 237, 240, 241, 254, 268], "turn": [5, 13, 14, 21, 36, 48, 67, 73, 75, 82, 92, 101, 125, 139, 143, 197, 203, 211, 212, 213, 216, 223, 224, 226, 228, 229, 232, 247, 254, 270, 285, 287], "sequenc": [5, 15, 40, 46, 48, 51, 54, 57, 58, 59, 63, 65, 66, 67, 68, 70, 72, 75, 77, 80, 81, 82, 83, 84, 91, 97, 98, 100, 103, 106, 107, 117, 148, 154, 180, 181, 207, 210, 216, 218, 220, 223, 225, 226, 228, 229, 232, 233, 235, 242, 245, 248, 249, 254, 256, 257, 273], "revers": [5, 25, 51, 56, 59, 66, 67, 68, 73, 94, 95, 97, 103, 107, 117, 180, 191, 196, 203, 205, 209, 212, 213, 216, 217, 224, 228, 232, 254, 293], "ambigu": [5, 13, 15, 17, 67, 169, 175, 228, 240, 245], "person": [5, 14], "chebyshev": [5, 46, 67, 94, 209, 212], "pafnuti": 5, "lvovich": 5, "tchebychev": 5, "whose": [5, 13, 14, 21, 23, 27, 47, 49, 51, 56, 59, 66, 67, 68, 73, 77, 81, 83, 84, 90, 94, 97, 103, 107, 128, 143, 153, 176, 186, 192, 193, 197, 200, 204, 205, 207, 211, 212, 223, 224, 228, 232, 233, 234, 236, 242, 247, 251, 254, 255, 261, 264, 266, 268], "transliter": 5, "russian": 5, "chebyshevt": [5, 75, 216], "orthogonalpolynomi": 5, "t_n": [5, 72, 75, 94, 209, 212, 266], "tens": 5, "inclus": [5, 66, 113, 174, 203, 222, 223, 224, 235], "pronoun": 5, "Or": [5, 8, 12, 13, 15, 22, 29, 31, 58, 67, 68, 69, 75, 92, 97, 107, 128, 203, 213, 215, 216, 228, 235, 236, 247, 255, 268, 288, 291], "gender": 5, "neutral": 5, "he": [5, 72, 92, 209], "she": [5, 235], "extran": [5, 232], "belittl": 5, "obvious": [5, 12, 49, 58, 184, 199, 206, 226], "easili": [5, 13, 21, 23, 34, 38, 50, 67, 68, 90, 92, 103, 107, 108, 125, 128, 143, 179, 199, 212, 215, 216, 221, 228, 229, 232, 234, 235, 238, 248, 287], "straightforward": [5, 12, 23, 58, 68, 103, 226], "unwelcom": 5, "judgement": 5, "phrase": [5, 11, 14, 68], "friendli": [5, 48, 92, 229, 231, 232, 234, 235, 249, 294], "mistak": [5, 11, 12, 15, 30, 58, 109, 255], "goe": [6, 7, 10, 11, 12, 23, 37, 103, 113, 223, 226, 235, 285, 288], "content": [6, 16, 48, 67, 68, 102, 204, 207, 209, 212, 215, 216, 244, 249, 252, 253, 273, 274, 275, 276, 277, 278, 279, 280, 284, 286], "setup": [6, 10, 11, 12, 13, 48, 67, 134, 135, 136, 150, 191, 209, 212, 214, 215, 226, 247, 248, 250, 260, 292], "document": [6, 10, 12, 13, 14, 20, 23, 28, 42, 43, 44, 58, 63, 67, 68, 73, 74, 75, 79, 89, 92, 93, 95, 100, 103, 108, 111, 121, 126, 141, 143, 144, 146, 148, 156, 170, 176, 190, 196, 197, 198, 199, 200, 201, 202, 203, 206, 207, 209, 212, 216, 226, 230, 232, 234, 235, 245, 247, 249, 250, 252, 254, 261, 268, 269, 272, 283, 285, 286, 292, 293], "depend": [6, 9, 11, 13, 14, 15, 17, 21, 23, 27, 32, 33, 34, 38, 46, 48, 49, 58, 59, 66, 67, 68, 69, 72, 73, 75, 79, 84, 91, 92, 94, 95, 96, 103, 107, 108, 109, 115, 119, 122, 126, 127, 130, 131, 133, 135, 141, 143, 153, 154, 155, 170, 179, 181, 183, 185, 186, 196, 197, 202, 204, 205, 207, 209, 211, 212, 213, 215, 216, 217, 222, 226, 228, 229, 232, 233, 234, 235, 236, 247, 248, 249, 250, 254, 255, 268, 270, 271, 285, 287], "debug": [6, 48, 67, 94, 133, 170, 247, 248, 257], "style": [6, 7, 8, 11, 47, 67, 95, 175, 196, 202, 216, 235, 292], "maintain": [7, 14, 15, 67, 68, 107, 111, 216, 224, 225, 232, 235, 251], "love": 7, "oil": 7, "daunt": 7, "acquaint": 7, "video": [7, 291], "2016": 7, "2014": [7, 235, 236], "capabl": [7, 13, 14, 21, 33, 46, 48, 67, 71, 79, 92, 107, 110, 111, 141, 148, 202, 213, 216, 235, 286, 287, 293, 294], "besid": [7, 50, 67, 209, 234], "lot": [7, 11, 13, 58, 67, 85, 92, 94, 103, 131, 148, 202, 215, 219, 229, 235, 247, 293], "probabl": [7, 11, 50, 58, 67, 72, 75, 79, 107, 131, 175, 179, 226, 232, 235, 236, 248, 285, 291], "brows": [7, 9], "topic": [7, 16, 24, 37, 48, 141, 146, 198, 199, 200, 201, 203, 205, 206, 211, 235, 278, 285, 290], "particip": 7, "abid": 7, "email": [7, 216], "googl": [7, 201, 202, 235], "spam": [7, 257], "post": [7, 13, 21, 27, 29, 30, 31, 32, 33, 34, 35, 36, 48, 61, 67, 216, 217, 228, 247, 288], "moder": [7, 94], "shakthimaan": 7, "book": [7, 9, 47, 58, 68, 73, 126, 131, 134, 142, 146, 147, 166, 210, 215, 216, 286], "chapter1": 7, "etiquett": 7, "track": [7, 9, 11, 13, 15, 58, 67, 71, 75, 130, 142, 165, 190, 200, 223, 242, 283], "etc": [7, 11, 12, 13, 19, 21, 22, 43, 46, 48, 63, 67, 68, 72, 73, 85, 94, 96, 97, 102, 107, 131, 152, 161, 165, 178, 181, 193, 197, 199, 200, 202, 203, 204, 206, 209, 211, 216, 217, 224, 225, 226, 228, 232, 235, 236, 240, 248, 249, 254, 266, 270], "interest": [7, 11, 15, 17, 23, 27, 30, 36, 63, 67, 69, 72, 73, 83, 92, 94, 103, 107, 132, 133, 181, 186, 200, 203, 207, 211, 212, 213, 215, 223, 226, 228, 229, 234, 235, 248, 249, 266, 283, 286, 288, 289, 290, 293], "prepar": [7, 21, 126, 214], "chat": [7, 38], "room": [7, 203], "stackoverflow": [7, 11, 107, 254, 257], "tracker": [7, 11, 12, 46, 224, 235, 289], "isn": [7, 11, 13, 23, 34, 94, 121, 131, 235, 287], "organ": [7, 11, 141], "termin": [7, 8, 9, 11, 58, 67, 73, 95, 107, 196, 216, 223, 247, 292], "live": [7, 39, 49, 148, 211, 229], "click": [7, 8, 9, 11], "next": [7, 9, 11, 15, 19, 21, 23, 39, 48, 49, 51, 56, 58, 59, 61, 62, 67, 68, 73, 92, 94, 97, 103, 107, 121, 122, 125, 126, 130, 134, 135, 136, 138, 140, 141, 142, 149, 199, 200, 203, 207, 211, 212, 216, 224, 226, 229, 232, 251, 252, 254, 286, 287, 288], "function_nam": [7, 48, 248], "upon": [7, 12, 14, 21, 48, 67, 107, 128, 130, 133, 143, 144, 145, 148, 175, 181, 197, 199, 200, 224, 232, 241, 248, 268, 293], "undergo": [7, 154], "gain": [7, 15, 25, 68, 117, 143, 144, 148], "submiss": 7, "dockerfil": 8, "htmldoc": 8, "sympy_htmldoc": 8, "apt": [8, 9], "dvipng": 8, "librsvg2": 8, "imagemagick": 8, "docbook2x": 8, "sudo": [8, 9], "venv": [8, 9], "my": [8, 216, 282], "Then": [8, 9, 11, 12, 14, 19, 21, 58, 63, 66, 67, 92, 96, 103, 107, 123, 126, 138, 140, 141, 146, 150, 178, 186, 199, 203, 204, 206, 209, 211, 213, 216, 223, 226, 228, 229, 232, 234, 255], "rerun": [8, 11, 12, 212, 247], "txt": [8, 216], "mayb": [8, 12, 22, 29], "rpm": 8, "prerequisit": 8, "dnf": [8, 97], "medium": [8, 23, 150, 151, 154, 155, 165, 209, 278], "homebrew": 8, "brew": 8, "sh": 8, "docbook": 8, "librsvg": 8, "tricki": [8, 67, 92], "subsystem": [8, 216], "linux": [8, 9, 11, 38], "workaround": [8, 255], "solut": [8, 11, 13, 14, 15, 17, 19, 22, 23, 25, 28, 29, 48, 63, 67, 68, 73, 75, 77, 85, 89, 90, 91, 94, 103, 107, 110, 114, 121, 126, 127, 131, 135, 141, 145, 150, 186, 190, 203, 209, 210, 211, 212, 213, 214, 215, 224, 229, 231, 232, 233, 234, 294], "shell": [8, 11, 15, 95, 148, 215], "microsoft": 8, "wsl": 8, "transfer": [8, 25, 114, 115, 117, 150, 235], "folder": 8, "prepend": [8, 47, 58, 103, 117, 188, 216, 242], "mnt": 8, "navig": [8, 13], "cygwin": 8, "msys2": 8, "partial": [8, 14, 46, 58, 65, 66, 67, 69, 71, 72, 73, 107, 109, 148, 175, 191, 195, 197, 207, 210, 213, 216, 218, 225, 228, 232, 233, 237, 243, 261, 268, 283, 293], "viabl": [8, 68], "64": [8, 12, 52, 58, 107, 147, 201, 215, 225, 234, 236, 247, 254, 257, 292], "bit": [8, 12, 19, 23, 47, 48, 51, 67, 68, 70, 97, 98, 103, 107, 175, 186, 203, 212, 226, 229, 235, 247, 254, 265, 266, 292], "chocolatei": 8, "choco": 8, "rsvg": 8, "chose": [8, 68], "rm": [8, 48], "absolut": [8, 12, 44, 45, 48, 66, 67, 73, 75, 82, 92, 94, 98, 103, 119, 179, 207, 211, 212, 226, 228, 231, 236, 247, 270, 271, 272], "substitut": [8, 14, 15, 19, 22, 27, 30, 34, 36, 48, 67, 68, 73, 75, 92, 94, 103, 108, 109, 117, 126, 127, 131, 133, 135, 145, 170, 179, 181, 184, 191, 193, 195, 213, 214, 217, 218, 223, 226, 228, 229, 232, 233, 234, 235, 255, 264, 284, 285], "filesystem": 8, "makefil": 8, "subdirectori": 8, "offici": [8, 15, 38, 67, 121, 148, 190, 200, 235, 255, 291], "svg": [8, 95, 196], "store": [8, 9, 11, 13, 15, 21, 47, 48, 57, 58, 67, 89, 91, 100, 103, 107, 109, 122, 126, 128, 130, 131, 146, 175, 181, 195, 199, 200, 202, 203, 206, 211, 212, 213, 223, 226, 237, 240, 241, 249, 250, 251, 254, 266, 268, 288], "browser": 8, "drop": [8, 11, 73, 94, 108, 138, 207, 209], "menu": 8, "told": [8, 11], "load": [8, 13, 48, 67, 95, 110, 111, 113, 122, 124, 125, 126, 130, 134, 136, 141, 149, 161, 196, 278], "ll": [8, 47, 65, 103, 135, 199, 200, 245], "repeat": [8, 9, 14, 15, 58, 61, 66, 67, 73, 75, 94, 96, 98, 103, 107, 109, 165, 167, 181, 202, 203, 204, 209, 211, 212, 216, 222, 232, 236, 240, 241, 248, 250, 254, 293], "reload": 8, "approach": [8, 19, 27, 30, 31, 32, 34, 35, 36, 47, 66, 67, 94, 117, 135, 141, 206, 209, 210, 211, 213, 224, 233, 234, 236, 248, 251, 254, 283, 289], "monitor": 8, "procedur": [8, 30, 32, 49, 50, 52, 58, 64, 65, 66, 94, 103, 126, 146, 209, 211, 228, 229, 234, 235, 261, 289], "8000": [8, 110], "localhost": 8, "port": [8, 109, 133, 153], "finish": [8, 12, 48, 49, 175, 250, 290], "ctrl": 8, "detach": 8, "livehtml": 8, "tab": [8, 13, 15, 63, 148], "99": [8, 48, 67, 68, 103, 107, 209, 210], "bad": [8, 11, 12, 13, 66, 107, 183, 216], "extra": [8, 13, 48, 50, 67, 68, 107, 108, 126, 139, 186, 197, 209, 216, 226, 232, 247, 248, 249, 268], "xelatex": 8, "latexmk": 8, "chrome": 8, "chromium": 8, "On": [8, 11, 13, 21, 43, 60, 67, 69, 75, 94, 97, 107, 131, 185, 186, 197, 206, 209, 210, 211, 212, 232, 234, 251, 255, 268, 270], "xetex": 8, "font": [8, 95, 196, 216], "lmodern": 8, "cask": 8, "tap": 8, "dejavu": 8, "strawberryperl": 8, "dejavufont": 8, "appdata": 8, "never": [9, 10, 11, 12, 14, 21, 23, 34, 67, 73, 94, 183, 212, 213, 216, 224, 234, 236, 245, 265, 285, 286], "familiar": [9, 10, 11, 15, 23, 94, 131, 146, 165, 213, 283, 285, 291], "push": [9, 11, 12, 92], "nativ": [9, 14, 67, 117, 207, 212, 247], "yum": 9, "maco": 9, "desktop": 9, "gui": [9, 95, 196], "sync": 9, "rebas": [9, 11], "disabl": [9, 12, 13, 14, 34, 67, 68, 92, 94, 107, 209, 212, 216, 224, 232, 234, 245, 247, 250, 254, 255], "commit": [9, 12], "enter": [9, 17, 59, 67, 68, 72, 80, 107, 109, 110, 113, 126, 130, 133, 143, 216, 226, 234, 247, 288, 292], "config": [9, 95], "firstnam": 9, "lastnam": 9, "your_email": 9, "youremail": 9, "usernam": [9, 11], "gitconfig": 9, "handi": [9, 66, 67, 103, 216, 288], "shortcut": [9, 47, 67, 99, 200, 216, 224, 228, 293], "alias": [9, 101, 207], "alia": [9, 48, 60, 67, 77, 83, 98, 99, 101, 105, 165, 174, 181, 203, 206, 207, 211, 215, 224, 247, 257, 293], "di": [9, 212], "st": [9, 68, 94, 181], "statu": [9, 11, 95], "checkout": [9, 11, 47], "log1": 9, "onelin": 9, "abbrev": [9, 187, 188, 216], "scm": 9, "sv": 9, "v2": [9, 69, 80, 103, 128, 191, 192, 195, 255, 261, 264, 265, 266, 267], "signup": 9, "presenc": [9, 67, 73, 97, 113, 130, 135, 145, 232, 240], "world": [9, 68, 113, 135, 145, 254], "profession": 9, "establish": [9, 19, 63, 92, 125, 130, 136, 226], "secur": [9, 13], "connect": [9, 21, 61, 68, 69, 82, 83, 103, 108, 110, 113, 122, 125, 130, 133, 136, 142, 203, 204, 205, 214, 232, 236, 254, 261], "button": [9, 12, 202, 248], "address": [9, 12, 67, 216, 235], "practic": [9, 19, 21, 27, 30, 33, 36, 56, 58, 67, 68, 77, 142, 145, 148, 202, 203, 204, 206, 211, 213, 240, 285, 286], "clone": [9, 38, 209], "origin": [9, 11, 12, 14, 15, 19, 21, 30, 38, 40, 58, 59, 60, 63, 66, 67, 68, 71, 72, 73, 75, 76, 78, 80, 82, 92, 94, 98, 103, 107, 115, 117, 118, 125, 130, 135, 145, 148, 173, 176, 186, 192, 197, 202, 203, 205, 207, 211, 212, 215, 216, 224, 225, 226, 228, 229, 232, 233, 234, 235, 236, 242, 247, 254, 255, 261, 264, 265, 266, 267, 268, 270, 271, 293], "77": [9, 56, 75, 103, 107, 215, 216, 249], "mib": 9, "repo": [9, 11, 12, 131], "remot": [9, 67], "tune": [9, 71, 95, 196, 216], "fetch": 9, "advantag": [9, 13, 17, 21, 23, 27, 43, 46, 48, 67, 68, 72, 94, 97, 103, 107, 114, 185, 205, 206, 213, 224, 229, 232, 235, 251, 285, 287, 289, 293], "isol": [9, 27, 46, 73, 207, 211, 212, 213, 234, 249], "wide": [9, 21, 95, 103, 148, 196, 206, 212, 216, 236], "flake8": [9, 11, 12], "split": [10, 23, 48, 67, 68, 71, 92, 94, 109, 209, 211, 214, 215, 216, 234, 236, 242, 247, 254, 259, 288, 293], "experienc": [10, 13, 49], "regress": 11, "green": [11, 12, 58, 142, 202], "123": [11, 67, 72, 77, 97, 125, 178, 191, 254, 261, 263], "visibl": [11, 92, 202], "ok": [11, 12, 13, 48, 59, 216, 232], "field": [11, 21, 34, 40, 44, 48, 67, 68, 69, 75, 85, 94, 153, 154, 193, 194, 198, 203, 204, 205, 207, 208, 210, 212, 213, 214, 229, 234, 247, 261, 264, 266, 267, 269, 271, 276, 278, 279], "respond": [11, 67], "perus": 11, "feel": [11, 21, 38, 148, 149, 228, 232, 234], "fine": [11, 12, 13, 19, 23, 30, 67, 71, 95, 196, 206, 216, 228], "upstream": 11, "highlight": 11, "accid": [11, 12, 68, 255], "reset": [11, 58, 60, 130, 202, 209, 212, 247, 250, 252], "somehow": [11, 12, 14, 23], "typo": [11, 226], "ultim": [11, 23, 73, 186], "spend": 11, "distinguish": [11, 18, 21, 22, 47, 58, 71, 96, 131, 180, 186, 203], "accident": [11, 12, 14], "failur": [11, 63, 71, 84, 92, 107, 236, 247, 293], "accompani": [11, 12, 47], "sqrtdenest": [11, 12, 228], "test_sqrtdenest": [11, 12], "pattern": [11, 12, 13, 14, 15, 21, 23, 67, 92, 94, 97, 98, 109, 175, 206, 226, 228, 232, 234, 283, 288], "appar": [11, 12, 14, 15, 67, 257, 293], "test_trigonometr": [11, 12], "test_cos_seri": [11, 12], "6": [11, 12, 15, 17, 19, 25, 27, 35, 36, 40, 42, 43, 46, 48, 49, 50, 51, 55, 56, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 77, 79, 80, 81, 82, 83, 89, 90, 92, 94, 96, 97, 98, 100, 101, 103, 104, 106, 107, 109, 110, 113, 115, 117, 118, 119, 128, 133, 134, 138, 139, 140, 146, 150, 154, 160, 178, 191, 200, 201, 202, 204, 205, 206, 207, 209, 211, 212, 213, 215, 216, 218, 221, 222, 223, 224, 225, 228, 229, 232, 233, 234, 235, 236, 237, 247, 248, 251, 254, 255, 261, 264, 266, 271, 283, 289, 293, 294], "720": [11, 12, 218, 232, 254], "40320": [11, 12], "One": [11, 14, 15, 18, 21, 23, 46, 47, 48, 57, 59, 66, 67, 72, 73, 75, 86, 89, 91, 92, 94, 97, 103, 107, 110, 111, 130, 131, 146, 148, 157, 186, 190, 207, 209, 210, 212, 215, 218, 224, 228, 231, 234, 235, 236, 237, 242, 255, 268, 282, 283, 285, 288, 289, 293], "past": [11, 12, 15, 73, 107, 215, 216, 292], "session": [11, 12, 14, 39, 48, 67, 79, 94, 196, 200, 206, 252, 285, 292], "unclear": [11, 13, 21, 121], "kei": [11, 13, 14, 15, 17, 27, 29, 41, 44, 47, 56, 58, 59, 67, 68, 69, 72, 83, 96, 98, 103, 106, 107, 110, 130, 131, 173, 176, 181, 200, 202, 204, 206, 207, 208, 209, 211, 212, 213, 214, 216, 228, 232, 233, 234, 236, 240, 251, 254, 255, 257, 289, 290, 293], "corner": [11, 12, 58, 60, 98, 212, 232, 235, 255], "delta_funct": [11, 75, 94], "argumentindexerror": [11, 23], "scroll": [11, 36], "bottom": [11, 57, 58, 67, 68, 83, 98, 103, 106, 130, 211, 216, 225, 271], "consult": [11, 49], "kwarg": [11, 15, 42, 43, 44, 48, 58, 59, 66, 67, 68, 69, 73, 75, 77, 78, 80, 81, 82, 83, 84, 89, 92, 94, 98, 99, 100, 101, 103, 105, 106, 115, 117, 123, 126, 128, 130, 135, 150, 159, 161, 165, 166, 170, 172, 174, 175, 177, 178, 179, 191, 195, 196, 202, 205, 207, 212, 216, 218, 222, 223, 224, 228, 232, 233, 234, 236, 237, 238, 242, 247, 248, 250, 254, 257, 266], "test_bas": [11, 247], "similari": 11, "code_qu": 11, "total": [11, 36, 49, 56, 58, 67, 72, 83, 96, 97, 98, 100, 133, 135, 143, 150, 154, 160, 165, 178, 187, 201, 207, 209, 212, 225, 228, 232, 240, 242, 271], "new_fil": 11, "editor": [11, 12], "vim": 11, "pop": [11, 94, 229], "stage": [11, 21, 47, 66, 107, 223, 293], "affect": [11, 13, 21, 23, 66, 67, 103, 190, 212, 234, 235, 266], "binari": [11, 12, 15, 22, 23, 30, 44, 48, 51, 62, 67, 68, 94, 97, 107, 108, 175, 187, 203, 206, 212, 229, 248, 251, 254], "temporari": [11, 67, 248], "individu": [11, 12, 13, 21, 23, 25, 29, 32, 67, 73, 78, 83, 84, 96, 100, 103, 117, 146, 153, 171, 175, 201, 224, 232, 247, 289], "gitignor": 11, "agreement": 11, "exclud": [11, 29, 34, 36, 48, 66, 67, 94, 103, 123, 128, 148, 204, 207, 209, 212, 222, 232, 234, 247, 250, 254], "22906851": 11, "ignor": [11, 12, 13, 15, 17, 23, 48, 58, 67, 68, 72, 73, 77, 82, 92, 97, 103, 107, 117, 123, 133, 178, 181, 191, 202, 212, 216, 217, 228, 234, 235, 248, 293], "bodi": [11, 13, 15, 48, 92, 109, 120, 121, 124, 125, 126, 130, 131, 133, 134, 135, 136, 138, 141, 142, 143, 148, 149, 184, 191, 195, 199, 200, 261, 263, 278], "perman": [11, 103], "histori": [11, 148], "effort": [11, 108, 207, 209], "research": [11, 19, 59, 117, 213, 228], "shortlog": 11, "ui": [11, 94, 107, 233], "convei": [11, 27], "71": [11, 58, 83, 103, 107, 184], "78": [11, 58, 81, 103, 107, 111, 186, 232, 236], "summari": [11, 134, 247, 272], "leav": [11, 14, 21, 23, 33, 35, 48, 67, 94, 103, 107, 127, 141, 165, 181, 223, 251, 282, 288, 293], "heurisch": [11, 13, 94], "12345": [11, 48, 71], "brief": [11, 48, 235, 247, 270], "nearbi": 11, "similarli": [11, 12, 13, 21, 27, 34, 63, 67, 68, 75, 79, 103, 110, 111, 117, 126, 146, 185, 190, 202, 203, 206, 211, 213, 223, 224, 226, 232, 247, 255, 266, 267, 289], "doubt": [11, 97, 131], "switch": [11, 13, 40, 58, 65, 94, 107, 117, 209, 212, 238], "let": [11, 12, 19, 21, 22, 23, 25, 46, 48, 58, 63, 67, 68, 77, 85, 90, 92, 96, 100, 103, 104, 107, 109, 122, 131, 148, 186, 191, 199, 203, 204, 205, 209, 211, 212, 213, 216, 223, 226, 228, 229, 232, 234, 235, 242, 245, 248, 252, 255, 266, 267, 271, 282, 285, 287, 288, 293], "overview": [11, 204, 235, 269, 270], "concret": [11, 21, 47, 59, 67, 72, 73, 94, 96, 103, 107, 131, 186, 207, 211, 216, 273], "suitabl": [11, 94, 100, 109, 201, 204, 206, 209, 211, 216, 226, 229, 232, 235, 237, 286], "unicod": [11, 12, 75, 95, 103, 196, 216, 247, 287], "printer": [11, 12, 13, 14, 23, 59, 67, 75, 95, 103, 108, 196, 238, 241, 248, 249, 255, 284, 288], "bf0e81e12a2f75711c30f0788daf4e58f72b2a41": 11, "revis": [11, 234], "anti": [11, 14, 40, 44, 63, 73, 94, 98, 153, 158, 242], "candid": [11, 31, 58, 67, 103, 107, 209, 228], "phase": [11, 25, 67, 94, 115, 150, 153, 155, 165, 166, 235], "explicit": [11, 13, 14, 21, 23, 27, 30, 31, 59, 66, 67, 71, 83, 84, 94, 106, 107, 126, 127, 130, 131, 135, 145, 149, 200, 203, 212, 215, 216, 218, 224, 226, 232, 233, 234, 235, 251], "solve_lin_si": [11, 13, 214], "upsid": 11, "monomi": [11, 67, 94, 97, 107, 204, 206, 207, 209, 215, 216, 293], "downsid": [11, 289], "involv": [11, 12, 13, 15, 19, 21, 27, 29, 31, 43, 45, 58, 66, 67, 68, 72, 79, 80, 92, 94, 107, 117, 122, 126, 131, 160, 170, 176, 178, 188, 199, 200, 203, 204, 207, 209, 211, 212, 213, 217, 218, 223, 224, 225, 226, 228, 229, 232, 234, 237, 255, 293], "anymor": [11, 12, 202], "coincid": [11, 83, 103, 106, 125, 131, 203, 261, 266, 285], "investig": [11, 59, 92, 201, 203, 226, 254, 285], "exp": [11, 12, 13, 14, 15, 17, 21, 23, 25, 33, 34, 36, 40, 46, 48, 57, 66, 67, 69, 71, 72, 73, 75, 85, 86, 89, 92, 94, 98, 100, 103, 107, 119, 157, 160, 176, 182, 201, 206, 207, 212, 213, 216, 218, 223, 226, 228, 232, 233, 234, 235, 236, 237, 254, 271, 283, 287, 289, 294], "ratsimp": [11, 67, 228], "cpu": [11, 48, 108, 148], "sy": [11, 38, 48, 69, 131, 148, 216, 247, 258, 267, 285], "04": [11, 98, 236], "31": [11, 55, 67, 70, 71, 83, 107, 190, 201, 212, 229], "wall": [11, 125, 130, 136], "32": [11, 58, 70, 73, 75, 77, 94, 103, 107, 110, 115, 190, 210, 212, 213, 225, 226, 229, 236, 247], "\u212f": [11, 48, 153, 201, 216, 283, 287, 289, 293, 294], "took": [11, 213, 225], "450": [11, 103], "gb": [11, 58, 113], "ram": 11, "occasion": [11, 12, 67], "feedback": [11, 25, 68, 114, 117, 286], "draft": 11, "state": [11, 12, 14, 19, 21, 34, 58, 65, 67, 75, 107, 110, 117, 119, 125, 126, 127, 130, 133, 135, 149, 153, 157, 158, 160, 161, 162, 164, 165, 166, 170, 173, 175, 176, 177, 178, 180, 181, 205, 212, 216, 225, 226, 228, 236, 251, 278, 289], "wip": 11, "stand": [11, 14, 66, 67, 126, 148, 204, 206, 207, 213], "progress": [11, 41, 43, 107, 249], "fill": [11, 15, 20, 58, 68, 98, 100, 103, 106, 181, 202, 247, 250, 254, 257, 289], "templat": [11, 13, 254], "undescript": 11, "tend": [11, 23, 39, 48, 67, 72, 209, 211, 221, 223, 226, 286, 293], "henc": [11, 46, 48, 57, 58, 67, 69, 73, 75, 79, 92, 95, 97, 107, 113, 197, 202, 203, 204, 209, 216, 226, 229, 233, 235, 247, 251, 266, 267, 268, 288, 293], "transcendent": [11, 21, 31, 35, 36, 44, 67, 75, 94, 206, 211, 216, 234, 235, 289, 294], "perhap": [11, 13, 17, 48, 67, 97, 107, 166, 206, 234, 249, 282], "compar": [11, 12, 15, 21, 36, 46, 48, 59, 64, 67, 72, 73, 84, 97, 103, 107, 108, 133, 160, 184, 188, 206, 209, 212, 213, 216, 221, 223, 228, 232, 235, 237, 241, 247, 254, 285, 288, 293], "1234": [11, 107, 229], "auto": [11, 13, 15, 30, 46, 67, 68, 95, 202, 209, 212, 216, 228, 232, 236], "record": [11, 50, 61, 67, 211, 216, 247], "joe": 11, "blogg": 11, "mailmap_check": 11, "unrecognis": 11, "3af6dc1": 11, "7fa63b1": 11, "100644": 11, "1307": [11, 36], "zsc347": 11, "gmail": [11, 201], "\u00f8yvind": 11, "jensen": [11, 48], "oyvind": 11, "\u0142ukasz": 11, "pankowski": 11, "lukpank": 11, "o2": [11, 223], "pl": 11, "\u5f6d\u4e8e\u658c": 11, "1931127624": 11, "qq": [11, 85, 86, 88, 89, 90, 94, 203, 204, 205, 206, 209, 211, 212, 213], "reorder": [11, 59, 66, 73, 181, 212, 232, 236, 254], "alphabet": [11, 67, 68, 117, 186, 204, 229, 249], "move": [11, 12, 23, 58, 59, 67, 68, 81, 83, 110, 125, 130, 133, 135, 141, 169, 195, 199, 200, 228, 237, 246, 268], "7598d94": 11, "562": 11, "joannah": 11, "nanjeky": 11, "ibm": [11, 228], "jnanjeky": 11, "nanjekyejoannah": 11, "joaquim": 11, "monserrat": 11, "qmonserrat": 11, "mailoo": 11, "jochen": 11, "voss": 11, "seehuhn": 11, "de": [11, 47, 68, 72, 107, 113, 186, 201, 202, 213, 218, 229, 232, 254], "jogi": 11, "miglani": 11, "jmig5776": 11, "johan": 11, "bl\u00e5b\u00e4ck": 11, "johan_bluecreek": 11, "riseup": 11, "net": [11, 47, 83, 210, 232, 236, 254], "blaback": 11, "cea": 11, "fr": [11, 89, 94, 107, 126, 131, 133, 135, 138, 139, 143, 145, 148, 236], "guzman": 11, "jguzm022": 11, "ucr": 11, "edu": [11, 46, 51, 58, 59, 68, 70, 72, 94, 103, 107, 117, 210, 215, 225, 229, 232, 236, 261], "joeb": 11, "1785690389": 11, "norepli": 11, "map": [11, 14, 21, 23, 46, 47, 48, 50, 57, 58, 59, 67, 68, 79, 83, 90, 92, 94, 97, 98, 107, 115, 126, 135, 159, 170, 171, 176, 191, 200, 202, 203, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 223, 228, 232, 233, 234, 235, 236, 240, 241, 248, 251, 254, 255, 257, 261], "cost": [12, 46, 48, 107, 135, 235, 287], "modular": [12, 68, 107, 177, 210, 235], "consequ": [12, 13, 23, 44, 67, 204, 206, 285, 293], "cover": [12, 19, 73, 107, 109, 121, 131, 190, 199, 242, 249, 283, 285], "maxim": [12, 58, 68, 96, 203, 207, 211, 223, 225], "red": [12, 202], "advis": [12, 13, 21, 36, 47, 125, 131], "wait": [12, 200], "_____________________________________________________________________________________________________": 12, "_________________": [12, 111], "test_pretti": 12, "test_upretty_sub_sup": 12, "traceback": [12, 13, 15, 18, 21, 22, 23, 27, 29, 31, 32, 33, 34, 35, 36, 41, 42, 43, 48, 49, 59, 67, 68, 71, 77, 94, 97, 98, 99, 100, 101, 103, 105, 106, 109, 117, 201, 203, 206, 207, 209, 212, 215, 223, 224, 232, 234, 235, 245, 247, 248, 250, 252, 254, 255, 257, 285, 289], "home": [12, 110, 211, 229], "oscar": [12, 201], "317": 12, "upretti": 12, "beta_1_2": 12, "\u03b2\u2081\u2082": 12, "assertionerror": [12, 245], "branch": [12, 22, 46, 67, 72, 73, 74, 75, 213, 226, 235, 288, 293], "ran": 12, "influenc": [12, 49, 110, 203, 204], "suppos": [12, 13, 22, 23, 59, 66, 67, 68, 92, 203, 205, 209, 211, 212, 216, 223, 226, 232, 234, 245, 254, 266, 271, 285, 287, 293], "sneak": 12, "sporad": 12, "seed": [12, 56, 58, 67, 68, 77, 80, 81, 103, 107, 209, 236, 247, 254], "pythonhashse": [12, 247], "unrel": [12, 13, 32, 67, 74, 204, 285], "ideal": [12, 21, 48, 104, 128, 131, 141, 191, 199, 205, 207, 209, 210, 211, 212, 213, 228, 235, 261], "slip": [12, 133, 137, 139, 199], "wasn": 12, "notic": [12, 13, 15, 23, 58, 59, 65, 67, 103, 146, 169, 206, 226, 238, 242, 243, 254, 255, 285, 287, 288, 293], "broken": [12, 13, 56, 67, 199, 216, 232, 257], "seem": [12, 17, 21, 23, 91, 92, 131, 186, 203, 228, 232, 293], "carefulli": [12, 22, 67, 191, 209, 218], "everyon": [12, 213], "expediti": 12, "21177": 12, "residu": [12, 63, 68, 107, 207, 209, 226], "cot": [12, 67, 73, 75, 109, 213, 216, 225], "tanh": [12, 67, 71, 73, 94, 213, 216, 228, 293], "as_leading_term": [12, 67, 223], "21253": 12, "test_tan": 12, "tan": [12, 46, 67, 72, 73, 94, 109, 123, 138, 139, 140, 145, 213, 215, 216, 223, 225, 232, 235, 293], "test_expr": [12, 67], "test_as_leading_term": 12, "ration": [12, 14, 21, 23, 27, 41, 43, 44, 46, 48, 66, 67, 71, 72, 73, 75, 77, 80, 82, 84, 88, 92, 94, 95, 100, 103, 107, 109, 117, 150, 183, 201, 204, 209, 210, 211, 213, 216, 221, 224, 225, 226, 228, 229, 231, 234, 235, 236, 254, 261, 284, 285, 288, 292], "imaginaryunit": [12, 67, 216], "21245": 12, "fi": [12, 19], "36": [12, 27, 50, 61, 68, 72, 83, 94, 98, 103, 107, 111, 212, 216, 229, 232, 236, 271], "test_residu": 12, "test_issue_21177": 12, "cancel": [12, 19, 23, 25, 48, 67, 71, 75, 83, 92, 94, 103, 107, 117, 118, 206, 207, 209, 212, 215, 228, 234, 287], "underli": [12, 14, 48, 59, 65, 67, 96, 103, 115, 131, 176, 189, 234, 235, 236], "report": [12, 39, 46, 58, 67, 80, 98, 107, 213, 224, 235, 247, 289, 294], "benefici": 12, "prudent": 12, "matter": [12, 23, 46, 56, 59, 66, 67, 72, 92, 94, 190, 223, 254, 287, 288], "reproduct": 12, "constant": [12, 13, 14, 25, 27, 29, 30, 32, 35, 46, 48, 66, 67, 71, 73, 75, 91, 92, 94, 110, 111, 117, 130, 131, 133, 148, 149, 158, 162, 168, 184, 185, 187, 188, 189, 192, 195, 197, 202, 204, 207, 209, 211, 212, 213, 216, 218, 223, 226, 228, 229, 232, 233, 234, 235, 236, 247, 249, 254, 255, 264, 268, 271, 278, 283, 289, 294], "quickli": [12, 19, 23, 58, 59, 67, 68, 71, 72, 107, 209, 212, 225, 235, 251], "newli": [12, 67, 92, 226], "lambda": [12, 14, 15, 23, 25, 29, 33, 42, 43, 46, 48, 58, 59, 67, 68, 69, 73, 94, 98, 99, 100, 103, 106, 107, 109, 126, 131, 144, 145, 148, 149, 166, 202, 209, 211, 212, 216, 217, 224, 225, 228, 232, 234, 235, 236, 237, 245, 254, 255, 261, 263, 266, 282, 289], "typeerror": [12, 13, 15, 22, 23, 31, 34, 41, 42, 43, 59, 67, 77, 82, 97, 99, 101, 105, 117, 155, 223, 224, 248, 255], "execut": [12, 14, 21, 38, 48, 95, 98, 148, 202, 216, 232, 235, 245, 247, 249, 250, 255, 257, 260, 272, 287, 292], "care": [12, 14, 15, 22, 23, 58, 67, 75, 94, 97, 103, 110, 113, 121, 131, 145, 191, 200, 206, 211, 228, 229, 232, 234, 235, 240, 243, 248, 282, 285, 287], "WILL": 12, "userwarn": [12, 191, 245, 252, 289], "function_that_emits_a_warn": 12, "sparingli": 12, "asid": [12, 15, 97, 232, 233, 287], "annoi": 12, "warrant": 12, "test_stacklevel": [12, 245], "expr_free_symbol": [12, 67], "test_deprecated_expr_free_symbol": 12, "nomin": 12, "closer": [12, 33, 133, 235, 288], "inspect": [12, 13, 21, 103, 211, 222, 253, 255, 280], "could": [12, 13, 14, 15, 19, 21, 23, 31, 33, 35, 43, 48, 60, 67, 79, 92, 94, 97, 125, 128, 131, 141, 145, 181, 184, 186, 203, 206, 209, 211, 213, 216, 224, 226, 228, 232, 233, 234, 235, 236, 237, 240, 241, 248, 252, 266, 267, 285, 288, 293], "nonsens": [12, 66, 75], "unevalu": [12, 13, 14, 21, 22, 23, 25, 42, 43, 46, 59, 66, 67, 73, 75, 84, 94, 107, 117, 158, 162, 169, 170, 181, 212, 215, 223, 224, 228, 232, 234, 235, 236, 237, 283, 287, 288, 294], "helper": [12, 13, 30, 46, 48, 58, 62, 65, 67, 92, 94, 95, 96, 166, 168, 177, 213, 223, 226, 229, 232, 233, 235, 248, 278], "test_sin_1_unevalu": 12, "dummy_eq": [12, 67], "combinatori": [12, 23, 51, 59, 66, 67, 74, 75, 212, 218, 228, 254, 256, 273, 293], "test_comb_factori": 12, "test_factorial_rewrit": 12, "nonneg": [12, 21, 23, 44, 67, 68, 69, 72, 75, 100, 148, 204, 206, 212, 229, 236, 293], "rewrit": [12, 66, 67, 69, 72, 73, 75, 92, 94, 97, 110, 117, 178, 207, 212, 223, 224, 225, 228, 232, 233, 234, 235, 236, 273, 287, 289], "_i": [12, 94, 181, 186, 213], "product": [12, 13, 21, 40, 50, 52, 55, 58, 59, 63, 65, 66, 67, 68, 69, 71, 72, 75, 77, 80, 82, 83, 90, 92, 94, 96, 97, 98, 100, 103, 107, 108, 117, 118, 119, 121, 125, 133, 146, 148, 156, 160, 161, 164, 166, 167, 168, 170, 173, 175, 176, 178, 179, 181, 185, 186, 187, 190, 191, 193, 198, 199, 200, 201, 203, 204, 205, 207, 209, 211, 212, 213, 216, 217, 218, 221, 224, 225, 228, 229, 232, 233, 234, 235, 236, 238, 240, 241, 242, 248, 251, 254, 261, 265, 278], "far": [12, 15, 47, 67, 81, 94, 201, 203, 206, 216, 226, 255, 282, 283, 285], "boil": 12, "agre": [12, 67, 68, 75, 82, 92, 226], "indefinit": [12, 14, 40, 73, 91, 92, 94, 103, 207, 209, 210, 212, 221, 283], "integrand": [12, 71, 75, 91, 92, 94, 226], "Of": [12, 19, 21, 27, 66, 92, 103, 232, 235, 254, 293], "cours": [12, 19, 21, 50, 51, 58, 66, 75, 92, 94, 103, 104, 107, 146, 197, 205, 206, 210, 211, 223, 225, 226, 268, 293], "hurt": 12, "checkodesol": [12, 34, 232], "truth": [12, 22, 41, 42, 43, 44, 45, 67, 98, 228], "verifi": [12, 21, 27, 32, 34, 38, 46, 58, 64, 68, 69, 131, 203, 209, 215, 232, 234, 235, 237, 238, 293], "logic": [12, 13, 14, 21, 23, 41, 42, 43, 44, 47, 67, 69, 92, 94, 107, 173, 175, 176, 180, 216, 218, 224, 232, 236, 254, 285, 286, 287, 289], "duplic": [12, 15, 58, 61, 68, 73, 75, 103, 107, 130, 224, 232, 254, 286], "mistaken": 12, "aaronmeur": 12, "anaconda3": 12, "cpython": [12, 148], "cach": [12, 21, 72, 92, 203, 212, 216, 245, 250, 251], "ye": [12, 68, 97, 232], "ground": [12, 86, 125, 133, 137, 138, 139, 140, 203, 206, 207, 209, 211, 212, 234, 292], "gmpy": [12, 67, 71, 206, 207, 292], "7357232": 12, "hash": [12, 67, 207, 209, 217, 228, 232, 247, 249], "3923913114": 12, "situat": [12, 21, 36, 67, 71, 92, 200, 232, 234, 236, 252, 285], "randomli": [12, 58, 67, 68, 107, 175], "xfail": [12, 232, 245, 247], "almost": [12, 32, 92, 101, 109, 183, 202, 203, 207, 212, 213, 232, 236, 250, 251, 254, 287], "useless": [12, 183, 207, 209], "test_func": 12, "sinc": [12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 25, 41, 46, 48, 49, 58, 59, 60, 63, 64, 65, 67, 68, 70, 72, 73, 75, 76, 77, 79, 83, 85, 91, 92, 94, 96, 97, 98, 103, 107, 120, 125, 146, 148, 157, 181, 182, 186, 197, 200, 202, 203, 204, 206, 207, 209, 211, 212, 216, 219, 224, 225, 226, 228, 229, 232, 234, 235, 236, 242, 246, 250, 251, 252, 254, 255, 265, 267, 268, 270, 282, 287, 289, 292, 293, 294], "xpass": [12, 245, 247], "test_failing_integr": 12, "atanh": [12, 73, 213, 216, 226], "mistyp": 12, "slightli": [12, 33, 39, 40, 48, 63, 107, 109, 133, 202, 203, 207, 209, 212, 216, 226, 228], "robust": [12, 34, 64, 67, 71, 208, 228, 232], "against": [12, 13, 21, 23, 36, 68, 103, 110, 131, 248], "minut": [12, 15, 32, 121, 133, 190], "hang": [12, 34, 103, 135, 139, 232, 233], "job": [12, 19, 23, 59, 161, 213, 216], "skipp": 12, "test_optional_depend": 12, "runtest": [12, 13, 247], "yml": 12, "manner": [12, 51, 68, 75, 145, 179, 197, 229, 232, 237, 254, 270], "act": [12, 14, 47, 50, 57, 58, 59, 63, 67, 75, 83, 96, 97, 103, 110, 113, 122, 125, 128, 130, 131, 136, 144, 153, 165, 170, 173, 174, 224, 235, 237, 238, 266, 270, 282], "fresh": 12, "verbos": [12, 48, 67, 98, 107, 216, 247, 248, 292], "clipboard": 12, "contrast": [12, 14, 23, 66, 67, 135, 206, 226, 232, 287], "foremost": 12, "tempt": [12, 21, 23, 67, 107], "indirect": [12, 67, 69, 75, 107, 181, 232], "trigsimp": [12, 15, 40, 67, 103, 125, 131, 139, 191, 225, 228, 265], "along": [12, 19, 23, 27, 48, 58, 67, 68, 69, 73, 75, 76, 77, 81, 82, 85, 87, 90, 92, 98, 100, 103, 110, 111, 113, 120, 121, 125, 126, 128, 130, 133, 135, 138, 139, 140, 143, 144, 145, 146, 148, 150, 178, 190, 191, 197, 200, 202, 205, 206, 211, 212, 232, 235, 264, 268, 270], "clearer": [12, 13, 265], "unwieldi": [12, 17], "sort": [12, 14, 29, 42, 43, 47, 48, 56, 59, 63, 92, 94, 97, 103, 106, 107, 118, 121, 126, 165, 181, 186, 190, 202, 209, 212, 213, 223, 228, 229, 232, 233, 234, 238, 240, 242, 247, 249, 254, 265, 285, 287, 288], "judgment": 12, "convolut": [12, 75, 218], "uncommon": [12, 48], "valueerror": [12, 18, 21, 33, 34, 41, 43, 46, 48, 49, 59, 67, 68, 76, 77, 80, 82, 83, 94, 98, 100, 103, 106, 107, 110, 115, 117, 155, 195, 197, 201, 203, 205, 209, 211, 224, 232, 234, 235, 254, 257, 268], "0x10e997790": 12, "memori": [12, 14, 48, 67, 107, 212, 237, 248, 251], "attempt": [12, 17, 19, 22, 23, 27, 30, 34, 36, 48, 58, 63, 65, 67, 71, 72, 79, 92, 94, 103, 107, 121, 123, 176, 206, 207, 211, 216, 218, 225, 228, 229, 232, 234, 235, 236, 247, 285, 293], "proof": [12, 58, 61, 92, 94, 235], "45": [12, 47, 67, 72, 83, 103, 107, 113, 212, 213, 229], "120": [12, 19, 66, 67, 72, 73, 89, 107, 110, 111, 213, 215, 216, 218, 232, 283], "210": [12, 71, 107, 229], "252": 12, "hidden": [12, 14, 190], "outdat": 12, "doctest_depends_on": [12, 250], "blanklin": 12, "todo": [12, 159, 161, 165, 166, 170, 171, 173, 174, 175, 176, 177, 209, 216, 223, 241], "trick": [12, 13, 14, 15, 63, 226, 242], "tag": [12, 216, 234], "dotprint": [12, 288, 292], "pprint": [12, 14, 15, 23, 25, 31, 46, 47, 69, 75, 94, 103, 107, 117, 153, 201, 216, 217, 224, 228, 232, 233, 235, 236, 254, 292], "use_unicod": [12, 23, 32, 46, 47, 48, 71, 75, 94, 95, 103, 111, 117, 153, 196, 201, 203, 204, 215, 216, 217, 235, 236, 283, 287, 289, 292, 293, 294], "is_real": [12, 14, 21, 23, 27, 31, 67, 69, 73, 74, 103, 193, 216, 241], "real": [12, 13, 14, 15, 18, 19, 21, 22, 23, 27, 30, 31, 40, 42, 44, 45, 46, 48, 59, 67, 68, 69, 71, 72, 73, 74, 75, 79, 83, 84, 89, 92, 94, 97, 98, 100, 103, 109, 113, 119, 128, 131, 148, 150, 153, 154, 161, 179, 193, 201, 204, 207, 211, 212, 213, 216, 217, 219, 223, 224, 226, 228, 231, 232, 234, 235, 236, 241, 245, 249, 258, 287, 293, 294], "is_posit": [12, 14, 21, 22, 23, 67, 193, 207], "noth": [12, 13, 27, 47, 58, 67, 94, 126, 165, 181, 203, 207, 215, 216, 228, 232, 234, 245, 247, 255, 257, 285], "didn": [12, 94, 103, 145], "unexpect": [12, 67, 247], "side": [12, 15, 19, 21, 29, 31, 34, 48, 58, 59, 67, 79, 83, 94, 103, 107, 110, 117, 126, 130, 145, 149, 169, 170, 186, 190, 191, 201, 203, 209, 211, 214, 216, 233, 235, 236, 240, 247, 249, 271, 283], "broke": 12, "revisit": [12, 139, 199], "particularli": [12, 21, 71, 94, 206, 207, 226, 293, 294], "squar": [12, 15, 21, 27, 30, 31, 36, 40, 44, 48, 58, 67, 68, 73, 83, 84, 92, 94, 98, 99, 103, 106, 107, 110, 117, 119, 143, 144, 167, 183, 191, 201, 205, 207, 209, 211, 212, 213, 216, 224, 228, 229, 232, 235, 236, 287], "root": [12, 15, 21, 23, 28, 31, 36, 40, 46, 48, 66, 67, 68, 73, 75, 89, 90, 91, 92, 94, 96, 99, 103, 107, 148, 186, 201, 203, 204, 207, 211, 213, 215, 216, 226, 228, 232, 234, 235, 236, 247, 251, 254, 287, 289, 292, 294], "radic": [12, 15, 27, 67, 68, 103, 203, 211, 212, 228, 234, 235], "adjust": [12, 130, 219, 223], "simpler": [12, 14, 22, 23, 27, 40, 67, 71, 75, 91, 92, 138, 200, 209, 225, 226, 228, 232, 234, 235, 293], "delet": [12, 51, 96, 98, 103, 213, 257, 293], "rational": 12, "pycodestyl": 12, "pyflak": 12, "pollut": 12, "strip_whitepac": 12, "undefin": [12, 14, 23, 31, 34, 42, 43, 46, 67, 73, 74, 75, 94, 100, 109, 122, 200, 211, 222, 223, 226, 255, 283, 294], "restrict": [12, 14, 21, 23, 29, 48, 56, 67, 68, 75, 103, 110, 111, 181, 185, 203, 206, 211, 213, 231], "cfg": [12, 209, 212], "cosmet": [12, 216], "noqa": [12, 67, 95, 207, 250], "pycqa": 12, "multipledispatch": [12, 13, 41], "dispatch": [12, 14, 42, 43, 44, 67, 68, 176, 216, 235, 251], "funcnam": [12, 248], "arg1": [12, 236], "arg2": [12, 236], "f811": [12, 67], "redefin": [12, 23, 59, 67, 130, 143, 145, 204, 255], "stylist": 12, "reus": [12, 15, 23, 48, 181, 287], "str": [12, 13, 14, 23, 42, 47, 48, 49, 59, 67, 68, 69, 71, 76, 77, 80, 83, 84, 95, 97, 100, 103, 107, 109, 115, 125, 126, 127, 128, 130, 148, 165, 175, 181, 191, 193, 195, 202, 207, 211, 216, 228, 232, 236, 252, 254, 255, 257, 261], "divis": [12, 15, 23, 67, 103, 107, 126, 183, 185, 203, 206, 207, 208, 209, 212, 214, 216, 229, 232, 234, 247, 255, 285, 288, 292], "gotcha": [12, 14, 16, 67, 200, 255, 286, 294], "intent": [12, 21, 48, 66, 67, 109, 249], "xp": 12, "test_symbol": 12, "ever": [12, 13, 14, 23, 73, 200, 203, 212, 226, 232, 249, 252, 288], "pars": [12, 13, 59, 67, 100, 131, 142, 213, 215, 272, 280], "cleaner": [12, 121, 148, 232], "sympifi": [12, 14, 15, 21, 22, 48, 71, 77, 97, 146, 154, 179, 181, 191, 192, 206, 207, 282, 288], "count_op": [12, 15, 67, 225, 228], "truthi": 12, "forget": [12, 30, 47, 293], "coverage_report": 12, "analyz": [12, 228, 241], "littl": [12, 21, 23, 47, 59, 77, 103, 107, 108, 133, 186, 205, 210, 212, 216, 226, 228, 236, 251, 265], "slower": [12, 13, 23, 27, 32, 63, 103, 126, 206, 211, 255, 282], "covhtml": 12, "100": [12, 15, 23, 25, 48, 51, 56, 66, 67, 68, 71, 75, 83, 90, 97, 98, 103, 107, 110, 202, 206, 211, 213, 215, 216, 223, 234, 235, 254, 282], "defens": 12, "gone": 12, "nedbatcheld": 12, "blog": [12, 13, 23, 48, 72, 98, 229, 235], "202008": 12, "you_should_include_your_tests_in_coverag": 12, "stori": [12, 186], "guarante": [12, 18, 21, 27, 33, 48, 58, 59, 67, 79, 92, 94, 103, 130, 206, 209, 211, 212, 232, 234, 235, 252, 257, 289, 293], "condit": [12, 14, 21, 22, 25, 27, 29, 48, 58, 67, 69, 73, 75, 85, 86, 89, 90, 91, 94, 97, 103, 107, 109, 110, 111, 113, 117, 123, 127, 133, 141, 145, 148, 150, 195, 201, 213, 216, 219, 226, 229, 231, 232, 234, 235, 236, 241, 293], "200710": 12, "flaws_in_coverage_measur": 12, "regex": 13, "categori": [13, 203, 272, 279], "lead": [13, 14, 21, 22, 23, 27, 36, 66, 67, 73, 77, 94, 97, 103, 107, 119, 127, 165, 191, 200, 204, 207, 209, 211, 212, 213, 216, 223, 225, 228, 232, 235, 249, 252, 257, 286, 293], "w": [13, 15, 25, 36, 40, 48, 51, 57, 59, 66, 67, 68, 69, 70, 73, 75, 92, 94, 97, 103, 104, 125, 128, 130, 139, 147, 150, 155, 166, 170, 179, 190, 195, 197, 198, 201, 202, 204, 205, 209, 210, 211, 212, 213, 217, 223, 224, 226, 228, 229, 232, 233, 235, 236, 247, 255, 257, 268, 294], "pythonwarn": 13, "NOT": [13, 25, 97, 117, 161, 165, 180, 183, 245, 248], "ned": 13, "batcheld": 13, "matplotlibbackend": [13, 202], "homonym": 13, "linestyl": 13, "xy": [13, 23, 46, 47, 81, 103, 128, 191, 200, 202, 203, 209, 216, 228, 235, 271, 288, 293], "y1": [13, 34, 67, 148], "width": [13, 47, 48, 95, 196, 202, 212, 216, 247], "height": [13, 47, 48, 83, 100, 150, 202, 203, 216, 223, 271], "motiv": [13, 16, 23, 37, 212], "horizont": [13, 23, 36, 47, 77, 80, 82, 98, 113, 130, 153, 202, 205, 216], "vertic": [13, 47, 51, 60, 61, 77, 78, 80, 82, 83, 84, 94, 96, 98, 103, 111, 113, 130, 136, 153, 161, 201, 202, 205, 211, 216, 224, 254, 271], "bar": [13, 48, 75, 132, 141, 170, 176, 257, 278], "reinvent": 13, "wheel": [13, 133], "facilit": [13, 108, 141, 152, 198, 247], "retriev": [13, 18, 50, 65, 98, 103, 130, 212, 228, 242], "ax": [13, 27, 28, 30, 32, 40, 68, 71, 77, 80, 92, 99, 103, 110, 115, 125, 126, 153, 178, 191, 200, 201, 202, 205, 213, 229, 232, 235, 237, 238, 241, 261, 263, 265, 268, 270, 293], "fig": 13, "_backend": 13, "axhlin": 13, "inertia": [13, 110, 111, 120, 121, 122, 124, 130, 131, 133, 134, 136, 138, 139, 140, 141, 148, 190, 191, 199, 200, 211, 278], "circular": [13, 15, 21, 115, 153, 209], "pariti": [13, 21, 59, 212], "inertia_of_point_mass": [13, 128], "graviti": [13, 130, 131, 135, 136, 138, 140, 148, 197, 270], "subclass": [13, 14, 21, 23, 42, 43, 48, 67, 74, 78, 80, 94, 97, 130, 150, 156, 165, 169, 170, 171, 176, 178, 179, 185, 202, 203, 205, 206, 207, 211, 212, 216, 236, 247, 248, 249, 252, 255, 261, 265, 288], "__init_subclass__": [13, 21], "kanesmethod": [13, 125, 126, 130, 131, 133, 134, 135, 136, 138, 139, 142, 143, 145, 148], "pinjoint": [13, 125, 130, 134, 136, 142], "prismaticjoint": [13, 125, 130, 136, 142], "q_": [13, 67, 125, 196, 229, 232], "u_": [13, 103, 125], "had": [13, 23, 31, 32, 59, 67, 68, 103, 107, 131, 145, 211, 212, 213, 216, 224, 226, 232, 234, 235, 250, 255, 282, 285, 288, 289], "axi": [13, 34, 40, 60, 72, 73, 77, 78, 80, 81, 83, 89, 92, 94, 100, 103, 110, 113, 115, 120, 125, 130, 131, 133, 135, 138, 139, 140, 142, 145, 148, 149, 150, 153, 154, 178, 191, 193, 195, 197, 199, 200, 202, 207, 235, 261, 263, 266, 268, 271], "parent_axi": [13, 125], "child_axi": [13, 125], "parent": [13, 58, 67, 90, 125, 130, 142, 191, 195, 202, 206, 207, 211, 247, 251, 261, 265, 266], "child": [13, 14, 125, 130, 142, 191, 206, 251], "parent_interfram": [13, 125, 142], "child_interfram": [13, 125, 130, 142], "rotat": [13, 40, 55, 58, 60, 67, 76, 77, 78, 80, 82, 83, 98, 110, 111, 125, 130, 133, 136, 138, 140, 142, 146, 149, 165, 178, 191, 195, 197, 199, 200, 201, 202, 254, 261, 263, 266, 268, 270], "joint_axi": [13, 125, 130, 134, 136, 142], "transform": [13, 14, 36, 40, 45, 48, 63, 66, 67, 68, 69, 71, 72, 75, 82, 100, 103, 115, 117, 125, 133, 142, 153, 174, 176, 178, 183, 201, 204, 205, 207, 209, 211, 212, 218, 223, 224, 225, 228, 229, 231, 232, 233, 234, 235, 236, 238, 241, 249, 255, 261, 268, 287], "pin": [13, 40, 110, 111, 113, 125, 130], "dcm": [13, 122, 125, 131, 133, 148, 191, 199, 200, 261], "q_pin": [13, 130], "theta_pin": 13, "rad": [13, 68, 115, 131, 211], "int_fram": 13, "orient_axi": [13, 122, 125, 191, 193], "align": [13, 48, 77, 103, 125, 200, 201, 216, 234, 247], "orient": [13, 40, 79, 83, 98, 125, 131, 133, 135, 138, 142, 146, 148, 191, 195, 197, 199, 200, 209, 254, 261, 262, 269, 270, 276], "parent_joint_po": [13, 125], "child_joint_po": [13, 125], "parent_point": [13, 125, 134, 136, 142], "child_point": [13, 125, 130, 134, 136, 142], "mass": [13, 25, 84, 119, 120, 121, 122, 125, 126, 128, 130, 131, 133, 134, 135, 136, 138, 140, 141, 142, 143, 144, 148, 149, 157, 182, 184, 185, 186, 197, 199, 247, 270, 278], "pos_from": [13, 125, 128, 130, 131, 133, 134, 135, 142, 148, 195, 199], "masscent": [13, 122, 125, 128, 130, 134, 142, 146, 148], "parent_fram": [13, 142], "child_fram": [13, 142], "locatenew": [13, 122, 128, 133, 135, 138, 139, 140, 145, 146, 148, 149, 192, 195, 197, 199], "conflict": [13, 73, 107, 117, 131, 249], "comprehens": [13, 21, 25, 31, 32, 34, 210, 224, 236, 282], "additional_transl": 13, "recogn": [13, 15, 27, 32, 34, 67, 68, 72, 82, 107, 110, 118, 204, 207, 215, 224, 225, 234, 241, 285], "node": [13, 14, 46, 61, 67, 94, 109, 113, 123, 157, 182, 191, 201, 206, 216, 223, 235, 240, 251, 255, 288, 292], "maximum": [13, 15, 31, 32, 46, 48, 49, 58, 59, 67, 73, 94, 103, 107, 110, 133, 178, 186, 202, 207, 209, 212, 216, 223, 224, 228, 229, 232, 235, 236, 251, 254], "multipli": [13, 15, 32, 40, 44, 48, 58, 67, 78, 82, 89, 96, 98, 103, 107, 126, 127, 135, 144, 145, 158, 167, 181, 186, 187, 190, 203, 204, 205, 207, 209, 211, 212, 216, 218, 225, 226, 229, 232, 237, 254, 265, 285, 288], "max": [13, 48, 58, 59, 67, 73, 75, 77, 103, 107, 109, 110, 201, 202, 211, 212, 216, 223, 225, 226, 255], "min": [13, 59, 63, 67, 72, 73, 103, 109, 201, 202, 211, 216, 222, 232, 254], "is_perfect_squar": 13, "ntheori": [13, 44, 58, 67, 68, 209, 212, 229, 254], "primetest": [13, 67, 107], "is_squar": [13, 67, 98, 107, 207], "is_prim": [13, 21, 67, 203], "isprim": [13, 44, 68, 107], "divid": [13, 14, 58, 66, 67, 68, 83, 103, 107, 126, 127, 185, 186, 204, 206, 207, 209, 211, 212, 216, 232, 251, 288], "bottom_up": [13, 67], "interactive_travers": 13, "postorder_travers": [13, 67, 288], "preorder_travers": [13, 67, 288], "refactor": [13, 232, 240, 251], "tr": [13, 49, 58, 216, 225], "quantum": [13, 26, 119, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 201, 278], "default_sort_kei": [13, 47, 56, 67, 240], "matrixel": [13, 48], "matrixsymbol": [13, 18, 21, 32, 44, 45, 48, 67, 98, 100, 103, 216, 236, 238], "layer": [13, 117, 209, 255], "imprecis": 13, "free_symbol": [13, 14, 30, 48, 67, 76, 94, 98, 170, 188, 191, 212, 222, 229], "atomicexpr": [13, 67], "concept": [13, 14, 21, 58, 133, 200, 206, 208, 211, 216, 235, 240, 270, 286, 291], "misappli": 13, "introduc": [13, 22, 30, 63, 66, 67, 75, 92, 103, 108, 111, 131, 133, 138, 139, 140, 144, 181, 186, 200, 207, 208, 212, 213, 216, 223, 226, 229, 236, 252, 279, 286, 289, 291, 293], "21494": 13, "size": [13, 19, 32, 48, 49, 51, 56, 58, 59, 60, 61, 62, 63, 67, 68, 70, 72, 95, 98, 100, 103, 106, 107, 115, 133, 143, 144, 145, 154, 176, 177, 196, 202, 205, 209, 216, 228, 229, 232, 236, 254, 283], "die": [13, 211, 236], "histor": [13, 14, 17, 23, 68, 205, 232, 236], "21563": 13, "revert": [13, 207, 212], "sample_it": [13, 236], "domainmatrix": [13, 32, 99, 103, 208, 211, 214, 279], "21402": 13, "earlier": [13, 121, 213, 217, 226, 228, 255, 266, 268, 288], "unsupport": [13, 15, 18, 117, 211, 216], "operand": [13, 15, 59, 67, 192, 211, 264], "dict": [13, 15, 17, 21, 27, 30, 31, 35, 36, 48, 50, 59, 67, 68, 69, 83, 84, 97, 98, 103, 107, 109, 126, 127, 161, 173, 176, 187, 189, 191, 202, 205, 206, 207, 209, 211, 212, 213, 214, 216, 228, 229, 232, 233, 234, 235, 236, 240, 247, 248, 254, 261, 294], "smith_normal_form": [13, 104, 205], "newmatrix": 13, "holonom": [13, 88, 91, 130, 132, 133, 134, 135, 141, 143, 144, 272, 278, 279], "polymatrix": 13, "risch": [13, 94, 283], "20780": 13, "20759": 13, "20621": 13, "19882": 13, "18844": 13, "21441": 13, "21427": 13, "21496": 13, "potenti": [13, 21, 79, 100, 103, 107, 126, 128, 130, 140, 141, 192, 198, 206, 211, 216, 223, 226, 228, 232, 250, 251, 264, 270, 278], "impact": 13, "downstream": [13, 21], "goal": [13, 14, 47, 121, 149, 211, 213, 247, 248, 250, 286, 287], "tableform": [13, 234, 257], "usecas": 13, "line2dbaseseri": [13, 202], "linecollect": [13, 202], "bokeh": 13, "plotli": 13, "mayavi": 13, "k3d": 13, "get_point": [13, 202], "uniformli": [13, 19, 58, 83, 84, 107, 110, 115, 202, 250], "adapt": [13, 115, 202, 222, 234, 254, 260], "get_data": [13, 202, 258], "dft": [13, 70, 120], "fourier": [13, 67, 75, 94, 120, 174, 220, 273], "as_explicit": [13, 32, 100, 103, 120, 237, 238], "discret": [13, 46, 48, 49, 57, 59, 67, 68, 75, 107, 117, 181, 186, 218, 221, 232, 234, 235, 273, 282], "represent": [13, 14, 23, 27, 31, 40, 47, 48, 49, 50, 58, 61, 67, 68, 73, 75, 79, 87, 89, 91, 92, 94, 96, 97, 98, 99, 100, 106, 107, 114, 115, 120, 121, 122, 130, 141, 145, 150, 165, 170, 175, 176, 178, 179, 181, 183, 190, 196, 197, 199, 202, 203, 205, 207, 209, 211, 212, 213, 214, 215, 216, 218, 226, 228, 229, 232, 235, 236, 241, 242, 255, 257, 261, 264, 271, 279, 283, 285, 288], "21626": 13, "expos": [13, 47, 236], "mutat": [13, 117, 205, 207, 236], "flat": [13, 81, 98, 248], "todok": [13, 98], "ey": [13, 32, 98, 99, 100, 101, 102, 103, 105, 205, 211, 237, 257, 289], "converg": [13, 48, 66, 71, 75, 94, 107, 150, 212, 219, 223, 226, 283], "legacy_matrix": [13, 94], "discontinu": [13, 46, 71, 73, 94, 110, 219, 234], "theano_cod": 13, "aesara_cod": [13, 216], "theanoprint": 13, "aesaraprint": [13, 216], "predic": [13, 14, 41, 42, 46, 109, 212, 228, 254, 273], "big": [13, 15, 19, 21, 51, 67, 69, 107, 148, 161, 201, 215, 216, 223, 238, 257, 283, 285], "registr": 13, "add_handl": 13, "remove_handl": [13, 41], "regist": [13, 41, 42, 43, 68, 177], "register_mani": [13, 42, 43], "askprimehandl": 13, "staticmethod": [13, 247], "register_handl": [13, 41], "prime": [13, 21, 34, 41, 42, 43, 44, 58, 65, 66, 67, 68, 70, 72, 75, 107, 152, 203, 204, 206, 207, 209, 212, 226, 228, 229, 236, 251], "Not": [13, 14, 22, 23, 32, 67, 72, 97, 117, 216, 235, 236, 254, 287, 294], "primepred": [13, 44], "q": [13, 14, 15, 18, 21, 28, 30, 39, 40, 41, 42, 43, 44, 45, 48, 59, 63, 66, 67, 68, 75, 84, 89, 90, 92, 94, 96, 98, 103, 109, 110, 117, 118, 125, 126, 127, 130, 131, 133, 135, 140, 142, 143, 144, 145, 148, 149, 150, 161, 175, 181, 184, 191, 192, 193, 195, 196, 197, 199, 202, 203, 204, 206, 207, 209, 211, 212, 213, 215, 216, 218, 226, 229, 232, 234, 236, 241, 242, 257, 261, 264, 265, 267, 270, 289, 293], "20209": 13, "stochast": 13, "timestamp": 13, "wienerprocess": [13, 236], "normaldistribut": [13, 236], "20078": 13, "misspel": 13, "absorbing_prob": [13, 236], "absorb": [13, 14, 92, 232, 236, 283], "probabilit": 13, "shutil": 13, "power": [13, 15, 29, 34, 40, 45, 48, 57, 58, 59, 68, 70, 71, 72, 73, 89, 90, 92, 94, 96, 98, 100, 107, 108, 117, 131, 148, 153, 164, 167, 180, 183, 185, 186, 187, 191, 203, 204, 206, 207, 208, 209, 211, 212, 213, 215, 216, 217, 220, 223, 225, 228, 229, 232, 234, 235, 236, 240, 249, 254, 273, 282, 283, 284, 285, 286, 288, 289, 292], "immut": [13, 14, 67, 99, 102, 105, 200, 207, 232, 237, 276, 282, 289], "coordsystem": [13, 69], "patch": [13, 69, 216], "manifold": [13, 69], "coord_system": 13, "connect_to": 13, "coord_tuple_transform_to": [13, 69], "constructor": [13, 14, 23, 42, 43, 47, 48, 54, 58, 59, 60, 67, 74, 75, 96, 101, 103, 135, 174, 175, 179, 183, 202, 203, 205, 206, 207, 216, 224, 232, 241, 249, 265, 273, 284, 288], "unord": [13, 15, 67, 107, 207, 235, 254, 255], "lambidfi": 13, "guess": [13, 17, 47, 68, 71, 92, 95, 196, 209, 212, 226, 229, 288], "construct": [13, 19, 25, 29, 40, 42, 43, 47, 48, 50, 67, 69, 73, 75, 77, 81, 83, 95, 100, 103, 108, 111, 117, 121, 122, 126, 128, 130, 131, 133, 166, 170, 179, 180, 183, 187, 203, 206, 207, 209, 211, 212, 216, 229, 234, 236, 237, 241, 249, 251, 252, 265, 267, 268, 285, 288, 289, 293], "superclass": [13, 14, 21, 66, 94, 100, 207], "scalar": [13, 33, 40, 67, 69, 82, 96, 98, 100, 103, 108, 117, 128, 131, 180, 191, 192, 193, 198, 200, 203, 205, 209, 216, 232, 237, 249, 255, 261, 263, 264, 265, 266, 267, 269, 271, 276, 278], "quantiti": [13, 15, 59, 67, 72, 75, 79, 84, 111, 121, 126, 139, 146, 160, 183, 185, 189, 190, 197, 199, 200, 211, 228, 236, 265, 270, 278], "boolean": [13, 14, 23, 24, 29, 34, 41, 42, 43, 44, 45, 46, 48, 67, 73, 77, 81, 82, 83, 84, 95, 98, 103, 104, 107, 110, 115, 117, 126, 130, 166, 191, 193, 196, 202, 205, 207, 209, 211, 213, 216, 228, 232, 234, 236, 254, 264, 289], "sens": [13, 14, 19, 21, 23, 40, 44, 46, 47, 67, 69, 72, 75, 92, 97, 126, 133, 186, 191, 200, 203, 209, 211, 225, 226, 228, 235, 236, 248, 249, 254, 270, 293], "exponenti": [13, 15, 21, 34, 40, 48, 58, 63, 67, 68, 72, 94, 97, 98, 103, 107, 109, 167, 183, 213, 228, 232, 235, 236, 284, 285, 289], "treat": [13, 14, 21, 22, 23, 30, 34, 35, 40, 57, 58, 65, 67, 72, 75, 82, 83, 103, 109, 131, 154, 191, 197, 204, 206, 207, 209, 211, 212, 213, 215, 216, 223, 224, 226, 228, 229, 232, 234, 240, 248, 251, 268, 285, 289], "cdot": [13, 21, 25, 49, 66, 72, 75, 85, 89, 90, 92, 98, 100, 103, 107, 118, 120, 146, 186, 190, 197, 199, 200, 201, 203, 204, 212, 219, 223, 226, 232, 234, 237, 238, 254, 267, 268, 287, 288, 293], "attributeerror": [13, 21, 67, 103, 235, 255, 289], "as_coeff_mul": [13, 67, 92, 100], "tri": [13, 14, 15, 21, 29, 31, 34, 47, 67, 75, 83, 92, 94, 133, 145, 176, 203, 204, 211, 216, 218, 228, 232, 233, 235, 247, 285, 293], "benchmark": [13, 133, 147], "tmpfile": 13, "random_complex_numb": [13, 67], "verify_numer": [13, 67], "test_derivative_numer": [13, 67], "_randrang": [13, 67, 68], "_randint": [13, 67, 209], "as_poli": [13, 67, 204, 212], "as_expr": [13, 67, 103, 206, 211, 212, 213, 289], "combintor": 13, "perm_cycl": [13, 59, 216], "init_print": [13, 27, 32, 38, 48, 59, 71, 94, 95, 103, 111, 196, 203, 204, 215, 283, 287, 289, 292, 293, 294], "problemat": [13, 23, 206], "18056": 13, "15416": 13, "100x": 13, "slowdown": [13, 71], "significantli": [13, 32, 48, 71, 121, 143, 207, 218, 248, 251], "_sympifi": [13, 67, 100, 288], "strict": [13, 14, 27, 58, 59, 67, 71, 72, 98, 103, 109, 130, 209, 212, 234, 235, 254, 257, 293], "whatev": [13, 15, 23, 58, 67, 68, 228, 232, 233, 235, 255], "__repr__": [13, 216], "12524": 13, "repr": [13, 48, 94, 175, 206, 211, 216, 247, 292], "plenti": 13, "_sympy_": [13, 67], "lh": [13, 17, 29, 34, 48, 57, 67, 214, 216, 232, 234, 235, 267], "rh": [13, 17, 29, 32, 34, 48, 57, 59, 67, 98, 99, 103, 125, 126, 130, 131, 138, 139, 140, 205, 214, 216, 218, 232, 234, 235, 267], "tensexpr": [13, 118, 242], "substitute_indic": 13, "danger": [13, 204], "tensor_head": [13, 118, 242], "shorter": [13, 36, 67, 77, 121, 143, 190, 203, 207, 216, 249, 257], "creation": [13, 15, 23, 67, 69, 103, 122, 128, 138, 141, 142, 143, 144, 145, 155, 165, 169, 170, 171, 181, 199, 200, 216, 236, 241, 249, 255], "_dummy_fmt": 13, "l_": [13, 94, 103, 201], "obsolet": 13, "dummy_nam": [13, 242], "metric_symmetri": [13, 242], "set_metr": [13, 242], "delta": [13, 15, 48, 51, 61, 72, 90, 92, 96, 115, 145, 153, 181, 201, 205, 216, 223, 229, 232, 236, 237, 242], "epsilon": [13, 15, 66, 68, 75, 92, 94, 152, 216, 242], "latter": [13, 18, 23, 48, 58, 67, 72, 75, 92, 107, 203, 207, 211, 216, 226, 229, 242, 249, 254, 255, 285], "obscur": [13, 21], "young": [13, 110, 242], "tableau": 13, "favor": 13, "tensorindex": [13, 242], "tensor_indic": [13, 118, 242], "denot": [13, 14, 15, 19, 58, 59, 67, 69, 75, 89, 90, 92, 94, 96, 97, 98, 103, 107, 109, 113, 117, 186, 191, 197, 202, 203, 204, 209, 211, 219, 223, 224, 226, 232, 236, 241, 242, 261, 263, 265, 266, 268, 270], "emptyset": [13, 21, 31, 46, 47, 97, 216, 224, 235, 261, 294], "is_empti": [13, 21, 59], "unknown": [13, 14, 18, 21, 22, 23, 25, 32, 34, 35, 40, 67, 68, 111, 166, 214, 231, 232, 233, 234, 235, 254, 294], "empti": [13, 14, 21, 27, 30, 31, 35, 42, 46, 47, 48, 49, 58, 62, 66, 67, 79, 82, 83, 84, 97, 98, 103, 107, 126, 127, 145, 176, 189, 207, 211, 212, 216, 222, 223, 224, 226, 232, 234, 235, 247, 249, 254, 257, 288], "denest": [13, 67, 212, 228, 234, 254], "particl": [13, 122, 125, 126, 128, 130, 131, 135, 136, 141, 143, 145, 148, 149, 157, 160, 167, 168, 179, 181, 184, 186, 199, 242, 278], "rigidbodi": [13, 122, 125, 126, 128, 130, 133, 138, 139, 140, 146, 148], "potential_energi": [13, 125, 126, 128, 130, 140, 146], "energi": [13, 26, 119, 122, 126, 128, 131, 140, 157, 182, 186, 197, 242, 268, 278], "setter": [13, 131, 148], "getter": [13, 67, 131, 148], "set_": 13, "set_condit": 13, "17749": 13, "unpack": [13, 67, 98, 103, 254, 255], "emul": [13, 228, 235, 237, 255], "is_deriv": [13, 67], "as_finite_differ": [13, 46, 67, 283], "17881": 13, "get_matrix": [13, 242], "__getitem__": [13, 67, 98, 241], "__iter__": [13, 59, 67, 228], "_components_data_full_destroi": 13, "__pow__": [13, 98, 207, 213], "flaw": 13, "replace_with_arrai": [13, 242, 243], "throughout": [14, 92, 97, 209, 219, 235, 270, 285], "elsewher": [14, 21, 72, 96, 205, 247], "termnam": 14, "antideriv": [14, 73, 75, 94, 232, 283], "frac": [14, 19, 21, 23, 25, 27, 28, 32, 34, 46, 66, 67, 68, 69, 72, 73, 75, 92, 94, 103, 107, 109, 117, 135, 146, 184, 196, 197, 199, 200, 201, 205, 207, 209, 212, 216, 218, 219, 223, 226, 229, 232, 233, 235, 236, 237, 254, 268, 270, 283, 287, 288, 292, 293], "primit": [14, 58, 67, 68, 75, 107, 175, 179, 203, 204, 206, 207, 209, 211, 212, 215, 216, 229, 283], "terminologi": [14, 28, 242], "tupl": [14, 23, 30, 33, 34, 35, 40, 42, 43, 46, 47, 48, 49, 58, 59, 66, 67, 68, 69, 73, 74, 75, 76, 77, 78, 80, 82, 83, 84, 89, 92, 94, 98, 103, 106, 107, 109, 110, 111, 115, 122, 125, 126, 128, 130, 143, 144, 146, 148, 150, 165, 166, 167, 170, 175, 178, 179, 180, 181, 191, 195, 200, 202, 203, 205, 206, 207, 209, 213, 214, 216, 217, 218, 222, 224, 228, 229, 232, 233, 234, 235, 236, 237, 241, 242, 247, 248, 249, 250, 254, 255, 257, 261, 265, 283, 288, 289, 292], "subexpress": [14, 23, 48, 67, 73, 98, 121, 123, 211, 212, 216, 223, 228, 235, 249, 255, 282], "togeth": [14, 19, 48, 58, 67, 71, 96, 103, 107, 141, 167, 178, 186, 200, 203, 207, 209, 211, 212, 215, 216, 228, 232, 234, 236, 247, 248, 254, 287, 293], "walk": [14, 48, 51, 67, 173, 176, 226], "extract": [14, 27, 31, 35, 36, 46, 67, 94, 98, 100, 103, 107, 118, 133, 141, 146, 200, 209, 211, 212, 234, 235, 236, 247, 249, 254], "rebuilt": [14, 288], "atom": [14, 29, 48, 59, 67, 94, 97, 98, 119, 182, 206, 213, 216, 234, 235, 241], "queri": [14, 21, 22, 23, 41, 44, 45, 46, 48, 67, 79, 212, 228, 236], "is_": [14, 23, 67], "recurs": [14, 15, 18, 21, 23, 46, 67, 72, 92, 94, 97, 98, 107, 133, 202, 209, 212, 213, 216, 217, 221, 223, 228, 234, 235, 240, 245, 247, 251, 252, 254, 284, 293], "canonic": [14, 54, 67, 225, 242, 273], "excess": 14, "discourag": [14, 21, 67, 228], "expens": [14, 23, 34, 67, 145, 225, 232, 233, 234, 250, 289], "matrix": [14, 18, 19, 21, 25, 28, 33, 35, 40, 48, 56, 59, 67, 68, 69, 75, 82, 92, 94, 96, 98, 99, 101, 102, 105, 106, 108, 109, 117, 118, 120, 122, 125, 126, 127, 128, 130, 131, 133, 134, 135, 136, 138, 139, 140, 142, 143, 144, 146, 148, 149, 150, 153, 154, 156, 164, 165, 170, 175, 176, 178, 180, 181, 183, 186, 191, 200, 201, 203, 205, 209, 211, 214, 216, 217, 224, 226, 228, 229, 232, 234, 235, 237, 238, 240, 241, 242, 243, 248, 249, 254, 255, 257, 261, 263, 264, 266, 270, 276, 284, 287, 288, 293, 294], "bound": [14, 29, 44, 48, 49, 66, 67, 76, 77, 78, 80, 82, 83, 94, 107, 128, 179, 207, 209, 211, 212, 216, 222, 232, 234, 235, 236, 241, 251, 257, 261], "dummi": [14, 48, 63, 66, 67, 73, 92, 94, 103, 131, 148, 176, 181, 206, 207, 211, 212, 213, 222, 223, 224, 226, 228, 232, 235, 240, 242, 245, 249, 254, 255], "unequ": [14, 15, 17, 67, 110, 216], "clash": [14, 39, 67, 103], "_eval_": 14, "_eval_deriv": [14, 23, 67, 75], "overrid": [14, 15, 48, 67, 76, 77, 83, 109, 179, 216, 241, 248, 249, 254, 255], "pre": [14, 40, 47, 48, 67, 201, 202, 217, 225, 228, 234, 235, 247, 266, 270, 288], "shorthand": [14, 15, 21, 23, 67, 97, 175, 211, 224, 245], "reserv": [14, 21, 131, 242, 249, 289], "smaller": [14, 48, 58, 59, 67, 68, 72, 75, 83, 94, 100, 107, 143, 204, 206, 209, 212, 219, 225, 226, 234, 254, 282, 293], "children": [14, 67, 68, 206, 251], "leaf": [14, 206, 216, 225, 288], "strictli": [14, 15, 18, 20, 21, 44, 46, 67, 75, 103, 107, 117, 209, 228, 234, 255], "dag": 14, "rebuild": [14, 23, 67, 212, 288], "colloqui": [14, 28], "hyper": [14, 67, 72, 75, 86, 89, 216, 218, 226, 228, 234, 236, 293], "primepi": [14, 23, 107], "divisor_sigma": [14, 107], "interchang": [14, 63, 66, 92, 232], "mental": 14, "hashabl": [14, 64, 92, 254], "repl": [14, 242], "intermedi": [14, 48, 49, 90, 98, 125, 131, 133, 138, 142, 165, 175, 183, 184, 191, 195, 199, 235, 249, 290], "idiom": [14, 258, 285, 286], "frown": 14, "lowercas": [14, 15, 40, 232, 247, 283], "is_integ": [14, 21, 23, 67, 193, 216, 241], "capit": [14, 66, 68, 117, 232], "wherea": [14, 19, 21, 27, 32, 44, 48, 68, 77, 83, 92, 97, 117, 186, 203, 206, 212, 216, 234, 235, 254, 293], "is_capit": 14, "unneed": 14, "achiev": [14, 15, 23, 67, 71, 75, 100, 107, 131, 148, 215, 223, 226, 228, 235, 238, 250, 266], "isinst": [14, 18, 21, 23, 48, 67, 98, 100, 117, 206, 207, 216, 217, 228, 237, 240, 249, 288], "ship": [14, 108], "numberkind": [14, 18, 67, 98, 224], "matrixkind": [14, 18, 67, 98, 224], "booleankind": [14, 67], "ring": [14, 27, 70, 90, 103, 104, 199, 204, 205, 209, 211, 212, 213, 214, 215, 216, 254], "classif": [14, 20, 67, 232, 233], "lamda": [14, 100, 216, 224, 236, 289], "\u03bb": [14, 289], "lambdifi": [14, 23, 33, 34, 48, 75, 133, 216, 234, 248, 253, 280, 284], "matrixexpr": [14, 23, 98, 100, 101], "mutabl": [14, 15, 49, 67, 99, 100, 101, 110, 207, 216, 217, 228, 237, 289], "dens": [14, 98, 100, 102, 103, 205, 211, 212, 237, 255, 276, 288], "quit": [14, 19, 23, 75, 103, 107, 133, 199, 202, 213, 215, 226, 234, 254, 270, 285, 288], "rung": [14, 46, 89], "kutta": [14, 89], "loss": [14, 48, 92, 181, 248, 267], "stabil": [14, 58, 63, 65, 71, 117, 145, 240], "focus": [14, 33, 209, 229, 231, 232, 234, 235, 294], "is_numb": [14, 21, 67, 75, 94], "infin": [14, 21, 29, 44, 66, 67, 72, 73, 75, 80, 92, 94, 103, 154, 207, 209, 212, 216, 221, 222, 223, 224, 228, 231, 232, 236], "resembl": [14, 69, 75, 94, 241], "zoo": [14, 17, 21, 44, 67, 72, 73, 75, 94, 223, 225, 228], "data": [14, 19, 48, 58, 67, 68, 75, 94, 103, 108, 115, 126, 160, 202, 203, 206, 207, 209, 212, 213, 216, 228, 241, 242, 247, 249, 251, 254, 258], "effici": [14, 19, 21, 27, 32, 40, 46, 48, 51, 58, 63, 67, 70, 71, 72, 83, 84, 100, 103, 107, 108, 117, 125, 126, 148, 201, 204, 205, 206, 207, 209, 212, 213, 214, 215, 228, 229, 234, 248, 255, 282, 288, 289, 293], "inequ": [14, 21, 22, 23, 28, 67, 202, 209, 224, 226, 230, 273], "neq": [14, 23, 67, 73, 75, 92, 94, 98, 107, 186, 200, 201, 209, 212, 229, 232, 234, 293], "ne": [14, 17, 21, 67, 68, 72, 73, 80, 92, 103, 107, 204, 206, 209, 226, 232, 236], "hold": [14, 15, 23, 43, 47, 58, 63, 67, 68, 69, 73, 75, 89, 92, 103, 106, 109, 117, 119, 125, 127, 128, 146, 177, 212, 226, 228, 232, 236, 249, 293], "singleton": [14, 59, 97, 235, 288], "adject": [14, 236], "heurist": [14, 21, 34, 59, 92, 94, 98, 209, 210, 223, 225, 228, 234, 235, 247, 283, 293], "commut": [14, 21, 40, 44, 47, 58, 59, 63, 67, 69, 90, 94, 103, 158, 165, 168, 169, 170, 180, 181, 186, 193, 200, 204, 207, 208, 209, 210, 212, 216, 223, 224, 226, 232, 242, 278, 279, 288], "law": [14, 47, 141, 184, 200, 204, 236], "xreplac": [14, 67, 98, 103, 191], "knowledg": [14, 66, 67, 68, 211, 232, 288, 291], "round": [14, 23, 33, 46, 48, 67, 71, 72, 73, 103, 154, 207, 211, 212, 223, 225, 236], "analyt": [14, 38, 72, 75, 92, 103, 141, 232, 283], "implicitli": [14, 21, 22, 23, 59, 67, 94, 203, 206, 234], "independ": [14, 15, 23, 32, 44, 46, 48, 58, 66, 67, 69, 75, 84, 92, 94, 96, 103, 117, 126, 127, 130, 131, 133, 135, 143, 145, 179, 186, 197, 202, 204, 206, 211, 212, 218, 219, 226, 228, 229, 232, 233, 234, 235, 236, 242, 247, 248, 268, 287, 288], "parsabl": 14, "iter": [14, 27, 30, 31, 32, 36, 46, 48, 56, 58, 59, 62, 63, 67, 68, 69, 70, 72, 75, 83, 97, 107, 122, 123, 125, 126, 127, 128, 130, 145, 149, 166, 181, 195, 202, 203, 204, 205, 207, 209, 212, 216, 217, 218, 219, 222, 228, 229, 232, 234, 235, 236, 237, 240, 248, 249, 250, 251, 253, 255, 261, 266, 280], "fuzzi": [14, 21, 23, 24], "noncomput": 14, "philosoph": 14, "OR": [14, 46, 70, 97, 209], "unevaluatedexpr": [14, 67, 216, 288], "surpris": [14, 21, 235], "north": 14, "riemann": [14, 69, 72, 73, 92, 203, 228, 242], "sphere": [14, 153, 261, 271], "behav": [15, 44, 46, 67, 68, 73, 75, 107, 212, 224, 228, 234, 237, 243, 289], "mapl": [15, 94, 205, 232, 287], "mathematica": [15, 48, 59, 109, 287, 289], "faq": 15, "introductori": [15, 19, 37, 38, 148, 206, 207, 212], "remaind": [15, 66, 67, 68, 107, 204, 206, 207, 210, 212, 232], "java": 15, "subtract": [15, 31, 40, 48, 59, 67, 71, 82, 107, 117, 125, 183, 204, 205, 206, 207, 209, 211, 212, 288, 293], "proper": [15, 58, 67, 94, 107, 121, 131, 190, 206, 207, 211, 216, 224, 232, 237, 248, 249, 268, 289], "alter": [15, 49, 58, 67, 191, 206, 216, 218, 235], "afterward": [15, 48, 67, 128, 135], "simultan": [15, 67, 73, 80, 98, 107, 202, 225], "var": [15, 25, 30, 46, 48, 66, 67, 71, 72, 90, 94, 97, 103, 117, 191, 202, 211, 215, 216, 228, 229, 255, 294], "rate": [15, 133, 199, 236, 268, 283], "short_lif": 15, "haven": 15, "160": [15, 110, 210], "ctimesd": 15, "relationship": [15, 17, 21, 48, 67, 72, 74, 94, 107, 130, 142, 165, 191, 197, 200, 206, 234], "runtimeerror": [15, 46, 48, 224, 235, 254], "compileflag": [15, 247], "glob": [15, 247], "exceed": [15, 133, 211], "stdin": [15, 250, 252], "nameerror": [15, 95, 250, 285], "__future__": [15, 19, 285, 292], "cl": [15, 21, 23, 34, 48, 58, 67, 94, 98, 181, 195, 207, 211, 232, 241, 250, 254, 267, 283, 292, 294], "dir": [15, 67, 110, 218, 223, 254], "__builtins__": 15, "__file__": [15, 258], "__name__": [15, 216, 258], "__package__": 15, "_greek": 15, "_latin": 15, "chi": [15, 75, 92, 153, 216, 226, 232, 236, 242], "eta": [15, 75, 92, 211, 216, 232, 233, 236], "iota": [15, 216], "kappa": [15, 201, 216, 236], "mu": [15, 75, 92, 107, 118, 120, 152, 216, 236, 242], "omega": [15, 48, 49, 58, 92, 103, 107, 122, 128, 130, 146, 149, 155, 157, 182, 191, 195, 196, 199, 201, 216, 223, 236], "omicron": [15, 216], "phi": [15, 58, 67, 68, 72, 75, 92, 96, 103, 107, 119, 148, 155, 164, 166, 201, 203, 211, 216, 232, 261, 271], "psi": [15, 72, 75, 92, 153, 164, 165, 171, 179, 211, 216, 242], "rho": [15, 69, 92, 103, 107, 134, 175, 216, 236, 242, 271], "sigma": [15, 59, 90, 92, 98, 103, 216, 219, 236], "tau": [15, 48, 92, 94, 103, 211, 216, 232], "theta": [15, 40, 67, 69, 73, 75, 92, 95, 103, 109, 119, 130, 149, 153, 191, 200, 201, 207, 211, 216, 219, 224, 235, 236, 261, 263, 266, 268, 271], "upsilon": [15, 216], "xi": [15, 23, 69, 92, 216, 232, 233, 234], "lastli": [15, 94, 111, 149, 232], "unit": [15, 23, 25, 26, 40, 44, 47, 67, 68, 72, 80, 81, 82, 94, 103, 107, 110, 115, 117, 119, 120, 125, 130, 131, 146, 148, 157, 182, 183, 184, 188, 190, 191, 197, 200, 202, 204, 207, 209, 211, 212, 214, 216, 224, 226, 229, 235, 237, 261, 263, 265, 270, 271, 278], "mnemon": [15, 225, 254], "osineq": 15, "reimport": 15, "restor": [15, 206, 228], "__": [15, 75, 94, 216, 236, 241], "press": [15, 47, 49, 51, 59, 68, 94, 98, 201, 210, 229, 234], "autocomplet": 15, "lose": [15, 203], "abil": [15, 21, 46, 103, 141, 211, 215, 232, 235, 287, 293], "f1": [15, 33, 58, 92, 94, 103, 117, 122, 131, 139, 148, 202, 207, 209, 212, 216, 218, 234], "f2": [15, 33, 67, 92, 103, 117, 122, 131, 139, 148, 184, 202, 209, 212, 216, 218, 234], "accuraci": [15, 19, 46, 67, 212, 289], "2000000000000002": 15, "py3k": 15, "20000000000000": 15, "sympyifi": 15, "worri": [15, 67, 288], "142857142857143": 15, "receiv": [15, 36, 50, 67, 68, 107, 122, 176, 211, 241], "fraction": [15, 67, 68, 71, 73, 83, 94, 103, 107, 123, 187, 206, 207, 209, 210, 213, 216, 218, 228, 229, 232, 234, 284], "interpret": [15, 22, 34, 36, 48, 58, 66, 67, 72, 73, 75, 80, 83, 94, 98, 100, 103, 107, 109, 121, 186, 202, 204, 211, 212, 216, 223, 229, 234, 235, 236, 241, 247, 248, 251, 257, 289], "000000000000": 15, "00": [15, 67, 107, 165, 175, 229, 254], "null": [15, 67, 103], "34": [15, 48, 59, 72, 80, 103, 107, 122, 163, 210, 215, 222, 228, 229], "3400000000000": 15, "250": [15, 107, 229], "143": [15, 127, 160, 201], "decim": [15, 23, 48, 67, 70, 71, 107, 109, 115, 206, 212, 287], "142857": 15, "25000000000000000000": 15, "14285278320312500000": 15, "realiz": [15, 50, 52, 58, 69, 97, 107, 135, 203, 204, 209, 236], "pad": [15, 48, 68, 69, 70, 82, 107], "inexact": [15, 36, 67, 207], "low": [15, 21, 22, 48, 67, 68, 75, 107, 126, 206, 209, 214, 216, 228, 248, 249, 254], "higher": [15, 19, 27, 46, 48, 67, 69, 71, 75, 78, 103, 195, 201, 203, 206, 209, 212, 218, 219, 223, 225, 228, 232, 234, 237, 255, 283], "engin": [15, 113, 147, 148, 198, 232, 292], "increas": [15, 32, 46, 47, 59, 65, 66, 67, 70, 71, 75, 98, 107, 108, 121, 130, 132, 165, 190, 191, 193, 199, 200, 206, 209, 211, 212, 218, 221, 225, 232, 236, 252, 254], "2000061035": 15, "highest": [15, 48, 61, 96, 121, 203, 212, 219, 229, 232], "hopefulli": [15, 20, 92], "unsimplifi": [15, 225], "12345678901234567890": 15, "big_trig_ident": 15, "ab": [15, 45, 48, 49, 66, 67, 68, 71, 72, 73, 75, 79, 80, 90, 92, 97, 98, 103, 113, 119, 148, 181, 204, 207, 211, 212, 216, 229, 231, 234, 235, 236, 238, 242, 251, 254, 257, 267, 293], "1000": [15, 48, 51, 67, 68, 71, 100, 107, 148, 185, 186, 187, 188, 201, 215, 216, 225, 255], "gave": [15, 67, 254], "impress": 15, "91": [15, 49, 210, 215, 222, 236], "4e": [15, 48, 234], "nearli": [15, 107, 225], "snippet": [15, 48], "expr_modifi": 15, "__main__": [15, 48, 289], "declar": [15, 21, 31, 48, 80, 92, 103, 109, 118, 131, 133, 148, 160, 205, 216, 223, 226, 231, 232, 233, 236, 249], "2x": [15, 30, 67, 75, 92, 109, 228, 229, 235, 236, 282, 285, 293], "syntaxerror": [15, 109], "asin": [15, 73, 75, 81, 213, 216, 226, 228, 232, 236, 293], "arcsin": [15, 73, 213, 216, 236], "arcco": [15, 73, 216], "expon": [15, 27, 36, 45, 48, 67, 68, 73, 74, 75, 92, 94, 100, 107, 115, 117, 187, 204, 205, 206, 212, 213, 216, 225, 228, 232, 235, 240, 251, 293], "half": [15, 23, 25, 48, 67, 68, 72, 73, 75, 77, 83, 94, 96, 103, 107, 109, 110, 130, 150, 153, 178, 201, 207, 209, 211, 212, 224, 225, 226, 228, 236, 247, 254], "denomin": [15, 67, 71, 75, 94, 107, 117, 123, 204, 206, 207, 209, 211, 212, 215, 216, 225, 226, 228, 229, 232, 234, 293], "wild": [15, 67, 228, 254], "sq": [15, 229], "is_pow": [15, 48, 67, 73], "is_rat": [15, 21, 211, 254], "bracket": [15, 23, 33, 35, 59, 67, 75, 179, 181, 191, 216], "notat": [15, 19, 27, 31, 34, 36, 55, 59, 60, 66, 67, 68, 72, 75, 92, 100, 103, 109, 117, 127, 179, 190, 191, 196, 200, 203, 216, 223, 228, 235, 241, 242, 254, 268, 283], "curli": [15, 131, 216], "suppli": [15, 33, 34, 46, 47, 48, 58, 59, 67, 69, 77, 81, 103, 107, 122, 125, 126, 127, 128, 133, 135, 138, 143, 144, 146, 154, 181, 195, 200, 202, 211, 213, 218, 225, 232, 248, 254, 255, 261, 263, 266], "powsimp": [15, 67, 73, 225, 228], "deep": [15, 23, 67, 73, 97, 98, 212, 223, 228, 236, 288], "measur": [15, 40, 73, 75, 83, 99, 121, 146, 161, 170, 175, 183, 186, 188, 190, 191, 195, 197, 200, 212, 224, 225, 228, 236, 260, 261, 264, 265, 267, 268, 270], "join": [15, 29, 59, 67, 68, 80, 98, 110, 111, 216, 228, 232, 234, 237, 254, 258], "autoexpand": [15, 228], "violat": [15, 131, 201, 213, 228], "behind": [16, 37, 118, 131, 145, 185, 205, 225, 228, 232, 235, 278, 285], "decis": [16, 37, 67, 73, 94, 225, 234, 249], "opinion": [16, 37], "pitfal": [16, 23, 200, 206, 285, 290, 293], "glossari": 16, "arbitrarili": [17, 27, 46, 67, 80, 107, 209, 211, 223, 226, 232, 233, 236], "six": [17, 111, 216, 229, 235, 236], "bias": 17, "toward": [17, 48, 67, 75, 203, 223, 235], "unambigu": [17, 216, 232, 257], "univari": [17, 27, 36, 46, 66, 67, 73, 90, 94, 203, 204, 206, 207, 210, 211, 212, 213, 218, 229, 231, 234, 236], "linear": [17, 23, 28, 30, 32, 33, 36, 47, 48, 59, 66, 67, 68, 70, 71, 75, 80, 90, 92, 94, 96, 98, 100, 102, 110, 114, 117, 124, 125, 126, 128, 133, 135, 136, 141, 143, 147, 148, 153, 175, 178, 179, 190, 195, 202, 203, 207, 209, 211, 212, 214, 222, 224, 226, 229, 232, 233, 234, 235, 254, 276, 278, 294], "undetermin": [17, 67, 103, 212, 218, 232, 234], "nonlinear": [17, 28, 34, 36, 66, 148, 212, 232, 234, 235], "sol": [17, 33, 103, 229, 232, 233, 234], "insuffici": [17, 98], "elimin": [17, 19, 32, 48, 63, 67, 97, 99, 103, 121, 207, 214, 215, 217, 219, 228, 232, 234, 235, 242, 249, 289], "nsolv": [17, 27, 33, 35, 36, 148, 234], "z_eq": 17, "zsol": 17, "906425478894557": 17, "sol0": 17, "90642547889456": 17, "reduce_inequ": [17, 29, 231, 234], "classifi": [18, 103, 206, 232, 233, 235, 236], "former": [18, 48, 67, 72, 131, 209, 211, 212, 229, 254], "catch": [18, 67, 232, 247, 289], "naiv": [18, 58, 64, 67, 92, 98, 103, 107, 186, 226, 234, 235, 242], "theori": [18, 23, 49, 50, 56, 57, 58, 59, 65, 67, 68, 72, 75, 96, 104, 126, 131, 145, 147, 160, 178, 181, 191, 195, 205, 209, 210, 211, 215, 229, 251, 261, 279, 287], "is_subset": [18, 224], "odd": [18, 21, 30, 41, 43, 44, 45, 55, 59, 67, 68, 72, 73, 75, 97, 106, 107, 118, 201, 211, 212, 216, 234], "appliedpred": [18, 41, 42, 43], "analysi": [19, 48, 49, 58, 67, 68, 73, 114, 133, 145, 146, 149, 203, 212, 226, 229, 236], "vari": [19, 46, 48, 67, 81, 83, 110, 115, 121, 126, 146, 179, 200, 223, 234, 254, 268], "hope": [19, 58, 121, 203], "envis": 19, "small": [19, 30, 48, 49, 50, 58, 59, 67, 71, 72, 94, 97, 103, 107, 117, 135, 139, 148, 178, 201, 202, 207, 209, 210, 211, 228, 229, 234, 254, 282, 285, 287], "x_": [19, 30, 34, 48, 57, 67, 68, 72, 109, 207, 209, 212, 218, 229, 232, 237], "taylor": [19, 67, 73, 131, 145, 148, 207, 209, 212, 213, 223, 232], "df": [19, 69, 232], "c_": [19, 28, 34, 68, 90, 92, 200, 204, 232], "grid": [19, 46, 47, 115, 202], "f_": [19, 67, 72, 75, 94, 143, 144, 145, 209, 215, 216, 226, 232], "constraint": [19, 29, 103, 111, 117, 125, 126, 127, 130, 131, 133, 134, 135, 137, 141, 143, 144, 145, 148, 213, 278], "formul": [19, 32, 125, 134, 135, 141, 143, 144, 181, 200], "assess": 19, "brute": [19, 225, 229], "frequent": [19, 58, 211, 223, 235], "treatment": [19, 92, 212], "shall": [19, 58, 92, 131, 148, 223, 226, 288], "truncat": [19, 59, 67, 103, 107, 111, 186, 202, 213, 215, 218, 219], "approx": [19, 28, 33, 67, 94], "lowest": [19, 48, 58, 63, 107, 203, 218, 235], "2h": 19, "print_funct": 19, "x0": [19, 34, 46, 48, 57, 67, 75, 86, 88, 90, 91, 107, 153, 206, 217, 218, 223, 228, 232, 234, 236, 254, 283], "x_0": [19, 57, 58, 68, 89, 90, 91, 209, 218, 229, 232, 236, 283], "fip1": 19, "fip2": 19, "c_0": [19, 68, 90], "c_1": [19, 34, 68, 90, 92, 223, 226, 232], "c_2": [19, 34, 50, 92, 223, 232], "2f": [19, 294], "sum": [19, 21, 30, 48, 56, 59, 66, 67, 70, 72, 75, 80, 82, 90, 92, 94, 96, 97, 98, 100, 103, 107, 113, 128, 143, 160, 164, 167, 175, 178, 180, 181, 201, 203, 204, 206, 207, 211, 212, 213, 216, 218, 219, 221, 223, 225, 226, 228, 229, 232, 234, 235, 236, 237, 238, 240, 242, 251, 254, 293], "c_i": [19, 92, 223, 226, 232], "nth": [19, 67, 72, 75, 96, 107, 207, 212, 213, 222, 228, 232, 236], "degre": [19, 27, 49, 50, 58, 65, 66, 72, 75, 83, 94, 98, 103, 110, 113, 115, 117, 125, 126, 130, 131, 132, 135, 141, 149, 153, 200, 203, 204, 207, 209, 211, 212, 215, 219, 222, 225, 226, 228, 229, 232, 234, 236, 261, 278], "x_i": [19, 23, 57, 75, 94, 103, 204, 207, 209, 212, 213, 216, 235], "m11": [19, 236], "m12": [19, 236], "m13": 19, "m21": [19, 236], "m22": [19, 236], "m23": 19, "m31": 19, "m32": 19, "m33": [19, 107], "3x3": [19, 32, 82, 103, 266], "invert": [19, 32, 36, 44, 67, 68, 98, 100, 103, 117, 135, 183, 204, 206, 207, 211, 212, 232, 234, 235, 242, 289], "inv": [19, 32, 59, 99, 103, 125, 126, 130, 133, 138, 139, 148, 170, 205, 232], "fim1": 19, "eight": [19, 36, 216], "dfdxcheck": 19, "c3": [19, 34, 50, 70, 96, 98, 100, 107, 232, 236, 267, 294], "c5": [19, 232], "c7": [19, 58], "5040": [19, 72, 89, 212, 213], "tediou": [19, 94], "certainli": [19, 79, 109, 251], "devis": 19, "xn": [19, 23, 207], "x_n": [19, 23, 49, 57, 68, 89, 103, 204, 207, 209, 212, 229, 235], "fn": [19, 34, 94, 103, 203, 212], "fnm1": 19, "fnm2": 19, "dth": 19, "discrit": 19, "bengt": [19, 46], "fornberg": [19, 46], "weight": [19, 67, 75, 82, 84, 94, 96, 103, 165, 228, 283], "gap": [20, 58, 107, 131, 213], "matur": [20, 21, 234, 235], "finit": [20, 21, 31, 44, 48, 53, 54, 55, 58, 66, 67, 68, 70, 71, 94, 96, 97, 167, 191, 201, 204, 207, 210, 212, 213, 216, 218, 219, 222, 224, 229, 231, 232, 235, 254, 261, 263, 273, 284, 287, 293], "obviou": [21, 22, 23, 32, 50, 58, 66, 203, 206, 215, 229, 287], "refus": [21, 293], "roughli": [21, 67, 68, 108, 132, 232, 255], "possibli": [21, 48, 59, 65, 67, 92, 94, 107, 184, 207, 209, 223, 224, 234, 249, 254, 283, 289], "infinit": [21, 23, 29, 30, 44, 66, 67, 68, 71, 72, 73, 80, 81, 94, 103, 107, 117, 137, 167, 186, 203, 211, 216, 217, 218, 221, 222, 223, 224, 228, 229, 231, 234, 241, 254, 293, 294], "is_neg": [21, 23, 207], "unknow": 21, "resolv": [21, 22, 27, 29, 30, 31, 32, 33, 34, 35, 67, 94, 225, 228, 234], "undecid": [21, 23, 31, 103, 206, 235, 289], "conclud": [21, 75, 90, 133, 197, 223, 234, 270], "mix": [21, 39, 66, 73, 98, 103, 109, 190, 206, 207, 212, 216, 235, 238, 240, 242, 255], "slow": [21, 23, 27, 32, 63, 67, 71, 94, 108, 121, 153, 190, 200, 206, 207, 216, 217, 218, 219, 228, 232, 234, 235, 247, 248, 293], "indetermin": [21, 22, 67, 103, 209, 221, 234], "contradict": 21, "infer": [21, 42, 43, 59, 67, 94, 206, 215, 216, 221, 226, 232, 248], "presum": [21, 92, 206, 226, 249], "singletonregistri": [21, 67], "x1": [21, 23, 33, 34, 57, 67, 72, 148, 153, 206, 207, 217, 218, 228, 232, 234, 236, 254], "x2": [21, 33, 57, 67, 72, 148, 153, 206, 218, 232, 234, 236], "posifi": [21, 228], "_x": [21, 23, 103, 142, 190, 196, 199, 200, 207, 213, 228, 232, 248], "rep": [21, 58, 63, 67, 165, 203, 205, 206, 207, 210, 211, 212, 225, 228, 257], "among": [21, 47, 48, 49, 51, 58, 59, 68, 95, 108, 212, 232, 237, 240, 242, 265], "behaviour": [21, 92, 97, 122, 209, 213, 219, 222], "symbolc": 21, "aris": [21, 22, 67, 72, 92, 94, 178, 200, 206, 211], "implicit": [21, 34, 48, 65, 67, 109, 126, 127, 130, 149, 202, 232, 234, 238, 241, 248, 249, 261, 264, 271, 285], "tailor": 21, "assumptions0": [21, 67], "extended_neg": [21, 67], "extended_nonneg": [21, 67], "extended_nonposit": [21, 67], "extended_nonzero": [21, 67, 216], "extended_posit": [21, 67], "extended_r": [21, 44, 67, 216, 231, 235], "hermitian": [21, 32, 44, 67, 98, 99, 103, 164, 170, 181, 216], "irrat": [21, 27, 44, 46, 67, 107, 206, 212, 216, 224, 287], "noninteg": [21, 44, 67, 206, 216], "nonposit": [21, 44, 67, 72, 75, 148], "nonzero": [21, 23, 44, 45, 66, 67, 82, 103, 119, 204, 205, 206, 207, 216, 219, 235], "antihermitian": [21, 44, 67], "mathbb": [21, 23, 30, 44, 49, 50, 58, 66, 67, 68, 73, 75, 92, 98, 103, 145, 201, 203, 204, 206, 207, 209, 211, 212, 215, 223, 224, 226, 229, 235, 236, 293], "ii": [21, 73, 92, 94, 107, 212, 216, 224, 232, 235, 238], "cup": [21, 212, 224, 235], "pm": [21, 27, 28, 30, 40, 66, 92, 94, 204, 215, 223, 229, 232], "yi": 21, "composit": [21, 44, 47, 56, 58, 59, 67, 68, 85, 87, 94, 107, 110, 207, 209, 212, 215, 228, 235, 250], "2k": [21, 67, 72, 92, 107, 229], "le": [21, 49, 63, 67, 75, 92, 98, 107, 140, 209, 226, 236], "commutative_properti": [21, 67], "skew": [21, 90, 103, 107, 236], "hermitian_matrix": 21, "complex_numb": [21, 44, 67], "algebraic_numb": [21, 44, 67], "transcendental_numb": [21, 67], "extended_real_number_lin": 21, "real_numb": [21, 44], "imaginary_numb": [21, 44, 67], "rational_numb": [21, 44], "irrational_numb": [21, 44, 67], "parity_": [21, 67], "28mathemat": [21, 59, 67, 103, 224], "prime_numb": [21, 67, 107], "composite_numb": [21, 67], "positive_real_numb": 21, "negative_numb": [21, 67], "inconsist": [21, 23, 41, 43, 66, 186, 191, 195, 199, 228, 232, 235], "inconsistentassumpt": 21, "deal": [21, 48, 66, 67, 71, 79, 87, 92, 94, 114, 121, 126, 127, 131, 197, 199, 200, 204, 209, 212, 229, 234, 245, 255, 257, 265, 270, 285, 287, 293], "is_zero_matrix": [21, 98, 205], "generalis": [21, 72, 75, 92, 117, 203], "gaussian": [21, 75, 94, 103, 107, 151, 185, 209, 212, 229, 234, 236, 278, 289], "notion": [21, 47, 186, 189, 203, 235, 265, 270], "chain": [21, 23, 48, 58, 63, 67, 75, 84, 108, 199, 211, 236], "superset": [21, 46, 56, 62, 70, 148, 206, 224, 234], "vanilla": 21, "attach": [21, 59, 61, 92, 108, 110, 125, 126, 142, 200, 248, 250, 255], "is_commut": [21, 94, 170, 179, 254], "is_complex": [21, 67], "is_finit": [21, 67], "permit": [21, 59, 69, 73, 97, 107, 202], "formal": [21, 30, 47, 66, 67, 75, 92, 97, 150, 186, 206, 209, 220, 223, 273], "n1": [21, 48, 58, 67, 68, 131, 148, 150, 154, 190, 202, 229, 236, 261], "n2": [21, 48, 58, 67, 68, 148, 150, 154, 202, 229, 236], "misunderstand": 21, "is_nonneg": [21, 23, 207], "meaning": [21, 41, 43, 47, 68], "neither": [21, 22, 44, 67, 155, 176, 202, 212, 223, 224, 225, 232, 242, 255, 261, 270, 293], "alon": [21, 68, 95, 209, 232, 234, 241, 254, 287, 288], "meet": [21, 68, 223], "criteria": [21, 67, 288], "noncommut": [21, 67, 90, 288], "finiteset": [21, 31, 46, 47, 224, 235, 236, 294], "s1": [21, 50, 58, 66, 80, 83, 90, 117, 192, 203, 212, 219, 229, 254, 264], "s2": [21, 50, 58, 59, 66, 80, 83, 117, 192, 203, 212, 219, 223, 229, 254, 264], "bool": [21, 40, 46, 48, 50, 63, 65, 67, 68, 70, 73, 94, 95, 97, 98, 100, 103, 107, 109, 126, 127, 130, 164, 165, 193, 196, 202, 211, 212, 214, 216, 217, 218, 223, 224, 228, 231, 236, 248, 249, 254, 255, 261, 264, 285], "plai": [21, 66, 133, 143, 229, 285, 287, 288], "role": [21, 73, 214], "is_finite_set": 21, "zero_matrix": 21, "setsymbol": 21, "is_compar": [21, 67], "capitalis": 21, "4142135623731": [21, 33, 216, 234], "predict": [21, 181, 228, 254], "expreal": 21, "fuzzy_and": [21, 22, 23], "fuzzy_or": [21, 22], "is_extended_nonneg": 21, "classmethod": [21, 23, 40, 42, 43, 48, 51, 56, 58, 59, 61, 62, 67, 73, 74, 75, 82, 98, 103, 117, 128, 130, 167, 178, 179, 181, 205, 207, 211, 212, 216, 224, 242, 247], "is_extended_r": 21, "elif": [21, 22, 23, 73], "is_infinit": 21, "is_extended_neg": 21, "is_extended_posit": [21, 22], "_eval_is_finit": 21, "is_extended_nonposit": 21, "_eval_is_algebra": 21, "is_nonzero": [21, 82], "_eval_is_integ": 21, "_eval_is_zero": [21, 23], "pick": [21, 68, 72, 145, 175, 177, 293], "__new__": [21, 23, 48, 58, 67, 288], "importantli": [21, 23, 213, 251], "reject": [21, 22, 107, 229, 257], "_eval_is_": 21, "is_algebra": [21, 67, 207], "interfer": [21, 216], "determinist": [21, 58, 94, 107, 209, 210], "reach": [21, 107, 117, 211, 212, 232], "claus": [21, 97], "flow": [21, 211], "inner": [21, 34, 66, 92, 103, 164, 167, 168, 173, 175, 176, 179, 181, 191, 195, 205, 211, 218, 261, 278], "optimis": [21, 232], "briefli": [21, 204, 209], "default_assumpt": 21, "_ask": 21, "_eval_i": 21, "enumer": [21, 37, 51, 56, 59, 62, 70, 74, 92, 97, 107, 211, 212, 226, 251, 254, 273], "randomis": [21, 244, 280], "unresolv": 21, "factrul": 21, "_assume_rul": 21, "preprocess": [21, 94, 214], "defined_fact": 21, "full_impl": 21, "defaultdict": [21, 67, 254], "precomput": [21, 72, 107, 255], "static": [21, 40, 48, 58, 59, 61, 67, 73, 80, 81, 82, 83, 100, 111, 133, 141, 202, 216, 222, 224, 236, 248], "knowabl": 21, "stdfactkb": 21, "_eval_is_r": [21, 23, 212], "_assumpt": [21, 67], "amongst": [21, 234], "indirectli": 21, "manifest": [21, 204], "jointli": 21, "fundament": [21, 23, 46, 49, 57, 85, 92, 94, 103, 185, 186, 206, 211, 229, 232, 236, 289], "theoret": [21, 47, 49, 58, 68, 72, 210, 211, 226, 236, 285], "isposit": 22, "xpo": 22, "xneg": 22, "strictgreaterthan": [22, 67, 216], "analogu": [22, 44, 66, 81, 206, 207], "piecewis": [22, 23, 48, 66, 72, 75, 94, 97, 110, 179, 216, 218, 219, 234, 235, 236, 255, 283], "p2": [22, 58, 59, 66, 77, 79, 80, 81, 82, 83, 110, 117, 122, 125, 128, 148, 195, 202, 206, 207, 209, 213, 225, 236], "nonetyp": [22, 48, 130], "quirk": 22, "both_posit": 22, "falsei": 22, "both_positive_bett": 22, "negat": [22, 23, 44, 67, 73, 97, 117, 191, 205, 207, 209, 212], "fuzzy_not": [22, 23], "both_positive_best": 22, "silent": [22, 71, 107, 248], "bitwis": [22, 70, 97], "footnot": [22, 186, 288, 289, 292], "si": [23, 75, 91, 92, 154, 183, 184, 185, 186, 187, 188, 216], "dig": [23, 48, 288], "handler": [23, 41, 42, 43, 44, 45, 67, 74, 103], "spectrum": 23, "np": [23, 34, 72, 90, 107, 131, 248, 255], "arang": [23, 248, 282], "arrai": [23, 28, 32, 33, 34, 48, 58, 59, 63, 64, 68, 75, 94, 98, 100, 103, 107, 108, 115, 127, 148, 178, 202, 205, 207, 212, 216, 235, 236, 239, 241, 242, 243, 248, 249, 251, 255, 276, 289], "cosin": [23, 67, 73, 75, 82, 94, 122, 125, 191, 200, 212, 213, 219, 225, 236, 261, 293], "todai": [23, 203], "operatornam": [23, 40, 72, 73, 75, 92, 94, 201, 204, 212, 216, 219, 224, 226, 234], "modern": [23, 48, 203, 210, 216], "recal": [23, 67, 103, 209, 211, 226, 285, 287, 288, 294], "antipattern": [23, 286], "stai": [23, 211], "trig": [23, 67, 94, 212, 216, 225, 228, 293], "wouldn": 23, "cheap": [23, 67, 107], "as_two_term": [23, 67], "hadn": 23, "wors": [23, 97, 228], "expand_trig": [23, 67, 282], "mid": [23, 49, 68, 71, 111, 224, 229], "troubl": [23, 75], "bigger": [23, 48, 67, 72, 103, 226, 232, 293], "deduc": [23, 48, 92, 97, 226, 287], "disallow": [23, 67, 212, 217, 228, 250], "great": [23, 150, 213, 216, 229, 255], "simplest": [23, 34, 47, 97, 103, 107, 108, 201, 202, 213, 217, 225, 228, 232, 283, 293], "\u03c0": [23, 71, 153, 216, 235, 283, 287, 293, 294], "as_independ": [23, 67, 235], "coeff": [23, 67, 69, 97, 148, 207, 211, 212, 222, 228, 232, 234, 242, 293], "apart": [23, 40, 58, 63, 67, 71, 73, 94, 197, 204, 207, 209, 212, 215, 218, 229, 235, 242, 266, 268, 288], "is_even": [23, 55, 58, 59], "nonreal": [23, 33, 234], "cosh": [23, 67, 73, 75, 86, 92, 213, 216, 217, 226, 228, 234, 289, 293], "5919532755215": 23, "_eval_is_nonneg": 23, "exercis": [23, 58, 251, 286, 293], "_eval_is_posit": 23, "as_add": [23, 67], "pi_": 23, "fuzzy_": 23, "deduct": [23, 48], "subtl": [23, 225], "nontrivi": [23, 58, 67, 107], "_eval_evalf": [23, 212], "prec": [23, 33, 67, 77, 83, 107, 115, 201, 207, 212, 213, 228, 234], "dp": [23, 48, 67, 70, 75, 107, 206, 207, 234, 250], "53": [23, 68, 70, 103, 150, 204, 206, 207], "459697694131860": 23, "hook": [23, 108, 216], "_eval_rewrit": [23, 67], "rewritten": [23, 67, 72, 73, 75, 94, 131, 178, 185, 223, 228, 232, 234, 293], "caller": 23, "ve": [23, 133], "nonintegr": 23, "iff": [23, 44, 59, 68, 97, 103, 200, 203, 211, 226, 229, 247], "isint": 23, "happi": 23, "demand": [23, 39], "_eval_expand_": 23, "expand_": 23, "predefin": [23, 69, 148, 206, 216, 217, 228, 235, 242, 261, 266], "expand_log": [23, 48, 67, 228], "_eval_expand_trig": 23, "sophist": [23, 108, 234], "th": [23, 40, 49, 58, 59, 65, 68, 69, 71, 72, 73, 75, 96, 97, 103, 107, 126, 207, 209, 211, 212, 218, 221, 226, 229, 232, 234, 236, 237, 242], "x_1": [23, 49, 57, 58, 68, 72, 89, 103, 176, 204, 207, 209, 212, 218, 229, 235], "ldot": [23, 30, 49, 57, 58, 66, 67, 68, 72, 75, 92, 107, 111, 186, 201, 203, 204, 207, 209, 211, 216, 219, 223, 226, 229, 234, 237, 293], "x_k": [23, 68, 209], "dy": [23, 25, 48, 69, 84, 103, 110, 120, 148, 212, 216, 229, 232, 233, 283], "dz": [23, 110, 120, 226], "varion": 23, "middl": [23, 75, 83, 92, 103, 111, 161, 202, 226, 293], "iverson": 23, "printmethod": [23, 216], "latexprint": 23, "_latex": [23, 216], "_print": [23, 216], "_m": [23, 75], "_n": [23, 68, 72, 75, 94, 212, 226, 235], "arcversin": 23, "aversin": 23, "im": [23, 45, 67, 73, 92, 101, 203, 216, 217, 224, 232, 289], "sinh": [23, 46, 67, 71, 73, 75, 86, 92, 213, 216, 217, 226, 293], "expand_complex": [23, 67], "analog": [23, 27, 32, 60, 66, 68, 72, 146, 199, 200, 203, 204, 205, 209, 221, 237, 254], "vers": 23, "geometr": [23, 69, 76, 77, 78, 79, 80, 81, 82, 83, 84, 103, 150, 200, 203, 210, 236, 289], "angl": [23, 40, 73, 75, 76, 77, 78, 80, 81, 82, 83, 113, 119, 125, 130, 131, 133, 134, 135, 136, 142, 145, 150, 153, 154, 155, 178, 186, 191, 199, 200, 201, 216, 225, 235, 261, 263, 266, 293], "distanc": [23, 47, 51, 59, 77, 80, 81, 82, 83, 110, 111, 120, 121, 125, 135, 136, 150, 154, 184, 195, 197, 270], "rightmost": [23, 181], "scientificamerican": 23, "uniti": [23, 73, 75, 92, 176, 211], "secret": [23, 68], "teacher": 23, "taught": [23, 94], "nr": 23, "sake": [23, 72, 229], "simplic": [23, 226, 232], "divisor": [23, 44, 58, 67, 68, 103, 107, 203, 204, 206, 207, 209, 210, 211, 212, 215], "hardwar": [23, 48], "regard": [23, 49, 68, 75, 95, 149, 181, 203, 204, 218, 234, 235], "c99codeprint": [23, 48, 216], "cxx11codeprint": [23, 216], "cfunction": 23, "e2": [23, 46, 67, 70, 77, 84, 94, 103, 107, 115, 131, 206, 211, 223, 232, 235, 236, 254], "93accumulate_oper": 23, "fused_multipli": 23, "93add": 23, "ccode": [23, 48, 216, 241, 249], "cxxcode": [23, 48, 216], "_ccode": [23, 216], "_y": [23, 29, 142, 190, 196, 199, 200], "_z": [23, 94, 142, 190, 199, 200, 236], "_cxxcode": [23, 216], "std": [23, 48, 216, 236], "28318530717959": 23, "trigonometricfunct": 23, "inversetrigonometricfunct": 23, "reciprocaltrigonometricfunct": 23, "bypass": [23, 232], "fragil": 23, "prone": [23, 30, 48, 67], "task": [24, 28, 37, 73, 141, 142, 148, 206, 211, 283, 290], "deeper": [24, 240, 288], "explor": [24, 143, 144, 202, 211, 251, 293], "textbook": 25, "dc": [25, 117, 144], "transferfunct": [25, 114, 115, 117], "unstabl": [25, 113], "impuls": [25, 117], "respons": [25, 66, 67, 117, 131, 202, 249], "subpart": 25, "unknwon": 25, "tf": [25, 117, 255], "from_zpk": [25, 117], "dc_gain": [25, 117], "reconstruct": [25, 68, 103, 209, 229, 288], "is_stabl": [25, 117], "lie": [25, 27, 59, 69, 81, 82, 83, 212, 236, 272, 279], "inverse_laplace_transform": [25, 94], "to_expr": [25, 89, 90, 91, 117], "impulse_respons": 25, "theorem": [25, 27, 36, 55, 68, 72, 75, 77, 83, 94, 98, 103, 107, 120, 121, 133, 181, 190, 199, 203, 206, 209, 223, 226, 229, 235], "spring": [25, 107, 122, 125, 126, 130, 131, 136], "damper": [25, 125, 126, 130, 131, 136], "laplace_transform": [25, 94, 117], "laplace_initial_cond": [25, 94], "laplace_correspond": [25, 94], "2y": [25, 209, 229, 232, 235, 287], "dt": [25, 34, 69, 75, 135, 148, 190, 191, 193, 199, 200, 212, 232, 293], "ky": 25, "2u": 25, "quad": [25, 66, 67, 69, 71, 75, 94, 98], "bigg": 25, "nocond": [25, 94], "from_rational_express": [25, 117], "signal": [25, 75, 97, 107, 115, 117, 148, 209, 288], "bmatrix": [25, 34, 40, 98, 100, 103, 135, 143, 144, 145, 190, 191, 200, 229], "2t": [25, 72], "5e": 25, "laplac": [25, 94, 103, 114, 115, 117, 236], "mimo": [25, 114, 117], "visualis": 25, "1st": [25, 46, 59, 107, 117, 232, 233, 257, 283], "analys": [25, 47, 115, 117, 148, 236], "bode": 25, "magnitud": [25, 40, 48, 66, 67, 71, 75, 108, 110, 111, 113, 115, 128, 135, 148, 179, 188, 191, 197, 200, 202, 261, 268, 270], "2nd": [25, 46, 59, 68, 107, 117, 148, 232, 237, 254], "applyfunc": [25, 98, 99, 103, 139, 191, 237], "transferfunctionmatrix": [25, 114, 117], "from_matrix": [25, 40, 117, 205], "lti": [25, 114, 115], "num_input": [25, 117], "num_output": [25, 117], "elem_pol": [25, 117], "elem_zero": [25, 117], "pole_zero_plot": [25, 115], "png": [25, 34, 47, 95, 103, 110, 111, 113, 115, 196, 202, 216, 219], "hire": [25, 34, 103, 110, 111, 113, 115, 202, 219], "tf1": [25, 115, 117], "step_response_plot": [25, 115], "tf2": [25, 117], "bode_magnitude_plot": [25, 115], "bode_phase_plot": [25, 115], "arrang": [25, 59, 117, 126, 146, 148, 225, 229, 242], "loop": [25, 27, 30, 34, 47, 48, 107, 117, 134, 191, 202, 213, 216, 232, 251, 254, 288], "ratio": [25, 44, 57, 58, 66, 67, 71, 72, 75, 77, 80, 81, 82, 83, 99, 107, 117, 154, 186, 216, 225, 228, 234], "diagram": [25, 48, 56, 96, 110, 134, 135, 136, 141, 161, 241, 266, 288], "plant": [25, 117], "p_mat": 25, "c_mat": 25, "opposit": [25, 27, 63, 83, 97, 98, 122, 204, 207, 224, 228, 235, 243, 254, 261, 263, 293], "doit": [25, 66, 67, 69, 72, 73, 75, 94, 100, 117, 158, 160, 162, 173, 175, 178, 179, 181, 191, 201, 212, 218, 223, 228, 232, 233, 236, 238, 261, 264, 265, 267, 268, 283, 288], "tfm_feedback": 25, "mimofeedback": [25, 114, 117], "g1": [25, 48, 52, 57, 58, 92, 103, 117], "g2": [25, 48, 52, 57, 58, 92, 96, 103, 117], "g3": [25, 58, 117], "g4": [25, 117], "h1": [25, 47, 128], "h2": [25, 128], "h3": 25, "sys1": [25, 117], "sys2": [25, 117], "sys3": 25, "sys4": 25, "sys5": 25, "sys6": 25, "193": [25, 103, 115], "873": 25, "1644": 25, "1484": 25, "712": [25, 94], "testbook": 25, "vssut": 25, "ac": [25, 40, 48, 59, 79, 113, 128, 146, 158, 236, 254, 257], "classic": [26, 34, 46, 73, 75, 103, 167, 183, 191, 200, 203, 278], "continuum": [26, 38, 278], "optic": [26, 152, 153, 154, 155, 278], "bx": [27, 28, 92, 236, 242], "yield": [27, 29, 30, 31, 32, 34, 35, 46, 48, 58, 67, 68, 72, 75, 91, 92, 107, 110, 117, 123, 175, 201, 204, 209, 211, 212, 217, 218, 223, 224, 225, 228, 229, 234, 251, 254, 289], "4ac": [27, 28, 229], "2a": [27, 28, 236], "quadrat": [27, 30, 67, 68, 94, 107, 203, 207, 211, 212, 229, 234, 236], "five": [27, 30, 47, 56, 92, 113, 216, 229], "rootof": [27, 73, 212], "ill": [27, 184], "spuriou": [27, 209, 234], "interv": [27, 29, 31, 34, 44, 46, 58, 67, 71, 73, 75, 76, 77, 80, 83, 92, 94, 97, 107, 167, 176, 205, 207, 209, 211, 212, 219, 222, 224, 231, 235, 236, 294], "irreduc": [27, 204, 207, 209, 211, 212, 215, 236, 242, 293], "reveal": [27, 30, 32, 48, 107, 235, 288], "cubic": [27, 75, 203, 212, 229, 234], "quartic": [27, 77, 212, 234], "fourth": [27, 67, 68, 204, 232, 283], "687": 27, "144": [27, 36, 72, 94, 201], "emphas": [27, 66], "quintic": [27, 212, 234], "fifth": 27, "techniqu": [27, 31, 32, 34, 49, 62, 92, 94, 216, 218, 228, 232, 235, 289], "abel": [27, 36, 103], "ruffini": [27, 36, 103], "expression_expand": 27, "symbolic_expand": 27, "cube": [27, 46, 48, 51, 58, 60, 73, 94, 209, 210, 229, 235, 271], "nois": 27, "neglig": 27, "compon": [27, 47, 48, 63, 67, 69, 82, 94, 100, 103, 118, 125, 128, 130, 141, 142, 146, 153, 178, 183, 190, 191, 197, 198, 199, 200, 201, 202, 203, 204, 205, 212, 214, 236, 238, 241, 242, 251, 254, 261, 264, 267, 268], "18482169793536e": 27, "55872552179222e": 27, "contrarili": 27, "rq0": 27, "rq1": 27, "rq2": 27, "rq3": 27, "237": [27, 210], "349745826211722": 27, "438990337475312": 27, "wilkinson": [27, 98], "expression_complex": 27, "symbolic_complex": 27, "expression_complex_poli": 27, "travers": [27, 83, 107, 123, 212, 225, 241, 251, 288], "my_real_root": 27, "my_root": 27, "324": [27, 107, 210], "fifth_ord": 27, "16730397826142": 27, "181232444469875": 27, "08395410131771": 27, "764884433600585": 27, "352471546031726": 27, "polyerror": [27, 209, 212], "unsolvablefactorerror": [27, 212, 234], "complexrootof": [27, 67, 103, 207, 212, 232], "fifth_order_solv": 27, "167303978": 27, "1812324445": 27, "083954101": 27, "7648844336": 27, "352471546": 27, "sole": 27, "croot": 27, "r0": [27, 212], "r1": [27, 40, 77, 80, 96, 110, 111, 154, 191, 197, 212, 261], "r2": [27, 40, 69, 80, 96, 98, 110, 111, 154, 191, 212, 216, 228, 261], "r3": [27, 40, 96, 110, 111, 228], "r4": [27, 96, 110], "robustli": 27, "diophantin": [28, 29, 107, 209, 230, 273], "guidanc": 28, "2z": [28, 35, 75, 235, 236], "4z": [28, 35, 235], "6z": [28, 35], "739085133215161": [28, 33, 35, 36, 234], "9y": [28, 34], "3x": [28, 34, 67, 109, 209, 235, 285], "cc": [28, 32, 68, 83, 201, 204, 206, 212, 289], "2e": [28, 32, 67], "ce": [28, 32, 113], "2pq": [28, 30], "linprog": 29, "as_set": [29, 97], "accomplish": [29, 94, 145, 148, 268], "rel_op": [29, 67], "relations_sort": 29, "append": [29, 34, 58, 67, 68, 103, 111, 148, 176, 202, 207, 216, 234, 237, 249, 250, 254, 293], "x_y_reduc": 29, "insight": [29, 286], "x_reduc": 29, "y_reduc": 29, "solve_univariate_inequ": [29, 231, 235], "calculu": [29, 31, 67, 72, 94, 103, 148, 197, 225, 236, 267, 268, 269, 272, 273, 284, 286, 291], "incompat": 29, "reflect": [29, 36, 51, 55, 59, 67, 77, 78, 83, 96, 113, 150, 153, 154, 191], "parameter": [30, 69, 76, 77, 80, 83, 229], "pythagorean": [30, 229], "sage": [30, 67, 107, 201, 287], "ellipticcurv": 30, "nest": [30, 34, 67, 69, 73, 75, 94, 98, 117, 204, 206, 209, 216, 226, 228, 231, 235, 236, 237, 238, 240, 243, 254, 255, 288], "ineffici": [30, 67, 103, 206], "my_sym": 30, "pythag_eq": 30, "sym": [30, 46, 57, 58, 63, 67, 72, 191, 216, 219, 224, 228, 229, 234, 236, 242, 254, 293], "pythag": 30, "a_1x_1": [30, 229], "a_2x_2": [30, 229], "a_nx_n": [30, 229], "bxy": [30, 229], "cy": [30, 229], "ei": [30, 34, 75, 92, 211, 216, 226, 229, 232, 242], "homogen": [30, 40, 90, 94, 103, 117, 207, 209, 212, 229, 232, 233, 236], "ternari": [30, 48, 67, 216, 229], "cz": [30, 70, 117, 229], "dxy": [30, 229], "eyz": [30, 229], "fzx": [30, 229], "a_": [30, 63, 67, 68, 75, 92, 96, 98, 100, 117, 118, 190, 218, 226, 229, 232, 234, 236, 237, 238], "pythogorean": 30, "subscript": [30, 32, 59, 207, 216, 226, 229, 254], "solution_dict": [30, 34], "zip": [30, 46, 57, 68, 97, 107, 212, 222, 229, 232, 251, 254], "elegantli": 30, "solution_list": [30, 31], "solution_first": 30, "solution_p4q3": 30, "p_val": 30, "q_val": 30, "pythag_v": 30, "union": [30, 39, 44, 46, 48, 56, 58, 65, 97, 203, 211, 216, 222, 223, 224, 231, 235, 254], "4y": [30, 209, 235, 282], "rearrang": [31, 118, 126, 143, 144, 165, 232], "eqn": [31, 34, 46, 235], "solutions_set": 31, "solution_set": 31, "256": [31, 48, 58, 107, 212, 216], "solution_outside_2_3": 31, "critic": [31, 46, 154, 199, 211, 235], "minima": [31, 235], "critical_point": 31, "point1": [31, 192, 264], "point2": [31, 192, 264], "curvatur": [31, 150, 154], "membership": [31, 65, 211, 224], "solution_set_arg": 31, "linalg": [32, 33, 48], "lu_solv": [32, 103, 205], "linear_eq_to_matrix": [32, 232, 235], "matrixbas": [32, 98, 99, 100, 103, 126, 127, 205], "column": [32, 40, 44, 47, 48, 49, 95, 97, 98, 100, 103, 104, 106, 117, 126, 130, 133, 176, 183, 190, 191, 196, 201, 205, 211, 216, 232, 235, 241, 261], "row": [32, 44, 47, 48, 49, 56, 59, 67, 72, 98, 99, 100, 103, 104, 106, 107, 117, 130, 131, 133, 148, 149, 176, 190, 191, 200, 205, 211, 216, 226, 235, 236, 241, 255, 261, 263], "shapeerror": [32, 98, 100, 103], "penros": [32, 100, 103], "pseudoinvers": [32, 103], "jordan": [32, 92, 98, 103, 214, 232, 234, 235], "lu": [32, 100, 103, 126, 127, 205, 210], "lusolv": [32, 99, 103, 125, 126, 127, 145, 149, 234, 289], "repeatedli": [32, 107, 118, 248], "b2": [32, 75, 107, 110, 111, 122, 131, 148, 191, 205, 207, 216, 226, 229, 232, 267], "solution2": 32, "prioriti": [32, 48, 90, 121, 131, 200, 255], "computation": [32, 63, 73, 125, 126, 127], "tractabl": [32, 235], "rapidli": [32, 67, 71, 92, 223], "dimens": [32, 48, 51, 68, 69, 75, 76, 78, 80, 81, 82, 84, 96, 98, 100, 103, 106, 110, 118, 135, 155, 165, 167, 170, 175, 184, 185, 188, 189, 191, 202, 205, 216, 229, 232, 234, 236, 237, 238, 241, 242, 249, 261, 264, 266, 278], "dimension": [32, 46, 48, 51, 69, 79, 80, 81, 82, 83, 100, 103, 111, 118, 148, 155, 157, 167, 183, 197, 198, 202, 203, 209, 211, 212, 215, 216, 234, 235, 237, 238, 242, 248, 270, 294], "4x4": [32, 40, 82, 106, 153, 236], "a\u2080\u2080": 32, "a\u2080\u2081": 32, "a\u2080\u2082": 32, "a\u2080\u2083": 32, "a\u2081\u2080": 32, "a\u2081\u2081": 32, "a\u2081\u2082": 32, "a\u2081\u2083": 32, "a\u2082\u2080": 32, "a\u2082\u2081": 32, "a\u2082\u2082": 32, "a\u2082\u2083": 32, "a\u2083\u2080": 32, "a\u2083\u2081": 32, "a\u2083\u2082": 32, "a\u2083\u2083": 32, "det": [32, 40, 103, 104, 148, 200, 205, 289], "a\u2081": [32, 111, 293], "\u2083": [32, 216], "slowest": [32, 94, 108], "symmetr": [32, 44, 45, 49, 50, 55, 58, 59, 63, 83, 98, 99, 100, 103, 107, 146, 201, 207, 209, 212, 215, 224, 226, 242, 254], "triangular": [32, 44, 50, 98, 99, 103, 205, 211, 234, 236, 271], "prove": [32, 67, 92, 94, 103, 203, 223, 232, 267], "noninvertiblematrixerror": [32, 100, 289], "overli": 33, "float64": [33, 48, 108, 236], "fsolv": 33, "findroot": [33, 75, 234], "overdetermin": [33, 234, 235], "toler": [33, 48, 67, 71, 207, 228, 234], "18466446988997098217": 33, "16840434497100886801e": 33, "tweak": [33, 216, 234], "closest": [33, 67, 80], "00000000000000": [33, 67, 71, 182, 216, 236], "bisect": [33, 107, 212, 234], "multidimension": [33, 210, 247], "19287309935246": [33, 234], "27844411169911": [33, 234], "192873099352460791205211": 33, "278444111699106966687122": 33, "root_scalar": 33, "lam_f": [33, 255], "3416277185114782": 33, "x_valu": 33, "12757857962640e": 33, "73908513321516": 33, "4877893607115270300540019e": 33, "6543612251060553497428174e": 33, "solve_ivp": 34, "c2": [34, 50, 68, 77, 84, 98, 100, 125, 167, 181, 224, 232, 236, 264, 267, 294], "ypp": 34, "yp": 34, "classify_od": [34, 232], "choic": [34, 48, 59, 72, 75, 92, 94, 108, 145, 177, 186, 190, 191, 199, 207, 209, 212, 216, 228, 232, 254, 287], "ic": [34, 107, 232], "y0": [34, 67, 86, 88, 90, 232], "y_": [34, 48, 75, 92, 119, 201], "initialor": 34, "eqs_one_soln_set": 34, "solutions_one_soln_set": 34, "solution_one_soln_set_dict": 34, "outer": [34, 94, 128, 146, 148, 164, 169, 170, 190, 191, 193, 195, 200, 218, 224, 240, 261, 264, 265], "fashion": [34, 48, 67, 73, 100, 133, 143, 144, 146, 200, 203, 254], "solutions_list": 34, "leverag": [34, 48, 108, 216], "chemic": 34, "kinet": [34, 122, 126, 128], "r_f": [34, 212], "k_f": 34, "y_0": [34, 229, 232], "y_1": [34, 49, 229, 236], "r_b": 34, "k_b": 34, "y_2": [34, 49, 229, 236], "vec": [34, 98, 103, 125, 148, 191, 201, 209, 267, 268, 270], "pyplot": [34, 90, 148], "plt": [34, 90, 148], "y2": [34, 67, 148, 206], "kf": 34, "kb": 34, "rf": [34, 66, 72, 212], "rb": [34, 128, 146, 258], "speci": [34, 66, 67], "ydot": 34, "k_val": 34, "42": [34, 48, 56, 67, 70, 72, 80, 81, 83, 98, 99, 101, 103, 105, 107, 207, 209, 212, 229, 247], "t_eval": 34, "linspac": [34, 48, 90, 108, 131, 148], "50": [34, 49, 58, 70, 71, 72, 75, 83, 103, 107, 110, 111, 154, 185, 212, 216, 225, 234], "concentr": [34, 111, 236], "legend": [34, 148, 202, 219], "NO": [34, 181], "br": 34, "_2": [34, 103, 125, 190, 191, 201, 232], "nobr": 34, "shadow": [34, 60], "xlabel": [34, 202], "ylabel": [34, 202], "annot": [34, 107, 202, 216], "_integr": [34, 232, 233], "separable_integr": [34, 232], "routin": [34, 48, 56, 66, 67, 68, 69, 92, 97, 98, 103, 107, 126, 153, 181, 205, 209, 212, 215, 216, 217, 228, 229, 232, 233, 234, 235, 248, 254, 268], "unintegr": 34, "all_integr": [34, 232, 233], "coupl": [34, 67, 103, 130, 145, 160, 175, 178, 201], "educ": [34, 68, 103], "chaotic": 34, "lorenz": 34, "pendulum": [34, 125, 130, 132, 136, 141, 145, 149, 199, 278], "scienceworld": 34, "theta_1": 34, "theta_2": 34, "2g": 34, "theta1": [34, 135], "theta2": 34, "eq1": [34, 77, 232, 234, 235], "eq2": [34, 77, 97, 232, 235], "interrog": 35, "overconstrain": 35, "solvabl": [36, 58, 113, 125, 229, 232, 235, 294], "groebnerbasi": [36, 204, 212, 215], "lambert": [36, 73, 94, 213], "decompos": [36, 58, 59, 65, 67, 69, 73, 78, 103, 107, 165, 174, 175, 177, 207, 212, 215, 236], "lack": [36, 48, 69, 71, 128, 216, 283], "crootof": [36, 67, 212, 232, 234], "765": 36, "352": 36, "181": 36, "08": [36, 103, 133], "56": [36, 70, 94, 107, 212], "432": [36, 80, 211], "434607": 36, "0509758447494279": 36, "313552108895239": 36, "14751999969868": 36, "estim": [36, 46, 66, 67, 71, 92, 283], "preserv": [36, 47, 48, 58, 67, 103, 179, 207, 212, 217, 218, 228], "77245385090552": 36, "4142135623730951": 36, "varieti": [36, 48, 49, 59, 67, 108, 111, 146, 203, 210, 212, 236, 254], "risk": 36, "parse_latex": [36, 109], "central": [37, 58, 64, 75, 77, 83, 122, 128, 146, 202, 211, 212, 229, 236], "pypi": 38, "qtconsol": [38, 292], "nicer": [38, 67, 139], "enthought": 38, "deploy": 38, "activepython": 38, "spack": 38, "freshli": 38, "starter": 38, "wherev": [38, 131, 228, 235, 265], "visit": [38, 51, 58, 67, 72, 290], "gitter": [38, 289], "excel": [38, 71, 211, 291], "ticket": 38, "export": [39, 216], "latin": 39, "clunki": 39, "collid": [39, 242], "win": 39, "throwawai": 39, "surviv": 39, "foo": [39, 46, 48, 67, 176, 196, 254, 257], "stick": 39, "_clash1": [39, 67], "_clash2": [39, 67], "multi": [39, 67, 68, 132, 141, 148, 161, 165, 175, 202, 216, 235, 278], "_clash": [39, 67], "sympif": [39, 67], "real_field": 40, "norm": [40, 103, 179, 191, 207, 209, 211, 212], "instanti": [40, 47, 48, 59, 67, 75, 80, 82, 83, 100, 103, 126, 171, 179, 191, 202, 203, 207, 211, 236, 261, 265], "bi": [40, 67, 73, 75, 94, 200, 223, 232], "cj": 40, "dk": [40, 110, 211], "q1": [40, 103, 110, 121, 131, 133, 134, 135, 136, 138, 139, 140, 143, 144, 145, 149, 190, 191, 193, 195, 196, 199, 200, 206, 261, 263], "q2": [40, 110, 121, 131, 133, 134, 135, 136, 138, 139, 140, 143, 144, 149, 190, 191, 193, 195, 196, 199, 200, 206, 261, 263], "euclideanspac": 40, "realnormedalgebra": 40, "q3": [40, 121, 133, 134, 136, 138, 139, 140, 143, 191, 193, 195, 200, 261, 263], "atan_2": 40, "atan": [40, 45, 69, 71, 73, 78, 83, 91, 94, 135, 149, 150, 213, 216, 218], "arc_coplanar": 40, "arc": [40, 73, 293], "coplanar": [40, 81, 200], "parallel": [40, 77, 80, 81, 83, 94, 114, 117, 120, 199, 200, 209, 267, 271], "vector_coplanar": 40, "is_pur": 40, "mathbf": [40, 100, 126, 141, 143, 144, 146, 186, 190, 191, 196, 197, 199, 200, 216, 226, 237, 265, 266, 268, 270, 271], "versor": 40, "0i": 40, "0j": [40, 206], "0k": 40, "vector_part": 40, "vector_onli": 40, "from_axis_angl": 40, "radian": [40, 73, 76, 77, 78, 80, 81, 82, 103, 115, 131, 154, 155, 191], "from_eul": 40, "seq": [40, 58, 67, 70, 103, 207, 209, 212, 222, 234, 254], "intrins": [40, 48], "extrins": 40, "uppercas": [40, 68, 226], "zyz": [40, 191], "from_rotation_matrix": 40, "orthogon": [40, 44, 82, 96, 103, 179, 191, 200, 261, 263], "index_vector": 40, "scalar_part": 40, "is_zero_quaternion": 40, "mensor": 40, "60": [40, 53, 58, 60, 66, 67, 72, 75, 94, 103, 107, 110, 111, 215, 216, 229, 232, 254], "pth": 40, "668": 40, "224": [40, 184, 210], "336": 40, "448": 40, "pow_cos_sin": 40, "900": 40, "1800": [40, 68], "2700": [40, 110], "3600": [40, 72], "product_matrix_left": 40, "hamilton": [40, 51, 98], "to_matrix": [40, 122, 125, 128, 146, 191, 200, 205, 211, 261, 264, 266], "product_matrix_right": 40, "rotate_point": 40, "coordin": [40, 48, 68, 69, 73, 75, 76, 78, 82, 84, 100, 103, 110, 113, 115, 119, 125, 126, 127, 130, 131, 132, 133, 134, 136, 138, 141, 142, 143, 144, 147, 149, 157, 159, 178, 179, 182, 190, 191, 192, 193, 195, 197, 200, 203, 211, 212, 224, 232, 261, 263, 264, 267, 269, 271, 276, 278], "to_axis_angl": 40, "set_norm": 40, "to_eul": 40, "angle_addit": 40, "avoid_square_root": 40, "degener": [40, 234, 235], "gymbal": 40, "lock": 40, "atan2": [40, 45, 69, 73, 155, 216, 261], "bc": [40, 79, 113, 254, 257, 267], "mp": [40, 178, 234, 250], "bd": [40, 181], "1371": 40, "pone": 40, "0276302": 40, "to_rotation_matrix": 40, "assumptionkei": 41, "proposit": [41, 43, 97], "is_tru": [41, 43, 44], "assumptionscontext": [41, 42, 43], "global_assumpt": [41, 42, 43], "discern": [41, 43], "refin": [41, 43, 67, 98, 203, 207, 211, 212, 228, 249, 273], "inherit": [41, 67, 74, 97, 100, 101, 125, 170, 179, 201, 216, 236, 241, 249, 250], "askhandl": 41, "mere": [42, 43, 48, 50, 71, 176], "thin": [42, 103, 137, 150], "undefinedpred": [42, 43], "sexi": [42, 43], "sexyprimepred": [42, 43], "sexyprim": [42, 43], "int1": [42, 43], "int2": [42, 43], "assump": [42, 43], "r5": [42, 228], "predicate_": [42, 43], "28mathematical_log": [42, 43], "r6": 42, "sexy_prim": [42, 43], "resolut": [42, 43, 229], "askpredicatehandl": [42, 43], "r7": 43, "r8": 43, "notabl": [43, 48, 70, 75, 92, 108, 206], "truth_maintenance_system": 43, "istruepred": 44, "gt": [44, 48, 67, 236, 254], "istruehandl": 44, "commutativepred": 44, "commutativehandl": 44, "finitepred": 44, "nor": [44, 46, 67, 97, 155, 202, 212, 223, 225, 232, 242, 261], "nan": [44, 45, 48, 67, 73, 75, 123, 126, 127, 228, 236, 283], "finitehandl": 44, "r9": 44, "infinitepred": 44, "infinitehandl": 44, "symmetricpred": 44, "transpos": [44, 47, 98, 100, 103, 117, 148, 164, 191, 200, 205, 211, 229, 237, 242, 243, 289], "diagon": [44, 72, 98, 99, 100, 103, 106, 130, 153, 205, 238], "symmetrichandl": 44, "r10": 44, "symmetric_matrix": 44, "invertiblepred": 44, "fullrank": [44, 48], "invertiblehandl": 44, "r11": 44, "invertible_matrix": 44, "orthogonalpred": 44, "tm": [44, 154], "mm": [44, 47, 107, 126, 133, 138, 139, 179, 205], "orthogonalhandl": 44, "r12": 44, "orthogonal_matrix": 44, "unitarypred": 44, "unitari": [44, 94, 107, 165, 170, 201], "unitaryhandl": 44, "r13": 44, "unitary_matrix": 44, "positivedefinitepred": 44, "tmz": 44, "positive_definit": 44, "positivedefinitehandl": 44, "r14": 44, "definite_matrix": 44, "uppertriangularpred": 44, "m_": [44, 144, 201, 209, 238], "ij": [44, 103, 181, 186, 201, 236, 238], "zeromatrix": [44, 100], "upper_triangular": [44, 98], "uppertriangularhandl": 44, "r15": 44, "uppertriangularmatrix": 44, "lowertriangularpred": 44, "lower_triangular": [44, 98], "lowertriangularhandl": 44, "r16": 44, "lowertriangularmatrix": 44, "diagonalpred": 44, "diagonalhandl": 44, "r17": 44, "diagonal_matrix": 44, "fullrankpred": 44, "rank": [44, 48, 49, 51, 56, 58, 59, 61, 62, 63, 82, 96, 103, 104, 191, 193, 203, 205, 207, 209, 211, 237, 241, 242, 289], "linearli": [44, 48, 75, 91, 103, 205, 209, 232, 234, 242], "fullrankhandl": 44, "squarepred": 44, "squarehandl": 44, "r18": 44, "square_matrix": 44, "integerelementspred": 44, "integer_el": 44, "integerelementshandl": 44, "realelementspred": 44, "real_el": 44, "realelementshandl": 44, "complexelementspred": 44, "complex_el": 44, "complexelementshandl": 44, "singularpred": 44, "singular": [44, 48, 59, 67, 71, 73, 74, 75, 89, 90, 92, 94, 103, 110, 112, 145, 191, 203, 210, 223, 232, 235, 261, 278, 283], "singularhandl": 44, "fore": 44, "r19": 44, "singularmatrix": 44, "normalpred": 44, "normalhandl": 44, "r20": 44, "normal_matrix": 44, "triangularpred": 44, "triangularhandl": 44, "r21": 44, "triangular_matrix": 44, "unittriangularpred": 44, "unit_triangular": 44, "unittriangularhandl": 44, "evenpred": 44, "evenhandl": 44, "oddpred": 44, "oddhandl": 44, "primehandl": 44, "subject": [44, 67, 77, 83, 111, 121, 149, 211], "compositepred": 44, "compositehandl": 44, "positivepred": 44, "positivehandl": 44, "negativepred": 44, "negativehandl": 44, "zeropred": 44, "zerohandl": 44, "nonzeropred": 44, "nonzerohandl": 44, "nonpositivepred": 44, "nonpositivehandl": 44, "nonnegativepred": 44, "nonnegativehandl": 44, "integerpred": 44, "integerhandl": 44, "r22": 44, "rationalpred": 44, "rationalhandl": 44, "r23": 44, "irrationalpred": 44, "irrationalhandl": 44, "r24": 44, "realpred": 44, "disjoint": [44, 47, 56, 59, 212, 224, 254], "realhandl": 44, "r25": 44, "extendedrealpred": 44, "extendedrealhandl": 44, "hermitianpred": 44, "hermitianhandl": 44, "r26": 44, "hermitianoper": [44, 170], "complexpred": 44, "complexhandl": 44, "r27": 44, "imaginarypred": 44, "imaginaryhandl": 44, "r28": 44, "antihermitianpred": 44, "antihermitianhandl": 44, "r29": 44, "algebraicpred": 44, "askalgebraicpredicatehandl": 44, "r30": 44, "algebraichandl": 44, "transcendentalpred": 44, "transcedent": 44, "refine_pow": 45, "refine_ab": 45, "refine_arg": 45, "refine_atan2": 45, "refine_im": 45, "refine_matrixel": 45, "refine_r": 45, "refine_sign": 45, "lagrang": [46, 67, 124, 125, 127, 130, 137, 141, 212, 229, 278], "lagrangian": [46, 126, 128, 135, 140, 144, 145], "euler_equ": 46, "r31": 46, "93lagrange_equ": 46, "decreas": [46, 48, 59, 209], "monoton": [46, 48, 84], "is_decreas": 46, "lopen": [46, 67, 224, 231, 236], "ropen": [46, 73, 224, 236], "is_increas": 46, "72": [46, 50, 67, 80, 103, 107, 110, 201, 215], "is_monoton": 46, "is_strictly_decreas": 46, "is_strictly_increas": 46, "monotonicity_help": 46, "held": [46, 68, 145, 240, 293], "r32": 46, "mathematical_singular": 46, "interpol": [46, 72, 76, 148, 209, 212], "finite_diff_weight": [46, 67, 283], "apply_finite_diff": [46, 67, 283], "differentiate_finit": [46, 67, 283], "finite_diff": [46, 67], "x_list": [46, 283], "y_list": [46, 283], "xlist": 46, "55271367880050e": 46, "indexedbas": [46, 48, 66, 67, 216, 234, 240, 241, 248], "idx": [46, 48, 216, 240, 241, 248], "region": [46, 75, 84, 94, 202, 224, 232, 235, 236, 261, 264, 271], "bewar": [46, 75], "phenomenon": [46, 186, 209, 219, 288], "90": [46, 58, 65, 75, 98, 103, 109, 110, 113, 121, 131, 149, 216, 218, 228, 236, 249], "finitediff": 46, "wrt": [46, 48, 67, 69, 75, 84, 103, 131, 148, 191, 192, 209, 212, 261, 263, 264, 268], "len": [46, 55, 56, 57, 58, 59, 63, 65, 67, 68, 72, 75, 82, 92, 97, 135, 150, 154, 165, 175, 212, 228, 232, 241, 254], "nearest": [46, 211], "furthest": [46, 68], "sublist": [46, 63, 68, 94, 178, 283], "fd": [46, 48, 181], "0th": [46, 59, 68, 75], "forward": [46, 48, 98, 117, 133, 141, 174, 199, 228, 247], "pai": 46, "attent": [46, 58, 73], "gridpoint": 46, "plan": [46, 121, 207, 292], "mycoeff": 46, "3rd": [46, 59, 73, 107, 148, 212, 234, 237, 254], "poorer": 46, "grand": 46, "r33": 46, "51": [46, 103, 107], "184": [46, 232], "1988": [46, 160, 178, 209, 210], "699": 46, "706": [46, 103], "1090": [46, 212], "s0025": [46, 107], "5718": [46, 107], "0935077": 46, "continuous_domain": [46, 231], "function_rang": 46, "is_convex": [46, 83], "convex": [46, 83, 84, 94], "unspecifi": [46, 67, 82, 283], "multivari": [46, 67, 75, 203, 204, 206, 207, 208, 210, 212, 213, 223, 228, 234, 235, 236, 293], "concav": [46, 150], "r34": 46, "convex_funct": 46, "r35": 46, "ifp": 46, "illinoi": 46, "angelia": 46, "l3_convfunc": 46, "r36": 46, "logarithmically_convex_funct": 46, "r37": 46, "logarithmically_concave_funct": 46, "r38": 46, "concave_funct": 46, "lcim": 46, "mixtur": [46, 48, 84, 203, 249], "incommensur": 46, "not_empty_in": [46, 235], "finset_intersect": 46, "finite_set": [46, 224], "aperiod": 46, "smallest": [46, 61, 73, 80, 82, 89, 97, 103, 107, 178, 191, 207, 252, 254], "verif": [46, 205, 234], "reliabl": [46, 67, 232, 252, 283], "stationary_point": 46, "stationari": [46, 236], "tikz": 47, "joyofcat": 47, "adamek": 47, "herrlich": 47, "strecker": 47, "joi": 47, "cat": [47, 190], "katmat": 47, "uni": [47, 94, 254], "bremen": 47, "acc": [47, 148, 195, 199], "embryon": 47, "morphism": [47, 203], "codomain": [47, 203, 211], "arrow": [47, 96, 110, 202, 216], "namedmorph": 47, "prohibit": [47, 59, 60, 191], "identitymorph": 47, "compositemorph": 47, "compos": [47, 67, 68, 135, 145, 183, 186, 199, 203, 207, 211, 212, 213, 216, 218, 228], "circ": [47, 67, 78, 84, 92, 100], "flatten": [47, 67, 206, 238, 243, 254, 255], "new_nam": 47, "id_a": 47, "id_b": 47, "commutative_diagram": 47, "quadrupl": [47, 212], "mbox": 47, "hom": 47, "id": [47, 63, 73, 238], "rightarrow": [47, 59, 63, 68, 72, 73, 75, 89, 90, 92, 94, 97, 98, 107, 202, 211, 223, 235, 238, 254, 283], "monoid": 47, "pare1970": 47, "premis": 47, "conclus": [47, 67], "carri": [47, 48, 67, 173, 179, 186, 203, 206, 209, 211, 213, 214, 255], "premises_kei": 47, "et": [47, 94, 160, 209, 212, 213, 225, 228], "pareigi": 47, "functor": 47, "1970": [47, 103], "is_subdiagram": 47, "subdiagram": 47, "d1": [47, 63, 191, 203, 223, 236, 261], "subdiagram_from_object": 47, "veryuniqu": 47, "diagram_draw": 47, "diagramgrid": 47, "drawn": [47, 58, 96, 202, 206, 214], "moprhism": 47, "strive": 47, "nevertheless": 47, "laid": [47, 131, 178], "emploi": [47, 66, 71, 94, 107, 212, 215, 232, 236], "lai": 47, "layout": 47, "sequenti": [47, 51, 68, 73, 261, 263], "test_draw": 47, "lemma": [47, 58, 92, 204], "fivelemma": 47, "five_lemma": 47, "arrowstringdescript": 47, "curving_amount": 47, "looping_start": 47, "looping_end": 47, "horizontal_direct": 47, "vertical_direct": 47, "label_posit": 47, "pic": 47, "princip": [47, 68, 73, 75, 92, 94, 104, 119, 133, 154, 203, 204, 205, 206, 207, 209, 211, 212, 213], "offset": [47, 48, 67, 72, 75, 241], "cell": 47, "disregard": 47, "unexplain": 47, "astr": 47, "dr": [47, 69, 216, 232], "12mm": 47, "correspondingli": 47, "label_displac": 47, "arrow_styl": 47, "dash": 47, "xypicdiagramdraw": 47, "formatt": 47, "utilis": 47, "xypic": 47, "drawer": 47, "xymatrix": 47, "ld": 47, "arrow_formatt": 47, "therebi": 47, "default_arrow_formatt": 47, "farther": 47, "centr": [47, 64, 202], "default_formatt": 47, "_3mm": 47, "default_curving_amount": 47, "cm": [47, 148, 236], "_1cm": 47, "default_curving_step": 47, "1cm": 47, "rr": [47, 67, 85, 205, 206, 212, 213], "h_": [47, 58, 63, 72, 75, 94], "_2cm": 47, "mask": [47, 216], "diagram_format": 47, "proceed": [47, 49, 92, 94, 147, 210, 226], "xypic_draw_diagram": 47, "insert": [47, 49, 98, 109, 110, 176, 181, 216, 236, 257], "preview_diagram": 47, "fab": [48, 216], "cse_main": [48, 217, 228], "cse": [48, 108, 121, 170, 217, 228, 249, 255], "meat": 48, "lightweight": [48, 211, 287], "pycod": [48, 216], "lambdarepr": [48, 216, 255], "aesara_funct": [48, 108, 216], "float80": [48, 216], "assign_to": [48, 216], "type_alias": [48, 216], "0l": [48, 216], "powl": [48, 216], "c99": [48, 216, 249], "expm1": [48, 216], "thrown": [48, 216], "fcode": [48, 216], "contract": [48, 69, 118, 181, 216, 225, 238, 240, 241, 242, 243], "len_i": [48, 216], "mat_1": 48, "mat_2": 48, "jscode": [48, 216], "user_funct": [48, 216], "argument_test": [48, 216], "cfunction_str": [48, 216], "octav": [48, 148, 249], "custom_funct": [48, 216], "existing_octave_fcn": [48, 216], "is_matrix": [48, 216], "my_mat_fcn": [48, 216], "my_fcn": [48, 216], "mat": [48, 100, 150, 175, 216], "octave_cod": [48, 216], "summat": [48, 66, 67, 71, 72, 75, 181, 210, 212, 216, 219, 228, 236, 237, 240, 241, 242, 248], "mathematica_cod": [48, 216], "gamma_1": [48, 120], "gamma_2": [48, 120], "\u03b3\u2081": 48, "\u03b3\u2082": 48, "\u03b2": [48, 201], "h_i": [48, 63], "c89": [48, 216, 249], "julia_cod": [48, 216], "rust_cod": [48, 216], "powi": [48, 216], "make_routin": [48, 249], "f95": [48, 248, 249], "matlab": [48, 121, 148, 249, 289], "breadth": [48, 67, 236], "c_name": [48, 249], "c_code": [48, 249], "h_name": [48, 249], "c_header": [48, 249], "volume_result": 48, "ifndef": [48, 249], "project__test__h": [48, 249], "endif": [48, 249], "preprocessor": [48, 217, 228, 249], "global_var": [48, 249], "insensit": [48, 103, 148, 216, 247, 249], "argument_sequ": [48, 249], "name_expr": [48, 249], "to_fil": [48, 249], "f_name": [48, 249], "f_code": [48, 249], "hydrogen": [48, 278], "r_nl": [48, 119, 182], "my_routin": 48, "result_var": [48, 249], "result\u2085\u2081\u2084\u2082\u2083\u2084\u2081\u2086\u2088\u2081\u2083\u2089\u2087\u2087\u2081\u2089\u2084\u2082\u2088": 48, "__________": [48, 204], "assoc_laguerr": [48, 75, 216], "fcn": [48, 249], "result_5397460570204848505": [48, 249], "out_8598435338387848786": [48, 249], "examin": [48, 68, 170, 247, 249, 293], "inputargu": [48, 249], "outputargu": [48, 249], "inoutargu": [48, 249], "disk": [48, 68, 224, 235, 255], "binary_funct": [48, 108, 248], "tensor": [48, 54, 69, 103, 118, 128, 146, 160, 166, 167, 168, 178, 181, 190, 191, 216, 237, 238, 240, 241, 248, 255, 265, 266, 272, 273, 276, 278], "binary_func": [48, 248], "servic": 48, "tempdir": [48, 248], "qho_1d": [48, 157], "psi_n": [48, 157], "qho": 48, "tmp": 48, "subroutin": [48, 58, 177, 209], "autofunc": 48, "hbar": [48, 157, 163, 176, 182, 186, 188, 201], "05457162d": 48, "14159265358979d0": 48, "0d0": [48, 216], "74126166983329d": 48, "33": [48, 67, 70, 103, 127, 154, 190, 209, 213, 216, 236], "mute": [48, 248], "backend": [48, 95, 108, 109, 115, 130, 134, 136, 142, 196, 213, 248, 255], "auxiliari": [48, 94, 126, 131, 143, 232, 248], "sympy_express": [48, 248], "mandatori": [48, 216, 248], "illustr": [48, 103, 132, 135, 186, 206, 219, 223], "psi_nl": 48, "766": 48, "incur": [48, 108], "get_numpy_arrai": 48, "tight": 48, "temp": [48, 133], "alloc": [48, 73], "fuse": 48, "wise": [48, 49, 73, 98, 205, 209, 216, 222, 248], "unabl": [48, 80, 84, 109, 234, 261, 282, 283], "fortun": [48, 108, 135, 212, 213], "reconnect": 48, "autom": [48, 73, 108, 225, 248, 287], "ideologi": [48, 235], "broadcast": [48, 108, 216, 241, 248], "outperform": 48, "quantit": [48, 183], "ufunc": [48, 108, 248, 255], "fn_numpi": 48, "fn_fortran": 48, "xx": [48, 103, 128, 191, 200, 254], "21306132": 48, "98101184": 48, "44626032": 48, "timeit": [48, 213], "10000": [48, 71, 107, 108, 110, 234], "18891601900395472": 48, "004707066000264604": 48, "facil": 48, "comparison": [48, 66, 67, 97, 103, 131, 203, 211, 215, 234, 247, 254], "thereof": [48, 67, 203, 209, 211], "optims_c99": 48, "log1p": [48, 216], "expm1_opt": 48, "log1p_opt": 48, "exp2_opt": 48, "log2_opt": 48, "log2const_opt": 48, "funcminusoneoptim": 48, "func_m_1": 48, "opportunist": 48, "replaceoptim": 48, "catastroph": 48, "replace_in_add": 48, "cost_funct": 48, "__call__": [48, 59, 67, 211], "exp2": [48, 216], "create_expand_pow_optim": 48, "base_req": 48, "is_symbol": [48, 98], "expand_opt": 48, "opt2": 48, "is_funct": 48, "log2": [48, 75, 216], "matin_opt": 48, "matinv_opt": 48, "matrixsolv": [48, 216], "matrix_nod": 48, "numpyprint": 48, "doprint": [48, 216], "seriesapprox": 48, "reltol": 48, "max_ord": 48, "n_point_check": 48, "threshold": [48, 107], "largest": [48, 59, 61, 67, 73, 75, 103, 106, 107, 161, 203, 207, 234, 254], "series_approx2": 48, "1e": [48, 67, 71, 103, 115, 150, 212, 234], "series_approx3": 48, "series_approx8": 48, "sumapprox": 48, "neglect": 48, "2000": [48, 53, 94, 107, 210], "sum_approx3": 48, "sum_approx2": 48, "sum_approx1": 48, "token": [48, 92, 95, 109], "codegenast": 48, "assignmentbas": 48, "augmentedassign": 48, "addaugmentedassign": 48, "subaugmentedassign": 48, "mulaugmentedassign": 48, "divaugmentedassign": 48, "modaugmentedassign": 48, "codeblock": [48, 109], "quotedstr": 48, "intbasetyp": 48, "_sizedinttyp": 48, "signedinttyp": 48, "unsignedinttyp": 48, "floatbasetyp": 48, "floattyp": 48, "complexbasetyp": 48, "complextyp": 48, "pointer": [48, 249, 250], "functionprototyp": 48, "functiondefinit": [48, 109], "stream": [48, 68, 217, 228, 254], "functioncal": 48, "breaktoken": 48, "continuetoken": 48, "nonetoken": 48, "float32": [48, 108, 109, 255], "codeprint": 48, "complex_": 48, "bool_": 48, "intc": [48, 109], "intp": 48, "unsign": [48, 72, 228], "int8": 48, "int16": 48, "int32": 48, "int64": [48, 236], "uint8": 48, "uint16": 48, "uint32": 48, "uint64": 48, "x86": 48, "amd64": 48, "complex64": 48, "complex128": 48, "newton": [48, 75, 141, 184, 188, 209, 213], "aug_assign": 48, "tol": [48, 67, 207], "val": [48, 67, 79, 207, 211, 255], "whl": 48, "py_str": 48, "inf": [48, 59, 67, 103, 207, 212, 224, 232, 236], "exec": [48, 67, 95, 255], "1121416371": 48, "909672693737": 48, "867263818209": 48, "865477135298": 48, "865474033111": 48, "1g": 48, "3e": 48, "2003": [48, 201, 210, 216, 229], "source_format": [48, 216], "op": [48, 67, 103, 170, 181, 195, 199, 225, 254, 255], "parametr": [48, 75, 76, 80, 103, 202, 229, 235, 261, 264, 271], "volatil": 48, "binop": 48, "exit": [48, 107, 247], "premad": 48, "break_": 48, "lift": [48, 63, 73, 75, 92, 207, 209, 212], "left_hand_sid": 48, "topological_sort": [48, 254], "postprocess": [48, 212, 217, 228], "topolog": [48, 67, 69, 205, 254], "continue_": 48, "untyp": 48, "compliant": 48, "elem": [48, 58, 203], "ijk": [48, 241], "stride": [48, 241], "lmn": 48, "cast_nocheck": 48, "nbit": 48, "storag": [48, 67, 103, 175, 201, 209], "nmant": 48, "mantissa": 48, "nexp": 48, "half_precis": 48, "f16": 48, "65504": 48, "tini": [48, 67, 207], "ep": [48, 58, 66, 207, 211, 212], "decimal_dig": 48, "cast_check": 48, "1e5": 48, "cast": [48, 100, 285], "subnorm": [48, 58], "idempot": 48, "loos": [48, 67], "overflow": [48, 251], "max_expon": 48, "min_expon": 48, "for_i": 48, "for_ji": 48, "for_kji": 48, "function_arg": [48, 247], "fcall": 48, "baz": 48, "return_typ": 48, "fp": [48, 49, 67, 212, 218], "from_functionprototyp": 48, "prototyp": [48, 108, 249], "value_const": 48, "pointer_const": 48, "attr_param": 48, "looking_for": 48, "as_declar": 48, "formatstr": 48, "5g": 48, "throw": [48, 103, 109, 131, 205, 211, 229, 235], "runtimeerror_": 48, "runtime_error": 48, "stdout": [48, 50, 247], "stderr": 48, "oppos": [48, 255, 283], "_field": 48, "_construct_": 48, "not_in_arg": 48, "float16": 48, "inttyp": 48, "super": [48, 75, 207, 216, 261, 263], "from_expr": [48, 212], "v6": 48, "123456": [48, 67, 107], "v10": 48, "67894": 48, "boost_mp50": 48, "boost": 48, "multiprecis": [48, 206], "cpp_dec_float_50": 48, "r39": 48, "rtol": 48, "atol": 48, "precision_target": 48, "v18": 48, "123456789012345646": 48, "123456789012345649": 48, "Will": [48, 103, 109, 211, 216, 247], "decl1": 48, "decl2": 48, "alt": [48, 211], "secondarili": [48, 212], "mathcin": 48, "cbrt": [48, 73, 216], "minu": [48, 66, 67, 197, 209, 216, 268], "0e": [48, 67], "fma": [48, 216], "hypot": [48, 216], "hypotenus": [48, 83], "log10": [48, 216], "ten": [48, 108], "plu": [48, 66, 103, 109, 148, 161, 212, 216, 226, 254, 255], "famili": [48, 51, 85, 94, 204], "commaoper": 48, "goto": 48, "preincrement": 48, "postdecr": 48, "decrement": [48, 251], "postincr": 48, "increment": [48, 58, 59, 60, 66, 83, 107, 236], "predecr": 48, "alignof": 48, "sizeof": 48, "struct": [48, 201], "dsign": 48, "arrayconstructor": 48, "95": [48, 65, 107, 209, 216, 232, 234, 249], "do1": 48, "1d0": 48, "do2": 48, "extent": 48, "intent_out": 48, "dim": [48, 69, 82, 103, 108, 183, 189, 216, 239, 242, 276], "arr": 48, "fortranreturn": 48, "aid": [48, 133], "implieddoloop": 48, "idl": 48, "signallib": 48, "prog": [48, 160], "myprogram": 48, "mysub": 48, "subroutinecal": 48, "inout": 48, "bind_c": 48, "sum_": [48, 66, 67, 68, 72, 75, 92, 94, 98, 100, 107, 201, 212, 213, 218, 219, 226, 232, 236], "cmplx": [48, 216], "intent_in": 48, "isign": 48, "lbound": 48, "lb": [48, 89, 251], "literal_dp": 48, "num": [48, 58, 67, 107, 117, 207, 228, 232, 251, 257], "literal_sp": 48, "reshap": [48, 98, 131, 148, 237, 243, 254], "arrayexpr": 48, "shp": 48, "metric": [48, 59, 63, 69, 118, 228, 232, 235, 242], "snr": 48, "convolution2d": 48, "use_renam": 48, "ren": 48, "thingi": 48, "newtons_method": 48, "itermax": 48, "counter": [48, 67, 73, 79, 98, 111, 113], "delta_fn": 48, "handle_nan": 48, "raphson": 48, "criterion": [48, 58, 147, 204, 209], "hallei": 48, "occurr": [48, 49, 67, 107, 131, 191, 228, 236], "netwon": 48, "algo": [48, 59], "r40": 48, "27s_method": 48, "newtons_method_funct": 48, "param": [48, 69, 103, 229], "render_as_modul": 48, "py_mod": 48, "865474033102": 48, "render_as_source_fil": 48, "printer_set": 48, "fcodeprint": [48, 216], "fpgroup": [49, 58], "studi": [49, 57, 66, 69, 103, 200, 203, 209, 212, 229, 236], "combinator": [49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 72, 100, 107, 211, 218, 237, 242, 251, 254, 273, 287, 293], "free_group": [49, 57, 58], "vfree_group": 49, "xfree_group": 49, "fp_group": [49, 58], "coset_enumeration_r": 49, "fall": [49, 66, 67, 72, 95, 117, 196, 211, 216, 229, 233, 236], "famou": [49, 75, 94, 107, 229], "langl": [49, 58, 160, 201], "rangl": [49, 58, 160, 178, 201], "gen0": 49, "gen1": 49, "gen_": 49, "freegroup": 49, "x_2": [49, 57, 72, 89, 176, 204, 209, 212, 218, 229, 235], "x_3": [49, 57, 89, 176], "s_1": [49, 254], "r_1": [49, 203, 213], "s_2": 49, "r_2": 49, "s_k": 49, "r_k": [49, 174], "s_i": [49, 63, 94, 96], "r_i": [49, 213], "reduct": [49, 103, 127, 205, 209, 211, 229], "ho05": [49, 57], "cdhw73": 49, "hav91": 49, "strategi": [49, 67, 94, 209, 210, 223, 226, 228, 233], "coset_enumeration_c": 49, "coset_enumer": 49, "relator_bas": 49, "coset_table_bas": 49, "coset_table_max_limit": 49, "4096000": 49, "safeti": [49, 59, 101], "max_coset": 49, "cox": [49, 210, 212], "c_r": [49, 226], "max_stack_s": 49, "500": [49, 71, 128], "deduction_stack": 49, "stack": [49, 84, 98, 130, 148, 205, 211, 216, 245, 251, 289], "exce": [49, 107, 242, 255], "modest": 49, "low_index_subgroup": 49, "conjugaci": [49, 50, 58], "coset_t": [49, 58], "reidemeister_present": 49, "p1": [49, 58, 59, 63, 66, 77, 79, 80, 81, 82, 83, 110, 117, 122, 125, 128, 135, 148, 150, 195, 202, 206, 207, 209, 213, 225, 236, 237], "john": [49, 58, 75, 212, 229, 232], "cannon": 49, "lucien": 49, "dimino": [49, 58], "georg": [49, 203, 232, 254], "hava": 49, "jane": 49, "watson": [49, 228], "comp": [49, 232], "463": [49, 147], "490": [49, 59], "1973": [49, 68, 198], "derek": [49, 57], "holt": [49, 57, 58, 65], "chapman": [49, 57], "hall": [49, 57, 236], "crc": [49, 57, 59], "2005": [49, 57, 94, 107, 212], "xvi": [49, 57], "514": [49, 57, 210], "symposium": [49, 92, 209, 210, 226], "issac": [49, 94, 210, 234], "bonn": 49, "1991": [49, 210], "191": [49, 235], "199": 49, "acm": [49, 66, 92, 94, 207, 210, 226, 228, 232, 234], "transit": [50, 58, 148, 209, 236], "subgroup": [50, 58, 59, 63, 65, 96, 107], "permutationgroup": [50, 52, 55, 57, 58, 59, 64, 65, 211], "s_n": [50, 66, 212, 254], "enum": [50, 211, 253, 280], "get_perm_group": [50, 211], "r41": 50, "cohen": [50, 104, 205, 210, 211], "s6transitivesubgroup": [50, 207], "qualnam": 50, "boundari": [50, 78, 80, 110, 111, 195, 213, 224, 232, 236], "s6": 50, "s5transitivesubgroup": 50, "s5": [50, 58], "s4transitivesubgroup": [50, 211, 212], "s4": [50, 59, 117], "s3transitivesubgroup": 50, "s3": [50, 58, 66, 117, 219, 229], "s2transitivesubgroup": [50, 211], "s1transitivesubgroup": [50, 211], "four_group": 50, "klein": [50, 59], "m20": 50, "metacycl": 50, "323": [50, 75, 107], "s3_in_s6": 50, "prism": 50, "a4_in_s6": 50, "a4": [50, 63, 67, 96, 148, 293], "find_transitive_subgroups_of_s6": 50, "s4m": 50, "s4p": 50, "a4xc2": 50, "s4xc2": 50, "g18": 50, "isomorph": [50, 58, 61, 203, 206, 209, 211], "semidirect": 50, "g36m": 50, "g36": 50, "g36p": 50, "c4": [50, 96, 98, 100, 232], "g72": 50, "d4": [50, 96, 212, 236], "325": 50, "psl2f5": 50, "psl_2": 50, "_5": [50, 203], "a_5": 50, "pgl2f5": 50, "pgl_2": 50, "s_5": 50, "print_report": 50, "s_6": 50, "dihedr": [50, 55, 58, 59], "d_6": 50, "s_4": 50, "absenc": [50, 63, 97], "a_4": 50, "engag": 50, "eleg": [50, 213, 215], "a_6": 50, "g_": [50, 58, 65, 66, 75, 92, 103, 229], "c_3": [50, 92, 232], "rtime": 50, "c_4": [50, 92], "d_4": 50, "r43": 50, "projective_linear_group": 50, "exceptional_isomorph": 50, "r44": [50, 51], "automorphisms_of_the_symmetric_and_alternating_group": 50, "pgl": 50, "282": 50, "graycod": 51, "kw_arg": [51, 61, 181, 241, 242], "hamiltonian": [51, 172], "edg": [51, 60, 61, 96, 205, 216, 235, 254, 292], "vertex": [51, 61, 78, 83, 94, 205], "000": [51, 71, 94, 97, 175, 254], "110": [51, 97, 232, 234, 248, 254], "010": [51, 97, 254], "011": [51, 97, 175, 254], "111": [51, 70, 77, 97, 103, 107, 254], "101": [51, 75, 97, 107, 175, 254], "001": [51, 71, 97, 150, 254], "statist": [51, 68, 75, 236, 247, 287], "generate_grai": 51, "0000": 51, "0001": [51, 71], "0011": [51, 62], "0010": 51, "0110": 51, "0111": [51, 175], "0101": [51, 175], "0100": 51, "1100": 51, "1101": 51, "1111": 51, "1110": 51, "1010": 51, "1011": 51, "1001": 51, "nijenhui": 51, "wilf": [51, 66, 234], "1978": [51, 58, 186, 210], "r45": 51, "knuth": [51, 59, 251], "2011": [51, 59, 92, 103, 107, 198, 225], "art": [51, 59, 203, 216, 218, 251], "vol": [51, 59, 68, 72, 75, 92, 103, 118, 127, 211, 212, 226, 251, 254], "addison": [51, 59, 107, 210], "weslei": [51, 59, 107, 210], "r46": 51, "brgc": 51, "6th": [51, 107], "unrank": [51, 56, 58, 59, 61], "r47": 51, "archiv": [51, 59, 68, 72, 75, 84, 94, 107, 147, 205, 228, 229, 236, 254, 289], "20200224064753": 51, "statweb": 51, "stanford": 51, "susan": 51, "s208": 51, "node12": 51, "tail": [51, 66, 67, 207, 236], "00010": 51, "random_bitstr": 51, "bitlist": [51, 62], "gray_to_bin": 51, "endian": 51, "bin_to_grai": 51, "get_subset_from_bitstr": 51, "bitstr": 51, "graycode_subset": 51, "group_construct": 52, "directproduct": [52, 55], "__mul__": [52, 58, 98, 103, 207, 211], "shift": [52, 58, 59, 61, 68, 75, 78, 82, 84, 97, 202, 207, 209, 212, 219, 226, 234, 236], "gn": 52, "named_group": [52, 55, 57, 58, 64, 65], "cyclicgroup": [52, 55, 58], "perm_group": [52, 57, 58, 59, 64, 65], "group_numb": 53, "is_nilpotent_numb": 53, "r48": 53, "randprim": [53, 107], "pakianathan": 53, "shankar": 53, "monthli": [53, 68, 103], "107": [53, 210], "631": 53, "634": 53, "is_abelian_numb": 53, "r49": 53, "is_cyclic_numb": 53, "r50": 53, "polyhedron": [54, 58, 94, 254, 273], "prufer": [54, 273], "grai": [54, 62, 95, 150, 196, 202, 273], "galoi": [54, 206, 207, 209, 212, 273], "nilpot": [54, 58, 103, 273], "abelian": [54, 55, 58, 96, 186, 203, 273], "cyclic": [54, 55, 58, 59, 60, 70, 98, 107, 242, 254, 273], "polycycl": [54, 58, 273], "symmetricgroup": [55, 57, 58, 64, 65], "transposit": [55, 58, 59, 68, 98, 100, 238], "is_group": [55, 58], "generate_schreier_sim": [55, 58], "af": [55, 58, 64, 148], "dihedralgroup": [55, 58, 65], "alternatinggroup": [55, 58, 64], "r51": 55, "symmetric_group": 55, "generators_and_rel": 55, "d_n": [55, 96, 212], "gon": 55, "bab": 55, "generate_dimino": [55, 58], "perm": [55, 57, 58, 59, 60, 65, 72, 98, 100, 103, 237], "cyclic_form": [55, 59, 60], "r52": 55, "dihedral_group": [55, 58], "ex": [55, 94, 118, 130, 206, 211, 212, 242, 250], "r53": 55, "armstrong": 55, "abeliangroup": [55, 58], "cyclic_ord": 55, "r54": 55, "groupprop": [55, 58], "subwiki": [55, 58], "structure_theorem_for_finitely_generated_abelian_group": 55, "multiset_partit": [56, 72, 92, 251, 254], "rg": 56, "growth": [56, 107, 209, 283], "from_rg": 56, "abcd": [56, 60, 181, 238, 254, 257], "cbead": 56, "sort_kei": [56, 67, 232], "ti": [56, 59, 67, 107], "integerpartit": [56, 254], "summand": [56, 211], "r55": 56, "partition_": [56, 72], "28number_theori": 56, "as_dict": [56, 206, 212], "as_ferr": 56, "char": 56, "ferrer": 56, "next_lex": [56, 59], "lexic": [56, 161, 254], "prev_lex": 56, "random_integer_partit": 56, "85": [56, 71, 72, 103, 107, 133, 179, 201, 236], "rgs_gener": 56, "37": [56, 68, 73, 77, 103, 107, 111, 201, 216, 229], "52": [56, 72, 107, 110, 111, 201, 215, 229, 232, 254, 283], "151": 56, "203": [56, 72], "rgs_enum": 56, "rgs_unrank": 56, "rgs_rank": 56, "pcgroup": 57, "pcg": 57, "pc_seri": [57, 58], "polycyl": 57, "pc_present": 57, "pc_sequenc": [57, 58], "miss": [57, 58, 84, 216, 234, 249, 293], "adjac": [57, 58, 59, 67, 72, 117, 153, 205, 254], "der": [57, 58], "relative_ord": [57, 58], "polycyclic_group": [57, 58], "gen": [57, 58, 63, 64, 65, 67, 103, 203, 206, 207, 209, 211, 212, 213, 214, 222, 228, 231, 234], "is_ident": [57, 59, 67], "poss": [57, 133, 200], "pc_group": 57, "a_j": [57, 75, 92, 186, 209, 218, 226], "notin": [57, 92, 224], "_order": 57, "minimal_uncollected_subword": 57, "subword_index": 57, "i_1": [57, 181, 212, 237], "a_1": [57, 58, 68, 75, 89, 92, 98, 103, 118, 181, 186, 204, 209, 226, 229, 232, 236, 293], "i_r": 57, "a_r": [57, 226], "i_2": [57, 181, 212], "s_": [57, 63, 131, 209], "s_j": [57, 96, 209], "x3": [57, 67, 72, 206, 232, 236], "collected_word": 57, "free_to_perm": 57, "pictur": [57, 216], "x_3x_2": 57, "x_3x_1": 57, "x_2x_1": 57, "x_3x_0": 57, "x_2x_0": 57, "x_1x_0": 57, "varii": 57, "derived_seri": [57, 58], "pc_resent": 57, "k_arrai": 57, "array_form": [57, 59, 60, 238], "v_arrai": 57, "e_1": [57, 103, 203, 209, 212], "e_n": [57, 72, 96, 103, 157, 203, 212], "exponent_vector": 57, "leading_expon": 57, "dup": [58, 207], "pn": [58, 135, 145], "motion": [58, 121, 125, 126, 127, 130, 133, 134, 135, 136, 138, 140, 141, 142, 143, 144, 145, 148, 149, 195, 196, 199, 200, 236], "front": [58, 67, 133, 134, 150, 180, 207, 209, 212, 216, 228, 293], "face": [58, 60, 80, 94, 131, 209, 213, 216, 229, 271, 289], "rubik": 58, "3674160": 58, "pgroup": [58, 60], "p10": 58, "make_perm": 58, "r56": 58, "eick": [58, 65], "brien": [58, 65], "r57": 58, "seress": 58, "r58": 58, "schreier_vector": 58, "r59": 58, "nielsen_transform": 58, "product_replacement_algorithm": 58, "r60": 58, "frank": [58, 59, 103, 254], "celler": 58, "charl": 58, "leedham": 58, "scott": 58, "murrai": [58, 205], "alic": [58, 68], "niemey": 58, "r61": 58, "block_": 58, "28permutation_group_theori": 58, "r62": 58, "algorithmist": 58, "union_find": 58, "r63": 58, "multiply_transitive_group": 58, "r64": 58, "center_": 58, "28group_theori": 58, "centralizer_and_norm": 58, "derived_subgroup": 58, "nilpotent_group": 58, "colost": 58, "hulpk": 58, "cgt": 58, "cgtnote": 58, "__contains__": 58, "__weakref__": [58, 98], "weak": [58, 67, 98, 126, 206, 209], "_coset_repres": 58, "hg": 58, "transvers": [58, 63, 65, 154, 155], "coset_transvers": 58, "_distinct_primes_lemma": 58, "_element": 58, "_eval_is_alt_sym_monte_carlo": 58, "05": [58, 89, 115, 198, 201], "mont": 58, "carlo": 58, "n_ep": 58, "_check_cycles_alt_sym": [58, 65], "_eval_is_alt_sym_na": 58, "only_sym": 58, "only_alt": 58, "_p_elements_group": 58, "_random_pr_init": 58, "_random_prec_n": 58, "modif": [58, 73, 103, 235, 236, 251], "69": [58, 103, 205, 234, 251], "_random_gen": 58, "accumul": [58, 247, 251], "random_pr": 58, "chosen": [58, 59, 68, 69, 80, 81, 103, 107, 110, 149, 183, 185, 186, 202, 203, 207, 209, 211, 216, 223, 226, 232, 236, 247, 261], "gh": [58, 204, 235, 242], "eventu": [58, 75, 94, 202, 203, 223, 249, 254], "_sylow_alt_sym": 58, "sylow": 58, "p_1": [58, 63, 68, 85, 107, 199, 226, 229], "p_2": [58, 68, 85, 107, 199, 226], "p_p": 58, "sylow_subgroup": 58, "is_alt_sym": [58, 65], "_union_find_merg": 58, "not_rep": 58, "atkinson": 58, "83": [58, 215], "87": [58, 73, 103, 107], "minimal_block": 58, "_union_find_rep": 58, "r65": 58, "r71": 58, "compress": [58, 103, 106, 113], "r67": 58, "r73": [58, 59], "_verifi": 58, "_h": [58, 235], "gens_k": 58, "rels_k": 58, "gens_h": 58, "inject": [58, 67, 203, 207, 212, 289], "homomorph": 58, "rels_h": 58, "strong_present": 58, "abelian_invari": 58, "t_1": [58, 72, 229], "t_2": [58, 72, 229], "t_r": [58, 146, 242], "542": 58, "adopt": [58, 242], "schreier": [58, 63, 65], "sim": [58, 63, 65, 92], "b_1": [58, 65, 75, 89, 92, 203, 226, 229, 232, 293], "b_2": [58, 65, 75, 89, 226, 232], "dot": [58, 59, 63, 65, 68, 80, 82, 89, 98, 103, 117, 126, 128, 130, 133, 134, 135, 138, 139, 140, 143, 144, 145, 148, 165, 190, 191, 193, 196, 199, 200, 201, 203, 204, 209, 212, 216, 235, 236, 254, 261, 265, 267, 268], "b_k": [58, 65, 68, 72, 75, 218, 219], "strong": [58, 63, 64, 65, 107, 108], "89": [58, 65, 94], "55": [58, 70, 72, 103, 201, 202, 212, 229], "57": [58, 103, 107, 236], "coset": [58, 63, 211], "strong_gen": [58, 64, 65], "basic_transvers": [58, 65], "basic_orbit": [58, 65], "basic_stabil": 58, "baseswap": 58, "po": [58, 92, 97, 98, 128, 146, 148, 207, 234], "strong_gens_distr": [58, 65], "swap": [58, 59, 60, 98, 103, 161, 165, 174, 236, 254], "orbit": [58, 65, 181, 182, 184], "b_": [58, 63, 65, 67, 72, 75, 92, 100, 117, 218, 226, 229, 237, 238], "b_i": [58, 63, 65, 92, 203, 226], "la": [58, 148, 186], "vega": 58, "testutil": [58, 64, 65], "_verify_bsg": [58, 64, 65], "schreier_sim": [58, 64, 65], "bsg": [58, 63, 65, 242], "102": [58, 103], "98": [58, 68, 147, 212, 232], "pseudocod": 58, "beta_": 58, "foral": [58, 66, 69, 186], "zg": 58, "gz": 58, "c_g": 58, "sg": [58, 236, 242], "is_subgroup": 58, "subgroup_search": 58, "hgh": 58, "closur": [58, 64, 90, 161, 207, 211, 224], "composition_seri": 58, "h_0": [58, 63], "h_1": [58, 63, 235], "h_2": [58, 235], "1024": [58, 216, 236], "512": [58, 75], "128": [58, 72, 75, 77, 107, 210, 216], "243": [58, 75, 234], "81": [58, 72, 77, 98, 103, 107, 131, 133, 201, 215], "conjugacy_class": 58, "xax": 58, "s_3": 58, "feasibl": [58, 117], "resiz": [58, 59, 98, 100], "coset_factor": 58, "factor_index": 58, "_basic_orbit": 58, "u1": [58, 107, 131, 133, 134, 135, 136, 138, 139, 143, 145, 148, 191, 193, 195, 196, 199, 232], "u2": [58, 106, 107, 131, 133, 134, 135, 136, 138, 139, 143, 148, 191, 195, 199, 232], "_strip": [58, 65], "coset_rank": 58, "lexicograph": [58, 59, 62, 63, 67, 209, 212, 254], "coset_unrank": 58, "standardis": [58, 206], "subsect": [58, 268], "compris": [58, 68, 100, 117, 128, 146, 149, 212, 254], "g_0": [58, 229], "g_1": [58, 212, 223, 229, 232], "g_2": [58, 96, 223, 232], "g_i": [58, 223], "g_k": 58, "tetrahedron": [58, 60], "r69": 58, "axiom": [58, 203], "doy": 58, "sc": [58, 94], "thesi": [58, 67, 223, 261], "generator_product": 58, "sn": [58, 59, 66, 89], "is_abelian": 58, "_random_prec": 58, "82": [58, 94, 103, 236], "proport": [58, 68, 223, 255], "226": 58, "227": 58, "is_altern": 58, "quicker": [58, 107], "taxonomi": 58, "is_cycl": 58, "p_": [58, 63, 67, 94, 186, 229, 232, 237], "p_i": [58, 63, 107], "equiv": [58, 68, 72, 107, 211, 226, 229], "pmod": [58, 67, 68, 72, 103, 107, 226], "p_j": [58, 63], "r70": 58, "35": [58, 61, 70, 72, 80, 81, 94, 103, 107, 133, 211, 216, 229, 232, 236], "rose": 58, "is_dihedr": 58, "di1": 58, "827273": 58, "di2": 58, "kconrad": [58, 236], "uconn": [58, 236], "blurb": [58, 236], "grouptheori": 58, "di3": 58, "dihedral2": 58, "di4": 58, "is_elementari": 58, "is_nilpot": [58, 103], "lower_central_seri": 58, "is_solv": 58, "is_norm": [58, 179], "gr": 58, "is_perfect": [58, 107], "is_polycycl": 58, "is_primit": [58, 207, 212], "cardin": [58, 59, 62, 203, 224], "badli": 58, "random_stab": 58, "is_symmetr": [58, 98], "is_transit": 58, "is_trivi": 58, "cba": [58, 237, 254], "mainli": [58, 75, 103, 108, 186, 196, 209, 226, 229, 232], "max_div": 58, "siev": [58, 107], "nonempti": [58, 254], "moreov": [58, 68, 92, 197, 203, 204, 209, 217, 266], "congruenc": [58, 67, 107, 226, 229], "p_0": [58, 63, 85, 226, 229], "intransit": 58, "normal_closur": 58, "adjoin": [58, 204], "yx": [58, 191, 200], "73": [58, 66, 67, 80, 107, 232], "74": [58, 72, 107], "orb": 58, "orbit_transvers": 58, "orbit_rep": 58, "send": [58, 67, 68, 73, 107, 203, 232, 234], "79": [58, 59, 111], "pointwise_stabil": 58, "pointwis": [58, 65], "p_k": [58, 107], "p20": 58, "stab": 58, "schreier_sims_increment": [58, 65], "polycyclicgroup": 58, "eliminate_gen": 58, "gen_count": 58, "b1": [58, 63, 75, 107, 110, 111, 122, 131, 148, 191, 207, 216, 226, 229, 232, 267], "b_r": 58, "slp_dict": 58, "93": [58, 210], "schreier_sims_random": [58, 65], "consec_succ": 58, "consec": 58, "_succ": 58, "97": [58, 67, 68, 107, 209], "sift": [58, 65, 254], "amend": 58, "unsuccess": [58, 65], "accordingli": [58, 204, 211], "halt": 58, "signifi": [58, 67, 110, 212, 236], "g_t": 58, "leq": [58, 66, 68, 75, 92, 103, 107, 201, 209, 211, 222, 223, 229, 236], "prop": [58, 211], "init_subgroup": 58, "supergroup": 58, "sought": [58, 107, 166, 176, 228, 234, 235], "prune": 58, "prop_even": 58, "lengthi": 58, "114": [58, 107], "117": [58, 75], "terribl": 58, "crucial": [58, 66, 206], "len1": 58, "len2": 58, "len3": 58, "transitivity_degre": 58, "fold": [58, 67, 73, 216, 223, 228], "a_2": [58, 68, 89, 103, 209, 226, 229, 232, 236, 293], "a_k": [58, 68, 213, 219], "r74": 59, "pretty_print": [59, 95, 128, 130, 133, 134, 138, 139, 140, 142, 143, 144, 146, 149, 191, 193, 195, 196, 199, 200, 216], "understood": [59, 107, 186, 203, 207, 212], "economi": 59, "caution": [59, 67, 73, 216, 228], "indexerror": [59, 103, 212], "autos": [59, 106], "watch": 59, "print_cycl": 59, "econom": [59, 94, 254], "retain": [59, 67, 73, 75, 94, 109, 212, 217, 225, 228], "biject": [59, 61, 68, 98, 203], "full_cyclic_form": 59, "rmul": 59, "unrank_lex": 59, "r78": 59, "zo42": 59, "from_sequ": 59, "a1": [59, 63, 67, 95, 98, 107, 111, 131, 148, 155, 232, 236, 237, 267, 293], "a2": [59, 63, 67, 96, 98, 107, 111, 131, 148, 155, 205, 236, 237, 267, 293], "a3": [59, 63, 67, 96, 98, 148, 267, 293], "perfectli": [59, 66, 67, 68, 209, 212, 215], "skiena": 59, "ma": [59, 66, 136], "1990": [59, 92, 226, 261], "r75": 59, "wendi": 59, "myrvold": 59, "ruskei": [59, 254], "2001": [59, 107, 210], "lett": [59, 103], "septemb": [59, 251], "281": 59, "284": [59, 107], "1016": [59, 103, 254], "s0020": 59, "0190": 59, "01": [59, 67, 71, 131, 175, 210, 228, 254], "00141": 59, "r76": 59, "kreher": 59, "stinson": 59, "1999": [59, 103, 210, 215, 232], "r77": 59, "graham": [59, 72, 73, 107], "patashnik": 59, "foundat": [59, 210, 211], "1994": [59, 209, 210, 212], "php": [59, 107, 229, 236], "oldid": 59, "499948155": 59, "product_and_invers": 59, "r79": 59, "lehmer_cod": 59, "appliedpermut": 59, "magic": [59, 228, 247, 285], "_array_form": 59, "ascent": 59, "ie": [59, 229], "descent": [59, 229], "fg": [59, 69, 232, 235], "gf": [59, 68, 113, 203, 205, 206, 209, 211], "r80": 59, "commutes_with": [59, 242], "cycle_structur": 59, "from_inversion_vector": 59, "get_adjacency_dist": 59, "n_adj": 59, "reev": 59, "colin": 59, "landscap": 59, "annal": 59, "86": [59, 103, 147, 215, 225], "473": 59, "josephu": 59, "get_precedence_matrix": 59, "get_precedence_dist": 59, "get_adjacency_matrix": 59, "get_positional_dist": 59, "inversion_vector": 59, "lesser": [59, 113, 212], "lehmer": 59, "ith": [59, 96, 107, 207, 213, 235, 236], "variat": [59, 67, 209, 223, 232], "r81": 59, "eng": 59, "chula": 59, "prabha": 59, "algo2008": 59, "htm": [59, 75, 94, 229], "is_singleton": 59, "is_odd": 59, "shuffl": [59, 103, 293], "012345": 59, "345": 59, "253": 59, "2531": 59, "25314": 59, "253140": 59, "r82": 59, "flavius_josephu": 59, "r83": 59, "josephus_problem": 59, "r84": 59, "20171008094331": 59, "wou": 59, "burtonl": 59, "trim": [59, 145], "unmov": 59, "mul_inv": 59, "next_nonlex": 59, "nonlex": 59, "rank_nonlex": 59, "unrank_nonlex": 59, "next_trotterjohnson": [59, 254], "trotter": 59, "johnson": [59, 103], "generate_bel": [59, 254], "rank_trotterjohnson": 59, "unrank_trotterjohnson": 59, "_af_par": 59, "pseudo": [59, 103, 107, 207, 209, 212], "inv_perm": 59, "enforc": [59, 133], "rmul_with_af": 59, "ascend": [59, 94, 254], "r85": 59, "transposition_": 59, "flexibl": [59, 67, 130, 131, 148, 199, 202, 206, 235, 283], "cn": [59, 216, 292], "2n": [59, 66, 72, 75, 94, 98, 113, 118, 144, 201, 219, 226], "dn": [59, 236], "polyhedr": 60, "psg": 60, "platon": 60, "solid": [60, 81, 125, 202, 271], "tetrahedr": 60, "octahedr": 60, "icosahedr": 60, "r86": 60, "polyhedralgroup": 60, "polyhedra": 60, "h5": 60, "heinz": 61, "caylei": [61, 98], "r87": 61, "labeledtre": 61, "tree_repr": 61, "prufer_rank": 61, "prev": [61, 67], "prufer_repr": 61, "to_pruf": 61, "778": 61, "779": 61, "777": [61, 70], "1296": 61, "to_tre": 61, "r88": 61, "hamberg": 61, "erlend": 61, "2010": [61, 233, 254], "06": [61, 67, 133, 201, 236], "compact": [61, 67, 114, 126, 148, 179, 196, 212, 216, 234, 251], "next_binari": 62, "prev_binari": 62, "bitlist_from_subset": 62, "subset_from_bitlist": 62, "superset_s": 62, "iterate_binari": 62, "iterate_graycod": 62, "prev_grai": 62, "next_grai": 62, "next_lexicograph": 62, "prev_lexicograph": 62, "rank_binari": 62, "unrank_binari": 62, "rank_grai": 62, "unrank_grai": 62, "rank_lexicograph": 62, "43": [62, 103, 107, 110, 111, 236, 293], "super_set": 62, "subset_indic": 62, "ksubset": 62, "itertool": [62, 254], "tensor_can": [63, 242], "msym": 63, "contravari": [63, 103, 242, 243], "covari": [63, 69, 103, 236, 242, 243], "d0": 63, "base_i": 63, "gens_i": 63, "n_i": [63, 209, 234], "sym_i": 63, "canonicalize_na": 63, "exchang": [63, 68, 103, 201, 205, 254], "anticommut": [63, 168, 170, 180, 181, 242, 278], "canonical_fre": 63, "slot": [63, 165, 237, 241, 242, 288], "tensor_gen": 63, "list_free_indic": 63, "double_coset_can_rep": 63, "reintroduc": 63, "antisymmetr": [63, 69, 98, 181, 242], "d2": [63, 191, 203, 223, 236, 254, 261], "ord": [63, 68, 103], "t_c": 63, "get_symmetric_group_sg": [63, 242], "bsgs_direct_product": 63, "base2a": 63, "gens2a": 63, "t0": 63, "t1": [63, 83, 84, 107, 122, 128, 229, 236], "a_m": [63, 232], "a_n": [63, 68, 75, 92, 96, 186, 204, 209, 211, 219, 229, 232, 293], "_a": [63, 75, 181, 212], "_b": [63, 75, 181], "base_f": 63, "gens_f": 63, "base1": 63, "gens1": 63, "base_a": 63, "gens_a": 63, "sgen": 63, "s_transvers": 63, "butler": [63, 242], "portug": [63, 242], "grow": [63, 67, 92, 103, 107, 206, 209], "observ": [63, 89, 92, 170, 200, 203, 226, 229, 232, 236, 270, 293], "ind": [63, 218, 242], "d3": [63, 223], "a0": [63, 232, 293], "a5": [63, 67], "leftrightarrow": 63, "_af_rmul": 63, "t_": [63, 72], "b0": [63, 75, 207, 226, 232], "d_": [63, 226], "p0": [63, 77, 211, 232], "dbase": 63, "recomput": [63, 212], "d_i": [63, 92, 186], "s_0": 63, "d_0": [63, 68], "b_0": [63, 68, 72, 226, 229, 232], "b_j": [63, 65, 75, 92, 226], "sx": 63, "trace": [63, 98, 100, 118, 148, 209, 216, 236, 237, 238, 240, 254, 289], "h_n": [63, 75, 94, 212, 235], "tab1": 63, "get_transvers": 63, "antisym": 63, "base2": 63, "gens2": 63, "_cmp_perm_list": 64, "ls1": 64, "ls2": 64, "_naive_list_centr": 64, "_verify_centr": 64, "_verify_normal_closur": 64, "_base_ord": 65, "base_ord": 65, "backtrack": 65, "108": [65, 111], "132": [65, 72, 191], "r89": 65, "_distribute_gens_by_bas": 65, "_strong_gens_from_distr": 65, "_orbits_transversals_from_bsg": 65, "_handle_precomputed_bsg": 65, "transversals_onli": 65, "slp": 65, "_remove_gen": 65, "new_gen": 65, "r90": 65, "r91": 65, "recurr": [66, 72, 89, 103, 211, 222, 228, 232, 236, 256], "annihil": [66, 85, 86, 90, 157, 181, 234], "is_hypergeometr": 66, "binomi": [66, 67, 71, 72, 75, 107, 212, 216, 221, 228, 232, 236, 254, 293], "ff": [66, 68, 72, 201, 204, 205, 206, 211, 212], "rise": [66, 72, 75, 201, 228, 232, 236, 265], "hypersimp": [66, 228], "quotient": [66, 67, 70, 73, 107, 203, 204, 206, 209, 212, 226, 228, 232], "dummy_vari": 66, "karr": 66, "exclus": [66, 67, 73, 97, 103, 209, 285], "typeset": [66, 216], "seemingli": [66, 235], "r92": 66, "michael": [66, 210, 215], "april": 66, "1981": [66, 210], "305": 66, "350": [66, 128], "dl": [66, 200, 207, 210, 228], "1145": [66, 207, 210, 228], "322248": 66, "322255": 66, "r93": 66, "sigma_not": 66, "r94": 66, "empty_sum": 66, "euler_maclaurin": [66, 71], "eval_integr": 66, "maclaurin": [66, 71], "endpoint": [66, 67, 71, 80, 197, 224, 268], "28333333333333": 66, "sstr": [66, 196, 216], "full_prec": [66, 216], "26629073187415": 66, "0175000000000000": 66, "soon": [66, 67, 131, 186, 213], "eval_zeta_funct": 66, "is_absolutely_converg": 66, "sequence_term": 66, "is_converg": 66, "r95": 66, "absolute_converg": 66, "analogi": [66, 209], "prod_": [66, 72, 75, 92, 107, 186, 226], "diverg": [66, 75, 150, 192, 261, 264], "dirichlet": [66, 75, 236], "r96": 66, "convergence_test": 66, "reverse_ord": 66, "selector": [66, 98, 228, 254], "s0": [66, 90, 92, 153], "expr_with_intlimit": [66, 94], "exprwithintlimit": [66, 94], "reorder_limit": 66, "r97": 66, "walli": 66, "w2": [66, 155], "w2e": 66, "risingfactori": [66, 72, 75, 216, 218], "combsimp": [66, 67, 72, 228], "pe": 66, "gammasimp": [66, 67, 228], "r98": 66, "r99": 66, "capital_pi_not": 66, "r100": 66, "empty_product": 66, "r101": 66, "infinite_product": 66, "r102": 66, "expr_with_limit": [66, 94], "exprwithlimit": [66, 94], "change_index": 66, "trafo": 66, "newvar": 66, "mapsto": [66, 92, 98, 211], "p3": [66, 77, 79, 80, 82, 83, 117, 128, 202, 206, 225, 236], "has_empty_sequ": [66, 94], "has_reversed_limit": [66, 94], "has_finite_limit": [66, 94], "____": [66, 71, 94, 153, 204, 217, 236, 254, 294], "___": [66, 71, 94, 95, 103, 204, 228, 236, 241, 254, 292], "rubric": [66, 67], "_____": [66, 236], "gosper": 66, "gosper_norm": 66, "monic": [66, 75, 203, 204, 207, 209, 211, 212, 215], "gcd": [66, 67, 68, 103, 107, 177, 206, 207, 210, 211, 212, 216, 228, 229], "gosper_term": 66, "f_k": [66, 126, 143, 209], "g_n": [66, 72, 212], "f_n": [66, 72, 75, 203, 209, 212, 232], "gosper_sum": 66, "r103": 66, "marko": 66, "petkovsek": [66, 234], "herbert": 66, "doron": 66, "zeilberg": [66, 234], "ak": [66, 218], "peter": [66, 72, 75, 107, 147, 198, 212, 254], "ltd": 66, "welleslei": 66, "usa": [66, 210], "1997": [66, 92, 107, 210, 226], "convert_xor": [67, 109], "09": [67, 115, 201], "xor": [67, 70, 97, 109, 216, 285], "sympifyerror": 67, "coerc": [67, 145, 209], "cooper": 67, "shouldn": [67, 213], "unsanit": [67, 255, 282], "bitcount": 67, "improperli": 67, "unbound": [67, 241], "23903": 67, "fallback": [67, 95, 181, 196, 206, 216, 234], "ast": [67, 216], "mylist1": 67, "mylist": 67, "mylist2": 67, "xxx": [67, 94, 103, 254, 256], "autosimplif": [67, 225, 228], "kern": 67, "r106": 67, "7649": 67, "r105": 67, "r109": 67, "r107": 67, "r108": 67, "r110": 67, "r111": 67, "r112": 67, "r104": 67, "negativeinfin": [67, 216], "complexinfin": [67, 117], "_assumptions_orig": 67, "recreat": [67, 125], "isfinit": 67, "__cacheit": 67, "maxsiz": 67, "cacheit": 67, "sympy_use_cach": 67, "_arg": [67, 73], "as_mut": [67, 99, 100], "as_content_primit": [67, 103, 204, 212], "stub": 67, "as_dummi": [67, 94], "_0": [67, 72, 92, 98, 103, 212, 255], "_r": [67, 181, 226, 235], "bound_symbol": [67, 94], "typeinfo": 67, "truli": [67, 75, 186], "piec": [67, 71, 226, 249], "numbersymbol": [67, 216], "scan": [67, 205], "appliedundef": 67, "canonical_vari": 67, "class_kei": 67, "sorted_class": 67, "eg": [67, 131, 188, 235], "fromit": 67, "has_fre": 67, "has_xfre": 67, "exp_polar": [67, 73, 75, 226], "dif": 67, "_prec": 67, "r_": [67, 119, 182, 213], "repl_dict": 67, "rcall": [67, 69], "simul": [67, 131, 148, 215], "abus": [67, 242], "succe": [67, 92, 97, 107, 171, 211, 234], "newtyp": 67, "intuit": [67, 146, 186, 232], "is_mul": 67, "is_add": [67, 235], "mysin": [67, 255, 282], "_eval_rewrite_as_": 67, "_eval_rewrite_as_co": 67, "tie": [67, 254], "delai": [67, 115, 145, 225, 247, 283], "unsort": [67, 121, 190], "333333333333333333333": 67, "333333333333333314830": 67, "wildcard": [67, 228], "evalfmixin": 67, "registri": 67, "metaprogram": 67, "mostli": [67, 73, 94, 103, 148, 176, 199, 203, 215, 216, 226, 234, 292], "__truediv__": [67, 207], "metaclass": 67, "class_nam": 67, "mysingleton": 67, "_eval_is_g": 67, "_eval_is_eq": 67, "args_cnc": 67, "cset": 67, "split_1": 67, "suppress": [67, 109, 245, 252], "as_coeff_add": 67, "dep": [67, 232], "as_coeff_expon": 67, "as_coeffici": 67, "zz": [67, 72, 89, 90, 94, 100, 103, 104, 107, 128, 191, 200, 203, 204, 205, 206, 209, 211, 212, 213, 214, 231], "coeff_monomi": [67, 212], "polytool": [67, 212, 235], "as_coefficients_dict": 67, "inquiri": 67, "expand_mul": [67, 92], "121": [67, 72, 107, 117, 191, 234], "84": [67, 71, 107], "separatevar": [67, 228, 232], "n3": [67, 131], "logx": [67, 223], "cdir": 67, "_eval_as_leading_term": 67, "as_numer_denom": [67, 234], "as_ordered_factor": 67, "as_ordered_term": 67, "as_powers_dict": 67, "lost": 67, "as_real_imag": [67, 73, 98, 217], "as_term": 67, "aseri": 67, "hir": 67, "asymptot": [67, 92, 117, 283], "hierarch": 67, "normalis": [67, 218], "induc": [67, 98, 211, 225, 254], "gruntz": [67, 218], "majorli": 67, "mrv": [67, 223], "overal": [67, 188, 202, 234], "till": [67, 110, 111, 131, 232], "r113": 67, "dominik": [67, 218], "proc": [67, 207, 234], "1993": [67, 210], "symp": [67, 207], "239": 67, "244": [67, 209], "r114": 67, "p90": 67, "r115": 67, "asymptotic_expans": 67, "_first": [67, 73], "factor_term": [67, 139, 212, 225, 228], "distribute_order_term": [67, 228], "compute_leading_term": 67, "could_extract_minus_sign": 67, "signsimp": [67, 139, 228], "failing_express": 67, "modulu": [67, 68, 70, 75, 77, 83, 98, 107, 110, 111, 203, 207, 209, 211, 212, 215, 235], "power_bas": [67, 98], "power_exp": [67, 98], "multinomi": [67, 98, 107, 236], "extract_addit": 67, "extract_multipl": 67, "extract_branch_factor": 67, "allow_half": 67, "fourier_seri": [67, 219], "geto": 67, "getn": 67, "mod_invers": [67, 212], "is_algebraic_expr": 67, "is_rational_funct": 67, "r116": 67, "algebraic_express": 67, "is_const": 67, "constanc": 67, "failing_numb": 67, "is_meromorph": 67, "meromorph": [67, 75], "multivalu": [67, 73], "cut": [67, 72, 73, 75, 83, 92, 203, 226, 251, 257, 293], "hit": [67, 288], "is_polynomi": 67, "rational_funct": 67, "leadterm": 67, "xlim": [67, 202], "lseri": 67, "exaxmpl": 67, "nseri": 67, "_eval_nseri": 67, "innermost": 67, "disadvantag": 67, "met": [67, 113, 229, 235, 250, 293], "poleerror": 67, "nsimplifi": [67, 71, 228], "radsimp": [67, 228], "removeo": [67, 148, 216, 283], "chop": [67, 71, 75, 98, 103, 234, 282], "lazi": [67, 100, 212], "smooth": [67, 71, 107, 218], "taylor_term": [67, 73], "previous_term": [67, 73], "wildfunct": 67, "dummy_index": 67, "_dummy_10": 67, "contigu": [67, 226, 249], "x4": [67, 72, 206], "x5": [67, 72, 206], "x6": [67, 206], "x7": [67, 206], "x8": [67, 206], "x9": [67, 206], "x50": 67, "x51": 67, "y3": [67, 206], "y4": 67, "xa": [67, 204, 209], "xb": [67, 257], "xc": [67, 180, 257], "disambigu": 67, "x01": 67, "x02": 67, "x11": 67, "x12": 67, "escap": [67, 109, 202, 216, 257], "undefinedfunct": [67, 193, 216, 248, 255], "f821": [67, 250], "cofactor": [67, 103, 207, 209, 212], "lcm": [67, 107, 207, 209, 212, 216], "50000000000000": [67, 71], "100000000000000000000": 67, "1e20": 67, "00000000000000e": 67, "23456789123456789": 67, "23456789123457": 67, "00100": 67, "sent": [67, 94, 228, 234], "789": [67, 107], "123_456": 67, "123456789": 67, "12e": 67, "012": 67, "60e2": 67, "6000": 67, "600e": 67, "125": [67, 71, 94, 107, 207, 222, 229], "099609": 67, "12500": 67, "12500000000000000000": 67, "5404319552844595": 67, "54": [67, 103, 111, 209, 215, 254], "29999999999999998890": 67, "30000000000000000000": 67, "_mpf_": [67, 206], "4915": 67, "70": [67, 68, 84, 94, 103, 107, 215, 216, 229, 236, 257], "307": 67, "mpf": [67, 206, 207], "is_float": 67, "unprejud": 67, "3602879701896397": 67, "18014398509481984": [67, 228], "limit_denomin": 67, "320": 67, "75": [67, 70, 205, 236, 261], "use_tri": [67, 107], "use_rho": [67, 107], "use_pm1": [67, 107], "factorint": [67, 107, 211, 212, 251], "trial": [67, 107, 209, 221, 225, 232, 236], "max_denomin": 67, "1000000": [67, 107], "141592653589793": 67, "311": [67, 107], "discard": [67, 211, 216, 235], "99999999999999999999": 67, "algebraicnumb": [67, 207, 211, 215], "hookrightarrow": 67, "minpoli": [67, 206, 207, 211], "dmp": [67, 203, 207, 212], "anp": [67, 206, 207, 211, 212], "to_list": [67, 205, 207], "minpoly_of_el": 67, "414213562": 67, "scratch": [67, 186], "6x": [67, 209], "to_number_field": [67, 211], "to_root": 67, "primitive_el": [67, 206, 207, 211], "knew": [67, 293], "golden": [67, 71, 107], "5th": [67, 148, 209, 211], "cyclotom": [67, 207, 209, 210, 211, 212], "cyclotomic_poli": [67, 211, 212], "61803398874989": 67, "2i": 67, "a6": 67, "a6_wrong": 67, "309016994374947": 67, "951056516295154": 67, "field_el": 67, "is_alias": 67, "is_primitive_el": 67, "native_coeff": 67, "to_algebraic_integ": 67, "to_primitive_el": 67, "Its": [67, 73, 83, 148, 179, 205, 209, 216, 224], "a_prim": 67, "number_cl": 67, "realnumb": 67, "igcd": [67, 107, 204], "greatest": [67, 72, 77, 107, 204, 206, 207, 209, 210, 212, 215], "euclid": [67, 209, 210], "r117": 67, "euclidean_algorithm": 67, "ilcm": [67, 107], "seterr": 67, "r118": 67, "r119": 67, "1_": 67, "28number": 67, "negativeon": [67, 73, 288], "r120": 67, "88": [67, 103, 107], "921_": 67, "r121": 67, "one_half": 67, "holder": 67, "ieee": [67, 68], "754": 67, "r122": 67, "affin": [67, 68, 82, 203], "compactif": 67, "r123": 67, "tild": [67, 73, 237], "exp1": [67, 216], "718281828": 67, "napier": 67, "r124": 67, "e_": [67, 72, 103], "28mathematical_const": 67, "r125": 67, "imaginary_unit": [67, 216], "141592654": 67, "circumfer": [67, 77], "diamet": [67, 77], "area": [67, 77, 79, 83, 84, 110, 111, 130], "is_irr": 67, "r126": 67, "mascheroni": [67, 75], "5772157": 67, "recur": 67, "harmon": [67, 72, 107, 119, 160, 201, 216, 278], "lim": [67, 223, 283], "limits_": [67, 201, 218, 287], "ln": [67, 73, 94, 216, 218, 232, 236, 293], "r127": 67, "93mascheroni_const": 67, "catalan": [67, 72, 216], "91596559": 67, "r128": 67, "27s_constant": 67, "goldenratio": [67, 71, 217, 228], "r129": 67, "golden_ratio": 67, "tribonacciconst": 67, "tribonacci": [67, 72], "fibonacci": [67, 71, 72, 107], "predetermin": [67, 247], "8392867552141611326": 67, "r130": 67, "generalizations_of_fibonacci_numb": [67, 72], "tribonacci_numb": [67, 72], "modulo": [67, 68, 72, 104, 107, 177, 203, 205, 206, 207, 209, 211, 212, 213, 215, 216, 219, 228], "r131": 67, "modular_multiplicative_invers": 67, "r132": 67, "extended_euclidean_algorithm": 67, "equal_valu": 67, "verion": 67, "compound": [67, 136, 179], "r133": 67, "20033": 67, "oscil": [67, 278], "conform": [67, 235, 240, 241, 254], "r134": 67, "r135": 67, "zero_to_the_power_of_zero": 67, "r136": 67, "indeterminate_form": 67, "as_base_exp": [67, 73, 74, 254], "expand_power_bas": [67, 228], "integer_nthroot": [67, 73, 107], "floor": [67, 73, 107, 125, 206, 207, 216, 236], "integer_log": 67, "geq": [67, 68, 75, 103, 212, 229, 236, 293], "factor_": [67, 68, 107, 212, 229], "perfect_pow": [67, 107], "infix": 67, "matmul": [67, 100, 205], "as_coef_mul": 67, "undesir": [67, 121, 131, 145, 204, 207, 226], "4596": 67, "5728": 67, "suspect": [67, 107], "5706": 67, "moot": 67, "off": [67, 77, 92, 98, 106, 108, 133, 142, 165, 203, 212, 216, 232, 247, 258, 261, 287], "nb": 67, "sensit": [67, 117, 148, 202, 209, 228, 247], "assocop": 67, "prod": [67, 206, 213, 225], "matadd": [67, 100, 216], "as_coef_add": 67, "extract_leading_ord": 67, "commutative_part": 67, "noncommutative_part": 67, "order_symbol": 67, "subprocess": [67, 216, 247, 248], "dividend": [67, 207], "eager": [67, 255], "61": [67, 68, 72, 83, 103, 107, 212, 218], "712524808": 67, "3744312326": [67, 72], "rop": 67, "validrelationoper": 67, "greaterthan": [67, 216], "lessthan": [67, 216], "strictlessthan": [67, 216, 257], "lt": [67, 212, 257], "my_equ": 67, "my_inequ": 67, "reversedsign": 67, "_eval_eq": 67, "boolalg": [67, 97], "client": [67, 251], "counterpart": [67, 68, 232, 283], "litter": 67, "oddbal": 67, "minor": [67, 77, 103, 216, 247], "caveat": [67, 212, 285], "succinctli": 67, "annoy": 67, "succinct": 67, "r137": 67, "operar": 67, "circuit": [67, 165, 168, 278], "greaterthanobject": 67, "__bool__": 67, "335": 67, "march": 67, "2012": 67, "r138": 67, "r139": 67, "r140": 67, "mdarg": 67, "fgh": 67, "vsin": 67, "vdiff": 67, "narg": [67, 209], "naturals0": [67, 216, 224, 235, 236], "evalul": 67, "fairli": [67, 75, 92, 133, 141, 190, 203], "conserv": [67, 126, 144, 192, 264, 270], "136": [67, 103], "temporarili": 67, "implic": [67, 97, 209], "fx": [67, 69, 202, 232, 233], "fxx": 67, "insconsist": 67, "nonvanish": 67, "_diff_wrt": 67, "_sort_variable_count": 67, "vc": 67, "vsort": 67, "collaps": [67, 175, 228], "vsort0": 67, "vi": 67, "dfx": 67, "equidist": 67, "sq2": 67, "xl": 67, "d2fdxdy": 67, "doit_numer": 67, "z0": [67, 223], "unifi": [67, 149, 205, 207, 209, 211, 212, 224], "zeroth": [67, 211], "idiff": [67, 84], "r141": 67, "legaci": [67, 94, 103, 236], "v5_2": 67, "infunct": 67, "algebraiccomput": 67, "functionclass": [67, 216, 255], "f_real": [67, 74], "f_real_inherit": [67, 74], "is_singular": [67, 74, 90], "holomorph": [67, 74, 92], "superfici": 67, "ss": [67, 207], "denom": [67, 206, 207, 211, 228], "_eval_expand_bas": 67, "_eval_expand_complex": 67, "shut": [67, 212], "unwant": [67, 234, 254], "expand_hint": 67, "_eval_expand_hint": 67, "liabl": [67, 97], "metahint": 67, "myclass": 67, "_eval_expand_doubl": 67, "expand_multinomi": 67, "expand_power_exp": 67, "expand_func": [67, 72, 75], "hyperexpand": [67, 75, 89, 92, 226, 228], "div": [67, 204, 206, 207, 212, 216, 228, 288], "horner": [67, 148, 209, 212], "untouch": 67, "unexpand": [67, 206, 215, 225, 248], "safe": [67, 107, 206, 212, 234, 240, 283], "nfloat": [67, 228], "dkei": 67, "mixin": [67, 254], "maxn": [67, 71, 98], "subresult": [67, 207, 210, 212], "000100000000000000": 67, "precisionexhaust": [67, 71], "maxprec": 67, "quadratur": [67, 71, 94, 232], "oscillatori": [67, 71, 221], "osc": [67, 71], "advers": 67, "1e16": 67, "291": 67, "builtin": [67, 207, 216, 224, 257, 292], "speedup": [67, 103, 108, 209, 213, 255], "framework": [67, 124, 131, 141, 241, 247, 249, 255, 278], "slice": [67, 97, 98, 103, 109, 207, 212, 222, 224, 228, 237, 254], "tuplekind": [67, 98, 224], "parametris": [67, 224], "element_kind": [67, 98, 224], "tuple_count": 67, "setkind": [67, 98], "gcd_term": [67, 212], "isprimit": 67, "_gcd_term": 67, "terms_gcd": [67, 207, 212], "entiti": [67, 77, 80, 81, 83, 84, 92, 131, 146, 197, 235, 270, 279, 289], "broad": [67, 288], "undefinedkind": [67, 98, 224], "lex": [67, 95, 196, 204, 206, 207, 209, 212, 213, 215, 216, 228], "grlex": [67, 95, 196, 207, 212, 215, 216], "grevlex": [67, 95, 196, 204, 209, 212, 215, 216], "rev": 67, "unaffect": [67, 235], "_node": 67, "fastest": [67, 72, 94, 107, 108, 213], "undecor": 67, "breaker": 67, "collis": [67, 106, 216], "wast": [67, 104, 205], "rng": 67, "getstat": 67, "intention": 67, "tn": 67, "td": [67, 216, 292], "randrang": 67, "999": [67, 71], "238": [67, 107], "randint": [67, 103, 209], "ri": [67, 216], "rv": [67, 225, 236, 254], "nonbas": 67, "postord": 67, "descend": [67, 203, 211, 249], "subtre": [67, 216, 251], "cryptograph": 68, "encrypt": 68, "hide": [68, 216], "cipher": 68, "vigener": 68, "hill": [68, 75, 94, 126, 147, 191, 198, 261], "bifid": 68, "rsa": 68, "kid": 68, "elgam": 68, "plaintext": [68, 216], "ciphertext": 68, "monoalphabet": 68, "polyalphabet": 68, "crypto": 68, "az": [68, 117, 229], "hello": [68, 254], "helloworld": 68, "check_and_join": 68, "padded_kei": 68, "puppi": 68, "opqrstuvwxi": 68, "puyoqrstvwx": 68, "artist": 68, "aphras": 68, "ara": 68, "hp": 68, "cycle_list": 68, "mod": [68, 72, 73, 97, 103, 104, 107, 177, 203, 205, 206, 207, 209, 211, 212, 216, 218, 226, 229], "encipher_shift": 68, "msg": [68, 94], "decipher_shift": 68, "gonavybeatarmi": 68, "ct": [68, 96, 209], "hpobwzcfbubsnz": 68, "deciph": 68, "l1": [68, 77, 79, 80, 125, 128, 134, 146, 207, 209, 212, 229, 236], "l2": [68, 79, 80, 125, 128, 134, 167, 183, 207, 209, 236], "caesar": 68, "juliu": 68, "suetoniu": 68, "protect": [68, 216], "militari": 68, "nephew": 68, "augustu": 68, "reportedli": 68, "r142": 68, "caesar_ciph": 68, "r143": 68, "caesarsmethod": 68, "encipher_rot13": 68, "rot13": 68, "caeser": 68, "midwai": 68, "decipher_rot13": 68, "r144": 68, "decrypt": 68, "tbanilorngnezl": 68, "encipher_affin": 68, "_invers": 68, "cx": [68, 111], "recov": [68, 94, 109, 186, 209, 211, 212, 229, 232], "decipher_affin": 68, "r145": 68, "affine_ciph": 68, "reciph": 68, "navi": 68, "beat": 68, "armi": 68, "trobmvenbgbalv": 68, "encipher_atbash": 68, "enciph": 68, "atbash": 68, "hebrew": 68, "decipher_atbash": 68, "tlmzebyvzgzinb": 68, "r146": 68, "encipher_substitut": 68, "oeyag": 68, "034": 68, "60n": 68, "v4b3": 68, "rm4": 68, "immateri": 68, "anyv": 68, "wherebi": 68, "r147": 68, "substitution_ciph": 68, "encipher_vigener": 68, "me": [68, 131, 148, 191, 216, 238], "mondai": 68, "qrgkkthrzqebpr": 68, "krypto": 68, "sculptur": 68, "cia": 68, "headquart": 68, "r149": 68, "decipher_vigener": 68, "alp": 68, "palimpsest": 68, "emufphzlrfaxyusdjkzldkrnshgnfivj": 68, "betweensubtleshadingandtheabsenc": 68, "blais": 68, "sixteenth": 68, "centuri": [68, 203], "diplomat": 68, "invent": [68, 211, 234, 287], "giovan": 68, "batista": 68, "belaso": 68, "1553": 68, "civil": [68, 110], "war": 68, "confederaci": 68, "brass": 68, "nsa": 68, "museum": 68, "fort": 68, "mead": 68, "r148": 68, "sender": 68, "assembl": [68, 92, 223], "concaten": [68, 98, 254], "frequenc": [68, 94, 115, 117, 155, 157, 165, 182], "kasiski": 68, "discov": [68, 92, 121, 240, 289], "babbag": 68, "unbreak": 68, "gonavybeatarmyyesyoucan": 68, "gold": 68, "auto_kei": 68, "goldbuggonavybeatarmyy": 68, "mcydwshkogamkzcelyfgayr": 68, "pt": [68, 76, 77, 78, 80, 81, 82, 83, 222], "vigenere_ciph": 68, "20071116100808": 68, "filebox": 68, "vt": 68, "batman": 68, "goo": 68, "gl": 68, "ijr22d": 68, "decod": 68, "qrgk": 68, "kt": [68, 136], "hrzqe": 68, "bpr": 68, "meetmeonmondai": 68, "encipher_hil": 68, "z_": [68, 228], "r150": 68, "lester": 68, "1920": 68, "r151": 68, "polygraph": 68, "bare": [68, 126], "ceil": [68, 73, 107, 125, 216], "l_1": [68, 72, 118, 201, 226, 242, 254], "l_t": 68, "c_t": 68, "l_i": [68, 201, 226], "decipher_hil": 68, "hill_ciph": 68, "june": [68, 103], "juli": [68, 229], "1929": 68, "306": 68, "312": [68, 191, 234, 261, 263], "ueqdueodoctcwq": 68, "hjeb": 68, "stqq": 68, "ispk": 68, "stzz": 68, "hd": 68, "ormv": 68, "uiki": 68, "encipher_bifid": 68, "polybiu": 68, "printabl": 68, "bifid5": 68, "decipher_bifid": 68, "encipher_bifid5": 68, "encipher_bifid6": 68, "r152": 68, "bifid_ciph": 68, "ieilhhfstsfqy": 68, "ieilh": 68, "hfst": 68, "fqyej": 68, "bmtwmg": 68, "bio": 68, "gold_bug": 68, "hg2sfuei7t": 68, "pug": 68, "heldo": 68, "wor6d": 68, "bifid5_squar": 68, "5x5": 68, "cap": [68, 71, 181, 224, 235], "tradition": [68, 75], "decipher_bifid5": 68, "round_trip": 68, "josi": 68, "osi": 68, "iosi": 68, "qiq": 68, "1901": 68, "felix": 68, "delastel": 68, "onto": [68, 80, 81, 82, 92, 96, 103, 106, 108, 211], "helen": 68, "cryptanalysi": 68, "german": 68, "fridai": 68, "ieilehfstsfxe": 68, "okai": 68, "decipher_bifid6": 68, "8am": 68, "kfkljjhf5mmmktfrgpl": 68, "meetmeonmondayat8am": 68, "bifid6_squar": 68, "6x6": 68, "rsa_public_kei": 68, "totient": [68, 107], "carmichael": [68, 107], "p_n": [68, 72, 75, 94, 212], "multiprim": 68, "land": 68, "reduced_toti": [68, 107], "uniquenss": 68, "rsa_private_kei": 68, "e_0": 68, "canonicalz": 68, "3233": 68, "797": 68, "1577": 68, "multipow": 68, "cryptosystem": 68, "coprim": [68, 94, 107, 177, 209, 229], "30030": 68, "becam": [68, 141], "hardest": 68, "claim": [68, 200, 226, 235], "encipher_rsa": 68, "decipher_rsa": 68, "r153": 68, "rsa_": 68, "28cryptosystem": 68, "r154": 68, "cacr": 68, "uwaterloo": 68, "techreport": 68, "2006": [68, 225], "cacr2006": 68, "r155": 68, "springer": [68, 94, 107, 209, 210, 232], "1007": [68, 127], "bfb0055738": 68, "r156": 68, "itii": 68, "manuscript": [68, 94], "1381": 68, "2753": 68, "413": 68, "1193": 68, "823": 68, "r157": 68, "r158": 68, "r159": 68, "r160": 68, "bmod": [68, 212, 216], "vice": [68, 94, 107, 110, 171, 191, 203, 207, 265, 266, 285], "versa": [68, 94, 107, 110, 171, 191, 203, 207, 265, 266, 285], "asymmetr": [68, 83], "puk": 68, "prk": 68, "chines": [68, 107, 209], "k_1": [68, 107, 209, 226], "k_2": 68, "k_n": [68, 75, 209], "p_3": [68, 199], "k_3": 68, "moduli": [68, 107, 209], "2048": [68, 107, 216], "overhead": [68, 108, 213], "crt": [68, 107, 209], "overcompens": 68, "new_msg": 68, "kid_rsa_public_kei": 68, "grade": [68, 95, 196, 212], "school": [68, 225], "bob": [68, 125, 130], "369": 68, "58": [68, 103, 242], "kid_rsa_private_kei": 68, "encipher_kid_rsa": 68, "200": [68, 98, 103, 107, 110, 115, 261], "161": [68, 127], "decipher_kid_rsa": 68, "pub": [68, 261], "pri": 68, "encode_mors": 68, "sep": [68, 216, 233, 247], "mors": 68, "attack": 68, "flank": 68, "r161": 68, "morse_cod": 68, "decode_mors": 68, "word_sep": 68, "mc": [68, 136], "east": 68, "r162": 68, "lfsr_sequenc": 68, "lfsr": 68, "c_k": 68, "golomb": [68, 107], "g162": 68, "autocorrel": 68, "lim_": [68, 73, 75, 92, 94, 223, 283, 287], "balanc": [68, 147, 203, 236, 247], "solomon": 68, "aegean": 68, "park": 68, "laguna": 68, "1967": [68, 210], "lfsr_autocorrel": 68, "lfsr_connection_polynomi": 68, "massei": 68, "m163": 68, "jame": [68, 209], "synthesi": 68, "bch": 68, "tran": 68, "122": [68, 70, 75], "127": [68, 107], "elgamal_public_kei": 68, "elgamal_private_kei": 68, "1031": 68, "636": 68, "212": [68, 94, 210], "dlp": 68, "is_primitive_root": [68, 107], "encipher_elgam": 68, "encryp": 68, "decipher_elgam": 68, "eucliden": 68, "dh_public_kei": 68, "dh_private_kei": 68, "_p": [68, 181, 207, 209, 211, 223, 226, 234], "_g": 68, "diffi": 68, "hellman": [68, 107], "publicli": 68, "secretli": 68, "dh_shared_kei": 68, "sk": 68, "gm_public_kei": 68, "goldwass": 68, "micali": 68, "gm_private_kei": 68, "b_n": [68, 72, 96, 203, 219], "jacobi_symbol": [68, 107], "residuos": 68, "entropi": [68, 236], "encipher_gm": 68, "public_kei": 68, "gm": [68, 184], "decipher_gm": 68, "encipher_railf": 68, "rail": [68, 130], "railfenc": 68, "horel": 68, "ollwd": 68, "r165": 68, "rail_fence_ciph": 68, "decipher_railf": 68, "diffgeom": 69, "euclidean": [69, 80, 82, 191, 207, 209, 212], "r166": 69, "chart": [69, 202], "r167": 69, "sussman": 69, "wisdom": 69, "farr": 69, "2013": [69, 79, 98, 291], "cartesian": [69, 110, 113, 149, 154, 168, 171, 176, 197, 202, 203, 224, 235, 254, 265, 266, 268, 269, 278], "polar": [69, 73, 75, 77, 83, 110, 119, 151, 202, 224, 228, 235, 278], "relation_dict": 69, "car2d": 69, "pol": 69, "coordinatesymbol": 69, "jacobian": [69, 103, 145, 234], "jacobian_determin": 69, "r168": 69, "coordinate_system": 69, "base_oneform": 69, "coord_index": 69, "oneform": 69, "base_scalar": 69, "basescalarfield": 69, "base_vector": [69, 261], "coord_funct": 69, "to_si": 69, "coord": [69, 82, 84, 121, 179, 195], "immutabledensematrix": [69, 98, 99, 100, 101, 236], "rn": 69, "r2_r": 69, "r2_p": 69, "jacobian_matrix": 69, "point_to_coord": 69, "coord_si": [69, 264], "imbu": 69, "difficulti": [69, 107, 132], "arriv": [69, 209, 226, 228, 232, 236, 293], "inappropri": 69, "poin": 69, "unappropri": 69, "fy": [69, 202, 233], "ftheta": 69, "basevectorfield": 69, "point_p": 69, "point_r": 69, "s_field": 69, "dxi": 69, "v1": [69, 80, 103, 128, 148, 191, 192, 195, 236, 255, 261, 264, 265, 266, 267], "v_1": [69, 211, 234], "v_2": [69, 211], "e_x": [69, 242], "e_i": [69, 203, 226, 242], "e_r": 69, "c_xy": 69, "c_xr": 69, "unfortun": [69, 71, 108, 215, 229], "e_rho": 69, "form_field": 69, "exterior": [69, 83], "dg": 69, "tensorproduct": [69, 178, 180, 237, 238], "multilinear": 69, "wedg": [69, 92], "tp1": 69, "tp": [69, 153, 180, 207, 238], "wedgeproduct": 69, "wp1": 69, "liederiv": 69, "v_field": 69, "transport": 69, "pushforward": 69, "e_theta": 69, "basecovarderivativeop": 69, "christoffel": 69, "metric_to_christoffel_2nd": 69, "ch": [69, 103, 229], "cvd": 69, "covarderivativeop": 69, "intcurve_seri": 69, "vector_field": [69, 268], "start_point": 69, "f_i": [69, 92, 103, 209, 213], "movement": 69, "intcurve_diffequ": 69, "init_cond": 69, "f_1": [69, 72, 75, 92, 117, 127, 130, 149, 203, 209, 212, 232], "f_0": [69, 72, 127, 209], "vectors_in_basi": 69, "kept": [69, 183, 200, 254, 288], "twoform_to_matrix": 69, "twoform": 69, "e_j": 69, "metric_to_christoffel_1st": 69, "levi": [69, 75, 236, 242], "civita": [69, 75, 242], "metric_to_riemann_compon": 69, "non_trivial_metr": 69, "dtheta": 69, "drho": 69, "metric_to_ricci_compon": 69, "ricci": 69, "fft": [70, 148], "ifft": 70, "ntt": 70, "intt": 70, "fwht": 70, "ifwht": 70, "mobius_transform": 70, "inverse_mobius_transform": 70, "convolution_fft": 70, "convolution_ntt": 70, "convolution_fwht": 70, "convolution_subset": 70, "covering_product": 70, "intersecting_product": 70, "radix": 70, "r169": 70, "coolei": 70, "93tukey_fft_algorithm": 70, "r170": 70, "fastfouriertransform": 70, "r171": 70, "r172": 70, "pz": [70, 115, 242], "643": [70, 107], "767": 70, "387": 70, "415": 70, "384": 70, "353": [70, 103], "r173": 70, "apfloat": 70, "r174": 70, "numbertheoretictransform": 70, "r175": 70, "discrete_fourier_transform_": 70, "r176": 70, "r177": 70, "r178": 70, "wht": 70, "r179": 70, "hadamard_transform": 70, "r180": 70, "fast_walsh": 70, "93hadamard_transform": 70, "r181": 70, "r182": 70, "mobiu": [70, 107], "lattic": [70, 205, 229], "bitmask": 70, "r183": 70, "b6bius_inversion_formula": 70, "r184": 70, "csail": 70, "mit": 70, "rrw": 70, "conv": 70, "r185": 70, "arxiv": [70, 72, 75, 103, 119, 212, 254], "1211": 70, "0189": 70, "r186": 70, "r187": 70, "r188": 70, "888": 70, "444": 70, "1283": 70, "19351": 70, "14219": 70, "15502": 70, "44": [70, 72, 103, 107, 225, 236], "41": [70, 77, 103, 107, 207, 229], "63": [70, 103, 107], "r189": 70, "convolution_theorem": 70, "r190": 70, "333": [70, 107], "555": 70, "222": 70, "666": 70, "15555": 70, "19404": 70, "r191": 70, "r192": 70, "68": [70, 95, 103, 107, 205, 229], "48": [70, 77, 111, 229, 234, 236, 283], "2057": 70, "1870": 70, "r193": 70, "radioeng": 70, "fulltext": 70, "2002": [70, 203, 210, 213], "02_03_40_42": 70, "r194": 70, "r195": 70, "r196": 70, "AND": [70, 97], "327": [70, 232], "r197": 70, "44288293815837": 71, "4429": 71, "4428829381583662470158809900606936986146216893757": 71, "28902548222223624241": 71, "091999668350375232456": 71, "14159265358979": [71, 75, 234], "333333333333333": [71, 206, 228], "1415926535": 71, "7182818284": 71, "100000": [71, 107, 115], "951": 71, "95678796130331164628399634646042209010610577945815": 71, "aleaxit": 71, "100000000000000": 71, "1000000000": 71, "125000000000000000000000000000": 71, "100000000000000005551115123126": 71, "100000000000000000000000000000": 71, "1415": 71, "uncertainti": [71, 186], "003": 71, "31417": 71, "propag": [71, 80, 152, 155], "5000": [71, 110], "50000000000000000000000000000": 71, "varphi": [71, 75, 211, 216, 232], "erron": 71, "34665576869e": 71, "208": [71, 212], "64613129282185e": 71, "60123853010113e": 71, "thousand": [71, 107, 282], "43466557686937456435688527675040625802564660517371780402481729089536555417949051890403879840079255169295922593080322634775209689623239873322471161642996440906533187938298969649928516003704476137795166849228875": 71, "binet": 71, "104": 71, "1336": 71, "portion": [71, 83, 98, 103], "meaningless": 71, "012297": 71, "9562288417661": 71, "956": 71, "29128599706266": 71, "2912859970626635404072825905956005414986193682745": 71, "14159265358979323846264338328": 71, "struggl": [71, 215], "346": 71, "34635637913639": 71, "dealt": [71, 92], "504067061906928": 71, "50406706190692837199": 71, "wrap_lin": [71, 94, 95, 103, 111, 196, 203, 204, 215, 216, 232], "intgrl": 71, "extrapol": [71, 223], "richardson": [71, 223, 235], "slowli": [71, 223], "64493406684823": 71, "577215664901533": 71, "57721566490153286060651209008240243104215933593992": 71, "10000000": [71, 212], "20000000": [71, 212], "693147255559946": 71, "worthwhil": 71, "hypergeometr": [71, 72, 85, 91, 92, 210, 227, 228, 232, 234, 236, 273, 293], "ramanujan": [71, 72, 107], "9801": 71, "1103": 71, "26390": 71, "396": [71, 131], "141592653589793238462643383279502884197169399375105820974944592307816406286208": 71, "99862803482534211706798214808651328230664709384460955058223172535940812848111745": 71, "02841027019385211055596446229489549303819644288109756659334461284756482337867831": 71, "355": [71, 107, 210], "113": [71, 107, 229], "33333": [71, 94], "635": 71, "504": [71, 210], "130198866629986772369127970337": 71, "49": [71, 72, 107, 111, 209, 229], "___________": [71, 111, 232], "bell": [72, 165, 218, 254], "k_sym": 72, "binom": [72, 107, 236, 293], "dotsc": [72, 218], "j_1": [72, 160, 161, 178, 201, 218, 237], "j_2": [72, 160, 161, 178, 201, 218], "dotsb": [72, 218], "atop": [72, 75, 218, 226], "2j_2": [72, 218], "3j_2": [72, 218], "j_": [72, 75, 92, 94, 178, 218, 226, 287], "bernoulli": [72, 75, 212, 216, 232, 234, 236], "877": 72, "4140": 72, "21147": 72, "115975": 72, "846749014511809332450147": 72, "luca": [72, 107, 216, 222], "genocchi": [72, 75, 212], "r198": 72, "bell_numb": 72, "r199": 72, "bellnumb": 72, "r200": 72, "bellpolynomi": 72, "hurwitz": [72, 75], "6k": 72, "appel": [72, 75], "confer": [72, 108, 291], "r205": 72, "66": [72, 98, 103, 212, 216], "1000001": 72, "andr": [72, 212], "appellseq": [72, 212], "bernoulli_poli": [72, 212], "r201": 72, "bernoulli_numb": 72, "r202": 72, "bernoulli_polynomi": [72, 212], "r203": 72, "bernoullinumb": 72, "r204": 72, "bernoullipolynomi": 72, "luschni": [72, 75, 212], "manifesto": 72, "r206": 72, "2009": [72, 75, 107, 201, 212], "06743": [72, 75, 212], "_k": [72, 75, 94, 201, 211, 236], "6435": 72, "pascal": [72, 107], "4th": [72, 73, 89, 103, 107, 148], "195": 72, "r208": 72, "postpon": 72, "156675": 72, "4433": 72, "28625": 72, "granvil": [72, 107], "r209": 72, "r207": 72, "johndcook": 72, "binomial_coeffici": [72, 107], "27s_theorem": [72, 235], "andrew": [72, 84, 107], "20170202003812": [72, 107], "dm": [72, 107, 205, 211], "umontr": [72, 107], "bincoeff": [72, 107, 216], "c_n": [72, 75, 96, 212, 232], "429": [72, 216], "1430": 72, "4862": 72, "39764993382373624267": 72, "020884341620842555705": 72, "r210": 72, "catalan_numb": 72, "r211": 72, "catalannumb": [72, 216], "r212": 72, "r213": 72, "geomet": [72, 203], "mathcircl": 72, "2j": [72, 209, 236], "1385": [72, 212], "272": [72, 212], "7936": [72, 212], "2702765": 72, "4096": 72, "euler_poli": [72, 212], "r214": 72, "euler_numb": 72, "r215": 72, "eulernumb": 72, "r216": 72, "alternating_permut": 72, "r217": 72, "alternatingpermut": 72, "swing": 72, "factorial2": [72, 182, 216], "fallingfactori": [72, 216], "subfactori": [72, 216, 254], "derang": [72, 254], "r219": 72, "generate_derang": [72, 254], "r218": 72, "r220": 72, "double_factori": 72, "texttt": [72, 224], "r221": 72, "r222": 72, "paul": [72, 251], "235": 72, "268": 72, "1995": [72, 210, 228, 234], "f_z": [72, 197, 268], "f_2": [72, 92, 117, 127, 130, 149, 209, 226, 232], "r224": 72, "fibonacci_numb": 72, "r225": 72, "fibonaccinumb": 72, "t_0": [72, 229], "149": [72, 107], "r226": 72, "r227": 72, "tribonaccinumb": 72, "r228": 72, "oei": [72, 75, 107, 212], "a000073": 72, "137": [72, 103, 119], "205": [72, 92, 226], "5269": 72, "761": 72, "280": 72, "83711": 72, "27720": 72, "30247": 72, "9900": 72, "983697455232980674869851942390639915940": 72, "r229": 72, "harmonic_numb": 72, "r230": 72, "harmonicnumb": [72, 216], "r231": 72, "harmonicnumber2": 72, "l_0": [72, 118, 242, 243], "47": [72, 75, 103, 107, 119, 154, 186, 215], "76": [72, 75, 103, 107, 209, 212], "r232": 72, "lucas_numb": 72, "r233": 72, "lucasnumb": 72, "genocchi_poli": [72, 212], "r234": 72, "genocchi_numb": 72, "r235": 72, "genocchinumb": 72, "r236": 72, "mathcal": [72, 73, 92, 117, 146, 178, 201, 212, 224], "a000111": [72, 212], "zigzag": 72, "li": [72, 75, 83, 94, 107, 128, 181, 216, 271], "50521": [72, 212], "691": 72, "2730": 72, "andre_poli": [72, 212], "r237": 72, "r238": 72, "eulerzigzagnumb": 72, "r239": 72, "irrelev": 72, "r240": 72, "number_theori": 72, "r241": 72, "pentagonal_number_theorem": 72, "multifactori": 72, "pochhamm": [72, 216, 228], "r242": 72, "r243": 72, "pochhammer_symbol": 72, "274": 72, "225": [72, 107, 210], "511": 72, "9330": 72, "34105": 72, "42525": 72, "22827": 72, "5880": 72, "750": 72, "r244": 72, "stirling_numbers_of_the_first_kind": 72, "r245": 72, "stirling_numbers_of_the_second_kind": 72, "multiset": [72, 92, 251, 254], "nc": 72, "nt": [72, 254], "babi": [72, 107, 254], "aa": [72, 201], "bb": [72, 201, 228, 254], "multiset_combin": [72, 254], "aab": [72, 254], "aabc": 72, "aaaabbbbcccc": 72, "m_1": [72, 117, 160, 178, 201, 229], "m_2": [72, 130, 149, 160, 178, 201], "m_k": 72, "r246": 72, "r247": 72, "tinyurl": 72, "cep849r": 72, "ba": [72, 254], "multiset_permut": [72, 254], "r248": 72, "aabbc": 72, "mississippi": [72, 254], "609": 72, "1521": 72, "1768": 72, "1224": [72, 107], "579": 72, "197": 72, "r249": 72, "20210507012732": 72, "csse": 72, "uwa": 72, "au": 72, "cits7209": 72, "707106781186548": 73, "tangent": [73, 77, 79, 83, 94, 213, 232], "643501108793284": 73, "r250": 73, "ib": [73, 136], "complex_conjug": 73, "polar_lift": [73, 75, 228], "periodic_argu": 73, "principal_branch": [73, 92], "r254": 73, "csc": [73, 109, 216, 225], "sec": [73, 94, 115, 211, 216, 225, 293], "acsc": [73, 216], "asec": [73, 216], "acot": [73, 216], "r251": 73, "trigonometric_funct": 73, "r252": 73, "r253": 73, "elementaryfunct": 73, "trigonometryangl": 73, "r255": 73, "r256": 73, "r257": 73, "r258": 73, "r259": 73, "r260": 73, "cotang": [73, 213], "r261": 73, "r262": 73, "r263": 73, "secant": [73, 212], "r264": 73, "r265": 73, "r266": 73, "cosec": 73, "r267": 73, "r268": 73, "r269": 73, "unnorm": [73, 75], "qquad": [73, 186, 209], "jn": [73, 75, 178, 212, 216, 287], "spheric": [73, 119, 125, 160, 201, 202, 212, 261, 265, 266, 287], "r270": 73, "sinc_funct": 73, "asinh": [73, 216], "r271": 73, "inverse_trigonometric_funct": 73, "r272": 73, "r273": 73, "r274": 73, "r275": 73, "r276": 73, "r277": 73, "r278": 73, "r279": 73, "arctan": [73, 213, 216], "acoth": [73, 216], "r280": 73, "r281": 73, "arccot": [73, 216], "r285": 73, "r282": 73, "r283": 73, "r284": 73, "arcsec": [73, 216], "r286": 73, "r287": 73, "r288": 73, "arccsc": [73, 216], "quadrant": [73, 207, 235], "clock": [73, 225], "reurn": 73, "r289": 73, "r290": 73, "r291": 73, "arctan2": [73, 216], "hyperbolicfunct": 73, "coth": [73, 216, 228], "acosh": [73, 216], "sech": [73, 216], "csch": [73, 216], "asech": [73, 216], "r292": 73, "hyperbolic_funct": 73, "r293": 73, "r294": 73, "arcsech": [73, 216], "acsch": [73, 216], "r295": 73, "r296": 73, "r297": 73, "arccsch": [73, 216], "567": 73, "r298": 73, "r299": 73, "ceilingfunct": 73, "r300": 73, "r301": 73, "floorfunct": 73, "roundfunct": 73, "r302": 73, "lfloor": [73, 207, 235, 236], "rfloor": [73, 207, 235, 236], "fractional_part": 73, "r303": 73, "fractionalpart": 73, "lambertw": [73, 213, 216, 234, 235, 294], "r304": 73, "w_k": 73, "635564016364870": 73, "34747534407696": 73, "41624341514535": 73, "lambert_w_funct": 73, "exprcondpair": 73, "cond": [73, 92, 94, 224], "piecewise_fold": 73, "folded_cond": 73, "ITE": [73, 97, 216], "piecewise_exclus": 73, "_eval_integr": [73, 94], "piecewise_integr": 73, "as_expr_set_pair": 73, "skip_nan": 73, "mutual": [73, 92, 200], "conjunct": [73, 97, 107, 202, 226, 247, 293], "identityfunct": 73, "supremum": [73, 224], "r305": 73, "directed_complete_partial_ord": 73, "r306": 73, "lattice_": 73, "28order": 73, "global_paramet": 73, "real_root": [73, 212, 234], "rootoftool": [73, 103, 212], "r307": 73, "square_root": 73, "r308": 73, "r309": 73, "root_of_un": 73, "r310": 73, "principal_valu": [73, 94], "r311": 73, "cuberoot": 73, "powdenest": [73, 228], "misc": [73, 98, 257], "r312": 73, "r313": 73, "r314": 73, "cube_root": 73, "r315": 73, "int_": [75, 91, 92, 94, 212, 219, 283, 287], "sum_i": [75, 223], "is_simpl": 75, "tensor_funct": 75, "kroneckerdelta": [75, 100, 181, 216, 228], "r316": 75, "deltafunct": [75, 94], "h0": 75, "electron": [75, 119, 225], "improp": [75, 94], "r317": 75, "heavisidestepfunct": 75, "r318": 75, "iv": [75, 213], "105": [75, 107, 212, 229], "parg": 75, "singularity_funct": 75, "singularityfunct": [75, 94, 110], "macaulai": 75, "heavisidediracdelta": 75, "r319": 75, "r320": 75, "r321": 75, "r322": 75, "r323": 75, "setminu": [75, 92], "17805383034794561964694160130": 75, "65092319930185633889": 75, "8724366472624298171": 75, "r324": 75, "r325": 75, "r326": 75, "loggammafunct": 75, "r327": 75, "espinosa": 75, "moll": 75, "r332": 75, "19093197": 75, "5173168": 75, "ni": [75, 107], "r328": 75, "polygamma_funct": 75, "r329": 75, "polygammafunct": 75, "r330": 75, "r331": 75, "polygamma2": 75, "2004": [75, 210, 229], "115": 75, "r333": 75, "digamma_funct": 75, "r334": 75, "digammafunct": 75, "r335": 75, "r336": 75, "trigamma_funct": 75, "r337": 75, "trigammafunct": 75, "r338": 75, "int_x": 75, "_1f_1": 75, "confluent": [75, 226], "xt": 75, "expint": [75, 216], "r339": 75, "incomplete_gamma_funct": 75, "upper_incomplete_gamma_funct": 75, "r340": 75, "r341": 75, "r342": 75, "gamma2": 75, "r343": 75, "gamma3": 75, "r344": 75, "exponential_integr": 75, "relation_with_other_funct": 75, "int_0": [75, 92, 94, 283, 293], "r345": 75, "lower_incomplete_gamma_funct": 75, "r346": 75, "r347": 75, "r348": 75, "r349": 75, "multigamma": 75, "gamma_p": 75, "r350": 75, "multivariate_gamma_funct": 75, "beta_funct": 75, "eulerian": 75, "02671848900111377452242355235388489324562": 75, "2112723729365330143": 75, "7655283165378005676": 75, "r351": 75, "r352": 75, "betafunct": 75, "r353": 75, "error_funct": 75, "999999984582742099719981147840": 75, "1296959": 75, "73071763923152794095062": 75, "r354": 75, "r355": 75, "r356": 75, "r357": 75, "0000000154172579002800188521596734869": 75, "r358": 75, "r359": 75, "r360": 75, "r361": 75, "5648024145755525987042919132": 75, "995322265018952734162069256367": 75, "r362": 75, "r363": 75, "r364": 75, "r365": 75, "179143454621291692285822705344": 75, "r366": 75, "inverse_funct": 75, "r367": 75, "inverseerf": [75, 216], "r368": 75, "r369": 75, "inverseerfc": [75, 216], "r370": 75, "inverseerf2": 75, "fresnelintegr": 75, "343415678363698242195300815958": 75, "fresnelc": [75, 216, 226], "r371": 75, "fresnel_integr": 75, "r372": 75, "r373": 75, "r374": 75, "r375": 75, "wrench": 75, "jr": 75, "vicki": 75, "allei": 75, "488253406075340754500223503357": 75, "r376": 75, "r377": 75, "r378": 75, "r379": 75, "r380": 75, "background": [75, 95, 196, 199, 291], "cauchi": [75, 92, 94, 207, 232, 236], "219383934395520": 75, "21938393439552": 75, "shi": [75, 92, 216, 226], "e1": [75, 77, 84, 131, 206, 211, 223, 232, 235], "hyperbol": [75, 213, 235, 289, 293], "r381": 75, "r382": 75, "r383": 75, "20201128173312": 75, "sfu": [75, 94], "cbm": [75, 94], "aand": [75, 94], "page_228": 75, "int_1": [75, 92], "zt": [75, 92], "unbranch": [75, 92], "meijerg": [75, 86, 92, 94, 216, 236, 293], "postiv": 75, "r384": 75, "r385": 75, "expintegral": [75, 216], "r386": 75, "04516378011749278484458888919": 75, "0652795784357498247001125598": 75, "08346052231061726610939702133": 75, "soldner": 75, "45136923488338": 75, "r387": 75, "logarithmic_integr": 75, "r388": 75, "logarithmicintegr": 75, "r389": 75, "r390": 75, "soldnersconst": 75, "92242131492155809316615998938": 75, "r391": 75, "r392": 75, "r393": 75, "r394": 75, "trigonometric_integr": 75, "_1": [75, 103, 125, 191, 201, 226, 255], "somewhat": [75, 94, 131, 207], "r395": 75, "r396": 75, "r397": 75, "laurent": [75, 207, 213, 232], "j_n": [75, 178], "r398": 75, "r399": 75, "r400": 75, "r401": 75, "yn": [75, 216, 222], "r402": 75, "i_": [75, 92, 226, 236, 237], "iz": 75, "r403": 75, "k_": [75, 92, 126, 143, 144], "r404": 75, "hankel1": [75, 216], "hankel": [75, 94], "iy_": 75, "hankel2": [75, 216], "r405": 75, "hankelh1": [75, 216], "r406": 75, "hankelh2": [75, 216], "orthopoli": [75, 212], "spherical_bessel_fn": [75, 212], "3j": [75, 160, 201], "099419756723640344491": 75, "054525080242173562897": 75, "r407": 75, "y_n": [75, 229], "18525034196069722536": 75, "014895573969924817587": 75, "r408": 75, "jn_zero": 75, "besseljzero": 75, "sph_jn": 75, "7635": 75, "095": 75, "515": 75, "marcumq": 75, "marcum": 75, "q_m": 75, "r409": 75, "marcum_q": 75, "r410": 75, "airybas": 75, "airyai": [75, 216, 232], "ai": [75, 107, 212, 229, 238, 257, 293], "airyaiprim": [75, 216], "22740742820168557599192443603787379946077222541710": 75, "airybi": [75, 216, 232], "airybiprim": [75, 216], "r411": 75, "airy_funct": 75, "r412": 75, "r413": 75, "encyclopediaofmath": 75, "r414": 75, "airyfunct": 75, "41230258795639848808323405461146104203453483447240": 75, "r415": 75, "r416": 75, "r417": 75, "r418": 75, "61825902074169104140626429133247528291577794512415": 75, "r419": 75, "r420": 75, "r421": 75, "r422": 75, "27879516692116952268509756941098324140300059345163": 75, "r423": 75, "r424": 75, "r425": 75, "r426": 75, "bspline": 75, "bspline_basi": 75, "knot": 75, "bspline_basis_set": 75, "r427": 75, "interpolating_splin": 75, "131": [75, 191], "39": [75, 107, 215], "interpolating_poli": [75, 212], "zeta_funct": 75, "admit": [75, 232], "lerch": 75, "transcend": 75, "lerchphi": [75, 216], "dirichlet_eta": [75, 216], "20205690315959": 75, "polylog": [75, 216], "r428": 75, "r429": 75, "hurwitz_zeta_funct": 75, "r430": 75, "dirichlet_eta_funct": 75, "r431": 75, "polylogarithm": 75, "sheet": [75, 225], "phi_0": 75, "ze": 75, "r432": 75, "bateman": [75, 94], "erdelyi": [75, 94], "1953": [75, 211], "york": [75, 92, 147, 226, 234], "mcgraw": [75, 94, 126, 147, 191, 198, 261], "r433": 75, "r434": 75, "lerch_transcend": 75, "stieltj": [75, 216], "gamma_": [75, 118, 120], "r435": 75, "stieltjes_const": 75, "ap": [75, 79, 226], "bq": [75, 204, 205, 226], "a_p": [75, 92, 226, 293], "b_q": [75, 92, 226, 293], "_pf_q": [75, 226, 232, 293], "r436": 75, "r437": 75, "generalized_hypergeometric_funct": 75, "convergence_stat": 75, "radius_of_converg": 75, "radiu": [75, 77, 81, 83, 138, 140, 150, 154, 202, 235, 236, 271], "meijer": [75, 85, 93, 94, 273, 283, 293], "mellin": [75, 94], "barn": 75, "b_m": [75, 92, 234], "confusingli": 75, "int_l": [75, 92, 226], "contour": [75, 77, 92, 202, 226], "__1": 75, "subvector": 75, "aother": 75, "bm": 75, "bother": [75, 288], "slater": [75, 226], "allow_hyp": [75, 228], "subsum": 75, "r438": 75, "r439": 75, "meijer_g": 75, "get_period": [75, 92], "appellf1": [75, 216], "0063339426292673": 75, "172870711": 75, "659936": 75, "15605338197184": 75, "r440": 75, "appell_seri": 75, "r441": 75, "hypergeometricfunct": 75, "elliptic_integr": 75, "elliptic_k": [75, 216], "tfrac": [75, 232, 236], "eccentr": [75, 77], "50923695405127": 75, "625146415202697": 75, "elliptic_f": [75, 216], "r442": 75, "r443": 75, "ellipticintegr": 75, "elliptick": [75, 216], "909449841483": 75, "74720545502474": 75, "r444": 75, "r445": 75, "ellipticf": 75, "elliptic_": [75, 77, 216], "55203744279187": 75, "290764986058437": 75, "991052601328069": 75, "81879421395609": 75, "r446": 75, "r447": 75, "elliptice2": 75, "r448": 75, "elliptic": [75, 216], "elliptic_pi": [75, 216], "50232379629182": 75, "760939574180767": 75, "29136443417283": 75, "32555634906645": 75, "r449": 75, "r450": 75, "ellipticpi3": 75, "r451": 75, "ellipticpi": [75, 216], "mathieu_funct": 75, "mathieubas": 75, "mathieusprim": [75, 216], "mathieuc": [75, 216], "mathieucprim": [75, 216], "r452": 75, "r453": 75, "r454": 75, "mathieufunct": 75, "r455": 75, "mathieuandspheroidalfunct": 75, "r456": 75, "r457": 75, "r458": 75, "r459": 75, "r460": 75, "r461": 75, "r462": 75, "r463": 75, "r464": 75, "r465": 75, "r466": 75, "r467": 75, "chebyshevu": [75, 216], "chebyshevt_root": 75, "chebyshevu_root": 75, "assoc_legendr": [75, 216], "hermite_prob": 75, "jacobi_poli": [75, 212], "gegenbauer_poli": [75, 212], "chebyshevt_poli": [75, 212], "chebyshevu_poli": [75, 212], "hermite_poli": [75, 212], "legendre_poli": [75, 212], "laguerre_poli": [75, 212], "r468": 75, "jacobi_polynomi": 75, "r469": 75, "jacobipolynomi": 75, "r470": 75, "jacobip": [75, 216], "jacobi_norm": 75, "normilz": 75, "p_m": 75, "delta_": [75, 178, 186, 201], "r471": 75, "r472": 75, "r473": 75, "hermite_prob_poli": [75, 212], "r474": 75, "gegenbauer_polynomi": 75, "r475": 75, "gegenbauerpolynomi": 75, "r476": 75, "gegenbauerc3": 75, "r477": 75, "chebyshev_polynomi": 75, "r478": 75, "chebyshevpolynomialofthefirstkind": 75, "r479": 75, "chebyshevpolynomialofthesecondkind": 75, "r480": 75, "r481": 75, "u_n": [75, 94, 209, 211, 212], "r482": 75, "r483": 75, "r484": 75, "r485": 75, "r486": 75, "chebyshev_root": 75, "r487": 75, "legendre_polynomi": 75, "r488": 75, "legendrepolynomi": 75, "r489": 75, "legendrep": [75, 216], "r490": 75, "legendrep2": 75, "r491": 75, "associated_legendre_polynomi": 75, "r492": 75, "r493": 75, "r494": 75, "r495": 75, "hermite_polynomi": 75, "r496": 75, "hermitepolynomi": 75, "r497": 75, "hermiteh": [75, 216], "probabilist": [75, 212, 236], "he_n": [75, 212], "telephon": 75, "a000085": 75, "232": 75, "764": 75, "2620": 75, "9496": 75, "r498": 75, "r499": 75, "l_n": [75, 94, 212], "r500": 75, "laguerre_polynomi": 75, "r501": 75, "laguerrepolynomi": 75, "r502": 75, "laguerrel": [75, 216], "r503": 75, "laguerrel3": 75, "r504": 75, "generalized_laguerre_polynomi": 75, "r505": 75, "associatedlaguerrepolynomi": 75, "r506": 75, "r507": 75, "spherical_harmon": 75, "ynm": [75, 201], "ynm_c": 75, "znm": 75, "r508": 75, "r509": 75, "sphericalharmon": 75, "r510": 75, "sphericalharmonici": 75, "r511": 75, "r512": 75, "r513": 75, "r514": 75, "z_n": [75, 210], "r515": 75, "r516": 75, "r517": 75, "eijk": 75, "levicivita": [75, 103], "eval_levicivita": 75, "pseudotensor": 75, "delta_rang": [75, 181], "kroneck": [75, 180, 181, 201, 237, 242], "r518": 75, "kronecker_delta": [75, 181], "indices_contain_equal_inform": [75, 181], "fermi": [75, 181], "above_fermi": [75, 181], "below_fermi": [75, 181], "is_above_fermi": [75, 181], "is_below_fermi": [75, 181], "is_only_below_fermi": [75, 181], "is_only_above_fermi": [75, 181], "killable_index": [75, 181], "preferred_index": [75, 181], "point2d": [76, 77, 78, 79, 80, 82, 83, 84], "arbitrary_point": [76, 77, 78, 79, 80, 81, 83], "polyfunc": [76, 207, 212], "ambient_dimens": [76, 78, 80, 82], "plot_interv": [76, 77, 80, 83], "lower_bound": [76, 77, 80, 83], "upper_bound": [76, 77, 80, 83], "counterclockwis": [76, 77, 78, 82, 103, 110, 111], "scale": [76, 77, 78, 82, 83, 84, 95, 110, 161, 182, 184, 185, 186, 188, 189, 196, 200, 202, 212, 219, 236, 268, 270], "geometryent": [76, 77, 78, 80, 82, 83, 84], "hradiu": 77, "vradiu": 77, "ellipt": [77, 107, 203], "geometryerror": [77, 80, 83, 84], "radii": 77, "foci": 77, "periapsi": 77, "apoapsi": 77, "focus_dist": 77, "shortest": [77, 80, 83, 199, 222, 228, 232, 254], "auxiliary_circl": 77, "xmin": [77, 78, 80, 82, 83, 202], "ymin": [77, 78, 80, 82, 83, 202], "xmax": [77, 78, 80, 82, 83, 202], "ymax": [77, 78, 80, 82, 83, 202], "rectangl": [77, 78, 80, 82, 83, 202, 212], "director_circl": 77, "perpendicular": [77, 80, 81, 83, 96, 125, 139, 154, 200], "director": 77, "130": 77, "r519": 77, "encloses_point": [77, 78, 83], "border": [77, 83], "_slope": 77, "slope": [77, 78, 80, 83, 94, 110, 111, 115, 125], "r520": 77, "108270": 77, "r521": 77, "shifted_ellips": 77, "evolut": 77, "focal": [77, 150, 154], "100500": 77, "363": [77, 107, 210], "175": [77, 103, 209, 210], "is_tang": [77, 79], "tangent_lin": 77, "normal_lin": 77, "line2d": [77, 80, 83], "2020": [77, 160], "polar_second_moment_of_area": [77, 83], "moment": [77, 83, 110, 111, 133, 141, 144, 146, 202, 212, 229, 236], "constitu": [77, 83, 128, 191, 222, 261], "planar": [77, 83, 111, 125, 154], "resist": [77, 83, 110, 111, 225], "deflect": [77, 83, 110, 111], "bend": [77, 83, 110, 112, 278], "r522": 77, "polar_moment_of_inertia": [77, 83], "random_point": [77, 80, 81], "arb": 77, "364": 77, "notimpl": [77, 211], "second_moment_of_area": [77, 83], "centroid": [77, 83, 84, 110], "i_xx": [77, 83], "i_yi": [77, 83], "i_xi": [77, 83], "ellis": 77, "r523": 77, "list_of_second_moments_of_area": 77, "section_modulu": [77, 83], "sympify": [77, 83, 110, 113, 122, 128, 152, 155, 193], "farthest": [77, 83], "s_x": [77, 83], "s_y": [77, 83], "r524": 77, "semilatus_rectum": 77, "semi": [77, 80, 107], "latu": 77, "rectum": 77, "chord": 77, "conic": [77, 229, 261], "directrix": 77, "r525": 77, "semilatusrectum": 77, "r526": 77, "latus_rectum": 77, "collinear": [77, 79, 81, 82, 83, 202], "gx": 77, "hy": 77, "synonym": [77, 211], "p4": [77, 80, 82, 83, 128, 202], "t2": [78, 83, 84, 107, 122, 128, 229, 236, 242], "ordering_of_class": 78, "is_similar": [78, 80, 83, 84], "uniform": [78, 202, 234, 236], "enlarg": 78, "shrink": [78, 92], "parameter_valu": [78, 81], "pent": 78, "rpent": 78, "rcirc": 78, "entity1": 79, "entity2": 79, "zp": 79, "is_collinear": [79, 82], "segment2d": [79, 80, 83, 84], "wikipappu": 79, "subs_point": 79, "p11": 79, "p12": 79, "p13": 79, "p21": 79, "p22": 79, "p23": 79, "ll1": 79, "ll2": 79, "ll3": 79, "ll4": 79, "ll5": 79, "ll6": 79, "pp1": 79, "pp2": 79, "pp3": 79, "encyclopedia": [79, 198], "apr": 79, "s_hexagon_theorem": 79, "clockwis": [79, 94, 98, 103, 110, 111, 113], "overlap": [79, 84, 106, 203, 224, 257], "infanc": 79, "geometryresult": 79, "fair": [79, 236], "angle_between": [80, 81, 83, 191], "reflex": 80, "eman": 80, "readili": [80, 103], "sw": 80, "obtus": 80, "smallest_angle_between": 80, "point3d": [80, 81, 82, 154], "line3d": [80, 81, 82], "is_perpendicular": [80, 81, 82, 83], "ray2d": [80, 83], "closing_angl": 80, "are_concurr": [80, 81], "concurr": [80, 81, 213], "l3": [80, 134, 209], "l4": [80, 134], "bisector": [80, 83], "p5": [80, 82, 83, 202], "p6": [80, 83, 202], "p7": [80, 83, 202], "segment3d": [80, 81], "direction_ratio": [80, 82], "is_parallel": [80, 81], "parallel_lin": 80, "perpendicular_lin": [80, 81], "perpendicular_seg": 80, "reform": 80, "92": [80, 210, 232, 236, 254], "ccw": [80, 83], "ray3d": [80, 81, 154], "xdirect": 80, "ydirect": 80, "midpoint": [80, 82, 83, 94, 202, 267], "170": [80, 236], "341": 80, "perpendicular_bisector": 80, "linearentity2d": 80, "linearentity3d": [80, 81], "direction_cosin": [80, 82], "zdirect": 80, "normal_vector": [81, 154], "proce": [81, 145, 209, 211, 226, 234], "147": 81, "321": 81, "is_coplanar": 81, "perpendicualar": 81, "parallel_plan": 81, "on_circl": 81, "off_circl": 81, "perpendicular_plan": 81, "pt1": 81, "projection_lin": 81, "on_morph": 82, "affine_rank": 82, "are_coplanar": 82, "canberra_dist": 82, "canberra": 82, "geometricent": 82, "taxicab_dist": 82, "is_concycl": 82, "concycl": 82, "fewer": [82, 83, 145, 236, 283], "is_scalar_multipl": 82, "ambient": 82, "orthogonal_direct": 82, "taxicab": 82, "_nocheck": 82, "are_collinear": 82, "unrot": 83, "circumscrib": 83, "spin": [83, 119, 133, 167, 168, 176, 278], "perimet": 83, "contact": [83, 133, 137, 138, 139, 140, 199, 240], "38": [83, 103, 107, 216, 229, 231, 236], "cut_sect": 83, "upper_polygon": 83, "lower_polygon": 83, "upper_seg": 83, "lower_seg": 83, "r527": 83, "r528": 83, "paulbourk": 83, "polygonmesh": 83, "insidepoli": 83, "first_moment_of_area": 83, "q_x": [83, 199], "q_y": [83, 199], "625": [83, 271], "3125": [83, 236], "525": 83, "3000": [83, 110], "r529": 83, "skyciv": 83, "beam": [83, 113, 150, 153, 278], "bmd": 83, "r530": 83, "mechanicalc": 83, "poly1": 83, "poly2": 83, "interior": [83, 212, 224], "180": [83, 200, 210], "r531": 83, "r532": 83, "r533": 83, "apothem": 83, "interior_angl": 83, "exterior_angl": 83, "circumcircl": 83, "incircl": 83, "inradiu": 83, "inscrib": 83, "circumcent": 83, "circumradiu": 83, "leg": 83, "square_in_unit_circl": 83, "kite": 83, "asa": 83, "sa": [83, 212], "sss": 83, "altitud": 83, "orthocent": 83, "exradii": 83, "median": [83, 236], "medial": 83, "nine_point_circl": 83, "straight": [83, 89, 115, 135, 199, 232], "eulerlin": 83, "equilater": 83, "excent": 83, "excircl": 83, "touch": [83, 133, 225], "r534": 83, "ly": [83, 103, 207], "exradiu": 83, "r535": 83, "r536": 83, "incent": 83, "is_equilater": 83, "is_isoscel": 83, "is_right": 83, "is_scalen": 83, "nine": [83, 216], "feet": 83, "real_num": 84, "hull": 84, "r537": 84, "graham_scan": 84, "r538": 84, "1979": [84, 186], "20210511015444": 84, "geomalgorithm": 84, "a10": 84, "_hull": 84, "t3": [84, 229], "averag": [84, 94, 107, 209, 236], "p_r": 85, "holonomic_funct": 85, "from_hyp": [86, 89], "holonomicfunct": [86, 89, 90], "from_meijerg": [86, 89], "initcond": [86, 88, 89], "expr_to_holonom": [86, 89, 90, 91], "lenic": [86, 88], "meijerint": [86, 88, 92, 94], "_rewrite1": [86, 92], "_convert_poly_rat_alg": [86, 88], "_create_t": [86, 88], "_create_lookup_t": [88, 92], "differentialoper": [89, 90, 170], "old_poly_r": [89, 90, 203, 206, 207], "to_sequ": 89, "n_0": [89, 209, 234, 235], "indici": [89, 90, 91, 232], "c_j": [89, 92, 226], "holonomicsequ": 89, "r539": 89, "hal": 89, "inria": [89, 94], "00070025": 89, "r540": 89, "www3": [89, 232, 261], "risc": [89, 232, 261], "jku": [89, 232, 261], "risc_2244": 89, "diplform": 89, "_recur": 89, "rk4": 89, "71828182845905": 89, "10517083333333": 89, "22140257085069": 89, "34985849706254": 89, "49182424008069": 89, "64872063859684": 89, "82211796209193": 89, "01375162659678": 89, "22553956329232": 89, "45960141378007": 89, "71827974413517": 89, "331": 89, "4641": 89, "61051": 89, "771561": 89, "9487171": 89, "14358881": 89, "357947691": 89, "5937424601": 89, "to_hyp": 89, "as_list": [89, 212], "to_meijerg": 89, "1_0": 90, "1_1": 90, "0_0": 90, "0_1": 90, "list_of_poli": 90, "weyl": [90, 96], "differentialoperatoralgebra": 90, "Ore": 90, "dxa": 90, "endomorph": [90, 211], "frobeniu": [91, 103, 107, 209, 210], "subtleti": 92, "recast": [92, 228, 234, 235], "branchpoint": 92, "crude": [92, 133, 202], "decre": 92, "biholomorph": 92, "topologi": [92, 224], "neighbourhood": 92, "evid": [92, 126, 139, 226, 238], "peculiar": [92, 200], "_split_mul": 92, "_mytyp": 92, "inequival": 92, "_mul_as_two_part": 92, "twist": 92, "recognis": [92, 206, 226, 228], "anywai": [92, 228, 232], "analyitc": 92, "_rewrite_singl": 92, "_rewrite2": 92, "_rewrite_saxena_1": 92, "_rewrite_saxena": 92, "blogpost": 92, "remedi": 92, "exploit": [92, 248], "transpar": [92, 95, 196], "nessgrh": 92, "wordpress": [92, 229], "07": 92, "stade": 92, "c_u": 92, "d_1": [92, 186, 212, 236], "d_v": 92, "amalgam": 92, "prudnikov1990": [92, 226], "luke1969": [92, 226], "fulfil": [92, 201], "vee": [92, 97, 103], "lceil": 92, "rceil": 92, "d_j": [92, 186, 226], "lambda_c": [92, 144], "lambda_": 92, "z_0": [92, 228], "z_1": 92, "a_i": [92, 186, 191, 200, 204, 209, 226], "c_5": 92, "c_6": 92, "c_7": 92, "c_8": 92, "lvert": 92, "rvert": 92, "c_9": 92, "versatil": 92, "bz": [92, 229, 242], "deform": [92, 111], "encircl": 92, "appeal": 92, "fox": 92, "obstacl": 92, "identif": [92, 235], "domin": [92, 98, 221, 223], "iT": 92, "omega_": 92, "disguis": 92, "meijerint_indefinit": 92, "meijerint_definit": 92, "meijerint_invers": 92, "kelli": [92, 226], "roach": [92, 226], "211": [92, 107, 212, 226, 232], "prudnikov": [92, 226], "yu": [92, 201, 226], "brychkov": [92, 226], "marichev": [92, 226], "gordon": [92, 160, 226], "breach": [92, 226], "_coeffexpvalueerror": 92, "_get_coeff_exp": 92, "_check_anteced": 92, "_check_antecedents_1": 92, "mt": 92, "_check_antecedents_invers": 92, "anteced": [92, 223], "_condsimp": 92, "hoc": 92, "simp": [92, 191], "_dummi": 92, "_dummy_": 92, "_eval_cond": 92, "_expon": 92, "_find_splitting_point": 92, "fsp": 92, "_flip_g": 92, "_function": 92, "_guess_expans": 92, "sensibl": [92, 94], "_inflate_fox_h": 92, "_inflate_g": 92, "_int0oo": 92, "_int0oo_1": 92, "_int_invers": 92, "_is_analyt": 92, "_meijerint_definite_2": 92, "trigexpand": 92, "_meijerint_definite_3": 92, "_meijerint_definite_4": 92, "only_doubl": 92, "_meijerint_indefinite_1": 92, "_mul_arg": 92, "_my_principal_branch": 92, "full_pb": 92, "nearer": 92, "superflu": 92, "opaqu": [92, 216], "fac": 92, "_rewrite_invers": 92, "costli": [92, 135, 289], "tx": [92, 291], "happili": [94, 240], "nonelementari": 94, "mellin_transform": 94, "bilater": 94, "mellintransform": 94, "integraltransform": 94, "inverse_mellin_transform": 94, "fourier_transform": 94, "hankel_transform": 94, "inverse_hankel_transform": 94, "inversemellintransform": 94, "laplacetransform": 94, "r541": 94, "prooject": 94, "1954": 94, "caltech": 94, "caltechauthor": 94, "20140123": 94, "101456353": 94, "fdict": 94, "inverselaplacetransform": 94, "singularit": [94, 145], "fouriertransform": 94, "_fourier_transform": 94, "inverse_fourier_transform": 94, "sine_transform": 94, "inverse_sine_transform": 94, "cosine_transform": 94, "inverse_cosine_transform": 94, "bixk": 94, "inversefouriertransform": 94, "sinetransform": 94, "inversesinetransform": 94, "cosinetransform": 94, "inversecosinetransform": 94, "hankeltransform": 94, "ht": 94, "inversehankeltransform": 94, "_compute_transform": 94, "_as_integr": 94, "integraltransformerror": 94, "_name": 94, "_collapse_extra": 94, "needev": 94, "function_vari": 94, "transform_vari": 94, "lazard": [94, 209, 212], "rioboo": 94, "trager": 94, "horowitz": 94, "ostrogradski": 94, "ratint": 94, "rationaltool": [94, 212], "ratint_logpart": 94, "ratint_ratpart": 94, "r542": 94, "bronstein": [94, 210, 212, 218, 234], "verlag": [94, 210], "deg": [94, 115, 131, 204, 209, 211, 212], "q_i": [94, 127, 145], "_t": [94, 131, 134, 148, 181, 190, 191, 195, 226, 236], "trigintegr": 94, "trigonometri": 94, "r543": 94, "integration_techniqu": 94, "deltaintegr": 94, "couldn": 94, "singularityintegr": 94, "risch_integr": 94, "nonelementaryintegr": 94, "proven": [94, 107, 267, 285], "handle_first": 94, "separate_integr": 94, "rewrite_complex": 94, "forthcom": 94, "5109": 94, "manualintegr": 94, "integral_step": 94, "student": [94, 225, 229, 236], "rootsum": [94, 212, 218], "substep": 94, "sympy_gamma": 94, "blob": 94, "app": 94, "intstep": 94, "urul": 94, "u_var": 94, "_u": [94, 181], "u_func": 94, "arctanrul": 94, "sinrul": 94, "rewriterul": 94, "addrul": 94, "powerrul": 94, "constanttimesrul": 94, "constantrul": 94, "norman": 94, "retri": [94, 107], "degree_offset": 94, "unnecessary_permut": 94, "_try_heurisch": 94, "manuel": [94, 221], "poor": [94, 108], "man": [94, 210], "airi": [94, 232], "whittak": 94, "r544": 94, "sop": [94, 97], "cafe": 94, "pmint": 94, "r545": 94, "gedd": [94, 210], "stefanu": 94, "217": [94, 210], "r546": 94, "davenport": [94, 209, 210], "eurocam": 94, "lnc": [94, 210, 234], "157": [94, 107, 111, 210], "r547": 94, "iii": [94, 216, 232], "sigsam": 94, "bulletin": 94, "1982": [94, 201], "r548": 94, "transact": [94, 210], "1985": [94, 126, 147, 191, 261], "356": [94, 211, 234], "362": 94, "lookup": [94, 103, 107, 226], "huge": [94, 107, 212, 252], "entail": 94, "delic": [94, 203], "albeit": [94, 265], "mimic": [94, 95, 196, 255], "irrespect": [94, 229, 232, 257], "line_integr": 94, "as_sum": 94, "subinterv": 94, "trapezoid": [94, 103, 236], "730": 94, "809": 94, "decai": 94, "r549": 94, "riemann_sum": 94, "riemann_summation_method": 94, "r550": 94, "cauchy_principal_valu": 94, "r551": 94, "cauchyprincipalvalu": 94, "int_a": 94, "uvar": 94, "3aissu": 94, "3aopen": 94, "3aintegr": 94, "gauss_legendr": 94, "n_digit": 94, "legendr": [94, 107, 212, 216, 229], "r552": 94, "w_i": [94, 150, 212, 232], "7746": 94, "55556": 94, "88889": 94, "86114": 94, "33998": 94, "34785": 94, "65215": 94, "gauss_laguerr": 94, "gauss_gen_laguerr": 94, "gauss_hermit": 94, "gauss_chebyshev_t": 94, "gauss_chebyshev_u": 94, "gauss_jacobi": 94, "gauss_lobatto": 94, "gaussian_quadratur": 94, "r553": 94, "fsu": 94, "jburkardt": 94, "cpp_src": 94, "legendre_rul": 94, "laguerr": [94, 212, 216], "r554": 94, "41577": 94, "2943": 94, "2899": 94, "71109": 94, "27852": 94, "010389": 94, "22285": 94, "1889": 94, "9927": 94, "7751": 94, "8375": 94, "983": 94, "45896": 94, "417": [94, 228], "11337": 94, "010399": 94, "00026102": 94, "9855e": 94, "93laguerre_quadratur": 94, "r555": 94, "laguerre_rul": 94, "hermit": [94, 98, 103, 104, 205, 211, 212, 216, 236], "r556": 94, "2247": 94, "29541": 94, "1816": 94, "3506": 94, "3358": 94, "43608": 94, "00453": 94, "15707": 94, "72463": 94, "hermite_quadratur": 94, "r557": 94, "hermite_rul": 94, "r558": 94, "gen_hermite_rul": 94, "r559": 94, "19016": 94, "7845": 94, "5253": 94, "4493": 94, "31413": 94, "00906": 94, "97851": 94, "9904": 94, "3193": 94, "53087": 94, "67721": 94, "11895": 94, "0023152": 94, "r560": 94, "gen_laguerre_rul": 94, "r561": 94, "86602": 94, "0472": 94, "96593": 94, "70711": 94, "25882": 94, "5236": 94, "93gauss_quadratur": 94, "r562": 94, "chebyshev1_rul": 94, "r563": 94, "3927": 94, "7854": 94, "90097": 94, "62349": 94, "22252": 94, "084489": 94, "27433": 94, "42658": 94, "r564": 94, "chebyshev2_rul": 94, "jacobi": [94, 107, 119, 212, 216], "r565": 94, "7063": 94, "0973": 94, "33795": 94, "87174": 94, "5917": 94, "2093": 94, "050584": 94, "22169": 94, "39439": 94, "93jacobi_quadratur": 94, "r566": 94, "jacobi_rul": 94, "r567": 94, "gegenbauer_rul": 94, "lobatto": 94, "r568": 94, "3333": 94, "44721": 94, "16667": 94, "83333": 94, "93lobatto_rul": 94, "r569": 94, "20200118141346": 94, "page_888": 94, "intpoli": 94, "chin": 94, "al": [94, 131, 160, 209, 225, 228], "2015": [94, 127, 235], "unit_cub": 94, "polytope_integr": 94, "eric": [94, 210], "jean": 94, "lasserr": 94, "sukumar": 94, "nonconvex": 94, "967": 94, "981": 94, "dilbert": 94, "engr": 94, "ucdavi": 94, "suku": 94, "max_degre": [94, 212], "689": [94, 111], "21875": 94, "octahedron": 94, "trivari": 94, "enable_automatic_int_sympif": 95, "enable_automatic_symbol": 95, "init_ipython_sess": 95, "argv": [95, 247], "init_python_sess": 95, "use_latex": [95, 196, 292], "quiet": 95, "str_printer": [95, 196], "latex_print": [95, 196], "pylab": 95, "stringifi": [95, 196], "sstrrepr": [95, 196, 216], "lexograph": [95, 196], "\u03b8": [95, 125, 153, 235], "int_to_integ": 95, "decistmt": 95, "f401": 95, "0x12": 95, "num_column": [95, 196, 216, 232], "no_glob": [95, 196], "ip": [95, 169, 175, 196], "forecolor": [95, 196], "backcolor": [95, 196], "fontsiz": [95, 196, 216], "10pt": [95, 196, 216], "latex_mod": [95, 196], "print_builtin": [95, 196], "interactiveconsol": [95, 196], "preambl": [95, 196, 216], "handwritten": [95, 196], "ctan": [95, 196], "pkg": [95, 196], "dvi": [95, 196, 216], "foreground": [95, 196], "black": [95, 166, 177, 196, 216, 292], "white": [95, 196, 236], "documentclass": [95, 196, 216], "dpi": [95, 196], "u03b8": 95, "dvip": 95, "r570": 95, "r571": 95, "the_68_standard_colors_known_to_dvip": 95, "root_system": 96, "rootsystem": 96, "cartantyp": 96, "cartan": 96, "subalgebra": 96, "adjoint": [96, 98, 103, 158, 162], "hyperplan": 96, "k_y": 96, "r572": 96, "r573": 96, "humphrei": 96, "add_as_root": 96, "root1": 96, "root2": 96, "add_simple_root": 96, "newroot": 96, "all_root": [96, 107, 212], "cartan_matrix": 96, "dynkin_diagram": 96, "dynkin": 96, "root_spac": 96, "simple_root": 96, "type_a": 96, "typea": 96, "basic_root": 96, "iin": 96, "jth": [96, 235], "ijth": 96, "cartan_typ": 96, "highest_root": 96, "lie_algebra": 96, "positive_root": 96, "type_b": 96, "typeb": 96, "b4": 96, "b3": [96, 131, 148, 191, 267], "type_c": 96, "typec": 96, "type_d": 96, "dmension": 96, "type_": 96, "e6": 96, "type_f": 96, "typef": 96, "f_4": [96, 127], "f4": [96, 202], "type_g": 96, "typeg": 96, "weyl_group": 96, "weylgroup": 96, "semisimpl": 96, "isometri": 96, "coxet": 96, "coxeter_diagram": 96, "undirect": [96, 254], "s_is_j": 96, "delete_doubl": 96, "element_ord": 96, "weylelt": 96, "group_nam": 96, "group_ord": 96, "192": 96, "matrix_form": 96, "cartantype_gener": 96, "standard_cartan": 96, "dynkindiagram": 96, "cartanmatrix": 96, "sopform": 97, "minterm": 97, "dontcar": 97, "simplified_pair": 97, "combo": 97, "outcom": [97, 184, 236], "posform": 97, "r574": 97, "quin": 97, "mccluskey_algorithm": 97, "r575": 97, "27t": 97, "care_term": 97, "r576": 97, "r577": 97, "anfform": 97, "truthvalu": 97, "anf": 97, "zhegalkin": 97, "r578": 97, "zhegalkin_polynomi": 97, "booleantru": 97, "greet": 97, "booleanfals": 97, "universalset": [97, 224], "nand": 97, "xnor": 97, "gate": [97, 161, 166, 168, 174, 175, 177, 278], "perspect": [97, 107, 117, 186, 202, 249, 266, 270], "multiplex": 97, "disjunct": 97, "to_anf": 97, "oplu": [97, 165], "to_cnf": 97, "cnf": 97, "mccluskei": 97, "to_dnf": 97, "to_nnf": 97, "nnf": 97, "is_anf": 97, "is_cnf": 97, "is_dnf": 97, "is_nnf": 97, "gateinputcount": 97, "simplify_log": 97, "fewest": [97, 175], "r579": 97, "bool_map": 97, "bool1": 97, "bool2": 97, "function1": 97, "function2": 97, "distribute_and_over_or": 97, "distribute_or_over_and": 97, "distribute_xor_over_and": 97, "eliminate_impl": 97, "truth_tabl": 97, "ibin": [97, 254], "integer_to_term": 97, "0001111011": [97, 254], "1101111000": [97, 254], "term_to_integ": 97, "bool_maxterm": 97, "maxterm": 97, "complement": [97, 100, 212, 224, 235], "r580": 97, "canonical_normal_form": 97, "indexing_maxterm": 97, "bool_minterm": 97, "r581": 97, "indexing_minterm": 97, "bool_monomi": 97, "anf_coeff": 97, "to_int_repr": 97, "all_model": 97, "unsatisfi": 97, "use_model": 97, "unsat": 97, "dirac": [98, 103, 115, 119, 120, 179, 216], "__abs__": [98, 207], "__add__": [98, 207, 211], "__len__": 98, "96": [98, 103, 236], "mismatch": 98, "matrix_multiply_elementwis": [98, 103], "col": [98, 100, 103, 106, 117, 148, 205, 211, 289], "col_del": [98, 103, 289], "col_join": [98, 103, 133], "col_insert": [98, 289], "row_insert": [98, 289], "row_join": [98, 103, 133], "companion": [98, 100], "c0": [98, 100, 223, 232, 234], "sparsematrix": [98, 103, 106, 217, 228], "diag": [98, 100, 103, 106, 148, 205, 242, 289], "immutablematrix": [98, 99, 100, 117, 191, 236, 261, 264, 289], "blockmatrix": [98, 100, 103], "sparsetool": [98, 106], "band": [98, 106], "kth": [98, 107], "rowslist": [98, 205], "colslist": 98, "submatrix": [98, 103, 209, 236], "get_diag_block": [98, 100, 103], "decoupl": 98, "hstack": [98, 205], "is_anti_symmetr": 98, "is_diagon": [98, 103], "is_low": [98, 205], "is_upp": [98, 205], "matrixeigen": [98, 103], "is_diagonaliz": [98, 103], "is_hermitian": [98, 103], "is_lower_hessenberg": 98, "hessenberg": [98, 103], "superdiagon": 98, "is_upper_hessenberg": 98, "is_strongly_diagonally_domin": 98, "strongli": [98, 103, 205, 254], "m1": [98, 103, 107, 110, 111, 152, 160, 178, 180, 184, 229, 232, 237, 242], "subdiagon": [98, 103], "is_weakly_diagonally_domin": 98, "weakli": [98, 254], "vacuou": 98, "jordan_block": [98, 103], "eigenvalu": [98, 103, 131, 133, 175, 178, 287], "eigenv": [98, 103, 131, 133, 148, 175, 287, 289], "r582": 98, "jordan_matrix": [98, 232], "dotprodsimp": 98, "blowup": 98, "multiply_elementwis": [98, 103], "hadamard": [98, 100, 103, 165, 166, 177, 216], "elementwis": [98, 100, 103, 237], "300": [98, 103, 107, 110, 197, 202, 213, 270], "a_0": [98, 103, 219, 229, 232, 237, 293], "vdot": [98, 100, 103, 186], "alpha_0": 98, "alpha_1": [98, 107, 211], "alpha_": [98, 201], "permute_col": 98, "permute_row": 98, "mulsimp": 98, "rmultipli": 98, "__rmul__": 98, "rot90": 98, "anticlockwis": [98, 113], "row_del": [98, 103, 289], "todod": 98, "tolist": [98, 237], "vech": 98, "check_symmetri": 98, "vstack": [98, 205], "w_": [98, 211], "wminu": 98, "wplu": 98, "r583": 98, "mathwork": [98, 115, 236, 289], "cleve": 98, "r584": 98, "claredon": 98, "oxford": 98, "662": 98, "intm": 98, "mutabledensematrix": [99, 205, 257], "densematrix": [99, 103], "ldldecomposit": [99, 103], "ldl": [99, 103], "choleski": [99, 103], "ludecomposit": [99, 100, 103, 289], "qrdecomposit": [99, 103], "as_immut": 99, "lower_triangular_solv": [99, 103], "upper_triangular_solv": [99, 103], "gauss_jordan_solv": [99, 103], "cholesky_solv": [99, 103], "diagonal_solv": [99, 103], "ldlsolv": [99, 103], "qrsolv": [99, 103], "pinv_solv": [99, 103], "cramer_solv": [99, 103], "permutedim": [100, 237, 238], "arraytensorproduct": [100, 237, 238], "from_index_summ": 100, "first_index": 100, "last_index": 100, "longrightarrow": 100, "matpow": [100, 216], "hadamard_product": 100, "aka": 100, "hadamardproduct": [100, 216], "hadamardpow": [100, 216], "ddot": [100, 103, 135, 144, 196, 199, 216, 293], "functionmatrix": 100, "lazili": [100, 222, 254], "342923500": 100, "permutationmatrix": [100, 103], "matrixpermut": 100, "companionmatrix": 100, "matrixset": [100, 224], "submatric": [100, 103, 205, 236], "block_collaps": 100, "dat": [100, 254], "irregular": [100, 103], "ldudecomposit": 100, "ldu": 100, "2x2": [100, 106, 150, 205, 232], "udldecomposit": 100, "udl": 100, "schur": 100, "pinv": [100, 103], "r585": 100, "schur_compl": 100, "blockdiagmatrix": [100, 103], "diag_block": 100, "bridg": [101, 113, 131, 255], "tension": 101, "gramschmidt": 103, "m2": [103, 107, 110, 111, 128, 152, 160, 178, 180, 184, 211, 229, 232, 237, 242], "126": [103, 107, 215], "150": [103, 117, 229], "v3": [103, 191, 195, 267], "glue": 103, "m3": [103, 160, 229, 237], "adj": 103, "qr": 103, "cheat": 103, "soln": 103, "gram": [103, 185, 186, 188], "schmidt": 103, "out1": 103, "out2": 103, "1692": 103, "1551": 103, "423": 103, "6707": 103, "spot": [103, 149], "eigenvector": [103, 131, 175, 176, 201], "nullspac": [103, 205], "matrixdetermin": 103, "adjug": 103, "berkowitz": 103, "bareiss": 103, "bird": 103, "cofactor_matrix": 103, "charpoli": [103, 205, 289], "_simplifi": 103, "purepoli": [103, 212], "samuelson": 103, "minor_submatrix": 103, "iszerofunc": [103, 289], "r586": 103, "barei": 103, "det_lu": 103, "functiontyp": 103, "_iszero": [103, 289], "_is_zero_after_expand_mul": 103, "unrecogn": 103, "nonsquarematrixerror": [103, 232], "i3": [103, 118, 131, 148, 242], "1072": 103, "1074": 103, "ipl": 103, "006": 103, "ryser": 103, "r587": 103, "prof": 103, "ben": 103, "berkelei": 103, "bernd": 103, "ban275": 103, "r588": 103, "permanent_": 103, "r589": 103, "r590": 103, "rectangular": [103, 224, 235, 265], "0904": 103, "3251": 103, "matrixreduct": 103, "echelon_form": [103, 289], "with_pivot": 103, "echelon": [103, 205, 235, 289], "elementary_col_op": 103, "kn": [103, 110, 111], "col1": 103, "col2": 103, "km": [103, 107, 121, 126, 133, 135, 138, 139, 143, 145, 148, 187], "elementary_row_op": 103, "row1": 103, "row2": 103, "is_echelon": [103, 289], "rref": [103, 205], "pivot": [103, 205, 289], "normalize_last": 103, "rref_matrix": [103, 205], "rref_pivot": [103, 205], "301369863013699": 103, "712328767123288": 103, "noramlize_last": 103, "matrixsubspac": 103, "subspac": [103, 211], "columnspac": [103, 205], "rowspac": [103, 205], "orthonorm": [103, 148, 176, 200, 265], "rankcheck": 103, "r591": 103, "93schmidt_process": 103, "eigen": [103, 157], "bidiagonal_decomposit": 103, "ubv": 103, "bidiagon": 103, "bidiagn": 103, "r592": 103, "golub": 103, "van": [103, 107, 210], "loan": 103, "r593": 103, "vslobodi": 103, "household": 103, "r594": 103, "r595": 103, "reals_onli": 103, "error_when_incomplet": 103, "eig": [103, 131, 148], "matrixerror": 103, "got": [103, 203, 206, 209, 212, 215, 247, 248, 254, 255, 285, 287, 288], "eigenvect": [103, 131, 148, 175, 289], "tidi": 103, "artifact": 103, "ret": 103, "eigenspac": 103, "rag": 103, "a_3": 103, "diagonaliz": [103, 289], "is_indefinit": 103, "semidefinit": [103, 236], "plot3d": [103, 202], "is_positive_definit": 103, "is_positive_semidefinit": 103, "is_negative_definit": 103, "is_negative_semidefinit": 103, "defer": [103, 258], "r596": 103, "definiteness_of_a_matrix": 103, "r597": 103, "positivedefinitematrix": 103, "r598": 103, "amer": 103, "259": 103, "264": [103, 234], "r599": 103, "r600": 103, "r601": 103, "r602": 103, "r603": 103, "r604": 103, "r605": 103, "r606": 103, "r607": 103, "r608": 103, "r609": 103, "r610": 103, "jordan_form": 103, "calc_transform": 103, "left_eigenvect": 103, "singular_valu": 103, "condition_numb": 103, "matrixcalculu": 103, "hessian": 103, "wronskian": [103, 232], "simpfunc": 103, "permutebkwd": 103, "permutefwd": 103, "lucombin": 103, "defici": [103, 107, 235], "matrixi": 103, "ludecomposition_simpl": [103, 289], "ludecompositionff": 103, "pa": [103, 126, 128, 143, 146, 149], "r611": 103, "zhou": 103, "jeffrei": [103, 228], "frontier": [103, 224], "china": 103, "67": [103, 209, 210], "2008": [103, 201, 210, 212, 216], "row_swap": 103, "permute_backward": 103, "permute_forward": 103, "intiuit": 103, "lu_": 103, "_find_reasonable_pivot": 103, "qr_solv": 103, "167": 103, "158": [103, 111], "27261": 103, "30625": 103, "348": 103, "1914": 103, "6125": [103, 107], "30589": 103, "198": 103, "1225": 103, "q_aug": 103, "r_aug": 103, "analytic_func": 103, "connected_compon": [103, 254], "connected_components_decomposit": 103, "det_method": 103, "cramer": [103, 126, 232], "46": [103, 107, 110, 186, 215, 234, 236], "r612": 103, "27s_rule": 103, "explicit_formulas_for_small_system": 103, "relax": [103, 109], "3x1": 103, "1x3": 103, "hat": [103, 125, 142, 190, 191, 196, 197, 199, 200, 265, 266, 268, 270, 271], "conjugate_convent": 103, "dual": [103, 173, 179], "anti_symmetr": 103, "speak": [103, 211, 268], "freevar": 103, "underdetermin": [103, 234, 235], "free_var_index": 103, "tau0": [103, 235, 236], "tau1": 103, "taus_zero": 103, "sol_uniqu": 103, "r613": 103, "gaussian_elimin": 103, "try_block_diag": 103, "inverse_g": [103, 289], "inverse_lu": [103, 289], "inverse_adj": [103, 289], "inverse_ch": 103, "inverse_ldl": 103, "inverse_qr": 103, "inv_mod": 103, "cof": 103, "inverse_block": 103, "blockwis": 103, "ntop": 103, "key2bound": 103, "key2ij": 103, "reciproc": [103, 236, 293], "fro": 103, "sing": 103, "spectral": 103, "rd": [103, 131, 216], "r614": 103, "penrose_pseudoinvers": 103, "arbitrary_matrix": 103, "wn_m": 103, "_w0_0": 103, "_w1_0": 103, "_w2_0": 103, "59": [103, 232], "r615": 103, "obtaining_all_solutions_of_a_linear_system": 103, "print_nonzero": [103, 254], "symb": [103, 216], "rank_decomposit": 103, "r616": 103, "rank_factor": 103, "r617": 103, "piziak": 103, "odel": 103, "magazin": 103, "2307": 103, "2690882": 103, "singular_value_decomposit": 103, "condens": [103, 235], "v_aug": 103, "u_aug": 103, "s_aug": 103, "gj": 103, "solve_least_squar": 103, "strongly_connected_compon": [103, 205, 254], "62": [103, 209], "strongly_connected_components_decomposit": 103, "rowstart": 103, "rowend": 103, "rowsep": 103, "colsep": 103, "strprinter": [103, 196], "upper_hessenberg_decomposit": 103, "213": 103, "134": 103, "216": [103, 209], "hessenbergdecomposit": 103, "angular": [103, 110, 119, 122, 125, 128, 133, 134, 135, 136, 138, 140, 142, 145, 148, 150, 154, 155, 157, 160, 178, 182, 191, 195, 201], "rot_ccw_axis3": 103, "retriv": 103, "jordan_cel": 103, "varlist": 103, "r618": 103, "hessian_matrix": 103, "vlist": 103, "r619": 103, "casoratian": 103, "kernel": [103, 203, 209, 211, 234], "vanish": [103, 181, 209, 212, 215, 232, 261], "rsolve_hyp": [103, 234], "randmatrix": 103, "percent": [103, 235], "prng": 103, "percentag": [103, 107], "rot_given": 103, "diment": 103, "kk": 103, "ji": [103, 238], "rot_axis1": 103, "rot_axis2": 103, "rot_axis3": 103, "rot_ccw_axis1": 103, "rot_ccw_axis2": 103, "r620": 103, "givens_rot": 103, "list2numpi": 103, "dtype": [103, 108, 203, 205, 206, 207, 216, 255], "matrix2numpi": 103, "symarrai": 103, "ndarrai": [103, 236, 242, 248], "prefix_i1_i2_": 103, "a_0_0": 103, "a_0_1": 103, "a_0_2": 103, "a_1_0": 103, "a_1_1": 103, "a_1_2": 103, "a_0_0_0": 103, "a_0_0_1": 103, "a_0_1_0": 103, "a_0_1_1": 103, "a_0_2_0": 103, "a_0_2_1": 103, "a_1_0_0": 103, "a_1_0_1": 103, "a_1_1_0": 103, "a_1_1_1": 103, "a_1_2_0": 103, "a_1_2_1": 103, "a2idx": 103, "normalform": [104, 205], "hermite_normal_form": [104, 205, 211], "check_rank": [104, 205], "hnf": [104, 205, 211], "explos": [104, 205], "believ": [104, 107, 205], "dmdomainerror": [104, 205], "dmshapeerror": [104, 205], "r621": 104, "mutablesparsematrix": 105, "_doktocsr": 106, "csr": 106, "ja": 106, "ia": 106, "_csrtodok": 106, "dok": 106, "1x1": [106, 236], "vert": [106, 197, 200, 270], "saw": [106, 206, 293], "sieve_interv": 107, "dynam": [107, 114, 115, 117, 121, 123, 126, 127, 128, 130, 133, 141, 143, 144, 145, 146, 147, 148, 149, 190, 191, 193, 195, 199, 200, 251, 252, 261], "eratosthen": 107, "_reset": [107, 212], "_list": 107, "extend_to_no": 107, "mobiusrang": 107, "primerang": 107, "10th": 107, "totientrang": 107, "1e11": 107, "50000": 107, "primal": [107, 203], "1299709": 107, "r622": 107, "prime_number_theorem": 107, "table_of_": 107, "cf": [107, 209], "28x": 107, "2c_x_": 107, "2f_log_x": 107, "2c_and_li": 107, "r623": 107, "approximations_for_the_nth_prime_numb": 107, "r624": 107, "27_number": 107, "arr1": 107, "arr2": 107, "prevprim": 107, "9th": 107, "nextprim": 107, "occupi": [107, 181, 242], "conjectur": [107, 209], "twin": 107, "bertrand": 107, "brocard": 107, "primori": 107, "r625": 107, "r626": 107, "utm": 107, "postul": 107, "112": [107, 209, 213], "r627": 107, "s_postul": 107, "primefactor": 107, "argu": 107, "cycle_length": 107, "nmax": 107, "brent": [107, 251], "floyd": 107, "cycle_detect": 107, "17737": 107, "20000": 107, "compositepi": 107, "831": 107, "smoothness_p": 107, "sm": [107, 131, 148, 203], "psm": 107, "govern": 107, "10431": 107, "21477639576571": 107, "4410317": 107, "1787": 107, "4869863": 107, "2434931": 107, "multiplicity_in_factori": 107, "nfac": 107, "52818775009509558395695966887": 107, "is2pow": 107, "pollard_rho": 107, "max_step": 107, "pollard": [107, 232], "leader": 107, "16843009": 107, "32767": 107, "4i": 107, "3i": 107, "2489": 107, "1482": 107, "285": [107, 234], "leadup": 107, "r628": 107, "crandal": 107, "carl": [107, 251], "pomer": [107, 251], "229": 107, "231": [107, 191], "pollard_pm1": 107, "likelihood": 107, "1009": 107, "am": [107, 186, 216], "255": 107, "crack": 107, "617": 107, "1786": 107, "worst": [107, 212, 232], "scenario": [107, 236], "divisisor": 107, "realist": 107, "r629": 107, "236": 107, "r630": 107, "20150716201437": 107, "washington": 107, "2007": [107, 147, 251], "ent": 107, "node81": 107, "r631": 107, "toronto": 107, "yuvalf": 107, "use_ecm": 107, "65537": [107, 215], "1407633717262338957430697921446883": 107, "991": 107, "202916782076162456022877024859": 107, "4200": 107, "1764": 107, "toggl": [107, 202], "12345678910111213141516": 107, "2507191691": 107, "1231026625769": 107, "factorrat": 107, "rat": 107, "987": 107, "10000000001": 107, "99009901": 107, "divisor_count": 107, "tim": [107, 254], "1010381": 107, "proper_divisor": 107, "proper_divisor_count": 107, "udivisor": 107, "udivisor_count": 107, "r632": 107, "unitary_divisor": 107, "r633": 107, "unitarydivisor": 107, "r634": 107, "unitarydivisorfunct": 107, "antidivisor": 107, "r635": 107, "margin": [107, 117, 202, 236], "antidivisor_count": 107, "a066272": 107, "a066272a": 107, "r636": 107, "r637": 107, "27s_totient_funct": 107, "r638": 107, "totientfunct": 107, "r639": 107, "carmichael_funct": 107, "r640": 107, "carmichaelfunct": 107, "sigma_k": 107, "m_i": [107, 201, 209], "m_ik": 107, "r641": 107, "divisor_funct": 107, "udivisor_sigma": 107, "47450": 107, "152": 107, "r642": 107, "core_t": 107, "core_2": 107, "squarefre": [107, 211], "cubefre": 107, "9424": 107, "1178": 107, "379238": 107, "square_factor": [107, 229], "r643": 107, "free_integ": 107, "squarefree_cor": 107, "primenu": 107, "r644": 107, "primeomega": 107, "r645": 107, "mersenne_prime_expon": 107, "mersenn": 107, "4423": 107, "r646": 107, "perfectnumb": 107, "r647": 107, "perfect_numb": 107, "is_mersenne_prim": 107, "r648": 107, "mersenneprim": 107, "abund": 107, "is_abund": 107, "r649": 107, "abundantnumb": 107, "is_defici": 107, "r650": 107, "deficientnumb": 107, "is_amic": 107, "amic": 107, "220": [107, 212], "r651": 107, "amicable_numb": 107, "symmetric_residu": 107, "v_i": [107, 211, 234], "65": [107, 117, 209, 236], "639985": [107, 209], "912285": [107, 209], "954": 107, "gf_crt": [107, 209], "solve_congru": [107, 209], "programm": [107, 216], "galoistool": [107, 209], "crt1": [107, 209], "crt2": [107, 209], "397042": 107, "803206": 107, "gf_crt1": [107, 209], "4536": 107, "gf_crt2": [107, 209], "remainder_modulus_pair": 107, "mi": [107, 216], "k1": [107, 148, 179, 206, 207, 209], "k2": [107, 148, 206], "c_kn": 107, "binomial_coefficients_list": 107, "multinomial_coeffici": 107, "k_m": 107, "k_i": [107, 209, 226], "yann": 107, "laigl": 107, "chapui": 107, "permiss": [107, 201], "multinomial_coefficients_iter": 107, "_tupl": 107, "m53": 107, "partitions_": 107, "npartit": 107, "hardi": 107, "rademach": [107, 236], "r652": 107, "1958": [107, 201], "partitionfunctionp": 107, "is_euler_pseudoprim": 107, "pseudoprim": 107, "r653": 107, "euler_pseudoprim": 107, "prep": [107, 232, 233], "r654": 107, "mersenneforum": 107, "showpost": 107, "110896": 107, "mr": 107, "miller": 107, "rabin": 107, "wit": 107, "1373651": 107, "479001599": 107, "r655": 107, "135": 107, "138": 107, "93rabin_primality_test": 107, "deterministic_vari": 107, "is_lucas_prp": 107, "selfridg": 107, "377": 107, "1159": 107, "1829": 107, "3827": 107, "5459": 107, "5777": 107, "9071": 107, "9179": 107, "bailli": 107, "wagstaff": 107, "1980": [107, 254], "mpq": [107, 205, 206], "lucaspseudoprim": 107, "a217120": 107, "lucas_pseudoprim": 107, "is_strong_lucas_prp": 107, "bpsw": 107, "10877": 107, "16109": 107, "18971": 107, "a217255": 107, "psw_primality_test": 107, "is_extra_strong_lucas_prp": 107, "grantham": 107, "mo": [107, 148, 216], "jone": [107, 153], "preprint": 107, "a217719": 107, "perl": 107, "989": 107, "3239": 107, "jon": 107, "mcom": 107, "234": 107, "01197": 107, "counterexampl": [107, 293], "1e3": 107, "1e23": [107, 257], "near_int": 107, "strong_pseudoprim": 107, "is_gaussian_prim": 107, "r656": 107, "gaussian_prim": 107, "residue_ntheori": [107, 209], "n_order": 107, "2q": 107, "primitive_root": [107, 211], "r657": 107, "stein": [107, 232], "r658": 107, "hackman": 107, "sqrt_mod": 107, "sqrt_mod_it": 107, "quadratic_residu": 107, "nthroot_mod": 107, "109": [107, 210, 229], "is_nthpow_residu": 107, "r659": 107, "is_quad_residu": 107, "legendre_symbol": 107, "genfrac": 107, "nonresidu": 107, "alpha_2": [107, 211], "alpha_k": 107, "discrete_log": 107, "prime_ord": 107, "giant": [107, 235], "pohlig": 107, "r660": 107, "discretelogarithm": 107, "r661": 107, "cryptographi": [107, 272, 279], "menez": 107, "vanston": 107, "quadratic_congru": 107, "polynomial_congru": [107, 209], "3257": 107, "gf_csolv": [107, 209], "binomial_mod": 107, "r662": 107, "24310": 107, "continued_fract": 107, "continued_fraction_period": 107, "continued_fraction_reduc": 107, "continued_fraction_converg": 107, "continued_fraction_iter": 107, "106": 107, "103993": 107, "33102": 107, "104348": 107, "33215": 107, "208341": 107, "66317": 107, "292": 107, "r663": 107, "discrimin": [107, 207, 209, 211, 212], "r664": 107, "periodic_continued_fract": 107, "r665": 107, "rosen": 107, "379": [107, 212], "381": 107, "januari": 107, "1992": [107, 210, 234, 254], "233": [107, 210, 232], "718281835": 107, "287": 107, "count_digit": 107, "1111339": 107, "0xfa": 107, "c77": 107, "is_palindrom": [107, 254], "palindrom": 107, "0o121": 107, "oct": 107, "0o171": 107, "fermion": [107, 181], "r666": 107, "b6bius_funct": 107, "r667": 107, "thoma": [107, 147], "koshi": 107, "egyptian_fract": 107, "greedi": [107, 209, 225, 228], "egyptian": 107, "r668": 107, "jewett": 107, "takenouchi": 107, "3192": 107, "1118": 107, "2580": 107, "sylvest": [107, 209], "r669": 107, "seldom": 107, "blow": 107, "doubli": 107, "exhibit": [107, 201, 211, 225], "singli": 107, "tendenc": 107, "r670": 107, "1921": 107, "golumb": 107, "1962": 107, "propos": 107, "bleicher": 107, "1972": 107, "r671": 107, "420": [107, 229], "140": 107, "574": 107, "2788": 107, "6460": 107, "11590": 107, "33062": 107, "113820": 107, "greedy_algorithm_for_egyptian_fract": 107, "uci": 107, "eppstein": 107, "numth": 107, "egypt": 107, "20180413004012": 107, "ami": 107, "ektf": 107, "hu": [107, 205], "finalpdf": 107, "ami_42_from129to134": 107, "bbp_pi": 107, "pi_hex_digit": 107, "hex": 107, "3243f6a8885a30": 107, "0x3243f6a8885a30": 107, "0x324": 107, "r672": 107, "numberworld": 107, "subexponenti": 107, "comfort": [107, 108], "15154262241479": 107, "15423094826093": 107, "799333555511111": 107, "809709509409109": 107, "888888877777777": 107, "914148152112161": 107, "factoris": [107, 206, 207, 232], "max_curv": 107, "lenstra": [107, 205], "ecm_one_factor": 107, "pseudorandom": [107, 254], "25645121643901801": 107, "5394769": 107, "4753701529": 107, "9804659461513846513": 107, "4641991": 107, "2112166839943": 107, "7060005655815754299976961394452809": 107, "6988699669998001": 107, "1010203040506070809": 107, "122921448543883967430908091422761898618349713604256384403202282756086473494959648313841": 107, "2709077133180915240135586837960864768806330782747": 107, "248": 107, "prime_bound": 107, "error_term": 107, "siq": 107, "modn": 107, "r673": 107, "semanticscholar": 107, "5c52": 107, "8a975c1405bd35c65993abf5a4edb667c1db": 107, "r674": 107, "rieselprim": 107, "ziki": 107, "initializing_quadratic_siev": 107, "5915587277": 107, "3267000013": 107, "000507214304613640": 108, "microsecond": 108, "000507214304614": 108, "hundr": [108, 255, 287], "nanosecond": 108, "84147098": [108, 255, 282], "84119981": 108, "84092844": 108, "05426074": 108, "05433146": 108, "05440211": 108, "nano": 108, "manufactur": 108, "asnumpi": 108, "jnp": 108, "asarrai": 108, "84147096": 108, "8411998": 108, "05426079": 108, "05433151": 108, "autowrap": [108, 241, 249, 253, 280], "implemented_funct": [108, 248, 255], "qualiti": [108, 216], "50u": 108, "1u": 108, "10n": 108, "sympy_pars": 109, "local_dict": 109, "lambda_not": 109, "repeated_decim": 109, "auto_numb": 109, "factorial_not": 109, "global_dict": 109, "standard_transform": 109, "implicit_multiplication_appl": 109, "implicit_appl": 109, "implicit_multipl": 109, "convert_equals_sign": 109, "function_exponenti": 109, "stringify_expr": 109, "eval_expr": 109, "name_dict": 109, "fullform": 109, "setdelai": 109, "datatyp": [109, 207, 216, 249], "split_symbol": 109, "split_symbols_custom": 109, "_token_splitt": 109, "can_split": 109, "unsplitt": 109, "10sin": 109, "3xyz": 109, "2111": 109, "latex2sympi": 109, "typograph": 109, "stricter": 109, "liber": [109, 121, 287], "gracefulli": [109, 216, 240], "618": 109, "latexparsingerror": 109, "sym_expr": 109, "sympyexpress": 109, "source_cod": 109, "return_expr": 109, "src2": 109, "convert_to_expr": 109, "convert_to_c": 109, "src3": 109, "convert_to_python": 109, "src_code": 109, "filenam": [109, 216, 247, 248, 249, 257], "convert_to_fortran": 109, "continuum_mechan": [110, 111, 113], "elastic_modulu": 110, "second_mo": 110, "base_char": 110, "withstand": [110, 111], "character": [110, 111, 197, 200, 223, 236, 242, 270], "profil": [110, 117], "shear": [110, 111], "meter": [110, 111, 152, 155, 184, 185, 186, 187, 188], "downward": [110, 111, 113, 211], "apply_load": [110, 111, 113], "bc_deflect": [110, 111], "boundary_condit": 110, "solve_for_reaction_load": [110, 111], "shear_forc": [110, 111], "bending_mo": [110, 111], "reaction": [110, 111, 113], "upward": [110, 211], "reaction_load": [110, 111, 113], "applied_load": 110, "nm": [110, 111, 179, 237], "pointload": [110, 111], "ramp": [110, 111], "parabol": 110, "apply_support": [110, 113], "loc": 110, "freedom": [110, 125, 126, 130, 132, 135, 141, 236, 278], "roller": [110, 111, 113], "r_10": 110, "r_30": 110, "4000": [110, 111], "bc_slope": [110, 111], "cross_sect": 110, "elast": [110, 111], "12000": 110, "draw": [110, 113, 161, 216, 236], "pictori": 110, "ild_moment": 110, "ild_react": 110, "ild_shear": 110, "axial": [110, 150], "hing": [110, 111, 142], "cantilev": [110, 111], "666666666666667": [110, 111], "max_bmoment": 110, "max_deflect": 110, "max_shear_forc": 110, "plot_bending_mo": [110, 111], "gpa": 110, "400": [110, 202, 212], "13750": 110, "31250": 110, "plot_deflect": [110, 111], "00138541666666667": 110, "86458333333333e": 110, "04166666666667e": 110, "20833333333333e": 110, "51041666666667e": 110, "plot_ild_mo": 110, "solve_for_ild_mo": 110, "1kn": 110, "r_0": 110, "r_8": 110, "solve_for_ild_react": 110, "plot_ild_react": 110, "5kn": 110, "r_7": 110, "plotgrid": 110, "plot_ild_shear": 110, "solve_for_ild_shear": 110, "plot_loading_result": [110, 111], "subplot": [110, 202], "plot_shear_forc": [110, 111], "plot_shear_stress": 110, "stress": 110, "6875": 110, "2500": 110, "15625": [110, 188], "plot_slop": [110, 111], "59375e": 110, "125e": 110, "08333333333333e": 110, "0001953125": 110, "point_cflexur": 110, "overhang": [110, 111], "10kn": 110, "20kn": [110, 111], "3kn": 110, "remove_load": [110, 113, 122], "shear_stress": 110, "beam3d": 110, "shear_modulu": 110, "apply_moment_load": 110, "solve_slope_deflect": 110, "r675": 110, "aau": 110, "jc": 110, "femtesemest": 110, "beams3d": 110, "angular_deflect": 110, "depict": [110, 197, 235, 270], "axial_forc": 110, "axial_stress": 110, "load_vector": 110, "max_bending_mo": 110, "16000": 110, "495": 110, "10793": 110, "6400": 110, "301": [110, 226, 229], "560": 110, "2400": 110, "moment_load_vector": 110, "40000": 110, "4013": 110, "90300": 110, "1520": 110, "903": 110, "1600": [110, 111], "172": 110, "polar_mo": 110, "i1": [110, 118, 131, 148, 242], "1350": 110, "solve_for_tors": 110, "torsion": 110, "torqu": [110, 122, 126, 128, 130, 136, 143, 144, 146, 148], "torsional_mo": 110, "________________": [111, 232], "_______________v": 111, "_______________": 111, "equilibrium": [111, 113, 133, 145], "20e9": 111, "25e": 111, "______________________________________________": 111, "_______________________________________________": 111, "r\u2081": 111, "r\u2082": 111, "______________________": 111, "________________________": 111, "8kn": 111, "_____________": 111, "1m": 111, "3m": 111, "2m": 111, "5m": [111, 251], "679": 111, "12kn": 111, "________________________________": 111, "____________________________________________________": 111, "o____________________________________________________": 111, "4m": 111, "_____________________________________": 111, "m\u2081": 111, "m\u2082": 111, "connector": 111, "_____________________": 111, "_______________________": 111, "_____________________o_______________________": 111, "oooo": [111, 254], "r\u2083": 111, "_______i_______": 111, "flexur": 111, "rigid": [111, 113, 122, 126, 128, 131, 133, 136, 141, 148, 191, 199, 278], "____________": 111, "____________o________________________": 111, "a\u2082": [111, 293], "assembli": [113, 133], "joint": [113, 124, 130, 134, 136, 141, 278], "add_nod": 113, "node_1": 113, "node_2": 113, "node_3": 113, "node_4": 113, "add_memb": 113, "member_1": 113, "member_2": 113, "member_3": 113, "member_4": 113, "member_5": 113, "270": 113, "360": 113, "change_member_label": 113, "new_label": 113, "change_node_label": 113, "bc_new": 113, "subs_dict": 113, "ag": [113, 232], "bf": [113, 148], "fc": 113, "fe": 113, "internal_forc": 113, "member_length": 113, "node_label": 113, "node_posit": 113, "remove_memb": 113, "remove_nod": 113, "remove_support": 113, "revolv": 113, "tensil": 113, "r_node_1_x": 113, "r_node_1_i": 113, "r_node_2_i": 113, "interconnect": [114, 117, 125], "mimoseri": [114, 117], "mimoparallel": [114, 117], "control_plot": 115, "pole_color": 115, "blue": [115, 142, 202, 216], "pole_markers": 115, "zero_color": 115, "orang": 115, "zero_markers": 115, "show_ax": 115, "marker": [115, 202], "sisolineartimeinvari": [115, 117], "markers": 115, "pole_zero_numerical_data": 115, "r676": 115, "93zero_plot": 115, "siso": [115, 117], "8660254j": 115, "bode_plot": 115, "initial_exp": 115, "final_exp": 115, "freq_unit": 115, "phase_unit": 115, "semilog": 115, "hz": 115, "hertz": 115, "bode_magnitude_numerical_data": 115, "5148378120533502e": 115, "68437": 115, "36188804005": 115, "020599914256786": 115, "0205999155219505": 115, "4117304087953": 115, "00000000260573": 115, "bode_phase_numerical_data": 115, "4472354033813751e": 115, "035581932165858e": 115, "47577": 115, "3248186011": 115, "67884": 115, "09326036123": 115, "5000000000291665e": 115, "6180885085e": 115, "08895483066e": 115, "1415085799262523": 115, "14155265358979": 115, "impulse_response_plot": 115, "lower_limit": [115, 283], "upper_limit": [115, 283], "ramp_response_plot": 115, "r677": 115, "impulse_response_numerical_data": 115, "lineover1drangeseri": [115, 202], "amplitud": [115, 155], "06616480200395854": 115, "854500743565858": 115, "9999999799999999": 115, "7042848373025861": 115, "170748906965121e": 115, "1901263495547205e": 115, "r678": 115, "step_response_numerical_data": 115, "025413462339411542": 115, "0484508722725343": 115, "670250533855183": 115, "844291913708725": 115, "023844582399907256": 115, "042894276802320226": 115, "828770759094287e": 115, "456457160755703e": 115, "mx": [115, 161, 223], "r679": 115, "ramp_funct": 115, "ramp_response_numerical_data": 115, "12166980856813935": 115, "861246379582118": 115, "4504508011325967e": 115, "006046440489058766": 115, "12499999999568202": 115, "12499999999661349": 115, "den": [117, 207, 228, 232], "superscript": [117, 216], "tf3": 117, "tf4": 117, "tf5": 117, "tf6": 117, "500000000000000": 117, "tf7": 117, "tf8": 117, "tf9": 117, "tf10": 117, "tf11": 117, "tf12": 117, "r680": 117, "transfer_funct": 117, "r681": 117, "from_coeff_list": 117, "num_list": 117, "den_list": 117, "zerodivisionerror": [117, 207, 245, 255], "1j": [117, 206], "is_biprop": 117, "is_prop": 117, "is_strictly_prop": 117, "feedforward": 117, "fed": 117, "sit": [117, 200], "compulsori": 117, "tf_1": 117, "tf_2": 117, "tf_3": 117, "tf_4": 117, "tfm_1": 117, "tfm_2": 117, "tf_5": 117, "tf_6": 117, "tf_7": 117, "tf_8": 117, "tfm_3": 117, "tfm_4": 117, "tfm_5": 117, "tfm_6": 117, "tf_9": 117, "tf_10": 117, "tfm_7": 117, "tfm_8": 117, "tfm_9": 117, "tfm_10": 117, "tfm_11": 117, "tfm_12": 117, "m_tf": 117, "tfm": 117, "tfm1": 117, "tfm2": 117, "tfm3": 117, "mimolineartimeinvari": 117, "mat_a": 117, "mat_b": 117, "mat_c": 117, "tfm_a": 117, "tfm_b": 117, "tfm_c": 117, "expr_1": 117, "expr_2": 117, "expr_3": 117, "expr_4": 117, "plant_mat": 117, "controller_mat": 117, "neg_feedback": 117, "gbt": 117, "sample_p": 117, "bilinear": 117, "numz": 117, "denz": 117, "r682": 117, "polyu": 117, "hk": [117, 229], "ama": 117, "gfzhang": 117, "zcc09_ijc": 117, "forward_diff": 117, "backward_diff": 117, "tz": 117, "hep": 118, "gamma_matric": [118, 120], "gammamatrix": 118, "lorentzindex": 118, "gammamatrixhead": 118, "extract_type_ten": 118, "gamma_trac": 118, "i0": [118, 153, 242], "i2": [118, 131, 148, 242], "i4": [118, 242], "i5": 118, "kahane_simplifi": 118, "spinor": 118, "ta": [118, 225], "tb": [118, 225, 247], "tc": [118, 207, 212, 225], "joseph": [118, 210], "kahan": 118, "octob": 118, "1968": 118, "simplify_gpgp": 118, "e_nl": [119, 182], "hartre": 119, "helium": 119, "2209": 119, "e_nl_dirac": 119, "spin_up": 119, "035999037000": 119, "relativist": 119, "momentum": [119, 128, 131, 148, 159, 160, 178, 182, 201, 242], "light": [119, 153, 185, 186, 196, 203], "035999037": 119, "1012": 119, "3627": 119, "500006656595360": 119, "125002080189006": 119, "125000416028342": 119, "0555562951740285": 119, "0555558020932949": 119, "0555556377366884": 119, "psi_nlm": 119, "wave": [119, 151, 152, 153, 219, 278], "psi_": [119, 157], "nlm": 119, "radial": [119, 135, 182], "nl": [119, 182], "magnet": [119, 152, 197, 270], "azimuth": 119, "wf": [119, 133], "abs_sqrd": 119, "silver": 119, "94": [119, 210], "141": 119, "4418": 119, "mdft": 120, "mgamma": 120, "gamma_5": 120, "gamma_0": 120, "gamma_3": 120, "r683": 120, "msigma": 120, "pauli": [120, 278], "sigma_i": [120, 236], "r684": 120, "pauli_matric": [120, 156], "pat_matrix": 120, "unansw": [121, 190], "kane": [121, 124, 125, 130, 131, 137, 141, 142, 147, 148, 190, 191, 261, 278], "q1d": [121, 131, 133, 135, 138, 139, 140, 143, 144, 145, 146, 190, 196, 200], "q2d": [121, 131, 133, 135, 138, 139, 140, 143, 144, 195, 196], "q3d": [121, 138, 139, 140, 143], "kinemat": [121, 125, 126, 130, 131, 133, 134, 135, 136, 138, 140, 142, 143, 145, 146, 148, 149, 191, 194, 198, 200, 278], "dyad": [121, 148, 191, 265], "mprint": [121, 138, 139, 140, 143], "mpprint": [121, 143], "mlatex": 121, "sub_dict": [121, 123, 133], "msub": [121, 123, 145], "gsl": [121, 249], "lsoda": 121, "penalti": 121, "central_inertia": [122, 128, 134, 136], "possess": [122, 146, 242], "name_of_bodi": 122, "ixx": [122, 128, 191], "body_inertia": 122, "ang_vel_in": [122, 125, 131, 138, 139, 148, 191, 199], "set_ang_vel": [122, 128, 131, 133, 138, 139, 145, 146, 148, 149, 191, 193, 195, 199], "apply_forc": [122, 125, 136], "reaction_bodi": [122, 125, 136], "reaction_point": 122, "oppposit": 122, "desri": 122, "force1": 122, "b_masscent": 122, "b_frame": [122, 125], "newtonion": [122, 125], "spring_forc": 122, "n_frame": 122, "apply_torqu": [122, 136], "torquess": 122, "torque1": 122, "b1_frame": 122, "b2_frame": 122, "clear_load": 122, "kinetic_energi": [122, 128, 146, 148], "inerti": [122, 125, 126, 128, 130, 133, 135, 138, 143, 144, 146, 148], "set_vel": [122, 126, 128, 131, 133, 135, 138, 139, 140, 143, 144, 145, 146, 148, 149, 195, 199], "b_ixx": 122, "b_mass": [122, 125], "masscenter_vel": 122, "parallel_axi": [122, 128], "a_ixx": 122, "a_mass": 122, "a_ixi": 122, "a_izx": 122, "a_iyi": 122, "a_iyz": 122, "a_izz": 122, "smart": [123, 145, 223, 229, 232], "sub1": [123, 216], "sub2": [123, 216], "find_dynamicsymbol": [123, 128], "reference_fram": [123, 128, 191], "symbolicsystem": [124, 141, 278], "interfram": [125, 195], "_generate_coordin": 125, "_generate_spe": 125, "_orient_fram": 125, "_set_angular_veloc": 125, "_set_linear_veloc": 125, "kde": [125, 130, 134, 135, 142, 145], "revolut": 125, "\u03c9": 125, "pc": [125, 213], "p_masscent": 125, "c_masscent": 125, "p_frame": 125, "c_frame": 125, "q_pc": 125, "u_pc": 125, "upper_bob": 125, "lower_bob": 125, "ceiling_joint": 125, "pendulum_joint": 125, "q_p1": 125, "q_p2": 125, "u_fram": 125, "l_frame": 125, "u_p1": 125, "u_p2": 125, "vel": [125, 131, 133, 135, 139, 142, 148, 195, 199, 268], "prismat": 125, "slide": 125, "part1": 125, "part2": 125, "j1": [125, 134, 136, 160, 178], "j2": [125, 134, 136, 160, 178], "q_j1": 125, "w_frame": 125, "q_j2": 125, "p1_frame": 125, "u_j1": 125, "cylindricaljoint": 125, "rotation_coordin": 125, "translation_coordin": 125, "rotation_spe": 125, "translation_spe": 125, "cylindr": [125, 202, 268], "q0_": 125, "q1_": 125, "u0_": 125, "u1_": 125, "q0_pc": 125, "q1_pc": 125, "u0_pc": 125, "u1_pc": 125, "tube": 125, "floor_joint": 125, "flag_joint": 125, "q0_c1": 125, "q0_c2": 125, "q1_c1": 125, "floor_fram": 125, "q1_c2": 125, "tube_fram": 125, "flag_fram": 125, "u0_c1": 125, "u0_c2": 125, "u1_c1": 125, "planarjoint": 125, "planar_coordin": 125, "planar_spe": 125, "q2_": 125, "u2_": 125, "nonparallel": 125, "q_1": [125, 134, 135, 136, 145, 161, 199, 212, 229], "q_2": [125, 134, 135, 136, 145, 199], "q_0": [125, 161, 229], "rotation_axi": 125, "planar_vector": 125, "q2_pc": 125, "u2_pc": 125, "parent_vector": 125, "plane_vector": 125, "g_frame": 125, "sphericaljoint": 125, "rot_typ": [125, 191, 195, 197], "rot_ord": [125, 191, 195, 263], "ball": 125, "socket": 125, "tait": [125, 191, 261, 263], "bryan": [125, 191, 261, 263], "joint_point": 125, "zxz": [125, 191, 200, 261, 263], "weldjoint": 125, "weld": 125, "quarter": [125, 153], "rotated_fram": 125, "jointsmethod": [125, 134, 136], "form_eom": [125, 130, 136, 142], "mass_matrix_ful": [125, 126, 130, 131, 136, 143, 144], "forcing_ful": [125, 126, 130, 131, 136, 143, 144], "mass_matrix": [125, 126, 130, 133, 138, 139, 143, 144, 149], "lagrangesmethod": [125, 126, 130, 135, 140, 144, 145], "qd": [125, 126, 130, 133, 143, 195], "inv_method": [125, 126, 130], "q_ind": [126, 127, 130, 131, 133, 134, 135, 138, 139, 143, 145, 148], "u_ind": [126, 127, 130, 131, 133, 134, 135, 138, 139, 143, 145, 148], "kd_eq": [126, 131, 133, 134, 135, 138, 139, 145, 148], "q_depend": [126, 133, 134, 135, 143, 148], "configuration_constraint": [126, 133, 134, 135, 143], "u_depend": [126, 133, 134, 135, 143, 148], "velocity_constraint": [126, 133, 134, 135, 143, 148], "acceleration_constraint": 126, "u_auxiliari": [126, 139, 143, 148], "forcelist": [126, 131, 134, 135, 138, 139, 144, 145, 148], "explicit_kinemat": 126, "kd_eqs_solv": 126, "constraint_solv": 126, "levinson": [126, 147, 191, 261], "udot": [126, 133], "linsolv": [126, 148, 214, 234, 235, 294], "ud": [126, 143], "kd": [126, 133, 138, 139, 143], "fl": [126, 133, 143, 144, 148, 210], "bl": [126, 133, 143, 148], "frstar": [126, 131, 133, 135, 138, 139, 143, 145, 148], "kanes_equ": [126, 131, 133, 135, 138, 139, 143, 145, 148], "a_and_b": [126, 127, 135], "auxiliary_eq": [126, 139], "k_d": [126, 143], "k_dnh": 126, "f_d": [126, 130, 143, 144, 209], "f_dnh": 126, "mass_matrix_kin": 126, "k_kqdot": 126, "forcing_kin": 126, "k_ku": 126, "constrain": [126, 127, 135, 144, 148], "kindiffdict": [126, 133, 138, 139, 143, 148], "new_method": [126, 135], "linear_solv": [126, 127], "intens": [126, 127, 150, 153], "perm_mat": [126, 127, 145], "op_point": [126, 127, 135, 145], "beforehand": [126, 130, 249], "to_linear": [126, 145], "recalcul": [126, 212], "hol_coneq": [126, 135, 144], "nonhol_coneq": [126, 135, 144], "nonconserv": 126, "form_lagranges_equ": [126, 135, 140, 144, 145], "qdot": [126, 133, 134, 195], "qdoubledot": 126, "lam": [126, 127, 149], "lagranges_equ": 126, "qd_ind": [126, 145], "q_dep": [126, 130, 143, 145], "qd_dep": [126, 145], "solve_multipli": [126, 135], "sol_typ": 126, "array_lik": [126, 127], "f_3": [127, 130, 149, 232], "f_c": [127, 135], "f_v": [127, 135], "f_a": 127, "q_d": 127, "u_i": [127, 145, 199, 209], "u_d": [127, 148], "r685": 127, "peterson": 127, "gede": 127, "hubbard": 127, "multibodi": [127, 128, 131, 141, 147, 148, 149, 199], "syst": 127, "dyn": 127, "feb": 127, "s11044": 127, "014": 127, "9436": 127, "q_op": [127, 135], "u_op": [127, 135], "qd_op": 127, "ud_op": [127, 135], "spatial": [128, 155, 191, 216], "angular_momentum": [128, 146, 148], "init_vprint": [128, 129, 146, 149, 191, 193, 195, 196, 199, 200], "linear_momentum": [128, 146, 148], "inertia_tupl": 128, "from_tensor": 128, "from_inertia_scalar": 128, "iyi": [128, 191], "izz": [128, 191], "ixi": [128, 191], "iyz": [128, 191], "izx": 128, "yy": [128, 191, 200, 232], "yz": [128, 191, 200, 202], "zx": [128, 191, 200], "pos_vec": 128, "px": [128, 171, 176, 242], "center_of_mass": [128, 148], "p1_pt": 128, "p2_pt": 128, "p3_pt": 128, "p4_pt": 128, "b_f": [128, 131], "b_cm": [128, 131], "mb": [128, 136, 148], "set_po": [128, 131, 195, 199], "point_o": [128, 131], "body1": 128, "body2": 128, "body3": 128, "vprint": [129, 190, 195, 196, 200], "vpprint": [129, 190, 196, 200], "vlatex": [129, 190, 191, 196, 200], "_system": 130, "parti": [130, 252], "cart": 130, "mechanics_print": [130, 133, 134, 138, 139, 140, 142, 143, 144], "bob_fram": 130, "newtonian": [130, 131, 148], "from_newtonian": 130, "add_joint": 130, "slider": [130, 136], "q_slider": 130, "u_slid": 130, "u_pin": 130, "apply_grav": 130, "add_load": 130, "rail_masscent": 130, "rail_mass": 130, "rail_fram": 130, "cart_masscent": 130, "cart_mass": 130, "bob_masscent": 130, "bob_mass": 130, "validate_system": 130, "eom_method": 130, "add_holonomic_constraint": 130, "get_joint": 130, "u_dep": [130, 143], "bodybas": 130, "loadbas": 130, "actuat": 130, "actuatorbas": 130, "holonomic_constraint": 130, "nonholonomic_constraint": 130, "nonholonom": [130, 133], "add_actu": 130, "add_bodi": 130, "add_coordin": 130, "add_kd": 130, "add_nonholonomic_constraint": 130, "add_spe": 130, "get_bodi": 130, "m_d": [130, 144], "m_m": 130, "f_m": 130, "check_dupl": 130, "coord_stat": 130, "right_hand_sid": 130, "coordinate_deriv": [130, 149], "alg_con": [130, 149], "output_eqn": 130, "coord_idx": [130, 149], "speed_idx": [130, 149], "m_3": [130, 149, 160, 201], "exogen": [130, 149], "ref_fram": 130, "theta_dot": 130, "kin_explicit_rh": [130, 149], "dyn_implicit_mat": [130, 149], "dyn_implicit_rh": [130, 149], "symsystem": 130, "dae": [130, 149], "comb_implicit_mat": [130, 149], "comb_implicit_rh": [130, 149], "kinema": 130, "comb_explicit_rh": [130, 149], "compute_explicit_form": 130, "awhil": 130, "constant_symbol": 130, "dynamic_symbol": 130, "motiongenesi": [131, 148], "double_pendulum": 131, "motionvari": [131, 148], "simprot": [131, 148], "n_a": 131, "n_b": 131, "w_a_n": 131, "w_b_n": [131, 148], "p_o_p": 131, "p_p_r": 131, "v_o_n": [131, 148], "v2pt": [131, 148], "v_p_n": 131, "v_r_n": 131, "force_p": 131, "force_r": 131, "tfinal": 131, "integstp": 131, "some_filenam": 131, "parse_autolev": 131, "sympy_cod": 131, "include_numer": 131, "include_pydi": 131, "pydi": [131, 148, 191], "u1d": [131, 133, 135, 138, 139, 143], "u2d": [131, 133, 135, 138, 139, 143], "frame_n": 131, "frame_a": 131, "frame_b": 131, "particle_p": 131, "p_pt": 131, "particle_r": 131, "r_pt": 131, "v2pt_theori": [131, 133, 138, 139, 140, 145, 146, 148, 149, 195, 199], "initial_condit": [131, 148], "overwritten": 131, "e2row": 131, "eigvec": [131, 148], "eigenvec": 131, "deg2rad": 131, "0174533": 131, "wo": 131, "coef": [131, 148], "u3": [131, 133, 134, 136, 138, 139, 143, 148, 191, 195, 199], "strai": 131, "reassign": 131, "inher": [131, 255, 285], "rhs_x": 131, "i_b_bo": 131, "body_b": 131, "body_b_f": 131, "scene": [131, 228, 285], "i_c_d": 131, "i_p_q": 131, "i_b_o": 131, "e3": [131, 223, 232], "i_p_o": 131, "e4": [131, 223], "p_so_o": 131, "nicheck": 131, "plug": [131, 186], "hurdl": 131, "gitlab": 131, "ch4": 131, "ch5": 131, "ch6": 131, "cst": 131, "grammar": [131, 228], "roll": [132, 133, 141, 199, 236, 278], "disc": [132, 141, 199, 278], "bicycl": [132, 141, 147, 278], "nonminim": [132, 141, 145, 278], "linkag": [132, 141, 278], "meijaard2007": [133, 147], "steer": [133, 147], "purposefulli": 133, "yaw": 133, "ang": 133, "rear": 133, "pitch": 133, "q4": [133, 143, 193], "q5": [133, 193], "q4d": [133, 143], "q5d": 133, "u4": [133, 139, 143, 148], "u5": [133, 139], "u6": [133, 139], "u3d": [133, 138, 139], "u4d": 133, "u5d": 133, "u6d": 133, "explanatori": 133, "wfrad": 133, "wrrad": 133, "htangl": 133, "forkoffset": 133, "forklength": 133, "framelength": 133, "forkcg1": 133, "forkcg3": 133, "framecg1": 133, "framecg3": 133, "iwr11": 133, "iwr22": 133, "iwf11": 133, "iwf22": 133, "iframe11": 133, "iframe22": 133, "iframe33": 133, "iframe31": 133, "ifork11": 133, "ifork22": 133, "ifork33": 133, "ifork31": 133, "mframe": 133, "mfork": 133, "mwf": 133, "mwr": 133, "wr": 133, "tempfram": 133, "tempfork": 133, "orientnew": [133, 135, 138, 139, 140, 145, 149, 191, 193, 195, 197, 199, 200], "wr_cont": 133, "wr_mc": 133, "frame_mc": 133, "fork_mc": 133, "wf_mc": 133, "wf_cont": 133, "flip": [133, 166, 175, 236], "frame_i": 133, "fork_i": 133, "wr_i": 133, "wf_i": 133, "bodyfram": 133, "bodyfork": 133, "bodywr": 133, "bodywf": 133, "replic": 133, "conlist_spe": 133, "conlist_coord": 133, "gravit": [133, 138, 184, 197, 270], "aforement": [133, 197, 229, 268], "paperradrear": 133, "paperradfront": 133, "hta": 133, "trailpap": 133, "rake": 133, "paperwb": 133, "02": 133, "paperframecgx": 133, "paperframecgz": 133, "paperforkcgx": 133, "paperforkcgz": 133, "framecgnorm": 133, "framecgpar": 133, "tempa": 133, "tempb": 133, "tempc": 133, "paperforkl": 133, "forkcgnorm": 133, "forkcgpar": 133, "upright": 133, "val_dict": 133, "0603": 133, "1405": 133, "05892": 133, "00708": 133, "00756": 133, "kdd": [133, 138, 139], "centripet": 133, "corioli": 133, "forcing_lin": 133, "mm_full": 133, "_k_kqdot": 133, "xdot": 133, "lean": [133, 138, 140], "amat": 133, "q_3": [134, 136, 199], "u_1": [134, 135, 136, 199, 211, 232], "u_2": [134, 135, 136, 199, 211, 232], "u_3": [134, 136, 199], "densiti": [134, 236, 247, 271], "link1": 134, "link2": 134, "link3": 134, "link4": 134, "joint1": 134, "joint2": 134, "joint3": 134, "j3": [134, 136, 160, 178], "fh": 134, "fhd": 134, "_method": 134, "_form_eom": 134, "eom": [135, 136, 145], "dq_dict": 135, "presimplifi": 135, "inp_vec": [135, 145], "lag": [135, 140, 145], "lm": [135, 144, 145, 209, 212], "lag_eq": [135, 145], "lam_op": 135, "ibzz": 136, "compound_pend": 136, "simple_pend": 136, "rev1": 136, "rev2": 136, "w_r_n_qd": [138, 139], "dmc": [138, 139, 140], "uv": [138, 139, 181], "bodyd": [138, 139, 140], "bodylist": [138, 139], "kane1985": [139, 143, 147, 190], "thorough": [139, 145, 229], "simplifc": 139, "f3": [139, 202, 216], "necessit": 139, "simplify_auxiliary_eq": 139, "lrh": 140, "planet": 141, "robot": 141, "fascin": 141, "trajectori": 141, "challeng": 141, "came": [141, 288], "tackl": [141, 249], "amen": 141, "arduou": 141, "child_izz": 142, "child_mass": 142, "f_h": 143, "nh": 143, "ku": [143, 216], "dnh": 143, "f_r": [143, 145, 209], "speed_con": 143, "coord_con": 143, "lam1": 144, "0_": 145, "blajer1994": [145, 147], "brought": [145, 236], "vel_p": 145, "a_op": 145, "b_op": 145, "m_op": 145, "a_lin": 145, "hasn": 145, "juxtaposit": [146, 190, 265], "rb_masscent": 146, "rb_frame": 146, "l_p": 146, "likins1973": [146, 198], "l_b": 146, "requisit": 146, "t_p": 146, "t_b": 146, "t_t": 146, "virtu": [146, 148], "blajer": 147, "wojciech": 147, "werner": 147, "schiehlen": 147, "walter": 147, "schirm": 147, "kane1983": [147, 200], "likin": [147, 198], "david": [147, 212], "spacecraft": 147, "1983": [147, 251], "meijaard": 147, "jim": 147, "papadopoulo": 147, "ruina": 147, "schwab": 147, "royal": 147, "societi": [147, 229], "2084": 147, "1955": 147, "982": 147, "lectur": [148, 210, 236], "rigibodi": 148, "proprietari": 148, "k3": [148, 206], "k4": 148, "b11": 148, "b12": 148, "b21": 148, "b22": 148, "xd": 148, "xd2": 148, "y1d": 148, "y2d": 148, "tina": 148, "overwrit": [148, 190], "dt2": 148, "dy2": 148, "ty": 148, "nonlinsolv": [148, 234, 235, 294], "rowmatrix": 148, "colmatrix": 148, "diagmat": 148, "eigval": 148, "row_matrix": 148, "col_matrix": 148, "ao": 148, "i12": 148, "i23": 148, "i31": 148, "p_o_q": 148, "mag": 148, "unitvec": 148, "qo": 148, "p_p_q": 148, "partial_veloc": [148, 191, 195], "a_o_n": 148, "set_acc": [148, 195, 199], "qb": [148, 204], "qbd": 148, "alf_b_n": 148, "set_ang_acc": [148, 191], "ang_acc_in": [148, 191], "force_o": 148, "torque_a": 148, "qa": 148, "qad": 148, "a_b": 148, "v1pt": 148, "v1pt_theori": [148, 195, 199], "a1pt": 148, "a1pt_theori": [148, 195], "a2pt": 148, "a2pt_theori": [148, 195, 199], "angvel": 148, "force_vector": 148, "kindiff": 148, "ke": 148, "configura": 148, "tion_constraint": 148, "pendent": 148, "velocity_con": 148, "traint": 148, "acceleration_": 148, "u_auxilia": 148, "ry": 148, "matlplotlib": 148, "stiff": 148, "damp": 148, "introspect": 148, "rich": [148, 228], "media": [148, 154], "esqu": 148, "pertin": [149, 203, 211], "alg_con_ful": 149, "symsystem1": 149, "symsystem2": 149, "symsystem3": 149, "raytransfermatrix": 150, "geometricrai": 150, "beamparamet": 150, "geometric_conj": 150, "gauss_conj": 150, "conjugate_gauss_beam": 150, "lens": 150, "gaussopt": 150, "wavelen": 150, "z_r": 150, "wavelength": [150, 155], "waist": 150, "rayleigh": [150, 236], "refract": [150, 152, 154, 155], "530e": 150, "88679245283019": 150, "92753330865999": 150, "w_0": [150, 229], "00100000000000000": 150, "freespac": 150, "00101413072159615": 150, "00210803120913829": 150, "r686": 150, "complex_beam_paramet": 150, "r687": 150, "gaussian_beam": 150, "spread": [150, 216, 236, 251], "00053": 150, "goui": 150, "55998576005696": 150, "2809": 150, "peak": 150, "waist_approximation_limit": 150, "paraxi": [150, 154], "06e": 150, "curvedmirror": 150, "curvedrefract": 150, "flatmirror": 150, "flatrefract": 150, "2x1": 150, "thinlen": 150, "r688": 150, "ray_transfer_matrix_analysi": 150, "waist_in": 150, "waist_out": 150, "s_in": 150, "s_out": 150, "w_o": 150, "gaussian_conj": 150, "z_r_in": 150, "incid": [150, 154], "z_r_out": 150, "emerg": [150, 204], "geometric_conj_ab": 150, "geometric_conj_af": 150, "geometric_conj_bf": 150, "rayleigh2waist": 150, "waist2rayleigh": 150, "permitt": 152, "permeabl": 152, "fermat": 152, "electr": [152, 154, 197, 268, 270], "electromagnet": [152, 185, 197, 242, 270], "intrinsic_imped": 152, "149896229": [152, 155, 185], "kilogram": [152, 184, 186, 188], "1250000": 152, "amper": [152, 185], "refractive_index": 152, "299792458": [152, 155, 185, 188], "r689": 152, "optical_medium": 152, "travel": [152, 155, 197, 268, 270], "stoke": 153, "mueller": 153, "jones_vector": 153, "stokes_vector": 153, "half_wave_retard": 153, "polarizing_beam_splitt": 153, "jones_2_stok": 153, "\u2148": [153, 201, 215, 216, 235, 294], "\u03c7": 153, "\u03c8": 153, "i\u2080": 153, "plate": 153, "hwp": 153, "splitter": 153, "transmit": [153, 154], "pb": 153, "transmitted_port": 153, "reflected_port": 153, "transmitted_pow": 153, "reflected_pow": 153, "r690": 153, "jones_calculu": 153, "r691": 153, "mueller_calculu": 153, "r692": 153, "stokes_paramet": 153, "retard": 153, "poincar\u00e9": 153, "tilt": 153, "mayor": 153, "linear_polar": 153, "transmiss": [153, 154], "mueller_matrix": 153, "quarter_wave_retard": 153, "phase_retard": 153, "\u03b4": 153, "phia": 153, "phib": 153, "4x1": [153, 236], "phi_a": 153, "phi_b": 153, "qwp": 153, "reflective_filt": 153, "unpolar": 153, "transmissive_filt": 153, "attenu": 153, "transmitt": 153, "ndf": 153, "refraction_angl": 154, "fresnel_coeffici": 154, "brewster_angl": 154, "critical_angl": 154, "lens_makers_formula": 154, "mirror_formula": 154, "lens_formula": 154, "hyperfocal_dist": 154, "transverse_magnif": 154, "medium1": 154, "medium2": 154, "brewster": 154, "926093295503462": 154, "onset": 154, "850908514477849": 154, "02005": 154, "angle_of_incid": 154, "fresnel": [154, 216, 226], "polaris": 154, "te": 154, "317843553417859": 154, "348645229818821": 154, "658921776708929": 154, "651354770181179": 154, "235625382192159": 154, "971843958291041": 154, "816477005968898": 154, "577377951366403": 154, "r693": 154, "fresnel_equ": 154, "coc": 154, "0033": 154, "focal_length": 154, "n_len": 154, "n_surr": 154, "thick": 154, "1515151515151": 154, "0000000000000": 154, "3418463277618": 154, "41152": 154, "magnif": 154, "twave": 155, "time_period": 155, "wavenumb": 155, "phi1": 155, "phi2": 155, "w1": [155, 228], "w3": [155, 216], "superposit": [155, 166, 177, 203], "angular_veloc": 155, "tempor": 155, "r694": 156, "paulialgebra": 156, "evaluate_pauli_product": 156, "paulimatric": 156, "sigma3": 156, "nodal": [157, 182, 203], "hw": [157, 182], "coherent_st": 157, "coher": [157, 183, 189], "1d": [157, 159, 172, 191, 241], "wavefunct": [157, 170, 179, 182, 278], "r695": 158, "__cmp__": [158, 162, 181], "dagger": [158, 162, 168, 170, 173, 175, 180, 181, 278], "operatorset": [159, 171], "positionbra3d": 159, "eigenbra": [159, 172, 178], "positionket3d": 159, "eigenket": [159, 172, 178], "positionstate3d": 159, "eigenst": [159, 171, 176, 178, 179], "position_x": 159, "position_i": 159, "position_z": 159, "pxbra": [159, 171], "pxket": [159, 171, 176], "pxop": [159, 171, 176], "xbra": [159, 171, 176], "xket": [159, 171, 176], "xop": [159, 171, 176], "yop": 159, "zop": 159, "cg": [160, 178, 185, 238], "momenta": 160, "uncoupl": [160, 178], "r696": 160, "j_3": [160, 178, 201], "r697": 160, "wigner3j": [160, 201], "wigner": [160, 178, 236, 278], "varshalovich": [160, 178], "zyla": 160, "theor": 160, "phy": [160, 186, 201], "083c01": 160, "r698": 160, "w3j": 160, "715": [160, 201, 216], "wigner6j": [160, 201], "j12": [160, 178], "j23": 160, "6j": [160, 201], "wigner9j": [160, 201], "j4": 160, "j34": 160, "j13": 160, "j24": 160, "9j": [160, 201], "cg_simp": 160, "r699": 160, "clebsh": 160, "rethink": 161, "figsiz": 161, "circuitplot": 161, "nqubit": [161, 165, 166, 175], "control_lin": 161, "gate_idx": [161, 165], "min_wir": 161, "max_wir": 161, "control_point": 161, "wire_idx": 161, "not_point": 161, "one_qubit_box": 161, "box": [161, 166, 168, 177, 179, 271, 278], "qubit": [161, 165, 166, 167, 168, 174, 278], "swap_point": 161, "two_qubit_box": 161, "createcg": 161, "latexnam": 161, "mock": 161, "mz": 161, "circuit_plot": 161, "min_qubit": [161, 165], "autogener": 161, "wire": 161, "j_0": 161, "r700": 162, "comm": [162, 181, 242], "plank": 163, "r701": 163, "05457162000000e": 163, "planck_const": 163, "hermetian": 164, "r702": 164, "r703": 164, "ket": [164, 169, 170, 171, 173, 175, 176, 179, 181], "bra": [164, 169, 170, 171, 173, 175, 176, 179, 181], "innerproduct": [164, 169, 170, 176, 178, 181], "outerproduct": [164, 170], "seamlessli": 164, "hermitian_adjoint": 164, "hermitian_transpos": 164, "_apply_operators_qubit": 165, "gate_sort": 165, "gate_simp": 165, "ugat": 165, "cgate": 165, "control_valu": 165, "cnot": 165, "eval_control": 165, "plot_gat": 165, "circ_plot": 165, "simplify_cg": 165, "cphase": 165, "cnotgat": 165, "qappli": [165, 166, 168, 170, 175, 278], "get_target_matrix": 165, "hadamardg": 165, "identityg": 165, "onequbitg": 165, "phaseg": 165, "swapgat": 165, "target1": 165, "target2": 165, "tgate": 165, "twoqubitg": 165, "xgate": 165, "ygate": 165, "zgate": 165, "bubbl": 165, "random_circuit": 165, "ngate": 165, "gate_spac": 165, "mermin": 166, "_represent_zg": 166, "oracleg": 166, "oracl": 166, "intqubit": [166, 175], "search_funct": 166, "wgate": 166, "apply_grov": 166, "grover_iter": 166, "qstate": 166, "wv": 166, "superposition_basi": 166, "numqubit": 166, "basis_st": 166, "matt": 167, "complexspac": 167, "directsumhilbertspac": 167, "r704": 167, "hilbertspac": 167, "fockspac": 167, "hilbert_spac": [167, 170, 179], "direct_sum": 167, "quantiz": [167, 278], "r705": 167, "mess": [167, 232, 235, 293], "fock_spac": 167, "r706": 167, "tensorpowerhilbertspac": 167, "r707": 167, "tensor_product": 167, "tensorproducthilbertspac": 167, "r708": 167, "clebsch": [168, 178, 201, 278], "gordan": [168, 178, 201, 278], "hilbert": [168, 170, 176, 278], "grover": [168, 278], "qft": [168, 177, 278], "shor": [168, 278], "brabas": [169, 170, 176, 179], "ketbas": [169, 170, 176, 179], "r709": 169, "inner_product": 169, "apply_oper": [170, 181], "identityoper": 170, "r710": 170, "r711": 170, "polymoni": 170, "operator_": 170, "28physic": 170, "old_assumpt": 170, "r712": 170, "outer_product": 170, "unitaryoper": 170, "operators_to_st": 171, "state_to_oper": 171, "_operators_to_st": 171, "state_map": 171, "_state_to_oper": 171, "statebas": [171, 176, 179], "piab": 172, "piabbra": 172, "piabhamiltonian": 172, "piabket": 172, "ip_doit": 173, "smarter": [174, 225], "rk": 174, "iqft": 174, "rkgate": 174, "qtf": 174, "povm": 175, "as_int": [175, 257], "qubit_valu": 175, "intqubitbra": 175, "00001": 175, "qubitbra": 175, "matrix_to_dens": 175, "matrix_to_qubit": 175, "measure_al": 175, "ensembl": 175, "measure_all_oneshot": 175, "oneshot": 175, "measure_parti": 175, "measure_partial_oneshot": 175, "qubit_to_matrix": 175, "enumerate_st": 176, "_enumerate_st": 176, "foo_1": 176, "foo_2": 176, "foo_3": 176, "test2": 176, "bar_4": 176, "bar_5": 176, "bar_10": 176, "get_basi": 176, "replace_non": 176, "operator_to_st": 176, "qexpr": 176, "integrate_result": 176, "orig_expr": 176, "x_ket": 176, "x_op": 176, "rep_expect": 176, "px_2": 176, "px_1": 176, "rep_innerproduct": 176, "_repres": 176, "_represent_foobasi": 176, "foobasi": 176, "_represent_szop": 176, "szupket": 176, "szop": 176, "sz": 176, "cmod": 177, "reformat": 177, "period_find": 177, "momemtum": 178, "j2op": 178, "jxbra": 178, "jx": 178, "jzket": 178, "jxbracoupl": 178, "jcoupl": 178, "jzketcoupl": 178, "jxket": 178, "jxketcoupl": 178, "jybra": 178, "jy": 178, "jybracoupl": 178, "jyket": 178, "jyketcoupl": 178, "jzbra": 178, "jz": 178, "jzbracoupl": 178, "j_4": [178, 201], "argular": 178, "jzop": 178, "passiv": 178, "r713": 178, "wignerd": 178, "jm": 178, "jj": 178, "r714": 178, "jcoupling_list": 178, "coupledspinst": 178, "spinstat": 178, "r715": 179, "dual_class": 179, "mn": [179, 216, 236], "ket_not": 179, "r716": 179, "k0": [179, 207, 209, 236], "orthogonalbra": 179, "orthogonalket": 179, "orthogonalst": 179, "_eval_adjoint": 179, "timedepbra": 179, "timedepst": 179, "timedepket": 179, "prob": [179, 236], "412214747707527": 179, "matrix_tensor_product": 180, "axb": 180, "xdagger": 180, "axc": 180, "bxc": 180, "tensor_product_simp": 180, "cxd": 180, "boson": 181, "fetter": 181, "welecka": 181, "secondqu": 181, "annihilateboson": 181, "fockstateket": 181, "bket": 181, "fockstatebosonket": 181, "annihilatefermion": 181, "createboson": 181, "is_only_q_annihil": 181, "destroi": [181, 225], "quasi": 181, "hole": 181, "is_only_q_cr": 181, "is_q_annihil": 181, "is_q_creat": 181, "antisymmetrictensor": 181, "bbra": 181, "fockstatebosonbra": 181, "bosonicbasi": 181, "fock": 181, "createfermion": 181, "wick": 181, "fbra": 181, "fockstatefermionbra": 181, "fket": 181, "fockstatefermionket": 181, "fixedbosonicbasi": 181, "n_particl": 181, "n_level": 181, "fockstat": 181, "occup": 181, "bosonbra": 181, "fockstatebra": 181, "fermi_level": 181, "r717": 181, "textwrap": [181, 257], "_q": 181, "get_subno": 181, "fermionicoper": 181, "has_q_annihil": 181, "q_annihil": 181, "has_q_creat": 181, "leftmost": 181, "q_creator": 181, "iter_q_annihil": 181, "iter_q_cr": 181, "0x": 181, "permutationoper": 181, "get_permut": 181, "varbosonicbasi": 181, "n_max": 181, "creator": 181, "evaluate_delta": 181, "einstein": [181, 242], "d_ij": 181, "_j": [181, 186, 201, 218], "d_ip": 181, "d_qp": 181, "matrix_rep": 181, "simplify_index_permut": 181, "permutation_oper": 181, "schemat": [181, 186], "abij": 181, "abji": 181, "baij": 181, "baji": 181, "permutlist": 181, "substitute_dummi": 181, "new_indic": 181, "pretty_indic": 181, "_get_ordered_dummi": 181, "_c": 181, "_d": 181, "index_group": 181, "string_of_lett": 181, "my_dummi": 181, "_v": [181, 200], "_p_0": 181, "_p_1": 181, "keep_only_fully_contract": 181, "sho": 182, "isotrop": 182, "mk": [183, 186], "legal": 183, "temperatur": [183, 197, 270], "dimensions": 183, "dimsys_si": [183, 184], "get_dimensional_depend": [183, 184], "has_integer_pow": 183, "dim_si": 183, "dimensionsystem": 183, "base_dim": 183, "derived_dim": 183, "dimensional_depend": 183, "can_transf_matrix": 183, "inv_can_transf_matrix": 183, "dim_can_vector": 183, "dim_vector": 183, "is_consist": [183, 189], "is_dimensionless": 183, "list_can_dim": 183, "print_dim_bas": 183, "gravitational_const": [184, 188], "equivalent_dim": 184, "grav_eq": 184, "kepler": [184, 261], "venu": 184, "701": 184, "dai": [184, 188, 232], "venus_a": 184, "set_quantity_dimens": 184, "set_quantity_scale_factor": 184, "108208000e3": 184, "solar": 184, "solar_mass": 184, "9891e30": 184, "convert_to": [184, 185, 188, 205, 211], "5112118495813": 184, "659097795948": 184, "astrophys": 184, "pound": 185, "boltzmann": 185, "physicalconst": 185, "unitsystem": [185, 189], "kilomet": [185, 187, 188], "unitless": 185, "dimensionless": [185, 186], "discrep": 185, "speed_of_light": [185, 188], "cgs_gauss": 185, "quantity_simplifi": 185, "philosophi": [185, 232, 235, 278], "rough": 186, "mole": 186, "unavoid": 186, "d_3": 186, "d_2": [186, 212, 236], "underbrac": [186, 199], "countabl": [186, 235], "pmatrix": 186, "kg": [186, 271], "glu": 186, "men": 186, "heat": 186, "joul": 186, "calori": 186, "chemistri": 186, "page52": 186, "1952": 186, "page78": 186, "deboer79": 186, "boer": 186, "818": 186, "levyleblond77": 186, "l\u00e9vy": 186, "leblond": 186, "conceptu": [186, 203, 270], "rivista": 186, "del": [186, 251, 261, 269, 293], "nuovo": [186, 201], "cimento": [186, 201], "1977": 186, "187": [186, 210], "214": 186, "anticip": 186, "bin_prefix": 187, "latex_repr": [187, 188], "encapsul": [187, 209, 235, 249], "kilo": 187, "pretty_unicode_repr": 188, "pretty_ascii_repr": 188, "mathml_presentation_repr": 188, "is_prefix": 188, "abbrevi": [188, 204, 216, 235, 237], "unit_system": 188, "scale_factor": 188, "set_global_relative_scale_factor": 188, "reference_quant": 188, "target_unit": 188, "mile": 188, "atomic_mass_const": 188, "centimet": 188, "25146": 188, "609344": 188, "86400": 188, "660539060e": 188, "300000": 188, "planck": [188, 236], "62963087839509e": 188, "base_unit": 189, "descr": 189, "dimension_system": 189, "derived_unit": 189, "overridden": [189, 203, 218, 293], "get_units_non_prefix": 189, "wikidyad": [190, 198], "wikidyadicproduct": [190, 198], "otim": [190, 237, 238], "rigidli": 190, "entireti": 190, "_str": 190, "coordinatesym": [191, 193], "otherfram": [191, 261], "n_alpha_b": 191, "ny": [191, 207], "_3": [191, 201], "orient_body_fix": 191, "orient_space_fix": 191, "orient_quaternion": 191, "quaternion": [191, 195, 200, 261, 263], "rotation_ord": [191, 261, 263], "xzx": 191, "xyx": [191, 261, 263], "yzy": 191, "yxy": [191, 200], "yzx": [191, 200], "zxy": 191, "xzy": 191, "zyx": 191, "yxz": 191, "orient_explicit": 191, "lambda_x": [191, 261, 263], "lambda_i": [191, 261, 263], "lambda_z": [191, 261, 263], "q0": [191, 232, 261, 263], "newnam": 191, "gen_spe": [191, 195], "variable_map": 191, "a_x": [191, 200, 216], "b_x": [191, 193, 200, 242], "b_y": [191, 193, 200, 242], "a_z": [191, 200], "b_z": [191, 200, 242], "xz": [191, 200, 202], "zy": [191, 200], "inlist": 191, "var_in_dcm": 191, "reexpress": [191, 266], "time_deriv": [191, 193, 197], "free_dynamicsymbol": 191, "codirect": 191, "dyadic_tensor": [191, 261], "frame1": 191, "frame2": [191, 193], "second_reference_fram": 191, "ixz": 191, "inertia_dyad": 191, "pertain": [192, 198], "fieldfunct": [192, 197], "curl": [192, 261, 264, 271], "vect": [192, 261, 264], "r_x": [192, 197], "r_y": [192, 197], "r_z": [192, 197], "gradient": [192, 201, 202, 261, 264, 270], "scalar_potenti": [192, 197, 264, 268], "scalar_field": [192, 197, 261, 264, 268], "grad_field": [192, 264], "scalar_potential_differ": [192, 197, 264, 268], "sympyfi": [192, 193, 195, 264], "position2": [192, 264], "vectfield": [192, 197, 264, 268], "is_conserv": [192, 197, 264, 268], "is_solenoid": [192, 197, 264, 268], "solenoid": [192, 264], "q6": 193, "vec1": 193, "vec2": 193, "n_x": 193, "rotating_reference_fram": 193, "time_derivatives_in_the_two_fram": 193, "otherpoint": 195, "outfram": 195, "fixedfram": 195, "get_motion_param": 195, "vectori": [195, 197, 265, 270], "timevalue1": 195, "timevalue2": 195, "313": 195, "vel_vec": 195, "q1dd": 196, "q2dd": 196, "charg": [197, 270], "displac": [197, 199, 270], "temper": 197, "earth": [197, 270], "4xy": [197, 270], "electric_potenti": [197, 268], "r1_x": 197, "r1_y": 197, "infinitesim": [197, 232, 268], "nabla": [197, 261, 267, 268], "f_y": [197, 268], "f_x": [197, 235, 268], "sink": [197, 268], "irrot": [197, 268], "conservative_field": [197, 268], "aug": [198, 235], "dyadic_product": [198, 269], "inc": [198, 210], "w_x": 199, "w_y": 199, "w_z": 199, "w_1": [199, 211], "w_2": [199, 211], "w_3": 199, "textrm": [199, 200, 224], "u_x": 199, "sp": 199, "oq": 199, "qp": 199, "rod": 199, "went": 199, "parallelogram": 200, "c_x": 200, "c_y": 200, "c_z": 200, "train": 200, "friend": 200, "undergon": [200, 235], "vastli": 200, "mold": 200, "bp": [200, 232], "bpp": 200, "zzx": 200, "multifram": 200, "direction": 200, "racah": 201, "gaunt": 201, "rasch03": 201, "regge58": 201, "regg": 201, "544": 201, "regge59": 201, "116": [201, 210], "1959": 201, "edmonds74": 201, "edmond": 201, "princeton": [201, 236], "1957": 201, "rasch": 201, "siam": [201, 254], "sci": 201, "1416": 201, "1428": 201, "liberatodebrito82": 201, "liberato": 201, "brito": 201, "homeier96": 201, "homeier": 201, "steinborn": 201, "mol": 201, "368": 201, "1996": [201, 210, 226, 234, 261], "forum": [201, 235], "m4nzdu": 201, "7o38": 201, "jen": 201, "03": [201, 236], "gerardo": 201, "lazo": 201, "arjona": 201, "phil": 201, "adam": [201, 212], "lemaitr": 201, "2022": 201, "jyr2000": 201, "clebsch_gordan": 201, "2j_3": 201, "dot_rot_grad_ynm": 201, "_l": 201, "l_2": 201, "l_3": 201, "drastic": 201, "2l_1": 201, "2l_2": 201, "2l_3": 201, "1200": 201, "00689500421922113448": 201, "inflect": 201, "unsuit": 201, "dd": [201, 221], "ee": [201, 211], "j_5": 201, "j_6": 201, "richer": 201, "real_gaunt": 201, "realgaunt": 201, "m0": [201, 242], "00002480019791932209313156167": 201, "wigner_3j": 201, "wigner_6j": 201, "wigner_9j": 201, "j_7": 201, "j_8": 201, "j_9": 201, "05555555": 201, "1666666": 201, "wigner_d": 201, "j_z": 201, "j_y": 201, "\u03b3": [201, 283, 293], "wigner_d_smal": 201, "textbackend": 202, "plot_parametr": 202, "plot_implicit": 202, "plot3d_parametric_lin": 202, "plot3d_parametric_surfac": 202, "zlabel": 202, "aspect_ratio": 202, "ylim": 202, "axis_cent": 202, "xscale": 202, "yscale": 202, "autoscal": 202, "textplot": 202, "_seri": [202, 213], "baseseri": 202, "nonparametr": 202, "basebackend": 202, "parametric2dlineseri": 202, "parametric3dlineseri": 202, "cyan": 202, "grayscal": 202, "integers_onli": 202, "surfaceover2drangeseri": 202, "parametricsurfaceseri": 202, "surface_color": 202, "range1": 202, "range2": 202, "fill_between": 202, "nb_of_point": 202, "inch": 202, "expr_x": 202, "expr_i": 202, "canva": 202, "range_x": 202, "range_i": 202, "nb_of_points_x": 202, "nb_of_points_i": 202, "expr_z": 202, "range_u": 202, "range_v": 202, "nb_of_points_u": 202, "nb_of_points_v": 202, "x_var": 202, "y_var": 202, "mesh": 202, "p8": 202, "p9": 202, "nrow": [202, 205], "ncolumn": 202, "stuff": [202, 247, 249, 257], "is_2dlin": 202, "oblig": 202, "only_integ": 202, "get_seg": 202, "get_color_arrai": 202, "var_start_end": 202, "r718": 202, "luiz": 202, "henriqu": 202, "figueiredo": 202, "r719": 202, "line3dbaseseri": 202, "surfacebaseseri": 202, "var_start_end_x": 202, "var_start_end_i": 202, "var_start_end_u": 202, "var_start_end_v": 202, "implicitseri": 202, "has_equ": 202, "use_interval_math": 202, "centric": 202, "get_mesh": 202, "process_seri": 202, "_process_seri": 202, "keyboard": 202, "mous": 202, "pyglet_plot": 202, "screenshot": 202, "camera": 202, "zoom": 202, "numpad": 202, "ordin": [202, 232, 257], "f5": 202, "f6": 202, "f8": 202, "drag": 202, "curvilinear": [202, 265, 266], "__setitem__": 202, "zfade4": 202, "key1": 202, "value1": 202, "key2": 202, "value2": 202, "unbound_theta": 202, "wirefram": 202, "saddl": 202, "fz": 202, "_______________________________________________________": 202, "mediterranean": 203, "cultur": 203, "arab": 203, "lighten": 203, "tapestri": 203, "woven": 203, "european": 203, "soil": 203, "plausibl": 203, "teeter": 203, "totter": 203, "outweigh": 203, "excit": 203, "amus": 203, "kempf": 203, "1944": 203, "20th": 203, "dedekind": 203, "intim": 203, "disciplin": 203, "toolset": 203, "atiyah69": [203, 210], "gear": 203, "greuel2008": [203, 210], "interspers": 203, "lr": 203, "ilex": 203, "\u211a": [203, 216], "localis": 203, "abridg": 203, "free_modul": [203, 207], "quotient_r": [203, 207], "overload": [203, 206, 207, 265, 288], "polynomialr": [203, 207, 214], "domain_or_r": [203, 207], "quotientr": [203, 207], "base_id": [203, 207], "elbow": 203, "componentwis": [203, 216], "inclin": 203, "biproduct": 203, "quotient_modul": 203, "is_submodul": 203, "multiply_id": 203, "identity_hom": 203, "freemodul": 203, "freemoduleel": 203, "conicis": 203, "_contain": 203, "_syzygi": 203, "_in_terms_of_gener": 203, "_intersect": 203, "_module_quoti": 203, "reduce_el": [203, 211], "represantit": 203, "in_terms_of_gener": 203, "inclusion_hom": 203, "rela": 203, "relb": 203, "is_full_modul": 203, "module_quoti": 203, "opt": [203, 209, 228, 247, 289], "coincis": 203, "syzygy_modul": 203, "r_n": 203, "_contains_elem": 203, "_contains_id": 203, "_quotient": 203, "_union": 203, "_product": 203, "is_whole_r": 203, "is_maxim": 203, "is_primari": 203, "is_rad": 203, "is_princip": 203, "xj": 203, "satur": 203, "subquoti": 203, "quotientmodul": 203, "subquotientmodul": 203, "killed_modul": 203, "quotientmoduleel": 203, "kill": [203, 207, 247], "quotient_hom": 203, "ker": 203, "surject": 203, "cokernel": 203, "coker": 203, "meaningfulli": 203, "restrict_domain": 203, "homomoprh": 203, "modulehomomorph": [203, 211], "_ker": 203, "_img": 203, "_kernel": 203, "_imag": 203, "_restrict_domain": 203, "_restrict_codomain": 203, "_quotient_domain": 203, "_quotient_codomain": 203, "_appli": 203, "_mul_scalar": 203, "_compos": 203, "_add": [203, 222], "is_inject": 203, "quotient_domain": 203, "is_isomorph": 203, "preimag": 203, "restrict_codomain": 203, "is_surject": 203, "quotient_codomain": 203, "induct": 203, "monogen": 203, "monogenicfiniteextens": [203, 207], "finiteextens": 203, "sqrt2": [203, 206], "extensionel": [203, 207], "notinvert": [203, 209, 212], "nu_1": 204, "nu_2": 204, "nu_n": 204, "nu_i": 204, "customarili": 204, "ua": 204, "endow": [204, 212], "resp": [204, 207, 232], "divmod": [204, 206, 207], "cb": [204, 254], "sqf_list": [204, 207, 212], "sqf": [204, 207, 212, 229], "buchberg": [204, 209, 210, 212], "solve_poly_system": [204, 212, 234, 235], "ddm": 205, "fmt": [205, 207, 211], "matrix1": 205, "sdm": [205, 209], "dmnonsquarematrixerror": 205, "zz_i": [205, 206], "from_dict_sympi": 205, "ncol": 205, "elemsdict": 205, "from_list_sympi": 205, "from_list": [205, 207, 212, 213], "construct_domain": [205, 206, 207, 212], "from_rep": 205, "drep": 205, "ownership": 205, "lll": 205, "lov\u00e1sz": 205, "r720": 205, "r721": 205, "dmvalueerror": 205, "dmrankerror": [205, 211], "20160": 205, "33768": 205, "39578": 205, "47757": 205, "r722": 205, "lll_transform": 205, "lov\u00e1sz_lattice_basis_reduction_algorithm": 205, "20221029115428": 205, "elt": [205, 211], "lovasz": 205, "bremner": 205, "scc": 205, "to_dens": 205, "to_field": [205, 207, 212], "to_spars": 205, "aq": 205, "ccc": [205, 235], "from_ddm": 205, "domainerror": [205, 209, 212], "to_ddm": 205, "r723": 205, "pythonmpq": [206, 207], "srepr": [206, 288], "strength": 206, "richardon": 206, "dup_factor_list": 206, "factortool": [206, 209], "dup_": [206, 209], "dmp_": [206, 209], "z1": [206, 207, 234], "is_field": [206, 207], "quo": [206, 207, 209, 212], "rem": [206, 207, 209, 212], "exquo": [206, 207, 212], "exactquotientfail": [206, 207, 209, 212], "mpz": [206, 207], "of_typ": [206, 207], "z1_sympi": 206, "to_sympi": [206, 207], "from_sympi": [206, 207], "forth": [206, 211], "z_sympi": 206, "z_zz": 206, "coercionfail": [206, 209], "sum_domain": 206, "expressions_sympi": 206, "expressions_dom": 206, "result_dom": 206, "e_dom": 206, "result_sympi": 206, "qq_i": 206, "gaussianinteg": [206, 207], "gaussianrationalfield": [206, 207], "gaussianr": [206, 207], "finitefield": [206, 207], "pythonfinitefield": [206, 207], "gmpyfinitefield": [206, 207], "welcom": [206, 232, 286], "realel": [206, 207], "complexel": [206, 207], "mpc": 206, "xr": [206, 214], "zc": 206, "_mpc_": 206, "realfield": [206, 207], "rr100": 206, "33333333333333333333333333333": 206, "hack": [206, 232, 245], "algebraic_field": [206, 207, 209, 211], "algebraicfield": [206, 207, 209, 211], "sqrt3": 206, "x_dom": 206, "p_expr": [206, 207], "polyel": [206, 207, 209, 213, 214, 216], "p_dom": 206, "xk": [206, 207, 218], "yk": [206, 207], "poly_r": [206, 207], "old_polynomialr": 206, "globalpolynomialr": 206, "polyclass": [206, 207, 212], "yr": [206, 214], "broader": 206, "get_field": [206, 207], "frac_field": [206, 207], "rationalfield": [206, 207], "old_frac_field": [206, 207], "fractionfield": [206, 207], "old_fractionfield": 206, "xf": 206, "yf": 206, "fracfield": [206, 207], "expressiondomain": [206, 207], "elements_sympi": 206, "elements_k": 206, "convert_from": [206, 207], "num_zz": 206, "num_qq": 206, "domainel": [206, 207, 214], "encompass": 206, "all_coeff": [206, 207, 212], "dom": [206, 207, 209, 224], "strang": 206, "hybrid": 206, "unreli": 206, "usefulli": 207, "pythonr": [207, 214], "p_domain": 207, "ez": [207, 242], "get_r": 207, "has_assoc_field": 207, "has_assoc_r": 207, "alg_field_from_poli": [207, 211], "root_index": 207, "almosteq": 207, "cyclotomic_field": [207, 211], "zeta7": 207, "zeta_": 207, "exsqrt": 207, "lexord": [207, 212], "from_algebraicfield": 207, "from_complexfield": 207, "from_expressiondomain": 207, "from_expressionrawdomain": 207, "from_ff": 207, "modularinteg": 207, "from_ff_gmpi": 207, "from_ff_python": 207, "from_fractionfield": 207, "from_globalpolynomialr": 207, "from_monogenicfiniteextens": 207, "from_polynomialr": 207, "from_qq_gmpi": 207, "from_qq_python": 207, "from_realfield": 207, "from_zz_gmpi": 207, "from_zz_python": 207, "gcdex": [207, 212], "get_exact": 207, "half_gcdex": [207, 212], "is_pid": 207, "is_r": 207, "is_nonposit": 207, "is_on": [207, 212], "rersiv": 207, "__neg__": 207, "__pos__": 207, "__sub__": 207, "q_domain": 207, "q_expr": 207, "x_domain": 207, "alg": [207, 211, 215], "trait": 207, "is_unit": 207, "__divmod__": 207, "__floordiv__": 207, "__mod__": [207, 211], "simpledomain": 207, "compositedomain": 207, "from_qq": 207, "from_zz": 207, "gmpyinteg": 207, "pythoninteg": 207, "gmpyrationalfield": 207, "pythonrationalfield": 207, "from_gaussianrationalfield": 207, "gaussianel": 207, "gaussiandomain": 207, "qq_python": 207, "zz_python": 207, "z2": 207, "z3": 207, "z4": 207, "from_gaussianinteg": 207, "as_algebraicfield": 207, "orig_ext": 207, "integral_basi": [207, 211], "maximal_ord": [207, 211], "zeta5": 207, "primes_abov": [207, 211], "primeid": [207, 211], "galois_group": [207, 211, 212], "by_nam": [207, 211, 212], "c6": 207, "max_tri": [207, 211, 212], "numberfield": [207, 211, 212], "galoisgroup": [207, 211, 212], "to_alg_num": [207, 211], "legibl": 207, "inaccur": 207, "to_rat": 207, "mpelement": 207, "complexfield": 207, "lc": [207, 209, 212], "domain_or_field": 207, "dmf": 207, "coercibl": 207, "monomialord": [207, 212], "xring": 207, "vring": 207, "sring": [207, 213, 214], "polyr": [207, 209, 214], "factor_list": [207, 212, 293], "add_gen": 207, "drop_to_ground": 207, "monomial_basi": 207, "206": [207, 212], "744": 207, "945": [207, 213], "symmetric_poli": [207, 212], "is_monomi": [207, 212], "const": [207, 216], "inplac": 207, "shallow": [207, 223], "zero_monom": 207, "fv": 207, "clo": 207, "p64": 207, "qv": 207, "f0": 207, "imul_num": 207, "itercoeff": 207, "itermonom": 207, "iterterm": 207, "leading_expv": 207, "leading_monom": 207, "leading_term": 207, "listcoeff": 207, "listmonom": 207, "listterm": 207, "monom": [207, 212], "strip_zero": 207, "r724": 207, "lauer": 207, "1976": 207, "242": 207, "247": [207, 210, 234], "800205": 207, "806342": 207, "tail_degre": 207, "xfield": 207, "vfield": [207, 267], "sfield": [207, 267], "fracel": [207, 216], "lev": 207, "add_ground": [207, 212], "all_monom": [207, 212], "all_term": [207, 212], "cauchy_lower_bound": 207, "cauchy_upper_bound": 207, "clear_denom": [207, 212], "count_complex_root": 207, "sup": [207, 212, 216, 224], "count_real_root": 207, "deflat": [207, 212], "y_i": [207, 209, 211, 212, 232], "x_j": [207, 209, 212], "degree_list": [207, 212], "eject": [207, 212], "exquo_ground": [207, 212], "factor_list_includ": [207, 212], "from_dict": [207, 212], "from_sympy_list": 207, "gff_list": [207, 212], "homogeneous_ord": [207, 212, 229, 232], "is_cyclotom": [207, 212], "is_ground": [207, 212], "is_homogen": [207, 212], "is_irreduc": [207, 212], "is_linear": [207, 212], "is_mon": [207, 212], "is_quadrat": [207, 212], "is_sqf": [207, 212], "l1_norm": [207, 212], "l2_norm_squar": 207, "max_norm": [207, 212], "mignotte_sep_bound_squar": 207, "mignott": [207, 209], "mul_ground": [207, 212], "pdiv": [207, 212], "pexquo": [207, 212], "pquo": [207, 212], "prem": [207, 212], "quo_ground": [207, 212], "refine_root": [207, 211, 212], "includepr": [207, 209, 212], "sqf_list_includ": [207, 212], "sqf_norm": [207, 212], "sqf_part": [207, 212], "sqr": [207, 212], "sturm": [207, 212], "sub_ground": [207, 212], "to_dict": 207, "to_exact": [207, 212], "to_r": [207, 212], "to_sympy_dict": 207, "to_sympy_list": 207, "to_tupl": 207, "total_degre": [207, 212, 229], "trunc": [207, 212, 215], "frac_unifi": 207, "half_per": 207, "poly_unifi": 207, "gr\u00f6bner": 208, "wester": [208, 279], "agca": [208, 279], "l0": 209, "legitim": 209, "uninterest": 209, "bulk": [209, 226], "x_u": 209, "dup__": 209, "densebas": 209, "dmp_lc": 209, "poly_lc": 209, "dmp_tc": 209, "poly_tc": 209, "dmp_ground_lc": 209, "dmp_ground_tc": 209, "dmp_true_lt": 209, "n_1": [209, 234, 236], "n_k": 209, "dmp_degre": 209, "dmp_degree_in": 209, "dmp_degree_list": 209, "dmp_strip": 209, "dmp_valid": 209, "dup_revers": 209, "dmp_copi": 209, "dmp_to_tupl": 209, "dmp_normal": 209, "dmp_convert": 209, "to_domain": 209, "dmp_from_sympi": 209, "dmp_nth": 209, "dmp_ground_nth": 209, "dmp_zero_p": 209, "dmp_zero": 209, "dmp_one_p": 209, "dmp_one": 209, "dmp_ground_p": 209, "dmp_ground": 209, "dmp_negative_p": 209, "dmp_positive_p": 209, "dmp_from_dict": 209, "dmp_to_dict": 209, "dmp_swap": 209, "dmp_permut": 209, "dmp_nest": 209, "dmp_rais": 209, "dmp_deflat": 209, "dmp_multi_defl": 209, "dmp_inflat": 209, "dmp_exclud": 209, "dmp_includ": 209, "dmp_inject": 209, "dmp_eject": 209, "dmp_terms_gcd": 209, "dmp_list_term": 209, "dmp_apply_pair": 209, "dmp_slice": 209, "dup_random": 209, "densearith": 209, "dmp_add_term": 209, "dmp_sub_term": 209, "dmp_mul_term": 209, "dmp_add_ground": 209, "dmp_sub_ground": 209, "dmp_mul_ground": 209, "dmp_quo_ground": 209, "dmp_exquo_ground": 209, "dup_lshift": 209, "dup_rshift": 209, "dmp_ab": 209, "dmp_neg": 209, "dmp_add": 209, "dmp_sub": 209, "dmp_add_mul": 209, "dmp_sub_mul": 209, "dmp_mul": 209, "dmp_sqr": 209, "dmp_pow": 209, "dmp_pdiv": 209, "dmp_prem": 209, "dmp_pquo": 209, "dmp_pexquo": 209, "dmp_rr_div": 209, "dmp_ff_div": 209, "dmp_div": 209, "dmp_rem": 209, "dmp_quo": 209, "dmp_exquo": 209, "dmp_max_norm": 209, "dmp_l1_norm": 209, "dmp_expand": 209, "densetool": 209, "dmp_integr": 209, "dmp_integrate_in": 209, "dmp_diff": 209, "dmp_diff_in": 209, "dmp_eval": 209, "dmp_eval_in": 209, "dmp_eval_tail": 209, "dmp_diff_eval_in": 209, "dmp_trunc": 209, "dmp_ground_trunc": 209, "dup_mon": 209, "dmp_ground_mon": 209, "dup_cont": 209, "dmp_ground_cont": 209, "dup_primit": 209, "dmp_ground_primit": 209, "dup_extract": 209, "dmp_ground_extract": 209, "dup_real_imag": 209, "bivari": [209, 215, 232, 236], "dup_mirror": 209, "dup_scal": 209, "dup_shift": 209, "dup_transform": 209, "dmp_compos": 209, "dup_decompos": 209, "t_m": 209, "r725": 209, "dmp_lift": 209, "dup_sign_vari": 209, "dmp_clear_denom": 209, "k_0": 209, "dmp_revert": 209, "gf_": 209, "justifi": 209, "necess": 209, "u_0": 209, "m_0": [209, 229], "m_n": 209, "236237": 209, "9215": 209, "9405": 209, "9603": 209, "gf_int": 209, "gf_degre": 209, "gf_lc": 209, "gf_tc": 209, "gf_strip": 209, "gf_trunc": 209, "gf_normal": 209, "gf_from_dict": 209, "gf_to_dict": 209, "gf_from_int_poli": 209, "gf_to_int_poli": 209, "gf_neg": 209, "gf_add_ground": 209, "gf_sub_ground": 209, "gf_mul_ground": 209, "gf_quo_ground": 209, "gf_add": 209, "gf_sub": 209, "gf_mul": 209, "gf_sqr": 209, "gf_add_mul": 209, "gf_sub_mul": 209, "gf_expand": 209, "gf_div": 209, "r726": 209, "monagan93": [209, 210], "r727": 209, "gathen99": [209, 210], "gf_rem": 209, "gf_quo": 209, "gf_exquo": 209, "gf_lshift": 209, "gf_rshift": 209, "gf_pow": 209, "gf_pow_mod": 209, "r728": 209, "gf_gcd": 209, "gf_lcm": 209, "gf_cofactor": 209, "gf_gcdex": 209, "eea": 209, "r729": 209, "gf_monic": 209, "gf_diff": 209, "gf_eval": 209, "gf_multi_ev": 209, "gf_compos": 209, "gf_compose_mod": 209, "gf_trace_map": 209, "r730": 209, "gathen92": [209, 210], "gf_random": 209, "gf_irreduc": 209, "gf_irreducible_p": 209, "gf_sqf_p": 209, "gf_sqf_part": 209, "gf_sqf_list": 209, "e_2": [209, 212], "e_k": 209, "f_j": [209, 226], "gf_sqf": 209, "r731": 209, "geddes92": [209, 210], "gf_qmatrix": 209, "berlekamp": 209, "gf_qbasi": 209, "gf_berlekamp": 209, "gf_zassenhau": 209, "gf_shoup": 209, "gf_factor_sqf": 209, "gf_factor": 209, "e_d": 209, "cantor": 209, "zassenhau": [209, 211], "shoup": [209, 210], "kaltofen": [209, 210], "gathen": [209, 210], "gf_factor_method": 209, "r732": 209, "gf_valu": 209, "2204": 209, "congruent": [209, 226, 229], "cong": 209, "189": 209, "139": 209, "r733": 209, "ivan": 209, "niven": 209, "zuckerman": 209, "montgomeri": 209, "infeas": [209, 212], "sdm_": 209, "distributedmodul": 209, "sdm_monomial_mul": 209, "sdm_monomial_deg": 209, "f_5": 209, "sdm_monomial_divid": 209, "sdm_lc": 209, "sdm_to_dict": 209, "sdm_from_dict": 209, "dic": 209, "sdm_add": 209, "2f_1": 209, "3f_1": 209, "yf_1": 209, "xf_1": 209, "sdm_lm": 209, "sdm_lt": 209, "sdm_mul_term": 209, "2xy": [209, 287], "8xy": 209, "sdm_zero": 209, "sdm_deg": 209, "sdm_from_vector": 209, "sdm_to_vector": 209, "variant": [209, 232, 235], "qg": 209, "remark": [209, 215, 226, 232], "uf": 209, "vg": 209, "zout": 209, "euclidtool": 209, "dmp_half_gcdex": 209, "dmp_gcdex": 209, "dmp_invert": 209, "dmp_euclidean_pr": 209, "dmp_primitive_pr": 209, "exceedingli": 209, "collin": [209, 210], "collins67": [209, 210], "subdomain": 209, "2l": 209, "remainin": 209, "subdetermin": 209, "n_2": [209, 236], "n_": [209, 229], "abnorm": 209, "gamma_i": 209, "brown": [209, 210, 236], "traub": [209, 210], "browntraub71": [209, 210], "brown78": [209, 210], "discoveri": [209, 289], "dmp_inner_subresult": 209, "729": 209, "sre": 209, "dmp_subresult": 209, "dmp_prs_result": 209, "dmp_zz_modular_result": 209, "dmp_zz_collins_result": 209, "dmp_qq_collins_result": 209, "dmp_result": 209, "dmp_discrimin": 209, "dmp_rr_prs_gcd": 209, "cff": [209, 212], "dmp_ff_prs_gcd": 209, "dmp_zz_heu_gcd": 209, "r734": 209, "liao95": [209, 210], "dmp_qq_heu_gcd": 209, "dmp_inner_gcd": 209, "dmp_gcd": 209, "dmp_lcm": 209, "dmp_content": 209, "dmp_primit": 209, "dmp_cancel": 209, "dmp_trial_divis": 209, "dmp_zz_mignotte_bound": 209, "dup_zz_hensel_step": 209, "hensel": 209, "r735": 209, "dup_zz_hensel_lift": 209, "f_list": 209, "multifactor": 209, "r736": 209, "dup_zz_zassenhau": 209, "dup_zz_irreducible_p": 209, "eisenstein": 209, "dup_cyclotomic_p": 209, "bradford": 209, "russel": 209, "251": 209, "berlin": 209, "heidelberg": 209, "dup_zz_cyclotomic_poli": 209, "dup_zz_cyclotomic_factor": 209, "r737": 209, "weisstein09": [209, 210], "dup_zz_factor_sqf": 209, "dup_zz_factor": 209, "r738": 209, "dmp_zz_wang_non_divisor": 209, "wang": [209, 210, 254], "eez": 209, "dmp_zz_wang_test_point": 209, "dmp_zz_wang_lead_coeff": 209, "dmp_zz_diophantin": 209, "dmp_zz_wang_hensel_lift": 209, "dmp_zz_wang": 209, "enhanc": [209, 236], "r739": 209, "wang78": [209, 210], "r740": 209, "dmp_zz_factor": 209, "r741": 209, "dmp_ext_factor": 209, "dup_gf_factor": 209, "dmp_factor_list": 209, "dmp_factor_list_includ": 209, "dmp_irreducible_p": 209, "groebnertool": 209, "polyconfig": [209, 212], "f5b": [209, 212], "spoli": 209, "red_groebn": 209, "beckerweispfenning93": 209, "is_groebn": 209, "is_minim": 209, "is_reduc": 209, "fglmtool": 209, "matrix_fglm": 209, "o_to": 209, "o_from": 209, "r742": 209, "fauger": [209, 212], "gianni": [209, 212, 234], "mora": [209, 210, 212, 234], "sdm_spoli": 209, "phantom": 209, "sca": 209, "defn": 209, "sdm_ecart": 209, "ecart": 209, "sdm_nf_mora": 209, "nf": 209, "sdm_groebner": 209, "sugar": [209, 210, 241], "giovini": [209, 210], "polyopt": [209, 213], "build_opt": 209, "basepolynomialerror": 209, "operationnotsupport": 209, "heuristicgcdfail": 209, "homomorphismfail": 209, "isomorphismfail": [209, 211], "extraneousfactor": 209, "evaluationfail": 209, "refinementfail": 209, "notrevers": [209, 212], "notalgebra": 209, "polynomialerror": [209, 212], "unificationfail": [209, 211], "generatorsneed": 209, "computationfail": 209, "exc": 209, "generatorserror": 209, "univariatepolynomialerror": 209, "multivariatepolynomialerror": [209, 212], "polificationfail": 209, "orig": 209, "optionerror": 209, "flagerror": 209, "modulargcd": 209, "modgcd_univari": 209, "monagan00": [209, 210], "modgcd_bivari": 209, "modgcd_multivari": 209, "_modgcd_multivariate_p": 209, "brown71": [209, 210], "degbound": 209, "contbound": 209, "func_field_modgcd": 209, "reconstuct": 209, "z_p": 209, "hoeij04": [209, 210], "scarc": 209, "hsin": 210, "chao": 210, "liao": 210, "fateman": 210, "montreal": 210, "quebec": 210, "canada": 210, "240": [210, 218, 264], "von": [210, 236], "zur": 210, "gerhard": 210, "cambridg": [210, 229], "weisstein": 210, "cyclotomicpolynomi": 210, "1215": 210, "1231": 210, "czapor": 210, "labahn": 210, "monagan": [210, 228], "disco": 210, "721": 210, "kaltofen98": 210, "subquadrat": 210, "223": 210, "1998": [210, 229], "1179": 210, "1197": 210, "shoup95": 210, "397": 210, "shoup91": 210, "cox97": [210, 212], "shea": [210, 212], "ajwa95": 210, "ajwa": 210, "liu": 210, "groebner": [210, 211, 212, 215, 228, 234, 235], "cites": 210, "ist": [210, 225], "psu": [210, 225], "mycites": 210, "login": 210, "bose03": 210, "bose": 210, "guiver": 210, "giovini91": 210, "bronstein93": [210, 212], "salvi": [210, 213], "kiev": 210, "ukrain": 210, "buchberger01": [210, 212], "theorist": 210, "moreno": 210, "diaz": 210, "freir": 210, "eurocast": 210, "februari": 210, "davenport88": 210, "siret": 210, "tournier": 210, "london": [210, 229], "124": [210, 282], "greuel": 210, "pfister": 210, "atiyah": 210, "macdonald": 210, "142": 210, "1971": [210, 232], "505": 210, "249": 210, "wittkopf": 210, "478": 210, "hoeij": 210, "297": [210, 212], "304": [210, 212], "wang81": 210, "adic": 210, "symsac": 210, "hoeij02": 210, "manwright94": [210, 212], "yiu": 210, "kwong": 210, "franci": 210, "wright": 210, "dispers": [210, 236], "190347": 210, "190413": 210, "koepf98": [210, 212], "koepf": [210, 218, 228], "vieweg": 210, "abramov71": [210, 212], "abramov": [210, 234], "ussr": 210, "330": 210, "man93": [210, 212], "376": 210, "sciencedirect": [210, 225], "pii": [210, 225], "s0747717183710539": 210, "kapur1994": 210, "deepak": 210, "kapur": 210, "tushar": 210, "saxena": 210, "yang": 210, "dixon": 210, "researchg": [210, 236], "2514261_algebraic_and_geometric_reasoning_using_dixon_result": 210, "palancz08": 210, "pal\u00e1ncz": 210, "zaletnyik": 210, "jl": [210, 249], "awang": 210, "ew": 210, "grafarend": 210, "geodet": 210, "geodesi": 210, "225607735_dixon_result": 210, "s_solution_of_systems_of_geodetic_polynomial_equ": 210, "bruce97": 210, "bruce": 210, "randal": 210, "donald": [210, 251], "mundi": 210, "artifici": [210, 219], "intellig": [210, 228, 232, 293], "orlando": 210, "www2": 210, "duke": 210, "donaldlab": 210, "symbolicnumericalcomput": 210, "045": 210, "087": 210, "stiller96": 210, "stiller": 210, "citeseerx": [210, 225], "viewdoc": [210, 225], "590": 210, "2021": 210, "rep1": [210, 225], "cohen93": [210, 211], "henri": 210, "olga": 211, "tausski": 211, "zimmer": 211, "pohst": 211, "articul": 211, "mathfrak": 211, "regul": 211, "alpha_m": 211, "round_two": 211, "prime_decomp": 211, "prime_valu": 211, "minimal_polynomi": 211, "field_isomorph": 211, "nilrad": 211, "z_k": 211, "zk": 211, "ordinarili": 211, "503": 211, "r743": 211, "r744": 211, "powerbasisel": 211, "ramif": 211, "as_submodul": 211, "bundl": 211, "test_factor": 211, "deliber": 211, "is_inert": 211, "inert": [211, 232], "reduce_anp": 211, "reduce_alg_num": 211, "field_gen": 211, "just_gen": 211, "reagent": 211, "kummer": 211, "1847": 211, "ueber": 211, "zerlegung": 211, "crell": 211, "r745": 211, "poly_from_expr": [211, 212], "tschirnhausen": 211, "maxtriesexcept": 211, "g_name": 211, "_minpoly_compos": 211, "stall": 211, "alli": 211, "monomorph": 211, "alpha_i": 211, "alpha_n": 211, "lincomb": 211, "primtiiv": 211, "meanwhil": 211, "moduleel": 211, "powerbasi": 211, "submodule_from_matrix": 211, "ancestor": 211, "to_col": 211, "nca": 211, "circumst": [211, 287], "_mult_tab": 211, "successfulli": 211, "moduleendomorph": 211, "innerendomorph": 211, "endomorphismr": 211, "spec": [211, 212], "i_n": [211, 212, 237], "include_self": 211, "basis_el": 211, "element_from_r": 211, "endomorphism_r": 211, "is_compat_col": 211, "mult_tab": 211, "mult": 211, "closurefailur": 211, "nearest_common_ancestor": 211, "number_field": 211, "power_basis_ancestor": 211, "incom": [211, 236], "halv": 211, "submodule_from_gen": 211, "over_power_basi": 211, "starts_with_un": 211, "hnf_modulu": 211, "whole_submodul": 211, "element_from_anp": 211, "element_from_alg_num": 211, "element_from_poli": 211, "qq_matrix": 211, "basis_element_pullback": 211, "discard_befor": 211, "structureerror": 211, "cohen00": 211, "make_mod_elt": 211, "qq_col": 211, "from_int_list": 211, "is_compat": 211, "reduced_mod_p": 211, "to_ancestor": 211, "anc": 211, "to_par": 211, "to_anp": 211, "inner_endomorph": 211, "event": [211, 236], "find_min_poli": 211, "missingunityerror": 211, "is_int": 211, "get_num_denom": 211, "extract_fundamental_discrimin": 211, "r746": 211, "algintpow": 211, "zeta_pow": 211, "r747": 211, "coeff_search": 211, "supplement_a_subspac": 211, "v_n": 211, "w_r": 211, "w_j": 211, "u_j": 211, "r748": 211, "parallel_poly_from_expr": 212, "exprtool": 212, "gcd_list": 212, "lcm_list": 212, "destruct": 212, "2079": 212, "1401": 212, "2715": 212, "6720": 212, "1092": 212, "gff": 212, "check_sqf": 212, "count_root": 212, "nroot": [212, 234], "maxstep": 212, "cleanup": 212, "73205080756888": 212, "73205080756887729352744634151": 212, "ground_root": 212, "nth_power_roots_poli": 212, "r_g": 212, "_signsimp": 212, "q_n": 212, "is_zero_dimension": [212, 235], "donal": 212, "230": [212, 234], "ec": 212, "em": 212, "dispersionset": 212, "gp": [212, 232], "free_symbols_in_domain": 212, "from_poli": 212, "get_domain": 212, "get_modulu": 212, "has_only_gen": 212, "vincent": [212, 254], "akrita": 212, "strzebonski": 212, "va": 212, "alkiviadi": 212, "panagioti": 212, "vigkla": 212, "265": 212, "279": 212, "polnomi": 212, "is_multivari": 212, "is_univari": 212, "ltrim": 212, "make_monic_over_integers_by_scaling_root": 212, "_only_": 212, "sturmian": 212, "subresultants_qq_zz": 212, "suffix": [212, 249], "_pg": 212, "_amv": 212, "rem_z": 212, "premultipli": 212, "rat_clear_denom": 212, "_ignor": 212, "retract": 212, "same_root": 212, "set_domain": 212, "set_modulu": 212, "termwis": 212, "fglm": 212, "r749": 212, "horner_schem": 212, "equispac": 212, "viet": 212, "itermonomi": 212, "min_degre": 212, "gib": 212, "monomial_kei": 212, "monomial_count": 212, "gradedlexord": 212, "reversedgradedlexord": 212, "clear_cach": 212, "_get_interv": 212, "165": [212, 236, 254], "169": 212, "eval_approx": 212, "evalf_r": 212, "eval_r": 212, "69629": 212, "71318": 212, "805": 212, "3275": 212, "65536": [212, 215, 216], "414645": 212, "131072": 212, "6545": 212, "104755": 212, "2097152": 212, "6634255": 212, "_all_root": 212, "use_cach": 212, "_complexes_index": 212, "_complexes_sort": 212, "_count_root": 212, "_ensure_complexes_init": 212, "_ensure_reals_init": 212, "_eval_is_imaginari": 212, "_get_complex": 212, "_get_complexes_sqf": 212, "currentfactor": 212, "_get_real": 212, "_get_reals_sqf": 212, "_get_root": 212, "_indexed_root": 212, "_new": 212, "_postprocess_root": 212, "_preprocess_root": 212, "heroic": [212, 234], "_real_root": 212, "_reals_index": 212, "_reals_sort": 212, "_refine_complex": 212, "_roots_trivi": 212, "_set_interv": 212, "return_mpmath": 212, "861136": 212, "86113631159405258": 212, "polyroot": 212, "unread": [212, 252], "casu": 212, "irreducibili": 212, "inexpress": 212, "unsolv": [212, 235], "r750": 212, "cubic_equ": 212, "trigonometric_and_hyperbolic_solut": 212, "specialpoli": 212, "swinnerton_dyer_poli": 212, "swinnerton": 212, "dyer": 212, "random_poli": 212, "gegenbau": [212, 216], "jakob": 212, "psum": 212, "3144337": 212, "r751": 212, "bernoulli_c_poli": 212, "reindex": 212, "swiss": 212, "knife": 212, "630": 212, "5124": 212, "12465": 212, "155": 212, "r752": 212, "partfrac": [212, 218], "undertermin": 212, "_w": [212, 223], "apart_list": 212, "assemble_partfrac_list": 212, "bunch": 212, "pfd": 212, "r753": 212, "partial_list": 212, "reassembl": 212, "pfda": 212, "r754": 212, "r755": 212, "r756": 212, "r757": 212, "r758": 212, "r759": 212, "r760": 212, "r761": 212, "widen": 213, "ring_seri": 213, "rs_sin": 213, "166666666666667": 213, "puiseux": 213, "rs_co": 213, "rs_tan": 213, "rs_exp": 213, "blazingli": 213, "promin": 213, "gradual": 213, "rs_": 213, "rs_log": 213, "rs_lambertw": 213, "rs_atan": 213, "arctang": 213, "rs_asin": 213, "_tan1": 213, "rs_cot": 213, "rs_cos_sin": 213, "rs_atanh": 213, "rs_sinh": 213, "rs_cosh": 213, "rs_tanh": 213, "rs_hadamard_exp": 213, "inver": 213, "rs_mul": 213, "rs_squar": 213, "rs_pow": 213, "rs_series_invers": 213, "rs_series_revers": 213, "a_kx_k": 213, "ar_i": 213, "ar_": 213, "ae": 213, "rs_trunc": 213, "rs_nth_root": 213, "160249952256379": 213, "44224957030741": 213, "rs_sub": 213, "rs_diff": 213, "rs_integr": 213, "rs_newton": 213, "rs_compose_add": 213, "r762": 213, "bostan": 213, "flajolet": 213, "schost": 213, "4579": 213, "institut": 213, "nation": 213, "recherch": 213, "informatiqu": 213, "automatiqu": 213, "rs_is_puiseux": 213, "rs_puiseux": 213, "rs_puiseux2": 213, "rs_series_from_list": 213, "concur": 213, "rs_fun": 213, "_tan": 213, "_nth": 213, "_root": 213, "_fun": 213, "mul_xin": 213, "pow_xin": 213, "_raw": 214, "sympy_eqs_to_r": 214, "eqs_r": 214, "eqs_to_matrix": 214, "eqs_coeff": 214, "eqs_rh": 214, "_solve_lin_si": 214, "_solve_lin_sys_compon": 214, "critiqu": 215, "wester1999": 215, "systemat": 215, "153": 215, "\u2124": [215, 216, 235, 294], "unm": 215, "driver": [216, 248], "adequ": 216, "emptyprint": 216, "_sympystr": 216, "mathml": 216, "inconveni": 216, "_print_": 216, "expr_class": 216, "hierarchi": [216, 236], "_print_rat": 216, "_print_numb": 216, "_print_atom": 216, "_print_bas": 216, "print_latex": 216, "mylatexprint": 216, "_print_deriv": 216, "print_my_latex": 216, "modop": 216, "subcompon": 216, "outermost": [216, 224, 228, 240], "modopmodewrong": 216, "modopnestedwrong": 216, "modopsettingswrong": 216, "subobject": 216, "infrastructur": [216, 233], "printer_exampl": 216, "set_global_set": 216, "stringpict": 216, "pretty_symbologi": 216, "prettyform": 216, "hline": 216, "vline": 216, "ascii": 216, "_pretti": 216, "use_unicode_sqrt_char": 216, "root_not": 216, "mat_symbol_styl": 216, "prettifi": 216, "bold": 216, "c89codeprint": 216, "print_ccod": 216, "tgamma": 216, "known_functions_c89": 216, "known_functions_c99": 216, "fmax": 216, "fmin": 216, "lgamma": 216, "indent_cod": 216, "cfunction_format": 216, "derefer": 216, "dereferenc": 216, "symbols_to_declar": 216, "not_supported_funct": 216, "code_text": 216, "m_sqrt2": 216, "math_macro": 216, "m_sqrt2l": 216, "cxx": 216, "cxx98codeprint": 216, "print_rcod": 216, "rcode": 216, "known_funct": 216, "_rcode": 216, "rfunction_str": 216, "rfunction_format": 216, "ifels": 216, "type_map": 216, "name_mangl": 216, "mangl": 216, "floor1": 216, "floor2": 216, "print_fcod": 216, "_fcode": 216, "conjg": 216, "32768": 216, "7182818284590452d0": 216, "1415926535897932d0": 216, "718281828459045235360287d0": 216, "141592653589793238462643d0": 216, "869604401089358618834491d0": 216, "mygamma": 216, "allow_unknown_funct": 216, "smtlib": 216, "smtlibprint": 216, "symbol_t": 216, "_smtlib": 216, "_default_set": 216, "known_const": 216, "ite": 216, "known_typ": 216, "smtlib_cod": 216, "auto_assert": 216, "auto_declar": 216, "prefix_express": 216, "suffix_express": 216, "log_warn": 216, "booleanfunct": 216, "dreal": 216, "14159": 216, "my_smt_variable_for_pi": 216, "postfix": [216, 254], "riski": 216, "sound": [216, 293], "pw": 216, "pythontyp": 216, "smt_builtin_func": 216, "existing_smtlib_fcn": 216, "user_def_func": 216, "fun": [216, 233, 286], "coshintegr": 216, "cosintegr": 216, "expintegralei": 216, "factorialpow": 216, "heavisidetheta": 216, "sinhintegr": 216, "sinintegr": 216, "arccosh": 216, "arccoth": 216, "arcsinh": 216, "arctanh": 216, "dirichleteta": 216, "gegenbauerc": 216, "hypergeometricpfq": 216, "sphericalbesselj": 216, "logintegr": 216, "lucasl": 216, "mathieu": 216, "riemann_xi": 216, "riemannxi": 216, "stieltjesgamma": 216, "sphericalbess": 216, "mcodeprint": 216, "_mcode": 216, "mcode": 216, "maplecodeprint": 216, "_mapl": 216, "maple_cod": 216, "print_maple_cod": 216, "javascriptcodeprint": 216, "_javascript": 216, "js_function_str": 216, "known_fcns_src1": 216, "known_fcns_src2": 216, "conj": 216, "juliacodeprint": 216, "_julia": 216, "harmless": [216, 289], "existing_julia_fcn": 216, "coshint": 216, "cosint": 216, "sinhint": 216, "sinint": 216, "logint": 216, "gammaln": 216, "octavecodeprint": 216, "_octav": 216, "recip": [216, 254], "powf": 216, "signum": 216, "rustcodeprint": 216, "_rust_cod": 216, "7_f64": 216, "_aesara": 216, "tensorvari": 216, "floatx": 216, "squeez": 216, "dim_handl": 216, "gtkmathview": 216, "widget": 216, "print_gtk": 216, "libgtkmathview": 216, "start_view": 216, "_lambdacod": 216, "accepted_latex_funct": 216, "parenthesize_sup": 216, "fold_frac_pow": 216, "fold_func_bracket": 216, "fold_short_frac": 216, "inv_trig_styl": 216, "itex": 216, "ln_notat": 216, "long_frac_ratio": 216, "mat_delim": 216, "mat_str": 216, "mul_symbol": 216, "symbol_nam": 216, "gothic_re_im": 216, "decimal_separ": 216, "diff_oper": 216, "smallmatrix": [216, 287], "amsmath": 216, "fracton": 216, "semicolon": 216, "monospac": 216, "mathtt": 216, "mathml2": 216, "mathmlprinterbas": 216, "mathmlcontentprint": 216, "mathmlpresentationprint": 216, "chapter4": 216, "_mathml_cont": 216, "mathml_tag": 216, "chapter3": 216, "_mathml_present": 216, "utf": 216, "mul_symbol_mathml_numb": 216, "xb7": 216, "print_mathml": [216, 292], "mrow": 216, "mpmathprint": 216, "fully_qualified_modul": 216, "print_python": 216, "textual": 216, "reprprint": 216, "_sympyrepr": 216, "reprifi": 216, "sympy_integ": 216, "displayhook": [216, 247], "pprint_nod": 216, "nb2": 216, "print_nod": 216, "asssumpt": 216, "determinisit": 216, "backtrac": 216, "print_tre": 216, "outputbuff": 216, "dvioption": 216, "outputtexfil": 216, "extra_preambl": 216, "latex_set": 216, "postscript": 216, "tex": 216, "eulervm": 216, "sty": 216, "debian": 216, "ubuntu": 216, "unset": [216, 228], "gimp": 216, "evinc": 216, "kdvi": 216, "xdvi": 216, "xdg": 216, "system_default_view": 216, "bytesio": 216, "usepackag": 216, "amsfont": 216, "renewcommand": 216, "popen": 216, "phidd": 216, "bitmap": 216, "split_super_sub": 216, "var_sub1__sup_sub2": 216, "assignmenterror": 216, "bitwiseand": 216, "bitwiseor": 216, "bitwisexor": 216, "precedence_valu": 216, "kroneckerproduct": 216, "tensadd": [216, 242], "tensmul": [216, 242], "precedence_funct": 216, "precedence_float": 216, "precedence_fracel": 216, "precedence_integ": 216, "precedence_mul": 216, "precedence_polyel": 216, "precedence_r": 216, "precedence_unevaluatedexpr": 216, "databas": [216, 226], "pretty_use_unicod": 216, "pretty_try_use_unicod": 216, "xstr": 216, "greek_lett": 216, "digit_2txt": 216, "ONE": 216, "seven": 216, "symb_2txt": 216, "parenthesi": [216, 240], "\u2080": 216, "\u2081": 216, "\u2082": 216, "\u2084": 216, "\u2085": 216, "\u2086": 216, "\u2087": 216, "\u2088": 216, "\u2089": 216, "\u2090": 216, "\u1d66": 216, "\u1d6a": 216, "\u2091": 216, "\u1d67": 216, "\u2095": 216, "\u1d62": 216, "\u2096": 216, "\u2097": 216, "\u2098": 216, "\u2099": 216, "\u2092": 216, "\u209a": 216, "\u1d69": 216, "\u1d63": 216, "\u1d68": 216, "\u209b": 216, "\u209c": 216, "\u1d64": 216, "\u1d65": 216, "\u2093": 216, "\u2070": 216, "\u00b9": 216, "\u00b2": 216, "\u00b3": 216, "\u2074": 216, "\u2075": 216, "\u2076": 216, "\u2077": 216, "\u2078": 216, "\u2079": 216, "\u2071": 216, "\u207f": 216, "xobj": 216, "vobj": 216, "hobj": 216, "vf": 216, "\u00bd": 216, "\u2153": 216, "\u00bc": 216, "\u2155": 216, "\u2159": 216, "\u215b": 216, "\u2154": 216, "\u2156": 216, "\u00be": 216, "\u2157": 216, "\u215c": 216, "\u2158": 216, "\u215a": 216, "\u215d": 216, "\u215e": 216, "xsym": 216, "symbologi": 216, "atoms_t": 216, "\u2102": [216, 294], "emptysequ": [216, 222], "\u2115": 216, "\u2115\u2080": 216, "\u211d": [216, 294], "symmetricdiffer": [216, 224, 235], "pretty_atom": 216, "atom_nam": 216, "pretty_symbol": 216, "symb_nam": 216, "bold_nam": 216, "stylis": 216, "_print_meijerg": 216, "_print_hyp": 216, "jurjen": 216, "bo": 216, "hate": 216, "spammer": 216, "pietjepuk314": 216, "oc": [216, 267], "oohai": 216, "gedg": 216, "mun": 216, "terminal_str": 216, "baselin": 216, "leftslash": 216, "slash": [216, 247], "paren": 216, "ifascii_nougli": 216, "line_break": 216, "ugli": 216, "terminal_width": 216, "wider": 216, "maxdepth": 216, "labelfunc": 216, "digraph": [216, 254, 292], "rankdir": [216, 292], "_sparse_": 217, "flavor": 217, "________": [217, 236, 254], "x\u2080": 217, "greatli": 217, "numbered_symbol": [217, 228, 232, 254], "postprocessor": [217, 228], "reduced_expr": [217, 228], "formalpowerseri": 218, "coeff_bel": 218, "formalpowerseriescompos": 218, "r763": 218, "comtet": 218, "loui": 218, "reidel": 218, "1974": 218, "formalpowerseriesinvers": 218, "r764": 218, "upto": [218, 223, 232], "formalpowerseriesproduct": 218, "rational_algorithm": 218, "compute_fp": 218, "hyper_algorithm": 218, "omposit": 218, "bell_seq": 218, "finiteformalpowerseri": 218, "rational_independ": 218, "ra": 218, "admiss": [218, 221], "r765": 218, "r766": 218, "simpled": 218, "exp_r": 218, "explik": 218, "hyper_r": 218, "rsolve_hypergeometr": 218, "r767": 218, "r768": 218, "solve_d": 218, "fourierseri": 219, "scalex": 219, "shiftx": 219, "sigma_approxim": 219, "gibb": 219, "bigl": 219, "bigr": 219, "lanczo": 219, "r769": 219, "gibbs_phenomenon": 219, "r770": 219, "sawtooth": 219, "bn": 219, "r771": 219, "limitseq": 221, "difference_delta": 221, "r772": 221, "differencedelta": 221, "limit_seq": [221, 223], "safeguard": 221, "r773": 221, "kauer": 221, "seqper": 222, "seqformula": 222, "seqbas": 222, "coeff_mul": 222, "find_linear_recurr": 222, "gfvar": 222, "seqadd": 222, "seqmul": 222, "_mul": 222, "recursiveseq": 222, "fib": 222, "invok": [223, 247, 248], "workhors": 223, "succ": [223, 236], "asymp": 223, "exposit": 223, "gloss": 223, "wsym": 223, "test_rewrite1": 223, "build_expression_tre": 223, "mrv_leadterm": 223, "e0": 223, "calculate_seri": 223, "limitinf": 223, "constantli": 223, "subsset": 223, "mrv_max1": 223, "mrv_max3": 223, "expsf": 223, "expsg": 223, "expsboth": 223, "do_sub": 223, "r774": 223, "limsup_": 223, "7048138294": 223, "7182818285": 223, "6349839002": 223, "6449340668": 223, "shank": 223, "6881721793": 223, "6931396564": 223, "6931471806": 223, "6931471805599453094172321215": 223, "r775": 223, "residue_theorem": 223, "neighborhood": 224, "rim": 224, "conditionset": [224, 235, 236, 294], "affirm": 224, "infimum": 224, "imageset": [224, 235, 294], "is_clos": 224, "closed": 224, "is_disjoint": 224, "r776": 224, "disjoint_set": 224, "is_open": 224, "is_proper_subset": 224, "is_proper_superset": 224, "left_open": 224, "is_superset": 224, "isdisjoint": 224, "issubset": 224, "issuperset": 224, "productset": [224, 235], "powerset": 224, "fancyset": 224, "complexregion": [224, 235], "disjointunion": 224, "lebesgu": 224, "r777": 224, "power_set": 224, "symmetric_differ": 224, "r778": 224, "right_open": 224, "mpi": 224, "r779": 224, "interval_": 224, "as_rel": 224, "is_left_unbound": 224, "is_right_unbound": 224, "r780": 224, "r781": 224, "union_": 224, "28set_theori": 224, "r782": 224, "intersection_": 224, "coin": [224, 236], "r783": 224, "cartesian_product": 224, "is_iter": 224, "r784": 224, "complementset": 224, "r785": 224, "disjoint_union": 224, "r786": 224, "empty_set": 224, "r787": 224, "universal_set": 224, "flambda": 224, "square_iter": 224, "base_set": 224, "cartesiancomplexregion": 224, "polarcomplexregion": 224, "unit_disk": 224, "upper_half_unit_disk": 224, "a_interv": 224, "b_interv": 224, "from_real": 224, "pset": 224, "rset": 224, "thetaset": 224, "upper_half_plan": 224, "normalize_theta_set": 224, "r788": 224, "r789": 224, "axiom_of_power_set": 224, "sin_sol": 224, "r790": 224, "element_": 224, "varnoth": 224, "tr0": 225, "tr1": 225, "tr2": 225, "tr2i": 225, "tr3": 225, "tr4": 225, "tr5": 225, "tr6": 225, "tr7": 225, "tr8": 225, "tr9": 225, "tr10": 225, "tr10i": 225, "tr11": 225, "tr12": 225, "tr12i": 225, "tr13": 225, "trmorri": 225, "tr14": 225, "tr15": 225, "tr16": 225, "tr22": 225, "tr111": 225, "ctr1": 225, "ctr4": 225, "rl1": 225, "rl2": 225, "deem": 225, "932": 225, "016": 225, "serendipit": 225, "dead": 225, "newa": 225, "lucki": 225, "sqt": 225, "_tr56": 225, "un": [225, 226], "r791": 225, "morri": 225, "27s_law": 225, "trpower": 225, "r792": 225, "list_of_trigonometric_ident": 225, "reduction_formula": 225, "ctr2": 225, "ctr3": 225, "r793": 225, "s0895717706001609": 225, "dimitar": 225, "vlahovski": 225, "technolog": 225, "xiuqin": 225, "zhong": 225, "zhenb": 225, "zeng": 225, "1169": 225, "1177": 225, "657": 225, "2478": 225, "sosmath": 225, "trig5": 225, "symplifi": [226, 228], "roach1996": 226, "roach1997": 226, "p_q": 226, "reachabl": [226, 236], "f_q": 226, "undo": [226, 293], "whenc": 226, "game": 226, "twofold": 226, "incongru": 226, "wlog": 226, "alpha_r": 226, "beta_r": 226, "blindli": 226, "messi": 226, "k_u": 226, "l_v": 226, "k_j": 226, "c_w": 226, "r_j": 226, "l_u": 226, "res_": 226, "delta_i": 226, "add_formula": 226, "addb": 226, "sum_0": 226, "test_hyperexpand": 226, "test_formula": 226, "suboptim": 226, "imath": 226, "b1prime": 226, "vital": 226, "308": 226, "hongguang": [227, 273], "fu": [227, 228, 273], "logcombin": [228, 232, 235], "unmodifi": 228, "my_measur": 228, "nthroot": 228, "max_len": 228, "surd": 228, "kroneckersimp": 228, "besselsimp": 228, "strigonometr": 228, "399": 228, "hypersimilar": 228, "rational_convers": 228, "base10": 228, "6004799503160655": 228, "eq_x": 228, "max_term": 228, "collect_sqrt": 228, "polish": 228, "rad_ration": 228, "collect_const": 228, "rcollect": 228, "ratsimpmodprim": 228, "r794": 228, "pearc": 228, "1145768": 228, "1145809": 228, "trigsimp_groebn": 228, "bb1": 228, "be1": 228, "bb2": 228, "be2": 228, "bei": 228, "max_it": 228, "unrad": [228, 234], "r795": 228, "20210806201615": 228, "fagin": 228, "symb85": 228, "r796": 228, "cybertest": 228, "opt_sub": 228, "as_unevaluated_bas": 228, "tree_cs": 228, "hyperegeometr": 228, "epathtool": 228, "epath": 228, "ebnf": 228, "za": [228, 236], "xml": 228, "xpath": 228, "hasattr": [228, 250], "beginn": [229, 231, 232, 234, 235, 294], "diophantu": 229, "mathematician": [229, 235], "citi": 229, "alexandria": 229, "father": 229, "hi": 229, "arithmetica": 229, "diop_solv": 229, "classify_diop": 229, "diop_linear": 229, "diop_quadrat": 229, "diop_ternary_quadrat": 229, "diop_ternary_quadratic_norm": 229, "diop_general_pythagorean": 229, "diop_general_sum_of_squar": 229, "diop_general_sum_of_even_pow": 229, "merge_solut": 229, "3y": 229, "9369318": 229, "find_dn": 229, "diop_dn": 229, "transformation_to_dn": 229, "920": 229, "5y": 229, "BY": 229, "transformation_to_norm": 229, "t4": 229, "t5": 229, "sum_of_squar": 229, "providean": 229, "eqyptian": 229, "thilinaatsympi": 229, "andreescu": 229, "titu": 229, "andrica": 229, "dorin": 229, "cucurezeanu": 229, "ion": 229, "diophantineequ": 229, "alpertron": 229, "20160323033111": 229, "jpr2718": 229, "ax2p": 229, "permute_sign": [229, 254], "signed_permut": [229, 254], "_dict": 229, "base_solution_linear": 229, "r797": 229, "r798": 229, "pell": 229, "lmm": 229, "r799": 229, "393": 229, "13y": 229, "986": 229, "49299": 229, "1570": 229, "diop_bf_dn": 229, "robertson": 229, "20160323033128": 229, "cornacchia": 229, "r800": 229, "nitaj": 229, "r801": 229, "numbertheori": 229, "r802": 229, "r803": 229, "676": 229, "884": 229, "fxz": 229, "3xy": 229, "r804": 229, "fxy": 229, "gyz": 229, "hxz": 229, "r805": 229, "cremona": 229, "rusin": 229, "2x_": 229, "m4": 229, "general_sum_of_squar": 229, "8m": 229, "r806": 229, "2345": 229, "proofwiki": 229, "integer_as_sum_of_three_squar": 229, "general_sum_of_even_pow": 229, "power_represent": 229, "1729": 229, "stopiter": 229, "sum_of_three_squar": 229, "r807": 229, "44542": 229, "207": 229, "schorn": 229, "sum_of_four_squar": 229, "3456": 229, "1294585930293": 229, "2161": 229, "1137796": 229, "r808": 229, "sum_of_pow": 229, "evenli": 229, "var_t": 229, "pqa": 229, "r809": 229, "ur": 229, "dv": 229, "vr": 229, "r810": 229, "parametrize_ternary_quadrat": 229, "r811": 229, "nigel": 229, "ldescent": 229, "4x": [229, 235, 282], "7y": 229, "5x": 229, "r812": 229, "r813": 229, "nottingham": 229, "worktrib": 229, "1023265": 229, "gaussian_reduc": 229, "r814": 229, "20201021115213": 229, "cuhk": 229, "wkshum": 229, "404": 229, "r815": 229, "holzer": 229, "mordel": 229, "r816": 229, "r817": 229, "prime_as_sum_of_two_squar": 229, "r818": 229, "sqf_normal": 229, "r819": 229, "legrang": 229, "csusm": 229, "aitken_html": 229, "diophantinesolutionset": 229, "symbols_seq": 229, "dict_iter": 229, "diophantineequationtyp": 229, "binaryquadrat": 229, "r820": 229, "r821": 229, "inhomogeneousternaryquadrat": 229, "inhomogen": [229, 232, 234], "homogeneousternaryquadraticnorm": 229, "homogeneousternaryquadrat": 229, "inhomogeneousgeneralquadrat": 229, "homogeneousgeneralquadrat": 229, "generalsumofsquar": 229, "r822": 229, "generalpythagorean": 229, "cubicthu": 229, "thue": 229, "generalsumofevenpow": 229, "pde": [230, 232, 273], "subcategori": [231, 272], "solve_rational_inequ": 231, "solve_poly_inequ": 231, "reduce_rational_inequ": 231, "reduce_abs_inequ": 231, "solvifi": [231, 235], "autodetect": [232, 233], "odesimp": 232, "ode_ord": [232, 233, 234], "deutil": [232, 233], "best_hint": 232, "unevaluat": 232, "test_od": 232, "ode_": 232, "hintnam": [232, 233], "classify_sysod": 232, "almost_linear": 232, "dsolve_system": 232, "ode_hintnam": 232, "allhint": [232, 233], "tough": 232, "nth_linear_homogeneous_constant_coeff_integr": 232, "1st_linear": 232, "nth_linear": 232, "indep": 232, "indep_div_dep": 232, "undetermined_coeffici": 232, "_best": 232, "nth_algebra": 232, "1st_homogeneous_coeff_best": 232, "1st_homogeneous_coeff_subs_indep_div_dep": 232, "1st_homogeneous_coeff_subs_dep_div_indep": 232, "1st_power_seri": 232, "lie_group": 232, "nth_linear_constant_coeff_homogen": 232, "nth_linear_euler_eq_homogen": 232, "nth_algebraic_integr": 232, "1st_exact_integr": 232, "1st_linear_integr": 232, "bernoulli_integr": 232, "1st_homogeneous_coeff_subs_indep_div_dep_integr": 232, "1st_homogeneous_coeff_subs_dep_div_indep_integr": 232, "nth_linear_constant_coeff_undetermined_coeffici": 232, "nth_linear_constant_coeff_variation_of_paramet": 232, "nth_linear_constant_coeff_variation_of_parameters_integr": 232, "solve_for_func": [232, 233], "homogeneouscoeffsubsdepdivindep": 232, "homogeneouscoeffsubsindepdivdep": 232, "varepsilon": 232, "genform": [232, 233], "starrett": 232, "checkinfsol": 232, "constantsimp": 232, "symbolnam": 232, "startnumb": 232, "endnumb": 232, "renumb": 232, "absorpt": 232, "assist": 232, "constant_renumb": 232, "1st_rational_riccati": 232, "riccati_special_minus2": 232, "linear_coeffici": 232, "separable_reduc": 232, "nth_linear_euler_eq_nonhomogeneous_undetermined_coeffici": 232, "nth_linear_euler_eq_nonhomogeneous_variation_of_paramet": 232, "liouvil": 232, "2nd_linear_airi": 232, "2nd_linear_bessel": 232, "2nd_hypergeometr": 232, "2nd_hypergeometric_integr": 232, "nth_order_reduc": 232, "2nd_power_series_ordinari": 232, "2nd_power_series_regular": 232, "almost_linear_integr": 232, "linear_coefficients_integr": 232, "separable_reduced_integr": 232, "nth_linear_euler_eq_nonhomogeneous_variation_of_parameters_integr": 232, "liouville_integr": 232, "2nd_nonlinear_autonomous_conserv": 232, "2nd_nonlinear_autonomous_conserved_integr": 232, "newconst": 232, "ode_sol_simpl": 232, "trysolv": 232, "sola": 232, "solb": 232, "listofsolut": 232, "ode_problem": 232, "firstexact": 232, "exact_differential_equ": 232, "tenenbaum": 232, "dover": 232, "1963": 232, "homogeneouscoeffbest": 232, "ode_1st_homogeneous_coeff_best_integr": 232, "homogeneous_differential_equ": 232, "firstlinear": 232, "linear_differential_equ": 232, "order_equation_with_variable_coeffici": 232, "rationalriccati": 232, "atleast": 232, "riccati_equ": 232, "thieu": 232, "vo": 232, "risc_5387": 232, "phdthesisthieu": 232, "secondlinearairi": 232, "secondlinearbessel": 232, "math24": 232, "bernoulli_differential_equ": 232, "goldstein": 232, "braun": 232, "maplesoft": 232, "aspx": 232, "odeadvisor": 232, "riccatispeci": 232, "__________________": 232, "eqworld": 232, "ipmnet": 232, "ru": 232, "ode0106": 232, "ode0123": 232, "nthlinearconstantcoeffhomogen": 232, "nth_linear_constant_coeff_homogeneous_integr": 232, "nonhomogeneous_equation_with_constant_coeffici": 232, "nthlinearconstantcoeffundeterminedcoeffici": 232, "method_of_undetermined_coeffici": 232, "221": 232, "nthlinearconstantcoeffvariationofparamet": 232, "variation_of_paramet": 232, "planetmath": 232, "variationofparamet": 232, "nthlineareulereqhomogen": 232, "equidimension": 232, "nth_linear_euler_eq_homogeneous_integr": 232, "sollist": 232, "93euler_equ": 232, "bender": 232, "orszag": 232, "scientist": 232, "nthlineareulereqnonhomogeneousvariationofparamet": 232, "nthlineareulereqnonhomogeneousundeterminedcoeffici": 232, "nthalgebra": 232, "nthorderreduc": 232, "caught": 232, "fault": 232, "almostlinear": 232, "first_linear": 232, "joel": 232, "mose": 232, "stormi": 232, "decad": 232, "august": [232, 251], "558": 232, "linearcoeffici": 232, "separablereduc": 232, "liegroup": 232, "secondhypergeometr": 232, "2f1": 232, "1f1": 232, "0f1": 232, "liouvillian": 232, "pfq": 232, "chan": 232, "cheb": 232, "terrab": 232, "ode_1st_power_seri": 232, "travi": 232, "walker": 232, "ode_2nd_power_series_ordinari": 232, "lamar": 232, "seriessolut": 232, "simmon": 232, "176": 232, "ode_2nd_power_series_regular": 232, "lie_heuristic_abaco1_simpl": 232, "duart": 232, "da": 232, "mota": 232, "lie_heuristic_abaco1_product": 232, "roch": 232, "lie_heuristic_bivari": 232, "329": 232, "lie_heuristic_chi": 232, "lie_heuristic_abaco2_similar": 232, "lie_heuristic_function_sum": 232, "lie_heuristic_abaco2_unique_unknown": 232, "lie_heuristic_abaco2_unique_gener": 232, "lie_heuristic_linear": 232, "gy": 232, "bh": 232, "impract": 232, "riccati_norm": 232, "riccati_inverse_norm": 232, "riccati_reduc": 232, "construct_c": 232, "construct_d": 232, "val_inf": 232, "valuat": 232, "rational_laurent_seri": 232, "compute_m_ybar": 232, "ybar": 232, "solve_aux_eq": 232, "numa": 232, "dena": 232, "numi": 232, "deni": 232, "remove_redundant_sol": 232, "sol1": 232, "sol2": 232, "get_gen_sol_from_part_sol": 232, "part_sol": 232, "haaheim": 232, "solve_riccati": 232, "gensol": 232, "_linear_2eq_order1_type6": 232, "_linear_2eq_order1_type7": 232, "fgp": 232, "bg": 232, "linear_ode_to_matrix": 232, "odeordererror": 232, "odenonlinearerror": 232, "eqs_mat": 232, "r823": 232, "matrix_differential_equ": 232, "canonical_od": 232, "canonical_eq": 232, "canonical_system": 232, "linodesolve_typ": 232, "linodesolv": 232, "type1": 232, "type2": 232, "type3": 232, "type4": 232, "type5": 232, "type6": 232, "type_of_equ": 232, "a_t": 232, "a_non_commut": 232, "matrix_exp_jordan_form": 232, "expj": 232, "matrix_exp": 232, "defect": 232, "p_invers": 232, "r824": 232, "defective_matrix": 232, "r825": 232, "r826": 232, "jordan_normal_form": 232, "comupt": 232, "r827": 232, "r828": 232, "matrix_exponenti": 232, "antiderv": 232, "subscheck": 232, "system_info": 232, "sol_vector": 232, "sol_vector_evalu": 232, "_nonlinear_2eq_order1_type1": 232, "_nonlinear_2eq_order1_type2": 232, "_nonlinear_2eq_order1_type3": 232, "autonom": 232, "_nonlinear_2eq_order1_type4": 232, "_nonlinear_2eq_order1_type5": 232, "clairaut": 232, "envelop": 232, "_nonlinear_3eq_order1_type1": 232, "enspac": [232, 235], "sysod": 232, "sode0401": 232, "_nonlinear_3eq_order1_type2": 232, "sode0402": 232, "_nonlinear_3eq_order1_type3": 232, "sode0404": 232, "_nonlinear_3eq_order1_type4": 232, "sode0405": 232, "_nonlinear_3eq_order1_type5": 232, "sode0406": 232, "_handle_integr": 232, "gather": 232, "unhind": 232, "wolphramalpha": 232, "detool": 232, "hint_integr": 232, "alphanumer": 232, "hinder": 232, "matching_hint": 232, "matchdict": 232, "1st_homogeneous_coeff": 232, "your_hint": 232, "pde_separ": 233, "uxt": 233, "pde_separate_add": 233, "pde_separate_mul": 233, "uxi": 233, "pdsolv": 233, "solvefun": 233, "classify_pd": 233, "test_pd": 233, "pde_hintnam": 233, "ux": 233, "1st_linear_constant_coeff_homogen": 233, "checkpdesol": 233, "_preprocess": 233, "inabl": 233, "_xi_1": 233, "pde_1st_linear_constant_coeff_homogen": 233, "viktor": 233, "grigoryan": 233, "124a": 233, "pde_1st_linear_constant_coeff": 233, "substack": 233, "1st_linear_constant_coeff_integr": 233, "pde_1st_linear_variable_coeff": 233, "du": 233, "inspir": [233, 289], "pde_hint": 233, "checksol": 234, "ect": 234, "attain": [234, 266], "star": [234, 254], "052": 234, "cov": 234, "pval": 234, "xval": 234, "rsolv": 234, "solve_linear": 234, "solve_linear_system": 234, "msymbol": 234, "solve_linear_system_lu": 234, "solve_undetermined_coeff": 234, "equ": 234, "73908513321516064165531208767387340401341175890076": 234, "steep": 234, "39267e": 234, "1684e": 234, "588469032184": 234, "315": 234, "730061685774": 234, "46792545969349058": 234, "inconclus": 234, "init": 234, "dissimilar": 234, "v_0": 234, "n_m": 234, "v_m": 234, "rsolve_poli": 234, "rsolve_ratio": 234, "r829": 234, "levelt": 234, "290": [234, 264], "296": 234, "r830": 234, "r831": 234, "r832": 234, "289": 234, "alembertian": 234, "r833": 234, "r834": 234, "polysi": 234, "solve_triangul": 234, "kalkbrenn": 234, "patrizia": 234, "teo": 234, "aaecc": 234, "argand": 235, "uncount": 235, "bizarr": 235, "her": 235, "sol_f": 235, "solveset_r": 235, "solveset_complex": 235, "methodologi": [235, 286], "_solve_real_trig": 235, "invert_r": 235, "invert_complex": 235, "_solve_rad": 235, "_solve_ab": 235, "_solve_as_r": 235, "_solve_as_poly_r": 235, "_solve_as_poly_complex": 235, "_solve_as_poli": 235, "gsoc": 235, "7abb76ffed50425299b9065129ae87261668a0f7": 235, "iamit": 235, "2948": 235, "6659": 235, "7523": 235, "sibx0afl3q": 235, "9696": 235, "inftyright": 235, "nright": 235, "0right": 235, "domain_check": 235, "3z": 235, "9z": 235, "nonlinearerror": 235, "cccc": 235, "eq3": 235, "eq4": 235, "391": 235, "_solve_system": 235, "_solve_using_known_valu": 235, "_transolv": 235, "_tsolv": 235, "tsolv": 235, "outright": 235, "interf": 235, "add_typ": 235, "_is_exponenti": 235, "new_eq": 235, "_solve_exponenti": 235, "_is_class": 235, "_solve_class": 235, "_solve_expo": 235, "9x": 235, "solve_expo": 235, "log_b": 235, "_solve_logarithm": 235, "solve_log": 235, "_is_logarithm": 235, "prebuilt": 236, "finiterv": 236, "varianc": 236, "dice": 236, "continuousrv": 236, "continuousdistributionhandmad": 236, "dist": 236, "discreterv": 236, "discretedistributionhandmad": 236, "pmf": 236, "finitedistributionhandmad": 236, "discreteuniform": 236, "randomsymbol": 236, "r835": 236, "discrete_uniform_distribut": 236, "r836": 236, "discreteuniformdistribut": 236, "d6": 236, "diedistribut": 236, "toss": 236, "r837": 236, "bernoulli_distribut": 236, "r838": 236, "bernoullidistribut": 236, "unfair": 236, "r839": 236, "coin_flip": 236, "binomialdistribut": 236, "r840": 236, "binomial_distribut": 236, "r841": 236, "betabinomi": 236, "r842": 236, "r843": 236, "betabinomialdistribut": 236, "popul": 236, "marbl": 236, "r844": 236, "hypergeometric_distribut": 236, "r845": 236, "hypergeometricdistribut": 236, "700000000000000": 236, "r846": 236, "rademacher_distribut": 236, "r847": 236, "geometric_distribut": 236, "r848": 236, "geometricdistribut": 236, "r849": 236, "hermite_distribut": 236, "poisson": 236, "r850": 236, "poisson_distribut": 236, "r851": 236, "poissondistribut": 236, "r852": 236, "logarithmic_distribut": 236, "r853": 236, "logarithmicdistribut": 236, "negativebinomi": 236, "r854": 236, "negative_binomial_distribut": 236, "r855": 236, "negativebinomialdistribut": 236, "skellam": 236, "mu1": 236, "mu2": 236, "mu_1": 236, "mu_2": 236, "i_k": 236, "r856": 236, "skellam_distribut": 236, "yulesimon": 236, "yule": 236, "simon": 236, "r857": 236, "93simon_distribut": 236, "8100": 236, "r858": 236, "zeta_distribut": 236, "cdf": 236, "r859": 236, "arcsine_distribut": 236, "benini": 236, "r860": 236, "benini_distribut": 236, "r861": 236, "v8": 236, "beninidistribut": 236, "r862": 236, "beta_distribut": 236, "r863": 236, "betadistribut": 236, "betanoncentr": 236, "noncentr": 236, "r864": 236, "noncentral_beta_distribut": 236, "r865": 236, "noncentralbetadistribut": 236, "betaprim": 236, "r866": 236, "beta_prime_distribut": 236, "r867": 236, "betaprimedistribut": 236, "boundedpareto": 236, "pareto": 236, "r868": 236, "pareto_distribut": 236, "bounded_pareto_distribut": 236, "r869": 236, "cauchy_distribut": 236, "r870": 236, "cauchydistribut": 236, "r871": 236, "chi_distribut": 236, "r872": 236, "chidistribut": 236, "chinoncentr": 236, "r873": 236, "noncentral_chi_distribut": 236, "chisquar": 236, "r874": 236, "chi_squared_distribut": 236, "r875": 236, "squareddistribut": 236, "dagum": 236, "r876": 236, "dagum_distribut": 236, "davi": 236, "radiat": 236, "r877": 236, "davis_distribut": 236, "r878": 236, "davisdistribut": 236, "erlang": 236, "r879": 236, "erlang_distribut": 236, "r880": 236, "erlangdistribut": 236, "exgaussian": 236, "emg": 236, "r881": 236, "exponentially_modified_gaussian_distribut": 236, "quantil": 236, "r882": 236, "exponential_distribut": 236, "r883": 236, "exponentialdistribut": 236, "fdistribut": 236, "______________________________": 236, "r884": 236, "r885": 236, "fisherz": 236, "fisher": 236, "2d_1": 236, "d_1z": 236, "d_1e": 236, "r886": 236, "27s_z": 236, "r887": 236, "fishersz": 236, "frechet": 236, "r888": 236, "a9chet_distribut": 236, "r889": 236, "gamma_distribut": 236, "r890": 236, "gammadistribut": 236, "gammainvers": 236, "r891": 236, "gompertz": 236, "r892": 236, "gompertz_distribut": 236, "gumbel": 236, "dfrac": 236, "r893": 236, "gumbeldistribut": 236, "r894": 236, "gumbel_distribut": 236, "r895": 236, "20200628222206": 236, "mathwav": 236, "easyfit": 236, "gumbel_max": 236, "r896": 236, "20200628222212": 236, "gumbel_min": 236, "kumaraswami": 236, "r897": 236, "kumaraswamy_distribut": 236, "r898": 236, "laplace_distribut": 236, "r899": 236, "laplacedistribut": 236, "r900": 236, "a9vy_distribut": 236, "r901": 236, "levydistribut": 236, "logist": 236, "r902": 236, "logistic_distribut": 236, "r903": 236, "logisticdistribut": 236, "loglogist": 236, "unimod": 236, "r904": 236, "lognorm": 236, "r905": 236, "r906": 236, "lognormaldistribut": 236, "lomax": 236, "r907": 236, "lomax_distribut": 236, "maxwel": 236, "r908": 236, "maxwell_distribut": 236, "r909": 236, "maxwelldistribut": 236, "moyal": 236, "r910": 236, "moyaldistribut": 236, "r911": 236, "rice": 236, "dobelman": 236, "textfil": 236, "distributionshandbook": 236, "nakagami": 236, "r912": 236, "nakagami_distribut": 236, "marginal_distribut": 236, "r913": 236, "normal_distribut": 236, "r914": 236, "normaldistributionfunct": 236, "xm": 236, "x_m": 236, "r915": 236, "r916": 236, "paretodistribut": 236, "powerfunct": 236, "r917": 236, "20200204081320": 236, "power_func": 236, "quadraticu": 236, "r918": 236, "quadratic_distribut": 236, "raisedcosin": 236, "r919": 236, "raised_cosine_distribut": 236, "r920": 236, "rayleigh_distribut": 236, "r921": 236, "rayleighdistribut": 236, "r922": 236, "reciprocal_distribut": 236, "studentt": 236, "r923": 236, "student_t": 236, "r924": 236, "studentst": 236, "shiftedgompertz": 236, "r925": 236, "shifted_gompertz_distribut": 236, "r926": 236, "trapezoidal_distribut": 236, "r927": 236, "triangular_distribut": 236, "r928": 236, "triangulardistribut": 236, "r929": 236, "uniform_distribution_": 236, "28continu": 236, "r930": 236, "uniformdistribut": 236, "uniformsum": 236, "irwin": 236, "r931": 236, "uniform_sum_distribut": 236, "r932": 236, "uniformsumdistribut": 236, "vonmis": 236, "mise": 236, "i_0": 236, "r933": 236, "von_mises_distribut": 236, "r934": 236, "vonmisesdistribut": 236, "wald": 236, "gaussianinvers": 236, "r935": 236, "inverse_gaussian_distribut": 236, "r936": 236, "inversegaussiandistribut": 236, "weibul": 236, "geq0": 236, "r937": 236, "weibull_distribut": 236, "r938": 236, "weibulldistribut": 236, "wignersemicircl": 236, "semicircl": 236, "frac2": 236, "r939": 236, "wigner_semicircle_distribut": 236, "r940": 236, "wignerssemicirclelaw": 236, "jointrv": 236, "_set": 236, "multivariatenorm": 236, "noninvert": 236, "ob": 236, "r941": 236, "multivariate_normal_distribut": 236, "multivariatelaplac": 236, "r942": 236, "multivariate_laplace_distribut": 236, "generalizedmultivariateloggamma": 236, "joint_rv_typ": 236, "gd": 236, "y_3": 236, "gmvlg": 236, "generalizedmultivariateloggammaomega": 236, "r943": 236, "generalized_multivariate_log": 236, "r944": 236, "234137346_on_a_multivariate_log": 236, "gamma_distribution_and_the_use_of_the_distribution_in_the_bayesian_analysi": 236, "correl": 236, "gmvlgo": 236, "r945": 236, "r946": 236, "r947": 236, "multinomial_distribut": 236, "r948": 236, "multinomialdistribut": 236, "multivariatebeta": 236, "r949": 236, "dirichlet_distribut": 236, "r950": 236, "dirichletdistribut": 236, "multivariateewen": 236, "ewen": 236, "r951": 236, "27s_sampling_formula": 236, "r952": 236, "280311472_the_ubiquitous_ewens_sampling_formula": 236, "multivariatet": 236, "negativemultinomi": 236, "n_c": 236, "r953": 236, "negative_multinomial_distribut": 236, "r954": 236, "normalgamma": 236, "r955": 236, "discretemarkovchain": 236, "state_spac": 236, "trans_prob": 236, "markov": 236, "characteris": 236, "transitionmatrixof": 236, "transition_prob": 236, "sunni": 236, "cloudi": 236, "raini": 236, "randomindexedsymbol": 236, "409": 236, "6963328": 236, "3096": 236, "query_gt": 236, "64705": 236, "r956": 236, "markov_chain": 236, "time_markov_chain": 236, "r957": 236, "20201230182007": 236, "dartmouth": 236, "teaching_aid": 236, "books_articl": 236, "probability_book": 236, "chapter11": 236, "canonical_form": 236, "transient": 236, "p_new": 236, "new_matrix": 236, "communication_class": 236, "r958": 236, "onlinelibrari": 236, "wilei": 236, "1002": 236, "9780470316887": 236, "app1": 236, "r959": 236, "columbia": 236, "ww2040": 236, "6711f12": 236, "lect1023big": 236, "is_recurr": 236, "tarjan": [236, 254], "r960": 236, "20220207032113": 236, "4701sum07": 236, "4701": 236, "mcii": 236, "r961": 236, "ceca": 236, "clemson": 236, "shierd": 236, "shier": 236, "r962": 236, "ujcont": 236, "uj": 236, "esploro": 236, "graduat": 236, "999849107691": 236, "r963": 236, "econ": 236, "dtmc": 236, "reccur": 236, "r964": 236, "absorbing_markov_chain": 236, "r965": 236, "brandei": 236, "igusa": 236, "math56as08": 236, "math56a_s08_notes015": 236, "fixed_row_vector": 236, "stationary_distribut": 236, "fundamental_matrix": 236, "r966": 236, "lip": 236, "limiting_distribut": 236, "condition_set": 236, "wm": 236, "r967": 236, "probabilitycours": 236, "11_2_6_stationary_and_limiting_distribut": 236, "r968": 236, "20210508104430": 236, "galton": 236, "uchicago": 236, "yibi": 236, "stat317": 236, "lecture4_6up": 236, "continuousmarkovchain": 236, "gen_mat": 236, "generator_matrix": 236, "45279": 236, "58602": 236, "37933": 236, "34211": 236, "7143": 236, "4002723175": 236, "6832579186": 236, "r969": 236, "r970": 236, "biu": 236, "il": 236, "amirgi": 236, "ctmcnote": 236, "bernoulliprocess": 236, "joint_distribut": 236, "jointdistributionhandmad": 236, "r971": 236, "bernoulli_process": 236, "r972": 236, "mathc": 236, "clarku": 236, "djoyc": 236, "ma217": 236, "given_condit": 236, "poissonprocess": 236, "648": 236, "r973": 236, "11_0_0_intro": 236, "r974": 236, "poisson_point_process": 236, "wiener": 236, "brownian": 236, "scottish": 236, "botanist": 236, "r975": 236, "11_4_0_brownian_motion_wiener_process": 236, "r976": 236, "wiener_process": 236, "gammaprocess": 236, "jump": [236, 293], "472": 236, "r977": 236, "gamma_process": 236, "matrixgamma": 236, "scale_matrix": 236, "r978": 236, "matrix_gamma_distribut": 236, "wishart": 236, "r979": 236, "wishart_distribut": 236, "matrixnorm": 236, "location_matrix": 236, "scale_matrix_1": 236, "scale_matrix_2": 236, "r980": 236, "matrix_normal_distribut": 236, "compound_rv": 236, "compounddistribut": 236, "crv_type": 236, "r981": 236, "compound_probability_distribut": 236, "numsampl": 236, "evaluate_integr": 236, "r982": 236, "entropy_": 236, "28information_theori": 236, "r983": 236, "crmarsh": 236, "charles_marsh_continuous_entropi": 236, "r984": 236, "entropypost": 236, "cexpr": 236, "coskew": 236, "sigma_": 236, "r985": 236, "r986": 236, "probability_distribut": 236, "randomst": 236, "die_rol": 236, "samp": 236, "pspace": 236, "samp_list": 236, "sam": 236, "42519758": 236, "40207856": 236, "94991743": 236, "85819627": 236, "83403519": 236, "9412172": 236, "85768055": 236, "38954165": 236, "11163337": 236, "3176591": 236, "79115232": 236, "63232916": 236, "01747268": 236, "96716083": 236, "sampling_p": 236, "sampling_": 236, "factorial_mo": 236, "r987": 236, "r988": 236, "factorialmo": 236, "kurtosi": 236, "outlier": 236, "sigma_x": 236, "r989": 236, "r990": 236, "asymmetri": 236, "pearson": 236, "sampling_dens": 236, "centralmo": 236, "cmoment": 236, "expectationmatrix": 236, "randommatrixsymbol": 236, "n11": 236, "n12": 236, "n21": 236, "n22": 236, "variancematrix": 236, "crosscovariancematrix": 236, "randomdomain": 236, "singledomain": 236, "singlepspac": 236, "productdomain": 236, "productpspac": 236, "conditionaldomain": 236, "frv": 236, "finitedomain": 236, "finitepspac": 236, "crv": 236, "continuousdomain": 236, "continuouspspac": 236, "diepspac": 236, "singlefinitepspac": 236, "normalpspac": 236, "singlecontinuouspspac": 236, "frv_type": 236, "randomvari": 236, "tactic": 236, "random_symbol": 236, "rs_swap": 236, "pspace1": 236, "pspace2": 236, "immutabledensendimarrai": 237, "tomatrix": 237, "j_m": 237, "i_a": 237, "i_b": 237, "sum_k": 237, "tensorcontract": [237, 238], "arraycontract": [237, 238], "tensordiagon": [237, 238], "derive_by_arrai": 237, "sum_m": 237, "immutablesparsendimarrai": 237, "mutabledensendimarrai": 237, "mutablesparsendimarrai": 237, "array_der": [237, 238], "index_order_old": [237, 238], "index_order_new": [237, 238], "cab": 237, "array_express": 237, "contraction_ax": 237, "diagonal_ax": 237, "arraydiagon": [237, 238], "arraysymbol": 238, "convert_indexed_to_arrai": 238, "arrayadd": 238, "convert_matrix_to_arrai": 238, "convert_array_to_matrix": 238, "expr_tr": 238, "contraction_indic": 238, "diagonal_indic": 238, "adi": 238, "from_array_to_matrix": 238, "ijklm": 238, "kijml": 238, "perm1": 238, "perm2": 238, "index_method": 240, "get_contraction_structur": [240, 241], "deepest": 240, "nested_contract": 240, "get_indic": [240, 241, 242, 243], "indexconformanceexcept": 240, "______": 241, "stem": 241, "dim1": 241, "dim2": 241, "qwerti": 241, "a_ij": 241, "b_ij": 241, "syntact": 241, "a_real": 241, "c_inherit": 241, "c_explicit": 241, "unrol": 241, "tensorindextyp": [242, 243], "eps_dim": 242, "metric_nam": 242, "su": 242, "lorentz": 242, "tensor_index_typ": 242, "is_up": 242, "tensor_inde_typ": 242, "typ": 242, "tensorhead": [242, 243], "index_typ": 242, "tensorsymmetri": 242, "monoterm": 242, "_tensormanag": 242, "set_comm": 242, "asym2": 242, "fully_symmetr": 242, "tensori": [242, 243], "e_z": 242, "no_symmetri": 242, "p_x": 242, "p_y": 242, "p_z": 242, "ipos1": 242, "ipos2": 242, "icomp1": 242, "icomp2": 242, "nameless": 242, "replacement_dict": 242, "free_arg": 242, "addend": 242, "canon_bp": 242, "contract_metr": 242, "contract_al": 242, "ipo": 242, "icomp": 242, "nonrep": 242, "dum": 242, "ext_rank": 242, "is_canon_bp": 242, "get_free_indic": [242, 243], "perm2tensor": 242, "tid": 242, "sorted_compon": 242, "riemann_cyclic_replac": 242, "riemann_cycl": 242, "cadabra": 242, "multiterm": 242, "bianchi": 242, "sym2": 242, "direct_product": 242, "monotorem": 242, "tableaux": 242, "tensortyp": 242, "repetit": [242, 254], "tensormanag": 242, "comm_i2symbol": 242, "comm_symbols2i": 242, "get_comm": 242, "gcomm": 242, "ghcomm": 242, "toper": 243, "partialderiv": 243, "valenc": 243, "uncontract": 243, "compa": 243, "compb": 243, "derivand": 243, "nocache_fail": 245, "expectedexcept": 245, "exceptioninfo": 245, "abort": 245, "9999": 245, "skip_under_pyodid": 245, "pyodid": 245, "warningcl": [245, 252], "randtest": 246, "portabl": [247, 248], "pytestreport": 247, "force_color": 247, "readlin": 247, "sympydoctestfind": 247, "doctestpars": 247, "exclude_empti": 247, "sympydoctestrunn": 247, "checker": 247, "optionflag": 247, "5140": 247, "doctestrunn": 247, "clear_glob": 247, "writer": 247, "garbag": 247, "check_output": 247, "report_": 247, "sympyoutputcheck": 247, "outputcheck": 247, "stdlib": 247, "testrunn": 247, "sympytestresult": 247, "convert_to_native_path": 247, "lst": 247, "blacklist": 247, "get_sympy_dir": 247, "raise_on_deprec": 247, "deprecationwarn": [247, 252], "run_all_test": 247, "test_arg": 247, "test_kwarg": 247, "doctest_arg": 247, "doctest_kwarg": 247, "examples_arg": 247, "examples_kwarg": 247, "run_in_subprocess_with_hash_random": 247, "function_kwarg": 247, "hostedtoolcach": 247, "x64": 247, "_test": 247, "split_list": 247, "sympytestfil": 247, "module_rel": 247, "extraglob": 247, "raise_on_error": 247, "basenam": [247, 248, 249], "slate": 247, "dont_accept_true_for_1": 247, "dont_accept_blanklin": 247, "normalize_whitespac": 247, "ellipsi": [247, 255], "ignore_exception_detail": 247, "report_udiff": 247, "report_cdiff": 247, "report_ndiff": 247, "report_only_first_failur": 247, "mortem": 247, "tomfooleri": 247, "testmod": 247, "tester": 247, "fiddl": [247, 293], "timeout": 247, "keyboardinterrupt": 247, "interrupt": 247, "_basic": 247, "kw": 247, "test_equ": 247, "pdb": 247, "pipe": 247, "time_bal": 247, "tandem": 248, "matvec": 248, "codewrapp": 248, "distutil": 248, "fwrap": 248, "swig": 248, "binary_cal": 248, "22925376": 248, "25165824": 248, "_imp_": [248, 255], "filepath": 248, "cythoncodewrapp": 248, "dump_pyx": 248, "dummywrapp": 248, "f2pycodewrapp": 248, "ufuncifycodewrapp": 248, "dump_c": [248, 249], "code_gen": [248, 249], "argument_tupl": 248, "include_dir": 248, "library_dir": 248, "extra_compile_arg": 248, "extra_link_arg": 248, "symfunc": [248, 255], "funtion_nam": 248, "ndimension": 248, "f_fortran": 248, "f_cython": 248, "r991": 248, "fortran77": 249, "fortran90": 249, "julia": 249, "rust": 249, "mileston": 249, "unsurmount": 249, "pyf": 249, "inputoutput": 249, "tcc": 249, "libtcc": 249, "date": 249, "hostnam": 249, "sha1": 249, "ccodegen": 249, "preprocessor_stat": 249, "dump_h": 249, "guard": 249, "get_prototyp": 249, "codegenerror": 249, "function_prototyp": 249, "dump_cod": 249, "cname": 249, "fname": 249, "pynam": 249, "jlname": 249, "octnam": 249, "rsname": 249, "fcodegen": 249, "f90": 249, "dump_f95": 249, "get_interfac": 249, "juliacodegen": 249, "dump_jl": 249, "octavecodegen": 249, "dump_m": 249, "returnvalu": 249, "destin": 249, "local_var": 249, "result_vari": 249, "unnam": 249, "rustcodegen": 249, "dump_r": 249, "f_result": 249, "myfcn": 249, "fcn2": 249, "myfcn_result": 249, "void": 249, "get_default_datatyp": 249, "complex_allow": 249, "agnost": 249, "conserve_mpmath_dp": 250, "disable_view": 250, "python_vers": 250, "memoize_properti": 250, "propfunc": 250, "no_attrs_in_subclass": 250, "__all__": 250, "some_funct": 250, "thread": 250, "xthread": 250, "threaded_factori": 250, "use_add": 250, "multiset_partitions_taocp": 251, "visitor": 251, "pstack": 251, "lpart": 251, "topmost": 251, "partcompon": 251, "peek": [251, 293], "unpredict": 251, "list_visitor": 251, "abb": [251, 254], "factoring_visitor": 251, "multisetpartitiontravers": 251, "aocp": 251, "count_partit": 251, "127750": 251, "686": 251, "4a": 251, "factorisatio": 251, "oppenheim": 251, "numerorum": 251, "canfield": 251, "erdo": 251, "OF": 251, "yorgei": 251, "monad": 251, "persist": 251, "288716": 251, "memoiz": [251, 253, 280], "dramat": 251, "hypothet": 251, "borrow": 251, "coalesc": 251, "_rang": 251, "stretch": 251, "brain": 251, "histogram": 251, "enum_al": 251, "enum_larg": 251, "enum_rang": 251, "enum_smal": 251, "ub": 251, "catch_warn": 252, "simplefilt": 252, "dedent": [252, 257], "miscellan": [253, 280], "pkgdata": [253, 280], "notiter": 254, "binary_partit": 254, "r992": 254, "taocp": 254, "nx": 254, "common_prefix": 254, "common_suffix": 254, "unhash": 254, "r993": 254, "component_": 254, "28graph_theori": 254, "r994": 254, "27s_strongly_connected_components_algorithm": 254, "dict_merg": 254, "filter_symbol": 254, "myop": 254, "kog": 254, "informatik": 254, "hamburg": 254, "mein": 254, "python_trick": 254, "neighbor": 254, "xxxxxx": 254, "xxxx": 254, "r995": 254, "method_ring": 254, "r996": 254, "4856615": 254, "4857018": 254, "r997": 254, "20160313023044": 254, "programminggeek": 254, "r998": 254, "steinhau": 254, "93johnson": 254, "93trotter_algorithm": 254, "r999": 254, "involut": 254, "eco": 254, "vajnovszki": 254, "dmtc": 254, "generate_involut": 254, "r1000": 254, "permutationinvolut": 254, "generate_oriented_forest": 254, "forest": 254, "acycl": 254, "r1001": 254, "beyer": 254, "hedetniemi": 254, "novemb": 254, "r1002": 254, "1633833": 254, "has_dup": 254, "has_varieti": 254, "iproduct": 254, "abcbb": 254, "is_sequ": 254, "generatortyp": 254, "_iter": 254, "kbin": 254, "ordered_flag": 254, "least_rot": 254, "rotate_left": 254, "r1003": 254, "lexicographically_minimal_string_rot": 254, "minlex": 254, "acb": 254, "11010011000": 254, "00011010011": 254, "00011001011": 254, "aaa": 254, "abi": 254, "bby": 254, "abracadabra": 254, "banana": 254, "multiset_derang": 254, "uniq": 254, "1233": 254, "3312": 254, "3321": 254, "aba": 254, "baa": 254, "bead": 254, "ooo": 254, "r1004": 254, "r1005": 254, "carla": 254, "savag": 254, "terri": 254, "yih": 254, "414": 254, "430": 254, "0196": 254, "6774": 254, "90047": 254, "ordered_partit": 254, "r1006": 254, "jeromekelleh": 254, "r1007": 254, "jerom": 254, "kelleh": 254, "barri": 254, "sullivan": 254, "0909": 254, "2331v2": 254, "r1008": 254, "activest": 254, "218332": 254, "random_derang": 254, "reseed": 254, "rotate_right": 254, "roundrobin": 254, "ef": 254, "credit": 254, "sakki": 254, "sequence_partit": 254, "l_m": 254, "kleen": 254, "enricogiampieri": 254, "13131491": 254, "sequence_partitions_empti": 254, "keyfunc": 254, "subgraph": 254, "r1009": 254, "r1010": 254, "longest": 254, "r1011": 254, "unflatten": 254, "bcd": 254, "afunc": 255, "lambdastr": 255, "dummifi": 255, "use_imp": 255, "docstring_limit": 255, "custom_sin": 255, "spent": 255, "38177329": 255, "49315059": 255, "8414709848078965": 255, "enable_eager_execut": 255, "eagertensor": 255, "__class__": 255, "placehold": 255, "user_guid": 255, "runtimewarn": 255, "sin_cos_sympi": 255, "sin_co": 255, "sin_cos_numpi": 255, "38177329068": 255, "module_dictionari": 255, "getsourc": 255, "_lambdifygener": 255, "__globals__": 255, "lambdaprint": 255, "90929743": [255, 282], "assoc_recurrence_memo": 256, "base_seq": 256, "memo": 256, "pn0": 256, "recurrence_memo": 256, "specfun": 256, "__index__": 257, "sanit": 257, "99999999999999991611392": 257, "debug_decor": 257, "debugf": 257, "fillded": 257, "strline": 257, "rawlin": 257, "find_execut": 257, "pathsep": 257, "pastabl": 257, "bee": 257, "spamham": 257, "sha": 257, "egg": 257, "md5": 257, "eggsham": 257, "r1012": 257, "6116978": 257, "substr": 257, "roken": 257, "deletechar": 257, "multicharact": 257, "oldchar": 257, "newchar": 257, "acquir": 258, "getresourc": 258, "pkgname": 258, "pkgpath": 258, "dirnam": 258, "normpath": 258, "__loader__": 258, "stringio": 258, "get_resourc": 258, "ioerror": 258, "mydata": 258, "mypkgdata": 258, "jpg": 258, "get_class": 259, "lookup_view": 259, "get_mod_func": 259, "callback": 259, "timeutil": 260, "coordsysrect": 261, "coordsys3d": [261, 263, 264, 265, 267, 268, 271], "rotation_matrix": [261, 263, 266], "vector_nam": 261, "variable_nam": [261, 268], "latex_vect": 261, "pretty_vect": 261, "latex_scalar": 261, "pretty_scalar": 261, "new_system": 261, "create_new": [261, 266], "transformation_to_par": 261, "transformation_from_par": 261, "locate_new": [261, 264, 265, 266, 267, 268], "position_wrt": [261, 265, 266, 267], "orient_new": [261, 263], "axisorient": [261, 263, 266], "axis_orient": [261, 266], "bodyorient": [261, 263, 266], "body_orient": [261, 263, 266], "spaceorient": [261, 263, 266], "space_orient": [261, 263], "quaternionorient": [261, 263, 266], "q_orient": [261, 263], "orient_new_axi": [261, 264, 266], "orient_new_bodi": [261, 266], "angle1": [261, 263], "angle2": [261, 263], "angle3": [261, 263], "euler_angl": [261, 263], "orient_new_quaternion": [261, 266], "orient_new_spac": [261, 266], "coordsyrect": 261, "v_a": 261, "v_b": 261, "scalar_map": 261, "basevector": [261, 265, 266], "delop": [261, 267, 268], "r1013": 261, "r1014": 261, "basedyad": [261, 265], "second_system": 261, "deloper": [261, 269], "parametricregion": [261, 264, 271], "implicitregion": [261, 264, 271], "parabola": 261, "rational_parametr": 261, "singular_point": 261, "regular_point": 261, "reg_point": 261, "cubic_curv": 261, "calulc": 261, "hoffmann": 261, "purdu": 261, "lib": 261, "cgi": 261, "viewcont": 261, "1827": 261, "cstech": 261, "erik": 261, "hillgart": 261, "diploma": 261, "linz": 261, "universitat": 261, "risc_1355": 261, "20point": 261, "20on": 261, "20conic": 261, "parametricintegr": 261, "semispher": [261, 271], "axis_orienter1": 263, "axis_orienter2": 263, "axis_orienter3": 263, "body_orienter1": 263, "body_orienter2": 263, "body_orienter3": 263, "matrix_to_vector": 264, "system2": 264, "vector_integr": [264, 271], "essenc": 265, "vectormul": 265, "vectoradd": 265, "ofcours": 265, "vectorzero": 265, "expressli": 265, "express_coordin": [265, 266], "dyadicmul": 265, "dyadicadd": 265, "cleanest": 266, "orient_new_": 266, "basescalar": [266, 268], "oabc": 267, "oa": 267, "pq": 267, "sr": 267, "wikidel": 267, "ffield": 267, "gradient_field": 268, "instantan": 268, "directional_deriv": 268, "lame": 268, "dyadicproduct": 269, "quantifi": 270, "necesssari": 271, "param_circl": 271, "implicit_circl": 271, "obextj": 271, "solidspher": 271, "lamina": 271, "\ud835\udc45": 271, "cylind": 271, "vectorfield": 271, "hemispher": 271, "top_fac": 271, "bottom_fac": 271, "27_theorem": 271, "cone": 271, "divergence_theorem": 271, "12288": 271, "truss": 278, "str_expr": 282, "82842712474619": 282, "141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117068": 282, "0874989834394464": 282, "roundoff": 282, "14112001": 282, "7568025": 282, "95892427": 282, "2794155": 282, "6569866": 282, "98935825": 282, "41211849": 282, "0998334166468": 282, "sympy_nam": 282, "numerical_funct": 282, "rephras": 283, "oh": 283, "integration_vari": 283, "dfdx": 283, "equidistantli": 283, "d2fdx2": 283, "django": 285, "oop": 285, "crazi": 285, "abcdef": 285, "reevalu": 285, "infal": 285, "entertain": 286, "preliminari": 286, "82842712475": 287, "cass": 287, "wrote": [287, 288], "theme": 287, "expanded_expr": 287, "whet": 287, "appetit": 287, "c\u2082": [287, 294], "c\u2081": [287, 294], "\u03bd": 287, "sell": 287, "battl": 287, "confid": 287, "gigabyt": 287, "tear": 288, "stopper": 288, "uexpr": 288, "algebraic_multipl": 289, "pdp": 289, "undertest": 289, "underevalu": 289, "my_iszero": 289, "stronger": 289, "tradeoff": 289, "wonder": 289, "5b7c3e8ee5b40332abdb206c": 289, "15141": 289, "19548": 289, "10120": 289, "10279": 289, "constant_problem": 289, "possiblezeroq": 289, "20200307091449": 289, "mupad_ref": 289, "iszero": 289, "congratul": 290, "decent": 291, "austin": 291, "javascript": 292, "bvar": 292, "unnecessarili": 293, "whittl": 293, "catchal": 293, "collected_expr": 293, "cdot1": 293, "undertak": 293, "undon": 293, "cdot2": 293, "nck": 293, "pronounc": 293, "_2f_1": 293, "cfrac": 293, "list_to_frac": 293, "a\u2080": 293, "a\u2083": 293, "a\u2084": 293, "pointless": 293, "orig_frac": 293, "diffeq": 294}, "objects": {"": [[37, 0, 0, "-", "sympy"]], "sympy": [[39, 0, 0, "-", "abc"], [40, 0, 0, "-", "algebras"], [43, 0, 0, "-", "assumptions"], [46, 0, 0, "-", "calculus"], [47, 0, 0, "-", "categories"], [69, 0, 0, "-", "diffgeom"], [70, 0, 0, "-", "discrete"], [74, 0, 0, "-", "functions"], [87, 0, 0, "-", "holonomic"], [94, 0, 0, "-", "integrals"], [95, 0, 0, "-", "interactive"], [96, 0, 0, "-", "liealgebras"], [97, 0, 0, "-", "logic"], [102, 0, 0, "-", "matrices"], [109, 0, 0, "-", "parsing"], [278, 0, 0, "-", "physics"], [212, 0, 0, "-", "polys"], [234, 0, 0, "-", "solvers"], [236, 0, 0, "-", "stats"], [239, 0, 0, "-", "tensor"], [244, 0, 0, "-", "testing"], [253, 0, 0, "-", "utilities"], [269, 0, 0, "-", "vector"]], "sympy.algebras": [[40, 1, 1, "", "Quaternion"]], "sympy.algebras.Quaternion": [[40, 2, 1, "", "add"], [40, 2, 1, "", "angle"], [40, 2, 1, "", "arc_coplanar"], [40, 2, 1, "", "axis"], [40, 2, 1, "", "exp"], [40, 2, 1, "", "from_Matrix"], [40, 2, 1, "", "from_axis_angle"], [40, 2, 1, "", "from_euler"], [40, 2, 1, "", "from_rotation_matrix"], [40, 2, 1, "", "index_vector"], [40, 2, 1, "", "integrate"], [40, 2, 1, "", "inverse"], [40, 2, 1, "", "is_pure"], [40, 2, 1, "", "is_zero_quaternion"], [40, 2, 1, "", "mensor"], [40, 2, 1, "", "mul"], [40, 2, 1, "", "norm"], [40, 2, 1, "", "normalize"], [40, 2, 1, "", "orthogonal"], [40, 2, 1, "", "parallel"], [40, 2, 1, "", "pow"], [40, 2, 1, "", "pow_cos_sin"], [40, 3, 1, "", "product_matrix_left"], [40, 3, 1, "", "product_matrix_right"], [40, 2, 1, "", "rotate_point"], [40, 2, 1, "", "scalar_part"], [40, 2, 1, "", "set_norm"], [40, 2, 1, "", "to_Matrix"], [40, 2, 1, "", "to_axis_angle"], [40, 2, 1, "", "to_euler"], [40, 2, 1, "", "to_rotation_matrix"], [40, 2, 1, "", "vector_coplanar"], [40, 2, 1, "", "vector_part"]], "sympy.assumptions": [[41, 0, 0, "-", "ask"], [42, 0, 0, "-", "assume"], [44, 0, 0, "-", "predicates"], [45, 0, 0, "-", "refine"]], "sympy.assumptions.ask": [[41, 1, 1, "", "AssumptionKeys"], [41, 4, 1, "", "ask"], [41, 4, 1, "", "register_handler"], [41, 4, 1, "", "remove_handler"]], "sympy.assumptions.assume": [[42, 1, 1, "", "AppliedPredicate"], [42, 1, 1, "", "AssumptionsContext"], [42, 1, 1, "", "Predicate"], [42, 1, 1, "", "UndefinedPredicate"], [42, 4, 1, "", "assuming"]], "sympy.assumptions.assume.AppliedPredicate": [[42, 3, 1, "", "arg"], [42, 3, 1, "", "arguments"], [42, 3, 1, "", "function"]], "sympy.assumptions.assume.AssumptionsContext": [[42, 2, 1, "", "add"]], "sympy.assumptions.assume.Predicate": [[42, 2, 1, "", "eval"], [42, 5, 1, "", "handler"], [42, 2, 1, "", "register"], [42, 2, 1, "", "register_many"]], "sympy.assumptions.predicates.calculus": [[44, 1, 1, "", "FinitePredicate"], [44, 1, 1, "", "InfinitePredicate"]], "sympy.assumptions.predicates.calculus.FinitePredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.calculus.InfinitePredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.common": [[44, 1, 1, "", "CommutativePredicate"], [44, 1, 1, "", "IsTruePredicate"]], "sympy.assumptions.predicates.common.CommutativePredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.common.IsTruePredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices": [[44, 1, 1, "", "ComplexElementsPredicate"], [44, 1, 1, "", "DiagonalPredicate"], [44, 1, 1, "", "FullRankPredicate"], [44, 1, 1, "", "IntegerElementsPredicate"], [44, 1, 1, "", "InvertiblePredicate"], [44, 1, 1, "", "LowerTriangularPredicate"], [44, 1, 1, "", "NormalPredicate"], [44, 1, 1, "", "OrthogonalPredicate"], [44, 1, 1, "", "PositiveDefinitePredicate"], [44, 1, 1, "", "RealElementsPredicate"], [44, 1, 1, "", "SingularPredicate"], [44, 1, 1, "", "SquarePredicate"], [44, 1, 1, "", "SymmetricPredicate"], [44, 1, 1, "", "TriangularPredicate"], [44, 1, 1, "", "UnitTriangularPredicate"], [44, 1, 1, "", "UnitaryPredicate"], [44, 1, 1, "", "UpperTriangularPredicate"]], "sympy.assumptions.predicates.matrices.ComplexElementsPredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.DiagonalPredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.FullRankPredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.IntegerElementsPredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.InvertiblePredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.LowerTriangularPredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.NormalPredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.OrthogonalPredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.PositiveDefinitePredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.RealElementsPredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.SingularPredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.SquarePredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.SymmetricPredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.TriangularPredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.UnitTriangularPredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.UnitaryPredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.UpperTriangularPredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.ntheory": [[44, 1, 1, "", "CompositePredicate"], [44, 1, 1, "", "EvenPredicate"], [44, 1, 1, "", "OddPredicate"], [44, 1, 1, "", "PrimePredicate"]], "sympy.assumptions.predicates.ntheory.CompositePredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.ntheory.EvenPredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.ntheory.OddPredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.ntheory.PrimePredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order": [[44, 1, 1, "", "NegativePredicate"], [44, 1, 1, "", "NonNegativePredicate"], [44, 1, 1, "", "NonPositivePredicate"], [44, 1, 1, "", "NonZeroPredicate"], [44, 1, 1, "", "PositivePredicate"], [44, 1, 1, "", "ZeroPredicate"]], "sympy.assumptions.predicates.order.NegativePredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order.NonNegativePredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order.NonPositivePredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order.NonZeroPredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order.PositivePredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order.ZeroPredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets": [[44, 1, 1, "", "AlgebraicPredicate"], [44, 1, 1, "", "AntihermitianPredicate"], [44, 1, 1, "", "ComplexPredicate"], [44, 1, 1, "", "ExtendedRealPredicate"], [44, 1, 1, "", "HermitianPredicate"], [44, 1, 1, "", "ImaginaryPredicate"], [44, 1, 1, "", "IntegerPredicate"], [44, 1, 1, "", "IrrationalPredicate"], [44, 1, 1, "", "RationalPredicate"], [44, 1, 1, "", "RealPredicate"], [44, 1, 1, "", "TranscendentalPredicate"]], "sympy.assumptions.predicates.sets.AlgebraicPredicate": [[44, 5, 1, "", "AlgebraicHandler"], [44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.AntihermitianPredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.ComplexPredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.ExtendedRealPredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.HermitianPredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.ImaginaryPredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.IntegerPredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.IrrationalPredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.RationalPredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.RealPredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.TranscendentalPredicate": [[44, 5, 1, "", "handler"]], "sympy.assumptions.refine": [[45, 4, 1, "", "refine"], [45, 4, 1, "", "refine_Pow"], [45, 4, 1, "", "refine_abs"], [45, 4, 1, "", "refine_arg"], [45, 4, 1, "", "refine_atan2"], [45, 4, 1, "", "refine_im"], [45, 4, 1, "", "refine_matrixelement"], [45, 4, 1, "", "refine_re"], [45, 4, 1, "", "refine_sign"]], "sympy.calculus": [[46, 0, 0, "-", "euler"], [46, 0, 0, "-", "finite_diff"], [46, 0, 0, "-", "singularities"], [46, 0, 0, "-", "util"]], "sympy.calculus.euler": [[46, 4, 1, "", "euler_equations"]], "sympy.calculus.finite_diff": [[46, 4, 1, "", "apply_finite_diff"], [46, 4, 1, "", "differentiate_finite"], [46, 4, 1, "", "finite_diff_weights"]], "sympy.calculus.singularities": [[46, 4, 1, "", "is_decreasing"], [46, 4, 1, "", "is_increasing"], [46, 4, 1, "", "is_monotonic"], [46, 4, 1, "", "is_strictly_decreasing"], [46, 4, 1, "", "is_strictly_increasing"], [46, 4, 1, "", "monotonicity_helper"], [46, 4, 1, "", "singularities"]], "sympy.calculus.util": [[46, 4, 1, "", "continuous_domain"], [46, 4, 1, "", "function_range"], [46, 4, 1, "", "is_convex"], [46, 4, 1, "", "lcim"], [46, 4, 1, "", "maximum"], [46, 4, 1, "", "minimum"], [46, 4, 1, "", "not_empty_in"], [46, 4, 1, "", "periodicity"], [46, 4, 1, "", "stationary_points"]], "sympy.categories": [[47, 1, 1, "", "Category"], [47, 1, 1, "", "CompositeMorphism"], [47, 1, 1, "", "Diagram"], [47, 1, 1, "", "IdentityMorphism"], [47, 1, 1, "", "Morphism"], [47, 1, 1, "", "NamedMorphism"], [47, 1, 1, "", "Object"], [47, 0, 0, "-", "diagram_drawing"]], "sympy.categories.Category": [[47, 3, 1, "", "commutative_diagrams"], [47, 3, 1, "", "name"], [47, 3, 1, "", "objects"]], "sympy.categories.CompositeMorphism": [[47, 3, 1, "", "codomain"], [47, 3, 1, "", "components"], [47, 3, 1, "", "domain"], [47, 2, 1, "", "flatten"]], "sympy.categories.Diagram": [[47, 3, 1, "", "conclusions"], [47, 2, 1, "", "hom"], [47, 2, 1, "", "is_subdiagram"], [47, 3, 1, "", "objects"], [47, 3, 1, "", "premises"], [47, 2, 1, "", "subdiagram_from_objects"]], "sympy.categories.Morphism": [[47, 3, 1, "", "codomain"], [47, 2, 1, "", "compose"], [47, 3, 1, "", "domain"]], "sympy.categories.NamedMorphism": [[47, 3, 1, "", "name"]], "sympy.categories.diagram_drawing": [[47, 1, 1, "", "ArrowStringDescription"], [47, 1, 1, "", "DiagramGrid"], [47, 1, 1, "", "XypicDiagramDrawer"], [47, 4, 1, "", "preview_diagram"], [47, 4, 1, "", "xypic_draw_diagram"]], "sympy.categories.diagram_drawing.DiagramGrid": [[47, 3, 1, "", "height"], [47, 3, 1, "", "morphisms"], [47, 3, 1, "", "width"]], "sympy.categories.diagram_drawing.XypicDiagramDrawer": [[47, 2, 1, "", "draw"]], "sympy.codegen": [[48, 0, 0, "-", "algorithms"], [48, 0, 0, "-", "approximations"], [48, 0, 0, "-", "ast"], [48, 0, 0, "-", "cfunctions"], [48, 0, 0, "-", "cnodes"], [48, 0, 0, "-", "cutils"], [48, 0, 0, "-", "cxxnodes"], [48, 0, 0, "-", "fnodes"], [48, 0, 0, "-", "futils"], [48, 0, 0, "-", "matrix_nodes"], [48, 0, 0, "-", "pyutils"], [48, 0, 0, "-", "rewriting"]], "sympy.codegen.algorithms": [[48, 4, 1, "", "newtons_method"], [48, 4, 1, "", "newtons_method_function"]], "sympy.codegen.approximations": [[48, 1, 1, "", "SeriesApprox"], [48, 1, 1, "", "SumApprox"]], "sympy.codegen.ast": [[48, 1, 1, "", "Assignment"], [48, 1, 1, "", "AssignmentBase"], [48, 1, 1, "", "Attribute"], [48, 1, 1, "", "AugmentedAssignment"], [48, 1, 1, "", "BreakToken"], [48, 1, 1, "", "CodeBlock"], [48, 1, 1, "", "Comment"], [48, 1, 1, "", "ComplexType"], [48, 1, 1, "", "ContinueToken"], [48, 1, 1, "", "Declaration"], [48, 1, 1, "", "Element"], [48, 1, 1, "", "FloatBaseType"], [48, 1, 1, "", "FloatType"], [48, 1, 1, "", "For"], [48, 1, 1, "", "FunctionCall"], [48, 1, 1, "", "FunctionDefinition"], [48, 1, 1, "", "FunctionPrototype"], [48, 1, 1, "", "IntBaseType"], [48, 1, 1, "", "Node"], [48, 1, 1, "", "NoneToken"], [48, 1, 1, "", "Pointer"], [48, 1, 1, "", "Print"], [48, 1, 1, "", "QuotedString"], [48, 1, 1, "", "Raise"], [48, 1, 1, "", "Return"], [48, 1, 1, "", "RuntimeError_"], [48, 1, 1, "", "Scope"], [48, 1, 1, "", "SignedIntType"], [48, 1, 1, "", "Stream"], [48, 1, 1, "", "String"], [48, 1, 1, "", "Token"], [48, 1, 1, "", "Type"], [48, 1, 1, "", "UnsignedIntType"], [48, 1, 1, "", "Variable"], [48, 1, 1, "", "While"], [48, 4, 1, "", "aug_assign"]], "sympy.codegen.ast.CodeBlock": [[48, 2, 1, "", "cse"], [48, 2, 1, "", "topological_sort"]], "sympy.codegen.ast.FloatBaseType": [[48, 5, 1, "", "cast_nocheck"]], "sympy.codegen.ast.FloatType": [[48, 2, 1, "", "cast_nocheck"], [48, 3, 1, "", "decimal_dig"], [48, 3, 1, "", "dig"], [48, 3, 1, "", "eps"], [48, 3, 1, "", "max"], [48, 3, 1, "", "max_exponent"], [48, 3, 1, "", "min_exponent"], [48, 3, 1, "", "tiny"]], "sympy.codegen.ast.Node": [[48, 2, 1, "", "attr_params"]], "sympy.codegen.ast.Token": [[48, 2, 1, "", "kwargs"]], "sympy.codegen.ast.Type": [[48, 2, 1, "", "cast_check"], [48, 2, 1, "", "from_expr"]], "sympy.codegen.ast.Variable": [[48, 2, 1, "", "as_Declaration"], [48, 2, 1, "", "deduced"]], "sympy.codegen.cfunctions": [[48, 1, 1, "", "Cbrt"], [48, 1, 1, "", "Sqrt"], [48, 1, 1, "", "exp2"], [48, 1, 1, "", "expm1"], [48, 1, 1, "", "fma"], [48, 1, 1, "", "hypot"], [48, 1, 1, "", "log10"], [48, 1, 1, "", "log1p"], [48, 1, 1, "", "log2"]], "sympy.codegen.cfunctions.Cbrt": [[48, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.Sqrt": [[48, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.exp2": [[48, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.expm1": [[48, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.fma": [[48, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.hypot": [[48, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.log10": [[48, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.log1p": [[48, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.log2": [[48, 2, 1, "", "fdiff"]], "sympy.codegen.cnodes": [[48, 1, 1, "", "CommaOperator"], [48, 1, 1, "", "Label"], [48, 1, 1, "", "PostDecrement"], [48, 1, 1, "", "PostIncrement"], [48, 1, 1, "", "PreDecrement"], [48, 1, 1, "", "PreIncrement"], [48, 4, 1, "", "alignof"], [48, 1, 1, "", "goto"], [48, 4, 1, "", "sizeof"], [48, 1, 1, "", "struct"], [48, 1, 1, "", "union"]], "sympy.codegen.cutils": [[48, 4, 1, "", "render_as_source_file"]], "sympy.codegen.cxxnodes": [[48, 1, 1, "", "using"]], "sympy.codegen.fnodes": [[48, 1, 1, "", "ArrayConstructor"], [48, 1, 1, "", "Do"], [48, 1, 1, "", "Extent"], [48, 1, 1, "", "FortranReturn"], [48, 1, 1, "", "GoTo"], [48, 1, 1, "", "ImpliedDoLoop"], [48, 1, 1, "", "Module"], [48, 1, 1, "", "Program"], [48, 1, 1, "", "Subroutine"], [48, 1, 1, "", "SubroutineCall"], [48, 4, 1, "", "allocated"], [48, 4, 1, "", "array"], [48, 4, 1, "", "bind_C"], [48, 1, 1, "", "cmplx"], [48, 4, 1, "", "dimension"], [48, 1, 1, "", "dsign"], [48, 1, 1, "", "isign"], [48, 1, 1, "", "kind"], [48, 4, 1, "", "lbound"], [48, 1, 1, "", "literal_dp"], [48, 1, 1, "", "literal_sp"], [48, 1, 1, "", "merge"], [48, 4, 1, "", "reshape"], [48, 4, 1, "", "shape"], [48, 4, 1, "", "size"], [48, 1, 1, "", "use"], [48, 1, 1, "", "use_rename"]], "sympy.codegen.futils": [[48, 4, 1, "", "render_as_module"]], "sympy.codegen.matrix_nodes": [[48, 1, 1, "", "MatrixSolve"]], "sympy.codegen.pyutils": [[48, 4, 1, "", "render_as_module"]], "sympy.codegen.rewriting": [[48, 1, 1, "", "FuncMinusOneOptim"], [48, 1, 1, "", "Optimization"], [48, 1, 1, "", "ReplaceOptim"], [48, 4, 1, "", "create_expand_pow_optimization"], [48, 4, 1, "", "optimize"]], "sympy.codegen.rewriting.FuncMinusOneOptim": [[48, 2, 1, "", "replace_in_Add"]], "sympy.combinatorics": [[50, 0, 0, "-", "galois"], [59, 0, 0, "-", "generators"], [51, 0, 0, "-", "graycode"], [52, 0, 0, "-", "group_constructs"], [53, 0, 0, "-", "group_numbers"], [55, 0, 0, "-", "named_groups"], [56, 0, 0, "-", "partitions"], [58, 0, 0, "-", "perm_groups"], [59, 0, 0, "-", "permutations"], [60, 0, 0, "-", "polyhedron"], [61, 0, 0, "-", "prufer"], [62, 0, 0, "-", "subsets"], [63, 0, 0, "-", "tensor_can"], [64, 0, 0, "-", "testutil"], [65, 0, 0, "-", "util"]], "sympy.combinatorics.galois": [[50, 4, 1, "", "A4_in_S6"], [50, 4, 1, "", "A4xC2"], [50, 4, 1, "", "G18"], [50, 4, 1, "", "G36m"], [50, 4, 1, "", "G36p"], [50, 4, 1, "", "G72"], [50, 4, 1, "", "M20"], [50, 4, 1, "", "PGL2F5"], [50, 4, 1, "", "PSL2F5"], [50, 1, 1, "", "S1TransitiveSubgroups"], [50, 1, 1, "", "S2TransitiveSubgroups"], [50, 1, 1, "", "S3TransitiveSubgroups"], [50, 4, 1, "", "S3_in_S6"], [50, 1, 1, "", "S4TransitiveSubgroups"], [50, 4, 1, "", "S4m"], [50, 4, 1, "", "S4p"], [50, 4, 1, "", "S4xC2"], [50, 1, 1, "", "S5TransitiveSubgroups"], [50, 1, 1, "", "S6TransitiveSubgroups"], [50, 4, 1, "", "find_transitive_subgroups_of_S6"], [50, 4, 1, "", "four_group"]], "sympy.combinatorics.generators": [[59, 2, 1, "", "alternating"], [59, 2, 1, "", "cyclic"], [59, 2, 1, "", "dihedral"], [59, 2, 1, "", "symmetric"]], "sympy.combinatorics.graycode": [[51, 1, 1, "", "GrayCode"], [51, 2, 1, "", "bin_to_gray"], [51, 2, 1, "", "get_subset_from_bitstring"], [51, 2, 1, "", "gray_to_bin"], [51, 2, 1, "", "graycode_subsets"], [51, 2, 1, "", "random_bitstring"]], "sympy.combinatorics.graycode.GrayCode": [[51, 3, 1, "", "current"], [51, 2, 1, "", "generate_gray"], [51, 3, 1, "", "n"], [51, 2, 1, "", "next"], [51, 3, 1, "", "rank"], [51, 3, 1, "", "selections"], [51, 2, 1, "", "skip"], [51, 2, 1, "", "unrank"]], "sympy.combinatorics.group_constructs": [[52, 4, 1, "", "DirectProduct"]], "sympy.combinatorics.group_numbers": [[53, 4, 1, "", "is_abelian_number"], [53, 4, 1, "", "is_cyclic_number"], [53, 4, 1, "", "is_nilpotent_number"]], "sympy.combinatorics.named_groups": [[55, 4, 1, "", "AbelianGroup"], [55, 4, 1, "", "AlternatingGroup"], [55, 4, 1, "", "CyclicGroup"], [55, 4, 1, "", "DihedralGroup"], [55, 4, 1, "", "SymmetricGroup"]], "sympy.combinatorics.partitions": [[56, 1, 1, "", "IntegerPartition"], [56, 1, 1, "", "Partition"], [56, 4, 1, "", "RGS_enum"], [56, 4, 1, "", "RGS_generalized"], [56, 4, 1, "", "RGS_rank"], [56, 4, 1, "", "RGS_unrank"], [56, 4, 1, "", "random_integer_partition"]], "sympy.combinatorics.partitions.IntegerPartition": [[56, 2, 1, "", "as_dict"], [56, 2, 1, "", "as_ferrers"], [56, 3, 1, "", "conjugate"], [56, 2, 1, "", "next_lex"], [56, 2, 1, "", "prev_lex"]], "sympy.combinatorics.partitions.Partition": [[56, 3, 1, "", "RGS"], [56, 2, 1, "", "from_rgs"], [56, 3, 1, "", "partition"], [56, 3, 1, "", "rank"], [56, 2, 1, "", "sort_key"]], "sympy.combinatorics.perm_groups": [[58, 1, 1, "", "PermutationGroup"]], "sympy.combinatorics.perm_groups.PermutationGroup": [[58, 2, 1, "", "__contains__"], [58, 2, 1, "", "__mul__"], [58, 2, 1, "", "__new__"], [58, 5, 1, "", "__weakref__"], [58, 2, 1, "", "_coset_representative"], [58, 2, 1, "", "_distinct_primes_lemma"], [58, 3, 1, "", "_elements"], [58, 2, 1, "", "_eval_is_alt_sym_monte_carlo"], [58, 2, 1, "", "_eval_is_alt_sym_naive"], [58, 2, 1, "", "_p_elements_group"], [58, 2, 1, "", "_random_pr_init"], [58, 2, 1, "", "_sylow_alt_sym"], [58, 2, 1, "", "_union_find_merge"], [58, 2, 1, "", "_union_find_rep"], [58, 2, 1, "", "_verify"], [58, 2, 1, "", "abelian_invariants"], [58, 3, 1, "", "base"], [58, 2, 1, "", "baseswap"], [58, 3, 1, "", "basic_orbits"], [58, 3, 1, "", "basic_stabilizers"], [58, 3, 1, "", "basic_transversals"], [58, 2, 1, "", "center"], [58, 2, 1, "", "centralizer"], [58, 2, 1, "", "commutator"], [58, 2, 1, "", "composition_series"], [58, 2, 1, "", "conjugacy_class"], [58, 2, 1, "", "conjugacy_classes"], [58, 2, 1, "", "contains"], [58, 2, 1, "", "coset_factor"], [58, 2, 1, "", "coset_rank"], [58, 2, 1, "", "coset_table"], [58, 2, 1, "", "coset_transversal"], [58, 2, 1, "", "coset_unrank"], [58, 3, 1, "", "degree"], [58, 2, 1, "", "derived_series"], [58, 2, 1, "", "derived_subgroup"], [58, 3, 1, "", "elements"], [58, 2, 1, "", "equals"], [58, 2, 1, "", "generate"], [58, 2, 1, "", "generate_dimino"], [58, 2, 1, "", "generate_schreier_sims"], [58, 2, 1, "", "generator_product"], [58, 3, 1, "", "generators"], [58, 3, 1, "", "identity"], [58, 2, 1, "", "index"], [58, 3, 1, "", "is_abelian"], [58, 2, 1, "", "is_alt_sym"], [58, 3, 1, "", "is_alternating"], [58, 3, 1, "", "is_cyclic"], [58, 3, 1, "", "is_dihedral"], [58, 2, 1, "", "is_elementary"], [58, 3, 1, "", "is_nilpotent"], [58, 2, 1, "", "is_normal"], [58, 3, 1, "", "is_perfect"], [58, 3, 1, "", "is_polycyclic"], [58, 2, 1, "", "is_primitive"], [58, 3, 1, "", "is_solvable"], [58, 2, 1, "", "is_subgroup"], [58, 3, 1, "", "is_symmetric"], [58, 2, 1, "", "is_transitive"], [58, 3, 1, "", "is_trivial"], [58, 2, 1, "", "lower_central_series"], [58, 2, 1, "", "make_perm"], [58, 3, 1, "", "max_div"], [58, 2, 1, "", "minimal_block"], [58, 2, 1, "", "minimal_blocks"], [58, 2, 1, "", "normal_closure"], [58, 2, 1, "", "orbit"], [58, 2, 1, "", "orbit_rep"], [58, 2, 1, "", "orbit_transversal"], [58, 2, 1, "", "orbits"], [58, 2, 1, "", "order"], [58, 2, 1, "", "pointwise_stabilizer"], [58, 2, 1, "", "polycyclic_group"], [58, 2, 1, "", "presentation"], [58, 2, 1, "", "random"], [58, 2, 1, "", "random_pr"], [58, 2, 1, "", "random_stab"], [58, 2, 1, "", "schreier_sims"], [58, 2, 1, "", "schreier_sims_incremental"], [58, 2, 1, "", "schreier_sims_random"], [58, 2, 1, "", "schreier_vector"], [58, 2, 1, "", "stabilizer"], [58, 3, 1, "", "strong_gens"], [58, 2, 1, "", "strong_presentation"], [58, 2, 1, "", "subgroup"], [58, 2, 1, "", "subgroup_search"], [58, 2, 1, "", "sylow_subgroup"], [58, 3, 1, "", "transitivity_degree"]], "sympy.combinatorics.permutations": [[59, 1, 1, "", "Cycle"], [59, 1, 1, "", "Permutation"], [59, 4, 1, "", "_af_parity"]], "sympy.combinatorics.permutations.Cycle": [[59, 2, 1, "", "list"]], "sympy.combinatorics.permutations.Permutation": [[59, 2, 1, "", "apply"], [59, 3, 1, "", "array_form"], [59, 2, 1, "", "ascents"], [59, 2, 1, "", "atoms"], [59, 3, 1, "", "cardinality"], [59, 2, 1, "", "commutator"], [59, 2, 1, "", "commutes_with"], [59, 3, 1, "", "cycle_structure"], [59, 3, 1, "", "cycles"], [59, 3, 1, "", "cyclic_form"], [59, 2, 1, "", "descents"], [59, 2, 1, "", "from_inversion_vector"], [59, 2, 1, "", "from_sequence"], [59, 3, 1, "", "full_cyclic_form"], [59, 2, 1, "", "get_adjacency_distance"], [59, 2, 1, "", "get_adjacency_matrix"], [59, 2, 1, "", "get_positional_distance"], [59, 2, 1, "", "get_precedence_distance"], [59, 2, 1, "", "get_precedence_matrix"], [59, 2, 1, "", "index"], [59, 2, 1, "", "inversion_vector"], [59, 2, 1, "", "inversions"], [59, 3, 1, "", "is_Empty"], [59, 3, 1, "", "is_Identity"], [59, 3, 1, "", "is_Singleton"], [59, 3, 1, "", "is_even"], [59, 3, 1, "", "is_odd"], [59, 2, 1, "", "josephus"], [59, 2, 1, "", "length"], [59, 2, 1, "", "list"], [59, 2, 1, "", "max"], [59, 2, 1, "", "min"], [59, 2, 1, "", "mul_inv"], [59, 2, 1, "", "next_lex"], [59, 2, 1, "", "next_nonlex"], [59, 2, 1, "", "next_trotterjohnson"], [59, 2, 1, "", "order"], [59, 2, 1, "", "parity"], [59, 2, 1, "", "random"], [59, 2, 1, "", "rank"], [59, 2, 1, "", "rank_nonlex"], [59, 2, 1, "", "rank_trotterjohnson"], [59, 2, 1, "", "resize"], [59, 2, 1, "", "rmul"], [59, 2, 1, "", "rmul_with_af"], [59, 2, 1, "", "runs"], [59, 2, 1, "", "signature"], [59, 3, 1, "", "size"], [59, 2, 1, "", "support"], [59, 2, 1, "", "transpositions"], [59, 2, 1, "", "unrank_lex"], [59, 2, 1, "", "unrank_nonlex"], [59, 2, 1, "", "unrank_trotterjohnson"]], "sympy.combinatorics.polyhedron": [[60, 1, 1, "", "Polyhedron"]], "sympy.combinatorics.polyhedron.Polyhedron": [[60, 3, 1, "", "array_form"], [60, 3, 1, "", "corners"], [60, 3, 1, "", "cyclic_form"], [60, 3, 1, "", "edges"], [60, 3, 1, "", "faces"], [60, 3, 1, "", "pgroup"], [60, 2, 1, "", "reset"], [60, 2, 1, "", "rotate"], [60, 3, 1, "", "size"], [60, 3, 1, "", "vertices"]], "sympy.combinatorics.prufer": [[61, 1, 1, "", "Prufer"]], "sympy.combinatorics.prufer.Prufer": [[61, 2, 1, "", "edges"], [61, 2, 1, "", "next"], [61, 3, 1, "", "nodes"], [61, 2, 1, "", "prev"], [61, 2, 1, "", "prufer_rank"], [61, 3, 1, "", "prufer_repr"], [61, 3, 1, "", "rank"], [61, 3, 1, "", "size"], [61, 2, 1, "", "to_prufer"], [61, 2, 1, "", "to_tree"], [61, 3, 1, "", "tree_repr"], [61, 2, 1, "", "unrank"]], "sympy.combinatorics.subsets": [[62, 1, 1, "", "Subset"], [62, 2, 1, "", "ksubsets"]], "sympy.combinatorics.subsets.Subset": [[62, 2, 1, "", "bitlist_from_subset"], [62, 3, 1, "", "cardinality"], [62, 2, 1, "", "iterate_binary"], [62, 2, 1, "", "iterate_graycode"], [62, 2, 1, "", "next_binary"], [62, 2, 1, "", "next_gray"], [62, 2, 1, "", "next_lexicographic"], [62, 2, 1, "", "prev_binary"], [62, 2, 1, "", "prev_gray"], [62, 2, 1, "", "prev_lexicographic"], [62, 3, 1, "", "rank_binary"], [62, 3, 1, "", "rank_gray"], [62, 3, 1, "", "rank_lexicographic"], [62, 3, 1, "", "size"], [62, 3, 1, "", "subset"], [62, 2, 1, "", "subset_from_bitlist"], [62, 2, 1, "", "subset_indices"], [62, 3, 1, "", "superset"], [62, 3, 1, "", "superset_size"], [62, 2, 1, "", "unrank_binary"], [62, 2, 1, "", "unrank_gray"]], "sympy.combinatorics.tensor_can": [[63, 4, 1, "", "bsgs_direct_product"], [63, 4, 1, "", "canonicalize"], [63, 4, 1, "", "double_coset_can_rep"], [63, 4, 1, "", "get_symmetric_group_sgs"]], "sympy.combinatorics.testutil": [[64, 4, 1, "", "_cmp_perm_lists"], [64, 4, 1, "", "_naive_list_centralizer"], [64, 4, 1, "", "_verify_bsgs"], [64, 4, 1, "", "_verify_centralizer"], [64, 4, 1, "", "_verify_normal_closure"]], "sympy.combinatorics.util": [[65, 4, 1, "", "_base_ordering"], [65, 4, 1, "", "_check_cycles_alt_sym"], [65, 4, 1, "", "_distribute_gens_by_base"], [65, 4, 1, "", "_handle_precomputed_bsgs"], [65, 4, 1, "", "_orbits_transversals_from_bsgs"], [65, 4, 1, "", "_remove_gens"], [65, 4, 1, "", "_strip"], [65, 4, 1, "", "_strong_gens_from_distr"]], "sympy.concrete.expr_with_intlimits": [[66, 1, 1, "", "ExprWithIntLimits"]], "sympy.concrete.expr_with_intlimits.ExprWithIntLimits": [[66, 2, 1, "", "change_index"], [66, 3, 1, "", "has_empty_sequence"], [66, 2, 1, "", "index"], [66, 2, 1, "", "reorder"], [66, 2, 1, "", "reorder_limit"]], "sympy.concrete.expr_with_limits": [[94, 1, 1, "", "ExprWithLimits"]], "sympy.concrete.expr_with_limits.ExprWithLimits": [[94, 3, 1, "", "bound_symbols"], [94, 3, 1, "", "free_symbols"], [94, 3, 1, "", "function"], [94, 3, 1, "", "has_finite_limits"], [94, 3, 1, "", "has_reversed_limits"], [94, 3, 1, "", "is_number"], [94, 3, 1, "", "limits"], [94, 3, 1, "", "variables"]], "sympy.concrete.gosper": [[66, 4, 1, "", "gosper_normal"], [66, 4, 1, "", "gosper_sum"], [66, 4, 1, "", "gosper_term"]], "sympy.concrete.products": [[66, 1, 1, "", "Product"], [66, 4, 1, "", "product"]], "sympy.concrete.products.Product": [[66, 2, 1, "", "is_convergent"], [66, 2, 1, "", "reverse_order"]], "sympy.concrete.summations": [[66, 1, 1, "", "Sum"], [66, 4, 1, "", "summation"]], "sympy.concrete.summations.Sum": [[66, 2, 1, "", "euler_maclaurin"], [66, 2, 1, "", "eval_zeta_function"], [66, 2, 1, "", "is_absolutely_convergent"], [66, 2, 1, "", "is_convergent"], [66, 2, 1, "", "reverse_order"]], "sympy.core": [[67, 0, 0, "-", "add"], [67, 0, 0, "-", "assumptions"], [67, 0, 0, "-", "basic"], [67, 0, 0, "-", "cache"], [67, 0, 0, "-", "containers"], [67, 0, 0, "-", "evalf"], [67, 0, 0, "-", "expr"], [67, 0, 0, "-", "exprtools"], [67, 0, 0, "-", "function"], [67, 0, 0, "-", "kind"], [67, 0, 0, "-", "mod"], [67, 0, 0, "-", "mul"], [67, 0, 0, "-", "multidimensional"], [67, 0, 0, "-", "numbers"], [67, 0, 0, "-", "power"], [67, 0, 0, "-", "random"], [67, 0, 0, "-", "relational"], [67, 0, 0, "-", "singleton"], [67, 0, 0, "-", "symbol"], [67, 0, 0, "-", "sympify"], [67, 0, 0, "-", "traversal"]], "sympy.core.add": [[67, 1, 1, "", "Add"]], "sympy.core.add.Add": [[67, 2, 1, "", "as_coeff_Add"], [67, 2, 1, "", "as_coeff_add"], [67, 2, 1, "", "as_content_primitive"], [67, 2, 1, "", "as_numer_denom"], [67, 2, 1, "", "as_real_imag"], [67, 2, 1, "", "as_two_terms"], [67, 2, 1, "", "extract_leading_order"], [67, 2, 1, "", "flatten"], [67, 2, 1, "", "primitive"]], "sympy.core.basic": [[67, 1, 1, "", "Atom"], [67, 1, 1, "", "Basic"]], "sympy.core.basic.Basic": [[67, 3, 1, "", "args"], [67, 2, 1, "", "as_content_primitive"], [67, 2, 1, "", "as_dummy"], [67, 3, 1, "", "assumptions0"], [67, 2, 1, "", "atoms"], [67, 3, 1, "", "canonical_variables"], [67, 2, 1, "", "class_key"], [67, 2, 1, "", "compare"], [67, 2, 1, "", "count"], [67, 2, 1, "", "count_ops"], [67, 2, 1, "", "doit"], [67, 2, 1, "", "dummy_eq"], [67, 2, 1, "", "find"], [67, 3, 1, "", "free_symbols"], [67, 2, 1, "", "fromiter"], [67, 3, 1, "", "func"], [67, 2, 1, "", "has"], [67, 2, 1, "", "has_free"], [67, 2, 1, "", "has_xfree"], [67, 3, 1, "", "is_comparable"], [67, 2, 1, "", "match"], [67, 2, 1, "", "matches"], [67, 2, 1, "", "rcall"], [67, 2, 1, "", "refine"], [67, 2, 1, "", "replace"], [67, 2, 1, "", "rewrite"], [67, 2, 1, "", "simplify"], [67, 2, 1, "", "sort_key"], [67, 2, 1, "", "subs"], [67, 2, 1, "", "xreplace"]], "sympy.core.cache": [[67, 4, 1, "", "__cacheit"]], "sympy.core.containers": [[67, 1, 1, "", "Dict"], [67, 1, 1, "", "Tuple"], [67, 1, 1, "", "TupleKind"]], "sympy.core.containers.Dict": [[67, 2, 1, "", "get"], [67, 2, 1, "", "items"], [67, 2, 1, "", "keys"], [67, 2, 1, "", "values"]], "sympy.core.containers.Tuple": [[67, 2, 1, "", "index"], [67, 3, 1, "", "kind"], [67, 2, 1, "", "tuple_count"]], "sympy.core.evalf": [[67, 1, 1, "", "EvalfMixin"], [67, 4, 1, "", "N"], [67, 1, 1, "", "PrecisionExhausted"]], "sympy.core.evalf.EvalfMixin": [[67, 2, 1, "", "evalf"], [67, 2, 1, "", "n"]], "sympy.core.expr": [[67, 1, 1, "", "AtomicExpr"], [67, 1, 1, "", "Expr"], [67, 1, 1, "", "UnevaluatedExpr"]], "sympy.core.expr.Expr": [[67, 2, 1, "", "apart"], [67, 2, 1, "", "args_cnc"], [67, 2, 1, "", "as_coeff_Add"], [67, 2, 1, "", "as_coeff_Mul"], [67, 2, 1, "", "as_coeff_add"], [67, 2, 1, "", "as_coeff_exponent"], [67, 2, 1, "", "as_coeff_mul"], [67, 2, 1, "", "as_coefficient"], [67, 2, 1, "", "as_coefficients_dict"], [67, 2, 1, "", "as_content_primitive"], [67, 2, 1, "", "as_expr"], [67, 2, 1, "", "as_independent"], [67, 2, 1, "", "as_leading_term"], [67, 2, 1, "", "as_numer_denom"], [67, 2, 1, "", "as_ordered_factors"], [67, 2, 1, "", "as_ordered_terms"], [67, 2, 1, "", "as_poly"], [67, 2, 1, "", "as_powers_dict"], [67, 2, 1, "", "as_real_imag"], [67, 2, 1, "", "as_terms"], [67, 2, 1, "", "aseries"], [67, 2, 1, "", "cancel"], [67, 2, 1, "", "coeff"], [67, 2, 1, "", "collect"], [67, 2, 1, "", "combsimp"], [67, 2, 1, "", "compute_leading_term"], [67, 2, 1, "", "conjugate"], [67, 2, 1, "", "could_extract_minus_sign"], [67, 2, 1, "", "equals"], [67, 2, 1, "", "expand"], [67, 3, 1, "", "expr_free_symbols"], [67, 2, 1, "", "extract_additively"], [67, 2, 1, "", "extract_branch_factor"], [67, 2, 1, "", "extract_multiplicatively"], [67, 2, 1, "", "factor"], [67, 2, 1, "", "fourier_series"], [67, 2, 1, "", "fps"], [67, 2, 1, "", "gammasimp"], [67, 2, 1, "", "getO"], [67, 2, 1, "", "getn"], [67, 2, 1, "", "integrate"], [67, 2, 1, "", "invert"], [67, 2, 1, "", "is_algebraic_expr"], [67, 2, 1, "", "is_constant"], [67, 2, 1, "", "is_meromorphic"], [67, 3, 1, "", "is_number"], [67, 2, 1, "", "is_polynomial"], [67, 2, 1, "", "is_rational_function"], [67, 2, 1, "", "leadterm"], [67, 2, 1, "", "limit"], [67, 2, 1, "", "lseries"], [67, 2, 1, "", "normal"], [67, 2, 1, "", "nseries"], [67, 2, 1, "", "nsimplify"], [67, 2, 1, "", "powsimp"], [67, 2, 1, "", "primitive"], [67, 2, 1, "", "radsimp"], [67, 2, 1, "", "ratsimp"], [67, 2, 1, "", "removeO"], [67, 2, 1, "", "round"], [67, 2, 1, "", "separate"], [67, 2, 1, "", "series"], [67, 2, 1, "", "taylor_term"], [67, 2, 1, "", "together"], [67, 2, 1, "", "trigsimp"]], "sympy.core.exprtools": [[67, 4, 1, "", "factor_terms"], [67, 4, 1, "", "gcd_terms"]], "sympy.core.function": [[67, 1, 1, "", "Derivative"], [67, 1, 1, "", "Function"], [67, 1, 1, "", "FunctionClass"], [67, 1, 1, "", "Lambda"], [67, 1, 1, "", "PoleError"], [67, 1, 1, "", "Subs"], [67, 1, 1, "", "WildFunction"], [67, 4, 1, "", "count_ops"], [67, 4, 1, "", "diff"], [67, 4, 1, "", "expand"], [67, 4, 1, "", "expand_complex"], [67, 4, 1, "", "expand_func"], [67, 4, 1, "", "expand_log"], [67, 4, 1, "", "expand_mul"], [67, 4, 1, "", "expand_multinomial"], [67, 4, 1, "", "expand_power_base"], [67, 4, 1, "", "expand_power_exp"], [67, 4, 1, "", "expand_trig"], [67, 4, 1, "", "nfloat"]], "sympy.core.function.Derivative": [[67, 3, 1, "", "_diff_wrt"], [67, 2, 1, "", "_sort_variable_count"], [67, 2, 1, "", "as_finite_difference"], [67, 2, 1, "", "doit_numerically"]], "sympy.core.function.Function": [[67, 2, 1, "", "as_base_exp"], [67, 2, 1, "", "fdiff"], [67, 2, 1, "", "is_singular"]], "sympy.core.function.FunctionClass": [[67, 3, 1, "", "nargs"]], "sympy.core.function.Lambda": [[67, 3, 1, "", "bound_symbols"], [67, 3, 1, "", "expr"], [67, 3, 1, "", "is_identity"], [67, 3, 1, "", "signature"], [67, 3, 1, "", "variables"]], "sympy.core.function.Subs": [[67, 3, 1, "", "bound_symbols"], [67, 3, 1, "", "expr"], [67, 3, 1, "", "point"], [67, 3, 1, "", "variables"]], "sympy.core.kind": [[67, 5, 1, "", "BooleanKind"], [67, 1, 1, "", "Kind"], [67, 5, 1, "", "NumberKind"], [67, 5, 1, "", "UndefinedKind"]], "sympy.core.mod": [[67, 1, 1, "", "Mod"]], "sympy.core.mul": [[67, 1, 1, "", "Mul"], [67, 4, 1, "", "prod"]], "sympy.core.mul.Mul": [[67, 2, 1, "", "as_coeff_Mul"], [67, 2, 1, "", "as_content_primitive"], [67, 2, 1, "", "as_ordered_factors"], [67, 2, 1, "", "as_two_terms"], [67, 2, 1, "", "flatten"]], "sympy.core.multidimensional": [[67, 1, 1, "", "vectorize"]], "sympy.core.numbers": [[67, 1, 1, "", "AlgebraicNumber"], [67, 1, 1, "", "Catalan"], [67, 1, 1, "", "ComplexInfinity"], [67, 1, 1, "", "EulerGamma"], [67, 1, 1, "", "Exp1"], [67, 1, 1, "", "Float"], [67, 1, 1, "", "GoldenRatio"], [67, 1, 1, "", "Half"], [67, 1, 1, "", "ImaginaryUnit"], [67, 1, 1, "", "Infinity"], [67, 1, 1, "", "Integer"], [67, 1, 1, "", "NaN"], [67, 1, 1, "", "NegativeInfinity"], [67, 1, 1, "", "NegativeOne"], [67, 1, 1, "", "Number"], [67, 1, 1, "", "NumberSymbol"], [67, 1, 1, "", "One"], [67, 1, 1, "", "Pi"], [67, 1, 1, "", "Rational"], [67, 5, 1, "", "RealNumber"], [67, 1, 1, "", "TribonacciConstant"], [67, 1, 1, "", "Zero"], [67, 4, 1, "", "equal_valued"], [67, 4, 1, "", "igcd"], [67, 4, 1, "", "ilcm"], [67, 4, 1, "", "mod_inverse"], [67, 4, 1, "", "seterr"]], "sympy.core.numbers.AlgebraicNumber": [[67, 2, 1, "", "__new__"], [67, 2, 1, "", "as_expr"], [67, 2, 1, "", "as_poly"], [67, 2, 1, "", "coeffs"], [67, 2, 1, "", "field_element"], [67, 3, 1, "", "is_aliased"], [67, 3, 1, "", "is_primitive_element"], [67, 2, 1, "", "minpoly_of_element"], [67, 2, 1, "", "native_coeffs"], [67, 2, 1, "", "primitive_element"], [67, 2, 1, "", "to_algebraic_integer"], [67, 2, 1, "", "to_primitive_element"], [67, 2, 1, "", "to_root"]], "sympy.core.numbers.Number": [[67, 2, 1, "", "as_coeff_Add"], [67, 2, 1, "", "as_coeff_Mul"], [67, 2, 1, "", "cofactors"], [67, 2, 1, "", "gcd"], [67, 2, 1, "", "lcm"]], "sympy.core.numbers.NumberSymbol": [[67, 2, 1, "", "approximation"]], "sympy.core.numbers.Rational": [[67, 2, 1, "", "as_coeff_Add"], [67, 2, 1, "", "as_coeff_Mul"], [67, 2, 1, "", "as_content_primitive"], [67, 2, 1, "", "factors"], [67, 2, 1, "", "limit_denominator"]], "sympy.core.power": [[67, 1, 1, "", "Pow"], [67, 4, 1, "", "integer_log"], [67, 4, 1, "", "integer_nthroot"]], "sympy.core.power.Pow": [[67, 2, 1, "", "as_base_exp"], [67, 2, 1, "", "as_content_primitive"]], "sympy.core.random": [[67, 4, 1, "", "_randint"], [67, 4, 1, "", "_randrange"], [67, 4, 1, "", "random_complex_number"], [67, 4, 1, "", "test_derivative_numerically"], [67, 4, 1, "", "verify_numerically"]], "sympy.core.relational": [[67, 5, 1, "", "Eq"], [67, 1, 1, "", "Equality"], [67, 5, 1, "", "Ge"], [67, 1, 1, "", "GreaterThan"], [67, 5, 1, "", "Gt"], [67, 5, 1, "", "Le"], [67, 1, 1, "", "LessThan"], [67, 5, 1, "", "Lt"], [67, 5, 1, "", "Ne"], [67, 5, 1, "", "Rel"], [67, 1, 1, "", "Relational"], [67, 1, 1, "", "StrictGreaterThan"], [67, 1, 1, "", "StrictLessThan"], [67, 1, 1, "", "Unequality"]], "sympy.core.relational.Equality": [[67, 2, 1, "", "as_poly"], [67, 2, 1, "", "integrate"]], "sympy.core.relational.Relational": [[67, 3, 1, "", "canonical"], [67, 2, 1, "", "equals"], [67, 3, 1, "", "lhs"], [67, 3, 1, "", "negated"], [67, 3, 1, "", "reversed"], [67, 3, 1, "", "reversedsign"], [67, 3, 1, "", "rhs"], [67, 3, 1, "", "strict"], [67, 3, 1, "", "weak"]], "sympy.core.singleton": [[67, 1, 1, "", "Singleton"], [67, 1, 1, "", "SingletonRegistry"]], "sympy.core.sorting": [[67, 4, 1, "", "default_sort_key"], [67, 4, 1, "", "ordered"]], "sympy.core.symbol": [[67, 1, 1, "", "Dummy"], [67, 1, 1, "", "Symbol"], [67, 1, 1, "", "Wild"], [67, 4, 1, "", "symbols"], [67, 4, 1, "", "var"]], "sympy.core.sympify": [[67, 4, 1, "", "sympify"]], "sympy.core.traversal": [[67, 4, 1, "", "bottom_up"], [67, 4, 1, "", "postorder_traversal"], [67, 4, 1, "", "preorder_traversal"], [67, 4, 1, "", "use"], [67, 4, 1, "", "walk"]], "sympy.crypto": [[68, 0, 0, "-", "crypto"]], "sympy.crypto.crypto": [[68, 4, 1, "", "AZ"], [68, 4, 1, "", "bifid5_square"], [68, 4, 1, "", "bifid6_square"], [68, 4, 1, "", "check_and_join"], [68, 4, 1, "", "cycle_list"], [68, 4, 1, "", "decipher_affine"], [68, 4, 1, "", "decipher_atbash"], [68, 4, 1, "", "decipher_bifid"], [68, 4, 1, "", "decipher_bifid5"], [68, 4, 1, "", "decipher_bifid6"], [68, 4, 1, "", "decipher_elgamal"], [68, 4, 1, "", "decipher_gm"], [68, 4, 1, "", "decipher_hill"], [68, 4, 1, "", "decipher_kid_rsa"], [68, 4, 1, "", "decipher_railfence"], [68, 4, 1, "", "decipher_rot13"], [68, 4, 1, "", "decipher_rsa"], [68, 4, 1, "", "decipher_shift"], [68, 4, 1, "", "decipher_vigenere"], [68, 4, 1, "", "decode_morse"], [68, 4, 1, "", "dh_private_key"], [68, 4, 1, "", "dh_public_key"], [68, 4, 1, "", "dh_shared_key"], [68, 4, 1, "", "elgamal_private_key"], [68, 4, 1, "", "elgamal_public_key"], [68, 4, 1, "", "encipher_affine"], [68, 4, 1, "", "encipher_atbash"], [68, 4, 1, "", "encipher_bifid"], [68, 4, 1, "", "encipher_bifid5"], [68, 4, 1, "", "encipher_bifid6"], [68, 4, 1, "", "encipher_elgamal"], [68, 4, 1, "", "encipher_gm"], [68, 4, 1, "", "encipher_hill"], [68, 4, 1, "", "encipher_kid_rsa"], [68, 4, 1, "", "encipher_railfence"], [68, 4, 1, "", "encipher_rot13"], [68, 4, 1, "", "encipher_rsa"], [68, 4, 1, "", "encipher_shift"], [68, 4, 1, "", "encipher_substitution"], [68, 4, 1, "", "encipher_vigenere"], [68, 4, 1, "", "encode_morse"], [68, 4, 1, "", "gm_private_key"], [68, 4, 1, "", "gm_public_key"], [68, 4, 1, "", "kid_rsa_private_key"], [68, 4, 1, "", "kid_rsa_public_key"], [68, 4, 1, "", "lfsr_autocorrelation"], [68, 4, 1, "", "lfsr_connection_polynomial"], [68, 4, 1, "", "lfsr_sequence"], [68, 4, 1, "", "padded_key"], [68, 4, 1, "", "rsa_private_key"], [68, 4, 1, "", "rsa_public_key"]], "sympy.diffgeom": [[69, 1, 1, "", "BaseCovarDerivativeOp"], [69, 1, 1, "", "BaseScalarField"], [69, 1, 1, "", "BaseVectorField"], [69, 1, 1, "", "Commutator"], [69, 1, 1, "", "CoordSystem"], [69, 1, 1, "", "CoordinateSymbol"], [69, 1, 1, "", "CovarDerivativeOp"], [69, 1, 1, "", "Differential"], [69, 1, 1, "", "LieDerivative"], [69, 1, 1, "", "Manifold"], [69, 1, 1, "", "Patch"], [69, 1, 1, "", "Point"], [69, 1, 1, "", "TensorProduct"], [69, 1, 1, "", "WedgeProduct"], [69, 4, 1, "", "intcurve_diffequ"], [69, 4, 1, "", "intcurve_series"], [69, 4, 1, "", "metric_to_Christoffel_1st"], [69, 4, 1, "", "metric_to_Christoffel_2nd"], [69, 4, 1, "", "metric_to_Ricci_components"], [69, 4, 1, "", "metric_to_Riemann_components"], [69, 4, 1, "", "twoform_to_matrix"], [69, 4, 1, "", "vectors_in_basis"]], "sympy.diffgeom.CoordSystem": [[69, 2, 1, "", "base_oneform"], [69, 2, 1, "", "base_oneforms"], [69, 2, 1, "", "base_scalar"], [69, 2, 1, "", "base_scalars"], [69, 2, 1, "", "base_vector"], [69, 2, 1, "", "base_vectors"], [69, 2, 1, "", "coord_function"], [69, 2, 1, "", "coord_functions"], [69, 2, 1, "", "coord_tuple_transform_to"], [69, 2, 1, "", "jacobian"], [69, 2, 1, "", "jacobian_determinant"], [69, 2, 1, "", "jacobian_matrix"], [69, 2, 1, "", "point"], [69, 2, 1, "", "point_to_coords"], [69, 2, 1, "", "transform"], [69, 2, 1, "", "transformation"]], "sympy.diffgeom.Point": [[69, 2, 1, "", "coords"]], "sympy.discrete": [[70, 0, 0, "-", "convolutions"], [70, 0, 0, "-", "transforms"]], "sympy.discrete.convolutions": [[70, 4, 1, "", "convolution"], [70, 4, 1, "", "convolution_fft"], [70, 4, 1, "", "convolution_fwht"], [70, 4, 1, "", "convolution_ntt"], [70, 4, 1, "", "convolution_subset"], [70, 4, 1, "", "covering_product"], [70, 4, 1, "", "intersecting_product"]], "sympy.discrete.transforms": [[70, 4, 1, "", "fft"], [70, 4, 1, "", "fwht"], [70, 4, 1, "", "ifft"], [70, 4, 1, "", "ifwht"], [70, 4, 1, "", "intt"], [70, 4, 1, "", "inverse_mobius_transform"], [70, 4, 1, "", "mobius_transform"], [70, 4, 1, "", "ntt"]], "sympy.external.pythonmpq": [[207, 1, 1, "", "PythonMPQ"]], "sympy.functions.combinatorial.factorials": [[72, 1, 1, "", "FallingFactorial"], [72, 1, 1, "", "MultiFactorial"], [72, 1, 1, "", "RisingFactorial"], [72, 1, 1, "", "binomial"], [72, 1, 1, "", "factorial"], [72, 1, 1, "", "factorial2"], [72, 1, 1, "", "subfactorial"]], "sympy.functions.combinatorial.numbers": [[72, 1, 1, "", "andre"], [72, 1, 1, "", "bell"], [72, 1, 1, "", "bernoulli"], [72, 1, 1, "", "catalan"], [72, 1, 1, "", "euler"], [72, 1, 1, "", "fibonacci"], [72, 1, 1, "", "genocchi"], [72, 1, 1, "", "harmonic"], [72, 1, 1, "", "lucas"], [72, 4, 1, "", "nC"], [72, 4, 1, "", "nP"], [72, 4, 1, "", "nT"], [72, 1, 1, "", "partition"], [72, 4, 1, "", "stirling"], [72, 1, 1, "", "tribonacci"]], "sympy.functions.elementary.complexes": [[73, 1, 1, "", "Abs"], [73, 1, 1, "", "arg"], [73, 1, 1, "", "conjugate"], [73, 1, 1, "", "im"], [73, 1, 1, "", "periodic_argument"], [73, 1, 1, "", "polar_lift"], [73, 1, 1, "", "principal_branch"], [73, 1, 1, "", "re"], [73, 1, 1, "", "sign"]], "sympy.functions.elementary.complexes.Abs": [[73, 2, 1, "", "fdiff"]], "sympy.functions.elementary.complexes.im": [[73, 2, 1, "", "as_real_imag"]], "sympy.functions.elementary.complexes.re": [[73, 2, 1, "", "as_real_imag"]], "sympy.functions.elementary.exponential": [[73, 1, 1, "", "LambertW"], [73, 1, 1, "", "exp"], [73, 1, 1, "", "exp_polar"], [73, 1, 1, "", "log"]], "sympy.functions.elementary.exponential.LambertW": [[73, 2, 1, "", "fdiff"]], "sympy.functions.elementary.exponential.exp": [[73, 2, 1, "", "as_real_imag"], [73, 3, 1, "", "base"], [73, 2, 1, "", "fdiff"], [73, 2, 1, "", "taylor_term"]], "sympy.functions.elementary.exponential.log": [[73, 2, 1, "", "as_base_exp"], [73, 2, 1, "", "as_real_imag"], [73, 2, 1, "", "fdiff"], [73, 2, 1, "", "inverse"], [73, 2, 1, "", "taylor_term"]], "sympy.functions.elementary.hyperbolic": [[73, 1, 1, "", "HyperbolicFunction"], [73, 1, 1, "", "acosh"], [73, 1, 1, "", "acoth"], [73, 1, 1, "", "acsch"], [73, 1, 1, "", "asech"], [73, 1, 1, "", "asinh"], [73, 1, 1, "", "atanh"], [73, 1, 1, "", "cosh"], [73, 1, 1, "", "coth"], [73, 1, 1, "", "csch"], [73, 1, 1, "", "sech"], [73, 1, 1, "", "sinh"], [73, 1, 1, "", "tanh"]], "sympy.functions.elementary.hyperbolic.acosh": [[73, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.acoth": [[73, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.acsch": [[73, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.asech": [[73, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.asinh": [[73, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.atanh": [[73, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.coth": [[73, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.csch": [[73, 2, 1, "", "fdiff"], [73, 2, 1, "", "taylor_term"]], "sympy.functions.elementary.hyperbolic.sinh": [[73, 2, 1, "", "as_real_imag"], [73, 2, 1, "", "fdiff"], [73, 2, 1, "", "inverse"], [73, 2, 1, "", "taylor_term"]], "sympy.functions.elementary.hyperbolic.tanh": [[73, 2, 1, "", "inverse"]], "sympy.functions.elementary.integers": [[73, 1, 1, "", "RoundFunction"], [73, 1, 1, "", "ceiling"], [73, 1, 1, "", "floor"], [73, 1, 1, "", "frac"]], "sympy.functions.elementary.miscellaneous": [[73, 1, 1, "", "IdentityFunction"], [73, 1, 1, "", "Max"], [73, 1, 1, "", "Min"], [73, 4, 1, "", "cbrt"], [73, 4, 1, "", "real_root"], [73, 4, 1, "", "root"], [73, 4, 1, "", "sqrt"]], "sympy.functions.elementary.piecewise": [[73, 1, 1, "", "ExprCondPair"], [73, 1, 1, "", "Piecewise"], [73, 4, 1, "", "piecewise_exclusive"], [73, 4, 1, "", "piecewise_fold"]], "sympy.functions.elementary.piecewise.ExprCondPair": [[73, 3, 1, "", "cond"], [73, 3, 1, "", "expr"]], "sympy.functions.elementary.piecewise.Piecewise": [[73, 2, 1, "", "_eval_integral"], [73, 2, 1, "", "as_expr_set_pairs"], [73, 2, 1, "", "doit"], [73, 2, 1, "", "eval"], [73, 2, 1, "", "piecewise_integrate"]], "sympy.functions.elementary.trigonometric": [[73, 1, 1, "", "acos"], [73, 1, 1, "", "acot"], [73, 1, 1, "", "acsc"], [73, 1, 1, "", "asec"], [73, 1, 1, "", "asin"], [73, 1, 1, "", "atan"], [73, 1, 1, "", "atan2"], [73, 1, 1, "", "cos"], [73, 1, 1, "", "cot"], [73, 1, 1, "", "csc"], [73, 1, 1, "", "sec"], [73, 1, 1, "", "sin"], [73, 1, 1, "", "sinc"], [73, 1, 1, "", "tan"]], "sympy.functions.elementary.trigonometric.acos": [[73, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.acot": [[73, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.acsc": [[73, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.asec": [[73, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.asin": [[73, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.atan": [[73, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.cot": [[73, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.tan": [[73, 2, 1, "", "inverse"]], "sympy.functions.special": [[75, 0, 0, "-", "bessel"], [75, 0, 0, "-", "beta_functions"], [75, 0, 0, "-", "elliptic_integrals"], [75, 0, 0, "-", "error_functions"], [75, 0, 0, "-", "gamma_functions"], [75, 0, 0, "-", "mathieu_functions"], [75, 0, 0, "-", "polynomials"], [75, 0, 0, "-", "singularity_functions"], [75, 0, 0, "-", "zeta_functions"]], "sympy.functions.special.bessel": [[75, 1, 1, "", "AiryBase"], [75, 1, 1, "", "BesselBase"], [75, 1, 1, "", "airyai"], [75, 1, 1, "", "airyaiprime"], [75, 1, 1, "", "airybi"], [75, 1, 1, "", "airybiprime"], [75, 1, 1, "", "besseli"], [75, 1, 1, "", "besselj"], [75, 1, 1, "", "besselk"], [75, 1, 1, "", "bessely"], [75, 1, 1, "", "hankel1"], [75, 1, 1, "", "hankel2"], [75, 1, 1, "", "jn"], [75, 4, 1, "", "jn_zeros"], [75, 1, 1, "", "marcumq"], [75, 1, 1, "", "yn"]], "sympy.functions.special.bessel.BesselBase": [[75, 3, 1, "", "argument"], [75, 3, 1, "", "order"]], "sympy.functions.special.beta_functions": [[75, 1, 1, "", "beta"]], "sympy.functions.special.bsplines": [[75, 4, 1, "", "bspline_basis"], [75, 4, 1, "", "bspline_basis_set"], [75, 4, 1, "", "interpolating_spline"]], "sympy.functions.special.delta_functions": [[75, 1, 1, "", "DiracDelta"], [75, 1, 1, "", "Heaviside"]], "sympy.functions.special.delta_functions.DiracDelta": [[75, 2, 1, "", "eval"], [75, 2, 1, "", "fdiff"], [75, 2, 1, "", "is_simple"]], "sympy.functions.special.delta_functions.Heaviside": [[75, 2, 1, "", "eval"], [75, 2, 1, "", "fdiff"], [75, 3, 1, "", "pargs"]], "sympy.functions.special.elliptic_integrals": [[75, 1, 1, "", "elliptic_e"], [75, 1, 1, "", "elliptic_f"], [75, 1, 1, "", "elliptic_k"], [75, 1, 1, "", "elliptic_pi"]], "sympy.functions.special.error_functions": [[75, 1, 1, "", "Chi"], [75, 1, 1, "", "Ci"], [75, 4, 1, "", "E1"], [75, 1, 1, "", "Ei"], [75, 1, 1, "", "FresnelIntegral"], [75, 1, 1, "", "Li"], [75, 1, 1, "", "Shi"], [75, 1, 1, "", "Si"], [75, 1, 1, "", "erf"], [75, 1, 1, "", "erf2"], [75, 1, 1, "", "erf2inv"], [75, 1, 1, "", "erfc"], [75, 1, 1, "", "erfcinv"], [75, 1, 1, "", "erfi"], [75, 1, 1, "", "erfinv"], [75, 1, 1, "", "expint"], [75, 1, 1, "", "fresnelc"], [75, 1, 1, "", "fresnels"], [75, 1, 1, "", "li"]], "sympy.functions.special.error_functions.erf": [[75, 2, 1, "", "inverse"]], "sympy.functions.special.error_functions.erfc": [[75, 2, 1, "", "inverse"]], "sympy.functions.special.error_functions.erfcinv": [[75, 2, 1, "", "inverse"]], "sympy.functions.special.error_functions.erfinv": [[75, 2, 1, "", "inverse"]], "sympy.functions.special.gamma_functions": [[75, 1, 1, "", "digamma"], [75, 1, 1, "", "gamma"], [75, 1, 1, "", "loggamma"], [75, 1, 1, "", "lowergamma"], [75, 1, 1, "", "multigamma"], [75, 1, 1, "", "polygamma"], [75, 1, 1, "", "trigamma"], [75, 1, 1, "", "uppergamma"]], "sympy.functions.special.hyper": [[75, 1, 1, "", "appellf1"], [75, 1, 1, "", "hyper"], [75, 1, 1, "", "meijerg"]], "sympy.functions.special.hyper.hyper": [[75, 3, 1, "", "ap"], [75, 3, 1, "", "argument"], [75, 3, 1, "", "bq"], [75, 3, 1, "", "convergence_statement"], [75, 3, 1, "", "eta"], [75, 3, 1, "", "radius_of_convergence"]], "sympy.functions.special.hyper.meijerg": [[75, 3, 1, "", "an"], [75, 3, 1, "", "aother"], [75, 3, 1, "", "ap"], [75, 3, 1, "", "argument"], [75, 3, 1, "", "bm"], [75, 3, 1, "", "bother"], [75, 3, 1, "", "bq"], [75, 3, 1, "", "delta"], [75, 2, 1, "", "get_period"], [75, 2, 1, "", "integrand"], [75, 3, 1, "", "is_number"], [75, 3, 1, "", "nu"]], "sympy.functions.special.mathieu_functions": [[75, 1, 1, "", "MathieuBase"], [75, 1, 1, "", "mathieuc"], [75, 1, 1, "", "mathieucprime"], [75, 1, 1, "", "mathieus"], [75, 1, 1, "", "mathieusprime"]], "sympy.functions.special.polynomials": [[75, 1, 1, "", "assoc_laguerre"], [75, 1, 1, "", "assoc_legendre"], [75, 1, 1, "", "chebyshevt"], [75, 1, 1, "", "chebyshevt_root"], [75, 1, 1, "", "chebyshevu"], [75, 1, 1, "", "chebyshevu_root"], [75, 1, 1, "", "gegenbauer"], [75, 1, 1, "", "hermite"], [75, 1, 1, "", "hermite_prob"], [75, 1, 1, "", "jacobi"], [75, 4, 1, "", "jacobi_normalized"], [75, 1, 1, "", "laguerre"], [75, 1, 1, "", "legendre"]], "sympy.functions.special.singularity_functions": [[75, 1, 1, "", "SingularityFunction"]], "sympy.functions.special.singularity_functions.SingularityFunction": [[75, 2, 1, "", "eval"], [75, 2, 1, "", "fdiff"]], "sympy.functions.special.spherical_harmonics": [[75, 1, 1, "", "Ynm"], [75, 4, 1, "", "Ynm_c"], [75, 1, 1, "", "Znm"]], "sympy.functions.special.tensor_functions": [[75, 4, 1, "", "Eijk"], [75, 1, 1, "", "KroneckerDelta"], [75, 1, 1, "", "LeviCivita"], [75, 4, 1, "", "eval_levicivita"]], "sympy.functions.special.tensor_functions.KroneckerDelta": [[75, 2, 1, "", "eval"], [75, 3, 1, "", "indices_contain_equal_information"], [75, 3, 1, "", "is_above_fermi"], [75, 3, 1, "", "is_below_fermi"], [75, 3, 1, "", "is_only_above_fermi"], [75, 3, 1, "", "is_only_below_fermi"], [75, 3, 1, "", "killable_index"], [75, 3, 1, "", "preferred_index"]], "sympy.functions.special.zeta_functions": [[75, 1, 1, "", "dirichlet_eta"], [75, 1, 1, "", "lerchphi"], [75, 1, 1, "", "polylog"], [75, 1, 1, "", "stieltjes"], [75, 1, 1, "", "zeta"]], "sympy.geometry": [[76, 0, 0, "-", "curve"], [77, 0, 0, "-", "ellipse"], [78, 0, 0, "-", "entity"], [80, 0, 0, "-", "line"], [81, 0, 0, "-", "plane"], [82, 0, 0, "-", "point"], [83, 0, 0, "-", "polygon"], [84, 0, 0, "-", "util"]], "sympy.geometry.curve": [[76, 1, 1, "", "Curve"]], "sympy.geometry.curve.Curve": [[76, 3, 1, "", "ambient_dimension"], [76, 2, 1, "", "arbitrary_point"], [76, 3, 1, "", "free_symbols"], [76, 3, 1, "", "functions"], [76, 3, 1, "", "length"], [76, 3, 1, "", "limits"], [76, 3, 1, "", "parameter"], [76, 2, 1, "", "plot_interval"], [76, 2, 1, "", "rotate"], [76, 2, 1, "", "scale"], [76, 2, 1, "", "translate"]], "sympy.geometry.ellipse": [[77, 1, 1, "", "Circle"], [77, 1, 1, "", "Ellipse"]], "sympy.geometry.ellipse.Circle": [[77, 3, 1, "", "circumference"], [77, 2, 1, "", "equation"], [77, 2, 1, "", "intersection"], [77, 3, 1, "", "radius"], [77, 2, 1, "", "reflect"], [77, 2, 1, "", "scale"], [77, 3, 1, "", "vradius"]], "sympy.geometry.ellipse.Ellipse": [[77, 3, 1, "", "apoapsis"], [77, 2, 1, "", "arbitrary_point"], [77, 3, 1, "", "area"], [77, 2, 1, "", "auxiliary_circle"], [77, 3, 1, "", "bounds"], [77, 3, 1, "", "center"], [77, 3, 1, "", "circumference"], [77, 2, 1, "", "director_circle"], [77, 3, 1, "", "eccentricity"], [77, 2, 1, "", "encloses_point"], [77, 2, 1, "", "equation"], [77, 2, 1, "", "evolute"], [77, 3, 1, "", "foci"], [77, 3, 1, "", "focus_distance"], [77, 3, 1, "", "hradius"], [77, 2, 1, "", "intersection"], [77, 2, 1, "", "is_tangent"], [77, 3, 1, "", "major"], [77, 3, 1, "", "minor"], [77, 2, 1, "", "normal_lines"], [77, 3, 1, "", "periapsis"], [77, 2, 1, "", "plot_interval"], [77, 2, 1, "", "polar_second_moment_of_area"], [77, 2, 1, "", "random_point"], [77, 2, 1, "", "reflect"], [77, 2, 1, "", "rotate"], [77, 2, 1, "", "scale"], [77, 2, 1, "", "second_moment_of_area"], [77, 2, 1, "", "section_modulus"], [77, 3, 1, "", "semilatus_rectum"], [77, 2, 1, "", "tangent_lines"], [77, 3, 1, "", "vradius"]], "sympy.geometry.entity": [[78, 1, 1, "", "GeometryEntity"]], "sympy.geometry.entity.GeometryEntity": [[78, 3, 1, "", "ambient_dimension"], [78, 3, 1, "", "bounds"], [78, 2, 1, "", "encloses"], [78, 2, 1, "", "intersection"], [78, 2, 1, "", "is_similar"], [78, 2, 1, "", "parameter_value"], [78, 2, 1, "", "reflect"], [78, 2, 1, "", "rotate"], [78, 2, 1, "", "scale"], [78, 2, 1, "", "translate"]], "sympy.geometry.line": [[80, 1, 1, "", "Line"], [80, 1, 1, "", "Line2D"], [80, 1, 1, "", "Line3D"], [80, 1, 1, "", "LinearEntity"], [80, 1, 1, "", "LinearEntity2D"], [80, 1, 1, "", "LinearEntity3D"], [80, 1, 1, "", "Ray"], [80, 1, 1, "", "Ray2D"], [80, 1, 1, "", "Ray3D"], [80, 1, 1, "", "Segment"], [80, 1, 1, "", "Segment2D"], [80, 1, 1, "", "Segment3D"]], "sympy.geometry.line.Line": [[80, 2, 1, "", "contains"], [80, 2, 1, "", "distance"], [80, 2, 1, "", "equals"], [80, 2, 1, "", "plot_interval"]], "sympy.geometry.line.Line2D": [[80, 3, 1, "", "coefficients"], [80, 2, 1, "", "equation"]], "sympy.geometry.line.Line3D": [[80, 2, 1, "", "distance"], [80, 2, 1, "", "equation"]], "sympy.geometry.line.LinearEntity": [[80, 3, 1, "", "ambient_dimension"], [80, 2, 1, "", "angle_between"], [80, 2, 1, "", "arbitrary_point"], [80, 2, 1, "", "are_concurrent"], [80, 2, 1, "", "bisectors"], [80, 2, 1, "", "contains"], [80, 3, 1, "", "direction"], [80, 2, 1, "", "intersection"], [80, 2, 1, "", "is_parallel"], [80, 2, 1, "", "is_perpendicular"], [80, 2, 1, "", "is_similar"], [80, 3, 1, "", "length"], [80, 3, 1, "", "p1"], [80, 3, 1, "", "p2"], [80, 2, 1, "", "parallel_line"], [80, 2, 1, "", "perpendicular_line"], [80, 2, 1, "", "perpendicular_segment"], [80, 3, 1, "", "points"], [80, 2, 1, "", "projection"], [80, 2, 1, "", "random_point"], [80, 2, 1, "", "smallest_angle_between"]], "sympy.geometry.line.LinearEntity2D": [[80, 3, 1, "", "bounds"], [80, 2, 1, "", "perpendicular_line"], [80, 3, 1, "", "slope"]], "sympy.geometry.line.LinearEntity3D": [[80, 3, 1, "", "direction_cosine"], [80, 3, 1, "", "direction_ratio"]], "sympy.geometry.line.Ray": [[80, 2, 1, "", "contains"], [80, 2, 1, "", "distance"], [80, 2, 1, "", "equals"], [80, 2, 1, "", "plot_interval"], [80, 3, 1, "", "source"]], "sympy.geometry.line.Ray2D": [[80, 2, 1, "", "closing_angle"], [80, 3, 1, "", "xdirection"], [80, 3, 1, "", "ydirection"]], "sympy.geometry.line.Ray3D": [[80, 3, 1, "", "xdirection"], [80, 3, 1, "", "ydirection"], [80, 3, 1, "", "zdirection"]], "sympy.geometry.line.Segment": [[80, 2, 1, "", "contains"], [80, 2, 1, "", "distance"], [80, 2, 1, "", "equals"], [80, 3, 1, "", "length"], [80, 3, 1, "", "midpoint"], [80, 2, 1, "", "perpendicular_bisector"], [80, 2, 1, "", "plot_interval"]], "sympy.geometry.plane": [[81, 1, 1, "", "Plane"]], "sympy.geometry.plane.Plane": [[81, 2, 1, "", "angle_between"], [81, 2, 1, "", "arbitrary_point"], [81, 2, 1, "", "are_concurrent"], [81, 2, 1, "", "distance"], [81, 2, 1, "", "equals"], [81, 2, 1, "", "equation"], [81, 2, 1, "", "intersection"], [81, 2, 1, "", "is_coplanar"], [81, 2, 1, "", "is_parallel"], [81, 2, 1, "", "is_perpendicular"], [81, 3, 1, "", "normal_vector"], [81, 3, 1, "", "p1"], [81, 2, 1, "", "parallel_plane"], [81, 2, 1, "", "parameter_value"], [81, 2, 1, "", "perpendicular_line"], [81, 2, 1, "", "perpendicular_plane"], [81, 2, 1, "", "projection"], [81, 2, 1, "", "projection_line"], [81, 2, 1, "", "random_point"]], "sympy.geometry.point": [[82, 1, 1, "", "Point"], [82, 1, 1, "", "Point2D"], [82, 1, 1, "", "Point3D"]], "sympy.geometry.point.Point": [[82, 2, 1, "", "affine_rank"], [82, 3, 1, "", "ambient_dimension"], [82, 2, 1, "", "are_coplanar"], [82, 2, 1, "", "canberra_distance"], [82, 2, 1, "", "distance"], [82, 2, 1, "", "dot"], [82, 2, 1, "", "equals"], [82, 2, 1, "", "intersection"], [82, 2, 1, "", "is_collinear"], [82, 2, 1, "", "is_concyclic"], [82, 3, 1, "", "is_nonzero"], [82, 2, 1, "", "is_scalar_multiple"], [82, 3, 1, "", "is_zero"], [82, 3, 1, "", "length"], [82, 2, 1, "", "midpoint"], [82, 3, 1, "", "origin"], [82, 3, 1, "", "orthogonal_direction"], [82, 2, 1, "", "project"], [82, 2, 1, "", "taxicab_distance"], [82, 3, 1, "", "unit"]], "sympy.geometry.point.Point2D": [[82, 3, 1, "", "bounds"], [82, 3, 1, "", "coordinates"], [82, 2, 1, "", "rotate"], [82, 2, 1, "", "scale"], [82, 2, 1, "", "transform"], [82, 2, 1, "", "translate"], [82, 3, 1, "", "x"], [82, 3, 1, "", "y"]], "sympy.geometry.point.Point3D": [[82, 2, 1, "", "are_collinear"], [82, 3, 1, "", "coordinates"], [82, 2, 1, "", "direction_cosine"], [82, 2, 1, "", "direction_ratio"], [82, 2, 1, "", "intersection"], [82, 2, 1, "", "scale"], [82, 2, 1, "", "transform"], [82, 2, 1, "", "translate"], [82, 3, 1, "", "x"], [82, 3, 1, "", "y"], [82, 3, 1, "", "z"]], "sympy.geometry.polygon": [[83, 1, 1, "", "Polygon"], [83, 1, 1, "", "RegularPolygon"], [83, 1, 1, "", "Triangle"]], "sympy.geometry.polygon.Polygon": [[83, 3, 1, "", "angles"], [83, 2, 1, "", "arbitrary_point"], [83, 3, 1, "", "area"], [83, 2, 1, "", "bisectors"], [83, 3, 1, "", "bounds"], [83, 3, 1, "", "centroid"], [83, 2, 1, "", "cut_section"], [83, 2, 1, "", "distance"], [83, 2, 1, "", "encloses_point"], [83, 2, 1, "", "first_moment_of_area"], [83, 2, 1, "", "intersection"], [83, 2, 1, "", "is_convex"], [83, 3, 1, "", "perimeter"], [83, 2, 1, "", "plot_interval"], [83, 2, 1, "", "polar_second_moment_of_area"], [83, 2, 1, "", "second_moment_of_area"], [83, 2, 1, "", "section_modulus"], [83, 3, 1, "", "sides"], [83, 3, 1, "", "vertices"]], "sympy.geometry.polygon.RegularPolygon": [[83, 3, 1, "", "angles"], [83, 3, 1, "", "apothem"], [83, 3, 1, "", "area"], [83, 3, 1, "", "args"], [83, 3, 1, "", "center"], [83, 3, 1, "", "centroid"], [83, 3, 1, "", "circumcenter"], [83, 3, 1, "", "circumcircle"], [83, 3, 1, "", "circumradius"], [83, 2, 1, "", "encloses_point"], [83, 3, 1, "", "exterior_angle"], [83, 3, 1, "", "incircle"], [83, 3, 1, "", "inradius"], [83, 3, 1, "", "interior_angle"], [83, 3, 1, "", "length"], [83, 3, 1, "", "radius"], [83, 2, 1, "", "reflect"], [83, 2, 1, "", "rotate"], [83, 3, 1, "", "rotation"], [83, 2, 1, "", "scale"], [83, 2, 1, "", "spin"], [83, 3, 1, "", "vertices"]], "sympy.geometry.polygon.Triangle": [[83, 3, 1, "", "altitudes"], [83, 2, 1, "", "bisectors"], [83, 3, 1, "", "circumcenter"], [83, 3, 1, "", "circumcircle"], [83, 3, 1, "", "circumradius"], [83, 3, 1, "", "eulerline"], [83, 3, 1, "", "excenters"], [83, 3, 1, "", "exradii"], [83, 3, 1, "", "incenter"], [83, 3, 1, "", "incircle"], [83, 3, 1, "", "inradius"], [83, 2, 1, "", "is_equilateral"], [83, 2, 1, "", "is_isosceles"], [83, 2, 1, "", "is_right"], [83, 2, 1, "", "is_scalene"], [83, 2, 1, "", "is_similar"], [83, 3, 1, "", "medial"], [83, 3, 1, "", "medians"], [83, 3, 1, "", "nine_point_circle"], [83, 3, 1, "", "orthocenter"], [83, 3, 1, "", "vertices"]], "sympy.geometry.util": [[84, 4, 1, "", "are_similar"], [84, 4, 1, "", "centroid"], [84, 4, 1, "", "convex_hull"], [84, 4, 1, "", "idiff"], [84, 4, 1, "", "intersection"]], "sympy.holonomic.holonomic": [[90, 1, 1, "", "DifferentialOperator"], [90, 1, 1, "", "DifferentialOperatorAlgebra"], [90, 4, 1, "", "DifferentialOperators"], [90, 1, 1, "", "HolonomicFunction"], [88, 4, 1, "", "_convert_poly_rat_alg"], [88, 4, 1, "", "_create_table"], [86, 4, 1, "", "expr_to_holonomic"], [86, 4, 1, "", "from_hyper"], [86, 4, 1, "", "from_meijerg"]], "sympy.holonomic.holonomic.DifferentialOperator": [[90, 2, 1, "", "is_singular"]], "sympy.holonomic.holonomic.HolonomicFunction": [[89, 2, 1, "", "composition"], [89, 2, 1, "", "diff"], [89, 2, 1, "", "evalf"], [89, 2, 1, "", "integrate"], [89, 2, 1, "", "series"], [89, 2, 1, "", "to_expr"], [89, 2, 1, "", "to_hyper"], [89, 2, 1, "", "to_meijerg"], [89, 2, 1, "", "to_sequence"]], "sympy.integrals.deltafunctions": [[94, 4, 1, "", "deltaintegrate"]], "sympy.integrals.heurisch": [[94, 4, 1, "", "components"], [94, 4, 1, "", "heurisch"]], "sympy.integrals.integrals": [[94, 1, 1, "", "Integral"], [94, 4, 1, "", "integrate"], [94, 4, 1, "", "line_integrate"]], "sympy.integrals.integrals.Integral": [[94, 2, 1, "", "as_sum"], [94, 2, 1, "", "doit"], [94, 3, 1, "", "free_symbols"], [94, 6, 1, "", "is_commutative"], [94, 2, 1, "", "principal_value"], [94, 2, 1, "", "transform"]], "sympy.integrals": [[94, 0, 0, "-", "intpoly"], [92, 0, 0, "-", "meijerint"], [92, 0, 0, "-", "meijerint_doc"], [94, 0, 0, "-", "transforms"]], "sympy.integrals.intpoly": [[94, 4, 1, "", "polytope_integrate"]], "sympy.integrals.manualintegrate": [[94, 4, 1, "", "integral_steps"], [94, 4, 1, "", "manualintegrate"]], "sympy.integrals.meijerint": [[92, 7, 1, "", "_CoeffExpValueError"], [92, 4, 1, "", "_check_antecedents"], [92, 4, 1, "", "_check_antecedents_1"], [92, 4, 1, "", "_check_antecedents_inversion"], [92, 4, 1, "", "_condsimp"], [92, 4, 1, "", "_create_lookup_table"], [92, 4, 1, "", "_dummy"], [92, 4, 1, "", "_dummy_"], [92, 4, 1, "", "_eval_cond"], [92, 4, 1, "", "_exponents"], [92, 4, 1, "", "_find_splitting_points"], [92, 4, 1, "", "_flip_g"], [92, 4, 1, "", "_functions"], [92, 4, 1, "", "_get_coeff_exp"], [92, 4, 1, "", "_guess_expansion"], [92, 4, 1, "", "_inflate_fox_h"], [92, 4, 1, "", "_inflate_g"], [92, 4, 1, "", "_int0oo"], [92, 4, 1, "", "_int0oo_1"], [92, 4, 1, "", "_int_inversion"], [92, 4, 1, "", "_is_analytic"], [92, 4, 1, "", "_meijerint_definite_2"], [92, 4, 1, "", "_meijerint_definite_3"], [92, 4, 1, "", "_meijerint_definite_4"], [92, 4, 1, "", "_meijerint_indefinite_1"], [92, 4, 1, "", "_mul_args"], [92, 4, 1, "", "_mul_as_two_parts"], [92, 4, 1, "", "_my_principal_branch"], [92, 4, 1, "", "_mytype"], [92, 4, 1, "", "_rewrite1"], [92, 4, 1, "", "_rewrite2"], [92, 4, 1, "", "_rewrite_inversion"], [92, 4, 1, "", "_rewrite_saxena"], [92, 4, 1, "", "_rewrite_saxena_1"], [92, 4, 1, "", "_rewrite_single"], [92, 4, 1, "", "_split_mul"], [92, 4, 1, "", "meijerint_definite"], [92, 4, 1, "", "meijerint_indefinite"], [92, 4, 1, "", "meijerint_inversion"]], "sympy.integrals.quadrature": [[94, 4, 1, "", "gauss_chebyshev_t"], [94, 4, 1, "", "gauss_chebyshev_u"], [94, 4, 1, "", "gauss_gen_laguerre"], [94, 4, 1, "", "gauss_hermite"], [94, 4, 1, "", "gauss_jacobi"], [94, 4, 1, "", "gauss_laguerre"], [94, 4, 1, "", "gauss_legendre"], [94, 4, 1, "", "gauss_lobatto"]], "sympy.integrals.rationaltools": [[94, 4, 1, "", "ratint"], [94, 4, 1, "", "ratint_logpart"], [94, 4, 1, "", "ratint_ratpart"]], "sympy.integrals.risch": [[94, 1, 1, "", "NonElementaryIntegral"], [94, 4, 1, "", "risch_integrate"]], "sympy.integrals.singularityfunctions": [[94, 4, 1, "", "singularityintegrate"]], "sympy.integrals.transforms": [[94, 1, 1, "", "CosineTransform"], [94, 1, 1, "", "FourierTransform"], [94, 1, 1, "", "HankelTransform"], [94, 1, 1, "", "IntegralTransform"], [94, 7, 1, "", "IntegralTransformError"], [94, 1, 1, "", "InverseCosineTransform"], [94, 1, 1, "", "InverseFourierTransform"], [94, 1, 1, "", "InverseHankelTransform"], [94, 1, 1, "", "InverseLaplaceTransform"], [94, 1, 1, "", "InverseMellinTransform"], [94, 1, 1, "", "InverseSineTransform"], [94, 1, 1, "", "LaplaceTransform"], [94, 1, 1, "", "MellinTransform"], [94, 1, 1, "", "SineTransform"], [94, 4, 1, "", "_fourier_transform"], [94, 4, 1, "", "cosine_transform"], [94, 4, 1, "", "fourier_transform"], [94, 4, 1, "", "hankel_transform"], [94, 4, 1, "", "inverse_cosine_transform"], [94, 4, 1, "", "inverse_fourier_transform"], [94, 4, 1, "", "inverse_hankel_transform"], [94, 4, 1, "", "inverse_laplace_transform"], [94, 4, 1, "", "inverse_mellin_transform"], [94, 4, 1, "", "inverse_sine_transform"], [94, 4, 1, "", "laplace_correspondence"], [94, 4, 1, "", "laplace_initial_conds"], [94, 4, 1, "", "laplace_transform"], [94, 4, 1, "", "mellin_transform"], [94, 4, 1, "", "sine_transform"]], "sympy.integrals.transforms.IntegralTransform": [[94, 2, 1, "", "doit"], [94, 3, 1, "", "function"], [94, 3, 1, "", "function_variable"], [94, 3, 1, "", "transform_variable"]], "sympy.integrals.transforms.InverseLaplaceTransform": [[94, 2, 1, "", "doit"]], "sympy.integrals.transforms.LaplaceTransform": [[94, 2, 1, "", "doit"]], "sympy.integrals.trigonometry": [[94, 4, 1, "", "trigintegrate"]], "sympy.interactive": [[95, 0, 0, "-", "printing"], [95, 0, 0, "-", "session"]], "sympy.interactive.printing": [[95, 4, 1, "", "init_printing"]], "sympy.interactive.session": [[95, 4, 1, "", "enable_automatic_int_sympification"], [95, 4, 1, "", "enable_automatic_symbols"], [95, 4, 1, "", "init_ipython_session"], [95, 4, 1, "", "init_python_session"], [95, 4, 1, "", "init_session"], [95, 4, 1, "", "int_to_Integer"]], "sympy.liealgebras.cartan_matrix": [[96, 4, 1, "", "CartanMatrix"]], "sympy.liealgebras.cartan_type": [[96, 1, 1, "", "CartanType_generator"], [96, 1, 1, "", "Standard_Cartan"]], "sympy.liealgebras.cartan_type.Standard_Cartan": [[96, 2, 1, "", "rank"], [96, 2, 1, "", "series"]], "sympy.liealgebras.dynkin_diagram": [[96, 4, 1, "", "DynkinDiagram"]], "sympy.liealgebras.root_system": [[96, 1, 1, "", "RootSystem"]], "sympy.liealgebras.root_system.RootSystem": [[96, 2, 1, "", "add_as_roots"], [96, 2, 1, "", "add_simple_roots"], [96, 2, 1, "", "all_roots"], [96, 2, 1, "", "cartan_matrix"], [96, 2, 1, "", "dynkin_diagram"], [96, 2, 1, "", "root_space"], [96, 2, 1, "", "simple_roots"]], "sympy.liealgebras.type_a": [[96, 1, 1, "", "TypeA"]], "sympy.liealgebras.type_a.TypeA": [[96, 2, 1, "", "basic_root"], [96, 2, 1, "", "basis"], [96, 2, 1, "", "cartan_matrix"], [96, 2, 1, "", "dimension"], [96, 2, 1, "", "highest_root"], [96, 2, 1, "", "lie_algebra"], [96, 2, 1, "", "positive_roots"], [96, 2, 1, "", "roots"], [96, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_b": [[96, 1, 1, "", "TypeB"]], "sympy.liealgebras.type_b.TypeB": [[96, 2, 1, "", "basic_root"], [96, 2, 1, "", "basis"], [96, 2, 1, "", "cartan_matrix"], [96, 2, 1, "", "dimension"], [96, 2, 1, "", "lie_algebra"], [96, 2, 1, "", "positive_roots"], [96, 2, 1, "", "roots"], [96, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_c": [[96, 1, 1, "", "TypeC"]], "sympy.liealgebras.type_c.TypeC": [[96, 2, 1, "", "basic_root"], [96, 2, 1, "", "basis"], [96, 2, 1, "", "cartan_matrix"], [96, 2, 1, "", "dimension"], [96, 2, 1, "", "lie_algebra"], [96, 2, 1, "", "positive_roots"], [96, 2, 1, "", "roots"], [96, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_d": [[96, 1, 1, "", "TypeD"]], "sympy.liealgebras.type_d.TypeD": [[96, 2, 1, "", "basic_root"], [96, 2, 1, "", "basis"], [96, 2, 1, "", "cartan_matrix"], [96, 2, 1, "", "dimension"], [96, 2, 1, "", "lie_algebra"], [96, 2, 1, "", "positive_roots"], [96, 2, 1, "", "roots"], [96, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_e": [[96, 1, 1, "", "TypeE"]], "sympy.liealgebras.type_e.TypeE": [[96, 2, 1, "", "basic_root"], [96, 2, 1, "", "basis"], [96, 2, 1, "", "cartan_matrix"], [96, 2, 1, "", "dimension"], [96, 2, 1, "", "positive_roots"], [96, 2, 1, "", "roots"], [96, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_f": [[96, 1, 1, "", "TypeF"]], "sympy.liealgebras.type_f.TypeF": [[96, 2, 1, "", "basic_root"], [96, 2, 1, "", "basis"], [96, 2, 1, "", "cartan_matrix"], [96, 2, 1, "", "dimension"], [96, 2, 1, "", "positive_roots"], [96, 2, 1, "", "roots"], [96, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_g": [[96, 1, 1, "", "TypeG"]], "sympy.liealgebras.type_g.TypeG": [[96, 2, 1, "", "basis"], [96, 2, 1, "", "cartan_matrix"], [96, 2, 1, "", "dimension"], [96, 2, 1, "", "positive_roots"], [96, 2, 1, "", "roots"], [96, 2, 1, "", "simple_root"]], "sympy.liealgebras.weyl_group": [[96, 1, 1, "", "WeylGroup"]], "sympy.liealgebras.weyl_group.WeylGroup": [[96, 2, 1, "", "coxeter_diagram"], [96, 2, 1, "", "delete_doubles"], [96, 2, 1, "", "element_order"], [96, 2, 1, "", "generators"], [96, 2, 1, "", "group_name"], [96, 2, 1, "", "group_order"], [96, 2, 1, "", "matrix_form"]], "sympy.logic.boolalg": [[97, 4, 1, "", "ANFform"], [97, 1, 1, "", "And"], [97, 1, 1, "", "Boolean"], [97, 1, 1, "", "BooleanFalse"], [97, 1, 1, "", "BooleanTrue"], [97, 1, 1, "", "Equivalent"], [97, 1, 1, "", "Exclusive"], [97, 1, 1, "", "ITE"], [97, 1, 1, "", "Implies"], [97, 1, 1, "", "Nand"], [97, 1, 1, "", "Nor"], [97, 1, 1, "", "Not"], [97, 1, 1, "", "Or"], [97, 4, 1, "", "POSform"], [97, 4, 1, "", "SOPform"], [97, 1, 1, "", "Xnor"], [97, 1, 1, "", "Xor"], [97, 4, 1, "", "anf_coeffs"], [97, 4, 1, "", "bool_map"], [97, 4, 1, "", "bool_maxterm"], [97, 4, 1, "", "bool_minterm"], [97, 4, 1, "", "bool_monomial"], [97, 4, 1, "", "distribute_and_over_or"], [97, 4, 1, "", "distribute_or_over_and"], [97, 4, 1, "", "distribute_xor_over_and"], [97, 4, 1, "", "eliminate_implications"], [97, 4, 1, "", "gateinputcount"], [97, 4, 1, "", "integer_to_term"], [97, 4, 1, "", "is_anf"], [97, 4, 1, "", "is_cnf"], [97, 4, 1, "", "is_dnf"], [97, 4, 1, "", "is_nnf"], [97, 4, 1, "", "simplify_logic"], [97, 4, 1, "", "term_to_integer"], [97, 4, 1, "", "to_anf"], [97, 4, 1, "", "to_cnf"], [97, 4, 1, "", "to_dnf"], [97, 4, 1, "", "to_int_repr"], [97, 4, 1, "", "to_nnf"], [97, 4, 1, "", "truth_table"]], "sympy.logic.boolalg.Boolean": [[97, 2, 1, "", "as_set"], [97, 2, 1, "", "equals"]], "sympy.logic.boolalg.BooleanFalse": [[97, 2, 1, "", "as_set"]], "sympy.logic.boolalg.BooleanTrue": [[97, 2, 1, "", "as_set"]], "sympy.logic": [[97, 0, 0, "-", "inference"]], "sympy.logic.inference": [[97, 4, 1, "", "satisfiable"]], "sympy.matrices": [[98, 0, 0, "-", "common"], [100, 0, 0, "-", "expressions"], [101, 0, 0, "-", "immutable"], [103, 0, 0, "-", "matrices"], [105, 0, 0, "-", "sparse"], [106, 0, 0, "-", "sparsetools"]], "sympy.matrices.common": [[98, 1, 1, "", "MatrixCommon"], [98, 1, 1, "", "MatrixKind"]], "sympy.matrices.common.MatrixCommon": [[98, 3, 1, "", "C"], [98, 3, 1, "", "H"], [98, 3, 1, "", "T"], [98, 2, 1, "", "__abs__"], [98, 2, 1, "", "__add__"], [98, 2, 1, "", "__getitem__"], [98, 2, 1, "", "__len__"], [98, 2, 1, "", "__mul__"], [98, 2, 1, "", "__pow__"], [98, 5, 1, "", "__weakref__"], [98, 2, 1, "", "adjoint"], [98, 2, 1, "", "applyfunc"], [98, 2, 1, "", "as_real_imag"], [98, 2, 1, "", "atoms"], [98, 2, 1, "", "col"], [98, 2, 1, "", "col_del"], [98, 2, 1, "", "col_insert"], [98, 2, 1, "", "col_join"], [98, 2, 1, "", "companion"], [98, 2, 1, "", "conjugate"], [98, 2, 1, "", "diag"], [98, 2, 1, "", "diagonal"], [98, 2, 1, "", "evalf"], [98, 2, 1, "", "expand"], [98, 2, 1, "", "extract"], [98, 2, 1, "", "eye"], [98, 3, 1, "", "free_symbols"], [98, 2, 1, "", "get_diag_blocks"], [98, 2, 1, "", "has"], [98, 2, 1, "", "hstack"], [98, 2, 1, "", "is_anti_symmetric"], [98, 2, 1, "", "is_diagonal"], [98, 3, 1, "", "is_hermitian"], [98, 3, 1, "", "is_lower"], [98, 3, 1, "", "is_lower_hessenberg"], [98, 3, 1, "", "is_square"], [98, 3, 1, "", "is_strongly_diagonally_dominant"], [98, 2, 1, "", "is_symbolic"], [98, 2, 1, "", "is_symmetric"], [98, 3, 1, "", "is_upper"], [98, 3, 1, "", "is_upper_hessenberg"], [98, 3, 1, "", "is_weakly_diagonally_dominant"], [98, 3, 1, "", "is_zero_matrix"], [98, 2, 1, "", "jordan_block"], [98, 2, 1, "", "lower_triangular"], [98, 2, 1, "", "multiply"], [98, 2, 1, "", "multiply_elementwise"], [98, 2, 1, "", "n"], [98, 2, 1, "", "ones"], [98, 2, 1, "", "permute"], [98, 2, 1, "", "permute_cols"], [98, 2, 1, "", "permute_rows"], [98, 2, 1, "", "pow"], [98, 2, 1, "", "refine"], [98, 2, 1, "", "replace"], [98, 2, 1, "", "reshape"], [98, 2, 1, "", "rmultiply"], [98, 2, 1, "", "rot90"], [98, 2, 1, "", "row"], [98, 2, 1, "", "row_del"], [98, 2, 1, "", "row_insert"], [98, 2, 1, "", "row_join"], [98, 3, 1, "", "shape"], [98, 2, 1, "", "simplify"], [98, 2, 1, "", "subs"], [98, 2, 1, "", "todod"], [98, 2, 1, "", "todok"], [98, 2, 1, "", "tolist"], [98, 2, 1, "", "trace"], [98, 2, 1, "", "transpose"], [98, 2, 1, "", "upper_triangular"], [98, 2, 1, "", "values"], [98, 2, 1, "", "vec"], [98, 2, 1, "", "vech"], [98, 2, 1, "", "vstack"], [98, 2, 1, "", "wilkinson"], [98, 2, 1, "", "xreplace"], [98, 2, 1, "", "zeros"]], "sympy.matrices.dense": [[99, 1, 1, "", "DenseMatrix"], [103, 4, 1, "", "GramSchmidt"], [99, 5, 1, "", "Matrix"], [99, 1, 1, "", "MutableDenseMatrix"], [103, 4, 1, "", "casoratian"], [103, 4, 1, "", "diag"], [103, 4, 1, "", "eye"], [103, 4, 1, "", "hessian"], [103, 4, 1, "", "jordan_cell"], [103, 4, 1, "", "list2numpy"], [103, 4, 1, "", "matrix2numpy"], [103, 4, 1, "", "matrix_multiply_elementwise"], [103, 4, 1, "", "ones"], [103, 4, 1, "", "randMatrix"], [103, 4, 1, "", "rot_axis1"], [103, 4, 1, "", "rot_axis2"], [103, 4, 1, "", "rot_axis3"], [103, 4, 1, "", "rot_ccw_axis1"], [103, 4, 1, "", "rot_ccw_axis2"], [103, 4, 1, "", "rot_ccw_axis3"], [103, 4, 1, "", "rot_givens"], [103, 4, 1, "", "symarray"], [103, 4, 1, "", "wronskian"], [103, 4, 1, "", "zeros"]], "sympy.matrices.dense.DenseMatrix": [[99, 2, 1, "", "LDLdecomposition"], [99, 2, 1, "", "as_immutable"], [99, 2, 1, "", "as_mutable"], [99, 2, 1, "", "cholesky"], [99, 2, 1, "", "lower_triangular_solve"], [99, 2, 1, "", "upper_triangular_solve"]], "sympy.matrices.dense.MutableDenseMatrix": [[99, 2, 1, "", "simplify"]], "sympy.matrices.expressions": [[100, 1, 1, "", "CompanionMatrix"], [100, 1, 1, "", "FunctionMatrix"], [100, 1, 1, "", "HadamardPower"], [100, 1, 1, "", "HadamardProduct"], [100, 1, 1, "", "Identity"], [100, 1, 1, "", "Inverse"], [100, 1, 1, "", "MatAdd"], [100, 1, 1, "", "MatMul"], [100, 1, 1, "", "MatPow"], [100, 1, 1, "", "MatrixExpr"], [100, 1, 1, "", "MatrixPermute"], [100, 1, 1, "", "MatrixSet"], [100, 1, 1, "", "MatrixSymbol"], [100, 1, 1, "", "PermutationMatrix"], [100, 1, 1, "", "Trace"], [100, 1, 1, "", "Transpose"], [100, 1, 1, "", "ZeroMatrix"], [100, 0, 0, "-", "blockmatrix"], [100, 4, 1, "", "hadamard_product"]], "sympy.matrices.expressions.MatrixExpr": [[100, 3, 1, "", "T"], [100, 2, 1, "", "as_coeff_Mul"], [100, 2, 1, "", "as_explicit"], [100, 2, 1, "", "as_mutable"], [100, 2, 1, "", "equals"], [100, 2, 1, "", "from_index_summation"]], "sympy.matrices.expressions.blockmatrix": [[100, 1, 1, "", "BlockDiagMatrix"], [100, 1, 1, "", "BlockMatrix"], [100, 4, 1, "", "block_collapse"]], "sympy.matrices.expressions.blockmatrix.BlockDiagMatrix": [[100, 2, 1, "", "get_diag_blocks"]], "sympy.matrices.expressions.blockmatrix.BlockMatrix": [[100, 2, 1, "", "LDUdecomposition"], [100, 2, 1, "", "LUdecomposition"], [100, 2, 1, "", "UDLdecomposition"], [100, 2, 1, "", "schur"], [100, 2, 1, "", "transpose"]], "sympy.matrices.immutable": [[101, 1, 1, "", "ImmutableDenseMatrix"], [101, 5, 1, "", "ImmutableMatrix"], [105, 1, 1, "", "ImmutableSparseMatrix"]], "sympy.matrices.matrices": [[103, 1, 1, "", "MatrixBase"], [103, 1, 1, "", "MatrixCalculus"], [103, 1, 1, "", "MatrixDeterminant"], [103, 1, 1, "", "MatrixEigen"], [103, 1, 1, "", "MatrixError"], [103, 1, 1, "", "MatrixReductions"], [103, 1, 1, "", "MatrixSubspaces"], [103, 1, 1, "", "NonSquareMatrixError"], [103, 1, 1, "", "ShapeError"], [103, 4, 1, "", "a2idx"]], "sympy.matrices.matrices.MatrixBase": [[103, 3, 1, "", "D"], [103, 2, 1, "", "LDLdecomposition"], [103, 2, 1, "", "LDLsolve"], [103, 2, 1, "", "LUdecomposition"], [103, 2, 1, "", "LUdecompositionFF"], [103, 2, 1, "", "LUdecomposition_Simple"], [103, 2, 1, "", "LUsolve"], [103, 2, 1, "", "QRdecomposition"], [103, 2, 1, "", "QRsolve"], [103, 2, 1, "", "add"], [103, 2, 1, "", "analytic_func"], [103, 2, 1, "", "cholesky"], [103, 2, 1, "", "cholesky_solve"], [103, 2, 1, "", "condition_number"], [103, 2, 1, "", "connected_components"], [103, 2, 1, "", "connected_components_decomposition"], [103, 2, 1, "", "copy"], [103, 2, 1, "", "cramer_solve"], [103, 2, 1, "", "cross"], [103, 2, 1, "", "diagonal_solve"], [103, 2, 1, "", "dot"], [103, 2, 1, "", "dual"], [103, 2, 1, "", "exp"], [103, 2, 1, "", "gauss_jordan_solve"], [103, 2, 1, "", "hat"], [103, 2, 1, "", "inv"], [103, 2, 1, "", "inv_mod"], [103, 2, 1, "", "inverse_ADJ"], [103, 2, 1, "", "inverse_BLOCK"], [103, 2, 1, "", "inverse_CH"], [103, 2, 1, "", "inverse_GE"], [103, 2, 1, "", "inverse_LDL"], [103, 2, 1, "", "inverse_LU"], [103, 2, 1, "", "inverse_QR"], [103, 2, 1, "", "irregular"], [103, 2, 1, "", "is_nilpotent"], [103, 2, 1, "", "key2bounds"], [103, 2, 1, "", "key2ij"], [103, 2, 1, "", "log"], [103, 2, 1, "", "lower_triangular_solve"], [103, 2, 1, "", "norm"], [103, 2, 1, "", "normalized"], [103, 2, 1, "", "pinv"], [103, 2, 1, "", "pinv_solve"], [103, 2, 1, "", "print_nonzero"], [103, 2, 1, "", "project"], [103, 2, 1, "", "rank_decomposition"], [103, 2, 1, "", "singular_value_decomposition"], [103, 2, 1, "", "solve"], [103, 2, 1, "", "solve_least_squares"], [103, 2, 1, "", "strongly_connected_components"], [103, 2, 1, "", "strongly_connected_components_decomposition"], [103, 2, 1, "", "table"], [103, 2, 1, "", "upper_hessenberg_decomposition"], [103, 2, 1, "", "upper_triangular_solve"], [103, 2, 1, "", "vee"]], "sympy.matrices.matrices.MatrixCalculus": [[103, 2, 1, "", "diff"], [103, 2, 1, "", "integrate"], [103, 2, 1, "", "jacobian"], [103, 2, 1, "", "limit"]], "sympy.matrices.matrices.MatrixDeterminant": [[103, 2, 1, "", "adjugate"], [103, 2, 1, "", "charpoly"], [103, 2, 1, "", "cofactor"], [103, 2, 1, "", "cofactor_matrix"], [103, 2, 1, "", "det"], [103, 2, 1, "", "minor"], [103, 2, 1, "", "minor_submatrix"], [103, 2, 1, "", "per"]], "sympy.matrices.matrices.MatrixEigen": [[103, 2, 1, "", "bidiagonal_decomposition"], [103, 2, 1, "", "bidiagonalize"], [103, 2, 1, "", "diagonalize"], [103, 2, 1, "", "eigenvals"], [103, 2, 1, "", "eigenvects"], [103, 2, 1, "", "is_diagonalizable"], [103, 3, 1, "", "is_indefinite"], [103, 3, 1, "", "is_negative_definite"], [103, 3, 1, "", "is_negative_semidefinite"], [103, 3, 1, "", "is_positive_definite"], [103, 3, 1, "", "is_positive_semidefinite"], [103, 2, 1, "", "jordan_form"], [103, 2, 1, "", "left_eigenvects"], [103, 2, 1, "", "singular_values"]], "sympy.matrices.matrices.MatrixReductions": [[103, 2, 1, "", "echelon_form"], [103, 2, 1, "", "elementary_col_op"], [103, 2, 1, "", "elementary_row_op"], [103, 3, 1, "", "is_echelon"], [103, 2, 1, "", "rank"], [103, 2, 1, "", "rref"]], "sympy.matrices.matrices.MatrixSubspaces": [[103, 2, 1, "", "columnspace"], [103, 2, 1, "", "nullspace"], [103, 2, 1, "", "orthogonalize"], [103, 2, 1, "", "rowspace"]], "sympy.matrices.normalforms": [[104, 4, 1, "", "hermite_normal_form"], [104, 4, 1, "", "smith_normal_form"]], "sympy.matrices.sparse": [[105, 1, 1, "", "MutableSparseMatrix"], [105, 5, 1, "", "SparseMatrix"]], "sympy.matrices.sparsetools": [[106, 2, 1, "", "_csrtodok"], [106, 2, 1, "", "_doktocsr"], [106, 2, 1, "", "banded"]], "sympy.ntheory": [[107, 0, 0, "-", "bbp_pi"], [107, 0, 0, "-", "continued_fraction"], [107, 0, 0, "-", "digits"], [107, 0, 0, "-", "ecm"], [107, 0, 0, "-", "egyptian_fraction"], [107, 0, 0, "-", "factor_"], [107, 0, 0, "-", "generate"], [107, 1, 1, "", "mobius"], [107, 0, 0, "-", "modular"], [107, 0, 0, "-", "multinomial"], [107, 0, 0, "-", "partitions_"], [107, 0, 0, "-", "primetest"], [107, 0, 0, "-", "qs"], [107, 0, 0, "-", "residue_ntheory"]], "sympy.ntheory.bbp_pi": [[107, 4, 1, "", "pi_hex_digits"]], "sympy.ntheory.continued_fraction": [[107, 4, 1, "", "continued_fraction"], [107, 4, 1, "", "continued_fraction_convergents"], [107, 4, 1, "", "continued_fraction_iterator"], [107, 4, 1, "", "continued_fraction_periodic"], [107, 4, 1, "", "continued_fraction_reduce"]], "sympy.ntheory.digits": [[107, 4, 1, "", "count_digits"], [107, 4, 1, "", "digits"], [107, 4, 1, "", "is_palindromic"]], "sympy.ntheory.ecm": [[107, 4, 1, "", "ecm"]], "sympy.ntheory.egyptian_fraction": [[107, 4, 1, "", "egyptian_fraction"]], "sympy.ntheory.factor_": [[107, 4, 1, "", "abundance"], [107, 4, 1, "", "antidivisor_count"], [107, 4, 1, "", "antidivisors"], [107, 4, 1, "", "core"], [107, 4, 1, "", "digits"], [107, 4, 1, "", "divisor_count"], [107, 1, 1, "", "divisor_sigma"], [107, 4, 1, "", "divisors"], [107, 4, 1, "", "factorint"], [107, 4, 1, "", "factorrat"], [107, 4, 1, "", "is_abundant"], [107, 4, 1, "", "is_amicable"], [107, 4, 1, "", "is_deficient"], [107, 4, 1, "", "is_mersenne_prime"], [107, 4, 1, "", "is_perfect"], [107, 4, 1, "", "mersenne_prime_exponent"], [107, 4, 1, "", "multiplicity"], [107, 4, 1, "", "perfect_power"], [107, 4, 1, "", "pollard_pm1"], [107, 4, 1, "", "pollard_rho"], [107, 4, 1, "", "primefactors"], [107, 1, 1, "", "primenu"], [107, 1, 1, "", "primeomega"], [107, 4, 1, "", "proper_divisor_count"], [107, 4, 1, "", "proper_divisors"], [107, 1, 1, "", "reduced_totient"], [107, 4, 1, "", "smoothness"], [107, 4, 1, "", "smoothness_p"], [107, 1, 1, "", "totient"], [107, 4, 1, "", "trailing"], [107, 4, 1, "", "udivisor_count"], [107, 1, 1, "", "udivisor_sigma"], [107, 4, 1, "", "udivisors"]], "sympy.ntheory.generate": [[107, 1, 1, "", "Sieve"], [107, 4, 1, "", "composite"], [107, 4, 1, "", "compositepi"], [107, 4, 1, "", "cycle_length"], [107, 4, 1, "", "nextprime"], [107, 4, 1, "", "prevprime"], [107, 4, 1, "", "prime"], [107, 4, 1, "", "primepi"], [107, 4, 1, "", "primerange"], [107, 4, 1, "", "primorial"], [107, 4, 1, "", "randprime"]], "sympy.ntheory.generate.Sieve": [[107, 2, 1, "", "extend"], [107, 2, 1, "", "extend_to_no"], [107, 2, 1, "", "mobiusrange"], [107, 2, 1, "", "primerange"], [107, 2, 1, "", "search"], [107, 2, 1, "", "totientrange"]], "sympy.ntheory.modular": [[107, 4, 1, "", "crt"], [107, 4, 1, "", "crt1"], [107, 4, 1, "", "crt2"], [107, 4, 1, "", "solve_congruence"], [107, 4, 1, "", "symmetric_residue"]], "sympy.ntheory.multinomial": [[107, 4, 1, "", "binomial_coefficients"], [107, 4, 1, "", "binomial_coefficients_list"], [107, 4, 1, "", "multinomial_coefficients"], [107, 4, 1, "", "multinomial_coefficients_iterator"]], "sympy.ntheory.partitions_": [[107, 4, 1, "", "npartitions"]], "sympy.ntheory.primetest": [[107, 4, 1, "", "is_euler_pseudoprime"], [107, 4, 1, "", "is_extra_strong_lucas_prp"], [107, 4, 1, "", "is_gaussian_prime"], [107, 4, 1, "", "is_lucas_prp"], [107, 4, 1, "", "is_square"], [107, 4, 1, "", "is_strong_lucas_prp"], [107, 4, 1, "", "isprime"], [107, 4, 1, "", "mr"]], "sympy.ntheory.qs": [[107, 4, 1, "", "qs"]], "sympy.ntheory.residue_ntheory": [[107, 4, 1, "", "binomial_mod"], [107, 4, 1, "", "discrete_log"], [107, 4, 1, "", "is_nthpow_residue"], [107, 4, 1, "", "is_primitive_root"], [107, 4, 1, "", "is_quad_residue"], [107, 4, 1, "", "jacobi_symbol"], [107, 4, 1, "", "legendre_symbol"], [107, 4, 1, "", "n_order"], [107, 4, 1, "", "nthroot_mod"], [107, 4, 1, "", "polynomial_congruence"], [107, 4, 1, "", "primitive_root"], [107, 4, 1, "", "quadratic_congruence"], [107, 4, 1, "", "quadratic_residues"], [107, 4, 1, "", "sqrt_mod"], [107, 4, 1, "", "sqrt_mod_iter"]], "sympy.parsing.latex": [[109, 1, 1, "", "LaTeXParsingError"], [109, 4, 1, "", "parse_latex"]], "sympy.parsing.mathematica": [[109, 4, 1, "", "parse_mathematica"]], "sympy.parsing.maxima": [[109, 4, 1, "", "parse_maxima"]], "sympy.parsing": [[109, 0, 0, "-", "sym_expr"]], "sympy.parsing.sym_expr": [[109, 1, 1, "", "SymPyExpression"]], "sympy.parsing.sym_expr.SymPyExpression": [[109, 2, 1, "", "convert_to_c"], [109, 2, 1, "", "convert_to_expr"], [109, 2, 1, "", "convert_to_fortran"], [109, 2, 1, "", "convert_to_python"], [109, 2, 1, "", "return_expr"]], "sympy.parsing.sympy_parser": [[109, 4, 1, "", "auto_number"], [109, 4, 1, "", "auto_symbol"], [109, 4, 1, "", "convert_xor"], [109, 4, 1, "", "eval_expr"], [109, 4, 1, "", "factorial_notation"], [109, 4, 1, "", "function_exponentiation"], [109, 4, 1, "", "implicit_application"], [109, 4, 1, "", "implicit_multiplication"], [109, 4, 1, "", "implicit_multiplication_application"], [109, 4, 1, "", "lambda_notation"], [109, 4, 1, "", "parse_expr"], [109, 4, 1, "", "rationalize"], [109, 4, 1, "", "repeated_decimals"], [109, 4, 1, "", "split_symbols"], [109, 4, 1, "", "split_symbols_custom"], [109, 6, 1, "", "standard_transformations"], [109, 4, 1, "", "stringify_expr"]], "sympy.physics.continuum_mechanics": [[110, 0, 0, "-", "beam"], [113, 0, 0, "-", "truss"]], "sympy.physics.continuum_mechanics.beam": [[110, 1, 1, "", "Beam"], [110, 1, 1, "", "Beam3D"]], "sympy.physics.continuum_mechanics.beam.Beam": [[110, 3, 1, "", "applied_loads"], [110, 2, 1, "", "apply_load"], [110, 2, 1, "", "apply_support"], [110, 3, 1, "", "area"], [110, 2, 1, "", "bending_moment"], [110, 3, 1, "", "boundary_conditions"], [110, 3, 1, "", "cross_section"], [110, 2, 1, "", "deflection"], [110, 2, 1, "", "draw"], [110, 3, 1, "", "elastic_modulus"], [110, 3, 1, "", "ild_moment"], [110, 3, 1, "", "ild_reactions"], [110, 3, 1, "", "ild_shear"], [110, 2, 1, "", "join"], [110, 3, 1, "", "length"], [110, 3, 1, "", "load"], [110, 2, 1, "", "max_bmoment"], [110, 2, 1, "", "max_deflection"], [110, 2, 1, "", "max_shear_force"], [110, 2, 1, "", "plot_bending_moment"], [110, 2, 1, "", "plot_deflection"], [110, 2, 1, "", "plot_ild_moment"], [110, 2, 1, "", "plot_ild_reactions"], [110, 2, 1, "", "plot_ild_shear"], [110, 2, 1, "", "plot_loading_results"], [110, 2, 1, "", "plot_shear_force"], [110, 2, 1, "", "plot_shear_stress"], [110, 2, 1, "", "plot_slope"], [110, 2, 1, "", "point_cflexure"], [110, 3, 1, "", "reaction_loads"], [110, 2, 1, "", "remove_load"], [110, 3, 1, "", "second_moment"], [110, 2, 1, "", "shear_force"], [110, 2, 1, "", "shear_stress"], [110, 2, 1, "", "slope"], [110, 2, 1, "", "solve_for_ild_moment"], [110, 2, 1, "", "solve_for_ild_reactions"], [110, 2, 1, "", "solve_for_ild_shear"], [110, 2, 1, "", "solve_for_reaction_loads"], [110, 3, 1, "", "variable"]], "sympy.physics.continuum_mechanics.beam.Beam3D": [[110, 2, 1, "", "angular_deflection"], [110, 2, 1, "", "apply_load"], [110, 2, 1, "", "apply_moment_load"], [110, 3, 1, "", "area"], [110, 2, 1, "", "axial_force"], [110, 2, 1, "", "axial_stress"], [110, 2, 1, "", "bending_moment"], [110, 3, 1, "", "boundary_conditions"], [110, 2, 1, "", "deflection"], [110, 3, 1, "", "load_vector"], [110, 2, 1, "", "max_bending_moment"], [110, 2, 1, "", "max_bmoment"], [110, 2, 1, "", "max_deflection"], [110, 2, 1, "", "max_shear_force"], [110, 3, 1, "", "moment_load_vector"], [110, 2, 1, "", "plot_bending_moment"], [110, 2, 1, "", "plot_deflection"], [110, 2, 1, "", "plot_loading_results"], [110, 2, 1, "", "plot_shear_force"], [110, 2, 1, "", "plot_shear_stress"], [110, 2, 1, "", "plot_slope"], [110, 2, 1, "", "polar_moment"], [110, 3, 1, "", "second_moment"], [110, 2, 1, "", "shear_force"], [110, 3, 1, "", "shear_modulus"], [110, 2, 1, "", "shear_stress"], [110, 2, 1, "", "slope"], [110, 2, 1, "", "solve_for_reaction_loads"], [110, 2, 1, "", "solve_for_torsion"], [110, 2, 1, "", "torsional_moment"]], "sympy.physics.continuum_mechanics.truss": [[113, 1, 1, "", "Truss"]], "sympy.physics.continuum_mechanics.truss.Truss": [[113, 2, 1, "", "add_member"], [113, 2, 1, "", "add_node"], [113, 2, 1, "", "apply_load"], [113, 2, 1, "", "apply_support"], [113, 2, 1, "", "change_member_label"], [113, 2, 1, "", "change_node_label"], [113, 2, 1, "", "draw"], [113, 3, 1, "", "internal_forces"], [113, 3, 1, "", "loads"], [113, 3, 1, "", "member_lengths"], [113, 3, 1, "", "members"], [113, 3, 1, "", "node_labels"], [113, 3, 1, "", "node_positions"], [113, 3, 1, "", "nodes"], [113, 3, 1, "", "reaction_loads"], [113, 2, 1, "", "remove_load"], [113, 2, 1, "", "remove_member"], [113, 2, 1, "", "remove_node"], [113, 2, 1, "", "remove_support"], [113, 2, 1, "", "solve"], [113, 3, 1, "", "supports"]], "sympy.physics": [[116, 0, 0, "-", "control"], [119, 0, 0, "-", "hydrogen"], [120, 0, 0, "-", "matrices"], [141, 0, 0, "-", "mechanics"], [156, 0, 0, "-", "paulialgebra"], [157, 0, 0, "-", "qho_1d"], [181, 0, 0, "-", "secondquant"], [182, 0, 0, "-", "sho"], [198, 0, 0, "-", "vector"], [201, 0, 0, "-", "wigner"]], "sympy.physics.control.control_plots": [[115, 2, 1, "", "bode_magnitude_numerical_data"], [115, 2, 1, "", "bode_magnitude_plot"], [115, 2, 1, "", "bode_phase_numerical_data"], [115, 2, 1, "", "bode_phase_plot"], [115, 2, 1, "", "bode_plot"], [115, 2, 1, "", "impulse_response_numerical_data"], [115, 2, 1, "", "impulse_response_plot"], [115, 2, 1, "", "pole_zero_numerical_data"], [115, 2, 1, "", "pole_zero_plot"], [115, 2, 1, "", "ramp_response_numerical_data"], [115, 2, 1, "", "ramp_response_plot"], [115, 2, 1, "", "step_response_numerical_data"], [115, 2, 1, "", "step_response_plot"]], "sympy.physics.control": [[117, 0, 0, "-", "lti"]], "sympy.physics.control.lti": [[117, 1, 1, "", "Feedback"], [117, 1, 1, "", "MIMOFeedback"], [117, 1, 1, "", "MIMOParallel"], [117, 1, 1, "", "MIMOSeries"], [117, 1, 1, "", "Parallel"], [117, 1, 1, "", "Series"], [117, 1, 1, "", "TransferFunction"], [117, 1, 1, "", "TransferFunctionMatrix"], [117, 4, 1, "", "backward_diff"], [117, 4, 1, "", "bilinear"], [117, 4, 1, "", "forward_diff"], [117, 4, 1, "", "gbt"]], "sympy.physics.control.lti.Feedback": [[117, 2, 1, "", "doit"], [117, 3, 1, "", "sensitivity"], [117, 3, 1, "", "sign"], [117, 3, 1, "", "sys1"], [117, 3, 1, "", "sys2"], [117, 3, 1, "", "var"]], "sympy.physics.control.lti.MIMOFeedback": [[117, 2, 1, "", "doit"], [117, 3, 1, "", "sensitivity"], [117, 3, 1, "", "sign"], [117, 3, 1, "", "sys1"], [117, 3, 1, "", "sys2"], [117, 3, 1, "", "var"]], "sympy.physics.control.lti.MIMOParallel": [[117, 2, 1, "", "doit"], [117, 3, 1, "", "num_inputs"], [117, 3, 1, "", "num_outputs"], [117, 3, 1, "", "shape"], [117, 3, 1, "", "var"]], "sympy.physics.control.lti.MIMOSeries": [[117, 2, 1, "", "doit"], [117, 3, 1, "", "num_inputs"], [117, 3, 1, "", "num_outputs"], [117, 3, 1, "", "shape"], [117, 3, 1, "", "var"]], "sympy.physics.control.lti.Parallel": [[117, 2, 1, "", "doit"], [117, 3, 1, "", "is_biproper"], [117, 3, 1, "", "is_proper"], [117, 3, 1, "", "is_strictly_proper"], [117, 2, 1, "", "to_expr"], [117, 3, 1, "", "var"]], "sympy.physics.control.lti.Series": [[117, 2, 1, "", "doit"], [117, 3, 1, "", "is_biproper"], [117, 3, 1, "", "is_proper"], [117, 3, 1, "", "is_strictly_proper"], [117, 2, 1, "", "to_expr"], [117, 3, 1, "", "var"]], "sympy.physics.control.lti.TransferFunction": [[117, 2, 1, "", "dc_gain"], [117, 3, 1, "", "den"], [117, 2, 1, "", "expand"], [117, 2, 1, "", "from_coeff_lists"], [117, 2, 1, "", "from_rational_expression"], [117, 2, 1, "", "from_zpk"], [117, 3, 1, "", "is_biproper"], [117, 3, 1, "", "is_proper"], [117, 2, 1, "", "is_stable"], [117, 3, 1, "", "is_strictly_proper"], [117, 3, 1, "", "num"], [117, 2, 1, "", "poles"], [117, 2, 1, "", "to_expr"], [117, 3, 1, "", "var"], [117, 2, 1, "", "zeros"]], "sympy.physics.control.lti.TransferFunctionMatrix": [[117, 2, 1, "", "elem_poles"], [117, 2, 1, "", "elem_zeros"], [117, 2, 1, "", "expand"], [117, 2, 1, "", "from_Matrix"], [117, 3, 1, "", "num_inputs"], [117, 3, 1, "", "num_outputs"], [117, 3, 1, "", "shape"], [117, 2, 1, "", "transpose"], [117, 3, 1, "", "var"]], "sympy.physics.hep": [[118, 0, 0, "-", "gamma_matrices"]], "sympy.physics.hep.gamma_matrices": [[118, 4, 1, "", "extract_type_tens"], [118, 4, 1, "", "gamma_trace"], [118, 4, 1, "", "kahane_simplify"], [118, 4, 1, "", "simplify_gpgp"]], "sympy.physics.hydrogen": [[119, 4, 1, "", "E_nl"], [119, 4, 1, "", "E_nl_dirac"], [119, 4, 1, "", "Psi_nlm"], [119, 4, 1, "", "R_nl"]], "sympy.physics.matrices": [[120, 4, 1, "", "mdft"], [120, 4, 1, "", "mgamma"], [120, 4, 1, "", "msigma"], [120, 4, 1, "", "pat_matrix"]], "sympy.physics.mechanics._system": [[130, 1, 1, "", "System"]], "sympy.physics.mechanics._system.System": [[130, 3, 1, "", "actuators"], [130, 2, 1, "", "add_actuators"], [130, 2, 1, "", "add_bodies"], [130, 2, 1, "", "add_coordinates"], [130, 2, 1, "", "add_holonomic_constraints"], [130, 2, 1, "", "add_joints"], [130, 2, 1, "", "add_kdes"], [130, 2, 1, "", "add_loads"], [130, 2, 1, "", "add_nonholonomic_constraints"], [130, 2, 1, "", "add_speeds"], [130, 2, 1, "", "apply_gravity"], [130, 3, 1, "", "bodies"], [130, 3, 1, "", "eom_method"], [130, 3, 1, "", "forcing"], [130, 3, 1, "", "forcing_full"], [130, 2, 1, "", "form_eoms"], [130, 3, 1, "", "frame"], [130, 2, 1, "", "from_newtonian"], [130, 2, 1, "", "get_body"], [130, 2, 1, "", "get_joint"], [130, 3, 1, "", "holonomic_constraints"], [130, 3, 1, "", "joints"], [130, 3, 1, "", "kdes"], [130, 3, 1, "", "loads"], [130, 3, 1, "", "mass_matrix"], [130, 3, 1, "", "mass_matrix_full"], [130, 3, 1, "", "nonholonomic_constraints"], [130, 3, 1, "", "origin"], [130, 3, 1, "", "q"], [130, 3, 1, "", "q_dep"], [130, 3, 1, "", "q_ind"], [130, 2, 1, "", "rhs"], [130, 3, 1, "", "u"], [130, 3, 1, "", "u_dep"], [130, 3, 1, "", "u_ind"], [130, 2, 1, "", "validate_system"], [130, 3, 1, "", "x"], [130, 3, 1, "", "y"], [130, 3, 1, "", "z"]], "sympy.physics.mechanics": [[122, 0, 0, "-", "body"], [123, 4, 1, "", "find_dynamicsymbols"], [125, 0, 0, "-", "joint"], [125, 0, 0, "-", "jointsmethod"], [126, 0, 0, "-", "kane"], [126, 0, 0, "-", "lagrange"], [127, 0, 0, "-", "linearize"], [123, 4, 1, "", "msubs"], [130, 0, 0, "-", "system"]], "sympy.physics.mechanics.body": [[122, 1, 1, "", "Body"]], "sympy.physics.mechanics.body.Body": [[122, 2, 1, "", "ang_vel_in"], [122, 2, 1, "", "apply_force"], [122, 2, 1, "", "apply_torque"], [122, 2, 1, "", "clear_loads"], [122, 2, 1, "", "dcm"], [122, 3, 1, "", "inertia"], [122, 2, 1, "", "kinetic_energy"], [122, 2, 1, "", "masscenter_vel"], [122, 2, 1, "", "parallel_axis"], [122, 2, 1, "", "remove_load"], [122, 3, 1, "", "x"], [122, 3, 1, "", "y"], [122, 3, 1, "", "z"]], "sympy.physics.mechanics.functions": [[128, 4, 1, "", "Lagrangian"], [128, 4, 1, "", "angular_momentum"], [128, 4, 1, "", "center_of_mass"], [128, 4, 1, "", "find_dynamicsymbols"], [128, 4, 1, "", "kinetic_energy"], [128, 4, 1, "", "linear_momentum"], [128, 4, 1, "", "potential_energy"]], "sympy.physics.mechanics.inertia": [[128, 1, 1, "", "Inertia"], [128, 4, 1, "", "inertia"], [128, 4, 1, "", "inertia_of_point_mass"]], "sympy.physics.mechanics.inertia.Inertia": [[128, 2, 1, "", "from_inertia_scalars"]], "sympy.physics.mechanics.joint": [[125, 1, 1, "", "CylindricalJoint"], [125, 1, 1, "", "Joint"], [125, 1, 1, "", "PinJoint"], [125, 1, 1, "", "PlanarJoint"], [125, 1, 1, "", "PrismaticJoint"], [125, 1, 1, "", "SphericalJoint"], [125, 1, 1, "", "WeldJoint"]], "sympy.physics.mechanics.joint.CylindricalJoint": [[125, 3, 1, "", "joint_axis"], [125, 3, 1, "", "rotation_coordinate"], [125, 3, 1, "", "rotation_speed"], [125, 3, 1, "", "translation_coordinate"], [125, 3, 1, "", "translation_speed"]], "sympy.physics.mechanics.joint.Joint": [[125, 3, 1, "", "child"], [125, 3, 1, "", "child_axis"], [125, 3, 1, "", "child_point"], [125, 3, 1, "", "coordinates"], [125, 3, 1, "", "kdes"], [125, 3, 1, "", "name"], [125, 3, 1, "", "parent"], [125, 3, 1, "", "parent_axis"], [125, 3, 1, "", "parent_point"], [125, 3, 1, "", "speeds"]], "sympy.physics.mechanics.joint.PinJoint": [[125, 3, 1, "", "joint_axis"]], "sympy.physics.mechanics.joint.PlanarJoint": [[125, 3, 1, "", "planar_coordinates"], [125, 3, 1, "", "planar_speeds"], [125, 3, 1, "", "planar_vectors"], [125, 3, 1, "", "rotation_axis"], [125, 3, 1, "", "rotation_coordinate"], [125, 3, 1, "", "rotation_speed"]], "sympy.physics.mechanics.joint.PrismaticJoint": [[125, 3, 1, "", "joint_axis"]], "sympy.physics.mechanics.jointsmethod": [[125, 1, 1, "", "JointsMethod"]], "sympy.physics.mechanics.jointsmethod.JointsMethod": [[125, 3, 1, "", "bodies"], [125, 3, 1, "", "forcing"], [125, 3, 1, "", "forcing_full"], [125, 2, 1, "", "form_eoms"], [125, 3, 1, "", "kdes"], [125, 3, 1, "", "loads"], [125, 3, 1, "", "mass_matrix"], [125, 3, 1, "", "mass_matrix_full"], [125, 3, 1, "", "method"], [125, 3, 1, "", "q"], [125, 2, 1, "", "rhs"], [125, 3, 1, "", "u"]], "sympy.physics.mechanics.kane": [[126, 1, 1, "", "KanesMethod"]], "sympy.physics.mechanics.kane.KanesMethod": [[126, 3, 1, "", "auxiliary_eqs"], [126, 3, 1, "", "forcing"], [126, 3, 1, "", "forcing_full"], [126, 3, 1, "", "forcing_kin"], [126, 2, 1, "", "kanes_equations"], [126, 2, 1, "", "kindiffdict"], [126, 2, 1, "", "linearize"], [126, 3, 1, "", "mass_matrix"], [126, 3, 1, "", "mass_matrix_full"], [126, 3, 1, "", "mass_matrix_kin"], [126, 2, 1, "", "rhs"], [126, 2, 1, "", "to_linearizer"]], "sympy.physics.mechanics.lagrange": [[126, 1, 1, "", "LagrangesMethod"]], "sympy.physics.mechanics.lagrange.LagrangesMethod": [[126, 3, 1, "", "forcing"], [126, 3, 1, "", "forcing_full"], [126, 2, 1, "", "form_lagranges_equations"], [126, 2, 1, "", "linearize"], [126, 3, 1, "", "mass_matrix"], [126, 3, 1, "", "mass_matrix_full"], [126, 2, 1, "", "rhs"], [126, 2, 1, "", "solve_multipliers"], [126, 2, 1, "", "to_linearizer"]], "sympy.physics.mechanics.linearize": [[127, 1, 1, "", "Linearizer"]], "sympy.physics.mechanics.linearize.Linearizer": [[127, 2, 1, "", "__init__"], [127, 2, 1, "", "linearize"]], "sympy.physics.mechanics.loads": [[128, 1, 1, "", "Force"], [128, 1, 1, "", "Torque"]], "sympy.physics.mechanics.particle": [[128, 1, 1, "", "Particle"]], "sympy.physics.mechanics.particle.Particle": [[128, 2, 1, "", "angular_momentum"], [128, 2, 1, "", "kinetic_energy"], [128, 2, 1, "", "linear_momentum"], [128, 3, 1, "", "mass"], [128, 3, 1, "", "masscenter"], [128, 3, 1, "", "name"], [128, 2, 1, "", "parallel_axis"], [128, 3, 1, "", "point"], [128, 3, 1, "", "potential_energy"]], "sympy.physics.mechanics.rigidbody": [[128, 1, 1, "", "RigidBody"]], "sympy.physics.mechanics.rigidbody.RigidBody": [[128, 2, 1, "", "angular_momentum"], [128, 3, 1, "", "central_inertia"], [128, 3, 1, "", "frame"], [128, 3, 1, "", "inertia"], [128, 2, 1, "", "kinetic_energy"], [128, 2, 1, "", "linear_momentum"], [128, 3, 1, "", "mass"], [128, 3, 1, "", "masscenter"], [128, 3, 1, "", "name"], [128, 2, 1, "", "parallel_axis"], [128, 3, 1, "", "potential_energy"], [128, 3, 1, "", "x"], [128, 3, 1, "", "y"], [128, 3, 1, "", "z"]], "sympy.physics.mechanics.system": [[130, 1, 1, "", "SymbolicSystem"]], "sympy.physics.mechanics.system.SymbolicSystem": [[130, 3, 1, "", "alg_con"], [130, 3, 1, "", "bodies"], [130, 3, 1, "", "comb_explicit_rhs"], [130, 3, 1, "", "comb_implicit_mat"], [130, 3, 1, "", "comb_implicit_rhs"], [130, 2, 1, "", "compute_explicit_form"], [130, 2, 1, "", "constant_symbols"], [130, 3, 1, "", "coordinates"], [130, 3, 1, "", "dyn_implicit_mat"], [130, 3, 1, "", "dyn_implicit_rhs"], [130, 2, 1, "", "dynamic_symbols"], [130, 3, 1, "", "kin_explicit_rhs"], [130, 3, 1, "", "loads"], [130, 3, 1, "", "speeds"], [130, 3, 1, "", "states"]], "sympy.physics.optics": [[150, 0, 0, "-", "gaussopt"], [152, 0, 0, "-", "medium"], [153, 0, 0, "-", "polarization"], [154, 0, 0, "-", "utils"], [155, 0, 0, "-", "waves"]], "sympy.physics.optics.gaussopt": [[150, 1, 1, "", "BeamParameter"], [150, 1, 1, "", "CurvedMirror"], [150, 1, 1, "", "CurvedRefraction"], [150, 1, 1, "", "FlatMirror"], [150, 1, 1, "", "FlatRefraction"], [150, 1, 1, "", "FreeSpace"], [150, 1, 1, "", "GeometricRay"], [150, 1, 1, "", "RayTransferMatrix"], [150, 1, 1, "", "ThinLens"], [150, 4, 1, "", "conjugate_gauss_beams"], [150, 4, 1, "", "gaussian_conj"], [150, 4, 1, "", "geometric_conj_ab"], [150, 4, 1, "", "geometric_conj_af"], [150, 4, 1, "", "geometric_conj_bf"], [150, 4, 1, "", "rayleigh2waist"], [150, 4, 1, "", "waist2rayleigh"]], "sympy.physics.optics.gaussopt.BeamParameter": [[150, 3, 1, "", "divergence"], [150, 3, 1, "", "gouy"], [150, 3, 1, "", "q"], [150, 3, 1, "", "radius"], [150, 3, 1, "", "w"], [150, 3, 1, "", "w_0"], [150, 3, 1, "", "waist_approximation_limit"]], "sympy.physics.optics.gaussopt.GeometricRay": [[150, 3, 1, "", "angle"], [150, 3, 1, "", "height"]], "sympy.physics.optics.gaussopt.RayTransferMatrix": [[150, 3, 1, "", "A"], [150, 3, 1, "", "B"], [150, 3, 1, "", "C"], [150, 3, 1, "", "D"]], "sympy.physics.optics.medium": [[152, 1, 1, "", "Medium"]], "sympy.physics.optics.medium.Medium": [[152, 3, 1, "", "refractive_index"], [152, 3, 1, "", "speed"]], "sympy.physics.optics.polarization": [[153, 4, 1, "", "half_wave_retarder"], [153, 4, 1, "", "jones_2_stokes"], [153, 4, 1, "", "jones_vector"], [153, 4, 1, "", "linear_polarizer"], [153, 4, 1, "", "mueller_matrix"], [153, 4, 1, "", "phase_retarder"], [153, 4, 1, "", "polarizing_beam_splitter"], [153, 4, 1, "", "quarter_wave_retarder"], [153, 4, 1, "", "reflective_filter"], [153, 4, 1, "", "stokes_vector"], [153, 4, 1, "", "transmissive_filter"]], "sympy.physics.optics.utils": [[154, 4, 1, "", "brewster_angle"], [154, 4, 1, "", "critical_angle"], [154, 4, 1, "", "deviation"], [154, 4, 1, "", "fresnel_coefficients"], [154, 4, 1, "", "hyperfocal_distance"], [154, 4, 1, "", "lens_formula"], [154, 4, 1, "", "lens_makers_formula"], [154, 4, 1, "", "mirror_formula"], [154, 4, 1, "", "refraction_angle"], [154, 4, 1, "", "transverse_magnification"]], "sympy.physics.optics.waves": [[155, 1, 1, "", "TWave"]], "sympy.physics.optics.waves.TWave": [[155, 3, 1, "", "amplitude"], [155, 3, 1, "", "angular_velocity"], [155, 3, 1, "", "frequency"], [155, 3, 1, "", "n"], [155, 3, 1, "", "phase"], [155, 3, 1, "", "speed"], [155, 3, 1, "", "time_period"], [155, 3, 1, "", "wavelength"], [155, 3, 1, "", "wavenumber"]], "sympy.physics.paulialgebra": [[156, 4, 1, "", "evaluate_pauli_product"]], "sympy.physics.qho_1d": [[157, 4, 1, "", "E_n"], [157, 4, 1, "", "coherent_state"], [157, 4, 1, "", "psi_n"]], "sympy.physics.quantum": [[158, 0, 0, "-", "anticommutator"], [159, 0, 0, "-", "cartesian"], [160, 0, 0, "-", "cg"], [161, 0, 0, "-", "circuitplot"], [162, 0, 0, "-", "commutator"], [163, 0, 0, "-", "constants"], [164, 0, 0, "-", "dagger"], [165, 0, 0, "-", "gate"], [166, 0, 0, "-", "grover"], [167, 0, 0, "-", "hilbert"], [169, 0, 0, "-", "innerproduct"], [170, 0, 0, "-", "operator"], [171, 0, 0, "-", "operatorset"], [172, 0, 0, "-", "piab"], [173, 0, 0, "-", "qapply"], [174, 0, 0, "-", "qft"], [175, 0, 0, "-", "qubit"], [176, 0, 0, "-", "represent"], [177, 0, 0, "-", "shor"], [178, 0, 0, "-", "spin"], [179, 0, 0, "-", "state"], [180, 0, 0, "-", "tensorproduct"]], "sympy.physics.quantum.anticommutator": [[158, 1, 1, "", "AntiCommutator"]], "sympy.physics.quantum.anticommutator.AntiCommutator": [[158, 2, 1, "", "doit"]], "sympy.physics.quantum.cartesian": [[159, 1, 1, "", "PositionBra3D"], [159, 1, 1, "", "PositionKet3D"], [159, 1, 1, "", "PositionState3D"], [159, 1, 1, "", "PxBra"], [159, 1, 1, "", "PxKet"], [159, 1, 1, "", "PxOp"], [159, 1, 1, "", "XBra"], [159, 1, 1, "", "XKet"], [159, 1, 1, "", "XOp"], [159, 1, 1, "", "YOp"], [159, 1, 1, "", "ZOp"]], "sympy.physics.quantum.cartesian.PositionState3D": [[159, 3, 1, "", "position_x"], [159, 3, 1, "", "position_y"], [159, 3, 1, "", "position_z"]], "sympy.physics.quantum.cartesian.PxBra": [[159, 3, 1, "", "momentum"]], "sympy.physics.quantum.cartesian.PxKet": [[159, 3, 1, "", "momentum"]], "sympy.physics.quantum.cartesian.XBra": [[159, 3, 1, "", "position"]], "sympy.physics.quantum.cartesian.XKet": [[159, 3, 1, "", "position"]], "sympy.physics.quantum.cg": [[160, 1, 1, "", "CG"], [160, 1, 1, "", "Wigner3j"], [160, 1, 1, "", "Wigner6j"], [160, 1, 1, "", "Wigner9j"], [160, 4, 1, "", "cg_simp"]], "sympy.physics.quantum.circuitplot": [[161, 1, 1, "", "CircuitPlot"], [161, 4, 1, "", "CreateCGate"], [161, 1, 1, "", "Mx"], [161, 1, 1, "", "Mz"], [161, 4, 1, "", "circuit_plot"], [161, 4, 1, "", "labeller"]], "sympy.physics.quantum.circuitplot.CircuitPlot": [[161, 2, 1, "", "control_line"], [161, 2, 1, "", "control_point"], [161, 2, 1, "", "not_point"], [161, 2, 1, "", "one_qubit_box"], [161, 2, 1, "", "swap_point"], [161, 2, 1, "", "two_qubit_box"], [161, 2, 1, "", "update"]], "sympy.physics.quantum.commutator": [[162, 1, 1, "", "Commutator"]], "sympy.physics.quantum.commutator.Commutator": [[162, 2, 1, "", "doit"]], "sympy.physics.quantum.constants": [[163, 1, 1, "", "HBar"]], "sympy.physics.quantum.dagger": [[164, 1, 1, "", "Dagger"]], "sympy.physics.quantum.gate": [[165, 1, 1, "", "CGate"], [165, 1, 1, "", "CGateS"], [165, 5, 1, "", "CNOT"], [165, 1, 1, "", "CNotGate"], [165, 1, 1, "", "Gate"], [165, 5, 1, "", "H"], [165, 1, 1, "", "HadamardGate"], [165, 1, 1, "", "IdentityGate"], [165, 1, 1, "", "OneQubitGate"], [165, 5, 1, "", "Phase"], [165, 1, 1, "", "PhaseGate"], [165, 5, 1, "", "S"], [165, 5, 1, "", "SWAP"], [165, 1, 1, "", "SwapGate"], [165, 5, 1, "", "T"], [165, 1, 1, "", "TGate"], [165, 1, 1, "", "TwoQubitGate"], [165, 1, 1, "", "UGate"], [165, 5, 1, "", "X"], [165, 1, 1, "", "XGate"], [165, 5, 1, "", "Y"], [165, 1, 1, "", "YGate"], [165, 5, 1, "", "Z"], [165, 1, 1, "", "ZGate"], [165, 4, 1, "", "gate_simp"], [165, 4, 1, "", "gate_sort"], [165, 4, 1, "", "normalized"], [165, 4, 1, "", "random_circuit"]], "sympy.physics.quantum.gate.CGate": [[165, 3, 1, "", "controls"], [165, 2, 1, "", "decompose"], [165, 2, 1, "", "eval_controls"], [165, 3, 1, "", "gate"], [165, 3, 1, "", "min_qubits"], [165, 3, 1, "", "nqubits"], [165, 2, 1, "", "plot_gate"], [165, 3, 1, "", "targets"]], "sympy.physics.quantum.gate.CNotGate": [[165, 3, 1, "", "controls"], [165, 3, 1, "", "gate"], [165, 3, 1, "", "min_qubits"], [165, 3, 1, "", "targets"]], "sympy.physics.quantum.gate.Gate": [[165, 2, 1, "", "get_target_matrix"], [165, 3, 1, "", "min_qubits"], [165, 3, 1, "", "nqubits"], [165, 3, 1, "", "targets"]], "sympy.physics.quantum.gate.SwapGate": [[165, 2, 1, "", "decompose"]], "sympy.physics.quantum.gate.UGate": [[165, 2, 1, "", "get_target_matrix"], [165, 3, 1, "", "targets"]], "sympy.physics.quantum.grover": [[166, 1, 1, "", "OracleGate"], [166, 1, 1, "", "WGate"], [166, 4, 1, "", "apply_grover"], [166, 4, 1, "", "grover_iteration"], [166, 4, 1, "", "superposition_basis"]], "sympy.physics.quantum.grover.OracleGate": [[166, 3, 1, "", "search_function"], [166, 3, 1, "", "targets"]], "sympy.physics.quantum.hilbert": [[167, 1, 1, "", "ComplexSpace"], [167, 1, 1, "", "DirectSumHilbertSpace"], [167, 1, 1, "", "FockSpace"], [167, 1, 1, "", "HilbertSpace"], [167, 1, 1, "", "L2"], [167, 1, 1, "", "TensorPowerHilbertSpace"], [167, 1, 1, "", "TensorProductHilbertSpace"]], "sympy.physics.quantum.hilbert.DirectSumHilbertSpace": [[167, 2, 1, "", "eval"], [167, 3, 1, "", "spaces"]], "sympy.physics.quantum.hilbert.HilbertSpace": [[167, 3, 1, "", "dimension"]], "sympy.physics.quantum.hilbert.TensorProductHilbertSpace": [[167, 2, 1, "", "eval"], [167, 3, 1, "", "spaces"]], "sympy.physics.quantum.innerproduct": [[169, 1, 1, "", "InnerProduct"]], "sympy.physics.quantum.operator": [[170, 1, 1, "", "DifferentialOperator"], [170, 1, 1, "", "HermitianOperator"], [170, 1, 1, "", "IdentityOperator"], [170, 1, 1, "", "Operator"], [170, 1, 1, "", "OuterProduct"], [170, 1, 1, "", "UnitaryOperator"]], "sympy.physics.quantum.operator.DifferentialOperator": [[170, 3, 1, "", "expr"], [170, 3, 1, "", "free_symbols"], [170, 3, 1, "", "function"], [170, 3, 1, "", "variables"]], "sympy.physics.quantum.operator.OuterProduct": [[170, 3, 1, "", "bra"], [170, 3, 1, "", "ket"]], "sympy.physics.quantum.operatorset": [[171, 4, 1, "", "operators_to_state"], [171, 4, 1, "", "state_to_operators"]], "sympy.physics.quantum.piab": [[172, 1, 1, "", "PIABBra"], [172, 1, 1, "", "PIABHamiltonian"], [172, 1, 1, "", "PIABKet"]], "sympy.physics.quantum.qapply": [[173, 4, 1, "", "qapply"]], "sympy.physics.quantum.qft": [[174, 1, 1, "", "IQFT"], [174, 1, 1, "", "QFT"], [174, 5, 1, "", "Rk"], [174, 1, 1, "", "RkGate"]], "sympy.physics.quantum.qft.IQFT": [[174, 2, 1, "", "decompose"]], "sympy.physics.quantum.qft.QFT": [[174, 2, 1, "", "decompose"]], "sympy.physics.quantum.qubit": [[175, 1, 1, "", "IntQubit"], [175, 1, 1, "", "IntQubitBra"], [175, 1, 1, "", "Qubit"], [175, 1, 1, "", "QubitBra"], [175, 4, 1, "", "matrix_to_density"], [175, 4, 1, "", "matrix_to_qubit"], [175, 4, 1, "", "measure_all"], [175, 4, 1, "", "measure_all_oneshot"], [175, 4, 1, "", "measure_partial"], [175, 4, 1, "", "measure_partial_oneshot"], [175, 4, 1, "", "qubit_to_matrix"]], "sympy.physics.quantum.represent": [[176, 4, 1, "", "enumerate_states"], [176, 4, 1, "", "get_basis"], [176, 4, 1, "", "integrate_result"], [176, 4, 1, "", "rep_expectation"], [176, 4, 1, "", "rep_innerproduct"], [176, 4, 1, "", "represent"]], "sympy.physics.quantum.shor": [[177, 1, 1, "", "CMod"], [177, 4, 1, "", "period_find"], [177, 4, 1, "", "shor"]], "sympy.physics.quantum.shor.CMod": [[177, 3, 1, "", "N"], [177, 3, 1, "", "a"], [177, 3, 1, "", "t"]], "sympy.physics.quantum.spin": [[178, 1, 1, "", "J2Op"], [178, 1, 1, "", "JxBra"], [178, 1, 1, "", "JxBraCoupled"], [178, 1, 1, "", "JxKet"], [178, 1, 1, "", "JxKetCoupled"], [178, 1, 1, "", "JyBra"], [178, 1, 1, "", "JyBraCoupled"], [178, 1, 1, "", "JyKet"], [178, 1, 1, "", "JyKetCoupled"], [178, 1, 1, "", "JzBra"], [178, 1, 1, "", "JzBraCoupled"], [178, 1, 1, "", "JzKet"], [178, 1, 1, "", "JzKetCoupled"], [178, 1, 1, "", "JzOp"], [178, 1, 1, "", "Rotation"], [178, 1, 1, "", "WignerD"], [178, 4, 1, "", "couple"], [178, 4, 1, "", "uncouple"]], "sympy.physics.quantum.spin.Rotation": [[178, 2, 1, "", "D"], [178, 2, 1, "", "d"]], "sympy.physics.quantum.state": [[179, 1, 1, "", "Bra"], [179, 1, 1, "", "BraBase"], [179, 1, 1, "", "Ket"], [179, 1, 1, "", "KetBase"], [179, 1, 1, "", "OrthogonalBra"], [179, 1, 1, "", "OrthogonalKet"], [179, 1, 1, "", "OrthogonalState"], [179, 1, 1, "", "State"], [179, 1, 1, "", "StateBase"], [179, 1, 1, "", "TimeDepBra"], [179, 1, 1, "", "TimeDepKet"], [179, 1, 1, "", "TimeDepState"], [179, 1, 1, "", "Wavefunction"]], "sympy.physics.quantum.state.StateBase": [[179, 3, 1, "", "dual"], [179, 2, 1, "", "dual_class"], [179, 3, 1, "", "operators"]], "sympy.physics.quantum.state.TimeDepState": [[179, 3, 1, "", "label"], [179, 3, 1, "", "time"]], "sympy.physics.quantum.state.Wavefunction": [[179, 3, 1, "", "expr"], [179, 3, 1, "", "is_commutative"], [179, 3, 1, "", "is_normalized"], [179, 3, 1, "", "limits"], [179, 3, 1, "", "norm"], [179, 2, 1, "", "normalize"], [179, 2, 1, "", "prob"], [179, 3, 1, "", "variables"]], "sympy.physics.quantum.tensorproduct": [[180, 1, 1, "", "TensorProduct"], [180, 4, 1, "", "tensor_product_simp"]], "sympy.physics.secondquant": [[181, 1, 1, "", "AnnihilateBoson"], [181, 1, 1, "", "AnnihilateFermion"], [181, 1, 1, "", "AntiSymmetricTensor"], [181, 5, 1, "", "B"], [181, 5, 1, "", "BBra"], [181, 5, 1, "", "BKet"], [181, 5, 1, "", "Bd"], [181, 1, 1, "", "BosonicBasis"], [181, 1, 1, "", "Commutator"], [181, 1, 1, "", "CreateBoson"], [181, 1, 1, "", "CreateFermion"], [181, 1, 1, "", "Dagger"], [181, 5, 1, "", "F"], [181, 5, 1, "", "FBra"], [181, 5, 1, "", "FKet"], [181, 5, 1, "", "Fd"], [181, 1, 1, "", "FixedBosonicBasis"], [181, 1, 1, "", "FockState"], [181, 1, 1, "", "FockStateBosonBra"], [181, 1, 1, "", "FockStateBosonKet"], [181, 1, 1, "", "FockStateBra"], [181, 1, 1, "", "FockStateFermionBra"], [181, 1, 1, "", "FockStateFermionKet"], [181, 1, 1, "", "FockStateKet"], [181, 1, 1, "", "InnerProduct"], [181, 1, 1, "", "KroneckerDelta"], [181, 1, 1, "", "NO"], [181, 1, 1, "", "PermutationOperator"], [181, 1, 1, "", "VarBosonicBasis"], [181, 4, 1, "", "apply_operators"], [181, 4, 1, "", "contraction"], [181, 4, 1, "", "evaluate_deltas"], [181, 4, 1, "", "matrix_rep"], [181, 4, 1, "", "simplify_index_permutations"], [181, 4, 1, "", "substitute_dummies"], [181, 4, 1, "", "wicks"]], "sympy.physics.secondquant.AnnihilateBoson": [[181, 2, 1, "", "apply_operator"]], "sympy.physics.secondquant.AnnihilateFermion": [[181, 2, 1, "", "apply_operator"], [181, 3, 1, "", "is_only_q_annihilator"], [181, 3, 1, "", "is_only_q_creator"], [181, 3, 1, "", "is_q_annihilator"], [181, 3, 1, "", "is_q_creator"]], "sympy.physics.secondquant.AntiSymmetricTensor": [[181, 3, 1, "", "lower"], [181, 3, 1, "", "symbol"], [181, 3, 1, "", "upper"]], "sympy.physics.secondquant.Commutator": [[181, 2, 1, "", "doit"], [181, 2, 1, "", "eval"]], "sympy.physics.secondquant.CreateBoson": [[181, 2, 1, "", "apply_operator"]], "sympy.physics.secondquant.CreateFermion": [[181, 2, 1, "", "apply_operator"], [181, 3, 1, "", "is_only_q_annihilator"], [181, 3, 1, "", "is_only_q_creator"], [181, 3, 1, "", "is_q_annihilator"], [181, 3, 1, "", "is_q_creator"]], "sympy.physics.secondquant.Dagger": [[181, 2, 1, "", "eval"]], "sympy.physics.secondquant.FixedBosonicBasis": [[181, 2, 1, "", "index"], [181, 2, 1, "", "state"]], "sympy.physics.secondquant.InnerProduct": [[181, 3, 1, "", "bra"], [181, 3, 1, "", "ket"]], "sympy.physics.secondquant.KroneckerDelta": [[181, 2, 1, "", "eval"], [181, 3, 1, "", "indices_contain_equal_information"], [181, 3, 1, "", "is_above_fermi"], [181, 3, 1, "", "is_below_fermi"], [181, 3, 1, "", "is_only_above_fermi"], [181, 3, 1, "", "is_only_below_fermi"], [181, 3, 1, "", "killable_index"], [181, 3, 1, "", "preferred_index"]], "sympy.physics.secondquant.NO": [[181, 2, 1, "", "doit"], [181, 2, 1, "", "get_subNO"], [181, 3, 1, "", "has_q_annihilators"], [181, 3, 1, "", "has_q_creators"], [181, 2, 1, "", "iter_q_annihilators"], [181, 2, 1, "", "iter_q_creators"]], "sympy.physics.secondquant.PermutationOperator": [[181, 2, 1, "", "get_permuted"]], "sympy.physics.secondquant.VarBosonicBasis": [[181, 2, 1, "", "index"], [181, 2, 1, "", "state"]], "sympy.physics.sho": [[182, 4, 1, "", "E_nl"], [182, 4, 1, "", "R_nl"]], "sympy.physics.units": [[183, 0, 0, "-", "dimensions"], [187, 0, 0, "-", "prefixes"], [188, 0, 0, "-", "quantities"], [189, 0, 0, "-", "unitsystem"], [188, 0, 0, "-", "util"]], "sympy.physics.units.dimensions": [[183, 1, 1, "", "Dimension"], [183, 1, 1, "", "DimensionSystem"]], "sympy.physics.units.dimensions.Dimension": [[183, 2, 1, "", "has_integer_powers"]], "sympy.physics.units.dimensions.DimensionSystem": [[183, 3, 1, "", "can_transf_matrix"], [183, 3, 1, "", "dim"], [183, 2, 1, "", "dim_can_vector"], [183, 2, 1, "", "dim_vector"], [183, 3, 1, "", "inv_can_transf_matrix"], [183, 3, 1, "", "is_consistent"], [183, 2, 1, "", "is_dimensionless"], [183, 3, 1, "", "list_can_dims"], [183, 2, 1, "", "print_dim_base"]], "sympy.physics.units.prefixes": [[187, 1, 1, "", "Prefix"]], "sympy.physics.units.quantities": [[188, 1, 1, "", "Quantity"]], "sympy.physics.units.quantities.Quantity": [[188, 3, 1, "", "abbrev"], [188, 2, 1, "", "convert_to"], [188, 3, 1, "", "free_symbols"], [188, 3, 1, "", "is_prefixed"], [188, 3, 1, "", "scale_factor"], [188, 2, 1, "", "set_global_relative_scale_factor"]], "sympy.physics.units.unitsystem": [[189, 1, 1, "", "UnitSystem"]], "sympy.physics.units.unitsystem.UnitSystem": [[189, 3, 1, "", "dim"], [189, 2, 1, "", "extend"], [189, 2, 1, "", "get_units_non_prefixed"], [189, 3, 1, "", "is_consistent"]], "sympy.physics.units.util": [[188, 4, 1, "", "convert_to"]], "sympy.physics.vector.dyadic": [[191, 1, 1, "", "Dyadic"]], "sympy.physics.vector.dyadic.Dyadic": [[191, 2, 1, "", "applyfunc"], [191, 2, 1, "", "cross"], [191, 2, 1, "", "doit"], [191, 2, 1, "", "dot"], [191, 2, 1, "", "dt"], [191, 2, 1, "", "express"], [191, 3, 1, "", "func"], [191, 2, 1, "", "simplify"], [191, 2, 1, "", "subs"], [191, 2, 1, "", "to_matrix"], [191, 2, 1, "", "xreplace"]], "sympy.physics.vector": [[193, 4, 1, "", "dynamicsymbols"], [195, 0, 0, "-", "functions"], [195, 0, 0, "-", "point"]], "sympy.physics.vector.fieldfunctions": [[192, 4, 1, "", "curl"], [192, 4, 1, "", "divergence"], [192, 4, 1, "", "gradient"], [192, 4, 1, "", "is_conservative"], [192, 4, 1, "", "is_solenoidal"], [192, 4, 1, "", "scalar_potential"], [192, 4, 1, "", "scalar_potential_difference"]], "sympy.physics.vector.frame": [[191, 1, 1, "", "CoordinateSym"], [191, 1, 1, "", "ReferenceFrame"]], "sympy.physics.vector.frame.ReferenceFrame": [[191, 2, 1, "", "ang_acc_in"], [191, 2, 1, "", "ang_vel_in"], [191, 2, 1, "", "dcm"], [191, 2, 1, "", "orient"], [191, 2, 1, "", "orient_axis"], [191, 2, 1, "", "orient_body_fixed"], [191, 2, 1, "", "orient_explicit"], [191, 2, 1, "", "orient_quaternion"], [191, 2, 1, "", "orient_space_fixed"], [191, 2, 1, "", "orientnew"], [191, 2, 1, "", "partial_velocity"], [191, 2, 1, "", "set_ang_acc"], [191, 2, 1, "", "set_ang_vel"], [191, 3, 1, "", "u"], [191, 2, 1, "", "variable_map"], [191, 3, 1, "", "x"], [191, 3, 1, "", "xx"], [191, 3, 1, "", "xy"], [191, 3, 1, "", "xz"], [191, 3, 1, "", "y"], [191, 3, 1, "", "yx"], [191, 3, 1, "", "yy"], [191, 3, 1, "", "yz"], [191, 3, 1, "", "z"], [191, 3, 1, "", "zx"], [191, 3, 1, "", "zy"], [191, 3, 1, "", "zz"]], "sympy.physics.vector.functions": [[193, 4, 1, "", "cross"], [193, 4, 1, "", "dot"], [193, 4, 1, "", "express"], [195, 4, 1, "", "get_motion_params"], [195, 4, 1, "", "kinematic_equations"], [193, 4, 1, "", "outer"], [195, 4, 1, "", "partial_velocity"], [193, 4, 1, "", "time_derivative"]], "sympy.physics.vector.point": [[195, 1, 1, "", "Point"]], "sympy.physics.vector.point.Point": [[195, 2, 1, "", "a1pt_theory"], [195, 2, 1, "", "a2pt_theory"], [195, 2, 1, "", "acc"], [195, 2, 1, "", "locatenew"], [195, 2, 1, "", "partial_velocity"], [195, 2, 1, "", "pos_from"], [195, 2, 1, "", "set_acc"], [195, 2, 1, "", "set_pos"], [195, 2, 1, "", "set_vel"], [195, 2, 1, "", "v1pt_theory"], [195, 2, 1, "", "v2pt_theory"], [195, 2, 1, "", "vel"]], "sympy.physics.vector.printing": [[196, 4, 1, "", "init_vprinting"], [196, 4, 1, "", "vlatex"], [196, 4, 1, "", "vpprint"], [196, 4, 1, "", "vprint"]], "sympy.physics.vector.vector": [[191, 1, 1, "", "Vector"]], "sympy.physics.vector.vector.Vector": [[191, 2, 1, "", "angle_between"], [191, 2, 1, "", "applyfunc"], [191, 2, 1, "", "cross"], [191, 2, 1, "", "diff"], [191, 2, 1, "", "doit"], [191, 2, 1, "", "dot"], [191, 2, 1, "", "dt"], [191, 2, 1, "", "express"], [191, 2, 1, "", "free_dynamicsymbols"], [191, 2, 1, "", "free_symbols"], [191, 3, 1, "", "func"], [191, 2, 1, "", "magnitude"], [191, 2, 1, "", "normalize"], [191, 2, 1, "", "outer"], [191, 2, 1, "", "separate"], [191, 2, 1, "", "simplify"], [191, 2, 1, "", "subs"], [191, 2, 1, "", "to_matrix"], [191, 2, 1, "", "xreplace"]], "sympy.physics.wigner": [[201, 4, 1, "", "clebsch_gordan"], [201, 4, 1, "", "dot_rot_grad_Ynm"], [201, 4, 1, "", "gaunt"], [201, 4, 1, "", "racah"], [201, 4, 1, "", "real_gaunt"], [201, 4, 1, "", "wigner_3j"], [201, 4, 1, "", "wigner_6j"], [201, 4, 1, "", "wigner_9j"], [201, 4, 1, "", "wigner_d"], [201, 4, 1, "", "wigner_d_small"]], "sympy.plotting": [[202, 0, 0, "-", "plot"], [202, 0, 0, "-", "pygletplot"]], "sympy.plotting.plot": [[202, 1, 1, "", "BaseBackend"], [202, 1, 1, "", "BaseSeries"], [202, 1, 1, "", "Line2DBaseSeries"], [202, 1, 1, "", "Line3DBaseSeries"], [202, 1, 1, "", "LineOver1DRangeSeries"], [202, 1, 1, "", "MatplotlibBackend"], [202, 1, 1, "", "Parametric2DLineSeries"], [202, 1, 1, "", "Parametric3DLineSeries"], [202, 1, 1, "", "ParametricSurfaceSeries"], [202, 1, 1, "", "Plot"], [202, 1, 1, "", "PlotGrid"], [202, 1, 1, "", "SurfaceBaseSeries"], [202, 1, 1, "", "SurfaceOver2DRangeSeries"], [202, 1, 1, "", "TextBackend"], [202, 4, 1, "", "plot"], [202, 4, 1, "", "plot3d"], [202, 4, 1, "", "plot3d_parametric_line"], [202, 4, 1, "", "plot3d_parametric_surface"], [202, 4, 1, "", "plot_parametric"]], "sympy.plotting.plot.Line2DBaseSeries": [[202, 2, 1, "", "get_data"]], "sympy.plotting.plot.LineOver1DRangeSeries": [[202, 2, 1, "", "get_points"]], "sympy.plotting.plot.MatplotlibBackend": [[202, 2, 1, "", "get_segments"], [202, 2, 1, "", "process_series"]], "sympy.plotting.plot.Parametric2DLineSeries": [[202, 2, 1, "", "get_points"]], "sympy.plotting.plot.Plot": [[202, 3, 1, "", "annotations"], [202, 2, 1, "", "append"], [202, 2, 1, "", "extend"], [202, 3, 1, "", "fill"], [202, 3, 1, "", "markers"], [202, 3, 1, "", "rectangles"]], "sympy.plotting.plot_implicit": [[202, 1, 1, "", "ImplicitSeries"], [202, 4, 1, "", "plot_implicit"]], "sympy.plotting.textplot": [[202, 4, 1, "", "textplot"]], "sympy.polys.agca.extensions": [[203, 1, 1, "", "ExtensionElement"], [203, 1, 1, "", "MonogenicFiniteExtension"]], "sympy.polys.agca.extensions.ExtensionElement": [[203, 2, 1, "", "inverse"]], "sympy.polys.agca.extensions.MonogenicFiniteExtension": [[203, 5, 1, "", "dtype"]], "sympy.polys.agca.homomorphisms": [[203, 1, 1, "", "ModuleHomomorphism"], [203, 4, 1, "", "homomorphism"]], "sympy.polys.agca.homomorphisms.ModuleHomomorphism": [[203, 2, 1, "", "image"], [203, 2, 1, "", "is_injective"], [203, 2, 1, "", "is_isomorphism"], [203, 2, 1, "", "is_surjective"], [203, 2, 1, "", "is_zero"], [203, 2, 1, "", "kernel"], [203, 2, 1, "", "quotient_codomain"], [203, 2, 1, "", "quotient_domain"], [203, 2, 1, "", "restrict_codomain"], [203, 2, 1, "", "restrict_domain"]], "sympy.polys.agca.ideals": [[203, 1, 1, "", "Ideal"]], "sympy.polys.agca.ideals.Ideal": [[203, 2, 1, "", "contains"], [203, 2, 1, "", "depth"], [203, 2, 1, "", "height"], [203, 2, 1, "", "intersect"], [203, 2, 1, "", "is_maximal"], [203, 2, 1, "", "is_primary"], [203, 2, 1, "", "is_prime"], [203, 2, 1, "", "is_principal"], [203, 2, 1, "", "is_radical"], [203, 2, 1, "", "is_whole_ring"], [203, 2, 1, "", "is_zero"], [203, 2, 1, "", "product"], [203, 2, 1, "", "quotient"], [203, 2, 1, "", "radical"], [203, 2, 1, "", "reduce_element"], [203, 2, 1, "", "saturate"], [203, 2, 1, "", "subset"], [203, 2, 1, "", "union"]], "sympy.polys.agca.modules": [[203, 1, 1, "", "FreeModule"], [203, 1, 1, "", "FreeModuleElement"], [203, 1, 1, "", "Module"], [203, 1, 1, "", "QuotientModule"], [203, 1, 1, "", "QuotientModuleElement"], [203, 1, 1, "", "SubModule"], [203, 1, 1, "", "SubQuotientModule"]], "sympy.polys.agca.modules.FreeModule": [[203, 2, 1, "", "basis"], [203, 2, 1, "", "convert"], [203, 5, 1, "", "dtype"], [203, 2, 1, "", "identity_hom"], [203, 2, 1, "", "is_submodule"], [203, 2, 1, "", "is_zero"], [203, 2, 1, "", "multiply_ideal"], [203, 2, 1, "", "quotient_module"]], "sympy.polys.agca.modules.Module": [[203, 2, 1, "", "contains"], [203, 2, 1, "", "convert"], [203, 2, 1, "", "identity_hom"], [203, 2, 1, "", "is_submodule"], [203, 2, 1, "", "is_zero"], [203, 2, 1, "", "multiply_ideal"], [203, 2, 1, "", "quotient_module"], [203, 2, 1, "", "submodule"], [203, 2, 1, "", "subset"]], "sympy.polys.agca.modules.QuotientModule": [[203, 2, 1, "", "convert"], [203, 5, 1, "", "dtype"], [203, 2, 1, "", "identity_hom"], [203, 2, 1, "", "is_submodule"], [203, 2, 1, "", "is_zero"], [203, 2, 1, "", "quotient_hom"], [203, 2, 1, "", "submodule"]], "sympy.polys.agca.modules.QuotientModuleElement": [[203, 2, 1, "", "eq"]], "sympy.polys.agca.modules.SubModule": [[203, 2, 1, "", "convert"], [203, 2, 1, "", "identity_hom"], [203, 2, 1, "", "in_terms_of_generators"], [203, 2, 1, "", "inclusion_hom"], [203, 2, 1, "", "intersect"], [203, 2, 1, "", "is_full_module"], [203, 2, 1, "", "is_submodule"], [203, 2, 1, "", "is_zero"], [203, 2, 1, "", "module_quotient"], [203, 2, 1, "", "multiply_ideal"], [203, 2, 1, "", "quotient_module"], [203, 2, 1, "", "reduce_element"], [203, 2, 1, "", "submodule"], [203, 2, 1, "", "syzygy_module"], [203, 2, 1, "", "union"]], "sympy.polys.agca.modules.SubQuotientModule": [[203, 2, 1, "", "is_full_module"], [203, 2, 1, "", "quotient_hom"]], "sympy.polys.appellseqs": [[212, 4, 1, "", "andre_poly"], [212, 4, 1, "", "bernoulli_c_poly"], [212, 4, 1, "", "bernoulli_poly"], [212, 4, 1, "", "euler_poly"], [212, 4, 1, "", "genocchi_poly"]], "sympy.polys.constructor": [[212, 4, 1, "", "construct_domain"]], "sympy.polys.densearith": [[209, 4, 1, "", "dmp_abs"], [209, 4, 1, "", "dmp_add"], [209, 4, 1, "", "dmp_add_ground"], [209, 4, 1, "", "dmp_add_mul"], [209, 4, 1, "", "dmp_add_term"], [209, 4, 1, "", "dmp_div"], [209, 4, 1, "", "dmp_expand"], [209, 4, 1, "", "dmp_exquo"], [209, 4, 1, "", "dmp_exquo_ground"], [209, 4, 1, "", "dmp_ff_div"], [209, 4, 1, "", "dmp_l1_norm"], [209, 4, 1, "", "dmp_max_norm"], [209, 4, 1, "", "dmp_mul"], [209, 4, 1, "", "dmp_mul_ground"], [209, 4, 1, "", "dmp_mul_term"], [209, 4, 1, "", "dmp_neg"], [209, 4, 1, "", "dmp_pdiv"], [209, 4, 1, "", "dmp_pexquo"], [209, 4, 1, "", "dmp_pow"], [209, 4, 1, "", "dmp_pquo"], [209, 4, 1, "", "dmp_prem"], [209, 4, 1, "", "dmp_quo"], [209, 4, 1, "", "dmp_quo_ground"], [209, 4, 1, "", "dmp_rem"], [209, 4, 1, "", "dmp_rr_div"], [209, 4, 1, "", "dmp_sqr"], [209, 4, 1, "", "dmp_sub"], [209, 4, 1, "", "dmp_sub_ground"], [209, 4, 1, "", "dmp_sub_mul"], [209, 4, 1, "", "dmp_sub_term"], [209, 4, 1, "", "dup_lshift"], [209, 4, 1, "", "dup_rshift"]], "sympy.polys.densebasic": [[209, 4, 1, "", "dmp_LC"], [209, 4, 1, "", "dmp_TC"], [209, 4, 1, "", "dmp_apply_pairs"], [209, 4, 1, "", "dmp_convert"], [209, 4, 1, "", "dmp_copy"], [209, 4, 1, "", "dmp_deflate"], [209, 4, 1, "", "dmp_degree"], [209, 4, 1, "", "dmp_degree_in"], [209, 4, 1, "", "dmp_degree_list"], [209, 4, 1, "", "dmp_eject"], [209, 4, 1, "", "dmp_exclude"], [209, 4, 1, "", "dmp_from_dict"], [209, 4, 1, "", "dmp_from_sympy"], [209, 4, 1, "", "dmp_ground"], [209, 4, 1, "", "dmp_ground_LC"], [209, 4, 1, "", "dmp_ground_TC"], [209, 4, 1, "", "dmp_ground_nth"], [209, 4, 1, "", "dmp_ground_p"], [209, 4, 1, "", "dmp_grounds"], [209, 4, 1, "", "dmp_include"], [209, 4, 1, "", "dmp_inflate"], [209, 4, 1, "", "dmp_inject"], [209, 4, 1, "", "dmp_list_terms"], [209, 4, 1, "", "dmp_multi_deflate"], [209, 4, 1, "", "dmp_negative_p"], [209, 4, 1, "", "dmp_nest"], [209, 4, 1, "", "dmp_normal"], [209, 4, 1, "", "dmp_nth"], [209, 4, 1, "", "dmp_one"], [209, 4, 1, "", "dmp_one_p"], [209, 4, 1, "", "dmp_permute"], [209, 4, 1, "", "dmp_positive_p"], [209, 4, 1, "", "dmp_raise"], [209, 4, 1, "", "dmp_slice"], [209, 4, 1, "", "dmp_strip"], [209, 4, 1, "", "dmp_swap"], [209, 4, 1, "", "dmp_terms_gcd"], [209, 4, 1, "", "dmp_to_dict"], [209, 4, 1, "", "dmp_to_tuple"], [209, 4, 1, "", "dmp_true_LT"], [209, 4, 1, "", "dmp_validate"], [209, 4, 1, "", "dmp_zero"], [209, 4, 1, "", "dmp_zero_p"], [209, 4, 1, "", "dmp_zeros"], [209, 4, 1, "", "dup_random"], [209, 4, 1, "", "dup_reverse"]], "sympy.polys.densetools": [[209, 4, 1, "", "dmp_clear_denoms"], [209, 4, 1, "", "dmp_compose"], [209, 4, 1, "", "dmp_diff"], [209, 4, 1, "", "dmp_diff_eval_in"], [209, 4, 1, "", "dmp_diff_in"], [209, 4, 1, "", "dmp_eval"], [209, 4, 1, "", "dmp_eval_in"], [209, 4, 1, "", "dmp_eval_tail"], [209, 4, 1, "", "dmp_ground_content"], [209, 4, 1, "", "dmp_ground_extract"], [209, 4, 1, "", "dmp_ground_monic"], [209, 4, 1, "", "dmp_ground_primitive"], [209, 4, 1, "", "dmp_ground_trunc"], [209, 4, 1, "", "dmp_integrate"], [209, 4, 1, "", "dmp_integrate_in"], [209, 4, 1, "", "dmp_lift"], [209, 4, 1, "", "dmp_revert"], [209, 4, 1, "", "dmp_trunc"], [209, 4, 1, "", "dup_content"], [209, 4, 1, "", "dup_decompose"], [209, 4, 1, "", "dup_extract"], [209, 4, 1, "", "dup_mirror"], [209, 4, 1, "", "dup_monic"], [209, 4, 1, "", "dup_primitive"], [209, 4, 1, "", "dup_real_imag"], [209, 4, 1, "", "dup_scale"], [209, 4, 1, "", "dup_shift"], [209, 4, 1, "", "dup_sign_variations"], [209, 4, 1, "", "dup_transform"]], "sympy.polys.dispersion": [[212, 4, 1, "", "dispersion"], [212, 4, 1, "", "dispersionset"]], "sympy.polys.distributedmodules": [[209, 4, 1, "", "sdm_LC"], [209, 4, 1, "", "sdm_LM"], [209, 4, 1, "", "sdm_LT"], [209, 4, 1, "", "sdm_add"], [209, 4, 1, "", "sdm_deg"], [209, 4, 1, "", "sdm_ecart"], [209, 4, 1, "", "sdm_from_dict"], [209, 4, 1, "", "sdm_from_vector"], [209, 4, 1, "", "sdm_groebner"], [209, 4, 1, "", "sdm_monomial_deg"], [209, 4, 1, "", "sdm_monomial_divides"], [209, 4, 1, "", "sdm_monomial_mul"], [209, 4, 1, "", "sdm_mul_term"], [209, 4, 1, "", "sdm_nf_mora"], [209, 4, 1, "", "sdm_spoly"], [209, 4, 1, "", "sdm_to_dict"], [209, 4, 1, "", "sdm_to_vector"], [209, 4, 1, "", "sdm_zero"]], "sympy.polys.domains": [[207, 1, 1, "", "AlgebraicField"], [207, 1, 1, "", "ComplexField"], [207, 1, 1, "", "ExpressionDomain"], [207, 1, 1, "", "FiniteField"], [207, 1, 1, "", "FractionField"], [207, 1, 1, "", "GMPYFiniteField"], [207, 1, 1, "", "GMPYIntegerRing"], [207, 1, 1, "", "GMPYRationalField"], [207, 1, 1, "", "IntegerRing"], [207, 1, 1, "", "PolynomialRing"], [207, 1, 1, "", "PythonFiniteField"], [207, 1, 1, "", "PythonIntegerRing"], [207, 1, 1, "", "PythonRationalField"], [207, 1, 1, "", "RationalField"], [207, 1, 1, "", "RealField"]], "sympy.polys.domains.AlgebraicField": [[207, 2, 1, "", "algebraic_field"], [207, 2, 1, "", "denom"], [207, 2, 1, "", "discriminant"], [207, 5, 1, "", "dtype"], [207, 5, 1, "", "ext"], [207, 2, 1, "", "from_AlgebraicField"], [207, 2, 1, "", "from_GaussianIntegerRing"], [207, 2, 1, "", "from_GaussianRationalField"], [207, 2, 1, "", "from_QQ"], [207, 2, 1, "", "from_QQ_gmpy"], [207, 2, 1, "", "from_QQ_python"], [207, 2, 1, "", "from_RealField"], [207, 2, 1, "", "from_ZZ"], [207, 2, 1, "", "from_ZZ_gmpy"], [207, 2, 1, "", "from_ZZ_python"], [207, 2, 1, "", "from_sympy"], [207, 2, 1, "", "galois_group"], [207, 2, 1, "", "get_ring"], [207, 2, 1, "", "integral_basis"], [207, 2, 1, "", "is_negative"], [207, 2, 1, "", "is_nonnegative"], [207, 2, 1, "", "is_nonpositive"], [207, 2, 1, "", "is_positive"], [207, 2, 1, "", "maximal_order"], [207, 5, 1, "", "mod"], [207, 2, 1, "", "numer"], [207, 5, 1, "", "orig_ext"], [207, 2, 1, "", "primes_above"], [207, 2, 1, "", "to_alg_num"], [207, 2, 1, "", "to_sympy"]], "sympy.polys.domains.ComplexField": [[207, 2, 1, "", "almosteq"], [207, 2, 1, "", "exsqrt"], [207, 2, 1, "", "from_sympy"], [207, 2, 1, "", "gcd"], [207, 2, 1, "", "get_exact"], [207, 2, 1, "", "get_ring"], [207, 2, 1, "", "is_negative"], [207, 2, 1, "", "is_nonnegative"], [207, 2, 1, "", "is_nonpositive"], [207, 2, 1, "", "is_positive"], [207, 2, 1, "", "is_square"], [207, 2, 1, "", "lcm"], [207, 2, 1, "", "to_sympy"]], "sympy.polys.domains.ExpressionDomain": [[207, 1, 1, "", "Expression"], [207, 2, 1, "", "denom"], [207, 5, 1, "", "dtype"], [207, 2, 1, "", "from_ExpressionDomain"], [207, 2, 1, "", "from_FractionField"], [207, 2, 1, "", "from_GaussianIntegerRing"], [207, 2, 1, "", "from_GaussianRationalField"], [207, 2, 1, "", "from_PolynomialRing"], [207, 2, 1, "", "from_QQ"], [207, 2, 1, "", "from_QQ_gmpy"], [207, 2, 1, "", "from_QQ_python"], [207, 2, 1, "", "from_RealField"], [207, 2, 1, "", "from_ZZ"], [207, 2, 1, "", "from_ZZ_gmpy"], [207, 2, 1, "", "from_ZZ_python"], [207, 2, 1, "", "from_sympy"], [207, 2, 1, "", "get_field"], [207, 2, 1, "", "get_ring"], [207, 2, 1, "", "is_negative"], [207, 2, 1, "", "is_nonnegative"], [207, 2, 1, "", "is_nonpositive"], [207, 2, 1, "", "is_positive"], [207, 2, 1, "", "numer"], [207, 2, 1, "", "to_sympy"]], "sympy.polys.domains.FiniteField": [[207, 2, 1, "", "characteristic"], [207, 2, 1, "", "exsqrt"], [207, 2, 1, "", "from_FF"], [207, 2, 1, "", "from_FF_gmpy"], [207, 2, 1, "", "from_FF_python"], [207, 2, 1, "", "from_QQ"], [207, 2, 1, "", "from_QQ_gmpy"], [207, 2, 1, "", "from_QQ_python"], [207, 2, 1, "", "from_RealField"], [207, 2, 1, "", "from_ZZ"], [207, 2, 1, "", "from_ZZ_gmpy"], [207, 2, 1, "", "from_ZZ_python"], [207, 2, 1, "", "from_sympy"], [207, 2, 1, "", "get_field"], [207, 2, 1, "", "is_square"], [207, 2, 1, "", "to_sympy"]], "sympy.polys.domains.FractionField": [[207, 2, 1, "", "denom"], [207, 2, 1, "", "factorial"], [207, 2, 1, "", "from_AlgebraicField"], [207, 2, 1, "", "from_ComplexField"], [207, 2, 1, "", "from_FractionField"], [207, 2, 1, "", "from_GaussianIntegerRing"], [207, 2, 1, "", "from_GaussianRationalField"], [207, 2, 1, "", "from_PolynomialRing"], [207, 2, 1, "", "from_QQ"], [207, 2, 1, "", "from_QQ_gmpy"], [207, 2, 1, "", "from_QQ_python"], [207, 2, 1, "", "from_RealField"], [207, 2, 1, "", "from_ZZ"], [207, 2, 1, "", "from_ZZ_gmpy"], [207, 2, 1, "", "from_ZZ_python"], [207, 2, 1, "", "from_sympy"], [207, 2, 1, "", "get_ring"], [207, 2, 1, "", "is_negative"], [207, 2, 1, "", "is_nonnegative"], [207, 2, 1, "", "is_nonpositive"], [207, 2, 1, "", "is_positive"], [207, 2, 1, "", "numer"], [207, 2, 1, "", "to_sympy"]], "sympy.polys.domains.GMPYIntegerRing": [[207, 2, 1, "", "factorial"], [207, 2, 1, "", "from_FF_gmpy"], [207, 2, 1, "", "from_FF_python"], [207, 2, 1, "", "from_QQ"], [207, 2, 1, "", "from_QQ_gmpy"], [207, 2, 1, "", "from_QQ_python"], [207, 2, 1, "", "from_RealField"], [207, 2, 1, "", "from_ZZ_gmpy"], [207, 2, 1, "", "from_ZZ_python"], [207, 2, 1, "", "from_sympy"], [207, 2, 1, "", "gcd"], [207, 2, 1, "", "gcdex"], [207, 2, 1, "", "lcm"], [207, 2, 1, "", "sqrt"], [207, 2, 1, "", "to_sympy"]], "sympy.polys.domains.GMPYRationalField": [[207, 2, 1, "", "denom"], [207, 2, 1, "", "div"], [207, 2, 1, "", "exquo"], [207, 2, 1, "", "factorial"], [207, 2, 1, "", "from_GaussianRationalField"], [207, 2, 1, "", "from_QQ_gmpy"], [207, 2, 1, "", "from_QQ_python"], [207, 2, 1, "", "from_RealField"], [207, 2, 1, "", "from_ZZ_gmpy"], [207, 2, 1, "", "from_ZZ_python"], [207, 2, 1, "", "from_sympy"], [207, 2, 1, "", "get_ring"], [207, 2, 1, "", "numer"], [207, 2, 1, "", "quo"], [207, 2, 1, "", "rem"], [207, 2, 1, "", "to_sympy"]], "sympy.polys.domains.IntegerRing": [[207, 2, 1, "", "algebraic_field"], [207, 2, 1, "", "exsqrt"], [207, 2, 1, "", "factorial"], [207, 2, 1, "", "from_AlgebraicField"], [207, 2, 1, "", "from_FF"], [207, 2, 1, "", "from_FF_gmpy"], [207, 2, 1, "", "from_FF_python"], [207, 2, 1, "", "from_QQ"], [207, 2, 1, "", "from_QQ_gmpy"], [207, 2, 1, "", "from_QQ_python"], [207, 2, 1, "", "from_RealField"], [207, 2, 1, "", "from_ZZ"], [207, 2, 1, "", "from_ZZ_gmpy"], [207, 2, 1, "", "from_ZZ_python"], [207, 2, 1, "", "from_sympy"], [207, 2, 1, "", "gcd"], [207, 2, 1, "", "gcdex"], [207, 2, 1, "", "get_field"], [207, 2, 1, "", "is_square"], [207, 2, 1, "", "lcm"], [207, 2, 1, "", "log"], [207, 2, 1, "", "sqrt"], [207, 2, 1, "", "to_sympy"]], "sympy.polys.domains.PolynomialRing": [[207, 2, 1, "", "factorial"], [207, 2, 1, "", "from_AlgebraicField"], [207, 2, 1, "", "from_ComplexField"], [207, 2, 1, "", "from_FractionField"], [207, 2, 1, "", "from_GaussianIntegerRing"], [207, 2, 1, "", "from_GaussianRationalField"], [207, 2, 1, "", "from_GlobalPolynomialRing"], [207, 2, 1, "", "from_PolynomialRing"], [207, 2, 1, "", "from_QQ"], [207, 2, 1, "", "from_QQ_gmpy"], [207, 2, 1, "", "from_QQ_python"], [207, 2, 1, "", "from_RealField"], [207, 2, 1, "", "from_ZZ"], [207, 2, 1, "", "from_ZZ_gmpy"], [207, 2, 1, "", "from_ZZ_python"], [207, 2, 1, "", "from_sympy"], [207, 2, 1, "", "gcd"], [207, 2, 1, "", "gcdex"], [207, 2, 1, "", "get_field"], [207, 2, 1, "", "is_negative"], [207, 2, 1, "", "is_nonnegative"], [207, 2, 1, "", "is_nonpositive"], [207, 2, 1, "", "is_positive"], [207, 2, 1, "", "is_unit"], [207, 2, 1, "", "lcm"], [207, 2, 1, "", "to_sympy"]], "sympy.polys.domains.RationalField": [[207, 2, 1, "", "algebraic_field"], [207, 2, 1, "", "denom"], [207, 2, 1, "", "div"], [207, 2, 1, "", "exquo"], [207, 2, 1, "", "exsqrt"], [207, 2, 1, "", "from_AlgebraicField"], [207, 2, 1, "", "from_GaussianRationalField"], [207, 2, 1, "", "from_QQ"], [207, 2, 1, "", "from_QQ_gmpy"], [207, 2, 1, "", "from_QQ_python"], [207, 2, 1, "", "from_RealField"], [207, 2, 1, "", "from_ZZ"], [207, 2, 1, "", "from_ZZ_gmpy"], [207, 2, 1, "", "from_ZZ_python"], [207, 2, 1, "", "from_sympy"], [207, 2, 1, "", "get_ring"], [207, 2, 1, "", "is_square"], [207, 2, 1, "", "numer"], [207, 2, 1, "", "quo"], [207, 2, 1, "", "rem"], [207, 2, 1, "", "to_sympy"]], "sympy.polys.domains.RealField": [[207, 2, 1, "", "almosteq"], [207, 2, 1, "", "exsqrt"], [207, 2, 1, "", "from_sympy"], [207, 2, 1, "", "gcd"], [207, 2, 1, "", "get_exact"], [207, 2, 1, "", "get_ring"], [207, 2, 1, "", "is_square"], [207, 2, 1, "", "lcm"], [207, 2, 1, "", "to_rational"], [207, 2, 1, "", "to_sympy"]], "sympy.polys.domains.compositedomain": [[207, 1, 1, "", "CompositeDomain"]], "sympy.polys.domains.compositedomain.CompositeDomain": [[207, 2, 1, "", "drop"], [207, 2, 1, "", "inject"]], "sympy.polys.domains.domain": [[207, 1, 1, "", "Domain"]], "sympy.polys.domains.domain.Domain": [[207, 2, 1, "", "abs"], [207, 2, 1, "", "add"], [207, 2, 1, "", "alg_field_from_poly"], [207, 2, 1, "", "algebraic_field"], [207, 2, 1, "", "almosteq"], [207, 2, 1, "", "characteristic"], [207, 2, 1, "", "cofactors"], [207, 2, 1, "", "convert"], [207, 2, 1, "", "convert_from"], [207, 2, 1, "", "cyclotomic_field"], [207, 2, 1, "", "denom"], [207, 2, 1, "", "div"], [207, 2, 1, "", "drop"], [207, 5, 1, "", "dtype"], [207, 2, 1, "", "evalf"], [207, 2, 1, "", "exquo"], [207, 2, 1, "", "exsqrt"], [207, 2, 1, "", "frac_field"], [207, 2, 1, "", "from_AlgebraicField"], [207, 2, 1, "", "from_ComplexField"], [207, 2, 1, "", "from_ExpressionDomain"], [207, 2, 1, "", "from_ExpressionRawDomain"], [207, 2, 1, "", "from_FF"], [207, 2, 1, "", "from_FF_gmpy"], [207, 2, 1, "", "from_FF_python"], [207, 2, 1, "", "from_FractionField"], [207, 2, 1, "", "from_GlobalPolynomialRing"], [207, 2, 1, "", "from_MonogenicFiniteExtension"], [207, 2, 1, "", "from_PolynomialRing"], [207, 2, 1, "", "from_QQ_gmpy"], [207, 2, 1, "", "from_QQ_python"], [207, 2, 1, "", "from_RealField"], [207, 2, 1, "", "from_ZZ_gmpy"], [207, 2, 1, "", "from_ZZ_python"], [207, 2, 1, "", "from_sympy"], [207, 2, 1, "", "gcd"], [207, 2, 1, "", "gcdex"], [207, 2, 1, "", "get_exact"], [207, 2, 1, "", "get_field"], [207, 2, 1, "", "get_ring"], [207, 2, 1, "", "half_gcdex"], [207, 5, 1, "", "has_assoc_Field"], [207, 5, 1, "", "has_assoc_Ring"], [207, 2, 1, "", "inject"], [207, 2, 1, "", "invert"], [207, 5, 1, "", "is_Field"], [207, 5, 1, "", "is_PID"], [207, 5, 1, "", "is_Ring"], [207, 2, 1, "", "is_negative"], [207, 2, 1, "", "is_nonnegative"], [207, 2, 1, "", "is_nonpositive"], [207, 2, 1, "", "is_one"], [207, 2, 1, "", "is_positive"], [207, 2, 1, "", "is_square"], [207, 2, 1, "", "is_zero"], [207, 2, 1, "", "lcm"], [207, 2, 1, "", "log"], [207, 2, 1, "", "map"], [207, 2, 1, "", "mul"], [207, 2, 1, "", "n"], [207, 2, 1, "", "neg"], [207, 2, 1, "", "numer"], [207, 2, 1, "", "of_type"], [207, 2, 1, "", "old_frac_field"], [207, 2, 1, "", "old_poly_ring"], [207, 5, 1, "", "one"], [207, 2, 1, "", "poly_ring"], [207, 2, 1, "", "pos"], [207, 2, 1, "", "pow"], [207, 2, 1, "", "quo"], [207, 2, 1, "", "rem"], [207, 2, 1, "", "revert"], [207, 2, 1, "", "sqrt"], [207, 2, 1, "", "sub"], [207, 2, 1, "", "to_sympy"], [207, 3, 1, "", "tp"], [207, 2, 1, "", "unify"], [207, 5, 1, "", "zero"]], "sympy.polys.domains.domainelement": [[207, 1, 1, "", "DomainElement"]], "sympy.polys.domains.domainelement.DomainElement": [[207, 2, 1, "", "parent"]], "sympy.polys.domains.expressiondomain.ExpressionDomain": [[207, 1, 1, "", "Expression"]], "sympy.polys.domains.field": [[207, 1, 1, "", "Field"]], "sympy.polys.domains.field.Field": [[207, 2, 1, "", "div"], [207, 2, 1, "", "exquo"], [207, 2, 1, "", "gcd"], [207, 2, 1, "", "get_field"], [207, 2, 1, "", "get_ring"], [207, 2, 1, "", "is_unit"], [207, 2, 1, "", "lcm"], [207, 2, 1, "", "quo"], [207, 2, 1, "", "rem"], [207, 2, 1, "", "revert"]], "sympy.polys.domains.gaussiandomains": [[207, 1, 1, "", "GaussianDomain"], [207, 1, 1, "", "GaussianElement"], [207, 1, 1, "", "GaussianInteger"], [207, 1, 1, "", "GaussianIntegerRing"], [207, 1, 1, "", "GaussianRational"], [207, 1, 1, "", "GaussianRationalField"]], "sympy.polys.domains.gaussiandomains.GaussianDomain": [[207, 2, 1, "", "from_AlgebraicField"], [207, 2, 1, "", "from_QQ"], [207, 2, 1, "", "from_QQ_gmpy"], [207, 2, 1, "", "from_QQ_python"], [207, 2, 1, "", "from_ZZ"], [207, 2, 1, "", "from_ZZ_gmpy"], [207, 2, 1, "", "from_ZZ_python"], [207, 2, 1, "", "from_sympy"], [207, 2, 1, "", "inject"], [207, 2, 1, "", "is_negative"], [207, 2, 1, "", "is_nonnegative"], [207, 2, 1, "", "is_nonpositive"], [207, 2, 1, "", "is_positive"], [207, 2, 1, "", "to_sympy"]], "sympy.polys.domains.gaussiandomains.GaussianElement": [[207, 2, 1, "", "new"], [207, 2, 1, "", "parent"], [207, 2, 1, "", "quadrant"]], "sympy.polys.domains.gaussiandomains.GaussianIntegerRing": [[207, 5, 1, "", "dtype"], [207, 2, 1, "", "from_GaussianIntegerRing"], [207, 2, 1, "", "from_GaussianRationalField"], [207, 2, 1, "", "gcd"], [207, 2, 1, "", "get_field"], [207, 2, 1, "", "get_ring"], [207, 2, 1, "", "lcm"], [207, 2, 1, "", "normalize"]], "sympy.polys.domains.gaussiandomains.GaussianRationalField": [[207, 2, 1, "", "as_AlgebraicField"], [207, 2, 1, "", "denom"], [207, 5, 1, "", "dtype"], [207, 2, 1, "", "from_GaussianIntegerRing"], [207, 2, 1, "", "from_GaussianRationalField"], [207, 2, 1, "", "get_field"], [207, 2, 1, "", "get_ring"], [207, 2, 1, "", "numer"]], "sympy.polys.domains.mpelements": [[207, 1, 1, "", "ComplexElement"], [207, 1, 1, "", "RealElement"]], "sympy.polys.domains.quotientring": [[207, 1, 1, "", "QuotientRing"]], "sympy.polys.domains.ring": [[207, 1, 1, "", "Ring"]], "sympy.polys.domains.ring.Ring": [[207, 2, 1, "", "denom"], [207, 2, 1, "", "div"], [207, 2, 1, "", "exquo"], [207, 2, 1, "", "free_module"], [207, 2, 1, "", "get_ring"], [207, 2, 1, "", "ideal"], [207, 2, 1, "", "invert"], [207, 2, 1, "", "numer"], [207, 2, 1, "", "quo"], [207, 2, 1, "", "quotient_ring"], [207, 2, 1, "", "rem"], [207, 2, 1, "", "revert"]], "sympy.polys.domains.simpledomain": [[207, 1, 1, "", "SimpleDomain"]], "sympy.polys.domains.simpledomain.SimpleDomain": [[207, 2, 1, "", "inject"]], "sympy.polys.euclidtools": [[209, 4, 1, "", "dmp_cancel"], [209, 4, 1, "", "dmp_content"], [209, 4, 1, "", "dmp_discriminant"], [209, 4, 1, "", "dmp_euclidean_prs"], [209, 4, 1, "", "dmp_ff_prs_gcd"], [209, 4, 1, "", "dmp_gcd"], [209, 4, 1, "", "dmp_gcdex"], [209, 4, 1, "", "dmp_half_gcdex"], [209, 4, 1, "", "dmp_inner_gcd"], [209, 4, 1, "", "dmp_inner_subresultants"], [209, 4, 1, "", "dmp_invert"], [209, 4, 1, "", "dmp_lcm"], [209, 4, 1, "", "dmp_primitive"], [209, 4, 1, "", "dmp_primitive_prs"], [209, 4, 1, "", "dmp_prs_resultant"], [209, 4, 1, "", "dmp_qq_collins_resultant"], [209, 4, 1, "", "dmp_qq_heu_gcd"], [209, 4, 1, "", "dmp_resultant"], [209, 4, 1, "", "dmp_rr_prs_gcd"], [209, 4, 1, "", "dmp_subresultants"], [209, 4, 1, "", "dmp_zz_collins_resultant"], [209, 4, 1, "", "dmp_zz_heu_gcd"], [209, 4, 1, "", "dmp_zz_modular_resultant"]], "sympy.polys.factortools": [[209, 4, 1, "", "dmp_ext_factor"], [209, 4, 1, "", "dmp_factor_list"], [209, 4, 1, "", "dmp_factor_list_include"], [209, 4, 1, "", "dmp_irreducible_p"], [209, 4, 1, "", "dmp_trial_division"], [209, 4, 1, "", "dmp_zz_diophantine"], [209, 4, 1, "", "dmp_zz_factor"], [209, 4, 1, "", "dmp_zz_mignotte_bound"], [209, 4, 1, "", "dmp_zz_wang"], [209, 4, 1, "", "dmp_zz_wang_hensel_lifting"], [209, 4, 1, "", "dmp_zz_wang_lead_coeffs"], [209, 4, 1, "", "dmp_zz_wang_non_divisors"], [209, 4, 1, "", "dmp_zz_wang_test_points"], [209, 4, 1, "", "dup_cyclotomic_p"], [209, 4, 1, "", "dup_gf_factor"], [209, 4, 1, "", "dup_zz_cyclotomic_factor"], [209, 4, 1, "", "dup_zz_cyclotomic_poly"], [209, 4, 1, "", "dup_zz_factor"], [209, 4, 1, "", "dup_zz_factor_sqf"], [209, 4, 1, "", "dup_zz_hensel_lift"], [209, 4, 1, "", "dup_zz_hensel_step"], [209, 4, 1, "", "dup_zz_irreducible_p"], [209, 4, 1, "", "dup_zz_zassenhaus"]], "sympy.polys.fglmtools": [[209, 4, 1, "", "matrix_fglm"]], "sympy.polys.fields": [[207, 1, 1, "", "FracElement"], [207, 1, 1, "", "FracField"], [207, 4, 1, "", "field"], [207, 4, 1, "", "sfield"], [207, 4, 1, "", "vfield"], [207, 4, 1, "", "xfield"]], "sympy.polys.fields.FracElement": [[207, 2, 1, "", "diff"]], "sympy.polys.galoistools": [[209, 4, 1, "", "gf_LC"], [209, 4, 1, "", "gf_Qbasis"], [209, 4, 1, "", "gf_Qmatrix"], [209, 4, 1, "", "gf_TC"], [209, 4, 1, "", "gf_add"], [209, 4, 1, "", "gf_add_ground"], [209, 4, 1, "", "gf_add_mul"], [209, 4, 1, "", "gf_berlekamp"], [209, 4, 1, "", "gf_cofactors"], [209, 4, 1, "", "gf_compose"], [209, 4, 1, "", "gf_compose_mod"], [209, 4, 1, "", "gf_crt"], [209, 4, 1, "", "gf_crt1"], [209, 4, 1, "", "gf_crt2"], [209, 4, 1, "", "gf_csolve"], [209, 4, 1, "", "gf_degree"], [209, 4, 1, "", "gf_diff"], [209, 4, 1, "", "gf_div"], [209, 4, 1, "", "gf_eval"], [209, 4, 1, "", "gf_expand"], [209, 4, 1, "", "gf_exquo"], [209, 4, 1, "", "gf_factor"], [209, 4, 1, "", "gf_factor_sqf"], [209, 4, 1, "", "gf_from_dict"], [209, 4, 1, "", "gf_from_int_poly"], [209, 4, 1, "", "gf_gcd"], [209, 4, 1, "", "gf_gcdex"], [209, 4, 1, "", "gf_int"], [209, 4, 1, "", "gf_irreducible"], [209, 4, 1, "", "gf_irreducible_p"], [209, 4, 1, "", "gf_lcm"], [209, 4, 1, "", "gf_lshift"], [209, 4, 1, "", "gf_monic"], [209, 4, 1, "", "gf_mul"], [209, 4, 1, "", "gf_mul_ground"], [209, 4, 1, "", "gf_multi_eval"], [209, 4, 1, "", "gf_neg"], [209, 4, 1, "", "gf_normal"], [209, 4, 1, "", "gf_pow"], [209, 4, 1, "", "gf_pow_mod"], [209, 4, 1, "", "gf_quo"], [209, 4, 1, "", "gf_quo_ground"], [209, 4, 1, "", "gf_random"], [209, 4, 1, "", "gf_rem"], [209, 4, 1, "", "gf_rshift"], [209, 4, 1, "", "gf_shoup"], [209, 4, 1, "", "gf_sqf_list"], [209, 4, 1, "", "gf_sqf_p"], [209, 4, 1, "", "gf_sqf_part"], [209, 4, 1, "", "gf_sqr"], [209, 4, 1, "", "gf_strip"], [209, 4, 1, "", "gf_sub"], [209, 4, 1, "", "gf_sub_ground"], [209, 4, 1, "", "gf_sub_mul"], [209, 4, 1, "", "gf_to_dict"], [209, 4, 1, "", "gf_to_int_poly"], [209, 4, 1, "", "gf_trace_map"], [209, 4, 1, "", "gf_trunc"], [209, 4, 1, "", "gf_value"], [209, 4, 1, "", "gf_zassenhaus"]], "sympy.polys.groebnertools": [[209, 4, 1, "", "groebner"], [209, 4, 1, "", "is_groebner"], [209, 4, 1, "", "is_minimal"], [209, 4, 1, "", "is_reduced"], [209, 4, 1, "", "red_groebner"], [209, 4, 1, "", "spoly"]], "sympy.polys.matrices.ddm": [[205, 1, 1, "", "DDM"]], "sympy.polys.matrices.ddm.DDM": [[205, 2, 1, "", "add"], [205, 2, 1, "", "charpoly"], [205, 2, 1, "", "det"], [205, 2, 1, "", "hstack"], [205, 2, 1, "", "inv"], [205, 2, 1, "", "is_lower"], [205, 2, 1, "", "is_upper"], [205, 2, 1, "", "is_zero_matrix"], [205, 2, 1, "", "lu"], [205, 2, 1, "", "lu_solve"], [205, 2, 1, "", "matmul"], [205, 2, 1, "", "neg"], [205, 2, 1, "", "rref"], [205, 2, 1, "", "scc"], [205, 2, 1, "", "sub"], [205, 2, 1, "", "vstack"]], "sympy.polys.matrices.domainmatrix": [[205, 1, 1, "", "DomainMatrix"]], "sympy.polys.matrices.domainmatrix.DomainMatrix": [[205, 2, 1, "", "add"], [205, 2, 1, "", "charpoly"], [205, 2, 1, "", "columnspace"], [205, 2, 1, "", "convert_to"], [205, 2, 1, "", "det"], [205, 2, 1, "", "diag"], [205, 2, 1, "", "eye"], [205, 2, 1, "", "from_Matrix"], [205, 2, 1, "", "from_dict_sympy"], [205, 2, 1, "", "from_list"], [205, 2, 1, "", "from_list_sympy"], [205, 2, 1, "", "from_rep"], [205, 2, 1, "", "hstack"], [205, 2, 1, "", "inv"], [205, 3, 1, "", "is_lower"], [205, 3, 1, "", "is_upper"], [205, 2, 1, "", "lll"], [205, 2, 1, "", "lll_transform"], [205, 2, 1, "", "lu"], [205, 2, 1, "", "lu_solve"], [205, 2, 1, "", "matmul"], [205, 2, 1, "", "mul"], [205, 2, 1, "", "neg"], [205, 2, 1, "", "nullspace"], [205, 2, 1, "", "ones"], [205, 2, 1, "", "pow"], [205, 2, 1, "", "rowspace"], [205, 2, 1, "", "rref"], [205, 2, 1, "", "scc"], [205, 2, 1, "", "sub"], [205, 2, 1, "", "to_Matrix"], [205, 2, 1, "", "to_dense"], [205, 2, 1, "", "to_field"], [205, 2, 1, "", "to_sparse"], [205, 2, 1, "", "transpose"], [205, 2, 1, "", "unify"], [205, 2, 1, "", "vstack"], [205, 2, 1, "", "zeros"]], "sympy.polys.matrices.normalforms": [[205, 4, 1, "", "hermite_normal_form"], [205, 4, 1, "", "smith_normal_form"]], "sympy.polys.matrices.sdm": [[205, 1, 1, "", "SDM"]], "sympy.polys.matrices.sdm.SDM": [[205, 2, 1, "", "add"], [205, 2, 1, "", "charpoly"], [205, 2, 1, "", "convert_to"], [205, 2, 1, "", "copy"], [205, 2, 1, "", "det"], [205, 2, 1, "", "eye"], [205, 2, 1, "", "from_ddm"], [205, 2, 1, "", "from_list"], [205, 2, 1, "", "hstack"], [205, 2, 1, "", "inv"], [205, 2, 1, "", "is_lower"], [205, 2, 1, "", "is_upper"], [205, 2, 1, "", "is_zero_matrix"], [205, 2, 1, "", "lu"], [205, 2, 1, "", "lu_solve"], [205, 2, 1, "", "matmul"], [205, 2, 1, "", "mul"], [205, 2, 1, "", "neg"], [205, 2, 1, "", "new"], [205, 2, 1, "", "nullspace"], [205, 2, 1, "", "rref"], [205, 2, 1, "", "scc"], [205, 2, 1, "", "sub"], [205, 2, 1, "", "to_ddm"], [205, 2, 1, "", "to_list"], [205, 2, 1, "", "transpose"], [205, 2, 1, "", "vstack"], [205, 2, 1, "", "zeros"]], "sympy.polys.modulargcd": [[209, 4, 1, "", "_modgcd_multivariate_p"], [209, 4, 1, "", "func_field_modgcd"], [209, 4, 1, "", "modgcd_bivariate"], [209, 4, 1, "", "modgcd_multivariate"], [209, 4, 1, "", "modgcd_univariate"]], "sympy.polys.monomials": [[212, 1, 1, "", "Monomial"], [212, 4, 1, "", "itermonomials"], [212, 4, 1, "", "monomial_count"]], "sympy.polys.monomials.Monomial": [[212, 2, 1, "", "as_expr"], [212, 2, 1, "", "gcd"], [212, 2, 1, "", "lcm"]], "sympy.polys.numberfields.basis": [[211, 4, 1, "", "round_two"]], "sympy.polys.numberfields.galoisgroups": [[211, 4, 1, "", "galois_group"]], "sympy.polys.numberfields.minpoly": [[211, 4, 1, "", "minimal_polynomial"], [211, 4, 1, "", "minpoly"]], "sympy.polys.numberfields": [[211, 0, 0, "-", "modules"], [211, 0, 0, "-", "subfield"]], "sympy.polys.numberfields.modules": [[211, 1, 1, "", "EndomorphismRing"], [211, 1, 1, "", "InnerEndomorphism"], [211, 1, 1, "", "Module"], [211, 1, 1, "", "ModuleElement"], [211, 1, 1, "", "ModuleEndomorphism"], [211, 1, 1, "", "ModuleHomomorphism"], [211, 1, 1, "", "PowerBasis"], [211, 1, 1, "", "PowerBasisElement"], [211, 1, 1, "", "Submodule"], [211, 4, 1, "", "find_min_poly"], [211, 4, 1, "", "make_mod_elt"]], "sympy.polys.numberfields.modules.EndomorphismRing": [[211, 2, 1, "", "__init__"], [211, 2, 1, "", "inner_endomorphism"], [211, 2, 1, "", "represent"]], "sympy.polys.numberfields.modules.InnerEndomorphism": [[211, 2, 1, "", "__init__"]], "sympy.polys.numberfields.modules.Module": [[211, 2, 1, "", "__call__"], [211, 2, 1, "", "ancestors"], [211, 2, 1, "", "basis_elements"], [211, 2, 1, "", "element_from_rational"], [211, 2, 1, "", "endomorphism_ring"], [211, 2, 1, "", "is_compat_col"], [211, 2, 1, "", "mult_tab"], [211, 3, 1, "", "n"], [211, 2, 1, "", "nearest_common_ancestor"], [211, 3, 1, "", "number_field"], [211, 2, 1, "", "one"], [211, 3, 1, "", "parent"], [211, 2, 1, "", "power_basis_ancestor"], [211, 2, 1, "", "represent"], [211, 2, 1, "", "starts_with_unity"], [211, 2, 1, "", "submodule_from_gens"], [211, 2, 1, "", "submodule_from_matrix"], [211, 2, 1, "", "whole_submodule"], [211, 2, 1, "", "zero"]], "sympy.polys.numberfields.modules.ModuleElement": [[211, 3, 1, "", "QQ_col"], [211, 2, 1, "", "__add__"], [211, 2, 1, "", "__init__"], [211, 2, 1, "", "__mod__"], [211, 2, 1, "", "__mul__"], [211, 2, 1, "", "column"], [211, 2, 1, "", "equiv"], [211, 2, 1, "", "from_int_list"], [211, 2, 1, "", "is_compat"], [211, 3, 1, "", "n"], [211, 2, 1, "", "over_power_basis"], [211, 2, 1, "", "reduced"], [211, 2, 1, "", "reduced_mod_p"], [211, 2, 1, "", "to_ancestor"], [211, 2, 1, "", "to_parent"], [211, 2, 1, "", "unify"]], "sympy.polys.numberfields.modules.ModuleEndomorphism": [[211, 2, 1, "", "__init__"]], "sympy.polys.numberfields.modules.ModuleHomomorphism": [[211, 2, 1, "", "__init__"], [211, 2, 1, "", "kernel"], [211, 2, 1, "", "matrix"]], "sympy.polys.numberfields.modules.PowerBasis": [[211, 2, 1, "", "__init__"], [211, 2, 1, "", "element_from_ANP"], [211, 2, 1, "", "element_from_alg_num"], [211, 2, 1, "", "element_from_poly"], [211, 2, 1, "", "represent"]], "sympy.polys.numberfields.modules.PowerBasisElement": [[211, 3, 1, "", "T"], [211, 2, 1, "", "as_expr"], [211, 3, 1, "", "generator"], [211, 3, 1, "", "is_rational"], [211, 2, 1, "", "norm"], [211, 2, 1, "", "numerator"], [211, 2, 1, "", "poly"], [211, 2, 1, "", "to_ANP"], [211, 2, 1, "", "to_alg_num"]], "sympy.polys.numberfields.modules.Submodule": [[211, 3, 1, "", "QQ_matrix"], [211, 2, 1, "", "__init__"], [211, 2, 1, "", "add"], [211, 2, 1, "", "basis_element_pullbacks"], [211, 2, 1, "", "discard_before"], [211, 2, 1, "", "mul"], [211, 2, 1, "", "reduce_element"], [211, 2, 1, "", "reduced"], [211, 2, 1, "", "represent"]], "sympy.polys.numberfields.primes": [[211, 1, 1, "", "PrimeIdeal"], [211, 4, 1, "", "prime_decomp"], [211, 4, 1, "", "prime_valuation"]], "sympy.polys.numberfields.primes.PrimeIdeal": [[211, 2, 1, "", "__add__"], [211, 2, 1, "", "__init__"], [211, 2, 1, "", "__mul__"], [211, 2, 1, "", "as_submodule"], [211, 3, 1, "", "is_inert"], [211, 2, 1, "", "reduce_ANP"], [211, 2, 1, "", "reduce_alg_num"], [211, 2, 1, "", "reduce_element"], [211, 2, 1, "", "repr"], [211, 2, 1, "", "test_factor"], [211, 2, 1, "", "valuation"]], "sympy.polys.numberfields.subfield": [[211, 4, 1, "", "field_isomorphism"], [211, 4, 1, "", "primitive_element"], [211, 4, 1, "", "to_number_field"]], "sympy.polys.numberfields.utilities": [[211, 1, 1, "", "AlgIntPowers"], [211, 4, 1, "", "coeff_search"], [211, 4, 1, "", "extract_fundamental_discriminant"], [211, 4, 1, "", "get_num_denom"], [211, 4, 1, "", "is_int"], [211, 4, 1, "", "is_rat"], [211, 4, 1, "", "isolate"], [211, 4, 1, "", "supplement_a_subspace"]], "sympy.polys.numberfields.utilities.AlgIntPowers": [[211, 2, 1, "", "__init__"]], "sympy.polys.orderings": [[212, 1, 1, "", "GradedLexOrder"], [212, 1, 1, "", "LexOrder"], [212, 1, 1, "", "MonomialOrder"], [212, 1, 1, "", "ReversedGradedLexOrder"]], "sympy.polys.orthopolys": [[212, 4, 1, "", "chebyshevt_poly"], [212, 4, 1, "", "chebyshevu_poly"], [212, 4, 1, "", "gegenbauer_poly"], [212, 4, 1, "", "hermite_poly"], [212, 4, 1, "", "hermite_prob_poly"], [212, 4, 1, "", "jacobi_poly"], [212, 4, 1, "", "laguerre_poly"], [212, 4, 1, "", "legendre_poly"], [212, 4, 1, "", "spherical_bessel_fn"]], "sympy.polys.partfrac": [[212, 4, 1, "", "apart"], [212, 4, 1, "", "apart_list"], [212, 4, 1, "", "assemble_partfrac_list"]], "sympy.polys.polyclasses": [[207, 1, 1, "", "ANP"], [207, 1, 1, "", "DMF"], [207, 1, 1, "", "DMP"]], "sympy.polys.polyclasses.ANP": [[207, 2, 1, "", "LC"], [207, 2, 1, "", "TC"], [207, 3, 1, "", "is_ground"], [207, 3, 1, "", "is_one"], [207, 3, 1, "", "is_zero"], [207, 2, 1, "", "pow"], [207, 2, 1, "", "to_dict"], [207, 2, 1, "", "to_list"], [207, 2, 1, "", "to_sympy_dict"], [207, 2, 1, "", "to_sympy_list"], [207, 2, 1, "", "to_tuple"], [207, 2, 1, "", "unify"]], "sympy.polys.polyclasses.DMF": [[207, 2, 1, "", "add"], [207, 2, 1, "", "cancel"], [207, 2, 1, "", "denom"], [207, 2, 1, "", "exquo"], [207, 2, 1, "", "frac_unify"], [207, 2, 1, "", "half_per"], [207, 2, 1, "", "invert"], [207, 3, 1, "", "is_one"], [207, 3, 1, "", "is_zero"], [207, 2, 1, "", "mul"], [207, 2, 1, "", "neg"], [207, 2, 1, "", "numer"], [207, 2, 1, "", "per"], [207, 2, 1, "", "poly_unify"], [207, 2, 1, "", "pow"], [207, 2, 1, "", "quo"], [207, 2, 1, "", "sub"]], "sympy.polys.polyclasses.DMP": [[207, 2, 1, "", "LC"], [207, 2, 1, "", "TC"], [207, 2, 1, "", "abs"], [207, 2, 1, "", "add"], [207, 2, 1, "", "add_ground"], [207, 2, 1, "", "all_coeffs"], [207, 2, 1, "", "all_monoms"], [207, 2, 1, "", "all_terms"], [207, 2, 1, "", "cancel"], [207, 2, 1, "", "cauchy_lower_bound"], [207, 2, 1, "", "cauchy_upper_bound"], [207, 2, 1, "", "clear_denoms"], [207, 2, 1, "", "coeffs"], [207, 2, 1, "", "cofactors"], [207, 2, 1, "", "compose"], [207, 2, 1, "", "content"], [207, 2, 1, "", "convert"], [207, 2, 1, "", "count_complex_roots"], [207, 2, 1, "", "count_real_roots"], [207, 2, 1, "", "decompose"], [207, 2, 1, "", "deflate"], [207, 2, 1, "", "degree"], [207, 2, 1, "", "degree_list"], [207, 2, 1, "", "diff"], [207, 2, 1, "", "discriminant"], [207, 2, 1, "", "div"], [207, 2, 1, "", "eject"], [207, 2, 1, "", "eval"], [207, 2, 1, "", "exclude"], [207, 2, 1, "", "exquo"], [207, 2, 1, "", "exquo_ground"], [207, 2, 1, "", "factor_list"], [207, 2, 1, "", "factor_list_include"], [207, 2, 1, "", "from_dict"], [207, 2, 1, "", "from_list"], [207, 2, 1, "", "from_sympy_list"], [207, 2, 1, "", "gcd"], [207, 2, 1, "", "gcdex"], [207, 2, 1, "", "gff_list"], [207, 2, 1, "", "half_gcdex"], [207, 2, 1, "", "homogeneous_order"], [207, 2, 1, "", "homogenize"], [207, 2, 1, "", "inject"], [207, 2, 1, "", "integrate"], [207, 2, 1, "", "intervals"], [207, 2, 1, "", "invert"], [207, 3, 1, "", "is_cyclotomic"], [207, 3, 1, "", "is_ground"], [207, 3, 1, "", "is_homogeneous"], [207, 3, 1, "", "is_irreducible"], [207, 3, 1, "", "is_linear"], [207, 3, 1, "", "is_monic"], [207, 3, 1, "", "is_monomial"], [207, 3, 1, "", "is_one"], [207, 3, 1, "", "is_primitive"], [207, 3, 1, "", "is_quadratic"], [207, 3, 1, "", "is_sqf"], [207, 3, 1, "", "is_zero"], [207, 2, 1, "", "l1_norm"], [207, 2, 1, "", "l2_norm_squared"], [207, 2, 1, "", "lcm"], [207, 2, 1, "", "lift"], [207, 2, 1, "", "max_norm"], [207, 2, 1, "", "mignotte_sep_bound_squared"], [207, 2, 1, "", "monic"], [207, 2, 1, "", "monoms"], [207, 2, 1, "", "mul"], [207, 2, 1, "", "mul_ground"], [207, 2, 1, "", "neg"], [207, 2, 1, "", "norm"], [207, 2, 1, "", "nth"], [207, 2, 1, "", "pdiv"], [207, 2, 1, "", "per"], [207, 2, 1, "", "permute"], [207, 2, 1, "", "pexquo"], [207, 2, 1, "", "pow"], [207, 2, 1, "", "pquo"], [207, 2, 1, "", "prem"], [207, 2, 1, "", "primitive"], [207, 2, 1, "", "quo"], [207, 2, 1, "", "quo_ground"], [207, 2, 1, "", "refine_root"], [207, 2, 1, "", "rem"], [207, 2, 1, "", "resultant"], [207, 2, 1, "", "revert"], [207, 2, 1, "", "shift"], [207, 2, 1, "", "slice"], [207, 2, 1, "", "sqf_list"], [207, 2, 1, "", "sqf_list_include"], [207, 2, 1, "", "sqf_norm"], [207, 2, 1, "", "sqf_part"], [207, 2, 1, "", "sqr"], [207, 2, 1, "", "sturm"], [207, 2, 1, "", "sub"], [207, 2, 1, "", "sub_ground"], [207, 2, 1, "", "subresultants"], [207, 2, 1, "", "terms"], [207, 2, 1, "", "terms_gcd"], [207, 2, 1, "", "to_dict"], [207, 2, 1, "", "to_exact"], [207, 2, 1, "", "to_field"], [207, 2, 1, "", "to_list"], [207, 2, 1, "", "to_ring"], [207, 2, 1, "", "to_sympy_dict"], [207, 2, 1, "", "to_sympy_list"], [207, 2, 1, "", "to_tuple"], [207, 2, 1, "", "total_degree"], [207, 2, 1, "", "transform"], [207, 2, 1, "", "trunc"], [207, 2, 1, "", "unify"]], "sympy.polys": [[209, 0, 0, "-", "polyconfig"], [209, 0, 0, "-", "polyoptions"], [214, 0, 0, "-", "solvers"]], "sympy.polys.polyconfig": [[209, 4, 1, "", "setup"]], "sympy.polys.polyerrors": [[209, 1, 1, "", "BasePolynomialError"], [209, 1, 1, "", "CoercionFailed"], [209, 1, 1, "", "ComputationFailed"], [209, 1, 1, "", "DomainError"], [209, 1, 1, "", "EvaluationFailed"], [209, 1, 1, "", "ExactQuotientFailed"], [209, 1, 1, "", "ExtraneousFactors"], [209, 1, 1, "", "FlagError"], [209, 1, 1, "", "GeneratorsError"], [209, 1, 1, "", "GeneratorsNeeded"], [209, 1, 1, "", "HeuristicGCDFailed"], [209, 1, 1, "", "HomomorphismFailed"], [209, 1, 1, "", "IsomorphismFailed"], [209, 1, 1, "", "MultivariatePolynomialError"], [209, 1, 1, "", "NotAlgebraic"], [209, 1, 1, "", "NotInvertible"], [209, 1, 1, "", "NotReversible"], [209, 1, 1, "", "OperationNotSupported"], [209, 1, 1, "", "OptionError"], [209, 1, 1, "", "PolificationFailed"], [209, 1, 1, "", "PolynomialError"], [209, 1, 1, "", "RefinementFailed"], [209, 1, 1, "", "UnificationFailed"], [209, 1, 1, "", "UnivariatePolynomialError"]], "sympy.polys.polyfuncs": [[212, 4, 1, "", "horner"], [212, 4, 1, "", "interpolate"], [212, 4, 1, "", "symmetrize"], [212, 4, 1, "", "viete"]], "sympy.polys.polyoptions": [[209, 1, 1, "", "Options"], [209, 4, 1, "", "build_options"]], "sympy.polys.polyoptions.Options": [[209, 2, 1, "", "clone"]], "sympy.polys.polyroots": [[212, 4, 1, "", "roots"]], "sympy.polys.polytools": [[212, 1, 1, "", "GroebnerBasis"], [212, 4, 1, "", "LC"], [212, 4, 1, "", "LM"], [212, 4, 1, "", "LT"], [212, 1, 1, "", "Poly"], [212, 1, 1, "", "PurePoly"], [212, 4, 1, "", "cancel"], [212, 4, 1, "", "cofactors"], [212, 4, 1, "", "compose"], [212, 4, 1, "", "content"], [212, 4, 1, "", "count_roots"], [212, 4, 1, "", "decompose"], [212, 4, 1, "", "degree"], [212, 4, 1, "", "degree_list"], [212, 4, 1, "", "discriminant"], [212, 4, 1, "", "div"], [212, 4, 1, "", "exquo"], [212, 4, 1, "", "factor"], [212, 4, 1, "", "factor_list"], [212, 4, 1, "", "gcd"], [212, 4, 1, "", "gcd_list"], [212, 4, 1, "", "gcdex"], [212, 4, 1, "", "gff"], [212, 4, 1, "", "gff_list"], [212, 4, 1, "", "groebner"], [212, 4, 1, "", "ground_roots"], [212, 4, 1, "", "half_gcdex"], [212, 4, 1, "", "intervals"], [212, 4, 1, "", "invert"], [212, 4, 1, "", "is_zero_dimensional"], [212, 4, 1, "", "lcm"], [212, 4, 1, "", "lcm_list"], [212, 4, 1, "", "monic"], [212, 4, 1, "", "nroots"], [212, 4, 1, "", "nth_power_roots_poly"], [212, 4, 1, "", "parallel_poly_from_expr"], [212, 4, 1, "", "pdiv"], [212, 4, 1, "", "pexquo"], [212, 4, 1, "", "poly"], [212, 4, 1, "", "poly_from_expr"], [212, 4, 1, "", "pquo"], [212, 4, 1, "", "prem"], [212, 4, 1, "", "primitive"], [212, 4, 1, "", "quo"], [212, 4, 1, "", "real_roots"], [212, 4, 1, "", "reduced"], [212, 4, 1, "", "refine_root"], [212, 4, 1, "", "rem"], [212, 4, 1, "", "resultant"], [212, 4, 1, "", "sqf"], [212, 4, 1, "", "sqf_list"], [212, 4, 1, "", "sqf_norm"], [212, 4, 1, "", "sqf_part"], [212, 4, 1, "", "sturm"], [212, 4, 1, "", "subresultants"], [212, 4, 1, "", "terms_gcd"], [212, 4, 1, "", "trunc"]], "sympy.polys.polytools.GroebnerBasis": [[212, 2, 1, "", "contains"], [212, 2, 1, "", "fglm"], [212, 3, 1, "", "is_zero_dimensional"], [212, 2, 1, "", "reduce"]], "sympy.polys.polytools.Poly": [[212, 2, 1, "", "EC"], [212, 2, 1, "", "EM"], [212, 2, 1, "", "ET"], [212, 2, 1, "", "LC"], [212, 2, 1, "", "LM"], [212, 2, 1, "", "LT"], [212, 2, 1, "", "TC"], [212, 2, 1, "", "abs"], [212, 2, 1, "", "add"], [212, 2, 1, "", "add_ground"], [212, 2, 1, "", "all_coeffs"], [212, 2, 1, "", "all_monoms"], [212, 2, 1, "", "all_roots"], [212, 2, 1, "", "all_terms"], [212, 2, 1, "", "as_dict"], [212, 2, 1, "", "as_expr"], [212, 2, 1, "", "as_list"], [212, 2, 1, "", "as_poly"], [212, 2, 1, "", "cancel"], [212, 2, 1, "", "clear_denoms"], [212, 2, 1, "", "coeff_monomial"], [212, 2, 1, "", "coeffs"], [212, 2, 1, "", "cofactors"], [212, 2, 1, "", "compose"], [212, 2, 1, "", "content"], [212, 2, 1, "", "count_roots"], [212, 2, 1, "", "decompose"], [212, 2, 1, "", "deflate"], [212, 2, 1, "", "degree"], [212, 2, 1, "", "degree_list"], [212, 2, 1, "", "diff"], [212, 2, 1, "", "discriminant"], [212, 2, 1, "", "dispersion"], [212, 2, 1, "", "dispersionset"], [212, 2, 1, "", "div"], [212, 3, 1, "", "domain"], [212, 2, 1, "", "eject"], [212, 2, 1, "", "eval"], [212, 2, 1, "", "exclude"], [212, 2, 1, "", "exquo"], [212, 2, 1, "", "exquo_ground"], [212, 2, 1, "", "factor_list"], [212, 2, 1, "", "factor_list_include"], [212, 3, 1, "", "free_symbols"], [212, 3, 1, "", "free_symbols_in_domain"], [212, 2, 1, "", "from_dict"], [212, 2, 1, "", "from_expr"], [212, 2, 1, "", "from_list"], [212, 2, 1, "", "from_poly"], [212, 2, 1, "", "galois_group"], [212, 2, 1, "", "gcd"], [212, 2, 1, "", "gcdex"], [212, 3, 1, "", "gen"], [212, 2, 1, "", "get_domain"], [212, 2, 1, "", "get_modulus"], [212, 2, 1, "", "gff_list"], [212, 2, 1, "", "ground_roots"], [212, 2, 1, "", "half_gcdex"], [212, 2, 1, "", "has_only_gens"], [212, 2, 1, "", "homogeneous_order"], [212, 2, 1, "", "homogenize"], [212, 2, 1, "", "inject"], [212, 2, 1, "", "integrate"], [212, 2, 1, "", "intervals"], [212, 2, 1, "", "invert"], [212, 3, 1, "", "is_cyclotomic"], [212, 3, 1, "", "is_ground"], [212, 3, 1, "", "is_homogeneous"], [212, 3, 1, "", "is_irreducible"], [212, 3, 1, "", "is_linear"], [212, 3, 1, "", "is_monic"], [212, 3, 1, "", "is_monomial"], [212, 3, 1, "", "is_multivariate"], [212, 3, 1, "", "is_one"], [212, 3, 1, "", "is_primitive"], [212, 3, 1, "", "is_quadratic"], [212, 3, 1, "", "is_sqf"], [212, 3, 1, "", "is_univariate"], [212, 3, 1, "", "is_zero"], [212, 2, 1, "", "l1_norm"], [212, 2, 1, "", "lcm"], [212, 2, 1, "", "length"], [212, 2, 1, "", "lift"], [212, 2, 1, "", "ltrim"], [212, 2, 1, "", "make_monic_over_integers_by_scaling_roots"], [212, 2, 1, "", "match"], [212, 2, 1, "", "max_norm"], [212, 2, 1, "", "monic"], [212, 2, 1, "", "monoms"], [212, 2, 1, "", "mul"], [212, 2, 1, "", "mul_ground"], [212, 2, 1, "", "neg"], [212, 2, 1, "", "new"], [212, 2, 1, "", "norm"], [212, 2, 1, "", "nroots"], [212, 2, 1, "", "nth"], [212, 2, 1, "", "nth_power_roots_poly"], [212, 3, 1, "", "one"], [212, 2, 1, "", "pdiv"], [212, 2, 1, "", "per"], [212, 2, 1, "", "pexquo"], [212, 2, 1, "", "pow"], [212, 2, 1, "", "pquo"], [212, 2, 1, "", "prem"], [212, 2, 1, "", "primitive"], [212, 2, 1, "", "quo"], [212, 2, 1, "", "quo_ground"], [212, 2, 1, "", "rat_clear_denoms"], [212, 2, 1, "", "real_roots"], [212, 2, 1, "", "refine_root"], [212, 2, 1, "", "rem"], [212, 2, 1, "", "reorder"], [212, 2, 1, "", "replace"], [212, 2, 1, "", "resultant"], [212, 2, 1, "", "retract"], [212, 2, 1, "", "revert"], [212, 2, 1, "", "root"], [212, 2, 1, "", "same_root"], [212, 2, 1, "", "set_domain"], [212, 2, 1, "", "set_modulus"], [212, 2, 1, "", "shift"], [212, 2, 1, "", "slice"], [212, 2, 1, "", "sqf_list"], [212, 2, 1, "", "sqf_list_include"], [212, 2, 1, "", "sqf_norm"], [212, 2, 1, "", "sqf_part"], [212, 2, 1, "", "sqr"], [212, 2, 1, "", "sturm"], [212, 2, 1, "", "sub"], [212, 2, 1, "", "sub_ground"], [212, 2, 1, "", "subresultants"], [212, 2, 1, "", "terms"], [212, 2, 1, "", "terms_gcd"], [212, 2, 1, "", "termwise"], [212, 2, 1, "", "to_exact"], [212, 2, 1, "", "to_field"], [212, 2, 1, "", "to_ring"], [212, 2, 1, "", "total_degree"], [212, 2, 1, "", "transform"], [212, 2, 1, "", "trunc"], [212, 2, 1, "", "unify"], [212, 3, 1, "", "unit"], [212, 3, 1, "", "zero"]], "sympy.polys.polytools.PurePoly": [[212, 3, 1, "", "free_symbols"]], "sympy.polys.rationaltools": [[212, 4, 1, "", "together"]], "sympy.polys.ring_series": [[213, 4, 1, "", "_tan1"], [213, 4, 1, "", "mul_xin"], [213, 4, 1, "", "pow_xin"], [213, 4, 1, "", "rs_LambertW"], [213, 4, 1, "", "rs_asin"], [213, 4, 1, "", "rs_atan"], [213, 4, 1, "", "rs_atanh"], [213, 4, 1, "", "rs_compose_add"], [213, 4, 1, "", "rs_cos"], [213, 4, 1, "", "rs_cos_sin"], [213, 4, 1, "", "rs_cosh"], [213, 4, 1, "", "rs_cot"], [213, 4, 1, "", "rs_diff"], [213, 4, 1, "", "rs_exp"], [213, 4, 1, "", "rs_fun"], [213, 4, 1, "", "rs_hadamard_exp"], [213, 4, 1, "", "rs_integrate"], [213, 4, 1, "", "rs_is_puiseux"], [213, 4, 1, "", "rs_log"], [213, 4, 1, "", "rs_mul"], [213, 4, 1, "", "rs_newton"], [213, 4, 1, "", "rs_nth_root"], [213, 4, 1, "", "rs_pow"], [213, 4, 1, "", "rs_puiseux"], [213, 4, 1, "", "rs_puiseux2"], [213, 4, 1, "", "rs_series_from_list"], [213, 4, 1, "", "rs_series_inversion"], [213, 4, 1, "", "rs_series_reversion"], [213, 4, 1, "", "rs_sin"], [213, 4, 1, "", "rs_sinh"], [213, 4, 1, "", "rs_square"], [213, 4, 1, "", "rs_subs"], [213, 4, 1, "", "rs_tan"], [213, 4, 1, "", "rs_tanh"], [213, 4, 1, "", "rs_trunc"]], "sympy.polys.rings": [[207, 1, 1, "", "PolyElement"], [207, 1, 1, "", "PolyRing"], [207, 4, 1, "", "ring"], [207, 4, 1, "", "sring"], [207, 4, 1, "", "vring"], [207, 4, 1, "", "xring"]], "sympy.polys.rings.PolyElement": [[207, 2, 1, "", "almosteq"], [207, 2, 1, "", "cancel"], [207, 2, 1, "", "coeff"], [207, 2, 1, "", "coeffs"], [207, 2, 1, "", "const"], [207, 2, 1, "", "content"], [207, 2, 1, "", "copy"], [207, 2, 1, "", "degree"], [207, 2, 1, "", "degrees"], [207, 2, 1, "", "diff"], [207, 2, 1, "", "div"], [207, 2, 1, "", "imul_num"], [207, 2, 1, "", "itercoeffs"], [207, 2, 1, "", "itermonoms"], [207, 2, 1, "", "iterterms"], [207, 2, 1, "", "leading_expv"], [207, 2, 1, "", "leading_monom"], [207, 2, 1, "", "leading_term"], [207, 2, 1, "", "listcoeffs"], [207, 2, 1, "", "listmonoms"], [207, 2, 1, "", "listterms"], [207, 2, 1, "", "monic"], [207, 2, 1, "", "monoms"], [207, 2, 1, "", "primitive"], [207, 2, 1, "", "square"], [207, 2, 1, "", "strip_zero"], [207, 2, 1, "", "symmetrize"], [207, 2, 1, "", "tail_degree"], [207, 2, 1, "", "tail_degrees"], [207, 2, 1, "", "terms"]], "sympy.polys.rings.PolyRing": [[207, 2, 1, "", "add"], [207, 2, 1, "", "add_gens"], [207, 2, 1, "", "compose"], [207, 2, 1, "", "drop"], [207, 2, 1, "", "drop_to_ground"], [207, 2, 1, "", "index"], [207, 2, 1, "", "monomial_basis"], [207, 2, 1, "", "mul"], [207, 2, 1, "", "symmetric_poly"]], "sympy.polys.rootoftools": [[212, 1, 1, "", "ComplexRootOf"], [212, 1, 1, "", "RootOf"], [212, 1, 1, "", "RootSum"], [212, 4, 1, "", "rootof"]], "sympy.polys.rootoftools.ComplexRootOf": [[212, 2, 1, "", "_all_roots"], [212, 2, 1, "", "_complexes_index"], [212, 2, 1, "", "_complexes_sorted"], [212, 2, 1, "", "_count_roots"], [212, 2, 1, "", "_ensure_complexes_init"], [212, 2, 1, "", "_ensure_reals_init"], [212, 2, 1, "", "_eval_evalf"], [212, 2, 1, "", "_eval_is_imaginary"], [212, 2, 1, "", "_eval_is_real"], [212, 2, 1, "", "_get_complexes"], [212, 2, 1, "", "_get_complexes_sqf"], [212, 2, 1, "", "_get_interval"], [212, 2, 1, "", "_get_reals"], [212, 2, 1, "", "_get_reals_sqf"], [212, 2, 1, "", "_get_roots"], [212, 2, 1, "", "_indexed_root"], [212, 2, 1, "", "_new"], [212, 2, 1, "", "_postprocess_root"], [212, 2, 1, "", "_preprocess_roots"], [212, 2, 1, "", "_real_roots"], [212, 2, 1, "", "_reals_index"], [212, 2, 1, "", "_reals_sorted"], [212, 2, 1, "", "_refine_complexes"], [212, 2, 1, "", "_reset"], [212, 2, 1, "", "_roots_trivial"], [212, 2, 1, "", "_set_interval"], [212, 2, 1, "", "all_roots"], [212, 2, 1, "", "clear_cache"], [212, 2, 1, "", "eval_approx"], [212, 2, 1, "", "eval_rational"], [212, 2, 1, "", "real_roots"]], "sympy.polys.rootoftools.RootSum": [[212, 2, 1, "", "new"]], "sympy.polys.solvers": [[214, 4, 1, "", "_solve_lin_sys"], [214, 4, 1, "", "_solve_lin_sys_component"], [214, 4, 1, "", "eqs_to_matrix"], [214, 4, 1, "", "solve_lin_sys"], [214, 4, 1, "", "sympy_eqs_to_ring"]], "sympy.polys.specialpolys": [[212, 4, 1, "", "cyclotomic_poly"], [212, 4, 1, "", "interpolating_poly"], [212, 4, 1, "", "random_poly"], [212, 4, 1, "", "swinnerton_dyer_poly"], [212, 4, 1, "", "symmetric_poly"]], "sympy.printing": [[216, 0, 0, "-", "aesaracode"], [216, 0, 0, "-", "c"], [216, 0, 0, "-", "codeprinter"], [216, 0, 0, "-", "conventions"], [216, 0, 0, "-", "cxx"], [216, 0, 0, "-", "fortran"], [216, 0, 0, "-", "gtk"], [216, 0, 0, "-", "jscode"], [216, 0, 0, "-", "julia"], [216, 0, 0, "-", "lambdarepr"], [216, 0, 0, "-", "latex"], [216, 0, 0, "-", "maple"], [216, 0, 0, "-", "mathematica"], [216, 0, 0, "-", "mathml"], [216, 0, 0, "-", "octave"], [216, 0, 0, "-", "precedence"], [216, 0, 0, "-", "pretty"], [216, 0, 0, "-", "preview"], [216, 0, 0, "-", "printer"], [216, 0, 0, "-", "pycode"], [216, 0, 0, "-", "python"], [216, 0, 0, "-", "rcode"], [216, 0, 0, "-", "repr"], [216, 0, 0, "-", "rust"], [216, 0, 0, "-", "smtlib"], [216, 0, 0, "-", "str"], [216, 0, 0, "-", "tree"]], "sympy.printing.aesaracode": [[216, 1, 1, "", "AesaraPrinter"], [216, 4, 1, "", "aesara_code"], [216, 4, 1, "", "aesara_function"], [216, 4, 1, "", "dim_handling"]], "sympy.printing.aesaracode.AesaraPrinter": [[216, 2, 1, "", "doprint"], [216, 5, 1, "", "printmethod"]], "sympy.printing.c": [[216, 1, 1, "", "C89CodePrinter"], [216, 1, 1, "", "C99CodePrinter"], [216, 4, 1, "", "ccode"], [216, 6, 1, "", "known_functions_C89"], [216, 6, 1, "", "known_functions_C99"], [216, 4, 1, "", "print_ccode"]], "sympy.printing.c.C89CodePrinter": [[216, 2, 1, "", "indent_code"], [216, 5, 1, "", "printmethod"]], "sympy.printing.c.C99CodePrinter": [[216, 5, 1, "", "printmethod"]], "sympy.printing.codeprinter": [[216, 7, 1, "", "AssignmentError"], [216, 1, 1, "", "CodePrinter"], [216, 4, 1, "", "cxxcode"]], "sympy.printing.codeprinter.CodePrinter": [[216, 2, 1, "", "doprint"], [216, 5, 1, "", "printmethod"]], "sympy.printing.conventions": [[216, 4, 1, "", "split_super_sub"]], "sympy.printing.cxx": [[216, 1, 1, "", "CXX11CodePrinter"], [216, 1, 1, "", "CXX98CodePrinter"]], "sympy.printing.cxx.CXX11CodePrinter": [[216, 5, 1, "", "printmethod"]], "sympy.printing.cxx.CXX98CodePrinter": [[216, 5, 1, "", "printmethod"]], "sympy.printing.dot": [[216, 4, 1, "", "dotprint"]], "sympy.printing.fortran": [[216, 1, 1, "", "FCodePrinter"], [216, 4, 1, "", "fcode"], [216, 4, 1, "", "print_fcode"]], "sympy.printing.fortran.FCodePrinter": [[216, 2, 1, "", "indent_code"], [216, 5, 1, "", "printmethod"]], "sympy.printing.gtk": [[216, 4, 1, "", "print_gtk"]], "sympy.printing.jscode": [[216, 1, 1, "", "JavascriptCodePrinter"], [216, 4, 1, "", "jscode"], [216, 6, 1, "", "known_functions"]], "sympy.printing.jscode.JavascriptCodePrinter": [[216, 2, 1, "", "indent_code"], [216, 5, 1, "", "printmethod"]], "sympy.printing.julia": [[216, 1, 1, "", "JuliaCodePrinter"], [216, 4, 1, "", "julia_code"], [216, 6, 1, "", "known_fcns_src1"], [216, 6, 1, "", "known_fcns_src2"]], "sympy.printing.julia.JuliaCodePrinter": [[216, 2, 1, "", "indent_code"], [216, 5, 1, "", "printmethod"]], "sympy.printing.lambdarepr": [[216, 1, 1, "", "LambdaPrinter"], [216, 4, 1, "", "lambdarepr"]], "sympy.printing.lambdarepr.LambdaPrinter": [[216, 5, 1, "", "printmethod"]], "sympy.printing.latex": [[216, 1, 1, "", "LatexPrinter"], [216, 6, 1, "", "accepted_latex_functions"], [216, 4, 1, "", "latex"], [216, 4, 1, "", "print_latex"]], "sympy.printing.latex.LatexPrinter": [[216, 2, 1, "", "parenthesize_super"], [216, 5, 1, "", "printmethod"]], "sympy.printing.maple": [[216, 1, 1, "", "MapleCodePrinter"], [216, 4, 1, "", "maple_code"], [216, 4, 1, "", "print_maple_code"]], "sympy.printing.maple.MapleCodePrinter": [[216, 5, 1, "", "printmethod"]], "sympy.printing.mathematica": [[216, 1, 1, "", "MCodePrinter"], [216, 6, 1, "", "known_functions"], [216, 4, 1, "", "mathematica_code"]], "sympy.printing.mathematica.MCodePrinter": [[216, 5, 1, "", "printmethod"]], "sympy.printing.mathml": [[216, 1, 1, "", "MathMLContentPrinter"], [216, 1, 1, "", "MathMLPresentationPrinter"], [216, 1, 1, "", "MathMLPrinterBase"], [216, 4, 1, "", "mathml"], [216, 4, 1, "", "print_mathml"]], "sympy.printing.mathml.MathMLContentPrinter": [[216, 2, 1, "", "mathml_tag"], [216, 5, 1, "", "printmethod"]], "sympy.printing.mathml.MathMLPresentationPrinter": [[216, 2, 1, "", "mathml_tag"], [216, 5, 1, "", "printmethod"]], "sympy.printing.mathml.MathMLPrinterBase": [[216, 2, 1, "", "doprint"]], "sympy.printing.octave": [[216, 1, 1, "", "OctaveCodePrinter"], [216, 6, 1, "", "known_fcns_src1"], [216, 6, 1, "", "known_fcns_src2"], [216, 4, 1, "", "octave_code"]], "sympy.printing.octave.OctaveCodePrinter": [[216, 2, 1, "", "indent_code"], [216, 5, 1, "", "printmethod"]], "sympy.printing.precedence": [[216, 6, 1, "", "PRECEDENCE"], [216, 6, 1, "", "PRECEDENCE_FUNCTIONS"], [216, 6, 1, "", "PRECEDENCE_VALUES"], [216, 4, 1, "", "precedence"]], "sympy.printing.pretty": [[216, 0, 0, "-", "pretty"], [216, 0, 0, "-", "pretty_symbology"], [216, 0, 0, "-", "stringpict"]], "sympy.printing.pretty.pretty": [[216, 1, 1, "", "PrettyPrinter"], [216, 4, 1, "", "pretty"], [216, 4, 1, "", "pretty_print"]], "sympy.printing.pretty.pretty.PrettyPrinter": [[216, 5, 1, "", "printmethod"]], "sympy.printing.pretty.pretty_symbology": [[216, 4, 1, "", "G"], [216, 4, 1, "", "U"], [216, 4, 1, "", "VF"], [216, 4, 1, "", "annotated"], [216, 6, 1, "", "atoms_table"], [216, 6, 1, "", "digit_2txt"], [216, 6, 1, "", "frac"], [216, 4, 1, "", "g"], [216, 6, 1, "", "greek_letters"], [216, 4, 1, "", "hobj"], [216, 4, 1, "", "pretty_atom"], [216, 4, 1, "", "pretty_symbol"], [216, 4, 1, "", "pretty_try_use_unicode"], [216, 4, 1, "", "pretty_use_unicode"], [216, 6, 1, "", "root"], [216, 6, 1, "", "sub"], [216, 6, 1, "", "sup"], [216, 6, 1, "", "symb_2txt"], [216, 4, 1, "", "vobj"], [216, 4, 1, "", "xobj"], [216, 4, 1, "", "xstr"], [216, 4, 1, "", "xsym"]], "sympy.printing.pretty.stringpict": [[216, 1, 1, "", "prettyForm"], [216, 1, 1, "", "stringPict"]], "sympy.printing.pretty.stringpict.prettyForm": [[216, 2, 1, "", "apply"]], "sympy.printing.pretty.stringpict.stringPict": [[216, 2, 1, "", "above"], [216, 2, 1, "", "below"], [216, 2, 1, "", "height"], [216, 2, 1, "", "left"], [216, 2, 1, "", "leftslash"], [216, 2, 1, "", "next"], [216, 2, 1, "", "parens"], [216, 2, 1, "", "render"], [216, 2, 1, "", "right"], [216, 2, 1, "", "root"], [216, 2, 1, "", "stack"], [216, 2, 1, "", "terminal_width"], [216, 2, 1, "", "width"]], "sympy.printing.preview": [[216, 4, 1, "", "preview"]], "sympy.printing.printer": [[216, 1, 1, "", "Printer"]], "sympy.printing.printer.Printer": [[216, 2, 1, "", "_print"], [216, 2, 1, "", "doprint"], [216, 5, 1, "", "printmethod"], [216, 2, 1, "", "set_global_settings"]], "sympy.printing.pycode": [[216, 1, 1, "", "MpmathPrinter"], [216, 4, 1, "", "pycode"]], "sympy.printing.rcode": [[216, 1, 1, "", "RCodePrinter"], [216, 6, 1, "", "known_functions"], [216, 4, 1, "", "print_rcode"], [216, 4, 1, "", "rcode"]], "sympy.printing.rcode.RCodePrinter": [[216, 2, 1, "", "indent_code"], [216, 5, 1, "", "printmethod"]], "sympy.printing.repr": [[216, 1, 1, "", "ReprPrinter"], [216, 4, 1, "", "srepr"]], "sympy.printing.repr.ReprPrinter": [[216, 2, 1, "", "emptyPrinter"], [216, 5, 1, "", "printmethod"], [216, 2, 1, "", "reprify"]], "sympy.printing.rust": [[216, 1, 1, "", "RustCodePrinter"], [216, 6, 1, "", "known_functions"], [216, 4, 1, "", "rust_code"]], "sympy.printing.rust.RustCodePrinter": [[216, 2, 1, "", "indent_code"], [216, 5, 1, "", "printmethod"]], "sympy.printing.smtlib": [[216, 1, 1, "", "SMTLibPrinter"], [216, 4, 1, "", "smtlib_code"]], "sympy.printing.smtlib.SMTLibPrinter": [[216, 5, 1, "", "_default_settings"], [216, 5, 1, "", "printmethod"]], "sympy.printing.str": [[216, 1, 1, "", "StrPrinter"], [216, 4, 1, "", "sstr"], [216, 4, 1, "", "sstrrepr"]], "sympy.printing.str.StrPrinter": [[216, 5, 1, "", "printmethod"]], "sympy.printing.tree": [[216, 4, 1, "", "pprint_nodes"], [216, 4, 1, "", "print_node"], [216, 4, 1, "", "print_tree"], [216, 4, 1, "", "tree"]], "sympy.series.acceleration": [[223, 4, 1, "", "richardson"], [223, 4, 1, "", "shanks"]], "sympy.series.formal": [[218, 1, 1, "", "FiniteFormalPowerSeries"], [218, 1, 1, "", "FormalPowerSeries"], [218, 1, 1, "", "FormalPowerSeriesCompose"], [218, 1, 1, "", "FormalPowerSeriesInverse"], [218, 1, 1, "", "FormalPowerSeriesProduct"], [218, 4, 1, "", "compute_fps"], [218, 4, 1, "", "exp_re"], [218, 4, 1, "", "fps"], [218, 4, 1, "", "hyper_algorithm"], [218, 4, 1, "", "hyper_re"], [218, 4, 1, "", "rational_algorithm"], [218, 4, 1, "", "rational_independent"], [218, 4, 1, "", "rsolve_hypergeometric"], [218, 4, 1, "", "simpleDE"], [218, 4, 1, "", "solve_de"]], "sympy.series.formal.FormalPowerSeries": [[218, 2, 1, "", "coeff_bell"], [218, 2, 1, "", "compose"], [218, 3, 1, "", "infinite"], [218, 2, 1, "", "integrate"], [218, 2, 1, "", "inverse"], [218, 2, 1, "", "polynomial"], [218, 2, 1, "", "product"], [218, 2, 1, "", "truncate"]], "sympy.series.formal.FormalPowerSeriesCompose": [[218, 3, 1, "", "function"]], "sympy.series.formal.FormalPowerSeriesInverse": [[218, 3, 1, "", "function"]], "sympy.series.formal.FormalPowerSeriesProduct": [[218, 3, 1, "", "function"]], "sympy.series.fourier": [[219, 1, 1, "", "FourierSeries"], [219, 4, 1, "", "fourier_series"]], "sympy.series.fourier.FourierSeries": [[219, 2, 1, "", "scale"], [219, 2, 1, "", "scalex"], [219, 2, 1, "", "shift"], [219, 2, 1, "", "shiftx"], [219, 2, 1, "", "sigma_approximation"], [219, 2, 1, "", "truncate"]], "sympy.series.gruntz": [[223, 1, 1, "", "SubsSet"], [223, 4, 1, "", "build_expression_tree"], [223, 4, 1, "", "calculate_series"], [223, 4, 1, "", "compare"], [223, 4, 1, "", "gruntz"], [223, 4, 1, "", "limitinf"], [223, 4, 1, "", "mrv"], [223, 4, 1, "", "mrv_leadterm"], [223, 4, 1, "", "mrv_max1"], [223, 4, 1, "", "mrv_max3"], [223, 4, 1, "", "rewrite"], [223, 4, 1, "", "sign"]], "sympy.series.gruntz.SubsSet": [[223, 2, 1, "", "copy"], [223, 2, 1, "", "do_subs"], [223, 2, 1, "", "meets"], [223, 2, 1, "", "union"]], "sympy.series.limits": [[223, 1, 1, "", "Limit"], [223, 4, 1, "", "limit"]], "sympy.series.limits.Limit": [[223, 2, 1, "", "doit"]], "sympy.series.limitseq": [[221, 4, 1, "", "difference_delta"], [221, 4, 1, "", "dominant"], [221, 4, 1, "", "limit_seq"]], "sympy.series.order": [[223, 1, 1, "", "Order"]], "sympy.series.order.Order": [[223, 2, 1, "", "contains"]], "sympy.series.residues": [[223, 4, 1, "", "residue"]], "sympy.series.sequences": [[222, 1, 1, "", "EmptySequence"], [222, 1, 1, "", "RecursiveSeq"], [222, 1, 1, "", "SeqAdd"], [222, 1, 1, "", "SeqBase"], [222, 1, 1, "", "SeqFormula"], [222, 1, 1, "", "SeqMul"], [222, 1, 1, "", "SeqPer"], [222, 4, 1, "", "sequence"]], "sympy.series.sequences.EmptySequence": [[222, 2, 1, "", "coeff_mul"]], "sympy.series.sequences.RecursiveSeq": [[222, 3, 1, "", "initial"], [222, 3, 1, "", "interval"], [222, 3, 1, "", "n"], [222, 3, 1, "", "recurrence"], [222, 3, 1, "", "start"], [222, 3, 1, "", "stop"], [222, 3, 1, "", "y"], [222, 3, 1, "", "yn"]], "sympy.series.sequences.SeqAdd": [[222, 2, 1, "", "reduce"]], "sympy.series.sequences.SeqBase": [[222, 2, 1, "", "coeff"], [222, 2, 1, "", "coeff_mul"], [222, 2, 1, "", "find_linear_recurrence"], [222, 3, 1, "", "free_symbols"], [222, 3, 1, "", "gen"], [222, 3, 1, "", "interval"], [222, 3, 1, "", "length"], [222, 3, 1, "", "start"], [222, 3, 1, "", "stop"], [222, 3, 1, "", "variables"]], "sympy.series.sequences.SeqFormula": [[222, 2, 1, "", "coeff_mul"]], "sympy.series.sequences.SeqMul": [[222, 2, 1, "", "reduce"]], "sympy.series.sequences.SeqPer": [[222, 2, 1, "", "coeff_mul"]], "sympy.series.series": [[223, 4, 1, "", "series"]], "sympy.sets": [[224, 0, 0, "-", "conditionset"], [224, 0, 0, "-", "fancysets"], [224, 0, 0, "-", "powerset"], [224, 0, 0, "-", "sets"]], "sympy.sets.conditionset": [[224, 1, 1, "", "ConditionSet"], [224, 1, 1, "", "Contains"], [224, 1, 1, "", "SetKind"]], "sympy.sets.fancysets": [[224, 1, 1, "", "CartesianComplexRegion"], [224, 1, 1, "", "ComplexRegion"], [224, 1, 1, "", "Complexes"], [224, 1, 1, "", "ImageSet"], [224, 1, 1, "", "Integers"], [224, 1, 1, "", "Naturals"], [224, 1, 1, "", "Naturals0"], [224, 1, 1, "", "PolarComplexRegion"], [224, 1, 1, "", "Range"], [224, 1, 1, "", "Rationals"], [224, 1, 1, "", "Reals"], [224, 4, 1, "", "normalize_theta_set"]], "sympy.sets.fancysets.ComplexRegion": [[224, 3, 1, "", "a_interval"], [224, 3, 1, "", "b_interval"], [224, 2, 1, "", "from_real"], [224, 3, 1, "", "psets"], [224, 3, 1, "", "sets"]], "sympy.sets.fancysets.Range": [[224, 2, 1, "", "as_relational"], [224, 3, 1, "", "reversed"]], "sympy.sets.powerset": [[224, 1, 1, "", "PowerSet"]], "sympy.sets.sets": [[224, 1, 1, "", "Complement"], [224, 1, 1, "", "DisjointUnion"], [224, 1, 1, "", "EmptySet"], [224, 1, 1, "", "FiniteSet"], [224, 1, 1, "", "Intersection"], [224, 1, 1, "", "Interval"], [224, 1, 1, "", "ProductSet"], [224, 1, 1, "", "Set"], [224, 1, 1, "", "SymmetricDifference"], [224, 1, 1, "", "Union"], [224, 1, 1, "", "UniversalSet"], [224, 4, 1, "", "imageset"]], "sympy.sets.sets.Complement": [[224, 2, 1, "", "as_relational"], [224, 2, 1, "", "reduce"]], "sympy.sets.sets.FiniteSet": [[224, 2, 1, "", "as_relational"]], "sympy.sets.sets.Intersection": [[224, 2, 1, "", "as_relational"]], "sympy.sets.sets.Interval": [[224, 2, 1, "", "Lopen"], [224, 2, 1, "", "Ropen"], [224, 2, 1, "", "as_relational"], [224, 3, 1, "", "end"], [224, 3, 1, "", "is_left_unbounded"], [224, 3, 1, "", "is_right_unbounded"], [224, 3, 1, "", "left_open"], [224, 2, 1, "", "open"], [224, 3, 1, "", "right_open"], [224, 3, 1, "", "start"]], "sympy.sets.sets.ProductSet": [[224, 3, 1, "", "is_iterable"]], "sympy.sets.sets.Set": [[224, 3, 1, "", "boundary"], [224, 3, 1, "", "closure"], [224, 2, 1, "", "complement"], [224, 2, 1, "", "contains"], [224, 3, 1, "", "inf"], [224, 3, 1, "", "interior"], [224, 2, 1, "", "intersect"], [224, 2, 1, "", "intersection"], [224, 3, 1, "", "is_closed"], [224, 2, 1, "", "is_disjoint"], [224, 3, 1, "", "is_open"], [224, 2, 1, "", "is_proper_subset"], [224, 2, 1, "", "is_proper_superset"], [224, 2, 1, "", "is_subset"], [224, 2, 1, "", "is_superset"], [224, 2, 1, "", "isdisjoint"], [224, 2, 1, "", "issubset"], [224, 2, 1, "", "issuperset"], [224, 3, 1, "", "kind"], [224, 3, 1, "", "measure"], [224, 2, 1, "", "powerset"], [224, 3, 1, "", "sup"], [224, 2, 1, "", "symmetric_difference"], [224, 2, 1, "", "union"]], "sympy.sets.sets.SymmetricDifference": [[224, 2, 1, "", "as_relational"]], "sympy.sets.sets.Union": [[224, 2, 1, "", "as_relational"]], "sympy.simplify": [[228, 0, 0, "-", "combsimp"], [228, 0, 0, "-", "cse_main"], [228, 0, 0, "-", "epathtools"], [228, 0, 0, "-", "hyperexpand"], [226, 0, 0, "-", "hyperexpand_doc"], [228, 0, 0, "-", "powsimp"], [228, 0, 0, "-", "radsimp"], [228, 0, 0, "-", "ratsimp"], [15, 0, 0, "-", "simplify"], [228, 0, 0, "-", "sqrtdenest"], [228, 0, 0, "-", "trigsimp"]], "sympy.simplify.combsimp": [[228, 4, 1, "", "combsimp"]], "sympy.simplify.cse_main": [[228, 4, 1, "", "cse"], [228, 4, 1, "", "opt_cse"], [228, 4, 1, "", "tree_cse"]], "sympy.simplify.epathtools": [[228, 1, 1, "", "EPath"], [228, 4, 1, "", "epath"]], "sympy.simplify.epathtools.EPath": [[228, 2, 1, "", "apply"], [228, 2, 1, "", "select"]], "sympy.simplify.fu": [[225, 4, 1, "", "TR0"], [225, 4, 1, "", "TR1"], [225, 4, 1, "", "TR10"], [225, 4, 1, "", "TR10i"], [225, 4, 1, "", "TR11"], [225, 4, 1, "", "TR111"], [225, 4, 1, "", "TR12"], [225, 4, 1, "", "TR12i"], [225, 4, 1, "", "TR13"], [225, 4, 1, "", "TR14"], [225, 4, 1, "", "TR15"], [225, 4, 1, "", "TR16"], [225, 4, 1, "", "TR2"], [225, 4, 1, "", "TR22"], [225, 4, 1, "", "TR2i"], [225, 4, 1, "", "TR3"], [225, 4, 1, "", "TR4"], [225, 4, 1, "", "TR5"], [225, 4, 1, "", "TR6"], [225, 4, 1, "", "TR7"], [225, 4, 1, "", "TR8"], [225, 4, 1, "", "TR9"], [225, 4, 1, "", "TRmorrie"], [225, 4, 1, "", "TRpower"], [225, 4, 1, "", "fu"]], "sympy.simplify.hyperexpand": [[228, 4, 1, "", "hyperexpand"]], "sympy.simplify.powsimp": [[228, 4, 1, "", "powdenest"], [228, 4, 1, "", "powsimp"]], "sympy.simplify.radsimp": [[228, 4, 1, "", "collect"], [228, 4, 1, "", "collect_const"], [228, 4, 1, "", "collect_sqrt"], [228, 4, 1, "", "fraction"], [228, 4, 1, "", "rad_rationalize"], [228, 4, 1, "", "radsimp"], [228, 4, 1, "", "rcollect"]], "sympy.simplify.ratsimp": [[228, 4, 1, "", "ratsimp"], [228, 4, 1, "", "ratsimpmodprime"]], "sympy.simplify.simplify": [[228, 4, 1, "", "besselsimp"], [228, 4, 1, "", "hypersimilar"], [228, 4, 1, "", "hypersimp"], [228, 4, 1, "", "kroneckersimp"], [228, 4, 1, "", "logcombine"], [228, 4, 1, "", "nsimplify"], [228, 4, 1, "", "nthroot"], [228, 4, 1, "", "posify"], [228, 4, 1, "", "separatevars"], [228, 4, 1, "", "simplify"]], "sympy.simplify.sqrtdenest": [[228, 4, 1, "", "sqrtdenest"]], "sympy.simplify.trigsimp": [[228, 4, 1, "", "trigsimp"]], "sympy.solvers.deutils": [[234, 4, 1, "", "ode_order"]], "sympy.solvers.diophantine.diophantine": [[229, 1, 1, "", "BinaryQuadratic"], [229, 1, 1, "", "CubicThue"], [229, 1, 1, "", "DiophantineEquationType"], [229, 1, 1, "", "DiophantineSolutionSet"], [229, 1, 1, "", "GeneralPythagorean"], [229, 1, 1, "", "GeneralSumOfEvenPowers"], [229, 1, 1, "", "GeneralSumOfSquares"], [229, 1, 1, "", "HomogeneousGeneralQuadratic"], [229, 1, 1, "", "HomogeneousTernaryQuadratic"], [229, 1, 1, "", "HomogeneousTernaryQuadraticNormal"], [229, 1, 1, "", "InhomogeneousGeneralQuadratic"], [229, 1, 1, "", "InhomogeneousTernaryQuadratic"], [229, 1, 1, "", "Linear"], [229, 4, 1, "", "PQa"], [229, 1, 1, "", "Univariate"], [229, 4, 1, "", "base_solution_linear"], [229, 4, 1, "", "classify_diop"], [229, 4, 1, "", "cornacchia"], [229, 4, 1, "", "descent"], [229, 4, 1, "", "diop_DN"], [229, 4, 1, "", "diop_bf_DN"], [229, 4, 1, "", "diop_general_pythagorean"], [229, 4, 1, "", "diop_general_sum_of_even_powers"], [229, 4, 1, "", "diop_general_sum_of_squares"], [229, 4, 1, "", "diop_linear"], [229, 4, 1, "", "diop_quadratic"], [229, 4, 1, "", "diop_solve"], [229, 4, 1, "", "diop_ternary_quadratic"], [229, 4, 1, "", "diop_ternary_quadratic_normal"], [229, 4, 1, "", "diophantine"], [229, 4, 1, "", "divisible"], [229, 4, 1, "", "equivalent"], [229, 4, 1, "", "find_DN"], [229, 4, 1, "", "gaussian_reduce"], [229, 4, 1, "", "holzer"], [229, 4, 1, "", "ldescent"], [229, 4, 1, "", "merge_solution"], [229, 4, 1, "", "parametrize_ternary_quadratic"], [229, 4, 1, "", "partition"], [229, 4, 1, "", "power_representation"], [229, 4, 1, "", "prime_as_sum_of_two_squares"], [229, 4, 1, "", "reconstruct"], [229, 4, 1, "", "sqf_normal"], [229, 4, 1, "", "square_factor"], [229, 4, 1, "", "sum_of_four_squares"], [229, 4, 1, "", "sum_of_powers"], [229, 4, 1, "", "sum_of_squares"], [229, 4, 1, "", "sum_of_three_squares"], [229, 4, 1, "", "transformation_to_DN"], [229, 4, 1, "", "transformation_to_normal"]], "sympy.solvers.diophantine.diophantine.DiophantineEquationType": [[229, 2, 1, "", "matches"]], "sympy.solvers": [[231, 0, 0, "-", "inequalities"], [232, 0, 0, "-", "ode"], [233, 0, 0, "-", "pde"], [234, 0, 0, "-", "recurr"], [235, 0, 0, "-", "solveset"]], "sympy.solvers.inequalities": [[231, 4, 1, "", "reduce_abs_inequalities"], [231, 4, 1, "", "reduce_abs_inequality"], [231, 4, 1, "", "reduce_inequalities"], [231, 4, 1, "", "reduce_rational_inequalities"], [231, 4, 1, "", "solve_poly_inequalities"], [231, 4, 1, "", "solve_poly_inequality"], [231, 4, 1, "", "solve_rational_inequalities"], [231, 4, 1, "", "solve_univariate_inequality"]], "sympy.solvers.ode": [[232, 6, 1, "", "allhints"], [232, 4, 1, "", "checkinfsol"], [232, 4, 1, "", "checkodesol"], [232, 4, 1, "", "classify_ode"], [232, 4, 1, "", "constantsimp"], [232, 4, 1, "", "dsolve"], [232, 4, 1, "", "homogeneous_order"], [232, 4, 1, "", "infinitesimals"], [232, 0, 0, "-", "ode"]], "sympy.solvers.ode.lie_group": [[232, 4, 1, "", "lie_heuristic_abaco1_product"], [232, 4, 1, "", "lie_heuristic_abaco1_simple"], [232, 4, 1, "", "lie_heuristic_abaco2_similar"], [232, 4, 1, "", "lie_heuristic_abaco2_unique_general"], [232, 4, 1, "", "lie_heuristic_abaco2_unique_unknown"], [232, 4, 1, "", "lie_heuristic_bivariate"], [232, 4, 1, "", "lie_heuristic_chi"], [232, 4, 1, "", "lie_heuristic_function_sum"], [232, 4, 1, "", "lie_heuristic_linear"]], "sympy.solvers.ode.ode": [[232, 4, 1, "", "_handle_Integral"], [232, 4, 1, "", "_linear_2eq_order1_type6"], [232, 4, 1, "", "_linear_2eq_order1_type7"], [232, 4, 1, "", "_nonlinear_2eq_order1_type1"], [232, 4, 1, "", "_nonlinear_2eq_order1_type2"], [232, 4, 1, "", "_nonlinear_2eq_order1_type3"], [232, 4, 1, "", "_nonlinear_2eq_order1_type4"], [232, 4, 1, "", "_nonlinear_2eq_order1_type5"], [232, 4, 1, "", "_nonlinear_3eq_order1_type1"], [232, 4, 1, "", "_nonlinear_3eq_order1_type2"], [232, 4, 1, "", "_nonlinear_3eq_order1_type3"], [232, 4, 1, "", "_nonlinear_3eq_order1_type4"], [232, 4, 1, "", "_nonlinear_3eq_order1_type5"], [232, 4, 1, "", "constant_renumber"], [232, 4, 1, "", "ode_1st_power_series"], [232, 4, 1, "", "ode_2nd_power_series_ordinary"], [232, 4, 1, "", "ode_2nd_power_series_regular"], [232, 4, 1, "", "ode_sol_simplicity"], [232, 4, 1, "", "odesimp"]], "sympy.solvers.ode.riccati": [[232, 4, 1, "", "compute_m_ybar"], [232, 4, 1, "", "construct_c"], [232, 4, 1, "", "construct_d"], [232, 4, 1, "", "get_gen_sol_from_part_sol"], [232, 4, 1, "", "rational_laurent_series"], [232, 4, 1, "", "remove_redundant_sols"], [232, 4, 1, "", "riccati_inverse_normal"], [232, 4, 1, "", "riccati_normal"], [232, 4, 1, "", "riccati_reduced"], [232, 4, 1, "", "solve_aux_eq"], [232, 4, 1, "", "solve_riccati"]], "sympy.solvers.ode.single": [[232, 1, 1, "", "AlmostLinear"], [232, 1, 1, "", "Bernoulli"], [232, 1, 1, "", "Factorable"], [232, 1, 1, "", "FirstExact"], [232, 1, 1, "", "FirstLinear"], [232, 1, 1, "", "HomogeneousCoeffBest"], [232, 1, 1, "", "HomogeneousCoeffSubsDepDivIndep"], [232, 1, 1, "", "HomogeneousCoeffSubsIndepDivDep"], [232, 1, 1, "", "LieGroup"], [232, 1, 1, "", "LinearCoefficients"], [232, 1, 1, "", "Liouville"], [232, 1, 1, "", "NthAlgebraic"], [232, 1, 1, "", "NthLinearConstantCoeffHomogeneous"], [232, 1, 1, "", "NthLinearConstantCoeffUndeterminedCoefficients"], [232, 1, 1, "", "NthLinearConstantCoeffVariationOfParameters"], [232, 1, 1, "", "NthLinearEulerEqHomogeneous"], [232, 1, 1, "", "NthLinearEulerEqNonhomogeneousUndeterminedCoefficients"], [232, 1, 1, "", "NthLinearEulerEqNonhomogeneousVariationOfParameters"], [232, 1, 1, "", "NthOrderReducible"], [232, 1, 1, "", "RationalRiccati"], [232, 1, 1, "", "RiccatiSpecial"], [232, 1, 1, "", "SecondHypergeometric"], [232, 1, 1, "", "SecondLinearAiry"], [232, 1, 1, "", "SecondLinearBessel"], [232, 1, 1, "", "Separable"], [232, 1, 1, "", "SeparableReduced"]], "sympy.solvers.ode.systems": [[232, 4, 1, "", "canonical_odes"], [232, 4, 1, "", "dsolve_system"], [232, 4, 1, "", "linear_ode_to_matrix"], [232, 4, 1, "", "linodesolve"], [232, 4, 1, "", "linodesolve_type"], [232, 4, 1, "", "matrix_exp"], [232, 4, 1, "", "matrix_exp_jordan_form"]], "sympy.solvers.pde": [[233, 4, 1, "", "checkpdesol"], [233, 4, 1, "", "classify_pde"], [233, 4, 1, "", "pde_1st_linear_constant_coeff"], [233, 4, 1, "", "pde_1st_linear_constant_coeff_homogeneous"], [233, 4, 1, "", "pde_1st_linear_variable_coeff"], [233, 4, 1, "", "pde_separate"], [233, 4, 1, "", "pde_separate_add"], [233, 4, 1, "", "pde_separate_mul"], [233, 4, 1, "", "pdsolve"]], "sympy.solvers.polysys": [[234, 4, 1, "", "solve_poly_system"], [234, 4, 1, "", "solve_triangulated"]], "sympy.solvers.recurr": [[234, 4, 1, "", "rsolve"], [234, 4, 1, "", "rsolve_hyper"], [234, 4, 1, "", "rsolve_poly"], [234, 4, 1, "", "rsolve_ratio"]], "sympy.solvers.solvers": [[234, 4, 1, "", "checksol"], [234, 4, 1, "", "nsolve"], [234, 4, 1, "", "solve"], [234, 4, 1, "", "solve_linear"], [234, 4, 1, "", "solve_linear_system"], [234, 4, 1, "", "solve_linear_system_LU"], [234, 4, 1, "", "solve_undetermined_coeffs"], [234, 4, 1, "", "unrad"]], "sympy.solvers.solveset": [[235, 4, 1, "", "_is_exponential"], [235, 4, 1, "", "_is_logarithmic"], [235, 4, 1, "", "_solve_exponential"], [235, 4, 1, "", "_solve_logarithm"], [235, 4, 1, "", "_transolve"], [235, 4, 1, "", "domain_check"], [235, 4, 1, "", "invert_complex"], [235, 4, 1, "", "invert_real"], [235, 4, 1, "", "linear_eq_to_matrix"], [235, 4, 1, "", "linsolve"], [235, 4, 1, "", "nonlinsolve"], [235, 4, 1, "", "solveset"], [235, 4, 1, "", "solveset_complex"], [235, 4, 1, "", "solveset_real"], [235, 4, 1, "", "solvify"]], "sympy.stats": [[236, 4, 1, "", "Arcsin"], [236, 4, 1, "", "Benini"], [236, 4, 1, "", "Bernoulli"], [236, 1, 1, "", "BernoulliProcess"], [236, 4, 1, "", "Beta"], [236, 4, 1, "", "BetaBinomial"], [236, 4, 1, "", "BetaNoncentral"], [236, 4, 1, "", "BetaPrime"], [236, 4, 1, "", "Binomial"], [236, 4, 1, "", "BoundedPareto"], [236, 4, 1, "", "Cauchy"], [236, 1, 1, "", "CentralMoment"], [236, 4, 1, "", "Chi"], [236, 4, 1, "", "ChiNoncentral"], [236, 4, 1, "", "ChiSquared"], [236, 4, 1, "", "Coin"], [236, 1, 1, "", "ContinuousMarkovChain"], [236, 4, 1, "", "ContinuousRV"], [236, 1, 1, "", "Covariance"], [236, 1, 1, "", "CrossCovarianceMatrix"], [236, 4, 1, "", "Dagum"], [236, 4, 1, "", "Davis"], [236, 4, 1, "", "Die"], [236, 1, 1, "", "DiscreteMarkovChain"], [236, 4, 1, "", "DiscreteUniform"], [236, 4, 1, "", "E"], [236, 4, 1, "", "Erlang"], [236, 4, 1, "", "ExGaussian"], [236, 1, 1, "", "Expectation"], [236, 1, 1, "", "ExpectationMatrix"], [236, 4, 1, "", "Exponential"], [236, 4, 1, "", "FDistribution"], [236, 4, 1, "", "FiniteRV"], [236, 4, 1, "", "FisherZ"], [236, 4, 1, "", "Frechet"], [236, 4, 1, "", "Gamma"], [236, 4, 1, "", "GammaInverse"], [236, 1, 1, "", "GammaProcess"], [236, 4, 1, "", "GeneralizedMultivariateLogGamma"], [236, 4, 1, "", "GeneralizedMultivariateLogGammaOmega"], [236, 4, 1, "", "Geometric"], [236, 4, 1, "", "Gompertz"], [236, 4, 1, "", "Gumbel"], [236, 4, 1, "", "Hermite"], [236, 4, 1, "", "Hypergeometric"], [236, 4, 1, "", "JointRV"], [236, 4, 1, "", "Kumaraswamy"], [236, 4, 1, "", "Laplace"], [236, 4, 1, "", "Levy"], [236, 4, 1, "", "LogLogistic"], [236, 4, 1, "", "LogNormal"], [236, 4, 1, "", "Logarithmic"], [236, 4, 1, "", "Logistic"], [236, 4, 1, "", "Lomax"], [236, 4, 1, "", "MatrixGamma"], [236, 4, 1, "", "MatrixNormal"], [236, 4, 1, "", "Maxwell"], [236, 1, 1, "", "Moment"], [236, 4, 1, "", "Moyal"], [236, 4, 1, "", "Multinomial"], [236, 4, 1, "", "MultivariateBeta"], [236, 4, 1, "", "MultivariateEwens"], [236, 4, 1, "", "MultivariateLaplace"], [236, 4, 1, "", "MultivariateNormal"], [236, 4, 1, "", "MultivariateT"], [236, 4, 1, "", "Nakagami"], [236, 4, 1, "", "NegativeBinomial"], [236, 4, 1, "", "NegativeMultinomial"], [236, 4, 1, "", "Normal"], [236, 4, 1, "", "NormalGamma"], [236, 4, 1, "", "P"], [236, 4, 1, "", "Pareto"], [236, 4, 1, "", "Poisson"], [236, 1, 1, "", "PoissonProcess"], [236, 4, 1, "", "PowerFunction"], [236, 1, 1, "", "Probability"], [236, 4, 1, "", "QuadraticU"], [236, 4, 1, "", "Rademacher"], [236, 4, 1, "", "RaisedCosine"], [236, 4, 1, "", "Rayleigh"], [236, 4, 1, "", "Reciprocal"], [236, 4, 1, "", "ShiftedGompertz"], [236, 4, 1, "", "Skellam"], [236, 4, 1, "", "StudentT"], [236, 4, 1, "", "Trapezoidal"], [236, 4, 1, "", "Triangular"], [236, 4, 1, "", "Uniform"], [236, 4, 1, "", "UniformSum"], [236, 1, 1, "", "Variance"], [236, 1, 1, "", "VarianceMatrix"], [236, 4, 1, "", "VonMises"], [236, 4, 1, "", "Wald"], [236, 4, 1, "", "Weibull"], [236, 1, 1, "", "WienerProcess"], [236, 4, 1, "", "WignerSemicircle"], [236, 4, 1, "", "Wishart"], [236, 4, 1, "", "YuleSimon"], [236, 4, 1, "", "Zeta"], [236, 4, 1, "", "cmoment"], [236, 4, 1, "", "correlation"], [236, 4, 1, "", "coskewness"], [236, 4, 1, "", "covariance"], [236, 0, 0, "-", "crv"], [236, 0, 0, "-", "crv_types"], [236, 4, 1, "", "density"], [236, 4, 1, "", "entropy"], [236, 4, 1, "", "factorial_moment"], [236, 0, 0, "-", "frv"], [236, 0, 0, "-", "frv_types"], [236, 4, 1, "", "given"], [236, 4, 1, "", "kurtosis"], [236, 4, 1, "", "marginal_distribution"], [236, 4, 1, "", "median"], [236, 4, 1, "", "moment"], [236, 4, 1, "", "quantile"], [236, 0, 0, "-", "rv"], [236, 4, 1, "", "sample"], [236, 4, 1, "", "sample_iter"], [236, 4, 1, "", "skewness"], [236, 4, 1, "", "std"], [236, 4, 1, "", "variance"], [236, 4, 1, "", "where"]], "sympy.stats.BernoulliProcess": [[236, 2, 1, "", "expectation"], [236, 2, 1, "", "probability"]], "sympy.stats.DiscreteMarkovChain": [[236, 2, 1, "", "absorbing_probabilities"], [236, 2, 1, "", "canonical_form"], [236, 2, 1, "", "communication_classes"], [236, 2, 1, "", "decompose"], [236, 2, 1, "", "fixed_row_vector"], [236, 2, 1, "", "fundamental_matrix"], [236, 3, 1, "", "limiting_distribution"], [236, 2, 1, "", "sample"], [236, 2, 1, "", "stationary_distribution"], [236, 3, 1, "", "transition_probabilities"]], "sympy.stats.compound_rv": [[236, 1, 1, "", "CompoundDistribution"]], "sympy.stats.crv": [[236, 1, 1, "", "ContinuousDomain"], [236, 1, 1, "", "ContinuousPSpace"]], "sympy.stats.crv_types": [[236, 1, 1, "", "NormalPSpace"]], "sympy.stats.crv_types.sympy.stats": [[236, 4, 1, "", "Die"], [236, 4, 1, "", "Normal"]], "sympy.stats.frv": [[236, 1, 1, "", "FiniteDomain"], [236, 1, 1, "", "FinitePSpace"]], "sympy.stats.frv_types": [[236, 1, 1, "", "DiePSpace"]], "sympy.stats.rv": [[236, 1, 1, "", "ConditionalDomain"], [236, 1, 1, "", "PSpace"], [236, 1, 1, "", "ProductDomain"], [236, 1, 1, "", "ProductPSpace"], [236, 1, 1, "", "RandomDomain"], [236, 1, 1, "", "RandomSymbol"], [236, 1, 1, "", "SingleDomain"], [236, 1, 1, "", "SinglePSpace"], [236, 4, 1, "", "pspace"], [236, 4, 1, "", "random_symbols"], [236, 4, 1, "", "rs_swap"], [236, 4, 1, "", "sampling_E"], [236, 4, 1, "", "sampling_P"], [236, 4, 1, "", "sampling_density"]], "sympy.tensor": [[237, 0, 0, "-", "array"], [240, 0, 0, "-", "index_methods"], [241, 0, 0, "-", "indexed"], [242, 0, 0, "-", "tensor"], [243, 0, 0, "-", "toperators"]], "sympy.tensor.array": [[237, 1, 1, "", "ImmutableDenseNDimArray"], [237, 1, 1, "", "ImmutableSparseNDimArray"], [237, 1, 1, "", "MutableDenseNDimArray"], [237, 1, 1, "", "MutableSparseNDimArray"], [237, 4, 1, "", "derive_by_array"], [238, 0, 0, "-", "expressions"], [237, 4, 1, "", "permutedims"], [237, 4, 1, "", "tensorcontraction"], [237, 4, 1, "", "tensordiagonal"], [237, 4, 1, "", "tensorproduct"]], "sympy.tensor.array.expressions": [[238, 1, 1, "", "ArrayContraction"], [238, 1, 1, "", "ArrayDiagonal"], [238, 1, 1, "", "ArrayTensorProduct"], [238, 1, 1, "", "PermuteDims"]], "sympy.tensor.index_methods": [[240, 4, 1, "", "get_contraction_structure"], [240, 4, 1, "", "get_indices"]], "sympy.tensor.indexed": [[241, 1, 1, "", "Idx"], [241, 1, 1, "", "Indexed"], [241, 1, 1, "", "IndexedBase"]], "sympy.tensor.indexed.Idx": [[241, 3, 1, "", "label"], [241, 3, 1, "", "lower"], [241, 3, 1, "", "upper"]], "sympy.tensor.indexed.Indexed": [[241, 3, 1, "", "base"], [241, 3, 1, "", "indices"], [241, 3, 1, "", "ranges"], [241, 3, 1, "", "rank"], [241, 3, 1, "", "shape"]], "sympy.tensor.indexed.IndexedBase": [[241, 3, 1, "", "label"], [241, 3, 1, "", "offset"], [241, 3, 1, "", "shape"], [241, 3, 1, "", "strides"]], "sympy.tensor.tensor": [[242, 1, 1, "", "TensAdd"], [242, 1, 1, "", "TensExpr"], [242, 1, 1, "", "TensMul"], [242, 1, 1, "", "TensorHead"], [242, 1, 1, "", "TensorIndex"], [242, 1, 1, "", "TensorIndexType"], [242, 1, 1, "", "TensorSymmetry"], [242, 1, 1, "", "TensorType"], [242, 1, 1, "", "_TensorManager"], [242, 4, 1, "", "canon_bp"], [242, 4, 1, "", "riemann_cyclic"], [242, 4, 1, "", "riemann_cyclic_replace"], [242, 4, 1, "", "tensor_heads"], [242, 4, 1, "", "tensorsymmetry"]], "sympy.tensor.tensor.TensAdd": [[242, 2, 1, "", "canon_bp"], [242, 2, 1, "", "contract_metric"]], "sympy.tensor.tensor.TensExpr": [[242, 2, 1, "", "get_matrix"], [242, 2, 1, "", "replace_with_arrays"]], "sympy.tensor.tensor.TensMul": [[242, 2, 1, "", "canon_bp"], [242, 2, 1, "", "contract_metric"], [242, 2, 1, "", "get_free_indices"], [242, 2, 1, "", "get_indices"], [242, 2, 1, "", "perm2tensor"], [242, 2, 1, "", "sorted_components"], [242, 2, 1, "", "split"]], "sympy.tensor.tensor.TensorHead": [[242, 2, 1, "", "commutes_with"]], "sympy.tensor.tensor.TensorSymmetry": [[242, 2, 1, "", "direct_product"], [242, 2, 1, "", "fully_symmetric"], [242, 2, 1, "", "no_symmetry"], [242, 2, 1, "", "riemann"]], "sympy.tensor.tensor._TensorManager": [[242, 2, 1, "", "clear"], [242, 2, 1, "", "comm_i2symbol"], [242, 2, 1, "", "comm_symbols2i"], [242, 2, 1, "", "get_comm"], [242, 2, 1, "", "set_comm"], [242, 2, 1, "", "set_comms"]], "sympy.tensor.toperators": [[243, 1, 1, "", "PartialDerivative"]], "sympy.testing": [[245, 0, 0, "-", "pytest"], [246, 0, 0, "-", "randtest"], [247, 0, 0, "-", "runtests"]], "sympy.testing.pytest": [[245, 4, 1, "", "SKIP"], [245, 4, 1, "", "nocache_fail"], [245, 4, 1, "", "raises"], [245, 4, 1, "", "skip_under_pyodide"], [245, 4, 1, "", "warns"], [245, 4, 1, "", "warns_deprecated_sympy"]], "sympy.testing.runtests": [[247, 1, 1, "", "PyTestReporter"], [247, 1, 1, "", "Reporter"], [247, 1, 1, "", "SymPyDocTestFinder"], [247, 1, 1, "", "SymPyDocTestRunner"], [247, 1, 1, "", "SymPyOutputChecker"], [247, 1, 1, "", "SymPyTestResults"], [247, 4, 1, "", "convert_to_native_paths"], [247, 4, 1, "", "doctest"], [247, 4, 1, "", "get_sympy_dir"], [247, 4, 1, "", "raise_on_deprecated"], [247, 4, 1, "", "run_all_tests"], [247, 4, 1, "", "run_in_subprocess_with_hash_randomization"], [247, 4, 1, "", "split_list"], [247, 4, 1, "", "sympytestfile"], [247, 4, 1, "", "test"]], "sympy.testing.runtests.PyTestReporter": [[247, 2, 1, "", "write"]], "sympy.testing.runtests.SymPyDocTestRunner": [[247, 2, 1, "", "run"]], "sympy.testing.runtests.SymPyOutputChecker": [[247, 2, 1, "", "check_output"]], "sympy.testing.runtests.SymPyTestResults": [[247, 5, 1, "", "attempted"], [247, 5, 1, "", "failed"]], "sympy.utilities": [[248, 0, 0, "-", "autowrap"], [249, 0, 0, "-", "codegen"], [250, 0, 0, "-", "decorator"], [251, 0, 0, "-", "enumerative"], [252, 0, 0, "-", "exceptions"], [254, 0, 0, "-", "iterables"], [255, 0, 0, "-", "lambdify"], [256, 0, 0, "-", "memoization"], [257, 0, 0, "-", "misc"], [258, 0, 0, "-", "pkgdata"], [259, 0, 0, "-", "source"], [260, 0, 0, "-", "timeutils"]], "sympy.utilities.autowrap": [[248, 1, 1, "", "CodeWrapper"], [248, 1, 1, "", "CythonCodeWrapper"], [248, 1, 1, "", "DummyWrapper"], [248, 1, 1, "", "F2PyCodeWrapper"], [248, 1, 1, "", "UfuncifyCodeWrapper"], [248, 4, 1, "", "autowrap"], [248, 4, 1, "", "binary_function"], [248, 4, 1, "", "ufuncify"]], "sympy.utilities.autowrap.CythonCodeWrapper": [[248, 2, 1, "", "dump_pyx"]], "sympy.utilities.autowrap.UfuncifyCodeWrapper": [[248, 2, 1, "", "dump_c"]], "sympy.utilities.codegen": [[249, 1, 1, "", "Argument"], [249, 1, 1, "", "CCodeGen"], [249, 1, 1, "", "CodeGen"], [249, 1, 1, "", "DataType"], [249, 1, 1, "", "FCodeGen"], [249, 1, 1, "", "JuliaCodeGen"], [249, 1, 1, "", "OctaveCodeGen"], [249, 1, 1, "", "OutputArgument"], [249, 1, 1, "", "Result"], [249, 1, 1, "", "Routine"], [249, 1, 1, "", "RustCodeGen"], [249, 4, 1, "", "codegen"], [249, 4, 1, "", "get_default_datatype"], [249, 4, 1, "", "make_routine"]], "sympy.utilities.codegen.CCodeGen": [[249, 2, 1, "", "dump_c"], [249, 2, 1, "", "dump_h"], [249, 2, 1, "", "get_prototype"]], "sympy.utilities.codegen.CodeGen": [[249, 2, 1, "", "dump_code"], [249, 2, 1, "", "routine"], [249, 2, 1, "", "write"]], "sympy.utilities.codegen.FCodeGen": [[249, 2, 1, "", "dump_f95"], [249, 2, 1, "", "dump_h"], [249, 2, 1, "", "get_interface"]], "sympy.utilities.codegen.JuliaCodeGen": [[249, 2, 1, "", "dump_jl"], [249, 2, 1, "", "routine"]], "sympy.utilities.codegen.OctaveCodeGen": [[249, 2, 1, "", "dump_m"], [249, 2, 1, "", "routine"]], "sympy.utilities.codegen.Routine": [[249, 3, 1, "", "result_variables"], [249, 3, 1, "", "variables"]], "sympy.utilities.codegen.RustCodeGen": [[249, 2, 1, "", "dump_rs"], [249, 2, 1, "", "get_prototype"], [249, 2, 1, "", "routine"]], "sympy.utilities.decorator": [[250, 4, 1, "", "conserve_mpmath_dps"], [250, 4, 1, "", "deprecated"], [250, 4, 1, "", "doctest_depends_on"], [250, 4, 1, "", "memoize_property"], [250, 1, 1, "", "no_attrs_in_subclass"], [250, 4, 1, "", "public"], [250, 4, 1, "", "threaded"], [250, 4, 1, "", "threaded_factory"], [250, 4, 1, "", "xthreaded"]], "sympy.utilities.enumerative": [[251, 1, 1, "", "MultisetPartitionTraverser"], [251, 4, 1, "", "factoring_visitor"], [251, 4, 1, "", "list_visitor"], [251, 4, 1, "", "multiset_partitions_taocp"]], "sympy.utilities.enumerative.MultisetPartitionTraverser": [[251, 2, 1, "", "count_partitions"], [251, 2, 1, "", "enum_all"], [251, 2, 1, "", "enum_large"], [251, 2, 1, "", "enum_range"], [251, 2, 1, "", "enum_small"]], "sympy.utilities.exceptions": [[252, 7, 1, "", "SymPyDeprecationWarning"], [252, 4, 1, "", "ignore_warnings"], [252, 4, 1, "", "sympy_deprecation_warning"]], "sympy.utilities.iterables": [[254, 1, 1, "", "NotIterable"], [254, 4, 1, "", "binary_partitions"], [254, 4, 1, "", "bracelets"], [254, 4, 1, "", "capture"], [254, 4, 1, "", "common_prefix"], [254, 4, 1, "", "common_suffix"], [254, 4, 1, "", "connected_components"], [254, 4, 1, "", "dict_merge"], [254, 4, 1, "", "filter_symbols"], [254, 4, 1, "", "flatten"], [254, 4, 1, "", "generate_bell"], [254, 4, 1, "", "generate_derangements"], [254, 4, 1, "", "generate_involutions"], [254, 4, 1, "", "generate_oriented_forest"], [254, 4, 1, "", "group"], [254, 4, 1, "", "has_dups"], [254, 4, 1, "", "has_variety"], [254, 4, 1, "", "ibin"], [254, 4, 1, "", "iproduct"], [254, 4, 1, "", "is_palindromic"], [254, 4, 1, "", "is_sequence"], [254, 4, 1, "", "iterable"], [254, 4, 1, "", "kbins"], [254, 4, 1, "", "least_rotation"], [254, 4, 1, "", "minlex"], [254, 4, 1, "", "multiset"], [254, 4, 1, "", "multiset_combinations"], [254, 4, 1, "", "multiset_derangements"], [254, 4, 1, "", "multiset_partitions"], [254, 4, 1, "", "multiset_permutations"], [254, 4, 1, "", "necklaces"], [254, 4, 1, "", "numbered_symbols"], [254, 4, 1, "", "ordered_partitions"], [254, 4, 1, "", "partitions"], [254, 4, 1, "", "permute_signs"], [254, 4, 1, "", "postfixes"], [254, 4, 1, "", "prefixes"], [254, 4, 1, "", "random_derangement"], [254, 4, 1, "", "reshape"], [254, 4, 1, "", "rotate_left"], [254, 4, 1, "", "rotate_right"], [254, 4, 1, "", "rotations"], [254, 4, 1, "", "roundrobin"], [254, 4, 1, "", "runs"], [254, 4, 1, "", "sequence_partitions"], [254, 4, 1, "", "sequence_partitions_empty"], [254, 4, 1, "", "sift"], [254, 4, 1, "", "signed_permutations"], [254, 4, 1, "", "strongly_connected_components"], [254, 4, 1, "", "subsets"], [254, 4, 1, "", "take"], [254, 4, 1, "", "topological_sort"], [254, 4, 1, "", "unflatten"], [254, 4, 1, "", "uniq"], [254, 4, 1, "", "variations"]], "sympy.utilities.lambdify": [[255, 4, 1, "", "implemented_function"], [255, 4, 1, "", "lambdastr"], [255, 4, 1, "", "lambdify"]], "sympy.utilities.memoization": [[256, 4, 1, "", "assoc_recurrence_memo"], [256, 4, 1, "", "recurrence_memo"]], "sympy.utilities.misc": [[257, 4, 1, "", "as_int"], [257, 4, 1, "", "debug"], [257, 4, 1, "", "debug_decorator"], [257, 4, 1, "", "debugf"], [257, 4, 1, "", "filldedent"], [257, 4, 1, "", "find_executable"], [257, 4, 1, "", "func_name"], [257, 4, 1, "", "ordinal"], [257, 4, 1, "", "rawlines"], [257, 4, 1, "", "replace"], [257, 4, 1, "", "strlines"], [257, 4, 1, "", "translate"]], "sympy.utilities.pkgdata": [[258, 4, 1, "", "get_resource"]], "sympy.utilities.source": [[259, 4, 1, "", "get_class"], [259, 4, 1, "", "get_mod_func"]], "sympy.utilities.timeutils": [[260, 4, 1, "", "timed"]], "sympy.vector.coordsysrect": [[261, 1, 1, "", "CoordSys3D"]], "sympy.vector.coordsysrect.CoordSys3D": [[261, 2, 1, "", "__init__"], [261, 2, 1, "", "create_new"], [261, 2, 1, "", "locate_new"], [261, 2, 1, "", "orient_new"], [261, 2, 1, "", "orient_new_axis"], [261, 2, 1, "", "orient_new_body"], [261, 2, 1, "", "orient_new_quaternion"], [261, 2, 1, "", "orient_new_space"], [261, 2, 1, "", "position_wrt"], [261, 2, 1, "", "rotation_matrix"], [261, 2, 1, "", "scalar_map"]], "sympy.vector": [[264, 4, 1, "", "curl"], [264, 4, 1, "", "divergence"], [264, 4, 1, "", "express"], [264, 4, 1, "", "gradient"], [264, 4, 1, "", "is_conservative"], [264, 4, 1, "", "is_solenoidal"], [264, 4, 1, "", "matrix_to_vector"], [264, 4, 1, "", "scalar_potential"], [264, 4, 1, "", "scalar_potential_difference"]], "sympy.vector.deloperator": [[261, 1, 1, "", "Del"]], "sympy.vector.deloperator.Del": [[261, 2, 1, "", "cross"], [261, 2, 1, "", "dot"], [261, 2, 1, "", "gradient"]], "sympy.vector.dyadic": [[261, 1, 1, "", "Dyadic"]], "sympy.vector.dyadic.Dyadic": [[261, 3, 1, "", "components"], [261, 2, 1, "", "cross"], [261, 2, 1, "", "dot"], [261, 2, 1, "", "to_matrix"]], "sympy.vector.implicitregion": [[261, 1, 1, "", "ImplicitRegion"]], "sympy.vector.implicitregion.ImplicitRegion": [[261, 2, 1, "", "multiplicity"], [261, 2, 1, "", "rational_parametrization"], [261, 2, 1, "", "regular_point"], [261, 2, 1, "", "singular_points"]], "sympy.vector.integrals": [[261, 1, 1, "", "ParametricIntegral"], [264, 4, 1, "", "vector_integrate"]], "sympy.vector.orienters": [[263, 1, 1, "", "AxisOrienter"], [263, 1, 1, "", "BodyOrienter"], [263, 1, 1, "", "Orienter"], [263, 1, 1, "", "QuaternionOrienter"], [263, 1, 1, "", "SpaceOrienter"]], "sympy.vector.orienters.AxisOrienter": [[263, 2, 1, "", "__init__"], [263, 2, 1, "", "rotation_matrix"]], "sympy.vector.orienters.BodyOrienter": [[263, 2, 1, "", "__init__"]], "sympy.vector.orienters.Orienter": [[263, 2, 1, "", "rotation_matrix"]], "sympy.vector.orienters.QuaternionOrienter": [[263, 2, 1, "", "__init__"]], "sympy.vector.orienters.SpaceOrienter": [[263, 2, 1, "", "__init__"]], "sympy.vector.parametricregion": [[261, 1, 1, "", "ParametricRegion"]], "sympy.vector.vector": [[261, 1, 1, "", "Vector"]], "sympy.vector.vector.Vector": [[261, 3, 1, "", "components"], [261, 2, 1, "", "cross"], [261, 2, 1, "", "dot"], [261, 2, 1, "", "magnitude"], [261, 2, 1, "", "normalize"], [261, 2, 1, "", "outer"], [261, 2, 1, "", "projection"], [261, 2, 1, "", "separate"], [261, 2, 1, "", "to_matrix"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function", "5": "py:attribute", "6": "py:data", "7": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"], "5": ["py", "attribute", "Python attribute"], "6": ["py", "data", "Python data"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"cite": 0, "sympi": [0, 4, 7, 8, 9, 13, 15, 18, 19, 20, 29, 31, 35, 37, 38, 48, 90, 109, 148, 197, 206, 261, 264, 265, 268, 282, 284, 287], "debug": [1, 12], "depend": [2, 8, 12, 145, 206, 266], "hard": 2, "option": [2, 9, 31, 34, 35, 36, 209], "recommend": [2, 5], "interact": [2, 95, 202], "us": [2, 5, 7, 13, 19, 27, 29, 30, 31, 32, 33, 34, 35, 36, 48, 70, 91, 92, 108, 111, 140, 145, 146, 200, 202, 213, 235, 266], "print": [2, 13, 23, 48, 95, 121, 129, 190, 196, 216, 292], "pars": [2, 36, 109], "logic": [2, 22, 97, 272, 275], "plot": [2, 13, 115, 161, 202], "lambdifi": [2, 13, 108, 255, 282], "code": [2, 3, 5, 7, 9, 11, 12, 13, 48, 51, 121, 200, 216, 259, 272, 274], "gener": [2, 4, 5, 48, 57, 59, 206, 211, 235, 267, 272, 274], "autowrap": [2, 48, 248], "printer": [2, 48, 216, 292], "test": [2, 11, 12, 13, 64, 97, 215, 244, 246, 247, 289], "onli": [2, 29, 34, 235], "statist": 2, "symengin": 2, "backend": [2, 202], "sage": 2, "develop": [2, 7, 9, 11, 67], "get": [2, 7, 9, 15, 27], "sourc": [2, 259], "run": [2, 11, 12, 38, 247], "build": [2, 8], "document": [2, 3, 4, 5, 7, 8, 11, 37], "benchmark": 2, "deprec": [3, 12, 13], "polici": [3, 12], "what": [3, 145, 205, 206, 235, 287, 290], "i": [3, 12, 15, 33, 34, 92, 108, 145, 205, 216, 235, 287], "try": 3, "avoid": 3, "backward": 3, "incompat": 3, "chang": [3, 11, 13], "first": [3, 13], "place": 3, "when": [3, 36, 92], "doe": [3, 15, 235], "requir": [3, 8], "public": 3, "api": [3, 37, 88, 92, 94, 117, 124, 194, 235, 248, 249, 262, 272], "Not": [3, 27, 29, 30, 31, 33, 34, 35, 36], "The": [3, 13, 21, 23, 49, 57, 92, 145, 186, 198, 211, 223, 226, 267, 268, 287], "purpos": 3, "technic": 3, "possibl": [3, 31, 289], "how": [3, 24, 37, 92, 200, 235], "long": 3, "should": [3, 108], "last": 3, "checklist": [3, 11], "ad": 3, "releas": 3, "note": [3, 23, 67, 79, 145, 223, 225, 285, 294], "entri": [3, 103], "docstr": [4, 5, 110, 113, 122, 123, 125, 126, 127, 128, 129, 130, 192, 193, 195, 196, 261, 263, 264], "style": [4, 5, 12], "guid": [4, 5, 10, 12, 24, 37, 141, 198, 269], "guidelin": [4, 5], "format": [4, 5, 13, 36], "section": 4, "1": [4, 13, 25, 34, 92, 111, 131, 145, 157], "singl": [4, 15, 17, 29], "sentenc": 4, "summari": 4, "2": [4, 25, 34, 92, 111, 131, 145], "explan": [4, 16, 37], "3": [4, 25, 94, 111, 131, 182], "exampl": [4, 11, 23, 25, 27, 29, 30, 33, 35, 39, 67, 79, 91, 94, 107, 111, 118, 132, 145, 149, 153, 184, 185, 186, 200, 215, 216, 223, 226, 236, 237, 238, 241, 267, 287, 293], "4": [4, 13, 25, 111], "paramet": [4, 30, 226, 235], "5": [4, 13, 25, 111], "see": [4, 67, 254, 267], "also": [4, 67, 254], "6": [4, 13, 111], "refer": [4, 21, 25, 37, 40, 47, 50, 66, 67, 69, 79, 85, 92, 94, 100, 101, 103, 105, 107, 109, 124, 147, 153, 156, 186, 198, 200, 201, 202, 203, 207, 209, 211, 212, 213, 223, 225, 226, 229, 235, 248, 249, 269, 272], "sampl": [4, 13], "class": [4, 13, 18, 47, 48, 66, 69, 101, 103, 105, 107, 145, 191, 202, 211, 216, 229, 237, 261, 263], "ar": [4, 29, 34, 200, 206, 235], "mathemat": [4, 15, 27, 148], "function": [4, 12, 13, 15, 23, 27, 29, 31, 33, 34, 36, 48, 57, 66, 67, 73, 74, 75, 85, 86, 89, 90, 92, 97, 103, 107, 109, 111, 121, 128, 146, 168, 171, 192, 193, 197, 202, 204, 206, 207, 212, 215, 216, 226, 229, 232, 233, 237, 264, 268, 292, 293], "best": [4, 5, 23], "practic": [4, 5, 23], "write": [4, 5, 11, 12, 23], "import": 4, "sphinx": 4, "cross": 4, "referenc": 4, "type": [5, 12, 17, 29, 48, 75, 192, 235, 236], "narr": 5, "markdown": 5, "prefer": [5, 36], "math": [5, 48], "latex": [5, 109, 292], "head": 5, "spell": 5, "punctuat": 5, "capit": 5, "tone": 5, "contribut": [6, 7, 11, 37, 213], "introduct": [7, 15, 19, 40, 47, 48, 49, 57, 69, 79, 97, 131, 148, 186, 197, 199, 202, 203, 204, 211, 215, 270, 287], "familiar": 7, "softwar": 7, "read": [7, 285], "paper": 7, "perus": 7, "review": 7, "conduct": 7, "join": 7, "our": 7, "mail": 7, "list": [7, 13, 15, 17, 27, 29], "setup": [7, 9], "your": [7, 9, 11, 31], "environ": [7, 9], "identifi": 7, "someth": [7, 12], "work": [7, 30, 32, 34, 79, 215], "codebas": 7, "pull": [7, 11], "request": [7, 11], "docker": 8, "debian": 8, "ubuntu": 8, "fedora": 8, "mac": 8, "window": [8, 202], "10": [8, 13, 111], "doc": [8, 207], "local": 8, "instal": [8, 9, 37, 38, 109, 291], "logo": 8, "view": 8, "auto": 8, "rebuild": 8, "live": 8, "server": 8, "pdf": 8, "git": [9, 38], "configur": [9, 209], "name": [9, 11, 55], "email": [9, 11], "set": [9, 13, 18, 31, 34, 35, 44, 79, 200, 224, 235, 292], "github": [9, 12], "creat": [9, 11, 13, 15, 23, 33, 103], "account": 9, "ssh": 9, "kei": [9, 23, 148, 288], "fork": 9, "virtual": 9, "new": [10, 11, 13, 266], "contributor": 10, "index": [10, 49, 57, 238, 241], "workflow": 11, "process": [11, 236], "pick": 11, "an": [11, 13, 31, 33, 34, 79, 131, 186, 226, 235, 288], "issu": [11, 121, 131, 145, 190, 289], "fix": [11, 131], "branch": [11, 92], "modifi": 11, "qualiti": [11, 12], "add": [11, 23, 67], "commit": 11, "delet": [11, 289], "junk": 11, "file": 11, "messag": 11, "good": 11, "co": 11, "author": [11, 201], "make": [11, 31, 36], "titl": 11, "descript": 11, "address": 11, "mailmap": 11, "basic": [12, 67, 71, 103, 192, 204, 206, 212, 224, 265, 272, 273, 282, 289], "failur": 12, "action": 12, "regress": 12, "special": [12, 15, 20, 48, 75, 212, 224, 293], "except": [12, 103, 109, 209, 252], "warn": [12, 13, 252], "unchang": 12, "express": [12, 13, 15, 27, 30, 31, 33, 48, 79, 86, 89, 97, 100, 109, 123, 206, 215, 238, 266, 282, 288], "dummi": 12, "consist": [12, 36], "check": [12, 13, 192], "random": [12, 67, 236], "skip": 12, "mark": 12, "expect": 12, "fail": 12, "slow": [12, 145], "extern": 12, "doctest": 12, "updat": 12, "exist": [12, 92], "coverag": 12, "activ": 13, "silenc": 13, "version": 13, "13": 13, "marker": 13, "annot": 13, "fill": 13, "rectangl": 13, "move": [13, 226], "mechan": [13, 21, 112, 121, 124, 132, 141, 142, 143, 144, 145, 146, 147, 148, 149, 168, 236], "12": 13, "managedproperti": 13, "metaclass": 13, "joint": [13, 125, 142, 236], "coordin": [13, 121, 135, 145, 202, 265, 266, 268, 270], "intermedi": 13, "frame": [13, 200], "attach": 13, "point": [13, 23, 71, 82, 121, 190, 199, 265], "argument": [13, 15, 235], "11": [13, 111], "modul": [13, 116, 151, 190, 198, 203, 204, 205, 206, 209, 211, 212, 229, 232, 233, 235, 248], "tensor": [13, 63, 75, 180, 239, 242, 243], "arrai": [13, 237, 238], "conv_": 13, "renam": 13, "from_": 13, "mathematica": [13, 216], "parser": [13, 131], "redund": 13, "static": 13, "method": [13, 19, 23, 32, 38, 126, 135, 138, 139, 140, 143, 144, 145, 216, 233, 235, 240, 266, 289], "carmichael": 13, "hadamardproduct": 13, "matadd": 13, "matmul": 13, "some": [13, 34, 148, 235], "travers": [13, 67], "have": [13, 31, 35, 215], "been": 13, "core": [13, 67, 100], "trace": 13, "compat": [13, 238], "submodul": [13, 79], "9": [13, 111], "expr_free_symbol": 13, "stat": [13, 236], "numsampl": 13, "n": [13, 237, 238], "poli": [13, 205, 206, 207, 214], "solver": [13, 34, 214, 230, 231, 232, 234, 235, 294], "rawmatrix": 13, "non": 13, "expr": [13, 67], "object": [13, 18, 241], "matrix": [13, 32, 44, 100, 103, 104, 145, 236, 289], "get_seg": 13, "attribut": [13, 49, 57], "mdft": 13, "physic": [13, 26, 118, 121, 132, 142, 143, 144, 145, 146, 147, 148, 149, 188, 190, 194, 197, 198, 199, 200, 272, 278], "matric": [13, 19, 32, 98, 99, 100, 101, 102, 103, 105, 118, 120, 238, 272, 276, 289], "privat": 13, "sparsematrix": [13, 105], "_smat": 13, "densematrix": 13, "_mat": 13, "laplace_transform": 13, "nocond": 13, "fals": 13, "8": [13, 111], "theanocod": 13, "assumpt": [13, 18, 21, 23, 43, 67], "handler": [13, 21], "askhandl": 13, "relat": [13, 15, 17, 21, 29, 67, 75, 97, 197, 200, 268], "7": [13, 111], "call": [13, 29, 36], "stochasticprocess": 13, "distribut": [13, 209, 236], "randomindexedsymbol": 13, "discretemarkovchain": 13, "absorbing_probabilit": 13, "util": [13, 48, 64, 65, 84, 103, 154, 211, 234, 253, 260, 272, 280], "misc": [13, 43], "find_execut": 13, "mutabl": 13, "diffgeom": 13, "unicod": [13, 292], "pretti": [13, 216, 292], "stringpict": 13, "prettyform": 13, "pretty_symbologi": 13, "xstr": 13, "pass": 13, "oper": [13, 15, 89, 103, 159, 168, 170, 171, 192, 197, 200, 226, 237, 243, 265, 267, 268, 282, 289], "longer": 13, "accept": 13, "arg": [13, 288], "variou": [13, 215], "randtest": 13, "mix": 13, "polynomi": [13, 27, 75, 89, 204, 206, 207, 208, 209, 211, 212, 213, 215, 234, 293], "binari": 13, "print_cycl": 13, "flag": 13, "combinator": [13, 54], "permut": [13, 58, 59], "integr": [13, 34, 71, 75, 89, 91, 92, 93, 94, 121, 204, 211, 271, 283], "string": [13, 21, 36, 282], "fallback": 13, "sympifi": [13, 67], "indefinit": 13, "eq": [13, 31], "fun_ev": 13, "__call__": 13, "tensortyp": 13, "dummy_fmt": 13, "tensorindextyp": 13, "metric": 13, "get_kronecker_delta": 13, "get_epsilon": 13, "tensorsymmetri": 13, "tensorhead": 13, "is_emptyset": 13, "productset": 13, "iter": [13, 224, 254], "set_potential_energi": 13, "condit": [13, 34, 92, 224], "conditionset": 13, "max_degre": 13, "get_upper_degre": 13, "properti": [13, 21, 203], "multivariate_result": 13, "dixonresult": 13, "tupl": [13, 15, 17, 29, 212], "lambda": 13, "evalu": [13, 15, 23, 27, 71, 89, 148, 288], "differentiate_finit": 13, "data": 13, "glossari": 14, "gotcha": [15, 21, 131, 285], "pitfal": 15, "equal": [15, 30, 31, 285], "sign": [15, 285], "doubl": 15, "variabl": [15, 29, 34, 36, 202, 236, 266], "assign": 15, "between": [15, 21, 188, 206], "symbol": [15, 21, 22, 23, 29, 30, 32, 67, 86, 145, 149, 201, 206, 212, 215, 235, 285, 287], "python": [15, 48], "number": [15, 44, 53, 67, 70, 71, 92, 107, 206, 211, 215, 272, 277], "v": [15, 22, 206], "float": [15, 71], "ration": [15, 206, 207, 212, 215, 218, 232, 293], "immut": [15, 101], "invers": [15, 23, 73, 92], "trig": 15, "sqrt": 15, "dictionari": [15, 17, 27, 35], "keyword": 15, "help": 15, "from": [15, 30, 31, 32, 36, 215, 238], "within": 15, "solv": [17, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 111, 204, 211, 234, 235, 294], "output": [17, 121, 235], "empti": 17, "Of": 17, "valu": [17, 22, 36], "boolean": [17, 22, 97], "classif": 18, "kind": [18, 67], "func": [18, 288], "finit": [19, 46, 49, 203, 206, 209, 211, 215, 226, 236, 283], "differ": [19, 21, 46, 148, 206, 266, 283], "approxim": [19, 27, 48], "deriv": [19, 34, 200, 237, 268, 283], "A": [19, 133, 134, 137, 138, 139, 140, 145, 287, 294], "direct": [19, 268], "topic": [20, 121, 190, 272, 279], "old": [21, 206], "system": [21, 29, 33, 35, 115, 136, 149, 183, 185, 186, 189, 232, 234, 265, 266, 268, 270], "appli": [21, 92, 226], "input": [21, 235], "predic": [21, 43, 44], "abov": 21, "definit": [21, 23, 85], "implic": 21, "interpret": 21, "other": [21, 23, 38, 86, 128, 197, 266], "is_": 21, "implement": [21, 92, 197, 216, 226, 248, 249, 265, 268], "limit": [21, 29, 30, 91, 131, 221, 223, 283], "combin": [21, 89], "fuzzi": 22, "three": [22, 79], "bool": 22, "custom": [23, 202, 216], "easi": 23, "case": [23, 235], "fulli": 23, "defin": [23, 34], "automat": [23, 215], "eval": 23, "remind": 23, "numer": [23, 27, 33, 34, 36, 71, 89, 94, 108, 121, 148], "evalf": [23, 67, 108, 282], "rewrit": [23, 48, 217, 293], "simplif": [23, 71, 97, 225, 293], "doit": 23, "expand": [23, 215, 217, 293], "differenti": [23, 34, 69, 89, 121, 234, 235, 294], "as_real_imag": 23, "miscellan": [23, 73, 79, 257], "_eval_": 23, "complet": [23, 27, 131], "versin": 23, "divid": 23, "fuse": 23, "multipli": 23, "fma": 23, "addit": [23, 89], "tip": [23, 282, 283, 285, 288, 289], "control": [25, 114, 115, 116, 117, 202], "packag": 25, "find": [27, 33, 211, 212], "root": [27, 33, 212], "algebra": [27, 29, 30, 31, 32, 34, 35, 40, 96, 103, 156, 200, 203, 206, 211, 215, 234, 294], "altern": [27, 29, 30, 31, 32, 33, 34, 35, 200], "consid": [27, 29, 30, 31, 32, 33, 34, 35], "guidanc": [27, 29, 30, 31, 32, 33, 34, 35, 36], "solut": [27, 30, 31, 32, 33, 34, 35, 36, 168, 235, 267], "without": [27, 34], "multipl": [27, 34, 89, 200, 211], "With": [27, 30, 31, 32, 33, 34, 35, 36], "factor": [27, 204, 209, 215, 293], "equat": [27, 28, 30, 31, 32, 33, 34, 35, 36, 143, 144, 145, 184, 204, 229, 234, 235, 294], "exact": [27, 36], "real_root": 27, "nroot": 27, "complex": [27, 33, 73, 206], "result": [27, 29, 30, 31, 32, 33, 34, 35, 215], "all_root": 27, "tradeoff": 27, "speed": [27, 31, 32, 35, 36, 121, 145], "all": [27, 29, 30, 31, 33, 34, 35], "perhap": 27, "implicitli": [27, 34], "crootof": 27, "repres": [27, 31, 36, 92, 176, 206, 211], "can": [27, 29, 30, 31, 33, 34, 35, 36], "Be": [27, 29, 30, 31, 32, 33, 34], "No": [27, 30, 31, 32, 34], "close": [27, 31, 34, 35, 36], "form": [27, 31, 34, 35, 36, 97, 104, 145, 238], "report": [27, 29, 30, 31, 32, 33, 34, 35, 36], "bug": [27, 29, 30, 31, 32, 33, 34, 35, 36, 94], "reduc": [29, 215], "One": [29, 33, 34], "inequ": [29, 231, 234, 235], "includ": [29, 34, 36], "extract": [29, 30, 32, 34], "decompos": 29, "reduct": [29, 226], "interest": [29, 287], "per": 29, "That": [29, 30, 31, 33, 35, 36], "return": [29, 34, 235], "period": 29, "which": [29, 31, 35, 108, 216], "cannot": [29, 31, 34, 35], "satisfi": 29, "analyt": [29, 168], "diophantin": [30, 229, 234, 235], "zero": [30, 31, 36, 115, 209, 215, 289], "specifi": [30, 34, 202], "order": [30, 44, 212, 223, 226], "verifi": [30, 271], "programmat": [30, 31], "Into": [31, 33, 35], "put": 31, "restrict": 31, "domain": [31, 204, 206, 207, 212, 215, 235], "explicitli": [31, 34], "infinit": [31, 235], "substitut": [31, 33, 121, 190, 282], "solveset": [31, 235], "necessarili": 31, "interrog": 31, "up": [31, 32, 35, 36, 292], "usual": 32, "must": 32, "squar": [32, 204], "sever": 32, "same": 32, "vector": [32, 57, 141, 190, 192, 194, 197, 198, 199, 200, 209, 261, 262, 264, 265, 266, 268, 269, 270, 271], "element": [32, 145, 206, 211], "real": [33, 206], "ensur": [33, 36, 235], "found": 33, "given": [33, 35], "interv": [33, 202], "increas": 33, "precis": 33, "scipi": [33, 34], "ordinari": [34, 234, 235], "od": [34, 232, 234, 235], "Its": 34, "independ": 34, "initi": 34, "boundari": 34, "bewar": 34, "copi": 34, "past": 34, "pair": 34, "If": 34, "There": 34, "arbitrari": 34, "constant": [34, 163, 186], "hint": [34, 232, 233], "unevalu": 34, "select": 34, "specif": [34, 48], "linear": [35, 89, 103, 121, 127, 145, 146, 186, 215], "nonlinear": 35, "you": 36, "might": 36, "ani": [36, 235], "denomin": 36, "do": [36, 235], "simplifi": [36, 48, 209, 227, 228, 293], "welcom": 37, "": [37, 126, 135, 138, 139, 140, 143, 144, 145, 166, 177, 215, 225, 234, 235, 266, 271, 290], "tutori": [37, 229, 281, 286], "anaconda": 38, "mpmath": 38, "question": 38, "abc": 39, "caveat": [39, 109], "quaternion": 40, "ask": 41, "assum": 42, "queri": 43, "content": [43, 54, 74, 87, 93, 208, 220, 230, 239], "perform": 43, "improv": [43, 131], "common": [44, 98, 121, 190, 215, 216, 217], "calculu": [44, 46, 200, 283], "theori": [44, 47, 107, 272, 277], "refin": 45, "singular": [46, 111], "weight": 46, "categori": 47, "base": [47, 69, 103, 203, 204, 215, 222, 235], "diagram": 47, "draw": 47, "codegen": [48, 249], "tool": [48, 106], "abstract": [48, 112, 116, 118, 141, 151, 168, 198, 207], "syntax": 48, "tree": [48, 206, 216, 288], "ast": [48, 131], "predefin": 48, "node": 48, "c": [48, 216], "cfunction": 48, "cnode": 48, "cxxnode": 48, "fortran": [48, 216], "fnode": 48, "algorithm": [48, 49, 166, 177, 209, 212, 218, 223, 226], "pyutil": 48, "cutil": 48, "futil": 48, "present": [49, 57], "group": [49, 50, 52, 55, 57, 58, 186, 211], "overview": [49, 57, 92], "facil": 49, "construct": [49, 57, 238], "free": [49, 204], "word": [49, 57], "coset": 49, "enumer": [49, 72], "todd": 49, "coxet": 49, "cosett": 49, "compress": 49, "standard": 49, "subgroup": 49, "low": 49, "reidemeist": 49, "schreier": 49, "bibliographi": [49, 57], "galoi": [50, 211], "grai": 51, "constructor": [52, 212, 289], "nilpot": 53, "abelian": 53, "cyclic": 53, "partit": [56, 254], "polycycl": 57, "polycyclicgroup": 57, "collector": 57, "comput": [57, 92, 108, 168, 215, 287], "minim": [57, 211], "uncollect": 57, "subword": 57, "collect": [57, 217, 293], "expon": [57, 215], "depth": [57, 79], "lead": 57, "polyhedron": 60, "prufer": 61, "sequenc": [61, 89, 209, 212, 221, 222], "subset": [62, 70], "canonic": 63, "concret": 66, "hypergeometr": [66, 75, 86, 89, 218, 226], "term": [66, 215, 217, 223], "cach": 67, "singleton": [67, 222, 224], "power": [67, 218, 224, 287, 293], "mul": 67, "mod": 67, "multidimension": 67, "contain": 67, "exprtool": 67, "sort": 67, "cryptographi": 68, "geometri": [69, 79, 203], "discret": [70, 236], "transform": [70, 92, 94, 109, 266], "fast": 70, "fourier": [70, 219], "theoret": 70, "walsh": 70, "hadamard": 70, "m\u00f6biu": 70, "convolut": 70, "cover": 70, "product": [70, 169, 180, 237, 267], "intersect": [70, 79], "accuraci": 71, "error": [71, 75], "handl": [71, 235], "sum": 71, "combinatori": 72, "elementari": [73, 203, 222, 224], "trigonometr": [73, 75, 225, 293], "hyperbol": 73, "integ": [73, 206], "exponenti": [73, 75, 293], "piecewis": 73, "dirac": 75, "delta": 75, "discontinu": 75, "gamma": [75, 118], "beta": 75, "fresnel": 75, "logarithm": [75, 293], "bessel": 75, "airi": 75, "b": 75, "spline": 75, "riemann": 75, "zeta": 75, "ellipt": 75, "mathieu": 75, "orthogon": [75, 212, 268], "jacobi": 75, "gegenbau": 75, "chebyshev": 75, "legendr": 75, "hermit": 75, "laguerr": 75, "spheric": 75, "harmon": [75, 157, 182], "curv": 76, "ellips": 77, "entiti": [78, 79, 202], "avail": 79, "usag": [79, 131, 149, 206, 267], "median": 79, "pappu": 79, "hexagon": 79, "theorem": [79, 92, 271], "futur": [79, 121, 131, 190], "truth": [79, 97], "dimens": [79, 183, 186], "beyond": 79, "visual": [79, 148], "line": 80, "plane": [81, 92], "polygon": [83, 94], "about": [85, 235, 266, 294], "holonom": [85, 86, 87, 89, 90, 136], "convert": [86, 89, 206, 282], "represent": [86, 90, 186, 200, 206], "meijer": [86, 89, 92, 226], "g": [86, 89, 92, 226], "intern": [88, 92, 94, 206, 209, 211, 229], "composit": 89, "seri": [89, 202, 213, 218, 219, 220, 223, 283], "expans": [89, 223, 226, 283], "current": 91, "polar": [92, 153], "argand": 92, "tabl": [92, 97, 226], "lookup": 92, "mellin": 92, "converg": 92, "laplac": 92, "thi": [92, 235], "valid": 92, "formula": [92, 226], "todo": 94, "over": [94, 215, 224], "polytop": 94, "For": 94, "2d": 94, "polyhedra": 94, "session": 95, "lie": [96, 232], "equival": [97, 148], "manipul": [97, 103, 123, 208, 209, 212, 213, 235, 288], "infer": 97, "dens": [99, 206, 207, 209], "block": 100, "immutablematrix": 101, "rotat": 103, "numpi": 103, "normal": [104, 215], "spars": [105, 106, 206, 207, 209], "immutablesparsematrix": 105, "ntheori": 107, "ecm": 107, "q": 107, "sub": 108, "ufuncifi": 108, "aesara": [108, 216], "so": 108, "experiment": 109, "mathrm": [109, 292], "runtim": 109, "beam": [110, 111, 112], "bend": 111, "problem": [111, 211, 267], "continuum": 112, "truss": [112, 113], "pole": 115, "bode": 115, "impuls": 115, "respons": [115, 216], "step": [115, 235], "ramp": 115, "lti": 117, "high": 118, "energi": [118, 146], "hydrogen": 119, "wavefunct": 119, "potenti": [121, 145, 146, 190, 197, 268], "advanc": [121, 190, 215, 288, 289], "featur": [121, 190, 284], "choic": 121, "acceler": [121, 190, 199, 223], "interfac": [121, 190, 202, 236], "bodi": [122, 128, 146, 271], "framework": [125, 142], "kane": [126, 135, 138, 139, 143, 145], "lagrang": [126, 135, 140, 144, 145], "inertia": [128, 146], "load": [128, 146], "mechanics_print": 129, "mprint": 129, "mpprint": 129, "mlatex": 129, "symbolicsystem": [130, 149], "autolev": [131, 148], "dynam": 131, "onlin": 131, "switch": 131, "bicycl": 133, "four": 134, "bar": 134, "linkag": 134, "nonminim": 135, "pendulum": 135, "multi": 136, "degre": 136, "freedom": 136, "roll": [137, 138, 139, 140], "disc": [137, 138, 139, 140], "constraint": 139, "forc": 139, "classic": [141, 209], "jointsmethod": 142, "structur": [143, 144, 186, 229], "background": 145, "directli": [145, 266], "new_method": 145, "kwarg": 145, "a_and_b": 145, "true": 145, "ha": 145, "nan": 145, "zoo": 145, "oo": 145, "further": [145, 285], "mass": [146, 271], "particl": [146, 172], "rigid": 146, "dyadic": [146, 190, 265, 266], "momentum": 146, "angular": [146, 199], "momenta": 146, "kinet": 146, "lagrangian": 146, "user": [148, 229, 232, 233], "rough": 148, "link": 148, "gaussian": [150, 206, 207, 215], "optic": [150, 151], "medium": 152, "wave": 155, "pauli": 156, "quantum": [157, 168, 182], "oscil": [157, 182], "d": [157, 182], "anticommut": 158, "cartesian": 159, "state": [159, 168, 171, 179], "clebsch": 160, "gordan": 160, "coeffici": [160, 209], "circuit": 161, "commut": [162, 203], "dagger": 164, "gate": 165, "grover": 166, "hilbert": 167, "space": [167, 186, 226], "inner": 169, "helper": [171, 216], "box": 172, "qappli": 173, "qft": 174, "qubit": 175, "shor": 177, "spin": 178, "second": 181, "quantiz": 181, "more": [184, 185, 223, 266, 287], "dimension": 184, "analysi": 184, "quantiti": [184, 186, 188, 266], "unit": [185, 186, 187, 189], "philosophi": 186, "behind": 186, "need": 186, "literatur": [186, 210, 215], "prefix": 187, "convers": 188, "referencefram": [190, 200], "dynamicsymbol": 190, "essenti": [191, 193, 261, 264], "field": [192, 197, 206, 209, 211, 215, 268, 270], "kinemat": [195, 199], "kinematic_equ": 195, "scalar": [197, 268, 270], "curl": [197, 268], "diverg": [197, 268, 271], "gradient": [197, 268], "conserv": [197, 268], "solenoid": [197, 268], "veloc": 199, "basi": [200, 209, 211], "wigner": 201, "credit": 201, "copyright": 201, "plotgrid": 202, "pyglet": 202, "mode": 202, "color": 202, "geometr": 202, "ascii": [202, 292], "art": 202, "agca": 203, "ring": [203, 206, 207], "ideal": 203, "homomorph": [203, 211], "syzygi": 203, "extens": [203, 215], "concept": 204, "divis": 204, "factori": 204, "euclidean": 204, "gcd": [204, 209, 215], "lcm": 204, "groebner": [204, 209], "introduc": [205, 206], "domainmatrix": 205, "dup": 206, "dmp": 206, "polyr": 206, "polynomialr": 206, "choos": 206, "unifi": 206, "gf": 207, "p": [207, 211], "zz": 207, "qq": 207, "mpq": 207, "zz_i": 207, "qq_i": 207, "rr": 207, "cc": 207, "k": 207, "x": 207, "ex": 207, "quotient": 207, "level": 209, "multivari": [209, 215], "univari": [209, 215], "remaind": 209, "subresult": 209, "modular": 209, "undocu": 209, "main": 211, "prime": 211, "decomposit": [211, 212, 215], "adic": 211, "valuat": 211, "subfield": 211, "As": 211, "arithmet": 211, "extra": 212, "monomi": 212, "encod": 212, "formal": [212, 218], "appel": 212, "partial": [212, 215, 234, 235], "fraction": [212, 215, 293], "dispers": 212, "rs_seri": 213, "wester": 215, "articl": 215, "simpl": 215, "support": 215, "back": 215, "cyclotom": 215, "gr\u00f6bner": 215, "mistak": 216, "prettyprint": 216, "rcodeprint": 216, "smt": 216, "lib": 216, "mapl": 216, "javascript": 216, "julia": 216, "octav": 216, "matlab": 216, "rust": 216, "gtk": 216, "lambdaprint": 216, "latexprint": 216, "mathmlprint": 216, "pythoncodeprint": 216, "pythonprint": 216, "srepr": [216, 292], "strprinter": 216, "preview": 216, "codeprint": 216, "preced": 216, "dotprint": 216, "subexpress": 217, "detect": 217, "compound": [222, 224, 236], "recurs": [222, 288], "gruntz": 223, "intuit": 223, "residu": 223, "setkind": 224, "hongguang": 225, "fu": 225, "rule": [225, 267], "notat": 226, "increment": 226, "decrement": 226, "indic": 226, "around": 226, "loos": 226, "end": 226, "confluenc": 226, "extend": 226, "heurist": 232, "riccati": 232, "inform": [232, 233], "pde": [233, 234, 235], "deutil": 234, "recurr": 234, "de": [234, 235], "wrong": 235, "why": [235, 287], "we": 235, "emploi": 235, "search": 235, "deal": 235, "where": 235, "known": 235, "plan": 235, "transolv": 235, "continu": [236, 293], "stochast": 236, "dim": [237, 238], "contract": 237, "diagon": [237, 289], "explicit": 238, "pytest": 245, "randomis": 246, "detail": [248, 249, 265], "routin": 249, "decor": 250, "enum": 251, "variat": 254, "memoiz": 256, "pkgdata": 258, "inspect": 259, "time": 260, "orient": [263, 266], "locat": 266, "coordsys3d": 266, "orient_new": 266, "AND": 266, "quadrilater": 267, "third": 267, "del": [267, 268], "curvilinear": 268, "applic": 271, "calcul": 271, "perimet": 271, "surfac": 271, "area": 271, "volum": 271, "flux": 271, "stoke": 271, "introductori": [281, 286], "quick": [282, 283, 285, 288, 289], "two": 285, "final": 285, "understand": 288, "through": 288, "invari": 288, "walk": 288, "prevent": 288, "shape": 289, "access": 289, "row": 289, "column": 289, "insert": 289, "determin": 289, "rref": 289, "nullspac": 289, "columnspac": 289, "eigenvalu": 289, "eigenvector": 289, "next": 290, "preliminari": 291, "exercis": 291, "str": 292, "mathml": 292, "dot": 292, "cancel": 293, "apart": 293, "trigsimp": 293, "expand_trig": 293, "powsimp": 293, "expand_power_exp": 293, "expand_power_bas": 293, "powdenest": 293, "expand_log": 293, "logcombin": 293, "expand_func": 293, "hyperexpand": 293, "combsimp": 293, "gammasimp": 293}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"Citing SymPy": [[0, "citing-sympy"]], "Debugging": [[1, "debugging"]], "Dependencies": [[2, "dependencies"]], "Hard Dependencies": [[2, "hard-dependencies"]], "Optional Dependencies": [[2, "optional-dependencies"]], "Recommended Optional Dependencies": [[2, "recommended-optional-dependencies"]], "Interactive Use": [[2, "interactive-use"]], "Printing": [[2, "printing"], [23, "printing"], [95, "module-sympy.interactive.printing"], [121, "printing"], [190, "printing"], [216, "printing"], [292, "printing"]], "Parsing": [[2, "parsing"], [109, "module-sympy.parsing"]], "Logic": [[2, "logic"], [97, "module-sympy.logic"], [272, "logic"], [275, "logic"]], "Plotting": [[2, "plotting"], [202, "module-sympy.plotting.plot"]], "lambdify": [[2, "lambdify"], [282, "lambdify"]], "Code Generation": [[2, "code-generation"], [48, "code-generation"], [272, "code-generation"], [274, "code-generation"]], "Autowrap": [[2, "autowrap"], [48, "autowrap"]], "Code Printers": [[2, "code-printers"]], "Testing-Only Dependencies": [[2, "testing-only-dependencies"]], "Statistics": [[2, "statistics"]], "Optional SymEngine Backend": [[2, "optional-symengine-backend"]], "Sage": [[2, "sage"]], "Development Dependencies": [[2, "development-dependencies"]], "Getting the Source Code": [[2, "getting-the-source-code"]], "Running the Tests": [[2, "running-the-tests"]], "Building the Documentation": [[2, "building-the-documentation"], [8, "building-the-documentation"]], "Running the Benchmarks": [[2, "running-the-benchmarks"]], "Deprecation Policy": [[3, "deprecation-policy"]], "What is a deprecation?": [[3, "what-is-a-deprecation"]], "Try to avoid backwards incompatible changes in the first place": [[3, "try-to-avoid-backwards-incompatible-changes-in-the-first-place"]], "When does a change require deprecation?": [[3, "when-does-a-change-require-deprecation"]], "Public API": [[3, null]], "Not Public API": [[3, null]], "The purpose of deprecation": [[3, "the-purpose-of-deprecation"]], "When it is not technically possible to deprecate": [[3, "when-it-is-not-technically-possible-to-deprecate"]], "How long should deprecations last?": [[3, "how-long-should-deprecations-last"]], "How to deprecate code": [[3, "how-to-deprecate-code"]], "Checklist": [[3, "checklist"]], "Adding the deprecation to the code": [[3, "adding-the-deprecation-to-the-code"]], "Documenting a deprecation": [[3, "documenting-a-deprecation"]], "Release notes entry": [[3, "release-notes-entry"]], "SymPy Docstrings Style Guide": [[4, "sympy-docstrings-style-guide"]], "General Guidelines": [[4, "general-guidelines"], [5, "general-guidelines"]], "Formatting": [[4, "formatting"]], "Sections": [[4, "sections"]], "1. Single-Sentence Summary": [[4, "single-sentence-summary"]], "2. Explanation Section": [[4, "explanation-section"]], "3. Examples Section": [[4, "examples-section"]], "4. Parameters Section": [[4, "parameters-section"]], "5. See Also Section": [[4, "see-also-section"]], "6. References Section": [[4, "references-section"]], "Sample Docstring": [[4, "sample-docstring"]], "Docstrings for Classes that are Mathematical Functions": [[4, "docstrings-for-classes-that-are-mathematical-functions"]], "Best Practices for Writing Docstrings": [[4, "best-practices-for-writing-docstrings"]], "Importing Docstrings into the Sphinx Documentation": [[4, "importing-docstrings-into-the-sphinx-documentation"]], "Cross-Referencing": [[4, "cross-referencing"]], "Docstring Style Guide": [[5, "docstring-style-guide"]], "Types of Documentation": [[5, "types-of-documentation"]], "Narrative Documentation Guidelines": [[5, "narrative-documentation-guidelines"]], "Documentation using Markdown": [[5, "documentation-using-markdown"]], "Best Practices for Writing Documentation": [[5, "best-practices-for-writing-documentation"]], "Formatting Preferences": [[5, "formatting-preferences"]], "Math": [[5, "math"]], "LaTeX Recommendations": [[5, "latex-recommendations"]], "Code": [[5, "code"]], "Headings": [[5, "headings"]], "Style Preferences": [[5, "style-preferences"]], "Spelling and Punctuation": [[5, "spelling-and-punctuation"]], "Capitalization": [[5, "capitalization"]], "Tone Preferences": [[5, "tone-preferences"]], "Contributing": [[6, "contributing"], [37, "contributing"]], "Introduction to Contributing": [[7, "introduction-to-contributing"]], "Get familiar using the software": [[7, "get-familiar-using-the-software"]], "Read the paper": [[7, "read-the-paper"]], "Peruse the documentation": [[7, "peruse-the-documentation"]], "Review the Code of Conduct": [[7, "review-the-code-of-conduct"]], "Join our mailing list": [[7, "join-our-mailing-list"]], "Setup your development environment": [[7, "setup-your-development-environment"]], "Identify something to work on": [[7, "identify-something-to-work-on"]], "SymPy Codebase": [[7, "sympy-codebase"]], "Documentation": [[7, "documentation"], [11, "documentation"]], "Review pull requests": [[7, "review-pull-requests"]], "Required dependencies": [[8, "required-dependencies"]], "Docker": [[8, "docker"], [8, "id2"], [8, "id3"]], "Debian/Ubuntu": [[8, "debian-ubuntu"]], "Fedora": [[8, "fedora"]], "Mac": [[8, "mac"]], "Windows 10": [[8, "windows-10"]], "Build the Docs": [[8, "build-the-docs"]], "Local Installation": [[8, "local-installation"], [8, "id4"]], "SymPy Logos": [[8, "sympy-logos"]], "View the Docs": [[8, "view-the-docs"]], "Auto-Rebuild with the Live Server": [[8, "auto-rebuild-with-the-live-server"]], "PDF Documentation": [[8, "pdf-documentation"]], "Setup Development Environment": [[9, "setup-development-environment"]], "Install Git": [[9, "install-git"]], "Configure Your Name and Email in Git": [[9, "configure-your-name-and-email-in-git"]], "(Optional) Configure Git Settings": [[9, "optional-configure-git-settings"]], "Setup GitHub": [[9, "setup-github"]], "Create a GitHub Account": [[9, "create-a-github-account"]], "Setup SSH Keys": [[9, "setup-ssh-keys"]], "Fork SymPy": [[9, "fork-sympy"]], "Get the SymPy Code": [[9, "get-the-sympy-code"]], "Virtual Environment Setup": [[9, "virtual-environment-setup"]], "Guide for New Contributors": [[10, "guide-for-new-contributors"]], "Index": [[10, "index"]], "Development Workflow Process": [[11, "development-workflow-process"]], "Checklist for Contributions": [[11, "checklist-for-contributions"]], "Pick an issue to fix": [[11, "pick-an-issue-to-fix"]], "Create a new branch": [[11, "create-a-new-branch"]], "Branch names": [[11, "branch-names"]], "Modify code": [[11, "modify-code"]], "Code Quality": [[11, "code-quality"]], "Add Tests": [[11, "add-tests"]], "Run the Tests": [[11, "run-the-tests"]], "Commit the changes": [[11, "commit-the-changes"]], "Deleting junk files": [[11, "deleting-junk-files"]], "Writing commit messages": [[11, "writing-commit-messages"]], "Example of a good commit message": [[11, "example-of-a-good-commit-message"]], "Co-Author": [[11, "co-author"]], "Make a Pull Request": [[11, "make-a-pull-request"]], "Writing pull request title and description": [[11, "writing-pull-request-title-and-description"]], "Add your name and email address to the .mailmap file.": [[11, "add-your-name-and-email-address-to-the-mailmap-file"]], "Writing Tests": [[12, "writing-tests"]], "Testing Policies": [[12, "testing-policies"]], "Basics for Writing Tests": [[12, "basics-for-writing-tests"]], "Running Tests": [[12, "running-tests"]], "Debugging Test Failures on GitHub Actions": [[12, "debugging-test-failures-on-github-actions"]], "Regression Tests": [[12, "regression-tests"]], "Special Types of Tests": [[12, "special-types-of-tests"]], "Testing Exceptions": [[12, "testing-exceptions"]], "Testing Warnings": [[12, "testing-warnings"]], "Test Deprecated Functionality": [[12, "test-deprecated-functionality"]], "Testing that Something is Unchanged": [[12, "testing-that-something-is-unchanged"]], "Testing Expressions with Dummy": [[12, "testing-expressions-with-dummy"]], "Consistency Checks": [[12, "consistency-checks"]], "Random Tests": [[12, "random-tests"]], "Skipping Tests": [[12, "skipping-tests"]], "Marking Tests as Expected to Fail": [[12, "marking-tests-as-expected-to-fail"]], "Marking Tests as Slow": [[12, "marking-tests-as-slow"]], "Writing Tests with External Dependencies": [[12, "writing-tests-with-external-dependencies"]], "Doctests": [[12, "doctests"]], "Updating Existing Tests": [[12, "updating-existing-tests"]], "Code Quality Checks": [[12, "code-quality-checks"]], "Tests Style Guide": [[12, "tests-style-guide"]], "Test Coverage": [[12, "test-coverage"]], "List of active deprecations": [[13, "list-of-active-deprecations"]], "Silencing SymPy Deprecation Warnings": [[13, "silencing-sympy-deprecation-warnings"]], "Version 1.13": [[13, "version-1-13"]], "Deprecate markers, annotations, fill, rectangles of the Plot class": [[13, "deprecate-markers-annotations-fill-rectangles-of-the-plot-class"]], "Moved mechanics functions": [[13, "moved-mechanics-functions"]], "Version 1.12": [[13, "version-1-12"]], "The ManagedProperties metaclass": [[13, "the-managedproperties-metaclass"]], "New Joint coordinate format": [[13, "new-joint-coordinate-format"]], "New Joint intermediate frames": [[13, "new-joint-intermediate-frames"]], "Change in joint attachment point argument": [[13, "change-in-joint-attachment-point-argument"]], "Version 1.11": [[13, "version-1-11"]], "Modules sympy.tensor.array.expressions.conv_* renamed to sympy.tensor.array.expressions.from_*": [[13, "modules-sympy-tensor-array-expressions-conv-renamed-to-sympy-tensor-array-expressions-from"]], "New Mathematica code parser": [[13, "new-mathematica-code-parser"]], "Redundant static methods in carmichael": [[13, "redundant-static-methods-in-carmichael"]], "The check argument to HadamardProduct, MatAdd and MatMul": [[13, "the-check-argument-to-hadamardproduct-matadd-and-matmul"]], "Version 1.10": [[13, "version-1-10"]], "Some traversal functions have been moved": [[13, "some-traversal-functions-have-been-moved"]], "sympy.core.trace": [[13, "sympy-core-trace"]], "The sympy.core.compatibility submodule": [[13, "the-sympy-core-compatibility-submodule"]], "Version 1.9": [[13, "version-1-9"]], "expr_free_symbols": [[13, "expr-free-symbols"]], "sympy.stats.sample(numsamples=n)": [[13, "sympy-stats-sample-numsamples-n"]], "sympy.polys.solvers.RawMatrix": [[13, "sympy-polys-solvers-rawmatrix"]], "Non-Expr objects in a Matrix": [[13, "non-expr-objects-in-a-matrix"]], "The get_segments attribute of plotting objects": [[13, "the-get-segments-attribute-of-plotting-objects"]], "The mdft function in sympy.physics.matrices": [[13, "the-mdft-function-in-sympy-physics-matrices"]], "The private SparseMatrix._smat and DenseMatrix._mat attributes": [[13, "the-private-sparsematrix-smat-and-densematrix-mat-attributes"]], "laplace_transform of a Matrix with noconds=False": [[13, "laplace-transform-of-a-matrix-with-noconds-false"]], "Version 1.8": [[13, "version-1-8"]], "sympy.printing.theanocode": [[13, "sympy-printing-theanocode"]], "sympy.assumptions.handlers.AskHandler and related methods": [[13, "sympy-assumptions-handlers-askhandler-and-related-methods"]], "Version 1.7.1": [[13, "version-1-7-1"]], "Calling sympy.stats.StochasticProcess.distribution with RandomIndexedSymbol": [[13, "calling-sympy-stats-stochasticprocess-distribution-with-randomindexedsymbol"]], "Version 1.7": [[13, "version-1-7"]], "sympy.stats.DiscreteMarkovChain.absorbing_probabilites()": [[13, "sympy-stats-discretemarkovchain-absorbing-probabilites"]], "sympy.utilities.misc.find_executable()": [[13, "sympy-utilities-misc-find-executable"]], "Mutable attributes in sympy.diffgeom": [[13, "mutable-attributes-in-sympy-diffgeom"]], "The unicode argument and attribute to sympy.printing.pretty.stringpict.prettyForm and the sympy.printing.pretty.pretty_symbology.xstr function": [[13, "the-unicode-argument-and-attribute-to-sympy-printing-pretty-stringpict-prettyform-and-the-sympy-printing-pretty-pretty-symbology-xstr-function"]], "Passing the arguments to lambdify as a set": [[13, "passing-the-arguments-to-lambdify-as-a-set"]], "Core operators no longer accept non-Expr args": [[13, "core-operators-no-longer-accept-non-expr-args"]], "Version 1.6": [[13, "version-1-6"]], "Various sympy.utilities submodules have moved": [[13, "various-sympy-utilities-submodules-have-moved"]], "sympy.testing.randtest": [[13, "sympy-testing-randtest"]], "Mixing Poly and non-polynomial expressions in binary operations": [[13, "mixing-poly-and-non-polynomial-expressions-in-binary-operations"]], "The print_cyclic flag of sympy.combinatorics.Permutation": [[13, "the-print-cyclic-flag-of-sympy-combinatorics-permutation"]], "Using integrate with Poly": [[13, "using-integrate-with-poly"]], "The string fallback in sympify()": [[13, "the-string-fallback-in-sympify"]], "Creating an indefinite Integral with an Eq argument": [[13, "creating-an-indefinite-integral-with-an-eq-argument"]], "Version 1.5": [[13, "version-1-5"]], "Tensor.fun_eval and Tensor.__call__": [[13, "tensor-fun-eval-and-tensor-call"]], "TensorType": [[13, "tensortype"]], "The dummy_fmt argument to TensorIndexType": [[13, "the-dummy-fmt-argument-to-tensorindextype"]], "The metric argument to TensorIndexType": [[13, "the-metric-argument-to-tensorindextype"]], "The get_kronecker_delta() and get_epsilon() methods of TensorIndexType": [[13, "the-get-kronecker-delta-and-get-epsilon-methods-of-tensorindextype"]], "The tensorsymmetry() function": [[13, "the-tensorsymmetry-function"]], "The tensorhead() function": [[13, "the-tensorhead-function"]], "The is_EmptySet attribute of sets": [[13, "the-is-emptyset-attribute-of-sets"]], "ProductSet(iterable)": [[13, "productset-iterable"]], "The set_potential_energy method in sympy.physics.mechanics": [[13, "the-set-potential-energy-method-in-sympy-physics-mechanics"]], "Using a set for the condition in ConditionSet": [[13, "using-a-set-for-the-condition-in-conditionset"]], "The max_degree and get_upper_degree properties of sympy.polys.multivariate_resultants.DixonResultant": [[13, "the-max-degree-and-get-upper-degree-properties-of-sympy-polys-multivariate-resultants-dixonresultant"]], "Non-tuple iterable for the first argument to Lambda": [[13, "non-tuple-iterable-for-the-first-argument-to-lambda"]], "The evaluate flag to differentiate_finite": [[13, "the-evaluate-flag-to-differentiate-finite"]], "Version 1.4": [[13, "version-1-4"]], "TensorIndexType.data and related methods": [[13, "tensorindextype-data-and-related-methods"]], "Glossary": [[14, "glossary"]], "Gotchas and Pitfalls": [[15, "gotchas-and-pitfalls"]], "Introduction": [[15, "introduction"], [19, "introduction"], [40, "introduction"], [47, "introduction"], [48, "introduction"], [49, "introduction"], [57, "introduction"], [69, "introduction"], [79, "introduction"], [97, "introduction"], [131, "introduction"], [148, "introduction"], [186, "introduction"], [197, "introduction"], [202, "introduction"], [203, "introduction"], [204, "introduction"], [211, "introduction"], [215, "introduction"], [270, "introduction"], [287, "introduction"]], "Equals Signs (=)": [[15, "equals-signs"]], "Single Equals Sign": [[15, "single-equals-sign"]], "Double Equals Signs": [[15, "double-equals-signs"]], "Variables": [[15, "variables"]], "Variables Assignment does not Create a Relation Between Expressions": [[15, "variables-assignment-does-not-create-a-relation-between-expressions"]], "Symbols": [[15, "symbols"], [285, "symbols"]], "Functions": [[15, "functions"], [74, "functions"], [237, "functions"]], "Symbolic Expressions": [[15, "symbolic-expressions"]], "Python numbers vs. SymPy Numbers": [[15, "python-numbers-vs-sympy-numbers"]], "Evaluating Expressions with Floats and Rationals": [[15, "evaluating-expressions-with-floats-and-rationals"]], "Immutability of Expressions": [[15, "immutability-of-expressions"]], "Mathematical Operators": [[15, "mathematical-operators"]], "Inverse Trig Functions": [[15, "inverse-trig-functions"]], "Sqrt is not a Function": [[15, "sqrt-is-not-a-function"]], "Special Symbols": [[15, "special-symbols"]], "Lists": [[15, "lists"]], "Dictionaries": [[15, "dictionaries"]], "Tuples": [[15, "tuples"]], "Keyword Arguments": [[15, "keyword-arguments"]], "Getting help from within SymPy": [[15, "getting-help-from-within-sympy"]], "help()": [[15, "help"]], "Explanations": [[16, "explanations"], [37, "explanations"]], "Solve Output by Type": [[17, "solve-output-by-type"]], "Empty List": [[17, "empty-list"]], "List Of Values": [[17, "list-of-values"]], "Single Dictionary": [[17, "single-dictionary"]], "List of Tuples": [[17, "list-of-tuples"]], "List of Dictionaries": [[17, "list-of-dictionaries"]], "Boolean or Relational": [[17, "boolean-or-relational"]], "Classification of SymPy objects": [[18, "classification-of-sympy-objects"]], "class": [[18, "class"]], "kind": [[18, "kind"], [67, "module-sympy.core.kind"]], "sets and assumptions": [[18, "sets-and-assumptions"]], "func": [[18, "func"], [288, "func"]], "Finite Difference Approximations to Derivatives": [[19, "finite-difference-approximations-to-derivatives"]], "A Direct Method Using SymPy Matrices": [[19, "a-direct-method-using-sympy-matrices"]], "SymPy Special Topics": [[20, "sympy-special-topics"]], "Assumptions": [[21, "assumptions"], [23, "assumptions"], [43, "module-sympy.assumptions"]], "The (old) assumptions system": [[21, "the-old-assumptions-system"]], "Gotcha: symbols with different assumptions": [[21, "gotcha-symbols-with-different-assumptions"]], "Applying assumptions to string inputs": [[21, "applying-assumptions-to-string-inputs"]], "Predicates": [[21, "predicates"], [44, "id1"]], "Assumptions predicates for the (old) assumptions": [[21, "id28"]], "References for the above definitions": [[21, "references-for-the-above-definitions"]], "Implications": [[21, "implications"]], "Interpretation of the predicates": [[21, "interpretation-of-the-predicates"]], "Other is_* properties": [[21, "other-is-properties"]], "Implementing assumptions handlers": [[21, "implementing-assumptions-handlers"]], "Mechanism of the assumptions system": [[21, "mechanism-of-the-assumptions-system"]], "Limitations": [[21, "limitations"], [30, "limitations"], [91, "limitations"]], "Combining predicates with or": [[21, "combining-predicates-with-or"]], "Relations between different symbols": [[21, "relations-between-different-symbols"]], "Symbolic and fuzzy booleans": [[22, "symbolic-and-fuzzy-booleans"]], "Symbolic Boolean vs three valued bool": [[22, "symbolic-boolean-vs-three-valued-bool"]], "Three-valued logic with fuzzy bools": [[22, "three-valued-logic-with-fuzzy-bools"]], "Three-valued logic with symbolic Booleans": [[22, "three-valued-logic-with-symbolic-booleans"]], "Writing Custom Functions": [[23, "writing-custom-functions"]], "Easy Cases: Fully Symbolic or Fully Evaluated": [[23, "easy-cases-fully-symbolic-or-fully-evaluated"]], "The Fully Symbolic Case": [[23, "the-fully-symbolic-case"]], "The Fully Evaluated Case": [[23, "the-fully-evaluated-case"]], "Creating a Custom Function": [[23, "creating-a-custom-function"]], "Defining Automatic Evaluation with eval()": [[23, "defining-automatic-evaluation-with-eval"]], "Reminder": [[23, null]], "Best Practices for eval()": [[23, "best-practices-for-eval"]], "Key Point": [[23, null]], "Note": [[23, null]], "Numerical Evaluation with evalf()": [[23, "numerical-evaluation-with-evalf"]], "Rewriting and Simplification": [[23, "rewriting-and-simplification"]], "rewrite()": [[23, "rewrite"]], "doit()": [[23, "doit"]], "expand()": [[23, "expand"]], "Differentiation": [[23, "differentiation"]], "Other Methods": [[23, "other-methods"], [38, "other-methods"]], "inverse()": [[23, "inverse"]], "as_real_imag()": [[23, "as-real-imag"]], "Miscellaneous _eval_* methods": [[23, "miscellaneous-eval-methods"]], "Complete Examples": [[23, "complete-examples"]], "Versine": [[23, "versine"]], "Definition": [[23, "definition"], [23, "id2"], [23, "id4"], [85, "definition"]], "Examples": [[23, "examples"], [23, "id3"], [23, "id5"], [29, "examples"], [39, "examples"], [67, "examples"], [67, "id48"], [91, "examples"], [94, "examples"], [94, "id38"], [107, "examples"], [107, "id63"], [111, "examples"], [118, "examples"], [153, "examples"], [185, "examples"], [200, "examples"], [200, "id1"], [215, "examples"], [223, "examples"], [223, "id3"], [236, "examples"], [237, "examples"], [238, "examples"], [241, "examples"]], "divides": [[23, "divides"]], "Fused Multiply-Add (FMA)": [[23, "fused-multiply-add-fma"]], "Additional Tips": [[23, "additional-tips"]], "How-to Guides": [[24, "how-to-guides"], [37, "how-to-guides"]], "Control Package Examples": [[25, "control-package-examples"]], "Example 1": [[25, "example-1"], [111, "example-1"]], "Example 2": [[25, "example-2"], [111, "example-2"]], "Example 3": [[25, "example-3"], [111, "example-3"]], "Example 4": [[25, "example-4"], [111, "example-4"]], "Example 5": [[25, "example-5"], [111, "example-5"]], "References": [[25, "references"], [50, "references"], [67, "references"], [79, "references"], [85, "references"], [94, "references"], [153, "references"], [156, "references"], [201, "references"], [225, "references"], [226, "references"], [229, "references"], [235, "references"]], "Physics": [[26, "physics"], [272, "physics"], [278, "module-sympy.physics"]], "Find the Roots of a Polynomial Algebraically or Numerically": [[27, "find-the-roots-of-a-polynomial-algebraically-or-numerically"]], "Alternatives to Consider": [[27, "alternatives-to-consider"], [29, "alternatives-to-consider"], [30, "alternatives-to-consider"], [32, "alternatives-to-consider"], [33, "alternatives-to-consider"], [34, "alternatives-to-consider"], [35, "alternatives-to-consider"]], "Example of Finding the Roots of a Polynomial Algebraically": [[27, "example-of-finding-the-roots-of-a-polynomial-algebraically"]], "Functions to Find the Roots of a Polynomial": [[27, "functions-to-find-the-roots-of-a-polynomial"]], "Guidance": [[27, "guidance"], [29, "guidance"], [30, "guidance"], [31, "guidance"], [32, "guidance"], [33, "guidance"], [34, "guidance"], [35, "guidance"]], "Find the Roots of a Polynomial": [[27, "find-the-roots-of-a-polynomial"]], "Algebraic Solution Without Root Multiplicities": [[27, "algebraic-solution-without-root-multiplicities"]], "Algebraic Solution With Root Multiplicities": [[27, "algebraic-solution-with-root-multiplicities"]], "roots": [[27, "roots"]], "Factor the Equation": [[27, "factor-the-equation"]], "Exact Numeric Solution With Root Multiplicities": [[27, "exact-numeric-solution-with-root-multiplicities"]], "real_roots": [[27, "real-roots"]], "Approximate Numeric Solution With Root Multiplicities": [[27, "approximate-numeric-solution-with-root-multiplicities"]], "nroots": [[27, "nroots"]], "Complex Roots": [[27, "complex-roots"]], "Use the Solution Result": [[27, "use-the-solution-result"], [30, "use-the-solution-result"], [31, "use-the-solution-result"], [32, "use-the-solution-result"], [33, "use-the-solution-result"], [34, "use-the-solution-result"]], "List (all_roots, real_roots, nroots)": [[27, "list-all-roots-real-roots-nroots"]], "List of dictionaries (solve)": [[27, "list-of-dictionaries-solve"]], "Dictionary (roots)": [[27, "dictionary-roots"]], "Expression (factor)": [[27, "expression-factor"]], "Tradeoffs": [[27, "tradeoffs"]], "Mathematical Exactness, Completeness of List of Roots, and Speed": [[27, "mathematical-exactness-completeness-of-list-of-roots-and-speed"]], "Get All Roots, Perhaps Implicitly": [[27, "get-all-roots-perhaps-implicitly"]], "Numerically Evaluate CRootOf Roots": [[27, "numerically-evaluate-crootof-roots"]], "Representing Roots": [[27, "representing-roots"]], "Not All Equations Can Be Solved": [[27, "not-all-equations-can-be-solved"], [30, "not-all-equations-can-be-solved"], [31, "not-all-equations-can-be-solved"], [34, "not-all-equations-can-be-solved"]], "Equations With No Closed-Form Solution": [[27, "equations-with-no-closed-form-solution"], [31, "equations-with-no-closed-form-solution"], [34, "equations-with-no-closed-form-solution"]], "Report a Bug": [[27, "report-a-bug"], [29, "report-a-bug"], [30, "report-a-bug"], [31, "report-a-bug"], [32, "report-a-bug"], [33, "report-a-bug"], [34, "report-a-bug"], [35, "report-a-bug"], [36, "report-a-bug"]], "Solve Equations": [[28, "solve-equations"]], "Reduce One or a System of Inequalities for a Single Variable Algebraically": [[29, "reduce-one-or-a-system-of-inequalities-for-a-single-variable-algebraically"]], "Reducing a System of Inequalities for a Single Variable Algebraically": [[29, "reducing-a-system-of-inequalities-for-a-single-variable-algebraically"]], "Reducing One Inequality for a Single Variable Algebraically": [[29, "reducing-one-inequality-for-a-single-variable-algebraically"]], "Include the Variable to Be Reduced for in the Function Call": [[29, "include-the-variable-to-be-reduced-for-in-the-function-call"]], "Reduce a System of Inequalities Algebraically": [[29, "reduce-a-system-of-inequalities-algebraically"]], "Use the Result": [[29, "use-the-result"]], "Extract a List of Decomposed Relations": [[29, "extract-a-list-of-decomposed-relations"]], "Extract a Tuple of Relations": [[29, "extract-a-tuple-of-relations"]], "Limitations of Inequality Reduction Using SymPy": [[29, "limitations-of-inequality-reduction-using-sympy"]], "SymPy Can Reduce for Only One Symbol of Interest Per Inequality": [[29, "sympy-can-reduce-for-only-one-symbol-of-interest-per-inequality"]], "Limitations on Types of Inequalities That SymPy Can Solve": [[29, "limitations-on-types-of-inequalities-that-sympy-can-solve"]], "Not All Results Are Returned for Periodic Functions": [[29, "not-all-results-are-returned-for-periodic-functions"]], "Not All Systems of Inequalities Can Be Reduced": [[29, "not-all-systems-of-inequalities-can-be-reduced"]], "Systems of Inequalities Which Cannot Be Satisfied": [[29, "systems-of-inequalities-which-cannot-be-satisfied"]], "Systems of Inequalities That Cannot Be Reduced Analytically": [[29, "systems-of-inequalities-that-cannot-be-reduced-analytically"]], "Inequalities Which Can Be Reduced Analytically, and SymPy Cannot Reduce": [[29, "inequalities-which-can-be-reduced-analytically-and-sympy-cannot-reduce"]], "Solve a Diophantine Equation Algebraically": [[30, "solve-a-diophantine-equation-algebraically"]], "Example of Solving a Diophantine Equation": [[30, "example-of-solving-a-diophantine-equation"]], "Diophantine Equation Can be Expressed as Expression That Equals Zero": [[30, "diophantine-equation-can-be-expressed-as-expression-that-equals-zero"]], "Specify the Order of Symbols in the Result": [[30, "specify-the-order-of-symbols-in-the-result"]], "Extract Expressions From the Result": [[30, "extract-expressions-from-the-result"]], "Work With Parameters": [[30, "work-with-parameters"]], "Verify a Solution": [[30, "verify-a-solution"]], "Programmatically Extract Parameter Symbols": [[30, "programmatically-extract-parameter-symbols"]], "Equations With No Solution": [[30, "equations-with-no-solution"], [32, "equations-with-no-solution"], [34, "equations-with-no-solution"]], "Solve an Equation Algebraically": [[31, "solve-an-equation-algebraically"], [31, "id1"]], "Alternatives to consider": [[31, "alternatives-to-consider"]], "Solving Functions": [[31, "solving-functions"]], "Make Your Equation Into an Expression That Equals Zero": [[31, "make-your-equation-into-an-expression-that-equals-zero"]], "Put Your Equation Into Eq Form": [[31, "put-your-equation-into-eq-form"]], "Restrict the Domain of Solutions": [[31, "restrict-the-domain-of-solutions"]], "Explicitly Represent Infinite Sets of Possible Solutions": [[31, "explicitly-represent-infinite-sets-of-possible-solutions"]], "Substitute Solutions From solve() Into an Expression": [[31, "substitute-solutions-from-solve-into-an-expression"]], "solveset() Solution Sets Cannot Necessarily Be Interrogated Programmatically": [[31, "solveset-solution-sets-cannot-necessarily-be-interrogated-programmatically"]], "Options That Can Speed up solve()": [[31, "options-that-can-speed-up-solve"], [35, "options-that-can-speed-up-solve"], [36, "options-that-can-speed-up-solve"]], "Equations Which Have a Closed-Form Solution, and SymPy Cannot Solve": [[31, "equations-which-have-a-closed-form-solution-and-sympy-cannot-solve"], [35, "equations-which-have-a-closed-form-solution-and-sympy-cannot-solve"]], "Solve a Matrix Equation Algebraically": [[32, "solve-a-matrix-equation-algebraically"]], "Solve a Matrix Equation": [[32, "solve-a-matrix-equation"]], "Matrix Usually Must Be Square": [[32, "matrix-usually-must-be-square"]], "Methods for Solving Matrix Equations": [[32, "methods-for-solving-matrix-equations"]], "Solving Several Matrix Equations With the Same Matrix": [[32, "solving-several-matrix-equations-with-the-same-matrix"]], "Work With Symbolic Matrices": [[32, "work-with-symbolic-matrices"]], "Speed up Solving Matrix Equations": [[32, "speed-up-solving-matrix-equations"]], "Use the Solution as a Vector": [[32, "use-the-solution-as-a-vector"]], "Extract Elements From the Solution": [[32, "extract-elements-from-the-solution"]], "Solve One or a System of Equations Numerically": [[33, "solve-one-or-a-system-of-equations-numerically"]], "Example of Numerically Solving an Equation": [[33, "example-of-numerically-solving-an-equation"]], "Find Complex Roots of a Real Function": [[33, "find-complex-roots-of-a-real-function"]], "Ensure the Root Found is in a Given Interval": [[33, "ensure-the-root-found-is-in-a-given-interval"]], "Solve a System of Equations Numerically": [[33, "solve-a-system-of-equations-numerically"]], "Increase Precision of the Solution": [[33, "increase-precision-of-the-solution"]], "Create a Function That Can Be Solved With SciPy": [[33, "create-a-function-that-can-be-solved-with-scipy"]], "Substitute the Result Into an Expression": [[33, "substitute-the-result-into-an-expression"]], "Not all Equations Can be Solved": [[33, "not-all-equations-can-be-solved"]], "Equations With no Solution": [[33, "equations-with-no-solution"]], "Solve an Ordinary Differential Equation (ODE) Algebraically": [[34, "solve-an-ordinary-differential-equation-ode-algebraically"]], "Solve an Ordinary Differential Equation (ODE)": [[34, "solve-an-ordinary-differential-equation-ode"]], "Defining Derivatives": [[34, "defining-derivatives"]], "Options to Define an ODE": [[34, "options-to-define-an-ode"]], "Option 1: Define a Function Without Including Its Independent Variable": [[34, "option-1-define-a-function-without-including-its-independent-variable"]], "Specify Initial Conditions or Boundary Conditions": [[34, "specify-initial-conditions-or-boundary-conditions"], [34, "id1"]], "Option 2: Define a Function of an Independent Variable": [[34, "option-2-define-a-function-of-an-independent-variable"]], "Beware Copying and Pasting Results": [[34, "beware-copying-and-pasting-results"]], "Extract the Result for One Solution and Function": [[34, "extract-the-result-for-one-solution-and-function"]], "Some ODEs Cannot Be Solved Explicitly, Only Implicitly": [[34, "some-odes-cannot-be-solved-explicitly-only-implicitly"]], "Extract the Result for Multiple Function-Solution Pairs": [[34, "extract-the-result-for-multiple-function-solution-pairs"]], "If There is One Solution Set": [[34, "if-there-is-one-solution-set"]], "If There are Multiple Solution Sets": [[34, "if-there-are-multiple-solution-sets"]], "Work With Arbitrary Constants": [[34, "work-with-arbitrary-constants"]], "Numerically Solve an ODE in SciPy": [[34, "numerically-solve-an-ode-in-scipy"]], "Ordinary Differential Equation Solving Hints": [[34, "ordinary-differential-equation-solving-hints"]], "Return Unevaluated Integrals": [[34, "return-unevaluated-integrals"]], "Select a Specific Solver": [[34, "select-a-specific-solver"]], "Solve a System of Equations Algebraically": [[35, "solve-a-system-of-equations-algebraically"]], "Examples of Solving a System of Equations Algebraically": [[35, "examples-of-solving-a-system-of-equations-algebraically"]], "Solve a System of Linear Equations Algebraically": [[35, "solve-a-system-of-linear-equations-algebraically"]], "Solve a System of Nonlinear Equations Algebraically": [[35, "solve-a-system-of-nonlinear-equations-algebraically"]], "Solve and Use Results in a Dictionary": [[35, "solve-and-use-results-in-a-dictionary"]], "Solve Into a Solution Given as a Dictionary": [[35, "solve-into-a-solution-given-as-a-dictionary"]], "Use a Solution Given as a Dictionary": [[35, "use-a-solution-given-as-a-dictionary"]], "Solve Results in a Set": [[35, "solve-results-in-a-set"]], "Not All Systems of Equations Can be Solved": [[35, "not-all-systems-of-equations-can-be-solved"]], "Systems of Equations With no Solution": [[35, "systems-of-equations-with-no-solution"]], "Systems of Equations With no Closed-Form Solution": [[35, "systems-of-equations-with-no-closed-form-solution"]], "Solving Guidance": [[36, "solving-guidance"]], "Numeric Solutions": [[36, "numeric-solutions"]], "Equations With no Closed-Form Solution": [[36, "equations-with-no-closed-form-solution"]], "When You Might Prefer a Numeric Solution": [[36, "when-you-might-prefer-a-numeric-solution"]], "Use Exact Values": [[36, "use-exact-values"]], "Include the Variable to be Solved for in the Function Call": [[36, "include-the-variable-to-be-solved-for-in-the-function-call"]], "Ensure Consistent Formatting From solve()": [[36, "ensure-consistent-formatting-from-solve"]], "Include Solutions Making Any Denominator Zero": [[36, "include-solutions-making-any-denominator-zero"]], "Do Not Simplify Solutions": [[36, "do-not-simplify-solutions"]], "Parse a String Representing the Equation": [[36, "parse-a-string-representing-the-equation"]], "Welcome to SymPy\u2019s documentation!": [[37, "welcome-to-sympy-s-documentation"]], "Installation": [[37, "installation"], [38, "installation"], [291, "installation"]], "Tutorials": [[37, "tutorials"], [281, "tutorials"]], "API Reference": [[37, "api-reference"], [248, "module-sympy.utilities.autowrap"], [249, "module-sympy.utilities.codegen"], [272, "api-reference"]], "Anaconda": [[38, "anaconda"]], "Git": [[38, "git"]], "Run SymPy": [[38, "run-sympy"]], "mpmath": [[38, "mpmath"]], "Questions": [[38, "questions"]], "abc": [[39, "module-sympy.abc"]], "Caveats": [[39, "caveats"]], "Algebras": [[40, "algebras"]], "Quaternion Reference": [[40, "module-sympy.algebras"]], "Ask": [[41, "module-sympy.assumptions.ask"]], "Assume": [[42, "module-sympy.assumptions.assume"]], "Predicate": [[43, "predicate"]], "Querying": [[43, "querying"]], "Contents": [[43, "contents"], [54, "contents"], [74, "contents"], [87, "contents"], [93, "contents"], [208, "contents"], [220, "contents"], [230, "contents"], [239, "contents"]], "Performance improvements": [[43, "performance-improvements"]], "Misc": [[43, "misc"]], "Common": [[44, "common"]], "Calculus": [[44, "calculus"], [46, "module-sympy.calculus"], [283, "calculus"]], "Matrix": [[44, "matrix"]], "Number Theory": [[44, "number-theory"], [107, "module-sympy.ntheory.generate"], [272, "number-theory"], [277, "number-theory"]], "Order": [[44, "order"]], "Sets": [[44, "sets"], [224, "sets"]], "Refine": [[45, "module-sympy.assumptions.refine"]], "Singularities": [[46, "singularities"]], "Finite difference weights": [[46, "finite-difference-weights"]], "Category Theory": [[47, "category-theory"]], "Base Class Reference": [[47, "module-sympy.categories"], [69, "base-class-reference"]], "Diagram Drawing": [[47, "module-sympy.categories.diagram_drawing"]], "Code printers (sympy.printing)": [[48, "code-printers-sympy-printing"]], "Codegen (sympy.utilities.codegen)": [[48, "codegen-sympy-utilities-codegen"]], "Classes and functions for rewriting expressions (sympy.codegen.rewriting)": [[48, "module-sympy.codegen.rewriting"]], "Tools for simplifying expressions using approximations (sympy.codegen.approximations)": [[48, "module-sympy.codegen.approximations"]], "Classes for abstract syntax trees (sympy.codegen.ast)": [[48, "module-sympy.codegen.ast"]], "AST Type Tree": [[48, "ast-type-tree"]], "Predefined types": [[48, "predefined-types"]], "Using the nodes": [[48, "using-the-nodes"]], "Special C math functions (sympy.codegen.cfunctions)": [[48, "module-sympy.codegen.cfunctions"]], "C specific AST nodes (sympy.codegen.cnodes)": [[48, "module-sympy.codegen.cnodes"]], "C++ specific AST nodes (sympy.codegen.cxxnodes)": [[48, "module-sympy.codegen.cxxnodes"]], "Fortran specific AST nodes (sympy.codegen.fnodes)": [[48, "module-sympy.codegen.fnodes"]], "Algorithms (sympy.codegen.algorithms)": [[48, "module-sympy.codegen.algorithms"]], "Python utilities (sympy.codegen.pyutils)": [[48, "module-sympy.codegen.pyutils"]], "C utilities (sympy.codegen.cutils)": [[48, "module-sympy.codegen.cutils"]], "Fortran utilities (sympy.codegen.futils)": [[48, "module-sympy.codegen.futils"]], "Finitely Presented Groups": [[49, "finitely-presented-groups"]], "Overview of Facilities": [[49, "overview-of-facilities"]], "The Construction of Finitely Presented Groups": [[49, "the-construction-of-finitely-presented-groups"]], "Free Groups and Words": [[49, "free-groups-and-words"]], "Construction of a Free Group": [[49, "construction-of-a-free-group"]], "Construction of words": [[49, "construction-of-words"]], "Coset Enumeration: The Todd-Coxeter Algorithm": [[49, "coset-enumeration-the-todd-coxeter-algorithm"]], "CosetTable": [[49, "cosettable"]], "Attributes of CosetTable": [[49, "attributes-of-cosettable"]], "Compression and Standardization": [[49, "compression-and-standardization"]], "Subgroups of Finite Index": [[49, "subgroups-of-finite-index"]], "Low Index Subgroups": [[49, "low-index-subgroups"]], "Constructing a presentation for a subgroup": [[49, "constructing-a-presentation-for-a-subgroup"]], "Reidemeister Schreier algorithm": [[49, "reidemeister-schreier-algorithm"]], "Bibliography": [[49, "bibliography"], [57, "bibliography"]], "Galois Groups": [[50, "module-sympy.combinatorics.galois"], [211, "galois-groups"]], "Gray Code": [[51, "module-sympy.combinatorics.graycode"]], "Group constructors": [[52, "module-sympy.combinatorics.group_constructs"]], "Nilpotent, Abelian and Cyclic Numbers": [[53, "module-sympy.combinatorics.group_numbers"]], "Combinatorics": [[54, "combinatorics"]], "Named Groups": [[55, "module-sympy.combinatorics.named_groups"]], "Partitions": [[56, "module-sympy.combinatorics.partitions"]], "Polycyclic Groups": [[57, "polycyclic-groups"]], "Overview of functionalities": [[57, "overview-of-functionalities"]], "The Construction of Polycyclic Groups": [[57, "the-construction-of-polycyclic-groups"]], "Attributes of PolycyclicGroup": [[57, "attributes-of-polycyclicgroup"]], "The Construction of Collector": [[57, "the-construction-of-collector"]], "Attributes of Collector": [[57, "attributes-of-collector"]], "Computation of Minimal Uncollected Subword": [[57, "computation-of-minimal-uncollected-subword"]], "Computation of Subword Index": [[57, "computation-of-subword-index"]], "Computation of Collected Word": [[57, "computation-of-collected-word"]], "Computation of Polycyclic Presentation": [[57, "computation-of-polycyclic-presentation"]], "Computation of Exponent Vector": [[57, "computation-of-exponent-vector"]], "Depth of Polycyclic generator": [[57, "depth-of-polycyclic-generator"]], "Computation of Leading Exponent": [[57, "computation-of-leading-exponent"]], "Permutation Groups": [[58, "module-sympy.combinatorics.perm_groups"]], "Permutations": [[59, "module-sympy.combinatorics.permutations"]], "Generators": [[59, "module-sympy.combinatorics.generators"]], "Polyhedron": [[60, "module-sympy.combinatorics.polyhedron"]], "Prufer Sequences": [[61, "module-sympy.combinatorics.prufer"]], "Subsets": [[62, "module-sympy.combinatorics.subsets"]], "Tensor Canonicalization": [[63, "module-sympy.combinatorics.tensor_can"]], "Test Utilities": [[64, "module-sympy.combinatorics.testutil"]], "Utilities": [[65, "module-sympy.combinatorics.util"], [154, "module-sympy.physics.optics.utils"], [211, "utilities"], [253, "module-sympy.utilities"], [272, "utilities"], [280, "utilities"]], "Concrete": [[66, "concrete"]], "Hypergeometric terms": [[66, "hypergeometric-terms"]], "Concrete Class Reference": [[66, "concrete-class-reference"]], "Concrete Functions Reference": [[66, "concrete-functions-reference"]], "Core": [[67, "core"]], "sympify": [[67, "module-sympy.core.sympify"]], "assumptions": [[67, "module-sympy.core.assumptions"]], "See Also": [[67, "see-also"], [254, "see-also"]], "Notes": [[67, "notes"], [223, "notes"], [225, "notes"]], "Developers Notes": [[67, "developers-notes"]], "cache": [[67, "module-sympy.core.cache"]], "basic": [[67, "module-sympy.core.basic"]], "singleton": [[67, "module-sympy.core.singleton"]], "expr": [[67, "module-sympy.core.expr"]], "symbol": [[67, "module-sympy.core.symbol"]], "numbers": [[67, "module-sympy.core.numbers"]], "power": [[67, "module-sympy.core.power"]], "mul": [[67, "module-sympy.core.mul"]], "add": [[67, "module-sympy.core.add"]], "mod": [[67, "module-sympy.core.mod"]], "relational": [[67, "module-sympy.core.relational"]], "multidimensional": [[67, "module-sympy.core.multidimensional"]], "function": [[67, "module-sympy.core.function"]], "evalf": [[67, "module-sympy.core.evalf"], [282, "evalf"]], "containers": [[67, "module-sympy.core.containers"]], "exprtools": [[67, "module-sympy.core.exprtools"]], "Sorting": [[67, "sorting"]], "Random": [[67, "module-sympy.core.random"]], "Traversal": [[67, "module-sympy.core.traversal"]], "Cryptography": [[68, "cryptography"]], "Differential Geometry": [[69, "module-sympy.diffgeom"]], "Discrete": [[70, "discrete"]], "Transforms": [[70, "module-sympy.discrete.transforms"]], "Fast Fourier Transform": [[70, "fast-fourier-transform"]], "Number Theoretic Transform": [[70, "number-theoretic-transform"]], "Fast Walsh Hadamard Transform": [[70, "fast-walsh-hadamard-transform"]], "M\u00f6bius Transform": [[70, "mobius-transform"]], "Convolutions": [[70, "module-sympy.discrete.convolutions"]], "Convolution": [[70, "convolution"]], "Convolution using Fast Fourier Transform": [[70, "convolution-using-fast-fourier-transform"]], "Convolution using Number Theoretic Transform": [[70, "convolution-using-number-theoretic-transform"]], "Convolution using Fast Walsh Hadamard Transform": [[70, "convolution-using-fast-walsh-hadamard-transform"]], "Subset Convolution": [[70, "subset-convolution"]], "Covering Product": [[70, "covering-product"]], "Intersecting Product": [[70, "intersecting-product"]], "Numerical Evaluation": [[71, "numerical-evaluation"]], "Basics": [[71, "basics"], [272, "basics"], [273, "basics"]], "Floating-point numbers": [[71, "floating-point-numbers"]], "Accuracy and error handling": [[71, "accuracy-and-error-handling"]], "Sums and integrals": [[71, "sums-and-integrals"]], "Numerical simplification": [[71, "numerical-simplification"]], "Combinatorial": [[72, "combinatorial"]], "Enumeration": [[72, "enumeration"]], "Elementary": [[73, "elementary"]], "Complex Functions": [[73, "complex-functions"]], "Trigonometric": [[73, "trigonometric"]], "Trigonometric Functions": [[73, "trigonometric-functions"]], "Trigonometric Inverses": [[73, "trigonometric-inverses"]], "Hyperbolic": [[73, "hyperbolic"]], "Hyperbolic Functions": [[73, "hyperbolic-functions"]], "Hyperbolic Inverses": [[73, "hyperbolic-inverses"]], "Integer Functions": [[73, "integer-functions"]], "Exponential": [[73, "exponential"]], "Piecewise": [[73, "piecewise"]], "Miscellaneous": [[73, "miscellaneous"], [257, "module-sympy.utilities.misc"]], "Special": [[75, "special"]], "Dirac Delta and Related Discontinuous Functions": [[75, "dirac-delta-and-related-discontinuous-functions"]], "Gamma, Beta and Related Functions": [[75, "module-sympy.functions.special.gamma_functions"]], "Error Functions and Fresnel Integrals": [[75, "module-sympy.functions.special.error_functions"]], "Exponential, Logarithmic and Trigonometric Integrals": [[75, "exponential-logarithmic-and-trigonometric-integrals"]], "Bessel Type Functions": [[75, "module-sympy.functions.special.bessel"]], "Airy Functions": [[75, "airy-functions"]], "B-Splines": [[75, "b-splines"]], "Riemann Zeta and Related Functions": [[75, "module-sympy.functions.special.zeta_functions"]], "Hypergeometric Functions": [[75, "hypergeometric-functions"]], "Elliptic integrals": [[75, "module-sympy.functions.special.elliptic_integrals"]], "Mathieu Functions": [[75, "module-sympy.functions.special.mathieu_functions"]], "Orthogonal Polynomials": [[75, "module-sympy.functions.special.polynomials"]], "Jacobi Polynomials": [[75, "jacobi-polynomials"]], "Gegenbauer Polynomials": [[75, "gegenbauer-polynomials"]], "Chebyshev Polynomials": [[75, "chebyshev-polynomials"]], "Legendre Polynomials": [[75, "legendre-polynomials"]], "Hermite Polynomials": [[75, "hermite-polynomials"]], "Laguerre Polynomials": [[75, "laguerre-polynomials"]], "Spherical Harmonics": [[75, "spherical-harmonics"]], "Tensor Functions": [[75, "tensor-functions"]], "Curves": [[76, "module-sympy.geometry.curve"]], "Ellipses": [[77, "module-sympy.geometry.ellipse"]], "Entities": [[78, "module-sympy.geometry.entity"]], "Geometry": [[79, "geometry"]], "Available Entities": [[79, "available-entities"]], "Example Usage": [[79, "example-usage"]], "Intersection of medians": [[79, "intersection-of-medians"]], "An in-depth example: Pappus\u2019 Hexagon Theorem": [[79, "an-in-depth-example-pappus-hexagon-theorem"]], "Miscellaneous Notes": [[79, "miscellaneous-notes"]], "Future Work": [[79, "future-work"]], "Truth Setting Expressions": [[79, "truth-setting-expressions"]], "Three Dimensions and Beyond": [[79, "three-dimensions-and-beyond"]], "Geometry Visualization": [[79, "geometry-visualization"]], "Submodules": [[79, "submodules"]], "Lines": [[80, "module-sympy.geometry.line"]], "Plane": [[81, "module-sympy.geometry.plane"]], "Points": [[82, "module-sympy.geometry.point"], [265, "points"]], "Polygons": [[83, "module-sympy.geometry.polygon"]], "Utils": [[84, "module-sympy.geometry.util"]], "About Holonomic Functions": [[85, "about-holonomic-functions"]], "Converting other representations to holonomic": [[86, "converting-other-representations-to-holonomic"]], "Converting hypergeometric functions": [[86, "converting-hypergeometric-functions"]], "Converting Meijer G-functions": [[86, "converting-meijer-g-functions"]], "Converting symbolic expressions": [[86, "converting-symbolic-expressions"]], "Holonomic": [[87, "module-sympy.holonomic"]], "Internal API": [[88, "internal-api"]], "Operations on holonomic functions": [[89, "operations-on-holonomic-functions"]], "Addition and Multiplication": [[89, "addition-and-multiplication"]], "Integration and Differentiation": [[89, "integration-and-differentiation"]], "Composition with polynomials": [[89, "composition-with-polynomials"]], "Convert to holonomic sequence": [[89, "convert-to-holonomic-sequence"]], "Series expansion": [[89, "series-expansion"]], "Numerical evaluation": [[89, "numerical-evaluation"]], "Convert to a linear combination of hypergeometric functions": [[89, "convert-to-a-linear-combination-of-hypergeometric-functions"]], "Convert to a linear combination of Meijer G-functions": [[89, "convert-to-a-linear-combination-of-meijer-g-functions"]], "Convert to expressions": [[89, "convert-to-expressions"]], "Representation of holonomic functions in SymPy": [[90, "representation-of-holonomic-functions-in-sympy"]], "Uses and Current limitations": [[91, "uses-and-current-limitations"]], "Integration": [[91, "integration"]], "Computing Integrals using Meijer G-Functions": [[92, "computing-integrals-using-meijer-g-functions"]], "Overview": [[92, "overview"]], "Polar Numbers and Branched Functions": [[92, "polar-numbers-and-branched-functions"]], "Representing Branched Functions on the Argand Plane": [[92, "representing-branched-functions-on-the-argand-plane"]], "Table Lookups and Inverse Mellin Transforms": [[92, "table-lookups-and-inverse-mellin-transforms"]], "Applying the Integral Theorems": [[92, "applying-the-integral-theorems"]], "The G-Function Integration Theorems": [[92, "the-g-function-integration-theorems"]], "Conditions of Convergence for Integral (1)": [[92, "conditions-of-convergence-for-integral-1"]], "Conditions of Convergence for Integral (2)": [[92, "conditions-of-convergence-for-integral-2"]], "The Inverse Laplace Transform of a G-function": [[92, "the-inverse-laplace-transform-of-a-g-function"]], "How to compute the integral": [[92, "how-to-compute-the-integral"]], "When this computation is valid": [[92, "when-this-computation-is-valid"]], "When the integral exists": [[92, "when-the-integral-exists"]], "Implemented G-Function Formulae": [[92, "implemented-g-function-formulae"]], "Internal API Reference": [[92, "module-sympy.integrals.meijerint"]], "Integrals": [[93, "integrals"], [94, "module-sympy.integrals"], [283, "integrals"]], "Integral Transforms": [[94, "module-sympy.integrals.transforms"]], "Internals": [[94, "internals"], [211, "internals"]], "API reference": [[94, "api-reference"], [94, "id39"]], "TODO and Bugs": [[94, "todo-and-bugs"]], "Numeric Integrals": [[94, "numeric-integrals"]], "Integration over Polytopes": [[94, "module-sympy.integrals.intpoly"]], "For 2D Polygons": [[94, "for-2d-polygons"]], "For 3-Polytopes/Polyhedra": [[94, "for-3-polytopes-polyhedra"]], "Interactive": [[95, "module-sympy.interactive"]], "Session": [[95, "module-sympy.interactive.session"]], "Lie Algebra": [[96, "module-sympy.liealgebras"]], "Forming logical expressions": [[97, "forming-logical-expressions"]], "Boolean functions": [[97, "boolean-functions"]], "Simplification and equivalence-testing": [[97, "simplification-and-equivalence-testing"]], "Manipulating expressions": [[97, "manipulating-expressions"]], "Truth tables and related functions": [[97, "truth-tables-and-related-functions"]], "Inference": [[97, "module-sympy.logic.inference"]], "Common Matrices": [[98, "module-sympy.matrices.common"]], "Dense Matrices": [[99, "dense-matrices"]], "Matrix Expressions": [[100, "module-sympy.matrices.expressions"]], "Matrix Expressions Core Reference": [[100, "matrix-expressions-core-reference"]], "Block Matrices": [[100, "block-matrices"]], "Immutable Matrices": [[101, "immutable-matrices"]], "ImmutableMatrix Class Reference": [[101, "module-sympy.matrices.immutable"]], "Matrices": [[102, "module-sympy.matrices"], [120, "module-sympy.physics.matrices"], [272, "matrices"], [276, "matrices"], [289, "matrices"]], "Matrices (linear algebra)": [[103, "module-sympy.matrices.matrices"]], "Creating Matrices": [[103, "creating-matrices"]], "Basic Manipulation": [[103, "basic-manipulation"]], "Operations on entries": [[103, "operations-on-entries"]], "Linear algebra": [[103, "linear-algebra"]], "Reference": [[103, "reference"], [203, "reference"], [209, "reference"], [213, "reference"], [223, "reference"], [223, "id2"], [223, "id4"], [223, "id7"], [223, "id8"]], "Matrix Base Classes": [[103, "matrix-base-classes"]], "Matrix Exceptions": [[103, "matrix-exceptions"]], "Matrix Functions": [[103, "matrix-functions"]], "Rotation matrices": [[103, "rotation-matrices"]], "Numpy Utility Functions": [[103, "numpy-utility-functions"]], "Matrix Normal Forms": [[104, "matrix-normal-forms"]], "Sparse Matrices": [[105, "module-sympy.matrices.sparse"]], "SparseMatrix Class Reference": [[105, "sparsematrix-class-reference"]], "ImmutableSparseMatrix Class Reference": [[105, "immutablesparsematrix-class-reference"]], "Sparse Tools": [[106, "module-sympy.matrices.sparsetools"]], "Ntheory Class Reference": [[107, "ntheory-class-reference"]], "Ntheory Functions Reference": [[107, "ntheory-functions-reference"]], "ECM function": [[107, "ecm-function"]], "QS function": [[107, "qs-function"]], "Numeric Computation": [[108, "numeric-computation"]], "Subs/evalf": [[108, "subs-evalf"]], "Lambdify": [[108, "lambdify"], [255, "module-sympy.utilities.lambdify"]], "uFuncify": [[108, "ufuncify"]], "Aesara": [[108, "aesara"]], "So Which Should I Use?": [[108, "so-which-should-i-use"]], "Parsing Functions Reference": [[109, "parsing-functions-reference"]], "Parsing Transformations Reference": [[109, "parsing-transformations-reference"]], "Experimental \\mathrm{\\LaTeX} Parsing": [[109, "experimental-mathrm-latex-parsing"]], "\\mathrm{\\LaTeX} Parsing Caveats": [[109, "mathrm-latex-parsing-caveats"]], "\\mathrm{\\LaTeX} Parsing Functions Reference": [[109, "mathrm-latex-parsing-functions-reference"]], "\\mathrm{\\LaTeX} Parsing Exceptions Reference": [[109, "mathrm-latex-parsing-exceptions-reference"]], "SymPy Expression Reference": [[109, "module-sympy.parsing.sym_expr"]], "Runtime Installation": [[109, "runtime-installation"]], "Beam (Docstrings)": [[110, "module-sympy.physics.continuum_mechanics.beam"]], "Solving Beam Bending Problems using Singularity Functions": [[111, "solving-beam-bending-problems-using-singularity-functions"]], "Beam": [[111, "beam"], [112, "beam"]], "Example 6": [[111, "example-6"]], "Example 7": [[111, "example-7"]], "Example 8": [[111, "example-8"]], "Example 9": [[111, "example-9"]], "Example 10": [[111, "example-10"]], "Example 11": [[111, "example-11"]], "Continuum Mechanics": [[112, "continuum-mechanics"]], "Abstract": [[112, null], [116, null], [118, null], [141, null], [151, null], [168, null], [198, null]], "Truss": [[112, "truss"]], "Truss (Docstrings)": [[113, "module-sympy.physics.continuum_mechanics.truss"]], "Control": [[114, "control"]], "Control System Plots": [[115, "control-system-plots"]], "Pole-Zero Plot": [[115, "pole-zero-plot"]], "Bode Plot": [[115, "bode-plot"]], "Impulse-Response Plot": [[115, "impulse-response-plot"]], "Step-Response Plot": [[115, "step-response-plot"]], "Ramp-Response Plot": [[115, "ramp-response-plot"]], "Control Module": [[116, "module-sympy.physics.control"]], "Control API": [[117, "control-api"]], "lti": [[117, "module-sympy.physics.control.lti"]], "High energy physics": [[118, "high-energy-physics"]], "Gamma matrices": [[118, "module-sympy.physics.hep.gamma_matrices"]], "Hydrogen Wavefunctions": [[119, "module-sympy.physics.hydrogen"]], "Potential Issues/Advanced Topics/Future Features in Physics/Mechanics": [[121, "potential-issues-advanced-topics-future-features-in-physics-mechanics"]], "Common Issues": [[121, "common-issues"], [190, "common-issues"]], "Numerically Integrating Code": [[121, "numerically-integrating-code"]], "Differentiating": [[121, "differentiating"]], "Choice of Coordinates and Speeds": [[121, "choice-of-coordinates-and-speeds"]], "Substitution": [[121, "substitution"], [190, "substitution"], [282, "substitution"]], "Linearization": [[121, "linearization"]], "Acceleration of Points": [[121, "acceleration-of-points"], [190, "acceleration-of-points"]], "Advanced Interfaces": [[121, "advanced-interfaces"], [190, "advanced-interfaces"]], "Advanced Functionality": [[121, "advanced-functionality"]], "Future Features": [[121, "future-features"]], "Code Output": [[121, "code-output"]], "Body (Docstrings)": [[122, "module-sympy.physics.mechanics.body"]], "Expression Manipulation (Docstrings)": [[123, "expression-manipulation-docstrings"]], "Mechanics API Reference": [[124, "mechanics-api-reference"]], "Joints Framework (Docstrings)": [[125, "joints-framework-docstrings"]], "Joint (Docstrings)": [[125, "module-sympy.physics.mechanics.joint"]], "Kane\u2019s Method & Lagrange\u2019s Method (Docstrings)": [[126, "module-sympy.physics.mechanics.kane"]], "Linearization (Docstrings)": [[127, "module-sympy.physics.mechanics.linearize"]], "Bodies, Inertias, Loads & Other Functions (Docstrings)": [[128, "bodies-inertias-loads-other-functions-docstrings"]], "Bodies": [[128, "bodies"]], "Inertias": [[128, "inertias"]], "Loads": [[128, "loads"], [146, "loads"]], "Other Functions": [[128, "other-functions"]], "Printing (Docstrings)": [[129, "printing-docstrings"], [196, "printing-docstrings"]], "mechanics_printing": [[129, "mechanics-printing"]], "mprint": [[129, "mprint"]], "mpprint": [[129, "mpprint"]], "mlatex": [[129, "mlatex"]], "SymbolicSystem (Docstrings)": [[130, "symbolicsystem-docstrings"]], "Autolev Parser": [[131, "autolev-parser"]], "Usage": [[131, "usage"]], "Gotchas": [[131, "gotchas"], [285, "gotchas"]], "Limitations and Issues": [[131, "limitations-and-issues"]], "Future Improvements": [[131, "future-improvements"]], "1. Completing Dynamics Online": [[131, "completing-dynamics-online"]], "2. Fixing Issues": [[131, "fixing-issues"]], "3. Switching to an AST": [[131, "switching-to-an-ast"]], "Examples for Physics/Mechanics": [[132, "examples-for-physics-mechanics"]], "A bicycle": [[133, "a-bicycle"]], "A four bar linkage": [[134, "a-four-bar-linkage"]], "Nonminimal Coordinates Pendulum": [[135, "nonminimal-coordinates-pendulum"]], "Kane\u2019s Method": [[135, "kane-s-method"]], "Lagrange\u2019s Method": [[135, "lagrange-s-method"]], "Multi Degree of Freedom Holonomic System": [[136, "multi-degree-of-freedom-holonomic-system"]], "A rolling disc": [[137, "a-rolling-disc"]], "A rolling disc, with Kane\u2019s method": [[138, "a-rolling-disc-with-kane-s-method"]], "A rolling disc, with Kane\u2019s method and constraint forces": [[139, "a-rolling-disc-with-kane-s-method-and-constraint-forces"]], "A rolling disc using Lagrange\u2019s Method": [[140, "a-rolling-disc-using-lagrange-s-method"]], "Classical Mechanics": [[141, "classical-mechanics"]], "Vector": [[141, "vector"], [200, "vector"], [269, "vector"]], "Mechanics": [[141, "mechanics"], [236, "module-sympy.stats.rv"]], "Guide to Mechanics": [[141, "guide-to-mechanics"]], "Joints Framework in Physics/Mechanics": [[142, "joints-framework-in-physics-mechanics"]], "Joints in Physics/Mechanics": [[142, "joints-in-physics-mechanics"]], "JointsMethod in Physics/Mechanics": [[142, "jointsmethod-in-physics-mechanics"]], "Kane\u2019s Method in Physics/Mechanics": [[143, "kane-s-method-in-physics-mechanics"], [143, "id2"]], "Structure of Equations": [[143, "structure-of-equations"], [144, "structure-of-equations"]], "Lagrange\u2019s Method in Physics/Mechanics": [[144, "lagrange-s-method-in-physics-mechanics"], [144, "id1"]], "Linearization in Physics/Mechanics": [[145, "linearization-in-physics-mechanics"]], "Background": [[145, "background"]], "A Note on Dependent Coordinates and Speeds": [[145, null]], "Linearizing Kane\u2019s Equations": [[145, "linearizing-kane-s-equations"]], "1. Using the Linearizer class directly:": [[145, "using-the-linearizer-class-directly"], [145, "id2"]], "2. Using the linearize class method:": [[145, "using-the-linearize-class-method"], [145, "id3"]], "What\u2019s with the new_method kwarg?": [[145, null]], "Linearizing Lagrange\u2019s Equations": [[145, "linearizing-lagrange-s-equations"]], "Potential Issues": [[145, "potential-issues"]], "1. Symbolic linearization with A_and_B=True is slow": [[145, "symbolic-linearization-with-a-and-b-true-is-slow"]], "2. The linearized form has nan, zoo, or oo as matrix elements": [[145, "the-linearized-form-has-nan-zoo-or-oo-as-matrix-elements"]], "Further Examples": [[145, "further-examples"]], "Masses, Inertias, Particles and Rigid Bodies in Physics/Mechanics": [[146, "masses-inertias-particles-and-rigid-bodies-in-physics-mechanics"]], "Mass": [[146, "mass"]], "Particle": [[146, "particle"]], "Inertia": [[146, "inertia"]], "Inertia (Dyadics)": [[146, "inertia-dyadics"]], "Rigid Body": [[146, "rigid-body"]], "Linear Momentum": [[146, "linear-momentum"]], "Angular Momentum": [[146, "angular-momentum"]], "Using momenta functions in Mechanics": [[146, "using-momenta-functions-in-mechanics"]], "Kinetic Energy": [[146, "kinetic-energy"]], "Potential Energy": [[146, "potential-energy"]], "Lagrangian": [[146, "lagrangian"]], "Using energy functions in Mechanics": [[146, "using-energy-functions-in-mechanics"]], "References for Physics/Mechanics": [[147, "references-for-physics-mechanics"]], "SymPy Mechanics for Autolev Users": [[148, "sympy-mechanics-for-autolev-users"]], "Some Key Differences": [[148, "some-key-differences"]], "Rough Autolev-SymPy Equivalents": [[148, "rough-autolev-sympy-equivalents"]], "Mathematical Equivalents": [[148, "mathematical-equivalents"]], "Physical Equivalents": [[148, "physical-equivalents"]], "Numerical Evaluation and Visualization": [[148, "numerical-evaluation-and-visualization"]], "Links": [[148, "links"]], "Symbolic Systems in Physics/Mechanics": [[149, "symbolic-systems-in-physics-mechanics"]], "SymbolicSystem Example Usage": [[149, "symbolicsystem-example-usage"]], "Gaussian Optics": [[150, "module-sympy.physics.optics.gaussopt"]], "Optics Module": [[151, "optics-module"]], "Medium": [[152, "module-sympy.physics.optics.medium"]], "Polarization": [[153, "module-sympy.physics.optics.polarization"]], "Waves": [[155, "module-sympy.physics.optics.waves"]], "Pauli Algebra": [[156, "module-sympy.physics.paulialgebra"]], "Quantum Harmonic Oscillator in 1-D": [[157, "module-sympy.physics.qho_1d"]], "Anticommutator": [[158, "module-sympy.physics.quantum.anticommutator"]], "Cartesian Operators and States": [[159, "module-sympy.physics.quantum.cartesian"]], "Clebsch-Gordan Coefficients": [[160, "module-sympy.physics.quantum.cg"]], "Circuit Plot": [[161, "module-sympy.physics.quantum.circuitplot"]], "Commutator": [[162, "module-sympy.physics.quantum.commutator"]], "Constants": [[163, "module-sympy.physics.quantum.constants"], [186, "constants"]], "Dagger": [[164, "module-sympy.physics.quantum.dagger"]], "Gates": [[165, "module-sympy.physics.quantum.gate"]], "Grover\u2019s Algorithm": [[166, "module-sympy.physics.quantum.grover"]], "Hilbert Space": [[167, "module-sympy.physics.quantum.hilbert"]], "Quantum Mechanics": [[168, "quantum-mechanics"]], "Quantum Functions": [[168, "quantum-functions"]], "States and Operators": [[168, "states-and-operators"]], "Quantum Computation": [[168, "quantum-computation"]], "Analytic Solutions": [[168, "analytic-solutions"]], "Inner Product": [[169, "module-sympy.physics.quantum.innerproduct"]], "Operator": [[170, "module-sympy.physics.quantum.operator"]], "Operator/State Helper Functions": [[171, "module-sympy.physics.quantum.operatorset"]], "Particle in a Box": [[172, "module-sympy.physics.quantum.piab"]], "Qapply": [[173, "module-sympy.physics.quantum.qapply"]], "QFT": [[174, "module-sympy.physics.quantum.qft"]], "Qubit": [[175, "module-sympy.physics.quantum.qubit"]], "Represent": [[176, "module-sympy.physics.quantum.represent"]], "Shor\u2019s Algorithm": [[177, "module-sympy.physics.quantum.shor"]], "Spin": [[178, "module-sympy.physics.quantum.spin"]], "State": [[179, "module-sympy.physics.quantum.state"]], "Tensor Product": [[180, "module-sympy.physics.quantum.tensorproduct"]], "Second Quantization": [[181, "module-sympy.physics.secondquant"]], "Quantum Harmonic Oscillator in 3-D": [[182, "module-sympy.physics.sho"]], "Dimensions and dimension systems": [[183, "module-sympy.physics.units.dimensions"]], "More examples": [[184, "more-examples"]], "Dimensional analysis": [[184, "dimensional-analysis"]], "Equation with quantities": [[184, "equation-with-quantities"]], "Unit systems": [[185, "unit-systems"]], "More": [[185, "more"]], "Philosophy behind unit systems": [[186, "philosophy-behind-unit-systems"]], "Dimensions": [[186, "dimensions"]], "Group structure": [[186, "group-structure"]], "Linear space representation": [[186, "linear-space-representation"]], "An example": [[186, "an-example"], [226, "an-example"]], "Quantities": [[186, "quantities"]], "Units": [[186, "units"]], "The need for a reference": [[186, "the-need-for-a-reference"]], "Literature": [[186, "literature"], [210, "literature"], [215, "literature"]], "Unit prefixes": [[187, "module-sympy.physics.units.prefixes"]], "Physical quantities": [[188, "module-sympy.physics.units.quantities"]], "Conversion between quantities": [[188, "module-sympy.physics.units.util"]], "Units and unit systems": [[189, "module-sympy.physics.units.unitsystem"]], "Potential Issues/Advanced Topics/Future Features in Physics/Vector Module": [[190, "potential-issues-advanced-topics-future-features-in-physics-vector-module"]], "Dyadic": [[190, "dyadic"]], "ReferenceFrame": [[190, "referenceframe"]], "dynamicsymbols": [[190, "dynamicsymbols"]], "Essential Classes": [[191, "essential-classes"]], "Docstrings for basic field functions": [[192, "docstrings-for-basic-field-functions"]], "Field operation functions": [[192, "field-operation-functions"]], "Checking the type of vector field": [[192, "checking-the-type-of-vector-field"]], "Essential Functions (Docstrings)": [[193, "essential-functions-docstrings"]], "Physics Vector API": [[194, "physics-vector-api"]], "Kinematics (Docstrings)": [[195, "module-sympy.physics.vector.point"]], "kinematic_equations": [[195, "module-sympy.physics.vector.functions"]], "Scalar and Vector Field Functionality": [[197, "scalar-and-vector-field-functionality"], [268, "scalar-and-vector-field-functionality"]], "Vectors and Scalars": [[197, "vectors-and-scalars"], [270, "vectors-and-scalars"]], "Fields": [[197, "fields"], [270, "fields"]], "Implementation of fields in sympy.physics.vector": [[197, "implementation-of-fields-in-sympy-physics-vector"]], "Field operators and other related functions": [[197, "field-operators-and-other-related-functions"]], "Curl": [[197, "curl"], [268, "curl"]], "Divergence": [[197, "divergence"], [268, "divergence"]], "Gradient": [[197, "gradient"], [268, "gradient"]], "Conservative and Solenoidal fields": [[197, "conservative-and-solenoidal-fields"], [268, "conservative-and-solenoidal-fields"]], "Scalar potential functions": [[197, "scalar-potential-functions"], [268, "scalar-potential-functions"]], "The Physics Vector Module": [[198, "the-physics-vector-module"]], "References for Physics/Vector": [[198, "references-for-physics-vector"]], "Guide to Vector": [[198, "guide-to-vector"], [269, "guide-to-vector"]], "Vector: Kinematics": [[199, "vector-kinematics"]], "Introduction to Kinematics": [[199, "introduction-to-kinematics"]], "Angular Velocity": [[199, "angular-velocity"]], "Angular Acceleration": [[199, "angular-acceleration"]], "Point Velocity & Acceleration": [[199, "point-velocity-acceleration"]], "Kinematics in physics.vector": [[199, "kinematics-in-physics-vector"]], "Vector & ReferenceFrame": [[200, "vector-referenceframe"]], "Vector Algebra": [[200, "vector-algebra"]], "Vector Operations": [[200, "vector-operations"]], "Alternative Representation": [[200, "alternative-representation"]], "Vector Calculus": [[200, "vector-calculus"]], "Derivatives of Vectors": [[200, "derivatives-of-vectors"]], "Relating Sets of Basis Vectors": [[200, "relating-sets-of-basis-vectors"]], "Derivatives with Multiple Frames": [[200, "derivatives-with-multiple-frames"]], "Using Vectors and Reference Frames": [[200, "using-vectors-and-reference-frames"]], "Vector Algebra, in physics.vector": [[200, "vector-algebra-in-physics-vector"]], "Vector Calculus, in physics.vector": [[200, "vector-calculus-in-physics-vector"]], "How Vectors are Coded": [[200, "how-vectors-are-coded"]], "Wigner Symbols": [[201, "module-sympy.physics.wigner"]], "Credits and Copyright": [[201, "credits-and-copyright"]], "Authors": [[201, "authors"]], "Plot Class": [[202, "plot-class"]], "Plotting Function Reference": [[202, "plotting-function-reference"]], "PlotGrid Class": [[202, "plotgrid-class"]], "Series Classes": [[202, "series-classes"]], "Backends": [[202, "backends"]], "Pyglet Plotting": [[202, "module-sympy.plotting.pygletplot"]], "Plot Window Controls": [[202, "plot-window-controls"]], "Coordinate Modes": [[202, "coordinate-modes"]], "Specifying Intervals for Variables": [[202, "specifying-intervals-for-variables"]], "Using the Interactive Interface": [[202, "using-the-interactive-interface"]], "Using Custom Color Functions": [[202, "using-custom-color-functions"]], "Plotting Geometric Entities": [[202, "plotting-geometric-entities"]], "Plotting with ASCII art": [[202, "plotting-with-ascii-art"]], "AGCA - Algebraic Geometry and Commutative Algebra Module": [[203, "agca-algebraic-geometry-and-commutative-algebra-module"]], "Base Rings": [[203, "base-rings"]], "Modules, Ideals and their Elementary Properties": [[203, "modules-ideals-and-their-elementary-properties"]], "Module Homomorphisms and Syzygies": [[203, "module-homomorphisms-and-syzygies"]], "Finite Extensions": [[203, "finite-extensions"]], "Basic functionality of the module": [[204, "basic-functionality-of-the-module"]], "Basic concepts": [[204, "basic-concepts"]], "Polynomials": [[204, "polynomials"]], "Divisibility": [[204, "divisibility"]], "Integral domains": [[204, "integral-domains"]], "Factorial domains": [[204, "factorial-domains"]], "Euclidean domains": [[204, "euclidean-domains"]], "Divisibility of polynomials": [[204, "divisibility-of-polynomials"]], "Basic functionality": [[204, "basic-functionality"]], "Division": [[204, "division"]], "GCD and LCM": [[204, "gcd-and-lcm"]], "Square-free factorization": [[204, "square-free-factorization"]], "Factorization": [[204, "factorization"]], "Groebner bases": [[204, "groebner-bases"]], "Solving Equations": [[204, "solving-equations"]], "Introducing the domainmatrix of the poly module": [[205, "introducing-the-domainmatrix-of-the-poly-module"]], "What is domainmatrix?": [[205, "what-is-domainmatrix"]], "Introducing the Domains of the poly module": [[206, "introducing-the-domains-of-the-poly-module"]], "What are the domains?": [[206, "what-are-the-domains"]], "Representing expressions symbolically": [[206, "representing-expressions-symbolically"]], "Tree representation": [[206, "tree-representation"]], "DUP representation": [[206, "dup-representation"]], "DMP representation": [[206, "dmp-representation"]], "Sparse polynomial representation": [[206, "sparse-polynomial-representation"]], "Basic usage of domains": [[206, "basic-usage-of-domains"]], "Domain elements vs sympy expressions": [[206, "domain-elements-vs-sympy-expressions"]], "Gaussian integers and Gaussian rationals": [[206, "gaussian-integers-and-gaussian-rationals"]], "Finite fields": [[206, "finite-fields"]], "Real and complex fields": [[206, "real-and-complex-fields"]], "Algebraic number fields": [[206, "algebraic-number-fields"], [211, "algebraic-number-fields"]], "Polynomial ring domains": [[206, "polynomial-ring-domains"]], "Old (dense) polynomial rings": [[206, "old-dense-polynomial-rings"]], "PolyRing vs PolynomialRing": [[206, "polyring-vs-polynomialring"]], "Rational function fields": [[206, "rational-function-fields"]], "Expression domain": [[206, "expression-domain"]], "Choosing a domain": [[206, "choosing-a-domain"]], "Converting elements between different domains": [[206, "converting-elements-between-different-domains"]], "Unifying domains": [[206, "unifying-domains"]], "Internals of a Poly": [[206, "internals-of-a-poly"]], "Choosing a domain for a Poly": [[206, "choosing-a-domain-for-a-poly"]], "Choosing generators": [[206, "choosing-generators"]], "Algebraically dependent generators": [[206, "algebraically-dependent-generators"]], "Reference docs for the Poly Domains": [[207, "reference-docs-for-the-poly-domains"]], "Domains": [[207, "domains"]], "Abstract Domains": [[207, "abstract-domains"]], "GF(p)": [[207, "gf-p"]], "ZZ": [[207, "zz"]], "QQ": [[207, "qq"]], "MPQ": [[207, "mpq"]], "Gaussian domains": [[207, "gaussian-domains"]], "ZZ_I": [[207, "zz-i"]], "QQ_I": [[207, "qq-i"]], "QQ<a>": [[207, "qq-a"]], "RR": [[207, "rr"]], "CC": [[207, "cc"]], "K[x]": [[207, "k-x"]], "K(x)": [[207, "id11"]], "EX": [[207, "ex"]], "Quotient ring": [[207, "quotient-ring"]], "Sparse polynomials": [[207, "sparse-polynomials"]], "Sparse rational functions": [[207, "sparse-rational-functions"]], "Dense polynomials": [[207, "dense-polynomials"]], "Polynomial Manipulation": [[208, "polynomial-manipulation"]], "Internals of the Polynomial Manipulation Module": [[209, "internals-of-the-polynomial-manipulation-module"]], "Level Zero": [[209, "level-zero"]], "Manipulation of dense, multivariate polynomials": [[209, "manipulation-of-dense-multivariate-polynomials"]], "Manipulation of dense, univariate polynomials with finite field coefficients": [[209, "manipulation-of-dense-univariate-polynomials-with-finite-field-coefficients"]], "Manipulation of sparse, distributed polynomials and vectors": [[209, "manipulation-of-sparse-distributed-polynomials-and-vectors"]], "Polynomial factorization algorithms": [[209, "polynomial-factorization-algorithms"]], "Classical remainder sequence": [[209, "classical-remainder-sequence"]], "Simplified remainder sequences": [[209, "simplified-remainder-sequences"]], "Subresultant sequence": [[209, "subresultant-sequence"]], "Groebner basis algorithms": [[209, "groebner-basis-algorithms"]], "Options": [[209, "module-sympy.polys.polyoptions"]], "Configuration": [[209, "module-sympy.polys.polyconfig"]], "Exceptions": [[209, "exceptions"]], "Modular GCD": [[209, "modular-gcd"]], "Undocumented": [[209, "undocumented"]], "Number Fields": [[211, "number-fields"]], "Solving the Main Problems": [[211, "solving-the-main-problems"]], "Integral Basis": [[211, "integral-basis"]], "Prime Decomposition": [[211, "prime-decomposition"]], "p-adic Valuation": [[211, "p-adic-valuation"]], "Finding Minimal Polynomials": [[211, "finding-minimal-polynomials"]], "The Subfield Problem": [[211, "the-subfield-problem"]], "Representing algebraic numbers": [[211, "representing-algebraic-numbers"]], "As number field elements": [[211, "as-number-field-elements"]], "As elements of finitely-generated modules": [[211, "as-elements-of-finitely-generated-modules"]], "Finitely-generated modules": [[211, "module-sympy.polys.numberfields.modules"]], "Arithmetic with module elements": [[211, "arithmetic-with-module-elements"]], "Multiplication": [[211, "multiplication"]], "Module Homomorphisms": [[211, "module-homomorphisms"]], "Class Reference": [[211, "class-reference"]], "Polynomials Manipulation Module Reference": [[212, "module-sympy.polys"]], "Basic polynomial manipulation functions": [[212, "basic-polynomial-manipulation-functions"]], "Extra polynomial manipulation functions": [[212, "extra-polynomial-manipulation-functions"]], "Domain constructors": [[212, "domain-constructors"]], "Monomials encoded as tuples": [[212, "monomials-encoded-as-tuples"]], "Orderings of monomials": [[212, "orderings-of-monomials"]], "Formal manipulation of roots of polynomials": [[212, "formal-manipulation-of-roots-of-polynomials"]], "Symbolic root-finding algorithms": [[212, "symbolic-root-finding-algorithms"]], "Special polynomials": [[212, "special-polynomials"]], "Orthogonal polynomials": [[212, "orthogonal-polynomials"]], "Appell sequences": [[212, "appell-sequences"]], "Manipulation of rational functions": [[212, "manipulation-of-rational-functions"]], "Partial fraction decomposition": [[212, "partial-fraction-decomposition"], [215, "partial-fraction-decomposition"]], "Dispersion of Polynomials": [[212, "dispersion-of-polynomials"]], "Series Manipulation using Polynomials": [[213, "series-manipulation-using-polynomials"]], "rs_series": [[213, "rs-series"]], "Contribute": [[213, "contribute"]], "Poly solvers": [[214, "poly-solvers"]], "Examples from Wester\u2019s Article": [[215, "examples-from-wester-s-article"]], "Simple univariate polynomial factorization": [[215, "simple-univariate-polynomial-factorization"]], "Univariate GCD, resultant and factorization": [[215, "univariate-gcd-resultant-and-factorization"]], "Multivariate GCD and factorization": [[215, "multivariate-gcd-and-factorization"]], "Support for symbols in exponents": [[215, "support-for-symbols-in-exponents"]], "Testing if polynomials have common zeros": [[215, "testing-if-polynomials-have-common-zeros"]], "Normalizing simple rational functions": [[215, "normalizing-simple-rational-functions"]], "Expanding expressions and factoring back": [[215, "expanding-expressions-and-factoring-back"]], "Factoring in terms of cyclotomic polynomials": [[215, "factoring-in-terms-of-cyclotomic-polynomials"]], "Univariate factoring over Gaussian numbers": [[215, "univariate-factoring-over-gaussian-numbers"]], "Computing with automatic field extensions": [[215, "computing-with-automatic-field-extensions"]], "Univariate factoring over various domains": [[215, "univariate-factoring-over-various-domains"]], "Factoring polynomials into linear factors": [[215, "factoring-polynomials-into-linear-factors"]], "Advanced factoring over finite fields": [[215, "advanced-factoring-over-finite-fields"]], "Working with expressions as polynomials": [[215, "working-with-expressions-as-polynomials"]], "Computing reduced Gr\u00f6bner bases": [[215, "computing-reduced-grobner-bases"]], "Multivariate factoring over algebraic numbers": [[215, "multivariate-factoring-over-algebraic-numbers"]], "Printer Class": [[216, "module-sympy.printing.printer"]], "Which Method is Responsible for Printing?": [[216, "which-method-is-responsible-for-printing"]], "Example of Custom Printer": [[216, "example-of-custom-printer"]], "Example of Custom Printing Method": [[216, "example-of-custom-printing-method"]], "Common mistakes": [[216, "common-mistakes"]], "PrettyPrinter Class": [[216, "prettyprinter-class"]], "C code printers": [[216, "module-sympy.printing.c"]], "C++ code printers": [[216, "module-sympy.printing.cxx"]], "RCodePrinter": [[216, "module-sympy.printing.rcode"]], "Fortran Printing": [[216, "fortran-printing"]], "SMT-Lib printing": [[216, "module-sympy.printing.smtlib"]], "Mathematica code printing": [[216, "module-sympy.printing.mathematica"]], "Maple code printing": [[216, "module-sympy.printing.maple"]], "Javascript Code printing": [[216, "module-sympy.printing.jscode"]], "Julia code printing": [[216, "module-sympy.printing.julia"]], "Octave (and Matlab) Code printing": [[216, "module-sympy.printing.octave"]], "Rust code printing": [[216, "module-sympy.printing.rust"]], "Aesara Code printing": [[216, "module-sympy.printing.aesaracode"]], "Gtk": [[216, "module-sympy.printing.gtk"]], "LambdaPrinter": [[216, "module-sympy.printing.lambdarepr"]], "LatexPrinter": [[216, "module-sympy.printing.latex"]], "MathMLPrinter": [[216, "module-sympy.printing.mathml"]], "PythonCodePrinter": [[216, "module-sympy.printing.pycode"]], "PythonPrinter": [[216, "module-sympy.printing.python"]], "srepr": [[216, "module-sympy.printing.repr"], [292, "srepr"]], "StrPrinter": [[216, "module-sympy.printing.str"]], "Tree Printing": [[216, "module-sympy.printing.tree"]], "Preview": [[216, "preview"]], "Implementation - Helper Classes/Functions": [[216, "module-sympy.printing.conventions"]], "CodePrinter": [[216, "module-sympy.printing.codeprinter"]], "Precedence": [[216, "module-sympy.printing.precedence"]], "Pretty-Printing Implementation Helpers": [[216, "module-sympy.printing.pretty.pretty_symbology"]], "dotprint": [[216, "dotprint"]], "Term Rewriting": [[217, "term-rewriting"]], "Expanding": [[217, "expanding"]], "Common Subexpression Detection and Collection": [[217, "common-subexpression-detection-and-collection"]], "Formal Power Series": [[218, "formal-power-series"]], "Rational Algorithm": [[218, "rational-algorithm"]], "Hypergeometric Algorithm": [[218, "hypergeometric-algorithm"]], "Fourier Series": [[219, "fourier-series"]], "Series": [[220, "series"]], "Limits of Sequences": [[221, "limits-of-sequences"]], "Sequences": [[222, "sequences"]], "Sequences Base": [[222, "sequences-base"]], "Elementary Sequences": [[222, "elementary-sequences"]], "Singleton Sequences": [[222, "singleton-sequences"]], "Compound Sequences": [[222, "compound-sequences"]], "Recursive Sequences": [[222, "recursive-sequences"]], "Series Expansions": [[223, "series-expansions"]], "Limits": [[223, "limits"], [283, "limits"]], "The Gruntz Algorithm": [[223, "the-gruntz-algorithm"]], "More Intuitive Series Expansion": [[223, "more-intuitive-series-expansion"]], "Order Terms": [[223, "order-terms"]], "Series Acceleration": [[223, "series-acceleration"]], "Residues": [[223, "residues"]], "Basic Sets": [[224, "module-sympy.sets.sets"]], "Elementary Sets": [[224, "elementary-sets"]], "Compound Sets": [[224, "compound-sets"]], "Singleton Sets": [[224, "singleton-sets"]], "Special Sets": [[224, "module-sympy.sets.fancysets"]], "Power sets": [[224, "module-sympy.sets.powerset"]], "Condition Sets": [[224, "module-sympy.sets.conditionset"]], "SetKind": [[224, "setkind"]], "Iteration over sets": [[224, "iteration-over-sets"]], "Hongguang Fu\u2019s Trigonometric Simplification": [[225, "hongguang-fu-s-trigonometric-simplification"]], "Rules": [[225, "rules"]], "Hypergeometric Expansion": [[226, "hypergeometric-expansion"]], "Hypergeometric Function Expansion Algorithm": [[226, "hypergeometric-function-expansion-algorithm"]], "Notation": [[226, "notation"]], "Incrementing and decrementing indices": [[226, "incrementing-and-decrementing-indices"]], "Reduction of Order": [[226, "reduction-of-order"]], "Moving Around in the Parameter Space": [[226, "moving-around-in-the-parameter-space"]], "Applying the Operators": [[226, "applying-the-operators"]], "Loose Ends": [[226, "loose-ends"]], "Meijer G-Functions of Finite Confluence": [[226, "meijer-g-functions-of-finite-confluence"]], "Extending The Hypergeometric Tables": [[226, "extending-the-hypergeometric-tables"]], "Implemented Hypergeometric Formulae": [[226, "implemented-hypergeometric-formulae"]], "Simplify": [[227, "simplify"], [228, "simplify"]], "Diophantine": [[229, "diophantine"]], "Diophantine equations": [[229, "diophantine-equations"]], "Module structure": [[229, "module-structure"]], "Tutorial": [[229, "tutorial"]], "User Functions": [[229, "user-functions"], [232, "user-functions"], [233, "user-functions"]], "Internal Functions": [[229, "internal-functions"]], "Internal Classes": [[229, "internal-classes"]], "Solvers": [[230, "solvers"], [234, "module-sympy.solvers"], [294, "solvers"]], "Inequality Solvers": [[231, "inequality-solvers"]], "ODE": [[232, "ode"]], "Hint Functions": [[232, "hint-functions"]], "Lie heuristics": [[232, "lie-heuristics"]], "Rational Riccati Solver": [[232, "rational-riccati-solver"]], "System of ODEs": [[232, "system-of-odes"]], "Information on the ode module": [[232, "module-sympy.solvers.ode.ode"]], "PDE": [[233, "pde"]], "Hint Methods": [[233, "hint-methods"]], "Information on the pde module": [[233, "module-sympy.solvers.pde"]], "Algebraic equations": [[234, "algebraic-equations"]], "Ordinary Differential equations (ODEs)": [[234, "ordinary-differential-equations-odes"], [235, "ordinary-differential-equations-odes"]], "Partial Differential Equations (PDEs)": [[234, "partial-differential-equations-pdes"], [235, "partial-differential-equations-pdes"]], "Deutils (Utilities for solving ODE\u2019s and PDE\u2019s)": [[234, "deutils-utilities-for-solving-ode-s-and-pde-s"]], "Recurrence Equations": [[234, "module-sympy.solvers.recurr"]], "Systems of Polynomial Equations": [[234, "systems-of-polynomial-equations"]], "Diophantine Equations (DEs)": [[234, "diophantine-equations-des"], [235, "diophantine-equations-des"]], "Inequalities": [[234, "inequalities"], [235, "inequalities"]], "Solveset": [[235, "solveset"]], "What\u2019s wrong with solve():": [[235, "what-s-wrong-with-solve"]], "Why Solveset?": [[235, "why-solveset"]], "Why do we use Sets as an output type?": [[235, "why-do-we-use-sets-as-an-output-type"]], "Input API of solveset": [[235, "input-api-of-solveset"]], "What is this domain argument about?": [[235, "what-is-this-domain-argument-about"]], "What are the general methods employed by solveset to solve an equation?": [[235, "what-are-the-general-methods-employed-by-solveset-to-solve-an-equation"]], "How do we manipulate and return an infinite solution?": [[235, "how-do-we-manipulate-and-return-an-infinite-solution"]], "How does solveset ensure that it is not returning any wrong solution?": [[235, "how-does-solveset-ensure-that-it-is-not-returning-any-wrong-solution"]], "Search based solver and step-by-step solution": [[235, "search-based-solver-and-step-by-step-solution"]], "How do we deal with cases where only some of the solutions are known?": [[235, "how-do-we-deal-with-cases-where-only-some-of-the-solutions-are-known"]], "What is the plan for solve and solveset?": [[235, "what-is-the-plan-for-solve-and-solveset"]], "How are symbolic parameters handled in solveset?": [[235, "how-are-symbolic-parameters-handled-in-solveset"]], "Solveset Module Reference": [[235, "solveset-module-reference"]], "transolve": [[235, "transolve"]], "Stats": [[236, "module-sympy.stats"]], "Random Variable Types": [[236, "random-variable-types"]], "Finite Types": [[236, "finite-types"]], "Discrete Types": [[236, "discrete-types"]], "Continuous Types": [[236, "continuous-types"]], "Joint Types": [[236, "joint-types"]], "Stochastic Processes": [[236, "stochastic-processes"]], "Matrix Distributions": [[236, "matrix-distributions"]], "Compound Distribution": [[236, "compound-distribution"]], "Interface": [[236, "interface"]], "N-dim array": [[237, "module-sympy.tensor.array"]], "Products and contractions": [[237, "products-and-contractions"]], "Diagonal operator": [[237, "diagonal-operator"]], "Derivatives by array": [[237, "derivatives-by-array"]], "Classes": [[237, "classes"]], "N-dim array expressions": [[238, "module-sympy.tensor.array.expressions"]], "Constructing array expressions from index-explicit forms": [[238, "constructing-array-expressions-from-index-explicit-forms"]], "Compatibility with matrices": [[238, "compatibility-with-matrices"]], "Tensor": [[239, "module-sympy.tensor"], [242, "module-sympy.tensor.tensor"]], "Methods": [[240, "module-sympy.tensor.index_methods"]], "Indexed Objects": [[241, "module-sympy.tensor.indexed"]], "Tensor Operators": [[243, "module-sympy.tensor.toperators"]], "Testing": [[244, "testing"]], "pytest": [[245, "module-sympy.testing.pytest"]], "Randomised Testing": [[246, "module-sympy.testing.randtest"]], "Run Tests": [[247, "module-sympy.testing.runtests"]], "Autowrap Module": [[248, "autowrap-module"]], "Implementation details": [[248, "implementation-details"]], "Codegen": [[249, "codegen"]], "Implementation Details": [[249, "implementation-details"]], "Routine": [[249, "routine"]], "Decorator": [[250, "module-sympy.utilities.decorator"]], "Enumerative": [[251, "module-sympy.utilities.enumerative"]], "Exceptions and Warnings": [[252, "module-sympy.utilities.exceptions"]], "Iterables": [[254, "module-sympy.utilities.iterables"]], "variations": [[254, "variations"]], "partitions": [[254, "partitions"]], "Memoization": [[256, "module-sympy.utilities.memoization"]], "PKGDATA": [[258, "module-sympy.utilities.pkgdata"]], "Source Code Inspection": [[259, "module-sympy.utilities.source"]], "Timing Utilities": [[260, "module-sympy.utilities.timeutils"]], "Essential Classes in sympy.vector (docstrings)": [[261, "essential-classes-in-sympy-vector-docstrings"]], "Vector API": [[262, "vector-api"]], "Orienter classes (docstrings)": [[263, "orienter-classes-docstrings"]], "Essential Functions in sympy.vector (docstrings)": [[264, "essential-functions-in-sympy-vector-docstrings"]], "Basic Implementation details": [[265, "basic-implementation-details"]], "Coordinate Systems and Vectors": [[265, "coordinate-systems-and-vectors"]], "SymPy operations on Vectors": [[265, "sympy-operations-on-vectors"]], "Dyadics": [[265, "dyadics"]], "More about Coordinate Systems": [[266, "more-about-coordinate-systems"]], "Locating new systems": [[266, "locating-new-systems"]], "Orienting new systems": [[266, "orienting-new-systems"]], "Using a method of CoordSys3D directly": [[266, "using-a-method-of-coordsys3d-directly"]], "Using Orienter(s) and the orient_new method": [[266, "using-orienter-s-and-the-orient-new-method"]], "Orienting AND Locating new systems": [[266, "orienting-and-locating-new-systems"]], "Transforming new system": [[266, "transforming-new-system"]], "Expression of quantities in different coordinate systems": [[266, "expression-of-quantities-in-different-coordinate-systems"]], "Vectors and Dyadics": [[266, "vectors-and-dyadics"]], "Coordinate Variables": [[266, "coordinate-variables"]], "Other expression-dependent methods": [[266, "other-expression-dependent-methods"]], "General examples of usage": [[267, "general-examples-of-usage"]], "Quadrilateral problem": [[267, "quadrilateral-problem"]], "The Problem": [[267, "the-problem"], [267, "id1"]], "Solution": [[267, "solution"], [267, "id2"]], "Third product rule for Del operator": [[267, "third-product-rule-for-del-operator"]], "See": [[267, "see"]], "Implementation in sympy.vector": [[268, "implementation-in-sympy-vector"]], "Scalar and vector fields": [[268, "scalar-and-vector-fields"]], "The Del operator": [[268, "the-del-operator"]], "Field operators and related functions": [[268, "field-operators-and-related-functions"]], "Directional Derivative": [[268, "directional-derivative"]], "Field operator in orthogonal curvilinear coordinate system": [[268, "field-operator-in-orthogonal-curvilinear-coordinate-system"]], "References for Vector": [[269, "references-for-vector"]], "Coordinate Systems": [[270, "coordinate-systems"]], "Applications of Vector Integrals": [[271, "applications-of-vector-integrals"]], "Calculation of Perimeter, Surface Area, and Volume": [[271, "calculation-of-perimeter-surface-area-and-volume"]], "Calculation of mass of a body": [[271, "calculation-of-mass-of-a-body"]], "Calculation of Flux": [[271, "calculation-of-flux"]], "Verifying Stoke\u2019s Theorem": [[271, "verifying-stoke-s-theorem"]], "Verifying Divergence Theorem": [[271, "verifying-divergence-theorem"]], "Topics": [[272, "topics"], [279, "topics"]], "Introductory Tutorial": [[281, "introductory-tutorial"], [286, "introductory-tutorial"]], "Basic Operations": [[282, "basic-operations"], [289, "basic-operations"]], "Quick Tip": [[282, null], [283, null], [285, null], [288, null], [289, null]], "Converting Strings to SymPy Expressions": [[282, "converting-strings-to-sympy-expressions"]], "Derivatives": [[283, "derivatives"]], "Series Expansion": [[283, "series-expansion"]], "Finite differences": [[283, "finite-differences"]], "SymPy Features": [[284, "sympy-features"]], "Equals signs": [[285, "equals-signs"]], "Two Final Notes: ^ and /": [[285, "two-final-notes-and"]], "Further Reading": [[285, "further-reading"]], "What is Symbolic Computation?": [[287, "what-is-symbolic-computation"]], "A More Interesting Example": [[287, "a-more-interesting-example"]], "The Power of Symbolic Computation": [[287, "the-power-of-symbolic-computation"]], "Why SymPy?": [[287, "why-sympy"]], "Advanced Expression Manipulation": [[288, "advanced-expression-manipulation"]], "Understanding Expression Trees": [[288, "understanding-expression-trees"]], "Recursing through an Expression Tree": [[288, "recursing-through-an-expression-tree"]], "args": [[288, "args"]], "Key Invariant": [[288, null]], "Walking the Tree": [[288, "walking-the-tree"]], "Prevent expression evaluation": [[288, "prevent-expression-evaluation"]], "Shape": [[289, "shape"]], "Accessing Rows and Columns": [[289, "accessing-rows-and-columns"]], "Deleting and Inserting Rows and Columns": [[289, "deleting-and-inserting-rows-and-columns"]], "Basic Methods": [[289, "basic-methods"]], "Matrix Constructors": [[289, "matrix-constructors"]], "Advanced Methods": [[289, "advanced-methods"]], "Determinant": [[289, "determinant"]], "RREF": [[289, "rref"]], "Nullspace": [[289, "nullspace"]], "Columnspace": [[289, "columnspace"]], "Eigenvalues, Eigenvectors, and Diagonalization": [[289, "eigenvalues-eigenvectors-and-diagonalization"]], "Possible Issues": [[289, "possible-issues"]], "Zero Testing": [[289, "zero-testing"]], "What\u2019s Next": [[290, "whats-next"]], "Preliminaries": [[291, "preliminaries"]], "Exercises": [[291, "exercises"]], "Printers": [[292, "printers"]], "Setting up Pretty Printing": [[292, "setting-up-pretty-printing"]], "Printing Functions": [[292, "printing-functions"]], "str": [[292, "str"]], "ASCII Pretty Printer": [[292, "ascii-pretty-printer"]], "Unicode Pretty Printer": [[292, "unicode-pretty-printer"]], "\\mathrm{\\LaTeX}": [[292, "mathrm-latex"]], "MathML": [[292, "mathml"]], "Dot": [[292, "dot"]], "Simplification": [[293, "simplification"]], "simplify": [[293, "simplify"]], "Polynomial/Rational Function Simplification": [[293, "polynomial-rational-function-simplification"]], "expand": [[293, "expand"]], "factor": [[293, "factor"]], "collect": [[293, "collect"]], "cancel": [[293, "cancel"]], "apart": [[293, "apart"]], "Trigonometric Simplification": [[293, "trigonometric-simplification"]], "trigsimp": [[293, "trigsimp"]], "expand_trig": [[293, "expand-trig"]], "Powers": [[293, "powers"]], "powsimp": [[293, "powsimp"]], "expand_power_exp / expand_power_base": [[293, "expand-power-exp-expand-power-base"]], "powdenest": [[293, "powdenest"]], "Exponentials and logarithms": [[293, "exponentials-and-logarithms"]], "expand_log": [[293, "expand-log"]], "logcombine": [[293, "logcombine"]], "Special Functions": [[293, "special-functions"]], "rewrite": [[293, "rewrite"]], "expand_func": [[293, "expand-func"]], "hyperexpand": [[293, "hyperexpand"]], "combsimp": [[293, "combsimp"]], "gammasimp": [[293, "gammasimp"]], "Example: Continued Fractions": [[293, "example-continued-fractions"]], "A Note about Equations": [[294, "a-note-about-equations"]], "Solving Equations Algebraically": [[294, "solving-equations-algebraically"]], "Solving Differential Equations": [[294, "solving-differential-equations"]]}, "indexentries": {"antiderivative": [[14, "term-Antiderivative"]], "assumptions": [[14, "term-Assumptions"]], "atom": [[14, "term-Atom"]], "automatic simplification": [[14, "term-Automatic-Simplification"]], "basic": [[14, "term-Basic"]], "boolean": [[14, "term-Boolean"]], "bound symbols": [[14, "term-Bound-symbols"]], "canonical form": [[14, "term-Canonical-Form"]], "canonicalize": [[14, "term-Canonicalize"]], "code generation": [[14, "term-Code-Generation"]], "core": [[14, "term-Core"]], "dummy": [[14, "term-Dummy"]], "equation": [[14, "term-Equation"]], "evaluate": [[14, "term-Evaluate"]], "expr": [[14, "term-Expr"]], "expression": [[14, "term-Expression"]], "expression tree": [[14, "term-Expression-Tree"]], "free symbols": [[14, "term-Free-symbols"]], "function": [[14, "term-Function"]], "function (class)": [[14, "term-Function-class"]], "immutable": [[14, "term-Immutable"]], "interactive": [[14, "term-Interactive"]], "kind": [[14, "term-Kind"]], "matrix": [[14, "term-Matrix"]], "number": [[14, "term-Number"]], "numeric": [[14, "term-Numeric"]], "polys": [[14, "term-Polys"]], "printing": [[14, "term-Printing"]], "relational": [[14, "term-Relational"]], "s": [[14, "term-S"]], "simplification": [[14, "term-Simplification"]], "solve": [[14, "term-Solve"]], "solvers": [[14, "term-Solvers"]], "structural equality": [[14, "term-Structural-Equality"]], "subexpression": [[14, "term-Subexpression"]], "substitution": [[14, "term-Substitution"]], "symbol": [[14, "term-Symbol"]], "symbolic": [[14, "term-Symbolic"]], "three-valued logic": [[14, "term-Three-valued-logic"]], "undefined function": [[14, "term-Undefined-Function"]], "unevaluated": [[14, "term-Unevaluated"]], "_eval_*": [[14, "term-_eval_"]], "args": [[14, "term-args"]], "evalf": [[14, "term-evalf"]], "func": [[14, "term-func"]], "is_*": [[14, "term-is_"]], "isympy": [[14, "term-isympy"]], "lambdify()": [[14, "term-lambdify"]], "lamda": [[14, "term-lamda"]], "mpmath": [[14, "term-mpmath"]], "oo": [[14, "term-oo"]], "sympify()": [[14, "term-sympify"]], "zoo": [[14, "term-zoo"]], "module": [[15, "module-sympy.simplify.simplify"], [37, "module-sympy"], [39, "module-sympy.abc"], [40, "module-sympy.algebras"], [41, "module-sympy.assumptions.ask"], [42, "module-sympy.assumptions.assume"], [43, "module-sympy.assumptions"], [44, "module-sympy.assumptions.predicates"], [45, "module-sympy.assumptions.refine"], [46, "module-sympy.calculus"], [46, "module-sympy.calculus.euler"], [46, "module-sympy.calculus.finite_diff"], [46, "module-sympy.calculus.singularities"], [46, "module-sympy.calculus.util"], [47, "module-sympy.categories"], [47, "module-sympy.categories.diagram_drawing"], [48, "module-sympy.codegen.algorithms"], [48, "module-sympy.codegen.approximations"], [48, "module-sympy.codegen.ast"], [48, "module-sympy.codegen.cfunctions"], [48, "module-sympy.codegen.cnodes"], [48, "module-sympy.codegen.cutils"], [48, "module-sympy.codegen.cxxnodes"], [48, "module-sympy.codegen.fnodes"], [48, "module-sympy.codegen.futils"], [48, "module-sympy.codegen.matrix_nodes"], [48, "module-sympy.codegen.pyutils"], [48, "module-sympy.codegen.rewriting"], [50, "module-sympy.combinatorics.galois"], [51, "module-sympy.combinatorics.graycode"], [52, "module-sympy.combinatorics.group_constructs"], [53, "module-sympy.combinatorics.group_numbers"], [55, "module-sympy.combinatorics.named_groups"], [56, "module-sympy.combinatorics.partitions"], [58, "module-sympy.combinatorics.perm_groups"], [59, "module-sympy.combinatorics.generators"], [59, "module-sympy.combinatorics.permutations"], [60, "module-sympy.combinatorics.polyhedron"], [61, "module-sympy.combinatorics.prufer"], [62, "module-sympy.combinatorics.subsets"], [63, "module-sympy.combinatorics.tensor_can"], [64, "module-sympy.combinatorics.testutil"], [65, "module-sympy.combinatorics.util"], [67, "module-sympy.core.add"], [67, "module-sympy.core.assumptions"], [67, "module-sympy.core.basic"], [67, "module-sympy.core.cache"], [67, "module-sympy.core.containers"], [67, "module-sympy.core.evalf"], [67, "module-sympy.core.expr"], [67, "module-sympy.core.exprtools"], [67, "module-sympy.core.function"], [67, "module-sympy.core.kind"], [67, "module-sympy.core.mod"], [67, "module-sympy.core.mul"], [67, "module-sympy.core.multidimensional"], [67, "module-sympy.core.numbers"], [67, "module-sympy.core.power"], [67, "module-sympy.core.random"], [67, "module-sympy.core.relational"], [67, "module-sympy.core.singleton"], [67, "module-sympy.core.symbol"], [67, "module-sympy.core.sympify"], [67, "module-sympy.core.traversal"], [68, "module-sympy.crypto.crypto"], [69, "module-sympy.diffgeom"], [70, "module-sympy.discrete"], [70, "module-sympy.discrete.convolutions"], [70, "module-sympy.discrete.transforms"], [74, "module-sympy.functions"], [75, "module-sympy.functions.special.bessel"], [75, "module-sympy.functions.special.beta_functions"], [75, "module-sympy.functions.special.elliptic_integrals"], [75, "module-sympy.functions.special.error_functions"], [75, "module-sympy.functions.special.gamma_functions"], [75, "module-sympy.functions.special.mathieu_functions"], [75, "module-sympy.functions.special.polynomials"], [75, "module-sympy.functions.special.singularity_functions"], [75, "module-sympy.functions.special.zeta_functions"], [76, "module-sympy.geometry.curve"], [77, "module-sympy.geometry.ellipse"], [78, "module-sympy.geometry.entity"], [80, "module-sympy.geometry.line"], [81, "module-sympy.geometry.plane"], [82, "module-sympy.geometry.point"], [83, "module-sympy.geometry.polygon"], [84, "module-sympy.geometry.util"], [87, "module-sympy.holonomic"], [92, "module-sympy.integrals.meijerint"], [92, "module-sympy.integrals.meijerint_doc"], [94, "module-sympy.integrals"], [94, "module-sympy.integrals.intpoly"], [94, "module-sympy.integrals.transforms"], [95, "module-sympy.interactive"], [95, "module-sympy.interactive.printing"], [95, "module-sympy.interactive.session"], [96, "module-sympy.liealgebras"], [97, "module-sympy.logic"], [97, "module-sympy.logic.inference"], [98, "module-sympy.matrices.common"], [100, "module-sympy.matrices.expressions"], [100, "module-sympy.matrices.expressions.blockmatrix"], [101, "module-sympy.matrices.immutable"], [102, "module-sympy.matrices"], [103, "module-sympy.matrices.matrices"], [105, "module-sympy.matrices.sparse"], [106, "module-sympy.matrices.sparsetools"], [107, "module-sympy.ntheory.bbp_pi"], [107, "module-sympy.ntheory.continued_fraction"], [107, "module-sympy.ntheory.digits"], [107, "module-sympy.ntheory.ecm"], [107, "module-sympy.ntheory.egyptian_fraction"], [107, "module-sympy.ntheory.factor_"], [107, "module-sympy.ntheory.generate"], [107, "module-sympy.ntheory.modular"], [107, "module-sympy.ntheory.multinomial"], [107, "module-sympy.ntheory.partitions_"], [107, "module-sympy.ntheory.primetest"], [107, "module-sympy.ntheory.qs"], [107, "module-sympy.ntheory.residue_ntheory"], [109, "module-sympy.parsing"], [109, "module-sympy.parsing.sym_expr"], [110, "module-sympy.physics.continuum_mechanics.beam"], [113, "module-sympy.physics.continuum_mechanics.truss"], [116, "module-sympy.physics.control"], [117, "module-sympy.physics.control.lti"], [118, "module-sympy.physics.hep.gamma_matrices"], [119, "module-sympy.physics.hydrogen"], [120, "module-sympy.physics.matrices"], [122, "module-sympy.physics.mechanics.body"], [125, "module-sympy.physics.mechanics.joint"], [125, "module-sympy.physics.mechanics.jointsmethod"], [126, "module-sympy.physics.mechanics.kane"], [126, "module-sympy.physics.mechanics.lagrange"], [127, "module-sympy.physics.mechanics.linearize"], [130, "module-sympy.physics.mechanics.system"], [141, "module-sympy.physics.mechanics"], [150, "module-sympy.physics.optics.gaussopt"], [152, "module-sympy.physics.optics.medium"], [153, "module-sympy.physics.optics.polarization"], [154, "module-sympy.physics.optics.utils"], [155, "module-sympy.physics.optics.waves"], [156, "module-sympy.physics.paulialgebra"], [157, "module-sympy.physics.qho_1d"], [158, "module-sympy.physics.quantum.anticommutator"], [159, "module-sympy.physics.quantum.cartesian"], [160, "module-sympy.physics.quantum.cg"], [161, "module-sympy.physics.quantum.circuitplot"], [162, "module-sympy.physics.quantum.commutator"], [163, "module-sympy.physics.quantum.constants"], [164, "module-sympy.physics.quantum.dagger"], [165, "module-sympy.physics.quantum.gate"], [166, "module-sympy.physics.quantum.grover"], [167, "module-sympy.physics.quantum.hilbert"], [169, "module-sympy.physics.quantum.innerproduct"], [170, "module-sympy.physics.quantum.operator"], [171, "module-sympy.physics.quantum.operatorset"], [172, "module-sympy.physics.quantum.piab"], [173, "module-sympy.physics.quantum.qapply"], [174, "module-sympy.physics.quantum.qft"], [175, "module-sympy.physics.quantum.qubit"], [176, "module-sympy.physics.quantum.represent"], [177, "module-sympy.physics.quantum.shor"], [178, "module-sympy.physics.quantum.spin"], [179, "module-sympy.physics.quantum.state"], [180, "module-sympy.physics.quantum.tensorproduct"], [181, "module-sympy.physics.secondquant"], [182, "module-sympy.physics.sho"], [183, "module-sympy.physics.units.dimensions"], [187, "module-sympy.physics.units.prefixes"], [188, "module-sympy.physics.units.quantities"], [188, "module-sympy.physics.units.util"], [189, "module-sympy.physics.units.unitsystem"], [195, "module-sympy.physics.vector.functions"], [195, "module-sympy.physics.vector.point"], [198, "module-sympy.physics.vector"], [201, "module-sympy.physics.wigner"], [202, "module-sympy.plotting.plot"], [202, "module-sympy.plotting.pygletplot"], [209, "module-sympy.polys.polyconfig"], [209, "module-sympy.polys.polyoptions"], [211, "module-sympy.polys.numberfields.modules"], [211, "module-sympy.polys.numberfields.subfield"], [212, "module-sympy.polys"], [214, "module-sympy.polys.solvers"], [216, "module-sympy.printing.aesaracode"], [216, "module-sympy.printing.c"], [216, "module-sympy.printing.codeprinter"], [216, "module-sympy.printing.conventions"], [216, "module-sympy.printing.cxx"], [216, "module-sympy.printing.fortran"], [216, "module-sympy.printing.gtk"], [216, "module-sympy.printing.jscode"], [216, "module-sympy.printing.julia"], [216, "module-sympy.printing.lambdarepr"], [216, "module-sympy.printing.latex"], [216, "module-sympy.printing.maple"], [216, "module-sympy.printing.mathematica"], [216, "module-sympy.printing.mathml"], [216, "module-sympy.printing.octave"], [216, "module-sympy.printing.precedence"], [216, "module-sympy.printing.pretty"], [216, "module-sympy.printing.pretty.pretty"], [216, "module-sympy.printing.pretty.pretty_symbology"], [216, "module-sympy.printing.pretty.stringpict"], [216, "module-sympy.printing.preview"], [216, "module-sympy.printing.printer"], [216, "module-sympy.printing.pycode"], [216, "module-sympy.printing.python"], [216, "module-sympy.printing.rcode"], [216, "module-sympy.printing.repr"], [216, "module-sympy.printing.rust"], [216, "module-sympy.printing.smtlib"], [216, "module-sympy.printing.str"], [216, "module-sympy.printing.tree"], [224, "module-sympy.sets.conditionset"], [224, "module-sympy.sets.fancysets"], [224, "module-sympy.sets.powerset"], [224, "module-sympy.sets.sets"], [226, "module-sympy.simplify.hyperexpand_doc"], [228, "module-sympy.simplify.combsimp"], [228, "module-sympy.simplify.cse_main"], [228, "module-sympy.simplify.epathtools"], [228, "module-sympy.simplify.hyperexpand"], [228, "module-sympy.simplify.powsimp"], [228, "module-sympy.simplify.radsimp"], [228, "module-sympy.simplify.ratsimp"], [228, "module-sympy.simplify.sqrtdenest"], [228, "module-sympy.simplify.trigsimp"], [231, "module-sympy.solvers.inequalities"], [232, "module-sympy.solvers.ode"], [232, "module-sympy.solvers.ode.ode"], [233, "module-sympy.solvers.pde"], [234, "module-sympy.solvers"], [234, "module-sympy.solvers.recurr"], [235, "module-sympy.solvers.solveset"], [236, "module-sympy.stats"], [236, "module-sympy.stats.crv"], [236, "module-sympy.stats.crv_types"], [236, "module-sympy.stats.frv"], [236, "module-sympy.stats.frv_types"], [236, "module-sympy.stats.rv"], [237, "module-sympy.tensor.array"], [238, "module-sympy.tensor.array.expressions"], [239, "module-sympy.tensor"], [240, "module-sympy.tensor.index_methods"], [241, "module-sympy.tensor.indexed"], [242, "module-sympy.tensor.tensor"], [243, "module-sympy.tensor.toperators"], [244, "module-sympy.testing"], [245, "module-sympy.testing.pytest"], [246, "module-sympy.testing.randtest"], [247, "module-sympy.testing.runtests"], [248, "module-sympy.utilities.autowrap"], [249, "module-sympy.utilities.codegen"], [250, "module-sympy.utilities.decorator"], [251, "module-sympy.utilities.enumerative"], [252, "module-sympy.utilities.exceptions"], [253, "module-sympy.utilities"], [254, "module-sympy.utilities.iterables"], [255, "module-sympy.utilities.lambdify"], [256, "module-sympy.utilities.memoization"], [257, "module-sympy.utilities.misc"], [258, "module-sympy.utilities.pkgdata"], [259, "module-sympy.utilities.source"], [260, "module-sympy.utilities.timeutils"], [269, "module-sympy.vector"], [278, "module-sympy.physics"]], "sympy.simplify.simplify": [[15, "module-sympy.simplify.simplify"]], "sympy": [[37, "module-sympy"]], "sympy.abc": [[39, "module-sympy.abc"]], "quaternion (class in sympy.algebras)": [[40, "sympy.algebras.Quaternion"]], "add() (sympy.algebras.quaternion method)": [[40, "sympy.algebras.Quaternion.add"]], "angle() (sympy.algebras.quaternion method)": [[40, "sympy.algebras.Quaternion.angle"]], "arc_coplanar() (sympy.algebras.quaternion method)": [[40, "sympy.algebras.Quaternion.arc_coplanar"]], "axis() (sympy.algebras.quaternion method)": [[40, "sympy.algebras.Quaternion.axis"]], "exp() (sympy.algebras.quaternion method)": [[40, "sympy.algebras.Quaternion.exp"]], "from_matrix() (sympy.algebras.quaternion class method)": [[40, "sympy.algebras.Quaternion.from_Matrix"]], "from_axis_angle() (sympy.algebras.quaternion class method)": [[40, "sympy.algebras.Quaternion.from_axis_angle"]], "from_euler() (sympy.algebras.quaternion class method)": [[40, "sympy.algebras.Quaternion.from_euler"]], "from_rotation_matrix() (sympy.algebras.quaternion class method)": [[40, "sympy.algebras.Quaternion.from_rotation_matrix"]], "index_vector() (sympy.algebras.quaternion method)": [[40, "sympy.algebras.Quaternion.index_vector"]], "integrate() (sympy.algebras.quaternion method)": [[40, "sympy.algebras.Quaternion.integrate"]], "inverse() (sympy.algebras.quaternion method)": [[40, "sympy.algebras.Quaternion.inverse"]], "is_pure() (sympy.algebras.quaternion method)": [[40, "sympy.algebras.Quaternion.is_pure"]], "is_zero_quaternion() (sympy.algebras.quaternion method)": [[40, "sympy.algebras.Quaternion.is_zero_quaternion"]], "mensor() (sympy.algebras.quaternion method)": [[40, "sympy.algebras.Quaternion.mensor"]], "mul() (sympy.algebras.quaternion method)": [[40, "sympy.algebras.Quaternion.mul"]], "norm() (sympy.algebras.quaternion method)": [[40, "sympy.algebras.Quaternion.norm"]], "normalize() (sympy.algebras.quaternion method)": [[40, "sympy.algebras.Quaternion.normalize"]], "orthogonal() (sympy.algebras.quaternion method)": [[40, "sympy.algebras.Quaternion.orthogonal"]], "parallel() (sympy.algebras.quaternion method)": [[40, "sympy.algebras.Quaternion.parallel"]], "pow() (sympy.algebras.quaternion method)": [[40, "sympy.algebras.Quaternion.pow"]], "pow_cos_sin() (sympy.algebras.quaternion method)": [[40, "sympy.algebras.Quaternion.pow_cos_sin"]], "product_matrix_left (sympy.algebras.quaternion property)": [[40, "sympy.algebras.Quaternion.product_matrix_left"]], "product_matrix_right (sympy.algebras.quaternion property)": [[40, "sympy.algebras.Quaternion.product_matrix_right"]], "rotate_point() (sympy.algebras.quaternion static method)": [[40, "sympy.algebras.Quaternion.rotate_point"]], "scalar_part() (sympy.algebras.quaternion method)": [[40, "sympy.algebras.Quaternion.scalar_part"]], "set_norm() (sympy.algebras.quaternion method)": [[40, "sympy.algebras.Quaternion.set_norm"]], "sympy.algebras": [[40, "module-sympy.algebras"]], "to_matrix() (sympy.algebras.quaternion method)": [[40, "sympy.algebras.Quaternion.to_Matrix"]], "to_axis_angle() (sympy.algebras.quaternion method)": [[40, "sympy.algebras.Quaternion.to_axis_angle"]], "to_euler() (sympy.algebras.quaternion method)": [[40, "sympy.algebras.Quaternion.to_euler"]], "to_rotation_matrix() (sympy.algebras.quaternion method)": [[40, "sympy.algebras.Quaternion.to_rotation_matrix"]], "vector_coplanar() (sympy.algebras.quaternion class method)": [[40, "sympy.algebras.Quaternion.vector_coplanar"]], "vector_part() (sympy.algebras.quaternion method)": [[40, "sympy.algebras.Quaternion.vector_part"]], "assumptionkeys (class in sympy.assumptions.ask)": [[41, "sympy.assumptions.ask.AssumptionKeys"]], "ask() (in module sympy.assumptions.ask)": [[41, "sympy.assumptions.ask.ask"]], "register_handler() (in module sympy.assumptions.ask)": [[41, "sympy.assumptions.ask.register_handler"]], "remove_handler() (in module sympy.assumptions.ask)": [[41, "sympy.assumptions.ask.remove_handler"]], "sympy.assumptions.ask": [[41, "module-sympy.assumptions.ask"]], "appliedpredicate (class in sympy.assumptions.assume)": [[42, "sympy.assumptions.assume.AppliedPredicate"]], "assumptionscontext (class in sympy.assumptions.assume)": [[42, "sympy.assumptions.assume.AssumptionsContext"]], "predicate (class in sympy.assumptions.assume)": [[42, "sympy.assumptions.assume.Predicate"]], "undefinedpredicate (class in sympy.assumptions.assume)": [[42, "sympy.assumptions.assume.UndefinedPredicate"]], "add() (sympy.assumptions.assume.assumptionscontext method)": [[42, "sympy.assumptions.assume.AssumptionsContext.add"]], "arg (sympy.assumptions.assume.appliedpredicate property)": [[42, "sympy.assumptions.assume.AppliedPredicate.arg"]], "arguments (sympy.assumptions.assume.appliedpredicate property)": [[42, "sympy.assumptions.assume.AppliedPredicate.arguments"]], "assuming() (in module sympy.assumptions.assume)": [[42, "sympy.assumptions.assume.assuming"]], "eval() (sympy.assumptions.assume.predicate method)": [[42, "sympy.assumptions.assume.Predicate.eval"]], "function (sympy.assumptions.assume.appliedpredicate property)": [[42, "sympy.assumptions.assume.AppliedPredicate.function"]], "handler (sympy.assumptions.assume.predicate attribute)": [[42, "sympy.assumptions.assume.Predicate.handler"]], "register() (sympy.assumptions.assume.predicate class method)": [[42, "sympy.assumptions.assume.Predicate.register"]], "register_many() (sympy.assumptions.assume.predicate class method)": [[42, "sympy.assumptions.assume.Predicate.register_many"]], "sympy.assumptions.assume": [[42, "module-sympy.assumptions.assume"]], "sympy.assumptions": [[43, "module-sympy.assumptions"]], "algebraichandler (sympy.assumptions.predicates.sets.algebraicpredicate attribute)": [[44, "sympy.assumptions.predicates.sets.AlgebraicPredicate.AlgebraicHandler"]], "algebraicpredicate (class in sympy.assumptions.predicates.sets)": [[44, "sympy.assumptions.predicates.sets.AlgebraicPredicate"]], "antihermitianpredicate (class in sympy.assumptions.predicates.sets)": [[44, "sympy.assumptions.predicates.sets.AntihermitianPredicate"]], "commutativepredicate (class in sympy.assumptions.predicates.common)": [[44, "sympy.assumptions.predicates.common.CommutativePredicate"]], "complexelementspredicate (class in sympy.assumptions.predicates.matrices)": [[44, "sympy.assumptions.predicates.matrices.ComplexElementsPredicate"]], "complexpredicate (class in sympy.assumptions.predicates.sets)": [[44, "sympy.assumptions.predicates.sets.ComplexPredicate"]], "compositepredicate (class in sympy.assumptions.predicates.ntheory)": [[44, "sympy.assumptions.predicates.ntheory.CompositePredicate"]], "diagonalpredicate (class in sympy.assumptions.predicates.matrices)": [[44, "sympy.assumptions.predicates.matrices.DiagonalPredicate"]], "evenpredicate (class in sympy.assumptions.predicates.ntheory)": [[44, "sympy.assumptions.predicates.ntheory.EvenPredicate"]], "extendedrealpredicate (class in sympy.assumptions.predicates.sets)": [[44, "sympy.assumptions.predicates.sets.ExtendedRealPredicate"]], "finitepredicate (class in sympy.assumptions.predicates.calculus)": [[44, "sympy.assumptions.predicates.calculus.FinitePredicate"]], "fullrankpredicate (class in sympy.assumptions.predicates.matrices)": [[44, "sympy.assumptions.predicates.matrices.FullRankPredicate"]], "hermitianpredicate (class in sympy.assumptions.predicates.sets)": [[44, "sympy.assumptions.predicates.sets.HermitianPredicate"]], "imaginarypredicate (class in sympy.assumptions.predicates.sets)": [[44, "sympy.assumptions.predicates.sets.ImaginaryPredicate"]], "infinitepredicate (class in sympy.assumptions.predicates.calculus)": [[44, "sympy.assumptions.predicates.calculus.InfinitePredicate"]], "integerelementspredicate (class in sympy.assumptions.predicates.matrices)": [[44, "sympy.assumptions.predicates.matrices.IntegerElementsPredicate"]], "integerpredicate (class in sympy.assumptions.predicates.sets)": [[44, "sympy.assumptions.predicates.sets.IntegerPredicate"]], "invertiblepredicate (class in sympy.assumptions.predicates.matrices)": [[44, "sympy.assumptions.predicates.matrices.InvertiblePredicate"]], "irrationalpredicate (class in sympy.assumptions.predicates.sets)": [[44, "sympy.assumptions.predicates.sets.IrrationalPredicate"]], "istruepredicate (class in sympy.assumptions.predicates.common)": [[44, "sympy.assumptions.predicates.common.IsTruePredicate"]], "lowertriangularpredicate (class in sympy.assumptions.predicates.matrices)": [[44, "sympy.assumptions.predicates.matrices.LowerTriangularPredicate"]], "negativepredicate (class in sympy.assumptions.predicates.order)": [[44, "sympy.assumptions.predicates.order.NegativePredicate"]], "nonnegativepredicate (class in sympy.assumptions.predicates.order)": [[44, "sympy.assumptions.predicates.order.NonNegativePredicate"]], "nonpositivepredicate (class in sympy.assumptions.predicates.order)": [[44, "sympy.assumptions.predicates.order.NonPositivePredicate"]], "nonzeropredicate (class in sympy.assumptions.predicates.order)": [[44, "sympy.assumptions.predicates.order.NonZeroPredicate"]], "normalpredicate (class in sympy.assumptions.predicates.matrices)": [[44, "sympy.assumptions.predicates.matrices.NormalPredicate"]], "oddpredicate (class in sympy.assumptions.predicates.ntheory)": [[44, "sympy.assumptions.predicates.ntheory.OddPredicate"]], "orthogonalpredicate (class in sympy.assumptions.predicates.matrices)": [[44, "sympy.assumptions.predicates.matrices.OrthogonalPredicate"]], "positivedefinitepredicate (class in sympy.assumptions.predicates.matrices)": [[44, "sympy.assumptions.predicates.matrices.PositiveDefinitePredicate"]], "positivepredicate (class in sympy.assumptions.predicates.order)": [[44, "sympy.assumptions.predicates.order.PositivePredicate"]], "primepredicate (class in sympy.assumptions.predicates.ntheory)": [[44, "sympy.assumptions.predicates.ntheory.PrimePredicate"]], "rationalpredicate (class in sympy.assumptions.predicates.sets)": [[44, "sympy.assumptions.predicates.sets.RationalPredicate"]], "realelementspredicate (class in sympy.assumptions.predicates.matrices)": [[44, "sympy.assumptions.predicates.matrices.RealElementsPredicate"]], "realpredicate (class in sympy.assumptions.predicates.sets)": [[44, "sympy.assumptions.predicates.sets.RealPredicate"]], "singularpredicate (class in sympy.assumptions.predicates.matrices)": [[44, "sympy.assumptions.predicates.matrices.SingularPredicate"]], "squarepredicate (class in sympy.assumptions.predicates.matrices)": [[44, "sympy.assumptions.predicates.matrices.SquarePredicate"]], "symmetricpredicate (class in sympy.assumptions.predicates.matrices)": [[44, "sympy.assumptions.predicates.matrices.SymmetricPredicate"]], "transcendentalpredicate (class in sympy.assumptions.predicates.sets)": [[44, "sympy.assumptions.predicates.sets.TranscendentalPredicate"]], "triangularpredicate (class in sympy.assumptions.predicates.matrices)": [[44, "sympy.assumptions.predicates.matrices.TriangularPredicate"]], "unittriangularpredicate (class in sympy.assumptions.predicates.matrices)": [[44, "sympy.assumptions.predicates.matrices.UnitTriangularPredicate"]], "unitarypredicate (class in sympy.assumptions.predicates.matrices)": [[44, "sympy.assumptions.predicates.matrices.UnitaryPredicate"]], "uppertriangularpredicate (class in sympy.assumptions.predicates.matrices)": [[44, "sympy.assumptions.predicates.matrices.UpperTriangularPredicate"]], "zeropredicate (class in sympy.assumptions.predicates.order)": [[44, "sympy.assumptions.predicates.order.ZeroPredicate"]], "handler (sympy.assumptions.predicates.calculus.finitepredicate attribute)": [[44, "sympy.assumptions.predicates.calculus.FinitePredicate.handler"]], "handler (sympy.assumptions.predicates.calculus.infinitepredicate attribute)": [[44, "sympy.assumptions.predicates.calculus.InfinitePredicate.handler"]], "handler (sympy.assumptions.predicates.common.commutativepredicate attribute)": [[44, "sympy.assumptions.predicates.common.CommutativePredicate.handler"]], "handler (sympy.assumptions.predicates.common.istruepredicate attribute)": [[44, "sympy.assumptions.predicates.common.IsTruePredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.complexelementspredicate attribute)": [[44, "sympy.assumptions.predicates.matrices.ComplexElementsPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.diagonalpredicate attribute)": [[44, "sympy.assumptions.predicates.matrices.DiagonalPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.fullrankpredicate attribute)": [[44, "sympy.assumptions.predicates.matrices.FullRankPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.integerelementspredicate attribute)": [[44, "sympy.assumptions.predicates.matrices.IntegerElementsPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.invertiblepredicate attribute)": [[44, "sympy.assumptions.predicates.matrices.InvertiblePredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.lowertriangularpredicate attribute)": [[44, "sympy.assumptions.predicates.matrices.LowerTriangularPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.normalpredicate attribute)": [[44, "sympy.assumptions.predicates.matrices.NormalPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.orthogonalpredicate attribute)": [[44, "sympy.assumptions.predicates.matrices.OrthogonalPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.positivedefinitepredicate attribute)": [[44, "sympy.assumptions.predicates.matrices.PositiveDefinitePredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.realelementspredicate attribute)": [[44, "sympy.assumptions.predicates.matrices.RealElementsPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.singularpredicate attribute)": [[44, "sympy.assumptions.predicates.matrices.SingularPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.squarepredicate attribute)": [[44, "sympy.assumptions.predicates.matrices.SquarePredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.symmetricpredicate attribute)": [[44, "sympy.assumptions.predicates.matrices.SymmetricPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.triangularpredicate attribute)": [[44, "sympy.assumptions.predicates.matrices.TriangularPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.unittriangularpredicate attribute)": [[44, "sympy.assumptions.predicates.matrices.UnitTriangularPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.unitarypredicate attribute)": [[44, "sympy.assumptions.predicates.matrices.UnitaryPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.uppertriangularpredicate attribute)": [[44, "sympy.assumptions.predicates.matrices.UpperTriangularPredicate.handler"]], "handler (sympy.assumptions.predicates.ntheory.compositepredicate attribute)": [[44, "sympy.assumptions.predicates.ntheory.CompositePredicate.handler"]], "handler (sympy.assumptions.predicates.ntheory.evenpredicate attribute)": [[44, "sympy.assumptions.predicates.ntheory.EvenPredicate.handler"]], "handler (sympy.assumptions.predicates.ntheory.oddpredicate attribute)": [[44, "sympy.assumptions.predicates.ntheory.OddPredicate.handler"]], "handler (sympy.assumptions.predicates.ntheory.primepredicate attribute)": [[44, "sympy.assumptions.predicates.ntheory.PrimePredicate.handler"]], "handler (sympy.assumptions.predicates.order.negativepredicate attribute)": [[44, "sympy.assumptions.predicates.order.NegativePredicate.handler"]], "handler (sympy.assumptions.predicates.order.nonnegativepredicate attribute)": [[44, "sympy.assumptions.predicates.order.NonNegativePredicate.handler"]], "handler (sympy.assumptions.predicates.order.nonpositivepredicate attribute)": [[44, "sympy.assumptions.predicates.order.NonPositivePredicate.handler"]], "handler (sympy.assumptions.predicates.order.nonzeropredicate attribute)": [[44, "sympy.assumptions.predicates.order.NonZeroPredicate.handler"]], "handler (sympy.assumptions.predicates.order.positivepredicate attribute)": [[44, "sympy.assumptions.predicates.order.PositivePredicate.handler"]], "handler (sympy.assumptions.predicates.order.zeropredicate attribute)": [[44, "sympy.assumptions.predicates.order.ZeroPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.algebraicpredicate attribute)": [[44, "sympy.assumptions.predicates.sets.AlgebraicPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.antihermitianpredicate attribute)": [[44, "sympy.assumptions.predicates.sets.AntihermitianPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.complexpredicate attribute)": [[44, "sympy.assumptions.predicates.sets.ComplexPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.extendedrealpredicate attribute)": [[44, "sympy.assumptions.predicates.sets.ExtendedRealPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.hermitianpredicate attribute)": [[44, "sympy.assumptions.predicates.sets.HermitianPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.imaginarypredicate attribute)": [[44, "sympy.assumptions.predicates.sets.ImaginaryPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.integerpredicate attribute)": [[44, "sympy.assumptions.predicates.sets.IntegerPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.irrationalpredicate attribute)": [[44, "sympy.assumptions.predicates.sets.IrrationalPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.rationalpredicate attribute)": [[44, "sympy.assumptions.predicates.sets.RationalPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.realpredicate attribute)": [[44, "sympy.assumptions.predicates.sets.RealPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.transcendentalpredicate attribute)": [[44, "sympy.assumptions.predicates.sets.TranscendentalPredicate.handler"]], "sympy.assumptions.predicates": [[44, "module-sympy.assumptions.predicates"]], "refine() (in module sympy.assumptions.refine)": [[45, "sympy.assumptions.refine.refine"]], "refine_pow() (in module sympy.assumptions.refine)": [[45, "sympy.assumptions.refine.refine_Pow"]], "refine_abs() (in module sympy.assumptions.refine)": [[45, "sympy.assumptions.refine.refine_abs"]], "refine_arg() (in module sympy.assumptions.refine)": [[45, "sympy.assumptions.refine.refine_arg"]], "refine_atan2() (in module sympy.assumptions.refine)": [[45, "sympy.assumptions.refine.refine_atan2"]], "refine_im() (in module sympy.assumptions.refine)": [[45, "sympy.assumptions.refine.refine_im"]], "refine_matrixelement() (in module sympy.assumptions.refine)": [[45, "sympy.assumptions.refine.refine_matrixelement"]], "refine_re() (in module sympy.assumptions.refine)": [[45, "sympy.assumptions.refine.refine_re"]], "refine_sign() (in module sympy.assumptions.refine)": [[45, "sympy.assumptions.refine.refine_sign"]], "sympy.assumptions.refine": [[45, "module-sympy.assumptions.refine"]], "apply_finite_diff() (in module sympy.calculus.finite_diff)": [[46, "sympy.calculus.finite_diff.apply_finite_diff"]], "continuous_domain() (in module sympy.calculus.util)": [[46, "sympy.calculus.util.continuous_domain"]], "differentiate_finite() (in module sympy.calculus.finite_diff)": [[46, "sympy.calculus.finite_diff.differentiate_finite"]], "euler_equations() (in module sympy.calculus.euler)": [[46, "sympy.calculus.euler.euler_equations"]], "finite_diff_weights() (in module sympy.calculus.finite_diff)": [[46, "sympy.calculus.finite_diff.finite_diff_weights"]], "function_range() (in module sympy.calculus.util)": [[46, "sympy.calculus.util.function_range"]], "is_convex() (in module sympy.calculus.util)": [[46, "sympy.calculus.util.is_convex"]], "is_decreasing() (in module sympy.calculus.singularities)": [[46, "sympy.calculus.singularities.is_decreasing"]], "is_increasing() (in module sympy.calculus.singularities)": [[46, "sympy.calculus.singularities.is_increasing"]], "is_monotonic() (in module sympy.calculus.singularities)": [[46, "sympy.calculus.singularities.is_monotonic"]], "is_strictly_decreasing() (in module sympy.calculus.singularities)": [[46, "sympy.calculus.singularities.is_strictly_decreasing"]], "is_strictly_increasing() (in module sympy.calculus.singularities)": [[46, "sympy.calculus.singularities.is_strictly_increasing"]], "lcim() (in module sympy.calculus.util)": [[46, "sympy.calculus.util.lcim"]], "maximum() (in module sympy.calculus.util)": [[46, "sympy.calculus.util.maximum"]], "minimum() (in module sympy.calculus.util)": [[46, "sympy.calculus.util.minimum"]], "monotonicity_helper() (in module sympy.calculus.singularities)": [[46, "sympy.calculus.singularities.monotonicity_helper"]], "not_empty_in() (in module sympy.calculus.util)": [[46, "sympy.calculus.util.not_empty_in"]], "periodicity() (in module sympy.calculus.util)": [[46, "sympy.calculus.util.periodicity"]], "singularities() (in module sympy.calculus.singularities)": [[46, "sympy.calculus.singularities.singularities"]], "stationary_points() (in module sympy.calculus.util)": [[46, "sympy.calculus.util.stationary_points"]], "sympy.calculus": [[46, "module-sympy.calculus"]], "sympy.calculus.euler": [[46, "module-sympy.calculus.euler"]], "sympy.calculus.finite_diff": [[46, "module-sympy.calculus.finite_diff"]], "sympy.calculus.singularities": [[46, "module-sympy.calculus.singularities"]], "sympy.calculus.util": [[46, "module-sympy.calculus.util"]], "arrowstringdescription (class in sympy.categories.diagram_drawing)": [[47, "sympy.categories.diagram_drawing.ArrowStringDescription"]], "category (class in sympy.categories)": [[47, "sympy.categories.Category"]], "compositemorphism (class in sympy.categories)": [[47, "sympy.categories.CompositeMorphism"]], "diagram (class in sympy.categories)": [[47, "sympy.categories.Diagram"]], "diagramgrid (class in sympy.categories.diagram_drawing)": [[47, "sympy.categories.diagram_drawing.DiagramGrid"]], "identitymorphism (class in sympy.categories)": [[47, "sympy.categories.IdentityMorphism"]], "morphism (class in sympy.categories)": [[47, "sympy.categories.Morphism"]], "namedmorphism (class in sympy.categories)": [[47, "sympy.categories.NamedMorphism"]], "object (class in sympy.categories)": [[47, "sympy.categories.Object"]], "xypicdiagramdrawer (class in sympy.categories.diagram_drawing)": [[47, "sympy.categories.diagram_drawing.XypicDiagramDrawer"]], "codomain (sympy.categories.compositemorphism property)": [[47, "sympy.categories.CompositeMorphism.codomain"]], "codomain (sympy.categories.morphism property)": [[47, "sympy.categories.Morphism.codomain"]], "commutative_diagrams (sympy.categories.category property)": [[47, "sympy.categories.Category.commutative_diagrams"]], "components (sympy.categories.compositemorphism property)": [[47, "sympy.categories.CompositeMorphism.components"]], "compose() (sympy.categories.morphism method)": [[47, "sympy.categories.Morphism.compose"]], "conclusions (sympy.categories.diagram property)": [[47, "sympy.categories.Diagram.conclusions"]], "domain (sympy.categories.compositemorphism property)": [[47, "sympy.categories.CompositeMorphism.domain"]], "domain (sympy.categories.morphism property)": [[47, "sympy.categories.Morphism.domain"]], "draw() (sympy.categories.diagram_drawing.xypicdiagramdrawer method)": [[47, "sympy.categories.diagram_drawing.XypicDiagramDrawer.draw"]], "flatten() (sympy.categories.compositemorphism method)": [[47, "sympy.categories.CompositeMorphism.flatten"]], "height (sympy.categories.diagram_drawing.diagramgrid property)": [[47, "sympy.categories.diagram_drawing.DiagramGrid.height"]], "hom() (sympy.categories.diagram method)": [[47, "sympy.categories.Diagram.hom"]], "is_subdiagram() (sympy.categories.diagram method)": [[47, "sympy.categories.Diagram.is_subdiagram"]], "morphisms (sympy.categories.diagram_drawing.diagramgrid property)": [[47, "sympy.categories.diagram_drawing.DiagramGrid.morphisms"]], "name (sympy.categories.category property)": [[47, "sympy.categories.Category.name"]], "name (sympy.categories.namedmorphism property)": [[47, "sympy.categories.NamedMorphism.name"]], "objects (sympy.categories.category property)": [[47, "sympy.categories.Category.objects"]], "objects (sympy.categories.diagram property)": [[47, "sympy.categories.Diagram.objects"]], "premises (sympy.categories.diagram property)": [[47, "sympy.categories.Diagram.premises"]], "preview_diagram() (in module sympy.categories.diagram_drawing)": [[47, "sympy.categories.diagram_drawing.preview_diagram"]], "subdiagram_from_objects() (sympy.categories.diagram method)": [[47, "sympy.categories.Diagram.subdiagram_from_objects"]], "sympy.categories": [[47, "module-sympy.categories"]], "sympy.categories.diagram_drawing": [[47, "module-sympy.categories.diagram_drawing"]], "width (sympy.categories.diagram_drawing.diagramgrid property)": [[47, "sympy.categories.diagram_drawing.DiagramGrid.width"]], "xypic_draw_diagram() (in module sympy.categories.diagram_drawing)": [[47, "sympy.categories.diagram_drawing.xypic_draw_diagram"]], "arrayconstructor (class in sympy.codegen.fnodes)": [[48, "sympy.codegen.fnodes.ArrayConstructor"]], "assignment (class in sympy.codegen.ast)": [[48, "sympy.codegen.ast.Assignment"]], "assignmentbase (class in sympy.codegen.ast)": [[48, "sympy.codegen.ast.AssignmentBase"]], "attribute (class in sympy.codegen.ast)": [[48, "sympy.codegen.ast.Attribute"]], "augmentedassignment (class in sympy.codegen.ast)": [[48, "sympy.codegen.ast.AugmentedAssignment"]], "breaktoken (class in sympy.codegen.ast)": [[48, "sympy.codegen.ast.BreakToken"]], "cbrt (class in sympy.codegen.cfunctions)": [[48, "sympy.codegen.cfunctions.Cbrt"]], "codeblock (class in sympy.codegen.ast)": [[48, "sympy.codegen.ast.CodeBlock"]], "commaoperator (class in sympy.codegen.cnodes)": [[48, "sympy.codegen.cnodes.CommaOperator"]], "comment (class in sympy.codegen.ast)": [[48, "sympy.codegen.ast.Comment"]], "complextype (class in sympy.codegen.ast)": [[48, "sympy.codegen.ast.ComplexType"]], "continuetoken (class in sympy.codegen.ast)": [[48, "sympy.codegen.ast.ContinueToken"]], "declaration (class in sympy.codegen.ast)": [[48, "sympy.codegen.ast.Declaration"]], "do (class in sympy.codegen.fnodes)": [[48, "sympy.codegen.fnodes.Do"]], "element (class in sympy.codegen.ast)": [[48, "sympy.codegen.ast.Element"]], "extent (class in sympy.codegen.fnodes)": [[48, "sympy.codegen.fnodes.Extent"]], "floatbasetype (class in sympy.codegen.ast)": [[48, "sympy.codegen.ast.FloatBaseType"]], "floattype (class in sympy.codegen.ast)": [[48, "sympy.codegen.ast.FloatType"]], "for (class in sympy.codegen.ast)": [[48, "sympy.codegen.ast.For"]], "fortranreturn (class in sympy.codegen.fnodes)": [[48, "sympy.codegen.fnodes.FortranReturn"]], "funcminusoneoptim (class in sympy.codegen.rewriting)": [[48, "sympy.codegen.rewriting.FuncMinusOneOptim"]], "functioncall (class in sympy.codegen.ast)": [[48, "sympy.codegen.ast.FunctionCall"]], "functiondefinition (class in sympy.codegen.ast)": [[48, "sympy.codegen.ast.FunctionDefinition"]], "functionprototype (class in sympy.codegen.ast)": [[48, "sympy.codegen.ast.FunctionPrototype"]], "goto (class in sympy.codegen.fnodes)": [[48, "sympy.codegen.fnodes.GoTo"]], "implieddoloop (class in sympy.codegen.fnodes)": [[48, "sympy.codegen.fnodes.ImpliedDoLoop"]], "intbasetype (class in sympy.codegen.ast)": [[48, "sympy.codegen.ast.IntBaseType"]], "label (class in sympy.codegen.cnodes)": [[48, "sympy.codegen.cnodes.Label"]], "matrixsolve (class in sympy.codegen.matrix_nodes)": [[48, "sympy.codegen.matrix_nodes.MatrixSolve"]], "module (class in sympy.codegen.fnodes)": [[48, "sympy.codegen.fnodes.Module"]], "node (class in sympy.codegen.ast)": [[48, "sympy.codegen.ast.Node"]], "nonetoken (class in sympy.codegen.ast)": [[48, "sympy.codegen.ast.NoneToken"]], "optimization (class in sympy.codegen.rewriting)": [[48, "sympy.codegen.rewriting.Optimization"]], "pointer (class in sympy.codegen.ast)": [[48, "sympy.codegen.ast.Pointer"]], "postdecrement (class in sympy.codegen.cnodes)": [[48, "sympy.codegen.cnodes.PostDecrement"]], "postincrement (class in sympy.codegen.cnodes)": [[48, "sympy.codegen.cnodes.PostIncrement"]], "predecrement (class in sympy.codegen.cnodes)": [[48, "sympy.codegen.cnodes.PreDecrement"]], "preincrement (class in sympy.codegen.cnodes)": [[48, "sympy.codegen.cnodes.PreIncrement"]], "print (class in sympy.codegen.ast)": [[48, "sympy.codegen.ast.Print"]], "program (class in sympy.codegen.fnodes)": [[48, "sympy.codegen.fnodes.Program"]], "quotedstring (class in sympy.codegen.ast)": [[48, "sympy.codegen.ast.QuotedString"]], "raise (class in sympy.codegen.ast)": [[48, "sympy.codegen.ast.Raise"]], "replaceoptim (class in sympy.codegen.rewriting)": [[48, "sympy.codegen.rewriting.ReplaceOptim"]], "return (class in sympy.codegen.ast)": [[48, "sympy.codegen.ast.Return"]], "runtimeerror_ (class in sympy.codegen.ast)": [[48, "sympy.codegen.ast.RuntimeError_"]], "scope (class in sympy.codegen.ast)": [[48, "sympy.codegen.ast.Scope"]], "seriesapprox (class in sympy.codegen.approximations)": [[48, "sympy.codegen.approximations.SeriesApprox"]], "signedinttype (class in sympy.codegen.ast)": [[48, "sympy.codegen.ast.SignedIntType"]], "sqrt (class in sympy.codegen.cfunctions)": [[48, "sympy.codegen.cfunctions.Sqrt"]], "stream (class in sympy.codegen.ast)": [[48, "sympy.codegen.ast.Stream"]], "string (class in sympy.codegen.ast)": [[48, "sympy.codegen.ast.String"]], "subroutine (class in sympy.codegen.fnodes)": [[48, "sympy.codegen.fnodes.Subroutine"]], "subroutinecall (class in sympy.codegen.fnodes)": [[48, "sympy.codegen.fnodes.SubroutineCall"]], "sumapprox (class in sympy.codegen.approximations)": [[48, "sympy.codegen.approximations.SumApprox"]], "token (class in sympy.codegen.ast)": [[48, "sympy.codegen.ast.Token"]], "type (class in sympy.codegen.ast)": [[48, "sympy.codegen.ast.Type"]], "unsignedinttype (class in sympy.codegen.ast)": [[48, "sympy.codegen.ast.UnsignedIntType"]], "variable (class in sympy.codegen.ast)": [[48, "sympy.codegen.ast.Variable"]], "while (class in sympy.codegen.ast)": [[48, "sympy.codegen.ast.While"]], "alignof() (in module sympy.codegen.cnodes)": [[48, "sympy.codegen.cnodes.alignof"]], "allocated() (in module sympy.codegen.fnodes)": [[48, "sympy.codegen.fnodes.allocated"]], "array() (in module sympy.codegen.fnodes)": [[48, "sympy.codegen.fnodes.array"]], "as_declaration() (sympy.codegen.ast.variable method)": [[48, "sympy.codegen.ast.Variable.as_Declaration"]], "attr_params() (sympy.codegen.ast.node method)": [[48, "sympy.codegen.ast.Node.attr_params"]], "aug_assign() (in module sympy.codegen.ast)": [[48, "sympy.codegen.ast.aug_assign"]], "bind_c() (in module sympy.codegen.fnodes)": [[48, "sympy.codegen.fnodes.bind_C"]], "cast_check() (sympy.codegen.ast.type method)": [[48, "sympy.codegen.ast.Type.cast_check"]], "cast_nocheck (sympy.codegen.ast.floatbasetype attribute)": [[48, "sympy.codegen.ast.FloatBaseType.cast_nocheck"]], "cast_nocheck() (sympy.codegen.ast.floattype method)": [[48, "sympy.codegen.ast.FloatType.cast_nocheck"]], "cmplx (class in sympy.codegen.fnodes)": [[48, "sympy.codegen.fnodes.cmplx"]], "create_expand_pow_optimization() (in module sympy.codegen.rewriting)": [[48, "sympy.codegen.rewriting.create_expand_pow_optimization"]], "cse() (sympy.codegen.ast.codeblock method)": [[48, "sympy.codegen.ast.CodeBlock.cse"]], "decimal_dig (sympy.codegen.ast.floattype property)": [[48, "sympy.codegen.ast.FloatType.decimal_dig"]], "deduced() (sympy.codegen.ast.variable class method)": [[48, "sympy.codegen.ast.Variable.deduced"]], "dig (sympy.codegen.ast.floattype property)": [[48, "sympy.codegen.ast.FloatType.dig"]], "dimension() (in module sympy.codegen.fnodes)": [[48, "sympy.codegen.fnodes.dimension"]], "dsign (class in sympy.codegen.fnodes)": [[48, "sympy.codegen.fnodes.dsign"]], "eps (sympy.codegen.ast.floattype property)": [[48, "sympy.codegen.ast.FloatType.eps"]], "exp2 (class in sympy.codegen.cfunctions)": [[48, "sympy.codegen.cfunctions.exp2"]], "expm1 (class in sympy.codegen.cfunctions)": [[48, "sympy.codegen.cfunctions.expm1"]], "fdiff() (sympy.codegen.cfunctions.cbrt method)": [[48, "sympy.codegen.cfunctions.Cbrt.fdiff"]], "fdiff() (sympy.codegen.cfunctions.sqrt method)": [[48, "sympy.codegen.cfunctions.Sqrt.fdiff"]], "fdiff() (sympy.codegen.cfunctions.exp2 method)": [[48, "sympy.codegen.cfunctions.exp2.fdiff"]], "fdiff() (sympy.codegen.cfunctions.expm1 method)": [[48, "sympy.codegen.cfunctions.expm1.fdiff"]], "fdiff() (sympy.codegen.cfunctions.fma method)": [[48, "sympy.codegen.cfunctions.fma.fdiff"]], "fdiff() (sympy.codegen.cfunctions.hypot method)": [[48, "sympy.codegen.cfunctions.hypot.fdiff"]], "fdiff() (sympy.codegen.cfunctions.log10 method)": [[48, "sympy.codegen.cfunctions.log10.fdiff"]], "fdiff() (sympy.codegen.cfunctions.log1p method)": [[48, "sympy.codegen.cfunctions.log1p.fdiff"]], "fdiff() (sympy.codegen.cfunctions.log2 method)": [[48, "sympy.codegen.cfunctions.log2.fdiff"]], "fma (class in sympy.codegen.cfunctions)": [[48, "sympy.codegen.cfunctions.fma"]], "from_expr() (sympy.codegen.ast.type class method)": [[48, "sympy.codegen.ast.Type.from_expr"]], "goto (class in sympy.codegen.cnodes)": [[48, "sympy.codegen.cnodes.goto"]], "hypot (class in sympy.codegen.cfunctions)": [[48, "sympy.codegen.cfunctions.hypot"]], "isign (class in sympy.codegen.fnodes)": [[48, "sympy.codegen.fnodes.isign"]], "kind (class in sympy.codegen.fnodes)": [[48, "sympy.codegen.fnodes.kind"]], "kwargs() (sympy.codegen.ast.token method)": [[48, "sympy.codegen.ast.Token.kwargs"]], "lbound() (in module sympy.codegen.fnodes)": [[48, "sympy.codegen.fnodes.lbound"]], "literal_dp (class in sympy.codegen.fnodes)": [[48, "sympy.codegen.fnodes.literal_dp"]], "literal_sp (class in sympy.codegen.fnodes)": [[48, "sympy.codegen.fnodes.literal_sp"]], "log10 (class in sympy.codegen.cfunctions)": [[48, "sympy.codegen.cfunctions.log10"]], "log1p (class in sympy.codegen.cfunctions)": [[48, "sympy.codegen.cfunctions.log1p"]], "log2 (class in sympy.codegen.cfunctions)": [[48, "sympy.codegen.cfunctions.log2"]], "max (sympy.codegen.ast.floattype property)": [[48, "sympy.codegen.ast.FloatType.max"]], "max_exponent (sympy.codegen.ast.floattype property)": [[48, "sympy.codegen.ast.FloatType.max_exponent"]], "merge (class in sympy.codegen.fnodes)": [[48, "sympy.codegen.fnodes.merge"]], "min_exponent (sympy.codegen.ast.floattype property)": [[48, "sympy.codegen.ast.FloatType.min_exponent"]], "newtons_method() (in module sympy.codegen.algorithms)": [[48, "sympy.codegen.algorithms.newtons_method"]], "newtons_method_function() (in module sympy.codegen.algorithms)": [[48, "sympy.codegen.algorithms.newtons_method_function"]], "optimize() (in module sympy.codegen.rewriting)": [[48, "sympy.codegen.rewriting.optimize"]], "render_as_module() (in module sympy.codegen.futils)": [[48, "sympy.codegen.futils.render_as_module"]], "render_as_module() (in module sympy.codegen.pyutils)": [[48, "sympy.codegen.pyutils.render_as_module"]], "render_as_source_file() (in module sympy.codegen.cutils)": [[48, "sympy.codegen.cutils.render_as_source_file"]], "replace_in_add() (sympy.codegen.rewriting.funcminusoneoptim method)": [[48, "sympy.codegen.rewriting.FuncMinusOneOptim.replace_in_Add"]], "reshape() (in module sympy.codegen.fnodes)": [[48, "sympy.codegen.fnodes.reshape"]], "shape() (in module sympy.codegen.fnodes)": [[48, "sympy.codegen.fnodes.shape"]], "size() (in module sympy.codegen.fnodes)": [[48, "sympy.codegen.fnodes.size"]], "sizeof() (in module sympy.codegen.cnodes)": [[48, "sympy.codegen.cnodes.sizeof"]], "struct (class in sympy.codegen.cnodes)": [[48, "sympy.codegen.cnodes.struct"]], "sympy.codegen.algorithms": [[48, "module-sympy.codegen.algorithms"]], "sympy.codegen.approximations": [[48, "module-sympy.codegen.approximations"]], "sympy.codegen.ast": [[48, "module-sympy.codegen.ast"]], "sympy.codegen.cfunctions": [[48, "module-sympy.codegen.cfunctions"]], "sympy.codegen.cnodes": [[48, "module-sympy.codegen.cnodes"]], "sympy.codegen.cutils": [[48, "module-sympy.codegen.cutils"]], "sympy.codegen.cxxnodes": [[48, "module-sympy.codegen.cxxnodes"]], "sympy.codegen.fnodes": [[48, "module-sympy.codegen.fnodes"]], "sympy.codegen.futils": [[48, "module-sympy.codegen.futils"]], "sympy.codegen.matrix_nodes": [[48, "module-sympy.codegen.matrix_nodes"]], "sympy.codegen.pyutils": [[48, "module-sympy.codegen.pyutils"]], "sympy.codegen.rewriting": [[48, "module-sympy.codegen.rewriting"]], "tiny (sympy.codegen.ast.floattype property)": [[48, "sympy.codegen.ast.FloatType.tiny"]], "topological_sort() (sympy.codegen.ast.codeblock class method)": [[48, "sympy.codegen.ast.CodeBlock.topological_sort"]], "union (class in sympy.codegen.cnodes)": [[48, "sympy.codegen.cnodes.union"]], "use (class in sympy.codegen.fnodes)": [[48, "sympy.codegen.fnodes.use"]], "use_rename (class in sympy.codegen.fnodes)": [[48, "sympy.codegen.fnodes.use_rename"]], "using (class in sympy.codegen.cxxnodes)": [[48, "sympy.codegen.cxxnodes.using"]], "a4_in_s6() (in module sympy.combinatorics.galois)": [[50, "sympy.combinatorics.galois.A4_in_S6"]], "a4xc2() (in module sympy.combinatorics.galois)": [[50, "sympy.combinatorics.galois.A4xC2"]], "g18() (in module sympy.combinatorics.galois)": [[50, "sympy.combinatorics.galois.G18"]], "g36m() (in module sympy.combinatorics.galois)": [[50, "sympy.combinatorics.galois.G36m"]], "g36p() (in module sympy.combinatorics.galois)": [[50, "sympy.combinatorics.galois.G36p"]], "g72() (in module sympy.combinatorics.galois)": [[50, "sympy.combinatorics.galois.G72"]], "m20() (in module sympy.combinatorics.galois)": [[50, "sympy.combinatorics.galois.M20"]], "pgl2f5() (in module sympy.combinatorics.galois)": [[50, "sympy.combinatorics.galois.PGL2F5"]], "psl2f5() (in module sympy.combinatorics.galois)": [[50, "sympy.combinatorics.galois.PSL2F5"]], "s1transitivesubgroups (class in sympy.combinatorics.galois)": [[50, "sympy.combinatorics.galois.S1TransitiveSubgroups"]], "s2transitivesubgroups (class in sympy.combinatorics.galois)": [[50, "sympy.combinatorics.galois.S2TransitiveSubgroups"]], "s3transitivesubgroups (class in sympy.combinatorics.galois)": [[50, "sympy.combinatorics.galois.S3TransitiveSubgroups"]], "s3_in_s6() (in module sympy.combinatorics.galois)": [[50, "sympy.combinatorics.galois.S3_in_S6"]], "s4transitivesubgroups (class in sympy.combinatorics.galois)": [[50, "sympy.combinatorics.galois.S4TransitiveSubgroups"]], "s4m() (in module sympy.combinatorics.galois)": [[50, "sympy.combinatorics.galois.S4m"]], "s4p() (in module sympy.combinatorics.galois)": [[50, "sympy.combinatorics.galois.S4p"]], "s4xc2() (in module sympy.combinatorics.galois)": [[50, "sympy.combinatorics.galois.S4xC2"]], "s5transitivesubgroups (class in sympy.combinatorics.galois)": [[50, "sympy.combinatorics.galois.S5TransitiveSubgroups"]], "s6transitivesubgroups (class in sympy.combinatorics.galois)": [[50, "sympy.combinatorics.galois.S6TransitiveSubgroups"]], "find_transitive_subgroups_of_s6() (in module sympy.combinatorics.galois)": [[50, "sympy.combinatorics.galois.find_transitive_subgroups_of_S6"]], "four_group() (in module sympy.combinatorics.galois)": [[50, "sympy.combinatorics.galois.four_group"]], "sympy.combinatorics.galois": [[50, "module-sympy.combinatorics.galois"]], "graycode (class in sympy.combinatorics.graycode)": [[51, "sympy.combinatorics.graycode.GrayCode"]], "bin_to_gray() (sympy.combinatorics.graycode method)": [[51, "sympy.combinatorics.graycode.bin_to_gray"]], "current (sympy.combinatorics.graycode.graycode property)": [[51, "sympy.combinatorics.graycode.GrayCode.current"]], "generate_gray() (sympy.combinatorics.graycode.graycode method)": [[51, "sympy.combinatorics.graycode.GrayCode.generate_gray"]], "get_subset_from_bitstring() (sympy.combinatorics.graycode method)": [[51, "sympy.combinatorics.graycode.get_subset_from_bitstring"]], "gray_to_bin() (sympy.combinatorics.graycode method)": [[51, "sympy.combinatorics.graycode.gray_to_bin"]], "graycode_subsets() (sympy.combinatorics.graycode method)": [[51, "sympy.combinatorics.graycode.graycode_subsets"]], "n (sympy.combinatorics.graycode.graycode property)": [[51, "sympy.combinatorics.graycode.GrayCode.n"]], "next() (sympy.combinatorics.graycode.graycode method)": [[51, "sympy.combinatorics.graycode.GrayCode.next"]], "random_bitstring() (sympy.combinatorics.graycode method)": [[51, "sympy.combinatorics.graycode.random_bitstring"]], "rank (sympy.combinatorics.graycode.graycode property)": [[51, "sympy.combinatorics.graycode.GrayCode.rank"]], "selections (sympy.combinatorics.graycode.graycode property)": [[51, "sympy.combinatorics.graycode.GrayCode.selections"]], "skip() (sympy.combinatorics.graycode.graycode method)": [[51, "sympy.combinatorics.graycode.GrayCode.skip"]], "sympy.combinatorics.graycode": [[51, "module-sympy.combinatorics.graycode"]], "unrank() (sympy.combinatorics.graycode.graycode class method)": [[51, "sympy.combinatorics.graycode.GrayCode.unrank"]], "directproduct() (in module sympy.combinatorics.group_constructs)": [[52, "sympy.combinatorics.group_constructs.DirectProduct"]], "sympy.combinatorics.group_constructs": [[52, "module-sympy.combinatorics.group_constructs"]], "is_abelian_number() (in module sympy.combinatorics.group_numbers)": [[53, "sympy.combinatorics.group_numbers.is_abelian_number"]], "is_cyclic_number() (in module sympy.combinatorics.group_numbers)": [[53, "sympy.combinatorics.group_numbers.is_cyclic_number"]], "is_nilpotent_number() (in module sympy.combinatorics.group_numbers)": [[53, "sympy.combinatorics.group_numbers.is_nilpotent_number"]], "sympy.combinatorics.group_numbers": [[53, "module-sympy.combinatorics.group_numbers"]], "abeliangroup() (in module sympy.combinatorics.named_groups)": [[55, "sympy.combinatorics.named_groups.AbelianGroup"]], "alternatinggroup() (in module sympy.combinatorics.named_groups)": [[55, "sympy.combinatorics.named_groups.AlternatingGroup"]], "cyclicgroup() (in module sympy.combinatorics.named_groups)": [[55, "sympy.combinatorics.named_groups.CyclicGroup"]], "dihedralgroup() (in module sympy.combinatorics.named_groups)": [[55, "sympy.combinatorics.named_groups.DihedralGroup"]], "symmetricgroup() (in module sympy.combinatorics.named_groups)": [[55, "sympy.combinatorics.named_groups.SymmetricGroup"]], "sympy.combinatorics.named_groups": [[55, "module-sympy.combinatorics.named_groups"]], "integerpartition (class in sympy.combinatorics.partitions)": [[56, "sympy.combinatorics.partitions.IntegerPartition"]], "partition (class in sympy.combinatorics.partitions)": [[56, "sympy.combinatorics.partitions.Partition"]], "rgs (sympy.combinatorics.partitions.partition property)": [[56, "sympy.combinatorics.partitions.Partition.RGS"]], "rgs_enum() (in module sympy.combinatorics.partitions)": [[56, "sympy.combinatorics.partitions.RGS_enum"]], "rgs_generalized() (in module sympy.combinatorics.partitions)": [[56, "sympy.combinatorics.partitions.RGS_generalized"]], "rgs_rank() (in module sympy.combinatorics.partitions)": [[56, "sympy.combinatorics.partitions.RGS_rank"]], "rgs_unrank() (in module sympy.combinatorics.partitions)": [[56, "sympy.combinatorics.partitions.RGS_unrank"]], "as_dict() (sympy.combinatorics.partitions.integerpartition method)": [[56, "sympy.combinatorics.partitions.IntegerPartition.as_dict"]], "as_ferrers() (sympy.combinatorics.partitions.integerpartition method)": [[56, "sympy.combinatorics.partitions.IntegerPartition.as_ferrers"]], "conjugate (sympy.combinatorics.partitions.integerpartition property)": [[56, "sympy.combinatorics.partitions.IntegerPartition.conjugate"]], "from_rgs() (sympy.combinatorics.partitions.partition class method)": [[56, "sympy.combinatorics.partitions.Partition.from_rgs"]], "next_lex() (sympy.combinatorics.partitions.integerpartition method)": [[56, "sympy.combinatorics.partitions.IntegerPartition.next_lex"]], "partition (sympy.combinatorics.partitions.partition property)": [[56, "sympy.combinatorics.partitions.Partition.partition"]], "prev_lex() (sympy.combinatorics.partitions.integerpartition method)": [[56, "sympy.combinatorics.partitions.IntegerPartition.prev_lex"]], "random_integer_partition() (in module sympy.combinatorics.partitions)": [[56, "sympy.combinatorics.partitions.random_integer_partition"]], "rank (sympy.combinatorics.partitions.partition property)": [[56, "sympy.combinatorics.partitions.Partition.rank"]], "sort_key() (sympy.combinatorics.partitions.partition method)": [[56, "sympy.combinatorics.partitions.Partition.sort_key"]], "sympy.combinatorics.partitions": [[56, "module-sympy.combinatorics.partitions"]], "permutationgroup (class in sympy.combinatorics.perm_groups)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup"]], "__contains__() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.__contains__"]], "__mul__() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.__mul__"]], "__new__() (sympy.combinatorics.perm_groups.permutationgroup static method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.__new__"]], "__weakref__ (sympy.combinatorics.perm_groups.permutationgroup attribute)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.__weakref__"]], "_coset_representative() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup._coset_representative"]], "_distinct_primes_lemma() (sympy.combinatorics.perm_groups.permutationgroup class method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup._distinct_primes_lemma"]], "_elements (sympy.combinatorics.perm_groups.permutationgroup property)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup._elements"]], "_eval_is_alt_sym_monte_carlo() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup._eval_is_alt_sym_monte_carlo"]], "_eval_is_alt_sym_naive() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup._eval_is_alt_sym_naive"]], "_p_elements_group() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup._p_elements_group"]], "_random_pr_init() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup._random_pr_init"]], "_sylow_alt_sym() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup._sylow_alt_sym"]], "_union_find_merge() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup._union_find_merge"]], "_union_find_rep() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup._union_find_rep"]], "_verify() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup._verify"]], "abelian_invariants() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.abelian_invariants"]], "base (sympy.combinatorics.perm_groups.permutationgroup property)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.base"]], "baseswap() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.baseswap"]], "basic_orbits (sympy.combinatorics.perm_groups.permutationgroup property)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.basic_orbits"]], "basic_stabilizers (sympy.combinatorics.perm_groups.permutationgroup property)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.basic_stabilizers"]], "basic_transversals (sympy.combinatorics.perm_groups.permutationgroup property)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.basic_transversals"]], "center() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.center"]], "centralizer() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.centralizer"]], "commutator() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.commutator"]], "composition_series() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.composition_series"]], "conjugacy_class() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.conjugacy_class"]], "conjugacy_classes() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.conjugacy_classes"]], "contains() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.contains"]], "coset_factor() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.coset_factor"]], "coset_rank() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.coset_rank"]], "coset_table() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.coset_table"]], "coset_transversal() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.coset_transversal"]], "coset_unrank() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.coset_unrank"]], "degree (sympy.combinatorics.perm_groups.permutationgroup property)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.degree"]], "derived_series() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.derived_series"]], "derived_subgroup() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.derived_subgroup"]], "elements (sympy.combinatorics.perm_groups.permutationgroup property)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.elements"]], "equals() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.equals"]], "generate() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.generate"]], "generate_dimino() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.generate_dimino"]], "generate_schreier_sims() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.generate_schreier_sims"]], "generator_product() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.generator_product"]], "generators (sympy.combinatorics.perm_groups.permutationgroup property)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.generators"]], "identity (sympy.combinatorics.perm_groups.permutationgroup property)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.identity"]], "index() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.index"]], "is_abelian (sympy.combinatorics.perm_groups.permutationgroup property)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.is_abelian"]], "is_alt_sym() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.is_alt_sym"]], "is_alternating (sympy.combinatorics.perm_groups.permutationgroup property)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.is_alternating"]], "is_cyclic (sympy.combinatorics.perm_groups.permutationgroup property)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.is_cyclic"]], "is_dihedral (sympy.combinatorics.perm_groups.permutationgroup property)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.is_dihedral"]], "is_elementary() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.is_elementary"]], "is_nilpotent (sympy.combinatorics.perm_groups.permutationgroup property)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.is_nilpotent"]], "is_normal() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.is_normal"]], "is_perfect (sympy.combinatorics.perm_groups.permutationgroup property)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.is_perfect"]], "is_polycyclic (sympy.combinatorics.perm_groups.permutationgroup property)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.is_polycyclic"]], "is_primitive() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.is_primitive"]], "is_solvable (sympy.combinatorics.perm_groups.permutationgroup property)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.is_solvable"]], "is_subgroup() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.is_subgroup"]], "is_symmetric (sympy.combinatorics.perm_groups.permutationgroup property)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.is_symmetric"]], "is_transitive() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.is_transitive"]], "is_trivial (sympy.combinatorics.perm_groups.permutationgroup property)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.is_trivial"]], "lower_central_series() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.lower_central_series"]], "make_perm() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.make_perm"]], "max_div (sympy.combinatorics.perm_groups.permutationgroup property)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.max_div"]], "minimal_block() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.minimal_block"]], "minimal_blocks() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.minimal_blocks"]], "normal_closure() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.normal_closure"]], "orbit() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.orbit"]], "orbit_rep() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.orbit_rep"]], "orbit_transversal() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.orbit_transversal"]], "orbits() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.orbits"]], "order() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.order"]], "pointwise_stabilizer() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.pointwise_stabilizer"]], "polycyclic_group() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.polycyclic_group"]], "presentation() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.presentation"]], "random() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.random"]], "random_pr() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.random_pr"]], "random_stab() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.random_stab"]], "schreier_sims() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims"]], "schreier_sims_incremental() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims_incremental"]], "schreier_sims_random() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims_random"]], "schreier_vector() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.schreier_vector"]], "stabilizer() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.stabilizer"]], "strong_gens (sympy.combinatorics.perm_groups.permutationgroup property)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.strong_gens"]], "strong_presentation() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.strong_presentation"]], "subgroup() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.subgroup"]], "subgroup_search() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.subgroup_search"]], "sylow_subgroup() (sympy.combinatorics.perm_groups.permutationgroup method)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.sylow_subgroup"]], "sympy.combinatorics.perm_groups": [[58, "module-sympy.combinatorics.perm_groups"]], "transitivity_degree (sympy.combinatorics.perm_groups.permutationgroup property)": [[58, "sympy.combinatorics.perm_groups.PermutationGroup.transitivity_degree"]], "cycle (class in sympy.combinatorics.permutations)": [[59, "sympy.combinatorics.permutations.Cycle"]], "permutation (class in sympy.combinatorics.permutations)": [[59, "sympy.combinatorics.permutations.Permutation"]], "_af_parity() (in module sympy.combinatorics.permutations)": [[59, "sympy.combinatorics.permutations._af_parity"]], "alternating() (sympy.combinatorics.generators method)": [[59, "sympy.combinatorics.generators.alternating"]], "apply() (sympy.combinatorics.permutations.permutation method)": [[59, "sympy.combinatorics.permutations.Permutation.apply"]], "array_form (sympy.combinatorics.permutations.permutation property)": [[59, "sympy.combinatorics.permutations.Permutation.array_form"]], "ascents() (sympy.combinatorics.permutations.permutation method)": [[59, "sympy.combinatorics.permutations.Permutation.ascents"]], "atoms() (sympy.combinatorics.permutations.permutation method)": [[59, "sympy.combinatorics.permutations.Permutation.atoms"]], "cardinality (sympy.combinatorics.permutations.permutation property)": [[59, "sympy.combinatorics.permutations.Permutation.cardinality"]], "commutator() (sympy.combinatorics.permutations.permutation method)": [[59, "sympy.combinatorics.permutations.Permutation.commutator"]], "commutes_with() (sympy.combinatorics.permutations.permutation method)": [[59, "sympy.combinatorics.permutations.Permutation.commutes_with"]], "cycle_structure (sympy.combinatorics.permutations.permutation property)": [[59, "sympy.combinatorics.permutations.Permutation.cycle_structure"]], "cycles (sympy.combinatorics.permutations.permutation property)": [[59, "sympy.combinatorics.permutations.Permutation.cycles"]], "cyclic() (sympy.combinatorics.generators method)": [[59, "sympy.combinatorics.generators.cyclic"]], "cyclic_form (sympy.combinatorics.permutations.permutation property)": [[59, "sympy.combinatorics.permutations.Permutation.cyclic_form"]], "descents() (sympy.combinatorics.permutations.permutation method)": [[59, "sympy.combinatorics.permutations.Permutation.descents"]], "dihedral() (sympy.combinatorics.generators method)": [[59, "sympy.combinatorics.generators.dihedral"]], "from_inversion_vector() (sympy.combinatorics.permutations.permutation class method)": [[59, "sympy.combinatorics.permutations.Permutation.from_inversion_vector"]], "from_sequence() (sympy.combinatorics.permutations.permutation class method)": [[59, "sympy.combinatorics.permutations.Permutation.from_sequence"]], "full_cyclic_form (sympy.combinatorics.permutations.permutation property)": [[59, "sympy.combinatorics.permutations.Permutation.full_cyclic_form"]], "get_adjacency_distance() (sympy.combinatorics.permutations.permutation method)": [[59, "sympy.combinatorics.permutations.Permutation.get_adjacency_distance"]], "get_adjacency_matrix() (sympy.combinatorics.permutations.permutation method)": [[59, "sympy.combinatorics.permutations.Permutation.get_adjacency_matrix"]], "get_positional_distance() (sympy.combinatorics.permutations.permutation method)": [[59, "sympy.combinatorics.permutations.Permutation.get_positional_distance"]], "get_precedence_distance() (sympy.combinatorics.permutations.permutation method)": [[59, "sympy.combinatorics.permutations.Permutation.get_precedence_distance"]], "get_precedence_matrix() (sympy.combinatorics.permutations.permutation method)": [[59, "sympy.combinatorics.permutations.Permutation.get_precedence_matrix"]], "index() (sympy.combinatorics.permutations.permutation method)": [[59, "sympy.combinatorics.permutations.Permutation.index"]], "inversion_vector() (sympy.combinatorics.permutations.permutation method)": [[59, "sympy.combinatorics.permutations.Permutation.inversion_vector"]], "inversions() (sympy.combinatorics.permutations.permutation method)": [[59, "sympy.combinatorics.permutations.Permutation.inversions"]], "is_empty (sympy.combinatorics.permutations.permutation property)": [[59, "sympy.combinatorics.permutations.Permutation.is_Empty"]], "is_identity (sympy.combinatorics.permutations.permutation property)": [[59, "sympy.combinatorics.permutations.Permutation.is_Identity"]], "is_singleton (sympy.combinatorics.permutations.permutation property)": [[59, "sympy.combinatorics.permutations.Permutation.is_Singleton"]], "is_even (sympy.combinatorics.permutations.permutation property)": [[59, "sympy.combinatorics.permutations.Permutation.is_even"]], "is_odd (sympy.combinatorics.permutations.permutation property)": [[59, "sympy.combinatorics.permutations.Permutation.is_odd"]], "josephus() (sympy.combinatorics.permutations.permutation class method)": [[59, "sympy.combinatorics.permutations.Permutation.josephus"]], "length() (sympy.combinatorics.permutations.permutation method)": [[59, "sympy.combinatorics.permutations.Permutation.length"]], "list() (sympy.combinatorics.permutations.cycle method)": [[59, "sympy.combinatorics.permutations.Cycle.list"]], "list() (sympy.combinatorics.permutations.permutation method)": [[59, "sympy.combinatorics.permutations.Permutation.list"]], "max() (sympy.combinatorics.permutations.permutation method)": [[59, "sympy.combinatorics.permutations.Permutation.max"]], "min() (sympy.combinatorics.permutations.permutation method)": [[59, "sympy.combinatorics.permutations.Permutation.min"]], "mul_inv() (sympy.combinatorics.permutations.permutation method)": [[59, "sympy.combinatorics.permutations.Permutation.mul_inv"]], "next_lex() (sympy.combinatorics.permutations.permutation method)": [[59, "sympy.combinatorics.permutations.Permutation.next_lex"]], "next_nonlex() (sympy.combinatorics.permutations.permutation method)": [[59, "sympy.combinatorics.permutations.Permutation.next_nonlex"]], "next_trotterjohnson() (sympy.combinatorics.permutations.permutation method)": [[59, "sympy.combinatorics.permutations.Permutation.next_trotterjohnson"]], "order() (sympy.combinatorics.permutations.permutation method)": [[59, "sympy.combinatorics.permutations.Permutation.order"]], "parity() (sympy.combinatorics.permutations.permutation method)": [[59, "sympy.combinatorics.permutations.Permutation.parity"]], "random() (sympy.combinatorics.permutations.permutation class method)": [[59, "sympy.combinatorics.permutations.Permutation.random"]], "rank() (sympy.combinatorics.permutations.permutation method)": [[59, "sympy.combinatorics.permutations.Permutation.rank"]], "rank_nonlex() (sympy.combinatorics.permutations.permutation method)": [[59, "sympy.combinatorics.permutations.Permutation.rank_nonlex"]], "rank_trotterjohnson() (sympy.combinatorics.permutations.permutation method)": [[59, "sympy.combinatorics.permutations.Permutation.rank_trotterjohnson"]], "resize() (sympy.combinatorics.permutations.permutation method)": [[59, "sympy.combinatorics.permutations.Permutation.resize"]], "rmul() (sympy.combinatorics.permutations.permutation static method)": [[59, "sympy.combinatorics.permutations.Permutation.rmul"]], "rmul_with_af() (sympy.combinatorics.permutations.permutation class method)": [[59, "sympy.combinatorics.permutations.Permutation.rmul_with_af"]], "runs() (sympy.combinatorics.permutations.permutation method)": [[59, "sympy.combinatorics.permutations.Permutation.runs"]], "signature() (sympy.combinatorics.permutations.permutation method)": [[59, "sympy.combinatorics.permutations.Permutation.signature"]], "size (sympy.combinatorics.permutations.permutation property)": [[59, "sympy.combinatorics.permutations.Permutation.size"]], "support() (sympy.combinatorics.permutations.permutation method)": [[59, "sympy.combinatorics.permutations.Permutation.support"]], "symmetric() (sympy.combinatorics.generators method)": [[59, "sympy.combinatorics.generators.symmetric"]], "sympy.combinatorics.generators": [[59, "module-sympy.combinatorics.generators"]], "sympy.combinatorics.permutations": [[59, "module-sympy.combinatorics.permutations"]], "transpositions() (sympy.combinatorics.permutations.permutation method)": [[59, "sympy.combinatorics.permutations.Permutation.transpositions"]], "unrank_lex() (sympy.combinatorics.permutations.permutation class method)": [[59, "sympy.combinatorics.permutations.Permutation.unrank_lex"]], "unrank_nonlex() (sympy.combinatorics.permutations.permutation class method)": [[59, "sympy.combinatorics.permutations.Permutation.unrank_nonlex"]], "unrank_trotterjohnson() (sympy.combinatorics.permutations.permutation class method)": [[59, "sympy.combinatorics.permutations.Permutation.unrank_trotterjohnson"]], "polyhedron (class in sympy.combinatorics.polyhedron)": [[60, "sympy.combinatorics.polyhedron.Polyhedron"]], "array_form (sympy.combinatorics.polyhedron.polyhedron property)": [[60, "sympy.combinatorics.polyhedron.Polyhedron.array_form"]], "corners (sympy.combinatorics.polyhedron.polyhedron property)": [[60, "sympy.combinatorics.polyhedron.Polyhedron.corners"]], "cyclic_form (sympy.combinatorics.polyhedron.polyhedron property)": [[60, "sympy.combinatorics.polyhedron.Polyhedron.cyclic_form"]], "edges (sympy.combinatorics.polyhedron.polyhedron property)": [[60, "sympy.combinatorics.polyhedron.Polyhedron.edges"]], "faces (sympy.combinatorics.polyhedron.polyhedron property)": [[60, "sympy.combinatorics.polyhedron.Polyhedron.faces"]], "pgroup (sympy.combinatorics.polyhedron.polyhedron property)": [[60, "sympy.combinatorics.polyhedron.Polyhedron.pgroup"]], "reset() (sympy.combinatorics.polyhedron.polyhedron method)": [[60, "sympy.combinatorics.polyhedron.Polyhedron.reset"]], "rotate() (sympy.combinatorics.polyhedron.polyhedron method)": [[60, "sympy.combinatorics.polyhedron.Polyhedron.rotate"]], "size (sympy.combinatorics.polyhedron.polyhedron property)": [[60, "sympy.combinatorics.polyhedron.Polyhedron.size"]], "sympy.combinatorics.polyhedron": [[60, "module-sympy.combinatorics.polyhedron"]], "vertices (sympy.combinatorics.polyhedron.polyhedron property)": [[60, "sympy.combinatorics.polyhedron.Polyhedron.vertices"]], "prufer (class in sympy.combinatorics.prufer)": [[61, "sympy.combinatorics.prufer.Prufer"]], "edges() (sympy.combinatorics.prufer.prufer static method)": [[61, "sympy.combinatorics.prufer.Prufer.edges"]], "next() (sympy.combinatorics.prufer.prufer method)": [[61, "sympy.combinatorics.prufer.Prufer.next"]], "nodes (sympy.combinatorics.prufer.prufer property)": [[61, "sympy.combinatorics.prufer.Prufer.nodes"]], "prev() (sympy.combinatorics.prufer.prufer method)": [[61, "sympy.combinatorics.prufer.Prufer.prev"]], "prufer_rank() (sympy.combinatorics.prufer.prufer method)": [[61, "sympy.combinatorics.prufer.Prufer.prufer_rank"]], "prufer_repr (sympy.combinatorics.prufer.prufer property)": [[61, "sympy.combinatorics.prufer.Prufer.prufer_repr"]], "rank (sympy.combinatorics.prufer.prufer property)": [[61, "sympy.combinatorics.prufer.Prufer.rank"]], "size (sympy.combinatorics.prufer.prufer property)": [[61, "sympy.combinatorics.prufer.Prufer.size"]], "sympy.combinatorics.prufer": [[61, "module-sympy.combinatorics.prufer"]], "to_prufer() (sympy.combinatorics.prufer.prufer static method)": [[61, "sympy.combinatorics.prufer.Prufer.to_prufer"]], "to_tree() (sympy.combinatorics.prufer.prufer static method)": [[61, "sympy.combinatorics.prufer.Prufer.to_tree"]], "tree_repr (sympy.combinatorics.prufer.prufer property)": [[61, "sympy.combinatorics.prufer.Prufer.tree_repr"]], "unrank() (sympy.combinatorics.prufer.prufer class method)": [[61, "sympy.combinatorics.prufer.Prufer.unrank"]], "subset (class in sympy.combinatorics.subsets)": [[62, "sympy.combinatorics.subsets.Subset"]], "bitlist_from_subset() (sympy.combinatorics.subsets.subset class method)": [[62, "sympy.combinatorics.subsets.Subset.bitlist_from_subset"]], "cardinality (sympy.combinatorics.subsets.subset property)": [[62, "sympy.combinatorics.subsets.Subset.cardinality"]], "iterate_binary() (sympy.combinatorics.subsets.subset method)": [[62, "sympy.combinatorics.subsets.Subset.iterate_binary"]], "iterate_graycode() (sympy.combinatorics.subsets.subset method)": [[62, "sympy.combinatorics.subsets.Subset.iterate_graycode"]], "ksubsets() (sympy.combinatorics.subsets method)": [[62, "sympy.combinatorics.subsets.ksubsets"]], "next_binary() (sympy.combinatorics.subsets.subset method)": [[62, "sympy.combinatorics.subsets.Subset.next_binary"]], "next_gray() (sympy.combinatorics.subsets.subset method)": [[62, "sympy.combinatorics.subsets.Subset.next_gray"]], "next_lexicographic() (sympy.combinatorics.subsets.subset method)": [[62, "sympy.combinatorics.subsets.Subset.next_lexicographic"]], "prev_binary() (sympy.combinatorics.subsets.subset method)": [[62, "sympy.combinatorics.subsets.Subset.prev_binary"]], "prev_gray() (sympy.combinatorics.subsets.subset method)": [[62, "sympy.combinatorics.subsets.Subset.prev_gray"]], "prev_lexicographic() (sympy.combinatorics.subsets.subset method)": [[62, "sympy.combinatorics.subsets.Subset.prev_lexicographic"]], "rank_binary (sympy.combinatorics.subsets.subset property)": [[62, "sympy.combinatorics.subsets.Subset.rank_binary"]], "rank_gray (sympy.combinatorics.subsets.subset property)": [[62, "sympy.combinatorics.subsets.Subset.rank_gray"]], "rank_lexicographic (sympy.combinatorics.subsets.subset property)": [[62, "sympy.combinatorics.subsets.Subset.rank_lexicographic"]], "size (sympy.combinatorics.subsets.subset property)": [[62, "sympy.combinatorics.subsets.Subset.size"]], "subset (sympy.combinatorics.subsets.subset property)": [[62, "sympy.combinatorics.subsets.Subset.subset"]], "subset_from_bitlist() (sympy.combinatorics.subsets.subset class method)": [[62, "sympy.combinatorics.subsets.Subset.subset_from_bitlist"]], "subset_indices() (sympy.combinatorics.subsets.subset class method)": [[62, "sympy.combinatorics.subsets.Subset.subset_indices"]], "superset (sympy.combinatorics.subsets.subset property)": [[62, "sympy.combinatorics.subsets.Subset.superset"]], "superset_size (sympy.combinatorics.subsets.subset property)": [[62, "sympy.combinatorics.subsets.Subset.superset_size"]], "sympy.combinatorics.subsets": [[62, "module-sympy.combinatorics.subsets"]], "unrank_binary() (sympy.combinatorics.subsets.subset class method)": [[62, "sympy.combinatorics.subsets.Subset.unrank_binary"]], "unrank_gray() (sympy.combinatorics.subsets.subset class method)": [[62, "sympy.combinatorics.subsets.Subset.unrank_gray"]], "bsgs_direct_product() (in module sympy.combinatorics.tensor_can)": [[63, "sympy.combinatorics.tensor_can.bsgs_direct_product"]], "canonicalize() (in module sympy.combinatorics.tensor_can)": [[63, "sympy.combinatorics.tensor_can.canonicalize"]], "double_coset_can_rep() (in module sympy.combinatorics.tensor_can)": [[63, "sympy.combinatorics.tensor_can.double_coset_can_rep"]], "get_symmetric_group_sgs() (in module sympy.combinatorics.tensor_can)": [[63, "sympy.combinatorics.tensor_can.get_symmetric_group_sgs"]], "sympy.combinatorics.tensor_can": [[63, "module-sympy.combinatorics.tensor_can"]], "_cmp_perm_lists() (in module sympy.combinatorics.testutil)": [[64, "sympy.combinatorics.testutil._cmp_perm_lists"]], "_naive_list_centralizer() (in module sympy.combinatorics.testutil)": [[64, "sympy.combinatorics.testutil._naive_list_centralizer"]], "_verify_bsgs() (in module sympy.combinatorics.testutil)": [[64, "sympy.combinatorics.testutil._verify_bsgs"]], "_verify_centralizer() (in module sympy.combinatorics.testutil)": [[64, "sympy.combinatorics.testutil._verify_centralizer"]], "_verify_normal_closure() (in module sympy.combinatorics.testutil)": [[64, "sympy.combinatorics.testutil._verify_normal_closure"]], "sympy.combinatorics.testutil": [[64, "module-sympy.combinatorics.testutil"]], "_base_ordering() (in module sympy.combinatorics.util)": [[65, "sympy.combinatorics.util._base_ordering"]], "_check_cycles_alt_sym() (in module sympy.combinatorics.util)": [[65, "sympy.combinatorics.util._check_cycles_alt_sym"]], "_distribute_gens_by_base() (in module sympy.combinatorics.util)": [[65, "sympy.combinatorics.util._distribute_gens_by_base"]], "_handle_precomputed_bsgs() (in module sympy.combinatorics.util)": [[65, "sympy.combinatorics.util._handle_precomputed_bsgs"]], "_orbits_transversals_from_bsgs() (in module sympy.combinatorics.util)": [[65, "sympy.combinatorics.util._orbits_transversals_from_bsgs"]], "_remove_gens() (in module sympy.combinatorics.util)": [[65, "sympy.combinatorics.util._remove_gens"]], "_strip() (in module sympy.combinatorics.util)": [[65, "sympy.combinatorics.util._strip"]], "_strong_gens_from_distr() (in module sympy.combinatorics.util)": [[65, "sympy.combinatorics.util._strong_gens_from_distr"]], "sympy.combinatorics.util": [[65, "module-sympy.combinatorics.util"]], "exprwithintlimits (class in sympy.concrete.expr_with_intlimits)": [[66, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits"]], "product (class in sympy.concrete.products)": [[66, "sympy.concrete.products.Product"]], "sum (class in sympy.concrete.summations)": [[66, "sympy.concrete.summations.Sum"]], "change_index() (sympy.concrete.expr_with_intlimits.exprwithintlimits method)": [[66, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits.change_index"]], "euler_maclaurin() (sympy.concrete.summations.sum method)": [[66, "sympy.concrete.summations.Sum.euler_maclaurin"]], "eval_zeta_function() (sympy.concrete.summations.sum method)": [[66, "sympy.concrete.summations.Sum.eval_zeta_function"]], "gosper_normal() (in module sympy.concrete.gosper)": [[66, "sympy.concrete.gosper.gosper_normal"]], "gosper_sum() (in module sympy.concrete.gosper)": [[66, "sympy.concrete.gosper.gosper_sum"]], "gosper_term() (in module sympy.concrete.gosper)": [[66, "sympy.concrete.gosper.gosper_term"]], "has_empty_sequence (sympy.concrete.expr_with_intlimits.exprwithintlimits property)": [[66, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits.has_empty_sequence"]], "index() (sympy.concrete.expr_with_intlimits.exprwithintlimits method)": [[66, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits.index"]], "is_absolutely_convergent() (sympy.concrete.summations.sum method)": [[66, "sympy.concrete.summations.Sum.is_absolutely_convergent"]], "is_convergent() (sympy.concrete.products.product method)": [[66, "sympy.concrete.products.Product.is_convergent"]], "is_convergent() (sympy.concrete.summations.sum method)": [[66, "sympy.concrete.summations.Sum.is_convergent"]], "product() (in module sympy.concrete.products)": [[66, "sympy.concrete.products.product"]], "reorder() (sympy.concrete.expr_with_intlimits.exprwithintlimits method)": [[66, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits.reorder"]], "reorder_limit() (sympy.concrete.expr_with_intlimits.exprwithintlimits method)": [[66, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits.reorder_limit"]], "reverse_order() (sympy.concrete.products.product method)": [[66, "sympy.concrete.products.Product.reverse_order"]], "reverse_order() (sympy.concrete.summations.sum method)": [[66, "sympy.concrete.summations.Sum.reverse_order"]], "summation() (in module sympy.concrete.summations)": [[66, "sympy.concrete.summations.summation"]], "add (class in sympy.core.add)": [[67, "sympy.core.add.Add"]], "algebraicnumber (class in sympy.core.numbers)": [[67, "sympy.core.numbers.AlgebraicNumber"]], "atom (class in sympy.core.basic)": [[67, "sympy.core.basic.Atom"]], "atomicexpr (class in sympy.core.expr)": [[67, "sympy.core.expr.AtomicExpr"]], "basic (class in sympy.core.basic)": [[67, "sympy.core.basic.Basic"]], "booleankind (in module sympy.core.kind)": [[67, "sympy.core.kind.BooleanKind"]], "catalan (class in sympy.core.numbers)": [[67, "sympy.core.numbers.Catalan"]], "complexinfinity (class in sympy.core.numbers)": [[67, "sympy.core.numbers.ComplexInfinity"]], "derivative (class in sympy.core.function)": [[67, "sympy.core.function.Derivative"]], "dict (class in sympy.core.containers)": [[67, "sympy.core.containers.Dict"]], "dummy (class in sympy.core.symbol)": [[67, "sympy.core.symbol.Dummy"]], "eq (in module sympy.core.relational)": [[67, "sympy.core.relational.Eq"]], "equality (class in sympy.core.relational)": [[67, "sympy.core.relational.Equality"]], "eulergamma (class in sympy.core.numbers)": [[67, "sympy.core.numbers.EulerGamma"]], "evalfmixin (class in sympy.core.evalf)": [[67, "sympy.core.evalf.EvalfMixin"]], "exp1 (class in sympy.core.numbers)": [[67, "sympy.core.numbers.Exp1"]], "expr (class in sympy.core.expr)": [[67, "sympy.core.expr.Expr"]], "float (class in sympy.core.numbers)": [[67, "sympy.core.numbers.Float"]], "function (class in sympy.core.function)": [[67, "sympy.core.function.Function"]], "functionclass (class in sympy.core.function)": [[67, "sympy.core.function.FunctionClass"]], "ge (in module sympy.core.relational)": [[67, "sympy.core.relational.Ge"]], "goldenratio (class in sympy.core.numbers)": [[67, "sympy.core.numbers.GoldenRatio"]], "greaterthan (class in sympy.core.relational)": [[67, "sympy.core.relational.GreaterThan"]], "gt (in module sympy.core.relational)": [[67, "sympy.core.relational.Gt"]], "half (class in sympy.core.numbers)": [[67, "sympy.core.numbers.Half"]], "imaginaryunit (class in sympy.core.numbers)": [[67, "sympy.core.numbers.ImaginaryUnit"]], "infinity (class in sympy.core.numbers)": [[67, "sympy.core.numbers.Infinity"]], "integer (class in sympy.core.numbers)": [[67, "sympy.core.numbers.Integer"]], "kind (class in sympy.core.kind)": [[67, "sympy.core.kind.Kind"]], "lambda (class in sympy.core.function)": [[67, "sympy.core.function.Lambda"]], "le (in module sympy.core.relational)": [[67, "sympy.core.relational.Le"]], "lessthan (class in sympy.core.relational)": [[67, "sympy.core.relational.LessThan"]], "lt (in module sympy.core.relational)": [[67, "sympy.core.relational.Lt"]], "mod (class in sympy.core.mod)": [[67, "sympy.core.mod.Mod"]], "mul (class in sympy.core.mul)": [[67, "sympy.core.mul.Mul"]], "n() (in module sympy.core.evalf)": [[67, "sympy.core.evalf.N"]], "nan (class in sympy.core.numbers)": [[67, "sympy.core.numbers.NaN"]], "ne (in module sympy.core.relational)": [[67, "sympy.core.relational.Ne"]], "negativeinfinity (class in sympy.core.numbers)": [[67, "sympy.core.numbers.NegativeInfinity"]], "negativeone (class in sympy.core.numbers)": [[67, "sympy.core.numbers.NegativeOne"]], "number (class in sympy.core.numbers)": [[67, "sympy.core.numbers.Number"]], "numberkind (in module sympy.core.kind)": [[67, "sympy.core.kind.NumberKind"]], "numbersymbol (class in sympy.core.numbers)": [[67, "sympy.core.numbers.NumberSymbol"]], "one (class in sympy.core.numbers)": [[67, "sympy.core.numbers.One"]], "pep 335": [[67, "index-0"], [67, "index-1"], [67, "index-2"], [67, "index-3"]], "pi (class in sympy.core.numbers)": [[67, "sympy.core.numbers.Pi"]], "poleerror (class in sympy.core.function)": [[67, "sympy.core.function.PoleError"]], "pow (class in sympy.core.power)": [[67, "sympy.core.power.Pow"]], "precisionexhausted (class in sympy.core.evalf)": [[67, "sympy.core.evalf.PrecisionExhausted"]], "python enhancement proposals": [[67, "index-0"], [67, "index-1"], [67, "index-2"], [67, "index-3"]], "rational (class in sympy.core.numbers)": [[67, "sympy.core.numbers.Rational"]], "realnumber (in module sympy.core.numbers)": [[67, "sympy.core.numbers.RealNumber"]], "rel (in module sympy.core.relational)": [[67, "sympy.core.relational.Rel"]], "relational (class in sympy.core.relational)": [[67, "sympy.core.relational.Relational"]], "singleton (class in sympy.core.singleton)": [[67, "sympy.core.singleton.Singleton"]], "singletonregistry (class in sympy.core.singleton)": [[67, "sympy.core.singleton.SingletonRegistry"]], "strictgreaterthan (class in sympy.core.relational)": [[67, "sympy.core.relational.StrictGreaterThan"]], "strictlessthan (class in sympy.core.relational)": [[67, "sympy.core.relational.StrictLessThan"]], "subs (class in sympy.core.function)": [[67, "sympy.core.function.Subs"]], "symbol (class in sympy.core.symbol)": [[67, "sympy.core.symbol.Symbol"]], "tribonacciconstant (class in sympy.core.numbers)": [[67, "sympy.core.numbers.TribonacciConstant"]], "tuple (class in sympy.core.containers)": [[67, "sympy.core.containers.Tuple"]], "tuplekind (class in sympy.core.containers)": [[67, "sympy.core.containers.TupleKind"]], "undefinedkind (in module sympy.core.kind)": [[67, "sympy.core.kind.UndefinedKind"]], "unequality (class in sympy.core.relational)": [[67, "sympy.core.relational.Unequality"]], "unevaluatedexpr (class in sympy.core.expr)": [[67, "sympy.core.expr.UnevaluatedExpr"]], "wild (class in sympy.core.symbol)": [[67, "sympy.core.symbol.Wild"]], "wildfunction (class in sympy.core.function)": [[67, "sympy.core.function.WildFunction"]], "zero (class in sympy.core.numbers)": [[67, "sympy.core.numbers.Zero"]], "__cacheit() (in module sympy.core.cache)": [[67, "sympy.core.cache.__cacheit"]], "__new__() (sympy.core.numbers.algebraicnumber static method)": [[67, "sympy.core.numbers.AlgebraicNumber.__new__"]], "_diff_wrt (sympy.core.function.derivative property)": [[67, "sympy.core.function.Derivative._diff_wrt"]], "_randint() (in module sympy.core.random)": [[67, "sympy.core.random._randint"]], "_randrange() (in module sympy.core.random)": [[67, "sympy.core.random._randrange"]], "_sort_variable_count() (sympy.core.function.derivative class method)": [[67, "sympy.core.function.Derivative._sort_variable_count"]], "algebraic": [[67, "term-algebraic"]], "antihermitian": [[67, "term-antihermitian"]], "apart() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.apart"]], "approximation() (sympy.core.numbers.numbersymbol method)": [[67, "sympy.core.numbers.NumberSymbol.approximation"]], "args (sympy.core.basic.basic property)": [[67, "sympy.core.basic.Basic.args"]], "args_cnc() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.args_cnc"]], "as_base_exp() (sympy.core.function.function method)": [[67, "sympy.core.function.Function.as_base_exp"]], "as_base_exp() (sympy.core.power.pow method)": [[67, "sympy.core.power.Pow.as_base_exp"]], "as_coeff_add() (sympy.core.add.add method)": [[67, "sympy.core.add.Add.as_coeff_Add"], [67, "sympy.core.add.Add.as_coeff_add"]], "as_coeff_add() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.as_coeff_Add"], [67, "sympy.core.expr.Expr.as_coeff_add"]], "as_coeff_add() (sympy.core.numbers.number method)": [[67, "sympy.core.numbers.Number.as_coeff_Add"]], "as_coeff_add() (sympy.core.numbers.rational method)": [[67, "sympy.core.numbers.Rational.as_coeff_Add"]], "as_coeff_mul() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.as_coeff_Mul"], [67, "sympy.core.expr.Expr.as_coeff_mul"]], "as_coeff_mul() (sympy.core.mul.mul method)": [[67, "sympy.core.mul.Mul.as_coeff_Mul"]], "as_coeff_mul() (sympy.core.numbers.number method)": [[67, "sympy.core.numbers.Number.as_coeff_Mul"]], "as_coeff_mul() (sympy.core.numbers.rational method)": [[67, "sympy.core.numbers.Rational.as_coeff_Mul"]], "as_coeff_exponent() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.as_coeff_exponent"]], "as_coefficient() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.as_coefficient"]], "as_coefficients_dict() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.as_coefficients_dict"]], "as_content_primitive() (sympy.core.add.add method)": [[67, "sympy.core.add.Add.as_content_primitive"]], "as_content_primitive() (sympy.core.basic.basic method)": [[67, "sympy.core.basic.Basic.as_content_primitive"]], "as_content_primitive() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.as_content_primitive"]], "as_content_primitive() (sympy.core.mul.mul method)": [[67, "sympy.core.mul.Mul.as_content_primitive"]], "as_content_primitive() (sympy.core.numbers.rational method)": [[67, "sympy.core.numbers.Rational.as_content_primitive"]], "as_content_primitive() (sympy.core.power.pow method)": [[67, "sympy.core.power.Pow.as_content_primitive"]], "as_dummy() (sympy.core.basic.basic method)": [[67, "sympy.core.basic.Basic.as_dummy"]], "as_expr() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.as_expr"]], "as_expr() (sympy.core.numbers.algebraicnumber method)": [[67, "sympy.core.numbers.AlgebraicNumber.as_expr"]], "as_finite_difference() (sympy.core.function.derivative method)": [[67, "sympy.core.function.Derivative.as_finite_difference"]], "as_independent() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.as_independent"]], "as_leading_term() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.as_leading_term"]], "as_numer_denom() (sympy.core.add.add method)": [[67, "sympy.core.add.Add.as_numer_denom"]], "as_numer_denom() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.as_numer_denom"]], "as_ordered_factors() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.as_ordered_factors"]], "as_ordered_factors() (sympy.core.mul.mul method)": [[67, "sympy.core.mul.Mul.as_ordered_factors"]], "as_ordered_terms() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.as_ordered_terms"]], "as_poly() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.as_poly"]], "as_poly() (sympy.core.numbers.algebraicnumber method)": [[67, "sympy.core.numbers.AlgebraicNumber.as_poly"]], "as_poly() (sympy.core.relational.equality method)": [[67, "sympy.core.relational.Equality.as_poly"]], "as_powers_dict() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.as_powers_dict"]], "as_real_imag() (sympy.core.add.add method)": [[67, "sympy.core.add.Add.as_real_imag"]], "as_real_imag() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.as_real_imag"]], "as_terms() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.as_terms"]], "as_two_terms() (sympy.core.add.add method)": [[67, "sympy.core.add.Add.as_two_terms"]], "as_two_terms() (sympy.core.mul.mul method)": [[67, "sympy.core.mul.Mul.as_two_terms"]], "aseries() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.aseries"]], "assumptions0 (sympy.core.basic.basic property)": [[67, "sympy.core.basic.Basic.assumptions0"]], "atoms() (sympy.core.basic.basic method)": [[67, "sympy.core.basic.Basic.atoms"]], "bottom_up() (in module sympy.core.traversal)": [[67, "sympy.core.traversal.bottom_up"]], "bound_symbols (sympy.core.function.lambda property)": [[67, "sympy.core.function.Lambda.bound_symbols"]], "bound_symbols (sympy.core.function.subs property)": [[67, "sympy.core.function.Subs.bound_symbols"]], "cancel() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.cancel"]], "canonical (sympy.core.relational.relational property)": [[67, "sympy.core.relational.Relational.canonical"]], "canonical_variables (sympy.core.basic.basic property)": [[67, "sympy.core.basic.Basic.canonical_variables"]], "class_key() (sympy.core.basic.basic class method)": [[67, "sympy.core.basic.Basic.class_key"]], "coeff() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.coeff"]], "coeffs() (sympy.core.numbers.algebraicnumber method)": [[67, "sympy.core.numbers.AlgebraicNumber.coeffs"]], "cofactors() (sympy.core.numbers.number method)": [[67, "sympy.core.numbers.Number.cofactors"]], "collect() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.collect"]], "combsimp() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.combsimp"]], "commutative": [[67, "term-commutative"]], "compare() (sympy.core.basic.basic method)": [[67, "sympy.core.basic.Basic.compare"]], "complex": [[67, "term-complex"]], "composite": [[67, "term-composite"]], "compute_leading_term() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.compute_leading_term"]], "conjugate() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.conjugate"]], "could_extract_minus_sign() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.could_extract_minus_sign"]], "count() (sympy.core.basic.basic method)": [[67, "sympy.core.basic.Basic.count"]], "count_ops() (in module sympy.core.function)": [[67, "sympy.core.function.count_ops"]], "count_ops() (sympy.core.basic.basic method)": [[67, "sympy.core.basic.Basic.count_ops"]], "default_sort_key() (in module sympy.core.sorting)": [[67, "sympy.core.sorting.default_sort_key"]], "diff() (in module sympy.core.function)": [[67, "sympy.core.function.diff"]], "doit() (sympy.core.basic.basic method)": [[67, "sympy.core.basic.Basic.doit"]], "doit_numerically() (sympy.core.function.derivative method)": [[67, "sympy.core.function.Derivative.doit_numerically"]], "dummy_eq() (sympy.core.basic.basic method)": [[67, "sympy.core.basic.Basic.dummy_eq"]], "equal_valued() (in module sympy.core.numbers)": [[67, "sympy.core.numbers.equal_valued"]], "equals() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.equals"]], "equals() (sympy.core.relational.relational method)": [[67, "sympy.core.relational.Relational.equals"]], "evalf() (sympy.core.evalf.evalfmixin method)": [[67, "sympy.core.evalf.EvalfMixin.evalf"]], "even": [[67, "term-even"]], "expand() (in module sympy.core.function)": [[67, "sympy.core.function.expand"]], "expand() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.expand"]], "expand_complex() (in module sympy.core.function)": [[67, "sympy.core.function.expand_complex"]], "expand_func() (in module sympy.core.function)": [[67, "sympy.core.function.expand_func"]], "expand_log() (in module sympy.core.function)": [[67, "sympy.core.function.expand_log"]], "expand_mul() (in module sympy.core.function)": [[67, "sympy.core.function.expand_mul"]], "expand_multinomial() (in module sympy.core.function)": [[67, "sympy.core.function.expand_multinomial"]], "expand_power_base() (in module sympy.core.function)": [[67, "sympy.core.function.expand_power_base"]], "expand_power_exp() (in module sympy.core.function)": [[67, "sympy.core.function.expand_power_exp"]], "expand_trig() (in module sympy.core.function)": [[67, "sympy.core.function.expand_trig"]], "expr (sympy.core.function.lambda property)": [[67, "sympy.core.function.Lambda.expr"]], "expr (sympy.core.function.subs property)": [[67, "sympy.core.function.Subs.expr"]], "expr_free_symbols (sympy.core.expr.expr property)": [[67, "sympy.core.expr.Expr.expr_free_symbols"]], "extended_negative": [[67, "term-extended_negative"]], "extended_nonnegative": [[67, "term-extended_nonnegative"]], "extended_nonpositive": [[67, "term-extended_nonpositive"]], "extended_nonzero": [[67, "term-extended_nonzero"]], "extended_positive": [[67, "term-extended_positive"]], "extended_real": [[67, "term-extended_real"]], "extract_additively() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.extract_additively"]], "extract_branch_factor() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.extract_branch_factor"]], "extract_leading_order() (sympy.core.add.add method)": [[67, "sympy.core.add.Add.extract_leading_order"]], "extract_multiplicatively() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.extract_multiplicatively"]], "factor() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.factor"]], "factor_terms() (in module sympy.core.exprtools)": [[67, "sympy.core.exprtools.factor_terms"]], "factors() (sympy.core.numbers.rational method)": [[67, "sympy.core.numbers.Rational.factors"]], "fdiff() (sympy.core.function.function method)": [[67, "sympy.core.function.Function.fdiff"]], "field_element() (sympy.core.numbers.algebraicnumber method)": [[67, "sympy.core.numbers.AlgebraicNumber.field_element"]], "find() (sympy.core.basic.basic method)": [[67, "sympy.core.basic.Basic.find"]], "finite": [[67, "term-finite"]], "flatten() (sympy.core.add.add class method)": [[67, "sympy.core.add.Add.flatten"]], "flatten() (sympy.core.mul.mul class method)": [[67, "sympy.core.mul.Mul.flatten"]], "fourier_series() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.fourier_series"]], "fps() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.fps"]], "free_symbols (sympy.core.basic.basic property)": [[67, "sympy.core.basic.Basic.free_symbols"]], "fromiter() (sympy.core.basic.basic class method)": [[67, "sympy.core.basic.Basic.fromiter"]], "func (sympy.core.basic.basic property)": [[67, "sympy.core.basic.Basic.func"]], "gammasimp() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.gammasimp"]], "gcd() (sympy.core.numbers.number method)": [[67, "sympy.core.numbers.Number.gcd"]], "gcd_terms() (in module sympy.core.exprtools)": [[67, "sympy.core.exprtools.gcd_terms"]], "get() (sympy.core.containers.dict method)": [[67, "sympy.core.containers.Dict.get"]], "geto() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.getO"]], "getn() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.getn"]], "has() (sympy.core.basic.basic method)": [[67, "sympy.core.basic.Basic.has"]], "has_free() (sympy.core.basic.basic method)": [[67, "sympy.core.basic.Basic.has_free"]], "has_xfree() (sympy.core.basic.basic method)": [[67, "sympy.core.basic.Basic.has_xfree"]], "hermitian": [[67, "term-hermitian"]], "igcd() (in module sympy.core.numbers)": [[67, "sympy.core.numbers.igcd"]], "ilcm() (in module sympy.core.numbers)": [[67, "sympy.core.numbers.ilcm"]], "imaginary": [[67, "term-imaginary"]], "index() (sympy.core.containers.tuple method)": [[67, "sympy.core.containers.Tuple.index"]], "infinite": [[67, "term-infinite"]], "integer": [[67, "term-integer"]], "integer_log() (in module sympy.core.power)": [[67, "sympy.core.power.integer_log"]], "integer_nthroot() (in module sympy.core.power)": [[67, "sympy.core.power.integer_nthroot"]], "integrate() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.integrate"]], "integrate() (sympy.core.relational.equality method)": [[67, "sympy.core.relational.Equality.integrate"]], "invert() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.invert"]], "irrational": [[67, "term-irrational"]], "is_algebraic_expr() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.is_algebraic_expr"]], "is_aliased (sympy.core.numbers.algebraicnumber property)": [[67, "sympy.core.numbers.AlgebraicNumber.is_aliased"]], "is_comparable (sympy.core.basic.basic property)": [[67, "sympy.core.basic.Basic.is_comparable"]], "is_constant() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.is_constant"]], "is_identity (sympy.core.function.lambda property)": [[67, "sympy.core.function.Lambda.is_identity"]], "is_meromorphic() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.is_meromorphic"]], "is_number (sympy.core.expr.expr property)": [[67, "sympy.core.expr.Expr.is_number"]], "is_polynomial() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.is_polynomial"]], "is_primitive_element (sympy.core.numbers.algebraicnumber property)": [[67, "sympy.core.numbers.AlgebraicNumber.is_primitive_element"]], "is_rational_function() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.is_rational_function"]], "is_singular() (sympy.core.function.function class method)": [[67, "sympy.core.function.Function.is_singular"]], "items() (sympy.core.containers.dict method)": [[67, "sympy.core.containers.Dict.items"]], "keys() (sympy.core.containers.dict method)": [[67, "sympy.core.containers.Dict.keys"]], "kind (sympy.core.containers.tuple property)": [[67, "sympy.core.containers.Tuple.kind"]], "lcm() (sympy.core.numbers.number method)": [[67, "sympy.core.numbers.Number.lcm"]], "leadterm() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.leadterm"]], "lhs (sympy.core.relational.relational property)": [[67, "sympy.core.relational.Relational.lhs"]], "limit() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.limit"]], "limit_denominator() (sympy.core.numbers.rational method)": [[67, "sympy.core.numbers.Rational.limit_denominator"]], "lseries() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.lseries"]], "match() (sympy.core.basic.basic method)": [[67, "sympy.core.basic.Basic.match"]], "matches() (sympy.core.basic.basic method)": [[67, "sympy.core.basic.Basic.matches"]], "minpoly_of_element() (sympy.core.numbers.algebraicnumber method)": [[67, "sympy.core.numbers.AlgebraicNumber.minpoly_of_element"]], "mod_inverse() (in module sympy.core.numbers)": [[67, "sympy.core.numbers.mod_inverse"]], "n() (sympy.core.evalf.evalfmixin method)": [[67, "sympy.core.evalf.EvalfMixin.n"]], "nargs (sympy.core.function.functionclass property)": [[67, "sympy.core.function.FunctionClass.nargs"]], "native_coeffs() (sympy.core.numbers.algebraicnumber method)": [[67, "sympy.core.numbers.AlgebraicNumber.native_coeffs"]], "negated (sympy.core.relational.relational property)": [[67, "sympy.core.relational.Relational.negated"]], "negative": [[67, "term-negative"]], "nfloat() (in module sympy.core.function)": [[67, "sympy.core.function.nfloat"]], "nonnegative": [[67, "term-nonnegative"]], "nonpositive": [[67, "term-nonpositive"]], "nonzero": [[67, "term-nonzero"]], "normal() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.normal"]], "nseries() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.nseries"]], "nsimplify() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.nsimplify"]], "odd": [[67, "term-odd"]], "ordered() (in module sympy.core.sorting)": [[67, "sympy.core.sorting.ordered"]], "point (sympy.core.function.subs property)": [[67, "sympy.core.function.Subs.point"]], "positive": [[67, "term-positive"]], "postorder_traversal() (in module sympy.core.traversal)": [[67, "sympy.core.traversal.postorder_traversal"]], "powsimp() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.powsimp"]], "preorder_traversal() (in module sympy.core.traversal)": [[67, "sympy.core.traversal.preorder_traversal"]], "prime": [[67, "term-prime"]], "primitive() (sympy.core.add.add method)": [[67, "sympy.core.add.Add.primitive"]], "primitive() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.primitive"]], "primitive_element() (sympy.core.numbers.algebraicnumber method)": [[67, "sympy.core.numbers.AlgebraicNumber.primitive_element"]], "prod() (in module sympy.core.mul)": [[67, "sympy.core.mul.prod"]], "radsimp() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.radsimp"]], "random_complex_number() (in module sympy.core.random)": [[67, "sympy.core.random.random_complex_number"]], "rational": [[67, "term-rational"]], "ratsimp() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.ratsimp"]], "rcall() (sympy.core.basic.basic method)": [[67, "sympy.core.basic.Basic.rcall"]], "real": [[67, "term-real"]], "refine() (sympy.core.basic.basic method)": [[67, "sympy.core.basic.Basic.refine"]], "removeo() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.removeO"]], "replace() (sympy.core.basic.basic method)": [[67, "sympy.core.basic.Basic.replace"]], "reversed (sympy.core.relational.relational property)": [[67, "sympy.core.relational.Relational.reversed"]], "reversedsign (sympy.core.relational.relational property)": [[67, "sympy.core.relational.Relational.reversedsign"]], "rewrite() (sympy.core.basic.basic method)": [[67, "sympy.core.basic.Basic.rewrite"]], "rhs (sympy.core.relational.relational property)": [[67, "sympy.core.relational.Relational.rhs"]], "round() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.round"]], "separate() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.separate"]], "series() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.series"]], "seterr() (in module sympy.core.numbers)": [[67, "sympy.core.numbers.seterr"]], "signature (sympy.core.function.lambda property)": [[67, "sympy.core.function.Lambda.signature"]], "simplify() (sympy.core.basic.basic method)": [[67, "sympy.core.basic.Basic.simplify"]], "sort_key() (sympy.core.basic.basic method)": [[67, "sympy.core.basic.Basic.sort_key"]], "strict (sympy.core.relational.relational property)": [[67, "sympy.core.relational.Relational.strict"]], "subs() (sympy.core.basic.basic method)": [[67, "sympy.core.basic.Basic.subs"]], "symbols() (in module sympy.core.symbol)": [[67, "sympy.core.symbol.symbols"]], "sympify() (in module sympy.core.sympify)": [[67, "sympy.core.sympify.sympify"]], "sympy.core.add": [[67, "module-sympy.core.add"]], "sympy.core.assumptions": [[67, "module-sympy.core.assumptions"]], "sympy.core.basic": [[67, "module-sympy.core.basic"]], "sympy.core.cache": [[67, "module-sympy.core.cache"]], "sympy.core.containers": [[67, "module-sympy.core.containers"]], "sympy.core.evalf": [[67, "module-sympy.core.evalf"]], "sympy.core.expr": [[67, "module-sympy.core.expr"]], "sympy.core.exprtools": [[67, "module-sympy.core.exprtools"]], "sympy.core.function": [[67, "module-sympy.core.function"]], "sympy.core.kind": [[67, "module-sympy.core.kind"]], "sympy.core.mod": [[67, "module-sympy.core.mod"]], "sympy.core.mul": [[67, "module-sympy.core.mul"]], "sympy.core.multidimensional": [[67, "module-sympy.core.multidimensional"]], "sympy.core.numbers": [[67, "module-sympy.core.numbers"]], "sympy.core.power": [[67, "module-sympy.core.power"]], "sympy.core.random": [[67, "module-sympy.core.random"]], "sympy.core.relational": [[67, "module-sympy.core.relational"]], "sympy.core.singleton": [[67, "module-sympy.core.singleton"]], "sympy.core.symbol": [[67, "module-sympy.core.symbol"]], "sympy.core.sympify": [[67, "module-sympy.core.sympify"]], "sympy.core.traversal": [[67, "module-sympy.core.traversal"]], "taylor_term() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.taylor_term"]], "test_derivative_numerically() (in module sympy.core.random)": [[67, "sympy.core.random.test_derivative_numerically"]], "to_algebraic_integer() (sympy.core.numbers.algebraicnumber method)": [[67, "sympy.core.numbers.AlgebraicNumber.to_algebraic_integer"]], "to_primitive_element() (sympy.core.numbers.algebraicnumber method)": [[67, "sympy.core.numbers.AlgebraicNumber.to_primitive_element"]], "to_root() (sympy.core.numbers.algebraicnumber method)": [[67, "sympy.core.numbers.AlgebraicNumber.to_root"]], "together() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.together"]], "transcendental": [[67, "term-transcendental"]], "trigsimp() (sympy.core.expr.expr method)": [[67, "sympy.core.expr.Expr.trigsimp"]], "tuple_count() (sympy.core.containers.tuple method)": [[67, "sympy.core.containers.Tuple.tuple_count"]], "use() (in module sympy.core.traversal)": [[67, "sympy.core.traversal.use"]], "values() (sympy.core.containers.dict method)": [[67, "sympy.core.containers.Dict.values"]], "var() (in module sympy.core.symbol)": [[67, "sympy.core.symbol.var"]], "variables (sympy.core.function.lambda property)": [[67, "sympy.core.function.Lambda.variables"]], "variables (sympy.core.function.subs property)": [[67, "sympy.core.function.Subs.variables"]], "vectorize (class in sympy.core.multidimensional)": [[67, "sympy.core.multidimensional.vectorize"]], "verify_numerically() (in module sympy.core.random)": [[67, "sympy.core.random.verify_numerically"]], "walk() (in module sympy.core.traversal)": [[67, "sympy.core.traversal.walk"]], "weak (sympy.core.relational.relational property)": [[67, "sympy.core.relational.Relational.weak"]], "xreplace() (sympy.core.basic.basic method)": [[67, "sympy.core.basic.Basic.xreplace"]], "zero": [[67, "term-zero"]], "az() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.AZ"]], "bifid5_square() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.bifid5_square"]], "bifid6_square() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.bifid6_square"]], "check_and_join() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.check_and_join"]], "cycle_list() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.cycle_list"]], "decipher_affine() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.decipher_affine"]], "decipher_atbash() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.decipher_atbash"]], "decipher_bifid() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.decipher_bifid"]], "decipher_bifid5() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.decipher_bifid5"]], "decipher_bifid6() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.decipher_bifid6"]], "decipher_elgamal() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.decipher_elgamal"]], "decipher_gm() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.decipher_gm"]], "decipher_hill() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.decipher_hill"]], "decipher_kid_rsa() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.decipher_kid_rsa"]], "decipher_railfence() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.decipher_railfence"]], "decipher_rot13() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.decipher_rot13"]], "decipher_rsa() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.decipher_rsa"]], "decipher_shift() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.decipher_shift"]], "decipher_vigenere() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.decipher_vigenere"]], "decode_morse() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.decode_morse"]], "dh_private_key() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.dh_private_key"]], "dh_public_key() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.dh_public_key"]], "dh_shared_key() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.dh_shared_key"]], "elgamal_private_key() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.elgamal_private_key"]], "elgamal_public_key() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.elgamal_public_key"]], "encipher_affine() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.encipher_affine"]], "encipher_atbash() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.encipher_atbash"]], "encipher_bifid() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.encipher_bifid"]], "encipher_bifid5() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.encipher_bifid5"]], "encipher_bifid6() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.encipher_bifid6"]], "encipher_elgamal() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.encipher_elgamal"]], "encipher_gm() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.encipher_gm"]], "encipher_hill() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.encipher_hill"]], "encipher_kid_rsa() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.encipher_kid_rsa"]], "encipher_railfence() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.encipher_railfence"]], "encipher_rot13() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.encipher_rot13"]], "encipher_rsa() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.encipher_rsa"]], "encipher_shift() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.encipher_shift"]], "encipher_substitution() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.encipher_substitution"]], "encipher_vigenere() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.encipher_vigenere"]], "encode_morse() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.encode_morse"]], "gm_private_key() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.gm_private_key"]], "gm_public_key() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.gm_public_key"]], "kid_rsa_private_key() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.kid_rsa_private_key"]], "kid_rsa_public_key() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.kid_rsa_public_key"]], "lfsr_autocorrelation() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.lfsr_autocorrelation"]], "lfsr_connection_polynomial() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.lfsr_connection_polynomial"]], "lfsr_sequence() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.lfsr_sequence"]], "padded_key() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.padded_key"]], "rsa_private_key() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.rsa_private_key"]], "rsa_public_key() (in module sympy.crypto.crypto)": [[68, "sympy.crypto.crypto.rsa_public_key"]], "sympy.crypto.crypto": [[68, "module-sympy.crypto.crypto"]], "basecovarderivativeop (class in sympy.diffgeom)": [[69, "sympy.diffgeom.BaseCovarDerivativeOp"]], "basescalarfield (class in sympy.diffgeom)": [[69, "sympy.diffgeom.BaseScalarField"]], "basevectorfield (class in sympy.diffgeom)": [[69, "sympy.diffgeom.BaseVectorField"]], "commutator (class in sympy.diffgeom)": [[69, "sympy.diffgeom.Commutator"]], "coordsystem (class in sympy.diffgeom)": [[69, "sympy.diffgeom.CoordSystem"]], "coordinatesymbol (class in sympy.diffgeom)": [[69, "sympy.diffgeom.CoordinateSymbol"]], "covarderivativeop (class in sympy.diffgeom)": [[69, "sympy.diffgeom.CovarDerivativeOp"]], "differential (class in sympy.diffgeom)": [[69, "sympy.diffgeom.Differential"]], "liederivative (class in sympy.diffgeom)": [[69, "sympy.diffgeom.LieDerivative"]], "manifold (class in sympy.diffgeom)": [[69, "sympy.diffgeom.Manifold"]], "patch (class in sympy.diffgeom)": [[69, "sympy.diffgeom.Patch"]], "point (class in sympy.diffgeom)": [[69, "sympy.diffgeom.Point"]], "tensorproduct (class in sympy.diffgeom)": [[69, "sympy.diffgeom.TensorProduct"]], "wedgeproduct (class in sympy.diffgeom)": [[69, "sympy.diffgeom.WedgeProduct"]], "base_oneform() (sympy.diffgeom.coordsystem method)": [[69, "sympy.diffgeom.CoordSystem.base_oneform"]], "base_oneforms() (sympy.diffgeom.coordsystem method)": [[69, "sympy.diffgeom.CoordSystem.base_oneforms"]], "base_scalar() (sympy.diffgeom.coordsystem method)": [[69, "sympy.diffgeom.CoordSystem.base_scalar"]], "base_scalars() (sympy.diffgeom.coordsystem method)": [[69, "sympy.diffgeom.CoordSystem.base_scalars"]], "base_vector() (sympy.diffgeom.coordsystem method)": [[69, "sympy.diffgeom.CoordSystem.base_vector"]], "base_vectors() (sympy.diffgeom.coordsystem method)": [[69, "sympy.diffgeom.CoordSystem.base_vectors"]], "coord_function() (sympy.diffgeom.coordsystem method)": [[69, "sympy.diffgeom.CoordSystem.coord_function"]], "coord_functions() (sympy.diffgeom.coordsystem method)": [[69, "sympy.diffgeom.CoordSystem.coord_functions"]], "coord_tuple_transform_to() (sympy.diffgeom.coordsystem method)": [[69, "sympy.diffgeom.CoordSystem.coord_tuple_transform_to"]], "coords() (sympy.diffgeom.point method)": [[69, "sympy.diffgeom.Point.coords"]], "intcurve_diffequ() (in module sympy.diffgeom)": [[69, "sympy.diffgeom.intcurve_diffequ"]], "intcurve_series() (in module sympy.diffgeom)": [[69, "sympy.diffgeom.intcurve_series"]], "jacobian() (sympy.diffgeom.coordsystem method)": [[69, "sympy.diffgeom.CoordSystem.jacobian"]], "jacobian_determinant() (sympy.diffgeom.coordsystem method)": [[69, "sympy.diffgeom.CoordSystem.jacobian_determinant"]], "jacobian_matrix() (sympy.diffgeom.coordsystem method)": [[69, "sympy.diffgeom.CoordSystem.jacobian_matrix"]], "metric_to_christoffel_1st() (in module sympy.diffgeom)": [[69, "sympy.diffgeom.metric_to_Christoffel_1st"]], "metric_to_christoffel_2nd() (in module sympy.diffgeom)": [[69, "sympy.diffgeom.metric_to_Christoffel_2nd"]], "metric_to_ricci_components() (in module sympy.diffgeom)": [[69, "sympy.diffgeom.metric_to_Ricci_components"]], "metric_to_riemann_components() (in module sympy.diffgeom)": [[69, "sympy.diffgeom.metric_to_Riemann_components"]], "point() (sympy.diffgeom.coordsystem method)": [[69, "sympy.diffgeom.CoordSystem.point"]], "point_to_coords() (sympy.diffgeom.coordsystem method)": [[69, "sympy.diffgeom.CoordSystem.point_to_coords"]], "sympy.diffgeom": [[69, "module-sympy.diffgeom"]], "transform() (sympy.diffgeom.coordsystem method)": [[69, "sympy.diffgeom.CoordSystem.transform"]], "transformation() (sympy.diffgeom.coordsystem method)": [[69, "sympy.diffgeom.CoordSystem.transformation"]], "twoform_to_matrix() (in module sympy.diffgeom)": [[69, "sympy.diffgeom.twoform_to_matrix"]], "vectors_in_basis() (in module sympy.diffgeom)": [[69, "sympy.diffgeom.vectors_in_basis"]], "convolution() (in module sympy.discrete.convolutions)": [[70, "sympy.discrete.convolutions.convolution"]], "convolution_fft() (in module sympy.discrete.convolutions)": [[70, "sympy.discrete.convolutions.convolution_fft"]], "convolution_fwht() (in module sympy.discrete.convolutions)": [[70, "sympy.discrete.convolutions.convolution_fwht"]], "convolution_ntt() (in module sympy.discrete.convolutions)": [[70, "sympy.discrete.convolutions.convolution_ntt"]], "convolution_subset() (in module sympy.discrete.convolutions)": [[70, "sympy.discrete.convolutions.convolution_subset"]], "covering_product() (in module sympy.discrete.convolutions)": [[70, "sympy.discrete.convolutions.covering_product"]], "fft() (in module sympy.discrete.transforms)": [[70, "sympy.discrete.transforms.fft"]], "fwht() (in module sympy.discrete.transforms)": [[70, "sympy.discrete.transforms.fwht"]], "ifft() (in module sympy.discrete.transforms)": [[70, "sympy.discrete.transforms.ifft"]], "ifwht() (in module sympy.discrete.transforms)": [[70, "sympy.discrete.transforms.ifwht"]], "intersecting_product() (in module sympy.discrete.convolutions)": [[70, "sympy.discrete.convolutions.intersecting_product"]], "intt() (in module sympy.discrete.transforms)": [[70, "sympy.discrete.transforms.intt"]], "inverse_mobius_transform() (in module sympy.discrete.transforms)": [[70, "sympy.discrete.transforms.inverse_mobius_transform"]], "mobius_transform() (in module sympy.discrete.transforms)": [[70, "sympy.discrete.transforms.mobius_transform"]], "ntt() (in module sympy.discrete.transforms)": [[70, "sympy.discrete.transforms.ntt"]], "sympy.discrete": [[70, "module-sympy.discrete"]], "sympy.discrete.convolutions": [[70, "module-sympy.discrete.convolutions"]], "sympy.discrete.transforms": [[70, "module-sympy.discrete.transforms"]], "fallingfactorial (class in sympy.functions.combinatorial.factorials)": [[72, "sympy.functions.combinatorial.factorials.FallingFactorial"]], "multifactorial (class in sympy.functions.combinatorial.factorials)": [[72, "sympy.functions.combinatorial.factorials.MultiFactorial"]], "risingfactorial (class in sympy.functions.combinatorial.factorials)": [[72, "sympy.functions.combinatorial.factorials.RisingFactorial"]], "andre (class in sympy.functions.combinatorial.numbers)": [[72, "sympy.functions.combinatorial.numbers.andre"]], "bell (class in sympy.functions.combinatorial.numbers)": [[72, "sympy.functions.combinatorial.numbers.bell"]], "bernoulli (class in sympy.functions.combinatorial.numbers)": [[72, "sympy.functions.combinatorial.numbers.bernoulli"]], "binomial (class in sympy.functions.combinatorial.factorials)": [[72, "sympy.functions.combinatorial.factorials.binomial"]], "catalan (class in sympy.functions.combinatorial.numbers)": [[72, "sympy.functions.combinatorial.numbers.catalan"]], "euler (class in sympy.functions.combinatorial.numbers)": [[72, "sympy.functions.combinatorial.numbers.euler"]], "factorial (class in sympy.functions.combinatorial.factorials)": [[72, "sympy.functions.combinatorial.factorials.factorial"]], "factorial2 (class in sympy.functions.combinatorial.factorials)": [[72, "sympy.functions.combinatorial.factorials.factorial2"]], "fibonacci (class in sympy.functions.combinatorial.numbers)": [[72, "sympy.functions.combinatorial.numbers.fibonacci"]], "genocchi (class in sympy.functions.combinatorial.numbers)": [[72, "sympy.functions.combinatorial.numbers.genocchi"]], "harmonic (class in sympy.functions.combinatorial.numbers)": [[72, "sympy.functions.combinatorial.numbers.harmonic"]], "lucas (class in sympy.functions.combinatorial.numbers)": [[72, "sympy.functions.combinatorial.numbers.lucas"]], "nc() (in module sympy.functions.combinatorial.numbers)": [[72, "sympy.functions.combinatorial.numbers.nC"]], "np() (in module sympy.functions.combinatorial.numbers)": [[72, "sympy.functions.combinatorial.numbers.nP"]], "nt() (in module sympy.functions.combinatorial.numbers)": [[72, "sympy.functions.combinatorial.numbers.nT"]], "partition (class in sympy.functions.combinatorial.numbers)": [[72, "sympy.functions.combinatorial.numbers.partition"]], "stirling() (in module sympy.functions.combinatorial.numbers)": [[72, "sympy.functions.combinatorial.numbers.stirling"]], "subfactorial (class in sympy.functions.combinatorial.factorials)": [[72, "sympy.functions.combinatorial.factorials.subfactorial"]], "tribonacci (class in sympy.functions.combinatorial.numbers)": [[72, "sympy.functions.combinatorial.numbers.tribonacci"]], "abs (class in sympy.functions.elementary.complexes)": [[73, "sympy.functions.elementary.complexes.Abs"]], "exprcondpair (class in sympy.functions.elementary.piecewise)": [[73, "sympy.functions.elementary.piecewise.ExprCondPair"]], "hyperbolicfunction (class in sympy.functions.elementary.hyperbolic)": [[73, "sympy.functions.elementary.hyperbolic.HyperbolicFunction"]], "identityfunction (class in sympy.functions.elementary.miscellaneous)": [[73, "sympy.functions.elementary.miscellaneous.IdentityFunction"]], "lambertw (class in sympy.functions.elementary.exponential)": [[73, "sympy.functions.elementary.exponential.LambertW"]], "max (class in sympy.functions.elementary.miscellaneous)": [[73, "sympy.functions.elementary.miscellaneous.Max"]], "min (class in sympy.functions.elementary.miscellaneous)": [[73, "sympy.functions.elementary.miscellaneous.Min"]], "piecewise (class in sympy.functions.elementary.piecewise)": [[73, "sympy.functions.elementary.piecewise.Piecewise"]], "roundfunction (class in sympy.functions.elementary.integers)": [[73, "sympy.functions.elementary.integers.RoundFunction"]], "_eval_integral() (sympy.functions.elementary.piecewise.piecewise method)": [[73, "sympy.functions.elementary.piecewise.Piecewise._eval_integral"]], "acos (class in sympy.functions.elementary.trigonometric)": [[73, "sympy.functions.elementary.trigonometric.acos"]], "acosh (class in sympy.functions.elementary.hyperbolic)": [[73, "sympy.functions.elementary.hyperbolic.acosh"]], "acot (class in sympy.functions.elementary.trigonometric)": [[73, "sympy.functions.elementary.trigonometric.acot"]], "acoth (class in sympy.functions.elementary.hyperbolic)": [[73, "sympy.functions.elementary.hyperbolic.acoth"]], "acsc (class in sympy.functions.elementary.trigonometric)": [[73, "sympy.functions.elementary.trigonometric.acsc"]], "acsch (class in sympy.functions.elementary.hyperbolic)": [[73, "sympy.functions.elementary.hyperbolic.acsch"]], "arg (class in sympy.functions.elementary.complexes)": [[73, "sympy.functions.elementary.complexes.arg"]], "as_base_exp() (sympy.functions.elementary.exponential.log method)": [[73, "sympy.functions.elementary.exponential.log.as_base_exp"]], "as_expr_set_pairs() (sympy.functions.elementary.piecewise.piecewise method)": [[73, "sympy.functions.elementary.piecewise.Piecewise.as_expr_set_pairs"]], "as_real_imag() (sympy.functions.elementary.complexes.im method)": [[73, "sympy.functions.elementary.complexes.im.as_real_imag"]], "as_real_imag() (sympy.functions.elementary.complexes.re method)": [[73, "sympy.functions.elementary.complexes.re.as_real_imag"]], "as_real_imag() (sympy.functions.elementary.exponential.exp method)": [[73, "sympy.functions.elementary.exponential.exp.as_real_imag"]], "as_real_imag() (sympy.functions.elementary.exponential.log method)": [[73, "sympy.functions.elementary.exponential.log.as_real_imag"]], "as_real_imag() (sympy.functions.elementary.hyperbolic.sinh method)": [[73, "sympy.functions.elementary.hyperbolic.sinh.as_real_imag"]], "asec (class in sympy.functions.elementary.trigonometric)": [[73, "sympy.functions.elementary.trigonometric.asec"]], "asech (class in sympy.functions.elementary.hyperbolic)": [[73, "sympy.functions.elementary.hyperbolic.asech"]], "asin (class in sympy.functions.elementary.trigonometric)": [[73, "sympy.functions.elementary.trigonometric.asin"]], "asinh (class in sympy.functions.elementary.hyperbolic)": [[73, "sympy.functions.elementary.hyperbolic.asinh"]], "atan (class in sympy.functions.elementary.trigonometric)": [[73, "sympy.functions.elementary.trigonometric.atan"]], "atan2 (class in sympy.functions.elementary.trigonometric)": [[73, "sympy.functions.elementary.trigonometric.atan2"]], "atanh (class in sympy.functions.elementary.hyperbolic)": [[73, "sympy.functions.elementary.hyperbolic.atanh"]], "base (sympy.functions.elementary.exponential.exp property)": [[73, "sympy.functions.elementary.exponential.exp.base"]], "cbrt() (in module sympy.functions.elementary.miscellaneous)": [[73, "sympy.functions.elementary.miscellaneous.cbrt"]], "ceiling (class in sympy.functions.elementary.integers)": [[73, "sympy.functions.elementary.integers.ceiling"]], "cond (sympy.functions.elementary.piecewise.exprcondpair property)": [[73, "sympy.functions.elementary.piecewise.ExprCondPair.cond"]], "conjugate (class in sympy.functions.elementary.complexes)": [[73, "sympy.functions.elementary.complexes.conjugate"]], "cos (class in sympy.functions.elementary.trigonometric)": [[73, "sympy.functions.elementary.trigonometric.cos"]], "cosh (class in sympy.functions.elementary.hyperbolic)": [[73, "sympy.functions.elementary.hyperbolic.cosh"]], "cot (class in sympy.functions.elementary.trigonometric)": [[73, "sympy.functions.elementary.trigonometric.cot"]], "coth (class in sympy.functions.elementary.hyperbolic)": [[73, "sympy.functions.elementary.hyperbolic.coth"]], "csc (class in sympy.functions.elementary.trigonometric)": [[73, "sympy.functions.elementary.trigonometric.csc"]], "csch (class in sympy.functions.elementary.hyperbolic)": [[73, "sympy.functions.elementary.hyperbolic.csch"]], "doit() (sympy.functions.elementary.piecewise.piecewise method)": [[73, "sympy.functions.elementary.piecewise.Piecewise.doit"]], "eval() (sympy.functions.elementary.piecewise.piecewise class method)": [[73, "sympy.functions.elementary.piecewise.Piecewise.eval"]], "exp (class in sympy.functions.elementary.exponential)": [[73, "sympy.functions.elementary.exponential.exp"]], "exp_polar (class in sympy.functions.elementary.exponential)": [[73, "sympy.functions.elementary.exponential.exp_polar"]], "expr (sympy.functions.elementary.piecewise.exprcondpair property)": [[73, "sympy.functions.elementary.piecewise.ExprCondPair.expr"]], "fdiff() (sympy.functions.elementary.complexes.abs method)": [[73, "sympy.functions.elementary.complexes.Abs.fdiff"]], "fdiff() (sympy.functions.elementary.exponential.lambertw method)": [[73, "sympy.functions.elementary.exponential.LambertW.fdiff"]], "fdiff() (sympy.functions.elementary.exponential.exp method)": [[73, "sympy.functions.elementary.exponential.exp.fdiff"]], "fdiff() (sympy.functions.elementary.exponential.log method)": [[73, "sympy.functions.elementary.exponential.log.fdiff"]], "fdiff() (sympy.functions.elementary.hyperbolic.csch method)": [[73, "sympy.functions.elementary.hyperbolic.csch.fdiff"]], "fdiff() (sympy.functions.elementary.hyperbolic.sinh method)": [[73, "sympy.functions.elementary.hyperbolic.sinh.fdiff"]], "floor (class in sympy.functions.elementary.integers)": [[73, "sympy.functions.elementary.integers.floor"]], "frac (class in sympy.functions.elementary.integers)": [[73, "sympy.functions.elementary.integers.frac"]], "im (class in sympy.functions.elementary.complexes)": [[73, "sympy.functions.elementary.complexes.im"]], "inverse() (sympy.functions.elementary.exponential.log method)": [[73, "sympy.functions.elementary.exponential.log.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.acosh method)": [[73, "sympy.functions.elementary.hyperbolic.acosh.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.acoth method)": [[73, "sympy.functions.elementary.hyperbolic.acoth.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.acsch method)": [[73, "sympy.functions.elementary.hyperbolic.acsch.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.asech method)": [[73, "sympy.functions.elementary.hyperbolic.asech.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.asinh method)": [[73, "sympy.functions.elementary.hyperbolic.asinh.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.atanh method)": [[73, "sympy.functions.elementary.hyperbolic.atanh.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.coth method)": [[73, "sympy.functions.elementary.hyperbolic.coth.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.sinh method)": [[73, "sympy.functions.elementary.hyperbolic.sinh.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.tanh method)": [[73, "sympy.functions.elementary.hyperbolic.tanh.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.acos method)": [[73, "sympy.functions.elementary.trigonometric.acos.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.acot method)": [[73, "sympy.functions.elementary.trigonometric.acot.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.acsc method)": [[73, "sympy.functions.elementary.trigonometric.acsc.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.asec method)": [[73, "sympy.functions.elementary.trigonometric.asec.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.asin method)": [[73, "sympy.functions.elementary.trigonometric.asin.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.atan method)": [[73, "sympy.functions.elementary.trigonometric.atan.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.cot method)": [[73, "sympy.functions.elementary.trigonometric.cot.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.tan method)": [[73, "sympy.functions.elementary.trigonometric.tan.inverse"]], "log (class in sympy.functions.elementary.exponential)": [[73, "sympy.functions.elementary.exponential.log"]], "periodic_argument (class in sympy.functions.elementary.complexes)": [[73, "sympy.functions.elementary.complexes.periodic_argument"]], "piecewise_exclusive() (in module sympy.functions.elementary.piecewise)": [[73, "sympy.functions.elementary.piecewise.piecewise_exclusive"]], "piecewise_fold() (in module sympy.functions.elementary.piecewise)": [[73, "sympy.functions.elementary.piecewise.piecewise_fold"]], "piecewise_integrate() (sympy.functions.elementary.piecewise.piecewise method)": [[73, "sympy.functions.elementary.piecewise.Piecewise.piecewise_integrate"]], "polar_lift (class in sympy.functions.elementary.complexes)": [[73, "sympy.functions.elementary.complexes.polar_lift"]], "principal_branch (class in sympy.functions.elementary.complexes)": [[73, "sympy.functions.elementary.complexes.principal_branch"]], "re (class in sympy.functions.elementary.complexes)": [[73, "sympy.functions.elementary.complexes.re"]], "real_root() (in module sympy.functions.elementary.miscellaneous)": [[73, "sympy.functions.elementary.miscellaneous.real_root"]], "root() (in module sympy.functions.elementary.miscellaneous)": [[73, "sympy.functions.elementary.miscellaneous.root"]], "sec (class in sympy.functions.elementary.trigonometric)": [[73, "sympy.functions.elementary.trigonometric.sec"]], "sech (class in sympy.functions.elementary.hyperbolic)": [[73, "sympy.functions.elementary.hyperbolic.sech"]], "sign (class in sympy.functions.elementary.complexes)": [[73, "sympy.functions.elementary.complexes.sign"]], "sin (class in sympy.functions.elementary.trigonometric)": [[73, "sympy.functions.elementary.trigonometric.sin"]], "sinc (class in sympy.functions.elementary.trigonometric)": [[73, "sympy.functions.elementary.trigonometric.sinc"]], "sinh (class in sympy.functions.elementary.hyperbolic)": [[73, "sympy.functions.elementary.hyperbolic.sinh"]], "sqrt() (in module sympy.functions.elementary.miscellaneous)": [[73, "sympy.functions.elementary.miscellaneous.sqrt"]], "tan (class in sympy.functions.elementary.trigonometric)": [[73, "sympy.functions.elementary.trigonometric.tan"]], "tanh (class in sympy.functions.elementary.hyperbolic)": [[73, "sympy.functions.elementary.hyperbolic.tanh"]], "taylor_term() (sympy.functions.elementary.exponential.exp static method)": [[73, "sympy.functions.elementary.exponential.exp.taylor_term"]], "taylor_term() (sympy.functions.elementary.exponential.log static method)": [[73, "sympy.functions.elementary.exponential.log.taylor_term"]], "taylor_term() (sympy.functions.elementary.hyperbolic.csch static method)": [[73, "sympy.functions.elementary.hyperbolic.csch.taylor_term"]], "taylor_term() (sympy.functions.elementary.hyperbolic.sinh static method)": [[73, "sympy.functions.elementary.hyperbolic.sinh.taylor_term"]], "sympy.functions": [[74, "module-sympy.functions"]], "airybase (class in sympy.functions.special.bessel)": [[75, "sympy.functions.special.bessel.AiryBase"]], "besselbase (class in sympy.functions.special.bessel)": [[75, "sympy.functions.special.bessel.BesselBase"]], "chi (class in sympy.functions.special.error_functions)": [[75, "sympy.functions.special.error_functions.Chi"]], "ci (class in sympy.functions.special.error_functions)": [[75, "sympy.functions.special.error_functions.Ci"]], "diracdelta (class in sympy.functions.special.delta_functions)": [[75, "sympy.functions.special.delta_functions.DiracDelta"]], "e1() (in module sympy.functions.special.error_functions)": [[75, "sympy.functions.special.error_functions.E1"]], "ei (class in sympy.functions.special.error_functions)": [[75, "sympy.functions.special.error_functions.Ei"]], "eijk() (in module sympy.functions.special.tensor_functions)": [[75, "sympy.functions.special.tensor_functions.Eijk"]], "fresnelintegral (class in sympy.functions.special.error_functions)": [[75, "sympy.functions.special.error_functions.FresnelIntegral"]], "heaviside (class in sympy.functions.special.delta_functions)": [[75, "sympy.functions.special.delta_functions.Heaviside"]], "kroneckerdelta (class in sympy.functions.special.tensor_functions)": [[75, "sympy.functions.special.tensor_functions.KroneckerDelta"]], "levicivita (class in sympy.functions.special.tensor_functions)": [[75, "sympy.functions.special.tensor_functions.LeviCivita"]], "li (class in sympy.functions.special.error_functions)": [[75, "sympy.functions.special.error_functions.Li"], [75, "sympy.functions.special.error_functions.li"]], "mathieubase (class in sympy.functions.special.mathieu_functions)": [[75, "sympy.functions.special.mathieu_functions.MathieuBase"]], "shi (class in sympy.functions.special.error_functions)": [[75, "sympy.functions.special.error_functions.Shi"]], "si (class in sympy.functions.special.error_functions)": [[75, "sympy.functions.special.error_functions.Si"]], "singularityfunction (class in sympy.functions.special.singularity_functions)": [[75, "sympy.functions.special.singularity_functions.SingularityFunction"]], "ynm (class in sympy.functions.special.spherical_harmonics)": [[75, "sympy.functions.special.spherical_harmonics.Ynm"]], "ynm_c() (in module sympy.functions.special.spherical_harmonics)": [[75, "sympy.functions.special.spherical_harmonics.Ynm_c"]], "znm (class in sympy.functions.special.spherical_harmonics)": [[75, "sympy.functions.special.spherical_harmonics.Znm"]], "airyai (class in sympy.functions.special.bessel)": [[75, "sympy.functions.special.bessel.airyai"]], "airyaiprime (class in sympy.functions.special.bessel)": [[75, "sympy.functions.special.bessel.airyaiprime"]], "airybi (class in sympy.functions.special.bessel)": [[75, "sympy.functions.special.bessel.airybi"]], "airybiprime (class in sympy.functions.special.bessel)": [[75, "sympy.functions.special.bessel.airybiprime"]], "an (sympy.functions.special.hyper.meijerg property)": [[75, "sympy.functions.special.hyper.meijerg.an"]], "aother (sympy.functions.special.hyper.meijerg property)": [[75, "sympy.functions.special.hyper.meijerg.aother"]], "ap (sympy.functions.special.hyper.hyper property)": [[75, "sympy.functions.special.hyper.hyper.ap"]], "ap (sympy.functions.special.hyper.meijerg property)": [[75, "sympy.functions.special.hyper.meijerg.ap"]], "appellf1 (class in sympy.functions.special.hyper)": [[75, "sympy.functions.special.hyper.appellf1"]], "argument (sympy.functions.special.bessel.besselbase property)": [[75, "sympy.functions.special.bessel.BesselBase.argument"]], "argument (sympy.functions.special.hyper.hyper property)": [[75, "sympy.functions.special.hyper.hyper.argument"]], "argument (sympy.functions.special.hyper.meijerg property)": [[75, "sympy.functions.special.hyper.meijerg.argument"]], "assoc_laguerre (class in sympy.functions.special.polynomials)": [[75, "sympy.functions.special.polynomials.assoc_laguerre"]], "assoc_legendre (class in sympy.functions.special.polynomials)": [[75, "sympy.functions.special.polynomials.assoc_legendre"]], "besseli (class in sympy.functions.special.bessel)": [[75, "sympy.functions.special.bessel.besseli"]], "besselj (class in sympy.functions.special.bessel)": [[75, "sympy.functions.special.bessel.besselj"]], "besselk (class in sympy.functions.special.bessel)": [[75, "sympy.functions.special.bessel.besselk"]], "bessely (class in sympy.functions.special.bessel)": [[75, "sympy.functions.special.bessel.bessely"]], "beta (class in sympy.functions.special.beta_functions)": [[75, "sympy.functions.special.beta_functions.beta"]], "bm (sympy.functions.special.hyper.meijerg property)": [[75, "sympy.functions.special.hyper.meijerg.bm"]], "bother (sympy.functions.special.hyper.meijerg property)": [[75, "sympy.functions.special.hyper.meijerg.bother"]], "bq (sympy.functions.special.hyper.hyper property)": [[75, "sympy.functions.special.hyper.hyper.bq"]], "bq (sympy.functions.special.hyper.meijerg property)": [[75, "sympy.functions.special.hyper.meijerg.bq"]], "bspline_basis() (in module sympy.functions.special.bsplines)": [[75, "sympy.functions.special.bsplines.bspline_basis"]], "bspline_basis_set() (in module sympy.functions.special.bsplines)": [[75, "sympy.functions.special.bsplines.bspline_basis_set"]], "chebyshevt (class in sympy.functions.special.polynomials)": [[75, "sympy.functions.special.polynomials.chebyshevt"]], "chebyshevt_root (class in sympy.functions.special.polynomials)": [[75, "sympy.functions.special.polynomials.chebyshevt_root"]], "chebyshevu (class in sympy.functions.special.polynomials)": [[75, "sympy.functions.special.polynomials.chebyshevu"]], "chebyshevu_root (class in sympy.functions.special.polynomials)": [[75, "sympy.functions.special.polynomials.chebyshevu_root"]], "convergence_statement (sympy.functions.special.hyper.hyper property)": [[75, "sympy.functions.special.hyper.hyper.convergence_statement"]], "delta (sympy.functions.special.hyper.meijerg property)": [[75, "sympy.functions.special.hyper.meijerg.delta"]], "digamma (class in sympy.functions.special.gamma_functions)": [[75, "sympy.functions.special.gamma_functions.digamma"]], "dirichlet_eta (class in sympy.functions.special.zeta_functions)": [[75, "sympy.functions.special.zeta_functions.dirichlet_eta"]], "elliptic_e (class in sympy.functions.special.elliptic_integrals)": [[75, "sympy.functions.special.elliptic_integrals.elliptic_e"]], "elliptic_f (class in sympy.functions.special.elliptic_integrals)": [[75, "sympy.functions.special.elliptic_integrals.elliptic_f"]], "elliptic_k (class in sympy.functions.special.elliptic_integrals)": [[75, "sympy.functions.special.elliptic_integrals.elliptic_k"]], "elliptic_pi (class in sympy.functions.special.elliptic_integrals)": [[75, "sympy.functions.special.elliptic_integrals.elliptic_pi"]], "erf (class in sympy.functions.special.error_functions)": [[75, "sympy.functions.special.error_functions.erf"]], "erf2 (class in sympy.functions.special.error_functions)": [[75, "sympy.functions.special.error_functions.erf2"]], "erf2inv (class in sympy.functions.special.error_functions)": [[75, "sympy.functions.special.error_functions.erf2inv"]], "erfc (class in sympy.functions.special.error_functions)": [[75, "sympy.functions.special.error_functions.erfc"]], "erfcinv (class in sympy.functions.special.error_functions)": [[75, "sympy.functions.special.error_functions.erfcinv"]], "erfi (class in sympy.functions.special.error_functions)": [[75, "sympy.functions.special.error_functions.erfi"]], "erfinv (class in sympy.functions.special.error_functions)": [[75, "sympy.functions.special.error_functions.erfinv"]], "eta (sympy.functions.special.hyper.hyper property)": [[75, "sympy.functions.special.hyper.hyper.eta"]], "eval() (sympy.functions.special.delta_functions.diracdelta class method)": [[75, "sympy.functions.special.delta_functions.DiracDelta.eval"]], "eval() (sympy.functions.special.delta_functions.heaviside class method)": [[75, "sympy.functions.special.delta_functions.Heaviside.eval"]], "eval() (sympy.functions.special.singularity_functions.singularityfunction class method)": [[75, "sympy.functions.special.singularity_functions.SingularityFunction.eval"]], "eval() (sympy.functions.special.tensor_functions.kroneckerdelta class method)": [[75, "sympy.functions.special.tensor_functions.KroneckerDelta.eval"]], "eval_levicivita() (in module sympy.functions.special.tensor_functions)": [[75, "sympy.functions.special.tensor_functions.eval_levicivita"]], "expint (class in sympy.functions.special.error_functions)": [[75, "sympy.functions.special.error_functions.expint"]], "fdiff() (sympy.functions.special.delta_functions.diracdelta method)": [[75, "sympy.functions.special.delta_functions.DiracDelta.fdiff"]], "fdiff() (sympy.functions.special.delta_functions.heaviside method)": [[75, "sympy.functions.special.delta_functions.Heaviside.fdiff"]], "fdiff() (sympy.functions.special.singularity_functions.singularityfunction method)": [[75, "sympy.functions.special.singularity_functions.SingularityFunction.fdiff"]], "fresnelc (class in sympy.functions.special.error_functions)": [[75, "sympy.functions.special.error_functions.fresnelc"]], "fresnels (class in sympy.functions.special.error_functions)": [[75, "sympy.functions.special.error_functions.fresnels"]], "gamma (class in sympy.functions.special.gamma_functions)": [[75, "sympy.functions.special.gamma_functions.gamma"]], "gegenbauer (class in sympy.functions.special.polynomials)": [[75, "sympy.functions.special.polynomials.gegenbauer"]], "get_period() (sympy.functions.special.hyper.meijerg method)": [[75, "sympy.functions.special.hyper.meijerg.get_period"]], "hankel1 (class in sympy.functions.special.bessel)": [[75, "sympy.functions.special.bessel.hankel1"]], "hankel2 (class in sympy.functions.special.bessel)": [[75, "sympy.functions.special.bessel.hankel2"]], "hermite (class in sympy.functions.special.polynomials)": [[75, "sympy.functions.special.polynomials.hermite"]], "hermite_prob (class in sympy.functions.special.polynomials)": [[75, "sympy.functions.special.polynomials.hermite_prob"]], "hyper (class in sympy.functions.special.hyper)": [[75, "sympy.functions.special.hyper.hyper"]], "indices_contain_equal_information (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[75, "sympy.functions.special.tensor_functions.KroneckerDelta.indices_contain_equal_information"]], "integrand() (sympy.functions.special.hyper.meijerg method)": [[75, "sympy.functions.special.hyper.meijerg.integrand"]], "interpolating_spline() (in module sympy.functions.special.bsplines)": [[75, "sympy.functions.special.bsplines.interpolating_spline"]], "inverse() (sympy.functions.special.error_functions.erf method)": [[75, "sympy.functions.special.error_functions.erf.inverse"]], "inverse() (sympy.functions.special.error_functions.erfc method)": [[75, "sympy.functions.special.error_functions.erfc.inverse"]], "inverse() (sympy.functions.special.error_functions.erfcinv method)": [[75, "sympy.functions.special.error_functions.erfcinv.inverse"]], "inverse() (sympy.functions.special.error_functions.erfinv method)": [[75, "sympy.functions.special.error_functions.erfinv.inverse"]], "is_above_fermi (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[75, "sympy.functions.special.tensor_functions.KroneckerDelta.is_above_fermi"]], "is_below_fermi (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[75, "sympy.functions.special.tensor_functions.KroneckerDelta.is_below_fermi"]], "is_number (sympy.functions.special.hyper.meijerg property)": [[75, "sympy.functions.special.hyper.meijerg.is_number"]], "is_only_above_fermi (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[75, "sympy.functions.special.tensor_functions.KroneckerDelta.is_only_above_fermi"]], "is_only_below_fermi (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[75, "sympy.functions.special.tensor_functions.KroneckerDelta.is_only_below_fermi"]], "is_simple() (sympy.functions.special.delta_functions.diracdelta method)": [[75, "sympy.functions.special.delta_functions.DiracDelta.is_simple"]], "jacobi (class in sympy.functions.special.polynomials)": [[75, "sympy.functions.special.polynomials.jacobi"]], "jacobi_normalized() (in module sympy.functions.special.polynomials)": [[75, "sympy.functions.special.polynomials.jacobi_normalized"]], "jn (class in sympy.functions.special.bessel)": [[75, "sympy.functions.special.bessel.jn"]], "jn_zeros() (in module sympy.functions.special.bessel)": [[75, "sympy.functions.special.bessel.jn_zeros"]], "killable_index (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[75, "sympy.functions.special.tensor_functions.KroneckerDelta.killable_index"]], "laguerre (class in sympy.functions.special.polynomials)": [[75, "sympy.functions.special.polynomials.laguerre"]], "legendre (class in sympy.functions.special.polynomials)": [[75, "sympy.functions.special.polynomials.legendre"]], "lerchphi (class in sympy.functions.special.zeta_functions)": [[75, "sympy.functions.special.zeta_functions.lerchphi"]], "loggamma (class in sympy.functions.special.gamma_functions)": [[75, "sympy.functions.special.gamma_functions.loggamma"]], "lowergamma (class in sympy.functions.special.gamma_functions)": [[75, "sympy.functions.special.gamma_functions.lowergamma"]], "marcumq (class in sympy.functions.special.bessel)": [[75, "sympy.functions.special.bessel.marcumq"]], "mathieuc (class in sympy.functions.special.mathieu_functions)": [[75, "sympy.functions.special.mathieu_functions.mathieuc"]], "mathieucprime (class in sympy.functions.special.mathieu_functions)": [[75, "sympy.functions.special.mathieu_functions.mathieucprime"]], "mathieus (class in sympy.functions.special.mathieu_functions)": [[75, "sympy.functions.special.mathieu_functions.mathieus"]], "mathieusprime (class in sympy.functions.special.mathieu_functions)": [[75, "sympy.functions.special.mathieu_functions.mathieusprime"]], "meijerg (class in sympy.functions.special.hyper)": [[75, "sympy.functions.special.hyper.meijerg"]], "multigamma (class in sympy.functions.special.gamma_functions)": [[75, "sympy.functions.special.gamma_functions.multigamma"]], "nu (sympy.functions.special.hyper.meijerg property)": [[75, "sympy.functions.special.hyper.meijerg.nu"]], "order (sympy.functions.special.bessel.besselbase property)": [[75, "sympy.functions.special.bessel.BesselBase.order"]], "pargs (sympy.functions.special.delta_functions.heaviside property)": [[75, "sympy.functions.special.delta_functions.Heaviside.pargs"]], "polygamma (class in sympy.functions.special.gamma_functions)": [[75, "sympy.functions.special.gamma_functions.polygamma"]], "polylog (class in sympy.functions.special.zeta_functions)": [[75, "sympy.functions.special.zeta_functions.polylog"]], "preferred_index (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[75, "sympy.functions.special.tensor_functions.KroneckerDelta.preferred_index"]], "radius_of_convergence (sympy.functions.special.hyper.hyper property)": [[75, "sympy.functions.special.hyper.hyper.radius_of_convergence"]], "stieltjes (class in sympy.functions.special.zeta_functions)": [[75, "sympy.functions.special.zeta_functions.stieltjes"]], "sympy.functions.special.bessel": [[75, "module-sympy.functions.special.bessel"]], "sympy.functions.special.beta_functions": [[75, "module-sympy.functions.special.beta_functions"]], "sympy.functions.special.elliptic_integrals": [[75, "module-sympy.functions.special.elliptic_integrals"]], "sympy.functions.special.error_functions": [[75, "module-sympy.functions.special.error_functions"]], "sympy.functions.special.gamma_functions": [[75, "module-sympy.functions.special.gamma_functions"]], "sympy.functions.special.mathieu_functions": [[75, "module-sympy.functions.special.mathieu_functions"]], "sympy.functions.special.polynomials": [[75, "module-sympy.functions.special.polynomials"]], "sympy.functions.special.singularity_functions": [[75, "module-sympy.functions.special.singularity_functions"]], "sympy.functions.special.zeta_functions": [[75, "module-sympy.functions.special.zeta_functions"]], "trigamma (class in sympy.functions.special.gamma_functions)": [[75, "sympy.functions.special.gamma_functions.trigamma"]], "uppergamma (class in sympy.functions.special.gamma_functions)": [[75, "sympy.functions.special.gamma_functions.uppergamma"]], "yn (class in sympy.functions.special.bessel)": [[75, "sympy.functions.special.bessel.yn"]], "zeta (class in sympy.functions.special.zeta_functions)": [[75, "sympy.functions.special.zeta_functions.zeta"]], "curve (class in sympy.geometry.curve)": [[76, "sympy.geometry.curve.Curve"]], "ambient_dimension (sympy.geometry.curve.curve property)": [[76, "sympy.geometry.curve.Curve.ambient_dimension"]], "arbitrary_point() (sympy.geometry.curve.curve method)": [[76, "sympy.geometry.curve.Curve.arbitrary_point"]], "free_symbols (sympy.geometry.curve.curve property)": [[76, "sympy.geometry.curve.Curve.free_symbols"]], "functions (sympy.geometry.curve.curve property)": [[76, "sympy.geometry.curve.Curve.functions"]], "length (sympy.geometry.curve.curve property)": [[76, "sympy.geometry.curve.Curve.length"]], "limits (sympy.geometry.curve.curve property)": [[76, "sympy.geometry.curve.Curve.limits"]], "parameter (sympy.geometry.curve.curve property)": [[76, "sympy.geometry.curve.Curve.parameter"]], "plot_interval() (sympy.geometry.curve.curve method)": [[76, "sympy.geometry.curve.Curve.plot_interval"]], "rotate() (sympy.geometry.curve.curve method)": [[76, "sympy.geometry.curve.Curve.rotate"]], "scale() (sympy.geometry.curve.curve method)": [[76, "sympy.geometry.curve.Curve.scale"]], "sympy.geometry.curve": [[76, "module-sympy.geometry.curve"]], "translate() (sympy.geometry.curve.curve method)": [[76, "sympy.geometry.curve.Curve.translate"]], "circle (class in sympy.geometry.ellipse)": [[77, "sympy.geometry.ellipse.Circle"]], "ellipse (class in sympy.geometry.ellipse)": [[77, "sympy.geometry.ellipse.Ellipse"]], "apoapsis (sympy.geometry.ellipse.ellipse property)": [[77, "sympy.geometry.ellipse.Ellipse.apoapsis"]], "arbitrary_point() (sympy.geometry.ellipse.ellipse method)": [[77, "sympy.geometry.ellipse.Ellipse.arbitrary_point"]], "area (sympy.geometry.ellipse.ellipse property)": [[77, "sympy.geometry.ellipse.Ellipse.area"]], "auxiliary_circle() (sympy.geometry.ellipse.ellipse method)": [[77, "sympy.geometry.ellipse.Ellipse.auxiliary_circle"]], "bounds (sympy.geometry.ellipse.ellipse property)": [[77, "sympy.geometry.ellipse.Ellipse.bounds"]], "center (sympy.geometry.ellipse.ellipse property)": [[77, "sympy.geometry.ellipse.Ellipse.center"]], "circumference (sympy.geometry.ellipse.circle property)": [[77, "sympy.geometry.ellipse.Circle.circumference"]], "circumference (sympy.geometry.ellipse.ellipse property)": [[77, "sympy.geometry.ellipse.Ellipse.circumference"]], "director_circle() (sympy.geometry.ellipse.ellipse method)": [[77, "sympy.geometry.ellipse.Ellipse.director_circle"]], "eccentricity (sympy.geometry.ellipse.ellipse property)": [[77, "sympy.geometry.ellipse.Ellipse.eccentricity"]], "encloses_point() (sympy.geometry.ellipse.ellipse method)": [[77, "sympy.geometry.ellipse.Ellipse.encloses_point"]], "equation() (sympy.geometry.ellipse.circle method)": [[77, "sympy.geometry.ellipse.Circle.equation"]], "equation() (sympy.geometry.ellipse.ellipse method)": [[77, "sympy.geometry.ellipse.Ellipse.equation"]], "evolute() (sympy.geometry.ellipse.ellipse method)": [[77, "sympy.geometry.ellipse.Ellipse.evolute"]], "foci (sympy.geometry.ellipse.ellipse property)": [[77, "sympy.geometry.ellipse.Ellipse.foci"]], "focus_distance (sympy.geometry.ellipse.ellipse property)": [[77, "sympy.geometry.ellipse.Ellipse.focus_distance"]], "hradius (sympy.geometry.ellipse.ellipse property)": [[77, "sympy.geometry.ellipse.Ellipse.hradius"]], "intersection() (sympy.geometry.ellipse.circle method)": [[77, "sympy.geometry.ellipse.Circle.intersection"]], "intersection() (sympy.geometry.ellipse.ellipse method)": [[77, "sympy.geometry.ellipse.Ellipse.intersection"]], "is_tangent() (sympy.geometry.ellipse.ellipse method)": [[77, "sympy.geometry.ellipse.Ellipse.is_tangent"]], "major (sympy.geometry.ellipse.ellipse property)": [[77, "sympy.geometry.ellipse.Ellipse.major"]], "minor (sympy.geometry.ellipse.ellipse property)": [[77, "sympy.geometry.ellipse.Ellipse.minor"]], "normal_lines() (sympy.geometry.ellipse.ellipse method)": [[77, "sympy.geometry.ellipse.Ellipse.normal_lines"]], "periapsis (sympy.geometry.ellipse.ellipse property)": [[77, "sympy.geometry.ellipse.Ellipse.periapsis"]], "plot_interval() (sympy.geometry.ellipse.ellipse method)": [[77, "sympy.geometry.ellipse.Ellipse.plot_interval"]], "polar_second_moment_of_area() (sympy.geometry.ellipse.ellipse method)": [[77, "sympy.geometry.ellipse.Ellipse.polar_second_moment_of_area"]], "radius (sympy.geometry.ellipse.circle property)": [[77, "sympy.geometry.ellipse.Circle.radius"]], "random_point() (sympy.geometry.ellipse.ellipse method)": [[77, "sympy.geometry.ellipse.Ellipse.random_point"]], "reflect() (sympy.geometry.ellipse.circle method)": [[77, "sympy.geometry.ellipse.Circle.reflect"]], "reflect() (sympy.geometry.ellipse.ellipse method)": [[77, "sympy.geometry.ellipse.Ellipse.reflect"]], "rotate() (sympy.geometry.ellipse.ellipse method)": [[77, "sympy.geometry.ellipse.Ellipse.rotate"]], "scale() (sympy.geometry.ellipse.circle method)": [[77, "sympy.geometry.ellipse.Circle.scale"]], "scale() (sympy.geometry.ellipse.ellipse method)": [[77, "sympy.geometry.ellipse.Ellipse.scale"]], "second_moment_of_area() (sympy.geometry.ellipse.ellipse method)": [[77, "sympy.geometry.ellipse.Ellipse.second_moment_of_area"]], "section_modulus() (sympy.geometry.ellipse.ellipse method)": [[77, "sympy.geometry.ellipse.Ellipse.section_modulus"]], "semilatus_rectum (sympy.geometry.ellipse.ellipse property)": [[77, "sympy.geometry.ellipse.Ellipse.semilatus_rectum"]], "sympy.geometry.ellipse": [[77, "module-sympy.geometry.ellipse"]], "tangent_lines() (sympy.geometry.ellipse.ellipse method)": [[77, "sympy.geometry.ellipse.Ellipse.tangent_lines"]], "vradius (sympy.geometry.ellipse.circle property)": [[77, "sympy.geometry.ellipse.Circle.vradius"]], "vradius (sympy.geometry.ellipse.ellipse property)": [[77, "sympy.geometry.ellipse.Ellipse.vradius"]], "geometryentity (class in sympy.geometry.entity)": [[78, "sympy.geometry.entity.GeometryEntity"]], "ambient_dimension (sympy.geometry.entity.geometryentity property)": [[78, "sympy.geometry.entity.GeometryEntity.ambient_dimension"]], "bounds (sympy.geometry.entity.geometryentity property)": [[78, "sympy.geometry.entity.GeometryEntity.bounds"]], "encloses() (sympy.geometry.entity.geometryentity method)": [[78, "sympy.geometry.entity.GeometryEntity.encloses"]], "intersection() (sympy.geometry.entity.geometryentity method)": [[78, "sympy.geometry.entity.GeometryEntity.intersection"]], "is_similar() (sympy.geometry.entity.geometryentity method)": [[78, "sympy.geometry.entity.GeometryEntity.is_similar"]], "parameter_value() (sympy.geometry.entity.geometryentity method)": [[78, "sympy.geometry.entity.GeometryEntity.parameter_value"]], "reflect() (sympy.geometry.entity.geometryentity method)": [[78, "sympy.geometry.entity.GeometryEntity.reflect"]], "rotate() (sympy.geometry.entity.geometryentity method)": [[78, "sympy.geometry.entity.GeometryEntity.rotate"]], "scale() (sympy.geometry.entity.geometryentity method)": [[78, "sympy.geometry.entity.GeometryEntity.scale"]], "sympy.geometry.entity": [[78, "module-sympy.geometry.entity"]], "translate() (sympy.geometry.entity.geometryentity method)": [[78, "sympy.geometry.entity.GeometryEntity.translate"]], "line (class in sympy.geometry.line)": [[80, "sympy.geometry.line.Line"]], "line2d (class in sympy.geometry.line)": [[80, "sympy.geometry.line.Line2D"]], "line3d (class in sympy.geometry.line)": [[80, "sympy.geometry.line.Line3D"]], "linearentity (class in sympy.geometry.line)": [[80, "sympy.geometry.line.LinearEntity"]], "linearentity2d (class in sympy.geometry.line)": [[80, "sympy.geometry.line.LinearEntity2D"]], "linearentity3d (class in sympy.geometry.line)": [[80, "sympy.geometry.line.LinearEntity3D"]], "ray (class in sympy.geometry.line)": [[80, "sympy.geometry.line.Ray"]], "ray2d (class in sympy.geometry.line)": [[80, "sympy.geometry.line.Ray2D"]], "ray3d (class in sympy.geometry.line)": [[80, "sympy.geometry.line.Ray3D"]], "segment (class in sympy.geometry.line)": [[80, "sympy.geometry.line.Segment"]], "segment2d (class in sympy.geometry.line)": [[80, "sympy.geometry.line.Segment2D"]], "segment3d (class in sympy.geometry.line)": [[80, "sympy.geometry.line.Segment3D"]], "ambient_dimension (sympy.geometry.line.linearentity property)": [[80, "sympy.geometry.line.LinearEntity.ambient_dimension"]], "angle_between() (sympy.geometry.line.linearentity method)": [[80, "sympy.geometry.line.LinearEntity.angle_between"]], "arbitrary_point() (sympy.geometry.line.linearentity method)": [[80, "sympy.geometry.line.LinearEntity.arbitrary_point"]], "are_concurrent() (sympy.geometry.line.linearentity static method)": [[80, "sympy.geometry.line.LinearEntity.are_concurrent"]], "bisectors() (sympy.geometry.line.linearentity method)": [[80, "sympy.geometry.line.LinearEntity.bisectors"]], "bounds (sympy.geometry.line.linearentity2d property)": [[80, "sympy.geometry.line.LinearEntity2D.bounds"]], "closing_angle() (sympy.geometry.line.ray2d method)": [[80, "sympy.geometry.line.Ray2D.closing_angle"]], "coefficients (sympy.geometry.line.line2d property)": [[80, "sympy.geometry.line.Line2D.coefficients"]], "contains() (sympy.geometry.line.line method)": [[80, "sympy.geometry.line.Line.contains"]], "contains() (sympy.geometry.line.linearentity method)": [[80, "sympy.geometry.line.LinearEntity.contains"]], "contains() (sympy.geometry.line.ray method)": [[80, "sympy.geometry.line.Ray.contains"]], "contains() (sympy.geometry.line.segment method)": [[80, "sympy.geometry.line.Segment.contains"]], "direction (sympy.geometry.line.linearentity property)": [[80, "sympy.geometry.line.LinearEntity.direction"]], "direction_cosine (sympy.geometry.line.linearentity3d property)": [[80, "sympy.geometry.line.LinearEntity3D.direction_cosine"]], "direction_ratio (sympy.geometry.line.linearentity3d property)": [[80, "sympy.geometry.line.LinearEntity3D.direction_ratio"]], "distance() (sympy.geometry.line.line method)": [[80, "sympy.geometry.line.Line.distance"]], "distance() (sympy.geometry.line.line3d method)": [[80, "sympy.geometry.line.Line3D.distance"]], "distance() (sympy.geometry.line.ray method)": [[80, "sympy.geometry.line.Ray.distance"]], "distance() (sympy.geometry.line.segment method)": [[80, "sympy.geometry.line.Segment.distance"]], "equals() (sympy.geometry.line.line method)": [[80, "sympy.geometry.line.Line.equals"]], "equals() (sympy.geometry.line.ray method)": [[80, "sympy.geometry.line.Ray.equals"]], "equals() (sympy.geometry.line.segment method)": [[80, "sympy.geometry.line.Segment.equals"]], "equation() (sympy.geometry.line.line2d method)": [[80, "sympy.geometry.line.Line2D.equation"]], "equation() (sympy.geometry.line.line3d method)": [[80, "sympy.geometry.line.Line3D.equation"]], "intersection() (sympy.geometry.line.linearentity method)": [[80, "sympy.geometry.line.LinearEntity.intersection"]], "is_parallel() (sympy.geometry.line.linearentity method)": [[80, "sympy.geometry.line.LinearEntity.is_parallel"]], "is_perpendicular() (sympy.geometry.line.linearentity method)": [[80, "sympy.geometry.line.LinearEntity.is_perpendicular"]], "is_similar() (sympy.geometry.line.linearentity method)": [[80, "sympy.geometry.line.LinearEntity.is_similar"]], "length (sympy.geometry.line.linearentity property)": [[80, "sympy.geometry.line.LinearEntity.length"]], "length (sympy.geometry.line.segment property)": [[80, "sympy.geometry.line.Segment.length"]], "midpoint (sympy.geometry.line.segment property)": [[80, "sympy.geometry.line.Segment.midpoint"]], "p1 (sympy.geometry.line.linearentity property)": [[80, "sympy.geometry.line.LinearEntity.p1"]], "p2 (sympy.geometry.line.linearentity property)": [[80, "sympy.geometry.line.LinearEntity.p2"]], "parallel_line() (sympy.geometry.line.linearentity method)": [[80, "sympy.geometry.line.LinearEntity.parallel_line"]], "perpendicular_bisector() (sympy.geometry.line.segment method)": [[80, "sympy.geometry.line.Segment.perpendicular_bisector"]], "perpendicular_line() (sympy.geometry.line.linearentity method)": [[80, "sympy.geometry.line.LinearEntity.perpendicular_line"]], "perpendicular_line() (sympy.geometry.line.linearentity2d method)": [[80, "sympy.geometry.line.LinearEntity2D.perpendicular_line"]], "perpendicular_segment() (sympy.geometry.line.linearentity method)": [[80, "sympy.geometry.line.LinearEntity.perpendicular_segment"]], "plot_interval() (sympy.geometry.line.line method)": [[80, "sympy.geometry.line.Line.plot_interval"]], "plot_interval() (sympy.geometry.line.ray method)": [[80, "sympy.geometry.line.Ray.plot_interval"]], "plot_interval() (sympy.geometry.line.segment method)": [[80, "sympy.geometry.line.Segment.plot_interval"]], "points (sympy.geometry.line.linearentity property)": [[80, "sympy.geometry.line.LinearEntity.points"]], "projection() (sympy.geometry.line.linearentity method)": [[80, "sympy.geometry.line.LinearEntity.projection"]], "random_point() (sympy.geometry.line.linearentity method)": [[80, "sympy.geometry.line.LinearEntity.random_point"]], "slope (sympy.geometry.line.linearentity2d property)": [[80, "sympy.geometry.line.LinearEntity2D.slope"]], "smallest_angle_between() (sympy.geometry.line.linearentity method)": [[80, "sympy.geometry.line.LinearEntity.smallest_angle_between"]], "source (sympy.geometry.line.ray property)": [[80, "sympy.geometry.line.Ray.source"]], "sympy.geometry.line": [[80, "module-sympy.geometry.line"]], "xdirection (sympy.geometry.line.ray2d property)": [[80, "sympy.geometry.line.Ray2D.xdirection"]], "xdirection (sympy.geometry.line.ray3d property)": [[80, "sympy.geometry.line.Ray3D.xdirection"]], "ydirection (sympy.geometry.line.ray2d property)": [[80, "sympy.geometry.line.Ray2D.ydirection"]], "ydirection (sympy.geometry.line.ray3d property)": [[80, "sympy.geometry.line.Ray3D.ydirection"]], "zdirection (sympy.geometry.line.ray3d property)": [[80, "sympy.geometry.line.Ray3D.zdirection"]], "plane (class in sympy.geometry.plane)": [[81, "sympy.geometry.plane.Plane"]], "angle_between() (sympy.geometry.plane.plane method)": [[81, "sympy.geometry.plane.Plane.angle_between"]], "arbitrary_point() (sympy.geometry.plane.plane method)": [[81, "sympy.geometry.plane.Plane.arbitrary_point"]], "are_concurrent() (sympy.geometry.plane.plane static method)": [[81, "sympy.geometry.plane.Plane.are_concurrent"]], "distance() (sympy.geometry.plane.plane method)": [[81, "sympy.geometry.plane.Plane.distance"]], "equals() (sympy.geometry.plane.plane method)": [[81, "sympy.geometry.plane.Plane.equals"]], "equation() (sympy.geometry.plane.plane method)": [[81, "sympy.geometry.plane.Plane.equation"]], "intersection() (sympy.geometry.plane.plane method)": [[81, "sympy.geometry.plane.Plane.intersection"]], "is_coplanar() (sympy.geometry.plane.plane method)": [[81, "sympy.geometry.plane.Plane.is_coplanar"]], "is_parallel() (sympy.geometry.plane.plane method)": [[81, "sympy.geometry.plane.Plane.is_parallel"]], "is_perpendicular() (sympy.geometry.plane.plane method)": [[81, "sympy.geometry.plane.Plane.is_perpendicular"]], "normal_vector (sympy.geometry.plane.plane property)": [[81, "sympy.geometry.plane.Plane.normal_vector"]], "p1 (sympy.geometry.plane.plane property)": [[81, "sympy.geometry.plane.Plane.p1"]], "parallel_plane() (sympy.geometry.plane.plane method)": [[81, "sympy.geometry.plane.Plane.parallel_plane"]], "parameter_value() (sympy.geometry.plane.plane method)": [[81, "sympy.geometry.plane.Plane.parameter_value"]], "perpendicular_line() (sympy.geometry.plane.plane method)": [[81, "sympy.geometry.plane.Plane.perpendicular_line"]], "perpendicular_plane() (sympy.geometry.plane.plane method)": [[81, "sympy.geometry.plane.Plane.perpendicular_plane"]], "projection() (sympy.geometry.plane.plane method)": [[81, "sympy.geometry.plane.Plane.projection"]], "projection_line() (sympy.geometry.plane.plane method)": [[81, "sympy.geometry.plane.Plane.projection_line"]], "random_point() (sympy.geometry.plane.plane method)": [[81, "sympy.geometry.plane.Plane.random_point"]], "sympy.geometry.plane": [[81, "module-sympy.geometry.plane"]], "point (class in sympy.geometry.point)": [[82, "sympy.geometry.point.Point"]], "point2d (class in sympy.geometry.point)": [[82, "sympy.geometry.point.Point2D"]], "point3d (class in sympy.geometry.point)": [[82, "sympy.geometry.point.Point3D"]], "affine_rank() (sympy.geometry.point.point static method)": [[82, "sympy.geometry.point.Point.affine_rank"]], "ambient_dimension (sympy.geometry.point.point property)": [[82, "sympy.geometry.point.Point.ambient_dimension"]], "are_collinear() (sympy.geometry.point.point3d static method)": [[82, "sympy.geometry.point.Point3D.are_collinear"]], "are_coplanar() (sympy.geometry.point.point class method)": [[82, "sympy.geometry.point.Point.are_coplanar"]], "bounds (sympy.geometry.point.point2d property)": [[82, "sympy.geometry.point.Point2D.bounds"]], "canberra_distance() (sympy.geometry.point.point method)": [[82, "sympy.geometry.point.Point.canberra_distance"]], "coordinates (sympy.geometry.point.point2d property)": [[82, "sympy.geometry.point.Point2D.coordinates"]], "coordinates (sympy.geometry.point.point3d property)": [[82, "sympy.geometry.point.Point3D.coordinates"]], "direction_cosine() (sympy.geometry.point.point3d method)": [[82, "sympy.geometry.point.Point3D.direction_cosine"]], "direction_ratio() (sympy.geometry.point.point3d method)": [[82, "sympy.geometry.point.Point3D.direction_ratio"]], "distance() (sympy.geometry.point.point method)": [[82, "sympy.geometry.point.Point.distance"]], "dot() (sympy.geometry.point.point method)": [[82, "sympy.geometry.point.Point.dot"]], "equals() (sympy.geometry.point.point method)": [[82, "sympy.geometry.point.Point.equals"]], "intersection() (sympy.geometry.point.point method)": [[82, "sympy.geometry.point.Point.intersection"]], "intersection() (sympy.geometry.point.point3d method)": [[82, "sympy.geometry.point.Point3D.intersection"]], "is_collinear() (sympy.geometry.point.point method)": [[82, "sympy.geometry.point.Point.is_collinear"]], "is_concyclic() (sympy.geometry.point.point method)": [[82, "sympy.geometry.point.Point.is_concyclic"]], "is_nonzero (sympy.geometry.point.point property)": [[82, "sympy.geometry.point.Point.is_nonzero"]], "is_scalar_multiple() (sympy.geometry.point.point method)": [[82, "sympy.geometry.point.Point.is_scalar_multiple"]], "is_zero (sympy.geometry.point.point property)": [[82, "sympy.geometry.point.Point.is_zero"]], "length (sympy.geometry.point.point property)": [[82, "sympy.geometry.point.Point.length"]], "midpoint() (sympy.geometry.point.point method)": [[82, "sympy.geometry.point.Point.midpoint"]], "origin (sympy.geometry.point.point property)": [[82, "sympy.geometry.point.Point.origin"]], "orthogonal_direction (sympy.geometry.point.point property)": [[82, "sympy.geometry.point.Point.orthogonal_direction"]], "project() (sympy.geometry.point.point static method)": [[82, "sympy.geometry.point.Point.project"]], "rotate() (sympy.geometry.point.point2d method)": [[82, "sympy.geometry.point.Point2D.rotate"]], "scale() (sympy.geometry.point.point2d method)": [[82, "sympy.geometry.point.Point2D.scale"]], "scale() (sympy.geometry.point.point3d method)": [[82, "sympy.geometry.point.Point3D.scale"]], "sympy.geometry.point": [[82, "module-sympy.geometry.point"]], "taxicab_distance() (sympy.geometry.point.point method)": [[82, "sympy.geometry.point.Point.taxicab_distance"]], "transform() (sympy.geometry.point.point2d method)": [[82, "sympy.geometry.point.Point2D.transform"]], "transform() (sympy.geometry.point.point3d method)": [[82, "sympy.geometry.point.Point3D.transform"]], "translate() (sympy.geometry.point.point2d method)": [[82, "sympy.geometry.point.Point2D.translate"]], "translate() (sympy.geometry.point.point3d method)": [[82, "sympy.geometry.point.Point3D.translate"]], "unit (sympy.geometry.point.point property)": [[82, "sympy.geometry.point.Point.unit"]], "x (sympy.geometry.point.point2d property)": [[82, "sympy.geometry.point.Point2D.x"]], "x (sympy.geometry.point.point3d property)": [[82, "sympy.geometry.point.Point3D.x"]], "y (sympy.geometry.point.point2d property)": [[82, "sympy.geometry.point.Point2D.y"]], "y (sympy.geometry.point.point3d property)": [[82, "sympy.geometry.point.Point3D.y"]], "z (sympy.geometry.point.point3d property)": [[82, "sympy.geometry.point.Point3D.z"]], "polygon (class in sympy.geometry.polygon)": [[83, "sympy.geometry.polygon.Polygon"]], "regularpolygon (class in sympy.geometry.polygon)": [[83, "sympy.geometry.polygon.RegularPolygon"]], "triangle (class in sympy.geometry.polygon)": [[83, "sympy.geometry.polygon.Triangle"]], "altitudes (sympy.geometry.polygon.triangle property)": [[83, "sympy.geometry.polygon.Triangle.altitudes"]], "angles (sympy.geometry.polygon.polygon property)": [[83, "sympy.geometry.polygon.Polygon.angles"]], "angles (sympy.geometry.polygon.regularpolygon property)": [[83, "sympy.geometry.polygon.RegularPolygon.angles"]], "apothem (sympy.geometry.polygon.regularpolygon property)": [[83, "sympy.geometry.polygon.RegularPolygon.apothem"]], "arbitrary_point() (sympy.geometry.polygon.polygon method)": [[83, "sympy.geometry.polygon.Polygon.arbitrary_point"]], "area (sympy.geometry.polygon.polygon property)": [[83, "sympy.geometry.polygon.Polygon.area"]], "area (sympy.geometry.polygon.regularpolygon property)": [[83, "sympy.geometry.polygon.RegularPolygon.area"]], "args (sympy.geometry.polygon.regularpolygon property)": [[83, "sympy.geometry.polygon.RegularPolygon.args"]], "bisectors() (sympy.geometry.polygon.polygon method)": [[83, "sympy.geometry.polygon.Polygon.bisectors"]], "bisectors() (sympy.geometry.polygon.triangle method)": [[83, "sympy.geometry.polygon.Triangle.bisectors"]], "bounds (sympy.geometry.polygon.polygon property)": [[83, "sympy.geometry.polygon.Polygon.bounds"]], "center (sympy.geometry.polygon.regularpolygon property)": [[83, "sympy.geometry.polygon.RegularPolygon.center"]], "centroid (sympy.geometry.polygon.polygon property)": [[83, "sympy.geometry.polygon.Polygon.centroid"]], "centroid (sympy.geometry.polygon.regularpolygon property)": [[83, "sympy.geometry.polygon.RegularPolygon.centroid"]], "circumcenter (sympy.geometry.polygon.regularpolygon property)": [[83, "sympy.geometry.polygon.RegularPolygon.circumcenter"]], "circumcenter (sympy.geometry.polygon.triangle property)": [[83, "sympy.geometry.polygon.Triangle.circumcenter"]], "circumcircle (sympy.geometry.polygon.regularpolygon property)": [[83, "sympy.geometry.polygon.RegularPolygon.circumcircle"]], "circumcircle (sympy.geometry.polygon.triangle property)": [[83, "sympy.geometry.polygon.Triangle.circumcircle"]], "circumradius (sympy.geometry.polygon.regularpolygon property)": [[83, "sympy.geometry.polygon.RegularPolygon.circumradius"]], "circumradius (sympy.geometry.polygon.triangle property)": [[83, "sympy.geometry.polygon.Triangle.circumradius"]], "cut_section() (sympy.geometry.polygon.polygon method)": [[83, "sympy.geometry.polygon.Polygon.cut_section"]], "distance() (sympy.geometry.polygon.polygon method)": [[83, "sympy.geometry.polygon.Polygon.distance"]], "encloses_point() (sympy.geometry.polygon.polygon method)": [[83, "sympy.geometry.polygon.Polygon.encloses_point"]], "encloses_point() (sympy.geometry.polygon.regularpolygon method)": [[83, "sympy.geometry.polygon.RegularPolygon.encloses_point"]], "eulerline (sympy.geometry.polygon.triangle property)": [[83, "sympy.geometry.polygon.Triangle.eulerline"]], "excenters (sympy.geometry.polygon.triangle property)": [[83, "sympy.geometry.polygon.Triangle.excenters"]], "exradii (sympy.geometry.polygon.triangle property)": [[83, "sympy.geometry.polygon.Triangle.exradii"]], "exterior_angle (sympy.geometry.polygon.regularpolygon property)": [[83, "sympy.geometry.polygon.RegularPolygon.exterior_angle"]], "first_moment_of_area() (sympy.geometry.polygon.polygon method)": [[83, "sympy.geometry.polygon.Polygon.first_moment_of_area"]], "incenter (sympy.geometry.polygon.triangle property)": [[83, "sympy.geometry.polygon.Triangle.incenter"]], "incircle (sympy.geometry.polygon.regularpolygon property)": [[83, "sympy.geometry.polygon.RegularPolygon.incircle"]], "incircle (sympy.geometry.polygon.triangle property)": [[83, "sympy.geometry.polygon.Triangle.incircle"]], "inradius (sympy.geometry.polygon.regularpolygon property)": [[83, "sympy.geometry.polygon.RegularPolygon.inradius"]], "inradius (sympy.geometry.polygon.triangle property)": [[83, "sympy.geometry.polygon.Triangle.inradius"]], "interior_angle (sympy.geometry.polygon.regularpolygon property)": [[83, "sympy.geometry.polygon.RegularPolygon.interior_angle"]], "intersection() (sympy.geometry.polygon.polygon method)": [[83, "sympy.geometry.polygon.Polygon.intersection"]], "is_convex() (sympy.geometry.polygon.polygon method)": [[83, "sympy.geometry.polygon.Polygon.is_convex"]], "is_equilateral() (sympy.geometry.polygon.triangle method)": [[83, "sympy.geometry.polygon.Triangle.is_equilateral"]], "is_isosceles() (sympy.geometry.polygon.triangle method)": [[83, "sympy.geometry.polygon.Triangle.is_isosceles"]], "is_right() (sympy.geometry.polygon.triangle method)": [[83, "sympy.geometry.polygon.Triangle.is_right"]], "is_scalene() (sympy.geometry.polygon.triangle method)": [[83, "sympy.geometry.polygon.Triangle.is_scalene"]], "is_similar() (sympy.geometry.polygon.triangle method)": [[83, "sympy.geometry.polygon.Triangle.is_similar"]], "length (sympy.geometry.polygon.regularpolygon property)": [[83, "sympy.geometry.polygon.RegularPolygon.length"]], "medial (sympy.geometry.polygon.triangle property)": [[83, "sympy.geometry.polygon.Triangle.medial"]], "medians (sympy.geometry.polygon.triangle property)": [[83, "sympy.geometry.polygon.Triangle.medians"]], "nine_point_circle (sympy.geometry.polygon.triangle property)": [[83, "sympy.geometry.polygon.Triangle.nine_point_circle"]], "orthocenter (sympy.geometry.polygon.triangle property)": [[83, "sympy.geometry.polygon.Triangle.orthocenter"]], "perimeter (sympy.geometry.polygon.polygon property)": [[83, "sympy.geometry.polygon.Polygon.perimeter"]], "plot_interval() (sympy.geometry.polygon.polygon method)": [[83, "sympy.geometry.polygon.Polygon.plot_interval"]], "polar_second_moment_of_area() (sympy.geometry.polygon.polygon method)": [[83, "sympy.geometry.polygon.Polygon.polar_second_moment_of_area"]], "radius (sympy.geometry.polygon.regularpolygon property)": [[83, "sympy.geometry.polygon.RegularPolygon.radius"]], "reflect() (sympy.geometry.polygon.regularpolygon method)": [[83, "sympy.geometry.polygon.RegularPolygon.reflect"]], "rotate() (sympy.geometry.polygon.regularpolygon method)": [[83, "sympy.geometry.polygon.RegularPolygon.rotate"]], "rotation (sympy.geometry.polygon.regularpolygon property)": [[83, "sympy.geometry.polygon.RegularPolygon.rotation"]], "scale() (sympy.geometry.polygon.regularpolygon method)": [[83, "sympy.geometry.polygon.RegularPolygon.scale"]], "second_moment_of_area() (sympy.geometry.polygon.polygon method)": [[83, "sympy.geometry.polygon.Polygon.second_moment_of_area"]], "section_modulus() (sympy.geometry.polygon.polygon method)": [[83, "sympy.geometry.polygon.Polygon.section_modulus"]], "sides (sympy.geometry.polygon.polygon property)": [[83, "sympy.geometry.polygon.Polygon.sides"]], "spin() (sympy.geometry.polygon.regularpolygon method)": [[83, "sympy.geometry.polygon.RegularPolygon.spin"]], "sympy.geometry.polygon": [[83, "module-sympy.geometry.polygon"]], "vertices (sympy.geometry.polygon.polygon property)": [[83, "sympy.geometry.polygon.Polygon.vertices"]], "vertices (sympy.geometry.polygon.regularpolygon property)": [[83, "sympy.geometry.polygon.RegularPolygon.vertices"]], "vertices (sympy.geometry.polygon.triangle property)": [[83, "sympy.geometry.polygon.Triangle.vertices"]], "are_similar() (in module sympy.geometry.util)": [[84, "sympy.geometry.util.are_similar"]], "centroid() (in module sympy.geometry.util)": [[84, "sympy.geometry.util.centroid"]], "convex_hull() (in module sympy.geometry.util)": [[84, "sympy.geometry.util.convex_hull"]], "idiff() (in module sympy.geometry.util)": [[84, "sympy.geometry.util.idiff"]], "intersection() (in module sympy.geometry.util)": [[84, "sympy.geometry.util.intersection"]], "sympy.geometry.util": [[84, "module-sympy.geometry.util"]], "expr_to_holonomic() (in module sympy.holonomic.holonomic)": [[86, "sympy.holonomic.holonomic.expr_to_holonomic"]], "from_hyper() (in module sympy.holonomic.holonomic)": [[86, "sympy.holonomic.holonomic.from_hyper"]], "from_meijerg() (in module sympy.holonomic.holonomic)": [[86, "sympy.holonomic.holonomic.from_meijerg"]], "sympy.holonomic": [[87, "module-sympy.holonomic"]], "_convert_poly_rat_alg() (in module sympy.holonomic.holonomic)": [[88, "sympy.holonomic.holonomic._convert_poly_rat_alg"]], "_create_table() (in module sympy.holonomic.holonomic)": [[88, "sympy.holonomic.holonomic._create_table"]], "composition() (sympy.holonomic.holonomic.holonomicfunction method)": [[89, "sympy.holonomic.holonomic.HolonomicFunction.composition"]], "diff() (sympy.holonomic.holonomic.holonomicfunction method)": [[89, "sympy.holonomic.holonomic.HolonomicFunction.diff"]], "evalf() (sympy.holonomic.holonomic.holonomicfunction method)": [[89, "sympy.holonomic.holonomic.HolonomicFunction.evalf"]], "integrate() (sympy.holonomic.holonomic.holonomicfunction method)": [[89, "sympy.holonomic.holonomic.HolonomicFunction.integrate"]], "series() (sympy.holonomic.holonomic.holonomicfunction method)": [[89, "sympy.holonomic.holonomic.HolonomicFunction.series"]], "to_expr() (sympy.holonomic.holonomic.holonomicfunction method)": [[89, "sympy.holonomic.holonomic.HolonomicFunction.to_expr"]], "to_hyper() (sympy.holonomic.holonomic.holonomicfunction method)": [[89, "sympy.holonomic.holonomic.HolonomicFunction.to_hyper"]], "to_meijerg() (sympy.holonomic.holonomic.holonomicfunction method)": [[89, "sympy.holonomic.holonomic.HolonomicFunction.to_meijerg"]], "to_sequence() (sympy.holonomic.holonomic.holonomicfunction method)": [[89, "sympy.holonomic.holonomic.HolonomicFunction.to_sequence"]], "differentialoperator (class in sympy.holonomic.holonomic)": [[90, "sympy.holonomic.holonomic.DifferentialOperator"]], "differentialoperatoralgebra (class in sympy.holonomic.holonomic)": [[90, "sympy.holonomic.holonomic.DifferentialOperatorAlgebra"]], "differentialoperators() (in module sympy.holonomic.holonomic)": [[90, "sympy.holonomic.holonomic.DifferentialOperators"]], "holonomicfunction (class in sympy.holonomic.holonomic)": [[90, "sympy.holonomic.holonomic.HolonomicFunction"]], "is_singular() (sympy.holonomic.holonomic.differentialoperator method)": [[90, "sympy.holonomic.holonomic.DifferentialOperator.is_singular"]], "_coeffexpvalueerror": [[92, "sympy.integrals.meijerint._CoeffExpValueError"]], "_check_antecedents() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint._check_antecedents"]], "_check_antecedents_1() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint._check_antecedents_1"]], "_check_antecedents_inversion() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint._check_antecedents_inversion"]], "_condsimp() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint._condsimp"]], "_create_lookup_table() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint._create_lookup_table"]], "_dummy() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint._dummy"]], "_dummy_() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint._dummy_"]], "_eval_cond() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint._eval_cond"]], "_exponents() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint._exponents"]], "_find_splitting_points() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint._find_splitting_points"]], "_flip_g() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint._flip_g"]], "_functions() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint._functions"]], "_get_coeff_exp() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint._get_coeff_exp"]], "_guess_expansion() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint._guess_expansion"]], "_inflate_fox_h() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint._inflate_fox_h"]], "_inflate_g() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint._inflate_g"]], "_int0oo() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint._int0oo"]], "_int0oo_1() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint._int0oo_1"]], "_int_inversion() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint._int_inversion"]], "_is_analytic() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint._is_analytic"]], "_meijerint_definite_2() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint._meijerint_definite_2"]], "_meijerint_definite_3() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint._meijerint_definite_3"]], "_meijerint_definite_4() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint._meijerint_definite_4"]], "_meijerint_indefinite_1() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint._meijerint_indefinite_1"]], "_mul_args() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint._mul_args"]], "_mul_as_two_parts() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint._mul_as_two_parts"]], "_my_principal_branch() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint._my_principal_branch"]], "_mytype() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint._mytype"]], "_rewrite1() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint._rewrite1"]], "_rewrite2() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint._rewrite2"]], "_rewrite_inversion() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint._rewrite_inversion"]], "_rewrite_saxena() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint._rewrite_saxena"]], "_rewrite_saxena_1() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint._rewrite_saxena_1"]], "_rewrite_single() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint._rewrite_single"]], "_split_mul() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint._split_mul"]], "meijerint_definite() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint.meijerint_definite"]], "meijerint_indefinite() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint.meijerint_indefinite"]], "meijerint_inversion() (in module sympy.integrals.meijerint)": [[92, "sympy.integrals.meijerint.meijerint_inversion"]], "sympy.integrals.meijerint": [[92, "module-sympy.integrals.meijerint"]], "sympy.integrals.meijerint_doc": [[92, "module-sympy.integrals.meijerint_doc"]], "cosinetransform (class in sympy.integrals.transforms)": [[94, "sympy.integrals.transforms.CosineTransform"]], "exprwithlimits (class in sympy.concrete.expr_with_limits)": [[94, "sympy.concrete.expr_with_limits.ExprWithLimits"]], "fouriertransform (class in sympy.integrals.transforms)": [[94, "sympy.integrals.transforms.FourierTransform"]], "hankeltransform (class in sympy.integrals.transforms)": [[94, "sympy.integrals.transforms.HankelTransform"]], "integral (class in sympy.integrals.integrals)": [[94, "sympy.integrals.integrals.Integral"]], "integral.is_commutative (in module sympy.integrals.integrals)": [[94, "sympy.integrals.integrals.Integral.is_commutative"]], "integraltransform (class in sympy.integrals.transforms)": [[94, "sympy.integrals.transforms.IntegralTransform"]], "integraltransformerror": [[94, "sympy.integrals.transforms.IntegralTransformError"]], "inversecosinetransform (class in sympy.integrals.transforms)": [[94, "sympy.integrals.transforms.InverseCosineTransform"]], "inversefouriertransform (class in sympy.integrals.transforms)": [[94, "sympy.integrals.transforms.InverseFourierTransform"]], "inversehankeltransform (class in sympy.integrals.transforms)": [[94, "sympy.integrals.transforms.InverseHankelTransform"]], "inverselaplacetransform (class in sympy.integrals.transforms)": [[94, "sympy.integrals.transforms.InverseLaplaceTransform"]], "inversemellintransform (class in sympy.integrals.transforms)": [[94, "sympy.integrals.transforms.InverseMellinTransform"]], "inversesinetransform (class in sympy.integrals.transforms)": [[94, "sympy.integrals.transforms.InverseSineTransform"]], "laplacetransform (class in sympy.integrals.transforms)": [[94, "sympy.integrals.transforms.LaplaceTransform"]], "mellintransform (class in sympy.integrals.transforms)": [[94, "sympy.integrals.transforms.MellinTransform"]], "nonelementaryintegral (class in sympy.integrals.risch)": [[94, "sympy.integrals.risch.NonElementaryIntegral"]], "sinetransform (class in sympy.integrals.transforms)": [[94, "sympy.integrals.transforms.SineTransform"]], "_fourier_transform() (in module sympy.integrals.transforms)": [[94, "sympy.integrals.transforms._fourier_transform"]], "as_sum() (sympy.integrals.integrals.integral method)": [[94, "sympy.integrals.integrals.Integral.as_sum"]], "bound_symbols (sympy.concrete.expr_with_limits.exprwithlimits property)": [[94, "sympy.concrete.expr_with_limits.ExprWithLimits.bound_symbols"]], "components() (in module sympy.integrals.heurisch)": [[94, "sympy.integrals.heurisch.components"]], "cosine_transform() (in module sympy.integrals.transforms)": [[94, "sympy.integrals.transforms.cosine_transform"]], "deltaintegrate() (in module sympy.integrals.deltafunctions)": [[94, "sympy.integrals.deltafunctions.deltaintegrate"]], "doit() (sympy.integrals.integrals.integral method)": [[94, "sympy.integrals.integrals.Integral.doit"]], "doit() (sympy.integrals.transforms.integraltransform method)": [[94, "sympy.integrals.transforms.IntegralTransform.doit"]], "doit() (sympy.integrals.transforms.inverselaplacetransform method)": [[94, "sympy.integrals.transforms.InverseLaplaceTransform.doit"]], "doit() (sympy.integrals.transforms.laplacetransform method)": [[94, "sympy.integrals.transforms.LaplaceTransform.doit"]], "fourier_transform() (in module sympy.integrals.transforms)": [[94, "sympy.integrals.transforms.fourier_transform"]], "free_symbols (sympy.concrete.expr_with_limits.exprwithlimits property)": [[94, "sympy.concrete.expr_with_limits.ExprWithLimits.free_symbols"]], "free_symbols (sympy.integrals.integrals.integral property)": [[94, "sympy.integrals.integrals.Integral.free_symbols"]], "function (sympy.concrete.expr_with_limits.exprwithlimits property)": [[94, "sympy.concrete.expr_with_limits.ExprWithLimits.function"]], "function (sympy.integrals.transforms.integraltransform property)": [[94, "sympy.integrals.transforms.IntegralTransform.function"]], "function_variable (sympy.integrals.transforms.integraltransform property)": [[94, "sympy.integrals.transforms.IntegralTransform.function_variable"]], "gauss_chebyshev_t() (in module sympy.integrals.quadrature)": [[94, "sympy.integrals.quadrature.gauss_chebyshev_t"]], "gauss_chebyshev_u() (in module sympy.integrals.quadrature)": [[94, "sympy.integrals.quadrature.gauss_chebyshev_u"]], "gauss_gen_laguerre() (in module sympy.integrals.quadrature)": [[94, "sympy.integrals.quadrature.gauss_gen_laguerre"]], "gauss_hermite() (in module sympy.integrals.quadrature)": [[94, "sympy.integrals.quadrature.gauss_hermite"]], "gauss_jacobi() (in module sympy.integrals.quadrature)": [[94, "sympy.integrals.quadrature.gauss_jacobi"]], "gauss_laguerre() (in module sympy.integrals.quadrature)": [[94, "sympy.integrals.quadrature.gauss_laguerre"]], "gauss_legendre() (in module sympy.integrals.quadrature)": [[94, "sympy.integrals.quadrature.gauss_legendre"]], "gauss_lobatto() (in module sympy.integrals.quadrature)": [[94, "sympy.integrals.quadrature.gauss_lobatto"]], "hankel_transform() (in module sympy.integrals.transforms)": [[94, "sympy.integrals.transforms.hankel_transform"]], "has_finite_limits (sympy.concrete.expr_with_limits.exprwithlimits property)": [[94, "sympy.concrete.expr_with_limits.ExprWithLimits.has_finite_limits"]], "has_reversed_limits (sympy.concrete.expr_with_limits.exprwithlimits property)": [[94, "sympy.concrete.expr_with_limits.ExprWithLimits.has_reversed_limits"]], "heurisch() (in module sympy.integrals.heurisch)": [[94, "sympy.integrals.heurisch.heurisch"]], "integral_steps() (in module sympy.integrals.manualintegrate)": [[94, "sympy.integrals.manualintegrate.integral_steps"]], "integrate() (in module sympy.integrals.integrals)": [[94, "sympy.integrals.integrals.integrate"]], "inverse_cosine_transform() (in module sympy.integrals.transforms)": [[94, "sympy.integrals.transforms.inverse_cosine_transform"]], "inverse_fourier_transform() (in module sympy.integrals.transforms)": [[94, "sympy.integrals.transforms.inverse_fourier_transform"]], "inverse_hankel_transform() (in module sympy.integrals.transforms)": [[94, "sympy.integrals.transforms.inverse_hankel_transform"]], "inverse_laplace_transform() (in module sympy.integrals.transforms)": [[94, "sympy.integrals.transforms.inverse_laplace_transform"]], "inverse_mellin_transform() (in module sympy.integrals.transforms)": [[94, "sympy.integrals.transforms.inverse_mellin_transform"]], "inverse_sine_transform() (in module sympy.integrals.transforms)": [[94, "sympy.integrals.transforms.inverse_sine_transform"]], "is_number (sympy.concrete.expr_with_limits.exprwithlimits property)": [[94, "sympy.concrete.expr_with_limits.ExprWithLimits.is_number"]], "laplace_correspondence() (in module sympy.integrals.transforms)": [[94, "sympy.integrals.transforms.laplace_correspondence"]], "laplace_initial_conds() (in module sympy.integrals.transforms)": [[94, "sympy.integrals.transforms.laplace_initial_conds"]], "laplace_transform() (in module sympy.integrals.transforms)": [[94, "sympy.integrals.transforms.laplace_transform"]], "limits (sympy.concrete.expr_with_limits.exprwithlimits property)": [[94, "sympy.concrete.expr_with_limits.ExprWithLimits.limits"]], "line_integrate() (in module sympy.integrals.integrals)": [[94, "sympy.integrals.integrals.line_integrate"]], "manualintegrate() (in module sympy.integrals.manualintegrate)": [[94, "sympy.integrals.manualintegrate.manualintegrate"]], "mellin_transform() (in module sympy.integrals.transforms)": [[94, "sympy.integrals.transforms.mellin_transform"]], "polytope_integrate() (in module sympy.integrals.intpoly)": [[94, "sympy.integrals.intpoly.polytope_integrate"]], "principal_value() (sympy.integrals.integrals.integral method)": [[94, "sympy.integrals.integrals.Integral.principal_value"]], "ratint() (in module sympy.integrals.rationaltools)": [[94, "sympy.integrals.rationaltools.ratint"]], "ratint_logpart() (in module sympy.integrals.rationaltools)": [[94, "sympy.integrals.rationaltools.ratint_logpart"]], "ratint_ratpart() (in module sympy.integrals.rationaltools)": [[94, "sympy.integrals.rationaltools.ratint_ratpart"]], "risch_integrate() (in module sympy.integrals.risch)": [[94, "sympy.integrals.risch.risch_integrate"]], "sine_transform() (in module sympy.integrals.transforms)": [[94, "sympy.integrals.transforms.sine_transform"]], "singularityintegrate() (in module sympy.integrals.singularityfunctions)": [[94, "sympy.integrals.singularityfunctions.singularityintegrate"]], "sympy.integrals": [[94, "module-sympy.integrals"]], "sympy.integrals.intpoly": [[94, "module-sympy.integrals.intpoly"]], "sympy.integrals.transforms": [[94, "module-sympy.integrals.transforms"]], "transform() (sympy.integrals.integrals.integral method)": [[94, "sympy.integrals.integrals.Integral.transform"]], "transform_variable (sympy.integrals.transforms.integraltransform property)": [[94, "sympy.integrals.transforms.IntegralTransform.transform_variable"]], "trigintegrate() (in module sympy.integrals.trigonometry)": [[94, "sympy.integrals.trigonometry.trigintegrate"]], "variables (sympy.concrete.expr_with_limits.exprwithlimits property)": [[94, "sympy.concrete.expr_with_limits.ExprWithLimits.variables"]], "enable_automatic_int_sympification() (in module sympy.interactive.session)": [[95, "sympy.interactive.session.enable_automatic_int_sympification"]], "enable_automatic_symbols() (in module sympy.interactive.session)": [[95, "sympy.interactive.session.enable_automatic_symbols"]], "init_ipython_session() (in module sympy.interactive.session)": [[95, "sympy.interactive.session.init_ipython_session"]], "init_printing() (in module sympy.interactive.printing)": [[95, "sympy.interactive.printing.init_printing"]], "init_python_session() (in module sympy.interactive.session)": [[95, "sympy.interactive.session.init_python_session"]], "init_session() (in module sympy.interactive.session)": [[95, "sympy.interactive.session.init_session"]], "int_to_integer() (in module sympy.interactive.session)": [[95, "sympy.interactive.session.int_to_Integer"]], "sympy.interactive": [[95, "module-sympy.interactive"]], "sympy.interactive.printing": [[95, "module-sympy.interactive.printing"]], "sympy.interactive.session": [[95, "module-sympy.interactive.session"]], "cartanmatrix() (in module sympy.liealgebras.cartan_matrix)": [[96, "sympy.liealgebras.cartan_matrix.CartanMatrix"]], "cartantype_generator (class in sympy.liealgebras.cartan_type)": [[96, "sympy.liealgebras.cartan_type.CartanType_generator"]], "dynkindiagram() (in module sympy.liealgebras.dynkin_diagram)": [[96, "sympy.liealgebras.dynkin_diagram.DynkinDiagram"]], "rootsystem (class in sympy.liealgebras.root_system)": [[96, "sympy.liealgebras.root_system.RootSystem"]], "standard_cartan (class in sympy.liealgebras.cartan_type)": [[96, "sympy.liealgebras.cartan_type.Standard_Cartan"]], "typea (class in sympy.liealgebras.type_a)": [[96, "sympy.liealgebras.type_a.TypeA"]], "typeb (class in sympy.liealgebras.type_b)": [[96, "sympy.liealgebras.type_b.TypeB"]], "typec (class in sympy.liealgebras.type_c)": [[96, "sympy.liealgebras.type_c.TypeC"]], "typed (class in sympy.liealgebras.type_d)": [[96, "sympy.liealgebras.type_d.TypeD"]], "typee (class in sympy.liealgebras.type_e)": [[96, "sympy.liealgebras.type_e.TypeE"]], "typef (class in sympy.liealgebras.type_f)": [[96, "sympy.liealgebras.type_f.TypeF"]], "typeg (class in sympy.liealgebras.type_g)": [[96, "sympy.liealgebras.type_g.TypeG"]], "weylgroup (class in sympy.liealgebras.weyl_group)": [[96, "sympy.liealgebras.weyl_group.WeylGroup"]], "add_as_roots() (sympy.liealgebras.root_system.rootsystem method)": [[96, "sympy.liealgebras.root_system.RootSystem.add_as_roots"]], "add_simple_roots() (sympy.liealgebras.root_system.rootsystem method)": [[96, "sympy.liealgebras.root_system.RootSystem.add_simple_roots"]], "all_roots() (sympy.liealgebras.root_system.rootsystem method)": [[96, "sympy.liealgebras.root_system.RootSystem.all_roots"]], "basic_root() (sympy.liealgebras.type_a.typea method)": [[96, "sympy.liealgebras.type_a.TypeA.basic_root"]], "basic_root() (sympy.liealgebras.type_b.typeb method)": [[96, "sympy.liealgebras.type_b.TypeB.basic_root"]], "basic_root() (sympy.liealgebras.type_c.typec method)": [[96, "sympy.liealgebras.type_c.TypeC.basic_root"]], "basic_root() (sympy.liealgebras.type_d.typed method)": [[96, "sympy.liealgebras.type_d.TypeD.basic_root"]], "basic_root() (sympy.liealgebras.type_e.typee method)": [[96, "sympy.liealgebras.type_e.TypeE.basic_root"]], "basic_root() (sympy.liealgebras.type_f.typef method)": [[96, "sympy.liealgebras.type_f.TypeF.basic_root"]], "basis() (sympy.liealgebras.type_a.typea method)": [[96, "sympy.liealgebras.type_a.TypeA.basis"]], "basis() (sympy.liealgebras.type_b.typeb method)": [[96, "sympy.liealgebras.type_b.TypeB.basis"]], "basis() (sympy.liealgebras.type_c.typec method)": [[96, "sympy.liealgebras.type_c.TypeC.basis"]], "basis() (sympy.liealgebras.type_d.typed method)": [[96, "sympy.liealgebras.type_d.TypeD.basis"]], "basis() (sympy.liealgebras.type_e.typee method)": [[96, "sympy.liealgebras.type_e.TypeE.basis"]], "basis() (sympy.liealgebras.type_f.typef method)": [[96, "sympy.liealgebras.type_f.TypeF.basis"]], "basis() (sympy.liealgebras.type_g.typeg method)": [[96, "sympy.liealgebras.type_g.TypeG.basis"]], "cartan_matrix() (sympy.liealgebras.root_system.rootsystem method)": [[96, "sympy.liealgebras.root_system.RootSystem.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_a.typea method)": [[96, "sympy.liealgebras.type_a.TypeA.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_b.typeb method)": [[96, "sympy.liealgebras.type_b.TypeB.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_c.typec method)": [[96, "sympy.liealgebras.type_c.TypeC.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_d.typed method)": [[96, "sympy.liealgebras.type_d.TypeD.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_e.typee method)": [[96, "sympy.liealgebras.type_e.TypeE.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_f.typef method)": [[96, "sympy.liealgebras.type_f.TypeF.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_g.typeg method)": [[96, "sympy.liealgebras.type_g.TypeG.cartan_matrix"]], "coxeter_diagram() (sympy.liealgebras.weyl_group.weylgroup method)": [[96, "sympy.liealgebras.weyl_group.WeylGroup.coxeter_diagram"]], "delete_doubles() (sympy.liealgebras.weyl_group.weylgroup method)": [[96, "sympy.liealgebras.weyl_group.WeylGroup.delete_doubles"]], "dimension() (sympy.liealgebras.type_a.typea method)": [[96, "sympy.liealgebras.type_a.TypeA.dimension"]], "dimension() (sympy.liealgebras.type_b.typeb method)": [[96, "sympy.liealgebras.type_b.TypeB.dimension"]], "dimension() (sympy.liealgebras.type_c.typec method)": [[96, "sympy.liealgebras.type_c.TypeC.dimension"]], "dimension() (sympy.liealgebras.type_d.typed method)": [[96, "sympy.liealgebras.type_d.TypeD.dimension"]], "dimension() (sympy.liealgebras.type_e.typee method)": [[96, "sympy.liealgebras.type_e.TypeE.dimension"]], "dimension() (sympy.liealgebras.type_f.typef method)": [[96, "sympy.liealgebras.type_f.TypeF.dimension"]], "dimension() (sympy.liealgebras.type_g.typeg method)": [[96, "sympy.liealgebras.type_g.TypeG.dimension"]], "dynkin_diagram() (sympy.liealgebras.root_system.rootsystem method)": [[96, "sympy.liealgebras.root_system.RootSystem.dynkin_diagram"]], "element_order() (sympy.liealgebras.weyl_group.weylgroup method)": [[96, "sympy.liealgebras.weyl_group.WeylGroup.element_order"]], "generators() (sympy.liealgebras.weyl_group.weylgroup method)": [[96, "sympy.liealgebras.weyl_group.WeylGroup.generators"]], "group_name() (sympy.liealgebras.weyl_group.weylgroup method)": [[96, "sympy.liealgebras.weyl_group.WeylGroup.group_name"]], "group_order() (sympy.liealgebras.weyl_group.weylgroup method)": [[96, "sympy.liealgebras.weyl_group.WeylGroup.group_order"]], "highest_root() (sympy.liealgebras.type_a.typea method)": [[96, "sympy.liealgebras.type_a.TypeA.highest_root"]], "lie_algebra() (sympy.liealgebras.type_a.typea method)": [[96, "sympy.liealgebras.type_a.TypeA.lie_algebra"]], "lie_algebra() (sympy.liealgebras.type_b.typeb method)": [[96, "sympy.liealgebras.type_b.TypeB.lie_algebra"]], "lie_algebra() (sympy.liealgebras.type_c.typec method)": [[96, "sympy.liealgebras.type_c.TypeC.lie_algebra"]], "lie_algebra() (sympy.liealgebras.type_d.typed method)": [[96, "sympy.liealgebras.type_d.TypeD.lie_algebra"]], "matrix_form() (sympy.liealgebras.weyl_group.weylgroup method)": [[96, "sympy.liealgebras.weyl_group.WeylGroup.matrix_form"]], "positive_roots() (sympy.liealgebras.type_a.typea method)": [[96, "sympy.liealgebras.type_a.TypeA.positive_roots"]], "positive_roots() (sympy.liealgebras.type_b.typeb method)": [[96, "sympy.liealgebras.type_b.TypeB.positive_roots"]], "positive_roots() (sympy.liealgebras.type_c.typec method)": [[96, "sympy.liealgebras.type_c.TypeC.positive_roots"]], "positive_roots() (sympy.liealgebras.type_d.typed method)": [[96, "sympy.liealgebras.type_d.TypeD.positive_roots"]], "positive_roots() (sympy.liealgebras.type_e.typee method)": [[96, "sympy.liealgebras.type_e.TypeE.positive_roots"]], "positive_roots() (sympy.liealgebras.type_f.typef method)": [[96, "sympy.liealgebras.type_f.TypeF.positive_roots"]], "positive_roots() (sympy.liealgebras.type_g.typeg method)": [[96, "sympy.liealgebras.type_g.TypeG.positive_roots"]], "rank() (sympy.liealgebras.cartan_type.standard_cartan method)": [[96, "sympy.liealgebras.cartan_type.Standard_Cartan.rank"]], "root_space() (sympy.liealgebras.root_system.rootsystem method)": [[96, "sympy.liealgebras.root_system.RootSystem.root_space"]], "roots() (sympy.liealgebras.type_a.typea method)": [[96, "sympy.liealgebras.type_a.TypeA.roots"]], "roots() (sympy.liealgebras.type_b.typeb method)": [[96, "sympy.liealgebras.type_b.TypeB.roots"]], "roots() (sympy.liealgebras.type_c.typec method)": [[96, "sympy.liealgebras.type_c.TypeC.roots"]], "roots() (sympy.liealgebras.type_d.typed method)": [[96, "sympy.liealgebras.type_d.TypeD.roots"]], "roots() (sympy.liealgebras.type_e.typee method)": [[96, "sympy.liealgebras.type_e.TypeE.roots"]], "roots() (sympy.liealgebras.type_f.typef method)": [[96, "sympy.liealgebras.type_f.TypeF.roots"]], "roots() (sympy.liealgebras.type_g.typeg method)": [[96, "sympy.liealgebras.type_g.TypeG.roots"]], "series() (sympy.liealgebras.cartan_type.standard_cartan method)": [[96, "sympy.liealgebras.cartan_type.Standard_Cartan.series"]], "simple_root() (sympy.liealgebras.type_a.typea method)": [[96, "sympy.liealgebras.type_a.TypeA.simple_root"]], "simple_root() (sympy.liealgebras.type_b.typeb method)": [[96, "sympy.liealgebras.type_b.TypeB.simple_root"]], "simple_root() (sympy.liealgebras.type_c.typec method)": [[96, "sympy.liealgebras.type_c.TypeC.simple_root"]], "simple_root() (sympy.liealgebras.type_d.typed method)": [[96, "sympy.liealgebras.type_d.TypeD.simple_root"]], "simple_root() (sympy.liealgebras.type_e.typee method)": [[96, "sympy.liealgebras.type_e.TypeE.simple_root"]], "simple_root() (sympy.liealgebras.type_f.typef method)": [[96, "sympy.liealgebras.type_f.TypeF.simple_root"]], "simple_root() (sympy.liealgebras.type_g.typeg method)": [[96, "sympy.liealgebras.type_g.TypeG.simple_root"]], "simple_roots() (sympy.liealgebras.root_system.rootsystem method)": [[96, "sympy.liealgebras.root_system.RootSystem.simple_roots"]], "sympy.liealgebras": [[96, "module-sympy.liealgebras"]], "anfform() (in module sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.ANFform"]], "and (class in sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.And"]], "boolean (class in sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.Boolean"]], "booleanfalse (class in sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.BooleanFalse"]], "booleantrue (class in sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.BooleanTrue"]], "equivalent (class in sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.Equivalent"]], "exclusive (class in sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.Exclusive"]], "ite (class in sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.ITE"]], "implies (class in sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.Implies"]], "nand (class in sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.Nand"]], "nor (class in sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.Nor"]], "not (class in sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.Not"]], "or (class in sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.Or"]], "posform() (in module sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.POSform"]], "sopform() (in module sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.SOPform"]], "xnor (class in sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.Xnor"]], "xor (class in sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.Xor"]], "anf_coeffs() (in module sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.anf_coeffs"]], "as_set() (sympy.logic.boolalg.boolean method)": [[97, "sympy.logic.boolalg.Boolean.as_set"]], "as_set() (sympy.logic.boolalg.booleanfalse method)": [[97, "sympy.logic.boolalg.BooleanFalse.as_set"]], "as_set() (sympy.logic.boolalg.booleantrue method)": [[97, "sympy.logic.boolalg.BooleanTrue.as_set"]], "bool_map() (in module sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.bool_map"]], "bool_maxterm() (in module sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.bool_maxterm"]], "bool_minterm() (in module sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.bool_minterm"]], "bool_monomial() (in module sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.bool_monomial"]], "distribute_and_over_or() (in module sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.distribute_and_over_or"]], "distribute_or_over_and() (in module sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.distribute_or_over_and"]], "distribute_xor_over_and() (in module sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.distribute_xor_over_and"]], "eliminate_implications() (in module sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.eliminate_implications"]], "equals() (sympy.logic.boolalg.boolean method)": [[97, "sympy.logic.boolalg.Boolean.equals"]], "gateinputcount() (in module sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.gateinputcount"]], "integer_to_term() (in module sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.integer_to_term"]], "is_anf() (in module sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.is_anf"]], "is_cnf() (in module sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.is_cnf"]], "is_dnf() (in module sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.is_dnf"]], "is_nnf() (in module sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.is_nnf"]], "satisfiable() (in module sympy.logic.inference)": [[97, "sympy.logic.inference.satisfiable"]], "simplify_logic() (in module sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.simplify_logic"]], "sympy.logic": [[97, "module-sympy.logic"]], "sympy.logic.inference": [[97, "module-sympy.logic.inference"]], "term_to_integer() (in module sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.term_to_integer"]], "to_anf() (in module sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.to_anf"]], "to_cnf() (in module sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.to_cnf"]], "to_dnf() (in module sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.to_dnf"]], "to_int_repr() (in module sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.to_int_repr"]], "to_nnf() (in module sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.to_nnf"]], "truth_table() (in module sympy.logic.boolalg)": [[97, "sympy.logic.boolalg.truth_table"]], "c (sympy.matrices.common.matrixcommon property)": [[98, "sympy.matrices.common.MatrixCommon.C"]], "h (sympy.matrices.common.matrixcommon property)": [[98, "sympy.matrices.common.MatrixCommon.H"]], "matrixcommon (class in sympy.matrices.common)": [[98, "sympy.matrices.common.MatrixCommon"]], "matrixkind (class in sympy.matrices.common)": [[98, "sympy.matrices.common.MatrixKind"]], "t (sympy.matrices.common.matrixcommon property)": [[98, "sympy.matrices.common.MatrixCommon.T"]], "__abs__() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.__abs__"]], "__add__() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.__add__"]], "__getitem__() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.__getitem__"]], "__len__() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.__len__"]], "__mul__() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.__mul__"]], "__pow__() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.__pow__"]], "__weakref__ (sympy.matrices.common.matrixcommon attribute)": [[98, "sympy.matrices.common.MatrixCommon.__weakref__"]], "adjoint() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.adjoint"]], "applyfunc() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.applyfunc"]], "as_real_imag() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.as_real_imag"]], "atoms() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.atoms"]], "col() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.col"]], "col_del() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.col_del"]], "col_insert() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.col_insert"]], "col_join() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.col_join"]], "companion() (sympy.matrices.common.matrixcommon class method)": [[98, "sympy.matrices.common.MatrixCommon.companion"]], "conjugate() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.conjugate"]], "diag() (sympy.matrices.common.matrixcommon class method)": [[98, "sympy.matrices.common.MatrixCommon.diag"]], "diagonal() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.diagonal"]], "evalf() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.evalf"]], "expand() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.expand"]], "extract() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.extract"]], "eye() (sympy.matrices.common.matrixcommon class method)": [[98, "sympy.matrices.common.MatrixCommon.eye"]], "free_symbols (sympy.matrices.common.matrixcommon property)": [[98, "sympy.matrices.common.MatrixCommon.free_symbols"]], "get_diag_blocks() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.get_diag_blocks"]], "has() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.has"]], "hstack() (sympy.matrices.common.matrixcommon class method)": [[98, "sympy.matrices.common.MatrixCommon.hstack"]], "is_anti_symmetric() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.is_anti_symmetric"]], "is_diagonal() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.is_diagonal"]], "is_hermitian (sympy.matrices.common.matrixcommon property)": [[98, "sympy.matrices.common.MatrixCommon.is_hermitian"]], "is_lower (sympy.matrices.common.matrixcommon property)": [[98, "sympy.matrices.common.MatrixCommon.is_lower"]], "is_lower_hessenberg (sympy.matrices.common.matrixcommon property)": [[98, "sympy.matrices.common.MatrixCommon.is_lower_hessenberg"]], "is_square (sympy.matrices.common.matrixcommon property)": [[98, "sympy.matrices.common.MatrixCommon.is_square"]], "is_strongly_diagonally_dominant (sympy.matrices.common.matrixcommon property)": [[98, "sympy.matrices.common.MatrixCommon.is_strongly_diagonally_dominant"]], "is_symbolic() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.is_symbolic"]], "is_symmetric() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.is_symmetric"]], "is_upper (sympy.matrices.common.matrixcommon property)": [[98, "sympy.matrices.common.MatrixCommon.is_upper"]], "is_upper_hessenberg (sympy.matrices.common.matrixcommon property)": [[98, "sympy.matrices.common.MatrixCommon.is_upper_hessenberg"]], "is_weakly_diagonally_dominant (sympy.matrices.common.matrixcommon property)": [[98, "sympy.matrices.common.MatrixCommon.is_weakly_diagonally_dominant"]], "is_zero_matrix (sympy.matrices.common.matrixcommon property)": [[98, "sympy.matrices.common.MatrixCommon.is_zero_matrix"]], "jordan_block() (sympy.matrices.common.matrixcommon class method)": [[98, "sympy.matrices.common.MatrixCommon.jordan_block"]], "lower_triangular() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.lower_triangular"]], "multiply() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.multiply"]], "multiply_elementwise() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.multiply_elementwise"]], "n() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.n"]], "ones() (sympy.matrices.common.matrixcommon class method)": [[98, "sympy.matrices.common.MatrixCommon.ones"]], "permute() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.permute"]], "permute_cols() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.permute_cols"]], "permute_rows() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.permute_rows"]], "pow() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.pow"]], "refine() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.refine"]], "replace() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.replace"]], "reshape() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.reshape"]], "rmultiply() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.rmultiply"]], "rot90() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.rot90"]], "row() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.row"]], "row_del() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.row_del"]], "row_insert() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.row_insert"]], "row_join() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.row_join"]], "shape (sympy.matrices.common.matrixcommon property)": [[98, "sympy.matrices.common.MatrixCommon.shape"]], "simplify() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.simplify"]], "subs() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.subs"]], "sympy.matrices.common": [[98, "module-sympy.matrices.common"]], "todod() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.todod"]], "todok() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.todok"]], "tolist() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.tolist"]], "trace() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.trace"]], "transpose() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.transpose"]], "upper_triangular() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.upper_triangular"]], "values() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.values"]], "vec() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.vec"]], "vech() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.vech"]], "vstack() (sympy.matrices.common.matrixcommon class method)": [[98, "sympy.matrices.common.MatrixCommon.vstack"]], "wilkinson() (sympy.matrices.common.matrixcommon class method)": [[98, "sympy.matrices.common.MatrixCommon.wilkinson"]], "xreplace() (sympy.matrices.common.matrixcommon method)": [[98, "sympy.matrices.common.MatrixCommon.xreplace"]], "zeros() (sympy.matrices.common.matrixcommon class method)": [[98, "sympy.matrices.common.MatrixCommon.zeros"]], "densematrix (class in sympy.matrices.dense)": [[99, "sympy.matrices.dense.DenseMatrix"]], "ldldecomposition() (sympy.matrices.dense.densematrix method)": [[99, "sympy.matrices.dense.DenseMatrix.LDLdecomposition"]], "matrix (in module sympy.matrices.dense)": [[99, "sympy.matrices.dense.Matrix"]], "mutabledensematrix (class in sympy.matrices.dense)": [[99, "sympy.matrices.dense.MutableDenseMatrix"]], "as_immutable() (sympy.matrices.dense.densematrix method)": [[99, "sympy.matrices.dense.DenseMatrix.as_immutable"]], "as_mutable() (sympy.matrices.dense.densematrix method)": [[99, "sympy.matrices.dense.DenseMatrix.as_mutable"]], "cholesky() (sympy.matrices.dense.densematrix method)": [[99, "sympy.matrices.dense.DenseMatrix.cholesky"]], "lower_triangular_solve() (sympy.matrices.dense.densematrix method)": [[99, "sympy.matrices.dense.DenseMatrix.lower_triangular_solve"]], "simplify() (sympy.matrices.dense.mutabledensematrix method)": [[99, "sympy.matrices.dense.MutableDenseMatrix.simplify"]], "upper_triangular_solve() (sympy.matrices.dense.densematrix method)": [[99, "sympy.matrices.dense.DenseMatrix.upper_triangular_solve"]], "blockdiagmatrix (class in sympy.matrices.expressions.blockmatrix)": [[100, "sympy.matrices.expressions.blockmatrix.BlockDiagMatrix"]], "blockmatrix (class in sympy.matrices.expressions.blockmatrix)": [[100, "sympy.matrices.expressions.blockmatrix.BlockMatrix"]], "companionmatrix (class in sympy.matrices.expressions)": [[100, "sympy.matrices.expressions.CompanionMatrix"]], "functionmatrix (class in sympy.matrices.expressions)": [[100, "sympy.matrices.expressions.FunctionMatrix"]], "hadamardpower (class in sympy.matrices.expressions)": [[100, "sympy.matrices.expressions.HadamardPower"]], "hadamardproduct (class in sympy.matrices.expressions)": [[100, "sympy.matrices.expressions.HadamardProduct"]], "identity (class in sympy.matrices.expressions)": [[100, "sympy.matrices.expressions.Identity"]], "inverse (class in sympy.matrices.expressions)": [[100, "sympy.matrices.expressions.Inverse"]], "ldudecomposition() (sympy.matrices.expressions.blockmatrix.blockmatrix method)": [[100, "sympy.matrices.expressions.blockmatrix.BlockMatrix.LDUdecomposition"]], "ludecomposition() (sympy.matrices.expressions.blockmatrix.blockmatrix method)": [[100, "sympy.matrices.expressions.blockmatrix.BlockMatrix.LUdecomposition"]], "matadd (class in sympy.matrices.expressions)": [[100, "sympy.matrices.expressions.MatAdd"]], "matmul (class in sympy.matrices.expressions)": [[100, "sympy.matrices.expressions.MatMul"]], "matpow (class in sympy.matrices.expressions)": [[100, "sympy.matrices.expressions.MatPow"]], "matrixexpr (class in sympy.matrices.expressions)": [[100, "sympy.matrices.expressions.MatrixExpr"]], "matrixpermute (class in sympy.matrices.expressions)": [[100, "sympy.matrices.expressions.MatrixPermute"]], "matrixset (class in sympy.matrices.expressions)": [[100, "sympy.matrices.expressions.MatrixSet"]], "matrixsymbol (class in sympy.matrices.expressions)": [[100, "sympy.matrices.expressions.MatrixSymbol"]], "permutationmatrix (class in sympy.matrices.expressions)": [[100, "sympy.matrices.expressions.PermutationMatrix"]], "t (sympy.matrices.expressions.matrixexpr property)": [[100, "sympy.matrices.expressions.MatrixExpr.T"]], "trace (class in sympy.matrices.expressions)": [[100, "sympy.matrices.expressions.Trace"]], "transpose (class in sympy.matrices.expressions)": [[100, "sympy.matrices.expressions.Transpose"]], "udldecomposition() (sympy.matrices.expressions.blockmatrix.blockmatrix method)": [[100, "sympy.matrices.expressions.blockmatrix.BlockMatrix.UDLdecomposition"]], "zeromatrix (class in sympy.matrices.expressions)": [[100, "sympy.matrices.expressions.ZeroMatrix"]], "as_coeff_mul() (sympy.matrices.expressions.matrixexpr method)": [[100, "sympy.matrices.expressions.MatrixExpr.as_coeff_Mul"]], "as_explicit() (sympy.matrices.expressions.matrixexpr method)": [[100, "sympy.matrices.expressions.MatrixExpr.as_explicit"]], "as_mutable() (sympy.matrices.expressions.matrixexpr method)": [[100, "sympy.matrices.expressions.MatrixExpr.as_mutable"]], "block_collapse() (in module sympy.matrices.expressions.blockmatrix)": [[100, "sympy.matrices.expressions.blockmatrix.block_collapse"]], "equals() (sympy.matrices.expressions.matrixexpr method)": [[100, "sympy.matrices.expressions.MatrixExpr.equals"]], "from_index_summation() (sympy.matrices.expressions.matrixexpr static method)": [[100, "sympy.matrices.expressions.MatrixExpr.from_index_summation"]], "get_diag_blocks() (sympy.matrices.expressions.blockmatrix.blockdiagmatrix method)": [[100, "sympy.matrices.expressions.blockmatrix.BlockDiagMatrix.get_diag_blocks"]], "hadamard_product() (in module sympy.matrices.expressions)": [[100, "sympy.matrices.expressions.hadamard_product"]], "schur() (sympy.matrices.expressions.blockmatrix.blockmatrix method)": [[100, "sympy.matrices.expressions.blockmatrix.BlockMatrix.schur"]], "sympy.matrices.expressions": [[100, "module-sympy.matrices.expressions"]], "sympy.matrices.expressions.blockmatrix": [[100, "module-sympy.matrices.expressions.blockmatrix"]], "transpose() (sympy.matrices.expressions.blockmatrix.blockmatrix method)": [[100, "sympy.matrices.expressions.blockmatrix.BlockMatrix.transpose"]], "immutabledensematrix (class in sympy.matrices.immutable)": [[101, "sympy.matrices.immutable.ImmutableDenseMatrix"]], "immutablematrix (in module sympy.matrices.immutable)": [[101, "sympy.matrices.immutable.ImmutableMatrix"]], "sympy.matrices.immutable": [[101, "module-sympy.matrices.immutable"]], "sympy.matrices": [[102, "module-sympy.matrices"]], "d (sympy.matrices.matrices.matrixbase property)": [[103, "sympy.matrices.matrices.MatrixBase.D"]], "gramschmidt() (in module sympy.matrices.dense)": [[103, "sympy.matrices.dense.GramSchmidt"]], "ldldecomposition() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.LDLdecomposition"]], "ldlsolve() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.LDLsolve"]], "ludecomposition() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.LUdecomposition"]], "ludecompositionff() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.LUdecompositionFF"]], "ludecomposition_simple() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.LUdecomposition_Simple"]], "lusolve() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.LUsolve"]], "matrixbase (class in sympy.matrices.matrices)": [[103, "sympy.matrices.matrices.MatrixBase"]], "matrixcalculus (class in sympy.matrices.matrices)": [[103, "sympy.matrices.matrices.MatrixCalculus"]], "matrixdeterminant (class in sympy.matrices.matrices)": [[103, "sympy.matrices.matrices.MatrixDeterminant"]], "matrixeigen (class in sympy.matrices.matrices)": [[103, "sympy.matrices.matrices.MatrixEigen"]], "matrixerror (class in sympy.matrices.matrices)": [[103, "sympy.matrices.matrices.MatrixError"]], "matrixreductions (class in sympy.matrices.matrices)": [[103, "sympy.matrices.matrices.MatrixReductions"]], "matrixsubspaces (class in sympy.matrices.matrices)": [[103, "sympy.matrices.matrices.MatrixSubspaces"]], "nonsquarematrixerror (class in sympy.matrices.matrices)": [[103, "sympy.matrices.matrices.NonSquareMatrixError"]], "qrdecomposition() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.QRdecomposition"]], "qrsolve() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.QRsolve"]], "shapeerror (class in sympy.matrices.matrices)": [[103, "sympy.matrices.matrices.ShapeError"]], "a2idx() (in module sympy.matrices.matrices)": [[103, "sympy.matrices.matrices.a2idx"]], "add() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.add"]], "adjugate() (sympy.matrices.matrices.matrixdeterminant method)": [[103, "sympy.matrices.matrices.MatrixDeterminant.adjugate"]], "analytic_func() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.analytic_func"]], "bidiagonal_decomposition() (sympy.matrices.matrices.matrixeigen method)": [[103, "sympy.matrices.matrices.MatrixEigen.bidiagonal_decomposition"]], "bidiagonalize() (sympy.matrices.matrices.matrixeigen method)": [[103, "sympy.matrices.matrices.MatrixEigen.bidiagonalize"]], "casoratian() (in module sympy.matrices.dense)": [[103, "sympy.matrices.dense.casoratian"]], "charpoly() (sympy.matrices.matrices.matrixdeterminant method)": [[103, "sympy.matrices.matrices.MatrixDeterminant.charpoly"]], "cholesky() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.cholesky"]], "cholesky_solve() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.cholesky_solve"]], "cofactor() (sympy.matrices.matrices.matrixdeterminant method)": [[103, "sympy.matrices.matrices.MatrixDeterminant.cofactor"]], "cofactor_matrix() (sympy.matrices.matrices.matrixdeterminant method)": [[103, "sympy.matrices.matrices.MatrixDeterminant.cofactor_matrix"]], "columnspace() (sympy.matrices.matrices.matrixsubspaces method)": [[103, "sympy.matrices.matrices.MatrixSubspaces.columnspace"]], "condition_number() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.condition_number"]], "connected_components() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.connected_components"]], "connected_components_decomposition() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.connected_components_decomposition"]], "copy() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.copy"]], "cramer_solve() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.cramer_solve"]], "cross() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.cross"]], "det() (sympy.matrices.matrices.matrixdeterminant method)": [[103, "sympy.matrices.matrices.MatrixDeterminant.det"]], "diag() (in module sympy.matrices.dense)": [[103, "sympy.matrices.dense.diag"]], "diagonal_solve() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.diagonal_solve"]], "diagonalize() (sympy.matrices.matrices.matrixeigen method)": [[103, "sympy.matrices.matrices.MatrixEigen.diagonalize"]], "diff() (sympy.matrices.matrices.matrixcalculus method)": [[103, "sympy.matrices.matrices.MatrixCalculus.diff"]], "dot() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.dot"]], "dual() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.dual"]], "echelon_form() (sympy.matrices.matrices.matrixreductions method)": [[103, "sympy.matrices.matrices.MatrixReductions.echelon_form"]], "eigenvals() (sympy.matrices.matrices.matrixeigen method)": [[103, "sympy.matrices.matrices.MatrixEigen.eigenvals"]], "eigenvects() (sympy.matrices.matrices.matrixeigen method)": [[103, "sympy.matrices.matrices.MatrixEigen.eigenvects"]], "elementary_col_op() (sympy.matrices.matrices.matrixreductions method)": [[103, "sympy.matrices.matrices.MatrixReductions.elementary_col_op"]], "elementary_row_op() (sympy.matrices.matrices.matrixreductions method)": [[103, "sympy.matrices.matrices.MatrixReductions.elementary_row_op"]], "exp() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.exp"]], "eye() (in module sympy.matrices.dense)": [[103, "sympy.matrices.dense.eye"]], "gauss_jordan_solve() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.gauss_jordan_solve"]], "hat() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.hat"]], "hessian() (in module sympy.matrices.dense)": [[103, "sympy.matrices.dense.hessian"]], "integrate() (sympy.matrices.matrices.matrixcalculus method)": [[103, "sympy.matrices.matrices.MatrixCalculus.integrate"]], "inv() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.inv"]], "inv_mod() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.inv_mod"]], "inverse_adj() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.inverse_ADJ"]], "inverse_block() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.inverse_BLOCK"]], "inverse_ch() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.inverse_CH"]], "inverse_ge() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.inverse_GE"]], "inverse_ldl() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.inverse_LDL"]], "inverse_lu() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.inverse_LU"]], "inverse_qr() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.inverse_QR"]], "irregular() (sympy.matrices.matrices.matrixbase class method)": [[103, "sympy.matrices.matrices.MatrixBase.irregular"]], "is_diagonalizable() (sympy.matrices.matrices.matrixeigen method)": [[103, "sympy.matrices.matrices.MatrixEigen.is_diagonalizable"]], "is_echelon (sympy.matrices.matrices.matrixreductions property)": [[103, "sympy.matrices.matrices.MatrixReductions.is_echelon"]], "is_indefinite (sympy.matrices.matrices.matrixeigen property)": [[103, "sympy.matrices.matrices.MatrixEigen.is_indefinite"]], "is_negative_definite (sympy.matrices.matrices.matrixeigen property)": [[103, "sympy.matrices.matrices.MatrixEigen.is_negative_definite"]], "is_negative_semidefinite (sympy.matrices.matrices.matrixeigen property)": [[103, "sympy.matrices.matrices.MatrixEigen.is_negative_semidefinite"]], "is_nilpotent() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.is_nilpotent"]], "is_positive_definite (sympy.matrices.matrices.matrixeigen property)": [[103, "sympy.matrices.matrices.MatrixEigen.is_positive_definite"]], "is_positive_semidefinite (sympy.matrices.matrices.matrixeigen property)": [[103, "sympy.matrices.matrices.MatrixEigen.is_positive_semidefinite"]], "jacobian() (sympy.matrices.matrices.matrixcalculus method)": [[103, "sympy.matrices.matrices.MatrixCalculus.jacobian"]], "jordan_cell() (in module sympy.matrices.dense)": [[103, "sympy.matrices.dense.jordan_cell"]], "jordan_form() (sympy.matrices.matrices.matrixeigen method)": [[103, "sympy.matrices.matrices.MatrixEigen.jordan_form"]], "key2bounds() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.key2bounds"]], "key2ij() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.key2ij"]], "left_eigenvects() (sympy.matrices.matrices.matrixeigen method)": [[103, "sympy.matrices.matrices.MatrixEigen.left_eigenvects"]], "limit() (sympy.matrices.matrices.matrixcalculus method)": [[103, "sympy.matrices.matrices.MatrixCalculus.limit"]], "list2numpy() (in module sympy.matrices.dense)": [[103, "sympy.matrices.dense.list2numpy"]], "log() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.log"]], "lower_triangular_solve() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.lower_triangular_solve"]], "matrix2numpy() (in module sympy.matrices.dense)": [[103, "sympy.matrices.dense.matrix2numpy"]], "matrix_multiply_elementwise() (in module sympy.matrices.dense)": [[103, "sympy.matrices.dense.matrix_multiply_elementwise"]], "minor() (sympy.matrices.matrices.matrixdeterminant method)": [[103, "sympy.matrices.matrices.MatrixDeterminant.minor"]], "minor_submatrix() (sympy.matrices.matrices.matrixdeterminant method)": [[103, "sympy.matrices.matrices.MatrixDeterminant.minor_submatrix"]], "norm() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.norm"]], "normalized() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.normalized"]], "nullspace() (sympy.matrices.matrices.matrixsubspaces method)": [[103, "sympy.matrices.matrices.MatrixSubspaces.nullspace"]], "ones() (in module sympy.matrices.dense)": [[103, "sympy.matrices.dense.ones"]], "orthogonalize() (sympy.matrices.matrices.matrixsubspaces class method)": [[103, "sympy.matrices.matrices.MatrixSubspaces.orthogonalize"]], "per() (sympy.matrices.matrices.matrixdeterminant method)": [[103, "sympy.matrices.matrices.MatrixDeterminant.per"]], "pinv() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.pinv"]], "pinv_solve() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.pinv_solve"]], "print_nonzero() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.print_nonzero"]], "project() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.project"]], "randmatrix() (in module sympy.matrices.dense)": [[103, "sympy.matrices.dense.randMatrix"]], "rank() (sympy.matrices.matrices.matrixreductions method)": [[103, "sympy.matrices.matrices.MatrixReductions.rank"]], "rank_decomposition() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.rank_decomposition"]], "rot_axis1() (in module sympy.matrices.dense)": [[103, "sympy.matrices.dense.rot_axis1"]], "rot_axis2() (in module sympy.matrices.dense)": [[103, "sympy.matrices.dense.rot_axis2"]], "rot_axis3() (in module sympy.matrices.dense)": [[103, "sympy.matrices.dense.rot_axis3"]], "rot_ccw_axis1() (in module sympy.matrices.dense)": [[103, "sympy.matrices.dense.rot_ccw_axis1"]], "rot_ccw_axis2() (in module sympy.matrices.dense)": [[103, "sympy.matrices.dense.rot_ccw_axis2"]], "rot_ccw_axis3() (in module sympy.matrices.dense)": [[103, "sympy.matrices.dense.rot_ccw_axis3"]], "rot_givens() (in module sympy.matrices.dense)": [[103, "sympy.matrices.dense.rot_givens"]], "rowspace() (sympy.matrices.matrices.matrixsubspaces method)": [[103, "sympy.matrices.matrices.MatrixSubspaces.rowspace"]], "rref() (sympy.matrices.matrices.matrixreductions method)": [[103, "sympy.matrices.matrices.MatrixReductions.rref"]], "singular_value_decomposition() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.singular_value_decomposition"]], "singular_values() (sympy.matrices.matrices.matrixeigen method)": [[103, "sympy.matrices.matrices.MatrixEigen.singular_values"]], "solve() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.solve"]], "solve_least_squares() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.solve_least_squares"]], "strongly_connected_components() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.strongly_connected_components"]], "strongly_connected_components_decomposition() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.strongly_connected_components_decomposition"]], "symarray() (in module sympy.matrices.dense)": [[103, "sympy.matrices.dense.symarray"]], "sympy.matrices.matrices": [[103, "module-sympy.matrices.matrices"]], "table() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.table"]], "upper_hessenberg_decomposition() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.upper_hessenberg_decomposition"]], "upper_triangular_solve() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.upper_triangular_solve"]], "vee() (sympy.matrices.matrices.matrixbase method)": [[103, "sympy.matrices.matrices.MatrixBase.vee"]], "wronskian() (in module sympy.matrices.dense)": [[103, "sympy.matrices.dense.wronskian"]], "zeros() (in module sympy.matrices.dense)": [[103, "sympy.matrices.dense.zeros"]], "hermite_normal_form() (in module sympy.matrices.normalforms)": [[104, "sympy.matrices.normalforms.hermite_normal_form"]], "smith_normal_form() (in module sympy.matrices.normalforms)": [[104, "sympy.matrices.normalforms.smith_normal_form"]], "immutablesparsematrix (class in sympy.matrices.immutable)": [[105, "sympy.matrices.immutable.ImmutableSparseMatrix"]], "mutablesparsematrix (class in sympy.matrices.sparse)": [[105, "sympy.matrices.sparse.MutableSparseMatrix"]], "sparsematrix (in module sympy.matrices.sparse)": [[105, "sympy.matrices.sparse.SparseMatrix"]], "sympy.matrices.sparse": [[105, "module-sympy.matrices.sparse"]], "_csrtodok() (in module sympy.matrices.sparsetools)": [[106, "sympy.matrices.sparsetools._csrtodok"]], "_doktocsr() (in module sympy.matrices.sparsetools)": [[106, "sympy.matrices.sparsetools._doktocsr"]], "banded() (in module sympy.matrices.sparsetools)": [[106, "sympy.matrices.sparsetools.banded"]], "sympy.matrices.sparsetools": [[106, "module-sympy.matrices.sparsetools"]], "sieve (class in sympy.ntheory.generate)": [[107, "sympy.ntheory.generate.Sieve"]], "abundance() (in module sympy.ntheory.factor_)": [[107, "sympy.ntheory.factor_.abundance"]], "antidivisor_count() (in module sympy.ntheory.factor_)": [[107, "sympy.ntheory.factor_.antidivisor_count"]], "antidivisors() (in module sympy.ntheory.factor_)": [[107, "sympy.ntheory.factor_.antidivisors"]], "binomial_coefficients() (in module sympy.ntheory.multinomial)": [[107, "sympy.ntheory.multinomial.binomial_coefficients"]], "binomial_coefficients_list() (in module sympy.ntheory.multinomial)": [[107, "sympy.ntheory.multinomial.binomial_coefficients_list"]], "binomial_mod() (in module sympy.ntheory.residue_ntheory)": [[107, "sympy.ntheory.residue_ntheory.binomial_mod"]], "composite() (in module sympy.ntheory.generate)": [[107, "sympy.ntheory.generate.composite"]], "compositepi() (in module sympy.ntheory.generate)": [[107, "sympy.ntheory.generate.compositepi"]], "continued_fraction() (in module sympy.ntheory.continued_fraction)": [[107, "sympy.ntheory.continued_fraction.continued_fraction"]], "continued_fraction_convergents() (in module sympy.ntheory.continued_fraction)": [[107, "sympy.ntheory.continued_fraction.continued_fraction_convergents"]], "continued_fraction_iterator() (in module sympy.ntheory.continued_fraction)": [[107, "sympy.ntheory.continued_fraction.continued_fraction_iterator"]], "continued_fraction_periodic() (in module sympy.ntheory.continued_fraction)": [[107, "sympy.ntheory.continued_fraction.continued_fraction_periodic"]], "continued_fraction_reduce() (in module sympy.ntheory.continued_fraction)": [[107, "sympy.ntheory.continued_fraction.continued_fraction_reduce"]], "core() (in module sympy.ntheory.factor_)": [[107, "sympy.ntheory.factor_.core"]], "count_digits() (in module sympy.ntheory.digits)": [[107, "sympy.ntheory.digits.count_digits"]], "crt() (in module sympy.ntheory.modular)": [[107, "sympy.ntheory.modular.crt"]], "crt1() (in module sympy.ntheory.modular)": [[107, "sympy.ntheory.modular.crt1"]], "crt2() (in module sympy.ntheory.modular)": [[107, "sympy.ntheory.modular.crt2"]], "cycle_length() (in module sympy.ntheory.generate)": [[107, "sympy.ntheory.generate.cycle_length"]], "digits() (in module sympy.ntheory.digits)": [[107, "sympy.ntheory.digits.digits"]], "digits() (in module sympy.ntheory.factor_)": [[107, "sympy.ntheory.factor_.digits"]], "discrete_log() (in module sympy.ntheory.residue_ntheory)": [[107, "sympy.ntheory.residue_ntheory.discrete_log"]], "divisor_count() (in module sympy.ntheory.factor_)": [[107, "sympy.ntheory.factor_.divisor_count"]], "divisor_sigma (class in sympy.ntheory.factor_)": [[107, "sympy.ntheory.factor_.divisor_sigma"]], "divisors() (in module sympy.ntheory.factor_)": [[107, "sympy.ntheory.factor_.divisors"]], "ecm() (in module sympy.ntheory.ecm)": [[107, "sympy.ntheory.ecm.ecm"]], "egyptian_fraction() (in module sympy.ntheory.egyptian_fraction)": [[107, "sympy.ntheory.egyptian_fraction.egyptian_fraction"]], "extend() (sympy.ntheory.generate.sieve method)": [[107, "sympy.ntheory.generate.Sieve.extend"]], "extend_to_no() (sympy.ntheory.generate.sieve method)": [[107, "sympy.ntheory.generate.Sieve.extend_to_no"]], "factorint() (in module sympy.ntheory.factor_)": [[107, "sympy.ntheory.factor_.factorint"]], "factorrat() (in module sympy.ntheory.factor_)": [[107, "sympy.ntheory.factor_.factorrat"]], "is_abundant() (in module sympy.ntheory.factor_)": [[107, "sympy.ntheory.factor_.is_abundant"]], "is_amicable() (in module sympy.ntheory.factor_)": [[107, "sympy.ntheory.factor_.is_amicable"]], "is_deficient() (in module sympy.ntheory.factor_)": [[107, "sympy.ntheory.factor_.is_deficient"]], "is_euler_pseudoprime() (in module sympy.ntheory.primetest)": [[107, "sympy.ntheory.primetest.is_euler_pseudoprime"]], "is_extra_strong_lucas_prp() (in module sympy.ntheory.primetest)": [[107, "sympy.ntheory.primetest.is_extra_strong_lucas_prp"]], "is_gaussian_prime() (in module sympy.ntheory.primetest)": [[107, "sympy.ntheory.primetest.is_gaussian_prime"]], "is_lucas_prp() (in module sympy.ntheory.primetest)": [[107, "sympy.ntheory.primetest.is_lucas_prp"]], "is_mersenne_prime() (in module sympy.ntheory.factor_)": [[107, "sympy.ntheory.factor_.is_mersenne_prime"]], "is_nthpow_residue() (in module sympy.ntheory.residue_ntheory)": [[107, "sympy.ntheory.residue_ntheory.is_nthpow_residue"]], "is_palindromic() (in module sympy.ntheory.digits)": [[107, "sympy.ntheory.digits.is_palindromic"]], "is_perfect() (in module sympy.ntheory.factor_)": [[107, "sympy.ntheory.factor_.is_perfect"]], "is_primitive_root() (in module sympy.ntheory.residue_ntheory)": [[107, "sympy.ntheory.residue_ntheory.is_primitive_root"]], "is_quad_residue() (in module sympy.ntheory.residue_ntheory)": [[107, "sympy.ntheory.residue_ntheory.is_quad_residue"]], "is_square() (in module sympy.ntheory.primetest)": [[107, "sympy.ntheory.primetest.is_square"]], "is_strong_lucas_prp() (in module sympy.ntheory.primetest)": [[107, "sympy.ntheory.primetest.is_strong_lucas_prp"]], "isprime() (in module sympy.ntheory.primetest)": [[107, "sympy.ntheory.primetest.isprime"]], "jacobi_symbol() (in module sympy.ntheory.residue_ntheory)": [[107, "sympy.ntheory.residue_ntheory.jacobi_symbol"]], "legendre_symbol() (in module sympy.ntheory.residue_ntheory)": [[107, "sympy.ntheory.residue_ntheory.legendre_symbol"]], "mersenne_prime_exponent() (in module sympy.ntheory.factor_)": [[107, "sympy.ntheory.factor_.mersenne_prime_exponent"]], "mobius (class in sympy.ntheory)": [[107, "sympy.ntheory.mobius"]], "mobiusrange() (sympy.ntheory.generate.sieve method)": [[107, "sympy.ntheory.generate.Sieve.mobiusrange"]], "mr() (in module sympy.ntheory.primetest)": [[107, "sympy.ntheory.primetest.mr"]], "multinomial_coefficients() (in module sympy.ntheory.multinomial)": [[107, "sympy.ntheory.multinomial.multinomial_coefficients"]], "multinomial_coefficients_iterator() (in module sympy.ntheory.multinomial)": [[107, "sympy.ntheory.multinomial.multinomial_coefficients_iterator"]], "multiplicity() (in module sympy.ntheory.factor_)": [[107, "sympy.ntheory.factor_.multiplicity"]], "n_order() (in module sympy.ntheory.residue_ntheory)": [[107, "sympy.ntheory.residue_ntheory.n_order"]], "nextprime() (in module sympy.ntheory.generate)": [[107, "sympy.ntheory.generate.nextprime"]], "npartitions() (in module sympy.ntheory.partitions_)": [[107, "sympy.ntheory.partitions_.npartitions"]], "nthroot_mod() (in module sympy.ntheory.residue_ntheory)": [[107, "sympy.ntheory.residue_ntheory.nthroot_mod"]], "perfect_power() (in module sympy.ntheory.factor_)": [[107, "sympy.ntheory.factor_.perfect_power"]], "pi_hex_digits() (in module sympy.ntheory.bbp_pi)": [[107, "sympy.ntheory.bbp_pi.pi_hex_digits"]], "pollard_pm1() (in module sympy.ntheory.factor_)": [[107, "sympy.ntheory.factor_.pollard_pm1"]], "pollard_rho() (in module sympy.ntheory.factor_)": [[107, "sympy.ntheory.factor_.pollard_rho"]], "polynomial_congruence() (in module sympy.ntheory.residue_ntheory)": [[107, "sympy.ntheory.residue_ntheory.polynomial_congruence"]], "prevprime() (in module sympy.ntheory.generate)": [[107, "sympy.ntheory.generate.prevprime"]], "prime() (in module sympy.ntheory.generate)": [[107, "sympy.ntheory.generate.prime"]], "primefactors() (in module sympy.ntheory.factor_)": [[107, "sympy.ntheory.factor_.primefactors"]], "primenu (class in sympy.ntheory.factor_)": [[107, "sympy.ntheory.factor_.primenu"]], "primeomega (class in sympy.ntheory.factor_)": [[107, "sympy.ntheory.factor_.primeomega"]], "primepi() (in module sympy.ntheory.generate)": [[107, "sympy.ntheory.generate.primepi"]], "primerange() (in module sympy.ntheory.generate)": [[107, "sympy.ntheory.generate.primerange"]], "primerange() (sympy.ntheory.generate.sieve method)": [[107, "sympy.ntheory.generate.Sieve.primerange"]], "primitive_root() (in module sympy.ntheory.residue_ntheory)": [[107, "sympy.ntheory.residue_ntheory.primitive_root"]], "primorial() (in module sympy.ntheory.generate)": [[107, "sympy.ntheory.generate.primorial"]], "proper_divisor_count() (in module sympy.ntheory.factor_)": [[107, "sympy.ntheory.factor_.proper_divisor_count"]], "proper_divisors() (in module sympy.ntheory.factor_)": [[107, "sympy.ntheory.factor_.proper_divisors"]], "qs() (in module sympy.ntheory.qs)": [[107, "sympy.ntheory.qs.qs"]], "quadratic_congruence() (in module sympy.ntheory.residue_ntheory)": [[107, "sympy.ntheory.residue_ntheory.quadratic_congruence"]], "quadratic_residues() (in module sympy.ntheory.residue_ntheory)": [[107, "sympy.ntheory.residue_ntheory.quadratic_residues"]], "randprime() (in module sympy.ntheory.generate)": [[107, "sympy.ntheory.generate.randprime"]], "reduced_totient (class in sympy.ntheory.factor_)": [[107, "sympy.ntheory.factor_.reduced_totient"]], "search() (sympy.ntheory.generate.sieve method)": [[107, "sympy.ntheory.generate.Sieve.search"]], "smoothness() (in module sympy.ntheory.factor_)": [[107, "sympy.ntheory.factor_.smoothness"]], "smoothness_p() (in module sympy.ntheory.factor_)": [[107, "sympy.ntheory.factor_.smoothness_p"]], "solve_congruence() (in module sympy.ntheory.modular)": [[107, "sympy.ntheory.modular.solve_congruence"]], "sqrt_mod() (in module sympy.ntheory.residue_ntheory)": [[107, "sympy.ntheory.residue_ntheory.sqrt_mod"]], "sqrt_mod_iter() (in module sympy.ntheory.residue_ntheory)": [[107, "sympy.ntheory.residue_ntheory.sqrt_mod_iter"]], "symmetric_residue() (in module sympy.ntheory.modular)": [[107, "sympy.ntheory.modular.symmetric_residue"]], "sympy.ntheory.bbp_pi": [[107, "module-sympy.ntheory.bbp_pi"]], "sympy.ntheory.continued_fraction": [[107, "module-sympy.ntheory.continued_fraction"]], "sympy.ntheory.digits": [[107, "module-sympy.ntheory.digits"]], "sympy.ntheory.ecm": [[107, "module-sympy.ntheory.ecm"]], "sympy.ntheory.egyptian_fraction": [[107, "module-sympy.ntheory.egyptian_fraction"]], "sympy.ntheory.factor_": [[107, "module-sympy.ntheory.factor_"]], "sympy.ntheory.generate": [[107, "module-sympy.ntheory.generate"]], "sympy.ntheory.modular": [[107, "module-sympy.ntheory.modular"]], "sympy.ntheory.multinomial": [[107, "module-sympy.ntheory.multinomial"]], "sympy.ntheory.partitions_": [[107, "module-sympy.ntheory.partitions_"]], "sympy.ntheory.primetest": [[107, "module-sympy.ntheory.primetest"]], "sympy.ntheory.qs": [[107, "module-sympy.ntheory.qs"]], "sympy.ntheory.residue_ntheory": [[107, "module-sympy.ntheory.residue_ntheory"]], "totient (class in sympy.ntheory.factor_)": [[107, "sympy.ntheory.factor_.totient"]], "totientrange() (sympy.ntheory.generate.sieve method)": [[107, "sympy.ntheory.generate.Sieve.totientrange"]], "trailing() (in module sympy.ntheory.factor_)": [[107, "sympy.ntheory.factor_.trailing"]], "udivisor_count() (in module sympy.ntheory.factor_)": [[107, "sympy.ntheory.factor_.udivisor_count"]], "udivisor_sigma (class in sympy.ntheory.factor_)": [[107, "sympy.ntheory.factor_.udivisor_sigma"]], "udivisors() (in module sympy.ntheory.factor_)": [[107, "sympy.ntheory.factor_.udivisors"]], "latexparsingerror (class in sympy.parsing.latex)": [[109, "sympy.parsing.latex.LaTeXParsingError"]], "sympyexpression (class in sympy.parsing.sym_expr)": [[109, "sympy.parsing.sym_expr.SymPyExpression"]], "auto_number() (in module sympy.parsing.sympy_parser)": [[109, "sympy.parsing.sympy_parser.auto_number"]], "auto_symbol() (in module sympy.parsing.sympy_parser)": [[109, "sympy.parsing.sympy_parser.auto_symbol"]], "convert_to_c() (sympy.parsing.sym_expr.sympyexpression method)": [[109, "sympy.parsing.sym_expr.SymPyExpression.convert_to_c"]], "convert_to_expr() (sympy.parsing.sym_expr.sympyexpression method)": [[109, "sympy.parsing.sym_expr.SymPyExpression.convert_to_expr"]], "convert_to_fortran() (sympy.parsing.sym_expr.sympyexpression method)": [[109, "sympy.parsing.sym_expr.SymPyExpression.convert_to_fortran"]], "convert_to_python() (sympy.parsing.sym_expr.sympyexpression method)": [[109, "sympy.parsing.sym_expr.SymPyExpression.convert_to_python"]], "convert_xor() (in module sympy.parsing.sympy_parser)": [[109, "sympy.parsing.sympy_parser.convert_xor"]], "eval_expr() (in module sympy.parsing.sympy_parser)": [[109, "sympy.parsing.sympy_parser.eval_expr"]], "factorial_notation() (in module sympy.parsing.sympy_parser)": [[109, "sympy.parsing.sympy_parser.factorial_notation"]], "function_exponentiation() (in module sympy.parsing.sympy_parser)": [[109, "sympy.parsing.sympy_parser.function_exponentiation"]], "implicit_application() (in module sympy.parsing.sympy_parser)": [[109, "sympy.parsing.sympy_parser.implicit_application"]], "implicit_multiplication() (in module sympy.parsing.sympy_parser)": [[109, "sympy.parsing.sympy_parser.implicit_multiplication"]], "implicit_multiplication_application() (in module sympy.parsing.sympy_parser)": [[109, "sympy.parsing.sympy_parser.implicit_multiplication_application"]], "lambda_notation() (in module sympy.parsing.sympy_parser)": [[109, "sympy.parsing.sympy_parser.lambda_notation"]], "parse_expr() (in module sympy.parsing.sympy_parser)": [[109, "sympy.parsing.sympy_parser.parse_expr"]], "parse_latex() (in module sympy.parsing.latex)": [[109, "sympy.parsing.latex.parse_latex"]], "parse_mathematica() (in module sympy.parsing.mathematica)": [[109, "sympy.parsing.mathematica.parse_mathematica"]], "parse_maxima() (in module sympy.parsing.maxima)": [[109, "sympy.parsing.maxima.parse_maxima"]], "rationalize() (in module sympy.parsing.sympy_parser)": [[109, "sympy.parsing.sympy_parser.rationalize"]], "repeated_decimals() (in module sympy.parsing.sympy_parser)": [[109, "sympy.parsing.sympy_parser.repeated_decimals"]], "return_expr() (sympy.parsing.sym_expr.sympyexpression method)": [[109, "sympy.parsing.sym_expr.SymPyExpression.return_expr"]], "split_symbols() (in module sympy.parsing.sympy_parser)": [[109, "sympy.parsing.sympy_parser.split_symbols"]], "split_symbols_custom() (in module sympy.parsing.sympy_parser)": [[109, "sympy.parsing.sympy_parser.split_symbols_custom"]], "standard_transformations (in module sympy.parsing.sympy_parser)": [[109, "sympy.parsing.sympy_parser.standard_transformations"]], "stringify_expr() (in module sympy.parsing.sympy_parser)": [[109, "sympy.parsing.sympy_parser.stringify_expr"]], "sympy.parsing": [[109, "module-sympy.parsing"]], "sympy.parsing.sym_expr": [[109, "module-sympy.parsing.sym_expr"]], "beam (class in sympy.physics.continuum_mechanics.beam)": [[110, "sympy.physics.continuum_mechanics.beam.Beam"]], "beam3d (class in sympy.physics.continuum_mechanics.beam)": [[110, "sympy.physics.continuum_mechanics.beam.Beam3D"]], "angular_deflection() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam3D.angular_deflection"]], "applied_loads (sympy.physics.continuum_mechanics.beam.beam property)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.applied_loads"]], "apply_load() (sympy.physics.continuum_mechanics.beam.beam method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.apply_load"]], "apply_load() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam3D.apply_load"]], "apply_moment_load() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam3D.apply_moment_load"]], "apply_support() (sympy.physics.continuum_mechanics.beam.beam method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.apply_support"]], "area (sympy.physics.continuum_mechanics.beam.beam property)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.area"]], "area (sympy.physics.continuum_mechanics.beam.beam3d property)": [[110, "sympy.physics.continuum_mechanics.beam.Beam3D.area"]], "axial_force() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam3D.axial_force"]], "axial_stress() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam3D.axial_stress"]], "bending_moment() (sympy.physics.continuum_mechanics.beam.beam method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.bending_moment"]], "bending_moment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam3D.bending_moment"]], "boundary_conditions (sympy.physics.continuum_mechanics.beam.beam property)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.boundary_conditions"]], "boundary_conditions (sympy.physics.continuum_mechanics.beam.beam3d property)": [[110, "sympy.physics.continuum_mechanics.beam.Beam3D.boundary_conditions"]], "cross_section (sympy.physics.continuum_mechanics.beam.beam property)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.cross_section"]], "deflection() (sympy.physics.continuum_mechanics.beam.beam method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.deflection"]], "deflection() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam3D.deflection"]], "draw() (sympy.physics.continuum_mechanics.beam.beam method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.draw"]], "elastic_modulus (sympy.physics.continuum_mechanics.beam.beam property)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.elastic_modulus"]], "ild_moment (sympy.physics.continuum_mechanics.beam.beam property)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.ild_moment"]], "ild_reactions (sympy.physics.continuum_mechanics.beam.beam property)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.ild_reactions"]], "ild_shear (sympy.physics.continuum_mechanics.beam.beam property)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.ild_shear"]], "join() (sympy.physics.continuum_mechanics.beam.beam method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.join"]], "length (sympy.physics.continuum_mechanics.beam.beam property)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.length"]], "load (sympy.physics.continuum_mechanics.beam.beam property)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.load"]], "load_vector (sympy.physics.continuum_mechanics.beam.beam3d property)": [[110, "sympy.physics.continuum_mechanics.beam.Beam3D.load_vector"]], "max_bending_moment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam3D.max_bending_moment"]], "max_bmoment() (sympy.physics.continuum_mechanics.beam.beam method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.max_bmoment"]], "max_bmoment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam3D.max_bmoment"]], "max_deflection() (sympy.physics.continuum_mechanics.beam.beam method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.max_deflection"]], "max_deflection() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam3D.max_deflection"]], "max_shear_force() (sympy.physics.continuum_mechanics.beam.beam method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.max_shear_force"]], "max_shear_force() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam3D.max_shear_force"]], "moment_load_vector (sympy.physics.continuum_mechanics.beam.beam3d property)": [[110, "sympy.physics.continuum_mechanics.beam.Beam3D.moment_load_vector"]], "plot_bending_moment() (sympy.physics.continuum_mechanics.beam.beam method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.plot_bending_moment"]], "plot_bending_moment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_bending_moment"]], "plot_deflection() (sympy.physics.continuum_mechanics.beam.beam method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.plot_deflection"]], "plot_deflection() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_deflection"]], "plot_ild_moment() (sympy.physics.continuum_mechanics.beam.beam method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.plot_ild_moment"]], "plot_ild_reactions() (sympy.physics.continuum_mechanics.beam.beam method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.plot_ild_reactions"]], "plot_ild_shear() (sympy.physics.continuum_mechanics.beam.beam method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.plot_ild_shear"]], "plot_loading_results() (sympy.physics.continuum_mechanics.beam.beam method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.plot_loading_results"]], "plot_loading_results() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_loading_results"]], "plot_shear_force() (sympy.physics.continuum_mechanics.beam.beam method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.plot_shear_force"]], "plot_shear_force() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_shear_force"]], "plot_shear_stress() (sympy.physics.continuum_mechanics.beam.beam method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.plot_shear_stress"]], "plot_shear_stress() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_shear_stress"]], "plot_slope() (sympy.physics.continuum_mechanics.beam.beam method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.plot_slope"]], "plot_slope() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_slope"]], "point_cflexure() (sympy.physics.continuum_mechanics.beam.beam method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.point_cflexure"]], "polar_moment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam3D.polar_moment"]], "reaction_loads (sympy.physics.continuum_mechanics.beam.beam property)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.reaction_loads"]], "remove_load() (sympy.physics.continuum_mechanics.beam.beam method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.remove_load"]], "second_moment (sympy.physics.continuum_mechanics.beam.beam property)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.second_moment"]], "second_moment (sympy.physics.continuum_mechanics.beam.beam3d property)": [[110, "sympy.physics.continuum_mechanics.beam.Beam3D.second_moment"]], "shear_force() (sympy.physics.continuum_mechanics.beam.beam method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.shear_force"]], "shear_force() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam3D.shear_force"]], "shear_modulus (sympy.physics.continuum_mechanics.beam.beam3d property)": [[110, "sympy.physics.continuum_mechanics.beam.Beam3D.shear_modulus"]], "shear_stress() (sympy.physics.continuum_mechanics.beam.beam method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.shear_stress"]], "shear_stress() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam3D.shear_stress"]], "slope() (sympy.physics.continuum_mechanics.beam.beam method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.slope"]], "slope() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam3D.slope"]], "solve_for_ild_moment() (sympy.physics.continuum_mechanics.beam.beam method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.solve_for_ild_moment"]], "solve_for_ild_reactions() (sympy.physics.continuum_mechanics.beam.beam method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.solve_for_ild_reactions"]], "solve_for_ild_shear() (sympy.physics.continuum_mechanics.beam.beam method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.solve_for_ild_shear"]], "solve_for_reaction_loads() (sympy.physics.continuum_mechanics.beam.beam method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.solve_for_reaction_loads"]], "solve_for_reaction_loads() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam3D.solve_for_reaction_loads"]], "solve_for_torsion() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam3D.solve_for_torsion"]], "sympy.physics.continuum_mechanics.beam": [[110, "module-sympy.physics.continuum_mechanics.beam"]], "torsional_moment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[110, "sympy.physics.continuum_mechanics.beam.Beam3D.torsional_moment"]], "variable (sympy.physics.continuum_mechanics.beam.beam property)": [[110, "sympy.physics.continuum_mechanics.beam.Beam.variable"]], "truss (class in sympy.physics.continuum_mechanics.truss)": [[113, "sympy.physics.continuum_mechanics.truss.Truss"]], "add_member() (sympy.physics.continuum_mechanics.truss.truss method)": [[113, "sympy.physics.continuum_mechanics.truss.Truss.add_member"]], "add_node() (sympy.physics.continuum_mechanics.truss.truss method)": [[113, "sympy.physics.continuum_mechanics.truss.Truss.add_node"]], "apply_load() (sympy.physics.continuum_mechanics.truss.truss method)": [[113, "sympy.physics.continuum_mechanics.truss.Truss.apply_load"]], "apply_support() (sympy.physics.continuum_mechanics.truss.truss method)": [[113, "sympy.physics.continuum_mechanics.truss.Truss.apply_support"]], "change_member_label() (sympy.physics.continuum_mechanics.truss.truss method)": [[113, "sympy.physics.continuum_mechanics.truss.Truss.change_member_label"]], "change_node_label() (sympy.physics.continuum_mechanics.truss.truss method)": [[113, "sympy.physics.continuum_mechanics.truss.Truss.change_node_label"]], "draw() (sympy.physics.continuum_mechanics.truss.truss method)": [[113, "sympy.physics.continuum_mechanics.truss.Truss.draw"]], "internal_forces (sympy.physics.continuum_mechanics.truss.truss property)": [[113, "sympy.physics.continuum_mechanics.truss.Truss.internal_forces"]], "loads (sympy.physics.continuum_mechanics.truss.truss property)": [[113, "sympy.physics.continuum_mechanics.truss.Truss.loads"]], "member_lengths (sympy.physics.continuum_mechanics.truss.truss property)": [[113, "sympy.physics.continuum_mechanics.truss.Truss.member_lengths"]], "members (sympy.physics.continuum_mechanics.truss.truss property)": [[113, "sympy.physics.continuum_mechanics.truss.Truss.members"]], "node_labels (sympy.physics.continuum_mechanics.truss.truss property)": [[113, "sympy.physics.continuum_mechanics.truss.Truss.node_labels"]], "node_positions (sympy.physics.continuum_mechanics.truss.truss property)": [[113, "sympy.physics.continuum_mechanics.truss.Truss.node_positions"]], "nodes (sympy.physics.continuum_mechanics.truss.truss property)": [[113, "sympy.physics.continuum_mechanics.truss.Truss.nodes"]], "reaction_loads (sympy.physics.continuum_mechanics.truss.truss property)": [[113, "sympy.physics.continuum_mechanics.truss.Truss.reaction_loads"]], "remove_load() (sympy.physics.continuum_mechanics.truss.truss method)": [[113, "sympy.physics.continuum_mechanics.truss.Truss.remove_load"]], "remove_member() (sympy.physics.continuum_mechanics.truss.truss method)": [[113, "sympy.physics.continuum_mechanics.truss.Truss.remove_member"]], "remove_node() (sympy.physics.continuum_mechanics.truss.truss method)": [[113, "sympy.physics.continuum_mechanics.truss.Truss.remove_node"]], "remove_support() (sympy.physics.continuum_mechanics.truss.truss method)": [[113, "sympy.physics.continuum_mechanics.truss.Truss.remove_support"]], "solve() (sympy.physics.continuum_mechanics.truss.truss method)": [[113, "sympy.physics.continuum_mechanics.truss.Truss.solve"]], "supports (sympy.physics.continuum_mechanics.truss.truss property)": [[113, "sympy.physics.continuum_mechanics.truss.Truss.supports"]], "sympy.physics.continuum_mechanics.truss": [[113, "module-sympy.physics.continuum_mechanics.truss"]], "bode_magnitude_numerical_data() (sympy.physics.control.control_plots method)": [[115, "sympy.physics.control.control_plots.bode_magnitude_numerical_data"]], "bode_magnitude_plot() (sympy.physics.control.control_plots method)": [[115, "sympy.physics.control.control_plots.bode_magnitude_plot"]], "bode_phase_numerical_data() (sympy.physics.control.control_plots method)": [[115, "sympy.physics.control.control_plots.bode_phase_numerical_data"]], "bode_phase_plot() (sympy.physics.control.control_plots method)": [[115, "sympy.physics.control.control_plots.bode_phase_plot"]], "bode_plot() (sympy.physics.control.control_plots method)": [[115, "sympy.physics.control.control_plots.bode_plot"]], "impulse_response_numerical_data() (sympy.physics.control.control_plots method)": [[115, "sympy.physics.control.control_plots.impulse_response_numerical_data"]], "impulse_response_plot() (sympy.physics.control.control_plots method)": [[115, "sympy.physics.control.control_plots.impulse_response_plot"]], "pole_zero_numerical_data() (sympy.physics.control.control_plots method)": [[115, "sympy.physics.control.control_plots.pole_zero_numerical_data"]], "pole_zero_plot() (sympy.physics.control.control_plots method)": [[115, "sympy.physics.control.control_plots.pole_zero_plot"]], "ramp_response_numerical_data() (sympy.physics.control.control_plots method)": [[115, "sympy.physics.control.control_plots.ramp_response_numerical_data"]], "ramp_response_plot() (sympy.physics.control.control_plots method)": [[115, "sympy.physics.control.control_plots.ramp_response_plot"]], "step_response_numerical_data() (sympy.physics.control.control_plots method)": [[115, "sympy.physics.control.control_plots.step_response_numerical_data"]], "step_response_plot() (sympy.physics.control.control_plots method)": [[115, "sympy.physics.control.control_plots.step_response_plot"]], "sympy.physics.control": [[116, "module-sympy.physics.control"]], "feedback (class in sympy.physics.control.lti)": [[117, "sympy.physics.control.lti.Feedback"]], "mimofeedback (class in sympy.physics.control.lti)": [[117, "sympy.physics.control.lti.MIMOFeedback"]], "mimoparallel (class in sympy.physics.control.lti)": [[117, "sympy.physics.control.lti.MIMOParallel"]], "mimoseries (class in sympy.physics.control.lti)": [[117, "sympy.physics.control.lti.MIMOSeries"]], "parallel (class in sympy.physics.control.lti)": [[117, "sympy.physics.control.lti.Parallel"]], "series (class in sympy.physics.control.lti)": [[117, "sympy.physics.control.lti.Series"]], "transferfunction (class in sympy.physics.control.lti)": [[117, "sympy.physics.control.lti.TransferFunction"]], "transferfunctionmatrix (class in sympy.physics.control.lti)": [[117, "sympy.physics.control.lti.TransferFunctionMatrix"]], "backward_diff() (in module sympy.physics.control.lti)": [[117, "sympy.physics.control.lti.backward_diff"]], "bilinear() (in module sympy.physics.control.lti)": [[117, "sympy.physics.control.lti.bilinear"]], "dc_gain() (sympy.physics.control.lti.transferfunction method)": [[117, "sympy.physics.control.lti.TransferFunction.dc_gain"]], "den (sympy.physics.control.lti.transferfunction property)": [[117, "sympy.physics.control.lti.TransferFunction.den"]], "doit() (sympy.physics.control.lti.feedback method)": [[117, "sympy.physics.control.lti.Feedback.doit"]], "doit() (sympy.physics.control.lti.mimofeedback method)": [[117, "sympy.physics.control.lti.MIMOFeedback.doit"]], "doit() (sympy.physics.control.lti.mimoparallel method)": [[117, "sympy.physics.control.lti.MIMOParallel.doit"]], "doit() (sympy.physics.control.lti.mimoseries method)": [[117, "sympy.physics.control.lti.MIMOSeries.doit"]], "doit() (sympy.physics.control.lti.parallel method)": [[117, "sympy.physics.control.lti.Parallel.doit"]], "doit() (sympy.physics.control.lti.series method)": [[117, "sympy.physics.control.lti.Series.doit"]], "elem_poles() (sympy.physics.control.lti.transferfunctionmatrix method)": [[117, "sympy.physics.control.lti.TransferFunctionMatrix.elem_poles"]], "elem_zeros() (sympy.physics.control.lti.transferfunctionmatrix method)": [[117, "sympy.physics.control.lti.TransferFunctionMatrix.elem_zeros"]], "expand() (sympy.physics.control.lti.transferfunction method)": [[117, "sympy.physics.control.lti.TransferFunction.expand"]], "expand() (sympy.physics.control.lti.transferfunctionmatrix method)": [[117, "sympy.physics.control.lti.TransferFunctionMatrix.expand"]], "forward_diff() (in module sympy.physics.control.lti)": [[117, "sympy.physics.control.lti.forward_diff"]], "from_matrix() (sympy.physics.control.lti.transferfunctionmatrix class method)": [[117, "sympy.physics.control.lti.TransferFunctionMatrix.from_Matrix"]], "from_coeff_lists() (sympy.physics.control.lti.transferfunction class method)": [[117, "sympy.physics.control.lti.TransferFunction.from_coeff_lists"]], "from_rational_expression() (sympy.physics.control.lti.transferfunction class method)": [[117, "sympy.physics.control.lti.TransferFunction.from_rational_expression"]], "from_zpk() (sympy.physics.control.lti.transferfunction class method)": [[117, "sympy.physics.control.lti.TransferFunction.from_zpk"]], "gbt() (in module sympy.physics.control.lti)": [[117, "sympy.physics.control.lti.gbt"]], "is_biproper (sympy.physics.control.lti.parallel property)": [[117, "sympy.physics.control.lti.Parallel.is_biproper"]], "is_biproper (sympy.physics.control.lti.series property)": [[117, "sympy.physics.control.lti.Series.is_biproper"]], "is_biproper (sympy.physics.control.lti.transferfunction property)": [[117, "sympy.physics.control.lti.TransferFunction.is_biproper"]], "is_proper (sympy.physics.control.lti.parallel property)": [[117, "sympy.physics.control.lti.Parallel.is_proper"]], "is_proper (sympy.physics.control.lti.series property)": [[117, "sympy.physics.control.lti.Series.is_proper"]], "is_proper (sympy.physics.control.lti.transferfunction property)": [[117, "sympy.physics.control.lti.TransferFunction.is_proper"]], "is_stable() (sympy.physics.control.lti.transferfunction method)": [[117, "sympy.physics.control.lti.TransferFunction.is_stable"]], "is_strictly_proper (sympy.physics.control.lti.parallel property)": [[117, "sympy.physics.control.lti.Parallel.is_strictly_proper"]], "is_strictly_proper (sympy.physics.control.lti.series property)": [[117, "sympy.physics.control.lti.Series.is_strictly_proper"]], "is_strictly_proper (sympy.physics.control.lti.transferfunction property)": [[117, "sympy.physics.control.lti.TransferFunction.is_strictly_proper"]], "num (sympy.physics.control.lti.transferfunction property)": [[117, "sympy.physics.control.lti.TransferFunction.num"]], "num_inputs (sympy.physics.control.lti.mimoparallel property)": [[117, "sympy.physics.control.lti.MIMOParallel.num_inputs"]], "num_inputs (sympy.physics.control.lti.mimoseries property)": [[117, "sympy.physics.control.lti.MIMOSeries.num_inputs"]], "num_inputs (sympy.physics.control.lti.transferfunctionmatrix property)": [[117, "sympy.physics.control.lti.TransferFunctionMatrix.num_inputs"]], "num_outputs (sympy.physics.control.lti.mimoparallel property)": [[117, "sympy.physics.control.lti.MIMOParallel.num_outputs"]], "num_outputs (sympy.physics.control.lti.mimoseries property)": [[117, "sympy.physics.control.lti.MIMOSeries.num_outputs"]], "num_outputs (sympy.physics.control.lti.transferfunctionmatrix property)": [[117, "sympy.physics.control.lti.TransferFunctionMatrix.num_outputs"]], "poles() (sympy.physics.control.lti.transferfunction method)": [[117, "sympy.physics.control.lti.TransferFunction.poles"]], "sensitivity (sympy.physics.control.lti.feedback property)": [[117, "sympy.physics.control.lti.Feedback.sensitivity"]], "sensitivity (sympy.physics.control.lti.mimofeedback property)": [[117, "sympy.physics.control.lti.MIMOFeedback.sensitivity"]], "shape (sympy.physics.control.lti.mimoparallel property)": [[117, "sympy.physics.control.lti.MIMOParallel.shape"]], "shape (sympy.physics.control.lti.mimoseries property)": [[117, "sympy.physics.control.lti.MIMOSeries.shape"]], "shape (sympy.physics.control.lti.transferfunctionmatrix property)": [[117, "sympy.physics.control.lti.TransferFunctionMatrix.shape"]], "sign (sympy.physics.control.lti.feedback property)": [[117, "sympy.physics.control.lti.Feedback.sign"]], "sign (sympy.physics.control.lti.mimofeedback property)": [[117, "sympy.physics.control.lti.MIMOFeedback.sign"]], "sympy.physics.control.lti": [[117, "module-sympy.physics.control.lti"]], "sys1 (sympy.physics.control.lti.feedback property)": [[117, "sympy.physics.control.lti.Feedback.sys1"]], "sys1 (sympy.physics.control.lti.mimofeedback property)": [[117, "sympy.physics.control.lti.MIMOFeedback.sys1"]], "sys2 (sympy.physics.control.lti.feedback property)": [[117, "sympy.physics.control.lti.Feedback.sys2"]], "sys2 (sympy.physics.control.lti.mimofeedback property)": [[117, "sympy.physics.control.lti.MIMOFeedback.sys2"]], "to_expr() (sympy.physics.control.lti.parallel method)": [[117, "sympy.physics.control.lti.Parallel.to_expr"]], "to_expr() (sympy.physics.control.lti.series method)": [[117, "sympy.physics.control.lti.Series.to_expr"]], "to_expr() (sympy.physics.control.lti.transferfunction method)": [[117, "sympy.physics.control.lti.TransferFunction.to_expr"]], "transpose() (sympy.physics.control.lti.transferfunctionmatrix method)": [[117, "sympy.physics.control.lti.TransferFunctionMatrix.transpose"]], "var (sympy.physics.control.lti.feedback property)": [[117, "sympy.physics.control.lti.Feedback.var"]], "var (sympy.physics.control.lti.mimofeedback property)": [[117, "sympy.physics.control.lti.MIMOFeedback.var"]], "var (sympy.physics.control.lti.mimoparallel property)": [[117, "sympy.physics.control.lti.MIMOParallel.var"]], "var (sympy.physics.control.lti.mimoseries property)": [[117, "sympy.physics.control.lti.MIMOSeries.var"]], "var (sympy.physics.control.lti.parallel property)": [[117, "sympy.physics.control.lti.Parallel.var"]], "var (sympy.physics.control.lti.series property)": [[117, "sympy.physics.control.lti.Series.var"]], "var (sympy.physics.control.lti.transferfunction property)": [[117, "sympy.physics.control.lti.TransferFunction.var"]], "var (sympy.physics.control.lti.transferfunctionmatrix property)": [[117, "sympy.physics.control.lti.TransferFunctionMatrix.var"]], "zeros() (sympy.physics.control.lti.transferfunction method)": [[117, "sympy.physics.control.lti.TransferFunction.zeros"]], "extract_type_tens() (in module sympy.physics.hep.gamma_matrices)": [[118, "sympy.physics.hep.gamma_matrices.extract_type_tens"]], "gamma_trace() (in module sympy.physics.hep.gamma_matrices)": [[118, "sympy.physics.hep.gamma_matrices.gamma_trace"]], "kahane_simplify() (in module sympy.physics.hep.gamma_matrices)": [[118, "sympy.physics.hep.gamma_matrices.kahane_simplify"]], "simplify_gpgp() (in module sympy.physics.hep.gamma_matrices)": [[118, "sympy.physics.hep.gamma_matrices.simplify_gpgp"]], "sympy.physics.hep.gamma_matrices": [[118, "module-sympy.physics.hep.gamma_matrices"]], "e_nl() (in module sympy.physics.hydrogen)": [[119, "sympy.physics.hydrogen.E_nl"]], "e_nl_dirac() (in module sympy.physics.hydrogen)": [[119, "sympy.physics.hydrogen.E_nl_dirac"]], "psi_nlm() (in module sympy.physics.hydrogen)": [[119, "sympy.physics.hydrogen.Psi_nlm"]], "r_nl() (in module sympy.physics.hydrogen)": [[119, "sympy.physics.hydrogen.R_nl"]], "sympy.physics.hydrogen": [[119, "module-sympy.physics.hydrogen"]], "mdft() (in module sympy.physics.matrices)": [[120, "sympy.physics.matrices.mdft"]], "mgamma() (in module sympy.physics.matrices)": [[120, "sympy.physics.matrices.mgamma"]], "msigma() (in module sympy.physics.matrices)": [[120, "sympy.physics.matrices.msigma"]], "pat_matrix() (in module sympy.physics.matrices)": [[120, "sympy.physics.matrices.pat_matrix"]], "sympy.physics.matrices": [[120, "module-sympy.physics.matrices"]], "body (class in sympy.physics.mechanics.body)": [[122, "sympy.physics.mechanics.body.Body"]], "ang_vel_in() (sympy.physics.mechanics.body.body method)": [[122, "sympy.physics.mechanics.body.Body.ang_vel_in"]], "apply_force() (sympy.physics.mechanics.body.body method)": [[122, "sympy.physics.mechanics.body.Body.apply_force"]], "apply_torque() (sympy.physics.mechanics.body.body method)": [[122, "sympy.physics.mechanics.body.Body.apply_torque"]], "clear_loads() (sympy.physics.mechanics.body.body method)": [[122, "sympy.physics.mechanics.body.Body.clear_loads"]], "dcm() (sympy.physics.mechanics.body.body method)": [[122, "sympy.physics.mechanics.body.Body.dcm"]], "inertia (sympy.physics.mechanics.body.body property)": [[122, "sympy.physics.mechanics.body.Body.inertia"]], "kinetic_energy() (sympy.physics.mechanics.body.body method)": [[122, "sympy.physics.mechanics.body.Body.kinetic_energy"]], "masscenter_vel() (sympy.physics.mechanics.body.body method)": [[122, "sympy.physics.mechanics.body.Body.masscenter_vel"]], "parallel_axis() (sympy.physics.mechanics.body.body method)": [[122, "sympy.physics.mechanics.body.Body.parallel_axis"]], "remove_load() (sympy.physics.mechanics.body.body method)": [[122, "sympy.physics.mechanics.body.Body.remove_load"]], "sympy.physics.mechanics.body": [[122, "module-sympy.physics.mechanics.body"]], "x (sympy.physics.mechanics.body.body property)": [[122, "sympy.physics.mechanics.body.Body.x"]], "y (sympy.physics.mechanics.body.body property)": [[122, "sympy.physics.mechanics.body.Body.y"]], "z (sympy.physics.mechanics.body.body property)": [[122, "sympy.physics.mechanics.body.Body.z"]], "find_dynamicsymbols() (in module sympy.physics.mechanics)": [[123, "sympy.physics.mechanics.find_dynamicsymbols"]], "msubs() (in module sympy.physics.mechanics)": [[123, "sympy.physics.mechanics.msubs"]], "cylindricaljoint (class in sympy.physics.mechanics.joint)": [[125, "sympy.physics.mechanics.joint.CylindricalJoint"]], "joint (class in sympy.physics.mechanics.joint)": [[125, "sympy.physics.mechanics.joint.Joint"]], "jointsmethod (class in sympy.physics.mechanics.jointsmethod)": [[125, "sympy.physics.mechanics.jointsmethod.JointsMethod"]], "pinjoint (class in sympy.physics.mechanics.joint)": [[125, "sympy.physics.mechanics.joint.PinJoint"]], "planarjoint (class in sympy.physics.mechanics.joint)": [[125, "sympy.physics.mechanics.joint.PlanarJoint"]], "prismaticjoint (class in sympy.physics.mechanics.joint)": [[125, "sympy.physics.mechanics.joint.PrismaticJoint"]], "sphericaljoint (class in sympy.physics.mechanics.joint)": [[125, "sympy.physics.mechanics.joint.SphericalJoint"]], "weldjoint (class in sympy.physics.mechanics.joint)": [[125, "sympy.physics.mechanics.joint.WeldJoint"]], "bodies (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[125, "sympy.physics.mechanics.jointsmethod.JointsMethod.bodies"]], "child (sympy.physics.mechanics.joint.joint property)": [[125, "sympy.physics.mechanics.joint.Joint.child"]], "child_axis (sympy.physics.mechanics.joint.joint property)": [[125, "sympy.physics.mechanics.joint.Joint.child_axis"]], "child_point (sympy.physics.mechanics.joint.joint property)": [[125, "sympy.physics.mechanics.joint.Joint.child_point"]], "coordinates (sympy.physics.mechanics.joint.joint property)": [[125, "sympy.physics.mechanics.joint.Joint.coordinates"]], "forcing (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[125, "sympy.physics.mechanics.jointsmethod.JointsMethod.forcing"]], "forcing_full (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[125, "sympy.physics.mechanics.jointsmethod.JointsMethod.forcing_full"]], "form_eoms() (sympy.physics.mechanics.jointsmethod.jointsmethod method)": [[125, "sympy.physics.mechanics.jointsmethod.JointsMethod.form_eoms"]], "joint_axis (sympy.physics.mechanics.joint.cylindricaljoint property)": [[125, "sympy.physics.mechanics.joint.CylindricalJoint.joint_axis"]], "joint_axis (sympy.physics.mechanics.joint.pinjoint property)": [[125, "sympy.physics.mechanics.joint.PinJoint.joint_axis"]], "joint_axis (sympy.physics.mechanics.joint.prismaticjoint property)": [[125, "sympy.physics.mechanics.joint.PrismaticJoint.joint_axis"]], "kdes (sympy.physics.mechanics.joint.joint property)": [[125, "sympy.physics.mechanics.joint.Joint.kdes"]], "kdes (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[125, "sympy.physics.mechanics.jointsmethod.JointsMethod.kdes"]], "loads (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[125, "sympy.physics.mechanics.jointsmethod.JointsMethod.loads"]], "mass_matrix (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[125, "sympy.physics.mechanics.jointsmethod.JointsMethod.mass_matrix"]], "mass_matrix_full (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[125, "sympy.physics.mechanics.jointsmethod.JointsMethod.mass_matrix_full"]], "method (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[125, "sympy.physics.mechanics.jointsmethod.JointsMethod.method"]], "name (sympy.physics.mechanics.joint.joint property)": [[125, "sympy.physics.mechanics.joint.Joint.name"]], "parent (sympy.physics.mechanics.joint.joint property)": [[125, "sympy.physics.mechanics.joint.Joint.parent"]], "parent_axis (sympy.physics.mechanics.joint.joint property)": [[125, "sympy.physics.mechanics.joint.Joint.parent_axis"]], "parent_point (sympy.physics.mechanics.joint.joint property)": [[125, "sympy.physics.mechanics.joint.Joint.parent_point"]], "planar_coordinates (sympy.physics.mechanics.joint.planarjoint property)": [[125, "sympy.physics.mechanics.joint.PlanarJoint.planar_coordinates"]], "planar_speeds (sympy.physics.mechanics.joint.planarjoint property)": [[125, "sympy.physics.mechanics.joint.PlanarJoint.planar_speeds"]], "planar_vectors (sympy.physics.mechanics.joint.planarjoint property)": [[125, "sympy.physics.mechanics.joint.PlanarJoint.planar_vectors"]], "q (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[125, "sympy.physics.mechanics.jointsmethod.JointsMethod.q"]], "rhs() (sympy.physics.mechanics.jointsmethod.jointsmethod method)": [[125, "sympy.physics.mechanics.jointsmethod.JointsMethod.rhs"]], "rotation_axis (sympy.physics.mechanics.joint.planarjoint property)": [[125, "sympy.physics.mechanics.joint.PlanarJoint.rotation_axis"]], "rotation_coordinate (sympy.physics.mechanics.joint.cylindricaljoint property)": [[125, "sympy.physics.mechanics.joint.CylindricalJoint.rotation_coordinate"]], "rotation_coordinate (sympy.physics.mechanics.joint.planarjoint property)": [[125, "sympy.physics.mechanics.joint.PlanarJoint.rotation_coordinate"]], "rotation_speed (sympy.physics.mechanics.joint.cylindricaljoint property)": [[125, "sympy.physics.mechanics.joint.CylindricalJoint.rotation_speed"]], "rotation_speed (sympy.physics.mechanics.joint.planarjoint property)": [[125, "sympy.physics.mechanics.joint.PlanarJoint.rotation_speed"]], "speeds (sympy.physics.mechanics.joint.joint property)": [[125, "sympy.physics.mechanics.joint.Joint.speeds"]], "sympy.physics.mechanics.joint": [[125, "module-sympy.physics.mechanics.joint"]], "sympy.physics.mechanics.jointsmethod": [[125, "module-sympy.physics.mechanics.jointsmethod"]], "translation_coordinate (sympy.physics.mechanics.joint.cylindricaljoint property)": [[125, "sympy.physics.mechanics.joint.CylindricalJoint.translation_coordinate"]], "translation_speed (sympy.physics.mechanics.joint.cylindricaljoint property)": [[125, "sympy.physics.mechanics.joint.CylindricalJoint.translation_speed"]], "u (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[125, "sympy.physics.mechanics.jointsmethod.JointsMethod.u"]], "kanesmethod (class in sympy.physics.mechanics.kane)": [[126, "sympy.physics.mechanics.kane.KanesMethod"]], "lagrangesmethod (class in sympy.physics.mechanics.lagrange)": [[126, "sympy.physics.mechanics.lagrange.LagrangesMethod"]], "auxiliary_eqs (sympy.physics.mechanics.kane.kanesmethod property)": [[126, "sympy.physics.mechanics.kane.KanesMethod.auxiliary_eqs"]], "forcing (sympy.physics.mechanics.kane.kanesmethod property)": [[126, "sympy.physics.mechanics.kane.KanesMethod.forcing"]], "forcing (sympy.physics.mechanics.lagrange.lagrangesmethod property)": [[126, "sympy.physics.mechanics.lagrange.LagrangesMethod.forcing"]], "forcing_full (sympy.physics.mechanics.kane.kanesmethod property)": [[126, "sympy.physics.mechanics.kane.KanesMethod.forcing_full"]], "forcing_full (sympy.physics.mechanics.lagrange.lagrangesmethod property)": [[126, "sympy.physics.mechanics.lagrange.LagrangesMethod.forcing_full"]], "forcing_kin (sympy.physics.mechanics.kane.kanesmethod property)": [[126, "sympy.physics.mechanics.kane.KanesMethod.forcing_kin"]], "form_lagranges_equations() (sympy.physics.mechanics.lagrange.lagrangesmethod method)": [[126, "sympy.physics.mechanics.lagrange.LagrangesMethod.form_lagranges_equations"]], "kanes_equations() (sympy.physics.mechanics.kane.kanesmethod method)": [[126, "sympy.physics.mechanics.kane.KanesMethod.kanes_equations"]], "kindiffdict() (sympy.physics.mechanics.kane.kanesmethod method)": [[126, "sympy.physics.mechanics.kane.KanesMethod.kindiffdict"]], "linearize() (sympy.physics.mechanics.kane.kanesmethod method)": [[126, "sympy.physics.mechanics.kane.KanesMethod.linearize"]], "linearize() (sympy.physics.mechanics.lagrange.lagrangesmethod method)": [[126, "sympy.physics.mechanics.lagrange.LagrangesMethod.linearize"]], "mass_matrix (sympy.physics.mechanics.kane.kanesmethod property)": [[126, "sympy.physics.mechanics.kane.KanesMethod.mass_matrix"]], "mass_matrix (sympy.physics.mechanics.lagrange.lagrangesmethod property)": [[126, "sympy.physics.mechanics.lagrange.LagrangesMethod.mass_matrix"]], "mass_matrix_full (sympy.physics.mechanics.kane.kanesmethod property)": [[126, "sympy.physics.mechanics.kane.KanesMethod.mass_matrix_full"]], "mass_matrix_full (sympy.physics.mechanics.lagrange.lagrangesmethod property)": [[126, "sympy.physics.mechanics.lagrange.LagrangesMethod.mass_matrix_full"]], "mass_matrix_kin (sympy.physics.mechanics.kane.kanesmethod property)": [[126, "sympy.physics.mechanics.kane.KanesMethod.mass_matrix_kin"]], "rhs() (sympy.physics.mechanics.kane.kanesmethod method)": [[126, "sympy.physics.mechanics.kane.KanesMethod.rhs"]], "rhs() (sympy.physics.mechanics.lagrange.lagrangesmethod method)": [[126, "sympy.physics.mechanics.lagrange.LagrangesMethod.rhs"]], "solve_multipliers() (sympy.physics.mechanics.lagrange.lagrangesmethod method)": [[126, "sympy.physics.mechanics.lagrange.LagrangesMethod.solve_multipliers"]], "sympy.physics.mechanics.kane": [[126, "module-sympy.physics.mechanics.kane"]], "sympy.physics.mechanics.lagrange": [[126, "module-sympy.physics.mechanics.lagrange"]], "to_linearizer() (sympy.physics.mechanics.kane.kanesmethod method)": [[126, "sympy.physics.mechanics.kane.KanesMethod.to_linearizer"]], "to_linearizer() (sympy.physics.mechanics.lagrange.lagrangesmethod method)": [[126, "sympy.physics.mechanics.lagrange.LagrangesMethod.to_linearizer"]], "linearizer (class in sympy.physics.mechanics.linearize)": [[127, "sympy.physics.mechanics.linearize.Linearizer"]], "__init__() (sympy.physics.mechanics.linearize.linearizer method)": [[127, "sympy.physics.mechanics.linearize.Linearizer.__init__"]], "linearize() (sympy.physics.mechanics.linearize.linearizer method)": [[127, "sympy.physics.mechanics.linearize.Linearizer.linearize"]], "sympy.physics.mechanics.linearize": [[127, "module-sympy.physics.mechanics.linearize"]], "force (class in sympy.physics.mechanics.loads)": [[128, "sympy.physics.mechanics.loads.Force"]], "inertia (class in sympy.physics.mechanics.inertia)": [[128, "sympy.physics.mechanics.inertia.Inertia"]], "lagrangian() (in module sympy.physics.mechanics.functions)": [[128, "sympy.physics.mechanics.functions.Lagrangian"]], "particle (class in sympy.physics.mechanics.particle)": [[128, "sympy.physics.mechanics.particle.Particle"]], "rigidbody (class in sympy.physics.mechanics.rigidbody)": [[128, "sympy.physics.mechanics.rigidbody.RigidBody"]], "torque (class in sympy.physics.mechanics.loads)": [[128, "sympy.physics.mechanics.loads.Torque"]], "angular_momentum() (in module sympy.physics.mechanics.functions)": [[128, "sympy.physics.mechanics.functions.angular_momentum"]], "angular_momentum() (sympy.physics.mechanics.particle.particle method)": [[128, "sympy.physics.mechanics.particle.Particle.angular_momentum"]], "angular_momentum() (sympy.physics.mechanics.rigidbody.rigidbody method)": [[128, "sympy.physics.mechanics.rigidbody.RigidBody.angular_momentum"]], "center_of_mass() (in module sympy.physics.mechanics.functions)": [[128, "sympy.physics.mechanics.functions.center_of_mass"]], "central_inertia (sympy.physics.mechanics.rigidbody.rigidbody property)": [[128, "sympy.physics.mechanics.rigidbody.RigidBody.central_inertia"]], "find_dynamicsymbols() (in module sympy.physics.mechanics.functions)": [[128, "sympy.physics.mechanics.functions.find_dynamicsymbols"]], "frame (sympy.physics.mechanics.rigidbody.rigidbody property)": [[128, "sympy.physics.mechanics.rigidbody.RigidBody.frame"]], "from_inertia_scalars() (sympy.physics.mechanics.inertia.inertia class method)": [[128, "sympy.physics.mechanics.inertia.Inertia.from_inertia_scalars"]], "inertia (sympy.physics.mechanics.rigidbody.rigidbody property)": [[128, "sympy.physics.mechanics.rigidbody.RigidBody.inertia"]], "inertia() (in module sympy.physics.mechanics.inertia)": [[128, "sympy.physics.mechanics.inertia.inertia"]], "inertia_of_point_mass() (in module sympy.physics.mechanics.inertia)": [[128, "sympy.physics.mechanics.inertia.inertia_of_point_mass"]], "kinetic_energy() (in module sympy.physics.mechanics.functions)": [[128, "sympy.physics.mechanics.functions.kinetic_energy"]], "kinetic_energy() (sympy.physics.mechanics.particle.particle method)": [[128, "sympy.physics.mechanics.particle.Particle.kinetic_energy"]], "kinetic_energy() (sympy.physics.mechanics.rigidbody.rigidbody method)": [[128, "sympy.physics.mechanics.rigidbody.RigidBody.kinetic_energy"]], "linear_momentum() (in module sympy.physics.mechanics.functions)": [[128, "sympy.physics.mechanics.functions.linear_momentum"]], "linear_momentum() (sympy.physics.mechanics.particle.particle method)": [[128, "sympy.physics.mechanics.particle.Particle.linear_momentum"]], "linear_momentum() (sympy.physics.mechanics.rigidbody.rigidbody method)": [[128, "sympy.physics.mechanics.rigidbody.RigidBody.linear_momentum"]], "mass (sympy.physics.mechanics.particle.particle property)": [[128, "sympy.physics.mechanics.particle.Particle.mass"]], "mass (sympy.physics.mechanics.rigidbody.rigidbody property)": [[128, "sympy.physics.mechanics.rigidbody.RigidBody.mass"]], "masscenter (sympy.physics.mechanics.particle.particle property)": [[128, "sympy.physics.mechanics.particle.Particle.masscenter"]], "masscenter (sympy.physics.mechanics.rigidbody.rigidbody property)": [[128, "sympy.physics.mechanics.rigidbody.RigidBody.masscenter"]], "name (sympy.physics.mechanics.particle.particle property)": [[128, "sympy.physics.mechanics.particle.Particle.name"]], "name (sympy.physics.mechanics.rigidbody.rigidbody property)": [[128, "sympy.physics.mechanics.rigidbody.RigidBody.name"]], "parallel_axis() (sympy.physics.mechanics.particle.particle method)": [[128, "sympy.physics.mechanics.particle.Particle.parallel_axis"]], "parallel_axis() (sympy.physics.mechanics.rigidbody.rigidbody method)": [[128, "sympy.physics.mechanics.rigidbody.RigidBody.parallel_axis"]], "point (sympy.physics.mechanics.particle.particle property)": [[128, "sympy.physics.mechanics.particle.Particle.point"]], "potential_energy (sympy.physics.mechanics.particle.particle property)": [[128, "sympy.physics.mechanics.particle.Particle.potential_energy"]], "potential_energy (sympy.physics.mechanics.rigidbody.rigidbody property)": [[128, "sympy.physics.mechanics.rigidbody.RigidBody.potential_energy"]], "potential_energy() (in module sympy.physics.mechanics.functions)": [[128, "sympy.physics.mechanics.functions.potential_energy"]], "x (sympy.physics.mechanics.rigidbody.rigidbody property)": [[128, "sympy.physics.mechanics.rigidbody.RigidBody.x"]], "y (sympy.physics.mechanics.rigidbody.rigidbody property)": [[128, "sympy.physics.mechanics.rigidbody.RigidBody.y"]], "z (sympy.physics.mechanics.rigidbody.rigidbody property)": [[128, "sympy.physics.mechanics.rigidbody.RigidBody.z"]], "symbolicsystem (class in sympy.physics.mechanics.system)": [[130, "sympy.physics.mechanics.system.SymbolicSystem"]], "system (class in sympy.physics.mechanics._system)": [[130, "sympy.physics.mechanics._system.System"]], "actuators (sympy.physics.mechanics._system.system property)": [[130, "sympy.physics.mechanics._system.System.actuators"]], "add_actuators() (sympy.physics.mechanics._system.system method)": [[130, "sympy.physics.mechanics._system.System.add_actuators"]], "add_bodies() (sympy.physics.mechanics._system.system method)": [[130, "sympy.physics.mechanics._system.System.add_bodies"]], "add_coordinates() (sympy.physics.mechanics._system.system method)": [[130, "sympy.physics.mechanics._system.System.add_coordinates"]], "add_holonomic_constraints() (sympy.physics.mechanics._system.system method)": [[130, "sympy.physics.mechanics._system.System.add_holonomic_constraints"]], "add_joints() (sympy.physics.mechanics._system.system method)": [[130, "sympy.physics.mechanics._system.System.add_joints"]], "add_kdes() (sympy.physics.mechanics._system.system method)": [[130, "sympy.physics.mechanics._system.System.add_kdes"]], "add_loads() (sympy.physics.mechanics._system.system method)": [[130, "sympy.physics.mechanics._system.System.add_loads"]], "add_nonholonomic_constraints() (sympy.physics.mechanics._system.system method)": [[130, "sympy.physics.mechanics._system.System.add_nonholonomic_constraints"]], "add_speeds() (sympy.physics.mechanics._system.system method)": [[130, "sympy.physics.mechanics._system.System.add_speeds"]], "alg_con (sympy.physics.mechanics.system.symbolicsystem property)": [[130, "sympy.physics.mechanics.system.SymbolicSystem.alg_con"]], "apply_gravity() (sympy.physics.mechanics._system.system method)": [[130, "sympy.physics.mechanics._system.System.apply_gravity"]], "bodies (sympy.physics.mechanics._system.system property)": [[130, "sympy.physics.mechanics._system.System.bodies"]], "bodies (sympy.physics.mechanics.system.symbolicsystem property)": [[130, "sympy.physics.mechanics.system.SymbolicSystem.bodies"]], "comb_explicit_rhs (sympy.physics.mechanics.system.symbolicsystem property)": [[130, "sympy.physics.mechanics.system.SymbolicSystem.comb_explicit_rhs"]], "comb_implicit_mat (sympy.physics.mechanics.system.symbolicsystem property)": [[130, "sympy.physics.mechanics.system.SymbolicSystem.comb_implicit_mat"]], "comb_implicit_rhs (sympy.physics.mechanics.system.symbolicsystem property)": [[130, "sympy.physics.mechanics.system.SymbolicSystem.comb_implicit_rhs"]], "compute_explicit_form() (sympy.physics.mechanics.system.symbolicsystem method)": [[130, "sympy.physics.mechanics.system.SymbolicSystem.compute_explicit_form"]], "constant_symbols() (sympy.physics.mechanics.system.symbolicsystem method)": [[130, "sympy.physics.mechanics.system.SymbolicSystem.constant_symbols"]], "coordinates (sympy.physics.mechanics.system.symbolicsystem property)": [[130, "sympy.physics.mechanics.system.SymbolicSystem.coordinates"]], "dyn_implicit_mat (sympy.physics.mechanics.system.symbolicsystem property)": [[130, "sympy.physics.mechanics.system.SymbolicSystem.dyn_implicit_mat"]], "dyn_implicit_rhs (sympy.physics.mechanics.system.symbolicsystem property)": [[130, "sympy.physics.mechanics.system.SymbolicSystem.dyn_implicit_rhs"]], "dynamic_symbols() (sympy.physics.mechanics.system.symbolicsystem method)": [[130, "sympy.physics.mechanics.system.SymbolicSystem.dynamic_symbols"]], "eom_method (sympy.physics.mechanics._system.system property)": [[130, "sympy.physics.mechanics._system.System.eom_method"]], "forcing (sympy.physics.mechanics._system.system property)": [[130, "sympy.physics.mechanics._system.System.forcing"]], "forcing_full (sympy.physics.mechanics._system.system property)": [[130, "sympy.physics.mechanics._system.System.forcing_full"]], "form_eoms() (sympy.physics.mechanics._system.system method)": [[130, "sympy.physics.mechanics._system.System.form_eoms"]], "frame (sympy.physics.mechanics._system.system property)": [[130, "sympy.physics.mechanics._system.System.frame"]], "from_newtonian() (sympy.physics.mechanics._system.system class method)": [[130, "sympy.physics.mechanics._system.System.from_newtonian"]], "get_body() (sympy.physics.mechanics._system.system method)": [[130, "sympy.physics.mechanics._system.System.get_body"]], "get_joint() (sympy.physics.mechanics._system.system method)": [[130, "sympy.physics.mechanics._system.System.get_joint"]], "holonomic_constraints (sympy.physics.mechanics._system.system property)": [[130, "sympy.physics.mechanics._system.System.holonomic_constraints"]], "joints (sympy.physics.mechanics._system.system property)": [[130, "sympy.physics.mechanics._system.System.joints"]], "kdes (sympy.physics.mechanics._system.system property)": [[130, "sympy.physics.mechanics._system.System.kdes"]], "kin_explicit_rhs (sympy.physics.mechanics.system.symbolicsystem property)": [[130, "sympy.physics.mechanics.system.SymbolicSystem.kin_explicit_rhs"]], "loads (sympy.physics.mechanics._system.system property)": [[130, "sympy.physics.mechanics._system.System.loads"]], "loads (sympy.physics.mechanics.system.symbolicsystem property)": [[130, "sympy.physics.mechanics.system.SymbolicSystem.loads"]], "mass_matrix (sympy.physics.mechanics._system.system property)": [[130, "sympy.physics.mechanics._system.System.mass_matrix"]], "mass_matrix_full (sympy.physics.mechanics._system.system property)": [[130, "sympy.physics.mechanics._system.System.mass_matrix_full"]], "nonholonomic_constraints (sympy.physics.mechanics._system.system property)": [[130, "sympy.physics.mechanics._system.System.nonholonomic_constraints"]], "origin (sympy.physics.mechanics._system.system property)": [[130, "sympy.physics.mechanics._system.System.origin"]], "q (sympy.physics.mechanics._system.system property)": [[130, "sympy.physics.mechanics._system.System.q"]], "q_dep (sympy.physics.mechanics._system.system property)": [[130, "sympy.physics.mechanics._system.System.q_dep"]], "q_ind (sympy.physics.mechanics._system.system property)": [[130, "sympy.physics.mechanics._system.System.q_ind"]], "rhs() (sympy.physics.mechanics._system.system method)": [[130, "sympy.physics.mechanics._system.System.rhs"]], "speeds (sympy.physics.mechanics.system.symbolicsystem property)": [[130, "sympy.physics.mechanics.system.SymbolicSystem.speeds"]], "states (sympy.physics.mechanics.system.symbolicsystem property)": [[130, "sympy.physics.mechanics.system.SymbolicSystem.states"]], "sympy.physics.mechanics.system": [[130, "module-sympy.physics.mechanics.system"]], "u (sympy.physics.mechanics._system.system property)": [[130, "sympy.physics.mechanics._system.System.u"]], "u_dep (sympy.physics.mechanics._system.system property)": [[130, "sympy.physics.mechanics._system.System.u_dep"]], "u_ind (sympy.physics.mechanics._system.system property)": [[130, "sympy.physics.mechanics._system.System.u_ind"]], "validate_system() (sympy.physics.mechanics._system.system method)": [[130, "sympy.physics.mechanics._system.System.validate_system"]], "x (sympy.physics.mechanics._system.system property)": [[130, "sympy.physics.mechanics._system.System.x"]], "y (sympy.physics.mechanics._system.system property)": [[130, "sympy.physics.mechanics._system.System.y"]], "z (sympy.physics.mechanics._system.system property)": [[130, "sympy.physics.mechanics._system.System.z"]], "sympy.physics.mechanics": [[141, "module-sympy.physics.mechanics"]], "a (sympy.physics.optics.gaussopt.raytransfermatrix property)": [[150, "sympy.physics.optics.gaussopt.RayTransferMatrix.A"]], "b (sympy.physics.optics.gaussopt.raytransfermatrix property)": [[150, "sympy.physics.optics.gaussopt.RayTransferMatrix.B"]], "beamparameter (class in sympy.physics.optics.gaussopt)": [[150, "sympy.physics.optics.gaussopt.BeamParameter"]], "c (sympy.physics.optics.gaussopt.raytransfermatrix property)": [[150, "sympy.physics.optics.gaussopt.RayTransferMatrix.C"]], "curvedmirror (class in sympy.physics.optics.gaussopt)": [[150, "sympy.physics.optics.gaussopt.CurvedMirror"]], "curvedrefraction (class in sympy.physics.optics.gaussopt)": [[150, "sympy.physics.optics.gaussopt.CurvedRefraction"]], "d (sympy.physics.optics.gaussopt.raytransfermatrix property)": [[150, "sympy.physics.optics.gaussopt.RayTransferMatrix.D"]], "flatmirror (class in sympy.physics.optics.gaussopt)": [[150, "sympy.physics.optics.gaussopt.FlatMirror"]], "flatrefraction (class in sympy.physics.optics.gaussopt)": [[150, "sympy.physics.optics.gaussopt.FlatRefraction"]], "freespace (class in sympy.physics.optics.gaussopt)": [[150, "sympy.physics.optics.gaussopt.FreeSpace"]], "geometricray (class in sympy.physics.optics.gaussopt)": [[150, "sympy.physics.optics.gaussopt.GeometricRay"]], "raytransfermatrix (class in sympy.physics.optics.gaussopt)": [[150, "sympy.physics.optics.gaussopt.RayTransferMatrix"]], "thinlens (class in sympy.physics.optics.gaussopt)": [[150, "sympy.physics.optics.gaussopt.ThinLens"]], "angle (sympy.physics.optics.gaussopt.geometricray property)": [[150, "sympy.physics.optics.gaussopt.GeometricRay.angle"]], "conjugate_gauss_beams() (in module sympy.physics.optics.gaussopt)": [[150, "sympy.physics.optics.gaussopt.conjugate_gauss_beams"]], "divergence (sympy.physics.optics.gaussopt.beamparameter property)": [[150, "sympy.physics.optics.gaussopt.BeamParameter.divergence"]], "gaussian_conj() (in module sympy.physics.optics.gaussopt)": [[150, "sympy.physics.optics.gaussopt.gaussian_conj"]], "geometric_conj_ab() (in module sympy.physics.optics.gaussopt)": [[150, "sympy.physics.optics.gaussopt.geometric_conj_ab"]], "geometric_conj_af() (in module sympy.physics.optics.gaussopt)": [[150, "sympy.physics.optics.gaussopt.geometric_conj_af"]], "geometric_conj_bf() (in module sympy.physics.optics.gaussopt)": [[150, "sympy.physics.optics.gaussopt.geometric_conj_bf"]], "gouy (sympy.physics.optics.gaussopt.beamparameter property)": [[150, "sympy.physics.optics.gaussopt.BeamParameter.gouy"]], "height (sympy.physics.optics.gaussopt.geometricray property)": [[150, "sympy.physics.optics.gaussopt.GeometricRay.height"]], "q (sympy.physics.optics.gaussopt.beamparameter property)": [[150, "sympy.physics.optics.gaussopt.BeamParameter.q"]], "radius (sympy.physics.optics.gaussopt.beamparameter property)": [[150, "sympy.physics.optics.gaussopt.BeamParameter.radius"]], "rayleigh2waist() (in module sympy.physics.optics.gaussopt)": [[150, "sympy.physics.optics.gaussopt.rayleigh2waist"]], "sympy.physics.optics.gaussopt": [[150, "module-sympy.physics.optics.gaussopt"]], "w (sympy.physics.optics.gaussopt.beamparameter property)": [[150, "sympy.physics.optics.gaussopt.BeamParameter.w"]], "w_0 (sympy.physics.optics.gaussopt.beamparameter property)": [[150, "sympy.physics.optics.gaussopt.BeamParameter.w_0"]], "waist2rayleigh() (in module sympy.physics.optics.gaussopt)": [[150, "sympy.physics.optics.gaussopt.waist2rayleigh"]], "waist_approximation_limit (sympy.physics.optics.gaussopt.beamparameter property)": [[150, "sympy.physics.optics.gaussopt.BeamParameter.waist_approximation_limit"]], "medium (class in sympy.physics.optics.medium)": [[152, "sympy.physics.optics.medium.Medium"]], "refractive_index (sympy.physics.optics.medium.medium property)": [[152, "sympy.physics.optics.medium.Medium.refractive_index"]], "speed (sympy.physics.optics.medium.medium property)": [[152, "sympy.physics.optics.medium.Medium.speed"]], "sympy.physics.optics.medium": [[152, "module-sympy.physics.optics.medium"]], "half_wave_retarder() (in module sympy.physics.optics.polarization)": [[153, "sympy.physics.optics.polarization.half_wave_retarder"]], "jones_2_stokes() (in module sympy.physics.optics.polarization)": [[153, "sympy.physics.optics.polarization.jones_2_stokes"]], "jones_vector() (in module sympy.physics.optics.polarization)": [[153, "sympy.physics.optics.polarization.jones_vector"]], "linear_polarizer() (in module sympy.physics.optics.polarization)": [[153, "sympy.physics.optics.polarization.linear_polarizer"]], "mueller_matrix() (in module sympy.physics.optics.polarization)": [[153, "sympy.physics.optics.polarization.mueller_matrix"]], "phase_retarder() (in module sympy.physics.optics.polarization)": [[153, "sympy.physics.optics.polarization.phase_retarder"]], "polarizing_beam_splitter() (in module sympy.physics.optics.polarization)": [[153, "sympy.physics.optics.polarization.polarizing_beam_splitter"]], "quarter_wave_retarder() (in module sympy.physics.optics.polarization)": [[153, "sympy.physics.optics.polarization.quarter_wave_retarder"]], "reflective_filter() (in module sympy.physics.optics.polarization)": [[153, "sympy.physics.optics.polarization.reflective_filter"]], "stokes_vector() (in module sympy.physics.optics.polarization)": [[153, "sympy.physics.optics.polarization.stokes_vector"]], "sympy.physics.optics.polarization": [[153, "module-sympy.physics.optics.polarization"]], "transmissive_filter() (in module sympy.physics.optics.polarization)": [[153, "sympy.physics.optics.polarization.transmissive_filter"]], "brewster_angle() (in module sympy.physics.optics.utils)": [[154, "sympy.physics.optics.utils.brewster_angle"]], "critical_angle() (in module sympy.physics.optics.utils)": [[154, "sympy.physics.optics.utils.critical_angle"]], "deviation() (in module sympy.physics.optics.utils)": [[154, "sympy.physics.optics.utils.deviation"]], "fresnel_coefficients() (in module sympy.physics.optics.utils)": [[154, "sympy.physics.optics.utils.fresnel_coefficients"]], "hyperfocal_distance() (in module sympy.physics.optics.utils)": [[154, "sympy.physics.optics.utils.hyperfocal_distance"]], "lens_formula() (in module sympy.physics.optics.utils)": [[154, "sympy.physics.optics.utils.lens_formula"]], "lens_makers_formula() (in module sympy.physics.optics.utils)": [[154, "sympy.physics.optics.utils.lens_makers_formula"]], "mirror_formula() (in module sympy.physics.optics.utils)": [[154, "sympy.physics.optics.utils.mirror_formula"]], "refraction_angle() (in module sympy.physics.optics.utils)": [[154, "sympy.physics.optics.utils.refraction_angle"]], "sympy.physics.optics.utils": [[154, "module-sympy.physics.optics.utils"]], "transverse_magnification() (in module sympy.physics.optics.utils)": [[154, "sympy.physics.optics.utils.transverse_magnification"]], "twave (class in sympy.physics.optics.waves)": [[155, "sympy.physics.optics.waves.TWave"]], "amplitude (sympy.physics.optics.waves.twave property)": [[155, "sympy.physics.optics.waves.TWave.amplitude"]], "angular_velocity (sympy.physics.optics.waves.twave property)": [[155, "sympy.physics.optics.waves.TWave.angular_velocity"]], "frequency (sympy.physics.optics.waves.twave property)": [[155, "sympy.physics.optics.waves.TWave.frequency"]], "n (sympy.physics.optics.waves.twave property)": [[155, "sympy.physics.optics.waves.TWave.n"]], "phase (sympy.physics.optics.waves.twave property)": [[155, "sympy.physics.optics.waves.TWave.phase"]], "speed (sympy.physics.optics.waves.twave property)": [[155, "sympy.physics.optics.waves.TWave.speed"]], "sympy.physics.optics.waves": [[155, "module-sympy.physics.optics.waves"]], "time_period (sympy.physics.optics.waves.twave property)": [[155, "sympy.physics.optics.waves.TWave.time_period"]], "wavelength (sympy.physics.optics.waves.twave property)": [[155, "sympy.physics.optics.waves.TWave.wavelength"]], "wavenumber (sympy.physics.optics.waves.twave property)": [[155, "sympy.physics.optics.waves.TWave.wavenumber"]], "evaluate_pauli_product() (in module sympy.physics.paulialgebra)": [[156, "sympy.physics.paulialgebra.evaluate_pauli_product"]], "sympy.physics.paulialgebra": [[156, "module-sympy.physics.paulialgebra"]], "e_n() (in module sympy.physics.qho_1d)": [[157, "sympy.physics.qho_1d.E_n"]], "coherent_state() (in module sympy.physics.qho_1d)": [[157, "sympy.physics.qho_1d.coherent_state"]], "psi_n() (in module sympy.physics.qho_1d)": [[157, "sympy.physics.qho_1d.psi_n"]], "sympy.physics.qho_1d": [[157, "module-sympy.physics.qho_1d"]], "anticommutator (class in sympy.physics.quantum.anticommutator)": [[158, "sympy.physics.quantum.anticommutator.AntiCommutator"]], "doit() (sympy.physics.quantum.anticommutator.anticommutator method)": [[158, "sympy.physics.quantum.anticommutator.AntiCommutator.doit"]], "sympy.physics.quantum.anticommutator": [[158, "module-sympy.physics.quantum.anticommutator"]], "positionbra3d (class in sympy.physics.quantum.cartesian)": [[159, "sympy.physics.quantum.cartesian.PositionBra3D"]], "positionket3d (class in sympy.physics.quantum.cartesian)": [[159, "sympy.physics.quantum.cartesian.PositionKet3D"]], "positionstate3d (class in sympy.physics.quantum.cartesian)": [[159, "sympy.physics.quantum.cartesian.PositionState3D"]], "pxbra (class in sympy.physics.quantum.cartesian)": [[159, "sympy.physics.quantum.cartesian.PxBra"]], "pxket (class in sympy.physics.quantum.cartesian)": [[159, "sympy.physics.quantum.cartesian.PxKet"]], "pxop (class in sympy.physics.quantum.cartesian)": [[159, "sympy.physics.quantum.cartesian.PxOp"]], "xbra (class in sympy.physics.quantum.cartesian)": [[159, "sympy.physics.quantum.cartesian.XBra"]], "xket (class in sympy.physics.quantum.cartesian)": [[159, "sympy.physics.quantum.cartesian.XKet"]], "xop (class in sympy.physics.quantum.cartesian)": [[159, "sympy.physics.quantum.cartesian.XOp"]], "yop (class in sympy.physics.quantum.cartesian)": [[159, "sympy.physics.quantum.cartesian.YOp"]], "zop (class in sympy.physics.quantum.cartesian)": [[159, "sympy.physics.quantum.cartesian.ZOp"]], "momentum (sympy.physics.quantum.cartesian.pxbra property)": [[159, "sympy.physics.quantum.cartesian.PxBra.momentum"]], "momentum (sympy.physics.quantum.cartesian.pxket property)": [[159, "sympy.physics.quantum.cartesian.PxKet.momentum"]], "position (sympy.physics.quantum.cartesian.xbra property)": [[159, "sympy.physics.quantum.cartesian.XBra.position"]], "position (sympy.physics.quantum.cartesian.xket property)": [[159, "sympy.physics.quantum.cartesian.XKet.position"]], "position_x (sympy.physics.quantum.cartesian.positionstate3d property)": [[159, "sympy.physics.quantum.cartesian.PositionState3D.position_x"]], "position_y (sympy.physics.quantum.cartesian.positionstate3d property)": [[159, "sympy.physics.quantum.cartesian.PositionState3D.position_y"]], "position_z (sympy.physics.quantum.cartesian.positionstate3d property)": [[159, "sympy.physics.quantum.cartesian.PositionState3D.position_z"]], "sympy.physics.quantum.cartesian": [[159, "module-sympy.physics.quantum.cartesian"]], "cg (class in sympy.physics.quantum.cg)": [[160, "sympy.physics.quantum.cg.CG"]], "wigner3j (class in sympy.physics.quantum.cg)": [[160, "sympy.physics.quantum.cg.Wigner3j"]], "wigner6j (class in sympy.physics.quantum.cg)": [[160, "sympy.physics.quantum.cg.Wigner6j"]], "wigner9j (class in sympy.physics.quantum.cg)": [[160, "sympy.physics.quantum.cg.Wigner9j"]], "cg_simp() (in module sympy.physics.quantum.cg)": [[160, "sympy.physics.quantum.cg.cg_simp"]], "sympy.physics.quantum.cg": [[160, "module-sympy.physics.quantum.cg"]], "circuitplot (class in sympy.physics.quantum.circuitplot)": [[161, "sympy.physics.quantum.circuitplot.CircuitPlot"]], "createcgate() (in module sympy.physics.quantum.circuitplot)": [[161, "sympy.physics.quantum.circuitplot.CreateCGate"]], "mx (class in sympy.physics.quantum.circuitplot)": [[161, "sympy.physics.quantum.circuitplot.Mx"]], "mz (class in sympy.physics.quantum.circuitplot)": [[161, "sympy.physics.quantum.circuitplot.Mz"]], "circuit_plot() (in module sympy.physics.quantum.circuitplot)": [[161, "sympy.physics.quantum.circuitplot.circuit_plot"]], "control_line() (sympy.physics.quantum.circuitplot.circuitplot method)": [[161, "sympy.physics.quantum.circuitplot.CircuitPlot.control_line"]], "control_point() (sympy.physics.quantum.circuitplot.circuitplot method)": [[161, "sympy.physics.quantum.circuitplot.CircuitPlot.control_point"]], "labeller() (in module sympy.physics.quantum.circuitplot)": [[161, "sympy.physics.quantum.circuitplot.labeller"]], "not_point() (sympy.physics.quantum.circuitplot.circuitplot method)": [[161, "sympy.physics.quantum.circuitplot.CircuitPlot.not_point"]], "one_qubit_box() (sympy.physics.quantum.circuitplot.circuitplot method)": [[161, "sympy.physics.quantum.circuitplot.CircuitPlot.one_qubit_box"]], "swap_point() (sympy.physics.quantum.circuitplot.circuitplot method)": [[161, "sympy.physics.quantum.circuitplot.CircuitPlot.swap_point"]], "sympy.physics.quantum.circuitplot": [[161, "module-sympy.physics.quantum.circuitplot"]], "two_qubit_box() (sympy.physics.quantum.circuitplot.circuitplot method)": [[161, "sympy.physics.quantum.circuitplot.CircuitPlot.two_qubit_box"]], "update() (sympy.physics.quantum.circuitplot.circuitplot method)": [[161, "sympy.physics.quantum.circuitplot.CircuitPlot.update"]], "commutator (class in sympy.physics.quantum.commutator)": [[162, "sympy.physics.quantum.commutator.Commutator"]], "doit() (sympy.physics.quantum.commutator.commutator method)": [[162, "sympy.physics.quantum.commutator.Commutator.doit"]], "sympy.physics.quantum.commutator": [[162, "module-sympy.physics.quantum.commutator"]], "hbar (class in sympy.physics.quantum.constants)": [[163, "sympy.physics.quantum.constants.HBar"]], "sympy.physics.quantum.constants": [[163, "module-sympy.physics.quantum.constants"]], "dagger (class in sympy.physics.quantum.dagger)": [[164, "sympy.physics.quantum.dagger.Dagger"]], "sympy.physics.quantum.dagger": [[164, "module-sympy.physics.quantum.dagger"]], "cgate (class in sympy.physics.quantum.gate)": [[165, "sympy.physics.quantum.gate.CGate"]], "cgates (class in sympy.physics.quantum.gate)": [[165, "sympy.physics.quantum.gate.CGateS"]], "cnot (in module sympy.physics.quantum.gate)": [[165, "sympy.physics.quantum.gate.CNOT"]], "cnotgate (class in sympy.physics.quantum.gate)": [[165, "sympy.physics.quantum.gate.CNotGate"]], "gate (class in sympy.physics.quantum.gate)": [[165, "sympy.physics.quantum.gate.Gate"]], "h (in module sympy.physics.quantum.gate)": [[165, "sympy.physics.quantum.gate.H"]], "hadamardgate (class in sympy.physics.quantum.gate)": [[165, "sympy.physics.quantum.gate.HadamardGate"]], "identitygate (class in sympy.physics.quantum.gate)": [[165, "sympy.physics.quantum.gate.IdentityGate"]], "onequbitgate (class in sympy.physics.quantum.gate)": [[165, "sympy.physics.quantum.gate.OneQubitGate"]], "phase (in module sympy.physics.quantum.gate)": [[165, "sympy.physics.quantum.gate.Phase"]], "phasegate (class in sympy.physics.quantum.gate)": [[165, "sympy.physics.quantum.gate.PhaseGate"]], "s (in module sympy.physics.quantum.gate)": [[165, "sympy.physics.quantum.gate.S"]], "swap (in module sympy.physics.quantum.gate)": [[165, "sympy.physics.quantum.gate.SWAP"]], "swapgate (class in sympy.physics.quantum.gate)": [[165, "sympy.physics.quantum.gate.SwapGate"]], "t (in module sympy.physics.quantum.gate)": [[165, "sympy.physics.quantum.gate.T"]], "tgate (class in sympy.physics.quantum.gate)": [[165, "sympy.physics.quantum.gate.TGate"]], "twoqubitgate (class in sympy.physics.quantum.gate)": [[165, "sympy.physics.quantum.gate.TwoQubitGate"]], "ugate (class in sympy.physics.quantum.gate)": [[165, "sympy.physics.quantum.gate.UGate"]], "x (in module sympy.physics.quantum.gate)": [[165, "sympy.physics.quantum.gate.X"]], "xgate (class in sympy.physics.quantum.gate)": [[165, "sympy.physics.quantum.gate.XGate"]], "y (in module sympy.physics.quantum.gate)": [[165, "sympy.physics.quantum.gate.Y"]], "ygate (class in sympy.physics.quantum.gate)": [[165, "sympy.physics.quantum.gate.YGate"]], "z (in module sympy.physics.quantum.gate)": [[165, "sympy.physics.quantum.gate.Z"]], "zgate (class in sympy.physics.quantum.gate)": [[165, "sympy.physics.quantum.gate.ZGate"]], "controls (sympy.physics.quantum.gate.cgate property)": [[165, "sympy.physics.quantum.gate.CGate.controls"]], "controls (sympy.physics.quantum.gate.cnotgate property)": [[165, "sympy.physics.quantum.gate.CNotGate.controls"]], "decompose() (sympy.physics.quantum.gate.cgate method)": [[165, "sympy.physics.quantum.gate.CGate.decompose"]], "decompose() (sympy.physics.quantum.gate.swapgate method)": [[165, "sympy.physics.quantum.gate.SwapGate.decompose"]], "eval_controls() (sympy.physics.quantum.gate.cgate method)": [[165, "sympy.physics.quantum.gate.CGate.eval_controls"]], "gate (sympy.physics.quantum.gate.cgate property)": [[165, "sympy.physics.quantum.gate.CGate.gate"]], "gate (sympy.physics.quantum.gate.cnotgate property)": [[165, "sympy.physics.quantum.gate.CNotGate.gate"]], "gate_simp() (in module sympy.physics.quantum.gate)": [[165, "sympy.physics.quantum.gate.gate_simp"]], "gate_sort() (in module sympy.physics.quantum.gate)": [[165, "sympy.physics.quantum.gate.gate_sort"]], "get_target_matrix() (sympy.physics.quantum.gate.gate method)": [[165, "sympy.physics.quantum.gate.Gate.get_target_matrix"]], "get_target_matrix() (sympy.physics.quantum.gate.ugate method)": [[165, "sympy.physics.quantum.gate.UGate.get_target_matrix"]], "min_qubits (sympy.physics.quantum.gate.cgate property)": [[165, "sympy.physics.quantum.gate.CGate.min_qubits"]], "min_qubits (sympy.physics.quantum.gate.cnotgate property)": [[165, "sympy.physics.quantum.gate.CNotGate.min_qubits"]], "min_qubits (sympy.physics.quantum.gate.gate property)": [[165, "sympy.physics.quantum.gate.Gate.min_qubits"]], "normalized() (in module sympy.physics.quantum.gate)": [[165, "sympy.physics.quantum.gate.normalized"]], "nqubits (sympy.physics.quantum.gate.cgate property)": [[165, "sympy.physics.quantum.gate.CGate.nqubits"]], "nqubits (sympy.physics.quantum.gate.gate property)": [[165, "sympy.physics.quantum.gate.Gate.nqubits"]], "plot_gate() (sympy.physics.quantum.gate.cgate method)": [[165, "sympy.physics.quantum.gate.CGate.plot_gate"]], "random_circuit() (in module sympy.physics.quantum.gate)": [[165, "sympy.physics.quantum.gate.random_circuit"]], "sympy.physics.quantum.gate": [[165, "module-sympy.physics.quantum.gate"]], "targets (sympy.physics.quantum.gate.cgate property)": [[165, "sympy.physics.quantum.gate.CGate.targets"]], "targets (sympy.physics.quantum.gate.cnotgate property)": [[165, "sympy.physics.quantum.gate.CNotGate.targets"]], "targets (sympy.physics.quantum.gate.gate property)": [[165, "sympy.physics.quantum.gate.Gate.targets"]], "targets (sympy.physics.quantum.gate.ugate property)": [[165, "sympy.physics.quantum.gate.UGate.targets"]], "oraclegate (class in sympy.physics.quantum.grover)": [[166, "sympy.physics.quantum.grover.OracleGate"]], "wgate (class in sympy.physics.quantum.grover)": [[166, "sympy.physics.quantum.grover.WGate"]], "apply_grover() (in module sympy.physics.quantum.grover)": [[166, "sympy.physics.quantum.grover.apply_grover"]], "grover_iteration() (in module sympy.physics.quantum.grover)": [[166, "sympy.physics.quantum.grover.grover_iteration"]], "search_function (sympy.physics.quantum.grover.oraclegate property)": [[166, "sympy.physics.quantum.grover.OracleGate.search_function"]], "superposition_basis() (in module sympy.physics.quantum.grover)": [[166, "sympy.physics.quantum.grover.superposition_basis"]], "sympy.physics.quantum.grover": [[166, "module-sympy.physics.quantum.grover"]], "targets (sympy.physics.quantum.grover.oraclegate property)": [[166, "sympy.physics.quantum.grover.OracleGate.targets"]], "complexspace (class in sympy.physics.quantum.hilbert)": [[167, "sympy.physics.quantum.hilbert.ComplexSpace"]], "directsumhilbertspace (class in sympy.physics.quantum.hilbert)": [[167, "sympy.physics.quantum.hilbert.DirectSumHilbertSpace"]], "fockspace (class in sympy.physics.quantum.hilbert)": [[167, "sympy.physics.quantum.hilbert.FockSpace"]], "hilbertspace (class in sympy.physics.quantum.hilbert)": [[167, "sympy.physics.quantum.hilbert.HilbertSpace"]], "l2 (class in sympy.physics.quantum.hilbert)": [[167, "sympy.physics.quantum.hilbert.L2"]], "tensorpowerhilbertspace (class in sympy.physics.quantum.hilbert)": [[167, "sympy.physics.quantum.hilbert.TensorPowerHilbertSpace"]], "tensorproducthilbertspace (class in sympy.physics.quantum.hilbert)": [[167, "sympy.physics.quantum.hilbert.TensorProductHilbertSpace"]], "dimension (sympy.physics.quantum.hilbert.hilbertspace property)": [[167, "sympy.physics.quantum.hilbert.HilbertSpace.dimension"]], "eval() (sympy.physics.quantum.hilbert.directsumhilbertspace class method)": [[167, "sympy.physics.quantum.hilbert.DirectSumHilbertSpace.eval"]], "eval() (sympy.physics.quantum.hilbert.tensorproducthilbertspace class method)": [[167, "sympy.physics.quantum.hilbert.TensorProductHilbertSpace.eval"]], "spaces (sympy.physics.quantum.hilbert.directsumhilbertspace property)": [[167, "sympy.physics.quantum.hilbert.DirectSumHilbertSpace.spaces"]], "spaces (sympy.physics.quantum.hilbert.tensorproducthilbertspace property)": [[167, "sympy.physics.quantum.hilbert.TensorProductHilbertSpace.spaces"]], "sympy.physics.quantum.hilbert": [[167, "module-sympy.physics.quantum.hilbert"]], "innerproduct (class in sympy.physics.quantum.innerproduct)": [[169, "sympy.physics.quantum.innerproduct.InnerProduct"]], "sympy.physics.quantum.innerproduct": [[169, "module-sympy.physics.quantum.innerproduct"]], "differentialoperator (class in sympy.physics.quantum.operator)": [[170, "sympy.physics.quantum.operator.DifferentialOperator"]], "hermitianoperator (class in sympy.physics.quantum.operator)": [[170, "sympy.physics.quantum.operator.HermitianOperator"]], "identityoperator (class in sympy.physics.quantum.operator)": [[170, "sympy.physics.quantum.operator.IdentityOperator"]], "operator (class in sympy.physics.quantum.operator)": [[170, "sympy.physics.quantum.operator.Operator"]], "outerproduct (class in sympy.physics.quantum.operator)": [[170, "sympy.physics.quantum.operator.OuterProduct"]], "unitaryoperator (class in sympy.physics.quantum.operator)": [[170, "sympy.physics.quantum.operator.UnitaryOperator"]], "bra (sympy.physics.quantum.operator.outerproduct property)": [[170, "sympy.physics.quantum.operator.OuterProduct.bra"]], "expr (sympy.physics.quantum.operator.differentialoperator property)": [[170, "sympy.physics.quantum.operator.DifferentialOperator.expr"]], "free_symbols (sympy.physics.quantum.operator.differentialoperator property)": [[170, "sympy.physics.quantum.operator.DifferentialOperator.free_symbols"]], "function (sympy.physics.quantum.operator.differentialoperator property)": [[170, "sympy.physics.quantum.operator.DifferentialOperator.function"]], "ket (sympy.physics.quantum.operator.outerproduct property)": [[170, "sympy.physics.quantum.operator.OuterProduct.ket"]], "sympy.physics.quantum.operator": [[170, "module-sympy.physics.quantum.operator"]], "variables (sympy.physics.quantum.operator.differentialoperator property)": [[170, "sympy.physics.quantum.operator.DifferentialOperator.variables"]], "operators_to_state() (in module sympy.physics.quantum.operatorset)": [[171, "sympy.physics.quantum.operatorset.operators_to_state"]], "state_to_operators() (in module sympy.physics.quantum.operatorset)": [[171, "sympy.physics.quantum.operatorset.state_to_operators"]], "sympy.physics.quantum.operatorset": [[171, "module-sympy.physics.quantum.operatorset"]], "piabbra (class in sympy.physics.quantum.piab)": [[172, "sympy.physics.quantum.piab.PIABBra"]], "piabhamiltonian (class in sympy.physics.quantum.piab)": [[172, "sympy.physics.quantum.piab.PIABHamiltonian"]], "piabket (class in sympy.physics.quantum.piab)": [[172, "sympy.physics.quantum.piab.PIABKet"]], "sympy.physics.quantum.piab": [[172, "module-sympy.physics.quantum.piab"]], "qapply() (in module sympy.physics.quantum.qapply)": [[173, "sympy.physics.quantum.qapply.qapply"]], "sympy.physics.quantum.qapply": [[173, "module-sympy.physics.quantum.qapply"]], "iqft (class in sympy.physics.quantum.qft)": [[174, "sympy.physics.quantum.qft.IQFT"]], "qft (class in sympy.physics.quantum.qft)": [[174, "sympy.physics.quantum.qft.QFT"]], "rk (in module sympy.physics.quantum.qft)": [[174, "sympy.physics.quantum.qft.Rk"]], "rkgate (class in sympy.physics.quantum.qft)": [[174, "sympy.physics.quantum.qft.RkGate"]], "decompose() (sympy.physics.quantum.qft.iqft method)": [[174, "sympy.physics.quantum.qft.IQFT.decompose"]], "decompose() (sympy.physics.quantum.qft.qft method)": [[174, "sympy.physics.quantum.qft.QFT.decompose"]], "sympy.physics.quantum.qft": [[174, "module-sympy.physics.quantum.qft"]], "intqubit (class in sympy.physics.quantum.qubit)": [[175, "sympy.physics.quantum.qubit.IntQubit"]], "intqubitbra (class in sympy.physics.quantum.qubit)": [[175, "sympy.physics.quantum.qubit.IntQubitBra"]], "qubit (class in sympy.physics.quantum.qubit)": [[175, "sympy.physics.quantum.qubit.Qubit"]], "qubitbra (class in sympy.physics.quantum.qubit)": [[175, "sympy.physics.quantum.qubit.QubitBra"]], "matrix_to_density() (in module sympy.physics.quantum.qubit)": [[175, "sympy.physics.quantum.qubit.matrix_to_density"]], "matrix_to_qubit() (in module sympy.physics.quantum.qubit)": [[175, "sympy.physics.quantum.qubit.matrix_to_qubit"]], "measure_all() (in module sympy.physics.quantum.qubit)": [[175, "sympy.physics.quantum.qubit.measure_all"]], "measure_all_oneshot() (in module sympy.physics.quantum.qubit)": [[175, "sympy.physics.quantum.qubit.measure_all_oneshot"]], "measure_partial() (in module sympy.physics.quantum.qubit)": [[175, "sympy.physics.quantum.qubit.measure_partial"]], "measure_partial_oneshot() (in module sympy.physics.quantum.qubit)": [[175, "sympy.physics.quantum.qubit.measure_partial_oneshot"]], "qubit_to_matrix() (in module sympy.physics.quantum.qubit)": [[175, "sympy.physics.quantum.qubit.qubit_to_matrix"]], "sympy.physics.quantum.qubit": [[175, "module-sympy.physics.quantum.qubit"]], "enumerate_states() (in module sympy.physics.quantum.represent)": [[176, "sympy.physics.quantum.represent.enumerate_states"]], "get_basis() (in module sympy.physics.quantum.represent)": [[176, "sympy.physics.quantum.represent.get_basis"]], "integrate_result() (in module sympy.physics.quantum.represent)": [[176, "sympy.physics.quantum.represent.integrate_result"]], "rep_expectation() (in module sympy.physics.quantum.represent)": [[176, "sympy.physics.quantum.represent.rep_expectation"]], "rep_innerproduct() (in module sympy.physics.quantum.represent)": [[176, "sympy.physics.quantum.represent.rep_innerproduct"]], "represent() (in module sympy.physics.quantum.represent)": [[176, "sympy.physics.quantum.represent.represent"]], "sympy.physics.quantum.represent": [[176, "module-sympy.physics.quantum.represent"]], "cmod (class in sympy.physics.quantum.shor)": [[177, "sympy.physics.quantum.shor.CMod"]], "n (sympy.physics.quantum.shor.cmod property)": [[177, "sympy.physics.quantum.shor.CMod.N"]], "a (sympy.physics.quantum.shor.cmod property)": [[177, "sympy.physics.quantum.shor.CMod.a"]], "period_find() (in module sympy.physics.quantum.shor)": [[177, "sympy.physics.quantum.shor.period_find"]], "shor() (in module sympy.physics.quantum.shor)": [[177, "sympy.physics.quantum.shor.shor"]], "sympy.physics.quantum.shor": [[177, "module-sympy.physics.quantum.shor"]], "t (sympy.physics.quantum.shor.cmod property)": [[177, "sympy.physics.quantum.shor.CMod.t"]], "d() (sympy.physics.quantum.spin.rotation class method)": [[178, "sympy.physics.quantum.spin.Rotation.D"], [178, "sympy.physics.quantum.spin.Rotation.d"]], "j2op (class in sympy.physics.quantum.spin)": [[178, "sympy.physics.quantum.spin.J2Op"]], "jxbra (class in sympy.physics.quantum.spin)": [[178, "sympy.physics.quantum.spin.JxBra"]], "jxbracoupled (class in sympy.physics.quantum.spin)": [[178, "sympy.physics.quantum.spin.JxBraCoupled"]], "jxket (class in sympy.physics.quantum.spin)": [[178, "sympy.physics.quantum.spin.JxKet"]], "jxketcoupled (class in sympy.physics.quantum.spin)": [[178, "sympy.physics.quantum.spin.JxKetCoupled"]], "jybra (class in sympy.physics.quantum.spin)": [[178, "sympy.physics.quantum.spin.JyBra"]], "jybracoupled (class in sympy.physics.quantum.spin)": [[178, "sympy.physics.quantum.spin.JyBraCoupled"]], "jyket (class in sympy.physics.quantum.spin)": [[178, "sympy.physics.quantum.spin.JyKet"]], "jyketcoupled (class in sympy.physics.quantum.spin)": [[178, "sympy.physics.quantum.spin.JyKetCoupled"]], "jzbra (class in sympy.physics.quantum.spin)": [[178, "sympy.physics.quantum.spin.JzBra"]], "jzbracoupled (class in sympy.physics.quantum.spin)": [[178, "sympy.physics.quantum.spin.JzBraCoupled"]], "jzket (class in sympy.physics.quantum.spin)": [[178, "sympy.physics.quantum.spin.JzKet"]], "jzketcoupled (class in sympy.physics.quantum.spin)": [[178, "sympy.physics.quantum.spin.JzKetCoupled"]], "jzop (class in sympy.physics.quantum.spin)": [[178, "sympy.physics.quantum.spin.JzOp"]], "rotation (class in sympy.physics.quantum.spin)": [[178, "sympy.physics.quantum.spin.Rotation"]], "wignerd (class in sympy.physics.quantum.spin)": [[178, "sympy.physics.quantum.spin.WignerD"]], "couple() (in module sympy.physics.quantum.spin)": [[178, "sympy.physics.quantum.spin.couple"]], "sympy.physics.quantum.spin": [[178, "module-sympy.physics.quantum.spin"]], "uncouple() (in module sympy.physics.quantum.spin)": [[178, "sympy.physics.quantum.spin.uncouple"]], "bra (class in sympy.physics.quantum.state)": [[179, "sympy.physics.quantum.state.Bra"]], "brabase (class in sympy.physics.quantum.state)": [[179, "sympy.physics.quantum.state.BraBase"]], "ket (class in sympy.physics.quantum.state)": [[179, "sympy.physics.quantum.state.Ket"]], "ketbase (class in sympy.physics.quantum.state)": [[179, "sympy.physics.quantum.state.KetBase"]], "orthogonalbra (class in sympy.physics.quantum.state)": [[179, "sympy.physics.quantum.state.OrthogonalBra"]], "orthogonalket (class in sympy.physics.quantum.state)": [[179, "sympy.physics.quantum.state.OrthogonalKet"]], "orthogonalstate (class in sympy.physics.quantum.state)": [[179, "sympy.physics.quantum.state.OrthogonalState"]], "state (class in sympy.physics.quantum.state)": [[179, "sympy.physics.quantum.state.State"]], "statebase (class in sympy.physics.quantum.state)": [[179, "sympy.physics.quantum.state.StateBase"]], "timedepbra (class in sympy.physics.quantum.state)": [[179, "sympy.physics.quantum.state.TimeDepBra"]], "timedepket (class in sympy.physics.quantum.state)": [[179, "sympy.physics.quantum.state.TimeDepKet"]], "timedepstate (class in sympy.physics.quantum.state)": [[179, "sympy.physics.quantum.state.TimeDepState"]], "wavefunction (class in sympy.physics.quantum.state)": [[179, "sympy.physics.quantum.state.Wavefunction"]], "dual (sympy.physics.quantum.state.statebase property)": [[179, "sympy.physics.quantum.state.StateBase.dual"]], "dual_class() (sympy.physics.quantum.state.statebase class method)": [[179, "sympy.physics.quantum.state.StateBase.dual_class"]], "expr (sympy.physics.quantum.state.wavefunction property)": [[179, "sympy.physics.quantum.state.Wavefunction.expr"]], "is_commutative (sympy.physics.quantum.state.wavefunction property)": [[179, "sympy.physics.quantum.state.Wavefunction.is_commutative"]], "is_normalized (sympy.physics.quantum.state.wavefunction property)": [[179, "sympy.physics.quantum.state.Wavefunction.is_normalized"]], "label (sympy.physics.quantum.state.timedepstate property)": [[179, "sympy.physics.quantum.state.TimeDepState.label"]], "limits (sympy.physics.quantum.state.wavefunction property)": [[179, "sympy.physics.quantum.state.Wavefunction.limits"]], "norm (sympy.physics.quantum.state.wavefunction property)": [[179, "sympy.physics.quantum.state.Wavefunction.norm"]], "normalize() (sympy.physics.quantum.state.wavefunction method)": [[179, "sympy.physics.quantum.state.Wavefunction.normalize"]], "operators (sympy.physics.quantum.state.statebase property)": [[179, "sympy.physics.quantum.state.StateBase.operators"]], "prob() (sympy.physics.quantum.state.wavefunction method)": [[179, "sympy.physics.quantum.state.Wavefunction.prob"]], "sympy.physics.quantum.state": [[179, "module-sympy.physics.quantum.state"]], "time (sympy.physics.quantum.state.timedepstate property)": [[179, "sympy.physics.quantum.state.TimeDepState.time"]], "variables (sympy.physics.quantum.state.wavefunction property)": [[179, "sympy.physics.quantum.state.Wavefunction.variables"]], "tensorproduct (class in sympy.physics.quantum.tensorproduct)": [[180, "sympy.physics.quantum.tensorproduct.TensorProduct"]], "sympy.physics.quantum.tensorproduct": [[180, "module-sympy.physics.quantum.tensorproduct"]], "tensor_product_simp() (in module sympy.physics.quantum.tensorproduct)": [[180, "sympy.physics.quantum.tensorproduct.tensor_product_simp"]], "annihilateboson (class in sympy.physics.secondquant)": [[181, "sympy.physics.secondquant.AnnihilateBoson"]], "annihilatefermion (class in sympy.physics.secondquant)": [[181, "sympy.physics.secondquant.AnnihilateFermion"]], "antisymmetrictensor (class in sympy.physics.secondquant)": [[181, "sympy.physics.secondquant.AntiSymmetricTensor"]], "b (in module sympy.physics.secondquant)": [[181, "sympy.physics.secondquant.B"]], "bbra (in module sympy.physics.secondquant)": [[181, "sympy.physics.secondquant.BBra"]], "bket (in module sympy.physics.secondquant)": [[181, "sympy.physics.secondquant.BKet"]], "bd (in module sympy.physics.secondquant)": [[181, "sympy.physics.secondquant.Bd"]], "bosonicbasis (class in sympy.physics.secondquant)": [[181, "sympy.physics.secondquant.BosonicBasis"]], "commutator (class in sympy.physics.secondquant)": [[181, "sympy.physics.secondquant.Commutator"]], "createboson (class in sympy.physics.secondquant)": [[181, "sympy.physics.secondquant.CreateBoson"]], "createfermion (class in sympy.physics.secondquant)": [[181, "sympy.physics.secondquant.CreateFermion"]], "dagger (class in sympy.physics.secondquant)": [[181, "sympy.physics.secondquant.Dagger"]], "f (in module sympy.physics.secondquant)": [[181, "sympy.physics.secondquant.F"]], "fbra (in module sympy.physics.secondquant)": [[181, "sympy.physics.secondquant.FBra"]], "fket (in module sympy.physics.secondquant)": [[181, "sympy.physics.secondquant.FKet"]], "fd (in module sympy.physics.secondquant)": [[181, "sympy.physics.secondquant.Fd"]], "fixedbosonicbasis (class in sympy.physics.secondquant)": [[181, "sympy.physics.secondquant.FixedBosonicBasis"]], "fockstate (class in sympy.physics.secondquant)": [[181, "sympy.physics.secondquant.FockState"]], "fockstatebosonbra (class in sympy.physics.secondquant)": [[181, "sympy.physics.secondquant.FockStateBosonBra"]], "fockstatebosonket (class in sympy.physics.secondquant)": [[181, "sympy.physics.secondquant.FockStateBosonKet"]], "fockstatebra (class in sympy.physics.secondquant)": [[181, "sympy.physics.secondquant.FockStateBra"]], "fockstatefermionbra (class in sympy.physics.secondquant)": [[181, "sympy.physics.secondquant.FockStateFermionBra"]], "fockstatefermionket (class in sympy.physics.secondquant)": [[181, "sympy.physics.secondquant.FockStateFermionKet"]], "fockstateket (class in sympy.physics.secondquant)": [[181, "sympy.physics.secondquant.FockStateKet"]], "innerproduct (class in sympy.physics.secondquant)": [[181, "sympy.physics.secondquant.InnerProduct"]], "kroneckerdelta (class in sympy.physics.secondquant)": [[181, "sympy.physics.secondquant.KroneckerDelta"]], "no (class in sympy.physics.secondquant)": [[181, "sympy.physics.secondquant.NO"]], "permutationoperator (class in sympy.physics.secondquant)": [[181, "sympy.physics.secondquant.PermutationOperator"]], "varbosonicbasis (class in sympy.physics.secondquant)": [[181, "sympy.physics.secondquant.VarBosonicBasis"]], "apply_operator() (sympy.physics.secondquant.annihilateboson method)": [[181, "sympy.physics.secondquant.AnnihilateBoson.apply_operator"]], "apply_operator() (sympy.physics.secondquant.annihilatefermion method)": [[181, "sympy.physics.secondquant.AnnihilateFermion.apply_operator"]], "apply_operator() (sympy.physics.secondquant.createboson method)": [[181, "sympy.physics.secondquant.CreateBoson.apply_operator"]], "apply_operator() (sympy.physics.secondquant.createfermion method)": [[181, "sympy.physics.secondquant.CreateFermion.apply_operator"]], "apply_operators() (in module sympy.physics.secondquant)": [[181, "sympy.physics.secondquant.apply_operators"]], "bra (sympy.physics.secondquant.innerproduct property)": [[181, "sympy.physics.secondquant.InnerProduct.bra"]], "contraction() (in module sympy.physics.secondquant)": [[181, "sympy.physics.secondquant.contraction"]], "doit() (sympy.physics.secondquant.commutator method)": [[181, "sympy.physics.secondquant.Commutator.doit"]], "doit() (sympy.physics.secondquant.no method)": [[181, "sympy.physics.secondquant.NO.doit"]], "eval() (sympy.physics.secondquant.commutator class method)": [[181, "sympy.physics.secondquant.Commutator.eval"]], "eval() (sympy.physics.secondquant.dagger class method)": [[181, "sympy.physics.secondquant.Dagger.eval"]], "eval() (sympy.physics.secondquant.kroneckerdelta class method)": [[181, "sympy.physics.secondquant.KroneckerDelta.eval"]], "evaluate_deltas() (in module sympy.physics.secondquant)": [[181, "sympy.physics.secondquant.evaluate_deltas"]], "get_permuted() (sympy.physics.secondquant.permutationoperator method)": [[181, "sympy.physics.secondquant.PermutationOperator.get_permuted"]], "get_subno() (sympy.physics.secondquant.no method)": [[181, "sympy.physics.secondquant.NO.get_subNO"]], "has_q_annihilators (sympy.physics.secondquant.no property)": [[181, "sympy.physics.secondquant.NO.has_q_annihilators"]], "has_q_creators (sympy.physics.secondquant.no property)": [[181, "sympy.physics.secondquant.NO.has_q_creators"]], "index() (sympy.physics.secondquant.fixedbosonicbasis method)": [[181, "sympy.physics.secondquant.FixedBosonicBasis.index"]], "index() (sympy.physics.secondquant.varbosonicbasis method)": [[181, "sympy.physics.secondquant.VarBosonicBasis.index"]], "indices_contain_equal_information (sympy.physics.secondquant.kroneckerdelta property)": [[181, "sympy.physics.secondquant.KroneckerDelta.indices_contain_equal_information"]], "is_above_fermi (sympy.physics.secondquant.kroneckerdelta property)": [[181, "sympy.physics.secondquant.KroneckerDelta.is_above_fermi"]], "is_below_fermi (sympy.physics.secondquant.kroneckerdelta property)": [[181, "sympy.physics.secondquant.KroneckerDelta.is_below_fermi"]], "is_only_above_fermi (sympy.physics.secondquant.kroneckerdelta property)": [[181, "sympy.physics.secondquant.KroneckerDelta.is_only_above_fermi"]], "is_only_below_fermi (sympy.physics.secondquant.kroneckerdelta property)": [[181, "sympy.physics.secondquant.KroneckerDelta.is_only_below_fermi"]], "is_only_q_annihilator (sympy.physics.secondquant.annihilatefermion property)": [[181, "sympy.physics.secondquant.AnnihilateFermion.is_only_q_annihilator"]], "is_only_q_annihilator (sympy.physics.secondquant.createfermion property)": [[181, "sympy.physics.secondquant.CreateFermion.is_only_q_annihilator"]], "is_only_q_creator (sympy.physics.secondquant.annihilatefermion property)": [[181, "sympy.physics.secondquant.AnnihilateFermion.is_only_q_creator"]], "is_only_q_creator (sympy.physics.secondquant.createfermion property)": [[181, "sympy.physics.secondquant.CreateFermion.is_only_q_creator"]], "is_q_annihilator (sympy.physics.secondquant.annihilatefermion property)": [[181, "sympy.physics.secondquant.AnnihilateFermion.is_q_annihilator"]], "is_q_annihilator (sympy.physics.secondquant.createfermion property)": [[181, "sympy.physics.secondquant.CreateFermion.is_q_annihilator"]], "is_q_creator (sympy.physics.secondquant.annihilatefermion property)": [[181, "sympy.physics.secondquant.AnnihilateFermion.is_q_creator"]], "is_q_creator (sympy.physics.secondquant.createfermion property)": [[181, "sympy.physics.secondquant.CreateFermion.is_q_creator"]], "iter_q_annihilators() (sympy.physics.secondquant.no method)": [[181, "sympy.physics.secondquant.NO.iter_q_annihilators"]], "iter_q_creators() (sympy.physics.secondquant.no method)": [[181, "sympy.physics.secondquant.NO.iter_q_creators"]], "ket (sympy.physics.secondquant.innerproduct property)": [[181, "sympy.physics.secondquant.InnerProduct.ket"]], "killable_index (sympy.physics.secondquant.kroneckerdelta property)": [[181, "sympy.physics.secondquant.KroneckerDelta.killable_index"]], "lower (sympy.physics.secondquant.antisymmetrictensor property)": [[181, "sympy.physics.secondquant.AntiSymmetricTensor.lower"]], "matrix_rep() (in module sympy.physics.secondquant)": [[181, "sympy.physics.secondquant.matrix_rep"]], "preferred_index (sympy.physics.secondquant.kroneckerdelta property)": [[181, "sympy.physics.secondquant.KroneckerDelta.preferred_index"]], "simplify_index_permutations() (in module sympy.physics.secondquant)": [[181, "sympy.physics.secondquant.simplify_index_permutations"]], "state() (sympy.physics.secondquant.fixedbosonicbasis method)": [[181, "sympy.physics.secondquant.FixedBosonicBasis.state"]], "state() (sympy.physics.secondquant.varbosonicbasis method)": [[181, "sympy.physics.secondquant.VarBosonicBasis.state"]], "substitute_dummies() (in module sympy.physics.secondquant)": [[181, "sympy.physics.secondquant.substitute_dummies"]], "symbol (sympy.physics.secondquant.antisymmetrictensor property)": [[181, "sympy.physics.secondquant.AntiSymmetricTensor.symbol"]], "sympy.physics.secondquant": [[181, "module-sympy.physics.secondquant"]], "upper (sympy.physics.secondquant.antisymmetrictensor property)": [[181, "sympy.physics.secondquant.AntiSymmetricTensor.upper"]], "wicks() (in module sympy.physics.secondquant)": [[181, "sympy.physics.secondquant.wicks"]], "e_nl() (in module sympy.physics.sho)": [[182, "sympy.physics.sho.E_nl"]], "r_nl() (in module sympy.physics.sho)": [[182, "sympy.physics.sho.R_nl"]], "sympy.physics.sho": [[182, "module-sympy.physics.sho"]], "dimension (class in sympy.physics.units.dimensions)": [[183, "sympy.physics.units.dimensions.Dimension"]], "dimensionsystem (class in sympy.physics.units.dimensions)": [[183, "sympy.physics.units.dimensions.DimensionSystem"]], "can_transf_matrix (sympy.physics.units.dimensions.dimensionsystem property)": [[183, "sympy.physics.units.dimensions.DimensionSystem.can_transf_matrix"]], "dim (sympy.physics.units.dimensions.dimensionsystem property)": [[183, "sympy.physics.units.dimensions.DimensionSystem.dim"]], "dim_can_vector() (sympy.physics.units.dimensions.dimensionsystem method)": [[183, "sympy.physics.units.dimensions.DimensionSystem.dim_can_vector"]], "dim_vector() (sympy.physics.units.dimensions.dimensionsystem method)": [[183, "sympy.physics.units.dimensions.DimensionSystem.dim_vector"]], "has_integer_powers() (sympy.physics.units.dimensions.dimension method)": [[183, "sympy.physics.units.dimensions.Dimension.has_integer_powers"]], "inv_can_transf_matrix (sympy.physics.units.dimensions.dimensionsystem property)": [[183, "sympy.physics.units.dimensions.DimensionSystem.inv_can_transf_matrix"]], "is_consistent (sympy.physics.units.dimensions.dimensionsystem property)": [[183, "sympy.physics.units.dimensions.DimensionSystem.is_consistent"]], "is_dimensionless() (sympy.physics.units.dimensions.dimensionsystem method)": [[183, "sympy.physics.units.dimensions.DimensionSystem.is_dimensionless"]], "list_can_dims (sympy.physics.units.dimensions.dimensionsystem property)": [[183, "sympy.physics.units.dimensions.DimensionSystem.list_can_dims"]], "print_dim_base() (sympy.physics.units.dimensions.dimensionsystem method)": [[183, "sympy.physics.units.dimensions.DimensionSystem.print_dim_base"]], "sympy.physics.units.dimensions": [[183, "module-sympy.physics.units.dimensions"]], "prefix (class in sympy.physics.units.prefixes)": [[187, "sympy.physics.units.prefixes.Prefix"]], "sympy.physics.units.prefixes": [[187, "module-sympy.physics.units.prefixes"]], "quantity (class in sympy.physics.units.quantities)": [[188, "sympy.physics.units.quantities.Quantity"]], "abbrev (sympy.physics.units.quantities.quantity property)": [[188, "sympy.physics.units.quantities.Quantity.abbrev"]], "convert_to() (in module sympy.physics.units.util)": [[188, "sympy.physics.units.util.convert_to"]], "convert_to() (sympy.physics.units.quantities.quantity method)": [[188, "sympy.physics.units.quantities.Quantity.convert_to"]], "free_symbols (sympy.physics.units.quantities.quantity property)": [[188, "sympy.physics.units.quantities.Quantity.free_symbols"]], "is_prefixed (sympy.physics.units.quantities.quantity property)": [[188, "sympy.physics.units.quantities.Quantity.is_prefixed"]], "scale_factor (sympy.physics.units.quantities.quantity property)": [[188, "sympy.physics.units.quantities.Quantity.scale_factor"]], "set_global_relative_scale_factor() (sympy.physics.units.quantities.quantity method)": [[188, "sympy.physics.units.quantities.Quantity.set_global_relative_scale_factor"]], "sympy.physics.units.quantities": [[188, "module-sympy.physics.units.quantities"]], "sympy.physics.units.util": [[188, "module-sympy.physics.units.util"]], "unitsystem (class in sympy.physics.units.unitsystem)": [[189, "sympy.physics.units.unitsystem.UnitSystem"]], "dim (sympy.physics.units.unitsystem.unitsystem property)": [[189, "sympy.physics.units.unitsystem.UnitSystem.dim"]], "extend() (sympy.physics.units.unitsystem.unitsystem method)": [[189, "sympy.physics.units.unitsystem.UnitSystem.extend"]], "get_units_non_prefixed() (sympy.physics.units.unitsystem.unitsystem method)": [[189, "sympy.physics.units.unitsystem.UnitSystem.get_units_non_prefixed"]], "is_consistent (sympy.physics.units.unitsystem.unitsystem property)": [[189, "sympy.physics.units.unitsystem.UnitSystem.is_consistent"]], "sympy.physics.units.unitsystem": [[189, "module-sympy.physics.units.unitsystem"]], "coordinatesym (class in sympy.physics.vector.frame)": [[191, "sympy.physics.vector.frame.CoordinateSym"]], "dyadic (class in sympy.physics.vector.dyadic)": [[191, "sympy.physics.vector.dyadic.Dyadic"]], "referenceframe (class in sympy.physics.vector.frame)": [[191, "sympy.physics.vector.frame.ReferenceFrame"]], "vector (class in sympy.physics.vector.vector)": [[191, "sympy.physics.vector.vector.Vector"]], "ang_acc_in() (sympy.physics.vector.frame.referenceframe method)": [[191, "sympy.physics.vector.frame.ReferenceFrame.ang_acc_in"]], "ang_vel_in() (sympy.physics.vector.frame.referenceframe method)": [[191, "sympy.physics.vector.frame.ReferenceFrame.ang_vel_in"]], "angle_between() (sympy.physics.vector.vector.vector method)": [[191, "sympy.physics.vector.vector.Vector.angle_between"]], "applyfunc() (sympy.physics.vector.dyadic.dyadic method)": [[191, "sympy.physics.vector.dyadic.Dyadic.applyfunc"]], "applyfunc() (sympy.physics.vector.vector.vector method)": [[191, "sympy.physics.vector.vector.Vector.applyfunc"]], "cross() (sympy.physics.vector.dyadic.dyadic method)": [[191, "sympy.physics.vector.dyadic.Dyadic.cross"]], "cross() (sympy.physics.vector.vector.vector method)": [[191, "sympy.physics.vector.vector.Vector.cross"]], "dcm() (sympy.physics.vector.frame.referenceframe method)": [[191, "sympy.physics.vector.frame.ReferenceFrame.dcm"]], "diff() (sympy.physics.vector.vector.vector method)": [[191, "sympy.physics.vector.vector.Vector.diff"]], "doit() (sympy.physics.vector.dyadic.dyadic method)": [[191, "sympy.physics.vector.dyadic.Dyadic.doit"]], "doit() (sympy.physics.vector.vector.vector method)": [[191, "sympy.physics.vector.vector.Vector.doit"]], "dot() (sympy.physics.vector.dyadic.dyadic method)": [[191, "sympy.physics.vector.dyadic.Dyadic.dot"]], "dot() (sympy.physics.vector.vector.vector method)": [[191, "sympy.physics.vector.vector.Vector.dot"]], "dt() (sympy.physics.vector.dyadic.dyadic method)": [[191, "sympy.physics.vector.dyadic.Dyadic.dt"]], "dt() (sympy.physics.vector.vector.vector method)": [[191, "sympy.physics.vector.vector.Vector.dt"]], "express() (sympy.physics.vector.dyadic.dyadic method)": [[191, "sympy.physics.vector.dyadic.Dyadic.express"]], "express() (sympy.physics.vector.vector.vector method)": [[191, "sympy.physics.vector.vector.Vector.express"]], "free_dynamicsymbols() (sympy.physics.vector.vector.vector method)": [[191, "sympy.physics.vector.vector.Vector.free_dynamicsymbols"]], "free_symbols() (sympy.physics.vector.vector.vector method)": [[191, "sympy.physics.vector.vector.Vector.free_symbols"]], "func (sympy.physics.vector.dyadic.dyadic property)": [[191, "sympy.physics.vector.dyadic.Dyadic.func"]], "func (sympy.physics.vector.vector.vector property)": [[191, "sympy.physics.vector.vector.Vector.func"]], "magnitude() (sympy.physics.vector.vector.vector method)": [[191, "sympy.physics.vector.vector.Vector.magnitude"]], "normalize() (sympy.physics.vector.vector.vector method)": [[191, "sympy.physics.vector.vector.Vector.normalize"]], "orient() (sympy.physics.vector.frame.referenceframe method)": [[191, "sympy.physics.vector.frame.ReferenceFrame.orient"]], "orient_axis() (sympy.physics.vector.frame.referenceframe method)": [[191, "sympy.physics.vector.frame.ReferenceFrame.orient_axis"]], "orient_body_fixed() (sympy.physics.vector.frame.referenceframe method)": [[191, "sympy.physics.vector.frame.ReferenceFrame.orient_body_fixed"]], "orient_explicit() (sympy.physics.vector.frame.referenceframe method)": [[191, "sympy.physics.vector.frame.ReferenceFrame.orient_explicit"]], "orient_quaternion() (sympy.physics.vector.frame.referenceframe method)": [[191, "sympy.physics.vector.frame.ReferenceFrame.orient_quaternion"]], "orient_space_fixed() (sympy.physics.vector.frame.referenceframe method)": [[191, "sympy.physics.vector.frame.ReferenceFrame.orient_space_fixed"]], "orientnew() (sympy.physics.vector.frame.referenceframe method)": [[191, "sympy.physics.vector.frame.ReferenceFrame.orientnew"]], "outer() (sympy.physics.vector.vector.vector method)": [[191, "sympy.physics.vector.vector.Vector.outer"]], "partial_velocity() (sympy.physics.vector.frame.referenceframe method)": [[191, "sympy.physics.vector.frame.ReferenceFrame.partial_velocity"]], "separate() (sympy.physics.vector.vector.vector method)": [[191, "sympy.physics.vector.vector.Vector.separate"]], "set_ang_acc() (sympy.physics.vector.frame.referenceframe method)": [[191, "sympy.physics.vector.frame.ReferenceFrame.set_ang_acc"]], "set_ang_vel() (sympy.physics.vector.frame.referenceframe method)": [[191, "sympy.physics.vector.frame.ReferenceFrame.set_ang_vel"]], "simplify() (sympy.physics.vector.dyadic.dyadic method)": [[191, "sympy.physics.vector.dyadic.Dyadic.simplify"]], "simplify() (sympy.physics.vector.vector.vector method)": [[191, "sympy.physics.vector.vector.Vector.simplify"]], "subs() (sympy.physics.vector.dyadic.dyadic method)": [[191, "sympy.physics.vector.dyadic.Dyadic.subs"]], "subs() (sympy.physics.vector.vector.vector method)": [[191, "sympy.physics.vector.vector.Vector.subs"]], "to_matrix() (sympy.physics.vector.dyadic.dyadic method)": [[191, "sympy.physics.vector.dyadic.Dyadic.to_matrix"]], "to_matrix() (sympy.physics.vector.vector.vector method)": [[191, "sympy.physics.vector.vector.Vector.to_matrix"]], "u (sympy.physics.vector.frame.referenceframe property)": [[191, "sympy.physics.vector.frame.ReferenceFrame.u"]], "variable_map() (sympy.physics.vector.frame.referenceframe method)": [[191, "sympy.physics.vector.frame.ReferenceFrame.variable_map"]], "x (sympy.physics.vector.frame.referenceframe property)": [[191, "sympy.physics.vector.frame.ReferenceFrame.x"]], "xreplace() (sympy.physics.vector.dyadic.dyadic method)": [[191, "sympy.physics.vector.dyadic.Dyadic.xreplace"]], "xreplace() (sympy.physics.vector.vector.vector method)": [[191, "sympy.physics.vector.vector.Vector.xreplace"]], "xx (sympy.physics.vector.frame.referenceframe property)": [[191, "sympy.physics.vector.frame.ReferenceFrame.xx"]], "xy (sympy.physics.vector.frame.referenceframe property)": [[191, "sympy.physics.vector.frame.ReferenceFrame.xy"]], "xz (sympy.physics.vector.frame.referenceframe property)": [[191, "sympy.physics.vector.frame.ReferenceFrame.xz"]], "y (sympy.physics.vector.frame.referenceframe property)": [[191, "sympy.physics.vector.frame.ReferenceFrame.y"]], "yx (sympy.physics.vector.frame.referenceframe property)": [[191, "sympy.physics.vector.frame.ReferenceFrame.yx"]], "yy (sympy.physics.vector.frame.referenceframe property)": [[191, "sympy.physics.vector.frame.ReferenceFrame.yy"]], "yz (sympy.physics.vector.frame.referenceframe property)": [[191, "sympy.physics.vector.frame.ReferenceFrame.yz"]], "z (sympy.physics.vector.frame.referenceframe property)": [[191, "sympy.physics.vector.frame.ReferenceFrame.z"]], "zx (sympy.physics.vector.frame.referenceframe property)": [[191, "sympy.physics.vector.frame.ReferenceFrame.zx"]], "zy (sympy.physics.vector.frame.referenceframe property)": [[191, "sympy.physics.vector.frame.ReferenceFrame.zy"]], "zz (sympy.physics.vector.frame.referenceframe property)": [[191, "sympy.physics.vector.frame.ReferenceFrame.zz"]], "curl() (in module sympy.physics.vector.fieldfunctions)": [[192, "sympy.physics.vector.fieldfunctions.curl"]], "divergence() (in module sympy.physics.vector.fieldfunctions)": [[192, "sympy.physics.vector.fieldfunctions.divergence"]], "gradient() (in module sympy.physics.vector.fieldfunctions)": [[192, "sympy.physics.vector.fieldfunctions.gradient"]], "is_conservative() (in module sympy.physics.vector.fieldfunctions)": [[192, "sympy.physics.vector.fieldfunctions.is_conservative"]], "is_solenoidal() (in module sympy.physics.vector.fieldfunctions)": [[192, "sympy.physics.vector.fieldfunctions.is_solenoidal"]], "scalar_potential() (in module sympy.physics.vector.fieldfunctions)": [[192, "sympy.physics.vector.fieldfunctions.scalar_potential"]], "scalar_potential_difference() (in module sympy.physics.vector.fieldfunctions)": [[192, "sympy.physics.vector.fieldfunctions.scalar_potential_difference"]], "cross() (in module sympy.physics.vector.functions)": [[193, "sympy.physics.vector.functions.cross"]], "dot() (in module sympy.physics.vector.functions)": [[193, "sympy.physics.vector.functions.dot"]], "dynamicsymbols() (in module sympy.physics.vector)": [[193, "sympy.physics.vector.dynamicsymbols"]], "express() (in module sympy.physics.vector.functions)": [[193, "sympy.physics.vector.functions.express"]], "outer() (in module sympy.physics.vector.functions)": [[193, "sympy.physics.vector.functions.outer"]], "time_derivative() (in module sympy.physics.vector.functions)": [[193, "sympy.physics.vector.functions.time_derivative"]], "point (class in sympy.physics.vector.point)": [[195, "sympy.physics.vector.point.Point"]], "a1pt_theory() (sympy.physics.vector.point.point method)": [[195, "sympy.physics.vector.point.Point.a1pt_theory"]], "a2pt_theory() (sympy.physics.vector.point.point method)": [[195, "sympy.physics.vector.point.Point.a2pt_theory"]], "acc() (sympy.physics.vector.point.point method)": [[195, "sympy.physics.vector.point.Point.acc"]], "get_motion_params() (in module sympy.physics.vector.functions)": [[195, "sympy.physics.vector.functions.get_motion_params"]], "kinematic_equations() (in module sympy.physics.vector.functions)": [[195, "sympy.physics.vector.functions.kinematic_equations"]], "locatenew() (sympy.physics.vector.point.point method)": [[195, "sympy.physics.vector.point.Point.locatenew"]], "partial_velocity() (in module sympy.physics.vector.functions)": [[195, "sympy.physics.vector.functions.partial_velocity"]], "partial_velocity() (sympy.physics.vector.point.point method)": [[195, "sympy.physics.vector.point.Point.partial_velocity"]], "pos_from() (sympy.physics.vector.point.point method)": [[195, "sympy.physics.vector.point.Point.pos_from"]], "set_acc() (sympy.physics.vector.point.point method)": [[195, "sympy.physics.vector.point.Point.set_acc"]], "set_pos() (sympy.physics.vector.point.point method)": [[195, "sympy.physics.vector.point.Point.set_pos"]], "set_vel() (sympy.physics.vector.point.point method)": [[195, "sympy.physics.vector.point.Point.set_vel"]], "sympy.physics.vector.functions": [[195, "module-sympy.physics.vector.functions"]], "sympy.physics.vector.point": [[195, "module-sympy.physics.vector.point"]], "v1pt_theory() (sympy.physics.vector.point.point method)": [[195, "sympy.physics.vector.point.Point.v1pt_theory"]], "v2pt_theory() (sympy.physics.vector.point.point method)": [[195, "sympy.physics.vector.point.Point.v2pt_theory"]], "vel() (sympy.physics.vector.point.point method)": [[195, "sympy.physics.vector.point.Point.vel"]], "init_vprinting() (in module sympy.physics.vector.printing)": [[196, "sympy.physics.vector.printing.init_vprinting"]], "vlatex() (in module sympy.physics.vector.printing)": [[196, "sympy.physics.vector.printing.vlatex"]], "vpprint() (in module sympy.physics.vector.printing)": [[196, "sympy.physics.vector.printing.vpprint"]], "vprint() (in module sympy.physics.vector.printing)": [[196, "sympy.physics.vector.printing.vprint"]], "sympy.physics.vector": [[198, "module-sympy.physics.vector"]], "clebsch_gordan() (in module sympy.physics.wigner)": [[201, "sympy.physics.wigner.clebsch_gordan"]], "dot_rot_grad_ynm() (in module sympy.physics.wigner)": [[201, "sympy.physics.wigner.dot_rot_grad_Ynm"]], "gaunt() (in module sympy.physics.wigner)": [[201, "sympy.physics.wigner.gaunt"]], "racah() (in module sympy.physics.wigner)": [[201, "sympy.physics.wigner.racah"]], "real_gaunt() (in module sympy.physics.wigner)": [[201, "sympy.physics.wigner.real_gaunt"]], "sympy.physics.wigner": [[201, "module-sympy.physics.wigner"]], "wigner_3j() (in module sympy.physics.wigner)": [[201, "sympy.physics.wigner.wigner_3j"]], "wigner_6j() (in module sympy.physics.wigner)": [[201, "sympy.physics.wigner.wigner_6j"]], "wigner_9j() (in module sympy.physics.wigner)": [[201, "sympy.physics.wigner.wigner_9j"]], "wigner_d() (in module sympy.physics.wigner)": [[201, "sympy.physics.wigner.wigner_d"]], "wigner_d_small() (in module sympy.physics.wigner)": [[201, "sympy.physics.wigner.wigner_d_small"]], "basebackend (class in sympy.plotting.plot)": [[202, "sympy.plotting.plot.BaseBackend"]], "baseseries (class in sympy.plotting.plot)": [[202, "sympy.plotting.plot.BaseSeries"]], "implicitseries (class in sympy.plotting.plot_implicit)": [[202, "sympy.plotting.plot_implicit.ImplicitSeries"]], "line2dbaseseries (class in sympy.plotting.plot)": [[202, "sympy.plotting.plot.Line2DBaseSeries"]], "line3dbaseseries (class in sympy.plotting.plot)": [[202, "sympy.plotting.plot.Line3DBaseSeries"]], "lineover1drangeseries (class in sympy.plotting.plot)": [[202, "sympy.plotting.plot.LineOver1DRangeSeries"]], "matplotlibbackend (class in sympy.plotting.plot)": [[202, "sympy.plotting.plot.MatplotlibBackend"]], "parametric2dlineseries (class in sympy.plotting.plot)": [[202, "sympy.plotting.plot.Parametric2DLineSeries"]], "parametric3dlineseries (class in sympy.plotting.plot)": [[202, "sympy.plotting.plot.Parametric3DLineSeries"]], "parametricsurfaceseries (class in sympy.plotting.plot)": [[202, "sympy.plotting.plot.ParametricSurfaceSeries"]], "plot (class in sympy.plotting.plot)": [[202, "sympy.plotting.plot.Plot"]], "plotgrid (class in sympy.plotting.plot)": [[202, "sympy.plotting.plot.PlotGrid"]], "surfacebaseseries (class in sympy.plotting.plot)": [[202, "sympy.plotting.plot.SurfaceBaseSeries"]], "surfaceover2drangeseries (class in sympy.plotting.plot)": [[202, "sympy.plotting.plot.SurfaceOver2DRangeSeries"]], "textbackend (class in sympy.plotting.plot)": [[202, "sympy.plotting.plot.TextBackend"]], "annotations (sympy.plotting.plot.plot property)": [[202, "sympy.plotting.plot.Plot.annotations"]], "append() (sympy.plotting.plot.plot method)": [[202, "sympy.plotting.plot.Plot.append"]], "extend() (sympy.plotting.plot.plot method)": [[202, "sympy.plotting.plot.Plot.extend"]], "fill (sympy.plotting.plot.plot property)": [[202, "sympy.plotting.plot.Plot.fill"]], "get_data() (sympy.plotting.plot.line2dbaseseries method)": [[202, "sympy.plotting.plot.Line2DBaseSeries.get_data"]], "get_points() (sympy.plotting.plot.lineover1drangeseries method)": [[202, "sympy.plotting.plot.LineOver1DRangeSeries.get_points"]], "get_points() (sympy.plotting.plot.parametric2dlineseries method)": [[202, "sympy.plotting.plot.Parametric2DLineSeries.get_points"]], "get_segments() (sympy.plotting.plot.matplotlibbackend static method)": [[202, "sympy.plotting.plot.MatplotlibBackend.get_segments"]], "markers (sympy.plotting.plot.plot property)": [[202, "sympy.plotting.plot.Plot.markers"]], "plot() (in module sympy.plotting.plot)": [[202, "sympy.plotting.plot.plot"]], "plot3d() (in module sympy.plotting.plot)": [[202, "sympy.plotting.plot.plot3d"]], "plot3d_parametric_line() (in module sympy.plotting.plot)": [[202, "sympy.plotting.plot.plot3d_parametric_line"]], "plot3d_parametric_surface() (in module sympy.plotting.plot)": [[202, "sympy.plotting.plot.plot3d_parametric_surface"]], "plot_implicit() (in module sympy.plotting.plot_implicit)": [[202, "sympy.plotting.plot_implicit.plot_implicit"]], "plot_parametric() (in module sympy.plotting.plot)": [[202, "sympy.plotting.plot.plot_parametric"]], "process_series() (sympy.plotting.plot.matplotlibbackend method)": [[202, "sympy.plotting.plot.MatplotlibBackend.process_series"]], "rectangles (sympy.plotting.plot.plot property)": [[202, "sympy.plotting.plot.Plot.rectangles"]], "sympy.plotting.plot": [[202, "module-sympy.plotting.plot"]], "sympy.plotting.pygletplot": [[202, "module-sympy.plotting.pygletplot"]], "textplot() (in module sympy.plotting.textplot)": [[202, "sympy.plotting.textplot.textplot"]], "extensionelement (class in sympy.polys.agca.extensions)": [[203, "sympy.polys.agca.extensions.ExtensionElement"]], "freemodule (class in sympy.polys.agca.modules)": [[203, "sympy.polys.agca.modules.FreeModule"]], "freemoduleelement (class in sympy.polys.agca.modules)": [[203, "sympy.polys.agca.modules.FreeModuleElement"]], "ideal (class in sympy.polys.agca.ideals)": [[203, "sympy.polys.agca.ideals.Ideal"]], "module (class in sympy.polys.agca.modules)": [[203, "sympy.polys.agca.modules.Module"]], "modulehomomorphism (class in sympy.polys.agca.homomorphisms)": [[203, "sympy.polys.agca.homomorphisms.ModuleHomomorphism"]], "monogenicfiniteextension (class in sympy.polys.agca.extensions)": [[203, "sympy.polys.agca.extensions.MonogenicFiniteExtension"]], "quotientmodule (class in sympy.polys.agca.modules)": [[203, "sympy.polys.agca.modules.QuotientModule"]], "quotientmoduleelement (class in sympy.polys.agca.modules)": [[203, "sympy.polys.agca.modules.QuotientModuleElement"]], "submodule (class in sympy.polys.agca.modules)": [[203, "sympy.polys.agca.modules.SubModule"]], "subquotientmodule (class in sympy.polys.agca.modules)": [[203, "sympy.polys.agca.modules.SubQuotientModule"]], "basis() (sympy.polys.agca.modules.freemodule method)": [[203, "sympy.polys.agca.modules.FreeModule.basis"]], "contains() (sympy.polys.agca.ideals.ideal method)": [[203, "sympy.polys.agca.ideals.Ideal.contains"]], "contains() (sympy.polys.agca.modules.module method)": [[203, "sympy.polys.agca.modules.Module.contains"]], "convert() (sympy.polys.agca.modules.freemodule method)": [[203, "sympy.polys.agca.modules.FreeModule.convert"]], "convert() (sympy.polys.agca.modules.module method)": [[203, "sympy.polys.agca.modules.Module.convert"]], "convert() (sympy.polys.agca.modules.quotientmodule method)": [[203, "sympy.polys.agca.modules.QuotientModule.convert"]], "convert() (sympy.polys.agca.modules.submodule method)": [[203, "sympy.polys.agca.modules.SubModule.convert"]], "depth() (sympy.polys.agca.ideals.ideal method)": [[203, "sympy.polys.agca.ideals.Ideal.depth"]], "dtype (sympy.polys.agca.extensions.monogenicfiniteextension attribute)": [[203, "sympy.polys.agca.extensions.MonogenicFiniteExtension.dtype"]], "dtype (sympy.polys.agca.modules.freemodule attribute)": [[203, "sympy.polys.agca.modules.FreeModule.dtype"]], "dtype (sympy.polys.agca.modules.quotientmodule attribute)": [[203, "sympy.polys.agca.modules.QuotientModule.dtype"]], "eq() (sympy.polys.agca.modules.quotientmoduleelement method)": [[203, "sympy.polys.agca.modules.QuotientModuleElement.eq"]], "height() (sympy.polys.agca.ideals.ideal method)": [[203, "sympy.polys.agca.ideals.Ideal.height"]], "homomorphism() (in module sympy.polys.agca.homomorphisms)": [[203, "sympy.polys.agca.homomorphisms.homomorphism"]], "identity_hom() (sympy.polys.agca.modules.freemodule method)": [[203, "sympy.polys.agca.modules.FreeModule.identity_hom"]], "identity_hom() (sympy.polys.agca.modules.module method)": [[203, "sympy.polys.agca.modules.Module.identity_hom"]], "identity_hom() (sympy.polys.agca.modules.quotientmodule method)": [[203, "sympy.polys.agca.modules.QuotientModule.identity_hom"]], "identity_hom() (sympy.polys.agca.modules.submodule method)": [[203, "sympy.polys.agca.modules.SubModule.identity_hom"]], "image() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[203, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.image"]], "in_terms_of_generators() (sympy.polys.agca.modules.submodule method)": [[203, "sympy.polys.agca.modules.SubModule.in_terms_of_generators"]], "inclusion_hom() (sympy.polys.agca.modules.submodule method)": [[203, "sympy.polys.agca.modules.SubModule.inclusion_hom"]], "intersect() (sympy.polys.agca.ideals.ideal method)": [[203, "sympy.polys.agca.ideals.Ideal.intersect"]], "intersect() (sympy.polys.agca.modules.submodule method)": [[203, "sympy.polys.agca.modules.SubModule.intersect"]], "inverse() (sympy.polys.agca.extensions.extensionelement method)": [[203, "sympy.polys.agca.extensions.ExtensionElement.inverse"]], "is_full_module() (sympy.polys.agca.modules.submodule method)": [[203, "sympy.polys.agca.modules.SubModule.is_full_module"]], "is_full_module() (sympy.polys.agca.modules.subquotientmodule method)": [[203, "sympy.polys.agca.modules.SubQuotientModule.is_full_module"]], "is_injective() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[203, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.is_injective"]], "is_isomorphism() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[203, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.is_isomorphism"]], "is_maximal() (sympy.polys.agca.ideals.ideal method)": [[203, "sympy.polys.agca.ideals.Ideal.is_maximal"]], "is_primary() (sympy.polys.agca.ideals.ideal method)": [[203, "sympy.polys.agca.ideals.Ideal.is_primary"]], "is_prime() (sympy.polys.agca.ideals.ideal method)": [[203, "sympy.polys.agca.ideals.Ideal.is_prime"]], "is_principal() (sympy.polys.agca.ideals.ideal method)": [[203, "sympy.polys.agca.ideals.Ideal.is_principal"]], "is_radical() (sympy.polys.agca.ideals.ideal method)": [[203, "sympy.polys.agca.ideals.Ideal.is_radical"]], "is_submodule() (sympy.polys.agca.modules.freemodule method)": [[203, "sympy.polys.agca.modules.FreeModule.is_submodule"]], "is_submodule() (sympy.polys.agca.modules.module method)": [[203, "sympy.polys.agca.modules.Module.is_submodule"]], "is_submodule() (sympy.polys.agca.modules.quotientmodule method)": [[203, "sympy.polys.agca.modules.QuotientModule.is_submodule"]], "is_submodule() (sympy.polys.agca.modules.submodule method)": [[203, "sympy.polys.agca.modules.SubModule.is_submodule"]], "is_surjective() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[203, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.is_surjective"]], "is_whole_ring() (sympy.polys.agca.ideals.ideal method)": [[203, "sympy.polys.agca.ideals.Ideal.is_whole_ring"]], "is_zero() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[203, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.is_zero"]], "is_zero() (sympy.polys.agca.ideals.ideal method)": [[203, "sympy.polys.agca.ideals.Ideal.is_zero"]], "is_zero() (sympy.polys.agca.modules.freemodule method)": [[203, "sympy.polys.agca.modules.FreeModule.is_zero"]], "is_zero() (sympy.polys.agca.modules.module method)": [[203, "sympy.polys.agca.modules.Module.is_zero"]], "is_zero() (sympy.polys.agca.modules.quotientmodule method)": [[203, "sympy.polys.agca.modules.QuotientModule.is_zero"]], "is_zero() (sympy.polys.agca.modules.submodule method)": [[203, "sympy.polys.agca.modules.SubModule.is_zero"]], "kernel() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[203, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.kernel"]], "module_quotient() (sympy.polys.agca.modules.submodule method)": [[203, "sympy.polys.agca.modules.SubModule.module_quotient"]], "multiply_ideal() (sympy.polys.agca.modules.freemodule method)": [[203, "sympy.polys.agca.modules.FreeModule.multiply_ideal"]], "multiply_ideal() (sympy.polys.agca.modules.module method)": [[203, "sympy.polys.agca.modules.Module.multiply_ideal"]], "multiply_ideal() (sympy.polys.agca.modules.submodule method)": [[203, "sympy.polys.agca.modules.SubModule.multiply_ideal"]], "product() (sympy.polys.agca.ideals.ideal method)": [[203, "sympy.polys.agca.ideals.Ideal.product"]], "quotient() (sympy.polys.agca.ideals.ideal method)": [[203, "sympy.polys.agca.ideals.Ideal.quotient"]], "quotient_codomain() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[203, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.quotient_codomain"]], "quotient_domain() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[203, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.quotient_domain"]], "quotient_hom() (sympy.polys.agca.modules.quotientmodule method)": [[203, "sympy.polys.agca.modules.QuotientModule.quotient_hom"]], "quotient_hom() (sympy.polys.agca.modules.subquotientmodule method)": [[203, "sympy.polys.agca.modules.SubQuotientModule.quotient_hom"]], "quotient_module() (sympy.polys.agca.modules.freemodule method)": [[203, "sympy.polys.agca.modules.FreeModule.quotient_module"]], "quotient_module() (sympy.polys.agca.modules.module method)": [[203, "sympy.polys.agca.modules.Module.quotient_module"]], "quotient_module() (sympy.polys.agca.modules.submodule method)": [[203, "sympy.polys.agca.modules.SubModule.quotient_module"]], "radical() (sympy.polys.agca.ideals.ideal method)": [[203, "sympy.polys.agca.ideals.Ideal.radical"]], "reduce_element() (sympy.polys.agca.ideals.ideal method)": [[203, "sympy.polys.agca.ideals.Ideal.reduce_element"]], "reduce_element() (sympy.polys.agca.modules.submodule method)": [[203, "sympy.polys.agca.modules.SubModule.reduce_element"]], "restrict_codomain() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[203, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.restrict_codomain"]], "restrict_domain() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[203, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.restrict_domain"]], "saturate() (sympy.polys.agca.ideals.ideal method)": [[203, "sympy.polys.agca.ideals.Ideal.saturate"]], "submodule() (sympy.polys.agca.modules.module method)": [[203, "sympy.polys.agca.modules.Module.submodule"]], "submodule() (sympy.polys.agca.modules.quotientmodule method)": [[203, "sympy.polys.agca.modules.QuotientModule.submodule"]], "submodule() (sympy.polys.agca.modules.submodule method)": [[203, "sympy.polys.agca.modules.SubModule.submodule"]], "subset() (sympy.polys.agca.ideals.ideal method)": [[203, "sympy.polys.agca.ideals.Ideal.subset"]], "subset() (sympy.polys.agca.modules.module method)": [[203, "sympy.polys.agca.modules.Module.subset"]], "syzygy_module() (sympy.polys.agca.modules.submodule method)": [[203, "sympy.polys.agca.modules.SubModule.syzygy_module"]], "union() (sympy.polys.agca.ideals.ideal method)": [[203, "sympy.polys.agca.ideals.Ideal.union"]], "union() (sympy.polys.agca.modules.submodule method)": [[203, "sympy.polys.agca.modules.SubModule.union"]], "ddm (class in sympy.polys.matrices.ddm)": [[205, "sympy.polys.matrices.ddm.DDM"]], "domainmatrix (class in sympy.polys.matrices.domainmatrix)": [[205, "sympy.polys.matrices.domainmatrix.DomainMatrix"]], "sdm (class in sympy.polys.matrices.sdm)": [[205, "sympy.polys.matrices.sdm.SDM"]], "add() (sympy.polys.matrices.ddm.ddm method)": [[205, "sympy.polys.matrices.ddm.DDM.add"]], "add() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[205, "sympy.polys.matrices.domainmatrix.DomainMatrix.add"]], "add() (sympy.polys.matrices.sdm.sdm method)": [[205, "sympy.polys.matrices.sdm.SDM.add"]], "charpoly() (sympy.polys.matrices.ddm.ddm method)": [[205, "sympy.polys.matrices.ddm.DDM.charpoly"]], "charpoly() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[205, "sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly"]], "charpoly() (sympy.polys.matrices.sdm.sdm method)": [[205, "sympy.polys.matrices.sdm.SDM.charpoly"]], "columnspace() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[205, "sympy.polys.matrices.domainmatrix.DomainMatrix.columnspace"]], "convert_to() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[205, "sympy.polys.matrices.domainmatrix.DomainMatrix.convert_to"]], "convert_to() (sympy.polys.matrices.sdm.sdm method)": [[205, "sympy.polys.matrices.sdm.SDM.convert_to"]], "copy() (sympy.polys.matrices.sdm.sdm method)": [[205, "sympy.polys.matrices.sdm.SDM.copy"]], "det() (sympy.polys.matrices.ddm.ddm method)": [[205, "sympy.polys.matrices.ddm.DDM.det"]], "det() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[205, "sympy.polys.matrices.domainmatrix.DomainMatrix.det"]], "det() (sympy.polys.matrices.sdm.sdm method)": [[205, "sympy.polys.matrices.sdm.SDM.det"]], "diag() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[205, "sympy.polys.matrices.domainmatrix.DomainMatrix.diag"]], "eye() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[205, "sympy.polys.matrices.domainmatrix.DomainMatrix.eye"]], "eye() (sympy.polys.matrices.sdm.sdm class method)": [[205, "sympy.polys.matrices.sdm.SDM.eye"]], "from_matrix() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[205, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_Matrix"]], "from_ddm() (sympy.polys.matrices.sdm.sdm class method)": [[205, "sympy.polys.matrices.sdm.SDM.from_ddm"]], "from_dict_sympy() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[205, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_dict_sympy"]], "from_list() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[205, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_list"]], "from_list() (sympy.polys.matrices.sdm.sdm class method)": [[205, "sympy.polys.matrices.sdm.SDM.from_list"]], "from_list_sympy() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[205, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_list_sympy"]], "from_rep() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[205, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_rep"]], "hermite_normal_form() (in module sympy.polys.matrices.normalforms)": [[205, "sympy.polys.matrices.normalforms.hermite_normal_form"]], "hstack() (sympy.polys.matrices.ddm.ddm method)": [[205, "sympy.polys.matrices.ddm.DDM.hstack"]], "hstack() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[205, "sympy.polys.matrices.domainmatrix.DomainMatrix.hstack"]], "hstack() (sympy.polys.matrices.sdm.sdm method)": [[205, "sympy.polys.matrices.sdm.SDM.hstack"]], "inv() (sympy.polys.matrices.ddm.ddm method)": [[205, "sympy.polys.matrices.ddm.DDM.inv"]], "inv() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[205, "sympy.polys.matrices.domainmatrix.DomainMatrix.inv"]], "inv() (sympy.polys.matrices.sdm.sdm method)": [[205, "sympy.polys.matrices.sdm.SDM.inv"]], "is_lower (sympy.polys.matrices.domainmatrix.domainmatrix property)": [[205, "sympy.polys.matrices.domainmatrix.DomainMatrix.is_lower"]], "is_lower() (sympy.polys.matrices.ddm.ddm method)": [[205, "sympy.polys.matrices.ddm.DDM.is_lower"]], "is_lower() (sympy.polys.matrices.sdm.sdm method)": [[205, "sympy.polys.matrices.sdm.SDM.is_lower"]], "is_upper (sympy.polys.matrices.domainmatrix.domainmatrix property)": [[205, "sympy.polys.matrices.domainmatrix.DomainMatrix.is_upper"]], "is_upper() (sympy.polys.matrices.ddm.ddm method)": [[205, "sympy.polys.matrices.ddm.DDM.is_upper"]], "is_upper() (sympy.polys.matrices.sdm.sdm method)": [[205, "sympy.polys.matrices.sdm.SDM.is_upper"]], "is_zero_matrix() (sympy.polys.matrices.ddm.ddm method)": [[205, "sympy.polys.matrices.ddm.DDM.is_zero_matrix"]], "is_zero_matrix() (sympy.polys.matrices.sdm.sdm method)": [[205, "sympy.polys.matrices.sdm.SDM.is_zero_matrix"]], "lll() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[205, "sympy.polys.matrices.domainmatrix.DomainMatrix.lll"]], "lll_transform() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[205, "sympy.polys.matrices.domainmatrix.DomainMatrix.lll_transform"]], "lu() (sympy.polys.matrices.ddm.ddm method)": [[205, "sympy.polys.matrices.ddm.DDM.lu"]], "lu() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[205, "sympy.polys.matrices.domainmatrix.DomainMatrix.lu"]], "lu() (sympy.polys.matrices.sdm.sdm method)": [[205, "sympy.polys.matrices.sdm.SDM.lu"]], "lu_solve() (sympy.polys.matrices.ddm.ddm method)": [[205, "sympy.polys.matrices.ddm.DDM.lu_solve"]], "lu_solve() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[205, "sympy.polys.matrices.domainmatrix.DomainMatrix.lu_solve"]], "lu_solve() (sympy.polys.matrices.sdm.sdm method)": [[205, "sympy.polys.matrices.sdm.SDM.lu_solve"]], "matmul() (sympy.polys.matrices.ddm.ddm method)": [[205, "sympy.polys.matrices.ddm.DDM.matmul"]], "matmul() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[205, "sympy.polys.matrices.domainmatrix.DomainMatrix.matmul"]], "matmul() (sympy.polys.matrices.sdm.sdm method)": [[205, "sympy.polys.matrices.sdm.SDM.matmul"]], "mul() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[205, "sympy.polys.matrices.domainmatrix.DomainMatrix.mul"]], "mul() (sympy.polys.matrices.sdm.sdm method)": [[205, "sympy.polys.matrices.sdm.SDM.mul"]], "neg() (sympy.polys.matrices.ddm.ddm method)": [[205, "sympy.polys.matrices.ddm.DDM.neg"]], "neg() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[205, "sympy.polys.matrices.domainmatrix.DomainMatrix.neg"]], "neg() (sympy.polys.matrices.sdm.sdm method)": [[205, "sympy.polys.matrices.sdm.SDM.neg"]], "new() (sympy.polys.matrices.sdm.sdm class method)": [[205, "sympy.polys.matrices.sdm.SDM.new"]], "nullspace() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[205, "sympy.polys.matrices.domainmatrix.DomainMatrix.nullspace"]], "nullspace() (sympy.polys.matrices.sdm.sdm method)": [[205, "sympy.polys.matrices.sdm.SDM.nullspace"]], "ones() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[205, "sympy.polys.matrices.domainmatrix.DomainMatrix.ones"]], "pow() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[205, "sympy.polys.matrices.domainmatrix.DomainMatrix.pow"]], "rowspace() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[205, "sympy.polys.matrices.domainmatrix.DomainMatrix.rowspace"]], "rref() (sympy.polys.matrices.ddm.ddm method)": [[205, "sympy.polys.matrices.ddm.DDM.rref"]], "rref() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[205, "sympy.polys.matrices.domainmatrix.DomainMatrix.rref"]], "rref() (sympy.polys.matrices.sdm.sdm method)": [[205, "sympy.polys.matrices.sdm.SDM.rref"]], "scc() (sympy.polys.matrices.ddm.ddm method)": [[205, "sympy.polys.matrices.ddm.DDM.scc"]], "scc() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[205, "sympy.polys.matrices.domainmatrix.DomainMatrix.scc"]], "scc() (sympy.polys.matrices.sdm.sdm method)": [[205, "sympy.polys.matrices.sdm.SDM.scc"]], "smith_normal_form() (in module sympy.polys.matrices.normalforms)": [[205, "sympy.polys.matrices.normalforms.smith_normal_form"]], "sub() (sympy.polys.matrices.ddm.ddm method)": [[205, "sympy.polys.matrices.ddm.DDM.sub"]], "sub() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[205, "sympy.polys.matrices.domainmatrix.DomainMatrix.sub"]], "sub() (sympy.polys.matrices.sdm.sdm method)": [[205, "sympy.polys.matrices.sdm.SDM.sub"]], "to_matrix() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[205, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_Matrix"]], "to_ddm() (sympy.polys.matrices.sdm.sdm method)": [[205, "sympy.polys.matrices.sdm.SDM.to_ddm"]], "to_dense() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[205, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_dense"]], "to_field() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[205, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_field"]], "to_list() (sympy.polys.matrices.sdm.sdm method)": [[205, "sympy.polys.matrices.sdm.SDM.to_list"]], "to_sparse() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[205, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_sparse"]], "transpose() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[205, "sympy.polys.matrices.domainmatrix.DomainMatrix.transpose"]], "transpose() (sympy.polys.matrices.sdm.sdm method)": [[205, "sympy.polys.matrices.sdm.SDM.transpose"]], "unify() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[205, "sympy.polys.matrices.domainmatrix.DomainMatrix.unify"]], "vstack() (sympy.polys.matrices.ddm.ddm method)": [[205, "sympy.polys.matrices.ddm.DDM.vstack"]], "vstack() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[205, "sympy.polys.matrices.domainmatrix.DomainMatrix.vstack"]], "vstack() (sympy.polys.matrices.sdm.sdm method)": [[205, "sympy.polys.matrices.sdm.SDM.vstack"]], "zeros() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[205, "sympy.polys.matrices.domainmatrix.DomainMatrix.zeros"]], "zeros() (sympy.polys.matrices.sdm.sdm class method)": [[205, "sympy.polys.matrices.sdm.SDM.zeros"]], "anp (class in sympy.polys.polyclasses)": [[207, "sympy.polys.polyclasses.ANP"]], "algebraicfield (class in sympy.polys.domains)": [[207, "sympy.polys.domains.AlgebraicField"]], "complexelement (class in sympy.polys.domains.mpelements)": [[207, "sympy.polys.domains.mpelements.ComplexElement"]], "complexfield (class in sympy.polys.domains)": [[207, "sympy.polys.domains.ComplexField"]], "compositedomain (class in sympy.polys.domains.compositedomain)": [[207, "sympy.polys.domains.compositedomain.CompositeDomain"]], "dmf (class in sympy.polys.polyclasses)": [[207, "sympy.polys.polyclasses.DMF"]], "dmp (class in sympy.polys.polyclasses)": [[207, "sympy.polys.polyclasses.DMP"]], "domain (class in sympy.polys.domains.domain)": [[207, "sympy.polys.domains.domain.Domain"]], "domainelement (class in sympy.polys.domains.domainelement)": [[207, "sympy.polys.domains.domainelement.DomainElement"]], "expressiondomain (class in sympy.polys.domains)": [[207, "sympy.polys.domains.ExpressionDomain"]], "expressiondomain.expression (class in sympy.polys.domains)": [[207, "sympy.polys.domains.ExpressionDomain.Expression"]], "expressiondomain.expression (class in sympy.polys.domains.expressiondomain)": [[207, "sympy.polys.domains.expressiondomain.ExpressionDomain.Expression"]], "field (class in sympy.polys.domains.field)": [[207, "sympy.polys.domains.field.Field"]], "finitefield (class in sympy.polys.domains)": [[207, "sympy.polys.domains.FiniteField"]], "fracelement (class in sympy.polys.fields)": [[207, "sympy.polys.fields.FracElement"]], "fracfield (class in sympy.polys.fields)": [[207, "sympy.polys.fields.FracField"]], "fractionfield (class in sympy.polys.domains)": [[207, "sympy.polys.domains.FractionField"]], "gmpyfinitefield (class in sympy.polys.domains)": [[207, "sympy.polys.domains.GMPYFiniteField"]], "gmpyintegerring (class in sympy.polys.domains)": [[207, "sympy.polys.domains.GMPYIntegerRing"]], "gmpyrationalfield (class in sympy.polys.domains)": [[207, "sympy.polys.domains.GMPYRationalField"]], "gaussiandomain (class in sympy.polys.domains.gaussiandomains)": [[207, "sympy.polys.domains.gaussiandomains.GaussianDomain"]], "gaussianelement (class in sympy.polys.domains.gaussiandomains)": [[207, "sympy.polys.domains.gaussiandomains.GaussianElement"]], "gaussianinteger (class in sympy.polys.domains.gaussiandomains)": [[207, "sympy.polys.domains.gaussiandomains.GaussianInteger"]], "gaussianintegerring (class in sympy.polys.domains.gaussiandomains)": [[207, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing"]], "gaussianrational (class in sympy.polys.domains.gaussiandomains)": [[207, "sympy.polys.domains.gaussiandomains.GaussianRational"]], "gaussianrationalfield (class in sympy.polys.domains.gaussiandomains)": [[207, "sympy.polys.domains.gaussiandomains.GaussianRationalField"]], "integerring (class in sympy.polys.domains)": [[207, "sympy.polys.domains.IntegerRing"]], "lc() (sympy.polys.polyclasses.anp method)": [[207, "sympy.polys.polyclasses.ANP.LC"]], "lc() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.LC"]], "polyelement (class in sympy.polys.rings)": [[207, "sympy.polys.rings.PolyElement"]], "polyring (class in sympy.polys.rings)": [[207, "sympy.polys.rings.PolyRing"]], "polynomialring (class in sympy.polys.domains)": [[207, "sympy.polys.domains.PolynomialRing"]], "pythonfinitefield (class in sympy.polys.domains)": [[207, "sympy.polys.domains.PythonFiniteField"]], "pythonintegerring (class in sympy.polys.domains)": [[207, "sympy.polys.domains.PythonIntegerRing"]], "pythonmpq (class in sympy.external.pythonmpq)": [[207, "sympy.external.pythonmpq.PythonMPQ"]], "pythonrationalfield (class in sympy.polys.domains)": [[207, "sympy.polys.domains.PythonRationalField"]], "quotientring (class in sympy.polys.domains.quotientring)": [[207, "sympy.polys.domains.quotientring.QuotientRing"]], "rationalfield (class in sympy.polys.domains)": [[207, "sympy.polys.domains.RationalField"]], "realelement (class in sympy.polys.domains.mpelements)": [[207, "sympy.polys.domains.mpelements.RealElement"]], "realfield (class in sympy.polys.domains)": [[207, "sympy.polys.domains.RealField"]], "ring (class in sympy.polys.domains.ring)": [[207, "sympy.polys.domains.ring.Ring"]], "simpledomain (class in sympy.polys.domains.simpledomain)": [[207, "sympy.polys.domains.simpledomain.SimpleDomain"]], "tc() (sympy.polys.polyclasses.anp method)": [[207, "sympy.polys.polyclasses.ANP.TC"]], "tc() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.TC"]], "abs() (sympy.polys.domains.domain.domain method)": [[207, "sympy.polys.domains.domain.Domain.abs"]], "abs() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.abs"]], "add() (sympy.polys.domains.domain.domain method)": [[207, "sympy.polys.domains.domain.Domain.add"]], "add() (sympy.polys.polyclasses.dmf method)": [[207, "sympy.polys.polyclasses.DMF.add"]], "add() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.add"]], "add() (sympy.polys.rings.polyring method)": [[207, "sympy.polys.rings.PolyRing.add"]], "add_gens() (sympy.polys.rings.polyring method)": [[207, "sympy.polys.rings.PolyRing.add_gens"]], "add_ground() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.add_ground"]], "alg_field_from_poly() (sympy.polys.domains.domain.domain method)": [[207, "sympy.polys.domains.domain.Domain.alg_field_from_poly"]], "algebraic_field() (sympy.polys.domains.algebraicfield method)": [[207, "sympy.polys.domains.AlgebraicField.algebraic_field"]], "algebraic_field() (sympy.polys.domains.integerring method)": [[207, "sympy.polys.domains.IntegerRing.algebraic_field"]], "algebraic_field() (sympy.polys.domains.rationalfield method)": [[207, "sympy.polys.domains.RationalField.algebraic_field"]], "algebraic_field() (sympy.polys.domains.domain.domain method)": [[207, "sympy.polys.domains.domain.Domain.algebraic_field"]], "all_coeffs() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.all_coeffs"]], "all_monoms() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.all_monoms"]], "all_terms() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.all_terms"]], "almosteq() (sympy.polys.domains.complexfield method)": [[207, "sympy.polys.domains.ComplexField.almosteq"]], "almosteq() (sympy.polys.domains.realfield method)": [[207, "sympy.polys.domains.RealField.almosteq"]], "almosteq() (sympy.polys.domains.domain.domain method)": [[207, "sympy.polys.domains.domain.Domain.almosteq"]], "almosteq() (sympy.polys.rings.polyelement method)": [[207, "sympy.polys.rings.PolyElement.almosteq"]], "as_algebraicfield() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[207, "sympy.polys.domains.gaussiandomains.GaussianRationalField.as_AlgebraicField"]], "cancel() (sympy.polys.polyclasses.dmf method)": [[207, "sympy.polys.polyclasses.DMF.cancel"]], "cancel() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.cancel"]], "cancel() (sympy.polys.rings.polyelement method)": [[207, "sympy.polys.rings.PolyElement.cancel"]], "cauchy_lower_bound() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.cauchy_lower_bound"]], "cauchy_upper_bound() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.cauchy_upper_bound"]], "characteristic() (sympy.polys.domains.finitefield method)": [[207, "sympy.polys.domains.FiniteField.characteristic"]], "characteristic() (sympy.polys.domains.domain.domain method)": [[207, "sympy.polys.domains.domain.Domain.characteristic"]], "clear_denoms() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.clear_denoms"]], "coeff() (sympy.polys.rings.polyelement method)": [[207, "sympy.polys.rings.PolyElement.coeff"]], "coeffs() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.coeffs"]], "coeffs() (sympy.polys.rings.polyelement method)": [[207, "sympy.polys.rings.PolyElement.coeffs"]], "cofactors() (sympy.polys.domains.domain.domain method)": [[207, "sympy.polys.domains.domain.Domain.cofactors"]], "cofactors() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.cofactors"]], "compose() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.compose"]], "compose() (sympy.polys.rings.polyring method)": [[207, "sympy.polys.rings.PolyRing.compose"]], "const() (sympy.polys.rings.polyelement method)": [[207, "sympy.polys.rings.PolyElement.const"]], "content() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.content"]], "content() (sympy.polys.rings.polyelement method)": [[207, "sympy.polys.rings.PolyElement.content"]], "convert() (sympy.polys.domains.domain.domain method)": [[207, "sympy.polys.domains.domain.Domain.convert"]], "convert() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.convert"]], "convert_from() (sympy.polys.domains.domain.domain method)": [[207, "sympy.polys.domains.domain.Domain.convert_from"]], "copy() (sympy.polys.rings.polyelement method)": [[207, "sympy.polys.rings.PolyElement.copy"]], "count_complex_roots() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.count_complex_roots"]], "count_real_roots() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.count_real_roots"]], "cyclotomic_field() (sympy.polys.domains.domain.domain method)": [[207, "sympy.polys.domains.domain.Domain.cyclotomic_field"]], "decompose() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.decompose"]], "deflate() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.deflate"]], "degree() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.degree"]], "degree() (sympy.polys.rings.polyelement method)": [[207, "sympy.polys.rings.PolyElement.degree"]], "degree_list() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.degree_list"]], "degrees() (sympy.polys.rings.polyelement method)": [[207, "sympy.polys.rings.PolyElement.degrees"]], "denom() (sympy.polys.domains.algebraicfield method)": [[207, "sympy.polys.domains.AlgebraicField.denom"]], "denom() (sympy.polys.domains.expressiondomain method)": [[207, "sympy.polys.domains.ExpressionDomain.denom"]], "denom() (sympy.polys.domains.fractionfield method)": [[207, "sympy.polys.domains.FractionField.denom"]], "denom() (sympy.polys.domains.gmpyrationalfield method)": [[207, "sympy.polys.domains.GMPYRationalField.denom"]], "denom() (sympy.polys.domains.rationalfield method)": [[207, "sympy.polys.domains.RationalField.denom"]], "denom() (sympy.polys.domains.domain.domain method)": [[207, "sympy.polys.domains.domain.Domain.denom"]], "denom() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[207, "sympy.polys.domains.gaussiandomains.GaussianRationalField.denom"]], "denom() (sympy.polys.domains.ring.ring method)": [[207, "sympy.polys.domains.ring.Ring.denom"]], "denom() (sympy.polys.polyclasses.dmf method)": [[207, "sympy.polys.polyclasses.DMF.denom"]], "diff() (sympy.polys.fields.fracelement method)": [[207, "sympy.polys.fields.FracElement.diff"]], "diff() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.diff"]], "diff() (sympy.polys.rings.polyelement method)": [[207, "sympy.polys.rings.PolyElement.diff"]], "discriminant() (sympy.polys.domains.algebraicfield method)": [[207, "sympy.polys.domains.AlgebraicField.discriminant"]], "discriminant() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.discriminant"]], "div() (sympy.polys.domains.gmpyrationalfield method)": [[207, "sympy.polys.domains.GMPYRationalField.div"]], "div() (sympy.polys.domains.rationalfield method)": [[207, "sympy.polys.domains.RationalField.div"]], "div() (sympy.polys.domains.domain.domain method)": [[207, "sympy.polys.domains.domain.Domain.div"]], "div() (sympy.polys.domains.field.field method)": [[207, "sympy.polys.domains.field.Field.div"]], "div() (sympy.polys.domains.ring.ring method)": [[207, "sympy.polys.domains.ring.Ring.div"]], "div() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.div"]], "div() (sympy.polys.rings.polyelement method)": [[207, "sympy.polys.rings.PolyElement.div"]], "drop() (sympy.polys.domains.compositedomain.compositedomain method)": [[207, "sympy.polys.domains.compositedomain.CompositeDomain.drop"]], "drop() (sympy.polys.domains.domain.domain method)": [[207, "sympy.polys.domains.domain.Domain.drop"]], "drop() (sympy.polys.rings.polyring method)": [[207, "sympy.polys.rings.PolyRing.drop"]], "drop_to_ground() (sympy.polys.rings.polyring method)": [[207, "sympy.polys.rings.PolyRing.drop_to_ground"]], "dtype (sympy.polys.domains.algebraicfield attribute)": [[207, "sympy.polys.domains.AlgebraicField.dtype"]], "dtype (sympy.polys.domains.expressiondomain attribute)": [[207, "sympy.polys.domains.ExpressionDomain.dtype"]], "dtype (sympy.polys.domains.domain.domain attribute)": [[207, "sympy.polys.domains.domain.Domain.dtype"]], "dtype (sympy.polys.domains.gaussiandomains.gaussianintegerring attribute)": [[207, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.dtype"]], "dtype (sympy.polys.domains.gaussiandomains.gaussianrationalfield attribute)": [[207, "sympy.polys.domains.gaussiandomains.GaussianRationalField.dtype"]], "eject() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.eject"]], "eval() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.eval"]], "evalf() (sympy.polys.domains.domain.domain method)": [[207, "sympy.polys.domains.domain.Domain.evalf"]], "exclude() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.exclude"]], "exquo() (sympy.polys.domains.gmpyrationalfield method)": [[207, "sympy.polys.domains.GMPYRationalField.exquo"]], "exquo() (sympy.polys.domains.rationalfield method)": [[207, "sympy.polys.domains.RationalField.exquo"]], "exquo() (sympy.polys.domains.domain.domain method)": [[207, "sympy.polys.domains.domain.Domain.exquo"]], "exquo() (sympy.polys.domains.field.field method)": [[207, "sympy.polys.domains.field.Field.exquo"]], "exquo() (sympy.polys.domains.ring.ring method)": [[207, "sympy.polys.domains.ring.Ring.exquo"]], "exquo() (sympy.polys.polyclasses.dmf method)": [[207, "sympy.polys.polyclasses.DMF.exquo"]], "exquo() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.exquo"]], "exquo_ground() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.exquo_ground"]], "exsqrt() (sympy.polys.domains.complexfield method)": [[207, "sympy.polys.domains.ComplexField.exsqrt"]], "exsqrt() (sympy.polys.domains.finitefield method)": [[207, "sympy.polys.domains.FiniteField.exsqrt"]], "exsqrt() (sympy.polys.domains.integerring method)": [[207, "sympy.polys.domains.IntegerRing.exsqrt"]], "exsqrt() (sympy.polys.domains.rationalfield method)": [[207, "sympy.polys.domains.RationalField.exsqrt"]], "exsqrt() (sympy.polys.domains.realfield method)": [[207, "sympy.polys.domains.RealField.exsqrt"]], "exsqrt() (sympy.polys.domains.domain.domain method)": [[207, "sympy.polys.domains.domain.Domain.exsqrt"]], "ext (sympy.polys.domains.algebraicfield attribute)": [[207, "sympy.polys.domains.AlgebraicField.ext"]], "factor_list() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.factor_list"]], "factor_list_include() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.factor_list_include"]], "factorial() (sympy.polys.domains.fractionfield method)": [[207, "sympy.polys.domains.FractionField.factorial"]], "factorial() (sympy.polys.domains.gmpyintegerring method)": [[207, "sympy.polys.domains.GMPYIntegerRing.factorial"]], "factorial() (sympy.polys.domains.gmpyrationalfield method)": [[207, "sympy.polys.domains.GMPYRationalField.factorial"]], "factorial() (sympy.polys.domains.integerring method)": [[207, "sympy.polys.domains.IntegerRing.factorial"]], "factorial() (sympy.polys.domains.polynomialring method)": [[207, "sympy.polys.domains.PolynomialRing.factorial"]], "field() (in module sympy.polys.fields)": [[207, "sympy.polys.fields.field"]], "frac_field() (sympy.polys.domains.domain.domain method)": [[207, "sympy.polys.domains.domain.Domain.frac_field"]], "frac_unify() (sympy.polys.polyclasses.dmf method)": [[207, "sympy.polys.polyclasses.DMF.frac_unify"]], "free_module() (sympy.polys.domains.ring.ring method)": [[207, "sympy.polys.domains.ring.Ring.free_module"]], "from_algebraicfield() (sympy.polys.domains.algebraicfield method)": [[207, "sympy.polys.domains.AlgebraicField.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.fractionfield method)": [[207, "sympy.polys.domains.FractionField.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.integerring method)": [[207, "sympy.polys.domains.IntegerRing.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.polynomialring method)": [[207, "sympy.polys.domains.PolynomialRing.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.rationalfield method)": [[207, "sympy.polys.domains.RationalField.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.domain.domain method)": [[207, "sympy.polys.domains.domain.Domain.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[207, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_AlgebraicField"]], "from_complexfield() (sympy.polys.domains.fractionfield method)": [[207, "sympy.polys.domains.FractionField.from_ComplexField"]], "from_complexfield() (sympy.polys.domains.polynomialring method)": [[207, "sympy.polys.domains.PolynomialRing.from_ComplexField"]], "from_complexfield() (sympy.polys.domains.domain.domain method)": [[207, "sympy.polys.domains.domain.Domain.from_ComplexField"]], "from_expressiondomain() (sympy.polys.domains.expressiondomain method)": [[207, "sympy.polys.domains.ExpressionDomain.from_ExpressionDomain"]], "from_expressiondomain() (sympy.polys.domains.domain.domain method)": [[207, "sympy.polys.domains.domain.Domain.from_ExpressionDomain"]], "from_expressionrawdomain() (sympy.polys.domains.domain.domain method)": [[207, "sympy.polys.domains.domain.Domain.from_ExpressionRawDomain"]], "from_ff() (sympy.polys.domains.finitefield method)": [[207, "sympy.polys.domains.FiniteField.from_FF"]], "from_ff() (sympy.polys.domains.integerring method)": [[207, "sympy.polys.domains.IntegerRing.from_FF"]], "from_ff() (sympy.polys.domains.domain.domain method)": [[207, "sympy.polys.domains.domain.Domain.from_FF"]], "from_ff_gmpy() (sympy.polys.domains.finitefield method)": [[207, "sympy.polys.domains.FiniteField.from_FF_gmpy"]], "from_ff_gmpy() (sympy.polys.domains.gmpyintegerring method)": [[207, "sympy.polys.domains.GMPYIntegerRing.from_FF_gmpy"]], "from_ff_gmpy() (sympy.polys.domains.integerring method)": [[207, "sympy.polys.domains.IntegerRing.from_FF_gmpy"]], "from_ff_gmpy() (sympy.polys.domains.domain.domain method)": [[207, "sympy.polys.domains.domain.Domain.from_FF_gmpy"]], "from_ff_python() (sympy.polys.domains.finitefield method)": [[207, "sympy.polys.domains.FiniteField.from_FF_python"]], "from_ff_python() (sympy.polys.domains.gmpyintegerring method)": [[207, "sympy.polys.domains.GMPYIntegerRing.from_FF_python"]], "from_ff_python() (sympy.polys.domains.integerring method)": [[207, "sympy.polys.domains.IntegerRing.from_FF_python"]], "from_ff_python() (sympy.polys.domains.domain.domain method)": [[207, "sympy.polys.domains.domain.Domain.from_FF_python"]], "from_fractionfield() (sympy.polys.domains.expressiondomain method)": [[207, "sympy.polys.domains.ExpressionDomain.from_FractionField"]], "from_fractionfield() (sympy.polys.domains.fractionfield method)": [[207, "sympy.polys.domains.FractionField.from_FractionField"]], "from_fractionfield() (sympy.polys.domains.polynomialring method)": [[207, "sympy.polys.domains.PolynomialRing.from_FractionField"]], "from_fractionfield() (sympy.polys.domains.domain.domain method)": [[207, "sympy.polys.domains.domain.Domain.from_FractionField"]], "from_gaussianintegerring() (sympy.polys.domains.algebraicfield method)": [[207, "sympy.polys.domains.AlgebraicField.from_GaussianIntegerRing"]], "from_gaussianintegerring() (sympy.polys.domains.expressiondomain method)": [[207, "sympy.polys.domains.ExpressionDomain.from_GaussianIntegerRing"]], "from_gaussianintegerring() (sympy.polys.domains.fractionfield method)": [[207, "sympy.polys.domains.FractionField.from_GaussianIntegerRing"]], "from_gaussianintegerring() (sympy.polys.domains.polynomialring method)": [[207, "sympy.polys.domains.PolynomialRing.from_GaussianIntegerRing"]], "from_gaussianintegerring() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[207, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.from_GaussianIntegerRing"]], "from_gaussianintegerring() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[207, "sympy.polys.domains.gaussiandomains.GaussianRationalField.from_GaussianIntegerRing"]], "from_gaussianrationalfield() (sympy.polys.domains.algebraicfield method)": [[207, "sympy.polys.domains.AlgebraicField.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.expressiondomain method)": [[207, "sympy.polys.domains.ExpressionDomain.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.fractionfield method)": [[207, "sympy.polys.domains.FractionField.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.gmpyrationalfield method)": [[207, "sympy.polys.domains.GMPYRationalField.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.polynomialring method)": [[207, "sympy.polys.domains.PolynomialRing.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.rationalfield method)": [[207, "sympy.polys.domains.RationalField.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[207, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[207, "sympy.polys.domains.gaussiandomains.GaussianRationalField.from_GaussianRationalField"]], "from_globalpolynomialring() (sympy.polys.domains.polynomialring method)": [[207, "sympy.polys.domains.PolynomialRing.from_GlobalPolynomialRing"]], "from_globalpolynomialring() (sympy.polys.domains.domain.domain method)": [[207, "sympy.polys.domains.domain.Domain.from_GlobalPolynomialRing"]], "from_monogenicfiniteextension() (sympy.polys.domains.domain.domain method)": [[207, "sympy.polys.domains.domain.Domain.from_MonogenicFiniteExtension"]], "from_polynomialring() (sympy.polys.domains.expressiondomain method)": [[207, "sympy.polys.domains.ExpressionDomain.from_PolynomialRing"]], "from_polynomialring() (sympy.polys.domains.fractionfield method)": [[207, "sympy.polys.domains.FractionField.from_PolynomialRing"]], "from_polynomialring() (sympy.polys.domains.polynomialring method)": [[207, "sympy.polys.domains.PolynomialRing.from_PolynomialRing"]], "from_polynomialring() (sympy.polys.domains.domain.domain method)": [[207, "sympy.polys.domains.domain.Domain.from_PolynomialRing"]], "from_qq() (sympy.polys.domains.algebraicfield method)": [[207, "sympy.polys.domains.AlgebraicField.from_QQ"]], "from_qq() (sympy.polys.domains.expressiondomain method)": [[207, "sympy.polys.domains.ExpressionDomain.from_QQ"]], "from_qq() (sympy.polys.domains.finitefield method)": [[207, "sympy.polys.domains.FiniteField.from_QQ"]], "from_qq() (sympy.polys.domains.fractionfield method)": [[207, "sympy.polys.domains.FractionField.from_QQ"]], "from_qq() (sympy.polys.domains.gmpyintegerring method)": [[207, "sympy.polys.domains.GMPYIntegerRing.from_QQ"]], "from_qq() (sympy.polys.domains.integerring method)": [[207, "sympy.polys.domains.IntegerRing.from_QQ"]], "from_qq() (sympy.polys.domains.polynomialring method)": [[207, "sympy.polys.domains.PolynomialRing.from_QQ"]], "from_qq() (sympy.polys.domains.rationalfield method)": [[207, "sympy.polys.domains.RationalField.from_QQ"]], "from_qq() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[207, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_QQ"]], "from_qq_gmpy() (sympy.polys.domains.algebraicfield method)": [[207, "sympy.polys.domains.AlgebraicField.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.expressiondomain method)": [[207, "sympy.polys.domains.ExpressionDomain.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.finitefield method)": [[207, "sympy.polys.domains.FiniteField.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.fractionfield method)": [[207, "sympy.polys.domains.FractionField.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.gmpyintegerring method)": [[207, "sympy.polys.domains.GMPYIntegerRing.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.gmpyrationalfield method)": [[207, "sympy.polys.domains.GMPYRationalField.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.integerring method)": [[207, "sympy.polys.domains.IntegerRing.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.polynomialring method)": [[207, "sympy.polys.domains.PolynomialRing.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.rationalfield method)": [[207, "sympy.polys.domains.RationalField.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.domain.domain method)": [[207, "sympy.polys.domains.domain.Domain.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[207, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_QQ_gmpy"]], "from_qq_python() (sympy.polys.domains.algebraicfield method)": [[207, "sympy.polys.domains.AlgebraicField.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.expressiondomain method)": [[207, "sympy.polys.domains.ExpressionDomain.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.finitefield method)": [[207, "sympy.polys.domains.FiniteField.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.fractionfield method)": [[207, "sympy.polys.domains.FractionField.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.gmpyintegerring method)": [[207, "sympy.polys.domains.GMPYIntegerRing.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.gmpyrationalfield method)": [[207, "sympy.polys.domains.GMPYRationalField.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.integerring method)": [[207, "sympy.polys.domains.IntegerRing.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.polynomialring method)": [[207, "sympy.polys.domains.PolynomialRing.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.rationalfield method)": [[207, "sympy.polys.domains.RationalField.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.domain.domain method)": [[207, "sympy.polys.domains.domain.Domain.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[207, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_QQ_python"]], "from_realfield() (sympy.polys.domains.algebraicfield method)": [[207, "sympy.polys.domains.AlgebraicField.from_RealField"]], "from_realfield() (sympy.polys.domains.expressiondomain method)": [[207, "sympy.polys.domains.ExpressionDomain.from_RealField"]], "from_realfield() (sympy.polys.domains.finitefield method)": [[207, "sympy.polys.domains.FiniteField.from_RealField"]], "from_realfield() (sympy.polys.domains.fractionfield method)": [[207, "sympy.polys.domains.FractionField.from_RealField"]], "from_realfield() (sympy.polys.domains.gmpyintegerring method)": [[207, "sympy.polys.domains.GMPYIntegerRing.from_RealField"]], "from_realfield() (sympy.polys.domains.gmpyrationalfield method)": [[207, "sympy.polys.domains.GMPYRationalField.from_RealField"]], "from_realfield() (sympy.polys.domains.integerring method)": [[207, "sympy.polys.domains.IntegerRing.from_RealField"]], "from_realfield() (sympy.polys.domains.polynomialring method)": [[207, "sympy.polys.domains.PolynomialRing.from_RealField"]], "from_realfield() (sympy.polys.domains.rationalfield method)": [[207, "sympy.polys.domains.RationalField.from_RealField"]], "from_realfield() (sympy.polys.domains.domain.domain method)": [[207, "sympy.polys.domains.domain.Domain.from_RealField"]], "from_zz() (sympy.polys.domains.algebraicfield method)": [[207, "sympy.polys.domains.AlgebraicField.from_ZZ"]], "from_zz() (sympy.polys.domains.expressiondomain method)": [[207, "sympy.polys.domains.ExpressionDomain.from_ZZ"]], "from_zz() (sympy.polys.domains.finitefield method)": [[207, "sympy.polys.domains.FiniteField.from_ZZ"]], "from_zz() (sympy.polys.domains.fractionfield method)": [[207, "sympy.polys.domains.FractionField.from_ZZ"]], "from_zz() (sympy.polys.domains.integerring method)": [[207, "sympy.polys.domains.IntegerRing.from_ZZ"]], "from_zz() (sympy.polys.domains.polynomialring method)": [[207, "sympy.polys.domains.PolynomialRing.from_ZZ"]], "from_zz() (sympy.polys.domains.rationalfield method)": [[207, "sympy.polys.domains.RationalField.from_ZZ"]], "from_zz() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[207, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_ZZ"]], "from_zz_gmpy() (sympy.polys.domains.algebraicfield method)": [[207, "sympy.polys.domains.AlgebraicField.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.expressiondomain method)": [[207, "sympy.polys.domains.ExpressionDomain.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.finitefield method)": [[207, "sympy.polys.domains.FiniteField.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.fractionfield method)": [[207, "sympy.polys.domains.FractionField.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.gmpyintegerring method)": [[207, "sympy.polys.domains.GMPYIntegerRing.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.gmpyrationalfield method)": [[207, "sympy.polys.domains.GMPYRationalField.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.integerring method)": [[207, "sympy.polys.domains.IntegerRing.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.polynomialring method)": [[207, "sympy.polys.domains.PolynomialRing.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.rationalfield method)": [[207, "sympy.polys.domains.RationalField.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.domain.domain method)": [[207, "sympy.polys.domains.domain.Domain.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[207, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_ZZ_gmpy"]], "from_zz_python() (sympy.polys.domains.algebraicfield method)": [[207, "sympy.polys.domains.AlgebraicField.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.expressiondomain method)": [[207, "sympy.polys.domains.ExpressionDomain.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.finitefield method)": [[207, "sympy.polys.domains.FiniteField.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.fractionfield method)": [[207, "sympy.polys.domains.FractionField.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.gmpyintegerring method)": [[207, "sympy.polys.domains.GMPYIntegerRing.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.gmpyrationalfield method)": [[207, "sympy.polys.domains.GMPYRationalField.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.integerring method)": [[207, "sympy.polys.domains.IntegerRing.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.polynomialring method)": [[207, "sympy.polys.domains.PolynomialRing.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.rationalfield method)": [[207, "sympy.polys.domains.RationalField.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.domain.domain method)": [[207, "sympy.polys.domains.domain.Domain.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[207, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_ZZ_python"]], "from_dict() (sympy.polys.polyclasses.dmp class method)": [[207, "sympy.polys.polyclasses.DMP.from_dict"]], "from_list() (sympy.polys.polyclasses.dmp class method)": [[207, "sympy.polys.polyclasses.DMP.from_list"]], "from_sympy() (sympy.polys.domains.algebraicfield method)": [[207, "sympy.polys.domains.AlgebraicField.from_sympy"]], "from_sympy() (sympy.polys.domains.complexfield method)": [[207, "sympy.polys.domains.ComplexField.from_sympy"]], "from_sympy() (sympy.polys.domains.expressiondomain method)": [[207, "sympy.polys.domains.ExpressionDomain.from_sympy"]], "from_sympy() (sympy.polys.domains.finitefield method)": [[207, "sympy.polys.domains.FiniteField.from_sympy"]], "from_sympy() (sympy.polys.domains.fractionfield method)": [[207, "sympy.polys.domains.FractionField.from_sympy"]], "from_sympy() (sympy.polys.domains.gmpyintegerring method)": [[207, "sympy.polys.domains.GMPYIntegerRing.from_sympy"]], "from_sympy() (sympy.polys.domains.gmpyrationalfield method)": [[207, "sympy.polys.domains.GMPYRationalField.from_sympy"]], "from_sympy() (sympy.polys.domains.integerring method)": [[207, "sympy.polys.domains.IntegerRing.from_sympy"]], "from_sympy() (sympy.polys.domains.polynomialring method)": [[207, "sympy.polys.domains.PolynomialRing.from_sympy"]], "from_sympy() (sympy.polys.domains.rationalfield method)": [[207, "sympy.polys.domains.RationalField.from_sympy"]], "from_sympy() (sympy.polys.domains.realfield method)": [[207, "sympy.polys.domains.RealField.from_sympy"]], "from_sympy() (sympy.polys.domains.domain.domain method)": [[207, "sympy.polys.domains.domain.Domain.from_sympy"]], "from_sympy() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[207, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_sympy"]], "from_sympy_list() (sympy.polys.polyclasses.dmp class method)": [[207, "sympy.polys.polyclasses.DMP.from_sympy_list"]], "galois_group() (sympy.polys.domains.algebraicfield method)": [[207, "sympy.polys.domains.AlgebraicField.galois_group"]], "gcd() (sympy.polys.domains.complexfield method)": [[207, "sympy.polys.domains.ComplexField.gcd"]], "gcd() (sympy.polys.domains.gmpyintegerring method)": [[207, "sympy.polys.domains.GMPYIntegerRing.gcd"]], "gcd() (sympy.polys.domains.integerring method)": [[207, "sympy.polys.domains.IntegerRing.gcd"]], "gcd() (sympy.polys.domains.polynomialring method)": [[207, "sympy.polys.domains.PolynomialRing.gcd"]], "gcd() (sympy.polys.domains.realfield method)": [[207, "sympy.polys.domains.RealField.gcd"]], "gcd() (sympy.polys.domains.domain.domain method)": [[207, "sympy.polys.domains.domain.Domain.gcd"]], "gcd() (sympy.polys.domains.field.field method)": [[207, "sympy.polys.domains.field.Field.gcd"]], "gcd() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[207, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.gcd"]], "gcd() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.gcd"]], "gcdex() (sympy.polys.domains.gmpyintegerring method)": [[207, "sympy.polys.domains.GMPYIntegerRing.gcdex"]], "gcdex() (sympy.polys.domains.integerring method)": [[207, "sympy.polys.domains.IntegerRing.gcdex"]], "gcdex() (sympy.polys.domains.polynomialring method)": [[207, "sympy.polys.domains.PolynomialRing.gcdex"]], "gcdex() (sympy.polys.domains.domain.domain method)": [[207, "sympy.polys.domains.domain.Domain.gcdex"]], "gcdex() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.gcdex"]], "get_exact() (sympy.polys.domains.complexfield method)": [[207, "sympy.polys.domains.ComplexField.get_exact"]], "get_exact() (sympy.polys.domains.realfield method)": [[207, "sympy.polys.domains.RealField.get_exact"]], "get_exact() (sympy.polys.domains.domain.domain method)": [[207, "sympy.polys.domains.domain.Domain.get_exact"]], "get_field() (sympy.polys.domains.expressiondomain method)": [[207, "sympy.polys.domains.ExpressionDomain.get_field"]], "get_field() (sympy.polys.domains.finitefield method)": [[207, "sympy.polys.domains.FiniteField.get_field"]], "get_field() (sympy.polys.domains.integerring method)": [[207, "sympy.polys.domains.IntegerRing.get_field"]], "get_field() (sympy.polys.domains.polynomialring method)": [[207, "sympy.polys.domains.PolynomialRing.get_field"]], "get_field() (sympy.polys.domains.domain.domain method)": [[207, "sympy.polys.domains.domain.Domain.get_field"]], "get_field() (sympy.polys.domains.field.field method)": [[207, "sympy.polys.domains.field.Field.get_field"]], "get_field() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[207, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.get_field"]], "get_field() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[207, "sympy.polys.domains.gaussiandomains.GaussianRationalField.get_field"]], "get_ring() (sympy.polys.domains.algebraicfield method)": [[207, "sympy.polys.domains.AlgebraicField.get_ring"]], "get_ring() (sympy.polys.domains.complexfield method)": [[207, "sympy.polys.domains.ComplexField.get_ring"]], "get_ring() (sympy.polys.domains.expressiondomain method)": [[207, "sympy.polys.domains.ExpressionDomain.get_ring"]], "get_ring() (sympy.polys.domains.fractionfield method)": [[207, "sympy.polys.domains.FractionField.get_ring"]], "get_ring() (sympy.polys.domains.gmpyrationalfield method)": [[207, "sympy.polys.domains.GMPYRationalField.get_ring"]], "get_ring() (sympy.polys.domains.rationalfield method)": [[207, "sympy.polys.domains.RationalField.get_ring"]], "get_ring() (sympy.polys.domains.realfield method)": [[207, "sympy.polys.domains.RealField.get_ring"]], "get_ring() (sympy.polys.domains.domain.domain method)": [[207, "sympy.polys.domains.domain.Domain.get_ring"]], "get_ring() (sympy.polys.domains.field.field method)": [[207, "sympy.polys.domains.field.Field.get_ring"]], "get_ring() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[207, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.get_ring"]], "get_ring() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[207, "sympy.polys.domains.gaussiandomains.GaussianRationalField.get_ring"]], "get_ring() (sympy.polys.domains.ring.ring method)": [[207, "sympy.polys.domains.ring.Ring.get_ring"]], "gff_list() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.gff_list"]], "half_gcdex() (sympy.polys.domains.domain.domain method)": [[207, "sympy.polys.domains.domain.Domain.half_gcdex"]], "half_gcdex() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.half_gcdex"]], "half_per() (sympy.polys.polyclasses.dmf method)": [[207, "sympy.polys.polyclasses.DMF.half_per"]], "has_assoc_field (sympy.polys.domains.domain.domain attribute)": [[207, "sympy.polys.domains.domain.Domain.has_assoc_Field"]], "has_assoc_ring (sympy.polys.domains.domain.domain attribute)": [[207, "sympy.polys.domains.domain.Domain.has_assoc_Ring"]], "homogeneous_order() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.homogeneous_order"]], "homogenize() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.homogenize"]], "ideal() (sympy.polys.domains.ring.ring method)": [[207, "sympy.polys.domains.ring.Ring.ideal"]], "imul_num() (sympy.polys.rings.polyelement method)": [[207, "sympy.polys.rings.PolyElement.imul_num"]], "index() (sympy.polys.rings.polyring method)": [[207, "sympy.polys.rings.PolyRing.index"]], "inject() (sympy.polys.domains.compositedomain.compositedomain method)": [[207, "sympy.polys.domains.compositedomain.CompositeDomain.inject"]], "inject() (sympy.polys.domains.domain.domain method)": [[207, "sympy.polys.domains.domain.Domain.inject"]], "inject() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[207, "sympy.polys.domains.gaussiandomains.GaussianDomain.inject"]], "inject() (sympy.polys.domains.simpledomain.simpledomain method)": [[207, "sympy.polys.domains.simpledomain.SimpleDomain.inject"]], "inject() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.inject"]], "integral_basis() (sympy.polys.domains.algebraicfield method)": [[207, "sympy.polys.domains.AlgebraicField.integral_basis"]], "integrate() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.integrate"]], "intervals() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.intervals"]], "invert() (sympy.polys.domains.domain.domain method)": [[207, "sympy.polys.domains.domain.Domain.invert"]], "invert() (sympy.polys.domains.ring.ring method)": [[207, "sympy.polys.domains.ring.Ring.invert"]], "invert() (sympy.polys.polyclasses.dmf method)": [[207, "sympy.polys.polyclasses.DMF.invert"]], "invert() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.invert"]], "is_field (sympy.polys.domains.domain.domain attribute)": [[207, "sympy.polys.domains.domain.Domain.is_Field"]], "is_pid (sympy.polys.domains.domain.domain attribute)": [[207, "sympy.polys.domains.domain.Domain.is_PID"]], "is_ring (sympy.polys.domains.domain.domain attribute)": [[207, "sympy.polys.domains.domain.Domain.is_Ring"]], "is_cyclotomic (sympy.polys.polyclasses.dmp property)": [[207, "sympy.polys.polyclasses.DMP.is_cyclotomic"]], "is_ground (sympy.polys.polyclasses.anp property)": [[207, "sympy.polys.polyclasses.ANP.is_ground"]], "is_ground (sympy.polys.polyclasses.dmp property)": [[207, "sympy.polys.polyclasses.DMP.is_ground"]], "is_homogeneous (sympy.polys.polyclasses.dmp property)": [[207, "sympy.polys.polyclasses.DMP.is_homogeneous"]], "is_irreducible (sympy.polys.polyclasses.dmp property)": [[207, "sympy.polys.polyclasses.DMP.is_irreducible"]], "is_linear (sympy.polys.polyclasses.dmp property)": [[207, "sympy.polys.polyclasses.DMP.is_linear"]], "is_monic (sympy.polys.polyclasses.dmp property)": [[207, "sympy.polys.polyclasses.DMP.is_monic"]], "is_monomial (sympy.polys.polyclasses.dmp property)": [[207, "sympy.polys.polyclasses.DMP.is_monomial"]], "is_negative() (sympy.polys.domains.algebraicfield method)": [[207, "sympy.polys.domains.AlgebraicField.is_negative"]], "is_negative() (sympy.polys.domains.complexfield method)": [[207, "sympy.polys.domains.ComplexField.is_negative"]], "is_negative() (sympy.polys.domains.expressiondomain method)": [[207, "sympy.polys.domains.ExpressionDomain.is_negative"]], "is_negative() (sympy.polys.domains.fractionfield method)": [[207, "sympy.polys.domains.FractionField.is_negative"]], "is_negative() (sympy.polys.domains.polynomialring method)": [[207, "sympy.polys.domains.PolynomialRing.is_negative"]], "is_negative() (sympy.polys.domains.domain.domain method)": [[207, "sympy.polys.domains.domain.Domain.is_negative"]], "is_negative() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[207, "sympy.polys.domains.gaussiandomains.GaussianDomain.is_negative"]], "is_nonnegative() (sympy.polys.domains.algebraicfield method)": [[207, "sympy.polys.domains.AlgebraicField.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.complexfield method)": [[207, "sympy.polys.domains.ComplexField.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.expressiondomain method)": [[207, "sympy.polys.domains.ExpressionDomain.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.fractionfield method)": [[207, "sympy.polys.domains.FractionField.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.polynomialring method)": [[207, "sympy.polys.domains.PolynomialRing.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.domain.domain method)": [[207, "sympy.polys.domains.domain.Domain.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[207, "sympy.polys.domains.gaussiandomains.GaussianDomain.is_nonnegative"]], "is_nonpositive() (sympy.polys.domains.algebraicfield method)": [[207, "sympy.polys.domains.AlgebraicField.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.complexfield method)": [[207, "sympy.polys.domains.ComplexField.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.expressiondomain method)": [[207, "sympy.polys.domains.ExpressionDomain.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.fractionfield method)": [[207, "sympy.polys.domains.FractionField.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.polynomialring method)": [[207, "sympy.polys.domains.PolynomialRing.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.domain.domain method)": [[207, "sympy.polys.domains.domain.Domain.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[207, "sympy.polys.domains.gaussiandomains.GaussianDomain.is_nonpositive"]], "is_one (sympy.polys.polyclasses.anp property)": [[207, "sympy.polys.polyclasses.ANP.is_one"]], "is_one (sympy.polys.polyclasses.dmf property)": [[207, "sympy.polys.polyclasses.DMF.is_one"]], "is_one (sympy.polys.polyclasses.dmp property)": [[207, "sympy.polys.polyclasses.DMP.is_one"]], "is_one() (sympy.polys.domains.domain.domain method)": [[207, "sympy.polys.domains.domain.Domain.is_one"]], "is_positive() (sympy.polys.domains.algebraicfield method)": [[207, "sympy.polys.domains.AlgebraicField.is_positive"]], "is_positive() (sympy.polys.domains.complexfield method)": [[207, "sympy.polys.domains.ComplexField.is_positive"]], "is_positive() (sympy.polys.domains.expressiondomain method)": [[207, "sympy.polys.domains.ExpressionDomain.is_positive"]], "is_positive() (sympy.polys.domains.fractionfield method)": [[207, "sympy.polys.domains.FractionField.is_positive"]], "is_positive() (sympy.polys.domains.polynomialring method)": [[207, "sympy.polys.domains.PolynomialRing.is_positive"]], "is_positive() (sympy.polys.domains.domain.domain method)": [[207, "sympy.polys.domains.domain.Domain.is_positive"]], "is_positive() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[207, "sympy.polys.domains.gaussiandomains.GaussianDomain.is_positive"]], "is_primitive (sympy.polys.polyclasses.dmp property)": [[207, "sympy.polys.polyclasses.DMP.is_primitive"]], "is_quadratic (sympy.polys.polyclasses.dmp property)": [[207, "sympy.polys.polyclasses.DMP.is_quadratic"]], "is_sqf (sympy.polys.polyclasses.dmp property)": [[207, "sympy.polys.polyclasses.DMP.is_sqf"]], "is_square() (sympy.polys.domains.complexfield method)": [[207, "sympy.polys.domains.ComplexField.is_square"]], "is_square() (sympy.polys.domains.finitefield method)": [[207, "sympy.polys.domains.FiniteField.is_square"]], "is_square() (sympy.polys.domains.integerring method)": [[207, "sympy.polys.domains.IntegerRing.is_square"]], "is_square() (sympy.polys.domains.rationalfield method)": [[207, "sympy.polys.domains.RationalField.is_square"]], "is_square() (sympy.polys.domains.realfield method)": [[207, "sympy.polys.domains.RealField.is_square"]], "is_square() (sympy.polys.domains.domain.domain method)": [[207, "sympy.polys.domains.domain.Domain.is_square"]], "is_unit() (sympy.polys.domains.polynomialring method)": [[207, "sympy.polys.domains.PolynomialRing.is_unit"]], "is_unit() (sympy.polys.domains.field.field method)": [[207, "sympy.polys.domains.field.Field.is_unit"]], "is_zero (sympy.polys.polyclasses.anp property)": [[207, "sympy.polys.polyclasses.ANP.is_zero"]], "is_zero (sympy.polys.polyclasses.dmf property)": [[207, "sympy.polys.polyclasses.DMF.is_zero"]], "is_zero (sympy.polys.polyclasses.dmp property)": [[207, "sympy.polys.polyclasses.DMP.is_zero"]], "is_zero() (sympy.polys.domains.domain.domain method)": [[207, "sympy.polys.domains.domain.Domain.is_zero"]], "itercoeffs() (sympy.polys.rings.polyelement method)": [[207, "sympy.polys.rings.PolyElement.itercoeffs"]], "itermonoms() (sympy.polys.rings.polyelement method)": [[207, "sympy.polys.rings.PolyElement.itermonoms"]], "iterterms() (sympy.polys.rings.polyelement method)": [[207, "sympy.polys.rings.PolyElement.iterterms"]], "l1_norm() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.l1_norm"]], "l2_norm_squared() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.l2_norm_squared"]], "lcm() (sympy.polys.domains.complexfield method)": [[207, "sympy.polys.domains.ComplexField.lcm"]], "lcm() (sympy.polys.domains.gmpyintegerring method)": [[207, "sympy.polys.domains.GMPYIntegerRing.lcm"]], "lcm() (sympy.polys.domains.integerring method)": [[207, "sympy.polys.domains.IntegerRing.lcm"]], "lcm() (sympy.polys.domains.polynomialring method)": [[207, "sympy.polys.domains.PolynomialRing.lcm"]], "lcm() (sympy.polys.domains.realfield method)": [[207, "sympy.polys.domains.RealField.lcm"]], "lcm() (sympy.polys.domains.domain.domain method)": [[207, "sympy.polys.domains.domain.Domain.lcm"]], "lcm() (sympy.polys.domains.field.field method)": [[207, "sympy.polys.domains.field.Field.lcm"]], "lcm() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[207, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.lcm"]], "lcm() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.lcm"]], "leading_expv() (sympy.polys.rings.polyelement method)": [[207, "sympy.polys.rings.PolyElement.leading_expv"]], "leading_monom() (sympy.polys.rings.polyelement method)": [[207, "sympy.polys.rings.PolyElement.leading_monom"]], "leading_term() (sympy.polys.rings.polyelement method)": [[207, "sympy.polys.rings.PolyElement.leading_term"]], "lift() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.lift"]], "listcoeffs() (sympy.polys.rings.polyelement method)": [[207, "sympy.polys.rings.PolyElement.listcoeffs"]], "listmonoms() (sympy.polys.rings.polyelement method)": [[207, "sympy.polys.rings.PolyElement.listmonoms"]], "listterms() (sympy.polys.rings.polyelement method)": [[207, "sympy.polys.rings.PolyElement.listterms"]], "log() (sympy.polys.domains.integerring method)": [[207, "sympy.polys.domains.IntegerRing.log"]], "log() (sympy.polys.domains.domain.domain method)": [[207, "sympy.polys.domains.domain.Domain.log"]], "map() (sympy.polys.domains.domain.domain method)": [[207, "sympy.polys.domains.domain.Domain.map"]], "max_norm() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.max_norm"]], "maximal_order() (sympy.polys.domains.algebraicfield method)": [[207, "sympy.polys.domains.AlgebraicField.maximal_order"]], "mignotte_sep_bound_squared() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.mignotte_sep_bound_squared"]], "mod (sympy.polys.domains.algebraicfield attribute)": [[207, "sympy.polys.domains.AlgebraicField.mod"]], "monic() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.monic"]], "monic() (sympy.polys.rings.polyelement method)": [[207, "sympy.polys.rings.PolyElement.monic"]], "monomial_basis() (sympy.polys.rings.polyring method)": [[207, "sympy.polys.rings.PolyRing.monomial_basis"]], "monoms() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.monoms"]], "monoms() (sympy.polys.rings.polyelement method)": [[207, "sympy.polys.rings.PolyElement.monoms"]], "mul() (sympy.polys.domains.domain.domain method)": [[207, "sympy.polys.domains.domain.Domain.mul"]], "mul() (sympy.polys.polyclasses.dmf method)": [[207, "sympy.polys.polyclasses.DMF.mul"]], "mul() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.mul"]], "mul() (sympy.polys.rings.polyring method)": [[207, "sympy.polys.rings.PolyRing.mul"]], "mul_ground() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.mul_ground"]], "n() (sympy.polys.domains.domain.domain method)": [[207, "sympy.polys.domains.domain.Domain.n"]], "neg() (sympy.polys.domains.domain.domain method)": [[207, "sympy.polys.domains.domain.Domain.neg"]], "neg() (sympy.polys.polyclasses.dmf method)": [[207, "sympy.polys.polyclasses.DMF.neg"]], "neg() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.neg"]], "new() (sympy.polys.domains.gaussiandomains.gaussianelement class method)": [[207, "sympy.polys.domains.gaussiandomains.GaussianElement.new"]], "norm() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.norm"]], "normalize() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[207, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.normalize"]], "nth() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.nth"]], "numer() (sympy.polys.domains.algebraicfield method)": [[207, "sympy.polys.domains.AlgebraicField.numer"]], "numer() (sympy.polys.domains.expressiondomain method)": [[207, "sympy.polys.domains.ExpressionDomain.numer"]], "numer() (sympy.polys.domains.fractionfield method)": [[207, "sympy.polys.domains.FractionField.numer"]], "numer() (sympy.polys.domains.gmpyrationalfield method)": [[207, "sympy.polys.domains.GMPYRationalField.numer"]], "numer() (sympy.polys.domains.rationalfield method)": [[207, "sympy.polys.domains.RationalField.numer"]], "numer() (sympy.polys.domains.domain.domain method)": [[207, "sympy.polys.domains.domain.Domain.numer"]], "numer() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[207, "sympy.polys.domains.gaussiandomains.GaussianRationalField.numer"]], "numer() (sympy.polys.domains.ring.ring method)": [[207, "sympy.polys.domains.ring.Ring.numer"]], "numer() (sympy.polys.polyclasses.dmf method)": [[207, "sympy.polys.polyclasses.DMF.numer"]], "of_type() (sympy.polys.domains.domain.domain method)": [[207, "sympy.polys.domains.domain.Domain.of_type"]], "old_frac_field() (sympy.polys.domains.domain.domain method)": [[207, "sympy.polys.domains.domain.Domain.old_frac_field"]], "old_poly_ring() (sympy.polys.domains.domain.domain method)": [[207, "sympy.polys.domains.domain.Domain.old_poly_ring"]], "one (sympy.polys.domains.domain.domain attribute)": [[207, "sympy.polys.domains.domain.Domain.one"]], "orig_ext (sympy.polys.domains.algebraicfield attribute)": [[207, "sympy.polys.domains.AlgebraicField.orig_ext"]], "parent() (sympy.polys.domains.domainelement.domainelement method)": [[207, "sympy.polys.domains.domainelement.DomainElement.parent"]], "parent() (sympy.polys.domains.gaussiandomains.gaussianelement method)": [[207, "sympy.polys.domains.gaussiandomains.GaussianElement.parent"]], "pdiv() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.pdiv"]], "per() (sympy.polys.polyclasses.dmf method)": [[207, "sympy.polys.polyclasses.DMF.per"]], "per() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.per"]], "permute() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.permute"]], "pexquo() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.pexquo"]], "poly_ring() (sympy.polys.domains.domain.domain method)": [[207, "sympy.polys.domains.domain.Domain.poly_ring"]], "poly_unify() (sympy.polys.polyclasses.dmf method)": [[207, "sympy.polys.polyclasses.DMF.poly_unify"]], "pos() (sympy.polys.domains.domain.domain method)": [[207, "sympy.polys.domains.domain.Domain.pos"]], "pow() (sympy.polys.domains.domain.domain method)": [[207, "sympy.polys.domains.domain.Domain.pow"]], "pow() (sympy.polys.polyclasses.anp method)": [[207, "sympy.polys.polyclasses.ANP.pow"]], "pow() (sympy.polys.polyclasses.dmf method)": [[207, "sympy.polys.polyclasses.DMF.pow"]], "pow() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.pow"]], "pquo() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.pquo"]], "prem() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.prem"]], "primes_above() (sympy.polys.domains.algebraicfield method)": [[207, "sympy.polys.domains.AlgebraicField.primes_above"]], "primitive() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.primitive"]], "primitive() (sympy.polys.rings.polyelement method)": [[207, "sympy.polys.rings.PolyElement.primitive"]], "quadrant() (sympy.polys.domains.gaussiandomains.gaussianelement method)": [[207, "sympy.polys.domains.gaussiandomains.GaussianElement.quadrant"]], "quo() (sympy.polys.domains.gmpyrationalfield method)": [[207, "sympy.polys.domains.GMPYRationalField.quo"]], "quo() (sympy.polys.domains.rationalfield method)": [[207, "sympy.polys.domains.RationalField.quo"]], "quo() (sympy.polys.domains.domain.domain method)": [[207, "sympy.polys.domains.domain.Domain.quo"]], "quo() (sympy.polys.domains.field.field method)": [[207, "sympy.polys.domains.field.Field.quo"]], "quo() (sympy.polys.domains.ring.ring method)": [[207, "sympy.polys.domains.ring.Ring.quo"]], "quo() (sympy.polys.polyclasses.dmf method)": [[207, "sympy.polys.polyclasses.DMF.quo"]], "quo() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.quo"]], "quo_ground() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.quo_ground"]], "quotient_ring() (sympy.polys.domains.ring.ring method)": [[207, "sympy.polys.domains.ring.Ring.quotient_ring"]], "refine_root() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.refine_root"]], "rem() (sympy.polys.domains.gmpyrationalfield method)": [[207, "sympy.polys.domains.GMPYRationalField.rem"]], "rem() (sympy.polys.domains.rationalfield method)": [[207, "sympy.polys.domains.RationalField.rem"]], "rem() (sympy.polys.domains.domain.domain method)": [[207, "sympy.polys.domains.domain.Domain.rem"]], "rem() (sympy.polys.domains.field.field method)": [[207, "sympy.polys.domains.field.Field.rem"]], "rem() (sympy.polys.domains.ring.ring method)": [[207, "sympy.polys.domains.ring.Ring.rem"]], "rem() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.rem"]], "resultant() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.resultant"]], "revert() (sympy.polys.domains.domain.domain method)": [[207, "sympy.polys.domains.domain.Domain.revert"]], "revert() (sympy.polys.domains.field.field method)": [[207, "sympy.polys.domains.field.Field.revert"]], "revert() (sympy.polys.domains.ring.ring method)": [[207, "sympy.polys.domains.ring.Ring.revert"]], "revert() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.revert"]], "ring() (in module sympy.polys.rings)": [[207, "sympy.polys.rings.ring"]], "sfield() (in module sympy.polys.fields)": [[207, "sympy.polys.fields.sfield"]], "shift() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.shift"]], "slice() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.slice"]], "sqf_list() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.sqf_list"]], "sqf_list_include() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.sqf_list_include"]], "sqf_norm() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.sqf_norm"]], "sqf_part() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.sqf_part"]], "sqr() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.sqr"]], "sqrt() (sympy.polys.domains.gmpyintegerring method)": [[207, "sympy.polys.domains.GMPYIntegerRing.sqrt"]], "sqrt() (sympy.polys.domains.integerring method)": [[207, "sympy.polys.domains.IntegerRing.sqrt"]], "sqrt() (sympy.polys.domains.domain.domain method)": [[207, "sympy.polys.domains.domain.Domain.sqrt"]], "square() (sympy.polys.rings.polyelement method)": [[207, "sympy.polys.rings.PolyElement.square"]], "sring() (in module sympy.polys.rings)": [[207, "sympy.polys.rings.sring"]], "strip_zero() (sympy.polys.rings.polyelement method)": [[207, "sympy.polys.rings.PolyElement.strip_zero"]], "sturm() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.sturm"]], "sub() (sympy.polys.domains.domain.domain method)": [[207, "sympy.polys.domains.domain.Domain.sub"]], "sub() (sympy.polys.polyclasses.dmf method)": [[207, "sympy.polys.polyclasses.DMF.sub"]], "sub() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.sub"]], "sub_ground() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.sub_ground"]], "subresultants() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.subresultants"]], "symmetric_poly() (sympy.polys.rings.polyring method)": [[207, "sympy.polys.rings.PolyRing.symmetric_poly"]], "symmetrize() (sympy.polys.rings.polyelement method)": [[207, "sympy.polys.rings.PolyElement.symmetrize"]], "tail_degree() (sympy.polys.rings.polyelement method)": [[207, "sympy.polys.rings.PolyElement.tail_degree"]], "tail_degrees() (sympy.polys.rings.polyelement method)": [[207, "sympy.polys.rings.PolyElement.tail_degrees"]], "terms() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.terms"]], "terms() (sympy.polys.rings.polyelement method)": [[207, "sympy.polys.rings.PolyElement.terms"]], "terms_gcd() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.terms_gcd"]], "to_alg_num() (sympy.polys.domains.algebraicfield method)": [[207, "sympy.polys.domains.AlgebraicField.to_alg_num"]], "to_dict() (sympy.polys.polyclasses.anp method)": [[207, "sympy.polys.polyclasses.ANP.to_dict"]], "to_dict() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.to_dict"]], "to_exact() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.to_exact"]], "to_field() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.to_field"]], "to_list() (sympy.polys.polyclasses.anp method)": [[207, "sympy.polys.polyclasses.ANP.to_list"]], "to_list() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.to_list"]], "to_rational() (sympy.polys.domains.realfield method)": [[207, "sympy.polys.domains.RealField.to_rational"]], "to_ring() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.to_ring"]], "to_sympy() (sympy.polys.domains.algebraicfield method)": [[207, "sympy.polys.domains.AlgebraicField.to_sympy"]], "to_sympy() (sympy.polys.domains.complexfield method)": [[207, "sympy.polys.domains.ComplexField.to_sympy"]], "to_sympy() (sympy.polys.domains.expressiondomain method)": [[207, "sympy.polys.domains.ExpressionDomain.to_sympy"]], "to_sympy() (sympy.polys.domains.finitefield method)": [[207, "sympy.polys.domains.FiniteField.to_sympy"]], "to_sympy() (sympy.polys.domains.fractionfield method)": [[207, "sympy.polys.domains.FractionField.to_sympy"]], "to_sympy() (sympy.polys.domains.gmpyintegerring method)": [[207, "sympy.polys.domains.GMPYIntegerRing.to_sympy"]], "to_sympy() (sympy.polys.domains.gmpyrationalfield method)": [[207, "sympy.polys.domains.GMPYRationalField.to_sympy"]], "to_sympy() (sympy.polys.domains.integerring method)": [[207, "sympy.polys.domains.IntegerRing.to_sympy"]], "to_sympy() (sympy.polys.domains.polynomialring method)": [[207, "sympy.polys.domains.PolynomialRing.to_sympy"]], "to_sympy() (sympy.polys.domains.rationalfield method)": [[207, "sympy.polys.domains.RationalField.to_sympy"]], "to_sympy() (sympy.polys.domains.realfield method)": [[207, "sympy.polys.domains.RealField.to_sympy"]], "to_sympy() (sympy.polys.domains.domain.domain method)": [[207, "sympy.polys.domains.domain.Domain.to_sympy"]], "to_sympy() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[207, "sympy.polys.domains.gaussiandomains.GaussianDomain.to_sympy"]], "to_sympy_dict() (sympy.polys.polyclasses.anp method)": [[207, "sympy.polys.polyclasses.ANP.to_sympy_dict"]], "to_sympy_dict() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.to_sympy_dict"]], "to_sympy_list() (sympy.polys.polyclasses.anp method)": [[207, "sympy.polys.polyclasses.ANP.to_sympy_list"]], "to_sympy_list() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.to_sympy_list"]], "to_tuple() (sympy.polys.polyclasses.anp method)": [[207, "sympy.polys.polyclasses.ANP.to_tuple"]], "to_tuple() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.to_tuple"]], "total_degree() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.total_degree"]], "tp (sympy.polys.domains.domain.domain property)": [[207, "sympy.polys.domains.domain.Domain.tp"]], "transform() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.transform"]], "trunc() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.trunc"]], "unify() (sympy.polys.domains.domain.domain method)": [[207, "sympy.polys.domains.domain.Domain.unify"]], "unify() (sympy.polys.polyclasses.anp method)": [[207, "sympy.polys.polyclasses.ANP.unify"]], "unify() (sympy.polys.polyclasses.dmp method)": [[207, "sympy.polys.polyclasses.DMP.unify"]], "vfield() (in module sympy.polys.fields)": [[207, "sympy.polys.fields.vfield"]], "vring() (in module sympy.polys.rings)": [[207, "sympy.polys.rings.vring"]], "xfield() (in module sympy.polys.fields)": [[207, "sympy.polys.fields.xfield"]], "xring() (in module sympy.polys.rings)": [[207, "sympy.polys.rings.xring"]], "zero (sympy.polys.domains.domain.domain attribute)": [[207, "sympy.polys.domains.domain.Domain.zero"]], "basepolynomialerror (class in sympy.polys.polyerrors)": [[209, "sympy.polys.polyerrors.BasePolynomialError"]], "coercionfailed (class in sympy.polys.polyerrors)": [[209, "sympy.polys.polyerrors.CoercionFailed"]], "computationfailed (class in sympy.polys.polyerrors)": [[209, "sympy.polys.polyerrors.ComputationFailed"]], "domainerror (class in sympy.polys.polyerrors)": [[209, "sympy.polys.polyerrors.DomainError"]], "evaluationfailed (class in sympy.polys.polyerrors)": [[209, "sympy.polys.polyerrors.EvaluationFailed"]], "exactquotientfailed (class in sympy.polys.polyerrors)": [[209, "sympy.polys.polyerrors.ExactQuotientFailed"]], "extraneousfactors (class in sympy.polys.polyerrors)": [[209, "sympy.polys.polyerrors.ExtraneousFactors"]], "flagerror (class in sympy.polys.polyerrors)": [[209, "sympy.polys.polyerrors.FlagError"]], "generatorserror (class in sympy.polys.polyerrors)": [[209, "sympy.polys.polyerrors.GeneratorsError"]], "generatorsneeded (class in sympy.polys.polyerrors)": [[209, "sympy.polys.polyerrors.GeneratorsNeeded"]], "heuristicgcdfailed (class in sympy.polys.polyerrors)": [[209, "sympy.polys.polyerrors.HeuristicGCDFailed"]], "homomorphismfailed (class in sympy.polys.polyerrors)": [[209, "sympy.polys.polyerrors.HomomorphismFailed"]], "isomorphismfailed (class in sympy.polys.polyerrors)": [[209, "sympy.polys.polyerrors.IsomorphismFailed"]], "multivariatepolynomialerror (class in sympy.polys.polyerrors)": [[209, "sympy.polys.polyerrors.MultivariatePolynomialError"]], "notalgebraic (class in sympy.polys.polyerrors)": [[209, "sympy.polys.polyerrors.NotAlgebraic"]], "notinvertible (class in sympy.polys.polyerrors)": [[209, "sympy.polys.polyerrors.NotInvertible"]], "notreversible (class in sympy.polys.polyerrors)": [[209, "sympy.polys.polyerrors.NotReversible"]], "operationnotsupported (class in sympy.polys.polyerrors)": [[209, "sympy.polys.polyerrors.OperationNotSupported"]], "optionerror (class in sympy.polys.polyerrors)": [[209, "sympy.polys.polyerrors.OptionError"]], "options (class in sympy.polys.polyoptions)": [[209, "sympy.polys.polyoptions.Options"]], "polificationfailed (class in sympy.polys.polyerrors)": [[209, "sympy.polys.polyerrors.PolificationFailed"]], "polynomialerror (class in sympy.polys.polyerrors)": [[209, "sympy.polys.polyerrors.PolynomialError"]], "refinementfailed (class in sympy.polys.polyerrors)": [[209, "sympy.polys.polyerrors.RefinementFailed"]], "unificationfailed (class in sympy.polys.polyerrors)": [[209, "sympy.polys.polyerrors.UnificationFailed"]], "univariatepolynomialerror (class in sympy.polys.polyerrors)": [[209, "sympy.polys.polyerrors.UnivariatePolynomialError"]], "_modgcd_multivariate_p() (in module sympy.polys.modulargcd)": [[209, "sympy.polys.modulargcd._modgcd_multivariate_p"]], "build_options() (in module sympy.polys.polyoptions)": [[209, "sympy.polys.polyoptions.build_options"]], "clone() (sympy.polys.polyoptions.options method)": [[209, "sympy.polys.polyoptions.Options.clone"]], "dmp_lc() (in module sympy.polys.densebasic)": [[209, "sympy.polys.densebasic.dmp_LC"]], "dmp_tc() (in module sympy.polys.densebasic)": [[209, "sympy.polys.densebasic.dmp_TC"]], "dmp_abs() (in module sympy.polys.densearith)": [[209, "sympy.polys.densearith.dmp_abs"]], "dmp_add() (in module sympy.polys.densearith)": [[209, "sympy.polys.densearith.dmp_add"]], "dmp_add_ground() (in module sympy.polys.densearith)": [[209, "sympy.polys.densearith.dmp_add_ground"]], "dmp_add_mul() (in module sympy.polys.densearith)": [[209, "sympy.polys.densearith.dmp_add_mul"]], "dmp_add_term() (in module sympy.polys.densearith)": [[209, "sympy.polys.densearith.dmp_add_term"]], "dmp_apply_pairs() (in module sympy.polys.densebasic)": [[209, "sympy.polys.densebasic.dmp_apply_pairs"]], "dmp_cancel() (in module sympy.polys.euclidtools)": [[209, "sympy.polys.euclidtools.dmp_cancel"]], "dmp_clear_denoms() (in module sympy.polys.densetools)": [[209, "sympy.polys.densetools.dmp_clear_denoms"]], "dmp_compose() (in module sympy.polys.densetools)": [[209, "sympy.polys.densetools.dmp_compose"]], "dmp_content() (in module sympy.polys.euclidtools)": [[209, "sympy.polys.euclidtools.dmp_content"]], "dmp_convert() (in module sympy.polys.densebasic)": [[209, "sympy.polys.densebasic.dmp_convert"]], "dmp_copy() (in module sympy.polys.densebasic)": [[209, "sympy.polys.densebasic.dmp_copy"]], "dmp_deflate() (in module sympy.polys.densebasic)": [[209, "sympy.polys.densebasic.dmp_deflate"]], "dmp_degree() (in module sympy.polys.densebasic)": [[209, "sympy.polys.densebasic.dmp_degree"]], "dmp_degree_in() (in module sympy.polys.densebasic)": [[209, "sympy.polys.densebasic.dmp_degree_in"]], "dmp_degree_list() (in module sympy.polys.densebasic)": [[209, "sympy.polys.densebasic.dmp_degree_list"]], "dmp_diff() (in module sympy.polys.densetools)": [[209, "sympy.polys.densetools.dmp_diff"]], "dmp_diff_eval_in() (in module sympy.polys.densetools)": [[209, "sympy.polys.densetools.dmp_diff_eval_in"]], "dmp_diff_in() (in module sympy.polys.densetools)": [[209, "sympy.polys.densetools.dmp_diff_in"]], "dmp_discriminant() (in module sympy.polys.euclidtools)": [[209, "sympy.polys.euclidtools.dmp_discriminant"]], "dmp_div() (in module sympy.polys.densearith)": [[209, "sympy.polys.densearith.dmp_div"]], "dmp_eject() (in module sympy.polys.densebasic)": [[209, "sympy.polys.densebasic.dmp_eject"]], "dmp_euclidean_prs() (in module sympy.polys.euclidtools)": [[209, "sympy.polys.euclidtools.dmp_euclidean_prs"]], "dmp_eval() (in module sympy.polys.densetools)": [[209, "sympy.polys.densetools.dmp_eval"]], "dmp_eval_in() (in module sympy.polys.densetools)": [[209, "sympy.polys.densetools.dmp_eval_in"]], "dmp_eval_tail() (in module sympy.polys.densetools)": [[209, "sympy.polys.densetools.dmp_eval_tail"]], "dmp_exclude() (in module sympy.polys.densebasic)": [[209, "sympy.polys.densebasic.dmp_exclude"]], "dmp_expand() (in module sympy.polys.densearith)": [[209, "sympy.polys.densearith.dmp_expand"]], "dmp_exquo() (in module sympy.polys.densearith)": [[209, "sympy.polys.densearith.dmp_exquo"]], "dmp_exquo_ground() (in module sympy.polys.densearith)": [[209, "sympy.polys.densearith.dmp_exquo_ground"]], "dmp_ext_factor() (in module sympy.polys.factortools)": [[209, "sympy.polys.factortools.dmp_ext_factor"]], "dmp_factor_list() (in module sympy.polys.factortools)": [[209, "sympy.polys.factortools.dmp_factor_list"]], "dmp_factor_list_include() (in module sympy.polys.factortools)": [[209, "sympy.polys.factortools.dmp_factor_list_include"]], "dmp_ff_div() (in module sympy.polys.densearith)": [[209, "sympy.polys.densearith.dmp_ff_div"]], "dmp_ff_prs_gcd() (in module sympy.polys.euclidtools)": [[209, "sympy.polys.euclidtools.dmp_ff_prs_gcd"]], "dmp_from_dict() (in module sympy.polys.densebasic)": [[209, "sympy.polys.densebasic.dmp_from_dict"]], "dmp_from_sympy() (in module sympy.polys.densebasic)": [[209, "sympy.polys.densebasic.dmp_from_sympy"]], "dmp_gcd() (in module sympy.polys.euclidtools)": [[209, "sympy.polys.euclidtools.dmp_gcd"]], "dmp_gcdex() (in module sympy.polys.euclidtools)": [[209, "sympy.polys.euclidtools.dmp_gcdex"]], "dmp_ground() (in module sympy.polys.densebasic)": [[209, "sympy.polys.densebasic.dmp_ground"]], "dmp_ground_lc() (in module sympy.polys.densebasic)": [[209, "sympy.polys.densebasic.dmp_ground_LC"]], "dmp_ground_tc() (in module sympy.polys.densebasic)": [[209, "sympy.polys.densebasic.dmp_ground_TC"]], "dmp_ground_content() (in module sympy.polys.densetools)": [[209, "sympy.polys.densetools.dmp_ground_content"]], "dmp_ground_extract() (in module sympy.polys.densetools)": [[209, "sympy.polys.densetools.dmp_ground_extract"]], "dmp_ground_monic() (in module sympy.polys.densetools)": [[209, "sympy.polys.densetools.dmp_ground_monic"]], "dmp_ground_nth() (in module sympy.polys.densebasic)": [[209, "sympy.polys.densebasic.dmp_ground_nth"]], "dmp_ground_p() (in module sympy.polys.densebasic)": [[209, "sympy.polys.densebasic.dmp_ground_p"]], "dmp_ground_primitive() (in module sympy.polys.densetools)": [[209, "sympy.polys.densetools.dmp_ground_primitive"]], "dmp_ground_trunc() (in module sympy.polys.densetools)": [[209, "sympy.polys.densetools.dmp_ground_trunc"]], "dmp_grounds() (in module sympy.polys.densebasic)": [[209, "sympy.polys.densebasic.dmp_grounds"]], "dmp_half_gcdex() (in module sympy.polys.euclidtools)": [[209, "sympy.polys.euclidtools.dmp_half_gcdex"]], "dmp_include() (in module sympy.polys.densebasic)": [[209, "sympy.polys.densebasic.dmp_include"]], "dmp_inflate() (in module sympy.polys.densebasic)": [[209, "sympy.polys.densebasic.dmp_inflate"]], "dmp_inject() (in module sympy.polys.densebasic)": [[209, "sympy.polys.densebasic.dmp_inject"]], "dmp_inner_gcd() (in module sympy.polys.euclidtools)": [[209, "sympy.polys.euclidtools.dmp_inner_gcd"]], "dmp_inner_subresultants() (in module sympy.polys.euclidtools)": [[209, "sympy.polys.euclidtools.dmp_inner_subresultants"]], "dmp_integrate() (in module sympy.polys.densetools)": [[209, "sympy.polys.densetools.dmp_integrate"]], "dmp_integrate_in() (in module sympy.polys.densetools)": [[209, "sympy.polys.densetools.dmp_integrate_in"]], "dmp_invert() (in module sympy.polys.euclidtools)": [[209, "sympy.polys.euclidtools.dmp_invert"]], "dmp_irreducible_p() (in module sympy.polys.factortools)": [[209, "sympy.polys.factortools.dmp_irreducible_p"]], "dmp_l1_norm() (in module sympy.polys.densearith)": [[209, "sympy.polys.densearith.dmp_l1_norm"]], "dmp_lcm() (in module sympy.polys.euclidtools)": [[209, "sympy.polys.euclidtools.dmp_lcm"]], "dmp_lift() (in module sympy.polys.densetools)": [[209, "sympy.polys.densetools.dmp_lift"]], "dmp_list_terms() (in module sympy.polys.densebasic)": [[209, "sympy.polys.densebasic.dmp_list_terms"]], "dmp_max_norm() (in module sympy.polys.densearith)": [[209, "sympy.polys.densearith.dmp_max_norm"]], "dmp_mul() (in module sympy.polys.densearith)": [[209, "sympy.polys.densearith.dmp_mul"]], "dmp_mul_ground() (in module sympy.polys.densearith)": [[209, "sympy.polys.densearith.dmp_mul_ground"]], "dmp_mul_term() (in module sympy.polys.densearith)": [[209, "sympy.polys.densearith.dmp_mul_term"]], "dmp_multi_deflate() (in module sympy.polys.densebasic)": [[209, "sympy.polys.densebasic.dmp_multi_deflate"]], "dmp_neg() (in module sympy.polys.densearith)": [[209, "sympy.polys.densearith.dmp_neg"]], "dmp_negative_p() (in module sympy.polys.densebasic)": [[209, "sympy.polys.densebasic.dmp_negative_p"]], "dmp_nest() (in module sympy.polys.densebasic)": [[209, "sympy.polys.densebasic.dmp_nest"]], "dmp_normal() (in module sympy.polys.densebasic)": [[209, "sympy.polys.densebasic.dmp_normal"]], "dmp_nth() (in module sympy.polys.densebasic)": [[209, "sympy.polys.densebasic.dmp_nth"]], "dmp_one() (in module sympy.polys.densebasic)": [[209, "sympy.polys.densebasic.dmp_one"]], "dmp_one_p() (in module sympy.polys.densebasic)": [[209, "sympy.polys.densebasic.dmp_one_p"]], "dmp_pdiv() (in module sympy.polys.densearith)": [[209, "sympy.polys.densearith.dmp_pdiv"]], "dmp_permute() (in module sympy.polys.densebasic)": [[209, "sympy.polys.densebasic.dmp_permute"]], "dmp_pexquo() (in module sympy.polys.densearith)": [[209, "sympy.polys.densearith.dmp_pexquo"]], "dmp_positive_p() (in module sympy.polys.densebasic)": [[209, "sympy.polys.densebasic.dmp_positive_p"]], "dmp_pow() (in module sympy.polys.densearith)": [[209, "sympy.polys.densearith.dmp_pow"]], "dmp_pquo() (in module sympy.polys.densearith)": [[209, "sympy.polys.densearith.dmp_pquo"]], "dmp_prem() (in module sympy.polys.densearith)": [[209, "sympy.polys.densearith.dmp_prem"]], "dmp_primitive() (in module sympy.polys.euclidtools)": [[209, "sympy.polys.euclidtools.dmp_primitive"]], "dmp_primitive_prs() (in module sympy.polys.euclidtools)": [[209, "sympy.polys.euclidtools.dmp_primitive_prs"]], "dmp_prs_resultant() (in module sympy.polys.euclidtools)": [[209, "sympy.polys.euclidtools.dmp_prs_resultant"]], "dmp_qq_collins_resultant() (in module sympy.polys.euclidtools)": [[209, "sympy.polys.euclidtools.dmp_qq_collins_resultant"]], "dmp_qq_heu_gcd() (in module sympy.polys.euclidtools)": [[209, "sympy.polys.euclidtools.dmp_qq_heu_gcd"]], "dmp_quo() (in module sympy.polys.densearith)": [[209, "sympy.polys.densearith.dmp_quo"]], "dmp_quo_ground() (in module sympy.polys.densearith)": [[209, "sympy.polys.densearith.dmp_quo_ground"]], "dmp_raise() (in module sympy.polys.densebasic)": [[209, "sympy.polys.densebasic.dmp_raise"]], "dmp_rem() (in module sympy.polys.densearith)": [[209, "sympy.polys.densearith.dmp_rem"]], "dmp_resultant() (in module sympy.polys.euclidtools)": [[209, "sympy.polys.euclidtools.dmp_resultant"]], "dmp_revert() (in module sympy.polys.densetools)": [[209, "sympy.polys.densetools.dmp_revert"]], "dmp_rr_div() (in module sympy.polys.densearith)": [[209, "sympy.polys.densearith.dmp_rr_div"]], "dmp_rr_prs_gcd() (in module sympy.polys.euclidtools)": [[209, "sympy.polys.euclidtools.dmp_rr_prs_gcd"]], "dmp_slice() (in module sympy.polys.densebasic)": [[209, "sympy.polys.densebasic.dmp_slice"]], "dmp_sqr() (in module sympy.polys.densearith)": [[209, "sympy.polys.densearith.dmp_sqr"]], "dmp_strip() (in module sympy.polys.densebasic)": [[209, "sympy.polys.densebasic.dmp_strip"]], "dmp_sub() (in module sympy.polys.densearith)": [[209, "sympy.polys.densearith.dmp_sub"]], "dmp_sub_ground() (in module sympy.polys.densearith)": [[209, "sympy.polys.densearith.dmp_sub_ground"]], "dmp_sub_mul() (in module sympy.polys.densearith)": [[209, "sympy.polys.densearith.dmp_sub_mul"]], "dmp_sub_term() (in module sympy.polys.densearith)": [[209, "sympy.polys.densearith.dmp_sub_term"]], "dmp_subresultants() (in module sympy.polys.euclidtools)": [[209, "sympy.polys.euclidtools.dmp_subresultants"]], "dmp_swap() (in module sympy.polys.densebasic)": [[209, "sympy.polys.densebasic.dmp_swap"]], "dmp_terms_gcd() (in module sympy.polys.densebasic)": [[209, "sympy.polys.densebasic.dmp_terms_gcd"]], "dmp_to_dict() (in module sympy.polys.densebasic)": [[209, "sympy.polys.densebasic.dmp_to_dict"]], "dmp_to_tuple() (in module sympy.polys.densebasic)": [[209, "sympy.polys.densebasic.dmp_to_tuple"]], "dmp_trial_division() (in module sympy.polys.factortools)": [[209, "sympy.polys.factortools.dmp_trial_division"]], "dmp_true_lt() (in module sympy.polys.densebasic)": [[209, "sympy.polys.densebasic.dmp_true_LT"]], "dmp_trunc() (in module sympy.polys.densetools)": [[209, "sympy.polys.densetools.dmp_trunc"]], "dmp_validate() (in module sympy.polys.densebasic)": [[209, "sympy.polys.densebasic.dmp_validate"]], "dmp_zero() (in module sympy.polys.densebasic)": [[209, "sympy.polys.densebasic.dmp_zero"]], "dmp_zero_p() (in module sympy.polys.densebasic)": [[209, "sympy.polys.densebasic.dmp_zero_p"]], "dmp_zeros() (in module sympy.polys.densebasic)": [[209, "sympy.polys.densebasic.dmp_zeros"]], "dmp_zz_collins_resultant() (in module sympy.polys.euclidtools)": [[209, "sympy.polys.euclidtools.dmp_zz_collins_resultant"]], "dmp_zz_diophantine() (in module sympy.polys.factortools)": [[209, "sympy.polys.factortools.dmp_zz_diophantine"]], "dmp_zz_factor() (in module sympy.polys.factortools)": [[209, "sympy.polys.factortools.dmp_zz_factor"]], "dmp_zz_heu_gcd() (in module sympy.polys.euclidtools)": [[209, "sympy.polys.euclidtools.dmp_zz_heu_gcd"]], "dmp_zz_mignotte_bound() (in module sympy.polys.factortools)": [[209, "sympy.polys.factortools.dmp_zz_mignotte_bound"]], "dmp_zz_modular_resultant() (in module sympy.polys.euclidtools)": [[209, "sympy.polys.euclidtools.dmp_zz_modular_resultant"]], "dmp_zz_wang() (in module sympy.polys.factortools)": [[209, "sympy.polys.factortools.dmp_zz_wang"]], "dmp_zz_wang_hensel_lifting() (in module sympy.polys.factortools)": [[209, "sympy.polys.factortools.dmp_zz_wang_hensel_lifting"]], "dmp_zz_wang_lead_coeffs() (in module sympy.polys.factortools)": [[209, "sympy.polys.factortools.dmp_zz_wang_lead_coeffs"]], "dmp_zz_wang_non_divisors() (in module sympy.polys.factortools)": [[209, "sympy.polys.factortools.dmp_zz_wang_non_divisors"]], "dmp_zz_wang_test_points() (in module sympy.polys.factortools)": [[209, "sympy.polys.factortools.dmp_zz_wang_test_points"]], "dup_content() (in module sympy.polys.densetools)": [[209, "sympy.polys.densetools.dup_content"]], "dup_cyclotomic_p() (in module sympy.polys.factortools)": [[209, "sympy.polys.factortools.dup_cyclotomic_p"]], "dup_decompose() (in module sympy.polys.densetools)": [[209, "sympy.polys.densetools.dup_decompose"]], "dup_extract() (in module sympy.polys.densetools)": [[209, "sympy.polys.densetools.dup_extract"]], "dup_gf_factor() (in module sympy.polys.factortools)": [[209, "sympy.polys.factortools.dup_gf_factor"]], "dup_lshift() (in module sympy.polys.densearith)": [[209, "sympy.polys.densearith.dup_lshift"]], "dup_mirror() (in module sympy.polys.densetools)": [[209, "sympy.polys.densetools.dup_mirror"]], "dup_monic() (in module sympy.polys.densetools)": [[209, "sympy.polys.densetools.dup_monic"]], "dup_primitive() (in module sympy.polys.densetools)": [[209, "sympy.polys.densetools.dup_primitive"]], "dup_random() (in module sympy.polys.densebasic)": [[209, "sympy.polys.densebasic.dup_random"]], "dup_real_imag() (in module sympy.polys.densetools)": [[209, "sympy.polys.densetools.dup_real_imag"]], "dup_reverse() (in module sympy.polys.densebasic)": [[209, "sympy.polys.densebasic.dup_reverse"]], "dup_rshift() (in module sympy.polys.densearith)": [[209, "sympy.polys.densearith.dup_rshift"]], "dup_scale() (in module sympy.polys.densetools)": [[209, "sympy.polys.densetools.dup_scale"]], "dup_shift() (in module sympy.polys.densetools)": [[209, "sympy.polys.densetools.dup_shift"]], "dup_sign_variations() (in module sympy.polys.densetools)": [[209, "sympy.polys.densetools.dup_sign_variations"]], "dup_transform() (in module sympy.polys.densetools)": [[209, "sympy.polys.densetools.dup_transform"]], "dup_zz_cyclotomic_factor() (in module sympy.polys.factortools)": [[209, "sympy.polys.factortools.dup_zz_cyclotomic_factor"]], "dup_zz_cyclotomic_poly() (in module sympy.polys.factortools)": [[209, "sympy.polys.factortools.dup_zz_cyclotomic_poly"]], "dup_zz_factor() (in module sympy.polys.factortools)": [[209, "sympy.polys.factortools.dup_zz_factor"]], "dup_zz_factor_sqf() (in module sympy.polys.factortools)": [[209, "sympy.polys.factortools.dup_zz_factor_sqf"]], "dup_zz_hensel_lift() (in module sympy.polys.factortools)": [[209, "sympy.polys.factortools.dup_zz_hensel_lift"]], "dup_zz_hensel_step() (in module sympy.polys.factortools)": [[209, "sympy.polys.factortools.dup_zz_hensel_step"]], "dup_zz_irreducible_p() (in module sympy.polys.factortools)": [[209, "sympy.polys.factortools.dup_zz_irreducible_p"]], "dup_zz_zassenhaus() (in module sympy.polys.factortools)": [[209, "sympy.polys.factortools.dup_zz_zassenhaus"]], "func_field_modgcd() (in module sympy.polys.modulargcd)": [[209, "sympy.polys.modulargcd.func_field_modgcd"]], "gf_lc() (in module sympy.polys.galoistools)": [[209, "sympy.polys.galoistools.gf_LC"]], "gf_qbasis() (in module sympy.polys.galoistools)": [[209, "sympy.polys.galoistools.gf_Qbasis"]], "gf_qmatrix() (in module sympy.polys.galoistools)": [[209, "sympy.polys.galoistools.gf_Qmatrix"]], "gf_tc() (in module sympy.polys.galoistools)": [[209, "sympy.polys.galoistools.gf_TC"]], "gf_add() (in module sympy.polys.galoistools)": [[209, "sympy.polys.galoistools.gf_add"]], "gf_add_ground() (in module sympy.polys.galoistools)": [[209, "sympy.polys.galoistools.gf_add_ground"]], "gf_add_mul() (in module sympy.polys.galoistools)": [[209, "sympy.polys.galoistools.gf_add_mul"]], "gf_berlekamp() (in module sympy.polys.galoistools)": [[209, "sympy.polys.galoistools.gf_berlekamp"]], "gf_cofactors() (in module sympy.polys.galoistools)": [[209, "sympy.polys.galoistools.gf_cofactors"]], "gf_compose() (in module sympy.polys.galoistools)": [[209, "sympy.polys.galoistools.gf_compose"]], "gf_compose_mod() (in module sympy.polys.galoistools)": [[209, "sympy.polys.galoistools.gf_compose_mod"]], "gf_crt() (in module sympy.polys.galoistools)": [[209, "sympy.polys.galoistools.gf_crt"]], "gf_crt1() (in module sympy.polys.galoistools)": [[209, "sympy.polys.galoistools.gf_crt1"]], "gf_crt2() (in module sympy.polys.galoistools)": [[209, "sympy.polys.galoistools.gf_crt2"]], "gf_csolve() (in module sympy.polys.galoistools)": [[209, "sympy.polys.galoistools.gf_csolve"]], "gf_degree() (in module sympy.polys.galoistools)": [[209, "sympy.polys.galoistools.gf_degree"]], "gf_diff() (in module sympy.polys.galoistools)": [[209, "sympy.polys.galoistools.gf_diff"]], "gf_div() (in module sympy.polys.galoistools)": [[209, "sympy.polys.galoistools.gf_div"]], "gf_eval() (in module sympy.polys.galoistools)": [[209, "sympy.polys.galoistools.gf_eval"]], "gf_expand() (in module sympy.polys.galoistools)": [[209, "sympy.polys.galoistools.gf_expand"]], "gf_exquo() (in module sympy.polys.galoistools)": [[209, "sympy.polys.galoistools.gf_exquo"]], "gf_factor() (in module sympy.polys.galoistools)": [[209, "sympy.polys.galoistools.gf_factor"]], "gf_factor_sqf() (in module sympy.polys.galoistools)": [[209, "sympy.polys.galoistools.gf_factor_sqf"]], "gf_from_dict() (in module sympy.polys.galoistools)": [[209, "sympy.polys.galoistools.gf_from_dict"]], "gf_from_int_poly() (in module sympy.polys.galoistools)": [[209, "sympy.polys.galoistools.gf_from_int_poly"]], "gf_gcd() (in module sympy.polys.galoistools)": [[209, "sympy.polys.galoistools.gf_gcd"]], "gf_gcdex() (in module sympy.polys.galoistools)": [[209, "sympy.polys.galoistools.gf_gcdex"]], "gf_int() (in module sympy.polys.galoistools)": [[209, "sympy.polys.galoistools.gf_int"]], "gf_irreducible() (in module sympy.polys.galoistools)": [[209, "sympy.polys.galoistools.gf_irreducible"]], "gf_irreducible_p() (in module sympy.polys.galoistools)": [[209, "sympy.polys.galoistools.gf_irreducible_p"]], "gf_lcm() (in module sympy.polys.galoistools)": [[209, "sympy.polys.galoistools.gf_lcm"]], "gf_lshift() (in module sympy.polys.galoistools)": [[209, "sympy.polys.galoistools.gf_lshift"]], "gf_monic() (in module sympy.polys.galoistools)": [[209, "sympy.polys.galoistools.gf_monic"]], "gf_mul() (in module sympy.polys.galoistools)": [[209, "sympy.polys.galoistools.gf_mul"]], "gf_mul_ground() (in module sympy.polys.galoistools)": [[209, "sympy.polys.galoistools.gf_mul_ground"]], "gf_multi_eval() (in module sympy.polys.galoistools)": [[209, "sympy.polys.galoistools.gf_multi_eval"]], "gf_neg() (in module sympy.polys.galoistools)": [[209, "sympy.polys.galoistools.gf_neg"]], "gf_normal() (in module sympy.polys.galoistools)": [[209, "sympy.polys.galoistools.gf_normal"]], "gf_pow() (in module sympy.polys.galoistools)": [[209, "sympy.polys.galoistools.gf_pow"]], "gf_pow_mod() (in module sympy.polys.galoistools)": [[209, "sympy.polys.galoistools.gf_pow_mod"]], "gf_quo() (in module sympy.polys.galoistools)": [[209, "sympy.polys.galoistools.gf_quo"]], "gf_quo_ground() (in module sympy.polys.galoistools)": [[209, "sympy.polys.galoistools.gf_quo_ground"]], "gf_random() (in module sympy.polys.galoistools)": [[209, "sympy.polys.galoistools.gf_random"]], "gf_rem() (in module sympy.polys.galoistools)": [[209, "sympy.polys.galoistools.gf_rem"]], "gf_rshift() (in module sympy.polys.galoistools)": [[209, "sympy.polys.galoistools.gf_rshift"]], "gf_shoup() (in module sympy.polys.galoistools)": [[209, "sympy.polys.galoistools.gf_shoup"]], "gf_sqf_list() (in module sympy.polys.galoistools)": [[209, "sympy.polys.galoistools.gf_sqf_list"]], "gf_sqf_p() (in module sympy.polys.galoistools)": [[209, "sympy.polys.galoistools.gf_sqf_p"]], "gf_sqf_part() (in module sympy.polys.galoistools)": [[209, "sympy.polys.galoistools.gf_sqf_part"]], "gf_sqr() (in module sympy.polys.galoistools)": [[209, "sympy.polys.galoistools.gf_sqr"]], "gf_strip() (in module sympy.polys.galoistools)": [[209, "sympy.polys.galoistools.gf_strip"]], "gf_sub() (in module sympy.polys.galoistools)": [[209, "sympy.polys.galoistools.gf_sub"]], "gf_sub_ground() (in module sympy.polys.galoistools)": [[209, "sympy.polys.galoistools.gf_sub_ground"]], "gf_sub_mul() (in module sympy.polys.galoistools)": [[209, "sympy.polys.galoistools.gf_sub_mul"]], "gf_to_dict() (in module sympy.polys.galoistools)": [[209, "sympy.polys.galoistools.gf_to_dict"]], "gf_to_int_poly() (in module sympy.polys.galoistools)": [[209, "sympy.polys.galoistools.gf_to_int_poly"]], "gf_trace_map() (in module sympy.polys.galoistools)": [[209, "sympy.polys.galoistools.gf_trace_map"]], "gf_trunc() (in module sympy.polys.galoistools)": [[209, "sympy.polys.galoistools.gf_trunc"]], "gf_value() (in module sympy.polys.galoistools)": [[209, "sympy.polys.galoistools.gf_value"]], "gf_zassenhaus() (in module sympy.polys.galoistools)": [[209, "sympy.polys.galoistools.gf_zassenhaus"]], "groebner() (in module sympy.polys.groebnertools)": [[209, "sympy.polys.groebnertools.groebner"]], "is_groebner() (in module sympy.polys.groebnertools)": [[209, "sympy.polys.groebnertools.is_groebner"]], "is_minimal() (in module sympy.polys.groebnertools)": [[209, "sympy.polys.groebnertools.is_minimal"]], "is_reduced() (in module sympy.polys.groebnertools)": [[209, "sympy.polys.groebnertools.is_reduced"]], "matrix_fglm() (in module sympy.polys.fglmtools)": [[209, "sympy.polys.fglmtools.matrix_fglm"]], "modgcd_bivariate() (in module sympy.polys.modulargcd)": [[209, "sympy.polys.modulargcd.modgcd_bivariate"]], "modgcd_multivariate() (in module sympy.polys.modulargcd)": [[209, "sympy.polys.modulargcd.modgcd_multivariate"]], "modgcd_univariate() (in module sympy.polys.modulargcd)": [[209, "sympy.polys.modulargcd.modgcd_univariate"]], "red_groebner() (in module sympy.polys.groebnertools)": [[209, "sympy.polys.groebnertools.red_groebner"]], "sdm_lc() (in module sympy.polys.distributedmodules)": [[209, "sympy.polys.distributedmodules.sdm_LC"]], "sdm_lm() (in module sympy.polys.distributedmodules)": [[209, "sympy.polys.distributedmodules.sdm_LM"]], "sdm_lt() (in module sympy.polys.distributedmodules)": [[209, "sympy.polys.distributedmodules.sdm_LT"]], "sdm_add() (in module sympy.polys.distributedmodules)": [[209, "sympy.polys.distributedmodules.sdm_add"]], "sdm_deg() (in module sympy.polys.distributedmodules)": [[209, "sympy.polys.distributedmodules.sdm_deg"]], "sdm_ecart() (in module sympy.polys.distributedmodules)": [[209, "sympy.polys.distributedmodules.sdm_ecart"]], "sdm_from_dict() (in module sympy.polys.distributedmodules)": [[209, "sympy.polys.distributedmodules.sdm_from_dict"]], "sdm_from_vector() (in module sympy.polys.distributedmodules)": [[209, "sympy.polys.distributedmodules.sdm_from_vector"]], "sdm_groebner() (in module sympy.polys.distributedmodules)": [[209, "sympy.polys.distributedmodules.sdm_groebner"]], "sdm_monomial_deg() (in module sympy.polys.distributedmodules)": [[209, "sympy.polys.distributedmodules.sdm_monomial_deg"]], "sdm_monomial_divides() (in module sympy.polys.distributedmodules)": [[209, "sympy.polys.distributedmodules.sdm_monomial_divides"]], "sdm_monomial_mul() (in module sympy.polys.distributedmodules)": [[209, "sympy.polys.distributedmodules.sdm_monomial_mul"]], "sdm_mul_term() (in module sympy.polys.distributedmodules)": [[209, "sympy.polys.distributedmodules.sdm_mul_term"]], "sdm_nf_mora() (in module sympy.polys.distributedmodules)": [[209, "sympy.polys.distributedmodules.sdm_nf_mora"]], "sdm_spoly() (in module sympy.polys.distributedmodules)": [[209, "sympy.polys.distributedmodules.sdm_spoly"]], "sdm_to_dict() (in module sympy.polys.distributedmodules)": [[209, "sympy.polys.distributedmodules.sdm_to_dict"]], "sdm_to_vector() (in module sympy.polys.distributedmodules)": [[209, "sympy.polys.distributedmodules.sdm_to_vector"]], "sdm_zero() (in module sympy.polys.distributedmodules)": [[209, "sympy.polys.distributedmodules.sdm_zero"]], "setup() (in module sympy.polys.polyconfig)": [[209, "sympy.polys.polyconfig.setup"]], "spoly() (in module sympy.polys.groebnertools)": [[209, "sympy.polys.groebnertools.spoly"]], "sympy.polys.polyconfig": [[209, "module-sympy.polys.polyconfig"]], "sympy.polys.polyoptions": [[209, "module-sympy.polys.polyoptions"]], "algintpowers (class in sympy.polys.numberfields.utilities)": [[211, "sympy.polys.numberfields.utilities.AlgIntPowers"]], "endomorphismring (class in sympy.polys.numberfields.modules)": [[211, "sympy.polys.numberfields.modules.EndomorphismRing"]], "innerendomorphism (class in sympy.polys.numberfields.modules)": [[211, "sympy.polys.numberfields.modules.InnerEndomorphism"]], "module (class in sympy.polys.numberfields.modules)": [[211, "sympy.polys.numberfields.modules.Module"]], "moduleelement (class in sympy.polys.numberfields.modules)": [[211, "sympy.polys.numberfields.modules.ModuleElement"]], "moduleendomorphism (class in sympy.polys.numberfields.modules)": [[211, "sympy.polys.numberfields.modules.ModuleEndomorphism"]], "modulehomomorphism (class in sympy.polys.numberfields.modules)": [[211, "sympy.polys.numberfields.modules.ModuleHomomorphism"]], "powerbasis (class in sympy.polys.numberfields.modules)": [[211, "sympy.polys.numberfields.modules.PowerBasis"]], "powerbasiselement (class in sympy.polys.numberfields.modules)": [[211, "sympy.polys.numberfields.modules.PowerBasisElement"]], "primeideal (class in sympy.polys.numberfields.primes)": [[211, "sympy.polys.numberfields.primes.PrimeIdeal"]], "qq_col (sympy.polys.numberfields.modules.moduleelement property)": [[211, "sympy.polys.numberfields.modules.ModuleElement.QQ_col"]], "qq_matrix (sympy.polys.numberfields.modules.submodule property)": [[211, "sympy.polys.numberfields.modules.Submodule.QQ_matrix"]], "submodule (class in sympy.polys.numberfields.modules)": [[211, "sympy.polys.numberfields.modules.Submodule"]], "t (sympy.polys.numberfields.modules.powerbasiselement property)": [[211, "sympy.polys.numberfields.modules.PowerBasisElement.T"]], "__add__() (sympy.polys.numberfields.modules.moduleelement method)": [[211, "sympy.polys.numberfields.modules.ModuleElement.__add__"]], "__add__() (sympy.polys.numberfields.primes.primeideal method)": [[211, "sympy.polys.numberfields.primes.PrimeIdeal.__add__"]], "__call__() (sympy.polys.numberfields.modules.module method)": [[211, "sympy.polys.numberfields.modules.Module.__call__"]], "__init__() (sympy.polys.numberfields.modules.endomorphismring method)": [[211, "sympy.polys.numberfields.modules.EndomorphismRing.__init__"]], "__init__() (sympy.polys.numberfields.modules.innerendomorphism method)": [[211, "sympy.polys.numberfields.modules.InnerEndomorphism.__init__"]], "__init__() (sympy.polys.numberfields.modules.moduleelement method)": [[211, "sympy.polys.numberfields.modules.ModuleElement.__init__"]], "__init__() (sympy.polys.numberfields.modules.moduleendomorphism method)": [[211, "sympy.polys.numberfields.modules.ModuleEndomorphism.__init__"]], "__init__() (sympy.polys.numberfields.modules.modulehomomorphism method)": [[211, "sympy.polys.numberfields.modules.ModuleHomomorphism.__init__"]], "__init__() (sympy.polys.numberfields.modules.powerbasis method)": [[211, "sympy.polys.numberfields.modules.PowerBasis.__init__"]], "__init__() (sympy.polys.numberfields.modules.submodule method)": [[211, "sympy.polys.numberfields.modules.Submodule.__init__"]], "__init__() (sympy.polys.numberfields.primes.primeideal method)": [[211, "sympy.polys.numberfields.primes.PrimeIdeal.__init__"]], "__init__() (sympy.polys.numberfields.utilities.algintpowers method)": [[211, "sympy.polys.numberfields.utilities.AlgIntPowers.__init__"]], "__mod__() (sympy.polys.numberfields.modules.moduleelement method)": [[211, "sympy.polys.numberfields.modules.ModuleElement.__mod__"]], "__mul__() (sympy.polys.numberfields.modules.moduleelement method)": [[211, "sympy.polys.numberfields.modules.ModuleElement.__mul__"]], "__mul__() (sympy.polys.numberfields.primes.primeideal method)": [[211, "sympy.polys.numberfields.primes.PrimeIdeal.__mul__"]], "add() (sympy.polys.numberfields.modules.submodule method)": [[211, "sympy.polys.numberfields.modules.Submodule.add"]], "ancestors() (sympy.polys.numberfields.modules.module method)": [[211, "sympy.polys.numberfields.modules.Module.ancestors"]], "as_expr() (sympy.polys.numberfields.modules.powerbasiselement method)": [[211, "sympy.polys.numberfields.modules.PowerBasisElement.as_expr"]], "as_submodule() (sympy.polys.numberfields.primes.primeideal method)": [[211, "sympy.polys.numberfields.primes.PrimeIdeal.as_submodule"]], "basis_element_pullbacks() (sympy.polys.numberfields.modules.submodule method)": [[211, "sympy.polys.numberfields.modules.Submodule.basis_element_pullbacks"]], "basis_elements() (sympy.polys.numberfields.modules.module method)": [[211, "sympy.polys.numberfields.modules.Module.basis_elements"]], "coeff_search() (in module sympy.polys.numberfields.utilities)": [[211, "sympy.polys.numberfields.utilities.coeff_search"]], "column() (sympy.polys.numberfields.modules.moduleelement method)": [[211, "sympy.polys.numberfields.modules.ModuleElement.column"]], "discard_before() (sympy.polys.numberfields.modules.submodule method)": [[211, "sympy.polys.numberfields.modules.Submodule.discard_before"]], "element_from_anp() (sympy.polys.numberfields.modules.powerbasis method)": [[211, "sympy.polys.numberfields.modules.PowerBasis.element_from_ANP"]], "element_from_alg_num() (sympy.polys.numberfields.modules.powerbasis method)": [[211, "sympy.polys.numberfields.modules.PowerBasis.element_from_alg_num"]], "element_from_poly() (sympy.polys.numberfields.modules.powerbasis method)": [[211, "sympy.polys.numberfields.modules.PowerBasis.element_from_poly"]], "element_from_rational() (sympy.polys.numberfields.modules.module method)": [[211, "sympy.polys.numberfields.modules.Module.element_from_rational"]], "endomorphism_ring() (sympy.polys.numberfields.modules.module method)": [[211, "sympy.polys.numberfields.modules.Module.endomorphism_ring"]], "equiv() (sympy.polys.numberfields.modules.moduleelement method)": [[211, "sympy.polys.numberfields.modules.ModuleElement.equiv"]], "extract_fundamental_discriminant() (in module sympy.polys.numberfields.utilities)": [[211, "sympy.polys.numberfields.utilities.extract_fundamental_discriminant"]], "field_isomorphism() (in module sympy.polys.numberfields.subfield)": [[211, "sympy.polys.numberfields.subfield.field_isomorphism"]], "find_min_poly() (in module sympy.polys.numberfields.modules)": [[211, "sympy.polys.numberfields.modules.find_min_poly"]], "from_int_list() (sympy.polys.numberfields.modules.moduleelement class method)": [[211, "sympy.polys.numberfields.modules.ModuleElement.from_int_list"]], "galois_group() (in module sympy.polys.numberfields.galoisgroups)": [[211, "sympy.polys.numberfields.galoisgroups.galois_group"]], "generator (sympy.polys.numberfields.modules.powerbasiselement property)": [[211, "sympy.polys.numberfields.modules.PowerBasisElement.generator"]], "get_num_denom() (in module sympy.polys.numberfields.utilities)": [[211, "sympy.polys.numberfields.utilities.get_num_denom"]], "inner_endomorphism() (sympy.polys.numberfields.modules.endomorphismring method)": [[211, "sympy.polys.numberfields.modules.EndomorphismRing.inner_endomorphism"]], "is_compat() (sympy.polys.numberfields.modules.moduleelement method)": [[211, "sympy.polys.numberfields.modules.ModuleElement.is_compat"]], "is_compat_col() (sympy.polys.numberfields.modules.module method)": [[211, "sympy.polys.numberfields.modules.Module.is_compat_col"]], "is_inert (sympy.polys.numberfields.primes.primeideal property)": [[211, "sympy.polys.numberfields.primes.PrimeIdeal.is_inert"]], "is_int() (in module sympy.polys.numberfields.utilities)": [[211, "sympy.polys.numberfields.utilities.is_int"]], "is_rat() (in module sympy.polys.numberfields.utilities)": [[211, "sympy.polys.numberfields.utilities.is_rat"]], "is_rational (sympy.polys.numberfields.modules.powerbasiselement property)": [[211, "sympy.polys.numberfields.modules.PowerBasisElement.is_rational"]], "isolate() (in module sympy.polys.numberfields.utilities)": [[211, "sympy.polys.numberfields.utilities.isolate"]], "kernel() (sympy.polys.numberfields.modules.modulehomomorphism method)": [[211, "sympy.polys.numberfields.modules.ModuleHomomorphism.kernel"]], "make_mod_elt() (in module sympy.polys.numberfields.modules)": [[211, "sympy.polys.numberfields.modules.make_mod_elt"]], "matrix() (sympy.polys.numberfields.modules.modulehomomorphism method)": [[211, "sympy.polys.numberfields.modules.ModuleHomomorphism.matrix"]], "minimal_polynomial() (in module sympy.polys.numberfields.minpoly)": [[211, "sympy.polys.numberfields.minpoly.minimal_polynomial"]], "minpoly() (in module sympy.polys.numberfields.minpoly)": [[211, "sympy.polys.numberfields.minpoly.minpoly"]], "mul() (sympy.polys.numberfields.modules.submodule method)": [[211, "sympy.polys.numberfields.modules.Submodule.mul"]], "mult_tab() (sympy.polys.numberfields.modules.module method)": [[211, "sympy.polys.numberfields.modules.Module.mult_tab"]], "n (sympy.polys.numberfields.modules.module property)": [[211, "sympy.polys.numberfields.modules.Module.n"]], "n (sympy.polys.numberfields.modules.moduleelement property)": [[211, "sympy.polys.numberfields.modules.ModuleElement.n"]], "nearest_common_ancestor() (sympy.polys.numberfields.modules.module method)": [[211, "sympy.polys.numberfields.modules.Module.nearest_common_ancestor"]], "norm() (sympy.polys.numberfields.modules.powerbasiselement method)": [[211, "sympy.polys.numberfields.modules.PowerBasisElement.norm"]], "number_field (sympy.polys.numberfields.modules.module property)": [[211, "sympy.polys.numberfields.modules.Module.number_field"]], "numerator() (sympy.polys.numberfields.modules.powerbasiselement method)": [[211, "sympy.polys.numberfields.modules.PowerBasisElement.numerator"]], "one() (sympy.polys.numberfields.modules.module method)": [[211, "sympy.polys.numberfields.modules.Module.one"]], "over_power_basis() (sympy.polys.numberfields.modules.moduleelement method)": [[211, "sympy.polys.numberfields.modules.ModuleElement.over_power_basis"]], "parent (sympy.polys.numberfields.modules.module property)": [[211, "sympy.polys.numberfields.modules.Module.parent"]], "poly() (sympy.polys.numberfields.modules.powerbasiselement method)": [[211, "sympy.polys.numberfields.modules.PowerBasisElement.poly"]], "power_basis_ancestor() (sympy.polys.numberfields.modules.module method)": [[211, "sympy.polys.numberfields.modules.Module.power_basis_ancestor"]], "prime_decomp() (in module sympy.polys.numberfields.primes)": [[211, "sympy.polys.numberfields.primes.prime_decomp"]], "prime_valuation() (in module sympy.polys.numberfields.primes)": [[211, "sympy.polys.numberfields.primes.prime_valuation"]], "primitive_element() (in module sympy.polys.numberfields.subfield)": [[211, "sympy.polys.numberfields.subfield.primitive_element"]], "reduce_anp() (sympy.polys.numberfields.primes.primeideal method)": [[211, "sympy.polys.numberfields.primes.PrimeIdeal.reduce_ANP"]], "reduce_alg_num() (sympy.polys.numberfields.primes.primeideal method)": [[211, "sympy.polys.numberfields.primes.PrimeIdeal.reduce_alg_num"]], "reduce_element() (sympy.polys.numberfields.modules.submodule method)": [[211, "sympy.polys.numberfields.modules.Submodule.reduce_element"]], "reduce_element() (sympy.polys.numberfields.primes.primeideal method)": [[211, "sympy.polys.numberfields.primes.PrimeIdeal.reduce_element"]], "reduced() (sympy.polys.numberfields.modules.moduleelement method)": [[211, "sympy.polys.numberfields.modules.ModuleElement.reduced"]], "reduced() (sympy.polys.numberfields.modules.submodule method)": [[211, "sympy.polys.numberfields.modules.Submodule.reduced"]], "reduced_mod_p() (sympy.polys.numberfields.modules.moduleelement method)": [[211, "sympy.polys.numberfields.modules.ModuleElement.reduced_mod_p"]], "repr() (sympy.polys.numberfields.primes.primeideal method)": [[211, "sympy.polys.numberfields.primes.PrimeIdeal.repr"]], "represent() (sympy.polys.numberfields.modules.endomorphismring method)": [[211, "sympy.polys.numberfields.modules.EndomorphismRing.represent"]], "represent() (sympy.polys.numberfields.modules.module method)": [[211, "sympy.polys.numberfields.modules.Module.represent"]], "represent() (sympy.polys.numberfields.modules.powerbasis method)": [[211, "sympy.polys.numberfields.modules.PowerBasis.represent"]], "represent() (sympy.polys.numberfields.modules.submodule method)": [[211, "sympy.polys.numberfields.modules.Submodule.represent"]], "round_two() (in module sympy.polys.numberfields.basis)": [[211, "sympy.polys.numberfields.basis.round_two"]], "starts_with_unity() (sympy.polys.numberfields.modules.module method)": [[211, "sympy.polys.numberfields.modules.Module.starts_with_unity"]], "submodule_from_gens() (sympy.polys.numberfields.modules.module method)": [[211, "sympy.polys.numberfields.modules.Module.submodule_from_gens"]], "submodule_from_matrix() (sympy.polys.numberfields.modules.module method)": [[211, "sympy.polys.numberfields.modules.Module.submodule_from_matrix"]], "supplement_a_subspace() (in module sympy.polys.numberfields.utilities)": [[211, "sympy.polys.numberfields.utilities.supplement_a_subspace"]], "sympy.polys.numberfields.modules": [[211, "module-sympy.polys.numberfields.modules"]], "sympy.polys.numberfields.subfield": [[211, "module-sympy.polys.numberfields.subfield"]], "test_factor() (sympy.polys.numberfields.primes.primeideal method)": [[211, "sympy.polys.numberfields.primes.PrimeIdeal.test_factor"]], "to_anp() (sympy.polys.numberfields.modules.powerbasiselement method)": [[211, "sympy.polys.numberfields.modules.PowerBasisElement.to_ANP"]], "to_alg_num() (sympy.polys.numberfields.modules.powerbasiselement method)": [[211, "sympy.polys.numberfields.modules.PowerBasisElement.to_alg_num"]], "to_ancestor() (sympy.polys.numberfields.modules.moduleelement method)": [[211, "sympy.polys.numberfields.modules.ModuleElement.to_ancestor"]], "to_number_field() (in module sympy.polys.numberfields.subfield)": [[211, "sympy.polys.numberfields.subfield.to_number_field"]], "to_parent() (sympy.polys.numberfields.modules.moduleelement method)": [[211, "sympy.polys.numberfields.modules.ModuleElement.to_parent"]], "unify() (sympy.polys.numberfields.modules.moduleelement method)": [[211, "sympy.polys.numberfields.modules.ModuleElement.unify"]], "valuation() (sympy.polys.numberfields.primes.primeideal method)": [[211, "sympy.polys.numberfields.primes.PrimeIdeal.valuation"]], "whole_submodule() (sympy.polys.numberfields.modules.module method)": [[211, "sympy.polys.numberfields.modules.Module.whole_submodule"]], "zero() (sympy.polys.numberfields.modules.module method)": [[211, "sympy.polys.numberfields.modules.Module.zero"]], "complexrootof (class in sympy.polys.rootoftools)": [[212, "sympy.polys.rootoftools.ComplexRootOf"]], "ec() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.EC"]], "em() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.EM"]], "et() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.ET"]], "gradedlexorder (class in sympy.polys.orderings)": [[212, "sympy.polys.orderings.GradedLexOrder"]], "groebnerbasis (class in sympy.polys.polytools)": [[212, "sympy.polys.polytools.GroebnerBasis"]], "lc() (in module sympy.polys.polytools)": [[212, "sympy.polys.polytools.LC"]], "lc() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.LC"]], "lm() (in module sympy.polys.polytools)": [[212, "sympy.polys.polytools.LM"]], "lm() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.LM"]], "lt() (in module sympy.polys.polytools)": [[212, "sympy.polys.polytools.LT"]], "lt() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.LT"]], "lexorder (class in sympy.polys.orderings)": [[212, "sympy.polys.orderings.LexOrder"]], "monomial (class in sympy.polys.monomials)": [[212, "sympy.polys.monomials.Monomial"]], "monomialorder (class in sympy.polys.orderings)": [[212, "sympy.polys.orderings.MonomialOrder"]], "poly (class in sympy.polys.polytools)": [[212, "sympy.polys.polytools.Poly"]], "purepoly (class in sympy.polys.polytools)": [[212, "sympy.polys.polytools.PurePoly"]], "reversedgradedlexorder (class in sympy.polys.orderings)": [[212, "sympy.polys.orderings.ReversedGradedLexOrder"]], "rootof (class in sympy.polys.rootoftools)": [[212, "sympy.polys.rootoftools.RootOf"]], "rootsum (class in sympy.polys.rootoftools)": [[212, "sympy.polys.rootoftools.RootSum"]], "tc() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.TC"]], "_all_roots() (sympy.polys.rootoftools.complexrootof class method)": [[212, "sympy.polys.rootoftools.ComplexRootOf._all_roots"]], "_complexes_index() (sympy.polys.rootoftools.complexrootof class method)": [[212, "sympy.polys.rootoftools.ComplexRootOf._complexes_index"]], "_complexes_sorted() (sympy.polys.rootoftools.complexrootof class method)": [[212, "sympy.polys.rootoftools.ComplexRootOf._complexes_sorted"]], "_count_roots() (sympy.polys.rootoftools.complexrootof class method)": [[212, "sympy.polys.rootoftools.ComplexRootOf._count_roots"]], "_ensure_complexes_init() (sympy.polys.rootoftools.complexrootof method)": [[212, "sympy.polys.rootoftools.ComplexRootOf._ensure_complexes_init"]], "_ensure_reals_init() (sympy.polys.rootoftools.complexrootof method)": [[212, "sympy.polys.rootoftools.ComplexRootOf._ensure_reals_init"]], "_eval_evalf() (sympy.polys.rootoftools.complexrootof method)": [[212, "sympy.polys.rootoftools.ComplexRootOf._eval_evalf"]], "_eval_is_imaginary() (sympy.polys.rootoftools.complexrootof method)": [[212, "sympy.polys.rootoftools.ComplexRootOf._eval_is_imaginary"]], "_eval_is_real() (sympy.polys.rootoftools.complexrootof method)": [[212, "sympy.polys.rootoftools.ComplexRootOf._eval_is_real"]], "_get_complexes() (sympy.polys.rootoftools.complexrootof class method)": [[212, "sympy.polys.rootoftools.ComplexRootOf._get_complexes"]], "_get_complexes_sqf() (sympy.polys.rootoftools.complexrootof class method)": [[212, "sympy.polys.rootoftools.ComplexRootOf._get_complexes_sqf"]], "_get_interval() (sympy.polys.rootoftools.complexrootof method)": [[212, "sympy.polys.rootoftools.ComplexRootOf._get_interval"]], "_get_reals() (sympy.polys.rootoftools.complexrootof class method)": [[212, "sympy.polys.rootoftools.ComplexRootOf._get_reals"]], "_get_reals_sqf() (sympy.polys.rootoftools.complexrootof class method)": [[212, "sympy.polys.rootoftools.ComplexRootOf._get_reals_sqf"]], "_get_roots() (sympy.polys.rootoftools.complexrootof class method)": [[212, "sympy.polys.rootoftools.ComplexRootOf._get_roots"]], "_indexed_root() (sympy.polys.rootoftools.complexrootof class method)": [[212, "sympy.polys.rootoftools.ComplexRootOf._indexed_root"]], "_new() (sympy.polys.rootoftools.complexrootof class method)": [[212, "sympy.polys.rootoftools.ComplexRootOf._new"]], "_postprocess_root() (sympy.polys.rootoftools.complexrootof class method)": [[212, "sympy.polys.rootoftools.ComplexRootOf._postprocess_root"]], "_preprocess_roots() (sympy.polys.rootoftools.complexrootof class method)": [[212, "sympy.polys.rootoftools.ComplexRootOf._preprocess_roots"]], "_real_roots() (sympy.polys.rootoftools.complexrootof class method)": [[212, "sympy.polys.rootoftools.ComplexRootOf._real_roots"]], "_reals_index() (sympy.polys.rootoftools.complexrootof class method)": [[212, "sympy.polys.rootoftools.ComplexRootOf._reals_index"]], "_reals_sorted() (sympy.polys.rootoftools.complexrootof class method)": [[212, "sympy.polys.rootoftools.ComplexRootOf._reals_sorted"]], "_refine_complexes() (sympy.polys.rootoftools.complexrootof class method)": [[212, "sympy.polys.rootoftools.ComplexRootOf._refine_complexes"]], "_reset() (sympy.polys.rootoftools.complexrootof method)": [[212, "sympy.polys.rootoftools.ComplexRootOf._reset"]], "_roots_trivial() (sympy.polys.rootoftools.complexrootof class method)": [[212, "sympy.polys.rootoftools.ComplexRootOf._roots_trivial"]], "_set_interval() (sympy.polys.rootoftools.complexrootof method)": [[212, "sympy.polys.rootoftools.ComplexRootOf._set_interval"]], "abs() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.abs"]], "add() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.add"]], "add_ground() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.add_ground"]], "all_coeffs() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.all_coeffs"]], "all_monoms() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.all_monoms"]], "all_roots() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.all_roots"]], "all_roots() (sympy.polys.rootoftools.complexrootof class method)": [[212, "sympy.polys.rootoftools.ComplexRootOf.all_roots"]], "all_terms() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.all_terms"]], "andre_poly() (in module sympy.polys.appellseqs)": [[212, "sympy.polys.appellseqs.andre_poly"]], "apart() (in module sympy.polys.partfrac)": [[212, "sympy.polys.partfrac.apart"]], "apart_list() (in module sympy.polys.partfrac)": [[212, "sympy.polys.partfrac.apart_list"]], "as_dict() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.as_dict"]], "as_expr() (sympy.polys.monomials.monomial method)": [[212, "sympy.polys.monomials.Monomial.as_expr"]], "as_expr() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.as_expr"]], "as_list() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.as_list"]], "as_poly() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.as_poly"]], "assemble_partfrac_list() (in module sympy.polys.partfrac)": [[212, "sympy.polys.partfrac.assemble_partfrac_list"]], "bernoulli_c_poly() (in module sympy.polys.appellseqs)": [[212, "sympy.polys.appellseqs.bernoulli_c_poly"]], "bernoulli_poly() (in module sympy.polys.appellseqs)": [[212, "sympy.polys.appellseqs.bernoulli_poly"]], "cancel() (in module sympy.polys.polytools)": [[212, "sympy.polys.polytools.cancel"]], "cancel() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.cancel"]], "chebyshevt_poly() (in module sympy.polys.orthopolys)": [[212, "sympy.polys.orthopolys.chebyshevt_poly"]], "chebyshevu_poly() (in module sympy.polys.orthopolys)": [[212, "sympy.polys.orthopolys.chebyshevu_poly"]], "clear_cache() (sympy.polys.rootoftools.complexrootof class method)": [[212, "sympy.polys.rootoftools.ComplexRootOf.clear_cache"]], "clear_denoms() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.clear_denoms"]], "coeff_monomial() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.coeff_monomial"]], "coeffs() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.coeffs"]], "cofactors() (in module sympy.polys.polytools)": [[212, "sympy.polys.polytools.cofactors"]], "cofactors() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.cofactors"]], "compose() (in module sympy.polys.polytools)": [[212, "sympy.polys.polytools.compose"]], "compose() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.compose"]], "construct_domain() (in module sympy.polys.constructor)": [[212, "sympy.polys.constructor.construct_domain"]], "contains() (sympy.polys.polytools.groebnerbasis method)": [[212, "sympy.polys.polytools.GroebnerBasis.contains"]], "content() (in module sympy.polys.polytools)": [[212, "sympy.polys.polytools.content"]], "content() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.content"]], "count_roots() (in module sympy.polys.polytools)": [[212, "sympy.polys.polytools.count_roots"]], "count_roots() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.count_roots"]], "cyclotomic_poly() (in module sympy.polys.specialpolys)": [[212, "sympy.polys.specialpolys.cyclotomic_poly"]], "decompose() (in module sympy.polys.polytools)": [[212, "sympy.polys.polytools.decompose"]], "decompose() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.decompose"]], "deflate() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.deflate"]], "degree() (in module sympy.polys.polytools)": [[212, "sympy.polys.polytools.degree"]], "degree() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.degree"]], "degree_list() (in module sympy.polys.polytools)": [[212, "sympy.polys.polytools.degree_list"]], "degree_list() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.degree_list"]], "diff() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.diff"]], "discriminant() (in module sympy.polys.polytools)": [[212, "sympy.polys.polytools.discriminant"]], "discriminant() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.discriminant"]], "dispersion() (in module sympy.polys.dispersion)": [[212, "sympy.polys.dispersion.dispersion"]], "dispersion() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.dispersion"]], "dispersionset() (in module sympy.polys.dispersion)": [[212, "sympy.polys.dispersion.dispersionset"]], "dispersionset() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.dispersionset"]], "div() (in module sympy.polys.polytools)": [[212, "sympy.polys.polytools.div"]], "div() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.div"]], "domain (sympy.polys.polytools.poly property)": [[212, "sympy.polys.polytools.Poly.domain"]], "eject() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.eject"]], "euler_poly() (in module sympy.polys.appellseqs)": [[212, "sympy.polys.appellseqs.euler_poly"]], "eval() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.eval"]], "eval_approx() (sympy.polys.rootoftools.complexrootof method)": [[212, "sympy.polys.rootoftools.ComplexRootOf.eval_approx"]], "eval_rational() (sympy.polys.rootoftools.complexrootof method)": [[212, "sympy.polys.rootoftools.ComplexRootOf.eval_rational"]], "exclude() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.exclude"]], "exquo() (in module sympy.polys.polytools)": [[212, "sympy.polys.polytools.exquo"]], "exquo() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.exquo"]], "exquo_ground() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.exquo_ground"]], "factor() (in module sympy.polys.polytools)": [[212, "sympy.polys.polytools.factor"]], "factor_list() (in module sympy.polys.polytools)": [[212, "sympy.polys.polytools.factor_list"]], "factor_list() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.factor_list"]], "factor_list_include() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.factor_list_include"]], "fglm() (sympy.polys.polytools.groebnerbasis method)": [[212, "sympy.polys.polytools.GroebnerBasis.fglm"]], "free_symbols (sympy.polys.polytools.poly property)": [[212, "sympy.polys.polytools.Poly.free_symbols"]], "free_symbols (sympy.polys.polytools.purepoly property)": [[212, "sympy.polys.polytools.PurePoly.free_symbols"]], "free_symbols_in_domain (sympy.polys.polytools.poly property)": [[212, "sympy.polys.polytools.Poly.free_symbols_in_domain"]], "from_dict() (sympy.polys.polytools.poly class method)": [[212, "sympy.polys.polytools.Poly.from_dict"]], "from_expr() (sympy.polys.polytools.poly class method)": [[212, "sympy.polys.polytools.Poly.from_expr"]], "from_list() (sympy.polys.polytools.poly class method)": [[212, "sympy.polys.polytools.Poly.from_list"]], "from_poly() (sympy.polys.polytools.poly class method)": [[212, "sympy.polys.polytools.Poly.from_poly"]], "galois_group() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.galois_group"]], "gcd() (in module sympy.polys.polytools)": [[212, "sympy.polys.polytools.gcd"]], "gcd() (sympy.polys.monomials.monomial method)": [[212, "sympy.polys.monomials.Monomial.gcd"]], "gcd() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.gcd"]], "gcd_list() (in module sympy.polys.polytools)": [[212, "sympy.polys.polytools.gcd_list"]], "gcdex() (in module sympy.polys.polytools)": [[212, "sympy.polys.polytools.gcdex"]], "gcdex() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.gcdex"]], "gegenbauer_poly() (in module sympy.polys.orthopolys)": [[212, "sympy.polys.orthopolys.gegenbauer_poly"]], "gen (sympy.polys.polytools.poly property)": [[212, "sympy.polys.polytools.Poly.gen"]], "genocchi_poly() (in module sympy.polys.appellseqs)": [[212, "sympy.polys.appellseqs.genocchi_poly"]], "get_domain() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.get_domain"]], "get_modulus() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.get_modulus"]], "gff() (in module sympy.polys.polytools)": [[212, "sympy.polys.polytools.gff"]], "gff_list() (in module sympy.polys.polytools)": [[212, "sympy.polys.polytools.gff_list"]], "gff_list() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.gff_list"]], "groebner() (in module sympy.polys.polytools)": [[212, "sympy.polys.polytools.groebner"]], "ground_roots() (in module sympy.polys.polytools)": [[212, "sympy.polys.polytools.ground_roots"]], "ground_roots() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.ground_roots"]], "half_gcdex() (in module sympy.polys.polytools)": [[212, "sympy.polys.polytools.half_gcdex"]], "half_gcdex() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.half_gcdex"]], "has_only_gens() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.has_only_gens"]], "hermite_poly() (in module sympy.polys.orthopolys)": [[212, "sympy.polys.orthopolys.hermite_poly"]], "hermite_prob_poly() (in module sympy.polys.orthopolys)": [[212, "sympy.polys.orthopolys.hermite_prob_poly"]], "homogeneous_order() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.homogeneous_order"]], "homogenize() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.homogenize"]], "horner() (in module sympy.polys.polyfuncs)": [[212, "sympy.polys.polyfuncs.horner"]], "inject() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.inject"]], "integrate() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.integrate"]], "interpolate() (in module sympy.polys.polyfuncs)": [[212, "sympy.polys.polyfuncs.interpolate"]], "interpolating_poly() (in module sympy.polys.specialpolys)": [[212, "sympy.polys.specialpolys.interpolating_poly"]], "intervals() (in module sympy.polys.polytools)": [[212, "sympy.polys.polytools.intervals"]], "intervals() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.intervals"]], "invert() (in module sympy.polys.polytools)": [[212, "sympy.polys.polytools.invert"]], "invert() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.invert"]], "is_cyclotomic (sympy.polys.polytools.poly property)": [[212, "sympy.polys.polytools.Poly.is_cyclotomic"]], "is_ground (sympy.polys.polytools.poly property)": [[212, "sympy.polys.polytools.Poly.is_ground"]], "is_homogeneous (sympy.polys.polytools.poly property)": [[212, "sympy.polys.polytools.Poly.is_homogeneous"]], "is_irreducible (sympy.polys.polytools.poly property)": [[212, "sympy.polys.polytools.Poly.is_irreducible"]], "is_linear (sympy.polys.polytools.poly property)": [[212, "sympy.polys.polytools.Poly.is_linear"]], "is_monic (sympy.polys.polytools.poly property)": [[212, "sympy.polys.polytools.Poly.is_monic"]], "is_monomial (sympy.polys.polytools.poly property)": [[212, "sympy.polys.polytools.Poly.is_monomial"]], "is_multivariate (sympy.polys.polytools.poly property)": [[212, "sympy.polys.polytools.Poly.is_multivariate"]], "is_one (sympy.polys.polytools.poly property)": [[212, "sympy.polys.polytools.Poly.is_one"]], "is_primitive (sympy.polys.polytools.poly property)": [[212, "sympy.polys.polytools.Poly.is_primitive"]], "is_quadratic (sympy.polys.polytools.poly property)": [[212, "sympy.polys.polytools.Poly.is_quadratic"]], "is_sqf (sympy.polys.polytools.poly property)": [[212, "sympy.polys.polytools.Poly.is_sqf"]], "is_univariate (sympy.polys.polytools.poly property)": [[212, "sympy.polys.polytools.Poly.is_univariate"]], "is_zero (sympy.polys.polytools.poly property)": [[212, "sympy.polys.polytools.Poly.is_zero"]], "is_zero_dimensional (sympy.polys.polytools.groebnerbasis property)": [[212, "sympy.polys.polytools.GroebnerBasis.is_zero_dimensional"]], "is_zero_dimensional() (in module sympy.polys.polytools)": [[212, "sympy.polys.polytools.is_zero_dimensional"]], "itermonomials() (in module sympy.polys.monomials)": [[212, "sympy.polys.monomials.itermonomials"]], "jacobi_poly() (in module sympy.polys.orthopolys)": [[212, "sympy.polys.orthopolys.jacobi_poly"]], "l1_norm() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.l1_norm"]], "laguerre_poly() (in module sympy.polys.orthopolys)": [[212, "sympy.polys.orthopolys.laguerre_poly"]], "lcm() (in module sympy.polys.polytools)": [[212, "sympy.polys.polytools.lcm"]], "lcm() (sympy.polys.monomials.monomial method)": [[212, "sympy.polys.monomials.Monomial.lcm"]], "lcm() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.lcm"]], "lcm_list() (in module sympy.polys.polytools)": [[212, "sympy.polys.polytools.lcm_list"]], "legendre_poly() (in module sympy.polys.orthopolys)": [[212, "sympy.polys.orthopolys.legendre_poly"]], "length() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.length"]], "lift() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.lift"]], "ltrim() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.ltrim"]], "make_monic_over_integers_by_scaling_roots() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.make_monic_over_integers_by_scaling_roots"]], "match() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.match"]], "max_norm() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.max_norm"]], "monic() (in module sympy.polys.polytools)": [[212, "sympy.polys.polytools.monic"]], "monic() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.monic"]], "monomial_count() (in module sympy.polys.monomials)": [[212, "sympy.polys.monomials.monomial_count"]], "monoms() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.monoms"]], "mul() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.mul"]], "mul_ground() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.mul_ground"]], "neg() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.neg"]], "new() (sympy.polys.polytools.poly class method)": [[212, "sympy.polys.polytools.Poly.new"]], "new() (sympy.polys.rootoftools.rootsum class method)": [[212, "sympy.polys.rootoftools.RootSum.new"]], "norm() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.norm"]], "nroots() (in module sympy.polys.polytools)": [[212, "sympy.polys.polytools.nroots"]], "nroots() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.nroots"]], "nth() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.nth"]], "nth_power_roots_poly() (in module sympy.polys.polytools)": [[212, "sympy.polys.polytools.nth_power_roots_poly"]], "nth_power_roots_poly() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.nth_power_roots_poly"]], "one (sympy.polys.polytools.poly property)": [[212, "sympy.polys.polytools.Poly.one"]], "parallel_poly_from_expr() (in module sympy.polys.polytools)": [[212, "sympy.polys.polytools.parallel_poly_from_expr"]], "pdiv() (in module sympy.polys.polytools)": [[212, "sympy.polys.polytools.pdiv"]], "pdiv() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.pdiv"]], "per() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.per"]], "pexquo() (in module sympy.polys.polytools)": [[212, "sympy.polys.polytools.pexquo"]], "pexquo() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.pexquo"]], "poly() (in module sympy.polys.polytools)": [[212, "sympy.polys.polytools.poly"]], "poly_from_expr() (in module sympy.polys.polytools)": [[212, "sympy.polys.polytools.poly_from_expr"]], "pow() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.pow"]], "pquo() (in module sympy.polys.polytools)": [[212, "sympy.polys.polytools.pquo"]], "pquo() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.pquo"]], "prem() (in module sympy.polys.polytools)": [[212, "sympy.polys.polytools.prem"]], "prem() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.prem"]], "primitive() (in module sympy.polys.polytools)": [[212, "sympy.polys.polytools.primitive"]], "primitive() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.primitive"]], "quo() (in module sympy.polys.polytools)": [[212, "sympy.polys.polytools.quo"]], "quo() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.quo"]], "quo_ground() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.quo_ground"]], "random_poly() (in module sympy.polys.specialpolys)": [[212, "sympy.polys.specialpolys.random_poly"]], "rat_clear_denoms() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.rat_clear_denoms"]], "real_roots() (in module sympy.polys.polytools)": [[212, "sympy.polys.polytools.real_roots"]], "real_roots() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.real_roots"]], "real_roots() (sympy.polys.rootoftools.complexrootof class method)": [[212, "sympy.polys.rootoftools.ComplexRootOf.real_roots"]], "reduce() (sympy.polys.polytools.groebnerbasis method)": [[212, "sympy.polys.polytools.GroebnerBasis.reduce"]], "reduced() (in module sympy.polys.polytools)": [[212, "sympy.polys.polytools.reduced"]], "refine_root() (in module sympy.polys.polytools)": [[212, "sympy.polys.polytools.refine_root"]], "refine_root() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.refine_root"]], "rem() (in module sympy.polys.polytools)": [[212, "sympy.polys.polytools.rem"]], "rem() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.rem"]], "reorder() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.reorder"]], "replace() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.replace"]], "resultant() (in module sympy.polys.polytools)": [[212, "sympy.polys.polytools.resultant"]], "resultant() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.resultant"]], "retract() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.retract"]], "revert() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.revert"]], "root() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.root"]], "rootof() (in module sympy.polys.rootoftools)": [[212, "sympy.polys.rootoftools.rootof"]], "roots() (in module sympy.polys.polyroots)": [[212, "sympy.polys.polyroots.roots"]], "same_root() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.same_root"]], "set_domain() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.set_domain"]], "set_modulus() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.set_modulus"]], "shift() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.shift"]], "slice() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.slice"]], "spherical_bessel_fn() (in module sympy.polys.orthopolys)": [[212, "sympy.polys.orthopolys.spherical_bessel_fn"]], "sqf() (in module sympy.polys.polytools)": [[212, "sympy.polys.polytools.sqf"]], "sqf_list() (in module sympy.polys.polytools)": [[212, "sympy.polys.polytools.sqf_list"]], "sqf_list() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.sqf_list"]], "sqf_list_include() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.sqf_list_include"]], "sqf_norm() (in module sympy.polys.polytools)": [[212, "sympy.polys.polytools.sqf_norm"]], "sqf_norm() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.sqf_norm"]], "sqf_part() (in module sympy.polys.polytools)": [[212, "sympy.polys.polytools.sqf_part"]], "sqf_part() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.sqf_part"]], "sqr() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.sqr"]], "sturm() (in module sympy.polys.polytools)": [[212, "sympy.polys.polytools.sturm"]], "sturm() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.sturm"]], "sub() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.sub"]], "sub_ground() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.sub_ground"]], "subresultants() (in module sympy.polys.polytools)": [[212, "sympy.polys.polytools.subresultants"]], "subresultants() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.subresultants"]], "swinnerton_dyer_poly() (in module sympy.polys.specialpolys)": [[212, "sympy.polys.specialpolys.swinnerton_dyer_poly"]], "symmetric_poly() (in module sympy.polys.specialpolys)": [[212, "sympy.polys.specialpolys.symmetric_poly"]], "symmetrize() (in module sympy.polys.polyfuncs)": [[212, "sympy.polys.polyfuncs.symmetrize"]], "sympy.polys": [[212, "module-sympy.polys"]], "terms() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.terms"]], "terms_gcd() (in module sympy.polys.polytools)": [[212, "sympy.polys.polytools.terms_gcd"]], "terms_gcd() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.terms_gcd"]], "termwise() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.termwise"]], "to_exact() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.to_exact"]], "to_field() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.to_field"]], "to_ring() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.to_ring"]], "together() (in module sympy.polys.rationaltools)": [[212, "sympy.polys.rationaltools.together"]], "total_degree() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.total_degree"]], "transform() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.transform"]], "trunc() (in module sympy.polys.polytools)": [[212, "sympy.polys.polytools.trunc"]], "trunc() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.trunc"]], "unify() (sympy.polys.polytools.poly method)": [[212, "sympy.polys.polytools.Poly.unify"]], "unit (sympy.polys.polytools.poly property)": [[212, "sympy.polys.polytools.Poly.unit"]], "viete() (in module sympy.polys.polyfuncs)": [[212, "sympy.polys.polyfuncs.viete"]], "zero (sympy.polys.polytools.poly property)": [[212, "sympy.polys.polytools.Poly.zero"]], "_tan1() (in module sympy.polys.ring_series)": [[213, "sympy.polys.ring_series._tan1"]], "mul_xin() (in module sympy.polys.ring_series)": [[213, "sympy.polys.ring_series.mul_xin"]], "pow_xin() (in module sympy.polys.ring_series)": [[213, "sympy.polys.ring_series.pow_xin"]], "rs_lambertw() (in module sympy.polys.ring_series)": [[213, "sympy.polys.ring_series.rs_LambertW"]], "rs_asin() (in module sympy.polys.ring_series)": [[213, "sympy.polys.ring_series.rs_asin"]], "rs_atan() (in module sympy.polys.ring_series)": [[213, "sympy.polys.ring_series.rs_atan"]], "rs_atanh() (in module sympy.polys.ring_series)": [[213, "sympy.polys.ring_series.rs_atanh"]], "rs_compose_add() (in module sympy.polys.ring_series)": [[213, "sympy.polys.ring_series.rs_compose_add"]], "rs_cos() (in module sympy.polys.ring_series)": [[213, "sympy.polys.ring_series.rs_cos"]], "rs_cos_sin() (in module sympy.polys.ring_series)": [[213, "sympy.polys.ring_series.rs_cos_sin"]], "rs_cosh() (in module sympy.polys.ring_series)": [[213, "sympy.polys.ring_series.rs_cosh"]], "rs_cot() (in module sympy.polys.ring_series)": [[213, "sympy.polys.ring_series.rs_cot"]], "rs_diff() (in module sympy.polys.ring_series)": [[213, "sympy.polys.ring_series.rs_diff"]], "rs_exp() (in module sympy.polys.ring_series)": [[213, "sympy.polys.ring_series.rs_exp"]], "rs_fun() (in module sympy.polys.ring_series)": [[213, "sympy.polys.ring_series.rs_fun"]], "rs_hadamard_exp() (in module sympy.polys.ring_series)": [[213, "sympy.polys.ring_series.rs_hadamard_exp"]], "rs_integrate() (in module sympy.polys.ring_series)": [[213, "sympy.polys.ring_series.rs_integrate"]], "rs_is_puiseux() (in module sympy.polys.ring_series)": [[213, "sympy.polys.ring_series.rs_is_puiseux"]], "rs_log() (in module sympy.polys.ring_series)": [[213, "sympy.polys.ring_series.rs_log"]], "rs_mul() (in module sympy.polys.ring_series)": [[213, "sympy.polys.ring_series.rs_mul"]], "rs_newton() (in module sympy.polys.ring_series)": [[213, "sympy.polys.ring_series.rs_newton"]], "rs_nth_root() (in module sympy.polys.ring_series)": [[213, "sympy.polys.ring_series.rs_nth_root"]], "rs_pow() (in module sympy.polys.ring_series)": [[213, "sympy.polys.ring_series.rs_pow"]], "rs_puiseux() (in module sympy.polys.ring_series)": [[213, "sympy.polys.ring_series.rs_puiseux"]], "rs_puiseux2() (in module sympy.polys.ring_series)": [[213, "sympy.polys.ring_series.rs_puiseux2"]], "rs_series_from_list() (in module sympy.polys.ring_series)": [[213, "sympy.polys.ring_series.rs_series_from_list"]], "rs_series_inversion() (in module sympy.polys.ring_series)": [[213, "sympy.polys.ring_series.rs_series_inversion"]], "rs_series_reversion() (in module sympy.polys.ring_series)": [[213, "sympy.polys.ring_series.rs_series_reversion"]], "rs_sin() (in module sympy.polys.ring_series)": [[213, "sympy.polys.ring_series.rs_sin"]], "rs_sinh() (in module sympy.polys.ring_series)": [[213, "sympy.polys.ring_series.rs_sinh"]], "rs_square() (in module sympy.polys.ring_series)": [[213, "sympy.polys.ring_series.rs_square"]], "rs_subs() (in module sympy.polys.ring_series)": [[213, "sympy.polys.ring_series.rs_subs"]], "rs_tan() (in module sympy.polys.ring_series)": [[213, "sympy.polys.ring_series.rs_tan"]], "rs_tanh() (in module sympy.polys.ring_series)": [[213, "sympy.polys.ring_series.rs_tanh"]], "rs_trunc() (in module sympy.polys.ring_series)": [[213, "sympy.polys.ring_series.rs_trunc"]], "_solve_lin_sys() (in module sympy.polys.solvers)": [[214, "sympy.polys.solvers._solve_lin_sys"]], "_solve_lin_sys_component() (in module sympy.polys.solvers)": [[214, "sympy.polys.solvers._solve_lin_sys_component"]], "eqs_to_matrix() (in module sympy.polys.solvers)": [[214, "sympy.polys.solvers.eqs_to_matrix"]], "solve_lin_sys() (in module sympy.polys.solvers)": [[214, "sympy.polys.solvers.solve_lin_sys"]], "sympy.polys.solvers": [[214, "module-sympy.polys.solvers"]], "sympy_eqs_to_ring() (in module sympy.polys.solvers)": [[214, "sympy.polys.solvers.sympy_eqs_to_ring"]], "aesaraprinter (class in sympy.printing.aesaracode)": [[216, "sympy.printing.aesaracode.AesaraPrinter"]], "assignmenterror": [[216, "sympy.printing.codeprinter.AssignmentError"]], "c89codeprinter (class in sympy.printing.c)": [[216, "sympy.printing.c.C89CodePrinter"]], "c99codeprinter (class in sympy.printing.c)": [[216, "sympy.printing.c.C99CodePrinter"]], "cxx11codeprinter (class in sympy.printing.cxx)": [[216, "sympy.printing.cxx.CXX11CodePrinter"]], "cxx98codeprinter (class in sympy.printing.cxx)": [[216, "sympy.printing.cxx.CXX98CodePrinter"]], "codeprinter (class in sympy.printing.codeprinter)": [[216, "sympy.printing.codeprinter.CodePrinter"]], "fcodeprinter (class in sympy.printing.fortran)": [[216, "sympy.printing.fortran.FCodePrinter"]], "g() (in module sympy.printing.pretty.pretty_symbology)": [[216, "sympy.printing.pretty.pretty_symbology.G"], [216, "sympy.printing.pretty.pretty_symbology.g"]], "javascriptcodeprinter (class in sympy.printing.jscode)": [[216, "sympy.printing.jscode.JavascriptCodePrinter"]], "juliacodeprinter (class in sympy.printing.julia)": [[216, "sympy.printing.julia.JuliaCodePrinter"]], "lambdaprinter (class in sympy.printing.lambdarepr)": [[216, "sympy.printing.lambdarepr.LambdaPrinter"]], "latexprinter (class in sympy.printing.latex)": [[216, "sympy.printing.latex.LatexPrinter"]], "mcodeprinter (class in sympy.printing.mathematica)": [[216, "sympy.printing.mathematica.MCodePrinter"]], "maplecodeprinter (class in sympy.printing.maple)": [[216, "sympy.printing.maple.MapleCodePrinter"]], "mathmlcontentprinter (class in sympy.printing.mathml)": [[216, "sympy.printing.mathml.MathMLContentPrinter"]], "mathmlpresentationprinter (class in sympy.printing.mathml)": [[216, "sympy.printing.mathml.MathMLPresentationPrinter"]], "mathmlprinterbase (class in sympy.printing.mathml)": [[216, "sympy.printing.mathml.MathMLPrinterBase"]], "mpmathprinter (class in sympy.printing.pycode)": [[216, "sympy.printing.pycode.MpmathPrinter"]], "octavecodeprinter (class in sympy.printing.octave)": [[216, "sympy.printing.octave.OctaveCodePrinter"]], "precedence (in module sympy.printing.precedence)": [[216, "sympy.printing.precedence.PRECEDENCE"]], "precedence_functions (in module sympy.printing.precedence)": [[216, "sympy.printing.precedence.PRECEDENCE_FUNCTIONS"]], "precedence_values (in module sympy.printing.precedence)": [[216, "sympy.printing.precedence.PRECEDENCE_VALUES"]], "prettyprinter (class in sympy.printing.pretty.pretty)": [[216, "sympy.printing.pretty.pretty.PrettyPrinter"]], "printer (class in sympy.printing.printer)": [[216, "sympy.printing.printer.Printer"]], "rcodeprinter (class in sympy.printing.rcode)": [[216, "sympy.printing.rcode.RCodePrinter"]], "reprprinter (class in sympy.printing.repr)": [[216, "sympy.printing.repr.ReprPrinter"]], "rustcodeprinter (class in sympy.printing.rust)": [[216, "sympy.printing.rust.RustCodePrinter"]], "smtlibprinter (class in sympy.printing.smtlib)": [[216, "sympy.printing.smtlib.SMTLibPrinter"]], "strprinter (class in sympy.printing.str)": [[216, "sympy.printing.str.StrPrinter"]], "u() (in module sympy.printing.pretty.pretty_symbology)": [[216, "sympy.printing.pretty.pretty_symbology.U"]], "vf() (in module sympy.printing.pretty.pretty_symbology)": [[216, "sympy.printing.pretty.pretty_symbology.VF"]], "_default_settings (sympy.printing.smtlib.smtlibprinter attribute)": [[216, "sympy.printing.smtlib.SMTLibPrinter._default_settings"]], "_print() (sympy.printing.printer.printer method)": [[216, "sympy.printing.printer.Printer._print"]], "above() (sympy.printing.pretty.stringpict.stringpict method)": [[216, "sympy.printing.pretty.stringpict.stringPict.above"]], "accepted_latex_functions (in module sympy.printing.latex)": [[216, "sympy.printing.latex.accepted_latex_functions"]], "aesara_code() (in module sympy.printing.aesaracode)": [[216, "sympy.printing.aesaracode.aesara_code"]], "aesara_function() (in module sympy.printing.aesaracode)": [[216, "sympy.printing.aesaracode.aesara_function"]], "annotated() (in module sympy.printing.pretty.pretty_symbology)": [[216, "sympy.printing.pretty.pretty_symbology.annotated"]], "apply() (sympy.printing.pretty.stringpict.prettyform static method)": [[216, "sympy.printing.pretty.stringpict.prettyForm.apply"]], "atoms_table (in module sympy.printing.pretty.pretty_symbology)": [[216, "sympy.printing.pretty.pretty_symbology.atoms_table"]], "below() (sympy.printing.pretty.stringpict.stringpict method)": [[216, "sympy.printing.pretty.stringpict.stringPict.below"]], "ccode() (in module sympy.printing.c)": [[216, "sympy.printing.c.ccode"]], "cxxcode() (in module sympy.printing.codeprinter)": [[216, "sympy.printing.codeprinter.cxxcode"]], "digit_2txt (in module sympy.printing.pretty.pretty_symbology)": [[216, "sympy.printing.pretty.pretty_symbology.digit_2txt"]], "dim_handling() (in module sympy.printing.aesaracode)": [[216, "sympy.printing.aesaracode.dim_handling"]], "doprint() (sympy.printing.aesaracode.aesaraprinter method)": [[216, "sympy.printing.aesaracode.AesaraPrinter.doprint"]], "doprint() (sympy.printing.codeprinter.codeprinter method)": [[216, "sympy.printing.codeprinter.CodePrinter.doprint"]], "doprint() (sympy.printing.mathml.mathmlprinterbase method)": [[216, "sympy.printing.mathml.MathMLPrinterBase.doprint"]], "doprint() (sympy.printing.printer.printer method)": [[216, "sympy.printing.printer.Printer.doprint"]], "dotprint() (in module sympy.printing.dot)": [[216, "sympy.printing.dot.dotprint"]], "emptyprinter() (sympy.printing.repr.reprprinter method)": [[216, "sympy.printing.repr.ReprPrinter.emptyPrinter"]], "fcode() (in module sympy.printing.fortran)": [[216, "sympy.printing.fortran.fcode"]], "frac (in module sympy.printing.pretty.pretty_symbology)": [[216, "sympy.printing.pretty.pretty_symbology.frac"]], "greek_letters (in module sympy.printing.pretty.pretty_symbology)": [[216, "sympy.printing.pretty.pretty_symbology.greek_letters"]], "height() (sympy.printing.pretty.stringpict.stringpict method)": [[216, "sympy.printing.pretty.stringpict.stringPict.height"]], "hobj() (in module sympy.printing.pretty.pretty_symbology)": [[216, "sympy.printing.pretty.pretty_symbology.hobj"]], "indent_code() (sympy.printing.c.c89codeprinter method)": [[216, "sympy.printing.c.C89CodePrinter.indent_code"]], "indent_code() (sympy.printing.fortran.fcodeprinter method)": [[216, "sympy.printing.fortran.FCodePrinter.indent_code"]], "indent_code() (sympy.printing.jscode.javascriptcodeprinter method)": [[216, "sympy.printing.jscode.JavascriptCodePrinter.indent_code"]], "indent_code() (sympy.printing.julia.juliacodeprinter method)": [[216, "sympy.printing.julia.JuliaCodePrinter.indent_code"]], "indent_code() (sympy.printing.octave.octavecodeprinter method)": [[216, "sympy.printing.octave.OctaveCodePrinter.indent_code"]], "indent_code() (sympy.printing.rcode.rcodeprinter method)": [[216, "sympy.printing.rcode.RCodePrinter.indent_code"]], "indent_code() (sympy.printing.rust.rustcodeprinter method)": [[216, "sympy.printing.rust.RustCodePrinter.indent_code"]], "jscode() (in module sympy.printing.jscode)": [[216, "sympy.printing.jscode.jscode"]], "julia_code() (in module sympy.printing.julia)": [[216, "sympy.printing.julia.julia_code"]], "known_fcns_src1 (in module sympy.printing.julia)": [[216, "sympy.printing.julia.known_fcns_src1"]], "known_fcns_src1 (in module sympy.printing.octave)": [[216, "sympy.printing.octave.known_fcns_src1"]], "known_fcns_src2 (in module sympy.printing.julia)": [[216, "sympy.printing.julia.known_fcns_src2"]], "known_fcns_src2 (in module sympy.printing.octave)": [[216, "sympy.printing.octave.known_fcns_src2"]], "known_functions (in module sympy.printing.jscode)": [[216, "sympy.printing.jscode.known_functions"]], "known_functions (in module sympy.printing.mathematica)": [[216, "sympy.printing.mathematica.known_functions"]], "known_functions (in module sympy.printing.rcode)": [[216, "sympy.printing.rcode.known_functions"]], "known_functions (in module sympy.printing.rust)": [[216, "sympy.printing.rust.known_functions"]], "known_functions_c89 (in module sympy.printing.c)": [[216, "sympy.printing.c.known_functions_C89"]], "known_functions_c99 (in module sympy.printing.c)": [[216, "sympy.printing.c.known_functions_C99"]], "lambdarepr() (in module sympy.printing.lambdarepr)": [[216, "sympy.printing.lambdarepr.lambdarepr"]], "latex() (in module sympy.printing.latex)": [[216, "sympy.printing.latex.latex"]], "left() (sympy.printing.pretty.stringpict.stringpict method)": [[216, "sympy.printing.pretty.stringpict.stringPict.left"]], "leftslash() (sympy.printing.pretty.stringpict.stringpict method)": [[216, "sympy.printing.pretty.stringpict.stringPict.leftslash"]], "maple_code() (in module sympy.printing.maple)": [[216, "sympy.printing.maple.maple_code"]], "mathematica_code() (in module sympy.printing.mathematica)": [[216, "sympy.printing.mathematica.mathematica_code"]], "mathml() (in module sympy.printing.mathml)": [[216, "sympy.printing.mathml.mathml"]], "mathml_tag() (sympy.printing.mathml.mathmlcontentprinter method)": [[216, "sympy.printing.mathml.MathMLContentPrinter.mathml_tag"]], "mathml_tag() (sympy.printing.mathml.mathmlpresentationprinter method)": [[216, "sympy.printing.mathml.MathMLPresentationPrinter.mathml_tag"]], "next() (sympy.printing.pretty.stringpict.stringpict static method)": [[216, "sympy.printing.pretty.stringpict.stringPict.next"]], "octave_code() (in module sympy.printing.octave)": [[216, "sympy.printing.octave.octave_code"]], "parens() (sympy.printing.pretty.stringpict.stringpict method)": [[216, "sympy.printing.pretty.stringpict.stringPict.parens"]], "parenthesize_super() (sympy.printing.latex.latexprinter method)": [[216, "sympy.printing.latex.LatexPrinter.parenthesize_super"]], "pprint_nodes() (in module sympy.printing.tree)": [[216, "sympy.printing.tree.pprint_nodes"]], "precedence() (in module sympy.printing.precedence)": [[216, "sympy.printing.precedence.precedence"]], "pretty() (in module sympy.printing.pretty.pretty)": [[216, "sympy.printing.pretty.pretty.pretty"]], "prettyform (class in sympy.printing.pretty.stringpict)": [[216, "sympy.printing.pretty.stringpict.prettyForm"]], "pretty_atom() (in module sympy.printing.pretty.pretty_symbology)": [[216, "sympy.printing.pretty.pretty_symbology.pretty_atom"]], "pretty_print() (in module sympy.printing.pretty.pretty)": [[216, "sympy.printing.pretty.pretty.pretty_print"]], "pretty_symbol() (in module sympy.printing.pretty.pretty_symbology)": [[216, "sympy.printing.pretty.pretty_symbology.pretty_symbol"]], "pretty_try_use_unicode() (in module sympy.printing.pretty.pretty_symbology)": [[216, "sympy.printing.pretty.pretty_symbology.pretty_try_use_unicode"]], "pretty_use_unicode() (in module sympy.printing.pretty.pretty_symbology)": [[216, "sympy.printing.pretty.pretty_symbology.pretty_use_unicode"]], "preview() (in module sympy.printing.preview)": [[216, "sympy.printing.preview.preview"]], "print_ccode() (in module sympy.printing.c)": [[216, "sympy.printing.c.print_ccode"]], "print_fcode() (in module sympy.printing.fortran)": [[216, "sympy.printing.fortran.print_fcode"]], "print_gtk() (in module sympy.printing.gtk)": [[216, "sympy.printing.gtk.print_gtk"]], "print_latex() (in module sympy.printing.latex)": [[216, "sympy.printing.latex.print_latex"]], "print_maple_code() (in module sympy.printing.maple)": [[216, "sympy.printing.maple.print_maple_code"]], "print_mathml() (in module sympy.printing.mathml)": [[216, "sympy.printing.mathml.print_mathml"]], "print_node() (in module sympy.printing.tree)": [[216, "sympy.printing.tree.print_node"]], "print_rcode() (in module sympy.printing.rcode)": [[216, "sympy.printing.rcode.print_rcode"]], "print_tree() (in module sympy.printing.tree)": [[216, "sympy.printing.tree.print_tree"]], "printmethod (sympy.printing.aesaracode.aesaraprinter attribute)": [[216, "sympy.printing.aesaracode.AesaraPrinter.printmethod"]], "printmethod (sympy.printing.c.c89codeprinter attribute)": [[216, "sympy.printing.c.C89CodePrinter.printmethod"]], "printmethod (sympy.printing.c.c99codeprinter attribute)": [[216, "sympy.printing.c.C99CodePrinter.printmethod"]], "printmethod (sympy.printing.codeprinter.codeprinter attribute)": [[216, "sympy.printing.codeprinter.CodePrinter.printmethod"]], "printmethod (sympy.printing.cxx.cxx11codeprinter attribute)": [[216, "sympy.printing.cxx.CXX11CodePrinter.printmethod"]], "printmethod (sympy.printing.cxx.cxx98codeprinter attribute)": [[216, "sympy.printing.cxx.CXX98CodePrinter.printmethod"]], "printmethod (sympy.printing.fortran.fcodeprinter attribute)": [[216, "sympy.printing.fortran.FCodePrinter.printmethod"]], "printmethod (sympy.printing.jscode.javascriptcodeprinter attribute)": [[216, "sympy.printing.jscode.JavascriptCodePrinter.printmethod"]], "printmethod (sympy.printing.julia.juliacodeprinter attribute)": [[216, "sympy.printing.julia.JuliaCodePrinter.printmethod"]], "printmethod (sympy.printing.lambdarepr.lambdaprinter attribute)": [[216, "sympy.printing.lambdarepr.LambdaPrinter.printmethod"]], "printmethod (sympy.printing.latex.latexprinter attribute)": [[216, "sympy.printing.latex.LatexPrinter.printmethod"]], "printmethod (sympy.printing.maple.maplecodeprinter attribute)": [[216, "sympy.printing.maple.MapleCodePrinter.printmethod"]], "printmethod (sympy.printing.mathematica.mcodeprinter attribute)": [[216, "sympy.printing.mathematica.MCodePrinter.printmethod"]], "printmethod (sympy.printing.mathml.mathmlcontentprinter attribute)": [[216, "sympy.printing.mathml.MathMLContentPrinter.printmethod"]], "printmethod (sympy.printing.mathml.mathmlpresentationprinter attribute)": [[216, "sympy.printing.mathml.MathMLPresentationPrinter.printmethod"]], "printmethod (sympy.printing.octave.octavecodeprinter attribute)": [[216, "sympy.printing.octave.OctaveCodePrinter.printmethod"]], "printmethod (sympy.printing.pretty.pretty.prettyprinter attribute)": [[216, "sympy.printing.pretty.pretty.PrettyPrinter.printmethod"]], "printmethod (sympy.printing.printer.printer attribute)": [[216, "sympy.printing.printer.Printer.printmethod"]], "printmethod (sympy.printing.rcode.rcodeprinter attribute)": [[216, "sympy.printing.rcode.RCodePrinter.printmethod"]], "printmethod (sympy.printing.repr.reprprinter attribute)": [[216, "sympy.printing.repr.ReprPrinter.printmethod"]], "printmethod (sympy.printing.rust.rustcodeprinter attribute)": [[216, "sympy.printing.rust.RustCodePrinter.printmethod"]], "printmethod (sympy.printing.smtlib.smtlibprinter attribute)": [[216, "sympy.printing.smtlib.SMTLibPrinter.printmethod"]], "printmethod (sympy.printing.str.strprinter attribute)": [[216, "sympy.printing.str.StrPrinter.printmethod"]], "pycode() (in module sympy.printing.pycode)": [[216, "sympy.printing.pycode.pycode"]], "rcode() (in module sympy.printing.rcode)": [[216, "sympy.printing.rcode.rcode"]], "render() (sympy.printing.pretty.stringpict.stringpict method)": [[216, "sympy.printing.pretty.stringpict.stringPict.render"]], "reprify() (sympy.printing.repr.reprprinter method)": [[216, "sympy.printing.repr.ReprPrinter.reprify"]], "right() (sympy.printing.pretty.stringpict.stringpict method)": [[216, "sympy.printing.pretty.stringpict.stringPict.right"]], "root (in module sympy.printing.pretty.pretty_symbology)": [[216, "sympy.printing.pretty.pretty_symbology.root"]], "root() (sympy.printing.pretty.stringpict.stringpict method)": [[216, "sympy.printing.pretty.stringpict.stringPict.root"]], "rust_code() (in module sympy.printing.rust)": [[216, "sympy.printing.rust.rust_code"]], "set_global_settings() (sympy.printing.printer.printer class method)": [[216, "sympy.printing.printer.Printer.set_global_settings"]], "smtlib_code() (in module sympy.printing.smtlib)": [[216, "sympy.printing.smtlib.smtlib_code"]], "split_super_sub() (in module sympy.printing.conventions)": [[216, "sympy.printing.conventions.split_super_sub"]], "srepr() (in module sympy.printing.repr)": [[216, "sympy.printing.repr.srepr"]], "sstr() (in module sympy.printing.str)": [[216, "sympy.printing.str.sstr"]], "sstrrepr() (in module sympy.printing.str)": [[216, "sympy.printing.str.sstrrepr"]], "stack() (sympy.printing.pretty.stringpict.stringpict static method)": [[216, "sympy.printing.pretty.stringpict.stringPict.stack"]], "stringpict (class in sympy.printing.pretty.stringpict)": [[216, "sympy.printing.pretty.stringpict.stringPict"]], "sub (in module sympy.printing.pretty.pretty_symbology)": [[216, "sympy.printing.pretty.pretty_symbology.sub"]], "sup (in module sympy.printing.pretty.pretty_symbology)": [[216, "sympy.printing.pretty.pretty_symbology.sup"]], "symb_2txt (in module sympy.printing.pretty.pretty_symbology)": [[216, "sympy.printing.pretty.pretty_symbology.symb_2txt"]], "sympy.printing.aesaracode": [[216, "module-sympy.printing.aesaracode"]], "sympy.printing.c": [[216, "module-sympy.printing.c"]], "sympy.printing.codeprinter": [[216, "module-sympy.printing.codeprinter"]], "sympy.printing.conventions": [[216, "module-sympy.printing.conventions"]], "sympy.printing.cxx": [[216, "module-sympy.printing.cxx"]], "sympy.printing.fortran": [[216, "module-sympy.printing.fortran"]], "sympy.printing.gtk": [[216, "module-sympy.printing.gtk"]], "sympy.printing.jscode": [[216, "module-sympy.printing.jscode"]], "sympy.printing.julia": [[216, "module-sympy.printing.julia"]], "sympy.printing.lambdarepr": [[216, "module-sympy.printing.lambdarepr"]], "sympy.printing.latex": [[216, "module-sympy.printing.latex"]], "sympy.printing.maple": [[216, "module-sympy.printing.maple"]], "sympy.printing.mathematica": [[216, "module-sympy.printing.mathematica"]], "sympy.printing.mathml": [[216, "module-sympy.printing.mathml"]], "sympy.printing.octave": [[216, "module-sympy.printing.octave"]], "sympy.printing.precedence": [[216, "module-sympy.printing.precedence"]], "sympy.printing.pretty": [[216, "module-sympy.printing.pretty"]], "sympy.printing.pretty.pretty": [[216, "module-sympy.printing.pretty.pretty"]], "sympy.printing.pretty.pretty_symbology": [[216, "module-sympy.printing.pretty.pretty_symbology"]], "sympy.printing.pretty.stringpict": [[216, "module-sympy.printing.pretty.stringpict"]], "sympy.printing.preview": [[216, "module-sympy.printing.preview"]], "sympy.printing.printer": [[216, "module-sympy.printing.printer"]], "sympy.printing.pycode": [[216, "module-sympy.printing.pycode"]], "sympy.printing.python": [[216, "module-sympy.printing.python"]], "sympy.printing.rcode": [[216, "module-sympy.printing.rcode"]], "sympy.printing.repr": [[216, "module-sympy.printing.repr"]], "sympy.printing.rust": [[216, "module-sympy.printing.rust"]], "sympy.printing.smtlib": [[216, "module-sympy.printing.smtlib"]], "sympy.printing.str": [[216, "module-sympy.printing.str"]], "sympy.printing.tree": [[216, "module-sympy.printing.tree"]], "terminal_width() (sympy.printing.pretty.stringpict.stringpict method)": [[216, "sympy.printing.pretty.stringpict.stringPict.terminal_width"]], "tree() (in module sympy.printing.tree)": [[216, "sympy.printing.tree.tree"]], "vobj() (in module sympy.printing.pretty.pretty_symbology)": [[216, "sympy.printing.pretty.pretty_symbology.vobj"]], "width() (sympy.printing.pretty.stringpict.stringpict method)": [[216, "sympy.printing.pretty.stringpict.stringPict.width"]], "xobj() (in module sympy.printing.pretty.pretty_symbology)": [[216, "sympy.printing.pretty.pretty_symbology.xobj"]], "xstr() (in module sympy.printing.pretty.pretty_symbology)": [[216, "sympy.printing.pretty.pretty_symbology.xstr"]], "xsym() (in module sympy.printing.pretty.pretty_symbology)": [[216, "sympy.printing.pretty.pretty_symbology.xsym"]], "finiteformalpowerseries (class in sympy.series.formal)": [[218, "sympy.series.formal.FiniteFormalPowerSeries"]], "formalpowerseries (class in sympy.series.formal)": [[218, "sympy.series.formal.FormalPowerSeries"]], "formalpowerseriescompose (class in sympy.series.formal)": [[218, "sympy.series.formal.FormalPowerSeriesCompose"]], "formalpowerseriesinverse (class in sympy.series.formal)": [[218, "sympy.series.formal.FormalPowerSeriesInverse"]], "formalpowerseriesproduct (class in sympy.series.formal)": [[218, "sympy.series.formal.FormalPowerSeriesProduct"]], "coeff_bell() (sympy.series.formal.formalpowerseries method)": [[218, "sympy.series.formal.FormalPowerSeries.coeff_bell"]], "compose() (sympy.series.formal.formalpowerseries method)": [[218, "sympy.series.formal.FormalPowerSeries.compose"]], "compute_fps() (in module sympy.series.formal)": [[218, "sympy.series.formal.compute_fps"]], "exp_re() (in module sympy.series.formal)": [[218, "sympy.series.formal.exp_re"]], "fps() (in module sympy.series.formal)": [[218, "sympy.series.formal.fps"]], "function (sympy.series.formal.formalpowerseriescompose property)": [[218, "sympy.series.formal.FormalPowerSeriesCompose.function"]], "function (sympy.series.formal.formalpowerseriesinverse property)": [[218, "sympy.series.formal.FormalPowerSeriesInverse.function"]], "function (sympy.series.formal.formalpowerseriesproduct property)": [[218, "sympy.series.formal.FormalPowerSeriesProduct.function"]], "hyper_algorithm() (in module sympy.series.formal)": [[218, "sympy.series.formal.hyper_algorithm"]], "hyper_re() (in module sympy.series.formal)": [[218, "sympy.series.formal.hyper_re"]], "infinite (sympy.series.formal.formalpowerseries property)": [[218, "sympy.series.formal.FormalPowerSeries.infinite"]], "integrate() (sympy.series.formal.formalpowerseries method)": [[218, "sympy.series.formal.FormalPowerSeries.integrate"]], "inverse() (sympy.series.formal.formalpowerseries method)": [[218, "sympy.series.formal.FormalPowerSeries.inverse"]], "polynomial() (sympy.series.formal.formalpowerseries method)": [[218, "sympy.series.formal.FormalPowerSeries.polynomial"]], "product() (sympy.series.formal.formalpowerseries method)": [[218, "sympy.series.formal.FormalPowerSeries.product"]], "rational_algorithm() (in module sympy.series.formal)": [[218, "sympy.series.formal.rational_algorithm"]], "rational_independent() (in module sympy.series.formal)": [[218, "sympy.series.formal.rational_independent"]], "rsolve_hypergeometric() (in module sympy.series.formal)": [[218, "sympy.series.formal.rsolve_hypergeometric"]], "simplede() (in module sympy.series.formal)": [[218, "sympy.series.formal.simpleDE"]], "solve_de() (in module sympy.series.formal)": [[218, "sympy.series.formal.solve_de"]], "truncate() (sympy.series.formal.formalpowerseries method)": [[218, "sympy.series.formal.FormalPowerSeries.truncate"]], "fourierseries (class in sympy.series.fourier)": [[219, "sympy.series.fourier.FourierSeries"]], "fourier_series() (in module sympy.series.fourier)": [[219, "sympy.series.fourier.fourier_series"]], "scale() (sympy.series.fourier.fourierseries method)": [[219, "sympy.series.fourier.FourierSeries.scale"]], "scalex() (sympy.series.fourier.fourierseries method)": [[219, "sympy.series.fourier.FourierSeries.scalex"]], "shift() (sympy.series.fourier.fourierseries method)": [[219, "sympy.series.fourier.FourierSeries.shift"]], "shiftx() (sympy.series.fourier.fourierseries method)": [[219, "sympy.series.fourier.FourierSeries.shiftx"]], "sigma_approximation() (sympy.series.fourier.fourierseries method)": [[219, "sympy.series.fourier.FourierSeries.sigma_approximation"]], "truncate() (sympy.series.fourier.fourierseries method)": [[219, "sympy.series.fourier.FourierSeries.truncate"]], "difference_delta() (in module sympy.series.limitseq)": [[221, "sympy.series.limitseq.difference_delta"]], "dominant() (in module sympy.series.limitseq)": [[221, "sympy.series.limitseq.dominant"]], "limit_seq() (in module sympy.series.limitseq)": [[221, "sympy.series.limitseq.limit_seq"]], "emptysequence (class in sympy.series.sequences)": [[222, "sympy.series.sequences.EmptySequence"]], "recursiveseq (class in sympy.series.sequences)": [[222, "sympy.series.sequences.RecursiveSeq"]], "seqadd (class in sympy.series.sequences)": [[222, "sympy.series.sequences.SeqAdd"]], "seqbase (class in sympy.series.sequences)": [[222, "sympy.series.sequences.SeqBase"]], "seqformula (class in sympy.series.sequences)": [[222, "sympy.series.sequences.SeqFormula"]], "seqmul (class in sympy.series.sequences)": [[222, "sympy.series.sequences.SeqMul"]], "seqper (class in sympy.series.sequences)": [[222, "sympy.series.sequences.SeqPer"]], "coeff() (sympy.series.sequences.seqbase method)": [[222, "sympy.series.sequences.SeqBase.coeff"]], "coeff_mul() (sympy.series.sequences.emptysequence method)": [[222, "sympy.series.sequences.EmptySequence.coeff_mul"]], "coeff_mul() (sympy.series.sequences.seqbase method)": [[222, "sympy.series.sequences.SeqBase.coeff_mul"]], "coeff_mul() (sympy.series.sequences.seqformula method)": [[222, "sympy.series.sequences.SeqFormula.coeff_mul"]], "coeff_mul() (sympy.series.sequences.seqper method)": [[222, "sympy.series.sequences.SeqPer.coeff_mul"]], "find_linear_recurrence() (sympy.series.sequences.seqbase method)": [[222, "sympy.series.sequences.SeqBase.find_linear_recurrence"]], "free_symbols (sympy.series.sequences.seqbase property)": [[222, "sympy.series.sequences.SeqBase.free_symbols"]], "gen (sympy.series.sequences.seqbase property)": [[222, "sympy.series.sequences.SeqBase.gen"]], "initial (sympy.series.sequences.recursiveseq property)": [[222, "sympy.series.sequences.RecursiveSeq.initial"]], "interval (sympy.series.sequences.recursiveseq property)": [[222, "sympy.series.sequences.RecursiveSeq.interval"]], "interval (sympy.series.sequences.seqbase property)": [[222, "sympy.series.sequences.SeqBase.interval"]], "length (sympy.series.sequences.seqbase property)": [[222, "sympy.series.sequences.SeqBase.length"]], "n (sympy.series.sequences.recursiveseq property)": [[222, "sympy.series.sequences.RecursiveSeq.n"]], "recurrence (sympy.series.sequences.recursiveseq property)": [[222, "sympy.series.sequences.RecursiveSeq.recurrence"]], "reduce() (sympy.series.sequences.seqadd static method)": [[222, "sympy.series.sequences.SeqAdd.reduce"]], "reduce() (sympy.series.sequences.seqmul static method)": [[222, "sympy.series.sequences.SeqMul.reduce"]], "sequence() (in module sympy.series.sequences)": [[222, "sympy.series.sequences.sequence"]], "start (sympy.series.sequences.recursiveseq property)": [[222, "sympy.series.sequences.RecursiveSeq.start"]], "start (sympy.series.sequences.seqbase property)": [[222, "sympy.series.sequences.SeqBase.start"]], "stop (sympy.series.sequences.recursiveseq property)": [[222, "sympy.series.sequences.RecursiveSeq.stop"]], "stop (sympy.series.sequences.seqbase property)": [[222, "sympy.series.sequences.SeqBase.stop"]], "variables (sympy.series.sequences.seqbase property)": [[222, "sympy.series.sequences.SeqBase.variables"]], "y (sympy.series.sequences.recursiveseq property)": [[222, "sympy.series.sequences.RecursiveSeq.y"]], "yn (sympy.series.sequences.recursiveseq property)": [[222, "sympy.series.sequences.RecursiveSeq.yn"]], "limit (class in sympy.series.limits)": [[223, "sympy.series.limits.Limit"]], "order (class in sympy.series.order)": [[223, "sympy.series.order.Order"]], "subsset (class in sympy.series.gruntz)": [[223, "sympy.series.gruntz.SubsSet"]], "build_expression_tree() (in module sympy.series.gruntz)": [[223, "sympy.series.gruntz.build_expression_tree"]], "calculate_series() (in module sympy.series.gruntz)": [[223, "sympy.series.gruntz.calculate_series"]], "compare() (in module sympy.series.gruntz)": [[223, "sympy.series.gruntz.compare"]], "contains() (sympy.series.order.order method)": [[223, "sympy.series.order.Order.contains"]], "copy() (sympy.series.gruntz.subsset method)": [[223, "sympy.series.gruntz.SubsSet.copy"]], "do_subs() (sympy.series.gruntz.subsset method)": [[223, "sympy.series.gruntz.SubsSet.do_subs"]], "doit() (sympy.series.limits.limit method)": [[223, "sympy.series.limits.Limit.doit"]], "gruntz() (in module sympy.series.gruntz)": [[223, "sympy.series.gruntz.gruntz"]], "limit() (in module sympy.series.limits)": [[223, "sympy.series.limits.limit"]], "limitinf() (in module sympy.series.gruntz)": [[223, "sympy.series.gruntz.limitinf"]], "meets() (sympy.series.gruntz.subsset method)": [[223, "sympy.series.gruntz.SubsSet.meets"]], "mrv() (in module sympy.series.gruntz)": [[223, "sympy.series.gruntz.mrv"]], "mrv_leadterm() (in module sympy.series.gruntz)": [[223, "sympy.series.gruntz.mrv_leadterm"]], "mrv_max1() (in module sympy.series.gruntz)": [[223, "sympy.series.gruntz.mrv_max1"]], "mrv_max3() (in module sympy.series.gruntz)": [[223, "sympy.series.gruntz.mrv_max3"]], "residue() (in module sympy.series.residues)": [[223, "sympy.series.residues.residue"]], "rewrite() (in module sympy.series.gruntz)": [[223, "sympy.series.gruntz.rewrite"]], "richardson() (in module sympy.series.acceleration)": [[223, "sympy.series.acceleration.richardson"]], "series() (in module sympy.series.series)": [[223, "sympy.series.series.series"]], "shanks() (in module sympy.series.acceleration)": [[223, "sympy.series.acceleration.shanks"]], "sign() (in module sympy.series.gruntz)": [[223, "sympy.series.gruntz.sign"]], "union() (sympy.series.gruntz.subsset method)": [[223, "sympy.series.gruntz.SubsSet.union"]], "cartesiancomplexregion (class in sympy.sets.fancysets)": [[224, "sympy.sets.fancysets.CartesianComplexRegion"]], "complement (class in sympy.sets.sets)": [[224, "sympy.sets.sets.Complement"]], "complexregion (class in sympy.sets.fancysets)": [[224, "sympy.sets.fancysets.ComplexRegion"]], "complexes (class in sympy.sets.fancysets)": [[224, "sympy.sets.fancysets.Complexes"]], "conditionset (class in sympy.sets.conditionset)": [[224, "sympy.sets.conditionset.ConditionSet"]], "contains (class in sympy.sets.conditionset)": [[224, "sympy.sets.conditionset.Contains"]], "disjointunion (class in sympy.sets.sets)": [[224, "sympy.sets.sets.DisjointUnion"]], "emptyset (class in sympy.sets.sets)": [[224, "sympy.sets.sets.EmptySet"]], "finiteset (class in sympy.sets.sets)": [[224, "sympy.sets.sets.FiniteSet"]], "imageset (class in sympy.sets.fancysets)": [[224, "sympy.sets.fancysets.ImageSet"]], "integers (class in sympy.sets.fancysets)": [[224, "sympy.sets.fancysets.Integers"]], "intersection (class in sympy.sets.sets)": [[224, "sympy.sets.sets.Intersection"]], "interval (class in sympy.sets.sets)": [[224, "sympy.sets.sets.Interval"]], "lopen() (sympy.sets.sets.interval class method)": [[224, "sympy.sets.sets.Interval.Lopen"]], "naturals (class in sympy.sets.fancysets)": [[224, "sympy.sets.fancysets.Naturals"]], "naturals0 (class in sympy.sets.fancysets)": [[224, "sympy.sets.fancysets.Naturals0"]], "polarcomplexregion (class in sympy.sets.fancysets)": [[224, "sympy.sets.fancysets.PolarComplexRegion"]], "powerset (class in sympy.sets.powerset)": [[224, "sympy.sets.powerset.PowerSet"]], "productset (class in sympy.sets.sets)": [[224, "sympy.sets.sets.ProductSet"]], "range (class in sympy.sets.fancysets)": [[224, "sympy.sets.fancysets.Range"]], "rationals (class in sympy.sets.fancysets)": [[224, "sympy.sets.fancysets.Rationals"]], "reals (class in sympy.sets.fancysets)": [[224, "sympy.sets.fancysets.Reals"]], "ropen() (sympy.sets.sets.interval class method)": [[224, "sympy.sets.sets.Interval.Ropen"]], "set (class in sympy.sets.sets)": [[224, "sympy.sets.sets.Set"]], "setkind (class in sympy.sets.conditionset)": [[224, "sympy.sets.conditionset.SetKind"]], "symmetricdifference (class in sympy.sets.sets)": [[224, "sympy.sets.sets.SymmetricDifference"]], "union (class in sympy.sets.sets)": [[224, "sympy.sets.sets.Union"]], "universalset (class in sympy.sets.sets)": [[224, "sympy.sets.sets.UniversalSet"]], "a_interval (sympy.sets.fancysets.complexregion property)": [[224, "sympy.sets.fancysets.ComplexRegion.a_interval"]], "as_relational() (sympy.sets.fancysets.range method)": [[224, "sympy.sets.fancysets.Range.as_relational"]], "as_relational() (sympy.sets.sets.complement method)": [[224, "sympy.sets.sets.Complement.as_relational"]], "as_relational() (sympy.sets.sets.finiteset method)": [[224, "sympy.sets.sets.FiniteSet.as_relational"]], "as_relational() (sympy.sets.sets.intersection method)": [[224, "sympy.sets.sets.Intersection.as_relational"]], "as_relational() (sympy.sets.sets.interval method)": [[224, "sympy.sets.sets.Interval.as_relational"]], "as_relational() (sympy.sets.sets.symmetricdifference method)": [[224, "sympy.sets.sets.SymmetricDifference.as_relational"]], "as_relational() (sympy.sets.sets.union method)": [[224, "sympy.sets.sets.Union.as_relational"]], "b_interval (sympy.sets.fancysets.complexregion property)": [[224, "sympy.sets.fancysets.ComplexRegion.b_interval"]], "boundary (sympy.sets.sets.set property)": [[224, "sympy.sets.sets.Set.boundary"]], "closure (sympy.sets.sets.set property)": [[224, "sympy.sets.sets.Set.closure"]], "complement() (sympy.sets.sets.set method)": [[224, "sympy.sets.sets.Set.complement"]], "contains() (sympy.sets.sets.set method)": [[224, "sympy.sets.sets.Set.contains"]], "end (sympy.sets.sets.interval property)": [[224, "sympy.sets.sets.Interval.end"]], "from_real() (sympy.sets.fancysets.complexregion class method)": [[224, "sympy.sets.fancysets.ComplexRegion.from_real"]], "imageset() (in module sympy.sets.sets)": [[224, "sympy.sets.sets.imageset"]], "inf (sympy.sets.sets.set property)": [[224, "sympy.sets.sets.Set.inf"]], "interior (sympy.sets.sets.set property)": [[224, "sympy.sets.sets.Set.interior"]], "intersect() (sympy.sets.sets.set method)": [[224, "sympy.sets.sets.Set.intersect"]], "intersection() (sympy.sets.sets.set method)": [[224, "sympy.sets.sets.Set.intersection"]], "is_closed (sympy.sets.sets.set property)": [[224, "sympy.sets.sets.Set.is_closed"]], "is_disjoint() (sympy.sets.sets.set method)": [[224, "sympy.sets.sets.Set.is_disjoint"]], "is_iterable (sympy.sets.sets.productset property)": [[224, "sympy.sets.sets.ProductSet.is_iterable"]], "is_left_unbounded (sympy.sets.sets.interval property)": [[224, "sympy.sets.sets.Interval.is_left_unbounded"]], "is_open (sympy.sets.sets.set property)": [[224, "sympy.sets.sets.Set.is_open"]], "is_proper_subset() (sympy.sets.sets.set method)": [[224, "sympy.sets.sets.Set.is_proper_subset"]], "is_proper_superset() (sympy.sets.sets.set method)": [[224, "sympy.sets.sets.Set.is_proper_superset"]], "is_right_unbounded (sympy.sets.sets.interval property)": [[224, "sympy.sets.sets.Interval.is_right_unbounded"]], "is_subset() (sympy.sets.sets.set method)": [[224, "sympy.sets.sets.Set.is_subset"]], "is_superset() (sympy.sets.sets.set method)": [[224, "sympy.sets.sets.Set.is_superset"]], "isdisjoint() (sympy.sets.sets.set method)": [[224, "sympy.sets.sets.Set.isdisjoint"]], "issubset() (sympy.sets.sets.set method)": [[224, "sympy.sets.sets.Set.issubset"]], "issuperset() (sympy.sets.sets.set method)": [[224, "sympy.sets.sets.Set.issuperset"]], "kind (sympy.sets.sets.set property)": [[224, "sympy.sets.sets.Set.kind"]], "left_open (sympy.sets.sets.interval property)": [[224, "sympy.sets.sets.Interval.left_open"]], "measure (sympy.sets.sets.set property)": [[224, "sympy.sets.sets.Set.measure"]], "normalize_theta_set() (in module sympy.sets.fancysets)": [[224, "sympy.sets.fancysets.normalize_theta_set"]], "open() (sympy.sets.sets.interval class method)": [[224, "sympy.sets.sets.Interval.open"]], "powerset() (sympy.sets.sets.set method)": [[224, "sympy.sets.sets.Set.powerset"]], "psets (sympy.sets.fancysets.complexregion property)": [[224, "sympy.sets.fancysets.ComplexRegion.psets"]], "reduce() (sympy.sets.sets.complement static method)": [[224, "sympy.sets.sets.Complement.reduce"]], "reversed (sympy.sets.fancysets.range property)": [[224, "sympy.sets.fancysets.Range.reversed"]], "right_open (sympy.sets.sets.interval property)": [[224, "sympy.sets.sets.Interval.right_open"]], "sets (sympy.sets.fancysets.complexregion property)": [[224, "sympy.sets.fancysets.ComplexRegion.sets"]], "start (sympy.sets.sets.interval property)": [[224, "sympy.sets.sets.Interval.start"]], "sup (sympy.sets.sets.set property)": [[224, "sympy.sets.sets.Set.sup"]], "symmetric_difference() (sympy.sets.sets.set method)": [[224, "sympy.sets.sets.Set.symmetric_difference"]], "sympy.sets.conditionset": [[224, "module-sympy.sets.conditionset"]], "sympy.sets.fancysets": [[224, "module-sympy.sets.fancysets"]], "sympy.sets.powerset": [[224, "module-sympy.sets.powerset"]], "sympy.sets.sets": [[224, "module-sympy.sets.sets"]], "union() (sympy.sets.sets.set method)": [[224, "sympy.sets.sets.Set.union"]], "tr0() (in module sympy.simplify.fu)": [[225, "sympy.simplify.fu.TR0"]], "tr1() (in module sympy.simplify.fu)": [[225, "sympy.simplify.fu.TR1"]], "tr10() (in module sympy.simplify.fu)": [[225, "sympy.simplify.fu.TR10"]], "tr10i() (in module sympy.simplify.fu)": [[225, "sympy.simplify.fu.TR10i"]], "tr11() (in module sympy.simplify.fu)": [[225, "sympy.simplify.fu.TR11"]], "tr111() (in module sympy.simplify.fu)": [[225, "sympy.simplify.fu.TR111"]], "tr12() (in module sympy.simplify.fu)": [[225, "sympy.simplify.fu.TR12"]], "tr12i() (in module sympy.simplify.fu)": [[225, "sympy.simplify.fu.TR12i"]], "tr13() (in module sympy.simplify.fu)": [[225, "sympy.simplify.fu.TR13"]], "tr14() (in module sympy.simplify.fu)": [[225, "sympy.simplify.fu.TR14"]], "tr15() (in module sympy.simplify.fu)": [[225, "sympy.simplify.fu.TR15"]], "tr16() (in module sympy.simplify.fu)": [[225, "sympy.simplify.fu.TR16"]], "tr2() (in module sympy.simplify.fu)": [[225, "sympy.simplify.fu.TR2"]], "tr22() (in module sympy.simplify.fu)": [[225, "sympy.simplify.fu.TR22"]], "tr2i() (in module sympy.simplify.fu)": [[225, "sympy.simplify.fu.TR2i"]], "tr3() (in module sympy.simplify.fu)": [[225, "sympy.simplify.fu.TR3"]], "tr4() (in module sympy.simplify.fu)": [[225, "sympy.simplify.fu.TR4"]], "tr5() (in module sympy.simplify.fu)": [[225, "sympy.simplify.fu.TR5"]], "tr6() (in module sympy.simplify.fu)": [[225, "sympy.simplify.fu.TR6"]], "tr7() (in module sympy.simplify.fu)": [[225, "sympy.simplify.fu.TR7"]], "tr8() (in module sympy.simplify.fu)": [[225, "sympy.simplify.fu.TR8"]], "tr9() (in module sympy.simplify.fu)": [[225, "sympy.simplify.fu.TR9"]], "trmorrie() (in module sympy.simplify.fu)": [[225, "sympy.simplify.fu.TRmorrie"]], "trpower() (in module sympy.simplify.fu)": [[225, "sympy.simplify.fu.TRpower"]], "fu() (in module sympy.simplify.fu)": [[225, "sympy.simplify.fu.fu"]], "sympy.simplify.hyperexpand_doc": [[226, "module-sympy.simplify.hyperexpand_doc"]], "epath (class in sympy.simplify.epathtools)": [[228, "sympy.simplify.epathtools.EPath"]], "apply() (sympy.simplify.epathtools.epath method)": [[228, "sympy.simplify.epathtools.EPath.apply"]], "besselsimp() (in module sympy.simplify.simplify)": [[228, "sympy.simplify.simplify.besselsimp"]], "collect() (in module sympy.simplify.radsimp)": [[228, "sympy.simplify.radsimp.collect"]], "collect_const() (in module sympy.simplify.radsimp)": [[228, "sympy.simplify.radsimp.collect_const"]], "collect_sqrt() (in module sympy.simplify.radsimp)": [[228, "sympy.simplify.radsimp.collect_sqrt"]], "combsimp() (in module sympy.simplify.combsimp)": [[228, "sympy.simplify.combsimp.combsimp"]], "cse() (in module sympy.simplify.cse_main)": [[228, "sympy.simplify.cse_main.cse"]], "epath() (in module sympy.simplify.epathtools)": [[228, "sympy.simplify.epathtools.epath"]], "fraction() (in module sympy.simplify.radsimp)": [[228, "sympy.simplify.radsimp.fraction"]], "hyperexpand() (in module sympy.simplify.hyperexpand)": [[228, "sympy.simplify.hyperexpand.hyperexpand"]], "hypersimilar() (in module sympy.simplify.simplify)": [[228, "sympy.simplify.simplify.hypersimilar"]], "hypersimp() (in module sympy.simplify.simplify)": [[228, "sympy.simplify.simplify.hypersimp"]], "kroneckersimp() (in module sympy.simplify.simplify)": [[228, "sympy.simplify.simplify.kroneckersimp"]], "logcombine() (in module sympy.simplify.simplify)": [[228, "sympy.simplify.simplify.logcombine"]], "nsimplify() (in module sympy.simplify.simplify)": [[228, "sympy.simplify.simplify.nsimplify"]], "nthroot() (in module sympy.simplify.simplify)": [[228, "sympy.simplify.simplify.nthroot"]], "opt_cse() (in module sympy.simplify.cse_main)": [[228, "sympy.simplify.cse_main.opt_cse"]], "posify() (in module sympy.simplify.simplify)": [[228, "sympy.simplify.simplify.posify"]], "powdenest() (in module sympy.simplify.powsimp)": [[228, "sympy.simplify.powsimp.powdenest"]], "powsimp() (in module sympy.simplify.powsimp)": [[228, "sympy.simplify.powsimp.powsimp"]], "rad_rationalize() (in module sympy.simplify.radsimp)": [[228, "sympy.simplify.radsimp.rad_rationalize"]], "radsimp() (in module sympy.simplify.radsimp)": [[228, "sympy.simplify.radsimp.radsimp"]], "ratsimp() (in module sympy.simplify.ratsimp)": [[228, "sympy.simplify.ratsimp.ratsimp"]], "ratsimpmodprime() (in module sympy.simplify.ratsimp)": [[228, "sympy.simplify.ratsimp.ratsimpmodprime"]], "rcollect() (in module sympy.simplify.radsimp)": [[228, "sympy.simplify.radsimp.rcollect"]], "select() (sympy.simplify.epathtools.epath method)": [[228, "sympy.simplify.epathtools.EPath.select"]], "separatevars() (in module sympy.simplify.simplify)": [[228, "sympy.simplify.simplify.separatevars"]], "simplify() (in module sympy.simplify.simplify)": [[228, "sympy.simplify.simplify.simplify"]], "sqrtdenest() (in module sympy.simplify.sqrtdenest)": [[228, "sympy.simplify.sqrtdenest.sqrtdenest"]], "sympy.simplify.combsimp": [[228, "module-sympy.simplify.combsimp"]], "sympy.simplify.cse_main": [[228, "module-sympy.simplify.cse_main"]], "sympy.simplify.epathtools": [[228, "module-sympy.simplify.epathtools"]], "sympy.simplify.hyperexpand": [[228, "module-sympy.simplify.hyperexpand"]], "sympy.simplify.powsimp": [[228, "module-sympy.simplify.powsimp"]], "sympy.simplify.radsimp": [[228, "module-sympy.simplify.radsimp"]], "sympy.simplify.ratsimp": [[228, "module-sympy.simplify.ratsimp"]], "sympy.simplify.sqrtdenest": [[228, "module-sympy.simplify.sqrtdenest"]], "sympy.simplify.trigsimp": [[228, "module-sympy.simplify.trigsimp"]], "tree_cse() (in module sympy.simplify.cse_main)": [[228, "sympy.simplify.cse_main.tree_cse"]], "trigsimp() (in module sympy.simplify.trigsimp)": [[228, "sympy.simplify.trigsimp.trigsimp"]], "binaryquadratic (class in sympy.solvers.diophantine.diophantine)": [[229, "sympy.solvers.diophantine.diophantine.BinaryQuadratic"]], "cubicthue (class in sympy.solvers.diophantine.diophantine)": [[229, "sympy.solvers.diophantine.diophantine.CubicThue"]], "diophantineequationtype (class in sympy.solvers.diophantine.diophantine)": [[229, "sympy.solvers.diophantine.diophantine.DiophantineEquationType"]], "diophantinesolutionset (class in sympy.solvers.diophantine.diophantine)": [[229, "sympy.solvers.diophantine.diophantine.DiophantineSolutionSet"]], "generalpythagorean (class in sympy.solvers.diophantine.diophantine)": [[229, "sympy.solvers.diophantine.diophantine.GeneralPythagorean"]], "generalsumofevenpowers (class in sympy.solvers.diophantine.diophantine)": [[229, "sympy.solvers.diophantine.diophantine.GeneralSumOfEvenPowers"]], "generalsumofsquares (class in sympy.solvers.diophantine.diophantine)": [[229, "sympy.solvers.diophantine.diophantine.GeneralSumOfSquares"]], "homogeneousgeneralquadratic (class in sympy.solvers.diophantine.diophantine)": [[229, "sympy.solvers.diophantine.diophantine.HomogeneousGeneralQuadratic"]], "homogeneousternaryquadratic (class in sympy.solvers.diophantine.diophantine)": [[229, "sympy.solvers.diophantine.diophantine.HomogeneousTernaryQuadratic"]], "homogeneousternaryquadraticnormal (class in sympy.solvers.diophantine.diophantine)": [[229, "sympy.solvers.diophantine.diophantine.HomogeneousTernaryQuadraticNormal"]], "inhomogeneousgeneralquadratic (class in sympy.solvers.diophantine.diophantine)": [[229, "sympy.solvers.diophantine.diophantine.InhomogeneousGeneralQuadratic"]], "inhomogeneousternaryquadratic (class in sympy.solvers.diophantine.diophantine)": [[229, "sympy.solvers.diophantine.diophantine.InhomogeneousTernaryQuadratic"]], "linear (class in sympy.solvers.diophantine.diophantine)": [[229, "sympy.solvers.diophantine.diophantine.Linear"]], "pqa() (in module sympy.solvers.diophantine.diophantine)": [[229, "sympy.solvers.diophantine.diophantine.PQa"]], "univariate (class in sympy.solvers.diophantine.diophantine)": [[229, "sympy.solvers.diophantine.diophantine.Univariate"]], "base_solution_linear() (in module sympy.solvers.diophantine.diophantine)": [[229, "sympy.solvers.diophantine.diophantine.base_solution_linear"]], "classify_diop() (in module sympy.solvers.diophantine.diophantine)": [[229, "sympy.solvers.diophantine.diophantine.classify_diop"]], "cornacchia() (in module sympy.solvers.diophantine.diophantine)": [[229, "sympy.solvers.diophantine.diophantine.cornacchia"]], "descent() (in module sympy.solvers.diophantine.diophantine)": [[229, "sympy.solvers.diophantine.diophantine.descent"]], "diop_dn() (in module sympy.solvers.diophantine.diophantine)": [[229, "sympy.solvers.diophantine.diophantine.diop_DN"]], "diop_bf_dn() (in module sympy.solvers.diophantine.diophantine)": [[229, "sympy.solvers.diophantine.diophantine.diop_bf_DN"]], "diop_general_pythagorean() (in module sympy.solvers.diophantine.diophantine)": [[229, "sympy.solvers.diophantine.diophantine.diop_general_pythagorean"]], "diop_general_sum_of_even_powers() (in module sympy.solvers.diophantine.diophantine)": [[229, "sympy.solvers.diophantine.diophantine.diop_general_sum_of_even_powers"]], "diop_general_sum_of_squares() (in module sympy.solvers.diophantine.diophantine)": [[229, "sympy.solvers.diophantine.diophantine.diop_general_sum_of_squares"]], "diop_linear() (in module sympy.solvers.diophantine.diophantine)": [[229, "sympy.solvers.diophantine.diophantine.diop_linear"]], "diop_quadratic() (in module sympy.solvers.diophantine.diophantine)": [[229, "sympy.solvers.diophantine.diophantine.diop_quadratic"]], "diop_solve() (in module sympy.solvers.diophantine.diophantine)": [[229, "sympy.solvers.diophantine.diophantine.diop_solve"]], "diop_ternary_quadratic() (in module sympy.solvers.diophantine.diophantine)": [[229, "sympy.solvers.diophantine.diophantine.diop_ternary_quadratic"]], "diop_ternary_quadratic_normal() (in module sympy.solvers.diophantine.diophantine)": [[229, "sympy.solvers.diophantine.diophantine.diop_ternary_quadratic_normal"]], "diophantine() (in module sympy.solvers.diophantine.diophantine)": [[229, "sympy.solvers.diophantine.diophantine.diophantine"]], "divisible() (in module sympy.solvers.diophantine.diophantine)": [[229, "sympy.solvers.diophantine.diophantine.divisible"]], "equivalent() (in module sympy.solvers.diophantine.diophantine)": [[229, "sympy.solvers.diophantine.diophantine.equivalent"]], "find_dn() (in module sympy.solvers.diophantine.diophantine)": [[229, "sympy.solvers.diophantine.diophantine.find_DN"]], "gaussian_reduce() (in module sympy.solvers.diophantine.diophantine)": [[229, "sympy.solvers.diophantine.diophantine.gaussian_reduce"]], "holzer() (in module sympy.solvers.diophantine.diophantine)": [[229, "sympy.solvers.diophantine.diophantine.holzer"]], "ldescent() (in module sympy.solvers.diophantine.diophantine)": [[229, "sympy.solvers.diophantine.diophantine.ldescent"]], "matches() (sympy.solvers.diophantine.diophantine.diophantineequationtype method)": [[229, "sympy.solvers.diophantine.diophantine.DiophantineEquationType.matches"]], "merge_solution() (in module sympy.solvers.diophantine.diophantine)": [[229, "sympy.solvers.diophantine.diophantine.merge_solution"]], "parametrize_ternary_quadratic() (in module sympy.solvers.diophantine.diophantine)": [[229, "sympy.solvers.diophantine.diophantine.parametrize_ternary_quadratic"]], "partition() (in module sympy.solvers.diophantine.diophantine)": [[229, "sympy.solvers.diophantine.diophantine.partition"]], "power_representation() (in module sympy.solvers.diophantine.diophantine)": [[229, "sympy.solvers.diophantine.diophantine.power_representation"]], "prime_as_sum_of_two_squares() (in module sympy.solvers.diophantine.diophantine)": [[229, "sympy.solvers.diophantine.diophantine.prime_as_sum_of_two_squares"]], "reconstruct() (in module sympy.solvers.diophantine.diophantine)": [[229, "sympy.solvers.diophantine.diophantine.reconstruct"]], "sqf_normal() (in module sympy.solvers.diophantine.diophantine)": [[229, "sympy.solvers.diophantine.diophantine.sqf_normal"]], "square_factor() (in module sympy.solvers.diophantine.diophantine)": [[229, "sympy.solvers.diophantine.diophantine.square_factor"]], "sum_of_four_squares() (in module sympy.solvers.diophantine.diophantine)": [[229, "sympy.solvers.diophantine.diophantine.sum_of_four_squares"]], "sum_of_powers() (in module sympy.solvers.diophantine.diophantine)": [[229, "sympy.solvers.diophantine.diophantine.sum_of_powers"]], "sum_of_squares() (in module sympy.solvers.diophantine.diophantine)": [[229, "sympy.solvers.diophantine.diophantine.sum_of_squares"]], "sum_of_three_squares() (in module sympy.solvers.diophantine.diophantine)": [[229, "sympy.solvers.diophantine.diophantine.sum_of_three_squares"]], "transformation_to_dn() (in module sympy.solvers.diophantine.diophantine)": [[229, "sympy.solvers.diophantine.diophantine.transformation_to_DN"]], "transformation_to_normal() (in module sympy.solvers.diophantine.diophantine)": [[229, "sympy.solvers.diophantine.diophantine.transformation_to_normal"]], "reduce_abs_inequalities() (in module sympy.solvers.inequalities)": [[231, "sympy.solvers.inequalities.reduce_abs_inequalities"]], "reduce_abs_inequality() (in module sympy.solvers.inequalities)": [[231, "sympy.solvers.inequalities.reduce_abs_inequality"]], "reduce_inequalities() (in module sympy.solvers.inequalities)": [[231, "sympy.solvers.inequalities.reduce_inequalities"]], "reduce_rational_inequalities() (in module sympy.solvers.inequalities)": [[231, "sympy.solvers.inequalities.reduce_rational_inequalities"]], "solve_poly_inequalities() (in module sympy.solvers.inequalities)": [[231, "sympy.solvers.inequalities.solve_poly_inequalities"]], "solve_poly_inequality() (in module sympy.solvers.inequalities)": [[231, "sympy.solvers.inequalities.solve_poly_inequality"]], "solve_rational_inequalities() (in module sympy.solvers.inequalities)": [[231, "sympy.solvers.inequalities.solve_rational_inequalities"]], "solve_univariate_inequality() (in module sympy.solvers.inequalities)": [[231, "sympy.solvers.inequalities.solve_univariate_inequality"]], "sympy.solvers.inequalities": [[231, "module-sympy.solvers.inequalities"]], "almostlinear (class in sympy.solvers.ode.single)": [[232, "sympy.solvers.ode.single.AlmostLinear"]], "bernoulli (class in sympy.solvers.ode.single)": [[232, "sympy.solvers.ode.single.Bernoulli"]], "factorable (class in sympy.solvers.ode.single)": [[232, "sympy.solvers.ode.single.Factorable"]], "firstexact (class in sympy.solvers.ode.single)": [[232, "sympy.solvers.ode.single.FirstExact"]], "firstlinear (class in sympy.solvers.ode.single)": [[232, "sympy.solvers.ode.single.FirstLinear"]], "homogeneouscoeffbest (class in sympy.solvers.ode.single)": [[232, "sympy.solvers.ode.single.HomogeneousCoeffBest"]], "homogeneouscoeffsubsdepdivindep (class in sympy.solvers.ode.single)": [[232, "sympy.solvers.ode.single.HomogeneousCoeffSubsDepDivIndep"]], "homogeneouscoeffsubsindepdivdep (class in sympy.solvers.ode.single)": [[232, "sympy.solvers.ode.single.HomogeneousCoeffSubsIndepDivDep"]], "liegroup (class in sympy.solvers.ode.single)": [[232, "sympy.solvers.ode.single.LieGroup"]], "linearcoefficients (class in sympy.solvers.ode.single)": [[232, "sympy.solvers.ode.single.LinearCoefficients"]], "liouville (class in sympy.solvers.ode.single)": [[232, "sympy.solvers.ode.single.Liouville"]], "nthalgebraic (class in sympy.solvers.ode.single)": [[232, "sympy.solvers.ode.single.NthAlgebraic"]], "nthlinearconstantcoeffhomogeneous (class in sympy.solvers.ode.single)": [[232, "sympy.solvers.ode.single.NthLinearConstantCoeffHomogeneous"]], "nthlinearconstantcoeffundeterminedcoefficients (class in sympy.solvers.ode.single)": [[232, "sympy.solvers.ode.single.NthLinearConstantCoeffUndeterminedCoefficients"]], "nthlinearconstantcoeffvariationofparameters (class in sympy.solvers.ode.single)": [[232, "sympy.solvers.ode.single.NthLinearConstantCoeffVariationOfParameters"]], "nthlineareulereqhomogeneous (class in sympy.solvers.ode.single)": [[232, "sympy.solvers.ode.single.NthLinearEulerEqHomogeneous"]], "nthlineareulereqnonhomogeneousundeterminedcoefficients (class in sympy.solvers.ode.single)": [[232, "sympy.solvers.ode.single.NthLinearEulerEqNonhomogeneousUndeterminedCoefficients"]], "nthlineareulereqnonhomogeneousvariationofparameters (class in sympy.solvers.ode.single)": [[232, "sympy.solvers.ode.single.NthLinearEulerEqNonhomogeneousVariationOfParameters"]], "nthorderreducible (class in sympy.solvers.ode.single)": [[232, "sympy.solvers.ode.single.NthOrderReducible"]], "rationalriccati (class in sympy.solvers.ode.single)": [[232, "sympy.solvers.ode.single.RationalRiccati"]], "riccatispecial (class in sympy.solvers.ode.single)": [[232, "sympy.solvers.ode.single.RiccatiSpecial"]], "secondhypergeometric (class in sympy.solvers.ode.single)": [[232, "sympy.solvers.ode.single.SecondHypergeometric"]], "secondlinearairy (class in sympy.solvers.ode.single)": [[232, "sympy.solvers.ode.single.SecondLinearAiry"]], "secondlinearbessel (class in sympy.solvers.ode.single)": [[232, "sympy.solvers.ode.single.SecondLinearBessel"]], "separable (class in sympy.solvers.ode.single)": [[232, "sympy.solvers.ode.single.Separable"]], "separablereduced (class in sympy.solvers.ode.single)": [[232, "sympy.solvers.ode.single.SeparableReduced"]], "_handle_integral() (in module sympy.solvers.ode.ode)": [[232, "sympy.solvers.ode.ode._handle_Integral"]], "_linear_2eq_order1_type6() (in module sympy.solvers.ode.ode)": [[232, "sympy.solvers.ode.ode._linear_2eq_order1_type6"]], "_linear_2eq_order1_type7() (in module sympy.solvers.ode.ode)": [[232, "sympy.solvers.ode.ode._linear_2eq_order1_type7"]], "_nonlinear_2eq_order1_type1() (in module sympy.solvers.ode.ode)": [[232, "sympy.solvers.ode.ode._nonlinear_2eq_order1_type1"]], "_nonlinear_2eq_order1_type2() (in module sympy.solvers.ode.ode)": [[232, "sympy.solvers.ode.ode._nonlinear_2eq_order1_type2"]], "_nonlinear_2eq_order1_type3() (in module sympy.solvers.ode.ode)": [[232, "sympy.solvers.ode.ode._nonlinear_2eq_order1_type3"]], "_nonlinear_2eq_order1_type4() (in module sympy.solvers.ode.ode)": [[232, "sympy.solvers.ode.ode._nonlinear_2eq_order1_type4"]], "_nonlinear_2eq_order1_type5() (in module sympy.solvers.ode.ode)": [[232, "sympy.solvers.ode.ode._nonlinear_2eq_order1_type5"]], "_nonlinear_3eq_order1_type1() (in module sympy.solvers.ode.ode)": [[232, "sympy.solvers.ode.ode._nonlinear_3eq_order1_type1"]], "_nonlinear_3eq_order1_type2() (in module sympy.solvers.ode.ode)": [[232, "sympy.solvers.ode.ode._nonlinear_3eq_order1_type2"]], "_nonlinear_3eq_order1_type3() (in module sympy.solvers.ode.ode)": [[232, "sympy.solvers.ode.ode._nonlinear_3eq_order1_type3"]], "_nonlinear_3eq_order1_type4() (in module sympy.solvers.ode.ode)": [[232, "sympy.solvers.ode.ode._nonlinear_3eq_order1_type4"]], "_nonlinear_3eq_order1_type5() (in module sympy.solvers.ode.ode)": [[232, "sympy.solvers.ode.ode._nonlinear_3eq_order1_type5"]], "allhints (in module sympy.solvers.ode)": [[232, "sympy.solvers.ode.allhints"]], "canonical_odes() (in module sympy.solvers.ode.systems)": [[232, "sympy.solvers.ode.systems.canonical_odes"]], "checkinfsol() (in module sympy.solvers.ode)": [[232, "sympy.solvers.ode.checkinfsol"]], "checkodesol() (in module sympy.solvers.ode)": [[232, "sympy.solvers.ode.checkodesol"]], "classify_ode() (in module sympy.solvers.ode)": [[232, "sympy.solvers.ode.classify_ode"]], "compute_m_ybar() (in module sympy.solvers.ode.riccati)": [[232, "sympy.solvers.ode.riccati.compute_m_ybar"]], "constant_renumber() (in module sympy.solvers.ode.ode)": [[232, "sympy.solvers.ode.ode.constant_renumber"]], "constantsimp() (in module sympy.solvers.ode)": [[232, "sympy.solvers.ode.constantsimp"]], "construct_c() (in module sympy.solvers.ode.riccati)": [[232, "sympy.solvers.ode.riccati.construct_c"]], "construct_d() (in module sympy.solvers.ode.riccati)": [[232, "sympy.solvers.ode.riccati.construct_d"]], "dsolve() (in module sympy.solvers.ode)": [[232, "sympy.solvers.ode.dsolve"]], "dsolve_system() (in module sympy.solvers.ode.systems)": [[232, "sympy.solvers.ode.systems.dsolve_system"]], "get_gen_sol_from_part_sol() (in module sympy.solvers.ode.riccati)": [[232, "sympy.solvers.ode.riccati.get_gen_sol_from_part_sol"]], "homogeneous_order() (in module sympy.solvers.ode)": [[232, "sympy.solvers.ode.homogeneous_order"]], "infinitesimals() (in module sympy.solvers.ode)": [[232, "sympy.solvers.ode.infinitesimals"]], "lie_heuristic_abaco1_product() (in module sympy.solvers.ode.lie_group)": [[232, "sympy.solvers.ode.lie_group.lie_heuristic_abaco1_product"]], "lie_heuristic_abaco1_simple() (in module sympy.solvers.ode.lie_group)": [[232, "sympy.solvers.ode.lie_group.lie_heuristic_abaco1_simple"]], "lie_heuristic_abaco2_similar() (in module sympy.solvers.ode.lie_group)": [[232, "sympy.solvers.ode.lie_group.lie_heuristic_abaco2_similar"]], "lie_heuristic_abaco2_unique_general() (in module sympy.solvers.ode.lie_group)": [[232, "sympy.solvers.ode.lie_group.lie_heuristic_abaco2_unique_general"]], "lie_heuristic_abaco2_unique_unknown() (in module sympy.solvers.ode.lie_group)": [[232, "sympy.solvers.ode.lie_group.lie_heuristic_abaco2_unique_unknown"]], "lie_heuristic_bivariate() (in module sympy.solvers.ode.lie_group)": [[232, "sympy.solvers.ode.lie_group.lie_heuristic_bivariate"]], "lie_heuristic_chi() (in module sympy.solvers.ode.lie_group)": [[232, "sympy.solvers.ode.lie_group.lie_heuristic_chi"]], "lie_heuristic_function_sum() (in module sympy.solvers.ode.lie_group)": [[232, "sympy.solvers.ode.lie_group.lie_heuristic_function_sum"]], "lie_heuristic_linear() (in module sympy.solvers.ode.lie_group)": [[232, "sympy.solvers.ode.lie_group.lie_heuristic_linear"]], "linear_ode_to_matrix() (in module sympy.solvers.ode.systems)": [[232, "sympy.solvers.ode.systems.linear_ode_to_matrix"]], "linodesolve() (in module sympy.solvers.ode.systems)": [[232, "sympy.solvers.ode.systems.linodesolve"]], "linodesolve_type() (in module sympy.solvers.ode.systems)": [[232, "sympy.solvers.ode.systems.linodesolve_type"]], "matrix_exp() (in module sympy.solvers.ode.systems)": [[232, "sympy.solvers.ode.systems.matrix_exp"]], "matrix_exp_jordan_form() (in module sympy.solvers.ode.systems)": [[232, "sympy.solvers.ode.systems.matrix_exp_jordan_form"]], "ode_1st_power_series() (in module sympy.solvers.ode.ode)": [[232, "sympy.solvers.ode.ode.ode_1st_power_series"]], "ode_2nd_power_series_ordinary() (in module sympy.solvers.ode.ode)": [[232, "sympy.solvers.ode.ode.ode_2nd_power_series_ordinary"]], "ode_2nd_power_series_regular() (in module sympy.solvers.ode.ode)": [[232, "sympy.solvers.ode.ode.ode_2nd_power_series_regular"]], "ode_sol_simplicity() (in module sympy.solvers.ode.ode)": [[232, "sympy.solvers.ode.ode.ode_sol_simplicity"]], "odesimp() (in module sympy.solvers.ode.ode)": [[232, "sympy.solvers.ode.ode.odesimp"]], "rational_laurent_series() (in module sympy.solvers.ode.riccati)": [[232, "sympy.solvers.ode.riccati.rational_laurent_series"]], "remove_redundant_sols() (in module sympy.solvers.ode.riccati)": [[232, "sympy.solvers.ode.riccati.remove_redundant_sols"]], "riccati_inverse_normal() (in module sympy.solvers.ode.riccati)": [[232, "sympy.solvers.ode.riccati.riccati_inverse_normal"]], "riccati_normal() (in module sympy.solvers.ode.riccati)": [[232, "sympy.solvers.ode.riccati.riccati_normal"]], "riccati_reduced() (in module sympy.solvers.ode.riccati)": [[232, "sympy.solvers.ode.riccati.riccati_reduced"]], "solve_aux_eq() (in module sympy.solvers.ode.riccati)": [[232, "sympy.solvers.ode.riccati.solve_aux_eq"]], "solve_riccati() (in module sympy.solvers.ode.riccati)": [[232, "sympy.solvers.ode.riccati.solve_riccati"]], "sympy.solvers.ode": [[232, "module-sympy.solvers.ode"]], "sympy.solvers.ode.ode": [[232, "module-sympy.solvers.ode.ode"]], "checkpdesol() (in module sympy.solvers.pde)": [[233, "sympy.solvers.pde.checkpdesol"]], "classify_pde() (in module sympy.solvers.pde)": [[233, "sympy.solvers.pde.classify_pde"]], "pde_1st_linear_constant_coeff() (in module sympy.solvers.pde)": [[233, "sympy.solvers.pde.pde_1st_linear_constant_coeff"]], "pde_1st_linear_constant_coeff_homogeneous() (in module sympy.solvers.pde)": [[233, "sympy.solvers.pde.pde_1st_linear_constant_coeff_homogeneous"]], "pde_1st_linear_variable_coeff() (in module sympy.solvers.pde)": [[233, "sympy.solvers.pde.pde_1st_linear_variable_coeff"]], "pde_separate() (in module sympy.solvers.pde)": [[233, "sympy.solvers.pde.pde_separate"]], "pde_separate_add() (in module sympy.solvers.pde)": [[233, "sympy.solvers.pde.pde_separate_add"]], "pde_separate_mul() (in module sympy.solvers.pde)": [[233, "sympy.solvers.pde.pde_separate_mul"]], "pdsolve() (in module sympy.solvers.pde)": [[233, "sympy.solvers.pde.pdsolve"]], "sympy.solvers.pde": [[233, "module-sympy.solvers.pde"]], "checksol() (in module sympy.solvers.solvers)": [[234, "sympy.solvers.solvers.checksol"]], "nsolve() (in module sympy.solvers.solvers)": [[234, "sympy.solvers.solvers.nsolve"]], "ode_order() (in module sympy.solvers.deutils)": [[234, "sympy.solvers.deutils.ode_order"]], "rsolve() (in module sympy.solvers.recurr)": [[234, "sympy.solvers.recurr.rsolve"]], "rsolve_hyper() (in module sympy.solvers.recurr)": [[234, "sympy.solvers.recurr.rsolve_hyper"]], "rsolve_poly() (in module sympy.solvers.recurr)": [[234, "sympy.solvers.recurr.rsolve_poly"]], "rsolve_ratio() (in module sympy.solvers.recurr)": [[234, "sympy.solvers.recurr.rsolve_ratio"]], "solve() (in module sympy.solvers.solvers)": [[234, "sympy.solvers.solvers.solve"]], "solve_linear() (in module sympy.solvers.solvers)": [[234, "sympy.solvers.solvers.solve_linear"]], "solve_linear_system() (in module sympy.solvers.solvers)": [[234, "sympy.solvers.solvers.solve_linear_system"]], "solve_linear_system_lu() (in module sympy.solvers.solvers)": [[234, "sympy.solvers.solvers.solve_linear_system_LU"]], "solve_poly_system() (in module sympy.solvers.polysys)": [[234, "sympy.solvers.polysys.solve_poly_system"]], "solve_triangulated() (in module sympy.solvers.polysys)": [[234, "sympy.solvers.polysys.solve_triangulated"]], "solve_undetermined_coeffs() (in module sympy.solvers.solvers)": [[234, "sympy.solvers.solvers.solve_undetermined_coeffs"]], "sympy.solvers": [[234, "module-sympy.solvers"]], "sympy.solvers.recurr": [[234, "module-sympy.solvers.recurr"]], "unrad() (in module sympy.solvers.solvers)": [[234, "sympy.solvers.solvers.unrad"]], "_is_exponential() (in module sympy.solvers.solveset)": [[235, "sympy.solvers.solveset._is_exponential"]], "_is_logarithmic() (in module sympy.solvers.solveset)": [[235, "sympy.solvers.solveset._is_logarithmic"]], "_solve_exponential() (in module sympy.solvers.solveset)": [[235, "sympy.solvers.solveset._solve_exponential"]], "_solve_logarithm() (in module sympy.solvers.solveset)": [[235, "sympy.solvers.solveset._solve_logarithm"]], "_transolve() (in module sympy.solvers.solveset)": [[235, "sympy.solvers.solveset._transolve"]], "domain_check() (in module sympy.solvers.solveset)": [[235, "sympy.solvers.solveset.domain_check"]], "invert_complex() (in module sympy.solvers.solveset)": [[235, "sympy.solvers.solveset.invert_complex"]], "invert_real() (in module sympy.solvers.solveset)": [[235, "sympy.solvers.solveset.invert_real"]], "linear_eq_to_matrix() (in module sympy.solvers.solveset)": [[235, "sympy.solvers.solveset.linear_eq_to_matrix"]], "linsolve() (in module sympy.solvers.solveset)": [[235, "sympy.solvers.solveset.linsolve"]], "nonlinsolve() (in module sympy.solvers.solveset)": [[235, "sympy.solvers.solveset.nonlinsolve"]], "solveset() (in module sympy.solvers.solveset)": [[235, "sympy.solvers.solveset.solveset"]], "solveset_complex() (in module sympy.solvers.solveset)": [[235, "sympy.solvers.solveset.solveset_complex"]], "solveset_real() (in module sympy.solvers.solveset)": [[235, "sympy.solvers.solveset.solveset_real"]], "solvify() (in module sympy.solvers.solveset)": [[235, "sympy.solvers.solveset.solvify"]], "sympy.solvers.solveset": [[235, "module-sympy.solvers.solveset"]], "arcsin() (in module sympy.stats)": [[236, "sympy.stats.Arcsin"]], "benini() (in module sympy.stats)": [[236, "sympy.stats.Benini"]], "bernoulli() (in module sympy.stats)": [[236, "sympy.stats.Bernoulli"]], "bernoulliprocess (class in sympy.stats)": [[236, "sympy.stats.BernoulliProcess"]], "beta() (in module sympy.stats)": [[236, "sympy.stats.Beta"]], "betabinomial() (in module sympy.stats)": [[236, "sympy.stats.BetaBinomial"]], "betanoncentral() (in module sympy.stats)": [[236, "sympy.stats.BetaNoncentral"]], "betaprime() (in module sympy.stats)": [[236, "sympy.stats.BetaPrime"]], "binomial() (in module sympy.stats)": [[236, "sympy.stats.Binomial"]], "boundedpareto() (in module sympy.stats)": [[236, "sympy.stats.BoundedPareto"]], "cauchy() (in module sympy.stats)": [[236, "sympy.stats.Cauchy"]], "centralmoment (class in sympy.stats)": [[236, "sympy.stats.CentralMoment"]], "chi() (in module sympy.stats)": [[236, "sympy.stats.Chi"]], "chinoncentral() (in module sympy.stats)": [[236, "sympy.stats.ChiNoncentral"]], "chisquared() (in module sympy.stats)": [[236, "sympy.stats.ChiSquared"]], "coin() (in module sympy.stats)": [[236, "sympy.stats.Coin"]], "compounddistribution (class in sympy.stats.compound_rv)": [[236, "sympy.stats.compound_rv.CompoundDistribution"]], "conditionaldomain (class in sympy.stats.rv)": [[236, "sympy.stats.rv.ConditionalDomain"]], "continuousdomain (class in sympy.stats.crv)": [[236, "sympy.stats.crv.ContinuousDomain"]], "continuousmarkovchain (class in sympy.stats)": [[236, "sympy.stats.ContinuousMarkovChain"]], "continuouspspace (class in sympy.stats.crv)": [[236, "sympy.stats.crv.ContinuousPSpace"]], "continuousrv() (in module sympy.stats)": [[236, "sympy.stats.ContinuousRV"]], "covariance (class in sympy.stats)": [[236, "sympy.stats.Covariance"]], "crosscovariancematrix (class in sympy.stats)": [[236, "sympy.stats.CrossCovarianceMatrix"]], "dagum() (in module sympy.stats)": [[236, "sympy.stats.Dagum"]], "davis() (in module sympy.stats)": [[236, "sympy.stats.Davis"]], "die() (in module sympy.stats)": [[236, "sympy.stats.Die"]], "diepspace (class in sympy.stats.frv_types)": [[236, "sympy.stats.frv_types.DiePSpace"]], "discretemarkovchain (class in sympy.stats)": [[236, "sympy.stats.DiscreteMarkovChain"]], "discreteuniform() (in module sympy.stats)": [[236, "sympy.stats.DiscreteUniform"]], "e() (in module sympy.stats)": [[236, "sympy.stats.E"]], "erlang() (in module sympy.stats)": [[236, "sympy.stats.Erlang"]], "exgaussian() (in module sympy.stats)": [[236, "sympy.stats.ExGaussian"]], "expectation (class in sympy.stats)": [[236, "sympy.stats.Expectation"]], "expectationmatrix (class in sympy.stats)": [[236, "sympy.stats.ExpectationMatrix"]], "exponential() (in module sympy.stats)": [[236, "sympy.stats.Exponential"]], "fdistribution() (in module sympy.stats)": [[236, "sympy.stats.FDistribution"]], "finitedomain (class in sympy.stats.frv)": [[236, "sympy.stats.frv.FiniteDomain"]], "finitepspace (class in sympy.stats.frv)": [[236, "sympy.stats.frv.FinitePSpace"]], "finiterv() (in module sympy.stats)": [[236, "sympy.stats.FiniteRV"]], "fisherz() (in module sympy.stats)": [[236, "sympy.stats.FisherZ"]], "frechet() (in module sympy.stats)": [[236, "sympy.stats.Frechet"]], "gamma() (in module sympy.stats)": [[236, "sympy.stats.Gamma"]], "gammainverse() (in module sympy.stats)": [[236, "sympy.stats.GammaInverse"]], "gammaprocess (class in sympy.stats)": [[236, "sympy.stats.GammaProcess"]], "generalizedmultivariateloggamma() (in module sympy.stats)": [[236, "sympy.stats.GeneralizedMultivariateLogGamma"]], "generalizedmultivariateloggammaomega() (in module sympy.stats)": [[236, "sympy.stats.GeneralizedMultivariateLogGammaOmega"]], "geometric() (in module sympy.stats)": [[236, "sympy.stats.Geometric"]], "gompertz() (in module sympy.stats)": [[236, "sympy.stats.Gompertz"]], "gumbel() (in module sympy.stats)": [[236, "sympy.stats.Gumbel"]], "hermite() (in module sympy.stats)": [[236, "sympy.stats.Hermite"]], "hypergeometric() (in module sympy.stats)": [[236, "sympy.stats.Hypergeometric"]], "jointrv() (in module sympy.stats)": [[236, "sympy.stats.JointRV"]], "kumaraswamy() (in module sympy.stats)": [[236, "sympy.stats.Kumaraswamy"]], "laplace() (in module sympy.stats)": [[236, "sympy.stats.Laplace"]], "levy() (in module sympy.stats)": [[236, "sympy.stats.Levy"]], "loglogistic() (in module sympy.stats)": [[236, "sympy.stats.LogLogistic"]], "lognormal() (in module sympy.stats)": [[236, "sympy.stats.LogNormal"]], "logarithmic() (in module sympy.stats)": [[236, "sympy.stats.Logarithmic"]], "logistic() (in module sympy.stats)": [[236, "sympy.stats.Logistic"]], "lomax() (in module sympy.stats)": [[236, "sympy.stats.Lomax"]], "matrixgamma() (in module sympy.stats)": [[236, "sympy.stats.MatrixGamma"]], "matrixnormal() (in module sympy.stats)": [[236, "sympy.stats.MatrixNormal"]], "maxwell() (in module sympy.stats)": [[236, "sympy.stats.Maxwell"]], "moment (class in sympy.stats)": [[236, "sympy.stats.Moment"]], "moyal() (in module sympy.stats)": [[236, "sympy.stats.Moyal"]], "multinomial() (in module sympy.stats)": [[236, "sympy.stats.Multinomial"]], "multivariatebeta() (in module sympy.stats)": [[236, "sympy.stats.MultivariateBeta"]], "multivariateewens() (in module sympy.stats)": [[236, "sympy.stats.MultivariateEwens"]], "multivariatelaplace() (in module sympy.stats)": [[236, "sympy.stats.MultivariateLaplace"]], "multivariatenormal() (in module sympy.stats)": [[236, "sympy.stats.MultivariateNormal"]], "multivariatet() (in module sympy.stats)": [[236, "sympy.stats.MultivariateT"]], "nakagami() (in module sympy.stats)": [[236, "sympy.stats.Nakagami"]], "negativebinomial() (in module sympy.stats)": [[236, "sympy.stats.NegativeBinomial"]], "negativemultinomial() (in module sympy.stats)": [[236, "sympy.stats.NegativeMultinomial"]], "normal() (in module sympy.stats)": [[236, "sympy.stats.Normal"]], "normalgamma() (in module sympy.stats)": [[236, "sympy.stats.NormalGamma"]], "normalpspace (class in sympy.stats.crv_types)": [[236, "sympy.stats.crv_types.NormalPSpace"]], "p() (in module sympy.stats)": [[236, "sympy.stats.P"]], "pspace (class in sympy.stats.rv)": [[236, "sympy.stats.rv.PSpace"]], "pareto() (in module sympy.stats)": [[236, "sympy.stats.Pareto"]], "poisson() (in module sympy.stats)": [[236, "sympy.stats.Poisson"]], "poissonprocess (class in sympy.stats)": [[236, "sympy.stats.PoissonProcess"]], "powerfunction() (in module sympy.stats)": [[236, "sympy.stats.PowerFunction"]], "probability (class in sympy.stats)": [[236, "sympy.stats.Probability"]], "productdomain (class in sympy.stats.rv)": [[236, "sympy.stats.rv.ProductDomain"]], "productpspace (class in sympy.stats.rv)": [[236, "sympy.stats.rv.ProductPSpace"]], "quadraticu() (in module sympy.stats)": [[236, "sympy.stats.QuadraticU"]], "rademacher() (in module sympy.stats)": [[236, "sympy.stats.Rademacher"]], "raisedcosine() (in module sympy.stats)": [[236, "sympy.stats.RaisedCosine"]], "randomdomain (class in sympy.stats.rv)": [[236, "sympy.stats.rv.RandomDomain"]], "randomsymbol (class in sympy.stats.rv)": [[236, "sympy.stats.rv.RandomSymbol"]], "rayleigh() (in module sympy.stats)": [[236, "sympy.stats.Rayleigh"]], "reciprocal() (in module sympy.stats)": [[236, "sympy.stats.Reciprocal"]], "shiftedgompertz() (in module sympy.stats)": [[236, "sympy.stats.ShiftedGompertz"]], "singledomain (class in sympy.stats.rv)": [[236, "sympy.stats.rv.SingleDomain"]], "singlepspace (class in sympy.stats.rv)": [[236, "sympy.stats.rv.SinglePSpace"]], "skellam() (in module sympy.stats)": [[236, "sympy.stats.Skellam"]], "studentt() (in module sympy.stats)": [[236, "sympy.stats.StudentT"]], "trapezoidal() (in module sympy.stats)": [[236, "sympy.stats.Trapezoidal"]], "triangular() (in module sympy.stats)": [[236, "sympy.stats.Triangular"]], "uniform() (in module sympy.stats)": [[236, "sympy.stats.Uniform"]], "uniformsum() (in module sympy.stats)": [[236, "sympy.stats.UniformSum"]], "variance (class in sympy.stats)": [[236, "sympy.stats.Variance"]], "variancematrix (class in sympy.stats)": [[236, "sympy.stats.VarianceMatrix"]], "vonmises() (in module sympy.stats)": [[236, "sympy.stats.VonMises"]], "wald() (in module sympy.stats)": [[236, "sympy.stats.Wald"]], "weibull() (in module sympy.stats)": [[236, "sympy.stats.Weibull"]], "wienerprocess (class in sympy.stats)": [[236, "sympy.stats.WienerProcess"]], "wignersemicircle() (in module sympy.stats)": [[236, "sympy.stats.WignerSemicircle"]], "wishart() (in module sympy.stats)": [[236, "sympy.stats.Wishart"]], "yulesimon() (in module sympy.stats)": [[236, "sympy.stats.YuleSimon"]], "zeta() (in module sympy.stats)": [[236, "sympy.stats.Zeta"]], "absorbing_probabilities() (sympy.stats.discretemarkovchain method)": [[236, "sympy.stats.DiscreteMarkovChain.absorbing_probabilities"]], "canonical_form() (sympy.stats.discretemarkovchain method)": [[236, "sympy.stats.DiscreteMarkovChain.canonical_form"]], "cmoment() (in module sympy.stats)": [[236, "sympy.stats.cmoment"]], "communication_classes() (sympy.stats.discretemarkovchain method)": [[236, "sympy.stats.DiscreteMarkovChain.communication_classes"]], "correlation() (in module sympy.stats)": [[236, "sympy.stats.correlation"]], "coskewness() (in module sympy.stats)": [[236, "sympy.stats.coskewness"]], "covariance() (in module sympy.stats)": [[236, "sympy.stats.covariance"]], "decompose() (sympy.stats.discretemarkovchain method)": [[236, "sympy.stats.DiscreteMarkovChain.decompose"]], "density() (in module sympy.stats)": [[236, "sympy.stats.density"]], "entropy() (in module sympy.stats)": [[236, "sympy.stats.entropy"]], "expectation() (sympy.stats.bernoulliprocess method)": [[236, "sympy.stats.BernoulliProcess.expectation"]], "factorial_moment() (in module sympy.stats)": [[236, "sympy.stats.factorial_moment"]], "fixed_row_vector() (sympy.stats.discretemarkovchain method)": [[236, "sympy.stats.DiscreteMarkovChain.fixed_row_vector"]], "fundamental_matrix() (sympy.stats.discretemarkovchain method)": [[236, "sympy.stats.DiscreteMarkovChain.fundamental_matrix"]], "given() (in module sympy.stats)": [[236, "sympy.stats.given"]], "kurtosis() (in module sympy.stats)": [[236, "sympy.stats.kurtosis"]], "limiting_distribution (sympy.stats.discretemarkovchain property)": [[236, "sympy.stats.DiscreteMarkovChain.limiting_distribution"]], "marginal_distribution() (in module sympy.stats)": [[236, "sympy.stats.marginal_distribution"]], "median() (in module sympy.stats)": [[236, "sympy.stats.median"]], "moment() (in module sympy.stats)": [[236, "sympy.stats.moment"]], "probability() (sympy.stats.bernoulliprocess method)": [[236, "sympy.stats.BernoulliProcess.probability"]], "pspace() (in module sympy.stats.rv)": [[236, "sympy.stats.rv.pspace"]], "quantile() (in module sympy.stats)": [[236, "sympy.stats.quantile"]], "random_symbols() (in module sympy.stats.rv)": [[236, "sympy.stats.rv.random_symbols"]], "rs_swap() (in module sympy.stats.rv)": [[236, "sympy.stats.rv.rs_swap"]], "sample() (in module sympy.stats)": [[236, "sympy.stats.sample"]], "sample() (sympy.stats.discretemarkovchain method)": [[236, "sympy.stats.DiscreteMarkovChain.sample"]], "sample_iter() (in module sympy.stats)": [[236, "sympy.stats.sample_iter"]], "sampling_e() (in module sympy.stats.rv)": [[236, "sympy.stats.rv.sampling_E"]], "sampling_p() (in module sympy.stats.rv)": [[236, "sympy.stats.rv.sampling_P"]], "sampling_density() (in module sympy.stats.rv)": [[236, "sympy.stats.rv.sampling_density"]], "skewness() (in module sympy.stats)": [[236, "sympy.stats.skewness"]], "stationary_distribution() (sympy.stats.discretemarkovchain method)": [[236, "sympy.stats.DiscreteMarkovChain.stationary_distribution"]], "std() (in module sympy.stats)": [[236, "sympy.stats.std"]], "sympy.stats": [[236, "module-sympy.stats"]], "sympy.stats.die() (in module sympy.stats.crv_types)": [[236, "sympy.stats.crv_types.sympy.stats.Die"]], "sympy.stats.normal() (in module sympy.stats.crv_types)": [[236, "sympy.stats.crv_types.sympy.stats.Normal"]], "sympy.stats.crv": [[236, "module-sympy.stats.crv"]], "sympy.stats.crv_types": [[236, "module-sympy.stats.crv_types"]], "sympy.stats.frv": [[236, "module-sympy.stats.frv"]], "sympy.stats.frv_types": [[236, "module-sympy.stats.frv_types"]], "sympy.stats.rv": [[236, "module-sympy.stats.rv"]], "transition_probabilities (sympy.stats.discretemarkovchain property)": [[236, "sympy.stats.DiscreteMarkovChain.transition_probabilities"]], "variance() (in module sympy.stats)": [[236, "sympy.stats.variance"]], "where() (in module sympy.stats)": [[236, "sympy.stats.where"]], "immutabledensendimarray (class in sympy.tensor.array)": [[237, "sympy.tensor.array.ImmutableDenseNDimArray"]], "immutablesparsendimarray (class in sympy.tensor.array)": [[237, "sympy.tensor.array.ImmutableSparseNDimArray"]], "mutabledensendimarray (class in sympy.tensor.array)": [[237, "sympy.tensor.array.MutableDenseNDimArray"]], "mutablesparsendimarray (class in sympy.tensor.array)": [[237, "sympy.tensor.array.MutableSparseNDimArray"]], "derive_by_array() (in module sympy.tensor.array)": [[237, "sympy.tensor.array.derive_by_array"]], "permutedims() (in module sympy.tensor.array)": [[237, "sympy.tensor.array.permutedims"]], "sympy.tensor.array": [[237, "module-sympy.tensor.array"]], "tensorcontraction() (in module sympy.tensor.array)": [[237, "sympy.tensor.array.tensorcontraction"]], "tensordiagonal() (in module sympy.tensor.array)": [[237, "sympy.tensor.array.tensordiagonal"]], "tensorproduct() (in module sympy.tensor.array)": [[237, "sympy.tensor.array.tensorproduct"]], "arraycontraction (class in sympy.tensor.array.expressions)": [[238, "sympy.tensor.array.expressions.ArrayContraction"]], "arraydiagonal (class in sympy.tensor.array.expressions)": [[238, "sympy.tensor.array.expressions.ArrayDiagonal"]], "arraytensorproduct (class in sympy.tensor.array.expressions)": [[238, "sympy.tensor.array.expressions.ArrayTensorProduct"]], "permutedims (class in sympy.tensor.array.expressions)": [[238, "sympy.tensor.array.expressions.PermuteDims"]], "sympy.tensor.array.expressions": [[238, "module-sympy.tensor.array.expressions"]], "sympy.tensor": [[239, "module-sympy.tensor"]], "get_contraction_structure() (in module sympy.tensor.index_methods)": [[240, "sympy.tensor.index_methods.get_contraction_structure"]], "get_indices() (in module sympy.tensor.index_methods)": [[240, "sympy.tensor.index_methods.get_indices"]], "sympy.tensor.index_methods": [[240, "module-sympy.tensor.index_methods"]], "idx (class in sympy.tensor.indexed)": [[241, "sympy.tensor.indexed.Idx"]], "indexed (class in sympy.tensor.indexed)": [[241, "sympy.tensor.indexed.Indexed"]], "indexedbase (class in sympy.tensor.indexed)": [[241, "sympy.tensor.indexed.IndexedBase"]], "base (sympy.tensor.indexed.indexed property)": [[241, "sympy.tensor.indexed.Indexed.base"]], "indices (sympy.tensor.indexed.indexed property)": [[241, "sympy.tensor.indexed.Indexed.indices"]], "label (sympy.tensor.indexed.idx property)": [[241, "sympy.tensor.indexed.Idx.label"]], "label (sympy.tensor.indexed.indexedbase property)": [[241, "sympy.tensor.indexed.IndexedBase.label"]], "lower (sympy.tensor.indexed.idx property)": [[241, "sympy.tensor.indexed.Idx.lower"]], "offset (sympy.tensor.indexed.indexedbase property)": [[241, "sympy.tensor.indexed.IndexedBase.offset"]], "ranges (sympy.tensor.indexed.indexed property)": [[241, "sympy.tensor.indexed.Indexed.ranges"]], "rank (sympy.tensor.indexed.indexed property)": [[241, "sympy.tensor.indexed.Indexed.rank"]], "shape (sympy.tensor.indexed.indexed property)": [[241, "sympy.tensor.indexed.Indexed.shape"]], "shape (sympy.tensor.indexed.indexedbase property)": [[241, "sympy.tensor.indexed.IndexedBase.shape"]], "strides (sympy.tensor.indexed.indexedbase property)": [[241, "sympy.tensor.indexed.IndexedBase.strides"]], "sympy.tensor.indexed": [[241, "module-sympy.tensor.indexed"]], "upper (sympy.tensor.indexed.idx property)": [[241, "sympy.tensor.indexed.Idx.upper"]], "tensadd (class in sympy.tensor.tensor)": [[242, "sympy.tensor.tensor.TensAdd"]], "tensexpr (class in sympy.tensor.tensor)": [[242, "sympy.tensor.tensor.TensExpr"]], "tensmul (class in sympy.tensor.tensor)": [[242, "sympy.tensor.tensor.TensMul"]], "tensorhead (class in sympy.tensor.tensor)": [[242, "sympy.tensor.tensor.TensorHead"]], "tensorindex (class in sympy.tensor.tensor)": [[242, "sympy.tensor.tensor.TensorIndex"]], "tensorindextype (class in sympy.tensor.tensor)": [[242, "sympy.tensor.tensor.TensorIndexType"]], "tensorsymmetry (class in sympy.tensor.tensor)": [[242, "sympy.tensor.tensor.TensorSymmetry"]], "tensortype (class in sympy.tensor.tensor)": [[242, "sympy.tensor.tensor.TensorType"]], "_tensormanager (class in sympy.tensor.tensor)": [[242, "sympy.tensor.tensor._TensorManager"]], "canon_bp() (in module sympy.tensor.tensor)": [[242, "sympy.tensor.tensor.canon_bp"]], "canon_bp() (sympy.tensor.tensor.tensadd method)": [[242, "sympy.tensor.tensor.TensAdd.canon_bp"]], "canon_bp() (sympy.tensor.tensor.tensmul method)": [[242, "sympy.tensor.tensor.TensMul.canon_bp"]], "clear() (sympy.tensor.tensor._tensormanager method)": [[242, "sympy.tensor.tensor._TensorManager.clear"]], "comm_i2symbol() (sympy.tensor.tensor._tensormanager method)": [[242, "sympy.tensor.tensor._TensorManager.comm_i2symbol"]], "comm_symbols2i() (sympy.tensor.tensor._tensormanager method)": [[242, "sympy.tensor.tensor._TensorManager.comm_symbols2i"]], "commutes_with() (sympy.tensor.tensor.tensorhead method)": [[242, "sympy.tensor.tensor.TensorHead.commutes_with"]], "contract_metric() (sympy.tensor.tensor.tensadd method)": [[242, "sympy.tensor.tensor.TensAdd.contract_metric"]], "contract_metric() (sympy.tensor.tensor.tensmul method)": [[242, "sympy.tensor.tensor.TensMul.contract_metric"]], "direct_product() (sympy.tensor.tensor.tensorsymmetry class method)": [[242, "sympy.tensor.tensor.TensorSymmetry.direct_product"]], "fully_symmetric() (sympy.tensor.tensor.tensorsymmetry class method)": [[242, "sympy.tensor.tensor.TensorSymmetry.fully_symmetric"]], "get_comm() (sympy.tensor.tensor._tensormanager method)": [[242, "sympy.tensor.tensor._TensorManager.get_comm"]], "get_free_indices() (sympy.tensor.tensor.tensmul method)": [[242, "sympy.tensor.tensor.TensMul.get_free_indices"]], "get_indices() (sympy.tensor.tensor.tensmul method)": [[242, "sympy.tensor.tensor.TensMul.get_indices"]], "get_matrix() (sympy.tensor.tensor.tensexpr method)": [[242, "sympy.tensor.tensor.TensExpr.get_matrix"]], "no_symmetry() (sympy.tensor.tensor.tensorsymmetry class method)": [[242, "sympy.tensor.tensor.TensorSymmetry.no_symmetry"]], "perm2tensor() (sympy.tensor.tensor.tensmul method)": [[242, "sympy.tensor.tensor.TensMul.perm2tensor"]], "replace_with_arrays() (sympy.tensor.tensor.tensexpr method)": [[242, "sympy.tensor.tensor.TensExpr.replace_with_arrays"]], "riemann() (sympy.tensor.tensor.tensorsymmetry class method)": [[242, "sympy.tensor.tensor.TensorSymmetry.riemann"]], "riemann_cyclic() (in module sympy.tensor.tensor)": [[242, "sympy.tensor.tensor.riemann_cyclic"]], "riemann_cyclic_replace() (in module sympy.tensor.tensor)": [[242, "sympy.tensor.tensor.riemann_cyclic_replace"]], "set_comm() (sympy.tensor.tensor._tensormanager method)": [[242, "sympy.tensor.tensor._TensorManager.set_comm"]], "set_comms() (sympy.tensor.tensor._tensormanager method)": [[242, "sympy.tensor.tensor._TensorManager.set_comms"]], "sorted_components() (sympy.tensor.tensor.tensmul method)": [[242, "sympy.tensor.tensor.TensMul.sorted_components"]], "split() (sympy.tensor.tensor.tensmul method)": [[242, "sympy.tensor.tensor.TensMul.split"]], "sympy.tensor.tensor": [[242, "module-sympy.tensor.tensor"]], "tensor_heads() (in module sympy.tensor.tensor)": [[242, "sympy.tensor.tensor.tensor_heads"]], "tensorsymmetry() (in module sympy.tensor.tensor)": [[242, "sympy.tensor.tensor.tensorsymmetry"]], "partialderivative (class in sympy.tensor.toperators)": [[243, "sympy.tensor.toperators.PartialDerivative"]], "sympy.tensor.toperators": [[243, "module-sympy.tensor.toperators"]], "sympy.testing": [[244, "module-sympy.testing"]], "skip() (in module sympy.testing.pytest)": [[245, "sympy.testing.pytest.SKIP"]], "nocache_fail() (in module sympy.testing.pytest)": [[245, "sympy.testing.pytest.nocache_fail"]], "raises() (in module sympy.testing.pytest)": [[245, "sympy.testing.pytest.raises"]], "skip_under_pyodide() (in module sympy.testing.pytest)": [[245, "sympy.testing.pytest.skip_under_pyodide"]], "sympy.testing.pytest": [[245, "module-sympy.testing.pytest"]], "warns() (in module sympy.testing.pytest)": [[245, "sympy.testing.pytest.warns"]], "warns_deprecated_sympy() (in module sympy.testing.pytest)": [[245, "sympy.testing.pytest.warns_deprecated_sympy"]], "sympy.testing.randtest": [[246, "module-sympy.testing.randtest"]], "pytestreporter (class in sympy.testing.runtests)": [[247, "sympy.testing.runtests.PyTestReporter"]], "reporter (class in sympy.testing.runtests)": [[247, "sympy.testing.runtests.Reporter"]], "sympydoctestfinder (class in sympy.testing.runtests)": [[247, "sympy.testing.runtests.SymPyDocTestFinder"]], "sympydoctestrunner (class in sympy.testing.runtests)": [[247, "sympy.testing.runtests.SymPyDocTestRunner"]], "sympyoutputchecker (class in sympy.testing.runtests)": [[247, "sympy.testing.runtests.SymPyOutputChecker"]], "sympytestresults (class in sympy.testing.runtests)": [[247, "sympy.testing.runtests.SymPyTestResults"]], "attempted (sympy.testing.runtests.sympytestresults attribute)": [[247, "sympy.testing.runtests.SymPyTestResults.attempted"]], "check_output() (sympy.testing.runtests.sympyoutputchecker method)": [[247, "sympy.testing.runtests.SymPyOutputChecker.check_output"]], "convert_to_native_paths() (in module sympy.testing.runtests)": [[247, "sympy.testing.runtests.convert_to_native_paths"]], "doctest() (in module sympy.testing.runtests)": [[247, "sympy.testing.runtests.doctest"]], "failed (sympy.testing.runtests.sympytestresults attribute)": [[247, "sympy.testing.runtests.SymPyTestResults.failed"]], "get_sympy_dir() (in module sympy.testing.runtests)": [[247, "sympy.testing.runtests.get_sympy_dir"]], "raise_on_deprecated() (in module sympy.testing.runtests)": [[247, "sympy.testing.runtests.raise_on_deprecated"]], "run() (sympy.testing.runtests.sympydoctestrunner method)": [[247, "sympy.testing.runtests.SymPyDocTestRunner.run"]], "run_all_tests() (in module sympy.testing.runtests)": [[247, "sympy.testing.runtests.run_all_tests"]], "run_in_subprocess_with_hash_randomization() (in module sympy.testing.runtests)": [[247, "sympy.testing.runtests.run_in_subprocess_with_hash_randomization"]], "split_list() (in module sympy.testing.runtests)": [[247, "sympy.testing.runtests.split_list"]], "sympy.testing.runtests": [[247, "module-sympy.testing.runtests"]], "sympytestfile() (in module sympy.testing.runtests)": [[247, "sympy.testing.runtests.sympytestfile"]], "test() (in module sympy.testing.runtests)": [[247, "sympy.testing.runtests.test"]], "write() (sympy.testing.runtests.pytestreporter method)": [[247, "sympy.testing.runtests.PyTestReporter.write"]], "codewrapper (class in sympy.utilities.autowrap)": [[248, "sympy.utilities.autowrap.CodeWrapper"]], "cythoncodewrapper (class in sympy.utilities.autowrap)": [[248, "sympy.utilities.autowrap.CythonCodeWrapper"]], "dummywrapper (class in sympy.utilities.autowrap)": [[248, "sympy.utilities.autowrap.DummyWrapper"]], "f2pycodewrapper (class in sympy.utilities.autowrap)": [[248, "sympy.utilities.autowrap.F2PyCodeWrapper"]], "ufuncifycodewrapper (class in sympy.utilities.autowrap)": [[248, "sympy.utilities.autowrap.UfuncifyCodeWrapper"]], "autowrap() (in module sympy.utilities.autowrap)": [[248, "sympy.utilities.autowrap.autowrap"]], "binary_function() (in module sympy.utilities.autowrap)": [[248, "sympy.utilities.autowrap.binary_function"]], "dump_c() (sympy.utilities.autowrap.ufuncifycodewrapper method)": [[248, "sympy.utilities.autowrap.UfuncifyCodeWrapper.dump_c"]], "dump_pyx() (sympy.utilities.autowrap.cythoncodewrapper method)": [[248, "sympy.utilities.autowrap.CythonCodeWrapper.dump_pyx"]], "sympy.utilities.autowrap": [[248, "module-sympy.utilities.autowrap"]], "ufuncify() (in module sympy.utilities.autowrap)": [[248, "sympy.utilities.autowrap.ufuncify"]], "argument (class in sympy.utilities.codegen)": [[249, "sympy.utilities.codegen.Argument"]], "ccodegen (class in sympy.utilities.codegen)": [[249, "sympy.utilities.codegen.CCodeGen"]], "codegen (class in sympy.utilities.codegen)": [[249, "sympy.utilities.codegen.CodeGen"]], "datatype (class in sympy.utilities.codegen)": [[249, "sympy.utilities.codegen.DataType"]], "fcodegen (class in sympy.utilities.codegen)": [[249, "sympy.utilities.codegen.FCodeGen"]], "juliacodegen (class in sympy.utilities.codegen)": [[249, "sympy.utilities.codegen.JuliaCodeGen"]], "octavecodegen (class in sympy.utilities.codegen)": [[249, "sympy.utilities.codegen.OctaveCodeGen"]], "outputargument (class in sympy.utilities.codegen)": [[249, "sympy.utilities.codegen.OutputArgument"]], "result (class in sympy.utilities.codegen)": [[249, "sympy.utilities.codegen.Result"]], "routine (class in sympy.utilities.codegen)": [[249, "sympy.utilities.codegen.Routine"]], "rustcodegen (class in sympy.utilities.codegen)": [[249, "sympy.utilities.codegen.RustCodeGen"]], "codegen() (in module sympy.utilities.codegen)": [[249, "sympy.utilities.codegen.codegen"]], "dump_c() (sympy.utilities.codegen.ccodegen method)": [[249, "sympy.utilities.codegen.CCodeGen.dump_c"]], "dump_code() (sympy.utilities.codegen.codegen method)": [[249, "sympy.utilities.codegen.CodeGen.dump_code"]], "dump_f95() (sympy.utilities.codegen.fcodegen method)": [[249, "sympy.utilities.codegen.FCodeGen.dump_f95"]], "dump_h() (sympy.utilities.codegen.ccodegen method)": [[249, "sympy.utilities.codegen.CCodeGen.dump_h"]], "dump_h() (sympy.utilities.codegen.fcodegen method)": [[249, "sympy.utilities.codegen.FCodeGen.dump_h"]], "dump_jl() (sympy.utilities.codegen.juliacodegen method)": [[249, "sympy.utilities.codegen.JuliaCodeGen.dump_jl"]], "dump_m() (sympy.utilities.codegen.octavecodegen method)": [[249, "sympy.utilities.codegen.OctaveCodeGen.dump_m"]], "dump_rs() (sympy.utilities.codegen.rustcodegen method)": [[249, "sympy.utilities.codegen.RustCodeGen.dump_rs"]], "get_default_datatype() (in module sympy.utilities.codegen)": [[249, "sympy.utilities.codegen.get_default_datatype"]], "get_interface() (sympy.utilities.codegen.fcodegen method)": [[249, "sympy.utilities.codegen.FCodeGen.get_interface"]], "get_prototype() (sympy.utilities.codegen.ccodegen method)": [[249, "sympy.utilities.codegen.CCodeGen.get_prototype"]], "get_prototype() (sympy.utilities.codegen.rustcodegen method)": [[249, "sympy.utilities.codegen.RustCodeGen.get_prototype"]], "make_routine() (in module sympy.utilities.codegen)": [[249, "sympy.utilities.codegen.make_routine"]], "result_variables (sympy.utilities.codegen.routine property)": [[249, "sympy.utilities.codegen.Routine.result_variables"]], "routine() (sympy.utilities.codegen.codegen method)": [[249, "sympy.utilities.codegen.CodeGen.routine"]], "routine() (sympy.utilities.codegen.juliacodegen method)": [[249, "sympy.utilities.codegen.JuliaCodeGen.routine"]], "routine() (sympy.utilities.codegen.octavecodegen method)": [[249, "sympy.utilities.codegen.OctaveCodeGen.routine"]], "routine() (sympy.utilities.codegen.rustcodegen method)": [[249, "sympy.utilities.codegen.RustCodeGen.routine"]], "sympy.utilities.codegen": [[249, "module-sympy.utilities.codegen"]], "variables (sympy.utilities.codegen.routine property)": [[249, "sympy.utilities.codegen.Routine.variables"]], "write() (sympy.utilities.codegen.codegen method)": [[249, "sympy.utilities.codegen.CodeGen.write"]], "conserve_mpmath_dps() (in module sympy.utilities.decorator)": [[250, "sympy.utilities.decorator.conserve_mpmath_dps"]], "deprecated() (in module sympy.utilities.decorator)": [[250, "sympy.utilities.decorator.deprecated"]], "doctest_depends_on() (in module sympy.utilities.decorator)": [[250, "sympy.utilities.decorator.doctest_depends_on"]], "memoize_property() (in module sympy.utilities.decorator)": [[250, "sympy.utilities.decorator.memoize_property"]], "no_attrs_in_subclass (class in sympy.utilities.decorator)": [[250, "sympy.utilities.decorator.no_attrs_in_subclass"]], "public() (in module sympy.utilities.decorator)": [[250, "sympy.utilities.decorator.public"]], "sympy.utilities.decorator": [[250, "module-sympy.utilities.decorator"]], "threaded() (in module sympy.utilities.decorator)": [[250, "sympy.utilities.decorator.threaded"]], "threaded_factory() (in module sympy.utilities.decorator)": [[250, "sympy.utilities.decorator.threaded_factory"]], "xthreaded() (in module sympy.utilities.decorator)": [[250, "sympy.utilities.decorator.xthreaded"]], "multisetpartitiontraverser (class in sympy.utilities.enumerative)": [[251, "sympy.utilities.enumerative.MultisetPartitionTraverser"]], "count_partitions() (sympy.utilities.enumerative.multisetpartitiontraverser method)": [[251, "sympy.utilities.enumerative.MultisetPartitionTraverser.count_partitions"]], "enum_all() (sympy.utilities.enumerative.multisetpartitiontraverser method)": [[251, "sympy.utilities.enumerative.MultisetPartitionTraverser.enum_all"]], "enum_large() (sympy.utilities.enumerative.multisetpartitiontraverser method)": [[251, "sympy.utilities.enumerative.MultisetPartitionTraverser.enum_large"]], "enum_range() (sympy.utilities.enumerative.multisetpartitiontraverser method)": [[251, "sympy.utilities.enumerative.MultisetPartitionTraverser.enum_range"]], "enum_small() (sympy.utilities.enumerative.multisetpartitiontraverser method)": [[251, "sympy.utilities.enumerative.MultisetPartitionTraverser.enum_small"]], "factoring_visitor() (in module sympy.utilities.enumerative)": [[251, "sympy.utilities.enumerative.factoring_visitor"]], "list_visitor() (in module sympy.utilities.enumerative)": [[251, "sympy.utilities.enumerative.list_visitor"]], "multiset_partitions_taocp() (in module sympy.utilities.enumerative)": [[251, "sympy.utilities.enumerative.multiset_partitions_taocp"]], "sympy.utilities.enumerative": [[251, "module-sympy.utilities.enumerative"]], "sympydeprecationwarning": [[252, "sympy.utilities.exceptions.SymPyDeprecationWarning"]], "ignore_warnings() (in module sympy.utilities.exceptions)": [[252, "sympy.utilities.exceptions.ignore_warnings"]], "sympy.utilities.exceptions": [[252, "module-sympy.utilities.exceptions"]], "sympy_deprecation_warning() (in module sympy.utilities.exceptions)": [[252, "sympy.utilities.exceptions.sympy_deprecation_warning"]], "sympy.utilities": [[253, "module-sympy.utilities"]], "notiterable (class in sympy.utilities.iterables)": [[254, "sympy.utilities.iterables.NotIterable"]], "binary_partitions() (in module sympy.utilities.iterables)": [[254, "sympy.utilities.iterables.binary_partitions"]], "bracelets() (in module sympy.utilities.iterables)": [[254, "sympy.utilities.iterables.bracelets"]], "capture() (in module sympy.utilities.iterables)": [[254, "sympy.utilities.iterables.capture"]], "common_prefix() (in module sympy.utilities.iterables)": [[254, "sympy.utilities.iterables.common_prefix"]], "common_suffix() (in module sympy.utilities.iterables)": [[254, "sympy.utilities.iterables.common_suffix"]], "connected_components() (in module sympy.utilities.iterables)": [[254, "sympy.utilities.iterables.connected_components"]], "dict_merge() (in module sympy.utilities.iterables)": [[254, "sympy.utilities.iterables.dict_merge"]], "filter_symbols() (in module sympy.utilities.iterables)": [[254, "sympy.utilities.iterables.filter_symbols"]], "flatten() (in module sympy.utilities.iterables)": [[254, "sympy.utilities.iterables.flatten"]], "generate_bell() (in module sympy.utilities.iterables)": [[254, "sympy.utilities.iterables.generate_bell"]], "generate_derangements() (in module sympy.utilities.iterables)": [[254, "sympy.utilities.iterables.generate_derangements"]], "generate_involutions() (in module sympy.utilities.iterables)": [[254, "sympy.utilities.iterables.generate_involutions"]], "generate_oriented_forest() (in module sympy.utilities.iterables)": [[254, "sympy.utilities.iterables.generate_oriented_forest"]], "group() (in module sympy.utilities.iterables)": [[254, "sympy.utilities.iterables.group"]], "has_dups() (in module sympy.utilities.iterables)": [[254, "sympy.utilities.iterables.has_dups"]], "has_variety() (in module sympy.utilities.iterables)": [[254, "sympy.utilities.iterables.has_variety"]], "ibin() (in module sympy.utilities.iterables)": [[254, "sympy.utilities.iterables.ibin"]], "iproduct() (in module sympy.utilities.iterables)": [[254, "sympy.utilities.iterables.iproduct"]], "is_palindromic() (in module sympy.utilities.iterables)": [[254, "sympy.utilities.iterables.is_palindromic"]], "is_sequence() (in module sympy.utilities.iterables)": [[254, "sympy.utilities.iterables.is_sequence"]], "iterable() (in module sympy.utilities.iterables)": [[254, "sympy.utilities.iterables.iterable"]], "kbins() (in module sympy.utilities.iterables)": [[254, "sympy.utilities.iterables.kbins"]], "least_rotation() (in module sympy.utilities.iterables)": [[254, "sympy.utilities.iterables.least_rotation"]], "minlex() (in module sympy.utilities.iterables)": [[254, "sympy.utilities.iterables.minlex"]], "multiset() (in module sympy.utilities.iterables)": [[254, "sympy.utilities.iterables.multiset"]], "multiset_combinations() (in module sympy.utilities.iterables)": [[254, "sympy.utilities.iterables.multiset_combinations"]], "multiset_derangements() (in module sympy.utilities.iterables)": [[254, "sympy.utilities.iterables.multiset_derangements"]], "multiset_partitions() (in module sympy.utilities.iterables)": [[254, "sympy.utilities.iterables.multiset_partitions"]], "multiset_permutations() (in module sympy.utilities.iterables)": [[254, "sympy.utilities.iterables.multiset_permutations"]], "necklaces() (in module sympy.utilities.iterables)": [[254, "sympy.utilities.iterables.necklaces"]], "numbered_symbols() (in module sympy.utilities.iterables)": [[254, "sympy.utilities.iterables.numbered_symbols"]], "ordered_partitions() (in module sympy.utilities.iterables)": [[254, "sympy.utilities.iterables.ordered_partitions"]], "partitions() (in module sympy.utilities.iterables)": [[254, "sympy.utilities.iterables.partitions"]], "permute_signs() (in module sympy.utilities.iterables)": [[254, "sympy.utilities.iterables.permute_signs"]], "postfixes() (in module sympy.utilities.iterables)": [[254, "sympy.utilities.iterables.postfixes"]], "prefixes() (in module sympy.utilities.iterables)": [[254, "sympy.utilities.iterables.prefixes"]], "random_derangement() (in module sympy.utilities.iterables)": [[254, "sympy.utilities.iterables.random_derangement"]], "reshape() (in module sympy.utilities.iterables)": [[254, "sympy.utilities.iterables.reshape"]], "rotate_left() (in module sympy.utilities.iterables)": [[254, "sympy.utilities.iterables.rotate_left"]], "rotate_right() (in module sympy.utilities.iterables)": [[254, "sympy.utilities.iterables.rotate_right"]], "rotations() (in module sympy.utilities.iterables)": [[254, "sympy.utilities.iterables.rotations"]], "roundrobin() (in module sympy.utilities.iterables)": [[254, "sympy.utilities.iterables.roundrobin"]], "runs() (in module sympy.utilities.iterables)": [[254, "sympy.utilities.iterables.runs"]], "sequence_partitions() (in module sympy.utilities.iterables)": [[254, "sympy.utilities.iterables.sequence_partitions"]], "sequence_partitions_empty() (in module sympy.utilities.iterables)": [[254, "sympy.utilities.iterables.sequence_partitions_empty"]], "sift() (in module sympy.utilities.iterables)": [[254, "sympy.utilities.iterables.sift"]], "signed_permutations() (in module sympy.utilities.iterables)": [[254, "sympy.utilities.iterables.signed_permutations"]], "strongly_connected_components() (in module sympy.utilities.iterables)": [[254, "sympy.utilities.iterables.strongly_connected_components"]], "subsets() (in module sympy.utilities.iterables)": [[254, "sympy.utilities.iterables.subsets"]], "sympy.utilities.iterables": [[254, "module-sympy.utilities.iterables"]], "take() (in module sympy.utilities.iterables)": [[254, "sympy.utilities.iterables.take"]], "topological_sort() (in module sympy.utilities.iterables)": [[254, "sympy.utilities.iterables.topological_sort"]], "unflatten() (in module sympy.utilities.iterables)": [[254, "sympy.utilities.iterables.unflatten"]], "uniq() (in module sympy.utilities.iterables)": [[254, "sympy.utilities.iterables.uniq"]], "variations() (in module sympy.utilities.iterables)": [[254, "sympy.utilities.iterables.variations"]], "implemented_function() (in module sympy.utilities.lambdify)": [[255, "sympy.utilities.lambdify.implemented_function"]], "lambdastr() (in module sympy.utilities.lambdify)": [[255, "sympy.utilities.lambdify.lambdastr"]], "lambdify() (in module sympy.utilities.lambdify)": [[255, "sympy.utilities.lambdify.lambdify"]], "sympy.utilities.lambdify": [[255, "module-sympy.utilities.lambdify"]], "assoc_recurrence_memo() (in module sympy.utilities.memoization)": [[256, "sympy.utilities.memoization.assoc_recurrence_memo"]], "recurrence_memo() (in module sympy.utilities.memoization)": [[256, "sympy.utilities.memoization.recurrence_memo"]], "sympy.utilities.memoization": [[256, "module-sympy.utilities.memoization"]], "as_int() (in module sympy.utilities.misc)": [[257, "sympy.utilities.misc.as_int"]], "debug() (in module sympy.utilities.misc)": [[257, "sympy.utilities.misc.debug"]], "debug_decorator() (in module sympy.utilities.misc)": [[257, "sympy.utilities.misc.debug_decorator"]], "debugf() (in module sympy.utilities.misc)": [[257, "sympy.utilities.misc.debugf"]], "filldedent() (in module sympy.utilities.misc)": [[257, "sympy.utilities.misc.filldedent"]], "find_executable() (in module sympy.utilities.misc)": [[257, "sympy.utilities.misc.find_executable"]], "func_name() (in module sympy.utilities.misc)": [[257, "sympy.utilities.misc.func_name"]], "ordinal() (in module sympy.utilities.misc)": [[257, "sympy.utilities.misc.ordinal"]], "rawlines() (in module sympy.utilities.misc)": [[257, "sympy.utilities.misc.rawlines"]], "replace() (in module sympy.utilities.misc)": [[257, "sympy.utilities.misc.replace"]], "strlines() (in module sympy.utilities.misc)": [[257, "sympy.utilities.misc.strlines"]], "sympy.utilities.misc": [[257, "module-sympy.utilities.misc"]], "translate() (in module sympy.utilities.misc)": [[257, "sympy.utilities.misc.translate"]], "get_resource() (in module sympy.utilities.pkgdata)": [[258, "sympy.utilities.pkgdata.get_resource"]], "sympy.utilities.pkgdata": [[258, "module-sympy.utilities.pkgdata"]], "get_class() (in module sympy.utilities.source)": [[259, "sympy.utilities.source.get_class"]], "get_mod_func() (in module sympy.utilities.source)": [[259, "sympy.utilities.source.get_mod_func"]], "sympy.utilities.source": [[259, "module-sympy.utilities.source"]], "sympy.utilities.timeutils": [[260, "module-sympy.utilities.timeutils"]], "timed() (in module sympy.utilities.timeutils)": [[260, "sympy.utilities.timeutils.timed"]], "coordsys3d (class in sympy.vector.coordsysrect)": [[261, "sympy.vector.coordsysrect.CoordSys3D"]], "del (class in sympy.vector.deloperator)": [[261, "sympy.vector.deloperator.Del"]], "dyadic (class in sympy.vector.dyadic)": [[261, "sympy.vector.dyadic.Dyadic"]], "implicitregion (class in sympy.vector.implicitregion)": [[261, "sympy.vector.implicitregion.ImplicitRegion"]], "parametricintegral (class in sympy.vector.integrals)": [[261, "sympy.vector.integrals.ParametricIntegral"]], "parametricregion (class in sympy.vector.parametricregion)": [[261, "sympy.vector.parametricregion.ParametricRegion"]], "vector (class in sympy.vector.vector)": [[261, "sympy.vector.vector.Vector"]], "__init__() (sympy.vector.coordsysrect.coordsys3d method)": [[261, "sympy.vector.coordsysrect.CoordSys3D.__init__"]], "components (sympy.vector.dyadic.dyadic property)": [[261, "sympy.vector.dyadic.Dyadic.components"]], "components (sympy.vector.vector.vector property)": [[261, "sympy.vector.vector.Vector.components"]], "create_new() (sympy.vector.coordsysrect.coordsys3d method)": [[261, "sympy.vector.coordsysrect.CoordSys3D.create_new"]], "cross() (sympy.vector.deloperator.del method)": [[261, "sympy.vector.deloperator.Del.cross"]], "cross() (sympy.vector.dyadic.dyadic method)": [[261, "sympy.vector.dyadic.Dyadic.cross"]], "cross() (sympy.vector.vector.vector method)": [[261, "sympy.vector.vector.Vector.cross"]], "dot() (sympy.vector.deloperator.del method)": [[261, "sympy.vector.deloperator.Del.dot"]], "dot() (sympy.vector.dyadic.dyadic method)": [[261, "sympy.vector.dyadic.Dyadic.dot"]], "dot() (sympy.vector.vector.vector method)": [[261, "sympy.vector.vector.Vector.dot"]], "gradient() (sympy.vector.deloperator.del method)": [[261, "sympy.vector.deloperator.Del.gradient"]], "locate_new() (sympy.vector.coordsysrect.coordsys3d method)": [[261, "sympy.vector.coordsysrect.CoordSys3D.locate_new"]], "magnitude() (sympy.vector.vector.vector method)": [[261, "sympy.vector.vector.Vector.magnitude"]], "multiplicity() (sympy.vector.implicitregion.implicitregion method)": [[261, "sympy.vector.implicitregion.ImplicitRegion.multiplicity"]], "normalize() (sympy.vector.vector.vector method)": [[261, "sympy.vector.vector.Vector.normalize"]], "orient_new() (sympy.vector.coordsysrect.coordsys3d method)": [[261, "sympy.vector.coordsysrect.CoordSys3D.orient_new"]], "orient_new_axis() (sympy.vector.coordsysrect.coordsys3d method)": [[261, "sympy.vector.coordsysrect.CoordSys3D.orient_new_axis"]], "orient_new_body() (sympy.vector.coordsysrect.coordsys3d method)": [[261, "sympy.vector.coordsysrect.CoordSys3D.orient_new_body"]], "orient_new_quaternion() (sympy.vector.coordsysrect.coordsys3d method)": [[261, "sympy.vector.coordsysrect.CoordSys3D.orient_new_quaternion"]], "orient_new_space() (sympy.vector.coordsysrect.coordsys3d method)": [[261, "sympy.vector.coordsysrect.CoordSys3D.orient_new_space"]], "outer() (sympy.vector.vector.vector method)": [[261, "sympy.vector.vector.Vector.outer"]], "position_wrt() (sympy.vector.coordsysrect.coordsys3d method)": [[261, "sympy.vector.coordsysrect.CoordSys3D.position_wrt"]], "projection() (sympy.vector.vector.vector method)": [[261, "sympy.vector.vector.Vector.projection"]], "rational_parametrization() (sympy.vector.implicitregion.implicitregion method)": [[261, "sympy.vector.implicitregion.ImplicitRegion.rational_parametrization"]], "regular_point() (sympy.vector.implicitregion.implicitregion method)": [[261, "sympy.vector.implicitregion.ImplicitRegion.regular_point"]], "rotation_matrix() (sympy.vector.coordsysrect.coordsys3d method)": [[261, "sympy.vector.coordsysrect.CoordSys3D.rotation_matrix"]], "scalar_map() (sympy.vector.coordsysrect.coordsys3d method)": [[261, "sympy.vector.coordsysrect.CoordSys3D.scalar_map"]], "separate() (sympy.vector.vector.vector method)": [[261, "sympy.vector.vector.Vector.separate"]], "singular_points() (sympy.vector.implicitregion.implicitregion method)": [[261, "sympy.vector.implicitregion.ImplicitRegion.singular_points"]], "to_matrix() (sympy.vector.dyadic.dyadic method)": [[261, "sympy.vector.dyadic.Dyadic.to_matrix"]], "to_matrix() (sympy.vector.vector.vector method)": [[261, "sympy.vector.vector.Vector.to_matrix"]], "axisorienter (class in sympy.vector.orienters)": [[263, "sympy.vector.orienters.AxisOrienter"]], "bodyorienter (class in sympy.vector.orienters)": [[263, "sympy.vector.orienters.BodyOrienter"]], "orienter (class in sympy.vector.orienters)": [[263, "sympy.vector.orienters.Orienter"]], "quaternionorienter (class in sympy.vector.orienters)": [[263, "sympy.vector.orienters.QuaternionOrienter"]], "spaceorienter (class in sympy.vector.orienters)": [[263, "sympy.vector.orienters.SpaceOrienter"]], "__init__() (sympy.vector.orienters.axisorienter method)": [[263, "sympy.vector.orienters.AxisOrienter.__init__"]], "__init__() (sympy.vector.orienters.bodyorienter method)": [[263, "sympy.vector.orienters.BodyOrienter.__init__"]], "__init__() (sympy.vector.orienters.quaternionorienter method)": [[263, "sympy.vector.orienters.QuaternionOrienter.__init__"]], "__init__() (sympy.vector.orienters.spaceorienter method)": [[263, "sympy.vector.orienters.SpaceOrienter.__init__"]], "rotation_matrix() (sympy.vector.orienters.axisorienter method)": [[263, "sympy.vector.orienters.AxisOrienter.rotation_matrix"]], "rotation_matrix() (sympy.vector.orienters.orienter method)": [[263, "sympy.vector.orienters.Orienter.rotation_matrix"]], "curl() (in module sympy.vector)": [[264, "sympy.vector.curl"]], "divergence() (in module sympy.vector)": [[264, "sympy.vector.divergence"]], "express() (in module sympy.vector)": [[264, "sympy.vector.express"]], "gradient() (in module sympy.vector)": [[264, "sympy.vector.gradient"]], "is_conservative() (in module sympy.vector)": [[264, "sympy.vector.is_conservative"]], "is_solenoidal() (in module sympy.vector)": [[264, "sympy.vector.is_solenoidal"]], "matrix_to_vector() (in module sympy.vector)": [[264, "sympy.vector.matrix_to_vector"]], "scalar_potential() (in module sympy.vector)": [[264, "sympy.vector.scalar_potential"]], "scalar_potential_difference() (in module sympy.vector)": [[264, "sympy.vector.scalar_potential_difference"]], "vector_integrate() (in module sympy.vector.integrals)": [[264, "sympy.vector.integrals.vector_integrate"]], "sympy.vector": [[269, "module-sympy.vector"]], "sympy.physics": [[278, "module-sympy.physics"]]}})
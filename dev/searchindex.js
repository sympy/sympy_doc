Search.setIndex({"docnames": ["citing", "contributing/debug", "contributing/dependencies", "contributing/deprecations", "contributing/docstring", "contributing/documentation-style-guide", "contributing/index", "contributing/introduction-to-contributing", "contributing/new-contributors-guide/build-docs", "contributing/new-contributors-guide/dev-setup", "contributing/new-contributors-guide/index", "contributing/new-contributors-guide/workflow-process", "contributing/new-contributors-guide/writing-tests", "explanation/active-deprecations", "explanation/glossary", "explanation/gotchas", "explanation/index", "explanation/solve_output", "explanation/special_topics/classification", "explanation/special_topics/finite_diff_derivatives", "explanation/special_topics/index", "guides/assumptions", "guides/booleans", "guides/custom-functions", "guides/index", "guides/solving/find-roots-polynomial", "guides/solving/index", "guides/solving/reduce-inequalities-algebraically", "guides/solving/solve-diophantine-equation", "guides/solving/solve-equation-algebraically", "guides/solving/solve-matrix-equation", "guides/solving/solve-numerically", "guides/solving/solve-ode", "guides/solving/solve-system-of-equations-algebraically", "guides/solving/solving-guidance", "index", "install", "modules/abc", "modules/algebras", "modules/assumptions/ask", "modules/assumptions/assume", "modules/assumptions/index", "modules/assumptions/predicates", "modules/assumptions/refine", "modules/calculus/index", "modules/categories", "modules/codegen", "modules/combinatorics/fp_groups", "modules/combinatorics/galois", "modules/combinatorics/graycode", "modules/combinatorics/group_constructs", "modules/combinatorics/group_numbers", "modules/combinatorics/index", "modules/combinatorics/named_groups", "modules/combinatorics/partitions", "modules/combinatorics/pc_groups", "modules/combinatorics/perm_groups", "modules/combinatorics/permutations", "modules/combinatorics/polyhedron", "modules/combinatorics/prufer", "modules/combinatorics/subsets", "modules/combinatorics/tensor_can", "modules/combinatorics/testutil", "modules/combinatorics/util", "modules/concrete", "modules/core", "modules/crypto", "modules/diffgeom", "modules/discrete", "modules/evalf", "modules/functions/combinatorial", "modules/functions/elementary", "modules/functions/index", "modules/functions/special", "modules/geometry/curves", "modules/geometry/ellipses", "modules/geometry/entities", "modules/geometry/index", "modules/geometry/lines", "modules/geometry/plane", "modules/geometry/points", "modules/geometry/polygons", "modules/geometry/utils", "modules/holonomic/about", "modules/holonomic/convert", "modules/holonomic/index", "modules/holonomic/internal", "modules/holonomic/operations", "modules/holonomic/represent", "modules/holonomic/uses", "modules/integrals/g-functions", "modules/integrals/index", "modules/integrals/integrals", "modules/interactive", "modules/liealgebras/index", "modules/logic", "modules/matrices/common", "modules/matrices/dense", "modules/matrices/expressions", "modules/matrices/immutablematrices", "modules/matrices/index", "modules/matrices/matrices", "modules/matrices/normalforms", "modules/matrices/sparse", "modules/matrices/sparsetools", "modules/ntheory", "modules/numeric-computation", "modules/parsing", "modules/physics/continuum_mechanics/beam", "modules/physics/continuum_mechanics/beam_problems", "modules/physics/continuum_mechanics/index", "modules/physics/continuum_mechanics/truss", "modules/physics/control/control", "modules/physics/control/control_plots", "modules/physics/control/index", "modules/physics/control/lti", "modules/physics/hep/index", "modules/physics/hydrogen", "modules/physics/matrices", "modules/physics/mechanics/advanced", "modules/physics/mechanics/api/body", "modules/physics/mechanics/api/expr_manip", "modules/physics/mechanics/api/index", "modules/physics/mechanics/api/joint", "modules/physics/mechanics/api/kane_lagrange", "modules/physics/mechanics/api/linearize", "modules/physics/mechanics/api/part_bod", "modules/physics/mechanics/api/printing", "modules/physics/mechanics/api/system", "modules/physics/mechanics/autolev_parser", "modules/physics/mechanics/examples", "modules/physics/mechanics/examples/bicycle_example", "modules/physics/mechanics/examples/four_bar_linkage_example", "modules/physics/mechanics/examples/lin_pend_nonmin_example", "modules/physics/mechanics/examples/multi_degree_freedom_holonomic_system", "modules/physics/mechanics/examples/rollingdisc_example", "modules/physics/mechanics/examples/rollingdisc_example_kane", "modules/physics/mechanics/examples/rollingdisc_example_kane_constraints", "modules/physics/mechanics/examples/rollingdisc_example_lagrange", "modules/physics/mechanics/index", "modules/physics/mechanics/joints", "modules/physics/mechanics/kane", "modules/physics/mechanics/lagrange", "modules/physics/mechanics/linearize", "modules/physics/mechanics/masses", "modules/physics/mechanics/reference", "modules/physics/mechanics/sympy_mechanics_for_autolev_users", "modules/physics/mechanics/symsystem", "modules/physics/optics/gaussopt", "modules/physics/optics/index", "modules/physics/optics/medium", "modules/physics/optics/polarization", "modules/physics/optics/utils", "modules/physics/optics/waves", "modules/physics/paulialgebra", "modules/physics/qho_1d", "modules/physics/quantum/anticommutator", "modules/physics/quantum/cartesian", "modules/physics/quantum/cg", "modules/physics/quantum/circuitplot", "modules/physics/quantum/commutator", "modules/physics/quantum/constants", "modules/physics/quantum/dagger", "modules/physics/quantum/gate", "modules/physics/quantum/grover", "modules/physics/quantum/hilbert", "modules/physics/quantum/index", "modules/physics/quantum/innerproduct", "modules/physics/quantum/operator", "modules/physics/quantum/operatorset", "modules/physics/quantum/piab", "modules/physics/quantum/qapply", "modules/physics/quantum/qft", "modules/physics/quantum/qubit", "modules/physics/quantum/represent", "modules/physics/quantum/shor", "modules/physics/quantum/spin", "modules/physics/quantum/state", "modules/physics/quantum/tensorproduct", "modules/physics/secondquant", "modules/physics/sho", "modules/physics/units/dimensions", "modules/physics/units/examples", "modules/physics/units/index", "modules/physics/units/philosophy", "modules/physics/units/prefixes", "modules/physics/units/quantities", "modules/physics/units/unitsystem", "modules/physics/vector/advanced", "modules/physics/vector/api/classes", "modules/physics/vector/api/fieldfunctions", "modules/physics/vector/api/functions", "modules/physics/vector/api/index", "modules/physics/vector/api/kinematics", "modules/physics/vector/api/printing", "modules/physics/vector/fields", "modules/physics/vector/index", "modules/physics/vector/kinematics", "modules/physics/vector/vectors", "modules/physics/wigner", "modules/plotting", "modules/polys/agca", "modules/polys/basics", "modules/polys/domainmatrix", "modules/polys/domainsintro", "modules/polys/domainsref", "modules/polys/index", "modules/polys/internals", "modules/polys/literature", "modules/polys/numberfields", "modules/polys/reference", "modules/polys/ringseries", "modules/polys/solvers", "modules/polys/wester", "modules/printing", "modules/rewriting", "modules/series/formal", "modules/series/fourier", "modules/series/index", "modules/series/limitseq", "modules/series/sequences", "modules/series/series", "modules/sets", "modules/simplify/fu", "modules/simplify/hyperexpand", "modules/simplify/index", "modules/simplify/simplify", "modules/solvers/diophantine", "modules/solvers/index", "modules/solvers/inequalities", "modules/solvers/ode", "modules/solvers/pde", "modules/solvers/solvers", "modules/solvers/solveset", "modules/stats", "modules/tensor/array", "modules/tensor/array_expressions", "modules/tensor/index", "modules/tensor/index_methods", "modules/tensor/indexed", "modules/tensor/tensor", "modules/tensor/toperators", "modules/testing/index", "modules/testing/pytest", "modules/testing/randtest", "modules/testing/runtests", "modules/utilities/autowrap", "modules/utilities/codegen", "modules/utilities/decorator", "modules/utilities/enumerative", "modules/utilities/exceptions", "modules/utilities/index", "modules/utilities/iterables", "modules/utilities/lambdify", "modules/utilities/memoization", "modules/utilities/misc", "modules/utilities/pkgdata", "modules/utilities/source", "modules/utilities/timeutils", "modules/vector/api/classes", "modules/vector/api/index", "modules/vector/api/orienterclasses", "modules/vector/api/vectorfunctions", "modules/vector/basics", "modules/vector/coordsys", "modules/vector/examples", "modules/vector/fields", "modules/vector/index", "modules/vector/intro", "modules/vector/vector_integration", "reference/index", "reference/public/basics/index", "reference/public/codegeneration/index", "reference/public/logic/index", "reference/public/matrices/index", "reference/public/numbertheory/index", "reference/public/physics/index", "reference/public/topics/index", "reference/public/utilities/index", "tutorials/index", "tutorials/intro-tutorial/basic_operations", "tutorials/intro-tutorial/calculus", "tutorials/intro-tutorial/features", "tutorials/intro-tutorial/gotchas", "tutorials/intro-tutorial/index", "tutorials/intro-tutorial/intro", "tutorials/intro-tutorial/manipulation", "tutorials/intro-tutorial/matrices", "tutorials/intro-tutorial/next", "tutorials/intro-tutorial/preliminaries", "tutorials/intro-tutorial/printing", "tutorials/intro-tutorial/simplification", "tutorials/intro-tutorial/solvers"], "filenames": ["citing.md", "contributing/debug.rst", "contributing/dependencies.md", "contributing/deprecations.md", "contributing/docstring.rst", "contributing/documentation-style-guide.rst", "contributing/index.md", "contributing/introduction-to-contributing.md", "contributing/new-contributors-guide/build-docs.rst", "contributing/new-contributors-guide/dev-setup.md", "contributing/new-contributors-guide/index.md", "contributing/new-contributors-guide/workflow-process.md", "contributing/new-contributors-guide/writing-tests.md", "explanation/active-deprecations.md", "explanation/glossary.md", "explanation/gotchas.rst", "explanation/index.rst", "explanation/solve_output.rst", "explanation/special_topics/classification.rst", "explanation/special_topics/finite_diff_derivatives.rst", "explanation/special_topics/index.rst", "guides/assumptions.rst", "guides/booleans.rst", "guides/custom-functions.md", "guides/index.rst", "guides/solving/find-roots-polynomial.md", "guides/solving/index.md", "guides/solving/reduce-inequalities-algebraically.md", "guides/solving/solve-diophantine-equation.md", "guides/solving/solve-equation-algebraically.md", "guides/solving/solve-matrix-equation.md", "guides/solving/solve-numerically.md", "guides/solving/solve-ode.md", "guides/solving/solve-system-of-equations-algebraically.md", "guides/solving/solving-guidance.md", "index.rst", "install.md", "modules/abc.rst", "modules/algebras.rst", "modules/assumptions/ask.rst", "modules/assumptions/assume.rst", "modules/assumptions/index.rst", "modules/assumptions/predicates.rst", "modules/assumptions/refine.rst", "modules/calculus/index.rst", "modules/categories.rst", "modules/codegen.rst", "modules/combinatorics/fp_groups.rst", "modules/combinatorics/galois.rst", "modules/combinatorics/graycode.rst", "modules/combinatorics/group_constructs.rst", "modules/combinatorics/group_numbers.rst", "modules/combinatorics/index.rst", "modules/combinatorics/named_groups.rst", "modules/combinatorics/partitions.rst", "modules/combinatorics/pc_groups.rst", "modules/combinatorics/perm_groups.rst", "modules/combinatorics/permutations.rst", "modules/combinatorics/polyhedron.rst", "modules/combinatorics/prufer.rst", "modules/combinatorics/subsets.rst", "modules/combinatorics/tensor_can.rst", "modules/combinatorics/testutil.rst", "modules/combinatorics/util.rst", "modules/concrete.rst", "modules/core.rst", "modules/crypto.rst", "modules/diffgeom.rst", "modules/discrete.rst", "modules/evalf.rst", "modules/functions/combinatorial.rst", "modules/functions/elementary.rst", "modules/functions/index.rst", "modules/functions/special.rst", "modules/geometry/curves.rst", "modules/geometry/ellipses.rst", "modules/geometry/entities.rst", "modules/geometry/index.rst", "modules/geometry/lines.rst", "modules/geometry/plane.rst", "modules/geometry/points.rst", "modules/geometry/polygons.rst", "modules/geometry/utils.rst", "modules/holonomic/about.rst", "modules/holonomic/convert.rst", "modules/holonomic/index.rst", "modules/holonomic/internal.rst", "modules/holonomic/operations.rst", "modules/holonomic/represent.rst", "modules/holonomic/uses.rst", "modules/integrals/g-functions.rst", "modules/integrals/index.rst", "modules/integrals/integrals.rst", "modules/interactive.rst", "modules/liealgebras/index.rst", "modules/logic.rst", "modules/matrices/common.rst", "modules/matrices/dense.rst", "modules/matrices/expressions.rst", "modules/matrices/immutablematrices.rst", "modules/matrices/index.rst", "modules/matrices/matrices.rst", "modules/matrices/normalforms.rst", "modules/matrices/sparse.rst", "modules/matrices/sparsetools.rst", "modules/ntheory.rst", "modules/numeric-computation.rst", "modules/parsing.rst", "modules/physics/continuum_mechanics/beam.rst", "modules/physics/continuum_mechanics/beam_problems.rst", "modules/physics/continuum_mechanics/index.rst", "modules/physics/continuum_mechanics/truss.rst", "modules/physics/control/control.rst", "modules/physics/control/control_plots.rst", "modules/physics/control/index.rst", "modules/physics/control/lti.rst", "modules/physics/hep/index.rst", "modules/physics/hydrogen.rst", "modules/physics/matrices.rst", "modules/physics/mechanics/advanced.rst", "modules/physics/mechanics/api/body.rst", "modules/physics/mechanics/api/expr_manip.rst", "modules/physics/mechanics/api/index.rst", "modules/physics/mechanics/api/joint.rst", "modules/physics/mechanics/api/kane_lagrange.rst", "modules/physics/mechanics/api/linearize.rst", "modules/physics/mechanics/api/part_bod.rst", "modules/physics/mechanics/api/printing.rst", "modules/physics/mechanics/api/system.rst", "modules/physics/mechanics/autolev_parser.rst", "modules/physics/mechanics/examples.rst", "modules/physics/mechanics/examples/bicycle_example.rst", "modules/physics/mechanics/examples/four_bar_linkage_example.rst", "modules/physics/mechanics/examples/lin_pend_nonmin_example.rst", "modules/physics/mechanics/examples/multi_degree_freedom_holonomic_system.rst", "modules/physics/mechanics/examples/rollingdisc_example.rst", "modules/physics/mechanics/examples/rollingdisc_example_kane.rst", "modules/physics/mechanics/examples/rollingdisc_example_kane_constraints.rst", "modules/physics/mechanics/examples/rollingdisc_example_lagrange.rst", "modules/physics/mechanics/index.rst", "modules/physics/mechanics/joints.rst", "modules/physics/mechanics/kane.rst", "modules/physics/mechanics/lagrange.rst", "modules/physics/mechanics/linearize.rst", "modules/physics/mechanics/masses.rst", "modules/physics/mechanics/reference.rst", "modules/physics/mechanics/sympy_mechanics_for_autolev_users.rst", "modules/physics/mechanics/symsystem.rst", "modules/physics/optics/gaussopt.rst", "modules/physics/optics/index.rst", "modules/physics/optics/medium.rst", "modules/physics/optics/polarization.rst", "modules/physics/optics/utils.rst", "modules/physics/optics/waves.rst", "modules/physics/paulialgebra.rst", "modules/physics/qho_1d.rst", "modules/physics/quantum/anticommutator.rst", "modules/physics/quantum/cartesian.rst", "modules/physics/quantum/cg.rst", "modules/physics/quantum/circuitplot.rst", "modules/physics/quantum/commutator.rst", "modules/physics/quantum/constants.rst", "modules/physics/quantum/dagger.rst", "modules/physics/quantum/gate.rst", "modules/physics/quantum/grover.rst", "modules/physics/quantum/hilbert.rst", "modules/physics/quantum/index.rst", "modules/physics/quantum/innerproduct.rst", "modules/physics/quantum/operator.rst", "modules/physics/quantum/operatorset.rst", "modules/physics/quantum/piab.rst", "modules/physics/quantum/qapply.rst", "modules/physics/quantum/qft.rst", "modules/physics/quantum/qubit.rst", "modules/physics/quantum/represent.rst", "modules/physics/quantum/shor.rst", "modules/physics/quantum/spin.rst", "modules/physics/quantum/state.rst", "modules/physics/quantum/tensorproduct.rst", "modules/physics/secondquant.rst", "modules/physics/sho.rst", "modules/physics/units/dimensions.rst", "modules/physics/units/examples.rst", "modules/physics/units/index.rst", "modules/physics/units/philosophy.rst", "modules/physics/units/prefixes.rst", "modules/physics/units/quantities.rst", "modules/physics/units/unitsystem.rst", "modules/physics/vector/advanced.rst", "modules/physics/vector/api/classes.rst", "modules/physics/vector/api/fieldfunctions.rst", "modules/physics/vector/api/functions.rst", "modules/physics/vector/api/index.rst", "modules/physics/vector/api/kinematics.rst", "modules/physics/vector/api/printing.rst", "modules/physics/vector/fields.rst", "modules/physics/vector/index.rst", "modules/physics/vector/kinematics.rst", "modules/physics/vector/vectors.rst", "modules/physics/wigner.rst", "modules/plotting.rst", "modules/polys/agca.rst", "modules/polys/basics.rst", "modules/polys/domainmatrix.rst", "modules/polys/domainsintro.rst", "modules/polys/domainsref.rst", "modules/polys/index.rst", "modules/polys/internals.rst", "modules/polys/literature.rst", "modules/polys/numberfields.rst", "modules/polys/reference.rst", "modules/polys/ringseries.rst", "modules/polys/solvers.rst", "modules/polys/wester.rst", "modules/printing.rst", "modules/rewriting.rst", "modules/series/formal.rst", "modules/series/fourier.rst", "modules/series/index.rst", "modules/series/limitseq.rst", "modules/series/sequences.rst", "modules/series/series.rst", "modules/sets.rst", "modules/simplify/fu.rst", "modules/simplify/hyperexpand.rst", "modules/simplify/index.rst", "modules/simplify/simplify.rst", "modules/solvers/diophantine.rst", "modules/solvers/index.rst", "modules/solvers/inequalities.rst", "modules/solvers/ode.rst", "modules/solvers/pde.rst", "modules/solvers/solvers.rst", "modules/solvers/solveset.rst", "modules/stats.rst", "modules/tensor/array.rst", "modules/tensor/array_expressions.rst", "modules/tensor/index.rst", "modules/tensor/index_methods.rst", "modules/tensor/indexed.rst", "modules/tensor/tensor.rst", "modules/tensor/toperators.rst", "modules/testing/index.rst", "modules/testing/pytest.rst", "modules/testing/randtest.rst", "modules/testing/runtests.rst", "modules/utilities/autowrap.rst", "modules/utilities/codegen.rst", "modules/utilities/decorator.rst", "modules/utilities/enumerative.rst", "modules/utilities/exceptions.rst", "modules/utilities/index.rst", "modules/utilities/iterables.rst", "modules/utilities/lambdify.rst", "modules/utilities/memoization.rst", "modules/utilities/misc.rst", "modules/utilities/pkgdata.rst", "modules/utilities/source.rst", "modules/utilities/timeutils.rst", "modules/vector/api/classes.rst", "modules/vector/api/index.rst", "modules/vector/api/orienterclasses.rst", "modules/vector/api/vectorfunctions.rst", "modules/vector/basics.rst", "modules/vector/coordsys.rst", "modules/vector/examples.rst", "modules/vector/fields.rst", "modules/vector/index.rst", "modules/vector/intro.rst", "modules/vector/vector_integration.rst", "reference/index.rst", "reference/public/basics/index.rst", "reference/public/codegeneration/index.rst", "reference/public/logic/index.rst", "reference/public/matrices/index.rst", "reference/public/numbertheory/index.rst", "reference/public/physics/index.rst", "reference/public/topics/index.rst", "reference/public/utilities/index.rst", "tutorials/index.rst", "tutorials/intro-tutorial/basic_operations.rst", "tutorials/intro-tutorial/calculus.rst", "tutorials/intro-tutorial/features.rst", "tutorials/intro-tutorial/gotchas.rst", "tutorials/intro-tutorial/index.rst", "tutorials/intro-tutorial/intro.rst", "tutorials/intro-tutorial/manipulation.rst", "tutorials/intro-tutorial/matrices.rst", "tutorials/intro-tutorial/next.rst", "tutorials/intro-tutorial/preliminaries.rst", "tutorials/intro-tutorial/printing.rst", "tutorials/intro-tutorial/simplification.rst", "tutorials/intro-tutorial/solvers.rst"], "titles": ["Citing SymPy", "Debugging", "Dependencies", "Deprecation Policy", "SymPy Docstrings Style Guide", "Docstring Style Guide", "Contributing", "Introduction to Contributing", "Building the Documentation", "Setup Development Environment", "Guide for New Contributors", "Development Workflow Process", "Writing Tests", "List of active deprecations", "Glossary", "Gotchas and Pitfalls", "Explanations", "Solve Output by Type", "Classification of SymPy objects", "Finite Difference Approximations to Derivatives", "SymPy Special Topics", "Assumptions", "Symbolic and fuzzy booleans", "Writing Custom Functions", "How-to Guides", "Find the Roots of a Polynomial Algebraically or Numerically", "Solve Equations", "Reduce One or a System of Inequalities for a Single Variable Algebraically", "Solve a Diophantine Equation Algebraically", "Solve an Equation Algebraically", "Solve a Matrix Equation Algebraically", "Solve One or a System of Equations Numerically", "Solve an Ordinary Differential Equation (ODE) Algebraically", "Solve a System of Equations Algebraically", "Solving Guidance", "Welcome to SymPy\u2019s documentation!", "Installation", "abc", "Algebras", "Ask", "Assume", "Assumptions", "Predicates", "Refine", "Calculus", "Category Theory", "Code Generation", "Finitely Presented Groups", "Galois Groups", "Gray Code", "Group constructors", "Nilpotent, Abelian and Cyclic Numbers", "Combinatorics", "Named Groups", "Partitions", "Polycyclic Groups", "Permutation Groups", "Permutations", "Polyhedron", "Prufer Sequences", "Subsets", "Tensor Canonicalization", "Test Utilities", "Utilities", "Concrete", "Core", "Cryptography", "Differential Geometry", "Discrete", "Numerical Evaluation", "Combinatorial", "Elementary", "Functions", "Special", "Curves", "Ellipses", "Entities", "Geometry", "Lines", "Plane", "Points", "Polygons", "Utils", "About Holonomic Functions", "Converting other representations to holonomic", "Holonomic", "Internal API", "Operations on holonomic functions", "Representation of holonomic functions in SymPy", "Uses and Current limitations", "Computing Integrals using Meijer G-Functions", "Integrals", "Integrals", "Interactive", "Lie Algebra", "Logic", "Common Matrices", "Dense Matrices", "Matrix Expressions", "Immutable Matrices", "Matrices", "Matrices (linear algebra)", "Matrix Normal Forms", "Sparse Matrices", "Sparse Tools", "Number Theory", "Numeric Computation", "Parsing", "Beam (Docstrings)", "Solving Beam Bending Problems using Singularity Functions", "Continuum Mechanics", "Truss (Docstrings)", "Control", "Control System Plots", "Control Module", "Control API", "High energy physics", "Hydrogen Wavefunctions", "Matrices", "Potential Issues/Advanced Topics/Future Features in Physics/Mechanics", "Body (Docstrings)", "Expression Manipulation (Docstrings)", "Mechanics API Reference", "Joints Framework (Docstrings)", "Kane\u2019s Method &amp; Lagrange\u2019s Method (Docstrings)", "Linearization (Docstrings)", "Bodies, Inertias, Loads &amp; Other Functions (Docstrings)", "Printing (Docstrings)", "SymbolicSystem (Docstrings)", "Autolev Parser", "Examples for Physics/Mechanics", "A bicycle", "A four bar linkage", "Nonminimal Coordinates Pendulum", "Multi Degree of Freedom Holonomic System", "A rolling disc", "A rolling disc, with Kane\u2019s method", "A rolling disc, with Kane\u2019s method and constraint forces", "A rolling disc using Lagrange\u2019s Method", "Classical Mechanics", "Joints Framework in Physics/Mechanics", "Kane\u2019s Method in Physics/Mechanics", "Lagrange\u2019s Method in Physics/Mechanics", "Linearization in Physics/Mechanics", "Masses, Inertias, Particles and Rigid Bodies in Physics/Mechanics", "References for Physics/Mechanics", "SymPy Mechanics for Autolev Users", "Symbolic Systems in Physics/Mechanics", "Gaussian Optics", "Optics Module", "Medium", "Polarization", "Utilities", "Waves", "Pauli Algebra", "Quantum Harmonic Oscillator in 1-D", "Anticommutator", "Cartesian Operators and States", "Clebsch-Gordan Coefficients", "Circuit Plot", "Commutator", "Constants", "Dagger", "Gates", "Grover\u2019s Algorithm", "Hilbert Space", "Quantum Mechanics", "Inner Product", "Operator", "Operator/State Helper Functions", "Particle in a Box", "Qapply", "QFT", "Qubit", "Represent", "Shor\u2019s Algorithm", "Spin", "State", "Tensor Product", "Second Quantization", "Quantum Harmonic Oscillator in 3-D", "Dimensions and dimension systems", "More examples", "Unit systems", "Philosophy behind unit systems", "Unit prefixes", "Physical quantities", "Units and unit systems", "Potential Issues/Advanced Topics/Future Features in Physics/Vector Module", "Essential Classes", "Docstrings for basic field functions", "Essential Functions (Docstrings)", "Physics Vector API", "Kinematics (Docstrings)", "Printing (Docstrings)", "Scalar and Vector Field Functionality", "The Physics Vector Module", "Vector: Kinematics", "Vector &amp; ReferenceFrame", "Wigner Symbols", "Plotting", "AGCA - Algebraic Geometry and Commutative Algebra Module", "Basic functionality of the module", "Introducing the domainmatrix of the poly module", "Introducing the Domains of the poly module", "Reference docs for the Poly Domains", "Polynomial Manipulation", "Internals of the Polynomial Manipulation Module", "Literature", "Number Fields", "Polynomials Manipulation Module Reference", "Series Manipulation using Polynomials", "Poly solvers", "Examples from Wester\u2019s Article", "Printing", "Term Rewriting", "Formal Power Series", "Fourier Series", "Series", "Limits of Sequences", "Sequences", "Series Expansions", "Sets", "Hongguang Fu\u2019s Trigonometric Simplification", "Hypergeometric Expansion", "Simplify", "Simplify", "Diophantine", "Solvers", "Inequality Solvers", "ODE", "PDE", "Solvers", "Solveset", "Stats", "N-dim array", "N-dim array expressions", "Tensor", "Methods", "Indexed Objects", "Tensor", "Tensor Operators", "Testing", "pytest", "Randomised Testing", "Run Tests", "Autowrap Module", "Codegen", "Decorator", "Enumerative", "Exceptions and Warnings", "Utilities", "Iterables", "Lambdify", "Memoization", "Miscellaneous", "PKGDATA", "Source Code Inspection", "Timing Utilities", "Essential Classes in sympy.vector (docstrings)", "Vector API", "Orienter classes (docstrings)", "Essential Functions in sympy.vector (docstrings)", "Basic Implementation details", "More about Coordinate Systems", "General examples of usage", "Scalar and Vector Field Functionality", "Vector", "Introduction", "Applications of Vector Integrals", "API Reference", "Basics", "Code Generation", "Logic", "Matrices", "Number Theory", "Physics", "Topics", "Utilities", "Tutorials", "Basic Operations", "Calculus", "SymPy Features", "Gotchas", "Introductory Tutorial", "Introduction", "Advanced Expression Manipulation", "Matrices", "What\u2019s Next", "Preliminaries", "Printing", "Simplification", "Solvers"], "terms": {"To": [0, 1, 2, 3, 4, 5, 8, 9, 11, 12, 13, 14, 15, 19, 22, 23, 27, 28, 29, 31, 32, 33, 34, 36, 37, 40, 41, 44, 45, 46, 47, 55, 56, 57, 61, 64, 65, 66, 67, 69, 70, 71, 72, 73, 78, 88, 90, 92, 94, 95, 96, 98, 101, 105, 107, 108, 109, 113, 115, 116, 118, 120, 123, 124, 142, 143, 144, 146, 156, 160, 173, 182, 184, 195, 198, 200, 202, 204, 205, 207, 209, 210, 211, 213, 214, 221, 222, 224, 227, 230, 231, 232, 233, 234, 235, 238, 239, 243, 245, 246, 249, 250, 252, 253, 259, 261, 263, 264, 266, 268, 269, 280, 281, 283, 284, 286, 287, 290, 291, 292], "public": [0, 4, 11, 12, 46, 65, 66, 87, 204, 205, 207, 208, 212, 227, 230, 234, 248, 259], "us": [0, 1, 3, 4, 8, 9, 10, 11, 12, 14, 15, 17, 18, 20, 21, 22, 23, 26, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 85, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 104, 105, 107, 108, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 146, 147, 148, 151, 152, 154, 156, 158, 159, 160, 163, 165, 167, 168, 169, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 188, 189, 190, 191, 193, 194, 195, 197, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 226, 227, 229, 230, 231, 232, 234, 235, 236, 238, 239, 240, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 259, 262, 263, 265, 266, 268, 269, 271, 276, 277, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292], "meurer": 0, "A": [0, 2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 23, 25, 27, 29, 30, 31, 32, 33, 34, 35, 38, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 87, 88, 90, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 104, 105, 107, 108, 109, 111, 113, 115, 119, 120, 121, 123, 124, 125, 126, 129, 130, 133, 134, 139, 140, 141, 144, 145, 146, 147, 148, 151, 153, 156, 158, 159, 160, 162, 163, 164, 165, 167, 168, 169, 171, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 185, 187, 188, 189, 191, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 245, 246, 247, 248, 249, 250, 252, 253, 259, 261, 263, 264, 265, 266, 268, 269, 276, 282, 284, 286, 287, 291], "smith": [0, 13, 102, 203], "cp": [0, 57, 106, 202], "paprocki": 0, "m": [0, 8, 9, 11, 12, 13, 15, 19, 21, 23, 36, 38, 42, 46, 47, 53, 54, 56, 57, 61, 64, 65, 66, 67, 68, 70, 73, 75, 77, 81, 82, 90, 92, 94, 96, 97, 98, 99, 101, 102, 104, 105, 107, 108, 109, 111, 115, 117, 118, 120, 123, 124, 125, 126, 128, 129, 133, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 150, 155, 162, 176, 177, 180, 182, 184, 195, 199, 201, 202, 203, 205, 207, 208, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 222, 224, 226, 227, 230, 232, 233, 234, 235, 236, 239, 240, 246, 247, 249, 252, 254, 259, 262, 264, 268, 269, 281, 287, 290, 291, 292], "\u010dert\u00edk": 0, "o": [0, 4, 8, 11, 12, 14, 15, 19, 21, 37, 45, 46, 56, 57, 63, 65, 66, 71, 73, 75, 76, 78, 79, 81, 87, 90, 105, 109, 120, 124, 126, 128, 129, 141, 142, 143, 144, 146, 147, 169, 179, 190, 193, 195, 197, 199, 207, 208, 210, 211, 214, 216, 221, 224, 230, 234, 239, 245, 252, 255, 256, 262, 265, 281], "kirpichev": 0, "sb": 0, "rocklin": 0, "kumar": [0, 233], "ivanov": 0, "": [0, 2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 54, 55, 56, 57, 59, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 81, 82, 83, 84, 87, 88, 90, 92, 93, 94, 95, 96, 98, 99, 101, 104, 105, 106, 107, 108, 109, 113, 115, 117, 119, 120, 122, 123, 126, 129, 131, 135, 139, 140, 144, 146, 150, 151, 152, 158, 159, 161, 163, 165, 166, 169, 173, 174, 176, 177, 179, 182, 183, 184, 188, 189, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 214, 215, 216, 217, 220, 221, 222, 224, 225, 226, 227, 229, 230, 231, 234, 240, 245, 246, 247, 248, 249, 250, 252, 253, 255, 259, 261, 265, 266, 268, 271, 276, 277, 279, 280, 281, 283, 284, 285, 286, 287, 291, 292], "moor": [0, 30, 98, 101], "jk": 0, "singh": 0, "rathnayak": 0, "t": [0, 3, 4, 5, 7, 8, 11, 12, 13, 14, 15, 22, 23, 25, 32, 38, 41, 42, 44, 46, 47, 49, 56, 57, 58, 59, 61, 65, 66, 67, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 89, 90, 92, 94, 95, 96, 97, 98, 101, 105, 106, 107, 111, 115, 116, 119, 120, 121, 123, 124, 125, 126, 128, 129, 132, 133, 134, 141, 142, 143, 144, 146, 147, 151, 153, 159, 163, 175, 177, 179, 181, 182, 184, 188, 189, 191, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 213, 214, 217, 221, 222, 223, 224, 226, 227, 230, 231, 232, 233, 234, 235, 236, 240, 243, 245, 248, 252, 253, 259, 262, 264, 268, 280, 281, 285, 286, 287, 290, 291, 292], "vig": 0, "granger": [0, 165], "BE": [0, 12], "muller": 0, "rp": [0, 81, 151], "bonazzi": 0, "f": [0, 4, 8, 11, 12, 13, 14, 15, 19, 23, 25, 28, 29, 31, 32, 44, 45, 46, 47, 48, 55, 56, 57, 61, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 83, 88, 89, 90, 92, 94, 96, 98, 101, 105, 106, 107, 109, 113, 123, 124, 128, 134, 139, 141, 142, 146, 148, 152, 153, 164, 165, 168, 177, 179, 182, 189, 194, 195, 198, 199, 200, 201, 202, 204, 205, 207, 208, 209, 210, 211, 213, 214, 216, 217, 220, 221, 222, 223, 224, 226, 227, 230, 231, 232, 233, 234, 235, 239, 240, 245, 246, 247, 248, 249, 252, 253, 255, 265, 266, 269, 280, 281, 286, 290, 291, 292], "gupta": [0, 233], "h": [0, 15, 19, 44, 45, 46, 47, 48, 49, 56, 61, 64, 65, 66, 70, 73, 87, 90, 92, 96, 97, 101, 102, 107, 115, 123, 126, 144, 148, 151, 163, 165, 168, 173, 177, 184, 199, 200, 201, 202, 203, 207, 208, 209, 210, 213, 214, 222, 226, 230, 232, 233, 234, 235, 240, 247, 269, 281, 290], "vat": 0, "johansson": 0, "pedregosa": 0, "curri": [0, 165], "mj": 0, "terrel": 0, "ar": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 101, 104, 105, 106, 107, 108, 109, 111, 112, 113, 115, 116, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 151, 152, 153, 154, 156, 158, 160, 163, 165, 167, 168, 169, 171, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 195, 197, 199, 200, 201, 202, 203, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 226, 227, 229, 230, 231, 232, 234, 235, 236, 238, 239, 240, 241, 243, 245, 246, 247, 249, 250, 251, 252, 253, 255, 259, 261, 262, 263, 264, 265, 266, 268, 270, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292], "rou\u010dka": 0, "\u0161": 0, "saboo": 0, "fernando": 0, "i": [0, 1, 2, 4, 5, 7, 8, 9, 10, 11, 13, 14, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 104, 105, 107, 108, 109, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 159, 160, 162, 163, 165, 167, 168, 169, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 219, 220, 221, 222, 223, 224, 226, 227, 229, 230, 231, 232, 234, 235, 236, 238, 239, 240, 241, 243, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 258, 259, 261, 262, 263, 264, 265, 266, 268, 269, 280, 281, 283, 284, 286, 287, 289, 290, 291, 292], "kulal": 0, "cimrman": 0, "r": [0, 4, 5, 8, 12, 13, 15, 19, 21, 23, 25, 38, 45, 46, 47, 49, 56, 57, 65, 66, 67, 69, 70, 71, 78, 79, 81, 83, 87, 88, 90, 92, 101, 105, 107, 109, 111, 115, 117, 120, 123, 124, 125, 126, 128, 129, 131, 133, 136, 137, 138, 143, 144, 145, 146, 147, 148, 151, 175, 176, 179, 180, 182, 189, 190, 193, 195, 197, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 214, 215, 216, 221, 222, 224, 226, 227, 230, 232, 233, 234, 240, 245, 247, 249, 259, 262, 264, 265, 266, 269, 291], "scopatz": 0, "2017": [0, 7, 199], "symbol": [0, 2, 4, 5, 7, 11, 12, 13, 14, 17, 19, 24, 25, 26, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 55, 57, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 87, 88, 89, 90, 92, 93, 95, 96, 98, 101, 105, 106, 107, 108, 109, 111, 112, 113, 115, 117, 119, 120, 121, 123, 124, 125, 126, 128, 129, 131, 132, 133, 134, 136, 137, 138, 139, 144, 146, 148, 151, 152, 153, 154, 156, 158, 159, 161, 163, 165, 167, 168, 171, 174, 176, 177, 178, 179, 180, 181, 182, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 197, 198, 200, 201, 202, 203, 205, 206, 207, 208, 209, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 224, 226, 227, 229, 230, 231, 232, 234, 235, 237, 238, 239, 240, 241, 246, 252, 253, 259, 261, 262, 264, 265, 266, 269, 276, 280, 281, 284, 286, 287, 290, 291, 292], "comput": [0, 2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 19, 21, 22, 23, 25, 26, 29, 30, 31, 36, 38, 44, 46, 47, 48, 49, 54, 56, 57, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 80, 84, 87, 88, 89, 91, 92, 94, 96, 98, 101, 102, 104, 105, 107, 108, 109, 113, 115, 119, 123, 124, 125, 128, 129, 131, 132, 136, 139, 146, 163, 164, 165, 173, 178, 179, 181, 183, 184, 188, 189, 190, 195, 197, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 216, 217, 219, 221, 222, 223, 224, 226, 227, 230, 232, 233, 234, 236, 246, 249, 252, 253, 259, 261, 262, 263, 264, 265, 266, 268, 271, 280, 281, 283, 284, 287, 291], "python": [0, 1, 2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 18, 21, 22, 23, 25, 26, 29, 30, 32, 34, 35, 36, 39, 40, 41, 44, 57, 65, 66, 69, 71, 77, 93, 95, 96, 98, 101, 105, 106, 107, 108, 119, 129, 146, 189, 200, 201, 202, 204, 205, 211, 213, 214, 222, 226, 230, 233, 235, 245, 246, 247, 248, 249, 252, 253, 259, 283, 284, 285, 286, 287, 289, 290, 291], "peerj": [0, 7], "scienc": [0, 57, 90, 101, 145, 146, 201, 208, 223, 224, 281], "3": [0, 3, 5, 7, 9, 11, 12, 13, 15, 17, 19, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 34, 36, 38, 39, 41, 42, 43, 44, 46, 47, 49, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 111, 113, 115, 116, 117, 118, 120, 121, 123, 126, 128, 131, 132, 133, 134, 136, 137, 138, 139, 140, 142, 143, 144, 146, 147, 148, 150, 152, 156, 158, 159, 160, 164, 168, 173, 174, 176, 178, 179, 182, 183, 185, 186, 189, 190, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 245, 246, 248, 249, 250, 252, 253, 255, 259, 261, 262, 263, 264, 266, 268, 269, 276, 280, 281, 283, 285, 286, 287, 290, 291, 292], "e103": 0, "http": [0, 2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 21, 23, 36, 38, 40, 41, 42, 44, 45, 46, 48, 49, 53, 54, 56, 57, 58, 59, 64, 65, 66, 67, 68, 69, 70, 71, 73, 75, 77, 81, 82, 83, 87, 90, 92, 93, 94, 95, 96, 98, 101, 105, 108, 113, 115, 117, 118, 148, 150, 151, 152, 154, 155, 156, 160, 161, 162, 165, 167, 168, 177, 179, 189, 191, 194, 196, 199, 203, 205, 208, 210, 213, 214, 217, 219, 221, 222, 223, 226, 227, 230, 233, 234, 246, 247, 248, 250, 252, 253, 255, 259, 261, 265, 267, 269, 287, 290], "doi": [0, 4, 38, 44, 57, 64, 101, 205, 208, 223, 226, 234, 252], "org": [0, 2, 4, 5, 11, 12, 15, 21, 23, 38, 40, 41, 42, 44, 45, 46, 48, 49, 53, 54, 56, 57, 64, 65, 66, 67, 68, 70, 71, 73, 75, 77, 81, 82, 83, 92, 93, 94, 95, 96, 98, 101, 105, 113, 115, 117, 118, 148, 150, 151, 152, 154, 155, 156, 160, 161, 162, 165, 167, 168, 177, 179, 189, 191, 194, 196, 203, 205, 208, 210, 214, 217, 221, 222, 223, 226, 227, 230, 233, 234, 246, 247, 248, 250, 252, 259, 261, 265, 267, 269, 287, 290], "10": [0, 2, 4, 12, 15, 23, 25, 31, 32, 34, 36, 38, 44, 46, 54, 56, 57, 61, 63, 64, 65, 66, 68, 69, 70, 71, 73, 78, 79, 81, 82, 90, 92, 93, 95, 96, 98, 101, 102, 105, 106, 107, 108, 111, 113, 115, 116, 121, 126, 129, 131, 146, 148, 152, 163, 173, 174, 185, 189, 190, 191, 193, 199, 200, 202, 203, 204, 205, 207, 208, 209, 210, 211, 213, 214, 217, 220, 221, 222, 223, 226, 227, 230, 233, 234, 235, 244, 245, 250, 252, 253, 255, 259, 262, 280, 287, 291], "7717": 0, "c": [0, 2, 7, 8, 12, 14, 15, 19, 21, 23, 25, 26, 28, 30, 37, 38, 44, 45, 49, 50, 54, 56, 57, 58, 60, 61, 62, 64, 65, 66, 68, 70, 71, 73, 74, 75, 77, 78, 79, 81, 82, 88, 90, 92, 94, 95, 96, 98, 101, 105, 106, 107, 108, 109, 111, 115, 117, 119, 121, 123, 124, 129, 134, 136, 137, 138, 140, 142, 143, 146, 148, 152, 158, 159, 160, 163, 165, 168, 173, 176, 178, 179, 184, 188, 189, 193, 197, 198, 199, 200, 202, 203, 204, 205, 207, 208, 209, 210, 211, 213, 221, 222, 223, 224, 226, 227, 230, 231, 232, 233, 234, 235, 239, 240, 246, 247, 249, 252, 255, 256, 259, 261, 262, 263, 264, 265, 266, 269, 281, 283, 290, 291, 292], "103": [0, 7, 56], "bibtex": 0, "entri": [0, 11, 30, 42, 47, 55, 57, 63, 66, 77, 90, 94, 96, 97, 98, 104, 124, 126, 129, 131, 144, 151, 203, 207, 209, 210, 224, 234, 253], "latex": [0, 2, 4, 8, 12, 14, 23, 34, 36, 73, 93, 188, 189, 194, 198, 200, 205, 214, 285, 286], "user": [0, 2, 3, 4, 5, 8, 9, 11, 12, 13, 14, 18, 20, 21, 23, 45, 46, 47, 56, 57, 64, 65, 66, 67, 73, 77, 90, 94, 98, 101, 107, 108, 109, 113, 115, 119, 129, 139, 142, 144, 147, 167, 168, 177, 183, 184, 189, 193, 197, 201, 204, 207, 209, 211, 212, 213, 214, 215, 223, 226, 232, 233, 234, 243, 246, 247, 249, 250, 253, 259, 263, 264, 269, 276, 280, 283, 284, 286, 287, 288], "articl": [0, 7, 9, 11, 65, 66, 98, 101, 206, 208, 209, 214, 223, 259, 277, 285], "titl": [0, 4, 5, 32, 200], "author": [0, 4, 7, 105, 165, 209], "aaron": 0, "christoph": [0, 259], "p": [0, 8, 13, 14, 15, 19, 21, 22, 23, 25, 26, 28, 38, 40, 41, 42, 46, 47, 48, 53, 54, 55, 56, 57, 58, 59, 61, 63, 64, 65, 66, 67, 68, 70, 71, 73, 75, 78, 79, 80, 81, 82, 87, 88, 90, 92, 96, 98, 101, 105, 107, 108, 109, 111, 115, 116, 120, 123, 124, 125, 126, 128, 129, 133, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 158, 177, 179, 184, 190, 193, 195, 197, 199, 200, 202, 203, 204, 207, 208, 210, 211, 214, 216, 217, 221, 222, 224, 226, 227, 230, 232, 233, 234, 235, 239, 240, 252, 259, 262, 263, 264, 265, 266, 268, 287, 291], "mateusz": 0, "v": [0, 8, 9, 17, 25, 29, 34, 38, 46, 55, 61, 64, 65, 66, 67, 68, 69, 73, 79, 90, 92, 94, 96, 101, 105, 109, 120, 121, 123, 126, 131, 143, 144, 146, 147, 151, 152, 164, 179, 184, 188, 189, 191, 193, 195, 197, 198, 200, 207, 208, 209, 210, 214, 224, 226, 227, 230, 232, 234, 245, 252, 259, 262, 263, 264, 265, 266, 268], "ert": 0, "k": [0, 5, 12, 15, 17, 21, 23, 28, 38, 44, 45, 46, 47, 49, 51, 55, 56, 59, 60, 63, 64, 65, 66, 68, 69, 70, 71, 73, 83, 90, 92, 95, 96, 98, 101, 105, 123, 124, 134, 141, 143, 146, 153, 167, 168, 171, 175, 177, 179, 188, 195, 199, 201, 203, 204, 207, 208, 209, 210, 211, 214, 216, 217, 219, 220, 221, 222, 223, 224, 226, 227, 230, 232, 234, 235, 236, 238, 239, 240, 241, 245, 249, 252, 259, 261, 262, 263, 264, 265, 266, 268, 269, 290, 291], "ond": 0, "ej": 0, "sergei": 0, "b": [0, 11, 12, 14, 15, 17, 21, 22, 23, 25, 26, 28, 30, 38, 45, 46, 47, 49, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 75, 76, 77, 78, 79, 80, 81, 88, 90, 92, 94, 95, 96, 97, 98, 101, 105, 107, 108, 109, 111, 113, 115, 120, 121, 123, 124, 125, 126, 129, 133, 134, 143, 144, 146, 148, 151, 156, 158, 160, 162, 167, 168, 171, 176, 177, 178, 179, 188, 189, 191, 193, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 214, 216, 217, 219, 220, 221, 222, 223, 224, 226, 227, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 245, 248, 249, 252, 255, 259, 261, 262, 263, 264, 265, 281, 283, 287, 291, 292], "matthew": 0, "amit": [0, 233], "sergiu": 0, "jason": [0, 214], "sartaj": 0, "thilina": 0, "sean": 0, "brian": [0, 165], "e": [0, 2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 21, 22, 23, 26, 30, 31, 34, 36, 37, 38, 42, 44, 45, 46, 47, 54, 55, 56, 57, 58, 61, 63, 64, 65, 66, 67, 69, 70, 71, 73, 75, 77, 78, 79, 80, 81, 82, 87, 88, 90, 92, 94, 95, 96, 101, 105, 107, 108, 109, 111, 115, 116, 120, 123, 124, 126, 128, 129, 142, 143, 146, 147, 148, 151, 158, 159, 163, 168, 169, 171, 174, 176, 178, 179, 184, 185, 189, 194, 195, 198, 199, 200, 201, 202, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 220, 221, 222, 223, 224, 226, 227, 230, 231, 232, 233, 234, 235, 238, 239, 240, 241, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 259, 263, 266, 268, 269, 280, 281, 285, 286, 291], "richard": [0, 105], "francesco": 0, "harsh": [0, 233], "shivam": 0, "fredrik": 0, "fabian": 0, "j": [0, 5, 15, 38, 42, 44, 46, 47, 51, 55, 56, 57, 61, 63, 64, 66, 67, 69, 70, 73, 87, 90, 92, 94, 96, 98, 101, 105, 113, 116, 123, 145, 146, 151, 158, 159, 176, 179, 184, 188, 195, 199, 201, 203, 205, 207, 208, 209, 210, 211, 213, 214, 216, 222, 224, 226, 227, 230, 232, 233, 234, 235, 236, 238, 239, 240, 241, 246, 252, 259, 261, 262, 263, 264, 265, 266, 268, 269], "andi": [0, 145], "rou": 0, "ka": 0, "n": [0, 4, 5, 9, 12, 14, 15, 19, 21, 23, 25, 28, 29, 37, 42, 44, 46, 47, 48, 49, 51, 53, 54, 55, 56, 57, 59, 61, 63, 64, 65, 66, 67, 69, 70, 71, 73, 75, 78, 79, 80, 81, 82, 87, 88, 90, 92, 94, 95, 96, 98, 101, 102, 105, 107, 108, 109, 111, 115, 117, 118, 120, 123, 124, 126, 128, 129, 131, 132, 133, 134, 136, 137, 138, 141, 142, 143, 144, 146, 147, 148, 150, 152, 153, 155, 159, 164, 165, 168, 173, 175, 176, 177, 179, 180, 182, 184, 186, 188, 189, 191, 193, 194, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 213, 214, 216, 217, 219, 220, 221, 222, 223, 224, 226, 227, 230, 232, 233, 234, 237, 239, 240, 243, 246, 252, 254, 255, 259, 261, 262, 263, 264, 268, 274, 281, 287, 290, 291, 292], "ashutosh": 0, "isuru": 0, "sumith": 0, "robert": [0, 234], "anthoni": 0, "year": [0, 3, 4, 13, 183], "month": 0, "jan": [0, 66], "keyword": [0, 3, 4, 12, 13, 14, 17, 23, 45, 46, 47, 56, 57, 65, 66, 69, 70, 78, 80, 81, 82, 96, 101, 105, 108, 113, 115, 124, 141, 142, 173, 179, 194, 200, 202, 204, 205, 207, 209, 210, 213, 214, 215, 221, 226, 227, 232, 239, 245, 246, 248, 250, 252, 253, 255, 264, 287], "algebra": [0, 5, 14, 15, 17, 21, 26, 31, 34, 42, 47, 48, 56, 65, 66, 69, 71, 83, 86, 87, 88, 90, 92, 95, 96, 100, 102, 105, 106, 107, 128, 139, 146, 147, 199, 202, 203, 205, 206, 207, 208, 210, 211, 214, 216, 224, 227, 229, 230, 233, 270, 271, 274, 276, 277, 282, 283, 285, 287], "system": [0, 1, 2, 5, 7, 8, 9, 13, 14, 15, 17, 18, 19, 22, 23, 25, 26, 30, 32, 39, 41, 56, 65, 66, 67, 71, 90, 93, 94, 95, 96, 101, 106, 107, 108, 111, 112, 114, 115, 119, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 136, 138, 139, 140, 141, 142, 143, 144, 146, 157, 158, 173, 176, 177, 179, 182, 186, 189, 193, 194, 195, 197, 198, 199, 201, 202, 204, 205, 206, 207, 208, 209, 212, 213, 214, 222, 223, 229, 233, 234, 245, 246, 259, 261, 262, 265, 267, 269, 274, 276, 283, 285, 287, 291, 292], "abstract": [0, 13, 44, 45, 54, 65, 67, 71, 73, 78, 83, 98, 123, 129, 163, 165, 174, 177, 178, 179, 201, 209, 233, 234, 236, 240, 247, 268], "an": [0, 2, 3, 4, 5, 7, 8, 9, 10, 12, 14, 15, 17, 18, 19, 21, 22, 23, 25, 26, 27, 28, 30, 33, 34, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 54, 55, 56, 57, 58, 59, 61, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 78, 79, 80, 81, 82, 83, 84, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 113, 115, 116, 117, 119, 120, 123, 124, 126, 128, 131, 133, 139, 141, 143, 144, 146, 147, 150, 151, 152, 156, 158, 159, 160, 162, 163, 164, 165, 167, 168, 169, 172, 173, 174, 176, 177, 179, 180, 181, 183, 188, 189, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 226, 227, 229, 230, 231, 232, 234, 235, 238, 239, 240, 241, 243, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 259, 261, 263, 264, 266, 267, 268, 269, 280, 281, 282, 283, 284, 285, 287, 290, 291, 292], "open": [0, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 29, 30, 31, 33, 36, 44, 65, 67, 71, 92, 95, 115, 129, 132, 146, 214, 222, 229, 233, 234, 256, 285, 287], "sourc": [0, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 23, 30, 31, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 86, 87, 88, 90, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 107, 108, 111, 113, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 128, 129, 146, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 185, 186, 187, 189, 190, 191, 193, 194, 195, 199, 200, 201, 203, 204, 205, 207, 209, 210, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 261, 262, 266, 278, 285], "written": [0, 2, 4, 5, 11, 12, 14, 21, 23, 42, 46, 53, 56, 57, 61, 65, 70, 73, 77, 83, 88, 90, 94, 95, 104, 105, 133, 139, 146, 179, 195, 196, 197, 198, 201, 202, 210, 214, 217, 221, 224, 227, 230, 247, 266, 268, 284, 285, 286, 291], "pure": [0, 2, 14, 29, 31, 38, 66, 71, 92, 95, 98, 115, 143, 184, 204, 205, 207, 210, 214, 234, 252], "It": [0, 2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 19, 21, 22, 23, 25, 28, 29, 31, 32, 33, 36, 38, 39, 40, 41, 44, 45, 46, 53, 56, 57, 59, 60, 61, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 77, 81, 82, 88, 90, 92, 94, 95, 101, 105, 106, 107, 108, 109, 111, 113, 115, 117, 119, 120, 121, 123, 124, 129, 131, 137, 139, 140, 141, 142, 144, 146, 148, 152, 153, 163, 168, 169, 174, 175, 176, 177, 178, 179, 181, 184, 187, 189, 193, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 214, 217, 221, 222, 223, 224, 226, 227, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 245, 246, 247, 248, 249, 250, 253, 259, 262, 263, 264, 266, 268, 269, 280, 281, 283, 284, 285, 286, 287, 289, 290, 291], "built": [0, 2, 4, 5, 8, 14, 15, 18, 39, 41, 47, 65, 71, 92, 101, 129, 146, 202, 205, 214, 215, 219, 230, 233, 234, 240, 249, 252, 253, 285, 286, 290], "focu": [0, 13, 21, 75, 232, 285], "extens": [0, 2, 4, 5, 7, 12, 21, 23, 56, 65, 70, 71, 77, 81, 92, 101, 126, 146, 202, 204, 205, 207, 208, 209, 210, 214, 224, 226, 230, 232, 233, 246, 247, 256, 284, 291], "eas": [0, 129, 198, 200, 214, 217], "through": [0, 3, 4, 7, 8, 13, 14, 15, 21, 23, 25, 29, 30, 32, 34, 36, 44, 46, 56, 57, 59, 64, 65, 66, 69, 70, 73, 75, 76, 77, 78, 79, 81, 90, 94, 95, 101, 105, 108, 109, 113, 120, 124, 129, 131, 139, 144, 150, 151, 189, 200, 201, 207, 209, 214, 220, 224, 226, 230, 232, 233, 234, 235, 246, 252, 259, 261, 266, 269, 282, 283, 284, 289], "both": [0, 2, 3, 4, 5, 7, 11, 12, 13, 14, 15, 18, 21, 22, 23, 25, 27, 28, 29, 32, 37, 38, 44, 45, 46, 57, 60, 61, 63, 64, 65, 66, 70, 71, 73, 80, 89, 90, 92, 95, 96, 101, 105, 107, 108, 109, 115, 120, 123, 124, 126, 131, 133, 134, 140, 143, 151, 152, 163, 169, 176, 179, 183, 184, 189, 193, 197, 198, 200, 201, 202, 204, 205, 207, 209, 210, 212, 213, 214, 216, 221, 222, 223, 224, 226, 227, 230, 232, 233, 235, 239, 245, 247, 252, 253, 259, 261, 281, 284, 285, 286, 291, 292], "interact": [0, 11, 14, 17, 29, 37, 65, 79, 92, 99, 101, 146, 176, 194, 198, 204, 205, 226, 234, 250, 257, 270, 278, 283, 285, 286, 290, 291], "programmat": [0, 14, 17, 18, 33, 34, 233, 264], "applic": [0, 5, 13, 26, 29, 47, 48, 49, 55, 56, 57, 58, 65, 66, 71, 92, 96, 101, 105, 108, 111, 123, 124, 128, 129, 139, 143, 145, 146, 163, 164, 189, 193, 197, 202, 203, 207, 208, 209, 210, 214, 216, 221, 227, 230, 233, 247, 252, 259, 266, 267, 274, 285], "These": [0, 2, 4, 5, 9, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 34, 35, 37, 45, 46, 56, 64, 65, 66, 67, 73, 90, 92, 95, 101, 107, 109, 115, 123, 124, 125, 131, 133, 137, 143, 146, 169, 174, 175, 183, 189, 190, 195, 197, 198, 201, 202, 203, 204, 205, 207, 210, 214, 224, 227, 230, 231, 233, 234, 236, 241, 245, 246, 247, 252, 266, 281, 284, 287, 290, 291], "characterist": [0, 67, 83, 101, 197, 203, 205, 207, 208, 230, 232, 287], "have": [0, 3, 4, 5, 7, 8, 9, 10, 11, 12, 14, 15, 18, 19, 21, 22, 23, 25, 27, 28, 30, 31, 32, 34, 36, 38, 40, 41, 42, 44, 45, 46, 47, 48, 49, 55, 56, 57, 58, 61, 63, 64, 65, 66, 67, 69, 70, 71, 73, 75, 76, 80, 81, 83, 88, 89, 90, 92, 94, 95, 96, 97, 98, 101, 104, 105, 106, 107, 108, 109, 113, 115, 116, 118, 119, 123, 124, 126, 129, 130, 131, 137, 139, 143, 144, 146, 163, 165, 168, 172, 174, 176, 177, 178, 179, 181, 182, 184, 187, 188, 189, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 214, 216, 217, 219, 221, 222, 223, 224, 226, 227, 230, 232, 233, 234, 235, 236, 238, 240, 241, 243, 244, 245, 247, 248, 249, 252, 253, 255, 259, 261, 263, 264, 265, 266, 269, 280, 281, 283, 284, 285, 286, 287, 290, 291, 292], "led": 0, "becom": [0, 3, 4, 5, 11, 12, 13, 14, 15, 19, 21, 56, 61, 64, 65, 66, 69, 88, 93, 101, 107, 194, 197, 201, 202, 204, 211, 214, 217, 223, 230, 233, 234, 240, 253, 255, 262, 264, 291], "popular": [0, 2, 66, 106, 146, 285], "librari": [0, 2, 3, 4, 12, 13, 14, 21, 23, 31, 35, 36, 46, 65, 66, 70, 90, 92, 93, 101, 106, 119, 129, 146, 183, 200, 204, 205, 234, 245, 246, 247, 252, 253, 280, 283, 284, 285], "scientif": [0, 14, 36, 65, 146], "ecosystem": 0, "thi": [0, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 105, 106, 107, 108, 109, 111, 112, 113, 115, 116, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 150, 151, 152, 153, 154, 156, 158, 159, 160, 162, 163, 165, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 238, 239, 240, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 257, 259, 261, 262, 263, 264, 265, 266, 267, 268, 270, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292], "paper": [0, 4, 105, 131, 198, 209, 210, 223, 224, 227, 230], "present": [0, 2, 5, 13, 14, 15, 19, 44, 45, 49, 52, 56, 57, 59, 63, 65, 68, 92, 101, 105, 108, 111, 113, 115, 124, 131, 179, 181, 189, 191, 194, 195, 200, 201, 207, 208, 209, 213, 214, 227, 233, 247, 253, 256, 262, 263, 264, 268, 271, 292], "architectur": [0, 12, 146, 204, 245], "descript": [0, 3, 4, 5, 13, 26, 35, 45, 47, 55, 73, 92, 105, 151, 169, 176, 187, 197, 198, 199, 214, 238, 245, 247, 249, 250, 270, 288], "its": [0, 2, 3, 4, 5, 7, 12, 13, 14, 15, 17, 19, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 34, 38, 40, 41, 42, 45, 46, 47, 49, 53, 55, 56, 57, 64, 65, 66, 67, 70, 71, 73, 75, 77, 81, 83, 90, 92, 93, 95, 96, 98, 101, 105, 107, 108, 109, 111, 115, 119, 120, 123, 124, 126, 129, 131, 132, 133, 139, 140, 143, 144, 146, 147, 152, 158, 164, 165, 167, 168, 173, 174, 177, 179, 183, 184, 186, 189, 190, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 220, 221, 222, 226, 229, 230, 232, 233, 234, 236, 238, 239, 240, 245, 248, 249, 252, 253, 256, 259, 262, 263, 264, 266, 269, 285, 286, 287, 290, 291], "featur": [0, 2, 3, 5, 7, 11, 12, 13, 15, 16, 23, 35, 36, 65, 67, 69, 107, 129, 139, 146, 196, 214, 230, 234, 243, 247, 250, 267, 276, 279, 284, 285, 289, 291], "discuss": [0, 3, 4, 5, 7, 11, 12, 13, 15, 16, 17, 19, 21, 22, 23, 35, 47, 56, 66, 73, 105, 119, 124, 129, 139, 143, 144, 188, 196, 197, 198, 204, 240, 249, 270, 280, 282, 283, 285, 286, 288, 290, 291], "select": [0, 8, 16, 17, 30, 35, 46, 49, 56, 57, 64, 65, 66, 74, 79, 93, 95, 96, 105, 107, 121, 124, 184, 194, 204, 205, 207, 208, 210, 214, 223, 226, 232], "submodul": [0, 2, 3, 4, 11, 12, 14, 46, 119, 201, 205, 207, 209], "The": [0, 2, 4, 5, 6, 7, 8, 9, 11, 12, 14, 15, 17, 19, 20, 22, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 44, 45, 46, 48, 49, 51, 53, 54, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 115, 116, 117, 119, 120, 121, 123, 124, 125, 126, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 146, 147, 148, 150, 151, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 188, 189, 190, 191, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 243, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 259, 261, 262, 263, 264, 267, 268, 269, 276, 280, 281, 283, 284, 286, 287, 288, 289, 290, 291, 292], "supplementari": 0, "materi": [0, 108, 150, 289], "provid": [0, 2, 3, 4, 5, 7, 8, 9, 11, 13, 16, 17, 19, 20, 21, 22, 23, 26, 27, 31, 35, 38, 44, 45, 46, 47, 48, 54, 55, 56, 57, 63, 64, 65, 67, 69, 73, 74, 76, 81, 84, 87, 88, 92, 93, 95, 96, 98, 101, 102, 104, 105, 106, 107, 109, 111, 113, 119, 120, 123, 124, 126, 128, 131, 132, 133, 134, 139, 140, 141, 142, 143, 144, 146, 147, 152, 153, 173, 181, 182, 183, 187, 189, 190, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213, 214, 217, 219, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 239, 240, 245, 246, 247, 249, 250, 252, 253, 255, 259, 262, 263, 264, 266, 267, 269, 281, 285, 286, 287, 291], "addit": [0, 2, 3, 5, 9, 12, 13, 14, 15, 17, 19, 36, 38, 46, 55, 56, 57, 64, 65, 71, 73, 77, 83, 85, 89, 90, 92, 93, 95, 98, 101, 107, 112, 113, 115, 119, 120, 124, 143, 147, 165, 177, 178, 181, 188, 194, 197, 198, 199, 200, 201, 202, 203, 204, 207, 209, 210, 214, 220, 223, 224, 226, 227, 230, 231, 232, 233, 234, 245, 246, 247, 249, 250, 252, 253, 255, 263, 283, 285, 286, 287, 290, 291], "exampl": [0, 1, 2, 3, 5, 7, 12, 13, 14, 15, 17, 18, 19, 21, 22, 26, 29, 30, 32, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 87, 88, 90, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 111, 113, 115, 117, 118, 120, 121, 123, 124, 126, 128, 129, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 144, 146, 148, 150, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 171, 173, 174, 176, 177, 178, 179, 180, 181, 185, 186, 188, 189, 190, 191, 193, 194, 195, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 215, 216, 217, 219, 220, 222, 223, 226, 227, 229, 230, 231, 232, 233, 238, 240, 241, 243, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 259, 261, 262, 264, 266, 267, 268, 269, 274, 276, 277, 280, 281, 282, 283, 284, 286, 287, 289, 290, 292], "further": [0, 2, 11, 21, 23, 25, 41, 45, 66, 71, 73, 77, 90, 92, 97, 98, 101, 107, 108, 112, 113, 120, 123, 124, 144, 151, 197, 199, 200, 201, 207, 209, 210, 223, 224, 226, 230, 234, 240, 284, 285], "outlin": [0, 2, 3, 11, 21, 23, 63, 92, 201, 230], "detail": [0, 2, 3, 4, 5, 6, 9, 11, 12, 13, 14, 16, 18, 21, 23, 35, 45, 56, 65, 67, 70, 72, 73, 90, 91, 92, 93, 101, 105, 113, 123, 124, 129, 144, 146, 151, 169, 173, 189, 191, 199, 200, 201, 207, 209, 216, 221, 226, 227, 228, 230, 231, 234, 239, 240, 245, 248, 250, 253, 264, 265, 266, 267, 270, 274, 281, 283, 287, 288, 290], "volum": [0, 4, 46, 64, 73, 90, 92, 199, 208, 224, 227, 230, 249, 259], "page": [0, 2, 3, 4, 5, 7, 8, 11, 12, 13, 14, 15, 21, 22, 25, 26, 28, 29, 33, 35, 46, 47, 48, 64, 70, 90, 105, 106, 123, 124, 146, 184, 200, 203, 204, 205, 208, 214, 224, 227, 250, 268, 291], "journal": [0, 4, 7, 38, 64, 70, 105, 116, 208, 226, 249, 252], "issn": 0, "2376": 0, "5992": 0, "url": [0, 66, 250], "bsd": [0, 2, 8, 285], "licens": [0, 2, 8, 285], "so": [0, 2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 18, 19, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 49, 53, 54, 56, 57, 59, 61, 63, 65, 66, 69, 71, 73, 75, 77, 78, 79, 81, 87, 88, 89, 90, 92, 93, 94, 95, 96, 98, 101, 102, 105, 107, 108, 109, 115, 119, 123, 124, 129, 131, 133, 139, 140, 141, 143, 144, 146, 147, 152, 163, 165, 173, 175, 176, 177, 179, 181, 183, 184, 188, 189, 198, 199, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213, 214, 215, 216, 221, 222, 223, 224, 226, 227, 229, 230, 231, 232, 233, 234, 238, 239, 243, 245, 246, 249, 250, 252, 253, 255, 265, 269, 280, 281, 283, 285, 286, 287, 290, 291, 292], "you": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 40, 41, 42, 44, 46, 47, 48, 56, 57, 64, 65, 66, 67, 69, 71, 72, 73, 77, 79, 81, 83, 84, 89, 90, 92, 93, 95, 96, 98, 99, 101, 102, 105, 106, 107, 115, 117, 118, 119, 123, 124, 125, 126, 129, 130, 140, 141, 143, 144, 146, 168, 173, 174, 177, 179, 183, 188, 189, 191, 195, 197, 198, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 214, 215, 217, 221, 222, 226, 227, 230, 231, 232, 233, 234, 235, 238, 239, 240, 243, 245, 246, 247, 248, 250, 252, 253, 256, 263, 264, 265, 266, 279, 280, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292], "free": [0, 9, 11, 12, 13, 14, 25, 30, 31, 36, 44, 45, 46, 55, 56, 61, 65, 77, 92, 96, 98, 101, 105, 108, 109, 113, 116, 123, 126, 139, 148, 168, 186, 189, 196, 200, 201, 205, 207, 209, 210, 214, 216, 222, 224, 226, 227, 230, 232, 233, 240, 252, 285], "howev": [0, 2, 3, 4, 5, 8, 11, 12, 13, 14, 15, 17, 19, 21, 22, 23, 25, 28, 29, 32, 39, 41, 46, 48, 56, 57, 61, 64, 65, 66, 67, 70, 71, 73, 75, 90, 92, 95, 96, 101, 105, 106, 107, 108, 111, 123, 126, 129, 143, 147, 179, 198, 199, 200, 201, 202, 204, 205, 207, 209, 210, 211, 213, 214, 215, 221, 222, 223, 224, 226, 230, 231, 232, 233, 245, 246, 253, 263, 264, 268, 280, 283, 285, 287, 291, 292], "like": [0, 1, 2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 18, 21, 22, 23, 30, 32, 33, 34, 35, 36, 46, 47, 48, 50, 56, 57, 64, 65, 66, 69, 70, 71, 73, 75, 85, 88, 92, 93, 95, 96, 98, 99, 100, 101, 105, 106, 107, 111, 115, 119, 123, 129, 131, 140, 143, 146, 147, 161, 163, 173, 174, 177, 178, 179, 183, 184, 188, 189, 193, 195, 197, 200, 201, 202, 204, 205, 206, 207, 209, 210, 212, 213, 214, 217, 221, 222, 223, 224, 226, 227, 230, 231, 232, 233, 234, 235, 236, 238, 240, 241, 243, 245, 246, 247, 248, 252, 253, 255, 256, 263, 264, 266, 268, 280, 281, 283, 284, 285, 286, 287, 291], "academ": [0, 45, 49, 208], "commerci": [0, 285], "creat": [0, 2, 4, 5, 7, 8, 12, 14, 21, 22, 27, 28, 29, 30, 32, 33, 34, 38, 40, 45, 46, 47, 54, 56, 57, 65, 66, 67, 69, 71, 72, 73, 75, 77, 78, 80, 81, 86, 88, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 103, 105, 106, 107, 108, 111, 115, 120, 123, 124, 126, 129, 132, 133, 134, 136, 138, 140, 142, 143, 144, 146, 147, 156, 158, 160, 164, 167, 168, 169, 173, 174, 176, 177, 179, 182, 185, 188, 189, 191, 193, 197, 198, 200, 201, 203, 204, 205, 207, 209, 210, 211, 214, 221, 226, 230, 233, 234, 235, 239, 240, 245, 246, 247, 249, 250, 252, 253, 259, 264, 266, 281, 283, 286, 287, 290, 291, 292], "fork": [0, 5, 13, 131], "deriv": [0, 4, 11, 12, 13, 14, 20, 23, 29, 44, 45, 46, 49, 55, 56, 65, 67, 71, 72, 73, 75, 82, 87, 88, 90, 92, 93, 95, 98, 101, 111, 115, 119, 121, 123, 124, 128, 131, 133, 134, 136, 139, 141, 142, 143, 168, 177, 181, 184, 185, 188, 189, 191, 193, 194, 195, 197, 200, 201, 202, 203, 205, 207, 209, 210, 211, 214, 216, 224, 226, 230, 231, 232, 236, 241, 247, 259, 262, 263, 282, 285, 292], "long": [0, 4, 5, 11, 12, 25, 34, 46, 57, 64, 65, 66, 68, 78, 90, 92, 93, 95, 101, 105, 108, 109, 131, 144, 194, 210, 211, 214, 223, 224, 232, 234, 246, 253, 255, 262, 283, 286], "copi": [0, 8, 9, 11, 12, 13, 15, 21, 47, 57, 58, 65, 81, 101, 105, 106, 203, 205, 207, 209, 213, 214, 221, 232, 245, 252, 255, 290], "statement": [0, 4, 21, 22, 23, 36, 45, 46, 65, 73, 90, 95, 98, 129, 158, 214, 234, 243, 247, 252], "redistribut": [0, 210], "see": [0, 2, 3, 5, 7, 8, 9, 11, 12, 13, 14, 15, 18, 19, 21, 22, 23, 24, 35, 39, 40, 41, 42, 44, 45, 46, 48, 51, 53, 56, 57, 58, 61, 64, 66, 67, 70, 71, 72, 73, 77, 81, 82, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 98, 101, 102, 105, 106, 107, 113, 119, 123, 124, 135, 137, 141, 143, 148, 151, 154, 155, 164, 168, 169, 173, 174, 175, 176, 178, 179, 182, 184, 189, 194, 197, 199, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 213, 214, 216, 217, 220, 221, 222, 223, 224, 226, 227, 230, 231, 232, 233, 234, 239, 240, 243, 245, 246, 247, 248, 249, 250, 253, 254, 259, 261, 269, 280, 281, 283, 285, 286, 287, 289, 290, 291, 292], "file": [0, 2, 3, 4, 5, 7, 8, 9, 12, 14, 15, 46, 101, 129, 146, 168, 214, 221, 224, 226, 234, 243, 245, 246, 247, 253, 256], "That": [0, 3, 5, 11, 12, 14, 15, 21, 22, 23, 65, 66, 71, 95, 101, 139, 176, 181, 187, 197, 198, 201, 202, 204, 205, 207, 209, 220, 221, 230, 234, 246, 247, 253, 280, 283, 286, 291], "said": [0, 3, 14, 38, 42, 46, 51, 105, 184, 195, 197, 198, 202, 230, 233, 234, 259, 266], "although": [0, 2, 3, 4, 5, 11, 12, 14, 15, 18, 19, 21, 23, 28, 57, 65, 66, 71, 77, 89, 90, 93, 95, 96, 98, 101, 105, 108, 119, 131, 146, 201, 204, 205, 207, 209, 210, 222, 223, 226, 227, 232, 246, 252, 253, 283, 286, 291], "requir": [0, 2, 4, 5, 7, 9, 11, 12, 13, 14, 15, 23, 30, 34, 36, 46, 56, 65, 66, 68, 69, 73, 75, 76, 78, 79, 82, 84, 95, 101, 104, 105, 106, 107, 108, 113, 119, 120, 123, 124, 126, 128, 129, 131, 133, 140, 144, 153, 176, 188, 189, 191, 199, 200, 201, 203, 204, 205, 207, 209, 211, 214, 217, 223, 224, 227, 230, 232, 233, 234, 238, 245, 246, 247, 248, 250, 252, 253, 262, 263, 264, 287, 289], "conveni": [0, 8, 13, 14, 15, 27, 29, 34, 37, 44, 46, 57, 65, 66, 70, 73, 92, 95, 107, 129, 144, 146, 191, 197, 198, 200, 201, 202, 203, 204, 205, 209, 212, 221, 222, 226, 232, 238, 239, 246, 248, 249, 253, 266, 281, 283], "pleas": [0, 3, 4, 5, 7, 12, 13, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 42, 44, 65, 73, 77, 90, 105, 119, 124, 129, 139, 143, 144, 151, 152, 173, 188, 198, 199, 200, 201, 207, 208, 222, 226, 227, 232, 233, 253, 259, 264, 288, 292], "when": [0, 2, 4, 5, 7, 8, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 25, 29, 31, 32, 33, 36, 38, 39, 40, 41, 42, 44, 45, 46, 47, 49, 56, 57, 58, 63, 64, 65, 66, 67, 69, 70, 71, 73, 74, 75, 77, 78, 79, 80, 81, 82, 89, 92, 93, 95, 96, 97, 101, 105, 106, 107, 111, 113, 115, 116, 119, 123, 126, 129, 131, 137, 139, 140, 141, 142, 143, 144, 147, 152, 153, 158, 163, 164, 168, 171, 173, 181, 182, 183, 188, 194, 197, 198, 200, 201, 202, 204, 205, 207, 209, 210, 211, 213, 214, 215, 216, 220, 221, 222, 223, 224, 226, 227, 230, 231, 232, 233, 234, 236, 238, 239, 243, 245, 246, 247, 248, 250, 252, 253, 255, 256, 258, 263, 281, 283, 285, 286, 291, 292], "your": [0, 2, 3, 4, 5, 8, 12, 13, 15, 23, 25, 26, 27, 28, 30, 32, 33, 34, 36, 40, 65, 66, 92, 93, 101, 106, 107, 115, 119, 123, 141, 143, 198, 200, 214, 221, 226, 230, 233, 234, 252, 253, 281, 285, 287, 288, 290, 291], "work": [0, 2, 3, 4, 8, 9, 11, 12, 13, 14, 15, 18, 19, 21, 22, 23, 25, 31, 36, 39, 41, 44, 45, 46, 48, 56, 57, 58, 65, 66, 69, 73, 90, 92, 94, 95, 96, 98, 101, 102, 105, 107, 119, 123, 129, 131, 140, 144, 146, 159, 163, 168, 172, 173, 174, 175, 178, 181, 191, 198, 199, 200, 201, 202, 203, 204, 205, 207, 209, 210, 214, 221, 222, 223, 224, 226, 227, 230, 232, 233, 234, 240, 245, 246, 247, 249, 252, 253, 254, 255, 263, 264, 283, 284, 285, 286, 287, 290, 291], "also": [0, 2, 3, 5, 7, 8, 9, 11, 12, 13, 14, 15, 17, 19, 21, 22, 23, 25, 26, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 44, 45, 46, 48, 54, 56, 57, 64, 66, 67, 69, 70, 71, 72, 73, 77, 81, 83, 85, 87, 88, 90, 92, 94, 95, 96, 99, 101, 102, 105, 106, 107, 108, 109, 111, 112, 113, 115, 119, 120, 121, 123, 124, 126, 128, 129, 131, 132, 133, 134, 137, 140, 141, 142, 143, 144, 146, 147, 148, 152, 162, 163, 165, 169, 173, 178, 179, 182, 183, 184, 188, 189, 191, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 226, 227, 229, 230, 231, 232, 233, 234, 235, 238, 239, 240, 243, 245, 246, 247, 248, 249, 250, 253, 255, 259, 262, 263, 264, 265, 266, 268, 269, 280, 281, 283, 285, 286, 287, 290, 291, 292], "consid": [0, 3, 5, 12, 13, 14, 15, 18, 21, 22, 23, 34, 38, 42, 45, 46, 54, 57, 60, 64, 65, 66, 68, 69, 70, 71, 73, 75, 77, 81, 89, 90, 92, 93, 94, 95, 96, 98, 101, 105, 115, 119, 120, 126, 130, 141, 147, 169, 176, 179, 183, 184, 190, 194, 195, 197, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 213, 214, 217, 221, 226, 227, 230, 231, 232, 233, 234, 245, 247, 252, 262, 264, 266, 268, 269, 283, 287, 291], "contribut": [0, 2, 3, 4, 5, 9, 10, 12, 36, 81, 105, 124, 134, 137, 204, 207, 209, 230, 269, 288], "all": [0, 2, 3, 4, 5, 8, 9, 11, 12, 13, 14, 15, 17, 19, 21, 22, 23, 30, 34, 35, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 53, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 78, 80, 81, 82, 90, 92, 94, 95, 96, 97, 98, 101, 104, 105, 106, 107, 108, 109, 111, 113, 115, 116, 120, 121, 123, 124, 126, 128, 129, 131, 132, 134, 139, 141, 143, 146, 147, 153, 158, 159, 163, 173, 175, 176, 177, 179, 181, 182, 183, 184, 186, 187, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 226, 227, 229, 230, 231, 232, 233, 234, 235, 238, 240, 241, 243, 245, 246, 247, 248, 250, 252, 253, 255, 259, 261, 263, 265, 266, 267, 268, 270, 280, 281, 283, 285, 286, 287, 290, 291, 292], "chang": [0, 4, 5, 7, 8, 12, 14, 15, 21, 36, 45, 46, 47, 56, 57, 61, 64, 65, 66, 69, 70, 71, 73, 79, 80, 90, 92, 95, 101, 105, 107, 108, 111, 115, 123, 126, 129, 131, 136, 153, 164, 174, 184, 185, 188, 195, 197, 198, 199, 200, 201, 202, 203, 207, 210, 211, 214, 221, 222, 223, 224, 226, 229, 230, 232, 233, 234, 235, 245, 252, 253, 264, 266, 280, 283, 286, 290], "back": [0, 23, 28, 29, 31, 45, 46, 61, 64, 65, 66, 71, 73, 80, 81, 87, 89, 90, 92, 93, 96, 105, 106, 115, 173, 194, 197, 204, 209, 210, 212, 214, 224, 230, 232, 235, 236], "we": [0, 2, 3, 4, 5, 7, 9, 11, 12, 13, 15, 19, 21, 22, 23, 25, 26, 27, 28, 30, 32, 33, 34, 39, 40, 41, 44, 45, 46, 47, 48, 49, 54, 55, 56, 57, 58, 60, 61, 63, 64, 65, 66, 67, 69, 70, 71, 73, 78, 83, 88, 89, 90, 92, 93, 94, 95, 96, 101, 102, 104, 105, 115, 118, 119, 120, 121, 123, 124, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 151, 154, 162, 165, 168, 169, 171, 172, 173, 174, 175, 176, 178, 179, 181, 182, 184, 188, 189, 191, 193, 195, 197, 198, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 213, 214, 221, 222, 224, 226, 227, 229, 230, 231, 232, 234, 236, 238, 240, 245, 246, 247, 249, 250, 252, 253, 259, 263, 264, 265, 266, 268, 269, 280, 281, 283, 285, 286, 287, 290, 291, 292], "can": [0, 2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 26, 30, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53, 54, 55, 56, 57, 58, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 101, 104, 105, 106, 107, 108, 109, 111, 112, 113, 115, 117, 119, 120, 121, 123, 124, 125, 126, 128, 129, 132, 133, 134, 137, 139, 140, 141, 142, 143, 144, 146, 147, 151, 152, 153, 158, 160, 163, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 188, 189, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 226, 227, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 243, 245, 246, 247, 249, 250, 252, 253, 255, 262, 263, 264, 265, 266, 268, 269, 280, 281, 283, 285, 286, 287, 289, 290, 291, 292], "incorpor": [0, 2, 19, 202, 226], "u": [0, 8, 9, 15, 19, 21, 22, 23, 29, 38, 44, 45, 46, 56, 61, 64, 65, 66, 68, 79, 82, 87, 90, 92, 98, 101, 105, 120, 123, 124, 125, 128, 129, 131, 133, 136, 139, 140, 141, 143, 146, 147, 151, 152, 163, 168, 174, 184, 188, 189, 193, 195, 197, 199, 200, 201, 202, 203, 207, 209, 210, 213, 214, 221, 224, 226, 227, 230, 231, 232, 233, 234, 239, 253, 266, 283, 285, 286, 287], "benefit": [0, 2, 23, 27, 46, 119, 143, 194], "end": [0, 2, 4, 7, 11, 12, 13, 15, 19, 21, 22, 23, 26, 30, 32, 38, 44, 45, 46, 55, 56, 61, 63, 64, 65, 66, 70, 71, 73, 75, 77, 81, 90, 93, 95, 96, 98, 101, 105, 107, 108, 109, 111, 128, 131, 133, 136, 141, 142, 143, 184, 188, 189, 194, 195, 198, 199, 203, 207, 214, 217, 220, 222, 223, 227, 230, 231, 232, 233, 234, 235, 236, 245, 247, 248, 250, 252, 255, 266, 281, 285, 287, 291], "develop": [0, 3, 4, 5, 6, 10, 14, 19, 21, 23, 35, 44, 47, 63, 107, 146, 183, 200, 201, 204, 207, 232, 233, 285, 288], "team": [0, 3, 11], "member": [0, 4, 13, 21, 25, 45, 54, 56, 66, 88, 111, 201, 222, 239], "list": [0, 2, 3, 4, 5, 9, 11, 12, 16, 21, 28, 29, 30, 31, 32, 33, 34, 36, 38, 41, 44, 45, 46, 47, 48, 49, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 87, 88, 90, 92, 93, 94, 95, 96, 98, 101, 104, 105, 106, 107, 108, 115, 120, 123, 124, 128, 131, 133, 136, 140, 141, 142, 146, 147, 152, 163, 165, 168, 169, 173, 174, 176, 177, 179, 181, 189, 193, 198, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 220, 222, 223, 224, 226, 227, 230, 231, 232, 233, 234, 235, 238, 239, 240, 243, 245, 246, 247, 248, 249, 250, 252, 253, 255, 280, 284, 285, 287, 290, 291, 292], "github": [0, 2, 3, 5, 7, 8, 10, 11, 13, 29, 33, 36, 44, 65, 69, 81, 92, 101, 183, 222, 233, 287], "found": [0, 2, 3, 4, 5, 8, 11, 12, 21, 22, 25, 29, 44, 47, 48, 56, 57, 59, 61, 63, 65, 66, 67, 75, 76, 81, 90, 92, 101, 105, 115, 121, 123, 124, 125, 143, 146, 183, 197, 201, 202, 204, 209, 210, 211, 214, 216, 217, 220, 221, 224, 227, 230, 231, 232, 233, 234, 238, 252, 253, 255, 256, 290], "zotero": 0, "start": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 23, 31, 35, 36, 45, 46, 48, 49, 54, 55, 56, 57, 61, 64, 65, 66, 67, 73, 95, 96, 98, 101, 104, 105, 106, 108, 109, 111, 129, 131, 141, 142, 174, 175, 178, 182, 197, 198, 200, 204, 207, 209, 210, 214, 217, 220, 222, 223, 224, 227, 230, 232, 233, 234, 235, 238, 245, 246, 252, 254, 255, 265, 279, 280, 283, 285], "sympi": [1, 2, 3, 5, 6, 10, 11, 12, 14, 16, 17, 21, 22, 23, 24, 25, 26, 28, 30, 31, 32, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 264, 265, 267, 268, 269, 270, 274, 276, 277, 279, 281, 283, 284, 286, 287, 288, 289, 290, 291, 292], "mode": [1, 8, 25, 65, 93, 107, 151, 174, 194, 210, 214, 245, 256], "set": [1, 2, 3, 4, 5, 7, 8, 11, 12, 14, 15, 17, 19, 20, 21, 22, 25, 27, 28, 34, 37, 38, 40, 44, 45, 46, 47, 48, 53, 54, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 78, 80, 82, 83, 84, 87, 88, 90, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 105, 107, 108, 109, 115, 119, 123, 124, 128, 129, 131, 132, 133, 138, 140, 141, 142, 143, 146, 147, 163, 169, 174, 179, 181, 184, 186, 187, 188, 189, 191, 193, 194, 195, 197, 200, 201, 202, 203, 204, 207, 209, 210, 213, 214, 215, 216, 221, 223, 224, 226, 227, 229, 230, 231, 232, 234, 238, 239, 240, 243, 245, 246, 247, 248, 252, 253, 259, 262, 264, 270, 273, 280, 282, 291], "sympy_debug": [1, 92, 255], "variabl": [1, 2, 4, 5, 11, 12, 13, 14, 17, 19, 22, 23, 25, 26, 28, 29, 31, 33, 37, 38, 39, 41, 42, 44, 46, 47, 60, 64, 65, 66, 69, 70, 71, 72, 73, 74, 75, 82, 84, 90, 92, 93, 95, 96, 101, 107, 108, 109, 111, 113, 115, 128, 129, 136, 138, 146, 147, 153, 168, 173, 177, 179, 182, 188, 189, 191, 195, 202, 204, 205, 207, 209, 210, 211, 214, 215, 220, 221, 226, 227, 229, 230, 231, 232, 233, 241, 245, 247, 248, 249, 253, 259, 262, 263, 265, 266, 268, 281, 283, 285, 287, 292], "For": [1, 2, 3, 4, 5, 8, 9, 11, 12, 13, 14, 15, 18, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 53, 54, 55, 56, 57, 58, 61, 64, 65, 66, 67, 68, 69, 70, 71, 73, 77, 79, 80, 83, 86, 88, 89, 90, 94, 95, 96, 101, 105, 106, 107, 108, 109, 115, 117, 121, 123, 124, 125, 129, 133, 139, 140, 141, 142, 143, 144, 146, 148, 162, 163, 168, 172, 174, 176, 177, 178, 179, 181, 183, 184, 185, 188, 189, 193, 194, 195, 197, 198, 200, 201, 202, 204, 205, 207, 209, 210, 211, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 226, 227, 229, 230, 232, 233, 234, 235, 238, 239, 240, 241, 245, 246, 247, 249, 250, 252, 253, 256, 257, 259, 261, 264, 266, 268, 269, 280, 281, 283, 286, 287, 291, 292], "instanc": [1, 3, 4, 5, 12, 13, 14, 18, 21, 22, 23, 39, 40, 41, 43, 45, 46, 48, 56, 58, 60, 65, 67, 69, 70, 71, 73, 78, 81, 82, 83, 88, 89, 92, 93, 96, 98, 101, 105, 107, 108, 116, 120, 124, 128, 129, 147, 152, 159, 163, 169, 173, 174, 176, 178, 179, 189, 191, 194, 195, 200, 204, 205, 209, 210, 211, 212, 214, 222, 224, 226, 230, 232, 233, 234, 238, 239, 240, 245, 246, 247, 249, 252, 253, 259, 261, 262, 263, 264, 266, 268, 280, 281, 286, 291, 292], "unix": [1, 245, 246], "would": [1, 3, 4, 5, 9, 11, 12, 13, 14, 15, 17, 19, 21, 22, 23, 26, 29, 31, 36, 45, 46, 47, 54, 56, 57, 64, 65, 66, 70, 71, 77, 81, 90, 92, 96, 101, 105, 107, 108, 115, 116, 117, 119, 121, 123, 129, 133, 143, 146, 174, 176, 179, 184, 188, 189, 195, 197, 200, 203, 204, 205, 207, 210, 211, 213, 214, 215, 217, 222, 223, 224, 226, 227, 230, 231, 232, 233, 234, 236, 238, 239, 245, 247, 249, 252, 253, 255, 256, 264, 265, 266, 268, 280, 281, 283, 285, 286, 287, 290, 291, 292], "do": [1, 2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 19, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 35, 36, 37, 40, 41, 42, 44, 45, 46, 47, 48, 57, 61, 64, 65, 66, 67, 68, 71, 73, 75, 77, 80, 81, 84, 90, 92, 93, 95, 96, 98, 99, 101, 102, 105, 106, 112, 115, 119, 123, 124, 128, 129, 130, 132, 133, 137, 140, 141, 144, 146, 151, 154, 159, 163, 168, 171, 173, 175, 181, 183, 184, 187, 190, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 213, 214, 215, 217, 221, 222, 223, 224, 226, 227, 230, 231, 232, 236, 239, 240, 243, 245, 246, 248, 250, 252, 253, 255, 262, 264, 265, 266, 268, 280, 281, 283, 284, 285, 286, 287, 289, 291], "true": [1, 2, 4, 12, 13, 14, 15, 17, 18, 21, 22, 23, 25, 27, 28, 29, 30, 32, 33, 34, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 51, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 84, 86, 87, 90, 92, 93, 95, 96, 97, 98, 101, 102, 105, 107, 108, 109, 113, 115, 116, 117, 118, 119, 121, 123, 124, 125, 129, 131, 133, 146, 150, 151, 160, 163, 164, 171, 173, 174, 177, 178, 179, 182, 188, 189, 190, 191, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 221, 222, 223, 224, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 243, 245, 246, 247, 248, 250, 252, 253, 255, 259, 262, 263, 264, 265, 266, 269, 280, 281, 283, 285, 286, 287, 290, 291, 292], "bin": [1, 2, 4, 8, 9, 11, 12, 93, 214, 245, 252], "isympi": [1, 2, 14, 15, 93], "window": [1, 9, 11, 255], "now": [1, 2, 5, 8, 9, 11, 12, 13, 15, 19, 21, 22, 23, 25, 36, 45, 46, 57, 65, 66, 70, 73, 76, 81, 82, 87, 89, 90, 94, 101, 105, 115, 120, 123, 128, 129, 132, 134, 137, 139, 146, 147, 182, 184, 189, 194, 197, 198, 201, 202, 204, 207, 210, 211, 215, 222, 223, 224, 226, 227, 230, 232, 233, 234, 235, 240, 245, 246, 253, 264, 265, 283, 285, 286, 291, 292], "just": [1, 3, 4, 5, 11, 12, 13, 14, 15, 21, 22, 23, 27, 29, 32, 36, 42, 45, 46, 56, 63, 65, 66, 67, 71, 88, 90, 92, 93, 94, 95, 101, 105, 106, 117, 119, 120, 129, 133, 137, 143, 144, 146, 159, 164, 169, 179, 184, 188, 194, 195, 197, 201, 203, 204, 205, 207, 209, 213, 214, 221, 222, 223, 224, 226, 230, 233, 235, 243, 245, 247, 248, 250, 265, 266, 268, 280, 281, 283, 284, 285, 286, 287, 291, 292], "limit": [1, 3, 13, 15, 29, 30, 34, 36, 42, 44, 46, 64, 65, 67, 69, 70, 71, 73, 74, 77, 85, 87, 92, 93, 95, 101, 105, 113, 144, 168, 174, 177, 194, 200, 205, 207, 210, 211, 214, 217, 218, 220, 222, 226, 227, 229, 230, 231, 232, 234, 239, 246, 249, 252, 253, 255, 258, 259, 269, 271, 277, 282, 283, 285, 287], "function": [1, 2, 3, 5, 7, 11, 14, 17, 18, 19, 21, 22, 24, 26, 28, 30, 33, 35, 39, 40, 41, 43, 44, 45, 47, 48, 56, 57, 60, 61, 63, 66, 67, 68, 69, 70, 74, 75, 76, 77, 82, 85, 86, 89, 91, 92, 93, 94, 96, 98, 100, 104, 106, 108, 110, 112, 113, 115, 116, 117, 121, 122, 123, 127, 128, 129, 132, 133, 134, 135, 139, 141, 142, 146, 151, 152, 153, 154, 158, 163, 164, 165, 168, 173, 174, 175, 176, 177, 178, 179, 182, 183, 188, 189, 192, 193, 194, 196, 198, 199, 201, 206, 207, 208, 209, 211, 212, 215, 216, 217, 218, 219, 220, 221, 222, 223, 226, 228, 229, 232, 233, 234, 236, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 264, 265, 267, 268, 269, 270, 271, 274, 276, 277, 280, 281, 282, 283, 284, 285, 286, 287, 289, 292], "get": [1, 3, 4, 5, 8, 11, 12, 13, 18, 19, 21, 22, 23, 29, 31, 32, 33, 36, 37, 40, 41, 44, 45, 46, 48, 49, 54, 55, 57, 58, 60, 61, 64, 65, 66, 67, 69, 70, 71, 73, 78, 88, 90, 92, 94, 98, 101, 105, 107, 108, 113, 115, 118, 124, 129, 132, 133, 141, 142, 143, 144, 146, 151, 152, 159, 163, 168, 173, 174, 175, 176, 181, 183, 184, 198, 202, 204, 205, 207, 209, 210, 211, 212, 213, 214, 216, 222, 223, 224, 226, 227, 230, 231, 232, 233, 234, 235, 236, 240, 241, 246, 252, 253, 254, 256, 259, 263, 280, 283, 285, 286, 287, 290, 291, 292], "nice": [1, 4, 9, 36, 65, 77, 101, 105, 129, 143, 146, 200, 214, 224, 255, 286], "print": [1, 3, 4, 5, 7, 11, 12, 14, 15, 19, 21, 22, 25, 28, 29, 31, 36, 39, 40, 41, 42, 44, 45, 47, 48, 49, 54, 56, 57, 64, 65, 66, 69, 70, 71, 73, 92, 94, 95, 98, 101, 102, 105, 106, 107, 108, 109, 115, 122, 124, 129, 131, 139, 145, 151, 159, 172, 173, 177, 179, 189, 192, 196, 198, 200, 203, 204, 205, 207, 209, 210, 220, 221, 223, 224, 226, 230, 232, 239, 241, 245, 247, 252, 253, 255, 259, 263, 270, 276, 278, 281, 282, 283, 284, 285, 286, 287, 291], "tree": [1, 7, 13, 14, 18, 56, 59, 65, 107, 121, 129, 171, 174, 189, 210, 221, 223, 226, 233, 236, 238, 249, 252, 255, 282], "which": [1, 2, 3, 4, 5, 8, 9, 11, 12, 13, 14, 15, 19, 21, 22, 23, 25, 26, 28, 30, 31, 32, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 54, 55, 56, 57, 58, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 78, 79, 80, 81, 84, 87, 88, 89, 90, 92, 93, 94, 95, 96, 98, 99, 101, 104, 105, 107, 108, 109, 111, 112, 113, 115, 116, 117, 119, 120, 121, 123, 124, 126, 128, 129, 131, 132, 134, 137, 139, 140, 141, 142, 143, 144, 146, 147, 148, 150, 152, 153, 165, 168, 174, 175, 176, 177, 179, 183, 184, 185, 188, 189, 191, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213, 215, 216, 217, 220, 221, 222, 223, 224, 226, 227, 229, 230, 231, 232, 233, 234, 235, 238, 240, 245, 246, 247, 248, 249, 250, 252, 253, 255, 259, 261, 264, 268, 269, 280, 281, 283, 284, 285, 286, 287, 288, 290, 291, 292], "veri": [1, 2, 3, 4, 11, 12, 13, 14, 15, 17, 18, 21, 23, 25, 46, 61, 65, 66, 69, 70, 75, 77, 83, 87, 90, 92, 95, 101, 105, 115, 119, 129, 133, 146, 151, 184, 197, 198, 201, 204, 207, 209, 210, 211, 213, 214, 215, 221, 222, 223, 224, 226, 227, 230, 232, 233, 234, 245, 246, 247, 253, 280, 283, 286, 291], "There": [2, 3, 4, 5, 7, 8, 11, 12, 13, 14, 15, 18, 21, 22, 23, 25, 28, 29, 33, 46, 47, 56, 57, 58, 59, 62, 64, 65, 66, 69, 70, 73, 89, 90, 92, 93, 94, 95, 98, 101, 105, 108, 109, 111, 115, 119, 128, 139, 141, 143, 144, 152, 169, 174, 189, 194, 197, 198, 200, 204, 205, 206, 207, 209, 210, 211, 214, 215, 216, 222, 223, 224, 226, 227, 230, 232, 233, 234, 236, 239, 248, 249, 252, 253, 255, 264, 280, 281, 283, 285, 286, 290, 291], "sever": [2, 3, 4, 11, 12, 13, 14, 18, 21, 23, 25, 29, 36, 46, 50, 56, 57, 64, 65, 69, 70, 72, 73, 77, 90, 92, 105, 121, 140, 184, 186, 200, 202, 204, 207, 209, 213, 214, 215, 221, 222, 230, 234, 245, 247, 257, 270, 283, 287, 290], "packag": [2, 7, 8, 9, 11, 12, 26, 30, 31, 36, 93, 106, 107, 112, 139, 146, 194, 214, 245, 256, 265, 266, 285], "instal": [2, 5, 12, 14, 15, 69, 106, 204, 205, 214, 246, 253, 284, 290], "enabl": [2, 5, 9, 14, 23, 36, 65, 92, 93, 105, 109, 129, 131, 179, 189, 194, 214, 230, 234, 245, 250, 253, 287, 290, 291], "certain": [2, 5, 12, 14, 23, 34, 36, 43, 45, 46, 48, 56, 63, 65, 69, 73, 81, 90, 92, 105, 107, 143, 189, 190, 201, 204, 207, 209, 214, 215, 221, 224, 226, 227, 230, 232, 233, 234, 236, 247, 248, 253, 259, 262, 268, 291], "most": [2, 3, 4, 5, 7, 11, 12, 13, 14, 15, 18, 19, 21, 22, 23, 25, 27, 29, 30, 31, 32, 33, 34, 36, 39, 40, 41, 44, 45, 46, 47, 56, 57, 64, 65, 66, 69, 71, 75, 77, 92, 95, 96, 97, 98, 99, 101, 103, 104, 105, 106, 107, 115, 119, 123, 124, 129, 137, 140, 143, 144, 147, 181, 183, 188, 189, 193, 199, 200, 201, 202, 204, 205, 207, 209, 210, 211, 212, 213, 214, 221, 222, 224, 227, 230, 231, 232, 233, 234, 243, 246, 247, 248, 249, 250, 252, 253, 255, 262, 264, 280, 283, 285, 286, 287, 289, 290, 291], "contributor": [2, 5, 6, 7, 8, 11, 13, 23], "need": [2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 37, 38, 40, 41, 44, 45, 46, 50, 56, 57, 61, 63, 64, 65, 66, 67, 70, 71, 73, 76, 80, 81, 88, 89, 90, 92, 93, 95, 96, 101, 105, 106, 107, 108, 109, 111, 115, 119, 124, 126, 128, 129, 131, 132, 133, 134, 136, 137, 138, 140, 141, 142, 143, 144, 147, 148, 159, 163, 171, 177, 182, 188, 189, 194, 197, 198, 201, 202, 203, 204, 205, 207, 209, 210, 211, 213, 214, 221, 222, 224, 226, 227, 229, 230, 232, 233, 234, 238, 239, 240, 241, 243, 246, 247, 248, 249, 250, 252, 255, 259, 263, 265, 266, 269, 280, 281, 283, 286, 287, 289, 291], "ani": [2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 17, 18, 21, 22, 23, 25, 27, 28, 29, 32, 36, 42, 43, 44, 45, 46, 47, 54, 55, 56, 57, 63, 64, 65, 66, 67, 69, 70, 71, 73, 75, 76, 77, 80, 81, 82, 90, 92, 93, 95, 96, 99, 101, 102, 105, 107, 108, 109, 111, 115, 117, 120, 123, 124, 125, 126, 128, 129, 139, 142, 143, 144, 147, 148, 152, 165, 168, 173, 174, 177, 179, 181, 184, 189, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 214, 215, 220, 221, 222, 223, 224, 226, 227, 230, 231, 232, 234, 236, 239, 240, 245, 246, 248, 249, 250, 252, 253, 259, 263, 264, 265, 266, 268, 269, 280, 281, 283, 286, 287, 290, 291, 292], "mention": [2, 3, 4, 23, 25, 32, 56, 90, 92, 115, 131, 147, 148, 195, 224, 227, 230, 234, 263, 264, 265, 266, 287], "below": [2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 15, 21, 23, 25, 29, 32, 33, 34, 36, 44, 45, 46, 55, 56, 57, 65, 66, 70, 72, 73, 74, 75, 81, 82, 88, 90, 92, 96, 101, 104, 105, 107, 108, 109, 115, 120, 123, 124, 126, 128, 129, 131, 133, 134, 135, 140, 141, 142, 143, 144, 146, 173, 179, 184, 189, 198, 199, 200, 201, 203, 210, 214, 215, 217, 223, 226, 227, 229, 230, 231, 232, 233, 234, 245, 247, 252, 253, 255, 264, 266, 269, 270, 287, 291], "except": [2, 3, 4, 11, 13, 14, 15, 19, 21, 22, 23, 30, 34, 44, 46, 56, 57, 65, 66, 69, 70, 71, 73, 90, 92, 105, 137, 183, 185, 199, 201, 203, 204, 205, 209, 210, 211, 212, 214, 223, 226, 227, 230, 231, 233, 238, 243, 245, 247, 248, 251, 252, 253, 263, 266, 278, 280, 283, 286, 287], "unless": [2, 4, 11, 12, 14, 21, 23, 39, 41, 44, 46, 56, 64, 65, 66, 70, 73, 80, 81, 90, 101, 104, 152, 197, 198, 202, 204, 209, 210, 214, 219, 222, 223, 230, 232, 245, 249, 252, 253, 255, 259, 268, 281, 287, 291], "thei": [2, 3, 4, 5, 11, 12, 13, 14, 15, 17, 21, 22, 23, 25, 30, 32, 33, 34, 36, 42, 45, 46, 47, 53, 55, 56, 57, 63, 64, 65, 66, 67, 70, 71, 73, 75, 78, 79, 80, 81, 82, 87, 90, 92, 93, 95, 96, 98, 99, 101, 104, 105, 107, 119, 123, 124, 126, 128, 129, 131, 137, 139, 141, 142, 143, 146, 147, 153, 158, 163, 168, 171, 176, 181, 182, 184, 185, 189, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 214, 215, 220, 221, 223, 224, 226, 227, 230, 231, 232, 233, 234, 235, 236, 240, 243, 245, 247, 249, 252, 253, 255, 259, 266, 268, 281, 283, 284, 285, 286, 287, 291], "intend": [2, 3, 4, 7, 9, 11, 12, 13, 17, 21, 65, 66, 76, 85, 90, 105, 107, 121, 174, 204, 205, 209, 212, 227, 230, 231, 243, 248, 255, 280], "part": [2, 3, 4, 5, 7, 11, 12, 13, 14, 21, 22, 23, 25, 38, 43, 56, 57, 64, 65, 66, 70, 71, 73, 81, 88, 90, 92, 95, 96, 98, 105, 115, 119, 120, 123, 124, 128, 129, 131, 137, 139, 140, 144, 146, 163, 175, 179, 188, 198, 202, 204, 205, 207, 209, 210, 211, 213, 214, 215, 222, 224, 226, 227, 230, 232, 245, 247, 249, 252, 281, 286, 291], "those": [2, 4, 11, 12, 13, 14, 15, 17, 21, 22, 25, 29, 33, 34, 37, 42, 45, 46, 47, 48, 56, 57, 63, 64, 65, 66, 69, 78, 79, 90, 92, 95, 101, 104, 105, 119, 123, 124, 131, 137, 140, 152, 176, 188, 191, 194, 197, 198, 200, 204, 205, 207, 209, 210, 212, 213, 214, 220, 222, 226, 230, 231, 232, 233, 234, 240, 243, 245, 249, 252, 259, 262, 283, 285, 291], "everi": [2, 3, 4, 7, 11, 12, 14, 21, 23, 25, 29, 35, 40, 41, 42, 45, 51, 53, 56, 57, 65, 66, 80, 92, 94, 96, 101, 105, 115, 144, 183, 195, 197, 198, 200, 201, 202, 204, 205, 207, 209, 214, 219, 222, 224, 226, 227, 230, 233, 234, 236, 263, 266, 268, 284, 286, 287, 291], "conda": [2, 8, 9, 36, 107], "via": [2, 8, 9, 14, 19, 23, 30, 34, 36, 39, 40, 41, 56, 57, 65, 70, 73, 90, 92, 95, 101, 105, 106, 107, 108, 189, 199, 201, 205, 207, 209, 210, 213, 214, 233, 243, 246, 247, 259, 268, 286], "forg": [2, 8, 107], "pip": [2, 8, 9, 12, 36, 107], "doe": [2, 4, 5, 7, 9, 11, 12, 13, 14, 18, 21, 22, 23, 25, 26, 32, 33, 34, 35, 36, 37, 40, 41, 44, 45, 46, 47, 56, 57, 61, 63, 64, 65, 66, 67, 69, 71, 73, 75, 76, 79, 81, 90, 92, 95, 96, 101, 104, 105, 107, 117, 119, 121, 129, 131, 136, 140, 144, 159, 163, 169, 173, 175, 178, 197, 198, 200, 202, 203, 204, 205, 207, 209, 210, 211, 214, 221, 222, 223, 224, 226, 227, 229, 230, 232, 235, 239, 240, 243, 245, 247, 249, 252, 253, 255, 259, 261, 264, 280, 281, 283, 286, 287, 290, 291, 292], "themselv": [2, 5, 12, 13, 23, 42, 45, 57, 61, 63, 65, 92, 105, 139, 140, 204, 205, 209, 220, 234, 240, 249, 252, 255, 291], "incomplet": [2, 4, 5, 65, 70, 73, 202, 204, 210, 214, 216, 232, 233], "main": [2, 4, 5, 7, 9, 11, 13, 15, 31, 41, 42, 46, 65, 71, 90, 96, 101, 104, 129, 137, 177, 194, 198, 200, 201, 205, 214, 221, 230, 233, 239, 246, 291, 292], "webpag": [2, 5], "more": [2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 33, 34, 36, 37, 38, 41, 42, 44, 45, 46, 47, 48, 51, 55, 56, 57, 62, 64, 65, 66, 67, 69, 70, 71, 72, 73, 77, 78, 79, 80, 81, 82, 83, 87, 90, 92, 95, 96, 98, 99, 101, 102, 104, 105, 106, 107, 113, 115, 119, 123, 124, 125, 129, 131, 133, 135, 137, 139, 141, 142, 143, 144, 146, 148, 151, 163, 167, 168, 173, 176, 177, 178, 179, 184, 188, 189, 193, 194, 198, 199, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 223, 224, 226, 227, 230, 231, 232, 233, 234, 245, 247, 248, 249, 252, 253, 255, 259, 263, 267, 274, 276, 280, 281, 283, 284, 286, 287, 289, 290, 291, 292], "complet": [2, 3, 4, 9, 11, 12, 13, 14, 15, 21, 29, 32, 41, 46, 65, 66, 67, 69, 71, 72, 73, 81, 90, 92, 101, 105, 119, 124, 125, 133, 139, 146, 165, 168, 169, 198, 207, 209, 210, 211, 215, 221, 226, 227, 230, 233, 234, 245, 247, 255, 285, 286, 291], "io": [2, 5, 93, 214, 253], "ha": [2, 3, 4, 5, 7, 8, 11, 12, 13, 14, 15, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 33, 34, 42, 44, 45, 46, 47, 48, 49, 54, 55, 56, 57, 59, 61, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 77, 78, 80, 81, 82, 88, 90, 92, 94, 95, 96, 98, 101, 102, 104, 105, 106, 108, 109, 111, 115, 116, 120, 123, 124, 129, 131, 133, 139, 144, 146, 152, 153, 163, 164, 173, 176, 181, 184, 188, 189, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 219, 221, 222, 224, 226, 227, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 245, 246, 247, 248, 249, 250, 252, 255, 259, 261, 263, 264, 266, 268, 269, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292], "one": [2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 17, 19, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 35, 37, 38, 41, 42, 44, 45, 46, 48, 49, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 73, 75, 76, 77, 78, 79, 81, 82, 87, 88, 89, 90, 92, 93, 94, 95, 96, 98, 100, 101, 104, 105, 106, 107, 108, 109, 112, 113, 115, 116, 119, 120, 123, 124, 126, 129, 130, 133, 143, 144, 146, 148, 151, 152, 153, 159, 164, 173, 177, 179, 181, 182, 183, 184, 187, 188, 189, 193, 194, 195, 197, 198, 199, 200, 201, 202, 204, 205, 207, 209, 210, 211, 212, 213, 214, 215, 221, 222, 223, 224, 226, 227, 230, 231, 232, 233, 234, 235, 238, 240, 241, 245, 246, 247, 249, 252, 253, 255, 259, 264, 266, 268, 279, 280, 281, 283, 285, 286, 287, 289, 290, 291], "mpmath": [2, 8, 9, 12, 14, 23, 30, 31, 46, 70, 73, 101, 106, 146, 204, 205, 214, 222, 232, 248, 253], "arbitrari": [2, 4, 13, 14, 15, 21, 23, 25, 29, 31, 33, 34, 44, 50, 57, 58, 64, 65, 66, 69, 70, 73, 76, 77, 79, 95, 96, 101, 109, 140, 144, 165, 168, 198, 200, 201, 204, 205, 207, 209, 211, 226, 230, 231, 232, 240, 250, 253, 259, 261, 280, 281, 286, 291, 292], "precis": [2, 3, 4, 14, 15, 21, 22, 23, 25, 29, 46, 56, 65, 68, 69, 70, 73, 81, 92, 101, 105, 113, 144, 199, 201, 204, 205, 209, 210, 211, 214, 221, 226, 227, 232, 233, 246, 247, 255, 280, 291], "arithmet": [2, 46, 65, 66, 69, 96, 101, 105, 168, 175, 199, 200, 201, 203, 204, 205, 207, 208, 212, 215], "under": [2, 3, 4, 8, 12, 14, 15, 21, 22, 40, 41, 43, 44, 46, 47, 55, 56, 61, 63, 73, 83, 90, 92, 94, 95, 101, 105, 107, 108, 109, 148, 174, 199, 201, 202, 209, 210, 214, 221, 222, 224, 227, 230, 232, 233, 234, 240, 243, 285, 291], "hood": [2, 14], "whenev": [2, 3, 12, 13, 14, 15, 23, 63, 90, 92, 101, 186, 200, 201, 202, 216, 221, 224, 234, 281, 283, 286], "calcul": [2, 15, 19, 21, 31, 32, 38, 44, 47, 57, 63, 65, 66, 67, 68, 69, 71, 73, 75, 77, 78, 79, 81, 82, 92, 96, 98, 101, 105, 108, 109, 117, 119, 120, 123, 124, 128, 131, 132, 133, 148, 151, 152, 155, 158, 174, 175, 176, 177, 179, 180, 188, 189, 190, 191, 193, 195, 197, 198, 199, 200, 201, 203, 204, 205, 207, 209, 210, 211, 216, 221, 230, 234, 238, 246, 247, 253, 259, 262, 266, 268, 287, 290], "float": [2, 12, 14, 21, 23, 27, 46, 56, 65, 71, 73, 80, 82, 92, 93, 96, 101, 105, 107, 113, 115, 146, 152, 194, 200, 204, 205, 214, 226, 232, 234, 245, 253, 255, 280, 283], "point": [2, 3, 4, 5, 12, 14, 15, 19, 21, 29, 31, 32, 36, 38, 44, 46, 47, 56, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 84, 87, 88, 89, 90, 92, 101, 105, 108, 109, 111, 113, 120, 123, 124, 125, 126, 128, 129, 131, 133, 135, 136, 137, 138, 140, 141, 142, 143, 144, 146, 147, 159, 181, 184, 190, 193, 195, 198, 200, 201, 204, 205, 207, 209, 210, 214, 216, 220, 221, 222, 230, 232, 233, 234, 246, 249, 252, 253, 255, 259, 262, 264, 265, 266, 268, 269, 277, 280, 281, 283, 286], "valu": [2, 3, 4, 5, 12, 13, 14, 15, 19, 21, 23, 25, 28, 29, 30, 31, 32, 33, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 54, 56, 57, 61, 64, 65, 66, 67, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 87, 88, 90, 92, 93, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 113, 115, 117, 120, 123, 124, 125, 126, 128, 129, 131, 143, 146, 148, 152, 155, 158, 163, 165, 168, 171, 173, 174, 175, 176, 179, 180, 182, 184, 189, 190, 193, 195, 197, 198, 199, 200, 202, 203, 204, 205, 207, 209, 210, 211, 212, 214, 215, 220, 221, 222, 223, 226, 227, 229, 230, 231, 232, 233, 234, 235, 238, 239, 240, 241, 245, 247, 248, 252, 253, 255, 262, 264, 266, 269, 281, 283, 286], "g": [2, 3, 5, 8, 9, 11, 12, 13, 15, 21, 22, 23, 31, 32, 34, 44, 45, 46, 47, 50, 53, 55, 56, 57, 61, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 77, 81, 82, 83, 88, 91, 92, 94, 95, 96, 101, 105, 107, 108, 115, 116, 120, 123, 126, 128, 129, 131, 133, 134, 136, 137, 138, 143, 144, 146, 147, 159, 163, 168, 174, 176, 177, 179, 182, 184, 185, 189, 195, 200, 201, 202, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 226, 227, 230, 231, 232, 233, 234, 235, 238, 239, 240, 245, 246, 247, 248, 250, 252, 253, 254, 255, 268, 271, 281, 286, 290, 291, 292], "evalf": [2, 4, 14, 15, 21, 25, 31, 34, 46, 64, 69, 70, 71, 73, 84, 87, 88, 96, 101, 107, 129, 131, 146, 161, 205, 210, 214, 221, 222, 226, 234, 246, 253, 282], "cannot": [2, 3, 4, 5, 12, 13, 14, 15, 18, 22, 23, 25, 28, 31, 36, 39, 40, 41, 42, 43, 44, 46, 57, 62, 64, 65, 67, 69, 71, 75, 77, 78, 80, 82, 87, 92, 94, 97, 99, 101, 103, 105, 115, 174, 182, 184, 197, 198, 200, 205, 207, 209, 210, 211, 214, 221, 222, 226, 227, 229, 230, 232, 233, 234, 235, 243, 245, 246, 247, 252, 256, 259, 261, 285, 286, 287, 291, 292], "without": [2, 3, 4, 5, 11, 12, 13, 14, 15, 21, 23, 36, 40, 42, 43, 46, 64, 65, 66, 67, 69, 73, 90, 92, 93, 96, 98, 101, 115, 116, 123, 129, 135, 137, 142, 143, 179, 183, 184, 188, 189, 190, 197, 200, 203, 204, 207, 210, 214, 216, 222, 223, 224, 226, 227, 230, 231, 232, 233, 234, 236, 239, 240, 243, 245, 246, 247, 250, 252, 253, 255, 262, 265, 287, 291], "fail": [2, 3, 4, 5, 8, 11, 13, 21, 22, 23, 25, 46, 56, 57, 61, 64, 65, 69, 71, 89, 90, 92, 93, 101, 102, 105, 107, 131, 169, 174, 194, 200, 203, 204, 205, 207, 209, 210, 214, 221, 224, 230, 232, 234, 243, 245, 252, 253, 287], "import": [2, 3, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 113, 115, 116, 117, 118, 119, 120, 121, 123, 124, 126, 128, 129, 131, 132, 133, 134, 136, 137, 138, 140, 141, 142, 143, 144, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 171, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 188, 189, 190, 191, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 243, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 259, 261, 262, 263, 264, 265, 266, 269, 280, 281, 283, 285, 286, 287, 289, 290, 291, 292], "If": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 54, 56, 57, 61, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 87, 88, 90, 92, 93, 94, 95, 96, 98, 101, 102, 104, 105, 106, 107, 108, 113, 115, 116, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 141, 142, 143, 144, 146, 147, 152, 156, 160, 163, 169, 173, 174, 175, 176, 177, 179, 183, 187, 188, 189, 190, 191, 193, 194, 195, 198, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 226, 227, 230, 231, 232, 233, 234, 235, 238, 239, 240, 241, 243, 245, 246, 247, 248, 249, 250, 252, 253, 255, 259, 262, 264, 266, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292], "error": [2, 3, 4, 5, 8, 11, 12, 13, 17, 21, 22, 27, 28, 29, 30, 31, 32, 34, 37, 44, 46, 54, 57, 64, 65, 66, 71, 75, 80, 90, 92, 101, 104, 105, 107, 124, 129, 198, 199, 202, 204, 205, 207, 211, 214, 216, 222, 230, 231, 232, 233, 234, 245, 246, 247, 250, 252, 255, 259, 280], "importerror": 2, "extern": [2, 36, 93, 107, 111, 113, 131, 139, 194, 204, 205, 215, 222, 226, 234, 245, 246], "doc": [2, 3, 4, 5, 7, 11, 12, 15, 35, 46, 56, 64, 65, 81, 93, 181, 204, 206, 227, 230, 245, 246, 248, 250, 252, 259, 264, 277], "latest": [2, 9, 12, 36, 45, 248, 250, 253], "html": [2, 4, 5, 8, 11, 12, 42, 46, 49, 57, 58, 59, 65, 66, 68, 70, 71, 73, 75, 81, 82, 92, 93, 101, 105, 113, 208, 214, 217, 219, 222, 223, 227, 230, 234, 246, 248, 250, 252, 253, 287], "inform": [2, 3, 4, 5, 7, 8, 9, 11, 14, 15, 18, 21, 22, 25, 34, 35, 41, 42, 45, 46, 47, 51, 56, 57, 63, 65, 66, 70, 73, 77, 90, 92, 94, 98, 101, 106, 109, 120, 121, 123, 124, 128, 129, 131, 139, 140, 141, 143, 144, 146, 147, 174, 179, 184, 189, 194, 198, 200, 204, 209, 210, 214, 215, 221, 224, 226, 227, 232, 233, 234, 238, 239, 240, 245, 246, 247, 248, 249, 259, 264, 266, 291], "mean": [2, 3, 4, 5, 11, 12, 13, 14, 15, 21, 22, 23, 25, 33, 42, 47, 57, 64, 65, 66, 67, 83, 90, 92, 93, 95, 96, 99, 101, 105, 108, 119, 140, 179, 181, 184, 189, 194, 197, 200, 201, 202, 204, 207, 209, 213, 214, 224, 226, 227, 229, 230, 232, 233, 234, 235, 236, 238, 239, 245, 252, 264, 280, 281, 283, 285, 286, 287, 291, 292], "did": [2, 5, 11, 22, 65, 92, 105, 119, 136, 184, 207, 211, 222, 232, 243, 253, 283, 285, 291], "correctli": [2, 3, 4, 5, 8, 11, 12, 13, 22, 23, 44, 69, 90, 93, 101, 129, 131, 143, 214, 221, 227, 230], "explain": [2, 3, 4, 5, 7, 12, 21, 25, 34, 45, 61, 65, 73, 83, 88, 201, 204, 207, 209, 211, 221], "how": [2, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 25, 26, 45, 46, 48, 56, 57, 64, 65, 71, 72, 73, 77, 88, 92, 95, 96, 98, 101, 105, 107, 108, 119, 123, 124, 129, 130, 136, 141, 142, 144, 146, 150, 151, 167, 171, 174, 175, 176, 181, 182, 189, 197, 200, 201, 204, 205, 207, 209, 213, 214, 217, 221, 222, 224, 226, 227, 230, 231, 232, 234, 240, 245, 246, 247, 248, 250, 252, 253, 255, 264, 281, 283, 285, 286, 287, 288, 290, 291], "method": [2, 3, 4, 5, 8, 11, 12, 14, 15, 20, 21, 25, 27, 28, 29, 31, 32, 33, 38, 40, 41, 42, 44, 45, 46, 47, 48, 49, 56, 57, 58, 64, 65, 66, 67, 68, 69, 71, 72, 73, 76, 77, 78, 79, 81, 84, 87, 89, 90, 92, 94, 96, 97, 98, 101, 105, 106, 107, 108, 109, 110, 111, 112, 115, 116, 119, 122, 123, 126, 128, 129, 132, 134, 135, 139, 140, 144, 145, 146, 153, 156, 158, 160, 168, 169, 174, 176, 179, 181, 183, 186, 187, 188, 189, 191, 195, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 215, 216, 217, 219, 220, 221, 222, 226, 227, 230, 232, 234, 235, 237, 239, 240, 241, 245, 247, 249, 252, 253, 259, 263, 266, 269, 270, 274, 276, 280, 281, 282, 283, 286, 291], "ones": [2, 3, 13, 23, 36, 46, 56, 61, 65, 90, 92, 95, 96, 98, 101, 104, 105, 129, 152, 173, 179, 183, 203, 207, 217, 227, 230, 235, 241, 247, 255, 259, 264, 287, 290], "guid": [2, 6, 7, 8, 9, 11, 14, 16, 23, 30, 36, 45, 65, 72, 129, 143, 214, 227, 229, 230, 232, 233, 240, 284, 288, 289, 292], "automat": [2, 3, 4, 5, 8, 11, 12, 13, 14, 15, 17, 21, 28, 29, 32, 34, 45, 46, 47, 57, 65, 67, 68, 69, 70, 71, 73, 78, 80, 84, 90, 93, 95, 105, 107, 108, 124, 129, 131, 137, 165, 167, 168, 177, 179, 183, 193, 197, 200, 201, 204, 205, 209, 210, 211, 214, 217, 220, 221, 223, 224, 226, 227, 230, 232, 233, 239, 240, 245, 246, 247, 250, 253, 264, 269, 281, 283, 285, 286, 290, 291, 292], "typic": [2, 3, 12, 13, 14, 23, 61, 71, 90, 105, 115, 120, 126, 130, 144, 198, 200, 202, 207, 211, 224, 246, 247, 264], "manual": [2, 3, 5, 8, 12, 13, 14, 23, 28, 46, 47, 56, 69, 75, 92, 93, 107, 115, 126, 128, 129, 132, 143, 147, 200, 207, 214, 230, 232, 233, 248, 281, 291], "actual": [2, 3, 4, 5, 8, 9, 11, 12, 14, 15, 19, 21, 22, 23, 45, 46, 47, 54, 56, 63, 65, 66, 73, 77, 90, 92, 94, 98, 101, 105, 115, 119, 129, 131, 141, 142, 143, 194, 201, 204, 209, 214, 222, 224, 226, 227, 230, 233, 241, 245, 246, 249, 250, 252, 253, 285], "directli": [2, 3, 4, 11, 12, 13, 14, 15, 19, 21, 22, 23, 25, 36, 40, 41, 44, 45, 46, 56, 64, 65, 67, 71, 76, 96, 98, 101, 105, 129, 165, 177, 182, 189, 193, 200, 201, 203, 204, 205, 209, 210, 222, 223, 224, 226, 227, 230, 231, 232, 233, 234, 245, 246, 247, 248, 249, 250, 281, 292], "git": [2, 7, 10, 11, 12], "repositori": [2, 5, 9, 36, 227], "vast": [2, 34, 92, 206], "major": [2, 3, 5, 8, 13, 25, 34, 75, 119, 239, 285, 291], "them": [2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 18, 19, 21, 22, 23, 25, 28, 29, 30, 32, 34, 37, 40, 42, 45, 46, 54, 56, 57, 64, 65, 66, 67, 69, 70, 73, 76, 81, 83, 85, 87, 88, 90, 94, 95, 98, 101, 104, 105, 106, 119, 124, 126, 129, 131, 133, 134, 139, 141, 143, 146, 152, 156, 172, 173, 179, 181, 184, 187, 188, 189, 195, 197, 198, 201, 202, 204, 205, 207, 209, 210, 211, 213, 214, 215, 221, 222, 223, 224, 226, 227, 230, 232, 233, 235, 236, 245, 247, 249, 252, 262, 280, 281, 283, 285, 286, 291], "few": [2, 3, 8, 12, 13, 14, 21, 28, 34, 42, 55, 57, 65, 66, 92, 93, 105, 106, 131, 139, 182, 188, 194, 197, 198, 201, 209, 214, 222, 223, 224, 230, 233, 234, 247, 252, 291], "wrap": [2, 3, 4, 11, 12, 39, 40, 41, 42, 46, 54, 65, 71, 93, 106, 194, 198, 200, 203, 204, 207, 214, 217, 233, 239, 246, 250, 253, 255, 286], "addition": [2, 4, 11, 13, 65, 141, 177, 198, 207, 214, 234, 243, 250, 263], "some": [2, 3, 4, 7, 8, 9, 11, 12, 14, 15, 19, 21, 22, 23, 25, 28, 29, 30, 31, 33, 34, 36, 37, 38, 42, 45, 46, 47, 48, 53, 56, 57, 63, 64, 65, 66, 69, 70, 71, 73, 75, 76, 77, 81, 90, 92, 94, 95, 96, 98, 101, 105, 106, 107, 113, 116, 119, 120, 123, 126, 128, 129, 130, 131, 132, 133, 134, 140, 141, 143, 147, 159, 164, 168, 176, 179, 183, 184, 185, 188, 190, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 214, 216, 220, 221, 222, 223, 224, 226, 227, 229, 230, 231, 232, 234, 240, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 259, 261, 262, 264, 266, 270, 280, 281, 283, 285, 286, 287, 289, 290, 291], "skip": [2, 3, 4, 8, 15, 45, 49, 65, 96, 101, 105, 189, 209, 213, 214, 216, 230, 232, 243, 245, 281, 289, 290], "action": [2, 5, 8, 11, 56, 94, 126, 171, 174, 184, 210, 226, 233], "ci": [2, 5, 9, 11, 12, 73, 90, 214, 290], "pull": [2, 3, 4, 5, 8, 9, 12, 13, 23, 36, 46, 65, 70, 73, 178, 215, 226, 230, 233, 287, 291], "request": [2, 3, 4, 5, 8, 9, 12, 13, 21, 25, 36, 44, 65, 69, 81, 90, 105, 129, 179, 207, 210, 238, 246], "mai": [2, 3, 4, 8, 9, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 42, 44, 45, 46, 47, 48, 56, 57, 58, 64, 65, 66, 67, 69, 70, 71, 73, 75, 77, 78, 80, 81, 82, 90, 92, 93, 95, 96, 97, 101, 102, 104, 105, 107, 111, 121, 124, 125, 129, 133, 139, 143, 165, 174, 179, 180, 181, 183, 186, 189, 193, 195, 197, 200, 201, 202, 203, 207, 209, 213, 214, 215, 222, 223, 224, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 238, 240, 243, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 266, 268, 280, 281, 283, 286, 287, 291, 292], "wish": [2, 4, 11, 15, 23, 32, 36, 46, 65, 66, 69, 90, 105, 174, 188, 198, 249, 253, 281, 285, 287, 292], "local": [2, 11, 12, 37, 39, 40, 41, 65, 67, 90, 107, 136, 138, 191, 201, 207, 232, 245], "improv": [2, 3, 7, 11, 12, 13, 22, 23, 65, 90, 200, 204, 207, 208, 210, 211, 213, 215, 230, 233, 239, 281, 287], "perform": [2, 11, 12, 13, 14, 15, 18, 19, 21, 23, 43, 45, 46, 47, 56, 57, 60, 64, 65, 66, 68, 69, 71, 78, 82, 89, 92, 99, 101, 105, 106, 121, 124, 131, 133, 139, 143, 144, 146, 163, 164, 173, 176, 179, 195, 198, 202, 203, 204, 207, 209, 210, 215, 216, 217, 221, 226, 227, 230, 232, 233, 234, 235, 246, 252, 259, 261, 263, 266, 280, 281, 285, 286, 291], "gmpy2": [2, 204, 205], "wrapper": [2, 13, 14, 23, 40, 42, 46, 57, 65, 73, 101, 143, 191, 194, 203, 204, 207, 214, 221, 230, 233, 234, 246, 250, 252], "gmp": 2, "multipl": [2, 3, 4, 11, 12, 13, 14, 15, 17, 21, 23, 27, 29, 33, 34, 38, 40, 41, 42, 44, 45, 46, 47, 54, 56, 57, 61, 64, 65, 66, 70, 71, 73, 75, 80, 83, 85, 90, 92, 94, 95, 96, 98, 101, 102, 105, 107, 112, 115, 119, 131, 139, 146, 147, 163, 164, 165, 169, 176, 178, 181, 184, 185, 186, 189, 193, 197, 200, 201, 202, 203, 204, 205, 207, 208, 210, 211, 214, 219, 220, 222, 223, 224, 226, 227, 230, 231, 232, 233, 234, 235, 238, 240, 243, 247, 248, 249, 250, 252, 253, 255, 259, 264, 280, 281, 283, 284, 286, 287, 292], "larg": [2, 3, 4, 7, 11, 12, 15, 21, 25, 30, 56, 57, 65, 66, 75, 90, 92, 104, 105, 119, 125, 143, 146, 159, 184, 188, 199, 204, 205, 207, 210, 213, 214, 215, 221, 224, 226, 234, 239, 246, 253, 255, 262, 280, 285, 291], "integ": [2, 4, 5, 12, 13, 14, 15, 21, 23, 27, 28, 29, 39, 40, 41, 42, 44, 46, 47, 54, 56, 57, 58, 59, 61, 64, 65, 66, 67, 68, 69, 70, 73, 75, 78, 89, 90, 92, 93, 94, 95, 96, 98, 101, 102, 105, 107, 108, 115, 117, 123, 168, 173, 175, 176, 177, 179, 181, 189, 191, 194, 199, 200, 201, 202, 203, 205, 207, 208, 209, 210, 211, 213, 214, 216, 219, 220, 221, 222, 223, 224, 226, 227, 230, 232, 233, 234, 238, 239, 240, 246, 247, 249, 252, 255, 281, 283, 286, 290, 291], "faster": [2, 11, 21, 25, 30, 31, 46, 50, 65, 73, 96, 105, 106, 119, 121, 124, 125, 143, 203, 204, 205, 207, 209, 210, 211, 215, 217, 221, 226, 227, 230, 231, 233, 246, 249], "than": [2, 3, 4, 5, 8, 9, 11, 12, 13, 14, 15, 17, 19, 20, 21, 22, 23, 25, 27, 29, 30, 31, 32, 33, 34, 37, 38, 42, 46, 47, 48, 50, 56, 57, 58, 64, 65, 66, 69, 70, 71, 73, 74, 79, 80, 81, 83, 87, 90, 92, 94, 95, 96, 98, 101, 102, 104, 105, 106, 107, 111, 113, 115, 119, 124, 128, 129, 133, 136, 153, 159, 173, 176, 177, 179, 188, 198, 199, 202, 203, 204, 205, 207, 210, 211, 212, 214, 217, 221, 222, 223, 224, 226, 227, 229, 230, 231, 232, 233, 234, 241, 246, 247, 249, 252, 253, 255, 256, 280, 281, 283, 284, 285, 286, 287, 289, 291], "int": [2, 4, 5, 12, 13, 14, 15, 21, 22, 23, 38, 44, 46, 57, 65, 66, 67, 70, 71, 73, 74, 81, 90, 92, 93, 95, 96, 101, 102, 105, 107, 113, 115, 123, 159, 163, 164, 173, 189, 191, 193, 194, 199, 200, 204, 205, 209, 210, 211, 214, 216, 217, 219, 230, 231, 234, 246, 250, 252, 253, 255, 283, 285, 286, 290, 291], "core": [2, 3, 4, 7, 11, 12, 14, 15, 18, 21, 22, 23, 27, 42, 44, 46, 56, 66, 71, 72, 74, 82, 90, 96, 105, 107, 177, 178, 202, 204, 205, 206, 207, 209, 210, 211, 214, 221, 222, 226, 227, 230, 234, 244, 245, 246, 252, 253, 257, 270, 271, 283, 286], "oper": [2, 4, 9, 14, 21, 22, 23, 30, 31, 32, 34, 38, 42, 46, 56, 57, 58, 64, 65, 66, 67, 68, 69, 71, 73, 75, 83, 85, 88, 90, 95, 96, 98, 105, 107, 115, 116, 119, 124, 125, 133, 137, 143, 144, 146, 151, 155, 156, 160, 162, 163, 164, 165, 170, 171, 174, 176, 177, 178, 179, 189, 191, 196, 201, 202, 203, 204, 205, 207, 209, 210, 211, 214, 217, 219, 222, 223, 226, 229, 230, 232, 233, 236, 237, 238, 239, 245, 246, 249, 252, 253, 259, 270, 274, 276, 277, 282, 283, 284, 286, 291], "poli": [2, 14, 25, 48, 64, 65, 66, 70, 71, 73, 74, 81, 87, 92, 96, 98, 101, 105, 146, 201, 202, 206, 207, 209, 210, 211, 213, 216, 229, 230, 232, 233, 245, 277], "refer": [2, 3, 5, 11, 12, 13, 14, 15, 19, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 36, 40, 41, 42, 44, 46, 49, 51, 53, 54, 56, 57, 58, 59, 63, 66, 68, 70, 71, 73, 75, 80, 81, 82, 87, 93, 94, 95, 96, 102, 106, 108, 113, 115, 116, 118, 120, 123, 124, 126, 128, 129, 131, 139, 141, 144, 146, 147, 148, 150, 152, 156, 158, 160, 161, 162, 165, 167, 168, 176, 177, 179, 188, 189, 190, 191, 193, 195, 197, 203, 204, 206, 214, 216, 217, 219, 222, 226, 229, 230, 231, 232, 234, 240, 249, 252, 253, 255, 259, 263, 264, 268, 276, 277, 283, 287, 288, 291, 292], "domain": [2, 4, 11, 13, 14, 19, 23, 25, 30, 44, 45, 65, 66, 68, 70, 71, 73, 84, 86, 87, 90, 92, 98, 101, 102, 105, 112, 115, 129, 146, 201, 203, 206, 207, 209, 211, 212, 229, 230, 232, 234, 277, 287, 292], "No": [2, 4, 5, 11, 15, 34, 45, 65, 73, 80, 95, 105, 108, 116, 129, 174, 200, 210, 216, 217, 226, 227, 232, 233, 234, 239, 243, 249, 250, 252, 280, 292], "mani": [2, 3, 4, 7, 12, 14, 15, 17, 19, 21, 22, 23, 25, 26, 27, 29, 31, 32, 34, 36, 44, 45, 46, 47, 53, 56, 61, 65, 66, 67, 69, 70, 71, 73, 77, 90, 92, 95, 96, 101, 105, 106, 124, 125, 129, 131, 139, 142, 143, 146, 163, 179, 187, 198, 201, 203, 204, 205, 207, 209, 218, 221, 222, 224, 226, 227, 230, 231, 232, 233, 234, 238, 247, 252, 280, 281, 283, 284, 285, 286, 290, 291, 292], "integr": [2, 11, 12, 14, 15, 18, 26, 36, 38, 44, 57, 64, 65, 67, 70, 71, 83, 84, 85, 88, 94, 96, 101, 104, 105, 115, 117, 124, 129, 139, 146, 165, 174, 177, 180, 183, 188, 190, 195, 199, 201, 204, 205, 207, 210, 211, 214, 216, 217, 224, 230, 231, 234, 247, 255, 259, 262, 263, 266, 267, 271, 274, 282, 285, 290], "algorithm": [2, 4, 14, 21, 25, 29, 31, 33, 34, 44, 49, 50, 55, 56, 57, 59, 61, 63, 64, 65, 66, 69, 70, 71, 77, 82, 90, 92, 95, 98, 101, 102, 105, 108, 116, 123, 143, 166, 184, 189, 199, 200, 201, 202, 203, 204, 205, 208, 209, 211, 215, 219, 222, 223, 226, 227, 230, 232, 233, 234, 240, 249, 252, 276, 281, 286, 287, 291], "simplif": [2, 14, 15, 21, 39, 41, 43, 44, 46, 65, 67, 70, 71, 90, 96, 101, 107, 121, 129, 143, 146, 163, 179, 189, 210, 215, 225, 226, 230, 232, 233, 270, 271, 280, 282, 284, 285], "collect": [2, 5, 8, 20, 45, 46, 56, 65, 82, 92, 105, 108, 115, 128, 137, 146, 179, 186, 199, 205, 210, 223, 224, 226, 230, 234, 245, 252], "factor": [2, 12, 14, 15, 47, 56, 57, 64, 65, 66, 69, 70, 71, 73, 90, 92, 101, 105, 108, 115, 146, 148, 156, 160, 163, 175, 179, 183, 184, 185, 186, 201, 204, 205, 206, 208, 209, 210, 217, 223, 224, 226, 227, 230, 232, 234, 238, 249, 263, 266, 285, 287], "matric": [2, 4, 14, 20, 21, 42, 46, 65, 66, 92, 102, 104, 115, 123, 124, 125, 129, 133, 143, 146, 148, 151, 152, 154, 162, 163, 173, 178, 189, 198, 199, 203, 209, 214, 215, 222, 224, 226, 227, 230, 232, 233, 235, 247, 248, 276, 282, 284, 285], "thu": [2, 3, 11, 13, 14, 15, 19, 27, 29, 30, 32, 42, 50, 56, 57, 65, 66, 67, 71, 73, 88, 90, 92, 96, 99, 101, 104, 105, 116, 128, 133, 139, 143, 184, 189, 202, 207, 209, 211, 215, 221, 224, 226, 247, 252, 253, 264, 265, 283, 286, 291, 292], "speed": [2, 4, 11, 13, 41, 46, 56, 65, 66, 69, 96, 105, 106, 117, 123, 124, 125, 128, 129, 131, 132, 133, 134, 136, 137, 138, 140, 141, 142, 146, 147, 150, 153, 183, 188, 189, 193, 198, 199, 211, 214, 215, 221, 226, 230, 246, 249, 252, 286, 287], "up": [2, 3, 7, 8, 9, 11, 12, 13, 14, 19, 21, 22, 23, 32, 36, 41, 44, 46, 48, 56, 57, 59, 65, 66, 67, 69, 70, 71, 73, 74, 81, 82, 86, 90, 92, 93, 95, 96, 101, 105, 106, 108, 117, 119, 126, 128, 131, 132, 136, 138, 143, 144, 146, 147, 159, 174, 176, 193, 199, 200, 201, 204, 205, 209, 211, 214, 215, 216, 221, 223, 224, 226, 227, 230, 231, 232, 233, 246, 247, 248, 249, 250, 253, 282, 283, 286, 287, 289], "becaus": [2, 3, 4, 5, 8, 11, 12, 13, 14, 15, 17, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 36, 37, 42, 46, 57, 64, 65, 66, 71, 77, 81, 82, 90, 92, 95, 99, 101, 105, 107, 123, 129, 133, 159, 167, 179, 181, 183, 184, 197, 200, 201, 203, 204, 205, 207, 209, 210, 211, 213, 214, 217, 221, 224, 226, 227, 230, 231, 232, 233, 243, 245, 246, 248, 252, 253, 255, 263, 281, 283, 285, 286, 287, 290, 291, 292], "make": [2, 3, 4, 5, 8, 9, 12, 13, 14, 15, 17, 19, 21, 22, 23, 25, 30, 31, 33, 37, 40, 41, 42, 44, 46, 47, 55, 56, 64, 65, 66, 67, 68, 69, 70, 71, 73, 77, 81, 92, 93, 95, 101, 104, 105, 106, 107, 108, 109, 111, 124, 128, 129, 131, 132, 136, 137, 141, 143, 144, 146, 159, 176, 181, 188, 194, 197, 200, 203, 204, 205, 207, 209, 210, 211, 213, 214, 217, 222, 223, 224, 226, 230, 231, 232, 233, 238, 240, 243, 245, 246, 247, 248, 250, 252, 253, 263, 268, 269, 283, 284, 285, 286, 287, 291], "non": [2, 3, 12, 14, 15, 21, 23, 25, 31, 32, 34, 37, 42, 44, 47, 55, 58, 64, 65, 66, 70, 71, 72, 73, 74, 75, 78, 79, 80, 92, 94, 95, 96, 97, 98, 101, 102, 104, 119, 124, 126, 131, 133, 137, 141, 142, 146, 163, 168, 178, 179, 181, 195, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 213, 214, 217, 221, 222, 224, 226, 227, 229, 230, 232, 233, 234, 235, 238, 239, 240, 245, 247, 252, 255, 266, 286, 291, 292], "who": [2, 3, 4, 9, 11, 12, 19, 23, 66, 67, 146, 198, 207, 214, 284], "abl": [2, 3, 4, 11, 12, 14, 19, 21, 23, 28, 32, 45, 46, 56, 61, 65, 66, 67, 76, 84, 92, 98, 101, 105, 112, 129, 141, 143, 144, 146, 147, 201, 204, 205, 211, 230, 233, 245, 263, 285, 290, 292], "better": [2, 3, 4, 8, 11, 12, 13, 14, 15, 21, 22, 23, 38, 45, 46, 57, 65, 69, 73, 92, 95, 115, 129, 159, 187, 200, 203, 204, 205, 217, 221, 222, 223, 224, 230, 231, 232, 233, 234, 246, 252, 253, 285, 291], "experi": [2, 131, 233, 234], "design": [2, 3, 4, 13, 14, 16, 18, 22, 23, 26, 31, 35, 42, 47, 55, 65, 101, 104, 107, 146, 147, 204, 208, 214, 219, 224, 230, 233, 285, 286, 290], "interfac": [2, 5, 7, 9, 11, 12, 14, 29, 44, 65, 93, 123, 148, 174, 194, 198, 204, 207, 212, 233, 246, 247], "ipython": [2, 4, 14, 15, 36, 93, 146, 194, 253, 258, 289, 290], "jupyt": [2, 7, 11, 14, 23, 253], "notebook": [2, 14, 23, 36, 93, 194, 253, 289, 290], "init_sess": [2, 93, 290], "command": [2, 4, 8, 9, 11, 12, 14, 15, 25, 28, 34, 36, 46, 69, 93, 129, 141, 146, 194, 200, 214, 245, 246, 290], "In": [2, 3, 4, 5, 8, 9, 11, 12, 13, 14, 15, 17, 19, 21, 22, 23, 25, 29, 34, 36, 42, 44, 45, 46, 47, 48, 49, 54, 55, 56, 57, 64, 65, 66, 67, 69, 70, 71, 73, 78, 80, 81, 82, 83, 90, 92, 93, 94, 95, 96, 98, 101, 102, 105, 107, 109, 111, 115, 119, 123, 124, 126, 129, 132, 133, 134, 139, 140, 141, 142, 143, 144, 146, 147, 165, 167, 168, 169, 174, 178, 179, 182, 183, 184, 188, 193, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 213, 214, 221, 222, 223, 224, 226, 227, 230, 231, 232, 233, 234, 235, 236, 238, 240, 243, 245, 247, 249, 250, 252, 253, 256, 259, 263, 264, 266, 268, 280, 283, 284, 285, 286, 287, 290, 291, 292], "usual": [2, 12, 13, 14, 15, 19, 21, 25, 45, 47, 56, 64, 65, 66, 83, 90, 92, 101, 139, 165, 177, 183, 184, 195, 197, 198, 201, 202, 204, 205, 207, 213, 214, 215, 221, 224, 230, 233, 234, 235, 239, 240, 247, 249, 253, 259, 268, 280, 283, 286, 290, 291], "matplotlib": [2, 4, 5, 8, 13, 32, 36, 88, 93, 113, 146, 159, 194, 200, 290], "flag": [2, 3, 17, 23, 25, 44, 46, 56, 57, 61, 63, 65, 80, 92, 95, 96, 97, 101, 105, 123, 129, 163, 200, 205, 207, 210, 211, 214, 215, 216, 222, 226, 227, 230, 232, 233, 240, 245, 246, 252, 255, 280, 291], "auto_symbol": [2, 93, 107], "auto_int_to_integ": [2, 93], "qt": 2, "consol": [2, 3, 15, 65, 93, 194, 200, 290], "express": [2, 3, 4, 5, 14, 17, 18, 21, 22, 23, 26, 27, 30, 32, 34, 38, 39, 40, 41, 42, 43, 44, 57, 64, 65, 66, 67, 68, 69, 70, 71, 73, 75, 78, 80, 81, 88, 89, 90, 92, 93, 96, 99, 100, 101, 104, 105, 106, 108, 115, 116, 118, 119, 120, 122, 123, 124, 125, 126, 129, 133, 139, 140, 141, 142, 143, 144, 146, 147, 154, 158, 162, 163, 167, 168, 171, 174, 176, 177, 178, 179, 181, 182, 183, 184, 186, 188, 189, 191, 193, 194, 195, 198, 199, 200, 201, 202, 205, 207, 209, 210, 211, 214, 215, 217, 219, 220, 221, 222, 223, 224, 226, 227, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 243, 246, 247, 248, 249, 250, 253, 255, 259, 261, 262, 263, 265, 266, 268, 274, 276, 281, 282, 283, 284, 285, 287, 290, 291, 292], "mathjax": [2, 5, 93, 194, 290], "preview": [2, 11, 45, 248], "convert": [2, 3, 8, 13, 14, 15, 17, 21, 22, 23, 28, 30, 31, 32, 38, 42, 46, 49, 57, 61, 65, 66, 69, 70, 71, 79, 80, 82, 85, 86, 89, 93, 95, 96, 101, 104, 105, 107, 115, 126, 144, 173, 176, 182, 183, 184, 186, 193, 200, 201, 203, 205, 207, 209, 210, 211, 212, 214, 215, 216, 222, 223, 224, 226, 227, 230, 231, 233, 234, 235, 236, 239, 245, 246, 252, 253, 255, 257, 262, 277, 282, 283, 286, 291], "imag": [2, 8, 56, 123, 135, 140, 146, 148, 152, 201, 205, 207, 214, 222, 233], "render": [2, 4, 5, 8, 11, 12, 46, 65, 93, 194, 200, 214, 253, 290], "either": [2, 4, 5, 8, 11, 12, 13, 14, 15, 21, 22, 23, 25, 28, 29, 30, 31, 33, 38, 42, 44, 45, 49, 57, 64, 65, 66, 69, 70, 71, 73, 80, 82, 88, 90, 92, 93, 95, 96, 101, 105, 115, 120, 123, 124, 125, 128, 129, 142, 144, 146, 163, 169, 176, 179, 181, 183, 194, 198, 200, 202, 203, 204, 205, 207, 209, 210, 214, 216, 221, 222, 223, 224, 227, 230, 231, 232, 233, 234, 235, 238, 239, 246, 252, 253, 259, 268, 283, 286, 287], "save": [2, 9, 12, 14, 44, 65, 101, 105, 200, 213, 232, 249], "show": [2, 3, 4, 5, 8, 11, 12, 15, 18, 19, 20, 21, 22, 23, 32, 46, 57, 64, 65, 69, 71, 88, 90, 92, 101, 105, 108, 109, 113, 119, 129, 135, 140, 144, 146, 174, 178, 182, 184, 189, 197, 198, 200, 201, 204, 205, 207, 209, 210, 214, 215, 217, 221, 222, 223, 224, 226, 227, 230, 232, 234, 235, 243, 246, 247, 250, 252, 253, 283, 285, 287, 290], "viewer": [2, 5, 45, 214, 248], "distribut": [2, 8, 36, 56, 63, 65, 73, 81, 92, 108, 109, 178, 202, 205, 210, 214, 240], "texliv": [2, 8, 214], "miktex": [2, 8], "note": [2, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 17, 19, 21, 22, 26, 27, 28, 30, 31, 32, 33, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 55, 56, 57, 58, 61, 63, 64, 66, 69, 70, 71, 72, 73, 75, 76, 78, 79, 80, 81, 82, 90, 92, 93, 95, 96, 98, 101, 105, 107, 115, 116, 120, 121, 123, 124, 125, 128, 129, 131, 133, 136, 144, 146, 152, 155, 163, 173, 174, 176, 178, 179, 180, 182, 188, 189, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 213, 214, 215, 216, 217, 220, 222, 224, 226, 227, 229, 230, 231, 232, 233, 234, 239, 240, 243, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 264, 266, 268, 280, 281, 282, 284, 285, 286, 287, 291], "parser": [2, 98, 107, 139, 146, 245, 276], "modul": [2, 3, 4, 5, 7, 11, 12, 14, 15, 18, 21, 28, 36, 37, 38, 39, 40, 41, 44, 45, 46, 47, 48, 55, 57, 65, 66, 68, 70, 71, 73, 77, 81, 85, 88, 91, 92, 93, 95, 98, 99, 100, 101, 106, 107, 108, 110, 111, 113, 116, 119, 129, 130, 135, 139, 141, 142, 144, 146, 148, 151, 153, 154, 166, 169, 182, 183, 184, 185, 195, 198, 200, 205, 206, 208, 211, 212, 214, 218, 221, 224, 228, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 262, 264, 266, 267, 268, 269, 270, 276, 277, 278, 280, 283, 285, 291, 292], "time": [2, 3, 5, 7, 8, 11, 12, 13, 14, 15, 19, 21, 22, 25, 32, 34, 37, 41, 42, 46, 48, 56, 57, 61, 65, 66, 70, 73, 88, 90, 95, 96, 101, 102, 104, 105, 106, 107, 112, 113, 115, 119, 124, 125, 128, 129, 131, 133, 136, 137, 139, 141, 142, 143, 144, 146, 147, 153, 163, 168, 176, 177, 181, 182, 183, 184, 185, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 201, 203, 204, 207, 208, 209, 210, 211, 213, 214, 221, 222, 223, 224, 226, 230, 232, 234, 243, 245, 246, 251, 252, 253, 266, 268, 278, 281, 285, 286, 287], "parse_expr": [2, 13, 21, 34, 107], "mathematca": 2, "parse_mathematica": [2, 13, 107], "maxima": [2, 29, 107, 233], "parse_maxima": [2, 107], "antlr": [2, 107, 129], "runtim": [2, 14, 46, 65, 125, 253], "autolev": [2, 131, 139, 276], "call": [2, 3, 4, 5, 7, 9, 11, 12, 14, 15, 18, 19, 21, 22, 23, 25, 26, 29, 30, 31, 32, 33, 38, 39, 40, 41, 42, 45, 46, 47, 48, 49, 50, 54, 55, 56, 57, 63, 65, 66, 68, 69, 70, 72, 73, 75, 80, 81, 83, 88, 90, 92, 94, 95, 96, 97, 98, 99, 101, 103, 104, 105, 107, 108, 109, 115, 119, 123, 129, 131, 133, 140, 143, 144, 169, 171, 174, 179, 183, 184, 189, 195, 197, 198, 199, 200, 201, 202, 204, 205, 207, 209, 210, 211, 212, 213, 214, 216, 221, 222, 224, 226, 227, 229, 230, 232, 233, 234, 235, 236, 238, 240, 241, 243, 245, 246, 247, 248, 249, 250, 252, 253, 255, 259, 262, 263, 266, 268, 281, 283, 285, 286, 287, 290, 291, 292], "antlr4": [2, 107], "python3": [2, 8, 46, 107, 214], "awar": [2, 3, 4, 12, 14, 15, 22, 44, 65, 69, 95, 101, 224, 234, 253], "version": [2, 3, 4, 5, 7, 8, 9, 11, 12, 21, 22, 23, 34, 35, 36, 39, 45, 46, 56, 57, 63, 65, 66, 70, 71, 73, 92, 95, 97, 99, 101, 103, 105, 118, 120, 123, 129, 163, 177, 181, 189, 199, 200, 201, 204, 205, 207, 209, 210, 214, 217, 226, 232, 234, 244, 245, 247, 248, 249, 250, 252, 253, 257, 259, 265, 283, 286, 287], "must": [2, 3, 4, 11, 12, 13, 14, 15, 21, 22, 32, 38, 39, 40, 41, 46, 56, 57, 59, 61, 63, 64, 65, 66, 67, 70, 71, 73, 75, 78, 81, 84, 87, 88, 90, 92, 95, 96, 97, 98, 101, 104, 105, 108, 109, 111, 113, 115, 116, 123, 124, 125, 129, 131, 139, 141, 142, 143, 144, 146, 159, 174, 176, 179, 189, 198, 199, 200, 201, 202, 203, 205, 207, 209, 210, 214, 215, 222, 223, 224, 226, 227, 230, 232, 233, 234, 238, 239, 245, 246, 247, 248, 249, 250, 252, 253, 256, 283, 285, 286, 290, 291], "match": [2, 3, 4, 11, 12, 13, 15, 21, 23, 32, 56, 57, 64, 65, 73, 78, 90, 92, 96, 101, 123, 128, 155, 180, 188, 189, 203, 210, 226, 227, 230, 231, 232, 234, 243, 245, 247, 252, 253, 265, 281], "wa": [2, 3, 9, 11, 12, 13, 15, 17, 21, 23, 32, 48, 54, 56, 57, 59, 65, 66, 67, 73, 78, 101, 105, 107, 119, 120, 126, 129, 131, 133, 143, 144, 174, 184, 197, 198, 199, 201, 207, 209, 210, 211, 213, 214, 223, 224, 226, 230, 232, 234, 243, 245, 248, 250, 252, 253, 281, 283, 285, 286, 289], "compil": [2, 46, 93, 106, 119, 146, 194, 214, 226, 239, 245, 246, 247, 270, 285], "4": [2, 5, 11, 12, 15, 17, 19, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 38, 39, 41, 42, 44, 45, 46, 47, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 87, 88, 90, 92, 94, 95, 96, 97, 98, 99, 101, 102, 104, 105, 107, 108, 111, 113, 115, 116, 117, 121, 129, 131, 132, 133, 134, 136, 137, 138, 139, 140, 143, 144, 146, 147, 148, 151, 155, 158, 163, 173, 174, 176, 177, 178, 179, 180, 182, 189, 190, 193, 195, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 245, 246, 249, 252, 253, 259, 262, 263, 264, 266, 268, 269, 280, 281, 283, 285, 286, 287, 291, 292], "clang": [2, 107], "bind": [2, 46, 214, 246], "parse_c": 2, "lfortran": [2, 107], "fortran": [2, 14, 19, 23, 44, 106, 107, 119, 146, 199, 247, 290], "satisfi": [2, 5, 12, 13, 21, 28, 29, 33, 41, 42, 44, 47, 53, 56, 61, 65, 66, 70, 73, 75, 88, 90, 94, 95, 101, 105, 125, 143, 163, 168, 201, 202, 205, 207, 209, 210, 214, 220, 221, 222, 227, 230, 231, 232, 233, 234, 240, 286, 291], "includ": [2, 3, 4, 5, 8, 11, 12, 13, 14, 15, 21, 23, 25, 28, 29, 33, 36, 41, 42, 44, 45, 46, 57, 61, 64, 65, 66, 67, 69, 70, 71, 73, 77, 83, 90, 92, 95, 96, 98, 100, 101, 105, 106, 107, 117, 119, 128, 129, 131, 133, 134, 139, 141, 143, 146, 159, 163, 168, 173, 176, 177, 187, 195, 198, 202, 205, 206, 207, 209, 210, 213, 214, 215, 220, 221, 222, 224, 226, 229, 230, 231, 232, 234, 237, 240, 243, 245, 247, 248, 249, 250, 252, 259, 261, 263, 268, 270, 281, 285, 286, 287, 291, 292], "implement": [2, 4, 5, 11, 12, 13, 14, 16, 18, 22, 23, 29, 31, 33, 34, 35, 38, 39, 40, 41, 44, 45, 46, 47, 50, 55, 56, 57, 62, 65, 66, 68, 70, 71, 73, 76, 78, 85, 86, 88, 89, 92, 95, 96, 97, 101, 105, 106, 107, 119, 129, 139, 144, 148, 150, 151, 154, 163, 164, 172, 173, 175, 183, 188, 190, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 215, 218, 221, 222, 223, 226, 227, 230, 231, 232, 233, 234, 238, 239, 249, 252, 253, 256, 267, 270, 274, 281, 285, 291], "dpll": 2, "But": [2, 3, 5, 7, 12, 13, 14, 15, 23, 25, 34, 64, 65, 73, 79, 89, 96, 101, 105, 167, 168, 179, 184, 189, 201, 202, 207, 211, 221, 223, 224, 226, 227, 230, 232, 233, 239, 249, 252, 253, 262, 281, 283, 285, 286, 291], "sat": [2, 40], "solver": [2, 4, 11, 12, 14, 28, 31, 40, 73, 101, 105, 124, 128, 139, 146, 147, 203, 206, 214, 226, 227, 231, 245, 270, 271, 277, 282, 284], "ask": [2, 4, 7, 9, 11, 14, 15, 18, 21, 22, 40, 41, 42, 43, 65, 77, 90, 129, 184, 201, 220, 226, 233, 252, 271, 283], "pycosat": 2, "forc": [2, 15, 19, 22, 23, 65, 69, 71, 75, 81, 90, 92, 95, 108, 109, 111, 120, 123, 124, 126, 128, 131, 133, 134, 135, 136, 139, 141, 142, 143, 144, 146, 167, 168, 182, 195, 198, 200, 202, 204, 223, 226, 227, 232, 245, 266, 268, 276, 290, 291], "pysat": 2, "minisat": 2, "minisat22": 2, "heavi": [2, 12, 234, 286], "primarili": [2, 14, 21, 46, 65, 71, 105, 108, 178, 210, 212, 246, 249, 255, 263], "support": [2, 3, 4, 5, 11, 13, 14, 15, 23, 31, 36, 38, 39, 40, 41, 44, 45, 46, 57, 65, 69, 72, 73, 75, 89, 92, 98, 101, 105, 106, 107, 108, 109, 111, 112, 115, 119, 123, 129, 146, 174, 189, 197, 200, 202, 203, 204, 205, 207, 209, 210, 211, 214, 219, 220, 221, 222, 226, 230, 231, 232, 233, 234, 235, 239, 243, 245, 246, 247, 253, 264, 266, 281, 283, 286, 290], "give": [2, 3, 4, 7, 11, 15, 17, 21, 22, 23, 25, 27, 29, 30, 31, 32, 33, 34, 38, 39, 41, 46, 47, 54, 56, 57, 58, 59, 64, 65, 66, 67, 70, 71, 73, 75, 77, 78, 80, 81, 89, 90, 92, 93, 95, 98, 101, 104, 105, 106, 108, 111, 115, 123, 129, 146, 158, 173, 174, 176, 177, 181, 182, 184, 185, 187, 189, 193, 195, 197, 198, 199, 200, 201, 202, 204, 205, 207, 209, 210, 211, 214, 215, 216, 217, 221, 222, 223, 224, 226, 227, 230, 232, 233, 234, 245, 246, 247, 252, 263, 268, 283, 284, 286, 291, 292], "rudimentari": [2, 23, 207], "text": [2, 3, 4, 5, 11, 12, 14, 23, 36, 46, 56, 66, 70, 71, 73, 83, 90, 93, 96, 101, 105, 144, 184, 194, 199, 200, 201, 214, 221, 227, 230, 233, 234, 245], "pyglet": [2, 214], "pygletplot": [2, 200], "2d": [2, 78, 79, 81, 108, 109, 111, 157, 189, 200, 214, 227, 239, 285], "3d": [2, 38, 49, 78, 79, 108, 157, 180, 195, 200, 263, 265, 266, 267, 268], "evalu": [2, 4, 14, 19, 21, 22, 26, 32, 34, 38, 39, 40, 41, 44, 46, 65, 67, 70, 71, 73, 76, 80, 81, 90, 92, 95, 98, 101, 105, 106, 107, 115, 119, 121, 129, 143, 144, 154, 156, 158, 160, 165, 168, 176, 179, 199, 200, 204, 205, 207, 208, 210, 214, 215, 220, 221, 222, 224, 226, 227, 230, 232, 233, 234, 235, 236, 246, 247, 248, 253, 266, 271, 280, 281, 282, 283, 285, 287], "numer": [2, 4, 12, 13, 14, 15, 17, 19, 21, 26, 27, 28, 29, 30, 33, 38, 42, 44, 46, 64, 65, 70, 73, 77, 81, 88, 101, 105, 107, 111, 112, 113, 115, 123, 124, 125, 129, 131, 139, 143, 144, 147, 151, 158, 161, 176, 188, 198, 200, 204, 205, 207, 208, 209, 210, 213, 214, 223, 224, 226, 230, 232, 233, 239, 245, 246, 252, 253, 271, 280, 283, 287, 291], "variou": [2, 4, 5, 14, 19, 23, 25, 28, 44, 46, 48, 49, 56, 64, 65, 70, 85, 90, 92, 95, 101, 126, 144, 158, 162, 163, 174, 176, 201, 202, 205, 206, 207, 209, 215, 221, 224, 227, 230, 231, 233, 247, 291], "primari": [2, 3, 4, 5, 12, 21, 23, 65, 77, 95, 198, 201, 247, 253], "vehicl": 2, "between": [2, 3, 9, 12, 13, 14, 18, 22, 23, 25, 29, 45, 46, 55, 56, 57, 59, 63, 65, 67, 70, 73, 75, 77, 78, 79, 80, 81, 82, 92, 94, 95, 98, 99, 101, 105, 106, 107, 111, 112, 113, 115, 123, 126, 128, 129, 132, 136, 138, 140, 143, 144, 146, 147, 148, 151, 152, 158, 165, 167, 168, 169, 173, 176, 177, 178, 179, 182, 183, 184, 188, 189, 190, 191, 193, 195, 197, 198, 200, 201, 203, 207, 209, 210, 214, 216, 226, 230, 231, 232, 233, 234, 235, 248, 253, 259, 262, 263, 266, 268, 283], "standard": [2, 5, 12, 13, 14, 15, 21, 23, 25, 29, 30, 32, 34, 46, 65, 69, 71, 73, 88, 90, 92, 93, 94, 95, 99, 101, 105, 106, 107, 118, 156, 160, 189, 195, 199, 201, 204, 205, 207, 214, 217, 222, 226, 227, 230, 233, 234, 236, 247, 253, 256, 263, 268, 280, 283, 291], "wai": [2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 25, 27, 29, 32, 37, 45, 47, 48, 49, 54, 56, 57, 58, 61, 65, 67, 70, 73, 81, 85, 89, 90, 92, 94, 98, 101, 104, 105, 107, 108, 111, 119, 124, 126, 128, 129, 133, 135, 136, 139, 143, 159, 173, 176, 177, 182, 184, 187, 188, 189, 191, 193, 195, 197, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 213, 214, 221, 224, 226, 227, 230, 231, 233, 235, 236, 239, 240, 243, 247, 249, 252, 253, 256, 259, 263, 264, 265, 266, 268, 280, 281, 283, 284, 285, 286, 291, 292], "principl": [2, 66, 96, 105, 150, 199, 201, 202, 207, 223, 232], "pass": [2, 3, 4, 11, 12, 14, 15, 17, 18, 21, 22, 23, 27, 28, 31, 32, 34, 37, 38, 41, 44, 45, 46, 56, 57, 65, 66, 67, 69, 71, 72, 73, 75, 78, 79, 81, 92, 93, 95, 96, 98, 101, 102, 105, 107, 108, 113, 115, 120, 128, 129, 133, 144, 146, 147, 151, 168, 169, 173, 174, 176, 177, 189, 194, 200, 201, 203, 204, 205, 207, 209, 210, 212, 214, 215, 221, 222, 226, 227, 230, 231, 232, 233, 234, 235, 238, 239, 240, 243, 245, 246, 247, 248, 250, 252, 253, 255, 258, 259, 280, 281, 286, 290, 291, 292], "appropri": [2, 4, 5, 11, 12, 13, 15, 19, 29, 33, 56, 65, 71, 80, 101, 119, 131, 168, 169, 179, 189, 197, 203, 204, 210, 211, 214, 220, 221, 226, 227, 232, 234, 239, 247, 264, 290], "namespac": [2, 4, 13, 37, 46, 47, 65, 205, 227, 230, 231, 245, 247, 248, 253], "dictionari": [2, 12, 13, 14, 28, 32, 34, 45, 46, 54, 56, 57, 63, 65, 70, 79, 81, 92, 94, 96, 101, 104, 105, 107, 108, 121, 124, 125, 128, 129, 131, 133, 136, 141, 143, 169, 179, 189, 198, 200, 202, 205, 207, 209, 210, 212, 214, 221, 226, 227, 230, 231, 232, 233, 234, 238, 240, 245, 249, 252, 253, 259, 280, 287], "third": [2, 3, 17, 25, 38, 46, 56, 57, 65, 73, 75, 79, 101, 115, 123, 176, 182, 183, 197, 202, 210, 224, 230, 233, 234, 236, 250, 252, 281, 286], "argument": [2, 3, 4, 11, 12, 14, 18, 21, 22, 23, 25, 27, 31, 32, 33, 34, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 56, 57, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 78, 81, 82, 90, 92, 93, 95, 96, 98, 101, 104, 105, 107, 108, 113, 115, 123, 124, 128, 129, 141, 142, 144, 146, 153, 156, 160, 162, 165, 168, 173, 174, 176, 177, 178, 179, 187, 194, 195, 199, 200, 201, 202, 204, 205, 207, 209, 210, 213, 214, 215, 216, 220, 221, 222, 223, 224, 226, 227, 230, 231, 232, 234, 236, 238, 239, 245, 246, 247, 248, 249, 250, 252, 253, 255, 263, 264, 266, 280, 281, 286, 287, 291], "default": [2, 3, 4, 5, 11, 12, 13, 14, 15, 21, 23, 25, 29, 30, 32, 37, 38, 39, 40, 41, 44, 45, 46, 47, 48, 49, 55, 56, 63, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 87, 92, 93, 95, 96, 98, 101, 102, 105, 106, 107, 108, 109, 111, 113, 115, 117, 119, 120, 121, 123, 124, 125, 129, 143, 152, 169, 171, 174, 176, 177, 179, 183, 185, 188, 189, 191, 193, 194, 199, 200, 202, 203, 204, 205, 207, 209, 210, 211, 213, 214, 215, 216, 217, 221, 222, 223, 226, 227, 230, 231, 232, 233, 234, 239, 240, 245, 246, 247, 249, 250, 252, 253, 255, 259, 280, 281, 285, 287, 290, 291], "translat": [2, 13, 46, 56, 65, 74, 76, 80, 82, 106, 107, 115, 118, 123, 124, 136, 138, 140, 144, 197, 200, 214, 230, 232, 246, 247, 253, 255, 264], "numpi": [2, 4, 12, 13, 14, 23, 25, 30, 31, 32, 36, 46, 65, 88, 93, 106, 113, 129, 146, 163, 173, 203, 214, 234, 239, 246, 247, 253, 280, 283], "By": [2, 15, 21, 23, 25, 29, 30, 32, 38, 39, 41, 46, 55, 64, 65, 67, 69, 70, 73, 79, 80, 84, 88, 90, 95, 96, 101, 104, 105, 106, 107, 108, 109, 113, 120, 174, 179, 200, 202, 204, 205, 207, 209, 210, 211, 213, 214, 216, 221, 223, 226, 227, 230, 232, 233, 234, 238, 240, 241, 245, 248, 252, 253, 266, 280, 285, 286, 291], "produc": [2, 4, 5, 12, 14, 22, 23, 28, 30, 31, 32, 34, 45, 56, 65, 66, 78, 92, 95, 101, 189, 203, 204, 209, 210, 214, 221, 230, 231, 232, 234, 243, 245, 249, 250, 252, 253, 290], "math": [2, 4, 8, 12, 23, 34, 38, 42, 45, 47, 56, 65, 70, 73, 75, 92, 101, 105, 106, 129, 139, 195, 200, 205, 208, 213, 214, 230, 231, 234, 246, 247, 253, 264, 265, 266, 267, 268, 280, 281, 285], "behavior": [2, 3, 12, 13, 14, 15, 23, 56, 65, 70, 73, 92, 107, 118, 119, 139, 143, 174, 201, 202, 209, 210, 214, 215, 219, 221, 223, 226, 243, 246, 248, 252, 253, 283], "backward": [2, 19, 44, 65, 96, 101, 115, 214, 252, 291], "compat": [2, 3, 8, 18, 46, 65, 73, 93, 96, 101, 106, 119, 181, 186, 194, 200, 203, 205, 209, 210, 214, 234, 238, 241, 245, 247, 253], "scipi": [2, 7, 14, 25, 27, 30, 73, 119, 146, 173, 214, 234, 253, 280, 289], "special": [2, 4, 11, 14, 16, 21, 23, 30, 34, 37, 38, 48, 57, 65, 66, 68, 69, 70, 72, 80, 83, 90, 92, 96, 101, 146, 163, 168, 195, 201, 204, 207, 208, 209, 214, 223, 224, 226, 229, 230, 231, 232, 234, 245, 246, 247, 250, 252, 253, 263, 266, 268, 271, 281, 282, 286], "cupi": [2, 106], "cuda": [2, 106], "gpu": [2, 106, 146], "jax": [2, 106, 253], "xla": [2, 106], "program": [2, 5, 15, 21, 46, 49, 57, 146, 184, 199, 247, 249, 283, 285, 289, 291], "tpu": [2, 106], "compatibli": 2, "tensorflow": [2, 253], "machin": [2, 4, 7, 8, 9, 215, 226, 230, 280], "learn": [2, 5, 8, 26, 32, 34, 101, 144, 198, 223, 233, 280, 283, 284, 285, 289], "numexpr": [2, 253], "fast": [2, 21, 32, 46, 65, 100, 101, 105, 151, 205, 206, 207, 208, 209, 210, 211, 217, 221, 230, 232, 249, 252, 253], "alreadi": [2, 3, 7, 9, 10, 11, 12, 13, 15, 21, 23, 28, 29, 32, 34, 36, 38, 56, 57, 65, 66, 74, 75, 78, 79, 81, 90, 92, 96, 102, 105, 111, 116, 120, 129, 143, 148, 174, 176, 179, 195, 197, 198, 200, 203, 204, 207, 209, 213, 217, 223, 224, 226, 230, 233, 234, 240, 264, 266, 281, 283, 284, 285, 289, 290, 291, 292], "number": [2, 3, 4, 5, 11, 12, 13, 14, 17, 18, 21, 23, 25, 28, 29, 30, 33, 34, 38, 40, 41, 44, 45, 46, 47, 48, 49, 50, 52, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 66, 67, 70, 71, 73, 75, 78, 79, 80, 81, 82, 84, 92, 93, 94, 95, 96, 98, 101, 102, 104, 106, 107, 109, 111, 113, 115, 116, 117, 119, 124, 125, 128, 129, 133, 143, 144, 146, 152, 155, 158, 159, 162, 163, 164, 165, 167, 168, 173, 174, 175, 176, 177, 179, 180, 181, 184, 187, 188, 189, 193, 194, 195, 197, 198, 199, 200, 202, 203, 205, 206, 207, 208, 210, 211, 214, 216, 220, 221, 222, 223, 224, 226, 227, 230, 232, 233, 234, 235, 239, 240, 245, 247, 249, 252, 253, 255, 259, 262, 263, 265, 266, 268, 271, 277, 280, 281, 283, 285, 286, 287, 291], "languag": [2, 5, 14, 15, 19, 23, 46, 71, 101, 107, 119, 129, 146, 214, 219, 234, 246, 247, 283, 285, 287, 289, 291], "valid": [2, 4, 5, 11, 13, 21, 22, 23, 28, 32, 39, 41, 43, 44, 45, 46, 58, 64, 65, 70, 71, 81, 101, 105, 121, 123, 124, 129, 131, 148, 152, 171, 176, 183, 186, 188, 189, 194, 198, 204, 207, 210, 213, 214, 222, 226, 227, 230, 232, 233, 234, 253, 287, 291], "rather": [2, 3, 4, 5, 11, 12, 13, 14, 15, 17, 19, 21, 22, 23, 25, 29, 32, 33, 34, 37, 42, 46, 47, 48, 56, 57, 58, 65, 69, 71, 76, 81, 83, 90, 95, 96, 98, 101, 105, 107, 128, 136, 146, 159, 173, 177, 179, 183, 188, 197, 201, 204, 207, 210, 212, 217, 224, 227, 229, 230, 233, 234, 236, 249, 252, 253, 256, 268, 283, 285, 286], "simpli": [2, 3, 5, 8, 12, 21, 22, 27, 28, 42, 47, 48, 64, 65, 67, 71, 75, 96, 98, 101, 105, 107, 108, 111, 116, 120, 129, 131, 143, 169, 174, 184, 195, 198, 204, 210, 211, 222, 223, 224, 229, 230, 233, 250, 252, 253, 266], "string": [2, 3, 4, 5, 7, 11, 12, 14, 15, 23, 38, 39, 45, 46, 49, 54, 65, 66, 67, 68, 69, 72, 78, 88, 93, 94, 95, 98, 101, 105, 107, 108, 111, 113, 119, 120, 123, 124, 126, 150, 159, 163, 173, 177, 181, 187, 188, 189, 193, 194, 195, 200, 203, 205, 209, 214, 215, 221, 226, 230, 234, 235, 238, 239, 240, 245, 246, 247, 252, 253, 255, 257, 259, 261, 263, 282, 283, 286, 290], "repres": [2, 12, 13, 14, 15, 18, 21, 22, 23, 28, 30, 32, 38, 40, 42, 45, 46, 47, 48, 49, 54, 55, 56, 57, 58, 60, 61, 64, 65, 66, 67, 70, 71, 73, 75, 76, 78, 80, 81, 82, 87, 88, 92, 94, 95, 96, 98, 101, 105, 107, 108, 109, 112, 113, 115, 120, 123, 124, 126, 128, 129, 131, 132, 133, 134, 137, 139, 141, 142, 143, 144, 146, 148, 150, 151, 153, 165, 166, 168, 172, 173, 176, 177, 179, 181, 183, 184, 185, 186, 187, 188, 189, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 205, 207, 210, 212, 214, 216, 217, 220, 221, 222, 224, 226, 227, 230, 232, 233, 234, 235, 236, 238, 239, 240, 247, 249, 252, 253, 259, 262, 266, 268, 276, 281, 283, 285, 286, 291, 292], "take": [2, 3, 5, 9, 11, 12, 13, 14, 15, 19, 21, 22, 23, 27, 28, 29, 30, 32, 41, 44, 46, 47, 50, 55, 56, 60, 64, 65, 66, 67, 71, 73, 77, 78, 88, 92, 94, 95, 96, 101, 105, 106, 107, 108, 111, 115, 119, 123, 124, 126, 128, 129, 131, 143, 146, 148, 162, 165, 168, 169, 173, 175, 176, 177, 178, 179, 181, 184, 187, 188, 189, 190, 191, 194, 197, 198, 200, 201, 202, 203, 204, 205, 207, 210, 211, 214, 217, 220, 221, 222, 223, 224, 226, 227, 230, 232, 233, 234, 236, 239, 245, 246, 248, 249, 252, 253, 259, 261, 262, 280, 281, 283, 285, 286, 287, 291], "within": [2, 5, 12, 13, 14, 21, 31, 44, 45, 46, 48, 65, 71, 78, 81, 95, 96, 98, 105, 106, 108, 136, 144, 174, 189, 197, 198, 202, 204, 210, 212, 222, 230, 232, 233, 234, 245, 246, 255], "case": [2, 3, 4, 5, 11, 12, 13, 14, 15, 19, 21, 22, 25, 28, 29, 30, 31, 32, 33, 34, 38, 44, 45, 46, 47, 48, 50, 53, 56, 57, 61, 64, 65, 66, 67, 69, 70, 71, 73, 77, 80, 81, 82, 83, 87, 90, 92, 95, 96, 98, 101, 102, 105, 106, 107, 109, 115, 119, 123, 124, 129, 131, 132, 133, 134, 140, 142, 144, 146, 152, 163, 169, 174, 176, 178, 179, 184, 185, 193, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 213, 214, 219, 221, 222, 223, 224, 226, 227, 229, 230, 231, 232, 234, 235, 238, 240, 243, 245, 247, 248, 250, 252, 253, 254, 255, 256, 259, 262, 263, 281, 285, 286, 287, 290, 291, 292], "abov": [2, 3, 4, 5, 8, 11, 12, 13, 15, 17, 19, 22, 23, 25, 27, 31, 32, 34, 44, 45, 46, 47, 49, 55, 56, 57, 61, 64, 65, 69, 70, 73, 75, 78, 81, 82, 90, 92, 95, 96, 101, 106, 107, 109, 115, 119, 123, 124, 126, 128, 129, 131, 132, 133, 134, 139, 140, 142, 143, 144, 147, 174, 176, 179, 189, 195, 197, 198, 200, 201, 202, 204, 205, 207, 209, 210, 211, 213, 214, 215, 221, 224, 226, 227, 230, 232, 233, 234, 238, 239, 246, 247, 253, 263, 264, 265, 266, 269, 283, 285, 286, 287, 291], "subpackag": [2, 270], "f2py": [2, 46, 106, 246, 247], "ufuncifi": [2, 46, 246], "cython": [2, 46, 106, 146, 246], "codegen": [2, 23, 106, 214, 246, 251, 278], "relat": [2, 3, 4, 5, 11, 12, 14, 22, 39, 41, 42, 44, 47, 49, 55, 56, 63, 67, 70, 71, 81, 87, 90, 92, 101, 105, 111, 118, 124, 133, 136, 139, 140, 146, 148, 153, 161, 163, 183, 189, 193, 197, 199, 200, 201, 207, 209, 210, 211, 213, 214, 218, 220, 221, 224, 226, 227, 229, 230, 232, 233, 234, 252, 291], "reli": [2, 12, 13, 46, 101, 106, 112, 207, 213, 214, 221, 226, 233, 248, 253, 287], "llvm": 2, "gcc": [2, 247], "ifort": 2, "therefor": [2, 3, 4, 12, 23, 25, 29, 47, 56, 61, 65, 69, 73, 81, 94, 105, 115, 123, 195, 198, 199, 200, 204, 207, 210, 214, 230, 233, 234, 235, 240, 259, 261, 263, 264, 266, 268], "given": [2, 3, 5, 8, 12, 13, 14, 15, 17, 19, 21, 23, 25, 27, 30, 32, 38, 40, 41, 44, 45, 46, 47, 49, 53, 54, 55, 56, 57, 58, 59, 61, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87, 88, 89, 90, 92, 94, 95, 96, 98, 101, 104, 105, 107, 108, 111, 113, 116, 120, 121, 123, 124, 126, 128, 129, 133, 144, 152, 169, 174, 176, 183, 184, 185, 187, 189, 190, 191, 193, 195, 198, 199, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213, 214, 217, 219, 220, 221, 222, 223, 224, 226, 227, 229, 230, 231, 232, 233, 234, 235, 239, 240, 243, 245, 247, 249, 252, 253, 255, 256, 259, 262, 264, 266, 268, 280, 286, 289, 291, 292], "instead": [2, 3, 4, 5, 8, 11, 12, 13, 14, 15, 17, 21, 22, 23, 27, 29, 30, 32, 33, 34, 37, 38, 39, 41, 45, 46, 56, 58, 61, 65, 67, 68, 69, 70, 73, 92, 93, 95, 96, 98, 99, 101, 105, 113, 116, 118, 128, 129, 131, 133, 143, 146, 177, 181, 189, 194, 195, 197, 198, 201, 204, 205, 207, 209, 210, 212, 214, 216, 224, 226, 230, 232, 233, 234, 238, 239, 240, 243, 248, 249, 250, 252, 253, 266, 269, 280, 281, 283, 285, 286, 287, 291, 292], "aesara": [2, 13, 46, 146], "aesaracod": [2, 13, 46, 106, 214], "contain": [2, 3, 4, 5, 8, 11, 12, 13, 14, 15, 17, 21, 22, 23, 27, 28, 29, 30, 32, 33, 34, 37, 39, 40, 44, 45, 46, 47, 48, 56, 57, 61, 63, 64, 67, 68, 69, 71, 73, 74, 76, 78, 79, 80, 81, 82, 91, 92, 94, 95, 96, 98, 101, 104, 105, 106, 107, 108, 110, 113, 114, 116, 120, 124, 125, 126, 128, 131, 133, 143, 144, 146, 147, 148, 149, 150, 152, 153, 154, 166, 169, 171, 174, 176, 179, 198, 199, 200, 201, 202, 203, 204, 205, 207, 209, 210, 214, 215, 216, 221, 222, 224, 226, 227, 228, 230, 231, 232, 233, 234, 238, 239, 240, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 259, 262, 270, 281, 283, 287, 291], "aeseara": 2, "previous": [2, 3, 11, 13, 64, 123, 137, 140, 195, 213, 226, 234, 266], "theano": [2, 13, 146, 290], "return": [2, 3, 4, 5, 11, 12, 13, 14, 15, 17, 19, 21, 22, 23, 25, 28, 29, 31, 33, 34, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 53, 54, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 87, 88, 90, 92, 94, 95, 96, 97, 98, 101, 102, 104, 105, 107, 108, 111, 113, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 128, 129, 131, 133, 137, 141, 143, 144, 146, 148, 150, 151, 152, 153, 155, 156, 160, 163, 164, 165, 168, 169, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 185, 186, 187, 188, 189, 190, 191, 193, 195, 198, 199, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 226, 227, 229, 230, 231, 232, 234, 235, 236, 238, 239, 240, 241, 243, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 259, 262, 264, 266, 280, 281, 286, 287, 290, 291, 292], "graph": [2, 4, 14, 57, 73, 94, 101, 106, 203, 214, 233, 234, 252, 286, 290], "object": [2, 3, 4, 5, 7, 11, 12, 14, 15, 20, 21, 22, 23, 32, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 49, 55, 56, 57, 58, 59, 60, 64, 65, 67, 70, 71, 73, 75, 76, 77, 78, 80, 81, 82, 90, 92, 95, 96, 98, 99, 101, 106, 107, 108, 109, 113, 115, 116, 119, 120, 123, 124, 125, 126, 128, 129, 133, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 152, 153, 154, 162, 163, 165, 173, 174, 178, 179, 181, 182, 183, 185, 186, 189, 193, 194, 197, 198, 200, 201, 202, 203, 204, 205, 207, 209, 210, 214, 216, 217, 220, 221, 222, 223, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 245, 246, 247, 248, 249, 252, 253, 256, 257, 262, 263, 264, 269, 270, 274, 280, 281, 283, 285, 286, 287, 290, 291], "llvmlite": 2, "llvmjitcod": 2, "jit": [2, 223], "from": [2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 17, 18, 19, 21, 22, 23, 25, 27, 31, 32, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 123, 124, 126, 128, 129, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 171, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 226, 227, 229, 230, 231, 232, 233, 234, 235, 238, 239, 240, 241, 243, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 257, 259, 261, 262, 263, 264, 265, 266, 268, 269, 277, 280, 281, 283, 285, 286, 287, 290, 291, 292], "around": [2, 3, 4, 5, 7, 11, 12, 13, 14, 15, 22, 23, 36, 44, 54, 57, 65, 66, 67, 69, 71, 74, 81, 85, 101, 104, 105, 111, 120, 123, 139, 143, 147, 198, 204, 207, 209, 214, 216, 221, 227, 230, 233, 234, 245, 259, 261, 281, 283, 285], "llvm_callabl": 2, "callabl": [2, 15, 32, 46, 56, 101, 107, 124, 164, 209, 214, 215, 226, 243, 246, 247, 252, 253, 254], "unlik": [2, 4, 12, 14, 15, 21, 22, 25, 32, 43, 66, 92, 101, 105, 107, 129, 197, 207, 214, 227, 230, 233, 249, 250, 283, 285, 286, 287, 290], "two": [2, 3, 4, 5, 7, 8, 11, 12, 13, 14, 15, 17, 19, 21, 22, 23, 25, 27, 29, 32, 33, 38, 44, 45, 46, 47, 50, 54, 55, 56, 57, 59, 60, 61, 62, 64, 65, 66, 67, 69, 70, 71, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87, 88, 90, 92, 94, 95, 96, 98, 101, 105, 106, 108, 109, 111, 112, 115, 116, 119, 120, 123, 124, 132, 137, 139, 140, 141, 143, 144, 151, 152, 153, 158, 159, 163, 165, 168, 169, 174, 175, 176, 177, 178, 179, 181, 183, 184, 188, 189, 190, 191, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 213, 214, 215, 216, 221, 222, 223, 224, 226, 227, 230, 231, 232, 233, 234, 235, 236, 239, 249, 252, 253, 259, 262, 264, 265, 266, 268, 280, 281, 284, 286, 287, 291], "tensorflow_cod": 2, "avail": [2, 5, 7, 8, 9, 13, 14, 15, 21, 25, 31, 34, 35, 36, 45, 46, 56, 57, 64, 65, 70, 73, 92, 101, 106, 107, 129, 143, 146, 204, 205, 207, 210, 214, 215, 220, 222, 224, 226, 227, 232, 233, 234, 235, 239, 240, 245, 252, 253, 258, 259, 283, 290], "order": [2, 3, 4, 5, 11, 12, 13, 14, 15, 17, 19, 21, 22, 25, 27, 32, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 75, 78, 81, 82, 84, 87, 90, 92, 93, 94, 95, 96, 101, 102, 105, 106, 107, 108, 109, 115, 116, 119, 123, 124, 128, 129, 130, 131, 132, 140, 141, 142, 143, 144, 152, 156, 160, 163, 173, 174, 175, 176, 177, 178, 179, 183, 184, 188, 189, 191, 193, 194, 197, 198, 200, 201, 202, 203, 204, 205, 207, 209, 211, 213, 214, 215, 216, 217, 220, 222, 226, 227, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 245, 246, 247, 249, 252, 253, 255, 259, 261, 263, 264, 269, 281, 283, 284, 286, 290, 291, 292], "detect": [2, 8, 37, 44, 98, 101, 105, 200, 204, 214, 230, 231, 233, 235, 252, 290], "assum": [2, 4, 14, 15, 18, 21, 23, 29, 32, 33, 38, 41, 46, 47, 49, 54, 56, 64, 65, 66, 67, 70, 71, 73, 75, 82, 83, 90, 92, 101, 105, 108, 111, 115, 128, 129, 135, 141, 142, 143, 144, 146, 152, 174, 178, 179, 189, 193, 195, 201, 202, 204, 207, 210, 212, 214, 221, 222, 224, 226, 227, 230, 231, 233, 234, 238, 239, 240, 247, 252, 255, 262, 264, 268, 271, 284, 286, 289, 291, 292], "wurlitz": 2, "allow": [2, 3, 5, 11, 12, 13, 14, 15, 21, 23, 25, 42, 45, 46, 47, 49, 56, 58, 61, 64, 65, 66, 69, 71, 73, 75, 76, 77, 90, 93, 95, 96, 98, 99, 101, 105, 106, 107, 109, 123, 124, 129, 131, 139, 143, 144, 146, 151, 163, 179, 183, 184, 185, 198, 200, 201, 204, 205, 207, 209, 210, 211, 214, 219, 221, 222, 223, 226, 227, 230, 232, 233, 234, 235, 239, 245, 248, 250, 252, 253, 264, 283, 286], "captur": [2, 65, 252], "output": [2, 4, 5, 11, 12, 13, 15, 16, 19, 21, 23, 29, 32, 34, 45, 46, 65, 66, 73, 89, 92, 93, 95, 96, 98, 101, 105, 106, 107, 112, 115, 124, 128, 129, 137, 143, 146, 147, 151, 152, 163, 175, 179, 188, 189, 193, 194, 195, 198, 204, 207, 210, 214, 215, 224, 226, 227, 229, 230, 232, 234, 239, 245, 246, 247, 249, 252, 253, 259, 283, 285, 286, 287, 290, 291, 292], "suit": [2, 3, 5, 11, 12, 21, 23, 29, 30, 45, 200, 210, 243, 245], "stat": [2, 9, 270, 277], "sampl": [2, 19, 56, 68, 113, 115, 163, 200, 214, 234, 281, 285], "At": [2, 12, 21, 23, 29, 44, 61, 71, 73, 92, 105, 108, 109, 119, 184, 188, 198, 209, 224, 253], "least": [2, 3, 5, 7, 11, 12, 13, 17, 21, 32, 42, 44, 46, 56, 65, 71, 77, 89, 90, 92, 101, 105, 106, 124, 159, 173, 181, 183, 201, 202, 204, 205, 207, 209, 210, 221, 223, 226, 230, 232, 233, 234, 247, 291], "follow": [2, 3, 4, 5, 7, 8, 11, 12, 13, 15, 17, 19, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 36, 39, 41, 44, 45, 46, 47, 48, 54, 55, 56, 57, 58, 61, 64, 65, 66, 69, 70, 71, 73, 77, 79, 81, 88, 89, 90, 92, 95, 96, 98, 101, 105, 106, 108, 109, 111, 123, 124, 126, 129, 131, 139, 140, 141, 142, 143, 144, 146, 148, 152, 171, 174, 176, 179, 182, 184, 188, 189, 195, 197, 198, 199, 200, 201, 202, 207, 208, 209, 210, 212, 213, 214, 215, 216, 221, 223, 224, 226, 227, 230, 231, 232, 233, 234, 235, 238, 239, 240, 245, 248, 249, 252, 253, 256, 263, 264, 266, 280, 281, 283, 284, 286, 287, 291, 292], "random": [2, 4, 13, 48, 49, 54, 56, 57, 63, 66, 75, 78, 79, 100, 101, 105, 163, 175, 200, 205, 207, 209, 210, 214, 244, 245, 248, 252, 283, 287, 291], "pymc": [2, 234], "manipul": [2, 14, 18, 19, 21, 25, 28, 30, 32, 45, 46, 47, 56, 65, 71, 73, 90, 105, 106, 122, 129, 139, 144, 177, 197, 203, 204, 205, 208, 213, 214, 216, 223, 226, 237, 252, 270, 276, 277, 280, 281, 282, 283, 284, 285, 287, 290, 291], "first": [2, 4, 5, 7, 8, 9, 11, 12, 14, 15, 19, 21, 22, 23, 25, 29, 32, 33, 36, 38, 45, 46, 47, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 78, 79, 81, 82, 89, 90, 92, 94, 95, 96, 101, 104, 105, 108, 109, 115, 116, 121, 123, 124, 126, 128, 129, 131, 132, 133, 134, 139, 140, 143, 144, 147, 151, 152, 156, 160, 163, 168, 169, 172, 173, 174, 175, 176, 178, 179, 182, 184, 189, 193, 197, 198, 200, 201, 203, 205, 207, 208, 209, 210, 211, 214, 215, 216, 217, 220, 221, 223, 224, 226, 227, 230, 231, 232, 233, 234, 238, 240, 243, 245, 246, 247, 248, 252, 253, 255, 264, 269, 280, 281, 283, 285, 286, 287, 289, 291, 292], "use_symengin": 2, "1": [2, 3, 5, 7, 8, 11, 12, 14, 15, 17, 18, 19, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 111, 113, 115, 116, 117, 118, 119, 120, 121, 123, 124, 126, 128, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 144, 146, 147, 148, 150, 151, 152, 153, 154, 158, 161, 162, 163, 164, 165, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 259, 262, 263, 264, 266, 269, 276, 280, 281, 283, 285, 286, 287, 290, 291, 292], "environ": [2, 6, 8, 10, 11, 12, 13, 14, 65, 93, 194, 214, 234, 245, 255, 283, 285, 290], "physic": [2, 4, 19, 46, 58, 101, 105, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 136, 137, 138, 139, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 189, 190, 191, 193, 194, 199, 208, 234, 249, 252, 266, 285, 291], "mechan": [2, 23, 65, 88, 92, 101, 108, 120, 121, 123, 124, 125, 126, 128, 129, 131, 132, 133, 134, 136, 137, 138, 161, 165, 168, 174, 176, 177, 178, 181, 188, 189, 196, 199, 276], "liealgebra": [2, 94], "thing": [2, 3, 4, 5, 7, 11, 12, 13, 14, 15, 16, 21, 22, 23, 25, 27, 35, 42, 46, 55, 56, 57, 65, 67, 77, 93, 94, 95, 96, 101, 106, 119, 129, 143, 146, 163, 179, 184, 197, 198, 211, 213, 221, 222, 223, 226, 230, 233, 238, 248, 250, 252, 280, 281, 283, 285, 286, 287, 290, 291], "configur": [2, 3, 11, 12, 13, 57, 95, 115, 123, 124, 132, 133, 136, 138, 139, 141, 143, 214], "otherwis": [2, 3, 12, 17, 21, 22, 23, 44, 45, 46, 56, 57, 61, 64, 65, 66, 69, 71, 73, 74, 75, 78, 79, 80, 81, 90, 92, 94, 95, 97, 101, 104, 105, 107, 113, 115, 117, 120, 128, 129, 164, 169, 175, 193, 196, 197, 201, 205, 207, 209, 210, 212, 214, 216, 217, 219, 220, 222, 226, 227, 230, 231, 232, 233, 234, 235, 243, 245, 247, 252, 253, 280, 281, 290], "ordinari": [2, 21, 22, 26, 44, 46, 56, 65, 69, 70, 71, 73, 83, 87, 88, 92, 102, 115, 139, 201, 203, 204, 213, 220, 230, 235, 249, 285, 291], "x": [2, 3, 4, 5, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 54, 56, 57, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 101, 104, 105, 106, 107, 108, 109, 111, 113, 115, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 131, 132, 133, 134, 136, 137, 138, 140, 141, 142, 143, 144, 146, 147, 151, 153, 154, 155, 156, 157, 159, 160, 163, 168, 169, 174, 176, 177, 178, 179, 180, 188, 189, 190, 191, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 226, 227, 229, 230, 231, 232, 233, 234, 235, 238, 239, 240, 241, 245, 246, 247, 248, 250, 252, 253, 255, 259, 262, 263, 264, 265, 266, 268, 269, 280, 281, 283, 285, 286, 287, 290, 291, 292], "still": [2, 3, 4, 5, 12, 13, 14, 15, 21, 23, 36, 37, 38, 45, 57, 64, 65, 66, 73, 77, 92, 96, 101, 129, 179, 198, 200, 201, 202, 207, 209, 214, 221, 223, 224, 226, 230, 232, 233, 239, 245, 252, 266, 287], "experiment": [2, 3, 226], "mathemat": [2, 3, 5, 12, 13, 14, 18, 21, 23, 27, 29, 31, 32, 34, 35, 38, 40, 41, 44, 46, 47, 51, 55, 57, 64, 65, 66, 67, 70, 71, 72, 73, 78, 79, 90, 92, 95, 98, 101, 105, 106, 107, 115, 116, 119, 133, 145, 184, 195, 197, 198, 201, 202, 204, 205, 208, 213, 214, 222, 223, 227, 229, 230, 233, 234, 239, 246, 247, 253, 259, 263, 266, 268, 280, 283, 284, 285, 286, 289, 291], "softwar": [2, 5, 92, 208, 285], "itself": [2, 3, 4, 5, 7, 11, 12, 13, 14, 23, 42, 54, 56, 57, 63, 65, 67, 70, 71, 78, 82, 87, 105, 124, 128, 129, 144, 169, 176, 195, 197, 200, 201, 204, 207, 209, 210, 214, 222, 223, 226, 233, 238, 239, 240, 247, 249, 252, 268, 285], "_sage_": 2, "basic": [2, 3, 4, 5, 7, 10, 11, 13, 14, 21, 23, 34, 38, 40, 45, 46, 47, 53, 56, 60, 63, 64, 68, 71, 81, 83, 88, 89, 90, 95, 96, 99, 102, 115, 123, 129, 141, 142, 144, 146, 147, 153, 163, 177, 184, 187, 192, 195, 196, 198, 200, 201, 203, 205, 206, 207, 209, 211, 212, 214, 215, 221, 226, 227, 230, 231, 232, 233, 234, 245, 247, 252, 253, 257, 265, 266, 267, 274, 276, 277, 281, 282, 283, 284, 289], "should": [2, 4, 5, 8, 9, 11, 12, 13, 14, 15, 18, 21, 22, 23, 25, 32, 34, 37, 39, 41, 44, 45, 46, 47, 56, 57, 58, 59, 61, 64, 65, 66, 68, 69, 71, 73, 75, 76, 77, 78, 79, 80, 82, 87, 88, 89, 90, 92, 93, 94, 95, 96, 98, 101, 105, 107, 108, 113, 115, 119, 124, 129, 131, 133, 141, 143, 144, 146, 147, 148, 159, 163, 167, 169, 171, 173, 174, 177, 179, 181, 182, 184, 185, 189, 194, 197, 198, 200, 201, 202, 203, 204, 205, 207, 209, 210, 213, 214, 216, 217, 220, 221, 222, 223, 224, 226, 227, 229, 230, 232, 233, 234, 238, 239, 243, 245, 246, 247, 248, 249, 250, 252, 253, 255, 259, 263, 280, 281, 283, 284, 287], "beyond": [2, 11, 12, 21, 27, 59, 81, 105, 143, 201, 204, 223, 226, 287], "control": [2, 7, 9, 13, 15, 17, 21, 23, 45, 47, 65, 66, 69, 90, 95, 96, 143, 146, 159, 163, 174, 175, 179, 210, 211, 215, 222, 227, 233, 252, 276, 280], "workflow": [2, 6, 7, 8, 9, 10, 12, 31, 32, 35, 146, 204, 247, 253, 288], "instruct": [2, 4, 5, 7, 8, 9, 11, 13, 15, 19, 24, 35, 46, 214, 232, 246, 247], "base": [2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 15, 21, 23, 25, 36, 38, 40, 41, 44, 46, 47, 54, 55, 56, 61, 62, 63, 65, 66, 68, 70, 71, 72, 73, 76, 78, 81, 88, 92, 93, 94, 95, 97, 98, 105, 106, 112, 120, 123, 126, 129, 131, 146, 147, 148, 157, 159, 163, 164, 168, 174, 175, 177, 179, 181, 184, 185, 187, 189, 191, 194, 195, 198, 199, 200, 203, 204, 205, 206, 207, 208, 209, 210, 214, 216, 221, 222, 223, 224, 226, 227, 230, 232, 234, 238, 239, 240, 245, 246, 247, 248, 249, 250, 252, 253, 254, 259, 262, 263, 266, 286, 291], "pytest": [2, 3, 11, 12, 13, 242, 248, 250, 253, 278], "entir": [2, 3, 12, 21, 56, 65, 66, 69, 70, 73, 79, 81, 90, 104, 121, 140, 144, 189, 201, 203, 209, 222, 239, 248, 250, 285, 291], "import_modul": [2, 12], "own": [2, 4, 9, 11, 12, 15, 23, 40, 49, 56, 57, 65, 81, 109, 123, 129, 146, 209, 214, 221, 226, 230, 249, 252, 253, 285], "runner": [2, 12, 245], "access": [2, 4, 5, 9, 14, 15, 21, 23, 39, 40, 41, 46, 65, 73, 94, 95, 98, 101, 106, 109, 115, 116, 123, 124, 128, 129, 147, 188, 189, 195, 198, 200, 204, 205, 207, 209, 226, 230, 235, 238, 246, 247, 263, 266, 286, 290], "script": [2, 4, 11, 14, 37, 73, 194, 246], "directori": [2, 4, 5, 7, 8, 11, 12, 36, 41, 46, 230, 245, 246, 255], "prefer": [2, 4, 8, 9, 11, 12, 13, 14, 21, 23, 25, 30, 31, 32, 46, 48, 57, 64, 65, 73, 105, 107, 123, 129, 179, 183, 184, 189, 200, 203, 205, 207, 209, 214, 222, 226, 230, 232, 239, 245, 247, 250, 253, 285, 287], "cloudpickl": 2, "effect": [2, 4, 7, 12, 23, 31, 36, 56, 58, 65, 82, 90, 92, 96, 101, 108, 129, 131, 143, 151, 179, 189, 200, 204, 207, 211, 213, 230, 283], "pickl": 2, "util": [2, 3, 4, 5, 7, 11, 27, 29, 44, 52, 54, 56, 57, 70, 71, 76, 77, 78, 81, 95, 96, 105, 106, 124, 149, 183, 186, 203, 207, 211, 214, 226, 227, 243, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 271, 276, 277], "test_pickl": 2, "py": [2, 3, 4, 11, 12, 21, 45, 65, 76, 90, 92, 101, 157, 159, 200, 203, 205, 211, 214, 221, 224, 230, 231, 240, 243, 245, 250, 253], "necessari": [2, 3, 4, 6, 8, 11, 12, 13, 15, 21, 23, 35, 44, 45, 56, 57, 65, 75, 90, 92, 95, 101, 105, 124, 131, 139, 200, 202, 204, 209, 210, 214, 217, 223, 226, 230, 231, 232, 233, 234, 235, 240, 245, 247, 252, 253, 259, 284, 289], "want": [2, 3, 4, 8, 9, 11, 12, 13, 14, 15, 18, 19, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 36, 42, 44, 46, 47, 48, 49, 57, 65, 66, 72, 77, 79, 81, 84, 90, 92, 96, 98, 101, 102, 105, 106, 113, 115, 118, 125, 129, 146, 162, 172, 173, 176, 179, 182, 184, 191, 193, 197, 198, 200, 202, 203, 204, 207, 209, 210, 211, 213, 214, 215, 221, 222, 224, 226, 227, 230, 231, 232, 233, 234, 235, 240, 243, 245, 247, 249, 252, 253, 264, 266, 269, 280, 281, 283, 285, 286, 287, 288, 290, 291], "check": [2, 3, 4, 5, 7, 8, 9, 11, 14, 15, 17, 18, 19, 21, 22, 23, 28, 32, 34, 40, 41, 44, 45, 46, 48, 51, 54, 56, 57, 58, 63, 64, 65, 66, 70, 73, 77, 88, 90, 94, 95, 96, 98, 101, 102, 105, 115, 120, 121, 129, 143, 146, 159, 167, 179, 181, 182, 187, 195, 200, 201, 203, 204, 205, 207, 209, 210, 216, 222, 224, 226, 230, 231, 232, 233, 234, 238, 239, 243, 245, 247, 250, 252, 262, 266, 283, 291], "pdf": [2, 5, 7, 32, 35, 44, 45, 56, 66, 68, 70, 87, 92, 101, 105, 108, 109, 113, 200, 203, 205, 208, 213, 214, 217, 223, 226, 227, 230, 234, 252, 259], "view": [2, 4, 7, 11, 12, 14, 34, 46, 47, 48, 65, 101, 108, 181, 184, 198, 200, 207, 214, 230, 233, 247, 249, 252], "host": [2, 5], "onlin": [2, 4, 124, 227, 252], "dev": [2, 3, 8, 9, 11, 250], "index": [2, 8, 11, 12, 13, 15, 23, 25, 32, 33, 34, 38, 46, 54, 56, 57, 61, 64, 65, 66, 67, 70, 71, 73, 76, 81, 90, 92, 95, 96, 98, 101, 104, 105, 115, 128, 129, 146, 147, 148, 150, 152, 153, 163, 172, 174, 176, 179, 184, 189, 200, 201, 205, 209, 210, 211, 214, 219, 220, 224, 232, 234, 235, 237, 238, 240, 241, 246, 274], "com": [2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 23, 36, 38, 42, 44, 56, 58, 59, 65, 66, 68, 69, 70, 71, 73, 75, 81, 82, 90, 92, 96, 101, 105, 113, 199, 208, 217, 219, 222, 223, 226, 227, 230, 233, 234, 252, 255, 287], "sympy_benchmark": 2, "readm": 2, "yourself": [2, 7, 11, 12, 23, 34, 46, 131, 248, 281], "reproduc": [2, 12, 25, 210, 245, 291], "result": [2, 4, 8, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 34, 38, 39, 40, 41, 42, 44, 45, 46, 55, 56, 57, 61, 64, 65, 66, 67, 69, 71, 73, 77, 82, 83, 87, 89, 90, 92, 94, 95, 96, 98, 101, 104, 105, 106, 107, 108, 115, 116, 119, 120, 121, 124, 125, 129, 133, 139, 143, 146, 164, 171, 173, 174, 176, 178, 179, 181, 182, 183, 184, 188, 189, 198, 200, 201, 204, 205, 207, 208, 209, 210, 211, 212, 214, 216, 221, 222, 223, 224, 226, 227, 229, 230, 231, 232, 233, 234, 235, 238, 239, 241, 245, 246, 247, 249, 250, 252, 253, 255, 259, 262, 264, 283, 285, 286, 287, 291], "add": [2, 3, 4, 9, 12, 13, 14, 15, 18, 21, 32, 38, 40, 44, 46, 54, 56, 61, 66, 69, 72, 80, 82, 90, 94, 98, 101, 105, 108, 111, 120, 129, 146, 157, 163, 173, 178, 179, 182, 197, 198, 200, 203, 204, 205, 207, 209, 210, 211, 214, 215, 224, 226, 227, 230, 231, 233, 234, 236, 238, 239, 240, 248, 253, 257, 281, 283, 286, 290, 291], "new": [2, 3, 5, 6, 7, 8, 9, 12, 14, 21, 23, 28, 35, 40, 41, 45, 46, 47, 56, 57, 64, 65, 66, 67, 73, 78, 81, 90, 92, 93, 96, 101, 105, 108, 111, 115, 120, 123, 129, 136, 138, 145, 146, 148, 169, 175, 176, 179, 181, 184, 185, 187, 188, 189, 193, 198, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 214, 221, 224, 226, 227, 230, 232, 233, 234, 235, 236, 245, 246, 250, 253, 259, 261, 263, 279, 280, 283, 286, 287, 289], "asv": 2, "airspe": 2, "veloc": [2, 101, 119, 120, 123, 124, 126, 131, 132, 133, 136, 137, 138, 140, 143, 144, 146, 153, 181, 183, 184, 188, 189, 193, 195, 198, 266, 268], "name": [2, 3, 4, 5, 8, 12, 13, 14, 15, 21, 23, 32, 33, 37, 40, 41, 45, 46, 47, 48, 52, 55, 58, 61, 64, 65, 66, 67, 70, 71, 72, 73, 75, 78, 90, 92, 93, 94, 98, 101, 105, 107, 108, 111, 120, 123, 126, 128, 129, 131, 146, 150, 159, 174, 181, 184, 185, 186, 187, 188, 189, 191, 193, 195, 198, 200, 201, 202, 204, 205, 207, 209, 211, 214, 220, 224, 226, 227, 230, 231, 233, 234, 239, 240, 243, 245, 246, 247, 248, 253, 255, 256, 257, 259, 263, 266, 271, 280, 283, 286, 287, 291], "describ": [3, 4, 5, 7, 11, 13, 15, 21, 22, 23, 25, 32, 38, 45, 47, 55, 56, 57, 59, 60, 63, 64, 65, 66, 70, 73, 75, 80, 81, 90, 92, 96, 101, 104, 105, 115, 119, 123, 124, 126, 128, 129, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 158, 179, 184, 188, 189, 195, 197, 198, 201, 204, 207, 209, 215, 221, 224, 226, 227, 230, 233, 234, 238, 247, 252, 253, 259, 261, 266, 281], "step": [3, 8, 9, 23, 24, 35, 44, 46, 56, 60, 61, 64, 65, 66, 73, 89, 90, 92, 101, 105, 106, 124, 136, 139, 141, 146, 147, 181, 193, 198, 199, 200, 204, 205, 207, 209, 210, 214, 215, 216, 219, 222, 223, 224, 226, 227, 230, 232, 234, 239, 246, 252, 253, 281], "properli": [3, 11, 12, 14, 23, 45, 65, 71, 77, 90, 101, 125, 129, 141, 156, 160, 163, 177, 202, 204, 214, 230, 233, 243, 247, 253, 287, 292], "current": [3, 5, 11, 12, 13, 15, 21, 27, 28, 38, 41, 44, 45, 46, 47, 49, 56, 59, 60, 62, 63, 64, 65, 67, 71, 73, 75, 77, 80, 85, 88, 90, 92, 94, 96, 101, 105, 107, 108, 112, 119, 123, 129, 139, 173, 178, 179, 183, 187, 198, 200, 201, 202, 203, 205, 207, 210, 211, 213, 214, 215, 221, 224, 226, 227, 229, 230, 231, 232, 233, 234, 240, 245, 246, 247, 249, 263, 277, 287, 292], "activ": [3, 8, 9, 16, 131, 200, 243, 248, 250], "updat": [3, 11, 13, 15, 32, 36, 65, 133, 159, 169, 172, 173, 175, 199, 203, 207, 210, 214, 227, 240, 250], "continu": [3, 4, 5, 12, 13, 19, 22, 23, 44, 46, 55, 57, 59, 65, 70, 71, 73, 90, 93, 96, 105, 112, 113, 115, 174, 177, 194, 205, 207, 210, 227, 229, 230, 238, 282], "someon": [3, 11, 12, 230, 249, 284], "warn": [3, 4, 15, 23, 65, 66, 80, 107, 189, 198, 202, 214, 230, 232, 243, 245, 247, 251, 252, 278, 287], "screen": [3, 14, 93, 194, 198, 245, 290], "indic": [3, 4, 11, 12, 15, 18, 21, 29, 32, 33, 44, 45, 46, 47, 49, 54, 56, 57, 58, 60, 61, 63, 64, 65, 68, 69, 70, 73, 75, 80, 81, 90, 92, 95, 96, 98, 101, 104, 105, 116, 128, 133, 163, 174, 176, 177, 179, 184, 188, 189, 199, 203, 204, 205, 209, 210, 211, 214, 221, 222, 223, 226, 227, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 245, 246, 247, 252, 287], "remov": [3, 11, 12, 13, 21, 27, 38, 39, 40, 56, 59, 63, 65, 69, 71, 80, 81, 90, 95, 101, 105, 108, 111, 120, 123, 136, 138, 143, 163, 179, 205, 207, 210, 212, 213, 214, 226, 227, 230, 232, 233, 235, 236, 246, 247, 248, 250, 252, 253, 280, 291], "futur": [3, 11, 12, 21, 22, 46, 47, 65, 90, 92, 101, 107, 123, 128, 131, 139, 143, 179, 183, 196, 200, 202, 213, 214, 226, 230, 239, 245, 248, 250, 253, 276, 286, 292], "chanc": [3, 12, 15, 22, 65, 93, 224, 234, 286], "break": [3, 4, 11, 12, 13, 23, 45, 46, 57, 65, 66, 105, 197, 211, 214, 222, 252], "opportun": [3, 4, 226], "messag": [3, 7, 12, 13, 66, 93, 243, 248, 250, 255], "wrong": [3, 5, 11, 12, 13, 56, 65, 66, 73, 75, 101, 189, 204, 230, 248, 283, 287], "answer": [3, 7, 12, 21, 23, 25, 56, 65, 69, 87, 90, 92, 95, 101, 105, 184, 207, 211, 223, 224, 226, 232, 234, 249, 255, 285, 287, 291], "made": [3, 5, 11, 12, 13, 14, 15, 21, 23, 33, 59, 61, 65, 66, 71, 74, 75, 78, 81, 82, 92, 95, 101, 105, 107, 129, 140, 143, 146, 198, 201, 205, 207, 209, 210, 214, 215, 221, 222, 223, 226, 230, 232, 233, 234, 247, 252, 255, 268, 286], "lightli": 3, "fix": [3, 4, 7, 12, 13, 46, 56, 58, 61, 63, 66, 70, 73, 77, 94, 101, 105, 108, 109, 111, 120, 123, 126, 131, 140, 146, 163, 168, 172, 175, 179, 184, 189, 193, 197, 198, 200, 204, 207, 209, 210, 211, 214, 220, 224, 232, 234, 252, 259, 261], "whether": [3, 7, 8, 12, 13, 14, 21, 22, 23, 25, 30, 32, 33, 34, 44, 45, 46, 51, 56, 64, 65, 66, 72, 73, 77, 80, 92, 93, 95, 96, 101, 105, 111, 119, 124, 125, 128, 129, 167, 186, 191, 198, 200, 203, 204, 205, 209, 210, 214, 217, 221, 222, 226, 227, 230, 232, 233, 234, 235, 245, 247, 252, 253, 259, 262, 283, 287], "worth": [3, 21, 23, 124, 189, 264, 266], "pain": 3, "frustrat": 3, "go": [3, 4, 5, 7, 9, 11, 12, 23, 36, 45, 46, 56, 66, 70, 71, 90, 124, 129, 131, 144, 146, 147, 173, 184, 193, 200, 209, 210, 221, 224, 230, 283, 285, 286, 289, 291], "seek": [3, 232], "stabl": [3, 4, 5, 23, 46, 65, 93, 101, 107, 111, 115, 246, 280], "altern": [3, 4, 8, 13, 14, 15, 22, 23, 36, 46, 53, 56, 57, 64, 65, 69, 70, 71, 72, 73, 96, 98, 102, 106, 129, 141, 143, 189, 197, 199, 200, 202, 203, 204, 209, 210, 214, 219, 221, 223, 232, 233, 235, 236, 252, 283, 285, 287], "done": [3, 4, 9, 11, 12, 13, 14, 15, 19, 23, 40, 41, 43, 44, 45, 46, 56, 58, 63, 65, 66, 67, 70, 73, 76, 77, 90, 92, 96, 101, 105, 123, 124, 129, 131, 137, 144, 146, 165, 174, 175, 176, 179, 181, 182, 189, 195, 197, 198, 200, 201, 203, 207, 210, 211, 213, 214, 215, 223, 226, 227, 230, 232, 233, 234, 239, 240, 245, 246, 249, 253, 263, 264, 280, 283, 285, 286, 287], "exist": [3, 7, 11, 13, 14, 19, 21, 23, 31, 34, 44, 45, 46, 49, 56, 65, 69, 75, 77, 80, 81, 82, 83, 92, 95, 101, 105, 111, 169, 195, 198, 200, 201, 202, 203, 207, 209, 214, 221, 222, 224, 227, 230, 232, 233, 245, 253, 264, 285, 287, 292], "necessarili": [3, 4, 21, 42, 65, 66, 67, 90, 92, 95, 124, 201, 202, 209, 210, 212, 226, 230, 232, 233], "supplant": 3, "old": [3, 12, 13, 14, 15, 65, 66, 67, 93, 143, 148, 184, 194, 200, 201, 205, 214, 215, 226, 230, 233, 235, 280], "sometim": [3, 4, 5, 11, 12, 14, 15, 21, 23, 25, 32, 45, 46, 65, 70, 73, 89, 90, 115, 139, 143, 171, 179, 198, 201, 204, 209, 214, 216, 221, 223, 227, 230, 232, 243, 252, 280, 287], "alongsid": [3, 11, 12, 13, 23, 98], "newer": [3, 12, 14, 197, 232], "solveset": [3, 23, 31, 34, 124, 146, 212, 228, 229, 232, 271, 292], "superior": [3, 214], "replac": [3, 4, 9, 12, 13, 14, 15, 21, 44, 46, 56, 64, 65, 66, 69, 70, 71, 73, 75, 79, 92, 95, 96, 101, 105, 106, 107, 119, 121, 123, 146, 168, 174, 189, 201, 207, 210, 211, 215, 221, 223, 224, 226, 230, 232, 233, 240, 241, 252, 253, 255, 280, 289], "older": [3, 5, 12, 14, 88, 129, 204, 214, 232], "solv": [3, 4, 11, 13, 14, 15, 16, 19, 21, 23, 24, 46, 49, 61, 64, 65, 73, 78, 90, 92, 96, 97, 101, 108, 110, 111, 123, 124, 125, 129, 132, 133, 136, 138, 139, 141, 143, 146, 182, 203, 207, 211, 212, 213, 214, 216, 226, 227, 229, 230, 231, 234, 276, 281, 282, 285, 287, 290], "remain": [3, 12, 13, 14, 23, 40, 41, 46, 56, 57, 59, 61, 65, 66, 71, 90, 96, 105, 107, 116, 129, 178, 195, 197, 198, 209, 210, 211, 220, 223, 224, 230, 231, 232, 234, 236, 240, 249, 252, 253, 263, 268, 280, 283, 285, 286, 287], "intact": [3, 13, 46, 246], "cogniz": 3, "properti": [3, 14, 18, 23, 25, 30, 32, 38, 40, 41, 44, 45, 46, 47, 48, 49, 53, 54, 56, 57, 58, 59, 60, 64, 65, 66, 67, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 88, 90, 92, 96, 98, 101, 105, 108, 109, 111, 112, 115, 120, 123, 124, 126, 128, 144, 146, 148, 150, 153, 154, 157, 158, 163, 164, 165, 167, 168, 175, 177, 179, 181, 183, 184, 186, 187, 188, 189, 190, 191, 195, 198, 199, 200, 202, 203, 204, 205, 207, 209, 210, 213, 216, 217, 220, 221, 222, 224, 227, 230, 233, 234, 239, 240, 245, 247, 248, 259, 262, 263, 264, 266, 268, 287], "attr": [3, 46], "imposs": [3, 4, 12, 13, 14, 23, 32, 65, 204, 223, 230, 231, 243, 283, 291], "later": [3, 13, 19, 46, 56, 90, 95, 96, 119, 125, 126, 131, 133, 134, 141, 143, 146, 153, 188, 197, 204, 207, 213, 214, 215, 224, 226, 230, 249, 263, 280, 281, 283, 285, 286, 291], "unsur": [3, 4, 12], "about": [3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 16, 19, 21, 22, 23, 25, 30, 32, 34, 35, 36, 38, 39, 41, 42, 45, 46, 56, 57, 58, 59, 65, 69, 71, 73, 75, 76, 77, 79, 80, 81, 85, 87, 91, 92, 94, 101, 105, 108, 109, 115, 119, 120, 121, 123, 124, 125, 126, 128, 129, 133, 143, 144, 174, 176, 177, 179, 183, 188, 189, 197, 198, 199, 201, 203, 204, 209, 211, 214, 216, 221, 226, 227, 228, 230, 234, 238, 239, 245, 246, 247, 248, 249, 250, 259, 261, 263, 266, 267, 274, 277, 280, 282, 283, 285, 286, 287, 291], "option": [3, 4, 5, 8, 11, 12, 15, 23, 25, 27, 39, 41, 44, 46, 56, 63, 64, 65, 66, 67, 68, 69, 71, 74, 75, 78, 79, 81, 82, 84, 92, 93, 96, 98, 101, 102, 105, 106, 107, 108, 113, 115, 119, 120, 121, 123, 124, 125, 128, 144, 146, 152, 163, 168, 169, 171, 174, 176, 181, 183, 188, 189, 194, 200, 201, 202, 203, 204, 205, 209, 210, 211, 213, 214, 215, 216, 217, 219, 221, 222, 223, 226, 227, 230, 231, 232, 233, 234, 236, 239, 240, 245, 246, 247, 250, 252, 253, 259, 284, 290, 291], "mark": [3, 4, 5, 113, 152, 164, 227, 243, 248, 250], "explicitli": [3, 12, 13, 14, 21, 23, 46, 56, 57, 65, 66, 68, 71, 73, 78, 82, 98, 101, 106, 115, 129, 144, 189, 200, 202, 204, 205, 207, 210, 214, 226, 230, 232, 250, 283, 287, 290, 292], "privat": [3, 4, 65, 66, 129, 200, 247], "With": [3, 13, 15, 22, 36, 46, 48, 64, 65, 69, 90, 105, 132, 133, 134, 140, 142, 143, 152, 176, 179, 198, 200, 201, 202, 204, 205, 212, 213, 214, 221, 226, 235, 252, 285, 286], "being": [3, 5, 12, 14, 15, 17, 21, 22, 42, 44, 46, 56, 57, 63, 64, 65, 66, 70, 71, 73, 75, 77, 78, 81, 82, 90, 95, 96, 101, 102, 105, 108, 109, 111, 119, 128, 129, 131, 143, 144, 146, 147, 175, 184, 188, 191, 195, 197, 198, 199, 200, 201, 203, 204, 209, 210, 211, 213, 214, 223, 224, 226, 227, 230, 231, 232, 233, 234, 240, 243, 245, 249, 250, 252, 253, 255, 259, 264, 268, 285, 287], "decid": [3, 4, 9, 19, 21, 22, 23, 25, 45, 64, 96, 119, 143, 172, 204, 207, 209, 210, 214, 230, 233, 247, 287], "reason": [3, 5, 11, 12, 13, 14, 17, 21, 22, 23, 31, 32, 38, 46, 57, 63, 65, 69, 73, 90, 93, 99, 101, 124, 125, 129, 131, 136, 139, 143, 150, 184, 194, 198, 203, 204, 207, 208, 211, 214, 222, 224, 226, 230, 233, 243, 249, 250, 252, 253, 280, 281, 285, 286, 287], "confus": [3, 5, 12, 13, 14, 21, 28, 65, 70, 95, 152, 198, 202, 210, 233, 280, 281, 283], "unnecessari": [3, 4, 5, 12, 42, 46, 210, 213, 234, 245, 284], "redund": [3, 12, 21, 56, 63, 95, 101, 230, 247], "usabl": [3, 32, 204, 205, 214, 233, 285], "breakag": 3, "serious": 3, "taken": [3, 12, 14, 46, 47, 48, 53, 56, 63, 64, 65, 70, 71, 73, 82, 96, 105, 115, 117, 119, 120, 143, 146, 176, 182, 189, 193, 199, 200, 204, 209, 210, 214, 217, 221, 223, 224, 233, 234, 239, 247, 252, 259], "commun": [3, 5, 7, 11, 36, 199, 230, 232, 234, 287], "Be": [3, 4, 8, 23, 44, 65, 95, 101, 207, 230, 233, 241, 253], "sure": [3, 4, 5, 8, 9, 11, 12, 23, 46, 56, 65, 77, 128, 129, 159, 184, 210, 211, 221, 230, 232, 233, 246, 252, 283, 286, 291], "inde": [3, 12, 19, 23, 53, 56, 64, 90, 201, 224, 230, 241, 245, 285], "right": [3, 4, 5, 8, 11, 12, 13, 15, 19, 23, 26, 27, 30, 32, 38, 44, 46, 47, 56, 57, 61, 65, 66, 68, 70, 71, 73, 81, 82, 90, 92, 95, 96, 101, 104, 105, 107, 108, 109, 115, 124, 128, 129, 143, 146, 147, 151, 158, 163, 165, 167, 168, 173, 176, 179, 188, 189, 195, 198, 199, 200, 201, 203, 209, 210, 211, 212, 214, 216, 217, 221, 222, 224, 230, 231, 233, 234, 245, 247, 249, 252, 266, 281, 285, 287, 291], "again": [3, 8, 9, 12, 15, 19, 22, 48, 57, 65, 80, 105, 129, 131, 174, 175, 188, 189, 197, 201, 202, 209, 217, 224, 230, 243, 263, 283, 291], "second": [3, 5, 9, 11, 12, 14, 15, 19, 21, 22, 23, 25, 27, 29, 30, 32, 34, 37, 38, 41, 44, 46, 56, 57, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 73, 75, 78, 79, 81, 92, 101, 105, 106, 108, 109, 113, 115, 116, 119, 120, 123, 124, 126, 129, 133, 136, 138, 139, 140, 142, 144, 150, 152, 153, 156, 160, 165, 168, 173, 174, 176, 177, 182, 183, 184, 186, 188, 189, 190, 197, 198, 200, 203, 204, 207, 208, 209, 210, 214, 216, 224, 226, 227, 230, 232, 233, 234, 235, 236, 252, 253, 259, 262, 263, 264, 276, 280, 285, 286, 287], "know": [3, 4, 5, 12, 13, 14, 15, 21, 22, 23, 25, 32, 33, 34, 39, 41, 45, 48, 57, 65, 66, 69, 77, 82, 90, 92, 101, 105, 129, 144, 147, 173, 177, 181, 182, 184, 189, 197, 198, 200, 210, 211, 213, 214, 224, 226, 230, 232, 233, 234, 248, 252, 253, 264, 280, 281, 283, 284, 285, 286, 289, 291], "stop": [3, 8, 11, 46, 47, 57, 65, 101, 105, 200, 220, 222, 230, 234], "after": [3, 4, 5, 8, 9, 11, 12, 13, 15, 36, 38, 40, 41, 45, 47, 53, 56, 57, 61, 63, 64, 65, 66, 67, 71, 80, 82, 87, 92, 96, 101, 105, 107, 108, 115, 140, 141, 143, 146, 148, 152, 164, 176, 184, 188, 195, 198, 203, 207, 209, 210, 211, 212, 214, 215, 220, 227, 230, 231, 232, 233, 235, 245, 248, 253, 255, 259, 262, 266, 280, 281, 283, 287, 291], "count": [3, 5, 14, 57, 64, 65, 66, 70, 75, 95, 101, 104, 105, 174, 210, 222, 223, 226, 233, 234, 240, 249, 252], "basi": [3, 65, 67, 94, 98, 101, 120, 126, 136, 138, 164, 173, 174, 176, 179, 181, 184, 187, 188, 189, 195, 197, 199, 201, 203, 205, 210, 213, 224, 226, 232, 233, 235, 240, 262, 263, 266, 289], "exact": [3, 11, 12, 13, 14, 15, 21, 23, 31, 42, 64, 65, 66, 69, 75, 80, 87, 90, 92, 96, 101, 108, 146, 173, 204, 205, 207, 210, 221, 226, 230, 232, 245, 255, 283, 285, 290], "rule": [3, 5, 11, 12, 13, 19, 21, 23, 46, 56, 57, 64, 65, 73, 88, 90, 92, 95, 96, 101, 108, 129, 160, 163, 184, 189, 195, 198, 199, 211, 213, 214, 215, 220, 224, 226, 230, 240, 252, 253, 266, 283, 286], "doesn": [3, 4, 12, 13, 15, 23, 25, 46, 89, 129, 133, 143, 146, 198, 202, 211, 213, 223, 226, 233, 292], "constitut": [3, 5, 14, 92, 105, 214], "yet": [3, 9, 11, 15, 21, 23, 39, 41, 44, 45, 69, 92, 143, 159, 201, 204, 205, 209, 211, 213, 222, 230, 233, 281], "fulli": [3, 4, 11, 13, 21, 56, 65, 82, 92, 95, 107, 108, 109, 123, 129, 146, 179, 197, 204, 205, 211, 221, 234, 240, 256], "codifi": 3, "clean": [3, 245], "distinct": [3, 5, 14, 17, 21, 23, 33, 46, 56, 57, 65, 66, 70, 78, 90, 95, 101, 105, 128, 197, 204, 209, 210, 214, 222, 224, 291], "well": [3, 4, 5, 7, 11, 13, 14, 15, 17, 19, 21, 23, 36, 42, 44, 45, 46, 47, 48, 49, 57, 64, 65, 70, 71, 73, 92, 96, 99, 101, 111, 116, 119, 123, 129, 131, 133, 134, 143, 144, 169, 178, 181, 182, 188, 197, 199, 200, 201, 203, 204, 205, 207, 209, 214, 221, 222, 223, 224, 226, 230, 232, 233, 245, 246, 263, 264, 268, 283, 285, 286, 291], "categor": [3, 25, 101, 201], "issu": [3, 5, 7, 12, 13, 14, 15, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 36, 37, 44, 64, 65, 82, 92, 95, 101, 106, 125, 139, 159, 196, 199, 208, 209, 211, 214, 222, 223, 232, 233, 245, 247, 249, 250, 252, 255, 276, 282, 283, 286, 291], "here": [3, 4, 5, 7, 9, 11, 12, 13, 14, 17, 19, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 35, 36, 40, 41, 46, 47, 49, 54, 55, 56, 57, 63, 64, 65, 66, 67, 69, 70, 71, 73, 81, 82, 83, 87, 88, 90, 92, 95, 96, 101, 104, 105, 106, 107, 108, 111, 115, 119, 124, 129, 130, 131, 136, 137, 138, 141, 143, 144, 146, 147, 169, 174, 179, 188, 194, 195, 197, 198, 200, 201, 204, 205, 207, 209, 210, 211, 214, 215, 221, 223, 224, 226, 227, 230, 232, 233, 234, 238, 239, 246, 247, 249, 250, 252, 253, 264, 266, 268, 279, 280, 281, 283, 285, 286, 287, 289, 290, 291], "gener": [3, 8, 11, 12, 13, 14, 15, 17, 19, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 40, 42, 43, 44, 45, 47, 48, 49, 50, 53, 54, 56, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 75, 79, 81, 83, 88, 90, 92, 93, 94, 95, 98, 101, 105, 106, 107, 115, 119, 120, 123, 124, 125, 128, 129, 131, 132, 133, 134, 136, 138, 139, 140, 142, 143, 144, 146, 147, 151, 162, 163, 164, 165, 168, 173, 174, 177, 178, 179, 184, 186, 189, 190, 193, 194, 195, 197, 199, 200, 201, 202, 203, 205, 207, 210, 211, 212, 213, 214, 215, 216, 220, 223, 224, 226, 227, 229, 230, 231, 232, 234, 239, 240, 246, 247, 249, 250, 251, 252, 253, 259, 263, 264, 266, 267, 268, 274, 281, 283, 284, 285, 286, 287, 291, 292], "guidelin": [3, 11, 34, 230], "exhaust": [3, 21, 224, 252, 284], "alwai": [3, 4, 5, 11, 12, 13, 14, 15, 21, 22, 23, 30, 36, 38, 45, 56, 57, 64, 65, 66, 67, 69, 71, 73, 75, 77, 80, 81, 89, 90, 92, 95, 96, 101, 104, 105, 111, 115, 116, 128, 129, 131, 133, 137, 147, 179, 181, 184, 185, 195, 197, 201, 202, 204, 205, 207, 209, 210, 214, 215, 216, 222, 223, 224, 226, 227, 230, 231, 232, 233, 234, 241, 245, 247, 252, 253, 259, 261, 266, 281, 283, 284, 285, 286, 291], "posit": [3, 11, 12, 13, 14, 15, 21, 22, 23, 25, 29, 39, 40, 41, 42, 43, 45, 46, 47, 49, 54, 56, 57, 58, 60, 61, 64, 65, 66, 67, 69, 70, 71, 73, 75, 77, 78, 81, 90, 92, 94, 95, 96, 97, 101, 102, 104, 105, 108, 109, 111, 115, 117, 123, 126, 129, 131, 133, 136, 138, 140, 143, 144, 146, 148, 151, 153, 157, 174, 177, 179, 190, 191, 193, 195, 197, 198, 201, 202, 203, 204, 205, 207, 209, 210, 211, 213, 214, 219, 220, 222, 223, 224, 226, 227, 230, 232, 233, 234, 235, 240, 252, 253, 259, 262, 263, 264, 266, 268, 269, 287, 291, 292], "convent": [3, 4, 5, 23, 32, 56, 57, 61, 64, 65, 66, 70, 71, 73, 75, 80, 90, 92, 95, 107, 108, 109, 111, 115, 118, 131, 146, 148, 152, 173, 174, 176, 181, 182, 195, 200, 214, 230, 231, 233, 234, 240, 268, 283, 291], "defin": [3, 4, 5, 11, 12, 13, 14, 15, 17, 19, 21, 22, 34, 37, 38, 40, 41, 44, 46, 47, 48, 49, 55, 56, 57, 60, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 88, 90, 92, 93, 96, 98, 101, 105, 108, 109, 113, 119, 120, 123, 126, 128, 129, 131, 132, 136, 138, 139, 140, 144, 146, 147, 150, 156, 158, 160, 165, 168, 174, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 213, 214, 216, 217, 220, 221, 222, 224, 226, 227, 230, 232, 233, 234, 235, 239, 240, 246, 247, 248, 252, 253, 254, 255, 259, 261, 262, 263, 264, 265, 266, 268, 269, 283, 285, 291], "And": [3, 11, 12, 13, 22, 23, 27, 40, 56, 57, 64, 65, 66, 73, 90, 95, 96, 101, 104, 123, 151, 198, 200, 202, 210, 211, 214, 222, 226, 227, 232, 233, 234, 252, 253, 264, 291], "aren": [3, 11, 12, 13, 14, 23, 46, 65, 129, 213, 233], "don": [3, 11, 12, 13, 15, 22, 23, 41, 46, 90, 95, 101, 106, 107, 119, 129, 188, 197, 198, 204, 214, 224, 233, 235, 243, 248, 268, 280, 281, 285, 286, 291], "onli": [3, 4, 5, 8, 9, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 25, 28, 29, 30, 31, 33, 34, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 51, 54, 55, 56, 57, 58, 59, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 75, 76, 78, 79, 81, 82, 83, 88, 90, 92, 93, 94, 95, 96, 101, 102, 105, 106, 107, 111, 113, 115, 121, 123, 124, 129, 131, 132, 133, 135, 136, 138, 140, 141, 143, 144, 147, 152, 154, 173, 174, 178, 179, 181, 184, 188, 189, 191, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 226, 227, 230, 231, 232, 234, 235, 238, 239, 240, 241, 243, 245, 246, 247, 248, 249, 250, 252, 253, 254, 259, 262, 264, 266, 268, 269, 280, 281, 283, 284, 286, 287, 291, 292], "form": [3, 5, 11, 12, 13, 14, 19, 21, 23, 30, 31, 38, 41, 42, 43, 44, 46, 47, 55, 56, 57, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 78, 81, 85, 87, 88, 90, 92, 94, 96, 98, 100, 101, 105, 107, 108, 109, 111, 112, 115, 119, 120, 123, 124, 125, 128, 129, 131, 133, 136, 138, 139, 140, 141, 142, 144, 146, 147, 156, 159, 160, 161, 163, 173, 174, 177, 179, 181, 184, 187, 188, 189, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 220, 222, 223, 224, 226, 227, 230, 231, 232, 233, 234, 239, 240, 245, 246, 252, 259, 262, 263, 265, 266, 268, 274, 281, 285, 286, 287, 290, 291, 292], "differ": [3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 17, 18, 20, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 37, 45, 46, 47, 48, 54, 55, 56, 57, 61, 64, 65, 66, 67, 69, 70, 71, 73, 76, 78, 80, 81, 85, 87, 89, 90, 92, 93, 94, 95, 98, 101, 105, 106, 107, 108, 113, 115, 119, 120, 124, 126, 129, 131, 135, 143, 147, 151, 152, 164, 165, 173, 174, 177, 179, 181, 183, 184, 188, 189, 190, 193, 194, 195, 198, 200, 201, 202, 203, 205, 207, 209, 210, 211, 213, 214, 215, 216, 217, 219, 221, 222, 223, 226, 227, 230, 231, 232, 233, 234, 235, 238, 240, 243, 245, 246, 247, 248, 249, 250, 252, 253, 259, 262, 266, 268, 282, 283, 285, 286, 287, 290, 291], "equival": [3, 12, 13, 14, 15, 17, 21, 22, 23, 30, 32, 38, 42, 46, 47, 55, 56, 61, 65, 66, 69, 71, 73, 90, 92, 101, 105, 107, 112, 113, 115, 123, 129, 162, 173, 176, 179, 182, 183, 189, 194, 198, 200, 201, 202, 204, 205, 209, 210, 214, 221, 222, 226, 227, 230, 232, 233, 235, 236, 239, 240, 249, 253, 255, 256], "same": [3, 4, 5, 8, 11, 12, 13, 14, 15, 19, 21, 22, 23, 25, 27, 29, 32, 38, 40, 41, 42, 44, 45, 46, 48, 54, 55, 56, 57, 61, 64, 65, 66, 67, 70, 72, 73, 75, 78, 79, 80, 81, 82, 87, 88, 90, 92, 94, 95, 96, 98, 101, 105, 107, 108, 109, 115, 116, 119, 120, 123, 127, 129, 133, 136, 137, 140, 143, 163, 165, 173, 176, 177, 179, 181, 182, 183, 184, 186, 187, 188, 189, 191, 194, 195, 197, 198, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213, 214, 215, 221, 222, 223, 224, 226, 227, 230, 231, 232, 233, 234, 235, 239, 240, 241, 243, 245, 247, 248, 249, 250, 252, 253, 255, 259, 261, 263, 264, 268, 281, 283, 286, 287, 290, 291], "intern": [3, 13, 14, 15, 21, 22, 27, 44, 46, 47, 56, 65, 68, 69, 70, 73, 81, 82, 85, 97, 101, 105, 109, 111, 113, 131, 143, 144, 152, 173, 174, 184, 201, 203, 205, 206, 208, 210, 212, 214, 224, 226, 229, 230, 231, 232, 233, 234, 238, 240, 243, 247, 249, 252, 277, 286, 290], "Such": [3, 4, 12, 21, 46, 65, 81, 133, 201, 202, 209, 215, 223, 224, 226, 280, 286], "prefix": [3, 11, 46, 65, 101, 105, 183, 186, 187, 204, 207, 211, 214, 227, 230, 246, 247, 252, 276], "underscor": [3, 4, 12, 13, 65, 101, 230, 240, 248], "_": [3, 4, 5, 11, 13, 15, 17, 19, 23, 40, 41, 45, 53, 54, 56, 57, 58, 61, 64, 65, 66, 67, 68, 69, 70, 71, 73, 76, 78, 79, 80, 81, 90, 92, 95, 96, 97, 98, 99, 101, 103, 105, 107, 115, 141, 144, 146, 158, 179, 184, 188, 194, 197, 199, 205, 209, 210, 213, 214, 215, 217, 221, 222, 223, 224, 226, 227, 230, 231, 232, 235, 236, 252, 262, 264, 290], "univers": [3, 14, 46, 199, 208, 222, 227, 232, 233], "adher": [3, 5, 90], "codebas": [3, 12, 13, 21, 204, 243], "anyth": [3, 4, 5, 12, 13, 15, 23, 44, 46, 65, 66, 76, 80, 101, 129, 153, 163, 211, 214, 220, 222, 226, 230, 232, 246, 252, 255, 283], "were": [3, 5, 11, 12, 13, 14, 15, 17, 21, 23, 45, 48, 57, 59, 65, 66, 71, 82, 90, 96, 101, 105, 106, 107, 119, 128, 143, 188, 195, 198, 201, 205, 207, 208, 209, 210, 213, 214, 215, 223, 226, 232, 252, 253, 255, 283, 285, 286, 290, 291], "incorrect": [3, 5, 11, 12, 13, 22, 23, 31, 56, 65, 75, 105, 113, 193, 205, 230, 233, 246, 249, 250], "bug": [3, 4, 7, 11, 12, 21, 23, 36, 44, 66, 204, 222, 230, 233, 283], "despit": [3, 25, 34, 65, 291], "sai": [3, 5, 11, 14, 15, 19, 21, 47, 55, 64, 65, 66, 94, 119, 124, 129, 139, 146, 184, 197, 198, 201, 202, 203, 207, 209, 213, 214, 221, 224, 227, 230, 232, 233, 234, 253, 280, 285, 291], "befor": [3, 4, 7, 9, 10, 11, 12, 13, 14, 15, 21, 22, 23, 32, 34, 36, 46, 56, 57, 59, 61, 65, 66, 67, 73, 93, 96, 101, 105, 107, 108, 109, 119, 125, 129, 131, 132, 133, 136, 137, 143, 146, 148, 179, 188, 194, 198, 202, 204, 209, 210, 214, 215, 221, 222, 226, 227, 230, 232, 233, 234, 241, 245, 248, 252, 253, 263, 284, 285, 286, 291], "recent": [3, 12, 13, 15, 18, 21, 22, 23, 25, 27, 29, 30, 31, 32, 33, 34, 39, 40, 41, 46, 47, 57, 65, 66, 69, 73, 75, 92, 95, 96, 97, 98, 99, 101, 103, 104, 107, 115, 199, 201, 204, 205, 207, 210, 213, 221, 222, 230, 232, 233, 243, 246, 248, 250, 252, 253, 255, 283, 287], "best": [3, 7, 11, 12, 15, 25, 29, 31, 32, 35, 36, 46, 65, 73, 90, 92, 106, 178, 200, 211, 214, 223, 224, 226, 230, 233, 238, 246, 279, 283, 284, 290, 291], "determin": [3, 5, 13, 14, 17, 19, 21, 22, 23, 25, 28, 29, 30, 33, 39, 41, 42, 43, 44, 46, 47, 48, 49, 56, 65, 66, 67, 68, 69, 71, 75, 76, 78, 80, 81, 92, 93, 94, 98, 101, 105, 107, 108, 109, 115, 121, 123, 125, 126, 128, 138, 144, 147, 158, 171, 173, 175, 176, 179, 182, 184, 189, 195, 200, 201, 202, 203, 207, 209, 210, 214, 220, 221, 222, 224, 226, 227, 229, 230, 232, 233, 234, 238, 250, 252, 259, 266, 269, 283, 291], "someth": [3, 4, 5, 9, 11, 13, 14, 15, 21, 22, 23, 34, 44, 46, 65, 66, 69, 75, 90, 95, 96, 101, 105, 119, 129, 130, 146, 172, 185, 188, 200, 204, 205, 213, 221, 222, 226, 230, 233, 245, 247, 253, 280, 283, 285, 286, 289], "re": [3, 11, 15, 23, 43, 44, 46, 56, 57, 65, 66, 69, 71, 73, 90, 92, 101, 189, 191, 195, 201, 207, 214, 215, 216, 222, 223, 224, 230, 232, 245, 262, 264, 281, 283, 286], "harm": 3, "even": [3, 4, 5, 9, 11, 12, 14, 15, 18, 21, 23, 25, 28, 31, 32, 33, 34, 39, 40, 41, 42, 43, 46, 47, 48, 53, 56, 57, 64, 65, 66, 69, 70, 71, 73, 77, 81, 90, 92, 95, 96, 101, 104, 105, 116, 129, 139, 164, 175, 182, 184, 189, 199, 202, 203, 204, 205, 207, 209, 210, 211, 214, 215, 222, 223, 224, 226, 227, 230, 232, 233, 241, 245, 268, 280, 281, 283, 285, 286, 291, 292], "might": [3, 4, 9, 11, 12, 13, 14, 15, 17, 21, 22, 23, 27, 31, 44, 65, 69, 71, 78, 87, 90, 98, 101, 105, 107, 119, 129, 130, 146, 159, 189, 197, 200, 204, 205, 210, 211, 214, 215, 222, 223, 224, 226, 227, 232, 233, 234, 246, 247, 250, 252, 255, 280, 283, 285, 286, 288, 291], "while": [3, 4, 7, 11, 12, 14, 15, 21, 23, 26, 27, 32, 34, 45, 46, 47, 56, 57, 58, 61, 64, 65, 66, 67, 69, 70, 71, 75, 79, 81, 89, 95, 96, 101, 105, 106, 107, 108, 111, 120, 123, 124, 125, 129, 133, 143, 163, 183, 184, 189, 195, 201, 209, 212, 214, 230, 233, 245, 247, 249, 252, 268, 280, 286, 287], "peopl": [3, 4, 7, 9, 11, 68, 73, 92, 101, 184, 234], "upgrad": [3, 37], "immedi": [3, 12, 21, 30, 48, 56, 65, 90, 95, 179, 201, 204, 235, 246, 253], "fire": 3, "uncondition": [3, 12], "correct": [3, 4, 5, 11, 12, 13, 15, 22, 23, 28, 30, 32, 46, 54, 56, 62, 64, 65, 69, 71, 89, 90, 92, 101, 105, 115, 129, 143, 197, 198, 207, 210, 221, 227, 230, 232, 233, 238, 246, 252, 283, 290], "question": [3, 4, 5, 7, 11, 12, 19, 21, 64, 67, 75, 82, 90, 92, 95, 105, 119, 181, 184, 188, 201, 204, 209, 224, 233, 252, 255], "read": [3, 4, 5, 9, 11, 12, 13, 23, 34, 57, 71, 90, 105, 109, 146, 197, 198, 203, 204, 205, 211, 214, 227, 240, 241, 249, 253, 256, 284, 290, 291], "previou": [3, 4, 12, 13, 23, 49, 54, 55, 56, 57, 60, 65, 70, 71, 92, 95, 96, 104, 120, 143, 181, 197, 198, 207, 220, 227, 231, 235, 252, 284, 286, 291], "unchang": [3, 13, 14, 23, 56, 57, 65, 92, 101, 115, 183, 210, 214, 220, 223, 226, 233, 280], "dure": [3, 12, 13, 15, 37, 46, 65, 66, 96, 101, 105, 107, 120, 124, 146, 147, 197, 209, 214, 223, 232, 233, 250, 252], "period": [3, 4, 11, 13, 29, 44, 65, 66, 71, 90, 105, 115, 143, 153, 175, 182, 209, 214, 217, 220, 229, 233, 234, 252], "silenc": [3, 243, 250], "filterwarn": [3, 13], "caus": [3, 5, 12, 13, 14, 23, 32, 36, 65, 66, 69, 71, 101, 129, 137, 143, 197, 214, 223, 230, 231, 232, 249, 250, 287], "anoth": [3, 4, 5, 11, 12, 13, 14, 15, 18, 19, 21, 22, 23, 25, 27, 29, 30, 31, 32, 33, 42, 45, 46, 57, 62, 64, 65, 66, 67, 71, 73, 75, 76, 77, 78, 79, 80, 81, 82, 90, 92, 98, 101, 105, 108, 109, 120, 124, 126, 140, 144, 168, 183, 184, 186, 189, 193, 197, 198, 200, 202, 204, 205, 207, 209, 210, 211, 214, 215, 221, 222, 224, 230, 232, 233, 234, 246, 247, 253, 259, 263, 264, 268, 280, 283, 285, 286, 291, 292], "over": [3, 5, 6, 7, 10, 11, 12, 13, 15, 18, 23, 25, 28, 35, 38, 44, 45, 46, 47, 56, 57, 60, 64, 65, 66, 67, 68, 69, 70, 79, 81, 88, 90, 94, 95, 98, 101, 102, 105, 108, 109, 117, 123, 129, 146, 147, 158, 174, 177, 179, 183, 184, 195, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 214, 217, 219, 221, 226, 227, 229, 230, 232, 233, 234, 235, 236, 238, 239, 248, 252, 253, 259, 262, 266, 269, 285, 289, 291], "defeat": [3, 12, 230], "three": [3, 14, 15, 17, 19, 21, 23, 32, 33, 38, 42, 46, 56, 57, 58, 61, 65, 66, 70, 73, 75, 79, 80, 81, 90, 94, 95, 108, 109, 123, 128, 132, 135, 136, 137, 152, 174, 176, 181, 189, 193, 197, 198, 199, 200, 201, 202, 205, 207, 210, 214, 224, 226, 227, 232, 233, 234, 245, 259, 261, 266, 269, 283, 286, 291], "natur": [3, 12, 15, 21, 30, 38, 42, 46, 47, 48, 56, 65, 66, 70, 71, 99, 105, 129, 181, 183, 184, 201, 204, 205, 207, 209, 211, 214, 222, 223, 227, 233, 234, 252, 269, 286, 291], "heavili": [3, 221, 231], "consider": [3, 12, 22, 65, 106, 119, 204, 213, 222, 227, 230, 263], "easi": [3, 7, 11, 12, 14, 53, 57, 65, 73, 90, 92, 106, 133, 139, 197, 201, 204, 209, 214, 221, 224, 227, 230, 233, 238, 239, 240, 280, 281, 283, 284, 285, 286, 287, 290], "account": [3, 14, 71, 101, 217, 226, 230], "nonetheless": [3, 66, 181, 226, 230], "deprecat": 3, "won": [3, 11, 12, 15, 23, 46, 226, 233, 286], "until": [3, 12, 19, 21, 25, 27, 28, 29, 30, 31, 32, 33, 37, 57, 59, 65, 66, 75, 92, 101, 105, 143, 198, 207, 210, 223, 230, 283], "come": [3, 11, 12, 30, 36, 56, 61, 63, 64, 65, 71, 73, 90, 92, 101, 106, 119, 129, 131, 141, 182, 198, 201, 204, 207, 209, 210, 224, 227, 230, 233, 243, 245, 250, 253, 283, 285, 286, 289, 291], "minimum": [3, 13, 29, 44, 46, 56, 57, 59, 61, 65, 66, 69, 71, 101, 119, 124, 131, 163, 188, 200, 202, 207, 233, 234, 248, 281], "longer": [3, 4, 11, 12, 15, 20, 65, 75, 105, 133, 143, 202, 207, 214, 223, 226, 252, 255, 283, 291], "especi": [3, 4, 12, 23, 34, 64, 101, 119, 129, 144, 146, 173, 198, 226, 230, 232, 245, 280, 281], "hard": [3, 11, 12, 14, 21, 57, 66, 101, 105, 129, 179, 204, 214, 221, 230, 233, 283, 285], "migrat": 3, "lengthen": 3, "impos": [3, 109], "signific": [3, 15, 21, 46, 65, 66, 69, 92, 101, 119, 173, 188, 204, 233, 253, 286], "mainten": [3, 41], "burden": [3, 214], "keep": [3, 4, 11, 12, 15, 18, 23, 61, 65, 66, 69, 70, 73, 90, 101, 124, 132, 140, 144, 163, 179, 188, 200, 203, 204, 205, 210, 221, 222, 224, 226, 230, 232, 235, 240, 268, 281, 286], "firstli": [3, 13, 21, 23, 224], "regular": [3, 11, 12, 13, 15, 21, 22, 47, 53, 65, 66, 69, 73, 81, 87, 88, 92, 105, 129, 173, 204, 211, 230, 240, 245, 290, 291], "schedul": 3, "singl": [3, 5, 8, 11, 13, 14, 19, 21, 23, 26, 32, 37, 38, 45, 46, 49, 56, 65, 66, 70, 71, 73, 78, 79, 81, 82, 83, 90, 92, 95, 96, 101, 104, 107, 115, 116, 121, 123, 133, 140, 159, 163, 165, 173, 176, 179, 186, 189, 193, 200, 201, 203, 204, 205, 207, 209, 210, 214, 215, 216, 223, 224, 226, 227, 229, 230, 231, 232, 233, 234, 235, 239, 245, 247, 249, 252, 253, 255, 281, 283, 286, 287, 292], "Being": [3, 61, 75, 81, 204], "assur": [3, 105, 210], "suffici": [3, 4, 11, 21, 45, 46, 56, 57, 61, 65, 101, 184, 205, 217, 221, 230, 234, 249, 291], "regardless": [3, 4, 23, 57, 65, 92, 105, 207, 222, 226, 252, 263, 268, 291], "often": [3, 4, 11, 12, 14, 21, 22, 23, 25, 31, 45, 46, 47, 55, 65, 73, 75, 77, 90, 92, 101, 105, 106, 115, 139, 143, 144, 197, 198, 201, 202, 204, 207, 210, 215, 221, 222, 227, 230, 234, 252, 253, 280, 285, 286, 287, 291], "happen": [3, 4, 7, 11, 12, 13, 14, 19, 21, 22, 23, 29, 38, 46, 57, 64, 65, 69, 77, 80, 89, 123, 174, 178, 184, 201, 207, 209, 210, 213, 222, 226, 230, 234, 253, 264, 283, 290, 291], "secondli": [3, 23, 224], "rigor": [3, 73, 198, 247], "scheme": [3, 8, 21, 57, 64, 69, 199, 200, 207, 210, 239], "semant": [3, 14, 21, 98, 232], "surfac": [3, 71, 73, 79, 90, 109, 123, 148, 152, 179, 200, 226, 259], "enough": [3, 4, 11, 27, 29, 56, 65, 69, 92, 101, 104, 105, 115, 129, 146, 205, 207, 214, 230, 281, 283], "virtual": [3, 8, 36, 65, 81, 198, 284], "encod": [3, 13, 49, 57, 63, 66, 95, 214, 245, 249, 252], "backport": 3, "prior": [3, 12, 13, 36, 193, 210, 226, 287], "extrem": [3, 12, 30, 56, 69, 75, 81, 92, 98, 111, 143, 198, 226, 234], "accur": [3, 13, 15, 19, 23, 25, 44, 56, 65, 69, 70, 87, 92, 112, 200, 221, 280, 287], "model": [3, 14, 69, 95, 105, 115, 125, 131, 133, 134, 135, 151, 210, 223, 234], "final": [3, 4, 5, 11, 12, 13, 21, 23, 32, 45, 57, 64, 65, 71, 73, 90, 92, 95, 101, 105, 109, 113, 123, 124, 131, 136, 138, 139, 141, 144, 159, 171, 174, 176, 177, 179, 181, 182, 184, 189, 197, 198, 201, 204, 207, 209, 216, 222, 223, 224, 226, 227, 230, 232, 233, 240, 252, 253, 284, 285, 286], "temptat": [3, 223, 291], "fudg": 3, "down": [3, 4, 8, 11, 12, 21, 70, 98, 117, 131, 133, 197, 198, 200, 205, 216, 222, 224, 226, 230, 249, 287, 291], "earli": [3, 11, 65, 105, 168, 227], "acceler": [3, 106, 126, 131, 136, 138, 143, 144, 146, 182, 189, 193, 195, 249, 268], "each": [3, 8, 9, 11, 12, 13, 14, 15, 17, 21, 23, 25, 27, 28, 29, 30, 32, 35, 38, 41, 42, 44, 45, 46, 47, 48, 49, 56, 57, 61, 65, 66, 67, 68, 69, 70, 71, 73, 75, 80, 81, 82, 87, 88, 90, 92, 94, 95, 96, 98, 101, 105, 108, 111, 113, 115, 121, 123, 124, 129, 131, 133, 136, 138, 140, 141, 144, 163, 176, 179, 188, 189, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 209, 210, 212, 214, 222, 223, 224, 226, 227, 230, 231, 232, 233, 234, 235, 238, 239, 240, 243, 245, 247, 249, 252, 253, 255, 259, 261, 262, 264, 266, 268, 281, 284, 286, 291, 292], "ensur": [3, 11, 12, 15, 23, 25, 27, 28, 29, 30, 33, 36, 65, 66, 69, 97, 101, 123, 209, 210, 214, 245, 250, 253], "realli": [3, 11, 12, 13, 14, 19, 21, 22, 23, 65, 77, 105, 131, 181, 204, 213, 215, 221, 223, 224, 226, 230, 246, 255, 283, 285], "per": [3, 66, 101, 106, 111, 153, 183, 189, 195, 200, 205, 210, 211, 259, 263, 265, 268], "everywher": [3, 14, 15, 65, 73, 90, 115, 195, 252, 268], "doctest": [3, 4, 5, 11, 15, 23, 58, 73, 101, 105, 131, 168, 179, 204, 210, 230, 245, 248, 250, 290], "sympy_deprecation_warn": [3, 243, 248, 250], "write": [3, 6, 7, 9, 10, 13, 14, 19, 21, 22, 24, 25, 37, 46, 54, 65, 66, 72, 73, 90, 92, 98, 146, 159, 197, 198, 202, 205, 207, 209, 214, 223, 224, 227, 230, 233, 239, 245, 246, 247, 253, 284, 285, 286, 291], "multilin": [3, 214], "deprecated_since_vers": [3, 243, 248, 250], "active_deprecations_target": [3, 243, 248, 250], "target": [3, 4, 14, 44, 45, 46, 48, 65, 105, 121, 159, 163, 164, 183, 223, 226, 229, 232, 233, 243, 246, 247, 250, 291], "md": [3, 5, 12, 243, 250], "stacklevel": [3, 12, 243, 248, 250], "line": [3, 4, 9, 11, 12, 13, 14, 15, 19, 21, 36, 45, 46, 48, 56, 57, 61, 66, 75, 76, 77, 79, 80, 81, 82, 87, 90, 92, 93, 94, 101, 105, 108, 113, 116, 126, 129, 131, 137, 159, 189, 194, 195, 197, 199, 200, 214, 217, 224, 226, 230, 234, 235, 243, 245, 246, 247, 250, 253, 255, 266, 269, 277, 283], "visual": [3, 65, 105, 109, 115, 213, 226], "confirm": [3, 12, 13, 56, 105, 230], "look": [3, 4, 5, 7, 9, 11, 12, 13, 15, 21, 22, 23, 37, 45, 46, 56, 65, 70, 71, 73, 86, 101, 105, 124, 129, 131, 139, 163, 173, 174, 177, 193, 200, 204, 205, 209, 214, 216, 217, 221, 224, 226, 227, 230, 231, 236, 245, 249, 253, 255, 264, 281, 286, 289, 290], "good": [3, 5, 7, 12, 14, 21, 23, 28, 34, 46, 65, 66, 69, 77, 90, 101, 105, 131, 143, 146, 201, 204, 205, 214, 221, 223, 224, 226, 230, 252, 280, 284, 287], "top": [3, 4, 5, 12, 13, 14, 27, 46, 64, 65, 66, 81, 82, 92, 95, 101, 108, 109, 123, 128, 174, 181, 204, 214, 224, 230, 247, 248, 253, 269, 286], "relev": [3, 4, 5, 11, 12, 13, 21, 46, 63, 78, 93, 94, 120, 124, 126, 131, 184, 194, 198, 204, 224, 230, 231, 240, 245, 267], "docstr": [3, 6, 7, 11, 12, 13, 15, 23, 27, 45, 46, 58, 65, 87, 90, 92, 101, 105, 110, 114, 116, 122, 139, 144, 149, 166, 172, 173, 175, 192, 196, 210, 217, 220, 221, 223, 226, 230, 231, 232, 233, 239, 240, 245, 248, 253, 255, 260, 267, 270, 274, 276], "section": [3, 5, 8, 10, 11, 12, 14, 21, 23, 24, 38, 45, 47, 56, 57, 64, 65, 66, 68, 72, 73, 75, 81, 90, 95, 101, 108, 109, 123, 129, 144, 182, 184, 195, 198, 201, 204, 207, 209, 214, 217, 221, 224, 230, 240, 249, 250, 252, 263, 264, 265, 266, 270, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292], "src": [3, 4, 5, 7, 11, 12, 107, 230, 245, 250], "explan": [3, 5, 12, 15, 17, 21, 24, 38, 39, 40, 41, 42, 43, 45, 46, 50, 53, 54, 56, 57, 58, 60, 62, 63, 64, 65, 66, 67, 71, 73, 77, 87, 88, 90, 92, 96, 101, 105, 115, 118, 120, 121, 123, 124, 126, 137, 148, 150, 153, 156, 158, 160, 162, 174, 179, 199, 200, 201, 203, 205, 209, 210, 212, 216, 217, 219, 220, 221, 222, 224, 226, 227, 230, 232, 234, 235, 236, 239, 240, 245, 248, 250, 252, 253, 288], "cross": [3, 5, 11, 12, 14, 65, 75, 81, 96, 101, 108, 109, 123, 126, 137, 146, 159, 188, 189, 191, 197, 198, 227, 233, 259, 263, 265, 266], "xyz": [3, 38, 77, 107, 108, 189, 198, 259, 261, 264], "header": [3, 12, 46, 246, 247], "why": [3, 12, 13, 15, 21, 46, 65, 198, 205, 211, 221, 224, 253, 284, 286, 287], "test": [3, 4, 5, 6, 9, 10, 14, 15, 20, 22, 23, 27, 28, 41, 42, 44, 45, 46, 52, 56, 57, 64, 65, 66, 72, 75, 80, 90, 96, 98, 101, 105, 159, 168, 172, 173, 174, 182, 198, 204, 205, 207, 209, 211, 222, 224, 227, 230, 231, 232, 233, 243, 246, 247, 248, 249, 250, 252, 253, 255, 270, 271, 278, 283, 285, 286], "warns_deprecated_sympi": [3, 12, 243, 248, 250], "run": [3, 4, 5, 8, 14, 15, 19, 21, 23, 47, 56, 57, 59, 65, 66, 90, 101, 106, 107, 124, 131, 146, 179, 194, 200, 201, 214, 224, 226, 230, 231, 232, 242, 243, 246, 248, 249, 252, 253, 278, 283, 290], "other": [3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 17, 18, 19, 22, 24, 25, 27, 28, 29, 30, 32, 33, 34, 38, 42, 45, 46, 47, 48, 56, 57, 58, 61, 62, 64, 65, 66, 67, 69, 70, 71, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 85, 90, 92, 95, 96, 98, 101, 105, 106, 107, 108, 109, 115, 119, 120, 122, 123, 124, 129, 130, 133, 134, 139, 140, 143, 144, 146, 148, 151, 152, 153, 163, 174, 176, 177, 178, 179, 182, 183, 184, 185, 186, 188, 189, 191, 193, 197, 198, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 214, 215, 216, 219, 220, 221, 222, 223, 224, 226, 227, 229, 230, 231, 232, 233, 234, 235, 240, 241, 243, 246, 247, 248, 249, 252, 253, 259, 262, 263, 266, 268, 270, 276, 277, 280, 281, 283, 285, 286, 287, 291], "pr": [3, 11, 12, 13, 64, 123, 205, 207, 208, 210, 233], "onc": [3, 8, 9, 11, 12, 14, 15, 21, 22, 23, 46, 48, 49, 56, 61, 65, 66, 70, 73, 81, 90, 92, 106, 109, 121, 123, 139, 143, 184, 189, 191, 198, 200, 202, 204, 210, 214, 215, 223, 224, 226, 230, 233, 240, 252, 263, 280, 281, 291, 292], "merg": [3, 7, 11, 12, 46, 56, 57, 65, 187, 214, 222, 234, 245, 252, 253], "wiki": [3, 4, 5, 11, 15, 21, 23, 35, 38, 40, 41, 42, 44, 45, 46, 48, 53, 54, 56, 57, 64, 65, 66, 67, 68, 70, 71, 73, 75, 77, 81, 82, 83, 92, 93, 94, 95, 96, 98, 101, 105, 113, 115, 118, 148, 150, 151, 152, 154, 155, 156, 160, 161, 162, 165, 167, 168, 177, 179, 183, 189, 191, 196, 200, 203, 210, 217, 221, 222, 223, 227, 230, 233, 234, 247, 252, 259, 261, 265, 267, 269, 287, 288], "decor": [3, 12, 23, 56, 65, 73, 243, 245, 250, 251, 254, 255, 278], "sympydeprecationwarn": [3, 12, 13, 243, 245, 248, 250], "class": [3, 5, 7, 11, 12, 13, 14, 15, 20, 21, 22, 23, 25, 29, 30, 34, 35, 38, 39, 40, 41, 42, 47, 48, 49, 54, 55, 56, 57, 58, 59, 60, 61, 65, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 87, 88, 90, 92, 93, 94, 95, 96, 97, 98, 107, 108, 111, 112, 113, 115, 120, 123, 124, 125, 126, 128, 129, 133, 134, 139, 140, 144, 146, 147, 148, 150, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 181, 184, 185, 186, 187, 192, 193, 194, 196, 201, 203, 204, 205, 207, 210, 211, 212, 213, 215, 216, 217, 220, 221, 222, 224, 226, 230, 231, 232, 233, 234, 236, 239, 240, 241, 245, 246, 247, 248, 249, 250, 252, 253, 257, 260, 263, 264, 266, 267, 269, 270, 274, 276, 281, 283, 286, 291], "context": [3, 4, 5, 11, 12, 13, 17, 21, 23, 31, 39, 40, 41, 65, 67, 73, 95, 129, 184, 204, 207, 209, 222, 243, 245, 250, 259], "manag": [3, 7, 9, 12, 36, 40, 41, 107, 159, 207, 226, 240, 243, 245, 250], "filter": [3, 13, 18, 29, 65, 66, 90, 151, 210, 243, 245, 250, 252], "emit": [3, 12, 214, 243, 250], "assert": [3, 11, 12, 45, 54, 55, 56, 57, 65, 75, 77, 107, 143, 203, 214, 222, 230, 231, 243, 250, 252], "separ": [3, 4, 11, 12, 13, 14, 15, 19, 22, 23, 27, 33, 45, 53, 65, 66, 71, 73, 90, 92, 101, 116, 123, 128, 143, 144, 147, 152, 176, 179, 189, 200, 202, 205, 207, 210, 211, 214, 223, 226, 227, 230, 231, 233, 238, 243, 245, 249, 253, 255, 259, 283], "block": [3, 4, 34, 46, 54, 56, 66, 96, 101, 123, 128, 129, 131, 134, 189, 198, 203, 227, 253, 263], "behavior1": 3, "behavior2": 3, "everyth": [3, 5, 12, 15, 23, 46, 65, 67, 73, 92, 99, 117, 143, 175, 176, 200, 214, 286, 290], "els": [3, 7, 11, 12, 13, 14, 21, 22, 23, 27, 46, 55, 57, 61, 65, 66, 73, 75, 79, 81, 82, 90, 92, 95, 101, 105, 115, 179, 189, 200, 205, 209, 210, 214, 215, 222, 226, 230, 232, 233, 238, 240, 245, 252, 255, 259, 262, 280, 286], "anywher": [3, 4, 13, 21, 46, 65, 73, 79, 179, 255, 285], "ignore_warn": [3, 243, 248, 250, 253], "prevent": [3, 7, 12, 15, 29, 34, 46, 65, 71, 102, 105, 119, 203, 205, 210, 214, 226, 234, 243, 250, 282], "trigger": [3, 12, 23, 57, 107, 179, 243], "twice": [3, 15, 46, 65, 67, 79, 105, 189, 191, 197, 210, 214, 249, 250, 259, 261, 281], "similar": [3, 9, 11, 12, 13, 15, 19, 21, 23, 25, 57, 64, 65, 66, 69, 70, 71, 73, 76, 81, 82, 86, 95, 101, 106, 115, 129, 131, 133, 143, 144, 177, 188, 195, 197, 198, 202, 204, 205, 207, 211, 221, 223, 224, 226, 230, 232, 235, 240, 243, 246, 249, 250, 259, 261, 263, 264, 268, 280, 285, 286, 287, 289, 291], "somewher": [3, 4, 5, 12, 14, 46], "sign": [3, 4, 5, 9, 12, 14, 25, 29, 34, 38, 43, 46, 61, 65, 66, 70, 71, 75, 81, 90, 92, 101, 105, 108, 109, 111, 115, 131, 152, 164, 189, 195, 197, 199, 207, 214, 219, 221, 226, 227, 232, 252, 266, 269, 284], "readi": [3, 11, 21, 128, 204, 214, 230], "paragraph": [3, 4, 5, 23, 45], "metadata": [3, 11, 45, 248, 250], "link": [3, 4, 5, 7, 11, 14, 15, 26, 30, 46, 66, 75, 81, 92, 116, 123, 132, 140, 246, 249, 250, 289], "rememb": [3, 4, 11, 12, 15, 23, 32, 95, 101, 116, 119, 146, 197, 198, 214, 226, 232, 235, 253, 286, 291], "shown": [3, 4, 12, 13, 14, 21, 22, 23, 54, 57, 64, 65, 69, 71, 73, 90, 107, 109, 113, 115, 119, 124, 126, 132, 133, 134, 140, 141, 142, 188, 189, 197, 198, 200, 203, 204, 205, 210, 214, 230, 234, 250, 252, 263, 264, 284], "plain": [3, 4, 11, 12, 21, 65, 73, 93, 194, 210, 214], "rst": [3, 4, 5, 11, 14, 47, 230, 245], "markdown": [3, 11, 14], "markup": [3, 11, 214], "clearli": [3, 4, 23, 105, 198, 204, 224, 287], "delin": 3, "newlin": [3, 12, 101, 255], "80": [3, 4, 8, 12, 15, 23, 44, 56, 65, 68, 92, 101, 105, 108, 109, 113, 210, 213, 230, 234, 250, 252], "charact": [3, 4, 5, 11, 12, 65, 66, 90, 93, 107, 159, 189, 194, 214, 230, 245, 247, 250, 255, 283, 285, 290], "full": [3, 4, 5, 11, 12, 13, 15, 17, 21, 23, 28, 35, 42, 44, 46, 56, 57, 65, 69, 73, 77, 78, 92, 98, 101, 107, 141, 142, 189, 204, 207, 208, 210, 214, 216, 226, 227, 253, 285, 288, 291], "abc": [3, 4, 11, 12, 15, 17, 18, 23, 25, 27, 29, 31, 32, 33, 34, 38, 39, 40, 41, 42, 43, 44, 46, 54, 56, 58, 64, 65, 66, 67, 70, 71, 73, 74, 75, 76, 78, 79, 80, 81, 82, 88, 89, 90, 92, 93, 95, 96, 98, 101, 104, 106, 113, 115, 117, 150, 152, 154, 155, 160, 177, 179, 180, 201, 203, 205, 207, 209, 210, 211, 214, 215, 216, 217, 219, 220, 221, 222, 223, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 239, 241, 246, 247, 248, 249, 250, 252, 253, 255, 259, 262, 263, 264, 269, 271, 283, 286, 290], "func": [3, 4, 12, 14, 20, 23, 40, 44, 46, 65, 67, 70, 73, 84, 86, 105, 126, 168, 189, 207, 210, 214, 215, 226, 230, 231, 232, 243, 248, 250, 252, 253, 255, 258], "larger": [3, 5, 14, 23, 30, 46, 56, 57, 64, 65, 66, 73, 90, 98, 101, 105, 133, 137, 203, 205, 211, 215, 221, 226, 232, 247, 249, 283, 291], "easier": [3, 9, 11, 12, 13, 14, 22, 33, 48, 65, 109, 129, 131, 197, 205, 209, 211, 224, 230, 233, 247, 253, 263, 285, 291, 292], "exactli": [3, 4, 5, 11, 12, 13, 14, 15, 23, 25, 32, 34, 42, 49, 56, 65, 68, 69, 101, 107, 144, 199, 224, 226, 230, 233, 235, 249, 252, 253, 281, 283, 285, 290, 291], "sphinx": [3, 5, 8, 11, 71, 230, 245, 250], "direct": [3, 4, 5, 13, 14, 20, 32, 38, 40, 41, 45, 50, 53, 56, 61, 64, 65, 67, 69, 71, 74, 78, 79, 80, 81, 95, 96, 101, 108, 109, 111, 119, 120, 123, 126, 131, 133, 137, 146, 165, 189, 195, 197, 198, 201, 203, 204, 207, 211, 221, 224, 240, 243, 252, 259, 264, 265, 268], "syntax": [3, 4, 5, 11, 13, 14, 15, 23, 32, 39, 41, 57, 65, 92, 107, 129, 146, 176, 200, 204, 213, 214, 226, 232, 236, 255, 281, 283, 285, 290, 292], "paramet": [3, 5, 12, 13, 14, 15, 25, 31, 33, 38, 39, 41, 44, 46, 47, 48, 56, 57, 61, 63, 65, 66, 67, 68, 70, 71, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 88, 90, 92, 93, 95, 96, 98, 101, 102, 104, 105, 107, 108, 111, 113, 115, 116, 117, 119, 120, 121, 123, 124, 125, 126, 128, 129, 131, 146, 148, 150, 151, 152, 154, 155, 156, 158, 159, 160, 162, 163, 164, 167, 168, 169, 171, 173, 174, 176, 177, 178, 179, 180, 181, 183, 189, 190, 191, 193, 194, 195, 198, 199, 200, 202, 203, 205, 207, 209, 210, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 226, 227, 229, 230, 231, 232, 234, 235, 236, 239, 240, 243, 245, 246, 247, 249, 250, 252, 253, 259, 261, 262, 263, 264, 269, 281, 286], "short": [3, 5, 11, 12, 15, 37, 47, 55, 57, 61, 65, 66, 67, 68, 71, 99, 105, 119, 165, 184, 188, 198, 201, 208, 235, 245, 255, 286, 290], "format": [3, 8, 11, 12, 14, 17, 19, 29, 32, 33, 45, 57, 66, 87, 88, 92, 95, 101, 104, 105, 108, 124, 128, 147, 152, 163, 173, 200, 203, 204, 209, 210, 212, 214, 224, 230, 233, 245, 255, 259, 263, 284, 287, 290], "renam": [3, 46, 92], "rest": [3, 13, 90, 93, 95, 99, 109, 117, 129, 133, 139, 184, 201, 204, 234, 252, 283, 284, 291], "left": [3, 5, 13, 19, 21, 23, 26, 27, 30, 38, 44, 46, 47, 56, 57, 61, 65, 66, 67, 70, 71, 73, 81, 82, 88, 90, 92, 93, 95, 96, 101, 104, 105, 115, 120, 128, 151, 158, 163, 167, 168, 171, 176, 188, 189, 195, 199, 200, 201, 203, 210, 211, 212, 213, 214, 216, 217, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 245, 246, 247, 249, 252, 266, 281, 285, 287, 291], "imaginari": [3, 4, 15, 21, 23, 25, 29, 31, 38, 42, 43, 65, 69, 71, 73, 96, 146, 204, 205, 210, 214, 215, 222, 226, 233], "simplify_thi": [3, 4, 248], "expr": [3, 4, 12, 14, 15, 21, 23, 29, 31, 34, 40, 41, 43, 44, 46, 57, 64, 67, 69, 71, 73, 75, 87, 90, 92, 95, 98, 101, 106, 107, 115, 119, 121, 129, 143, 156, 160, 162, 164, 168, 171, 174, 176, 177, 179, 186, 189, 191, 194, 200, 202, 203, 204, 205, 207, 209, 210, 211, 212, 214, 215, 216, 217, 219, 221, 223, 226, 229, 230, 231, 232, 233, 234, 235, 236, 238, 240, 241, 246, 247, 248, 250, 253, 259, 261, 262, 263, 264, 266, 280, 281, 283, 285, 286, 290, 291, 292], "simplifi": [3, 4, 11, 12, 14, 15, 19, 21, 22, 23, 30, 31, 32, 39, 41, 43, 44, 64, 65, 67, 69, 70, 71, 73, 77, 82, 87, 90, 92, 95, 96, 97, 98, 101, 108, 115, 116, 121, 123, 124, 125, 132, 133, 136, 137, 138, 143, 151, 158, 163, 178, 179, 183, 186, 189, 195, 201, 209, 211, 213, 215, 220, 222, 223, 224, 227, 230, 231, 232, 233, 234, 236, 248, 250, 253, 263, 265, 271, 280, 282, 283, 285, 286, 287], "def": [3, 4, 5, 11, 12, 13, 14, 15, 19, 21, 22, 23, 40, 41, 45, 65, 70, 77, 95, 101, 105, 107, 137, 174, 204, 210, 214, 223, 226, 233, 248, 250, 252, 253, 256, 280, 283, 286, 287, 291], "ref": [3, 56, 71, 101, 113, 146, 219, 234, 248, 287], "is_this_zero": [3, 250], "y": [3, 4, 11, 12, 13, 14, 15, 17, 18, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 56, 57, 64, 65, 66, 67, 68, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 88, 90, 92, 93, 94, 95, 96, 97, 98, 101, 105, 106, 107, 108, 109, 111, 113, 115, 120, 121, 123, 126, 129, 131, 132, 133, 134, 136, 137, 138, 140, 144, 146, 147, 156, 157, 160, 163, 168, 174, 176, 177, 179, 180, 188, 189, 190, 191, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 223, 224, 226, 227, 229, 230, 231, 232, 233, 234, 235, 238, 239, 240, 241, 246, 247, 250, 252, 253, 255, 259, 262, 263, 264, 265, 266, 268, 269, 280, 281, 283, 285, 286, 290, 291, 292], "0": [3, 4, 11, 12, 13, 14, 15, 17, 19, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 113, 115, 116, 117, 118, 120, 121, 123, 124, 126, 129, 131, 132, 133, 134, 136, 138, 141, 142, 143, 144, 146, 147, 148, 151, 152, 153, 155, 158, 163, 164, 165, 168, 173, 174, 175, 176, 177, 178, 179, 180, 184, 186, 188, 189, 190, 191, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213, 214, 216, 217, 219, 220, 221, 222, 223, 224, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 243, 245, 246, 248, 249, 250, 252, 253, 254, 259, 261, 262, 263, 264, 265, 266, 269, 280, 281, 283, 285, 286, 287, 290, 291, 292], "zero": [3, 14, 15, 17, 21, 22, 23, 30, 31, 38, 42, 43, 46, 55, 56, 57, 61, 64, 65, 68, 69, 70, 71, 73, 75, 79, 80, 81, 90, 92, 94, 95, 96, 98, 100, 101, 104, 105, 107, 108, 115, 123, 124, 126, 129, 131, 134, 137, 140, 141, 142, 146, 151, 173, 177, 179, 181, 193, 195, 197, 198, 199, 201, 202, 203, 204, 205, 209, 210, 212, 214, 217, 221, 222, 224, 226, 227, 230, 231, 232, 233, 234, 235, 250, 252, 253, 263, 265, 266, 286, 292], "is_zero": [3, 21, 23, 80, 101, 201, 205, 210, 250, 287], "where": [3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 19, 21, 22, 23, 25, 28, 29, 30, 32, 34, 37, 38, 42, 44, 45, 46, 47, 54, 55, 56, 57, 59, 61, 63, 64, 65, 66, 67, 69, 70, 71, 73, 75, 78, 80, 81, 82, 83, 87, 88, 89, 90, 92, 94, 95, 96, 97, 98, 101, 105, 108, 111, 112, 115, 119, 123, 124, 125, 126, 128, 129, 131, 142, 143, 144, 146, 147, 153, 163, 168, 174, 176, 178, 179, 180, 181, 182, 188, 189, 193, 195, 197, 198, 199, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 214, 215, 216, 217, 220, 221, 222, 223, 224, 226, 227, 230, 231, 232, 234, 235, 238, 240, 245, 246, 247, 248, 252, 253, 255, 259, 266, 268, 281, 283, 285, 287, 291, 292], "mail": [3, 9, 11, 13, 25, 27, 28, 29, 30, 31, 32, 33, 34, 36, 214, 284], "summar": [3, 11, 245, 291], "idea": [3, 7, 11, 12, 14, 21, 22, 23, 50, 56, 63, 65, 66, 77, 83, 90, 92, 105, 116, 129, 179, 183, 184, 201, 203, 204, 223, 226, 227, 230, 233, 247, 253, 291], "fit": [3, 14, 45, 90, 101, 104, 105, 198, 214, 230, 255, 286], "put": [3, 4, 11, 13, 14, 15, 19, 23, 27, 46, 61, 62, 65, 66, 67, 71, 95, 96, 101, 151, 156, 160, 175, 176, 210, 214, 215, 223, 224, 226, 230, 235, 241, 246, 287, 291], "word": [3, 5, 9, 12, 14, 23, 42, 61, 64, 65, 66, 71, 73, 95, 115, 124, 129, 144, 201, 204, 209, 226, 227, 230, 232, 247, 259, 264, 283], "global": [3, 4, 9, 12, 13, 39, 40, 41, 44, 46, 47, 65, 77, 90, 107, 163, 169, 189, 191, 200, 201, 204, 205, 207, 214, 227, 230, 231, 234, 245, 247, 248, 253, 262], "uniqu": [3, 13, 14, 44, 45, 47, 56, 59, 61, 65, 66, 67, 70, 73, 80, 83, 88, 92, 94, 95, 101, 105, 123, 124, 168, 177, 189, 198, 201, 202, 204, 207, 209, 210, 215, 219, 226, 227, 230, 232, 233, 234, 238, 247, 252, 255, 263, 268, 283, 286], "across": [3, 5, 11, 56, 63, 65, 76, 92, 109, 178, 179, 186, 200, 214, 249, 251, 252, 253, 289], "level": [3, 4, 5, 7, 12, 13, 14, 15, 21, 22, 27, 29, 46, 56, 63, 65, 71, 73, 92, 95, 101, 105, 119, 133, 146, 174, 179, 184, 188, 191, 198, 200, 203, 204, 212, 214, 223, 227, 233, 234, 238, 246, 247, 252, 286, 287, 289], "correspond": [3, 4, 5, 7, 11, 12, 13, 19, 21, 22, 23, 28, 32, 44, 45, 46, 47, 55, 56, 57, 59, 60, 61, 64, 65, 66, 67, 68, 71, 73, 75, 76, 78, 79, 80, 81, 88, 90, 92, 94, 95, 96, 101, 104, 105, 108, 109, 115, 121, 123, 124, 128, 129, 131, 133, 147, 151, 155, 169, 173, 174, 176, 180, 181, 184, 189, 193, 195, 199, 200, 202, 203, 204, 205, 207, 209, 210, 214, 220, 221, 224, 226, 227, 230, 231, 232, 233, 234, 236, 238, 239, 240, 247, 248, 249, 250, 252, 253, 255, 259, 261, 263, 264, 266, 268, 286, 292], "share": [3, 7, 21, 23, 66, 105, 205, 209, 214, 234, 247], "__init__": [3, 4, 23, 65, 124, 209, 259, 261, 286], "func_nam": [3, 46, 71, 96, 255], "help": [3, 4, 5, 7, 9, 11, 12, 21, 29, 37, 46, 55, 65, 73, 90, 92, 101, 105, 106, 108, 113, 129, 146, 154, 164, 198, 200, 209, 211, 214, 223, 224, 227, 230, 231, 234, 245, 246, 247, 253, 276, 284, 287], "rais": [3, 11, 12, 13, 15, 17, 21, 22, 23, 39, 41, 44, 46, 54, 57, 65, 66, 67, 69, 71, 74, 75, 78, 80, 81, 82, 90, 92, 96, 98, 101, 102, 104, 105, 113, 115, 153, 165, 195, 198, 201, 202, 203, 204, 205, 207, 209, 210, 211, 214, 216, 222, 226, 229, 230, 231, 232, 233, 234, 238, 240, 243, 245, 247, 250, 252, 253, 255, 256, 266, 287], "been": [3, 11, 15, 21, 23, 25, 44, 46, 47, 56, 57, 58, 61, 64, 65, 66, 71, 77, 90, 92, 101, 105, 106, 107, 123, 124, 129, 131, 139, 143, 144, 152, 164, 174, 176, 184, 195, 196, 197, 198, 201, 204, 205, 209, 211, 212, 214, 216, 221, 224, 226, 231, 232, 233, 235, 236, 244, 245, 247, 248, 250, 252, 255, 263, 266, 283, 284, 286, 287, 291], "simplfiy_thi": 3, "ident": [3, 14, 15, 23, 42, 45, 47, 55, 56, 57, 63, 65, 66, 70, 71, 81, 88, 94, 96, 98, 101, 116, 118, 123, 124, 144, 163, 165, 168, 184, 201, 202, 203, 207, 208, 209, 210, 214, 223, 226, 230, 233, 238, 240, 245, 252, 253, 255, 264, 283, 287, 291], "much": [3, 4, 11, 12, 19, 21, 22, 23, 25, 31, 45, 46, 50, 61, 65, 69, 73, 87, 90, 92, 143, 144, 187, 197, 198, 199, 201, 204, 207, 210, 221, 224, 226, 230, 231, 232, 233, 247, 249, 283, 285, 291], "trivial": [3, 47, 56, 61, 64, 65, 66, 71, 80, 95, 98, 101, 105, 141, 179, 201, 202, 207, 210, 224, 227, 230, 233, 238], "furthermor": [3, 13, 23, 42, 65, 66, 95, 209, 223, 283, 285, 286], "particular": [3, 4, 11, 12, 13, 14, 15, 21, 22, 26, 28, 42, 47, 56, 65, 66, 69, 73, 76, 90, 92, 95, 98, 101, 105, 108, 111, 139, 163, 174, 202, 203, 204, 205, 207, 209, 210, 220, 222, 224, 226, 227, 230, 232, 233, 245, 247, 249, 287, 289, 291], "expr1": [3, 21, 115, 200, 232, 286], "expr2": [3, 21, 115, 200, 286], "dozen": [3, 14, 23, 291], "search": [3, 4, 26, 44, 48, 56, 57, 61, 63, 65, 71, 101, 105, 129, 201, 209, 210, 214, 223, 224, 226, 231, 234, 246], "upcom": 3, "bot": [3, 11], "liter": [4, 12, 15, 23, 46, 55, 65, 93, 95, 107, 179, 186, 226], "occur": [4, 13, 14, 15, 56, 57, 65, 69, 73, 82, 90, 96, 107, 119, 123, 143, 188, 189, 197, 209, 217, 226, 231, 232, 235, 236, 245, 252, 286], "definit": [4, 13, 14, 15, 22, 38, 42, 46, 47, 56, 57, 62, 64, 65, 67, 68, 70, 71, 73, 78, 81, 88, 90, 92, 96, 97, 98, 101, 105, 107, 123, 131, 136, 137, 144, 181, 184, 187, 189, 197, 198, 201, 202, 205, 210, 211, 214, 221, 234, 235, 246, 247, 248, 252, 253, 259, 263, 264, 265, 266, 281, 291], "__doc__": [4, 15], "attribut": [4, 14, 18, 21, 23, 40, 41, 45, 46, 56, 57, 65, 73, 74, 75, 78, 79, 80, 81, 98, 101, 107, 109, 115, 120, 123, 124, 125, 126, 128, 136, 144, 147, 168, 173, 177, 184, 188, 189, 195, 198, 200, 201, 204, 205, 209, 214, 222, 226, 227, 239, 240, 246, 248, 252, 253, 256, 263, 286], "fdiff": [4, 11, 23, 46, 65, 71, 72, 73], "self": [4, 11, 12, 21, 23, 30, 38, 40, 41, 45, 46, 56, 57, 62, 64, 65, 67, 71, 74, 75, 76, 78, 79, 80, 81, 92, 96, 101, 105, 120, 131, 174, 179, 189, 191, 193, 201, 203, 205, 207, 209, 210, 214, 216, 221, 222, 240, 259], "argindex": [4, 11, 23, 46, 65, 71, 72, 73], "heavisid": [4, 11, 73, 90, 92, 214], "diff": [4, 9, 11, 12, 13, 14, 19, 23, 29, 32, 44, 46, 65, 70, 71, 72, 73, 82, 87, 92, 98, 101, 119, 121, 132, 133, 146, 177, 189, 191, 194, 195, 198, 200, 205, 210, 213, 214, 224, 230, 231, 232, 235, 236, 241, 263, 266, 281, 285, 292], "diracdelta": [4, 11, 73, 92, 174, 179, 214], "what": [4, 5, 7, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 25, 26, 35, 44, 46, 57, 59, 64, 65, 66, 67, 71, 72, 75, 76, 80, 90, 92, 94, 101, 105, 107, 120, 123, 124, 129, 133, 140, 146, 178, 179, 182, 184, 189, 197, 198, 205, 207, 210, 213, 214, 215, 221, 223, 224, 226, 227, 230, 232, 239, 243, 245, 247, 248, 253, 263, 264, 269, 281, 283, 284, 286, 290, 291], "specif": [4, 5, 7, 8, 11, 12, 13, 14, 21, 23, 24, 28, 35, 56, 57, 65, 66, 67, 73, 77, 92, 94, 96, 101, 120, 123, 124, 128, 129, 139, 146, 148, 184, 198, 200, 201, 205, 207, 209, 210, 213, 214, 215, 220, 226, 227, 230, 231, 232, 234, 240, 245, 246, 247, 252, 287, 291], "purpos": [4, 5, 9, 12, 13, 14, 20, 21, 23, 32, 45, 46, 56, 62, 65, 66, 92, 101, 129, 144, 146, 184, 198, 204, 207, 211, 213, 214, 221, 230, 233, 239, 249, 251, 253, 263, 264, 281, 291], "scope": [4, 11, 46, 139, 143, 243, 291], "high": [4, 5, 7, 11, 12, 15, 19, 21, 25, 29, 46, 65, 69, 70, 93, 105, 146, 194, 204, 209, 212, 214, 227, 232, 276, 287], "od": [4, 12, 14, 23, 88, 124, 128, 139, 146, 228, 231, 271, 292], "seen": [4, 11, 19, 21, 38, 57, 90, 92, 107, 111, 123, 126, 128, 140, 184, 197, 201, 204, 207, 210, 230, 233, 250, 252, 263, 283, 286, 290], "hand": [4, 12, 13, 19, 21, 23, 27, 32, 45, 46, 48, 57, 58, 65, 71, 73, 92, 95, 96, 101, 105, 108, 124, 128, 129, 143, 144, 147, 151, 168, 171, 183, 189, 195, 198, 199, 201, 204, 205, 207, 209, 212, 224, 233, 245, 247, 249, 253, 256, 266, 268, 285], "code": [4, 8, 10, 14, 19, 21, 22, 23, 28, 31, 32, 33, 34, 36, 37, 47, 52, 56, 59, 60, 65, 66, 67, 73, 77, 90, 92, 93, 101, 105, 106, 107, 120, 123, 129, 131, 137, 139, 140, 146, 147, 173, 179, 188, 194, 197, 199, 200, 201, 202, 203, 204, 207, 213, 224, 226, 230, 232, 233, 234, 236, 239, 242, 243, 245, 246, 247, 250, 251, 252, 253, 263, 271, 278, 283, 285, 288, 290], "less": [4, 5, 11, 14, 19, 25, 28, 30, 38, 42, 46, 47, 48, 56, 57, 64, 65, 66, 69, 70, 71, 73, 79, 80, 81, 96, 101, 105, 113, 115, 129, 131, 179, 204, 207, 209, 210, 223, 224, 226, 227, 230, 232, 233, 234, 245, 247], "understand": [4, 11, 12, 15, 21, 22, 23, 34, 65, 66, 90, 129, 139, 141, 142, 146, 184, 197, 200, 203, 204, 209, 214, 224, 227, 246, 253, 282, 283, 290, 291], "clear": [4, 7, 11, 12, 13, 21, 40, 55, 65, 90, 94, 120, 197, 198, 200, 205, 207, 210, 224, 232, 233, 240, 245, 249, 268, 283], "begin": [4, 7, 11, 12, 13, 15, 21, 23, 26, 30, 32, 38, 65, 66, 70, 71, 73, 90, 96, 98, 101, 105, 133, 141, 142, 143, 144, 175, 184, 188, 189, 198, 199, 203, 214, 224, 227, 230, 231, 233, 234, 245, 255, 283, 285, 287, 291], "convers": [4, 5, 13, 21, 28, 46, 65, 85, 107, 143, 183, 202, 203, 204, 205, 207, 209, 211, 214, 227, 239, 246, 259], "aim": [4, 5, 12, 83, 90, 184, 201, 224, 230, 233, 284, 285], "comment": [4, 5, 11, 12, 46, 56, 129, 131, 211, 214, 247, 252], "distract": 4, "input": [4, 5, 11, 12, 14, 15, 23, 29, 32, 38, 44, 47, 61, 65, 66, 68, 69, 70, 71, 79, 92, 94, 95, 101, 105, 107, 112, 113, 115, 119, 123, 125, 128, 129, 131, 132, 133, 143, 146, 147, 152, 175, 189, 191, 193, 204, 205, 207, 210, 211, 212, 213, 214, 215, 222, 226, 227, 230, 232, 234, 236, 246, 247, 249, 250, 252, 253, 255, 280, 286, 287, 291], "consum": [4, 46, 73, 125, 143], "human": [4, 11, 17, 90, 181, 210, 214], "beings": 4, "english": [4, 11, 66], "likewis": [4, 21, 45, 108, 132, 133], "reader": [4, 5, 11, 12, 23, 45, 47, 144, 201, 214, 249, 284, 289], "machineri": [4, 65, 209, 253], "mind": [4, 11, 12, 15, 18, 21, 29, 65, 101, 144, 200, 221, 222, 268, 286], "platform": [4, 65, 179, 198, 230, 246], "anyon": [4, 5, 13, 35, 210, 214, 279, 289, 290], "restructuredtext": [4, 5], "extend": [4, 5, 12, 21, 23, 28, 42, 46, 56, 57, 65, 66, 70, 77, 90, 92, 101, 105, 146, 187, 194, 200, 202, 205, 207, 209, 210, 211, 214, 221, 223, 227, 229, 230, 233, 234, 235, 247, 249, 283, 285], "concis": [4, 146], "quick": [4, 5, 11, 23, 65, 101, 105, 226, 232, 253], "depth": [4, 5, 15, 16, 35, 56, 65, 131, 200, 201, 214], "tripl": [4, 11, 28, 82, 101, 198, 199, 201, 205, 209, 255], "doubl": [4, 5, 8, 32, 44, 46, 61, 65, 66, 70, 101, 107, 123, 138, 139, 197, 204, 214, 223, 224, 247, 291], "quot": [4, 11, 15, 46, 95, 214, 255], "raw": [4, 5, 46, 65, 66, 71, 106, 107, 173, 178, 204, 205, 210, 222, 226, 290], "backslash": [4, 65, 214], "blank": [4, 11, 12, 107, 125, 200], "close": [4, 11, 14, 31, 46, 64, 65, 69, 70, 73, 81, 83, 90, 92, 94, 115, 132, 200, 201, 202, 208, 209, 222, 232, 233, 247, 281, 291], "rare": [4, 12, 23, 65, 230, 234, 243, 283], "underlin": [4, 5], "numpydoc": [4, 5], "build": [4, 5, 6, 10, 11, 12, 18, 40, 41, 46, 65, 67, 73, 95, 146, 173, 184, 189, 198, 201, 206, 209, 210, 211, 221, 234, 263, 280, 283, 286], "cd": [4, 8, 9, 233, 236, 252], "_build": [4, 8], "consist": [4, 5, 13, 14, 19, 21, 27, 29, 33, 45, 56, 57, 61, 65, 66, 70, 71, 73, 75, 81, 83, 90, 95, 108, 111, 123, 126, 140, 144, 153, 173, 179, 184, 187, 193, 200, 202, 204, 205, 207, 222, 230, 232, 233, 234, 238, 243, 246, 247, 252, 284, 286], "review": [4, 5, 11, 12, 145], "head": [4, 18, 45, 65, 232, 234, 240, 255, 286], "plural": [4, 5], "length": [4, 13, 38, 46, 49, 55, 56, 57, 59, 63, 65, 66, 68, 70, 71, 73, 74, 78, 80, 81, 82, 95, 96, 101, 104, 105, 108, 109, 119, 124, 128, 132, 133, 134, 144, 148, 152, 176, 181, 182, 183, 184, 189, 193, 198, 209, 210, 214, 220, 224, 226, 230, 234, 245, 246, 252, 255, 259, 261, 269], "equal": [4, 12, 13, 14, 17, 21, 22, 23, 25, 32, 34, 38, 42, 45, 46, 47, 54, 55, 56, 57, 61, 63, 64, 65, 66, 67, 69, 70, 71, 73, 78, 79, 80, 81, 82, 84, 90, 95, 96, 98, 101, 105, 108, 111, 115, 116, 120, 124, 126, 131, 141, 142, 163, 164, 179, 183, 184, 189, 193, 198, 201, 202, 203, 204, 205, 207, 209, 210, 212, 214, 220, 222, 224, 227, 230, 231, 232, 233, 234, 240, 245, 246, 247, 252, 255, 259, 264, 269, 281, 284, 292], "clutter": 4, "harder": [4, 12, 13, 21, 65, 90, 204, 245], "minim": [4, 21, 23, 44, 56, 57, 61, 64, 65, 66, 90, 92, 95, 105, 120, 133, 148, 203, 204, 205, 207, 210, 213, 223, 226, 227, 232, 252, 256], "amount": [4, 12, 45, 65, 66, 77, 123, 139, 189, 195, 198, 207, 217, 245, 259, 261], "deprec": [4, 6, 16, 27, 39, 57, 65, 92, 96, 118, 123, 143, 210, 214, 234, 240, 243, 244, 248, 250, 253], "notifi": 4, "awai": [4, 45, 47, 66, 108, 109, 111, 131, 209, 214], "encourag": [4, 13, 45, 141, 142, 209], "choos": [4, 8, 9, 11, 29, 32, 56, 61, 65, 67, 70, 101, 105, 109, 113, 133, 144, 179, 183, 189, 197, 198, 210, 211, 214, 221, 223, 224, 230, 231, 234, 245, 250, 291], "label": [4, 7, 32, 45, 46, 59, 65, 75, 88, 92, 111, 152, 159, 163, 168, 177, 179, 200, 214, 215, 217, 226, 239, 240, 290], "elabor": [4, 24, 195, 266], "suffic": [4, 202, 232], "clarifi": 4, "complic": [4, 12, 15, 17, 21, 23, 25, 31, 38, 46, 56, 64, 66, 67, 69, 70, 71, 73, 90, 92, 98, 139, 141, 179, 198, 204, 207, 211, 213, 224, 226, 233, 234, 238, 239, 247, 249, 253, 255, 281, 283, 286, 287], "demonstr": [4, 5, 15, 21, 23, 25, 29, 30, 31, 56, 57, 65, 92, 105, 120, 123, 129, 133, 134, 143, 201, 204, 265, 291], "api": [4, 5, 11, 13, 21, 24, 28, 30, 46, 65, 77, 85, 106, 107, 114, 139, 144, 146, 175, 196, 200, 207, 227, 229, 253, 256, 263, 264, 267, 274, 276, 277, 284, 285, 288], "simpl": [4, 11, 12, 14, 15, 19, 21, 23, 31, 36, 45, 46, 56, 64, 65, 69, 73, 77, 81, 83, 90, 92, 94, 101, 105, 106, 108, 109, 115, 116, 119, 123, 124, 126, 128, 131, 133, 134, 136, 138, 139, 143, 147, 153, 167, 168, 176, 177, 178, 189, 197, 198, 204, 205, 206, 210, 211, 214, 216, 221, 223, 224, 226, 227, 230, 233, 240, 246, 247, 252, 256, 258, 259, 261, 262, 266, 280, 283, 286, 287, 291], "too": [4, 7, 11, 12, 15, 23, 34, 56, 57, 65, 71, 73, 75, 78, 80, 90, 95, 104, 105, 106, 124, 141, 148, 221, 222, 226, 227, 230, 232, 233, 234, 245, 246, 262, 263], "thought": [4, 12, 14, 65, 221, 230, 283, 286], "perfect": [4, 23, 32, 56, 65, 105, 227, 233, 285, 286], "tell": [4, 5, 11, 21, 22, 25, 29, 32, 46, 57, 66, 69, 73, 96, 107, 128, 184, 204, 209, 213, 221, 224, 230, 246, 283], "think": [4, 11, 12, 13, 14, 21, 22, 23, 29, 36, 44, 56, 131, 184, 249, 253, 283, 291], "test_": [4, 11, 12, 245], "coverage_doctest": 4, "coverag": 4, "ad": [4, 5, 7, 8, 9, 11, 12, 13, 21, 27, 29, 38, 45, 46, 49, 55, 56, 65, 66, 76, 80, 87, 90, 94, 105, 107, 111, 119, 120, 123, 129, 130, 146, 153, 181, 184, 190, 199, 200, 209, 211, 213, 214, 216, 224, 227, 230, 233, 234, 236, 239, 240, 245, 262, 283], "6868680200532414": [4, 12], "prompt": [4, 8, 12, 14], "dsolv": [4, 12, 14, 32, 230, 231, 232, 281, 285, 292], "co": [4, 9, 12, 13, 15, 23, 26, 27, 29, 31, 32, 33, 34, 38, 44, 46, 64, 65, 67, 69, 70, 71, 73, 74, 75, 78, 79, 81, 83, 87, 88, 89, 90, 92, 96, 101, 105, 107, 120, 121, 123, 129, 131, 132, 134, 136, 137, 138, 143, 146, 151, 153, 189, 191, 193, 195, 197, 198, 199, 200, 204, 207, 210, 211, 213, 214, 215, 216, 217, 221, 222, 223, 224, 226, 230, 232, 233, 234, 235, 241, 253, 259, 261, 262, 263, 264, 269, 280, 281, 283, 285, 291, 292], "sin": [4, 5, 12, 13, 14, 15, 21, 23, 26, 29, 31, 32, 34, 36, 38, 44, 46, 64, 65, 67, 69, 70, 71, 73, 74, 75, 79, 83, 84, 87, 88, 89, 90, 92, 93, 96, 101, 106, 107, 117, 120, 121, 123, 128, 129, 131, 132, 134, 136, 137, 138, 143, 146, 151, 153, 177, 189, 191, 193, 195, 197, 198, 199, 200, 202, 204, 210, 211, 213, 214, 215, 216, 217, 221, 222, 223, 224, 226, 229, 230, 232, 233, 235, 241, 247, 253, 259, 261, 262, 263, 264, 269, 280, 281, 283, 285, 286, 291, 292], "hint": [4, 12, 23, 45, 49, 56, 65, 68, 71, 92, 96, 101, 105, 115, 146, 156, 160, 176, 178, 179, 189, 210, 221, 224, 232, 291], "1st_exact": [4, 12, 230], "eq": [4, 12, 14, 15, 17, 21, 23, 27, 28, 32, 34, 42, 44, 46, 65, 70, 71, 73, 75, 78, 82, 90, 95, 182, 200, 201, 205, 210, 212, 214, 216, 220, 222, 223, 226, 227, 229, 230, 231, 232, 233, 234, 246, 247, 253, 259, 283, 285, 292], "c1": [4, 12, 19, 32, 66, 75, 82, 96, 98, 123, 165, 179, 222, 227, 230, 232, 265, 292], "comma": [4, 5, 12, 15, 46, 65, 214, 253, 283], "readabl": [4, 12, 37, 45, 93, 119, 210, 213, 214, 221, 223, 256], "accept": [4, 11, 12, 14, 23, 27, 34, 45, 46, 56, 65, 71, 79, 92, 95, 96, 98, 101, 104, 107, 129, 173, 183, 189, 194, 200, 209, 210, 213, 214, 215, 222, 224, 226, 232, 246, 253, 259, 261, 264, 287], "rang": [4, 13, 14, 19, 23, 25, 28, 29, 44, 46, 54, 55, 56, 57, 59, 61, 65, 66, 70, 71, 73, 79, 96, 101, 105, 109, 113, 117, 148, 179, 200, 203, 204, 205, 206, 207, 209, 210, 211, 216, 217, 220, 222, 223, 226, 230, 233, 234, 235, 239, 245, 252, 280, 291], "30": [4, 38, 44, 46, 51, 65, 66, 68, 69, 70, 73, 79, 81, 92, 96, 101, 102, 105, 108, 109, 129, 152, 203, 205, 209, 210, 214, 220, 223, 226, 234, 235, 291], "7": [4, 11, 12, 15, 21, 23, 25, 28, 32, 38, 40, 41, 44, 46, 49, 51, 54, 55, 56, 57, 58, 59, 61, 63, 64, 65, 66, 68, 69, 70, 71, 73, 75, 78, 79, 80, 81, 87, 90, 92, 95, 96, 98, 99, 101, 105, 107, 108, 113, 115, 131, 138, 141, 142, 146, 179, 184, 186, 199, 200, 202, 203, 204, 205, 207, 208, 209, 210, 211, 213, 214, 216, 217, 220, 221, 222, 223, 224, 226, 227, 229, 230, 231, 232, 233, 234, 235, 239, 240, 245, 246, 249, 252, 253, 259, 269, 281, 286, 287, 290], "8": [4, 11, 12, 19, 25, 31, 36, 38, 39, 44, 46, 49, 56, 57, 58, 61, 63, 65, 66, 68, 69, 70, 71, 73, 75, 78, 79, 81, 87, 90, 92, 94, 95, 96, 98, 99, 101, 102, 104, 105, 107, 108, 113, 115, 117, 131, 146, 151, 152, 163, 199, 200, 202, 203, 204, 205, 207, 209, 210, 211, 213, 214, 216, 217, 220, 222, 223, 224, 226, 227, 229, 230, 231, 232, 233, 234, 235, 239, 245, 247, 249, 252, 259, 262, 263, 269, 280, 281, 285, 287, 291], "9": [4, 11, 12, 17, 32, 34, 36, 44, 46, 53, 55, 56, 57, 61, 63, 64, 65, 66, 68, 70, 71, 73, 74, 75, 78, 79, 81, 87, 90, 92, 96, 97, 98, 99, 101, 102, 104, 105, 107, 108, 113, 115, 116, 117, 118, 120, 129, 131, 134, 140, 146, 148, 152, 184, 199, 200, 202, 203, 204, 205, 207, 209, 210, 211, 213, 214, 220, 222, 223, 224, 226, 227, 230, 232, 233, 234, 235, 245, 249, 252, 259, 262, 285, 287, 292], "11": [4, 21, 40, 41, 46, 56, 59, 61, 63, 65, 66, 68, 70, 73, 77, 78, 79, 81, 82, 90, 92, 95, 96, 97, 101, 105, 107, 115, 129, 131, 163, 173, 188, 199, 200, 202, 203, 205, 207, 208, 209, 210, 211, 213, 214, 221, 223, 227, 230, 232, 233, 234, 235, 245, 246, 252, 263], "12": [4, 12, 15, 23, 25, 38, 44, 45, 46, 51, 53, 54, 56, 57, 58, 61, 63, 64, 65, 66, 68, 70, 71, 73, 75, 78, 79, 81, 90, 92, 96, 101, 102, 105, 108, 109, 113, 115, 117, 123, 131, 132, 176, 188, 189, 199, 202, 203, 204, 207, 209, 210, 211, 213, 214, 220, 222, 223, 227, 229, 230, 234, 235, 246, 249, 252, 262, 287, 291], "13": [4, 12, 38, 46, 54, 56, 61, 65, 66, 68, 70, 73, 77, 78, 79, 80, 90, 95, 101, 105, 109, 113, 115, 129, 188, 200, 203, 207, 209, 210, 211, 213, 214, 220, 227, 229, 231, 232, 234, 235, 246, 252, 269], "14": [4, 25, 46, 54, 56, 60, 61, 63, 65, 66, 70, 71, 73, 90, 101, 102, 105, 106, 108, 113, 129, 199, 200, 203, 205, 207, 208, 209, 210, 211, 213, 214, 223, 226, 227, 230, 232, 234, 235, 281], "15": [4, 15, 23, 44, 51, 54, 56, 61, 63, 65, 66, 68, 69, 70, 73, 75, 78, 79, 81, 82, 90, 92, 95, 96, 97, 101, 102, 105, 108, 120, 152, 199, 200, 202, 203, 204, 205, 209, 210, 211, 213, 214, 216, 220, 221, 223, 226, 227, 231, 232, 233, 234, 235, 252, 280, 281, 286, 287], "16": [4, 12, 25, 34, 38, 44, 46, 48, 56, 57, 60, 64, 65, 66, 70, 73, 74, 75, 79, 90, 92, 95, 101, 102, 104, 105, 109, 195, 202, 203, 204, 207, 208, 209, 210, 213, 214, 220, 222, 223, 224, 227, 234, 235, 252, 259, 268, 287], "17": [4, 31, 32, 34, 54, 56, 57, 65, 66, 69, 70, 71, 75, 78, 81, 90, 101, 105, 115, 204, 205, 209, 210, 213, 214, 221, 223, 227, 230, 235, 249, 253, 285], "18": [4, 31, 48, 56, 57, 65, 68, 70, 73, 75, 78, 81, 97, 101, 105, 108, 109, 113, 115, 117, 190, 199, 207, 208, 213, 214, 222, 223, 227, 230, 232, 233, 234, 235, 262], "19": [4, 31, 56, 65, 68, 73, 75, 78, 81, 101, 105, 107, 108, 199, 205, 209, 210, 213, 223, 227, 229, 232, 246, 280], "20": [4, 15, 31, 34, 42, 46, 54, 56, 57, 64, 65, 66, 69, 70, 73, 81, 82, 92, 101, 105, 108, 109, 111, 115, 126, 184, 186, 199, 200, 204, 208, 209, 210, 211, 213, 214, 220, 221, 222, 223, 226, 227, 230, 233, 234, 259, 281], "21": [4, 13, 51, 56, 65, 68, 70, 78, 79, 87, 101, 105, 107, 108, 188, 200, 205, 207, 208, 209, 211, 213, 214, 220, 230, 234, 235, 291], "22": [4, 12, 15, 56, 65, 68, 69, 70, 73, 101, 105, 108, 109, 188, 208, 213, 226, 227, 232, 234], "23": [4, 44, 56, 57, 65, 68, 71, 73, 79, 81, 101, 105, 108, 188, 205, 207, 210, 213, 220, 227, 252], "24": [4, 11, 12, 28, 30, 31, 38, 44, 53, 57, 58, 65, 68, 70, 73, 79, 87, 92, 101, 105, 108, 109, 113, 115, 176, 186, 199, 205, 207, 209, 210, 211, 213, 216, 221, 227, 230, 234, 249, 252, 269, 281, 287], "25": [4, 15, 28, 31, 56, 57, 66, 68, 70, 73, 75, 78, 80, 97, 101, 104, 105, 108, 109, 115, 120, 126, 193, 199, 203, 207, 209, 210, 213, 214, 220, 221, 223, 227, 229, 230, 231, 234, 246], "26": [4, 54, 65, 66, 68, 73, 77, 101, 105, 108, 109, 210, 227, 234], "27": [4, 11, 29, 46, 47, 56, 60, 70, 75, 101, 105, 108, 109, 115, 117, 207, 210, 232], "28": [4, 46, 56, 64, 68, 69, 73, 101, 105, 108, 131, 223, 227, 230, 286], "29": [4, 21, 38, 40, 41, 54, 56, 57, 65, 66, 68, 70, 71, 78, 79, 101, 105, 115, 168, 204, 222, 234, 252], "assumpt": [4, 12, 14, 15, 20, 22, 24, 28, 29, 30, 39, 40, 42, 43, 45, 46, 56, 57, 59, 64, 67, 69, 71, 72, 92, 95, 96, 101, 102, 108, 115, 119, 146, 183, 186, 191, 203, 213, 214, 222, 223, 226, 230, 232, 233, 239, 247, 252, 270, 271, 291], "parenthes": [4, 12, 15, 65, 107, 119, 167, 168, 198, 214, 238, 255], "respect": [4, 9, 13, 14, 15, 23, 32, 39, 41, 42, 44, 45, 46, 47, 55, 56, 57, 60, 61, 63, 64, 65, 67, 70, 71, 73, 75, 77, 81, 82, 87, 88, 90, 92, 95, 96, 98, 101, 105, 107, 108, 109, 111, 115, 120, 121, 123, 126, 133, 140, 142, 144, 146, 153, 168, 181, 182, 188, 189, 193, 195, 198, 199, 200, 201, 204, 207, 209, 210, 211, 214, 216, 217, 220, 222, 226, 230, 231, 232, 233, 234, 235, 239, 240, 245, 247, 259, 261, 262, 263, 264, 265, 266, 267, 268, 281, 291], "type": [4, 7, 9, 11, 13, 14, 15, 16, 18, 21, 22, 23, 26, 28, 29, 34, 40, 41, 44, 48, 56, 57, 61, 64, 65, 66, 67, 68, 69, 71, 75, 76, 77, 78, 79, 80, 83, 90, 92, 93, 94, 95, 96, 97, 98, 101, 105, 106, 107, 108, 109, 111, 113, 115, 119, 123, 124, 129, 140, 146, 151, 165, 173, 174, 175, 177, 183, 189, 193, 194, 198, 200, 201, 204, 205, 208, 209, 210, 211, 212, 214, 215, 216, 222, 223, 224, 226, 227, 229, 230, 232, 238, 239, 240, 243, 245, 246, 247, 252, 253, 255, 263, 266, 269, 281, 283, 285, 286, 287, 290, 291, 292], "enclos": [4, 75, 76, 81, 104, 116, 214, 224, 253], "backtick": [4, 5, 8], "colon": [4, 65], "preced": [4, 5, 15, 47, 57, 65, 66, 69, 70, 159, 226, 253], "space": [4, 12, 15, 23, 44, 45, 46, 65, 66, 67, 74, 75, 76, 78, 80, 81, 94, 101, 107, 108, 117, 123, 124, 125, 126, 148, 150, 153, 163, 166, 168, 174, 176, 189, 193, 195, 198, 199, 200, 201, 209, 233, 234, 245, 249, 259, 261, 263, 264, 265, 266, 268, 269, 276, 283, 286], "omit": [4, 13, 21, 23, 46, 57, 64, 65, 66, 70, 90, 92, 95, 101, 181, 214, 215, 222, 224, 232, 238, 247, 252, 281], "absent": [4, 49, 232], "possibl": [4, 8, 11, 12, 13, 14, 17, 21, 22, 23, 25, 28, 33, 36, 44, 46, 47, 48, 49, 54, 56, 57, 59, 60, 61, 65, 66, 70, 71, 73, 75, 77, 79, 80, 82, 87, 89, 90, 92, 94, 95, 96, 98, 101, 105, 116, 117, 119, 124, 131, 142, 173, 175, 179, 181, 183, 184, 188, 193, 195, 199, 200, 201, 202, 204, 205, 207, 209, 210, 211, 213, 214, 215, 216, 220, 221, 222, 223, 226, 227, 230, 231, 232, 233, 234, 235, 240, 245, 247, 248, 249, 250, 252, 253, 263, 264, 266, 282, 283, 286, 291], "specifi": [4, 5, 13, 17, 21, 23, 25, 30, 31, 33, 34, 45, 46, 47, 60, 64, 65, 66, 67, 68, 71, 73, 74, 78, 81, 90, 92, 94, 95, 96, 98, 101, 105, 107, 108, 109, 115, 120, 123, 124, 128, 129, 131, 133, 134, 136, 139, 141, 142, 143, 144, 146, 147, 163, 168, 173, 174, 176, 177, 182, 188, 189, 191, 193, 195, 197, 198, 201, 202, 203, 204, 205, 207, 209, 210, 211, 214, 216, 217, 220, 221, 222, 224, 226, 230, 231, 232, 233, 234, 235, 239, 240, 241, 245, 246, 247, 252, 253, 259, 261, 262, 265, 268, 287], "displai": [4, 5, 7, 11, 15, 21, 22, 32, 65, 66, 69, 90, 94, 108, 109, 113, 150, 183, 189, 193, 194, 200, 204, 205, 214, 222, 238, 245], "signatur": [4, 7, 23, 40, 41, 57, 65, 101, 247, 248, 252, 253], "brace": [4, 70, 129, 214], "appear": [4, 5, 11, 12, 14, 15, 17, 32, 45, 46, 49, 54, 56, 65, 66, 70, 71, 74, 75, 78, 81, 84, 88, 90, 92, 96, 101, 105, 107, 129, 133, 163, 179, 181, 184, 200, 202, 204, 207, 209, 210, 214, 223, 226, 230, 231, 232, 234, 238, 240, 245, 252, 253, 259, 264], "shape": [4, 13, 46, 81, 96, 98, 101, 103, 104, 113, 115, 123, 128, 129, 189, 200, 201, 203, 214, 217, 224, 234, 235, 236, 238, 239, 240, 253, 290], "combin": [4, 11, 13, 15, 23, 25, 33, 45, 65, 69, 70, 73, 92, 94, 95, 96, 105, 109, 115, 123, 128, 132, 139, 147, 158, 165, 173, 174, 176, 177, 178, 182, 183, 184, 185, 201, 202, 204, 205, 207, 209, 210, 214, 215, 223, 224, 226, 227, 230, 232, 234, 235, 249, 252, 280, 283, 286], "incorrectli": [4, 11, 13, 23, 74, 75, 101, 202], "opt_cs": [4, 226], "canon": [4, 14, 21, 27, 46, 49, 54, 56, 57, 61, 65, 66, 67, 71, 81, 90, 95, 101, 105, 107, 124, 156, 160, 179, 181, 184, 186, 207, 215, 222, 223, 226, 230, 232, 234, 240, 252, 291], "find": [4, 9, 11, 12, 14, 15, 17, 19, 20, 23, 26, 27, 28, 29, 30, 32, 33, 34, 38, 41, 44, 46, 47, 48, 56, 59, 60, 61, 64, 65, 69, 71, 73, 75, 77, 78, 79, 82, 87, 90, 92, 94, 101, 105, 107, 121, 130, 137, 144, 146, 148, 164, 171, 173, 174, 175, 179, 182, 184, 197, 200, 201, 202, 203, 204, 205, 207, 211, 213, 214, 219, 220, 221, 222, 223, 224, 226, 227, 229, 230, 232, 233, 234, 240, 249, 252, 253, 255, 259, 269, 281, 283, 285, 287, 292], "optim": [4, 14, 31, 46, 49, 56, 69, 95, 105, 119, 146, 159, 163, 210, 214, 215, 223, 226, 234, 246], "mul": [4, 13, 14, 15, 18, 23, 38, 90, 92, 96, 105, 159, 163, 173, 174, 203, 204, 205, 209, 210, 214, 215, 216, 223, 226, 230, 231, 232, 233, 238, 286], "pow": [4, 13, 14, 15, 38, 43, 46, 65, 66, 71, 90, 96, 105, 178, 203, 204, 205, 210, 214, 216, 223, 226, 232, 233, 286, 290], "neg": [4, 14, 15, 21, 22, 29, 42, 43, 46, 47, 60, 64, 65, 70, 71, 73, 75, 77, 78, 81, 90, 92, 94, 95, 96, 101, 104, 105, 108, 109, 111, 112, 113, 115, 123, 179, 189, 199, 202, 203, 205, 207, 209, 210, 211, 214, 220, 222, 223, 224, 226, 227, 230, 232, 233, 234, 253], "coeffici": [4, 17, 19, 21, 25, 28, 30, 41, 44, 46, 64, 65, 67, 69, 70, 73, 78, 83, 84, 87, 88, 90, 94, 95, 98, 101, 102, 105, 115, 116, 124, 129, 152, 166, 176, 184, 199, 201, 202, 203, 204, 205, 206, 209, 210, 211, 212, 213, 216, 217, 220, 221, 224, 226, 227, 229, 230, 231, 232, 233, 234, 240, 246, 263, 266, 276, 286, 291], "none": [4, 5, 12, 13, 14, 21, 22, 23, 38, 39, 40, 41, 42, 44, 45, 46, 48, 54, 55, 56, 57, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 86, 87, 88, 90, 92, 93, 95, 96, 98, 101, 102, 105, 106, 107, 108, 115, 120, 121, 123, 124, 125, 126, 128, 129, 148, 150, 152, 153, 159, 164, 169, 174, 176, 179, 181, 185, 186, 187, 189, 191, 193, 194, 198, 199, 200, 201, 203, 204, 205, 207, 209, 210, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 226, 227, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 243, 245, 246, 247, 248, 252, 253, 255, 258, 259, 262, 287, 291, 292], "process": [4, 5, 6, 7, 9, 10, 12, 13, 14, 15, 21, 43, 46, 56, 57, 63, 65, 66, 71, 73, 81, 90, 92, 101, 105, 115, 125, 129, 131, 137, 140, 141, 143, 146, 200, 201, 207, 214, 215, 222, 226, 230, 232, 236, 245, 249, 291], "concern": [4, 12, 14, 21, 44, 47, 64, 69, 105, 195, 200, 202, 203, 204, 213, 214, 215, 226, 227, 232, 246, 247, 249, 255], "item": [4, 5, 14, 15, 17, 25, 32, 46, 54, 55, 57, 65, 70, 76, 82, 96, 101, 105, 124, 126, 144, 200, 204, 207, 210, 214, 222, 230, 231, 234, 245, 246, 249, 252, 253, 291], "fragment": [4, 66], "desir": [4, 13, 15, 19, 23, 27, 32, 34, 37, 56, 57, 65, 66, 68, 69, 70, 71, 75, 79, 81, 95, 96, 101, 104, 105, 106, 124, 125, 126, 128, 139, 143, 164, 189, 197, 198, 203, 205, 207, 209, 210, 211, 214, 215, 217, 222, 226, 230, 232, 233, 246, 248, 249, 252, 266, 280], "span": [4, 13, 94, 101, 108, 109, 123, 209, 214, 250, 287], "subsequ": [4, 11, 12, 15, 32, 65, 71, 189, 205, 207, 210, 249, 252, 263, 266], "indent": [4, 15, 255], "embed": [4, 5, 44, 57, 65, 93, 209], "hyperlink": 4, "classnam": 4, "erf": [4, 73, 90, 92, 214, 224, 234], "gauss": [4, 30, 73, 92, 101, 148, 202, 209, 212, 232, 233], "erfc": [4, 73, 90, 214, 234], "complementari": [4, 73, 115], "erfi": [4, 73, 90, 214], "erf2": [4, 73, 214], "erfinv": [4, 73, 214, 234], "invers": [4, 12, 30, 32, 38, 56, 57, 65, 66, 67, 73, 92, 98, 101, 105, 123, 124, 168, 172, 173, 176, 181, 184, 201, 202, 203, 205, 207, 210, 211, 214, 216, 224, 226, 230, 232, 233, 234, 252, 287, 291], "erfcinv": [4, 73, 214], "erf2inv": [4, 73, 214], "besselj": [4, 73, 87, 214, 226, 230, 285], "besselbas": [4, 73], "bessel": [4, 5, 71, 83, 92, 210, 226, 230, 234, 285], "kind": [4, 5, 13, 14, 20, 21, 22, 23, 45, 46, 67, 70, 73, 85, 92, 96, 108, 111, 124, 129, 142, 183, 195, 202, 204, 205, 210, 215, 216, 222, 230, 231, 234, 252, 266, 268, 281, 291], "bess": [4, 73, 214, 226, 230, 234], "besselk": [4, 73, 214, 234], "cite": [4, 24], "resourc": [4, 5, 8, 23, 101, 208, 230, 246, 256], "citat": 4, "meant": [4, 5, 12, 13, 15, 21, 23, 46, 65, 73, 78, 92, 105, 129, 146, 200, 205, 222, 226, 231, 236, 264, 286], "augment": [4, 46, 101, 124, 141, 142, 146, 212, 232, 233, 250, 253, 292], "freeli": [4, 37, 99, 123, 201], "wikipedia": [4, 14, 21, 23, 38, 40, 41, 42, 44, 45, 46, 48, 53, 54, 56, 57, 64, 65, 66, 67, 68, 70, 71, 73, 75, 77, 81, 82, 83, 92, 94, 95, 96, 98, 101, 105, 113, 115, 118, 148, 150, 151, 152, 154, 155, 156, 160, 161, 162, 165, 167, 168, 177, 179, 182, 189, 191, 196, 203, 210, 217, 221, 222, 223, 230, 233, 234, 247, 252, 259, 261, 265, 267, 269, 285, 287, 289], "wolfram": [4, 42, 58, 59, 65, 66, 68, 70, 71, 73, 75, 81, 92, 101, 105, 107, 208, 214, 216, 217, 219, 222, 227, 234, 252, 287], "mathworld": [4, 14, 42, 58, 59, 65, 66, 68, 70, 71, 73, 75, 81, 92, 101, 105, 208, 217, 222, 227, 234, 252], "nist": [4, 71, 73, 184], "digit": [4, 11, 14, 15, 31, 46, 65, 66, 68, 69, 75, 92, 95, 105, 139, 189, 204, 210, 221, 226, 252, 280], "dlmf": [4, 71, 73], "suffer": 4, "rot": [4, 81, 176], "publish": [4, 90, 224], "identifi": [4, 12, 13, 21, 22, 44, 58, 65, 68, 69, 92, 101, 111, 141, 167, 168, 201, 204, 205, 215, 223, 226, 230, 231, 233, 234, 253, 256], "clickabl": 4, "kozen89": [4, 207, 208], "d": [4, 5, 7, 8, 11, 12, 13, 14, 15, 19, 23, 26, 28, 30, 32, 38, 45, 49, 54, 56, 57, 58, 60, 61, 63, 64, 65, 66, 67, 70, 73, 75, 79, 83, 88, 90, 92, 94, 95, 96, 97, 98, 101, 102, 104, 105, 107, 108, 111, 115, 123, 124, 146, 148, 151, 152, 158, 168, 176, 178, 179, 184, 188, 189, 191, 197, 198, 199, 200, 202, 203, 204, 205, 207, 208, 209, 210, 211, 214, 216, 220, 224, 226, 227, 230, 231, 232, 233, 234, 235, 236, 238, 240, 252, 255, 259, 261, 262, 263, 264, 268, 276, 287, 292], "kozen": [4, 208], "landau": [4, 208, 281], "polynomi": [4, 5, 14, 19, 21, 26, 28, 34, 42, 56, 64, 65, 66, 69, 70, 83, 84, 86, 88, 92, 95, 96, 98, 101, 105, 109, 115, 146, 188, 201, 203, 208, 212, 216, 221, 223, 224, 226, 227, 229, 230, 233, 245, 270, 277, 282, 287, 292], "decomposit": [4, 25, 30, 56, 63, 97, 98, 101, 203, 205, 207, 208, 216, 291], "1989": [4, 208, 232], "pp": [4, 56, 57, 63, 64, 65, 66, 70, 71, 92, 96, 101, 133, 143, 199, 202, 203, 207, 208, 230, 231, 234], "445": [4, 208], "456": [4, 65, 208], "abramowitz": [4, 73], "milton": [4, 73], "stegun": [4, 73], "iren": [4, 73], "chapter": [4, 56, 73, 105, 129, 208], "handbook": [4, 47, 55, 56, 63, 73, 105], "formula": [4, 19, 25, 38, 44, 59, 64, 65, 69, 70, 71, 73, 78, 95, 101, 105, 199, 201, 207, 210, 214, 216, 220, 223, 226, 227, 230, 285, 291], "tabl": [4, 21, 47, 56, 65, 70, 73, 86, 92, 101, 105, 123, 146, 199, 209, 236], "ed": [4, 57, 73, 92, 101, 208, 232, 234], "1965": [4, 73, 96], "luke": [4, 73, 90, 224], "l": [4, 13, 15, 44, 45, 46, 47, 54, 56, 57, 64, 66, 73, 76, 77, 78, 79, 80, 82, 83, 88, 90, 92, 94, 97, 98, 101, 105, 108, 109, 115, 117, 123, 124, 126, 128, 129, 132, 133, 134, 136, 137, 138, 142, 143, 144, 145, 146, 147, 148, 151, 177, 180, 181, 182, 184, 197, 198, 199, 201, 203, 205, 207, 208, 214, 216, 217, 223, 224, 227, 230, 232, 234, 238, 239, 240, 241, 245, 247, 252, 269, 291], "Their": [4, 65, 73, 90, 199, 200, 204, 207, 224], "approxim": [4, 15, 20, 34, 44, 56, 64, 65, 66, 69, 73, 75, 81, 90, 92, 101, 105, 109, 112, 148, 182, 200, 204, 205, 210, 217, 221, 224, 234, 281, 285], "1969": [4, 66, 73, 90, 208, 224], "en": [4, 5, 8, 9, 11, 12, 21, 23, 38, 40, 41, 42, 44, 45, 46, 48, 53, 54, 56, 57, 64, 65, 66, 67, 68, 70, 71, 73, 75, 77, 81, 82, 83, 92, 93, 94, 95, 96, 98, 101, 105, 113, 115, 118, 148, 150, 151, 152, 154, 155, 156, 160, 161, 162, 165, 167, 168, 177, 179, 189, 191, 196, 203, 210, 211, 217, 221, 222, 223, 230, 233, 234, 247, 252, 253, 259, 261, 265, 267, 269, 287], "bessel_funct": [4, 73], "typefunct": [4, 73], "gamma": [4, 5, 12, 15, 23, 64, 65, 67, 69, 70, 90, 92, 118, 146, 176, 198, 199, 214, 224, 226, 230, 234, 291], "infti": [4, 14, 21, 42, 64, 65, 66, 70, 71, 73, 90, 92, 201, 210, 217, 221, 224, 230, 233, 234, 281, 285, 291], "mathrm": [4, 36, 55, 64, 65, 66, 73, 90, 92, 101, 205, 207, 214, 222, 224, 230, 233, 234, 281, 285], "factori": [4, 12, 19, 23, 30, 64, 65, 69, 70, 73, 101, 105, 107, 199, 205, 207, 209, 210, 214, 216, 226, 232, 234, 247, 248, 252, 253, 291], "z": [4, 13, 14, 15, 17, 21, 23, 28, 31, 32, 33, 38, 42, 43, 46, 47, 56, 57, 64, 65, 66, 67, 68, 70, 71, 73, 77, 78, 79, 80, 81, 90, 92, 95, 96, 98, 101, 107, 108, 109, 115, 117, 120, 121, 123, 126, 129, 131, 132, 133, 134, 136, 137, 138, 140, 143, 144, 146, 147, 148, 157, 159, 163, 173, 174, 176, 180, 184, 188, 189, 190, 191, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 213, 214, 215, 221, 222, 223, 224, 226, 227, 230, 231, 232, 233, 234, 235, 238, 239, 240, 246, 247, 253, 259, 262, 263, 264, 265, 266, 268, 269, 280, 281, 283, 285, 286, 290, 291, 292], "whole": [4, 12, 13, 21, 65, 67, 73, 92, 109, 117, 200, 201, 209, 210, 214, 217, 222, 224, 230, 233, 252], "complex": [4, 7, 12, 13, 14, 15, 18, 21, 23, 28, 29, 30, 34, 38, 42, 43, 44, 46, 56, 65, 66, 68, 69, 70, 73, 77, 87, 90, 96, 97, 101, 105, 106, 107, 113, 115, 119, 124, 129, 146, 148, 152, 162, 165, 167, 168, 179, 188, 189, 198, 202, 203, 205, 209, 210, 214, 215, 219, 222, 224, 226, 230, 232, 233, 234, 247, 255, 291, 292], "plane": [4, 38, 65, 73, 75, 77, 78, 80, 81, 92, 101, 113, 123, 131, 151, 152, 197, 198, 222, 233, 269, 277, 291], "pole": [4, 14, 73, 90, 115, 123, 152, 221, 224, 230], "pi": [4, 12, 13, 14, 15, 18, 21, 23, 26, 27, 29, 32, 34, 37, 38, 39, 41, 42, 43, 44, 46, 57, 64, 65, 67, 69, 70, 71, 73, 74, 75, 76, 78, 79, 80, 81, 84, 90, 92, 101, 105, 117, 123, 131, 146, 148, 150, 151, 152, 153, 155, 163, 174, 176, 177, 180, 182, 189, 199, 200, 202, 204, 205, 210, 214, 217, 221, 222, 223, 224, 226, 229, 230, 232, 233, 234, 252, 259, 262, 269, 280, 285, 291], "oo": [4, 14, 17, 21, 22, 27, 42, 44, 64, 65, 69, 70, 71, 73, 78, 90, 92, 95, 101, 115, 117, 165, 177, 180, 205, 207, 210, 219, 220, 221, 222, 226, 229, 230, 232, 233, 234, 239, 252, 255, 281, 285], "known": [4, 11, 12, 14, 21, 22, 23, 32, 41, 45, 46, 47, 48, 54, 56, 57, 65, 66, 69, 70, 73, 75, 78, 83, 90, 92, 93, 102, 105, 113, 115, 116, 118, 120, 126, 143, 182, 189, 197, 203, 204, 205, 209, 210, 214, 217, 220, 222, 223, 224, 226, 229, 230, 231, 232, 234, 252, 253, 259, 266, 268, 291], "sqrt": [4, 12, 13, 14, 17, 21, 23, 25, 26, 27, 28, 29, 33, 34, 38, 42, 43, 44, 46, 65, 67, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 88, 89, 90, 92, 93, 96, 97, 101, 105, 107, 108, 111, 115, 117, 131, 148, 150, 152, 153, 158, 163, 173, 174, 176, 177, 179, 180, 182, 183, 189, 195, 198, 199, 202, 204, 205, 207, 209, 210, 213, 214, 215, 220, 223, 224, 226, 227, 229, 230, 232, 233, 234, 252, 253, 255, 259, 268, 269, 280, 285, 290, 291, 292], "obei": [4, 73, 199, 214, 224], "mirror": [4, 73, 92, 152], "symmetri": [4, 13, 48, 53, 58, 61, 73, 96, 158, 199, 230, 238, 240, 280, 291], "conjug": [4, 25, 42, 54, 55, 56, 65, 71, 73, 96, 101, 117, 148, 162, 165, 179, 210, 214, 230, 240], "differenti": [4, 5, 12, 13, 14, 26, 44, 65, 70, 71, 73, 82, 83, 85, 88, 92, 115, 123, 124, 128, 129, 131, 133, 136, 139, 140, 141, 142, 143, 146, 147, 168, 174, 188, 189, 191, 193, 195, 198, 201, 207, 211, 213, 214, 219, 224, 226, 230, 231, 259, 266, 267, 270, 277, 281, 282, 285], "polygamma": [4, 70, 73, 214], "seri": [4, 11, 12, 19, 32, 44, 45, 46, 47, 55, 56, 64, 65, 67, 69, 70, 71, 73, 88, 89, 90, 94, 105, 112, 115, 129, 136, 138, 146, 193, 197, 206, 207, 214, 219, 220, 224, 230, 233, 271, 277, 282], "expans": [4, 11, 19, 23, 46, 65, 67, 70, 71, 73, 92, 101, 105, 143, 158, 160, 210, 211, 216, 217, 218, 223, 225, 226, 230, 232, 233, 271, 282, 291], "eulergamma": [4, 65, 69, 70, 73], "zeta": [4, 14, 15, 64, 65, 69, 70, 205, 209, 214, 221, 234], "40": [4, 34, 46, 68, 70, 73, 75, 82, 96, 101, 105, 108, 200, 211, 213, 214, 234, 255, 280], "288037795340032417959588909060233922890": [4, 73], "49801566811835604271": [4, 73], "15494982830181068512": [4, 73], "lowergamma": [4, 73, 234], "lower": [4, 14, 21, 27, 42, 44, 46, 56, 57, 64, 65, 67, 73, 74, 76, 81, 82, 92, 96, 97, 98, 101, 113, 118, 123, 179, 193, 199, 201, 203, 205, 207, 210, 214, 223, 224, 226, 230, 239, 240, 249, 259, 281, 289], "uppergamma": [4, 70, 73, 214, 234], "upper": [4, 42, 64, 66, 69, 73, 74, 81, 82, 96, 97, 98, 101, 104, 105, 113, 123, 172, 179, 199, 203, 205, 207, 209, 210, 214, 224, 232, 239, 259], "loggamma": [4, 5, 73, 214], "log": [4, 5, 9, 11, 12, 15, 23, 36, 38, 44, 46, 56, 64, 65, 69, 70, 71, 73, 83, 87, 89, 90, 92, 96, 101, 105, 200, 205, 214, 216, 221, 224, 226, 230, 233, 234, 241, 281, 291, 292], "digamma": [4, 70, 73, 214], "trigamma": [4, 73, 214], "beta": [4, 15, 46, 56, 65, 92, 176, 189, 199, 209, 211, 214, 230, 234], "euler": [4, 38, 44, 45, 64, 65, 66, 69, 70, 73, 81, 87, 93, 105, 123, 176, 189, 194, 198, 199, 210, 214, 230, 234, 259, 261], "gamma_funct": [4, 73], "gov": [4, 71, 73], "gammafunct": [4, 73], "gammabetaerf": [4, 70, 73], "unusu": [4, 21, 131, 245], "inlin": [4, 12, 93, 194, 214, 247], "pretti": [4, 9, 11, 12, 14, 23, 45, 46, 73, 92, 93, 101, 105, 109, 115, 131, 194, 224, 226, 233, 268, 282, 285, 287, 291], "As": [4, 18, 19, 22, 23, 25, 30, 31, 32, 37, 46, 56, 57, 65, 66, 69, 70, 71, 73, 89, 90, 95, 101, 104, 105, 107, 123, 128, 129, 131, 133, 140, 143, 144, 179, 184, 197, 201, 202, 204, 205, 207, 210, 211, 213, 214, 221, 222, 224, 230, 233, 234, 252, 253, 263, 264, 280, 281, 283, 285, 286, 287, 290, 291], "literatur": [4, 14, 90, 206, 277], "fact": [4, 12, 13, 14, 21, 22, 23, 29, 41, 42, 65, 70, 73, 83, 90, 105, 111, 131, 143, 184, 201, 202, 204, 207, 209, 211, 213, 224, 226, 230, 233, 245, 253, 268, 280, 283, 284, 285, 286, 291], "eval": [4, 13, 21, 40, 41, 46, 65, 71, 73, 165, 179, 205, 210, 214, 247, 280], "illumin": 4, "tone": 4, "narr": [4, 284], "excerpt": 4, "geometri": [4, 74, 75, 76, 78, 79, 80, 81, 82, 92, 139, 152, 206, 262, 269, 270, 277, 285], "autofunct": [4, 11], "intersect": [4, 21, 29, 44, 45, 56, 75, 76, 78, 79, 80, 81, 82, 101, 152, 201, 210, 214, 220, 221, 222, 233], "convex_hul": [4, 77, 81, 82], "are_similar": [4, 76, 77, 82], "autoclass": 4, "linearent": [4, 75, 78, 79, 80, 81], "rai": [4, 75, 77, 78, 79, 81, 82, 148, 152], "segment": [4, 13, 56, 75, 77, 78, 79, 80, 81, 82, 197, 200, 230, 245], "curv": [4, 45, 67, 77, 92, 105, 108, 148, 200, 201, 230, 259, 269, 277, 281], "ellips": [4, 76, 77, 81, 151, 200, 214, 277, 290], "circl": [4, 23, 65, 75, 76, 77, 79, 80, 81, 82, 90, 152, 159, 200, 233, 259, 262, 269], "polygon": [4, 75, 76, 77, 82, 200, 269, 277], "regularpolygon": [4, 76, 77, 81, 200], "triangl": [4, 23, 45, 70, 76, 77, 81, 82, 92, 96, 105, 199, 200, 262, 269], "rel": [4, 5, 28, 45, 46, 55, 56, 57, 58, 62, 63, 64, 65, 66, 69, 76, 90, 105, 120, 123, 124, 126, 134, 143, 144, 151, 178, 189, 193, 197, 198, 201, 203, 204, 207, 209, 222, 224, 229, 232, 234, 245, 252, 263, 264, 268, 285], "cumbersom": [4, 11, 34], "path": [4, 8, 11, 12, 13, 56, 81, 87, 115, 137, 195, 197, 223, 226, 230, 233, 245, 246, 249, 250, 252, 255, 256, 257, 266], "viewcod": 4, "aco": [4, 15, 38, 71, 78, 81, 131, 146, 152, 189, 214, 230, 259, 291], "obj": [4, 21, 65, 205, 210, 214, 248], "qualifi": [4, 256], "elementari": [4, 11, 12, 21, 22, 23, 56, 65, 66, 69, 72, 73, 87, 90, 92, 96, 101, 105, 144, 172, 175, 205, 210, 211, 252, 253, 263, 271], "trigonometr": [4, 23, 27, 34, 65, 92, 211, 217, 225, 226, 229, 230, 233, 253, 271, 282, 292], "trail": [4, 12, 57, 105, 205, 207, 210, 250, 255], "pair": [4, 15, 19, 25, 28, 45, 46, 56, 57, 65, 66, 71, 77, 82, 89, 101, 105, 129, 133, 144, 169, 171, 173, 174, 179, 199, 201, 204, 205, 207, 209, 210, 215, 220, 221, 223, 224, 226, 227, 230, 233, 234, 247, 252, 263, 280, 287], "www": [4, 5, 38, 44, 56, 57, 66, 68, 70, 92, 93, 105, 113, 194, 208, 213, 214, 223, 226, 227, 230, 234, 252, 287, 290], "master": [4, 5, 7, 11, 12, 36, 92, 245], "usag": [4, 5, 12, 14, 15, 21, 22, 23, 37, 40, 67, 71, 92, 105, 176, 195, 200, 201, 207, 214, 222, 224, 227, 230, 231, 235, 249, 253, 254, 266, 267, 274, 286], "expect": [4, 5, 7, 15, 21, 23, 45, 47, 50, 65, 71, 73, 77, 95, 105, 106, 115, 123, 129, 173, 204, 207, 209, 211, 212, 221, 226, 229, 232, 233, 234, 243, 245, 246, 249, 252, 253, 285, 286], "vector": [4, 13, 19, 38, 42, 46, 49, 56, 57, 65, 67, 73, 78, 79, 80, 87, 88, 94, 96, 101, 106, 108, 111, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 131, 133, 136, 137, 138, 140, 141, 142, 143, 144, 146, 147, 151, 152, 165, 174, 176, 181, 184, 189, 191, 193, 194, 201, 209, 214, 224, 230, 232, 234, 239, 240, 245, 246, 261, 265, 270, 274, 276, 287], "dynamicsymbol": [4, 101, 119, 120, 121, 123, 124, 126, 128, 129, 131, 132, 133, 134, 136, 137, 138, 140, 141, 142, 143, 144, 146, 147, 189, 191, 193, 194, 195, 197, 198], "custom": [4, 9, 13, 24, 46, 57, 65, 69, 72, 93, 96, 101, 121, 123, 188, 194, 195, 216, 220, 227, 234, 240, 246, 253, 259, 268, 285, 287], "sine": [4, 23, 65, 71, 73, 90, 92, 153, 211, 217, 223, 280], "expand": [4, 12, 13, 14, 15, 19, 21, 25, 46, 65, 67, 69, 70, 71, 73, 90, 92, 96, 115, 129, 131, 146, 160, 168, 171, 178, 179, 202, 204, 207, 209, 210, 211, 214, 217, 221, 223, 224, 226, 230, 233, 234, 238, 246, 253, 265, 280, 285], "troubleshoot": [4, 9, 143], "tip": [4, 7, 8, 12, 65, 143, 230, 231, 291], "spell": [4, 13, 14, 230], "try": [4, 5, 11, 12, 13, 14, 15, 21, 22, 23, 25, 27, 28, 31, 32, 34, 57, 64, 65, 69, 73, 75, 80, 90, 92, 95, 98, 101, 104, 105, 169, 171, 178, 179, 200, 204, 205, 209, 214, 219, 221, 222, 223, 224, 226, 227, 230, 232, 252, 253, 255, 280, 283, 286, 287, 291], "referencefram": [4, 13, 120, 121, 123, 124, 126, 129, 131, 132, 133, 136, 137, 138, 141, 142, 143, 144, 146, 147, 189, 190, 191, 193, 194, 195, 196, 197, 276], "though": [4, 11, 14, 15, 21, 22, 23, 25, 31, 32, 33, 34, 37, 47, 65, 66, 67, 70, 77, 81, 90, 92, 96, 101, 105, 119, 124, 131, 141, 143, 174, 183, 188, 189, 197, 198, 202, 204, 205, 210, 211, 223, 224, 226, 230, 231, 232, 233, 245, 266, 281, 286, 291], "frame": [4, 119, 120, 121, 123, 124, 126, 128, 129, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 146, 147, 188, 189, 190, 191, 193, 195, 197, 249, 259, 266], "notimplementederror": [4, 27, 29, 32, 33, 34, 44, 64, 75, 78, 82, 92, 101, 113, 203, 209, 213, 222, 229, 230, 231, 232, 233], "outsid": [4, 29, 42, 56, 65, 73, 76, 81, 96, 105, 119, 184, 198, 210, 226, 281, 286], "plot": [4, 23, 32, 36, 74, 75, 77, 78, 81, 88, 93, 101, 108, 109, 114, 146, 163, 166, 172, 217, 270, 276, 277, 285, 290], "recommend": [4, 8, 9, 11, 13, 14, 15, 16, 21, 23, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 45, 46, 65, 66, 69, 96, 119, 141, 146, 173, 189, 197, 202, 203, 204, 205, 211, 227, 230, 233, 239, 243, 250, 263, 264, 289, 292], "ahead": [4, 105], "submit": [4, 11], "sub": [4, 12, 13, 14, 15, 17, 21, 22, 23, 25, 28, 29, 31, 32, 46, 64, 65, 71, 73, 74, 75, 76, 77, 78, 79, 81, 92, 95, 96, 98, 101, 105, 107, 108, 109, 115, 119, 121, 129, 131, 132, 133, 136, 137, 143, 146, 176, 177, 182, 189, 199, 201, 203, 204, 205, 210, 214, 221, 222, 226, 227, 230, 231, 232, 234, 245, 246, 248, 280, 281, 283], "common": [4, 5, 9, 11, 12, 14, 15, 21, 22, 23, 26, 27, 28, 29, 32, 44, 46, 56, 57, 65, 66, 71, 76, 79, 82, 92, 98, 100, 101, 105, 106, 113, 115, 120, 123, 125, 132, 139, 144, 146, 151, 184, 189, 197, 198, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 212, 216, 222, 223, 224, 226, 227, 230, 232, 233, 234, 246, 247, 250, 252, 253, 266, 268, 274, 280, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292], "matrixcommon": [4, 96, 98, 101], "dyadic": [4, 68, 120, 126, 129, 131, 136, 138, 146, 189, 191, 194, 196, 259, 262, 267], "shorten": 4, "due": [4, 8, 12, 13, 19, 23, 31, 44, 46, 48, 55, 56, 65, 67, 82, 101, 105, 108, 111, 129, 131, 143, 152, 179, 195, 198, 204, 210, 214, 217, 227, 229, 231, 234, 250, 262, 268, 291], "highli": [5, 65, 69, 112, 204, 210, 219, 247], "aspect": [5, 7, 11, 12, 21, 101, 204], "project": [5, 9, 10, 11, 13, 46, 48, 78, 79, 80, 94, 101, 145, 246, 247, 253, 259], "teach": [5, 57, 66, 70, 234], "conduct": 5, "accord": [5, 15, 46, 53, 56, 57, 61, 64, 65, 66, 73, 95, 98, 101, 105, 107, 123, 130, 139, 173, 179, 200, 205, 207, 209, 211, 227, 232, 233, 240, 245, 247, 252, 268], "survei": 5, "commonli": [5, 14, 57, 70, 73, 92, 101, 119, 197, 202, 230, 266], "encount": [5, 15, 19, 25, 65, 92, 101, 171, 202, 207, 210, 232, 233, 247, 259, 287], "problem": [5, 9, 11, 12, 13, 14, 15, 19, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 38, 49, 59, 61, 65, 66, 77, 90, 92, 96, 101, 105, 108, 110, 111, 116, 119, 129, 133, 134, 137, 139, 141, 188, 197, 198, 201, 202, 207, 224, 226, 227, 230, 233, 249, 252, 276, 281, 283, 287], "offer": [5, 45, 46, 56, 65, 106, 119, 146, 188, 198, 204, 209, 249, 267], "bring": [5, 90, 124, 137, 203, 217, 226, 287], "greater": [5, 25, 42, 57, 65, 70, 71, 73, 90, 94, 105, 115, 205, 207, 210, 213, 221, 226, 230, 232, 234, 249, 252, 266, 281], "clariti": [5, 56, 193], "mission": [5, 45, 99], "ca": [5, 36, 66, 70, 73, 92, 213, 214, 252], "dedic": [5, 46, 48, 144, 206, 229, 247, 264, 266], "tool": [5, 8, 9, 11, 12, 14, 23, 56, 93, 100, 101, 106, 115, 146, 198, 201, 206, 207, 214, 246, 252, 258, 267, 274], "essenti": [5, 49, 60, 65, 69, 71, 72, 73, 90, 126, 131, 192, 195, 196, 198, 201, 202, 205, 209, 221, 224, 260, 263, 266, 267, 268, 274, 276], "element": [5, 13, 14, 15, 18, 21, 28, 38, 42, 45, 46, 48, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 81, 88, 90, 92, 94, 95, 96, 97, 98, 101, 104, 105, 106, 108, 109, 115, 116, 126, 146, 148, 151, 165, 176, 184, 193, 196, 198, 200, 201, 202, 203, 205, 207, 210, 212, 213, 214, 220, 221, 222, 224, 226, 227, 230, 232, 233, 234, 235, 239, 246, 248, 249, 252, 253, 254, 262, 281, 286, 287, 290, 291], "deviat": [5, 152, 234], "advanc": [5, 18, 20, 23, 40, 56, 65, 69, 70, 101, 102, 139, 144, 196, 200, 203, 204, 206, 208, 209, 216, 223, 230, 245, 246, 247, 252, 276, 280, 282, 284, 288, 289, 290, 291], "docutil": 5, "sourceforg": [5, 45], "ext": [5, 201, 205], "autodoc": 5, "associ": [5, 9, 11, 14, 21, 28, 45, 47, 63, 65, 66, 72, 73, 87, 88, 90, 94, 126, 144, 146, 169, 177, 188, 189, 197, 198, 202, 203, 204, 205, 207, 209, 214, 222, 224, 227, 240, 254], "graphviz": [5, 8, 286, 290], "graphic": [5, 32, 113], "info": [5, 9, 11, 15, 115, 214, 230, 231], "bear": [5, 21], "linkcod": 5, "readthedoc": [5, 93, 253], "subset": [5, 11, 12, 19, 21, 23, 25, 44, 45, 49, 52, 56, 57, 63, 70, 71, 77, 88, 90, 92, 94, 105, 201, 203, 207, 209, 214, 222, 252, 271], "modifi": [5, 12, 14, 15, 45, 46, 56, 65, 71, 73, 105, 107, 142, 151, 200, 207, 209, 210, 211, 214, 226, 232, 233, 234, 245, 248, 249, 252, 253, 280, 285, 287], "sphinx_math_dollar": 5, "delimit": [5, 65, 214], "dollar": [5, 12, 285], "2": [5, 7, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 33, 34, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 104, 105, 107, 108, 111, 113, 115, 116, 117, 118, 119, 120, 121, 123, 124, 126, 128, 131, 132, 133, 134, 136, 137, 138, 140, 141, 142, 144, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 162, 163, 164, 165, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 188, 189, 190, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 243, 245, 246, 247, 248, 249, 252, 253, 255, 259, 261, 262, 263, 264, 265, 266, 268, 269, 280, 281, 283, 285, 286, 287, 290, 291, 292], "sphinxext": 5, "plot_direct": 5, "figur": [5, 11, 65, 66, 75, 76, 78, 80, 81, 92, 109, 129, 174, 197, 198, 199, 200, 203, 211, 214, 269, 291], "devel": [5, 199], "supersed": [5, 129, 146], "pep": [5, 46, 65, 95], "257": [5, 105, 232], "our": [5, 11, 13, 19, 23, 36, 46, 65, 73, 90, 101, 105, 124, 132, 184, 197, 198, 200, 201, 203, 205, 209, 210, 211, 214, 221, 224, 227, 230, 233, 245, 280, 283, 284, 286, 291], "introduct": [5, 6, 13, 20, 56, 57, 70, 73, 203, 205, 207, 208, 210, 214, 227, 230, 233, 267, 274, 284, 290], "four": [5, 30, 46, 48, 57, 65, 69, 73, 95, 98, 105, 111, 116, 130, 139, 144, 152, 189, 200, 201, 207, 210, 214, 222, 227, 230, 232, 234, 235, 259, 261, 264, 276], "locat": [5, 11, 12, 13, 48, 57, 65, 79, 101, 105, 108, 109, 111, 123, 126, 133, 140, 143, 144, 147, 193, 195, 209, 210, 214, 226, 234, 248, 257, 259, 263, 265, 268], "websit": [5, 7, 289], "advertis": 5, "serv": [5, 12, 14, 19, 23, 40, 41, 46, 48, 62, 65, 72, 88, 209, 230, 231, 255, 284], "initi": [5, 14, 21, 31, 40, 56, 60, 65, 66, 67, 70, 73, 81, 83, 84, 87, 88, 89, 90, 92, 93, 105, 107, 109, 111, 113, 115, 120, 124, 126, 128, 129, 131, 133, 138, 141, 142, 143, 146, 147, 151, 159, 168, 190, 191, 194, 198, 199, 207, 209, 210, 214, 220, 224, 226, 230, 232, 233, 239, 247, 254, 255, 259, 261, 262, 263, 264], "web": [5, 7, 8, 11, 49, 57, 66, 70, 73, 77, 82, 92, 105, 146, 196, 203, 208, 226, 227, 234, 252, 287], "obtain": [5, 14, 15, 17, 19, 28, 29, 34, 40, 41, 45, 47, 49, 56, 57, 58, 61, 65, 66, 68, 69, 70, 71, 73, 75, 76, 78, 79, 81, 87, 90, 92, 94, 96, 101, 104, 105, 112, 115, 124, 139, 142, 152, 174, 179, 184, 188, 201, 202, 205, 207, 209, 210, 213, 215, 222, 223, 224, 226, 227, 230, 231, 232, 233, 252, 255, 263, 264], "technic": [5, 13, 16, 23, 35, 45, 65, 146, 165, 201, 230, 247, 252, 266, 283, 286], "download": [5, 7, 9, 36, 45, 87, 208, 223, 230, 259, 285], "place": [5, 7, 9, 11, 12, 13, 14, 15, 21, 23, 29, 35, 45, 57, 58, 65, 66, 71, 81, 97, 101, 104, 105, 107, 115, 146, 147, 208, 209, 214, 215, 221, 223, 226, 230, 249, 252, 279, 280, 287, 291], "tutori": [5, 7, 8, 9, 11, 12, 14, 15, 19, 20, 36, 81, 129, 146, 202, 213, 214, 230, 253, 283, 286, 288, 289, 290, 291, 292], "site": [5, 105, 248], "upload": [5, 105], "belong": [5, 12, 21, 42, 45, 56, 61, 65, 88, 101, 126, 179, 189, 197, 200, 201, 203, 204, 205, 207, 209, 210, 221, 222, 226, 227, 233, 240], "insid": [5, 12, 13, 14, 15, 23, 56, 57, 62, 65, 75, 76, 81, 108, 119, 121, 133, 143, 178, 179, 183, 184, 194, 198, 210, 214, 222, 224, 227, 232, 233, 234, 236, 238, 249, 253, 286, 287], "spars": [5, 14, 98, 100, 101, 173, 203, 209, 210, 211, 234, 235, 274, 286], "substanti": [5, 106], "edit": [5, 9, 11, 12, 92, 101, 105, 207, 208, 210], "arg": [5, 11, 14, 21, 23, 27, 29, 32, 38, 40, 41, 42, 43, 44, 45, 46, 49, 56, 57, 59, 62, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 78, 80, 81, 82, 87, 90, 92, 95, 96, 97, 98, 99, 101, 103, 105, 107, 115, 148, 154, 157, 159, 162, 163, 164, 165, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 189, 194, 198, 200, 203, 205, 207, 209, 210, 211, 214, 216, 217, 220, 221, 222, 223, 226, 230, 232, 233, 234, 235, 236, 239, 240, 245, 246, 247, 248, 252, 253, 255, 259, 261], "invari": [5, 13, 23, 56, 61, 112, 115, 199, 205, 209, 210, 224, 230], "polici": [5, 6, 13, 248, 250], "releas": [5, 8, 11, 13, 65, 92, 96, 107, 143, 200, 239, 250, 253, 286], "5": [5, 11, 12, 15, 17, 21, 23, 25, 27, 29, 31, 34, 38, 40, 41, 42, 44, 46, 47, 48, 49, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 75, 76, 77, 78, 79, 80, 81, 82, 87, 88, 90, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 104, 105, 107, 108, 111, 113, 115, 117, 118, 120, 126, 129, 131, 132, 136, 137, 138, 139, 141, 144, 148, 152, 173, 174, 177, 179, 186, 190, 193, 195, 198, 199, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 245, 246, 252, 253, 259, 262, 264, 266, 268, 269, 280, 281, 283, 286, 287, 290, 291], "center": [5, 7, 13, 19, 44, 56, 64, 65, 75, 79, 81, 82, 92, 101, 120, 123, 126, 129, 131, 136, 138, 140, 144, 146, 152, 197, 200, 209, 214, 222, 269], "resid": 5, "standalon": [5, 146], "restructur": 5, "myst": 5, "appli": [5, 9, 11, 12, 13, 14, 22, 23, 30, 34, 38, 39, 40, 41, 42, 46, 56, 57, 58, 63, 64, 65, 66, 67, 68, 71, 72, 75, 80, 81, 83, 92, 95, 96, 97, 101, 105, 107, 108, 109, 111, 115, 116, 120, 121, 131, 134, 141, 143, 145, 156, 160, 163, 164, 168, 171, 172, 176, 179, 189, 198, 200, 202, 204, 205, 207, 209, 210, 211, 213, 214, 215, 216, 220, 221, 222, 223, 226, 230, 231, 232, 233, 234, 235, 238, 245, 248, 252, 259, 261, 264, 287, 290, 291], "surround": [5, 12, 65, 82, 152, 222, 255], "nu": [5, 15, 73, 92, 105, 180, 202, 214, 226, 234, 240, 285], "equat": [5, 14, 15, 17, 19, 24, 27, 44, 46, 61, 64, 65, 67, 71, 73, 75, 78, 79, 83, 87, 88, 89, 90, 92, 93, 96, 101, 108, 111, 115, 117, 119, 123, 124, 125, 128, 129, 131, 132, 133, 134, 136, 138, 139, 140, 145, 146, 147, 148, 152, 188, 193, 194, 197, 198, 199, 200, 201, 205, 207, 208, 209, 212, 213, 214, 220, 224, 226, 229, 230, 231, 239, 259, 264, 265, 269, 281, 282, 285], "strip": [5, 12, 66, 92, 105, 207, 250, 255], "out": [5, 11, 12, 15, 21, 22, 23, 28, 45, 46, 56, 57, 65, 66, 67, 70, 73, 81, 90, 92, 98, 101, 105, 108, 115, 116, 129, 131, 133, 136, 144, 146, 156, 160, 171, 174, 176, 178, 179, 201, 202, 204, 205, 209, 210, 211, 212, 214, 215, 221, 224, 226, 230, 235, 236, 245, 247, 252, 253, 283, 285, 286, 290, 291], "unimport": 5, "bullet": [5, 11, 12], "avoid": [5, 11, 12, 13, 14, 22, 23, 25, 28, 38, 46, 47, 65, 66, 71, 90, 92, 95, 101, 104, 107, 133, 143, 173, 197, 198, 202, 204, 210, 214, 215, 222, 226, 230, 232, 234, 238, 247, 250, 253, 283, 284], "whitespac": [5, 12, 65, 250], "easiest": [5, 9, 11, 13, 14, 15, 65, 201, 204, 227, 253, 264, 280, 286, 291], "invalid": [5, 11, 12, 15, 34, 65, 66, 107, 131, 204, 207, 222], "dx": [5, 13, 14, 19, 23, 28, 44, 46, 61, 65, 67, 69, 73, 82, 84, 87, 88, 89, 90, 92, 101, 108, 118, 124, 125, 168, 198, 210, 211, 217, 227, 230, 231, 235, 281, 285, 290, 292], "meta": [5, 65, 230, 231], "stackexchang": [5, 56, 75], "5020": 5, "wikibook": [5, 92, 93], "overleaf": 5, "mathematical_express": 5, "verbatim": [5, 214], "_rewrit": 5, "_expand": 5, "difficult": [5, 11, 12, 21, 32, 34, 65, 101, 129, 211, 224, 230, 231, 233, 246, 253, 269, 285, 291], "sentenc": [5, 11, 95], "thumb": [5, 95, 252], "greek": [5, 14, 37, 65, 105, 107, 201, 214], "letter": [5, 14, 15, 37, 58, 65, 66, 105, 179, 214, 252, 281, 283], "\u03b1": [5, 199, 213], "alpha": [5, 15, 56, 65, 73, 92, 94, 151, 155, 158, 176, 193, 197, 198, 199, 205, 207, 209, 210, 213, 214, 226, 230, 234], "logarithm": [5, 15, 38, 44, 46, 65, 66, 71, 90, 92, 101, 105, 205, 207, 211, 214, 224, 226, 233, 234, 282], "italic": 5, "emphasi": [5, 204], "asterisk": 5, "stirl": [5, 57, 70, 252], "fals": [5, 12, 14, 15, 21, 22, 23, 25, 27, 34, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 51, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 75, 76, 77, 78, 79, 80, 81, 82, 84, 87, 90, 92, 93, 95, 96, 97, 98, 101, 102, 105, 107, 108, 109, 113, 115, 117, 118, 121, 124, 125, 126, 129, 131, 132, 136, 137, 138, 140, 141, 142, 143, 144, 147, 151, 163, 164, 168, 171, 176, 177, 178, 179, 182, 186, 189, 190, 191, 193, 194, 197, 198, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 221, 222, 223, 226, 227, 229, 230, 231, 232, 233, 234, 239, 240, 243, 245, 246, 247, 248, 252, 253, 255, 259, 262, 283, 286, 287, 290], "permut": [5, 47, 48, 50, 52, 53, 55, 58, 61, 62, 63, 66, 70, 73, 96, 98, 101, 125, 179, 199, 203, 205, 210, 227, 235, 236, 240, 252, 271, 291], "cycl": [5, 13, 46, 53, 56, 57, 63, 65, 68, 70, 96, 105, 153, 222, 252], "partit": [5, 52, 56, 70, 105, 133, 143, 145, 227, 234, 249, 271], "reduc": [5, 15, 22, 26, 33, 39, 41, 43, 47, 61, 65, 66, 68, 70, 71, 73, 80, 81, 90, 92, 101, 105, 115, 116, 143, 161, 179, 201, 203, 204, 205, 207, 208, 209, 210, 211, 215, 220, 222, 223, 224, 226, 227, 229, 230, 231, 232, 233, 234, 236, 252, 253, 287], "ge": [5, 21, 65, 70, 71, 73, 90, 96, 101, 105, 199, 202, 207, 210, 224, 252], "consecut": [5, 46, 56, 61, 64, 66, 70, 81, 226, 232], "group": [5, 7, 45, 51, 52, 57, 58, 61, 62, 63, 65, 68, 70, 94, 95, 105, 158, 167, 168, 179, 199, 200, 201, 205, 210, 226, 230, 232, 233, 240, 252, 271], "pairwis": [5, 42, 45, 65, 70, 82, 101, 105, 227, 232], "ital": [5, 214], "last": [5, 11, 12, 13, 15, 17, 18, 19, 21, 22, 23, 25, 27, 29, 30, 31, 32, 33, 34, 39, 40, 41, 45, 46, 47, 55, 56, 57, 61, 64, 65, 66, 69, 75, 92, 95, 96, 97, 98, 99, 101, 103, 104, 105, 107, 115, 128, 151, 183, 184, 199, 200, 201, 202, 204, 205, 207, 210, 213, 214, 221, 222, 227, 230, 232, 233, 234, 235, 236, 240, 243, 245, 246, 247, 248, 250, 252, 253, 255, 281, 283, 286, 287], "talk": [5, 11, 12, 16, 35, 66, 201, 209, 263], "handl": [5, 7, 11, 12, 19, 21, 22, 23, 44, 53, 57, 65, 71, 92, 93, 95, 100, 105, 106, 107, 108, 116, 119, 129, 143, 159, 162, 168, 169, 174, 183, 204, 210, 211, 220, 226, 230, 232, 235, 238, 246, 252, 253, 255, 286, 291], "referenc": [5, 11, 49, 54, 105, 128, 131, 176, 209], "overlin": [5, 21, 73], "normal": [5, 12, 13, 15, 21, 22, 23, 34, 38, 42, 46, 56, 64, 65, 69, 71, 75, 78, 79, 80, 92, 93, 95, 99, 100, 101, 105, 107, 117, 119, 123, 129, 131, 137, 146, 152, 163, 173, 176, 177, 178, 179, 180, 184, 187, 189, 198, 201, 203, 204, 205, 207, 209, 210, 214, 215, 217, 222, 223, 227, 230, 234, 239, 245, 250, 252, 253, 259, 274], "assign": [5, 9, 21, 32, 45, 46, 47, 61, 65, 70, 81, 92, 94, 95, 101, 107, 124, 129, 136, 146, 184, 195, 198, 200, 202, 207, 214, 232, 233, 240, 247, 263, 266, 283], "structur": [5, 13, 14, 18, 21, 23, 43, 45, 46, 53, 56, 57, 63, 65, 90, 92, 95, 96, 101, 108, 109, 111, 128, 177, 179, 200, 201, 204, 207, 209, 210, 211, 226, 230, 232, 233, 234, 238, 239, 247, 249, 252, 253, 283, 291], "success": [5, 8, 45, 56, 65, 73, 90, 92, 105, 123, 131, 189, 201, 207, 209, 222, 223, 230, 233, 234, 252, 259, 261], "suggest": [5, 7, 11, 13, 30, 47, 56, 92, 101, 105, 129, 212, 287], "american": [5, 51, 66], "color": [5, 9, 93, 113, 194, 214, 245, 252, 290], "colour": 5, "quotat": 5, "line_color": [5, 200, 217], "aesthet": [5, 14, 200], "ariti": [5, 200], "term": [5, 12, 14, 15, 19, 21, 23, 25, 28, 30, 32, 34, 46, 56, 65, 66, 67, 69, 70, 71, 73, 84, 88, 89, 90, 92, 95, 96, 101, 105, 109, 113, 115, 121, 124, 131, 133, 136, 139, 141, 143, 158, 163, 175, 176, 179, 181, 183, 184, 188, 189, 191, 195, 197, 199, 201, 202, 203, 204, 205, 207, 209, 210, 211, 214, 216, 217, 219, 220, 222, 223, 224, 226, 227, 230, 231, 232, 233, 234, 238, 239, 252, 259, 262, 266, 271, 281, 283, 285, 286, 291], "unrestrict": [5, 54, 252], "necklac": [5, 252], "bracelet": [5, 252], "impli": [5, 14, 15, 21, 38, 42, 46, 56, 95, 111, 179, 200, 205, 207, 214, 222, 224, 230, 232, 235, 238, 239, 252, 266], "turn": [5, 13, 14, 21, 34, 46, 65, 71, 73, 80, 90, 99, 123, 137, 141, 195, 201, 209, 210, 211, 214, 221, 222, 224, 226, 227, 230, 245, 252, 268, 283, 285], "sequenc": [5, 15, 38, 44, 46, 49, 52, 55, 56, 57, 61, 63, 64, 65, 66, 68, 70, 73, 75, 78, 79, 80, 81, 82, 89, 95, 96, 98, 101, 104, 105, 146, 152, 178, 179, 205, 208, 214, 216, 218, 221, 223, 224, 226, 227, 230, 231, 233, 240, 243, 246, 247, 252, 254, 255, 271], "revers": [5, 49, 54, 57, 64, 65, 66, 71, 92, 93, 95, 101, 105, 115, 178, 189, 194, 201, 203, 207, 210, 211, 214, 215, 222, 226, 230, 252, 291], "ambigu": [5, 13, 15, 17, 65, 167, 173, 226, 238, 243], "person": [5, 14], "chebyshev": [5, 44, 65, 92, 207, 210], "pafnuti": 5, "lvovich": 5, "tchebychev": 5, "whose": [5, 13, 14, 21, 23, 25, 45, 47, 49, 54, 57, 64, 65, 66, 71, 75, 79, 81, 82, 88, 92, 95, 101, 105, 126, 141, 151, 174, 184, 190, 191, 195, 198, 202, 203, 205, 209, 210, 221, 222, 226, 230, 231, 232, 234, 240, 245, 249, 252, 253, 259, 262, 264, 266], "transliter": 5, "russian": 5, "chebyshevt": [5, 73, 214], "orthogonalpolynomi": 5, "t_n": [5, 70, 73, 92, 207, 210, 264], "tens": 5, "inclus": [5, 64, 111, 172, 201, 220, 221, 222, 233], "pronoun": 5, "Or": [5, 8, 12, 13, 15, 22, 27, 29, 56, 65, 66, 67, 73, 90, 95, 105, 126, 201, 211, 213, 214, 226, 233, 234, 245, 253, 266, 286, 289], "gender": 5, "neutral": 5, "he": [5, 70, 90, 207], "she": [5, 233], "extran": [5, 230], "belittl": 5, "obvious": [5, 12, 47, 56, 182, 197, 204, 224], "easili": [5, 13, 21, 23, 32, 36, 48, 65, 66, 88, 90, 101, 105, 106, 123, 126, 141, 177, 197, 210, 213, 214, 219, 226, 227, 230, 232, 233, 236, 246, 285], "straightforward": [5, 12, 23, 56, 66, 101, 224], "unwelcom": 5, "judgement": 5, "phrase": [5, 11, 14, 66], "friendli": [5, 46, 90, 227, 229, 230, 232, 233, 247, 292], "mistak": [5, 11, 12, 15, 28, 56, 253], "goe": [6, 7, 10, 11, 12, 23, 35, 101, 221, 224, 233, 283, 286], "content": [6, 16, 46, 65, 66, 100, 202, 205, 207, 210, 213, 214, 242, 247, 250, 251, 271, 272, 273, 274, 275, 276, 277, 278, 282, 284], "setup": [6, 10, 11, 12, 13, 46, 65, 132, 133, 134, 148, 189, 207, 210, 212, 213, 224, 245, 246, 248, 258, 290], "document": [6, 10, 12, 13, 14, 20, 23, 26, 40, 41, 42, 56, 61, 65, 66, 71, 72, 73, 77, 87, 90, 91, 93, 98, 101, 106, 109, 119, 124, 139, 141, 142, 144, 146, 154, 168, 174, 188, 194, 195, 196, 197, 198, 199, 200, 201, 204, 205, 207, 210, 214, 224, 228, 230, 232, 233, 243, 245, 247, 248, 250, 252, 259, 266, 267, 270, 281, 283, 284, 290, 291], "depend": [6, 9, 11, 13, 14, 15, 17, 21, 23, 25, 30, 31, 32, 36, 44, 46, 47, 56, 57, 64, 65, 66, 67, 70, 71, 73, 77, 82, 89, 90, 92, 93, 94, 101, 105, 106, 107, 113, 117, 120, 124, 125, 128, 129, 131, 133, 139, 141, 151, 152, 153, 168, 177, 179, 181, 183, 184, 194, 195, 200, 202, 203, 205, 207, 209, 210, 211, 213, 214, 215, 220, 224, 226, 227, 230, 231, 232, 233, 234, 245, 246, 247, 248, 252, 253, 266, 268, 269, 283, 285], "debug": [6, 46, 65, 92, 131, 168, 245, 246, 255], "style": [6, 7, 8, 11, 45, 65, 93, 173, 194, 200, 214, 233, 290], "maintain": [7, 14, 15, 65, 66, 105, 109, 214, 222, 223, 230, 233, 249], "love": 7, "oil": 7, "daunt": 7, "acquaint": 7, "video": [7, 289], "2016": 7, "2014": [7, 233, 234], "capabl": [7, 13, 14, 21, 31, 44, 46, 65, 69, 77, 90, 105, 108, 109, 139, 146, 200, 211, 214, 233, 284, 285, 291, 292], "besid": [7, 48, 65, 207, 232], "lot": [7, 11, 13, 56, 65, 83, 90, 92, 101, 129, 146, 200, 213, 217, 227, 233, 245, 291], "probabl": [7, 11, 48, 56, 65, 70, 73, 77, 105, 129, 173, 177, 224, 230, 233, 234, 246, 283, 289], "brows": [7, 9], "topic": [7, 16, 24, 35, 46, 139, 144, 196, 197, 198, 199, 201, 203, 204, 209, 233, 276, 283, 288], "particip": 7, "abid": 7, "email": [7, 214], "googl": [7, 199, 200, 233], "spam": [7, 255], "post": [7, 13, 21, 25, 27, 28, 29, 30, 31, 32, 33, 34, 46, 59, 65, 214, 215, 226, 245, 286], "moder": [7, 92], "shakthimaan": 7, "book": [7, 9, 45, 56, 66, 71, 124, 129, 132, 140, 144, 145, 164, 208, 213, 214, 284], "chapter1": 7, "etiquett": 7, "track": [7, 9, 11, 13, 15, 56, 65, 69, 73, 128, 140, 163, 188, 198, 221, 240, 281], "etc": [7, 11, 12, 19, 21, 22, 41, 44, 46, 61, 65, 66, 70, 71, 83, 92, 94, 95, 100, 105, 129, 150, 159, 163, 176, 179, 191, 195, 197, 198, 200, 201, 202, 204, 207, 209, 214, 215, 222, 223, 224, 226, 230, 233, 234, 238, 246, 247, 252, 264, 268], "interest": [7, 11, 15, 17, 23, 25, 28, 34, 61, 65, 67, 70, 71, 81, 90, 92, 101, 105, 130, 131, 179, 184, 198, 201, 205, 209, 210, 211, 213, 221, 224, 226, 227, 232, 233, 246, 247, 264, 281, 284, 286, 287, 288, 291], "prepar": [7, 21, 124, 212], "chat": [7, 36], "room": [7, 201], "stackoverflow": [7, 11, 105, 252, 255], "tracker": [7, 11, 12, 44, 222, 233, 287], "isn": [7, 11, 13, 23, 32, 92, 119, 129, 233, 285], "organ": [7, 11, 139], "termin": [7, 8, 9, 11, 56, 65, 71, 93, 105, 194, 214, 221, 245, 290], "live": [7, 37, 47, 146, 209, 227], "click": [7, 8, 9, 11], "next": [7, 9, 11, 15, 19, 21, 23, 37, 46, 47, 49, 54, 56, 57, 59, 60, 65, 66, 71, 90, 92, 95, 101, 105, 119, 120, 123, 124, 132, 133, 134, 136, 138, 139, 140, 147, 197, 198, 201, 205, 209, 210, 214, 222, 224, 227, 230, 249, 250, 252, 284, 285, 286], "function_nam": [7, 46, 246], "upon": [7, 12, 14, 21, 46, 65, 105, 126, 128, 131, 141, 142, 143, 146, 173, 179, 195, 197, 198, 222, 230, 239, 246, 266, 291], "undergo": [7, 152], "gain": [7, 15, 66, 115, 141, 142, 146], "submiss": 7, "dockerfil": 8, "htmldoc": 8, "sympy_htmldoc": 8, "apt": [8, 9], "dvipng": 8, "librsvg2": 8, "imagemagick": 8, "docbook2x": 8, "sudo": [8, 9], "venv": [8, 9], "my": [8, 214, 280], "Then": [8, 9, 11, 12, 14, 19, 21, 56, 61, 64, 65, 90, 94, 101, 105, 121, 124, 136, 138, 139, 144, 148, 176, 184, 197, 201, 202, 204, 207, 209, 211, 214, 221, 224, 226, 227, 230, 232, 253], "rerun": [8, 11, 12, 210, 245], "txt": [8, 214], "mayb": [8, 12, 22, 27], "rpm": 8, "prerequisit": 8, "dnf": [8, 95], "medium": [8, 23, 148, 149, 152, 153, 163, 207, 276], "homebrew": 8, "brew": 8, "sh": 8, "docbook": 8, "librsvg": 8, "tricki": [8, 65, 90], "subsystem": [8, 214], "linux": [8, 9, 11, 36], "workaround": [8, 253], "solut": [8, 11, 13, 14, 15, 17, 19, 22, 23, 26, 27, 46, 61, 65, 66, 71, 73, 75, 83, 87, 88, 89, 92, 101, 105, 108, 112, 119, 124, 129, 133, 139, 143, 148, 184, 188, 201, 207, 208, 209, 210, 211, 212, 213, 222, 227, 229, 230, 231, 232, 292], "shell": [8, 11, 15, 93, 146, 213], "microsoft": 8, "wsl": 8, "transfer": [8, 112, 113, 115, 148, 233], "folder": 8, "prepend": [8, 45, 56, 101, 115, 186, 214, 240], "mnt": 8, "navig": [8, 13], "cygwin": 8, "msys2": 8, "partial": [8, 14, 44, 56, 63, 64, 65, 67, 69, 70, 71, 105, 107, 146, 173, 189, 193, 195, 205, 208, 211, 214, 216, 223, 226, 230, 231, 235, 241, 259, 266, 281, 291], "viabl": [8, 66], "64": [8, 12, 50, 56, 105, 145, 199, 213, 223, 232, 234, 245, 252, 255, 290], "bit": [8, 12, 19, 23, 45, 46, 49, 65, 66, 68, 95, 96, 101, 105, 173, 184, 201, 210, 224, 227, 233, 245, 252, 263, 264, 290], "chocolatei": 8, "choco": 8, "rsvg": 8, "chose": [8, 66], "rm": [8, 46], "absolut": [8, 12, 42, 43, 46, 64, 65, 71, 73, 80, 90, 92, 96, 101, 117, 177, 205, 209, 210, 224, 226, 229, 234, 245, 268, 269, 270], "substitut": [8, 14, 15, 19, 22, 25, 28, 32, 34, 46, 65, 66, 71, 73, 90, 92, 101, 106, 107, 115, 124, 125, 129, 131, 133, 143, 168, 177, 179, 182, 189, 191, 193, 211, 212, 215, 216, 221, 224, 226, 227, 230, 231, 232, 233, 253, 262, 282, 283], "filesystem": 8, "makefil": 8, "subdirectori": 8, "offici": [8, 15, 36, 65, 119, 146, 188, 198, 233, 253, 289], "svg": [8, 93, 194], "store": [8, 9, 11, 13, 15, 21, 45, 46, 55, 56, 65, 87, 89, 98, 101, 105, 107, 120, 124, 126, 128, 129, 144, 173, 179, 193, 197, 198, 200, 201, 204, 209, 210, 211, 221, 224, 235, 238, 239, 247, 248, 249, 252, 264, 266, 286], "browser": 8, "drop": [8, 11, 71, 92, 106, 136, 205, 207], "menu": 8, "told": [8, 11], "load": [8, 13, 46, 65, 93, 108, 109, 111, 120, 122, 123, 124, 128, 132, 134, 139, 147, 159, 194, 276], "ll": [8, 45, 63, 101, 133, 197, 198, 243], "repeat": [8, 9, 14, 15, 56, 59, 64, 65, 71, 73, 92, 94, 96, 101, 105, 107, 163, 165, 179, 200, 201, 202, 207, 209, 210, 214, 220, 230, 234, 238, 239, 246, 248, 252, 291], "reload": 8, "approach": [8, 19, 25, 28, 29, 30, 32, 33, 34, 45, 64, 65, 92, 115, 133, 139, 204, 207, 208, 209, 211, 222, 231, 232, 234, 246, 249, 252, 281, 287], "monitor": 8, "procedur": [8, 28, 30, 47, 48, 50, 56, 62, 63, 64, 92, 101, 124, 144, 207, 209, 226, 227, 232, 233, 259, 287], "8000": [8, 108], "localhost": 8, "port": [8, 107, 131, 151], "finish": [8, 12, 46, 47, 173, 248, 288], "ctrl": 8, "detach": 8, "livehtml": 8, "tab": [8, 13, 15, 61, 146], "99": [8, 46, 65, 66, 101, 105, 207, 208], "bad": [8, 11, 12, 13, 64, 105, 181, 214], "extra": [8, 13, 46, 48, 65, 66, 105, 106, 137, 184, 195, 207, 214, 224, 230, 245, 246, 247, 266], "xelatex": 8, "latexmk": 8, "chrome": 8, "chromium": 8, "On": [8, 11, 13, 21, 41, 58, 65, 67, 73, 92, 95, 105, 129, 183, 184, 195, 204, 207, 208, 209, 210, 230, 232, 249, 253, 266, 268], "xetex": 8, "font": [8, 93, 194, 214], "lmodern": 8, "cask": 8, "tap": 8, "dejavu": 8, "strawberryperl": 8, "dejavufont": 8, "appdata": 8, "never": [9, 10, 11, 12, 14, 21, 23, 32, 65, 71, 92, 181, 210, 211, 214, 222, 232, 234, 243, 263, 283, 284], "familiar": [9, 10, 11, 15, 23, 92, 129, 144, 163, 211, 281, 283, 289], "push": [9, 11, 12, 90], "nativ": [9, 14, 65, 115, 205, 210, 245], "yum": 9, "maco": 9, "desktop": 9, "gui": [9, 93, 194], "sync": 9, "rebas": [9, 11], "disabl": [9, 12, 13, 14, 32, 65, 66, 90, 92, 105, 207, 210, 214, 222, 230, 232, 243, 245, 248, 252, 253], "commit": [9, 12], "enter": [9, 17, 57, 65, 66, 70, 78, 105, 107, 108, 124, 128, 131, 141, 214, 224, 232, 245, 286, 290], "config": [9, 93], "firstnam": 9, "lastnam": 9, "your_email": 9, "youremail": 9, "usernam": [9, 11], "gitconfig": 9, "handi": [9, 64, 65, 101, 214, 286], "shortcut": [9, 45, 65, 97, 198, 214, 222, 226, 291], "alias": [9, 99, 205], "alia": [9, 46, 58, 65, 75, 81, 96, 97, 99, 103, 163, 172, 179, 201, 204, 205, 209, 213, 222, 245, 255, 291], "di": [9, 210], "st": [9, 66, 92, 179], "statu": [9, 11, 93], "checkout": [9, 11, 45], "log1": 9, "onelin": 9, "abbrev": [9, 185, 186, 214], "scm": 9, "sv": 9, "v2": [9, 67, 78, 101, 126, 189, 190, 193, 253, 259, 262, 263, 264, 265], "signup": 9, "presenc": [9, 65, 71, 95, 111, 128, 133, 143, 230, 238], "world": [9, 66, 111, 133, 143, 252], "profession": 9, "establish": [9, 19, 61, 90, 123, 134, 224], "secur": [9, 13], "connect": [9, 21, 59, 66, 67, 80, 81, 101, 106, 108, 111, 120, 123, 131, 134, 140, 201, 202, 203, 212, 230, 234, 252, 259], "button": [9, 12, 200, 246], "address": [9, 12, 65, 214, 233], "practic": [9, 19, 21, 25, 28, 31, 34, 54, 56, 65, 66, 75, 140, 143, 146, 200, 201, 202, 204, 209, 211, 238, 283, 284], "clone": [9, 36, 207], "origin": [9, 11, 12, 14, 15, 19, 21, 28, 36, 38, 56, 57, 58, 61, 64, 65, 66, 69, 70, 71, 73, 74, 76, 78, 80, 90, 92, 96, 101, 105, 113, 115, 116, 123, 133, 143, 146, 171, 174, 184, 190, 195, 200, 201, 203, 205, 209, 210, 213, 214, 222, 223, 224, 226, 227, 230, 231, 232, 233, 234, 240, 245, 252, 253, 259, 262, 263, 264, 265, 266, 268, 269, 291], "77": [9, 54, 73, 101, 105, 213, 214, 247], "mib": 9, "repo": [9, 11, 12, 129], "remot": [9, 65], "tune": [9, 69, 93, 194, 214], "fetch": 9, "advantag": [9, 13, 17, 21, 23, 25, 41, 44, 46, 65, 66, 70, 92, 95, 101, 105, 112, 183, 203, 204, 211, 222, 227, 230, 233, 249, 283, 285, 287, 291], "isol": [9, 25, 44, 71, 205, 209, 210, 211, 232, 247], "wide": [9, 21, 93, 101, 146, 194, 204, 210, 214, 234], "flake8": [9, 11, 12], "split": [10, 23, 46, 65, 66, 69, 90, 92, 107, 207, 209, 212, 213, 214, 232, 234, 240, 245, 252, 257, 286, 291], "experienc": [10, 13, 47], "regress": 11, "green": [11, 12, 56, 140, 200], "123": [11, 65, 70, 75, 95, 123, 176, 189, 252, 259, 261], "visibl": [11, 90, 200], "ok": [11, 12, 46, 57, 214, 230], "field": [11, 21, 32, 38, 42, 46, 65, 66, 67, 73, 83, 92, 151, 152, 191, 192, 196, 201, 202, 203, 205, 206, 208, 210, 211, 212, 227, 232, 245, 259, 262, 264, 265, 267, 269, 274, 276, 277], "respond": [11, 65], "perus": 11, "feel": [11, 21, 36, 146, 147, 226, 230, 232], "fine": [11, 12, 19, 23, 28, 65, 69, 93, 194, 204, 214, 226], "upstream": 11, "highlight": 11, "accid": [11, 12, 66, 253], "reset": [11, 56, 58, 200, 207, 210, 245, 248, 250], "somehow": [11, 12, 14, 23], "typo": [11, 224], "ultim": [11, 23, 71, 184], "spend": 11, "distinguish": [11, 18, 21, 22, 45, 56, 69, 94, 129, 178, 184, 201], "accident": [11, 12, 14], "failur": [11, 61, 69, 82, 90, 105, 234, 245, 291], "accompani": [11, 12, 45], "sqrtdenest": [11, 12, 226], "test_sqrtdenest": [11, 12], "pattern": [11, 12, 13, 14, 15, 21, 23, 65, 90, 92, 95, 96, 107, 173, 204, 224, 226, 230, 232, 281, 286], "appar": [11, 12, 14, 15, 65, 255, 291], "test_trigonometr": [11, 12], "test_cos_seri": [11, 12], "6": [11, 12, 15, 17, 19, 25, 33, 34, 38, 40, 41, 44, 46, 47, 48, 49, 53, 54, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 75, 77, 78, 79, 80, 81, 87, 88, 90, 92, 94, 95, 96, 98, 99, 101, 102, 104, 105, 107, 108, 111, 113, 115, 116, 117, 131, 132, 136, 137, 138, 144, 148, 152, 158, 176, 189, 198, 199, 200, 202, 203, 204, 205, 207, 209, 210, 211, 213, 214, 216, 219, 220, 221, 222, 223, 226, 227, 230, 231, 232, 233, 234, 235, 245, 246, 249, 252, 253, 259, 262, 264, 269, 281, 287, 291, 292], "720": [11, 12, 216, 230, 252], "40320": [11, 12], "One": [11, 14, 15, 18, 21, 23, 44, 45, 46, 55, 57, 64, 65, 70, 71, 73, 84, 87, 89, 90, 92, 95, 101, 105, 108, 109, 129, 144, 146, 155, 184, 188, 205, 207, 208, 210, 213, 216, 222, 226, 229, 232, 233, 234, 235, 240, 253, 266, 280, 281, 283, 286, 287, 291], "past": [11, 12, 15, 71, 105, 213, 214, 290], "session": [11, 12, 14, 37, 46, 65, 77, 92, 194, 198, 204, 250, 283, 290], "unclear": [11, 13, 21, 119], "kei": [11, 13, 14, 15, 17, 25, 27, 39, 42, 45, 54, 56, 57, 65, 66, 67, 70, 81, 94, 96, 101, 104, 105, 108, 128, 129, 171, 174, 179, 198, 200, 202, 204, 205, 206, 207, 209, 210, 211, 212, 214, 226, 230, 231, 232, 234, 238, 249, 252, 253, 255, 287, 288, 291], "corner": [11, 12, 56, 58, 96, 210, 230, 233, 253], "delta_funct": [11, 73, 92], "argumentindexerror": [11, 23], "scroll": [11, 34], "bottom": [11, 55, 56, 65, 66, 81, 96, 101, 104, 128, 209, 214, 223, 269], "consult": [11, 47], "kwarg": [11, 15, 40, 41, 42, 46, 56, 57, 64, 65, 66, 67, 71, 73, 75, 76, 78, 79, 80, 81, 82, 87, 90, 92, 96, 97, 98, 99, 101, 103, 104, 113, 115, 121, 124, 133, 148, 157, 159, 163, 164, 168, 170, 172, 173, 175, 176, 177, 189, 193, 194, 200, 203, 205, 210, 214, 216, 220, 221, 222, 226, 230, 231, 232, 234, 235, 236, 240, 245, 246, 248, 252, 255, 264], "test_bas": [11, 245], "similari": 11, "code_qu": 11, "total": [11, 34, 47, 54, 56, 65, 70, 81, 94, 95, 96, 98, 131, 133, 141, 148, 152, 158, 163, 176, 185, 199, 205, 207, 210, 223, 226, 230, 238, 240, 269], "new_fil": 11, "editor": [11, 12], "vim": 11, "pop": [11, 92, 227], "stage": [11, 21, 45, 64, 105, 221, 291], "affect": [11, 13, 21, 23, 64, 65, 101, 188, 210, 232, 233, 264], "binari": [11, 12, 15, 22, 23, 28, 42, 46, 49, 60, 65, 66, 92, 95, 105, 106, 173, 185, 201, 204, 210, 227, 246, 249, 252], "temporari": [11, 65, 246], "individu": [11, 12, 13, 21, 23, 27, 30, 65, 71, 76, 81, 82, 94, 98, 101, 115, 144, 151, 169, 173, 199, 222, 230, 245, 287], "gitignor": 11, "agreement": 11, "exclud": [11, 27, 32, 34, 46, 64, 65, 92, 101, 121, 146, 202, 205, 207, 210, 220, 230, 232, 245, 248, 252], "22906851": 11, "ignor": [11, 12, 13, 15, 17, 23, 46, 56, 65, 66, 70, 71, 75, 80, 90, 95, 101, 105, 115, 121, 131, 176, 179, 189, 200, 210, 214, 215, 226, 232, 233, 246, 291], "bodi": [11, 13, 15, 46, 90, 107, 118, 119, 122, 123, 124, 128, 129, 131, 132, 133, 134, 136, 139, 140, 141, 146, 147, 182, 189, 193, 197, 198, 259, 261, 276], "perman": [11, 101], "histori": [11, 146], "effort": [11, 106, 205, 207], "research": [11, 19, 57, 211, 226], "shortlog": 11, "ui": [11, 92, 105, 231], "convei": [11, 25], "71": [11, 56, 81, 101, 182], "78": [11, 56, 79, 101, 105, 109, 184, 230, 234], "summari": [11, 132, 245, 270], "leav": [11, 14, 21, 23, 31, 33, 46, 65, 92, 101, 105, 125, 139, 163, 179, 221, 249, 280, 286, 291], "heurisch": [11, 13, 92], "12345": [11, 46, 69], "brief": [11, 46, 233, 245, 268], "nearbi": 11, "similarli": [11, 12, 13, 21, 25, 32, 61, 65, 66, 73, 77, 101, 108, 109, 115, 124, 144, 183, 188, 200, 201, 204, 209, 211, 221, 222, 224, 230, 245, 253, 264, 265, 287], "doubt": [11, 95, 129], "switch": [11, 13, 38, 56, 63, 92, 105, 115, 207, 210, 236], "let": [11, 12, 19, 21, 22, 23, 44, 46, 56, 61, 65, 66, 75, 83, 88, 90, 94, 98, 101, 102, 105, 107, 120, 129, 146, 184, 189, 197, 201, 202, 203, 207, 209, 210, 211, 214, 221, 224, 226, 227, 230, 232, 233, 240, 243, 246, 250, 253, 264, 265, 269, 280, 283, 285, 286, 291], "overview": [11, 202, 233, 267, 268], "concret": [11, 21, 45, 57, 65, 70, 71, 92, 94, 101, 105, 129, 184, 205, 209, 214, 271], "suitabl": [11, 92, 98, 107, 199, 202, 204, 207, 209, 214, 224, 227, 230, 233, 235, 284], "unicod": [11, 12, 73, 93, 101, 194, 214, 245, 285], "printer": [11, 12, 13, 14, 23, 57, 65, 73, 93, 101, 106, 194, 236, 239, 246, 247, 253, 282, 286], "bf0e81e12a2f75711c30f0788daf4e58f72b2a41": 11, "revis": [11, 232], "anti": [11, 14, 38, 42, 61, 71, 92, 96, 151, 156, 240], "candid": [11, 29, 56, 65, 101, 105, 207, 226], "phase": [11, 65, 92, 113, 148, 151, 153, 163, 164, 233], "explicit": [11, 13, 14, 21, 23, 25, 28, 29, 57, 64, 65, 69, 81, 82, 92, 104, 105, 124, 128, 129, 133, 143, 147, 198, 201, 210, 213, 214, 216, 222, 224, 230, 231, 232, 233, 249], "solve_lin_si": [11, 13, 212], "upsid": 11, "monomi": [11, 65, 92, 95, 105, 202, 204, 205, 207, 213, 214, 291], "downsid": [11, 287], "involv": [11, 12, 13, 15, 19, 21, 25, 27, 29, 41, 43, 56, 64, 65, 66, 70, 77, 78, 90, 92, 105, 115, 120, 124, 129, 158, 168, 174, 176, 186, 197, 198, 201, 202, 205, 207, 209, 210, 211, 215, 216, 221, 222, 223, 224, 226, 227, 230, 232, 235, 253, 291], "anymor": [11, 12, 200], "coincid": [11, 81, 101, 104, 123, 129, 201, 259, 264, 283], "investig": [11, 57, 90, 199, 201, 224, 252, 283], "exp": [11, 12, 13, 14, 15, 17, 21, 23, 31, 32, 34, 38, 44, 46, 55, 64, 65, 67, 69, 70, 71, 73, 83, 84, 87, 90, 92, 96, 98, 101, 105, 117, 155, 158, 174, 180, 199, 204, 205, 210, 211, 214, 216, 221, 224, 226, 230, 231, 232, 233, 234, 235, 252, 269, 281, 285, 287, 292], "ratsimp": [11, 65, 226], "cpu": [11, 46, 106, 146], "sy": [11, 36, 46, 67, 129, 146, 214, 245, 256, 265, 283], "04": [11, 96, 234], "31": [11, 53, 65, 68, 69, 81, 105, 188, 199, 210, 227], "wall": [11, 123, 134], "32": [11, 56, 68, 71, 73, 75, 92, 101, 105, 108, 113, 188, 208, 210, 211, 223, 224, 227, 234, 245], "\u212f": [11, 46, 151, 199, 214, 281, 285, 287, 291, 292], "took": [11, 211, 223], "450": [11, 101], "gb": [11, 56], "ram": 11, "occasion": [11, 12, 65], "feedback": [11, 66, 112, 115, 284], "draft": 11, "state": [11, 12, 14, 19, 21, 32, 56, 63, 65, 73, 105, 108, 115, 117, 123, 124, 125, 128, 131, 133, 147, 151, 155, 156, 158, 159, 160, 162, 163, 164, 168, 171, 173, 174, 175, 176, 178, 179, 203, 210, 214, 223, 224, 226, 234, 249, 276, 287], "wip": 11, "stand": [11, 14, 64, 65, 124, 146, 202, 204, 205, 211], "progress": [11, 39, 41, 105, 247], "fill": [11, 15, 20, 56, 66, 96, 98, 101, 104, 179, 200, 245, 248, 252, 255, 287], "templat": [11, 13, 252], "undescript": 11, "tend": [11, 23, 37, 46, 65, 70, 207, 209, 219, 221, 224, 284, 291], "henc": [11, 44, 46, 55, 56, 65, 67, 71, 73, 77, 90, 93, 95, 105, 111, 195, 200, 201, 202, 207, 214, 224, 227, 231, 233, 245, 249, 264, 265, 266, 286, 291], "transcendent": [11, 21, 29, 33, 34, 42, 65, 73, 92, 204, 209, 214, 232, 233, 287, 292], "perhap": [11, 13, 17, 46, 65, 95, 105, 164, 204, 232, 247, 280], "compar": [11, 12, 15, 21, 34, 44, 46, 57, 62, 65, 70, 71, 82, 95, 101, 105, 106, 131, 158, 182, 186, 204, 207, 210, 211, 214, 219, 221, 226, 230, 233, 235, 239, 245, 252, 283, 286, 291], "1234": [11, 105, 227], "auto": [11, 13, 15, 28, 44, 65, 66, 93, 200, 207, 210, 214, 226, 230, 234], "record": [11, 48, 59, 65, 209, 214, 245], "joe": 11, "blogg": 11, "mailmap_check": 11, "unrecognis": 11, "3af6dc1": 11, "7fa63b1": 11, "100644": 11, "1307": [11, 34], "zsc347": 11, "gmail": [11, 199], "\u00f8yvind": 11, "jensen": [11, 46], "oyvind": 11, "\u0142ukasz": 11, "pankowski": 11, "lukpank": 11, "o2": [11, 221], "pl": 11, "\u5f6d\u4e8e\u658c": 11, "1931127624": 11, "qq": [11, 83, 84, 86, 87, 88, 92, 201, 202, 203, 204, 207, 209, 210, 211], "reorder": [11, 57, 64, 71, 179, 210, 230, 234, 252], "alphabet": [11, 65, 66, 115, 184, 202, 227, 247], "move": [11, 12, 23, 56, 57, 65, 66, 79, 81, 108, 123, 131, 133, 139, 167, 193, 197, 198, 226, 235, 244, 266], "7598d94": 11, "562": 11, "joannah": 11, "nanjeky": 11, "ibm": [11, 226], "jnanjeky": 11, "nanjekyejoannah": 11, "joaquim": 11, "monserrat": 11, "qmonserrat": 11, "mailoo": 11, "jochen": 11, "voss": 11, "seehuhn": 11, "de": [11, 45, 66, 70, 105, 184, 199, 200, 211, 216, 227, 230, 252], "jogi": 11, "miglani": 11, "jmig5776": 11, "johan": 11, "bl\u00e5b\u00e4ck": 11, "johan_bluecreek": 11, "riseup": 11, "net": [11, 45, 81, 208, 230, 234, 252], "blaback": 11, "cea": 11, "fr": [11, 87, 92, 105, 124, 129, 131, 133, 136, 137, 141, 143, 146, 234], "guzman": 11, "jguzm022": 11, "ucr": 11, "edu": [11, 44, 49, 56, 57, 66, 68, 70, 92, 101, 105, 208, 213, 223, 227, 230, 234, 259], "joeb": 11, "1785690389": 11, "norepli": 11, "map": [11, 14, 21, 23, 44, 45, 46, 48, 55, 56, 57, 65, 66, 77, 81, 88, 90, 92, 95, 96, 105, 113, 124, 133, 157, 168, 169, 174, 189, 198, 200, 201, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 221, 226, 230, 231, 232, 233, 234, 238, 239, 246, 249, 252, 253, 255, 259], "cost": [12, 44, 46, 105, 133, 233, 285], "modular": [12, 66, 105, 175, 208, 233], "consequ": [12, 13, 23, 42, 65, 202, 204, 283, 291], "cover": [12, 19, 71, 105, 107, 119, 129, 188, 197, 240, 247, 281, 283], "maxim": [12, 56, 66, 94, 201, 205, 209, 221, 223], "red": [12, 200], "advis": [12, 13, 21, 34, 45, 123, 129], "wait": [12, 198], "_____________________________________________________________________________________________________": 12, "_________________": [12, 109], "test_pretti": 12, "test_upretty_sub_sup": 12, "traceback": [12, 13, 15, 18, 21, 22, 23, 25, 27, 29, 30, 31, 32, 33, 34, 39, 40, 41, 46, 47, 57, 65, 66, 69, 75, 92, 95, 96, 97, 98, 99, 101, 103, 104, 107, 115, 199, 201, 204, 205, 207, 210, 213, 221, 222, 230, 232, 233, 243, 245, 246, 248, 250, 252, 253, 255, 283, 287], "home": [12, 108, 209, 227], "oscar": [12, 199], "317": 12, "upretti": 12, "beta_1_2": 12, "\u03b2\u2081\u2082": 12, "assertionerror": [12, 243], "branch": [12, 22, 44, 65, 70, 71, 72, 73, 211, 224, 233, 286, 291], "ran": 12, "influenc": [12, 47, 108, 201, 202], "suppos": [12, 13, 22, 23, 57, 64, 65, 66, 90, 201, 203, 207, 209, 210, 214, 221, 224, 230, 232, 243, 252, 264, 269, 283, 285, 291], "sneak": 12, "sporad": 12, "seed": [12, 54, 56, 65, 66, 75, 78, 79, 101, 105, 207, 234, 245, 252], "pythonhashse": [12, 245], "unrel": [12, 13, 30, 65, 72, 202, 283], "ideal": [12, 21, 46, 102, 126, 129, 139, 189, 197, 203, 205, 207, 208, 209, 210, 211, 226, 233, 259], "slip": [12, 131, 135, 137, 197], "wasn": 12, "notic": [12, 13, 15, 23, 56, 57, 63, 65, 101, 144, 167, 204, 224, 236, 240, 241, 252, 253, 283, 285, 286, 291], "broken": [12, 13, 54, 65, 197, 214, 230, 255], "seem": [12, 17, 21, 23, 89, 90, 129, 184, 201, 226, 230, 291], "carefulli": [12, 22, 65, 189, 207, 216], "everyon": [12, 211], "expediti": 12, "21177": 12, "residu": [12, 61, 66, 105, 207, 224], "cot": [12, 65, 71, 73, 107, 211, 214, 223], "tanh": [12, 65, 69, 71, 92, 211, 214, 226, 291], "as_leading_term": [12, 65, 221], "21253": 12, "test_tan": 12, "tan": [12, 44, 65, 70, 71, 92, 107, 121, 136, 137, 138, 143, 211, 213, 214, 221, 223, 230, 233, 291], "test_expr": [12, 65], "test_as_leading_term": 12, "ration": [12, 14, 21, 23, 25, 39, 41, 42, 44, 46, 64, 65, 69, 70, 71, 73, 75, 78, 80, 82, 86, 90, 92, 93, 98, 101, 105, 107, 115, 148, 181, 199, 202, 207, 208, 209, 211, 214, 219, 222, 223, 224, 226, 227, 229, 232, 233, 234, 252, 259, 282, 283, 286, 290], "imaginaryunit": [12, 65, 214], "21245": 12, "fi": [12, 19], "36": [12, 25, 48, 59, 66, 70, 81, 92, 96, 101, 105, 109, 210, 214, 227, 230, 234, 269], "test_residu": 12, "test_issue_21177": 12, "cancel": [12, 19, 23, 46, 65, 69, 73, 81, 90, 92, 101, 105, 115, 116, 204, 205, 207, 210, 213, 226, 232, 285], "underli": [12, 14, 46, 57, 63, 65, 94, 101, 113, 129, 174, 187, 232, 233, 234], "report": [12, 37, 44, 56, 65, 78, 96, 105, 211, 222, 233, 245, 287, 292], "benefici": 12, "prudent": 12, "matter": [12, 23, 44, 54, 57, 64, 65, 70, 90, 92, 188, 221, 252, 285, 286], "reproduct": 12, "constant": [12, 13, 14, 25, 27, 28, 30, 33, 44, 46, 64, 65, 69, 71, 73, 89, 90, 92, 108, 109, 115, 128, 129, 131, 146, 147, 156, 160, 166, 182, 183, 185, 186, 187, 190, 193, 195, 200, 202, 205, 207, 209, 210, 211, 214, 216, 221, 224, 226, 227, 230, 231, 232, 233, 234, 245, 247, 252, 253, 262, 266, 269, 276, 281, 287, 292], "quickli": [12, 19, 23, 56, 57, 65, 66, 69, 70, 105, 207, 210, 223, 233, 249], "newli": [12, 65, 90, 224], "lambda": [12, 14, 15, 23, 27, 31, 40, 41, 44, 46, 56, 57, 65, 66, 67, 71, 92, 96, 97, 98, 101, 104, 105, 107, 124, 129, 142, 143, 146, 147, 164, 200, 207, 209, 210, 214, 215, 222, 223, 226, 230, 232, 233, 234, 235, 243, 252, 253, 259, 261, 264, 280, 287], "typeerror": [12, 13, 15, 22, 23, 29, 32, 39, 40, 41, 57, 65, 75, 80, 95, 97, 99, 103, 115, 153, 221, 222, 246, 253], "execut": [12, 14, 21, 36, 46, 93, 96, 146, 200, 214, 230, 233, 243, 245, 247, 248, 253, 255, 258, 270, 285, 290], "care": [12, 14, 15, 22, 23, 56, 65, 73, 92, 95, 101, 108, 119, 129, 143, 189, 198, 204, 209, 226, 227, 230, 232, 233, 238, 241, 246, 280, 283, 285], "WILL": 12, "userwarn": [12, 189, 243, 250, 287], "function_that_emits_a_warn": 12, "sparingli": 12, "asid": [12, 15, 95, 230, 231, 285], "annoi": 12, "warrant": 12, "test_stacklevel": [12, 243], "expr_free_symbol": [12, 65], "test_deprecated_expr_free_symbol": 12, "nomin": 12, "closer": [12, 31, 131, 233, 286], "inspect": [12, 13, 21, 101, 209, 220, 251, 253, 278], "could": [12, 13, 14, 15, 19, 21, 23, 29, 31, 33, 41, 46, 58, 65, 77, 90, 92, 95, 123, 126, 129, 139, 143, 179, 182, 184, 201, 204, 207, 209, 211, 214, 222, 224, 226, 230, 231, 232, 233, 234, 235, 238, 239, 246, 250, 264, 265, 283, 286, 291], "nonsens": [12, 64, 73], "unevalu": [12, 13, 14, 21, 22, 23, 40, 41, 44, 57, 64, 65, 71, 73, 82, 92, 105, 115, 156, 160, 167, 168, 179, 210, 213, 221, 222, 226, 230, 232, 233, 234, 235, 281, 285, 286, 292], "helper": [12, 13, 28, 44, 46, 56, 60, 63, 65, 90, 92, 93, 94, 164, 166, 175, 211, 221, 224, 227, 230, 231, 233, 246, 276], "test_sin_1_unevalu": 12, "dummy_eq": [12, 65], "combinatori": [12, 23, 49, 57, 64, 65, 72, 73, 210, 216, 226, 252, 254, 271, 291], "test_comb_factori": 12, "test_factorial_rewrit": 12, "nonneg": [12, 21, 23, 42, 65, 66, 67, 70, 73, 98, 146, 202, 204, 210, 227, 234, 291], "rewrit": [12, 64, 65, 67, 70, 71, 73, 90, 92, 95, 108, 115, 176, 205, 210, 221, 222, 223, 226, 230, 231, 232, 233, 234, 271, 285, 287], "_i": [12, 92, 179, 184, 211], "product": [12, 13, 21, 38, 48, 50, 53, 56, 57, 61, 63, 64, 65, 66, 67, 69, 70, 73, 75, 78, 80, 81, 88, 90, 92, 94, 95, 96, 98, 101, 105, 106, 115, 116, 117, 119, 123, 131, 144, 146, 154, 158, 159, 162, 164, 165, 166, 168, 171, 173, 174, 176, 177, 179, 183, 184, 185, 188, 189, 191, 196, 197, 198, 199, 201, 202, 203, 205, 207, 209, 210, 211, 214, 215, 216, 219, 222, 223, 226, 227, 230, 231, 232, 233, 234, 236, 238, 239, 240, 246, 249, 252, 259, 263, 276], "far": [12, 15, 45, 65, 79, 92, 199, 201, 204, 214, 224, 253, 280, 281, 283], "boil": 12, "agre": [12, 65, 66, 73, 80, 90, 224], "indefinit": [12, 14, 38, 71, 89, 90, 92, 101, 205, 207, 208, 210, 219, 281], "integrand": [12, 69, 73, 89, 90, 92, 224], "Of": [12, 19, 21, 25, 64, 90, 101, 230, 233, 252, 291], "cours": [12, 19, 21, 48, 49, 56, 64, 73, 90, 92, 101, 102, 105, 144, 195, 203, 204, 208, 209, 221, 223, 224, 266, 291], "hurt": 12, "checkodesol": [12, 32, 230], "truth": [12, 22, 39, 40, 41, 42, 43, 65, 96, 226], "verifi": [12, 21, 25, 30, 32, 36, 44, 56, 62, 66, 67, 129, 201, 207, 213, 230, 232, 233, 235, 236, 291], "logic": [12, 13, 14, 21, 23, 39, 40, 41, 42, 45, 65, 67, 90, 92, 105, 171, 173, 174, 178, 214, 216, 222, 230, 234, 252, 283, 284, 285, 287], "duplic": [12, 15, 56, 59, 66, 71, 73, 101, 105, 222, 230, 252, 284], "mistaken": 12, "aaronmeur": 12, "anaconda3": 12, "cpython": [12, 146], "cach": [12, 21, 70, 90, 201, 210, 214, 243, 248, 249], "ye": [12, 66, 95, 230], "ground": [12, 84, 123, 131, 135, 136, 137, 138, 201, 204, 205, 207, 209, 210, 232, 290], "gmpy": [12, 69, 204, 205, 290], "7357232": 12, "hash": [12, 65, 205, 207, 215, 226, 230, 245, 247], "3923913114": 12, "situat": [12, 21, 34, 65, 69, 90, 198, 230, 232, 234, 250, 283], "randomli": [12, 56, 65, 66, 105, 173], "xfail": [12, 230, 243, 245], "almost": [12, 30, 90, 99, 107, 181, 200, 201, 205, 210, 211, 230, 234, 248, 249, 252, 285], "useless": [12, 181, 205, 207], "test_func": 12, "sinc": [12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 39, 44, 46, 47, 56, 57, 58, 61, 62, 63, 65, 66, 68, 70, 71, 73, 74, 75, 77, 81, 83, 89, 90, 92, 94, 95, 96, 101, 105, 118, 123, 131, 144, 146, 155, 179, 180, 184, 195, 198, 201, 202, 204, 205, 207, 209, 210, 214, 217, 222, 223, 224, 226, 227, 230, 232, 233, 234, 240, 244, 248, 249, 250, 252, 253, 263, 265, 266, 268, 280, 285, 287, 290, 291, 292], "xpass": [12, 243, 245], "test_failing_integr": 12, "atanh": [12, 71, 211, 214, 224], "mistyp": 12, "slightli": [12, 31, 37, 38, 46, 61, 105, 107, 131, 200, 201, 205, 207, 210, 214, 224, 226], "robust": [12, 32, 62, 65, 69, 206, 226, 230], "against": [12, 13, 21, 23, 34, 66, 101, 108, 129, 246], "minut": [12, 15, 30, 119, 131, 188], "hang": [12, 32, 101, 133, 137, 230, 231], "job": [12, 19, 23, 57, 159, 211, 214], "skipp": 12, "test_optional_depend": 12, "runtest": [12, 13, 245], "yml": 12, "manner": [12, 49, 66, 73, 143, 177, 195, 227, 230, 235, 252, 268], "act": [12, 14, 45, 48, 55, 56, 57, 61, 65, 73, 81, 94, 95, 101, 108, 111, 120, 123, 126, 128, 129, 134, 142, 151, 163, 168, 171, 172, 222, 233, 235, 236, 264, 268, 280], "fresh": 12, "verbos": [12, 46, 65, 96, 105, 214, 245, 246, 290], "clipboard": 12, "contrast": [12, 14, 23, 64, 65, 133, 204, 224, 230, 285], "foremost": 12, "tempt": [12, 21, 23, 65, 105], "indirect": [12, 65, 67, 73, 105, 179, 230], "trigsimp": [12, 15, 38, 65, 101, 123, 129, 137, 189, 223, 226, 263], "along": [12, 19, 23, 25, 46, 56, 65, 66, 67, 71, 73, 74, 75, 79, 80, 83, 85, 88, 90, 96, 98, 101, 108, 109, 111, 118, 119, 123, 124, 126, 131, 133, 136, 137, 138, 141, 142, 143, 144, 146, 148, 176, 188, 189, 195, 198, 200, 203, 204, 209, 210, 230, 233, 262, 266, 268], "clearer": [12, 13, 263], "unwieldi": [12, 17], "sort": [12, 14, 27, 40, 41, 45, 46, 54, 57, 61, 90, 92, 95, 101, 104, 105, 116, 119, 124, 163, 179, 184, 188, 200, 207, 210, 211, 221, 226, 227, 230, 231, 232, 236, 238, 240, 245, 247, 252, 263, 283, 285, 286], "judgment": 12, "convolut": [12, 73, 216], "uncommon": 12, "valueerror": [12, 18, 21, 31, 32, 39, 41, 44, 46, 47, 57, 65, 66, 74, 75, 78, 80, 81, 92, 96, 98, 101, 104, 105, 108, 113, 115, 153, 193, 195, 199, 201, 203, 207, 209, 222, 230, 232, 233, 252, 255, 266], "0x10e997790": 12, "memori": [12, 14, 46, 65, 105, 210, 235, 246, 249], "attempt": [12, 17, 19, 22, 23, 25, 28, 32, 34, 46, 56, 61, 63, 65, 69, 70, 77, 90, 92, 101, 105, 119, 121, 174, 204, 205, 209, 214, 216, 223, 226, 227, 230, 232, 233, 234, 245, 283, 291], "proof": [12, 56, 59, 90, 92, 233], "45": [12, 45, 65, 70, 81, 101, 105, 111, 210, 211, 227], "120": [12, 19, 64, 65, 70, 71, 87, 105, 108, 109, 211, 213, 214, 216, 230, 281], "210": [12, 69, 105, 227], "252": 12, "hidden": [12, 14, 188], "outdat": 12, "doctest_depends_on": [12, 248], "blanklin": 12, "todo": [12, 157, 159, 163, 164, 168, 169, 171, 172, 173, 174, 175, 207, 214, 221, 239], "trick": [12, 13, 14, 15, 61, 224, 240], "tag": [12, 214, 232], "dotprint": [12, 286, 290], "pprint": [12, 14, 15, 23, 29, 44, 45, 67, 73, 92, 101, 105, 115, 151, 199, 214, 215, 222, 226, 230, 231, 233, 234, 252, 290], "use_unicod": [12, 23, 30, 44, 45, 46, 69, 73, 92, 93, 101, 109, 115, 151, 194, 199, 201, 202, 213, 214, 215, 233, 234, 281, 285, 287, 290, 291, 292], "is_real": [12, 14, 21, 23, 25, 29, 65, 67, 71, 72, 101, 191, 214, 239], "real": [12, 13, 14, 15, 18, 19, 21, 22, 23, 25, 28, 29, 38, 40, 42, 43, 44, 46, 57, 65, 66, 67, 69, 70, 71, 72, 73, 77, 81, 82, 87, 90, 92, 95, 96, 98, 101, 105, 107, 111, 117, 129, 146, 148, 151, 152, 159, 177, 191, 199, 202, 205, 209, 210, 211, 214, 215, 217, 221, 222, 224, 226, 229, 230, 232, 233, 234, 239, 243, 247, 256, 285, 291, 292], "is_posit": [12, 14, 21, 22, 23, 65, 191, 205], "noth": [12, 13, 25, 45, 56, 65, 92, 163, 179, 201, 205, 213, 214, 226, 230, 232, 243, 245, 253, 255, 283], "didn": [12, 92, 101, 143], "unexpect": [12, 65, 245], "side": [12, 15, 19, 21, 27, 29, 32, 46, 56, 57, 65, 77, 81, 92, 101, 105, 108, 115, 124, 128, 143, 147, 167, 168, 184, 188, 189, 199, 201, 207, 209, 212, 214, 231, 233, 234, 238, 245, 247, 269, 281], "broke": 12, "revisit": [12, 137, 197], "particularli": [12, 21, 69, 92, 204, 205, 224, 291, 292], "squar": [12, 15, 21, 25, 28, 29, 34, 38, 42, 46, 56, 65, 66, 71, 81, 82, 90, 92, 96, 97, 101, 104, 105, 108, 115, 117, 141, 142, 165, 181, 189, 199, 203, 205, 207, 209, 210, 211, 214, 222, 226, 227, 230, 233, 234, 285], "root": [12, 15, 21, 23, 26, 29, 34, 38, 44, 46, 64, 65, 66, 71, 73, 87, 88, 89, 90, 92, 94, 97, 101, 105, 146, 184, 199, 201, 202, 205, 209, 211, 213, 214, 224, 226, 230, 232, 233, 234, 245, 249, 252, 285, 287, 290, 292], "radic": [12, 15, 25, 65, 66, 101, 201, 209, 210, 226, 232, 233], "adjust": [12, 128, 217, 221], "simpler": [12, 14, 22, 23, 25, 38, 65, 69, 73, 89, 90, 136, 198, 207, 223, 224, 226, 230, 232, 233, 291], "delet": [12, 49, 94, 96, 101, 211, 255, 291], "rational": 12, "pycodestyl": 12, "pyflak": 12, "pollut": 12, "strip_whitepac": 12, "undefin": [12, 14, 23, 29, 32, 40, 41, 44, 65, 71, 72, 73, 92, 98, 107, 120, 198, 209, 220, 221, 224, 253, 281, 292], "restrict": [12, 14, 21, 23, 27, 46, 54, 65, 66, 73, 101, 108, 109, 179, 183, 201, 204, 209, 211, 229], "cfg": [12, 207, 210], "cosmet": [12, 214], "noqa": [12, 65, 93, 205, 248], "pycqa": 12, "multipledispatch": [12, 13, 39], "dispatch": [12, 14, 40, 41, 42, 65, 66, 174, 214, 233, 249], "funcnam": [12, 246], "arg1": [12, 234], "arg2": [12, 234], "f811": [12, 65], "redefin": [12, 23, 57, 65, 141, 143, 202, 253], "stylist": 12, "reus": [12, 15, 23, 46, 179, 285], "str": [12, 13, 14, 23, 40, 45, 46, 47, 57, 65, 66, 67, 69, 74, 75, 78, 81, 82, 93, 95, 98, 105, 107, 113, 123, 124, 126, 146, 163, 173, 179, 189, 191, 193, 200, 205, 209, 214, 226, 230, 234, 250, 252, 253, 255, 259], "divis": [12, 15, 23, 65, 101, 105, 124, 181, 183, 201, 204, 205, 206, 207, 210, 212, 214, 227, 230, 232, 245, 253, 283, 286, 290], "gotcha": [12, 14, 16, 65, 198, 253, 284, 292], "intent": [12, 21, 46, 64, 65, 107, 247], "xp": 12, "test_symbol": 12, "ever": [12, 13, 14, 23, 71, 198, 201, 210, 224, 230, 247, 250, 286], "pars": [12, 13, 57, 65, 98, 129, 140, 211, 213, 270, 278], "cleaner": [12, 119, 146, 230], "sympifi": [12, 14, 15, 21, 22, 46, 69, 75, 95, 144, 152, 177, 179, 189, 190, 204, 205, 280, 286], "count_op": [12, 15, 65, 223, 226], "truthi": 12, "forget": [12, 28, 45, 291], "coverage_report": 12, "analyz": [12, 226, 239], "littl": [12, 21, 23, 45, 57, 75, 101, 105, 106, 131, 184, 203, 208, 210, 214, 224, 226, 234, 249, 263], "slower": [12, 13, 23, 25, 30, 61, 101, 204, 209, 253, 280], "covhtml": 12, "100": [12, 15, 23, 46, 49, 54, 64, 65, 66, 69, 73, 81, 88, 95, 96, 101, 105, 108, 200, 204, 209, 211, 213, 214, 221, 232, 233, 252, 280], "defens": 12, "gone": 12, "nedbatcheld": 12, "blog": [12, 13, 23, 46, 70, 96, 227, 233], "202008": 12, "you_should_include_your_tests_in_coverag": 12, "stori": [12, 184], "guarante": [12, 18, 21, 25, 31, 46, 56, 57, 65, 77, 90, 92, 101, 204, 207, 209, 210, 230, 232, 233, 250, 255, 287, 291], "condit": [12, 14, 21, 22, 25, 27, 46, 56, 65, 67, 71, 73, 83, 84, 87, 88, 89, 92, 95, 101, 105, 107, 108, 109, 111, 115, 121, 125, 131, 139, 143, 146, 148, 193, 199, 211, 214, 217, 224, 227, 229, 230, 232, 233, 234, 239, 291], "200710": 12, "flaws_in_coverage_measur": 12, "regex": 13, "categori": [13, 201, 270, 277], "lead": [13, 14, 21, 22, 23, 25, 34, 64, 65, 71, 75, 92, 95, 101, 105, 117, 125, 163, 189, 198, 202, 205, 207, 209, 210, 211, 214, 221, 223, 226, 230, 233, 247, 250, 255, 284, 291], "w": [13, 15, 34, 38, 46, 49, 55, 57, 64, 65, 66, 67, 68, 71, 73, 90, 92, 95, 101, 102, 123, 126, 137, 145, 148, 153, 164, 168, 177, 188, 193, 195, 196, 199, 200, 202, 203, 207, 208, 209, 210, 211, 215, 221, 222, 224, 226, 227, 230, 231, 233, 234, 245, 253, 255, 266, 292], "pythonwarn": 13, "NOT": [13, 95, 115, 159, 163, 178, 181, 243, 246], "ned": 13, "batcheld": 13, "inertia": [13, 108, 109, 118, 119, 120, 122, 128, 129, 131, 132, 134, 136, 137, 138, 139, 146, 188, 189, 197, 198, 209, 276], "circular": [13, 15, 21, 113, 151, 207], "pariti": [13, 21, 57, 210], "inertia_of_point_mass": [13, 126], "graviti": [13, 128, 129, 133, 134, 136, 138, 146, 195, 268], "subclass": [13, 14, 21, 23, 40, 41, 46, 65, 72, 76, 78, 92, 95, 148, 154, 163, 167, 168, 169, 174, 176, 177, 183, 200, 201, 203, 204, 205, 209, 210, 214, 234, 245, 246, 247, 250, 253, 259, 263, 286], "__init_subclass__": [13, 21], "kanesmethod": [13, 123, 124, 129, 131, 132, 133, 134, 136, 137, 140, 141, 143, 146], "pinjoint": [13, 123, 132, 134, 140], "prismaticjoint": [13, 123, 134, 140], "q_": [13, 65, 123, 194, 227, 230], "u_": [13, 101, 123], "had": [13, 23, 29, 30, 57, 65, 66, 101, 105, 129, 143, 209, 210, 211, 214, 222, 224, 230, 232, 233, 248, 253, 280, 283, 286, 287], "axi": [13, 32, 38, 58, 70, 71, 75, 76, 78, 79, 81, 87, 90, 92, 98, 101, 108, 113, 118, 123, 129, 131, 133, 136, 137, 138, 140, 143, 146, 147, 148, 151, 152, 176, 189, 191, 193, 195, 197, 198, 200, 205, 233, 259, 261, 264, 266, 269], "parent_axi": [13, 123], "child_axi": [13, 123], "parent": [13, 56, 65, 88, 123, 140, 189, 193, 200, 204, 205, 209, 245, 249, 259, 263, 264], "child": [13, 14, 123, 140, 189, 204, 249], "parent_interfram": [13, 123, 140], "child_interfram": [13, 123, 140], "rotat": [13, 38, 53, 56, 58, 65, 74, 75, 76, 78, 80, 81, 96, 108, 109, 123, 131, 134, 136, 138, 140, 144, 147, 163, 176, 189, 193, 195, 197, 198, 199, 200, 252, 259, 261, 264, 266, 268], "joint_axi": [13, 123, 132, 134, 140], "transform": [13, 14, 34, 38, 43, 46, 61, 64, 65, 66, 67, 69, 70, 73, 80, 98, 101, 113, 115, 123, 131, 140, 151, 172, 174, 176, 181, 199, 202, 203, 205, 207, 209, 210, 216, 221, 222, 223, 226, 227, 229, 230, 231, 232, 233, 234, 236, 239, 247, 253, 259, 266, 285], "pin": [13, 38, 108, 109, 111, 123], "dcm": [13, 120, 123, 129, 131, 146, 189, 197, 198, 259], "q_pin": 13, "theta_pin": 13, "rad": [13, 66, 113, 129, 209], "int_fram": 13, "orient_axi": [13, 120, 123, 189, 191], "align": [13, 46, 75, 101, 123, 198, 199, 214, 232, 245], "orient": [13, 38, 77, 81, 96, 123, 129, 131, 133, 136, 140, 144, 146, 189, 193, 195, 197, 198, 207, 252, 259, 260, 267, 268, 274], "parent_joint_po": [13, 123], "child_joint_po": [13, 123], "parent_point": [13, 123, 132, 134, 140], "child_point": [13, 123, 132, 134, 140], "mass": [13, 82, 117, 118, 119, 120, 123, 124, 126, 128, 129, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 146, 147, 155, 180, 182, 183, 184, 195, 197, 245, 268, 276], "pos_from": [13, 123, 129, 131, 132, 133, 140, 146, 193, 197], "masscent": [13, 120, 123, 126, 132, 140, 144, 146], "parent_fram": [13, 140], "child_fram": [13, 140], "locatenew": [13, 120, 126, 131, 133, 136, 137, 138, 143, 144, 146, 147, 190, 193, 195, 197], "conflict": [13, 71, 105, 115, 129, 247], "comprehens": [13, 21, 29, 30, 32, 208, 222, 234, 280], "additional_transl": 13, "recogn": [13, 15, 25, 30, 32, 65, 66, 70, 80, 105, 108, 116, 202, 205, 213, 222, 223, 232, 239, 283], "node": [13, 14, 44, 59, 65, 92, 107, 111, 121, 155, 180, 189, 199, 204, 214, 221, 233, 238, 249, 253, 286, 290], "maximum": [13, 15, 29, 30, 44, 46, 47, 56, 57, 65, 71, 92, 101, 105, 108, 131, 176, 184, 200, 205, 207, 210, 214, 221, 222, 226, 227, 230, 233, 234, 249, 252], "multipli": [13, 15, 30, 38, 42, 46, 56, 65, 76, 80, 87, 94, 96, 101, 105, 124, 133, 142, 143, 156, 165, 179, 184, 185, 188, 201, 202, 203, 205, 207, 209, 210, 214, 216, 223, 224, 227, 230, 235, 252, 263, 283, 286], "max": [13, 46, 56, 57, 65, 71, 73, 75, 101, 105, 107, 108, 199, 200, 209, 210, 214, 221, 223, 224, 253], "min": [13, 57, 61, 65, 70, 71, 101, 107, 199, 200, 209, 214, 220, 230, 252], "is_perfect_squar": 13, "ntheori": [13, 42, 56, 65, 66, 207, 210, 227, 252], "primetest": [13, 65, 105], "is_squar": [13, 65, 96, 105], "is_prim": [13, 21, 65, 201], "isprim": [13, 42, 66, 105], "divid": [13, 14, 56, 64, 65, 66, 81, 101, 105, 183, 184, 202, 204, 205, 207, 209, 210, 214, 230, 249, 286], "bottom_up": [13, 65], "interactive_travers": 13, "postorder_travers": [13, 65, 286], "preorder_travers": [13, 65, 286], "refactor": [13, 230, 238, 249], "tr": [13, 47, 56, 214, 223], "quantum": [13, 117, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 199, 276], "default_sort_kei": [13, 45, 54, 65, 238], "matrixel": [13, 46], "matrixsymbol": [13, 18, 21, 30, 42, 43, 46, 65, 96, 98, 101, 214, 234, 236], "layer": [13, 115, 207, 253], "imprecis": 13, "free_symbol": [13, 14, 28, 46, 65, 74, 92, 96, 168, 186, 189, 210, 220, 227], "atomicexpr": [13, 65], "concept": [13, 14, 21, 56, 131, 198, 204, 206, 209, 214, 233, 238, 268, 284, 289], "misappli": 13, "introduc": [13, 22, 28, 61, 64, 65, 73, 90, 101, 106, 109, 129, 131, 136, 137, 138, 142, 179, 184, 198, 205, 206, 210, 211, 214, 221, 224, 227, 234, 250, 277, 284, 287, 289, 291], "21494": 13, "size": [13, 19, 30, 46, 47, 49, 54, 56, 57, 58, 59, 60, 61, 65, 66, 68, 70, 93, 96, 98, 101, 104, 105, 113, 131, 141, 142, 143, 152, 174, 175, 194, 200, 203, 207, 214, 226, 227, 230, 234, 252, 281], "die": [13, 209, 234], "histor": [13, 14, 17, 23, 66, 203, 230, 234], "21563": 13, "revert": [13, 205, 210], "sample_it": [13, 234], "domainmatrix": [13, 30, 97, 101, 206, 209, 212, 277], "21402": 13, "earlier": [13, 119, 211, 215, 224, 226, 253, 264, 266, 286], "unsupport": [13, 15, 18, 115, 209, 214], "operand": [13, 15, 57, 65, 190, 209, 262], "dict": [13, 15, 17, 21, 25, 28, 29, 33, 34, 46, 48, 57, 65, 66, 67, 81, 82, 95, 96, 101, 105, 107, 124, 125, 159, 171, 174, 185, 187, 189, 200, 203, 204, 205, 207, 209, 210, 211, 212, 214, 226, 227, 230, 231, 232, 233, 234, 238, 245, 246, 252, 259, 292], "smith_normal_form": [13, 102, 203], "newmatrix": 13, "holonom": [13, 86, 89, 130, 131, 132, 133, 139, 141, 142, 270, 276, 277], "polymatrix": 13, "risch": [13, 92, 281], "20780": 13, "20759": 13, "20621": 13, "19882": 13, "18844": 13, "21441": 13, "21427": 13, "21496": 13, "potenti": [13, 21, 77, 98, 101, 105, 124, 125, 126, 128, 138, 139, 190, 196, 204, 209, 214, 221, 224, 226, 230, 248, 249, 262, 268, 276], "impact": 13, "downstream": [13, 21], "goal": [13, 14, 45, 119, 147, 209, 211, 245, 246, 248, 284, 285], "tableform": [13, 232, 255], "usecas": 13, "line2dbaseseri": [13, 200], "linecollect": [13, 200], "bokeh": 13, "plotli": 13, "mayavi": 13, "k3d": 13, "matplotlibbackend": [13, 200], "get_point": [13, 200], "uniformli": [13, 19, 56, 81, 82, 108, 113, 200, 248], "adapt": [13, 113, 200, 220, 232, 252, 258], "get_data": [13, 200, 256], "dft": [13, 68, 118], "fourier": [13, 65, 73, 92, 118, 172, 218, 271], "as_explicit": [13, 30, 98, 101, 118, 235, 236], "discret": [13, 44, 46, 47, 55, 57, 65, 66, 73, 105, 115, 179, 184, 216, 219, 230, 232, 233, 271, 280], "represent": [13, 14, 23, 25, 29, 38, 45, 46, 47, 48, 56, 59, 65, 66, 71, 73, 77, 85, 87, 89, 90, 92, 94, 95, 96, 97, 98, 104, 105, 112, 113, 118, 119, 120, 128, 139, 143, 148, 163, 168, 173, 174, 176, 177, 179, 181, 188, 194, 195, 197, 200, 201, 203, 205, 207, 209, 210, 211, 212, 213, 214, 216, 224, 226, 227, 230, 233, 234, 239, 240, 253, 255, 259, 262, 269, 277, 281, 283, 286], "21626": 13, "expos": [13, 45, 234], "mutat": [13, 115, 203, 205, 234], "flat": [13, 79, 96, 246], "todok": [13, 96], "ey": [13, 30, 96, 97, 98, 99, 100, 101, 103, 203, 209, 235, 255, 287], "converg": [13, 46, 64, 69, 73, 92, 105, 148, 210, 217, 221, 224, 281], "legacy_matrix": [13, 92], "discontinu": [13, 44, 69, 71, 92, 108, 217, 232], "theano_cod": 13, "aesara_cod": [13, 214], "theanoprint": 13, "aesaraprint": [13, 214], "predic": [13, 14, 39, 40, 44, 107, 210, 226, 252, 271], "big": [13, 15, 19, 21, 49, 65, 67, 105, 146, 159, 199, 213, 214, 221, 236, 255, 281, 283], "registr": 13, "add_handl": 13, "remove_handl": [13, 39], "regist": [13, 39, 40, 41, 66, 175], "register_mani": [13, 40, 41], "askprimehandl": 13, "staticmethod": [13, 245], "register_handl": [13, 39], "prime": [13, 21, 32, 39, 40, 41, 42, 56, 63, 64, 65, 66, 68, 70, 73, 105, 150, 201, 202, 204, 205, 207, 210, 224, 226, 227, 234, 249], "Not": [13, 14, 22, 23, 30, 65, 70, 95, 115, 214, 233, 234, 252, 285, 292], "primepred": [13, 42], "q": [13, 14, 15, 18, 21, 26, 28, 37, 38, 39, 40, 41, 42, 43, 46, 57, 61, 64, 65, 66, 73, 82, 87, 88, 90, 92, 94, 96, 101, 107, 108, 115, 116, 123, 124, 125, 128, 129, 131, 133, 138, 140, 141, 142, 143, 146, 147, 148, 159, 173, 179, 182, 189, 190, 191, 193, 194, 195, 197, 200, 201, 202, 204, 205, 207, 209, 210, 211, 213, 214, 216, 224, 227, 230, 232, 234, 239, 240, 255, 259, 262, 263, 265, 268, 287, 291], "20209": 13, "stochast": 13, "timestamp": 13, "wienerprocess": [13, 234], "normaldistribut": [13, 234], "20078": 13, "misspel": 13, "absorbing_prob": [13, 234], "absorb": [13, 14, 90, 230, 234, 281], "probabilit": 13, "shutil": 13, "power": [13, 15, 27, 32, 38, 43, 46, 55, 56, 57, 66, 68, 69, 70, 71, 87, 88, 90, 92, 94, 96, 98, 105, 106, 115, 129, 146, 151, 162, 165, 178, 181, 183, 184, 185, 189, 201, 202, 204, 205, 206, 207, 209, 210, 211, 213, 214, 215, 218, 221, 223, 226, 227, 230, 232, 233, 234, 238, 247, 252, 271, 280, 281, 282, 283, 284, 286, 287, 290], "immut": [13, 14, 65, 97, 100, 103, 198, 205, 230, 235, 274, 280, 287], "coordsystem": [13, 67], "patch": [13, 67, 214], "manifold": [13, 67], "coord_system": 13, "connect_to": 13, "coord_tuple_transform_to": [13, 67], "constructor": [13, 14, 23, 40, 41, 45, 46, 52, 56, 57, 58, 65, 72, 73, 94, 99, 101, 133, 172, 173, 177, 181, 200, 201, 203, 204, 205, 214, 222, 230, 239, 247, 263, 271, 282, 286], "unord": [13, 15, 65, 105, 205, 233, 252, 253], "lambidfi": 13, "guess": [13, 17, 45, 66, 69, 90, 93, 194, 207, 210, 224, 227, 286], "construct": [13, 19, 27, 38, 40, 41, 45, 46, 48, 65, 67, 71, 73, 75, 79, 81, 93, 98, 101, 106, 109, 119, 120, 124, 126, 129, 131, 164, 168, 177, 178, 181, 185, 201, 204, 205, 207, 209, 210, 214, 227, 232, 234, 235, 239, 247, 249, 250, 263, 265, 266, 283, 286, 287, 291], "superclass": [13, 14, 21, 64, 92, 98, 205], "scalar": [13, 31, 38, 65, 67, 80, 94, 96, 98, 101, 106, 126, 129, 178, 189, 190, 191, 196, 198, 201, 203, 207, 214, 230, 235, 247, 253, 259, 261, 262, 263, 264, 265, 267, 269, 274, 276], "quantiti": [13, 15, 57, 65, 70, 73, 77, 82, 109, 119, 124, 137, 144, 158, 181, 183, 187, 188, 195, 197, 198, 209, 226, 234, 263, 268, 276], "boolean": [13, 14, 23, 24, 27, 32, 39, 40, 41, 42, 43, 44, 46, 65, 71, 75, 79, 80, 81, 82, 93, 96, 101, 102, 105, 108, 113, 115, 124, 164, 189, 191, 194, 200, 203, 205, 207, 209, 211, 214, 226, 230, 232, 234, 252, 262, 287], "sens": [13, 14, 19, 21, 23, 38, 42, 44, 45, 65, 67, 70, 73, 90, 95, 124, 131, 184, 189, 198, 201, 207, 209, 223, 224, 226, 233, 234, 246, 247, 252, 268, 291], "exponenti": [13, 15, 21, 32, 38, 46, 56, 61, 65, 66, 70, 92, 95, 96, 101, 105, 107, 165, 181, 211, 226, 230, 233, 234, 282, 283, 287], "treat": [13, 14, 21, 22, 23, 28, 32, 33, 38, 55, 56, 63, 65, 70, 73, 80, 81, 101, 107, 129, 152, 189, 195, 202, 204, 205, 207, 209, 210, 211, 213, 214, 221, 222, 224, 226, 227, 230, 232, 238, 246, 249, 266, 283, 287], "cdot": [13, 21, 47, 64, 70, 73, 83, 87, 88, 90, 96, 98, 101, 105, 116, 118, 144, 184, 188, 195, 197, 198, 199, 201, 202, 210, 217, 221, 224, 230, 232, 235, 236, 252, 265, 266, 285, 286, 291], "attributeerror": [13, 21, 65, 101, 233, 253, 287], "as_coeff_mul": [13, 65, 90, 98], "tri": [13, 14, 15, 21, 27, 29, 32, 45, 65, 73, 81, 90, 92, 131, 143, 174, 201, 202, 209, 214, 216, 226, 230, 231, 233, 245, 283, 291], "benchmark": [13, 131, 145], "tmpfile": 13, "random_complex_numb": [13, 65], "verify_numer": [13, 65], "test_derivative_numer": [13, 65], "_randrang": [13, 65, 66], "_randint": [13, 65, 207], "as_poli": [13, 65, 202, 210], "as_expr": [13, 65, 101, 204, 209, 210, 211, 287], "combintor": 13, "perm_cycl": [13, 57, 214], "init_print": [13, 25, 30, 36, 46, 57, 69, 92, 93, 101, 109, 194, 201, 202, 213, 281, 285, 287, 290, 291, 292], "problemat": [13, 23, 204], "18056": 13, "15416": 13, "100x": 13, "slowdown": [13, 69], "significantli": [13, 30, 46, 69, 119, 141, 205, 216, 246, 249], "_sympifi": [13, 65, 98, 286], "strict": [13, 14, 25, 56, 57, 65, 69, 70, 96, 101, 207, 210, 232, 233, 252, 255, 291], "whatev": [13, 15, 23, 56, 65, 66, 226, 230, 231, 233, 253], "__repr__": [13, 214], "12524": 13, "repr": [13, 46, 92, 173, 204, 209, 214, 245, 290], "plenti": 13, "_sympy_": [13, 65], "lh": [13, 17, 27, 32, 46, 55, 65, 212, 214, 230, 232, 233, 265], "rh": [13, 17, 27, 30, 32, 46, 55, 57, 65, 96, 97, 101, 123, 124, 129, 136, 137, 138, 203, 212, 214, 216, 230, 232, 233, 265], "tensexpr": [13, 116, 240], "substitute_indic": 13, "danger": [13, 202], "tensor_head": [13, 116, 240], "shorter": [13, 34, 65, 75, 119, 141, 188, 201, 205, 214, 247, 255], "creation": [13, 15, 23, 65, 67, 101, 120, 126, 136, 139, 140, 141, 142, 143, 153, 163, 167, 168, 169, 179, 197, 198, 214, 234, 239, 247, 253], "_dummy_fmt": 13, "l_": [13, 92, 101, 199], "obsolet": 13, "dummy_nam": [13, 240], "metric_symmetri": [13, 240], "set_metr": [13, 240], "delta": [13, 15, 46, 49, 59, 70, 88, 90, 94, 113, 143, 151, 179, 199, 203, 214, 221, 227, 230, 234, 235, 240], "epsilon": [13, 15, 64, 66, 73, 90, 92, 150, 214, 240], "latter": [13, 18, 23, 46, 56, 65, 70, 73, 90, 105, 201, 205, 209, 214, 224, 227, 240, 247, 252, 253, 283], "obscur": [13, 21], "young": [13, 108, 240], "tableau": 13, "favor": 13, "tensorindex": [13, 240], "tensor_indic": [13, 116, 240], "denot": [13, 14, 15, 19, 56, 57, 65, 67, 73, 87, 88, 90, 92, 94, 95, 96, 101, 105, 107, 115, 184, 189, 195, 200, 201, 202, 207, 209, 217, 221, 222, 224, 230, 234, 239, 240, 259, 261, 263, 264, 266, 268], "emptyset": [13, 21, 29, 44, 45, 95, 214, 222, 233, 259, 292], "is_empti": [13, 21, 57], "unknown": [13, 14, 18, 21, 22, 23, 30, 32, 33, 38, 65, 66, 109, 164, 212, 229, 230, 231, 232, 233, 252, 292], "empti": [13, 14, 21, 25, 28, 29, 33, 40, 44, 45, 46, 47, 56, 60, 64, 65, 77, 80, 81, 82, 95, 96, 101, 105, 124, 143, 174, 187, 205, 209, 210, 214, 220, 221, 222, 224, 230, 232, 233, 245, 247, 252, 255, 286], "denest": [13, 65, 210, 226, 232, 252], "particl": [13, 120, 123, 124, 126, 129, 133, 134, 139, 141, 143, 146, 147, 155, 158, 165, 166, 177, 179, 182, 184, 197, 240, 276], "rigidbodi": [13, 120, 123, 124, 126, 128, 131, 136, 137, 138, 144, 146], "potential_energi": [13, 123, 124, 126, 138, 144], "energi": [13, 117, 120, 124, 126, 129, 138, 155, 180, 184, 195, 240, 266, 276], "setter": [13, 129, 146], "getter": [13, 65, 129, 146], "set_": 13, "set_condit": 13, "17749": 13, "unpack": [13, 65, 96, 101, 252, 253], "emul": [13, 226, 233, 235, 253], "is_deriv": [13, 65], "as_finite_differ": [13, 44, 65, 281], "17881": 13, "get_matrix": [13, 240], "__getitem__": [13, 65, 96, 239], "__iter__": [13, 57, 65, 226], "_components_data_full_destroi": 13, "__pow__": [13, 96, 205, 211], "flaw": 13, "replace_with_arrai": [13, 240, 241], "throughout": [14, 90, 95, 207, 217, 233, 268, 283], "elsewher": [14, 21, 70, 94, 131, 203, 245], "termnam": 14, "antideriv": [14, 71, 73, 92, 230, 281], "frac": [14, 19, 21, 23, 25, 26, 30, 32, 44, 64, 65, 66, 67, 70, 71, 73, 90, 92, 101, 105, 107, 115, 133, 144, 182, 194, 195, 197, 198, 199, 203, 207, 210, 214, 216, 217, 221, 224, 227, 230, 231, 233, 234, 235, 252, 266, 268, 281, 285, 286, 290, 291], "primit": [14, 56, 65, 66, 73, 105, 173, 177, 201, 202, 204, 205, 207, 209, 210, 213, 214, 227, 281], "terminologi": [14, 26, 240], "tupl": [14, 23, 28, 31, 32, 33, 38, 40, 41, 44, 45, 46, 47, 56, 57, 64, 65, 66, 67, 71, 72, 73, 74, 75, 76, 78, 80, 81, 82, 87, 90, 92, 96, 101, 104, 105, 107, 108, 109, 113, 120, 123, 124, 126, 128, 141, 142, 144, 146, 148, 163, 164, 165, 168, 173, 176, 177, 178, 179, 189, 193, 198, 200, 201, 203, 204, 205, 207, 211, 212, 214, 215, 216, 220, 222, 226, 227, 230, 231, 232, 233, 234, 235, 239, 240, 245, 246, 247, 248, 252, 253, 255, 259, 263, 281, 286, 287, 290], "subexpress": [14, 23, 46, 65, 71, 96, 119, 121, 209, 210, 214, 221, 226, 233, 247, 253, 280], "togeth": [14, 19, 46, 56, 65, 69, 94, 101, 105, 139, 165, 176, 184, 198, 201, 205, 207, 209, 210, 213, 214, 226, 230, 232, 234, 245, 246, 252, 285, 291], "walk": [14, 46, 49, 65, 171, 174, 224], "extract": [14, 25, 29, 33, 34, 44, 65, 92, 96, 98, 101, 105, 116, 131, 139, 144, 198, 207, 209, 210, 232, 233, 234, 245, 247, 252], "rebuilt": [14, 286], "atom": [14, 27, 46, 57, 65, 92, 95, 96, 117, 180, 204, 211, 214, 232, 233, 239], "queri": [14, 21, 22, 23, 39, 42, 43, 44, 46, 65, 77, 210, 226, 234], "is_": [14, 23, 65], "recurs": [14, 15, 18, 21, 23, 44, 65, 70, 90, 92, 95, 96, 105, 131, 200, 207, 210, 211, 214, 215, 219, 221, 226, 232, 233, 238, 243, 245, 249, 250, 252, 282, 291], "canonic": [14, 52, 65, 223, 240, 271], "excess": 14, "discourag": [14, 21, 65, 226], "expens": [14, 23, 32, 65, 143, 223, 230, 231, 232, 248, 287], "matrix": [14, 18, 19, 21, 26, 31, 33, 38, 46, 54, 57, 65, 66, 67, 73, 80, 90, 92, 94, 96, 97, 99, 100, 103, 104, 106, 107, 115, 116, 118, 120, 123, 124, 125, 126, 128, 129, 131, 132, 133, 134, 136, 137, 138, 140, 141, 142, 144, 146, 147, 148, 151, 152, 154, 162, 163, 168, 173, 174, 176, 178, 179, 181, 184, 189, 198, 199, 201, 203, 207, 209, 212, 214, 215, 222, 224, 226, 227, 230, 232, 233, 235, 236, 238, 239, 240, 241, 246, 247, 252, 253, 255, 259, 261, 262, 264, 268, 274, 282, 285, 286, 291, 292], "bound": [14, 27, 42, 46, 47, 64, 65, 74, 75, 76, 78, 80, 81, 92, 105, 126, 177, 205, 207, 209, 210, 214, 220, 230, 232, 233, 234, 239, 249, 255, 259], "dummi": [14, 46, 61, 64, 65, 71, 90, 92, 101, 129, 146, 174, 179, 204, 205, 209, 210, 211, 220, 221, 222, 224, 226, 230, 233, 238, 240, 243, 247, 252, 253], "unequ": [14, 15, 17, 65, 108, 214], "clash": [14, 37, 65, 101], "_eval_": 14, "_eval_deriv": [14, 23, 65, 73], "overrid": [14, 15, 46, 65, 74, 75, 81, 107, 177, 214, 239, 246, 247, 252, 253], "pre": [14, 38, 45, 46, 65, 199, 200, 215, 223, 226, 232, 233, 245, 264, 268, 286], "shorthand": [14, 15, 21, 23, 65, 95, 173, 209, 222, 243], "reserv": [14, 21, 129, 240, 247, 287], "smaller": [14, 46, 56, 57, 65, 66, 70, 73, 81, 92, 98, 105, 141, 202, 204, 207, 210, 217, 223, 224, 232, 252, 280, 291], "children": [14, 65, 66, 204, 249], "leaf": [14, 204, 214, 223, 286], "strictli": [14, 15, 18, 20, 21, 42, 44, 65, 73, 101, 105, 115, 207, 226, 232, 253], "dag": 14, "rebuild": [14, 23, 65, 210, 286], "colloqui": [14, 26], "hyper": [14, 65, 70, 73, 84, 87, 214, 216, 224, 226, 232, 234, 291], "primepi": [14, 23, 105], "divisor_sigma": [14, 105], "interchang": [14, 61, 64, 90, 230], "mental": 14, "hashabl": [14, 62, 90, 252], "repl": [14, 240], "intermedi": [14, 46, 47, 88, 96, 123, 129, 131, 136, 140, 163, 173, 181, 182, 189, 193, 197, 233, 247, 288], "idiom": [14, 256, 283, 284], "frown": 14, "lowercas": [14, 15, 38, 230, 245, 281], "is_integ": [14, 21, 23, 65, 191, 214, 239], "capit": [14, 64, 66, 115, 230], "wherea": [14, 19, 21, 25, 30, 42, 46, 66, 75, 81, 90, 95, 115, 184, 201, 204, 210, 214, 232, 233, 252, 291], "is_capit": 14, "unneed": 14, "achiev": [14, 15, 23, 65, 69, 73, 98, 105, 129, 146, 213, 221, 224, 226, 233, 236, 248, 264], "isinst": [14, 18, 21, 23, 46, 65, 96, 98, 115, 204, 205, 214, 215, 226, 235, 238, 247, 286], "ship": [14, 106], "numberkind": [14, 18, 65, 96, 222], "matrixkind": [14, 18, 65, 96, 222], "booleankind": [14, 65], "ring": [14, 25, 68, 88, 101, 102, 197, 202, 203, 207, 209, 210, 211, 212, 213, 214, 252], "classif": [14, 20, 65, 230, 231], "lamda": [14, 98, 214, 222, 234, 287], "\u03bb": [14, 287], "lambdifi": [14, 23, 31, 32, 46, 73, 131, 214, 232, 246, 251, 278, 282], "matrixexpr": [14, 23, 96, 98, 99], "mutabl": [14, 15, 47, 65, 97, 98, 99, 108, 205, 214, 215, 226, 235, 287], "dens": [14, 96, 98, 100, 101, 203, 209, 210, 235, 253, 274, 286], "quit": [14, 19, 23, 73, 101, 105, 131, 197, 200, 211, 213, 224, 232, 252, 268, 283, 286], "rung": [14, 44, 87], "kutta": [14, 87], "loss": [14, 46, 90, 179, 246, 265], "stabil": [14, 56, 61, 63, 69, 115, 143, 238], "focus": [14, 31, 207, 227, 229, 230, 232, 233, 292], "is_numb": [14, 21, 65, 73, 92], "infin": [14, 21, 27, 42, 64, 65, 70, 71, 73, 78, 90, 92, 101, 152, 205, 207, 210, 214, 219, 220, 221, 222, 226, 229, 230, 234], "resembl": [14, 67, 73, 92, 239], "zoo": [14, 17, 21, 42, 65, 70, 71, 73, 92, 221, 223, 226], "data": [14, 19, 46, 56, 65, 66, 73, 92, 101, 106, 113, 124, 158, 200, 201, 204, 205, 207, 210, 211, 214, 226, 239, 240, 245, 247, 249, 252, 256], "effici": [14, 19, 21, 25, 30, 38, 44, 46, 49, 56, 61, 65, 68, 69, 70, 81, 82, 98, 101, 105, 106, 115, 123, 124, 146, 199, 202, 203, 204, 205, 207, 210, 211, 212, 213, 226, 227, 232, 246, 253, 280, 286, 287, 291], "inequ": [14, 21, 22, 23, 26, 65, 200, 207, 222, 224, 228, 271], "neq": [14, 23, 65, 71, 73, 90, 92, 96, 184, 198, 199, 207, 210, 227, 230, 232, 291], "ne": [14, 17, 21, 65, 66, 70, 71, 78, 90, 101, 105, 202, 204, 207, 224, 230, 234], "hold": [14, 15, 23, 41, 45, 56, 61, 65, 66, 67, 71, 73, 87, 90, 101, 104, 107, 115, 117, 123, 125, 126, 144, 175, 210, 224, 226, 230, 234, 247, 291], "singleton": [14, 57, 95, 233, 286], "adject": [14, 234], "heurist": [14, 21, 32, 57, 90, 92, 96, 207, 208, 221, 223, 226, 232, 233, 245, 281, 291], "commut": [14, 21, 38, 42, 45, 56, 57, 61, 65, 67, 88, 92, 101, 156, 163, 166, 167, 168, 178, 179, 184, 191, 198, 202, 205, 206, 207, 208, 210, 214, 221, 222, 224, 230, 240, 276, 277, 286], "law": [14, 45, 139, 182, 198, 202, 234], "xreplac": [14, 65, 96, 101, 189], "knowledg": [14, 64, 65, 66, 209, 230, 286, 289], "round": [14, 23, 31, 44, 46, 65, 69, 70, 71, 101, 152, 209, 210, 221, 223, 234], "analyt": [14, 36, 70, 73, 90, 101, 139, 230, 281], "implicitli": [14, 21, 22, 23, 57, 65, 92, 201, 204, 232], "independ": [14, 15, 23, 30, 42, 44, 46, 56, 64, 65, 67, 73, 82, 90, 92, 94, 101, 115, 124, 125, 129, 131, 133, 141, 143, 177, 184, 195, 200, 202, 204, 209, 210, 216, 217, 224, 226, 227, 230, 231, 232, 233, 234, 240, 245, 246, 266, 285, 286], "parsabl": 14, "iter": [14, 25, 28, 29, 30, 34, 44, 46, 54, 56, 57, 60, 61, 65, 66, 67, 68, 70, 73, 81, 95, 105, 120, 121, 123, 124, 125, 128, 143, 147, 164, 179, 193, 200, 201, 202, 203, 205, 207, 210, 214, 215, 216, 217, 220, 226, 227, 230, 232, 233, 234, 235, 238, 246, 247, 248, 249, 251, 253, 259, 264, 278], "fuzzi": [14, 21, 23, 24], "noncomput": 14, "philosoph": 14, "OR": [14, 44, 68, 95, 207], "unevaluatedexpr": [14, 65, 214, 286], "surpris": [14, 21, 233], "north": 14, "riemann": [14, 67, 70, 71, 90, 201, 226, 240], "sphere": [14, 151, 259, 269], "behav": [15, 42, 44, 65, 66, 71, 73, 105, 210, 222, 226, 232, 235, 241, 287], "mapl": [15, 92, 203, 230, 285], "mathematica": [15, 46, 57, 107, 285, 287], "faq": 15, "introductori": [15, 19, 35, 36, 146, 204, 205, 210], "remaind": [15, 64, 65, 66, 105, 202, 204, 205, 208, 210, 230], "java": 15, "subtract": [15, 29, 38, 46, 57, 65, 69, 80, 105, 115, 123, 181, 202, 203, 204, 205, 207, 209, 210, 286, 291], "proper": [15, 56, 65, 92, 105, 119, 129, 188, 204, 205, 209, 214, 222, 230, 235, 246, 247, 266, 287], "alter": [15, 47, 56, 65, 189, 204, 214, 216, 233], "afterward": [15, 46, 65, 126, 133], "simultan": [15, 65, 71, 78, 96, 105, 200, 223], "var": [15, 28, 44, 46, 64, 65, 69, 70, 88, 92, 95, 101, 115, 189, 200, 209, 213, 214, 226, 227, 253, 292], "rate": [15, 131, 197, 234, 266, 281], "short_lif": 15, "haven": 15, "160": [15, 108, 208], "ctimesd": 15, "relationship": [15, 17, 21, 46, 65, 70, 72, 92, 105, 140, 163, 189, 195, 198, 204, 232], "runtimeerror": [15, 44, 222, 233, 252], "compileflag": [15, 245], "glob": [15, 245], "exceed": [15, 131, 209], "stdin": [15, 248, 250], "nameerror": [15, 93, 248, 283], "__future__": [15, 19, 283, 290], "cl": [15, 21, 23, 32, 46, 56, 65, 92, 96, 179, 193, 205, 209, 230, 239, 248, 252, 265, 281, 290, 292], "dir": [15, 65, 108, 216, 221, 252], "__builtins__": 15, "__file__": [15, 256], "__name__": [15, 214, 256], "__package__": 15, "_greek": 15, "_latin": 15, "chi": [15, 73, 90, 151, 214, 224, 230, 234, 240], "eta": [15, 73, 90, 209, 214, 230, 231, 234], "iota": [15, 214], "kappa": [15, 199, 214, 234], "mu": [15, 73, 90, 105, 116, 118, 150, 214, 234, 240], "omega": [15, 46, 47, 56, 90, 101, 105, 120, 126, 128, 144, 147, 153, 155, 180, 189, 193, 194, 197, 199, 214, 221, 234], "omicron": [15, 214], "phi": [15, 56, 65, 66, 70, 73, 90, 94, 101, 105, 117, 146, 153, 162, 164, 199, 201, 209, 214, 230, 259, 269], "psi": [15, 70, 73, 90, 151, 162, 163, 169, 177, 209, 214, 240], "rho": [15, 67, 90, 101, 105, 132, 173, 214, 234, 240, 269], "sigma": [15, 57, 88, 90, 96, 101, 214, 217, 234], "tau": [15, 46, 90, 92, 101, 209, 214, 230], "theta": [15, 38, 65, 67, 71, 73, 90, 93, 101, 107, 117, 128, 147, 151, 189, 198, 199, 205, 209, 214, 217, 222, 233, 234, 259, 261, 264, 266, 269], "upsilon": [15, 214], "xi": [15, 23, 67, 90, 214, 230, 231, 232], "lastli": [15, 92, 109, 147, 230], "unit": [15, 23, 38, 42, 45, 65, 66, 70, 78, 79, 80, 92, 101, 105, 108, 113, 115, 117, 118, 123, 129, 144, 146, 155, 180, 181, 182, 186, 188, 189, 195, 198, 200, 202, 205, 207, 209, 210, 212, 214, 222, 224, 227, 233, 235, 259, 261, 263, 268, 269, 276], "mnemon": [15, 223, 252], "osineq": 15, "reimport": 15, "restor": [15, 204, 226], "__": [15, 73, 92, 214, 234, 239], "press": [15, 45, 47, 49, 57, 66, 92, 96, 199, 208, 227, 232], "autocomplet": 15, "lose": [15, 201], "abil": [15, 21, 44, 101, 139, 209, 213, 230, 233, 285, 291], "f1": [15, 31, 56, 90, 92, 101, 115, 120, 129, 137, 146, 200, 205, 207, 210, 214, 216, 232], "f2": [15, 31, 65, 90, 101, 115, 120, 129, 137, 146, 182, 200, 207, 210, 214, 216, 232], "accuraci": [15, 19, 44, 65, 210, 287], "2000000000000002": 15, "py3k": 15, "20000000000000": 15, "sympyifi": 15, "worri": [15, 65, 286], "142857142857143": 15, "receiv": [15, 34, 48, 65, 66, 105, 120, 174, 209, 239], "fraction": [15, 65, 66, 69, 71, 81, 92, 101, 105, 121, 185, 204, 205, 207, 208, 211, 214, 216, 226, 227, 230, 232, 282], "interpret": [15, 22, 32, 34, 46, 56, 64, 65, 70, 71, 73, 78, 81, 92, 96, 98, 101, 105, 107, 119, 184, 200, 202, 209, 210, 214, 221, 227, 232, 233, 234, 239, 245, 246, 249, 255, 287], "000000000000": 15, "00": [15, 65, 105, 163, 173, 227, 252], "null": [15, 65, 101], "34": [15, 46, 57, 70, 78, 101, 105, 120, 161, 208, 213, 220, 226, 227], "3400000000000": 15, "250": [15, 105, 227], "143": [15, 158, 199], "decim": [15, 23, 46, 65, 68, 69, 105, 107, 113, 204, 210, 285], "142857": 15, "25000000000000000000": 15, "14285278320312500000": 15, "realiz": [15, 48, 50, 56, 67, 95, 105, 133, 201, 202, 207, 234], "pad": [15, 46, 66, 67, 68, 80, 105], "inexact": [15, 34, 65, 205], "low": [15, 21, 22, 46, 65, 66, 73, 105, 124, 204, 207, 212, 214, 226, 246, 247, 252], "higher": [15, 19, 25, 44, 46, 65, 67, 69, 73, 76, 101, 193, 199, 201, 204, 207, 210, 216, 217, 221, 223, 226, 230, 232, 235, 253, 281], "engin": [15, 111, 145, 146, 196, 230, 290], "increas": [15, 30, 44, 45, 57, 63, 64, 65, 68, 69, 73, 96, 105, 106, 119, 130, 163, 188, 189, 191, 197, 198, 204, 207, 209, 210, 216, 219, 223, 230, 234, 250, 252], "2000061035": 15, "highest": [15, 46, 59, 94, 119, 201, 210, 217, 227, 230], "hopefulli": [15, 20, 90], "unsimplifi": [15, 223], "12345678901234567890": 15, "big_trig_ident": 15, "ab": [15, 43, 46, 47, 64, 65, 66, 69, 70, 71, 73, 77, 88, 90, 95, 96, 101, 111, 117, 146, 179, 202, 205, 209, 210, 214, 227, 229, 232, 233, 234, 236, 240, 249, 252, 255, 265, 291], "1000": [15, 46, 49, 65, 66, 69, 98, 105, 146, 183, 184, 185, 186, 199, 213, 214, 223, 253], "gave": [15, 65, 252], "impress": 15, "91": [15, 47, 208, 213, 220, 234], "4e": [15, 232], "nearli": [15, 105, 223], "snippet": [15, 46], "expr_modifi": 15, "__main__": [15, 46, 287], "declar": [15, 21, 29, 46, 78, 90, 101, 107, 116, 129, 131, 146, 158, 203, 214, 221, 224, 229, 230, 231, 234, 247], "2x": [15, 28, 65, 73, 90, 107, 226, 227, 233, 234, 280, 283, 291], "syntaxerror": [15, 107], "asin": [15, 71, 73, 79, 211, 214, 224, 226, 230, 234, 291], "arcsin": [15, 71, 211, 214, 234], "arcco": [15, 71, 214], "expon": [15, 25, 34, 43, 46, 65, 66, 71, 72, 73, 90, 92, 98, 105, 113, 115, 185, 202, 203, 204, 210, 211, 214, 223, 226, 230, 233, 238, 249, 291], "half": [15, 23, 46, 65, 66, 70, 71, 73, 75, 81, 92, 94, 101, 105, 107, 108, 148, 151, 176, 199, 205, 207, 209, 210, 222, 223, 224, 226, 234, 245, 252], "denomin": [15, 65, 69, 73, 92, 105, 115, 121, 202, 204, 205, 207, 209, 210, 213, 214, 223, 224, 226, 227, 230, 232, 291], "wild": [15, 65, 226, 252], "sq": [15, 227], "is_pow": [15, 46, 65, 71], "is_rat": [15, 21, 209, 252], "bracket": [15, 23, 31, 33, 57, 65, 73, 177, 179, 189, 214], "notat": [15, 19, 25, 29, 32, 34, 53, 57, 58, 64, 65, 66, 70, 73, 90, 98, 101, 107, 115, 177, 188, 189, 194, 198, 201, 214, 221, 226, 233, 239, 240, 252, 266, 281], "curli": [15, 129, 214], "suppli": [15, 31, 32, 44, 45, 46, 56, 57, 65, 67, 75, 79, 101, 105, 120, 123, 124, 126, 131, 133, 136, 141, 142, 144, 152, 179, 193, 198, 200, 209, 211, 216, 223, 230, 246, 252, 253, 259, 261, 264], "powsimp": [15, 65, 71, 223, 226], "deep": [15, 23, 65, 71, 95, 96, 210, 221, 226, 234, 286], "measur": [15, 38, 71, 73, 81, 97, 119, 144, 159, 168, 173, 181, 184, 186, 188, 189, 193, 195, 198, 210, 222, 223, 226, 234, 258, 259, 262, 263, 265, 266, 268], "join": [15, 27, 57, 65, 66, 78, 96, 108, 109, 214, 226, 230, 232, 235, 252, 256], "autoexpand": [15, 226], "violat": [15, 129, 199, 211, 226], "motiv": [16, 23, 35, 210], "behind": [16, 35, 116, 129, 143, 183, 203, 223, 226, 230, 233, 276, 283], "decis": [16, 35, 65, 71, 92, 223, 232, 247], "opinion": [16, 35], "pitfal": [16, 23, 198, 204, 283, 288, 291], "glossari": 16, "arbitrarili": [17, 25, 44, 65, 78, 105, 207, 209, 221, 224, 230, 231, 234], "six": [17, 109, 214, 227, 233, 234], "bias": 17, "toward": [17, 46, 65, 73, 201, 221, 233], "unambigu": [17, 214, 230, 255], "univari": [17, 25, 34, 44, 64, 65, 71, 88, 92, 201, 202, 204, 205, 208, 209, 210, 211, 216, 227, 229, 232, 234], "linear": [17, 23, 26, 28, 30, 31, 34, 45, 46, 57, 64, 65, 66, 68, 69, 73, 78, 88, 90, 92, 94, 96, 98, 100, 108, 112, 115, 122, 123, 124, 126, 131, 133, 134, 139, 141, 145, 146, 151, 173, 176, 177, 188, 193, 200, 201, 205, 207, 209, 210, 212, 220, 222, 224, 227, 230, 231, 232, 233, 252, 274, 276, 292], "undetermin": [17, 65, 101, 210, 216, 230, 232], "nonlinear": [17, 26, 32, 34, 64, 146, 210, 230, 232, 233], "sol": [17, 31, 101, 227, 230, 231, 232], "insuffici": [17, 96], "elimin": [17, 19, 30, 46, 61, 65, 95, 97, 101, 119, 205, 212, 213, 215, 217, 226, 230, 232, 233, 240, 247, 287], "nsolv": [17, 25, 31, 33, 34, 146, 232], "z_eq": 17, "zsol": 17, "906425478894557": 17, "sol0": 17, "90642547889456": 17, "reduce_inequ": [17, 27, 229, 232], "classifi": [18, 101, 204, 230, 231, 233, 234], "former": [18, 46, 65, 70, 129, 207, 209, 210, 227, 252], "retriev": [18, 48, 63, 96, 101, 210, 226, 240], "catch": [18, 65, 230, 245, 287], "naiv": [18, 56, 62, 65, 90, 96, 101, 184, 224, 232, 233, 240], "theori": [18, 23, 47, 48, 54, 55, 56, 57, 63, 65, 66, 70, 73, 94, 102, 124, 129, 143, 145, 158, 176, 179, 189, 193, 203, 207, 208, 209, 213, 227, 249, 259, 277, 285], "is_subset": [18, 222], "odd": [18, 21, 28, 39, 41, 42, 43, 53, 57, 65, 66, 70, 71, 73, 95, 104, 105, 116, 199, 209, 210, 214, 232], "appliedpred": [18, 39, 40, 41], "analysi": [19, 46, 47, 56, 65, 66, 71, 112, 131, 143, 144, 147, 201, 210, 224, 227, 234], "vari": [19, 44, 46, 65, 79, 81, 108, 113, 119, 124, 144, 177, 198, 221, 232, 252, 266], "hope": [19, 56, 119, 201], "envis": 19, "small": [19, 28, 46, 47, 48, 56, 57, 65, 69, 70, 92, 95, 101, 105, 115, 133, 137, 146, 176, 199, 200, 205, 207, 208, 209, 226, 227, 232, 252, 280, 283, 285], "x_": [19, 28, 32, 46, 55, 65, 66, 70, 107, 205, 207, 210, 216, 227, 230, 235], "taylor": [19, 65, 71, 129, 143, 146, 205, 207, 210, 211, 221, 230], "df": [19, 67, 230], "c_": [19, 26, 32, 66, 88, 90, 198, 202, 230], "grid": [19, 44, 45, 113, 200], "f_": [19, 65, 70, 73, 92, 141, 142, 143, 207, 213, 214, 224, 230], "constraint": [19, 27, 101, 109, 115, 123, 124, 125, 128, 129, 131, 132, 133, 135, 139, 141, 142, 143, 146, 211, 276], "formul": [19, 30, 123, 132, 133, 139, 141, 142, 179, 198], "assess": 19, "brute": [19, 223, 227], "frequent": [19, 56, 209, 221, 233], "treatment": [19, 90, 210], "shall": [19, 56, 90, 129, 146, 221, 224, 286], "truncat": [19, 57, 65, 101, 105, 109, 184, 200, 211, 213, 216, 217], "approx": [19, 26, 31, 65, 92], "lowest": [19, 46, 56, 61, 105, 201, 216, 233], "2h": 19, "print_funct": 19, "x0": [19, 32, 44, 46, 55, 65, 73, 84, 86, 88, 89, 105, 151, 204, 215, 216, 221, 226, 230, 232, 234, 252, 281], "x_0": [19, 55, 56, 66, 87, 88, 89, 207, 216, 227, 230, 234, 281], "fip1": 19, "fip2": 19, "c_0": [19, 66, 88], "c_1": [19, 32, 66, 88, 90, 221, 224, 230], "c_2": [19, 32, 48, 90, 221, 230], "2f": [19, 292], "sum": [19, 21, 28, 46, 54, 57, 64, 65, 68, 70, 73, 78, 80, 88, 90, 92, 94, 95, 96, 98, 101, 105, 111, 126, 141, 158, 162, 165, 173, 176, 178, 179, 199, 201, 202, 204, 205, 209, 210, 211, 214, 216, 217, 219, 221, 223, 224, 226, 227, 230, 232, 233, 234, 235, 236, 238, 240, 249, 252, 291], "c_i": [19, 90, 221, 224, 230], "nth": [19, 65, 70, 73, 94, 105, 205, 210, 211, 220, 226, 230, 234], "degre": [19, 25, 47, 48, 56, 63, 64, 70, 73, 81, 92, 96, 101, 108, 111, 113, 115, 123, 124, 129, 130, 133, 139, 147, 151, 198, 201, 202, 205, 207, 209, 210, 213, 217, 220, 223, 224, 226, 227, 230, 232, 234, 259, 276], "x_i": [19, 23, 55, 73, 92, 101, 202, 205, 207, 210, 211, 214, 233], "m11": [19, 234], "m12": [19, 234], "m13": 19, "m21": [19, 234], "m22": [19, 234], "m23": 19, "m31": 19, "m32": 19, "m33": [19, 105], "3x3": [19, 30, 80, 101, 264], "invert": [19, 30, 34, 42, 65, 66, 96, 98, 101, 115, 133, 181, 202, 204, 205, 209, 210, 230, 232, 233, 240, 287], "inv": [19, 30, 57, 97, 101, 123, 124, 131, 136, 137, 146, 168, 203, 230], "fim1": 19, "eight": [19, 34, 214], "dfdxcheck": 19, "c3": [19, 32, 48, 68, 94, 96, 98, 105, 230, 234, 265, 292], "c5": [19, 230], "c7": [19, 56], "5040": [19, 70, 87, 210, 211], "tediou": [19, 92], "certainli": [19, 77, 107, 249], "devis": 19, "xn": [19, 23, 205], "x_n": [19, 23, 47, 55, 66, 87, 101, 202, 205, 207, 210, 227, 233], "fn": [19, 32, 92, 101, 201, 210], "fnm1": 19, "fnm2": 19, "dth": 19, "discrit": 19, "bengt": [19, 44], "fornberg": [19, 44], "weight": [19, 65, 73, 80, 82, 92, 94, 101, 163, 226, 281], "gap": [20, 56, 105, 129, 211], "matur": [20, 21, 232, 233], "finit": [20, 21, 29, 42, 46, 51, 52, 53, 56, 64, 65, 66, 68, 69, 92, 94, 95, 165, 189, 199, 202, 205, 208, 210, 211, 214, 216, 217, 220, 222, 227, 229, 230, 233, 252, 259, 261, 271, 282, 285, 291], "obviou": [21, 22, 23, 30, 48, 56, 64, 201, 204, 213, 227, 285], "refus": [21, 291], "roughli": [21, 65, 66, 106, 130, 230, 253], "possibli": [21, 46, 57, 63, 65, 90, 92, 105, 182, 207, 221, 222, 232, 247, 252, 281, 287], "infinit": [21, 23, 27, 28, 42, 64, 65, 66, 69, 70, 71, 78, 79, 92, 101, 105, 115, 135, 165, 184, 201, 209, 214, 215, 216, 219, 220, 221, 222, 226, 227, 229, 232, 239, 252, 291, 292], "is_neg": [21, 23, 205], "unknow": 21, "resolv": [21, 22, 25, 27, 28, 29, 30, 31, 32, 33, 65, 92, 223, 226, 232], "undecid": [21, 23, 29, 101, 204, 233, 287], "conclud": [21, 73, 88, 131, 195, 221, 232, 268], "mix": [21, 37, 64, 71, 96, 101, 107, 188, 204, 205, 210, 214, 233, 236, 238, 240, 253], "slow": [21, 23, 25, 30, 61, 65, 69, 92, 106, 119, 131, 151, 188, 198, 204, 205, 214, 215, 216, 217, 226, 230, 232, 233, 245, 246, 291], "indetermin": [21, 22, 65, 101, 207, 219, 232], "contradict": 21, "infer": [21, 40, 41, 57, 65, 92, 204, 213, 214, 219, 224, 230, 246], "presum": [21, 90, 204, 224, 247], "singletonregistri": [21, 65], "x1": [21, 23, 31, 32, 55, 65, 70, 146, 151, 204, 205, 215, 216, 226, 230, 232, 234, 252], "x2": [21, 31, 55, 65, 70, 146, 151, 204, 216, 230, 232, 234], "posifi": [21, 226], "_x": [21, 23, 101, 140, 188, 194, 197, 198, 205, 211, 226, 230, 246], "rep": [21, 56, 61, 65, 163, 201, 203, 204, 205, 208, 209, 210, 223, 226, 255], "among": [21, 45, 46, 47, 49, 56, 57, 66, 93, 106, 210, 230, 235, 238, 240, 263], "behaviour": [21, 90, 95, 120, 207, 211, 217, 220], "symbolc": 21, "aris": [21, 22, 65, 70, 90, 92, 176, 198, 204, 209], "implicit": [21, 32, 46, 63, 65, 107, 124, 128, 147, 200, 230, 232, 236, 239, 246, 247, 259, 262, 269, 283], "tailor": 21, "assumptions0": [21, 65], "extended_neg": [21, 65], "extended_nonneg": [21, 65], "extended_nonposit": [21, 65], "extended_nonzero": [21, 65, 214], "extended_posit": [21, 65], "extended_r": [21, 42, 65, 214, 229, 233], "hermitian": [21, 30, 42, 65, 96, 97, 101, 162, 168, 179, 214], "irrat": [21, 25, 42, 44, 65, 105, 204, 210, 214, 222, 285], "noninteg": [21, 42, 65, 204, 214], "nonposit": [21, 42, 65, 70, 73, 146], "nonzero": [21, 23, 42, 43, 64, 65, 80, 101, 117, 202, 203, 204, 205, 214, 217, 233], "antihermitian": [21, 42, 65], "mathbb": [21, 23, 28, 42, 47, 48, 56, 64, 65, 66, 71, 73, 90, 96, 101, 143, 199, 201, 202, 204, 205, 207, 209, 210, 213, 221, 222, 224, 227, 233, 234, 291], "ii": [21, 71, 90, 92, 105, 210, 214, 222, 230, 233, 236], "cup": [21, 210, 222, 233], "pm": [21, 25, 26, 28, 38, 64, 90, 92, 202, 213, 221, 227, 230], "yi": 21, "composit": [21, 42, 45, 54, 56, 57, 65, 66, 83, 85, 92, 105, 108, 205, 207, 210, 213, 226, 233, 248], "2k": [21, 65, 70, 90, 105, 227], "le": [21, 47, 61, 65, 73, 90, 96, 105, 138, 207, 224, 234], "commutative_properti": [21, 65], "skew": [21, 88, 101, 105, 234], "hermitian_matrix": 21, "complex_numb": [21, 42, 65], "algebraic_numb": [21, 42, 65], "transcendental_numb": [21, 65], "extended_real_number_lin": 21, "real_numb": [21, 42], "imaginary_numb": [21, 42, 65], "rational_numb": [21, 42], "irrational_numb": [21, 42, 65], "parity_": [21, 65], "28mathemat": [21, 57, 65, 101, 222], "prime_numb": [21, 65, 105], "composite_numb": [21, 65], "positive_real_numb": 21, "negative_numb": [21, 65], "inconsist": [21, 23, 39, 41, 64, 184, 189, 193, 197, 226, 230, 233], "inconsistentassumpt": 21, "deal": [21, 46, 64, 65, 69, 77, 85, 90, 92, 112, 119, 124, 125, 129, 195, 197, 198, 202, 207, 210, 227, 232, 243, 253, 255, 263, 268, 283, 285, 291], "is_zero_matrix": [21, 96, 203], "generalis": [21, 70, 73, 90, 201], "gaussian": [21, 73, 92, 101, 105, 149, 183, 207, 210, 227, 232, 234, 276, 287], "notion": [21, 45, 184, 187, 201, 233, 263, 268], "chain": [21, 23, 46, 56, 61, 65, 73, 82, 106, 197, 209, 234], "superset": [21, 44, 54, 60, 68, 146, 204, 222, 232], "vanilla": 21, "attach": [21, 57, 59, 90, 106, 108, 123, 124, 140, 198, 246, 248, 253], "is_commut": [21, 92, 168, 177, 252], "is_complex": [21, 65], "is_finit": [21, 65], "permit": [21, 57, 67, 71, 95, 105, 200], "formal": [21, 28, 45, 64, 65, 73, 90, 95, 148, 184, 204, 207, 218, 221, 271], "n1": [21, 46, 56, 65, 66, 129, 146, 148, 152, 188, 227, 234, 259], "n2": [21, 46, 56, 65, 66, 146, 148, 152, 227, 234], "misunderstand": 21, "is_nonneg": [21, 23, 205], "meaning": [21, 39, 41, 45, 66], "neither": [21, 22, 42, 65, 153, 174, 200, 210, 221, 222, 223, 230, 240, 253, 259, 268, 291], "alon": [21, 66, 93, 207, 230, 232, 239, 252, 285, 286], "meet": [21, 66, 221], "criteria": [21, 65, 286], "noncommut": [21, 65, 88, 286], "finiteset": [21, 29, 44, 45, 222, 233, 234, 292], "s1": [21, 48, 56, 64, 78, 81, 88, 115, 190, 201, 210, 217, 227, 252, 262], "s2": [21, 48, 56, 57, 64, 78, 81, 115, 190, 201, 210, 217, 221, 227, 252, 262], "bool": [21, 38, 44, 46, 48, 61, 63, 65, 66, 68, 71, 92, 93, 95, 96, 98, 101, 105, 107, 124, 125, 163, 191, 194, 200, 209, 210, 212, 214, 215, 216, 221, 222, 226, 229, 234, 246, 247, 252, 253, 259, 262, 283], "plai": [21, 64, 131, 141, 227, 283, 285, 286], "role": [21, 71, 212], "is_finite_set": 21, "zero_matrix": 21, "setsymbol": 21, "is_compar": [21, 65], "capitalis": 21, "4142135623731": [21, 31, 214, 232], "predict": [21, 179, 226, 252], "expreal": 21, "fuzzy_and": [21, 22, 23], "fuzzy_or": [21, 22], "is_extended_nonneg": 21, "classmethod": [21, 23, 38, 40, 41, 46, 49, 54, 56, 57, 59, 60, 65, 71, 72, 73, 80, 96, 101, 115, 126, 165, 176, 177, 179, 203, 205, 209, 210, 214, 222, 240, 245], "is_extended_r": 21, "elif": [21, 22, 23, 71], "is_infinit": 21, "is_extended_neg": 21, "is_extended_posit": [21, 22], "_eval_is_finit": 21, "is_extended_nonposit": 21, "_eval_is_algebra": 21, "is_nonzero": [21, 80], "_eval_is_integ": 21, "_eval_is_zero": [21, 23], "pick": [21, 66, 70, 143, 173, 175, 291], "__new__": [21, 23, 46, 56, 65, 286], "importantli": [21, 23, 211, 249], "reject": [21, 22, 105, 227, 255], "_eval_is_": 21, "is_algebra": [21, 65, 205], "interfer": [21, 214], "determinist": [21, 56, 92, 105, 207, 208], "reach": [21, 105, 115, 209, 210, 230], "claus": [21, 95], "flow": [21, 209], "inner": [21, 32, 64, 90, 101, 162, 165, 166, 171, 173, 174, 177, 179, 189, 193, 203, 209, 216, 259, 276], "optimis": [21, 230], "briefli": [21, 202, 207], "default_assumpt": 21, "_ask": 21, "_eval_i": 21, "enumer": [21, 35, 49, 54, 57, 60, 68, 72, 90, 95, 105, 209, 210, 224, 249, 252, 271], "randomis": [21, 242, 278], "unresolv": 21, "factrul": 21, "_assume_rul": 21, "preprocess": [21, 92, 212], "defined_fact": 21, "full_impl": 21, "defaultdict": [21, 65, 252], "precomput": [21, 70, 105, 253], "static": [21, 38, 46, 56, 57, 59, 65, 71, 78, 79, 80, 81, 98, 109, 131, 139, 200, 214, 220, 222, 234, 246], "knowabl": 21, "stdfactkb": 21, "_eval_is_r": [21, 23, 210], "_assumpt": [21, 65], "amongst": [21, 232], "indirectli": 21, "manifest": [21, 202], "jointli": 21, "fundament": [21, 23, 44, 47, 55, 83, 90, 92, 101, 183, 184, 204, 209, 227, 230, 234, 287], "theoret": [21, 45, 47, 56, 66, 70, 208, 209, 224, 234, 283], "isposit": 22, "xpo": 22, "xneg": 22, "strictgreaterthan": [22, 65, 214], "analogu": [22, 42, 64, 79, 204, 205], "piecewis": [22, 23, 46, 64, 70, 73, 92, 95, 108, 177, 214, 216, 217, 232, 233, 234, 253, 281], "p2": [22, 56, 57, 64, 75, 77, 78, 79, 80, 81, 108, 115, 120, 123, 146, 193, 200, 204, 205, 207, 211, 223, 234], "nonetyp": [22, 46], "quirk": 22, "both_posit": 22, "falsei": 22, "both_positive_bett": 22, "negat": [22, 23, 42, 65, 71, 95, 115, 189, 203, 205, 207, 210], "fuzzy_not": [22, 23], "both_positive_best": 22, "silent": [22, 69, 105, 246], "bitwis": [22, 68, 95], "footnot": [22, 184, 286, 287, 290], "si": [23, 73, 89, 90, 152, 181, 182, 183, 184, 185, 186, 214], "dig": [23, 46, 286], "handler": [23, 39, 40, 41, 42, 43, 65, 72, 101], "spectrum": 23, "np": [23, 32, 70, 88, 105, 129, 246, 253], "arang": [23, 246, 280], "arrai": [23, 26, 30, 31, 32, 46, 56, 57, 61, 62, 66, 73, 92, 96, 98, 101, 105, 106, 113, 146, 176, 200, 203, 205, 210, 214, 233, 234, 237, 239, 240, 241, 246, 247, 249, 253, 274, 287], "cosin": [23, 65, 71, 73, 80, 92, 120, 123, 189, 198, 210, 211, 217, 223, 234, 259, 291], "todai": [23, 201], "operatornam": [23, 38, 70, 71, 73, 90, 92, 199, 202, 210, 214, 217, 222, 224, 232], "modern": [23, 46, 201, 208, 214], "recal": [23, 65, 101, 207, 209, 224, 283, 285, 286, 292], "antipattern": [23, 284], "stai": [23, 209], "trig": [23, 65, 92, 210, 214, 223, 226, 291], "wouldn": 23, "cheap": [23, 65, 105], "as_two_term": [23, 65], "hadn": 23, "wors": [23, 95, 226], "expand_trig": [23, 65, 280], "mid": [23, 47, 66, 69, 109, 222, 227], "troubl": [23, 73], "bigger": [23, 46, 65, 70, 101, 224, 230, 291], "deduc": [23, 46, 90, 95, 224, 285], "disallow": [23, 65, 210, 215, 226, 248], "great": [23, 148, 211, 214, 227, 253], "simplest": [23, 32, 45, 95, 101, 105, 106, 199, 200, 211, 215, 223, 226, 230, 281, 291], "\u03c0": [23, 69, 151, 214, 233, 281, 285, 291, 292], "as_independ": [23, 65, 233], "coeff": [23, 65, 67, 95, 146, 205, 209, 210, 220, 226, 230, 232, 240, 291], "apart": [23, 38, 56, 61, 65, 69, 71, 92, 195, 202, 205, 207, 210, 213, 216, 227, 233, 240, 264, 266, 286], "is_even": [23, 53, 56, 57], "nonreal": [23, 31, 232], "cosh": [23, 65, 71, 73, 84, 90, 211, 214, 215, 224, 226, 232, 287, 291], "5919532755215": 23, "_eval_is_nonneg": 23, "exercis": [23, 56, 249, 284, 291], "_eval_is_posit": 23, "as_add": [23, 65], "pi_": 23, "fuzzy_": 23, "deduct": [23, 46], "subtl": [23, 223], "nontrivi": [23, 56, 65, 105], "_eval_evalf": [23, 210], "prec": [23, 31, 65, 75, 81, 105, 113, 199, 205, 210, 211, 226, 232], "dp": [23, 46, 65, 68, 73, 105, 204, 205, 232, 248], "53": [23, 66, 68, 101, 148, 202, 204, 205], "459697694131860": 23, "hook": [23, 106, 214], "_eval_rewrit": [23, 65], "rewritten": [23, 65, 70, 71, 73, 92, 129, 176, 183, 221, 226, 230, 232, 291], "caller": 23, "ve": [23, 131], "nonintegr": 23, "iff": [23, 42, 57, 66, 95, 101, 198, 201, 209, 224, 227, 245], "isint": 23, "xy": [23, 44, 45, 79, 101, 126, 189, 198, 200, 201, 207, 214, 226, 233, 269, 286, 291], "happi": 23, "demand": [23, 37], "_eval_expand_": 23, "expand_": 23, "predefin": [23, 67, 146, 204, 214, 215, 226, 233, 240, 259, 264], "expand_log": [23, 46, 65, 226], "_eval_expand_trig": 23, "sophist": [23, 106, 232], "th": [23, 38, 47, 56, 57, 63, 66, 67, 69, 70, 71, 73, 94, 95, 101, 105, 124, 205, 207, 209, 210, 216, 219, 224, 227, 230, 232, 234, 235, 240], "x_1": [23, 47, 55, 56, 66, 70, 87, 101, 174, 202, 205, 207, 210, 216, 227, 233], "ldot": [23, 28, 47, 55, 56, 64, 65, 66, 70, 73, 90, 105, 109, 184, 199, 201, 202, 205, 207, 209, 214, 217, 221, 224, 227, 232, 235, 291], "x_k": [23, 66, 207], "dy": [23, 46, 67, 82, 101, 108, 118, 146, 210, 214, 227, 230, 231, 281], "dz": [23, 108, 118, 224], "varion": 23, "middl": [23, 73, 81, 90, 101, 109, 159, 200, 224, 291], "iverson": 23, "printmethod": [23, 214], "latexprint": 23, "_latex": [23, 214], "_print": [23, 214], "_m": [23, 73], "_n": [23, 66, 70, 73, 92, 210, 224, 233], "arcversin": 23, "aversin": 23, "im": [23, 43, 65, 71, 90, 99, 201, 214, 215, 222, 230, 287], "sinh": [23, 44, 65, 69, 71, 73, 84, 90, 211, 214, 215, 224, 291], "expand_complex": [23, 65], "analog": [23, 25, 30, 58, 64, 66, 70, 144, 197, 198, 201, 202, 203, 207, 219, 235, 252], "vers": 23, "geometr": [23, 67, 74, 75, 76, 77, 78, 79, 80, 81, 82, 101, 148, 198, 201, 208, 234, 287], "angl": [23, 38, 71, 73, 74, 75, 76, 78, 79, 80, 81, 111, 117, 123, 128, 129, 131, 132, 133, 134, 140, 143, 148, 151, 152, 153, 176, 184, 189, 197, 198, 199, 214, 223, 233, 259, 261, 264, 291], "horizont": [23, 34, 45, 75, 78, 80, 96, 111, 151, 200, 203, 214], "distanc": [23, 45, 49, 57, 75, 78, 79, 80, 81, 108, 109, 118, 119, 123, 133, 134, 148, 152, 182, 193, 195, 268], "rightmost": [23, 179], "scientificamerican": 23, "uniti": [23, 71, 73, 90, 174, 209], "secret": [23, 66], "teacher": 23, "taught": [23, 92], "nr": 23, "sake": [23, 70, 227], "simplic": [23, 224, 230], "divisor": [23, 42, 56, 65, 66, 101, 105, 201, 202, 204, 205, 207, 208, 209, 210, 213], "hardwar": [23, 46], "regard": [23, 47, 66, 73, 93, 147, 179, 201, 202, 216, 232, 233], "c99codeprint": [23, 46, 214], "cxx11codeprint": [23, 214], "cfunction": 23, "e2": [23, 44, 65, 68, 75, 82, 92, 101, 105, 113, 129, 204, 209, 221, 230, 233, 234, 252], "93accumulate_oper": 23, "fused_multipli": 23, "93add": 23, "ccode": [23, 46, 214, 239, 247], "cxxcode": [23, 46, 214], "_ccode": [23, 214], "_y": [23, 27, 140, 188, 194, 197, 198], "_z": [23, 92, 140, 188, 197, 198, 234], "_cxxcode": [23, 214], "std": [23, 214, 234], "28318530717959": 23, "trigonometricfunct": 23, "inversetrigonometricfunct": 23, "reciprocaltrigonometricfunct": 23, "bypass": [23, 230], "fragil": 23, "prone": [23, 28, 46, 65], "task": [24, 26, 35, 71, 139, 140, 146, 204, 209, 281, 288], "deeper": [24, 238, 286], "explor": [24, 141, 142, 200, 209, 249, 291], "ax": [25, 26, 28, 30, 38, 66, 69, 75, 78, 90, 97, 101, 108, 113, 123, 124, 151, 176, 189, 198, 199, 200, 203, 211, 227, 230, 233, 235, 236, 239, 259, 261, 263, 266, 268, 291], "bx": [25, 26, 90, 234, 240], "yield": [25, 27, 28, 29, 30, 32, 33, 44, 46, 56, 65, 66, 70, 73, 89, 90, 105, 108, 115, 121, 173, 199, 202, 207, 209, 210, 215, 216, 221, 222, 223, 226, 227, 232, 249, 252, 287], "4ac": [25, 26, 227], "2a": [25, 26, 234], "quadrat": [25, 28, 65, 66, 92, 105, 201, 205, 209, 210, 227, 232, 234], "five": [25, 28, 45, 54, 90, 111, 214, 227], "rootof": [25, 71, 210], "ill": [25, 182], "spuriou": [25, 207, 232], "interv": [25, 27, 29, 32, 42, 44, 56, 65, 69, 71, 73, 74, 75, 78, 81, 90, 92, 95, 105, 165, 174, 203, 205, 207, 209, 210, 217, 220, 222, 229, 233, 234, 292], "irreduc": [25, 202, 205, 207, 209, 210, 213, 234, 240, 291], "reveal": [25, 28, 30, 46, 105, 233, 286], "lie": [25, 57, 67, 79, 80, 81, 210, 234, 270, 277], "cubic": [25, 73, 201, 210, 227, 232], "quartic": [25, 75, 210, 232], "fourth": [25, 65, 66, 202, 230, 281], "687": 25, "144": [25, 34, 70, 92, 199], "emphas": [25, 64], "quintic": [25, 210, 232], "fifth": 25, "techniqu": [25, 29, 30, 32, 47, 60, 90, 92, 214, 216, 226, 230, 233, 287], "abel": [25, 34, 101], "ruffini": [25, 34, 101], "theorem": [25, 34, 53, 66, 70, 73, 75, 81, 92, 96, 101, 105, 118, 119, 131, 179, 188, 197, 201, 204, 207, 221, 224, 227, 233], "expression_expand": 25, "symbolic_expand": 25, "cube": [25, 44, 46, 49, 56, 58, 71, 92, 207, 208, 227, 233, 269], "nois": 25, "neglig": 25, "compon": [25, 45, 46, 61, 65, 67, 80, 92, 98, 101, 116, 123, 126, 139, 140, 144, 151, 176, 181, 188, 189, 195, 196, 197, 198, 199, 200, 201, 202, 203, 210, 212, 234, 236, 239, 240, 249, 252, 259, 262, 265, 266], "18482169793536e": 25, "55872552179222e": 25, "contrarili": 25, "rq0": 25, "rq1": 25, "rq2": 25, "rq3": 25, "237": [25, 208], "349745826211722": 25, "438990337475312": 25, "wilkinson": [25, 96], "expression_complex": 25, "symbolic_complex": 25, "expression_complex_poli": 25, "travers": [25, 81, 105, 121, 210, 223, 239, 249, 286], "loop": [25, 28, 32, 45, 46, 105, 115, 132, 189, 200, 211, 214, 230, 249, 252, 286], "my_real_root": 25, "my_root": 25, "324": [25, 105, 208], "fifth_ord": 25, "16730397826142": 25, "181232444469875": 25, "08395410131771": 25, "764884433600585": 25, "352471546031726": 25, "polyerror": [25, 207, 210], "unsolvablefactorerror": [25, 210, 232], "complexrootof": [25, 65, 101, 205, 210, 230], "fifth_order_solv": 25, "167303978": 25, "1812324445": 25, "083954101": 25, "7648844336": 25, "352471546": 25, "sole": 25, "croot": 25, "r0": [25, 210], "r1": [25, 38, 75, 78, 94, 108, 109, 152, 189, 195, 210, 259], "r2": [25, 38, 67, 78, 94, 96, 108, 109, 152, 189, 210, 214, 226, 259], "r3": [25, 38, 94, 108, 109, 226], "r4": [25, 94, 108], "opposit": [25, 61, 81, 95, 96, 120, 202, 205, 222, 226, 233, 241, 252, 259, 261, 291], "robustli": 25, "diophantin": [26, 27, 105, 207, 228, 271], "guidanc": 26, "2z": [26, 33, 73, 233, 234], "4z": [26, 33, 233], "6z": [26, 33], "739085133215161": [26, 31, 33, 34, 232], "9y": [26, 32], "3x": [26, 32, 65, 107, 207, 233, 283], "cc": [26, 30, 66, 81, 199, 202, 204, 210, 287], "2e": [26, 30, 65], "ce": [26, 30], "2pq": [26, 28], "linprog": 27, "as_set": [27, 95], "accomplish": [27, 92, 143, 146, 266], "rel_op": [27, 65], "relations_sort": 27, "append": [27, 32, 56, 65, 66, 101, 109, 146, 174, 200, 205, 214, 232, 235, 247, 248, 252, 291], "x_y_reduc": 27, "insight": [27, 284], "x_reduc": 27, "y_reduc": 27, "solve_univariate_inequ": [27, 229, 233], "calculu": [27, 29, 65, 70, 92, 101, 146, 195, 223, 234, 265, 266, 267, 270, 271, 282, 284, 289], "incompat": 27, "reflect": [27, 34, 49, 53, 57, 65, 75, 76, 81, 94, 111, 148, 151, 152, 189], "parameter": [28, 67, 74, 75, 78, 81, 227], "pythagorean": [28, 227], "sage": [28, 65, 105, 199, 285], "ellipticcurv": 28, "nest": [28, 32, 65, 67, 71, 73, 92, 96, 115, 202, 204, 207, 214, 224, 226, 229, 233, 234, 235, 236, 238, 241, 252, 253, 286], "ineffici": [28, 65, 101, 204], "my_sym": 28, "pythag_eq": 28, "sym": [28, 44, 55, 56, 61, 65, 70, 189, 214, 217, 222, 226, 227, 232, 234, 240, 252, 291], "pythag": 28, "a_1x_1": [28, 227], "a_2x_2": [28, 227], "a_nx_n": [28, 227], "bxy": [28, 227], "cy": [28, 227], "ei": [28, 32, 73, 90, 209, 214, 224, 227, 230, 240], "homogen": [28, 38, 88, 92, 101, 115, 205, 207, 210, 227, 230, 231, 234], "ternari": [28, 46, 65, 214, 227], "cz": [28, 68, 115, 227], "dxy": [28, 227], "eyz": [28, 227], "fzx": [28, 227], "a_": [28, 61, 65, 66, 73, 90, 94, 96, 98, 115, 116, 188, 216, 224, 227, 230, 232, 234, 235, 236], "pythogorean": 28, "subscript": [28, 30, 57, 205, 214, 224, 227, 252], "solution_dict": [28, 32], "zip": [28, 44, 55, 66, 95, 105, 210, 220, 227, 230, 249, 252], "elegantli": 28, "solution_list": [28, 29], "solution_first": 28, "solution_p4q3": 28, "p_val": 28, "q_val": 28, "pythag_v": 28, "union": [28, 37, 42, 44, 46, 54, 56, 63, 95, 201, 209, 214, 220, 221, 222, 229, 233, 252], "4y": [28, 207, 233, 280], "rearrang": [29, 116, 124, 141, 142, 163, 230], "eqn": [29, 32, 44, 233], "solutions_set": 29, "solution_set": 29, "256": [29, 46, 56, 105, 210, 214], "solution_outside_2_3": 29, "critic": [29, 44, 152, 197, 209, 233], "minima": [29, 233], "critical_point": 29, "point1": [29, 190, 262], "point2": [29, 190, 262], "curvatur": [29, 148, 152], "membership": [29, 63, 209, 222], "solution_set_arg": 29, "linalg": [30, 31, 46], "lu_solv": [30, 101, 203], "linear_eq_to_matrix": [30, 230, 233], "matrixbas": [30, 96, 97, 98, 101, 124, 203], "column": [30, 38, 42, 45, 46, 47, 93, 95, 96, 98, 101, 102, 104, 115, 124, 128, 131, 174, 181, 188, 189, 194, 199, 203, 209, 214, 230, 233, 239, 259], "row": [30, 42, 45, 46, 47, 54, 57, 65, 70, 96, 97, 98, 101, 102, 104, 105, 115, 128, 129, 131, 146, 147, 174, 188, 189, 198, 203, 209, 214, 224, 233, 234, 239, 253, 259, 261], "shapeerror": [30, 96, 98, 101], "penros": [30, 98, 101], "pseudoinvers": [30, 101], "jordan": [30, 90, 96, 101, 212, 230, 232, 233], "lu": [30, 98, 101, 124, 203, 208], "lusolv": [30, 97, 101, 123, 124, 125, 143, 147, 232, 287], "repeatedli": [30, 105, 116, 246], "b2": [30, 73, 105, 108, 109, 120, 129, 146, 189, 203, 205, 214, 224, 227, 230, 265], "solution2": 30, "prioriti": [30, 46, 88, 119, 129, 198, 253], "computation": [30, 61, 71, 123, 124, 125], "tractabl": [30, 233], "rapidli": [30, 65, 69, 90, 221], "dimens": [30, 46, 49, 66, 67, 73, 74, 76, 78, 79, 80, 82, 94, 96, 98, 101, 104, 108, 116, 133, 153, 163, 165, 168, 173, 182, 183, 186, 187, 189, 200, 203, 214, 227, 230, 232, 234, 235, 236, 239, 240, 247, 259, 262, 264, 276], "dimension": [30, 44, 46, 49, 67, 77, 78, 79, 80, 81, 98, 101, 109, 116, 146, 153, 155, 165, 181, 195, 196, 200, 201, 207, 209, 210, 213, 214, 232, 233, 235, 236, 240, 246, 268, 292], "4x4": [30, 38, 80, 104, 151, 234], "a\u2080\u2080": 30, "a\u2080\u2081": 30, "a\u2080\u2082": 30, "a\u2080\u2083": 30, "a\u2081\u2080": 30, "a\u2081\u2081": 30, "a\u2081\u2082": 30, "a\u2081\u2083": 30, "a\u2082\u2080": 30, "a\u2082\u2081": 30, "a\u2082\u2082": 30, "a\u2082\u2083": 30, "a\u2083\u2080": 30, "a\u2083\u2081": 30, "a\u2083\u2082": 30, "a\u2083\u2083": 30, "det": [30, 38, 101, 102, 146, 198, 203, 287], "a\u2081": [30, 109, 291], "\u2083": [30, 214], "slowest": [30, 92, 106], "symmetr": [30, 42, 43, 47, 48, 53, 56, 57, 61, 81, 96, 97, 98, 101, 105, 144, 199, 205, 207, 210, 213, 222, 224, 240, 252], "triangular": [30, 42, 48, 96, 97, 101, 203, 209, 232, 234, 269], "prove": [30, 65, 90, 92, 101, 201, 221, 230, 265], "noninvertiblematrixerror": [30, 98, 287], "overli": 31, "float64": [31, 46, 106, 234], "fsolv": 31, "findroot": [31, 73, 232], "overdetermin": [31, 232, 233], "toler": [31, 46, 65, 69, 205, 226, 232], "18466446988997098217": 31, "16840434497100886801e": 31, "tweak": [31, 214, 232], "closest": [31, 65, 78], "00000000000000": [31, 65, 69, 180, 214, 234], "bisect": [31, 105, 210, 232], "multidimension": [31, 208, 245], "19287309935246": [31, 232], "27844411169911": [31, 232], "192873099352460791205211": 31, "278444111699106966687122": 31, "root_scalar": 31, "lam_f": [31, 253], "3416277185114782": 31, "x_valu": 31, "12757857962640e": 31, "73908513321516": 31, "4877893607115270300540019e": 31, "6543612251060553497428174e": 31, "solve_ivp": 32, "c2": [32, 48, 66, 75, 82, 96, 98, 123, 165, 179, 222, 230, 234, 262, 265, 292], "ypp": 32, "yp": 32, "classify_od": [32, 230], "choic": [32, 46, 57, 70, 73, 90, 92, 106, 143, 175, 184, 188, 189, 197, 205, 207, 210, 214, 226, 230, 252, 285], "ic": [32, 105, 230], "y0": [32, 65, 84, 86, 88, 230], "y1": [32, 65, 146], "y_": [32, 46, 73, 90, 117, 199], "initialor": 32, "classic": [32, 44, 71, 73, 101, 165, 181, 189, 198, 201, 276], "eqs_one_soln_set": 32, "solutions_one_soln_set": 32, "solution_one_soln_set_dict": 32, "outer": [32, 92, 126, 144, 146, 162, 167, 168, 188, 189, 191, 193, 198, 216, 222, 238, 259, 262, 263], "fashion": [32, 46, 65, 71, 98, 131, 141, 142, 144, 198, 201, 252], "solutions_list": 32, "leverag": [32, 46, 106, 214], "chemic": 32, "kinet": [32, 120, 124, 126], "r_f": [32, 210], "k_f": 32, "y_0": [32, 227, 230], "y_1": [32, 47, 227, 234], "r_b": 32, "k_b": 32, "y_2": [32, 47, 227, 234], "dt": [32, 67, 73, 133, 146, 188, 189, 191, 197, 198, 210, 230, 291], "vec": [32, 96, 101, 123, 146, 189, 199, 207, 265, 266, 268], "bmatrix": [32, 38, 96, 98, 101, 133, 141, 142, 143, 188, 189, 198, 227], "pyplot": [32, 88, 146], "plt": [32, 88, 146], "y2": [32, 65, 146, 204], "kf": 32, "kb": 32, "rf": [32, 64, 70, 210], "rb": [32, 126, 144, 256], "speci": [32, 64, 65], "ydot": 32, "k_val": 32, "42": [32, 46, 54, 65, 68, 70, 78, 79, 81, 96, 97, 99, 101, 103, 105, 205, 207, 210, 227, 245], "t_eval": 32, "linspac": [32, 46, 88, 106, 129, 146], "50": [32, 47, 56, 68, 69, 70, 73, 81, 101, 105, 108, 109, 152, 183, 210, 214, 223, 232], "concentr": [32, 109, 234], "legend": [32, 146, 200, 217], "NO": [32, 179], "br": 32, "_2": [32, 101, 123, 188, 189, 199, 230], "nobr": 32, "shadow": [32, 58], "xlabel": [32, 200], "ylabel": [32, 200], "annot": [32, 105, 200, 214], "png": [32, 45, 93, 101, 108, 109, 113, 194, 200, 214, 217], "hire": [32, 101, 108, 109, 113, 200, 217], "_integr": [32, 230, 231], "separable_integr": [32, 230], "routin": [32, 46, 54, 64, 65, 66, 67, 90, 95, 96, 101, 105, 124, 151, 179, 203, 207, 210, 213, 214, 215, 226, 227, 230, 231, 232, 233, 246, 252, 266], "unintegr": 32, "all_integr": [32, 230, 231], "coupl": [32, 65, 101, 143, 158, 173, 176, 199], "educ": [32, 66, 101], "chaotic": 32, "lorenz": 32, "pendulum": [32, 123, 128, 130, 134, 139, 143, 147, 197, 276], "scienceworld": 32, "theta_1": 32, "theta_2": 32, "2g": 32, "theta1": [32, 133], "theta2": 32, "eq1": [32, 75, 230, 232, 233], "eq2": [32, 75, 95, 230, 233], "interrog": 33, "overconstrain": 33, "solvabl": [34, 56, 111, 123, 227, 230, 233, 292], "groebnerbasi": [34, 202, 210, 213], "lambert": [34, 71, 92, 211], "decompos": [34, 56, 57, 63, 65, 67, 71, 76, 101, 105, 163, 172, 173, 175, 205, 210, 213, 234], "lack": [34, 46, 67, 69, 126, 214, 281], "crootof": [34, 65, 210, 230, 232], "765": 34, "352": 34, "181": 34, "08": [34, 131], "56": [34, 68, 92, 105, 210], "432": [34, 78, 209], "434607": 34, "0509758447494279": 34, "313552108895239": 34, "14751999969868": 34, "estim": [34, 44, 64, 65, 69, 90, 281], "preserv": [34, 45, 46, 56, 65, 101, 177, 205, 210, 215, 216, 226], "77245385090552": 34, "4142135623730951": 34, "varieti": [34, 46, 47, 57, 65, 106, 109, 144, 201, 208, 210, 234, 252], "risk": 34, "parse_latex": [34, 107], "central": [35, 56, 62, 73, 75, 81, 120, 126, 144, 200, 209, 210, 227, 234], "pypi": 36, "continuum": [36, 276], "qtconsol": [36, 290], "nicer": [36, 65, 137], "enthought": 36, "deploy": 36, "activepython": 36, "spack": 36, "freshli": 36, "starter": 36, "wherev": [36, 129, 226, 233, 263], "visit": [36, 49, 56, 65, 70, 288], "gitter": [36, 287], "excel": [36, 69, 209, 289], "ticket": 36, "export": [37, 214], "latin": 37, "clunki": 37, "collid": [37, 240], "win": 37, "throwawai": 37, "surviv": 37, "foo": [37, 44, 46, 65, 174, 194, 252, 255], "stick": 37, "_clash1": [37, 65], "_clash2": [37, 65], "multi": [37, 65, 66, 130, 139, 146, 159, 163, 173, 200, 214, 233, 276], "_clash": [37, 65], "sympif": [37, 65], "real_field": 38, "norm": [38, 101, 177, 189, 205, 207, 209, 210], "instanti": [38, 45, 46, 57, 65, 73, 78, 80, 81, 98, 101, 169, 177, 189, 200, 201, 205, 209, 234, 259, 263], "bi": [38, 65, 71, 73, 92, 198, 221, 230], "cj": 38, "dk": [38, 108, 209], "q1": [38, 101, 108, 119, 129, 131, 132, 133, 134, 136, 137, 138, 141, 142, 143, 147, 188, 189, 191, 193, 194, 197, 198, 204, 259, 261], "q2": [38, 108, 119, 129, 131, 132, 133, 134, 136, 137, 138, 141, 142, 147, 188, 189, 191, 193, 194, 197, 198, 204, 259, 261], "euclideanspac": 38, "realnormedalgebra": 38, "q3": [38, 119, 131, 132, 134, 136, 137, 138, 141, 189, 191, 193, 198, 259, 261], "atan_2": 38, "atan": [38, 43, 67, 69, 71, 76, 81, 89, 92, 133, 147, 148, 211, 214, 216], "arc_coplanar": 38, "arc": [38, 71, 291], "coplanar": [38, 79, 198], "parallel": [38, 75, 78, 79, 81, 92, 112, 115, 118, 197, 198, 207, 265, 269], "vector_coplanar": 38, "is_pur": 38, "mathbf": [38, 98, 124, 139, 141, 142, 144, 184, 188, 189, 194, 195, 197, 198, 214, 224, 235, 263, 264, 266, 268, 269], "versor": 38, "0i": 38, "0j": [38, 204], "0k": 38, "vector_part": 38, "from_matrix": [38, 115, 203], "vector_onli": 38, "from_axis_angl": 38, "radian": [38, 71, 74, 75, 76, 78, 79, 80, 101, 113, 129, 152, 153, 189], "from_eul": 38, "seq": [38, 56, 65, 68, 101, 205, 207, 210, 220, 232, 252], "intrins": [38, 46], "extrins": 38, "uppercas": [38, 66, 224], "zyz": [38, 189], "from_rotation_matrix": 38, "orthogon": [38, 42, 80, 94, 101, 177, 189, 198, 259, 261], "index_vector": 38, "magnitud": [38, 46, 64, 65, 69, 73, 106, 108, 109, 111, 113, 126, 133, 146, 177, 186, 189, 195, 198, 200, 259, 266, 268], "scalar_part": 38, "is_zero_quaternion": 38, "mensor": 38, "60": [38, 51, 56, 58, 64, 65, 70, 73, 92, 101, 105, 108, 109, 213, 214, 227, 230, 252], "pth": 38, "668": 38, "224": [38, 182, 208], "336": 38, "448": 38, "pow_cos_sin": 38, "900": 38, "1800": [38, 66], "2700": [38, 108], "3600": [38, 70], "product_matrix_left": 38, "hamilton": [38, 49, 96], "to_matrix": [38, 120, 123, 126, 144, 189, 198, 203, 209, 259, 262, 264], "product_matrix_right": 38, "rotate_point": 38, "coordin": [38, 46, 66, 67, 71, 73, 74, 76, 80, 82, 98, 101, 108, 111, 113, 117, 123, 124, 125, 128, 129, 130, 131, 132, 134, 136, 139, 140, 141, 142, 145, 147, 155, 157, 176, 177, 180, 188, 189, 190, 191, 193, 195, 198, 201, 209, 210, 222, 230, 259, 261, 262, 265, 267, 269, 274, 276], "to_axis_angl": 38, "set_norm": 38, "to_eul": 38, "angle_addit": 38, "avoid_square_root": 38, "degener": [38, 232, 233], "gymbal": 38, "lock": 38, "atan2": [38, 43, 67, 71, 153, 214, 259], "bc": [38, 77, 111, 252, 255, 265], "ac": [38, 46, 57, 77, 111, 126, 144, 156, 234, 252, 255], "mp": [38, 176, 232, 248], "bd": [38, 179], "1371": 38, "pone": 38, "0276302": 38, "to_rotation_matrix": 38, "assumptionkei": 39, "proposit": [39, 41, 95], "is_tru": [39, 41, 42], "assumptionscontext": [39, 40, 41], "global_assumpt": [39, 40, 41], "discern": [39, 41], "refin": [39, 41, 65, 96, 201, 205, 209, 210, 226, 247, 271], "inherit": [39, 65, 72, 95, 98, 99, 123, 168, 177, 199, 214, 234, 239, 247, 248], "askhandl": 39, "mere": [40, 41, 46, 48, 69, 174], "thin": [40, 101, 135, 148], "undefinedpred": [40, 41], "sexi": [40, 41], "sexyprimepred": [40, 41], "sexyprim": [40, 41], "int1": [40, 41], "int2": [40, 41], "assump": [40, 41], "r5": [40, 226], "predicate_": [40, 41], "28mathematical_log": [40, 41], "r6": 40, "sexy_prim": [40, 41], "resolut": [40, 41, 227], "askpredicatehandl": [40, 41], "r7": 41, "r8": 41, "notabl": [41, 46, 68, 73, 90, 106, 204], "truth_maintenance_system": 41, "istruepred": 42, "gt": [42, 46, 65, 234, 252], "istruehandl": 42, "commutativepred": 42, "commutativehandl": 42, "finitepred": 42, "nor": [42, 44, 65, 95, 153, 200, 210, 221, 223, 230, 240, 259], "nan": [42, 43, 65, 71, 73, 121, 226, 234, 281], "finitehandl": 42, "r9": 42, "infinitepred": 42, "infinitehandl": 42, "symmetricpred": 42, "transpos": [42, 45, 96, 98, 101, 115, 146, 162, 189, 198, 203, 209, 227, 235, 240, 241, 287], "diagon": [42, 70, 96, 97, 98, 101, 104, 128, 151, 203, 236], "symmetrichandl": 42, "r10": 42, "symmetric_matrix": 42, "invertiblepred": 42, "fullrank": [42, 46], "invertiblehandl": 42, "r11": 42, "invertible_matrix": 42, "orthogonalpred": 42, "tm": [42, 152], "mm": [42, 45, 105, 124, 131, 136, 137, 177, 203], "orthogonalhandl": 42, "r12": 42, "orthogonal_matrix": 42, "unitarypred": 42, "unitari": [42, 92, 105, 163, 168, 199], "unitaryhandl": 42, "r13": 42, "unitary_matrix": 42, "positivedefinitepred": 42, "tmz": 42, "positive_definit": 42, "positivedefinitehandl": 42, "r14": 42, "definite_matrix": 42, "uppertriangularpred": 42, "m_": [42, 142, 199, 207, 236], "ij": [42, 101, 179, 184, 199, 234, 236], "zeromatrix": [42, 98], "upper_triangular": [42, 96], "uppertriangularhandl": 42, "r15": 42, "uppertriangularmatrix": 42, "lowertriangularpred": 42, "lower_triangular": [42, 96], "lowertriangularhandl": 42, "r16": 42, "lowertriangularmatrix": 42, "diagonalpred": 42, "diagonalhandl": 42, "r17": 42, "diagonal_matrix": 42, "fullrankpred": 42, "rank": [42, 46, 47, 49, 54, 56, 57, 59, 60, 61, 80, 94, 101, 102, 189, 191, 201, 203, 205, 207, 209, 235, 239, 240, 287], "linearli": [42, 46, 73, 89, 101, 203, 207, 230, 232, 240], "fullrankhandl": 42, "squarepred": 42, "squarehandl": 42, "r18": 42, "square_matrix": 42, "integerelementspred": 42, "integer_el": 42, "integerelementshandl": 42, "realelementspred": 42, "real_el": 42, "realelementshandl": 42, "complexelementspred": 42, "complex_el": 42, "complexelementshandl": 42, "singularpred": 42, "singular": [42, 46, 57, 65, 69, 71, 72, 73, 87, 88, 90, 92, 101, 108, 110, 143, 189, 201, 208, 221, 230, 233, 259, 276, 281], "singularhandl": 42, "fore": 42, "r19": 42, "singularmatrix": 42, "normalpred": 42, "normalhandl": 42, "r20": 42, "normal_matrix": 42, "triangularpred": 42, "triangularhandl": 42, "r21": 42, "triangular_matrix": 42, "unittriangularpred": 42, "unit_triangular": 42, "unittriangularhandl": 42, "evenpred": 42, "evenhandl": 42, "oddpred": 42, "oddhandl": 42, "primehandl": 42, "subject": [42, 65, 75, 81, 109, 119, 147, 209], "compositepred": 42, "compositehandl": 42, "positivepred": 42, "positivehandl": 42, "negativepred": 42, "negativehandl": 42, "zeropred": 42, "zerohandl": 42, "nonzeropred": 42, "nonzerohandl": 42, "nonpositivepred": 42, "nonpositivehandl": 42, "nonnegativepred": 42, "nonnegativehandl": 42, "integerpred": 42, "integerhandl": 42, "r22": 42, "rationalpred": 42, "rationalhandl": 42, "r23": 42, "irrationalpred": 42, "ratio": [42, 55, 56, 64, 65, 69, 70, 73, 75, 78, 79, 80, 81, 97, 105, 115, 152, 184, 214, 223, 226, 232], "irrationalhandl": 42, "r24": 42, "realpred": 42, "disjoint": [42, 45, 54, 57, 210, 222, 252], "realhandl": 42, "r25": 42, "extendedrealpred": 42, "extendedrealhandl": 42, "hermitianpred": 42, "hermitianhandl": 42, "r26": 42, "hermitianoper": [42, 168], "complexpred": 42, "complexhandl": 42, "r27": 42, "imaginarypred": 42, "imaginaryhandl": 42, "r28": 42, "antihermitianpred": 42, "antihermitianhandl": 42, "r29": 42, "algebraicpred": 42, "askalgebraicpredicatehandl": 42, "r30": 42, "algebraichandl": 42, "transcendentalpred": 42, "transcedent": 42, "refine_pow": 43, "refine_ab": 43, "refine_arg": 43, "refine_atan2": 43, "refine_im": 43, "refine_matrixel": 43, "refine_r": 43, "refine_sign": 43, "lagrang": [44, 65, 122, 123, 135, 139, 210, 227, 276], "lagrangian": [44, 124, 126, 133, 138, 142, 143], "euler_equ": 44, "r31": 44, "93lagrange_equ": 44, "decreas": [44, 46, 57, 207], "monoton": [44, 46, 82], "is_decreas": 44, "lopen": [44, 65, 222, 229, 234], "ropen": [44, 71, 222, 234], "is_increas": 44, "72": [44, 48, 65, 78, 101, 105, 108, 199, 213], "is_monoton": 44, "is_strictly_decreas": 44, "is_strictly_increas": 44, "monotonicity_help": 44, "held": [44, 66, 143, 238, 291], "r32": 44, "mathematical_singular": 44, "interpol": [44, 70, 74, 146, 207, 210], "finite_diff_weight": [44, 65, 281], "apply_finite_diff": [44, 65, 281], "differentiate_finit": [44, 65, 281], "finite_diff": [44, 65], "x_list": [44, 281], "y_list": [44, 281], "xlist": 44, "55271367880050e": 44, "indexedbas": [44, 46, 64, 65, 214, 232, 238, 239, 246], "idx": [44, 46, 214, 238, 239, 246], "region": [44, 73, 82, 92, 200, 222, 230, 233, 234, 259, 262, 269], "bewar": [44, 73], "phenomenon": [44, 184, 207, 217, 286], "90": [44, 56, 63, 73, 96, 101, 107, 108, 111, 119, 129, 147, 214, 216, 226, 234, 247], "finitediff": 44, "wrt": [44, 46, 65, 67, 73, 82, 101, 129, 146, 189, 190, 207, 210, 259, 261, 262, 266], "len": [44, 53, 54, 55, 56, 57, 61, 63, 65, 66, 70, 73, 80, 90, 95, 133, 148, 152, 163, 173, 210, 226, 230, 239, 252], "nearest": [44, 209], "furthest": [44, 66], "sublist": [44, 61, 66, 92, 176, 281], "fd": [44, 46, 179], "0th": [44, 57, 66, 73], "1st": [44, 57, 105, 115, 230, 231, 255, 281], "forward": [44, 46, 96, 115, 131, 139, 172, 197, 226, 245], "pai": 44, "attent": [44, 56, 71], "gridpoint": 44, "plan": [44, 119, 205, 290], "mycoeff": 44, "3rd": [44, 57, 71, 105, 146, 210, 232, 235, 252], "2nd": [44, 57, 66, 105, 115, 146, 230, 235, 252], "poorer": 44, "grand": 44, "r33": 44, "51": [44, 101, 105], "184": [44, 230], "1988": [44, 158, 176, 207, 208], "699": 44, "706": [44, 101], "1090": [44, 210], "s0025": [44, 105], "5718": [44, 105], "0935077": 44, "continuous_domain": [44, 229], "function_rang": 44, "is_convex": [44, 81], "convex": [44, 81, 82, 92], "unspecifi": [44, 65, 80, 281], "multivari": [44, 65, 73, 201, 202, 204, 205, 206, 208, 210, 211, 221, 226, 232, 233, 234, 291], "concav": [44, 148], "r34": 44, "convex_funct": 44, "r35": 44, "ifp": 44, "illinoi": 44, "angelia": 44, "l3_convfunc": 44, "r36": 44, "logarithmically_convex_funct": 44, "r37": 44, "logarithmically_concave_funct": 44, "r38": 44, "concave_funct": 44, "lcim": 44, "mixtur": [44, 46, 82, 201, 247], "incommensur": 44, "not_empty_in": [44, 233], "finset_intersect": 44, "finite_set": [44, 222], "aperiod": 44, "smallest": [44, 59, 71, 78, 80, 87, 95, 101, 105, 176, 189, 205, 250, 252], "verif": [44, 203, 232], "reliabl": [44, 65, 230, 250, 281], "stationary_point": 44, "stationari": [44, 234], "tikz": 45, "joyofcat": 45, "adamek": 45, "herrlich": 45, "strecker": 45, "joi": 45, "cat": [45, 188], "katmat": 45, "uni": [45, 92, 252], "bremen": 45, "acc": [45, 146, 193, 197], "embryon": 45, "morphism": [45, 201], "codomain": [45, 201, 209], "arrow": [45, 94, 108, 200, 214], "namedmorph": 45, "prohibit": [45, 57, 58, 189], "identitymorph": 45, "compositemorph": 45, "compos": [45, 65, 66, 133, 143, 181, 184, 197, 201, 205, 209, 210, 211, 214, 216, 226], "circ": [45, 65, 76, 82, 90, 98], "flatten": [45, 65, 204, 236, 241, 252, 253], "new_nam": 45, "id_a": 45, "id_b": 45, "commutative_diagram": 45, "quadrupl": [45, 210], "mbox": 45, "hom": 45, "id": [45, 61, 71, 236], "rightarrow": [45, 57, 61, 66, 70, 71, 73, 87, 88, 90, 92, 95, 96, 105, 200, 209, 221, 233, 236, 252, 281], "monoid": 45, "pare1970": 45, "premis": 45, "conclus": [45, 65], "carri": [45, 46, 65, 171, 177, 184, 201, 204, 207, 209, 211, 212, 253], "premises_kei": 45, "et": [45, 92, 158, 207, 210, 211, 223, 226], "pareigi": 45, "functor": 45, "1970": [45, 101], "is_subdiagram": 45, "subdiagram": 45, "d1": [45, 61, 189, 201, 221, 234, 259], "subdiagram_from_object": 45, "veryuniqu": 45, "diagram_draw": 45, "diagramgrid": 45, "analys": [45, 113, 115, 146, 234], "drawn": [45, 56, 94, 200, 204, 212], "moprhism": 45, "strive": 45, "nevertheless": 45, "laid": [45, 129, 176], "width": [45, 46, 93, 194, 200, 210, 214, 245], "height": [45, 46, 81, 98, 148, 200, 201, 214, 221, 269], "emploi": [45, 64, 69, 92, 105, 210, 213, 230, 234], "lai": 45, "layout": 45, "sequenti": [45, 49, 66, 71, 259, 261], "test_draw": 45, "lemma": [45, 56, 90, 202], "fivelemma": 45, "five_lemma": 45, "arrowstringdescript": 45, "curving_amount": 45, "looping_start": 45, "looping_end": 45, "horizontal_direct": 45, "vertical_direct": 45, "label_posit": 45, "pic": 45, "princip": [45, 66, 71, 73, 90, 92, 102, 117, 131, 152, 201, 202, 203, 204, 205, 207, 209, 210, 211], "offset": [45, 46, 65, 70, 73, 239], "cell": 45, "vertic": [45, 49, 58, 59, 75, 76, 78, 80, 81, 82, 92, 94, 96, 101, 109, 128, 134, 151, 159, 199, 200, 203, 209, 214, 222, 252, 269], "disregard": 45, "unexplain": 45, "astr": 45, "dr": [45, 67, 214, 230], "12mm": 45, "correspondingli": 45, "label_displac": 45, "arrow_styl": 45, "dash": 45, "xypicdiagramdraw": 45, "formatt": 45, "utilis": 45, "xypic": 45, "drawer": 45, "xymatrix": 45, "ld": 45, "arrow_formatt": 45, "therebi": 45, "default_arrow_formatt": 45, "farther": 45, "centr": [45, 62, 200], "default_formatt": 45, "_3mm": 45, "default_curving_amount": 45, "cm": [45, 146, 234], "_1cm": 45, "default_curving_step": 45, "h1": [45, 126], "1cm": 45, "rr": [45, 65, 83, 203, 204, 210, 211], "h_": [45, 56, 61, 70, 73, 92], "_2cm": 45, "mask": [45, 214], "diagram_format": 45, "proceed": [45, 47, 90, 92, 145, 208, 224], "xypic_draw_diagram": 45, "insert": [45, 47, 96, 107, 108, 174, 179, 214, 234, 255], "preview_diagram": 45, "fab": [46, 214], "cse_main": [46, 215, 226], "cse": [46, 106, 119, 168, 215, 226, 247, 253], "meat": 46, "lightweight": [46, 209, 285], "pycod": [46, 214], "lambdarepr": [46, 214, 253], "aesara_funct": [46, 106, 214], "float80": [46, 214], "assign_to": [46, 214], "type_alias": [46, 214], "0l": [46, 214], "powl": [46, 214], "c99": [46, 214, 247], "expm1": [46, 214], "thrown": [46, 214], "fcode": [46, 214], "contract": [46, 67, 116, 179, 214, 223, 236, 238, 239, 240, 241], "len_i": [46, 214], "mat_1": 46, "mat_2": 46, "jscode": [46, 214], "user_funct": [46, 214], "argument_test": [46, 214], "cfunction_str": [46, 214], "octav": [46, 146, 247], "custom_funct": [46, 214], "existing_octave_fcn": [46, 214], "is_matrix": [46, 214], "my_mat_fcn": [46, 214], "my_fcn": [46, 214], "mat": [46, 98, 148, 173, 214], "octave_cod": [46, 214], "summat": [46, 64, 65, 69, 70, 73, 179, 208, 210, 214, 217, 226, 234, 235, 238, 239, 240, 246], "mathematica_cod": [46, 214], "g1": [46, 50, 55, 56, 90, 101, 115], "g2": [46, 50, 55, 56, 90, 94, 101, 115], "gamma_1": [46, 118], "gamma_2": [46, 118], "\u03b3\u2081": 46, "\u03b3\u2082": 46, "\u03b2": [46, 199], "h_i": [46, 61], "c89": [46, 214, 247], "julia_cod": [46, 214], "rust_cod": [46, 214], "powi": [46, 214], "make_routin": [46, 247], "f95": [46, 246, 247], "matlab": [46, 119, 146, 247, 287], "breadth": [46, 65, 234], "c_name": [46, 247], "c_code": [46, 247], "h_name": [46, 247], "c_header": [46, 247], "volume_result": 46, "ifndef": [46, 247], "project__test__h": [46, 247], "endif": [46, 247], "preprocessor": [46, 215, 226, 247], "global_var": [46, 247], "insensit": [46, 101, 146, 214, 245, 247], "argument_sequ": [46, 247], "name_expr": [46, 247], "to_fil": [46, 247], "f_name": [46, 247], "f_code": [46, 247], "hydrogen": [46, 276], "r_nl": [46, 117, 180], "my_routin": 46, "result_var": [46, 247], "result\u2085\u2081\u2084\u2082\u2083\u2084\u2081\u2086\u2088\u2081\u2083\u2089\u2087\u2087\u2081\u2089\u2084\u2082\u2088": 46, "__________": [46, 202], "assoc_laguerr": [46, 73, 214], "fcn": [46, 247], "result_5397460570204848505": [46, 247], "out_8598435338387848786": [46, 247], "examin": [46, 66, 168, 245, 247, 291], "inputargu": [46, 247], "outputargu": [46, 247], "inoutargu": [46, 247], "disk": [46, 66, 222, 233, 253], "binary_funct": [46, 106, 246], "tensor": [46, 52, 67, 101, 116, 126, 144, 158, 164, 165, 166, 176, 179, 188, 189, 214, 235, 236, 238, 239, 246, 253, 263, 264, 270, 271, 274, 276], "binary_func": [46, 246], "servic": 46, "tempdir": [46, 246], "qho_1d": [46, 155], "psi_n": [46, 155], "qho": 46, "tmp": 46, "subroutin": [46, 56, 175, 207], "autofunc": 46, "hbar": [46, 155, 161, 174, 180, 184, 186, 199], "05457162d": 46, "14159265358979d0": 46, "0d0": [46, 214], "74126166983329d": 46, "33": [46, 65, 68, 101, 152, 188, 207, 211, 214, 234], "mute": [46, 246], "backend": [46, 93, 106, 107, 113, 132, 134, 140, 194, 211, 246, 253], "auxiliari": [46, 92, 124, 129, 141, 230, 246], "sympy_express": [46, 246], "mandatori": [46, 214, 246], "illustr": [46, 101, 130, 133, 184, 204, 217, 221], "psi_nl": 46, "766": 46, "incur": [46, 106], "get_numpy_arrai": 46, "tight": 46, "temp": [46, 131], "alloc": [46, 71], "fuse": 46, "wise": [46, 47, 71, 96, 203, 207, 214, 220, 246], "unabl": [46, 78, 82, 107, 232, 259, 280, 281], "fortun": [46, 106, 133, 210, 211], "reconnect": 46, "autom": [46, 71, 106, 223, 246, 285], "ideologi": [46, 233], "broadcast": [46, 106, 214, 239, 246], "outperform": 46, "quantit": [46, 181], "ufunc": [46, 106, 246, 253], "fn_numpi": 46, "fn_fortran": 46, "xx": [46, 101, 126, 189, 198, 252], "21306132": 46, "98101184": 46, "44626032": 46, "timeit": [46, 211], "10000": [46, 69, 105, 106, 108, 232], "18891601900395472": 46, "004707066000264604": 46, "facil": 46, "comparison": [46, 64, 65, 95, 101, 129, 201, 209, 213, 232, 245, 252], "thereof": [46, 65, 201, 207, 209], "optims_c99": 46, "log1p": [46, 214], "expm1_opt": 46, "log1p_opt": 46, "exp2_opt": 46, "log2_opt": 46, "log2const_opt": 46, "funcminusoneoptim": 46, "func_m_1": 46, "opportunist": 46, "replaceoptim": 46, "catastroph": 46, "replace_in_add": 46, "cost_funct": 46, "__call__": [46, 57, 65, 209], "exp2": [46, 214], "create_expand_pow_optim": 46, "base_req": 46, "is_symbol": [46, 96], "expand_opt": 46, "opt2": 46, "is_funct": 46, "log2": [46, 73, 214], "matin_opt": 46, "matinv_opt": 46, "matrixsolv": [46, 214], "matrix_nod": 46, "numpyprint": 46, "doprint": [46, 214], "seriesapprox": 46, "reltol": 46, "max_ord": 46, "n_point_check": 46, "threshold": [46, 105], "largest": [46, 57, 59, 65, 71, 73, 101, 104, 105, 159, 201, 205, 232, 252], "series_approx2": 46, "1e": [46, 65, 69, 101, 113, 148, 210, 232], "series_approx3": 46, "series_approx8": 46, "sumapprox": 46, "neglect": 46, "2000": [46, 51, 92, 105, 208], "sum_approx3": 46, "sum_approx2": 46, "sum_approx1": 46, "token": [46, 90, 93, 107], "diagram": [46, 54, 94, 108, 132, 133, 134, 139, 159, 239, 264, 286], "codegenast": 46, "assignmentbas": 46, "augmentedassign": 46, "addaugmentedassign": 46, "subaugmentedassign": 46, "mulaugmentedassign": 46, "divaugmentedassign": 46, "modaugmentedassign": 46, "codeblock": [46, 107], "quotedstr": 46, "intbasetyp": 46, "_sizedinttyp": 46, "signedinttyp": 46, "unsignedinttyp": 46, "floatbasetyp": 46, "floattyp": 46, "complexbasetyp": 46, "complextyp": 46, "pointer": [46, 247, 248], "functionprototyp": 46, "functiondefinit": [46, 107], "stream": [46, 66, 215, 226, 252], "functioncal": 46, "breaktoken": 46, "continuetoken": 46, "nonetoken": 46, "float32": [46, 106, 107, 253], "codeprint": 46, "complex_": 46, "bool_": 46, "intc": [46, 107], "intp": 46, "unsign": [46, 70, 226], "int8": 46, "int16": 46, "int32": 46, "int64": [46, 234], "uint8": 46, "uint16": 46, "uint32": 46, "uint64": 46, "x86": 46, "amd64": 46, "complex64": 46, "complex128": 46, "newton": [46, 73, 139, 182, 186, 207, 211], "aug_assign": 46, "tol": [46, 65, 205], "val": [46, 65, 77, 205, 209, 253], "whl": 46, "py_str": 46, "inf": [46, 57, 65, 101, 205, 210, 222, 230, 234], "exec": [46, 65, 93, 253], "1121416371": 46, "909672693737": 46, "867263818209": 46, "865477135298": 46, "865474033111": 46, "1g": 46, "3e": 46, "2003": [46, 199, 208, 214, 227], "source_format": [46, 214], "op": [46, 65, 101, 168, 179, 193, 197, 223, 252, 253], "parametr": [46, 73, 74, 78, 101, 200, 227, 233, 259, 262, 269], "volatil": 46, "binop": 46, "exit": [46, 105, 245], "premad": 46, "break_": 46, "lift": [46, 61, 71, 73, 90, 205, 207, 210], "left_hand_sid": 46, "topological_sort": [46, 252], "postprocess": [46, 210, 215, 226], "topolog": [46, 65, 67, 203, 252], "continue_": 46, "untyp": 46, "compliant": 46, "elem": [46, 56, 201], "ijk": [46, 239], "stride": [46, 239], "lmn": 46, "cast_nocheck": 46, "nbit": 46, "storag": [46, 65, 101, 173, 199, 207], "nmant": 46, "mantissa": 46, "nexp": 46, "half_precis": 46, "f16": 46, "65504": 46, "tini": [46, 65], "ep": [46, 56, 64, 205, 209, 210], "decimal_dig": 46, "cast_check": 46, "1e5": 46, "cast": [46, 98, 283], "subnorm": [46, 56], "idempot": 46, "loos": [46, 65], "overflow": [46, 249], "max_expon": 46, "min_expon": 46, "for_i": 46, "for_ji": 46, "for_kji": 46, "function_arg": [46, 245], "fcall": 46, "bar": [46, 73, 130, 139, 168, 174, 255, 276], "baz": 46, "return_typ": 46, "fp": [46, 47, 65, 210, 216], "from_functionprototyp": 46, "prototyp": [46, 106, 247], "value_const": 46, "pointer_const": 46, "attr_param": 46, "looking_for": 46, "as_declar": 46, "formatstr": 46, "5g": 46, "stdout": [46, 48, 245], "stderr": 46, "oppos": [46, 253, 281], "_field": 46, "_construct_": 46, "not_in_arg": 46, "float16": 46, "inttyp": 46, "super": [46, 73, 205, 214, 259, 261], "from_expr": [46, 210], "v6": 46, "123456": [46, 65, 105], "v10": 46, "67894": 46, "boost_mp50": 46, "boost": 46, "multiprecis": [46, 204], "cpp_dec_float_50": 46, "r39": 46, "rtol": 46, "atol": 46, "precision_target": 46, "v18": 46, "123456789012345646": 46, "123456789012345649": 46, "Will": [46, 101, 107, 209, 214, 245], "decl1": 46, "decl2": 46, "alt": [46, 209], "secondarili": [46, 210], "mathcin": 46, "cbrt": [46, 71, 214], "minu": [46, 64, 65, 195, 207, 214, 266], "0e": [46, 65], "fma": [46, 214], "hypot": [46, 214], "hypotenus": [46, 81], "log10": [46, 214], "ten": [46, 106], "plu": [46, 64, 101, 107, 146, 159, 210, 214, 224, 252, 253], "famili": [46, 49, 83, 92, 202], "commaoper": 46, "goto": 46, "preincrement": 46, "postdecr": 46, "decrement": [46, 249], "postincr": 46, "increment": [46, 56, 57, 58, 64, 81, 105, 234], "predecr": 46, "alignof": 46, "sizeof": 46, "struct": [46, 199], "dsign": 46, "arrayconstructor": 46, "95": [46, 63, 105, 207, 214, 230, 232, 247], "do1": 46, "1d0": 46, "do2": 46, "extent": 46, "intent_out": 46, "dim": [46, 67, 80, 101, 106, 181, 187, 214, 237, 240, 274], "arr": 46, "fortranreturn": 46, "aid": [46, 131], "implieddoloop": 46, "idl": 46, "signallib": 46, "prog": [46, 158], "myprogram": 46, "mysub": 46, "subroutinecal": 46, "inout": 46, "bind_c": 46, "sum_": [46, 64, 65, 66, 70, 73, 90, 92, 96, 98, 105, 199, 210, 211, 216, 217, 224, 230, 234], "cmplx": [46, 214], "intent_in": 46, "isign": 46, "lbound": 46, "lb": [46, 87, 249], "literal_dp": 46, "num": [46, 56, 65, 105, 115, 205, 226, 230, 249, 255], "literal_sp": 46, "reshap": [46, 96, 129, 146, 235, 241, 252], "arrayexpr": 46, "shp": 46, "metric": [46, 57, 61, 67, 116, 226, 230, 233, 240], "snr": 46, "convolution2d": 46, "use_renam": 46, "ren": 46, "thingi": 46, "newtons_method": 46, "itermax": 46, "counter": [46, 65, 71, 77, 96, 109, 111], "raphson": 46, "criterion": [46, 56, 145, 202, 207], "netwon": 46, "algo": [46, 57], "r40": 46, "27s_method": 46, "newtons_method_funct": 46, "param": [46, 67, 101, 227], "render_as_modul": 46, "py_mod": 46, "865474033102": 46, "render_as_source_fil": 46, "printer_set": 46, "fcodeprint": [46, 214], "fpgroup": [47, 56], "studi": [47, 55, 64, 67, 101, 198, 201, 207, 210, 227, 234], "combinator": [47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 70, 98, 105, 209, 216, 235, 240, 249, 252, 271, 285, 291], "free_group": [47, 55, 56], "vfree_group": 47, "xfree_group": 47, "fp_group": [47, 56], "coset_enumeration_r": 47, "fall": [47, 64, 65, 70, 93, 115, 194, 209, 214, 227, 231, 234], "famou": [47, 73, 92, 105, 227], "langl": [47, 56, 158, 199], "rangl": [47, 56, 158, 176, 199], "gen0": 47, "gen1": 47, "gen_": 47, "freegroup": 47, "x_2": [47, 55, 70, 87, 174, 202, 207, 210, 216, 227, 233], "x_3": [47, 55, 87, 174], "s_1": [47, 252], "r_1": [47, 201, 211], "s_2": 47, "r_2": 47, "s_k": 47, "r_k": [47, 172], "s_i": [47, 61, 92, 94], "r_i": [47, 211], "reduct": [47, 101, 125, 203, 207, 209, 227], "ho05": [47, 55], "cdhw73": 47, "hav91": 47, "strategi": [47, 65, 92, 207, 208, 221, 224, 226, 231], "coset_enumeration_c": 47, "coset_enumer": 47, "relator_bas": 47, "coset_table_bas": 47, "coset_table_max_limit": 47, "4096000": 47, "safeti": [47, 57, 99], "max_coset": 47, "cox": [47, 208, 210], "c_r": [47, 224], "max_stack_s": 47, "500": [47, 69, 126], "deduction_stack": 47, "stack": [47, 82, 96, 146, 203, 209, 214, 243, 249, 287], "occurr": [47, 65, 105, 129, 189, 226, 234], "exce": [47, 105, 240, 253], "modest": 47, "low_index_subgroup": 47, "conjugaci": [47, 48, 56], "coset_t": [47, 56], "reidemeister_present": 47, "p1": [47, 56, 57, 61, 64, 75, 77, 78, 79, 80, 81, 108, 115, 120, 123, 133, 146, 148, 193, 200, 204, 205, 207, 211, 223, 234, 235], "john": [47, 56, 73, 210, 227, 230], "cannon": 47, "lucien": 47, "dimino": [47, 56], "georg": [47, 201, 230, 252], "hava": 47, "jane": 47, "watson": [47, 226], "comp": [47, 230], "463": [47, 145], "490": [47, 57], "1973": [47, 66, 196], "derek": [47, 55], "holt": [47, 55, 56, 63], "chapman": [47, 55], "hall": [47, 55, 234], "crc": [47, 55, 57], "2005": [47, 55, 92, 105, 210], "xvi": [47, 55], "514": [47, 55, 208], "symposium": [47, 90, 207, 208, 224], "issac": [47, 92, 208, 232], "bonn": 47, "1991": [47, 208], "191": [47, 233], "199": 47, "acm": [47, 64, 90, 92, 205, 208, 224, 226, 230, 232], "transit": [48, 56, 146, 207, 234], "subgroup": [48, 56, 57, 61, 63, 94, 105], "permutationgroup": [48, 50, 53, 55, 56, 57, 62, 63, 209], "s_n": [48, 64, 210, 252], "enum": [48, 209, 251, 278], "get_perm_group": [48, 209], "r41": 48, "cohen": [48, 102, 203, 208, 209], "s6transitivesubgroup": [48, 205], "qualnam": 48, "boundari": [48, 76, 78, 108, 109, 193, 211, 222, 230, 234], "s6": 48, "s5transitivesubgroup": 48, "s5": [48, 56], "s4transitivesubgroup": [48, 209, 210], "s4": [48, 57, 115], "s3transitivesubgroup": 48, "s3": [48, 56, 64, 115, 217, 227], "s2transitivesubgroup": [48, 209], "s1transitivesubgroup": [48, 209], "four_group": 48, "klein": [48, 57], "m20": 48, "metacycl": 48, "323": [48, 73, 105], "s3_in_s6": 48, "prism": 48, "a4_in_s6": 48, "a4": [48, 61, 65, 94, 146, 291], "find_transitive_subgroups_of_s6": 48, "s4m": 48, "s4p": 48, "a4xc2": 48, "s4xc2": 48, "g18": 48, "isomorph": [48, 56, 59, 201, 204, 207, 209], "semidirect": 48, "g36m": 48, "g36": 48, "g36p": 48, "c4": [48, 94, 96, 98, 230], "g72": 48, "d4": [48, 94, 210, 234], "325": 48, "psl2f5": 48, "psl_2": 48, "_5": [48, 201], "a_5": 48, "pgl2f5": 48, "pgl_2": 48, "s_5": 48, "print_report": 48, "s_6": 48, "dihedr": [48, 53, 56, 57], "d_6": 48, "s_4": 48, "absenc": [48, 61, 95], "a_4": 48, "engag": 48, "eleg": [48, 211, 213], "a_6": 48, "g_": [48, 56, 63, 64, 73, 90, 101, 227], "c_3": [48, 90, 230], "rtime": 48, "c_4": [48, 90], "d_4": 48, "r43": 48, "projective_linear_group": 48, "exceptional_isomorph": 48, "r44": [48, 49], "automorphisms_of_the_symmetric_and_alternating_group": 48, "pgl": 48, "graycod": 49, "kw_arg": [49, 59, 179, 239, 240], "hamiltonian": [49, 170], "edg": [49, 58, 59, 94, 203, 214, 233, 252, 290], "vertex": [49, 59, 76, 81, 92, 203], "000": [49, 69, 92, 95, 173, 252], "110": [49, 95, 230, 232, 246, 252], "010": [49, 95, 252], "011": [49, 95, 173, 252], "111": [49, 68, 75, 95, 105, 252], "101": [49, 73, 95, 105, 173, 252], "001": [49, 69, 95, 148, 252], "statist": [49, 66, 73, 234, 245, 285], "generate_grai": 49, "0000": 49, "0001": [49, 69], "0011": [49, 60], "0010": 49, "0110": 49, "0111": [49, 173], "0101": [49, 173], "0100": 49, "1100": 49, "1101": 49, "1111": 49, "1110": 49, "1010": 49, "1011": 49, "1001": 49, "nijenhui": 49, "wilf": [49, 64, 232], "1978": [49, 56, 184, 208], "r45": 49, "knuth": [49, 57, 249], "2011": [49, 57, 90, 105, 196, 223], "art": [49, 57, 201, 214, 216, 249], "vol": [49, 57, 66, 70, 73, 90, 101, 116, 209, 210, 224, 249, 252], "addison": [49, 57, 105, 208], "weslei": [49, 57, 105, 208], "r46": 49, "brgc": 49, "6th": [49, 105], "unrank": [49, 54, 56, 57, 59], "r47": 49, "archiv": [49, 57, 66, 70, 73, 82, 92, 105, 145, 203, 226, 227, 234, 252, 287], "20200224064753": 49, "statweb": 49, "stanford": 49, "susan": 49, "s208": 49, "node12": 49, "tail": [49, 64, 65, 205, 234], "00010": 49, "random_bitstr": 49, "bitlist": [49, 60], "gray_to_bin": 49, "endian": 49, "bin_to_grai": 49, "get_subset_from_bitstr": 49, "bitstr": 49, "graycode_subset": 49, "group_construct": 50, "directproduct": [50, 53], "__mul__": [50, 56, 96, 101, 205, 209], "shift": [50, 56, 57, 59, 66, 73, 76, 80, 82, 95, 200, 205, 207, 210, 217, 224, 232, 234], "gn": 50, "named_group": [50, 53, 55, 56, 62, 63], "cyclicgroup": [50, 53, 56], "perm_group": [50, 55, 56, 57, 62, 63], "group_numb": 51, "is_nilpotent_numb": 51, "r48": 51, "randprim": [51, 105], "pakianathan": 51, "shankar": 51, "monthli": [51, 66, 101], "107": [51, 208], "631": 51, "634": 51, "is_abelian_numb": 51, "r49": 51, "is_cyclic_numb": 51, "r50": 51, "polyhedron": [52, 56, 92, 252, 271], "prufer": [52, 271], "grai": [52, 60, 93, 148, 194, 200, 271], "galoi": [52, 204, 205, 207, 210, 271], "nilpot": [52, 56, 101, 271], "abelian": [52, 53, 56, 94, 184, 201, 271], "cyclic": [52, 53, 56, 57, 58, 68, 96, 105, 240, 252, 271], "polycycl": [52, 56, 271], "symmetricgroup": [53, 55, 56, 62, 63], "transposit": [53, 56, 57, 66, 96, 98, 236], "is_group": [53, 56], "generate_schreier_sim": [53, 56], "af": [53, 56, 62, 146], "dihedralgroup": [53, 56, 63], "alternatinggroup": [53, 56, 62], "r51": 53, "symmetric_group": 53, "generators_and_rel": 53, "d_n": [53, 94, 210], "gon": 53, "bab": 53, "generate_dimino": [53, 56], "perm": [53, 55, 56, 57, 58, 63, 70, 96, 98, 101, 235], "cyclic_form": [53, 57, 58], "r52": 53, "dihedral_group": [53, 56], "ex": [53, 92, 116, 128, 204, 209, 210, 240, 248], "r53": 53, "armstrong": 53, "abeliangroup": [53, 56], "cyclic_ord": 53, "r54": 53, "groupprop": [53, 56], "subwiki": [53, 56], "structure_theorem_for_finitely_generated_abelian_group": 53, "multiset_partit": [54, 70, 90, 249, 252], "rg": 54, "growth": [54, 105, 207, 281], "from_rg": 54, "abcd": [54, 58, 179, 236, 252, 255], "cbead": 54, "sort_kei": [54, 65, 230], "ti": [54, 57, 65, 105], "integerpartit": [54, 252], "summand": [54, 209], "r55": 54, "partition_": [54, 70], "28number_theori": 54, "as_dict": [54, 204, 210], "as_ferr": 54, "char": 54, "ferrer": 54, "next_lex": [54, 57], "lexic": [54, 159, 252], "prev_lex": 54, "random_integer_partit": 54, "85": [54, 69, 70, 101, 105, 131, 177, 199, 234], "rgs_gener": 54, "37": [54, 66, 71, 75, 101, 105, 109, 199, 214, 227], "52": [54, 70, 105, 108, 109, 199, 213, 227, 230, 252, 281], "151": 54, "203": [54, 70], "rgs_enum": 54, "rgs_unrank": 54, "rgs_rank": 54, "pcgroup": 55, "pcg": 55, "pc_seri": [55, 56], "polycyl": 55, "pc_present": 55, "pc_sequenc": [55, 56], "miss": [55, 56, 82, 214, 232, 247, 291], "adjac": [55, 56, 57, 65, 70, 115, 151, 203, 252], "der": [55, 56], "relative_ord": [55, 56], "polycyclic_group": [55, 56], "gen": [55, 56, 61, 62, 63, 65, 101, 201, 204, 205, 207, 209, 210, 211, 212, 220, 226, 229, 232], "is_ident": [55, 57, 65], "poss": [55, 131, 198], "pc_group": 55, "a_j": [55, 73, 90, 184, 207, 216, 224], "notin": [55, 90, 222], "_order": 55, "minimal_uncollected_subword": 55, "subword_index": 55, "i_1": [55, 179, 210, 235], "a_1": [55, 56, 66, 73, 87, 90, 96, 101, 116, 179, 184, 202, 207, 224, 227, 230, 234, 291], "i_r": 55, "a_r": [55, 224], "i_2": [55, 179, 210], "s_": [55, 61, 129, 207], "s_j": [55, 94, 207], "x3": [55, 65, 70, 204, 230, 234], "collected_word": 55, "free_to_perm": 55, "pictur": [55, 214], "x_3x_2": 55, "x_3x_1": 55, "x_2x_1": 55, "x_3x_0": 55, "x_2x_0": 55, "x_1x_0": 55, "varii": 55, "derived_seri": [55, 56], "pc_resent": 55, "k_arrai": 55, "array_form": [55, 57, 58, 236], "v_arrai": 55, "e_1": [55, 101, 201, 207, 210], "e_n": [55, 70, 94, 101, 155, 201, 210], "exponent_vector": 55, "leading_expon": 55, "dup": [56, 205], "pn": [56, 133, 143], "motion": [56, 119, 123, 124, 125, 128, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 146, 147, 193, 194, 197, 198, 234], "front": [56, 65, 131, 132, 148, 178, 205, 207, 210, 214, 226, 291], "face": [56, 58, 78, 92, 129, 207, 211, 214, 227, 269, 287], "rubik": 56, "3674160": 56, "pgroup": [56, 58], "p10": 56, "make_perm": 56, "r56": 56, "eick": [56, 63], "brien": [56, 63], "r57": 56, "seress": 56, "r58": 56, "schreier_vector": 56, "r59": 56, "nielsen_transform": 56, "product_replacement_algorithm": 56, "r60": 56, "frank": [56, 57, 101, 252], "celler": 56, "charl": 56, "leedham": 56, "scott": 56, "murrai": [56, 203], "alic": [56, 66], "niemey": 56, "r61": 56, "block_": 56, "28permutation_group_theori": 56, "r62": 56, "algorithmist": 56, "union_find": 56, "r63": 56, "multiply_transitive_group": 56, "r64": 56, "center_": 56, "28group_theori": 56, "centralizer_and_norm": 56, "derived_subgroup": 56, "nilpotent_group": 56, "colost": 56, "hulpk": 56, "cgt": 56, "cgtnote": 56, "__contains__": 56, "__weakref__": [56, 96], "weak": [56, 65, 96, 124, 204, 207], "_coset_repres": 56, "hg": 56, "transvers": [56, 61, 63, 152, 153], "coset_transvers": 56, "_distinct_primes_lemma": 56, "_element": 56, "_eval_is_alt_sym_monte_carlo": 56, "05": [56, 87, 113, 196, 199], "mont": 56, "carlo": 56, "n_ep": 56, "_check_cycles_alt_sym": [56, 63], "_eval_is_alt_sym_na": 56, "only_sym": 56, "only_alt": 56, "_p_elements_group": 56, "_random_pr_init": 56, "_random_prec_n": 56, "modif": [56, 71, 101, 233, 234, 249], "69": [56, 101, 203, 232, 249], "_random_gen": 56, "accumul": [56, 245, 249], "random_pr": 56, "chosen": [56, 57, 66, 67, 78, 79, 101, 105, 108, 147, 181, 183, 184, 200, 201, 205, 207, 209, 214, 221, 224, 230, 234, 245, 259], "gh": [56, 202, 233, 240], "eventu": [56, 73, 92, 200, 201, 221, 247, 252], "_sylow_alt_sym": 56, "sylow": 56, "p_1": [56, 61, 66, 83, 105, 197, 224, 227], "p_2": [56, 66, 83, 105, 197, 224], "p_p": 56, "sylow_subgroup": 56, "is_alt_sym": [56, 63], "_union_find_merg": 56, "not_rep": 56, "atkinson": 56, "83": [56, 213], "87": [56, 71, 101, 105], "minimal_block": 56, "_union_find_rep": 56, "r65": 56, "r71": 56, "compress": [56, 101, 104, 111], "r67": 56, "r73": [56, 57], "_verifi": 56, "_h": [56, 233], "gens_k": 56, "rels_k": 56, "gens_h": 56, "inject": [56, 65, 201, 205, 210, 287], "homomorph": 56, "rels_h": 56, "strong_present": 56, "abelian_invari": 56, "t_1": [56, 70, 227], "t_2": [56, 70, 227], "t_r": [56, 144, 240], "542": 56, "adopt": [56, 240], "schreier": [56, 61, 63], "sim": [56, 61, 63, 90], "b_1": [56, 63, 73, 87, 90, 201, 224, 227, 230, 291], "b_2": [56, 63, 73, 87, 224, 230], "dot": [56, 57, 61, 63, 66, 78, 80, 87, 96, 101, 115, 124, 126, 131, 132, 133, 136, 137, 138, 141, 142, 143, 146, 163, 188, 189, 191, 194, 197, 198, 199, 201, 202, 207, 210, 214, 233, 234, 252, 259, 263, 265, 266], "b_k": [56, 63, 66, 70, 73, 216, 217], "strong": [56, 61, 62, 63, 105, 106], "89": [56, 63, 92], "55": [56, 68, 70, 101, 199, 200, 210, 227], "57": [56, 101, 105, 234], "coset": [56, 61, 209], "strong_gen": [56, 62, 63], "basic_transvers": [56, 63], "basic_orbit": [56, 63], "basic_stabil": 56, "baseswap": 56, "po": [56, 90, 95, 96, 126, 144, 146, 205, 232], "strong_gens_distr": [56, 63], "swap": [56, 57, 58, 96, 101, 159, 163, 172, 234, 252], "orbit": [56, 63, 179, 180, 182], "b_": [56, 61, 63, 65, 70, 73, 90, 98, 115, 216, 224, 227, 235, 236], "b_i": [56, 61, 63, 90, 201, 224], "la": [56, 146, 184], "vega": 56, "testutil": [56, 62, 63], "_verify_bsg": [56, 62, 63], "schreier_sim": [56, 62, 63], "bsg": [56, 61, 63, 240], "102": [56, 101], "98": [56, 66, 145, 210, 230], "pseudocod": 56, "beta_": 56, "foral": [56, 64, 67, 184], "zg": 56, "gz": 56, "c_g": 56, "sg": [56, 234, 240], "is_subgroup": 56, "subgroup_search": 56, "hgh": 56, "closur": [56, 62, 88, 159, 205, 209, 222], "composition_seri": 56, "h_0": [56, 61], "h_1": [56, 61, 233], "h_2": [56, 233], "1024": [56, 214, 234], "512": [56, 73], "128": [56, 70, 73, 75, 105, 208, 214], "243": [56, 73, 232], "81": [56, 70, 75, 96, 101, 105, 129, 131, 199, 213], "conjugacy_class": 56, "xax": 56, "s_3": 56, "feasibl": [56, 115], "resiz": [56, 57, 96, 98], "coset_factor": 56, "factor_index": 56, "_basic_orbit": 56, "u1": [56, 105, 129, 131, 132, 133, 134, 136, 137, 141, 143, 146, 189, 191, 193, 194, 197, 230], "u2": [56, 104, 105, 129, 131, 132, 133, 134, 136, 137, 141, 146, 189, 193, 197, 230], "_strip": [56, 63], "coset_rank": 56, "lexicograph": [56, 57, 60, 61, 65, 207, 210, 252], "coset_unrank": 56, "standardis": [56, 204], "subsect": [56, 266], "compris": [56, 66, 98, 126, 144, 147, 210, 252], "g_0": [56, 227], "g_1": [56, 210, 221, 227, 230], "g_2": [56, 94, 221, 230], "g_i": [56, 221], "g_k": 56, "tetrahedron": [56, 58], "r69": 56, "axiom": [56, 201], "doy": 56, "sc": [56, 92], "thesi": [56, 65, 221, 259], "generator_product": 56, "sn": [56, 57, 64, 87], "is_abelian": 56, "_random_prec": 56, "82": [56, 92, 101, 234], "proport": [56, 66, 221, 253], "226": 56, "227": 56, "is_altern": 56, "quicker": [56, 105], "taxonomi": 56, "is_cycl": 56, "p_": [56, 61, 65, 92, 184, 227, 230, 235], "p_i": [56, 61, 105], "equiv": [56, 66, 70, 105, 209, 224, 227], "pmod": [56, 65, 66, 70, 101, 224], "p_j": [56, 61], "r70": 56, "35": [56, 59, 68, 70, 78, 79, 92, 101, 105, 131, 209, 214, 227, 230, 234], "rose": 56, "is_dihedr": 56, "di1": 56, "827273": 56, "di2": 56, "kconrad": [56, 234], "uconn": [56, 234], "blurb": [56, 234], "grouptheori": 56, "di3": 56, "dihedral2": 56, "di4": 56, "is_elementari": 56, "is_nilpot": [56, 101], "lower_central_seri": 56, "is_solv": 56, "is_norm": [56, 177], "gr": 56, "is_perfect": [56, 105], "is_polycycl": 56, "is_primit": [56, 205, 210], "cardin": [56, 57, 60, 201, 222], "badli": 56, "random_stab": 56, "g3": [56, 115], "is_symmetr": [56, 96], "is_transit": 56, "is_trivi": 56, "cba": [56, 235, 252], "mainli": [56, 73, 101, 106, 184, 194, 207, 224, 227, 230], "max_div": 56, "siev": [56, 105], "nonempti": [56, 252], "moreov": [56, 66, 90, 195, 201, 202, 207, 215, 264], "congruenc": [56, 65, 105, 224, 227], "p_0": [56, 61, 83, 224, 227], "intransit": 56, "normal_closur": 56, "adjoin": [56, 202], "yx": [56, 189, 198], "73": [56, 64, 65, 78, 105, 230], "74": [56, 70, 105], "orb": 56, "orbit_transvers": 56, "orbit_rep": 56, "send": [56, 65, 66, 71, 105, 201, 230, 232], "79": [56, 57, 109], "pointwise_stabil": 56, "pointwis": [56, 63], "p_k": [56, 105], "p20": 56, "stab": 56, "schreier_sims_increment": [56, 63], "polycyclicgroup": 56, "eliminate_gen": 56, "gen_count": 56, "b1": [56, 61, 73, 105, 108, 109, 120, 129, 146, 189, 205, 214, 224, 227, 230, 265], "b_r": 56, "slp_dict": 56, "93": [56, 208], "schreier_sims_random": [56, 63], "consec_succ": 56, "consec": 56, "_succ": 56, "97": [56, 65, 66, 105, 207], "sift": [56, 63, 252], "amend": 56, "unsuccess": [56, 63], "accordingli": [56, 202, 209], "halt": 56, "signifi": [56, 65, 108, 210, 234], "g_t": 56, "leq": [56, 64, 66, 73, 90, 101, 105, 199, 207, 209, 220, 221, 227, 234], "prop": [56, 209], "init_subgroup": 56, "supergroup": 56, "sought": [56, 105, 164, 174, 226, 232, 233], "prune": 56, "prop_even": 56, "lengthi": 56, "114": [56, 105], "117": [56, 73], "terribl": 56, "crucial": [56, 64, 204], "len1": 56, "len2": 56, "len3": 56, "transitivity_degre": 56, "fold": [56, 65, 71, 214, 221, 226], "a_2": [56, 66, 87, 101, 207, 224, 227, 230, 234, 291], "a_k": [56, 66, 211, 217], "arrang": [57, 115, 124, 144, 146, 223, 227, 240], "r74": 57, "pretty_print": [57, 93, 126, 131, 132, 136, 137, 138, 140, 141, 142, 144, 147, 189, 191, 193, 194, 197, 198, 214], "understood": [57, 105, 184, 201, 205, 210], "economi": 57, "caution": [57, 65, 71, 214, 226], "indexerror": [57, 101, 210], "autos": [57, 104], "watch": 57, "print_cycl": 57, "econom": [57, 92, 252], "retain": [57, 65, 71, 73, 92, 107, 210, 215, 223, 226], "biject": [57, 59, 66, 96, 201], "full_cyclic_form": 57, "rmul": 57, "unrank_lex": 57, "r78": 57, "zo42": 57, "from_sequ": 57, "a1": [57, 61, 65, 93, 96, 105, 109, 129, 146, 153, 230, 234, 235, 265, 291], "a2": [57, 61, 65, 94, 96, 105, 109, 129, 146, 153, 203, 234, 235, 265, 291], "a3": [57, 61, 65, 94, 96, 146, 265, 291], "perfectli": [57, 64, 65, 66, 207, 210, 213], "skiena": 57, "ma": [57, 64, 134], "1990": [57, 90, 224, 259], "r75": 57, "wendi": 57, "myrvold": 57, "ruskei": [57, 252], "2001": [57, 105, 208], "lett": 57, "septemb": [57, 249], "281": 57, "284": [57, 105], "1016": [57, 252], "s0020": 57, "0190": 57, "01": [57, 65, 69, 129, 173, 208, 226, 252], "00141": 57, "r76": 57, "kreher": 57, "stinson": 57, "1999": [57, 101, 208, 213, 230], "r77": 57, "graham": [57, 70, 71, 105], "patashnik": 57, "foundat": [57, 208, 209], "1994": [57, 207, 208, 210], "php": [57, 105, 227, 234], "oldid": 57, "499948155": 57, "product_and_invers": 57, "r79": 57, "lehmer_cod": 57, "appliedpermut": 57, "magic": [57, 226, 245, 283], "_array_form": 57, "ascent": 57, "ie": [57, 227], "descent": [57, 227], "fg": [57, 67, 230, 233], "gf": [57, 66, 201, 203, 204, 207, 209], "r80": 57, "commutes_with": [57, 240], "cycle_structur": 57, "from_inversion_vector": 57, "get_adjacency_dist": 57, "n_adj": 57, "reev": 57, "colin": 57, "landscap": 57, "annal": 57, "86": [57, 101, 145, 213, 223], "473": 57, "josephu": 57, "get_precedence_matrix": 57, "get_precedence_dist": 57, "get_adjacency_matrix": 57, "get_positional_dist": 57, "inversion_vector": 57, "lesser": [57, 111, 210], "lehmer": 57, "ith": [57, 94, 105, 205, 211, 233, 234], "variat": [57, 65, 207, 221, 230], "r81": 57, "eng": 57, "chula": 57, "prabha": 57, "algo2008": 57, "htm": [57, 73, 92, 227], "is_singleton": 57, "is_odd": 57, "shuffl": [57, 101, 291], "012345": 57, "345": 57, "253": 57, "2531": 57, "25314": 57, "253140": 57, "r82": 57, "flavius_josephu": 57, "r83": 57, "josephus_problem": 57, "r84": 57, "20171008094331": 57, "wou": 57, "burtonl": 57, "trim": [57, 143], "unmov": 57, "mul_inv": 57, "next_nonlex": 57, "nonlex": 57, "rank_nonlex": 57, "unrank_nonlex": 57, "next_trotterjohnson": [57, 252], "trotter": 57, "johnson": [57, 101], "generate_bel": [57, 252], "rank_trotterjohnson": 57, "unrank_trotterjohnson": 57, "_af_par": 57, "pseudo": [57, 101, 105, 205, 207, 210], "inv_perm": 57, "enforc": [57, 131], "rmul_with_af": 57, "ascend": [57, 92, 252], "r85": 57, "transposition_": 57, "flexibl": [57, 65, 129, 146, 197, 200, 204, 233, 281], "cn": [57, 214, 290], "2n": [57, 64, 70, 73, 92, 96, 111, 116, 142, 199, 217, 224], "dn": [57, 234], "polyhedr": 58, "psg": 58, "platon": 58, "solid": [58, 79, 123, 200, 269], "tetrahedr": 58, "octahedr": 58, "icosahedr": 58, "r86": 58, "polyhedralgroup": 58, "polyhedra": 58, "h5": 58, "heinz": 59, "caylei": [59, 96], "r87": 59, "labeledtre": 59, "tree_repr": 59, "prufer_rank": 59, "prev": [59, 65], "prufer_repr": 59, "to_pruf": 59, "778": 59, "779": 59, "777": [59, 68], "1296": 59, "to_tre": 59, "r88": 59, "hamberg": 59, "erlend": 59, "2010": [59, 231, 252], "06": [59, 65, 131, 199, 234], "compact": [59, 65, 112, 124, 146, 177, 194, 210, 214, 232, 249], "next_binari": 60, "prev_binari": 60, "bitlist_from_subset": 60, "subset_from_bitlist": 60, "superset_s": 60, "iterate_binari": 60, "iterate_graycod": 60, "prev_grai": 60, "next_grai": 60, "next_lexicograph": 60, "prev_lexicograph": 60, "rank_binari": 60, "unrank_binari": 60, "rank_grai": 60, "unrank_grai": 60, "rank_lexicograph": 60, "43": [60, 101, 105, 108, 109, 234, 291], "super_set": 60, "subset_indic": 60, "ksubset": 60, "itertool": [60, 252], "tensor_can": [61, 240], "msym": 61, "contravari": [61, 101, 240, 241], "covari": [61, 67, 101, 234, 240, 241], "d0": 61, "base_i": 61, "gens_i": 61, "n_i": [61, 207, 232], "sym_i": 61, "canonicalize_na": 61, "exchang": [61, 66, 101, 199, 203, 252], "anticommut": [61, 166, 168, 178, 179, 240, 276], "canonical_fre": 61, "slot": [61, 163, 235, 239, 240, 286], "tensor_gen": 61, "list_free_indic": 61, "double_coset_can_rep": 61, "reintroduc": 61, "antisymmetr": [61, 67, 96, 179, 240], "d2": [61, 189, 201, 221, 234, 252, 259], "ord": [61, 66, 101], "t_c": 61, "get_symmetric_group_sg": [61, 240], "bsgs_direct_product": 61, "base2a": 61, "gens2a": 61, "t0": 61, "t1": [61, 81, 82, 105, 120, 126, 227, 234], "a_m": [61, 230], "a_n": [61, 66, 73, 90, 94, 184, 202, 207, 209, 217, 227, 230, 291], "_a": [61, 73, 179, 210], "_b": [61, 73, 179], "base_f": 61, "gens_f": 61, "base1": 61, "gens1": 61, "base_a": 61, "gens_a": 61, "sgen": 61, "s_transvers": 61, "butler": [61, 240], "portug": [61, 240], "grow": [61, 65, 90, 101, 105, 204, 207], "observ": [61, 87, 90, 168, 198, 201, 224, 227, 230, 234, 268, 291], "ind": [61, 216, 240], "d3": [61, 221], "a0": [61, 230, 291], "a5": [61, 65], "leftrightarrow": 61, "_af_rmul": 61, "t_": [61, 70], "b0": [61, 73, 205, 224, 230], "d_": [61, 224], "p0": [61, 75, 209, 230], "dbase": 61, "recomput": [61, 210], "d_i": [61, 90, 184], "s_0": 61, "d_0": [61, 66], "b_0": [61, 66, 70, 224, 227, 230], "b_j": [61, 63, 73, 90, 224], "sx": 61, "trace": [61, 96, 98, 116, 146, 207, 214, 234, 235, 236, 238, 252, 287], "h_n": [61, 73, 92, 210, 233], "tab1": 61, "get_transvers": 61, "antisym": 61, "base2": 61, "gens2": 61, "_cmp_perm_list": 62, "ls1": 62, "ls2": 62, "_naive_list_centr": 62, "_verify_centr": 62, "_verify_normal_closur": 62, "_base_ord": 63, "base_ord": 63, "backtrack": 63, "108": [63, 109], "132": [63, 70, 189], "r89": 63, "_distribute_gens_by_bas": 63, "_strong_gens_from_distr": 63, "_orbits_transversals_from_bsg": 63, "_handle_precomputed_bsg": 63, "transversals_onli": 63, "slp": 63, "_remove_gen": 63, "new_gen": 63, "r90": 63, "r91": 63, "recurr": [64, 70, 87, 101, 209, 220, 226, 230, 234, 254], "annihil": [64, 83, 84, 88, 155, 179, 232], "is_hypergeometr": 64, "binomi": [64, 65, 69, 70, 73, 105, 210, 214, 219, 226, 230, 234, 252, 291], "ff": [64, 66, 70, 199, 202, 203, 204, 209, 210], "rise": [64, 70, 73, 199, 226, 230, 234, 263], "hypersimp": [64, 226], "quotient": [64, 65, 68, 71, 105, 201, 202, 204, 207, 210, 224, 226, 230], "dummy_vari": 64, "karr": 64, "quad": [64, 65, 67, 69, 73, 92, 96], "exclus": [64, 65, 71, 95, 101, 207, 283], "typeset": [64, 214], "doit": [64, 65, 67, 70, 71, 73, 92, 98, 115, 156, 158, 160, 171, 173, 176, 177, 179, 189, 199, 210, 216, 221, 226, 230, 231, 234, 236, 259, 262, 263, 265, 266, 281, 286], "seemingli": [64, 233], "r92": 64, "michael": [64, 208, 213], "april": 64, "1981": [64, 208], "305": 64, "350": [64, 126], "dl": [64, 198, 205, 208, 226], "1145": [64, 205, 208, 226], "322248": 64, "322255": 64, "r93": 64, "sigma_not": 64, "r94": 64, "empty_sum": 64, "euler_maclaurin": [64, 69], "eval_integr": 64, "maclaurin": [64, 69], "endpoint": [64, 65, 69, 78, 195, 222, 266], "28333333333333": 64, "sstr": [64, 194, 214], "full_prec": [64, 214], "26629073187415": 64, "0175000000000000": 64, "soon": [64, 65, 129, 184, 211], "eval_zeta_funct": 64, "is_absolutely_converg": 64, "sequence_term": 64, "is_converg": 64, "r95": 64, "absolute_converg": 64, "analogi": [64, 207], "prod_": [64, 70, 73, 90, 105, 184, 224], "respons": [64, 65, 115, 129, 200, 247], "diverg": [64, 73, 148, 190, 259, 262], "dirichlet": [64, 73, 234], "r96": 64, "convergence_test": 64, "reverse_ord": 64, "selector": [64, 96, 226, 252], "s0": [64, 88, 90, 151], "expr_with_intlimit": [64, 92], "exprwithintlimit": [64, 92], "reorder_limit": 64, "r97": 64, "walli": 64, "w2": [64, 153], "w2e": 64, "risingfactori": [64, 70, 73, 214, 216], "combsimp": [64, 65, 70, 226], "pe": 64, "gammasimp": [64, 65, 226], "r98": 64, "r99": 64, "capital_pi_not": 64, "r100": 64, "empty_product": 64, "r101": 64, "infinite_product": 64, "r102": 64, "expr_with_limit": [64, 92], "exprwithlimit": [64, 92], "change_index": 64, "trafo": 64, "newvar": 64, "mapsto": [64, 90, 96, 209], "p3": [64, 75, 77, 78, 80, 81, 115, 200, 204, 223, 234], "has_empty_sequ": [64, 92], "has_reversed_limit": [64, 92], "has_finite_limit": [64, 92], "____": [64, 69, 92, 151, 202, 215, 234, 252, 292], "___": [64, 69, 92, 93, 101, 202, 226, 234, 239, 252, 290], "rubric": [64, 65], "_____": [64, 234], "gosper": 64, "gosper_norm": 64, "monic": [64, 73, 201, 202, 205, 207, 209, 210, 213], "gcd": [64, 65, 66, 101, 105, 175, 204, 205, 208, 209, 210, 214, 226, 227], "gosper_term": 64, "f_k": [64, 124, 141, 207], "g_n": [64, 70, 210], "f_n": [64, 70, 73, 201, 207, 210, 230], "gosper_sum": 64, "r103": 64, "marko": 64, "petkovsek": [64, 232], "herbert": 64, "doron": 64, "zeilberg": [64, 232], "ak": [64, 216], "peter": [64, 70, 73, 105, 145, 196, 210, 252], "ltd": 64, "welleslei": 64, "usa": [64, 208], "1997": [64, 90, 105, 208, 224], "convert_xor": [65, 107], "09": [65, 113, 199], "xor": [65, 68, 95, 107, 214, 283], "sympifyerror": 65, "coerc": [65, 143, 207], "cooper": 65, "shouldn": [65, 211], "unsanit": [65, 253, 280], "bitcount": 65, "improperli": 65, "unbound": [65, 239], "23903": 65, "fallback": [65, 93, 179, 194, 204, 214, 232], "ast": [65, 214], "mylist1": 65, "mylist": 65, "mylist2": 65, "xxx": [65, 92, 101, 252, 254], "autosimplif": [65, 223, 226], "kern": 65, "r106": 65, "7649": 65, "r105": 65, "r109": 65, "r107": 65, "r108": 65, "r110": 65, "r111": 65, "r112": 65, "r104": 65, "negativeinfin": [65, 214], "complexinfin": [65, 115], "_assumptions_orig": 65, "recreat": [65, 123], "isfinit": 65, "__cacheit": 65, "maxsiz": 65, "cacheit": 65, "sympy_use_cach": 65, "_arg": [65, 71], "as_mut": [65, 97, 98], "as_content_primit": [65, 101, 202, 210], "stub": 65, "as_dummi": [65, 92], "_0": [65, 70, 90, 96, 101, 210, 253], "_r": [65, 179, 224, 233], "bound_symbol": [65, 92], "typeinfo": 65, "truli": [65, 73, 184], "piec": [65, 69, 224, 247], "numbersymbol": [65, 214], "scan": [65, 203], "appliedundef": 65, "canonical_vari": 65, "class_kei": 65, "sorted_class": 65, "eg": [65, 129, 186, 233], "fromit": 65, "has_fre": 65, "has_xfre": 65, "exp_polar": [65, 71, 73, 224], "dif": 65, "_prec": 65, "r_": [65, 117, 180, 211], "repl_dict": 65, "rcall": [65, 67], "simul": [65, 129, 146, 213], "abus": [65, 240], "succe": [65, 90, 95, 105, 169, 209, 232], "newtyp": 65, "intuit": [65, 144, 184, 230], "is_mul": 65, "is_add": [65, 233], "mysin": [65, 253, 280], "_eval_rewrite_as_": 65, "_eval_rewrite_as_co": 65, "tie": [65, 252], "delai": [65, 113, 143, 223, 245, 281], "unsort": [65, 119, 188], "333333333333333333333": 65, "333333333333333314830": 65, "wildcard": [65, 226], "evalfmixin": 65, "registri": 65, "metaprogram": 65, "mostli": [65, 71, 92, 101, 146, 174, 197, 201, 213, 214, 224, 232, 290], "__truediv__": [65, 205], "metaclass": 65, "class_nam": 65, "mysingleton": 65, "_eval_is_g": 65, "_eval_is_eq": 65, "args_cnc": 65, "cset": 65, "split_1": 65, "suppress": [65, 107, 243, 250], "as_coeff_add": 65, "dep": [65, 230], "as_coeff_expon": 65, "as_coeffici": 65, "zz": [65, 70, 87, 88, 92, 98, 101, 102, 105, 126, 189, 198, 201, 202, 203, 204, 207, 209, 210, 211, 212, 229], "coeff_monomi": [65, 210], "polytool": [65, 210, 233], "as_coefficients_dict": 65, "inquiri": 65, "expand_mul": [65, 90], "121": [65, 70, 105, 115, 189, 232], "84": [65, 69, 105], "separatevar": [65, 226, 230], "n3": [65, 129], "logx": [65, 221], "cdir": 65, "_eval_as_leading_term": 65, "as_numer_denom": [65, 232], "as_ordered_factor": 65, "as_ordered_term": 65, "as_powers_dict": 65, "lost": 65, "as_real_imag": [65, 71, 96, 215], "as_term": 65, "aseri": 65, "hir": 65, "asymptot": [65, 90, 115, 281], "hierarch": 65, "normalis": [65, 216], "induc": [65, 96, 209, 223, 252], "gruntz": [65, 216], "majorli": 65, "mrv": [65, 221], "overal": [65, 186, 200, 232], "till": [65, 108, 109, 129, 230], "r113": 65, "dominik": [65, 216], "proc": [65, 205, 232], "1993": [65, 208], "symp": [65, 205], "239": 65, "244": [65, 207], "r114": 65, "p90": 65, "r115": 65, "asymptotic_expans": 65, "_first": [65, 71], "factor_term": [65, 137, 210, 223, 226], "distribute_order_term": [65, 226], "compute_leading_term": 65, "could_extract_minus_sign": 65, "signsimp": [65, 137, 226], "failing_express": 65, "modulu": [65, 66, 68, 73, 75, 81, 96, 105, 108, 109, 201, 205, 207, 209, 210, 213, 233], "power_bas": [65, 96], "power_exp": [65, 96], "multinomi": [65, 96, 105, 234], "extract_addit": 65, "extract_multipl": 65, "extract_branch_factor": 65, "allow_half": 65, "fourier_seri": [65, 217], "geto": 65, "getn": 65, "mod_invers": [65, 210], "is_algebraic_expr": 65, "is_rational_funct": 65, "r116": 65, "algebraic_express": 65, "is_const": 65, "constanc": 65, "failing_numb": 65, "is_meromorph": 65, "meromorph": [65, 73], "multivalu": [65, 71], "cut": [65, 70, 71, 73, 81, 90, 201, 224, 249, 255, 291], "hit": [65, 286], "is_polynomi": 65, "rational_funct": 65, "leadterm": 65, "xlim": [65, 200], "lseri": 65, "exaxmpl": 65, "nseri": 65, "_eval_nseri": 65, "innermost": 65, "disadvantag": 65, "met": [65, 111, 227, 233, 248, 291], "poleerror": 65, "nsimplifi": [65, 69, 226], "radsimp": [65, 226], "removeo": [65, 146, 214, 281], "chop": [65, 69, 73, 96, 101, 232, 280], "lazi": [65, 98, 210], "smooth": [65, 69, 105, 216], "taylor_term": [65, 71], "previous_term": [65, 71], "wildfunct": 65, "dummy_index": 65, "_dummy_10": 65, "contigu": [65, 224, 247], "x4": [65, 70, 204], "x5": [65, 70, 204], "x6": [65, 204], "x7": [65, 204], "x8": [65, 204], "x9": [65, 204], "x50": 65, "x51": 65, "y3": [65, 204], "y4": 65, "xa": [65, 202, 207], "xb": [65, 255], "xc": [65, 178, 255], "disambigu": 65, "x01": 65, "x02": 65, "x11": 65, "x12": 65, "escap": [65, 107, 200, 214, 255], "undefinedfunct": [65, 191, 214, 246, 253], "f821": [65, 248], "cofactor": [65, 101, 205, 207, 210], "lcm": [65, 105, 205, 207, 210, 214], "50000000000000": [65, 69], "100000000000000000000": 65, "1e20": 65, "00000000000000e": 65, "23456789123456789": 65, "23456789123457": 65, "00100": 65, "sent": [65, 92, 226, 232], "789": [65, 105], "123_456": 65, "123456789": 65, "12e": 65, "012": 65, "60e2": 65, "6000": 65, "600e": 65, "125": [65, 69, 92, 105, 205, 220, 227], "099609": 65, "12500": 65, "12500000000000000000": 65, "5404319552844595": 65, "54": [65, 101, 109, 207, 213, 252], "29999999999999998890": 65, "30000000000000000000": 65, "_mpf_": [65, 204], "4915": 65, "70": [65, 66, 82, 92, 101, 105, 213, 214, 227, 234, 255], "307": 65, "mpf": [65, 204, 205], "is_float": 65, "unprejud": 65, "3602879701896397": 65, "18014398509481984": [65, 226], "limit_denomin": 65, "320": 65, "75": [65, 68, 203, 234, 259], "use_tri": [65, 105], "use_rho": [65, 105], "use_pm1": [65, 105], "factorint": [65, 105, 209, 210, 249], "trial": [65, 105, 207, 219, 223, 230, 234], "max_denomin": 65, "1000000": [65, 105], "141592653589793": 65, "311": [65, 105], "discard": [65, 209, 214, 233], "99999999999999999999": 65, "algebraicnumb": [65, 205, 209, 213], "hookrightarrow": 65, "minpoli": [65, 204, 205, 209], "dmp": [65, 201, 205, 210], "anp": [65, 204, 205, 209, 210], "to_list": [65, 203, 205], "minpoly_of_el": 65, "414213562": 65, "scratch": [65, 184], "6x": [65, 207], "to_number_field": [65, 209], "to_root": 65, "primitive_el": [65, 204, 205, 209], "knew": [65, 291], "golden": [65, 69, 105], "5th": [65, 146, 207, 209], "cyclotom": [65, 205, 207, 208, 209, 210], "cyclotomic_poli": [65, 209, 210], "61803398874989": 65, "2i": 65, "a6": 65, "a6_wrong": 65, "309016994374947": 65, "951056516295154": 65, "field_el": 65, "is_alias": 65, "is_primitive_el": 65, "native_coeff": 65, "to_algebraic_integ": 65, "to_primitive_el": 65, "Its": [65, 71, 81, 146, 177, 203, 207, 214, 222], "a_prim": 65, "number_cl": 65, "realnumb": 65, "igcd": [65, 105, 202], "greatest": [65, 70, 75, 105, 202, 204, 205, 207, 208, 210, 213], "euclid": [65, 207, 208], "r117": 65, "euclidean_algorithm": 65, "ilcm": [65, 105], "seterr": 65, "r118": 65, "r119": 65, "1_": 65, "28number": 65, "negativeon": [65, 71, 286], "r120": 65, "88": [65, 101, 105], "921_": 65, "r121": 65, "one_half": 65, "holder": 65, "ieee": [65, 66], "754": 65, "r122": 65, "affin": [65, 66, 80, 201], "compactif": 65, "r123": 65, "tild": [65, 71, 235], "exp1": [65, 214], "718281828": 65, "napier": 65, "r124": 65, "e_": [65, 70, 101], "28mathematical_const": 65, "r125": 65, "imaginary_unit": [65, 214], "141592654": 65, "circumfer": [65, 75], "diamet": [65, 75], "area": [65, 75, 77, 81, 82, 108, 109], "is_irr": 65, "r126": 65, "mascheroni": [65, 73], "5772157": 65, "recur": 65, "harmon": [65, 70, 105, 117, 158, 199, 214, 276], "lim": [65, 221, 281], "limits_": [65, 199, 216, 285], "ln": [65, 71, 92, 214, 216, 230, 234, 291], "r127": 65, "93mascheroni_const": 65, "catalan": [65, 70, 214], "91596559": 65, "r128": 65, "27s_constant": 65, "goldenratio": [65, 69, 215, 226], "r129": 65, "golden_ratio": 65, "tribonacciconst": 65, "tribonacci": [65, 70], "fibonacci": [65, 69, 70, 105], "predetermin": [65, 245], "8392867552141611326": 65, "r130": 65, "generalizations_of_fibonacci_numb": [65, 70], "tribonacci_numb": [65, 70], "modulo": [65, 66, 70, 102, 105, 175, 201, 203, 204, 205, 207, 209, 210, 211, 213, 214, 217, 226], "r131": 65, "modular_multiplicative_invers": 65, "r132": 65, "extended_euclidean_algorithm": 65, "equal_valu": 65, "verion": 65, "compound": [65, 134, 177], "r133": 65, "20033": 65, "oscil": [65, 276], "conform": [65, 233, 238, 239, 252], "r134": 65, "r135": 65, "zero_to_the_power_of_zero": 65, "r136": 65, "indeterminate_form": 65, "as_base_exp": [65, 71, 72, 252], "expand_power_bas": [65, 226], "integer_nthroot": [65, 71, 105], "floor": [65, 71, 105, 123, 204, 205, 214, 234], "integer_log": 65, "geq": [65, 66, 73, 101, 210, 227, 234, 291], "factor_": [65, 66, 105, 210, 227], "perfect_pow": [65, 105], "infix": 65, "matmul": [65, 98, 203], "as_coef_mul": 65, "undesir": [65, 119, 129, 143, 202, 205, 224], "4596": 65, "5728": 65, "suspect": [65, 105], "5706": 65, "moot": 65, "off": [65, 75, 90, 96, 104, 106, 131, 140, 163, 201, 210, 214, 230, 245, 256, 259, 285], "nb": 65, "sensit": [65, 115, 146, 200, 207, 226, 245], "assocop": 65, "prod": [65, 204, 211, 223], "matadd": [65, 98, 214], "as_coef_add": 65, "extract_leading_ord": 65, "commutative_part": 65, "noncommutative_part": 65, "order_symbol": 65, "subprocess": [65, 214, 245, 246], "dividend": [65, 205], "eager": [65, 253], "61": [65, 66, 70, 81, 101, 105, 210, 216], "712524808": 65, "3744312326": [65, 70], "rop": 65, "validrelationoper": 65, "greaterthan": [65, 214], "lessthan": [65, 214], "strictlessthan": [65, 214, 255], "lt": [65, 210, 255], "my_equ": 65, "my_inequ": 65, "reversedsign": 65, "_eval_eq": 65, "boolalg": [65, 95], "client": [65, 249], "counterpart": [65, 66, 230, 281], "litter": 65, "oddbal": 65, "minor": [65, 75, 101, 214, 245], "caveat": [65, 210, 283], "succinctli": 65, "annoy": 65, "succinct": 65, "r137": 65, "operar": 65, "circuit": [65, 163, 166, 276], "greaterthanobject": 65, "__bool__": 65, "335": 65, "march": 65, "2012": 65, "r138": 65, "r139": 65, "r140": 65, "mdarg": 65, "fgh": 65, "vsin": 65, "vdiff": 65, "narg": [65, 207], "naturals0": [65, 214, 222, 233, 234], "evalul": 65, "fairli": [65, 73, 90, 131, 139, 188, 201], "conserv": [65, 124, 142, 190, 262, 268], "136": [65, 101], "temporarili": 65, "implic": [65, 95, 207], "fx": [65, 67, 200, 230, 231], "fxx": 65, "insconsist": 65, "nonvanish": 65, "_diff_wrt": 65, "_sort_variable_count": 65, "vc": 65, "vsort": 65, "collaps": [65, 173, 226], "vsort0": 65, "vi": 65, "dfx": 65, "equidist": 65, "sq2": 65, "xl": 65, "d2fdxdy": 65, "doit_numer": 65, "z0": [65, 221], "unifi": [65, 147, 203, 205, 207, 209, 210, 222], "zeroth": [65, 209], "idiff": [65, 82], "r141": 65, "legaci": [65, 92, 101, 234], "v5_2": 65, "infunct": 65, "algebraiccomput": 65, "functionclass": [65, 214, 253], "f_real": [65, 72], "f_real_inherit": [65, 72], "is_singular": [65, 72, 88], "holomorph": [65, 72, 90], "superfici": 65, "ss": [65, 205], "denom": [65, 204, 205, 209, 226], "_eval_expand_bas": 65, "_eval_expand_complex": 65, "shut": [65, 210], "unwant": [65, 232, 252], "expand_hint": 65, "_eval_expand_hint": 65, "liabl": [65, 95], "metahint": 65, "myclass": 65, "_eval_expand_doubl": 65, "expand_multinomi": 65, "expand_power_exp": 65, "expand_func": [65, 70, 73], "hyperexpand": [65, 73, 87, 90, 224, 226], "div": [65, 202, 204, 205, 210, 214, 226, 286], "horner": [65, 146, 207, 210], "untouch": 65, "unexpand": [65, 204, 213, 223, 246], "safe": [65, 105, 204, 210, 232, 238, 281], "nfloat": [65, 226], "dkei": 65, "mixin": [65, 252], "maxn": [65, 69, 96], "subresult": [65, 205, 208, 210], "000100000000000000": 65, "precisionexhaust": [65, 69], "maxprec": 65, "quadratur": [65, 69, 92, 230], "oscillatori": [65, 69, 219], "osc": [65, 69], "advers": 65, "1e16": 65, "291": 65, "builtin": [65, 205, 214, 222, 255, 290], "speedup": [65, 101, 106, 207, 211, 253], "framework": [65, 122, 129, 139, 239, 245, 247, 253, 276], "slice": [65, 95, 96, 101, 107, 205, 210, 220, 222, 226, 235, 252], "tuplekind": [65, 96, 222], "parametris": [65, 222], "element_kind": [65, 96, 222], "tuple_count": 65, "setkind": [65, 96], "gcd_term": [65, 210], "isprimit": 65, "_gcd_term": 65, "terms_gcd": [65, 205, 210], "entiti": [65, 75, 78, 79, 81, 82, 90, 129, 144, 195, 233, 268, 277, 287], "broad": [65, 286], "undefinedkind": [65, 96, 222], "lex": [65, 93, 194, 202, 204, 205, 207, 210, 211, 213, 214, 226], "grlex": [65, 93, 194, 205, 210, 213, 214], "grevlex": [65, 93, 194, 202, 207, 210, 213, 214], "rev": 65, "unaffect": [65, 233], "_node": 65, "fastest": [65, 70, 92, 105, 106, 211], "undecor": 65, "breaker": 65, "collis": [65, 104, 214], "wast": [65, 102, 203], "rng": 65, "getstat": 65, "intention": 65, "tn": 65, "td": [65, 214, 290], "randrang": 65, "999": [65, 69], "238": [65, 105], "randint": [65, 101, 207], "ri": [65, 214], "rv": [65, 223, 234, 252], "nonbas": 65, "postord": 65, "descend": [65, 201, 209, 247], "subtre": [65, 214, 249], "cryptograph": 66, "encrypt": 66, "hide": [66, 214], "cipher": 66, "vigener": 66, "hill": [66, 73, 92, 124, 145, 189, 196, 259], "bifid": 66, "rsa": 66, "kid": 66, "elgam": 66, "plaintext": [66, 214], "ciphertext": 66, "monoalphabet": 66, "polyalphabet": 66, "crypto": 66, "az": [66, 115, 227], "hello": [66, 252], "helloworld": 66, "check_and_join": 66, "padded_kei": 66, "puppi": 66, "opqrstuvwxi": 66, "puyoqrstvwx": 66, "artist": 66, "aphras": 66, "ara": 66, "hp": 66, "cycle_list": 66, "mod": [66, 70, 71, 95, 101, 102, 105, 175, 201, 203, 204, 205, 207, 209, 210, 214, 216, 224, 227], "encipher_shift": 66, "msg": [66, 92], "decipher_shift": 66, "gonavybeatarmi": 66, "ct": [66, 94, 207], "hpobwzcfbubsnz": 66, "deciph": 66, "l1": [66, 75, 77, 78, 123, 126, 132, 144, 205, 207, 210, 227, 234], "l2": [66, 77, 78, 123, 126, 132, 165, 181, 205, 207, 234], "caesar": 66, "juliu": 66, "suetoniu": 66, "protect": [66, 214], "militari": 66, "nephew": 66, "augustu": 66, "reportedli": 66, "r142": 66, "caesar_ciph": 66, "r143": 66, "caesarsmethod": 66, "encipher_rot13": 66, "rot13": 66, "caeser": 66, "midwai": 66, "decipher_rot13": 66, "r144": 66, "decrypt": 66, "tbanilorngnezl": 66, "encipher_affin": 66, "_invers": 66, "cx": [66, 109], "recov": [66, 92, 184, 207, 209, 210, 227, 230], "decipher_affin": 66, "r145": 66, "affine_ciph": 66, "reciph": 66, "navi": 66, "beat": 66, "armi": 66, "trobmvenbgbalv": 66, "encipher_atbash": 66, "enciph": 66, "atbash": 66, "hebrew": 66, "decipher_atbash": 66, "tlmzebyvzgzinb": 66, "r146": 66, "encipher_substitut": 66, "oeyag": 66, "034": 66, "60n": 66, "v4b3": 66, "rm4": 66, "immateri": 66, "anyv": 66, "wherebi": 66, "r147": 66, "substitution_ciph": 66, "encipher_vigener": 66, "me": [66, 129, 146, 189, 214, 236], "mondai": 66, "qrgkkthrzqebpr": 66, "krypto": 66, "sculptur": 66, "cia": 66, "headquart": 66, "r149": 66, "decipher_vigener": 66, "alp": 66, "palimpsest": 66, "emufphzlrfaxyusdjkzldkrnshgnfivj": 66, "betweensubtleshadingandtheabsenc": 66, "blais": 66, "sixteenth": 66, "centuri": [66, 201], "diplomat": 66, "invent": [66, 209, 232, 285], "giovan": 66, "batista": 66, "belaso": 66, "1553": 66, "civil": [66, 108], "war": 66, "confederaci": 66, "brass": 66, "nsa": 66, "museum": 66, "fort": 66, "mead": 66, "r148": 66, "sender": 66, "assembl": [66, 90, 221], "concaten": [66, 96, 252], "frequenc": [66, 92, 113, 115, 153, 155, 163, 180], "kasiski": 66, "discov": [66, 90, 119, 238, 287], "babbag": 66, "unbreak": 66, "gonavybeatarmyyesyoucan": 66, "gold": 66, "auto_kei": 66, "goldbuggonavybeatarmyy": 66, "mcydwshkogamkzcelyfgayr": 66, "pt": [66, 74, 75, 76, 78, 79, 80, 81, 220], "vigenere_ciph": 66, "20071116100808": 66, "filebox": 66, "vt": 66, "batman": 66, "goo": 66, "gl": 66, "ijr22d": 66, "decod": 66, "qrgk": 66, "kt": [66, 134], "hrzqe": 66, "bpr": 66, "meetmeonmondai": 66, "encipher_hil": 66, "z_": [66, 226], "r150": 66, "lester": 66, "1920": 66, "r151": 66, "polygraph": 66, "bare": [66, 124], "ceil": [66, 71, 105, 123, 214], "l_1": [66, 70, 116, 199, 224, 240, 252], "l_t": 66, "c_t": 66, "l_i": [66, 199, 224], "decipher_hil": 66, "hill_ciph": 66, "june": [66, 101], "juli": [66, 227], "1929": 66, "306": 66, "312": [66, 189, 232, 259, 261], "ueqdueodoctcwq": 66, "hjeb": 66, "stqq": 66, "ispk": 66, "stzz": 66, "hd": 66, "ormv": 66, "uiki": 66, "encipher_bifid": 66, "polybiu": 66, "printabl": 66, "bifid5": 66, "decipher_bifid": 66, "encipher_bifid5": 66, "encipher_bifid6": 66, "r152": 66, "bifid_ciph": 66, "ieilhhfstsfqy": 66, "ieilh": 66, "hfst": 66, "fqyej": 66, "bmtwmg": 66, "bio": 66, "gold_bug": 66, "hg2sfuei7t": 66, "pug": 66, "heldo": 66, "wor6d": 66, "bifid5_squar": 66, "5x5": 66, "cap": [66, 69, 179, 222, 233], "tradition": [66, 73], "decipher_bifid5": 66, "round_trip": 66, "josi": 66, "osi": 66, "iosi": 66, "qiq": 66, "1901": 66, "felix": 66, "delastel": 66, "onto": [66, 78, 79, 80, 90, 94, 101, 104, 106, 209], "helen": 66, "cryptanalysi": 66, "german": 66, "fridai": 66, "ieilehfstsfxe": 66, "okai": 66, "decipher_bifid6": 66, "8am": 66, "kfkljjhf5mmmktfrgpl": 66, "meetmeonmondayat8am": 66, "bifid6_squar": 66, "6x6": 66, "rsa_public_kei": 66, "totient": [66, 105], "carmichael": [66, 105], "p_n": [66, 70, 73, 92, 210], "multiprim": 66, "land": 66, "reduced_toti": [66, 105], "uniquenss": 66, "rsa_private_kei": 66, "e_0": 66, "canonicalz": 66, "3233": 66, "797": 66, "1577": 66, "multipow": 66, "cryptosystem": 66, "coprim": [66, 92, 105, 175, 207, 227], "30030": 66, "becam": [66, 139], "hardest": 66, "claim": [66, 198, 224, 233], "encipher_rsa": 66, "decipher_rsa": 66, "r153": 66, "rsa_": 66, "28cryptosystem": 66, "r154": 66, "cacr": 66, "uwaterloo": 66, "techreport": 66, "2006": [66, 223], "cacr2006": 66, "r155": 66, "springer": [66, 92, 105, 207, 208, 230], "1007": 66, "bfb0055738": 66, "r156": 66, "itii": 66, "manuscript": [66, 92], "1381": 66, "2753": 66, "413": 66, "1193": 66, "823": 66, "r157": 66, "r158": 66, "r159": 66, "r160": 66, "bmod": [66, 210, 214], "vice": [66, 92, 105, 108, 169, 189, 201, 205, 263, 264, 283], "versa": [66, 92, 105, 108, 169, 189, 201, 205, 263, 264, 283], "asymmetr": [66, 81], "puk": 66, "prk": 66, "chines": [66, 105, 207], "k_1": [66, 105, 207, 224], "k_2": 66, "k_n": [66, 73, 207], "p_3": [66, 197], "k_3": 66, "moduli": [66, 105, 207], "2048": [66, 105, 214], "overhead": [66, 106, 211], "crt": [66, 105, 207], "overcompens": 66, "new_msg": 66, "kid_rsa_public_kei": 66, "grade": [66, 93, 194, 210], "school": [66, 223], "bob": [66, 123], "369": 66, "58": [66, 101, 240], "kid_rsa_private_kei": 66, "encipher_kid_rsa": 66, "200": [66, 96, 101, 105, 108, 113, 259], "161": 66, "decipher_kid_rsa": 66, "pub": [66, 259], "pri": 66, "encode_mors": 66, "sep": [66, 214, 231, 245], "mors": 66, "attack": 66, "flank": 66, "r161": 66, "morse_cod": 66, "decode_mors": 66, "word_sep": 66, "mc": [66, 134], "east": 66, "r162": 66, "lfsr_sequenc": 66, "lfsr": 66, "c_k": 66, "golomb": [66, 105], "g162": 66, "autocorrel": 66, "lim_": [66, 71, 73, 90, 92, 221, 281, 285], "balanc": [66, 145, 201, 234, 245], "solomon": 66, "aegean": 66, "park": 66, "laguna": 66, "1967": [66, 208], "lfsr_autocorrel": 66, "lfsr_connection_polynomi": 66, "massei": 66, "m163": 66, "jame": [66, 207], "synthesi": 66, "bch": 66, "tran": 66, "122": [66, 68, 73], "127": [66, 105], "elgamal_public_kei": 66, "elgamal_private_kei": 66, "1031": 66, "636": 66, "212": [66, 92, 208], "dlp": 66, "is_primitive_root": [66, 105], "encipher_elgam": 66, "encryp": 66, "decipher_elgam": 66, "eucliden": 66, "dh_public_kei": 66, "dh_private_kei": 66, "_p": [66, 179, 205, 207, 209, 221, 224, 232], "_g": 66, "diffi": 66, "hellman": [66, 105], "publicli": 66, "secretli": 66, "dh_shared_kei": 66, "sk": 66, "gm_public_kei": 66, "goldwass": 66, "micali": 66, "gm_private_kei": 66, "b_n": [66, 70, 94, 201, 217], "jacobi_symbol": [66, 105], "reconstruct": [66, 101, 207, 227, 286], "residuos": 66, "entropi": [66, 234], "encipher_gm": 66, "public_kei": 66, "gm": [66, 182], "decipher_gm": 66, "encipher_railf": 66, "rail": 66, "railfenc": 66, "horel": 66, "ollwd": 66, "r165": 66, "rail_fence_ciph": 66, "decipher_railf": 66, "diffgeom": 67, "euclidean": [67, 78, 80, 189, 205, 207, 210], "r166": 67, "chart": [67, 200], "r167": 67, "sussman": 67, "wisdom": 67, "farr": 67, "2013": [67, 77, 96, 289], "cartesian": [67, 108, 147, 152, 166, 169, 174, 195, 200, 201, 222, 233, 252, 263, 264, 266, 267, 276], "polar": [67, 71, 73, 75, 81, 108, 117, 149, 200, 222, 226, 233, 276], "relation_dict": 67, "car2d": 67, "pol": 67, "coordinatesymbol": 67, "jacobian": [67, 101, 143, 232], "jacobian_determin": 67, "r168": 67, "coordinate_system": 67, "base_oneform": 67, "coord_index": 67, "oneform": 67, "base_scalar": 67, "basescalarfield": 67, "base_vector": [67, 259], "coord_funct": 67, "to_si": 67, "coord": [67, 80, 82, 119, 177, 193], "immutabledensematrix": [67, 96, 97, 98, 99, 234], "rn": 67, "r2_r": 67, "r2_p": 67, "jacobian_matrix": 67, "point_to_coord": 67, "coord_si": [67, 262], "imbu": 67, "difficulti": [67, 130], "arriv": [67, 207, 224, 226, 230, 234, 291], "inappropri": 67, "poin": 67, "unappropri": 67, "fy": [67, 200, 231], "ftheta": 67, "basevectorfield": 67, "point_p": 67, "point_r": 67, "s_field": 67, "dxi": 67, "v1": [67, 78, 101, 126, 146, 189, 190, 193, 234, 253, 259, 262, 263, 264, 265], "v_1": [67, 209, 232], "v_2": [67, 209], "e_x": [67, 240], "e_i": [67, 201, 224, 240], "e_r": 67, "c_xy": 67, "c_xr": 67, "unfortun": [67, 69, 106, 213, 227], "e_rho": 67, "form_field": 67, "exterior": [67, 81], "dg": 67, "tensorproduct": [67, 176, 178, 235, 236], "multilinear": 67, "wedg": [67, 90], "tp1": 67, "tp": [67, 151, 178, 205, 236], "wedgeproduct": 67, "wp1": 67, "liederiv": 67, "v_field": 67, "transport": 67, "pushforward": 67, "e_theta": 67, "basecovarderivativeop": 67, "christoffel": 67, "metric_to_christoffel_2nd": 67, "ch": [67, 101, 227], "cvd": 67, "covarderivativeop": 67, "intcurve_seri": 67, "vector_field": [67, 266], "start_point": 67, "f_i": [67, 90, 101, 207, 211], "movement": 67, "intcurve_diffequ": 67, "init_cond": 67, "f_1": [67, 70, 73, 90, 115, 125, 128, 147, 201, 207, 210, 230], "f_0": [67, 70, 125, 207], "vectors_in_basi": 67, "kept": [67, 181, 198, 252, 286], "twoform_to_matrix": 67, "twoform": 67, "e_j": 67, "metric_to_christoffel_1st": 67, "levi": [67, 73, 234, 240], "civita": [67, 73, 240], "metric_to_riemann_compon": 67, "non_trivial_metr": 67, "dtheta": 67, "drho": 67, "metric_to_ricci_compon": 67, "ricci": 67, "fft": [68, 146], "ifft": 68, "ntt": 68, "intt": 68, "fwht": 68, "ifwht": 68, "mobius_transform": 68, "inverse_mobius_transform": 68, "convolution_fft": 68, "convolution_ntt": 68, "convolution_fwht": 68, "convolution_subset": 68, "covering_product": 68, "intersecting_product": 68, "radix": 68, "r169": 68, "coolei": 68, "93tukey_fft_algorithm": 68, "r170": 68, "fastfouriertransform": 68, "r171": 68, "r172": 68, "pz": [68, 113, 240], "643": [68, 105], "767": 68, "387": 68, "415": 68, "384": 68, "353": [68, 101], "r173": 68, "apfloat": 68, "r174": 68, "numbertheoretictransform": 68, "r175": 68, "discrete_fourier_transform_": 68, "r176": 68, "r177": 68, "r178": 68, "wht": 68, "r179": 68, "hadamard_transform": 68, "r180": 68, "fast_walsh": 68, "93hadamard_transform": 68, "r181": 68, "r182": 68, "mobiu": [68, 105], "lattic": [68, 203, 227], "bitmask": 68, "r183": 68, "b6bius_inversion_formula": 68, "r184": 68, "csail": 68, "mit": 68, "rrw": 68, "conv": 68, "r185": 68, "arxiv": [68, 70, 73, 101, 117, 210, 252], "1211": 68, "0189": 68, "r186": 68, "r187": 68, "r188": 68, "888": 68, "444": 68, "1283": 68, "19351": 68, "14219": 68, "15502": 68, "44": [68, 70, 101, 105, 223, 234], "41": [68, 75, 101, 105, 205, 227], "63": [68, 101, 105], "r189": 68, "convolution_theorem": 68, "r190": 68, "333": [68, 105], "555": 68, "222": 68, "666": 68, "15555": 68, "19404": 68, "r191": 68, "r192": 68, "68": [68, 93, 101, 105, 203, 227], "48": [68, 75, 109, 227, 232, 234, 281], "2057": 68, "1870": 68, "r193": 68, "radioeng": 68, "fulltext": 68, "2002": [68, 201, 208, 211], "02_03_40_42": 68, "r194": 68, "r195": 68, "r196": 68, "AND": [68, 95], "327": [68, 230], "r197": 68, "44288293815837": 69, "4429": 69, "4428829381583662470158809900606936986146216893757": 69, "28902548222223624241": 69, "091999668350375232456": 69, "14159265358979": [69, 73, 232], "333333333333333": [69, 204, 226], "1415926535": 69, "7182818284": 69, "100000": [69, 105, 113], "951": 69, "95678796130331164628399634646042209010610577945815": 69, "aleaxit": 69, "100000000000000": 69, "1000000000": 69, "125000000000000000000000000000": 69, "100000000000000005551115123126": 69, "100000000000000000000000000000": 69, "1415": 69, "uncertainti": [69, 184], "003": 69, "31417": 69, "propag": [69, 78, 150, 153], "5000": [69, 108], "50000000000000000000000000000": 69, "varphi": [69, 73, 209, 214, 230], "erron": 69, "34665576869e": 69, "208": [69, 210], "64613129282185e": 69, "60123853010113e": 69, "thousand": [69, 105, 280], "43466557686937456435688527675040625802564660517371780402481729089536555417949051890403879840079255169295922593080322634775209689623239873322471161642996440906533187938298969649928516003704476137795166849228875": 69, "binet": 69, "104": 69, "1336": 69, "portion": [69, 81, 96, 101], "meaningless": 69, "012297": 69, "9562288417661": 69, "956": 69, "29128599706266": 69, "2912859970626635404072825905956005414986193682745": 69, "14159265358979323846264338328": 69, "struggl": [69, 213], "346": 69, "34635637913639": 69, "dealt": [69, 90], "504067061906928": 69, "50406706190692837199": 69, "wrap_lin": [69, 92, 93, 101, 109, 194, 201, 202, 213, 214, 230], "intgrl": 69, "extrapol": [69, 221], "richardson": [69, 221, 233], "slowli": [69, 221], "64493406684823": 69, "577215664901533": 69, "57721566490153286060651209008240243104215933593992": 69, "10000000": [69, 210], "20000000": [69, 210], "693147255559946": 69, "worthwhil": 69, "hypergeometr": [69, 70, 83, 89, 90, 208, 225, 226, 230, 232, 234, 271, 291], "ramanujan": [69, 70, 105], "9801": 69, "1103": 69, "26390": 69, "396": [69, 129], "141592653589793238462643383279502884197169399375105820974944592307816406286208": 69, "99862803482534211706798214808651328230664709384460955058223172535940812848111745": 69, "02841027019385211055596446229489549303819644288109756659334461284756482337867831": 69, "355": [69, 105, 208], "113": [69, 105, 227], "33333": [69, 92], "635": 69, "504": [69, 208], "130198866629986772369127970337": 69, "49": [69, 70, 105, 109, 207, 227], "___________": [69, 109, 230], "bell": [70, 163, 216, 252], "k_sym": 70, "binom": [70, 105, 234, 291], "dotsc": [70, 216], "j_1": [70, 158, 159, 176, 199, 216, 235], "j_2": [70, 158, 159, 176, 199, 216], "dotsb": [70, 216], "atop": [70, 73, 216, 224], "2j_2": [70, 216], "3j_2": [70, 216], "j_": [70, 73, 90, 92, 176, 216, 224, 285], "bernoulli": [70, 73, 210, 214, 230, 232, 234], "877": 70, "4140": 70, "21147": 70, "115975": 70, "846749014511809332450147": 70, "luca": [70, 105, 214, 220], "genocchi": [70, 73, 210], "r198": 70, "bell_numb": 70, "r199": 70, "bellnumb": 70, "r200": 70, "bellpolynomi": 70, "hurwitz": [70, 73], "6k": 70, "appel": [70, 73], "confer": [70, 106, 289], "r205": 70, "66": [70, 96, 101, 210, 214], "1000001": 70, "andr": [70, 210], "appellseq": [70, 210], "bernoulli_poli": [70, 210], "r201": 70, "bernoulli_numb": 70, "r202": 70, "bernoulli_polynomi": [70, 210], "r203": 70, "bernoullinumb": 70, "r204": 70, "bernoullipolynomi": 70, "luschni": [70, 73, 210], "manifesto": 70, "r206": 70, "2009": [70, 73, 105, 199, 210], "06743": [70, 73, 210], "_k": [70, 73, 92, 199, 209, 234], "6435": 70, "pascal": [70, 105], "4th": [70, 71, 87, 101, 105, 146], "195": 70, "r208": 70, "postpon": 70, "156675": 70, "4433": 70, "28625": 70, "granvil": 70, "r209": 70, "r207": 70, "johndcook": 70, "binomial_coeffici": [70, 105], "27s_theorem": [70, 233], "andrew": [70, 82], "20170202003812": 70, "dm": [70, 203, 209], "umontr": 70, "bincoeff": [70, 214], "c_n": [70, 73, 94, 210, 230], "429": [70, 214], "1430": 70, "4862": 70, "39764993382373624267": 70, "020884341620842555705": 70, "r210": 70, "catalan_numb": 70, "r211": 70, "catalannumb": [70, 214], "r212": 70, "r213": 70, "geomet": [70, 201], "mathcircl": 70, "2j": [70, 207, 234], "1385": [70, 210], "272": [70, 210], "7936": [70, 210], "2702765": 70, "4096": 70, "euler_poli": [70, 210], "r214": 70, "euler_numb": 70, "r215": 70, "eulernumb": 70, "r216": 70, "alternating_permut": 70, "r217": 70, "alternatingpermut": 70, "swing": 70, "factorial2": [70, 180, 214], "fallingfactori": [70, 214], "subfactori": [70, 214, 252], "derang": [70, 252], "r219": 70, "generate_derang": [70, 252], "r218": 70, "r220": 70, "double_factori": 70, "texttt": [70, 222], "r221": 70, "r222": 70, "paul": [70, 249], "235": 70, "268": 70, "1995": [70, 208, 226, 232], "f_z": [70, 195, 266], "f_2": [70, 90, 115, 125, 128, 147, 207, 224, 230], "r224": 70, "fibonacci_numb": 70, "r225": 70, "fibonaccinumb": 70, "t_0": [70, 227], "149": [70, 105], "r226": 70, "r227": 70, "tribonaccinumb": 70, "r228": 70, "oei": [70, 73, 105, 210], "a000073": 70, "137": [70, 101, 117], "205": [70, 90, 224], "5269": 70, "761": 70, "280": 70, "83711": 70, "27720": 70, "30247": 70, "9900": 70, "983697455232980674869851942390639915940": 70, "r229": 70, "harmonic_numb": 70, "r230": 70, "harmonicnumb": [70, 214], "r231": 70, "harmonicnumber2": 70, "l_0": [70, 116, 240, 241], "47": [70, 73, 101, 105, 117, 152, 184, 213], "76": [70, 73, 101, 105, 207, 210], "r232": 70, "lucas_numb": 70, "r233": 70, "lucasnumb": 70, "2t": 70, "genocchi_poli": [70, 210], "r234": 70, "genocchi_numb": 70, "r235": 70, "genocchinumb": 70, "r236": 70, "mathcal": [70, 71, 90, 115, 144, 176, 199, 210, 222], "a000111": [70, 210], "zigzag": 70, "li": [70, 73, 81, 92, 105, 126, 179, 214, 269], "50521": [70, 210], "691": 70, "2730": 70, "andre_poli": [70, 210], "r237": 70, "r238": 70, "eulerzigzagnumb": 70, "r239": 70, "irrelev": 70, "r240": 70, "number_theori": 70, "r241": 70, "pentagonal_number_theorem": 70, "multifactori": 70, "pochhamm": [70, 214, 226], "r242": 70, "r243": 70, "pochhammer_symbol": 70, "274": 70, "225": [70, 105, 208], "511": 70, "9330": 70, "34105": 70, "42525": 70, "22827": 70, "5880": 70, "750": 70, "r244": 70, "stirling_numbers_of_the_first_kind": 70, "r245": 70, "stirling_numbers_of_the_second_kind": 70, "multiset": [70, 90, 249, 252], "nc": 70, "nt": [70, 252], "babi": [70, 105, 252], "aa": [70, 199], "bb": [70, 199, 226, 252], "multiset_combin": [70, 252], "aab": [70, 252], "aabc": 70, "aaaabbbbcccc": 70, "m_1": [70, 115, 158, 176, 199, 227], "m_2": [70, 128, 147, 158, 176, 199], "m_k": 70, "r246": 70, "r247": 70, "tinyurl": 70, "cep849r": 70, "ba": [70, 252], "multiset_permut": [70, 252], "r248": 70, "aabbc": 70, "mississippi": [70, 252], "609": 70, "1521": 70, "1768": 70, "1224": [70, 105], "579": 70, "197": 70, "r249": 70, "20210507012732": 70, "csse": 70, "uwa": 70, "au": 70, "cits7209": 70, "707106781186548": 71, "tangent": [71, 75, 77, 81, 92, 211, 230], "643501108793284": 71, "r250": 71, "ib": [71, 134], "complex_conjug": 71, "polar_lift": [71, 73, 226], "periodic_argu": 71, "principal_branch": [71, 90], "r254": 71, "csc": [71, 107, 214, 223], "sec": [71, 92, 113, 209, 214, 223, 291], "acsc": [71, 214], "asec": [71, 214], "acot": [71, 214], "r251": 71, "trigonometric_funct": 71, "r252": 71, "r253": 71, "elementaryfunct": 71, "trigonometryangl": 71, "r255": 71, "r256": 71, "r257": 71, "r258": 71, "r259": 71, "r260": 71, "cotang": [71, 211], "r261": 71, "r262": 71, "r263": 71, "secant": [71, 210], "r264": 71, "r265": 71, "r266": 71, "cosec": 71, "r267": 71, "r268": 71, "r269": 71, "unnorm": [71, 73], "qquad": [71, 184, 207], "jn": [71, 73, 176, 210, 214, 285], "spheric": [71, 117, 123, 158, 199, 200, 210, 259, 263, 264, 285], "r270": 71, "sinc_funct": 71, "asinh": [71, 214], "r271": 71, "inverse_trigonometric_funct": 71, "r272": 71, "r273": 71, "r274": 71, "r275": 71, "r276": 71, "r277": 71, "r278": 71, "r279": 71, "arctan": [71, 211, 214], "acoth": [71, 214], "r280": 71, "r281": 71, "arccot": [71, 214], "r285": 71, "r282": 71, "r283": 71, "r284": 71, "arcsec": [71, 214], "r286": 71, "r287": 71, "r288": 71, "arccsc": [71, 214], "quadrant": [71, 205, 233], "clock": [71, 223], "reurn": 71, "r289": 71, "r290": 71, "r291": 71, "arctan2": [71, 214], "hyperbolicfunct": 71, "coth": [71, 214, 226], "acosh": [71, 214], "sech": [71, 214], "csch": [71, 214], "asech": [71, 214], "r292": 71, "hyperbolic_funct": 71, "r293": 71, "r294": 71, "arcsech": [71, 214], "acsch": [71, 214], "r295": 71, "r296": 71, "r297": 71, "arccsch": [71, 214], "567": 71, "r298": 71, "r299": 71, "ceilingfunct": 71, "r300": 71, "r301": 71, "floorfunct": 71, "roundfunct": 71, "r302": 71, "lfloor": [71, 205, 233, 234], "rfloor": [71, 205, 233, 234], "fractional_part": 71, "r303": 71, "fractionalpart": 71, "lambertw": [71, 211, 214, 232, 233, 292], "r304": 71, "w_k": 71, "635564016364870": 71, "34747534407696": 71, "41624341514535": 71, "lambert_w_funct": 71, "exprcondpair": 71, "cond": [71, 90, 92, 222], "piecewise_fold": 71, "folded_cond": 71, "ITE": [71, 95, 214], "piecewise_exclus": 71, "_eval_integr": [71, 92], "piecewise_integr": 71, "as_expr_set_pair": 71, "skip_nan": 71, "mutual": [71, 90, 198], "conjunct": [71, 95, 200, 224, 245, 291], "identityfunct": 71, "supremum": [71, 222], "r305": 71, "directed_complete_partial_ord": 71, "r306": 71, "lattice_": 71, "28order": 71, "global_paramet": 71, "real_root": [71, 210, 232], "rootoftool": [71, 101, 210], "r307": 71, "square_root": 71, "r308": 71, "r309": 71, "root_of_un": 71, "r310": 71, "principal_valu": [71, 92], "r311": 71, "cuberoot": 71, "powdenest": [71, 226], "misc": [71, 96, 255], "r312": 71, "r313": 71, "r314": 71, "cube_root": 71, "r315": 71, "int_": [73, 89, 90, 92, 210, 217, 281, 285], "sum_i": [73, 221], "is_simpl": 73, "tensor_funct": 73, "kroneckerdelta": [73, 98, 179, 214, 226], "r316": 73, "deltafunct": [73, 92], "h0": 73, "electron": [73, 117, 223], "signal": [73, 95, 105, 113, 115, 146, 207, 286], "improp": [73, 92], "r317": 73, "heavisidestepfunct": 73, "r318": 73, "iv": [73, 211], "105": [73, 105, 210, 227], "parg": 73, "singularity_funct": 73, "singularityfunct": [73, 92, 108], "macaulai": 73, "heavisidediracdelta": 73, "r319": 73, "r320": 73, "r321": 73, "r322": 73, "r323": 73, "setminu": [73, 90], "17805383034794561964694160130": 73, "65092319930185633889": 73, "8724366472624298171": 73, "r324": 73, "r325": 73, "r326": 73, "loggammafunct": 73, "r327": 73, "espinosa": 73, "moll": 73, "r332": 73, "19093197": 73, "5173168": 73, "ni": [73, 105], "r328": 73, "polygamma_funct": 73, "r329": 73, "polygammafunct": 73, "r330": 73, "r331": 73, "polygamma2": 73, "2004": [73, 208, 227], "115": 73, "r333": 73, "digamma_funct": 73, "r334": 73, "digammafunct": 73, "r335": 73, "r336": 73, "trigamma_funct": 73, "r337": 73, "trigammafunct": 73, "r338": 73, "int_x": 73, "_1f_1": 73, "confluent": [73, 224], "xt": 73, "expint": [73, 214], "r339": 73, "incomplete_gamma_funct": 73, "upper_incomplete_gamma_funct": 73, "r340": 73, "r341": 73, "r342": 73, "gamma2": 73, "r343": 73, "gamma3": 73, "r344": 73, "exponential_integr": 73, "relation_with_other_funct": 73, "int_0": [73, 90, 92, 281, 291], "r345": 73, "lower_incomplete_gamma_funct": 73, "r346": 73, "r347": 73, "r348": 73, "r349": 73, "multigamma": 73, "gamma_p": 73, "r350": 73, "multivariate_gamma_funct": 73, "beta_funct": 73, "eulerian": 73, "02671848900111377452242355235388489324562": 73, "2112723729365330143": 73, "7655283165378005676": 73, "r351": 73, "r352": 73, "betafunct": 73, "r353": 73, "error_funct": 73, "999999984582742099719981147840": 73, "1296959": 73, "73071763923152794095062": 73, "r354": 73, "r355": 73, "r356": 73, "r357": 73, "0000000154172579002800188521596734869": 73, "r358": 73, "r359": 73, "r360": 73, "r361": 73, "5648024145755525987042919132": 73, "995322265018952734162069256367": 73, "r362": 73, "r363": 73, "r364": 73, "r365": 73, "179143454621291692285822705344": 73, "r366": 73, "inverse_funct": 73, "r367": 73, "inverseerf": [73, 214], "r368": 73, "r369": 73, "inverseerfc": [73, 214], "r370": 73, "inverseerf2": 73, "fresnelintegr": 73, "343415678363698242195300815958": 73, "fresnelc": [73, 214, 224], "r371": 73, "fresnel_integr": 73, "r372": 73, "r373": 73, "r374": 73, "r375": 73, "wrench": 73, "jr": 73, "vicki": 73, "allei": 73, "488253406075340754500223503357": 73, "r376": 73, "r377": 73, "r378": 73, "r379": 73, "r380": 73, "background": [73, 93, 194, 197, 289], "cauchi": [73, 90, 92, 205, 230, 234], "219383934395520": 73, "21938393439552": 73, "shi": [73, 90, 214, 224], "e1": [73, 75, 82, 129, 204, 209, 221, 230, 233], "hyperbol": [73, 211, 233, 287, 291], "r381": 73, "r382": 73, "r383": 73, "20201128173312": 73, "sfu": [73, 92], "cbm": [73, 92], "aand": [73, 92], "page_228": 73, "int_1": [73, 90], "zt": [73, 90], "unbranch": [73, 90], "meijerg": [73, 84, 90, 92, 214, 234, 291], "postiv": 73, "r384": 73, "r385": 73, "expintegral": [73, 214], "r386": 73, "04516378011749278484458888919": 73, "0652795784357498247001125598": 73, "08346052231061726610939702133": 73, "soldner": 73, "45136923488338": 73, "r387": 73, "logarithmic_integr": 73, "r388": 73, "logarithmicintegr": 73, "r389": 73, "r390": 73, "soldnersconst": 73, "92242131492155809316615998938": 73, "r391": 73, "r392": 73, "r393": 73, "r394": 73, "trigonometric_integr": 73, "_1": [73, 101, 123, 189, 199, 224, 253], "somewhat": [73, 92, 129, 205], "r395": 73, "r396": 73, "r397": 73, "laurent": [73, 205, 211, 230], "j_n": [73, 176], "r398": 73, "r399": 73, "r400": 73, "r401": 73, "yn": [73, 214, 220], "r402": 73, "i_": [73, 90, 224, 234, 235], "iz": 73, "r403": 73, "k_": [73, 90, 124, 141, 142], "r404": 73, "hankel1": [73, 214], "hankel": [73, 92], "iy_": 73, "hankel2": [73, 214], "r405": 73, "hankelh1": [73, 214], "r406": 73, "hankelh2": [73, 214], "orthopoli": [73, 210], "spherical_bessel_fn": [73, 210], "3j": [73, 158, 199], "099419756723640344491": 73, "054525080242173562897": 73, "r407": 73, "y_n": [73, 227], "18525034196069722536": 73, "014895573969924817587": 73, "r408": 73, "jn_zero": 73, "besseljzero": 73, "sph_jn": 73, "7635": 73, "095": 73, "515": 73, "marcumq": 73, "marcum": 73, "q_m": 73, "r409": 73, "marcum_q": 73, "r410": 73, "airybas": 73, "airyai": [73, 214, 230], "ai": [73, 105, 210, 227, 236, 255, 291], "airyaiprim": [73, 214], "22740742820168557599192443603787379946077222541710": 73, "airybi": [73, 214, 230], "airybiprim": [73, 214], "r411": 73, "airy_funct": 73, "r412": 73, "r413": 73, "encyclopediaofmath": 73, "r414": 73, "airyfunct": 73, "41230258795639848808323405461146104203453483447240": 73, "r415": 73, "r416": 73, "r417": 73, "r418": 73, "61825902074169104140626429133247528291577794512415": 73, "r419": 73, "r420": 73, "r421": 73, "r422": 73, "27879516692116952268509756941098324140300059345163": 73, "r423": 73, "r424": 73, "r425": 73, "r426": 73, "bspline": 73, "bspline_basi": 73, "knot": 73, "bspline_basis_set": 73, "r427": 73, "interpolating_splin": 73, "131": [73, 189], "39": [73, 105, 213], "interpolating_poli": [73, 210], "zeta_funct": 73, "admit": [73, 230], "lerch": 73, "transcend": 73, "lerchphi": [73, 214], "dirichlet_eta": [73, 214], "20205690315959": 73, "polylog": [73, 214], "r428": 73, "r429": 73, "hurwitz_zeta_funct": 73, "r430": 73, "dirichlet_eta_funct": 73, "r431": 73, "polylogarithm": 73, "sheet": [73, 223], "phi_0": 73, "ze": 73, "r432": 73, "bateman": [73, 92], "erdelyi": [73, 92], "1953": [73, 209], "york": [73, 90, 145, 224, 232], "mcgraw": [73, 92, 124, 145, 189, 196, 259], "r433": 73, "r434": 73, "lerch_transcend": 73, "stieltj": [73, 214], "gamma_": [73, 116, 118], "r435": 73, "stieltjes_const": 73, "ap": [73, 77, 224], "bq": [73, 202, 203, 224], "a_p": [73, 90, 224, 291], "b_q": [73, 90, 224, 291], "_pf_q": [73, 224, 230, 291], "r436": 73, "r437": 73, "generalized_hypergeometric_funct": 73, "convergence_stat": 73, "radius_of_converg": 73, "radiu": [73, 75, 79, 81, 136, 138, 148, 152, 200, 233, 234, 269], "meijer": [73, 83, 91, 92, 271, 281, 291], "mellin": [73, 92], "barn": 73, "b_m": [73, 90, 232], "confusingli": 73, "int_l": [73, 90, 224], "contour": [73, 75, 90, 200, 224], "__1": 73, "subvector": 73, "aother": 73, "bm": 73, "bother": [73, 286], "slater": [73, 224], "allow_hyp": [73, 226], "subsum": 73, "r438": 73, "r439": 73, "meijer_g": 73, "get_period": [73, 90], "appellf1": [73, 214], "0063339426292673": 73, "172870711": 73, "659936": 73, "15605338197184": 73, "r440": 73, "appell_seri": 73, "r441": 73, "hypergeometricfunct": 73, "elliptic_integr": 73, "elliptic_k": [73, 214], "tfrac": [73, 230, 234], "eccentr": [73, 75], "50923695405127": 73, "625146415202697": 73, "elliptic_f": [73, 214], "r442": 73, "r443": 73, "ellipticintegr": 73, "elliptick": [73, 214], "909449841483": 73, "74720545502474": 73, "r444": 73, "r445": 73, "ellipticf": 73, "elliptic_": [73, 75, 214], "55203744279187": 73, "290764986058437": 73, "991052601328069": 73, "81879421395609": 73, "r446": 73, "r447": 73, "elliptice2": 73, "r448": 73, "elliptic": [73, 214], "elliptic_pi": [73, 214], "50232379629182": 73, "760939574180767": 73, "29136443417283": 73, "32555634906645": 73, "r449": 73, "r450": 73, "ellipticpi3": 73, "r451": 73, "ellipticpi": [73, 214], "mathieu_funct": 73, "mathieubas": 73, "mathieusprim": [73, 214], "mathieuc": [73, 214], "mathieucprim": [73, 214], "r452": 73, "r453": 73, "r454": 73, "mathieufunct": 73, "r455": 73, "mathieuandspheroidalfunct": 73, "r456": 73, "r457": 73, "r458": 73, "r459": 73, "r460": 73, "r461": 73, "r462": 73, "r463": 73, "r464": 73, "r465": 73, "r466": 73, "r467": 73, "chebyshevu": [73, 214], "chebyshevt_root": 73, "chebyshevu_root": 73, "assoc_legendr": [73, 214], "hermite_prob": 73, "jacobi_poli": [73, 210], "gegenbauer_poli": [73, 210], "chebyshevt_poli": [73, 210], "chebyshevu_poli": [73, 210], "hermite_poli": [73, 210], "legendre_poli": [73, 210], "laguerre_poli": [73, 210], "r468": 73, "jacobi_polynomi": 73, "r469": 73, "jacobipolynomi": 73, "r470": 73, "jacobip": [73, 214], "jacobi_norm": 73, "normilz": 73, "p_m": 73, "delta_": [73, 176, 184, 199], "r471": 73, "r472": 73, "r473": 73, "hermite_prob_poli": [73, 210], "r474": 73, "gegenbauer_polynomi": 73, "r475": 73, "gegenbauerpolynomi": 73, "r476": 73, "gegenbauerc3": 73, "r477": 73, "chebyshev_polynomi": 73, "r478": 73, "chebyshevpolynomialofthefirstkind": 73, "r479": 73, "chebyshevpolynomialofthesecondkind": 73, "r480": 73, "r481": 73, "u_n": [73, 92, 207, 209, 210], "r482": 73, "r483": 73, "r484": 73, "r485": 73, "r486": 73, "chebyshev_root": 73, "r487": 73, "legendre_polynomi": 73, "r488": 73, "legendrepolynomi": 73, "r489": 73, "legendrep": [73, 214], "r490": 73, "legendrep2": 73, "r491": 73, "associated_legendre_polynomi": 73, "r492": 73, "r493": 73, "r494": 73, "r495": 73, "hermite_polynomi": 73, "r496": 73, "hermitepolynomi": 73, "r497": 73, "hermiteh": [73, 214], "probabilist": [73, 210, 234], "he_n": [73, 210], "telephon": 73, "a000085": 73, "232": 73, "764": 73, "2620": 73, "9496": 73, "r498": 73, "r499": 73, "l_n": [73, 92, 210], "r500": 73, "laguerre_polynomi": 73, "r501": 73, "laguerrepolynomi": 73, "r502": 73, "laguerrel": [73, 214], "r503": 73, "laguerrel3": 73, "r504": 73, "generalized_laguerre_polynomi": 73, "r505": 73, "associatedlaguerrepolynomi": 73, "r506": 73, "r507": 73, "spherical_harmon": 73, "ynm": [73, 199], "ynm_c": 73, "znm": 73, "r508": 73, "r509": 73, "sphericalharmon": 73, "r510": 73, "sphericalharmonici": 73, "r511": 73, "r512": 73, "r513": 73, "r514": 73, "z_n": [73, 208], "r515": 73, "r516": 73, "r517": 73, "eijk": 73, "levicivita": [73, 101], "eval_levicivita": 73, "pseudotensor": 73, "delta_rang": [73, 179], "kroneck": [73, 178, 179, 199, 235, 240], "r518": 73, "kronecker_delta": [73, 179], "indices_contain_equal_inform": [73, 179], "fermi": [73, 179], "above_fermi": [73, 179], "below_fermi": [73, 179], "is_above_fermi": [73, 179], "is_below_fermi": [73, 179], "is_only_below_fermi": [73, 179], "is_only_above_fermi": [73, 179], "killable_index": [73, 179], "preferred_index": [73, 179], "point2d": [74, 75, 76, 77, 78, 80, 81, 82], "arbitrary_point": [74, 75, 76, 77, 78, 79, 81], "polyfunc": [74, 205, 210], "ambient_dimens": [74, 76, 78, 80], "plot_interv": [74, 75, 78, 81], "lower_bound": [74, 75, 78, 81], "upper_bound": [74, 75, 78, 81], "counterclockwis": [74, 75, 76, 80, 101, 108, 109], "scale": [74, 75, 76, 80, 81, 82, 93, 108, 159, 180, 182, 183, 184, 186, 187, 194, 198, 200, 210, 217, 234, 266, 268], "geometryent": [74, 75, 76, 78, 80, 81, 82], "hradiu": 75, "vradiu": 75, "ellipt": [75, 105, 201], "geometryerror": [75, 78, 81, 82], "radii": 75, "foci": 75, "periapsi": 75, "apoapsi": 75, "focus_dist": 75, "shortest": [75, 78, 81, 197, 220, 226, 230, 252], "auxiliary_circl": 75, "xmin": [75, 76, 78, 80, 81, 200], "ymin": [75, 76, 78, 80, 81, 200], "xmax": [75, 76, 78, 80, 81, 200], "ymax": [75, 76, 78, 80, 81, 200], "rectangl": [75, 76, 78, 80, 81, 200, 210], "director_circl": 75, "perpendicular": [75, 78, 79, 81, 94, 123, 137, 152, 198], "director": 75, "130": 75, "r519": 75, "encloses_point": [75, 76, 81], "border": [75, 81], "_slope": 75, "slope": [75, 76, 78, 81, 92, 108, 109, 113, 123], "r520": 75, "108270": 75, "r521": 75, "shifted_ellips": 75, "evolut": 75, "focal": [75, 148, 152], "100500": 75, "363": [75, 105, 208], "175": [75, 101, 207, 208], "is_tang": [75, 77], "tangent_lin": 75, "normal_lin": 75, "line2d": [75, 78, 81], "2020": [75, 158], "polar_second_moment_of_area": [75, 81], "moment": [75, 81, 108, 109, 131, 139, 142, 144, 200, 210, 227, 234], "constitu": [75, 81, 126, 189, 220, 259], "planar": [75, 81, 109, 123, 152], "resist": [75, 81, 108, 109, 223], "deflect": [75, 81, 108, 109], "bend": [75, 81, 108, 110, 276], "r522": 75, "polar_moment_of_inertia": [75, 81], "random_point": [75, 78, 79], "arb": 75, "364": 75, "notimpl": [75, 209], "second_moment_of_area": [75, 81], "centroid": [75, 81, 82, 108], "i_xx": [75, 81], "i_yi": [75, 81], "i_xi": [75, 81], "ellis": 75, "r523": 75, "list_of_second_moments_of_area": 75, "section_modulu": [75, 81], "sympify": [75, 81, 108, 111, 120, 126, 150, 153, 191], "farthest": [75, 81], "s_x": [75, 81], "s_y": [75, 81], "r524": 75, "semilatus_rectum": 75, "semi": [75, 78, 105], "latu": 75, "rectum": 75, "chord": 75, "conic": [75, 227, 259], "directrix": 75, "r525": 75, "semilatusrectum": 75, "r526": 75, "latus_rectum": 75, "collinear": [75, 77, 79, 80, 81, 200], "gx": 75, "hy": 75, "synonym": [75, 209], "p4": [75, 78, 80, 81, 200], "t2": [76, 81, 82, 105, 120, 126, 227, 234, 240], "ordering_of_class": 76, "is_similar": [76, 78, 81, 82], "uniform": [76, 200, 232, 234], "enlarg": 76, "shrink": [76, 90], "parameter_valu": [76, 79], "pent": 76, "rpent": 76, "rcirc": 76, "entity1": 77, "entity2": 77, "zp": 77, "is_collinear": [77, 80], "segment2d": [77, 78, 81, 82], "wikipappu": 77, "subs_point": 77, "p11": 77, "p12": 77, "p13": 77, "p21": 77, "p22": 77, "p23": 77, "ll1": 77, "ll2": 77, "ll3": 77, "ll4": 77, "ll5": 77, "ll6": 77, "pp1": 77, "pp2": 77, "pp3": 77, "encyclopedia": [77, 196], "apr": 77, "s_hexagon_theorem": 77, "clockwis": [77, 92, 96, 101, 108, 109, 111], "overlap": [77, 82, 104, 201, 222, 255], "infanc": 77, "geometryresult": 77, "fair": [77, 234], "angle_between": [78, 79, 81, 189], "reflex": 78, "eman": 78, "readili": [78, 101], "sw": 78, "obtus": 78, "smallest_angle_between": 78, "point3d": [78, 79, 80, 152], "line3d": [78, 79, 80], "is_perpendicular": [78, 79, 80, 81], "ray2d": [78, 81], "closing_angl": 78, "are_concurr": [78, 79], "concurr": [78, 79, 211], "l3": [78, 132, 207], "l4": [78, 132], "bisector": [78, 81], "p5": [78, 80, 81, 200], "p6": [78, 81, 200], "p7": [78, 81, 200], "segment3d": [78, 79], "direction_ratio": [78, 80], "is_parallel": [78, 79], "parallel_lin": 78, "perpendicular_lin": [78, 79], "perpendicular_seg": 78, "reform": 78, "92": [78, 208, 230, 234, 252], "ccw": [78, 81], "ray3d": [78, 79, 152], "xdirect": 78, "ydirect": 78, "midpoint": [78, 80, 81, 92, 200, 265], "170": [78, 234], "341": 78, "perpendicular_bisector": 78, "linearentity2d": 78, "linearentity3d": [78, 79], "direction_cosin": [78, 80], "zdirect": 78, "normal_vector": [79, 152], "proce": [79, 143, 207, 209, 224, 232], "147": 79, "321": 79, "is_coplanar": 79, "perpendicualar": 79, "parallel_plan": 79, "on_circl": 79, "off_circl": 79, "perpendicular_plan": 79, "pt1": 79, "projection_lin": 79, "on_morph": 80, "affine_rank": 80, "are_coplanar": 80, "canberra_dist": 80, "canberra": 80, "geometricent": 80, "taxicab_dist": 80, "is_concycl": 80, "concycl": 80, "fewer": [80, 81, 143, 234, 281], "is_scalar_multipl": 80, "ambient": 80, "orthogonal_direct": 80, "taxicab": 80, "_nocheck": 80, "are_collinear": 80, "unrot": 81, "circumscrib": 81, "spin": [81, 117, 131, 165, 166, 174, 276], "perimet": 81, "contact": [81, 131, 135, 136, 137, 138, 197, 238], "38": [81, 101, 105, 214, 227, 229, 234], "cut_sect": 81, "upper_polygon": 81, "lower_polygon": 81, "upper_seg": 81, "lower_seg": 81, "r527": 81, "r528": 81, "paulbourk": 81, "polygonmesh": 81, "insidepoli": 81, "first_moment_of_area": 81, "q_x": [81, 197], "q_y": [81, 197], "625": [81, 269], "3125": [81, 234], "525": 81, "3000": [81, 108], "r529": 81, "skyciv": 81, "beam": [81, 111, 148, 151, 276], "bmd": 81, "r530": 81, "mechanicalc": 81, "poly1": 81, "poly2": 81, "interior": [81, 210, 222], "180": [81, 198, 208], "r531": 81, "r532": 81, "r533": 81, "apothem": 81, "interior_angl": 81, "exterior_angl": 81, "circumcircl": 81, "incircl": 81, "inradiu": 81, "inscrib": 81, "circumcent": 81, "circumradiu": 81, "leg": 81, "square_in_unit_circl": 81, "kite": 81, "asa": 81, "sa": [81, 210], "sss": 81, "altitud": 81, "orthocent": 81, "exradii": 81, "median": [81, 234], "medial": 81, "nine_point_circl": 81, "straight": [81, 87, 113, 133, 197, 230], "eulerlin": 81, "equilater": 81, "excent": 81, "excircl": 81, "touch": [81, 131, 223], "r534": 81, "ly": [81, 101, 205], "exradiu": 81, "r535": 81, "r536": 81, "incent": 81, "is_equilater": 81, "is_isoscel": 81, "is_right": 81, "is_scalen": 81, "nine": [81, 214], "feet": 81, "real_num": 82, "hull": 82, "r537": 82, "graham_scan": 82, "r538": 82, "1979": [82, 184], "20210511015444": 82, "geomalgorithm": 82, "a10": 82, "_hull": 82, "t3": [82, 227], "averag": [82, 92, 105, 207, 234], "p_r": 83, "holonomic_funct": 83, "from_hyp": [84, 87], "holonomicfunct": [84, 87, 88], "from_meijerg": [84, 87], "initcond": [84, 86, 87], "expr_to_holonom": [84, 87, 88, 89], "lenic": [84, 86], "meijerint": [84, 86, 90, 92], "_rewrite1": [84, 90], "_convert_poly_rat_alg": [84, 86], "_create_t": [84, 86], "_create_lookup_t": [86, 90], "differentialoper": [87, 88, 168], "old_poly_r": [87, 88, 201, 204, 205], "to_expr": [87, 88, 89, 115], "to_sequ": 87, "n_0": [87, 207, 232, 233], "indici": [87, 88, 89, 230], "c_j": [87, 90, 224], "holonomicsequ": 87, "r539": 87, "hal": 87, "inria": [87, 92], "00070025": 87, "r540": 87, "www3": [87, 230, 259], "risc": [87, 230, 259], "jku": [87, 230, 259], "risc_2244": 87, "diplform": 87, "_recur": 87, "rk4": 87, "71828182845905": 87, "10517083333333": 87, "22140257085069": 87, "34985849706254": 87, "49182424008069": 87, "64872063859684": 87, "82211796209193": 87, "01375162659678": 87, "22553956329232": 87, "45960141378007": 87, "71827974413517": 87, "331": 87, "4641": 87, "61051": 87, "771561": 87, "9487171": 87, "14358881": 87, "357947691": 87, "5937424601": 87, "to_hyp": 87, "as_list": [87, 210], "to_meijerg": 87, "1_0": 88, "1_1": 88, "0_0": 88, "0_1": 88, "list_of_poli": 88, "weyl": [88, 94], "differentialoperatoralgebra": 88, "Ore": 88, "dxa": 88, "endomorph": [88, 209], "frobeniu": [89, 101, 105, 207, 208], "subtleti": 90, "recast": [90, 226, 232, 233], "branchpoint": 90, "crude": [90, 131, 200], "decre": 90, "biholomorph": 90, "topologi": [90, 222], "neighbourhood": 90, "evid": [90, 124, 137, 224, 236], "peculiar": [90, 198], "_split_mul": 90, "_mytyp": 90, "inequival": 90, "_mul_as_two_part": 90, "twist": 90, "recognis": [90, 204, 224, 226], "anywai": [90, 226, 230], "analyitc": 90, "_rewrite_singl": 90, "_rewrite2": 90, "_rewrite_saxena_1": 90, "_rewrite_saxena": 90, "blogpost": 90, "remedi": 90, "exploit": [90, 246], "transpar": [90, 93, 194], "nessgrh": 90, "wordpress": [90, 227], "07": 90, "stade": 90, "c_u": 90, "d_1": [90, 184, 210, 234], "d_v": 90, "amalgam": 90, "prudnikov1990": [90, 224], "luke1969": [90, 224], "fulfil": [90, 199], "vee": [90, 95, 101], "lceil": 90, "rceil": 90, "d_j": [90, 184, 224], "lambda_c": [90, 142], "lambda_": 90, "z_0": [90, 226], "z_1": 90, "a_i": [90, 184, 189, 198, 202, 207, 224], "c_5": 90, "c_6": 90, "c_7": 90, "c_8": 90, "lvert": 90, "rvert": 90, "c_9": 90, "versatil": 90, "bz": [90, 227, 240], "deform": [90, 109], "encircl": 90, "appeal": 90, "fox": 90, "obstacl": 90, "identif": [90, 233], "domin": [90, 96, 219, 221], "iT": 90, "omega_": 90, "disguis": 90, "meijerint_indefinit": 90, "meijerint_definit": 90, "meijerint_invers": 90, "kelli": [90, 224], "roach": [90, 224], "211": [90, 105, 210, 224, 230], "prudnikov": [90, 224], "yu": [90, 199, 224], "brychkov": [90, 224], "marichev": [90, 224], "gordon": [90, 158, 224], "breach": [90, 224], "_coeffexpvalueerror": 90, "_get_coeff_exp": 90, "_check_anteced": 90, "_check_antecedents_1": 90, "mt": 90, "_check_antecedents_invers": 90, "anteced": [90, 221], "_condsimp": 90, "hoc": 90, "simp": [90, 131, 189], "_dummi": 90, "_dummy_": 90, "_eval_cond": 90, "_expon": 90, "_find_splitting_point": 90, "fsp": 90, "_flip_g": 90, "_function": 90, "_guess_expans": 90, "sensibl": [90, 92], "_inflate_fox_h": 90, "_inflate_g": 90, "_int0oo": 90, "_int0oo_1": 90, "_int_invers": 90, "_is_analyt": 90, "_meijerint_definite_2": 90, "trigexpand": 90, "_meijerint_definite_3": 90, "_meijerint_definite_4": 90, "only_doubl": 90, "_meijerint_indefinite_1": 90, "_mul_arg": 90, "_my_principal_branch": 90, "full_pb": 90, "nearer": 90, "superflu": 90, "opaqu": [90, 214], "fac": 90, "_rewrite_invers": 90, "costli": [90, 133, 287], "tx": [90, 289], "happili": [92, 238], "nonelementari": 92, "mellin_transform": 92, "bilater": 92, "laplac": [92, 112, 113, 115, 234], "mellintransform": 92, "integraltransform": 92, "nocond": 92, "inverse_mellin_transform": 92, "laplace_transform": [92, 115], "fourier_transform": 92, "hankel_transform": 92, "inverse_hankel_transform": 92, "inversemellintransform": 92, "laplacetransform": 92, "laplace_correspond": 92, "laplace_initial_cond": 92, "inverse_laplace_transform": 92, "r541": 92, "prooject": 92, "1954": 92, "caltech": 92, "caltechauthor": 92, "20140123": 92, "101456353": 92, "fdict": 92, "inverselaplacetransform": 92, "singularit": [92, 143], "fouriertransform": 92, "_fourier_transform": 92, "inverse_fourier_transform": 92, "sine_transform": 92, "inverse_sine_transform": 92, "cosine_transform": 92, "inverse_cosine_transform": 92, "bixk": 92, "inversefouriertransform": 92, "sinetransform": 92, "inversesinetransform": 92, "cosinetransform": 92, "inversecosinetransform": 92, "hankeltransform": 92, "ht": 92, "inversehankeltransform": 92, "_compute_transform": 92, "_as_integr": 92, "integraltransformerror": 92, "_name": 92, "_collapse_extra": 92, "needev": 92, "function_vari": 92, "transform_vari": 92, "lazard": [92, 207, 210], "rioboo": 92, "trager": 92, "horowitz": 92, "ostrogradski": 92, "ratint": 92, "rationaltool": [92, 210], "ratint_logpart": 92, "ratint_ratpart": 92, "r542": 92, "bronstein": [92, 208, 210, 216, 232], "verlag": [92, 208], "deg": [92, 113, 129, 202, 207, 209, 210], "q_i": [92, 125, 143], "_t": [92, 129, 132, 146, 179, 188, 189, 193, 224, 234], "trigintegr": 92, "trigonometri": 92, "r543": 92, "integration_techniqu": 92, "deltaintegr": 92, "couldn": 92, "singularityintegr": 92, "risch_integr": 92, "nonelementaryintegr": 92, "proven": [92, 105, 265, 283], "handle_first": 92, "separate_integr": 92, "rewrite_complex": 92, "forthcom": 92, "5109": 92, "manualintegr": 92, "integral_step": 92, "student": [92, 223, 227, 234], "rootsum": [92, 210, 216], "substep": 92, "sympy_gamma": 92, "blob": 92, "app": 92, "intstep": 92, "urul": 92, "u_var": 92, "_u": [92, 179], "u_func": 92, "arctanrul": 92, "sinrul": 92, "rewriterul": 92, "addrul": 92, "powerrul": 92, "constanttimesrul": 92, "constantrul": 92, "norman": 92, "retri": [92, 105], "degree_offset": 92, "unnecessary_permut": 92, "_try_heurisch": 92, "manuel": [92, 219], "poor": [92, 106], "man": [92, 208], "airi": [92, 230], "whittak": 92, "r544": 92, "sop": [92, 95], "cafe": 92, "pmint": 92, "r545": 92, "gedd": [92, 208], "stefanu": 92, "217": [92, 208], "r546": 92, "davenport": [92, 207, 208], "eurocam": 92, "lnc": [92, 208, 232], "157": [92, 105, 109, 208], "r547": 92, "iii": [92, 214, 230], "sigsam": 92, "bulletin": 92, "1982": [92, 199], "r548": 92, "transact": [92, 208], "1985": [92, 124, 145, 189, 259], "356": [92, 209, 232], "362": 92, "lookup": [92, 101, 105, 224], "huge": [92, 105, 210, 250], "entail": 92, "delic": [92, 201], "albeit": [92, 263], "mimic": [92, 93, 194, 253], "irrespect": [92, 227, 230, 255], "line_integr": 92, "as_sum": 92, "subinterv": 92, "trapezoid": [92, 101, 234], "730": 92, "809": 92, "decai": 92, "r549": 92, "riemann_sum": 92, "riemann_summation_method": 92, "r550": 92, "cauchy_principal_valu": 92, "r551": 92, "cauchyprincipalvalu": 92, "int_a": 92, "uvar": 92, "3aissu": 92, "3aopen": 92, "3aintegr": 92, "gauss_legendr": 92, "n_digit": 92, "legendr": [92, 105, 210, 214, 227], "r552": 92, "w_i": [92, 148, 210, 230], "7746": 92, "55556": 92, "88889": 92, "86114": 92, "33998": 92, "34785": 92, "65215": 92, "gauss_laguerr": 92, "gauss_gen_laguerr": 92, "gauss_hermit": 92, "gauss_chebyshev_t": 92, "gauss_chebyshev_u": 92, "gauss_jacobi": 92, "gauss_lobatto": 92, "gaussian_quadratur": 92, "r553": 92, "fsu": 92, "jburkardt": 92, "cpp_src": 92, "legendre_rul": 92, "laguerr": [92, 210, 214], "r554": 92, "41577": 92, "2943": 92, "2899": 92, "71109": 92, "27852": 92, "010389": 92, "22285": 92, "1889": 92, "9927": 92, "7751": 92, "8375": 92, "983": 92, "45896": 92, "417": [92, 226], "11337": 92, "010399": 92, "00026102": 92, "9855e": 92, "93laguerre_quadratur": 92, "r555": 92, "laguerre_rul": 92, "hermit": [92, 96, 101, 102, 203, 209, 210, 214, 234], "r556": 92, "2247": 92, "29541": 92, "1816": 92, "3506": 92, "3358": 92, "43608": 92, "00453": 92, "15707": 92, "72463": 92, "hermite_quadratur": 92, "r557": 92, "hermite_rul": 92, "r558": 92, "gen_hermite_rul": 92, "r559": 92, "19016": 92, "7845": 92, "5253": 92, "4493": 92, "31413": 92, "00906": 92, "97851": 92, "9904": 92, "3193": 92, "712": 92, "53087": 92, "67721": 92, "11895": 92, "0023152": 92, "r560": 92, "gen_laguerre_rul": 92, "r561": 92, "86602": 92, "0472": 92, "96593": 92, "70711": 92, "25882": 92, "5236": 92, "93gauss_quadratur": 92, "r562": 92, "chebyshev1_rul": 92, "r563": 92, "3927": 92, "7854": 92, "90097": 92, "62349": 92, "22252": 92, "084489": 92, "27433": 92, "42658": 92, "r564": 92, "chebyshev2_rul": 92, "jacobi": [92, 105, 117, 210, 214], "r565": 92, "7063": 92, "0973": 92, "33795": 92, "87174": 92, "5917": 92, "2093": 92, "050584": 92, "22169": 92, "39439": 92, "93jacobi_quadratur": 92, "r566": 92, "jacobi_rul": 92, "r567": 92, "gegenbauer_rul": 92, "lobatto": 92, "r568": 92, "3333": 92, "44721": 92, "16667": 92, "83333": 92, "93lobatto_rul": 92, "r569": 92, "20200118141346": 92, "page_888": 92, "intpoli": 92, "chin": 92, "al": [92, 129, 158, 207, 223, 226], "2015": [92, 233], "unit_cub": 92, "polytope_integr": 92, "eric": [92, 208], "jean": 92, "lasserr": 92, "sukumar": 92, "nonconvex": 92, "967": 92, "981": 92, "dilbert": 92, "engr": 92, "ucdavi": 92, "suku": 92, "max_degre": [92, 210], "689": [92, 109], "21875": 92, "octahedron": 92, "trivari": 92, "enable_automatic_int_sympif": 93, "enable_automatic_symbol": 93, "init_ipython_sess": 93, "argv": [93, 245], "init_python_sess": 93, "use_latex": [93, 194, 290], "quiet": 93, "str_printer": [93, 194], "latex_print": [93, 194], "pylab": 93, "stringifi": [93, 194], "sstrrepr": [93, 194, 214], "lexograph": [93, 194], "\u03b8": [93, 123, 151, 233], "int_to_integ": 93, "decistmt": 93, "f401": 93, "0x12": 93, "num_column": [93, 194, 214, 230], "no_glob": [93, 194], "ip": [93, 167, 173, 194], "forecolor": [93, 194], "backcolor": [93, 194], "fontsiz": [93, 194, 214], "10pt": [93, 194, 214], "latex_mod": [93, 194], "print_builtin": [93, 194], "interactiveconsol": [93, 194], "preambl": [93, 194, 214], "handwritten": [93, 194], "ctan": [93, 194], "pkg": [93, 194], "dvi": [93, 194, 214], "foreground": [93, 194], "black": [93, 164, 175, 194, 214, 290], "white": [93, 194, 234], "documentclass": [93, 194, 214], "dpi": [93, 194], "u03b8": 93, "dvip": 93, "r570": 93, "r571": 93, "the_68_standard_colors_known_to_dvip": 93, "root_system": 94, "rootsystem": 94, "cartantyp": 94, "cartan": 94, "subalgebra": 94, "adjoint": [94, 96, 101, 156, 160], "hyperplan": 94, "k_y": 94, "r572": 94, "r573": 94, "humphrei": 94, "add_as_root": 94, "root1": 94, "root2": 94, "add_simple_root": 94, "newroot": 94, "all_root": [94, 105, 210], "cartan_matrix": 94, "dynkin_diagram": 94, "dynkin": 94, "root_spac": 94, "simple_root": 94, "type_a": 94, "typea": 94, "basic_root": 94, "iin": 94, "jth": [94, 233], "ijth": 94, "cartan_typ": 94, "highest_root": 94, "lie_algebra": 94, "positive_root": 94, "type_b": 94, "typeb": 94, "b4": 94, "b3": [94, 129, 146, 189, 265], "type_c": 94, "typec": 94, "type_d": 94, "dmension": 94, "type_": 94, "e6": 94, "type_f": 94, "typef": 94, "f_4": [94, 125], "f4": [94, 200], "type_g": 94, "typeg": 94, "weyl_group": 94, "weylgroup": 94, "semisimpl": 94, "isometri": 94, "coxet": 94, "coxeter_diagram": 94, "undirect": [94, 252], "s_is_j": 94, "delete_doubl": 94, "element_ord": 94, "weylelt": 94, "group_nam": 94, "group_ord": 94, "192": 94, "matrix_form": 94, "cartantype_gener": 94, "standard_cartan": 94, "dynkindiagram": 94, "cartanmatrix": 94, "sopform": 95, "minterm": 95, "dontcar": 95, "simplified_pair": 95, "combo": 95, "outcom": [95, 182, 234], "posform": 95, "r574": 95, "quin": 95, "mccluskey_algorithm": 95, "r575": 95, "27t": 95, "care_term": 95, "r576": 95, "r577": 95, "anfform": 95, "truthvalu": 95, "anf": 95, "zhegalkin": 95, "r578": 95, "zhegalkin_polynomi": 95, "booleantru": 95, "greet": 95, "booleanfals": 95, "universalset": [95, 222], "nand": 95, "xnor": 95, "gate": [95, 159, 164, 166, 172, 173, 175, 276], "perspect": [95, 105, 115, 184, 200, 247, 264, 268], "multiplex": 95, "disjunct": 95, "to_anf": 95, "oplu": [95, 163], "to_cnf": 95, "cnf": 95, "mccluskei": 95, "to_dnf": 95, "to_nnf": 95, "nnf": 95, "is_anf": 95, "is_cnf": 95, "is_dnf": 95, "is_nnf": 95, "gateinputcount": 95, "simplify_log": 95, "fewest": [95, 173], "r579": 95, "bool_map": 95, "bool1": 95, "bool2": 95, "function1": 95, "function2": 95, "distribute_and_over_or": 95, "distribute_or_over_and": 95, "distribute_xor_over_and": 95, "eliminate_impl": 95, "truth_tabl": 95, "ibin": [95, 252], "integer_to_term": 95, "0001111011": [95, 252], "1101111000": [95, 252], "term_to_integ": 95, "bool_maxterm": 95, "maxterm": 95, "complement": [95, 98, 210, 222, 233], "r580": 95, "canonical_normal_form": 95, "indexing_maxterm": 95, "bool_minterm": 95, "r581": 95, "indexing_minterm": 95, "bool_monomi": 95, "anf_coeff": 95, "to_int_repr": 95, "all_model": 95, "unsatisfi": 95, "use_model": 95, "unsat": 95, "dirac": [96, 101, 113, 117, 118, 177, 214], "__abs__": [96, 205], "__add__": [96, 205, 209], "__len__": 96, "96": [96, 101, 234], "mismatch": 96, "matrix_multiply_elementwis": [96, 101], "applyfunc": [96, 97, 101, 137, 189, 235], "col": [96, 98, 101, 104, 115, 146, 203, 209, 287], "col_del": [96, 101, 287], "col_join": [96, 101, 131], "col_insert": [96, 287], "row_insert": [96, 287], "row_join": [96, 101, 131], "companion": [96, 98], "c0": [96, 98, 221, 230, 232], "sparsematrix": [96, 101, 104, 215, 226], "diag": [96, 98, 101, 104, 146, 203, 240, 287], "immutablematrix": [96, 97, 98, 115, 189, 234, 259, 262, 287], "blockmatrix": [96, 98, 101], "sparsetool": [96, 104], "band": [96, 104], "kth": [96, 105], "rowslist": [96, 203], "colslist": 96, "submatrix": [96, 101, 207, 234], "get_diag_block": [96, 98, 101], "decoupl": 96, "hstack": [96, 203], "is_anti_symmetr": 96, "is_diagon": [96, 101], "is_low": [96, 203], "is_upp": [96, 203], "matrixeigen": [96, 101], "is_diagonaliz": [96, 101], "is_hermitian": [96, 101], "is_lower_hessenberg": 96, "hessenberg": [96, 101], "superdiagon": 96, "is_upper_hessenberg": 96, "is_strongly_diagonally_domin": 96, "strongli": [96, 101, 203, 252], "m1": [96, 101, 105, 108, 109, 150, 158, 176, 178, 182, 227, 230, 235, 240], "subdiagon": [96, 101], "is_weakly_diagonally_domin": 96, "weakli": [96, 252], "vacuou": 96, "jordan_block": [96, 101], "eigenvalu": [96, 101, 129, 131, 173, 176, 285], "eigenv": [96, 101, 129, 131, 146, 173, 285, 287], "r582": 96, "jordan_matrix": [96, 230], "dotprodsimp": 96, "blowup": 96, "multiply_elementwis": [96, 101], "hadamard": [96, 98, 101, 163, 164, 175, 214], "elementwis": [96, 98, 101, 235], "300": [96, 101, 105, 108, 195, 200, 211, 268], "a_0": [96, 101, 217, 227, 230, 235, 291], "vdot": [96, 98, 101, 184], "alpha_0": 96, "alpha_1": [96, 105, 209], "alpha_": [96, 199], "permute_col": 96, "permute_row": 96, "mulsimp": 96, "rmultipli": 96, "__rmul__": 96, "rot90": 96, "anticlockwis": 96, "row_del": [96, 101, 287], "todod": 96, "tolist": [96, 235], "vech": 96, "check_symmetri": 96, "vstack": [96, 203], "w_": [96, 209], "wminu": 96, "wplu": 96, "r583": 96, "mathwork": [96, 113, 234, 287], "cleve": 96, "r584": 96, "claredon": 96, "oxford": 96, "662": 96, "intm": 96, "mutabledensematrix": [97, 203, 255], "densematrix": [97, 101], "ldldecomposit": [97, 101], "ldl": [97, 101], "choleski": [97, 101], "ludecomposit": [97, 98, 101, 287], "qrdecomposit": [97, 101], "as_immut": 97, "lower_triangular_solv": [97, 101], "upper_triangular_solv": [97, 101], "gauss_jordan_solv": [97, 101], "cholesky_solv": [97, 101], "diagonal_solv": [97, 101], "ldlsolv": [97, 101], "qrsolv": [97, 101], "pinv_solv": [97, 101], "permutedim": [98, 235, 236], "arraytensorproduct": [98, 235, 236], "from_index_summ": 98, "first_index": 98, "last_index": 98, "longrightarrow": 98, "matpow": [98, 214], "hadamard_product": 98, "aka": 98, "hadamardproduct": [98, 214], "hadamardpow": [98, 214], "ddot": [98, 101, 133, 142, 194, 197, 214, 291], "functionmatrix": 98, "lazili": [98, 220, 252], "342923500": 98, "permutationmatrix": [98, 101], "matrixpermut": 98, "companionmatrix": 98, "matrixset": [98, 222], "submatric": [98, 101, 203, 234], "block_collaps": 98, "dat": [98, 252], "irregular": [98, 101], "ldudecomposit": 98, "ldu": 98, "2x2": [98, 104, 148, 203, 230], "udldecomposit": 98, "udl": 98, "schur": 98, "pinv": [98, 101], "r585": 98, "schur_compl": 98, "blockdiagmatrix": [98, 101], "diag_block": 98, "bridg": [99, 111, 129, 253], "tension": 99, "gramschmidt": 101, "m2": [101, 105, 108, 109, 126, 150, 158, 176, 178, 182, 209, 227, 230, 235, 240], "126": [101, 105, 213], "150": [101, 115, 227], "v3": [101, 189, 193, 265], "glue": 101, "m3": [101, 158, 227, 235], "adj": 101, "qr": 101, "cheat": 101, "soln": 101, "gram": [101, 183, 184, 186], "schmidt": 101, "out1": 101, "out2": 101, "1692": 101, "1551": 101, "423": 101, "6707": 101, "spot": [101, 147], "eigenvector": [101, 129, 173, 174, 199], "nullspac": [101, 203], "matrixdetermin": 101, "adjug": 101, "berkowitz": 101, "bareiss": 101, "cofactor_matrix": 101, "charpoli": [101, 203, 287], "_simplifi": 101, "purepoli": [101, 210], "samuelson": 101, "minor_submatrix": 101, "iszerofunc": [101, 287], "barei": 101, "det_lu": 101, "functiontyp": 101, "_iszero": [101, 287], "_is_zero_after_expand_mul": 101, "unrecogn": 101, "nonsquarematrixerror": [101, 230], "i3": [101, 116, 129, 146, 240], "ryser": 101, "r586": 101, "prof": 101, "ben": 101, "berkelei": 101, "bernd": 101, "ban275": 101, "r587": 101, "permanent_": 101, "r588": 101, "r589": 101, "rectangular": [101, 222, 233, 263], "0904": 101, "3251": 101, "matrixreduct": 101, "echelon_form": [101, 287], "with_pivot": 101, "echelon": [101, 203, 233, 287], "elementary_col_op": 101, "kn": [101, 108, 109], "col1": 101, "col2": 101, "km": [101, 105, 119, 124, 131, 133, 136, 137, 141, 143, 146, 185], "elementary_row_op": 101, "row1": 101, "row2": 101, "is_echelon": [101, 287], "rref": [101, 203], "pivot": [101, 203, 287], "normalize_last": 101, "rref_matrix": [101, 203], "rref_pivot": [101, 203], "301369863013699": 101, "712328767123288": 101, "noramlize_last": 101, "matrixsubspac": 101, "subspac": [101, 209], "columnspac": [101, 203], "rowspac": [101, 203], "orthonorm": [101, 146, 174, 198, 263], "rankcheck": 101, "r590": 101, "93schmidt_process": 101, "eigen": [101, 155], "bidiagonal_decomposit": 101, "ubv": 101, "bidiagon": 101, "bidiagn": 101, "r591": 101, "golub": 101, "van": [101, 105, 208], "loan": 101, "r592": 101, "vslobodi": 101, "household": 101, "r593": 101, "r594": 101, "reals_onli": 101, "throw": [101, 107, 129, 203, 209, 227, 233], "error_when_incomplet": 101, "eig": [101, 129, 146], "matrixerror": 101, "got": [101, 201, 204, 207, 210, 213, 245, 246, 252, 253, 283, 285, 286], "eigenvect": [101, 129, 146, 173, 287], "tidi": 101, "artifact": 101, "ret": 101, "eigenspac": 101, "rag": 101, "a_3": 101, "diagonaliz": [101, 287], "is_indefinit": 101, "semidefinit": [101, 234], "plot3d": [101, 200], "is_positive_definit": 101, "is_positive_semidefinit": 101, "is_negative_definit": 101, "is_negative_semidefinit": 101, "defer": [101, 256], "r595": 101, "definiteness_of_a_matrix": 101, "r596": 101, "positivedefinitematrix": 101, "r597": 101, "amer": 101, "259": 101, "264": [101, 232], "r598": 101, "r599": 101, "r600": 101, "r601": 101, "r602": 101, "r603": 101, "r604": 101, "r605": 101, "r606": 101, "r607": 101, "r608": 101, "r609": 101, "jordan_form": 101, "calc_transform": 101, "left_eigenvect": 101, "singular_valu": 101, "condition_numb": 101, "matrixcalculu": 101, "hessian": 101, "wronskian": [101, 230], "simpfunc": 101, "permutebkwd": 101, "permutefwd": 101, "lucombin": 101, "defici": [101, 105, 233], "matrixi": 101, "ludecomposition_simpl": [101, 287], "ludecompositionff": 101, "pa": [101, 124, 126, 141, 144, 147], "r610": 101, "zhou": 101, "jeffrei": [101, 226], "frontier": [101, 222], "china": 101, "67": [101, 207, 208], "2008": [101, 199, 208, 210, 214], "row_swap": 101, "permute_backward": 101, "permute_forward": 101, "intiuit": 101, "lu_": 101, "_find_reasonable_pivot": 101, "qr_solv": 101, "167": 101, "158": [101, 109], "27261": 101, "30625": 101, "348": 101, "1914": 101, "6125": 101, "30589": 101, "198": 101, "1225": 101, "q_aug": 101, "r_aug": 101, "analytic_func": 101, "connected_compon": [101, 252], "connected_components_decomposit": 101, "relax": [101, 107], "3x1": 101, "1x3": 101, "hat": [101, 123, 140, 188, 189, 194, 195, 197, 198, 263, 264, 266, 268, 269], "conjugate_convent": 101, "dual": [101, 171, 177], "anti_symmetr": 101, "speak": [101, 209, 266], "freevar": 101, "underdetermin": [101, 232, 233], "free_var_index": 101, "tau0": [101, 233, 234], "tau1": 101, "taus_zero": 101, "sol_uniqu": 101, "r611": 101, "gaussian_elimin": 101, "try_block_diag": 101, "inverse_g": [101, 287], "inverse_lu": [101, 287], "inverse_adj": [101, 287], "inverse_ch": 101, "inverse_ldl": 101, "inverse_qr": 101, "inv_mod": 101, "cof": 101, "inverse_block": 101, "blockwis": 101, "ntop": 101, "key2bound": 101, "key2ij": 101, "reciproc": [101, 234, 291], "fro": 101, "sing": 101, "spectral": 101, "rd": [101, 129, 214], "r612": 101, "penrose_pseudoinvers": 101, "arbitrary_matrix": 101, "wn_m": 101, "_w0_0": 101, "_w1_0": 101, "_w2_0": 101, "59": [101, 230], "r613": 101, "obtaining_all_solutions_of_a_linear_system": 101, "print_nonzero": [101, 252], "symb": [101, 214], "rank_decomposit": 101, "r614": 101, "rank_factor": 101, "r615": 101, "piziak": 101, "odel": 101, "magazin": 101, "193": [101, 113], "2307": 101, "2690882": 101, "singular_value_decomposit": 101, "condens": [101, 233], "v_aug": 101, "u_aug": 101, "s_aug": 101, "gj": 101, "solve_least_squar": 101, "strongly_connected_compon": [101, 203, 252], "62": [101, 207], "strongly_connected_components_decomposit": 101, "rowstart": 101, "rowend": 101, "rowsep": 101, "colsep": 101, "strprinter": [101, 194], "upper_hessenberg_decomposit": 101, "213": 101, "134": 101, "216": [101, 207], "hessenbergdecomposit": 101, "angular": [101, 108, 117, 120, 123, 126, 131, 132, 133, 134, 136, 138, 140, 143, 146, 148, 152, 153, 155, 158, 176, 180, 189, 193, 199], "rot_ccw_axis3": 101, "retriv": 101, "jordan_cel": 101, "varlist": 101, "r616": 101, "hessian_matrix": 101, "vlist": 101, "r617": 101, "casoratian": 101, "kernel": [101, 201, 207, 209, 232], "vanish": [101, 179, 207, 210, 213, 230, 259], "rsolve_hyp": [101, 232], "randmatrix": 101, "percent": [101, 233], "prng": 101, "percentag": [101, 105], "46": [101, 105, 108, 184, 213, 232, 234], "rot_given": 101, "diment": 101, "kk": 101, "ji": [101, 236], "rot_axis1": 101, "rot_axis2": 101, "rot_axis3": 101, "rot_ccw_axis1": 101, "rot_ccw_axis2": 101, "r618": 101, "givens_rot": 101, "list2numpi": 101, "dtype": [101, 106, 201, 203, 204, 205, 214, 253], "matrix2numpi": 101, "symarrai": 101, "ndarrai": [101, 234, 240, 246], "prefix_i1_i2_": 101, "a_0_0": 101, "a_0_1": 101, "a_0_2": 101, "a_1_0": 101, "a_1_1": 101, "a_1_2": 101, "a_0_0_0": 101, "a_0_0_1": 101, "a_0_1_0": 101, "a_0_1_1": 101, "a_0_2_0": 101, "a_0_2_1": 101, "a_1_0_0": 101, "a_1_0_1": 101, "a_1_1_0": 101, "a_1_1_1": 101, "a_1_2_0": 101, "a_1_2_1": 101, "a2idx": 101, "normalform": [102, 203], "hermite_normal_form": [102, 203, 209], "check_rank": [102, 203], "hnf": [102, 203, 209], "explos": [102, 203], "believ": [102, 105, 203], "dmdomainerror": [102, 203], "dmshapeerror": [102, 203], "r619": 102, "mutablesparsematrix": 103, "_doktocsr": 104, "csr": 104, "ja": 104, "ia": 104, "_csrtodok": 104, "dok": 104, "1x1": [104, 234], "vert": [104, 195, 198, 268], "saw": [104, 204, 291], "dynam": [105, 112, 113, 115, 119, 121, 124, 125, 128, 131, 139, 141, 142, 143, 144, 145, 146, 147, 188, 189, 191, 193, 197, 198, 249, 250, 259], "eratosthen": 105, "_reset": [105, 210], "_list": 105, "extend_to_no": 105, "mobiusrang": 105, "primerang": 105, "10th": 105, "totientrang": 105, "1e11": 105, "50000": 105, "primal": [105, 201], "1299709": 105, "r620": 105, "prime_number_theorem": 105, "table_of_": 105, "cf": [105, 207], "28x": 105, "2c_x_": 105, "2f_log_x": 105, "2c_and_li": 105, "r621": 105, "approximations_for_the_nth_prime_numb": 105, "r622": 105, "27_number": 105, "arr1": 105, "arr2": 105, "prevprim": 105, "9th": 105, "nextprim": 105, "occupi": [105, 179, 240], "conjectur": [105, 207], "twin": 105, "bertrand": 105, "brocard": 105, "primori": 105, "r623": 105, "r624": 105, "utm": 105, "postul": 105, "r625": 105, "s_postul": 105, "primefactor": 105, "argu": 105, "cycle_length": 105, "nmax": 105, "brent": [105, 249], "floyd": 105, "cycle_detect": 105, "17737": 105, "20000": 105, "compositepi": 105, "831": 105, "smoothness_p": 105, "sm": [105, 129, 146, 201], "psm": 105, "govern": 105, "10431": 105, "21477639576571": 105, "4410317": 105, "1787": 105, "4869863": 105, "2434931": 105, "multiplicity_in_factori": 105, "nfac": 105, "52818775009509558395695966887": 105, "is2pow": 105, "pollard_rho": 105, "max_step": 105, "pollard": [105, 230], "leader": 105, "16843009": 105, "32767": 105, "4i": 105, "3i": 105, "2489": 105, "1482": 105, "285": [105, 232], "leadup": 105, "r626": 105, "crandal": 105, "carl": [105, 249], "pomer": [105, 249], "229": 105, "231": [105, 189], "pollard_pm1": 105, "likelihood": 105, "1009": 105, "am": [105, 184, 214], "255": 105, "crack": 105, "617": 105, "1786": 105, "worst": [105, 210, 230], "scenario": [105, 234], "divisisor": 105, "realist": 105, "r627": 105, "236": 105, "r628": 105, "20150716201437": 105, "washington": 105, "2007": [105, 145, 249], "spring": [105, 120, 123, 124, 129, 134], "ent": 105, "node81": 105, "r629": 105, "toronto": 105, "yuvalf": 105, "use_ecm": 105, "65537": [105, 213], "1407633717262338957430697921446883": 105, "991": 105, "202916782076162456022877024859": 105, "4200": 105, "1764": 105, "toggl": [105, 200], "12345678910111213141516": 105, "2507191691": 105, "1231026625769": 105, "factorrat": 105, "rat": 105, "987": 105, "10000000001": 105, "99009901": 105, "divisor_count": 105, "tim": [105, 252], "1010381": 105, "proper_divisor": 105, "proper_divisor_count": 105, "udivisor": 105, "udivisor_count": 105, "r630": 105, "unitary_divisor": 105, "r631": 105, "unitarydivisor": 105, "r632": 105, "unitarydivisorfunct": 105, "antidivisor": 105, "r633": 105, "margin": [105, 115, 200, 234], "antidivisor_count": 105, "a066272": 105, "a066272a": 105, "r634": 105, "r635": 105, "27s_totient_funct": 105, "r636": 105, "totientfunct": 105, "r637": 105, "carmichael_funct": 105, "r638": 105, "carmichaelfunct": 105, "sigma_k": 105, "m_i": [105, 199, 207], "m_ik": 105, "r639": 105, "divisor_funct": 105, "udivisor_sigma": 105, "47450": 105, "152": 105, "r640": 105, "core_t": 105, "core_2": 105, "squarefre": [105, 209], "cubefre": 105, "9424": 105, "1178": 105, "379238": 105, "square_factor": [105, 227], "r641": 105, "free_integ": 105, "squarefree_cor": 105, "primenu": 105, "r642": 105, "primeomega": 105, "r643": 105, "mersenne_prime_expon": 105, "mersenn": 105, "4423": 105, "r644": 105, "perfectnumb": 105, "r645": 105, "perfect_numb": 105, "is_mersenne_prim": 105, "r646": 105, "mersenneprim": 105, "abund": 105, "is_abund": 105, "r647": 105, "abundantnumb": 105, "is_defici": 105, "r648": 105, "deficientnumb": 105, "is_amic": 105, "amic": 105, "220": [105, 210], "r649": 105, "amicable_numb": 105, "symmetric_residu": 105, "v_i": [105, 209, 232], "65": [105, 115, 207, 234], "639985": [105, 207], "912285": [105, 207], "954": 105, "gf_crt": [105, 207], "solve_congru": [105, 207], "programm": [105, 214], "galoistool": [105, 207], "crt1": [105, 207], "crt2": [105, 207], "397042": 105, "803206": 105, "gf_crt1": [105, 207], "4536": 105, "gf_crt2": [105, 207], "remainder_modulus_pair": 105, "mi": [105, 214], "k1": [105, 146, 177, 204, 205, 207], "k2": [105, 146, 204], "c_kn": 105, "binomial_coefficients_list": 105, "multinomial_coeffici": 105, "k_m": 105, "k_i": [105, 207, 224], "yann": 105, "laigl": 105, "chapui": 105, "permiss": [105, 199], "multinomial_coefficients_iter": 105, "_tupl": 105, "m53": 105, "partitions_": 105, "npartit": 105, "hardi": 105, "rademach": [105, 234], "r650": 105, "1958": [105, 199], "partitionfunctionp": 105, "is_euler_pseudoprim": 105, "pseudoprim": 105, "r651": 105, "euler_pseudoprim": 105, "prep": [105, 230, 231], "r652": 105, "mersenneforum": 105, "showpost": 105, "110896": 105, "mr": 105, "miller": 105, "rabin": 105, "wit": 105, "1373651": 105, "479001599": 105, "r653": 105, "135": 105, "138": 105, "93rabin_primality_test": 105, "deterministic_vari": 105, "is_lucas_prp": 105, "selfridg": 105, "377": 105, "1159": 105, "1829": 105, "3827": 105, "5459": 105, "5777": 105, "9071": 105, "9179": 105, "bailli": 105, "wagstaff": 105, "1980": [105, 252], "mpq": [105, 203, 204], "lucaspseudoprim": 105, "a217120": 105, "lucas_pseudoprim": 105, "is_strong_lucas_prp": 105, "bpsw": 105, "10877": 105, "16109": 105, "18971": 105, "a217255": 105, "psw_primality_test": 105, "is_extra_strong_lucas_prp": 105, "grantham": 105, "mo": [105, 146, 214], "jone": [105, 151], "preprint": 105, "a217719": 105, "perl": 105, "989": 105, "3239": 105, "jon": 105, "mcom": 105, "234": 105, "01197": 105, "counterexampl": [105, 291], "1e3": 105, "1e23": [105, 255], "near_int": 105, "strong_pseudoprim": 105, "is_gaussian_prim": 105, "r654": 105, "gaussian_prim": 105, "residue_ntheori": 105, "n_order": 105, "cong": [105, 207], "primitive_root": [105, 209], "r655": 105, "stein": [105, 230], "r656": 105, "hackman": 105, "sqrt_mod": 105, "sqrt_mod_it": 105, "quadratic_residu": 105, "nthroot_mod": 105, "109": [105, 208, 227], "is_nthpow_residu": 105, "r657": 105, "is_quad_residu": 105, "legendre_symbol": 105, "genfrac": 105, "nonresidu": 105, "alpha_2": [105, 209], "alpha_k": 105, "discrete_log": 105, "prime_ord": 105, "giant": [105, 233], "pohlig": 105, "r658": 105, "discretelogarithm": 105, "r659": 105, "cryptographi": [105, 270, 277], "menez": 105, "vanston": 105, "continued_fract": 105, "continued_fraction_period": 105, "continued_fraction_reduc": 105, "continued_fraction_converg": 105, "continued_fraction_iter": 105, "106": 105, "103993": 105, "33102": 105, "104348": 105, "33215": 105, "208341": 105, "66317": 105, "292": 105, "r660": 105, "discrimin": [105, 205, 207, 209, 210], "r661": 105, "periodic_continued_fract": 105, "r662": 105, "rosen": 105, "379": [105, 210], "381": 105, "januari": 105, "1992": [105, 208, 232, 252], "233": [105, 208, 230], "718281835": 105, "287": 105, "count_digit": 105, "1111339": 105, "0xfa": 105, "c77": 105, "is_palindrom": [105, 252], "palindrom": 105, "0o121": 105, "oct": 105, "0o171": 105, "fermion": [105, 179], "r663": 105, "b6bius_funct": 105, "r664": 105, "thoma": [105, 145], "koshi": 105, "egyptian_fract": 105, "greedi": [105, 207, 223, 226], "egyptian": 105, "r665": 105, "jewett": 105, "takenouchi": 105, "3192": 105, "1118": 105, "2580": 105, "sylvest": [105, 207], "r666": 105, "seldom": 105, "blow": 105, "doubli": 105, "exhibit": [105, 199, 209, 223], "singli": 105, "tendenc": 105, "r667": 105, "1921": 105, "golumb": 105, "1962": 105, "propos": 105, "bleicher": 105, "1972": 105, "r668": 105, "420": [105, 227], "140": 105, "574": 105, "2788": 105, "6460": 105, "11590": 105, "33062": 105, "113820": 105, "greedy_algorithm_for_egyptian_fract": 105, "uci": 105, "eppstein": 105, "numth": 105, "egypt": 105, "20180413004012": 105, "ami": 105, "ektf": 105, "hu": [105, 203], "finalpdf": 105, "ami_42_from129to134": 105, "bbp_pi": 105, "pi_hex_digit": 105, "hex": 105, "3243f6a8885a30": 105, "r669": 105, "numberworld": 105, "subexponenti": 105, "comfort": [105, 106], "15154262241479": 105, "15423094826093": 105, "799333555511111": 105, "809709509409109": 105, "888888877777777": 105, "914148152112161": 105, "factoris": [105, 204, 205, 230], "max_curv": 105, "lenstra": [105, 203], "ecm_one_factor": 105, "pseudorandom": [105, 252], "25645121643901801": 105, "5394769": 105, "4753701529": 105, "9804659461513846513": 105, "4641991": 105, "2112166839943": 105, "7060005655815754299976961394452809": 105, "6988699669998001": 105, "1010203040506070809": 105, "122921448543883967430908091422761898618349713604256384403202282756086473494959648313841": 105, "2709077133180915240135586837960864768806330782747": 105, "248": 105, "prime_bound": 105, "error_term": 105, "siq": 105, "modn": 105, "r670": 105, "semanticscholar": 105, "5c52": 105, "8a975c1405bd35c65993abf5a4edb667c1db": 105, "r671": 105, "rieselprim": 105, "ziki": 105, "initializing_quadratic_siev": 105, "5915587277": 105, "3267000013": 105, "facilit": [106, 139, 150, 196, 245], "000507214304613640": 106, "microsecond": 106, "000507214304614": 106, "hundr": [106, 253, 285], "nanosecond": 106, "84147098": [106, 253, 280], "84119981": 106, "84092844": 106, "05426074": 106, "05433146": 106, "05440211": 106, "nano": 106, "manufactur": 106, "asnumpi": 106, "jnp": 106, "asarrai": 106, "84147096": 106, "8411998": 106, "05426079": 106, "05433151": 106, "autowrap": [106, 239, 247, 251, 278], "implemented_funct": [106, 246, 253], "qualiti": [106, 214], "50u": 106, "1u": 106, "10n": 106, "sympy_pars": 107, "local_dict": 107, "lambda_not": 107, "repeated_decim": 107, "auto_numb": 107, "factorial_not": 107, "global_dict": 107, "standard_transform": 107, "implicit_multiplication_appl": 107, "implicit_appl": 107, "implicit_multipl": 107, "convert_equals_sign": 107, "function_exponenti": 107, "stringify_expr": 107, "eval_expr": 107, "name_dict": 107, "fullform": 107, "setdelai": 107, "datatyp": [107, 205, 214, 247], "split_symbol": 107, "split_symbols_custom": 107, "_token_splitt": 107, "can_split": 107, "unsplitt": 107, "10sin": 107, "3xyz": 107, "2111": 107, "latex2sympi": 107, "typograph": 107, "stricter": 107, "liber": [107, 119, 285], "618": 107, "latexparsingerror": 107, "sym_expr": 107, "sympyexpress": 107, "source_cod": 107, "return_expr": 107, "src2": 107, "convert_to_expr": 107, "convert_to_c": 107, "src3": 107, "convert_to_python": 107, "src_code": 107, "filenam": [107, 214, 245, 246, 247, 255], "convert_to_fortran": 107, "continuum_mechan": [108, 109, 111], "elastic_modulu": 108, "second_mo": 108, "base_char": 108, "withstand": [108, 109], "character": [108, 109, 195, 198, 221, 234, 240, 268], "profil": 108, "shear": [108, 109], "meter": [108, 109, 150, 153, 182, 183, 184, 185, 186], "downward": [108, 109, 111, 209], "apply_load": [108, 109, 111], "bc_deflect": [108, 109], "boundary_condit": 108, "solve_for_reaction_load": [108, 109], "shear_forc": [108, 109], "bending_mo": [108, 109], "reaction": [108, 109, 111], "upward": [108, 209], "reaction_load": [108, 109, 111], "applied_load": 108, "nm": [108, 109, 177, 235], "pointload": [108, 109], "ramp": [108, 109], "parabol": 108, "apply_support": [108, 111], "loc": 108, "freedom": [108, 123, 124, 130, 133, 139, 234, 276], "roller": [108, 109, 111], "r_10": 108, "r_30": 108, "4000": [108, 109], "bc_slope": [108, 109], "cross_sect": 108, "elast": [108, 109], "12000": 108, "draw": [108, 159, 214, 234], "pictori": 108, "ild_moment": 108, "ild_react": 108, "ild_shear": 108, "axial": [108, 148], "hing": [108, 109, 140], "cantilev": [108, 109], "666666666666667": [108, 109], "max_bmoment": 108, "max_deflect": 108, "max_shear_forc": 108, "plot_bending_mo": [108, 109], "gpa": 108, "400": [108, 200, 210], "13750": 108, "31250": 108, "plot_deflect": [108, 109], "00138541666666667": 108, "86458333333333e": 108, "04166666666667e": 108, "20833333333333e": 108, "51041666666667e": 108, "plot_ild_mo": 108, "solve_for_ild_mo": 108, "1kn": 108, "r_0": 108, "r_8": 108, "solve_for_ild_react": 108, "plot_ild_react": 108, "5kn": 108, "r_7": 108, "plotgrid": 108, "plot_ild_shear": 108, "solve_for_ild_shear": 108, "plot_loading_result": [108, 109], "subplot": [108, 200], "plot_shear_forc": [108, 109], "plot_shear_stress": 108, "stress": 108, "6875": 108, "2500": 108, "15625": [108, 186], "plot_slop": [108, 109], "59375e": 108, "125e": 108, "08333333333333e": 108, "0001953125": 108, "point_cflexur": 108, "overhang": [108, 109], "10kn": 108, "20kn": [108, 109], "3kn": 108, "remove_load": [108, 111, 120], "shear_stress": 108, "beam3d": 108, "shear_modulu": 108, "apply_moment_load": 108, "solve_slope_deflect": 108, "r672": 108, "aau": 108, "jc": 108, "femtesemest": 108, "beams3d": 108, "angular_deflect": 108, "depict": [108, 195, 233, 268], "axial_forc": 108, "axial_stress": 108, "load_vector": 108, "max_bending_mo": 108, "16000": 108, "495": 108, "10793": 108, "6400": 108, "301": [108, 224, 227], "560": 108, "2400": 108, "moment_load_vector": 108, "40000": 108, "4013": 108, "90300": 108, "1520": 108, "903": 108, "1600": [108, 109], "172": 108, "polar_mo": 108, "i1": [108, 116, 129, 146, 240], "1350": 108, "solve_for_tors": 108, "torsion": 108, "torqu": [108, 120, 124, 126, 128, 134, 141, 142, 144, 146], "torsional_mo": 108, "________________": [109, 230], "_______________v": 109, "_______________": 109, "equilibrium": [109, 111, 131, 143], "20e9": 109, "25e": 109, "______________________________________________": 109, "_______________________________________________": 109, "r\u2081": 109, "r\u2082": 109, "______________________": 109, "________________________": 109, "8kn": 109, "_____________": 109, "1m": 109, "3m": 109, "2m": 109, "5m": [109, 249], "679": 109, "12kn": 109, "________________________________": 109, "____________________________________________________": 109, "o____________________________________________________": 109, "4m": 109, "_____________________________________": 109, "m\u2081": 109, "m\u2082": 109, "connector": 109, "_____________________": 109, "_______________________": 109, "_____________________o_______________________": 109, "oooo": [109, 252], "r\u2083": 109, "_______i_______": 109, "flexur": 109, "rigid": [109, 111, 120, 124, 126, 129, 131, 134, 139, 146, 189, 197, 276], "____________": 109, "____________o________________________": 109, "a\u2082": [109, 291], "assembli": [111, 131], "joint": [111, 122, 132, 134, 139, 276], "add_nod": 111, "node_1": 111, "node_2": 111, "node_3": 111, "node_4": 111, "add_memb": 111, "member_1": 111, "member_2": 111, "member_3": 111, "member_4": 111, "member_5": 111, "270": 111, "360": 111, "change_member_label": 111, "new_label": 111, "change_node_label": 111, "bc_new": 111, "internal_forc": 111, "member_label": 111, "node_label": 111, "node_posit": 111, "remove_memb": 111, "remove_nod": 111, "remove_support": 111, "unstabl": 111, "revolv": 111, "tensil": 111, "r_node_1_x": 111, "r_node_1_i": 111, "r_node_2_i": 111, "lti": [112, 113], "transferfunct": [112, 113, 115], "interconnect": [112, 115, 123], "mimo": [112, 115], "transferfunctionmatrix": [112, 115], "mimoseri": [112, 115], "mimoparallel": [112, 115], "mimofeedback": [112, 115], "control_plot": 113, "pole_zero_plot": 113, "pole_color": 113, "blue": [113, 140, 200, 214], "pole_markers": 113, "zero_color": 113, "orang": 113, "zero_markers": 113, "show_ax": 113, "marker": [113, 200], "sisolineartimeinvari": [113, 115], "markers": 113, "tf1": [113, 115], "pole_zero_numerical_data": 113, "r673": 113, "93zero_plot": 113, "siso": [113, 115], "8660254j": 113, "bode_plot": 113, "initial_exp": 113, "final_exp": 113, "freq_unit": 113, "phase_unit": 113, "semilog": 113, "hz": 113, "hertz": 113, "bode_magnitude_plot": 113, "bode_phase_plot": 113, "bode_magnitude_numerical_data": 113, "5148378120533502e": 113, "68437": 113, "36188804005": 113, "020599914256786": 113, "0205999155219505": 113, "4117304087953": 113, "00000000260573": 113, "bode_phase_numerical_data": 113, "4472354033813751e": 113, "035581932165858e": 113, "47577": 113, "3248186011": 113, "67884": 113, "09326036123": 113, "5000000000291665e": 113, "6180885085e": 113, "08895483066e": 113, "1415085799262523": 113, "14155265358979": 113, "impulse_response_plot": 113, "lower_limit": [113, 281], "upper_limit": [113, 281], "step_response_plot": 113, "ramp_response_plot": 113, "r674": 113, "impulse_response_numerical_data": 113, "nb_of_point": [113, 200], "lineover1drangeseri": [113, 200], "amplitud": [113, 153], "06616480200395854": 113, "854500743565858": 113, "9999999799999999": 113, "7042848373025861": 113, "170748906965121e": 113, "1901263495547205e": 113, "r675": 113, "step_response_numerical_data": 113, "025413462339411542": 113, "0484508722725343": 113, "670250533855183": 113, "844291913708725": 113, "023844582399907256": 113, "042894276802320226": 113, "828770759094287e": 113, "456457160755703e": 113, "mx": [113, 159, 221], "r676": 113, "ramp_funct": 113, "ramp_response_numerical_data": 113, "12166980856813935": 113, "861246379582118": 113, "4504508011325967e": 113, "006046440489058766": 113, "12499999999568202": 113, "12499999999661349": 113, "den": [115, 205, 226, 230], "superscript": [115, 214], "impuls": 115, "tf2": 115, "tf3": 115, "tf4": 115, "tf5": 115, "tf6": 115, "500000000000000": 115, "tf7": 115, "tf8": 115, "tf9": 115, "tf10": 115, "tf11": 115, "tf12": 115, "r677": 115, "transfer_funct": 115, "r678": 115, "dc_gain": 115, "dc": [115, 142], "from_rational_express": 115, "zerodivisionerror": [115, 205, 243, 253], "tf": [115, 253], "is_biprop": 115, "is_prop": 115, "is_stabl": 115, "is_strictly_prop": 115, "sys1": 115, "sys2": 115, "feedforward": 115, "fed": 115, "sit": [115, 198], "plant": 115, "compulsori": 115, "tf_1": 115, "tf_2": 115, "tf_3": 115, "tf_4": 115, "tfm_1": 115, "num_input": 115, "num_output": 115, "tfm_2": 115, "tf_5": 115, "tf_6": 115, "tf_7": 115, "tf_8": 115, "tfm_3": 115, "tfm_4": 115, "tfm_5": 115, "tfm_6": 115, "tf_9": 115, "tf_10": 115, "tfm_7": 115, "tfm_8": 115, "tfm_9": 115, "tfm_10": 115, "tfm_11": 115, "tfm_12": 115, "elem_pol": 115, "elem_zero": 115, "m_tf": 115, "tfm": 115, "tfm1": 115, "tfm2": 115, "g4": 115, "tfm3": 115, "mimolineartimeinvari": 115, "mat_a": 115, "mat_b": 115, "mat_c": 115, "tfm_a": 115, "tfm_b": 115, "tfm_c": 115, "expr_1": 115, "expr_2": 115, "expr_3": 115, "expr_4": 115, "plant_mat": 115, "controller_mat": 115, "neg_feedback": 115, "bilinear": 115, "sample_p": 115, "numz": 115, "denz": 115, "backward_diff": 115, "hep": 116, "gamma_matric": [116, 118], "gammamatrix": 116, "lorentzindex": 116, "gammamatrixhead": 116, "extract_type_ten": 116, "gamma_trac": 116, "i0": [116, 151, 240], "i2": [116, 129, 146, 240], "i4": [116, 240], "i5": 116, "kahane_simplifi": 116, "spinor": 116, "ta": [116, 223], "tb": [116, 223, 245], "tc": [116, 205, 210, 223], "joseph": [116, 208], "kahan": 116, "octob": 116, "1968": 116, "simplify_gpgp": 116, "e_nl": [117, 180], "hartre": 117, "helium": 117, "2209": 117, "e_nl_dirac": 117, "spin_up": 117, "035999037000": 117, "relativist": 117, "momentum": [117, 126, 129, 146, 157, 158, 176, 180, 199, 240], "light": [117, 151, 183, 184, 194, 201], "035999037": 117, "1012": 117, "3627": 117, "500006656595360": 117, "125002080189006": 117, "125000416028342": 117, "0555562951740285": 117, "0555558020932949": 117, "0555556377366884": 117, "psi_nlm": 117, "wave": [117, 149, 150, 151, 217, 276], "psi_": [117, 155], "nlm": 117, "radial": [117, 133, 180], "nl": [117, 180], "magnet": [117, 150, 195, 268], "azimuth": 117, "wf": [117, 131], "abs_sqrd": 117, "silver": 117, "94": [117, 208], "141": 117, "4418": 117, "mdft": 118, "mgamma": 118, "gamma_5": 118, "gamma_0": 118, "gamma_3": 118, "r679": 118, "msigma": 118, "pauli": [118, 276], "sigma_i": [118, 234], "r680": 118, "pauli_matric": [118, 154], "pat_matrix": 118, "unansw": [119, 188], "kane": [119, 122, 123, 129, 135, 139, 140, 145, 146, 188, 189, 259, 276], "q1d": [119, 129, 131, 133, 136, 137, 138, 141, 142, 143, 144, 188, 194, 198], "q2d": [119, 129, 131, 133, 136, 137, 138, 141, 142, 193, 194], "q3d": [119, 136, 137, 138, 141], "kinemat": [119, 123, 124, 128, 129, 131, 132, 133, 134, 136, 138, 140, 141, 143, 144, 146, 147, 189, 192, 196, 198, 276], "dyad": [119, 146, 189, 263], "mprint": [119, 136, 137, 138, 141], "mpprint": [119, 141], "mlatex": 119, "sub_dict": [119, 121, 131], "msub": [119, 121, 143], "gsl": [119, 247], "lsoda": 119, "penalti": 119, "central_inertia": [120, 126, 132, 134], "possess": [120, 144, 240], "name_of_bodi": 120, "ixx": [120, 126, 189], "body_inertia": 120, "ang_vel_in": [120, 123, 129, 136, 137, 146, 189, 197], "set_ang_vel": [120, 126, 129, 131, 136, 137, 143, 144, 146, 147, 189, 191, 193, 197], "apply_forc": [120, 123, 134], "reaction_bodi": [120, 123, 134], "reaction_point": 120, "oppposit": 120, "desri": 120, "force1": 120, "b_masscent": 120, "b_frame": [120, 123], "newtonion": [120, 123], "spring_forc": 120, "n_frame": 120, "apply_torqu": [120, 134], "torquess": 120, "torque1": 120, "b1_frame": 120, "b2_frame": 120, "clear_load": 120, "kinetic_energi": [120, 126, 144, 146], "inerti": [120, 123, 124, 126, 131, 133, 136, 141, 142, 144, 146], "set_vel": [120, 124, 126, 129, 131, 133, 136, 137, 138, 141, 142, 143, 144, 146, 147, 193, 197], "b_ixx": 120, "b_mass": [120, 123], "masscenter_vel": 120, "parallel_axi": [120, 126], "a_ixx": 120, "a_mass": 120, "a_ixi": 120, "a_izx": 120, "a_iyi": 120, "a_iyz": 120, "a_izz": 120, "smart": [121, 143, 221, 227, 230], "sub1": [121, 214], "sub2": [121, 214], "find_dynamicsymbol": 121, "reference_fram": [121, 189], "symbolicsystem": [122, 139, 276], "interfram": [123, 193], "_generate_coordin": 123, "_generate_spe": 123, "_orient_fram": 123, "_set_angular_veloc": 123, "_set_linear_veloc": 123, "kde": [123, 132, 133, 140, 143], "revolut": 123, "\u03c9": 123, "pc": [123, 211], "p_masscent": 123, "c_masscent": 123, "p_frame": 123, "c_frame": 123, "q_pc": 123, "u_pc": 123, "upper_bob": 123, "lower_bob": 123, "ceiling_joint": 123, "pendulum_joint": 123, "q_p1": 123, "q_p2": 123, "u_fram": 123, "l_frame": 123, "u_p1": 123, "u_p2": 123, "vel": [123, 129, 131, 133, 137, 140, 146, 193, 197, 266], "prismat": 123, "slide": 123, "part1": 123, "part2": 123, "j1": [123, 132, 134, 158, 176], "j2": [123, 132, 134, 158, 176], "q_j1": 123, "w_frame": 123, "q_j2": 123, "p1_frame": 123, "u_j1": 123, "cylindricaljoint": 123, "rotation_coordin": 123, "translation_coordin": 123, "rotation_spe": 123, "translation_spe": 123, "cylindr": [123, 200, 266], "q0_": 123, "q1_": 123, "u0_": 123, "u1_": 123, "q0_pc": 123, "q1_pc": 123, "u0_pc": 123, "u1_pc": 123, "tube": 123, "floor_joint": 123, "flag_joint": 123, "q0_c1": 123, "q0_c2": 123, "q1_c1": 123, "floor_fram": 123, "q1_c2": 123, "tube_fram": 123, "flag_fram": 123, "u0_c1": 123, "u0_c2": 123, "u1_c1": 123, "planarjoint": 123, "planar_coordin": 123, "planar_spe": 123, "q2_": 123, "u2_": 123, "nonparallel": 123, "q_1": [123, 132, 133, 134, 143, 159, 197, 210, 227], "q_2": [123, 132, 133, 134, 143, 197], "q_0": [123, 159, 227], "rotation_axi": 123, "planar_vector": 123, "q2_pc": 123, "u2_pc": 123, "parent_vector": 123, "plane_vector": 123, "g_frame": 123, "sphericaljoint": 123, "rot_typ": [123, 189, 193, 195], "rot_ord": [123, 189, 193, 261], "ball": 123, "socket": 123, "tait": [123, 189, 259, 261], "bryan": [123, 189, 259, 261], "joint_point": 123, "zxz": [123, 189, 198, 259, 261], "weldjoint": 123, "weld": 123, "quarter": [123, 151], "rotated_fram": 123, "jointsmethod": [123, 132, 134], "damper": [123, 124, 129, 134], "form_eom": [123, 134, 140], "mass_matrix_ful": [123, 124, 129, 134, 141, 142], "forcing_ful": [123, 124, 129, 134, 141, 142], "mass_matrix": [123, 124, 128, 131, 136, 137, 141, 142, 147], "lagrangesmethod": [123, 124, 133, 138, 142, 143], "qd": [123, 124, 131, 141, 193], "inv_method": [123, 124], "q_ind": [124, 125, 129, 131, 132, 133, 136, 137, 141, 143, 146], "u_ind": [124, 125, 129, 131, 132, 133, 136, 137, 141, 143, 146], "kd_eq": [124, 129, 131, 132, 133, 136, 137, 143, 146], "q_depend": [124, 131, 132, 133, 141, 146], "configuration_constraint": [124, 131, 132, 133, 141], "u_depend": [124, 131, 132, 133, 141, 146], "velocity_constraint": [124, 131, 132, 133, 141, 146], "acceleration_constraint": 124, "u_auxiliari": [124, 137, 141, 146], "forcelist": [124, 129, 132, 133, 136, 137, 142, 143, 146], "explicit_kinemat": 124, "kd_eqs_solv": 124, "constraint_solv": 124, "levinson": [124, 145, 189, 259], "udot": [124, 131], "linsolv": [124, 146, 212, 232, 233, 292], "ud": [124, 141], "kd": [124, 131, 136, 137, 141], "fl": [124, 131, 141, 142, 146, 208], "bl": [124, 131, 141, 146], "frstar": [124, 129, 131, 133, 136, 137, 141, 143, 146], "kanes_equ": [124, 129, 131, 133, 136, 137, 141, 143, 146], "a_and_b": [124, 125, 133], "auxiliary_eq": [124, 137], "k_d": [124, 141], "k_dnh": 124, "f_d": [124, 141, 142, 207], "f_dnh": 124, "mass_matrix_kin": 124, "k_kqdot": 124, "forcing_kin": 124, "k_ku": 124, "constrain": [124, 133, 142, 146], "kindiffdict": [124, 131, 136, 137, 141, 146], "new_method": [124, 133], "intens": [124, 125, 148, 151], "perm_mat": [124, 125, 143], "op_point": [124, 125, 133, 143], "beforehand": [124, 247], "to_linear": [124, 143], "recalcul": [124, 210], "hol_coneq": [124, 133, 142], "nonhol_coneq": [124, 133, 142], "nonconserv": 124, "form_lagranges_equ": [124, 133, 138, 142, 143], "qdot": [124, 131, 132, 193], "qdoubledot": 124, "lam": [124, 125, 147], "lagranges_equ": 124, "qd_ind": [124, 143], "q_dep": [124, 141, 143], "qd_dep": [124, 143], "solve_multipli": [124, 133], "sol_typ": 124, "array_lik": 124, "f_3": [125, 128, 147, 230], "f_c": [125, 133], "f_v": [125, 133], "f_a": 125, "q_d": 125, "u_i": [125, 143, 197, 207], "u_d": [125, 146], "q_op": [125, 133], "u_op": [125, 133], "qd_op": 125, "ud_op": [125, 133], "spatial": [126, 153, 189, 214], "angular_momentum": [126, 144, 146], "init_vprint": [126, 127, 144, 147, 189, 191, 193, 194, 197, 198], "linear_momentum": [126, 144, 146], "inertia_tupl": 126, "from_tensor": 126, "from_inertia_scalar": 126, "iyi": [126, 189], "izz": [126, 189], "ixi": [126, 189], "iyz": [126, 189], "izx": 126, "yy": [126, 189, 198, 230], "yz": [126, 189, 198, 200], "zx": [126, 189, 198], "pos_vec": 126, "px": [126, 169, 174, 240], "body1": 126, "body2": 126, "body3": 126, "h2": 126, "multibodi": [126, 129, 139, 145, 146, 147, 197], "vprint": [127, 188, 193, 194, 198], "vpprint": [127, 188, 194, 198], "vlatex": [127, 188, 189, 194, 198], "coord_stat": 128, "right_hand_sid": 128, "coordinate_deriv": [128, 147], "alg_con": [128, 147], "output_eqn": 128, "coord_idx": [128, 147], "speed_idx": [128, 147], "m_3": [128, 147, 158, 199], "exogen": [128, 147], "ref_fram": 128, "theta_dot": 128, "kin_explicit_rh": [128, 147], "dyn_implicit_mat": [128, 147], "dyn_implicit_rh": [128, 147], "symsystem": 128, "dae": [128, 147], "comb_implicit_mat": [128, 147], "comb_implicit_rh": [128, 147], "kinema": 128, "comb_explicit_rh": [128, 147], "compute_explicit_form": 128, "awhil": 128, "constant_symbol": 128, "dynamic_symbol": 128, "motiongenesi": [129, 146], "double_pendulum": 129, "motionvari": [129, 146], "newtonian": [129, 146], "simprot": [129, 146], "n_a": 129, "n_b": 129, "w_a_n": 129, "w_b_n": [129, 146], "p_o_p": 129, "p_p_r": 129, "v_o_n": [129, 146], "v2pt": [129, 146], "v_p_n": 129, "v_r_n": 129, "force_p": 129, "force_r": 129, "tfinal": 129, "integstp": 129, "some_filenam": 129, "parse_autolev": 129, "sympy_cod": 129, "include_numer": 129, "include_pydi": 129, "pydi": [129, 146, 189], "u1d": [129, 131, 133, 136, 137, 141], "u2d": [129, 131, 133, 136, 137, 141], "frame_n": 129, "frame_a": 129, "frame_b": 129, "point_o": 129, "particle_p": 129, "p_pt": 129, "particle_r": 129, "r_pt": 129, "set_po": [129, 193, 197], "v2pt_theori": [129, 131, 136, 137, 138, 143, 144, 146, 147, 193, 197], "initial_condit": [129, 146], "overwritten": 129, "e2row": 129, "eigvec": [129, 146], "eigenvec": 129, "deg2rad": 129, "0174533": 129, "wo": 129, "coef": [129, 146], "u3": [129, 131, 132, 134, 136, 137, 141, 146, 189, 193, 197], "strai": 129, "reassign": 129, "inher": [129, 253, 283], "rhs_x": 129, "i_b_bo": 129, "body_b": 129, "body_b_f": 129, "b_cm": 129, "b_f": 129, "scene": [129, 226, 283], "i_c_d": 129, "i_p_q": 129, "i_b_o": 129, "e3": [129, 221, 230], "i_p_o": 129, "e4": [129, 221], "p_so_o": 129, "nicheck": 129, "plug": [129, 184], "hurdl": 129, "gitlab": 129, "ch4": 129, "ch5": 129, "ch6": 129, "cst": 129, "grammar": [129, 226], "roll": [130, 131, 139, 197, 234, 276], "disc": [130, 139, 197, 276], "bicycl": [130, 139, 145, 276], "nonminim": [130, 139, 143, 276], "linkag": [130, 139, 276], "meijaard2007": [131, 145], "steer": [131, 145], "purposefulli": 131, "mechanics_print": [131, 132, 136, 137, 138, 140, 141, 142], "yaw": 131, "ang": 131, "rear": 131, "wheel": 131, "pitch": 131, "q4": [131, 141, 191], "q5": [131, 191], "q4d": [131, 141], "q5d": 131, "u4": [131, 137, 141, 146], "u5": [131, 137], "u6": [131, 137], "u3d": [131, 136, 137], "u4d": 131, "u5d": 131, "u6d": 131, "explanatori": 131, "wfrad": 131, "wrrad": 131, "htangl": 131, "forkoffset": 131, "forklength": 131, "framelength": 131, "forkcg1": 131, "forkcg3": 131, "framecg1": 131, "framecg3": 131, "iwr11": 131, "iwr22": 131, "iwf11": 131, "iwf22": 131, "iframe11": 131, "iframe22": 131, "iframe33": 131, "iframe31": 131, "ifork11": 131, "ifork22": 131, "ifork33": 131, "ifork31": 131, "mframe": 131, "mfork": 131, "mwf": 131, "mwr": 131, "wr": 131, "tempfram": 131, "tempfork": 131, "orientnew": [131, 133, 136, 137, 138, 143, 147, 189, 191, 193, 195, 197, 198], "wr_cont": 131, "wr_mc": 131, "frame_mc": 131, "fork_mc": 131, "wf_mc": 131, "wf_cont": 131, "flip": [131, 164, 173, 234], "frame_i": 131, "fork_i": 131, "wr_i": 131, "wf_i": 131, "bodyfram": 131, "bodyfork": 131, "bodywr": 131, "bodywf": 131, "nonholonom": 131, "replic": 131, "conlist_spe": 131, "conlist_coord": 131, "gravit": [131, 136, 182, 195, 268], "aforement": [131, 195, 227, 266], "paperradrear": 131, "paperradfront": 131, "hta": 131, "trailpap": 131, "rake": 131, "paperwb": 131, "02": 131, "paperframecgx": 131, "paperframecgz": 131, "paperforkcgx": 131, "paperforkcgz": 131, "framecgnorm": 131, "framecgpar": 131, "tempa": 131, "tempb": 131, "tempc": 131, "paperforkl": 131, "forkcgnorm": 131, "forkcgpar": 131, "upright": 131, "val_dict": 131, "0603": 131, "1405": 131, "05892": 131, "00708": 131, "00756": 131, "kdd": [131, 136, 137], "centripet": 131, "corioli": 131, "forcing_lin": 131, "mm_full": 131, "_k_kqdot": 131, "xdot": 131, "lean": [131, 136, 138], "amat": 131, "q_3": [132, 134, 197], "u_1": [132, 133, 134, 197, 209, 230], "u_2": [132, 133, 134, 197, 209, 230], "u_3": [132, 134, 197], "densiti": [132, 234, 245, 269], "link1": 132, "link2": 132, "link3": 132, "link4": 132, "joint1": 132, "joint2": 132, "joint3": 132, "j3": [132, 134, 158, 176], "fh": 132, "fhd": 132, "_method": 132, "_form_eom": 132, "eom": [133, 134, 143], "dq_dict": 133, "presimplifi": 133, "inp_vec": [133, 143], "lag": [133, 138, 143], "lm": [133, 142, 143, 207, 210], "lag_eq": [133, 143], "lam_op": 133, "mb": [134, 146], "ibzz": 134, "compound_pend": 134, "simple_pend": 134, "slider": 134, "rev1": 134, "rev2": 134, "w_r_n_qd": [136, 137], "dmc": [136, 137, 138], "uv": [136, 137, 179], "bodyd": [136, 137, 138], "bodylist": [136, 137], "kane1985": [137, 141, 145, 188], "thorough": [137, 143, 227], "simplifc": 137, "f3": [137, 200, 214], "necessit": 137, "simplify_auxiliary_eq": 137, "lrh": 138, "planet": 139, "robot": 139, "fascin": 139, "trajectori": 139, "challeng": 139, "came": [139, 286], "tackl": [139, 247], "amen": 139, "arduou": 139, "child_izz": 140, "child_mass": 140, "f_h": 141, "nh": 141, "ku": [141, 214], "dnh": 141, "f_r": [141, 143, 207], "speed_con": 141, "coord_con": 141, "u_dep": 141, "m_d": 142, "lam1": 142, "0_": 143, "blajer1994": [143, 145], "brought": [143, 234], "vel_p": 143, "a_op": 143, "b_op": 143, "m_op": 143, "a_lin": 143, "hasn": 143, "juxtaposit": [144, 188, 263], "rb_masscent": 144, "rb_frame": 144, "l_p": 144, "likins1973": [144, 196], "l_b": 144, "requisit": 144, "t_p": 144, "t_b": 144, "t_t": 144, "virtu": [144, 146], "blajer": 145, "wojciech": 145, "werner": 145, "schiehlen": 145, "walter": 145, "schirm": 145, "kane1983": [145, 198], "likin": [145, 196], "david": [145, 210], "spacecraft": 145, "1983": [145, 249], "meijaard": 145, "jim": 145, "papadopoulo": 145, "ruina": 145, "schwab": 145, "royal": 145, "societi": [145, 227], "2084": 145, "1955": 145, "982": 145, "lectur": [146, 208, 234], "rigibodi": 146, "proprietari": 146, "k3": [146, 204], "k4": 146, "b11": 146, "b12": 146, "b21": 146, "b22": 146, "xd": 146, "xd2": 146, "y1d": 146, "y2d": 146, "tina": 146, "overwrit": [146, 188], "dt2": 146, "dy2": 146, "ty": 146, "nonlinsolv": [146, 232, 233, 292], "rowmatrix": 146, "colmatrix": 146, "diagmat": 146, "eigval": 146, "row_matrix": 146, "col_matrix": 146, "ao": 146, "i12": 146, "i23": 146, "i31": 146, "bf": 146, "p_o_q": 146, "mag": 146, "unitvec": 146, "qo": 146, "p_p_q": 146, "partial_veloc": [146, 189, 193], "a_o_n": 146, "set_acc": [146, 193, 197], "qb": [146, 202], "qbd": 146, "alf_b_n": 146, "set_ang_acc": [146, 189], "ang_acc_in": [146, 189], "force_o": 146, "torque_a": 146, "qa": 146, "qad": 146, "a_b": 146, "v1pt": 146, "v1pt_theori": [146, 193, 197], "a1pt": 146, "a1pt_theori": [146, 193], "a2pt": 146, "a2pt_theori": [146, 193, 197], "angvel": 146, "force_vector": 146, "center_of_mass": 146, "kindiff": 146, "ke": 146, "configura": 146, "tion_constraint": 146, "pendent": 146, "velocity_con": 146, "traint": 146, "acceleration_": 146, "u_auxilia": 146, "ry": 146, "matlplotlib": 146, "stiff": 146, "damp": 146, "introspect": 146, "rich": [146, 226], "media": [146, 152], "esqu": 146, "pertin": [147, 201, 209], "alg_con_ful": 147, "symsystem1": 147, "symsystem2": 147, "symsystem3": 147, "raytransfermatrix": 148, "geometricrai": 148, "beamparamet": 148, "geometric_conj": 148, "gauss_conj": 148, "conjugate_gauss_beam": 148, "lens": 148, "gaussopt": 148, "wavelen": 148, "z_r": 148, "wavelength": [148, 153], "waist": 148, "rayleigh": [148, 234], "refract": [148, 150, 152, 153], "530e": 148, "88679245283019": 148, "92753330865999": 148, "w_0": [148, 227], "00100000000000000": 148, "freespac": 148, "00101413072159615": 148, "00210803120913829": 148, "r681": 148, "complex_beam_paramet": 148, "r682": 148, "gaussian_beam": 148, "spread": [148, 214, 234, 249], "00053": 148, "goui": 148, "55998576005696": 148, "2809": 148, "peak": 148, "waist_approximation_limit": 148, "paraxi": [148, 152], "06e": 148, "curvedmirror": 148, "curvedrefract": 148, "flatmirror": 148, "flatrefract": 148, "2x1": 148, "thinlen": 148, "r683": 148, "ray_transfer_matrix_analysi": 148, "waist_in": 148, "waist_out": 148, "s_in": 148, "s_out": 148, "w_o": 148, "gaussian_conj": 148, "z_r_in": 148, "incid": [148, 152], "z_r_out": 148, "emerg": [148, 202], "geometric_conj_ab": 148, "geometric_conj_af": 148, "geometric_conj_bf": 148, "rayleigh2waist": 148, "waist2rayleigh": 148, "optic": [150, 151, 152, 153, 276], "permitt": 150, "permeabl": 150, "fermat": 150, "electr": [150, 152, 195, 266, 268], "electromagnet": [150, 183, 195, 240, 268], "intrinsic_imped": 150, "149896229": [150, 153, 183], "kilogram": [150, 182, 184, 186], "1250000": 150, "amper": [150, 183], "refractive_index": 150, "299792458": [150, 153, 183, 186], "r684": 150, "optical_medium": 150, "travel": [150, 153, 195, 266, 268], "stoke": 151, "mueller": 151, "jones_vector": 151, "stokes_vector": 151, "half_wave_retard": 151, "polarizing_beam_splitt": 151, "jones_2_stok": 151, "\u2148": [151, 199, 213, 214, 233, 292], "\u03c7": 151, "\u03c8": 151, "i\u2080": 151, "plate": 151, "hwp": 151, "splitter": 151, "transmit": [151, 152], "pb": 151, "transmitted_port": 151, "reflected_port": 151, "transmitted_pow": 151, "reflected_pow": 151, "r685": 151, "jones_calculu": 151, "r686": 151, "mueller_calculu": 151, "r687": 151, "stokes_paramet": 151, "retard": 151, "poincar\u00e9": 151, "tilt": 151, "mayor": 151, "linear_polar": 151, "transmiss": [151, 152], "mueller_matrix": 151, "quarter_wave_retard": 151, "phase_retard": 151, "\u03b4": 151, "phia": 151, "phib": 151, "4x1": [151, 234], "phi_a": 151, "phi_b": 151, "qwp": 151, "reflective_filt": 151, "unpolar": 151, "transmissive_filt": 151, "attenu": 151, "transmitt": 151, "ndf": 151, "refraction_angl": 152, "fresnel_coeffici": 152, "brewster_angl": 152, "critical_angl": 152, "lens_makers_formula": 152, "mirror_formula": 152, "lens_formula": 152, "hyperfocal_dist": 152, "transverse_magnif": 152, "medium1": 152, "medium2": 152, "brewster": 152, "926093295503462": 152, "onset": 152, "850908514477849": 152, "02005": 152, "angle_of_incid": 152, "fresnel": [152, 214, 224], "polaris": 152, "te": 152, "317843553417859": 152, "348645229818821": 152, "658921776708929": 152, "651354770181179": 152, "235625382192159": 152, "971843958291041": 152, "816477005968898": 152, "577377951366403": 152, "r688": 152, "fresnel_equ": 152, "coc": 152, "0033": 152, "focal_length": 152, "n_len": 152, "n_surr": 152, "thick": 152, "1515151515151": 152, "0000000000000": 152, "3418463277618": 152, "41152": 152, "magnif": 152, "twave": 153, "time_period": 153, "wavenumb": 153, "phi1": 153, "phi2": 153, "w1": [153, 226], "w3": [153, 214], "superposit": [153, 164, 175, 201], "angular_veloc": 153, "tempor": 153, "r689": 154, "paulialgebra": 154, "evaluate_pauli_product": 154, "paulimatric": 154, "sigma3": 154, "nodal": [155, 180, 201], "hw": [155, 180], "coherent_st": 155, "coher": [155, 181, 187], "1d": [155, 157, 170, 189, 239], "wavefunct": [155, 168, 177, 180, 276], "r690": 156, "__cmp__": [156, 160, 179], "dagger": [156, 160, 166, 168, 171, 173, 178, 179, 276], "operatorset": [157, 169], "positionbra3d": 157, "eigenbra": [157, 170, 176], "positionket3d": 157, "eigenket": [157, 170, 176], "positionstate3d": 157, "eigenst": [157, 169, 174, 176, 177], "position_x": 157, "position_i": 157, "position_z": 157, "pxbra": [157, 169], "pxket": [157, 169, 174], "pxop": [157, 169, 174], "xbra": [157, 169, 174], "xket": [157, 169, 174], "xop": [157, 169, 174], "yop": 157, "zop": 157, "cg": [158, 176, 183, 236], "momenta": 158, "uncoupl": [158, 176], "r691": 158, "j_3": [158, 176, 199], "r692": 158, "wigner3j": [158, 199], "wigner": [158, 176, 234, 276], "varshalovich": [158, 176], "zyla": 158, "theor": 158, "phy": [158, 184, 199], "083c01": 158, "r693": 158, "w3j": 158, "715": [158, 199, 214], "wigner6j": [158, 199], "j12": [158, 176], "j23": 158, "6j": [158, 199], "wigner9j": [158, 199], "j4": 158, "j34": 158, "j13": 158, "j24": 158, "9j": [158, 199], "cg_simp": 158, "r694": 158, "clebsh": 158, "rethink": 159, "figsiz": 159, "circuitplot": 159, "nqubit": [159, 163, 164, 173], "control_lin": 159, "gate_idx": [159, 163], "min_wir": 159, "max_wir": 159, "control_point": 159, "wire_idx": 159, "not_point": 159, "one_qubit_box": 159, "box": [159, 164, 166, 175, 177, 269, 276], "qubit": [159, 163, 164, 165, 166, 172, 276], "swap_point": 159, "two_qubit_box": 159, "createcg": 159, "latexnam": 159, "mock": 159, "mz": 159, "circuit_plot": 159, "min_qubit": [159, 163], "autogener": 159, "wire": 159, "j_0": 159, "r695": 160, "comm": [160, 179, 240], "plank": 161, "r696": 161, "05457162000000e": 161, "planck_const": 161, "hermetian": 162, "r697": 162, "r698": 162, "ket": [162, 167, 168, 169, 171, 173, 174, 177, 179], "bra": [162, 167, 168, 169, 171, 173, 174, 177, 179], "innerproduct": [162, 167, 168, 174, 176, 179], "outerproduct": [162, 168], "seamlessli": 162, "hermitian_adjoint": 162, "hermitian_transpos": 162, "_apply_operators_qubit": 163, "gate_sort": 163, "gate_simp": 163, "ugat": 163, "cgate": 163, "control_valu": 163, "cnot": 163, "eval_control": 163, "plot_gat": 163, "circ_plot": 163, "simplify_cg": 163, "cphase": 163, "cnotgat": 163, "qappli": [163, 164, 166, 168, 173, 276], "get_target_matrix": 163, "hadamardg": 163, "identityg": 163, "onequbitg": 163, "phaseg": 163, "swapgat": 163, "target1": 163, "target2": 163, "tgate": 163, "twoqubitg": 163, "xgate": 163, "ygate": 163, "zgate": 163, "bubbl": 163, "random_circuit": 163, "ngate": 163, "gate_spac": 163, "mermin": 164, "_represent_zg": 164, "oracleg": 164, "oracl": 164, "intqubit": [164, 173], "search_funct": 164, "wgate": 164, "apply_grov": 164, "grover_iter": 164, "qstate": 164, "wv": 164, "superposition_basi": 164, "numqubit": 164, "basis_st": 164, "matt": 165, "complexspac": 165, "directsumhilbertspac": 165, "r699": 165, "hilbertspac": 165, "fockspac": 165, "hilbert_spac": [165, 168, 177], "direct_sum": 165, "quantiz": [165, 276], "r700": 165, "mess": [165, 230, 233, 291], "fock_spac": 165, "r701": 165, "tensorpowerhilbertspac": 165, "r702": 165, "tensor_product": 165, "tensorproducthilbertspac": 165, "r703": 165, "clebsch": [166, 176, 199, 276], "gordan": [166, 176, 199, 276], "hilbert": [166, 168, 174, 276], "grover": [166, 276], "qft": [166, 175, 276], "shor": [166, 276], "brabas": [167, 168, 174, 177], "ketbas": [167, 168, 174, 177], "r704": 167, "inner_product": 167, "apply_oper": [168, 179], "identityoper": 168, "r705": 168, "r706": 168, "polymoni": 168, "operator_": 168, "28physic": 168, "old_assumpt": 168, "r707": 168, "outer_product": 168, "unitaryoper": 168, "operators_to_st": 169, "state_to_oper": 169, "_operators_to_st": 169, "state_map": 169, "_state_to_oper": 169, "statebas": [169, 174, 177], "piab": 170, "piabbra": 170, "piabhamiltonian": 170, "piabket": 170, "ip_doit": 171, "smarter": [172, 223], "rk": 172, "iqft": 172, "rkgate": 172, "qtf": 172, "povm": 173, "as_int": [173, 255], "qubit_valu": 173, "intqubitbra": 173, "00001": 173, "qubitbra": 173, "matrix_to_dens": 173, "matrix_to_qubit": 173, "measure_al": 173, "ensembl": 173, "measure_all_oneshot": 173, "oneshot": 173, "measure_parti": 173, "measure_partial_oneshot": 173, "qubit_to_matrix": 173, "enumerate_st": 174, "_enumerate_st": 174, "foo_1": 174, "foo_2": 174, "foo_3": 174, "test2": 174, "bar_4": 174, "bar_5": 174, "bar_10": 174, "get_basi": 174, "replace_non": 174, "operator_to_st": 174, "qexpr": 174, "integrate_result": 174, "orig_expr": 174, "x_ket": 174, "x_op": 174, "rep_expect": 174, "px_2": 174, "px_1": 174, "rep_innerproduct": 174, "_repres": 174, "_represent_foobasi": 174, "foobasi": 174, "_represent_szop": 174, "szupket": 174, "szop": 174, "sz": 174, "cmod": 175, "reformat": 175, "period_find": 175, "momemtum": 176, "j2op": 176, "jxbra": 176, "jx": 176, "jzket": 176, "jxbracoupl": 176, "jcoupl": 176, "jzketcoupl": 176, "jxket": 176, "jxketcoupl": 176, "jybra": 176, "jy": 176, "jybracoupl": 176, "jyket": 176, "jyketcoupl": 176, "jzbra": 176, "jz": 176, "jzbracoupl": 176, "j_4": [176, 199], "argular": 176, "jzop": 176, "passiv": 176, "r708": 176, "wignerd": 176, "jm": 176, "jj": 176, "r709": 176, "jcoupling_list": 176, "coupledspinst": 176, "spinstat": 176, "r710": 177, "dual_class": 177, "mn": [177, 214, 234], "ket_not": 177, "r711": 177, "k0": [177, 205, 207, 234], "orthogonalbra": 177, "orthogonalket": 177, "orthogonalst": 177, "_eval_adjoint": 177, "timedepbra": 177, "timedepst": 177, "timedepket": 177, "prob": [177, 234], "412214747707527": 177, "matrix_tensor_product": 178, "axb": 178, "xdagger": 178, "axc": 178, "bxc": 178, "tensor_product_simp": 178, "cxd": 178, "boson": 179, "fetter": 179, "welecka": 179, "secondqu": 179, "annihilateboson": 179, "fockstateket": 179, "bket": 179, "fockstatebosonket": 179, "annihilatefermion": 179, "createboson": 179, "is_only_q_annihil": 179, "destroi": [179, 223], "quasi": 179, "hole": 179, "is_only_q_cr": 179, "is_q_annihil": 179, "is_q_creat": 179, "antisymmetrictensor": 179, "bbra": 179, "fockstatebosonbra": 179, "bosonicbasi": 179, "fock": 179, "createfermion": 179, "wick": 179, "fbra": 179, "fockstatefermionbra": 179, "fket": 179, "fockstatefermionket": 179, "fixedbosonicbasi": 179, "n_particl": 179, "n_level": 179, "fockstat": 179, "occup": 179, "bosonbra": 179, "fockstatebra": 179, "fermi_level": 179, "r712": 179, "textwrap": [179, 255], "_q": 179, "get_subno": 179, "fermionicoper": 179, "has_q_annihil": 179, "q_annihil": 179, "has_q_creat": 179, "leftmost": 179, "q_creator": 179, "iter_q_annihil": 179, "iter_q_cr": 179, "0x": 179, "permutationoper": 179, "get_permut": 179, "varbosonicbasi": 179, "n_max": 179, "creator": 179, "evaluate_delta": 179, "einstein": [179, 240], "d_ij": 179, "_j": [179, 184, 199, 216], "d_ip": 179, "d_qp": 179, "matrix_rep": 179, "simplify_index_permut": 179, "permutation_oper": 179, "schemat": [179, 184], "abij": 179, "abji": 179, "baij": 179, "baji": 179, "permutlist": 179, "substitute_dummi": 179, "new_indic": 179, "pretty_indic": 179, "_get_ordered_dummi": 179, "_c": 179, "_d": 179, "index_group": 179, "string_of_lett": 179, "my_dummi": 179, "_v": [179, 198], "_p_0": 179, "_p_1": 179, "keep_only_fully_contract": 179, "sho": 180, "isotrop": 180, "mk": [181, 184], "legal": 181, "temperatur": [181, 195, 268], "dimensions": 181, "dimsys_si": [181, 182], "get_dimensional_depend": [181, 182], "has_integer_pow": 181, "dim_si": 181, "dimensionsystem": 181, "base_dim": 181, "derived_dim": 181, "dimensional_depend": 181, "can_transf_matrix": 181, "inv_can_transf_matrix": 181, "dim_can_vector": 181, "dim_vector": 181, "is_consist": [181, 187], "is_dimensionless": 181, "list_can_dim": 181, "print_dim_bas": 181, "gravitational_const": [182, 186], "equivalent_dim": 182, "grav_eq": 182, "kepler": [182, 259], "venu": 182, "701": 182, "dai": [182, 186, 230], "venus_a": 182, "set_quantity_dimens": 182, "set_quantity_scale_factor": 182, "108208000e3": 182, "solar": 182, "solar_mass": 182, "9891e30": 182, "convert_to": [182, 183, 186, 203, 209], "5112118495813": 182, "659097795948": 182, "astrophys": 182, "pound": 183, "boltzmann": 183, "physicalconst": 183, "unitsystem": [183, 187], "kilomet": [183, 185, 186], "unitless": 183, "dimensionless": [183, 184], "discrep": 183, "speed_of_light": [183, 186], "cgs_gauss": 183, "quantity_simplifi": 183, "philosophi": [183, 230, 233, 276], "rough": 184, "mole": 184, "unavoid": 184, "d_3": 184, "d_2": [184, 210, 234], "underbrac": [184, 197], "countabl": [184, 233], "pmatrix": 184, "kg": [184, 269], "glu": 184, "men": 184, "heat": 184, "joul": 184, "calori": 184, "chemistri": 184, "page52": 184, "1952": 184, "page78": 184, "deboer79": 184, "boer": 184, "818": 184, "levyleblond77": 184, "l\u00e9vy": 184, "leblond": 184, "conceptu": [184, 201, 268], "rivista": 184, "del": [184, 249, 259, 267, 291], "nuovo": [184, 199], "cimento": [184, 199], "1977": 184, "187": [184, 208], "214": 184, "anticip": 184, "bin_prefix": 185, "latex_repr": [185, 186], "encapsul": [185, 207, 233, 247], "kilo": 185, "pretty_unicode_repr": 186, "pretty_ascii_repr": 186, "mathml_presentation_repr": 186, "is_prefix": 186, "abbrevi": [186, 202, 214, 233, 235], "unit_system": 186, "scale_factor": 186, "set_global_relative_scale_factor": 186, "reference_quant": 186, "target_unit": 186, "mile": 186, "atomic_mass_const": 186, "centimet": 186, "25146": 186, "609344": 186, "86400": 186, "660539060e": 186, "300000": 186, "planck": [186, 234], "62963087839509e": 186, "base_unit": 187, "descr": 187, "dimension_system": 187, "derived_unit": 187, "overridden": [187, 201, 216, 291], "get_units_non_prefix": 187, "wikidyad": [188, 196], "wikidyadicproduct": [188, 196], "otim": [188, 235, 236], "rigidli": 188, "entireti": 188, "_str": 188, "coordinatesym": [189, 191], "otherfram": [189, 259], "n_alpha_b": 189, "ny": [189, 205], "_3": [189, 199], "orient_body_fix": 189, "orient_space_fix": 189, "orient_quaternion": 189, "quaternion": [189, 193, 198, 259, 261], "rotation_ord": [189, 259, 261], "xzx": 189, "xyx": [189, 259, 261], "yzy": 189, "yxy": [189, 198], "yzx": [189, 198], "zxy": 189, "xzy": 189, "zyx": 189, "yxz": 189, "orient_explicit": 189, "lambda_x": [189, 259, 261], "lambda_i": [189, 259, 261], "lambda_z": [189, 259, 261], "q0": [189, 230, 259, 261], "newnam": 189, "gen_spe": [189, 193], "variable_map": 189, "a_x": [189, 198, 214], "b_x": [189, 191, 198, 240], "b_y": [189, 191, 198, 240], "a_z": [189, 198], "b_z": [189, 198, 240], "xz": [189, 198, 200], "zy": [189, 198], "inlist": 189, "var_in_dcm": 189, "reexpress": [189, 264], "time_deriv": [189, 191, 195], "free_dynamicsymbol": 189, "codirect": 189, "dyadic_tensor": [189, 259], "frame1": 189, "frame2": [189, 191], "second_reference_fram": 189, "ixz": 189, "inertia_dyad": 189, "pertain": [190, 196], "fieldfunct": [190, 195], "curl": [190, 259, 262, 269], "vect": [190, 259, 262], "r_x": [190, 195], "r_y": [190, 195], "r_z": [190, 195], "gradient": [190, 199, 200, 259, 262, 268], "scalar_potenti": [190, 195, 262, 266], "scalar_field": [190, 195, 259, 262, 266], "grad_field": [190, 262], "scalar_potential_differ": [190, 195, 262, 266], "sympyfi": [190, 191, 193, 262], "position2": [190, 262], "vectfield": [190, 195, 262, 266], "is_conserv": [190, 195, 262, 266], "is_solenoid": [190, 195, 262, 266], "solenoid": [190, 262], "q6": 191, "vec1": 191, "vec2": 191, "n_x": 191, "rotating_reference_fram": 191, "time_derivatives_in_the_two_fram": 191, "otherpoint": 193, "outfram": 193, "fixedfram": 193, "get_motion_param": 193, "vectori": [193, 195, 263, 268], "timevalue1": 193, "timevalue2": 193, "313": 193, "vel_vec": 193, "q1dd": 194, "q2dd": 194, "charg": [195, 268], "displac": [195, 197, 268], "temper": 195, "earth": [195, 268], "4xy": [195, 268], "electric_potenti": [195, 266], "r1_x": 195, "r1_y": 195, "infinitesim": [195, 230, 266], "nabla": [195, 259, 265, 266], "f_y": [195, 266], "f_x": [195, 233, 266], "sink": [195, 266], "irrot": [195, 266], "conservative_field": [195, 266], "aug": [196, 233], "dyadic_product": [196, 267], "inc": [196, 208], "w_x": 197, "w_y": 197, "w_z": 197, "w_1": [197, 209], "w_2": [197, 209], "w_3": 197, "textrm": [197, 198, 222], "u_x": 197, "sp": 197, "oq": 197, "qp": 197, "rod": 197, "went": 197, "parallelogram": 198, "c_x": 198, "c_y": 198, "c_z": 198, "train": 198, "friend": 198, "undergon": [198, 233], "vastli": 198, "mold": 198, "bp": [198, 230], "bpp": 198, "zzx": 198, "multifram": 198, "direction": 198, "racah": 199, "gaunt": 199, "rasch03": 199, "regge58": 199, "regg": 199, "544": 199, "regge59": 199, "116": [199, 208], "1959": 199, "edmonds74": 199, "edmond": 199, "princeton": [199, 234], "1957": 199, "rasch": 199, "siam": [199, 252], "sci": 199, "1416": 199, "1428": 199, "liberatodebrito82": 199, "liberato": 199, "brito": 199, "homeier96": 199, "homeier": 199, "steinborn": 199, "mol": 199, "368": 199, "1996": [199, 208, 224, 232, 259], "forum": [199, 233], "m4nzdu": 199, "7o38": 199, "jen": 199, "03": [199, 234], "gerardo": 199, "lazo": 199, "arjona": 199, "phil": 199, "adam": [199, 210], "lemaitr": 199, "2022": 199, "jyr2000": 199, "clebsch_gordan": 199, "2j_3": 199, "dot_rot_grad_ynm": 199, "_l": 199, "l_2": 199, "l_3": 199, "drastic": 199, "2l_1": 199, "2l_2": 199, "2l_3": 199, "1200": 199, "00689500421922113448": 199, "inflect": 199, "unsuit": 199, "dd": [199, 219], "ee": [199, 209], "j_5": 199, "j_6": 199, "richer": 199, "real_gaunt": 199, "realgaunt": 199, "m0": [199, 240], "00002480019791932209313156167": 199, "wigner_3j": 199, "wigner_6j": 199, "wigner_9j": 199, "j_7": 199, "j_8": 199, "j_9": 199, "05555555": 199, "1666666": 199, "wigner_d": 199, "j_z": 199, "j_y": 199, "\u03b3": [199, 281, 291], "wigner_d_smal": 199, "textbackend": 200, "plot_parametr": 200, "plot_implicit": 200, "plot3d_parametric_lin": 200, "plot3d_parametric_surfac": 200, "zlabel": 200, "aspect_ratio": 200, "ylim": 200, "axis_cent": 200, "xscale": 200, "yscale": 200, "autoscal": 200, "textplot": 200, "_seri": [200, 211], "baseseri": 200, "nonparametr": 200, "basebackend": 200, "parametric2dlineseri": 200, "parametric3dlineseri": 200, "cyan": 200, "grayscal": 200, "integers_onli": 200, "surfaceover2drangeseri": 200, "parametricsurfaceseri": 200, "surface_color": 200, "range1": 200, "range2": 200, "fill_between": 200, "inch": 200, "expr_x": 200, "expr_i": 200, "canva": 200, "range_x": 200, "range_i": 200, "nb_of_points_x": 200, "nb_of_points_i": 200, "expr_z": 200, "range_u": 200, "range_v": 200, "nb_of_points_u": 200, "nb_of_points_v": 200, "x_var": 200, "y_var": 200, "mesh": 200, "p8": 200, "p9": 200, "nrow": [200, 203], "ncolumn": 200, "stuff": [200, 245, 247, 255], "is_2dlin": 200, "oblig": 200, "only_integ": 200, "get_seg": 200, "get_color_arrai": 200, "var_start_end": 200, "r713": 200, "luiz": 200, "henriqu": 200, "figueiredo": 200, "r714": 200, "line3dbaseseri": 200, "surfacebaseseri": 200, "var_start_end_x": 200, "var_start_end_i": 200, "var_start_end_u": 200, "var_start_end_v": 200, "implicitseri": 200, "has_equ": 200, "use_interval_math": 200, "centric": 200, "get_mesh": 200, "process_seri": 200, "_process_seri": 200, "keyboard": 200, "mous": 200, "pyglet_plot": 200, "screenshot": 200, "camera": 200, "zoom": 200, "numpad": 200, "ordin": [200, 230, 255], "f5": 200, "f6": 200, "f8": 200, "drag": 200, "curvilinear": [200, 263, 264], "__setitem__": 200, "zfade4": 200, "key1": 200, "value1": 200, "key2": 200, "value2": 200, "unbound_theta": 200, "wirefram": 200, "saddl": 200, "fz": 200, "_______________________________________________________": 200, "mediterranean": 201, "cultur": 201, "arab": 201, "lighten": 201, "tapestri": 201, "woven": 201, "european": 201, "soil": 201, "plausibl": 201, "teeter": 201, "totter": 201, "outweigh": 201, "excit": 201, "amus": 201, "kempf": 201, "1944": 201, "20th": 201, "dedekind": 201, "intim": 201, "disciplin": 201, "toolset": 201, "atiyah69": [201, 208], "gear": 201, "greuel2008": [201, 208], "interspers": 201, "lr": 201, "ilex": 201, "\u211a": [201, 214], "localis": 201, "abridg": 201, "free_modul": [201, 205], "quotient_r": [201, 205], "overload": [201, 204, 205, 263, 286], "polynomialr": [201, 205, 212], "domain_or_r": [201, 205], "quotientr": [201, 205], "base_id": [201, 205], "elbow": 201, "componentwis": [201, 214], "inclin": 201, "biproduct": 201, "quotient_modul": 201, "is_submodul": 201, "multiply_id": 201, "identity_hom": 201, "freemodul": 201, "freemoduleel": 201, "conicis": 201, "_contain": 201, "_syzygi": 201, "_in_terms_of_gener": 201, "_intersect": 201, "_module_quoti": 201, "reduce_el": [201, 209], "represantit": 201, "in_terms_of_gener": 201, "inclusion_hom": 201, "rela": 201, "relb": 201, "is_full_modul": 201, "module_quoti": 201, "opt": [201, 207, 226, 245, 287], "coincis": 201, "syzygy_modul": 201, "r_n": 201, "_contains_elem": 201, "_contains_id": 201, "_quotient": 201, "_union": 201, "_product": 201, "is_whole_r": 201, "is_maxim": 201, "is_primari": 201, "is_rad": 201, "is_princip": 201, "xj": 201, "satur": 201, "subquoti": 201, "quotientmodul": 201, "subquotientmodul": 201, "killed_modul": 201, "quotientmoduleel": 201, "kill": [201, 205, 245], "quotient_hom": 201, "ker": 201, "surject": 201, "cokernel": 201, "coker": 201, "meaningfulli": 201, "restrict_domain": 201, "homomoprh": 201, "modulehomomorph": [201, 209], "_ker": 201, "_img": 201, "_kernel": 201, "_imag": 201, "_restrict_domain": 201, "_restrict_codomain": 201, "_quotient_domain": 201, "_quotient_codomain": 201, "_appli": 201, "_mul_scalar": 201, "_compos": 201, "_add": [201, 220], "is_inject": 201, "quotient_domain": 201, "is_isomorph": 201, "preimag": 201, "restrict_codomain": 201, "is_surject": 201, "quotient_codomain": 201, "induct": 201, "monogen": 201, "monogenicfiniteextens": [201, 205], "finiteextens": 201, "sqrt2": [201, 204], "extensionel": [201, 205], "notinvert": [201, 207, 210], "nu_1": 202, "nu_2": 202, "nu_n": 202, "nu_i": 202, "customarili": 202, "ua": 202, "endow": [202, 210], "resp": [202, 205, 230], "divmod": [202, 204, 205], "cb": [202, 252], "sqf_list": [202, 205, 210], "sqf": [202, 205, 210, 227], "buchberg": [202, 207, 208, 210], "solve_poly_system": [202, 210, 232, 233], "ddm": 203, "fmt": [203, 205, 209], "matrix1": 203, "sdm": [203, 207], "dmnonsquarematrixerror": 203, "zz_i": [203, 204], "from_dict_sympi": 203, "ncol": 203, "elemsdict": 203, "from_list_sympi": 203, "from_list": [203, 205, 210, 211], "construct_domain": [203, 204, 205, 210], "from_rep": 203, "drep": 203, "ownership": 203, "lll": 203, "lov\u00e1sz": 203, "r715": 203, "r716": 203, "dmvalueerror": 203, "dmrankerror": [203, 209], "20160": 203, "33768": 203, "39578": 203, "47757": 203, "r717": 203, "lll_transform": 203, "lov\u00e1sz_lattice_basis_reduction_algorithm": 203, "20221029115428": 203, "elt": [203, 209], "lovasz": 203, "bremner": 203, "scc": 203, "to_dens": 203, "to_field": [203, 205, 210], "to_spars": 203, "aq": 203, "ccc": [203, 233], "from_ddm": 203, "domainerror": [203, 207, 210], "to_ddm": 203, "r718": 203, "pythonmpq": [204, 205], "srepr": [204, 286], "strength": 204, "richardon": 204, "dup_factor_list": 204, "factortool": [204, 207], "dup_": [204, 207], "dmp_": [204, 207], "z1": [204, 205, 232], "is_field": [204, 205], "quo": [204, 205, 207, 210], "rem": [204, 205, 207, 210], "exquo": [204, 205, 210], "exactquotientfail": [204, 205, 207, 210], "mpz": [204, 205], "of_typ": [204, 205], "z1_sympi": 204, "to_sympi": [204, 205], "from_sympi": [204, 205], "forth": [204, 209], "z_sympi": 204, "z_zz": 204, "coercionfail": [204, 207], "sum_domain": 204, "expressions_sympi": 204, "expressions_dom": 204, "result_dom": 204, "e_dom": 204, "result_sympi": 204, "qq_i": 204, "gaussianinteg": [204, 205], "gaussianrationalfield": [204, 205], "gaussianr": [204, 205], "finitefield": [204, 205], "pythonfinitefield": [204, 205], "gmpyfinitefield": [204, 205], "welcom": [204, 230, 284], "realel": [204, 205], "complexel": [204, 205], "mpc": 204, "xr": [204, 212], "zc": 204, "1j": 204, "_mpc_": 204, "realfield": [204, 205], "rr100": 204, "33333333333333333333333333333": 204, "hack": [204, 230, 243], "algebraic_field": [204, 205, 207, 209], "algebraicfield": [204, 205, 207, 209], "sqrt3": 204, "x_dom": 204, "p_expr": [204, 205], "polyel": [204, 205, 207, 211, 212, 214], "p_dom": 204, "xk": [204, 205, 216], "yk": [204, 205], "poly_r": [204, 205], "old_polynomialr": 204, "globalpolynomialr": 204, "polyclass": [204, 205, 210], "yr": [204, 212], "broader": 204, "get_field": [204, 205], "frac_field": [204, 205], "rationalfield": [204, 205], "old_frac_field": [204, 205], "fractionfield": [204, 205], "old_fractionfield": 204, "xf": 204, "yf": 204, "fracfield": [204, 205], "expressiondomain": [204, 205], "elements_sympi": 204, "elements_k": 204, "convert_from": [204, 205], "num_zz": 204, "num_qq": 204, "domainel": [204, 205, 212], "encompass": 204, "all_coeff": [204, 205, 210], "dom": [204, 205, 207, 222], "strang": 204, "hybrid": 204, "unreli": 204, "usefulli": 205, "pythonr": [205, 212], "p_domain": 205, "ez": [205, 240], "get_r": 205, "has_assoc_field": 205, "has_assoc_r": 205, "alg_field_from_poli": [205, 209], "root_index": 205, "almosteq": 205, "cyclotomic_field": [205, 209], "zeta7": 205, "zeta_": 205, "lexord": [205, 210], "from_algebraicfield": 205, "from_complexfield": 205, "from_expressiondomain": 205, "from_expressionrawdomain": 205, "from_ff": 205, "modularinteg": 205, "from_ff_gmpi": 205, "from_ff_python": 205, "from_fractionfield": 205, "from_globalpolynomialr": 205, "from_monogenicfiniteextens": 205, "from_polynomialr": 205, "from_qq_gmpi": 205, "from_qq_python": 205, "from_realfield": 205, "from_zz_gmpi": 205, "from_zz_python": 205, "gcdex": [205, 210], "get_exact": 205, "half_gcdex": [205, 210], "is_pid": 205, "is_r": 205, "is_nonposit": 205, "is_on": [205, 210], "rersiv": 205, "__neg__": 205, "__pos__": 205, "__sub__": 205, "q_domain": 205, "q_expr": 205, "x_domain": 205, "alg": [205, 209, 213], "trait": 205, "is_unit": 205, "__divmod__": 205, "__floordiv__": 205, "__mod__": [205, 209], "simpledomain": 205, "compositedomain": 205, "from_qq": 205, "from_zz": 205, "gmpyinteg": 205, "pythoninteg": 205, "gmpyrationalfield": 205, "pythonrationalfield": 205, "from_gaussianrationalfield": 205, "gaussianel": 205, "gaussiandomain": 205, "qq_python": 205, "zz_python": 205, "z2": 205, "z3": 205, "z4": 205, "from_gaussianinteg": 205, "as_algebraicfield": 205, "orig_ext": 205, "integral_basi": [205, 209], "maximal_ord": [205, 209], "zeta5": 205, "primes_abov": [205, 209], "primeid": [205, 209], "galois_group": [205, 209, 210], "by_nam": [205, 209, 210], "c6": 205, "max_tri": [205, 209, 210], "numberfield": [205, 209, 210], "galoisgroup": [205, 209, 210], "to_alg_num": [205, 209], "legibl": 205, "to_rat": 205, "mpelement": 205, "complexfield": 205, "lc": [205, 207, 210], "domain_or_field": 205, "dmf": 205, "coercibl": 205, "monomialord": [205, 210], "xring": 205, "vring": 205, "sring": [205, 211, 212], "polyr": [205, 207, 212], "factor_list": [205, 210, 291], "add_gen": 205, "drop_to_ground": 205, "monomial_basi": 205, "206": [205, 210], "744": 205, "945": [205, 211], "symmetric_poli": [205, 210], "is_monomi": [205, 210], "const": [205, 214], "inplac": 205, "shallow": [205, 221], "zero_monom": 205, "fv": 205, "clo": 205, "p64": 205, "qv": 205, "f0": 205, "imul_num": 205, "itercoeff": 205, "itermonom": 205, "iterterm": 205, "leading_expv": 205, "leading_monom": 205, "leading_term": 205, "listcoeff": 205, "listmonom": 205, "listterm": 205, "monom": [205, 210], "strip_zero": 205, "r719": 205, "lauer": 205, "1976": 205, "242": 205, "247": [205, 208, 232], "800205": 205, "806342": 205, "tail_degre": 205, "xfield": 205, "vfield": [205, 265], "sfield": [205, 265], "fracel": [205, 214], "lev": 205, "add_ground": [205, 210], "all_monom": [205, 210], "all_term": [205, 210], "cauchy_lower_bound": 205, "cauchy_upper_bound": 205, "clear_denom": [205, 210], "count_complex_root": 205, "sup": [205, 210, 214, 222], "count_real_root": 205, "deflat": [205, 210], "y_i": [205, 207, 209, 210, 230], "x_j": [205, 207, 210], "degree_list": [205, 210], "eject": [205, 210], "exquo_ground": [205, 210], "factor_list_includ": [205, 210], "from_dict": [205, 210], "from_sympy_list": 205, "gff_list": [205, 210], "homogeneous_ord": [205, 210, 227, 230], "is_cyclotom": [205, 210], "is_ground": [205, 210], "is_homogen": [205, 210], "is_irreduc": [205, 210], "is_linear": [205, 210], "is_mon": [205, 210], "is_quadrat": [205, 210], "is_sqf": [205, 210], "l1_norm": [205, 210], "l2_norm_squar": 205, "max_norm": [205, 210], "mignotte_sep_bound_squar": 205, "mignott": [205, 207], "mul_ground": [205, 210], "pdiv": [205, 210], "pexquo": [205, 210], "pquo": [205, 210], "prem": [205, 210], "quo_ground": [205, 210], "refine_root": [205, 209, 210], "includepr": [205, 207, 210], "sqf_list_includ": [205, 210], "sqf_norm": [205, 210], "sqf_part": [205, 210], "sqr": [205, 210], "sturm": [205, 210], "sub_ground": [205, 210], "to_dict": 205, "to_exact": [205, 210], "to_r": [205, 210], "to_sympy_dict": 205, "to_sympy_list": 205, "to_tupl": 205, "total_degre": [205, 210, 227], "trunc": [205, 210, 213], "frac_unifi": 205, "half_per": 205, "poly_unifi": 205, "gr\u00f6bner": 206, "wester": [206, 277], "agca": [206, 277], "l0": 207, "legitim": 207, "uninterest": 207, "bulk": [207, 224], "x_u": 207, "dup__": 207, "densebas": 207, "dmp_lc": 207, "poly_lc": 207, "dmp_tc": 207, "poly_tc": 207, "dmp_ground_lc": 207, "dmp_ground_tc": 207, "dmp_true_lt": 207, "n_1": [207, 232, 234], "n_k": 207, "dmp_degre": 207, "dmp_degree_in": 207, "dmp_degree_list": 207, "dmp_strip": 207, "dmp_valid": 207, "dup_revers": 207, "dmp_copi": 207, "dmp_to_tupl": 207, "dmp_normal": 207, "dmp_convert": 207, "to_domain": 207, "dmp_from_sympi": 207, "dmp_nth": 207, "dmp_ground_nth": 207, "dmp_zero_p": 207, "dmp_zero": 207, "dmp_one_p": 207, "dmp_one": 207, "dmp_ground_p": 207, "dmp_ground": 207, "dmp_negative_p": 207, "dmp_positive_p": 207, "dmp_from_dict": 207, "dmp_to_dict": 207, "dmp_swap": 207, "dmp_permut": 207, "dmp_nest": 207, "dmp_rais": 207, "dmp_deflat": 207, "dmp_multi_defl": 207, "dmp_inflat": 207, "dmp_exclud": 207, "dmp_includ": 207, "dmp_inject": 207, "dmp_eject": 207, "dmp_terms_gcd": 207, "dmp_list_term": 207, "dmp_apply_pair": 207, "dmp_slice": 207, "dup_random": 207, "densearith": 207, "dmp_add_term": 207, "dmp_sub_term": 207, "dmp_mul_term": 207, "dmp_add_ground": 207, "dmp_sub_ground": 207, "dmp_mul_ground": 207, "dmp_quo_ground": 207, "dmp_exquo_ground": 207, "dup_lshift": 207, "dup_rshift": 207, "dmp_ab": 207, "dmp_neg": 207, "dmp_add": 207, "dmp_sub": 207, "dmp_add_mul": 207, "dmp_sub_mul": 207, "dmp_mul": 207, "dmp_sqr": 207, "dmp_pow": 207, "dmp_pdiv": 207, "dmp_prem": 207, "dmp_pquo": 207, "dmp_pexquo": 207, "dmp_rr_div": 207, "dmp_ff_div": 207, "dmp_div": 207, "dmp_rem": 207, "dmp_quo": 207, "dmp_exquo": 207, "dmp_max_norm": 207, "dmp_l1_norm": 207, "dmp_expand": 207, "densetool": 207, "dmp_integr": 207, "dmp_integrate_in": 207, "dmp_diff": 207, "dmp_diff_in": 207, "dmp_eval": 207, "dmp_eval_in": 207, "dmp_eval_tail": 207, "dmp_diff_eval_in": 207, "dmp_trunc": 207, "dmp_ground_trunc": 207, "dup_mon": 207, "dmp_ground_mon": 207, "dup_cont": 207, "dmp_ground_cont": 207, "dup_primit": 207, "dmp_ground_primit": 207, "dup_extract": 207, "dmp_ground_extract": 207, "dup_real_imag": 207, "bivari": [207, 213, 230, 234], "dup_mirror": 207, "dup_scal": 207, "dup_shift": 207, "dup_transform": 207, "dmp_compos": 207, "dup_decompos": 207, "t_m": 207, "r720": 207, "dmp_lift": 207, "dup_sign_vari": 207, "dmp_clear_denom": 207, "k_0": 207, "dmp_revert": 207, "gf_": 207, "justifi": 207, "necess": 207, "u_0": 207, "m_0": [207, 227], "m_n": 207, "236237": 207, "9215": 207, "9405": 207, "9603": 207, "gf_int": 207, "gf_degre": 207, "gf_lc": 207, "gf_tc": 207, "gf_strip": 207, "gf_trunc": 207, "gf_normal": 207, "gf_from_dict": 207, "gf_to_dict": 207, "gf_from_int_poli": 207, "gf_to_int_poli": 207, "gf_neg": 207, "gf_add_ground": 207, "gf_sub_ground": 207, "gf_mul_ground": 207, "gf_quo_ground": 207, "gf_add": 207, "gf_sub": 207, "gf_mul": 207, "gf_sqr": 207, "gf_add_mul": 207, "gf_sub_mul": 207, "gf_expand": 207, "gf_div": 207, "r721": 207, "monagan93": [207, 208], "r722": 207, "gathen99": [207, 208], "gf_rem": 207, "gf_quo": 207, "gf_exquo": 207, "gf_lshift": 207, "gf_rshift": 207, "gf_pow": 207, "gf_pow_mod": 207, "r723": 207, "gf_gcd": 207, "gf_lcm": 207, "gf_cofactor": 207, "gf_gcdex": 207, "eea": 207, "r724": 207, "gf_monic": 207, "gf_diff": 207, "gf_eval": 207, "gf_multi_ev": 207, "gf_compos": 207, "gf_compose_mod": 207, "gf_trace_map": 207, "r725": 207, "gathen92": [207, 208], "gf_random": 207, "gf_irreduc": 207, "gf_irreducible_p": 207, "gf_sqf_p": 207, "gf_sqf_part": 207, "gf_sqf_list": 207, "e_2": [207, 210], "e_k": 207, "f_j": [207, 224], "gf_sqf": 207, "r726": 207, "geddes92": [207, 208], "gf_qmatrix": 207, "berlekamp": 207, "gf_qbasi": 207, "gf_berlekamp": 207, "gf_zassenhau": 207, "gf_shoup": 207, "gf_factor_sqf": 207, "gf_factor": 207, "e_d": 207, "cantor": 207, "zassenhau": [207, 209], "shoup": [207, 208], "kaltofen": [207, 208], "gathen": [207, 208], "gf_factor_method": 207, "r727": 207, "gf_valu": 207, "2204": 207, "gf_csolv": 207, "congruent": [207, 224, 227], "189": 207, "112": [207, 211], "139": 207, "r728": 207, "ivan": 207, "niven": 207, "zuckerman": 207, "montgomeri": 207, "infeas": [207, 210], "sdm_": 207, "distributedmodul": 207, "sdm_monomial_mul": 207, "sdm_monomial_deg": 207, "f_5": 207, "sdm_monomial_divid": 207, "sdm_lc": 207, "sdm_to_dict": 207, "sdm_from_dict": 207, "dic": 207, "sdm_add": 207, "2f_1": 207, "3f_1": 207, "yf_1": 207, "xf_1": 207, "sdm_lm": 207, "sdm_lt": 207, "sdm_mul_term": 207, "2xy": [207, 285], "8xy": 207, "2y": [207, 227, 230, 233, 285], "sdm_zero": 207, "sdm_deg": 207, "sdm_from_vector": 207, "sdm_to_vector": 207, "variant": [207, 230, 233], "qg": 207, "remark": [207, 213, 224, 230], "uf": 207, "vg": 207, "zout": 207, "euclidtool": 207, "dmp_half_gcdex": 207, "dmp_gcdex": 207, "dmp_invert": 207, "dmp_euclidean_pr": 207, "dmp_primitive_pr": 207, "exceedingli": 207, "collin": [207, 208], "collins67": [207, 208], "subdomain": 207, "2l": 207, "remainin": 207, "subdetermin": 207, "n_2": [207, 234], "n_": [207, 227], "abnorm": 207, "gamma_i": 207, "brown": [207, 208, 234], "traub": [207, 208], "browntraub71": [207, 208], "brown78": [207, 208], "discoveri": [207, 287], "dmp_inner_subresult": 207, "729": 207, "sre": 207, "dmp_subresult": 207, "dmp_prs_result": 207, "dmp_zz_modular_result": 207, "dmp_zz_collins_result": 207, "dmp_qq_collins_result": 207, "dmp_result": 207, "dmp_discrimin": 207, "dmp_rr_prs_gcd": 207, "cff": [207, 210], "dmp_ff_prs_gcd": 207, "dmp_zz_heu_gcd": 207, "r729": 207, "liao95": [207, 208], "dmp_qq_heu_gcd": 207, "dmp_inner_gcd": 207, "dmp_gcd": 207, "dmp_lcm": 207, "dmp_content": 207, "dmp_primit": 207, "dmp_cancel": 207, "dmp_trial_divis": 207, "dmp_zz_mignotte_bound": 207, "dup_zz_hensel_step": 207, "hensel": 207, "r730": 207, "dup_zz_hensel_lift": 207, "f_list": 207, "multifactor": 207, "r731": 207, "dup_zz_zassenhau": 207, "dup_zz_irreducible_p": 207, "eisenstein": 207, "dup_cyclotomic_p": 207, "bradford": 207, "russel": 207, "251": 207, "berlin": 207, "heidelberg": 207, "dup_zz_cyclotomic_poli": 207, "dup_zz_cyclotomic_factor": 207, "r732": 207, "weisstein09": [207, 208], "dup_zz_factor_sqf": 207, "dup_zz_factor": 207, "r733": 207, "dmp_zz_wang_non_divisor": 207, "wang": [207, 208, 252], "eez": 207, "dmp_zz_wang_test_point": 207, "dmp_zz_wang_lead_coeff": 207, "dmp_zz_diophantin": 207, "dmp_zz_wang_hensel_lift": 207, "dmp_zz_wang": 207, "enhanc": [207, 234], "r734": 207, "wang78": [207, 208], "r735": 207, "dmp_zz_factor": 207, "r736": 207, "dmp_ext_factor": 207, "dup_gf_factor": 207, "dmp_factor_list": 207, "dmp_factor_list_includ": 207, "dmp_irreducible_p": 207, "groebnertool": 207, "polyconfig": [207, 210], "f5b": [207, 210], "spoli": 207, "red_groebn": 207, "beckerweispfenning93": 207, "is_groebn": 207, "is_minim": 207, "is_reduc": 207, "fglmtool": 207, "matrix_fglm": 207, "o_to": 207, "o_from": 207, "r737": 207, "fauger": [207, 210], "gianni": [207, 210, 232], "mora": [207, 208, 210, 232], "sdm_spoli": 207, "phantom": 207, "sca": 207, "defn": 207, "sdm_ecart": 207, "ecart": 207, "sdm_nf_mora": 207, "nf": 207, "sdm_groebner": 207, "sugar": [207, 208, 239], "giovini": [207, 208], "polyopt": [207, 211], "build_opt": 207, "basepolynomialerror": 207, "operationnotsupport": 207, "heuristicgcdfail": 207, "homomorphismfail": 207, "isomorphismfail": [207, 209], "extraneousfactor": 207, "evaluationfail": 207, "refinementfail": 207, "notrevers": [207, 210], "notalgebra": 207, "polynomialerror": [207, 210], "unificationfail": [207, 209], "generatorsneed": 207, "computationfail": 207, "exc": 207, "generatorserror": 207, "univariatepolynomialerror": 207, "multivariatepolynomialerror": [207, 210], "polificationfail": 207, "orig": 207, "optionerror": 207, "flagerror": 207, "modulargcd": 207, "modgcd_univari": 207, "monagan00": [207, 208], "modgcd_bivari": 207, "modgcd_multivari": 207, "_modgcd_multivariate_p": 207, "brown71": [207, 208], "degbound": 207, "contbound": 207, "func_field_modgcd": 207, "reconstuct": 207, "z_p": 207, "hoeij04": [207, 208], "scarc": 207, "hsin": 208, "chao": 208, "liao": 208, "fateman": 208, "montreal": 208, "quebec": 208, "canada": 208, "240": [208, 216, 262], "von": [208, 234], "zur": 208, "gerhard": 208, "cambridg": [208, 227], "weisstein": 208, "cyclotomicpolynomi": 208, "1215": 208, "1231": 208, "czapor": 208, "labahn": 208, "monagan": [208, 226], "disco": 208, "721": 208, "kaltofen98": 208, "subquadrat": 208, "223": 208, "1998": [208, 227], "1179": 208, "1197": 208, "shoup95": 208, "397": 208, "shoup91": 208, "cox97": [208, 210], "shea": [208, 210], "ajwa95": 208, "ajwa": 208, "liu": 208, "groebner": [208, 209, 210, 213, 226, 232, 233], "cites": 208, "ist": [208, 223], "psu": [208, 223], "mycites": 208, "login": 208, "bose03": 208, "bose": 208, "guiver": 208, "giovini91": 208, "bronstein93": [208, 210], "salvi": [208, 211], "kiev": 208, "ukrain": 208, "buchberger01": [208, 210], "theorist": 208, "moreno": 208, "diaz": 208, "freir": 208, "eurocast": 208, "februari": 208, "davenport88": 208, "siret": 208, "tournier": 208, "london": [208, 227], "124": [208, 280], "greuel": 208, "pfister": 208, "atiyah": 208, "macdonald": 208, "142": 208, "1971": [208, 230], "505": 208, "249": 208, "wittkopf": 208, "478": 208, "hoeij": 208, "297": [208, 210], "304": [208, 210], "wang81": 208, "adic": 208, "symsac": 208, "hoeij02": 208, "manwright94": [208, 210], "yiu": 208, "kwong": 208, "franci": 208, "wright": 208, "dispers": [208, 234], "190347": 208, "190413": 208, "koepf98": [208, 210], "koepf": [208, 216, 226], "vieweg": 208, "abramov71": [208, 210], "abramov": [208, 232], "ussr": 208, "330": 208, "man93": [208, 210], "376": 208, "sciencedirect": [208, 223], "pii": [208, 223], "s0747717183710539": 208, "kapur1994": 208, "deepak": 208, "kapur": 208, "tushar": 208, "saxena": 208, "yang": 208, "dixon": 208, "researchg": [208, 234], "2514261_algebraic_and_geometric_reasoning_using_dixon_result": 208, "palancz08": 208, "pal\u00e1ncz": 208, "zaletnyik": 208, "jl": [208, 247], "awang": 208, "ew": 208, "grafarend": 208, "geodet": 208, "geodesi": 208, "225607735_dixon_result": 208, "s_solution_of_systems_of_geodetic_polynomial_equ": 208, "bruce97": 208, "bruce": 208, "randal": 208, "donald": [208, 249], "mundi": 208, "artifici": [208, 217], "intellig": [208, 226, 230, 291], "orlando": 208, "www2": 208, "duke": 208, "donaldlab": 208, "symbolicnumericalcomput": 208, "045": 208, "087": 208, "stiller96": 208, "stiller": 208, "citeseerx": [208, 223], "viewdoc": [208, 223], "590": 208, "2021": 208, "rep1": [208, 223], "cohen93": [208, 209], "henri": 208, "olga": 209, "tausski": 209, "zimmer": 209, "pohst": 209, "articul": 209, "mathfrak": 209, "regul": 209, "alpha_m": 209, "round_two": 209, "prime_decomp": 209, "prime_valu": 209, "minimal_polynomi": 209, "field_isomorph": 209, "nilrad": 209, "z_k": 209, "zk": 209, "ordinarili": 209, "503": 209, "r738": 209, "r739": 209, "powerbasisel": 209, "ramif": 209, "as_submodul": 209, "bundl": 209, "test_factor": 209, "deliber": 209, "is_inert": 209, "inert": [209, 230], "reduce_anp": 209, "reduce_alg_num": 209, "field_gen": 209, "just_gen": 209, "reagent": 209, "kummer": 209, "1847": 209, "ueber": 209, "zerlegung": 209, "crell": 209, "r740": 209, "poly_from_expr": [209, 210], "tschirnhausen": 209, "maxtriesexcept": 209, "g_name": 209, "_minpoly_compos": 209, "stall": 209, "alli": 209, "monomorph": 209, "alpha_i": 209, "alpha_n": 209, "lincomb": 209, "primtiiv": 209, "meanwhil": 209, "moduleel": 209, "powerbasi": 209, "submodule_from_matrix": 209, "ancestor": 209, "to_col": 209, "nca": 209, "circumst": [209, 285], "_mult_tab": 209, "successfulli": 209, "moduleendomorph": 209, "innerendomorph": 209, "endomorphismr": 209, "spec": [209, 210], "i_n": [209, 210, 235], "include_self": 209, "basis_el": 209, "element_from_r": 209, "endomorphism_r": 209, "is_compat_col": 209, "mult_tab": 209, "mult": 209, "closurefailur": 209, "nearest_common_ancestor": 209, "number_field": 209, "power_basis_ancestor": 209, "incom": [209, 234], "halv": 209, "submodule_from_gen": 209, "over_power_basi": 209, "starts_with_un": 209, "hnf_modulu": 209, "whole_submodul": 209, "element_from_anp": 209, "element_from_alg_num": 209, "element_from_poli": 209, "qq_matrix": 209, "basis_element_pullback": 209, "discard_befor": 209, "structureerror": 209, "cohen00": 209, "make_mod_elt": 209, "qq_col": 209, "from_int_list": 209, "is_compat": 209, "reduced_mod_p": 209, "to_ancestor": 209, "anc": 209, "to_par": 209, "to_anp": 209, "inner_endomorph": 209, "event": [209, 234], "find_min_poli": 209, "missingunityerror": 209, "is_int": 209, "get_num_denom": 209, "extract_fundamental_discrimin": 209, "r741": 209, "algintpow": 209, "zeta_pow": 209, "r742": 209, "coeff_search": 209, "supplement_a_subspac": 209, "v_n": 209, "w_r": 209, "w_j": 209, "u_j": 209, "r743": 209, "parallel_poly_from_expr": 210, "exprtool": 210, "gcd_list": 210, "lcm_list": 210, "destruct": 210, "2079": 210, "1401": 210, "2715": 210, "6720": 210, "1092": 210, "gff": 210, "check_sqf": 210, "count_root": 210, "nroot": [210, 232], "maxstep": 210, "cleanup": 210, "73205080756888": 210, "73205080756887729352744634151": 210, "ground_root": 210, "nth_power_roots_poli": 210, "r_g": 210, "_signsimp": 210, "q_n": 210, "is_zero_dimension": [210, 233], "donal": 210, "230": [210, 232], "ec": 210, "em": 210, "dispersionset": 210, "gp": [210, 230], "free_symbols_in_domain": 210, "from_poli": 210, "get_domain": 210, "get_modulu": 210, "has_only_gen": 210, "vincent": [210, 252], "akrita": 210, "strzebonski": 210, "va": 210, "alkiviadi": 210, "panagioti": 210, "vigkla": 210, "265": 210, "279": 210, "polnomi": 210, "is_multivari": 210, "is_univari": 210, "ltrim": 210, "make_monic_over_integers_by_scaling_root": 210, "_only_": 210, "sturmian": 210, "subresultants_qq_zz": 210, "suffix": [210, 247], "_pg": 210, "_amv": 210, "rem_z": 210, "premultipli": 210, "rat_clear_denom": 210, "_ignor": 210, "retract": 210, "same_root": 210, "set_domain": 210, "set_modulu": 210, "termwis": 210, "fglm": 210, "r744": 210, "horner_schem": 210, "equispac": 210, "viet": 210, "itermonomi": 210, "min_degre": 210, "gib": 210, "monomial_kei": 210, "monomial_count": 210, "gradedlexord": 210, "reversedgradedlexord": 210, "clear_cach": 210, "_get_interv": 210, "165": [210, 234, 252], "169": 210, "eval_approx": 210, "evalf_r": 210, "eval_r": 210, "69629": 210, "71318": 210, "805": 210, "3275": 210, "65536": [210, 213, 214], "414645": 210, "131072": 210, "6545": 210, "104755": 210, "2097152": 210, "6634255": 210, "_all_root": 210, "use_cach": 210, "_complexes_index": 210, "_complexes_sort": 210, "_count_root": 210, "_ensure_complexes_init": 210, "_ensure_reals_init": 210, "_eval_is_imaginari": 210, "_get_complex": 210, "_get_complexes_sqf": 210, "currentfactor": 210, "_get_real": 210, "_get_reals_sqf": 210, "_get_root": 210, "_indexed_root": 210, "_new": 210, "_postprocess_root": 210, "_preprocess_root": 210, "heroic": [210, 232], "_real_root": 210, "_reals_index": 210, "_reals_sort": 210, "_refine_complex": 210, "_roots_trivi": 210, "_set_interv": 210, "return_mpmath": 210, "861136": 210, "86113631159405258": 210, "polyroot": 210, "unread": [210, 250], "casu": 210, "irreducibili": 210, "inexpress": 210, "unsolv": [210, 233], "r745": 210, "cubic_equ": 210, "trigonometric_and_hyperbolic_solut": 210, "specialpoli": 210, "swinnerton_dyer_poli": 210, "swinnerton": 210, "dyer": 210, "random_poli": 210, "gegenbau": [210, 214], "jakob": 210, "psum": 210, "3144337": 210, "r746": 210, "bernoulli_c_poli": 210, "reindex": 210, "swiss": 210, "knife": 210, "630": 210, "5124": 210, "12465": 210, "155": 210, "r747": 210, "partfrac": [210, 216], "undertermin": 210, "_w": [210, 221], "apart_list": 210, "assemble_partfrac_list": 210, "bunch": 210, "pfd": 210, "r748": 210, "partial_list": 210, "reassembl": 210, "pfda": 210, "r749": 210, "r750": 210, "r751": 210, "r752": 210, "r753": 210, "r754": 210, "r755": 210, "r756": 210, "widen": 211, "ring_seri": 211, "rs_sin": 211, "166666666666667": 211, "puiseux": 211, "rs_co": 211, "rs_tan": 211, "rs_exp": 211, "blazingli": 211, "promin": 211, "gradual": 211, "rs_": 211, "rs_log": 211, "rs_lambertw": 211, "rs_atan": 211, "arctang": 211, "rs_asin": 211, "_tan1": 211, "rs_cot": 211, "rs_cos_sin": 211, "rs_atanh": 211, "rs_sinh": 211, "rs_cosh": 211, "rs_tanh": 211, "rs_hadamard_exp": 211, "inver": 211, "rs_mul": 211, "rs_squar": 211, "rs_pow": 211, "rs_series_invers": 211, "rs_series_revers": 211, "a_kx_k": 211, "ar_i": 211, "ar_": 211, "ae": 211, "rs_trunc": 211, "rs_nth_root": 211, "160249952256379": 211, "44224957030741": 211, "rs_sub": 211, "rs_diff": 211, "rs_integr": 211, "rs_newton": 211, "rs_compose_add": 211, "r757": 211, "bostan": 211, "flajolet": 211, "schost": 211, "4579": 211, "institut": 211, "nation": 211, "recherch": 211, "informatiqu": 211, "automatiqu": 211, "rs_is_puiseux": 211, "rs_puiseux": 211, "rs_puiseux2": 211, "rs_series_from_list": 211, "concur": 211, "rs_fun": 211, "_tan": 211, "_nth": 211, "_root": 211, "_fun": 211, "mul_xin": 211, "pow_xin": 211, "_raw": 212, "sympy_eqs_to_r": 212, "eqs_r": 212, "eqs_to_matrix": 212, "eqs_coeff": 212, "eqs_rh": 212, "_solve_lin_si": 212, "_solve_lin_sys_compon": 212, "critiqu": 213, "wester1999": 213, "systemat": 213, "153": 213, "\u2124": [213, 214, 233, 292], "unm": 213, "driver": [214, 246], "adequ": 214, "emptyprint": 214, "_sympystr": 214, "mathml": 214, "inconveni": 214, "_print_": 214, "expr_class": 214, "hierarchi": [214, 234], "_print_rat": 214, "_print_numb": 214, "_print_atom": 214, "_print_bas": 214, "print_latex": 214, "mylatexprint": 214, "_print_deriv": 214, "print_my_latex": 214, "modop": 214, "subcompon": 214, "outermost": [214, 222, 226, 238], "modopmodewrong": 214, "modopnestedwrong": 214, "modopsettingswrong": 214, "subobject": 214, "infrastructur": [214, 231], "printer_exampl": 214, "set_global_set": 214, "stringpict": 214, "pretty_symbologi": 214, "prettyform": 214, "hline": 214, "vline": 214, "ascii": 214, "_pretti": 214, "use_unicode_sqrt_char": 214, "root_not": 214, "mat_symbol_styl": 214, "prettifi": 214, "bold": 214, "c89codeprint": 214, "print_ccod": 214, "tgamma": 214, "known_functions_c89": 214, "known_functions_c99": 214, "fmax": 214, "fmin": 214, "lgamma": 214, "indent_cod": 214, "cfunction_format": 214, "derefer": 214, "dereferenc": 214, "symbols_to_declar": 214, "not_supported_funct": 214, "code_text": 214, "m_sqrt2": 214, "math_macro": 214, "m_sqrt2l": 214, "cxx": 214, "cxx98codeprint": 214, "print_rcod": 214, "rcode": 214, "known_funct": 214, "_rcode": 214, "rfunction_str": 214, "rfunction_format": 214, "ifels": 214, "type_map": 214, "name_mangl": 214, "mangl": 214, "floor1": 214, "floor2": 214, "print_fcod": 214, "_fcode": 214, "conjg": 214, "32768": 214, "7182818284590452d0": 214, "1415926535897932d0": 214, "718281828459045235360287d0": 214, "141592653589793238462643d0": 214, "869604401089358618834491d0": 214, "mygamma": 214, "allow_unknown_funct": 214, "smtlib": 214, "smtlibprint": 214, "symbol_t": 214, "_smtlib": 214, "_default_set": 214, "known_const": 214, "ite": 214, "known_typ": 214, "smtlib_cod": 214, "auto_assert": 214, "auto_declar": 214, "prefix_express": 214, "suffix_express": 214, "log_warn": 214, "booleanfunct": 214, "dreal": 214, "14159": 214, "my_smt_variable_for_pi": 214, "postfix": [214, 252], "riski": 214, "sound": [214, 291], "pw": 214, "pythontyp": 214, "smt_builtin_func": 214, "existing_smtlib_fcn": 214, "user_def_func": 214, "fun": [214, 231, 284], "coshintegr": 214, "cosintegr": 214, "expintegralei": 214, "factorialpow": 214, "heavisidetheta": 214, "sinhintegr": 214, "sinintegr": 214, "arccosh": 214, "arccoth": 214, "arcsinh": 214, "arctanh": 214, "dirichleteta": 214, "gegenbauerc": 214, "hypergeometricpfq": 214, "sphericalbesselj": 214, "logintegr": 214, "lucasl": 214, "mathieu": 214, "riemann_xi": 214, "riemannxi": 214, "stieltjesgamma": 214, "sphericalbess": 214, "mcodeprint": 214, "_mcode": 214, "mcode": 214, "maplecodeprint": 214, "_mapl": 214, "maple_cod": 214, "print_maple_cod": 214, "javascriptcodeprint": 214, "_javascript": 214, "js_function_str": 214, "known_fcns_src1": 214, "known_fcns_src2": 214, "conj": 214, "juliacodeprint": 214, "_julia": 214, "harmless": [214, 287], "existing_julia_fcn": 214, "coshint": 214, "cosint": 214, "sinhint": 214, "sinint": 214, "logint": 214, "gammaln": 214, "octavecodeprint": 214, "_octav": 214, "recip": [214, 252], "powf": 214, "signum": 214, "rustcodeprint": 214, "_rust_cod": 214, "7_f64": 214, "_aesara": 214, "tensorvari": 214, "floatx": 214, "squeez": 214, "dim_handl": 214, "gtkmathview": 214, "widget": 214, "print_gtk": 214, "libgtkmathview": 214, "start_view": 214, "_lambdacod": 214, "accepted_latex_funct": 214, "parenthesize_sup": 214, "fold_frac_pow": 214, "fold_func_bracket": 214, "fold_short_frac": 214, "inv_trig_styl": 214, "itex": 214, "ln_notat": 214, "long_frac_ratio": 214, "mat_delim": 214, "mat_str": 214, "mul_symbol": 214, "symbol_nam": 214, "gothic_re_im": 214, "decimal_separ": 214, "diff_oper": 214, "smallmatrix": [214, 285], "amsmath": 214, "fracton": 214, "semicolon": 214, "monospac": 214, "mathtt": 214, "mathml2": 214, "mathmlprinterbas": 214, "mathmlcontentprint": 214, "mathmlpresentationprint": 214, "chapter4": 214, "_mathml_cont": 214, "mathml_tag": 214, "chapter3": 214, "_mathml_present": 214, "utf": 214, "mul_symbol_mathml_numb": 214, "xb7": 214, "print_mathml": [214, 290], "mrow": 214, "mpmathprint": 214, "fully_qualified_modul": 214, "print_python": 214, "textual": 214, "reprprint": 214, "_sympyrepr": 214, "reprifi": 214, "sympy_integ": 214, "displayhook": [214, 245], "pprint_nod": 214, "nb2": 214, "print_nod": 214, "asssumpt": 214, "determinisit": 214, "backtrac": 214, "print_tre": 214, "outputbuff": 214, "dvioption": 214, "outputtexfil": 214, "extra_preambl": 214, "latex_set": 214, "postscript": 214, "tex": 214, "eulervm": 214, "sty": 214, "debian": 214, "ubuntu": 214, "unset": [214, 226], "gimp": 214, "evinc": 214, "kdvi": 214, "xdvi": 214, "xdg": 214, "system_default_view": 214, "gracefulli": [214, 238], "bytesio": 214, "usepackag": 214, "amsfont": 214, "renewcommand": 214, "popen": 214, "phidd": 214, "bitmap": 214, "split_super_sub": 214, "var_sub1__sup_sub2": 214, "assignmenterror": 214, "bitwiseand": 214, "bitwiseor": 214, "bitwisexor": 214, "precedence_valu": 214, "kroneckerproduct": 214, "tensadd": [214, 240], "tensmul": [214, 240], "precedence_funct": 214, "precedence_float": 214, "precedence_fracel": 214, "precedence_integ": 214, "precedence_mul": 214, "precedence_polyel": 214, "precedence_r": 214, "precedence_unevaluatedexpr": 214, "databas": [214, 224], "pretty_use_unicod": 214, "pretty_try_use_unicod": 214, "xstr": 214, "greek_lett": 214, "digit_2txt": 214, "ONE": 214, "seven": 214, "symb_2txt": 214, "parenthesi": [214, 238], "\u2080": 214, "\u2081": 214, "\u2082": 214, "\u2084": 214, "\u2085": 214, "\u2086": 214, "\u2087": 214, "\u2088": 214, "\u2089": 214, "\u2090": 214, "\u1d66": 214, "\u1d6a": 214, "\u2091": 214, "\u1d67": 214, "\u2095": 214, "\u1d62": 214, "\u2096": 214, "\u2097": 214, "\u2098": 214, "\u2099": 214, "\u2092": 214, "\u209a": 214, "\u1d69": 214, "\u1d63": 214, "\u1d68": 214, "\u209b": 214, "\u209c": 214, "\u1d64": 214, "\u1d65": 214, "\u2093": 214, "\u2070": 214, "\u00b9": 214, "\u00b2": 214, "\u00b3": 214, "\u2074": 214, "\u2075": 214, "\u2076": 214, "\u2077": 214, "\u2078": 214, "\u2079": 214, "\u2071": 214, "\u207f": 214, "xobj": 214, "vobj": 214, "hobj": 214, "vf": 214, "\u00bd": 214, "\u2153": 214, "\u00bc": 214, "\u2155": 214, "\u2159": 214, "\u215b": 214, "\u2154": 214, "\u2156": 214, "\u00be": 214, "\u2157": 214, "\u215c": 214, "\u2158": 214, "\u215a": 214, "\u215d": 214, "\u215e": 214, "xsym": 214, "symbologi": 214, "atoms_t": 214, "\u2102": [214, 292], "emptysequ": [214, 220], "\u2115": 214, "\u2115\u2080": 214, "\u211d": [214, 292], "symmetricdiffer": [214, 222, 233], "pretty_atom": 214, "atom_nam": 214, "pretty_symbol": 214, "symb_nam": 214, "bold_nam": 214, "stylis": 214, "_print_meijerg": 214, "_print_hyp": 214, "jurjen": 214, "bo": 214, "hate": 214, "spammer": 214, "pietjepuk314": 214, "oc": [214, 265], "oohai": 214, "gedg": 214, "mun": 214, "terminal_str": 214, "baselin": 214, "leftslash": 214, "slash": [214, 245], "paren": 214, "ifascii_nougli": 214, "line_break": 214, "ugli": 214, "terminal_width": 214, "wider": 214, "maxdepth": 214, "labelfunc": 214, "digraph": [214, 252, 290], "rankdir": [214, 290], "_sparse_": 215, "flavor": 215, "________": [215, 234, 252], "x\u2080": 215, "greatli": 215, "numbered_symbol": [215, 226, 230, 252], "postprocessor": [215, 226], "reduced_expr": [215, 226], "formalpowerseri": 216, "coeff_bel": 216, "formalpowerseriescompos": 216, "r758": 216, "comtet": 216, "loui": 216, "reidel": 216, "1974": 216, "formalpowerseriesinvers": 216, "r759": 216, "upto": [216, 221, 230], "formalpowerseriesproduct": 216, "rational_algorithm": 216, "compute_fp": 216, "hyper_algorithm": 216, "omposit": 216, "bell_seq": 216, "finiteformalpowerseri": 216, "rational_independ": 216, "ra": 216, "admiss": [216, 219], "r760": 216, "r761": 216, "simpled": 216, "exp_r": 216, "explik": 216, "hyper_r": 216, "rsolve_hypergeometr": 216, "r762": 216, "r763": 216, "solve_d": 216, "fourierseri": 217, "scalex": 217, "shiftx": 217, "sigma_approxim": 217, "gibb": 217, "bigl": 217, "bigr": 217, "lanczo": 217, "r764": 217, "gibbs_phenomenon": 217, "r765": 217, "sawtooth": 217, "bn": 217, "r766": 217, "limitseq": 219, "difference_delta": 219, "r767": 219, "differencedelta": 219, "limit_seq": [219, 221], "safeguard": 219, "r768": 219, "kauer": 219, "seqper": 220, "seqformula": 220, "seqbas": 220, "coeff_mul": 220, "find_linear_recurr": 220, "gfvar": 220, "seqadd": 220, "seqmul": 220, "_mul": 220, "recursiveseq": 220, "fib": 220, "invok": [221, 245, 246], "workhors": 221, "succ": [221, 234], "asymp": 221, "exposit": 221, "gloss": 221, "wsym": 221, "test_rewrite1": 221, "build_expression_tre": 221, "mrv_leadterm": 221, "e0": 221, "calculate_seri": 221, "limitinf": 221, "constantli": 221, "subsset": 221, "mrv_max1": 221, "mrv_max3": 221, "expsf": 221, "expsg": 221, "expsboth": 221, "do_sub": 221, "r769": 221, "limsup_": 221, "7048138294": 221, "7182818285": 221, "6349839002": 221, "6449340668": 221, "shank": 221, "6881721793": 221, "6931396564": 221, "6931471806": 221, "6931471805599453094172321215": 221, "r770": 221, "residue_theorem": 221, "neighborhood": 222, "rim": 222, "conditionset": [222, 233, 234, 292], "affirm": 222, "infimum": 222, "imageset": [222, 233, 292], "is_clos": 222, "closed": 222, "is_disjoint": 222, "r771": 222, "disjoint_set": 222, "is_open": 222, "is_proper_subset": 222, "is_proper_superset": 222, "left_open": 222, "is_superset": 222, "isdisjoint": 222, "issubset": 222, "issuperset": 222, "productset": [222, 233], "powerset": 222, "fancyset": 222, "complexregion": [222, 233], "disjointunion": 222, "lebesgu": 222, "r772": 222, "power_set": 222, "symmetric_differ": 222, "r773": 222, "right_open": 222, "mpi": 222, "r774": 222, "interval_": 222, "as_rel": 222, "is_left_unbound": 222, "is_right_unbound": 222, "r775": 222, "r776": 222, "union_": 222, "28set_theori": 222, "r777": 222, "intersection_": 222, "coin": [222, 234], "r778": 222, "cartesian_product": 222, "is_iter": 222, "r779": 222, "complementset": 222, "r780": 222, "disjoint_union": 222, "r781": 222, "empty_set": 222, "r782": 222, "universal_set": 222, "flambda": 222, "square_iter": 222, "base_set": 222, "cartesiancomplexregion": 222, "polarcomplexregion": 222, "unit_disk": 222, "upper_half_unit_disk": 222, "a_interv": 222, "b_interv": 222, "from_real": 222, "pset": 222, "rset": 222, "thetaset": 222, "upper_half_plan": 222, "normalize_theta_set": 222, "r783": 222, "r784": 222, "axiom_of_power_set": 222, "sin_sol": 222, "r785": 222, "element_": 222, "varnoth": 222, "tr0": 223, "tr1": 223, "tr2": 223, "tr2i": 223, "tr3": 223, "tr4": 223, "tr5": 223, "tr6": 223, "tr7": 223, "tr8": 223, "tr9": 223, "tr10": 223, "tr10i": 223, "tr11": 223, "tr12": 223, "tr12i": 223, "tr13": 223, "trmorri": 223, "tr14": 223, "tr15": 223, "tr16": 223, "tr22": 223, "tr111": 223, "ctr1": 223, "ctr4": 223, "rl1": 223, "rl2": 223, "deem": 223, "932": 223, "016": 223, "serendipit": 223, "dead": 223, "newa": 223, "lucki": 223, "sqt": 223, "_tr56": 223, "un": [223, 224], "r786": 223, "morri": 223, "27s_law": 223, "trpower": 223, "r787": 223, "list_of_trigonometric_ident": 223, "reduction_formula": 223, "ctr2": 223, "ctr3": 223, "r788": 223, "s0895717706001609": 223, "dimitar": 223, "vlahovski": 223, "technolog": 223, "xiuqin": 223, "zhong": 223, "zhenb": 223, "zeng": 223, "1169": 223, "1177": 223, "657": 223, "2478": 223, "sosmath": 223, "trig5": 223, "symplifi": [224, 226], "roach1996": 224, "roach1997": 224, "p_q": 224, "reachabl": [224, 234], "f_q": 224, "undo": [224, 291], "whenc": 224, "game": 224, "twofold": 224, "incongru": 224, "wlog": 224, "alpha_r": 224, "beta_r": 224, "blindli": 224, "messi": 224, "k_u": 224, "l_v": 224, "k_j": 224, "c_w": 224, "r_j": 224, "l_u": 224, "res_": 224, "delta_i": 224, "add_formula": 224, "addb": 224, "sum_0": 224, "test_hyperexpand": 224, "test_formula": 224, "suboptim": 224, "imath": 224, "b1prime": 224, "vital": 224, "308": 224, "hongguang": [225, 271], "fu": [225, 226, 271], "logcombin": [226, 230, 233], "unmodifi": 226, "my_measur": 226, "nthroot": 226, "max_len": 226, "surd": 226, "kroneckersimp": 226, "besselsimp": 226, "strigonometr": 226, "399": 226, "hypersimilar": 226, "rational_convers": 226, "base10": 226, "6004799503160655": 226, "eq_x": 226, "max_term": 226, "collect_sqrt": 226, "polish": 226, "rad_ration": 226, "collect_const": 226, "rcollect": 226, "ratsimpmodprim": 226, "r789": 226, "pearc": 226, "1145768": 226, "1145809": 226, "trigsimp_groebn": 226, "bb1": 226, "be1": 226, "bb2": 226, "be2": 226, "bei": 226, "max_it": 226, "unrad": [226, 232], "r790": 226, "20210806201615": 226, "fagin": 226, "symb85": 226, "r791": 226, "cybertest": 226, "opt_sub": 226, "as_unevaluated_bas": 226, "tree_cs": 226, "hyperegeometr": 226, "epathtool": 226, "epath": 226, "ebnf": 226, "za": [226, 234], "xml": 226, "xpath": 226, "hasattr": [226, 248], "beginn": [227, 229, 230, 232, 233, 292], "diophantu": 227, "mathematician": [227, 233], "citi": 227, "alexandria": 227, "father": 227, "hi": 227, "arithmetica": 227, "diop_solv": 227, "classify_diop": 227, "diop_linear": 227, "diop_quadrat": 227, "diop_ternary_quadrat": 227, "diop_ternary_quadratic_norm": 227, "diop_general_pythagorean": 227, "diop_general_sum_of_squar": 227, "diop_general_sum_of_even_pow": 227, "merge_solut": 227, "3y": 227, "9369318": 227, "find_dn": 227, "diop_dn": 227, "transformation_to_dn": 227, "920": 227, "5y": 227, "BY": 227, "transformation_to_norm": 227, "t4": 227, "t5": 227, "sum_of_squar": 227, "providean": 227, "eqyptian": 227, "thilinaatsympi": 227, "andreescu": 227, "titu": 227, "andrica": 227, "dorin": 227, "cucurezeanu": 227, "ion": 227, "diophantineequ": 227, "alpertron": 227, "20160323033111": 227, "jpr2718": 227, "ax2p": 227, "permute_sign": [227, 252], "signed_permut": [227, 252], "_dict": 227, "base_solution_linear": 227, "r792": 227, "r793": 227, "pell": 227, "lmm": 227, "r794": 227, "393": 227, "13y": 227, "986": 227, "49299": 227, "1570": 227, "diop_bf_dn": 227, "robertson": 227, "20160323033128": 227, "cornacchia": 227, "r795": 227, "nitaj": 227, "r796": 227, "numbertheori": 227, "r797": 227, "r798": 227, "676": 227, "884": 227, "fxz": 227, "3xy": 227, "r799": 227, "fxy": 227, "gyz": 227, "hxz": 227, "r800": 227, "cremona": 227, "rusin": 227, "2x_": 227, "m4": 227, "general_sum_of_squar": 227, "8m": 227, "r801": 227, "2345": 227, "proofwiki": 227, "integer_as_sum_of_three_squar": 227, "general_sum_of_even_pow": 227, "power_represent": 227, "1729": 227, "stopiter": 227, "sum_of_three_squar": 227, "r802": 227, "44542": 227, "207": 227, "schorn": 227, "sum_of_four_squar": 227, "3456": 227, "1294585930293": 227, "2161": 227, "1137796": 227, "r803": 227, "sum_of_pow": 227, "evenli": 227, "var_t": 227, "pqa": 227, "r804": 227, "ur": 227, "dv": 227, "vr": 227, "r805": 227, "parametrize_ternary_quadrat": 227, "r806": 227, "nigel": 227, "ldescent": 227, "4x": [227, 233, 280], "7y": 227, "5x": 227, "r807": 227, "r808": 227, "nottingham": 227, "worktrib": 227, "1023265": 227, "gaussian_reduc": 227, "r809": 227, "20201021115213": 227, "cuhk": 227, "hk": 227, "wkshum": 227, "404": 227, "r810": 227, "holzer": 227, "mordel": 227, "r811": 227, "r812": 227, "prime_as_sum_of_two_squar": 227, "r813": 227, "sqf_normal": 227, "r814": 227, "legrang": 227, "csusm": 227, "aitken_html": 227, "diophantinesolutionset": 227, "symbols_seq": 227, "dict_iter": 227, "diophantineequationtyp": 227, "binaryquadrat": 227, "r815": 227, "r816": 227, "inhomogeneousternaryquadrat": 227, "inhomogen": [227, 230, 232], "homogeneousternaryquadraticnorm": 227, "homogeneousternaryquadrat": 227, "inhomogeneousgeneralquadrat": 227, "homogeneousgeneralquadrat": 227, "generalsumofsquar": 227, "r817": 227, "generalpythagorean": 227, "cubicthu": 227, "thue": 227, "generalsumofevenpow": 227, "pde": [228, 230, 271], "subcategori": [229, 270], "solve_rational_inequ": 229, "solve_poly_inequ": 229, "reduce_rational_inequ": 229, "reduce_abs_inequ": 229, "solvifi": [229, 233], "autodetect": [230, 231], "odesimp": 230, "ode_ord": [230, 231, 232], "deutil": [230, 231], "best_hint": 230, "unevaluat": 230, "test_od": 230, "ode_": 230, "hintnam": [230, 231], "classify_sysod": 230, "almost_linear": 230, "dsolve_system": 230, "ode_hintnam": 230, "allhint": [230, 231], "tough": 230, "nth_linear_homogeneous_constant_coeff_integr": 230, "1st_linear": 230, "nth_linear": 230, "indep": 230, "indep_div_dep": 230, "undetermined_coeffici": 230, "_best": 230, "nth_algebra": 230, "1st_homogeneous_coeff_best": 230, "1st_homogeneous_coeff_subs_indep_div_dep": 230, "1st_homogeneous_coeff_subs_dep_div_indep": 230, "1st_power_seri": 230, "lie_group": 230, "nth_linear_constant_coeff_homogen": 230, "nth_linear_euler_eq_homogen": 230, "nth_algebraic_integr": 230, "1st_exact_integr": 230, "1st_linear_integr": 230, "bernoulli_integr": 230, "1st_homogeneous_coeff_subs_indep_div_dep_integr": 230, "1st_homogeneous_coeff_subs_dep_div_indep_integr": 230, "nth_linear_constant_coeff_undetermined_coeffici": 230, "nth_linear_constant_coeff_variation_of_paramet": 230, "nth_linear_constant_coeff_variation_of_parameters_integr": 230, "solve_for_func": [230, 231], "homogeneouscoeffsubsdepdivindep": 230, "homogeneouscoeffsubsindepdivdep": 230, "varepsilon": 230, "genform": [230, 231], "starrett": 230, "checkinfsol": 230, "constantsimp": 230, "symbolnam": 230, "startnumb": 230, "endnumb": 230, "renumb": 230, "absorpt": 230, "assist": 230, "constant_renumb": 230, "1st_rational_riccati": 230, "riccati_special_minus2": 230, "linear_coeffici": 230, "separable_reduc": 230, "nth_linear_euler_eq_nonhomogeneous_undetermined_coeffici": 230, "nth_linear_euler_eq_nonhomogeneous_variation_of_paramet": 230, "liouvil": 230, "2nd_linear_airi": 230, "2nd_linear_bessel": 230, "2nd_hypergeometr": 230, "2nd_hypergeometric_integr": 230, "nth_order_reduc": 230, "2nd_power_series_ordinari": 230, "2nd_power_series_regular": 230, "almost_linear_integr": 230, "linear_coefficients_integr": 230, "separable_reduced_integr": 230, "nth_linear_euler_eq_nonhomogeneous_variation_of_parameters_integr": 230, "liouville_integr": 230, "2nd_nonlinear_autonomous_conserv": 230, "2nd_nonlinear_autonomous_conserved_integr": 230, "newconst": 230, "ode_sol_simpl": 230, "trysolv": 230, "sola": 230, "solb": 230, "listofsolut": 230, "ode_problem": 230, "firstexact": 230, "exact_differential_equ": 230, "tenenbaum": 230, "dover": 230, "1963": 230, "homogeneouscoeffbest": 230, "ode_1st_homogeneous_coeff_best_integr": 230, "homogeneous_differential_equ": 230, "firstlinear": 230, "linear_differential_equ": 230, "order_equation_with_variable_coeffici": 230, "rationalriccati": 230, "atleast": 230, "riccati_equ": 230, "thieu": 230, "vo": 230, "risc_5387": 230, "phdthesisthieu": 230, "secondlinearairi": 230, "secondlinearbessel": 230, "math24": 230, "bernoulli_differential_equ": 230, "goldstein": 230, "braun": 230, "maplesoft": 230, "aspx": 230, "odeadvisor": 230, "riccatispeci": 230, "__________________": 230, "eqworld": 230, "ipmnet": 230, "ru": 230, "ode0106": 230, "ode0123": 230, "nthlinearconstantcoeffhomogen": 230, "nth_linear_constant_coeff_homogeneous_integr": 230, "nonhomogeneous_equation_with_constant_coeffici": 230, "nthlinearconstantcoeffundeterminedcoeffici": 230, "method_of_undetermined_coeffici": 230, "221": 230, "nthlinearconstantcoeffvariationofparamet": 230, "cramer": 230, "variation_of_paramet": 230, "planetmath": 230, "variationofparamet": 230, "nthlineareulereqhomogen": 230, "equidimension": 230, "nth_linear_euler_eq_homogeneous_integr": 230, "sollist": 230, "93euler_equ": 230, "bender": 230, "orszag": 230, "scientist": 230, "nthlineareulereqnonhomogeneousvariationofparamet": 230, "nthlineareulereqnonhomogeneousundeterminedcoeffici": 230, "nthalgebra": 230, "nthorderreduc": 230, "caught": 230, "fault": 230, "almostlinear": 230, "first_linear": 230, "joel": 230, "mose": 230, "stormi": 230, "decad": 230, "august": [230, 249], "558": 230, "linearcoeffici": 230, "separablereduc": 230, "liegroup": 230, "secondhypergeometr": 230, "2f1": 230, "1f1": 230, "0f1": 230, "liouvillian": 230, "pfq": 230, "chan": 230, "cheb": 230, "terrab": 230, "ode_1st_power_seri": 230, "travi": 230, "walker": 230, "ode_2nd_power_series_ordinari": 230, "lamar": 230, "seriessolut": 230, "simmon": 230, "176": 230, "ode_2nd_power_series_regular": 230, "lie_heuristic_abaco1_simpl": 230, "duart": 230, "da": 230, "mota": 230, "lie_heuristic_abaco1_product": 230, "roch": 230, "lie_heuristic_bivari": 230, "329": 230, "lie_heuristic_chi": 230, "lie_heuristic_abaco2_similar": 230, "lie_heuristic_function_sum": 230, "lie_heuristic_abaco2_unique_unknown": 230, "lie_heuristic_abaco2_unique_gener": 230, "lie_heuristic_linear": 230, "gy": 230, "bh": 230, "impract": 230, "riccati_norm": 230, "riccati_inverse_norm": 230, "riccati_reduc": 230, "construct_c": 230, "construct_d": 230, "val_inf": 230, "valuat": 230, "rational_laurent_seri": 230, "compute_m_ybar": 230, "ybar": 230, "solve_aux_eq": 230, "numa": 230, "dena": 230, "numi": 230, "deni": 230, "remove_redundant_sol": 230, "sol1": 230, "sol2": 230, "get_gen_sol_from_part_sol": 230, "part_sol": 230, "haaheim": 230, "solve_riccati": 230, "gensol": 230, "_linear_2eq_order1_type6": 230, "_linear_2eq_order1_type7": 230, "fgp": 230, "ag": 230, "bg": 230, "linear_ode_to_matrix": 230, "odeordererror": 230, "odenonlinearerror": 230, "eqs_mat": 230, "r818": 230, "matrix_differential_equ": 230, "canonical_od": 230, "canonical_eq": 230, "canonical_system": 230, "linodesolve_typ": 230, "linodesolv": 230, "type1": 230, "type2": 230, "type3": 230, "type4": 230, "type5": 230, "type6": 230, "type_of_equ": 230, "a_t": 230, "a_non_commut": 230, "matrix_exp_jordan_form": 230, "expj": 230, "matrix_exp": 230, "defect": 230, "p_invers": 230, "r819": 230, "defective_matrix": 230, "r820": 230, "r821": 230, "jordan_normal_form": 230, "comupt": 230, "r822": 230, "r823": 230, "matrix_exponenti": 230, "antiderv": 230, "subscheck": 230, "system_info": 230, "sol_vector": 230, "sol_vector_evalu": 230, "_nonlinear_2eq_order1_type1": 230, "_nonlinear_2eq_order1_type2": 230, "_nonlinear_2eq_order1_type3": 230, "autonom": 230, "_nonlinear_2eq_order1_type4": 230, "_nonlinear_2eq_order1_type5": 230, "clairaut": 230, "envelop": 230, "_nonlinear_3eq_order1_type1": 230, "enspac": [230, 233], "sysod": 230, "sode0401": 230, "_nonlinear_3eq_order1_type2": 230, "sode0402": 230, "_nonlinear_3eq_order1_type3": 230, "sode0404": 230, "_nonlinear_3eq_order1_type4": 230, "sode0405": 230, "_nonlinear_3eq_order1_type5": 230, "sode0406": 230, "_handle_integr": 230, "gather": 230, "unhind": 230, "wolphramalpha": 230, "detool": 230, "hint_integr": 230, "alphanumer": 230, "hinder": 230, "matching_hint": 230, "matchdict": 230, "1st_homogeneous_coeff": 230, "your_hint": 230, "pde_separ": 231, "uxt": 231, "pde_separate_add": 231, "pde_separate_mul": 231, "uxi": 231, "pdsolv": 231, "solvefun": 231, "classify_pd": 231, "test_pd": 231, "pde_hintnam": 231, "ux": 231, "1st_linear_constant_coeff_homogen": 231, "checkpdesol": 231, "_preprocess": 231, "inabl": 231, "_xi_1": 231, "pde_1st_linear_constant_coeff_homogen": 231, "viktor": 231, "grigoryan": 231, "124a": 231, "pde_1st_linear_constant_coeff": 231, "substack": 231, "1st_linear_constant_coeff_integr": 231, "pde_1st_linear_variable_coeff": 231, "du": 231, "inspir": [231, 287], "pde_hint": 231, "checksol": 232, "ect": 232, "attain": [232, 264], "star": [232, 252], "052": 232, "cov": 232, "pval": 232, "xval": 232, "rsolv": 232, "solve_linear": 232, "solve_linear_system": 232, "msymbol": 232, "solve_linear_system_lu": 232, "solve_undetermined_coeff": 232, "equ": 232, "73908513321516064165531208767387340401341175890076": 232, "steep": 232, "39267e": 232, "1684e": 232, "588469032184": 232, "315": 232, "730061685774": 232, "46792545969349058": 232, "inconclus": 232, "init": 232, "dissimilar": 232, "v_0": 232, "n_m": 232, "v_m": 232, "rsolve_poli": 232, "rsolve_ratio": 232, "r824": 232, "levelt": 232, "290": [232, 262], "296": 232, "r825": 232, "r826": 232, "r827": 232, "289": 232, "alembertian": 232, "r828": 232, "r829": 232, "polysi": 232, "solve_triangul": 232, "kalkbrenn": 232, "patrizia": 232, "teo": 232, "aaecc": 232, "argand": 233, "uncount": 233, "bizarr": 233, "her": 233, "sol_f": 233, "solveset_r": 233, "solveset_complex": 233, "methodologi": [233, 284], "_solve_real_trig": 233, "invert_r": 233, "invert_complex": 233, "_solve_rad": 233, "_solve_ab": 233, "_solve_as_r": 233, "_solve_as_poly_r": 233, "_solve_as_poly_complex": 233, "_solve_as_poli": 233, "gsoc": 233, "7abb76ffed50425299b9065129ae87261668a0f7": 233, "iamit": 233, "2948": 233, "6659": 233, "7523": 233, "sibx0afl3q": 233, "9696": 233, "inftyright": 233, "nright": 233, "0right": 233, "domain_check": 233, "3z": 233, "9z": 233, "nonlinearerror": 233, "cccc": 233, "eq3": 233, "eq4": 233, "391": 233, "_solve_system": 233, "_solve_using_known_valu": 233, "_transolv": 233, "_tsolv": 233, "tsolv": 233, "outright": 233, "interf": 233, "add_typ": 233, "_is_exponenti": 233, "new_eq": 233, "_solve_exponenti": 233, "_is_class": 233, "_solve_class": 233, "_solve_expo": 233, "9x": 233, "solve_expo": 233, "log_b": 233, "_solve_logarithm": 233, "solve_log": 233, "_is_logarithm": 233, "prebuilt": 234, "finiterv": 234, "varianc": 234, "dice": 234, "continuousrv": 234, "continuousdistributionhandmad": 234, "dist": 234, "discreterv": 234, "discretedistributionhandmad": 234, "pmf": 234, "finitedistributionhandmad": 234, "discreteuniform": 234, "randomsymbol": 234, "r830": 234, "discrete_uniform_distribut": 234, "r831": 234, "discreteuniformdistribut": 234, "d6": 234, "diedistribut": 234, "toss": 234, "r832": 234, "bernoulli_distribut": 234, "r833": 234, "bernoullidistribut": 234, "unfair": 234, "r834": 234, "coin_flip": 234, "binomialdistribut": 234, "r835": 234, "binomial_distribut": 234, "r836": 234, "betabinomi": 234, "r837": 234, "r838": 234, "betabinomialdistribut": 234, "popul": 234, "marbl": 234, "r839": 234, "hypergeometric_distribut": 234, "r840": 234, "hypergeometricdistribut": 234, "700000000000000": 234, "r841": 234, "rademacher_distribut": 234, "r842": 234, "geometric_distribut": 234, "r843": 234, "geometricdistribut": 234, "r844": 234, "hermite_distribut": 234, "poisson": 234, "r845": 234, "poisson_distribut": 234, "r846": 234, "poissondistribut": 234, "r847": 234, "logarithmic_distribut": 234, "r848": 234, "logarithmicdistribut": 234, "negativebinomi": 234, "r849": 234, "negative_binomial_distribut": 234, "r850": 234, "negativebinomialdistribut": 234, "skellam": 234, "mu1": 234, "mu2": 234, "mu_1": 234, "mu_2": 234, "i_k": 234, "r851": 234, "skellam_distribut": 234, "yulesimon": 234, "yule": 234, "simon": 234, "r852": 234, "93simon_distribut": 234, "8100": 234, "r853": 234, "zeta_distribut": 234, "cdf": 234, "r854": 234, "arcsine_distribut": 234, "benini": 234, "r855": 234, "benini_distribut": 234, "r856": 234, "v8": 234, "beninidistribut": 234, "r857": 234, "beta_distribut": 234, "r858": 234, "betadistribut": 234, "betanoncentr": 234, "noncentr": 234, "r859": 234, "noncentral_beta_distribut": 234, "r860": 234, "noncentralbetadistribut": 234, "betaprim": 234, "r861": 234, "beta_prime_distribut": 234, "r862": 234, "betaprimedistribut": 234, "boundedpareto": 234, "pareto": 234, "r863": 234, "pareto_distribut": 234, "bounded_pareto_distribut": 234, "r864": 234, "cauchy_distribut": 234, "r865": 234, "cauchydistribut": 234, "r866": 234, "chi_distribut": 234, "r867": 234, "chidistribut": 234, "chinoncentr": 234, "r868": 234, "noncentral_chi_distribut": 234, "chisquar": 234, "r869": 234, "chi_squared_distribut": 234, "r870": 234, "squareddistribut": 234, "dagum": 234, "r871": 234, "dagum_distribut": 234, "davi": 234, "radiat": 234, "r872": 234, "davis_distribut": 234, "r873": 234, "davisdistribut": 234, "erlang": 234, "r874": 234, "erlang_distribut": 234, "r875": 234, "erlangdistribut": 234, "exgaussian": 234, "emg": 234, "r876": 234, "exponentially_modified_gaussian_distribut": 234, "quantil": 234, "r877": 234, "exponential_distribut": 234, "r878": 234, "exponentialdistribut": 234, "fdistribut": 234, "______________________________": 234, "r879": 234, "r880": 234, "fisherz": 234, "fisher": 234, "2d_1": 234, "d_1z": 234, "d_1e": 234, "r881": 234, "27s_z": 234, "r882": 234, "fishersz": 234, "frechet": 234, "r883": 234, "a9chet_distribut": 234, "r884": 234, "gamma_distribut": 234, "r885": 234, "gammadistribut": 234, "gammainvers": 234, "r886": 234, "gompertz": 234, "r887": 234, "gompertz_distribut": 234, "gumbel": 234, "dfrac": 234, "r888": 234, "gumbeldistribut": 234, "r889": 234, "gumbel_distribut": 234, "r890": 234, "20200628222206": 234, "mathwav": 234, "easyfit": 234, "gumbel_max": 234, "r891": 234, "20200628222212": 234, "gumbel_min": 234, "kumaraswami": 234, "r892": 234, "kumaraswamy_distribut": 234, "r893": 234, "laplace_distribut": 234, "r894": 234, "laplacedistribut": 234, "r895": 234, "a9vy_distribut": 234, "r896": 234, "levydistribut": 234, "logist": 234, "r897": 234, "logistic_distribut": 234, "r898": 234, "logisticdistribut": 234, "loglogist": 234, "unimod": 234, "r899": 234, "lognorm": 234, "r900": 234, "r901": 234, "lognormaldistribut": 234, "lomax": 234, "r902": 234, "lomax_distribut": 234, "maxwel": 234, "r903": 234, "maxwell_distribut": 234, "r904": 234, "maxwelldistribut": 234, "moyal": 234, "r905": 234, "moyaldistribut": 234, "r906": 234, "rice": 234, "dobelman": 234, "textfil": 234, "distributionshandbook": 234, "nakagami": 234, "r907": 234, "nakagami_distribut": 234, "marginal_distribut": 234, "r908": 234, "normal_distribut": 234, "r909": 234, "normaldistributionfunct": 234, "xm": 234, "x_m": 234, "r910": 234, "r911": 234, "paretodistribut": 234, "powerfunct": 234, "r912": 234, "20200204081320": 234, "power_func": 234, "quadraticu": 234, "r913": 234, "quadratic_distribut": 234, "raisedcosin": 234, "r914": 234, "raised_cosine_distribut": 234, "r915": 234, "rayleigh_distribut": 234, "r916": 234, "rayleighdistribut": 234, "r917": 234, "reciprocal_distribut": 234, "studentt": 234, "r918": 234, "student_t": 234, "r919": 234, "studentst": 234, "shiftedgompertz": 234, "r920": 234, "shifted_gompertz_distribut": 234, "r921": 234, "trapezoidal_distribut": 234, "r922": 234, "triangular_distribut": 234, "r923": 234, "triangulardistribut": 234, "r924": 234, "uniform_distribution_": 234, "28continu": 234, "r925": 234, "uniformdistribut": 234, "uniformsum": 234, "irwin": 234, "r926": 234, "uniform_sum_distribut": 234, "r927": 234, "uniformsumdistribut": 234, "vonmis": 234, "mise": 234, "i_0": 234, "r928": 234, "von_mises_distribut": 234, "r929": 234, "vonmisesdistribut": 234, "wald": 234, "gaussianinvers": 234, "r930": 234, "inverse_gaussian_distribut": 234, "r931": 234, "inversegaussiandistribut": 234, "weibul": 234, "geq0": 234, "r932": 234, "weibull_distribut": 234, "r933": 234, "weibulldistribut": 234, "wignersemicircl": 234, "semicircl": 234, "frac2": 234, "r934": 234, "wigner_semicircle_distribut": 234, "r935": 234, "wignerssemicirclelaw": 234, "jointrv": 234, "_set": 234, "multivariatenorm": 234, "noninvert": 234, "ob": 234, "r936": 234, "multivariate_normal_distribut": 234, "multivariatelaplac": 234, "r937": 234, "multivariate_laplace_distribut": 234, "generalizedmultivariateloggamma": 234, "joint_rv_typ": 234, "gd": 234, "y_3": 234, "gmvlg": 234, "generalizedmultivariateloggammaomega": 234, "r938": 234, "generalized_multivariate_log": 234, "r939": 234, "234137346_on_a_multivariate_log": 234, "gamma_distribution_and_the_use_of_the_distribution_in_the_bayesian_analysi": 234, "correl": 234, "gmvlgo": 234, "r940": 234, "r941": 234, "r942": 234, "multinomial_distribut": 234, "r943": 234, "multinomialdistribut": 234, "multivariatebeta": 234, "r944": 234, "dirichlet_distribut": 234, "r945": 234, "dirichletdistribut": 234, "multivariateewen": 234, "ewen": 234, "r946": 234, "27s_sampling_formula": 234, "r947": 234, "280311472_the_ubiquitous_ewens_sampling_formula": 234, "multivariatet": 234, "negativemultinomi": 234, "n_c": 234, "r948": 234, "negative_multinomial_distribut": 234, "r949": 234, "normalgamma": 234, "r950": 234, "discretemarkovchain": 234, "state_spac": 234, "trans_prob": 234, "markov": 234, "characteris": 234, "transitionmatrixof": 234, "transition_prob": 234, "sunni": 234, "cloudi": 234, "raini": 234, "randomindexedsymbol": 234, "409": 234, "6963328": 234, "3096": 234, "query_gt": 234, "64705": 234, "r951": 234, "markov_chain": 234, "time_markov_chain": 234, "r952": 234, "20201230182007": 234, "dartmouth": 234, "teaching_aid": 234, "books_articl": 234, "probability_book": 234, "chapter11": 234, "canonical_form": 234, "transient": 234, "p_new": 234, "new_matrix": 234, "communication_class": 234, "r953": 234, "onlinelibrari": 234, "wilei": 234, "1002": 234, "9780470316887": 234, "app1": 234, "r954": 234, "columbia": 234, "ww2040": 234, "6711f12": 234, "lect1023big": 234, "is_recurr": 234, "tarjan": [234, 252], "r955": 234, "20220207032113": 234, "4701sum07": 234, "4701": 234, "mcii": 234, "r956": 234, "ceca": 234, "clemson": 234, "shierd": 234, "shier": 234, "r957": 234, "ujcont": 234, "uj": 234, "esploro": 234, "graduat": 234, "999849107691": 234, "r958": 234, "econ": 234, "dtmc": 234, "reccur": 234, "r959": 234, "absorbing_markov_chain": 234, "r960": 234, "brandei": 234, "igusa": 234, "math56as08": 234, "math56a_s08_notes015": 234, "fixed_row_vector": 234, "stationary_distribut": 234, "fundamental_matrix": 234, "r961": 234, "lip": 234, "limiting_distribut": 234, "condition_set": 234, "wm": 234, "r962": 234, "probabilitycours": 234, "11_2_6_stationary_and_limiting_distribut": 234, "r963": 234, "20210508104430": 234, "galton": 234, "uchicago": 234, "yibi": 234, "stat317": 234, "lecture4_6up": 234, "continuousmarkovchain": 234, "gen_mat": 234, "generator_matrix": 234, "45279": 234, "58602": 234, "37933": 234, "34211": 234, "7143": 234, "4002723175": 234, "6832579186": 234, "r964": 234, "r965": 234, "biu": 234, "il": 234, "amirgi": 234, "ctmcnote": 234, "bernoulliprocess": 234, "joint_distribut": 234, "jointdistributionhandmad": 234, "r966": 234, "bernoulli_process": 234, "r967": 234, "mathc": 234, "clarku": 234, "djoyc": 234, "ma217": 234, "given_condit": 234, "poissonprocess": 234, "648": 234, "r968": 234, "11_0_0_intro": 234, "r969": 234, "poisson_point_process": 234, "wiener": 234, "brownian": 234, "scottish": 234, "botanist": 234, "r970": 234, "11_4_0_brownian_motion_wiener_process": 234, "r971": 234, "wiener_process": 234, "gammaprocess": 234, "jump": [234, 291], "472": 234, "r972": 234, "gamma_process": 234, "matrixgamma": 234, "scale_matrix": 234, "r973": 234, "matrix_gamma_distribut": 234, "wishart": 234, "r974": 234, "wishart_distribut": 234, "matrixnorm": 234, "location_matrix": 234, "scale_matrix_1": 234, "scale_matrix_2": 234, "r975": 234, "matrix_normal_distribut": 234, "compound_rv": 234, "compounddistribut": 234, "crv_type": 234, "r976": 234, "compound_probability_distribut": 234, "numsampl": 234, "evaluate_integr": 234, "r977": 234, "entropy_": 234, "28information_theori": 234, "r978": 234, "crmarsh": 234, "charles_marsh_continuous_entropi": 234, "r979": 234, "entropypost": 234, "cexpr": 234, "coskew": 234, "sigma_": 234, "r980": 234, "r981": 234, "probability_distribut": 234, "randomst": 234, "die_rol": 234, "samp": 234, "pspace": 234, "samp_list": 234, "sam": 234, "42519758": 234, "40207856": 234, "94991743": 234, "85819627": 234, "83403519": 234, "9412172": 234, "85768055": 234, "38954165": 234, "11163337": 234, "3176591": 234, "79115232": 234, "63232916": 234, "01747268": 234, "96716083": 234, "sampling_p": 234, "sampling_": 234, "factorial_mo": 234, "r982": 234, "r983": 234, "factorialmo": 234, "kurtosi": 234, "outlier": 234, "sigma_x": 234, "r984": 234, "r985": 234, "asymmetri": 234, "pearson": 234, "sampling_dens": 234, "centralmo": 234, "cmoment": 234, "expectationmatrix": 234, "randommatrixsymbol": 234, "n11": 234, "n12": 234, "n21": 234, "n22": 234, "variancematrix": 234, "crosscovariancematrix": 234, "randomdomain": 234, "singledomain": 234, "singlepspac": 234, "productdomain": 234, "productpspac": 234, "conditionaldomain": 234, "frv": 234, "finitedomain": 234, "finitepspac": 234, "crv": 234, "continuousdomain": 234, "continuouspspac": 234, "diepspac": 234, "singlefinitepspac": 234, "normalpspac": 234, "singlecontinuouspspac": 234, "frv_type": 234, "randomvari": 234, "tactic": 234, "random_symbol": 234, "rs_swap": 234, "pspace1": 234, "pspace2": 234, "immutabledensendimarrai": 235, "tomatrix": 235, "j_m": 235, "i_a": 235, "i_b": 235, "sum_k": 235, "tensorcontract": [235, 236], "arraycontract": [235, 236], "tensordiagon": [235, 236], "derive_by_arrai": 235, "sum_m": 235, "immutablesparsendimarrai": 235, "mutabledensendimarrai": 235, "mutablesparsendimarrai": 235, "array_der": [235, 236], "index_order_old": [235, 236], "index_order_new": [235, 236], "cab": 235, "array_express": 235, "contraction_ax": 235, "diagonal_ax": 235, "arraydiagon": [235, 236], "arraysymbol": 236, "convert_indexed_to_arrai": 236, "arrayadd": 236, "convert_matrix_to_arrai": 236, "convert_array_to_matrix": 236, "expr_tr": 236, "contraction_indic": 236, "diagonal_indic": 236, "adi": 236, "from_array_to_matrix": 236, "ijklm": 236, "kijml": 236, "perm1": 236, "perm2": 236, "index_method": 238, "get_contraction_structur": [238, 239], "deepest": 238, "nested_contract": 238, "get_indic": [238, 239, 240, 241], "indexconformanceexcept": 238, "______": 239, "stem": 239, "dim1": 239, "dim2": 239, "qwerti": 239, "a_ij": 239, "b_ij": 239, "syntact": 239, "a_real": 239, "c_inherit": 239, "c_explicit": 239, "unrol": 239, "tensorindextyp": [240, 241], "eps_dim": 240, "metric_nam": 240, "su": 240, "lorentz": 240, "tensor_index_typ": 240, "is_up": 240, "tensor_inde_typ": 240, "typ": 240, "tensorhead": [240, 241], "index_typ": 240, "tensorsymmetri": 240, "monoterm": 240, "_tensormanag": 240, "set_comm": 240, "asym2": 240, "fully_symmetr": 240, "tensori": [240, 241], "e_z": 240, "no_symmetri": 240, "p_x": 240, "p_y": 240, "p_z": 240, "ipos1": 240, "ipos2": 240, "icomp1": 240, "icomp2": 240, "nameless": 240, "replacement_dict": 240, "free_arg": 240, "addend": 240, "canon_bp": 240, "contract_metr": 240, "contract_al": 240, "ipo": 240, "icomp": 240, "nonrep": 240, "dum": 240, "ext_rank": 240, "is_canon_bp": 240, "get_free_indic": [240, 241], "perm2tensor": 240, "tid": 240, "sorted_compon": 240, "riemann_cyclic_replac": 240, "riemann_cycl": 240, "cadabra": 240, "multiterm": 240, "bianchi": 240, "sym2": 240, "direct_product": 240, "monotorem": 240, "tableaux": 240, "tensortyp": 240, "repetit": [240, 252], "tensormanag": 240, "comm_i2symbol": 240, "comm_symbols2i": 240, "get_comm": 240, "gcomm": 240, "ghcomm": 240, "toper": 241, "partialderiv": 241, "valenc": 241, "uncontract": 241, "compa": 241, "compb": 241, "derivand": 241, "nocache_fail": 243, "expectedexcept": 243, "exceptioninfo": 243, "abort": 243, "9999": 243, "skip_under_pyodid": 243, "pyodid": 243, "warningcl": [243, 250], "randtest": 244, "portabl": [245, 246], "pytestreport": 245, "force_color": 245, "readlin": 245, "sympydoctestfind": 245, "doctestpars": 245, "exclude_empti": 245, "sympydoctestrunn": 245, "checker": 245, "optionflag": 245, "5140": 245, "doctestrunn": 245, "clear_glob": 245, "writer": 245, "garbag": 245, "check_output": 245, "report_": 245, "sympyoutputcheck": 245, "outputcheck": 245, "stdlib": 245, "testrunn": 245, "sympytestresult": 245, "convert_to_native_path": 245, "lst": 245, "blacklist": 245, "get_sympy_dir": 245, "raise_on_deprec": 245, "deprecationwarn": [245, 250], "run_all_test": 245, "test_arg": 245, "test_kwarg": 245, "doctest_arg": 245, "doctest_kwarg": 245, "examples_arg": 245, "examples_kwarg": 245, "run_in_subprocess_with_hash_random": 245, "function_kwarg": 245, "hostedtoolcach": 245, "x64": 245, "_test": 245, "split_list": 245, "sympytestfil": 245, "module_rel": 245, "extraglob": 245, "raise_on_error": 245, "basenam": [245, 246, 247], "slate": 245, "dont_accept_true_for_1": 245, "dont_accept_blanklin": 245, "normalize_whitespac": 245, "ellipsi": [245, 253], "ignore_exception_detail": 245, "report_udiff": 245, "report_cdiff": 245, "report_ndiff": 245, "report_only_first_failur": 245, "mortem": 245, "tomfooleri": 245, "testmod": 245, "tester": 245, "fiddl": [245, 291], "timeout": 245, "keyboardinterrupt": 245, "interrupt": 245, "_basic": 245, "kw": 245, "test_equ": 245, "pdb": 245, "pipe": 245, "time_bal": 245, "tandem": 246, "matvec": 246, "codewrapp": 246, "distutil": 246, "fwrap": 246, "swig": 246, "binary_cal": 246, "22925376": 246, "25165824": 246, "_imp_": [246, 253], "filepath": 246, "cythoncodewrapp": 246, "dump_pyx": 246, "dummywrapp": 246, "f2pycodewrapp": 246, "ufuncifycodewrapp": 246, "dump_c": [246, 247], "code_gen": [246, 247], "argument_tupl": 246, "include_dir": 246, "library_dir": 246, "extra_compile_arg": 246, "extra_link_arg": 246, "symfunc": [246, 253], "funtion_nam": 246, "ndimension": 246, "f_fortran": 246, "f_cython": 246, "r986": 246, "fortran77": 247, "fortran90": 247, "julia": 247, "rust": 247, "mileston": 247, "unsurmount": 247, "pyf": 247, "inputoutput": 247, "tcc": 247, "libtcc": 247, "date": 247, "hostnam": 247, "sha1": 247, "ccodegen": 247, "preprocessor_stat": 247, "dump_h": 247, "guard": 247, "get_prototyp": 247, "codegenerror": 247, "function_prototyp": 247, "dump_cod": 247, "cname": 247, "fname": 247, "pynam": 247, "jlname": 247, "octnam": 247, "rsname": 247, "fcodegen": 247, "f90": 247, "dump_f95": 247, "get_interfac": 247, "juliacodegen": 247, "dump_jl": 247, "octavecodegen": 247, "dump_m": 247, "returnvalu": 247, "destin": 247, "local_var": 247, "result_vari": 247, "unnam": 247, "rustcodegen": 247, "dump_r": 247, "f_result": 247, "myfcn": 247, "fcn2": 247, "myfcn_result": 247, "void": 247, "get_default_datatyp": 247, "complex_allow": 247, "agnost": 247, "conserve_mpmath_dp": 248, "disable_view": 248, "python_vers": 248, "memoize_properti": 248, "propfunc": 248, "no_attrs_in_subclass": 248, "__all__": 248, "some_funct": 248, "thread": 248, "xthread": 248, "threaded_factori": 248, "use_add": 248, "multiset_partitions_taocp": 249, "visitor": 249, "pstack": 249, "lpart": 249, "topmost": 249, "partcompon": 249, "peek": [249, 291], "unpredict": 249, "list_visitor": 249, "abb": [249, 252], "factoring_visitor": 249, "multisetpartitiontravers": 249, "aocp": 249, "count_partit": 249, "127750": 249, "686": 249, "4a": 249, "factorisatio": 249, "oppenheim": 249, "numerorum": 249, "canfield": 249, "erdo": 249, "OF": 249, "yorgei": 249, "monad": 249, "persist": 249, "288716": 249, "memoiz": [249, 251, 278], "dramat": 249, "hypothet": 249, "borrow": 249, "coalesc": 249, "_rang": 249, "stretch": 249, "brain": 249, "histogram": 249, "enum_al": 249, "enum_larg": 249, "enum_rang": 249, "enum_smal": 249, "ub": 249, "parti": 250, "catch_warn": 250, "simplefilt": 250, "dedent": [250, 255], "miscellan": [251, 278], "pkgdata": [251, 278], "notiter": 252, "binary_partit": 252, "r987": 252, "taocp": 252, "nx": 252, "common_prefix": 252, "common_suffix": 252, "unhash": 252, "r988": 252, "component_": 252, "28graph_theori": 252, "r989": 252, "27s_strongly_connected_components_algorithm": 252, "dict_merg": 252, "filter_symbol": 252, "myop": 252, "kog": 252, "informatik": 252, "hamburg": 252, "mein": 252, "python_trick": 252, "neighbor": 252, "xxxxxx": 252, "xxxx": 252, "r990": 252, "method_ring": 252, "r991": 252, "4856615": 252, "4857018": 252, "r992": 252, "20160313023044": 252, "programminggeek": 252, "r993": 252, "steinhau": 252, "93johnson": 252, "93trotter_algorithm": 252, "r994": 252, "involut": 252, "eco": 252, "vajnovszki": 252, "dmtc": 252, "generate_involut": 252, "r995": 252, "permutationinvolut": 252, "generate_oriented_forest": 252, "forest": 252, "acycl": 252, "r996": 252, "beyer": 252, "hedetniemi": 252, "novemb": 252, "r997": 252, "1633833": 252, "has_dup": 252, "has_varieti": 252, "iproduct": 252, "abcbb": 252, "is_sequ": 252, "generatortyp": 252, "_iter": 252, "kbin": 252, "ordered_flag": 252, "least_rot": 252, "rotate_left": 252, "r998": 252, "lexicographically_minimal_string_rot": 252, "minlex": 252, "acb": 252, "11010011000": 252, "00011010011": 252, "00011001011": 252, "aaa": 252, "abi": 252, "bby": 252, "abracadabra": 252, "banana": 252, "multiset_derang": 252, "uniq": 252, "1233": 252, "3312": 252, "3321": 252, "aba": 252, "baa": 252, "bead": 252, "ooo": 252, "r999": 252, "r1000": 252, "carla": 252, "savag": 252, "terri": 252, "yih": 252, "414": 252, "430": 252, "0196": 252, "6774": 252, "90047": 252, "ordered_partit": 252, "r1001": 252, "jeromekelleh": 252, "r1002": 252, "jerom": 252, "kelleh": 252, "barri": 252, "sullivan": 252, "0909": 252, "2331v2": 252, "r1003": 252, "activest": 252, "218332": 252, "random_derang": 252, "reseed": 252, "rotate_right": 252, "roundrobin": 252, "ef": 252, "credit": 252, "sakki": 252, "sequence_partit": 252, "l_m": 252, "kleen": 252, "enricogiampieri": 252, "13131491": 252, "sequence_partitions_empti": 252, "keyfunc": 252, "subgraph": 252, "r1004": 252, "r1005": 252, "longest": 252, "r1006": 252, "unflatten": 252, "bcd": 252, "afunc": 253, "lambdastr": 253, "dummifi": 253, "use_imp": 253, "docstring_limit": 253, "custom_sin": 253, "spent": 253, "38177329": 253, "49315059": 253, "8414709848078965": 253, "enable_eager_execut": 253, "eagertensor": 253, "__class__": 253, "placehold": 253, "numexpr3": 253, "user_guid": 253, "runtimewarn": 253, "sin_cos_sympi": 253, "sin_co": 253, "sin_cos_numpi": 253, "38177329068": 253, "module_dictionari": 253, "getsourc": 253, "_lambdifygener": 253, "__globals__": 253, "lambdaprint": 253, "90929743": [253, 280], "assoc_recurrence_memo": 254, "base_seq": 254, "memo": 254, "pn0": 254, "recurrence_memo": 254, "specfun": 254, "__index__": 255, "sanit": 255, "99999999999999991611392": 255, "debug_decor": 255, "debugf": 255, "fillded": 255, "strline": 255, "rawlin": 255, "find_execut": 255, "pathsep": 255, "pastabl": 255, "bee": 255, "spamham": 255, "sha": 255, "egg": 255, "md5": 255, "eggsham": 255, "r1007": 255, "6116978": 255, "substr": 255, "roken": 255, "deletechar": 255, "multicharact": 255, "oldchar": 255, "newchar": 255, "acquir": 256, "getresourc": 256, "pkgname": 256, "pkgpath": 256, "dirnam": 256, "normpath": 256, "__loader__": 256, "stringio": 256, "get_resourc": 256, "ioerror": 256, "mydata": 256, "mypkgdata": 256, "jpg": 256, "get_class": 257, "lookup_view": 257, "get_mod_func": 257, "callback": 257, "timeutil": 258, "coordsysrect": 259, "coordsys3d": [259, 261, 262, 263, 265, 266, 269], "rotation_matrix": [259, 261, 264], "vector_nam": 259, "variable_nam": [259, 266], "latex_vect": 259, "pretty_vect": 259, "latex_scalar": 259, "pretty_scalar": 259, "new_system": 259, "create_new": [259, 264], "transformation_to_par": 259, "transformation_from_par": 259, "locate_new": [259, 262, 263, 264, 265, 266], "position_wrt": [259, 263, 264, 265], "orient_new": [259, 261], "axisorient": [259, 261, 264], "axis_orient": [259, 264], "bodyorient": [259, 261, 264], "body_orient": [259, 261, 264], "spaceorient": [259, 261, 264], "space_orient": [259, 261], "quaternionorient": [259, 261, 264], "q_orient": [259, 261], "orient_new_axi": [259, 262, 264], "orient_new_bodi": [259, 264], "angle1": [259, 261], "angle2": [259, 261], "angle3": [259, 261], "euler_angl": [259, 261], "orient_new_quaternion": [259, 264], "orient_new_spac": [259, 264], "coordsyrect": 259, "v_a": 259, "v_b": 259, "scalar_map": 259, "basevector": [259, 263, 264], "delop": [259, 265, 266], "r1008": 259, "r1009": 259, "basedyad": [259, 263], "second_system": 259, "deloper": [259, 267], "parametricregion": [259, 262, 269], "implicitregion": [259, 262, 269], "parabola": 259, "rational_parametr": 259, "singular_point": 259, "regular_point": 259, "reg_point": 259, "cubic_curv": 259, "calulc": 259, "hoffmann": 259, "purdu": 259, "lib": 259, "cgi": 259, "viewcont": 259, "1827": 259, "cstech": 259, "erik": 259, "hillgart": 259, "diploma": 259, "linz": 259, "universitat": 259, "risc_1355": 259, "20point": 259, "20on": 259, "20conic": 259, "parametricintegr": 259, "semispher": [259, 269], "axis_orienter1": 261, "axis_orienter2": 261, "axis_orienter3": 261, "body_orienter1": 261, "body_orienter2": 261, "body_orienter3": 261, "matrix_to_vector": 262, "system2": 262, "vector_integr": [262, 269], "essenc": 263, "vectormul": 263, "vectoradd": 263, "ofcours": 263, "vectorzero": 263, "expressli": 263, "express_coordin": [263, 264], "dyadicmul": 263, "dyadicadd": 263, "cleanest": 264, "orient_new_": 264, "basescalar": [264, 266], "oabc": 265, "oa": 265, "pq": 265, "sr": 265, "wikidel": 265, "ffield": 265, "gradient_field": 266, "instantan": 266, "directional_deriv": 266, "lame": 266, "dyadicproduct": 267, "quantifi": 268, "necesssari": 269, "param_circl": 269, "implicit_circl": 269, "obextj": 269, "solidspher": 269, "lamina": 269, "\ud835\udc45": 269, "cylind": 269, "vectorfield": 269, "hemispher": 269, "top_fac": 269, "bottom_fac": 269, "27_theorem": 269, "cone": 269, "divergence_theorem": 269, "12288": 269, "truss": 276, "str_expr": 280, "82842712474619": 280, "141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117068": 280, "0874989834394464": 280, "roundoff": 280, "14112001": 280, "7568025": 280, "95892427": 280, "2794155": 280, "6569866": 280, "98935825": 280, "41211849": 280, "0998334166468": 280, "sympy_nam": 280, "numerical_funct": 280, "rephras": 281, "oh": 281, "integration_vari": 281, "dfdx": 281, "equidistantli": 281, "d2fdx2": 281, "django": 283, "oop": 283, "crazi": 283, "abcdef": 283, "reevalu": 283, "infal": 283, "entertain": 284, "preliminari": 284, "82842712475": 285, "cass": 285, "wrote": [285, 286], "theme": 285, "expanded_expr": 285, "whet": 285, "appetit": 285, "c\u2082": [285, 292], "c\u2081": [285, 292], "\u03bd": 285, "sell": 285, "battl": 285, "confid": 285, "gigabyt": 285, "tear": 286, "stopper": 286, "uexpr": 286, "algebraic_multipl": 287, "pdp": 287, "undertest": 287, "underevalu": 287, "my_iszero": 287, "stronger": 287, "tradeoff": 287, "wonder": 287, "5b7c3e8ee5b40332abdb206c": 287, "15141": 287, "19548": 287, "10120": 287, "10279": 287, "constant_problem": 287, "possiblezeroq": 287, "20200307091449": 287, "mupad_ref": 287, "iszero": 287, "congratul": 288, "decent": 289, "austin": 289, "javascript": 290, "bvar": 290, "unnecessarili": 291, "whittl": 291, "catchal": 291, "collected_expr": 291, "cdot1": 291, "undertak": 291, "undon": 291, "cdot2": 291, "nck": 291, "pronounc": 291, "_2f_1": 291, "cfrac": 291, "list_to_frac": 291, "a\u2080": 291, "a\u2083": 291, "a\u2084": 291, "pointless": 291, "orig_frac": 291, "diffeq": 292}, "objects": {"": [[35, 0, 0, "-", "sympy"]], "sympy": [[37, 0, 0, "-", "abc"], [38, 0, 0, "-", "algebras"], [41, 0, 0, "-", "assumptions"], [44, 0, 0, "-", "calculus"], [45, 0, 0, "-", "categories"], [67, 0, 0, "-", "diffgeom"], [68, 0, 0, "-", "discrete"], [72, 0, 0, "-", "functions"], [85, 0, 0, "-", "holonomic"], [92, 0, 0, "-", "integrals"], [93, 0, 0, "-", "interactive"], [94, 0, 0, "-", "liealgebras"], [95, 0, 0, "-", "logic"], [100, 0, 0, "-", "matrices"], [107, 0, 0, "-", "parsing"], [276, 0, 0, "-", "physics"], [210, 0, 0, "-", "polys"], [232, 0, 0, "-", "solvers"], [234, 0, 0, "-", "stats"], [237, 0, 0, "-", "tensor"], [242, 0, 0, "-", "testing"], [251, 0, 0, "-", "utilities"], [267, 0, 0, "-", "vector"]], "sympy.algebras": [[38, 1, 1, "", "Quaternion"]], "sympy.algebras.Quaternion": [[38, 2, 1, "", "add"], [38, 2, 1, "", "angle"], [38, 2, 1, "", "arc_coplanar"], [38, 2, 1, "", "axis"], [38, 2, 1, "", "exp"], [38, 2, 1, "", "from_Matrix"], [38, 2, 1, "", "from_axis_angle"], [38, 2, 1, "", "from_euler"], [38, 2, 1, "", "from_rotation_matrix"], [38, 2, 1, "", "index_vector"], [38, 2, 1, "", "integrate"], [38, 2, 1, "", "inverse"], [38, 2, 1, "", "is_pure"], [38, 2, 1, "", "is_zero_quaternion"], [38, 2, 1, "", "mensor"], [38, 2, 1, "", "mul"], [38, 2, 1, "", "norm"], [38, 2, 1, "", "normalize"], [38, 2, 1, "", "orthogonal"], [38, 2, 1, "", "parallel"], [38, 2, 1, "", "pow"], [38, 2, 1, "", "pow_cos_sin"], [38, 3, 1, "", "product_matrix_left"], [38, 3, 1, "", "product_matrix_right"], [38, 2, 1, "", "rotate_point"], [38, 2, 1, "", "scalar_part"], [38, 2, 1, "", "set_norm"], [38, 2, 1, "", "to_Matrix"], [38, 2, 1, "", "to_axis_angle"], [38, 2, 1, "", "to_euler"], [38, 2, 1, "", "to_rotation_matrix"], [38, 2, 1, "", "vector_coplanar"], [38, 2, 1, "", "vector_part"]], "sympy.assumptions": [[39, 0, 0, "-", "ask"], [40, 0, 0, "-", "assume"], [42, 0, 0, "-", "predicates"], [43, 0, 0, "-", "refine"]], "sympy.assumptions.ask": [[39, 1, 1, "", "AssumptionKeys"], [39, 4, 1, "", "ask"], [39, 4, 1, "", "register_handler"], [39, 4, 1, "", "remove_handler"]], "sympy.assumptions.assume": [[40, 1, 1, "", "AppliedPredicate"], [40, 1, 1, "", "AssumptionsContext"], [40, 1, 1, "", "Predicate"], [40, 1, 1, "", "UndefinedPredicate"], [40, 4, 1, "", "assuming"]], "sympy.assumptions.assume.AppliedPredicate": [[40, 3, 1, "", "arg"], [40, 3, 1, "", "arguments"], [40, 3, 1, "", "function"]], "sympy.assumptions.assume.AssumptionsContext": [[40, 2, 1, "", "add"]], "sympy.assumptions.assume.Predicate": [[40, 2, 1, "", "eval"], [40, 5, 1, "", "handler"], [40, 2, 1, "", "register"], [40, 2, 1, "", "register_many"]], "sympy.assumptions.predicates.calculus": [[42, 1, 1, "", "FinitePredicate"], [42, 1, 1, "", "InfinitePredicate"]], "sympy.assumptions.predicates.calculus.FinitePredicate": [[42, 5, 1, "", "handler"]], "sympy.assumptions.predicates.calculus.InfinitePredicate": [[42, 5, 1, "", "handler"]], "sympy.assumptions.predicates.common": [[42, 1, 1, "", "CommutativePredicate"], [42, 1, 1, "", "IsTruePredicate"]], "sympy.assumptions.predicates.common.CommutativePredicate": [[42, 5, 1, "", "handler"]], "sympy.assumptions.predicates.common.IsTruePredicate": [[42, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices": [[42, 1, 1, "", "ComplexElementsPredicate"], [42, 1, 1, "", "DiagonalPredicate"], [42, 1, 1, "", "FullRankPredicate"], [42, 1, 1, "", "IntegerElementsPredicate"], [42, 1, 1, "", "InvertiblePredicate"], [42, 1, 1, "", "LowerTriangularPredicate"], [42, 1, 1, "", "NormalPredicate"], [42, 1, 1, "", "OrthogonalPredicate"], [42, 1, 1, "", "PositiveDefinitePredicate"], [42, 1, 1, "", "RealElementsPredicate"], [42, 1, 1, "", "SingularPredicate"], [42, 1, 1, "", "SquarePredicate"], [42, 1, 1, "", "SymmetricPredicate"], [42, 1, 1, "", "TriangularPredicate"], [42, 1, 1, "", "UnitTriangularPredicate"], [42, 1, 1, "", "UnitaryPredicate"], [42, 1, 1, "", "UpperTriangularPredicate"]], "sympy.assumptions.predicates.matrices.ComplexElementsPredicate": [[42, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.DiagonalPredicate": [[42, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.FullRankPredicate": [[42, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.IntegerElementsPredicate": [[42, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.InvertiblePredicate": [[42, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.LowerTriangularPredicate": [[42, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.NormalPredicate": [[42, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.OrthogonalPredicate": [[42, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.PositiveDefinitePredicate": [[42, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.RealElementsPredicate": [[42, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.SingularPredicate": [[42, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.SquarePredicate": [[42, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.SymmetricPredicate": [[42, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.TriangularPredicate": [[42, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.UnitTriangularPredicate": [[42, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.UnitaryPredicate": [[42, 5, 1, "", "handler"]], "sympy.assumptions.predicates.matrices.UpperTriangularPredicate": [[42, 5, 1, "", "handler"]], "sympy.assumptions.predicates.ntheory": [[42, 1, 1, "", "CompositePredicate"], [42, 1, 1, "", "EvenPredicate"], [42, 1, 1, "", "OddPredicate"], [42, 1, 1, "", "PrimePredicate"]], "sympy.assumptions.predicates.ntheory.CompositePredicate": [[42, 5, 1, "", "handler"]], "sympy.assumptions.predicates.ntheory.EvenPredicate": [[42, 5, 1, "", "handler"]], "sympy.assumptions.predicates.ntheory.OddPredicate": [[42, 5, 1, "", "handler"]], "sympy.assumptions.predicates.ntheory.PrimePredicate": [[42, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order": [[42, 1, 1, "", "NegativePredicate"], [42, 1, 1, "", "NonNegativePredicate"], [42, 1, 1, "", "NonPositivePredicate"], [42, 1, 1, "", "NonZeroPredicate"], [42, 1, 1, "", "PositivePredicate"], [42, 1, 1, "", "ZeroPredicate"]], "sympy.assumptions.predicates.order.NegativePredicate": [[42, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order.NonNegativePredicate": [[42, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order.NonPositivePredicate": [[42, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order.NonZeroPredicate": [[42, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order.PositivePredicate": [[42, 5, 1, "", "handler"]], "sympy.assumptions.predicates.order.ZeroPredicate": [[42, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets": [[42, 1, 1, "", "AlgebraicPredicate"], [42, 1, 1, "", "AntihermitianPredicate"], [42, 1, 1, "", "ComplexPredicate"], [42, 1, 1, "", "ExtendedRealPredicate"], [42, 1, 1, "", "HermitianPredicate"], [42, 1, 1, "", "ImaginaryPredicate"], [42, 1, 1, "", "IntegerPredicate"], [42, 1, 1, "", "IrrationalPredicate"], [42, 1, 1, "", "RationalPredicate"], [42, 1, 1, "", "RealPredicate"], [42, 1, 1, "", "TranscendentalPredicate"]], "sympy.assumptions.predicates.sets.AlgebraicPredicate": [[42, 5, 1, "", "AlgebraicHandler"], [42, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.AntihermitianPredicate": [[42, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.ComplexPredicate": [[42, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.ExtendedRealPredicate": [[42, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.HermitianPredicate": [[42, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.ImaginaryPredicate": [[42, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.IntegerPredicate": [[42, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.IrrationalPredicate": [[42, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.RationalPredicate": [[42, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.RealPredicate": [[42, 5, 1, "", "handler"]], "sympy.assumptions.predicates.sets.TranscendentalPredicate": [[42, 5, 1, "", "handler"]], "sympy.assumptions.refine": [[43, 4, 1, "", "refine"], [43, 4, 1, "", "refine_Pow"], [43, 4, 1, "", "refine_abs"], [43, 4, 1, "", "refine_arg"], [43, 4, 1, "", "refine_atan2"], [43, 4, 1, "", "refine_im"], [43, 4, 1, "", "refine_matrixelement"], [43, 4, 1, "", "refine_re"], [43, 4, 1, "", "refine_sign"]], "sympy.calculus": [[44, 0, 0, "-", "euler"], [44, 0, 0, "-", "finite_diff"], [44, 0, 0, "-", "singularities"], [44, 0, 0, "-", "util"]], "sympy.calculus.euler": [[44, 4, 1, "", "euler_equations"]], "sympy.calculus.finite_diff": [[44, 4, 1, "", "apply_finite_diff"], [44, 4, 1, "", "differentiate_finite"], [44, 4, 1, "", "finite_diff_weights"]], "sympy.calculus.singularities": [[44, 4, 1, "", "is_decreasing"], [44, 4, 1, "", "is_increasing"], [44, 4, 1, "", "is_monotonic"], [44, 4, 1, "", "is_strictly_decreasing"], [44, 4, 1, "", "is_strictly_increasing"], [44, 4, 1, "", "monotonicity_helper"], [44, 4, 1, "", "singularities"]], "sympy.calculus.util": [[44, 4, 1, "", "continuous_domain"], [44, 4, 1, "", "function_range"], [44, 4, 1, "", "is_convex"], [44, 4, 1, "", "lcim"], [44, 4, 1, "", "maximum"], [44, 4, 1, "", "minimum"], [44, 4, 1, "", "not_empty_in"], [44, 4, 1, "", "periodicity"], [44, 4, 1, "", "stationary_points"]], "sympy.categories": [[45, 1, 1, "", "Category"], [45, 1, 1, "", "CompositeMorphism"], [45, 1, 1, "", "Diagram"], [45, 1, 1, "", "IdentityMorphism"], [45, 1, 1, "", "Morphism"], [45, 1, 1, "", "NamedMorphism"], [45, 1, 1, "", "Object"], [45, 0, 0, "-", "diagram_drawing"]], "sympy.categories.Category": [[45, 3, 1, "", "commutative_diagrams"], [45, 3, 1, "", "name"], [45, 3, 1, "", "objects"]], "sympy.categories.CompositeMorphism": [[45, 3, 1, "", "codomain"], [45, 3, 1, "", "components"], [45, 3, 1, "", "domain"], [45, 2, 1, "", "flatten"]], "sympy.categories.Diagram": [[45, 3, 1, "", "conclusions"], [45, 2, 1, "", "hom"], [45, 2, 1, "", "is_subdiagram"], [45, 3, 1, "", "objects"], [45, 3, 1, "", "premises"], [45, 2, 1, "", "subdiagram_from_objects"]], "sympy.categories.Morphism": [[45, 3, 1, "", "codomain"], [45, 2, 1, "", "compose"], [45, 3, 1, "", "domain"]], "sympy.categories.NamedMorphism": [[45, 3, 1, "", "name"]], "sympy.categories.diagram_drawing": [[45, 1, 1, "", "ArrowStringDescription"], [45, 1, 1, "", "DiagramGrid"], [45, 1, 1, "", "XypicDiagramDrawer"], [45, 4, 1, "", "preview_diagram"], [45, 4, 1, "", "xypic_draw_diagram"]], "sympy.categories.diagram_drawing.DiagramGrid": [[45, 3, 1, "", "height"], [45, 3, 1, "", "morphisms"], [45, 3, 1, "", "width"]], "sympy.categories.diagram_drawing.XypicDiagramDrawer": [[45, 2, 1, "", "draw"]], "sympy.codegen": [[46, 0, 0, "-", "algorithms"], [46, 0, 0, "-", "approximations"], [46, 0, 0, "-", "ast"], [46, 0, 0, "-", "cfunctions"], [46, 0, 0, "-", "cnodes"], [46, 0, 0, "-", "cutils"], [46, 0, 0, "-", "cxxnodes"], [46, 0, 0, "-", "fnodes"], [46, 0, 0, "-", "futils"], [46, 0, 0, "-", "matrix_nodes"], [46, 0, 0, "-", "pyutils"], [46, 0, 0, "-", "rewriting"]], "sympy.codegen.algorithms": [[46, 4, 1, "", "newtons_method"], [46, 4, 1, "", "newtons_method_function"]], "sympy.codegen.approximations": [[46, 1, 1, "", "SeriesApprox"], [46, 1, 1, "", "SumApprox"]], "sympy.codegen.ast": [[46, 1, 1, "", "Assignment"], [46, 1, 1, "", "AssignmentBase"], [46, 1, 1, "", "Attribute"], [46, 1, 1, "", "AugmentedAssignment"], [46, 1, 1, "", "BreakToken"], [46, 1, 1, "", "CodeBlock"], [46, 1, 1, "", "Comment"], [46, 1, 1, "", "ComplexType"], [46, 1, 1, "", "ContinueToken"], [46, 1, 1, "", "Declaration"], [46, 1, 1, "", "Element"], [46, 1, 1, "", "FloatBaseType"], [46, 1, 1, "", "FloatType"], [46, 1, 1, "", "For"], [46, 1, 1, "", "FunctionCall"], [46, 1, 1, "", "FunctionDefinition"], [46, 1, 1, "", "FunctionPrototype"], [46, 1, 1, "", "IntBaseType"], [46, 1, 1, "", "Node"], [46, 1, 1, "", "NoneToken"], [46, 1, 1, "", "Pointer"], [46, 1, 1, "", "Print"], [46, 1, 1, "", "QuotedString"], [46, 1, 1, "", "Return"], [46, 1, 1, "", "Scope"], [46, 1, 1, "", "SignedIntType"], [46, 1, 1, "", "Stream"], [46, 1, 1, "", "String"], [46, 1, 1, "", "Token"], [46, 1, 1, "", "Type"], [46, 1, 1, "", "UnsignedIntType"], [46, 1, 1, "", "Variable"], [46, 1, 1, "", "While"], [46, 4, 1, "", "aug_assign"]], "sympy.codegen.ast.CodeBlock": [[46, 2, 1, "", "cse"], [46, 2, 1, "", "topological_sort"]], "sympy.codegen.ast.FloatBaseType": [[46, 5, 1, "", "cast_nocheck"]], "sympy.codegen.ast.FloatType": [[46, 2, 1, "", "cast_nocheck"], [46, 3, 1, "", "decimal_dig"], [46, 3, 1, "", "dig"], [46, 3, 1, "", "eps"], [46, 3, 1, "", "max"], [46, 3, 1, "", "max_exponent"], [46, 3, 1, "", "min_exponent"], [46, 3, 1, "", "tiny"]], "sympy.codegen.ast.Node": [[46, 2, 1, "", "attr_params"]], "sympy.codegen.ast.Token": [[46, 2, 1, "", "kwargs"]], "sympy.codegen.ast.Type": [[46, 2, 1, "", "cast_check"], [46, 2, 1, "", "from_expr"]], "sympy.codegen.ast.Variable": [[46, 2, 1, "", "as_Declaration"], [46, 2, 1, "", "deduced"]], "sympy.codegen.cfunctions": [[46, 1, 1, "", "Cbrt"], [46, 1, 1, "", "Sqrt"], [46, 1, 1, "", "exp2"], [46, 1, 1, "", "expm1"], [46, 1, 1, "", "fma"], [46, 1, 1, "", "hypot"], [46, 1, 1, "", "log10"], [46, 1, 1, "", "log1p"], [46, 1, 1, "", "log2"]], "sympy.codegen.cfunctions.Cbrt": [[46, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.Sqrt": [[46, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.exp2": [[46, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.expm1": [[46, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.fma": [[46, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.hypot": [[46, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.log10": [[46, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.log1p": [[46, 2, 1, "", "fdiff"]], "sympy.codegen.cfunctions.log2": [[46, 2, 1, "", "fdiff"]], "sympy.codegen.cnodes": [[46, 1, 1, "", "CommaOperator"], [46, 1, 1, "", "Label"], [46, 1, 1, "", "PostDecrement"], [46, 1, 1, "", "PostIncrement"], [46, 1, 1, "", "PreDecrement"], [46, 1, 1, "", "PreIncrement"], [46, 4, 1, "", "alignof"], [46, 1, 1, "", "goto"], [46, 4, 1, "", "sizeof"], [46, 1, 1, "", "struct"], [46, 1, 1, "", "union"]], "sympy.codegen.cutils": [[46, 4, 1, "", "render_as_source_file"]], "sympy.codegen.cxxnodes": [[46, 1, 1, "", "using"]], "sympy.codegen.fnodes": [[46, 1, 1, "", "ArrayConstructor"], [46, 1, 1, "", "Do"], [46, 1, 1, "", "Extent"], [46, 1, 1, "", "FortranReturn"], [46, 1, 1, "", "GoTo"], [46, 1, 1, "", "ImpliedDoLoop"], [46, 1, 1, "", "Module"], [46, 1, 1, "", "Program"], [46, 1, 1, "", "Subroutine"], [46, 1, 1, "", "SubroutineCall"], [46, 4, 1, "", "allocated"], [46, 4, 1, "", "array"], [46, 4, 1, "", "bind_C"], [46, 1, 1, "", "cmplx"], [46, 4, 1, "", "dimension"], [46, 1, 1, "", "dsign"], [46, 1, 1, "", "isign"], [46, 1, 1, "", "kind"], [46, 4, 1, "", "lbound"], [46, 1, 1, "", "literal_dp"], [46, 1, 1, "", "literal_sp"], [46, 1, 1, "", "merge"], [46, 4, 1, "", "reshape"], [46, 4, 1, "", "shape"], [46, 4, 1, "", "size"], [46, 1, 1, "", "use"], [46, 1, 1, "", "use_rename"]], "sympy.codegen.futils": [[46, 4, 1, "", "render_as_module"]], "sympy.codegen.matrix_nodes": [[46, 1, 1, "", "MatrixSolve"]], "sympy.codegen.pyutils": [[46, 4, 1, "", "render_as_module"]], "sympy.codegen.rewriting": [[46, 1, 1, "", "FuncMinusOneOptim"], [46, 1, 1, "", "Optimization"], [46, 1, 1, "", "ReplaceOptim"], [46, 4, 1, "", "create_expand_pow_optimization"], [46, 4, 1, "", "optimize"]], "sympy.codegen.rewriting.FuncMinusOneOptim": [[46, 2, 1, "", "replace_in_Add"]], "sympy.combinatorics": [[48, 0, 0, "-", "galois"], [57, 0, 0, "-", "generators"], [49, 0, 0, "-", "graycode"], [50, 0, 0, "-", "group_constructs"], [51, 0, 0, "-", "group_numbers"], [53, 0, 0, "-", "named_groups"], [54, 0, 0, "-", "partitions"], [56, 0, 0, "-", "perm_groups"], [57, 0, 0, "-", "permutations"], [58, 0, 0, "-", "polyhedron"], [59, 0, 0, "-", "prufer"], [60, 0, 0, "-", "subsets"], [61, 0, 0, "-", "tensor_can"], [62, 0, 0, "-", "testutil"], [63, 0, 0, "-", "util"]], "sympy.combinatorics.galois": [[48, 4, 1, "", "A4_in_S6"], [48, 4, 1, "", "A4xC2"], [48, 4, 1, "", "G18"], [48, 4, 1, "", "G36m"], [48, 4, 1, "", "G36p"], [48, 4, 1, "", "G72"], [48, 4, 1, "", "M20"], [48, 4, 1, "", "PGL2F5"], [48, 4, 1, "", "PSL2F5"], [48, 1, 1, "", "S1TransitiveSubgroups"], [48, 1, 1, "", "S2TransitiveSubgroups"], [48, 1, 1, "", "S3TransitiveSubgroups"], [48, 4, 1, "", "S3_in_S6"], [48, 1, 1, "", "S4TransitiveSubgroups"], [48, 4, 1, "", "S4m"], [48, 4, 1, "", "S4p"], [48, 4, 1, "", "S4xC2"], [48, 1, 1, "", "S5TransitiveSubgroups"], [48, 1, 1, "", "S6TransitiveSubgroups"], [48, 4, 1, "", "find_transitive_subgroups_of_S6"], [48, 4, 1, "", "four_group"]], "sympy.combinatorics.generators": [[57, 2, 1, "", "alternating"], [57, 2, 1, "", "cyclic"], [57, 2, 1, "", "dihedral"], [57, 2, 1, "", "symmetric"]], "sympy.combinatorics.graycode": [[49, 1, 1, "", "GrayCode"], [49, 2, 1, "", "bin_to_gray"], [49, 2, 1, "", "get_subset_from_bitstring"], [49, 2, 1, "", "gray_to_bin"], [49, 2, 1, "", "graycode_subsets"], [49, 2, 1, "", "random_bitstring"]], "sympy.combinatorics.graycode.GrayCode": [[49, 3, 1, "", "current"], [49, 2, 1, "", "generate_gray"], [49, 3, 1, "", "n"], [49, 2, 1, "", "next"], [49, 3, 1, "", "rank"], [49, 3, 1, "", "selections"], [49, 2, 1, "", "skip"], [49, 2, 1, "", "unrank"]], "sympy.combinatorics.group_constructs": [[50, 4, 1, "", "DirectProduct"]], "sympy.combinatorics.group_numbers": [[51, 4, 1, "", "is_abelian_number"], [51, 4, 1, "", "is_cyclic_number"], [51, 4, 1, "", "is_nilpotent_number"]], "sympy.combinatorics.named_groups": [[53, 4, 1, "", "AbelianGroup"], [53, 4, 1, "", "AlternatingGroup"], [53, 4, 1, "", "CyclicGroup"], [53, 4, 1, "", "DihedralGroup"], [53, 4, 1, "", "SymmetricGroup"]], "sympy.combinatorics.partitions": [[54, 1, 1, "", "IntegerPartition"], [54, 1, 1, "", "Partition"], [54, 4, 1, "", "RGS_enum"], [54, 4, 1, "", "RGS_generalized"], [54, 4, 1, "", "RGS_rank"], [54, 4, 1, "", "RGS_unrank"], [54, 4, 1, "", "random_integer_partition"]], "sympy.combinatorics.partitions.IntegerPartition": [[54, 2, 1, "", "as_dict"], [54, 2, 1, "", "as_ferrers"], [54, 3, 1, "", "conjugate"], [54, 2, 1, "", "next_lex"], [54, 2, 1, "", "prev_lex"]], "sympy.combinatorics.partitions.Partition": [[54, 3, 1, "", "RGS"], [54, 2, 1, "", "from_rgs"], [54, 3, 1, "", "partition"], [54, 3, 1, "", "rank"], [54, 2, 1, "", "sort_key"]], "sympy.combinatorics.perm_groups": [[56, 1, 1, "", "PermutationGroup"]], "sympy.combinatorics.perm_groups.PermutationGroup": [[56, 2, 1, "", "__contains__"], [56, 2, 1, "", "__mul__"], [56, 2, 1, "", "__new__"], [56, 5, 1, "", "__weakref__"], [56, 2, 1, "", "_coset_representative"], [56, 2, 1, "", "_distinct_primes_lemma"], [56, 3, 1, "", "_elements"], [56, 2, 1, "", "_eval_is_alt_sym_monte_carlo"], [56, 2, 1, "", "_eval_is_alt_sym_naive"], [56, 2, 1, "", "_p_elements_group"], [56, 2, 1, "", "_random_pr_init"], [56, 2, 1, "", "_sylow_alt_sym"], [56, 2, 1, "", "_union_find_merge"], [56, 2, 1, "", "_union_find_rep"], [56, 2, 1, "", "_verify"], [56, 2, 1, "", "abelian_invariants"], [56, 3, 1, "", "base"], [56, 2, 1, "", "baseswap"], [56, 3, 1, "", "basic_orbits"], [56, 3, 1, "", "basic_stabilizers"], [56, 3, 1, "", "basic_transversals"], [56, 2, 1, "", "center"], [56, 2, 1, "", "centralizer"], [56, 2, 1, "", "commutator"], [56, 2, 1, "", "composition_series"], [56, 2, 1, "", "conjugacy_class"], [56, 2, 1, "", "conjugacy_classes"], [56, 2, 1, "", "contains"], [56, 2, 1, "", "coset_factor"], [56, 2, 1, "", "coset_rank"], [56, 2, 1, "", "coset_table"], [56, 2, 1, "", "coset_transversal"], [56, 2, 1, "", "coset_unrank"], [56, 3, 1, "", "degree"], [56, 2, 1, "", "derived_series"], [56, 2, 1, "", "derived_subgroup"], [56, 3, 1, "", "elements"], [56, 2, 1, "", "equals"], [56, 2, 1, "", "generate"], [56, 2, 1, "", "generate_dimino"], [56, 2, 1, "", "generate_schreier_sims"], [56, 2, 1, "", "generator_product"], [56, 3, 1, "", "generators"], [56, 3, 1, "", "identity"], [56, 2, 1, "", "index"], [56, 3, 1, "", "is_abelian"], [56, 2, 1, "", "is_alt_sym"], [56, 3, 1, "", "is_alternating"], [56, 3, 1, "", "is_cyclic"], [56, 3, 1, "", "is_dihedral"], [56, 2, 1, "", "is_elementary"], [56, 3, 1, "", "is_nilpotent"], [56, 2, 1, "", "is_normal"], [56, 3, 1, "", "is_perfect"], [56, 3, 1, "", "is_polycyclic"], [56, 2, 1, "", "is_primitive"], [56, 3, 1, "", "is_solvable"], [56, 2, 1, "", "is_subgroup"], [56, 3, 1, "", "is_symmetric"], [56, 2, 1, "", "is_transitive"], [56, 3, 1, "", "is_trivial"], [56, 2, 1, "", "lower_central_series"], [56, 2, 1, "", "make_perm"], [56, 3, 1, "", "max_div"], [56, 2, 1, "", "minimal_block"], [56, 2, 1, "", "minimal_blocks"], [56, 2, 1, "", "normal_closure"], [56, 2, 1, "", "orbit"], [56, 2, 1, "", "orbit_rep"], [56, 2, 1, "", "orbit_transversal"], [56, 2, 1, "", "orbits"], [56, 2, 1, "", "order"], [56, 2, 1, "", "pointwise_stabilizer"], [56, 2, 1, "", "polycyclic_group"], [56, 2, 1, "", "presentation"], [56, 2, 1, "", "random"], [56, 2, 1, "", "random_pr"], [56, 2, 1, "", "random_stab"], [56, 2, 1, "", "schreier_sims"], [56, 2, 1, "", "schreier_sims_incremental"], [56, 2, 1, "", "schreier_sims_random"], [56, 2, 1, "", "schreier_vector"], [56, 2, 1, "", "stabilizer"], [56, 3, 1, "", "strong_gens"], [56, 2, 1, "", "strong_presentation"], [56, 2, 1, "", "subgroup"], [56, 2, 1, "", "subgroup_search"], [56, 2, 1, "", "sylow_subgroup"], [56, 3, 1, "", "transitivity_degree"]], "sympy.combinatorics.permutations": [[57, 1, 1, "", "Cycle"], [57, 1, 1, "", "Permutation"], [57, 4, 1, "", "_af_parity"]], "sympy.combinatorics.permutations.Cycle": [[57, 2, 1, "", "list"]], "sympy.combinatorics.permutations.Permutation": [[57, 2, 1, "", "apply"], [57, 3, 1, "", "array_form"], [57, 2, 1, "", "ascents"], [57, 2, 1, "", "atoms"], [57, 3, 1, "", "cardinality"], [57, 2, 1, "", "commutator"], [57, 2, 1, "", "commutes_with"], [57, 3, 1, "", "cycle_structure"], [57, 3, 1, "", "cycles"], [57, 3, 1, "", "cyclic_form"], [57, 2, 1, "", "descents"], [57, 2, 1, "", "from_inversion_vector"], [57, 2, 1, "", "from_sequence"], [57, 3, 1, "", "full_cyclic_form"], [57, 2, 1, "", "get_adjacency_distance"], [57, 2, 1, "", "get_adjacency_matrix"], [57, 2, 1, "", "get_positional_distance"], [57, 2, 1, "", "get_precedence_distance"], [57, 2, 1, "", "get_precedence_matrix"], [57, 2, 1, "", "index"], [57, 2, 1, "", "inversion_vector"], [57, 2, 1, "", "inversions"], [57, 3, 1, "", "is_Empty"], [57, 3, 1, "", "is_Identity"], [57, 3, 1, "", "is_Singleton"], [57, 3, 1, "", "is_even"], [57, 3, 1, "", "is_odd"], [57, 2, 1, "", "josephus"], [57, 2, 1, "", "length"], [57, 2, 1, "", "list"], [57, 2, 1, "", "max"], [57, 2, 1, "", "min"], [57, 2, 1, "", "mul_inv"], [57, 2, 1, "", "next_lex"], [57, 2, 1, "", "next_nonlex"], [57, 2, 1, "", "next_trotterjohnson"], [57, 2, 1, "", "order"], [57, 2, 1, "", "parity"], [57, 2, 1, "", "random"], [57, 2, 1, "", "rank"], [57, 2, 1, "", "rank_nonlex"], [57, 2, 1, "", "rank_trotterjohnson"], [57, 2, 1, "", "resize"], [57, 2, 1, "", "rmul"], [57, 2, 1, "", "rmul_with_af"], [57, 2, 1, "", "runs"], [57, 2, 1, "", "signature"], [57, 3, 1, "", "size"], [57, 2, 1, "", "support"], [57, 2, 1, "", "transpositions"], [57, 2, 1, "", "unrank_lex"], [57, 2, 1, "", "unrank_nonlex"], [57, 2, 1, "", "unrank_trotterjohnson"]], "sympy.combinatorics.polyhedron": [[58, 1, 1, "", "Polyhedron"]], "sympy.combinatorics.polyhedron.Polyhedron": [[58, 3, 1, "", "array_form"], [58, 3, 1, "", "corners"], [58, 3, 1, "", "cyclic_form"], [58, 3, 1, "", "edges"], [58, 3, 1, "", "faces"], [58, 3, 1, "", "pgroup"], [58, 2, 1, "", "reset"], [58, 2, 1, "", "rotate"], [58, 3, 1, "", "size"], [58, 3, 1, "", "vertices"]], "sympy.combinatorics.prufer": [[59, 1, 1, "", "Prufer"]], "sympy.combinatorics.prufer.Prufer": [[59, 2, 1, "", "edges"], [59, 2, 1, "", "next"], [59, 3, 1, "", "nodes"], [59, 2, 1, "", "prev"], [59, 2, 1, "", "prufer_rank"], [59, 3, 1, "", "prufer_repr"], [59, 3, 1, "", "rank"], [59, 3, 1, "", "size"], [59, 2, 1, "", "to_prufer"], [59, 2, 1, "", "to_tree"], [59, 3, 1, "", "tree_repr"], [59, 2, 1, "", "unrank"]], "sympy.combinatorics.subsets": [[60, 1, 1, "", "Subset"], [60, 2, 1, "", "ksubsets"]], "sympy.combinatorics.subsets.Subset": [[60, 2, 1, "", "bitlist_from_subset"], [60, 3, 1, "", "cardinality"], [60, 2, 1, "", "iterate_binary"], [60, 2, 1, "", "iterate_graycode"], [60, 2, 1, "", "next_binary"], [60, 2, 1, "", "next_gray"], [60, 2, 1, "", "next_lexicographic"], [60, 2, 1, "", "prev_binary"], [60, 2, 1, "", "prev_gray"], [60, 2, 1, "", "prev_lexicographic"], [60, 3, 1, "", "rank_binary"], [60, 3, 1, "", "rank_gray"], [60, 3, 1, "", "rank_lexicographic"], [60, 3, 1, "", "size"], [60, 3, 1, "", "subset"], [60, 2, 1, "", "subset_from_bitlist"], [60, 2, 1, "", "subset_indices"], [60, 3, 1, "", "superset"], [60, 3, 1, "", "superset_size"], [60, 2, 1, "", "unrank_binary"], [60, 2, 1, "", "unrank_gray"]], "sympy.combinatorics.tensor_can": [[61, 4, 1, "", "bsgs_direct_product"], [61, 4, 1, "", "canonicalize"], [61, 4, 1, "", "double_coset_can_rep"], [61, 4, 1, "", "get_symmetric_group_sgs"]], "sympy.combinatorics.testutil": [[62, 4, 1, "", "_cmp_perm_lists"], [62, 4, 1, "", "_naive_list_centralizer"], [62, 4, 1, "", "_verify_bsgs"], [62, 4, 1, "", "_verify_centralizer"], [62, 4, 1, "", "_verify_normal_closure"]], "sympy.combinatorics.util": [[63, 4, 1, "", "_base_ordering"], [63, 4, 1, "", "_check_cycles_alt_sym"], [63, 4, 1, "", "_distribute_gens_by_base"], [63, 4, 1, "", "_handle_precomputed_bsgs"], [63, 4, 1, "", "_orbits_transversals_from_bsgs"], [63, 4, 1, "", "_remove_gens"], [63, 4, 1, "", "_strip"], [63, 4, 1, "", "_strong_gens_from_distr"]], "sympy.concrete.expr_with_intlimits": [[64, 1, 1, "", "ExprWithIntLimits"]], "sympy.concrete.expr_with_intlimits.ExprWithIntLimits": [[64, 2, 1, "", "change_index"], [64, 3, 1, "", "has_empty_sequence"], [64, 2, 1, "", "index"], [64, 2, 1, "", "reorder"], [64, 2, 1, "", "reorder_limit"]], "sympy.concrete.expr_with_limits": [[92, 1, 1, "", "ExprWithLimits"]], "sympy.concrete.expr_with_limits.ExprWithLimits": [[92, 3, 1, "", "bound_symbols"], [92, 3, 1, "", "free_symbols"], [92, 3, 1, "", "function"], [92, 3, 1, "", "has_finite_limits"], [92, 3, 1, "", "has_reversed_limits"], [92, 3, 1, "", "is_number"], [92, 3, 1, "", "limits"], [92, 3, 1, "", "variables"]], "sympy.concrete.gosper": [[64, 4, 1, "", "gosper_normal"], [64, 4, 1, "", "gosper_sum"], [64, 4, 1, "", "gosper_term"]], "sympy.concrete.products": [[64, 1, 1, "", "Product"], [64, 4, 1, "", "product"]], "sympy.concrete.products.Product": [[64, 2, 1, "", "is_convergent"], [64, 2, 1, "", "reverse_order"]], "sympy.concrete.summations": [[64, 1, 1, "", "Sum"], [64, 4, 1, "", "summation"]], "sympy.concrete.summations.Sum": [[64, 2, 1, "", "euler_maclaurin"], [64, 2, 1, "", "eval_zeta_function"], [64, 2, 1, "", "is_absolutely_convergent"], [64, 2, 1, "", "is_convergent"], [64, 2, 1, "", "reverse_order"]], "sympy.core": [[65, 0, 0, "-", "add"], [65, 0, 0, "-", "assumptions"], [65, 0, 0, "-", "basic"], [65, 0, 0, "-", "cache"], [65, 0, 0, "-", "containers"], [65, 0, 0, "-", "evalf"], [65, 0, 0, "-", "expr"], [65, 0, 0, "-", "exprtools"], [65, 0, 0, "-", "function"], [65, 0, 0, "-", "kind"], [65, 0, 0, "-", "mod"], [65, 0, 0, "-", "mul"], [65, 0, 0, "-", "multidimensional"], [65, 0, 0, "-", "numbers"], [65, 0, 0, "-", "power"], [65, 0, 0, "-", "random"], [65, 0, 0, "-", "relational"], [65, 0, 0, "-", "singleton"], [65, 0, 0, "-", "symbol"], [65, 0, 0, "-", "sympify"], [65, 0, 0, "-", "traversal"]], "sympy.core.add": [[65, 1, 1, "", "Add"]], "sympy.core.add.Add": [[65, 2, 1, "", "as_coeff_Add"], [65, 2, 1, "", "as_coeff_add"], [65, 2, 1, "", "as_content_primitive"], [65, 2, 1, "", "as_numer_denom"], [65, 2, 1, "", "as_real_imag"], [65, 2, 1, "", "as_two_terms"], [65, 2, 1, "", "extract_leading_order"], [65, 2, 1, "", "flatten"], [65, 2, 1, "", "primitive"]], "sympy.core.basic": [[65, 1, 1, "", "Atom"], [65, 1, 1, "", "Basic"]], "sympy.core.basic.Basic": [[65, 3, 1, "", "args"], [65, 2, 1, "", "as_content_primitive"], [65, 2, 1, "", "as_dummy"], [65, 3, 1, "", "assumptions0"], [65, 2, 1, "", "atoms"], [65, 3, 1, "", "canonical_variables"], [65, 2, 1, "", "class_key"], [65, 2, 1, "", "compare"], [65, 2, 1, "", "count"], [65, 2, 1, "", "count_ops"], [65, 2, 1, "", "doit"], [65, 2, 1, "", "dummy_eq"], [65, 2, 1, "", "find"], [65, 3, 1, "", "free_symbols"], [65, 2, 1, "", "fromiter"], [65, 3, 1, "", "func"], [65, 2, 1, "", "has"], [65, 2, 1, "", "has_free"], [65, 2, 1, "", "has_xfree"], [65, 3, 1, "", "is_comparable"], [65, 2, 1, "", "match"], [65, 2, 1, "", "matches"], [65, 2, 1, "", "rcall"], [65, 2, 1, "", "refine"], [65, 2, 1, "", "replace"], [65, 2, 1, "", "rewrite"], [65, 2, 1, "", "simplify"], [65, 2, 1, "", "sort_key"], [65, 2, 1, "", "subs"], [65, 2, 1, "", "xreplace"]], "sympy.core.cache": [[65, 4, 1, "", "__cacheit"]], "sympy.core.containers": [[65, 1, 1, "", "Dict"], [65, 1, 1, "", "Tuple"], [65, 1, 1, "", "TupleKind"]], "sympy.core.containers.Dict": [[65, 2, 1, "", "get"], [65, 2, 1, "", "items"], [65, 2, 1, "", "keys"], [65, 2, 1, "", "values"]], "sympy.core.containers.Tuple": [[65, 2, 1, "", "index"], [65, 3, 1, "", "kind"], [65, 2, 1, "", "tuple_count"]], "sympy.core.evalf": [[65, 1, 1, "", "EvalfMixin"], [65, 4, 1, "", "N"], [65, 1, 1, "", "PrecisionExhausted"]], "sympy.core.evalf.EvalfMixin": [[65, 2, 1, "", "evalf"], [65, 2, 1, "", "n"]], "sympy.core.expr": [[65, 1, 1, "", "AtomicExpr"], [65, 1, 1, "", "Expr"], [65, 1, 1, "", "UnevaluatedExpr"]], "sympy.core.expr.Expr": [[65, 2, 1, "", "apart"], [65, 2, 1, "", "args_cnc"], [65, 2, 1, "", "as_coeff_Add"], [65, 2, 1, "", "as_coeff_Mul"], [65, 2, 1, "", "as_coeff_add"], [65, 2, 1, "", "as_coeff_exponent"], [65, 2, 1, "", "as_coeff_mul"], [65, 2, 1, "", "as_coefficient"], [65, 2, 1, "", "as_coefficients_dict"], [65, 2, 1, "", "as_content_primitive"], [65, 2, 1, "", "as_expr"], [65, 2, 1, "", "as_independent"], [65, 2, 1, "", "as_leading_term"], [65, 2, 1, "", "as_numer_denom"], [65, 2, 1, "", "as_ordered_factors"], [65, 2, 1, "", "as_ordered_terms"], [65, 2, 1, "", "as_poly"], [65, 2, 1, "", "as_powers_dict"], [65, 2, 1, "", "as_real_imag"], [65, 2, 1, "", "as_terms"], [65, 2, 1, "", "aseries"], [65, 2, 1, "", "cancel"], [65, 2, 1, "", "coeff"], [65, 2, 1, "", "collect"], [65, 2, 1, "", "combsimp"], [65, 2, 1, "", "compute_leading_term"], [65, 2, 1, "", "conjugate"], [65, 2, 1, "", "could_extract_minus_sign"], [65, 2, 1, "", "equals"], [65, 2, 1, "", "expand"], [65, 3, 1, "", "expr_free_symbols"], [65, 2, 1, "", "extract_additively"], [65, 2, 1, "", "extract_branch_factor"], [65, 2, 1, "", "extract_multiplicatively"], [65, 2, 1, "", "factor"], [65, 2, 1, "", "fourier_series"], [65, 2, 1, "", "fps"], [65, 2, 1, "", "gammasimp"], [65, 2, 1, "", "getO"], [65, 2, 1, "", "getn"], [65, 2, 1, "", "integrate"], [65, 2, 1, "", "invert"], [65, 2, 1, "", "is_algebraic_expr"], [65, 2, 1, "", "is_constant"], [65, 2, 1, "", "is_meromorphic"], [65, 3, 1, "", "is_number"], [65, 2, 1, "", "is_polynomial"], [65, 2, 1, "", "is_rational_function"], [65, 2, 1, "", "leadterm"], [65, 2, 1, "", "limit"], [65, 2, 1, "", "lseries"], [65, 2, 1, "", "normal"], [65, 2, 1, "", "nseries"], [65, 2, 1, "", "nsimplify"], [65, 2, 1, "", "powsimp"], [65, 2, 1, "", "primitive"], [65, 2, 1, "", "radsimp"], [65, 2, 1, "", "ratsimp"], [65, 2, 1, "", "removeO"], [65, 2, 1, "", "round"], [65, 2, 1, "", "separate"], [65, 2, 1, "", "series"], [65, 2, 1, "", "taylor_term"], [65, 2, 1, "", "together"], [65, 2, 1, "", "trigsimp"]], "sympy.core.exprtools": [[65, 4, 1, "", "factor_terms"], [65, 4, 1, "", "gcd_terms"]], "sympy.core.function": [[65, 1, 1, "", "Derivative"], [65, 1, 1, "", "Function"], [65, 1, 1, "", "FunctionClass"], [65, 1, 1, "", "Lambda"], [65, 1, 1, "", "PoleError"], [65, 1, 1, "", "Subs"], [65, 1, 1, "", "WildFunction"], [65, 4, 1, "", "count_ops"], [65, 4, 1, "", "diff"], [65, 4, 1, "", "expand"], [65, 4, 1, "", "expand_complex"], [65, 4, 1, "", "expand_func"], [65, 4, 1, "", "expand_log"], [65, 4, 1, "", "expand_mul"], [65, 4, 1, "", "expand_multinomial"], [65, 4, 1, "", "expand_power_base"], [65, 4, 1, "", "expand_power_exp"], [65, 4, 1, "", "expand_trig"], [65, 4, 1, "", "nfloat"]], "sympy.core.function.Derivative": [[65, 3, 1, "", "_diff_wrt"], [65, 2, 1, "", "_sort_variable_count"], [65, 2, 1, "", "as_finite_difference"], [65, 2, 1, "", "doit_numerically"]], "sympy.core.function.Function": [[65, 2, 1, "", "as_base_exp"], [65, 2, 1, "", "fdiff"], [65, 2, 1, "", "is_singular"]], "sympy.core.function.FunctionClass": [[65, 3, 1, "", "nargs"]], "sympy.core.function.Lambda": [[65, 3, 1, "", "bound_symbols"], [65, 3, 1, "", "expr"], [65, 3, 1, "", "is_identity"], [65, 3, 1, "", "signature"], [65, 3, 1, "", "variables"]], "sympy.core.function.Subs": [[65, 3, 1, "", "bound_symbols"], [65, 3, 1, "", "expr"], [65, 3, 1, "", "point"], [65, 3, 1, "", "variables"]], "sympy.core.kind": [[65, 5, 1, "", "BooleanKind"], [65, 1, 1, "", "Kind"], [65, 5, 1, "", "NumberKind"], [65, 5, 1, "", "UndefinedKind"]], "sympy.core.mod": [[65, 1, 1, "", "Mod"]], "sympy.core.mul": [[65, 1, 1, "", "Mul"], [65, 4, 1, "", "prod"]], "sympy.core.mul.Mul": [[65, 2, 1, "", "as_coeff_Mul"], [65, 2, 1, "", "as_content_primitive"], [65, 2, 1, "", "as_ordered_factors"], [65, 2, 1, "", "as_two_terms"], [65, 2, 1, "", "flatten"]], "sympy.core.multidimensional": [[65, 1, 1, "", "vectorize"]], "sympy.core.numbers": [[65, 1, 1, "", "AlgebraicNumber"], [65, 1, 1, "", "Catalan"], [65, 1, 1, "", "ComplexInfinity"], [65, 1, 1, "", "EulerGamma"], [65, 1, 1, "", "Exp1"], [65, 1, 1, "", "Float"], [65, 1, 1, "", "GoldenRatio"], [65, 1, 1, "", "Half"], [65, 1, 1, "", "ImaginaryUnit"], [65, 1, 1, "", "Infinity"], [65, 1, 1, "", "Integer"], [65, 1, 1, "", "NaN"], [65, 1, 1, "", "NegativeInfinity"], [65, 1, 1, "", "NegativeOne"], [65, 1, 1, "", "Number"], [65, 1, 1, "", "NumberSymbol"], [65, 1, 1, "", "One"], [65, 1, 1, "", "Pi"], [65, 1, 1, "", "Rational"], [65, 5, 1, "", "RealNumber"], [65, 1, 1, "", "TribonacciConstant"], [65, 1, 1, "", "Zero"], [65, 4, 1, "", "equal_valued"], [65, 4, 1, "", "igcd"], [65, 4, 1, "", "ilcm"], [65, 4, 1, "", "mod_inverse"], [65, 4, 1, "", "seterr"]], "sympy.core.numbers.AlgebraicNumber": [[65, 2, 1, "", "__new__"], [65, 2, 1, "", "as_expr"], [65, 2, 1, "", "as_poly"], [65, 2, 1, "", "coeffs"], [65, 2, 1, "", "field_element"], [65, 3, 1, "", "is_aliased"], [65, 3, 1, "", "is_primitive_element"], [65, 2, 1, "", "minpoly_of_element"], [65, 2, 1, "", "native_coeffs"], [65, 2, 1, "", "primitive_element"], [65, 2, 1, "", "to_algebraic_integer"], [65, 2, 1, "", "to_primitive_element"], [65, 2, 1, "", "to_root"]], "sympy.core.numbers.Number": [[65, 2, 1, "", "as_coeff_Add"], [65, 2, 1, "", "as_coeff_Mul"], [65, 2, 1, "", "cofactors"], [65, 2, 1, "", "gcd"], [65, 2, 1, "", "lcm"]], "sympy.core.numbers.NumberSymbol": [[65, 2, 1, "", "approximation"]], "sympy.core.numbers.Rational": [[65, 2, 1, "", "as_coeff_Add"], [65, 2, 1, "", "as_coeff_Mul"], [65, 2, 1, "", "as_content_primitive"], [65, 2, 1, "", "factors"], [65, 2, 1, "", "limit_denominator"]], "sympy.core.power": [[65, 1, 1, "", "Pow"], [65, 4, 1, "", "integer_log"], [65, 4, 1, "", "integer_nthroot"]], "sympy.core.power.Pow": [[65, 2, 1, "", "as_base_exp"], [65, 2, 1, "", "as_content_primitive"]], "sympy.core.random": [[65, 4, 1, "", "_randint"], [65, 4, 1, "", "_randrange"], [65, 4, 1, "", "random_complex_number"], [65, 4, 1, "", "test_derivative_numerically"], [65, 4, 1, "", "verify_numerically"]], "sympy.core.relational": [[65, 5, 1, "", "Eq"], [65, 1, 1, "", "Equality"], [65, 5, 1, "", "Ge"], [65, 1, 1, "", "GreaterThan"], [65, 5, 1, "", "Gt"], [65, 5, 1, "", "Le"], [65, 1, 1, "", "LessThan"], [65, 5, 1, "", "Lt"], [65, 5, 1, "", "Ne"], [65, 5, 1, "", "Rel"], [65, 1, 1, "", "Relational"], [65, 1, 1, "", "StrictGreaterThan"], [65, 1, 1, "", "StrictLessThan"], [65, 1, 1, "", "Unequality"]], "sympy.core.relational.Equality": [[65, 2, 1, "", "as_poly"], [65, 2, 1, "", "integrate"]], "sympy.core.relational.Relational": [[65, 3, 1, "", "canonical"], [65, 2, 1, "", "equals"], [65, 3, 1, "", "lhs"], [65, 3, 1, "", "negated"], [65, 3, 1, "", "reversed"], [65, 3, 1, "", "reversedsign"], [65, 3, 1, "", "rhs"], [65, 3, 1, "", "strict"], [65, 3, 1, "", "weak"]], "sympy.core.singleton": [[65, 1, 1, "", "Singleton"], [65, 1, 1, "", "SingletonRegistry"]], "sympy.core.sorting": [[65, 4, 1, "", "default_sort_key"], [65, 4, 1, "", "ordered"]], "sympy.core.symbol": [[65, 1, 1, "", "Dummy"], [65, 1, 1, "", "Symbol"], [65, 1, 1, "", "Wild"], [65, 4, 1, "", "symbols"], [65, 4, 1, "", "var"]], "sympy.core.sympify": [[65, 4, 1, "", "sympify"]], "sympy.core.traversal": [[65, 4, 1, "", "bottom_up"], [65, 4, 1, "", "postorder_traversal"], [65, 4, 1, "", "preorder_traversal"], [65, 4, 1, "", "use"], [65, 4, 1, "", "walk"]], "sympy.crypto": [[66, 0, 0, "-", "crypto"]], "sympy.crypto.crypto": [[66, 4, 1, "", "AZ"], [66, 4, 1, "", "bifid5_square"], [66, 4, 1, "", "bifid6_square"], [66, 4, 1, "", "check_and_join"], [66, 4, 1, "", "cycle_list"], [66, 4, 1, "", "decipher_affine"], [66, 4, 1, "", "decipher_atbash"], [66, 4, 1, "", "decipher_bifid"], [66, 4, 1, "", "decipher_bifid5"], [66, 4, 1, "", "decipher_bifid6"], [66, 4, 1, "", "decipher_elgamal"], [66, 4, 1, "", "decipher_gm"], [66, 4, 1, "", "decipher_hill"], [66, 4, 1, "", "decipher_kid_rsa"], [66, 4, 1, "", "decipher_railfence"], [66, 4, 1, "", "decipher_rot13"], [66, 4, 1, "", "decipher_rsa"], [66, 4, 1, "", "decipher_shift"], [66, 4, 1, "", "decipher_vigenere"], [66, 4, 1, "", "decode_morse"], [66, 4, 1, "", "dh_private_key"], [66, 4, 1, "", "dh_public_key"], [66, 4, 1, "", "dh_shared_key"], [66, 4, 1, "", "elgamal_private_key"], [66, 4, 1, "", "elgamal_public_key"], [66, 4, 1, "", "encipher_affine"], [66, 4, 1, "", "encipher_atbash"], [66, 4, 1, "", "encipher_bifid"], [66, 4, 1, "", "encipher_bifid5"], [66, 4, 1, "", "encipher_bifid6"], [66, 4, 1, "", "encipher_elgamal"], [66, 4, 1, "", "encipher_gm"], [66, 4, 1, "", "encipher_hill"], [66, 4, 1, "", "encipher_kid_rsa"], [66, 4, 1, "", "encipher_railfence"], [66, 4, 1, "", "encipher_rot13"], [66, 4, 1, "", "encipher_rsa"], [66, 4, 1, "", "encipher_shift"], [66, 4, 1, "", "encipher_substitution"], [66, 4, 1, "", "encipher_vigenere"], [66, 4, 1, "", "encode_morse"], [66, 4, 1, "", "gm_private_key"], [66, 4, 1, "", "gm_public_key"], [66, 4, 1, "", "kid_rsa_private_key"], [66, 4, 1, "", "kid_rsa_public_key"], [66, 4, 1, "", "lfsr_autocorrelation"], [66, 4, 1, "", "lfsr_connection_polynomial"], [66, 4, 1, "", "lfsr_sequence"], [66, 4, 1, "", "padded_key"], [66, 4, 1, "", "rsa_private_key"], [66, 4, 1, "", "rsa_public_key"]], "sympy.diffgeom": [[67, 1, 1, "", "BaseCovarDerivativeOp"], [67, 1, 1, "", "BaseScalarField"], [67, 1, 1, "", "BaseVectorField"], [67, 1, 1, "", "Commutator"], [67, 1, 1, "", "CoordSystem"], [67, 1, 1, "", "CoordinateSymbol"], [67, 1, 1, "", "CovarDerivativeOp"], [67, 1, 1, "", "Differential"], [67, 1, 1, "", "LieDerivative"], [67, 1, 1, "", "Manifold"], [67, 1, 1, "", "Patch"], [67, 1, 1, "", "Point"], [67, 1, 1, "", "TensorProduct"], [67, 1, 1, "", "WedgeProduct"], [67, 4, 1, "", "intcurve_diffequ"], [67, 4, 1, "", "intcurve_series"], [67, 4, 1, "", "metric_to_Christoffel_1st"], [67, 4, 1, "", "metric_to_Christoffel_2nd"], [67, 4, 1, "", "metric_to_Ricci_components"], [67, 4, 1, "", "metric_to_Riemann_components"], [67, 4, 1, "", "twoform_to_matrix"], [67, 4, 1, "", "vectors_in_basis"]], "sympy.diffgeom.CoordSystem": [[67, 2, 1, "", "base_oneform"], [67, 2, 1, "", "base_oneforms"], [67, 2, 1, "", "base_scalar"], [67, 2, 1, "", "base_scalars"], [67, 2, 1, "", "base_vector"], [67, 2, 1, "", "base_vectors"], [67, 2, 1, "", "coord_function"], [67, 2, 1, "", "coord_functions"], [67, 2, 1, "", "coord_tuple_transform_to"], [67, 2, 1, "", "jacobian"], [67, 2, 1, "", "jacobian_determinant"], [67, 2, 1, "", "jacobian_matrix"], [67, 2, 1, "", "point"], [67, 2, 1, "", "point_to_coords"], [67, 2, 1, "", "transform"], [67, 2, 1, "", "transformation"]], "sympy.diffgeom.Point": [[67, 2, 1, "", "coords"]], "sympy.discrete": [[68, 0, 0, "-", "convolutions"], [68, 0, 0, "-", "transforms"]], "sympy.discrete.convolutions": [[68, 4, 1, "", "convolution"], [68, 4, 1, "", "convolution_fft"], [68, 4, 1, "", "convolution_fwht"], [68, 4, 1, "", "convolution_ntt"], [68, 4, 1, "", "convolution_subset"], [68, 4, 1, "", "covering_product"], [68, 4, 1, "", "intersecting_product"]], "sympy.discrete.transforms": [[68, 4, 1, "", "fft"], [68, 4, 1, "", "fwht"], [68, 4, 1, "", "ifft"], [68, 4, 1, "", "ifwht"], [68, 4, 1, "", "intt"], [68, 4, 1, "", "inverse_mobius_transform"], [68, 4, 1, "", "mobius_transform"], [68, 4, 1, "", "ntt"]], "sympy.external.pythonmpq": [[205, 1, 1, "", "PythonMPQ"]], "sympy.functions.combinatorial.factorials": [[70, 1, 1, "", "FallingFactorial"], [70, 1, 1, "", "MultiFactorial"], [70, 1, 1, "", "RisingFactorial"], [70, 1, 1, "", "binomial"], [70, 1, 1, "", "factorial"], [70, 1, 1, "", "factorial2"], [70, 1, 1, "", "subfactorial"]], "sympy.functions.combinatorial.numbers": [[70, 1, 1, "", "andre"], [70, 1, 1, "", "bell"], [70, 1, 1, "", "bernoulli"], [70, 1, 1, "", "catalan"], [70, 1, 1, "", "euler"], [70, 1, 1, "", "fibonacci"], [70, 1, 1, "", "genocchi"], [70, 1, 1, "", "harmonic"], [70, 1, 1, "", "lucas"], [70, 4, 1, "", "nC"], [70, 4, 1, "", "nP"], [70, 4, 1, "", "nT"], [70, 1, 1, "", "partition"], [70, 4, 1, "", "stirling"], [70, 1, 1, "", "tribonacci"]], "sympy.functions.elementary.complexes": [[71, 1, 1, "", "Abs"], [71, 1, 1, "", "arg"], [71, 1, 1, "", "conjugate"], [71, 1, 1, "", "im"], [71, 1, 1, "", "periodic_argument"], [71, 1, 1, "", "polar_lift"], [71, 1, 1, "", "principal_branch"], [71, 1, 1, "", "re"], [71, 1, 1, "", "sign"]], "sympy.functions.elementary.complexes.Abs": [[71, 2, 1, "", "fdiff"]], "sympy.functions.elementary.complexes.im": [[71, 2, 1, "", "as_real_imag"]], "sympy.functions.elementary.complexes.re": [[71, 2, 1, "", "as_real_imag"]], "sympy.functions.elementary.exponential": [[71, 1, 1, "", "LambertW"], [71, 1, 1, "", "exp"], [71, 1, 1, "", "exp_polar"], [71, 1, 1, "", "log"]], "sympy.functions.elementary.exponential.LambertW": [[71, 2, 1, "", "fdiff"]], "sympy.functions.elementary.exponential.exp": [[71, 2, 1, "", "as_real_imag"], [71, 3, 1, "", "base"], [71, 2, 1, "", "fdiff"], [71, 2, 1, "", "taylor_term"]], "sympy.functions.elementary.exponential.log": [[71, 2, 1, "", "as_base_exp"], [71, 2, 1, "", "as_real_imag"], [71, 2, 1, "", "fdiff"], [71, 2, 1, "", "inverse"], [71, 2, 1, "", "taylor_term"]], "sympy.functions.elementary.hyperbolic": [[71, 1, 1, "", "HyperbolicFunction"], [71, 1, 1, "", "acosh"], [71, 1, 1, "", "acoth"], [71, 1, 1, "", "acsch"], [71, 1, 1, "", "asech"], [71, 1, 1, "", "asinh"], [71, 1, 1, "", "atanh"], [71, 1, 1, "", "cosh"], [71, 1, 1, "", "coth"], [71, 1, 1, "", "csch"], [71, 1, 1, "", "sech"], [71, 1, 1, "", "sinh"], [71, 1, 1, "", "tanh"]], "sympy.functions.elementary.hyperbolic.acosh": [[71, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.acoth": [[71, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.acsch": [[71, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.asech": [[71, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.asinh": [[71, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.atanh": [[71, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.coth": [[71, 2, 1, "", "inverse"]], "sympy.functions.elementary.hyperbolic.csch": [[71, 2, 1, "", "fdiff"], [71, 2, 1, "", "taylor_term"]], "sympy.functions.elementary.hyperbolic.sinh": [[71, 2, 1, "", "as_real_imag"], [71, 2, 1, "", "fdiff"], [71, 2, 1, "", "inverse"], [71, 2, 1, "", "taylor_term"]], "sympy.functions.elementary.hyperbolic.tanh": [[71, 2, 1, "", "inverse"]], "sympy.functions.elementary.integers": [[71, 1, 1, "", "RoundFunction"], [71, 1, 1, "", "ceiling"], [71, 1, 1, "", "floor"], [71, 1, 1, "", "frac"]], "sympy.functions.elementary.miscellaneous": [[71, 1, 1, "", "IdentityFunction"], [71, 1, 1, "", "Max"], [71, 1, 1, "", "Min"], [71, 4, 1, "", "cbrt"], [71, 4, 1, "", "real_root"], [71, 4, 1, "", "root"], [71, 4, 1, "", "sqrt"]], "sympy.functions.elementary.piecewise": [[71, 1, 1, "", "ExprCondPair"], [71, 1, 1, "", "Piecewise"], [71, 4, 1, "", "piecewise_exclusive"], [71, 4, 1, "", "piecewise_fold"]], "sympy.functions.elementary.piecewise.ExprCondPair": [[71, 3, 1, "", "cond"], [71, 3, 1, "", "expr"]], "sympy.functions.elementary.piecewise.Piecewise": [[71, 2, 1, "", "_eval_integral"], [71, 2, 1, "", "as_expr_set_pairs"], [71, 2, 1, "", "doit"], [71, 2, 1, "", "eval"], [71, 2, 1, "", "piecewise_integrate"]], "sympy.functions.elementary.trigonometric": [[71, 1, 1, "", "acos"], [71, 1, 1, "", "acot"], [71, 1, 1, "", "acsc"], [71, 1, 1, "", "asec"], [71, 1, 1, "", "asin"], [71, 1, 1, "", "atan"], [71, 1, 1, "", "atan2"], [71, 1, 1, "", "cos"], [71, 1, 1, "", "cot"], [71, 1, 1, "", "csc"], [71, 1, 1, "", "sec"], [71, 1, 1, "", "sin"], [71, 1, 1, "", "sinc"], [71, 1, 1, "", "tan"]], "sympy.functions.elementary.trigonometric.acos": [[71, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.acot": [[71, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.acsc": [[71, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.asec": [[71, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.asin": [[71, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.atan": [[71, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.cot": [[71, 2, 1, "", "inverse"]], "sympy.functions.elementary.trigonometric.tan": [[71, 2, 1, "", "inverse"]], "sympy.functions.special": [[73, 0, 0, "-", "bessel"], [73, 0, 0, "-", "beta_functions"], [73, 0, 0, "-", "elliptic_integrals"], [73, 0, 0, "-", "error_functions"], [73, 0, 0, "-", "gamma_functions"], [73, 0, 0, "-", "mathieu_functions"], [73, 0, 0, "-", "polynomials"], [73, 0, 0, "-", "singularity_functions"], [73, 0, 0, "-", "zeta_functions"]], "sympy.functions.special.bessel": [[73, 1, 1, "", "AiryBase"], [73, 1, 1, "", "BesselBase"], [73, 1, 1, "", "airyai"], [73, 1, 1, "", "airyaiprime"], [73, 1, 1, "", "airybi"], [73, 1, 1, "", "airybiprime"], [73, 1, 1, "", "besseli"], [73, 1, 1, "", "besselj"], [73, 1, 1, "", "besselk"], [73, 1, 1, "", "bessely"], [73, 1, 1, "", "hankel1"], [73, 1, 1, "", "hankel2"], [73, 1, 1, "", "jn"], [73, 4, 1, "", "jn_zeros"], [73, 1, 1, "", "marcumq"], [73, 1, 1, "", "yn"]], "sympy.functions.special.bessel.BesselBase": [[73, 3, 1, "", "argument"], [73, 3, 1, "", "order"]], "sympy.functions.special.beta_functions": [[73, 1, 1, "", "beta"]], "sympy.functions.special.bsplines": [[73, 4, 1, "", "bspline_basis"], [73, 4, 1, "", "bspline_basis_set"], [73, 4, 1, "", "interpolating_spline"]], "sympy.functions.special.delta_functions": [[73, 1, 1, "", "DiracDelta"], [73, 1, 1, "", "Heaviside"]], "sympy.functions.special.delta_functions.DiracDelta": [[73, 2, 1, "", "eval"], [73, 2, 1, "", "fdiff"], [73, 2, 1, "", "is_simple"]], "sympy.functions.special.delta_functions.Heaviside": [[73, 2, 1, "", "eval"], [73, 2, 1, "", "fdiff"], [73, 3, 1, "", "pargs"]], "sympy.functions.special.elliptic_integrals": [[73, 1, 1, "", "elliptic_e"], [73, 1, 1, "", "elliptic_f"], [73, 1, 1, "", "elliptic_k"], [73, 1, 1, "", "elliptic_pi"]], "sympy.functions.special.error_functions": [[73, 1, 1, "", "Chi"], [73, 1, 1, "", "Ci"], [73, 4, 1, "", "E1"], [73, 1, 1, "", "Ei"], [73, 1, 1, "", "FresnelIntegral"], [73, 1, 1, "", "Li"], [73, 1, 1, "", "Shi"], [73, 1, 1, "", "Si"], [73, 1, 1, "", "erf"], [73, 1, 1, "", "erf2"], [73, 1, 1, "", "erf2inv"], [73, 1, 1, "", "erfc"], [73, 1, 1, "", "erfcinv"], [73, 1, 1, "", "erfi"], [73, 1, 1, "", "erfinv"], [73, 1, 1, "", "expint"], [73, 1, 1, "", "fresnelc"], [73, 1, 1, "", "fresnels"], [73, 1, 1, "", "li"]], "sympy.functions.special.error_functions.erf": [[73, 2, 1, "", "inverse"]], "sympy.functions.special.error_functions.erfc": [[73, 2, 1, "", "inverse"]], "sympy.functions.special.error_functions.erfcinv": [[73, 2, 1, "", "inverse"]], "sympy.functions.special.error_functions.erfinv": [[73, 2, 1, "", "inverse"]], "sympy.functions.special.gamma_functions": [[73, 1, 1, "", "digamma"], [73, 1, 1, "", "gamma"], [73, 1, 1, "", "loggamma"], [73, 1, 1, "", "lowergamma"], [73, 1, 1, "", "multigamma"], [73, 1, 1, "", "polygamma"], [73, 1, 1, "", "trigamma"], [73, 1, 1, "", "uppergamma"]], "sympy.functions.special.hyper": [[73, 1, 1, "", "appellf1"], [73, 1, 1, "", "hyper"], [73, 1, 1, "", "meijerg"]], "sympy.functions.special.hyper.hyper": [[73, 3, 1, "", "ap"], [73, 3, 1, "", "argument"], [73, 3, 1, "", "bq"], [73, 3, 1, "", "convergence_statement"], [73, 3, 1, "", "eta"], [73, 3, 1, "", "radius_of_convergence"]], "sympy.functions.special.hyper.meijerg": [[73, 3, 1, "", "an"], [73, 3, 1, "", "aother"], [73, 3, 1, "", "ap"], [73, 3, 1, "", "argument"], [73, 3, 1, "", "bm"], [73, 3, 1, "", "bother"], [73, 3, 1, "", "bq"], [73, 3, 1, "", "delta"], [73, 2, 1, "", "get_period"], [73, 2, 1, "", "integrand"], [73, 3, 1, "", "is_number"], [73, 3, 1, "", "nu"]], "sympy.functions.special.mathieu_functions": [[73, 1, 1, "", "MathieuBase"], [73, 1, 1, "", "mathieuc"], [73, 1, 1, "", "mathieucprime"], [73, 1, 1, "", "mathieus"], [73, 1, 1, "", "mathieusprime"]], "sympy.functions.special.polynomials": [[73, 1, 1, "", "assoc_laguerre"], [73, 1, 1, "", "assoc_legendre"], [73, 1, 1, "", "chebyshevt"], [73, 1, 1, "", "chebyshevt_root"], [73, 1, 1, "", "chebyshevu"], [73, 1, 1, "", "chebyshevu_root"], [73, 1, 1, "", "gegenbauer"], [73, 1, 1, "", "hermite"], [73, 1, 1, "", "hermite_prob"], [73, 1, 1, "", "jacobi"], [73, 4, 1, "", "jacobi_normalized"], [73, 1, 1, "", "laguerre"], [73, 1, 1, "", "legendre"]], "sympy.functions.special.singularity_functions": [[73, 1, 1, "", "SingularityFunction"]], "sympy.functions.special.singularity_functions.SingularityFunction": [[73, 2, 1, "", "eval"], [73, 2, 1, "", "fdiff"]], "sympy.functions.special.spherical_harmonics": [[73, 1, 1, "", "Ynm"], [73, 4, 1, "", "Ynm_c"], [73, 1, 1, "", "Znm"]], "sympy.functions.special.tensor_functions": [[73, 4, 1, "", "Eijk"], [73, 1, 1, "", "KroneckerDelta"], [73, 1, 1, "", "LeviCivita"], [73, 4, 1, "", "eval_levicivita"]], "sympy.functions.special.tensor_functions.KroneckerDelta": [[73, 2, 1, "", "eval"], [73, 3, 1, "", "indices_contain_equal_information"], [73, 3, 1, "", "is_above_fermi"], [73, 3, 1, "", "is_below_fermi"], [73, 3, 1, "", "is_only_above_fermi"], [73, 3, 1, "", "is_only_below_fermi"], [73, 3, 1, "", "killable_index"], [73, 3, 1, "", "preferred_index"]], "sympy.functions.special.zeta_functions": [[73, 1, 1, "", "dirichlet_eta"], [73, 1, 1, "", "lerchphi"], [73, 1, 1, "", "polylog"], [73, 1, 1, "", "stieltjes"], [73, 1, 1, "", "zeta"]], "sympy.geometry": [[74, 0, 0, "-", "curve"], [75, 0, 0, "-", "ellipse"], [76, 0, 0, "-", "entity"], [78, 0, 0, "-", "line"], [79, 0, 0, "-", "plane"], [80, 0, 0, "-", "point"], [81, 0, 0, "-", "polygon"], [82, 0, 0, "-", "util"]], "sympy.geometry.curve": [[74, 1, 1, "", "Curve"]], "sympy.geometry.curve.Curve": [[74, 3, 1, "", "ambient_dimension"], [74, 2, 1, "", "arbitrary_point"], [74, 3, 1, "", "free_symbols"], [74, 3, 1, "", "functions"], [74, 3, 1, "", "length"], [74, 3, 1, "", "limits"], [74, 3, 1, "", "parameter"], [74, 2, 1, "", "plot_interval"], [74, 2, 1, "", "rotate"], [74, 2, 1, "", "scale"], [74, 2, 1, "", "translate"]], "sympy.geometry.ellipse": [[75, 1, 1, "", "Circle"], [75, 1, 1, "", "Ellipse"]], "sympy.geometry.ellipse.Circle": [[75, 3, 1, "", "circumference"], [75, 2, 1, "", "equation"], [75, 2, 1, "", "intersection"], [75, 3, 1, "", "radius"], [75, 2, 1, "", "reflect"], [75, 2, 1, "", "scale"], [75, 3, 1, "", "vradius"]], "sympy.geometry.ellipse.Ellipse": [[75, 3, 1, "", "apoapsis"], [75, 2, 1, "", "arbitrary_point"], [75, 3, 1, "", "area"], [75, 2, 1, "", "auxiliary_circle"], [75, 3, 1, "", "bounds"], [75, 3, 1, "", "center"], [75, 3, 1, "", "circumference"], [75, 2, 1, "", "director_circle"], [75, 3, 1, "", "eccentricity"], [75, 2, 1, "", "encloses_point"], [75, 2, 1, "", "equation"], [75, 2, 1, "", "evolute"], [75, 3, 1, "", "foci"], [75, 3, 1, "", "focus_distance"], [75, 3, 1, "", "hradius"], [75, 2, 1, "", "intersection"], [75, 2, 1, "", "is_tangent"], [75, 3, 1, "", "major"], [75, 3, 1, "", "minor"], [75, 2, 1, "", "normal_lines"], [75, 3, 1, "", "periapsis"], [75, 2, 1, "", "plot_interval"], [75, 2, 1, "", "polar_second_moment_of_area"], [75, 2, 1, "", "random_point"], [75, 2, 1, "", "reflect"], [75, 2, 1, "", "rotate"], [75, 2, 1, "", "scale"], [75, 2, 1, "", "second_moment_of_area"], [75, 2, 1, "", "section_modulus"], [75, 3, 1, "", "semilatus_rectum"], [75, 2, 1, "", "tangent_lines"], [75, 3, 1, "", "vradius"]], "sympy.geometry.entity": [[76, 1, 1, "", "GeometryEntity"]], "sympy.geometry.entity.GeometryEntity": [[76, 3, 1, "", "ambient_dimension"], [76, 3, 1, "", "bounds"], [76, 2, 1, "", "encloses"], [76, 2, 1, "", "intersection"], [76, 2, 1, "", "is_similar"], [76, 2, 1, "", "parameter_value"], [76, 2, 1, "", "reflect"], [76, 2, 1, "", "rotate"], [76, 2, 1, "", "scale"], [76, 2, 1, "", "translate"]], "sympy.geometry.line": [[78, 1, 1, "", "Line"], [78, 1, 1, "", "Line2D"], [78, 1, 1, "", "Line3D"], [78, 1, 1, "", "LinearEntity"], [78, 1, 1, "", "LinearEntity2D"], [78, 1, 1, "", "LinearEntity3D"], [78, 1, 1, "", "Ray"], [78, 1, 1, "", "Ray2D"], [78, 1, 1, "", "Ray3D"], [78, 1, 1, "", "Segment"], [78, 1, 1, "", "Segment2D"], [78, 1, 1, "", "Segment3D"]], "sympy.geometry.line.Line": [[78, 2, 1, "", "contains"], [78, 2, 1, "", "distance"], [78, 2, 1, "", "equals"], [78, 2, 1, "", "plot_interval"]], "sympy.geometry.line.Line2D": [[78, 3, 1, "", "coefficients"], [78, 2, 1, "", "equation"]], "sympy.geometry.line.Line3D": [[78, 2, 1, "", "equation"]], "sympy.geometry.line.LinearEntity": [[78, 3, 1, "", "ambient_dimension"], [78, 2, 1, "", "angle_between"], [78, 2, 1, "", "arbitrary_point"], [78, 2, 1, "", "are_concurrent"], [78, 2, 1, "", "bisectors"], [78, 2, 1, "", "contains"], [78, 3, 1, "", "direction"], [78, 2, 1, "", "intersection"], [78, 2, 1, "", "is_parallel"], [78, 2, 1, "", "is_perpendicular"], [78, 2, 1, "", "is_similar"], [78, 3, 1, "", "length"], [78, 3, 1, "", "p1"], [78, 3, 1, "", "p2"], [78, 2, 1, "", "parallel_line"], [78, 2, 1, "", "perpendicular_line"], [78, 2, 1, "", "perpendicular_segment"], [78, 3, 1, "", "points"], [78, 2, 1, "", "projection"], [78, 2, 1, "", "random_point"], [78, 2, 1, "", "smallest_angle_between"]], "sympy.geometry.line.LinearEntity2D": [[78, 3, 1, "", "bounds"], [78, 2, 1, "", "perpendicular_line"], [78, 3, 1, "", "slope"]], "sympy.geometry.line.LinearEntity3D": [[78, 3, 1, "", "direction_cosine"], [78, 3, 1, "", "direction_ratio"]], "sympy.geometry.line.Ray": [[78, 2, 1, "", "contains"], [78, 2, 1, "", "distance"], [78, 2, 1, "", "equals"], [78, 2, 1, "", "plot_interval"], [78, 3, 1, "", "source"]], "sympy.geometry.line.Ray2D": [[78, 2, 1, "", "closing_angle"], [78, 3, 1, "", "xdirection"], [78, 3, 1, "", "ydirection"]], "sympy.geometry.line.Ray3D": [[78, 3, 1, "", "xdirection"], [78, 3, 1, "", "ydirection"], [78, 3, 1, "", "zdirection"]], "sympy.geometry.line.Segment": [[78, 2, 1, "", "contains"], [78, 2, 1, "", "distance"], [78, 2, 1, "", "equals"], [78, 3, 1, "", "length"], [78, 3, 1, "", "midpoint"], [78, 2, 1, "", "perpendicular_bisector"], [78, 2, 1, "", "plot_interval"]], "sympy.geometry.plane": [[79, 1, 1, "", "Plane"]], "sympy.geometry.plane.Plane": [[79, 2, 1, "", "angle_between"], [79, 2, 1, "", "arbitrary_point"], [79, 2, 1, "", "are_concurrent"], [79, 2, 1, "", "distance"], [79, 2, 1, "", "equals"], [79, 2, 1, "", "equation"], [79, 2, 1, "", "intersection"], [79, 2, 1, "", "is_coplanar"], [79, 2, 1, "", "is_parallel"], [79, 2, 1, "", "is_perpendicular"], [79, 3, 1, "", "normal_vector"], [79, 3, 1, "", "p1"], [79, 2, 1, "", "parallel_plane"], [79, 2, 1, "", "parameter_value"], [79, 2, 1, "", "perpendicular_line"], [79, 2, 1, "", "perpendicular_plane"], [79, 2, 1, "", "projection"], [79, 2, 1, "", "projection_line"], [79, 2, 1, "", "random_point"]], "sympy.geometry.point": [[80, 1, 1, "", "Point"], [80, 1, 1, "", "Point2D"], [80, 1, 1, "", "Point3D"]], "sympy.geometry.point.Point": [[80, 2, 1, "", "affine_rank"], [80, 3, 1, "", "ambient_dimension"], [80, 2, 1, "", "are_coplanar"], [80, 2, 1, "", "canberra_distance"], [80, 2, 1, "", "distance"], [80, 2, 1, "", "dot"], [80, 2, 1, "", "equals"], [80, 2, 1, "", "intersection"], [80, 2, 1, "", "is_collinear"], [80, 2, 1, "", "is_concyclic"], [80, 3, 1, "", "is_nonzero"], [80, 2, 1, "", "is_scalar_multiple"], [80, 3, 1, "", "is_zero"], [80, 3, 1, "", "length"], [80, 2, 1, "", "midpoint"], [80, 3, 1, "", "origin"], [80, 3, 1, "", "orthogonal_direction"], [80, 2, 1, "", "project"], [80, 2, 1, "", "taxicab_distance"], [80, 3, 1, "", "unit"]], "sympy.geometry.point.Point2D": [[80, 3, 1, "", "bounds"], [80, 3, 1, "", "coordinates"], [80, 2, 1, "", "rotate"], [80, 2, 1, "", "scale"], [80, 2, 1, "", "transform"], [80, 2, 1, "", "translate"], [80, 3, 1, "", "x"], [80, 3, 1, "", "y"]], "sympy.geometry.point.Point3D": [[80, 2, 1, "", "are_collinear"], [80, 3, 1, "", "coordinates"], [80, 2, 1, "", "direction_cosine"], [80, 2, 1, "", "direction_ratio"], [80, 2, 1, "", "intersection"], [80, 2, 1, "", "scale"], [80, 2, 1, "", "transform"], [80, 2, 1, "", "translate"], [80, 3, 1, "", "x"], [80, 3, 1, "", "y"], [80, 3, 1, "", "z"]], "sympy.geometry.polygon": [[81, 1, 1, "", "Polygon"], [81, 1, 1, "", "RegularPolygon"], [81, 1, 1, "", "Triangle"]], "sympy.geometry.polygon.Polygon": [[81, 3, 1, "", "angles"], [81, 2, 1, "", "arbitrary_point"], [81, 3, 1, "", "area"], [81, 2, 1, "", "bisectors"], [81, 3, 1, "", "bounds"], [81, 3, 1, "", "centroid"], [81, 2, 1, "", "cut_section"], [81, 2, 1, "", "distance"], [81, 2, 1, "", "encloses_point"], [81, 2, 1, "", "first_moment_of_area"], [81, 2, 1, "", "intersection"], [81, 2, 1, "", "is_convex"], [81, 3, 1, "", "perimeter"], [81, 2, 1, "", "plot_interval"], [81, 2, 1, "", "polar_second_moment_of_area"], [81, 2, 1, "", "second_moment_of_area"], [81, 2, 1, "", "section_modulus"], [81, 3, 1, "", "sides"], [81, 3, 1, "", "vertices"]], "sympy.geometry.polygon.RegularPolygon": [[81, 3, 1, "", "angles"], [81, 3, 1, "", "apothem"], [81, 3, 1, "", "area"], [81, 3, 1, "", "args"], [81, 3, 1, "", "center"], [81, 3, 1, "", "centroid"], [81, 3, 1, "", "circumcenter"], [81, 3, 1, "", "circumcircle"], [81, 3, 1, "", "circumradius"], [81, 2, 1, "", "encloses_point"], [81, 3, 1, "", "exterior_angle"], [81, 3, 1, "", "incircle"], [81, 3, 1, "", "inradius"], [81, 3, 1, "", "interior_angle"], [81, 3, 1, "", "length"], [81, 3, 1, "", "radius"], [81, 2, 1, "", "reflect"], [81, 2, 1, "", "rotate"], [81, 3, 1, "", "rotation"], [81, 2, 1, "", "scale"], [81, 2, 1, "", "spin"], [81, 3, 1, "", "vertices"]], "sympy.geometry.polygon.Triangle": [[81, 3, 1, "", "altitudes"], [81, 2, 1, "", "bisectors"], [81, 3, 1, "", "circumcenter"], [81, 3, 1, "", "circumcircle"], [81, 3, 1, "", "circumradius"], [81, 3, 1, "", "eulerline"], [81, 3, 1, "", "excenters"], [81, 3, 1, "", "exradii"], [81, 3, 1, "", "incenter"], [81, 3, 1, "", "incircle"], [81, 3, 1, "", "inradius"], [81, 2, 1, "", "is_equilateral"], [81, 2, 1, "", "is_isosceles"], [81, 2, 1, "", "is_right"], [81, 2, 1, "", "is_scalene"], [81, 2, 1, "", "is_similar"], [81, 3, 1, "", "medial"], [81, 3, 1, "", "medians"], [81, 3, 1, "", "nine_point_circle"], [81, 3, 1, "", "orthocenter"], [81, 3, 1, "", "vertices"]], "sympy.geometry.util": [[82, 4, 1, "", "are_similar"], [82, 4, 1, "", "centroid"], [82, 4, 1, "", "convex_hull"], [82, 4, 1, "", "idiff"], [82, 4, 1, "", "intersection"]], "sympy.holonomic.holonomic": [[88, 1, 1, "", "DifferentialOperator"], [88, 1, 1, "", "DifferentialOperatorAlgebra"], [88, 4, 1, "", "DifferentialOperators"], [88, 1, 1, "", "HolonomicFunction"], [86, 4, 1, "", "_convert_poly_rat_alg"], [86, 4, 1, "", "_create_table"], [84, 4, 1, "", "expr_to_holonomic"], [84, 4, 1, "", "from_hyper"], [84, 4, 1, "", "from_meijerg"]], "sympy.holonomic.holonomic.DifferentialOperator": [[88, 2, 1, "", "is_singular"]], "sympy.holonomic.holonomic.HolonomicFunction": [[87, 2, 1, "", "composition"], [87, 2, 1, "", "diff"], [87, 2, 1, "", "evalf"], [87, 2, 1, "", "integrate"], [87, 2, 1, "", "series"], [87, 2, 1, "", "to_expr"], [87, 2, 1, "", "to_hyper"], [87, 2, 1, "", "to_meijerg"], [87, 2, 1, "", "to_sequence"]], "sympy.integrals.deltafunctions": [[92, 4, 1, "", "deltaintegrate"]], "sympy.integrals.heurisch": [[92, 4, 1, "", "components"], [92, 4, 1, "", "heurisch"]], "sympy.integrals.integrals": [[92, 1, 1, "", "Integral"], [92, 4, 1, "", "integrate"], [92, 4, 1, "", "line_integrate"]], "sympy.integrals.integrals.Integral": [[92, 2, 1, "", "as_sum"], [92, 2, 1, "", "doit"], [92, 3, 1, "", "free_symbols"], [92, 6, 1, "", "is_commutative"], [92, 2, 1, "", "principal_value"], [92, 2, 1, "", "transform"]], "sympy.integrals": [[92, 0, 0, "-", "intpoly"], [90, 0, 0, "-", "meijerint"], [90, 0, 0, "-", "meijerint_doc"], [92, 0, 0, "-", "transforms"]], "sympy.integrals.intpoly": [[92, 4, 1, "", "polytope_integrate"]], "sympy.integrals.manualintegrate": [[92, 4, 1, "", "integral_steps"], [92, 4, 1, "", "manualintegrate"]], "sympy.integrals.meijerint": [[90, 7, 1, "", "_CoeffExpValueError"], [90, 4, 1, "", "_check_antecedents"], [90, 4, 1, "", "_check_antecedents_1"], [90, 4, 1, "", "_check_antecedents_inversion"], [90, 4, 1, "", "_condsimp"], [90, 4, 1, "", "_create_lookup_table"], [90, 4, 1, "", "_dummy"], [90, 4, 1, "", "_dummy_"], [90, 4, 1, "", "_eval_cond"], [90, 4, 1, "", "_exponents"], [90, 4, 1, "", "_find_splitting_points"], [90, 4, 1, "", "_flip_g"], [90, 4, 1, "", "_functions"], [90, 4, 1, "", "_get_coeff_exp"], [90, 4, 1, "", "_guess_expansion"], [90, 4, 1, "", "_inflate_fox_h"], [90, 4, 1, "", "_inflate_g"], [90, 4, 1, "", "_int0oo"], [90, 4, 1, "", "_int0oo_1"], [90, 4, 1, "", "_int_inversion"], [90, 4, 1, "", "_is_analytic"], [90, 4, 1, "", "_meijerint_definite_2"], [90, 4, 1, "", "_meijerint_definite_3"], [90, 4, 1, "", "_meijerint_definite_4"], [90, 4, 1, "", "_meijerint_indefinite_1"], [90, 4, 1, "", "_mul_args"], [90, 4, 1, "", "_mul_as_two_parts"], [90, 4, 1, "", "_my_principal_branch"], [90, 4, 1, "", "_mytype"], [90, 4, 1, "", "_rewrite1"], [90, 4, 1, "", "_rewrite2"], [90, 4, 1, "", "_rewrite_inversion"], [90, 4, 1, "", "_rewrite_saxena"], [90, 4, 1, "", "_rewrite_saxena_1"], [90, 4, 1, "", "_rewrite_single"], [90, 4, 1, "", "_split_mul"], [90, 4, 1, "", "meijerint_definite"], [90, 4, 1, "", "meijerint_indefinite"], [90, 4, 1, "", "meijerint_inversion"]], "sympy.integrals.quadrature": [[92, 4, 1, "", "gauss_chebyshev_t"], [92, 4, 1, "", "gauss_chebyshev_u"], [92, 4, 1, "", "gauss_gen_laguerre"], [92, 4, 1, "", "gauss_hermite"], [92, 4, 1, "", "gauss_jacobi"], [92, 4, 1, "", "gauss_laguerre"], [92, 4, 1, "", "gauss_legendre"], [92, 4, 1, "", "gauss_lobatto"]], "sympy.integrals.rationaltools": [[92, 4, 1, "", "ratint"], [92, 4, 1, "", "ratint_logpart"], [92, 4, 1, "", "ratint_ratpart"]], "sympy.integrals.risch": [[92, 1, 1, "", "NonElementaryIntegral"], [92, 4, 1, "", "risch_integrate"]], "sympy.integrals.singularityfunctions": [[92, 4, 1, "", "singularityintegrate"]], "sympy.integrals.transforms": [[92, 1, 1, "", "CosineTransform"], [92, 1, 1, "", "FourierTransform"], [92, 1, 1, "", "HankelTransform"], [92, 1, 1, "", "IntegralTransform"], [92, 7, 1, "", "IntegralTransformError"], [92, 1, 1, "", "InverseCosineTransform"], [92, 1, 1, "", "InverseFourierTransform"], [92, 1, 1, "", "InverseHankelTransform"], [92, 1, 1, "", "InverseLaplaceTransform"], [92, 1, 1, "", "InverseMellinTransform"], [92, 1, 1, "", "InverseSineTransform"], [92, 1, 1, "", "LaplaceTransform"], [92, 1, 1, "", "MellinTransform"], [92, 1, 1, "", "SineTransform"], [92, 4, 1, "", "_fourier_transform"], [92, 4, 1, "", "cosine_transform"], [92, 4, 1, "", "fourier_transform"], [92, 4, 1, "", "hankel_transform"], [92, 4, 1, "", "inverse_cosine_transform"], [92, 4, 1, "", "inverse_fourier_transform"], [92, 4, 1, "", "inverse_hankel_transform"], [92, 4, 1, "", "inverse_laplace_transform"], [92, 4, 1, "", "inverse_mellin_transform"], [92, 4, 1, "", "inverse_sine_transform"], [92, 4, 1, "", "laplace_correspondence"], [92, 4, 1, "", "laplace_initial_conds"], [92, 4, 1, "", "laplace_transform"], [92, 4, 1, "", "mellin_transform"], [92, 4, 1, "", "sine_transform"]], "sympy.integrals.transforms.IntegralTransform": [[92, 2, 1, "", "doit"], [92, 3, 1, "", "function"], [92, 3, 1, "", "function_variable"], [92, 3, 1, "", "transform_variable"]], "sympy.integrals.transforms.InverseLaplaceTransform": [[92, 2, 1, "", "doit"]], "sympy.integrals.transforms.LaplaceTransform": [[92, 2, 1, "", "doit"]], "sympy.integrals.trigonometry": [[92, 4, 1, "", "trigintegrate"]], "sympy.interactive": [[93, 0, 0, "-", "printing"], [93, 0, 0, "-", "session"]], "sympy.interactive.printing": [[93, 4, 1, "", "init_printing"]], "sympy.interactive.session": [[93, 4, 1, "", "enable_automatic_int_sympification"], [93, 4, 1, "", "enable_automatic_symbols"], [93, 4, 1, "", "init_ipython_session"], [93, 4, 1, "", "init_python_session"], [93, 4, 1, "", "init_session"], [93, 4, 1, "", "int_to_Integer"]], "sympy.liealgebras.cartan_matrix": [[94, 4, 1, "", "CartanMatrix"]], "sympy.liealgebras.cartan_type": [[94, 1, 1, "", "CartanType_generator"], [94, 1, 1, "", "Standard_Cartan"]], "sympy.liealgebras.cartan_type.Standard_Cartan": [[94, 2, 1, "", "rank"], [94, 2, 1, "", "series"]], "sympy.liealgebras.dynkin_diagram": [[94, 4, 1, "", "DynkinDiagram"]], "sympy.liealgebras.root_system": [[94, 1, 1, "", "RootSystem"]], "sympy.liealgebras.root_system.RootSystem": [[94, 2, 1, "", "add_as_roots"], [94, 2, 1, "", "add_simple_roots"], [94, 2, 1, "", "all_roots"], [94, 2, 1, "", "cartan_matrix"], [94, 2, 1, "", "dynkin_diagram"], [94, 2, 1, "", "root_space"], [94, 2, 1, "", "simple_roots"]], "sympy.liealgebras.type_a": [[94, 1, 1, "", "TypeA"]], "sympy.liealgebras.type_a.TypeA": [[94, 2, 1, "", "basic_root"], [94, 2, 1, "", "basis"], [94, 2, 1, "", "cartan_matrix"], [94, 2, 1, "", "dimension"], [94, 2, 1, "", "highest_root"], [94, 2, 1, "", "lie_algebra"], [94, 2, 1, "", "positive_roots"], [94, 2, 1, "", "roots"], [94, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_b": [[94, 1, 1, "", "TypeB"]], "sympy.liealgebras.type_b.TypeB": [[94, 2, 1, "", "basic_root"], [94, 2, 1, "", "basis"], [94, 2, 1, "", "cartan_matrix"], [94, 2, 1, "", "dimension"], [94, 2, 1, "", "lie_algebra"], [94, 2, 1, "", "positive_roots"], [94, 2, 1, "", "roots"], [94, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_c": [[94, 1, 1, "", "TypeC"]], "sympy.liealgebras.type_c.TypeC": [[94, 2, 1, "", "basic_root"], [94, 2, 1, "", "basis"], [94, 2, 1, "", "cartan_matrix"], [94, 2, 1, "", "dimension"], [94, 2, 1, "", "lie_algebra"], [94, 2, 1, "", "positive_roots"], [94, 2, 1, "", "roots"], [94, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_d": [[94, 1, 1, "", "TypeD"]], "sympy.liealgebras.type_d.TypeD": [[94, 2, 1, "", "basic_root"], [94, 2, 1, "", "basis"], [94, 2, 1, "", "cartan_matrix"], [94, 2, 1, "", "dimension"], [94, 2, 1, "", "lie_algebra"], [94, 2, 1, "", "positive_roots"], [94, 2, 1, "", "roots"], [94, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_e": [[94, 1, 1, "", "TypeE"]], "sympy.liealgebras.type_e.TypeE": [[94, 2, 1, "", "basic_root"], [94, 2, 1, "", "basis"], [94, 2, 1, "", "cartan_matrix"], [94, 2, 1, "", "dimension"], [94, 2, 1, "", "positive_roots"], [94, 2, 1, "", "roots"], [94, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_f": [[94, 1, 1, "", "TypeF"]], "sympy.liealgebras.type_f.TypeF": [[94, 2, 1, "", "basic_root"], [94, 2, 1, "", "basis"], [94, 2, 1, "", "cartan_matrix"], [94, 2, 1, "", "dimension"], [94, 2, 1, "", "positive_roots"], [94, 2, 1, "", "roots"], [94, 2, 1, "", "simple_root"]], "sympy.liealgebras.type_g": [[94, 1, 1, "", "TypeG"]], "sympy.liealgebras.type_g.TypeG": [[94, 2, 1, "", "basis"], [94, 2, 1, "", "cartan_matrix"], [94, 2, 1, "", "dimension"], [94, 2, 1, "", "positive_roots"], [94, 2, 1, "", "roots"], [94, 2, 1, "", "simple_root"]], "sympy.liealgebras.weyl_group": [[94, 1, 1, "", "WeylGroup"]], "sympy.liealgebras.weyl_group.WeylGroup": [[94, 2, 1, "", "coxeter_diagram"], [94, 2, 1, "", "delete_doubles"], [94, 2, 1, "", "element_order"], [94, 2, 1, "", "generators"], [94, 2, 1, "", "group_name"], [94, 2, 1, "", "group_order"], [94, 2, 1, "", "matrix_form"]], "sympy.logic.boolalg": [[95, 4, 1, "", "ANFform"], [95, 1, 1, "", "And"], [95, 1, 1, "", "Boolean"], [95, 1, 1, "", "BooleanFalse"], [95, 1, 1, "", "BooleanTrue"], [95, 1, 1, "", "Equivalent"], [95, 1, 1, "", "Exclusive"], [95, 1, 1, "", "ITE"], [95, 1, 1, "", "Implies"], [95, 1, 1, "", "Nand"], [95, 1, 1, "", "Nor"], [95, 1, 1, "", "Not"], [95, 1, 1, "", "Or"], [95, 4, 1, "", "POSform"], [95, 4, 1, "", "SOPform"], [95, 1, 1, "", "Xnor"], [95, 1, 1, "", "Xor"], [95, 4, 1, "", "anf_coeffs"], [95, 4, 1, "", "bool_map"], [95, 4, 1, "", "bool_maxterm"], [95, 4, 1, "", "bool_minterm"], [95, 4, 1, "", "bool_monomial"], [95, 4, 1, "", "distribute_and_over_or"], [95, 4, 1, "", "distribute_or_over_and"], [95, 4, 1, "", "distribute_xor_over_and"], [95, 4, 1, "", "eliminate_implications"], [95, 4, 1, "", "gateinputcount"], [95, 4, 1, "", "integer_to_term"], [95, 4, 1, "", "is_anf"], [95, 4, 1, "", "is_cnf"], [95, 4, 1, "", "is_dnf"], [95, 4, 1, "", "is_nnf"], [95, 4, 1, "", "simplify_logic"], [95, 4, 1, "", "term_to_integer"], [95, 4, 1, "", "to_anf"], [95, 4, 1, "", "to_cnf"], [95, 4, 1, "", "to_dnf"], [95, 4, 1, "", "to_int_repr"], [95, 4, 1, "", "to_nnf"], [95, 4, 1, "", "truth_table"]], "sympy.logic.boolalg.Boolean": [[95, 2, 1, "", "as_set"], [95, 2, 1, "", "equals"]], "sympy.logic.boolalg.BooleanFalse": [[95, 2, 1, "", "as_set"]], "sympy.logic.boolalg.BooleanTrue": [[95, 2, 1, "", "as_set"]], "sympy.logic": [[95, 0, 0, "-", "inference"]], "sympy.logic.inference": [[95, 4, 1, "", "satisfiable"]], "sympy.matrices": [[96, 0, 0, "-", "common"], [98, 0, 0, "-", "expressions"], [99, 0, 0, "-", "immutable"], [101, 0, 0, "-", "matrices"], [103, 0, 0, "-", "sparse"], [104, 0, 0, "-", "sparsetools"]], "sympy.matrices.common": [[96, 1, 1, "", "MatrixCommon"], [96, 1, 1, "", "MatrixKind"]], "sympy.matrices.common.MatrixCommon": [[96, 3, 1, "", "C"], [96, 3, 1, "", "H"], [96, 3, 1, "", "T"], [96, 2, 1, "", "__abs__"], [96, 2, 1, "", "__add__"], [96, 2, 1, "", "__getitem__"], [96, 2, 1, "", "__len__"], [96, 2, 1, "", "__mul__"], [96, 2, 1, "", "__pow__"], [96, 5, 1, "", "__weakref__"], [96, 2, 1, "", "adjoint"], [96, 2, 1, "", "applyfunc"], [96, 2, 1, "", "as_real_imag"], [96, 2, 1, "", "atoms"], [96, 2, 1, "", "col"], [96, 2, 1, "", "col_del"], [96, 2, 1, "", "col_insert"], [96, 2, 1, "", "col_join"], [96, 2, 1, "", "companion"], [96, 2, 1, "", "conjugate"], [96, 2, 1, "", "diag"], [96, 2, 1, "", "diagonal"], [96, 2, 1, "", "evalf"], [96, 2, 1, "", "expand"], [96, 2, 1, "", "extract"], [96, 2, 1, "", "eye"], [96, 3, 1, "", "free_symbols"], [96, 2, 1, "", "get_diag_blocks"], [96, 2, 1, "", "has"], [96, 2, 1, "", "hstack"], [96, 2, 1, "", "is_anti_symmetric"], [96, 2, 1, "", "is_diagonal"], [96, 3, 1, "", "is_hermitian"], [96, 3, 1, "", "is_lower"], [96, 3, 1, "", "is_lower_hessenberg"], [96, 3, 1, "", "is_square"], [96, 3, 1, "", "is_strongly_diagonally_dominant"], [96, 2, 1, "", "is_symbolic"], [96, 2, 1, "", "is_symmetric"], [96, 3, 1, "", "is_upper"], [96, 3, 1, "", "is_upper_hessenberg"], [96, 3, 1, "", "is_weakly_diagonally_dominant"], [96, 3, 1, "", "is_zero_matrix"], [96, 2, 1, "", "jordan_block"], [96, 2, 1, "", "lower_triangular"], [96, 2, 1, "", "multiply"], [96, 2, 1, "", "multiply_elementwise"], [96, 2, 1, "", "n"], [96, 2, 1, "", "ones"], [96, 2, 1, "", "permute"], [96, 2, 1, "", "permute_cols"], [96, 2, 1, "", "permute_rows"], [96, 2, 1, "", "pow"], [96, 2, 1, "", "refine"], [96, 2, 1, "", "replace"], [96, 2, 1, "", "reshape"], [96, 2, 1, "", "rmultiply"], [96, 2, 1, "", "rot90"], [96, 2, 1, "", "row"], [96, 2, 1, "", "row_del"], [96, 2, 1, "", "row_insert"], [96, 2, 1, "", "row_join"], [96, 3, 1, "", "shape"], [96, 2, 1, "", "simplify"], [96, 2, 1, "", "subs"], [96, 2, 1, "", "todod"], [96, 2, 1, "", "todok"], [96, 2, 1, "", "tolist"], [96, 2, 1, "", "trace"], [96, 2, 1, "", "transpose"], [96, 2, 1, "", "upper_triangular"], [96, 2, 1, "", "values"], [96, 2, 1, "", "vec"], [96, 2, 1, "", "vech"], [96, 2, 1, "", "vstack"], [96, 2, 1, "", "wilkinson"], [96, 2, 1, "", "xreplace"], [96, 2, 1, "", "zeros"]], "sympy.matrices.dense": [[97, 1, 1, "", "DenseMatrix"], [101, 4, 1, "", "GramSchmidt"], [97, 5, 1, "", "Matrix"], [97, 1, 1, "", "MutableDenseMatrix"], [101, 4, 1, "", "casoratian"], [101, 4, 1, "", "diag"], [101, 4, 1, "", "eye"], [101, 4, 1, "", "hessian"], [101, 4, 1, "", "jordan_cell"], [101, 4, 1, "", "list2numpy"], [101, 4, 1, "", "matrix2numpy"], [101, 4, 1, "", "matrix_multiply_elementwise"], [101, 4, 1, "", "ones"], [101, 4, 1, "", "randMatrix"], [101, 4, 1, "", "rot_axis1"], [101, 4, 1, "", "rot_axis2"], [101, 4, 1, "", "rot_axis3"], [101, 4, 1, "", "rot_ccw_axis1"], [101, 4, 1, "", "rot_ccw_axis2"], [101, 4, 1, "", "rot_ccw_axis3"], [101, 4, 1, "", "rot_givens"], [101, 4, 1, "", "symarray"], [101, 4, 1, "", "wronskian"], [101, 4, 1, "", "zeros"]], "sympy.matrices.dense.DenseMatrix": [[97, 2, 1, "", "LDLdecomposition"], [97, 2, 1, "", "as_immutable"], [97, 2, 1, "", "as_mutable"], [97, 2, 1, "", "cholesky"], [97, 2, 1, "", "lower_triangular_solve"], [97, 2, 1, "", "upper_triangular_solve"]], "sympy.matrices.dense.MutableDenseMatrix": [[97, 2, 1, "", "simplify"]], "sympy.matrices.expressions": [[98, 1, 1, "", "CompanionMatrix"], [98, 1, 1, "", "FunctionMatrix"], [98, 1, 1, "", "HadamardPower"], [98, 1, 1, "", "HadamardProduct"], [98, 1, 1, "", "Identity"], [98, 1, 1, "", "Inverse"], [98, 1, 1, "", "MatAdd"], [98, 1, 1, "", "MatMul"], [98, 1, 1, "", "MatPow"], [98, 1, 1, "", "MatrixExpr"], [98, 1, 1, "", "MatrixPermute"], [98, 1, 1, "", "MatrixSet"], [98, 1, 1, "", "MatrixSymbol"], [98, 1, 1, "", "PermutationMatrix"], [98, 1, 1, "", "Trace"], [98, 1, 1, "", "Transpose"], [98, 1, 1, "", "ZeroMatrix"], [98, 0, 0, "-", "blockmatrix"], [98, 4, 1, "", "hadamard_product"]], "sympy.matrices.expressions.MatrixExpr": [[98, 3, 1, "", "T"], [98, 2, 1, "", "as_coeff_Mul"], [98, 2, 1, "", "as_explicit"], [98, 2, 1, "", "as_mutable"], [98, 2, 1, "", "equals"], [98, 2, 1, "", "from_index_summation"]], "sympy.matrices.expressions.blockmatrix": [[98, 1, 1, "", "BlockDiagMatrix"], [98, 1, 1, "", "BlockMatrix"], [98, 4, 1, "", "block_collapse"]], "sympy.matrices.expressions.blockmatrix.BlockDiagMatrix": [[98, 2, 1, "", "get_diag_blocks"]], "sympy.matrices.expressions.blockmatrix.BlockMatrix": [[98, 2, 1, "", "LDUdecomposition"], [98, 2, 1, "", "LUdecomposition"], [98, 2, 1, "", "UDLdecomposition"], [98, 2, 1, "", "schur"], [98, 2, 1, "", "transpose"]], "sympy.matrices.immutable": [[99, 1, 1, "", "ImmutableDenseMatrix"], [99, 5, 1, "", "ImmutableMatrix"], [103, 1, 1, "", "ImmutableSparseMatrix"]], "sympy.matrices.matrices": [[101, 1, 1, "", "MatrixBase"], [101, 1, 1, "", "MatrixCalculus"], [101, 1, 1, "", "MatrixDeterminant"], [101, 1, 1, "", "MatrixEigen"], [101, 1, 1, "", "MatrixError"], [101, 1, 1, "", "MatrixReductions"], [101, 1, 1, "", "MatrixSubspaces"], [101, 1, 1, "", "NonSquareMatrixError"], [101, 1, 1, "", "ShapeError"], [101, 4, 1, "", "a2idx"]], "sympy.matrices.matrices.MatrixBase": [[101, 3, 1, "", "D"], [101, 2, 1, "", "LDLdecomposition"], [101, 2, 1, "", "LDLsolve"], [101, 2, 1, "", "LUdecomposition"], [101, 2, 1, "", "LUdecompositionFF"], [101, 2, 1, "", "LUdecomposition_Simple"], [101, 2, 1, "", "LUsolve"], [101, 2, 1, "", "QRdecomposition"], [101, 2, 1, "", "QRsolve"], [101, 2, 1, "", "add"], [101, 2, 1, "", "analytic_func"], [101, 2, 1, "", "cholesky"], [101, 2, 1, "", "cholesky_solve"], [101, 2, 1, "", "condition_number"], [101, 2, 1, "", "connected_components"], [101, 2, 1, "", "connected_components_decomposition"], [101, 2, 1, "", "copy"], [101, 2, 1, "", "cross"], [101, 2, 1, "", "diagonal_solve"], [101, 2, 1, "", "dot"], [101, 2, 1, "", "dual"], [101, 2, 1, "", "exp"], [101, 2, 1, "", "gauss_jordan_solve"], [101, 2, 1, "", "hat"], [101, 2, 1, "", "inv"], [101, 2, 1, "", "inv_mod"], [101, 2, 1, "", "inverse_ADJ"], [101, 2, 1, "", "inverse_BLOCK"], [101, 2, 1, "", "inverse_CH"], [101, 2, 1, "", "inverse_GE"], [101, 2, 1, "", "inverse_LDL"], [101, 2, 1, "", "inverse_LU"], [101, 2, 1, "", "inverse_QR"], [101, 2, 1, "", "irregular"], [101, 2, 1, "", "is_nilpotent"], [101, 2, 1, "", "key2bounds"], [101, 2, 1, "", "key2ij"], [101, 2, 1, "", "log"], [101, 2, 1, "", "lower_triangular_solve"], [101, 2, 1, "", "norm"], [101, 2, 1, "", "normalized"], [101, 2, 1, "", "pinv"], [101, 2, 1, "", "pinv_solve"], [101, 2, 1, "", "print_nonzero"], [101, 2, 1, "", "project"], [101, 2, 1, "", "rank_decomposition"], [101, 2, 1, "", "singular_value_decomposition"], [101, 2, 1, "", "solve"], [101, 2, 1, "", "solve_least_squares"], [101, 2, 1, "", "strongly_connected_components"], [101, 2, 1, "", "strongly_connected_components_decomposition"], [101, 2, 1, "", "table"], [101, 2, 1, "", "upper_hessenberg_decomposition"], [101, 2, 1, "", "upper_triangular_solve"], [101, 2, 1, "", "vee"]], "sympy.matrices.matrices.MatrixCalculus": [[101, 2, 1, "", "diff"], [101, 2, 1, "", "integrate"], [101, 2, 1, "", "jacobian"], [101, 2, 1, "", "limit"]], "sympy.matrices.matrices.MatrixDeterminant": [[101, 2, 1, "", "adjugate"], [101, 2, 1, "", "charpoly"], [101, 2, 1, "", "cofactor"], [101, 2, 1, "", "cofactor_matrix"], [101, 2, 1, "", "det"], [101, 2, 1, "", "minor"], [101, 2, 1, "", "minor_submatrix"], [101, 2, 1, "", "per"]], "sympy.matrices.matrices.MatrixEigen": [[101, 2, 1, "", "bidiagonal_decomposition"], [101, 2, 1, "", "bidiagonalize"], [101, 2, 1, "", "diagonalize"], [101, 2, 1, "", "eigenvals"], [101, 2, 1, "", "eigenvects"], [101, 2, 1, "", "is_diagonalizable"], [101, 3, 1, "", "is_indefinite"], [101, 3, 1, "", "is_negative_definite"], [101, 3, 1, "", "is_negative_semidefinite"], [101, 3, 1, "", "is_positive_definite"], [101, 3, 1, "", "is_positive_semidefinite"], [101, 2, 1, "", "jordan_form"], [101, 2, 1, "", "left_eigenvects"], [101, 2, 1, "", "singular_values"]], "sympy.matrices.matrices.MatrixReductions": [[101, 2, 1, "", "echelon_form"], [101, 2, 1, "", "elementary_col_op"], [101, 2, 1, "", "elementary_row_op"], [101, 3, 1, "", "is_echelon"], [101, 2, 1, "", "rank"], [101, 2, 1, "", "rref"]], "sympy.matrices.matrices.MatrixSubspaces": [[101, 2, 1, "", "columnspace"], [101, 2, 1, "", "nullspace"], [101, 2, 1, "", "orthogonalize"], [101, 2, 1, "", "rowspace"]], "sympy.matrices.normalforms": [[102, 4, 1, "", "hermite_normal_form"], [102, 4, 1, "", "smith_normal_form"]], "sympy.matrices.sparse": [[103, 1, 1, "", "MutableSparseMatrix"], [103, 5, 1, "", "SparseMatrix"]], "sympy.matrices.sparsetools": [[104, 2, 1, "", "_csrtodok"], [104, 2, 1, "", "_doktocsr"], [104, 2, 1, "", "banded"]], "sympy.ntheory": [[105, 0, 0, "-", "bbp_pi"], [105, 0, 0, "-", "continued_fraction"], [105, 0, 0, "-", "digits"], [105, 0, 0, "-", "ecm"], [105, 0, 0, "-", "egyptian_fraction"], [105, 0, 0, "-", "factor_"], [105, 0, 0, "-", "generate"], [105, 1, 1, "", "mobius"], [105, 0, 0, "-", "modular"], [105, 0, 0, "-", "multinomial"], [105, 0, 0, "-", "partitions_"], [105, 0, 0, "-", "primetest"], [105, 0, 0, "-", "qs"], [105, 0, 0, "-", "residue_ntheory"]], "sympy.ntheory.bbp_pi": [[105, 4, 1, "", "pi_hex_digits"]], "sympy.ntheory.continued_fraction": [[105, 4, 1, "", "continued_fraction"], [105, 4, 1, "", "continued_fraction_convergents"], [105, 4, 1, "", "continued_fraction_iterator"], [105, 4, 1, "", "continued_fraction_periodic"], [105, 4, 1, "", "continued_fraction_reduce"]], "sympy.ntheory.digits": [[105, 4, 1, "", "count_digits"], [105, 4, 1, "", "digits"], [105, 4, 1, "", "is_palindromic"]], "sympy.ntheory.ecm": [[105, 4, 1, "", "ecm"]], "sympy.ntheory.egyptian_fraction": [[105, 4, 1, "", "egyptian_fraction"]], "sympy.ntheory.factor_": [[105, 4, 1, "", "abundance"], [105, 4, 1, "", "antidivisor_count"], [105, 4, 1, "", "antidivisors"], [105, 4, 1, "", "core"], [105, 4, 1, "", "digits"], [105, 4, 1, "", "divisor_count"], [105, 1, 1, "", "divisor_sigma"], [105, 4, 1, "", "divisors"], [105, 4, 1, "", "factorint"], [105, 4, 1, "", "factorrat"], [105, 4, 1, "", "is_abundant"], [105, 4, 1, "", "is_amicable"], [105, 4, 1, "", "is_deficient"], [105, 4, 1, "", "is_mersenne_prime"], [105, 4, 1, "", "is_perfect"], [105, 4, 1, "", "mersenne_prime_exponent"], [105, 4, 1, "", "multiplicity"], [105, 4, 1, "", "perfect_power"], [105, 4, 1, "", "pollard_pm1"], [105, 4, 1, "", "pollard_rho"], [105, 4, 1, "", "primefactors"], [105, 1, 1, "", "primenu"], [105, 1, 1, "", "primeomega"], [105, 4, 1, "", "proper_divisor_count"], [105, 4, 1, "", "proper_divisors"], [105, 1, 1, "", "reduced_totient"], [105, 4, 1, "", "smoothness"], [105, 4, 1, "", "smoothness_p"], [105, 1, 1, "", "totient"], [105, 4, 1, "", "trailing"], [105, 4, 1, "", "udivisor_count"], [105, 1, 1, "", "udivisor_sigma"], [105, 4, 1, "", "udivisors"]], "sympy.ntheory.generate": [[105, 1, 1, "", "Sieve"], [105, 4, 1, "", "composite"], [105, 4, 1, "", "compositepi"], [105, 4, 1, "", "cycle_length"], [105, 4, 1, "", "nextprime"], [105, 4, 1, "", "prevprime"], [105, 4, 1, "", "prime"], [105, 4, 1, "", "primepi"], [105, 4, 1, "", "primerange"], [105, 4, 1, "", "primorial"], [105, 4, 1, "", "randprime"]], "sympy.ntheory.generate.Sieve": [[105, 2, 1, "", "extend"], [105, 2, 1, "", "extend_to_no"], [105, 2, 1, "", "mobiusrange"], [105, 2, 1, "", "primerange"], [105, 2, 1, "", "search"], [105, 2, 1, "", "totientrange"]], "sympy.ntheory.modular": [[105, 4, 1, "", "crt"], [105, 4, 1, "", "crt1"], [105, 4, 1, "", "crt2"], [105, 4, 1, "", "solve_congruence"], [105, 4, 1, "", "symmetric_residue"]], "sympy.ntheory.multinomial": [[105, 4, 1, "", "binomial_coefficients"], [105, 4, 1, "", "binomial_coefficients_list"], [105, 4, 1, "", "multinomial_coefficients"], [105, 4, 1, "", "multinomial_coefficients_iterator"]], "sympy.ntheory.partitions_": [[105, 4, 1, "", "npartitions"]], "sympy.ntheory.primetest": [[105, 4, 1, "", "is_euler_pseudoprime"], [105, 4, 1, "", "is_extra_strong_lucas_prp"], [105, 4, 1, "", "is_gaussian_prime"], [105, 4, 1, "", "is_lucas_prp"], [105, 4, 1, "", "is_square"], [105, 4, 1, "", "is_strong_lucas_prp"], [105, 4, 1, "", "isprime"], [105, 4, 1, "", "mr"]], "sympy.ntheory.qs": [[105, 4, 1, "", "qs"]], "sympy.ntheory.residue_ntheory": [[105, 4, 1, "", "discrete_log"], [105, 4, 1, "", "is_nthpow_residue"], [105, 4, 1, "", "is_primitive_root"], [105, 4, 1, "", "is_quad_residue"], [105, 4, 1, "", "jacobi_symbol"], [105, 4, 1, "", "legendre_symbol"], [105, 4, 1, "", "n_order"], [105, 4, 1, "", "nthroot_mod"], [105, 4, 1, "", "primitive_root"], [105, 4, 1, "", "quadratic_residues"], [105, 4, 1, "", "sqrt_mod"], [105, 4, 1, "", "sqrt_mod_iter"]], "sympy.parsing.latex": [[107, 1, 1, "", "LaTeXParsingError"], [107, 4, 1, "", "parse_latex"]], "sympy.parsing.mathematica": [[107, 4, 1, "", "parse_mathematica"]], "sympy.parsing.maxima": [[107, 4, 1, "", "parse_maxima"]], "sympy.parsing": [[107, 0, 0, "-", "sym_expr"]], "sympy.parsing.sym_expr": [[107, 1, 1, "", "SymPyExpression"]], "sympy.parsing.sym_expr.SymPyExpression": [[107, 2, 1, "", "convert_to_c"], [107, 2, 1, "", "convert_to_expr"], [107, 2, 1, "", "convert_to_fortran"], [107, 2, 1, "", "convert_to_python"], [107, 2, 1, "", "return_expr"]], "sympy.parsing.sympy_parser": [[107, 4, 1, "", "auto_number"], [107, 4, 1, "", "auto_symbol"], [107, 4, 1, "", "convert_xor"], [107, 4, 1, "", "eval_expr"], [107, 4, 1, "", "factorial_notation"], [107, 4, 1, "", "function_exponentiation"], [107, 4, 1, "", "implicit_application"], [107, 4, 1, "", "implicit_multiplication"], [107, 4, 1, "", "implicit_multiplication_application"], [107, 4, 1, "", "lambda_notation"], [107, 4, 1, "", "parse_expr"], [107, 4, 1, "", "rationalize"], [107, 4, 1, "", "repeated_decimals"], [107, 4, 1, "", "split_symbols"], [107, 4, 1, "", "split_symbols_custom"], [107, 6, 1, "", "standard_transformations"], [107, 4, 1, "", "stringify_expr"]], "sympy.physics.continuum_mechanics": [[108, 0, 0, "-", "beam"], [111, 0, 0, "-", "truss"]], "sympy.physics.continuum_mechanics.beam": [[108, 1, 1, "", "Beam"], [108, 1, 1, "", "Beam3D"]], "sympy.physics.continuum_mechanics.beam.Beam": [[108, 3, 1, "", "applied_loads"], [108, 2, 1, "", "apply_load"], [108, 2, 1, "", "apply_support"], [108, 3, 1, "", "area"], [108, 2, 1, "", "bending_moment"], [108, 3, 1, "", "boundary_conditions"], [108, 3, 1, "", "cross_section"], [108, 2, 1, "", "deflection"], [108, 2, 1, "", "draw"], [108, 3, 1, "", "elastic_modulus"], [108, 3, 1, "", "ild_moment"], [108, 3, 1, "", "ild_reactions"], [108, 3, 1, "", "ild_shear"], [108, 2, 1, "", "join"], [108, 3, 1, "", "length"], [108, 3, 1, "", "load"], [108, 2, 1, "", "max_bmoment"], [108, 2, 1, "", "max_deflection"], [108, 2, 1, "", "max_shear_force"], [108, 2, 1, "", "plot_bending_moment"], [108, 2, 1, "", "plot_deflection"], [108, 2, 1, "", "plot_ild_moment"], [108, 2, 1, "", "plot_ild_reactions"], [108, 2, 1, "", "plot_ild_shear"], [108, 2, 1, "", "plot_loading_results"], [108, 2, 1, "", "plot_shear_force"], [108, 2, 1, "", "plot_shear_stress"], [108, 2, 1, "", "plot_slope"], [108, 2, 1, "", "point_cflexure"], [108, 3, 1, "", "reaction_loads"], [108, 2, 1, "", "remove_load"], [108, 3, 1, "", "second_moment"], [108, 2, 1, "", "shear_force"], [108, 2, 1, "", "shear_stress"], [108, 2, 1, "", "slope"], [108, 2, 1, "", "solve_for_ild_moment"], [108, 2, 1, "", "solve_for_ild_reactions"], [108, 2, 1, "", "solve_for_ild_shear"], [108, 2, 1, "", "solve_for_reaction_loads"], [108, 3, 1, "", "variable"]], "sympy.physics.continuum_mechanics.beam.Beam3D": [[108, 2, 1, "", "angular_deflection"], [108, 2, 1, "", "apply_load"], [108, 2, 1, "", "apply_moment_load"], [108, 3, 1, "", "area"], [108, 2, 1, "", "axial_force"], [108, 2, 1, "", "axial_stress"], [108, 2, 1, "", "bending_moment"], [108, 3, 1, "", "boundary_conditions"], [108, 2, 1, "", "deflection"], [108, 3, 1, "", "load_vector"], [108, 2, 1, "", "max_bending_moment"], [108, 2, 1, "", "max_bmoment"], [108, 2, 1, "", "max_deflection"], [108, 2, 1, "", "max_shear_force"], [108, 3, 1, "", "moment_load_vector"], [108, 2, 1, "", "plot_bending_moment"], [108, 2, 1, "", "plot_deflection"], [108, 2, 1, "", "plot_loading_results"], [108, 2, 1, "", "plot_shear_force"], [108, 2, 1, "", "plot_shear_stress"], [108, 2, 1, "", "plot_slope"], [108, 2, 1, "", "polar_moment"], [108, 3, 1, "", "second_moment"], [108, 2, 1, "", "shear_force"], [108, 3, 1, "", "shear_modulus"], [108, 2, 1, "", "shear_stress"], [108, 2, 1, "", "slope"], [108, 2, 1, "", "solve_for_reaction_loads"], [108, 2, 1, "", "solve_for_torsion"], [108, 2, 1, "", "torsional_moment"]], "sympy.physics.continuum_mechanics.truss": [[111, 1, 1, "", "Truss"]], "sympy.physics.continuum_mechanics.truss.Truss": [[111, 2, 1, "", "add_member"], [111, 2, 1, "", "add_node"], [111, 2, 1, "", "apply_load"], [111, 2, 1, "", "apply_support"], [111, 2, 1, "", "change_member_label"], [111, 2, 1, "", "change_node_label"], [111, 3, 1, "", "internal_forces"], [111, 3, 1, "", "loads"], [111, 3, 1, "", "member_labels"], [111, 3, 1, "", "members"], [111, 3, 1, "", "node_labels"], [111, 3, 1, "", "node_positions"], [111, 3, 1, "", "nodes"], [111, 3, 1, "", "reaction_loads"], [111, 2, 1, "", "remove_load"], [111, 2, 1, "", "remove_member"], [111, 2, 1, "", "remove_node"], [111, 2, 1, "", "remove_support"], [111, 2, 1, "", "solve"], [111, 3, 1, "", "supports"]], "sympy.physics": [[114, 0, 0, "-", "control"], [117, 0, 0, "-", "hydrogen"], [118, 0, 0, "-", "matrices"], [139, 0, 0, "-", "mechanics"], [154, 0, 0, "-", "paulialgebra"], [155, 0, 0, "-", "qho_1d"], [179, 0, 0, "-", "secondquant"], [180, 0, 0, "-", "sho"], [196, 0, 0, "-", "vector"], [199, 0, 0, "-", "wigner"]], "sympy.physics.control.control_plots": [[113, 2, 1, "", "bode_magnitude_numerical_data"], [113, 2, 1, "", "bode_magnitude_plot"], [113, 2, 1, "", "bode_phase_numerical_data"], [113, 2, 1, "", "bode_phase_plot"], [113, 2, 1, "", "bode_plot"], [113, 2, 1, "", "impulse_response_numerical_data"], [113, 2, 1, "", "impulse_response_plot"], [113, 2, 1, "", "pole_zero_numerical_data"], [113, 2, 1, "", "pole_zero_plot"], [113, 2, 1, "", "ramp_response_numerical_data"], [113, 2, 1, "", "ramp_response_plot"], [113, 2, 1, "", "step_response_numerical_data"], [113, 2, 1, "", "step_response_plot"]], "sympy.physics.control": [[115, 0, 0, "-", "lti"]], "sympy.physics.control.lti": [[115, 1, 1, "", "Feedback"], [115, 1, 1, "", "MIMOFeedback"], [115, 1, 1, "", "MIMOParallel"], [115, 1, 1, "", "MIMOSeries"], [115, 1, 1, "", "Parallel"], [115, 1, 1, "", "Series"], [115, 1, 1, "", "TransferFunction"], [115, 1, 1, "", "TransferFunctionMatrix"], [115, 4, 1, "", "backward_diff"], [115, 4, 1, "", "bilinear"]], "sympy.physics.control.lti.Feedback": [[115, 2, 1, "", "doit"], [115, 3, 1, "", "sensitivity"], [115, 3, 1, "", "sign"], [115, 3, 1, "", "sys1"], [115, 3, 1, "", "sys2"], [115, 3, 1, "", "var"]], "sympy.physics.control.lti.MIMOFeedback": [[115, 2, 1, "", "doit"], [115, 3, 1, "", "sensitivity"], [115, 3, 1, "", "sign"], [115, 3, 1, "", "sys1"], [115, 3, 1, "", "sys2"], [115, 3, 1, "", "var"]], "sympy.physics.control.lti.MIMOParallel": [[115, 2, 1, "", "doit"], [115, 3, 1, "", "num_inputs"], [115, 3, 1, "", "num_outputs"], [115, 3, 1, "", "shape"], [115, 3, 1, "", "var"]], "sympy.physics.control.lti.MIMOSeries": [[115, 2, 1, "", "doit"], [115, 3, 1, "", "num_inputs"], [115, 3, 1, "", "num_outputs"], [115, 3, 1, "", "shape"], [115, 3, 1, "", "var"]], "sympy.physics.control.lti.Parallel": [[115, 2, 1, "", "doit"], [115, 3, 1, "", "is_biproper"], [115, 3, 1, "", "is_proper"], [115, 3, 1, "", "is_strictly_proper"], [115, 2, 1, "", "to_expr"], [115, 3, 1, "", "var"]], "sympy.physics.control.lti.Series": [[115, 2, 1, "", "doit"], [115, 3, 1, "", "is_biproper"], [115, 3, 1, "", "is_proper"], [115, 3, 1, "", "is_strictly_proper"], [115, 2, 1, "", "to_expr"], [115, 3, 1, "", "var"]], "sympy.physics.control.lti.TransferFunction": [[115, 2, 1, "", "dc_gain"], [115, 3, 1, "", "den"], [115, 2, 1, "", "expand"], [115, 2, 1, "", "from_rational_expression"], [115, 3, 1, "", "is_biproper"], [115, 3, 1, "", "is_proper"], [115, 2, 1, "", "is_stable"], [115, 3, 1, "", "is_strictly_proper"], [115, 3, 1, "", "num"], [115, 2, 1, "", "poles"], [115, 2, 1, "", "to_expr"], [115, 3, 1, "", "var"], [115, 2, 1, "", "zeros"]], "sympy.physics.control.lti.TransferFunctionMatrix": [[115, 2, 1, "", "elem_poles"], [115, 2, 1, "", "elem_zeros"], [115, 2, 1, "", "expand"], [115, 2, 1, "", "from_Matrix"], [115, 3, 1, "", "num_inputs"], [115, 3, 1, "", "num_outputs"], [115, 3, 1, "", "shape"], [115, 2, 1, "", "transpose"], [115, 3, 1, "", "var"]], "sympy.physics.hep": [[116, 0, 0, "-", "gamma_matrices"]], "sympy.physics.hep.gamma_matrices": [[116, 4, 1, "", "extract_type_tens"], [116, 4, 1, "", "gamma_trace"], [116, 4, 1, "", "kahane_simplify"], [116, 4, 1, "", "simplify_gpgp"]], "sympy.physics.hydrogen": [[117, 4, 1, "", "E_nl"], [117, 4, 1, "", "E_nl_dirac"], [117, 4, 1, "", "Psi_nlm"], [117, 4, 1, "", "R_nl"]], "sympy.physics.matrices": [[118, 4, 1, "", "mdft"], [118, 4, 1, "", "mgamma"], [118, 4, 1, "", "msigma"], [118, 4, 1, "", "pat_matrix"]], "sympy.physics.mechanics": [[120, 0, 0, "-", "body"], [121, 4, 1, "", "find_dynamicsymbols"], [123, 0, 0, "-", "joint"], [123, 0, 0, "-", "jointsmethod"], [124, 0, 0, "-", "kane"], [124, 0, 0, "-", "lagrange"], [125, 0, 0, "-", "linearize"], [121, 4, 1, "", "msubs"], [128, 0, 0, "-", "system"]], "sympy.physics.mechanics.body": [[120, 1, 1, "", "Body"]], "sympy.physics.mechanics.body.Body": [[120, 2, 1, "", "ang_vel_in"], [120, 2, 1, "", "apply_force"], [120, 2, 1, "", "apply_torque"], [120, 2, 1, "", "clear_loads"], [120, 2, 1, "", "dcm"], [120, 3, 1, "", "inertia"], [120, 2, 1, "", "kinetic_energy"], [120, 2, 1, "", "masscenter_vel"], [120, 2, 1, "", "parallel_axis"], [120, 2, 1, "", "remove_load"], [120, 3, 1, "", "x"], [120, 3, 1, "", "y"], [120, 3, 1, "", "z"]], "sympy.physics.mechanics.functions": [[126, 4, 1, "", "Lagrangian"], [126, 4, 1, "", "angular_momentum"], [126, 4, 1, "", "kinetic_energy"], [126, 4, 1, "", "linear_momentum"], [126, 4, 1, "", "potential_energy"]], "sympy.physics.mechanics.inertia": [[126, 1, 1, "", "Inertia"], [126, 4, 1, "", "inertia"], [126, 4, 1, "", "inertia_of_point_mass"]], "sympy.physics.mechanics.inertia.Inertia": [[126, 2, 1, "", "from_inertia_scalars"]], "sympy.physics.mechanics.joint": [[123, 1, 1, "", "CylindricalJoint"], [123, 1, 1, "", "Joint"], [123, 1, 1, "", "PinJoint"], [123, 1, 1, "", "PlanarJoint"], [123, 1, 1, "", "PrismaticJoint"], [123, 1, 1, "", "SphericalJoint"], [123, 1, 1, "", "WeldJoint"]], "sympy.physics.mechanics.joint.CylindricalJoint": [[123, 3, 1, "", "joint_axis"], [123, 3, 1, "", "rotation_coordinate"], [123, 3, 1, "", "rotation_speed"], [123, 3, 1, "", "translation_coordinate"], [123, 3, 1, "", "translation_speed"]], "sympy.physics.mechanics.joint.Joint": [[123, 3, 1, "", "child"], [123, 3, 1, "", "child_axis"], [123, 3, 1, "", "child_point"], [123, 3, 1, "", "coordinates"], [123, 3, 1, "", "kdes"], [123, 3, 1, "", "name"], [123, 3, 1, "", "parent"], [123, 3, 1, "", "parent_axis"], [123, 3, 1, "", "parent_point"], [123, 3, 1, "", "speeds"]], "sympy.physics.mechanics.joint.PinJoint": [[123, 3, 1, "", "joint_axis"]], "sympy.physics.mechanics.joint.PlanarJoint": [[123, 3, 1, "", "planar_coordinates"], [123, 3, 1, "", "planar_speeds"], [123, 3, 1, "", "planar_vectors"], [123, 3, 1, "", "rotation_axis"], [123, 3, 1, "", "rotation_coordinate"], [123, 3, 1, "", "rotation_speed"]], "sympy.physics.mechanics.joint.PrismaticJoint": [[123, 3, 1, "", "joint_axis"]], "sympy.physics.mechanics.jointsmethod": [[123, 1, 1, "", "JointsMethod"]], "sympy.physics.mechanics.jointsmethod.JointsMethod": [[123, 3, 1, "", "bodies"], [123, 3, 1, "", "forcing"], [123, 3, 1, "", "forcing_full"], [123, 2, 1, "", "form_eoms"], [123, 3, 1, "", "kdes"], [123, 3, 1, "", "loads"], [123, 3, 1, "", "mass_matrix"], [123, 3, 1, "", "mass_matrix_full"], [123, 3, 1, "", "method"], [123, 3, 1, "", "q"], [123, 2, 1, "", "rhs"], [123, 3, 1, "", "u"]], "sympy.physics.mechanics.kane": [[124, 1, 1, "", "KanesMethod"]], "sympy.physics.mechanics.kane.KanesMethod": [[124, 3, 1, "", "auxiliary_eqs"], [124, 3, 1, "", "forcing"], [124, 3, 1, "", "forcing_full"], [124, 3, 1, "", "forcing_kin"], [124, 2, 1, "", "kanes_equations"], [124, 2, 1, "", "kindiffdict"], [124, 2, 1, "", "linearize"], [124, 3, 1, "", "mass_matrix"], [124, 3, 1, "", "mass_matrix_full"], [124, 3, 1, "", "mass_matrix_kin"], [124, 2, 1, "", "rhs"], [124, 2, 1, "", "to_linearizer"]], "sympy.physics.mechanics.lagrange": [[124, 1, 1, "", "LagrangesMethod"]], "sympy.physics.mechanics.lagrange.LagrangesMethod": [[124, 3, 1, "", "forcing"], [124, 3, 1, "", "forcing_full"], [124, 2, 1, "", "form_lagranges_equations"], [124, 2, 1, "", "linearize"], [124, 3, 1, "", "mass_matrix"], [124, 3, 1, "", "mass_matrix_full"], [124, 2, 1, "", "rhs"], [124, 2, 1, "", "solve_multipliers"], [124, 2, 1, "", "to_linearizer"]], "sympy.physics.mechanics.linearize": [[125, 1, 1, "", "Linearizer"]], "sympy.physics.mechanics.linearize.Linearizer": [[125, 2, 1, "", "linearize"]], "sympy.physics.mechanics.loads": [[126, 1, 1, "", "Force"], [126, 1, 1, "", "Torque"]], "sympy.physics.mechanics.particle": [[126, 1, 1, "", "Particle"]], "sympy.physics.mechanics.particle.Particle": [[126, 2, 1, "", "angular_momentum"], [126, 2, 1, "", "kinetic_energy"], [126, 2, 1, "", "linear_momentum"], [126, 3, 1, "", "mass"], [126, 3, 1, "", "masscenter"], [126, 3, 1, "", "name"], [126, 2, 1, "", "parallel_axis"], [126, 3, 1, "", "point"], [126, 3, 1, "", "potential_energy"]], "sympy.physics.mechanics.rigidbody": [[126, 1, 1, "", "RigidBody"]], "sympy.physics.mechanics.rigidbody.RigidBody": [[126, 2, 1, "", "angular_momentum"], [126, 3, 1, "", "central_inertia"], [126, 3, 1, "", "frame"], [126, 3, 1, "", "inertia"], [126, 2, 1, "", "kinetic_energy"], [126, 2, 1, "", "linear_momentum"], [126, 3, 1, "", "mass"], [126, 3, 1, "", "masscenter"], [126, 3, 1, "", "name"], [126, 2, 1, "", "parallel_axis"], [126, 3, 1, "", "potential_energy"], [126, 3, 1, "", "x"], [126, 3, 1, "", "y"], [126, 3, 1, "", "z"]], "sympy.physics.mechanics.system": [[128, 1, 1, "", "SymbolicSystem"]], "sympy.physics.mechanics.system.SymbolicSystem": [[128, 3, 1, "", "alg_con"], [128, 3, 1, "", "bodies"], [128, 3, 1, "", "comb_explicit_rhs"], [128, 3, 1, "", "comb_implicit_mat"], [128, 3, 1, "", "comb_implicit_rhs"], [128, 2, 1, "", "compute_explicit_form"], [128, 2, 1, "", "constant_symbols"], [128, 3, 1, "", "coordinates"], [128, 3, 1, "", "dyn_implicit_mat"], [128, 3, 1, "", "dyn_implicit_rhs"], [128, 2, 1, "", "dynamic_symbols"], [128, 3, 1, "", "kin_explicit_rhs"], [128, 3, 1, "", "loads"], [128, 3, 1, "", "speeds"], [128, 3, 1, "", "states"]], "sympy.physics.optics": [[148, 0, 0, "-", "gaussopt"], [150, 0, 0, "-", "medium"], [151, 0, 0, "-", "polarization"], [152, 0, 0, "-", "utils"], [153, 0, 0, "-", "waves"]], "sympy.physics.optics.gaussopt": [[148, 1, 1, "", "BeamParameter"], [148, 1, 1, "", "CurvedMirror"], [148, 1, 1, "", "CurvedRefraction"], [148, 1, 1, "", "FlatMirror"], [148, 1, 1, "", "FlatRefraction"], [148, 1, 1, "", "FreeSpace"], [148, 1, 1, "", "GeometricRay"], [148, 1, 1, "", "RayTransferMatrix"], [148, 1, 1, "", "ThinLens"], [148, 4, 1, "", "conjugate_gauss_beams"], [148, 4, 1, "", "gaussian_conj"], [148, 4, 1, "", "geometric_conj_ab"], [148, 4, 1, "", "geometric_conj_af"], [148, 4, 1, "", "geometric_conj_bf"], [148, 4, 1, "", "rayleigh2waist"], [148, 4, 1, "", "waist2rayleigh"]], "sympy.physics.optics.gaussopt.BeamParameter": [[148, 3, 1, "", "divergence"], [148, 3, 1, "", "gouy"], [148, 3, 1, "", "q"], [148, 3, 1, "", "radius"], [148, 3, 1, "", "w"], [148, 3, 1, "", "w_0"], [148, 3, 1, "", "waist_approximation_limit"]], "sympy.physics.optics.gaussopt.GeometricRay": [[148, 3, 1, "", "angle"], [148, 3, 1, "", "height"]], "sympy.physics.optics.gaussopt.RayTransferMatrix": [[148, 3, 1, "", "A"], [148, 3, 1, "", "B"], [148, 3, 1, "", "C"], [148, 3, 1, "", "D"]], "sympy.physics.optics.medium": [[150, 1, 1, "", "Medium"]], "sympy.physics.optics.medium.Medium": [[150, 3, 1, "", "refractive_index"], [150, 3, 1, "", "speed"]], "sympy.physics.optics.polarization": [[151, 4, 1, "", "half_wave_retarder"], [151, 4, 1, "", "jones_2_stokes"], [151, 4, 1, "", "jones_vector"], [151, 4, 1, "", "linear_polarizer"], [151, 4, 1, "", "mueller_matrix"], [151, 4, 1, "", "phase_retarder"], [151, 4, 1, "", "polarizing_beam_splitter"], [151, 4, 1, "", "quarter_wave_retarder"], [151, 4, 1, "", "reflective_filter"], [151, 4, 1, "", "stokes_vector"], [151, 4, 1, "", "transmissive_filter"]], "sympy.physics.optics.utils": [[152, 4, 1, "", "brewster_angle"], [152, 4, 1, "", "critical_angle"], [152, 4, 1, "", "deviation"], [152, 4, 1, "", "fresnel_coefficients"], [152, 4, 1, "", "hyperfocal_distance"], [152, 4, 1, "", "lens_formula"], [152, 4, 1, "", "lens_makers_formula"], [152, 4, 1, "", "mirror_formula"], [152, 4, 1, "", "refraction_angle"], [152, 4, 1, "", "transverse_magnification"]], "sympy.physics.optics.waves": [[153, 1, 1, "", "TWave"]], "sympy.physics.optics.waves.TWave": [[153, 3, 1, "", "amplitude"], [153, 3, 1, "", "angular_velocity"], [153, 3, 1, "", "frequency"], [153, 3, 1, "", "n"], [153, 3, 1, "", "phase"], [153, 3, 1, "", "speed"], [153, 3, 1, "", "time_period"], [153, 3, 1, "", "wavelength"], [153, 3, 1, "", "wavenumber"]], "sympy.physics.paulialgebra": [[154, 4, 1, "", "evaluate_pauli_product"]], "sympy.physics.qho_1d": [[155, 4, 1, "", "E_n"], [155, 4, 1, "", "coherent_state"], [155, 4, 1, "", "psi_n"]], "sympy.physics.quantum": [[156, 0, 0, "-", "anticommutator"], [157, 0, 0, "-", "cartesian"], [158, 0, 0, "-", "cg"], [159, 0, 0, "-", "circuitplot"], [160, 0, 0, "-", "commutator"], [161, 0, 0, "-", "constants"], [162, 0, 0, "-", "dagger"], [163, 0, 0, "-", "gate"], [164, 0, 0, "-", "grover"], [165, 0, 0, "-", "hilbert"], [167, 0, 0, "-", "innerproduct"], [168, 0, 0, "-", "operator"], [169, 0, 0, "-", "operatorset"], [170, 0, 0, "-", "piab"], [171, 0, 0, "-", "qapply"], [172, 0, 0, "-", "qft"], [173, 0, 0, "-", "qubit"], [174, 0, 0, "-", "represent"], [175, 0, 0, "-", "shor"], [176, 0, 0, "-", "spin"], [177, 0, 0, "-", "state"], [178, 0, 0, "-", "tensorproduct"]], "sympy.physics.quantum.anticommutator": [[156, 1, 1, "", "AntiCommutator"]], "sympy.physics.quantum.anticommutator.AntiCommutator": [[156, 2, 1, "", "doit"]], "sympy.physics.quantum.cartesian": [[157, 1, 1, "", "PositionBra3D"], [157, 1, 1, "", "PositionKet3D"], [157, 1, 1, "", "PositionState3D"], [157, 1, 1, "", "PxBra"], [157, 1, 1, "", "PxKet"], [157, 1, 1, "", "PxOp"], [157, 1, 1, "", "XBra"], [157, 1, 1, "", "XKet"], [157, 1, 1, "", "XOp"], [157, 1, 1, "", "YOp"], [157, 1, 1, "", "ZOp"]], "sympy.physics.quantum.cartesian.PositionState3D": [[157, 3, 1, "", "position_x"], [157, 3, 1, "", "position_y"], [157, 3, 1, "", "position_z"]], "sympy.physics.quantum.cartesian.PxBra": [[157, 3, 1, "", "momentum"]], "sympy.physics.quantum.cartesian.PxKet": [[157, 3, 1, "", "momentum"]], "sympy.physics.quantum.cartesian.XBra": [[157, 3, 1, "", "position"]], "sympy.physics.quantum.cartesian.XKet": [[157, 3, 1, "", "position"]], "sympy.physics.quantum.cg": [[158, 1, 1, "", "CG"], [158, 1, 1, "", "Wigner3j"], [158, 1, 1, "", "Wigner6j"], [158, 1, 1, "", "Wigner9j"], [158, 4, 1, "", "cg_simp"]], "sympy.physics.quantum.circuitplot": [[159, 1, 1, "", "CircuitPlot"], [159, 4, 1, "", "CreateCGate"], [159, 1, 1, "", "Mx"], [159, 1, 1, "", "Mz"], [159, 4, 1, "", "circuit_plot"], [159, 4, 1, "", "labeller"]], "sympy.physics.quantum.circuitplot.CircuitPlot": [[159, 2, 1, "", "control_line"], [159, 2, 1, "", "control_point"], [159, 2, 1, "", "not_point"], [159, 2, 1, "", "one_qubit_box"], [159, 2, 1, "", "swap_point"], [159, 2, 1, "", "two_qubit_box"], [159, 2, 1, "", "update"]], "sympy.physics.quantum.commutator": [[160, 1, 1, "", "Commutator"]], "sympy.physics.quantum.commutator.Commutator": [[160, 2, 1, "", "doit"]], "sympy.physics.quantum.constants": [[161, 1, 1, "", "HBar"]], "sympy.physics.quantum.dagger": [[162, 1, 1, "", "Dagger"]], "sympy.physics.quantum.gate": [[163, 1, 1, "", "CGate"], [163, 1, 1, "", "CGateS"], [163, 5, 1, "", "CNOT"], [163, 1, 1, "", "CNotGate"], [163, 1, 1, "", "Gate"], [163, 5, 1, "", "H"], [163, 1, 1, "", "HadamardGate"], [163, 1, 1, "", "IdentityGate"], [163, 1, 1, "", "OneQubitGate"], [163, 5, 1, "", "Phase"], [163, 1, 1, "", "PhaseGate"], [163, 5, 1, "", "S"], [163, 5, 1, "", "SWAP"], [163, 1, 1, "", "SwapGate"], [163, 5, 1, "", "T"], [163, 1, 1, "", "TGate"], [163, 1, 1, "", "TwoQubitGate"], [163, 1, 1, "", "UGate"], [163, 5, 1, "", "X"], [163, 1, 1, "", "XGate"], [163, 5, 1, "", "Y"], [163, 1, 1, "", "YGate"], [163, 5, 1, "", "Z"], [163, 1, 1, "", "ZGate"], [163, 4, 1, "", "gate_simp"], [163, 4, 1, "", "gate_sort"], [163, 4, 1, "", "normalized"], [163, 4, 1, "", "random_circuit"]], "sympy.physics.quantum.gate.CGate": [[163, 3, 1, "", "controls"], [163, 2, 1, "", "decompose"], [163, 2, 1, "", "eval_controls"], [163, 3, 1, "", "gate"], [163, 3, 1, "", "min_qubits"], [163, 3, 1, "", "nqubits"], [163, 2, 1, "", "plot_gate"], [163, 3, 1, "", "targets"]], "sympy.physics.quantum.gate.CNotGate": [[163, 3, 1, "", "controls"], [163, 3, 1, "", "gate"], [163, 3, 1, "", "min_qubits"], [163, 3, 1, "", "targets"]], "sympy.physics.quantum.gate.Gate": [[163, 2, 1, "", "get_target_matrix"], [163, 3, 1, "", "min_qubits"], [163, 3, 1, "", "nqubits"], [163, 3, 1, "", "targets"]], "sympy.physics.quantum.gate.SwapGate": [[163, 2, 1, "", "decompose"]], "sympy.physics.quantum.gate.UGate": [[163, 2, 1, "", "get_target_matrix"], [163, 3, 1, "", "targets"]], "sympy.physics.quantum.grover": [[164, 1, 1, "", "OracleGate"], [164, 1, 1, "", "WGate"], [164, 4, 1, "", "apply_grover"], [164, 4, 1, "", "grover_iteration"], [164, 4, 1, "", "superposition_basis"]], "sympy.physics.quantum.grover.OracleGate": [[164, 3, 1, "", "search_function"], [164, 3, 1, "", "targets"]], "sympy.physics.quantum.hilbert": [[165, 1, 1, "", "ComplexSpace"], [165, 1, 1, "", "DirectSumHilbertSpace"], [165, 1, 1, "", "FockSpace"], [165, 1, 1, "", "HilbertSpace"], [165, 1, 1, "", "L2"], [165, 1, 1, "", "TensorPowerHilbertSpace"], [165, 1, 1, "", "TensorProductHilbertSpace"]], "sympy.physics.quantum.hilbert.DirectSumHilbertSpace": [[165, 2, 1, "", "eval"], [165, 3, 1, "", "spaces"]], "sympy.physics.quantum.hilbert.HilbertSpace": [[165, 3, 1, "", "dimension"]], "sympy.physics.quantum.hilbert.TensorProductHilbertSpace": [[165, 2, 1, "", "eval"], [165, 3, 1, "", "spaces"]], "sympy.physics.quantum.innerproduct": [[167, 1, 1, "", "InnerProduct"]], "sympy.physics.quantum.operator": [[168, 1, 1, "", "DifferentialOperator"], [168, 1, 1, "", "HermitianOperator"], [168, 1, 1, "", "IdentityOperator"], [168, 1, 1, "", "Operator"], [168, 1, 1, "", "OuterProduct"], [168, 1, 1, "", "UnitaryOperator"]], "sympy.physics.quantum.operator.DifferentialOperator": [[168, 3, 1, "", "expr"], [168, 3, 1, "", "free_symbols"], [168, 3, 1, "", "function"], [168, 3, 1, "", "variables"]], "sympy.physics.quantum.operator.OuterProduct": [[168, 3, 1, "", "bra"], [168, 3, 1, "", "ket"]], "sympy.physics.quantum.operatorset": [[169, 4, 1, "", "operators_to_state"], [169, 4, 1, "", "state_to_operators"]], "sympy.physics.quantum.piab": [[170, 1, 1, "", "PIABBra"], [170, 1, 1, "", "PIABHamiltonian"], [170, 1, 1, "", "PIABKet"]], "sympy.physics.quantum.qapply": [[171, 4, 1, "", "qapply"]], "sympy.physics.quantum.qft": [[172, 1, 1, "", "IQFT"], [172, 1, 1, "", "QFT"], [172, 5, 1, "", "Rk"], [172, 1, 1, "", "RkGate"]], "sympy.physics.quantum.qft.IQFT": [[172, 2, 1, "", "decompose"]], "sympy.physics.quantum.qft.QFT": [[172, 2, 1, "", "decompose"]], "sympy.physics.quantum.qubit": [[173, 1, 1, "", "IntQubit"], [173, 1, 1, "", "IntQubitBra"], [173, 1, 1, "", "Qubit"], [173, 1, 1, "", "QubitBra"], [173, 4, 1, "", "matrix_to_density"], [173, 4, 1, "", "matrix_to_qubit"], [173, 4, 1, "", "measure_all"], [173, 4, 1, "", "measure_all_oneshot"], [173, 4, 1, "", "measure_partial"], [173, 4, 1, "", "measure_partial_oneshot"], [173, 4, 1, "", "qubit_to_matrix"]], "sympy.physics.quantum.represent": [[174, 4, 1, "", "enumerate_states"], [174, 4, 1, "", "get_basis"], [174, 4, 1, "", "integrate_result"], [174, 4, 1, "", "rep_expectation"], [174, 4, 1, "", "rep_innerproduct"], [174, 4, 1, "", "represent"]], "sympy.physics.quantum.shor": [[175, 1, 1, "", "CMod"], [175, 4, 1, "", "period_find"], [175, 4, 1, "", "shor"]], "sympy.physics.quantum.shor.CMod": [[175, 3, 1, "", "N"], [175, 3, 1, "", "a"], [175, 3, 1, "", "t"]], "sympy.physics.quantum.spin": [[176, 1, 1, "", "J2Op"], [176, 1, 1, "", "JxBra"], [176, 1, 1, "", "JxBraCoupled"], [176, 1, 1, "", "JxKet"], [176, 1, 1, "", "JxKetCoupled"], [176, 1, 1, "", "JyBra"], [176, 1, 1, "", "JyBraCoupled"], [176, 1, 1, "", "JyKet"], [176, 1, 1, "", "JyKetCoupled"], [176, 1, 1, "", "JzBra"], [176, 1, 1, "", "JzBraCoupled"], [176, 1, 1, "", "JzKet"], [176, 1, 1, "", "JzKetCoupled"], [176, 1, 1, "", "JzOp"], [176, 1, 1, "", "Rotation"], [176, 1, 1, "", "WignerD"], [176, 4, 1, "", "couple"], [176, 4, 1, "", "uncouple"]], "sympy.physics.quantum.spin.Rotation": [[176, 2, 1, "", "D"], [176, 2, 1, "", "d"]], "sympy.physics.quantum.state": [[177, 1, 1, "", "Bra"], [177, 1, 1, "", "BraBase"], [177, 1, 1, "", "Ket"], [177, 1, 1, "", "KetBase"], [177, 1, 1, "", "OrthogonalBra"], [177, 1, 1, "", "OrthogonalKet"], [177, 1, 1, "", "OrthogonalState"], [177, 1, 1, "", "State"], [177, 1, 1, "", "StateBase"], [177, 1, 1, "", "TimeDepBra"], [177, 1, 1, "", "TimeDepKet"], [177, 1, 1, "", "TimeDepState"], [177, 1, 1, "", "Wavefunction"]], "sympy.physics.quantum.state.StateBase": [[177, 3, 1, "", "dual"], [177, 2, 1, "", "dual_class"], [177, 3, 1, "", "operators"]], "sympy.physics.quantum.state.TimeDepState": [[177, 3, 1, "", "label"], [177, 3, 1, "", "time"]], "sympy.physics.quantum.state.Wavefunction": [[177, 3, 1, "", "expr"], [177, 3, 1, "", "is_commutative"], [177, 3, 1, "", "is_normalized"], [177, 3, 1, "", "limits"], [177, 3, 1, "", "norm"], [177, 2, 1, "", "normalize"], [177, 2, 1, "", "prob"], [177, 3, 1, "", "variables"]], "sympy.physics.quantum.tensorproduct": [[178, 1, 1, "", "TensorProduct"], [178, 4, 1, "", "tensor_product_simp"]], "sympy.physics.secondquant": [[179, 1, 1, "", "AnnihilateBoson"], [179, 1, 1, "", "AnnihilateFermion"], [179, 1, 1, "", "AntiSymmetricTensor"], [179, 5, 1, "", "B"], [179, 5, 1, "", "BBra"], [179, 5, 1, "", "BKet"], [179, 5, 1, "", "Bd"], [179, 1, 1, "", "BosonicBasis"], [179, 1, 1, "", "Commutator"], [179, 1, 1, "", "CreateBoson"], [179, 1, 1, "", "CreateFermion"], [179, 1, 1, "", "Dagger"], [179, 5, 1, "", "F"], [179, 5, 1, "", "FBra"], [179, 5, 1, "", "FKet"], [179, 5, 1, "", "Fd"], [179, 1, 1, "", "FixedBosonicBasis"], [179, 1, 1, "", "FockState"], [179, 1, 1, "", "FockStateBosonBra"], [179, 1, 1, "", "FockStateBosonKet"], [179, 1, 1, "", "FockStateBra"], [179, 1, 1, "", "FockStateFermionBra"], [179, 1, 1, "", "FockStateFermionKet"], [179, 1, 1, "", "FockStateKet"], [179, 1, 1, "", "InnerProduct"], [179, 1, 1, "", "KroneckerDelta"], [179, 1, 1, "", "NO"], [179, 1, 1, "", "PermutationOperator"], [179, 1, 1, "", "VarBosonicBasis"], [179, 4, 1, "", "apply_operators"], [179, 4, 1, "", "contraction"], [179, 4, 1, "", "evaluate_deltas"], [179, 4, 1, "", "matrix_rep"], [179, 4, 1, "", "simplify_index_permutations"], [179, 4, 1, "", "substitute_dummies"], [179, 4, 1, "", "wicks"]], "sympy.physics.secondquant.AnnihilateBoson": [[179, 2, 1, "", "apply_operator"]], "sympy.physics.secondquant.AnnihilateFermion": [[179, 2, 1, "", "apply_operator"], [179, 3, 1, "", "is_only_q_annihilator"], [179, 3, 1, "", "is_only_q_creator"], [179, 3, 1, "", "is_q_annihilator"], [179, 3, 1, "", "is_q_creator"]], "sympy.physics.secondquant.AntiSymmetricTensor": [[179, 3, 1, "", "lower"], [179, 3, 1, "", "symbol"], [179, 3, 1, "", "upper"]], "sympy.physics.secondquant.Commutator": [[179, 2, 1, "", "doit"], [179, 2, 1, "", "eval"]], "sympy.physics.secondquant.CreateBoson": [[179, 2, 1, "", "apply_operator"]], "sympy.physics.secondquant.CreateFermion": [[179, 2, 1, "", "apply_operator"], [179, 3, 1, "", "is_only_q_annihilator"], [179, 3, 1, "", "is_only_q_creator"], [179, 3, 1, "", "is_q_annihilator"], [179, 3, 1, "", "is_q_creator"]], "sympy.physics.secondquant.Dagger": [[179, 2, 1, "", "eval"]], "sympy.physics.secondquant.FixedBosonicBasis": [[179, 2, 1, "", "index"], [179, 2, 1, "", "state"]], "sympy.physics.secondquant.InnerProduct": [[179, 3, 1, "", "bra"], [179, 3, 1, "", "ket"]], "sympy.physics.secondquant.KroneckerDelta": [[179, 2, 1, "", "eval"], [179, 3, 1, "", "indices_contain_equal_information"], [179, 3, 1, "", "is_above_fermi"], [179, 3, 1, "", "is_below_fermi"], [179, 3, 1, "", "is_only_above_fermi"], [179, 3, 1, "", "is_only_below_fermi"], [179, 3, 1, "", "killable_index"], [179, 3, 1, "", "preferred_index"]], "sympy.physics.secondquant.NO": [[179, 2, 1, "", "doit"], [179, 2, 1, "", "get_subNO"], [179, 3, 1, "", "has_q_annihilators"], [179, 3, 1, "", "has_q_creators"], [179, 2, 1, "", "iter_q_annihilators"], [179, 2, 1, "", "iter_q_creators"]], "sympy.physics.secondquant.PermutationOperator": [[179, 2, 1, "", "get_permuted"]], "sympy.physics.secondquant.VarBosonicBasis": [[179, 2, 1, "", "index"], [179, 2, 1, "", "state"]], "sympy.physics.sho": [[180, 4, 1, "", "E_nl"], [180, 4, 1, "", "R_nl"]], "sympy.physics.units": [[181, 0, 0, "-", "dimensions"], [185, 0, 0, "-", "prefixes"], [186, 0, 0, "-", "quantities"], [187, 0, 0, "-", "unitsystem"], [186, 0, 0, "-", "util"]], "sympy.physics.units.dimensions": [[181, 1, 1, "", "Dimension"], [181, 1, 1, "", "DimensionSystem"]], "sympy.physics.units.dimensions.Dimension": [[181, 2, 1, "", "has_integer_powers"]], "sympy.physics.units.dimensions.DimensionSystem": [[181, 3, 1, "", "can_transf_matrix"], [181, 3, 1, "", "dim"], [181, 2, 1, "", "dim_can_vector"], [181, 2, 1, "", "dim_vector"], [181, 3, 1, "", "inv_can_transf_matrix"], [181, 3, 1, "", "is_consistent"], [181, 2, 1, "", "is_dimensionless"], [181, 3, 1, "", "list_can_dims"], [181, 2, 1, "", "print_dim_base"]], "sympy.physics.units.prefixes": [[185, 1, 1, "", "Prefix"]], "sympy.physics.units.quantities": [[186, 1, 1, "", "Quantity"]], "sympy.physics.units.quantities.Quantity": [[186, 3, 1, "", "abbrev"], [186, 2, 1, "", "convert_to"], [186, 3, 1, "", "free_symbols"], [186, 3, 1, "", "is_prefixed"], [186, 3, 1, "", "scale_factor"], [186, 2, 1, "", "set_global_relative_scale_factor"]], "sympy.physics.units.unitsystem": [[187, 1, 1, "", "UnitSystem"]], "sympy.physics.units.unitsystem.UnitSystem": [[187, 3, 1, "", "dim"], [187, 2, 1, "", "extend"], [187, 2, 1, "", "get_units_non_prefixed"], [187, 3, 1, "", "is_consistent"]], "sympy.physics.units.util": [[186, 4, 1, "", "convert_to"]], "sympy.physics.vector.dyadic": [[189, 1, 1, "", "Dyadic"]], "sympy.physics.vector.dyadic.Dyadic": [[189, 2, 1, "", "applyfunc"], [189, 2, 1, "", "cross"], [189, 2, 1, "", "doit"], [189, 2, 1, "", "dot"], [189, 2, 1, "", "dt"], [189, 2, 1, "", "express"], [189, 3, 1, "", "func"], [189, 2, 1, "", "simplify"], [189, 2, 1, "", "subs"], [189, 2, 1, "", "to_matrix"], [189, 2, 1, "", "xreplace"]], "sympy.physics.vector": [[191, 4, 1, "", "dynamicsymbols"], [193, 0, 0, "-", "functions"], [193, 0, 0, "-", "point"]], "sympy.physics.vector.fieldfunctions": [[190, 4, 1, "", "curl"], [190, 4, 1, "", "divergence"], [190, 4, 1, "", "gradient"], [190, 4, 1, "", "is_conservative"], [190, 4, 1, "", "is_solenoidal"], [190, 4, 1, "", "scalar_potential"], [190, 4, 1, "", "scalar_potential_difference"]], "sympy.physics.vector.frame": [[189, 1, 1, "", "CoordinateSym"], [189, 1, 1, "", "ReferenceFrame"]], "sympy.physics.vector.frame.ReferenceFrame": [[189, 2, 1, "", "ang_acc_in"], [189, 2, 1, "", "ang_vel_in"], [189, 2, 1, "", "dcm"], [189, 2, 1, "", "orient"], [189, 2, 1, "", "orient_axis"], [189, 2, 1, "", "orient_body_fixed"], [189, 2, 1, "", "orient_explicit"], [189, 2, 1, "", "orient_quaternion"], [189, 2, 1, "", "orient_space_fixed"], [189, 2, 1, "", "orientnew"], [189, 2, 1, "", "partial_velocity"], [189, 2, 1, "", "set_ang_acc"], [189, 2, 1, "", "set_ang_vel"], [189, 3, 1, "", "u"], [189, 2, 1, "", "variable_map"], [189, 3, 1, "", "x"], [189, 3, 1, "", "xx"], [189, 3, 1, "", "xy"], [189, 3, 1, "", "xz"], [189, 3, 1, "", "y"], [189, 3, 1, "", "yx"], [189, 3, 1, "", "yy"], [189, 3, 1, "", "yz"], [189, 3, 1, "", "z"], [189, 3, 1, "", "zx"], [189, 3, 1, "", "zy"], [189, 3, 1, "", "zz"]], "sympy.physics.vector.functions": [[191, 4, 1, "", "cross"], [191, 4, 1, "", "dot"], [191, 4, 1, "", "express"], [193, 4, 1, "", "get_motion_params"], [193, 4, 1, "", "kinematic_equations"], [191, 4, 1, "", "outer"], [193, 4, 1, "", "partial_velocity"], [191, 4, 1, "", "time_derivative"]], "sympy.physics.vector.point": [[193, 1, 1, "", "Point"]], "sympy.physics.vector.point.Point": [[193, 2, 1, "", "a1pt_theory"], [193, 2, 1, "", "a2pt_theory"], [193, 2, 1, "", "acc"], [193, 2, 1, "", "locatenew"], [193, 2, 1, "", "partial_velocity"], [193, 2, 1, "", "pos_from"], [193, 2, 1, "", "set_acc"], [193, 2, 1, "", "set_pos"], [193, 2, 1, "", "set_vel"], [193, 2, 1, "", "v1pt_theory"], [193, 2, 1, "", "v2pt_theory"], [193, 2, 1, "", "vel"]], "sympy.physics.vector.printing": [[194, 4, 1, "", "init_vprinting"], [194, 4, 1, "", "vlatex"], [194, 4, 1, "", "vpprint"], [194, 4, 1, "", "vprint"]], "sympy.physics.vector.vector": [[189, 1, 1, "", "Vector"]], "sympy.physics.vector.vector.Vector": [[189, 2, 1, "", "angle_between"], [189, 2, 1, "", "applyfunc"], [189, 2, 1, "", "cross"], [189, 2, 1, "", "diff"], [189, 2, 1, "", "doit"], [189, 2, 1, "", "dot"], [189, 2, 1, "", "dt"], [189, 2, 1, "", "express"], [189, 2, 1, "", "free_dynamicsymbols"], [189, 2, 1, "", "free_symbols"], [189, 3, 1, "", "func"], [189, 2, 1, "", "magnitude"], [189, 2, 1, "", "normalize"], [189, 2, 1, "", "outer"], [189, 2, 1, "", "separate"], [189, 2, 1, "", "simplify"], [189, 2, 1, "", "subs"], [189, 2, 1, "", "to_matrix"], [189, 2, 1, "", "xreplace"]], "sympy.physics.wigner": [[199, 4, 1, "", "clebsch_gordan"], [199, 4, 1, "", "dot_rot_grad_Ynm"], [199, 4, 1, "", "gaunt"], [199, 4, 1, "", "racah"], [199, 4, 1, "", "real_gaunt"], [199, 4, 1, "", "wigner_3j"], [199, 4, 1, "", "wigner_6j"], [199, 4, 1, "", "wigner_9j"], [199, 4, 1, "", "wigner_d"], [199, 4, 1, "", "wigner_d_small"]], "sympy.plotting": [[200, 0, 0, "-", "plot"], [200, 0, 0, "-", "pygletplot"]], "sympy.plotting.plot": [[200, 1, 1, "", "BaseBackend"], [200, 1, 1, "", "BaseSeries"], [200, 1, 1, "", "Line2DBaseSeries"], [200, 1, 1, "", "Line3DBaseSeries"], [200, 1, 1, "", "LineOver1DRangeSeries"], [200, 1, 1, "", "MatplotlibBackend"], [200, 1, 1, "", "Parametric2DLineSeries"], [200, 1, 1, "", "Parametric3DLineSeries"], [200, 1, 1, "", "ParametricSurfaceSeries"], [200, 1, 1, "", "Plot"], [200, 1, 1, "", "PlotGrid"], [200, 1, 1, "", "SurfaceBaseSeries"], [200, 1, 1, "", "SurfaceOver2DRangeSeries"], [200, 1, 1, "", "TextBackend"], [200, 4, 1, "", "plot"], [200, 4, 1, "", "plot3d"], [200, 4, 1, "", "plot3d_parametric_line"], [200, 4, 1, "", "plot3d_parametric_surface"], [200, 4, 1, "", "plot_parametric"]], "sympy.plotting.plot.Line2DBaseSeries": [[200, 2, 1, "", "get_data"]], "sympy.plotting.plot.LineOver1DRangeSeries": [[200, 2, 1, "", "get_points"]], "sympy.plotting.plot.MatplotlibBackend": [[200, 2, 1, "", "get_segments"], [200, 2, 1, "", "process_series"]], "sympy.plotting.plot.Parametric2DLineSeries": [[200, 2, 1, "", "get_points"]], "sympy.plotting.plot.Plot": [[200, 2, 1, "", "append"], [200, 2, 1, "", "extend"]], "sympy.plotting.plot_implicit": [[200, 1, 1, "", "ImplicitSeries"], [200, 4, 1, "", "plot_implicit"]], "sympy.plotting.textplot": [[200, 4, 1, "", "textplot"]], "sympy.polys.agca.extensions": [[201, 1, 1, "", "ExtensionElement"], [201, 1, 1, "", "MonogenicFiniteExtension"]], "sympy.polys.agca.extensions.ExtensionElement": [[201, 2, 1, "", "inverse"]], "sympy.polys.agca.extensions.MonogenicFiniteExtension": [[201, 5, 1, "", "dtype"]], "sympy.polys.agca.homomorphisms": [[201, 1, 1, "", "ModuleHomomorphism"], [201, 4, 1, "", "homomorphism"]], "sympy.polys.agca.homomorphisms.ModuleHomomorphism": [[201, 2, 1, "", "image"], [201, 2, 1, "", "is_injective"], [201, 2, 1, "", "is_isomorphism"], [201, 2, 1, "", "is_surjective"], [201, 2, 1, "", "is_zero"], [201, 2, 1, "", "kernel"], [201, 2, 1, "", "quotient_codomain"], [201, 2, 1, "", "quotient_domain"], [201, 2, 1, "", "restrict_codomain"], [201, 2, 1, "", "restrict_domain"]], "sympy.polys.agca.ideals": [[201, 1, 1, "", "Ideal"]], "sympy.polys.agca.ideals.Ideal": [[201, 2, 1, "", "contains"], [201, 2, 1, "", "depth"], [201, 2, 1, "", "height"], [201, 2, 1, "", "intersect"], [201, 2, 1, "", "is_maximal"], [201, 2, 1, "", "is_primary"], [201, 2, 1, "", "is_prime"], [201, 2, 1, "", "is_principal"], [201, 2, 1, "", "is_radical"], [201, 2, 1, "", "is_whole_ring"], [201, 2, 1, "", "is_zero"], [201, 2, 1, "", "product"], [201, 2, 1, "", "quotient"], [201, 2, 1, "", "radical"], [201, 2, 1, "", "reduce_element"], [201, 2, 1, "", "saturate"], [201, 2, 1, "", "subset"], [201, 2, 1, "", "union"]], "sympy.polys.agca.modules": [[201, 1, 1, "", "FreeModule"], [201, 1, 1, "", "FreeModuleElement"], [201, 1, 1, "", "Module"], [201, 1, 1, "", "QuotientModule"], [201, 1, 1, "", "QuotientModuleElement"], [201, 1, 1, "", "SubModule"], [201, 1, 1, "", "SubQuotientModule"]], "sympy.polys.agca.modules.FreeModule": [[201, 2, 1, "", "basis"], [201, 2, 1, "", "convert"], [201, 5, 1, "", "dtype"], [201, 2, 1, "", "identity_hom"], [201, 2, 1, "", "is_submodule"], [201, 2, 1, "", "is_zero"], [201, 2, 1, "", "multiply_ideal"], [201, 2, 1, "", "quotient_module"]], "sympy.polys.agca.modules.Module": [[201, 2, 1, "", "contains"], [201, 2, 1, "", "convert"], [201, 2, 1, "", "identity_hom"], [201, 2, 1, "", "is_submodule"], [201, 2, 1, "", "is_zero"], [201, 2, 1, "", "multiply_ideal"], [201, 2, 1, "", "quotient_module"], [201, 2, 1, "", "submodule"], [201, 2, 1, "", "subset"]], "sympy.polys.agca.modules.QuotientModule": [[201, 2, 1, "", "convert"], [201, 5, 1, "", "dtype"], [201, 2, 1, "", "identity_hom"], [201, 2, 1, "", "is_submodule"], [201, 2, 1, "", "is_zero"], [201, 2, 1, "", "quotient_hom"], [201, 2, 1, "", "submodule"]], "sympy.polys.agca.modules.QuotientModuleElement": [[201, 2, 1, "", "eq"]], "sympy.polys.agca.modules.SubModule": [[201, 2, 1, "", "convert"], [201, 2, 1, "", "identity_hom"], [201, 2, 1, "", "in_terms_of_generators"], [201, 2, 1, "", "inclusion_hom"], [201, 2, 1, "", "intersect"], [201, 2, 1, "", "is_full_module"], [201, 2, 1, "", "is_submodule"], [201, 2, 1, "", "is_zero"], [201, 2, 1, "", "module_quotient"], [201, 2, 1, "", "multiply_ideal"], [201, 2, 1, "", "quotient_module"], [201, 2, 1, "", "reduce_element"], [201, 2, 1, "", "submodule"], [201, 2, 1, "", "syzygy_module"], [201, 2, 1, "", "union"]], "sympy.polys.agca.modules.SubQuotientModule": [[201, 2, 1, "", "is_full_module"], [201, 2, 1, "", "quotient_hom"]], "sympy.polys.appellseqs": [[210, 4, 1, "", "andre_poly"], [210, 4, 1, "", "bernoulli_c_poly"], [210, 4, 1, "", "bernoulli_poly"], [210, 4, 1, "", "euler_poly"], [210, 4, 1, "", "genocchi_poly"]], "sympy.polys.constructor": [[210, 4, 1, "", "construct_domain"]], "sympy.polys.densearith": [[207, 4, 1, "", "dmp_abs"], [207, 4, 1, "", "dmp_add"], [207, 4, 1, "", "dmp_add_ground"], [207, 4, 1, "", "dmp_add_mul"], [207, 4, 1, "", "dmp_add_term"], [207, 4, 1, "", "dmp_div"], [207, 4, 1, "", "dmp_expand"], [207, 4, 1, "", "dmp_exquo"], [207, 4, 1, "", "dmp_exquo_ground"], [207, 4, 1, "", "dmp_ff_div"], [207, 4, 1, "", "dmp_l1_norm"], [207, 4, 1, "", "dmp_max_norm"], [207, 4, 1, "", "dmp_mul"], [207, 4, 1, "", "dmp_mul_ground"], [207, 4, 1, "", "dmp_mul_term"], [207, 4, 1, "", "dmp_neg"], [207, 4, 1, "", "dmp_pdiv"], [207, 4, 1, "", "dmp_pexquo"], [207, 4, 1, "", "dmp_pow"], [207, 4, 1, "", "dmp_pquo"], [207, 4, 1, "", "dmp_prem"], [207, 4, 1, "", "dmp_quo"], [207, 4, 1, "", "dmp_quo_ground"], [207, 4, 1, "", "dmp_rem"], [207, 4, 1, "", "dmp_rr_div"], [207, 4, 1, "", "dmp_sqr"], [207, 4, 1, "", "dmp_sub"], [207, 4, 1, "", "dmp_sub_ground"], [207, 4, 1, "", "dmp_sub_mul"], [207, 4, 1, "", "dmp_sub_term"], [207, 4, 1, "", "dup_lshift"], [207, 4, 1, "", "dup_rshift"]], "sympy.polys.densebasic": [[207, 4, 1, "", "dmp_LC"], [207, 4, 1, "", "dmp_TC"], [207, 4, 1, "", "dmp_apply_pairs"], [207, 4, 1, "", "dmp_convert"], [207, 4, 1, "", "dmp_copy"], [207, 4, 1, "", "dmp_deflate"], [207, 4, 1, "", "dmp_degree"], [207, 4, 1, "", "dmp_degree_in"], [207, 4, 1, "", "dmp_degree_list"], [207, 4, 1, "", "dmp_eject"], [207, 4, 1, "", "dmp_exclude"], [207, 4, 1, "", "dmp_from_dict"], [207, 4, 1, "", "dmp_from_sympy"], [207, 4, 1, "", "dmp_ground"], [207, 4, 1, "", "dmp_ground_LC"], [207, 4, 1, "", "dmp_ground_TC"], [207, 4, 1, "", "dmp_ground_nth"], [207, 4, 1, "", "dmp_ground_p"], [207, 4, 1, "", "dmp_grounds"], [207, 4, 1, "", "dmp_include"], [207, 4, 1, "", "dmp_inflate"], [207, 4, 1, "", "dmp_inject"], [207, 4, 1, "", "dmp_list_terms"], [207, 4, 1, "", "dmp_multi_deflate"], [207, 4, 1, "", "dmp_negative_p"], [207, 4, 1, "", "dmp_nest"], [207, 4, 1, "", "dmp_normal"], [207, 4, 1, "", "dmp_nth"], [207, 4, 1, "", "dmp_one"], [207, 4, 1, "", "dmp_one_p"], [207, 4, 1, "", "dmp_permute"], [207, 4, 1, "", "dmp_positive_p"], [207, 4, 1, "", "dmp_raise"], [207, 4, 1, "", "dmp_slice"], [207, 4, 1, "", "dmp_strip"], [207, 4, 1, "", "dmp_swap"], [207, 4, 1, "", "dmp_terms_gcd"], [207, 4, 1, "", "dmp_to_dict"], [207, 4, 1, "", "dmp_to_tuple"], [207, 4, 1, "", "dmp_true_LT"], [207, 4, 1, "", "dmp_validate"], [207, 4, 1, "", "dmp_zero"], [207, 4, 1, "", "dmp_zero_p"], [207, 4, 1, "", "dmp_zeros"], [207, 4, 1, "", "dup_random"], [207, 4, 1, "", "dup_reverse"]], "sympy.polys.densetools": [[207, 4, 1, "", "dmp_clear_denoms"], [207, 4, 1, "", "dmp_compose"], [207, 4, 1, "", "dmp_diff"], [207, 4, 1, "", "dmp_diff_eval_in"], [207, 4, 1, "", "dmp_diff_in"], [207, 4, 1, "", "dmp_eval"], [207, 4, 1, "", "dmp_eval_in"], [207, 4, 1, "", "dmp_eval_tail"], [207, 4, 1, "", "dmp_ground_content"], [207, 4, 1, "", "dmp_ground_extract"], [207, 4, 1, "", "dmp_ground_monic"], [207, 4, 1, "", "dmp_ground_primitive"], [207, 4, 1, "", "dmp_ground_trunc"], [207, 4, 1, "", "dmp_integrate"], [207, 4, 1, "", "dmp_integrate_in"], [207, 4, 1, "", "dmp_lift"], [207, 4, 1, "", "dmp_revert"], [207, 4, 1, "", "dmp_trunc"], [207, 4, 1, "", "dup_content"], [207, 4, 1, "", "dup_decompose"], [207, 4, 1, "", "dup_extract"], [207, 4, 1, "", "dup_mirror"], [207, 4, 1, "", "dup_monic"], [207, 4, 1, "", "dup_primitive"], [207, 4, 1, "", "dup_real_imag"], [207, 4, 1, "", "dup_scale"], [207, 4, 1, "", "dup_shift"], [207, 4, 1, "", "dup_sign_variations"], [207, 4, 1, "", "dup_transform"]], "sympy.polys.dispersion": [[210, 4, 1, "", "dispersion"], [210, 4, 1, "", "dispersionset"]], "sympy.polys.distributedmodules": [[207, 4, 1, "", "sdm_LC"], [207, 4, 1, "", "sdm_LM"], [207, 4, 1, "", "sdm_LT"], [207, 4, 1, "", "sdm_add"], [207, 4, 1, "", "sdm_deg"], [207, 4, 1, "", "sdm_ecart"], [207, 4, 1, "", "sdm_from_dict"], [207, 4, 1, "", "sdm_from_vector"], [207, 4, 1, "", "sdm_groebner"], [207, 4, 1, "", "sdm_monomial_deg"], [207, 4, 1, "", "sdm_monomial_divides"], [207, 4, 1, "", "sdm_monomial_mul"], [207, 4, 1, "", "sdm_mul_term"], [207, 4, 1, "", "sdm_nf_mora"], [207, 4, 1, "", "sdm_spoly"], [207, 4, 1, "", "sdm_to_dict"], [207, 4, 1, "", "sdm_to_vector"], [207, 4, 1, "", "sdm_zero"]], "sympy.polys.domains": [[205, 1, 1, "", "AlgebraicField"], [205, 1, 1, "", "ComplexField"], [205, 1, 1, "", "ExpressionDomain"], [205, 1, 1, "", "FiniteField"], [205, 1, 1, "", "FractionField"], [205, 1, 1, "", "GMPYFiniteField"], [205, 1, 1, "", "GMPYIntegerRing"], [205, 1, 1, "", "GMPYRationalField"], [205, 1, 1, "", "IntegerRing"], [205, 1, 1, "", "PolynomialRing"], [205, 1, 1, "", "PythonFiniteField"], [205, 1, 1, "", "PythonIntegerRing"], [205, 1, 1, "", "PythonRationalField"], [205, 1, 1, "", "RationalField"], [205, 1, 1, "", "RealField"]], "sympy.polys.domains.AlgebraicField": [[205, 2, 1, "", "algebraic_field"], [205, 2, 1, "", "denom"], [205, 2, 1, "", "discriminant"], [205, 5, 1, "", "dtype"], [205, 5, 1, "", "ext"], [205, 2, 1, "", "from_AlgebraicField"], [205, 2, 1, "", "from_GaussianIntegerRing"], [205, 2, 1, "", "from_GaussianRationalField"], [205, 2, 1, "", "from_QQ"], [205, 2, 1, "", "from_QQ_gmpy"], [205, 2, 1, "", "from_QQ_python"], [205, 2, 1, "", "from_RealField"], [205, 2, 1, "", "from_ZZ"], [205, 2, 1, "", "from_ZZ_gmpy"], [205, 2, 1, "", "from_ZZ_python"], [205, 2, 1, "", "from_sympy"], [205, 2, 1, "", "galois_group"], [205, 2, 1, "", "get_ring"], [205, 2, 1, "", "integral_basis"], [205, 2, 1, "", "is_negative"], [205, 2, 1, "", "is_nonnegative"], [205, 2, 1, "", "is_nonpositive"], [205, 2, 1, "", "is_positive"], [205, 2, 1, "", "maximal_order"], [205, 5, 1, "", "mod"], [205, 2, 1, "", "numer"], [205, 5, 1, "", "orig_ext"], [205, 2, 1, "", "primes_above"], [205, 2, 1, "", "to_alg_num"], [205, 2, 1, "", "to_sympy"]], "sympy.polys.domains.ComplexField": [[205, 2, 1, "", "almosteq"], [205, 2, 1, "", "from_sympy"], [205, 2, 1, "", "gcd"], [205, 2, 1, "", "get_exact"], [205, 2, 1, "", "get_ring"], [205, 2, 1, "", "is_negative"], [205, 2, 1, "", "is_nonnegative"], [205, 2, 1, "", "is_nonpositive"], [205, 2, 1, "", "is_positive"], [205, 2, 1, "", "lcm"], [205, 2, 1, "", "to_sympy"]], "sympy.polys.domains.ExpressionDomain": [[205, 1, 1, "", "Expression"], [205, 2, 1, "", "denom"], [205, 5, 1, "", "dtype"], [205, 2, 1, "", "from_ExpressionDomain"], [205, 2, 1, "", "from_FractionField"], [205, 2, 1, "", "from_GaussianIntegerRing"], [205, 2, 1, "", "from_GaussianRationalField"], [205, 2, 1, "", "from_PolynomialRing"], [205, 2, 1, "", "from_QQ"], [205, 2, 1, "", "from_QQ_gmpy"], [205, 2, 1, "", "from_QQ_python"], [205, 2, 1, "", "from_RealField"], [205, 2, 1, "", "from_ZZ"], [205, 2, 1, "", "from_ZZ_gmpy"], [205, 2, 1, "", "from_ZZ_python"], [205, 2, 1, "", "from_sympy"], [205, 2, 1, "", "get_field"], [205, 2, 1, "", "get_ring"], [205, 2, 1, "", "is_negative"], [205, 2, 1, "", "is_nonnegative"], [205, 2, 1, "", "is_nonpositive"], [205, 2, 1, "", "is_positive"], [205, 2, 1, "", "numer"], [205, 2, 1, "", "to_sympy"]], "sympy.polys.domains.FiniteField": [[205, 2, 1, "", "characteristic"], [205, 2, 1, "", "from_FF"], [205, 2, 1, "", "from_FF_gmpy"], [205, 2, 1, "", "from_FF_python"], [205, 2, 1, "", "from_QQ"], [205, 2, 1, "", "from_QQ_gmpy"], [205, 2, 1, "", "from_QQ_python"], [205, 2, 1, "", "from_RealField"], [205, 2, 1, "", "from_ZZ"], [205, 2, 1, "", "from_ZZ_gmpy"], [205, 2, 1, "", "from_ZZ_python"], [205, 2, 1, "", "from_sympy"], [205, 2, 1, "", "get_field"], [205, 2, 1, "", "to_sympy"]], "sympy.polys.domains.FractionField": [[205, 2, 1, "", "denom"], [205, 2, 1, "", "factorial"], [205, 2, 1, "", "from_AlgebraicField"], [205, 2, 1, "", "from_ComplexField"], [205, 2, 1, "", "from_FractionField"], [205, 2, 1, "", "from_GaussianIntegerRing"], [205, 2, 1, "", "from_GaussianRationalField"], [205, 2, 1, "", "from_PolynomialRing"], [205, 2, 1, "", "from_QQ"], [205, 2, 1, "", "from_QQ_gmpy"], [205, 2, 1, "", "from_QQ_python"], [205, 2, 1, "", "from_RealField"], [205, 2, 1, "", "from_ZZ"], [205, 2, 1, "", "from_ZZ_gmpy"], [205, 2, 1, "", "from_ZZ_python"], [205, 2, 1, "", "from_sympy"], [205, 2, 1, "", "get_ring"], [205, 2, 1, "", "is_negative"], [205, 2, 1, "", "is_nonnegative"], [205, 2, 1, "", "is_nonpositive"], [205, 2, 1, "", "is_positive"], [205, 2, 1, "", "numer"], [205, 2, 1, "", "to_sympy"]], "sympy.polys.domains.GMPYIntegerRing": [[205, 2, 1, "", "factorial"], [205, 2, 1, "", "from_FF_gmpy"], [205, 2, 1, "", "from_FF_python"], [205, 2, 1, "", "from_QQ"], [205, 2, 1, "", "from_QQ_gmpy"], [205, 2, 1, "", "from_QQ_python"], [205, 2, 1, "", "from_RealField"], [205, 2, 1, "", "from_ZZ_gmpy"], [205, 2, 1, "", "from_ZZ_python"], [205, 2, 1, "", "from_sympy"], [205, 2, 1, "", "gcd"], [205, 2, 1, "", "gcdex"], [205, 2, 1, "", "lcm"], [205, 2, 1, "", "sqrt"], [205, 2, 1, "", "to_sympy"]], "sympy.polys.domains.GMPYRationalField": [[205, 2, 1, "", "denom"], [205, 2, 1, "", "div"], [205, 2, 1, "", "exquo"], [205, 2, 1, "", "factorial"], [205, 2, 1, "", "from_GaussianRationalField"], [205, 2, 1, "", "from_QQ_gmpy"], [205, 2, 1, "", "from_QQ_python"], [205, 2, 1, "", "from_RealField"], [205, 2, 1, "", "from_ZZ_gmpy"], [205, 2, 1, "", "from_ZZ_python"], [205, 2, 1, "", "from_sympy"], [205, 2, 1, "", "get_ring"], [205, 2, 1, "", "numer"], [205, 2, 1, "", "quo"], [205, 2, 1, "", "rem"], [205, 2, 1, "", "to_sympy"]], "sympy.polys.domains.IntegerRing": [[205, 2, 1, "", "algebraic_field"], [205, 2, 1, "", "factorial"], [205, 2, 1, "", "from_AlgebraicField"], [205, 2, 1, "", "from_FF"], [205, 2, 1, "", "from_FF_gmpy"], [205, 2, 1, "", "from_FF_python"], [205, 2, 1, "", "from_QQ"], [205, 2, 1, "", "from_QQ_gmpy"], [205, 2, 1, "", "from_QQ_python"], [205, 2, 1, "", "from_RealField"], [205, 2, 1, "", "from_ZZ"], [205, 2, 1, "", "from_ZZ_gmpy"], [205, 2, 1, "", "from_ZZ_python"], [205, 2, 1, "", "from_sympy"], [205, 2, 1, "", "gcd"], [205, 2, 1, "", "gcdex"], [205, 2, 1, "", "get_field"], [205, 2, 1, "", "lcm"], [205, 2, 1, "", "log"], [205, 2, 1, "", "sqrt"], [205, 2, 1, "", "to_sympy"]], "sympy.polys.domains.PolynomialRing": [[205, 2, 1, "", "factorial"], [205, 2, 1, "", "from_AlgebraicField"], [205, 2, 1, "", "from_ComplexField"], [205, 2, 1, "", "from_FractionField"], [205, 2, 1, "", "from_GaussianIntegerRing"], [205, 2, 1, "", "from_GaussianRationalField"], [205, 2, 1, "", "from_GlobalPolynomialRing"], [205, 2, 1, "", "from_PolynomialRing"], [205, 2, 1, "", "from_QQ"], [205, 2, 1, "", "from_QQ_gmpy"], [205, 2, 1, "", "from_QQ_python"], [205, 2, 1, "", "from_RealField"], [205, 2, 1, "", "from_ZZ"], [205, 2, 1, "", "from_ZZ_gmpy"], [205, 2, 1, "", "from_ZZ_python"], [205, 2, 1, "", "from_sympy"], [205, 2, 1, "", "gcd"], [205, 2, 1, "", "gcdex"], [205, 2, 1, "", "get_field"], [205, 2, 1, "", "is_negative"], [205, 2, 1, "", "is_nonnegative"], [205, 2, 1, "", "is_nonpositive"], [205, 2, 1, "", "is_positive"], [205, 2, 1, "", "is_unit"], [205, 2, 1, "", "lcm"], [205, 2, 1, "", "to_sympy"]], "sympy.polys.domains.RationalField": [[205, 2, 1, "", "algebraic_field"], [205, 2, 1, "", "denom"], [205, 2, 1, "", "div"], [205, 2, 1, "", "exquo"], [205, 2, 1, "", "from_AlgebraicField"], [205, 2, 1, "", "from_GaussianRationalField"], [205, 2, 1, "", "from_QQ"], [205, 2, 1, "", "from_QQ_gmpy"], [205, 2, 1, "", "from_QQ_python"], [205, 2, 1, "", "from_RealField"], [205, 2, 1, "", "from_ZZ"], [205, 2, 1, "", "from_ZZ_gmpy"], [205, 2, 1, "", "from_ZZ_python"], [205, 2, 1, "", "from_sympy"], [205, 2, 1, "", "get_ring"], [205, 2, 1, "", "numer"], [205, 2, 1, "", "quo"], [205, 2, 1, "", "rem"], [205, 2, 1, "", "to_sympy"]], "sympy.polys.domains.RealField": [[205, 2, 1, "", "almosteq"], [205, 2, 1, "", "from_sympy"], [205, 2, 1, "", "gcd"], [205, 2, 1, "", "get_exact"], [205, 2, 1, "", "get_ring"], [205, 2, 1, "", "lcm"], [205, 2, 1, "", "to_rational"], [205, 2, 1, "", "to_sympy"]], "sympy.polys.domains.compositedomain": [[205, 1, 1, "", "CompositeDomain"]], "sympy.polys.domains.compositedomain.CompositeDomain": [[205, 2, 1, "", "drop"], [205, 2, 1, "", "inject"]], "sympy.polys.domains.domain": [[205, 1, 1, "", "Domain"]], "sympy.polys.domains.domain.Domain": [[205, 2, 1, "", "abs"], [205, 2, 1, "", "add"], [205, 2, 1, "", "alg_field_from_poly"], [205, 2, 1, "", "algebraic_field"], [205, 2, 1, "", "almosteq"], [205, 2, 1, "", "characteristic"], [205, 2, 1, "", "cofactors"], [205, 2, 1, "", "convert"], [205, 2, 1, "", "convert_from"], [205, 2, 1, "", "cyclotomic_field"], [205, 2, 1, "", "denom"], [205, 2, 1, "", "div"], [205, 2, 1, "", "drop"], [205, 5, 1, "", "dtype"], [205, 2, 1, "", "evalf"], [205, 2, 1, "", "exquo"], [205, 2, 1, "", "frac_field"], [205, 2, 1, "", "from_AlgebraicField"], [205, 2, 1, "", "from_ComplexField"], [205, 2, 1, "", "from_ExpressionDomain"], [205, 2, 1, "", "from_ExpressionRawDomain"], [205, 2, 1, "", "from_FF"], [205, 2, 1, "", "from_FF_gmpy"], [205, 2, 1, "", "from_FF_python"], [205, 2, 1, "", "from_FractionField"], [205, 2, 1, "", "from_GlobalPolynomialRing"], [205, 2, 1, "", "from_MonogenicFiniteExtension"], [205, 2, 1, "", "from_PolynomialRing"], [205, 2, 1, "", "from_QQ_gmpy"], [205, 2, 1, "", "from_QQ_python"], [205, 2, 1, "", "from_RealField"], [205, 2, 1, "", "from_ZZ_gmpy"], [205, 2, 1, "", "from_ZZ_python"], [205, 2, 1, "", "from_sympy"], [205, 2, 1, "", "gcd"], [205, 2, 1, "", "gcdex"], [205, 2, 1, "", "get_exact"], [205, 2, 1, "", "get_field"], [205, 2, 1, "", "get_ring"], [205, 2, 1, "", "half_gcdex"], [205, 5, 1, "", "has_assoc_Field"], [205, 5, 1, "", "has_assoc_Ring"], [205, 2, 1, "", "inject"], [205, 2, 1, "", "invert"], [205, 5, 1, "", "is_Field"], [205, 5, 1, "", "is_PID"], [205, 5, 1, "", "is_Ring"], [205, 2, 1, "", "is_negative"], [205, 2, 1, "", "is_nonnegative"], [205, 2, 1, "", "is_nonpositive"], [205, 2, 1, "", "is_one"], [205, 2, 1, "", "is_positive"], [205, 2, 1, "", "is_zero"], [205, 2, 1, "", "lcm"], [205, 2, 1, "", "log"], [205, 2, 1, "", "map"], [205, 2, 1, "", "mul"], [205, 2, 1, "", "n"], [205, 2, 1, "", "neg"], [205, 2, 1, "", "numer"], [205, 2, 1, "", "of_type"], [205, 2, 1, "", "old_frac_field"], [205, 2, 1, "", "old_poly_ring"], [205, 5, 1, "", "one"], [205, 2, 1, "", "poly_ring"], [205, 2, 1, "", "pos"], [205, 2, 1, "", "pow"], [205, 2, 1, "", "quo"], [205, 2, 1, "", "rem"], [205, 2, 1, "", "revert"], [205, 2, 1, "", "sqrt"], [205, 2, 1, "", "sub"], [205, 2, 1, "", "to_sympy"], [205, 3, 1, "", "tp"], [205, 2, 1, "", "unify"], [205, 5, 1, "", "zero"]], "sympy.polys.domains.domainelement": [[205, 1, 1, "", "DomainElement"]], "sympy.polys.domains.domainelement.DomainElement": [[205, 2, 1, "", "parent"]], "sympy.polys.domains.expressiondomain.ExpressionDomain": [[205, 1, 1, "", "Expression"]], "sympy.polys.domains.field": [[205, 1, 1, "", "Field"]], "sympy.polys.domains.field.Field": [[205, 2, 1, "", "div"], [205, 2, 1, "", "exquo"], [205, 2, 1, "", "gcd"], [205, 2, 1, "", "get_field"], [205, 2, 1, "", "get_ring"], [205, 2, 1, "", "is_unit"], [205, 2, 1, "", "lcm"], [205, 2, 1, "", "quo"], [205, 2, 1, "", "rem"], [205, 2, 1, "", "revert"]], "sympy.polys.domains.gaussiandomains": [[205, 1, 1, "", "GaussianDomain"], [205, 1, 1, "", "GaussianElement"], [205, 1, 1, "", "GaussianInteger"], [205, 1, 1, "", "GaussianIntegerRing"], [205, 1, 1, "", "GaussianRational"], [205, 1, 1, "", "GaussianRationalField"]], "sympy.polys.domains.gaussiandomains.GaussianDomain": [[205, 2, 1, "", "from_AlgebraicField"], [205, 2, 1, "", "from_QQ"], [205, 2, 1, "", "from_QQ_gmpy"], [205, 2, 1, "", "from_QQ_python"], [205, 2, 1, "", "from_ZZ"], [205, 2, 1, "", "from_ZZ_gmpy"], [205, 2, 1, "", "from_ZZ_python"], [205, 2, 1, "", "from_sympy"], [205, 2, 1, "", "inject"], [205, 2, 1, "", "is_negative"], [205, 2, 1, "", "is_nonnegative"], [205, 2, 1, "", "is_nonpositive"], [205, 2, 1, "", "is_positive"], [205, 2, 1, "", "to_sympy"]], "sympy.polys.domains.gaussiandomains.GaussianElement": [[205, 2, 1, "", "new"], [205, 2, 1, "", "parent"], [205, 2, 1, "", "quadrant"]], "sympy.polys.domains.gaussiandomains.GaussianIntegerRing": [[205, 5, 1, "", "dtype"], [205, 2, 1, "", "from_GaussianIntegerRing"], [205, 2, 1, "", "from_GaussianRationalField"], [205, 2, 1, "", "gcd"], [205, 2, 1, "", "get_field"], [205, 2, 1, "", "get_ring"], [205, 2, 1, "", "lcm"], [205, 2, 1, "", "normalize"]], "sympy.polys.domains.gaussiandomains.GaussianRationalField": [[205, 2, 1, "", "as_AlgebraicField"], [205, 2, 1, "", "denom"], [205, 5, 1, "", "dtype"], [205, 2, 1, "", "from_GaussianIntegerRing"], [205, 2, 1, "", "from_GaussianRationalField"], [205, 2, 1, "", "get_field"], [205, 2, 1, "", "get_ring"], [205, 2, 1, "", "numer"]], "sympy.polys.domains.mpelements": [[205, 1, 1, "", "ComplexElement"], [205, 1, 1, "", "RealElement"]], "sympy.polys.domains.quotientring": [[205, 1, 1, "", "QuotientRing"]], "sympy.polys.domains.ring": [[205, 1, 1, "", "Ring"]], "sympy.polys.domains.ring.Ring": [[205, 2, 1, "", "denom"], [205, 2, 1, "", "div"], [205, 2, 1, "", "exquo"], [205, 2, 1, "", "free_module"], [205, 2, 1, "", "get_ring"], [205, 2, 1, "", "ideal"], [205, 2, 1, "", "invert"], [205, 2, 1, "", "numer"], [205, 2, 1, "", "quo"], [205, 2, 1, "", "quotient_ring"], [205, 2, 1, "", "rem"], [205, 2, 1, "", "revert"]], "sympy.polys.domains.simpledomain": [[205, 1, 1, "", "SimpleDomain"]], "sympy.polys.domains.simpledomain.SimpleDomain": [[205, 2, 1, "", "inject"]], "sympy.polys.euclidtools": [[207, 4, 1, "", "dmp_cancel"], [207, 4, 1, "", "dmp_content"], [207, 4, 1, "", "dmp_discriminant"], [207, 4, 1, "", "dmp_euclidean_prs"], [207, 4, 1, "", "dmp_ff_prs_gcd"], [207, 4, 1, "", "dmp_gcd"], [207, 4, 1, "", "dmp_gcdex"], [207, 4, 1, "", "dmp_half_gcdex"], [207, 4, 1, "", "dmp_inner_gcd"], [207, 4, 1, "", "dmp_inner_subresultants"], [207, 4, 1, "", "dmp_invert"], [207, 4, 1, "", "dmp_lcm"], [207, 4, 1, "", "dmp_primitive"], [207, 4, 1, "", "dmp_primitive_prs"], [207, 4, 1, "", "dmp_prs_resultant"], [207, 4, 1, "", "dmp_qq_collins_resultant"], [207, 4, 1, "", "dmp_qq_heu_gcd"], [207, 4, 1, "", "dmp_resultant"], [207, 4, 1, "", "dmp_rr_prs_gcd"], [207, 4, 1, "", "dmp_subresultants"], [207, 4, 1, "", "dmp_zz_collins_resultant"], [207, 4, 1, "", "dmp_zz_heu_gcd"], [207, 4, 1, "", "dmp_zz_modular_resultant"]], "sympy.polys.factortools": [[207, 4, 1, "", "dmp_ext_factor"], [207, 4, 1, "", "dmp_factor_list"], [207, 4, 1, "", "dmp_factor_list_include"], [207, 4, 1, "", "dmp_irreducible_p"], [207, 4, 1, "", "dmp_trial_division"], [207, 4, 1, "", "dmp_zz_diophantine"], [207, 4, 1, "", "dmp_zz_factor"], [207, 4, 1, "", "dmp_zz_mignotte_bound"], [207, 4, 1, "", "dmp_zz_wang"], [207, 4, 1, "", "dmp_zz_wang_hensel_lifting"], [207, 4, 1, "", "dmp_zz_wang_lead_coeffs"], [207, 4, 1, "", "dmp_zz_wang_non_divisors"], [207, 4, 1, "", "dmp_zz_wang_test_points"], [207, 4, 1, "", "dup_cyclotomic_p"], [207, 4, 1, "", "dup_gf_factor"], [207, 4, 1, "", "dup_zz_cyclotomic_factor"], [207, 4, 1, "", "dup_zz_cyclotomic_poly"], [207, 4, 1, "", "dup_zz_factor"], [207, 4, 1, "", "dup_zz_factor_sqf"], [207, 4, 1, "", "dup_zz_hensel_lift"], [207, 4, 1, "", "dup_zz_hensel_step"], [207, 4, 1, "", "dup_zz_irreducible_p"], [207, 4, 1, "", "dup_zz_zassenhaus"]], "sympy.polys.fglmtools": [[207, 4, 1, "", "matrix_fglm"]], "sympy.polys.fields": [[205, 1, 1, "", "FracElement"], [205, 1, 1, "", "FracField"], [205, 4, 1, "", "field"], [205, 4, 1, "", "sfield"], [205, 4, 1, "", "vfield"], [205, 4, 1, "", "xfield"]], "sympy.polys.fields.FracElement": [[205, 2, 1, "", "diff"]], "sympy.polys.galoistools": [[207, 4, 1, "", "gf_LC"], [207, 4, 1, "", "gf_Qbasis"], [207, 4, 1, "", "gf_Qmatrix"], [207, 4, 1, "", "gf_TC"], [207, 4, 1, "", "gf_add"], [207, 4, 1, "", "gf_add_ground"], [207, 4, 1, "", "gf_add_mul"], [207, 4, 1, "", "gf_berlekamp"], [207, 4, 1, "", "gf_cofactors"], [207, 4, 1, "", "gf_compose"], [207, 4, 1, "", "gf_compose_mod"], [207, 4, 1, "", "gf_crt"], [207, 4, 1, "", "gf_crt1"], [207, 4, 1, "", "gf_crt2"], [207, 4, 1, "", "gf_csolve"], [207, 4, 1, "", "gf_degree"], [207, 4, 1, "", "gf_diff"], [207, 4, 1, "", "gf_div"], [207, 4, 1, "", "gf_eval"], [207, 4, 1, "", "gf_expand"], [207, 4, 1, "", "gf_exquo"], [207, 4, 1, "", "gf_factor"], [207, 4, 1, "", "gf_factor_sqf"], [207, 4, 1, "", "gf_from_dict"], [207, 4, 1, "", "gf_from_int_poly"], [207, 4, 1, "", "gf_gcd"], [207, 4, 1, "", "gf_gcdex"], [207, 4, 1, "", "gf_int"], [207, 4, 1, "", "gf_irreducible"], [207, 4, 1, "", "gf_irreducible_p"], [207, 4, 1, "", "gf_lcm"], [207, 4, 1, "", "gf_lshift"], [207, 4, 1, "", "gf_monic"], [207, 4, 1, "", "gf_mul"], [207, 4, 1, "", "gf_mul_ground"], [207, 4, 1, "", "gf_multi_eval"], [207, 4, 1, "", "gf_neg"], [207, 4, 1, "", "gf_normal"], [207, 4, 1, "", "gf_pow"], [207, 4, 1, "", "gf_pow_mod"], [207, 4, 1, "", "gf_quo"], [207, 4, 1, "", "gf_quo_ground"], [207, 4, 1, "", "gf_random"], [207, 4, 1, "", "gf_rem"], [207, 4, 1, "", "gf_rshift"], [207, 4, 1, "", "gf_shoup"], [207, 4, 1, "", "gf_sqf_list"], [207, 4, 1, "", "gf_sqf_p"], [207, 4, 1, "", "gf_sqf_part"], [207, 4, 1, "", "gf_sqr"], [207, 4, 1, "", "gf_strip"], [207, 4, 1, "", "gf_sub"], [207, 4, 1, "", "gf_sub_ground"], [207, 4, 1, "", "gf_sub_mul"], [207, 4, 1, "", "gf_to_dict"], [207, 4, 1, "", "gf_to_int_poly"], [207, 4, 1, "", "gf_trace_map"], [207, 4, 1, "", "gf_trunc"], [207, 4, 1, "", "gf_value"], [207, 4, 1, "", "gf_zassenhaus"]], "sympy.polys.groebnertools": [[207, 4, 1, "", "groebner"], [207, 4, 1, "", "is_groebner"], [207, 4, 1, "", "is_minimal"], [207, 4, 1, "", "is_reduced"], [207, 4, 1, "", "red_groebner"], [207, 4, 1, "", "spoly"]], "sympy.polys.matrices.ddm": [[203, 1, 1, "", "DDM"]], "sympy.polys.matrices.ddm.DDM": [[203, 2, 1, "", "add"], [203, 2, 1, "", "charpoly"], [203, 2, 1, "", "det"], [203, 2, 1, "", "hstack"], [203, 2, 1, "", "inv"], [203, 2, 1, "", "is_lower"], [203, 2, 1, "", "is_upper"], [203, 2, 1, "", "is_zero_matrix"], [203, 2, 1, "", "lu"], [203, 2, 1, "", "lu_solve"], [203, 2, 1, "", "matmul"], [203, 2, 1, "", "neg"], [203, 2, 1, "", "rref"], [203, 2, 1, "", "scc"], [203, 2, 1, "", "sub"], [203, 2, 1, "", "vstack"]], "sympy.polys.matrices.domainmatrix": [[203, 1, 1, "", "DomainMatrix"]], "sympy.polys.matrices.domainmatrix.DomainMatrix": [[203, 2, 1, "", "add"], [203, 2, 1, "", "charpoly"], [203, 2, 1, "", "columnspace"], [203, 2, 1, "", "convert_to"], [203, 2, 1, "", "det"], [203, 2, 1, "", "diag"], [203, 2, 1, "", "eye"], [203, 2, 1, "", "from_Matrix"], [203, 2, 1, "", "from_dict_sympy"], [203, 2, 1, "", "from_list"], [203, 2, 1, "", "from_list_sympy"], [203, 2, 1, "", "from_rep"], [203, 2, 1, "", "hstack"], [203, 2, 1, "", "inv"], [203, 3, 1, "", "is_lower"], [203, 3, 1, "", "is_upper"], [203, 2, 1, "", "lll"], [203, 2, 1, "", "lll_transform"], [203, 2, 1, "", "lu"], [203, 2, 1, "", "lu_solve"], [203, 2, 1, "", "matmul"], [203, 2, 1, "", "mul"], [203, 2, 1, "", "neg"], [203, 2, 1, "", "nullspace"], [203, 2, 1, "", "ones"], [203, 2, 1, "", "pow"], [203, 2, 1, "", "rowspace"], [203, 2, 1, "", "rref"], [203, 2, 1, "", "scc"], [203, 2, 1, "", "sub"], [203, 2, 1, "", "to_Matrix"], [203, 2, 1, "", "to_dense"], [203, 2, 1, "", "to_field"], [203, 2, 1, "", "to_sparse"], [203, 2, 1, "", "transpose"], [203, 2, 1, "", "unify"], [203, 2, 1, "", "vstack"], [203, 2, 1, "", "zeros"]], "sympy.polys.matrices.normalforms": [[203, 4, 1, "", "hermite_normal_form"], [203, 4, 1, "", "smith_normal_form"]], "sympy.polys.matrices.sdm": [[203, 1, 1, "", "SDM"]], "sympy.polys.matrices.sdm.SDM": [[203, 2, 1, "", "add"], [203, 2, 1, "", "charpoly"], [203, 2, 1, "", "convert_to"], [203, 2, 1, "", "copy"], [203, 2, 1, "", "det"], [203, 2, 1, "", "eye"], [203, 2, 1, "", "from_ddm"], [203, 2, 1, "", "from_list"], [203, 2, 1, "", "hstack"], [203, 2, 1, "", "inv"], [203, 2, 1, "", "is_lower"], [203, 2, 1, "", "is_upper"], [203, 2, 1, "", "is_zero_matrix"], [203, 2, 1, "", "lu"], [203, 2, 1, "", "lu_solve"], [203, 2, 1, "", "matmul"], [203, 2, 1, "", "mul"], [203, 2, 1, "", "neg"], [203, 2, 1, "", "new"], [203, 2, 1, "", "nullspace"], [203, 2, 1, "", "rref"], [203, 2, 1, "", "scc"], [203, 2, 1, "", "sub"], [203, 2, 1, "", "to_ddm"], [203, 2, 1, "", "to_list"], [203, 2, 1, "", "transpose"], [203, 2, 1, "", "vstack"], [203, 2, 1, "", "zeros"]], "sympy.polys.modulargcd": [[207, 4, 1, "", "_modgcd_multivariate_p"], [207, 4, 1, "", "func_field_modgcd"], [207, 4, 1, "", "modgcd_bivariate"], [207, 4, 1, "", "modgcd_multivariate"], [207, 4, 1, "", "modgcd_univariate"]], "sympy.polys.monomials": [[210, 1, 1, "", "Monomial"], [210, 4, 1, "", "itermonomials"], [210, 4, 1, "", "monomial_count"]], "sympy.polys.monomials.Monomial": [[210, 2, 1, "", "as_expr"], [210, 2, 1, "", "gcd"], [210, 2, 1, "", "lcm"]], "sympy.polys.numberfields.basis": [[209, 4, 1, "", "round_two"]], "sympy.polys.numberfields.galoisgroups": [[209, 4, 1, "", "galois_group"]], "sympy.polys.numberfields.minpoly": [[209, 4, 1, "", "minimal_polynomial"], [209, 4, 1, "", "minpoly"]], "sympy.polys.numberfields": [[209, 0, 0, "-", "modules"], [209, 0, 0, "-", "subfield"]], "sympy.polys.numberfields.modules": [[209, 1, 1, "", "EndomorphismRing"], [209, 1, 1, "", "InnerEndomorphism"], [209, 1, 1, "", "Module"], [209, 1, 1, "", "ModuleElement"], [209, 1, 1, "", "ModuleEndomorphism"], [209, 1, 1, "", "ModuleHomomorphism"], [209, 1, 1, "", "PowerBasis"], [209, 1, 1, "", "PowerBasisElement"], [209, 1, 1, "", "Submodule"], [209, 4, 1, "", "find_min_poly"], [209, 4, 1, "", "make_mod_elt"]], "sympy.polys.numberfields.modules.EndomorphismRing": [[209, 2, 1, "", "__init__"], [209, 2, 1, "", "inner_endomorphism"], [209, 2, 1, "", "represent"]], "sympy.polys.numberfields.modules.InnerEndomorphism": [[209, 2, 1, "", "__init__"]], "sympy.polys.numberfields.modules.Module": [[209, 2, 1, "", "__call__"], [209, 2, 1, "", "ancestors"], [209, 2, 1, "", "basis_elements"], [209, 2, 1, "", "element_from_rational"], [209, 2, 1, "", "endomorphism_ring"], [209, 2, 1, "", "is_compat_col"], [209, 2, 1, "", "mult_tab"], [209, 3, 1, "", "n"], [209, 2, 1, "", "nearest_common_ancestor"], [209, 3, 1, "", "number_field"], [209, 2, 1, "", "one"], [209, 3, 1, "", "parent"], [209, 2, 1, "", "power_basis_ancestor"], [209, 2, 1, "", "represent"], [209, 2, 1, "", "starts_with_unity"], [209, 2, 1, "", "submodule_from_gens"], [209, 2, 1, "", "submodule_from_matrix"], [209, 2, 1, "", "whole_submodule"], [209, 2, 1, "", "zero"]], "sympy.polys.numberfields.modules.ModuleElement": [[209, 3, 1, "", "QQ_col"], [209, 2, 1, "", "__add__"], [209, 2, 1, "", "__init__"], [209, 2, 1, "", "__mod__"], [209, 2, 1, "", "__mul__"], [209, 2, 1, "", "column"], [209, 2, 1, "", "equiv"], [209, 2, 1, "", "from_int_list"], [209, 2, 1, "", "is_compat"], [209, 3, 1, "", "n"], [209, 2, 1, "", "over_power_basis"], [209, 2, 1, "", "reduced"], [209, 2, 1, "", "reduced_mod_p"], [209, 2, 1, "", "to_ancestor"], [209, 2, 1, "", "to_parent"], [209, 2, 1, "", "unify"]], "sympy.polys.numberfields.modules.ModuleEndomorphism": [[209, 2, 1, "", "__init__"]], "sympy.polys.numberfields.modules.ModuleHomomorphism": [[209, 2, 1, "", "__init__"], [209, 2, 1, "", "kernel"], [209, 2, 1, "", "matrix"]], "sympy.polys.numberfields.modules.PowerBasis": [[209, 2, 1, "", "__init__"], [209, 2, 1, "", "element_from_ANP"], [209, 2, 1, "", "element_from_alg_num"], [209, 2, 1, "", "element_from_poly"], [209, 2, 1, "", "represent"]], "sympy.polys.numberfields.modules.PowerBasisElement": [[209, 3, 1, "", "T"], [209, 2, 1, "", "as_expr"], [209, 3, 1, "", "generator"], [209, 3, 1, "", "is_rational"], [209, 2, 1, "", "norm"], [209, 2, 1, "", "numerator"], [209, 2, 1, "", "poly"], [209, 2, 1, "", "to_ANP"], [209, 2, 1, "", "to_alg_num"]], "sympy.polys.numberfields.modules.Submodule": [[209, 3, 1, "", "QQ_matrix"], [209, 2, 1, "", "__init__"], [209, 2, 1, "", "add"], [209, 2, 1, "", "basis_element_pullbacks"], [209, 2, 1, "", "discard_before"], [209, 2, 1, "", "mul"], [209, 2, 1, "", "reduce_element"], [209, 2, 1, "", "reduced"], [209, 2, 1, "", "represent"]], "sympy.polys.numberfields.primes": [[209, 1, 1, "", "PrimeIdeal"], [209, 4, 1, "", "prime_decomp"], [209, 4, 1, "", "prime_valuation"]], "sympy.polys.numberfields.primes.PrimeIdeal": [[209, 2, 1, "", "__add__"], [209, 2, 1, "", "__init__"], [209, 2, 1, "", "__mul__"], [209, 2, 1, "", "as_submodule"], [209, 3, 1, "", "is_inert"], [209, 2, 1, "", "reduce_ANP"], [209, 2, 1, "", "reduce_alg_num"], [209, 2, 1, "", "reduce_element"], [209, 2, 1, "", "repr"], [209, 2, 1, "", "test_factor"], [209, 2, 1, "", "valuation"]], "sympy.polys.numberfields.subfield": [[209, 4, 1, "", "field_isomorphism"], [209, 4, 1, "", "primitive_element"], [209, 4, 1, "", "to_number_field"]], "sympy.polys.numberfields.utilities": [[209, 1, 1, "", "AlgIntPowers"], [209, 4, 1, "", "coeff_search"], [209, 4, 1, "", "extract_fundamental_discriminant"], [209, 4, 1, "", "get_num_denom"], [209, 4, 1, "", "is_int"], [209, 4, 1, "", "is_rat"], [209, 4, 1, "", "isolate"], [209, 4, 1, "", "supplement_a_subspace"]], "sympy.polys.numberfields.utilities.AlgIntPowers": [[209, 2, 1, "", "__init__"]], "sympy.polys.orderings": [[210, 1, 1, "", "GradedLexOrder"], [210, 1, 1, "", "LexOrder"], [210, 1, 1, "", "MonomialOrder"], [210, 1, 1, "", "ReversedGradedLexOrder"]], "sympy.polys.orthopolys": [[210, 4, 1, "", "chebyshevt_poly"], [210, 4, 1, "", "chebyshevu_poly"], [210, 4, 1, "", "gegenbauer_poly"], [210, 4, 1, "", "hermite_poly"], [210, 4, 1, "", "hermite_prob_poly"], [210, 4, 1, "", "jacobi_poly"], [210, 4, 1, "", "laguerre_poly"], [210, 4, 1, "", "legendre_poly"], [210, 4, 1, "", "spherical_bessel_fn"]], "sympy.polys.partfrac": [[210, 4, 1, "", "apart"], [210, 4, 1, "", "apart_list"], [210, 4, 1, "", "assemble_partfrac_list"]], "sympy.polys.polyclasses": [[205, 1, 1, "", "ANP"], [205, 1, 1, "", "DMF"], [205, 1, 1, "", "DMP"]], "sympy.polys.polyclasses.ANP": [[205, 2, 1, "", "LC"], [205, 2, 1, "", "TC"], [205, 3, 1, "", "is_ground"], [205, 3, 1, "", "is_one"], [205, 3, 1, "", "is_zero"], [205, 2, 1, "", "pow"], [205, 2, 1, "", "to_dict"], [205, 2, 1, "", "to_list"], [205, 2, 1, "", "to_sympy_dict"], [205, 2, 1, "", "to_sympy_list"], [205, 2, 1, "", "to_tuple"], [205, 2, 1, "", "unify"]], "sympy.polys.polyclasses.DMF": [[205, 2, 1, "", "add"], [205, 2, 1, "", "cancel"], [205, 2, 1, "", "denom"], [205, 2, 1, "", "exquo"], [205, 2, 1, "", "frac_unify"], [205, 2, 1, "", "half_per"], [205, 2, 1, "", "invert"], [205, 3, 1, "", "is_one"], [205, 3, 1, "", "is_zero"], [205, 2, 1, "", "mul"], [205, 2, 1, "", "neg"], [205, 2, 1, "", "numer"], [205, 2, 1, "", "per"], [205, 2, 1, "", "poly_unify"], [205, 2, 1, "", "pow"], [205, 2, 1, "", "quo"], [205, 2, 1, "", "sub"]], "sympy.polys.polyclasses.DMP": [[205, 2, 1, "", "LC"], [205, 2, 1, "", "TC"], [205, 2, 1, "", "abs"], [205, 2, 1, "", "add"], [205, 2, 1, "", "add_ground"], [205, 2, 1, "", "all_coeffs"], [205, 2, 1, "", "all_monoms"], [205, 2, 1, "", "all_terms"], [205, 2, 1, "", "cancel"], [205, 2, 1, "", "cauchy_lower_bound"], [205, 2, 1, "", "cauchy_upper_bound"], [205, 2, 1, "", "clear_denoms"], [205, 2, 1, "", "coeffs"], [205, 2, 1, "", "cofactors"], [205, 2, 1, "", "compose"], [205, 2, 1, "", "content"], [205, 2, 1, "", "convert"], [205, 2, 1, "", "count_complex_roots"], [205, 2, 1, "", "count_real_roots"], [205, 2, 1, "", "decompose"], [205, 2, 1, "", "deflate"], [205, 2, 1, "", "degree"], [205, 2, 1, "", "degree_list"], [205, 2, 1, "", "diff"], [205, 2, 1, "", "discriminant"], [205, 2, 1, "", "div"], [205, 2, 1, "", "eject"], [205, 2, 1, "", "eval"], [205, 2, 1, "", "exclude"], [205, 2, 1, "", "exquo"], [205, 2, 1, "", "exquo_ground"], [205, 2, 1, "", "factor_list"], [205, 2, 1, "", "factor_list_include"], [205, 2, 1, "", "from_dict"], [205, 2, 1, "", "from_list"], [205, 2, 1, "", "from_sympy_list"], [205, 2, 1, "", "gcd"], [205, 2, 1, "", "gcdex"], [205, 2, 1, "", "gff_list"], [205, 2, 1, "", "half_gcdex"], [205, 2, 1, "", "homogeneous_order"], [205, 2, 1, "", "homogenize"], [205, 2, 1, "", "inject"], [205, 2, 1, "", "integrate"], [205, 2, 1, "", "intervals"], [205, 2, 1, "", "invert"], [205, 3, 1, "", "is_cyclotomic"], [205, 3, 1, "", "is_ground"], [205, 3, 1, "", "is_homogeneous"], [205, 3, 1, "", "is_irreducible"], [205, 3, 1, "", "is_linear"], [205, 3, 1, "", "is_monic"], [205, 3, 1, "", "is_monomial"], [205, 3, 1, "", "is_one"], [205, 3, 1, "", "is_primitive"], [205, 3, 1, "", "is_quadratic"], [205, 3, 1, "", "is_sqf"], [205, 3, 1, "", "is_zero"], [205, 2, 1, "", "l1_norm"], [205, 2, 1, "", "l2_norm_squared"], [205, 2, 1, "", "lcm"], [205, 2, 1, "", "lift"], [205, 2, 1, "", "max_norm"], [205, 2, 1, "", "mignotte_sep_bound_squared"], [205, 2, 1, "", "monic"], [205, 2, 1, "", "monoms"], [205, 2, 1, "", "mul"], [205, 2, 1, "", "mul_ground"], [205, 2, 1, "", "neg"], [205, 2, 1, "", "norm"], [205, 2, 1, "", "nth"], [205, 2, 1, "", "pdiv"], [205, 2, 1, "", "per"], [205, 2, 1, "", "permute"], [205, 2, 1, "", "pexquo"], [205, 2, 1, "", "pow"], [205, 2, 1, "", "pquo"], [205, 2, 1, "", "prem"], [205, 2, 1, "", "primitive"], [205, 2, 1, "", "quo"], [205, 2, 1, "", "quo_ground"], [205, 2, 1, "", "refine_root"], [205, 2, 1, "", "rem"], [205, 2, 1, "", "resultant"], [205, 2, 1, "", "revert"], [205, 2, 1, "", "shift"], [205, 2, 1, "", "slice"], [205, 2, 1, "", "sqf_list"], [205, 2, 1, "", "sqf_list_include"], [205, 2, 1, "", "sqf_norm"], [205, 2, 1, "", "sqf_part"], [205, 2, 1, "", "sqr"], [205, 2, 1, "", "sturm"], [205, 2, 1, "", "sub"], [205, 2, 1, "", "sub_ground"], [205, 2, 1, "", "subresultants"], [205, 2, 1, "", "terms"], [205, 2, 1, "", "terms_gcd"], [205, 2, 1, "", "to_dict"], [205, 2, 1, "", "to_exact"], [205, 2, 1, "", "to_field"], [205, 2, 1, "", "to_list"], [205, 2, 1, "", "to_ring"], [205, 2, 1, "", "to_sympy_dict"], [205, 2, 1, "", "to_sympy_list"], [205, 2, 1, "", "to_tuple"], [205, 2, 1, "", "total_degree"], [205, 2, 1, "", "transform"], [205, 2, 1, "", "trunc"], [205, 2, 1, "", "unify"]], "sympy.polys": [[207, 0, 0, "-", "polyconfig"], [207, 0, 0, "-", "polyoptions"], [212, 0, 0, "-", "solvers"]], "sympy.polys.polyconfig": [[207, 4, 1, "", "setup"]], "sympy.polys.polyerrors": [[207, 1, 1, "", "BasePolynomialError"], [207, 1, 1, "", "CoercionFailed"], [207, 1, 1, "", "ComputationFailed"], [207, 1, 1, "", "DomainError"], [207, 1, 1, "", "EvaluationFailed"], [207, 1, 1, "", "ExactQuotientFailed"], [207, 1, 1, "", "ExtraneousFactors"], [207, 1, 1, "", "FlagError"], [207, 1, 1, "", "GeneratorsError"], [207, 1, 1, "", "GeneratorsNeeded"], [207, 1, 1, "", "HeuristicGCDFailed"], [207, 1, 1, "", "HomomorphismFailed"], [207, 1, 1, "", "IsomorphismFailed"], [207, 1, 1, "", "MultivariatePolynomialError"], [207, 1, 1, "", "NotAlgebraic"], [207, 1, 1, "", "NotInvertible"], [207, 1, 1, "", "NotReversible"], [207, 1, 1, "", "OperationNotSupported"], [207, 1, 1, "", "OptionError"], [207, 1, 1, "", "PolificationFailed"], [207, 1, 1, "", "PolynomialError"], [207, 1, 1, "", "RefinementFailed"], [207, 1, 1, "", "UnificationFailed"], [207, 1, 1, "", "UnivariatePolynomialError"]], "sympy.polys.polyfuncs": [[210, 4, 1, "", "horner"], [210, 4, 1, "", "interpolate"], [210, 4, 1, "", "symmetrize"], [210, 4, 1, "", "viete"]], "sympy.polys.polyoptions": [[207, 1, 1, "", "Options"], [207, 4, 1, "", "build_options"]], "sympy.polys.polyoptions.Options": [[207, 2, 1, "", "clone"]], "sympy.polys.polyroots": [[210, 4, 1, "", "roots"]], "sympy.polys.polytools": [[210, 1, 1, "", "GroebnerBasis"], [210, 4, 1, "", "LC"], [210, 4, 1, "", "LM"], [210, 4, 1, "", "LT"], [210, 1, 1, "", "Poly"], [210, 1, 1, "", "PurePoly"], [210, 4, 1, "", "cancel"], [210, 4, 1, "", "cofactors"], [210, 4, 1, "", "compose"], [210, 4, 1, "", "content"], [210, 4, 1, "", "count_roots"], [210, 4, 1, "", "decompose"], [210, 4, 1, "", "degree"], [210, 4, 1, "", "degree_list"], [210, 4, 1, "", "discriminant"], [210, 4, 1, "", "div"], [210, 4, 1, "", "exquo"], [210, 4, 1, "", "factor"], [210, 4, 1, "", "factor_list"], [210, 4, 1, "", "gcd"], [210, 4, 1, "", "gcd_list"], [210, 4, 1, "", "gcdex"], [210, 4, 1, "", "gff"], [210, 4, 1, "", "gff_list"], [210, 4, 1, "", "groebner"], [210, 4, 1, "", "ground_roots"], [210, 4, 1, "", "half_gcdex"], [210, 4, 1, "", "intervals"], [210, 4, 1, "", "invert"], [210, 4, 1, "", "is_zero_dimensional"], [210, 4, 1, "", "lcm"], [210, 4, 1, "", "lcm_list"], [210, 4, 1, "", "monic"], [210, 4, 1, "", "nroots"], [210, 4, 1, "", "nth_power_roots_poly"], [210, 4, 1, "", "parallel_poly_from_expr"], [210, 4, 1, "", "pdiv"], [210, 4, 1, "", "pexquo"], [210, 4, 1, "", "poly"], [210, 4, 1, "", "poly_from_expr"], [210, 4, 1, "", "pquo"], [210, 4, 1, "", "prem"], [210, 4, 1, "", "primitive"], [210, 4, 1, "", "quo"], [210, 4, 1, "", "real_roots"], [210, 4, 1, "", "reduced"], [210, 4, 1, "", "refine_root"], [210, 4, 1, "", "rem"], [210, 4, 1, "", "resultant"], [210, 4, 1, "", "sqf"], [210, 4, 1, "", "sqf_list"], [210, 4, 1, "", "sqf_norm"], [210, 4, 1, "", "sqf_part"], [210, 4, 1, "", "sturm"], [210, 4, 1, "", "subresultants"], [210, 4, 1, "", "terms_gcd"], [210, 4, 1, "", "trunc"]], "sympy.polys.polytools.GroebnerBasis": [[210, 2, 1, "", "contains"], [210, 2, 1, "", "fglm"], [210, 3, 1, "", "is_zero_dimensional"], [210, 2, 1, "", "reduce"]], "sympy.polys.polytools.Poly": [[210, 2, 1, "", "EC"], [210, 2, 1, "", "EM"], [210, 2, 1, "", "ET"], [210, 2, 1, "", "LC"], [210, 2, 1, "", "LM"], [210, 2, 1, "", "LT"], [210, 2, 1, "", "TC"], [210, 2, 1, "", "abs"], [210, 2, 1, "", "add"], [210, 2, 1, "", "add_ground"], [210, 2, 1, "", "all_coeffs"], [210, 2, 1, "", "all_monoms"], [210, 2, 1, "", "all_roots"], [210, 2, 1, "", "all_terms"], [210, 2, 1, "", "as_dict"], [210, 2, 1, "", "as_expr"], [210, 2, 1, "", "as_list"], [210, 2, 1, "", "as_poly"], [210, 2, 1, "", "cancel"], [210, 2, 1, "", "clear_denoms"], [210, 2, 1, "", "coeff_monomial"], [210, 2, 1, "", "coeffs"], [210, 2, 1, "", "cofactors"], [210, 2, 1, "", "compose"], [210, 2, 1, "", "content"], [210, 2, 1, "", "count_roots"], [210, 2, 1, "", "decompose"], [210, 2, 1, "", "deflate"], [210, 2, 1, "", "degree"], [210, 2, 1, "", "degree_list"], [210, 2, 1, "", "diff"], [210, 2, 1, "", "discriminant"], [210, 2, 1, "", "dispersion"], [210, 2, 1, "", "dispersionset"], [210, 2, 1, "", "div"], [210, 3, 1, "", "domain"], [210, 2, 1, "", "eject"], [210, 2, 1, "", "eval"], [210, 2, 1, "", "exclude"], [210, 2, 1, "", "exquo"], [210, 2, 1, "", "exquo_ground"], [210, 2, 1, "", "factor_list"], [210, 2, 1, "", "factor_list_include"], [210, 3, 1, "", "free_symbols"], [210, 3, 1, "", "free_symbols_in_domain"], [210, 2, 1, "", "from_dict"], [210, 2, 1, "", "from_expr"], [210, 2, 1, "", "from_list"], [210, 2, 1, "", "from_poly"], [210, 2, 1, "", "galois_group"], [210, 2, 1, "", "gcd"], [210, 2, 1, "", "gcdex"], [210, 3, 1, "", "gen"], [210, 2, 1, "", "get_domain"], [210, 2, 1, "", "get_modulus"], [210, 2, 1, "", "gff_list"], [210, 2, 1, "", "ground_roots"], [210, 2, 1, "", "half_gcdex"], [210, 2, 1, "", "has_only_gens"], [210, 2, 1, "", "homogeneous_order"], [210, 2, 1, "", "homogenize"], [210, 2, 1, "", "inject"], [210, 2, 1, "", "integrate"], [210, 2, 1, "", "intervals"], [210, 2, 1, "", "invert"], [210, 3, 1, "", "is_cyclotomic"], [210, 3, 1, "", "is_ground"], [210, 3, 1, "", "is_homogeneous"], [210, 3, 1, "", "is_irreducible"], [210, 3, 1, "", "is_linear"], [210, 3, 1, "", "is_monic"], [210, 3, 1, "", "is_monomial"], [210, 3, 1, "", "is_multivariate"], [210, 3, 1, "", "is_one"], [210, 3, 1, "", "is_primitive"], [210, 3, 1, "", "is_quadratic"], [210, 3, 1, "", "is_sqf"], [210, 3, 1, "", "is_univariate"], [210, 3, 1, "", "is_zero"], [210, 2, 1, "", "l1_norm"], [210, 2, 1, "", "lcm"], [210, 2, 1, "", "length"], [210, 2, 1, "", "lift"], [210, 2, 1, "", "ltrim"], [210, 2, 1, "", "make_monic_over_integers_by_scaling_roots"], [210, 2, 1, "", "match"], [210, 2, 1, "", "max_norm"], [210, 2, 1, "", "monic"], [210, 2, 1, "", "monoms"], [210, 2, 1, "", "mul"], [210, 2, 1, "", "mul_ground"], [210, 2, 1, "", "neg"], [210, 2, 1, "", "new"], [210, 2, 1, "", "norm"], [210, 2, 1, "", "nroots"], [210, 2, 1, "", "nth"], [210, 2, 1, "", "nth_power_roots_poly"], [210, 3, 1, "", "one"], [210, 2, 1, "", "pdiv"], [210, 2, 1, "", "per"], [210, 2, 1, "", "pexquo"], [210, 2, 1, "", "pow"], [210, 2, 1, "", "pquo"], [210, 2, 1, "", "prem"], [210, 2, 1, "", "primitive"], [210, 2, 1, "", "quo"], [210, 2, 1, "", "quo_ground"], [210, 2, 1, "", "rat_clear_denoms"], [210, 2, 1, "", "real_roots"], [210, 2, 1, "", "refine_root"], [210, 2, 1, "", "rem"], [210, 2, 1, "", "reorder"], [210, 2, 1, "", "replace"], [210, 2, 1, "", "resultant"], [210, 2, 1, "", "retract"], [210, 2, 1, "", "revert"], [210, 2, 1, "", "root"], [210, 2, 1, "", "same_root"], [210, 2, 1, "", "set_domain"], [210, 2, 1, "", "set_modulus"], [210, 2, 1, "", "shift"], [210, 2, 1, "", "slice"], [210, 2, 1, "", "sqf_list"], [210, 2, 1, "", "sqf_list_include"], [210, 2, 1, "", "sqf_norm"], [210, 2, 1, "", "sqf_part"], [210, 2, 1, "", "sqr"], [210, 2, 1, "", "sturm"], [210, 2, 1, "", "sub"], [210, 2, 1, "", "sub_ground"], [210, 2, 1, "", "subresultants"], [210, 2, 1, "", "terms"], [210, 2, 1, "", "terms_gcd"], [210, 2, 1, "", "termwise"], [210, 2, 1, "", "to_exact"], [210, 2, 1, "", "to_field"], [210, 2, 1, "", "to_ring"], [210, 2, 1, "", "total_degree"], [210, 2, 1, "", "transform"], [210, 2, 1, "", "trunc"], [210, 2, 1, "", "unify"], [210, 3, 1, "", "unit"], [210, 3, 1, "", "zero"]], "sympy.polys.polytools.PurePoly": [[210, 3, 1, "", "free_symbols"]], "sympy.polys.rationaltools": [[210, 4, 1, "", "together"]], "sympy.polys.ring_series": [[211, 4, 1, "", "_tan1"], [211, 4, 1, "", "mul_xin"], [211, 4, 1, "", "pow_xin"], [211, 4, 1, "", "rs_LambertW"], [211, 4, 1, "", "rs_asin"], [211, 4, 1, "", "rs_atan"], [211, 4, 1, "", "rs_atanh"], [211, 4, 1, "", "rs_compose_add"], [211, 4, 1, "", "rs_cos"], [211, 4, 1, "", "rs_cos_sin"], [211, 4, 1, "", "rs_cosh"], [211, 4, 1, "", "rs_cot"], [211, 4, 1, "", "rs_diff"], [211, 4, 1, "", "rs_exp"], [211, 4, 1, "", "rs_fun"], [211, 4, 1, "", "rs_hadamard_exp"], [211, 4, 1, "", "rs_integrate"], [211, 4, 1, "", "rs_is_puiseux"], [211, 4, 1, "", "rs_log"], [211, 4, 1, "", "rs_mul"], [211, 4, 1, "", "rs_newton"], [211, 4, 1, "", "rs_nth_root"], [211, 4, 1, "", "rs_pow"], [211, 4, 1, "", "rs_puiseux"], [211, 4, 1, "", "rs_puiseux2"], [211, 4, 1, "", "rs_series_from_list"], [211, 4, 1, "", "rs_series_inversion"], [211, 4, 1, "", "rs_series_reversion"], [211, 4, 1, "", "rs_sin"], [211, 4, 1, "", "rs_sinh"], [211, 4, 1, "", "rs_square"], [211, 4, 1, "", "rs_subs"], [211, 4, 1, "", "rs_tan"], [211, 4, 1, "", "rs_tanh"], [211, 4, 1, "", "rs_trunc"]], "sympy.polys.rings": [[205, 1, 1, "", "PolyElement"], [205, 1, 1, "", "PolyRing"], [205, 4, 1, "", "ring"], [205, 4, 1, "", "sring"], [205, 4, 1, "", "vring"], [205, 4, 1, "", "xring"]], "sympy.polys.rings.PolyElement": [[205, 2, 1, "", "almosteq"], [205, 2, 1, "", "cancel"], [205, 2, 1, "", "coeff"], [205, 2, 1, "", "coeffs"], [205, 2, 1, "", "const"], [205, 2, 1, "", "content"], [205, 2, 1, "", "copy"], [205, 2, 1, "", "degree"], [205, 2, 1, "", "degrees"], [205, 2, 1, "", "diff"], [205, 2, 1, "", "div"], [205, 2, 1, "", "imul_num"], [205, 2, 1, "", "itercoeffs"], [205, 2, 1, "", "itermonoms"], [205, 2, 1, "", "iterterms"], [205, 2, 1, "", "leading_expv"], [205, 2, 1, "", "leading_monom"], [205, 2, 1, "", "leading_term"], [205, 2, 1, "", "listcoeffs"], [205, 2, 1, "", "listmonoms"], [205, 2, 1, "", "listterms"], [205, 2, 1, "", "monic"], [205, 2, 1, "", "monoms"], [205, 2, 1, "", "primitive"], [205, 2, 1, "", "square"], [205, 2, 1, "", "strip_zero"], [205, 2, 1, "", "symmetrize"], [205, 2, 1, "", "tail_degree"], [205, 2, 1, "", "tail_degrees"], [205, 2, 1, "", "terms"]], "sympy.polys.rings.PolyRing": [[205, 2, 1, "", "add"], [205, 2, 1, "", "add_gens"], [205, 2, 1, "", "compose"], [205, 2, 1, "", "drop"], [205, 2, 1, "", "drop_to_ground"], [205, 2, 1, "", "index"], [205, 2, 1, "", "monomial_basis"], [205, 2, 1, "", "mul"], [205, 2, 1, "", "symmetric_poly"]], "sympy.polys.rootoftools": [[210, 1, 1, "", "ComplexRootOf"], [210, 1, 1, "", "RootOf"], [210, 1, 1, "", "RootSum"], [210, 4, 1, "", "rootof"]], "sympy.polys.rootoftools.ComplexRootOf": [[210, 2, 1, "", "_all_roots"], [210, 2, 1, "", "_complexes_index"], [210, 2, 1, "", "_complexes_sorted"], [210, 2, 1, "", "_count_roots"], [210, 2, 1, "", "_ensure_complexes_init"], [210, 2, 1, "", "_ensure_reals_init"], [210, 2, 1, "", "_eval_evalf"], [210, 2, 1, "", "_eval_is_imaginary"], [210, 2, 1, "", "_eval_is_real"], [210, 2, 1, "", "_get_complexes"], [210, 2, 1, "", "_get_complexes_sqf"], [210, 2, 1, "", "_get_interval"], [210, 2, 1, "", "_get_reals"], [210, 2, 1, "", "_get_reals_sqf"], [210, 2, 1, "", "_get_roots"], [210, 2, 1, "", "_indexed_root"], [210, 2, 1, "", "_new"], [210, 2, 1, "", "_postprocess_root"], [210, 2, 1, "", "_preprocess_roots"], [210, 2, 1, "", "_real_roots"], [210, 2, 1, "", "_reals_index"], [210, 2, 1, "", "_reals_sorted"], [210, 2, 1, "", "_refine_complexes"], [210, 2, 1, "", "_reset"], [210, 2, 1, "", "_roots_trivial"], [210, 2, 1, "", "_set_interval"], [210, 2, 1, "", "all_roots"], [210, 2, 1, "", "clear_cache"], [210, 2, 1, "", "eval_approx"], [210, 2, 1, "", "eval_rational"], [210, 2, 1, "", "real_roots"]], "sympy.polys.rootoftools.RootSum": [[210, 2, 1, "", "new"]], "sympy.polys.solvers": [[212, 4, 1, "", "_solve_lin_sys"], [212, 4, 1, "", "_solve_lin_sys_component"], [212, 4, 1, "", "eqs_to_matrix"], [212, 4, 1, "", "solve_lin_sys"], [212, 4, 1, "", "sympy_eqs_to_ring"]], "sympy.polys.specialpolys": [[210, 4, 1, "", "cyclotomic_poly"], [210, 4, 1, "", "interpolating_poly"], [210, 4, 1, "", "random_poly"], [210, 4, 1, "", "swinnerton_dyer_poly"], [210, 4, 1, "", "symmetric_poly"]], "sympy.printing": [[214, 0, 0, "-", "aesaracode"], [214, 0, 0, "-", "c"], [214, 0, 0, "-", "codeprinter"], [214, 0, 0, "-", "conventions"], [214, 0, 0, "-", "cxx"], [214, 0, 0, "-", "fortran"], [214, 0, 0, "-", "gtk"], [214, 0, 0, "-", "jscode"], [214, 0, 0, "-", "julia"], [214, 0, 0, "-", "lambdarepr"], [214, 0, 0, "-", "latex"], [214, 0, 0, "-", "maple"], [214, 0, 0, "-", "mathematica"], [214, 0, 0, "-", "mathml"], [214, 0, 0, "-", "octave"], [214, 0, 0, "-", "precedence"], [214, 0, 0, "-", "pretty"], [214, 0, 0, "-", "preview"], [214, 0, 0, "-", "printer"], [214, 0, 0, "-", "pycode"], [214, 0, 0, "-", "python"], [214, 0, 0, "-", "rcode"], [214, 0, 0, "-", "repr"], [214, 0, 0, "-", "rust"], [214, 0, 0, "-", "smtlib"], [214, 0, 0, "-", "str"], [214, 0, 0, "-", "tree"]], "sympy.printing.aesaracode": [[214, 1, 1, "", "AesaraPrinter"], [214, 4, 1, "", "aesara_code"], [214, 4, 1, "", "aesara_function"], [214, 4, 1, "", "dim_handling"]], "sympy.printing.aesaracode.AesaraPrinter": [[214, 2, 1, "", "doprint"], [214, 5, 1, "", "printmethod"]], "sympy.printing.c": [[214, 1, 1, "", "C89CodePrinter"], [214, 1, 1, "", "C99CodePrinter"], [214, 4, 1, "", "ccode"], [214, 6, 1, "", "known_functions_C89"], [214, 6, 1, "", "known_functions_C99"], [214, 4, 1, "", "print_ccode"]], "sympy.printing.c.C89CodePrinter": [[214, 2, 1, "", "indent_code"], [214, 5, 1, "", "printmethod"]], "sympy.printing.c.C99CodePrinter": [[214, 5, 1, "", "printmethod"]], "sympy.printing.codeprinter": [[214, 7, 1, "", "AssignmentError"], [214, 1, 1, "", "CodePrinter"], [214, 4, 1, "", "cxxcode"]], "sympy.printing.codeprinter.CodePrinter": [[214, 2, 1, "", "doprint"], [214, 5, 1, "", "printmethod"]], "sympy.printing.conventions": [[214, 4, 1, "", "split_super_sub"]], "sympy.printing.cxx": [[214, 1, 1, "", "CXX11CodePrinter"], [214, 1, 1, "", "CXX98CodePrinter"]], "sympy.printing.cxx.CXX11CodePrinter": [[214, 5, 1, "", "printmethod"]], "sympy.printing.cxx.CXX98CodePrinter": [[214, 5, 1, "", "printmethod"]], "sympy.printing.dot": [[214, 4, 1, "", "dotprint"]], "sympy.printing.fortran": [[214, 1, 1, "", "FCodePrinter"], [214, 4, 1, "", "fcode"], [214, 4, 1, "", "print_fcode"]], "sympy.printing.fortran.FCodePrinter": [[214, 2, 1, "", "indent_code"], [214, 5, 1, "", "printmethod"]], "sympy.printing.gtk": [[214, 4, 1, "", "print_gtk"]], "sympy.printing.jscode": [[214, 1, 1, "", "JavascriptCodePrinter"], [214, 4, 1, "", "jscode"], [214, 6, 1, "", "known_functions"]], "sympy.printing.jscode.JavascriptCodePrinter": [[214, 2, 1, "", "indent_code"], [214, 5, 1, "", "printmethod"]], "sympy.printing.julia": [[214, 1, 1, "", "JuliaCodePrinter"], [214, 4, 1, "", "julia_code"], [214, 6, 1, "", "known_fcns_src1"], [214, 6, 1, "", "known_fcns_src2"]], "sympy.printing.julia.JuliaCodePrinter": [[214, 2, 1, "", "indent_code"], [214, 5, 1, "", "printmethod"]], "sympy.printing.lambdarepr": [[214, 1, 1, "", "LambdaPrinter"], [214, 4, 1, "", "lambdarepr"]], "sympy.printing.lambdarepr.LambdaPrinter": [[214, 5, 1, "", "printmethod"]], "sympy.printing.latex": [[214, 1, 1, "", "LatexPrinter"], [214, 6, 1, "", "accepted_latex_functions"], [214, 4, 1, "", "latex"], [214, 4, 1, "", "print_latex"]], "sympy.printing.latex.LatexPrinter": [[214, 2, 1, "", "parenthesize_super"], [214, 5, 1, "", "printmethod"]], "sympy.printing.maple": [[214, 1, 1, "", "MapleCodePrinter"], [214, 4, 1, "", "maple_code"], [214, 4, 1, "", "print_maple_code"]], "sympy.printing.maple.MapleCodePrinter": [[214, 5, 1, "", "printmethod"]], "sympy.printing.mathematica": [[214, 1, 1, "", "MCodePrinter"], [214, 6, 1, "", "known_functions"], [214, 4, 1, "", "mathematica_code"]], "sympy.printing.mathematica.MCodePrinter": [[214, 5, 1, "", "printmethod"]], "sympy.printing.mathml": [[214, 1, 1, "", "MathMLContentPrinter"], [214, 1, 1, "", "MathMLPresentationPrinter"], [214, 1, 1, "", "MathMLPrinterBase"], [214, 4, 1, "", "mathml"], [214, 4, 1, "", "print_mathml"]], "sympy.printing.mathml.MathMLContentPrinter": [[214, 2, 1, "", "mathml_tag"], [214, 5, 1, "", "printmethod"]], "sympy.printing.mathml.MathMLPresentationPrinter": [[214, 2, 1, "", "mathml_tag"], [214, 5, 1, "", "printmethod"]], "sympy.printing.mathml.MathMLPrinterBase": [[214, 2, 1, "", "doprint"]], "sympy.printing.octave": [[214, 1, 1, "", "OctaveCodePrinter"], [214, 6, 1, "", "known_fcns_src1"], [214, 6, 1, "", "known_fcns_src2"], [214, 4, 1, "", "octave_code"]], "sympy.printing.octave.OctaveCodePrinter": [[214, 2, 1, "", "indent_code"], [214, 5, 1, "", "printmethod"]], "sympy.printing.precedence": [[214, 6, 1, "", "PRECEDENCE"], [214, 6, 1, "", "PRECEDENCE_FUNCTIONS"], [214, 6, 1, "", "PRECEDENCE_VALUES"], [214, 4, 1, "", "precedence"]], "sympy.printing.pretty": [[214, 0, 0, "-", "pretty"], [214, 0, 0, "-", "pretty_symbology"], [214, 0, 0, "-", "stringpict"]], "sympy.printing.pretty.pretty": [[214, 1, 1, "", "PrettyPrinter"], [214, 4, 1, "", "pretty"], [214, 4, 1, "", "pretty_print"]], "sympy.printing.pretty.pretty.PrettyPrinter": [[214, 5, 1, "", "printmethod"]], "sympy.printing.pretty.pretty_symbology": [[214, 4, 1, "", "G"], [214, 4, 1, "", "U"], [214, 4, 1, "", "VF"], [214, 4, 1, "", "annotated"], [214, 6, 1, "", "atoms_table"], [214, 6, 1, "", "digit_2txt"], [214, 6, 1, "", "frac"], [214, 4, 1, "", "g"], [214, 6, 1, "", "greek_letters"], [214, 4, 1, "", "hobj"], [214, 4, 1, "", "pretty_atom"], [214, 4, 1, "", "pretty_symbol"], [214, 4, 1, "", "pretty_try_use_unicode"], [214, 4, 1, "", "pretty_use_unicode"], [214, 6, 1, "", "root"], [214, 6, 1, "", "sub"], [214, 6, 1, "", "sup"], [214, 6, 1, "", "symb_2txt"], [214, 4, 1, "", "vobj"], [214, 4, 1, "", "xobj"], [214, 4, 1, "", "xstr"], [214, 4, 1, "", "xsym"]], "sympy.printing.pretty.stringpict": [[214, 1, 1, "", "prettyForm"], [214, 1, 1, "", "stringPict"]], "sympy.printing.pretty.stringpict.prettyForm": [[214, 2, 1, "", "apply"]], "sympy.printing.pretty.stringpict.stringPict": [[214, 2, 1, "", "above"], [214, 2, 1, "", "below"], [214, 2, 1, "", "height"], [214, 2, 1, "", "left"], [214, 2, 1, "", "leftslash"], [214, 2, 1, "", "next"], [214, 2, 1, "", "parens"], [214, 2, 1, "", "render"], [214, 2, 1, "", "right"], [214, 2, 1, "", "root"], [214, 2, 1, "", "stack"], [214, 2, 1, "", "terminal_width"], [214, 2, 1, "", "width"]], "sympy.printing.preview": [[214, 4, 1, "", "preview"]], "sympy.printing.printer": [[214, 1, 1, "", "Printer"]], "sympy.printing.printer.Printer": [[214, 2, 1, "", "_print"], [214, 2, 1, "", "doprint"], [214, 5, 1, "", "printmethod"], [214, 2, 1, "", "set_global_settings"]], "sympy.printing.pycode": [[214, 1, 1, "", "MpmathPrinter"], [214, 4, 1, "", "pycode"]], "sympy.printing.rcode": [[214, 1, 1, "", "RCodePrinter"], [214, 6, 1, "", "known_functions"], [214, 4, 1, "", "print_rcode"], [214, 4, 1, "", "rcode"]], "sympy.printing.rcode.RCodePrinter": [[214, 2, 1, "", "indent_code"], [214, 5, 1, "", "printmethod"]], "sympy.printing.repr": [[214, 1, 1, "", "ReprPrinter"], [214, 4, 1, "", "srepr"]], "sympy.printing.repr.ReprPrinter": [[214, 2, 1, "", "emptyPrinter"], [214, 5, 1, "", "printmethod"], [214, 2, 1, "", "reprify"]], "sympy.printing.rust": [[214, 1, 1, "", "RustCodePrinter"], [214, 6, 1, "", "known_functions"], [214, 4, 1, "", "rust_code"]], "sympy.printing.rust.RustCodePrinter": [[214, 2, 1, "", "indent_code"], [214, 5, 1, "", "printmethod"]], "sympy.printing.smtlib": [[214, 1, 1, "", "SMTLibPrinter"], [214, 4, 1, "", "smtlib_code"]], "sympy.printing.smtlib.SMTLibPrinter": [[214, 5, 1, "", "_default_settings"], [214, 5, 1, "", "printmethod"]], "sympy.printing.str": [[214, 1, 1, "", "StrPrinter"], [214, 4, 1, "", "sstr"], [214, 4, 1, "", "sstrrepr"]], "sympy.printing.str.StrPrinter": [[214, 5, 1, "", "printmethod"]], "sympy.printing.tree": [[214, 4, 1, "", "pprint_nodes"], [214, 4, 1, "", "print_node"], [214, 4, 1, "", "print_tree"], [214, 4, 1, "", "tree"]], "sympy.series.acceleration": [[221, 4, 1, "", "richardson"], [221, 4, 1, "", "shanks"]], "sympy.series.formal": [[216, 1, 1, "", "FiniteFormalPowerSeries"], [216, 1, 1, "", "FormalPowerSeries"], [216, 1, 1, "", "FormalPowerSeriesCompose"], [216, 1, 1, "", "FormalPowerSeriesInverse"], [216, 1, 1, "", "FormalPowerSeriesProduct"], [216, 4, 1, "", "compute_fps"], [216, 4, 1, "", "exp_re"], [216, 4, 1, "", "fps"], [216, 4, 1, "", "hyper_algorithm"], [216, 4, 1, "", "hyper_re"], [216, 4, 1, "", "rational_algorithm"], [216, 4, 1, "", "rational_independent"], [216, 4, 1, "", "rsolve_hypergeometric"], [216, 4, 1, "", "simpleDE"], [216, 4, 1, "", "solve_de"]], "sympy.series.formal.FormalPowerSeries": [[216, 2, 1, "", "coeff_bell"], [216, 2, 1, "", "compose"], [216, 3, 1, "", "infinite"], [216, 2, 1, "", "integrate"], [216, 2, 1, "", "inverse"], [216, 2, 1, "", "polynomial"], [216, 2, 1, "", "product"], [216, 2, 1, "", "truncate"]], "sympy.series.formal.FormalPowerSeriesCompose": [[216, 3, 1, "", "function"]], "sympy.series.formal.FormalPowerSeriesInverse": [[216, 3, 1, "", "function"]], "sympy.series.formal.FormalPowerSeriesProduct": [[216, 3, 1, "", "function"]], "sympy.series.fourier": [[217, 1, 1, "", "FourierSeries"], [217, 4, 1, "", "fourier_series"]], "sympy.series.fourier.FourierSeries": [[217, 2, 1, "", "scale"], [217, 2, 1, "", "scalex"], [217, 2, 1, "", "shift"], [217, 2, 1, "", "shiftx"], [217, 2, 1, "", "sigma_approximation"], [217, 2, 1, "", "truncate"]], "sympy.series.gruntz": [[221, 1, 1, "", "SubsSet"], [221, 4, 1, "", "build_expression_tree"], [221, 4, 1, "", "calculate_series"], [221, 4, 1, "", "compare"], [221, 4, 1, "", "gruntz"], [221, 4, 1, "", "limitinf"], [221, 4, 1, "", "mrv"], [221, 4, 1, "", "mrv_leadterm"], [221, 4, 1, "", "mrv_max1"], [221, 4, 1, "", "mrv_max3"], [221, 4, 1, "", "rewrite"], [221, 4, 1, "", "sign"]], "sympy.series.gruntz.SubsSet": [[221, 2, 1, "", "copy"], [221, 2, 1, "", "do_subs"], [221, 2, 1, "", "meets"], [221, 2, 1, "", "union"]], "sympy.series.limits": [[221, 1, 1, "", "Limit"], [221, 4, 1, "", "limit"]], "sympy.series.limits.Limit": [[221, 2, 1, "", "doit"]], "sympy.series.limitseq": [[219, 4, 1, "", "difference_delta"], [219, 4, 1, "", "dominant"], [219, 4, 1, "", "limit_seq"]], "sympy.series.order": [[221, 1, 1, "", "Order"]], "sympy.series.order.Order": [[221, 2, 1, "", "contains"]], "sympy.series.residues": [[221, 4, 1, "", "residue"]], "sympy.series.sequences": [[220, 1, 1, "", "EmptySequence"], [220, 1, 1, "", "RecursiveSeq"], [220, 1, 1, "", "SeqAdd"], [220, 1, 1, "", "SeqBase"], [220, 1, 1, "", "SeqFormula"], [220, 1, 1, "", "SeqMul"], [220, 1, 1, "", "SeqPer"], [220, 4, 1, "", "sequence"]], "sympy.series.sequences.EmptySequence": [[220, 2, 1, "", "coeff_mul"]], "sympy.series.sequences.RecursiveSeq": [[220, 3, 1, "", "initial"], [220, 3, 1, "", "interval"], [220, 3, 1, "", "n"], [220, 3, 1, "", "recurrence"], [220, 3, 1, "", "start"], [220, 3, 1, "", "stop"], [220, 3, 1, "", "y"], [220, 3, 1, "", "yn"]], "sympy.series.sequences.SeqAdd": [[220, 2, 1, "", "reduce"]], "sympy.series.sequences.SeqBase": [[220, 2, 1, "", "coeff"], [220, 2, 1, "", "coeff_mul"], [220, 2, 1, "", "find_linear_recurrence"], [220, 3, 1, "", "free_symbols"], [220, 3, 1, "", "gen"], [220, 3, 1, "", "interval"], [220, 3, 1, "", "length"], [220, 3, 1, "", "start"], [220, 3, 1, "", "stop"], [220, 3, 1, "", "variables"]], "sympy.series.sequences.SeqFormula": [[220, 2, 1, "", "coeff_mul"]], "sympy.series.sequences.SeqMul": [[220, 2, 1, "", "reduce"]], "sympy.series.sequences.SeqPer": [[220, 2, 1, "", "coeff_mul"]], "sympy.series.series": [[221, 4, 1, "", "series"]], "sympy.sets": [[222, 0, 0, "-", "conditionset"], [222, 0, 0, "-", "fancysets"], [222, 0, 0, "-", "powerset"], [222, 0, 0, "-", "sets"]], "sympy.sets.conditionset": [[222, 1, 1, "", "ConditionSet"], [222, 1, 1, "", "Contains"], [222, 1, 1, "", "SetKind"]], "sympy.sets.fancysets": [[222, 1, 1, "", "CartesianComplexRegion"], [222, 1, 1, "", "ComplexRegion"], [222, 1, 1, "", "Complexes"], [222, 1, 1, "", "ImageSet"], [222, 1, 1, "", "Integers"], [222, 1, 1, "", "Naturals"], [222, 1, 1, "", "Naturals0"], [222, 1, 1, "", "PolarComplexRegion"], [222, 1, 1, "", "Range"], [222, 1, 1, "", "Rationals"], [222, 1, 1, "", "Reals"], [222, 4, 1, "", "normalize_theta_set"]], "sympy.sets.fancysets.ComplexRegion": [[222, 3, 1, "", "a_interval"], [222, 3, 1, "", "b_interval"], [222, 2, 1, "", "from_real"], [222, 3, 1, "", "psets"], [222, 3, 1, "", "sets"]], "sympy.sets.fancysets.Range": [[222, 2, 1, "", "as_relational"], [222, 3, 1, "", "reversed"]], "sympy.sets.powerset": [[222, 1, 1, "", "PowerSet"]], "sympy.sets.sets": [[222, 1, 1, "", "Complement"], [222, 1, 1, "", "DisjointUnion"], [222, 1, 1, "", "EmptySet"], [222, 1, 1, "", "FiniteSet"], [222, 1, 1, "", "Intersection"], [222, 1, 1, "", "Interval"], [222, 1, 1, "", "ProductSet"], [222, 1, 1, "", "Set"], [222, 1, 1, "", "SymmetricDifference"], [222, 1, 1, "", "Union"], [222, 1, 1, "", "UniversalSet"], [222, 4, 1, "", "imageset"]], "sympy.sets.sets.Complement": [[222, 2, 1, "", "as_relational"], [222, 2, 1, "", "reduce"]], "sympy.sets.sets.FiniteSet": [[222, 2, 1, "", "as_relational"]], "sympy.sets.sets.Intersection": [[222, 2, 1, "", "as_relational"]], "sympy.sets.sets.Interval": [[222, 2, 1, "", "Lopen"], [222, 2, 1, "", "Ropen"], [222, 2, 1, "", "as_relational"], [222, 3, 1, "", "end"], [222, 3, 1, "", "is_left_unbounded"], [222, 3, 1, "", "is_right_unbounded"], [222, 3, 1, "", "left_open"], [222, 2, 1, "", "open"], [222, 3, 1, "", "right_open"], [222, 3, 1, "", "start"]], "sympy.sets.sets.ProductSet": [[222, 3, 1, "", "is_iterable"]], "sympy.sets.sets.Set": [[222, 3, 1, "", "boundary"], [222, 3, 1, "", "closure"], [222, 2, 1, "", "complement"], [222, 2, 1, "", "contains"], [222, 3, 1, "", "inf"], [222, 3, 1, "", "interior"], [222, 2, 1, "", "intersect"], [222, 2, 1, "", "intersection"], [222, 3, 1, "", "is_closed"], [222, 2, 1, "", "is_disjoint"], [222, 3, 1, "", "is_open"], [222, 2, 1, "", "is_proper_subset"], [222, 2, 1, "", "is_proper_superset"], [222, 2, 1, "", "is_subset"], [222, 2, 1, "", "is_superset"], [222, 2, 1, "", "isdisjoint"], [222, 2, 1, "", "issubset"], [222, 2, 1, "", "issuperset"], [222, 3, 1, "", "kind"], [222, 3, 1, "", "measure"], [222, 2, 1, "", "powerset"], [222, 3, 1, "", "sup"], [222, 2, 1, "", "symmetric_difference"], [222, 2, 1, "", "union"]], "sympy.sets.sets.SymmetricDifference": [[222, 2, 1, "", "as_relational"]], "sympy.sets.sets.Union": [[222, 2, 1, "", "as_relational"]], "sympy.simplify": [[226, 0, 0, "-", "combsimp"], [226, 0, 0, "-", "cse_main"], [226, 0, 0, "-", "epathtools"], [226, 0, 0, "-", "hyperexpand"], [224, 0, 0, "-", "hyperexpand_doc"], [226, 0, 0, "-", "powsimp"], [226, 0, 0, "-", "radsimp"], [226, 0, 0, "-", "ratsimp"], [15, 0, 0, "-", "simplify"], [226, 0, 0, "-", "sqrtdenest"], [226, 0, 0, "-", "trigsimp"]], "sympy.simplify.combsimp": [[226, 4, 1, "", "combsimp"]], "sympy.simplify.cse_main": [[226, 4, 1, "", "cse"], [226, 4, 1, "", "opt_cse"], [226, 4, 1, "", "tree_cse"]], "sympy.simplify.epathtools": [[226, 1, 1, "", "EPath"], [226, 4, 1, "", "epath"]], "sympy.simplify.epathtools.EPath": [[226, 2, 1, "", "apply"], [226, 2, 1, "", "select"]], "sympy.simplify.fu": [[223, 4, 1, "", "TR0"], [223, 4, 1, "", "TR1"], [223, 4, 1, "", "TR10"], [223, 4, 1, "", "TR10i"], [223, 4, 1, "", "TR11"], [223, 4, 1, "", "TR111"], [223, 4, 1, "", "TR12"], [223, 4, 1, "", "TR12i"], [223, 4, 1, "", "TR13"], [223, 4, 1, "", "TR14"], [223, 4, 1, "", "TR15"], [223, 4, 1, "", "TR16"], [223, 4, 1, "", "TR2"], [223, 4, 1, "", "TR22"], [223, 4, 1, "", "TR2i"], [223, 4, 1, "", "TR3"], [223, 4, 1, "", "TR4"], [223, 4, 1, "", "TR5"], [223, 4, 1, "", "TR6"], [223, 4, 1, "", "TR7"], [223, 4, 1, "", "TR8"], [223, 4, 1, "", "TR9"], [223, 4, 1, "", "TRmorrie"], [223, 4, 1, "", "TRpower"], [223, 4, 1, "", "fu"]], "sympy.simplify.hyperexpand": [[226, 4, 1, "", "hyperexpand"]], "sympy.simplify.powsimp": [[226, 4, 1, "", "powdenest"], [226, 4, 1, "", "powsimp"]], "sympy.simplify.radsimp": [[226, 4, 1, "", "collect"], [226, 4, 1, "", "collect_const"], [226, 4, 1, "", "collect_sqrt"], [226, 4, 1, "", "fraction"], [226, 4, 1, "", "rad_rationalize"], [226, 4, 1, "", "radsimp"], [226, 4, 1, "", "rcollect"]], "sympy.simplify.ratsimp": [[226, 4, 1, "", "ratsimp"], [226, 4, 1, "", "ratsimpmodprime"]], "sympy.simplify.simplify": [[226, 4, 1, "", "besselsimp"], [226, 4, 1, "", "hypersimilar"], [226, 4, 1, "", "hypersimp"], [226, 4, 1, "", "kroneckersimp"], [226, 4, 1, "", "logcombine"], [226, 4, 1, "", "nsimplify"], [226, 4, 1, "", "nthroot"], [226, 4, 1, "", "posify"], [226, 4, 1, "", "separatevars"], [226, 4, 1, "", "simplify"]], "sympy.simplify.sqrtdenest": [[226, 4, 1, "", "sqrtdenest"]], "sympy.simplify.trigsimp": [[226, 4, 1, "", "trigsimp"]], "sympy.solvers.deutils": [[232, 4, 1, "", "ode_order"]], "sympy.solvers.diophantine.diophantine": [[227, 1, 1, "", "BinaryQuadratic"], [227, 1, 1, "", "CubicThue"], [227, 1, 1, "", "DiophantineEquationType"], [227, 1, 1, "", "DiophantineSolutionSet"], [227, 1, 1, "", "GeneralPythagorean"], [227, 1, 1, "", "GeneralSumOfEvenPowers"], [227, 1, 1, "", "GeneralSumOfSquares"], [227, 1, 1, "", "HomogeneousGeneralQuadratic"], [227, 1, 1, "", "HomogeneousTernaryQuadratic"], [227, 1, 1, "", "HomogeneousTernaryQuadraticNormal"], [227, 1, 1, "", "InhomogeneousGeneralQuadratic"], [227, 1, 1, "", "InhomogeneousTernaryQuadratic"], [227, 1, 1, "", "Linear"], [227, 4, 1, "", "PQa"], [227, 1, 1, "", "Univariate"], [227, 4, 1, "", "base_solution_linear"], [227, 4, 1, "", "classify_diop"], [227, 4, 1, "", "cornacchia"], [227, 4, 1, "", "descent"], [227, 4, 1, "", "diop_DN"], [227, 4, 1, "", "diop_bf_DN"], [227, 4, 1, "", "diop_general_pythagorean"], [227, 4, 1, "", "diop_general_sum_of_even_powers"], [227, 4, 1, "", "diop_general_sum_of_squares"], [227, 4, 1, "", "diop_linear"], [227, 4, 1, "", "diop_quadratic"], [227, 4, 1, "", "diop_solve"], [227, 4, 1, "", "diop_ternary_quadratic"], [227, 4, 1, "", "diop_ternary_quadratic_normal"], [227, 4, 1, "", "diophantine"], [227, 4, 1, "", "divisible"], [227, 4, 1, "", "equivalent"], [227, 4, 1, "", "find_DN"], [227, 4, 1, "", "gaussian_reduce"], [227, 4, 1, "", "holzer"], [227, 4, 1, "", "ldescent"], [227, 4, 1, "", "merge_solution"], [227, 4, 1, "", "parametrize_ternary_quadratic"], [227, 4, 1, "", "partition"], [227, 4, 1, "", "power_representation"], [227, 4, 1, "", "prime_as_sum_of_two_squares"], [227, 4, 1, "", "reconstruct"], [227, 4, 1, "", "sqf_normal"], [227, 4, 1, "", "square_factor"], [227, 4, 1, "", "sum_of_four_squares"], [227, 4, 1, "", "sum_of_powers"], [227, 4, 1, "", "sum_of_squares"], [227, 4, 1, "", "sum_of_three_squares"], [227, 4, 1, "", "transformation_to_DN"], [227, 4, 1, "", "transformation_to_normal"]], "sympy.solvers.diophantine.diophantine.DiophantineEquationType": [[227, 2, 1, "", "matches"]], "sympy.solvers": [[229, 0, 0, "-", "inequalities"], [230, 0, 0, "-", "ode"], [231, 0, 0, "-", "pde"], [232, 0, 0, "-", "recurr"], [233, 0, 0, "-", "solveset"]], "sympy.solvers.inequalities": [[229, 4, 1, "", "reduce_abs_inequalities"], [229, 4, 1, "", "reduce_abs_inequality"], [229, 4, 1, "", "reduce_inequalities"], [229, 4, 1, "", "reduce_rational_inequalities"], [229, 4, 1, "", "solve_poly_inequalities"], [229, 4, 1, "", "solve_poly_inequality"], [229, 4, 1, "", "solve_rational_inequalities"], [229, 4, 1, "", "solve_univariate_inequality"]], "sympy.solvers.ode": [[230, 6, 1, "", "allhints"], [230, 4, 1, "", "checkinfsol"], [230, 4, 1, "", "checkodesol"], [230, 4, 1, "", "classify_ode"], [230, 4, 1, "", "constantsimp"], [230, 4, 1, "", "dsolve"], [230, 4, 1, "", "homogeneous_order"], [230, 4, 1, "", "infinitesimals"], [230, 0, 0, "-", "ode"]], "sympy.solvers.ode.lie_group": [[230, 4, 1, "", "lie_heuristic_abaco1_product"], [230, 4, 1, "", "lie_heuristic_abaco1_simple"], [230, 4, 1, "", "lie_heuristic_abaco2_similar"], [230, 4, 1, "", "lie_heuristic_abaco2_unique_general"], [230, 4, 1, "", "lie_heuristic_abaco2_unique_unknown"], [230, 4, 1, "", "lie_heuristic_bivariate"], [230, 4, 1, "", "lie_heuristic_chi"], [230, 4, 1, "", "lie_heuristic_function_sum"], [230, 4, 1, "", "lie_heuristic_linear"]], "sympy.solvers.ode.ode": [[230, 4, 1, "", "_handle_Integral"], [230, 4, 1, "", "_linear_2eq_order1_type6"], [230, 4, 1, "", "_linear_2eq_order1_type7"], [230, 4, 1, "", "_nonlinear_2eq_order1_type1"], [230, 4, 1, "", "_nonlinear_2eq_order1_type2"], [230, 4, 1, "", "_nonlinear_2eq_order1_type3"], [230, 4, 1, "", "_nonlinear_2eq_order1_type4"], [230, 4, 1, "", "_nonlinear_2eq_order1_type5"], [230, 4, 1, "", "_nonlinear_3eq_order1_type1"], [230, 4, 1, "", "_nonlinear_3eq_order1_type2"], [230, 4, 1, "", "_nonlinear_3eq_order1_type3"], [230, 4, 1, "", "_nonlinear_3eq_order1_type4"], [230, 4, 1, "", "_nonlinear_3eq_order1_type5"], [230, 4, 1, "", "constant_renumber"], [230, 4, 1, "", "ode_1st_power_series"], [230, 4, 1, "", "ode_2nd_power_series_ordinary"], [230, 4, 1, "", "ode_2nd_power_series_regular"], [230, 4, 1, "", "ode_sol_simplicity"], [230, 4, 1, "", "odesimp"]], "sympy.solvers.ode.riccati": [[230, 4, 1, "", "compute_m_ybar"], [230, 4, 1, "", "construct_c"], [230, 4, 1, "", "construct_d"], [230, 4, 1, "", "get_gen_sol_from_part_sol"], [230, 4, 1, "", "rational_laurent_series"], [230, 4, 1, "", "remove_redundant_sols"], [230, 4, 1, "", "riccati_inverse_normal"], [230, 4, 1, "", "riccati_normal"], [230, 4, 1, "", "riccati_reduced"], [230, 4, 1, "", "solve_aux_eq"], [230, 4, 1, "", "solve_riccati"]], "sympy.solvers.ode.single": [[230, 1, 1, "", "AlmostLinear"], [230, 1, 1, "", "Bernoulli"], [230, 1, 1, "", "Factorable"], [230, 1, 1, "", "FirstExact"], [230, 1, 1, "", "FirstLinear"], [230, 1, 1, "", "HomogeneousCoeffBest"], [230, 1, 1, "", "HomogeneousCoeffSubsDepDivIndep"], [230, 1, 1, "", "HomogeneousCoeffSubsIndepDivDep"], [230, 1, 1, "", "LieGroup"], [230, 1, 1, "", "LinearCoefficients"], [230, 1, 1, "", "Liouville"], [230, 1, 1, "", "NthAlgebraic"], [230, 1, 1, "", "NthLinearConstantCoeffHomogeneous"], [230, 1, 1, "", "NthLinearConstantCoeffUndeterminedCoefficients"], [230, 1, 1, "", "NthLinearConstantCoeffVariationOfParameters"], [230, 1, 1, "", "NthLinearEulerEqHomogeneous"], [230, 1, 1, "", "NthLinearEulerEqNonhomogeneousUndeterminedCoefficients"], [230, 1, 1, "", "NthLinearEulerEqNonhomogeneousVariationOfParameters"], [230, 1, 1, "", "NthOrderReducible"], [230, 1, 1, "", "RationalRiccati"], [230, 1, 1, "", "RiccatiSpecial"], [230, 1, 1, "", "SecondHypergeometric"], [230, 1, 1, "", "SecondLinearAiry"], [230, 1, 1, "", "SecondLinearBessel"], [230, 1, 1, "", "Separable"], [230, 1, 1, "", "SeparableReduced"]], "sympy.solvers.ode.systems": [[230, 4, 1, "", "canonical_odes"], [230, 4, 1, "", "dsolve_system"], [230, 4, 1, "", "linear_ode_to_matrix"], [230, 4, 1, "", "linodesolve"], [230, 4, 1, "", "linodesolve_type"], [230, 4, 1, "", "matrix_exp"], [230, 4, 1, "", "matrix_exp_jordan_form"]], "sympy.solvers.pde": [[231, 4, 1, "", "checkpdesol"], [231, 4, 1, "", "classify_pde"], [231, 4, 1, "", "pde_1st_linear_constant_coeff"], [231, 4, 1, "", "pde_1st_linear_constant_coeff_homogeneous"], [231, 4, 1, "", "pde_1st_linear_variable_coeff"], [231, 4, 1, "", "pde_separate"], [231, 4, 1, "", "pde_separate_add"], [231, 4, 1, "", "pde_separate_mul"], [231, 4, 1, "", "pdsolve"]], "sympy.solvers.polysys": [[232, 4, 1, "", "solve_poly_system"], [232, 4, 1, "", "solve_triangulated"]], "sympy.solvers.recurr": [[232, 4, 1, "", "rsolve"], [232, 4, 1, "", "rsolve_hyper"], [232, 4, 1, "", "rsolve_poly"], [232, 4, 1, "", "rsolve_ratio"]], "sympy.solvers.solvers": [[232, 4, 1, "", "checksol"], [232, 4, 1, "", "nsolve"], [232, 4, 1, "", "solve"], [232, 4, 1, "", "solve_linear"], [232, 4, 1, "", "solve_linear_system"], [232, 4, 1, "", "solve_linear_system_LU"], [232, 4, 1, "", "solve_undetermined_coeffs"], [232, 4, 1, "", "unrad"]], "sympy.solvers.solveset": [[233, 4, 1, "", "_is_exponential"], [233, 4, 1, "", "_is_logarithmic"], [233, 4, 1, "", "_solve_exponential"], [233, 4, 1, "", "_solve_logarithm"], [233, 4, 1, "", "_transolve"], [233, 4, 1, "", "domain_check"], [233, 4, 1, "", "invert_complex"], [233, 4, 1, "", "invert_real"], [233, 4, 1, "", "linear_eq_to_matrix"], [233, 4, 1, "", "linsolve"], [233, 4, 1, "", "nonlinsolve"], [233, 4, 1, "", "solveset"], [233, 4, 1, "", "solveset_complex"], [233, 4, 1, "", "solveset_real"], [233, 4, 1, "", "solvify"]], "sympy.stats": [[234, 4, 1, "", "Arcsin"], [234, 4, 1, "", "Benini"], [234, 4, 1, "", "Bernoulli"], [234, 1, 1, "", "BernoulliProcess"], [234, 4, 1, "", "Beta"], [234, 4, 1, "", "BetaBinomial"], [234, 4, 1, "", "BetaNoncentral"], [234, 4, 1, "", "BetaPrime"], [234, 4, 1, "", "Binomial"], [234, 4, 1, "", "BoundedPareto"], [234, 4, 1, "", "Cauchy"], [234, 1, 1, "", "CentralMoment"], [234, 4, 1, "", "Chi"], [234, 4, 1, "", "ChiNoncentral"], [234, 4, 1, "", "ChiSquared"], [234, 4, 1, "", "Coin"], [234, 1, 1, "", "ContinuousMarkovChain"], [234, 4, 1, "", "ContinuousRV"], [234, 1, 1, "", "Covariance"], [234, 1, 1, "", "CrossCovarianceMatrix"], [234, 4, 1, "", "Dagum"], [234, 4, 1, "", "Davis"], [234, 4, 1, "", "Die"], [234, 1, 1, "", "DiscreteMarkovChain"], [234, 4, 1, "", "DiscreteUniform"], [234, 4, 1, "", "E"], [234, 4, 1, "", "Erlang"], [234, 4, 1, "", "ExGaussian"], [234, 1, 1, "", "Expectation"], [234, 1, 1, "", "ExpectationMatrix"], [234, 4, 1, "", "Exponential"], [234, 4, 1, "", "FDistribution"], [234, 4, 1, "", "FiniteRV"], [234, 4, 1, "", "FisherZ"], [234, 4, 1, "", "Frechet"], [234, 4, 1, "", "Gamma"], [234, 4, 1, "", "GammaInverse"], [234, 1, 1, "", "GammaProcess"], [234, 4, 1, "", "GeneralizedMultivariateLogGamma"], [234, 4, 1, "", "GeneralizedMultivariateLogGammaOmega"], [234, 4, 1, "", "Geometric"], [234, 4, 1, "", "Gompertz"], [234, 4, 1, "", "Gumbel"], [234, 4, 1, "", "Hermite"], [234, 4, 1, "", "Hypergeometric"], [234, 4, 1, "", "JointRV"], [234, 4, 1, "", "Kumaraswamy"], [234, 4, 1, "", "Laplace"], [234, 4, 1, "", "Levy"], [234, 4, 1, "", "LogLogistic"], [234, 4, 1, "", "LogNormal"], [234, 4, 1, "", "Logarithmic"], [234, 4, 1, "", "Logistic"], [234, 4, 1, "", "Lomax"], [234, 4, 1, "", "MatrixGamma"], [234, 4, 1, "", "MatrixNormal"], [234, 4, 1, "", "Maxwell"], [234, 1, 1, "", "Moment"], [234, 4, 1, "", "Moyal"], [234, 4, 1, "", "Multinomial"], [234, 4, 1, "", "MultivariateBeta"], [234, 4, 1, "", "MultivariateEwens"], [234, 4, 1, "", "MultivariateLaplace"], [234, 4, 1, "", "MultivariateNormal"], [234, 4, 1, "", "MultivariateT"], [234, 4, 1, "", "Nakagami"], [234, 4, 1, "", "NegativeBinomial"], [234, 4, 1, "", "NegativeMultinomial"], [234, 4, 1, "", "Normal"], [234, 4, 1, "", "NormalGamma"], [234, 4, 1, "", "P"], [234, 4, 1, "", "Pareto"], [234, 4, 1, "", "Poisson"], [234, 1, 1, "", "PoissonProcess"], [234, 4, 1, "", "PowerFunction"], [234, 1, 1, "", "Probability"], [234, 4, 1, "", "QuadraticU"], [234, 4, 1, "", "Rademacher"], [234, 4, 1, "", "RaisedCosine"], [234, 4, 1, "", "Rayleigh"], [234, 4, 1, "", "Reciprocal"], [234, 4, 1, "", "ShiftedGompertz"], [234, 4, 1, "", "Skellam"], [234, 4, 1, "", "StudentT"], [234, 4, 1, "", "Trapezoidal"], [234, 4, 1, "", "Triangular"], [234, 4, 1, "", "Uniform"], [234, 4, 1, "", "UniformSum"], [234, 1, 1, "", "Variance"], [234, 1, 1, "", "VarianceMatrix"], [234, 4, 1, "", "VonMises"], [234, 4, 1, "", "Wald"], [234, 4, 1, "", "Weibull"], [234, 1, 1, "", "WienerProcess"], [234, 4, 1, "", "WignerSemicircle"], [234, 4, 1, "", "Wishart"], [234, 4, 1, "", "YuleSimon"], [234, 4, 1, "", "Zeta"], [234, 4, 1, "", "cmoment"], [234, 4, 1, "", "correlation"], [234, 4, 1, "", "coskewness"], [234, 4, 1, "", "covariance"], [234, 0, 0, "-", "crv"], [234, 0, 0, "-", "crv_types"], [234, 4, 1, "", "density"], [234, 4, 1, "", "entropy"], [234, 4, 1, "", "factorial_moment"], [234, 0, 0, "-", "frv"], [234, 0, 0, "-", "frv_types"], [234, 4, 1, "", "given"], [234, 4, 1, "", "kurtosis"], [234, 4, 1, "", "marginal_distribution"], [234, 4, 1, "", "median"], [234, 4, 1, "", "moment"], [234, 4, 1, "", "quantile"], [234, 0, 0, "-", "rv"], [234, 4, 1, "", "sample"], [234, 4, 1, "", "sample_iter"], [234, 4, 1, "", "skewness"], [234, 4, 1, "", "std"], [234, 4, 1, "", "variance"], [234, 4, 1, "", "where"]], "sympy.stats.BernoulliProcess": [[234, 2, 1, "", "expectation"], [234, 2, 1, "", "probability"]], "sympy.stats.DiscreteMarkovChain": [[234, 2, 1, "", "absorbing_probabilities"], [234, 2, 1, "", "canonical_form"], [234, 2, 1, "", "communication_classes"], [234, 2, 1, "", "decompose"], [234, 2, 1, "", "fixed_row_vector"], [234, 2, 1, "", "fundamental_matrix"], [234, 3, 1, "", "limiting_distribution"], [234, 2, 1, "", "sample"], [234, 2, 1, "", "stationary_distribution"], [234, 3, 1, "", "transition_probabilities"]], "sympy.stats.compound_rv": [[234, 1, 1, "", "CompoundDistribution"]], "sympy.stats.crv": [[234, 1, 1, "", "ContinuousDomain"], [234, 1, 1, "", "ContinuousPSpace"]], "sympy.stats.crv_types": [[234, 1, 1, "", "NormalPSpace"]], "sympy.stats.crv_types.sympy.stats": [[234, 4, 1, "", "Die"], [234, 4, 1, "", "Normal"]], "sympy.stats.frv": [[234, 1, 1, "", "FiniteDomain"], [234, 1, 1, "", "FinitePSpace"]], "sympy.stats.frv_types": [[234, 1, 1, "", "DiePSpace"]], "sympy.stats.rv": [[234, 1, 1, "", "ConditionalDomain"], [234, 1, 1, "", "PSpace"], [234, 1, 1, "", "ProductDomain"], [234, 1, 1, "", "ProductPSpace"], [234, 1, 1, "", "RandomDomain"], [234, 1, 1, "", "RandomSymbol"], [234, 1, 1, "", "SingleDomain"], [234, 1, 1, "", "SinglePSpace"], [234, 4, 1, "", "pspace"], [234, 4, 1, "", "random_symbols"], [234, 4, 1, "", "rs_swap"], [234, 4, 1, "", "sampling_E"], [234, 4, 1, "", "sampling_P"], [234, 4, 1, "", "sampling_density"]], "sympy.tensor": [[235, 0, 0, "-", "array"], [238, 0, 0, "-", "index_methods"], [239, 0, 0, "-", "indexed"], [240, 0, 0, "-", "tensor"], [241, 0, 0, "-", "toperators"]], "sympy.tensor.array": [[235, 1, 1, "", "ImmutableDenseNDimArray"], [235, 1, 1, "", "ImmutableSparseNDimArray"], [235, 1, 1, "", "MutableDenseNDimArray"], [235, 1, 1, "", "MutableSparseNDimArray"], [235, 4, 1, "", "derive_by_array"], [236, 0, 0, "-", "expressions"], [235, 4, 1, "", "permutedims"], [235, 4, 1, "", "tensorcontraction"], [235, 4, 1, "", "tensordiagonal"], [235, 4, 1, "", "tensorproduct"]], "sympy.tensor.array.expressions": [[236, 1, 1, "", "ArrayContraction"], [236, 1, 1, "", "ArrayDiagonal"], [236, 1, 1, "", "ArrayTensorProduct"], [236, 1, 1, "", "PermuteDims"]], "sympy.tensor.index_methods": [[238, 4, 1, "", "get_contraction_structure"], [238, 4, 1, "", "get_indices"]], "sympy.tensor.indexed": [[239, 1, 1, "", "Idx"], [239, 1, 1, "", "Indexed"], [239, 1, 1, "", "IndexedBase"]], "sympy.tensor.indexed.Idx": [[239, 3, 1, "", "label"], [239, 3, 1, "", "lower"], [239, 3, 1, "", "upper"]], "sympy.tensor.indexed.Indexed": [[239, 3, 1, "", "base"], [239, 3, 1, "", "indices"], [239, 3, 1, "", "ranges"], [239, 3, 1, "", "rank"], [239, 3, 1, "", "shape"]], "sympy.tensor.indexed.IndexedBase": [[239, 3, 1, "", "label"], [239, 3, 1, "", "offset"], [239, 3, 1, "", "shape"], [239, 3, 1, "", "strides"]], "sympy.tensor.tensor": [[240, 1, 1, "", "TensAdd"], [240, 1, 1, "", "TensExpr"], [240, 1, 1, "", "TensMul"], [240, 1, 1, "", "TensorHead"], [240, 1, 1, "", "TensorIndex"], [240, 1, 1, "", "TensorIndexType"], [240, 1, 1, "", "TensorSymmetry"], [240, 1, 1, "", "TensorType"], [240, 1, 1, "", "_TensorManager"], [240, 4, 1, "", "canon_bp"], [240, 4, 1, "", "riemann_cyclic"], [240, 4, 1, "", "riemann_cyclic_replace"], [240, 4, 1, "", "tensor_heads"], [240, 4, 1, "", "tensorsymmetry"]], "sympy.tensor.tensor.TensAdd": [[240, 2, 1, "", "canon_bp"], [240, 2, 1, "", "contract_metric"]], "sympy.tensor.tensor.TensExpr": [[240, 2, 1, "", "get_matrix"], [240, 2, 1, "", "replace_with_arrays"]], "sympy.tensor.tensor.TensMul": [[240, 2, 1, "", "canon_bp"], [240, 2, 1, "", "contract_metric"], [240, 2, 1, "", "get_free_indices"], [240, 2, 1, "", "get_indices"], [240, 2, 1, "", "perm2tensor"], [240, 2, 1, "", "sorted_components"], [240, 2, 1, "", "split"]], "sympy.tensor.tensor.TensorHead": [[240, 2, 1, "", "commutes_with"]], "sympy.tensor.tensor.TensorSymmetry": [[240, 2, 1, "", "direct_product"], [240, 2, 1, "", "fully_symmetric"], [240, 2, 1, "", "no_symmetry"], [240, 2, 1, "", "riemann"]], "sympy.tensor.tensor._TensorManager": [[240, 2, 1, "", "clear"], [240, 2, 1, "", "comm_i2symbol"], [240, 2, 1, "", "comm_symbols2i"], [240, 2, 1, "", "get_comm"], [240, 2, 1, "", "set_comm"], [240, 2, 1, "", "set_comms"]], "sympy.tensor.toperators": [[241, 1, 1, "", "PartialDerivative"]], "sympy.testing": [[243, 0, 0, "-", "pytest"], [244, 0, 0, "-", "randtest"], [245, 0, 0, "-", "runtests"]], "sympy.testing.pytest": [[243, 4, 1, "", "SKIP"], [243, 4, 1, "", "nocache_fail"], [243, 4, 1, "", "raises"], [243, 4, 1, "", "skip_under_pyodide"], [243, 4, 1, "", "warns"], [243, 4, 1, "", "warns_deprecated_sympy"]], "sympy.testing.runtests": [[245, 1, 1, "", "PyTestReporter"], [245, 1, 1, "", "Reporter"], [245, 1, 1, "", "SymPyDocTestFinder"], [245, 1, 1, "", "SymPyDocTestRunner"], [245, 1, 1, "", "SymPyOutputChecker"], [245, 1, 1, "", "SymPyTestResults"], [245, 4, 1, "", "convert_to_native_paths"], [245, 4, 1, "", "doctest"], [245, 4, 1, "", "get_sympy_dir"], [245, 4, 1, "", "raise_on_deprecated"], [245, 4, 1, "", "run_all_tests"], [245, 4, 1, "", "run_in_subprocess_with_hash_randomization"], [245, 4, 1, "", "split_list"], [245, 4, 1, "", "sympytestfile"], [245, 4, 1, "", "test"]], "sympy.testing.runtests.PyTestReporter": [[245, 2, 1, "", "write"]], "sympy.testing.runtests.SymPyDocTestRunner": [[245, 2, 1, "", "run"]], "sympy.testing.runtests.SymPyOutputChecker": [[245, 2, 1, "", "check_output"]], "sympy.testing.runtests.SymPyTestResults": [[245, 5, 1, "", "attempted"], [245, 5, 1, "", "failed"]], "sympy.utilities": [[246, 0, 0, "-", "autowrap"], [247, 0, 0, "-", "codegen"], [248, 0, 0, "-", "decorator"], [249, 0, 0, "-", "enumerative"], [250, 0, 0, "-", "exceptions"], [252, 0, 0, "-", "iterables"], [253, 0, 0, "-", "lambdify"], [254, 0, 0, "-", "memoization"], [255, 0, 0, "-", "misc"], [256, 0, 0, "-", "pkgdata"], [257, 0, 0, "-", "source"], [258, 0, 0, "-", "timeutils"]], "sympy.utilities.autowrap": [[246, 1, 1, "", "CodeWrapper"], [246, 1, 1, "", "CythonCodeWrapper"], [246, 1, 1, "", "DummyWrapper"], [246, 1, 1, "", "F2PyCodeWrapper"], [246, 1, 1, "", "UfuncifyCodeWrapper"], [246, 4, 1, "", "autowrap"], [246, 4, 1, "", "binary_function"], [246, 4, 1, "", "ufuncify"]], "sympy.utilities.autowrap.CythonCodeWrapper": [[246, 2, 1, "", "dump_pyx"]], "sympy.utilities.autowrap.UfuncifyCodeWrapper": [[246, 2, 1, "", "dump_c"]], "sympy.utilities.codegen": [[247, 1, 1, "", "Argument"], [247, 1, 1, "", "CCodeGen"], [247, 1, 1, "", "CodeGen"], [247, 1, 1, "", "DataType"], [247, 1, 1, "", "FCodeGen"], [247, 1, 1, "", "JuliaCodeGen"], [247, 1, 1, "", "OctaveCodeGen"], [247, 1, 1, "", "OutputArgument"], [247, 1, 1, "", "Result"], [247, 1, 1, "", "Routine"], [247, 1, 1, "", "RustCodeGen"], [247, 4, 1, "", "codegen"], [247, 4, 1, "", "get_default_datatype"], [247, 4, 1, "", "make_routine"]], "sympy.utilities.codegen.CCodeGen": [[247, 2, 1, "", "dump_c"], [247, 2, 1, "", "dump_h"], [247, 2, 1, "", "get_prototype"]], "sympy.utilities.codegen.CodeGen": [[247, 2, 1, "", "dump_code"], [247, 2, 1, "", "routine"], [247, 2, 1, "", "write"]], "sympy.utilities.codegen.FCodeGen": [[247, 2, 1, "", "dump_f95"], [247, 2, 1, "", "dump_h"], [247, 2, 1, "", "get_interface"]], "sympy.utilities.codegen.JuliaCodeGen": [[247, 2, 1, "", "dump_jl"], [247, 2, 1, "", "routine"]], "sympy.utilities.codegen.OctaveCodeGen": [[247, 2, 1, "", "dump_m"], [247, 2, 1, "", "routine"]], "sympy.utilities.codegen.Routine": [[247, 3, 1, "", "result_variables"], [247, 3, 1, "", "variables"]], "sympy.utilities.codegen.RustCodeGen": [[247, 2, 1, "", "dump_rs"], [247, 2, 1, "", "get_prototype"], [247, 2, 1, "", "routine"]], "sympy.utilities.decorator": [[248, 4, 1, "", "conserve_mpmath_dps"], [248, 4, 1, "", "deprecated"], [248, 4, 1, "", "doctest_depends_on"], [248, 4, 1, "", "memoize_property"], [248, 1, 1, "", "no_attrs_in_subclass"], [248, 4, 1, "", "public"], [248, 4, 1, "", "threaded"], [248, 4, 1, "", "threaded_factory"], [248, 4, 1, "", "xthreaded"]], "sympy.utilities.enumerative": [[249, 1, 1, "", "MultisetPartitionTraverser"], [249, 4, 1, "", "factoring_visitor"], [249, 4, 1, "", "list_visitor"], [249, 4, 1, "", "multiset_partitions_taocp"]], "sympy.utilities.enumerative.MultisetPartitionTraverser": [[249, 2, 1, "", "count_partitions"], [249, 2, 1, "", "enum_all"], [249, 2, 1, "", "enum_large"], [249, 2, 1, "", "enum_range"], [249, 2, 1, "", "enum_small"]], "sympy.utilities.exceptions": [[250, 7, 1, "", "SymPyDeprecationWarning"], [250, 4, 1, "", "ignore_warnings"], [250, 4, 1, "", "sympy_deprecation_warning"]], "sympy.utilities.iterables": [[252, 1, 1, "", "NotIterable"], [252, 4, 1, "", "binary_partitions"], [252, 4, 1, "", "bracelets"], [252, 4, 1, "", "capture"], [252, 4, 1, "", "common_prefix"], [252, 4, 1, "", "common_suffix"], [252, 4, 1, "", "connected_components"], [252, 4, 1, "", "dict_merge"], [252, 4, 1, "", "filter_symbols"], [252, 4, 1, "", "flatten"], [252, 4, 1, "", "generate_bell"], [252, 4, 1, "", "generate_derangements"], [252, 4, 1, "", "generate_involutions"], [252, 4, 1, "", "generate_oriented_forest"], [252, 4, 1, "", "group"], [252, 4, 1, "", "has_dups"], [252, 4, 1, "", "has_variety"], [252, 4, 1, "", "ibin"], [252, 4, 1, "", "iproduct"], [252, 4, 1, "", "is_palindromic"], [252, 4, 1, "", "is_sequence"], [252, 4, 1, "", "iterable"], [252, 4, 1, "", "kbins"], [252, 4, 1, "", "least_rotation"], [252, 4, 1, "", "minlex"], [252, 4, 1, "", "multiset"], [252, 4, 1, "", "multiset_combinations"], [252, 4, 1, "", "multiset_derangements"], [252, 4, 1, "", "multiset_partitions"], [252, 4, 1, "", "multiset_permutations"], [252, 4, 1, "", "necklaces"], [252, 4, 1, "", "numbered_symbols"], [252, 4, 1, "", "ordered_partitions"], [252, 4, 1, "", "partitions"], [252, 4, 1, "", "permute_signs"], [252, 4, 1, "", "postfixes"], [252, 4, 1, "", "prefixes"], [252, 4, 1, "", "random_derangement"], [252, 4, 1, "", "reshape"], [252, 4, 1, "", "rotate_left"], [252, 4, 1, "", "rotate_right"], [252, 4, 1, "", "rotations"], [252, 4, 1, "", "roundrobin"], [252, 4, 1, "", "runs"], [252, 4, 1, "", "sequence_partitions"], [252, 4, 1, "", "sequence_partitions_empty"], [252, 4, 1, "", "sift"], [252, 4, 1, "", "signed_permutations"], [252, 4, 1, "", "strongly_connected_components"], [252, 4, 1, "", "subsets"], [252, 4, 1, "", "take"], [252, 4, 1, "", "topological_sort"], [252, 4, 1, "", "unflatten"], [252, 4, 1, "", "uniq"], [252, 4, 1, "", "variations"]], "sympy.utilities.lambdify": [[253, 4, 1, "", "implemented_function"], [253, 4, 1, "", "lambdastr"], [253, 4, 1, "", "lambdify"]], "sympy.utilities.memoization": [[254, 4, 1, "", "assoc_recurrence_memo"], [254, 4, 1, "", "recurrence_memo"]], "sympy.utilities.misc": [[255, 4, 1, "", "as_int"], [255, 4, 1, "", "debug"], [255, 4, 1, "", "debug_decorator"], [255, 4, 1, "", "debugf"], [255, 4, 1, "", "filldedent"], [255, 4, 1, "", "find_executable"], [255, 4, 1, "", "func_name"], [255, 4, 1, "", "ordinal"], [255, 4, 1, "", "rawlines"], [255, 4, 1, "", "replace"], [255, 4, 1, "", "strlines"], [255, 4, 1, "", "translate"]], "sympy.utilities.pkgdata": [[256, 4, 1, "", "get_resource"]], "sympy.utilities.source": [[257, 4, 1, "", "get_class"], [257, 4, 1, "", "get_mod_func"]], "sympy.utilities.timeutils": [[258, 4, 1, "", "timed"]], "sympy.vector.coordsysrect": [[259, 1, 1, "", "CoordSys3D"]], "sympy.vector.coordsysrect.CoordSys3D": [[259, 2, 1, "", "__init__"], [259, 2, 1, "", "create_new"], [259, 2, 1, "", "locate_new"], [259, 2, 1, "", "orient_new"], [259, 2, 1, "", "orient_new_axis"], [259, 2, 1, "", "orient_new_body"], [259, 2, 1, "", "orient_new_quaternion"], [259, 2, 1, "", "orient_new_space"], [259, 2, 1, "", "position_wrt"], [259, 2, 1, "", "rotation_matrix"], [259, 2, 1, "", "scalar_map"]], "sympy.vector": [[262, 4, 1, "", "curl"], [262, 4, 1, "", "divergence"], [262, 4, 1, "", "express"], [262, 4, 1, "", "gradient"], [262, 4, 1, "", "is_conservative"], [262, 4, 1, "", "is_solenoidal"], [262, 4, 1, "", "matrix_to_vector"], [262, 4, 1, "", "scalar_potential"], [262, 4, 1, "", "scalar_potential_difference"]], "sympy.vector.deloperator": [[259, 1, 1, "", "Del"]], "sympy.vector.deloperator.Del": [[259, 2, 1, "", "cross"], [259, 2, 1, "", "dot"], [259, 2, 1, "", "gradient"]], "sympy.vector.dyadic": [[259, 1, 1, "", "Dyadic"]], "sympy.vector.dyadic.Dyadic": [[259, 3, 1, "", "components"], [259, 2, 1, "", "cross"], [259, 2, 1, "", "dot"], [259, 2, 1, "", "to_matrix"]], "sympy.vector.implicitregion": [[259, 1, 1, "", "ImplicitRegion"]], "sympy.vector.implicitregion.ImplicitRegion": [[259, 2, 1, "", "multiplicity"], [259, 2, 1, "", "rational_parametrization"], [259, 2, 1, "", "regular_point"], [259, 2, 1, "", "singular_points"]], "sympy.vector.integrals": [[259, 1, 1, "", "ParametricIntegral"], [262, 4, 1, "", "vector_integrate"]], "sympy.vector.orienters": [[261, 1, 1, "", "AxisOrienter"], [261, 1, 1, "", "BodyOrienter"], [261, 1, 1, "", "Orienter"], [261, 1, 1, "", "QuaternionOrienter"], [261, 1, 1, "", "SpaceOrienter"]], "sympy.vector.orienters.AxisOrienter": [[261, 2, 1, "", "__init__"], [261, 2, 1, "", "rotation_matrix"]], "sympy.vector.orienters.BodyOrienter": [[261, 2, 1, "", "__init__"]], "sympy.vector.orienters.Orienter": [[261, 2, 1, "", "rotation_matrix"]], "sympy.vector.orienters.QuaternionOrienter": [[261, 2, 1, "", "__init__"]], "sympy.vector.orienters.SpaceOrienter": [[261, 2, 1, "", "__init__"]], "sympy.vector.parametricregion": [[259, 1, 1, "", "ParametricRegion"]], "sympy.vector.vector": [[259, 1, 1, "", "Vector"]], "sympy.vector.vector.Vector": [[259, 3, 1, "", "components"], [259, 2, 1, "", "cross"], [259, 2, 1, "", "dot"], [259, 2, 1, "", "magnitude"], [259, 2, 1, "", "normalize"], [259, 2, 1, "", "outer"], [259, 2, 1, "", "projection"], [259, 2, 1, "", "separate"], [259, 2, 1, "", "to_matrix"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function", "5": "py:attribute", "6": "py:data", "7": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"], "5": ["py", "attribute", "Python attribute"], "6": ["py", "data", "Python data"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"cite": 0, "sympi": [0, 4, 7, 8, 9, 13, 15, 18, 19, 20, 27, 29, 33, 35, 36, 46, 88, 107, 146, 195, 204, 259, 262, 263, 266, 280, 282, 285], "debug": [1, 12], "depend": [2, 8, 12, 143, 204, 264], "hard": 2, "option": [2, 9, 29, 32, 33, 34, 207], "recommend": [2, 5], "interact": [2, 93, 200], "us": [2, 5, 7, 13, 19, 25, 27, 28, 29, 30, 31, 32, 33, 34, 46, 68, 89, 90, 106, 109, 138, 143, 144, 198, 200, 211, 233, 264], "print": [2, 13, 23, 46, 93, 119, 127, 188, 194, 214, 290], "pars": [2, 34, 107], "logic": [2, 22, 95, 270, 273], "plot": [2, 13, 113, 159, 200], "lambdifi": [2, 13, 106, 253, 280], "code": [2, 3, 5, 7, 9, 11, 12, 13, 46, 49, 119, 198, 214, 257, 270, 272], "gener": [2, 4, 5, 46, 55, 57, 204, 209, 233, 265, 270, 272], "autowrap": [2, 46, 246], "printer": [2, 46, 214, 290], "test": [2, 11, 12, 13, 62, 95, 213, 242, 244, 245, 287], "onli": [2, 27, 32, 233], "statist": 2, "symengin": 2, "backend": [2, 200], "sage": 2, "develop": [2, 7, 9, 11, 65], "get": [2, 7, 9, 15, 25], "sourc": [2, 257], "run": [2, 11, 12, 36, 245], "build": [2, 8], "document": [2, 3, 4, 5, 7, 8, 11, 35], "benchmark": 2, "deprec": [3, 12, 13], "polici": [3, 12], "what": [3, 143, 203, 204, 233, 285, 288], "i": [3, 12, 15, 31, 32, 90, 106, 143, 203, 214, 233, 285], "try": 3, "avoid": 3, "backward": 3, "incompat": 3, "chang": [3, 11, 13], "first": [3, 13], "place": 3, "when": [3, 34, 90], "doe": [3, 15, 233], "requir": [3, 8], "public": 3, "api": [3, 35, 86, 90, 92, 115, 122, 192, 233, 246, 247, 260, 270], "Not": [3, 25, 27, 28, 29, 31, 32, 33, 34], "The": [3, 13, 21, 23, 47, 55, 90, 143, 184, 196, 209, 221, 224, 265, 266, 285], "purpos": 3, "technic": 3, "possibl": [3, 29, 287], "how": [3, 24, 35, 90, 198, 233], "long": 3, "should": [3, 106], "last": 3, "checklist": [3, 11], "ad": 3, "releas": 3, "note": [3, 23, 65, 77, 143, 221, 223, 283, 292], "entri": [3, 101], "docstr": [4, 5, 108, 111, 120, 121, 123, 124, 125, 126, 127, 128, 190, 191, 193, 194, 259, 261, 262], "style": [4, 5, 12], "guid": [4, 5, 10, 12, 24, 35, 139, 196, 267], "guidelin": [4, 5], "format": [4, 5, 13, 34], "section": 4, "1": [4, 13, 32, 90, 109, 129, 143, 155], "singl": [4, 15, 17, 27], "sentenc": 4, "summari": 4, "2": [4, 32, 90, 109, 129, 143], "explan": [4, 16, 35], "3": [4, 92, 109, 129, 180], "exampl": [4, 11, 23, 25, 27, 28, 31, 33, 37, 65, 77, 89, 92, 105, 109, 116, 130, 143, 147, 151, 182, 183, 184, 198, 213, 214, 221, 224, 234, 235, 236, 239, 265, 285, 291], "4": [4, 13, 109], "paramet": [4, 28, 224, 233], "5": [4, 13, 109], "see": [4, 65, 252, 265], "also": [4, 65, 252], "6": [4, 13, 109], "refer": [4, 21, 35, 38, 45, 48, 64, 65, 67, 77, 83, 90, 92, 98, 99, 101, 103, 105, 107, 122, 145, 151, 154, 184, 196, 198, 199, 200, 201, 205, 207, 209, 210, 211, 221, 223, 224, 227, 233, 246, 247, 267, 270], "sampl": [4, 13], "class": [4, 18, 45, 46, 64, 67, 99, 101, 103, 105, 143, 189, 200, 209, 214, 227, 235, 259, 261], "ar": [4, 27, 32, 198, 204, 233], "mathemat": [4, 15, 25, 146], "function": [4, 12, 13, 15, 23, 25, 27, 29, 31, 32, 34, 46, 55, 64, 65, 71, 72, 73, 83, 84, 87, 88, 90, 95, 101, 105, 107, 109, 119, 126, 144, 166, 169, 190, 191, 195, 200, 202, 204, 205, 210, 213, 214, 224, 227, 230, 231, 235, 262, 266, 290, 291], "best": [4, 5, 23], "practic": [4, 5, 23], "write": [4, 5, 11, 12, 23], "import": 4, "sphinx": 4, "cross": 4, "referenc": 4, "type": [5, 12, 17, 27, 46, 73, 190, 233, 234], "narr": 5, "markdown": 5, "prefer": [5, 34], "math": [5, 46], "latex": [5, 107, 290], "head": 5, "spell": 5, "punctuat": 5, "capit": 5, "tone": 5, "contribut": [6, 7, 11, 35, 211], "introduct": [7, 15, 19, 38, 45, 46, 47, 55, 67, 77, 95, 129, 146, 184, 195, 197, 200, 201, 202, 209, 213, 268, 285], "familiar": 7, "softwar": 7, "read": [7, 283], "paper": 7, "perus": 7, "review": 7, "conduct": 7, "join": 7, "our": 7, "mail": 7, "list": [7, 13, 15, 17, 25, 27], "setup": [7, 9], "your": [7, 9, 11, 29], "environ": [7, 9], "identifi": 7, "someth": [7, 12], "work": [7, 28, 30, 32, 77, 213], "codebas": 7, "pull": [7, 11], "request": [7, 11], "docker": 8, "debian": 8, "ubuntu": 8, "fedora": 8, "mac": 8, "window": [8, 200], "10": [8, 13, 109], "doc": [8, 205], "local": 8, "instal": [8, 9, 35, 36, 107, 289], "logo": 8, "view": 8, "auto": 8, "rebuild": 8, "live": 8, "server": 8, "pdf": 8, "git": [9, 36], "configur": [9, 207], "name": [9, 11, 53], "email": [9, 11], "set": [9, 13, 18, 29, 32, 33, 42, 77, 198, 222, 233, 290], "github": [9, 12], "creat": [9, 11, 13, 15, 23, 31, 101], "account": 9, "ssh": 9, "kei": [9, 23, 146, 286], "fork": 9, "virtual": 9, "new": [10, 11, 13, 264], "contributor": 10, "index": [10, 47, 55, 236, 239], "workflow": 11, "process": [11, 234], "pick": 11, "an": [11, 13, 29, 31, 32, 77, 129, 184, 224, 233, 286], "issu": [11, 119, 129, 143, 188, 287], "fix": [11, 129], "branch": [11, 90], "modifi": 11, "qualiti": [11, 12], "add": [11, 23, 65], "commit": 11, "delet": [11, 287], "junk": 11, "file": 11, "messag": 11, "good": 11, "co": 11, "author": [11, 199], "make": [11, 29, 34], "titl": 11, "descript": 11, "address": 11, "mailmap": 11, "basic": [12, 65, 69, 101, 190, 202, 204, 210, 222, 263, 270, 271, 280, 287], "failur": 12, "action": 12, "regress": 12, "special": [12, 15, 20, 46, 73, 210, 222, 291], "except": [12, 101, 107, 207, 250], "warn": [12, 13, 250], "unchang": 12, "express": [12, 13, 15, 25, 28, 29, 31, 46, 77, 84, 87, 95, 98, 107, 121, 204, 213, 236, 264, 280, 286], "dummi": 12, "consist": [12, 34], "check": [12, 13, 190], "random": [12, 65, 234], "skip": 12, "mark": 12, "expect": 12, "fail": 12, "slow": [12, 143], "extern": 12, "doctest": 12, "updat": 12, "exist": [12, 90], "coverag": 12, "activ": 13, "silenc": 13, "version": 13, "13": 13, "move": [13, 224], "mechan": [13, 21, 110, 119, 122, 130, 139, 140, 141, 142, 143, 144, 145, 146, 147, 166, 234], "12": 13, "managedproperti": 13, "metaclass": 13, "joint": [13, 123, 140, 234], "coordin": [13, 119, 133, 143, 200, 263, 264, 266, 268], "intermedi": 13, "frame": [13, 198], "attach": 13, "point": [13, 23, 69, 80, 119, 188, 197, 263], "argument": [13, 15, 233], "11": [13, 109], "modul": [13, 114, 149, 188, 196, 201, 202, 203, 204, 207, 209, 210, 227, 230, 231, 233, 246], "tensor": [13, 61, 73, 178, 237, 240, 241], "arrai": [13, 235, 236], "conv_": 13, "renam": 13, "from_": 13, "mathematica": [13, 214], "parser": [13, 129], "redund": 13, "static": 13, "method": [13, 19, 23, 30, 36, 124, 133, 136, 137, 138, 141, 142, 143, 214, 231, 233, 238, 264, 287], "carmichael": 13, "hadamardproduct": 13, "matadd": 13, "matmul": 13, "some": [13, 32, 146, 233], "travers": [13, 65], "have": [13, 29, 33, 213], "been": 13, "core": [13, 65, 98], "trace": 13, "compat": [13, 236], "submodul": [13, 77], "9": [13, 109], "expr_free_symbol": 13, "stat": [13, 234], "numsampl": 13, "n": [13, 235, 236], "poli": [13, 203, 204, 205, 212], "solver": [13, 32, 212, 228, 229, 230, 232, 233, 292], "rawmatrix": 13, "non": 13, "expr": [13, 65], "object": [13, 18, 239], "matrix": [13, 30, 42, 98, 101, 102, 143, 234, 287], "get_seg": 13, "attribut": [13, 47, 55], "mdft": 13, "physic": [13, 116, 119, 130, 140, 141, 142, 143, 144, 145, 146, 147, 186, 188, 192, 195, 196, 197, 198, 270, 276], "matric": [13, 19, 30, 96, 97, 98, 99, 100, 101, 103, 116, 118, 236, 270, 274, 287], "privat": 13, "sparsematrix": [13, 103], "_smat": 13, "densematrix": 13, "_mat": 13, "laplace_transform": 13, "nocond": 13, "fals": 13, "8": [13, 109], "theanocod": 13, "assumpt": [13, 18, 21, 23, 41, 65], "handler": [13, 21], "askhandl": 13, "relat": [13, 15, 17, 21, 27, 65, 73, 95, 195, 198, 266], "7": [13, 109], "call": [13, 27, 34], "stochasticprocess": 13, "distribut": [13, 207, 234], "randomindexedsymbol": 13, "discretemarkovchain": 13, "absorbing_probabilit": 13, "util": [13, 46, 62, 63, 82, 101, 152, 209, 232, 251, 258, 270, 278], "misc": [13, 41], "find_execut": 13, "mutabl": 13, "diffgeom": 13, "unicod": [13, 290], "pretti": [13, 214, 290], "stringpict": 13, "prettyform": 13, "pretty_symbologi": 13, "xstr": 13, "pass": 13, "oper": [13, 15, 87, 101, 157, 166, 168, 169, 190, 195, 198, 224, 235, 241, 263, 265, 266, 280, 287], "longer": 13, "accept": 13, "arg": [13, 286], "variou": [13, 213], "randtest": 13, "mix": 13, "polynomi": [13, 25, 73, 87, 202, 204, 205, 206, 207, 209, 210, 211, 213, 232, 291], "binari": 13, "print_cycl": 13, "flag": 13, "combinator": [13, 52], "permut": [13, 56, 57], "integr": [13, 32, 69, 73, 87, 89, 90, 91, 92, 119, 202, 209, 269, 281], "string": [13, 21, 34, 280], "fallback": 13, "sympifi": [13, 65], "indefinit": 13, "eq": [13, 29], "fun_ev": 13, "__call__": 13, "tensortyp": 13, "dummy_fmt": 13, "tensorindextyp": 13, "metric": 13, "get_kronecker_delta": 13, "get_epsilon": 13, "tensorsymmetri": 13, "tensorhead": 13, "is_emptyset": 13, "productset": 13, "iter": [13, 222, 252], "set_potential_energi": 13, "condit": [13, 32, 90, 222], "conditionset": 13, "max_degre": 13, "get_upper_degre": 13, "properti": [13, 21, 201], "multivariate_result": 13, "dixonresult": 13, "tupl": [13, 15, 17, 27, 210], "lambda": 13, "evalu": [13, 15, 23, 25, 69, 87, 146, 286], "differentiate_finit": 13, "data": 13, "glossari": 14, "gotcha": [15, 21, 129, 283], "pitfal": 15, "equal": [15, 28, 29, 283], "sign": [15, 283], "doubl": 15, "variabl": [15, 27, 32, 34, 200, 234, 264], "assign": 15, "between": [15, 21, 186, 204], "symbol": [15, 21, 22, 23, 27, 28, 30, 65, 84, 143, 147, 199, 204, 210, 213, 233, 283, 285], "python": [15, 46], "number": [15, 42, 51, 65, 68, 69, 90, 105, 204, 209, 213, 270, 275], "v": [15, 22, 204], "float": [15, 69], "ration": [15, 204, 205, 210, 213, 216, 230, 291], "immut": [15, 99], "invers": [15, 23, 71, 90], "trig": 15, "sqrt": 15, "dictionari": [15, 17, 25, 33], "keyword": 15, "help": 15, "from": [15, 28, 29, 30, 34, 213, 236], "within": 15, "solv": [17, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 109, 202, 209, 232, 233, 292], "output": [17, 119, 233], "empti": 17, "Of": 17, "valu": [17, 22, 34], "boolean": [17, 22, 95], "classif": 18, "kind": [18, 65], "func": [18, 286], "finit": [19, 44, 47, 201, 204, 207, 209, 213, 224, 234, 281], "differ": [19, 21, 44, 146, 204, 264, 281], "approxim": [19, 25, 46], "deriv": [19, 32, 198, 235, 266, 281], "A": [19, 131, 132, 135, 136, 137, 138, 143, 285, 292], "direct": [19, 266], "topic": [20, 119, 188, 270, 277], "old": [21, 204], "system": [21, 27, 31, 33, 113, 134, 147, 181, 183, 184, 187, 230, 232, 263, 264, 266, 268], "appli": [21, 90, 224], "input": [21, 233], "predic": [21, 41, 42], "abov": 21, "definit": [21, 23, 83], "implic": 21, "interpret": 21, "other": [21, 23, 36, 84, 126, 195, 264], "is_": 21, "implement": [21, 90, 195, 214, 224, 246, 247, 263, 266], "limit": [21, 27, 28, 89, 129, 219, 221, 281], "combin": [21, 87], "fuzzi": 22, "three": [22, 77], "bool": 22, "custom": [23, 200, 214], "easi": 23, "case": [23, 233], "fulli": 23, "defin": [23, 32], "automat": [23, 213], "eval": 23, "remind": 23, "numer": [23, 25, 31, 32, 34, 69, 87, 92, 106, 119, 146], "evalf": [23, 65, 106, 280], "rewrit": [23, 46, 215, 291], "simplif": [23, 69, 95, 223, 291], "doit": 23, "expand": [23, 213, 215, 291], "differenti": [23, 32, 67, 87, 119, 232, 233, 292], "as_real_imag": 23, "miscellan": [23, 71, 77, 255], "_eval_": 23, "complet": [23, 25, 129], "versin": 23, "divid": 23, "fuse": 23, "multipli": 23, "fma": 23, "addit": [23, 87], "tip": [23, 280, 281, 283, 286, 287], "find": [25, 31, 209, 210], "root": [25, 31, 210], "algebra": [25, 27, 28, 29, 30, 32, 33, 38, 94, 101, 154, 198, 201, 204, 209, 213, 232, 292], "altern": [25, 27, 28, 29, 30, 31, 32, 33, 198], "consid": [25, 27, 28, 29, 30, 31, 32, 33], "guidanc": [25, 27, 28, 29, 30, 31, 32, 33, 34], "solut": [25, 28, 29, 30, 31, 32, 33, 34, 166, 233, 265], "without": [25, 32], "multipl": [25, 32, 87, 198, 209], "With": [25, 28, 29, 30, 31, 32, 33, 34], "factor": [25, 202, 207, 213, 291], "equat": [25, 26, 28, 29, 30, 31, 32, 33, 34, 141, 142, 143, 182, 202, 227, 232, 233, 292], "exact": [25, 34], "real_root": 25, "nroot": 25, "complex": [25, 31, 71, 204], "result": [25, 27, 28, 29, 30, 31, 32, 33, 213], "all_root": 25, "tradeoff": 25, "speed": [25, 29, 30, 33, 34, 119, 143], "all": [25, 27, 28, 29, 31, 32, 33], "perhap": 25, "implicitli": [25, 32], "crootof": 25, "repres": [25, 29, 34, 90, 174, 204, 209], "can": [25, 27, 28, 29, 31, 32, 33, 34], "Be": [25, 27, 28, 29, 30, 31, 32], "No": [25, 28, 29, 30, 32], "close": [25, 29, 32, 33, 34], "form": [25, 29, 32, 33, 34, 95, 102, 143, 236], "report": [25, 27, 28, 29, 30, 31, 32, 33, 34], "bug": [25, 27, 28, 29, 30, 31, 32, 33, 34, 92], "reduc": [27, 213], "One": [27, 31, 32], "inequ": [27, 229, 232, 233], "includ": [27, 32, 34], "extract": [27, 28, 30, 32], "decompos": 27, "reduct": [27, 224], "interest": [27, 285], "per": 27, "That": [27, 28, 29, 31, 33, 34], "return": [27, 32, 233], "period": 27, "which": [27, 29, 33, 106, 214], "cannot": [27, 29, 32, 33], "satisfi": 27, "analyt": [27, 166], "diophantin": [28, 227, 232, 233], "zero": [28, 29, 34, 113, 207, 213, 287], "specifi": [28, 32, 200], "order": [28, 42, 210, 221, 224], "verifi": [28, 269], "programmat": [28, 29], "Into": [29, 31, 33], "put": 29, "restrict": 29, "domain": [29, 202, 204, 205, 210, 213, 233], "explicitli": [29, 32], "infinit": [29, 233], "substitut": [29, 31, 119, 188, 280], "solveset": [29, 233], "necessarili": 29, "interrog": 29, "up": [29, 30, 33, 34, 290], "usual": 30, "must": 30, "squar": [30, 202], "sever": 30, "same": 30, "vector": [30, 55, 139, 188, 190, 192, 195, 196, 197, 198, 207, 259, 260, 262, 263, 264, 266, 267, 268, 269], "element": [30, 143, 204, 209], "real": [31, 204], "ensur": [31, 34, 233], "found": 31, "given": [31, 33], "interv": [31, 200], "increas": 31, "precis": 31, "scipi": [31, 32], "ordinari": [32, 232, 233], "od": [32, 230, 232, 233], "Its": 32, "independ": 32, "initi": 32, "boundari": 32, "bewar": 32, "copi": 32, "past": 32, "pair": 32, "If": 32, "There": 32, "arbitrari": 32, "constant": [32, 161, 184], "hint": [32, 230, 231], "unevalu": 32, "select": 32, "specif": [32, 46], "linear": [33, 87, 101, 119, 125, 143, 144, 184, 213], "nonlinear": 33, "you": 34, "might": 34, "ani": [34, 233], "denomin": 34, "do": [34, 233], "simplifi": [34, 46, 207, 225, 226, 291], "welcom": 35, "": [35, 124, 133, 136, 137, 138, 141, 142, 143, 164, 175, 213, 223, 232, 233, 264, 269, 288], "tutori": [35, 227, 279, 284], "anaconda": 36, "mpmath": 36, "question": 36, "abc": 37, "caveat": [37, 107], "quaternion": 38, "ask": 39, "assum": 40, "queri": 41, "content": [41, 52, 72, 85, 91, 206, 218, 228, 237], "perform": 41, "improv": [41, 129], "common": [42, 96, 119, 188, 213, 214, 215], "calculu": [42, 44, 198, 281], "theori": [42, 45, 105, 270, 275], "refin": 43, "singular": [44, 109], "weight": 44, "categori": 45, "base": [45, 67, 101, 201, 202, 213, 220, 233], "diagram": 45, "draw": 45, "codegen": [46, 247], "tool": [46, 104], "abstract": [46, 110, 114, 116, 139, 149, 166, 196, 205], "syntax": 46, "tree": [46, 204, 214, 286], "ast": [46, 129], "predefin": 46, "node": 46, "c": [46, 214], "cfunction": 46, "cnode": 46, "cxxnode": 46, "fortran": [46, 214], "fnode": 46, "algorithm": [46, 47, 164, 175, 207, 210, 216, 221, 224], "pyutil": 46, "cutil": 46, "futil": 46, "present": [47, 55], "group": [47, 48, 50, 53, 55, 56, 184, 209], "overview": [47, 55, 90], "facil": 47, "construct": [47, 55, 236], "free": [47, 202], "word": [47, 55], "coset": 47, "enumer": [47, 70], "todd": 47, "coxet": 47, "cosett": 47, "compress": 47, "standard": 47, "subgroup": 47, "low": 47, "reidemeist": 47, "schreier": 47, "bibliographi": [47, 55], "galoi": [48, 209], "grai": 49, "constructor": [50, 210, 287], "nilpot": 51, "abelian": 51, "cyclic": 51, "partit": [54, 252], "polycycl": 55, "polycyclicgroup": 55, "collector": 55, "comput": [55, 90, 106, 166, 213, 285], "minim": [55, 209], "uncollect": 55, "subword": 55, "collect": [55, 215, 291], "expon": [55, 213], "depth": [55, 77], "lead": 55, "polyhedron": 58, "prufer": 59, "sequenc": [59, 87, 207, 210, 219, 220], "subset": [60, 68], "canonic": 61, "concret": 64, "hypergeometr": [64, 73, 84, 87, 216, 224], "term": [64, 213, 215, 221], "cach": 65, "singleton": [65, 220, 222], "power": [65, 216, 222, 285, 291], "mul": 65, "mod": 65, "multidimension": 65, "contain": 65, "exprtool": 65, "sort": 65, "cryptographi": 66, "geometri": [67, 77, 201], "discret": [68, 234], "transform": [68, 90, 92, 107, 264], "fast": 68, "fourier": [68, 217], "theoret": 68, "walsh": 68, "hadamard": 68, "m\u00f6biu": 68, "convolut": 68, "cover": 68, "product": [68, 167, 178, 235, 265], "intersect": [68, 77], "accuraci": 69, "error": [69, 73], "handl": [69, 233], "sum": 69, "combinatori": 70, "elementari": [71, 201, 220, 222], "trigonometr": [71, 73, 223, 291], "hyperbol": 71, "integ": [71, 204], "exponenti": [71, 73, 291], "piecewis": 71, "dirac": 73, "delta": 73, "discontinu": 73, "gamma": [73, 116], "beta": 73, "fresnel": 73, "logarithm": [73, 291], "bessel": 73, "airi": 73, "b": 73, "spline": 73, "riemann": 73, "zeta": 73, "ellipt": 73, "mathieu": 73, "orthogon": [73, 210, 266], "jacobi": 73, "gegenbau": 73, "chebyshev": 73, "legendr": 73, "hermit": 73, "laguerr": 73, "spheric": 73, "harmon": [73, 155, 180], "curv": 74, "ellips": 75, "entiti": [76, 77, 200], "avail": 77, "usag": [77, 129, 147, 204, 265], "median": 77, "pappu": 77, "hexagon": 77, "theorem": [77, 90, 269], "futur": [77, 119, 129, 188], "truth": [77, 95], "dimens": [77, 181, 184], "beyond": 77, "visual": [77, 146], "line": 78, "plane": [79, 90], "polygon": [81, 92], "about": [83, 233, 264, 292], "holonom": [83, 84, 85, 87, 88, 134], "convert": [84, 87, 204, 280], "represent": [84, 88, 184, 198, 204], "meijer": [84, 87, 90, 224], "g": [84, 87, 90, 224], "intern": [86, 90, 92, 204, 207, 209, 227], "composit": 87, "seri": [87, 200, 211, 216, 217, 218, 221, 281], "expans": [87, 221, 224, 281], "current": 89, "polar": [90, 151], "argand": 90, "tabl": [90, 95, 224], "lookup": 90, "mellin": 90, "converg": 90, "laplac": 90, "thi": [90, 233], "valid": 90, "formula": [90, 224], "todo": 92, "over": [92, 213, 222], "polytop": 92, "For": 92, "2d": 92, "polyhedra": 92, "session": 93, "lie": [94, 230], "equival": [95, 146], "manipul": [95, 101, 121, 206, 207, 210, 211, 233, 286], "infer": 95, "dens": [97, 204, 205, 207], "block": 98, "immutablematrix": 99, "rotat": 101, "numpi": 101, "normal": [102, 213], "spars": [103, 104, 204, 205, 207], "immutablesparsematrix": 103, "ntheori": 105, "ecm": 105, "q": 105, "sub": 106, "ufuncifi": 106, "aesara": [106, 214], "so": 106, "experiment": 107, "mathrm": [107, 290], "runtim": 107, "beam": [108, 109, 110], "bend": 109, "problem": [109, 209, 265], "continuum": 110, "truss": [110, 111], "control": [112, 113, 114, 115, 200], "pole": 113, "bode": 113, "impuls": 113, "respons": [113, 214], "step": [113, 233], "ramp": 113, "lti": 115, "high": 116, "energi": [116, 144], "hydrogen": 117, "wavefunct": 117, "potenti": [119, 143, 144, 188, 195, 266], "advanc": [119, 188, 213, 286, 287], "featur": [119, 188, 282], "choic": 119, "acceler": [119, 188, 197, 221], "interfac": [119, 188, 200, 234], "bodi": [120, 126, 144, 269], "framework": [123, 140], "kane": [124, 133, 136, 137, 141, 143], "lagrang": [124, 133, 138, 142, 143], "inertia": [126, 144], "load": [126, 144], "mechanics_print": 127, "mprint": 127, "mpprint": 127, "mlatex": 127, "symbolicsystem": [128, 147], "autolev": [129, 146], "dynam": 129, "onlin": 129, "switch": 129, "bicycl": 131, "four": 132, "bar": 132, "linkag": 132, "nonminim": 133, "pendulum": 133, "multi": 134, "degre": 134, "freedom": 134, "roll": [135, 136, 137, 138], "disc": [135, 136, 137, 138], "constraint": 137, "forc": 137, "classic": [139, 207], "jointsmethod": 140, "structur": [141, 142, 184, 227], "background": 143, "directli": [143, 264], "new_method": 143, "kwarg": 143, "a_and_b": 143, "true": 143, "ha": 143, "nan": 143, "zoo": 143, "oo": 143, "further": [143, 283], "mass": [144, 269], "particl": [144, 170], "rigid": 144, "dyadic": [144, 188, 263, 264], "momentum": 144, "angular": [144, 197], "momenta": 144, "kinet": 144, "lagrangian": 144, "user": [146, 227, 230, 231], "rough": 146, "link": 146, "gaussian": [148, 204, 205, 213], "optic": [148, 149], "medium": 150, "wave": 153, "pauli": 154, "quantum": [155, 166, 180], "oscil": [155, 180], "d": [155, 180], "anticommut": 156, "cartesian": 157, "state": [157, 166, 169, 177], "clebsch": 158, "gordan": 158, "coeffici": [158, 207], "circuit": 159, "commut": [160, 201], "dagger": 162, "gate": 163, "grover": 164, "hilbert": 165, "space": [165, 184, 224], "inner": 167, "helper": [169, 214], "box": 170, "qappli": 171, "qft": 172, "qubit": 173, "shor": 175, "spin": 176, "second": 179, "quantiz": 179, "more": [182, 183, 221, 264, 285], "dimension": 182, "analysi": 182, "quantiti": [182, 184, 186, 264], "unit": [183, 184, 185, 187], "philosophi": 184, "behind": 184, "need": 184, "literatur": [184, 208, 213], "prefix": 185, "convers": 186, "referencefram": [188, 198], "dynamicsymbol": 188, "essenti": [189, 191, 259, 262], "field": [190, 195, 204, 207, 209, 213, 266, 268], "kinemat": [193, 197], "kinematic_equ": 193, "scalar": [195, 266, 268], "curl": [195, 266], "diverg": [195, 266, 269], "gradient": [195, 266], "conserv": [195, 266], "solenoid": [195, 266], "veloc": 197, "basi": [198, 207, 209], "wigner": 199, "credit": 199, "copyright": 199, "plotgrid": 200, "pyglet": 200, "mode": 200, "color": 200, "geometr": 200, "ascii": [200, 290], "art": 200, "agca": 201, "ring": [201, 204, 205], "ideal": 201, "homomorph": [201, 209], "syzygi": 201, "extens": [201, 213], "concept": 202, "divis": 202, "factori": 202, "euclidean": 202, "gcd": [202, 207, 213], "lcm": 202, "groebner": [202, 207], "introduc": [203, 204], "domainmatrix": 203, "dup": 204, "dmp": 204, "polyr": 204, "polynomialr": 204, "choos": 204, "unifi": 204, "gf": 205, "p": [205, 209], "zz": 205, "qq": 205, "mpq": 205, "zz_i": 205, "qq_i": 205, "rr": 205, "cc": 205, "k": 205, "x": 205, "ex": 205, "quotient": 205, "level": 207, "multivari": [207, 213], "univari": [207, 213], "remaind": 207, "subresult": 207, "modular": 207, "undocu": 207, "main": 209, "prime": 209, "decomposit": [209, 210, 213], "adic": 209, "valuat": 209, "subfield": 209, "As": 209, "arithmet": 209, "extra": 210, "monomi": 210, "encod": 210, "formal": [210, 216], "appel": 210, "partial": [210, 213, 232, 233], "fraction": [210, 213, 291], "dispers": 210, "rs_seri": 211, "wester": 213, "articl": 213, "simpl": 213, "support": 213, "back": 213, "cyclotom": 213, "gr\u00f6bner": 213, "mistak": 214, "prettyprint": 214, "rcodeprint": 214, "smt": 214, "lib": 214, "mapl": 214, "javascript": 214, "julia": 214, "octav": 214, "matlab": 214, "rust": 214, "gtk": 214, "lambdaprint": 214, "latexprint": 214, "mathmlprint": 214, "pythoncodeprint": 214, "pythonprint": 214, "srepr": [214, 290], "strprinter": 214, "preview": 214, "codeprint": 214, "preced": 214, "dotprint": 214, "subexpress": 215, "detect": 215, "compound": [220, 222, 234], "recurs": [220, 286], "gruntz": 221, "intuit": 221, "residu": 221, "setkind": 222, "hongguang": 223, "fu": 223, "rule": [223, 265], "notat": 224, "increment": 224, "decrement": 224, "indic": 224, "around": 224, "loos": 224, "end": 224, "confluenc": 224, "extend": 224, "heurist": 230, "riccati": 230, "inform": [230, 231], "pde": [231, 232, 233], "deutil": 232, "recurr": 232, "de": [232, 233], "wrong": 233, "why": [233, 285], "we": 233, "emploi": 233, "search": 233, "deal": 233, "where": 233, "known": 233, "plan": 233, "transolv": 233, "continu": [234, 291], "stochast": 234, "dim": [235, 236], "contract": 235, "diagon": [235, 287], "explicit": 236, "pytest": 243, "randomis": 244, "detail": [246, 247, 263], "routin": 247, "decor": 248, "enum": 249, "variat": 252, "memoiz": 254, "pkgdata": 256, "inspect": 257, "time": 258, "orient": [261, 264], "locat": 264, "coordsys3d": 264, "orient_new": 264, "AND": 264, "quadrilater": 265, "third": 265, "del": [265, 266], "curvilinear": 266, "applic": 269, "calcul": 269, "perimet": 269, "surfac": 269, "area": 269, "volum": 269, "flux": 269, "stoke": 269, "introductori": [279, 284], "quick": [280, 281, 283, 286, 287], "two": 283, "final": 283, "understand": 286, "through": 286, "invari": 286, "walk": 286, "prevent": 286, "shape": 287, "access": 287, "row": 287, "column": 287, "insert": 287, "determin": 287, "rref": 287, "nullspac": 287, "columnspac": 287, "eigenvalu": 287, "eigenvector": 287, "next": 288, "preliminari": 289, "exercis": 289, "str": 290, "mathml": 290, "dot": 290, "cancel": 291, "apart": 291, "trigsimp": 291, "expand_trig": 291, "powsimp": 291, "expand_power_exp": 291, "expand_power_bas": 291, "powdenest": 291, "expand_log": 291, "logcombin": 291, "expand_func": 291, "hyperexpand": 291, "combsimp": 291, "gammasimp": 291}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"Citing SymPy": [[0, "citing-sympy"]], "Debugging": [[1, "debugging"]], "Dependencies": [[2, "dependencies"]], "Hard Dependencies": [[2, "hard-dependencies"]], "Optional Dependencies": [[2, "optional-dependencies"]], "Recommended Optional Dependencies": [[2, "recommended-optional-dependencies"]], "Interactive Use": [[2, "interactive-use"]], "Printing": [[2, "printing"], [23, "printing"], [93, "module-sympy.interactive.printing"], [119, "printing"], [188, "printing"], [214, "printing"], [290, "printing"]], "Parsing": [[2, "parsing"], [107, "module-sympy.parsing"]], "Logic": [[2, "logic"], [95, "module-sympy.logic"], [270, "logic"], [273, "logic"]], "Plotting": [[2, "plotting"], [200, "module-sympy.plotting.plot"]], "lambdify": [[2, "lambdify"], [280, "lambdify"]], "Code Generation": [[2, "code-generation"], [46, "code-generation"], [270, "code-generation"], [272, "code-generation"]], "Autowrap": [[2, "autowrap"], [46, "autowrap"]], "Code Printers": [[2, "code-printers"]], "Testing-Only Dependencies": [[2, "testing-only-dependencies"]], "Statistics": [[2, "statistics"]], "Optional SymEngine Backend": [[2, "optional-symengine-backend"]], "Sage": [[2, "sage"]], "Development Dependencies": [[2, "development-dependencies"]], "Getting the Source Code": [[2, "getting-the-source-code"]], "Running the Tests": [[2, "running-the-tests"]], "Building the Documentation": [[2, "building-the-documentation"], [8, "building-the-documentation"]], "Running the Benchmarks": [[2, "running-the-benchmarks"]], "Deprecation Policy": [[3, "deprecation-policy"]], "What is a deprecation?": [[3, "what-is-a-deprecation"]], "Try to avoid backwards incompatible changes in the first place": [[3, "try-to-avoid-backwards-incompatible-changes-in-the-first-place"]], "When does a change require deprecation?": [[3, "when-does-a-change-require-deprecation"]], "Public API": [[3, null]], "Not Public API": [[3, null]], "The purpose of deprecation": [[3, "the-purpose-of-deprecation"]], "When it is not technically possible to deprecate": [[3, "when-it-is-not-technically-possible-to-deprecate"]], "How long should deprecations last?": [[3, "how-long-should-deprecations-last"]], "How to deprecate code": [[3, "how-to-deprecate-code"]], "Checklist": [[3, "checklist"]], "Adding the deprecation to the code": [[3, "adding-the-deprecation-to-the-code"]], "Documenting a deprecation": [[3, "documenting-a-deprecation"]], "Release notes entry": [[3, "release-notes-entry"]], "SymPy Docstrings Style Guide": [[4, "sympy-docstrings-style-guide"]], "General Guidelines": [[4, "general-guidelines"], [5, "general-guidelines"]], "Formatting": [[4, "formatting"]], "Sections": [[4, "sections"]], "1. Single-Sentence Summary": [[4, "single-sentence-summary"]], "2. Explanation Section": [[4, "explanation-section"]], "3. Examples Section": [[4, "examples-section"]], "4. Parameters Section": [[4, "parameters-section"]], "5. See Also Section": [[4, "see-also-section"]], "6. References Section": [[4, "references-section"]], "Sample Docstring": [[4, "sample-docstring"]], "Docstrings for Classes that are Mathematical Functions": [[4, "docstrings-for-classes-that-are-mathematical-functions"]], "Best Practices for Writing Docstrings": [[4, "best-practices-for-writing-docstrings"]], "Importing Docstrings into the Sphinx Documentation": [[4, "importing-docstrings-into-the-sphinx-documentation"]], "Cross-Referencing": [[4, "cross-referencing"]], "Docstring Style Guide": [[5, "docstring-style-guide"]], "Types of Documentation": [[5, "types-of-documentation"]], "Narrative Documentation Guidelines": [[5, "narrative-documentation-guidelines"]], "Documentation using Markdown": [[5, "documentation-using-markdown"]], "Best Practices for Writing Documentation": [[5, "best-practices-for-writing-documentation"]], "Formatting Preferences": [[5, "formatting-preferences"]], "Math": [[5, "math"]], "LaTeX Recommendations": [[5, "latex-recommendations"]], "Code": [[5, "code"]], "Headings": [[5, "headings"]], "Style Preferences": [[5, "style-preferences"]], "Spelling and Punctuation": [[5, "spelling-and-punctuation"]], "Capitalization": [[5, "capitalization"]], "Tone Preferences": [[5, "tone-preferences"]], "Contributing": [[6, "contributing"], [35, "contributing"]], "Introduction to Contributing": [[7, "introduction-to-contributing"]], "Get familiar using the software": [[7, "get-familiar-using-the-software"]], "Read the paper": [[7, "read-the-paper"]], "Peruse the documentation": [[7, "peruse-the-documentation"]], "Review the Code of Conduct": [[7, "review-the-code-of-conduct"]], "Join our mailing list": [[7, "join-our-mailing-list"]], "Setup your development environment": [[7, "setup-your-development-environment"]], "Identify something to work on": [[7, "identify-something-to-work-on"]], "SymPy Codebase": [[7, "sympy-codebase"]], "Documentation": [[7, "documentation"], [11, "documentation"]], "Review pull requests": [[7, "review-pull-requests"]], "Required dependencies": [[8, "required-dependencies"]], "Docker": [[8, "docker"], [8, "id2"], [8, "id3"]], "Debian/Ubuntu": [[8, "debian-ubuntu"]], "Fedora": [[8, "fedora"]], "Mac": [[8, "mac"]], "Windows 10": [[8, "windows-10"]], "Build the Docs": [[8, "build-the-docs"]], "Local Installation": [[8, "local-installation"], [8, "id4"]], "SymPy Logos": [[8, "sympy-logos"]], "View the Docs": [[8, "view-the-docs"]], "Auto-Rebuild with the Live Server": [[8, "auto-rebuild-with-the-live-server"]], "PDF Documentation": [[8, "pdf-documentation"]], "Setup Development Environment": [[9, "setup-development-environment"]], "Install Git": [[9, "install-git"]], "Configure Your Name and Email in Git": [[9, "configure-your-name-and-email-in-git"]], "(Optional) Configure Git Settings": [[9, "optional-configure-git-settings"]], "Setup GitHub": [[9, "setup-github"]], "Create a GitHub Account": [[9, "create-a-github-account"]], "Setup SSH Keys": [[9, "setup-ssh-keys"]], "Fork SymPy": [[9, "fork-sympy"]], "Get the SymPy Code": [[9, "get-the-sympy-code"]], "Virtual Environment Setup": [[9, "virtual-environment-setup"]], "Guide for New Contributors": [[10, "guide-for-new-contributors"]], "Index": [[10, "index"]], "Development Workflow Process": [[11, "development-workflow-process"]], "Checklist for Contributions": [[11, "checklist-for-contributions"]], "Pick an issue to fix": [[11, "pick-an-issue-to-fix"]], "Create a new branch": [[11, "create-a-new-branch"]], "Branch names": [[11, "branch-names"]], "Modify code": [[11, "modify-code"]], "Code Quality": [[11, "code-quality"]], "Add Tests": [[11, "add-tests"]], "Run the Tests": [[11, "run-the-tests"]], "Commit the changes": [[11, "commit-the-changes"]], "Deleting junk files": [[11, "deleting-junk-files"]], "Writing commit messages": [[11, "writing-commit-messages"]], "Example of a good commit message": [[11, "example-of-a-good-commit-message"]], "Co-Author": [[11, "co-author"]], "Make a Pull Request": [[11, "make-a-pull-request"]], "Writing pull request title and description": [[11, "writing-pull-request-title-and-description"]], "Add your name and email address to the .mailmap file.": [[11, "add-your-name-and-email-address-to-the-mailmap-file"]], "Writing Tests": [[12, "writing-tests"]], "Testing Policies": [[12, "testing-policies"]], "Basics for Writing Tests": [[12, "basics-for-writing-tests"]], "Running Tests": [[12, "running-tests"]], "Debugging Test Failures on GitHub Actions": [[12, "debugging-test-failures-on-github-actions"]], "Regression Tests": [[12, "regression-tests"]], "Special Types of Tests": [[12, "special-types-of-tests"]], "Testing Exceptions": [[12, "testing-exceptions"]], "Testing Warnings": [[12, "testing-warnings"]], "Test Deprecated Functionality": [[12, "test-deprecated-functionality"]], "Testing that Something is Unchanged": [[12, "testing-that-something-is-unchanged"]], "Testing Expressions with Dummy": [[12, "testing-expressions-with-dummy"]], "Consistency Checks": [[12, "consistency-checks"]], "Random Tests": [[12, "random-tests"]], "Skipping Tests": [[12, "skipping-tests"]], "Marking Tests as Expected to Fail": [[12, "marking-tests-as-expected-to-fail"]], "Marking Tests as Slow": [[12, "marking-tests-as-slow"]], "Writing Tests with External Dependencies": [[12, "writing-tests-with-external-dependencies"]], "Doctests": [[12, "doctests"]], "Updating Existing Tests": [[12, "updating-existing-tests"]], "Code Quality Checks": [[12, "code-quality-checks"]], "Tests Style Guide": [[12, "tests-style-guide"]], "Test Coverage": [[12, "test-coverage"]], "List of active deprecations": [[13, "list-of-active-deprecations"]], "Silencing SymPy Deprecation Warnings": [[13, "silencing-sympy-deprecation-warnings"]], "Version 1.13": [[13, "version-1-13"]], "Moved mechanics functions": [[13, "moved-mechanics-functions"]], "Version 1.12": [[13, "version-1-12"]], "The ManagedProperties metaclass": [[13, "the-managedproperties-metaclass"]], "New Joint coordinate format": [[13, "new-joint-coordinate-format"]], "New Joint intermediate frames": [[13, "new-joint-intermediate-frames"]], "Change in joint attachment point argument": [[13, "change-in-joint-attachment-point-argument"]], "Version 1.11": [[13, "version-1-11"]], "Modules sympy.tensor.array.expressions.conv_* renamed to sympy.tensor.array.expressions.from_*": [[13, "modules-sympy-tensor-array-expressions-conv-renamed-to-sympy-tensor-array-expressions-from"]], "New Mathematica code parser": [[13, "new-mathematica-code-parser"]], "Redundant static methods in carmichael": [[13, "redundant-static-methods-in-carmichael"]], "The check argument to HadamardProduct, MatAdd and MatMul": [[13, "the-check-argument-to-hadamardproduct-matadd-and-matmul"]], "Version 1.10": [[13, "version-1-10"]], "Some traversal functions have been moved": [[13, "some-traversal-functions-have-been-moved"]], "sympy.core.trace": [[13, "sympy-core-trace"]], "The sympy.core.compatibility submodule": [[13, "the-sympy-core-compatibility-submodule"]], "Version 1.9": [[13, "version-1-9"]], "expr_free_symbols": [[13, "expr-free-symbols"]], "sympy.stats.sample(numsamples=n)": [[13, "sympy-stats-sample-numsamples-n"]], "sympy.polys.solvers.RawMatrix": [[13, "sympy-polys-solvers-rawmatrix"]], "Non-Expr objects in a Matrix": [[13, "non-expr-objects-in-a-matrix"]], "The get_segments attribute of plotting objects": [[13, "the-get-segments-attribute-of-plotting-objects"]], "The mdft function in sympy.physics.matrices": [[13, "the-mdft-function-in-sympy-physics-matrices"]], "The private SparseMatrix._smat and DenseMatrix._mat attributes": [[13, "the-private-sparsematrix-smat-and-densematrix-mat-attributes"]], "laplace_transform of a Matrix with noconds=False": [[13, "laplace-transform-of-a-matrix-with-noconds-false"]], "Version 1.8": [[13, "version-1-8"]], "sympy.printing.theanocode": [[13, "sympy-printing-theanocode"]], "sympy.assumptions.handlers.AskHandler and related methods": [[13, "sympy-assumptions-handlers-askhandler-and-related-methods"]], "Version 1.7.1": [[13, "version-1-7-1"]], "Calling sympy.stats.StochasticProcess.distribution with RandomIndexedSymbol": [[13, "calling-sympy-stats-stochasticprocess-distribution-with-randomindexedsymbol"]], "Version 1.7": [[13, "version-1-7"]], "sympy.stats.DiscreteMarkovChain.absorbing_probabilites()": [[13, "sympy-stats-discretemarkovchain-absorbing-probabilites"]], "sympy.utilities.misc.find_executable()": [[13, "sympy-utilities-misc-find-executable"]], "Mutable attributes in sympy.diffgeom": [[13, "mutable-attributes-in-sympy-diffgeom"]], "The unicode argument and attribute to sympy.printing.pretty.stringpict.prettyForm and the sympy.printing.pretty.pretty_symbology.xstr function": [[13, "the-unicode-argument-and-attribute-to-sympy-printing-pretty-stringpict-prettyform-and-the-sympy-printing-pretty-pretty-symbology-xstr-function"]], "Passing the arguments to lambdify as a set": [[13, "passing-the-arguments-to-lambdify-as-a-set"]], "Core operators no longer accept non-Expr args": [[13, "core-operators-no-longer-accept-non-expr-args"]], "Version 1.6": [[13, "version-1-6"]], "Various sympy.utilities submodules have moved": [[13, "various-sympy-utilities-submodules-have-moved"]], "sympy.testing.randtest": [[13, "sympy-testing-randtest"]], "Mixing Poly and non-polynomial expressions in binary operations": [[13, "mixing-poly-and-non-polynomial-expressions-in-binary-operations"]], "The print_cyclic flag of sympy.combinatorics.Permutation": [[13, "the-print-cyclic-flag-of-sympy-combinatorics-permutation"]], "Using integrate with Poly": [[13, "using-integrate-with-poly"]], "The string fallback in sympify()": [[13, "the-string-fallback-in-sympify"]], "Creating an indefinite Integral with an Eq argument": [[13, "creating-an-indefinite-integral-with-an-eq-argument"]], "Version 1.5": [[13, "version-1-5"]], "Tensor.fun_eval and Tensor.__call__": [[13, "tensor-fun-eval-and-tensor-call"]], "TensorType": [[13, "tensortype"]], "The dummy_fmt argument to TensorIndexType": [[13, "the-dummy-fmt-argument-to-tensorindextype"]], "The metric argument to TensorIndexType": [[13, "the-metric-argument-to-tensorindextype"]], "The get_kronecker_delta() and get_epsilon() methods of TensorIndexType": [[13, "the-get-kronecker-delta-and-get-epsilon-methods-of-tensorindextype"]], "The tensorsymmetry() function": [[13, "the-tensorsymmetry-function"]], "The tensorhead() function": [[13, "the-tensorhead-function"]], "The is_EmptySet attribute of sets": [[13, "the-is-emptyset-attribute-of-sets"]], "ProductSet(iterable)": [[13, "productset-iterable"]], "The set_potential_energy method in sympy.physics.mechanics": [[13, "the-set-potential-energy-method-in-sympy-physics-mechanics"]], "Using a set for the condition in ConditionSet": [[13, "using-a-set-for-the-condition-in-conditionset"]], "The max_degree and get_upper_degree properties of sympy.polys.multivariate_resultants.DixonResultant": [[13, "the-max-degree-and-get-upper-degree-properties-of-sympy-polys-multivariate-resultants-dixonresultant"]], "Non-tuple iterable for the first argument to Lambda": [[13, "non-tuple-iterable-for-the-first-argument-to-lambda"]], "The evaluate flag to differentiate_finite": [[13, "the-evaluate-flag-to-differentiate-finite"]], "Version 1.4": [[13, "version-1-4"]], "TensorIndexType.data and related methods": [[13, "tensorindextype-data-and-related-methods"]], "Glossary": [[14, "glossary"]], "Gotchas and Pitfalls": [[15, "gotchas-and-pitfalls"]], "Introduction": [[15, "introduction"], [19, "introduction"], [38, "introduction"], [45, "introduction"], [46, "introduction"], [47, "introduction"], [55, "introduction"], [67, "introduction"], [77, "introduction"], [95, "introduction"], [129, "introduction"], [146, "introduction"], [184, "introduction"], [195, "introduction"], [200, "introduction"], [201, "introduction"], [202, "introduction"], [209, "introduction"], [213, "introduction"], [268, "introduction"], [285, "introduction"]], "Equals Signs (=)": [[15, "equals-signs"]], "Single Equals Sign": [[15, "single-equals-sign"]], "Double Equals Signs": [[15, "double-equals-signs"]], "Variables": [[15, "variables"]], "Variables Assignment does not Create a Relation Between Expressions": [[15, "variables-assignment-does-not-create-a-relation-between-expressions"]], "Symbols": [[15, "symbols"], [283, "symbols"]], "Functions": [[15, "functions"], [72, "functions"], [235, "functions"]], "Symbolic Expressions": [[15, "symbolic-expressions"]], "Python numbers vs. SymPy Numbers": [[15, "python-numbers-vs-sympy-numbers"]], "Evaluating Expressions with Floats and Rationals": [[15, "evaluating-expressions-with-floats-and-rationals"]], "Immutability of Expressions": [[15, "immutability-of-expressions"]], "Mathematical Operators": [[15, "mathematical-operators"]], "Inverse Trig Functions": [[15, "inverse-trig-functions"]], "Sqrt is not a Function": [[15, "sqrt-is-not-a-function"]], "Special Symbols": [[15, "special-symbols"]], "Lists": [[15, "lists"]], "Dictionaries": [[15, "dictionaries"]], "Tuples": [[15, "tuples"]], "Keyword Arguments": [[15, "keyword-arguments"]], "Getting help from within SymPy": [[15, "getting-help-from-within-sympy"]], "help()": [[15, "help"]], "Explanations": [[16, "explanations"], [35, "explanations"]], "Solve Output by Type": [[17, "solve-output-by-type"]], "Empty List": [[17, "empty-list"]], "List Of Values": [[17, "list-of-values"]], "Single Dictionary": [[17, "single-dictionary"]], "List of Tuples": [[17, "list-of-tuples"]], "List of Dictionaries": [[17, "list-of-dictionaries"]], "Boolean or Relational": [[17, "boolean-or-relational"]], "Classification of SymPy objects": [[18, "classification-of-sympy-objects"]], "class": [[18, "class"]], "kind": [[18, "kind"], [65, "module-sympy.core.kind"]], "sets and assumptions": [[18, "sets-and-assumptions"]], "func": [[18, "func"], [286, "func"]], "Finite Difference Approximations to Derivatives": [[19, "finite-difference-approximations-to-derivatives"]], "A Direct Method Using SymPy Matrices": [[19, "a-direct-method-using-sympy-matrices"]], "SymPy Special Topics": [[20, "sympy-special-topics"]], "Assumptions": [[21, "assumptions"], [23, "assumptions"], [41, "module-sympy.assumptions"]], "The (old) assumptions system": [[21, "the-old-assumptions-system"]], "Gotcha: symbols with different assumptions": [[21, "gotcha-symbols-with-different-assumptions"]], "Applying assumptions to string inputs": [[21, "applying-assumptions-to-string-inputs"]], "Predicates": [[21, "predicates"], [42, "id1"]], "Assumptions predicates for the (old) assumptions": [[21, "id28"]], "References for the above definitions": [[21, "references-for-the-above-definitions"]], "Implications": [[21, "implications"]], "Interpretation of the predicates": [[21, "interpretation-of-the-predicates"]], "Other is_* properties": [[21, "other-is-properties"]], "Implementing assumptions handlers": [[21, "implementing-assumptions-handlers"]], "Mechanism of the assumptions system": [[21, "mechanism-of-the-assumptions-system"]], "Limitations": [[21, "limitations"], [28, "limitations"], [89, "limitations"]], "Combining predicates with or": [[21, "combining-predicates-with-or"]], "Relations between different symbols": [[21, "relations-between-different-symbols"]], "Symbolic and fuzzy booleans": [[22, "symbolic-and-fuzzy-booleans"]], "Symbolic Boolean vs three valued bool": [[22, "symbolic-boolean-vs-three-valued-bool"]], "Three-valued logic with fuzzy bools": [[22, "three-valued-logic-with-fuzzy-bools"]], "Three-valued logic with symbolic Booleans": [[22, "three-valued-logic-with-symbolic-booleans"]], "Writing Custom Functions": [[23, "writing-custom-functions"]], "Easy Cases: Fully Symbolic or Fully Evaluated": [[23, "easy-cases-fully-symbolic-or-fully-evaluated"]], "The Fully Symbolic Case": [[23, "the-fully-symbolic-case"]], "The Fully Evaluated Case": [[23, "the-fully-evaluated-case"]], "Creating a Custom Function": [[23, "creating-a-custom-function"]], "Defining Automatic Evaluation with eval()": [[23, "defining-automatic-evaluation-with-eval"]], "Reminder": [[23, null]], "Best Practices for eval()": [[23, "best-practices-for-eval"]], "Key Point": [[23, null]], "Note": [[23, null]], "Numerical Evaluation with evalf()": [[23, "numerical-evaluation-with-evalf"]], "Rewriting and Simplification": [[23, "rewriting-and-simplification"]], "rewrite()": [[23, "rewrite"]], "doit()": [[23, "doit"]], "expand()": [[23, "expand"]], "Differentiation": [[23, "differentiation"]], "Other Methods": [[23, "other-methods"], [36, "other-methods"]], "inverse()": [[23, "inverse"]], "as_real_imag()": [[23, "as-real-imag"]], "Miscellaneous _eval_* methods": [[23, "miscellaneous-eval-methods"]], "Complete Examples": [[23, "complete-examples"]], "Versine": [[23, "versine"]], "Definition": [[23, "definition"], [23, "id2"], [23, "id4"], [83, "definition"]], "Examples": [[23, "examples"], [23, "id3"], [23, "id5"], [27, "examples"], [37, "examples"], [65, "examples"], [65, "id48"], [89, "examples"], [92, "examples"], [92, "id38"], [105, "examples"], [105, "id61"], [109, "examples"], [116, "examples"], [151, "examples"], [183, "examples"], [198, "examples"], [198, "id1"], [213, "examples"], [221, "examples"], [221, "id3"], [234, "examples"], [235, "examples"], [236, "examples"], [239, "examples"]], "divides": [[23, "divides"]], "Fused Multiply-Add (FMA)": [[23, "fused-multiply-add-fma"]], "Additional Tips": [[23, "additional-tips"]], "How-to Guides": [[24, "how-to-guides"], [35, "how-to-guides"]], "Find the Roots of a Polynomial Algebraically or Numerically": [[25, "find-the-roots-of-a-polynomial-algebraically-or-numerically"]], "Alternatives to Consider": [[25, "alternatives-to-consider"], [27, "alternatives-to-consider"], [28, "alternatives-to-consider"], [30, "alternatives-to-consider"], [31, "alternatives-to-consider"], [32, "alternatives-to-consider"], [33, "alternatives-to-consider"]], "Example of Finding the Roots of a Polynomial Algebraically": [[25, "example-of-finding-the-roots-of-a-polynomial-algebraically"]], "Functions to Find the Roots of a Polynomial": [[25, "functions-to-find-the-roots-of-a-polynomial"]], "Guidance": [[25, "guidance"], [27, "guidance"], [28, "guidance"], [29, "guidance"], [30, "guidance"], [31, "guidance"], [32, "guidance"], [33, "guidance"]], "Find the Roots of a Polynomial": [[25, "find-the-roots-of-a-polynomial"]], "Algebraic Solution Without Root Multiplicities": [[25, "algebraic-solution-without-root-multiplicities"]], "Algebraic Solution With Root Multiplicities": [[25, "algebraic-solution-with-root-multiplicities"]], "roots": [[25, "roots"]], "Factor the Equation": [[25, "factor-the-equation"]], "Exact Numeric Solution With Root Multiplicities": [[25, "exact-numeric-solution-with-root-multiplicities"]], "real_roots": [[25, "real-roots"]], "Approximate Numeric Solution With Root Multiplicities": [[25, "approximate-numeric-solution-with-root-multiplicities"]], "nroots": [[25, "nroots"]], "Complex Roots": [[25, "complex-roots"]], "Use the Solution Result": [[25, "use-the-solution-result"], [28, "use-the-solution-result"], [29, "use-the-solution-result"], [30, "use-the-solution-result"], [31, "use-the-solution-result"], [32, "use-the-solution-result"]], "List (all_roots, real_roots, nroots)": [[25, "list-all-roots-real-roots-nroots"]], "List of dictionaries (solve)": [[25, "list-of-dictionaries-solve"]], "Dictionary (roots)": [[25, "dictionary-roots"]], "Expression (factor)": [[25, "expression-factor"]], "Tradeoffs": [[25, "tradeoffs"]], "Mathematical Exactness, Completeness of List of Roots, and Speed": [[25, "mathematical-exactness-completeness-of-list-of-roots-and-speed"]], "Get All Roots, Perhaps Implicitly": [[25, "get-all-roots-perhaps-implicitly"]], "Numerically Evaluate CRootOf Roots": [[25, "numerically-evaluate-crootof-roots"]], "Representing Roots": [[25, "representing-roots"]], "Not All Equations Can Be Solved": [[25, "not-all-equations-can-be-solved"], [28, "not-all-equations-can-be-solved"], [29, "not-all-equations-can-be-solved"], [32, "not-all-equations-can-be-solved"]], "Equations With No Closed-Form Solution": [[25, "equations-with-no-closed-form-solution"], [29, "equations-with-no-closed-form-solution"], [32, "equations-with-no-closed-form-solution"]], "Report a Bug": [[25, "report-a-bug"], [27, "report-a-bug"], [28, "report-a-bug"], [29, "report-a-bug"], [30, "report-a-bug"], [31, "report-a-bug"], [32, "report-a-bug"], [33, "report-a-bug"], [34, "report-a-bug"]], "Solve Equations": [[26, "solve-equations"]], "Reduce One or a System of Inequalities for a Single Variable Algebraically": [[27, "reduce-one-or-a-system-of-inequalities-for-a-single-variable-algebraically"]], "Reducing a System of Inequalities for a Single Variable Algebraically": [[27, "reducing-a-system-of-inequalities-for-a-single-variable-algebraically"]], "Reducing One Inequality for a Single Variable Algebraically": [[27, "reducing-one-inequality-for-a-single-variable-algebraically"]], "Include the Variable to Be Reduced for in the Function Call": [[27, "include-the-variable-to-be-reduced-for-in-the-function-call"]], "Reduce a System of Inequalities Algebraically": [[27, "reduce-a-system-of-inequalities-algebraically"]], "Use the Result": [[27, "use-the-result"]], "Extract a List of Decomposed Relations": [[27, "extract-a-list-of-decomposed-relations"]], "Extract a Tuple of Relations": [[27, "extract-a-tuple-of-relations"]], "Limitations of Inequality Reduction Using SymPy": [[27, "limitations-of-inequality-reduction-using-sympy"]], "SymPy Can Reduce for Only One Symbol of Interest Per Inequality": [[27, "sympy-can-reduce-for-only-one-symbol-of-interest-per-inequality"]], "Limitations on Types of Inequalities That SymPy Can Solve": [[27, "limitations-on-types-of-inequalities-that-sympy-can-solve"]], "Not All Results Are Returned for Periodic Functions": [[27, "not-all-results-are-returned-for-periodic-functions"]], "Not All Systems of Inequalities Can Be Reduced": [[27, "not-all-systems-of-inequalities-can-be-reduced"]], "Systems of Inequalities Which Cannot Be Satisfied": [[27, "systems-of-inequalities-which-cannot-be-satisfied"]], "Systems of Inequalities That Cannot Be Reduced Analytically": [[27, "systems-of-inequalities-that-cannot-be-reduced-analytically"]], "Inequalities Which Can Be Reduced Analytically, and SymPy Cannot Reduce": [[27, "inequalities-which-can-be-reduced-analytically-and-sympy-cannot-reduce"]], "Solve a Diophantine Equation Algebraically": [[28, "solve-a-diophantine-equation-algebraically"]], "Example of Solving a Diophantine Equation": [[28, "example-of-solving-a-diophantine-equation"]], "Diophantine Equation Can be Expressed as Expression That Equals Zero": [[28, "diophantine-equation-can-be-expressed-as-expression-that-equals-zero"]], "Specify the Order of Symbols in the Result": [[28, "specify-the-order-of-symbols-in-the-result"]], "Extract Expressions From the Result": [[28, "extract-expressions-from-the-result"]], "Work With Parameters": [[28, "work-with-parameters"]], "Verify a Solution": [[28, "verify-a-solution"]], "Programmatically Extract Parameter Symbols": [[28, "programmatically-extract-parameter-symbols"]], "Equations With No Solution": [[28, "equations-with-no-solution"], [30, "equations-with-no-solution"], [32, "equations-with-no-solution"]], "Solve an Equation Algebraically": [[29, "solve-an-equation-algebraically"], [29, "id1"]], "Alternatives to consider": [[29, "alternatives-to-consider"]], "Solving Functions": [[29, "solving-functions"]], "Make Your Equation Into an Expression That Equals Zero": [[29, "make-your-equation-into-an-expression-that-equals-zero"]], "Put Your Equation Into Eq Form": [[29, "put-your-equation-into-eq-form"]], "Restrict the Domain of Solutions": [[29, "restrict-the-domain-of-solutions"]], "Explicitly Represent Infinite Sets of Possible Solutions": [[29, "explicitly-represent-infinite-sets-of-possible-solutions"]], "Substitute Solutions From solve() Into an Expression": [[29, "substitute-solutions-from-solve-into-an-expression"]], "solveset() Solution Sets Cannot Necessarily Be Interrogated Programmatically": [[29, "solveset-solution-sets-cannot-necessarily-be-interrogated-programmatically"]], "Options That Can Speed up solve()": [[29, "options-that-can-speed-up-solve"], [33, "options-that-can-speed-up-solve"], [34, "options-that-can-speed-up-solve"]], "Equations Which Have a Closed-Form Solution, and SymPy Cannot Solve": [[29, "equations-which-have-a-closed-form-solution-and-sympy-cannot-solve"], [33, "equations-which-have-a-closed-form-solution-and-sympy-cannot-solve"]], "Solve a Matrix Equation Algebraically": [[30, "solve-a-matrix-equation-algebraically"]], "Solve a Matrix Equation": [[30, "solve-a-matrix-equation"]], "Matrix Usually Must Be Square": [[30, "matrix-usually-must-be-square"]], "Methods for Solving Matrix Equations": [[30, "methods-for-solving-matrix-equations"]], "Solving Several Matrix Equations With the Same Matrix": [[30, "solving-several-matrix-equations-with-the-same-matrix"]], "Work With Symbolic Matrices": [[30, "work-with-symbolic-matrices"]], "Speed up Solving Matrix Equations": [[30, "speed-up-solving-matrix-equations"]], "Use the Solution as a Vector": [[30, "use-the-solution-as-a-vector"]], "Extract Elements From the Solution": [[30, "extract-elements-from-the-solution"]], "Solve One or a System of Equations Numerically": [[31, "solve-one-or-a-system-of-equations-numerically"]], "Example of Numerically Solving an Equation": [[31, "example-of-numerically-solving-an-equation"]], "Find Complex Roots of a Real Function": [[31, "find-complex-roots-of-a-real-function"]], "Ensure the Root Found is in a Given Interval": [[31, "ensure-the-root-found-is-in-a-given-interval"]], "Solve a System of Equations Numerically": [[31, "solve-a-system-of-equations-numerically"]], "Increase Precision of the Solution": [[31, "increase-precision-of-the-solution"]], "Create a Function That Can Be Solved With SciPy": [[31, "create-a-function-that-can-be-solved-with-scipy"]], "Substitute the Result Into an Expression": [[31, "substitute-the-result-into-an-expression"]], "Not all Equations Can be Solved": [[31, "not-all-equations-can-be-solved"]], "Equations With no Solution": [[31, "equations-with-no-solution"]], "Solve an Ordinary Differential Equation (ODE) Algebraically": [[32, "solve-an-ordinary-differential-equation-ode-algebraically"]], "Solve an Ordinary Differential Equation (ODE)": [[32, "solve-an-ordinary-differential-equation-ode"]], "Defining Derivatives": [[32, "defining-derivatives"]], "Options to Define an ODE": [[32, "options-to-define-an-ode"]], "Option 1: Define a Function Without Including Its Independent Variable": [[32, "option-1-define-a-function-without-including-its-independent-variable"]], "Specify Initial Conditions or Boundary Conditions": [[32, "specify-initial-conditions-or-boundary-conditions"], [32, "id1"]], "Option 2: Define a Function of an Independent Variable": [[32, "option-2-define-a-function-of-an-independent-variable"]], "Beware Copying and Pasting Results": [[32, "beware-copying-and-pasting-results"]], "Extract the Result for One Solution and Function": [[32, "extract-the-result-for-one-solution-and-function"]], "Some ODEs Cannot Be Solved Explicitly, Only Implicitly": [[32, "some-odes-cannot-be-solved-explicitly-only-implicitly"]], "Extract the Result for Multiple Function-Solution Pairs": [[32, "extract-the-result-for-multiple-function-solution-pairs"]], "If There is One Solution Set": [[32, "if-there-is-one-solution-set"]], "If There are Multiple Solution Sets": [[32, "if-there-are-multiple-solution-sets"]], "Work With Arbitrary Constants": [[32, "work-with-arbitrary-constants"]], "Numerically Solve an ODE in SciPy": [[32, "numerically-solve-an-ode-in-scipy"]], "Ordinary Differential Equation Solving Hints": [[32, "ordinary-differential-equation-solving-hints"]], "Return Unevaluated Integrals": [[32, "return-unevaluated-integrals"]], "Select a Specific Solver": [[32, "select-a-specific-solver"]], "Solve a System of Equations Algebraically": [[33, "solve-a-system-of-equations-algebraically"]], "Examples of Solving a System of Equations Algebraically": [[33, "examples-of-solving-a-system-of-equations-algebraically"]], "Solve a System of Linear Equations Algebraically": [[33, "solve-a-system-of-linear-equations-algebraically"]], "Solve a System of Nonlinear Equations Algebraically": [[33, "solve-a-system-of-nonlinear-equations-algebraically"]], "Solve and Use Results in a Dictionary": [[33, "solve-and-use-results-in-a-dictionary"]], "Solve Into a Solution Given as a Dictionary": [[33, "solve-into-a-solution-given-as-a-dictionary"]], "Use a Solution Given as a Dictionary": [[33, "use-a-solution-given-as-a-dictionary"]], "Solve Results in a Set": [[33, "solve-results-in-a-set"]], "Not All Systems of Equations Can be Solved": [[33, "not-all-systems-of-equations-can-be-solved"]], "Systems of Equations With no Solution": [[33, "systems-of-equations-with-no-solution"]], "Systems of Equations With no Closed-Form Solution": [[33, "systems-of-equations-with-no-closed-form-solution"]], "Solving Guidance": [[34, "solving-guidance"]], "Numeric Solutions": [[34, "numeric-solutions"]], "Equations With no Closed-Form Solution": [[34, "equations-with-no-closed-form-solution"]], "When You Might Prefer a Numeric Solution": [[34, "when-you-might-prefer-a-numeric-solution"]], "Use Exact Values": [[34, "use-exact-values"]], "Include the Variable to be Solved for in the Function Call": [[34, "include-the-variable-to-be-solved-for-in-the-function-call"]], "Ensure Consistent Formatting From solve()": [[34, "ensure-consistent-formatting-from-solve"]], "Include Solutions Making Any Denominator Zero": [[34, "include-solutions-making-any-denominator-zero"]], "Do Not Simplify Solutions": [[34, "do-not-simplify-solutions"]], "Parse a String Representing the Equation": [[34, "parse-a-string-representing-the-equation"]], "Welcome to SymPy\u2019s documentation!": [[35, "welcome-to-sympy-s-documentation"]], "Installation": [[35, "installation"], [36, "installation"], [289, "installation"]], "Tutorials": [[35, "tutorials"], [279, "tutorials"]], "API Reference": [[35, "api-reference"], [246, "module-sympy.utilities.autowrap"], [247, "module-sympy.utilities.codegen"], [270, "api-reference"]], "Anaconda": [[36, "anaconda"]], "Git": [[36, "git"]], "Run SymPy": [[36, "run-sympy"]], "mpmath": [[36, "mpmath"]], "Questions": [[36, "questions"]], "abc": [[37, "module-sympy.abc"]], "Caveats": [[37, "caveats"]], "Algebras": [[38, "algebras"]], "Quaternion Reference": [[38, "module-sympy.algebras"]], "Ask": [[39, "module-sympy.assumptions.ask"]], "Assume": [[40, "module-sympy.assumptions.assume"]], "Predicate": [[41, "predicate"]], "Querying": [[41, "querying"]], "Contents": [[41, "contents"], [52, "contents"], [72, "contents"], [85, "contents"], [91, "contents"], [206, "contents"], [218, "contents"], [228, "contents"], [237, "contents"]], "Performance improvements": [[41, "performance-improvements"]], "Misc": [[41, "misc"]], "Common": [[42, "common"]], "Calculus": [[42, "calculus"], [44, "module-sympy.calculus"], [281, "calculus"]], "Matrix": [[42, "matrix"]], "Number Theory": [[42, "number-theory"], [105, "module-sympy.ntheory.generate"], [270, "number-theory"], [275, "number-theory"]], "Order": [[42, "order"]], "Sets": [[42, "sets"], [222, "sets"]], "Refine": [[43, "module-sympy.assumptions.refine"]], "Singularities": [[44, "singularities"]], "Finite difference weights": [[44, "finite-difference-weights"]], "Category Theory": [[45, "category-theory"]], "Base Class Reference": [[45, "module-sympy.categories"], [67, "base-class-reference"]], "Diagram Drawing": [[45, "module-sympy.categories.diagram_drawing"]], "Code printers (sympy.printing)": [[46, "code-printers-sympy-printing"]], "Codegen (sympy.utilities.codegen)": [[46, "codegen-sympy-utilities-codegen"]], "Classes and functions for rewriting expressions (sympy.codegen.rewriting)": [[46, "module-sympy.codegen.rewriting"]], "Tools for simplifying expressions using approximations (sympy.codegen.approximations)": [[46, "module-sympy.codegen.approximations"]], "Classes for abstract syntax trees (sympy.codegen.ast)": [[46, "module-sympy.codegen.ast"]], "AST Type Tree": [[46, "ast-type-tree"]], "Predefined types": [[46, "predefined-types"]], "Using the nodes": [[46, "using-the-nodes"]], "Special C math functions (sympy.codegen.cfunctions)": [[46, "module-sympy.codegen.cfunctions"]], "C specific AST nodes (sympy.codegen.cnodes)": [[46, "module-sympy.codegen.cnodes"]], "C++ specific AST nodes (sympy.codegen.cxxnodes)": [[46, "module-sympy.codegen.cxxnodes"]], "Fortran specific AST nodes (sympy.codegen.fnodes)": [[46, "module-sympy.codegen.fnodes"]], "Algorithms (sympy.codegen.algorithms)": [[46, "module-sympy.codegen.algorithms"]], "Python utilities (sympy.codegen.pyutils)": [[46, "module-sympy.codegen.pyutils"]], "C utilities (sympy.codegen.cutils)": [[46, "module-sympy.codegen.cutils"]], "Fortran utilities (sympy.codegen.futils)": [[46, "module-sympy.codegen.futils"]], "Finitely Presented Groups": [[47, "finitely-presented-groups"]], "Overview of Facilities": [[47, "overview-of-facilities"]], "The Construction of Finitely Presented Groups": [[47, "the-construction-of-finitely-presented-groups"]], "Free Groups and Words": [[47, "free-groups-and-words"]], "Construction of a Free Group": [[47, "construction-of-a-free-group"]], "Construction of words": [[47, "construction-of-words"]], "Coset Enumeration: The Todd-Coxeter Algorithm": [[47, "coset-enumeration-the-todd-coxeter-algorithm"]], "CosetTable": [[47, "cosettable"]], "Attributes of CosetTable": [[47, "attributes-of-cosettable"]], "Compression and Standardization": [[47, "compression-and-standardization"]], "Subgroups of Finite Index": [[47, "subgroups-of-finite-index"]], "Low Index Subgroups": [[47, "low-index-subgroups"]], "Constructing a presentation for a subgroup": [[47, "constructing-a-presentation-for-a-subgroup"]], "Reidemeister Schreier algorithm": [[47, "reidemeister-schreier-algorithm"]], "Bibliography": [[47, "bibliography"], [55, "bibliography"]], "Galois Groups": [[48, "module-sympy.combinatorics.galois"], [209, "galois-groups"]], "References": [[48, "references"], [65, "references"], [77, "references"], [83, "references"], [92, "references"], [151, "references"], [154, "references"], [199, "references"], [223, "references"], [224, "references"], [227, "references"], [233, "references"]], "Gray Code": [[49, "module-sympy.combinatorics.graycode"]], "Group constructors": [[50, "module-sympy.combinatorics.group_constructs"]], "Nilpotent, Abelian and Cyclic Numbers": [[51, "module-sympy.combinatorics.group_numbers"]], "Combinatorics": [[52, "combinatorics"]], "Named Groups": [[53, "module-sympy.combinatorics.named_groups"]], "Partitions": [[54, "module-sympy.combinatorics.partitions"]], "Polycyclic Groups": [[55, "polycyclic-groups"]], "Overview of functionalities": [[55, "overview-of-functionalities"]], "The Construction of Polycyclic Groups": [[55, "the-construction-of-polycyclic-groups"]], "Attributes of PolycyclicGroup": [[55, "attributes-of-polycyclicgroup"]], "The Construction of Collector": [[55, "the-construction-of-collector"]], "Attributes of Collector": [[55, "attributes-of-collector"]], "Computation of Minimal Uncollected Subword": [[55, "computation-of-minimal-uncollected-subword"]], "Computation of Subword Index": [[55, "computation-of-subword-index"]], "Computation of Collected Word": [[55, "computation-of-collected-word"]], "Computation of Polycyclic Presentation": [[55, "computation-of-polycyclic-presentation"]], "Computation of Exponent Vector": [[55, "computation-of-exponent-vector"]], "Depth of Polycyclic generator": [[55, "depth-of-polycyclic-generator"]], "Computation of Leading Exponent": [[55, "computation-of-leading-exponent"]], "Permutation Groups": [[56, "module-sympy.combinatorics.perm_groups"]], "Permutations": [[57, "module-sympy.combinatorics.permutations"]], "Generators": [[57, "module-sympy.combinatorics.generators"]], "Polyhedron": [[58, "module-sympy.combinatorics.polyhedron"]], "Prufer Sequences": [[59, "module-sympy.combinatorics.prufer"]], "Subsets": [[60, "module-sympy.combinatorics.subsets"]], "Tensor Canonicalization": [[61, "module-sympy.combinatorics.tensor_can"]], "Test Utilities": [[62, "module-sympy.combinatorics.testutil"]], "Utilities": [[63, "module-sympy.combinatorics.util"], [152, "module-sympy.physics.optics.utils"], [209, "utilities"], [251, "module-sympy.utilities"], [270, "utilities"], [278, "utilities"]], "Concrete": [[64, "concrete"]], "Hypergeometric terms": [[64, "hypergeometric-terms"]], "Concrete Class Reference": [[64, "concrete-class-reference"]], "Concrete Functions Reference": [[64, "concrete-functions-reference"]], "Core": [[65, "core"]], "sympify": [[65, "module-sympy.core.sympify"]], "assumptions": [[65, "module-sympy.core.assumptions"]], "See Also": [[65, "see-also"], [252, "see-also"]], "Notes": [[65, "notes"], [221, "notes"], [223, "notes"]], "Developers Notes": [[65, "developers-notes"]], "cache": [[65, "module-sympy.core.cache"]], "basic": [[65, "module-sympy.core.basic"]], "singleton": [[65, "module-sympy.core.singleton"]], "expr": [[65, "module-sympy.core.expr"]], "symbol": [[65, "module-sympy.core.symbol"]], "numbers": [[65, "module-sympy.core.numbers"]], "power": [[65, "module-sympy.core.power"]], "mul": [[65, "module-sympy.core.mul"]], "add": [[65, "module-sympy.core.add"]], "mod": [[65, "module-sympy.core.mod"]], "relational": [[65, "module-sympy.core.relational"]], "multidimensional": [[65, "module-sympy.core.multidimensional"]], "function": [[65, "module-sympy.core.function"]], "evalf": [[65, "module-sympy.core.evalf"], [280, "evalf"]], "containers": [[65, "module-sympy.core.containers"]], "exprtools": [[65, "module-sympy.core.exprtools"]], "Sorting": [[65, "sorting"]], "Random": [[65, "module-sympy.core.random"]], "Traversal": [[65, "module-sympy.core.traversal"]], "Cryptography": [[66, "cryptography"]], "Differential Geometry": [[67, "module-sympy.diffgeom"]], "Discrete": [[68, "discrete"]], "Transforms": [[68, "module-sympy.discrete.transforms"]], "Fast Fourier Transform": [[68, "fast-fourier-transform"]], "Number Theoretic Transform": [[68, "number-theoretic-transform"]], "Fast Walsh Hadamard Transform": [[68, "fast-walsh-hadamard-transform"]], "M\u00f6bius Transform": [[68, "mobius-transform"]], "Convolutions": [[68, "module-sympy.discrete.convolutions"]], "Convolution": [[68, "convolution"]], "Convolution using Fast Fourier Transform": [[68, "convolution-using-fast-fourier-transform"]], "Convolution using Number Theoretic Transform": [[68, "convolution-using-number-theoretic-transform"]], "Convolution using Fast Walsh Hadamard Transform": [[68, "convolution-using-fast-walsh-hadamard-transform"]], "Subset Convolution": [[68, "subset-convolution"]], "Covering Product": [[68, "covering-product"]], "Intersecting Product": [[68, "intersecting-product"]], "Numerical Evaluation": [[69, "numerical-evaluation"]], "Basics": [[69, "basics"], [270, "basics"], [271, "basics"]], "Floating-point numbers": [[69, "floating-point-numbers"]], "Accuracy and error handling": [[69, "accuracy-and-error-handling"]], "Sums and integrals": [[69, "sums-and-integrals"]], "Numerical simplification": [[69, "numerical-simplification"]], "Combinatorial": [[70, "combinatorial"]], "Enumeration": [[70, "enumeration"]], "Elementary": [[71, "elementary"]], "Complex Functions": [[71, "complex-functions"]], "Trigonometric": [[71, "trigonometric"]], "Trigonometric Functions": [[71, "trigonometric-functions"]], "Trigonometric Inverses": [[71, "trigonometric-inverses"]], "Hyperbolic": [[71, "hyperbolic"]], "Hyperbolic Functions": [[71, "hyperbolic-functions"]], "Hyperbolic Inverses": [[71, "hyperbolic-inverses"]], "Integer Functions": [[71, "integer-functions"]], "Exponential": [[71, "exponential"]], "Piecewise": [[71, "piecewise"]], "Miscellaneous": [[71, "miscellaneous"], [255, "module-sympy.utilities.misc"]], "Special": [[73, "special"]], "Dirac Delta and Related Discontinuous Functions": [[73, "dirac-delta-and-related-discontinuous-functions"]], "Gamma, Beta and Related Functions": [[73, "module-sympy.functions.special.gamma_functions"]], "Error Functions and Fresnel Integrals": [[73, "module-sympy.functions.special.error_functions"]], "Exponential, Logarithmic and Trigonometric Integrals": [[73, "exponential-logarithmic-and-trigonometric-integrals"]], "Bessel Type Functions": [[73, "module-sympy.functions.special.bessel"]], "Airy Functions": [[73, "airy-functions"]], "B-Splines": [[73, "b-splines"]], "Riemann Zeta and Related Functions": [[73, "module-sympy.functions.special.zeta_functions"]], "Hypergeometric Functions": [[73, "hypergeometric-functions"]], "Elliptic integrals": [[73, "module-sympy.functions.special.elliptic_integrals"]], "Mathieu Functions": [[73, "module-sympy.functions.special.mathieu_functions"]], "Orthogonal Polynomials": [[73, "module-sympy.functions.special.polynomials"]], "Jacobi Polynomials": [[73, "jacobi-polynomials"]], "Gegenbauer Polynomials": [[73, "gegenbauer-polynomials"]], "Chebyshev Polynomials": [[73, "chebyshev-polynomials"]], "Legendre Polynomials": [[73, "legendre-polynomials"]], "Hermite Polynomials": [[73, "hermite-polynomials"]], "Laguerre Polynomials": [[73, "laguerre-polynomials"]], "Spherical Harmonics": [[73, "spherical-harmonics"]], "Tensor Functions": [[73, "tensor-functions"]], "Curves": [[74, "module-sympy.geometry.curve"]], "Ellipses": [[75, "module-sympy.geometry.ellipse"]], "Entities": [[76, "module-sympy.geometry.entity"]], "Geometry": [[77, "geometry"]], "Available Entities": [[77, "available-entities"]], "Example Usage": [[77, "example-usage"]], "Intersection of medians": [[77, "intersection-of-medians"]], "An in-depth example: Pappus\u2019 Hexagon Theorem": [[77, "an-in-depth-example-pappus-hexagon-theorem"]], "Miscellaneous Notes": [[77, "miscellaneous-notes"]], "Future Work": [[77, "future-work"]], "Truth Setting Expressions": [[77, "truth-setting-expressions"]], "Three Dimensions and Beyond": [[77, "three-dimensions-and-beyond"]], "Geometry Visualization": [[77, "geometry-visualization"]], "Submodules": [[77, "submodules"]], "Lines": [[78, "module-sympy.geometry.line"]], "Plane": [[79, "module-sympy.geometry.plane"]], "Points": [[80, "module-sympy.geometry.point"], [263, "points"]], "Polygons": [[81, "module-sympy.geometry.polygon"]], "Utils": [[82, "module-sympy.geometry.util"]], "About Holonomic Functions": [[83, "about-holonomic-functions"]], "Converting other representations to holonomic": [[84, "converting-other-representations-to-holonomic"]], "Converting hypergeometric functions": [[84, "converting-hypergeometric-functions"]], "Converting Meijer G-functions": [[84, "converting-meijer-g-functions"]], "Converting symbolic expressions": [[84, "converting-symbolic-expressions"]], "Holonomic": [[85, "module-sympy.holonomic"]], "Internal API": [[86, "internal-api"]], "Operations on holonomic functions": [[87, "operations-on-holonomic-functions"]], "Addition and Multiplication": [[87, "addition-and-multiplication"]], "Integration and Differentiation": [[87, "integration-and-differentiation"]], "Composition with polynomials": [[87, "composition-with-polynomials"]], "Convert to holonomic sequence": [[87, "convert-to-holonomic-sequence"]], "Series expansion": [[87, "series-expansion"]], "Numerical evaluation": [[87, "numerical-evaluation"]], "Convert to a linear combination of hypergeometric functions": [[87, "convert-to-a-linear-combination-of-hypergeometric-functions"]], "Convert to a linear combination of Meijer G-functions": [[87, "convert-to-a-linear-combination-of-meijer-g-functions"]], "Convert to expressions": [[87, "convert-to-expressions"]], "Representation of holonomic functions in SymPy": [[88, "representation-of-holonomic-functions-in-sympy"]], "Uses and Current limitations": [[89, "uses-and-current-limitations"]], "Integration": [[89, "integration"]], "Computing Integrals using Meijer G-Functions": [[90, "computing-integrals-using-meijer-g-functions"]], "Overview": [[90, "overview"]], "Polar Numbers and Branched Functions": [[90, "polar-numbers-and-branched-functions"]], "Representing Branched Functions on the Argand Plane": [[90, "representing-branched-functions-on-the-argand-plane"]], "Table Lookups and Inverse Mellin Transforms": [[90, "table-lookups-and-inverse-mellin-transforms"]], "Applying the Integral Theorems": [[90, "applying-the-integral-theorems"]], "The G-Function Integration Theorems": [[90, "the-g-function-integration-theorems"]], "Conditions of Convergence for Integral (1)": [[90, "conditions-of-convergence-for-integral-1"]], "Conditions of Convergence for Integral (2)": [[90, "conditions-of-convergence-for-integral-2"]], "The Inverse Laplace Transform of a G-function": [[90, "the-inverse-laplace-transform-of-a-g-function"]], "How to compute the integral": [[90, "how-to-compute-the-integral"]], "When this computation is valid": [[90, "when-this-computation-is-valid"]], "When the integral exists": [[90, "when-the-integral-exists"]], "Implemented G-Function Formulae": [[90, "implemented-g-function-formulae"]], "Internal API Reference": [[90, "module-sympy.integrals.meijerint"]], "Integrals": [[91, "integrals"], [92, "module-sympy.integrals"], [281, "integrals"]], "Integral Transforms": [[92, "module-sympy.integrals.transforms"]], "Internals": [[92, "internals"], [209, "internals"]], "API reference": [[92, "api-reference"], [92, "id39"]], "TODO and Bugs": [[92, "todo-and-bugs"]], "Numeric Integrals": [[92, "numeric-integrals"]], "Integration over Polytopes": [[92, "module-sympy.integrals.intpoly"]], "For 2D Polygons": [[92, "for-2d-polygons"]], "For 3-Polytopes/Polyhedra": [[92, "for-3-polytopes-polyhedra"]], "Interactive": [[93, "module-sympy.interactive"]], "Session": [[93, "module-sympy.interactive.session"]], "Lie Algebra": [[94, "module-sympy.liealgebras"]], "Forming logical expressions": [[95, "forming-logical-expressions"]], "Boolean functions": [[95, "boolean-functions"]], "Simplification and equivalence-testing": [[95, "simplification-and-equivalence-testing"]], "Manipulating expressions": [[95, "manipulating-expressions"]], "Truth tables and related functions": [[95, "truth-tables-and-related-functions"]], "Inference": [[95, "module-sympy.logic.inference"]], "Common Matrices": [[96, "module-sympy.matrices.common"]], "Dense Matrices": [[97, "dense-matrices"]], "Matrix Expressions": [[98, "module-sympy.matrices.expressions"]], "Matrix Expressions Core Reference": [[98, "matrix-expressions-core-reference"]], "Block Matrices": [[98, "block-matrices"]], "Immutable Matrices": [[99, "immutable-matrices"]], "ImmutableMatrix Class Reference": [[99, "module-sympy.matrices.immutable"]], "Matrices": [[100, "module-sympy.matrices"], [118, "module-sympy.physics.matrices"], [270, "matrices"], [274, "matrices"], [287, "matrices"]], "Matrices (linear algebra)": [[101, "module-sympy.matrices.matrices"]], "Creating Matrices": [[101, "creating-matrices"]], "Basic Manipulation": [[101, "basic-manipulation"]], "Operations on entries": [[101, "operations-on-entries"]], "Linear algebra": [[101, "linear-algebra"]], "Reference": [[101, "reference"], [201, "reference"], [207, "reference"], [211, "reference"], [221, "reference"], [221, "id2"], [221, "id4"], [221, "id7"], [221, "id8"]], "Matrix Base Classes": [[101, "matrix-base-classes"]], "Matrix Exceptions": [[101, "matrix-exceptions"]], "Matrix Functions": [[101, "matrix-functions"]], "Rotation matrices": [[101, "rotation-matrices"]], "Numpy Utility Functions": [[101, "numpy-utility-functions"]], "Matrix Normal Forms": [[102, "matrix-normal-forms"]], "Sparse Matrices": [[103, "module-sympy.matrices.sparse"]], "SparseMatrix Class Reference": [[103, "sparsematrix-class-reference"]], "ImmutableSparseMatrix Class Reference": [[103, "immutablesparsematrix-class-reference"]], "Sparse Tools": [[104, "module-sympy.matrices.sparsetools"]], "Ntheory Class Reference": [[105, "ntheory-class-reference"]], "Ntheory Functions Reference": [[105, "ntheory-functions-reference"]], "ECM function": [[105, "ecm-function"]], "QS function": [[105, "qs-function"]], "Numeric Computation": [[106, "numeric-computation"]], "Subs/evalf": [[106, "subs-evalf"]], "Lambdify": [[106, "lambdify"], [253, "module-sympy.utilities.lambdify"]], "uFuncify": [[106, "ufuncify"]], "Aesara": [[106, "aesara"]], "So Which Should I Use?": [[106, "so-which-should-i-use"]], "Parsing Functions Reference": [[107, "parsing-functions-reference"]], "Parsing Transformations Reference": [[107, "parsing-transformations-reference"]], "Experimental \\mathrm{\\LaTeX} Parsing": [[107, "experimental-mathrm-latex-parsing"]], "\\mathrm{\\LaTeX} Parsing Caveats": [[107, "mathrm-latex-parsing-caveats"]], "\\mathrm{\\LaTeX} Parsing Functions Reference": [[107, "mathrm-latex-parsing-functions-reference"]], "\\mathrm{\\LaTeX} Parsing Exceptions Reference": [[107, "mathrm-latex-parsing-exceptions-reference"]], "SymPy Expression Reference": [[107, "module-sympy.parsing.sym_expr"]], "Runtime Installation": [[107, "runtime-installation"]], "Beam (Docstrings)": [[108, "module-sympy.physics.continuum_mechanics.beam"]], "Solving Beam Bending Problems using Singularity Functions": [[109, "solving-beam-bending-problems-using-singularity-functions"]], "Beam": [[109, "beam"], [110, "beam"]], "Example 1": [[109, "example-1"]], "Example 2": [[109, "example-2"]], "Example 3": [[109, "example-3"]], "Example 4": [[109, "example-4"]], "Example 5": [[109, "example-5"]], "Example 6": [[109, "example-6"]], "Example 7": [[109, "example-7"]], "Example 8": [[109, "example-8"]], "Example 9": [[109, "example-9"]], "Example 10": [[109, "example-10"]], "Example 11": [[109, "example-11"]], "Continuum Mechanics": [[110, "continuum-mechanics"]], "Abstract": [[110, null], [114, null], [116, null], [139, null], [149, null], [166, null], [196, null]], "Truss": [[110, "truss"]], "Truss (Docstrings)": [[111, "module-sympy.physics.continuum_mechanics.truss"]], "Control": [[112, "control"]], "Control System Plots": [[113, "control-system-plots"]], "Pole-Zero Plot": [[113, "pole-zero-plot"]], "Bode Plot": [[113, "bode-plot"]], "Impulse-Response Plot": [[113, "impulse-response-plot"]], "Step-Response Plot": [[113, "step-response-plot"]], "Ramp-Response Plot": [[113, "ramp-response-plot"]], "Control Module": [[114, "module-sympy.physics.control"]], "Control API": [[115, "control-api"]], "lti": [[115, "module-sympy.physics.control.lti"]], "High energy physics": [[116, "high-energy-physics"]], "Gamma matrices": [[116, "module-sympy.physics.hep.gamma_matrices"]], "Hydrogen Wavefunctions": [[117, "module-sympy.physics.hydrogen"]], "Potential Issues/Advanced Topics/Future Features in Physics/Mechanics": [[119, "potential-issues-advanced-topics-future-features-in-physics-mechanics"]], "Common Issues": [[119, "common-issues"], [188, "common-issues"]], "Numerically Integrating Code": [[119, "numerically-integrating-code"]], "Differentiating": [[119, "differentiating"]], "Choice of Coordinates and Speeds": [[119, "choice-of-coordinates-and-speeds"]], "Substitution": [[119, "substitution"], [188, "substitution"], [280, "substitution"]], "Linearization": [[119, "linearization"]], "Acceleration of Points": [[119, "acceleration-of-points"], [188, "acceleration-of-points"]], "Advanced Interfaces": [[119, "advanced-interfaces"], [188, "advanced-interfaces"]], "Advanced Functionality": [[119, "advanced-functionality"]], "Future Features": [[119, "future-features"]], "Code Output": [[119, "code-output"]], "Body (Docstrings)": [[120, "module-sympy.physics.mechanics.body"]], "Expression Manipulation (Docstrings)": [[121, "expression-manipulation-docstrings"]], "Mechanics API Reference": [[122, "mechanics-api-reference"]], "Joints Framework (Docstrings)": [[123, "joints-framework-docstrings"]], "Joint (Docstrings)": [[123, "module-sympy.physics.mechanics.joint"]], "Kane\u2019s Method & Lagrange\u2019s Method (Docstrings)": [[124, "module-sympy.physics.mechanics.kane"]], "Linearization (Docstrings)": [[125, "module-sympy.physics.mechanics.linearize"]], "Bodies, Inertias, Loads & Other Functions (Docstrings)": [[126, "bodies-inertias-loads-other-functions-docstrings"]], "Bodies": [[126, "bodies"]], "Inertias": [[126, "inertias"]], "Loads": [[126, "loads"], [144, "loads"]], "Other Functions": [[126, "other-functions"]], "Printing (Docstrings)": [[127, "printing-docstrings"], [194, "printing-docstrings"]], "mechanics_printing": [[127, "mechanics-printing"]], "mprint": [[127, "mprint"]], "mpprint": [[127, "mpprint"]], "mlatex": [[127, "mlatex"]], "SymbolicSystem (Docstrings)": [[128, "module-sympy.physics.mechanics.system"]], "Autolev Parser": [[129, "autolev-parser"]], "Usage": [[129, "usage"]], "Gotchas": [[129, "gotchas"], [283, "gotchas"]], "Limitations and Issues": [[129, "limitations-and-issues"]], "Future Improvements": [[129, "future-improvements"]], "1. Completing Dynamics Online": [[129, "completing-dynamics-online"]], "2. Fixing Issues": [[129, "fixing-issues"]], "3. Switching to an AST": [[129, "switching-to-an-ast"]], "Examples for Physics/Mechanics": [[130, "examples-for-physics-mechanics"]], "A bicycle": [[131, "a-bicycle"]], "A four bar linkage": [[132, "a-four-bar-linkage"]], "Nonminimal Coordinates Pendulum": [[133, "nonminimal-coordinates-pendulum"]], "Kane\u2019s Method": [[133, "kane-s-method"]], "Lagrange\u2019s Method": [[133, "lagrange-s-method"]], "Multi Degree of Freedom Holonomic System": [[134, "multi-degree-of-freedom-holonomic-system"]], "A rolling disc": [[135, "a-rolling-disc"]], "A rolling disc, with Kane\u2019s method": [[136, "a-rolling-disc-with-kane-s-method"]], "A rolling disc, with Kane\u2019s method and constraint forces": [[137, "a-rolling-disc-with-kane-s-method-and-constraint-forces"]], "A rolling disc using Lagrange\u2019s Method": [[138, "a-rolling-disc-using-lagrange-s-method"]], "Classical Mechanics": [[139, "classical-mechanics"]], "Vector": [[139, "vector"], [198, "vector"], [267, "vector"]], "Mechanics": [[139, "mechanics"], [234, "module-sympy.stats.rv"]], "Guide to Mechanics": [[139, "guide-to-mechanics"]], "Joints Framework in Physics/Mechanics": [[140, "joints-framework-in-physics-mechanics"]], "Joints in Physics/Mechanics": [[140, "joints-in-physics-mechanics"]], "JointsMethod in Physics/Mechanics": [[140, "jointsmethod-in-physics-mechanics"]], "Kane\u2019s Method in Physics/Mechanics": [[141, "kane-s-method-in-physics-mechanics"], [141, "id2"]], "Structure of Equations": [[141, "structure-of-equations"], [142, "structure-of-equations"]], "Lagrange\u2019s Method in Physics/Mechanics": [[142, "lagrange-s-method-in-physics-mechanics"], [142, "id1"]], "Linearization in Physics/Mechanics": [[143, "linearization-in-physics-mechanics"]], "Background": [[143, "background"]], "A Note on Dependent Coordinates and Speeds": [[143, null]], "Linearizing Kane\u2019s Equations": [[143, "linearizing-kane-s-equations"]], "1. Using the Linearizer class directly:": [[143, "using-the-linearizer-class-directly"], [143, "id2"]], "2. Using the linearize class method:": [[143, "using-the-linearize-class-method"], [143, "id3"]], "What\u2019s with the new_method kwarg?": [[143, null]], "Linearizing Lagrange\u2019s Equations": [[143, "linearizing-lagrange-s-equations"]], "Potential Issues": [[143, "potential-issues"]], "1. Symbolic linearization with A_and_B=True is slow": [[143, "symbolic-linearization-with-a-and-b-true-is-slow"]], "2. The linearized form has nan, zoo, or oo as matrix elements": [[143, "the-linearized-form-has-nan-zoo-or-oo-as-matrix-elements"]], "Further Examples": [[143, "further-examples"]], "Masses, Inertias, Particles and Rigid Bodies in Physics/Mechanics": [[144, "masses-inertias-particles-and-rigid-bodies-in-physics-mechanics"]], "Mass": [[144, "mass"]], "Particle": [[144, "particle"]], "Inertia": [[144, "inertia"]], "Inertia (Dyadics)": [[144, "inertia-dyadics"]], "Rigid Body": [[144, "rigid-body"]], "Linear Momentum": [[144, "linear-momentum"]], "Angular Momentum": [[144, "angular-momentum"]], "Using momenta functions in Mechanics": [[144, "using-momenta-functions-in-mechanics"]], "Kinetic Energy": [[144, "kinetic-energy"]], "Potential Energy": [[144, "potential-energy"]], "Lagrangian": [[144, "lagrangian"]], "Using energy functions in Mechanics": [[144, "using-energy-functions-in-mechanics"]], "References for Physics/Mechanics": [[145, "references-for-physics-mechanics"]], "SymPy Mechanics for Autolev Users": [[146, "sympy-mechanics-for-autolev-users"]], "Some Key Differences": [[146, "some-key-differences"]], "Rough Autolev-SymPy Equivalents": [[146, "rough-autolev-sympy-equivalents"]], "Mathematical Equivalents": [[146, "mathematical-equivalents"]], "Physical Equivalents": [[146, "physical-equivalents"]], "Numerical Evaluation and Visualization": [[146, "numerical-evaluation-and-visualization"]], "Links": [[146, "links"]], "Symbolic Systems in Physics/Mechanics": [[147, "symbolic-systems-in-physics-mechanics"]], "SymbolicSystem Example Usage": [[147, "symbolicsystem-example-usage"]], "Gaussian Optics": [[148, "module-sympy.physics.optics.gaussopt"]], "Optics Module": [[149, "optics-module"]], "Medium": [[150, "module-sympy.physics.optics.medium"]], "Polarization": [[151, "module-sympy.physics.optics.polarization"]], "Waves": [[153, "module-sympy.physics.optics.waves"]], "Pauli Algebra": [[154, "module-sympy.physics.paulialgebra"]], "Quantum Harmonic Oscillator in 1-D": [[155, "module-sympy.physics.qho_1d"]], "Anticommutator": [[156, "module-sympy.physics.quantum.anticommutator"]], "Cartesian Operators and States": [[157, "module-sympy.physics.quantum.cartesian"]], "Clebsch-Gordan Coefficients": [[158, "module-sympy.physics.quantum.cg"]], "Circuit Plot": [[159, "module-sympy.physics.quantum.circuitplot"]], "Commutator": [[160, "module-sympy.physics.quantum.commutator"]], "Constants": [[161, "module-sympy.physics.quantum.constants"], [184, "constants"]], "Dagger": [[162, "module-sympy.physics.quantum.dagger"]], "Gates": [[163, "module-sympy.physics.quantum.gate"]], "Grover\u2019s Algorithm": [[164, "module-sympy.physics.quantum.grover"]], "Hilbert Space": [[165, "module-sympy.physics.quantum.hilbert"]], "Quantum Mechanics": [[166, "quantum-mechanics"]], "Quantum Functions": [[166, "quantum-functions"]], "States and Operators": [[166, "states-and-operators"]], "Quantum Computation": [[166, "quantum-computation"]], "Analytic Solutions": [[166, "analytic-solutions"]], "Inner Product": [[167, "module-sympy.physics.quantum.innerproduct"]], "Operator": [[168, "module-sympy.physics.quantum.operator"]], "Operator/State Helper Functions": [[169, "module-sympy.physics.quantum.operatorset"]], "Particle in a Box": [[170, "module-sympy.physics.quantum.piab"]], "Qapply": [[171, "module-sympy.physics.quantum.qapply"]], "QFT": [[172, "module-sympy.physics.quantum.qft"]], "Qubit": [[173, "module-sympy.physics.quantum.qubit"]], "Represent": [[174, "module-sympy.physics.quantum.represent"]], "Shor\u2019s Algorithm": [[175, "module-sympy.physics.quantum.shor"]], "Spin": [[176, "module-sympy.physics.quantum.spin"]], "State": [[177, "module-sympy.physics.quantum.state"]], "Tensor Product": [[178, "module-sympy.physics.quantum.tensorproduct"]], "Second Quantization": [[179, "module-sympy.physics.secondquant"]], "Quantum Harmonic Oscillator in 3-D": [[180, "module-sympy.physics.sho"]], "Dimensions and dimension systems": [[181, "module-sympy.physics.units.dimensions"]], "More examples": [[182, "more-examples"]], "Dimensional analysis": [[182, "dimensional-analysis"]], "Equation with quantities": [[182, "equation-with-quantities"]], "Unit systems": [[183, "unit-systems"]], "More": [[183, "more"]], "Philosophy behind unit systems": [[184, "philosophy-behind-unit-systems"]], "Dimensions": [[184, "dimensions"]], "Group structure": [[184, "group-structure"]], "Linear space representation": [[184, "linear-space-representation"]], "An example": [[184, "an-example"], [224, "an-example"]], "Quantities": [[184, "quantities"]], "Units": [[184, "units"]], "The need for a reference": [[184, "the-need-for-a-reference"]], "Literature": [[184, "literature"], [208, "literature"], [213, "literature"]], "Unit prefixes": [[185, "module-sympy.physics.units.prefixes"]], "Physical quantities": [[186, "module-sympy.physics.units.quantities"]], "Conversion between quantities": [[186, "module-sympy.physics.units.util"]], "Units and unit systems": [[187, "module-sympy.physics.units.unitsystem"]], "Potential Issues/Advanced Topics/Future Features in Physics/Vector Module": [[188, "potential-issues-advanced-topics-future-features-in-physics-vector-module"]], "Dyadic": [[188, "dyadic"]], "ReferenceFrame": [[188, "referenceframe"]], "dynamicsymbols": [[188, "dynamicsymbols"]], "Essential Classes": [[189, "essential-classes"]], "Docstrings for basic field functions": [[190, "docstrings-for-basic-field-functions"]], "Field operation functions": [[190, "field-operation-functions"]], "Checking the type of vector field": [[190, "checking-the-type-of-vector-field"]], "Essential Functions (Docstrings)": [[191, "essential-functions-docstrings"]], "Physics Vector API": [[192, "physics-vector-api"]], "Kinematics (Docstrings)": [[193, "module-sympy.physics.vector.point"]], "kinematic_equations": [[193, "module-sympy.physics.vector.functions"]], "Scalar and Vector Field Functionality": [[195, "scalar-and-vector-field-functionality"], [266, "scalar-and-vector-field-functionality"]], "Vectors and Scalars": [[195, "vectors-and-scalars"], [268, "vectors-and-scalars"]], "Fields": [[195, "fields"], [268, "fields"]], "Implementation of fields in sympy.physics.vector": [[195, "implementation-of-fields-in-sympy-physics-vector"]], "Field operators and other related functions": [[195, "field-operators-and-other-related-functions"]], "Curl": [[195, "curl"], [266, "curl"]], "Divergence": [[195, "divergence"], [266, "divergence"]], "Gradient": [[195, "gradient"], [266, "gradient"]], "Conservative and Solenoidal fields": [[195, "conservative-and-solenoidal-fields"], [266, "conservative-and-solenoidal-fields"]], "Scalar potential functions": [[195, "scalar-potential-functions"], [266, "scalar-potential-functions"]], "The Physics Vector Module": [[196, "the-physics-vector-module"]], "References for Physics/Vector": [[196, "references-for-physics-vector"]], "Guide to Vector": [[196, "guide-to-vector"], [267, "guide-to-vector"]], "Vector: Kinematics": [[197, "vector-kinematics"]], "Introduction to Kinematics": [[197, "introduction-to-kinematics"]], "Angular Velocity": [[197, "angular-velocity"]], "Angular Acceleration": [[197, "angular-acceleration"]], "Point Velocity & Acceleration": [[197, "point-velocity-acceleration"]], "Kinematics in physics.vector": [[197, "kinematics-in-physics-vector"]], "Vector & ReferenceFrame": [[198, "vector-referenceframe"]], "Vector Algebra": [[198, "vector-algebra"]], "Vector Operations": [[198, "vector-operations"]], "Alternative Representation": [[198, "alternative-representation"]], "Vector Calculus": [[198, "vector-calculus"]], "Derivatives of Vectors": [[198, "derivatives-of-vectors"]], "Relating Sets of Basis Vectors": [[198, "relating-sets-of-basis-vectors"]], "Derivatives with Multiple Frames": [[198, "derivatives-with-multiple-frames"]], "Using Vectors and Reference Frames": [[198, "using-vectors-and-reference-frames"]], "Vector Algebra, in physics.vector": [[198, "vector-algebra-in-physics-vector"]], "Vector Calculus, in physics.vector": [[198, "vector-calculus-in-physics-vector"]], "How Vectors are Coded": [[198, "how-vectors-are-coded"]], "Wigner Symbols": [[199, "module-sympy.physics.wigner"]], "Credits and Copyright": [[199, "credits-and-copyright"]], "Authors": [[199, "authors"]], "Plot Class": [[200, "plot-class"]], "Plotting Function Reference": [[200, "plotting-function-reference"]], "PlotGrid Class": [[200, "plotgrid-class"]], "Series Classes": [[200, "series-classes"]], "Backends": [[200, "backends"]], "Pyglet Plotting": [[200, "module-sympy.plotting.pygletplot"]], "Plot Window Controls": [[200, "plot-window-controls"]], "Coordinate Modes": [[200, "coordinate-modes"]], "Specifying Intervals for Variables": [[200, "specifying-intervals-for-variables"]], "Using the Interactive Interface": [[200, "using-the-interactive-interface"]], "Using Custom Color Functions": [[200, "using-custom-color-functions"]], "Plotting Geometric Entities": [[200, "plotting-geometric-entities"]], "Plotting with ASCII art": [[200, "plotting-with-ascii-art"]], "AGCA - Algebraic Geometry and Commutative Algebra Module": [[201, "agca-algebraic-geometry-and-commutative-algebra-module"]], "Base Rings": [[201, "base-rings"]], "Modules, Ideals and their Elementary Properties": [[201, "modules-ideals-and-their-elementary-properties"]], "Module Homomorphisms and Syzygies": [[201, "module-homomorphisms-and-syzygies"]], "Finite Extensions": [[201, "finite-extensions"]], "Basic functionality of the module": [[202, "basic-functionality-of-the-module"]], "Basic concepts": [[202, "basic-concepts"]], "Polynomials": [[202, "polynomials"]], "Divisibility": [[202, "divisibility"]], "Integral domains": [[202, "integral-domains"]], "Factorial domains": [[202, "factorial-domains"]], "Euclidean domains": [[202, "euclidean-domains"]], "Divisibility of polynomials": [[202, "divisibility-of-polynomials"]], "Basic functionality": [[202, "basic-functionality"]], "Division": [[202, "division"]], "GCD and LCM": [[202, "gcd-and-lcm"]], "Square-free factorization": [[202, "square-free-factorization"]], "Factorization": [[202, "factorization"]], "Groebner bases": [[202, "groebner-bases"]], "Solving Equations": [[202, "solving-equations"]], "Introducing the domainmatrix of the poly module": [[203, "introducing-the-domainmatrix-of-the-poly-module"]], "What is domainmatrix?": [[203, "what-is-domainmatrix"]], "Introducing the Domains of the poly module": [[204, "introducing-the-domains-of-the-poly-module"]], "What are the domains?": [[204, "what-are-the-domains"]], "Representing expressions symbolically": [[204, "representing-expressions-symbolically"]], "Tree representation": [[204, "tree-representation"]], "DUP representation": [[204, "dup-representation"]], "DMP representation": [[204, "dmp-representation"]], "Sparse polynomial representation": [[204, "sparse-polynomial-representation"]], "Basic usage of domains": [[204, "basic-usage-of-domains"]], "Domain elements vs sympy expressions": [[204, "domain-elements-vs-sympy-expressions"]], "Gaussian integers and Gaussian rationals": [[204, "gaussian-integers-and-gaussian-rationals"]], "Finite fields": [[204, "finite-fields"]], "Real and complex fields": [[204, "real-and-complex-fields"]], "Algebraic number fields": [[204, "algebraic-number-fields"], [209, "algebraic-number-fields"]], "Polynomial ring domains": [[204, "polynomial-ring-domains"]], "Old (dense) polynomial rings": [[204, "old-dense-polynomial-rings"]], "PolyRing vs PolynomialRing": [[204, "polyring-vs-polynomialring"]], "Rational function fields": [[204, "rational-function-fields"]], "Expression domain": [[204, "expression-domain"]], "Choosing a domain": [[204, "choosing-a-domain"]], "Converting elements between different domains": [[204, "converting-elements-between-different-domains"]], "Unifying domains": [[204, "unifying-domains"]], "Internals of a Poly": [[204, "internals-of-a-poly"]], "Choosing a domain for a Poly": [[204, "choosing-a-domain-for-a-poly"]], "Choosing generators": [[204, "choosing-generators"]], "Algebraically dependent generators": [[204, "algebraically-dependent-generators"]], "Reference docs for the Poly Domains": [[205, "reference-docs-for-the-poly-domains"]], "Domains": [[205, "domains"]], "Abstract Domains": [[205, "abstract-domains"]], "GF(p)": [[205, "gf-p"]], "ZZ": [[205, "zz"]], "QQ": [[205, "qq"]], "MPQ": [[205, "mpq"]], "Gaussian domains": [[205, "gaussian-domains"]], "ZZ_I": [[205, "zz-i"]], "QQ_I": [[205, "qq-i"]], "QQ<a>": [[205, "qq-a"]], "RR": [[205, "rr"]], "CC": [[205, "cc"]], "K[x]": [[205, "k-x"]], "K(x)": [[205, "id11"]], "EX": [[205, "ex"]], "Quotient ring": [[205, "quotient-ring"]], "Sparse polynomials": [[205, "sparse-polynomials"]], "Sparse rational functions": [[205, "sparse-rational-functions"]], "Dense polynomials": [[205, "dense-polynomials"]], "Polynomial Manipulation": [[206, "polynomial-manipulation"]], "Internals of the Polynomial Manipulation Module": [[207, "internals-of-the-polynomial-manipulation-module"]], "Level Zero": [[207, "level-zero"]], "Manipulation of dense, multivariate polynomials": [[207, "manipulation-of-dense-multivariate-polynomials"]], "Manipulation of dense, univariate polynomials with finite field coefficients": [[207, "manipulation-of-dense-univariate-polynomials-with-finite-field-coefficients"]], "Manipulation of sparse, distributed polynomials and vectors": [[207, "manipulation-of-sparse-distributed-polynomials-and-vectors"]], "Polynomial factorization algorithms": [[207, "polynomial-factorization-algorithms"]], "Classical remainder sequence": [[207, "classical-remainder-sequence"]], "Simplified remainder sequences": [[207, "simplified-remainder-sequences"]], "Subresultant sequence": [[207, "subresultant-sequence"]], "Groebner basis algorithms": [[207, "groebner-basis-algorithms"]], "Options": [[207, "module-sympy.polys.polyoptions"]], "Configuration": [[207, "module-sympy.polys.polyconfig"]], "Exceptions": [[207, "exceptions"]], "Modular GCD": [[207, "modular-gcd"]], "Undocumented": [[207, "undocumented"]], "Number Fields": [[209, "number-fields"]], "Solving the Main Problems": [[209, "solving-the-main-problems"]], "Integral Basis": [[209, "integral-basis"]], "Prime Decomposition": [[209, "prime-decomposition"]], "p-adic Valuation": [[209, "p-adic-valuation"]], "Finding Minimal Polynomials": [[209, "finding-minimal-polynomials"]], "The Subfield Problem": [[209, "the-subfield-problem"]], "Representing algebraic numbers": [[209, "representing-algebraic-numbers"]], "As number field elements": [[209, "as-number-field-elements"]], "As elements of finitely-generated modules": [[209, "as-elements-of-finitely-generated-modules"]], "Finitely-generated modules": [[209, "module-sympy.polys.numberfields.modules"]], "Arithmetic with module elements": [[209, "arithmetic-with-module-elements"]], "Multiplication": [[209, "multiplication"]], "Module Homomorphisms": [[209, "module-homomorphisms"]], "Class Reference": [[209, "class-reference"]], "Polynomials Manipulation Module Reference": [[210, "module-sympy.polys"]], "Basic polynomial manipulation functions": [[210, "basic-polynomial-manipulation-functions"]], "Extra polynomial manipulation functions": [[210, "extra-polynomial-manipulation-functions"]], "Domain constructors": [[210, "domain-constructors"]], "Monomials encoded as tuples": [[210, "monomials-encoded-as-tuples"]], "Orderings of monomials": [[210, "orderings-of-monomials"]], "Formal manipulation of roots of polynomials": [[210, "formal-manipulation-of-roots-of-polynomials"]], "Symbolic root-finding algorithms": [[210, "symbolic-root-finding-algorithms"]], "Special polynomials": [[210, "special-polynomials"]], "Orthogonal polynomials": [[210, "orthogonal-polynomials"]], "Appell sequences": [[210, "appell-sequences"]], "Manipulation of rational functions": [[210, "manipulation-of-rational-functions"]], "Partial fraction decomposition": [[210, "partial-fraction-decomposition"], [213, "partial-fraction-decomposition"]], "Dispersion of Polynomials": [[210, "dispersion-of-polynomials"]], "Series Manipulation using Polynomials": [[211, "series-manipulation-using-polynomials"]], "rs_series": [[211, "rs-series"]], "Contribute": [[211, "contribute"]], "Poly solvers": [[212, "poly-solvers"]], "Examples from Wester\u2019s Article": [[213, "examples-from-wester-s-article"]], "Simple univariate polynomial factorization": [[213, "simple-univariate-polynomial-factorization"]], "Univariate GCD, resultant and factorization": [[213, "univariate-gcd-resultant-and-factorization"]], "Multivariate GCD and factorization": [[213, "multivariate-gcd-and-factorization"]], "Support for symbols in exponents": [[213, "support-for-symbols-in-exponents"]], "Testing if polynomials have common zeros": [[213, "testing-if-polynomials-have-common-zeros"]], "Normalizing simple rational functions": [[213, "normalizing-simple-rational-functions"]], "Expanding expressions and factoring back": [[213, "expanding-expressions-and-factoring-back"]], "Factoring in terms of cyclotomic polynomials": [[213, "factoring-in-terms-of-cyclotomic-polynomials"]], "Univariate factoring over Gaussian numbers": [[213, "univariate-factoring-over-gaussian-numbers"]], "Computing with automatic field extensions": [[213, "computing-with-automatic-field-extensions"]], "Univariate factoring over various domains": [[213, "univariate-factoring-over-various-domains"]], "Factoring polynomials into linear factors": [[213, "factoring-polynomials-into-linear-factors"]], "Advanced factoring over finite fields": [[213, "advanced-factoring-over-finite-fields"]], "Working with expressions as polynomials": [[213, "working-with-expressions-as-polynomials"]], "Computing reduced Gr\u00f6bner bases": [[213, "computing-reduced-grobner-bases"]], "Multivariate factoring over algebraic numbers": [[213, "multivariate-factoring-over-algebraic-numbers"]], "Printer Class": [[214, "module-sympy.printing.printer"]], "Which Method is Responsible for Printing?": [[214, "which-method-is-responsible-for-printing"]], "Example of Custom Printer": [[214, "example-of-custom-printer"]], "Example of Custom Printing Method": [[214, "example-of-custom-printing-method"]], "Common mistakes": [[214, "common-mistakes"]], "PrettyPrinter Class": [[214, "prettyprinter-class"]], "C code printers": [[214, "module-sympy.printing.c"]], "C++ code printers": [[214, "module-sympy.printing.cxx"]], "RCodePrinter": [[214, "module-sympy.printing.rcode"]], "Fortran Printing": [[214, "fortran-printing"]], "SMT-Lib printing": [[214, "module-sympy.printing.smtlib"]], "Mathematica code printing": [[214, "module-sympy.printing.mathematica"]], "Maple code printing": [[214, "module-sympy.printing.maple"]], "Javascript Code printing": [[214, "module-sympy.printing.jscode"]], "Julia code printing": [[214, "module-sympy.printing.julia"]], "Octave (and Matlab) Code printing": [[214, "module-sympy.printing.octave"]], "Rust code printing": [[214, "module-sympy.printing.rust"]], "Aesara Code printing": [[214, "module-sympy.printing.aesaracode"]], "Gtk": [[214, "module-sympy.printing.gtk"]], "LambdaPrinter": [[214, "module-sympy.printing.lambdarepr"]], "LatexPrinter": [[214, "module-sympy.printing.latex"]], "MathMLPrinter": [[214, "module-sympy.printing.mathml"]], "PythonCodePrinter": [[214, "module-sympy.printing.pycode"]], "PythonPrinter": [[214, "module-sympy.printing.python"]], "srepr": [[214, "module-sympy.printing.repr"], [290, "srepr"]], "StrPrinter": [[214, "module-sympy.printing.str"]], "Tree Printing": [[214, "module-sympy.printing.tree"]], "Preview": [[214, "preview"]], "Implementation - Helper Classes/Functions": [[214, "module-sympy.printing.conventions"]], "CodePrinter": [[214, "module-sympy.printing.codeprinter"]], "Precedence": [[214, "module-sympy.printing.precedence"]], "Pretty-Printing Implementation Helpers": [[214, "module-sympy.printing.pretty.pretty_symbology"]], "dotprint": [[214, "dotprint"]], "Term Rewriting": [[215, "term-rewriting"]], "Expanding": [[215, "expanding"]], "Common Subexpression Detection and Collection": [[215, "common-subexpression-detection-and-collection"]], "Formal Power Series": [[216, "formal-power-series"]], "Rational Algorithm": [[216, "rational-algorithm"]], "Hypergeometric Algorithm": [[216, "hypergeometric-algorithm"]], "Fourier Series": [[217, "fourier-series"]], "Series": [[218, "series"]], "Limits of Sequences": [[219, "limits-of-sequences"]], "Sequences": [[220, "sequences"]], "Sequences Base": [[220, "sequences-base"]], "Elementary Sequences": [[220, "elementary-sequences"]], "Singleton Sequences": [[220, "singleton-sequences"]], "Compound Sequences": [[220, "compound-sequences"]], "Recursive Sequences": [[220, "recursive-sequences"]], "Series Expansions": [[221, "series-expansions"]], "Limits": [[221, "limits"], [281, "limits"]], "The Gruntz Algorithm": [[221, "the-gruntz-algorithm"]], "More Intuitive Series Expansion": [[221, "more-intuitive-series-expansion"]], "Order Terms": [[221, "order-terms"]], "Series Acceleration": [[221, "series-acceleration"]], "Residues": [[221, "residues"]], "Basic Sets": [[222, "module-sympy.sets.sets"]], "Elementary Sets": [[222, "elementary-sets"]], "Compound Sets": [[222, "compound-sets"]], "Singleton Sets": [[222, "singleton-sets"]], "Special Sets": [[222, "module-sympy.sets.fancysets"]], "Power sets": [[222, "module-sympy.sets.powerset"]], "Condition Sets": [[222, "module-sympy.sets.conditionset"]], "SetKind": [[222, "setkind"]], "Iteration over sets": [[222, "iteration-over-sets"]], "Hongguang Fu\u2019s Trigonometric Simplification": [[223, "hongguang-fu-s-trigonometric-simplification"]], "Rules": [[223, "rules"]], "Hypergeometric Expansion": [[224, "hypergeometric-expansion"]], "Hypergeometric Function Expansion Algorithm": [[224, "hypergeometric-function-expansion-algorithm"]], "Notation": [[224, "notation"]], "Incrementing and decrementing indices": [[224, "incrementing-and-decrementing-indices"]], "Reduction of Order": [[224, "reduction-of-order"]], "Moving Around in the Parameter Space": [[224, "moving-around-in-the-parameter-space"]], "Applying the Operators": [[224, "applying-the-operators"]], "Loose Ends": [[224, "loose-ends"]], "Meijer G-Functions of Finite Confluence": [[224, "meijer-g-functions-of-finite-confluence"]], "Extending The Hypergeometric Tables": [[224, "extending-the-hypergeometric-tables"]], "Implemented Hypergeometric Formulae": [[224, "implemented-hypergeometric-formulae"]], "Simplify": [[225, "simplify"], [226, "simplify"]], "Diophantine": [[227, "diophantine"]], "Diophantine equations": [[227, "diophantine-equations"]], "Module structure": [[227, "module-structure"]], "Tutorial": [[227, "tutorial"]], "User Functions": [[227, "user-functions"], [230, "user-functions"], [231, "user-functions"]], "Internal Functions": [[227, "internal-functions"]], "Internal Classes": [[227, "internal-classes"]], "Solvers": [[228, "solvers"], [232, "module-sympy.solvers"], [292, "solvers"]], "Inequality Solvers": [[229, "inequality-solvers"]], "ODE": [[230, "ode"]], "Hint Functions": [[230, "hint-functions"]], "Lie heuristics": [[230, "lie-heuristics"]], "Rational Riccati Solver": [[230, "rational-riccati-solver"]], "System of ODEs": [[230, "system-of-odes"]], "Information on the ode module": [[230, "module-sympy.solvers.ode.ode"]], "PDE": [[231, "pde"]], "Hint Methods": [[231, "hint-methods"]], "Information on the pde module": [[231, "module-sympy.solvers.pde"]], "Algebraic equations": [[232, "algebraic-equations"]], "Ordinary Differential equations (ODEs)": [[232, "ordinary-differential-equations-odes"], [233, "ordinary-differential-equations-odes"]], "Partial Differential Equations (PDEs)": [[232, "partial-differential-equations-pdes"], [233, "partial-differential-equations-pdes"]], "Deutils (Utilities for solving ODE\u2019s and PDE\u2019s)": [[232, "deutils-utilities-for-solving-ode-s-and-pde-s"]], "Recurrence Equations": [[232, "module-sympy.solvers.recurr"]], "Systems of Polynomial Equations": [[232, "systems-of-polynomial-equations"]], "Diophantine Equations (DEs)": [[232, "diophantine-equations-des"], [233, "diophantine-equations-des"]], "Inequalities": [[232, "inequalities"], [233, "inequalities"]], "Solveset": [[233, "solveset"]], "What\u2019s wrong with solve():": [[233, "what-s-wrong-with-solve"]], "Why Solveset?": [[233, "why-solveset"]], "Why do we use Sets as an output type?": [[233, "why-do-we-use-sets-as-an-output-type"]], "Input API of solveset": [[233, "input-api-of-solveset"]], "What is this domain argument about?": [[233, "what-is-this-domain-argument-about"]], "What are the general methods employed by solveset to solve an equation?": [[233, "what-are-the-general-methods-employed-by-solveset-to-solve-an-equation"]], "How do we manipulate and return an infinite solution?": [[233, "how-do-we-manipulate-and-return-an-infinite-solution"]], "How does solveset ensure that it is not returning any wrong solution?": [[233, "how-does-solveset-ensure-that-it-is-not-returning-any-wrong-solution"]], "Search based solver and step-by-step solution": [[233, "search-based-solver-and-step-by-step-solution"]], "How do we deal with cases where only some of the solutions are known?": [[233, "how-do-we-deal-with-cases-where-only-some-of-the-solutions-are-known"]], "What is the plan for solve and solveset?": [[233, "what-is-the-plan-for-solve-and-solveset"]], "How are symbolic parameters handled in solveset?": [[233, "how-are-symbolic-parameters-handled-in-solveset"]], "Solveset Module Reference": [[233, "solveset-module-reference"]], "transolve": [[233, "transolve"]], "Stats": [[234, "module-sympy.stats"]], "Random Variable Types": [[234, "random-variable-types"]], "Finite Types": [[234, "finite-types"]], "Discrete Types": [[234, "discrete-types"]], "Continuous Types": [[234, "continuous-types"]], "Joint Types": [[234, "joint-types"]], "Stochastic Processes": [[234, "stochastic-processes"]], "Matrix Distributions": [[234, "matrix-distributions"]], "Compound Distribution": [[234, "compound-distribution"]], "Interface": [[234, "interface"]], "N-dim array": [[235, "module-sympy.tensor.array"]], "Products and contractions": [[235, "products-and-contractions"]], "Diagonal operator": [[235, "diagonal-operator"]], "Derivatives by array": [[235, "derivatives-by-array"]], "Classes": [[235, "classes"]], "N-dim array expressions": [[236, "module-sympy.tensor.array.expressions"]], "Constructing array expressions from index-explicit forms": [[236, "constructing-array-expressions-from-index-explicit-forms"]], "Compatibility with matrices": [[236, "compatibility-with-matrices"]], "Tensor": [[237, "module-sympy.tensor"], [240, "module-sympy.tensor.tensor"]], "Methods": [[238, "module-sympy.tensor.index_methods"]], "Indexed Objects": [[239, "module-sympy.tensor.indexed"]], "Tensor Operators": [[241, "module-sympy.tensor.toperators"]], "Testing": [[242, "testing"]], "pytest": [[243, "module-sympy.testing.pytest"]], "Randomised Testing": [[244, "module-sympy.testing.randtest"]], "Run Tests": [[245, "module-sympy.testing.runtests"]], "Autowrap Module": [[246, "autowrap-module"]], "Implementation details": [[246, "implementation-details"]], "Codegen": [[247, "codegen"]], "Implementation Details": [[247, "implementation-details"]], "Routine": [[247, "routine"]], "Decorator": [[248, "module-sympy.utilities.decorator"]], "Enumerative": [[249, "module-sympy.utilities.enumerative"]], "Exceptions and Warnings": [[250, "module-sympy.utilities.exceptions"]], "Iterables": [[252, "module-sympy.utilities.iterables"]], "variations": [[252, "variations"]], "partitions": [[252, "partitions"]], "Memoization": [[254, "module-sympy.utilities.memoization"]], "PKGDATA": [[256, "module-sympy.utilities.pkgdata"]], "Source Code Inspection": [[257, "module-sympy.utilities.source"]], "Timing Utilities": [[258, "module-sympy.utilities.timeutils"]], "Essential Classes in sympy.vector (docstrings)": [[259, "essential-classes-in-sympy-vector-docstrings"]], "Vector API": [[260, "vector-api"]], "Orienter classes (docstrings)": [[261, "orienter-classes-docstrings"]], "Essential Functions in sympy.vector (docstrings)": [[262, "essential-functions-in-sympy-vector-docstrings"]], "Basic Implementation details": [[263, "basic-implementation-details"]], "Coordinate Systems and Vectors": [[263, "coordinate-systems-and-vectors"]], "SymPy operations on Vectors": [[263, "sympy-operations-on-vectors"]], "Dyadics": [[263, "dyadics"]], "More about Coordinate Systems": [[264, "more-about-coordinate-systems"]], "Locating new systems": [[264, "locating-new-systems"]], "Orienting new systems": [[264, "orienting-new-systems"]], "Using a method of CoordSys3D directly": [[264, "using-a-method-of-coordsys3d-directly"]], "Using Orienter(s) and the orient_new method": [[264, "using-orienter-s-and-the-orient-new-method"]], "Orienting AND Locating new systems": [[264, "orienting-and-locating-new-systems"]], "Transforming new system": [[264, "transforming-new-system"]], "Expression of quantities in different coordinate systems": [[264, "expression-of-quantities-in-different-coordinate-systems"]], "Vectors and Dyadics": [[264, "vectors-and-dyadics"]], "Coordinate Variables": [[264, "coordinate-variables"]], "Other expression-dependent methods": [[264, "other-expression-dependent-methods"]], "General examples of usage": [[265, "general-examples-of-usage"]], "Quadrilateral problem": [[265, "quadrilateral-problem"]], "The Problem": [[265, "the-problem"], [265, "id1"]], "Solution": [[265, "solution"], [265, "id2"]], "Third product rule for Del operator": [[265, "third-product-rule-for-del-operator"]], "See": [[265, "see"]], "Implementation in sympy.vector": [[266, "implementation-in-sympy-vector"]], "Scalar and vector fields": [[266, "scalar-and-vector-fields"]], "The Del operator": [[266, "the-del-operator"]], "Field operators and related functions": [[266, "field-operators-and-related-functions"]], "Directional Derivative": [[266, "directional-derivative"]], "Field operator in orthogonal curvilinear coordinate system": [[266, "field-operator-in-orthogonal-curvilinear-coordinate-system"]], "References for Vector": [[267, "references-for-vector"]], "Coordinate Systems": [[268, "coordinate-systems"]], "Applications of Vector Integrals": [[269, "applications-of-vector-integrals"]], "Calculation of Perimeter, Surface Area, and Volume": [[269, "calculation-of-perimeter-surface-area-and-volume"]], "Calculation of mass of a body": [[269, "calculation-of-mass-of-a-body"]], "Calculation of Flux": [[269, "calculation-of-flux"]], "Verifying Stoke\u2019s Theorem": [[269, "verifying-stoke-s-theorem"]], "Verifying Divergence Theorem": [[269, "verifying-divergence-theorem"]], "Physics": [[270, "physics"], [276, "module-sympy.physics"]], "Topics": [[270, "topics"], [277, "topics"]], "Introductory Tutorial": [[279, "introductory-tutorial"], [284, "introductory-tutorial"]], "Basic Operations": [[280, "basic-operations"], [287, "basic-operations"]], "Quick Tip": [[280, null], [281, null], [283, null], [286, null], [287, null]], "Converting Strings to SymPy Expressions": [[280, "converting-strings-to-sympy-expressions"]], "Derivatives": [[281, "derivatives"]], "Series Expansion": [[281, "series-expansion"]], "Finite differences": [[281, "finite-differences"]], "SymPy Features": [[282, "sympy-features"]], "Equals signs": [[283, "equals-signs"]], "Two Final Notes: ^ and /": [[283, "two-final-notes-and"]], "Further Reading": [[283, "further-reading"]], "What is Symbolic Computation?": [[285, "what-is-symbolic-computation"]], "A More Interesting Example": [[285, "a-more-interesting-example"]], "The Power of Symbolic Computation": [[285, "the-power-of-symbolic-computation"]], "Why SymPy?": [[285, "why-sympy"]], "Advanced Expression Manipulation": [[286, "advanced-expression-manipulation"]], "Understanding Expression Trees": [[286, "understanding-expression-trees"]], "Recursing through an Expression Tree": [[286, "recursing-through-an-expression-tree"]], "args": [[286, "args"]], "Key Invariant": [[286, null]], "Walking the Tree": [[286, "walking-the-tree"]], "Prevent expression evaluation": [[286, "prevent-expression-evaluation"]], "Shape": [[287, "shape"]], "Accessing Rows and Columns": [[287, "accessing-rows-and-columns"]], "Deleting and Inserting Rows and Columns": [[287, "deleting-and-inserting-rows-and-columns"]], "Basic Methods": [[287, "basic-methods"]], "Matrix Constructors": [[287, "matrix-constructors"]], "Advanced Methods": [[287, "advanced-methods"]], "Determinant": [[287, "determinant"]], "RREF": [[287, "rref"]], "Nullspace": [[287, "nullspace"]], "Columnspace": [[287, "columnspace"]], "Eigenvalues, Eigenvectors, and Diagonalization": [[287, "eigenvalues-eigenvectors-and-diagonalization"]], "Possible Issues": [[287, "possible-issues"]], "Zero Testing": [[287, "zero-testing"]], "What\u2019s Next": [[288, "whats-next"]], "Preliminaries": [[289, "preliminaries"]], "Exercises": [[289, "exercises"]], "Printers": [[290, "printers"]], "Setting up Pretty Printing": [[290, "setting-up-pretty-printing"]], "Printing Functions": [[290, "printing-functions"]], "str": [[290, "str"]], "ASCII Pretty Printer": [[290, "ascii-pretty-printer"]], "Unicode Pretty Printer": [[290, "unicode-pretty-printer"]], "\\mathrm{\\LaTeX}": [[290, "mathrm-latex"]], "MathML": [[290, "mathml"]], "Dot": [[290, "dot"]], "Simplification": [[291, "simplification"]], "simplify": [[291, "simplify"]], "Polynomial/Rational Function Simplification": [[291, "polynomial-rational-function-simplification"]], "expand": [[291, "expand"]], "factor": [[291, "factor"]], "collect": [[291, "collect"]], "cancel": [[291, "cancel"]], "apart": [[291, "apart"]], "Trigonometric Simplification": [[291, "trigonometric-simplification"]], "trigsimp": [[291, "trigsimp"]], "expand_trig": [[291, "expand-trig"]], "Powers": [[291, "powers"]], "powsimp": [[291, "powsimp"]], "expand_power_exp / expand_power_base": [[291, "expand-power-exp-expand-power-base"]], "powdenest": [[291, "powdenest"]], "Exponentials and logarithms": [[291, "exponentials-and-logarithms"]], "expand_log": [[291, "expand-log"]], "logcombine": [[291, "logcombine"]], "Special Functions": [[291, "special-functions"]], "rewrite": [[291, "rewrite"]], "expand_func": [[291, "expand-func"]], "hyperexpand": [[291, "hyperexpand"]], "combsimp": [[291, "combsimp"]], "gammasimp": [[291, "gammasimp"]], "Example: Continued Fractions": [[291, "example-continued-fractions"]], "A Note about Equations": [[292, "a-note-about-equations"]], "Solving Equations Algebraically": [[292, "solving-equations-algebraically"]], "Solving Differential Equations": [[292, "solving-differential-equations"]]}, "indexentries": {"antiderivative": [[14, "term-Antiderivative"]], "assumptions": [[14, "term-Assumptions"]], "atom": [[14, "term-Atom"]], "automatic simplification": [[14, "term-Automatic-Simplification"]], "basic": [[14, "term-Basic"]], "boolean": [[14, "term-Boolean"]], "bound symbols": [[14, "term-Bound-symbols"]], "canonical form": [[14, "term-Canonical-Form"]], "canonicalize": [[14, "term-Canonicalize"]], "code generation": [[14, "term-Code-Generation"]], "core": [[14, "term-Core"]], "dummy": [[14, "term-Dummy"]], "equation": [[14, "term-Equation"]], "evaluate": [[14, "term-Evaluate"]], "expr": [[14, "term-Expr"]], "expression": [[14, "term-Expression"]], "expression tree": [[14, "term-Expression-Tree"]], "free symbols": [[14, "term-Free-symbols"]], "function": [[14, "term-Function"]], "function (class)": [[14, "term-Function-class"]], "immutable": [[14, "term-Immutable"]], "interactive": [[14, "term-Interactive"]], "kind": [[14, "term-Kind"]], "matrix": [[14, "term-Matrix"]], "number": [[14, "term-Number"]], "numeric": [[14, "term-Numeric"]], "polys": [[14, "term-Polys"]], "printing": [[14, "term-Printing"]], "relational": [[14, "term-Relational"]], "s": [[14, "term-S"]], "simplification": [[14, "term-Simplification"]], "solve": [[14, "term-Solve"]], "solvers": [[14, "term-Solvers"]], "structural equality": [[14, "term-Structural-Equality"]], "subexpression": [[14, "term-Subexpression"]], "substitution": [[14, "term-Substitution"]], "symbol": [[14, "term-Symbol"]], "symbolic": [[14, "term-Symbolic"]], "three-valued logic": [[14, "term-Three-valued-logic"]], "undefined function": [[14, "term-Undefined-Function"]], "unevaluated": [[14, "term-Unevaluated"]], "_eval_*": [[14, "term-_eval_"]], "args": [[14, "term-args"]], "evalf": [[14, "term-evalf"]], "func": [[14, "term-func"]], "is_*": [[14, "term-is_"]], "isympy": [[14, "term-isympy"]], "lambdify()": [[14, "term-lambdify"]], "lamda": [[14, "term-lamda"]], "mpmath": [[14, "term-mpmath"]], "oo": [[14, "term-oo"]], "sympify()": [[14, "term-sympify"]], "zoo": [[14, "term-zoo"]], "module": [[15, "module-sympy.simplify.simplify"], [35, "module-sympy"], [37, "module-sympy.abc"], [38, "module-sympy.algebras"], [39, "module-sympy.assumptions.ask"], [40, "module-sympy.assumptions.assume"], [41, "module-sympy.assumptions"], [42, "module-sympy.assumptions.predicates"], [43, "module-sympy.assumptions.refine"], [44, "module-sympy.calculus"], [44, "module-sympy.calculus.euler"], [44, "module-sympy.calculus.finite_diff"], [44, "module-sympy.calculus.singularities"], [44, "module-sympy.calculus.util"], [45, "module-sympy.categories"], [45, "module-sympy.categories.diagram_drawing"], [46, "module-sympy.codegen.algorithms"], [46, "module-sympy.codegen.approximations"], [46, "module-sympy.codegen.ast"], [46, "module-sympy.codegen.cfunctions"], [46, "module-sympy.codegen.cnodes"], [46, "module-sympy.codegen.cutils"], [46, "module-sympy.codegen.cxxnodes"], [46, "module-sympy.codegen.fnodes"], [46, "module-sympy.codegen.futils"], [46, "module-sympy.codegen.matrix_nodes"], [46, "module-sympy.codegen.pyutils"], [46, "module-sympy.codegen.rewriting"], [48, "module-sympy.combinatorics.galois"], [49, "module-sympy.combinatorics.graycode"], [50, "module-sympy.combinatorics.group_constructs"], [51, "module-sympy.combinatorics.group_numbers"], [53, "module-sympy.combinatorics.named_groups"], [54, "module-sympy.combinatorics.partitions"], [56, "module-sympy.combinatorics.perm_groups"], [57, "module-sympy.combinatorics.generators"], [57, "module-sympy.combinatorics.permutations"], [58, "module-sympy.combinatorics.polyhedron"], [59, "module-sympy.combinatorics.prufer"], [60, "module-sympy.combinatorics.subsets"], [61, "module-sympy.combinatorics.tensor_can"], [62, "module-sympy.combinatorics.testutil"], [63, "module-sympy.combinatorics.util"], [65, "module-sympy.core.add"], [65, "module-sympy.core.assumptions"], [65, "module-sympy.core.basic"], [65, "module-sympy.core.cache"], [65, "module-sympy.core.containers"], [65, "module-sympy.core.evalf"], [65, "module-sympy.core.expr"], [65, "module-sympy.core.exprtools"], [65, "module-sympy.core.function"], [65, "module-sympy.core.kind"], [65, "module-sympy.core.mod"], [65, "module-sympy.core.mul"], [65, "module-sympy.core.multidimensional"], [65, "module-sympy.core.numbers"], [65, "module-sympy.core.power"], [65, "module-sympy.core.random"], [65, "module-sympy.core.relational"], [65, "module-sympy.core.singleton"], [65, "module-sympy.core.symbol"], [65, "module-sympy.core.sympify"], [65, "module-sympy.core.traversal"], [66, "module-sympy.crypto.crypto"], [67, "module-sympy.diffgeom"], [68, "module-sympy.discrete"], [68, "module-sympy.discrete.convolutions"], [68, "module-sympy.discrete.transforms"], [72, "module-sympy.functions"], [73, "module-sympy.functions.special.bessel"], [73, "module-sympy.functions.special.beta_functions"], [73, "module-sympy.functions.special.elliptic_integrals"], [73, "module-sympy.functions.special.error_functions"], [73, "module-sympy.functions.special.gamma_functions"], [73, "module-sympy.functions.special.mathieu_functions"], [73, "module-sympy.functions.special.polynomials"], [73, "module-sympy.functions.special.singularity_functions"], [73, "module-sympy.functions.special.zeta_functions"], [74, "module-sympy.geometry.curve"], [75, "module-sympy.geometry.ellipse"], [76, "module-sympy.geometry.entity"], [78, "module-sympy.geometry.line"], [79, "module-sympy.geometry.plane"], [80, "module-sympy.geometry.point"], [81, "module-sympy.geometry.polygon"], [82, "module-sympy.geometry.util"], [85, "module-sympy.holonomic"], [90, "module-sympy.integrals.meijerint"], [90, "module-sympy.integrals.meijerint_doc"], [92, "module-sympy.integrals"], [92, "module-sympy.integrals.intpoly"], [92, "module-sympy.integrals.transforms"], [93, "module-sympy.interactive"], [93, "module-sympy.interactive.printing"], [93, "module-sympy.interactive.session"], [94, "module-sympy.liealgebras"], [95, "module-sympy.logic"], [95, "module-sympy.logic.inference"], [96, "module-sympy.matrices.common"], [98, "module-sympy.matrices.expressions"], [98, "module-sympy.matrices.expressions.blockmatrix"], [99, "module-sympy.matrices.immutable"], [100, "module-sympy.matrices"], [101, "module-sympy.matrices.matrices"], [103, "module-sympy.matrices.sparse"], [104, "module-sympy.matrices.sparsetools"], [105, "module-sympy.ntheory.bbp_pi"], [105, "module-sympy.ntheory.continued_fraction"], [105, "module-sympy.ntheory.digits"], [105, "module-sympy.ntheory.ecm"], [105, "module-sympy.ntheory.egyptian_fraction"], [105, "module-sympy.ntheory.factor_"], [105, "module-sympy.ntheory.generate"], [105, "module-sympy.ntheory.modular"], [105, "module-sympy.ntheory.multinomial"], [105, "module-sympy.ntheory.partitions_"], [105, "module-sympy.ntheory.primetest"], [105, "module-sympy.ntheory.qs"], [105, "module-sympy.ntheory.residue_ntheory"], [107, "module-sympy.parsing"], [107, "module-sympy.parsing.sym_expr"], [108, "module-sympy.physics.continuum_mechanics.beam"], [111, "module-sympy.physics.continuum_mechanics.truss"], [114, "module-sympy.physics.control"], [115, "module-sympy.physics.control.lti"], [116, "module-sympy.physics.hep.gamma_matrices"], [117, "module-sympy.physics.hydrogen"], [118, "module-sympy.physics.matrices"], [120, "module-sympy.physics.mechanics.body"], [123, "module-sympy.physics.mechanics.joint"], [123, "module-sympy.physics.mechanics.jointsmethod"], [124, "module-sympy.physics.mechanics.kane"], [124, "module-sympy.physics.mechanics.lagrange"], [125, "module-sympy.physics.mechanics.linearize"], [128, "module-sympy.physics.mechanics.system"], [139, "module-sympy.physics.mechanics"], [148, "module-sympy.physics.optics.gaussopt"], [150, "module-sympy.physics.optics.medium"], [151, "module-sympy.physics.optics.polarization"], [152, "module-sympy.physics.optics.utils"], [153, "module-sympy.physics.optics.waves"], [154, "module-sympy.physics.paulialgebra"], [155, "module-sympy.physics.qho_1d"], [156, "module-sympy.physics.quantum.anticommutator"], [157, "module-sympy.physics.quantum.cartesian"], [158, "module-sympy.physics.quantum.cg"], [159, "module-sympy.physics.quantum.circuitplot"], [160, "module-sympy.physics.quantum.commutator"], [161, "module-sympy.physics.quantum.constants"], [162, "module-sympy.physics.quantum.dagger"], [163, "module-sympy.physics.quantum.gate"], [164, "module-sympy.physics.quantum.grover"], [165, "module-sympy.physics.quantum.hilbert"], [167, "module-sympy.physics.quantum.innerproduct"], [168, "module-sympy.physics.quantum.operator"], [169, "module-sympy.physics.quantum.operatorset"], [170, "module-sympy.physics.quantum.piab"], [171, "module-sympy.physics.quantum.qapply"], [172, "module-sympy.physics.quantum.qft"], [173, "module-sympy.physics.quantum.qubit"], [174, "module-sympy.physics.quantum.represent"], [175, "module-sympy.physics.quantum.shor"], [176, "module-sympy.physics.quantum.spin"], [177, "module-sympy.physics.quantum.state"], [178, "module-sympy.physics.quantum.tensorproduct"], [179, "module-sympy.physics.secondquant"], [180, "module-sympy.physics.sho"], [181, "module-sympy.physics.units.dimensions"], [185, "module-sympy.physics.units.prefixes"], [186, "module-sympy.physics.units.quantities"], [186, "module-sympy.physics.units.util"], [187, "module-sympy.physics.units.unitsystem"], [193, "module-sympy.physics.vector.functions"], [193, "module-sympy.physics.vector.point"], [196, "module-sympy.physics.vector"], [199, "module-sympy.physics.wigner"], [200, "module-sympy.plotting.plot"], [200, "module-sympy.plotting.pygletplot"], [207, "module-sympy.polys.polyconfig"], [207, "module-sympy.polys.polyoptions"], [209, "module-sympy.polys.numberfields.modules"], [209, "module-sympy.polys.numberfields.subfield"], [210, "module-sympy.polys"], [212, "module-sympy.polys.solvers"], [214, "module-sympy.printing.aesaracode"], [214, "module-sympy.printing.c"], [214, "module-sympy.printing.codeprinter"], [214, "module-sympy.printing.conventions"], [214, "module-sympy.printing.cxx"], [214, "module-sympy.printing.fortran"], [214, "module-sympy.printing.gtk"], [214, "module-sympy.printing.jscode"], [214, "module-sympy.printing.julia"], [214, "module-sympy.printing.lambdarepr"], [214, "module-sympy.printing.latex"], [214, "module-sympy.printing.maple"], [214, "module-sympy.printing.mathematica"], [214, "module-sympy.printing.mathml"], [214, "module-sympy.printing.octave"], [214, "module-sympy.printing.precedence"], [214, "module-sympy.printing.pretty"], [214, "module-sympy.printing.pretty.pretty"], [214, "module-sympy.printing.pretty.pretty_symbology"], [214, "module-sympy.printing.pretty.stringpict"], [214, "module-sympy.printing.preview"], [214, "module-sympy.printing.printer"], [214, "module-sympy.printing.pycode"], [214, "module-sympy.printing.python"], [214, "module-sympy.printing.rcode"], [214, "module-sympy.printing.repr"], [214, "module-sympy.printing.rust"], [214, "module-sympy.printing.smtlib"], [214, "module-sympy.printing.str"], [214, "module-sympy.printing.tree"], [222, "module-sympy.sets.conditionset"], [222, "module-sympy.sets.fancysets"], [222, "module-sympy.sets.powerset"], [222, "module-sympy.sets.sets"], [224, "module-sympy.simplify.hyperexpand_doc"], [226, "module-sympy.simplify.combsimp"], [226, "module-sympy.simplify.cse_main"], [226, "module-sympy.simplify.epathtools"], [226, "module-sympy.simplify.hyperexpand"], [226, "module-sympy.simplify.powsimp"], [226, "module-sympy.simplify.radsimp"], [226, "module-sympy.simplify.ratsimp"], [226, "module-sympy.simplify.sqrtdenest"], [226, "module-sympy.simplify.trigsimp"], [229, "module-sympy.solvers.inequalities"], [230, "module-sympy.solvers.ode"], [230, "module-sympy.solvers.ode.ode"], [231, "module-sympy.solvers.pde"], [232, "module-sympy.solvers"], [232, "module-sympy.solvers.recurr"], [233, "module-sympy.solvers.solveset"], [234, "module-sympy.stats"], [234, "module-sympy.stats.crv"], [234, "module-sympy.stats.crv_types"], [234, "module-sympy.stats.frv"], [234, "module-sympy.stats.frv_types"], [234, "module-sympy.stats.rv"], [235, "module-sympy.tensor.array"], [236, "module-sympy.tensor.array.expressions"], [237, "module-sympy.tensor"], [238, "module-sympy.tensor.index_methods"], [239, "module-sympy.tensor.indexed"], [240, "module-sympy.tensor.tensor"], [241, "module-sympy.tensor.toperators"], [242, "module-sympy.testing"], [243, "module-sympy.testing.pytest"], [244, "module-sympy.testing.randtest"], [245, "module-sympy.testing.runtests"], [246, "module-sympy.utilities.autowrap"], [247, "module-sympy.utilities.codegen"], [248, "module-sympy.utilities.decorator"], [249, "module-sympy.utilities.enumerative"], [250, "module-sympy.utilities.exceptions"], [251, "module-sympy.utilities"], [252, "module-sympy.utilities.iterables"], [253, "module-sympy.utilities.lambdify"], [254, "module-sympy.utilities.memoization"], [255, "module-sympy.utilities.misc"], [256, "module-sympy.utilities.pkgdata"], [257, "module-sympy.utilities.source"], [258, "module-sympy.utilities.timeutils"], [267, "module-sympy.vector"], [276, "module-sympy.physics"]], "sympy.simplify.simplify": [[15, "module-sympy.simplify.simplify"]], "sympy": [[35, "module-sympy"]], "sympy.abc": [[37, "module-sympy.abc"]], "quaternion (class in sympy.algebras)": [[38, "sympy.algebras.Quaternion"]], "add() (sympy.algebras.quaternion method)": [[38, "sympy.algebras.Quaternion.add"]], "angle() (sympy.algebras.quaternion method)": [[38, "sympy.algebras.Quaternion.angle"]], "arc_coplanar() (sympy.algebras.quaternion method)": [[38, "sympy.algebras.Quaternion.arc_coplanar"]], "axis() (sympy.algebras.quaternion method)": [[38, "sympy.algebras.Quaternion.axis"]], "exp() (sympy.algebras.quaternion method)": [[38, "sympy.algebras.Quaternion.exp"]], "from_matrix() (sympy.algebras.quaternion class method)": [[38, "sympy.algebras.Quaternion.from_Matrix"]], "from_axis_angle() (sympy.algebras.quaternion class method)": [[38, "sympy.algebras.Quaternion.from_axis_angle"]], "from_euler() (sympy.algebras.quaternion class method)": [[38, "sympy.algebras.Quaternion.from_euler"]], "from_rotation_matrix() (sympy.algebras.quaternion class method)": [[38, "sympy.algebras.Quaternion.from_rotation_matrix"]], "index_vector() (sympy.algebras.quaternion method)": [[38, "sympy.algebras.Quaternion.index_vector"]], "integrate() (sympy.algebras.quaternion method)": [[38, "sympy.algebras.Quaternion.integrate"]], "inverse() (sympy.algebras.quaternion method)": [[38, "sympy.algebras.Quaternion.inverse"]], "is_pure() (sympy.algebras.quaternion method)": [[38, "sympy.algebras.Quaternion.is_pure"]], "is_zero_quaternion() (sympy.algebras.quaternion method)": [[38, "sympy.algebras.Quaternion.is_zero_quaternion"]], "mensor() (sympy.algebras.quaternion method)": [[38, "sympy.algebras.Quaternion.mensor"]], "mul() (sympy.algebras.quaternion method)": [[38, "sympy.algebras.Quaternion.mul"]], "norm() (sympy.algebras.quaternion method)": [[38, "sympy.algebras.Quaternion.norm"]], "normalize() (sympy.algebras.quaternion method)": [[38, "sympy.algebras.Quaternion.normalize"]], "orthogonal() (sympy.algebras.quaternion method)": [[38, "sympy.algebras.Quaternion.orthogonal"]], "parallel() (sympy.algebras.quaternion method)": [[38, "sympy.algebras.Quaternion.parallel"]], "pow() (sympy.algebras.quaternion method)": [[38, "sympy.algebras.Quaternion.pow"]], "pow_cos_sin() (sympy.algebras.quaternion method)": [[38, "sympy.algebras.Quaternion.pow_cos_sin"]], "product_matrix_left (sympy.algebras.quaternion property)": [[38, "sympy.algebras.Quaternion.product_matrix_left"]], "product_matrix_right (sympy.algebras.quaternion property)": [[38, "sympy.algebras.Quaternion.product_matrix_right"]], "rotate_point() (sympy.algebras.quaternion static method)": [[38, "sympy.algebras.Quaternion.rotate_point"]], "scalar_part() (sympy.algebras.quaternion method)": [[38, "sympy.algebras.Quaternion.scalar_part"]], "set_norm() (sympy.algebras.quaternion method)": [[38, "sympy.algebras.Quaternion.set_norm"]], "sympy.algebras": [[38, "module-sympy.algebras"]], "to_matrix() (sympy.algebras.quaternion method)": [[38, "sympy.algebras.Quaternion.to_Matrix"]], "to_axis_angle() (sympy.algebras.quaternion method)": [[38, "sympy.algebras.Quaternion.to_axis_angle"]], "to_euler() (sympy.algebras.quaternion method)": [[38, "sympy.algebras.Quaternion.to_euler"]], "to_rotation_matrix() (sympy.algebras.quaternion method)": [[38, "sympy.algebras.Quaternion.to_rotation_matrix"]], "vector_coplanar() (sympy.algebras.quaternion class method)": [[38, "sympy.algebras.Quaternion.vector_coplanar"]], "vector_part() (sympy.algebras.quaternion method)": [[38, "sympy.algebras.Quaternion.vector_part"]], "assumptionkeys (class in sympy.assumptions.ask)": [[39, "sympy.assumptions.ask.AssumptionKeys"]], "ask() (in module sympy.assumptions.ask)": [[39, "sympy.assumptions.ask.ask"]], "register_handler() (in module sympy.assumptions.ask)": [[39, "sympy.assumptions.ask.register_handler"]], "remove_handler() (in module sympy.assumptions.ask)": [[39, "sympy.assumptions.ask.remove_handler"]], "sympy.assumptions.ask": [[39, "module-sympy.assumptions.ask"]], "appliedpredicate (class in sympy.assumptions.assume)": [[40, "sympy.assumptions.assume.AppliedPredicate"]], "assumptionscontext (class in sympy.assumptions.assume)": [[40, "sympy.assumptions.assume.AssumptionsContext"]], "predicate (class in sympy.assumptions.assume)": [[40, "sympy.assumptions.assume.Predicate"]], "undefinedpredicate (class in sympy.assumptions.assume)": [[40, "sympy.assumptions.assume.UndefinedPredicate"]], "add() (sympy.assumptions.assume.assumptionscontext method)": [[40, "sympy.assumptions.assume.AssumptionsContext.add"]], "arg (sympy.assumptions.assume.appliedpredicate property)": [[40, "sympy.assumptions.assume.AppliedPredicate.arg"]], "arguments (sympy.assumptions.assume.appliedpredicate property)": [[40, "sympy.assumptions.assume.AppliedPredicate.arguments"]], "assuming() (in module sympy.assumptions.assume)": [[40, "sympy.assumptions.assume.assuming"]], "eval() (sympy.assumptions.assume.predicate method)": [[40, "sympy.assumptions.assume.Predicate.eval"]], "function (sympy.assumptions.assume.appliedpredicate property)": [[40, "sympy.assumptions.assume.AppliedPredicate.function"]], "handler (sympy.assumptions.assume.predicate attribute)": [[40, "sympy.assumptions.assume.Predicate.handler"]], "register() (sympy.assumptions.assume.predicate class method)": [[40, "sympy.assumptions.assume.Predicate.register"]], "register_many() (sympy.assumptions.assume.predicate class method)": [[40, "sympy.assumptions.assume.Predicate.register_many"]], "sympy.assumptions.assume": [[40, "module-sympy.assumptions.assume"]], "sympy.assumptions": [[41, "module-sympy.assumptions"]], "algebraichandler (sympy.assumptions.predicates.sets.algebraicpredicate attribute)": [[42, "sympy.assumptions.predicates.sets.AlgebraicPredicate.AlgebraicHandler"]], "algebraicpredicate (class in sympy.assumptions.predicates.sets)": [[42, "sympy.assumptions.predicates.sets.AlgebraicPredicate"]], "antihermitianpredicate (class in sympy.assumptions.predicates.sets)": [[42, "sympy.assumptions.predicates.sets.AntihermitianPredicate"]], "commutativepredicate (class in sympy.assumptions.predicates.common)": [[42, "sympy.assumptions.predicates.common.CommutativePredicate"]], "complexelementspredicate (class in sympy.assumptions.predicates.matrices)": [[42, "sympy.assumptions.predicates.matrices.ComplexElementsPredicate"]], "complexpredicate (class in sympy.assumptions.predicates.sets)": [[42, "sympy.assumptions.predicates.sets.ComplexPredicate"]], "compositepredicate (class in sympy.assumptions.predicates.ntheory)": [[42, "sympy.assumptions.predicates.ntheory.CompositePredicate"]], "diagonalpredicate (class in sympy.assumptions.predicates.matrices)": [[42, "sympy.assumptions.predicates.matrices.DiagonalPredicate"]], "evenpredicate (class in sympy.assumptions.predicates.ntheory)": [[42, "sympy.assumptions.predicates.ntheory.EvenPredicate"]], "extendedrealpredicate (class in sympy.assumptions.predicates.sets)": [[42, "sympy.assumptions.predicates.sets.ExtendedRealPredicate"]], "finitepredicate (class in sympy.assumptions.predicates.calculus)": [[42, "sympy.assumptions.predicates.calculus.FinitePredicate"]], "fullrankpredicate (class in sympy.assumptions.predicates.matrices)": [[42, "sympy.assumptions.predicates.matrices.FullRankPredicate"]], "hermitianpredicate (class in sympy.assumptions.predicates.sets)": [[42, "sympy.assumptions.predicates.sets.HermitianPredicate"]], "imaginarypredicate (class in sympy.assumptions.predicates.sets)": [[42, "sympy.assumptions.predicates.sets.ImaginaryPredicate"]], "infinitepredicate (class in sympy.assumptions.predicates.calculus)": [[42, "sympy.assumptions.predicates.calculus.InfinitePredicate"]], "integerelementspredicate (class in sympy.assumptions.predicates.matrices)": [[42, "sympy.assumptions.predicates.matrices.IntegerElementsPredicate"]], "integerpredicate (class in sympy.assumptions.predicates.sets)": [[42, "sympy.assumptions.predicates.sets.IntegerPredicate"]], "invertiblepredicate (class in sympy.assumptions.predicates.matrices)": [[42, "sympy.assumptions.predicates.matrices.InvertiblePredicate"]], "irrationalpredicate (class in sympy.assumptions.predicates.sets)": [[42, "sympy.assumptions.predicates.sets.IrrationalPredicate"]], "istruepredicate (class in sympy.assumptions.predicates.common)": [[42, "sympy.assumptions.predicates.common.IsTruePredicate"]], "lowertriangularpredicate (class in sympy.assumptions.predicates.matrices)": [[42, "sympy.assumptions.predicates.matrices.LowerTriangularPredicate"]], "negativepredicate (class in sympy.assumptions.predicates.order)": [[42, "sympy.assumptions.predicates.order.NegativePredicate"]], "nonnegativepredicate (class in sympy.assumptions.predicates.order)": [[42, "sympy.assumptions.predicates.order.NonNegativePredicate"]], "nonpositivepredicate (class in sympy.assumptions.predicates.order)": [[42, "sympy.assumptions.predicates.order.NonPositivePredicate"]], "nonzeropredicate (class in sympy.assumptions.predicates.order)": [[42, "sympy.assumptions.predicates.order.NonZeroPredicate"]], "normalpredicate (class in sympy.assumptions.predicates.matrices)": [[42, "sympy.assumptions.predicates.matrices.NormalPredicate"]], "oddpredicate (class in sympy.assumptions.predicates.ntheory)": [[42, "sympy.assumptions.predicates.ntheory.OddPredicate"]], "orthogonalpredicate (class in sympy.assumptions.predicates.matrices)": [[42, "sympy.assumptions.predicates.matrices.OrthogonalPredicate"]], "positivedefinitepredicate (class in sympy.assumptions.predicates.matrices)": [[42, "sympy.assumptions.predicates.matrices.PositiveDefinitePredicate"]], "positivepredicate (class in sympy.assumptions.predicates.order)": [[42, "sympy.assumptions.predicates.order.PositivePredicate"]], "primepredicate (class in sympy.assumptions.predicates.ntheory)": [[42, "sympy.assumptions.predicates.ntheory.PrimePredicate"]], "rationalpredicate (class in sympy.assumptions.predicates.sets)": [[42, "sympy.assumptions.predicates.sets.RationalPredicate"]], "realelementspredicate (class in sympy.assumptions.predicates.matrices)": [[42, "sympy.assumptions.predicates.matrices.RealElementsPredicate"]], "realpredicate (class in sympy.assumptions.predicates.sets)": [[42, "sympy.assumptions.predicates.sets.RealPredicate"]], "singularpredicate (class in sympy.assumptions.predicates.matrices)": [[42, "sympy.assumptions.predicates.matrices.SingularPredicate"]], "squarepredicate (class in sympy.assumptions.predicates.matrices)": [[42, "sympy.assumptions.predicates.matrices.SquarePredicate"]], "symmetricpredicate (class in sympy.assumptions.predicates.matrices)": [[42, "sympy.assumptions.predicates.matrices.SymmetricPredicate"]], "transcendentalpredicate (class in sympy.assumptions.predicates.sets)": [[42, "sympy.assumptions.predicates.sets.TranscendentalPredicate"]], "triangularpredicate (class in sympy.assumptions.predicates.matrices)": [[42, "sympy.assumptions.predicates.matrices.TriangularPredicate"]], "unittriangularpredicate (class in sympy.assumptions.predicates.matrices)": [[42, "sympy.assumptions.predicates.matrices.UnitTriangularPredicate"]], "unitarypredicate (class in sympy.assumptions.predicates.matrices)": [[42, "sympy.assumptions.predicates.matrices.UnitaryPredicate"]], "uppertriangularpredicate (class in sympy.assumptions.predicates.matrices)": [[42, "sympy.assumptions.predicates.matrices.UpperTriangularPredicate"]], "zeropredicate (class in sympy.assumptions.predicates.order)": [[42, "sympy.assumptions.predicates.order.ZeroPredicate"]], "handler (sympy.assumptions.predicates.calculus.finitepredicate attribute)": [[42, "sympy.assumptions.predicates.calculus.FinitePredicate.handler"]], "handler (sympy.assumptions.predicates.calculus.infinitepredicate attribute)": [[42, "sympy.assumptions.predicates.calculus.InfinitePredicate.handler"]], "handler (sympy.assumptions.predicates.common.commutativepredicate attribute)": [[42, "sympy.assumptions.predicates.common.CommutativePredicate.handler"]], "handler (sympy.assumptions.predicates.common.istruepredicate attribute)": [[42, "sympy.assumptions.predicates.common.IsTruePredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.complexelementspredicate attribute)": [[42, "sympy.assumptions.predicates.matrices.ComplexElementsPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.diagonalpredicate attribute)": [[42, "sympy.assumptions.predicates.matrices.DiagonalPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.fullrankpredicate attribute)": [[42, "sympy.assumptions.predicates.matrices.FullRankPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.integerelementspredicate attribute)": [[42, "sympy.assumptions.predicates.matrices.IntegerElementsPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.invertiblepredicate attribute)": [[42, "sympy.assumptions.predicates.matrices.InvertiblePredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.lowertriangularpredicate attribute)": [[42, "sympy.assumptions.predicates.matrices.LowerTriangularPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.normalpredicate attribute)": [[42, "sympy.assumptions.predicates.matrices.NormalPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.orthogonalpredicate attribute)": [[42, "sympy.assumptions.predicates.matrices.OrthogonalPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.positivedefinitepredicate attribute)": [[42, "sympy.assumptions.predicates.matrices.PositiveDefinitePredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.realelementspredicate attribute)": [[42, "sympy.assumptions.predicates.matrices.RealElementsPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.singularpredicate attribute)": [[42, "sympy.assumptions.predicates.matrices.SingularPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.squarepredicate attribute)": [[42, "sympy.assumptions.predicates.matrices.SquarePredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.symmetricpredicate attribute)": [[42, "sympy.assumptions.predicates.matrices.SymmetricPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.triangularpredicate attribute)": [[42, "sympy.assumptions.predicates.matrices.TriangularPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.unittriangularpredicate attribute)": [[42, "sympy.assumptions.predicates.matrices.UnitTriangularPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.unitarypredicate attribute)": [[42, "sympy.assumptions.predicates.matrices.UnitaryPredicate.handler"]], "handler (sympy.assumptions.predicates.matrices.uppertriangularpredicate attribute)": [[42, "sympy.assumptions.predicates.matrices.UpperTriangularPredicate.handler"]], "handler (sympy.assumptions.predicates.ntheory.compositepredicate attribute)": [[42, "sympy.assumptions.predicates.ntheory.CompositePredicate.handler"]], "handler (sympy.assumptions.predicates.ntheory.evenpredicate attribute)": [[42, "sympy.assumptions.predicates.ntheory.EvenPredicate.handler"]], "handler (sympy.assumptions.predicates.ntheory.oddpredicate attribute)": [[42, "sympy.assumptions.predicates.ntheory.OddPredicate.handler"]], "handler (sympy.assumptions.predicates.ntheory.primepredicate attribute)": [[42, "sympy.assumptions.predicates.ntheory.PrimePredicate.handler"]], "handler (sympy.assumptions.predicates.order.negativepredicate attribute)": [[42, "sympy.assumptions.predicates.order.NegativePredicate.handler"]], "handler (sympy.assumptions.predicates.order.nonnegativepredicate attribute)": [[42, "sympy.assumptions.predicates.order.NonNegativePredicate.handler"]], "handler (sympy.assumptions.predicates.order.nonpositivepredicate attribute)": [[42, "sympy.assumptions.predicates.order.NonPositivePredicate.handler"]], "handler (sympy.assumptions.predicates.order.nonzeropredicate attribute)": [[42, "sympy.assumptions.predicates.order.NonZeroPredicate.handler"]], "handler (sympy.assumptions.predicates.order.positivepredicate attribute)": [[42, "sympy.assumptions.predicates.order.PositivePredicate.handler"]], "handler (sympy.assumptions.predicates.order.zeropredicate attribute)": [[42, "sympy.assumptions.predicates.order.ZeroPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.algebraicpredicate attribute)": [[42, "sympy.assumptions.predicates.sets.AlgebraicPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.antihermitianpredicate attribute)": [[42, "sympy.assumptions.predicates.sets.AntihermitianPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.complexpredicate attribute)": [[42, "sympy.assumptions.predicates.sets.ComplexPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.extendedrealpredicate attribute)": [[42, "sympy.assumptions.predicates.sets.ExtendedRealPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.hermitianpredicate attribute)": [[42, "sympy.assumptions.predicates.sets.HermitianPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.imaginarypredicate attribute)": [[42, "sympy.assumptions.predicates.sets.ImaginaryPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.integerpredicate attribute)": [[42, "sympy.assumptions.predicates.sets.IntegerPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.irrationalpredicate attribute)": [[42, "sympy.assumptions.predicates.sets.IrrationalPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.rationalpredicate attribute)": [[42, "sympy.assumptions.predicates.sets.RationalPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.realpredicate attribute)": [[42, "sympy.assumptions.predicates.sets.RealPredicate.handler"]], "handler (sympy.assumptions.predicates.sets.transcendentalpredicate attribute)": [[42, "sympy.assumptions.predicates.sets.TranscendentalPredicate.handler"]], "sympy.assumptions.predicates": [[42, "module-sympy.assumptions.predicates"]], "refine() (in module sympy.assumptions.refine)": [[43, "sympy.assumptions.refine.refine"]], "refine_pow() (in module sympy.assumptions.refine)": [[43, "sympy.assumptions.refine.refine_Pow"]], "refine_abs() (in module sympy.assumptions.refine)": [[43, "sympy.assumptions.refine.refine_abs"]], "refine_arg() (in module sympy.assumptions.refine)": [[43, "sympy.assumptions.refine.refine_arg"]], "refine_atan2() (in module sympy.assumptions.refine)": [[43, "sympy.assumptions.refine.refine_atan2"]], "refine_im() (in module sympy.assumptions.refine)": [[43, "sympy.assumptions.refine.refine_im"]], "refine_matrixelement() (in module sympy.assumptions.refine)": [[43, "sympy.assumptions.refine.refine_matrixelement"]], "refine_re() (in module sympy.assumptions.refine)": [[43, "sympy.assumptions.refine.refine_re"]], "refine_sign() (in module sympy.assumptions.refine)": [[43, "sympy.assumptions.refine.refine_sign"]], "sympy.assumptions.refine": [[43, "module-sympy.assumptions.refine"]], "apply_finite_diff() (in module sympy.calculus.finite_diff)": [[44, "sympy.calculus.finite_diff.apply_finite_diff"]], "continuous_domain() (in module sympy.calculus.util)": [[44, "sympy.calculus.util.continuous_domain"]], "differentiate_finite() (in module sympy.calculus.finite_diff)": [[44, "sympy.calculus.finite_diff.differentiate_finite"]], "euler_equations() (in module sympy.calculus.euler)": [[44, "sympy.calculus.euler.euler_equations"]], "finite_diff_weights() (in module sympy.calculus.finite_diff)": [[44, "sympy.calculus.finite_diff.finite_diff_weights"]], "function_range() (in module sympy.calculus.util)": [[44, "sympy.calculus.util.function_range"]], "is_convex() (in module sympy.calculus.util)": [[44, "sympy.calculus.util.is_convex"]], "is_decreasing() (in module sympy.calculus.singularities)": [[44, "sympy.calculus.singularities.is_decreasing"]], "is_increasing() (in module sympy.calculus.singularities)": [[44, "sympy.calculus.singularities.is_increasing"]], "is_monotonic() (in module sympy.calculus.singularities)": [[44, "sympy.calculus.singularities.is_monotonic"]], "is_strictly_decreasing() (in module sympy.calculus.singularities)": [[44, "sympy.calculus.singularities.is_strictly_decreasing"]], "is_strictly_increasing() (in module sympy.calculus.singularities)": [[44, "sympy.calculus.singularities.is_strictly_increasing"]], "lcim() (in module sympy.calculus.util)": [[44, "sympy.calculus.util.lcim"]], "maximum() (in module sympy.calculus.util)": [[44, "sympy.calculus.util.maximum"]], "minimum() (in module sympy.calculus.util)": [[44, "sympy.calculus.util.minimum"]], "monotonicity_helper() (in module sympy.calculus.singularities)": [[44, "sympy.calculus.singularities.monotonicity_helper"]], "not_empty_in() (in module sympy.calculus.util)": [[44, "sympy.calculus.util.not_empty_in"]], "periodicity() (in module sympy.calculus.util)": [[44, "sympy.calculus.util.periodicity"]], "singularities() (in module sympy.calculus.singularities)": [[44, "sympy.calculus.singularities.singularities"]], "stationary_points() (in module sympy.calculus.util)": [[44, "sympy.calculus.util.stationary_points"]], "sympy.calculus": [[44, "module-sympy.calculus"]], "sympy.calculus.euler": [[44, "module-sympy.calculus.euler"]], "sympy.calculus.finite_diff": [[44, "module-sympy.calculus.finite_diff"]], "sympy.calculus.singularities": [[44, "module-sympy.calculus.singularities"]], "sympy.calculus.util": [[44, "module-sympy.calculus.util"]], "arrowstringdescription (class in sympy.categories.diagram_drawing)": [[45, "sympy.categories.diagram_drawing.ArrowStringDescription"]], "category (class in sympy.categories)": [[45, "sympy.categories.Category"]], "compositemorphism (class in sympy.categories)": [[45, "sympy.categories.CompositeMorphism"]], "diagram (class in sympy.categories)": [[45, "sympy.categories.Diagram"]], "diagramgrid (class in sympy.categories.diagram_drawing)": [[45, "sympy.categories.diagram_drawing.DiagramGrid"]], "identitymorphism (class in sympy.categories)": [[45, "sympy.categories.IdentityMorphism"]], "morphism (class in sympy.categories)": [[45, "sympy.categories.Morphism"]], "namedmorphism (class in sympy.categories)": [[45, "sympy.categories.NamedMorphism"]], "object (class in sympy.categories)": [[45, "sympy.categories.Object"]], "xypicdiagramdrawer (class in sympy.categories.diagram_drawing)": [[45, "sympy.categories.diagram_drawing.XypicDiagramDrawer"]], "codomain (sympy.categories.compositemorphism property)": [[45, "sympy.categories.CompositeMorphism.codomain"]], "codomain (sympy.categories.morphism property)": [[45, "sympy.categories.Morphism.codomain"]], "commutative_diagrams (sympy.categories.category property)": [[45, "sympy.categories.Category.commutative_diagrams"]], "components (sympy.categories.compositemorphism property)": [[45, "sympy.categories.CompositeMorphism.components"]], "compose() (sympy.categories.morphism method)": [[45, "sympy.categories.Morphism.compose"]], "conclusions (sympy.categories.diagram property)": [[45, "sympy.categories.Diagram.conclusions"]], "domain (sympy.categories.compositemorphism property)": [[45, "sympy.categories.CompositeMorphism.domain"]], "domain (sympy.categories.morphism property)": [[45, "sympy.categories.Morphism.domain"]], "draw() (sympy.categories.diagram_drawing.xypicdiagramdrawer method)": [[45, "sympy.categories.diagram_drawing.XypicDiagramDrawer.draw"]], "flatten() (sympy.categories.compositemorphism method)": [[45, "sympy.categories.CompositeMorphism.flatten"]], "height (sympy.categories.diagram_drawing.diagramgrid property)": [[45, "sympy.categories.diagram_drawing.DiagramGrid.height"]], "hom() (sympy.categories.diagram method)": [[45, "sympy.categories.Diagram.hom"]], "is_subdiagram() (sympy.categories.diagram method)": [[45, "sympy.categories.Diagram.is_subdiagram"]], "morphisms (sympy.categories.diagram_drawing.diagramgrid property)": [[45, "sympy.categories.diagram_drawing.DiagramGrid.morphisms"]], "name (sympy.categories.category property)": [[45, "sympy.categories.Category.name"]], "name (sympy.categories.namedmorphism property)": [[45, "sympy.categories.NamedMorphism.name"]], "objects (sympy.categories.category property)": [[45, "sympy.categories.Category.objects"]], "objects (sympy.categories.diagram property)": [[45, "sympy.categories.Diagram.objects"]], "premises (sympy.categories.diagram property)": [[45, "sympy.categories.Diagram.premises"]], "preview_diagram() (in module sympy.categories.diagram_drawing)": [[45, "sympy.categories.diagram_drawing.preview_diagram"]], "subdiagram_from_objects() (sympy.categories.diagram method)": [[45, "sympy.categories.Diagram.subdiagram_from_objects"]], "sympy.categories": [[45, "module-sympy.categories"]], "sympy.categories.diagram_drawing": [[45, "module-sympy.categories.diagram_drawing"]], "width (sympy.categories.diagram_drawing.diagramgrid property)": [[45, "sympy.categories.diagram_drawing.DiagramGrid.width"]], "xypic_draw_diagram() (in module sympy.categories.diagram_drawing)": [[45, "sympy.categories.diagram_drawing.xypic_draw_diagram"]], "arrayconstructor (class in sympy.codegen.fnodes)": [[46, "sympy.codegen.fnodes.ArrayConstructor"]], "assignment (class in sympy.codegen.ast)": [[46, "sympy.codegen.ast.Assignment"]], "assignmentbase (class in sympy.codegen.ast)": [[46, "sympy.codegen.ast.AssignmentBase"]], "attribute (class in sympy.codegen.ast)": [[46, "sympy.codegen.ast.Attribute"]], "augmentedassignment (class in sympy.codegen.ast)": [[46, "sympy.codegen.ast.AugmentedAssignment"]], "breaktoken (class in sympy.codegen.ast)": [[46, "sympy.codegen.ast.BreakToken"]], "cbrt (class in sympy.codegen.cfunctions)": [[46, "sympy.codegen.cfunctions.Cbrt"]], "codeblock (class in sympy.codegen.ast)": [[46, "sympy.codegen.ast.CodeBlock"]], "commaoperator (class in sympy.codegen.cnodes)": [[46, "sympy.codegen.cnodes.CommaOperator"]], "comment (class in sympy.codegen.ast)": [[46, "sympy.codegen.ast.Comment"]], "complextype (class in sympy.codegen.ast)": [[46, "sympy.codegen.ast.ComplexType"]], "continuetoken (class in sympy.codegen.ast)": [[46, "sympy.codegen.ast.ContinueToken"]], "declaration (class in sympy.codegen.ast)": [[46, "sympy.codegen.ast.Declaration"]], "do (class in sympy.codegen.fnodes)": [[46, "sympy.codegen.fnodes.Do"]], "element (class in sympy.codegen.ast)": [[46, "sympy.codegen.ast.Element"]], "extent (class in sympy.codegen.fnodes)": [[46, "sympy.codegen.fnodes.Extent"]], "floatbasetype (class in sympy.codegen.ast)": [[46, "sympy.codegen.ast.FloatBaseType"]], "floattype (class in sympy.codegen.ast)": [[46, "sympy.codegen.ast.FloatType"]], "for (class in sympy.codegen.ast)": [[46, "sympy.codegen.ast.For"]], "fortranreturn (class in sympy.codegen.fnodes)": [[46, "sympy.codegen.fnodes.FortranReturn"]], "funcminusoneoptim (class in sympy.codegen.rewriting)": [[46, "sympy.codegen.rewriting.FuncMinusOneOptim"]], "functioncall (class in sympy.codegen.ast)": [[46, "sympy.codegen.ast.FunctionCall"]], "functiondefinition (class in sympy.codegen.ast)": [[46, "sympy.codegen.ast.FunctionDefinition"]], "functionprototype (class in sympy.codegen.ast)": [[46, "sympy.codegen.ast.FunctionPrototype"]], "goto (class in sympy.codegen.fnodes)": [[46, "sympy.codegen.fnodes.GoTo"]], "implieddoloop (class in sympy.codegen.fnodes)": [[46, "sympy.codegen.fnodes.ImpliedDoLoop"]], "intbasetype (class in sympy.codegen.ast)": [[46, "sympy.codegen.ast.IntBaseType"]], "label (class in sympy.codegen.cnodes)": [[46, "sympy.codegen.cnodes.Label"]], "matrixsolve (class in sympy.codegen.matrix_nodes)": [[46, "sympy.codegen.matrix_nodes.MatrixSolve"]], "module (class in sympy.codegen.fnodes)": [[46, "sympy.codegen.fnodes.Module"]], "node (class in sympy.codegen.ast)": [[46, "sympy.codegen.ast.Node"]], "nonetoken (class in sympy.codegen.ast)": [[46, "sympy.codegen.ast.NoneToken"]], "optimization (class in sympy.codegen.rewriting)": [[46, "sympy.codegen.rewriting.Optimization"]], "pointer (class in sympy.codegen.ast)": [[46, "sympy.codegen.ast.Pointer"]], "postdecrement (class in sympy.codegen.cnodes)": [[46, "sympy.codegen.cnodes.PostDecrement"]], "postincrement (class in sympy.codegen.cnodes)": [[46, "sympy.codegen.cnodes.PostIncrement"]], "predecrement (class in sympy.codegen.cnodes)": [[46, "sympy.codegen.cnodes.PreDecrement"]], "preincrement (class in sympy.codegen.cnodes)": [[46, "sympy.codegen.cnodes.PreIncrement"]], "print (class in sympy.codegen.ast)": [[46, "sympy.codegen.ast.Print"]], "program (class in sympy.codegen.fnodes)": [[46, "sympy.codegen.fnodes.Program"]], "quotedstring (class in sympy.codegen.ast)": [[46, "sympy.codegen.ast.QuotedString"]], "replaceoptim (class in sympy.codegen.rewriting)": [[46, "sympy.codegen.rewriting.ReplaceOptim"]], "return (class in sympy.codegen.ast)": [[46, "sympy.codegen.ast.Return"]], "scope (class in sympy.codegen.ast)": [[46, "sympy.codegen.ast.Scope"]], "seriesapprox (class in sympy.codegen.approximations)": [[46, "sympy.codegen.approximations.SeriesApprox"]], "signedinttype (class in sympy.codegen.ast)": [[46, "sympy.codegen.ast.SignedIntType"]], "sqrt (class in sympy.codegen.cfunctions)": [[46, "sympy.codegen.cfunctions.Sqrt"]], "stream (class in sympy.codegen.ast)": [[46, "sympy.codegen.ast.Stream"]], "string (class in sympy.codegen.ast)": [[46, "sympy.codegen.ast.String"]], "subroutine (class in sympy.codegen.fnodes)": [[46, "sympy.codegen.fnodes.Subroutine"]], "subroutinecall (class in sympy.codegen.fnodes)": [[46, "sympy.codegen.fnodes.SubroutineCall"]], "sumapprox (class in sympy.codegen.approximations)": [[46, "sympy.codegen.approximations.SumApprox"]], "token (class in sympy.codegen.ast)": [[46, "sympy.codegen.ast.Token"]], "type (class in sympy.codegen.ast)": [[46, "sympy.codegen.ast.Type"]], "unsignedinttype (class in sympy.codegen.ast)": [[46, "sympy.codegen.ast.UnsignedIntType"]], "variable (class in sympy.codegen.ast)": [[46, "sympy.codegen.ast.Variable"]], "while (class in sympy.codegen.ast)": [[46, "sympy.codegen.ast.While"]], "alignof() (in module sympy.codegen.cnodes)": [[46, "sympy.codegen.cnodes.alignof"]], "allocated() (in module sympy.codegen.fnodes)": [[46, "sympy.codegen.fnodes.allocated"]], "array() (in module sympy.codegen.fnodes)": [[46, "sympy.codegen.fnodes.array"]], "as_declaration() (sympy.codegen.ast.variable method)": [[46, "sympy.codegen.ast.Variable.as_Declaration"]], "attr_params() (sympy.codegen.ast.node method)": [[46, "sympy.codegen.ast.Node.attr_params"]], "aug_assign() (in module sympy.codegen.ast)": [[46, "sympy.codegen.ast.aug_assign"]], "bind_c() (in module sympy.codegen.fnodes)": [[46, "sympy.codegen.fnodes.bind_C"]], "cast_check() (sympy.codegen.ast.type method)": [[46, "sympy.codegen.ast.Type.cast_check"]], "cast_nocheck (sympy.codegen.ast.floatbasetype attribute)": [[46, "sympy.codegen.ast.FloatBaseType.cast_nocheck"]], "cast_nocheck() (sympy.codegen.ast.floattype method)": [[46, "sympy.codegen.ast.FloatType.cast_nocheck"]], "cmplx (class in sympy.codegen.fnodes)": [[46, "sympy.codegen.fnodes.cmplx"]], "create_expand_pow_optimization() (in module sympy.codegen.rewriting)": [[46, "sympy.codegen.rewriting.create_expand_pow_optimization"]], "cse() (sympy.codegen.ast.codeblock method)": [[46, "sympy.codegen.ast.CodeBlock.cse"]], "decimal_dig (sympy.codegen.ast.floattype property)": [[46, "sympy.codegen.ast.FloatType.decimal_dig"]], "deduced() (sympy.codegen.ast.variable class method)": [[46, "sympy.codegen.ast.Variable.deduced"]], "dig (sympy.codegen.ast.floattype property)": [[46, "sympy.codegen.ast.FloatType.dig"]], "dimension() (in module sympy.codegen.fnodes)": [[46, "sympy.codegen.fnodes.dimension"]], "dsign (class in sympy.codegen.fnodes)": [[46, "sympy.codegen.fnodes.dsign"]], "eps (sympy.codegen.ast.floattype property)": [[46, "sympy.codegen.ast.FloatType.eps"]], "exp2 (class in sympy.codegen.cfunctions)": [[46, "sympy.codegen.cfunctions.exp2"]], "expm1 (class in sympy.codegen.cfunctions)": [[46, "sympy.codegen.cfunctions.expm1"]], "fdiff() (sympy.codegen.cfunctions.cbrt method)": [[46, "sympy.codegen.cfunctions.Cbrt.fdiff"]], "fdiff() (sympy.codegen.cfunctions.sqrt method)": [[46, "sympy.codegen.cfunctions.Sqrt.fdiff"]], "fdiff() (sympy.codegen.cfunctions.exp2 method)": [[46, "sympy.codegen.cfunctions.exp2.fdiff"]], "fdiff() (sympy.codegen.cfunctions.expm1 method)": [[46, "sympy.codegen.cfunctions.expm1.fdiff"]], "fdiff() (sympy.codegen.cfunctions.fma method)": [[46, "sympy.codegen.cfunctions.fma.fdiff"]], "fdiff() (sympy.codegen.cfunctions.hypot method)": [[46, "sympy.codegen.cfunctions.hypot.fdiff"]], "fdiff() (sympy.codegen.cfunctions.log10 method)": [[46, "sympy.codegen.cfunctions.log10.fdiff"]], "fdiff() (sympy.codegen.cfunctions.log1p method)": [[46, "sympy.codegen.cfunctions.log1p.fdiff"]], "fdiff() (sympy.codegen.cfunctions.log2 method)": [[46, "sympy.codegen.cfunctions.log2.fdiff"]], "fma (class in sympy.codegen.cfunctions)": [[46, "sympy.codegen.cfunctions.fma"]], "from_expr() (sympy.codegen.ast.type class method)": [[46, "sympy.codegen.ast.Type.from_expr"]], "goto (class in sympy.codegen.cnodes)": [[46, "sympy.codegen.cnodes.goto"]], "hypot (class in sympy.codegen.cfunctions)": [[46, "sympy.codegen.cfunctions.hypot"]], "isign (class in sympy.codegen.fnodes)": [[46, "sympy.codegen.fnodes.isign"]], "kind (class in sympy.codegen.fnodes)": [[46, "sympy.codegen.fnodes.kind"]], "kwargs() (sympy.codegen.ast.token method)": [[46, "sympy.codegen.ast.Token.kwargs"]], "lbound() (in module sympy.codegen.fnodes)": [[46, "sympy.codegen.fnodes.lbound"]], "literal_dp (class in sympy.codegen.fnodes)": [[46, "sympy.codegen.fnodes.literal_dp"]], "literal_sp (class in sympy.codegen.fnodes)": [[46, "sympy.codegen.fnodes.literal_sp"]], "log10 (class in sympy.codegen.cfunctions)": [[46, "sympy.codegen.cfunctions.log10"]], "log1p (class in sympy.codegen.cfunctions)": [[46, "sympy.codegen.cfunctions.log1p"]], "log2 (class in sympy.codegen.cfunctions)": [[46, "sympy.codegen.cfunctions.log2"]], "max (sympy.codegen.ast.floattype property)": [[46, "sympy.codegen.ast.FloatType.max"]], "max_exponent (sympy.codegen.ast.floattype property)": [[46, "sympy.codegen.ast.FloatType.max_exponent"]], "merge (class in sympy.codegen.fnodes)": [[46, "sympy.codegen.fnodes.merge"]], "min_exponent (sympy.codegen.ast.floattype property)": [[46, "sympy.codegen.ast.FloatType.min_exponent"]], "newtons_method() (in module sympy.codegen.algorithms)": [[46, "sympy.codegen.algorithms.newtons_method"]], "newtons_method_function() (in module sympy.codegen.algorithms)": [[46, "sympy.codegen.algorithms.newtons_method_function"]], "optimize() (in module sympy.codegen.rewriting)": [[46, "sympy.codegen.rewriting.optimize"]], "render_as_module() (in module sympy.codegen.futils)": [[46, "sympy.codegen.futils.render_as_module"]], "render_as_module() (in module sympy.codegen.pyutils)": [[46, "sympy.codegen.pyutils.render_as_module"]], "render_as_source_file() (in module sympy.codegen.cutils)": [[46, "sympy.codegen.cutils.render_as_source_file"]], "replace_in_add() (sympy.codegen.rewriting.funcminusoneoptim method)": [[46, "sympy.codegen.rewriting.FuncMinusOneOptim.replace_in_Add"]], "reshape() (in module sympy.codegen.fnodes)": [[46, "sympy.codegen.fnodes.reshape"]], "shape() (in module sympy.codegen.fnodes)": [[46, "sympy.codegen.fnodes.shape"]], "size() (in module sympy.codegen.fnodes)": [[46, "sympy.codegen.fnodes.size"]], "sizeof() (in module sympy.codegen.cnodes)": [[46, "sympy.codegen.cnodes.sizeof"]], "struct (class in sympy.codegen.cnodes)": [[46, "sympy.codegen.cnodes.struct"]], "sympy.codegen.algorithms": [[46, "module-sympy.codegen.algorithms"]], "sympy.codegen.approximations": [[46, "module-sympy.codegen.approximations"]], "sympy.codegen.ast": [[46, "module-sympy.codegen.ast"]], "sympy.codegen.cfunctions": [[46, "module-sympy.codegen.cfunctions"]], "sympy.codegen.cnodes": [[46, "module-sympy.codegen.cnodes"]], "sympy.codegen.cutils": [[46, "module-sympy.codegen.cutils"]], "sympy.codegen.cxxnodes": [[46, "module-sympy.codegen.cxxnodes"]], "sympy.codegen.fnodes": [[46, "module-sympy.codegen.fnodes"]], "sympy.codegen.futils": [[46, "module-sympy.codegen.futils"]], "sympy.codegen.matrix_nodes": [[46, "module-sympy.codegen.matrix_nodes"]], "sympy.codegen.pyutils": [[46, "module-sympy.codegen.pyutils"]], "sympy.codegen.rewriting": [[46, "module-sympy.codegen.rewriting"]], "tiny (sympy.codegen.ast.floattype property)": [[46, "sympy.codegen.ast.FloatType.tiny"]], "topological_sort() (sympy.codegen.ast.codeblock class method)": [[46, "sympy.codegen.ast.CodeBlock.topological_sort"]], "union (class in sympy.codegen.cnodes)": [[46, "sympy.codegen.cnodes.union"]], "use (class in sympy.codegen.fnodes)": [[46, "sympy.codegen.fnodes.use"]], "use_rename (class in sympy.codegen.fnodes)": [[46, "sympy.codegen.fnodes.use_rename"]], "using (class in sympy.codegen.cxxnodes)": [[46, "sympy.codegen.cxxnodes.using"]], "a4_in_s6() (in module sympy.combinatorics.galois)": [[48, "sympy.combinatorics.galois.A4_in_S6"]], "a4xc2() (in module sympy.combinatorics.galois)": [[48, "sympy.combinatorics.galois.A4xC2"]], "g18() (in module sympy.combinatorics.galois)": [[48, "sympy.combinatorics.galois.G18"]], "g36m() (in module sympy.combinatorics.galois)": [[48, "sympy.combinatorics.galois.G36m"]], "g36p() (in module sympy.combinatorics.galois)": [[48, "sympy.combinatorics.galois.G36p"]], "g72() (in module sympy.combinatorics.galois)": [[48, "sympy.combinatorics.galois.G72"]], "m20() (in module sympy.combinatorics.galois)": [[48, "sympy.combinatorics.galois.M20"]], "pgl2f5() (in module sympy.combinatorics.galois)": [[48, "sympy.combinatorics.galois.PGL2F5"]], "psl2f5() (in module sympy.combinatorics.galois)": [[48, "sympy.combinatorics.galois.PSL2F5"]], "s1transitivesubgroups (class in sympy.combinatorics.galois)": [[48, "sympy.combinatorics.galois.S1TransitiveSubgroups"]], "s2transitivesubgroups (class in sympy.combinatorics.galois)": [[48, "sympy.combinatorics.galois.S2TransitiveSubgroups"]], "s3transitivesubgroups (class in sympy.combinatorics.galois)": [[48, "sympy.combinatorics.galois.S3TransitiveSubgroups"]], "s3_in_s6() (in module sympy.combinatorics.galois)": [[48, "sympy.combinatorics.galois.S3_in_S6"]], "s4transitivesubgroups (class in sympy.combinatorics.galois)": [[48, "sympy.combinatorics.galois.S4TransitiveSubgroups"]], "s4m() (in module sympy.combinatorics.galois)": [[48, "sympy.combinatorics.galois.S4m"]], "s4p() (in module sympy.combinatorics.galois)": [[48, "sympy.combinatorics.galois.S4p"]], "s4xc2() (in module sympy.combinatorics.galois)": [[48, "sympy.combinatorics.galois.S4xC2"]], "s5transitivesubgroups (class in sympy.combinatorics.galois)": [[48, "sympy.combinatorics.galois.S5TransitiveSubgroups"]], "s6transitivesubgroups (class in sympy.combinatorics.galois)": [[48, "sympy.combinatorics.galois.S6TransitiveSubgroups"]], "find_transitive_subgroups_of_s6() (in module sympy.combinatorics.galois)": [[48, "sympy.combinatorics.galois.find_transitive_subgroups_of_S6"]], "four_group() (in module sympy.combinatorics.galois)": [[48, "sympy.combinatorics.galois.four_group"]], "sympy.combinatorics.galois": [[48, "module-sympy.combinatorics.galois"]], "graycode (class in sympy.combinatorics.graycode)": [[49, "sympy.combinatorics.graycode.GrayCode"]], "bin_to_gray() (sympy.combinatorics.graycode method)": [[49, "sympy.combinatorics.graycode.bin_to_gray"]], "current (sympy.combinatorics.graycode.graycode property)": [[49, "sympy.combinatorics.graycode.GrayCode.current"]], "generate_gray() (sympy.combinatorics.graycode.graycode method)": [[49, "sympy.combinatorics.graycode.GrayCode.generate_gray"]], "get_subset_from_bitstring() (sympy.combinatorics.graycode method)": [[49, "sympy.combinatorics.graycode.get_subset_from_bitstring"]], "gray_to_bin() (sympy.combinatorics.graycode method)": [[49, "sympy.combinatorics.graycode.gray_to_bin"]], "graycode_subsets() (sympy.combinatorics.graycode method)": [[49, "sympy.combinatorics.graycode.graycode_subsets"]], "n (sympy.combinatorics.graycode.graycode property)": [[49, "sympy.combinatorics.graycode.GrayCode.n"]], "next() (sympy.combinatorics.graycode.graycode method)": [[49, "sympy.combinatorics.graycode.GrayCode.next"]], "random_bitstring() (sympy.combinatorics.graycode method)": [[49, "sympy.combinatorics.graycode.random_bitstring"]], "rank (sympy.combinatorics.graycode.graycode property)": [[49, "sympy.combinatorics.graycode.GrayCode.rank"]], "selections (sympy.combinatorics.graycode.graycode property)": [[49, "sympy.combinatorics.graycode.GrayCode.selections"]], "skip() (sympy.combinatorics.graycode.graycode method)": [[49, "sympy.combinatorics.graycode.GrayCode.skip"]], "sympy.combinatorics.graycode": [[49, "module-sympy.combinatorics.graycode"]], "unrank() (sympy.combinatorics.graycode.graycode class method)": [[49, "sympy.combinatorics.graycode.GrayCode.unrank"]], "directproduct() (in module sympy.combinatorics.group_constructs)": [[50, "sympy.combinatorics.group_constructs.DirectProduct"]], "sympy.combinatorics.group_constructs": [[50, "module-sympy.combinatorics.group_constructs"]], "is_abelian_number() (in module sympy.combinatorics.group_numbers)": [[51, "sympy.combinatorics.group_numbers.is_abelian_number"]], "is_cyclic_number() (in module sympy.combinatorics.group_numbers)": [[51, "sympy.combinatorics.group_numbers.is_cyclic_number"]], "is_nilpotent_number() (in module sympy.combinatorics.group_numbers)": [[51, "sympy.combinatorics.group_numbers.is_nilpotent_number"]], "sympy.combinatorics.group_numbers": [[51, "module-sympy.combinatorics.group_numbers"]], "abeliangroup() (in module sympy.combinatorics.named_groups)": [[53, "sympy.combinatorics.named_groups.AbelianGroup"]], "alternatinggroup() (in module sympy.combinatorics.named_groups)": [[53, "sympy.combinatorics.named_groups.AlternatingGroup"]], "cyclicgroup() (in module sympy.combinatorics.named_groups)": [[53, "sympy.combinatorics.named_groups.CyclicGroup"]], "dihedralgroup() (in module sympy.combinatorics.named_groups)": [[53, "sympy.combinatorics.named_groups.DihedralGroup"]], "symmetricgroup() (in module sympy.combinatorics.named_groups)": [[53, "sympy.combinatorics.named_groups.SymmetricGroup"]], "sympy.combinatorics.named_groups": [[53, "module-sympy.combinatorics.named_groups"]], "integerpartition (class in sympy.combinatorics.partitions)": [[54, "sympy.combinatorics.partitions.IntegerPartition"]], "partition (class in sympy.combinatorics.partitions)": [[54, "sympy.combinatorics.partitions.Partition"]], "rgs (sympy.combinatorics.partitions.partition property)": [[54, "sympy.combinatorics.partitions.Partition.RGS"]], "rgs_enum() (in module sympy.combinatorics.partitions)": [[54, "sympy.combinatorics.partitions.RGS_enum"]], "rgs_generalized() (in module sympy.combinatorics.partitions)": [[54, "sympy.combinatorics.partitions.RGS_generalized"]], "rgs_rank() (in module sympy.combinatorics.partitions)": [[54, "sympy.combinatorics.partitions.RGS_rank"]], "rgs_unrank() (in module sympy.combinatorics.partitions)": [[54, "sympy.combinatorics.partitions.RGS_unrank"]], "as_dict() (sympy.combinatorics.partitions.integerpartition method)": [[54, "sympy.combinatorics.partitions.IntegerPartition.as_dict"]], "as_ferrers() (sympy.combinatorics.partitions.integerpartition method)": [[54, "sympy.combinatorics.partitions.IntegerPartition.as_ferrers"]], "conjugate (sympy.combinatorics.partitions.integerpartition property)": [[54, "sympy.combinatorics.partitions.IntegerPartition.conjugate"]], "from_rgs() (sympy.combinatorics.partitions.partition class method)": [[54, "sympy.combinatorics.partitions.Partition.from_rgs"]], "next_lex() (sympy.combinatorics.partitions.integerpartition method)": [[54, "sympy.combinatorics.partitions.IntegerPartition.next_lex"]], "partition (sympy.combinatorics.partitions.partition property)": [[54, "sympy.combinatorics.partitions.Partition.partition"]], "prev_lex() (sympy.combinatorics.partitions.integerpartition method)": [[54, "sympy.combinatorics.partitions.IntegerPartition.prev_lex"]], "random_integer_partition() (in module sympy.combinatorics.partitions)": [[54, "sympy.combinatorics.partitions.random_integer_partition"]], "rank (sympy.combinatorics.partitions.partition property)": [[54, "sympy.combinatorics.partitions.Partition.rank"]], "sort_key() (sympy.combinatorics.partitions.partition method)": [[54, "sympy.combinatorics.partitions.Partition.sort_key"]], "sympy.combinatorics.partitions": [[54, "module-sympy.combinatorics.partitions"]], "permutationgroup (class in sympy.combinatorics.perm_groups)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup"]], "__contains__() (sympy.combinatorics.perm_groups.permutationgroup method)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.__contains__"]], "__mul__() (sympy.combinatorics.perm_groups.permutationgroup method)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.__mul__"]], "__new__() (sympy.combinatorics.perm_groups.permutationgroup static method)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.__new__"]], "__weakref__ (sympy.combinatorics.perm_groups.permutationgroup attribute)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.__weakref__"]], "_coset_representative() (sympy.combinatorics.perm_groups.permutationgroup method)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup._coset_representative"]], "_distinct_primes_lemma() (sympy.combinatorics.perm_groups.permutationgroup class method)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup._distinct_primes_lemma"]], "_elements (sympy.combinatorics.perm_groups.permutationgroup property)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup._elements"]], "_eval_is_alt_sym_monte_carlo() (sympy.combinatorics.perm_groups.permutationgroup method)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup._eval_is_alt_sym_monte_carlo"]], "_eval_is_alt_sym_naive() (sympy.combinatorics.perm_groups.permutationgroup method)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup._eval_is_alt_sym_naive"]], "_p_elements_group() (sympy.combinatorics.perm_groups.permutationgroup method)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup._p_elements_group"]], "_random_pr_init() (sympy.combinatorics.perm_groups.permutationgroup method)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup._random_pr_init"]], "_sylow_alt_sym() (sympy.combinatorics.perm_groups.permutationgroup method)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup._sylow_alt_sym"]], "_union_find_merge() (sympy.combinatorics.perm_groups.permutationgroup method)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup._union_find_merge"]], "_union_find_rep() (sympy.combinatorics.perm_groups.permutationgroup method)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup._union_find_rep"]], "_verify() (sympy.combinatorics.perm_groups.permutationgroup method)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup._verify"]], "abelian_invariants() (sympy.combinatorics.perm_groups.permutationgroup method)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.abelian_invariants"]], "base (sympy.combinatorics.perm_groups.permutationgroup property)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.base"]], "baseswap() (sympy.combinatorics.perm_groups.permutationgroup method)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.baseswap"]], "basic_orbits (sympy.combinatorics.perm_groups.permutationgroup property)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.basic_orbits"]], "basic_stabilizers (sympy.combinatorics.perm_groups.permutationgroup property)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.basic_stabilizers"]], "basic_transversals (sympy.combinatorics.perm_groups.permutationgroup property)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.basic_transversals"]], "center() (sympy.combinatorics.perm_groups.permutationgroup method)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.center"]], "centralizer() (sympy.combinatorics.perm_groups.permutationgroup method)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.centralizer"]], "commutator() (sympy.combinatorics.perm_groups.permutationgroup method)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.commutator"]], "composition_series() (sympy.combinatorics.perm_groups.permutationgroup method)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.composition_series"]], "conjugacy_class() (sympy.combinatorics.perm_groups.permutationgroup method)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.conjugacy_class"]], "conjugacy_classes() (sympy.combinatorics.perm_groups.permutationgroup method)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.conjugacy_classes"]], "contains() (sympy.combinatorics.perm_groups.permutationgroup method)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.contains"]], "coset_factor() (sympy.combinatorics.perm_groups.permutationgroup method)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.coset_factor"]], "coset_rank() (sympy.combinatorics.perm_groups.permutationgroup method)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.coset_rank"]], "coset_table() (sympy.combinatorics.perm_groups.permutationgroup method)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.coset_table"]], "coset_transversal() (sympy.combinatorics.perm_groups.permutationgroup method)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.coset_transversal"]], "coset_unrank() (sympy.combinatorics.perm_groups.permutationgroup method)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.coset_unrank"]], "degree (sympy.combinatorics.perm_groups.permutationgroup property)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.degree"]], "derived_series() (sympy.combinatorics.perm_groups.permutationgroup method)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.derived_series"]], "derived_subgroup() (sympy.combinatorics.perm_groups.permutationgroup method)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.derived_subgroup"]], "elements (sympy.combinatorics.perm_groups.permutationgroup property)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.elements"]], "equals() (sympy.combinatorics.perm_groups.permutationgroup method)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.equals"]], "generate() (sympy.combinatorics.perm_groups.permutationgroup method)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.generate"]], "generate_dimino() (sympy.combinatorics.perm_groups.permutationgroup method)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.generate_dimino"]], "generate_schreier_sims() (sympy.combinatorics.perm_groups.permutationgroup method)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.generate_schreier_sims"]], "generator_product() (sympy.combinatorics.perm_groups.permutationgroup method)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.generator_product"]], "generators (sympy.combinatorics.perm_groups.permutationgroup property)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.generators"]], "identity (sympy.combinatorics.perm_groups.permutationgroup property)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.identity"]], "index() (sympy.combinatorics.perm_groups.permutationgroup method)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.index"]], "is_abelian (sympy.combinatorics.perm_groups.permutationgroup property)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.is_abelian"]], "is_alt_sym() (sympy.combinatorics.perm_groups.permutationgroup method)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.is_alt_sym"]], "is_alternating (sympy.combinatorics.perm_groups.permutationgroup property)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.is_alternating"]], "is_cyclic (sympy.combinatorics.perm_groups.permutationgroup property)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.is_cyclic"]], "is_dihedral (sympy.combinatorics.perm_groups.permutationgroup property)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.is_dihedral"]], "is_elementary() (sympy.combinatorics.perm_groups.permutationgroup method)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.is_elementary"]], "is_nilpotent (sympy.combinatorics.perm_groups.permutationgroup property)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.is_nilpotent"]], "is_normal() (sympy.combinatorics.perm_groups.permutationgroup method)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.is_normal"]], "is_perfect (sympy.combinatorics.perm_groups.permutationgroup property)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.is_perfect"]], "is_polycyclic (sympy.combinatorics.perm_groups.permutationgroup property)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.is_polycyclic"]], "is_primitive() (sympy.combinatorics.perm_groups.permutationgroup method)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.is_primitive"]], "is_solvable (sympy.combinatorics.perm_groups.permutationgroup property)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.is_solvable"]], "is_subgroup() (sympy.combinatorics.perm_groups.permutationgroup method)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.is_subgroup"]], "is_symmetric (sympy.combinatorics.perm_groups.permutationgroup property)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.is_symmetric"]], "is_transitive() (sympy.combinatorics.perm_groups.permutationgroup method)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.is_transitive"]], "is_trivial (sympy.combinatorics.perm_groups.permutationgroup property)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.is_trivial"]], "lower_central_series() (sympy.combinatorics.perm_groups.permutationgroup method)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.lower_central_series"]], "make_perm() (sympy.combinatorics.perm_groups.permutationgroup method)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.make_perm"]], "max_div (sympy.combinatorics.perm_groups.permutationgroup property)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.max_div"]], "minimal_block() (sympy.combinatorics.perm_groups.permutationgroup method)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.minimal_block"]], "minimal_blocks() (sympy.combinatorics.perm_groups.permutationgroup method)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.minimal_blocks"]], "normal_closure() (sympy.combinatorics.perm_groups.permutationgroup method)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.normal_closure"]], "orbit() (sympy.combinatorics.perm_groups.permutationgroup method)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.orbit"]], "orbit_rep() (sympy.combinatorics.perm_groups.permutationgroup method)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.orbit_rep"]], "orbit_transversal() (sympy.combinatorics.perm_groups.permutationgroup method)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.orbit_transversal"]], "orbits() (sympy.combinatorics.perm_groups.permutationgroup method)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.orbits"]], "order() (sympy.combinatorics.perm_groups.permutationgroup method)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.order"]], "pointwise_stabilizer() (sympy.combinatorics.perm_groups.permutationgroup method)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.pointwise_stabilizer"]], "polycyclic_group() (sympy.combinatorics.perm_groups.permutationgroup method)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.polycyclic_group"]], "presentation() (sympy.combinatorics.perm_groups.permutationgroup method)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.presentation"]], "random() (sympy.combinatorics.perm_groups.permutationgroup method)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.random"]], "random_pr() (sympy.combinatorics.perm_groups.permutationgroup method)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.random_pr"]], "random_stab() (sympy.combinatorics.perm_groups.permutationgroup method)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.random_stab"]], "schreier_sims() (sympy.combinatorics.perm_groups.permutationgroup method)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims"]], "schreier_sims_incremental() (sympy.combinatorics.perm_groups.permutationgroup method)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims_incremental"]], "schreier_sims_random() (sympy.combinatorics.perm_groups.permutationgroup method)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims_random"]], "schreier_vector() (sympy.combinatorics.perm_groups.permutationgroup method)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.schreier_vector"]], "stabilizer() (sympy.combinatorics.perm_groups.permutationgroup method)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.stabilizer"]], "strong_gens (sympy.combinatorics.perm_groups.permutationgroup property)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.strong_gens"]], "strong_presentation() (sympy.combinatorics.perm_groups.permutationgroup method)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.strong_presentation"]], "subgroup() (sympy.combinatorics.perm_groups.permutationgroup method)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.subgroup"]], "subgroup_search() (sympy.combinatorics.perm_groups.permutationgroup method)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.subgroup_search"]], "sylow_subgroup() (sympy.combinatorics.perm_groups.permutationgroup method)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.sylow_subgroup"]], "sympy.combinatorics.perm_groups": [[56, "module-sympy.combinatorics.perm_groups"]], "transitivity_degree (sympy.combinatorics.perm_groups.permutationgroup property)": [[56, "sympy.combinatorics.perm_groups.PermutationGroup.transitivity_degree"]], "cycle (class in sympy.combinatorics.permutations)": [[57, "sympy.combinatorics.permutations.Cycle"]], "permutation (class in sympy.combinatorics.permutations)": [[57, "sympy.combinatorics.permutations.Permutation"]], "_af_parity() (in module sympy.combinatorics.permutations)": [[57, "sympy.combinatorics.permutations._af_parity"]], "alternating() (sympy.combinatorics.generators method)": [[57, "sympy.combinatorics.generators.alternating"]], "apply() (sympy.combinatorics.permutations.permutation method)": [[57, "sympy.combinatorics.permutations.Permutation.apply"]], "array_form (sympy.combinatorics.permutations.permutation property)": [[57, "sympy.combinatorics.permutations.Permutation.array_form"]], "ascents() (sympy.combinatorics.permutations.permutation method)": [[57, "sympy.combinatorics.permutations.Permutation.ascents"]], "atoms() (sympy.combinatorics.permutations.permutation method)": [[57, "sympy.combinatorics.permutations.Permutation.atoms"]], "cardinality (sympy.combinatorics.permutations.permutation property)": [[57, "sympy.combinatorics.permutations.Permutation.cardinality"]], "commutator() (sympy.combinatorics.permutations.permutation method)": [[57, "sympy.combinatorics.permutations.Permutation.commutator"]], "commutes_with() (sympy.combinatorics.permutations.permutation method)": [[57, "sympy.combinatorics.permutations.Permutation.commutes_with"]], "cycle_structure (sympy.combinatorics.permutations.permutation property)": [[57, "sympy.combinatorics.permutations.Permutation.cycle_structure"]], "cycles (sympy.combinatorics.permutations.permutation property)": [[57, "sympy.combinatorics.permutations.Permutation.cycles"]], "cyclic() (sympy.combinatorics.generators method)": [[57, "sympy.combinatorics.generators.cyclic"]], "cyclic_form (sympy.combinatorics.permutations.permutation property)": [[57, "sympy.combinatorics.permutations.Permutation.cyclic_form"]], "descents() (sympy.combinatorics.permutations.permutation method)": [[57, "sympy.combinatorics.permutations.Permutation.descents"]], "dihedral() (sympy.combinatorics.generators method)": [[57, "sympy.combinatorics.generators.dihedral"]], "from_inversion_vector() (sympy.combinatorics.permutations.permutation class method)": [[57, "sympy.combinatorics.permutations.Permutation.from_inversion_vector"]], "from_sequence() (sympy.combinatorics.permutations.permutation class method)": [[57, "sympy.combinatorics.permutations.Permutation.from_sequence"]], "full_cyclic_form (sympy.combinatorics.permutations.permutation property)": [[57, "sympy.combinatorics.permutations.Permutation.full_cyclic_form"]], "get_adjacency_distance() (sympy.combinatorics.permutations.permutation method)": [[57, "sympy.combinatorics.permutations.Permutation.get_adjacency_distance"]], "get_adjacency_matrix() (sympy.combinatorics.permutations.permutation method)": [[57, "sympy.combinatorics.permutations.Permutation.get_adjacency_matrix"]], "get_positional_distance() (sympy.combinatorics.permutations.permutation method)": [[57, "sympy.combinatorics.permutations.Permutation.get_positional_distance"]], "get_precedence_distance() (sympy.combinatorics.permutations.permutation method)": [[57, "sympy.combinatorics.permutations.Permutation.get_precedence_distance"]], "get_precedence_matrix() (sympy.combinatorics.permutations.permutation method)": [[57, "sympy.combinatorics.permutations.Permutation.get_precedence_matrix"]], "index() (sympy.combinatorics.permutations.permutation method)": [[57, "sympy.combinatorics.permutations.Permutation.index"]], "inversion_vector() (sympy.combinatorics.permutations.permutation method)": [[57, "sympy.combinatorics.permutations.Permutation.inversion_vector"]], "inversions() (sympy.combinatorics.permutations.permutation method)": [[57, "sympy.combinatorics.permutations.Permutation.inversions"]], "is_empty (sympy.combinatorics.permutations.permutation property)": [[57, "sympy.combinatorics.permutations.Permutation.is_Empty"]], "is_identity (sympy.combinatorics.permutations.permutation property)": [[57, "sympy.combinatorics.permutations.Permutation.is_Identity"]], "is_singleton (sympy.combinatorics.permutations.permutation property)": [[57, "sympy.combinatorics.permutations.Permutation.is_Singleton"]], "is_even (sympy.combinatorics.permutations.permutation property)": [[57, "sympy.combinatorics.permutations.Permutation.is_even"]], "is_odd (sympy.combinatorics.permutations.permutation property)": [[57, "sympy.combinatorics.permutations.Permutation.is_odd"]], "josephus() (sympy.combinatorics.permutations.permutation class method)": [[57, "sympy.combinatorics.permutations.Permutation.josephus"]], "length() (sympy.combinatorics.permutations.permutation method)": [[57, "sympy.combinatorics.permutations.Permutation.length"]], "list() (sympy.combinatorics.permutations.cycle method)": [[57, "sympy.combinatorics.permutations.Cycle.list"]], "list() (sympy.combinatorics.permutations.permutation method)": [[57, "sympy.combinatorics.permutations.Permutation.list"]], "max() (sympy.combinatorics.permutations.permutation method)": [[57, "sympy.combinatorics.permutations.Permutation.max"]], "min() (sympy.combinatorics.permutations.permutation method)": [[57, "sympy.combinatorics.permutations.Permutation.min"]], "mul_inv() (sympy.combinatorics.permutations.permutation method)": [[57, "sympy.combinatorics.permutations.Permutation.mul_inv"]], "next_lex() (sympy.combinatorics.permutations.permutation method)": [[57, "sympy.combinatorics.permutations.Permutation.next_lex"]], "next_nonlex() (sympy.combinatorics.permutations.permutation method)": [[57, "sympy.combinatorics.permutations.Permutation.next_nonlex"]], "next_trotterjohnson() (sympy.combinatorics.permutations.permutation method)": [[57, "sympy.combinatorics.permutations.Permutation.next_trotterjohnson"]], "order() (sympy.combinatorics.permutations.permutation method)": [[57, "sympy.combinatorics.permutations.Permutation.order"]], "parity() (sympy.combinatorics.permutations.permutation method)": [[57, "sympy.combinatorics.permutations.Permutation.parity"]], "random() (sympy.combinatorics.permutations.permutation class method)": [[57, "sympy.combinatorics.permutations.Permutation.random"]], "rank() (sympy.combinatorics.permutations.permutation method)": [[57, "sympy.combinatorics.permutations.Permutation.rank"]], "rank_nonlex() (sympy.combinatorics.permutations.permutation method)": [[57, "sympy.combinatorics.permutations.Permutation.rank_nonlex"]], "rank_trotterjohnson() (sympy.combinatorics.permutations.permutation method)": [[57, "sympy.combinatorics.permutations.Permutation.rank_trotterjohnson"]], "resize() (sympy.combinatorics.permutations.permutation method)": [[57, "sympy.combinatorics.permutations.Permutation.resize"]], "rmul() (sympy.combinatorics.permutations.permutation static method)": [[57, "sympy.combinatorics.permutations.Permutation.rmul"]], "rmul_with_af() (sympy.combinatorics.permutations.permutation class method)": [[57, "sympy.combinatorics.permutations.Permutation.rmul_with_af"]], "runs() (sympy.combinatorics.permutations.permutation method)": [[57, "sympy.combinatorics.permutations.Permutation.runs"]], "signature() (sympy.combinatorics.permutations.permutation method)": [[57, "sympy.combinatorics.permutations.Permutation.signature"]], "size (sympy.combinatorics.permutations.permutation property)": [[57, "sympy.combinatorics.permutations.Permutation.size"]], "support() (sympy.combinatorics.permutations.permutation method)": [[57, "sympy.combinatorics.permutations.Permutation.support"]], "symmetric() (sympy.combinatorics.generators method)": [[57, "sympy.combinatorics.generators.symmetric"]], "sympy.combinatorics.generators": [[57, "module-sympy.combinatorics.generators"]], "sympy.combinatorics.permutations": [[57, "module-sympy.combinatorics.permutations"]], "transpositions() (sympy.combinatorics.permutations.permutation method)": [[57, "sympy.combinatorics.permutations.Permutation.transpositions"]], "unrank_lex() (sympy.combinatorics.permutations.permutation class method)": [[57, "sympy.combinatorics.permutations.Permutation.unrank_lex"]], "unrank_nonlex() (sympy.combinatorics.permutations.permutation class method)": [[57, "sympy.combinatorics.permutations.Permutation.unrank_nonlex"]], "unrank_trotterjohnson() (sympy.combinatorics.permutations.permutation class method)": [[57, "sympy.combinatorics.permutations.Permutation.unrank_trotterjohnson"]], "polyhedron (class in sympy.combinatorics.polyhedron)": [[58, "sympy.combinatorics.polyhedron.Polyhedron"]], "array_form (sympy.combinatorics.polyhedron.polyhedron property)": [[58, "sympy.combinatorics.polyhedron.Polyhedron.array_form"]], "corners (sympy.combinatorics.polyhedron.polyhedron property)": [[58, "sympy.combinatorics.polyhedron.Polyhedron.corners"]], "cyclic_form (sympy.combinatorics.polyhedron.polyhedron property)": [[58, "sympy.combinatorics.polyhedron.Polyhedron.cyclic_form"]], "edges (sympy.combinatorics.polyhedron.polyhedron property)": [[58, "sympy.combinatorics.polyhedron.Polyhedron.edges"]], "faces (sympy.combinatorics.polyhedron.polyhedron property)": [[58, "sympy.combinatorics.polyhedron.Polyhedron.faces"]], "pgroup (sympy.combinatorics.polyhedron.polyhedron property)": [[58, "sympy.combinatorics.polyhedron.Polyhedron.pgroup"]], "reset() (sympy.combinatorics.polyhedron.polyhedron method)": [[58, "sympy.combinatorics.polyhedron.Polyhedron.reset"]], "rotate() (sympy.combinatorics.polyhedron.polyhedron method)": [[58, "sympy.combinatorics.polyhedron.Polyhedron.rotate"]], "size (sympy.combinatorics.polyhedron.polyhedron property)": [[58, "sympy.combinatorics.polyhedron.Polyhedron.size"]], "sympy.combinatorics.polyhedron": [[58, "module-sympy.combinatorics.polyhedron"]], "vertices (sympy.combinatorics.polyhedron.polyhedron property)": [[58, "sympy.combinatorics.polyhedron.Polyhedron.vertices"]], "prufer (class in sympy.combinatorics.prufer)": [[59, "sympy.combinatorics.prufer.Prufer"]], "edges() (sympy.combinatorics.prufer.prufer static method)": [[59, "sympy.combinatorics.prufer.Prufer.edges"]], "next() (sympy.combinatorics.prufer.prufer method)": [[59, "sympy.combinatorics.prufer.Prufer.next"]], "nodes (sympy.combinatorics.prufer.prufer property)": [[59, "sympy.combinatorics.prufer.Prufer.nodes"]], "prev() (sympy.combinatorics.prufer.prufer method)": [[59, "sympy.combinatorics.prufer.Prufer.prev"]], "prufer_rank() (sympy.combinatorics.prufer.prufer method)": [[59, "sympy.combinatorics.prufer.Prufer.prufer_rank"]], "prufer_repr (sympy.combinatorics.prufer.prufer property)": [[59, "sympy.combinatorics.prufer.Prufer.prufer_repr"]], "rank (sympy.combinatorics.prufer.prufer property)": [[59, "sympy.combinatorics.prufer.Prufer.rank"]], "size (sympy.combinatorics.prufer.prufer property)": [[59, "sympy.combinatorics.prufer.Prufer.size"]], "sympy.combinatorics.prufer": [[59, "module-sympy.combinatorics.prufer"]], "to_prufer() (sympy.combinatorics.prufer.prufer static method)": [[59, "sympy.combinatorics.prufer.Prufer.to_prufer"]], "to_tree() (sympy.combinatorics.prufer.prufer static method)": [[59, "sympy.combinatorics.prufer.Prufer.to_tree"]], "tree_repr (sympy.combinatorics.prufer.prufer property)": [[59, "sympy.combinatorics.prufer.Prufer.tree_repr"]], "unrank() (sympy.combinatorics.prufer.prufer class method)": [[59, "sympy.combinatorics.prufer.Prufer.unrank"]], "subset (class in sympy.combinatorics.subsets)": [[60, "sympy.combinatorics.subsets.Subset"]], "bitlist_from_subset() (sympy.combinatorics.subsets.subset class method)": [[60, "sympy.combinatorics.subsets.Subset.bitlist_from_subset"]], "cardinality (sympy.combinatorics.subsets.subset property)": [[60, "sympy.combinatorics.subsets.Subset.cardinality"]], "iterate_binary() (sympy.combinatorics.subsets.subset method)": [[60, "sympy.combinatorics.subsets.Subset.iterate_binary"]], "iterate_graycode() (sympy.combinatorics.subsets.subset method)": [[60, "sympy.combinatorics.subsets.Subset.iterate_graycode"]], "ksubsets() (sympy.combinatorics.subsets method)": [[60, "sympy.combinatorics.subsets.ksubsets"]], "next_binary() (sympy.combinatorics.subsets.subset method)": [[60, "sympy.combinatorics.subsets.Subset.next_binary"]], "next_gray() (sympy.combinatorics.subsets.subset method)": [[60, "sympy.combinatorics.subsets.Subset.next_gray"]], "next_lexicographic() (sympy.combinatorics.subsets.subset method)": [[60, "sympy.combinatorics.subsets.Subset.next_lexicographic"]], "prev_binary() (sympy.combinatorics.subsets.subset method)": [[60, "sympy.combinatorics.subsets.Subset.prev_binary"]], "prev_gray() (sympy.combinatorics.subsets.subset method)": [[60, "sympy.combinatorics.subsets.Subset.prev_gray"]], "prev_lexicographic() (sympy.combinatorics.subsets.subset method)": [[60, "sympy.combinatorics.subsets.Subset.prev_lexicographic"]], "rank_binary (sympy.combinatorics.subsets.subset property)": [[60, "sympy.combinatorics.subsets.Subset.rank_binary"]], "rank_gray (sympy.combinatorics.subsets.subset property)": [[60, "sympy.combinatorics.subsets.Subset.rank_gray"]], "rank_lexicographic (sympy.combinatorics.subsets.subset property)": [[60, "sympy.combinatorics.subsets.Subset.rank_lexicographic"]], "size (sympy.combinatorics.subsets.subset property)": [[60, "sympy.combinatorics.subsets.Subset.size"]], "subset (sympy.combinatorics.subsets.subset property)": [[60, "sympy.combinatorics.subsets.Subset.subset"]], "subset_from_bitlist() (sympy.combinatorics.subsets.subset class method)": [[60, "sympy.combinatorics.subsets.Subset.subset_from_bitlist"]], "subset_indices() (sympy.combinatorics.subsets.subset class method)": [[60, "sympy.combinatorics.subsets.Subset.subset_indices"]], "superset (sympy.combinatorics.subsets.subset property)": [[60, "sympy.combinatorics.subsets.Subset.superset"]], "superset_size (sympy.combinatorics.subsets.subset property)": [[60, "sympy.combinatorics.subsets.Subset.superset_size"]], "sympy.combinatorics.subsets": [[60, "module-sympy.combinatorics.subsets"]], "unrank_binary() (sympy.combinatorics.subsets.subset class method)": [[60, "sympy.combinatorics.subsets.Subset.unrank_binary"]], "unrank_gray() (sympy.combinatorics.subsets.subset class method)": [[60, "sympy.combinatorics.subsets.Subset.unrank_gray"]], "bsgs_direct_product() (in module sympy.combinatorics.tensor_can)": [[61, "sympy.combinatorics.tensor_can.bsgs_direct_product"]], "canonicalize() (in module sympy.combinatorics.tensor_can)": [[61, "sympy.combinatorics.tensor_can.canonicalize"]], "double_coset_can_rep() (in module sympy.combinatorics.tensor_can)": [[61, "sympy.combinatorics.tensor_can.double_coset_can_rep"]], "get_symmetric_group_sgs() (in module sympy.combinatorics.tensor_can)": [[61, "sympy.combinatorics.tensor_can.get_symmetric_group_sgs"]], "sympy.combinatorics.tensor_can": [[61, "module-sympy.combinatorics.tensor_can"]], "_cmp_perm_lists() (in module sympy.combinatorics.testutil)": [[62, "sympy.combinatorics.testutil._cmp_perm_lists"]], "_naive_list_centralizer() (in module sympy.combinatorics.testutil)": [[62, "sympy.combinatorics.testutil._naive_list_centralizer"]], "_verify_bsgs() (in module sympy.combinatorics.testutil)": [[62, "sympy.combinatorics.testutil._verify_bsgs"]], "_verify_centralizer() (in module sympy.combinatorics.testutil)": [[62, "sympy.combinatorics.testutil._verify_centralizer"]], "_verify_normal_closure() (in module sympy.combinatorics.testutil)": [[62, "sympy.combinatorics.testutil._verify_normal_closure"]], "sympy.combinatorics.testutil": [[62, "module-sympy.combinatorics.testutil"]], "_base_ordering() (in module sympy.combinatorics.util)": [[63, "sympy.combinatorics.util._base_ordering"]], "_check_cycles_alt_sym() (in module sympy.combinatorics.util)": [[63, "sympy.combinatorics.util._check_cycles_alt_sym"]], "_distribute_gens_by_base() (in module sympy.combinatorics.util)": [[63, "sympy.combinatorics.util._distribute_gens_by_base"]], "_handle_precomputed_bsgs() (in module sympy.combinatorics.util)": [[63, "sympy.combinatorics.util._handle_precomputed_bsgs"]], "_orbits_transversals_from_bsgs() (in module sympy.combinatorics.util)": [[63, "sympy.combinatorics.util._orbits_transversals_from_bsgs"]], "_remove_gens() (in module sympy.combinatorics.util)": [[63, "sympy.combinatorics.util._remove_gens"]], "_strip() (in module sympy.combinatorics.util)": [[63, "sympy.combinatorics.util._strip"]], "_strong_gens_from_distr() (in module sympy.combinatorics.util)": [[63, "sympy.combinatorics.util._strong_gens_from_distr"]], "sympy.combinatorics.util": [[63, "module-sympy.combinatorics.util"]], "exprwithintlimits (class in sympy.concrete.expr_with_intlimits)": [[64, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits"]], "product (class in sympy.concrete.products)": [[64, "sympy.concrete.products.Product"]], "sum (class in sympy.concrete.summations)": [[64, "sympy.concrete.summations.Sum"]], "change_index() (sympy.concrete.expr_with_intlimits.exprwithintlimits method)": [[64, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits.change_index"]], "euler_maclaurin() (sympy.concrete.summations.sum method)": [[64, "sympy.concrete.summations.Sum.euler_maclaurin"]], "eval_zeta_function() (sympy.concrete.summations.sum method)": [[64, "sympy.concrete.summations.Sum.eval_zeta_function"]], "gosper_normal() (in module sympy.concrete.gosper)": [[64, "sympy.concrete.gosper.gosper_normal"]], "gosper_sum() (in module sympy.concrete.gosper)": [[64, "sympy.concrete.gosper.gosper_sum"]], "gosper_term() (in module sympy.concrete.gosper)": [[64, "sympy.concrete.gosper.gosper_term"]], "has_empty_sequence (sympy.concrete.expr_with_intlimits.exprwithintlimits property)": [[64, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits.has_empty_sequence"]], "index() (sympy.concrete.expr_with_intlimits.exprwithintlimits method)": [[64, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits.index"]], "is_absolutely_convergent() (sympy.concrete.summations.sum method)": [[64, "sympy.concrete.summations.Sum.is_absolutely_convergent"]], "is_convergent() (sympy.concrete.products.product method)": [[64, "sympy.concrete.products.Product.is_convergent"]], "is_convergent() (sympy.concrete.summations.sum method)": [[64, "sympy.concrete.summations.Sum.is_convergent"]], "product() (in module sympy.concrete.products)": [[64, "sympy.concrete.products.product"]], "reorder() (sympy.concrete.expr_with_intlimits.exprwithintlimits method)": [[64, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits.reorder"]], "reorder_limit() (sympy.concrete.expr_with_intlimits.exprwithintlimits method)": [[64, "sympy.concrete.expr_with_intlimits.ExprWithIntLimits.reorder_limit"]], "reverse_order() (sympy.concrete.products.product method)": [[64, "sympy.concrete.products.Product.reverse_order"]], "reverse_order() (sympy.concrete.summations.sum method)": [[64, "sympy.concrete.summations.Sum.reverse_order"]], "summation() (in module sympy.concrete.summations)": [[64, "sympy.concrete.summations.summation"]], "add (class in sympy.core.add)": [[65, "sympy.core.add.Add"]], "algebraicnumber (class in sympy.core.numbers)": [[65, "sympy.core.numbers.AlgebraicNumber"]], "atom (class in sympy.core.basic)": [[65, "sympy.core.basic.Atom"]], "atomicexpr (class in sympy.core.expr)": [[65, "sympy.core.expr.AtomicExpr"]], "basic (class in sympy.core.basic)": [[65, "sympy.core.basic.Basic"]], "booleankind (in module sympy.core.kind)": [[65, "sympy.core.kind.BooleanKind"]], "catalan (class in sympy.core.numbers)": [[65, "sympy.core.numbers.Catalan"]], "complexinfinity (class in sympy.core.numbers)": [[65, "sympy.core.numbers.ComplexInfinity"]], "derivative (class in sympy.core.function)": [[65, "sympy.core.function.Derivative"]], "dict (class in sympy.core.containers)": [[65, "sympy.core.containers.Dict"]], "dummy (class in sympy.core.symbol)": [[65, "sympy.core.symbol.Dummy"]], "eq (in module sympy.core.relational)": [[65, "sympy.core.relational.Eq"]], "equality (class in sympy.core.relational)": [[65, "sympy.core.relational.Equality"]], "eulergamma (class in sympy.core.numbers)": [[65, "sympy.core.numbers.EulerGamma"]], "evalfmixin (class in sympy.core.evalf)": [[65, "sympy.core.evalf.EvalfMixin"]], "exp1 (class in sympy.core.numbers)": [[65, "sympy.core.numbers.Exp1"]], "expr (class in sympy.core.expr)": [[65, "sympy.core.expr.Expr"]], "float (class in sympy.core.numbers)": [[65, "sympy.core.numbers.Float"]], "function (class in sympy.core.function)": [[65, "sympy.core.function.Function"]], "functionclass (class in sympy.core.function)": [[65, "sympy.core.function.FunctionClass"]], "ge (in module sympy.core.relational)": [[65, "sympy.core.relational.Ge"]], "goldenratio (class in sympy.core.numbers)": [[65, "sympy.core.numbers.GoldenRatio"]], "greaterthan (class in sympy.core.relational)": [[65, "sympy.core.relational.GreaterThan"]], "gt (in module sympy.core.relational)": [[65, "sympy.core.relational.Gt"]], "half (class in sympy.core.numbers)": [[65, "sympy.core.numbers.Half"]], "imaginaryunit (class in sympy.core.numbers)": [[65, "sympy.core.numbers.ImaginaryUnit"]], "infinity (class in sympy.core.numbers)": [[65, "sympy.core.numbers.Infinity"]], "integer (class in sympy.core.numbers)": [[65, "sympy.core.numbers.Integer"]], "kind (class in sympy.core.kind)": [[65, "sympy.core.kind.Kind"]], "lambda (class in sympy.core.function)": [[65, "sympy.core.function.Lambda"]], "le (in module sympy.core.relational)": [[65, "sympy.core.relational.Le"]], "lessthan (class in sympy.core.relational)": [[65, "sympy.core.relational.LessThan"]], "lt (in module sympy.core.relational)": [[65, "sympy.core.relational.Lt"]], "mod (class in sympy.core.mod)": [[65, "sympy.core.mod.Mod"]], "mul (class in sympy.core.mul)": [[65, "sympy.core.mul.Mul"]], "n() (in module sympy.core.evalf)": [[65, "sympy.core.evalf.N"]], "nan (class in sympy.core.numbers)": [[65, "sympy.core.numbers.NaN"]], "ne (in module sympy.core.relational)": [[65, "sympy.core.relational.Ne"]], "negativeinfinity (class in sympy.core.numbers)": [[65, "sympy.core.numbers.NegativeInfinity"]], "negativeone (class in sympy.core.numbers)": [[65, "sympy.core.numbers.NegativeOne"]], "number (class in sympy.core.numbers)": [[65, "sympy.core.numbers.Number"]], "numberkind (in module sympy.core.kind)": [[65, "sympy.core.kind.NumberKind"]], "numbersymbol (class in sympy.core.numbers)": [[65, "sympy.core.numbers.NumberSymbol"]], "one (class in sympy.core.numbers)": [[65, "sympy.core.numbers.One"]], "pep 335": [[65, "index-0"], [65, "index-1"], [65, "index-2"], [65, "index-3"]], "pi (class in sympy.core.numbers)": [[65, "sympy.core.numbers.Pi"]], "poleerror (class in sympy.core.function)": [[65, "sympy.core.function.PoleError"]], "pow (class in sympy.core.power)": [[65, "sympy.core.power.Pow"]], "precisionexhausted (class in sympy.core.evalf)": [[65, "sympy.core.evalf.PrecisionExhausted"]], "python enhancement proposals": [[65, "index-0"], [65, "index-1"], [65, "index-2"], [65, "index-3"]], "rational (class in sympy.core.numbers)": [[65, "sympy.core.numbers.Rational"]], "realnumber (in module sympy.core.numbers)": [[65, "sympy.core.numbers.RealNumber"]], "rel (in module sympy.core.relational)": [[65, "sympy.core.relational.Rel"]], "relational (class in sympy.core.relational)": [[65, "sympy.core.relational.Relational"]], "singleton (class in sympy.core.singleton)": [[65, "sympy.core.singleton.Singleton"]], "singletonregistry (class in sympy.core.singleton)": [[65, "sympy.core.singleton.SingletonRegistry"]], "strictgreaterthan (class in sympy.core.relational)": [[65, "sympy.core.relational.StrictGreaterThan"]], "strictlessthan (class in sympy.core.relational)": [[65, "sympy.core.relational.StrictLessThan"]], "subs (class in sympy.core.function)": [[65, "sympy.core.function.Subs"]], "symbol (class in sympy.core.symbol)": [[65, "sympy.core.symbol.Symbol"]], "tribonacciconstant (class in sympy.core.numbers)": [[65, "sympy.core.numbers.TribonacciConstant"]], "tuple (class in sympy.core.containers)": [[65, "sympy.core.containers.Tuple"]], "tuplekind (class in sympy.core.containers)": [[65, "sympy.core.containers.TupleKind"]], "undefinedkind (in module sympy.core.kind)": [[65, "sympy.core.kind.UndefinedKind"]], "unequality (class in sympy.core.relational)": [[65, "sympy.core.relational.Unequality"]], "unevaluatedexpr (class in sympy.core.expr)": [[65, "sympy.core.expr.UnevaluatedExpr"]], "wild (class in sympy.core.symbol)": [[65, "sympy.core.symbol.Wild"]], "wildfunction (class in sympy.core.function)": [[65, "sympy.core.function.WildFunction"]], "zero (class in sympy.core.numbers)": [[65, "sympy.core.numbers.Zero"]], "__cacheit() (in module sympy.core.cache)": [[65, "sympy.core.cache.__cacheit"]], "__new__() (sympy.core.numbers.algebraicnumber static method)": [[65, "sympy.core.numbers.AlgebraicNumber.__new__"]], "_diff_wrt (sympy.core.function.derivative property)": [[65, "sympy.core.function.Derivative._diff_wrt"]], "_randint() (in module sympy.core.random)": [[65, "sympy.core.random._randint"]], "_randrange() (in module sympy.core.random)": [[65, "sympy.core.random._randrange"]], "_sort_variable_count() (sympy.core.function.derivative class method)": [[65, "sympy.core.function.Derivative._sort_variable_count"]], "algebraic": [[65, "term-algebraic"]], "antihermitian": [[65, "term-antihermitian"]], "apart() (sympy.core.expr.expr method)": [[65, "sympy.core.expr.Expr.apart"]], "approximation() (sympy.core.numbers.numbersymbol method)": [[65, "sympy.core.numbers.NumberSymbol.approximation"]], "args (sympy.core.basic.basic property)": [[65, "sympy.core.basic.Basic.args"]], "args_cnc() (sympy.core.expr.expr method)": [[65, "sympy.core.expr.Expr.args_cnc"]], "as_base_exp() (sympy.core.function.function method)": [[65, "sympy.core.function.Function.as_base_exp"]], "as_base_exp() (sympy.core.power.pow method)": [[65, "sympy.core.power.Pow.as_base_exp"]], "as_coeff_add() (sympy.core.add.add method)": [[65, "sympy.core.add.Add.as_coeff_Add"], [65, "sympy.core.add.Add.as_coeff_add"]], "as_coeff_add() (sympy.core.expr.expr method)": [[65, "sympy.core.expr.Expr.as_coeff_Add"], [65, "sympy.core.expr.Expr.as_coeff_add"]], "as_coeff_add() (sympy.core.numbers.number method)": [[65, "sympy.core.numbers.Number.as_coeff_Add"]], "as_coeff_add() (sympy.core.numbers.rational method)": [[65, "sympy.core.numbers.Rational.as_coeff_Add"]], "as_coeff_mul() (sympy.core.expr.expr method)": [[65, "sympy.core.expr.Expr.as_coeff_Mul"], [65, "sympy.core.expr.Expr.as_coeff_mul"]], "as_coeff_mul() (sympy.core.mul.mul method)": [[65, "sympy.core.mul.Mul.as_coeff_Mul"]], "as_coeff_mul() (sympy.core.numbers.number method)": [[65, "sympy.core.numbers.Number.as_coeff_Mul"]], "as_coeff_mul() (sympy.core.numbers.rational method)": [[65, "sympy.core.numbers.Rational.as_coeff_Mul"]], "as_coeff_exponent() (sympy.core.expr.expr method)": [[65, "sympy.core.expr.Expr.as_coeff_exponent"]], "as_coefficient() (sympy.core.expr.expr method)": [[65, "sympy.core.expr.Expr.as_coefficient"]], "as_coefficients_dict() (sympy.core.expr.expr method)": [[65, "sympy.core.expr.Expr.as_coefficients_dict"]], "as_content_primitive() (sympy.core.add.add method)": [[65, "sympy.core.add.Add.as_content_primitive"]], "as_content_primitive() (sympy.core.basic.basic method)": [[65, "sympy.core.basic.Basic.as_content_primitive"]], "as_content_primitive() (sympy.core.expr.expr method)": [[65, "sympy.core.expr.Expr.as_content_primitive"]], "as_content_primitive() (sympy.core.mul.mul method)": [[65, "sympy.core.mul.Mul.as_content_primitive"]], "as_content_primitive() (sympy.core.numbers.rational method)": [[65, "sympy.core.numbers.Rational.as_content_primitive"]], "as_content_primitive() (sympy.core.power.pow method)": [[65, "sympy.core.power.Pow.as_content_primitive"]], "as_dummy() (sympy.core.basic.basic method)": [[65, "sympy.core.basic.Basic.as_dummy"]], "as_expr() (sympy.core.expr.expr method)": [[65, "sympy.core.expr.Expr.as_expr"]], "as_expr() (sympy.core.numbers.algebraicnumber method)": [[65, "sympy.core.numbers.AlgebraicNumber.as_expr"]], "as_finite_difference() (sympy.core.function.derivative method)": [[65, "sympy.core.function.Derivative.as_finite_difference"]], "as_independent() (sympy.core.expr.expr method)": [[65, "sympy.core.expr.Expr.as_independent"]], "as_leading_term() (sympy.core.expr.expr method)": [[65, "sympy.core.expr.Expr.as_leading_term"]], "as_numer_denom() (sympy.core.add.add method)": [[65, "sympy.core.add.Add.as_numer_denom"]], "as_numer_denom() (sympy.core.expr.expr method)": [[65, "sympy.core.expr.Expr.as_numer_denom"]], "as_ordered_factors() (sympy.core.expr.expr method)": [[65, "sympy.core.expr.Expr.as_ordered_factors"]], "as_ordered_factors() (sympy.core.mul.mul method)": [[65, "sympy.core.mul.Mul.as_ordered_factors"]], "as_ordered_terms() (sympy.core.expr.expr method)": [[65, "sympy.core.expr.Expr.as_ordered_terms"]], "as_poly() (sympy.core.expr.expr method)": [[65, "sympy.core.expr.Expr.as_poly"]], "as_poly() (sympy.core.numbers.algebraicnumber method)": [[65, "sympy.core.numbers.AlgebraicNumber.as_poly"]], "as_poly() (sympy.core.relational.equality method)": [[65, "sympy.core.relational.Equality.as_poly"]], "as_powers_dict() (sympy.core.expr.expr method)": [[65, "sympy.core.expr.Expr.as_powers_dict"]], "as_real_imag() (sympy.core.add.add method)": [[65, "sympy.core.add.Add.as_real_imag"]], "as_real_imag() (sympy.core.expr.expr method)": [[65, "sympy.core.expr.Expr.as_real_imag"]], "as_terms() (sympy.core.expr.expr method)": [[65, "sympy.core.expr.Expr.as_terms"]], "as_two_terms() (sympy.core.add.add method)": [[65, "sympy.core.add.Add.as_two_terms"]], "as_two_terms() (sympy.core.mul.mul method)": [[65, "sympy.core.mul.Mul.as_two_terms"]], "aseries() (sympy.core.expr.expr method)": [[65, "sympy.core.expr.Expr.aseries"]], "assumptions0 (sympy.core.basic.basic property)": [[65, "sympy.core.basic.Basic.assumptions0"]], "atoms() (sympy.core.basic.basic method)": [[65, "sympy.core.basic.Basic.atoms"]], "bottom_up() (in module sympy.core.traversal)": [[65, "sympy.core.traversal.bottom_up"]], "bound_symbols (sympy.core.function.lambda property)": [[65, "sympy.core.function.Lambda.bound_symbols"]], "bound_symbols (sympy.core.function.subs property)": [[65, "sympy.core.function.Subs.bound_symbols"]], "cancel() (sympy.core.expr.expr method)": [[65, "sympy.core.expr.Expr.cancel"]], "canonical (sympy.core.relational.relational property)": [[65, "sympy.core.relational.Relational.canonical"]], "canonical_variables (sympy.core.basic.basic property)": [[65, "sympy.core.basic.Basic.canonical_variables"]], "class_key() (sympy.core.basic.basic class method)": [[65, "sympy.core.basic.Basic.class_key"]], "coeff() (sympy.core.expr.expr method)": [[65, "sympy.core.expr.Expr.coeff"]], "coeffs() (sympy.core.numbers.algebraicnumber method)": [[65, "sympy.core.numbers.AlgebraicNumber.coeffs"]], "cofactors() (sympy.core.numbers.number method)": [[65, "sympy.core.numbers.Number.cofactors"]], "collect() (sympy.core.expr.expr method)": [[65, "sympy.core.expr.Expr.collect"]], "combsimp() (sympy.core.expr.expr method)": [[65, "sympy.core.expr.Expr.combsimp"]], "commutative": [[65, "term-commutative"]], "compare() (sympy.core.basic.basic method)": [[65, "sympy.core.basic.Basic.compare"]], "complex": [[65, "term-complex"]], "composite": [[65, "term-composite"]], "compute_leading_term() (sympy.core.expr.expr method)": [[65, "sympy.core.expr.Expr.compute_leading_term"]], "conjugate() (sympy.core.expr.expr method)": [[65, "sympy.core.expr.Expr.conjugate"]], "could_extract_minus_sign() (sympy.core.expr.expr method)": [[65, "sympy.core.expr.Expr.could_extract_minus_sign"]], "count() (sympy.core.basic.basic method)": [[65, "sympy.core.basic.Basic.count"]], "count_ops() (in module sympy.core.function)": [[65, "sympy.core.function.count_ops"]], "count_ops() (sympy.core.basic.basic method)": [[65, "sympy.core.basic.Basic.count_ops"]], "default_sort_key() (in module sympy.core.sorting)": [[65, "sympy.core.sorting.default_sort_key"]], "diff() (in module sympy.core.function)": [[65, "sympy.core.function.diff"]], "doit() (sympy.core.basic.basic method)": [[65, "sympy.core.basic.Basic.doit"]], "doit_numerically() (sympy.core.function.derivative method)": [[65, "sympy.core.function.Derivative.doit_numerically"]], "dummy_eq() (sympy.core.basic.basic method)": [[65, "sympy.core.basic.Basic.dummy_eq"]], "equal_valued() (in module sympy.core.numbers)": [[65, "sympy.core.numbers.equal_valued"]], "equals() (sympy.core.expr.expr method)": [[65, "sympy.core.expr.Expr.equals"]], "equals() (sympy.core.relational.relational method)": [[65, "sympy.core.relational.Relational.equals"]], "evalf() (sympy.core.evalf.evalfmixin method)": [[65, "sympy.core.evalf.EvalfMixin.evalf"]], "even": [[65, "term-even"]], "expand() (in module sympy.core.function)": [[65, "sympy.core.function.expand"]], "expand() (sympy.core.expr.expr method)": [[65, "sympy.core.expr.Expr.expand"]], "expand_complex() (in module sympy.core.function)": [[65, "sympy.core.function.expand_complex"]], "expand_func() (in module sympy.core.function)": [[65, "sympy.core.function.expand_func"]], "expand_log() (in module sympy.core.function)": [[65, "sympy.core.function.expand_log"]], "expand_mul() (in module sympy.core.function)": [[65, "sympy.core.function.expand_mul"]], "expand_multinomial() (in module sympy.core.function)": [[65, "sympy.core.function.expand_multinomial"]], "expand_power_base() (in module sympy.core.function)": [[65, "sympy.core.function.expand_power_base"]], "expand_power_exp() (in module sympy.core.function)": [[65, "sympy.core.function.expand_power_exp"]], "expand_trig() (in module sympy.core.function)": [[65, "sympy.core.function.expand_trig"]], "expr (sympy.core.function.lambda property)": [[65, "sympy.core.function.Lambda.expr"]], "expr (sympy.core.function.subs property)": [[65, "sympy.core.function.Subs.expr"]], "expr_free_symbols (sympy.core.expr.expr property)": [[65, "sympy.core.expr.Expr.expr_free_symbols"]], "extended_negative": [[65, "term-extended_negative"]], "extended_nonnegative": [[65, "term-extended_nonnegative"]], "extended_nonpositive": [[65, "term-extended_nonpositive"]], "extended_nonzero": [[65, "term-extended_nonzero"]], "extended_positive": [[65, "term-extended_positive"]], "extended_real": [[65, "term-extended_real"]], "extract_additively() (sympy.core.expr.expr method)": [[65, "sympy.core.expr.Expr.extract_additively"]], "extract_branch_factor() (sympy.core.expr.expr method)": [[65, "sympy.core.expr.Expr.extract_branch_factor"]], "extract_leading_order() (sympy.core.add.add method)": [[65, "sympy.core.add.Add.extract_leading_order"]], "extract_multiplicatively() (sympy.core.expr.expr method)": [[65, "sympy.core.expr.Expr.extract_multiplicatively"]], "factor() (sympy.core.expr.expr method)": [[65, "sympy.core.expr.Expr.factor"]], "factor_terms() (in module sympy.core.exprtools)": [[65, "sympy.core.exprtools.factor_terms"]], "factors() (sympy.core.numbers.rational method)": [[65, "sympy.core.numbers.Rational.factors"]], "fdiff() (sympy.core.function.function method)": [[65, "sympy.core.function.Function.fdiff"]], "field_element() (sympy.core.numbers.algebraicnumber method)": [[65, "sympy.core.numbers.AlgebraicNumber.field_element"]], "find() (sympy.core.basic.basic method)": [[65, "sympy.core.basic.Basic.find"]], "finite": [[65, "term-finite"]], "flatten() (sympy.core.add.add class method)": [[65, "sympy.core.add.Add.flatten"]], "flatten() (sympy.core.mul.mul class method)": [[65, "sympy.core.mul.Mul.flatten"]], "fourier_series() (sympy.core.expr.expr method)": [[65, "sympy.core.expr.Expr.fourier_series"]], "fps() (sympy.core.expr.expr method)": [[65, "sympy.core.expr.Expr.fps"]], "free_symbols (sympy.core.basic.basic property)": [[65, "sympy.core.basic.Basic.free_symbols"]], "fromiter() (sympy.core.basic.basic class method)": [[65, "sympy.core.basic.Basic.fromiter"]], "func (sympy.core.basic.basic property)": [[65, "sympy.core.basic.Basic.func"]], "gammasimp() (sympy.core.expr.expr method)": [[65, "sympy.core.expr.Expr.gammasimp"]], "gcd() (sympy.core.numbers.number method)": [[65, "sympy.core.numbers.Number.gcd"]], "gcd_terms() (in module sympy.core.exprtools)": [[65, "sympy.core.exprtools.gcd_terms"]], "get() (sympy.core.containers.dict method)": [[65, "sympy.core.containers.Dict.get"]], "geto() (sympy.core.expr.expr method)": [[65, "sympy.core.expr.Expr.getO"]], "getn() (sympy.core.expr.expr method)": [[65, "sympy.core.expr.Expr.getn"]], "has() (sympy.core.basic.basic method)": [[65, "sympy.core.basic.Basic.has"]], "has_free() (sympy.core.basic.basic method)": [[65, "sympy.core.basic.Basic.has_free"]], "has_xfree() (sympy.core.basic.basic method)": [[65, "sympy.core.basic.Basic.has_xfree"]], "hermitian": [[65, "term-hermitian"]], "igcd() (in module sympy.core.numbers)": [[65, "sympy.core.numbers.igcd"]], "ilcm() (in module sympy.core.numbers)": [[65, "sympy.core.numbers.ilcm"]], "imaginary": [[65, "term-imaginary"]], "index() (sympy.core.containers.tuple method)": [[65, "sympy.core.containers.Tuple.index"]], "infinite": [[65, "term-infinite"]], "integer": [[65, "term-integer"]], "integer_log() (in module sympy.core.power)": [[65, "sympy.core.power.integer_log"]], "integer_nthroot() (in module sympy.core.power)": [[65, "sympy.core.power.integer_nthroot"]], "integrate() (sympy.core.expr.expr method)": [[65, "sympy.core.expr.Expr.integrate"]], "integrate() (sympy.core.relational.equality method)": [[65, "sympy.core.relational.Equality.integrate"]], "invert() (sympy.core.expr.expr method)": [[65, "sympy.core.expr.Expr.invert"]], "irrational": [[65, "term-irrational"]], "is_algebraic_expr() (sympy.core.expr.expr method)": [[65, "sympy.core.expr.Expr.is_algebraic_expr"]], "is_aliased (sympy.core.numbers.algebraicnumber property)": [[65, "sympy.core.numbers.AlgebraicNumber.is_aliased"]], "is_comparable (sympy.core.basic.basic property)": [[65, "sympy.core.basic.Basic.is_comparable"]], "is_constant() (sympy.core.expr.expr method)": [[65, "sympy.core.expr.Expr.is_constant"]], "is_identity (sympy.core.function.lambda property)": [[65, "sympy.core.function.Lambda.is_identity"]], "is_meromorphic() (sympy.core.expr.expr method)": [[65, "sympy.core.expr.Expr.is_meromorphic"]], "is_number (sympy.core.expr.expr property)": [[65, "sympy.core.expr.Expr.is_number"]], "is_polynomial() (sympy.core.expr.expr method)": [[65, "sympy.core.expr.Expr.is_polynomial"]], "is_primitive_element (sympy.core.numbers.algebraicnumber property)": [[65, "sympy.core.numbers.AlgebraicNumber.is_primitive_element"]], "is_rational_function() (sympy.core.expr.expr method)": [[65, "sympy.core.expr.Expr.is_rational_function"]], "is_singular() (sympy.core.function.function class method)": [[65, "sympy.core.function.Function.is_singular"]], "items() (sympy.core.containers.dict method)": [[65, "sympy.core.containers.Dict.items"]], "keys() (sympy.core.containers.dict method)": [[65, "sympy.core.containers.Dict.keys"]], "kind (sympy.core.containers.tuple property)": [[65, "sympy.core.containers.Tuple.kind"]], "lcm() (sympy.core.numbers.number method)": [[65, "sympy.core.numbers.Number.lcm"]], "leadterm() (sympy.core.expr.expr method)": [[65, "sympy.core.expr.Expr.leadterm"]], "lhs (sympy.core.relational.relational property)": [[65, "sympy.core.relational.Relational.lhs"]], "limit() (sympy.core.expr.expr method)": [[65, "sympy.core.expr.Expr.limit"]], "limit_denominator() (sympy.core.numbers.rational method)": [[65, "sympy.core.numbers.Rational.limit_denominator"]], "lseries() (sympy.core.expr.expr method)": [[65, "sympy.core.expr.Expr.lseries"]], "match() (sympy.core.basic.basic method)": [[65, "sympy.core.basic.Basic.match"]], "matches() (sympy.core.basic.basic method)": [[65, "sympy.core.basic.Basic.matches"]], "minpoly_of_element() (sympy.core.numbers.algebraicnumber method)": [[65, "sympy.core.numbers.AlgebraicNumber.minpoly_of_element"]], "mod_inverse() (in module sympy.core.numbers)": [[65, "sympy.core.numbers.mod_inverse"]], "n() (sympy.core.evalf.evalfmixin method)": [[65, "sympy.core.evalf.EvalfMixin.n"]], "nargs (sympy.core.function.functionclass property)": [[65, "sympy.core.function.FunctionClass.nargs"]], "native_coeffs() (sympy.core.numbers.algebraicnumber method)": [[65, "sympy.core.numbers.AlgebraicNumber.native_coeffs"]], "negated (sympy.core.relational.relational property)": [[65, "sympy.core.relational.Relational.negated"]], "negative": [[65, "term-negative"]], "nfloat() (in module sympy.core.function)": [[65, "sympy.core.function.nfloat"]], "nonnegative": [[65, "term-nonnegative"]], "nonpositive": [[65, "term-nonpositive"]], "nonzero": [[65, "term-nonzero"]], "normal() (sympy.core.expr.expr method)": [[65, "sympy.core.expr.Expr.normal"]], "nseries() (sympy.core.expr.expr method)": [[65, "sympy.core.expr.Expr.nseries"]], "nsimplify() (sympy.core.expr.expr method)": [[65, "sympy.core.expr.Expr.nsimplify"]], "odd": [[65, "term-odd"]], "ordered() (in module sympy.core.sorting)": [[65, "sympy.core.sorting.ordered"]], "point (sympy.core.function.subs property)": [[65, "sympy.core.function.Subs.point"]], "positive": [[65, "term-positive"]], "postorder_traversal() (in module sympy.core.traversal)": [[65, "sympy.core.traversal.postorder_traversal"]], "powsimp() (sympy.core.expr.expr method)": [[65, "sympy.core.expr.Expr.powsimp"]], "preorder_traversal() (in module sympy.core.traversal)": [[65, "sympy.core.traversal.preorder_traversal"]], "prime": [[65, "term-prime"]], "primitive() (sympy.core.add.add method)": [[65, "sympy.core.add.Add.primitive"]], "primitive() (sympy.core.expr.expr method)": [[65, "sympy.core.expr.Expr.primitive"]], "primitive_element() (sympy.core.numbers.algebraicnumber method)": [[65, "sympy.core.numbers.AlgebraicNumber.primitive_element"]], "prod() (in module sympy.core.mul)": [[65, "sympy.core.mul.prod"]], "radsimp() (sympy.core.expr.expr method)": [[65, "sympy.core.expr.Expr.radsimp"]], "random_complex_number() (in module sympy.core.random)": [[65, "sympy.core.random.random_complex_number"]], "rational": [[65, "term-rational"]], "ratsimp() (sympy.core.expr.expr method)": [[65, "sympy.core.expr.Expr.ratsimp"]], "rcall() (sympy.core.basic.basic method)": [[65, "sympy.core.basic.Basic.rcall"]], "real": [[65, "term-real"]], "refine() (sympy.core.basic.basic method)": [[65, "sympy.core.basic.Basic.refine"]], "removeo() (sympy.core.expr.expr method)": [[65, "sympy.core.expr.Expr.removeO"]], "replace() (sympy.core.basic.basic method)": [[65, "sympy.core.basic.Basic.replace"]], "reversed (sympy.core.relational.relational property)": [[65, "sympy.core.relational.Relational.reversed"]], "reversedsign (sympy.core.relational.relational property)": [[65, "sympy.core.relational.Relational.reversedsign"]], "rewrite() (sympy.core.basic.basic method)": [[65, "sympy.core.basic.Basic.rewrite"]], "rhs (sympy.core.relational.relational property)": [[65, "sympy.core.relational.Relational.rhs"]], "round() (sympy.core.expr.expr method)": [[65, "sympy.core.expr.Expr.round"]], "separate() (sympy.core.expr.expr method)": [[65, "sympy.core.expr.Expr.separate"]], "series() (sympy.core.expr.expr method)": [[65, "sympy.core.expr.Expr.series"]], "seterr() (in module sympy.core.numbers)": [[65, "sympy.core.numbers.seterr"]], "signature (sympy.core.function.lambda property)": [[65, "sympy.core.function.Lambda.signature"]], "simplify() (sympy.core.basic.basic method)": [[65, "sympy.core.basic.Basic.simplify"]], "sort_key() (sympy.core.basic.basic method)": [[65, "sympy.core.basic.Basic.sort_key"]], "strict (sympy.core.relational.relational property)": [[65, "sympy.core.relational.Relational.strict"]], "subs() (sympy.core.basic.basic method)": [[65, "sympy.core.basic.Basic.subs"]], "symbols() (in module sympy.core.symbol)": [[65, "sympy.core.symbol.symbols"]], "sympify() (in module sympy.core.sympify)": [[65, "sympy.core.sympify.sympify"]], "sympy.core.add": [[65, "module-sympy.core.add"]], "sympy.core.assumptions": [[65, "module-sympy.core.assumptions"]], "sympy.core.basic": [[65, "module-sympy.core.basic"]], "sympy.core.cache": [[65, "module-sympy.core.cache"]], "sympy.core.containers": [[65, "module-sympy.core.containers"]], "sympy.core.evalf": [[65, "module-sympy.core.evalf"]], "sympy.core.expr": [[65, "module-sympy.core.expr"]], "sympy.core.exprtools": [[65, "module-sympy.core.exprtools"]], "sympy.core.function": [[65, "module-sympy.core.function"]], "sympy.core.kind": [[65, "module-sympy.core.kind"]], "sympy.core.mod": [[65, "module-sympy.core.mod"]], "sympy.core.mul": [[65, "module-sympy.core.mul"]], "sympy.core.multidimensional": [[65, "module-sympy.core.multidimensional"]], "sympy.core.numbers": [[65, "module-sympy.core.numbers"]], "sympy.core.power": [[65, "module-sympy.core.power"]], "sympy.core.random": [[65, "module-sympy.core.random"]], "sympy.core.relational": [[65, "module-sympy.core.relational"]], "sympy.core.singleton": [[65, "module-sympy.core.singleton"]], "sympy.core.symbol": [[65, "module-sympy.core.symbol"]], "sympy.core.sympify": [[65, "module-sympy.core.sympify"]], "sympy.core.traversal": [[65, "module-sympy.core.traversal"]], "taylor_term() (sympy.core.expr.expr method)": [[65, "sympy.core.expr.Expr.taylor_term"]], "test_derivative_numerically() (in module sympy.core.random)": [[65, "sympy.core.random.test_derivative_numerically"]], "to_algebraic_integer() (sympy.core.numbers.algebraicnumber method)": [[65, "sympy.core.numbers.AlgebraicNumber.to_algebraic_integer"]], "to_primitive_element() (sympy.core.numbers.algebraicnumber method)": [[65, "sympy.core.numbers.AlgebraicNumber.to_primitive_element"]], "to_root() (sympy.core.numbers.algebraicnumber method)": [[65, "sympy.core.numbers.AlgebraicNumber.to_root"]], "together() (sympy.core.expr.expr method)": [[65, "sympy.core.expr.Expr.together"]], "transcendental": [[65, "term-transcendental"]], "trigsimp() (sympy.core.expr.expr method)": [[65, "sympy.core.expr.Expr.trigsimp"]], "tuple_count() (sympy.core.containers.tuple method)": [[65, "sympy.core.containers.Tuple.tuple_count"]], "use() (in module sympy.core.traversal)": [[65, "sympy.core.traversal.use"]], "values() (sympy.core.containers.dict method)": [[65, "sympy.core.containers.Dict.values"]], "var() (in module sympy.core.symbol)": [[65, "sympy.core.symbol.var"]], "variables (sympy.core.function.lambda property)": [[65, "sympy.core.function.Lambda.variables"]], "variables (sympy.core.function.subs property)": [[65, "sympy.core.function.Subs.variables"]], "vectorize (class in sympy.core.multidimensional)": [[65, "sympy.core.multidimensional.vectorize"]], "verify_numerically() (in module sympy.core.random)": [[65, "sympy.core.random.verify_numerically"]], "walk() (in module sympy.core.traversal)": [[65, "sympy.core.traversal.walk"]], "weak (sympy.core.relational.relational property)": [[65, "sympy.core.relational.Relational.weak"]], "xreplace() (sympy.core.basic.basic method)": [[65, "sympy.core.basic.Basic.xreplace"]], "zero": [[65, "term-zero"]], "az() (in module sympy.crypto.crypto)": [[66, "sympy.crypto.crypto.AZ"]], "bifid5_square() (in module sympy.crypto.crypto)": [[66, "sympy.crypto.crypto.bifid5_square"]], "bifid6_square() (in module sympy.crypto.crypto)": [[66, "sympy.crypto.crypto.bifid6_square"]], "check_and_join() (in module sympy.crypto.crypto)": [[66, "sympy.crypto.crypto.check_and_join"]], "cycle_list() (in module sympy.crypto.crypto)": [[66, "sympy.crypto.crypto.cycle_list"]], "decipher_affine() (in module sympy.crypto.crypto)": [[66, "sympy.crypto.crypto.decipher_affine"]], "decipher_atbash() (in module sympy.crypto.crypto)": [[66, "sympy.crypto.crypto.decipher_atbash"]], "decipher_bifid() (in module sympy.crypto.crypto)": [[66, "sympy.crypto.crypto.decipher_bifid"]], "decipher_bifid5() (in module sympy.crypto.crypto)": [[66, "sympy.crypto.crypto.decipher_bifid5"]], "decipher_bifid6() (in module sympy.crypto.crypto)": [[66, "sympy.crypto.crypto.decipher_bifid6"]], "decipher_elgamal() (in module sympy.crypto.crypto)": [[66, "sympy.crypto.crypto.decipher_elgamal"]], "decipher_gm() (in module sympy.crypto.crypto)": [[66, "sympy.crypto.crypto.decipher_gm"]], "decipher_hill() (in module sympy.crypto.crypto)": [[66, "sympy.crypto.crypto.decipher_hill"]], "decipher_kid_rsa() (in module sympy.crypto.crypto)": [[66, "sympy.crypto.crypto.decipher_kid_rsa"]], "decipher_railfence() (in module sympy.crypto.crypto)": [[66, "sympy.crypto.crypto.decipher_railfence"]], "decipher_rot13() (in module sympy.crypto.crypto)": [[66, "sympy.crypto.crypto.decipher_rot13"]], "decipher_rsa() (in module sympy.crypto.crypto)": [[66, "sympy.crypto.crypto.decipher_rsa"]], "decipher_shift() (in module sympy.crypto.crypto)": [[66, "sympy.crypto.crypto.decipher_shift"]], "decipher_vigenere() (in module sympy.crypto.crypto)": [[66, "sympy.crypto.crypto.decipher_vigenere"]], "decode_morse() (in module sympy.crypto.crypto)": [[66, "sympy.crypto.crypto.decode_morse"]], "dh_private_key() (in module sympy.crypto.crypto)": [[66, "sympy.crypto.crypto.dh_private_key"]], "dh_public_key() (in module sympy.crypto.crypto)": [[66, "sympy.crypto.crypto.dh_public_key"]], "dh_shared_key() (in module sympy.crypto.crypto)": [[66, "sympy.crypto.crypto.dh_shared_key"]], "elgamal_private_key() (in module sympy.crypto.crypto)": [[66, "sympy.crypto.crypto.elgamal_private_key"]], "elgamal_public_key() (in module sympy.crypto.crypto)": [[66, "sympy.crypto.crypto.elgamal_public_key"]], "encipher_affine() (in module sympy.crypto.crypto)": [[66, "sympy.crypto.crypto.encipher_affine"]], "encipher_atbash() (in module sympy.crypto.crypto)": [[66, "sympy.crypto.crypto.encipher_atbash"]], "encipher_bifid() (in module sympy.crypto.crypto)": [[66, "sympy.crypto.crypto.encipher_bifid"]], "encipher_bifid5() (in module sympy.crypto.crypto)": [[66, "sympy.crypto.crypto.encipher_bifid5"]], "encipher_bifid6() (in module sympy.crypto.crypto)": [[66, "sympy.crypto.crypto.encipher_bifid6"]], "encipher_elgamal() (in module sympy.crypto.crypto)": [[66, "sympy.crypto.crypto.encipher_elgamal"]], "encipher_gm() (in module sympy.crypto.crypto)": [[66, "sympy.crypto.crypto.encipher_gm"]], "encipher_hill() (in module sympy.crypto.crypto)": [[66, "sympy.crypto.crypto.encipher_hill"]], "encipher_kid_rsa() (in module sympy.crypto.crypto)": [[66, "sympy.crypto.crypto.encipher_kid_rsa"]], "encipher_railfence() (in module sympy.crypto.crypto)": [[66, "sympy.crypto.crypto.encipher_railfence"]], "encipher_rot13() (in module sympy.crypto.crypto)": [[66, "sympy.crypto.crypto.encipher_rot13"]], "encipher_rsa() (in module sympy.crypto.crypto)": [[66, "sympy.crypto.crypto.encipher_rsa"]], "encipher_shift() (in module sympy.crypto.crypto)": [[66, "sympy.crypto.crypto.encipher_shift"]], "encipher_substitution() (in module sympy.crypto.crypto)": [[66, "sympy.crypto.crypto.encipher_substitution"]], "encipher_vigenere() (in module sympy.crypto.crypto)": [[66, "sympy.crypto.crypto.encipher_vigenere"]], "encode_morse() (in module sympy.crypto.crypto)": [[66, "sympy.crypto.crypto.encode_morse"]], "gm_private_key() (in module sympy.crypto.crypto)": [[66, "sympy.crypto.crypto.gm_private_key"]], "gm_public_key() (in module sympy.crypto.crypto)": [[66, "sympy.crypto.crypto.gm_public_key"]], "kid_rsa_private_key() (in module sympy.crypto.crypto)": [[66, "sympy.crypto.crypto.kid_rsa_private_key"]], "kid_rsa_public_key() (in module sympy.crypto.crypto)": [[66, "sympy.crypto.crypto.kid_rsa_public_key"]], "lfsr_autocorrelation() (in module sympy.crypto.crypto)": [[66, "sympy.crypto.crypto.lfsr_autocorrelation"]], "lfsr_connection_polynomial() (in module sympy.crypto.crypto)": [[66, "sympy.crypto.crypto.lfsr_connection_polynomial"]], "lfsr_sequence() (in module sympy.crypto.crypto)": [[66, "sympy.crypto.crypto.lfsr_sequence"]], "padded_key() (in module sympy.crypto.crypto)": [[66, "sympy.crypto.crypto.padded_key"]], "rsa_private_key() (in module sympy.crypto.crypto)": [[66, "sympy.crypto.crypto.rsa_private_key"]], "rsa_public_key() (in module sympy.crypto.crypto)": [[66, "sympy.crypto.crypto.rsa_public_key"]], "sympy.crypto.crypto": [[66, "module-sympy.crypto.crypto"]], "basecovarderivativeop (class in sympy.diffgeom)": [[67, "sympy.diffgeom.BaseCovarDerivativeOp"]], "basescalarfield (class in sympy.diffgeom)": [[67, "sympy.diffgeom.BaseScalarField"]], "basevectorfield (class in sympy.diffgeom)": [[67, "sympy.diffgeom.BaseVectorField"]], "commutator (class in sympy.diffgeom)": [[67, "sympy.diffgeom.Commutator"]], "coordsystem (class in sympy.diffgeom)": [[67, "sympy.diffgeom.CoordSystem"]], "coordinatesymbol (class in sympy.diffgeom)": [[67, "sympy.diffgeom.CoordinateSymbol"]], "covarderivativeop (class in sympy.diffgeom)": [[67, "sympy.diffgeom.CovarDerivativeOp"]], "differential (class in sympy.diffgeom)": [[67, "sympy.diffgeom.Differential"]], "liederivative (class in sympy.diffgeom)": [[67, "sympy.diffgeom.LieDerivative"]], "manifold (class in sympy.diffgeom)": [[67, "sympy.diffgeom.Manifold"]], "patch (class in sympy.diffgeom)": [[67, "sympy.diffgeom.Patch"]], "point (class in sympy.diffgeom)": [[67, "sympy.diffgeom.Point"]], "tensorproduct (class in sympy.diffgeom)": [[67, "sympy.diffgeom.TensorProduct"]], "wedgeproduct (class in sympy.diffgeom)": [[67, "sympy.diffgeom.WedgeProduct"]], "base_oneform() (sympy.diffgeom.coordsystem method)": [[67, "sympy.diffgeom.CoordSystem.base_oneform"]], "base_oneforms() (sympy.diffgeom.coordsystem method)": [[67, "sympy.diffgeom.CoordSystem.base_oneforms"]], "base_scalar() (sympy.diffgeom.coordsystem method)": [[67, "sympy.diffgeom.CoordSystem.base_scalar"]], "base_scalars() (sympy.diffgeom.coordsystem method)": [[67, "sympy.diffgeom.CoordSystem.base_scalars"]], "base_vector() (sympy.diffgeom.coordsystem method)": [[67, "sympy.diffgeom.CoordSystem.base_vector"]], "base_vectors() (sympy.diffgeom.coordsystem method)": [[67, "sympy.diffgeom.CoordSystem.base_vectors"]], "coord_function() (sympy.diffgeom.coordsystem method)": [[67, "sympy.diffgeom.CoordSystem.coord_function"]], "coord_functions() (sympy.diffgeom.coordsystem method)": [[67, "sympy.diffgeom.CoordSystem.coord_functions"]], "coord_tuple_transform_to() (sympy.diffgeom.coordsystem method)": [[67, "sympy.diffgeom.CoordSystem.coord_tuple_transform_to"]], "coords() (sympy.diffgeom.point method)": [[67, "sympy.diffgeom.Point.coords"]], "intcurve_diffequ() (in module sympy.diffgeom)": [[67, "sympy.diffgeom.intcurve_diffequ"]], "intcurve_series() (in module sympy.diffgeom)": [[67, "sympy.diffgeom.intcurve_series"]], "jacobian() (sympy.diffgeom.coordsystem method)": [[67, "sympy.diffgeom.CoordSystem.jacobian"]], "jacobian_determinant() (sympy.diffgeom.coordsystem method)": [[67, "sympy.diffgeom.CoordSystem.jacobian_determinant"]], "jacobian_matrix() (sympy.diffgeom.coordsystem method)": [[67, "sympy.diffgeom.CoordSystem.jacobian_matrix"]], "metric_to_christoffel_1st() (in module sympy.diffgeom)": [[67, "sympy.diffgeom.metric_to_Christoffel_1st"]], "metric_to_christoffel_2nd() (in module sympy.diffgeom)": [[67, "sympy.diffgeom.metric_to_Christoffel_2nd"]], "metric_to_ricci_components() (in module sympy.diffgeom)": [[67, "sympy.diffgeom.metric_to_Ricci_components"]], "metric_to_riemann_components() (in module sympy.diffgeom)": [[67, "sympy.diffgeom.metric_to_Riemann_components"]], "point() (sympy.diffgeom.coordsystem method)": [[67, "sympy.diffgeom.CoordSystem.point"]], "point_to_coords() (sympy.diffgeom.coordsystem method)": [[67, "sympy.diffgeom.CoordSystem.point_to_coords"]], "sympy.diffgeom": [[67, "module-sympy.diffgeom"]], "transform() (sympy.diffgeom.coordsystem method)": [[67, "sympy.diffgeom.CoordSystem.transform"]], "transformation() (sympy.diffgeom.coordsystem method)": [[67, "sympy.diffgeom.CoordSystem.transformation"]], "twoform_to_matrix() (in module sympy.diffgeom)": [[67, "sympy.diffgeom.twoform_to_matrix"]], "vectors_in_basis() (in module sympy.diffgeom)": [[67, "sympy.diffgeom.vectors_in_basis"]], "convolution() (in module sympy.discrete.convolutions)": [[68, "sympy.discrete.convolutions.convolution"]], "convolution_fft() (in module sympy.discrete.convolutions)": [[68, "sympy.discrete.convolutions.convolution_fft"]], "convolution_fwht() (in module sympy.discrete.convolutions)": [[68, "sympy.discrete.convolutions.convolution_fwht"]], "convolution_ntt() (in module sympy.discrete.convolutions)": [[68, "sympy.discrete.convolutions.convolution_ntt"]], "convolution_subset() (in module sympy.discrete.convolutions)": [[68, "sympy.discrete.convolutions.convolution_subset"]], "covering_product() (in module sympy.discrete.convolutions)": [[68, "sympy.discrete.convolutions.covering_product"]], "fft() (in module sympy.discrete.transforms)": [[68, "sympy.discrete.transforms.fft"]], "fwht() (in module sympy.discrete.transforms)": [[68, "sympy.discrete.transforms.fwht"]], "ifft() (in module sympy.discrete.transforms)": [[68, "sympy.discrete.transforms.ifft"]], "ifwht() (in module sympy.discrete.transforms)": [[68, "sympy.discrete.transforms.ifwht"]], "intersecting_product() (in module sympy.discrete.convolutions)": [[68, "sympy.discrete.convolutions.intersecting_product"]], "intt() (in module sympy.discrete.transforms)": [[68, "sympy.discrete.transforms.intt"]], "inverse_mobius_transform() (in module sympy.discrete.transforms)": [[68, "sympy.discrete.transforms.inverse_mobius_transform"]], "mobius_transform() (in module sympy.discrete.transforms)": [[68, "sympy.discrete.transforms.mobius_transform"]], "ntt() (in module sympy.discrete.transforms)": [[68, "sympy.discrete.transforms.ntt"]], "sympy.discrete": [[68, "module-sympy.discrete"]], "sympy.discrete.convolutions": [[68, "module-sympy.discrete.convolutions"]], "sympy.discrete.transforms": [[68, "module-sympy.discrete.transforms"]], "fallingfactorial (class in sympy.functions.combinatorial.factorials)": [[70, "sympy.functions.combinatorial.factorials.FallingFactorial"]], "multifactorial (class in sympy.functions.combinatorial.factorials)": [[70, "sympy.functions.combinatorial.factorials.MultiFactorial"]], "risingfactorial (class in sympy.functions.combinatorial.factorials)": [[70, "sympy.functions.combinatorial.factorials.RisingFactorial"]], "andre (class in sympy.functions.combinatorial.numbers)": [[70, "sympy.functions.combinatorial.numbers.andre"]], "bell (class in sympy.functions.combinatorial.numbers)": [[70, "sympy.functions.combinatorial.numbers.bell"]], "bernoulli (class in sympy.functions.combinatorial.numbers)": [[70, "sympy.functions.combinatorial.numbers.bernoulli"]], "binomial (class in sympy.functions.combinatorial.factorials)": [[70, "sympy.functions.combinatorial.factorials.binomial"]], "catalan (class in sympy.functions.combinatorial.numbers)": [[70, "sympy.functions.combinatorial.numbers.catalan"]], "euler (class in sympy.functions.combinatorial.numbers)": [[70, "sympy.functions.combinatorial.numbers.euler"]], "factorial (class in sympy.functions.combinatorial.factorials)": [[70, "sympy.functions.combinatorial.factorials.factorial"]], "factorial2 (class in sympy.functions.combinatorial.factorials)": [[70, "sympy.functions.combinatorial.factorials.factorial2"]], "fibonacci (class in sympy.functions.combinatorial.numbers)": [[70, "sympy.functions.combinatorial.numbers.fibonacci"]], "genocchi (class in sympy.functions.combinatorial.numbers)": [[70, "sympy.functions.combinatorial.numbers.genocchi"]], "harmonic (class in sympy.functions.combinatorial.numbers)": [[70, "sympy.functions.combinatorial.numbers.harmonic"]], "lucas (class in sympy.functions.combinatorial.numbers)": [[70, "sympy.functions.combinatorial.numbers.lucas"]], "nc() (in module sympy.functions.combinatorial.numbers)": [[70, "sympy.functions.combinatorial.numbers.nC"]], "np() (in module sympy.functions.combinatorial.numbers)": [[70, "sympy.functions.combinatorial.numbers.nP"]], "nt() (in module sympy.functions.combinatorial.numbers)": [[70, "sympy.functions.combinatorial.numbers.nT"]], "partition (class in sympy.functions.combinatorial.numbers)": [[70, "sympy.functions.combinatorial.numbers.partition"]], "stirling() (in module sympy.functions.combinatorial.numbers)": [[70, "sympy.functions.combinatorial.numbers.stirling"]], "subfactorial (class in sympy.functions.combinatorial.factorials)": [[70, "sympy.functions.combinatorial.factorials.subfactorial"]], "tribonacci (class in sympy.functions.combinatorial.numbers)": [[70, "sympy.functions.combinatorial.numbers.tribonacci"]], "abs (class in sympy.functions.elementary.complexes)": [[71, "sympy.functions.elementary.complexes.Abs"]], "exprcondpair (class in sympy.functions.elementary.piecewise)": [[71, "sympy.functions.elementary.piecewise.ExprCondPair"]], "hyperbolicfunction (class in sympy.functions.elementary.hyperbolic)": [[71, "sympy.functions.elementary.hyperbolic.HyperbolicFunction"]], "identityfunction (class in sympy.functions.elementary.miscellaneous)": [[71, "sympy.functions.elementary.miscellaneous.IdentityFunction"]], "lambertw (class in sympy.functions.elementary.exponential)": [[71, "sympy.functions.elementary.exponential.LambertW"]], "max (class in sympy.functions.elementary.miscellaneous)": [[71, "sympy.functions.elementary.miscellaneous.Max"]], "min (class in sympy.functions.elementary.miscellaneous)": [[71, "sympy.functions.elementary.miscellaneous.Min"]], "piecewise (class in sympy.functions.elementary.piecewise)": [[71, "sympy.functions.elementary.piecewise.Piecewise"]], "roundfunction (class in sympy.functions.elementary.integers)": [[71, "sympy.functions.elementary.integers.RoundFunction"]], "_eval_integral() (sympy.functions.elementary.piecewise.piecewise method)": [[71, "sympy.functions.elementary.piecewise.Piecewise._eval_integral"]], "acos (class in sympy.functions.elementary.trigonometric)": [[71, "sympy.functions.elementary.trigonometric.acos"]], "acosh (class in sympy.functions.elementary.hyperbolic)": [[71, "sympy.functions.elementary.hyperbolic.acosh"]], "acot (class in sympy.functions.elementary.trigonometric)": [[71, "sympy.functions.elementary.trigonometric.acot"]], "acoth (class in sympy.functions.elementary.hyperbolic)": [[71, "sympy.functions.elementary.hyperbolic.acoth"]], "acsc (class in sympy.functions.elementary.trigonometric)": [[71, "sympy.functions.elementary.trigonometric.acsc"]], "acsch (class in sympy.functions.elementary.hyperbolic)": [[71, "sympy.functions.elementary.hyperbolic.acsch"]], "arg (class in sympy.functions.elementary.complexes)": [[71, "sympy.functions.elementary.complexes.arg"]], "as_base_exp() (sympy.functions.elementary.exponential.log method)": [[71, "sympy.functions.elementary.exponential.log.as_base_exp"]], "as_expr_set_pairs() (sympy.functions.elementary.piecewise.piecewise method)": [[71, "sympy.functions.elementary.piecewise.Piecewise.as_expr_set_pairs"]], "as_real_imag() (sympy.functions.elementary.complexes.im method)": [[71, "sympy.functions.elementary.complexes.im.as_real_imag"]], "as_real_imag() (sympy.functions.elementary.complexes.re method)": [[71, "sympy.functions.elementary.complexes.re.as_real_imag"]], "as_real_imag() (sympy.functions.elementary.exponential.exp method)": [[71, "sympy.functions.elementary.exponential.exp.as_real_imag"]], "as_real_imag() (sympy.functions.elementary.exponential.log method)": [[71, "sympy.functions.elementary.exponential.log.as_real_imag"]], "as_real_imag() (sympy.functions.elementary.hyperbolic.sinh method)": [[71, "sympy.functions.elementary.hyperbolic.sinh.as_real_imag"]], "asec (class in sympy.functions.elementary.trigonometric)": [[71, "sympy.functions.elementary.trigonometric.asec"]], "asech (class in sympy.functions.elementary.hyperbolic)": [[71, "sympy.functions.elementary.hyperbolic.asech"]], "asin (class in sympy.functions.elementary.trigonometric)": [[71, "sympy.functions.elementary.trigonometric.asin"]], "asinh (class in sympy.functions.elementary.hyperbolic)": [[71, "sympy.functions.elementary.hyperbolic.asinh"]], "atan (class in sympy.functions.elementary.trigonometric)": [[71, "sympy.functions.elementary.trigonometric.atan"]], "atan2 (class in sympy.functions.elementary.trigonometric)": [[71, "sympy.functions.elementary.trigonometric.atan2"]], "atanh (class in sympy.functions.elementary.hyperbolic)": [[71, "sympy.functions.elementary.hyperbolic.atanh"]], "base (sympy.functions.elementary.exponential.exp property)": [[71, "sympy.functions.elementary.exponential.exp.base"]], "cbrt() (in module sympy.functions.elementary.miscellaneous)": [[71, "sympy.functions.elementary.miscellaneous.cbrt"]], "ceiling (class in sympy.functions.elementary.integers)": [[71, "sympy.functions.elementary.integers.ceiling"]], "cond (sympy.functions.elementary.piecewise.exprcondpair property)": [[71, "sympy.functions.elementary.piecewise.ExprCondPair.cond"]], "conjugate (class in sympy.functions.elementary.complexes)": [[71, "sympy.functions.elementary.complexes.conjugate"]], "cos (class in sympy.functions.elementary.trigonometric)": [[71, "sympy.functions.elementary.trigonometric.cos"]], "cosh (class in sympy.functions.elementary.hyperbolic)": [[71, "sympy.functions.elementary.hyperbolic.cosh"]], "cot (class in sympy.functions.elementary.trigonometric)": [[71, "sympy.functions.elementary.trigonometric.cot"]], "coth (class in sympy.functions.elementary.hyperbolic)": [[71, "sympy.functions.elementary.hyperbolic.coth"]], "csc (class in sympy.functions.elementary.trigonometric)": [[71, "sympy.functions.elementary.trigonometric.csc"]], "csch (class in sympy.functions.elementary.hyperbolic)": [[71, "sympy.functions.elementary.hyperbolic.csch"]], "doit() (sympy.functions.elementary.piecewise.piecewise method)": [[71, "sympy.functions.elementary.piecewise.Piecewise.doit"]], "eval() (sympy.functions.elementary.piecewise.piecewise class method)": [[71, "sympy.functions.elementary.piecewise.Piecewise.eval"]], "exp (class in sympy.functions.elementary.exponential)": [[71, "sympy.functions.elementary.exponential.exp"]], "exp_polar (class in sympy.functions.elementary.exponential)": [[71, "sympy.functions.elementary.exponential.exp_polar"]], "expr (sympy.functions.elementary.piecewise.exprcondpair property)": [[71, "sympy.functions.elementary.piecewise.ExprCondPair.expr"]], "fdiff() (sympy.functions.elementary.complexes.abs method)": [[71, "sympy.functions.elementary.complexes.Abs.fdiff"]], "fdiff() (sympy.functions.elementary.exponential.lambertw method)": [[71, "sympy.functions.elementary.exponential.LambertW.fdiff"]], "fdiff() (sympy.functions.elementary.exponential.exp method)": [[71, "sympy.functions.elementary.exponential.exp.fdiff"]], "fdiff() (sympy.functions.elementary.exponential.log method)": [[71, "sympy.functions.elementary.exponential.log.fdiff"]], "fdiff() (sympy.functions.elementary.hyperbolic.csch method)": [[71, "sympy.functions.elementary.hyperbolic.csch.fdiff"]], "fdiff() (sympy.functions.elementary.hyperbolic.sinh method)": [[71, "sympy.functions.elementary.hyperbolic.sinh.fdiff"]], "floor (class in sympy.functions.elementary.integers)": [[71, "sympy.functions.elementary.integers.floor"]], "frac (class in sympy.functions.elementary.integers)": [[71, "sympy.functions.elementary.integers.frac"]], "im (class in sympy.functions.elementary.complexes)": [[71, "sympy.functions.elementary.complexes.im"]], "inverse() (sympy.functions.elementary.exponential.log method)": [[71, "sympy.functions.elementary.exponential.log.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.acosh method)": [[71, "sympy.functions.elementary.hyperbolic.acosh.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.acoth method)": [[71, "sympy.functions.elementary.hyperbolic.acoth.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.acsch method)": [[71, "sympy.functions.elementary.hyperbolic.acsch.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.asech method)": [[71, "sympy.functions.elementary.hyperbolic.asech.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.asinh method)": [[71, "sympy.functions.elementary.hyperbolic.asinh.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.atanh method)": [[71, "sympy.functions.elementary.hyperbolic.atanh.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.coth method)": [[71, "sympy.functions.elementary.hyperbolic.coth.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.sinh method)": [[71, "sympy.functions.elementary.hyperbolic.sinh.inverse"]], "inverse() (sympy.functions.elementary.hyperbolic.tanh method)": [[71, "sympy.functions.elementary.hyperbolic.tanh.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.acos method)": [[71, "sympy.functions.elementary.trigonometric.acos.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.acot method)": [[71, "sympy.functions.elementary.trigonometric.acot.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.acsc method)": [[71, "sympy.functions.elementary.trigonometric.acsc.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.asec method)": [[71, "sympy.functions.elementary.trigonometric.asec.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.asin method)": [[71, "sympy.functions.elementary.trigonometric.asin.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.atan method)": [[71, "sympy.functions.elementary.trigonometric.atan.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.cot method)": [[71, "sympy.functions.elementary.trigonometric.cot.inverse"]], "inverse() (sympy.functions.elementary.trigonometric.tan method)": [[71, "sympy.functions.elementary.trigonometric.tan.inverse"]], "log (class in sympy.functions.elementary.exponential)": [[71, "sympy.functions.elementary.exponential.log"]], "periodic_argument (class in sympy.functions.elementary.complexes)": [[71, "sympy.functions.elementary.complexes.periodic_argument"]], "piecewise_exclusive() (in module sympy.functions.elementary.piecewise)": [[71, "sympy.functions.elementary.piecewise.piecewise_exclusive"]], "piecewise_fold() (in module sympy.functions.elementary.piecewise)": [[71, "sympy.functions.elementary.piecewise.piecewise_fold"]], "piecewise_integrate() (sympy.functions.elementary.piecewise.piecewise method)": [[71, "sympy.functions.elementary.piecewise.Piecewise.piecewise_integrate"]], "polar_lift (class in sympy.functions.elementary.complexes)": [[71, "sympy.functions.elementary.complexes.polar_lift"]], "principal_branch (class in sympy.functions.elementary.complexes)": [[71, "sympy.functions.elementary.complexes.principal_branch"]], "re (class in sympy.functions.elementary.complexes)": [[71, "sympy.functions.elementary.complexes.re"]], "real_root() (in module sympy.functions.elementary.miscellaneous)": [[71, "sympy.functions.elementary.miscellaneous.real_root"]], "root() (in module sympy.functions.elementary.miscellaneous)": [[71, "sympy.functions.elementary.miscellaneous.root"]], "sec (class in sympy.functions.elementary.trigonometric)": [[71, "sympy.functions.elementary.trigonometric.sec"]], "sech (class in sympy.functions.elementary.hyperbolic)": [[71, "sympy.functions.elementary.hyperbolic.sech"]], "sign (class in sympy.functions.elementary.complexes)": [[71, "sympy.functions.elementary.complexes.sign"]], "sin (class in sympy.functions.elementary.trigonometric)": [[71, "sympy.functions.elementary.trigonometric.sin"]], "sinc (class in sympy.functions.elementary.trigonometric)": [[71, "sympy.functions.elementary.trigonometric.sinc"]], "sinh (class in sympy.functions.elementary.hyperbolic)": [[71, "sympy.functions.elementary.hyperbolic.sinh"]], "sqrt() (in module sympy.functions.elementary.miscellaneous)": [[71, "sympy.functions.elementary.miscellaneous.sqrt"]], "tan (class in sympy.functions.elementary.trigonometric)": [[71, "sympy.functions.elementary.trigonometric.tan"]], "tanh (class in sympy.functions.elementary.hyperbolic)": [[71, "sympy.functions.elementary.hyperbolic.tanh"]], "taylor_term() (sympy.functions.elementary.exponential.exp static method)": [[71, "sympy.functions.elementary.exponential.exp.taylor_term"]], "taylor_term() (sympy.functions.elementary.exponential.log static method)": [[71, "sympy.functions.elementary.exponential.log.taylor_term"]], "taylor_term() (sympy.functions.elementary.hyperbolic.csch static method)": [[71, "sympy.functions.elementary.hyperbolic.csch.taylor_term"]], "taylor_term() (sympy.functions.elementary.hyperbolic.sinh static method)": [[71, "sympy.functions.elementary.hyperbolic.sinh.taylor_term"]], "sympy.functions": [[72, "module-sympy.functions"]], "airybase (class in sympy.functions.special.bessel)": [[73, "sympy.functions.special.bessel.AiryBase"]], "besselbase (class in sympy.functions.special.bessel)": [[73, "sympy.functions.special.bessel.BesselBase"]], "chi (class in sympy.functions.special.error_functions)": [[73, "sympy.functions.special.error_functions.Chi"]], "ci (class in sympy.functions.special.error_functions)": [[73, "sympy.functions.special.error_functions.Ci"]], "diracdelta (class in sympy.functions.special.delta_functions)": [[73, "sympy.functions.special.delta_functions.DiracDelta"]], "e1() (in module sympy.functions.special.error_functions)": [[73, "sympy.functions.special.error_functions.E1"]], "ei (class in sympy.functions.special.error_functions)": [[73, "sympy.functions.special.error_functions.Ei"]], "eijk() (in module sympy.functions.special.tensor_functions)": [[73, "sympy.functions.special.tensor_functions.Eijk"]], "fresnelintegral (class in sympy.functions.special.error_functions)": [[73, "sympy.functions.special.error_functions.FresnelIntegral"]], "heaviside (class in sympy.functions.special.delta_functions)": [[73, "sympy.functions.special.delta_functions.Heaviside"]], "kroneckerdelta (class in sympy.functions.special.tensor_functions)": [[73, "sympy.functions.special.tensor_functions.KroneckerDelta"]], "levicivita (class in sympy.functions.special.tensor_functions)": [[73, "sympy.functions.special.tensor_functions.LeviCivita"]], "li (class in sympy.functions.special.error_functions)": [[73, "sympy.functions.special.error_functions.Li"], [73, "sympy.functions.special.error_functions.li"]], "mathieubase (class in sympy.functions.special.mathieu_functions)": [[73, "sympy.functions.special.mathieu_functions.MathieuBase"]], "shi (class in sympy.functions.special.error_functions)": [[73, "sympy.functions.special.error_functions.Shi"]], "si (class in sympy.functions.special.error_functions)": [[73, "sympy.functions.special.error_functions.Si"]], "singularityfunction (class in sympy.functions.special.singularity_functions)": [[73, "sympy.functions.special.singularity_functions.SingularityFunction"]], "ynm (class in sympy.functions.special.spherical_harmonics)": [[73, "sympy.functions.special.spherical_harmonics.Ynm"]], "ynm_c() (in module sympy.functions.special.spherical_harmonics)": [[73, "sympy.functions.special.spherical_harmonics.Ynm_c"]], "znm (class in sympy.functions.special.spherical_harmonics)": [[73, "sympy.functions.special.spherical_harmonics.Znm"]], "airyai (class in sympy.functions.special.bessel)": [[73, "sympy.functions.special.bessel.airyai"]], "airyaiprime (class in sympy.functions.special.bessel)": [[73, "sympy.functions.special.bessel.airyaiprime"]], "airybi (class in sympy.functions.special.bessel)": [[73, "sympy.functions.special.bessel.airybi"]], "airybiprime (class in sympy.functions.special.bessel)": [[73, "sympy.functions.special.bessel.airybiprime"]], "an (sympy.functions.special.hyper.meijerg property)": [[73, "sympy.functions.special.hyper.meijerg.an"]], "aother (sympy.functions.special.hyper.meijerg property)": [[73, "sympy.functions.special.hyper.meijerg.aother"]], "ap (sympy.functions.special.hyper.hyper property)": [[73, "sympy.functions.special.hyper.hyper.ap"]], "ap (sympy.functions.special.hyper.meijerg property)": [[73, "sympy.functions.special.hyper.meijerg.ap"]], "appellf1 (class in sympy.functions.special.hyper)": [[73, "sympy.functions.special.hyper.appellf1"]], "argument (sympy.functions.special.bessel.besselbase property)": [[73, "sympy.functions.special.bessel.BesselBase.argument"]], "argument (sympy.functions.special.hyper.hyper property)": [[73, "sympy.functions.special.hyper.hyper.argument"]], "argument (sympy.functions.special.hyper.meijerg property)": [[73, "sympy.functions.special.hyper.meijerg.argument"]], "assoc_laguerre (class in sympy.functions.special.polynomials)": [[73, "sympy.functions.special.polynomials.assoc_laguerre"]], "assoc_legendre (class in sympy.functions.special.polynomials)": [[73, "sympy.functions.special.polynomials.assoc_legendre"]], "besseli (class in sympy.functions.special.bessel)": [[73, "sympy.functions.special.bessel.besseli"]], "besselj (class in sympy.functions.special.bessel)": [[73, "sympy.functions.special.bessel.besselj"]], "besselk (class in sympy.functions.special.bessel)": [[73, "sympy.functions.special.bessel.besselk"]], "bessely (class in sympy.functions.special.bessel)": [[73, "sympy.functions.special.bessel.bessely"]], "beta (class in sympy.functions.special.beta_functions)": [[73, "sympy.functions.special.beta_functions.beta"]], "bm (sympy.functions.special.hyper.meijerg property)": [[73, "sympy.functions.special.hyper.meijerg.bm"]], "bother (sympy.functions.special.hyper.meijerg property)": [[73, "sympy.functions.special.hyper.meijerg.bother"]], "bq (sympy.functions.special.hyper.hyper property)": [[73, "sympy.functions.special.hyper.hyper.bq"]], "bq (sympy.functions.special.hyper.meijerg property)": [[73, "sympy.functions.special.hyper.meijerg.bq"]], "bspline_basis() (in module sympy.functions.special.bsplines)": [[73, "sympy.functions.special.bsplines.bspline_basis"]], "bspline_basis_set() (in module sympy.functions.special.bsplines)": [[73, "sympy.functions.special.bsplines.bspline_basis_set"]], "chebyshevt (class in sympy.functions.special.polynomials)": [[73, "sympy.functions.special.polynomials.chebyshevt"]], "chebyshevt_root (class in sympy.functions.special.polynomials)": [[73, "sympy.functions.special.polynomials.chebyshevt_root"]], "chebyshevu (class in sympy.functions.special.polynomials)": [[73, "sympy.functions.special.polynomials.chebyshevu"]], "chebyshevu_root (class in sympy.functions.special.polynomials)": [[73, "sympy.functions.special.polynomials.chebyshevu_root"]], "convergence_statement (sympy.functions.special.hyper.hyper property)": [[73, "sympy.functions.special.hyper.hyper.convergence_statement"]], "delta (sympy.functions.special.hyper.meijerg property)": [[73, "sympy.functions.special.hyper.meijerg.delta"]], "digamma (class in sympy.functions.special.gamma_functions)": [[73, "sympy.functions.special.gamma_functions.digamma"]], "dirichlet_eta (class in sympy.functions.special.zeta_functions)": [[73, "sympy.functions.special.zeta_functions.dirichlet_eta"]], "elliptic_e (class in sympy.functions.special.elliptic_integrals)": [[73, "sympy.functions.special.elliptic_integrals.elliptic_e"]], "elliptic_f (class in sympy.functions.special.elliptic_integrals)": [[73, "sympy.functions.special.elliptic_integrals.elliptic_f"]], "elliptic_k (class in sympy.functions.special.elliptic_integrals)": [[73, "sympy.functions.special.elliptic_integrals.elliptic_k"]], "elliptic_pi (class in sympy.functions.special.elliptic_integrals)": [[73, "sympy.functions.special.elliptic_integrals.elliptic_pi"]], "erf (class in sympy.functions.special.error_functions)": [[73, "sympy.functions.special.error_functions.erf"]], "erf2 (class in sympy.functions.special.error_functions)": [[73, "sympy.functions.special.error_functions.erf2"]], "erf2inv (class in sympy.functions.special.error_functions)": [[73, "sympy.functions.special.error_functions.erf2inv"]], "erfc (class in sympy.functions.special.error_functions)": [[73, "sympy.functions.special.error_functions.erfc"]], "erfcinv (class in sympy.functions.special.error_functions)": [[73, "sympy.functions.special.error_functions.erfcinv"]], "erfi (class in sympy.functions.special.error_functions)": [[73, "sympy.functions.special.error_functions.erfi"]], "erfinv (class in sympy.functions.special.error_functions)": [[73, "sympy.functions.special.error_functions.erfinv"]], "eta (sympy.functions.special.hyper.hyper property)": [[73, "sympy.functions.special.hyper.hyper.eta"]], "eval() (sympy.functions.special.delta_functions.diracdelta class method)": [[73, "sympy.functions.special.delta_functions.DiracDelta.eval"]], "eval() (sympy.functions.special.delta_functions.heaviside class method)": [[73, "sympy.functions.special.delta_functions.Heaviside.eval"]], "eval() (sympy.functions.special.singularity_functions.singularityfunction class method)": [[73, "sympy.functions.special.singularity_functions.SingularityFunction.eval"]], "eval() (sympy.functions.special.tensor_functions.kroneckerdelta class method)": [[73, "sympy.functions.special.tensor_functions.KroneckerDelta.eval"]], "eval_levicivita() (in module sympy.functions.special.tensor_functions)": [[73, "sympy.functions.special.tensor_functions.eval_levicivita"]], "expint (class in sympy.functions.special.error_functions)": [[73, "sympy.functions.special.error_functions.expint"]], "fdiff() (sympy.functions.special.delta_functions.diracdelta method)": [[73, "sympy.functions.special.delta_functions.DiracDelta.fdiff"]], "fdiff() (sympy.functions.special.delta_functions.heaviside method)": [[73, "sympy.functions.special.delta_functions.Heaviside.fdiff"]], "fdiff() (sympy.functions.special.singularity_functions.singularityfunction method)": [[73, "sympy.functions.special.singularity_functions.SingularityFunction.fdiff"]], "fresnelc (class in sympy.functions.special.error_functions)": [[73, "sympy.functions.special.error_functions.fresnelc"]], "fresnels (class in sympy.functions.special.error_functions)": [[73, "sympy.functions.special.error_functions.fresnels"]], "gamma (class in sympy.functions.special.gamma_functions)": [[73, "sympy.functions.special.gamma_functions.gamma"]], "gegenbauer (class in sympy.functions.special.polynomials)": [[73, "sympy.functions.special.polynomials.gegenbauer"]], "get_period() (sympy.functions.special.hyper.meijerg method)": [[73, "sympy.functions.special.hyper.meijerg.get_period"]], "hankel1 (class in sympy.functions.special.bessel)": [[73, "sympy.functions.special.bessel.hankel1"]], "hankel2 (class in sympy.functions.special.bessel)": [[73, "sympy.functions.special.bessel.hankel2"]], "hermite (class in sympy.functions.special.polynomials)": [[73, "sympy.functions.special.polynomials.hermite"]], "hermite_prob (class in sympy.functions.special.polynomials)": [[73, "sympy.functions.special.polynomials.hermite_prob"]], "hyper (class in sympy.functions.special.hyper)": [[73, "sympy.functions.special.hyper.hyper"]], "indices_contain_equal_information (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[73, "sympy.functions.special.tensor_functions.KroneckerDelta.indices_contain_equal_information"]], "integrand() (sympy.functions.special.hyper.meijerg method)": [[73, "sympy.functions.special.hyper.meijerg.integrand"]], "interpolating_spline() (in module sympy.functions.special.bsplines)": [[73, "sympy.functions.special.bsplines.interpolating_spline"]], "inverse() (sympy.functions.special.error_functions.erf method)": [[73, "sympy.functions.special.error_functions.erf.inverse"]], "inverse() (sympy.functions.special.error_functions.erfc method)": [[73, "sympy.functions.special.error_functions.erfc.inverse"]], "inverse() (sympy.functions.special.error_functions.erfcinv method)": [[73, "sympy.functions.special.error_functions.erfcinv.inverse"]], "inverse() (sympy.functions.special.error_functions.erfinv method)": [[73, "sympy.functions.special.error_functions.erfinv.inverse"]], "is_above_fermi (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[73, "sympy.functions.special.tensor_functions.KroneckerDelta.is_above_fermi"]], "is_below_fermi (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[73, "sympy.functions.special.tensor_functions.KroneckerDelta.is_below_fermi"]], "is_number (sympy.functions.special.hyper.meijerg property)": [[73, "sympy.functions.special.hyper.meijerg.is_number"]], "is_only_above_fermi (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[73, "sympy.functions.special.tensor_functions.KroneckerDelta.is_only_above_fermi"]], "is_only_below_fermi (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[73, "sympy.functions.special.tensor_functions.KroneckerDelta.is_only_below_fermi"]], "is_simple() (sympy.functions.special.delta_functions.diracdelta method)": [[73, "sympy.functions.special.delta_functions.DiracDelta.is_simple"]], "jacobi (class in sympy.functions.special.polynomials)": [[73, "sympy.functions.special.polynomials.jacobi"]], "jacobi_normalized() (in module sympy.functions.special.polynomials)": [[73, "sympy.functions.special.polynomials.jacobi_normalized"]], "jn (class in sympy.functions.special.bessel)": [[73, "sympy.functions.special.bessel.jn"]], "jn_zeros() (in module sympy.functions.special.bessel)": [[73, "sympy.functions.special.bessel.jn_zeros"]], "killable_index (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[73, "sympy.functions.special.tensor_functions.KroneckerDelta.killable_index"]], "laguerre (class in sympy.functions.special.polynomials)": [[73, "sympy.functions.special.polynomials.laguerre"]], "legendre (class in sympy.functions.special.polynomials)": [[73, "sympy.functions.special.polynomials.legendre"]], "lerchphi (class in sympy.functions.special.zeta_functions)": [[73, "sympy.functions.special.zeta_functions.lerchphi"]], "loggamma (class in sympy.functions.special.gamma_functions)": [[73, "sympy.functions.special.gamma_functions.loggamma"]], "lowergamma (class in sympy.functions.special.gamma_functions)": [[73, "sympy.functions.special.gamma_functions.lowergamma"]], "marcumq (class in sympy.functions.special.bessel)": [[73, "sympy.functions.special.bessel.marcumq"]], "mathieuc (class in sympy.functions.special.mathieu_functions)": [[73, "sympy.functions.special.mathieu_functions.mathieuc"]], "mathieucprime (class in sympy.functions.special.mathieu_functions)": [[73, "sympy.functions.special.mathieu_functions.mathieucprime"]], "mathieus (class in sympy.functions.special.mathieu_functions)": [[73, "sympy.functions.special.mathieu_functions.mathieus"]], "mathieusprime (class in sympy.functions.special.mathieu_functions)": [[73, "sympy.functions.special.mathieu_functions.mathieusprime"]], "meijerg (class in sympy.functions.special.hyper)": [[73, "sympy.functions.special.hyper.meijerg"]], "multigamma (class in sympy.functions.special.gamma_functions)": [[73, "sympy.functions.special.gamma_functions.multigamma"]], "nu (sympy.functions.special.hyper.meijerg property)": [[73, "sympy.functions.special.hyper.meijerg.nu"]], "order (sympy.functions.special.bessel.besselbase property)": [[73, "sympy.functions.special.bessel.BesselBase.order"]], "pargs (sympy.functions.special.delta_functions.heaviside property)": [[73, "sympy.functions.special.delta_functions.Heaviside.pargs"]], "polygamma (class in sympy.functions.special.gamma_functions)": [[73, "sympy.functions.special.gamma_functions.polygamma"]], "polylog (class in sympy.functions.special.zeta_functions)": [[73, "sympy.functions.special.zeta_functions.polylog"]], "preferred_index (sympy.functions.special.tensor_functions.kroneckerdelta property)": [[73, "sympy.functions.special.tensor_functions.KroneckerDelta.preferred_index"]], "radius_of_convergence (sympy.functions.special.hyper.hyper property)": [[73, "sympy.functions.special.hyper.hyper.radius_of_convergence"]], "stieltjes (class in sympy.functions.special.zeta_functions)": [[73, "sympy.functions.special.zeta_functions.stieltjes"]], "sympy.functions.special.bessel": [[73, "module-sympy.functions.special.bessel"]], "sympy.functions.special.beta_functions": [[73, "module-sympy.functions.special.beta_functions"]], "sympy.functions.special.elliptic_integrals": [[73, "module-sympy.functions.special.elliptic_integrals"]], "sympy.functions.special.error_functions": [[73, "module-sympy.functions.special.error_functions"]], "sympy.functions.special.gamma_functions": [[73, "module-sympy.functions.special.gamma_functions"]], "sympy.functions.special.mathieu_functions": [[73, "module-sympy.functions.special.mathieu_functions"]], "sympy.functions.special.polynomials": [[73, "module-sympy.functions.special.polynomials"]], "sympy.functions.special.singularity_functions": [[73, "module-sympy.functions.special.singularity_functions"]], "sympy.functions.special.zeta_functions": [[73, "module-sympy.functions.special.zeta_functions"]], "trigamma (class in sympy.functions.special.gamma_functions)": [[73, "sympy.functions.special.gamma_functions.trigamma"]], "uppergamma (class in sympy.functions.special.gamma_functions)": [[73, "sympy.functions.special.gamma_functions.uppergamma"]], "yn (class in sympy.functions.special.bessel)": [[73, "sympy.functions.special.bessel.yn"]], "zeta (class in sympy.functions.special.zeta_functions)": [[73, "sympy.functions.special.zeta_functions.zeta"]], "curve (class in sympy.geometry.curve)": [[74, "sympy.geometry.curve.Curve"]], "ambient_dimension (sympy.geometry.curve.curve property)": [[74, "sympy.geometry.curve.Curve.ambient_dimension"]], "arbitrary_point() (sympy.geometry.curve.curve method)": [[74, "sympy.geometry.curve.Curve.arbitrary_point"]], "free_symbols (sympy.geometry.curve.curve property)": [[74, "sympy.geometry.curve.Curve.free_symbols"]], "functions (sympy.geometry.curve.curve property)": [[74, "sympy.geometry.curve.Curve.functions"]], "length (sympy.geometry.curve.curve property)": [[74, "sympy.geometry.curve.Curve.length"]], "limits (sympy.geometry.curve.curve property)": [[74, "sympy.geometry.curve.Curve.limits"]], "parameter (sympy.geometry.curve.curve property)": [[74, "sympy.geometry.curve.Curve.parameter"]], "plot_interval() (sympy.geometry.curve.curve method)": [[74, "sympy.geometry.curve.Curve.plot_interval"]], "rotate() (sympy.geometry.curve.curve method)": [[74, "sympy.geometry.curve.Curve.rotate"]], "scale() (sympy.geometry.curve.curve method)": [[74, "sympy.geometry.curve.Curve.scale"]], "sympy.geometry.curve": [[74, "module-sympy.geometry.curve"]], "translate() (sympy.geometry.curve.curve method)": [[74, "sympy.geometry.curve.Curve.translate"]], "circle (class in sympy.geometry.ellipse)": [[75, "sympy.geometry.ellipse.Circle"]], "ellipse (class in sympy.geometry.ellipse)": [[75, "sympy.geometry.ellipse.Ellipse"]], "apoapsis (sympy.geometry.ellipse.ellipse property)": [[75, "sympy.geometry.ellipse.Ellipse.apoapsis"]], "arbitrary_point() (sympy.geometry.ellipse.ellipse method)": [[75, "sympy.geometry.ellipse.Ellipse.arbitrary_point"]], "area (sympy.geometry.ellipse.ellipse property)": [[75, "sympy.geometry.ellipse.Ellipse.area"]], "auxiliary_circle() (sympy.geometry.ellipse.ellipse method)": [[75, "sympy.geometry.ellipse.Ellipse.auxiliary_circle"]], "bounds (sympy.geometry.ellipse.ellipse property)": [[75, "sympy.geometry.ellipse.Ellipse.bounds"]], "center (sympy.geometry.ellipse.ellipse property)": [[75, "sympy.geometry.ellipse.Ellipse.center"]], "circumference (sympy.geometry.ellipse.circle property)": [[75, "sympy.geometry.ellipse.Circle.circumference"]], "circumference (sympy.geometry.ellipse.ellipse property)": [[75, "sympy.geometry.ellipse.Ellipse.circumference"]], "director_circle() (sympy.geometry.ellipse.ellipse method)": [[75, "sympy.geometry.ellipse.Ellipse.director_circle"]], "eccentricity (sympy.geometry.ellipse.ellipse property)": [[75, "sympy.geometry.ellipse.Ellipse.eccentricity"]], "encloses_point() (sympy.geometry.ellipse.ellipse method)": [[75, "sympy.geometry.ellipse.Ellipse.encloses_point"]], "equation() (sympy.geometry.ellipse.circle method)": [[75, "sympy.geometry.ellipse.Circle.equation"]], "equation() (sympy.geometry.ellipse.ellipse method)": [[75, "sympy.geometry.ellipse.Ellipse.equation"]], "evolute() (sympy.geometry.ellipse.ellipse method)": [[75, "sympy.geometry.ellipse.Ellipse.evolute"]], "foci (sympy.geometry.ellipse.ellipse property)": [[75, "sympy.geometry.ellipse.Ellipse.foci"]], "focus_distance (sympy.geometry.ellipse.ellipse property)": [[75, "sympy.geometry.ellipse.Ellipse.focus_distance"]], "hradius (sympy.geometry.ellipse.ellipse property)": [[75, "sympy.geometry.ellipse.Ellipse.hradius"]], "intersection() (sympy.geometry.ellipse.circle method)": [[75, "sympy.geometry.ellipse.Circle.intersection"]], "intersection() (sympy.geometry.ellipse.ellipse method)": [[75, "sympy.geometry.ellipse.Ellipse.intersection"]], "is_tangent() (sympy.geometry.ellipse.ellipse method)": [[75, "sympy.geometry.ellipse.Ellipse.is_tangent"]], "major (sympy.geometry.ellipse.ellipse property)": [[75, "sympy.geometry.ellipse.Ellipse.major"]], "minor (sympy.geometry.ellipse.ellipse property)": [[75, "sympy.geometry.ellipse.Ellipse.minor"]], "normal_lines() (sympy.geometry.ellipse.ellipse method)": [[75, "sympy.geometry.ellipse.Ellipse.normal_lines"]], "periapsis (sympy.geometry.ellipse.ellipse property)": [[75, "sympy.geometry.ellipse.Ellipse.periapsis"]], "plot_interval() (sympy.geometry.ellipse.ellipse method)": [[75, "sympy.geometry.ellipse.Ellipse.plot_interval"]], "polar_second_moment_of_area() (sympy.geometry.ellipse.ellipse method)": [[75, "sympy.geometry.ellipse.Ellipse.polar_second_moment_of_area"]], "radius (sympy.geometry.ellipse.circle property)": [[75, "sympy.geometry.ellipse.Circle.radius"]], "random_point() (sympy.geometry.ellipse.ellipse method)": [[75, "sympy.geometry.ellipse.Ellipse.random_point"]], "reflect() (sympy.geometry.ellipse.circle method)": [[75, "sympy.geometry.ellipse.Circle.reflect"]], "reflect() (sympy.geometry.ellipse.ellipse method)": [[75, "sympy.geometry.ellipse.Ellipse.reflect"]], "rotate() (sympy.geometry.ellipse.ellipse method)": [[75, "sympy.geometry.ellipse.Ellipse.rotate"]], "scale() (sympy.geometry.ellipse.circle method)": [[75, "sympy.geometry.ellipse.Circle.scale"]], "scale() (sympy.geometry.ellipse.ellipse method)": [[75, "sympy.geometry.ellipse.Ellipse.scale"]], "second_moment_of_area() (sympy.geometry.ellipse.ellipse method)": [[75, "sympy.geometry.ellipse.Ellipse.second_moment_of_area"]], "section_modulus() (sympy.geometry.ellipse.ellipse method)": [[75, "sympy.geometry.ellipse.Ellipse.section_modulus"]], "semilatus_rectum (sympy.geometry.ellipse.ellipse property)": [[75, "sympy.geometry.ellipse.Ellipse.semilatus_rectum"]], "sympy.geometry.ellipse": [[75, "module-sympy.geometry.ellipse"]], "tangent_lines() (sympy.geometry.ellipse.ellipse method)": [[75, "sympy.geometry.ellipse.Ellipse.tangent_lines"]], "vradius (sympy.geometry.ellipse.circle property)": [[75, "sympy.geometry.ellipse.Circle.vradius"]], "vradius (sympy.geometry.ellipse.ellipse property)": [[75, "sympy.geometry.ellipse.Ellipse.vradius"]], "geometryentity (class in sympy.geometry.entity)": [[76, "sympy.geometry.entity.GeometryEntity"]], "ambient_dimension (sympy.geometry.entity.geometryentity property)": [[76, "sympy.geometry.entity.GeometryEntity.ambient_dimension"]], "bounds (sympy.geometry.entity.geometryentity property)": [[76, "sympy.geometry.entity.GeometryEntity.bounds"]], "encloses() (sympy.geometry.entity.geometryentity method)": [[76, "sympy.geometry.entity.GeometryEntity.encloses"]], "intersection() (sympy.geometry.entity.geometryentity method)": [[76, "sympy.geometry.entity.GeometryEntity.intersection"]], "is_similar() (sympy.geometry.entity.geometryentity method)": [[76, "sympy.geometry.entity.GeometryEntity.is_similar"]], "parameter_value() (sympy.geometry.entity.geometryentity method)": [[76, "sympy.geometry.entity.GeometryEntity.parameter_value"]], "reflect() (sympy.geometry.entity.geometryentity method)": [[76, "sympy.geometry.entity.GeometryEntity.reflect"]], "rotate() (sympy.geometry.entity.geometryentity method)": [[76, "sympy.geometry.entity.GeometryEntity.rotate"]], "scale() (sympy.geometry.entity.geometryentity method)": [[76, "sympy.geometry.entity.GeometryEntity.scale"]], "sympy.geometry.entity": [[76, "module-sympy.geometry.entity"]], "translate() (sympy.geometry.entity.geometryentity method)": [[76, "sympy.geometry.entity.GeometryEntity.translate"]], "line (class in sympy.geometry.line)": [[78, "sympy.geometry.line.Line"]], "line2d (class in sympy.geometry.line)": [[78, "sympy.geometry.line.Line2D"]], "line3d (class in sympy.geometry.line)": [[78, "sympy.geometry.line.Line3D"]], "linearentity (class in sympy.geometry.line)": [[78, "sympy.geometry.line.LinearEntity"]], "linearentity2d (class in sympy.geometry.line)": [[78, "sympy.geometry.line.LinearEntity2D"]], "linearentity3d (class in sympy.geometry.line)": [[78, "sympy.geometry.line.LinearEntity3D"]], "ray (class in sympy.geometry.line)": [[78, "sympy.geometry.line.Ray"]], "ray2d (class in sympy.geometry.line)": [[78, "sympy.geometry.line.Ray2D"]], "ray3d (class in sympy.geometry.line)": [[78, "sympy.geometry.line.Ray3D"]], "segment (class in sympy.geometry.line)": [[78, "sympy.geometry.line.Segment"]], "segment2d (class in sympy.geometry.line)": [[78, "sympy.geometry.line.Segment2D"]], "segment3d (class in sympy.geometry.line)": [[78, "sympy.geometry.line.Segment3D"]], "ambient_dimension (sympy.geometry.line.linearentity property)": [[78, "sympy.geometry.line.LinearEntity.ambient_dimension"]], "angle_between() (sympy.geometry.line.linearentity method)": [[78, "sympy.geometry.line.LinearEntity.angle_between"]], "arbitrary_point() (sympy.geometry.line.linearentity method)": [[78, "sympy.geometry.line.LinearEntity.arbitrary_point"]], "are_concurrent() (sympy.geometry.line.linearentity static method)": [[78, "sympy.geometry.line.LinearEntity.are_concurrent"]], "bisectors() (sympy.geometry.line.linearentity method)": [[78, "sympy.geometry.line.LinearEntity.bisectors"]], "bounds (sympy.geometry.line.linearentity2d property)": [[78, "sympy.geometry.line.LinearEntity2D.bounds"]], "closing_angle() (sympy.geometry.line.ray2d method)": [[78, "sympy.geometry.line.Ray2D.closing_angle"]], "coefficients (sympy.geometry.line.line2d property)": [[78, "sympy.geometry.line.Line2D.coefficients"]], "contains() (sympy.geometry.line.line method)": [[78, "sympy.geometry.line.Line.contains"]], "contains() (sympy.geometry.line.linearentity method)": [[78, "sympy.geometry.line.LinearEntity.contains"]], "contains() (sympy.geometry.line.ray method)": [[78, "sympy.geometry.line.Ray.contains"]], "contains() (sympy.geometry.line.segment method)": [[78, "sympy.geometry.line.Segment.contains"]], "direction (sympy.geometry.line.linearentity property)": [[78, "sympy.geometry.line.LinearEntity.direction"]], "direction_cosine (sympy.geometry.line.linearentity3d property)": [[78, "sympy.geometry.line.LinearEntity3D.direction_cosine"]], "direction_ratio (sympy.geometry.line.linearentity3d property)": [[78, "sympy.geometry.line.LinearEntity3D.direction_ratio"]], "distance() (sympy.geometry.line.line method)": [[78, "sympy.geometry.line.Line.distance"]], "distance() (sympy.geometry.line.ray method)": [[78, "sympy.geometry.line.Ray.distance"]], "distance() (sympy.geometry.line.segment method)": [[78, "sympy.geometry.line.Segment.distance"]], "equals() (sympy.geometry.line.line method)": [[78, "sympy.geometry.line.Line.equals"]], "equals() (sympy.geometry.line.ray method)": [[78, "sympy.geometry.line.Ray.equals"]], "equals() (sympy.geometry.line.segment method)": [[78, "sympy.geometry.line.Segment.equals"]], "equation() (sympy.geometry.line.line2d method)": [[78, "sympy.geometry.line.Line2D.equation"]], "equation() (sympy.geometry.line.line3d method)": [[78, "sympy.geometry.line.Line3D.equation"]], "intersection() (sympy.geometry.line.linearentity method)": [[78, "sympy.geometry.line.LinearEntity.intersection"]], "is_parallel() (sympy.geometry.line.linearentity method)": [[78, "sympy.geometry.line.LinearEntity.is_parallel"]], "is_perpendicular() (sympy.geometry.line.linearentity method)": [[78, "sympy.geometry.line.LinearEntity.is_perpendicular"]], "is_similar() (sympy.geometry.line.linearentity method)": [[78, "sympy.geometry.line.LinearEntity.is_similar"]], "length (sympy.geometry.line.linearentity property)": [[78, "sympy.geometry.line.LinearEntity.length"]], "length (sympy.geometry.line.segment property)": [[78, "sympy.geometry.line.Segment.length"]], "midpoint (sympy.geometry.line.segment property)": [[78, "sympy.geometry.line.Segment.midpoint"]], "p1 (sympy.geometry.line.linearentity property)": [[78, "sympy.geometry.line.LinearEntity.p1"]], "p2 (sympy.geometry.line.linearentity property)": [[78, "sympy.geometry.line.LinearEntity.p2"]], "parallel_line() (sympy.geometry.line.linearentity method)": [[78, "sympy.geometry.line.LinearEntity.parallel_line"]], "perpendicular_bisector() (sympy.geometry.line.segment method)": [[78, "sympy.geometry.line.Segment.perpendicular_bisector"]], "perpendicular_line() (sympy.geometry.line.linearentity method)": [[78, "sympy.geometry.line.LinearEntity.perpendicular_line"]], "perpendicular_line() (sympy.geometry.line.linearentity2d method)": [[78, "sympy.geometry.line.LinearEntity2D.perpendicular_line"]], "perpendicular_segment() (sympy.geometry.line.linearentity method)": [[78, "sympy.geometry.line.LinearEntity.perpendicular_segment"]], "plot_interval() (sympy.geometry.line.line method)": [[78, "sympy.geometry.line.Line.plot_interval"]], "plot_interval() (sympy.geometry.line.ray method)": [[78, "sympy.geometry.line.Ray.plot_interval"]], "plot_interval() (sympy.geometry.line.segment method)": [[78, "sympy.geometry.line.Segment.plot_interval"]], "points (sympy.geometry.line.linearentity property)": [[78, "sympy.geometry.line.LinearEntity.points"]], "projection() (sympy.geometry.line.linearentity method)": [[78, "sympy.geometry.line.LinearEntity.projection"]], "random_point() (sympy.geometry.line.linearentity method)": [[78, "sympy.geometry.line.LinearEntity.random_point"]], "slope (sympy.geometry.line.linearentity2d property)": [[78, "sympy.geometry.line.LinearEntity2D.slope"]], "smallest_angle_between() (sympy.geometry.line.linearentity method)": [[78, "sympy.geometry.line.LinearEntity.smallest_angle_between"]], "source (sympy.geometry.line.ray property)": [[78, "sympy.geometry.line.Ray.source"]], "sympy.geometry.line": [[78, "module-sympy.geometry.line"]], "xdirection (sympy.geometry.line.ray2d property)": [[78, "sympy.geometry.line.Ray2D.xdirection"]], "xdirection (sympy.geometry.line.ray3d property)": [[78, "sympy.geometry.line.Ray3D.xdirection"]], "ydirection (sympy.geometry.line.ray2d property)": [[78, "sympy.geometry.line.Ray2D.ydirection"]], "ydirection (sympy.geometry.line.ray3d property)": [[78, "sympy.geometry.line.Ray3D.ydirection"]], "zdirection (sympy.geometry.line.ray3d property)": [[78, "sympy.geometry.line.Ray3D.zdirection"]], "plane (class in sympy.geometry.plane)": [[79, "sympy.geometry.plane.Plane"]], "angle_between() (sympy.geometry.plane.plane method)": [[79, "sympy.geometry.plane.Plane.angle_between"]], "arbitrary_point() (sympy.geometry.plane.plane method)": [[79, "sympy.geometry.plane.Plane.arbitrary_point"]], "are_concurrent() (sympy.geometry.plane.plane static method)": [[79, "sympy.geometry.plane.Plane.are_concurrent"]], "distance() (sympy.geometry.plane.plane method)": [[79, "sympy.geometry.plane.Plane.distance"]], "equals() (sympy.geometry.plane.plane method)": [[79, "sympy.geometry.plane.Plane.equals"]], "equation() (sympy.geometry.plane.plane method)": [[79, "sympy.geometry.plane.Plane.equation"]], "intersection() (sympy.geometry.plane.plane method)": [[79, "sympy.geometry.plane.Plane.intersection"]], "is_coplanar() (sympy.geometry.plane.plane method)": [[79, "sympy.geometry.plane.Plane.is_coplanar"]], "is_parallel() (sympy.geometry.plane.plane method)": [[79, "sympy.geometry.plane.Plane.is_parallel"]], "is_perpendicular() (sympy.geometry.plane.plane method)": [[79, "sympy.geometry.plane.Plane.is_perpendicular"]], "normal_vector (sympy.geometry.plane.plane property)": [[79, "sympy.geometry.plane.Plane.normal_vector"]], "p1 (sympy.geometry.plane.plane property)": [[79, "sympy.geometry.plane.Plane.p1"]], "parallel_plane() (sympy.geometry.plane.plane method)": [[79, "sympy.geometry.plane.Plane.parallel_plane"]], "parameter_value() (sympy.geometry.plane.plane method)": [[79, "sympy.geometry.plane.Plane.parameter_value"]], "perpendicular_line() (sympy.geometry.plane.plane method)": [[79, "sympy.geometry.plane.Plane.perpendicular_line"]], "perpendicular_plane() (sympy.geometry.plane.plane method)": [[79, "sympy.geometry.plane.Plane.perpendicular_plane"]], "projection() (sympy.geometry.plane.plane method)": [[79, "sympy.geometry.plane.Plane.projection"]], "projection_line() (sympy.geometry.plane.plane method)": [[79, "sympy.geometry.plane.Plane.projection_line"]], "random_point() (sympy.geometry.plane.plane method)": [[79, "sympy.geometry.plane.Plane.random_point"]], "sympy.geometry.plane": [[79, "module-sympy.geometry.plane"]], "point (class in sympy.geometry.point)": [[80, "sympy.geometry.point.Point"]], "point2d (class in sympy.geometry.point)": [[80, "sympy.geometry.point.Point2D"]], "point3d (class in sympy.geometry.point)": [[80, "sympy.geometry.point.Point3D"]], "affine_rank() (sympy.geometry.point.point static method)": [[80, "sympy.geometry.point.Point.affine_rank"]], "ambient_dimension (sympy.geometry.point.point property)": [[80, "sympy.geometry.point.Point.ambient_dimension"]], "are_collinear() (sympy.geometry.point.point3d static method)": [[80, "sympy.geometry.point.Point3D.are_collinear"]], "are_coplanar() (sympy.geometry.point.point class method)": [[80, "sympy.geometry.point.Point.are_coplanar"]], "bounds (sympy.geometry.point.point2d property)": [[80, "sympy.geometry.point.Point2D.bounds"]], "canberra_distance() (sympy.geometry.point.point method)": [[80, "sympy.geometry.point.Point.canberra_distance"]], "coordinates (sympy.geometry.point.point2d property)": [[80, "sympy.geometry.point.Point2D.coordinates"]], "coordinates (sympy.geometry.point.point3d property)": [[80, "sympy.geometry.point.Point3D.coordinates"]], "direction_cosine() (sympy.geometry.point.point3d method)": [[80, "sympy.geometry.point.Point3D.direction_cosine"]], "direction_ratio() (sympy.geometry.point.point3d method)": [[80, "sympy.geometry.point.Point3D.direction_ratio"]], "distance() (sympy.geometry.point.point method)": [[80, "sympy.geometry.point.Point.distance"]], "dot() (sympy.geometry.point.point method)": [[80, "sympy.geometry.point.Point.dot"]], "equals() (sympy.geometry.point.point method)": [[80, "sympy.geometry.point.Point.equals"]], "intersection() (sympy.geometry.point.point method)": [[80, "sympy.geometry.point.Point.intersection"]], "intersection() (sympy.geometry.point.point3d method)": [[80, "sympy.geometry.point.Point3D.intersection"]], "is_collinear() (sympy.geometry.point.point method)": [[80, "sympy.geometry.point.Point.is_collinear"]], "is_concyclic() (sympy.geometry.point.point method)": [[80, "sympy.geometry.point.Point.is_concyclic"]], "is_nonzero (sympy.geometry.point.point property)": [[80, "sympy.geometry.point.Point.is_nonzero"]], "is_scalar_multiple() (sympy.geometry.point.point method)": [[80, "sympy.geometry.point.Point.is_scalar_multiple"]], "is_zero (sympy.geometry.point.point property)": [[80, "sympy.geometry.point.Point.is_zero"]], "length (sympy.geometry.point.point property)": [[80, "sympy.geometry.point.Point.length"]], "midpoint() (sympy.geometry.point.point method)": [[80, "sympy.geometry.point.Point.midpoint"]], "origin (sympy.geometry.point.point property)": [[80, "sympy.geometry.point.Point.origin"]], "orthogonal_direction (sympy.geometry.point.point property)": [[80, "sympy.geometry.point.Point.orthogonal_direction"]], "project() (sympy.geometry.point.point static method)": [[80, "sympy.geometry.point.Point.project"]], "rotate() (sympy.geometry.point.point2d method)": [[80, "sympy.geometry.point.Point2D.rotate"]], "scale() (sympy.geometry.point.point2d method)": [[80, "sympy.geometry.point.Point2D.scale"]], "scale() (sympy.geometry.point.point3d method)": [[80, "sympy.geometry.point.Point3D.scale"]], "sympy.geometry.point": [[80, "module-sympy.geometry.point"]], "taxicab_distance() (sympy.geometry.point.point method)": [[80, "sympy.geometry.point.Point.taxicab_distance"]], "transform() (sympy.geometry.point.point2d method)": [[80, "sympy.geometry.point.Point2D.transform"]], "transform() (sympy.geometry.point.point3d method)": [[80, "sympy.geometry.point.Point3D.transform"]], "translate() (sympy.geometry.point.point2d method)": [[80, "sympy.geometry.point.Point2D.translate"]], "translate() (sympy.geometry.point.point3d method)": [[80, "sympy.geometry.point.Point3D.translate"]], "unit (sympy.geometry.point.point property)": [[80, "sympy.geometry.point.Point.unit"]], "x (sympy.geometry.point.point2d property)": [[80, "sympy.geometry.point.Point2D.x"]], "x (sympy.geometry.point.point3d property)": [[80, "sympy.geometry.point.Point3D.x"]], "y (sympy.geometry.point.point2d property)": [[80, "sympy.geometry.point.Point2D.y"]], "y (sympy.geometry.point.point3d property)": [[80, "sympy.geometry.point.Point3D.y"]], "z (sympy.geometry.point.point3d property)": [[80, "sympy.geometry.point.Point3D.z"]], "polygon (class in sympy.geometry.polygon)": [[81, "sympy.geometry.polygon.Polygon"]], "regularpolygon (class in sympy.geometry.polygon)": [[81, "sympy.geometry.polygon.RegularPolygon"]], "triangle (class in sympy.geometry.polygon)": [[81, "sympy.geometry.polygon.Triangle"]], "altitudes (sympy.geometry.polygon.triangle property)": [[81, "sympy.geometry.polygon.Triangle.altitudes"]], "angles (sympy.geometry.polygon.polygon property)": [[81, "sympy.geometry.polygon.Polygon.angles"]], "angles (sympy.geometry.polygon.regularpolygon property)": [[81, "sympy.geometry.polygon.RegularPolygon.angles"]], "apothem (sympy.geometry.polygon.regularpolygon property)": [[81, "sympy.geometry.polygon.RegularPolygon.apothem"]], "arbitrary_point() (sympy.geometry.polygon.polygon method)": [[81, "sympy.geometry.polygon.Polygon.arbitrary_point"]], "area (sympy.geometry.polygon.polygon property)": [[81, "sympy.geometry.polygon.Polygon.area"]], "area (sympy.geometry.polygon.regularpolygon property)": [[81, "sympy.geometry.polygon.RegularPolygon.area"]], "args (sympy.geometry.polygon.regularpolygon property)": [[81, "sympy.geometry.polygon.RegularPolygon.args"]], "bisectors() (sympy.geometry.polygon.polygon method)": [[81, "sympy.geometry.polygon.Polygon.bisectors"]], "bisectors() (sympy.geometry.polygon.triangle method)": [[81, "sympy.geometry.polygon.Triangle.bisectors"]], "bounds (sympy.geometry.polygon.polygon property)": [[81, "sympy.geometry.polygon.Polygon.bounds"]], "center (sympy.geometry.polygon.regularpolygon property)": [[81, "sympy.geometry.polygon.RegularPolygon.center"]], "centroid (sympy.geometry.polygon.polygon property)": [[81, "sympy.geometry.polygon.Polygon.centroid"]], "centroid (sympy.geometry.polygon.regularpolygon property)": [[81, "sympy.geometry.polygon.RegularPolygon.centroid"]], "circumcenter (sympy.geometry.polygon.regularpolygon property)": [[81, "sympy.geometry.polygon.RegularPolygon.circumcenter"]], "circumcenter (sympy.geometry.polygon.triangle property)": [[81, "sympy.geometry.polygon.Triangle.circumcenter"]], "circumcircle (sympy.geometry.polygon.regularpolygon property)": [[81, "sympy.geometry.polygon.RegularPolygon.circumcircle"]], "circumcircle (sympy.geometry.polygon.triangle property)": [[81, "sympy.geometry.polygon.Triangle.circumcircle"]], "circumradius (sympy.geometry.polygon.regularpolygon property)": [[81, "sympy.geometry.polygon.RegularPolygon.circumradius"]], "circumradius (sympy.geometry.polygon.triangle property)": [[81, "sympy.geometry.polygon.Triangle.circumradius"]], "cut_section() (sympy.geometry.polygon.polygon method)": [[81, "sympy.geometry.polygon.Polygon.cut_section"]], "distance() (sympy.geometry.polygon.polygon method)": [[81, "sympy.geometry.polygon.Polygon.distance"]], "encloses_point() (sympy.geometry.polygon.polygon method)": [[81, "sympy.geometry.polygon.Polygon.encloses_point"]], "encloses_point() (sympy.geometry.polygon.regularpolygon method)": [[81, "sympy.geometry.polygon.RegularPolygon.encloses_point"]], "eulerline (sympy.geometry.polygon.triangle property)": [[81, "sympy.geometry.polygon.Triangle.eulerline"]], "excenters (sympy.geometry.polygon.triangle property)": [[81, "sympy.geometry.polygon.Triangle.excenters"]], "exradii (sympy.geometry.polygon.triangle property)": [[81, "sympy.geometry.polygon.Triangle.exradii"]], "exterior_angle (sympy.geometry.polygon.regularpolygon property)": [[81, "sympy.geometry.polygon.RegularPolygon.exterior_angle"]], "first_moment_of_area() (sympy.geometry.polygon.polygon method)": [[81, "sympy.geometry.polygon.Polygon.first_moment_of_area"]], "incenter (sympy.geometry.polygon.triangle property)": [[81, "sympy.geometry.polygon.Triangle.incenter"]], "incircle (sympy.geometry.polygon.regularpolygon property)": [[81, "sympy.geometry.polygon.RegularPolygon.incircle"]], "incircle (sympy.geometry.polygon.triangle property)": [[81, "sympy.geometry.polygon.Triangle.incircle"]], "inradius (sympy.geometry.polygon.regularpolygon property)": [[81, "sympy.geometry.polygon.RegularPolygon.inradius"]], "inradius (sympy.geometry.polygon.triangle property)": [[81, "sympy.geometry.polygon.Triangle.inradius"]], "interior_angle (sympy.geometry.polygon.regularpolygon property)": [[81, "sympy.geometry.polygon.RegularPolygon.interior_angle"]], "intersection() (sympy.geometry.polygon.polygon method)": [[81, "sympy.geometry.polygon.Polygon.intersection"]], "is_convex() (sympy.geometry.polygon.polygon method)": [[81, "sympy.geometry.polygon.Polygon.is_convex"]], "is_equilateral() (sympy.geometry.polygon.triangle method)": [[81, "sympy.geometry.polygon.Triangle.is_equilateral"]], "is_isosceles() (sympy.geometry.polygon.triangle method)": [[81, "sympy.geometry.polygon.Triangle.is_isosceles"]], "is_right() (sympy.geometry.polygon.triangle method)": [[81, "sympy.geometry.polygon.Triangle.is_right"]], "is_scalene() (sympy.geometry.polygon.triangle method)": [[81, "sympy.geometry.polygon.Triangle.is_scalene"]], "is_similar() (sympy.geometry.polygon.triangle method)": [[81, "sympy.geometry.polygon.Triangle.is_similar"]], "length (sympy.geometry.polygon.regularpolygon property)": [[81, "sympy.geometry.polygon.RegularPolygon.length"]], "medial (sympy.geometry.polygon.triangle property)": [[81, "sympy.geometry.polygon.Triangle.medial"]], "medians (sympy.geometry.polygon.triangle property)": [[81, "sympy.geometry.polygon.Triangle.medians"]], "nine_point_circle (sympy.geometry.polygon.triangle property)": [[81, "sympy.geometry.polygon.Triangle.nine_point_circle"]], "orthocenter (sympy.geometry.polygon.triangle property)": [[81, "sympy.geometry.polygon.Triangle.orthocenter"]], "perimeter (sympy.geometry.polygon.polygon property)": [[81, "sympy.geometry.polygon.Polygon.perimeter"]], "plot_interval() (sympy.geometry.polygon.polygon method)": [[81, "sympy.geometry.polygon.Polygon.plot_interval"]], "polar_second_moment_of_area() (sympy.geometry.polygon.polygon method)": [[81, "sympy.geometry.polygon.Polygon.polar_second_moment_of_area"]], "radius (sympy.geometry.polygon.regularpolygon property)": [[81, "sympy.geometry.polygon.RegularPolygon.radius"]], "reflect() (sympy.geometry.polygon.regularpolygon method)": [[81, "sympy.geometry.polygon.RegularPolygon.reflect"]], "rotate() (sympy.geometry.polygon.regularpolygon method)": [[81, "sympy.geometry.polygon.RegularPolygon.rotate"]], "rotation (sympy.geometry.polygon.regularpolygon property)": [[81, "sympy.geometry.polygon.RegularPolygon.rotation"]], "scale() (sympy.geometry.polygon.regularpolygon method)": [[81, "sympy.geometry.polygon.RegularPolygon.scale"]], "second_moment_of_area() (sympy.geometry.polygon.polygon method)": [[81, "sympy.geometry.polygon.Polygon.second_moment_of_area"]], "section_modulus() (sympy.geometry.polygon.polygon method)": [[81, "sympy.geometry.polygon.Polygon.section_modulus"]], "sides (sympy.geometry.polygon.polygon property)": [[81, "sympy.geometry.polygon.Polygon.sides"]], "spin() (sympy.geometry.polygon.regularpolygon method)": [[81, "sympy.geometry.polygon.RegularPolygon.spin"]], "sympy.geometry.polygon": [[81, "module-sympy.geometry.polygon"]], "vertices (sympy.geometry.polygon.polygon property)": [[81, "sympy.geometry.polygon.Polygon.vertices"]], "vertices (sympy.geometry.polygon.regularpolygon property)": [[81, "sympy.geometry.polygon.RegularPolygon.vertices"]], "vertices (sympy.geometry.polygon.triangle property)": [[81, "sympy.geometry.polygon.Triangle.vertices"]], "are_similar() (in module sympy.geometry.util)": [[82, "sympy.geometry.util.are_similar"]], "centroid() (in module sympy.geometry.util)": [[82, "sympy.geometry.util.centroid"]], "convex_hull() (in module sympy.geometry.util)": [[82, "sympy.geometry.util.convex_hull"]], "idiff() (in module sympy.geometry.util)": [[82, "sympy.geometry.util.idiff"]], "intersection() (in module sympy.geometry.util)": [[82, "sympy.geometry.util.intersection"]], "sympy.geometry.util": [[82, "module-sympy.geometry.util"]], "expr_to_holonomic() (in module sympy.holonomic.holonomic)": [[84, "sympy.holonomic.holonomic.expr_to_holonomic"]], "from_hyper() (in module sympy.holonomic.holonomic)": [[84, "sympy.holonomic.holonomic.from_hyper"]], "from_meijerg() (in module sympy.holonomic.holonomic)": [[84, "sympy.holonomic.holonomic.from_meijerg"]], "sympy.holonomic": [[85, "module-sympy.holonomic"]], "_convert_poly_rat_alg() (in module sympy.holonomic.holonomic)": [[86, "sympy.holonomic.holonomic._convert_poly_rat_alg"]], "_create_table() (in module sympy.holonomic.holonomic)": [[86, "sympy.holonomic.holonomic._create_table"]], "composition() (sympy.holonomic.holonomic.holonomicfunction method)": [[87, "sympy.holonomic.holonomic.HolonomicFunction.composition"]], "diff() (sympy.holonomic.holonomic.holonomicfunction method)": [[87, "sympy.holonomic.holonomic.HolonomicFunction.diff"]], "evalf() (sympy.holonomic.holonomic.holonomicfunction method)": [[87, "sympy.holonomic.holonomic.HolonomicFunction.evalf"]], "integrate() (sympy.holonomic.holonomic.holonomicfunction method)": [[87, "sympy.holonomic.holonomic.HolonomicFunction.integrate"]], "series() (sympy.holonomic.holonomic.holonomicfunction method)": [[87, "sympy.holonomic.holonomic.HolonomicFunction.series"]], "to_expr() (sympy.holonomic.holonomic.holonomicfunction method)": [[87, "sympy.holonomic.holonomic.HolonomicFunction.to_expr"]], "to_hyper() (sympy.holonomic.holonomic.holonomicfunction method)": [[87, "sympy.holonomic.holonomic.HolonomicFunction.to_hyper"]], "to_meijerg() (sympy.holonomic.holonomic.holonomicfunction method)": [[87, "sympy.holonomic.holonomic.HolonomicFunction.to_meijerg"]], "to_sequence() (sympy.holonomic.holonomic.holonomicfunction method)": [[87, "sympy.holonomic.holonomic.HolonomicFunction.to_sequence"]], "differentialoperator (class in sympy.holonomic.holonomic)": [[88, "sympy.holonomic.holonomic.DifferentialOperator"]], "differentialoperatoralgebra (class in sympy.holonomic.holonomic)": [[88, "sympy.holonomic.holonomic.DifferentialOperatorAlgebra"]], "differentialoperators() (in module sympy.holonomic.holonomic)": [[88, "sympy.holonomic.holonomic.DifferentialOperators"]], "holonomicfunction (class in sympy.holonomic.holonomic)": [[88, "sympy.holonomic.holonomic.HolonomicFunction"]], "is_singular() (sympy.holonomic.holonomic.differentialoperator method)": [[88, "sympy.holonomic.holonomic.DifferentialOperator.is_singular"]], "_coeffexpvalueerror": [[90, "sympy.integrals.meijerint._CoeffExpValueError"]], "_check_antecedents() (in module sympy.integrals.meijerint)": [[90, "sympy.integrals.meijerint._check_antecedents"]], "_check_antecedents_1() (in module sympy.integrals.meijerint)": [[90, "sympy.integrals.meijerint._check_antecedents_1"]], "_check_antecedents_inversion() (in module sympy.integrals.meijerint)": [[90, "sympy.integrals.meijerint._check_antecedents_inversion"]], "_condsimp() (in module sympy.integrals.meijerint)": [[90, "sympy.integrals.meijerint._condsimp"]], "_create_lookup_table() (in module sympy.integrals.meijerint)": [[90, "sympy.integrals.meijerint._create_lookup_table"]], "_dummy() (in module sympy.integrals.meijerint)": [[90, "sympy.integrals.meijerint._dummy"]], "_dummy_() (in module sympy.integrals.meijerint)": [[90, "sympy.integrals.meijerint._dummy_"]], "_eval_cond() (in module sympy.integrals.meijerint)": [[90, "sympy.integrals.meijerint._eval_cond"]], "_exponents() (in module sympy.integrals.meijerint)": [[90, "sympy.integrals.meijerint._exponents"]], "_find_splitting_points() (in module sympy.integrals.meijerint)": [[90, "sympy.integrals.meijerint._find_splitting_points"]], "_flip_g() (in module sympy.integrals.meijerint)": [[90, "sympy.integrals.meijerint._flip_g"]], "_functions() (in module sympy.integrals.meijerint)": [[90, "sympy.integrals.meijerint._functions"]], "_get_coeff_exp() (in module sympy.integrals.meijerint)": [[90, "sympy.integrals.meijerint._get_coeff_exp"]], "_guess_expansion() (in module sympy.integrals.meijerint)": [[90, "sympy.integrals.meijerint._guess_expansion"]], "_inflate_fox_h() (in module sympy.integrals.meijerint)": [[90, "sympy.integrals.meijerint._inflate_fox_h"]], "_inflate_g() (in module sympy.integrals.meijerint)": [[90, "sympy.integrals.meijerint._inflate_g"]], "_int0oo() (in module sympy.integrals.meijerint)": [[90, "sympy.integrals.meijerint._int0oo"]], "_int0oo_1() (in module sympy.integrals.meijerint)": [[90, "sympy.integrals.meijerint._int0oo_1"]], "_int_inversion() (in module sympy.integrals.meijerint)": [[90, "sympy.integrals.meijerint._int_inversion"]], "_is_analytic() (in module sympy.integrals.meijerint)": [[90, "sympy.integrals.meijerint._is_analytic"]], "_meijerint_definite_2() (in module sympy.integrals.meijerint)": [[90, "sympy.integrals.meijerint._meijerint_definite_2"]], "_meijerint_definite_3() (in module sympy.integrals.meijerint)": [[90, "sympy.integrals.meijerint._meijerint_definite_3"]], "_meijerint_definite_4() (in module sympy.integrals.meijerint)": [[90, "sympy.integrals.meijerint._meijerint_definite_4"]], "_meijerint_indefinite_1() (in module sympy.integrals.meijerint)": [[90, "sympy.integrals.meijerint._meijerint_indefinite_1"]], "_mul_args() (in module sympy.integrals.meijerint)": [[90, "sympy.integrals.meijerint._mul_args"]], "_mul_as_two_parts() (in module sympy.integrals.meijerint)": [[90, "sympy.integrals.meijerint._mul_as_two_parts"]], "_my_principal_branch() (in module sympy.integrals.meijerint)": [[90, "sympy.integrals.meijerint._my_principal_branch"]], "_mytype() (in module sympy.integrals.meijerint)": [[90, "sympy.integrals.meijerint._mytype"]], "_rewrite1() (in module sympy.integrals.meijerint)": [[90, "sympy.integrals.meijerint._rewrite1"]], "_rewrite2() (in module sympy.integrals.meijerint)": [[90, "sympy.integrals.meijerint._rewrite2"]], "_rewrite_inversion() (in module sympy.integrals.meijerint)": [[90, "sympy.integrals.meijerint._rewrite_inversion"]], "_rewrite_saxena() (in module sympy.integrals.meijerint)": [[90, "sympy.integrals.meijerint._rewrite_saxena"]], "_rewrite_saxena_1() (in module sympy.integrals.meijerint)": [[90, "sympy.integrals.meijerint._rewrite_saxena_1"]], "_rewrite_single() (in module sympy.integrals.meijerint)": [[90, "sympy.integrals.meijerint._rewrite_single"]], "_split_mul() (in module sympy.integrals.meijerint)": [[90, "sympy.integrals.meijerint._split_mul"]], "meijerint_definite() (in module sympy.integrals.meijerint)": [[90, "sympy.integrals.meijerint.meijerint_definite"]], "meijerint_indefinite() (in module sympy.integrals.meijerint)": [[90, "sympy.integrals.meijerint.meijerint_indefinite"]], "meijerint_inversion() (in module sympy.integrals.meijerint)": [[90, "sympy.integrals.meijerint.meijerint_inversion"]], "sympy.integrals.meijerint": [[90, "module-sympy.integrals.meijerint"]], "sympy.integrals.meijerint_doc": [[90, "module-sympy.integrals.meijerint_doc"]], "cosinetransform (class in sympy.integrals.transforms)": [[92, "sympy.integrals.transforms.CosineTransform"]], "exprwithlimits (class in sympy.concrete.expr_with_limits)": [[92, "sympy.concrete.expr_with_limits.ExprWithLimits"]], "fouriertransform (class in sympy.integrals.transforms)": [[92, "sympy.integrals.transforms.FourierTransform"]], "hankeltransform (class in sympy.integrals.transforms)": [[92, "sympy.integrals.transforms.HankelTransform"]], "integral (class in sympy.integrals.integrals)": [[92, "sympy.integrals.integrals.Integral"]], "integral.is_commutative (in module sympy.integrals.integrals)": [[92, "sympy.integrals.integrals.Integral.is_commutative"]], "integraltransform (class in sympy.integrals.transforms)": [[92, "sympy.integrals.transforms.IntegralTransform"]], "integraltransformerror": [[92, "sympy.integrals.transforms.IntegralTransformError"]], "inversecosinetransform (class in sympy.integrals.transforms)": [[92, "sympy.integrals.transforms.InverseCosineTransform"]], "inversefouriertransform (class in sympy.integrals.transforms)": [[92, "sympy.integrals.transforms.InverseFourierTransform"]], "inversehankeltransform (class in sympy.integrals.transforms)": [[92, "sympy.integrals.transforms.InverseHankelTransform"]], "inverselaplacetransform (class in sympy.integrals.transforms)": [[92, "sympy.integrals.transforms.InverseLaplaceTransform"]], "inversemellintransform (class in sympy.integrals.transforms)": [[92, "sympy.integrals.transforms.InverseMellinTransform"]], "inversesinetransform (class in sympy.integrals.transforms)": [[92, "sympy.integrals.transforms.InverseSineTransform"]], "laplacetransform (class in sympy.integrals.transforms)": [[92, "sympy.integrals.transforms.LaplaceTransform"]], "mellintransform (class in sympy.integrals.transforms)": [[92, "sympy.integrals.transforms.MellinTransform"]], "nonelementaryintegral (class in sympy.integrals.risch)": [[92, "sympy.integrals.risch.NonElementaryIntegral"]], "sinetransform (class in sympy.integrals.transforms)": [[92, "sympy.integrals.transforms.SineTransform"]], "_fourier_transform() (in module sympy.integrals.transforms)": [[92, "sympy.integrals.transforms._fourier_transform"]], "as_sum() (sympy.integrals.integrals.integral method)": [[92, "sympy.integrals.integrals.Integral.as_sum"]], "bound_symbols (sympy.concrete.expr_with_limits.exprwithlimits property)": [[92, "sympy.concrete.expr_with_limits.ExprWithLimits.bound_symbols"]], "components() (in module sympy.integrals.heurisch)": [[92, "sympy.integrals.heurisch.components"]], "cosine_transform() (in module sympy.integrals.transforms)": [[92, "sympy.integrals.transforms.cosine_transform"]], "deltaintegrate() (in module sympy.integrals.deltafunctions)": [[92, "sympy.integrals.deltafunctions.deltaintegrate"]], "doit() (sympy.integrals.integrals.integral method)": [[92, "sympy.integrals.integrals.Integral.doit"]], "doit() (sympy.integrals.transforms.integraltransform method)": [[92, "sympy.integrals.transforms.IntegralTransform.doit"]], "doit() (sympy.integrals.transforms.inverselaplacetransform method)": [[92, "sympy.integrals.transforms.InverseLaplaceTransform.doit"]], "doit() (sympy.integrals.transforms.laplacetransform method)": [[92, "sympy.integrals.transforms.LaplaceTransform.doit"]], "fourier_transform() (in module sympy.integrals.transforms)": [[92, "sympy.integrals.transforms.fourier_transform"]], "free_symbols (sympy.concrete.expr_with_limits.exprwithlimits property)": [[92, "sympy.concrete.expr_with_limits.ExprWithLimits.free_symbols"]], "free_symbols (sympy.integrals.integrals.integral property)": [[92, "sympy.integrals.integrals.Integral.free_symbols"]], "function (sympy.concrete.expr_with_limits.exprwithlimits property)": [[92, "sympy.concrete.expr_with_limits.ExprWithLimits.function"]], "function (sympy.integrals.transforms.integraltransform property)": [[92, "sympy.integrals.transforms.IntegralTransform.function"]], "function_variable (sympy.integrals.transforms.integraltransform property)": [[92, "sympy.integrals.transforms.IntegralTransform.function_variable"]], "gauss_chebyshev_t() (in module sympy.integrals.quadrature)": [[92, "sympy.integrals.quadrature.gauss_chebyshev_t"]], "gauss_chebyshev_u() (in module sympy.integrals.quadrature)": [[92, "sympy.integrals.quadrature.gauss_chebyshev_u"]], "gauss_gen_laguerre() (in module sympy.integrals.quadrature)": [[92, "sympy.integrals.quadrature.gauss_gen_laguerre"]], "gauss_hermite() (in module sympy.integrals.quadrature)": [[92, "sympy.integrals.quadrature.gauss_hermite"]], "gauss_jacobi() (in module sympy.integrals.quadrature)": [[92, "sympy.integrals.quadrature.gauss_jacobi"]], "gauss_laguerre() (in module sympy.integrals.quadrature)": [[92, "sympy.integrals.quadrature.gauss_laguerre"]], "gauss_legendre() (in module sympy.integrals.quadrature)": [[92, "sympy.integrals.quadrature.gauss_legendre"]], "gauss_lobatto() (in module sympy.integrals.quadrature)": [[92, "sympy.integrals.quadrature.gauss_lobatto"]], "hankel_transform() (in module sympy.integrals.transforms)": [[92, "sympy.integrals.transforms.hankel_transform"]], "has_finite_limits (sympy.concrete.expr_with_limits.exprwithlimits property)": [[92, "sympy.concrete.expr_with_limits.ExprWithLimits.has_finite_limits"]], "has_reversed_limits (sympy.concrete.expr_with_limits.exprwithlimits property)": [[92, "sympy.concrete.expr_with_limits.ExprWithLimits.has_reversed_limits"]], "heurisch() (in module sympy.integrals.heurisch)": [[92, "sympy.integrals.heurisch.heurisch"]], "integral_steps() (in module sympy.integrals.manualintegrate)": [[92, "sympy.integrals.manualintegrate.integral_steps"]], "integrate() (in module sympy.integrals.integrals)": [[92, "sympy.integrals.integrals.integrate"]], "inverse_cosine_transform() (in module sympy.integrals.transforms)": [[92, "sympy.integrals.transforms.inverse_cosine_transform"]], "inverse_fourier_transform() (in module sympy.integrals.transforms)": [[92, "sympy.integrals.transforms.inverse_fourier_transform"]], "inverse_hankel_transform() (in module sympy.integrals.transforms)": [[92, "sympy.integrals.transforms.inverse_hankel_transform"]], "inverse_laplace_transform() (in module sympy.integrals.transforms)": [[92, "sympy.integrals.transforms.inverse_laplace_transform"]], "inverse_mellin_transform() (in module sympy.integrals.transforms)": [[92, "sympy.integrals.transforms.inverse_mellin_transform"]], "inverse_sine_transform() (in module sympy.integrals.transforms)": [[92, "sympy.integrals.transforms.inverse_sine_transform"]], "is_number (sympy.concrete.expr_with_limits.exprwithlimits property)": [[92, "sympy.concrete.expr_with_limits.ExprWithLimits.is_number"]], "laplace_correspondence() (in module sympy.integrals.transforms)": [[92, "sympy.integrals.transforms.laplace_correspondence"]], "laplace_initial_conds() (in module sympy.integrals.transforms)": [[92, "sympy.integrals.transforms.laplace_initial_conds"]], "laplace_transform() (in module sympy.integrals.transforms)": [[92, "sympy.integrals.transforms.laplace_transform"]], "limits (sympy.concrete.expr_with_limits.exprwithlimits property)": [[92, "sympy.concrete.expr_with_limits.ExprWithLimits.limits"]], "line_integrate() (in module sympy.integrals.integrals)": [[92, "sympy.integrals.integrals.line_integrate"]], "manualintegrate() (in module sympy.integrals.manualintegrate)": [[92, "sympy.integrals.manualintegrate.manualintegrate"]], "mellin_transform() (in module sympy.integrals.transforms)": [[92, "sympy.integrals.transforms.mellin_transform"]], "polytope_integrate() (in module sympy.integrals.intpoly)": [[92, "sympy.integrals.intpoly.polytope_integrate"]], "principal_value() (sympy.integrals.integrals.integral method)": [[92, "sympy.integrals.integrals.Integral.principal_value"]], "ratint() (in module sympy.integrals.rationaltools)": [[92, "sympy.integrals.rationaltools.ratint"]], "ratint_logpart() (in module sympy.integrals.rationaltools)": [[92, "sympy.integrals.rationaltools.ratint_logpart"]], "ratint_ratpart() (in module sympy.integrals.rationaltools)": [[92, "sympy.integrals.rationaltools.ratint_ratpart"]], "risch_integrate() (in module sympy.integrals.risch)": [[92, "sympy.integrals.risch.risch_integrate"]], "sine_transform() (in module sympy.integrals.transforms)": [[92, "sympy.integrals.transforms.sine_transform"]], "singularityintegrate() (in module sympy.integrals.singularityfunctions)": [[92, "sympy.integrals.singularityfunctions.singularityintegrate"]], "sympy.integrals": [[92, "module-sympy.integrals"]], "sympy.integrals.intpoly": [[92, "module-sympy.integrals.intpoly"]], "sympy.integrals.transforms": [[92, "module-sympy.integrals.transforms"]], "transform() (sympy.integrals.integrals.integral method)": [[92, "sympy.integrals.integrals.Integral.transform"]], "transform_variable (sympy.integrals.transforms.integraltransform property)": [[92, "sympy.integrals.transforms.IntegralTransform.transform_variable"]], "trigintegrate() (in module sympy.integrals.trigonometry)": [[92, "sympy.integrals.trigonometry.trigintegrate"]], "variables (sympy.concrete.expr_with_limits.exprwithlimits property)": [[92, "sympy.concrete.expr_with_limits.ExprWithLimits.variables"]], "enable_automatic_int_sympification() (in module sympy.interactive.session)": [[93, "sympy.interactive.session.enable_automatic_int_sympification"]], "enable_automatic_symbols() (in module sympy.interactive.session)": [[93, "sympy.interactive.session.enable_automatic_symbols"]], "init_ipython_session() (in module sympy.interactive.session)": [[93, "sympy.interactive.session.init_ipython_session"]], "init_printing() (in module sympy.interactive.printing)": [[93, "sympy.interactive.printing.init_printing"]], "init_python_session() (in module sympy.interactive.session)": [[93, "sympy.interactive.session.init_python_session"]], "init_session() (in module sympy.interactive.session)": [[93, "sympy.interactive.session.init_session"]], "int_to_integer() (in module sympy.interactive.session)": [[93, "sympy.interactive.session.int_to_Integer"]], "sympy.interactive": [[93, "module-sympy.interactive"]], "sympy.interactive.printing": [[93, "module-sympy.interactive.printing"]], "sympy.interactive.session": [[93, "module-sympy.interactive.session"]], "cartanmatrix() (in module sympy.liealgebras.cartan_matrix)": [[94, "sympy.liealgebras.cartan_matrix.CartanMatrix"]], "cartantype_generator (class in sympy.liealgebras.cartan_type)": [[94, "sympy.liealgebras.cartan_type.CartanType_generator"]], "dynkindiagram() (in module sympy.liealgebras.dynkin_diagram)": [[94, "sympy.liealgebras.dynkin_diagram.DynkinDiagram"]], "rootsystem (class in sympy.liealgebras.root_system)": [[94, "sympy.liealgebras.root_system.RootSystem"]], "standard_cartan (class in sympy.liealgebras.cartan_type)": [[94, "sympy.liealgebras.cartan_type.Standard_Cartan"]], "typea (class in sympy.liealgebras.type_a)": [[94, "sympy.liealgebras.type_a.TypeA"]], "typeb (class in sympy.liealgebras.type_b)": [[94, "sympy.liealgebras.type_b.TypeB"]], "typec (class in sympy.liealgebras.type_c)": [[94, "sympy.liealgebras.type_c.TypeC"]], "typed (class in sympy.liealgebras.type_d)": [[94, "sympy.liealgebras.type_d.TypeD"]], "typee (class in sympy.liealgebras.type_e)": [[94, "sympy.liealgebras.type_e.TypeE"]], "typef (class in sympy.liealgebras.type_f)": [[94, "sympy.liealgebras.type_f.TypeF"]], "typeg (class in sympy.liealgebras.type_g)": [[94, "sympy.liealgebras.type_g.TypeG"]], "weylgroup (class in sympy.liealgebras.weyl_group)": [[94, "sympy.liealgebras.weyl_group.WeylGroup"]], "add_as_roots() (sympy.liealgebras.root_system.rootsystem method)": [[94, "sympy.liealgebras.root_system.RootSystem.add_as_roots"]], "add_simple_roots() (sympy.liealgebras.root_system.rootsystem method)": [[94, "sympy.liealgebras.root_system.RootSystem.add_simple_roots"]], "all_roots() (sympy.liealgebras.root_system.rootsystem method)": [[94, "sympy.liealgebras.root_system.RootSystem.all_roots"]], "basic_root() (sympy.liealgebras.type_a.typea method)": [[94, "sympy.liealgebras.type_a.TypeA.basic_root"]], "basic_root() (sympy.liealgebras.type_b.typeb method)": [[94, "sympy.liealgebras.type_b.TypeB.basic_root"]], "basic_root() (sympy.liealgebras.type_c.typec method)": [[94, "sympy.liealgebras.type_c.TypeC.basic_root"]], "basic_root() (sympy.liealgebras.type_d.typed method)": [[94, "sympy.liealgebras.type_d.TypeD.basic_root"]], "basic_root() (sympy.liealgebras.type_e.typee method)": [[94, "sympy.liealgebras.type_e.TypeE.basic_root"]], "basic_root() (sympy.liealgebras.type_f.typef method)": [[94, "sympy.liealgebras.type_f.TypeF.basic_root"]], "basis() (sympy.liealgebras.type_a.typea method)": [[94, "sympy.liealgebras.type_a.TypeA.basis"]], "basis() (sympy.liealgebras.type_b.typeb method)": [[94, "sympy.liealgebras.type_b.TypeB.basis"]], "basis() (sympy.liealgebras.type_c.typec method)": [[94, "sympy.liealgebras.type_c.TypeC.basis"]], "basis() (sympy.liealgebras.type_d.typed method)": [[94, "sympy.liealgebras.type_d.TypeD.basis"]], "basis() (sympy.liealgebras.type_e.typee method)": [[94, "sympy.liealgebras.type_e.TypeE.basis"]], "basis() (sympy.liealgebras.type_f.typef method)": [[94, "sympy.liealgebras.type_f.TypeF.basis"]], "basis() (sympy.liealgebras.type_g.typeg method)": [[94, "sympy.liealgebras.type_g.TypeG.basis"]], "cartan_matrix() (sympy.liealgebras.root_system.rootsystem method)": [[94, "sympy.liealgebras.root_system.RootSystem.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_a.typea method)": [[94, "sympy.liealgebras.type_a.TypeA.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_b.typeb method)": [[94, "sympy.liealgebras.type_b.TypeB.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_c.typec method)": [[94, "sympy.liealgebras.type_c.TypeC.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_d.typed method)": [[94, "sympy.liealgebras.type_d.TypeD.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_e.typee method)": [[94, "sympy.liealgebras.type_e.TypeE.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_f.typef method)": [[94, "sympy.liealgebras.type_f.TypeF.cartan_matrix"]], "cartan_matrix() (sympy.liealgebras.type_g.typeg method)": [[94, "sympy.liealgebras.type_g.TypeG.cartan_matrix"]], "coxeter_diagram() (sympy.liealgebras.weyl_group.weylgroup method)": [[94, "sympy.liealgebras.weyl_group.WeylGroup.coxeter_diagram"]], "delete_doubles() (sympy.liealgebras.weyl_group.weylgroup method)": [[94, "sympy.liealgebras.weyl_group.WeylGroup.delete_doubles"]], "dimension() (sympy.liealgebras.type_a.typea method)": [[94, "sympy.liealgebras.type_a.TypeA.dimension"]], "dimension() (sympy.liealgebras.type_b.typeb method)": [[94, "sympy.liealgebras.type_b.TypeB.dimension"]], "dimension() (sympy.liealgebras.type_c.typec method)": [[94, "sympy.liealgebras.type_c.TypeC.dimension"]], "dimension() (sympy.liealgebras.type_d.typed method)": [[94, "sympy.liealgebras.type_d.TypeD.dimension"]], "dimension() (sympy.liealgebras.type_e.typee method)": [[94, "sympy.liealgebras.type_e.TypeE.dimension"]], "dimension() (sympy.liealgebras.type_f.typef method)": [[94, "sympy.liealgebras.type_f.TypeF.dimension"]], "dimension() (sympy.liealgebras.type_g.typeg method)": [[94, "sympy.liealgebras.type_g.TypeG.dimension"]], "dynkin_diagram() (sympy.liealgebras.root_system.rootsystem method)": [[94, "sympy.liealgebras.root_system.RootSystem.dynkin_diagram"]], "element_order() (sympy.liealgebras.weyl_group.weylgroup method)": [[94, "sympy.liealgebras.weyl_group.WeylGroup.element_order"]], "generators() (sympy.liealgebras.weyl_group.weylgroup method)": [[94, "sympy.liealgebras.weyl_group.WeylGroup.generators"]], "group_name() (sympy.liealgebras.weyl_group.weylgroup method)": [[94, "sympy.liealgebras.weyl_group.WeylGroup.group_name"]], "group_order() (sympy.liealgebras.weyl_group.weylgroup method)": [[94, "sympy.liealgebras.weyl_group.WeylGroup.group_order"]], "highest_root() (sympy.liealgebras.type_a.typea method)": [[94, "sympy.liealgebras.type_a.TypeA.highest_root"]], "lie_algebra() (sympy.liealgebras.type_a.typea method)": [[94, "sympy.liealgebras.type_a.TypeA.lie_algebra"]], "lie_algebra() (sympy.liealgebras.type_b.typeb method)": [[94, "sympy.liealgebras.type_b.TypeB.lie_algebra"]], "lie_algebra() (sympy.liealgebras.type_c.typec method)": [[94, "sympy.liealgebras.type_c.TypeC.lie_algebra"]], "lie_algebra() (sympy.liealgebras.type_d.typed method)": [[94, "sympy.liealgebras.type_d.TypeD.lie_algebra"]], "matrix_form() (sympy.liealgebras.weyl_group.weylgroup method)": [[94, "sympy.liealgebras.weyl_group.WeylGroup.matrix_form"]], "positive_roots() (sympy.liealgebras.type_a.typea method)": [[94, "sympy.liealgebras.type_a.TypeA.positive_roots"]], "positive_roots() (sympy.liealgebras.type_b.typeb method)": [[94, "sympy.liealgebras.type_b.TypeB.positive_roots"]], "positive_roots() (sympy.liealgebras.type_c.typec method)": [[94, "sympy.liealgebras.type_c.TypeC.positive_roots"]], "positive_roots() (sympy.liealgebras.type_d.typed method)": [[94, "sympy.liealgebras.type_d.TypeD.positive_roots"]], "positive_roots() (sympy.liealgebras.type_e.typee method)": [[94, "sympy.liealgebras.type_e.TypeE.positive_roots"]], "positive_roots() (sympy.liealgebras.type_f.typef method)": [[94, "sympy.liealgebras.type_f.TypeF.positive_roots"]], "positive_roots() (sympy.liealgebras.type_g.typeg method)": [[94, "sympy.liealgebras.type_g.TypeG.positive_roots"]], "rank() (sympy.liealgebras.cartan_type.standard_cartan method)": [[94, "sympy.liealgebras.cartan_type.Standard_Cartan.rank"]], "root_space() (sympy.liealgebras.root_system.rootsystem method)": [[94, "sympy.liealgebras.root_system.RootSystem.root_space"]], "roots() (sympy.liealgebras.type_a.typea method)": [[94, "sympy.liealgebras.type_a.TypeA.roots"]], "roots() (sympy.liealgebras.type_b.typeb method)": [[94, "sympy.liealgebras.type_b.TypeB.roots"]], "roots() (sympy.liealgebras.type_c.typec method)": [[94, "sympy.liealgebras.type_c.TypeC.roots"]], "roots() (sympy.liealgebras.type_d.typed method)": [[94, "sympy.liealgebras.type_d.TypeD.roots"]], "roots() (sympy.liealgebras.type_e.typee method)": [[94, "sympy.liealgebras.type_e.TypeE.roots"]], "roots() (sympy.liealgebras.type_f.typef method)": [[94, "sympy.liealgebras.type_f.TypeF.roots"]], "roots() (sympy.liealgebras.type_g.typeg method)": [[94, "sympy.liealgebras.type_g.TypeG.roots"]], "series() (sympy.liealgebras.cartan_type.standard_cartan method)": [[94, "sympy.liealgebras.cartan_type.Standard_Cartan.series"]], "simple_root() (sympy.liealgebras.type_a.typea method)": [[94, "sympy.liealgebras.type_a.TypeA.simple_root"]], "simple_root() (sympy.liealgebras.type_b.typeb method)": [[94, "sympy.liealgebras.type_b.TypeB.simple_root"]], "simple_root() (sympy.liealgebras.type_c.typec method)": [[94, "sympy.liealgebras.type_c.TypeC.simple_root"]], "simple_root() (sympy.liealgebras.type_d.typed method)": [[94, "sympy.liealgebras.type_d.TypeD.simple_root"]], "simple_root() (sympy.liealgebras.type_e.typee method)": [[94, "sympy.liealgebras.type_e.TypeE.simple_root"]], "simple_root() (sympy.liealgebras.type_f.typef method)": [[94, "sympy.liealgebras.type_f.TypeF.simple_root"]], "simple_root() (sympy.liealgebras.type_g.typeg method)": [[94, "sympy.liealgebras.type_g.TypeG.simple_root"]], "simple_roots() (sympy.liealgebras.root_system.rootsystem method)": [[94, "sympy.liealgebras.root_system.RootSystem.simple_roots"]], "sympy.liealgebras": [[94, "module-sympy.liealgebras"]], "anfform() (in module sympy.logic.boolalg)": [[95, "sympy.logic.boolalg.ANFform"]], "and (class in sympy.logic.boolalg)": [[95, "sympy.logic.boolalg.And"]], "boolean (class in sympy.logic.boolalg)": [[95, "sympy.logic.boolalg.Boolean"]], "booleanfalse (class in sympy.logic.boolalg)": [[95, "sympy.logic.boolalg.BooleanFalse"]], "booleantrue (class in sympy.logic.boolalg)": [[95, "sympy.logic.boolalg.BooleanTrue"]], "equivalent (class in sympy.logic.boolalg)": [[95, "sympy.logic.boolalg.Equivalent"]], "exclusive (class in sympy.logic.boolalg)": [[95, "sympy.logic.boolalg.Exclusive"]], "ite (class in sympy.logic.boolalg)": [[95, "sympy.logic.boolalg.ITE"]], "implies (class in sympy.logic.boolalg)": [[95, "sympy.logic.boolalg.Implies"]], "nand (class in sympy.logic.boolalg)": [[95, "sympy.logic.boolalg.Nand"]], "nor (class in sympy.logic.boolalg)": [[95, "sympy.logic.boolalg.Nor"]], "not (class in sympy.logic.boolalg)": [[95, "sympy.logic.boolalg.Not"]], "or (class in sympy.logic.boolalg)": [[95, "sympy.logic.boolalg.Or"]], "posform() (in module sympy.logic.boolalg)": [[95, "sympy.logic.boolalg.POSform"]], "sopform() (in module sympy.logic.boolalg)": [[95, "sympy.logic.boolalg.SOPform"]], "xnor (class in sympy.logic.boolalg)": [[95, "sympy.logic.boolalg.Xnor"]], "xor (class in sympy.logic.boolalg)": [[95, "sympy.logic.boolalg.Xor"]], "anf_coeffs() (in module sympy.logic.boolalg)": [[95, "sympy.logic.boolalg.anf_coeffs"]], "as_set() (sympy.logic.boolalg.boolean method)": [[95, "sympy.logic.boolalg.Boolean.as_set"]], "as_set() (sympy.logic.boolalg.booleanfalse method)": [[95, "sympy.logic.boolalg.BooleanFalse.as_set"]], "as_set() (sympy.logic.boolalg.booleantrue method)": [[95, "sympy.logic.boolalg.BooleanTrue.as_set"]], "bool_map() (in module sympy.logic.boolalg)": [[95, "sympy.logic.boolalg.bool_map"]], "bool_maxterm() (in module sympy.logic.boolalg)": [[95, "sympy.logic.boolalg.bool_maxterm"]], "bool_minterm() (in module sympy.logic.boolalg)": [[95, "sympy.logic.boolalg.bool_minterm"]], "bool_monomial() (in module sympy.logic.boolalg)": [[95, "sympy.logic.boolalg.bool_monomial"]], "distribute_and_over_or() (in module sympy.logic.boolalg)": [[95, "sympy.logic.boolalg.distribute_and_over_or"]], "distribute_or_over_and() (in module sympy.logic.boolalg)": [[95, "sympy.logic.boolalg.distribute_or_over_and"]], "distribute_xor_over_and() (in module sympy.logic.boolalg)": [[95, "sympy.logic.boolalg.distribute_xor_over_and"]], "eliminate_implications() (in module sympy.logic.boolalg)": [[95, "sympy.logic.boolalg.eliminate_implications"]], "equals() (sympy.logic.boolalg.boolean method)": [[95, "sympy.logic.boolalg.Boolean.equals"]], "gateinputcount() (in module sympy.logic.boolalg)": [[95, "sympy.logic.boolalg.gateinputcount"]], "integer_to_term() (in module sympy.logic.boolalg)": [[95, "sympy.logic.boolalg.integer_to_term"]], "is_anf() (in module sympy.logic.boolalg)": [[95, "sympy.logic.boolalg.is_anf"]], "is_cnf() (in module sympy.logic.boolalg)": [[95, "sympy.logic.boolalg.is_cnf"]], "is_dnf() (in module sympy.logic.boolalg)": [[95, "sympy.logic.boolalg.is_dnf"]], "is_nnf() (in module sympy.logic.boolalg)": [[95, "sympy.logic.boolalg.is_nnf"]], "satisfiable() (in module sympy.logic.inference)": [[95, "sympy.logic.inference.satisfiable"]], "simplify_logic() (in module sympy.logic.boolalg)": [[95, "sympy.logic.boolalg.simplify_logic"]], "sympy.logic": [[95, "module-sympy.logic"]], "sympy.logic.inference": [[95, "module-sympy.logic.inference"]], "term_to_integer() (in module sympy.logic.boolalg)": [[95, "sympy.logic.boolalg.term_to_integer"]], "to_anf() (in module sympy.logic.boolalg)": [[95, "sympy.logic.boolalg.to_anf"]], "to_cnf() (in module sympy.logic.boolalg)": [[95, "sympy.logic.boolalg.to_cnf"]], "to_dnf() (in module sympy.logic.boolalg)": [[95, "sympy.logic.boolalg.to_dnf"]], "to_int_repr() (in module sympy.logic.boolalg)": [[95, "sympy.logic.boolalg.to_int_repr"]], "to_nnf() (in module sympy.logic.boolalg)": [[95, "sympy.logic.boolalg.to_nnf"]], "truth_table() (in module sympy.logic.boolalg)": [[95, "sympy.logic.boolalg.truth_table"]], "c (sympy.matrices.common.matrixcommon property)": [[96, "sympy.matrices.common.MatrixCommon.C"]], "h (sympy.matrices.common.matrixcommon property)": [[96, "sympy.matrices.common.MatrixCommon.H"]], "matrixcommon (class in sympy.matrices.common)": [[96, "sympy.matrices.common.MatrixCommon"]], "matrixkind (class in sympy.matrices.common)": [[96, "sympy.matrices.common.MatrixKind"]], "t (sympy.matrices.common.matrixcommon property)": [[96, "sympy.matrices.common.MatrixCommon.T"]], "__abs__() (sympy.matrices.common.matrixcommon method)": [[96, "sympy.matrices.common.MatrixCommon.__abs__"]], "__add__() (sympy.matrices.common.matrixcommon method)": [[96, "sympy.matrices.common.MatrixCommon.__add__"]], "__getitem__() (sympy.matrices.common.matrixcommon method)": [[96, "sympy.matrices.common.MatrixCommon.__getitem__"]], "__len__() (sympy.matrices.common.matrixcommon method)": [[96, "sympy.matrices.common.MatrixCommon.__len__"]], "__mul__() (sympy.matrices.common.matrixcommon method)": [[96, "sympy.matrices.common.MatrixCommon.__mul__"]], "__pow__() (sympy.matrices.common.matrixcommon method)": [[96, "sympy.matrices.common.MatrixCommon.__pow__"]], "__weakref__ (sympy.matrices.common.matrixcommon attribute)": [[96, "sympy.matrices.common.MatrixCommon.__weakref__"]], "adjoint() (sympy.matrices.common.matrixcommon method)": [[96, "sympy.matrices.common.MatrixCommon.adjoint"]], "applyfunc() (sympy.matrices.common.matrixcommon method)": [[96, "sympy.matrices.common.MatrixCommon.applyfunc"]], "as_real_imag() (sympy.matrices.common.matrixcommon method)": [[96, "sympy.matrices.common.MatrixCommon.as_real_imag"]], "atoms() (sympy.matrices.common.matrixcommon method)": [[96, "sympy.matrices.common.MatrixCommon.atoms"]], "col() (sympy.matrices.common.matrixcommon method)": [[96, "sympy.matrices.common.MatrixCommon.col"]], "col_del() (sympy.matrices.common.matrixcommon method)": [[96, "sympy.matrices.common.MatrixCommon.col_del"]], "col_insert() (sympy.matrices.common.matrixcommon method)": [[96, "sympy.matrices.common.MatrixCommon.col_insert"]], "col_join() (sympy.matrices.common.matrixcommon method)": [[96, "sympy.matrices.common.MatrixCommon.col_join"]], "companion() (sympy.matrices.common.matrixcommon class method)": [[96, "sympy.matrices.common.MatrixCommon.companion"]], "conjugate() (sympy.matrices.common.matrixcommon method)": [[96, "sympy.matrices.common.MatrixCommon.conjugate"]], "diag() (sympy.matrices.common.matrixcommon class method)": [[96, "sympy.matrices.common.MatrixCommon.diag"]], "diagonal() (sympy.matrices.common.matrixcommon method)": [[96, "sympy.matrices.common.MatrixCommon.diagonal"]], "evalf() (sympy.matrices.common.matrixcommon method)": [[96, "sympy.matrices.common.MatrixCommon.evalf"]], "expand() (sympy.matrices.common.matrixcommon method)": [[96, "sympy.matrices.common.MatrixCommon.expand"]], "extract() (sympy.matrices.common.matrixcommon method)": [[96, "sympy.matrices.common.MatrixCommon.extract"]], "eye() (sympy.matrices.common.matrixcommon class method)": [[96, "sympy.matrices.common.MatrixCommon.eye"]], "free_symbols (sympy.matrices.common.matrixcommon property)": [[96, "sympy.matrices.common.MatrixCommon.free_symbols"]], "get_diag_blocks() (sympy.matrices.common.matrixcommon method)": [[96, "sympy.matrices.common.MatrixCommon.get_diag_blocks"]], "has() (sympy.matrices.common.matrixcommon method)": [[96, "sympy.matrices.common.MatrixCommon.has"]], "hstack() (sympy.matrices.common.matrixcommon class method)": [[96, "sympy.matrices.common.MatrixCommon.hstack"]], "is_anti_symmetric() (sympy.matrices.common.matrixcommon method)": [[96, "sympy.matrices.common.MatrixCommon.is_anti_symmetric"]], "is_diagonal() (sympy.matrices.common.matrixcommon method)": [[96, "sympy.matrices.common.MatrixCommon.is_diagonal"]], "is_hermitian (sympy.matrices.common.matrixcommon property)": [[96, "sympy.matrices.common.MatrixCommon.is_hermitian"]], "is_lower (sympy.matrices.common.matrixcommon property)": [[96, "sympy.matrices.common.MatrixCommon.is_lower"]], "is_lower_hessenberg (sympy.matrices.common.matrixcommon property)": [[96, "sympy.matrices.common.MatrixCommon.is_lower_hessenberg"]], "is_square (sympy.matrices.common.matrixcommon property)": [[96, "sympy.matrices.common.MatrixCommon.is_square"]], "is_strongly_diagonally_dominant (sympy.matrices.common.matrixcommon property)": [[96, "sympy.matrices.common.MatrixCommon.is_strongly_diagonally_dominant"]], "is_symbolic() (sympy.matrices.common.matrixcommon method)": [[96, "sympy.matrices.common.MatrixCommon.is_symbolic"]], "is_symmetric() (sympy.matrices.common.matrixcommon method)": [[96, "sympy.matrices.common.MatrixCommon.is_symmetric"]], "is_upper (sympy.matrices.common.matrixcommon property)": [[96, "sympy.matrices.common.MatrixCommon.is_upper"]], "is_upper_hessenberg (sympy.matrices.common.matrixcommon property)": [[96, "sympy.matrices.common.MatrixCommon.is_upper_hessenberg"]], "is_weakly_diagonally_dominant (sympy.matrices.common.matrixcommon property)": [[96, "sympy.matrices.common.MatrixCommon.is_weakly_diagonally_dominant"]], "is_zero_matrix (sympy.matrices.common.matrixcommon property)": [[96, "sympy.matrices.common.MatrixCommon.is_zero_matrix"]], "jordan_block() (sympy.matrices.common.matrixcommon class method)": [[96, "sympy.matrices.common.MatrixCommon.jordan_block"]], "lower_triangular() (sympy.matrices.common.matrixcommon method)": [[96, "sympy.matrices.common.MatrixCommon.lower_triangular"]], "multiply() (sympy.matrices.common.matrixcommon method)": [[96, "sympy.matrices.common.MatrixCommon.multiply"]], "multiply_elementwise() (sympy.matrices.common.matrixcommon method)": [[96, "sympy.matrices.common.MatrixCommon.multiply_elementwise"]], "n() (sympy.matrices.common.matrixcommon method)": [[96, "sympy.matrices.common.MatrixCommon.n"]], "ones() (sympy.matrices.common.matrixcommon class method)": [[96, "sympy.matrices.common.MatrixCommon.ones"]], "permute() (sympy.matrices.common.matrixcommon method)": [[96, "sympy.matrices.common.MatrixCommon.permute"]], "permute_cols() (sympy.matrices.common.matrixcommon method)": [[96, "sympy.matrices.common.MatrixCommon.permute_cols"]], "permute_rows() (sympy.matrices.common.matrixcommon method)": [[96, "sympy.matrices.common.MatrixCommon.permute_rows"]], "pow() (sympy.matrices.common.matrixcommon method)": [[96, "sympy.matrices.common.MatrixCommon.pow"]], "refine() (sympy.matrices.common.matrixcommon method)": [[96, "sympy.matrices.common.MatrixCommon.refine"]], "replace() (sympy.matrices.common.matrixcommon method)": [[96, "sympy.matrices.common.MatrixCommon.replace"]], "reshape() (sympy.matrices.common.matrixcommon method)": [[96, "sympy.matrices.common.MatrixCommon.reshape"]], "rmultiply() (sympy.matrices.common.matrixcommon method)": [[96, "sympy.matrices.common.MatrixCommon.rmultiply"]], "rot90() (sympy.matrices.common.matrixcommon method)": [[96, "sympy.matrices.common.MatrixCommon.rot90"]], "row() (sympy.matrices.common.matrixcommon method)": [[96, "sympy.matrices.common.MatrixCommon.row"]], "row_del() (sympy.matrices.common.matrixcommon method)": [[96, "sympy.matrices.common.MatrixCommon.row_del"]], "row_insert() (sympy.matrices.common.matrixcommon method)": [[96, "sympy.matrices.common.MatrixCommon.row_insert"]], "row_join() (sympy.matrices.common.matrixcommon method)": [[96, "sympy.matrices.common.MatrixCommon.row_join"]], "shape (sympy.matrices.common.matrixcommon property)": [[96, "sympy.matrices.common.MatrixCommon.shape"]], "simplify() (sympy.matrices.common.matrixcommon method)": [[96, "sympy.matrices.common.MatrixCommon.simplify"]], "subs() (sympy.matrices.common.matrixcommon method)": [[96, "sympy.matrices.common.MatrixCommon.subs"]], "sympy.matrices.common": [[96, "module-sympy.matrices.common"]], "todod() (sympy.matrices.common.matrixcommon method)": [[96, "sympy.matrices.common.MatrixCommon.todod"]], "todok() (sympy.matrices.common.matrixcommon method)": [[96, "sympy.matrices.common.MatrixCommon.todok"]], "tolist() (sympy.matrices.common.matrixcommon method)": [[96, "sympy.matrices.common.MatrixCommon.tolist"]], "trace() (sympy.matrices.common.matrixcommon method)": [[96, "sympy.matrices.common.MatrixCommon.trace"]], "transpose() (sympy.matrices.common.matrixcommon method)": [[96, "sympy.matrices.common.MatrixCommon.transpose"]], "upper_triangular() (sympy.matrices.common.matrixcommon method)": [[96, "sympy.matrices.common.MatrixCommon.upper_triangular"]], "values() (sympy.matrices.common.matrixcommon method)": [[96, "sympy.matrices.common.MatrixCommon.values"]], "vec() (sympy.matrices.common.matrixcommon method)": [[96, "sympy.matrices.common.MatrixCommon.vec"]], "vech() (sympy.matrices.common.matrixcommon method)": [[96, "sympy.matrices.common.MatrixCommon.vech"]], "vstack() (sympy.matrices.common.matrixcommon class method)": [[96, "sympy.matrices.common.MatrixCommon.vstack"]], "wilkinson() (sympy.matrices.common.matrixcommon class method)": [[96, "sympy.matrices.common.MatrixCommon.wilkinson"]], "xreplace() (sympy.matrices.common.matrixcommon method)": [[96, "sympy.matrices.common.MatrixCommon.xreplace"]], "zeros() (sympy.matrices.common.matrixcommon class method)": [[96, "sympy.matrices.common.MatrixCommon.zeros"]], "densematrix (class in sympy.matrices.dense)": [[97, "sympy.matrices.dense.DenseMatrix"]], "ldldecomposition() (sympy.matrices.dense.densematrix method)": [[97, "sympy.matrices.dense.DenseMatrix.LDLdecomposition"]], "matrix (in module sympy.matrices.dense)": [[97, "sympy.matrices.dense.Matrix"]], "mutabledensematrix (class in sympy.matrices.dense)": [[97, "sympy.matrices.dense.MutableDenseMatrix"]], "as_immutable() (sympy.matrices.dense.densematrix method)": [[97, "sympy.matrices.dense.DenseMatrix.as_immutable"]], "as_mutable() (sympy.matrices.dense.densematrix method)": [[97, "sympy.matrices.dense.DenseMatrix.as_mutable"]], "cholesky() (sympy.matrices.dense.densematrix method)": [[97, "sympy.matrices.dense.DenseMatrix.cholesky"]], "lower_triangular_solve() (sympy.matrices.dense.densematrix method)": [[97, "sympy.matrices.dense.DenseMatrix.lower_triangular_solve"]], "simplify() (sympy.matrices.dense.mutabledensematrix method)": [[97, "sympy.matrices.dense.MutableDenseMatrix.simplify"]], "upper_triangular_solve() (sympy.matrices.dense.densematrix method)": [[97, "sympy.matrices.dense.DenseMatrix.upper_triangular_solve"]], "blockdiagmatrix (class in sympy.matrices.expressions.blockmatrix)": [[98, "sympy.matrices.expressions.blockmatrix.BlockDiagMatrix"]], "blockmatrix (class in sympy.matrices.expressions.blockmatrix)": [[98, "sympy.matrices.expressions.blockmatrix.BlockMatrix"]], "companionmatrix (class in sympy.matrices.expressions)": [[98, "sympy.matrices.expressions.CompanionMatrix"]], "functionmatrix (class in sympy.matrices.expressions)": [[98, "sympy.matrices.expressions.FunctionMatrix"]], "hadamardpower (class in sympy.matrices.expressions)": [[98, "sympy.matrices.expressions.HadamardPower"]], "hadamardproduct (class in sympy.matrices.expressions)": [[98, "sympy.matrices.expressions.HadamardProduct"]], "identity (class in sympy.matrices.expressions)": [[98, "sympy.matrices.expressions.Identity"]], "inverse (class in sympy.matrices.expressions)": [[98, "sympy.matrices.expressions.Inverse"]], "ldudecomposition() (sympy.matrices.expressions.blockmatrix.blockmatrix method)": [[98, "sympy.matrices.expressions.blockmatrix.BlockMatrix.LDUdecomposition"]], "ludecomposition() (sympy.matrices.expressions.blockmatrix.blockmatrix method)": [[98, "sympy.matrices.expressions.blockmatrix.BlockMatrix.LUdecomposition"]], "matadd (class in sympy.matrices.expressions)": [[98, "sympy.matrices.expressions.MatAdd"]], "matmul (class in sympy.matrices.expressions)": [[98, "sympy.matrices.expressions.MatMul"]], "matpow (class in sympy.matrices.expressions)": [[98, "sympy.matrices.expressions.MatPow"]], "matrixexpr (class in sympy.matrices.expressions)": [[98, "sympy.matrices.expressions.MatrixExpr"]], "matrixpermute (class in sympy.matrices.expressions)": [[98, "sympy.matrices.expressions.MatrixPermute"]], "matrixset (class in sympy.matrices.expressions)": [[98, "sympy.matrices.expressions.MatrixSet"]], "matrixsymbol (class in sympy.matrices.expressions)": [[98, "sympy.matrices.expressions.MatrixSymbol"]], "permutationmatrix (class in sympy.matrices.expressions)": [[98, "sympy.matrices.expressions.PermutationMatrix"]], "t (sympy.matrices.expressions.matrixexpr property)": [[98, "sympy.matrices.expressions.MatrixExpr.T"]], "trace (class in sympy.matrices.expressions)": [[98, "sympy.matrices.expressions.Trace"]], "transpose (class in sympy.matrices.expressions)": [[98, "sympy.matrices.expressions.Transpose"]], "udldecomposition() (sympy.matrices.expressions.blockmatrix.blockmatrix method)": [[98, "sympy.matrices.expressions.blockmatrix.BlockMatrix.UDLdecomposition"]], "zeromatrix (class in sympy.matrices.expressions)": [[98, "sympy.matrices.expressions.ZeroMatrix"]], "as_coeff_mul() (sympy.matrices.expressions.matrixexpr method)": [[98, "sympy.matrices.expressions.MatrixExpr.as_coeff_Mul"]], "as_explicit() (sympy.matrices.expressions.matrixexpr method)": [[98, "sympy.matrices.expressions.MatrixExpr.as_explicit"]], "as_mutable() (sympy.matrices.expressions.matrixexpr method)": [[98, "sympy.matrices.expressions.MatrixExpr.as_mutable"]], "block_collapse() (in module sympy.matrices.expressions.blockmatrix)": [[98, "sympy.matrices.expressions.blockmatrix.block_collapse"]], "equals() (sympy.matrices.expressions.matrixexpr method)": [[98, "sympy.matrices.expressions.MatrixExpr.equals"]], "from_index_summation() (sympy.matrices.expressions.matrixexpr static method)": [[98, "sympy.matrices.expressions.MatrixExpr.from_index_summation"]], "get_diag_blocks() (sympy.matrices.expressions.blockmatrix.blockdiagmatrix method)": [[98, "sympy.matrices.expressions.blockmatrix.BlockDiagMatrix.get_diag_blocks"]], "hadamard_product() (in module sympy.matrices.expressions)": [[98, "sympy.matrices.expressions.hadamard_product"]], "schur() (sympy.matrices.expressions.blockmatrix.blockmatrix method)": [[98, "sympy.matrices.expressions.blockmatrix.BlockMatrix.schur"]], "sympy.matrices.expressions": [[98, "module-sympy.matrices.expressions"]], "sympy.matrices.expressions.blockmatrix": [[98, "module-sympy.matrices.expressions.blockmatrix"]], "transpose() (sympy.matrices.expressions.blockmatrix.blockmatrix method)": [[98, "sympy.matrices.expressions.blockmatrix.BlockMatrix.transpose"]], "immutabledensematrix (class in sympy.matrices.immutable)": [[99, "sympy.matrices.immutable.ImmutableDenseMatrix"]], "immutablematrix (in module sympy.matrices.immutable)": [[99, "sympy.matrices.immutable.ImmutableMatrix"]], "sympy.matrices.immutable": [[99, "module-sympy.matrices.immutable"]], "sympy.matrices": [[100, "module-sympy.matrices"]], "d (sympy.matrices.matrices.matrixbase property)": [[101, "sympy.matrices.matrices.MatrixBase.D"]], "gramschmidt() (in module sympy.matrices.dense)": [[101, "sympy.matrices.dense.GramSchmidt"]], "ldldecomposition() (sympy.matrices.matrices.matrixbase method)": [[101, "sympy.matrices.matrices.MatrixBase.LDLdecomposition"]], "ldlsolve() (sympy.matrices.matrices.matrixbase method)": [[101, "sympy.matrices.matrices.MatrixBase.LDLsolve"]], "ludecomposition() (sympy.matrices.matrices.matrixbase method)": [[101, "sympy.matrices.matrices.MatrixBase.LUdecomposition"]], "ludecompositionff() (sympy.matrices.matrices.matrixbase method)": [[101, "sympy.matrices.matrices.MatrixBase.LUdecompositionFF"]], "ludecomposition_simple() (sympy.matrices.matrices.matrixbase method)": [[101, "sympy.matrices.matrices.MatrixBase.LUdecomposition_Simple"]], "lusolve() (sympy.matrices.matrices.matrixbase method)": [[101, "sympy.matrices.matrices.MatrixBase.LUsolve"]], "matrixbase (class in sympy.matrices.matrices)": [[101, "sympy.matrices.matrices.MatrixBase"]], "matrixcalculus (class in sympy.matrices.matrices)": [[101, "sympy.matrices.matrices.MatrixCalculus"]], "matrixdeterminant (class in sympy.matrices.matrices)": [[101, "sympy.matrices.matrices.MatrixDeterminant"]], "matrixeigen (class in sympy.matrices.matrices)": [[101, "sympy.matrices.matrices.MatrixEigen"]], "matrixerror (class in sympy.matrices.matrices)": [[101, "sympy.matrices.matrices.MatrixError"]], "matrixreductions (class in sympy.matrices.matrices)": [[101, "sympy.matrices.matrices.MatrixReductions"]], "matrixsubspaces (class in sympy.matrices.matrices)": [[101, "sympy.matrices.matrices.MatrixSubspaces"]], "nonsquarematrixerror (class in sympy.matrices.matrices)": [[101, "sympy.matrices.matrices.NonSquareMatrixError"]], "qrdecomposition() (sympy.matrices.matrices.matrixbase method)": [[101, "sympy.matrices.matrices.MatrixBase.QRdecomposition"]], "qrsolve() (sympy.matrices.matrices.matrixbase method)": [[101, "sympy.matrices.matrices.MatrixBase.QRsolve"]], "shapeerror (class in sympy.matrices.matrices)": [[101, "sympy.matrices.matrices.ShapeError"]], "a2idx() (in module sympy.matrices.matrices)": [[101, "sympy.matrices.matrices.a2idx"]], "add() (sympy.matrices.matrices.matrixbase method)": [[101, "sympy.matrices.matrices.MatrixBase.add"]], "adjugate() (sympy.matrices.matrices.matrixdeterminant method)": [[101, "sympy.matrices.matrices.MatrixDeterminant.adjugate"]], "analytic_func() (sympy.matrices.matrices.matrixbase method)": [[101, "sympy.matrices.matrices.MatrixBase.analytic_func"]], "bidiagonal_decomposition() (sympy.matrices.matrices.matrixeigen method)": [[101, "sympy.matrices.matrices.MatrixEigen.bidiagonal_decomposition"]], "bidiagonalize() (sympy.matrices.matrices.matrixeigen method)": [[101, "sympy.matrices.matrices.MatrixEigen.bidiagonalize"]], "casoratian() (in module sympy.matrices.dense)": [[101, "sympy.matrices.dense.casoratian"]], "charpoly() (sympy.matrices.matrices.matrixdeterminant method)": [[101, "sympy.matrices.matrices.MatrixDeterminant.charpoly"]], "cholesky() (sympy.matrices.matrices.matrixbase method)": [[101, "sympy.matrices.matrices.MatrixBase.cholesky"]], "cholesky_solve() (sympy.matrices.matrices.matrixbase method)": [[101, "sympy.matrices.matrices.MatrixBase.cholesky_solve"]], "cofactor() (sympy.matrices.matrices.matrixdeterminant method)": [[101, "sympy.matrices.matrices.MatrixDeterminant.cofactor"]], "cofactor_matrix() (sympy.matrices.matrices.matrixdeterminant method)": [[101, "sympy.matrices.matrices.MatrixDeterminant.cofactor_matrix"]], "columnspace() (sympy.matrices.matrices.matrixsubspaces method)": [[101, "sympy.matrices.matrices.MatrixSubspaces.columnspace"]], "condition_number() (sympy.matrices.matrices.matrixbase method)": [[101, "sympy.matrices.matrices.MatrixBase.condition_number"]], "connected_components() (sympy.matrices.matrices.matrixbase method)": [[101, "sympy.matrices.matrices.MatrixBase.connected_components"]], "connected_components_decomposition() (sympy.matrices.matrices.matrixbase method)": [[101, "sympy.matrices.matrices.MatrixBase.connected_components_decomposition"]], "copy() (sympy.matrices.matrices.matrixbase method)": [[101, "sympy.matrices.matrices.MatrixBase.copy"]], "cross() (sympy.matrices.matrices.matrixbase method)": [[101, "sympy.matrices.matrices.MatrixBase.cross"]], "det() (sympy.matrices.matrices.matrixdeterminant method)": [[101, "sympy.matrices.matrices.MatrixDeterminant.det"]], "diag() (in module sympy.matrices.dense)": [[101, "sympy.matrices.dense.diag"]], "diagonal_solve() (sympy.matrices.matrices.matrixbase method)": [[101, "sympy.matrices.matrices.MatrixBase.diagonal_solve"]], "diagonalize() (sympy.matrices.matrices.matrixeigen method)": [[101, "sympy.matrices.matrices.MatrixEigen.diagonalize"]], "diff() (sympy.matrices.matrices.matrixcalculus method)": [[101, "sympy.matrices.matrices.MatrixCalculus.diff"]], "dot() (sympy.matrices.matrices.matrixbase method)": [[101, "sympy.matrices.matrices.MatrixBase.dot"]], "dual() (sympy.matrices.matrices.matrixbase method)": [[101, "sympy.matrices.matrices.MatrixBase.dual"]], "echelon_form() (sympy.matrices.matrices.matrixreductions method)": [[101, "sympy.matrices.matrices.MatrixReductions.echelon_form"]], "eigenvals() (sympy.matrices.matrices.matrixeigen method)": [[101, "sympy.matrices.matrices.MatrixEigen.eigenvals"]], "eigenvects() (sympy.matrices.matrices.matrixeigen method)": [[101, "sympy.matrices.matrices.MatrixEigen.eigenvects"]], "elementary_col_op() (sympy.matrices.matrices.matrixreductions method)": [[101, "sympy.matrices.matrices.MatrixReductions.elementary_col_op"]], "elementary_row_op() (sympy.matrices.matrices.matrixreductions method)": [[101, "sympy.matrices.matrices.MatrixReductions.elementary_row_op"]], "exp() (sympy.matrices.matrices.matrixbase method)": [[101, "sympy.matrices.matrices.MatrixBase.exp"]], "eye() (in module sympy.matrices.dense)": [[101, "sympy.matrices.dense.eye"]], "gauss_jordan_solve() (sympy.matrices.matrices.matrixbase method)": [[101, "sympy.matrices.matrices.MatrixBase.gauss_jordan_solve"]], "hat() (sympy.matrices.matrices.matrixbase method)": [[101, "sympy.matrices.matrices.MatrixBase.hat"]], "hessian() (in module sympy.matrices.dense)": [[101, "sympy.matrices.dense.hessian"]], "integrate() (sympy.matrices.matrices.matrixcalculus method)": [[101, "sympy.matrices.matrices.MatrixCalculus.integrate"]], "inv() (sympy.matrices.matrices.matrixbase method)": [[101, "sympy.matrices.matrices.MatrixBase.inv"]], "inv_mod() (sympy.matrices.matrices.matrixbase method)": [[101, "sympy.matrices.matrices.MatrixBase.inv_mod"]], "inverse_adj() (sympy.matrices.matrices.matrixbase method)": [[101, "sympy.matrices.matrices.MatrixBase.inverse_ADJ"]], "inverse_block() (sympy.matrices.matrices.matrixbase method)": [[101, "sympy.matrices.matrices.MatrixBase.inverse_BLOCK"]], "inverse_ch() (sympy.matrices.matrices.matrixbase method)": [[101, "sympy.matrices.matrices.MatrixBase.inverse_CH"]], "inverse_ge() (sympy.matrices.matrices.matrixbase method)": [[101, "sympy.matrices.matrices.MatrixBase.inverse_GE"]], "inverse_ldl() (sympy.matrices.matrices.matrixbase method)": [[101, "sympy.matrices.matrices.MatrixBase.inverse_LDL"]], "inverse_lu() (sympy.matrices.matrices.matrixbase method)": [[101, "sympy.matrices.matrices.MatrixBase.inverse_LU"]], "inverse_qr() (sympy.matrices.matrices.matrixbase method)": [[101, "sympy.matrices.matrices.MatrixBase.inverse_QR"]], "irregular() (sympy.matrices.matrices.matrixbase class method)": [[101, "sympy.matrices.matrices.MatrixBase.irregular"]], "is_diagonalizable() (sympy.matrices.matrices.matrixeigen method)": [[101, "sympy.matrices.matrices.MatrixEigen.is_diagonalizable"]], "is_echelon (sympy.matrices.matrices.matrixreductions property)": [[101, "sympy.matrices.matrices.MatrixReductions.is_echelon"]], "is_indefinite (sympy.matrices.matrices.matrixeigen property)": [[101, "sympy.matrices.matrices.MatrixEigen.is_indefinite"]], "is_negative_definite (sympy.matrices.matrices.matrixeigen property)": [[101, "sympy.matrices.matrices.MatrixEigen.is_negative_definite"]], "is_negative_semidefinite (sympy.matrices.matrices.matrixeigen property)": [[101, "sympy.matrices.matrices.MatrixEigen.is_negative_semidefinite"]], "is_nilpotent() (sympy.matrices.matrices.matrixbase method)": [[101, "sympy.matrices.matrices.MatrixBase.is_nilpotent"]], "is_positive_definite (sympy.matrices.matrices.matrixeigen property)": [[101, "sympy.matrices.matrices.MatrixEigen.is_positive_definite"]], "is_positive_semidefinite (sympy.matrices.matrices.matrixeigen property)": [[101, "sympy.matrices.matrices.MatrixEigen.is_positive_semidefinite"]], "jacobian() (sympy.matrices.matrices.matrixcalculus method)": [[101, "sympy.matrices.matrices.MatrixCalculus.jacobian"]], "jordan_cell() (in module sympy.matrices.dense)": [[101, "sympy.matrices.dense.jordan_cell"]], "jordan_form() (sympy.matrices.matrices.matrixeigen method)": [[101, "sympy.matrices.matrices.MatrixEigen.jordan_form"]], "key2bounds() (sympy.matrices.matrices.matrixbase method)": [[101, "sympy.matrices.matrices.MatrixBase.key2bounds"]], "key2ij() (sympy.matrices.matrices.matrixbase method)": [[101, "sympy.matrices.matrices.MatrixBase.key2ij"]], "left_eigenvects() (sympy.matrices.matrices.matrixeigen method)": [[101, "sympy.matrices.matrices.MatrixEigen.left_eigenvects"]], "limit() (sympy.matrices.matrices.matrixcalculus method)": [[101, "sympy.matrices.matrices.MatrixCalculus.limit"]], "list2numpy() (in module sympy.matrices.dense)": [[101, "sympy.matrices.dense.list2numpy"]], "log() (sympy.matrices.matrices.matrixbase method)": [[101, "sympy.matrices.matrices.MatrixBase.log"]], "lower_triangular_solve() (sympy.matrices.matrices.matrixbase method)": [[101, "sympy.matrices.matrices.MatrixBase.lower_triangular_solve"]], "matrix2numpy() (in module sympy.matrices.dense)": [[101, "sympy.matrices.dense.matrix2numpy"]], "matrix_multiply_elementwise() (in module sympy.matrices.dense)": [[101, "sympy.matrices.dense.matrix_multiply_elementwise"]], "minor() (sympy.matrices.matrices.matrixdeterminant method)": [[101, "sympy.matrices.matrices.MatrixDeterminant.minor"]], "minor_submatrix() (sympy.matrices.matrices.matrixdeterminant method)": [[101, "sympy.matrices.matrices.MatrixDeterminant.minor_submatrix"]], "norm() (sympy.matrices.matrices.matrixbase method)": [[101, "sympy.matrices.matrices.MatrixBase.norm"]], "normalized() (sympy.matrices.matrices.matrixbase method)": [[101, "sympy.matrices.matrices.MatrixBase.normalized"]], "nullspace() (sympy.matrices.matrices.matrixsubspaces method)": [[101, "sympy.matrices.matrices.MatrixSubspaces.nullspace"]], "ones() (in module sympy.matrices.dense)": [[101, "sympy.matrices.dense.ones"]], "orthogonalize() (sympy.matrices.matrices.matrixsubspaces class method)": [[101, "sympy.matrices.matrices.MatrixSubspaces.orthogonalize"]], "per() (sympy.matrices.matrices.matrixdeterminant method)": [[101, "sympy.matrices.matrices.MatrixDeterminant.per"]], "pinv() (sympy.matrices.matrices.matrixbase method)": [[101, "sympy.matrices.matrices.MatrixBase.pinv"]], "pinv_solve() (sympy.matrices.matrices.matrixbase method)": [[101, "sympy.matrices.matrices.MatrixBase.pinv_solve"]], "print_nonzero() (sympy.matrices.matrices.matrixbase method)": [[101, "sympy.matrices.matrices.MatrixBase.print_nonzero"]], "project() (sympy.matrices.matrices.matrixbase method)": [[101, "sympy.matrices.matrices.MatrixBase.project"]], "randmatrix() (in module sympy.matrices.dense)": [[101, "sympy.matrices.dense.randMatrix"]], "rank() (sympy.matrices.matrices.matrixreductions method)": [[101, "sympy.matrices.matrices.MatrixReductions.rank"]], "rank_decomposition() (sympy.matrices.matrices.matrixbase method)": [[101, "sympy.matrices.matrices.MatrixBase.rank_decomposition"]], "rot_axis1() (in module sympy.matrices.dense)": [[101, "sympy.matrices.dense.rot_axis1"]], "rot_axis2() (in module sympy.matrices.dense)": [[101, "sympy.matrices.dense.rot_axis2"]], "rot_axis3() (in module sympy.matrices.dense)": [[101, "sympy.matrices.dense.rot_axis3"]], "rot_ccw_axis1() (in module sympy.matrices.dense)": [[101, "sympy.matrices.dense.rot_ccw_axis1"]], "rot_ccw_axis2() (in module sympy.matrices.dense)": [[101, "sympy.matrices.dense.rot_ccw_axis2"]], "rot_ccw_axis3() (in module sympy.matrices.dense)": [[101, "sympy.matrices.dense.rot_ccw_axis3"]], "rot_givens() (in module sympy.matrices.dense)": [[101, "sympy.matrices.dense.rot_givens"]], "rowspace() (sympy.matrices.matrices.matrixsubspaces method)": [[101, "sympy.matrices.matrices.MatrixSubspaces.rowspace"]], "rref() (sympy.matrices.matrices.matrixreductions method)": [[101, "sympy.matrices.matrices.MatrixReductions.rref"]], "singular_value_decomposition() (sympy.matrices.matrices.matrixbase method)": [[101, "sympy.matrices.matrices.MatrixBase.singular_value_decomposition"]], "singular_values() (sympy.matrices.matrices.matrixeigen method)": [[101, "sympy.matrices.matrices.MatrixEigen.singular_values"]], "solve() (sympy.matrices.matrices.matrixbase method)": [[101, "sympy.matrices.matrices.MatrixBase.solve"]], "solve_least_squares() (sympy.matrices.matrices.matrixbase method)": [[101, "sympy.matrices.matrices.MatrixBase.solve_least_squares"]], "strongly_connected_components() (sympy.matrices.matrices.matrixbase method)": [[101, "sympy.matrices.matrices.MatrixBase.strongly_connected_components"]], "strongly_connected_components_decomposition() (sympy.matrices.matrices.matrixbase method)": [[101, "sympy.matrices.matrices.MatrixBase.strongly_connected_components_decomposition"]], "symarray() (in module sympy.matrices.dense)": [[101, "sympy.matrices.dense.symarray"]], "sympy.matrices.matrices": [[101, "module-sympy.matrices.matrices"]], "table() (sympy.matrices.matrices.matrixbase method)": [[101, "sympy.matrices.matrices.MatrixBase.table"]], "upper_hessenberg_decomposition() (sympy.matrices.matrices.matrixbase method)": [[101, "sympy.matrices.matrices.MatrixBase.upper_hessenberg_decomposition"]], "upper_triangular_solve() (sympy.matrices.matrices.matrixbase method)": [[101, "sympy.matrices.matrices.MatrixBase.upper_triangular_solve"]], "vee() (sympy.matrices.matrices.matrixbase method)": [[101, "sympy.matrices.matrices.MatrixBase.vee"]], "wronskian() (in module sympy.matrices.dense)": [[101, "sympy.matrices.dense.wronskian"]], "zeros() (in module sympy.matrices.dense)": [[101, "sympy.matrices.dense.zeros"]], "hermite_normal_form() (in module sympy.matrices.normalforms)": [[102, "sympy.matrices.normalforms.hermite_normal_form"]], "smith_normal_form() (in module sympy.matrices.normalforms)": [[102, "sympy.matrices.normalforms.smith_normal_form"]], "immutablesparsematrix (class in sympy.matrices.immutable)": [[103, "sympy.matrices.immutable.ImmutableSparseMatrix"]], "mutablesparsematrix (class in sympy.matrices.sparse)": [[103, "sympy.matrices.sparse.MutableSparseMatrix"]], "sparsematrix (in module sympy.matrices.sparse)": [[103, "sympy.matrices.sparse.SparseMatrix"]], "sympy.matrices.sparse": [[103, "module-sympy.matrices.sparse"]], "_csrtodok() (in module sympy.matrices.sparsetools)": [[104, "sympy.matrices.sparsetools._csrtodok"]], "_doktocsr() (in module sympy.matrices.sparsetools)": [[104, "sympy.matrices.sparsetools._doktocsr"]], "banded() (in module sympy.matrices.sparsetools)": [[104, "sympy.matrices.sparsetools.banded"]], "sympy.matrices.sparsetools": [[104, "module-sympy.matrices.sparsetools"]], "sieve (class in sympy.ntheory.generate)": [[105, "sympy.ntheory.generate.Sieve"]], "abundance() (in module sympy.ntheory.factor_)": [[105, "sympy.ntheory.factor_.abundance"]], "antidivisor_count() (in module sympy.ntheory.factor_)": [[105, "sympy.ntheory.factor_.antidivisor_count"]], "antidivisors() (in module sympy.ntheory.factor_)": [[105, "sympy.ntheory.factor_.antidivisors"]], "binomial_coefficients() (in module sympy.ntheory.multinomial)": [[105, "sympy.ntheory.multinomial.binomial_coefficients"]], "binomial_coefficients_list() (in module sympy.ntheory.multinomial)": [[105, "sympy.ntheory.multinomial.binomial_coefficients_list"]], "composite() (in module sympy.ntheory.generate)": [[105, "sympy.ntheory.generate.composite"]], "compositepi() (in module sympy.ntheory.generate)": [[105, "sympy.ntheory.generate.compositepi"]], "continued_fraction() (in module sympy.ntheory.continued_fraction)": [[105, "sympy.ntheory.continued_fraction.continued_fraction"]], "continued_fraction_convergents() (in module sympy.ntheory.continued_fraction)": [[105, "sympy.ntheory.continued_fraction.continued_fraction_convergents"]], "continued_fraction_iterator() (in module sympy.ntheory.continued_fraction)": [[105, "sympy.ntheory.continued_fraction.continued_fraction_iterator"]], "continued_fraction_periodic() (in module sympy.ntheory.continued_fraction)": [[105, "sympy.ntheory.continued_fraction.continued_fraction_periodic"]], "continued_fraction_reduce() (in module sympy.ntheory.continued_fraction)": [[105, "sympy.ntheory.continued_fraction.continued_fraction_reduce"]], "core() (in module sympy.ntheory.factor_)": [[105, "sympy.ntheory.factor_.core"]], "count_digits() (in module sympy.ntheory.digits)": [[105, "sympy.ntheory.digits.count_digits"]], "crt() (in module sympy.ntheory.modular)": [[105, "sympy.ntheory.modular.crt"]], "crt1() (in module sympy.ntheory.modular)": [[105, "sympy.ntheory.modular.crt1"]], "crt2() (in module sympy.ntheory.modular)": [[105, "sympy.ntheory.modular.crt2"]], "cycle_length() (in module sympy.ntheory.generate)": [[105, "sympy.ntheory.generate.cycle_length"]], "digits() (in module sympy.ntheory.digits)": [[105, "sympy.ntheory.digits.digits"]], "digits() (in module sympy.ntheory.factor_)": [[105, "sympy.ntheory.factor_.digits"]], "discrete_log() (in module sympy.ntheory.residue_ntheory)": [[105, "sympy.ntheory.residue_ntheory.discrete_log"]], "divisor_count() (in module sympy.ntheory.factor_)": [[105, "sympy.ntheory.factor_.divisor_count"]], "divisor_sigma (class in sympy.ntheory.factor_)": [[105, "sympy.ntheory.factor_.divisor_sigma"]], "divisors() (in module sympy.ntheory.factor_)": [[105, "sympy.ntheory.factor_.divisors"]], "ecm() (in module sympy.ntheory.ecm)": [[105, "sympy.ntheory.ecm.ecm"]], "egyptian_fraction() (in module sympy.ntheory.egyptian_fraction)": [[105, "sympy.ntheory.egyptian_fraction.egyptian_fraction"]], "extend() (sympy.ntheory.generate.sieve method)": [[105, "sympy.ntheory.generate.Sieve.extend"]], "extend_to_no() (sympy.ntheory.generate.sieve method)": [[105, "sympy.ntheory.generate.Sieve.extend_to_no"]], "factorint() (in module sympy.ntheory.factor_)": [[105, "sympy.ntheory.factor_.factorint"]], "factorrat() (in module sympy.ntheory.factor_)": [[105, "sympy.ntheory.factor_.factorrat"]], "is_abundant() (in module sympy.ntheory.factor_)": [[105, "sympy.ntheory.factor_.is_abundant"]], "is_amicable() (in module sympy.ntheory.factor_)": [[105, "sympy.ntheory.factor_.is_amicable"]], "is_deficient() (in module sympy.ntheory.factor_)": [[105, "sympy.ntheory.factor_.is_deficient"]], "is_euler_pseudoprime() (in module sympy.ntheory.primetest)": [[105, "sympy.ntheory.primetest.is_euler_pseudoprime"]], "is_extra_strong_lucas_prp() (in module sympy.ntheory.primetest)": [[105, "sympy.ntheory.primetest.is_extra_strong_lucas_prp"]], "is_gaussian_prime() (in module sympy.ntheory.primetest)": [[105, "sympy.ntheory.primetest.is_gaussian_prime"]], "is_lucas_prp() (in module sympy.ntheory.primetest)": [[105, "sympy.ntheory.primetest.is_lucas_prp"]], "is_mersenne_prime() (in module sympy.ntheory.factor_)": [[105, "sympy.ntheory.factor_.is_mersenne_prime"]], "is_nthpow_residue() (in module sympy.ntheory.residue_ntheory)": [[105, "sympy.ntheory.residue_ntheory.is_nthpow_residue"]], "is_palindromic() (in module sympy.ntheory.digits)": [[105, "sympy.ntheory.digits.is_palindromic"]], "is_perfect() (in module sympy.ntheory.factor_)": [[105, "sympy.ntheory.factor_.is_perfect"]], "is_primitive_root() (in module sympy.ntheory.residue_ntheory)": [[105, "sympy.ntheory.residue_ntheory.is_primitive_root"]], "is_quad_residue() (in module sympy.ntheory.residue_ntheory)": [[105, "sympy.ntheory.residue_ntheory.is_quad_residue"]], "is_square() (in module sympy.ntheory.primetest)": [[105, "sympy.ntheory.primetest.is_square"]], "is_strong_lucas_prp() (in module sympy.ntheory.primetest)": [[105, "sympy.ntheory.primetest.is_strong_lucas_prp"]], "isprime() (in module sympy.ntheory.primetest)": [[105, "sympy.ntheory.primetest.isprime"]], "jacobi_symbol() (in module sympy.ntheory.residue_ntheory)": [[105, "sympy.ntheory.residue_ntheory.jacobi_symbol"]], "legendre_symbol() (in module sympy.ntheory.residue_ntheory)": [[105, "sympy.ntheory.residue_ntheory.legendre_symbol"]], "mersenne_prime_exponent() (in module sympy.ntheory.factor_)": [[105, "sympy.ntheory.factor_.mersenne_prime_exponent"]], "mobius (class in sympy.ntheory)": [[105, "sympy.ntheory.mobius"]], "mobiusrange() (sympy.ntheory.generate.sieve method)": [[105, "sympy.ntheory.generate.Sieve.mobiusrange"]], "mr() (in module sympy.ntheory.primetest)": [[105, "sympy.ntheory.primetest.mr"]], "multinomial_coefficients() (in module sympy.ntheory.multinomial)": [[105, "sympy.ntheory.multinomial.multinomial_coefficients"]], "multinomial_coefficients_iterator() (in module sympy.ntheory.multinomial)": [[105, "sympy.ntheory.multinomial.multinomial_coefficients_iterator"]], "multiplicity() (in module sympy.ntheory.factor_)": [[105, "sympy.ntheory.factor_.multiplicity"]], "n_order() (in module sympy.ntheory.residue_ntheory)": [[105, "sympy.ntheory.residue_ntheory.n_order"]], "nextprime() (in module sympy.ntheory.generate)": [[105, "sympy.ntheory.generate.nextprime"]], "npartitions() (in module sympy.ntheory.partitions_)": [[105, "sympy.ntheory.partitions_.npartitions"]], "nthroot_mod() (in module sympy.ntheory.residue_ntheory)": [[105, "sympy.ntheory.residue_ntheory.nthroot_mod"]], "perfect_power() (in module sympy.ntheory.factor_)": [[105, "sympy.ntheory.factor_.perfect_power"]], "pi_hex_digits() (in module sympy.ntheory.bbp_pi)": [[105, "sympy.ntheory.bbp_pi.pi_hex_digits"]], "pollard_pm1() (in module sympy.ntheory.factor_)": [[105, "sympy.ntheory.factor_.pollard_pm1"]], "pollard_rho() (in module sympy.ntheory.factor_)": [[105, "sympy.ntheory.factor_.pollard_rho"]], "prevprime() (in module sympy.ntheory.generate)": [[105, "sympy.ntheory.generate.prevprime"]], "prime() (in module sympy.ntheory.generate)": [[105, "sympy.ntheory.generate.prime"]], "primefactors() (in module sympy.ntheory.factor_)": [[105, "sympy.ntheory.factor_.primefactors"]], "primenu (class in sympy.ntheory.factor_)": [[105, "sympy.ntheory.factor_.primenu"]], "primeomega (class in sympy.ntheory.factor_)": [[105, "sympy.ntheory.factor_.primeomega"]], "primepi() (in module sympy.ntheory.generate)": [[105, "sympy.ntheory.generate.primepi"]], "primerange() (in module sympy.ntheory.generate)": [[105, "sympy.ntheory.generate.primerange"]], "primerange() (sympy.ntheory.generate.sieve method)": [[105, "sympy.ntheory.generate.Sieve.primerange"]], "primitive_root() (in module sympy.ntheory.residue_ntheory)": [[105, "sympy.ntheory.residue_ntheory.primitive_root"]], "primorial() (in module sympy.ntheory.generate)": [[105, "sympy.ntheory.generate.primorial"]], "proper_divisor_count() (in module sympy.ntheory.factor_)": [[105, "sympy.ntheory.factor_.proper_divisor_count"]], "proper_divisors() (in module sympy.ntheory.factor_)": [[105, "sympy.ntheory.factor_.proper_divisors"]], "qs() (in module sympy.ntheory.qs)": [[105, "sympy.ntheory.qs.qs"]], "quadratic_residues() (in module sympy.ntheory.residue_ntheory)": [[105, "sympy.ntheory.residue_ntheory.quadratic_residues"]], "randprime() (in module sympy.ntheory.generate)": [[105, "sympy.ntheory.generate.randprime"]], "reduced_totient (class in sympy.ntheory.factor_)": [[105, "sympy.ntheory.factor_.reduced_totient"]], "search() (sympy.ntheory.generate.sieve method)": [[105, "sympy.ntheory.generate.Sieve.search"]], "smoothness() (in module sympy.ntheory.factor_)": [[105, "sympy.ntheory.factor_.smoothness"]], "smoothness_p() (in module sympy.ntheory.factor_)": [[105, "sympy.ntheory.factor_.smoothness_p"]], "solve_congruence() (in module sympy.ntheory.modular)": [[105, "sympy.ntheory.modular.solve_congruence"]], "sqrt_mod() (in module sympy.ntheory.residue_ntheory)": [[105, "sympy.ntheory.residue_ntheory.sqrt_mod"]], "sqrt_mod_iter() (in module sympy.ntheory.residue_ntheory)": [[105, "sympy.ntheory.residue_ntheory.sqrt_mod_iter"]], "symmetric_residue() (in module sympy.ntheory.modular)": [[105, "sympy.ntheory.modular.symmetric_residue"]], "sympy.ntheory.bbp_pi": [[105, "module-sympy.ntheory.bbp_pi"]], "sympy.ntheory.continued_fraction": [[105, "module-sympy.ntheory.continued_fraction"]], "sympy.ntheory.digits": [[105, "module-sympy.ntheory.digits"]], "sympy.ntheory.ecm": [[105, "module-sympy.ntheory.ecm"]], "sympy.ntheory.egyptian_fraction": [[105, "module-sympy.ntheory.egyptian_fraction"]], "sympy.ntheory.factor_": [[105, "module-sympy.ntheory.factor_"]], "sympy.ntheory.generate": [[105, "module-sympy.ntheory.generate"]], "sympy.ntheory.modular": [[105, "module-sympy.ntheory.modular"]], "sympy.ntheory.multinomial": [[105, "module-sympy.ntheory.multinomial"]], "sympy.ntheory.partitions_": [[105, "module-sympy.ntheory.partitions_"]], "sympy.ntheory.primetest": [[105, "module-sympy.ntheory.primetest"]], "sympy.ntheory.qs": [[105, "module-sympy.ntheory.qs"]], "sympy.ntheory.residue_ntheory": [[105, "module-sympy.ntheory.residue_ntheory"]], "totient (class in sympy.ntheory.factor_)": [[105, "sympy.ntheory.factor_.totient"]], "totientrange() (sympy.ntheory.generate.sieve method)": [[105, "sympy.ntheory.generate.Sieve.totientrange"]], "trailing() (in module sympy.ntheory.factor_)": [[105, "sympy.ntheory.factor_.trailing"]], "udivisor_count() (in module sympy.ntheory.factor_)": [[105, "sympy.ntheory.factor_.udivisor_count"]], "udivisor_sigma (class in sympy.ntheory.factor_)": [[105, "sympy.ntheory.factor_.udivisor_sigma"]], "udivisors() (in module sympy.ntheory.factor_)": [[105, "sympy.ntheory.factor_.udivisors"]], "latexparsingerror (class in sympy.parsing.latex)": [[107, "sympy.parsing.latex.LaTeXParsingError"]], "sympyexpression (class in sympy.parsing.sym_expr)": [[107, "sympy.parsing.sym_expr.SymPyExpression"]], "auto_number() (in module sympy.parsing.sympy_parser)": [[107, "sympy.parsing.sympy_parser.auto_number"]], "auto_symbol() (in module sympy.parsing.sympy_parser)": [[107, "sympy.parsing.sympy_parser.auto_symbol"]], "convert_to_c() (sympy.parsing.sym_expr.sympyexpression method)": [[107, "sympy.parsing.sym_expr.SymPyExpression.convert_to_c"]], "convert_to_expr() (sympy.parsing.sym_expr.sympyexpression method)": [[107, "sympy.parsing.sym_expr.SymPyExpression.convert_to_expr"]], "convert_to_fortran() (sympy.parsing.sym_expr.sympyexpression method)": [[107, "sympy.parsing.sym_expr.SymPyExpression.convert_to_fortran"]], "convert_to_python() (sympy.parsing.sym_expr.sympyexpression method)": [[107, "sympy.parsing.sym_expr.SymPyExpression.convert_to_python"]], "convert_xor() (in module sympy.parsing.sympy_parser)": [[107, "sympy.parsing.sympy_parser.convert_xor"]], "eval_expr() (in module sympy.parsing.sympy_parser)": [[107, "sympy.parsing.sympy_parser.eval_expr"]], "factorial_notation() (in module sympy.parsing.sympy_parser)": [[107, "sympy.parsing.sympy_parser.factorial_notation"]], "function_exponentiation() (in module sympy.parsing.sympy_parser)": [[107, "sympy.parsing.sympy_parser.function_exponentiation"]], "implicit_application() (in module sympy.parsing.sympy_parser)": [[107, "sympy.parsing.sympy_parser.implicit_application"]], "implicit_multiplication() (in module sympy.parsing.sympy_parser)": [[107, "sympy.parsing.sympy_parser.implicit_multiplication"]], "implicit_multiplication_application() (in module sympy.parsing.sympy_parser)": [[107, "sympy.parsing.sympy_parser.implicit_multiplication_application"]], "lambda_notation() (in module sympy.parsing.sympy_parser)": [[107, "sympy.parsing.sympy_parser.lambda_notation"]], "parse_expr() (in module sympy.parsing.sympy_parser)": [[107, "sympy.parsing.sympy_parser.parse_expr"]], "parse_latex() (in module sympy.parsing.latex)": [[107, "sympy.parsing.latex.parse_latex"]], "parse_mathematica() (in module sympy.parsing.mathematica)": [[107, "sympy.parsing.mathematica.parse_mathematica"]], "parse_maxima() (in module sympy.parsing.maxima)": [[107, "sympy.parsing.maxima.parse_maxima"]], "rationalize() (in module sympy.parsing.sympy_parser)": [[107, "sympy.parsing.sympy_parser.rationalize"]], "repeated_decimals() (in module sympy.parsing.sympy_parser)": [[107, "sympy.parsing.sympy_parser.repeated_decimals"]], "return_expr() (sympy.parsing.sym_expr.sympyexpression method)": [[107, "sympy.parsing.sym_expr.SymPyExpression.return_expr"]], "split_symbols() (in module sympy.parsing.sympy_parser)": [[107, "sympy.parsing.sympy_parser.split_symbols"]], "split_symbols_custom() (in module sympy.parsing.sympy_parser)": [[107, "sympy.parsing.sympy_parser.split_symbols_custom"]], "standard_transformations (in module sympy.parsing.sympy_parser)": [[107, "sympy.parsing.sympy_parser.standard_transformations"]], "stringify_expr() (in module sympy.parsing.sympy_parser)": [[107, "sympy.parsing.sympy_parser.stringify_expr"]], "sympy.parsing": [[107, "module-sympy.parsing"]], "sympy.parsing.sym_expr": [[107, "module-sympy.parsing.sym_expr"]], "beam (class in sympy.physics.continuum_mechanics.beam)": [[108, "sympy.physics.continuum_mechanics.beam.Beam"]], "beam3d (class in sympy.physics.continuum_mechanics.beam)": [[108, "sympy.physics.continuum_mechanics.beam.Beam3D"]], "angular_deflection() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[108, "sympy.physics.continuum_mechanics.beam.Beam3D.angular_deflection"]], "applied_loads (sympy.physics.continuum_mechanics.beam.beam property)": [[108, "sympy.physics.continuum_mechanics.beam.Beam.applied_loads"]], "apply_load() (sympy.physics.continuum_mechanics.beam.beam method)": [[108, "sympy.physics.continuum_mechanics.beam.Beam.apply_load"]], "apply_load() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[108, "sympy.physics.continuum_mechanics.beam.Beam3D.apply_load"]], "apply_moment_load() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[108, "sympy.physics.continuum_mechanics.beam.Beam3D.apply_moment_load"]], "apply_support() (sympy.physics.continuum_mechanics.beam.beam method)": [[108, "sympy.physics.continuum_mechanics.beam.Beam.apply_support"]], "area (sympy.physics.continuum_mechanics.beam.beam property)": [[108, "sympy.physics.continuum_mechanics.beam.Beam.area"]], "area (sympy.physics.continuum_mechanics.beam.beam3d property)": [[108, "sympy.physics.continuum_mechanics.beam.Beam3D.area"]], "axial_force() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[108, "sympy.physics.continuum_mechanics.beam.Beam3D.axial_force"]], "axial_stress() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[108, "sympy.physics.continuum_mechanics.beam.Beam3D.axial_stress"]], "bending_moment() (sympy.physics.continuum_mechanics.beam.beam method)": [[108, "sympy.physics.continuum_mechanics.beam.Beam.bending_moment"]], "bending_moment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[108, "sympy.physics.continuum_mechanics.beam.Beam3D.bending_moment"]], "boundary_conditions (sympy.physics.continuum_mechanics.beam.beam property)": [[108, "sympy.physics.continuum_mechanics.beam.Beam.boundary_conditions"]], "boundary_conditions (sympy.physics.continuum_mechanics.beam.beam3d property)": [[108, "sympy.physics.continuum_mechanics.beam.Beam3D.boundary_conditions"]], "cross_section (sympy.physics.continuum_mechanics.beam.beam property)": [[108, "sympy.physics.continuum_mechanics.beam.Beam.cross_section"]], "deflection() (sympy.physics.continuum_mechanics.beam.beam method)": [[108, "sympy.physics.continuum_mechanics.beam.Beam.deflection"]], "deflection() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[108, "sympy.physics.continuum_mechanics.beam.Beam3D.deflection"]], "draw() (sympy.physics.continuum_mechanics.beam.beam method)": [[108, "sympy.physics.continuum_mechanics.beam.Beam.draw"]], "elastic_modulus (sympy.physics.continuum_mechanics.beam.beam property)": [[108, "sympy.physics.continuum_mechanics.beam.Beam.elastic_modulus"]], "ild_moment (sympy.physics.continuum_mechanics.beam.beam property)": [[108, "sympy.physics.continuum_mechanics.beam.Beam.ild_moment"]], "ild_reactions (sympy.physics.continuum_mechanics.beam.beam property)": [[108, "sympy.physics.continuum_mechanics.beam.Beam.ild_reactions"]], "ild_shear (sympy.physics.continuum_mechanics.beam.beam property)": [[108, "sympy.physics.continuum_mechanics.beam.Beam.ild_shear"]], "join() (sympy.physics.continuum_mechanics.beam.beam method)": [[108, "sympy.physics.continuum_mechanics.beam.Beam.join"]], "length (sympy.physics.continuum_mechanics.beam.beam property)": [[108, "sympy.physics.continuum_mechanics.beam.Beam.length"]], "load (sympy.physics.continuum_mechanics.beam.beam property)": [[108, "sympy.physics.continuum_mechanics.beam.Beam.load"]], "load_vector (sympy.physics.continuum_mechanics.beam.beam3d property)": [[108, "sympy.physics.continuum_mechanics.beam.Beam3D.load_vector"]], "max_bending_moment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[108, "sympy.physics.continuum_mechanics.beam.Beam3D.max_bending_moment"]], "max_bmoment() (sympy.physics.continuum_mechanics.beam.beam method)": [[108, "sympy.physics.continuum_mechanics.beam.Beam.max_bmoment"]], "max_bmoment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[108, "sympy.physics.continuum_mechanics.beam.Beam3D.max_bmoment"]], "max_deflection() (sympy.physics.continuum_mechanics.beam.beam method)": [[108, "sympy.physics.continuum_mechanics.beam.Beam.max_deflection"]], "max_deflection() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[108, "sympy.physics.continuum_mechanics.beam.Beam3D.max_deflection"]], "max_shear_force() (sympy.physics.continuum_mechanics.beam.beam method)": [[108, "sympy.physics.continuum_mechanics.beam.Beam.max_shear_force"]], "max_shear_force() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[108, "sympy.physics.continuum_mechanics.beam.Beam3D.max_shear_force"]], "moment_load_vector (sympy.physics.continuum_mechanics.beam.beam3d property)": [[108, "sympy.physics.continuum_mechanics.beam.Beam3D.moment_load_vector"]], "plot_bending_moment() (sympy.physics.continuum_mechanics.beam.beam method)": [[108, "sympy.physics.continuum_mechanics.beam.Beam.plot_bending_moment"]], "plot_bending_moment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[108, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_bending_moment"]], "plot_deflection() (sympy.physics.continuum_mechanics.beam.beam method)": [[108, "sympy.physics.continuum_mechanics.beam.Beam.plot_deflection"]], "plot_deflection() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[108, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_deflection"]], "plot_ild_moment() (sympy.physics.continuum_mechanics.beam.beam method)": [[108, "sympy.physics.continuum_mechanics.beam.Beam.plot_ild_moment"]], "plot_ild_reactions() (sympy.physics.continuum_mechanics.beam.beam method)": [[108, "sympy.physics.continuum_mechanics.beam.Beam.plot_ild_reactions"]], "plot_ild_shear() (sympy.physics.continuum_mechanics.beam.beam method)": [[108, "sympy.physics.continuum_mechanics.beam.Beam.plot_ild_shear"]], "plot_loading_results() (sympy.physics.continuum_mechanics.beam.beam method)": [[108, "sympy.physics.continuum_mechanics.beam.Beam.plot_loading_results"]], "plot_loading_results() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[108, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_loading_results"]], "plot_shear_force() (sympy.physics.continuum_mechanics.beam.beam method)": [[108, "sympy.physics.continuum_mechanics.beam.Beam.plot_shear_force"]], "plot_shear_force() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[108, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_shear_force"]], "plot_shear_stress() (sympy.physics.continuum_mechanics.beam.beam method)": [[108, "sympy.physics.continuum_mechanics.beam.Beam.plot_shear_stress"]], "plot_shear_stress() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[108, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_shear_stress"]], "plot_slope() (sympy.physics.continuum_mechanics.beam.beam method)": [[108, "sympy.physics.continuum_mechanics.beam.Beam.plot_slope"]], "plot_slope() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[108, "sympy.physics.continuum_mechanics.beam.Beam3D.plot_slope"]], "point_cflexure() (sympy.physics.continuum_mechanics.beam.beam method)": [[108, "sympy.physics.continuum_mechanics.beam.Beam.point_cflexure"]], "polar_moment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[108, "sympy.physics.continuum_mechanics.beam.Beam3D.polar_moment"]], "reaction_loads (sympy.physics.continuum_mechanics.beam.beam property)": [[108, "sympy.physics.continuum_mechanics.beam.Beam.reaction_loads"]], "remove_load() (sympy.physics.continuum_mechanics.beam.beam method)": [[108, "sympy.physics.continuum_mechanics.beam.Beam.remove_load"]], "second_moment (sympy.physics.continuum_mechanics.beam.beam property)": [[108, "sympy.physics.continuum_mechanics.beam.Beam.second_moment"]], "second_moment (sympy.physics.continuum_mechanics.beam.beam3d property)": [[108, "sympy.physics.continuum_mechanics.beam.Beam3D.second_moment"]], "shear_force() (sympy.physics.continuum_mechanics.beam.beam method)": [[108, "sympy.physics.continuum_mechanics.beam.Beam.shear_force"]], "shear_force() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[108, "sympy.physics.continuum_mechanics.beam.Beam3D.shear_force"]], "shear_modulus (sympy.physics.continuum_mechanics.beam.beam3d property)": [[108, "sympy.physics.continuum_mechanics.beam.Beam3D.shear_modulus"]], "shear_stress() (sympy.physics.continuum_mechanics.beam.beam method)": [[108, "sympy.physics.continuum_mechanics.beam.Beam.shear_stress"]], "shear_stress() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[108, "sympy.physics.continuum_mechanics.beam.Beam3D.shear_stress"]], "slope() (sympy.physics.continuum_mechanics.beam.beam method)": [[108, "sympy.physics.continuum_mechanics.beam.Beam.slope"]], "slope() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[108, "sympy.physics.continuum_mechanics.beam.Beam3D.slope"]], "solve_for_ild_moment() (sympy.physics.continuum_mechanics.beam.beam method)": [[108, "sympy.physics.continuum_mechanics.beam.Beam.solve_for_ild_moment"]], "solve_for_ild_reactions() (sympy.physics.continuum_mechanics.beam.beam method)": [[108, "sympy.physics.continuum_mechanics.beam.Beam.solve_for_ild_reactions"]], "solve_for_ild_shear() (sympy.physics.continuum_mechanics.beam.beam method)": [[108, "sympy.physics.continuum_mechanics.beam.Beam.solve_for_ild_shear"]], "solve_for_reaction_loads() (sympy.physics.continuum_mechanics.beam.beam method)": [[108, "sympy.physics.continuum_mechanics.beam.Beam.solve_for_reaction_loads"]], "solve_for_reaction_loads() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[108, "sympy.physics.continuum_mechanics.beam.Beam3D.solve_for_reaction_loads"]], "solve_for_torsion() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[108, "sympy.physics.continuum_mechanics.beam.Beam3D.solve_for_torsion"]], "sympy.physics.continuum_mechanics.beam": [[108, "module-sympy.physics.continuum_mechanics.beam"]], "torsional_moment() (sympy.physics.continuum_mechanics.beam.beam3d method)": [[108, "sympy.physics.continuum_mechanics.beam.Beam3D.torsional_moment"]], "variable (sympy.physics.continuum_mechanics.beam.beam property)": [[108, "sympy.physics.continuum_mechanics.beam.Beam.variable"]], "truss (class in sympy.physics.continuum_mechanics.truss)": [[111, "sympy.physics.continuum_mechanics.truss.Truss"]], "add_member() (sympy.physics.continuum_mechanics.truss.truss method)": [[111, "sympy.physics.continuum_mechanics.truss.Truss.add_member"]], "add_node() (sympy.physics.continuum_mechanics.truss.truss method)": [[111, "sympy.physics.continuum_mechanics.truss.Truss.add_node"]], "apply_load() (sympy.physics.continuum_mechanics.truss.truss method)": [[111, "sympy.physics.continuum_mechanics.truss.Truss.apply_load"]], "apply_support() (sympy.physics.continuum_mechanics.truss.truss method)": [[111, "sympy.physics.continuum_mechanics.truss.Truss.apply_support"]], "change_member_label() (sympy.physics.continuum_mechanics.truss.truss method)": [[111, "sympy.physics.continuum_mechanics.truss.Truss.change_member_label"]], "change_node_label() (sympy.physics.continuum_mechanics.truss.truss method)": [[111, "sympy.physics.continuum_mechanics.truss.Truss.change_node_label"]], "internal_forces (sympy.physics.continuum_mechanics.truss.truss property)": [[111, "sympy.physics.continuum_mechanics.truss.Truss.internal_forces"]], "loads (sympy.physics.continuum_mechanics.truss.truss property)": [[111, "sympy.physics.continuum_mechanics.truss.Truss.loads"]], "member_labels (sympy.physics.continuum_mechanics.truss.truss property)": [[111, "sympy.physics.continuum_mechanics.truss.Truss.member_labels"]], "members (sympy.physics.continuum_mechanics.truss.truss property)": [[111, "sympy.physics.continuum_mechanics.truss.Truss.members"]], "node_labels (sympy.physics.continuum_mechanics.truss.truss property)": [[111, "sympy.physics.continuum_mechanics.truss.Truss.node_labels"]], "node_positions (sympy.physics.continuum_mechanics.truss.truss property)": [[111, "sympy.physics.continuum_mechanics.truss.Truss.node_positions"]], "nodes (sympy.physics.continuum_mechanics.truss.truss property)": [[111, "sympy.physics.continuum_mechanics.truss.Truss.nodes"]], "reaction_loads (sympy.physics.continuum_mechanics.truss.truss property)": [[111, "sympy.physics.continuum_mechanics.truss.Truss.reaction_loads"]], "remove_load() (sympy.physics.continuum_mechanics.truss.truss method)": [[111, "sympy.physics.continuum_mechanics.truss.Truss.remove_load"]], "remove_member() (sympy.physics.continuum_mechanics.truss.truss method)": [[111, "sympy.physics.continuum_mechanics.truss.Truss.remove_member"]], "remove_node() (sympy.physics.continuum_mechanics.truss.truss method)": [[111, "sympy.physics.continuum_mechanics.truss.Truss.remove_node"]], "remove_support() (sympy.physics.continuum_mechanics.truss.truss method)": [[111, "sympy.physics.continuum_mechanics.truss.Truss.remove_support"]], "solve() (sympy.physics.continuum_mechanics.truss.truss method)": [[111, "sympy.physics.continuum_mechanics.truss.Truss.solve"]], "supports (sympy.physics.continuum_mechanics.truss.truss property)": [[111, "sympy.physics.continuum_mechanics.truss.Truss.supports"]], "sympy.physics.continuum_mechanics.truss": [[111, "module-sympy.physics.continuum_mechanics.truss"]], "bode_magnitude_numerical_data() (sympy.physics.control.control_plots method)": [[113, "sympy.physics.control.control_plots.bode_magnitude_numerical_data"]], "bode_magnitude_plot() (sympy.physics.control.control_plots method)": [[113, "sympy.physics.control.control_plots.bode_magnitude_plot"]], "bode_phase_numerical_data() (sympy.physics.control.control_plots method)": [[113, "sympy.physics.control.control_plots.bode_phase_numerical_data"]], "bode_phase_plot() (sympy.physics.control.control_plots method)": [[113, "sympy.physics.control.control_plots.bode_phase_plot"]], "bode_plot() (sympy.physics.control.control_plots method)": [[113, "sympy.physics.control.control_plots.bode_plot"]], "impulse_response_numerical_data() (sympy.physics.control.control_plots method)": [[113, "sympy.physics.control.control_plots.impulse_response_numerical_data"]], "impulse_response_plot() (sympy.physics.control.control_plots method)": [[113, "sympy.physics.control.control_plots.impulse_response_plot"]], "pole_zero_numerical_data() (sympy.physics.control.control_plots method)": [[113, "sympy.physics.control.control_plots.pole_zero_numerical_data"]], "pole_zero_plot() (sympy.physics.control.control_plots method)": [[113, "sympy.physics.control.control_plots.pole_zero_plot"]], "ramp_response_numerical_data() (sympy.physics.control.control_plots method)": [[113, "sympy.physics.control.control_plots.ramp_response_numerical_data"]], "ramp_response_plot() (sympy.physics.control.control_plots method)": [[113, "sympy.physics.control.control_plots.ramp_response_plot"]], "step_response_numerical_data() (sympy.physics.control.control_plots method)": [[113, "sympy.physics.control.control_plots.step_response_numerical_data"]], "step_response_plot() (sympy.physics.control.control_plots method)": [[113, "sympy.physics.control.control_plots.step_response_plot"]], "sympy.physics.control": [[114, "module-sympy.physics.control"]], "feedback (class in sympy.physics.control.lti)": [[115, "sympy.physics.control.lti.Feedback"]], "mimofeedback (class in sympy.physics.control.lti)": [[115, "sympy.physics.control.lti.MIMOFeedback"]], "mimoparallel (class in sympy.physics.control.lti)": [[115, "sympy.physics.control.lti.MIMOParallel"]], "mimoseries (class in sympy.physics.control.lti)": [[115, "sympy.physics.control.lti.MIMOSeries"]], "parallel (class in sympy.physics.control.lti)": [[115, "sympy.physics.control.lti.Parallel"]], "series (class in sympy.physics.control.lti)": [[115, "sympy.physics.control.lti.Series"]], "transferfunction (class in sympy.physics.control.lti)": [[115, "sympy.physics.control.lti.TransferFunction"]], "transferfunctionmatrix (class in sympy.physics.control.lti)": [[115, "sympy.physics.control.lti.TransferFunctionMatrix"]], "backward_diff() (in module sympy.physics.control.lti)": [[115, "sympy.physics.control.lti.backward_diff"]], "bilinear() (in module sympy.physics.control.lti)": [[115, "sympy.physics.control.lti.bilinear"]], "dc_gain() (sympy.physics.control.lti.transferfunction method)": [[115, "sympy.physics.control.lti.TransferFunction.dc_gain"]], "den (sympy.physics.control.lti.transferfunction property)": [[115, "sympy.physics.control.lti.TransferFunction.den"]], "doit() (sympy.physics.control.lti.feedback method)": [[115, "sympy.physics.control.lti.Feedback.doit"]], "doit() (sympy.physics.control.lti.mimofeedback method)": [[115, "sympy.physics.control.lti.MIMOFeedback.doit"]], "doit() (sympy.physics.control.lti.mimoparallel method)": [[115, "sympy.physics.control.lti.MIMOParallel.doit"]], "doit() (sympy.physics.control.lti.mimoseries method)": [[115, "sympy.physics.control.lti.MIMOSeries.doit"]], "doit() (sympy.physics.control.lti.parallel method)": [[115, "sympy.physics.control.lti.Parallel.doit"]], "doit() (sympy.physics.control.lti.series method)": [[115, "sympy.physics.control.lti.Series.doit"]], "elem_poles() (sympy.physics.control.lti.transferfunctionmatrix method)": [[115, "sympy.physics.control.lti.TransferFunctionMatrix.elem_poles"]], "elem_zeros() (sympy.physics.control.lti.transferfunctionmatrix method)": [[115, "sympy.physics.control.lti.TransferFunctionMatrix.elem_zeros"]], "expand() (sympy.physics.control.lti.transferfunction method)": [[115, "sympy.physics.control.lti.TransferFunction.expand"]], "expand() (sympy.physics.control.lti.transferfunctionmatrix method)": [[115, "sympy.physics.control.lti.TransferFunctionMatrix.expand"]], "from_matrix() (sympy.physics.control.lti.transferfunctionmatrix class method)": [[115, "sympy.physics.control.lti.TransferFunctionMatrix.from_Matrix"]], "from_rational_expression() (sympy.physics.control.lti.transferfunction class method)": [[115, "sympy.physics.control.lti.TransferFunction.from_rational_expression"]], "is_biproper (sympy.physics.control.lti.parallel property)": [[115, "sympy.physics.control.lti.Parallel.is_biproper"]], "is_biproper (sympy.physics.control.lti.series property)": [[115, "sympy.physics.control.lti.Series.is_biproper"]], "is_biproper (sympy.physics.control.lti.transferfunction property)": [[115, "sympy.physics.control.lti.TransferFunction.is_biproper"]], "is_proper (sympy.physics.control.lti.parallel property)": [[115, "sympy.physics.control.lti.Parallel.is_proper"]], "is_proper (sympy.physics.control.lti.series property)": [[115, "sympy.physics.control.lti.Series.is_proper"]], "is_proper (sympy.physics.control.lti.transferfunction property)": [[115, "sympy.physics.control.lti.TransferFunction.is_proper"]], "is_stable() (sympy.physics.control.lti.transferfunction method)": [[115, "sympy.physics.control.lti.TransferFunction.is_stable"]], "is_strictly_proper (sympy.physics.control.lti.parallel property)": [[115, "sympy.physics.control.lti.Parallel.is_strictly_proper"]], "is_strictly_proper (sympy.physics.control.lti.series property)": [[115, "sympy.physics.control.lti.Series.is_strictly_proper"]], "is_strictly_proper (sympy.physics.control.lti.transferfunction property)": [[115, "sympy.physics.control.lti.TransferFunction.is_strictly_proper"]], "num (sympy.physics.control.lti.transferfunction property)": [[115, "sympy.physics.control.lti.TransferFunction.num"]], "num_inputs (sympy.physics.control.lti.mimoparallel property)": [[115, "sympy.physics.control.lti.MIMOParallel.num_inputs"]], "num_inputs (sympy.physics.control.lti.mimoseries property)": [[115, "sympy.physics.control.lti.MIMOSeries.num_inputs"]], "num_inputs (sympy.physics.control.lti.transferfunctionmatrix property)": [[115, "sympy.physics.control.lti.TransferFunctionMatrix.num_inputs"]], "num_outputs (sympy.physics.control.lti.mimoparallel property)": [[115, "sympy.physics.control.lti.MIMOParallel.num_outputs"]], "num_outputs (sympy.physics.control.lti.mimoseries property)": [[115, "sympy.physics.control.lti.MIMOSeries.num_outputs"]], "num_outputs (sympy.physics.control.lti.transferfunctionmatrix property)": [[115, "sympy.physics.control.lti.TransferFunctionMatrix.num_outputs"]], "poles() (sympy.physics.control.lti.transferfunction method)": [[115, "sympy.physics.control.lti.TransferFunction.poles"]], "sensitivity (sympy.physics.control.lti.feedback property)": [[115, "sympy.physics.control.lti.Feedback.sensitivity"]], "sensitivity (sympy.physics.control.lti.mimofeedback property)": [[115, "sympy.physics.control.lti.MIMOFeedback.sensitivity"]], "shape (sympy.physics.control.lti.mimoparallel property)": [[115, "sympy.physics.control.lti.MIMOParallel.shape"]], "shape (sympy.physics.control.lti.mimoseries property)": [[115, "sympy.physics.control.lti.MIMOSeries.shape"]], "shape (sympy.physics.control.lti.transferfunctionmatrix property)": [[115, "sympy.physics.control.lti.TransferFunctionMatrix.shape"]], "sign (sympy.physics.control.lti.feedback property)": [[115, "sympy.physics.control.lti.Feedback.sign"]], "sign (sympy.physics.control.lti.mimofeedback property)": [[115, "sympy.physics.control.lti.MIMOFeedback.sign"]], "sympy.physics.control.lti": [[115, "module-sympy.physics.control.lti"]], "sys1 (sympy.physics.control.lti.feedback property)": [[115, "sympy.physics.control.lti.Feedback.sys1"]], "sys1 (sympy.physics.control.lti.mimofeedback property)": [[115, "sympy.physics.control.lti.MIMOFeedback.sys1"]], "sys2 (sympy.physics.control.lti.feedback property)": [[115, "sympy.physics.control.lti.Feedback.sys2"]], "sys2 (sympy.physics.control.lti.mimofeedback property)": [[115, "sympy.physics.control.lti.MIMOFeedback.sys2"]], "to_expr() (sympy.physics.control.lti.parallel method)": [[115, "sympy.physics.control.lti.Parallel.to_expr"]], "to_expr() (sympy.physics.control.lti.series method)": [[115, "sympy.physics.control.lti.Series.to_expr"]], "to_expr() (sympy.physics.control.lti.transferfunction method)": [[115, "sympy.physics.control.lti.TransferFunction.to_expr"]], "transpose() (sympy.physics.control.lti.transferfunctionmatrix method)": [[115, "sympy.physics.control.lti.TransferFunctionMatrix.transpose"]], "var (sympy.physics.control.lti.feedback property)": [[115, "sympy.physics.control.lti.Feedback.var"]], "var (sympy.physics.control.lti.mimofeedback property)": [[115, "sympy.physics.control.lti.MIMOFeedback.var"]], "var (sympy.physics.control.lti.mimoparallel property)": [[115, "sympy.physics.control.lti.MIMOParallel.var"]], "var (sympy.physics.control.lti.mimoseries property)": [[115, "sympy.physics.control.lti.MIMOSeries.var"]], "var (sympy.physics.control.lti.parallel property)": [[115, "sympy.physics.control.lti.Parallel.var"]], "var (sympy.physics.control.lti.series property)": [[115, "sympy.physics.control.lti.Series.var"]], "var (sympy.physics.control.lti.transferfunction property)": [[115, "sympy.physics.control.lti.TransferFunction.var"]], "var (sympy.physics.control.lti.transferfunctionmatrix property)": [[115, "sympy.physics.control.lti.TransferFunctionMatrix.var"]], "zeros() (sympy.physics.control.lti.transferfunction method)": [[115, "sympy.physics.control.lti.TransferFunction.zeros"]], "extract_type_tens() (in module sympy.physics.hep.gamma_matrices)": [[116, "sympy.physics.hep.gamma_matrices.extract_type_tens"]], "gamma_trace() (in module sympy.physics.hep.gamma_matrices)": [[116, "sympy.physics.hep.gamma_matrices.gamma_trace"]], "kahane_simplify() (in module sympy.physics.hep.gamma_matrices)": [[116, "sympy.physics.hep.gamma_matrices.kahane_simplify"]], "simplify_gpgp() (in module sympy.physics.hep.gamma_matrices)": [[116, "sympy.physics.hep.gamma_matrices.simplify_gpgp"]], "sympy.physics.hep.gamma_matrices": [[116, "module-sympy.physics.hep.gamma_matrices"]], "e_nl() (in module sympy.physics.hydrogen)": [[117, "sympy.physics.hydrogen.E_nl"]], "e_nl_dirac() (in module sympy.physics.hydrogen)": [[117, "sympy.physics.hydrogen.E_nl_dirac"]], "psi_nlm() (in module sympy.physics.hydrogen)": [[117, "sympy.physics.hydrogen.Psi_nlm"]], "r_nl() (in module sympy.physics.hydrogen)": [[117, "sympy.physics.hydrogen.R_nl"]], "sympy.physics.hydrogen": [[117, "module-sympy.physics.hydrogen"]], "mdft() (in module sympy.physics.matrices)": [[118, "sympy.physics.matrices.mdft"]], "mgamma() (in module sympy.physics.matrices)": [[118, "sympy.physics.matrices.mgamma"]], "msigma() (in module sympy.physics.matrices)": [[118, "sympy.physics.matrices.msigma"]], "pat_matrix() (in module sympy.physics.matrices)": [[118, "sympy.physics.matrices.pat_matrix"]], "sympy.physics.matrices": [[118, "module-sympy.physics.matrices"]], "body (class in sympy.physics.mechanics.body)": [[120, "sympy.physics.mechanics.body.Body"]], "ang_vel_in() (sympy.physics.mechanics.body.body method)": [[120, "sympy.physics.mechanics.body.Body.ang_vel_in"]], "apply_force() (sympy.physics.mechanics.body.body method)": [[120, "sympy.physics.mechanics.body.Body.apply_force"]], "apply_torque() (sympy.physics.mechanics.body.body method)": [[120, "sympy.physics.mechanics.body.Body.apply_torque"]], "clear_loads() (sympy.physics.mechanics.body.body method)": [[120, "sympy.physics.mechanics.body.Body.clear_loads"]], "dcm() (sympy.physics.mechanics.body.body method)": [[120, "sympy.physics.mechanics.body.Body.dcm"]], "inertia (sympy.physics.mechanics.body.body property)": [[120, "sympy.physics.mechanics.body.Body.inertia"]], "kinetic_energy() (sympy.physics.mechanics.body.body method)": [[120, "sympy.physics.mechanics.body.Body.kinetic_energy"]], "masscenter_vel() (sympy.physics.mechanics.body.body method)": [[120, "sympy.physics.mechanics.body.Body.masscenter_vel"]], "parallel_axis() (sympy.physics.mechanics.body.body method)": [[120, "sympy.physics.mechanics.body.Body.parallel_axis"]], "remove_load() (sympy.physics.mechanics.body.body method)": [[120, "sympy.physics.mechanics.body.Body.remove_load"]], "sympy.physics.mechanics.body": [[120, "module-sympy.physics.mechanics.body"]], "x (sympy.physics.mechanics.body.body property)": [[120, "sympy.physics.mechanics.body.Body.x"]], "y (sympy.physics.mechanics.body.body property)": [[120, "sympy.physics.mechanics.body.Body.y"]], "z (sympy.physics.mechanics.body.body property)": [[120, "sympy.physics.mechanics.body.Body.z"]], "find_dynamicsymbols() (in module sympy.physics.mechanics)": [[121, "sympy.physics.mechanics.find_dynamicsymbols"]], "msubs() (in module sympy.physics.mechanics)": [[121, "sympy.physics.mechanics.msubs"]], "cylindricaljoint (class in sympy.physics.mechanics.joint)": [[123, "sympy.physics.mechanics.joint.CylindricalJoint"]], "joint (class in sympy.physics.mechanics.joint)": [[123, "sympy.physics.mechanics.joint.Joint"]], "jointsmethod (class in sympy.physics.mechanics.jointsmethod)": [[123, "sympy.physics.mechanics.jointsmethod.JointsMethod"]], "pinjoint (class in sympy.physics.mechanics.joint)": [[123, "sympy.physics.mechanics.joint.PinJoint"]], "planarjoint (class in sympy.physics.mechanics.joint)": [[123, "sympy.physics.mechanics.joint.PlanarJoint"]], "prismaticjoint (class in sympy.physics.mechanics.joint)": [[123, "sympy.physics.mechanics.joint.PrismaticJoint"]], "sphericaljoint (class in sympy.physics.mechanics.joint)": [[123, "sympy.physics.mechanics.joint.SphericalJoint"]], "weldjoint (class in sympy.physics.mechanics.joint)": [[123, "sympy.physics.mechanics.joint.WeldJoint"]], "bodies (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[123, "sympy.physics.mechanics.jointsmethod.JointsMethod.bodies"]], "child (sympy.physics.mechanics.joint.joint property)": [[123, "sympy.physics.mechanics.joint.Joint.child"]], "child_axis (sympy.physics.mechanics.joint.joint property)": [[123, "sympy.physics.mechanics.joint.Joint.child_axis"]], "child_point (sympy.physics.mechanics.joint.joint property)": [[123, "sympy.physics.mechanics.joint.Joint.child_point"]], "coordinates (sympy.physics.mechanics.joint.joint property)": [[123, "sympy.physics.mechanics.joint.Joint.coordinates"]], "forcing (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[123, "sympy.physics.mechanics.jointsmethod.JointsMethod.forcing"]], "forcing_full (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[123, "sympy.physics.mechanics.jointsmethod.JointsMethod.forcing_full"]], "form_eoms() (sympy.physics.mechanics.jointsmethod.jointsmethod method)": [[123, "sympy.physics.mechanics.jointsmethod.JointsMethod.form_eoms"]], "joint_axis (sympy.physics.mechanics.joint.cylindricaljoint property)": [[123, "sympy.physics.mechanics.joint.CylindricalJoint.joint_axis"]], "joint_axis (sympy.physics.mechanics.joint.pinjoint property)": [[123, "sympy.physics.mechanics.joint.PinJoint.joint_axis"]], "joint_axis (sympy.physics.mechanics.joint.prismaticjoint property)": [[123, "sympy.physics.mechanics.joint.PrismaticJoint.joint_axis"]], "kdes (sympy.physics.mechanics.joint.joint property)": [[123, "sympy.physics.mechanics.joint.Joint.kdes"]], "kdes (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[123, "sympy.physics.mechanics.jointsmethod.JointsMethod.kdes"]], "loads (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[123, "sympy.physics.mechanics.jointsmethod.JointsMethod.loads"]], "mass_matrix (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[123, "sympy.physics.mechanics.jointsmethod.JointsMethod.mass_matrix"]], "mass_matrix_full (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[123, "sympy.physics.mechanics.jointsmethod.JointsMethod.mass_matrix_full"]], "method (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[123, "sympy.physics.mechanics.jointsmethod.JointsMethod.method"]], "name (sympy.physics.mechanics.joint.joint property)": [[123, "sympy.physics.mechanics.joint.Joint.name"]], "parent (sympy.physics.mechanics.joint.joint property)": [[123, "sympy.physics.mechanics.joint.Joint.parent"]], "parent_axis (sympy.physics.mechanics.joint.joint property)": [[123, "sympy.physics.mechanics.joint.Joint.parent_axis"]], "parent_point (sympy.physics.mechanics.joint.joint property)": [[123, "sympy.physics.mechanics.joint.Joint.parent_point"]], "planar_coordinates (sympy.physics.mechanics.joint.planarjoint property)": [[123, "sympy.physics.mechanics.joint.PlanarJoint.planar_coordinates"]], "planar_speeds (sympy.physics.mechanics.joint.planarjoint property)": [[123, "sympy.physics.mechanics.joint.PlanarJoint.planar_speeds"]], "planar_vectors (sympy.physics.mechanics.joint.planarjoint property)": [[123, "sympy.physics.mechanics.joint.PlanarJoint.planar_vectors"]], "q (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[123, "sympy.physics.mechanics.jointsmethod.JointsMethod.q"]], "rhs() (sympy.physics.mechanics.jointsmethod.jointsmethod method)": [[123, "sympy.physics.mechanics.jointsmethod.JointsMethod.rhs"]], "rotation_axis (sympy.physics.mechanics.joint.planarjoint property)": [[123, "sympy.physics.mechanics.joint.PlanarJoint.rotation_axis"]], "rotation_coordinate (sympy.physics.mechanics.joint.cylindricaljoint property)": [[123, "sympy.physics.mechanics.joint.CylindricalJoint.rotation_coordinate"]], "rotation_coordinate (sympy.physics.mechanics.joint.planarjoint property)": [[123, "sympy.physics.mechanics.joint.PlanarJoint.rotation_coordinate"]], "rotation_speed (sympy.physics.mechanics.joint.cylindricaljoint property)": [[123, "sympy.physics.mechanics.joint.CylindricalJoint.rotation_speed"]], "rotation_speed (sympy.physics.mechanics.joint.planarjoint property)": [[123, "sympy.physics.mechanics.joint.PlanarJoint.rotation_speed"]], "speeds (sympy.physics.mechanics.joint.joint property)": [[123, "sympy.physics.mechanics.joint.Joint.speeds"]], "sympy.physics.mechanics.joint": [[123, "module-sympy.physics.mechanics.joint"]], "sympy.physics.mechanics.jointsmethod": [[123, "module-sympy.physics.mechanics.jointsmethod"]], "translation_coordinate (sympy.physics.mechanics.joint.cylindricaljoint property)": [[123, "sympy.physics.mechanics.joint.CylindricalJoint.translation_coordinate"]], "translation_speed (sympy.physics.mechanics.joint.cylindricaljoint property)": [[123, "sympy.physics.mechanics.joint.CylindricalJoint.translation_speed"]], "u (sympy.physics.mechanics.jointsmethod.jointsmethod property)": [[123, "sympy.physics.mechanics.jointsmethod.JointsMethod.u"]], "kanesmethod (class in sympy.physics.mechanics.kane)": [[124, "sympy.physics.mechanics.kane.KanesMethod"]], "lagrangesmethod (class in sympy.physics.mechanics.lagrange)": [[124, "sympy.physics.mechanics.lagrange.LagrangesMethod"]], "auxiliary_eqs (sympy.physics.mechanics.kane.kanesmethod property)": [[124, "sympy.physics.mechanics.kane.KanesMethod.auxiliary_eqs"]], "forcing (sympy.physics.mechanics.kane.kanesmethod property)": [[124, "sympy.physics.mechanics.kane.KanesMethod.forcing"]], "forcing (sympy.physics.mechanics.lagrange.lagrangesmethod property)": [[124, "sympy.physics.mechanics.lagrange.LagrangesMethod.forcing"]], "forcing_full (sympy.physics.mechanics.kane.kanesmethod property)": [[124, "sympy.physics.mechanics.kane.KanesMethod.forcing_full"]], "forcing_full (sympy.physics.mechanics.lagrange.lagrangesmethod property)": [[124, "sympy.physics.mechanics.lagrange.LagrangesMethod.forcing_full"]], "forcing_kin (sympy.physics.mechanics.kane.kanesmethod property)": [[124, "sympy.physics.mechanics.kane.KanesMethod.forcing_kin"]], "form_lagranges_equations() (sympy.physics.mechanics.lagrange.lagrangesmethod method)": [[124, "sympy.physics.mechanics.lagrange.LagrangesMethod.form_lagranges_equations"]], "kanes_equations() (sympy.physics.mechanics.kane.kanesmethod method)": [[124, "sympy.physics.mechanics.kane.KanesMethod.kanes_equations"]], "kindiffdict() (sympy.physics.mechanics.kane.kanesmethod method)": [[124, "sympy.physics.mechanics.kane.KanesMethod.kindiffdict"]], "linearize() (sympy.physics.mechanics.kane.kanesmethod method)": [[124, "sympy.physics.mechanics.kane.KanesMethod.linearize"]], "linearize() (sympy.physics.mechanics.lagrange.lagrangesmethod method)": [[124, "sympy.physics.mechanics.lagrange.LagrangesMethod.linearize"]], "mass_matrix (sympy.physics.mechanics.kane.kanesmethod property)": [[124, "sympy.physics.mechanics.kane.KanesMethod.mass_matrix"]], "mass_matrix (sympy.physics.mechanics.lagrange.lagrangesmethod property)": [[124, "sympy.physics.mechanics.lagrange.LagrangesMethod.mass_matrix"]], "mass_matrix_full (sympy.physics.mechanics.kane.kanesmethod property)": [[124, "sympy.physics.mechanics.kane.KanesMethod.mass_matrix_full"]], "mass_matrix_full (sympy.physics.mechanics.lagrange.lagrangesmethod property)": [[124, "sympy.physics.mechanics.lagrange.LagrangesMethod.mass_matrix_full"]], "mass_matrix_kin (sympy.physics.mechanics.kane.kanesmethod property)": [[124, "sympy.physics.mechanics.kane.KanesMethod.mass_matrix_kin"]], "rhs() (sympy.physics.mechanics.kane.kanesmethod method)": [[124, "sympy.physics.mechanics.kane.KanesMethod.rhs"]], "rhs() (sympy.physics.mechanics.lagrange.lagrangesmethod method)": [[124, "sympy.physics.mechanics.lagrange.LagrangesMethod.rhs"]], "solve_multipliers() (sympy.physics.mechanics.lagrange.lagrangesmethod method)": [[124, "sympy.physics.mechanics.lagrange.LagrangesMethod.solve_multipliers"]], "sympy.physics.mechanics.kane": [[124, "module-sympy.physics.mechanics.kane"]], "sympy.physics.mechanics.lagrange": [[124, "module-sympy.physics.mechanics.lagrange"]], "to_linearizer() (sympy.physics.mechanics.kane.kanesmethod method)": [[124, "sympy.physics.mechanics.kane.KanesMethod.to_linearizer"]], "to_linearizer() (sympy.physics.mechanics.lagrange.lagrangesmethod method)": [[124, "sympy.physics.mechanics.lagrange.LagrangesMethod.to_linearizer"]], "linearizer (class in sympy.physics.mechanics.linearize)": [[125, "sympy.physics.mechanics.linearize.Linearizer"]], "linearize() (sympy.physics.mechanics.linearize.linearizer method)": [[125, "sympy.physics.mechanics.linearize.Linearizer.linearize"]], "sympy.physics.mechanics.linearize": [[125, "module-sympy.physics.mechanics.linearize"]], "force (class in sympy.physics.mechanics.loads)": [[126, "sympy.physics.mechanics.loads.Force"]], "inertia (class in sympy.physics.mechanics.inertia)": [[126, "sympy.physics.mechanics.inertia.Inertia"]], "lagrangian() (in module sympy.physics.mechanics.functions)": [[126, "sympy.physics.mechanics.functions.Lagrangian"]], "particle (class in sympy.physics.mechanics.particle)": [[126, "sympy.physics.mechanics.particle.Particle"]], "rigidbody (class in sympy.physics.mechanics.rigidbody)": [[126, "sympy.physics.mechanics.rigidbody.RigidBody"]], "torque (class in sympy.physics.mechanics.loads)": [[126, "sympy.physics.mechanics.loads.Torque"]], "angular_momentum() (in module sympy.physics.mechanics.functions)": [[126, "sympy.physics.mechanics.functions.angular_momentum"]], "angular_momentum() (sympy.physics.mechanics.particle.particle method)": [[126, "sympy.physics.mechanics.particle.Particle.angular_momentum"]], "angular_momentum() (sympy.physics.mechanics.rigidbody.rigidbody method)": [[126, "sympy.physics.mechanics.rigidbody.RigidBody.angular_momentum"]], "central_inertia (sympy.physics.mechanics.rigidbody.rigidbody property)": [[126, "sympy.physics.mechanics.rigidbody.RigidBody.central_inertia"]], "frame (sympy.physics.mechanics.rigidbody.rigidbody property)": [[126, "sympy.physics.mechanics.rigidbody.RigidBody.frame"]], "from_inertia_scalars() (sympy.physics.mechanics.inertia.inertia class method)": [[126, "sympy.physics.mechanics.inertia.Inertia.from_inertia_scalars"]], "inertia (sympy.physics.mechanics.rigidbody.rigidbody property)": [[126, "sympy.physics.mechanics.rigidbody.RigidBody.inertia"]], "inertia() (in module sympy.physics.mechanics.inertia)": [[126, "sympy.physics.mechanics.inertia.inertia"]], "inertia_of_point_mass() (in module sympy.physics.mechanics.inertia)": [[126, "sympy.physics.mechanics.inertia.inertia_of_point_mass"]], "kinetic_energy() (in module sympy.physics.mechanics.functions)": [[126, "sympy.physics.mechanics.functions.kinetic_energy"]], "kinetic_energy() (sympy.physics.mechanics.particle.particle method)": [[126, "sympy.physics.mechanics.particle.Particle.kinetic_energy"]], "kinetic_energy() (sympy.physics.mechanics.rigidbody.rigidbody method)": [[126, "sympy.physics.mechanics.rigidbody.RigidBody.kinetic_energy"]], "linear_momentum() (in module sympy.physics.mechanics.functions)": [[126, "sympy.physics.mechanics.functions.linear_momentum"]], "linear_momentum() (sympy.physics.mechanics.particle.particle method)": [[126, "sympy.physics.mechanics.particle.Particle.linear_momentum"]], "linear_momentum() (sympy.physics.mechanics.rigidbody.rigidbody method)": [[126, "sympy.physics.mechanics.rigidbody.RigidBody.linear_momentum"]], "mass (sympy.physics.mechanics.particle.particle property)": [[126, "sympy.physics.mechanics.particle.Particle.mass"]], "mass (sympy.physics.mechanics.rigidbody.rigidbody property)": [[126, "sympy.physics.mechanics.rigidbody.RigidBody.mass"]], "masscenter (sympy.physics.mechanics.particle.particle property)": [[126, "sympy.physics.mechanics.particle.Particle.masscenter"]], "masscenter (sympy.physics.mechanics.rigidbody.rigidbody property)": [[126, "sympy.physics.mechanics.rigidbody.RigidBody.masscenter"]], "name (sympy.physics.mechanics.particle.particle property)": [[126, "sympy.physics.mechanics.particle.Particle.name"]], "name (sympy.physics.mechanics.rigidbody.rigidbody property)": [[126, "sympy.physics.mechanics.rigidbody.RigidBody.name"]], "parallel_axis() (sympy.physics.mechanics.particle.particle method)": [[126, "sympy.physics.mechanics.particle.Particle.parallel_axis"]], "parallel_axis() (sympy.physics.mechanics.rigidbody.rigidbody method)": [[126, "sympy.physics.mechanics.rigidbody.RigidBody.parallel_axis"]], "point (sympy.physics.mechanics.particle.particle property)": [[126, "sympy.physics.mechanics.particle.Particle.point"]], "potential_energy (sympy.physics.mechanics.particle.particle property)": [[126, "sympy.physics.mechanics.particle.Particle.potential_energy"]], "potential_energy (sympy.physics.mechanics.rigidbody.rigidbody property)": [[126, "sympy.physics.mechanics.rigidbody.RigidBody.potential_energy"]], "potential_energy() (in module sympy.physics.mechanics.functions)": [[126, "sympy.physics.mechanics.functions.potential_energy"]], "x (sympy.physics.mechanics.rigidbody.rigidbody property)": [[126, "sympy.physics.mechanics.rigidbody.RigidBody.x"]], "y (sympy.physics.mechanics.rigidbody.rigidbody property)": [[126, "sympy.physics.mechanics.rigidbody.RigidBody.y"]], "z (sympy.physics.mechanics.rigidbody.rigidbody property)": [[126, "sympy.physics.mechanics.rigidbody.RigidBody.z"]], "symbolicsystem (class in sympy.physics.mechanics.system)": [[128, "sympy.physics.mechanics.system.SymbolicSystem"]], "alg_con (sympy.physics.mechanics.system.symbolicsystem property)": [[128, "sympy.physics.mechanics.system.SymbolicSystem.alg_con"]], "bodies (sympy.physics.mechanics.system.symbolicsystem property)": [[128, "sympy.physics.mechanics.system.SymbolicSystem.bodies"]], "comb_explicit_rhs (sympy.physics.mechanics.system.symbolicsystem property)": [[128, "sympy.physics.mechanics.system.SymbolicSystem.comb_explicit_rhs"]], "comb_implicit_mat (sympy.physics.mechanics.system.symbolicsystem property)": [[128, "sympy.physics.mechanics.system.SymbolicSystem.comb_implicit_mat"]], "comb_implicit_rhs (sympy.physics.mechanics.system.symbolicsystem property)": [[128, "sympy.physics.mechanics.system.SymbolicSystem.comb_implicit_rhs"]], "compute_explicit_form() (sympy.physics.mechanics.system.symbolicsystem method)": [[128, "sympy.physics.mechanics.system.SymbolicSystem.compute_explicit_form"]], "constant_symbols() (sympy.physics.mechanics.system.symbolicsystem method)": [[128, "sympy.physics.mechanics.system.SymbolicSystem.constant_symbols"]], "coordinates (sympy.physics.mechanics.system.symbolicsystem property)": [[128, "sympy.physics.mechanics.system.SymbolicSystem.coordinates"]], "dyn_implicit_mat (sympy.physics.mechanics.system.symbolicsystem property)": [[128, "sympy.physics.mechanics.system.SymbolicSystem.dyn_implicit_mat"]], "dyn_implicit_rhs (sympy.physics.mechanics.system.symbolicsystem property)": [[128, "sympy.physics.mechanics.system.SymbolicSystem.dyn_implicit_rhs"]], "dynamic_symbols() (sympy.physics.mechanics.system.symbolicsystem method)": [[128, "sympy.physics.mechanics.system.SymbolicSystem.dynamic_symbols"]], "kin_explicit_rhs (sympy.physics.mechanics.system.symbolicsystem property)": [[128, "sympy.physics.mechanics.system.SymbolicSystem.kin_explicit_rhs"]], "loads (sympy.physics.mechanics.system.symbolicsystem property)": [[128, "sympy.physics.mechanics.system.SymbolicSystem.loads"]], "speeds (sympy.physics.mechanics.system.symbolicsystem property)": [[128, "sympy.physics.mechanics.system.SymbolicSystem.speeds"]], "states (sympy.physics.mechanics.system.symbolicsystem property)": [[128, "sympy.physics.mechanics.system.SymbolicSystem.states"]], "sympy.physics.mechanics.system": [[128, "module-sympy.physics.mechanics.system"]], "sympy.physics.mechanics": [[139, "module-sympy.physics.mechanics"]], "a (sympy.physics.optics.gaussopt.raytransfermatrix property)": [[148, "sympy.physics.optics.gaussopt.RayTransferMatrix.A"]], "b (sympy.physics.optics.gaussopt.raytransfermatrix property)": [[148, "sympy.physics.optics.gaussopt.RayTransferMatrix.B"]], "beamparameter (class in sympy.physics.optics.gaussopt)": [[148, "sympy.physics.optics.gaussopt.BeamParameter"]], "c (sympy.physics.optics.gaussopt.raytransfermatrix property)": [[148, "sympy.physics.optics.gaussopt.RayTransferMatrix.C"]], "curvedmirror (class in sympy.physics.optics.gaussopt)": [[148, "sympy.physics.optics.gaussopt.CurvedMirror"]], "curvedrefraction (class in sympy.physics.optics.gaussopt)": [[148, "sympy.physics.optics.gaussopt.CurvedRefraction"]], "d (sympy.physics.optics.gaussopt.raytransfermatrix property)": [[148, "sympy.physics.optics.gaussopt.RayTransferMatrix.D"]], "flatmirror (class in sympy.physics.optics.gaussopt)": [[148, "sympy.physics.optics.gaussopt.FlatMirror"]], "flatrefraction (class in sympy.physics.optics.gaussopt)": [[148, "sympy.physics.optics.gaussopt.FlatRefraction"]], "freespace (class in sympy.physics.optics.gaussopt)": [[148, "sympy.physics.optics.gaussopt.FreeSpace"]], "geometricray (class in sympy.physics.optics.gaussopt)": [[148, "sympy.physics.optics.gaussopt.GeometricRay"]], "raytransfermatrix (class in sympy.physics.optics.gaussopt)": [[148, "sympy.physics.optics.gaussopt.RayTransferMatrix"]], "thinlens (class in sympy.physics.optics.gaussopt)": [[148, "sympy.physics.optics.gaussopt.ThinLens"]], "angle (sympy.physics.optics.gaussopt.geometricray property)": [[148, "sympy.physics.optics.gaussopt.GeometricRay.angle"]], "conjugate_gauss_beams() (in module sympy.physics.optics.gaussopt)": [[148, "sympy.physics.optics.gaussopt.conjugate_gauss_beams"]], "divergence (sympy.physics.optics.gaussopt.beamparameter property)": [[148, "sympy.physics.optics.gaussopt.BeamParameter.divergence"]], "gaussian_conj() (in module sympy.physics.optics.gaussopt)": [[148, "sympy.physics.optics.gaussopt.gaussian_conj"]], "geometric_conj_ab() (in module sympy.physics.optics.gaussopt)": [[148, "sympy.physics.optics.gaussopt.geometric_conj_ab"]], "geometric_conj_af() (in module sympy.physics.optics.gaussopt)": [[148, "sympy.physics.optics.gaussopt.geometric_conj_af"]], "geometric_conj_bf() (in module sympy.physics.optics.gaussopt)": [[148, "sympy.physics.optics.gaussopt.geometric_conj_bf"]], "gouy (sympy.physics.optics.gaussopt.beamparameter property)": [[148, "sympy.physics.optics.gaussopt.BeamParameter.gouy"]], "height (sympy.physics.optics.gaussopt.geometricray property)": [[148, "sympy.physics.optics.gaussopt.GeometricRay.height"]], "q (sympy.physics.optics.gaussopt.beamparameter property)": [[148, "sympy.physics.optics.gaussopt.BeamParameter.q"]], "radius (sympy.physics.optics.gaussopt.beamparameter property)": [[148, "sympy.physics.optics.gaussopt.BeamParameter.radius"]], "rayleigh2waist() (in module sympy.physics.optics.gaussopt)": [[148, "sympy.physics.optics.gaussopt.rayleigh2waist"]], "sympy.physics.optics.gaussopt": [[148, "module-sympy.physics.optics.gaussopt"]], "w (sympy.physics.optics.gaussopt.beamparameter property)": [[148, "sympy.physics.optics.gaussopt.BeamParameter.w"]], "w_0 (sympy.physics.optics.gaussopt.beamparameter property)": [[148, "sympy.physics.optics.gaussopt.BeamParameter.w_0"]], "waist2rayleigh() (in module sympy.physics.optics.gaussopt)": [[148, "sympy.physics.optics.gaussopt.waist2rayleigh"]], "waist_approximation_limit (sympy.physics.optics.gaussopt.beamparameter property)": [[148, "sympy.physics.optics.gaussopt.BeamParameter.waist_approximation_limit"]], "medium (class in sympy.physics.optics.medium)": [[150, "sympy.physics.optics.medium.Medium"]], "refractive_index (sympy.physics.optics.medium.medium property)": [[150, "sympy.physics.optics.medium.Medium.refractive_index"]], "speed (sympy.physics.optics.medium.medium property)": [[150, "sympy.physics.optics.medium.Medium.speed"]], "sympy.physics.optics.medium": [[150, "module-sympy.physics.optics.medium"]], "half_wave_retarder() (in module sympy.physics.optics.polarization)": [[151, "sympy.physics.optics.polarization.half_wave_retarder"]], "jones_2_stokes() (in module sympy.physics.optics.polarization)": [[151, "sympy.physics.optics.polarization.jones_2_stokes"]], "jones_vector() (in module sympy.physics.optics.polarization)": [[151, "sympy.physics.optics.polarization.jones_vector"]], "linear_polarizer() (in module sympy.physics.optics.polarization)": [[151, "sympy.physics.optics.polarization.linear_polarizer"]], "mueller_matrix() (in module sympy.physics.optics.polarization)": [[151, "sympy.physics.optics.polarization.mueller_matrix"]], "phase_retarder() (in module sympy.physics.optics.polarization)": [[151, "sympy.physics.optics.polarization.phase_retarder"]], "polarizing_beam_splitter() (in module sympy.physics.optics.polarization)": [[151, "sympy.physics.optics.polarization.polarizing_beam_splitter"]], "quarter_wave_retarder() (in module sympy.physics.optics.polarization)": [[151, "sympy.physics.optics.polarization.quarter_wave_retarder"]], "reflective_filter() (in module sympy.physics.optics.polarization)": [[151, "sympy.physics.optics.polarization.reflective_filter"]], "stokes_vector() (in module sympy.physics.optics.polarization)": [[151, "sympy.physics.optics.polarization.stokes_vector"]], "sympy.physics.optics.polarization": [[151, "module-sympy.physics.optics.polarization"]], "transmissive_filter() (in module sympy.physics.optics.polarization)": [[151, "sympy.physics.optics.polarization.transmissive_filter"]], "brewster_angle() (in module sympy.physics.optics.utils)": [[152, "sympy.physics.optics.utils.brewster_angle"]], "critical_angle() (in module sympy.physics.optics.utils)": [[152, "sympy.physics.optics.utils.critical_angle"]], "deviation() (in module sympy.physics.optics.utils)": [[152, "sympy.physics.optics.utils.deviation"]], "fresnel_coefficients() (in module sympy.physics.optics.utils)": [[152, "sympy.physics.optics.utils.fresnel_coefficients"]], "hyperfocal_distance() (in module sympy.physics.optics.utils)": [[152, "sympy.physics.optics.utils.hyperfocal_distance"]], "lens_formula() (in module sympy.physics.optics.utils)": [[152, "sympy.physics.optics.utils.lens_formula"]], "lens_makers_formula() (in module sympy.physics.optics.utils)": [[152, "sympy.physics.optics.utils.lens_makers_formula"]], "mirror_formula() (in module sympy.physics.optics.utils)": [[152, "sympy.physics.optics.utils.mirror_formula"]], "refraction_angle() (in module sympy.physics.optics.utils)": [[152, "sympy.physics.optics.utils.refraction_angle"]], "sympy.physics.optics.utils": [[152, "module-sympy.physics.optics.utils"]], "transverse_magnification() (in module sympy.physics.optics.utils)": [[152, "sympy.physics.optics.utils.transverse_magnification"]], "twave (class in sympy.physics.optics.waves)": [[153, "sympy.physics.optics.waves.TWave"]], "amplitude (sympy.physics.optics.waves.twave property)": [[153, "sympy.physics.optics.waves.TWave.amplitude"]], "angular_velocity (sympy.physics.optics.waves.twave property)": [[153, "sympy.physics.optics.waves.TWave.angular_velocity"]], "frequency (sympy.physics.optics.waves.twave property)": [[153, "sympy.physics.optics.waves.TWave.frequency"]], "n (sympy.physics.optics.waves.twave property)": [[153, "sympy.physics.optics.waves.TWave.n"]], "phase (sympy.physics.optics.waves.twave property)": [[153, "sympy.physics.optics.waves.TWave.phase"]], "speed (sympy.physics.optics.waves.twave property)": [[153, "sympy.physics.optics.waves.TWave.speed"]], "sympy.physics.optics.waves": [[153, "module-sympy.physics.optics.waves"]], "time_period (sympy.physics.optics.waves.twave property)": [[153, "sympy.physics.optics.waves.TWave.time_period"]], "wavelength (sympy.physics.optics.waves.twave property)": [[153, "sympy.physics.optics.waves.TWave.wavelength"]], "wavenumber (sympy.physics.optics.waves.twave property)": [[153, "sympy.physics.optics.waves.TWave.wavenumber"]], "evaluate_pauli_product() (in module sympy.physics.paulialgebra)": [[154, "sympy.physics.paulialgebra.evaluate_pauli_product"]], "sympy.physics.paulialgebra": [[154, "module-sympy.physics.paulialgebra"]], "e_n() (in module sympy.physics.qho_1d)": [[155, "sympy.physics.qho_1d.E_n"]], "coherent_state() (in module sympy.physics.qho_1d)": [[155, "sympy.physics.qho_1d.coherent_state"]], "psi_n() (in module sympy.physics.qho_1d)": [[155, "sympy.physics.qho_1d.psi_n"]], "sympy.physics.qho_1d": [[155, "module-sympy.physics.qho_1d"]], "anticommutator (class in sympy.physics.quantum.anticommutator)": [[156, "sympy.physics.quantum.anticommutator.AntiCommutator"]], "doit() (sympy.physics.quantum.anticommutator.anticommutator method)": [[156, "sympy.physics.quantum.anticommutator.AntiCommutator.doit"]], "sympy.physics.quantum.anticommutator": [[156, "module-sympy.physics.quantum.anticommutator"]], "positionbra3d (class in sympy.physics.quantum.cartesian)": [[157, "sympy.physics.quantum.cartesian.PositionBra3D"]], "positionket3d (class in sympy.physics.quantum.cartesian)": [[157, "sympy.physics.quantum.cartesian.PositionKet3D"]], "positionstate3d (class in sympy.physics.quantum.cartesian)": [[157, "sympy.physics.quantum.cartesian.PositionState3D"]], "pxbra (class in sympy.physics.quantum.cartesian)": [[157, "sympy.physics.quantum.cartesian.PxBra"]], "pxket (class in sympy.physics.quantum.cartesian)": [[157, "sympy.physics.quantum.cartesian.PxKet"]], "pxop (class in sympy.physics.quantum.cartesian)": [[157, "sympy.physics.quantum.cartesian.PxOp"]], "xbra (class in sympy.physics.quantum.cartesian)": [[157, "sympy.physics.quantum.cartesian.XBra"]], "xket (class in sympy.physics.quantum.cartesian)": [[157, "sympy.physics.quantum.cartesian.XKet"]], "xop (class in sympy.physics.quantum.cartesian)": [[157, "sympy.physics.quantum.cartesian.XOp"]], "yop (class in sympy.physics.quantum.cartesian)": [[157, "sympy.physics.quantum.cartesian.YOp"]], "zop (class in sympy.physics.quantum.cartesian)": [[157, "sympy.physics.quantum.cartesian.ZOp"]], "momentum (sympy.physics.quantum.cartesian.pxbra property)": [[157, "sympy.physics.quantum.cartesian.PxBra.momentum"]], "momentum (sympy.physics.quantum.cartesian.pxket property)": [[157, "sympy.physics.quantum.cartesian.PxKet.momentum"]], "position (sympy.physics.quantum.cartesian.xbra property)": [[157, "sympy.physics.quantum.cartesian.XBra.position"]], "position (sympy.physics.quantum.cartesian.xket property)": [[157, "sympy.physics.quantum.cartesian.XKet.position"]], "position_x (sympy.physics.quantum.cartesian.positionstate3d property)": [[157, "sympy.physics.quantum.cartesian.PositionState3D.position_x"]], "position_y (sympy.physics.quantum.cartesian.positionstate3d property)": [[157, "sympy.physics.quantum.cartesian.PositionState3D.position_y"]], "position_z (sympy.physics.quantum.cartesian.positionstate3d property)": [[157, "sympy.physics.quantum.cartesian.PositionState3D.position_z"]], "sympy.physics.quantum.cartesian": [[157, "module-sympy.physics.quantum.cartesian"]], "cg (class in sympy.physics.quantum.cg)": [[158, "sympy.physics.quantum.cg.CG"]], "wigner3j (class in sympy.physics.quantum.cg)": [[158, "sympy.physics.quantum.cg.Wigner3j"]], "wigner6j (class in sympy.physics.quantum.cg)": [[158, "sympy.physics.quantum.cg.Wigner6j"]], "wigner9j (class in sympy.physics.quantum.cg)": [[158, "sympy.physics.quantum.cg.Wigner9j"]], "cg_simp() (in module sympy.physics.quantum.cg)": [[158, "sympy.physics.quantum.cg.cg_simp"]], "sympy.physics.quantum.cg": [[158, "module-sympy.physics.quantum.cg"]], "circuitplot (class in sympy.physics.quantum.circuitplot)": [[159, "sympy.physics.quantum.circuitplot.CircuitPlot"]], "createcgate() (in module sympy.physics.quantum.circuitplot)": [[159, "sympy.physics.quantum.circuitplot.CreateCGate"]], "mx (class in sympy.physics.quantum.circuitplot)": [[159, "sympy.physics.quantum.circuitplot.Mx"]], "mz (class in sympy.physics.quantum.circuitplot)": [[159, "sympy.physics.quantum.circuitplot.Mz"]], "circuit_plot() (in module sympy.physics.quantum.circuitplot)": [[159, "sympy.physics.quantum.circuitplot.circuit_plot"]], "control_line() (sympy.physics.quantum.circuitplot.circuitplot method)": [[159, "sympy.physics.quantum.circuitplot.CircuitPlot.control_line"]], "control_point() (sympy.physics.quantum.circuitplot.circuitplot method)": [[159, "sympy.physics.quantum.circuitplot.CircuitPlot.control_point"]], "labeller() (in module sympy.physics.quantum.circuitplot)": [[159, "sympy.physics.quantum.circuitplot.labeller"]], "not_point() (sympy.physics.quantum.circuitplot.circuitplot method)": [[159, "sympy.physics.quantum.circuitplot.CircuitPlot.not_point"]], "one_qubit_box() (sympy.physics.quantum.circuitplot.circuitplot method)": [[159, "sympy.physics.quantum.circuitplot.CircuitPlot.one_qubit_box"]], "swap_point() (sympy.physics.quantum.circuitplot.circuitplot method)": [[159, "sympy.physics.quantum.circuitplot.CircuitPlot.swap_point"]], "sympy.physics.quantum.circuitplot": [[159, "module-sympy.physics.quantum.circuitplot"]], "two_qubit_box() (sympy.physics.quantum.circuitplot.circuitplot method)": [[159, "sympy.physics.quantum.circuitplot.CircuitPlot.two_qubit_box"]], "update() (sympy.physics.quantum.circuitplot.circuitplot method)": [[159, "sympy.physics.quantum.circuitplot.CircuitPlot.update"]], "commutator (class in sympy.physics.quantum.commutator)": [[160, "sympy.physics.quantum.commutator.Commutator"]], "doit() (sympy.physics.quantum.commutator.commutator method)": [[160, "sympy.physics.quantum.commutator.Commutator.doit"]], "sympy.physics.quantum.commutator": [[160, "module-sympy.physics.quantum.commutator"]], "hbar (class in sympy.physics.quantum.constants)": [[161, "sympy.physics.quantum.constants.HBar"]], "sympy.physics.quantum.constants": [[161, "module-sympy.physics.quantum.constants"]], "dagger (class in sympy.physics.quantum.dagger)": [[162, "sympy.physics.quantum.dagger.Dagger"]], "sympy.physics.quantum.dagger": [[162, "module-sympy.physics.quantum.dagger"]], "cgate (class in sympy.physics.quantum.gate)": [[163, "sympy.physics.quantum.gate.CGate"]], "cgates (class in sympy.physics.quantum.gate)": [[163, "sympy.physics.quantum.gate.CGateS"]], "cnot (in module sympy.physics.quantum.gate)": [[163, "sympy.physics.quantum.gate.CNOT"]], "cnotgate (class in sympy.physics.quantum.gate)": [[163, "sympy.physics.quantum.gate.CNotGate"]], "gate (class in sympy.physics.quantum.gate)": [[163, "sympy.physics.quantum.gate.Gate"]], "h (in module sympy.physics.quantum.gate)": [[163, "sympy.physics.quantum.gate.H"]], "hadamardgate (class in sympy.physics.quantum.gate)": [[163, "sympy.physics.quantum.gate.HadamardGate"]], "identitygate (class in sympy.physics.quantum.gate)": [[163, "sympy.physics.quantum.gate.IdentityGate"]], "onequbitgate (class in sympy.physics.quantum.gate)": [[163, "sympy.physics.quantum.gate.OneQubitGate"]], "phase (in module sympy.physics.quantum.gate)": [[163, "sympy.physics.quantum.gate.Phase"]], "phasegate (class in sympy.physics.quantum.gate)": [[163, "sympy.physics.quantum.gate.PhaseGate"]], "s (in module sympy.physics.quantum.gate)": [[163, "sympy.physics.quantum.gate.S"]], "swap (in module sympy.physics.quantum.gate)": [[163, "sympy.physics.quantum.gate.SWAP"]], "swapgate (class in sympy.physics.quantum.gate)": [[163, "sympy.physics.quantum.gate.SwapGate"]], "t (in module sympy.physics.quantum.gate)": [[163, "sympy.physics.quantum.gate.T"]], "tgate (class in sympy.physics.quantum.gate)": [[163, "sympy.physics.quantum.gate.TGate"]], "twoqubitgate (class in sympy.physics.quantum.gate)": [[163, "sympy.physics.quantum.gate.TwoQubitGate"]], "ugate (class in sympy.physics.quantum.gate)": [[163, "sympy.physics.quantum.gate.UGate"]], "x (in module sympy.physics.quantum.gate)": [[163, "sympy.physics.quantum.gate.X"]], "xgate (class in sympy.physics.quantum.gate)": [[163, "sympy.physics.quantum.gate.XGate"]], "y (in module sympy.physics.quantum.gate)": [[163, "sympy.physics.quantum.gate.Y"]], "ygate (class in sympy.physics.quantum.gate)": [[163, "sympy.physics.quantum.gate.YGate"]], "z (in module sympy.physics.quantum.gate)": [[163, "sympy.physics.quantum.gate.Z"]], "zgate (class in sympy.physics.quantum.gate)": [[163, "sympy.physics.quantum.gate.ZGate"]], "controls (sympy.physics.quantum.gate.cgate property)": [[163, "sympy.physics.quantum.gate.CGate.controls"]], "controls (sympy.physics.quantum.gate.cnotgate property)": [[163, "sympy.physics.quantum.gate.CNotGate.controls"]], "decompose() (sympy.physics.quantum.gate.cgate method)": [[163, "sympy.physics.quantum.gate.CGate.decompose"]], "decompose() (sympy.physics.quantum.gate.swapgate method)": [[163, "sympy.physics.quantum.gate.SwapGate.decompose"]], "eval_controls() (sympy.physics.quantum.gate.cgate method)": [[163, "sympy.physics.quantum.gate.CGate.eval_controls"]], "gate (sympy.physics.quantum.gate.cgate property)": [[163, "sympy.physics.quantum.gate.CGate.gate"]], "gate (sympy.physics.quantum.gate.cnotgate property)": [[163, "sympy.physics.quantum.gate.CNotGate.gate"]], "gate_simp() (in module sympy.physics.quantum.gate)": [[163, "sympy.physics.quantum.gate.gate_simp"]], "gate_sort() (in module sympy.physics.quantum.gate)": [[163, "sympy.physics.quantum.gate.gate_sort"]], "get_target_matrix() (sympy.physics.quantum.gate.gate method)": [[163, "sympy.physics.quantum.gate.Gate.get_target_matrix"]], "get_target_matrix() (sympy.physics.quantum.gate.ugate method)": [[163, "sympy.physics.quantum.gate.UGate.get_target_matrix"]], "min_qubits (sympy.physics.quantum.gate.cgate property)": [[163, "sympy.physics.quantum.gate.CGate.min_qubits"]], "min_qubits (sympy.physics.quantum.gate.cnotgate property)": [[163, "sympy.physics.quantum.gate.CNotGate.min_qubits"]], "min_qubits (sympy.physics.quantum.gate.gate property)": [[163, "sympy.physics.quantum.gate.Gate.min_qubits"]], "normalized() (in module sympy.physics.quantum.gate)": [[163, "sympy.physics.quantum.gate.normalized"]], "nqubits (sympy.physics.quantum.gate.cgate property)": [[163, "sympy.physics.quantum.gate.CGate.nqubits"]], "nqubits (sympy.physics.quantum.gate.gate property)": [[163, "sympy.physics.quantum.gate.Gate.nqubits"]], "plot_gate() (sympy.physics.quantum.gate.cgate method)": [[163, "sympy.physics.quantum.gate.CGate.plot_gate"]], "random_circuit() (in module sympy.physics.quantum.gate)": [[163, "sympy.physics.quantum.gate.random_circuit"]], "sympy.physics.quantum.gate": [[163, "module-sympy.physics.quantum.gate"]], "targets (sympy.physics.quantum.gate.cgate property)": [[163, "sympy.physics.quantum.gate.CGate.targets"]], "targets (sympy.physics.quantum.gate.cnotgate property)": [[163, "sympy.physics.quantum.gate.CNotGate.targets"]], "targets (sympy.physics.quantum.gate.gate property)": [[163, "sympy.physics.quantum.gate.Gate.targets"]], "targets (sympy.physics.quantum.gate.ugate property)": [[163, "sympy.physics.quantum.gate.UGate.targets"]], "oraclegate (class in sympy.physics.quantum.grover)": [[164, "sympy.physics.quantum.grover.OracleGate"]], "wgate (class in sympy.physics.quantum.grover)": [[164, "sympy.physics.quantum.grover.WGate"]], "apply_grover() (in module sympy.physics.quantum.grover)": [[164, "sympy.physics.quantum.grover.apply_grover"]], "grover_iteration() (in module sympy.physics.quantum.grover)": [[164, "sympy.physics.quantum.grover.grover_iteration"]], "search_function (sympy.physics.quantum.grover.oraclegate property)": [[164, "sympy.physics.quantum.grover.OracleGate.search_function"]], "superposition_basis() (in module sympy.physics.quantum.grover)": [[164, "sympy.physics.quantum.grover.superposition_basis"]], "sympy.physics.quantum.grover": [[164, "module-sympy.physics.quantum.grover"]], "targets (sympy.physics.quantum.grover.oraclegate property)": [[164, "sympy.physics.quantum.grover.OracleGate.targets"]], "complexspace (class in sympy.physics.quantum.hilbert)": [[165, "sympy.physics.quantum.hilbert.ComplexSpace"]], "directsumhilbertspace (class in sympy.physics.quantum.hilbert)": [[165, "sympy.physics.quantum.hilbert.DirectSumHilbertSpace"]], "fockspace (class in sympy.physics.quantum.hilbert)": [[165, "sympy.physics.quantum.hilbert.FockSpace"]], "hilbertspace (class in sympy.physics.quantum.hilbert)": [[165, "sympy.physics.quantum.hilbert.HilbertSpace"]], "l2 (class in sympy.physics.quantum.hilbert)": [[165, "sympy.physics.quantum.hilbert.L2"]], "tensorpowerhilbertspace (class in sympy.physics.quantum.hilbert)": [[165, "sympy.physics.quantum.hilbert.TensorPowerHilbertSpace"]], "tensorproducthilbertspace (class in sympy.physics.quantum.hilbert)": [[165, "sympy.physics.quantum.hilbert.TensorProductHilbertSpace"]], "dimension (sympy.physics.quantum.hilbert.hilbertspace property)": [[165, "sympy.physics.quantum.hilbert.HilbertSpace.dimension"]], "eval() (sympy.physics.quantum.hilbert.directsumhilbertspace class method)": [[165, "sympy.physics.quantum.hilbert.DirectSumHilbertSpace.eval"]], "eval() (sympy.physics.quantum.hilbert.tensorproducthilbertspace class method)": [[165, "sympy.physics.quantum.hilbert.TensorProductHilbertSpace.eval"]], "spaces (sympy.physics.quantum.hilbert.directsumhilbertspace property)": [[165, "sympy.physics.quantum.hilbert.DirectSumHilbertSpace.spaces"]], "spaces (sympy.physics.quantum.hilbert.tensorproducthilbertspace property)": [[165, "sympy.physics.quantum.hilbert.TensorProductHilbertSpace.spaces"]], "sympy.physics.quantum.hilbert": [[165, "module-sympy.physics.quantum.hilbert"]], "innerproduct (class in sympy.physics.quantum.innerproduct)": [[167, "sympy.physics.quantum.innerproduct.InnerProduct"]], "sympy.physics.quantum.innerproduct": [[167, "module-sympy.physics.quantum.innerproduct"]], "differentialoperator (class in sympy.physics.quantum.operator)": [[168, "sympy.physics.quantum.operator.DifferentialOperator"]], "hermitianoperator (class in sympy.physics.quantum.operator)": [[168, "sympy.physics.quantum.operator.HermitianOperator"]], "identityoperator (class in sympy.physics.quantum.operator)": [[168, "sympy.physics.quantum.operator.IdentityOperator"]], "operator (class in sympy.physics.quantum.operator)": [[168, "sympy.physics.quantum.operator.Operator"]], "outerproduct (class in sympy.physics.quantum.operator)": [[168, "sympy.physics.quantum.operator.OuterProduct"]], "unitaryoperator (class in sympy.physics.quantum.operator)": [[168, "sympy.physics.quantum.operator.UnitaryOperator"]], "bra (sympy.physics.quantum.operator.outerproduct property)": [[168, "sympy.physics.quantum.operator.OuterProduct.bra"]], "expr (sympy.physics.quantum.operator.differentialoperator property)": [[168, "sympy.physics.quantum.operator.DifferentialOperator.expr"]], "free_symbols (sympy.physics.quantum.operator.differentialoperator property)": [[168, "sympy.physics.quantum.operator.DifferentialOperator.free_symbols"]], "function (sympy.physics.quantum.operator.differentialoperator property)": [[168, "sympy.physics.quantum.operator.DifferentialOperator.function"]], "ket (sympy.physics.quantum.operator.outerproduct property)": [[168, "sympy.physics.quantum.operator.OuterProduct.ket"]], "sympy.physics.quantum.operator": [[168, "module-sympy.physics.quantum.operator"]], "variables (sympy.physics.quantum.operator.differentialoperator property)": [[168, "sympy.physics.quantum.operator.DifferentialOperator.variables"]], "operators_to_state() (in module sympy.physics.quantum.operatorset)": [[169, "sympy.physics.quantum.operatorset.operators_to_state"]], "state_to_operators() (in module sympy.physics.quantum.operatorset)": [[169, "sympy.physics.quantum.operatorset.state_to_operators"]], "sympy.physics.quantum.operatorset": [[169, "module-sympy.physics.quantum.operatorset"]], "piabbra (class in sympy.physics.quantum.piab)": [[170, "sympy.physics.quantum.piab.PIABBra"]], "piabhamiltonian (class in sympy.physics.quantum.piab)": [[170, "sympy.physics.quantum.piab.PIABHamiltonian"]], "piabket (class in sympy.physics.quantum.piab)": [[170, "sympy.physics.quantum.piab.PIABKet"]], "sympy.physics.quantum.piab": [[170, "module-sympy.physics.quantum.piab"]], "qapply() (in module sympy.physics.quantum.qapply)": [[171, "sympy.physics.quantum.qapply.qapply"]], "sympy.physics.quantum.qapply": [[171, "module-sympy.physics.quantum.qapply"]], "iqft (class in sympy.physics.quantum.qft)": [[172, "sympy.physics.quantum.qft.IQFT"]], "qft (class in sympy.physics.quantum.qft)": [[172, "sympy.physics.quantum.qft.QFT"]], "rk (in module sympy.physics.quantum.qft)": [[172, "sympy.physics.quantum.qft.Rk"]], "rkgate (class in sympy.physics.quantum.qft)": [[172, "sympy.physics.quantum.qft.RkGate"]], "decompose() (sympy.physics.quantum.qft.iqft method)": [[172, "sympy.physics.quantum.qft.IQFT.decompose"]], "decompose() (sympy.physics.quantum.qft.qft method)": [[172, "sympy.physics.quantum.qft.QFT.decompose"]], "sympy.physics.quantum.qft": [[172, "module-sympy.physics.quantum.qft"]], "intqubit (class in sympy.physics.quantum.qubit)": [[173, "sympy.physics.quantum.qubit.IntQubit"]], "intqubitbra (class in sympy.physics.quantum.qubit)": [[173, "sympy.physics.quantum.qubit.IntQubitBra"]], "qubit (class in sympy.physics.quantum.qubit)": [[173, "sympy.physics.quantum.qubit.Qubit"]], "qubitbra (class in sympy.physics.quantum.qubit)": [[173, "sympy.physics.quantum.qubit.QubitBra"]], "matrix_to_density() (in module sympy.physics.quantum.qubit)": [[173, "sympy.physics.quantum.qubit.matrix_to_density"]], "matrix_to_qubit() (in module sympy.physics.quantum.qubit)": [[173, "sympy.physics.quantum.qubit.matrix_to_qubit"]], "measure_all() (in module sympy.physics.quantum.qubit)": [[173, "sympy.physics.quantum.qubit.measure_all"]], "measure_all_oneshot() (in module sympy.physics.quantum.qubit)": [[173, "sympy.physics.quantum.qubit.measure_all_oneshot"]], "measure_partial() (in module sympy.physics.quantum.qubit)": [[173, "sympy.physics.quantum.qubit.measure_partial"]], "measure_partial_oneshot() (in module sympy.physics.quantum.qubit)": [[173, "sympy.physics.quantum.qubit.measure_partial_oneshot"]], "qubit_to_matrix() (in module sympy.physics.quantum.qubit)": [[173, "sympy.physics.quantum.qubit.qubit_to_matrix"]], "sympy.physics.quantum.qubit": [[173, "module-sympy.physics.quantum.qubit"]], "enumerate_states() (in module sympy.physics.quantum.represent)": [[174, "sympy.physics.quantum.represent.enumerate_states"]], "get_basis() (in module sympy.physics.quantum.represent)": [[174, "sympy.physics.quantum.represent.get_basis"]], "integrate_result() (in module sympy.physics.quantum.represent)": [[174, "sympy.physics.quantum.represent.integrate_result"]], "rep_expectation() (in module sympy.physics.quantum.represent)": [[174, "sympy.physics.quantum.represent.rep_expectation"]], "rep_innerproduct() (in module sympy.physics.quantum.represent)": [[174, "sympy.physics.quantum.represent.rep_innerproduct"]], "represent() (in module sympy.physics.quantum.represent)": [[174, "sympy.physics.quantum.represent.represent"]], "sympy.physics.quantum.represent": [[174, "module-sympy.physics.quantum.represent"]], "cmod (class in sympy.physics.quantum.shor)": [[175, "sympy.physics.quantum.shor.CMod"]], "n (sympy.physics.quantum.shor.cmod property)": [[175, "sympy.physics.quantum.shor.CMod.N"]], "a (sympy.physics.quantum.shor.cmod property)": [[175, "sympy.physics.quantum.shor.CMod.a"]], "period_find() (in module sympy.physics.quantum.shor)": [[175, "sympy.physics.quantum.shor.period_find"]], "shor() (in module sympy.physics.quantum.shor)": [[175, "sympy.physics.quantum.shor.shor"]], "sympy.physics.quantum.shor": [[175, "module-sympy.physics.quantum.shor"]], "t (sympy.physics.quantum.shor.cmod property)": [[175, "sympy.physics.quantum.shor.CMod.t"]], "d() (sympy.physics.quantum.spin.rotation class method)": [[176, "sympy.physics.quantum.spin.Rotation.D"], [176, "sympy.physics.quantum.spin.Rotation.d"]], "j2op (class in sympy.physics.quantum.spin)": [[176, "sympy.physics.quantum.spin.J2Op"]], "jxbra (class in sympy.physics.quantum.spin)": [[176, "sympy.physics.quantum.spin.JxBra"]], "jxbracoupled (class in sympy.physics.quantum.spin)": [[176, "sympy.physics.quantum.spin.JxBraCoupled"]], "jxket (class in sympy.physics.quantum.spin)": [[176, "sympy.physics.quantum.spin.JxKet"]], "jxketcoupled (class in sympy.physics.quantum.spin)": [[176, "sympy.physics.quantum.spin.JxKetCoupled"]], "jybra (class in sympy.physics.quantum.spin)": [[176, "sympy.physics.quantum.spin.JyBra"]], "jybracoupled (class in sympy.physics.quantum.spin)": [[176, "sympy.physics.quantum.spin.JyBraCoupled"]], "jyket (class in sympy.physics.quantum.spin)": [[176, "sympy.physics.quantum.spin.JyKet"]], "jyketcoupled (class in sympy.physics.quantum.spin)": [[176, "sympy.physics.quantum.spin.JyKetCoupled"]], "jzbra (class in sympy.physics.quantum.spin)": [[176, "sympy.physics.quantum.spin.JzBra"]], "jzbracoupled (class in sympy.physics.quantum.spin)": [[176, "sympy.physics.quantum.spin.JzBraCoupled"]], "jzket (class in sympy.physics.quantum.spin)": [[176, "sympy.physics.quantum.spin.JzKet"]], "jzketcoupled (class in sympy.physics.quantum.spin)": [[176, "sympy.physics.quantum.spin.JzKetCoupled"]], "jzop (class in sympy.physics.quantum.spin)": [[176, "sympy.physics.quantum.spin.JzOp"]], "rotation (class in sympy.physics.quantum.spin)": [[176, "sympy.physics.quantum.spin.Rotation"]], "wignerd (class in sympy.physics.quantum.spin)": [[176, "sympy.physics.quantum.spin.WignerD"]], "couple() (in module sympy.physics.quantum.spin)": [[176, "sympy.physics.quantum.spin.couple"]], "sympy.physics.quantum.spin": [[176, "module-sympy.physics.quantum.spin"]], "uncouple() (in module sympy.physics.quantum.spin)": [[176, "sympy.physics.quantum.spin.uncouple"]], "bra (class in sympy.physics.quantum.state)": [[177, "sympy.physics.quantum.state.Bra"]], "brabase (class in sympy.physics.quantum.state)": [[177, "sympy.physics.quantum.state.BraBase"]], "ket (class in sympy.physics.quantum.state)": [[177, "sympy.physics.quantum.state.Ket"]], "ketbase (class in sympy.physics.quantum.state)": [[177, "sympy.physics.quantum.state.KetBase"]], "orthogonalbra (class in sympy.physics.quantum.state)": [[177, "sympy.physics.quantum.state.OrthogonalBra"]], "orthogonalket (class in sympy.physics.quantum.state)": [[177, "sympy.physics.quantum.state.OrthogonalKet"]], "orthogonalstate (class in sympy.physics.quantum.state)": [[177, "sympy.physics.quantum.state.OrthogonalState"]], "state (class in sympy.physics.quantum.state)": [[177, "sympy.physics.quantum.state.State"]], "statebase (class in sympy.physics.quantum.state)": [[177, "sympy.physics.quantum.state.StateBase"]], "timedepbra (class in sympy.physics.quantum.state)": [[177, "sympy.physics.quantum.state.TimeDepBra"]], "timedepket (class in sympy.physics.quantum.state)": [[177, "sympy.physics.quantum.state.TimeDepKet"]], "timedepstate (class in sympy.physics.quantum.state)": [[177, "sympy.physics.quantum.state.TimeDepState"]], "wavefunction (class in sympy.physics.quantum.state)": [[177, "sympy.physics.quantum.state.Wavefunction"]], "dual (sympy.physics.quantum.state.statebase property)": [[177, "sympy.physics.quantum.state.StateBase.dual"]], "dual_class() (sympy.physics.quantum.state.statebase class method)": [[177, "sympy.physics.quantum.state.StateBase.dual_class"]], "expr (sympy.physics.quantum.state.wavefunction property)": [[177, "sympy.physics.quantum.state.Wavefunction.expr"]], "is_commutative (sympy.physics.quantum.state.wavefunction property)": [[177, "sympy.physics.quantum.state.Wavefunction.is_commutative"]], "is_normalized (sympy.physics.quantum.state.wavefunction property)": [[177, "sympy.physics.quantum.state.Wavefunction.is_normalized"]], "label (sympy.physics.quantum.state.timedepstate property)": [[177, "sympy.physics.quantum.state.TimeDepState.label"]], "limits (sympy.physics.quantum.state.wavefunction property)": [[177, "sympy.physics.quantum.state.Wavefunction.limits"]], "norm (sympy.physics.quantum.state.wavefunction property)": [[177, "sympy.physics.quantum.state.Wavefunction.norm"]], "normalize() (sympy.physics.quantum.state.wavefunction method)": [[177, "sympy.physics.quantum.state.Wavefunction.normalize"]], "operators (sympy.physics.quantum.state.statebase property)": [[177, "sympy.physics.quantum.state.StateBase.operators"]], "prob() (sympy.physics.quantum.state.wavefunction method)": [[177, "sympy.physics.quantum.state.Wavefunction.prob"]], "sympy.physics.quantum.state": [[177, "module-sympy.physics.quantum.state"]], "time (sympy.physics.quantum.state.timedepstate property)": [[177, "sympy.physics.quantum.state.TimeDepState.time"]], "variables (sympy.physics.quantum.state.wavefunction property)": [[177, "sympy.physics.quantum.state.Wavefunction.variables"]], "tensorproduct (class in sympy.physics.quantum.tensorproduct)": [[178, "sympy.physics.quantum.tensorproduct.TensorProduct"]], "sympy.physics.quantum.tensorproduct": [[178, "module-sympy.physics.quantum.tensorproduct"]], "tensor_product_simp() (in module sympy.physics.quantum.tensorproduct)": [[178, "sympy.physics.quantum.tensorproduct.tensor_product_simp"]], "annihilateboson (class in sympy.physics.secondquant)": [[179, "sympy.physics.secondquant.AnnihilateBoson"]], "annihilatefermion (class in sympy.physics.secondquant)": [[179, "sympy.physics.secondquant.AnnihilateFermion"]], "antisymmetrictensor (class in sympy.physics.secondquant)": [[179, "sympy.physics.secondquant.AntiSymmetricTensor"]], "b (in module sympy.physics.secondquant)": [[179, "sympy.physics.secondquant.B"]], "bbra (in module sympy.physics.secondquant)": [[179, "sympy.physics.secondquant.BBra"]], "bket (in module sympy.physics.secondquant)": [[179, "sympy.physics.secondquant.BKet"]], "bd (in module sympy.physics.secondquant)": [[179, "sympy.physics.secondquant.Bd"]], "bosonicbasis (class in sympy.physics.secondquant)": [[179, "sympy.physics.secondquant.BosonicBasis"]], "commutator (class in sympy.physics.secondquant)": [[179, "sympy.physics.secondquant.Commutator"]], "createboson (class in sympy.physics.secondquant)": [[179, "sympy.physics.secondquant.CreateBoson"]], "createfermion (class in sympy.physics.secondquant)": [[179, "sympy.physics.secondquant.CreateFermion"]], "dagger (class in sympy.physics.secondquant)": [[179, "sympy.physics.secondquant.Dagger"]], "f (in module sympy.physics.secondquant)": [[179, "sympy.physics.secondquant.F"]], "fbra (in module sympy.physics.secondquant)": [[179, "sympy.physics.secondquant.FBra"]], "fket (in module sympy.physics.secondquant)": [[179, "sympy.physics.secondquant.FKet"]], "fd (in module sympy.physics.secondquant)": [[179, "sympy.physics.secondquant.Fd"]], "fixedbosonicbasis (class in sympy.physics.secondquant)": [[179, "sympy.physics.secondquant.FixedBosonicBasis"]], "fockstate (class in sympy.physics.secondquant)": [[179, "sympy.physics.secondquant.FockState"]], "fockstatebosonbra (class in sympy.physics.secondquant)": [[179, "sympy.physics.secondquant.FockStateBosonBra"]], "fockstatebosonket (class in sympy.physics.secondquant)": [[179, "sympy.physics.secondquant.FockStateBosonKet"]], "fockstatebra (class in sympy.physics.secondquant)": [[179, "sympy.physics.secondquant.FockStateBra"]], "fockstatefermionbra (class in sympy.physics.secondquant)": [[179, "sympy.physics.secondquant.FockStateFermionBra"]], "fockstatefermionket (class in sympy.physics.secondquant)": [[179, "sympy.physics.secondquant.FockStateFermionKet"]], "fockstateket (class in sympy.physics.secondquant)": [[179, "sympy.physics.secondquant.FockStateKet"]], "innerproduct (class in sympy.physics.secondquant)": [[179, "sympy.physics.secondquant.InnerProduct"]], "kroneckerdelta (class in sympy.physics.secondquant)": [[179, "sympy.physics.secondquant.KroneckerDelta"]], "no (class in sympy.physics.secondquant)": [[179, "sympy.physics.secondquant.NO"]], "permutationoperator (class in sympy.physics.secondquant)": [[179, "sympy.physics.secondquant.PermutationOperator"]], "varbosonicbasis (class in sympy.physics.secondquant)": [[179, "sympy.physics.secondquant.VarBosonicBasis"]], "apply_operator() (sympy.physics.secondquant.annihilateboson method)": [[179, "sympy.physics.secondquant.AnnihilateBoson.apply_operator"]], "apply_operator() (sympy.physics.secondquant.annihilatefermion method)": [[179, "sympy.physics.secondquant.AnnihilateFermion.apply_operator"]], "apply_operator() (sympy.physics.secondquant.createboson method)": [[179, "sympy.physics.secondquant.CreateBoson.apply_operator"]], "apply_operator() (sympy.physics.secondquant.createfermion method)": [[179, "sympy.physics.secondquant.CreateFermion.apply_operator"]], "apply_operators() (in module sympy.physics.secondquant)": [[179, "sympy.physics.secondquant.apply_operators"]], "bra (sympy.physics.secondquant.innerproduct property)": [[179, "sympy.physics.secondquant.InnerProduct.bra"]], "contraction() (in module sympy.physics.secondquant)": [[179, "sympy.physics.secondquant.contraction"]], "doit() (sympy.physics.secondquant.commutator method)": [[179, "sympy.physics.secondquant.Commutator.doit"]], "doit() (sympy.physics.secondquant.no method)": [[179, "sympy.physics.secondquant.NO.doit"]], "eval() (sympy.physics.secondquant.commutator class method)": [[179, "sympy.physics.secondquant.Commutator.eval"]], "eval() (sympy.physics.secondquant.dagger class method)": [[179, "sympy.physics.secondquant.Dagger.eval"]], "eval() (sympy.physics.secondquant.kroneckerdelta class method)": [[179, "sympy.physics.secondquant.KroneckerDelta.eval"]], "evaluate_deltas() (in module sympy.physics.secondquant)": [[179, "sympy.physics.secondquant.evaluate_deltas"]], "get_permuted() (sympy.physics.secondquant.permutationoperator method)": [[179, "sympy.physics.secondquant.PermutationOperator.get_permuted"]], "get_subno() (sympy.physics.secondquant.no method)": [[179, "sympy.physics.secondquant.NO.get_subNO"]], "has_q_annihilators (sympy.physics.secondquant.no property)": [[179, "sympy.physics.secondquant.NO.has_q_annihilators"]], "has_q_creators (sympy.physics.secondquant.no property)": [[179, "sympy.physics.secondquant.NO.has_q_creators"]], "index() (sympy.physics.secondquant.fixedbosonicbasis method)": [[179, "sympy.physics.secondquant.FixedBosonicBasis.index"]], "index() (sympy.physics.secondquant.varbosonicbasis method)": [[179, "sympy.physics.secondquant.VarBosonicBasis.index"]], "indices_contain_equal_information (sympy.physics.secondquant.kroneckerdelta property)": [[179, "sympy.physics.secondquant.KroneckerDelta.indices_contain_equal_information"]], "is_above_fermi (sympy.physics.secondquant.kroneckerdelta property)": [[179, "sympy.physics.secondquant.KroneckerDelta.is_above_fermi"]], "is_below_fermi (sympy.physics.secondquant.kroneckerdelta property)": [[179, "sympy.physics.secondquant.KroneckerDelta.is_below_fermi"]], "is_only_above_fermi (sympy.physics.secondquant.kroneckerdelta property)": [[179, "sympy.physics.secondquant.KroneckerDelta.is_only_above_fermi"]], "is_only_below_fermi (sympy.physics.secondquant.kroneckerdelta property)": [[179, "sympy.physics.secondquant.KroneckerDelta.is_only_below_fermi"]], "is_only_q_annihilator (sympy.physics.secondquant.annihilatefermion property)": [[179, "sympy.physics.secondquant.AnnihilateFermion.is_only_q_annihilator"]], "is_only_q_annihilator (sympy.physics.secondquant.createfermion property)": [[179, "sympy.physics.secondquant.CreateFermion.is_only_q_annihilator"]], "is_only_q_creator (sympy.physics.secondquant.annihilatefermion property)": [[179, "sympy.physics.secondquant.AnnihilateFermion.is_only_q_creator"]], "is_only_q_creator (sympy.physics.secondquant.createfermion property)": [[179, "sympy.physics.secondquant.CreateFermion.is_only_q_creator"]], "is_q_annihilator (sympy.physics.secondquant.annihilatefermion property)": [[179, "sympy.physics.secondquant.AnnihilateFermion.is_q_annihilator"]], "is_q_annihilator (sympy.physics.secondquant.createfermion property)": [[179, "sympy.physics.secondquant.CreateFermion.is_q_annihilator"]], "is_q_creator (sympy.physics.secondquant.annihilatefermion property)": [[179, "sympy.physics.secondquant.AnnihilateFermion.is_q_creator"]], "is_q_creator (sympy.physics.secondquant.createfermion property)": [[179, "sympy.physics.secondquant.CreateFermion.is_q_creator"]], "iter_q_annihilators() (sympy.physics.secondquant.no method)": [[179, "sympy.physics.secondquant.NO.iter_q_annihilators"]], "iter_q_creators() (sympy.physics.secondquant.no method)": [[179, "sympy.physics.secondquant.NO.iter_q_creators"]], "ket (sympy.physics.secondquant.innerproduct property)": [[179, "sympy.physics.secondquant.InnerProduct.ket"]], "killable_index (sympy.physics.secondquant.kroneckerdelta property)": [[179, "sympy.physics.secondquant.KroneckerDelta.killable_index"]], "lower (sympy.physics.secondquant.antisymmetrictensor property)": [[179, "sympy.physics.secondquant.AntiSymmetricTensor.lower"]], "matrix_rep() (in module sympy.physics.secondquant)": [[179, "sympy.physics.secondquant.matrix_rep"]], "preferred_index (sympy.physics.secondquant.kroneckerdelta property)": [[179, "sympy.physics.secondquant.KroneckerDelta.preferred_index"]], "simplify_index_permutations() (in module sympy.physics.secondquant)": [[179, "sympy.physics.secondquant.simplify_index_permutations"]], "state() (sympy.physics.secondquant.fixedbosonicbasis method)": [[179, "sympy.physics.secondquant.FixedBosonicBasis.state"]], "state() (sympy.physics.secondquant.varbosonicbasis method)": [[179, "sympy.physics.secondquant.VarBosonicBasis.state"]], "substitute_dummies() (in module sympy.physics.secondquant)": [[179, "sympy.physics.secondquant.substitute_dummies"]], "symbol (sympy.physics.secondquant.antisymmetrictensor property)": [[179, "sympy.physics.secondquant.AntiSymmetricTensor.symbol"]], "sympy.physics.secondquant": [[179, "module-sympy.physics.secondquant"]], "upper (sympy.physics.secondquant.antisymmetrictensor property)": [[179, "sympy.physics.secondquant.AntiSymmetricTensor.upper"]], "wicks() (in module sympy.physics.secondquant)": [[179, "sympy.physics.secondquant.wicks"]], "e_nl() (in module sympy.physics.sho)": [[180, "sympy.physics.sho.E_nl"]], "r_nl() (in module sympy.physics.sho)": [[180, "sympy.physics.sho.R_nl"]], "sympy.physics.sho": [[180, "module-sympy.physics.sho"]], "dimension (class in sympy.physics.units.dimensions)": [[181, "sympy.physics.units.dimensions.Dimension"]], "dimensionsystem (class in sympy.physics.units.dimensions)": [[181, "sympy.physics.units.dimensions.DimensionSystem"]], "can_transf_matrix (sympy.physics.units.dimensions.dimensionsystem property)": [[181, "sympy.physics.units.dimensions.DimensionSystem.can_transf_matrix"]], "dim (sympy.physics.units.dimensions.dimensionsystem property)": [[181, "sympy.physics.units.dimensions.DimensionSystem.dim"]], "dim_can_vector() (sympy.physics.units.dimensions.dimensionsystem method)": [[181, "sympy.physics.units.dimensions.DimensionSystem.dim_can_vector"]], "dim_vector() (sympy.physics.units.dimensions.dimensionsystem method)": [[181, "sympy.physics.units.dimensions.DimensionSystem.dim_vector"]], "has_integer_powers() (sympy.physics.units.dimensions.dimension method)": [[181, "sympy.physics.units.dimensions.Dimension.has_integer_powers"]], "inv_can_transf_matrix (sympy.physics.units.dimensions.dimensionsystem property)": [[181, "sympy.physics.units.dimensions.DimensionSystem.inv_can_transf_matrix"]], "is_consistent (sympy.physics.units.dimensions.dimensionsystem property)": [[181, "sympy.physics.units.dimensions.DimensionSystem.is_consistent"]], "is_dimensionless() (sympy.physics.units.dimensions.dimensionsystem method)": [[181, "sympy.physics.units.dimensions.DimensionSystem.is_dimensionless"]], "list_can_dims (sympy.physics.units.dimensions.dimensionsystem property)": [[181, "sympy.physics.units.dimensions.DimensionSystem.list_can_dims"]], "print_dim_base() (sympy.physics.units.dimensions.dimensionsystem method)": [[181, "sympy.physics.units.dimensions.DimensionSystem.print_dim_base"]], "sympy.physics.units.dimensions": [[181, "module-sympy.physics.units.dimensions"]], "prefix (class in sympy.physics.units.prefixes)": [[185, "sympy.physics.units.prefixes.Prefix"]], "sympy.physics.units.prefixes": [[185, "module-sympy.physics.units.prefixes"]], "quantity (class in sympy.physics.units.quantities)": [[186, "sympy.physics.units.quantities.Quantity"]], "abbrev (sympy.physics.units.quantities.quantity property)": [[186, "sympy.physics.units.quantities.Quantity.abbrev"]], "convert_to() (in module sympy.physics.units.util)": [[186, "sympy.physics.units.util.convert_to"]], "convert_to() (sympy.physics.units.quantities.quantity method)": [[186, "sympy.physics.units.quantities.Quantity.convert_to"]], "free_symbols (sympy.physics.units.quantities.quantity property)": [[186, "sympy.physics.units.quantities.Quantity.free_symbols"]], "is_prefixed (sympy.physics.units.quantities.quantity property)": [[186, "sympy.physics.units.quantities.Quantity.is_prefixed"]], "scale_factor (sympy.physics.units.quantities.quantity property)": [[186, "sympy.physics.units.quantities.Quantity.scale_factor"]], "set_global_relative_scale_factor() (sympy.physics.units.quantities.quantity method)": [[186, "sympy.physics.units.quantities.Quantity.set_global_relative_scale_factor"]], "sympy.physics.units.quantities": [[186, "module-sympy.physics.units.quantities"]], "sympy.physics.units.util": [[186, "module-sympy.physics.units.util"]], "unitsystem (class in sympy.physics.units.unitsystem)": [[187, "sympy.physics.units.unitsystem.UnitSystem"]], "dim (sympy.physics.units.unitsystem.unitsystem property)": [[187, "sympy.physics.units.unitsystem.UnitSystem.dim"]], "extend() (sympy.physics.units.unitsystem.unitsystem method)": [[187, "sympy.physics.units.unitsystem.UnitSystem.extend"]], "get_units_non_prefixed() (sympy.physics.units.unitsystem.unitsystem method)": [[187, "sympy.physics.units.unitsystem.UnitSystem.get_units_non_prefixed"]], "is_consistent (sympy.physics.units.unitsystem.unitsystem property)": [[187, "sympy.physics.units.unitsystem.UnitSystem.is_consistent"]], "sympy.physics.units.unitsystem": [[187, "module-sympy.physics.units.unitsystem"]], "coordinatesym (class in sympy.physics.vector.frame)": [[189, "sympy.physics.vector.frame.CoordinateSym"]], "dyadic (class in sympy.physics.vector.dyadic)": [[189, "sympy.physics.vector.dyadic.Dyadic"]], "referenceframe (class in sympy.physics.vector.frame)": [[189, "sympy.physics.vector.frame.ReferenceFrame"]], "vector (class in sympy.physics.vector.vector)": [[189, "sympy.physics.vector.vector.Vector"]], "ang_acc_in() (sympy.physics.vector.frame.referenceframe method)": [[189, "sympy.physics.vector.frame.ReferenceFrame.ang_acc_in"]], "ang_vel_in() (sympy.physics.vector.frame.referenceframe method)": [[189, "sympy.physics.vector.frame.ReferenceFrame.ang_vel_in"]], "angle_between() (sympy.physics.vector.vector.vector method)": [[189, "sympy.physics.vector.vector.Vector.angle_between"]], "applyfunc() (sympy.physics.vector.dyadic.dyadic method)": [[189, "sympy.physics.vector.dyadic.Dyadic.applyfunc"]], "applyfunc() (sympy.physics.vector.vector.vector method)": [[189, "sympy.physics.vector.vector.Vector.applyfunc"]], "cross() (sympy.physics.vector.dyadic.dyadic method)": [[189, "sympy.physics.vector.dyadic.Dyadic.cross"]], "cross() (sympy.physics.vector.vector.vector method)": [[189, "sympy.physics.vector.vector.Vector.cross"]], "dcm() (sympy.physics.vector.frame.referenceframe method)": [[189, "sympy.physics.vector.frame.ReferenceFrame.dcm"]], "diff() (sympy.physics.vector.vector.vector method)": [[189, "sympy.physics.vector.vector.Vector.diff"]], "doit() (sympy.physics.vector.dyadic.dyadic method)": [[189, "sympy.physics.vector.dyadic.Dyadic.doit"]], "doit() (sympy.physics.vector.vector.vector method)": [[189, "sympy.physics.vector.vector.Vector.doit"]], "dot() (sympy.physics.vector.dyadic.dyadic method)": [[189, "sympy.physics.vector.dyadic.Dyadic.dot"]], "dot() (sympy.physics.vector.vector.vector method)": [[189, "sympy.physics.vector.vector.Vector.dot"]], "dt() (sympy.physics.vector.dyadic.dyadic method)": [[189, "sympy.physics.vector.dyadic.Dyadic.dt"]], "dt() (sympy.physics.vector.vector.vector method)": [[189, "sympy.physics.vector.vector.Vector.dt"]], "express() (sympy.physics.vector.dyadic.dyadic method)": [[189, "sympy.physics.vector.dyadic.Dyadic.express"]], "express() (sympy.physics.vector.vector.vector method)": [[189, "sympy.physics.vector.vector.Vector.express"]], "free_dynamicsymbols() (sympy.physics.vector.vector.vector method)": [[189, "sympy.physics.vector.vector.Vector.free_dynamicsymbols"]], "free_symbols() (sympy.physics.vector.vector.vector method)": [[189, "sympy.physics.vector.vector.Vector.free_symbols"]], "func (sympy.physics.vector.dyadic.dyadic property)": [[189, "sympy.physics.vector.dyadic.Dyadic.func"]], "func (sympy.physics.vector.vector.vector property)": [[189, "sympy.physics.vector.vector.Vector.func"]], "magnitude() (sympy.physics.vector.vector.vector method)": [[189, "sympy.physics.vector.vector.Vector.magnitude"]], "normalize() (sympy.physics.vector.vector.vector method)": [[189, "sympy.physics.vector.vector.Vector.normalize"]], "orient() (sympy.physics.vector.frame.referenceframe method)": [[189, "sympy.physics.vector.frame.ReferenceFrame.orient"]], "orient_axis() (sympy.physics.vector.frame.referenceframe method)": [[189, "sympy.physics.vector.frame.ReferenceFrame.orient_axis"]], "orient_body_fixed() (sympy.physics.vector.frame.referenceframe method)": [[189, "sympy.physics.vector.frame.ReferenceFrame.orient_body_fixed"]], "orient_explicit() (sympy.physics.vector.frame.referenceframe method)": [[189, "sympy.physics.vector.frame.ReferenceFrame.orient_explicit"]], "orient_quaternion() (sympy.physics.vector.frame.referenceframe method)": [[189, "sympy.physics.vector.frame.ReferenceFrame.orient_quaternion"]], "orient_space_fixed() (sympy.physics.vector.frame.referenceframe method)": [[189, "sympy.physics.vector.frame.ReferenceFrame.orient_space_fixed"]], "orientnew() (sympy.physics.vector.frame.referenceframe method)": [[189, "sympy.physics.vector.frame.ReferenceFrame.orientnew"]], "outer() (sympy.physics.vector.vector.vector method)": [[189, "sympy.physics.vector.vector.Vector.outer"]], "partial_velocity() (sympy.physics.vector.frame.referenceframe method)": [[189, "sympy.physics.vector.frame.ReferenceFrame.partial_velocity"]], "separate() (sympy.physics.vector.vector.vector method)": [[189, "sympy.physics.vector.vector.Vector.separate"]], "set_ang_acc() (sympy.physics.vector.frame.referenceframe method)": [[189, "sympy.physics.vector.frame.ReferenceFrame.set_ang_acc"]], "set_ang_vel() (sympy.physics.vector.frame.referenceframe method)": [[189, "sympy.physics.vector.frame.ReferenceFrame.set_ang_vel"]], "simplify() (sympy.physics.vector.dyadic.dyadic method)": [[189, "sympy.physics.vector.dyadic.Dyadic.simplify"]], "simplify() (sympy.physics.vector.vector.vector method)": [[189, "sympy.physics.vector.vector.Vector.simplify"]], "subs() (sympy.physics.vector.dyadic.dyadic method)": [[189, "sympy.physics.vector.dyadic.Dyadic.subs"]], "subs() (sympy.physics.vector.vector.vector method)": [[189, "sympy.physics.vector.vector.Vector.subs"]], "to_matrix() (sympy.physics.vector.dyadic.dyadic method)": [[189, "sympy.physics.vector.dyadic.Dyadic.to_matrix"]], "to_matrix() (sympy.physics.vector.vector.vector method)": [[189, "sympy.physics.vector.vector.Vector.to_matrix"]], "u (sympy.physics.vector.frame.referenceframe property)": [[189, "sympy.physics.vector.frame.ReferenceFrame.u"]], "variable_map() (sympy.physics.vector.frame.referenceframe method)": [[189, "sympy.physics.vector.frame.ReferenceFrame.variable_map"]], "x (sympy.physics.vector.frame.referenceframe property)": [[189, "sympy.physics.vector.frame.ReferenceFrame.x"]], "xreplace() (sympy.physics.vector.dyadic.dyadic method)": [[189, "sympy.physics.vector.dyadic.Dyadic.xreplace"]], "xreplace() (sympy.physics.vector.vector.vector method)": [[189, "sympy.physics.vector.vector.Vector.xreplace"]], "xx (sympy.physics.vector.frame.referenceframe property)": [[189, "sympy.physics.vector.frame.ReferenceFrame.xx"]], "xy (sympy.physics.vector.frame.referenceframe property)": [[189, "sympy.physics.vector.frame.ReferenceFrame.xy"]], "xz (sympy.physics.vector.frame.referenceframe property)": [[189, "sympy.physics.vector.frame.ReferenceFrame.xz"]], "y (sympy.physics.vector.frame.referenceframe property)": [[189, "sympy.physics.vector.frame.ReferenceFrame.y"]], "yx (sympy.physics.vector.frame.referenceframe property)": [[189, "sympy.physics.vector.frame.ReferenceFrame.yx"]], "yy (sympy.physics.vector.frame.referenceframe property)": [[189, "sympy.physics.vector.frame.ReferenceFrame.yy"]], "yz (sympy.physics.vector.frame.referenceframe property)": [[189, "sympy.physics.vector.frame.ReferenceFrame.yz"]], "z (sympy.physics.vector.frame.referenceframe property)": [[189, "sympy.physics.vector.frame.ReferenceFrame.z"]], "zx (sympy.physics.vector.frame.referenceframe property)": [[189, "sympy.physics.vector.frame.ReferenceFrame.zx"]], "zy (sympy.physics.vector.frame.referenceframe property)": [[189, "sympy.physics.vector.frame.ReferenceFrame.zy"]], "zz (sympy.physics.vector.frame.referenceframe property)": [[189, "sympy.physics.vector.frame.ReferenceFrame.zz"]], "curl() (in module sympy.physics.vector.fieldfunctions)": [[190, "sympy.physics.vector.fieldfunctions.curl"]], "divergence() (in module sympy.physics.vector.fieldfunctions)": [[190, "sympy.physics.vector.fieldfunctions.divergence"]], "gradient() (in module sympy.physics.vector.fieldfunctions)": [[190, "sympy.physics.vector.fieldfunctions.gradient"]], "is_conservative() (in module sympy.physics.vector.fieldfunctions)": [[190, "sympy.physics.vector.fieldfunctions.is_conservative"]], "is_solenoidal() (in module sympy.physics.vector.fieldfunctions)": [[190, "sympy.physics.vector.fieldfunctions.is_solenoidal"]], "scalar_potential() (in module sympy.physics.vector.fieldfunctions)": [[190, "sympy.physics.vector.fieldfunctions.scalar_potential"]], "scalar_potential_difference() (in module sympy.physics.vector.fieldfunctions)": [[190, "sympy.physics.vector.fieldfunctions.scalar_potential_difference"]], "cross() (in module sympy.physics.vector.functions)": [[191, "sympy.physics.vector.functions.cross"]], "dot() (in module sympy.physics.vector.functions)": [[191, "sympy.physics.vector.functions.dot"]], "dynamicsymbols() (in module sympy.physics.vector)": [[191, "sympy.physics.vector.dynamicsymbols"]], "express() (in module sympy.physics.vector.functions)": [[191, "sympy.physics.vector.functions.express"]], "outer() (in module sympy.physics.vector.functions)": [[191, "sympy.physics.vector.functions.outer"]], "time_derivative() (in module sympy.physics.vector.functions)": [[191, "sympy.physics.vector.functions.time_derivative"]], "point (class in sympy.physics.vector.point)": [[193, "sympy.physics.vector.point.Point"]], "a1pt_theory() (sympy.physics.vector.point.point method)": [[193, "sympy.physics.vector.point.Point.a1pt_theory"]], "a2pt_theory() (sympy.physics.vector.point.point method)": [[193, "sympy.physics.vector.point.Point.a2pt_theory"]], "acc() (sympy.physics.vector.point.point method)": [[193, "sympy.physics.vector.point.Point.acc"]], "get_motion_params() (in module sympy.physics.vector.functions)": [[193, "sympy.physics.vector.functions.get_motion_params"]], "kinematic_equations() (in module sympy.physics.vector.functions)": [[193, "sympy.physics.vector.functions.kinematic_equations"]], "locatenew() (sympy.physics.vector.point.point method)": [[193, "sympy.physics.vector.point.Point.locatenew"]], "partial_velocity() (in module sympy.physics.vector.functions)": [[193, "sympy.physics.vector.functions.partial_velocity"]], "partial_velocity() (sympy.physics.vector.point.point method)": [[193, "sympy.physics.vector.point.Point.partial_velocity"]], "pos_from() (sympy.physics.vector.point.point method)": [[193, "sympy.physics.vector.point.Point.pos_from"]], "set_acc() (sympy.physics.vector.point.point method)": [[193, "sympy.physics.vector.point.Point.set_acc"]], "set_pos() (sympy.physics.vector.point.point method)": [[193, "sympy.physics.vector.point.Point.set_pos"]], "set_vel() (sympy.physics.vector.point.point method)": [[193, "sympy.physics.vector.point.Point.set_vel"]], "sympy.physics.vector.functions": [[193, "module-sympy.physics.vector.functions"]], "sympy.physics.vector.point": [[193, "module-sympy.physics.vector.point"]], "v1pt_theory() (sympy.physics.vector.point.point method)": [[193, "sympy.physics.vector.point.Point.v1pt_theory"]], "v2pt_theory() (sympy.physics.vector.point.point method)": [[193, "sympy.physics.vector.point.Point.v2pt_theory"]], "vel() (sympy.physics.vector.point.point method)": [[193, "sympy.physics.vector.point.Point.vel"]], "init_vprinting() (in module sympy.physics.vector.printing)": [[194, "sympy.physics.vector.printing.init_vprinting"]], "vlatex() (in module sympy.physics.vector.printing)": [[194, "sympy.physics.vector.printing.vlatex"]], "vpprint() (in module sympy.physics.vector.printing)": [[194, "sympy.physics.vector.printing.vpprint"]], "vprint() (in module sympy.physics.vector.printing)": [[194, "sympy.physics.vector.printing.vprint"]], "sympy.physics.vector": [[196, "module-sympy.physics.vector"]], "clebsch_gordan() (in module sympy.physics.wigner)": [[199, "sympy.physics.wigner.clebsch_gordan"]], "dot_rot_grad_ynm() (in module sympy.physics.wigner)": [[199, "sympy.physics.wigner.dot_rot_grad_Ynm"]], "gaunt() (in module sympy.physics.wigner)": [[199, "sympy.physics.wigner.gaunt"]], "racah() (in module sympy.physics.wigner)": [[199, "sympy.physics.wigner.racah"]], "real_gaunt() (in module sympy.physics.wigner)": [[199, "sympy.physics.wigner.real_gaunt"]], "sympy.physics.wigner": [[199, "module-sympy.physics.wigner"]], "wigner_3j() (in module sympy.physics.wigner)": [[199, "sympy.physics.wigner.wigner_3j"]], "wigner_6j() (in module sympy.physics.wigner)": [[199, "sympy.physics.wigner.wigner_6j"]], "wigner_9j() (in module sympy.physics.wigner)": [[199, "sympy.physics.wigner.wigner_9j"]], "wigner_d() (in module sympy.physics.wigner)": [[199, "sympy.physics.wigner.wigner_d"]], "wigner_d_small() (in module sympy.physics.wigner)": [[199, "sympy.physics.wigner.wigner_d_small"]], "basebackend (class in sympy.plotting.plot)": [[200, "sympy.plotting.plot.BaseBackend"]], "baseseries (class in sympy.plotting.plot)": [[200, "sympy.plotting.plot.BaseSeries"]], "implicitseries (class in sympy.plotting.plot_implicit)": [[200, "sympy.plotting.plot_implicit.ImplicitSeries"]], "line2dbaseseries (class in sympy.plotting.plot)": [[200, "sympy.plotting.plot.Line2DBaseSeries"]], "line3dbaseseries (class in sympy.plotting.plot)": [[200, "sympy.plotting.plot.Line3DBaseSeries"]], "lineover1drangeseries (class in sympy.plotting.plot)": [[200, "sympy.plotting.plot.LineOver1DRangeSeries"]], "matplotlibbackend (class in sympy.plotting.plot)": [[200, "sympy.plotting.plot.MatplotlibBackend"]], "parametric2dlineseries (class in sympy.plotting.plot)": [[200, "sympy.plotting.plot.Parametric2DLineSeries"]], "parametric3dlineseries (class in sympy.plotting.plot)": [[200, "sympy.plotting.plot.Parametric3DLineSeries"]], "parametricsurfaceseries (class in sympy.plotting.plot)": [[200, "sympy.plotting.plot.ParametricSurfaceSeries"]], "plot (class in sympy.plotting.plot)": [[200, "sympy.plotting.plot.Plot"]], "plotgrid (class in sympy.plotting.plot)": [[200, "sympy.plotting.plot.PlotGrid"]], "surfacebaseseries (class in sympy.plotting.plot)": [[200, "sympy.plotting.plot.SurfaceBaseSeries"]], "surfaceover2drangeseries (class in sympy.plotting.plot)": [[200, "sympy.plotting.plot.SurfaceOver2DRangeSeries"]], "textbackend (class in sympy.plotting.plot)": [[200, "sympy.plotting.plot.TextBackend"]], "append() (sympy.plotting.plot.plot method)": [[200, "sympy.plotting.plot.Plot.append"]], "extend() (sympy.plotting.plot.plot method)": [[200, "sympy.plotting.plot.Plot.extend"]], "get_data() (sympy.plotting.plot.line2dbaseseries method)": [[200, "sympy.plotting.plot.Line2DBaseSeries.get_data"]], "get_points() (sympy.plotting.plot.lineover1drangeseries method)": [[200, "sympy.plotting.plot.LineOver1DRangeSeries.get_points"]], "get_points() (sympy.plotting.plot.parametric2dlineseries method)": [[200, "sympy.plotting.plot.Parametric2DLineSeries.get_points"]], "get_segments() (sympy.plotting.plot.matplotlibbackend static method)": [[200, "sympy.plotting.plot.MatplotlibBackend.get_segments"]], "plot() (in module sympy.plotting.plot)": [[200, "sympy.plotting.plot.plot"]], "plot3d() (in module sympy.plotting.plot)": [[200, "sympy.plotting.plot.plot3d"]], "plot3d_parametric_line() (in module sympy.plotting.plot)": [[200, "sympy.plotting.plot.plot3d_parametric_line"]], "plot3d_parametric_surface() (in module sympy.plotting.plot)": [[200, "sympy.plotting.plot.plot3d_parametric_surface"]], "plot_implicit() (in module sympy.plotting.plot_implicit)": [[200, "sympy.plotting.plot_implicit.plot_implicit"]], "plot_parametric() (in module sympy.plotting.plot)": [[200, "sympy.plotting.plot.plot_parametric"]], "process_series() (sympy.plotting.plot.matplotlibbackend method)": [[200, "sympy.plotting.plot.MatplotlibBackend.process_series"]], "sympy.plotting.plot": [[200, "module-sympy.plotting.plot"]], "sympy.plotting.pygletplot": [[200, "module-sympy.plotting.pygletplot"]], "textplot() (in module sympy.plotting.textplot)": [[200, "sympy.plotting.textplot.textplot"]], "extensionelement (class in sympy.polys.agca.extensions)": [[201, "sympy.polys.agca.extensions.ExtensionElement"]], "freemodule (class in sympy.polys.agca.modules)": [[201, "sympy.polys.agca.modules.FreeModule"]], "freemoduleelement (class in sympy.polys.agca.modules)": [[201, "sympy.polys.agca.modules.FreeModuleElement"]], "ideal (class in sympy.polys.agca.ideals)": [[201, "sympy.polys.agca.ideals.Ideal"]], "module (class in sympy.polys.agca.modules)": [[201, "sympy.polys.agca.modules.Module"]], "modulehomomorphism (class in sympy.polys.agca.homomorphisms)": [[201, "sympy.polys.agca.homomorphisms.ModuleHomomorphism"]], "monogenicfiniteextension (class in sympy.polys.agca.extensions)": [[201, "sympy.polys.agca.extensions.MonogenicFiniteExtension"]], "quotientmodule (class in sympy.polys.agca.modules)": [[201, "sympy.polys.agca.modules.QuotientModule"]], "quotientmoduleelement (class in sympy.polys.agca.modules)": [[201, "sympy.polys.agca.modules.QuotientModuleElement"]], "submodule (class in sympy.polys.agca.modules)": [[201, "sympy.polys.agca.modules.SubModule"]], "subquotientmodule (class in sympy.polys.agca.modules)": [[201, "sympy.polys.agca.modules.SubQuotientModule"]], "basis() (sympy.polys.agca.modules.freemodule method)": [[201, "sympy.polys.agca.modules.FreeModule.basis"]], "contains() (sympy.polys.agca.ideals.ideal method)": [[201, "sympy.polys.agca.ideals.Ideal.contains"]], "contains() (sympy.polys.agca.modules.module method)": [[201, "sympy.polys.agca.modules.Module.contains"]], "convert() (sympy.polys.agca.modules.freemodule method)": [[201, "sympy.polys.agca.modules.FreeModule.convert"]], "convert() (sympy.polys.agca.modules.module method)": [[201, "sympy.polys.agca.modules.Module.convert"]], "convert() (sympy.polys.agca.modules.quotientmodule method)": [[201, "sympy.polys.agca.modules.QuotientModule.convert"]], "convert() (sympy.polys.agca.modules.submodule method)": [[201, "sympy.polys.agca.modules.SubModule.convert"]], "depth() (sympy.polys.agca.ideals.ideal method)": [[201, "sympy.polys.agca.ideals.Ideal.depth"]], "dtype (sympy.polys.agca.extensions.monogenicfiniteextension attribute)": [[201, "sympy.polys.agca.extensions.MonogenicFiniteExtension.dtype"]], "dtype (sympy.polys.agca.modules.freemodule attribute)": [[201, "sympy.polys.agca.modules.FreeModule.dtype"]], "dtype (sympy.polys.agca.modules.quotientmodule attribute)": [[201, "sympy.polys.agca.modules.QuotientModule.dtype"]], "eq() (sympy.polys.agca.modules.quotientmoduleelement method)": [[201, "sympy.polys.agca.modules.QuotientModuleElement.eq"]], "height() (sympy.polys.agca.ideals.ideal method)": [[201, "sympy.polys.agca.ideals.Ideal.height"]], "homomorphism() (in module sympy.polys.agca.homomorphisms)": [[201, "sympy.polys.agca.homomorphisms.homomorphism"]], "identity_hom() (sympy.polys.agca.modules.freemodule method)": [[201, "sympy.polys.agca.modules.FreeModule.identity_hom"]], "identity_hom() (sympy.polys.agca.modules.module method)": [[201, "sympy.polys.agca.modules.Module.identity_hom"]], "identity_hom() (sympy.polys.agca.modules.quotientmodule method)": [[201, "sympy.polys.agca.modules.QuotientModule.identity_hom"]], "identity_hom() (sympy.polys.agca.modules.submodule method)": [[201, "sympy.polys.agca.modules.SubModule.identity_hom"]], "image() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[201, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.image"]], "in_terms_of_generators() (sympy.polys.agca.modules.submodule method)": [[201, "sympy.polys.agca.modules.SubModule.in_terms_of_generators"]], "inclusion_hom() (sympy.polys.agca.modules.submodule method)": [[201, "sympy.polys.agca.modules.SubModule.inclusion_hom"]], "intersect() (sympy.polys.agca.ideals.ideal method)": [[201, "sympy.polys.agca.ideals.Ideal.intersect"]], "intersect() (sympy.polys.agca.modules.submodule method)": [[201, "sympy.polys.agca.modules.SubModule.intersect"]], "inverse() (sympy.polys.agca.extensions.extensionelement method)": [[201, "sympy.polys.agca.extensions.ExtensionElement.inverse"]], "is_full_module() (sympy.polys.agca.modules.submodule method)": [[201, "sympy.polys.agca.modules.SubModule.is_full_module"]], "is_full_module() (sympy.polys.agca.modules.subquotientmodule method)": [[201, "sympy.polys.agca.modules.SubQuotientModule.is_full_module"]], "is_injective() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[201, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.is_injective"]], "is_isomorphism() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[201, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.is_isomorphism"]], "is_maximal() (sympy.polys.agca.ideals.ideal method)": [[201, "sympy.polys.agca.ideals.Ideal.is_maximal"]], "is_primary() (sympy.polys.agca.ideals.ideal method)": [[201, "sympy.polys.agca.ideals.Ideal.is_primary"]], "is_prime() (sympy.polys.agca.ideals.ideal method)": [[201, "sympy.polys.agca.ideals.Ideal.is_prime"]], "is_principal() (sympy.polys.agca.ideals.ideal method)": [[201, "sympy.polys.agca.ideals.Ideal.is_principal"]], "is_radical() (sympy.polys.agca.ideals.ideal method)": [[201, "sympy.polys.agca.ideals.Ideal.is_radical"]], "is_submodule() (sympy.polys.agca.modules.freemodule method)": [[201, "sympy.polys.agca.modules.FreeModule.is_submodule"]], "is_submodule() (sympy.polys.agca.modules.module method)": [[201, "sympy.polys.agca.modules.Module.is_submodule"]], "is_submodule() (sympy.polys.agca.modules.quotientmodule method)": [[201, "sympy.polys.agca.modules.QuotientModule.is_submodule"]], "is_submodule() (sympy.polys.agca.modules.submodule method)": [[201, "sympy.polys.agca.modules.SubModule.is_submodule"]], "is_surjective() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[201, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.is_surjective"]], "is_whole_ring() (sympy.polys.agca.ideals.ideal method)": [[201, "sympy.polys.agca.ideals.Ideal.is_whole_ring"]], "is_zero() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[201, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.is_zero"]], "is_zero() (sympy.polys.agca.ideals.ideal method)": [[201, "sympy.polys.agca.ideals.Ideal.is_zero"]], "is_zero() (sympy.polys.agca.modules.freemodule method)": [[201, "sympy.polys.agca.modules.FreeModule.is_zero"]], "is_zero() (sympy.polys.agca.modules.module method)": [[201, "sympy.polys.agca.modules.Module.is_zero"]], "is_zero() (sympy.polys.agca.modules.quotientmodule method)": [[201, "sympy.polys.agca.modules.QuotientModule.is_zero"]], "is_zero() (sympy.polys.agca.modules.submodule method)": [[201, "sympy.polys.agca.modules.SubModule.is_zero"]], "kernel() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[201, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.kernel"]], "module_quotient() (sympy.polys.agca.modules.submodule method)": [[201, "sympy.polys.agca.modules.SubModule.module_quotient"]], "multiply_ideal() (sympy.polys.agca.modules.freemodule method)": [[201, "sympy.polys.agca.modules.FreeModule.multiply_ideal"]], "multiply_ideal() (sympy.polys.agca.modules.module method)": [[201, "sympy.polys.agca.modules.Module.multiply_ideal"]], "multiply_ideal() (sympy.polys.agca.modules.submodule method)": [[201, "sympy.polys.agca.modules.SubModule.multiply_ideal"]], "product() (sympy.polys.agca.ideals.ideal method)": [[201, "sympy.polys.agca.ideals.Ideal.product"]], "quotient() (sympy.polys.agca.ideals.ideal method)": [[201, "sympy.polys.agca.ideals.Ideal.quotient"]], "quotient_codomain() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[201, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.quotient_codomain"]], "quotient_domain() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[201, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.quotient_domain"]], "quotient_hom() (sympy.polys.agca.modules.quotientmodule method)": [[201, "sympy.polys.agca.modules.QuotientModule.quotient_hom"]], "quotient_hom() (sympy.polys.agca.modules.subquotientmodule method)": [[201, "sympy.polys.agca.modules.SubQuotientModule.quotient_hom"]], "quotient_module() (sympy.polys.agca.modules.freemodule method)": [[201, "sympy.polys.agca.modules.FreeModule.quotient_module"]], "quotient_module() (sympy.polys.agca.modules.module method)": [[201, "sympy.polys.agca.modules.Module.quotient_module"]], "quotient_module() (sympy.polys.agca.modules.submodule method)": [[201, "sympy.polys.agca.modules.SubModule.quotient_module"]], "radical() (sympy.polys.agca.ideals.ideal method)": [[201, "sympy.polys.agca.ideals.Ideal.radical"]], "reduce_element() (sympy.polys.agca.ideals.ideal method)": [[201, "sympy.polys.agca.ideals.Ideal.reduce_element"]], "reduce_element() (sympy.polys.agca.modules.submodule method)": [[201, "sympy.polys.agca.modules.SubModule.reduce_element"]], "restrict_codomain() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[201, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.restrict_codomain"]], "restrict_domain() (sympy.polys.agca.homomorphisms.modulehomomorphism method)": [[201, "sympy.polys.agca.homomorphisms.ModuleHomomorphism.restrict_domain"]], "saturate() (sympy.polys.agca.ideals.ideal method)": [[201, "sympy.polys.agca.ideals.Ideal.saturate"]], "submodule() (sympy.polys.agca.modules.module method)": [[201, "sympy.polys.agca.modules.Module.submodule"]], "submodule() (sympy.polys.agca.modules.quotientmodule method)": [[201, "sympy.polys.agca.modules.QuotientModule.submodule"]], "submodule() (sympy.polys.agca.modules.submodule method)": [[201, "sympy.polys.agca.modules.SubModule.submodule"]], "subset() (sympy.polys.agca.ideals.ideal method)": [[201, "sympy.polys.agca.ideals.Ideal.subset"]], "subset() (sympy.polys.agca.modules.module method)": [[201, "sympy.polys.agca.modules.Module.subset"]], "syzygy_module() (sympy.polys.agca.modules.submodule method)": [[201, "sympy.polys.agca.modules.SubModule.syzygy_module"]], "union() (sympy.polys.agca.ideals.ideal method)": [[201, "sympy.polys.agca.ideals.Ideal.union"]], "union() (sympy.polys.agca.modules.submodule method)": [[201, "sympy.polys.agca.modules.SubModule.union"]], "ddm (class in sympy.polys.matrices.ddm)": [[203, "sympy.polys.matrices.ddm.DDM"]], "domainmatrix (class in sympy.polys.matrices.domainmatrix)": [[203, "sympy.polys.matrices.domainmatrix.DomainMatrix"]], "sdm (class in sympy.polys.matrices.sdm)": [[203, "sympy.polys.matrices.sdm.SDM"]], "add() (sympy.polys.matrices.ddm.ddm method)": [[203, "sympy.polys.matrices.ddm.DDM.add"]], "add() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[203, "sympy.polys.matrices.domainmatrix.DomainMatrix.add"]], "add() (sympy.polys.matrices.sdm.sdm method)": [[203, "sympy.polys.matrices.sdm.SDM.add"]], "charpoly() (sympy.polys.matrices.ddm.ddm method)": [[203, "sympy.polys.matrices.ddm.DDM.charpoly"]], "charpoly() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[203, "sympy.polys.matrices.domainmatrix.DomainMatrix.charpoly"]], "charpoly() (sympy.polys.matrices.sdm.sdm method)": [[203, "sympy.polys.matrices.sdm.SDM.charpoly"]], "columnspace() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[203, "sympy.polys.matrices.domainmatrix.DomainMatrix.columnspace"]], "convert_to() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[203, "sympy.polys.matrices.domainmatrix.DomainMatrix.convert_to"]], "convert_to() (sympy.polys.matrices.sdm.sdm method)": [[203, "sympy.polys.matrices.sdm.SDM.convert_to"]], "copy() (sympy.polys.matrices.sdm.sdm method)": [[203, "sympy.polys.matrices.sdm.SDM.copy"]], "det() (sympy.polys.matrices.ddm.ddm method)": [[203, "sympy.polys.matrices.ddm.DDM.det"]], "det() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[203, "sympy.polys.matrices.domainmatrix.DomainMatrix.det"]], "det() (sympy.polys.matrices.sdm.sdm method)": [[203, "sympy.polys.matrices.sdm.SDM.det"]], "diag() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[203, "sympy.polys.matrices.domainmatrix.DomainMatrix.diag"]], "eye() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[203, "sympy.polys.matrices.domainmatrix.DomainMatrix.eye"]], "eye() (sympy.polys.matrices.sdm.sdm class method)": [[203, "sympy.polys.matrices.sdm.SDM.eye"]], "from_matrix() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[203, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_Matrix"]], "from_ddm() (sympy.polys.matrices.sdm.sdm class method)": [[203, "sympy.polys.matrices.sdm.SDM.from_ddm"]], "from_dict_sympy() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[203, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_dict_sympy"]], "from_list() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[203, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_list"]], "from_list() (sympy.polys.matrices.sdm.sdm class method)": [[203, "sympy.polys.matrices.sdm.SDM.from_list"]], "from_list_sympy() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[203, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_list_sympy"]], "from_rep() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[203, "sympy.polys.matrices.domainmatrix.DomainMatrix.from_rep"]], "hermite_normal_form() (in module sympy.polys.matrices.normalforms)": [[203, "sympy.polys.matrices.normalforms.hermite_normal_form"]], "hstack() (sympy.polys.matrices.ddm.ddm method)": [[203, "sympy.polys.matrices.ddm.DDM.hstack"]], "hstack() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[203, "sympy.polys.matrices.domainmatrix.DomainMatrix.hstack"]], "hstack() (sympy.polys.matrices.sdm.sdm method)": [[203, "sympy.polys.matrices.sdm.SDM.hstack"]], "inv() (sympy.polys.matrices.ddm.ddm method)": [[203, "sympy.polys.matrices.ddm.DDM.inv"]], "inv() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[203, "sympy.polys.matrices.domainmatrix.DomainMatrix.inv"]], "inv() (sympy.polys.matrices.sdm.sdm method)": [[203, "sympy.polys.matrices.sdm.SDM.inv"]], "is_lower (sympy.polys.matrices.domainmatrix.domainmatrix property)": [[203, "sympy.polys.matrices.domainmatrix.DomainMatrix.is_lower"]], "is_lower() (sympy.polys.matrices.ddm.ddm method)": [[203, "sympy.polys.matrices.ddm.DDM.is_lower"]], "is_lower() (sympy.polys.matrices.sdm.sdm method)": [[203, "sympy.polys.matrices.sdm.SDM.is_lower"]], "is_upper (sympy.polys.matrices.domainmatrix.domainmatrix property)": [[203, "sympy.polys.matrices.domainmatrix.DomainMatrix.is_upper"]], "is_upper() (sympy.polys.matrices.ddm.ddm method)": [[203, "sympy.polys.matrices.ddm.DDM.is_upper"]], "is_upper() (sympy.polys.matrices.sdm.sdm method)": [[203, "sympy.polys.matrices.sdm.SDM.is_upper"]], "is_zero_matrix() (sympy.polys.matrices.ddm.ddm method)": [[203, "sympy.polys.matrices.ddm.DDM.is_zero_matrix"]], "is_zero_matrix() (sympy.polys.matrices.sdm.sdm method)": [[203, "sympy.polys.matrices.sdm.SDM.is_zero_matrix"]], "lll() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[203, "sympy.polys.matrices.domainmatrix.DomainMatrix.lll"]], "lll_transform() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[203, "sympy.polys.matrices.domainmatrix.DomainMatrix.lll_transform"]], "lu() (sympy.polys.matrices.ddm.ddm method)": [[203, "sympy.polys.matrices.ddm.DDM.lu"]], "lu() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[203, "sympy.polys.matrices.domainmatrix.DomainMatrix.lu"]], "lu() (sympy.polys.matrices.sdm.sdm method)": [[203, "sympy.polys.matrices.sdm.SDM.lu"]], "lu_solve() (sympy.polys.matrices.ddm.ddm method)": [[203, "sympy.polys.matrices.ddm.DDM.lu_solve"]], "lu_solve() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[203, "sympy.polys.matrices.domainmatrix.DomainMatrix.lu_solve"]], "lu_solve() (sympy.polys.matrices.sdm.sdm method)": [[203, "sympy.polys.matrices.sdm.SDM.lu_solve"]], "matmul() (sympy.polys.matrices.ddm.ddm method)": [[203, "sympy.polys.matrices.ddm.DDM.matmul"]], "matmul() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[203, "sympy.polys.matrices.domainmatrix.DomainMatrix.matmul"]], "matmul() (sympy.polys.matrices.sdm.sdm method)": [[203, "sympy.polys.matrices.sdm.SDM.matmul"]], "mul() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[203, "sympy.polys.matrices.domainmatrix.DomainMatrix.mul"]], "mul() (sympy.polys.matrices.sdm.sdm method)": [[203, "sympy.polys.matrices.sdm.SDM.mul"]], "neg() (sympy.polys.matrices.ddm.ddm method)": [[203, "sympy.polys.matrices.ddm.DDM.neg"]], "neg() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[203, "sympy.polys.matrices.domainmatrix.DomainMatrix.neg"]], "neg() (sympy.polys.matrices.sdm.sdm method)": [[203, "sympy.polys.matrices.sdm.SDM.neg"]], "new() (sympy.polys.matrices.sdm.sdm class method)": [[203, "sympy.polys.matrices.sdm.SDM.new"]], "nullspace() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[203, "sympy.polys.matrices.domainmatrix.DomainMatrix.nullspace"]], "nullspace() (sympy.polys.matrices.sdm.sdm method)": [[203, "sympy.polys.matrices.sdm.SDM.nullspace"]], "ones() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[203, "sympy.polys.matrices.domainmatrix.DomainMatrix.ones"]], "pow() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[203, "sympy.polys.matrices.domainmatrix.DomainMatrix.pow"]], "rowspace() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[203, "sympy.polys.matrices.domainmatrix.DomainMatrix.rowspace"]], "rref() (sympy.polys.matrices.ddm.ddm method)": [[203, "sympy.polys.matrices.ddm.DDM.rref"]], "rref() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[203, "sympy.polys.matrices.domainmatrix.DomainMatrix.rref"]], "rref() (sympy.polys.matrices.sdm.sdm method)": [[203, "sympy.polys.matrices.sdm.SDM.rref"]], "scc() (sympy.polys.matrices.ddm.ddm method)": [[203, "sympy.polys.matrices.ddm.DDM.scc"]], "scc() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[203, "sympy.polys.matrices.domainmatrix.DomainMatrix.scc"]], "scc() (sympy.polys.matrices.sdm.sdm method)": [[203, "sympy.polys.matrices.sdm.SDM.scc"]], "smith_normal_form() (in module sympy.polys.matrices.normalforms)": [[203, "sympy.polys.matrices.normalforms.smith_normal_form"]], "sub() (sympy.polys.matrices.ddm.ddm method)": [[203, "sympy.polys.matrices.ddm.DDM.sub"]], "sub() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[203, "sympy.polys.matrices.domainmatrix.DomainMatrix.sub"]], "sub() (sympy.polys.matrices.sdm.sdm method)": [[203, "sympy.polys.matrices.sdm.SDM.sub"]], "to_matrix() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[203, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_Matrix"]], "to_ddm() (sympy.polys.matrices.sdm.sdm method)": [[203, "sympy.polys.matrices.sdm.SDM.to_ddm"]], "to_dense() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[203, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_dense"]], "to_field() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[203, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_field"]], "to_list() (sympy.polys.matrices.sdm.sdm method)": [[203, "sympy.polys.matrices.sdm.SDM.to_list"]], "to_sparse() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[203, "sympy.polys.matrices.domainmatrix.DomainMatrix.to_sparse"]], "transpose() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[203, "sympy.polys.matrices.domainmatrix.DomainMatrix.transpose"]], "transpose() (sympy.polys.matrices.sdm.sdm method)": [[203, "sympy.polys.matrices.sdm.SDM.transpose"]], "unify() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[203, "sympy.polys.matrices.domainmatrix.DomainMatrix.unify"]], "vstack() (sympy.polys.matrices.ddm.ddm method)": [[203, "sympy.polys.matrices.ddm.DDM.vstack"]], "vstack() (sympy.polys.matrices.domainmatrix.domainmatrix method)": [[203, "sympy.polys.matrices.domainmatrix.DomainMatrix.vstack"]], "vstack() (sympy.polys.matrices.sdm.sdm method)": [[203, "sympy.polys.matrices.sdm.SDM.vstack"]], "zeros() (sympy.polys.matrices.domainmatrix.domainmatrix class method)": [[203, "sympy.polys.matrices.domainmatrix.DomainMatrix.zeros"]], "zeros() (sympy.polys.matrices.sdm.sdm class method)": [[203, "sympy.polys.matrices.sdm.SDM.zeros"]], "anp (class in sympy.polys.polyclasses)": [[205, "sympy.polys.polyclasses.ANP"]], "algebraicfield (class in sympy.polys.domains)": [[205, "sympy.polys.domains.AlgebraicField"]], "complexelement (class in sympy.polys.domains.mpelements)": [[205, "sympy.polys.domains.mpelements.ComplexElement"]], "complexfield (class in sympy.polys.domains)": [[205, "sympy.polys.domains.ComplexField"]], "compositedomain (class in sympy.polys.domains.compositedomain)": [[205, "sympy.polys.domains.compositedomain.CompositeDomain"]], "dmf (class in sympy.polys.polyclasses)": [[205, "sympy.polys.polyclasses.DMF"]], "dmp (class in sympy.polys.polyclasses)": [[205, "sympy.polys.polyclasses.DMP"]], "domain (class in sympy.polys.domains.domain)": [[205, "sympy.polys.domains.domain.Domain"]], "domainelement (class in sympy.polys.domains.domainelement)": [[205, "sympy.polys.domains.domainelement.DomainElement"]], "expressiondomain (class in sympy.polys.domains)": [[205, "sympy.polys.domains.ExpressionDomain"]], "expressiondomain.expression (class in sympy.polys.domains)": [[205, "sympy.polys.domains.ExpressionDomain.Expression"]], "expressiondomain.expression (class in sympy.polys.domains.expressiondomain)": [[205, "sympy.polys.domains.expressiondomain.ExpressionDomain.Expression"]], "field (class in sympy.polys.domains.field)": [[205, "sympy.polys.domains.field.Field"]], "finitefield (class in sympy.polys.domains)": [[205, "sympy.polys.domains.FiniteField"]], "fracelement (class in sympy.polys.fields)": [[205, "sympy.polys.fields.FracElement"]], "fracfield (class in sympy.polys.fields)": [[205, "sympy.polys.fields.FracField"]], "fractionfield (class in sympy.polys.domains)": [[205, "sympy.polys.domains.FractionField"]], "gmpyfinitefield (class in sympy.polys.domains)": [[205, "sympy.polys.domains.GMPYFiniteField"]], "gmpyintegerring (class in sympy.polys.domains)": [[205, "sympy.polys.domains.GMPYIntegerRing"]], "gmpyrationalfield (class in sympy.polys.domains)": [[205, "sympy.polys.domains.GMPYRationalField"]], "gaussiandomain (class in sympy.polys.domains.gaussiandomains)": [[205, "sympy.polys.domains.gaussiandomains.GaussianDomain"]], "gaussianelement (class in sympy.polys.domains.gaussiandomains)": [[205, "sympy.polys.domains.gaussiandomains.GaussianElement"]], "gaussianinteger (class in sympy.polys.domains.gaussiandomains)": [[205, "sympy.polys.domains.gaussiandomains.GaussianInteger"]], "gaussianintegerring (class in sympy.polys.domains.gaussiandomains)": [[205, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing"]], "gaussianrational (class in sympy.polys.domains.gaussiandomains)": [[205, "sympy.polys.domains.gaussiandomains.GaussianRational"]], "gaussianrationalfield (class in sympy.polys.domains.gaussiandomains)": [[205, "sympy.polys.domains.gaussiandomains.GaussianRationalField"]], "integerring (class in sympy.polys.domains)": [[205, "sympy.polys.domains.IntegerRing"]], "lc() (sympy.polys.polyclasses.anp method)": [[205, "sympy.polys.polyclasses.ANP.LC"]], "lc() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.LC"]], "polyelement (class in sympy.polys.rings)": [[205, "sympy.polys.rings.PolyElement"]], "polyring (class in sympy.polys.rings)": [[205, "sympy.polys.rings.PolyRing"]], "polynomialring (class in sympy.polys.domains)": [[205, "sympy.polys.domains.PolynomialRing"]], "pythonfinitefield (class in sympy.polys.domains)": [[205, "sympy.polys.domains.PythonFiniteField"]], "pythonintegerring (class in sympy.polys.domains)": [[205, "sympy.polys.domains.PythonIntegerRing"]], "pythonmpq (class in sympy.external.pythonmpq)": [[205, "sympy.external.pythonmpq.PythonMPQ"]], "pythonrationalfield (class in sympy.polys.domains)": [[205, "sympy.polys.domains.PythonRationalField"]], "quotientring (class in sympy.polys.domains.quotientring)": [[205, "sympy.polys.domains.quotientring.QuotientRing"]], "rationalfield (class in sympy.polys.domains)": [[205, "sympy.polys.domains.RationalField"]], "realelement (class in sympy.polys.domains.mpelements)": [[205, "sympy.polys.domains.mpelements.RealElement"]], "realfield (class in sympy.polys.domains)": [[205, "sympy.polys.domains.RealField"]], "ring (class in sympy.polys.domains.ring)": [[205, "sympy.polys.domains.ring.Ring"]], "simpledomain (class in sympy.polys.domains.simpledomain)": [[205, "sympy.polys.domains.simpledomain.SimpleDomain"]], "tc() (sympy.polys.polyclasses.anp method)": [[205, "sympy.polys.polyclasses.ANP.TC"]], "tc() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.TC"]], "abs() (sympy.polys.domains.domain.domain method)": [[205, "sympy.polys.domains.domain.Domain.abs"]], "abs() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.abs"]], "add() (sympy.polys.domains.domain.domain method)": [[205, "sympy.polys.domains.domain.Domain.add"]], "add() (sympy.polys.polyclasses.dmf method)": [[205, "sympy.polys.polyclasses.DMF.add"]], "add() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.add"]], "add() (sympy.polys.rings.polyring method)": [[205, "sympy.polys.rings.PolyRing.add"]], "add_gens() (sympy.polys.rings.polyring method)": [[205, "sympy.polys.rings.PolyRing.add_gens"]], "add_ground() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.add_ground"]], "alg_field_from_poly() (sympy.polys.domains.domain.domain method)": [[205, "sympy.polys.domains.domain.Domain.alg_field_from_poly"]], "algebraic_field() (sympy.polys.domains.algebraicfield method)": [[205, "sympy.polys.domains.AlgebraicField.algebraic_field"]], "algebraic_field() (sympy.polys.domains.integerring method)": [[205, "sympy.polys.domains.IntegerRing.algebraic_field"]], "algebraic_field() (sympy.polys.domains.rationalfield method)": [[205, "sympy.polys.domains.RationalField.algebraic_field"]], "algebraic_field() (sympy.polys.domains.domain.domain method)": [[205, "sympy.polys.domains.domain.Domain.algebraic_field"]], "all_coeffs() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.all_coeffs"]], "all_monoms() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.all_monoms"]], "all_terms() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.all_terms"]], "almosteq() (sympy.polys.domains.complexfield method)": [[205, "sympy.polys.domains.ComplexField.almosteq"]], "almosteq() (sympy.polys.domains.realfield method)": [[205, "sympy.polys.domains.RealField.almosteq"]], "almosteq() (sympy.polys.domains.domain.domain method)": [[205, "sympy.polys.domains.domain.Domain.almosteq"]], "almosteq() (sympy.polys.rings.polyelement method)": [[205, "sympy.polys.rings.PolyElement.almosteq"]], "as_algebraicfield() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[205, "sympy.polys.domains.gaussiandomains.GaussianRationalField.as_AlgebraicField"]], "cancel() (sympy.polys.polyclasses.dmf method)": [[205, "sympy.polys.polyclasses.DMF.cancel"]], "cancel() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.cancel"]], "cancel() (sympy.polys.rings.polyelement method)": [[205, "sympy.polys.rings.PolyElement.cancel"]], "cauchy_lower_bound() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.cauchy_lower_bound"]], "cauchy_upper_bound() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.cauchy_upper_bound"]], "characteristic() (sympy.polys.domains.finitefield method)": [[205, "sympy.polys.domains.FiniteField.characteristic"]], "characteristic() (sympy.polys.domains.domain.domain method)": [[205, "sympy.polys.domains.domain.Domain.characteristic"]], "clear_denoms() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.clear_denoms"]], "coeff() (sympy.polys.rings.polyelement method)": [[205, "sympy.polys.rings.PolyElement.coeff"]], "coeffs() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.coeffs"]], "coeffs() (sympy.polys.rings.polyelement method)": [[205, "sympy.polys.rings.PolyElement.coeffs"]], "cofactors() (sympy.polys.domains.domain.domain method)": [[205, "sympy.polys.domains.domain.Domain.cofactors"]], "cofactors() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.cofactors"]], "compose() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.compose"]], "compose() (sympy.polys.rings.polyring method)": [[205, "sympy.polys.rings.PolyRing.compose"]], "const() (sympy.polys.rings.polyelement method)": [[205, "sympy.polys.rings.PolyElement.const"]], "content() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.content"]], "content() (sympy.polys.rings.polyelement method)": [[205, "sympy.polys.rings.PolyElement.content"]], "convert() (sympy.polys.domains.domain.domain method)": [[205, "sympy.polys.domains.domain.Domain.convert"]], "convert() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.convert"]], "convert_from() (sympy.polys.domains.domain.domain method)": [[205, "sympy.polys.domains.domain.Domain.convert_from"]], "copy() (sympy.polys.rings.polyelement method)": [[205, "sympy.polys.rings.PolyElement.copy"]], "count_complex_roots() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.count_complex_roots"]], "count_real_roots() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.count_real_roots"]], "cyclotomic_field() (sympy.polys.domains.domain.domain method)": [[205, "sympy.polys.domains.domain.Domain.cyclotomic_field"]], "decompose() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.decompose"]], "deflate() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.deflate"]], "degree() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.degree"]], "degree() (sympy.polys.rings.polyelement method)": [[205, "sympy.polys.rings.PolyElement.degree"]], "degree_list() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.degree_list"]], "degrees() (sympy.polys.rings.polyelement method)": [[205, "sympy.polys.rings.PolyElement.degrees"]], "denom() (sympy.polys.domains.algebraicfield method)": [[205, "sympy.polys.domains.AlgebraicField.denom"]], "denom() (sympy.polys.domains.expressiondomain method)": [[205, "sympy.polys.domains.ExpressionDomain.denom"]], "denom() (sympy.polys.domains.fractionfield method)": [[205, "sympy.polys.domains.FractionField.denom"]], "denom() (sympy.polys.domains.gmpyrationalfield method)": [[205, "sympy.polys.domains.GMPYRationalField.denom"]], "denom() (sympy.polys.domains.rationalfield method)": [[205, "sympy.polys.domains.RationalField.denom"]], "denom() (sympy.polys.domains.domain.domain method)": [[205, "sympy.polys.domains.domain.Domain.denom"]], "denom() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[205, "sympy.polys.domains.gaussiandomains.GaussianRationalField.denom"]], "denom() (sympy.polys.domains.ring.ring method)": [[205, "sympy.polys.domains.ring.Ring.denom"]], "denom() (sympy.polys.polyclasses.dmf method)": [[205, "sympy.polys.polyclasses.DMF.denom"]], "diff() (sympy.polys.fields.fracelement method)": [[205, "sympy.polys.fields.FracElement.diff"]], "diff() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.diff"]], "diff() (sympy.polys.rings.polyelement method)": [[205, "sympy.polys.rings.PolyElement.diff"]], "discriminant() (sympy.polys.domains.algebraicfield method)": [[205, "sympy.polys.domains.AlgebraicField.discriminant"]], "discriminant() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.discriminant"]], "div() (sympy.polys.domains.gmpyrationalfield method)": [[205, "sympy.polys.domains.GMPYRationalField.div"]], "div() (sympy.polys.domains.rationalfield method)": [[205, "sympy.polys.domains.RationalField.div"]], "div() (sympy.polys.domains.domain.domain method)": [[205, "sympy.polys.domains.domain.Domain.div"]], "div() (sympy.polys.domains.field.field method)": [[205, "sympy.polys.domains.field.Field.div"]], "div() (sympy.polys.domains.ring.ring method)": [[205, "sympy.polys.domains.ring.Ring.div"]], "div() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.div"]], "div() (sympy.polys.rings.polyelement method)": [[205, "sympy.polys.rings.PolyElement.div"]], "drop() (sympy.polys.domains.compositedomain.compositedomain method)": [[205, "sympy.polys.domains.compositedomain.CompositeDomain.drop"]], "drop() (sympy.polys.domains.domain.domain method)": [[205, "sympy.polys.domains.domain.Domain.drop"]], "drop() (sympy.polys.rings.polyring method)": [[205, "sympy.polys.rings.PolyRing.drop"]], "drop_to_ground() (sympy.polys.rings.polyring method)": [[205, "sympy.polys.rings.PolyRing.drop_to_ground"]], "dtype (sympy.polys.domains.algebraicfield attribute)": [[205, "sympy.polys.domains.AlgebraicField.dtype"]], "dtype (sympy.polys.domains.expressiondomain attribute)": [[205, "sympy.polys.domains.ExpressionDomain.dtype"]], "dtype (sympy.polys.domains.domain.domain attribute)": [[205, "sympy.polys.domains.domain.Domain.dtype"]], "dtype (sympy.polys.domains.gaussiandomains.gaussianintegerring attribute)": [[205, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.dtype"]], "dtype (sympy.polys.domains.gaussiandomains.gaussianrationalfield attribute)": [[205, "sympy.polys.domains.gaussiandomains.GaussianRationalField.dtype"]], "eject() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.eject"]], "eval() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.eval"]], "evalf() (sympy.polys.domains.domain.domain method)": [[205, "sympy.polys.domains.domain.Domain.evalf"]], "exclude() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.exclude"]], "exquo() (sympy.polys.domains.gmpyrationalfield method)": [[205, "sympy.polys.domains.GMPYRationalField.exquo"]], "exquo() (sympy.polys.domains.rationalfield method)": [[205, "sympy.polys.domains.RationalField.exquo"]], "exquo() (sympy.polys.domains.domain.domain method)": [[205, "sympy.polys.domains.domain.Domain.exquo"]], "exquo() (sympy.polys.domains.field.field method)": [[205, "sympy.polys.domains.field.Field.exquo"]], "exquo() (sympy.polys.domains.ring.ring method)": [[205, "sympy.polys.domains.ring.Ring.exquo"]], "exquo() (sympy.polys.polyclasses.dmf method)": [[205, "sympy.polys.polyclasses.DMF.exquo"]], "exquo() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.exquo"]], "exquo_ground() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.exquo_ground"]], "ext (sympy.polys.domains.algebraicfield attribute)": [[205, "sympy.polys.domains.AlgebraicField.ext"]], "factor_list() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.factor_list"]], "factor_list_include() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.factor_list_include"]], "factorial() (sympy.polys.domains.fractionfield method)": [[205, "sympy.polys.domains.FractionField.factorial"]], "factorial() (sympy.polys.domains.gmpyintegerring method)": [[205, "sympy.polys.domains.GMPYIntegerRing.factorial"]], "factorial() (sympy.polys.domains.gmpyrationalfield method)": [[205, "sympy.polys.domains.GMPYRationalField.factorial"]], "factorial() (sympy.polys.domains.integerring method)": [[205, "sympy.polys.domains.IntegerRing.factorial"]], "factorial() (sympy.polys.domains.polynomialring method)": [[205, "sympy.polys.domains.PolynomialRing.factorial"]], "field() (in module sympy.polys.fields)": [[205, "sympy.polys.fields.field"]], "frac_field() (sympy.polys.domains.domain.domain method)": [[205, "sympy.polys.domains.domain.Domain.frac_field"]], "frac_unify() (sympy.polys.polyclasses.dmf method)": [[205, "sympy.polys.polyclasses.DMF.frac_unify"]], "free_module() (sympy.polys.domains.ring.ring method)": [[205, "sympy.polys.domains.ring.Ring.free_module"]], "from_algebraicfield() (sympy.polys.domains.algebraicfield method)": [[205, "sympy.polys.domains.AlgebraicField.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.fractionfield method)": [[205, "sympy.polys.domains.FractionField.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.integerring method)": [[205, "sympy.polys.domains.IntegerRing.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.polynomialring method)": [[205, "sympy.polys.domains.PolynomialRing.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.rationalfield method)": [[205, "sympy.polys.domains.RationalField.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.domain.domain method)": [[205, "sympy.polys.domains.domain.Domain.from_AlgebraicField"]], "from_algebraicfield() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[205, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_AlgebraicField"]], "from_complexfield() (sympy.polys.domains.fractionfield method)": [[205, "sympy.polys.domains.FractionField.from_ComplexField"]], "from_complexfield() (sympy.polys.domains.polynomialring method)": [[205, "sympy.polys.domains.PolynomialRing.from_ComplexField"]], "from_complexfield() (sympy.polys.domains.domain.domain method)": [[205, "sympy.polys.domains.domain.Domain.from_ComplexField"]], "from_expressiondomain() (sympy.polys.domains.expressiondomain method)": [[205, "sympy.polys.domains.ExpressionDomain.from_ExpressionDomain"]], "from_expressiondomain() (sympy.polys.domains.domain.domain method)": [[205, "sympy.polys.domains.domain.Domain.from_ExpressionDomain"]], "from_expressionrawdomain() (sympy.polys.domains.domain.domain method)": [[205, "sympy.polys.domains.domain.Domain.from_ExpressionRawDomain"]], "from_ff() (sympy.polys.domains.finitefield method)": [[205, "sympy.polys.domains.FiniteField.from_FF"]], "from_ff() (sympy.polys.domains.integerring method)": [[205, "sympy.polys.domains.IntegerRing.from_FF"]], "from_ff() (sympy.polys.domains.domain.domain method)": [[205, "sympy.polys.domains.domain.Domain.from_FF"]], "from_ff_gmpy() (sympy.polys.domains.finitefield method)": [[205, "sympy.polys.domains.FiniteField.from_FF_gmpy"]], "from_ff_gmpy() (sympy.polys.domains.gmpyintegerring method)": [[205, "sympy.polys.domains.GMPYIntegerRing.from_FF_gmpy"]], "from_ff_gmpy() (sympy.polys.domains.integerring method)": [[205, "sympy.polys.domains.IntegerRing.from_FF_gmpy"]], "from_ff_gmpy() (sympy.polys.domains.domain.domain method)": [[205, "sympy.polys.domains.domain.Domain.from_FF_gmpy"]], "from_ff_python() (sympy.polys.domains.finitefield method)": [[205, "sympy.polys.domains.FiniteField.from_FF_python"]], "from_ff_python() (sympy.polys.domains.gmpyintegerring method)": [[205, "sympy.polys.domains.GMPYIntegerRing.from_FF_python"]], "from_ff_python() (sympy.polys.domains.integerring method)": [[205, "sympy.polys.domains.IntegerRing.from_FF_python"]], "from_ff_python() (sympy.polys.domains.domain.domain method)": [[205, "sympy.polys.domains.domain.Domain.from_FF_python"]], "from_fractionfield() (sympy.polys.domains.expressiondomain method)": [[205, "sympy.polys.domains.ExpressionDomain.from_FractionField"]], "from_fractionfield() (sympy.polys.domains.fractionfield method)": [[205, "sympy.polys.domains.FractionField.from_FractionField"]], "from_fractionfield() (sympy.polys.domains.polynomialring method)": [[205, "sympy.polys.domains.PolynomialRing.from_FractionField"]], "from_fractionfield() (sympy.polys.domains.domain.domain method)": [[205, "sympy.polys.domains.domain.Domain.from_FractionField"]], "from_gaussianintegerring() (sympy.polys.domains.algebraicfield method)": [[205, "sympy.polys.domains.AlgebraicField.from_GaussianIntegerRing"]], "from_gaussianintegerring() (sympy.polys.domains.expressiondomain method)": [[205, "sympy.polys.domains.ExpressionDomain.from_GaussianIntegerRing"]], "from_gaussianintegerring() (sympy.polys.domains.fractionfield method)": [[205, "sympy.polys.domains.FractionField.from_GaussianIntegerRing"]], "from_gaussianintegerring() (sympy.polys.domains.polynomialring method)": [[205, "sympy.polys.domains.PolynomialRing.from_GaussianIntegerRing"]], "from_gaussianintegerring() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[205, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.from_GaussianIntegerRing"]], "from_gaussianintegerring() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[205, "sympy.polys.domains.gaussiandomains.GaussianRationalField.from_GaussianIntegerRing"]], "from_gaussianrationalfield() (sympy.polys.domains.algebraicfield method)": [[205, "sympy.polys.domains.AlgebraicField.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.expressiondomain method)": [[205, "sympy.polys.domains.ExpressionDomain.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.fractionfield method)": [[205, "sympy.polys.domains.FractionField.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.gmpyrationalfield method)": [[205, "sympy.polys.domains.GMPYRationalField.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.polynomialring method)": [[205, "sympy.polys.domains.PolynomialRing.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.rationalfield method)": [[205, "sympy.polys.domains.RationalField.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[205, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.from_GaussianRationalField"]], "from_gaussianrationalfield() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[205, "sympy.polys.domains.gaussiandomains.GaussianRationalField.from_GaussianRationalField"]], "from_globalpolynomialring() (sympy.polys.domains.polynomialring method)": [[205, "sympy.polys.domains.PolynomialRing.from_GlobalPolynomialRing"]], "from_globalpolynomialring() (sympy.polys.domains.domain.domain method)": [[205, "sympy.polys.domains.domain.Domain.from_GlobalPolynomialRing"]], "from_monogenicfiniteextension() (sympy.polys.domains.domain.domain method)": [[205, "sympy.polys.domains.domain.Domain.from_MonogenicFiniteExtension"]], "from_polynomialring() (sympy.polys.domains.expressiondomain method)": [[205, "sympy.polys.domains.ExpressionDomain.from_PolynomialRing"]], "from_polynomialring() (sympy.polys.domains.fractionfield method)": [[205, "sympy.polys.domains.FractionField.from_PolynomialRing"]], "from_polynomialring() (sympy.polys.domains.polynomialring method)": [[205, "sympy.polys.domains.PolynomialRing.from_PolynomialRing"]], "from_polynomialring() (sympy.polys.domains.domain.domain method)": [[205, "sympy.polys.domains.domain.Domain.from_PolynomialRing"]], "from_qq() (sympy.polys.domains.algebraicfield method)": [[205, "sympy.polys.domains.AlgebraicField.from_QQ"]], "from_qq() (sympy.polys.domains.expressiondomain method)": [[205, "sympy.polys.domains.ExpressionDomain.from_QQ"]], "from_qq() (sympy.polys.domains.finitefield method)": [[205, "sympy.polys.domains.FiniteField.from_QQ"]], "from_qq() (sympy.polys.domains.fractionfield method)": [[205, "sympy.polys.domains.FractionField.from_QQ"]], "from_qq() (sympy.polys.domains.gmpyintegerring method)": [[205, "sympy.polys.domains.GMPYIntegerRing.from_QQ"]], "from_qq() (sympy.polys.domains.integerring method)": [[205, "sympy.polys.domains.IntegerRing.from_QQ"]], "from_qq() (sympy.polys.domains.polynomialring method)": [[205, "sympy.polys.domains.PolynomialRing.from_QQ"]], "from_qq() (sympy.polys.domains.rationalfield method)": [[205, "sympy.polys.domains.RationalField.from_QQ"]], "from_qq() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[205, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_QQ"]], "from_qq_gmpy() (sympy.polys.domains.algebraicfield method)": [[205, "sympy.polys.domains.AlgebraicField.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.expressiondomain method)": [[205, "sympy.polys.domains.ExpressionDomain.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.finitefield method)": [[205, "sympy.polys.domains.FiniteField.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.fractionfield method)": [[205, "sympy.polys.domains.FractionField.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.gmpyintegerring method)": [[205, "sympy.polys.domains.GMPYIntegerRing.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.gmpyrationalfield method)": [[205, "sympy.polys.domains.GMPYRationalField.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.integerring method)": [[205, "sympy.polys.domains.IntegerRing.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.polynomialring method)": [[205, "sympy.polys.domains.PolynomialRing.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.rationalfield method)": [[205, "sympy.polys.domains.RationalField.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.domain.domain method)": [[205, "sympy.polys.domains.domain.Domain.from_QQ_gmpy"]], "from_qq_gmpy() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[205, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_QQ_gmpy"]], "from_qq_python() (sympy.polys.domains.algebraicfield method)": [[205, "sympy.polys.domains.AlgebraicField.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.expressiondomain method)": [[205, "sympy.polys.domains.ExpressionDomain.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.finitefield method)": [[205, "sympy.polys.domains.FiniteField.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.fractionfield method)": [[205, "sympy.polys.domains.FractionField.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.gmpyintegerring method)": [[205, "sympy.polys.domains.GMPYIntegerRing.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.gmpyrationalfield method)": [[205, "sympy.polys.domains.GMPYRationalField.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.integerring method)": [[205, "sympy.polys.domains.IntegerRing.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.polynomialring method)": [[205, "sympy.polys.domains.PolynomialRing.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.rationalfield method)": [[205, "sympy.polys.domains.RationalField.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.domain.domain method)": [[205, "sympy.polys.domains.domain.Domain.from_QQ_python"]], "from_qq_python() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[205, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_QQ_python"]], "from_realfield() (sympy.polys.domains.algebraicfield method)": [[205, "sympy.polys.domains.AlgebraicField.from_RealField"]], "from_realfield() (sympy.polys.domains.expressiondomain method)": [[205, "sympy.polys.domains.ExpressionDomain.from_RealField"]], "from_realfield() (sympy.polys.domains.finitefield method)": [[205, "sympy.polys.domains.FiniteField.from_RealField"]], "from_realfield() (sympy.polys.domains.fractionfield method)": [[205, "sympy.polys.domains.FractionField.from_RealField"]], "from_realfield() (sympy.polys.domains.gmpyintegerring method)": [[205, "sympy.polys.domains.GMPYIntegerRing.from_RealField"]], "from_realfield() (sympy.polys.domains.gmpyrationalfield method)": [[205, "sympy.polys.domains.GMPYRationalField.from_RealField"]], "from_realfield() (sympy.polys.domains.integerring method)": [[205, "sympy.polys.domains.IntegerRing.from_RealField"]], "from_realfield() (sympy.polys.domains.polynomialring method)": [[205, "sympy.polys.domains.PolynomialRing.from_RealField"]], "from_realfield() (sympy.polys.domains.rationalfield method)": [[205, "sympy.polys.domains.RationalField.from_RealField"]], "from_realfield() (sympy.polys.domains.domain.domain method)": [[205, "sympy.polys.domains.domain.Domain.from_RealField"]], "from_zz() (sympy.polys.domains.algebraicfield method)": [[205, "sympy.polys.domains.AlgebraicField.from_ZZ"]], "from_zz() (sympy.polys.domains.expressiondomain method)": [[205, "sympy.polys.domains.ExpressionDomain.from_ZZ"]], "from_zz() (sympy.polys.domains.finitefield method)": [[205, "sympy.polys.domains.FiniteField.from_ZZ"]], "from_zz() (sympy.polys.domains.fractionfield method)": [[205, "sympy.polys.domains.FractionField.from_ZZ"]], "from_zz() (sympy.polys.domains.integerring method)": [[205, "sympy.polys.domains.IntegerRing.from_ZZ"]], "from_zz() (sympy.polys.domains.polynomialring method)": [[205, "sympy.polys.domains.PolynomialRing.from_ZZ"]], "from_zz() (sympy.polys.domains.rationalfield method)": [[205, "sympy.polys.domains.RationalField.from_ZZ"]], "from_zz() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[205, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_ZZ"]], "from_zz_gmpy() (sympy.polys.domains.algebraicfield method)": [[205, "sympy.polys.domains.AlgebraicField.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.expressiondomain method)": [[205, "sympy.polys.domains.ExpressionDomain.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.finitefield method)": [[205, "sympy.polys.domains.FiniteField.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.fractionfield method)": [[205, "sympy.polys.domains.FractionField.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.gmpyintegerring method)": [[205, "sympy.polys.domains.GMPYIntegerRing.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.gmpyrationalfield method)": [[205, "sympy.polys.domains.GMPYRationalField.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.integerring method)": [[205, "sympy.polys.domains.IntegerRing.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.polynomialring method)": [[205, "sympy.polys.domains.PolynomialRing.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.rationalfield method)": [[205, "sympy.polys.domains.RationalField.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.domain.domain method)": [[205, "sympy.polys.domains.domain.Domain.from_ZZ_gmpy"]], "from_zz_gmpy() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[205, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_ZZ_gmpy"]], "from_zz_python() (sympy.polys.domains.algebraicfield method)": [[205, "sympy.polys.domains.AlgebraicField.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.expressiondomain method)": [[205, "sympy.polys.domains.ExpressionDomain.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.finitefield method)": [[205, "sympy.polys.domains.FiniteField.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.fractionfield method)": [[205, "sympy.polys.domains.FractionField.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.gmpyintegerring method)": [[205, "sympy.polys.domains.GMPYIntegerRing.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.gmpyrationalfield method)": [[205, "sympy.polys.domains.GMPYRationalField.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.integerring method)": [[205, "sympy.polys.domains.IntegerRing.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.polynomialring method)": [[205, "sympy.polys.domains.PolynomialRing.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.rationalfield method)": [[205, "sympy.polys.domains.RationalField.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.domain.domain method)": [[205, "sympy.polys.domains.domain.Domain.from_ZZ_python"]], "from_zz_python() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[205, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_ZZ_python"]], "from_dict() (sympy.polys.polyclasses.dmp class method)": [[205, "sympy.polys.polyclasses.DMP.from_dict"]], "from_list() (sympy.polys.polyclasses.dmp class method)": [[205, "sympy.polys.polyclasses.DMP.from_list"]], "from_sympy() (sympy.polys.domains.algebraicfield method)": [[205, "sympy.polys.domains.AlgebraicField.from_sympy"]], "from_sympy() (sympy.polys.domains.complexfield method)": [[205, "sympy.polys.domains.ComplexField.from_sympy"]], "from_sympy() (sympy.polys.domains.expressiondomain method)": [[205, "sympy.polys.domains.ExpressionDomain.from_sympy"]], "from_sympy() (sympy.polys.domains.finitefield method)": [[205, "sympy.polys.domains.FiniteField.from_sympy"]], "from_sympy() (sympy.polys.domains.fractionfield method)": [[205, "sympy.polys.domains.FractionField.from_sympy"]], "from_sympy() (sympy.polys.domains.gmpyintegerring method)": [[205, "sympy.polys.domains.GMPYIntegerRing.from_sympy"]], "from_sympy() (sympy.polys.domains.gmpyrationalfield method)": [[205, "sympy.polys.domains.GMPYRationalField.from_sympy"]], "from_sympy() (sympy.polys.domains.integerring method)": [[205, "sympy.polys.domains.IntegerRing.from_sympy"]], "from_sympy() (sympy.polys.domains.polynomialring method)": [[205, "sympy.polys.domains.PolynomialRing.from_sympy"]], "from_sympy() (sympy.polys.domains.rationalfield method)": [[205, "sympy.polys.domains.RationalField.from_sympy"]], "from_sympy() (sympy.polys.domains.realfield method)": [[205, "sympy.polys.domains.RealField.from_sympy"]], "from_sympy() (sympy.polys.domains.domain.domain method)": [[205, "sympy.polys.domains.domain.Domain.from_sympy"]], "from_sympy() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[205, "sympy.polys.domains.gaussiandomains.GaussianDomain.from_sympy"]], "from_sympy_list() (sympy.polys.polyclasses.dmp class method)": [[205, "sympy.polys.polyclasses.DMP.from_sympy_list"]], "galois_group() (sympy.polys.domains.algebraicfield method)": [[205, "sympy.polys.domains.AlgebraicField.galois_group"]], "gcd() (sympy.polys.domains.complexfield method)": [[205, "sympy.polys.domains.ComplexField.gcd"]], "gcd() (sympy.polys.domains.gmpyintegerring method)": [[205, "sympy.polys.domains.GMPYIntegerRing.gcd"]], "gcd() (sympy.polys.domains.integerring method)": [[205, "sympy.polys.domains.IntegerRing.gcd"]], "gcd() (sympy.polys.domains.polynomialring method)": [[205, "sympy.polys.domains.PolynomialRing.gcd"]], "gcd() (sympy.polys.domains.realfield method)": [[205, "sympy.polys.domains.RealField.gcd"]], "gcd() (sympy.polys.domains.domain.domain method)": [[205, "sympy.polys.domains.domain.Domain.gcd"]], "gcd() (sympy.polys.domains.field.field method)": [[205, "sympy.polys.domains.field.Field.gcd"]], "gcd() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[205, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.gcd"]], "gcd() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.gcd"]], "gcdex() (sympy.polys.domains.gmpyintegerring method)": [[205, "sympy.polys.domains.GMPYIntegerRing.gcdex"]], "gcdex() (sympy.polys.domains.integerring method)": [[205, "sympy.polys.domains.IntegerRing.gcdex"]], "gcdex() (sympy.polys.domains.polynomialring method)": [[205, "sympy.polys.domains.PolynomialRing.gcdex"]], "gcdex() (sympy.polys.domains.domain.domain method)": [[205, "sympy.polys.domains.domain.Domain.gcdex"]], "gcdex() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.gcdex"]], "get_exact() (sympy.polys.domains.complexfield method)": [[205, "sympy.polys.domains.ComplexField.get_exact"]], "get_exact() (sympy.polys.domains.realfield method)": [[205, "sympy.polys.domains.RealField.get_exact"]], "get_exact() (sympy.polys.domains.domain.domain method)": [[205, "sympy.polys.domains.domain.Domain.get_exact"]], "get_field() (sympy.polys.domains.expressiondomain method)": [[205, "sympy.polys.domains.ExpressionDomain.get_field"]], "get_field() (sympy.polys.domains.finitefield method)": [[205, "sympy.polys.domains.FiniteField.get_field"]], "get_field() (sympy.polys.domains.integerring method)": [[205, "sympy.polys.domains.IntegerRing.get_field"]], "get_field() (sympy.polys.domains.polynomialring method)": [[205, "sympy.polys.domains.PolynomialRing.get_field"]], "get_field() (sympy.polys.domains.domain.domain method)": [[205, "sympy.polys.domains.domain.Domain.get_field"]], "get_field() (sympy.polys.domains.field.field method)": [[205, "sympy.polys.domains.field.Field.get_field"]], "get_field() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[205, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.get_field"]], "get_field() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[205, "sympy.polys.domains.gaussiandomains.GaussianRationalField.get_field"]], "get_ring() (sympy.polys.domains.algebraicfield method)": [[205, "sympy.polys.domains.AlgebraicField.get_ring"]], "get_ring() (sympy.polys.domains.complexfield method)": [[205, "sympy.polys.domains.ComplexField.get_ring"]], "get_ring() (sympy.polys.domains.expressiondomain method)": [[205, "sympy.polys.domains.ExpressionDomain.get_ring"]], "get_ring() (sympy.polys.domains.fractionfield method)": [[205, "sympy.polys.domains.FractionField.get_ring"]], "get_ring() (sympy.polys.domains.gmpyrationalfield method)": [[205, "sympy.polys.domains.GMPYRationalField.get_ring"]], "get_ring() (sympy.polys.domains.rationalfield method)": [[205, "sympy.polys.domains.RationalField.get_ring"]], "get_ring() (sympy.polys.domains.realfield method)": [[205, "sympy.polys.domains.RealField.get_ring"]], "get_ring() (sympy.polys.domains.domain.domain method)": [[205, "sympy.polys.domains.domain.Domain.get_ring"]], "get_ring() (sympy.polys.domains.field.field method)": [[205, "sympy.polys.domains.field.Field.get_ring"]], "get_ring() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[205, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.get_ring"]], "get_ring() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[205, "sympy.polys.domains.gaussiandomains.GaussianRationalField.get_ring"]], "get_ring() (sympy.polys.domains.ring.ring method)": [[205, "sympy.polys.domains.ring.Ring.get_ring"]], "gff_list() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.gff_list"]], "half_gcdex() (sympy.polys.domains.domain.domain method)": [[205, "sympy.polys.domains.domain.Domain.half_gcdex"]], "half_gcdex() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.half_gcdex"]], "half_per() (sympy.polys.polyclasses.dmf method)": [[205, "sympy.polys.polyclasses.DMF.half_per"]], "has_assoc_field (sympy.polys.domains.domain.domain attribute)": [[205, "sympy.polys.domains.domain.Domain.has_assoc_Field"]], "has_assoc_ring (sympy.polys.domains.domain.domain attribute)": [[205, "sympy.polys.domains.domain.Domain.has_assoc_Ring"]], "homogeneous_order() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.homogeneous_order"]], "homogenize() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.homogenize"]], "ideal() (sympy.polys.domains.ring.ring method)": [[205, "sympy.polys.domains.ring.Ring.ideal"]], "imul_num() (sympy.polys.rings.polyelement method)": [[205, "sympy.polys.rings.PolyElement.imul_num"]], "index() (sympy.polys.rings.polyring method)": [[205, "sympy.polys.rings.PolyRing.index"]], "inject() (sympy.polys.domains.compositedomain.compositedomain method)": [[205, "sympy.polys.domains.compositedomain.CompositeDomain.inject"]], "inject() (sympy.polys.domains.domain.domain method)": [[205, "sympy.polys.domains.domain.Domain.inject"]], "inject() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[205, "sympy.polys.domains.gaussiandomains.GaussianDomain.inject"]], "inject() (sympy.polys.domains.simpledomain.simpledomain method)": [[205, "sympy.polys.domains.simpledomain.SimpleDomain.inject"]], "inject() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.inject"]], "integral_basis() (sympy.polys.domains.algebraicfield method)": [[205, "sympy.polys.domains.AlgebraicField.integral_basis"]], "integrate() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.integrate"]], "intervals() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.intervals"]], "invert() (sympy.polys.domains.domain.domain method)": [[205, "sympy.polys.domains.domain.Domain.invert"]], "invert() (sympy.polys.domains.ring.ring method)": [[205, "sympy.polys.domains.ring.Ring.invert"]], "invert() (sympy.polys.polyclasses.dmf method)": [[205, "sympy.polys.polyclasses.DMF.invert"]], "invert() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.invert"]], "is_field (sympy.polys.domains.domain.domain attribute)": [[205, "sympy.polys.domains.domain.Domain.is_Field"]], "is_pid (sympy.polys.domains.domain.domain attribute)": [[205, "sympy.polys.domains.domain.Domain.is_PID"]], "is_ring (sympy.polys.domains.domain.domain attribute)": [[205, "sympy.polys.domains.domain.Domain.is_Ring"]], "is_cyclotomic (sympy.polys.polyclasses.dmp property)": [[205, "sympy.polys.polyclasses.DMP.is_cyclotomic"]], "is_ground (sympy.polys.polyclasses.anp property)": [[205, "sympy.polys.polyclasses.ANP.is_ground"]], "is_ground (sympy.polys.polyclasses.dmp property)": [[205, "sympy.polys.polyclasses.DMP.is_ground"]], "is_homogeneous (sympy.polys.polyclasses.dmp property)": [[205, "sympy.polys.polyclasses.DMP.is_homogeneous"]], "is_irreducible (sympy.polys.polyclasses.dmp property)": [[205, "sympy.polys.polyclasses.DMP.is_irreducible"]], "is_linear (sympy.polys.polyclasses.dmp property)": [[205, "sympy.polys.polyclasses.DMP.is_linear"]], "is_monic (sympy.polys.polyclasses.dmp property)": [[205, "sympy.polys.polyclasses.DMP.is_monic"]], "is_monomial (sympy.polys.polyclasses.dmp property)": [[205, "sympy.polys.polyclasses.DMP.is_monomial"]], "is_negative() (sympy.polys.domains.algebraicfield method)": [[205, "sympy.polys.domains.AlgebraicField.is_negative"]], "is_negative() (sympy.polys.domains.complexfield method)": [[205, "sympy.polys.domains.ComplexField.is_negative"]], "is_negative() (sympy.polys.domains.expressiondomain method)": [[205, "sympy.polys.domains.ExpressionDomain.is_negative"]], "is_negative() (sympy.polys.domains.fractionfield method)": [[205, "sympy.polys.domains.FractionField.is_negative"]], "is_negative() (sympy.polys.domains.polynomialring method)": [[205, "sympy.polys.domains.PolynomialRing.is_negative"]], "is_negative() (sympy.polys.domains.domain.domain method)": [[205, "sympy.polys.domains.domain.Domain.is_negative"]], "is_negative() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[205, "sympy.polys.domains.gaussiandomains.GaussianDomain.is_negative"]], "is_nonnegative() (sympy.polys.domains.algebraicfield method)": [[205, "sympy.polys.domains.AlgebraicField.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.complexfield method)": [[205, "sympy.polys.domains.ComplexField.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.expressiondomain method)": [[205, "sympy.polys.domains.ExpressionDomain.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.fractionfield method)": [[205, "sympy.polys.domains.FractionField.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.polynomialring method)": [[205, "sympy.polys.domains.PolynomialRing.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.domain.domain method)": [[205, "sympy.polys.domains.domain.Domain.is_nonnegative"]], "is_nonnegative() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[205, "sympy.polys.domains.gaussiandomains.GaussianDomain.is_nonnegative"]], "is_nonpositive() (sympy.polys.domains.algebraicfield method)": [[205, "sympy.polys.domains.AlgebraicField.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.complexfield method)": [[205, "sympy.polys.domains.ComplexField.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.expressiondomain method)": [[205, "sympy.polys.domains.ExpressionDomain.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.fractionfield method)": [[205, "sympy.polys.domains.FractionField.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.polynomialring method)": [[205, "sympy.polys.domains.PolynomialRing.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.domain.domain method)": [[205, "sympy.polys.domains.domain.Domain.is_nonpositive"]], "is_nonpositive() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[205, "sympy.polys.domains.gaussiandomains.GaussianDomain.is_nonpositive"]], "is_one (sympy.polys.polyclasses.anp property)": [[205, "sympy.polys.polyclasses.ANP.is_one"]], "is_one (sympy.polys.polyclasses.dmf property)": [[205, "sympy.polys.polyclasses.DMF.is_one"]], "is_one (sympy.polys.polyclasses.dmp property)": [[205, "sympy.polys.polyclasses.DMP.is_one"]], "is_one() (sympy.polys.domains.domain.domain method)": [[205, "sympy.polys.domains.domain.Domain.is_one"]], "is_positive() (sympy.polys.domains.algebraicfield method)": [[205, "sympy.polys.domains.AlgebraicField.is_positive"]], "is_positive() (sympy.polys.domains.complexfield method)": [[205, "sympy.polys.domains.ComplexField.is_positive"]], "is_positive() (sympy.polys.domains.expressiondomain method)": [[205, "sympy.polys.domains.ExpressionDomain.is_positive"]], "is_positive() (sympy.polys.domains.fractionfield method)": [[205, "sympy.polys.domains.FractionField.is_positive"]], "is_positive() (sympy.polys.domains.polynomialring method)": [[205, "sympy.polys.domains.PolynomialRing.is_positive"]], "is_positive() (sympy.polys.domains.domain.domain method)": [[205, "sympy.polys.domains.domain.Domain.is_positive"]], "is_positive() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[205, "sympy.polys.domains.gaussiandomains.GaussianDomain.is_positive"]], "is_primitive (sympy.polys.polyclasses.dmp property)": [[205, "sympy.polys.polyclasses.DMP.is_primitive"]], "is_quadratic (sympy.polys.polyclasses.dmp property)": [[205, "sympy.polys.polyclasses.DMP.is_quadratic"]], "is_sqf (sympy.polys.polyclasses.dmp property)": [[205, "sympy.polys.polyclasses.DMP.is_sqf"]], "is_unit() (sympy.polys.domains.polynomialring method)": [[205, "sympy.polys.domains.PolynomialRing.is_unit"]], "is_unit() (sympy.polys.domains.field.field method)": [[205, "sympy.polys.domains.field.Field.is_unit"]], "is_zero (sympy.polys.polyclasses.anp property)": [[205, "sympy.polys.polyclasses.ANP.is_zero"]], "is_zero (sympy.polys.polyclasses.dmf property)": [[205, "sympy.polys.polyclasses.DMF.is_zero"]], "is_zero (sympy.polys.polyclasses.dmp property)": [[205, "sympy.polys.polyclasses.DMP.is_zero"]], "is_zero() (sympy.polys.domains.domain.domain method)": [[205, "sympy.polys.domains.domain.Domain.is_zero"]], "itercoeffs() (sympy.polys.rings.polyelement method)": [[205, "sympy.polys.rings.PolyElement.itercoeffs"]], "itermonoms() (sympy.polys.rings.polyelement method)": [[205, "sympy.polys.rings.PolyElement.itermonoms"]], "iterterms() (sympy.polys.rings.polyelement method)": [[205, "sympy.polys.rings.PolyElement.iterterms"]], "l1_norm() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.l1_norm"]], "l2_norm_squared() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.l2_norm_squared"]], "lcm() (sympy.polys.domains.complexfield method)": [[205, "sympy.polys.domains.ComplexField.lcm"]], "lcm() (sympy.polys.domains.gmpyintegerring method)": [[205, "sympy.polys.domains.GMPYIntegerRing.lcm"]], "lcm() (sympy.polys.domains.integerring method)": [[205, "sympy.polys.domains.IntegerRing.lcm"]], "lcm() (sympy.polys.domains.polynomialring method)": [[205, "sympy.polys.domains.PolynomialRing.lcm"]], "lcm() (sympy.polys.domains.realfield method)": [[205, "sympy.polys.domains.RealField.lcm"]], "lcm() (sympy.polys.domains.domain.domain method)": [[205, "sympy.polys.domains.domain.Domain.lcm"]], "lcm() (sympy.polys.domains.field.field method)": [[205, "sympy.polys.domains.field.Field.lcm"]], "lcm() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[205, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.lcm"]], "lcm() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.lcm"]], "leading_expv() (sympy.polys.rings.polyelement method)": [[205, "sympy.polys.rings.PolyElement.leading_expv"]], "leading_monom() (sympy.polys.rings.polyelement method)": [[205, "sympy.polys.rings.PolyElement.leading_monom"]], "leading_term() (sympy.polys.rings.polyelement method)": [[205, "sympy.polys.rings.PolyElement.leading_term"]], "lift() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.lift"]], "listcoeffs() (sympy.polys.rings.polyelement method)": [[205, "sympy.polys.rings.PolyElement.listcoeffs"]], "listmonoms() (sympy.polys.rings.polyelement method)": [[205, "sympy.polys.rings.PolyElement.listmonoms"]], "listterms() (sympy.polys.rings.polyelement method)": [[205, "sympy.polys.rings.PolyElement.listterms"]], "log() (sympy.polys.domains.integerring method)": [[205, "sympy.polys.domains.IntegerRing.log"]], "log() (sympy.polys.domains.domain.domain method)": [[205, "sympy.polys.domains.domain.Domain.log"]], "map() (sympy.polys.domains.domain.domain method)": [[205, "sympy.polys.domains.domain.Domain.map"]], "max_norm() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.max_norm"]], "maximal_order() (sympy.polys.domains.algebraicfield method)": [[205, "sympy.polys.domains.AlgebraicField.maximal_order"]], "mignotte_sep_bound_squared() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.mignotte_sep_bound_squared"]], "mod (sympy.polys.domains.algebraicfield attribute)": [[205, "sympy.polys.domains.AlgebraicField.mod"]], "monic() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.monic"]], "monic() (sympy.polys.rings.polyelement method)": [[205, "sympy.polys.rings.PolyElement.monic"]], "monomial_basis() (sympy.polys.rings.polyring method)": [[205, "sympy.polys.rings.PolyRing.monomial_basis"]], "monoms() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.monoms"]], "monoms() (sympy.polys.rings.polyelement method)": [[205, "sympy.polys.rings.PolyElement.monoms"]], "mul() (sympy.polys.domains.domain.domain method)": [[205, "sympy.polys.domains.domain.Domain.mul"]], "mul() (sympy.polys.polyclasses.dmf method)": [[205, "sympy.polys.polyclasses.DMF.mul"]], "mul() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.mul"]], "mul() (sympy.polys.rings.polyring method)": [[205, "sympy.polys.rings.PolyRing.mul"]], "mul_ground() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.mul_ground"]], "n() (sympy.polys.domains.domain.domain method)": [[205, "sympy.polys.domains.domain.Domain.n"]], "neg() (sympy.polys.domains.domain.domain method)": [[205, "sympy.polys.domains.domain.Domain.neg"]], "neg() (sympy.polys.polyclasses.dmf method)": [[205, "sympy.polys.polyclasses.DMF.neg"]], "neg() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.neg"]], "new() (sympy.polys.domains.gaussiandomains.gaussianelement class method)": [[205, "sympy.polys.domains.gaussiandomains.GaussianElement.new"]], "norm() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.norm"]], "normalize() (sympy.polys.domains.gaussiandomains.gaussianintegerring method)": [[205, "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.normalize"]], "nth() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.nth"]], "numer() (sympy.polys.domains.algebraicfield method)": [[205, "sympy.polys.domains.AlgebraicField.numer"]], "numer() (sympy.polys.domains.expressiondomain method)": [[205, "sympy.polys.domains.ExpressionDomain.numer"]], "numer() (sympy.polys.domains.fractionfield method)": [[205, "sympy.polys.domains.FractionField.numer"]], "numer() (sympy.polys.domains.gmpyrationalfield method)": [[205, "sympy.polys.domains.GMPYRationalField.numer"]], "numer() (sympy.polys.domains.rationalfield method)": [[205, "sympy.polys.domains.RationalField.numer"]], "numer() (sympy.polys.domains.domain.domain method)": [[205, "sympy.polys.domains.domain.Domain.numer"]], "numer() (sympy.polys.domains.gaussiandomains.gaussianrationalfield method)": [[205, "sympy.polys.domains.gaussiandomains.GaussianRationalField.numer"]], "numer() (sympy.polys.domains.ring.ring method)": [[205, "sympy.polys.domains.ring.Ring.numer"]], "numer() (sympy.polys.polyclasses.dmf method)": [[205, "sympy.polys.polyclasses.DMF.numer"]], "of_type() (sympy.polys.domains.domain.domain method)": [[205, "sympy.polys.domains.domain.Domain.of_type"]], "old_frac_field() (sympy.polys.domains.domain.domain method)": [[205, "sympy.polys.domains.domain.Domain.old_frac_field"]], "old_poly_ring() (sympy.polys.domains.domain.domain method)": [[205, "sympy.polys.domains.domain.Domain.old_poly_ring"]], "one (sympy.polys.domains.domain.domain attribute)": [[205, "sympy.polys.domains.domain.Domain.one"]], "orig_ext (sympy.polys.domains.algebraicfield attribute)": [[205, "sympy.polys.domains.AlgebraicField.orig_ext"]], "parent() (sympy.polys.domains.domainelement.domainelement method)": [[205, "sympy.polys.domains.domainelement.DomainElement.parent"]], "parent() (sympy.polys.domains.gaussiandomains.gaussianelement method)": [[205, "sympy.polys.domains.gaussiandomains.GaussianElement.parent"]], "pdiv() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.pdiv"]], "per() (sympy.polys.polyclasses.dmf method)": [[205, "sympy.polys.polyclasses.DMF.per"]], "per() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.per"]], "permute() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.permute"]], "pexquo() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.pexquo"]], "poly_ring() (sympy.polys.domains.domain.domain method)": [[205, "sympy.polys.domains.domain.Domain.poly_ring"]], "poly_unify() (sympy.polys.polyclasses.dmf method)": [[205, "sympy.polys.polyclasses.DMF.poly_unify"]], "pos() (sympy.polys.domains.domain.domain method)": [[205, "sympy.polys.domains.domain.Domain.pos"]], "pow() (sympy.polys.domains.domain.domain method)": [[205, "sympy.polys.domains.domain.Domain.pow"]], "pow() (sympy.polys.polyclasses.anp method)": [[205, "sympy.polys.polyclasses.ANP.pow"]], "pow() (sympy.polys.polyclasses.dmf method)": [[205, "sympy.polys.polyclasses.DMF.pow"]], "pow() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.pow"]], "pquo() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.pquo"]], "prem() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.prem"]], "primes_above() (sympy.polys.domains.algebraicfield method)": [[205, "sympy.polys.domains.AlgebraicField.primes_above"]], "primitive() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.primitive"]], "primitive() (sympy.polys.rings.polyelement method)": [[205, "sympy.polys.rings.PolyElement.primitive"]], "quadrant() (sympy.polys.domains.gaussiandomains.gaussianelement method)": [[205, "sympy.polys.domains.gaussiandomains.GaussianElement.quadrant"]], "quo() (sympy.polys.domains.gmpyrationalfield method)": [[205, "sympy.polys.domains.GMPYRationalField.quo"]], "quo() (sympy.polys.domains.rationalfield method)": [[205, "sympy.polys.domains.RationalField.quo"]], "quo() (sympy.polys.domains.domain.domain method)": [[205, "sympy.polys.domains.domain.Domain.quo"]], "quo() (sympy.polys.domains.field.field method)": [[205, "sympy.polys.domains.field.Field.quo"]], "quo() (sympy.polys.domains.ring.ring method)": [[205, "sympy.polys.domains.ring.Ring.quo"]], "quo() (sympy.polys.polyclasses.dmf method)": [[205, "sympy.polys.polyclasses.DMF.quo"]], "quo() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.quo"]], "quo_ground() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.quo_ground"]], "quotient_ring() (sympy.polys.domains.ring.ring method)": [[205, "sympy.polys.domains.ring.Ring.quotient_ring"]], "refine_root() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.refine_root"]], "rem() (sympy.polys.domains.gmpyrationalfield method)": [[205, "sympy.polys.domains.GMPYRationalField.rem"]], "rem() (sympy.polys.domains.rationalfield method)": [[205, "sympy.polys.domains.RationalField.rem"]], "rem() (sympy.polys.domains.domain.domain method)": [[205, "sympy.polys.domains.domain.Domain.rem"]], "rem() (sympy.polys.domains.field.field method)": [[205, "sympy.polys.domains.field.Field.rem"]], "rem() (sympy.polys.domains.ring.ring method)": [[205, "sympy.polys.domains.ring.Ring.rem"]], "rem() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.rem"]], "resultant() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.resultant"]], "revert() (sympy.polys.domains.domain.domain method)": [[205, "sympy.polys.domains.domain.Domain.revert"]], "revert() (sympy.polys.domains.field.field method)": [[205, "sympy.polys.domains.field.Field.revert"]], "revert() (sympy.polys.domains.ring.ring method)": [[205, "sympy.polys.domains.ring.Ring.revert"]], "revert() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.revert"]], "ring() (in module sympy.polys.rings)": [[205, "sympy.polys.rings.ring"]], "sfield() (in module sympy.polys.fields)": [[205, "sympy.polys.fields.sfield"]], "shift() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.shift"]], "slice() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.slice"]], "sqf_list() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.sqf_list"]], "sqf_list_include() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.sqf_list_include"]], "sqf_norm() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.sqf_norm"]], "sqf_part() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.sqf_part"]], "sqr() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.sqr"]], "sqrt() (sympy.polys.domains.gmpyintegerring method)": [[205, "sympy.polys.domains.GMPYIntegerRing.sqrt"]], "sqrt() (sympy.polys.domains.integerring method)": [[205, "sympy.polys.domains.IntegerRing.sqrt"]], "sqrt() (sympy.polys.domains.domain.domain method)": [[205, "sympy.polys.domains.domain.Domain.sqrt"]], "square() (sympy.polys.rings.polyelement method)": [[205, "sympy.polys.rings.PolyElement.square"]], "sring() (in module sympy.polys.rings)": [[205, "sympy.polys.rings.sring"]], "strip_zero() (sympy.polys.rings.polyelement method)": [[205, "sympy.polys.rings.PolyElement.strip_zero"]], "sturm() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.sturm"]], "sub() (sympy.polys.domains.domain.domain method)": [[205, "sympy.polys.domains.domain.Domain.sub"]], "sub() (sympy.polys.polyclasses.dmf method)": [[205, "sympy.polys.polyclasses.DMF.sub"]], "sub() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.sub"]], "sub_ground() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.sub_ground"]], "subresultants() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.subresultants"]], "symmetric_poly() (sympy.polys.rings.polyring method)": [[205, "sympy.polys.rings.PolyRing.symmetric_poly"]], "symmetrize() (sympy.polys.rings.polyelement method)": [[205, "sympy.polys.rings.PolyElement.symmetrize"]], "tail_degree() (sympy.polys.rings.polyelement method)": [[205, "sympy.polys.rings.PolyElement.tail_degree"]], "tail_degrees() (sympy.polys.rings.polyelement method)": [[205, "sympy.polys.rings.PolyElement.tail_degrees"]], "terms() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.terms"]], "terms() (sympy.polys.rings.polyelement method)": [[205, "sympy.polys.rings.PolyElement.terms"]], "terms_gcd() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.terms_gcd"]], "to_alg_num() (sympy.polys.domains.algebraicfield method)": [[205, "sympy.polys.domains.AlgebraicField.to_alg_num"]], "to_dict() (sympy.polys.polyclasses.anp method)": [[205, "sympy.polys.polyclasses.ANP.to_dict"]], "to_dict() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.to_dict"]], "to_exact() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.to_exact"]], "to_field() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.to_field"]], "to_list() (sympy.polys.polyclasses.anp method)": [[205, "sympy.polys.polyclasses.ANP.to_list"]], "to_list() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.to_list"]], "to_rational() (sympy.polys.domains.realfield method)": [[205, "sympy.polys.domains.RealField.to_rational"]], "to_ring() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.to_ring"]], "to_sympy() (sympy.polys.domains.algebraicfield method)": [[205, "sympy.polys.domains.AlgebraicField.to_sympy"]], "to_sympy() (sympy.polys.domains.complexfield method)": [[205, "sympy.polys.domains.ComplexField.to_sympy"]], "to_sympy() (sympy.polys.domains.expressiondomain method)": [[205, "sympy.polys.domains.ExpressionDomain.to_sympy"]], "to_sympy() (sympy.polys.domains.finitefield method)": [[205, "sympy.polys.domains.FiniteField.to_sympy"]], "to_sympy() (sympy.polys.domains.fractionfield method)": [[205, "sympy.polys.domains.FractionField.to_sympy"]], "to_sympy() (sympy.polys.domains.gmpyintegerring method)": [[205, "sympy.polys.domains.GMPYIntegerRing.to_sympy"]], "to_sympy() (sympy.polys.domains.gmpyrationalfield method)": [[205, "sympy.polys.domains.GMPYRationalField.to_sympy"]], "to_sympy() (sympy.polys.domains.integerring method)": [[205, "sympy.polys.domains.IntegerRing.to_sympy"]], "to_sympy() (sympy.polys.domains.polynomialring method)": [[205, "sympy.polys.domains.PolynomialRing.to_sympy"]], "to_sympy() (sympy.polys.domains.rationalfield method)": [[205, "sympy.polys.domains.RationalField.to_sympy"]], "to_sympy() (sympy.polys.domains.realfield method)": [[205, "sympy.polys.domains.RealField.to_sympy"]], "to_sympy() (sympy.polys.domains.domain.domain method)": [[205, "sympy.polys.domains.domain.Domain.to_sympy"]], "to_sympy() (sympy.polys.domains.gaussiandomains.gaussiandomain method)": [[205, "sympy.polys.domains.gaussiandomains.GaussianDomain.to_sympy"]], "to_sympy_dict() (sympy.polys.polyclasses.anp method)": [[205, "sympy.polys.polyclasses.ANP.to_sympy_dict"]], "to_sympy_dict() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.to_sympy_dict"]], "to_sympy_list() (sympy.polys.polyclasses.anp method)": [[205, "sympy.polys.polyclasses.ANP.to_sympy_list"]], "to_sympy_list() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.to_sympy_list"]], "to_tuple() (sympy.polys.polyclasses.anp method)": [[205, "sympy.polys.polyclasses.ANP.to_tuple"]], "to_tuple() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.to_tuple"]], "total_degree() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.total_degree"]], "tp (sympy.polys.domains.domain.domain property)": [[205, "sympy.polys.domains.domain.Domain.tp"]], "transform() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.transform"]], "trunc() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.trunc"]], "unify() (sympy.polys.domains.domain.domain method)": [[205, "sympy.polys.domains.domain.Domain.unify"]], "unify() (sympy.polys.polyclasses.anp method)": [[205, "sympy.polys.polyclasses.ANP.unify"]], "unify() (sympy.polys.polyclasses.dmp method)": [[205, "sympy.polys.polyclasses.DMP.unify"]], "vfield() (in module sympy.polys.fields)": [[205, "sympy.polys.fields.vfield"]], "vring() (in module sympy.polys.rings)": [[205, "sympy.polys.rings.vring"]], "xfield() (in module sympy.polys.fields)": [[205, "sympy.polys.fields.xfield"]], "xring() (in module sympy.polys.rings)": [[205, "sympy.polys.rings.xring"]], "zero (sympy.polys.domains.domain.domain attribute)": [[205, "sympy.polys.domains.domain.Domain.zero"]], "basepolynomialerror (class in sympy.polys.polyerrors)": [[207, "sympy.polys.polyerrors.BasePolynomialError"]], "coercionfailed (class in sympy.polys.polyerrors)": [[207, "sympy.polys.polyerrors.CoercionFailed"]], "computationfailed (class in sympy.polys.polyerrors)": [[207, "sympy.polys.polyerrors.ComputationFailed"]], "domainerror (class in sympy.polys.polyerrors)": [[207, "sympy.polys.polyerrors.DomainError"]], "evaluationfailed (class in sympy.polys.polyerrors)": [[207, "sympy.polys.polyerrors.EvaluationFailed"]], "exactquotientfailed (class in sympy.polys.polyerrors)": [[207, "sympy.polys.polyerrors.ExactQuotientFailed"]], "extraneousfactors (class in sympy.polys.polyerrors)": [[207, "sympy.polys.polyerrors.ExtraneousFactors"]], "flagerror (class in sympy.polys.polyerrors)": [[207, "sympy.polys.polyerrors.FlagError"]], "generatorserror (class in sympy.polys.polyerrors)": [[207, "sympy.polys.polyerrors.GeneratorsError"]], "generatorsneeded (class in sympy.polys.polyerrors)": [[207, "sympy.polys.polyerrors.GeneratorsNeeded"]], "heuristicgcdfailed (class in sympy.polys.polyerrors)": [[207, "sympy.polys.polyerrors.HeuristicGCDFailed"]], "homomorphismfailed (class in sympy.polys.polyerrors)": [[207, "sympy.polys.polyerrors.HomomorphismFailed"]], "isomorphismfailed (class in sympy.polys.polyerrors)": [[207, "sympy.polys.polyerrors.IsomorphismFailed"]], "multivariatepolynomialerror (class in sympy.polys.polyerrors)": [[207, "sympy.polys.polyerrors.MultivariatePolynomialError"]], "notalgebraic (class in sympy.polys.polyerrors)": [[207, "sympy.polys.polyerrors.NotAlgebraic"]], "notinvertible (class in sympy.polys.polyerrors)": [[207, "sympy.polys.polyerrors.NotInvertible"]], "notreversible (class in sympy.polys.polyerrors)": [[207, "sympy.polys.polyerrors.NotReversible"]], "operationnotsupported (class in sympy.polys.polyerrors)": [[207, "sympy.polys.polyerrors.OperationNotSupported"]], "optionerror (class in sympy.polys.polyerrors)": [[207, "sympy.polys.polyerrors.OptionError"]], "options (class in sympy.polys.polyoptions)": [[207, "sympy.polys.polyoptions.Options"]], "polificationfailed (class in sympy.polys.polyerrors)": [[207, "sympy.polys.polyerrors.PolificationFailed"]], "polynomialerror (class in sympy.polys.polyerrors)": [[207, "sympy.polys.polyerrors.PolynomialError"]], "refinementfailed (class in sympy.polys.polyerrors)": [[207, "sympy.polys.polyerrors.RefinementFailed"]], "unificationfailed (class in sympy.polys.polyerrors)": [[207, "sympy.polys.polyerrors.UnificationFailed"]], "univariatepolynomialerror (class in sympy.polys.polyerrors)": [[207, "sympy.polys.polyerrors.UnivariatePolynomialError"]], "_modgcd_multivariate_p() (in module sympy.polys.modulargcd)": [[207, "sympy.polys.modulargcd._modgcd_multivariate_p"]], "build_options() (in module sympy.polys.polyoptions)": [[207, "sympy.polys.polyoptions.build_options"]], "clone() (sympy.polys.polyoptions.options method)": [[207, "sympy.polys.polyoptions.Options.clone"]], "dmp_lc() (in module sympy.polys.densebasic)": [[207, "sympy.polys.densebasic.dmp_LC"]], "dmp_tc() (in module sympy.polys.densebasic)": [[207, "sympy.polys.densebasic.dmp_TC"]], "dmp_abs() (in module sympy.polys.densearith)": [[207, "sympy.polys.densearith.dmp_abs"]], "dmp_add() (in module sympy.polys.densearith)": [[207, "sympy.polys.densearith.dmp_add"]], "dmp_add_ground() (in module sympy.polys.densearith)": [[207, "sympy.polys.densearith.dmp_add_ground"]], "dmp_add_mul() (in module sympy.polys.densearith)": [[207, "sympy.polys.densearith.dmp_add_mul"]], "dmp_add_term() (in module sympy.polys.densearith)": [[207, "sympy.polys.densearith.dmp_add_term"]], "dmp_apply_pairs() (in module sympy.polys.densebasic)": [[207, "sympy.polys.densebasic.dmp_apply_pairs"]], "dmp_cancel() (in module sympy.polys.euclidtools)": [[207, "sympy.polys.euclidtools.dmp_cancel"]], "dmp_clear_denoms() (in module sympy.polys.densetools)": [[207, "sympy.polys.densetools.dmp_clear_denoms"]], "dmp_compose() (in module sympy.polys.densetools)": [[207, "sympy.polys.densetools.dmp_compose"]], "dmp_content() (in module sympy.polys.euclidtools)": [[207, "sympy.polys.euclidtools.dmp_content"]], "dmp_convert() (in module sympy.polys.densebasic)": [[207, "sympy.polys.densebasic.dmp_convert"]], "dmp_copy() (in module sympy.polys.densebasic)": [[207, "sympy.polys.densebasic.dmp_copy"]], "dmp_deflate() (in module sympy.polys.densebasic)": [[207, "sympy.polys.densebasic.dmp_deflate"]], "dmp_degree() (in module sympy.polys.densebasic)": [[207, "sympy.polys.densebasic.dmp_degree"]], "dmp_degree_in() (in module sympy.polys.densebasic)": [[207, "sympy.polys.densebasic.dmp_degree_in"]], "dmp_degree_list() (in module sympy.polys.densebasic)": [[207, "sympy.polys.densebasic.dmp_degree_list"]], "dmp_diff() (in module sympy.polys.densetools)": [[207, "sympy.polys.densetools.dmp_diff"]], "dmp_diff_eval_in() (in module sympy.polys.densetools)": [[207, "sympy.polys.densetools.dmp_diff_eval_in"]], "dmp_diff_in() (in module sympy.polys.densetools)": [[207, "sympy.polys.densetools.dmp_diff_in"]], "dmp_discriminant() (in module sympy.polys.euclidtools)": [[207, "sympy.polys.euclidtools.dmp_discriminant"]], "dmp_div() (in module sympy.polys.densearith)": [[207, "sympy.polys.densearith.dmp_div"]], "dmp_eject() (in module sympy.polys.densebasic)": [[207, "sympy.polys.densebasic.dmp_eject"]], "dmp_euclidean_prs() (in module sympy.polys.euclidtools)": [[207, "sympy.polys.euclidtools.dmp_euclidean_prs"]], "dmp_eval() (in module sympy.polys.densetools)": [[207, "sympy.polys.densetools.dmp_eval"]], "dmp_eval_in() (in module sympy.polys.densetools)": [[207, "sympy.polys.densetools.dmp_eval_in"]], "dmp_eval_tail() (in module sympy.polys.densetools)": [[207, "sympy.polys.densetools.dmp_eval_tail"]], "dmp_exclude() (in module sympy.polys.densebasic)": [[207, "sympy.polys.densebasic.dmp_exclude"]], "dmp_expand() (in module sympy.polys.densearith)": [[207, "sympy.polys.densearith.dmp_expand"]], "dmp_exquo() (in module sympy.polys.densearith)": [[207, "sympy.polys.densearith.dmp_exquo"]], "dmp_exquo_ground() (in module sympy.polys.densearith)": [[207, "sympy.polys.densearith.dmp_exquo_ground"]], "dmp_ext_factor() (in module sympy.polys.factortools)": [[207, "sympy.polys.factortools.dmp_ext_factor"]], "dmp_factor_list() (in module sympy.polys.factortools)": [[207, "sympy.polys.factortools.dmp_factor_list"]], "dmp_factor_list_include() (in module sympy.polys.factortools)": [[207, "sympy.polys.factortools.dmp_factor_list_include"]], "dmp_ff_div() (in module sympy.polys.densearith)": [[207, "sympy.polys.densearith.dmp_ff_div"]], "dmp_ff_prs_gcd() (in module sympy.polys.euclidtools)": [[207, "sympy.polys.euclidtools.dmp_ff_prs_gcd"]], "dmp_from_dict() (in module sympy.polys.densebasic)": [[207, "sympy.polys.densebasic.dmp_from_dict"]], "dmp_from_sympy() (in module sympy.polys.densebasic)": [[207, "sympy.polys.densebasic.dmp_from_sympy"]], "dmp_gcd() (in module sympy.polys.euclidtools)": [[207, "sympy.polys.euclidtools.dmp_gcd"]], "dmp_gcdex() (in module sympy.polys.euclidtools)": [[207, "sympy.polys.euclidtools.dmp_gcdex"]], "dmp_ground() (in module sympy.polys.densebasic)": [[207, "sympy.polys.densebasic.dmp_ground"]], "dmp_ground_lc() (in module sympy.polys.densebasic)": [[207, "sympy.polys.densebasic.dmp_ground_LC"]], "dmp_ground_tc() (in module sympy.polys.densebasic)": [[207, "sympy.polys.densebasic.dmp_ground_TC"]], "dmp_ground_content() (in module sympy.polys.densetools)": [[207, "sympy.polys.densetools.dmp_ground_content"]], "dmp_ground_extract() (in module sympy.polys.densetools)": [[207, "sympy.polys.densetools.dmp_ground_extract"]], "dmp_ground_monic() (in module sympy.polys.densetools)": [[207, "sympy.polys.densetools.dmp_ground_monic"]], "dmp_ground_nth() (in module sympy.polys.densebasic)": [[207, "sympy.polys.densebasic.dmp_ground_nth"]], "dmp_ground_p() (in module sympy.polys.densebasic)": [[207, "sympy.polys.densebasic.dmp_ground_p"]], "dmp_ground_primitive() (in module sympy.polys.densetools)": [[207, "sympy.polys.densetools.dmp_ground_primitive"]], "dmp_ground_trunc() (in module sympy.polys.densetools)": [[207, "sympy.polys.densetools.dmp_ground_trunc"]], "dmp_grounds() (in module sympy.polys.densebasic)": [[207, "sympy.polys.densebasic.dmp_grounds"]], "dmp_half_gcdex() (in module sympy.polys.euclidtools)": [[207, "sympy.polys.euclidtools.dmp_half_gcdex"]], "dmp_include() (in module sympy.polys.densebasic)": [[207, "sympy.polys.densebasic.dmp_include"]], "dmp_inflate() (in module sympy.polys.densebasic)": [[207, "sympy.polys.densebasic.dmp_inflate"]], "dmp_inject() (in module sympy.polys.densebasic)": [[207, "sympy.polys.densebasic.dmp_inject"]], "dmp_inner_gcd() (in module sympy.polys.euclidtools)": [[207, "sympy.polys.euclidtools.dmp_inner_gcd"]], "dmp_inner_subresultants() (in module sympy.polys.euclidtools)": [[207, "sympy.polys.euclidtools.dmp_inner_subresultants"]], "dmp_integrate() (in module sympy.polys.densetools)": [[207, "sympy.polys.densetools.dmp_integrate"]], "dmp_integrate_in() (in module sympy.polys.densetools)": [[207, "sympy.polys.densetools.dmp_integrate_in"]], "dmp_invert() (in module sympy.polys.euclidtools)": [[207, "sympy.polys.euclidtools.dmp_invert"]], "dmp_irreducible_p() (in module sympy.polys.factortools)": [[207, "sympy.polys.factortools.dmp_irreducible_p"]], "dmp_l1_norm() (in module sympy.polys.densearith)": [[207, "sympy.polys.densearith.dmp_l1_norm"]], "dmp_lcm() (in module sympy.polys.euclidtools)": [[207, "sympy.polys.euclidtools.dmp_lcm"]], "dmp_lift() (in module sympy.polys.densetools)": [[207, "sympy.polys.densetools.dmp_lift"]], "dmp_list_terms() (in module sympy.polys.densebasic)": [[207, "sympy.polys.densebasic.dmp_list_terms"]], "dmp_max_norm() (in module sympy.polys.densearith)": [[207, "sympy.polys.densearith.dmp_max_norm"]], "dmp_mul() (in module sympy.polys.densearith)": [[207, "sympy.polys.densearith.dmp_mul"]], "dmp_mul_ground() (in module sympy.polys.densearith)": [[207, "sympy.polys.densearith.dmp_mul_ground"]], "dmp_mul_term() (in module sympy.polys.densearith)": [[207, "sympy.polys.densearith.dmp_mul_term"]], "dmp_multi_deflate() (in module sympy.polys.densebasic)": [[207, "sympy.polys.densebasic.dmp_multi_deflate"]], "dmp_neg() (in module sympy.polys.densearith)": [[207, "sympy.polys.densearith.dmp_neg"]], "dmp_negative_p() (in module sympy.polys.densebasic)": [[207, "sympy.polys.densebasic.dmp_negative_p"]], "dmp_nest() (in module sympy.polys.densebasic)": [[207, "sympy.polys.densebasic.dmp_nest"]], "dmp_normal() (in module sympy.polys.densebasic)": [[207, "sympy.polys.densebasic.dmp_normal"]], "dmp_nth() (in module sympy.polys.densebasic)": [[207, "sympy.polys.densebasic.dmp_nth"]], "dmp_one() (in module sympy.polys.densebasic)": [[207, "sympy.polys.densebasic.dmp_one"]], "dmp_one_p() (in module sympy.polys.densebasic)": [[207, "sympy.polys.densebasic.dmp_one_p"]], "dmp_pdiv() (in module sympy.polys.densearith)": [[207, "sympy.polys.densearith.dmp_pdiv"]], "dmp_permute() (in module sympy.polys.densebasic)": [[207, "sympy.polys.densebasic.dmp_permute"]], "dmp_pexquo() (in module sympy.polys.densearith)": [[207, "sympy.polys.densearith.dmp_pexquo"]], "dmp_positive_p() (in module sympy.polys.densebasic)": [[207, "sympy.polys.densebasic.dmp_positive_p"]], "dmp_pow() (in module sympy.polys.densearith)": [[207, "sympy.polys.densearith.dmp_pow"]], "dmp_pquo() (in module sympy.polys.densearith)": [[207, "sympy.polys.densearith.dmp_pquo"]], "dmp_prem() (in module sympy.polys.densearith)": [[207, "sympy.polys.densearith.dmp_prem"]], "dmp_primitive() (in module sympy.polys.euclidtools)": [[207, "sympy.polys.euclidtools.dmp_primitive"]], "dmp_primitive_prs() (in module sympy.polys.euclidtools)": [[207, "sympy.polys.euclidtools.dmp_primitive_prs"]], "dmp_prs_resultant() (in module sympy.polys.euclidtools)": [[207, "sympy.polys.euclidtools.dmp_prs_resultant"]], "dmp_qq_collins_resultant() (in module sympy.polys.euclidtools)": [[207, "sympy.polys.euclidtools.dmp_qq_collins_resultant"]], "dmp_qq_heu_gcd() (in module sympy.polys.euclidtools)": [[207, "sympy.polys.euclidtools.dmp_qq_heu_gcd"]], "dmp_quo() (in module sympy.polys.densearith)": [[207, "sympy.polys.densearith.dmp_quo"]], "dmp_quo_ground() (in module sympy.polys.densearith)": [[207, "sympy.polys.densearith.dmp_quo_ground"]], "dmp_raise() (in module sympy.polys.densebasic)": [[207, "sympy.polys.densebasic.dmp_raise"]], "dmp_rem() (in module sympy.polys.densearith)": [[207, "sympy.polys.densearith.dmp_rem"]], "dmp_resultant() (in module sympy.polys.euclidtools)": [[207, "sympy.polys.euclidtools.dmp_resultant"]], "dmp_revert() (in module sympy.polys.densetools)": [[207, "sympy.polys.densetools.dmp_revert"]], "dmp_rr_div() (in module sympy.polys.densearith)": [[207, "sympy.polys.densearith.dmp_rr_div"]], "dmp_rr_prs_gcd() (in module sympy.polys.euclidtools)": [[207, "sympy.polys.euclidtools.dmp_rr_prs_gcd"]], "dmp_slice() (in module sympy.polys.densebasic)": [[207, "sympy.polys.densebasic.dmp_slice"]], "dmp_sqr() (in module sympy.polys.densearith)": [[207, "sympy.polys.densearith.dmp_sqr"]], "dmp_strip() (in module sympy.polys.densebasic)": [[207, "sympy.polys.densebasic.dmp_strip"]], "dmp_sub() (in module sympy.polys.densearith)": [[207, "sympy.polys.densearith.dmp_sub"]], "dmp_sub_ground() (in module sympy.polys.densearith)": [[207, "sympy.polys.densearith.dmp_sub_ground"]], "dmp_sub_mul() (in module sympy.polys.densearith)": [[207, "sympy.polys.densearith.dmp_sub_mul"]], "dmp_sub_term() (in module sympy.polys.densearith)": [[207, "sympy.polys.densearith.dmp_sub_term"]], "dmp_subresultants() (in module sympy.polys.euclidtools)": [[207, "sympy.polys.euclidtools.dmp_subresultants"]], "dmp_swap() (in module sympy.polys.densebasic)": [[207, "sympy.polys.densebasic.dmp_swap"]], "dmp_terms_gcd() (in module sympy.polys.densebasic)": [[207, "sympy.polys.densebasic.dmp_terms_gcd"]], "dmp_to_dict() (in module sympy.polys.densebasic)": [[207, "sympy.polys.densebasic.dmp_to_dict"]], "dmp_to_tuple() (in module sympy.polys.densebasic)": [[207, "sympy.polys.densebasic.dmp_to_tuple"]], "dmp_trial_division() (in module sympy.polys.factortools)": [[207, "sympy.polys.factortools.dmp_trial_division"]], "dmp_true_lt() (in module sympy.polys.densebasic)": [[207, "sympy.polys.densebasic.dmp_true_LT"]], "dmp_trunc() (in module sympy.polys.densetools)": [[207, "sympy.polys.densetools.dmp_trunc"]], "dmp_validate() (in module sympy.polys.densebasic)": [[207, "sympy.polys.densebasic.dmp_validate"]], "dmp_zero() (in module sympy.polys.densebasic)": [[207, "sympy.polys.densebasic.dmp_zero"]], "dmp_zero_p() (in module sympy.polys.densebasic)": [[207, "sympy.polys.densebasic.dmp_zero_p"]], "dmp_zeros() (in module sympy.polys.densebasic)": [[207, "sympy.polys.densebasic.dmp_zeros"]], "dmp_zz_collins_resultant() (in module sympy.polys.euclidtools)": [[207, "sympy.polys.euclidtools.dmp_zz_collins_resultant"]], "dmp_zz_diophantine() (in module sympy.polys.factortools)": [[207, "sympy.polys.factortools.dmp_zz_diophantine"]], "dmp_zz_factor() (in module sympy.polys.factortools)": [[207, "sympy.polys.factortools.dmp_zz_factor"]], "dmp_zz_heu_gcd() (in module sympy.polys.euclidtools)": [[207, "sympy.polys.euclidtools.dmp_zz_heu_gcd"]], "dmp_zz_mignotte_bound() (in module sympy.polys.factortools)": [[207, "sympy.polys.factortools.dmp_zz_mignotte_bound"]], "dmp_zz_modular_resultant() (in module sympy.polys.euclidtools)": [[207, "sympy.polys.euclidtools.dmp_zz_modular_resultant"]], "dmp_zz_wang() (in module sympy.polys.factortools)": [[207, "sympy.polys.factortools.dmp_zz_wang"]], "dmp_zz_wang_hensel_lifting() (in module sympy.polys.factortools)": [[207, "sympy.polys.factortools.dmp_zz_wang_hensel_lifting"]], "dmp_zz_wang_lead_coeffs() (in module sympy.polys.factortools)": [[207, "sympy.polys.factortools.dmp_zz_wang_lead_coeffs"]], "dmp_zz_wang_non_divisors() (in module sympy.polys.factortools)": [[207, "sympy.polys.factortools.dmp_zz_wang_non_divisors"]], "dmp_zz_wang_test_points() (in module sympy.polys.factortools)": [[207, "sympy.polys.factortools.dmp_zz_wang_test_points"]], "dup_content() (in module sympy.polys.densetools)": [[207, "sympy.polys.densetools.dup_content"]], "dup_cyclotomic_p() (in module sympy.polys.factortools)": [[207, "sympy.polys.factortools.dup_cyclotomic_p"]], "dup_decompose() (in module sympy.polys.densetools)": [[207, "sympy.polys.densetools.dup_decompose"]], "dup_extract() (in module sympy.polys.densetools)": [[207, "sympy.polys.densetools.dup_extract"]], "dup_gf_factor() (in module sympy.polys.factortools)": [[207, "sympy.polys.factortools.dup_gf_factor"]], "dup_lshift() (in module sympy.polys.densearith)": [[207, "sympy.polys.densearith.dup_lshift"]], "dup_mirror() (in module sympy.polys.densetools)": [[207, "sympy.polys.densetools.dup_mirror"]], "dup_monic() (in module sympy.polys.densetools)": [[207, "sympy.polys.densetools.dup_monic"]], "dup_primitive() (in module sympy.polys.densetools)": [[207, "sympy.polys.densetools.dup_primitive"]], "dup_random() (in module sympy.polys.densebasic)": [[207, "sympy.polys.densebasic.dup_random"]], "dup_real_imag() (in module sympy.polys.densetools)": [[207, "sympy.polys.densetools.dup_real_imag"]], "dup_reverse() (in module sympy.polys.densebasic)": [[207, "sympy.polys.densebasic.dup_reverse"]], "dup_rshift() (in module sympy.polys.densearith)": [[207, "sympy.polys.densearith.dup_rshift"]], "dup_scale() (in module sympy.polys.densetools)": [[207, "sympy.polys.densetools.dup_scale"]], "dup_shift() (in module sympy.polys.densetools)": [[207, "sympy.polys.densetools.dup_shift"]], "dup_sign_variations() (in module sympy.polys.densetools)": [[207, "sympy.polys.densetools.dup_sign_variations"]], "dup_transform() (in module sympy.polys.densetools)": [[207, "sympy.polys.densetools.dup_transform"]], "dup_zz_cyclotomic_factor() (in module sympy.polys.factortools)": [[207, "sympy.polys.factortools.dup_zz_cyclotomic_factor"]], "dup_zz_cyclotomic_poly() (in module sympy.polys.factortools)": [[207, "sympy.polys.factortools.dup_zz_cyclotomic_poly"]], "dup_zz_factor() (in module sympy.polys.factortools)": [[207, "sympy.polys.factortools.dup_zz_factor"]], "dup_zz_factor_sqf() (in module sympy.polys.factortools)": [[207, "sympy.polys.factortools.dup_zz_factor_sqf"]], "dup_zz_hensel_lift() (in module sympy.polys.factortools)": [[207, "sympy.polys.factortools.dup_zz_hensel_lift"]], "dup_zz_hensel_step() (in module sympy.polys.factortools)": [[207, "sympy.polys.factortools.dup_zz_hensel_step"]], "dup_zz_irreducible_p() (in module sympy.polys.factortools)": [[207, "sympy.polys.factortools.dup_zz_irreducible_p"]], "dup_zz_zassenhaus() (in module sympy.polys.factortools)": [[207, "sympy.polys.factortools.dup_zz_zassenhaus"]], "func_field_modgcd() (in module sympy.polys.modulargcd)": [[207, "sympy.polys.modulargcd.func_field_modgcd"]], "gf_lc() (in module sympy.polys.galoistools)": [[207, "sympy.polys.galoistools.gf_LC"]], "gf_qbasis() (in module sympy.polys.galoistools)": [[207, "sympy.polys.galoistools.gf_Qbasis"]], "gf_qmatrix() (in module sympy.polys.galoistools)": [[207, "sympy.polys.galoistools.gf_Qmatrix"]], "gf_tc() (in module sympy.polys.galoistools)": [[207, "sympy.polys.galoistools.gf_TC"]], "gf_add() (in module sympy.polys.galoistools)": [[207, "sympy.polys.galoistools.gf_add"]], "gf_add_ground() (in module sympy.polys.galoistools)": [[207, "sympy.polys.galoistools.gf_add_ground"]], "gf_add_mul() (in module sympy.polys.galoistools)": [[207, "sympy.polys.galoistools.gf_add_mul"]], "gf_berlekamp() (in module sympy.polys.galoistools)": [[207, "sympy.polys.galoistools.gf_berlekamp"]], "gf_cofactors() (in module sympy.polys.galoistools)": [[207, "sympy.polys.galoistools.gf_cofactors"]], "gf_compose() (in module sympy.polys.galoistools)": [[207, "sympy.polys.galoistools.gf_compose"]], "gf_compose_mod() (in module sympy.polys.galoistools)": [[207, "sympy.polys.galoistools.gf_compose_mod"]], "gf_crt() (in module sympy.polys.galoistools)": [[207, "sympy.polys.galoistools.gf_crt"]], "gf_crt1() (in module sympy.polys.galoistools)": [[207, "sympy.polys.galoistools.gf_crt1"]], "gf_crt2() (in module sympy.polys.galoistools)": [[207, "sympy.polys.galoistools.gf_crt2"]], "gf_csolve() (in module sympy.polys.galoistools)": [[207, "sympy.polys.galoistools.gf_csolve"]], "gf_degree() (in module sympy.polys.galoistools)": [[207, "sympy.polys.galoistools.gf_degree"]], "gf_diff() (in module sympy.polys.galoistools)": [[207, "sympy.polys.galoistools.gf_diff"]], "gf_div() (in module sympy.polys.galoistools)": [[207, "sympy.polys.galoistools.gf_div"]], "gf_eval() (in module sympy.polys.galoistools)": [[207, "sympy.polys.galoistools.gf_eval"]], "gf_expand() (in module sympy.polys.galoistools)": [[207, "sympy.polys.galoistools.gf_expand"]], "gf_exquo() (in module sympy.polys.galoistools)": [[207, "sympy.polys.galoistools.gf_exquo"]], "gf_factor() (in module sympy.polys.galoistools)": [[207, "sympy.polys.galoistools.gf_factor"]], "gf_factor_sqf() (in module sympy.polys.galoistools)": [[207, "sympy.polys.galoistools.gf_factor_sqf"]], "gf_from_dict() (in module sympy.polys.galoistools)": [[207, "sympy.polys.galoistools.gf_from_dict"]], "gf_from_int_poly() (in module sympy.polys.galoistools)": [[207, "sympy.polys.galoistools.gf_from_int_poly"]], "gf_gcd() (in module sympy.polys.galoistools)": [[207, "sympy.polys.galoistools.gf_gcd"]], "gf_gcdex() (in module sympy.polys.galoistools)": [[207, "sympy.polys.galoistools.gf_gcdex"]], "gf_int() (in module sympy.polys.galoistools)": [[207, "sympy.polys.galoistools.gf_int"]], "gf_irreducible() (in module sympy.polys.galoistools)": [[207, "sympy.polys.galoistools.gf_irreducible"]], "gf_irreducible_p() (in module sympy.polys.galoistools)": [[207, "sympy.polys.galoistools.gf_irreducible_p"]], "gf_lcm() (in module sympy.polys.galoistools)": [[207, "sympy.polys.galoistools.gf_lcm"]], "gf_lshift() (in module sympy.polys.galoistools)": [[207, "sympy.polys.galoistools.gf_lshift"]], "gf_monic() (in module sympy.polys.galoistools)": [[207, "sympy.polys.galoistools.gf_monic"]], "gf_mul() (in module sympy.polys.galoistools)": [[207, "sympy.polys.galoistools.gf_mul"]], "gf_mul_ground() (in module sympy.polys.galoistools)": [[207, "sympy.polys.galoistools.gf_mul_ground"]], "gf_multi_eval() (in module sympy.polys.galoistools)": [[207, "sympy.polys.galoistools.gf_multi_eval"]], "gf_neg() (in module sympy.polys.galoistools)": [[207, "sympy.polys.galoistools.gf_neg"]], "gf_normal() (in module sympy.polys.galoistools)": [[207, "sympy.polys.galoistools.gf_normal"]], "gf_pow() (in module sympy.polys.galoistools)": [[207, "sympy.polys.galoistools.gf_pow"]], "gf_pow_mod() (in module sympy.polys.galoistools)": [[207, "sympy.polys.galoistools.gf_pow_mod"]], "gf_quo() (in module sympy.polys.galoistools)": [[207, "sympy.polys.galoistools.gf_quo"]], "gf_quo_ground() (in module sympy.polys.galoistools)": [[207, "sympy.polys.galoistools.gf_quo_ground"]], "gf_random() (in module sympy.polys.galoistools)": [[207, "sympy.polys.galoistools.gf_random"]], "gf_rem() (in module sympy.polys.galoistools)": [[207, "sympy.polys.galoistools.gf_rem"]], "gf_rshift() (in module sympy.polys.galoistools)": [[207, "sympy.polys.galoistools.gf_rshift"]], "gf_shoup() (in module sympy.polys.galoistools)": [[207, "sympy.polys.galoistools.gf_shoup"]], "gf_sqf_list() (in module sympy.polys.galoistools)": [[207, "sympy.polys.galoistools.gf_sqf_list"]], "gf_sqf_p() (in module sympy.polys.galoistools)": [[207, "sympy.polys.galoistools.gf_sqf_p"]], "gf_sqf_part() (in module sympy.polys.galoistools)": [[207, "sympy.polys.galoistools.gf_sqf_part"]], "gf_sqr() (in module sympy.polys.galoistools)": [[207, "sympy.polys.galoistools.gf_sqr"]], "gf_strip() (in module sympy.polys.galoistools)": [[207, "sympy.polys.galoistools.gf_strip"]], "gf_sub() (in module sympy.polys.galoistools)": [[207, "sympy.polys.galoistools.gf_sub"]], "gf_sub_ground() (in module sympy.polys.galoistools)": [[207, "sympy.polys.galoistools.gf_sub_ground"]], "gf_sub_mul() (in module sympy.polys.galoistools)": [[207, "sympy.polys.galoistools.gf_sub_mul"]], "gf_to_dict() (in module sympy.polys.galoistools)": [[207, "sympy.polys.galoistools.gf_to_dict"]], "gf_to_int_poly() (in module sympy.polys.galoistools)": [[207, "sympy.polys.galoistools.gf_to_int_poly"]], "gf_trace_map() (in module sympy.polys.galoistools)": [[207, "sympy.polys.galoistools.gf_trace_map"]], "gf_trunc() (in module sympy.polys.galoistools)": [[207, "sympy.polys.galoistools.gf_trunc"]], "gf_value() (in module sympy.polys.galoistools)": [[207, "sympy.polys.galoistools.gf_value"]], "gf_zassenhaus() (in module sympy.polys.galoistools)": [[207, "sympy.polys.galoistools.gf_zassenhaus"]], "groebner() (in module sympy.polys.groebnertools)": [[207, "sympy.polys.groebnertools.groebner"]], "is_groebner() (in module sympy.polys.groebnertools)": [[207, "sympy.polys.groebnertools.is_groebner"]], "is_minimal() (in module sympy.polys.groebnertools)": [[207, "sympy.polys.groebnertools.is_minimal"]], "is_reduced() (in module sympy.polys.groebnertools)": [[207, "sympy.polys.groebnertools.is_reduced"]], "matrix_fglm() (in module sympy.polys.fglmtools)": [[207, "sympy.polys.fglmtools.matrix_fglm"]], "modgcd_bivariate() (in module sympy.polys.modulargcd)": [[207, "sympy.polys.modulargcd.modgcd_bivariate"]], "modgcd_multivariate() (in module sympy.polys.modulargcd)": [[207, "sympy.polys.modulargcd.modgcd_multivariate"]], "modgcd_univariate() (in module sympy.polys.modulargcd)": [[207, "sympy.polys.modulargcd.modgcd_univariate"]], "red_groebner() (in module sympy.polys.groebnertools)": [[207, "sympy.polys.groebnertools.red_groebner"]], "sdm_lc() (in module sympy.polys.distributedmodules)": [[207, "sympy.polys.distributedmodules.sdm_LC"]], "sdm_lm() (in module sympy.polys.distributedmodules)": [[207, "sympy.polys.distributedmodules.sdm_LM"]], "sdm_lt() (in module sympy.polys.distributedmodules)": [[207, "sympy.polys.distributedmodules.sdm_LT"]], "sdm_add() (in module sympy.polys.distributedmodules)": [[207, "sympy.polys.distributedmodules.sdm_add"]], "sdm_deg() (in module sympy.polys.distributedmodules)": [[207, "sympy.polys.distributedmodules.sdm_deg"]], "sdm_ecart() (in module sympy.polys.distributedmodules)": [[207, "sympy.polys.distributedmodules.sdm_ecart"]], "sdm_from_dict() (in module sympy.polys.distributedmodules)": [[207, "sympy.polys.distributedmodules.sdm_from_dict"]], "sdm_from_vector() (in module sympy.polys.distributedmodules)": [[207, "sympy.polys.distributedmodules.sdm_from_vector"]], "sdm_groebner() (in module sympy.polys.distributedmodules)": [[207, "sympy.polys.distributedmodules.sdm_groebner"]], "sdm_monomial_deg() (in module sympy.polys.distributedmodules)": [[207, "sympy.polys.distributedmodules.sdm_monomial_deg"]], "sdm_monomial_divides() (in module sympy.polys.distributedmodules)": [[207, "sympy.polys.distributedmodules.sdm_monomial_divides"]], "sdm_monomial_mul() (in module sympy.polys.distributedmodules)": [[207, "sympy.polys.distributedmodules.sdm_monomial_mul"]], "sdm_mul_term() (in module sympy.polys.distributedmodules)": [[207, "sympy.polys.distributedmodules.sdm_mul_term"]], "sdm_nf_mora() (in module sympy.polys.distributedmodules)": [[207, "sympy.polys.distributedmodules.sdm_nf_mora"]], "sdm_spoly() (in module sympy.polys.distributedmodules)": [[207, "sympy.polys.distributedmodules.sdm_spoly"]], "sdm_to_dict() (in module sympy.polys.distributedmodules)": [[207, "sympy.polys.distributedmodules.sdm_to_dict"]], "sdm_to_vector() (in module sympy.polys.distributedmodules)": [[207, "sympy.polys.distributedmodules.sdm_to_vector"]], "sdm_zero() (in module sympy.polys.distributedmodules)": [[207, "sympy.polys.distributedmodules.sdm_zero"]], "setup() (in module sympy.polys.polyconfig)": [[207, "sympy.polys.polyconfig.setup"]], "spoly() (in module sympy.polys.groebnertools)": [[207, "sympy.polys.groebnertools.spoly"]], "sympy.polys.polyconfig": [[207, "module-sympy.polys.polyconfig"]], "sympy.polys.polyoptions": [[207, "module-sympy.polys.polyoptions"]], "algintpowers (class in sympy.polys.numberfields.utilities)": [[209, "sympy.polys.numberfields.utilities.AlgIntPowers"]], "endomorphismring (class in sympy.polys.numberfields.modules)": [[209, "sympy.polys.numberfields.modules.EndomorphismRing"]], "innerendomorphism (class in sympy.polys.numberfields.modules)": [[209, "sympy.polys.numberfields.modules.InnerEndomorphism"]], "module (class in sympy.polys.numberfields.modules)": [[209, "sympy.polys.numberfields.modules.Module"]], "moduleelement (class in sympy.polys.numberfields.modules)": [[209, "sympy.polys.numberfields.modules.ModuleElement"]], "moduleendomorphism (class in sympy.polys.numberfields.modules)": [[209, "sympy.polys.numberfields.modules.ModuleEndomorphism"]], "modulehomomorphism (class in sympy.polys.numberfields.modules)": [[209, "sympy.polys.numberfields.modules.ModuleHomomorphism"]], "powerbasis (class in sympy.polys.numberfields.modules)": [[209, "sympy.polys.numberfields.modules.PowerBasis"]], "powerbasiselement (class in sympy.polys.numberfields.modules)": [[209, "sympy.polys.numberfields.modules.PowerBasisElement"]], "primeideal (class in sympy.polys.numberfields.primes)": [[209, "sympy.polys.numberfields.primes.PrimeIdeal"]], "qq_col (sympy.polys.numberfields.modules.moduleelement property)": [[209, "sympy.polys.numberfields.modules.ModuleElement.QQ_col"]], "qq_matrix (sympy.polys.numberfields.modules.submodule property)": [[209, "sympy.polys.numberfields.modules.Submodule.QQ_matrix"]], "submodule (class in sympy.polys.numberfields.modules)": [[209, "sympy.polys.numberfields.modules.Submodule"]], "t (sympy.polys.numberfields.modules.powerbasiselement property)": [[209, "sympy.polys.numberfields.modules.PowerBasisElement.T"]], "__add__() (sympy.polys.numberfields.modules.moduleelement method)": [[209, "sympy.polys.numberfields.modules.ModuleElement.__add__"]], "__add__() (sympy.polys.numberfields.primes.primeideal method)": [[209, "sympy.polys.numberfields.primes.PrimeIdeal.__add__"]], "__call__() (sympy.polys.numberfields.modules.module method)": [[209, "sympy.polys.numberfields.modules.Module.__call__"]], "__init__() (sympy.polys.numberfields.modules.endomorphismring method)": [[209, "sympy.polys.numberfields.modules.EndomorphismRing.__init__"]], "__init__() (sympy.polys.numberfields.modules.innerendomorphism method)": [[209, "sympy.polys.numberfields.modules.InnerEndomorphism.__init__"]], "__init__() (sympy.polys.numberfields.modules.moduleelement method)": [[209, "sympy.polys.numberfields.modules.ModuleElement.__init__"]], "__init__() (sympy.polys.numberfields.modules.moduleendomorphism method)": [[209, "sympy.polys.numberfields.modules.ModuleEndomorphism.__init__"]], "__init__() (sympy.polys.numberfields.modules.modulehomomorphism method)": [[209, "sympy.polys.numberfields.modules.ModuleHomomorphism.__init__"]], "__init__() (sympy.polys.numberfields.modules.powerbasis method)": [[209, "sympy.polys.numberfields.modules.PowerBasis.__init__"]], "__init__() (sympy.polys.numberfields.modules.submodule method)": [[209, "sympy.polys.numberfields.modules.Submodule.__init__"]], "__init__() (sympy.polys.numberfields.primes.primeideal method)": [[209, "sympy.polys.numberfields.primes.PrimeIdeal.__init__"]], "__init__() (sympy.polys.numberfields.utilities.algintpowers method)": [[209, "sympy.polys.numberfields.utilities.AlgIntPowers.__init__"]], "__mod__() (sympy.polys.numberfields.modules.moduleelement method)": [[209, "sympy.polys.numberfields.modules.ModuleElement.__mod__"]], "__mul__() (sympy.polys.numberfields.modules.moduleelement method)": [[209, "sympy.polys.numberfields.modules.ModuleElement.__mul__"]], "__mul__() (sympy.polys.numberfields.primes.primeideal method)": [[209, "sympy.polys.numberfields.primes.PrimeIdeal.__mul__"]], "add() (sympy.polys.numberfields.modules.submodule method)": [[209, "sympy.polys.numberfields.modules.Submodule.add"]], "ancestors() (sympy.polys.numberfields.modules.module method)": [[209, "sympy.polys.numberfields.modules.Module.ancestors"]], "as_expr() (sympy.polys.numberfields.modules.powerbasiselement method)": [[209, "sympy.polys.numberfields.modules.PowerBasisElement.as_expr"]], "as_submodule() (sympy.polys.numberfields.primes.primeideal method)": [[209, "sympy.polys.numberfields.primes.PrimeIdeal.as_submodule"]], "basis_element_pullbacks() (sympy.polys.numberfields.modules.submodule method)": [[209, "sympy.polys.numberfields.modules.Submodule.basis_element_pullbacks"]], "basis_elements() (sympy.polys.numberfields.modules.module method)": [[209, "sympy.polys.numberfields.modules.Module.basis_elements"]], "coeff_search() (in module sympy.polys.numberfields.utilities)": [[209, "sympy.polys.numberfields.utilities.coeff_search"]], "column() (sympy.polys.numberfields.modules.moduleelement method)": [[209, "sympy.polys.numberfields.modules.ModuleElement.column"]], "discard_before() (sympy.polys.numberfields.modules.submodule method)": [[209, "sympy.polys.numberfields.modules.Submodule.discard_before"]], "element_from_anp() (sympy.polys.numberfields.modules.powerbasis method)": [[209, "sympy.polys.numberfields.modules.PowerBasis.element_from_ANP"]], "element_from_alg_num() (sympy.polys.numberfields.modules.powerbasis method)": [[209, "sympy.polys.numberfields.modules.PowerBasis.element_from_alg_num"]], "element_from_poly() (sympy.polys.numberfields.modules.powerbasis method)": [[209, "sympy.polys.numberfields.modules.PowerBasis.element_from_poly"]], "element_from_rational() (sympy.polys.numberfields.modules.module method)": [[209, "sympy.polys.numberfields.modules.Module.element_from_rational"]], "endomorphism_ring() (sympy.polys.numberfields.modules.module method)": [[209, "sympy.polys.numberfields.modules.Module.endomorphism_ring"]], "equiv() (sympy.polys.numberfields.modules.moduleelement method)": [[209, "sympy.polys.numberfields.modules.ModuleElement.equiv"]], "extract_fundamental_discriminant() (in module sympy.polys.numberfields.utilities)": [[209, "sympy.polys.numberfields.utilities.extract_fundamental_discriminant"]], "field_isomorphism() (in module sympy.polys.numberfields.subfield)": [[209, "sympy.polys.numberfields.subfield.field_isomorphism"]], "find_min_poly() (in module sympy.polys.numberfields.modules)": [[209, "sympy.polys.numberfields.modules.find_min_poly"]], "from_int_list() (sympy.polys.numberfields.modules.moduleelement class method)": [[209, "sympy.polys.numberfields.modules.ModuleElement.from_int_list"]], "galois_group() (in module sympy.polys.numberfields.galoisgroups)": [[209, "sympy.polys.numberfields.galoisgroups.galois_group"]], "generator (sympy.polys.numberfields.modules.powerbasiselement property)": [[209, "sympy.polys.numberfields.modules.PowerBasisElement.generator"]], "get_num_denom() (in module sympy.polys.numberfields.utilities)": [[209, "sympy.polys.numberfields.utilities.get_num_denom"]], "inner_endomorphism() (sympy.polys.numberfields.modules.endomorphismring method)": [[209, "sympy.polys.numberfields.modules.EndomorphismRing.inner_endomorphism"]], "is_compat() (sympy.polys.numberfields.modules.moduleelement method)": [[209, "sympy.polys.numberfields.modules.ModuleElement.is_compat"]], "is_compat_col() (sympy.polys.numberfields.modules.module method)": [[209, "sympy.polys.numberfields.modules.Module.is_compat_col"]], "is_inert (sympy.polys.numberfields.primes.primeideal property)": [[209, "sympy.polys.numberfields.primes.PrimeIdeal.is_inert"]], "is_int() (in module sympy.polys.numberfields.utilities)": [[209, "sympy.polys.numberfields.utilities.is_int"]], "is_rat() (in module sympy.polys.numberfields.utilities)": [[209, "sympy.polys.numberfields.utilities.is_rat"]], "is_rational (sympy.polys.numberfields.modules.powerbasiselement property)": [[209, "sympy.polys.numberfields.modules.PowerBasisElement.is_rational"]], "isolate() (in module sympy.polys.numberfields.utilities)": [[209, "sympy.polys.numberfields.utilities.isolate"]], "kernel() (sympy.polys.numberfields.modules.modulehomomorphism method)": [[209, "sympy.polys.numberfields.modules.ModuleHomomorphism.kernel"]], "make_mod_elt() (in module sympy.polys.numberfields.modules)": [[209, "sympy.polys.numberfields.modules.make_mod_elt"]], "matrix() (sympy.polys.numberfields.modules.modulehomomorphism method)": [[209, "sympy.polys.numberfields.modules.ModuleHomomorphism.matrix"]], "minimal_polynomial() (in module sympy.polys.numberfields.minpoly)": [[209, "sympy.polys.numberfields.minpoly.minimal_polynomial"]], "minpoly() (in module sympy.polys.numberfields.minpoly)": [[209, "sympy.polys.numberfields.minpoly.minpoly"]], "mul() (sympy.polys.numberfields.modules.submodule method)": [[209, "sympy.polys.numberfields.modules.Submodule.mul"]], "mult_tab() (sympy.polys.numberfields.modules.module method)": [[209, "sympy.polys.numberfields.modules.Module.mult_tab"]], "n (sympy.polys.numberfields.modules.module property)": [[209, "sympy.polys.numberfields.modules.Module.n"]], "n (sympy.polys.numberfields.modules.moduleelement property)": [[209, "sympy.polys.numberfields.modules.ModuleElement.n"]], "nearest_common_ancestor() (sympy.polys.numberfields.modules.module method)": [[209, "sympy.polys.numberfields.modules.Module.nearest_common_ancestor"]], "norm() (sympy.polys.numberfields.modules.powerbasiselement method)": [[209, "sympy.polys.numberfields.modules.PowerBasisElement.norm"]], "number_field (sympy.polys.numberfields.modules.module property)": [[209, "sympy.polys.numberfields.modules.Module.number_field"]], "numerator() (sympy.polys.numberfields.modules.powerbasiselement method)": [[209, "sympy.polys.numberfields.modules.PowerBasisElement.numerator"]], "one() (sympy.polys.numberfields.modules.module method)": [[209, "sympy.polys.numberfields.modules.Module.one"]], "over_power_basis() (sympy.polys.numberfields.modules.moduleelement method)": [[209, "sympy.polys.numberfields.modules.ModuleElement.over_power_basis"]], "parent (sympy.polys.numberfields.modules.module property)": [[209, "sympy.polys.numberfields.modules.Module.parent"]], "poly() (sympy.polys.numberfields.modules.powerbasiselement method)": [[209, "sympy.polys.numberfields.modules.PowerBasisElement.poly"]], "power_basis_ancestor() (sympy.polys.numberfields.modules.module method)": [[209, "sympy.polys.numberfields.modules.Module.power_basis_ancestor"]], "prime_decomp() (in module sympy.polys.numberfields.primes)": [[209, "sympy.polys.numberfields.primes.prime_decomp"]], "prime_valuation() (in module sympy.polys.numberfields.primes)": [[209, "sympy.polys.numberfields.primes.prime_valuation"]], "primitive_element() (in module sympy.polys.numberfields.subfield)": [[209, "sympy.polys.numberfields.subfield.primitive_element"]], "reduce_anp() (sympy.polys.numberfields.primes.primeideal method)": [[209, "sympy.polys.numberfields.primes.PrimeIdeal.reduce_ANP"]], "reduce_alg_num() (sympy.polys.numberfields.primes.primeideal method)": [[209, "sympy.polys.numberfields.primes.PrimeIdeal.reduce_alg_num"]], "reduce_element() (sympy.polys.numberfields.modules.submodule method)": [[209, "sympy.polys.numberfields.modules.Submodule.reduce_element"]], "reduce_element() (sympy.polys.numberfields.primes.primeideal method)": [[209, "sympy.polys.numberfields.primes.PrimeIdeal.reduce_element"]], "reduced() (sympy.polys.numberfields.modules.moduleelement method)": [[209, "sympy.polys.numberfields.modules.ModuleElement.reduced"]], "reduced() (sympy.polys.numberfields.modules.submodule method)": [[209, "sympy.polys.numberfields.modules.Submodule.reduced"]], "reduced_mod_p() (sympy.polys.numberfields.modules.moduleelement method)": [[209, "sympy.polys.numberfields.modules.ModuleElement.reduced_mod_p"]], "repr() (sympy.polys.numberfields.primes.primeideal method)": [[209, "sympy.polys.numberfields.primes.PrimeIdeal.repr"]], "represent() (sympy.polys.numberfields.modules.endomorphismring method)": [[209, "sympy.polys.numberfields.modules.EndomorphismRing.represent"]], "represent() (sympy.polys.numberfields.modules.module method)": [[209, "sympy.polys.numberfields.modules.Module.represent"]], "represent() (sympy.polys.numberfields.modules.powerbasis method)": [[209, "sympy.polys.numberfields.modules.PowerBasis.represent"]], "represent() (sympy.polys.numberfields.modules.submodule method)": [[209, "sympy.polys.numberfields.modules.Submodule.represent"]], "round_two() (in module sympy.polys.numberfields.basis)": [[209, "sympy.polys.numberfields.basis.round_two"]], "starts_with_unity() (sympy.polys.numberfields.modules.module method)": [[209, "sympy.polys.numberfields.modules.Module.starts_with_unity"]], "submodule_from_gens() (sympy.polys.numberfields.modules.module method)": [[209, "sympy.polys.numberfields.modules.Module.submodule_from_gens"]], "submodule_from_matrix() (sympy.polys.numberfields.modules.module method)": [[209, "sympy.polys.numberfields.modules.Module.submodule_from_matrix"]], "supplement_a_subspace() (in module sympy.polys.numberfields.utilities)": [[209, "sympy.polys.numberfields.utilities.supplement_a_subspace"]], "sympy.polys.numberfields.modules": [[209, "module-sympy.polys.numberfields.modules"]], "sympy.polys.numberfields.subfield": [[209, "module-sympy.polys.numberfields.subfield"]], "test_factor() (sympy.polys.numberfields.primes.primeideal method)": [[209, "sympy.polys.numberfields.primes.PrimeIdeal.test_factor"]], "to_anp() (sympy.polys.numberfields.modules.powerbasiselement method)": [[209, "sympy.polys.numberfields.modules.PowerBasisElement.to_ANP"]], "to_alg_num() (sympy.polys.numberfields.modules.powerbasiselement method)": [[209, "sympy.polys.numberfields.modules.PowerBasisElement.to_alg_num"]], "to_ancestor() (sympy.polys.numberfields.modules.moduleelement method)": [[209, "sympy.polys.numberfields.modules.ModuleElement.to_ancestor"]], "to_number_field() (in module sympy.polys.numberfields.subfield)": [[209, "sympy.polys.numberfields.subfield.to_number_field"]], "to_parent() (sympy.polys.numberfields.modules.moduleelement method)": [[209, "sympy.polys.numberfields.modules.ModuleElement.to_parent"]], "unify() (sympy.polys.numberfields.modules.moduleelement method)": [[209, "sympy.polys.numberfields.modules.ModuleElement.unify"]], "valuation() (sympy.polys.numberfields.primes.primeideal method)": [[209, "sympy.polys.numberfields.primes.PrimeIdeal.valuation"]], "whole_submodule() (sympy.polys.numberfields.modules.module method)": [[209, "sympy.polys.numberfields.modules.Module.whole_submodule"]], "zero() (sympy.polys.numberfields.modules.module method)": [[209, "sympy.polys.numberfields.modules.Module.zero"]], "complexrootof (class in sympy.polys.rootoftools)": [[210, "sympy.polys.rootoftools.ComplexRootOf"]], "ec() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.EC"]], "em() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.EM"]], "et() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.ET"]], "gradedlexorder (class in sympy.polys.orderings)": [[210, "sympy.polys.orderings.GradedLexOrder"]], "groebnerbasis (class in sympy.polys.polytools)": [[210, "sympy.polys.polytools.GroebnerBasis"]], "lc() (in module sympy.polys.polytools)": [[210, "sympy.polys.polytools.LC"]], "lc() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.LC"]], "lm() (in module sympy.polys.polytools)": [[210, "sympy.polys.polytools.LM"]], "lm() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.LM"]], "lt() (in module sympy.polys.polytools)": [[210, "sympy.polys.polytools.LT"]], "lt() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.LT"]], "lexorder (class in sympy.polys.orderings)": [[210, "sympy.polys.orderings.LexOrder"]], "monomial (class in sympy.polys.monomials)": [[210, "sympy.polys.monomials.Monomial"]], "monomialorder (class in sympy.polys.orderings)": [[210, "sympy.polys.orderings.MonomialOrder"]], "poly (class in sympy.polys.polytools)": [[210, "sympy.polys.polytools.Poly"]], "purepoly (class in sympy.polys.polytools)": [[210, "sympy.polys.polytools.PurePoly"]], "reversedgradedlexorder (class in sympy.polys.orderings)": [[210, "sympy.polys.orderings.ReversedGradedLexOrder"]], "rootof (class in sympy.polys.rootoftools)": [[210, "sympy.polys.rootoftools.RootOf"]], "rootsum (class in sympy.polys.rootoftools)": [[210, "sympy.polys.rootoftools.RootSum"]], "tc() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.TC"]], "_all_roots() (sympy.polys.rootoftools.complexrootof class method)": [[210, "sympy.polys.rootoftools.ComplexRootOf._all_roots"]], "_complexes_index() (sympy.polys.rootoftools.complexrootof class method)": [[210, "sympy.polys.rootoftools.ComplexRootOf._complexes_index"]], "_complexes_sorted() (sympy.polys.rootoftools.complexrootof class method)": [[210, "sympy.polys.rootoftools.ComplexRootOf._complexes_sorted"]], "_count_roots() (sympy.polys.rootoftools.complexrootof class method)": [[210, "sympy.polys.rootoftools.ComplexRootOf._count_roots"]], "_ensure_complexes_init() (sympy.polys.rootoftools.complexrootof method)": [[210, "sympy.polys.rootoftools.ComplexRootOf._ensure_complexes_init"]], "_ensure_reals_init() (sympy.polys.rootoftools.complexrootof method)": [[210, "sympy.polys.rootoftools.ComplexRootOf._ensure_reals_init"]], "_eval_evalf() (sympy.polys.rootoftools.complexrootof method)": [[210, "sympy.polys.rootoftools.ComplexRootOf._eval_evalf"]], "_eval_is_imaginary() (sympy.polys.rootoftools.complexrootof method)": [[210, "sympy.polys.rootoftools.ComplexRootOf._eval_is_imaginary"]], "_eval_is_real() (sympy.polys.rootoftools.complexrootof method)": [[210, "sympy.polys.rootoftools.ComplexRootOf._eval_is_real"]], "_get_complexes() (sympy.polys.rootoftools.complexrootof class method)": [[210, "sympy.polys.rootoftools.ComplexRootOf._get_complexes"]], "_get_complexes_sqf() (sympy.polys.rootoftools.complexrootof class method)": [[210, "sympy.polys.rootoftools.ComplexRootOf._get_complexes_sqf"]], "_get_interval() (sympy.polys.rootoftools.complexrootof method)": [[210, "sympy.polys.rootoftools.ComplexRootOf._get_interval"]], "_get_reals() (sympy.polys.rootoftools.complexrootof class method)": [[210, "sympy.polys.rootoftools.ComplexRootOf._get_reals"]], "_get_reals_sqf() (sympy.polys.rootoftools.complexrootof class method)": [[210, "sympy.polys.rootoftools.ComplexRootOf._get_reals_sqf"]], "_get_roots() (sympy.polys.rootoftools.complexrootof class method)": [[210, "sympy.polys.rootoftools.ComplexRootOf._get_roots"]], "_indexed_root() (sympy.polys.rootoftools.complexrootof class method)": [[210, "sympy.polys.rootoftools.ComplexRootOf._indexed_root"]], "_new() (sympy.polys.rootoftools.complexrootof class method)": [[210, "sympy.polys.rootoftools.ComplexRootOf._new"]], "_postprocess_root() (sympy.polys.rootoftools.complexrootof class method)": [[210, "sympy.polys.rootoftools.ComplexRootOf._postprocess_root"]], "_preprocess_roots() (sympy.polys.rootoftools.complexrootof class method)": [[210, "sympy.polys.rootoftools.ComplexRootOf._preprocess_roots"]], "_real_roots() (sympy.polys.rootoftools.complexrootof class method)": [[210, "sympy.polys.rootoftools.ComplexRootOf._real_roots"]], "_reals_index() (sympy.polys.rootoftools.complexrootof class method)": [[210, "sympy.polys.rootoftools.ComplexRootOf._reals_index"]], "_reals_sorted() (sympy.polys.rootoftools.complexrootof class method)": [[210, "sympy.polys.rootoftools.ComplexRootOf._reals_sorted"]], "_refine_complexes() (sympy.polys.rootoftools.complexrootof class method)": [[210, "sympy.polys.rootoftools.ComplexRootOf._refine_complexes"]], "_reset() (sympy.polys.rootoftools.complexrootof method)": [[210, "sympy.polys.rootoftools.ComplexRootOf._reset"]], "_roots_trivial() (sympy.polys.rootoftools.complexrootof class method)": [[210, "sympy.polys.rootoftools.ComplexRootOf._roots_trivial"]], "_set_interval() (sympy.polys.rootoftools.complexrootof method)": [[210, "sympy.polys.rootoftools.ComplexRootOf._set_interval"]], "abs() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.abs"]], "add() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.add"]], "add_ground() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.add_ground"]], "all_coeffs() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.all_coeffs"]], "all_monoms() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.all_monoms"]], "all_roots() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.all_roots"]], "all_roots() (sympy.polys.rootoftools.complexrootof class method)": [[210, "sympy.polys.rootoftools.ComplexRootOf.all_roots"]], "all_terms() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.all_terms"]], "andre_poly() (in module sympy.polys.appellseqs)": [[210, "sympy.polys.appellseqs.andre_poly"]], "apart() (in module sympy.polys.partfrac)": [[210, "sympy.polys.partfrac.apart"]], "apart_list() (in module sympy.polys.partfrac)": [[210, "sympy.polys.partfrac.apart_list"]], "as_dict() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.as_dict"]], "as_expr() (sympy.polys.monomials.monomial method)": [[210, "sympy.polys.monomials.Monomial.as_expr"]], "as_expr() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.as_expr"]], "as_list() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.as_list"]], "as_poly() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.as_poly"]], "assemble_partfrac_list() (in module sympy.polys.partfrac)": [[210, "sympy.polys.partfrac.assemble_partfrac_list"]], "bernoulli_c_poly() (in module sympy.polys.appellseqs)": [[210, "sympy.polys.appellseqs.bernoulli_c_poly"]], "bernoulli_poly() (in module sympy.polys.appellseqs)": [[210, "sympy.polys.appellseqs.bernoulli_poly"]], "cancel() (in module sympy.polys.polytools)": [[210, "sympy.polys.polytools.cancel"]], "cancel() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.cancel"]], "chebyshevt_poly() (in module sympy.polys.orthopolys)": [[210, "sympy.polys.orthopolys.chebyshevt_poly"]], "chebyshevu_poly() (in module sympy.polys.orthopolys)": [[210, "sympy.polys.orthopolys.chebyshevu_poly"]], "clear_cache() (sympy.polys.rootoftools.complexrootof class method)": [[210, "sympy.polys.rootoftools.ComplexRootOf.clear_cache"]], "clear_denoms() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.clear_denoms"]], "coeff_monomial() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.coeff_monomial"]], "coeffs() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.coeffs"]], "cofactors() (in module sympy.polys.polytools)": [[210, "sympy.polys.polytools.cofactors"]], "cofactors() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.cofactors"]], "compose() (in module sympy.polys.polytools)": [[210, "sympy.polys.polytools.compose"]], "compose() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.compose"]], "construct_domain() (in module sympy.polys.constructor)": [[210, "sympy.polys.constructor.construct_domain"]], "contains() (sympy.polys.polytools.groebnerbasis method)": [[210, "sympy.polys.polytools.GroebnerBasis.contains"]], "content() (in module sympy.polys.polytools)": [[210, "sympy.polys.polytools.content"]], "content() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.content"]], "count_roots() (in module sympy.polys.polytools)": [[210, "sympy.polys.polytools.count_roots"]], "count_roots() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.count_roots"]], "cyclotomic_poly() (in module sympy.polys.specialpolys)": [[210, "sympy.polys.specialpolys.cyclotomic_poly"]], "decompose() (in module sympy.polys.polytools)": [[210, "sympy.polys.polytools.decompose"]], "decompose() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.decompose"]], "deflate() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.deflate"]], "degree() (in module sympy.polys.polytools)": [[210, "sympy.polys.polytools.degree"]], "degree() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.degree"]], "degree_list() (in module sympy.polys.polytools)": [[210, "sympy.polys.polytools.degree_list"]], "degree_list() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.degree_list"]], "diff() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.diff"]], "discriminant() (in module sympy.polys.polytools)": [[210, "sympy.polys.polytools.discriminant"]], "discriminant() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.discriminant"]], "dispersion() (in module sympy.polys.dispersion)": [[210, "sympy.polys.dispersion.dispersion"]], "dispersion() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.dispersion"]], "dispersionset() (in module sympy.polys.dispersion)": [[210, "sympy.polys.dispersion.dispersionset"]], "dispersionset() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.dispersionset"]], "div() (in module sympy.polys.polytools)": [[210, "sympy.polys.polytools.div"]], "div() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.div"]], "domain (sympy.polys.polytools.poly property)": [[210, "sympy.polys.polytools.Poly.domain"]], "eject() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.eject"]], "euler_poly() (in module sympy.polys.appellseqs)": [[210, "sympy.polys.appellseqs.euler_poly"]], "eval() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.eval"]], "eval_approx() (sympy.polys.rootoftools.complexrootof method)": [[210, "sympy.polys.rootoftools.ComplexRootOf.eval_approx"]], "eval_rational() (sympy.polys.rootoftools.complexrootof method)": [[210, "sympy.polys.rootoftools.ComplexRootOf.eval_rational"]], "exclude() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.exclude"]], "exquo() (in module sympy.polys.polytools)": [[210, "sympy.polys.polytools.exquo"]], "exquo() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.exquo"]], "exquo_ground() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.exquo_ground"]], "factor() (in module sympy.polys.polytools)": [[210, "sympy.polys.polytools.factor"]], "factor_list() (in module sympy.polys.polytools)": [[210, "sympy.polys.polytools.factor_list"]], "factor_list() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.factor_list"]], "factor_list_include() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.factor_list_include"]], "fglm() (sympy.polys.polytools.groebnerbasis method)": [[210, "sympy.polys.polytools.GroebnerBasis.fglm"]], "free_symbols (sympy.polys.polytools.poly property)": [[210, "sympy.polys.polytools.Poly.free_symbols"]], "free_symbols (sympy.polys.polytools.purepoly property)": [[210, "sympy.polys.polytools.PurePoly.free_symbols"]], "free_symbols_in_domain (sympy.polys.polytools.poly property)": [[210, "sympy.polys.polytools.Poly.free_symbols_in_domain"]], "from_dict() (sympy.polys.polytools.poly class method)": [[210, "sympy.polys.polytools.Poly.from_dict"]], "from_expr() (sympy.polys.polytools.poly class method)": [[210, "sympy.polys.polytools.Poly.from_expr"]], "from_list() (sympy.polys.polytools.poly class method)": [[210, "sympy.polys.polytools.Poly.from_list"]], "from_poly() (sympy.polys.polytools.poly class method)": [[210, "sympy.polys.polytools.Poly.from_poly"]], "galois_group() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.galois_group"]], "gcd() (in module sympy.polys.polytools)": [[210, "sympy.polys.polytools.gcd"]], "gcd() (sympy.polys.monomials.monomial method)": [[210, "sympy.polys.monomials.Monomial.gcd"]], "gcd() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.gcd"]], "gcd_list() (in module sympy.polys.polytools)": [[210, "sympy.polys.polytools.gcd_list"]], "gcdex() (in module sympy.polys.polytools)": [[210, "sympy.polys.polytools.gcdex"]], "gcdex() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.gcdex"]], "gegenbauer_poly() (in module sympy.polys.orthopolys)": [[210, "sympy.polys.orthopolys.gegenbauer_poly"]], "gen (sympy.polys.polytools.poly property)": [[210, "sympy.polys.polytools.Poly.gen"]], "genocchi_poly() (in module sympy.polys.appellseqs)": [[210, "sympy.polys.appellseqs.genocchi_poly"]], "get_domain() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.get_domain"]], "get_modulus() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.get_modulus"]], "gff() (in module sympy.polys.polytools)": [[210, "sympy.polys.polytools.gff"]], "gff_list() (in module sympy.polys.polytools)": [[210, "sympy.polys.polytools.gff_list"]], "gff_list() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.gff_list"]], "groebner() (in module sympy.polys.polytools)": [[210, "sympy.polys.polytools.groebner"]], "ground_roots() (in module sympy.polys.polytools)": [[210, "sympy.polys.polytools.ground_roots"]], "ground_roots() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.ground_roots"]], "half_gcdex() (in module sympy.polys.polytools)": [[210, "sympy.polys.polytools.half_gcdex"]], "half_gcdex() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.half_gcdex"]], "has_only_gens() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.has_only_gens"]], "hermite_poly() (in module sympy.polys.orthopolys)": [[210, "sympy.polys.orthopolys.hermite_poly"]], "hermite_prob_poly() (in module sympy.polys.orthopolys)": [[210, "sympy.polys.orthopolys.hermite_prob_poly"]], "homogeneous_order() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.homogeneous_order"]], "homogenize() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.homogenize"]], "horner() (in module sympy.polys.polyfuncs)": [[210, "sympy.polys.polyfuncs.horner"]], "inject() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.inject"]], "integrate() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.integrate"]], "interpolate() (in module sympy.polys.polyfuncs)": [[210, "sympy.polys.polyfuncs.interpolate"]], "interpolating_poly() (in module sympy.polys.specialpolys)": [[210, "sympy.polys.specialpolys.interpolating_poly"]], "intervals() (in module sympy.polys.polytools)": [[210, "sympy.polys.polytools.intervals"]], "intervals() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.intervals"]], "invert() (in module sympy.polys.polytools)": [[210, "sympy.polys.polytools.invert"]], "invert() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.invert"]], "is_cyclotomic (sympy.polys.polytools.poly property)": [[210, "sympy.polys.polytools.Poly.is_cyclotomic"]], "is_ground (sympy.polys.polytools.poly property)": [[210, "sympy.polys.polytools.Poly.is_ground"]], "is_homogeneous (sympy.polys.polytools.poly property)": [[210, "sympy.polys.polytools.Poly.is_homogeneous"]], "is_irreducible (sympy.polys.polytools.poly property)": [[210, "sympy.polys.polytools.Poly.is_irreducible"]], "is_linear (sympy.polys.polytools.poly property)": [[210, "sympy.polys.polytools.Poly.is_linear"]], "is_monic (sympy.polys.polytools.poly property)": [[210, "sympy.polys.polytools.Poly.is_monic"]], "is_monomial (sympy.polys.polytools.poly property)": [[210, "sympy.polys.polytools.Poly.is_monomial"]], "is_multivariate (sympy.polys.polytools.poly property)": [[210, "sympy.polys.polytools.Poly.is_multivariate"]], "is_one (sympy.polys.polytools.poly property)": [[210, "sympy.polys.polytools.Poly.is_one"]], "is_primitive (sympy.polys.polytools.poly property)": [[210, "sympy.polys.polytools.Poly.is_primitive"]], "is_quadratic (sympy.polys.polytools.poly property)": [[210, "sympy.polys.polytools.Poly.is_quadratic"]], "is_sqf (sympy.polys.polytools.poly property)": [[210, "sympy.polys.polytools.Poly.is_sqf"]], "is_univariate (sympy.polys.polytools.poly property)": [[210, "sympy.polys.polytools.Poly.is_univariate"]], "is_zero (sympy.polys.polytools.poly property)": [[210, "sympy.polys.polytools.Poly.is_zero"]], "is_zero_dimensional (sympy.polys.polytools.groebnerbasis property)": [[210, "sympy.polys.polytools.GroebnerBasis.is_zero_dimensional"]], "is_zero_dimensional() (in module sympy.polys.polytools)": [[210, "sympy.polys.polytools.is_zero_dimensional"]], "itermonomials() (in module sympy.polys.monomials)": [[210, "sympy.polys.monomials.itermonomials"]], "jacobi_poly() (in module sympy.polys.orthopolys)": [[210, "sympy.polys.orthopolys.jacobi_poly"]], "l1_norm() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.l1_norm"]], "laguerre_poly() (in module sympy.polys.orthopolys)": [[210, "sympy.polys.orthopolys.laguerre_poly"]], "lcm() (in module sympy.polys.polytools)": [[210, "sympy.polys.polytools.lcm"]], "lcm() (sympy.polys.monomials.monomial method)": [[210, "sympy.polys.monomials.Monomial.lcm"]], "lcm() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.lcm"]], "lcm_list() (in module sympy.polys.polytools)": [[210, "sympy.polys.polytools.lcm_list"]], "legendre_poly() (in module sympy.polys.orthopolys)": [[210, "sympy.polys.orthopolys.legendre_poly"]], "length() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.length"]], "lift() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.lift"]], "ltrim() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.ltrim"]], "make_monic_over_integers_by_scaling_roots() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.make_monic_over_integers_by_scaling_roots"]], "match() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.match"]], "max_norm() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.max_norm"]], "monic() (in module sympy.polys.polytools)": [[210, "sympy.polys.polytools.monic"]], "monic() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.monic"]], "monomial_count() (in module sympy.polys.monomials)": [[210, "sympy.polys.monomials.monomial_count"]], "monoms() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.monoms"]], "mul() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.mul"]], "mul_ground() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.mul_ground"]], "neg() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.neg"]], "new() (sympy.polys.polytools.poly class method)": [[210, "sympy.polys.polytools.Poly.new"]], "new() (sympy.polys.rootoftools.rootsum class method)": [[210, "sympy.polys.rootoftools.RootSum.new"]], "norm() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.norm"]], "nroots() (in module sympy.polys.polytools)": [[210, "sympy.polys.polytools.nroots"]], "nroots() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.nroots"]], "nth() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.nth"]], "nth_power_roots_poly() (in module sympy.polys.polytools)": [[210, "sympy.polys.polytools.nth_power_roots_poly"]], "nth_power_roots_poly() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.nth_power_roots_poly"]], "one (sympy.polys.polytools.poly property)": [[210, "sympy.polys.polytools.Poly.one"]], "parallel_poly_from_expr() (in module sympy.polys.polytools)": [[210, "sympy.polys.polytools.parallel_poly_from_expr"]], "pdiv() (in module sympy.polys.polytools)": [[210, "sympy.polys.polytools.pdiv"]], "pdiv() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.pdiv"]], "per() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.per"]], "pexquo() (in module sympy.polys.polytools)": [[210, "sympy.polys.polytools.pexquo"]], "pexquo() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.pexquo"]], "poly() (in module sympy.polys.polytools)": [[210, "sympy.polys.polytools.poly"]], "poly_from_expr() (in module sympy.polys.polytools)": [[210, "sympy.polys.polytools.poly_from_expr"]], "pow() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.pow"]], "pquo() (in module sympy.polys.polytools)": [[210, "sympy.polys.polytools.pquo"]], "pquo() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.pquo"]], "prem() (in module sympy.polys.polytools)": [[210, "sympy.polys.polytools.prem"]], "prem() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.prem"]], "primitive() (in module sympy.polys.polytools)": [[210, "sympy.polys.polytools.primitive"]], "primitive() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.primitive"]], "quo() (in module sympy.polys.polytools)": [[210, "sympy.polys.polytools.quo"]], "quo() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.quo"]], "quo_ground() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.quo_ground"]], "random_poly() (in module sympy.polys.specialpolys)": [[210, "sympy.polys.specialpolys.random_poly"]], "rat_clear_denoms() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.rat_clear_denoms"]], "real_roots() (in module sympy.polys.polytools)": [[210, "sympy.polys.polytools.real_roots"]], "real_roots() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.real_roots"]], "real_roots() (sympy.polys.rootoftools.complexrootof class method)": [[210, "sympy.polys.rootoftools.ComplexRootOf.real_roots"]], "reduce() (sympy.polys.polytools.groebnerbasis method)": [[210, "sympy.polys.polytools.GroebnerBasis.reduce"]], "reduced() (in module sympy.polys.polytools)": [[210, "sympy.polys.polytools.reduced"]], "refine_root() (in module sympy.polys.polytools)": [[210, "sympy.polys.polytools.refine_root"]], "refine_root() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.refine_root"]], "rem() (in module sympy.polys.polytools)": [[210, "sympy.polys.polytools.rem"]], "rem() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.rem"]], "reorder() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.reorder"]], "replace() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.replace"]], "resultant() (in module sympy.polys.polytools)": [[210, "sympy.polys.polytools.resultant"]], "resultant() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.resultant"]], "retract() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.retract"]], "revert() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.revert"]], "root() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.root"]], "rootof() (in module sympy.polys.rootoftools)": [[210, "sympy.polys.rootoftools.rootof"]], "roots() (in module sympy.polys.polyroots)": [[210, "sympy.polys.polyroots.roots"]], "same_root() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.same_root"]], "set_domain() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.set_domain"]], "set_modulus() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.set_modulus"]], "shift() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.shift"]], "slice() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.slice"]], "spherical_bessel_fn() (in module sympy.polys.orthopolys)": [[210, "sympy.polys.orthopolys.spherical_bessel_fn"]], "sqf() (in module sympy.polys.polytools)": [[210, "sympy.polys.polytools.sqf"]], "sqf_list() (in module sympy.polys.polytools)": [[210, "sympy.polys.polytools.sqf_list"]], "sqf_list() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.sqf_list"]], "sqf_list_include() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.sqf_list_include"]], "sqf_norm() (in module sympy.polys.polytools)": [[210, "sympy.polys.polytools.sqf_norm"]], "sqf_norm() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.sqf_norm"]], "sqf_part() (in module sympy.polys.polytools)": [[210, "sympy.polys.polytools.sqf_part"]], "sqf_part() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.sqf_part"]], "sqr() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.sqr"]], "sturm() (in module sympy.polys.polytools)": [[210, "sympy.polys.polytools.sturm"]], "sturm() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.sturm"]], "sub() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.sub"]], "sub_ground() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.sub_ground"]], "subresultants() (in module sympy.polys.polytools)": [[210, "sympy.polys.polytools.subresultants"]], "subresultants() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.subresultants"]], "swinnerton_dyer_poly() (in module sympy.polys.specialpolys)": [[210, "sympy.polys.specialpolys.swinnerton_dyer_poly"]], "symmetric_poly() (in module sympy.polys.specialpolys)": [[210, "sympy.polys.specialpolys.symmetric_poly"]], "symmetrize() (in module sympy.polys.polyfuncs)": [[210, "sympy.polys.polyfuncs.symmetrize"]], "sympy.polys": [[210, "module-sympy.polys"]], "terms() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.terms"]], "terms_gcd() (in module sympy.polys.polytools)": [[210, "sympy.polys.polytools.terms_gcd"]], "terms_gcd() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.terms_gcd"]], "termwise() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.termwise"]], "to_exact() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.to_exact"]], "to_field() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.to_field"]], "to_ring() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.to_ring"]], "together() (in module sympy.polys.rationaltools)": [[210, "sympy.polys.rationaltools.together"]], "total_degree() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.total_degree"]], "transform() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.transform"]], "trunc() (in module sympy.polys.polytools)": [[210, "sympy.polys.polytools.trunc"]], "trunc() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.trunc"]], "unify() (sympy.polys.polytools.poly method)": [[210, "sympy.polys.polytools.Poly.unify"]], "unit (sympy.polys.polytools.poly property)": [[210, "sympy.polys.polytools.Poly.unit"]], "viete() (in module sympy.polys.polyfuncs)": [[210, "sympy.polys.polyfuncs.viete"]], "zero (sympy.polys.polytools.poly property)": [[210, "sympy.polys.polytools.Poly.zero"]], "_tan1() (in module sympy.polys.ring_series)": [[211, "sympy.polys.ring_series._tan1"]], "mul_xin() (in module sympy.polys.ring_series)": [[211, "sympy.polys.ring_series.mul_xin"]], "pow_xin() (in module sympy.polys.ring_series)": [[211, "sympy.polys.ring_series.pow_xin"]], "rs_lambertw() (in module sympy.polys.ring_series)": [[211, "sympy.polys.ring_series.rs_LambertW"]], "rs_asin() (in module sympy.polys.ring_series)": [[211, "sympy.polys.ring_series.rs_asin"]], "rs_atan() (in module sympy.polys.ring_series)": [[211, "sympy.polys.ring_series.rs_atan"]], "rs_atanh() (in module sympy.polys.ring_series)": [[211, "sympy.polys.ring_series.rs_atanh"]], "rs_compose_add() (in module sympy.polys.ring_series)": [[211, "sympy.polys.ring_series.rs_compose_add"]], "rs_cos() (in module sympy.polys.ring_series)": [[211, "sympy.polys.ring_series.rs_cos"]], "rs_cos_sin() (in module sympy.polys.ring_series)": [[211, "sympy.polys.ring_series.rs_cos_sin"]], "rs_cosh() (in module sympy.polys.ring_series)": [[211, "sympy.polys.ring_series.rs_cosh"]], "rs_cot() (in module sympy.polys.ring_series)": [[211, "sympy.polys.ring_series.rs_cot"]], "rs_diff() (in module sympy.polys.ring_series)": [[211, "sympy.polys.ring_series.rs_diff"]], "rs_exp() (in module sympy.polys.ring_series)": [[211, "sympy.polys.ring_series.rs_exp"]], "rs_fun() (in module sympy.polys.ring_series)": [[211, "sympy.polys.ring_series.rs_fun"]], "rs_hadamard_exp() (in module sympy.polys.ring_series)": [[211, "sympy.polys.ring_series.rs_hadamard_exp"]], "rs_integrate() (in module sympy.polys.ring_series)": [[211, "sympy.polys.ring_series.rs_integrate"]], "rs_is_puiseux() (in module sympy.polys.ring_series)": [[211, "sympy.polys.ring_series.rs_is_puiseux"]], "rs_log() (in module sympy.polys.ring_series)": [[211, "sympy.polys.ring_series.rs_log"]], "rs_mul() (in module sympy.polys.ring_series)": [[211, "sympy.polys.ring_series.rs_mul"]], "rs_newton() (in module sympy.polys.ring_series)": [[211, "sympy.polys.ring_series.rs_newton"]], "rs_nth_root() (in module sympy.polys.ring_series)": [[211, "sympy.polys.ring_series.rs_nth_root"]], "rs_pow() (in module sympy.polys.ring_series)": [[211, "sympy.polys.ring_series.rs_pow"]], "rs_puiseux() (in module sympy.polys.ring_series)": [[211, "sympy.polys.ring_series.rs_puiseux"]], "rs_puiseux2() (in module sympy.polys.ring_series)": [[211, "sympy.polys.ring_series.rs_puiseux2"]], "rs_series_from_list() (in module sympy.polys.ring_series)": [[211, "sympy.polys.ring_series.rs_series_from_list"]], "rs_series_inversion() (in module sympy.polys.ring_series)": [[211, "sympy.polys.ring_series.rs_series_inversion"]], "rs_series_reversion() (in module sympy.polys.ring_series)": [[211, "sympy.polys.ring_series.rs_series_reversion"]], "rs_sin() (in module sympy.polys.ring_series)": [[211, "sympy.polys.ring_series.rs_sin"]], "rs_sinh() (in module sympy.polys.ring_series)": [[211, "sympy.polys.ring_series.rs_sinh"]], "rs_square() (in module sympy.polys.ring_series)": [[211, "sympy.polys.ring_series.rs_square"]], "rs_subs() (in module sympy.polys.ring_series)": [[211, "sympy.polys.ring_series.rs_subs"]], "rs_tan() (in module sympy.polys.ring_series)": [[211, "sympy.polys.ring_series.rs_tan"]], "rs_tanh() (in module sympy.polys.ring_series)": [[211, "sympy.polys.ring_series.rs_tanh"]], "rs_trunc() (in module sympy.polys.ring_series)": [[211, "sympy.polys.ring_series.rs_trunc"]], "_solve_lin_sys() (in module sympy.polys.solvers)": [[212, "sympy.polys.solvers._solve_lin_sys"]], "_solve_lin_sys_component() (in module sympy.polys.solvers)": [[212, "sympy.polys.solvers._solve_lin_sys_component"]], "eqs_to_matrix() (in module sympy.polys.solvers)": [[212, "sympy.polys.solvers.eqs_to_matrix"]], "solve_lin_sys() (in module sympy.polys.solvers)": [[212, "sympy.polys.solvers.solve_lin_sys"]], "sympy.polys.solvers": [[212, "module-sympy.polys.solvers"]], "sympy_eqs_to_ring() (in module sympy.polys.solvers)": [[212, "sympy.polys.solvers.sympy_eqs_to_ring"]], "aesaraprinter (class in sympy.printing.aesaracode)": [[214, "sympy.printing.aesaracode.AesaraPrinter"]], "assignmenterror": [[214, "sympy.printing.codeprinter.AssignmentError"]], "c89codeprinter (class in sympy.printing.c)": [[214, "sympy.printing.c.C89CodePrinter"]], "c99codeprinter (class in sympy.printing.c)": [[214, "sympy.printing.c.C99CodePrinter"]], "cxx11codeprinter (class in sympy.printing.cxx)": [[214, "sympy.printing.cxx.CXX11CodePrinter"]], "cxx98codeprinter (class in sympy.printing.cxx)": [[214, "sympy.printing.cxx.CXX98CodePrinter"]], "codeprinter (class in sympy.printing.codeprinter)": [[214, "sympy.printing.codeprinter.CodePrinter"]], "fcodeprinter (class in sympy.printing.fortran)": [[214, "sympy.printing.fortran.FCodePrinter"]], "g() (in module sympy.printing.pretty.pretty_symbology)": [[214, "sympy.printing.pretty.pretty_symbology.G"], [214, "sympy.printing.pretty.pretty_symbology.g"]], "javascriptcodeprinter (class in sympy.printing.jscode)": [[214, "sympy.printing.jscode.JavascriptCodePrinter"]], "juliacodeprinter (class in sympy.printing.julia)": [[214, "sympy.printing.julia.JuliaCodePrinter"]], "lambdaprinter (class in sympy.printing.lambdarepr)": [[214, "sympy.printing.lambdarepr.LambdaPrinter"]], "latexprinter (class in sympy.printing.latex)": [[214, "sympy.printing.latex.LatexPrinter"]], "mcodeprinter (class in sympy.printing.mathematica)": [[214, "sympy.printing.mathematica.MCodePrinter"]], "maplecodeprinter (class in sympy.printing.maple)": [[214, "sympy.printing.maple.MapleCodePrinter"]], "mathmlcontentprinter (class in sympy.printing.mathml)": [[214, "sympy.printing.mathml.MathMLContentPrinter"]], "mathmlpresentationprinter (class in sympy.printing.mathml)": [[214, "sympy.printing.mathml.MathMLPresentationPrinter"]], "mathmlprinterbase (class in sympy.printing.mathml)": [[214, "sympy.printing.mathml.MathMLPrinterBase"]], "mpmathprinter (class in sympy.printing.pycode)": [[214, "sympy.printing.pycode.MpmathPrinter"]], "octavecodeprinter (class in sympy.printing.octave)": [[214, "sympy.printing.octave.OctaveCodePrinter"]], "precedence (in module sympy.printing.precedence)": [[214, "sympy.printing.precedence.PRECEDENCE"]], "precedence_functions (in module sympy.printing.precedence)": [[214, "sympy.printing.precedence.PRECEDENCE_FUNCTIONS"]], "precedence_values (in module sympy.printing.precedence)": [[214, "sympy.printing.precedence.PRECEDENCE_VALUES"]], "prettyprinter (class in sympy.printing.pretty.pretty)": [[214, "sympy.printing.pretty.pretty.PrettyPrinter"]], "printer (class in sympy.printing.printer)": [[214, "sympy.printing.printer.Printer"]], "rcodeprinter (class in sympy.printing.rcode)": [[214, "sympy.printing.rcode.RCodePrinter"]], "reprprinter (class in sympy.printing.repr)": [[214, "sympy.printing.repr.ReprPrinter"]], "rustcodeprinter (class in sympy.printing.rust)": [[214, "sympy.printing.rust.RustCodePrinter"]], "smtlibprinter (class in sympy.printing.smtlib)": [[214, "sympy.printing.smtlib.SMTLibPrinter"]], "strprinter (class in sympy.printing.str)": [[214, "sympy.printing.str.StrPrinter"]], "u() (in module sympy.printing.pretty.pretty_symbology)": [[214, "sympy.printing.pretty.pretty_symbology.U"]], "vf() (in module sympy.printing.pretty.pretty_symbology)": [[214, "sympy.printing.pretty.pretty_symbology.VF"]], "_default_settings (sympy.printing.smtlib.smtlibprinter attribute)": [[214, "sympy.printing.smtlib.SMTLibPrinter._default_settings"]], "_print() (sympy.printing.printer.printer method)": [[214, "sympy.printing.printer.Printer._print"]], "above() (sympy.printing.pretty.stringpict.stringpict method)": [[214, "sympy.printing.pretty.stringpict.stringPict.above"]], "accepted_latex_functions (in module sympy.printing.latex)": [[214, "sympy.printing.latex.accepted_latex_functions"]], "aesara_code() (in module sympy.printing.aesaracode)": [[214, "sympy.printing.aesaracode.aesara_code"]], "aesara_function() (in module sympy.printing.aesaracode)": [[214, "sympy.printing.aesaracode.aesara_function"]], "annotated() (in module sympy.printing.pretty.pretty_symbology)": [[214, "sympy.printing.pretty.pretty_symbology.annotated"]], "apply() (sympy.printing.pretty.stringpict.prettyform static method)": [[214, "sympy.printing.pretty.stringpict.prettyForm.apply"]], "atoms_table (in module sympy.printing.pretty.pretty_symbology)": [[214, "sympy.printing.pretty.pretty_symbology.atoms_table"]], "below() (sympy.printing.pretty.stringpict.stringpict method)": [[214, "sympy.printing.pretty.stringpict.stringPict.below"]], "ccode() (in module sympy.printing.c)": [[214, "sympy.printing.c.ccode"]], "cxxcode() (in module sympy.printing.codeprinter)": [[214, "sympy.printing.codeprinter.cxxcode"]], "digit_2txt (in module sympy.printing.pretty.pretty_symbology)": [[214, "sympy.printing.pretty.pretty_symbology.digit_2txt"]], "dim_handling() (in module sympy.printing.aesaracode)": [[214, "sympy.printing.aesaracode.dim_handling"]], "doprint() (sympy.printing.aesaracode.aesaraprinter method)": [[214, "sympy.printing.aesaracode.AesaraPrinter.doprint"]], "doprint() (sympy.printing.codeprinter.codeprinter method)": [[214, "sympy.printing.codeprinter.CodePrinter.doprint"]], "doprint() (sympy.printing.mathml.mathmlprinterbase method)": [[214, "sympy.printing.mathml.MathMLPrinterBase.doprint"]], "doprint() (sympy.printing.printer.printer method)": [[214, "sympy.printing.printer.Printer.doprint"]], "dotprint() (in module sympy.printing.dot)": [[214, "sympy.printing.dot.dotprint"]], "emptyprinter() (sympy.printing.repr.reprprinter method)": [[214, "sympy.printing.repr.ReprPrinter.emptyPrinter"]], "fcode() (in module sympy.printing.fortran)": [[214, "sympy.printing.fortran.fcode"]], "frac (in module sympy.printing.pretty.pretty_symbology)": [[214, "sympy.printing.pretty.pretty_symbology.frac"]], "greek_letters (in module sympy.printing.pretty.pretty_symbology)": [[214, "sympy.printing.pretty.pretty_symbology.greek_letters"]], "height() (sympy.printing.pretty.stringpict.stringpict method)": [[214, "sympy.printing.pretty.stringpict.stringPict.height"]], "hobj() (in module sympy.printing.pretty.pretty_symbology)": [[214, "sympy.printing.pretty.pretty_symbology.hobj"]], "indent_code() (sympy.printing.c.c89codeprinter method)": [[214, "sympy.printing.c.C89CodePrinter.indent_code"]], "indent_code() (sympy.printing.fortran.fcodeprinter method)": [[214, "sympy.printing.fortran.FCodePrinter.indent_code"]], "indent_code() (sympy.printing.jscode.javascriptcodeprinter method)": [[214, "sympy.printing.jscode.JavascriptCodePrinter.indent_code"]], "indent_code() (sympy.printing.julia.juliacodeprinter method)": [[214, "sympy.printing.julia.JuliaCodePrinter.indent_code"]], "indent_code() (sympy.printing.octave.octavecodeprinter method)": [[214, "sympy.printing.octave.OctaveCodePrinter.indent_code"]], "indent_code() (sympy.printing.rcode.rcodeprinter method)": [[214, "sympy.printing.rcode.RCodePrinter.indent_code"]], "indent_code() (sympy.printing.rust.rustcodeprinter method)": [[214, "sympy.printing.rust.RustCodePrinter.indent_code"]], "jscode() (in module sympy.printing.jscode)": [[214, "sympy.printing.jscode.jscode"]], "julia_code() (in module sympy.printing.julia)": [[214, "sympy.printing.julia.julia_code"]], "known_fcns_src1 (in module sympy.printing.julia)": [[214, "sympy.printing.julia.known_fcns_src1"]], "known_fcns_src1 (in module sympy.printing.octave)": [[214, "sympy.printing.octave.known_fcns_src1"]], "known_fcns_src2 (in module sympy.printing.julia)": [[214, "sympy.printing.julia.known_fcns_src2"]], "known_fcns_src2 (in module sympy.printing.octave)": [[214, "sympy.printing.octave.known_fcns_src2"]], "known_functions (in module sympy.printing.jscode)": [[214, "sympy.printing.jscode.known_functions"]], "known_functions (in module sympy.printing.mathematica)": [[214, "sympy.printing.mathematica.known_functions"]], "known_functions (in module sympy.printing.rcode)": [[214, "sympy.printing.rcode.known_functions"]], "known_functions (in module sympy.printing.rust)": [[214, "sympy.printing.rust.known_functions"]], "known_functions_c89 (in module sympy.printing.c)": [[214, "sympy.printing.c.known_functions_C89"]], "known_functions_c99 (in module sympy.printing.c)": [[214, "sympy.printing.c.known_functions_C99"]], "lambdarepr() (in module sympy.printing.lambdarepr)": [[214, "sympy.printing.lambdarepr.lambdarepr"]], "latex() (in module sympy.printing.latex)": [[214, "sympy.printing.latex.latex"]], "left() (sympy.printing.pretty.stringpict.stringpict method)": [[214, "sympy.printing.pretty.stringpict.stringPict.left"]], "leftslash() (sympy.printing.pretty.stringpict.stringpict method)": [[214, "sympy.printing.pretty.stringpict.stringPict.leftslash"]], "maple_code() (in module sympy.printing.maple)": [[214, "sympy.printing.maple.maple_code"]], "mathematica_code() (in module sympy.printing.mathematica)": [[214, "sympy.printing.mathematica.mathematica_code"]], "mathml() (in module sympy.printing.mathml)": [[214, "sympy.printing.mathml.mathml"]], "mathml_tag() (sympy.printing.mathml.mathmlcontentprinter method)": [[214, "sympy.printing.mathml.MathMLContentPrinter.mathml_tag"]], "mathml_tag() (sympy.printing.mathml.mathmlpresentationprinter method)": [[214, "sympy.printing.mathml.MathMLPresentationPrinter.mathml_tag"]], "next() (sympy.printing.pretty.stringpict.stringpict static method)": [[214, "sympy.printing.pretty.stringpict.stringPict.next"]], "octave_code() (in module sympy.printing.octave)": [[214, "sympy.printing.octave.octave_code"]], "parens() (sympy.printing.pretty.stringpict.stringpict method)": [[214, "sympy.printing.pretty.stringpict.stringPict.parens"]], "parenthesize_super() (sympy.printing.latex.latexprinter method)": [[214, "sympy.printing.latex.LatexPrinter.parenthesize_super"]], "pprint_nodes() (in module sympy.printing.tree)": [[214, "sympy.printing.tree.pprint_nodes"]], "precedence() (in module sympy.printing.precedence)": [[214, "sympy.printing.precedence.precedence"]], "pretty() (in module sympy.printing.pretty.pretty)": [[214, "sympy.printing.pretty.pretty.pretty"]], "prettyform (class in sympy.printing.pretty.stringpict)": [[214, "sympy.printing.pretty.stringpict.prettyForm"]], "pretty_atom() (in module sympy.printing.pretty.pretty_symbology)": [[214, "sympy.printing.pretty.pretty_symbology.pretty_atom"]], "pretty_print() (in module sympy.printing.pretty.pretty)": [[214, "sympy.printing.pretty.pretty.pretty_print"]], "pretty_symbol() (in module sympy.printing.pretty.pretty_symbology)": [[214, "sympy.printing.pretty.pretty_symbology.pretty_symbol"]], "pretty_try_use_unicode() (in module sympy.printing.pretty.pretty_symbology)": [[214, "sympy.printing.pretty.pretty_symbology.pretty_try_use_unicode"]], "pretty_use_unicode() (in module sympy.printing.pretty.pretty_symbology)": [[214, "sympy.printing.pretty.pretty_symbology.pretty_use_unicode"]], "preview() (in module sympy.printing.preview)": [[214, "sympy.printing.preview.preview"]], "print_ccode() (in module sympy.printing.c)": [[214, "sympy.printing.c.print_ccode"]], "print_fcode() (in module sympy.printing.fortran)": [[214, "sympy.printing.fortran.print_fcode"]], "print_gtk() (in module sympy.printing.gtk)": [[214, "sympy.printing.gtk.print_gtk"]], "print_latex() (in module sympy.printing.latex)": [[214, "sympy.printing.latex.print_latex"]], "print_maple_code() (in module sympy.printing.maple)": [[214, "sympy.printing.maple.print_maple_code"]], "print_mathml() (in module sympy.printing.mathml)": [[214, "sympy.printing.mathml.print_mathml"]], "print_node() (in module sympy.printing.tree)": [[214, "sympy.printing.tree.print_node"]], "print_rcode() (in module sympy.printing.rcode)": [[214, "sympy.printing.rcode.print_rcode"]], "print_tree() (in module sympy.printing.tree)": [[214, "sympy.printing.tree.print_tree"]], "printmethod (sympy.printing.aesaracode.aesaraprinter attribute)": [[214, "sympy.printing.aesaracode.AesaraPrinter.printmethod"]], "printmethod (sympy.printing.c.c89codeprinter attribute)": [[214, "sympy.printing.c.C89CodePrinter.printmethod"]], "printmethod (sympy.printing.c.c99codeprinter attribute)": [[214, "sympy.printing.c.C99CodePrinter.printmethod"]], "printmethod (sympy.printing.codeprinter.codeprinter attribute)": [[214, "sympy.printing.codeprinter.CodePrinter.printmethod"]], "printmethod (sympy.printing.cxx.cxx11codeprinter attribute)": [[214, "sympy.printing.cxx.CXX11CodePrinter.printmethod"]], "printmethod (sympy.printing.cxx.cxx98codeprinter attribute)": [[214, "sympy.printing.cxx.CXX98CodePrinter.printmethod"]], "printmethod (sympy.printing.fortran.fcodeprinter attribute)": [[214, "sympy.printing.fortran.FCodePrinter.printmethod"]], "printmethod (sympy.printing.jscode.javascriptcodeprinter attribute)": [[214, "sympy.printing.jscode.JavascriptCodePrinter.printmethod"]], "printmethod (sympy.printing.julia.juliacodeprinter attribute)": [[214, "sympy.printing.julia.JuliaCodePrinter.printmethod"]], "printmethod (sympy.printing.lambdarepr.lambdaprinter attribute)": [[214, "sympy.printing.lambdarepr.LambdaPrinter.printmethod"]], "printmethod (sympy.printing.latex.latexprinter attribute)": [[214, "sympy.printing.latex.LatexPrinter.printmethod"]], "printmethod (sympy.printing.maple.maplecodeprinter attribute)": [[214, "sympy.printing.maple.MapleCodePrinter.printmethod"]], "printmethod (sympy.printing.mathematica.mcodeprinter attribute)": [[214, "sympy.printing.mathematica.MCodePrinter.printmethod"]], "printmethod (sympy.printing.mathml.mathmlcontentprinter attribute)": [[214, "sympy.printing.mathml.MathMLContentPrinter.printmethod"]], "printmethod (sympy.printing.mathml.mathmlpresentationprinter attribute)": [[214, "sympy.printing.mathml.MathMLPresentationPrinter.printmethod"]], "printmethod (sympy.printing.octave.octavecodeprinter attribute)": [[214, "sympy.printing.octave.OctaveCodePrinter.printmethod"]], "printmethod (sympy.printing.pretty.pretty.prettyprinter attribute)": [[214, "sympy.printing.pretty.pretty.PrettyPrinter.printmethod"]], "printmethod (sympy.printing.printer.printer attribute)": [[214, "sympy.printing.printer.Printer.printmethod"]], "printmethod (sympy.printing.rcode.rcodeprinter attribute)": [[214, "sympy.printing.rcode.RCodePrinter.printmethod"]], "printmethod (sympy.printing.repr.reprprinter attribute)": [[214, "sympy.printing.repr.ReprPrinter.printmethod"]], "printmethod (sympy.printing.rust.rustcodeprinter attribute)": [[214, "sympy.printing.rust.RustCodePrinter.printmethod"]], "printmethod (sympy.printing.smtlib.smtlibprinter attribute)": [[214, "sympy.printing.smtlib.SMTLibPrinter.printmethod"]], "printmethod (sympy.printing.str.strprinter attribute)": [[214, "sympy.printing.str.StrPrinter.printmethod"]], "pycode() (in module sympy.printing.pycode)": [[214, "sympy.printing.pycode.pycode"]], "rcode() (in module sympy.printing.rcode)": [[214, "sympy.printing.rcode.rcode"]], "render() (sympy.printing.pretty.stringpict.stringpict method)": [[214, "sympy.printing.pretty.stringpict.stringPict.render"]], "reprify() (sympy.printing.repr.reprprinter method)": [[214, "sympy.printing.repr.ReprPrinter.reprify"]], "right() (sympy.printing.pretty.stringpict.stringpict method)": [[214, "sympy.printing.pretty.stringpict.stringPict.right"]], "root (in module sympy.printing.pretty.pretty_symbology)": [[214, "sympy.printing.pretty.pretty_symbology.root"]], "root() (sympy.printing.pretty.stringpict.stringpict method)": [[214, "sympy.printing.pretty.stringpict.stringPict.root"]], "rust_code() (in module sympy.printing.rust)": [[214, "sympy.printing.rust.rust_code"]], "set_global_settings() (sympy.printing.printer.printer class method)": [[214, "sympy.printing.printer.Printer.set_global_settings"]], "smtlib_code() (in module sympy.printing.smtlib)": [[214, "sympy.printing.smtlib.smtlib_code"]], "split_super_sub() (in module sympy.printing.conventions)": [[214, "sympy.printing.conventions.split_super_sub"]], "srepr() (in module sympy.printing.repr)": [[214, "sympy.printing.repr.srepr"]], "sstr() (in module sympy.printing.str)": [[214, "sympy.printing.str.sstr"]], "sstrrepr() (in module sympy.printing.str)": [[214, "sympy.printing.str.sstrrepr"]], "stack() (sympy.printing.pretty.stringpict.stringpict static method)": [[214, "sympy.printing.pretty.stringpict.stringPict.stack"]], "stringpict (class in sympy.printing.pretty.stringpict)": [[214, "sympy.printing.pretty.stringpict.stringPict"]], "sub (in module sympy.printing.pretty.pretty_symbology)": [[214, "sympy.printing.pretty.pretty_symbology.sub"]], "sup (in module sympy.printing.pretty.pretty_symbology)": [[214, "sympy.printing.pretty.pretty_symbology.sup"]], "symb_2txt (in module sympy.printing.pretty.pretty_symbology)": [[214, "sympy.printing.pretty.pretty_symbology.symb_2txt"]], "sympy.printing.aesaracode": [[214, "module-sympy.printing.aesaracode"]], "sympy.printing.c": [[214, "module-sympy.printing.c"]], "sympy.printing.codeprinter": [[214, "module-sympy.printing.codeprinter"]], "sympy.printing.conventions": [[214, "module-sympy.printing.conventions"]], "sympy.printing.cxx": [[214, "module-sympy.printing.cxx"]], "sympy.printing.fortran": [[214, "module-sympy.printing.fortran"]], "sympy.printing.gtk": [[214, "module-sympy.printing.gtk"]], "sympy.printing.jscode": [[214, "module-sympy.printing.jscode"]], "sympy.printing.julia": [[214, "module-sympy.printing.julia"]], "sympy.printing.lambdarepr": [[214, "module-sympy.printing.lambdarepr"]], "sympy.printing.latex": [[214, "module-sympy.printing.latex"]], "sympy.printing.maple": [[214, "module-sympy.printing.maple"]], "sympy.printing.mathematica": [[214, "module-sympy.printing.mathematica"]], "sympy.printing.mathml": [[214, "module-sympy.printing.mathml"]], "sympy.printing.octave": [[214, "module-sympy.printing.octave"]], "sympy.printing.precedence": [[214, "module-sympy.printing.precedence"]], "sympy.printing.pretty": [[214, "module-sympy.printing.pretty"]], "sympy.printing.pretty.pretty": [[214, "module-sympy.printing.pretty.pretty"]], "sympy.printing.pretty.pretty_symbology": [[214, "module-sympy.printing.pretty.pretty_symbology"]], "sympy.printing.pretty.stringpict": [[214, "module-sympy.printing.pretty.stringpict"]], "sympy.printing.preview": [[214, "module-sympy.printing.preview"]], "sympy.printing.printer": [[214, "module-sympy.printing.printer"]], "sympy.printing.pycode": [[214, "module-sympy.printing.pycode"]], "sympy.printing.python": [[214, "module-sympy.printing.python"]], "sympy.printing.rcode": [[214, "module-sympy.printing.rcode"]], "sympy.printing.repr": [[214, "module-sympy.printing.repr"]], "sympy.printing.rust": [[214, "module-sympy.printing.rust"]], "sympy.printing.smtlib": [[214, "module-sympy.printing.smtlib"]], "sympy.printing.str": [[214, "module-sympy.printing.str"]], "sympy.printing.tree": [[214, "module-sympy.printing.tree"]], "terminal_width() (sympy.printing.pretty.stringpict.stringpict method)": [[214, "sympy.printing.pretty.stringpict.stringPict.terminal_width"]], "tree() (in module sympy.printing.tree)": [[214, "sympy.printing.tree.tree"]], "vobj() (in module sympy.printing.pretty.pretty_symbology)": [[214, "sympy.printing.pretty.pretty_symbology.vobj"]], "width() (sympy.printing.pretty.stringpict.stringpict method)": [[214, "sympy.printing.pretty.stringpict.stringPict.width"]], "xobj() (in module sympy.printing.pretty.pretty_symbology)": [[214, "sympy.printing.pretty.pretty_symbology.xobj"]], "xstr() (in module sympy.printing.pretty.pretty_symbology)": [[214, "sympy.printing.pretty.pretty_symbology.xstr"]], "xsym() (in module sympy.printing.pretty.pretty_symbology)": [[214, "sympy.printing.pretty.pretty_symbology.xsym"]], "finiteformalpowerseries (class in sympy.series.formal)": [[216, "sympy.series.formal.FiniteFormalPowerSeries"]], "formalpowerseries (class in sympy.series.formal)": [[216, "sympy.series.formal.FormalPowerSeries"]], "formalpowerseriescompose (class in sympy.series.formal)": [[216, "sympy.series.formal.FormalPowerSeriesCompose"]], "formalpowerseriesinverse (class in sympy.series.formal)": [[216, "sympy.series.formal.FormalPowerSeriesInverse"]], "formalpowerseriesproduct (class in sympy.series.formal)": [[216, "sympy.series.formal.FormalPowerSeriesProduct"]], "coeff_bell() (sympy.series.formal.formalpowerseries method)": [[216, "sympy.series.formal.FormalPowerSeries.coeff_bell"]], "compose() (sympy.series.formal.formalpowerseries method)": [[216, "sympy.series.formal.FormalPowerSeries.compose"]], "compute_fps() (in module sympy.series.formal)": [[216, "sympy.series.formal.compute_fps"]], "exp_re() (in module sympy.series.formal)": [[216, "sympy.series.formal.exp_re"]], "fps() (in module sympy.series.formal)": [[216, "sympy.series.formal.fps"]], "function (sympy.series.formal.formalpowerseriescompose property)": [[216, "sympy.series.formal.FormalPowerSeriesCompose.function"]], "function (sympy.series.formal.formalpowerseriesinverse property)": [[216, "sympy.series.formal.FormalPowerSeriesInverse.function"]], "function (sympy.series.formal.formalpowerseriesproduct property)": [[216, "sympy.series.formal.FormalPowerSeriesProduct.function"]], "hyper_algorithm() (in module sympy.series.formal)": [[216, "sympy.series.formal.hyper_algorithm"]], "hyper_re() (in module sympy.series.formal)": [[216, "sympy.series.formal.hyper_re"]], "infinite (sympy.series.formal.formalpowerseries property)": [[216, "sympy.series.formal.FormalPowerSeries.infinite"]], "integrate() (sympy.series.formal.formalpowerseries method)": [[216, "sympy.series.formal.FormalPowerSeries.integrate"]], "inverse() (sympy.series.formal.formalpowerseries method)": [[216, "sympy.series.formal.FormalPowerSeries.inverse"]], "polynomial() (sympy.series.formal.formalpowerseries method)": [[216, "sympy.series.formal.FormalPowerSeries.polynomial"]], "product() (sympy.series.formal.formalpowerseries method)": [[216, "sympy.series.formal.FormalPowerSeries.product"]], "rational_algorithm() (in module sympy.series.formal)": [[216, "sympy.series.formal.rational_algorithm"]], "rational_independent() (in module sympy.series.formal)": [[216, "sympy.series.formal.rational_independent"]], "rsolve_hypergeometric() (in module sympy.series.formal)": [[216, "sympy.series.formal.rsolve_hypergeometric"]], "simplede() (in module sympy.series.formal)": [[216, "sympy.series.formal.simpleDE"]], "solve_de() (in module sympy.series.formal)": [[216, "sympy.series.formal.solve_de"]], "truncate() (sympy.series.formal.formalpowerseries method)": [[216, "sympy.series.formal.FormalPowerSeries.truncate"]], "fourierseries (class in sympy.series.fourier)": [[217, "sympy.series.fourier.FourierSeries"]], "fourier_series() (in module sympy.series.fourier)": [[217, "sympy.series.fourier.fourier_series"]], "scale() (sympy.series.fourier.fourierseries method)": [[217, "sympy.series.fourier.FourierSeries.scale"]], "scalex() (sympy.series.fourier.fourierseries method)": [[217, "sympy.series.fourier.FourierSeries.scalex"]], "shift() (sympy.series.fourier.fourierseries method)": [[217, "sympy.series.fourier.FourierSeries.shift"]], "shiftx() (sympy.series.fourier.fourierseries method)": [[217, "sympy.series.fourier.FourierSeries.shiftx"]], "sigma_approximation() (sympy.series.fourier.fourierseries method)": [[217, "sympy.series.fourier.FourierSeries.sigma_approximation"]], "truncate() (sympy.series.fourier.fourierseries method)": [[217, "sympy.series.fourier.FourierSeries.truncate"]], "difference_delta() (in module sympy.series.limitseq)": [[219, "sympy.series.limitseq.difference_delta"]], "dominant() (in module sympy.series.limitseq)": [[219, "sympy.series.limitseq.dominant"]], "limit_seq() (in module sympy.series.limitseq)": [[219, "sympy.series.limitseq.limit_seq"]], "emptysequence (class in sympy.series.sequences)": [[220, "sympy.series.sequences.EmptySequence"]], "recursiveseq (class in sympy.series.sequences)": [[220, "sympy.series.sequences.RecursiveSeq"]], "seqadd (class in sympy.series.sequences)": [[220, "sympy.series.sequences.SeqAdd"]], "seqbase (class in sympy.series.sequences)": [[220, "sympy.series.sequences.SeqBase"]], "seqformula (class in sympy.series.sequences)": [[220, "sympy.series.sequences.SeqFormula"]], "seqmul (class in sympy.series.sequences)": [[220, "sympy.series.sequences.SeqMul"]], "seqper (class in sympy.series.sequences)": [[220, "sympy.series.sequences.SeqPer"]], "coeff() (sympy.series.sequences.seqbase method)": [[220, "sympy.series.sequences.SeqBase.coeff"]], "coeff_mul() (sympy.series.sequences.emptysequence method)": [[220, "sympy.series.sequences.EmptySequence.coeff_mul"]], "coeff_mul() (sympy.series.sequences.seqbase method)": [[220, "sympy.series.sequences.SeqBase.coeff_mul"]], "coeff_mul() (sympy.series.sequences.seqformula method)": [[220, "sympy.series.sequences.SeqFormula.coeff_mul"]], "coeff_mul() (sympy.series.sequences.seqper method)": [[220, "sympy.series.sequences.SeqPer.coeff_mul"]], "find_linear_recurrence() (sympy.series.sequences.seqbase method)": [[220, "sympy.series.sequences.SeqBase.find_linear_recurrence"]], "free_symbols (sympy.series.sequences.seqbase property)": [[220, "sympy.series.sequences.SeqBase.free_symbols"]], "gen (sympy.series.sequences.seqbase property)": [[220, "sympy.series.sequences.SeqBase.gen"]], "initial (sympy.series.sequences.recursiveseq property)": [[220, "sympy.series.sequences.RecursiveSeq.initial"]], "interval (sympy.series.sequences.recursiveseq property)": [[220, "sympy.series.sequences.RecursiveSeq.interval"]], "interval (sympy.series.sequences.seqbase property)": [[220, "sympy.series.sequences.SeqBase.interval"]], "length (sympy.series.sequences.seqbase property)": [[220, "sympy.series.sequences.SeqBase.length"]], "n (sympy.series.sequences.recursiveseq property)": [[220, "sympy.series.sequences.RecursiveSeq.n"]], "recurrence (sympy.series.sequences.recursiveseq property)": [[220, "sympy.series.sequences.RecursiveSeq.recurrence"]], "reduce() (sympy.series.sequences.seqadd static method)": [[220, "sympy.series.sequences.SeqAdd.reduce"]], "reduce() (sympy.series.sequences.seqmul static method)": [[220, "sympy.series.sequences.SeqMul.reduce"]], "sequence() (in module sympy.series.sequences)": [[220, "sympy.series.sequences.sequence"]], "start (sympy.series.sequences.recursiveseq property)": [[220, "sympy.series.sequences.RecursiveSeq.start"]], "start (sympy.series.sequences.seqbase property)": [[220, "sympy.series.sequences.SeqBase.start"]], "stop (sympy.series.sequences.recursiveseq property)": [[220, "sympy.series.sequences.RecursiveSeq.stop"]], "stop (sympy.series.sequences.seqbase property)": [[220, "sympy.series.sequences.SeqBase.stop"]], "variables (sympy.series.sequences.seqbase property)": [[220, "sympy.series.sequences.SeqBase.variables"]], "y (sympy.series.sequences.recursiveseq property)": [[220, "sympy.series.sequences.RecursiveSeq.y"]], "yn (sympy.series.sequences.recursiveseq property)": [[220, "sympy.series.sequences.RecursiveSeq.yn"]], "limit (class in sympy.series.limits)": [[221, "sympy.series.limits.Limit"]], "order (class in sympy.series.order)": [[221, "sympy.series.order.Order"]], "subsset (class in sympy.series.gruntz)": [[221, "sympy.series.gruntz.SubsSet"]], "build_expression_tree() (in module sympy.series.gruntz)": [[221, "sympy.series.gruntz.build_expression_tree"]], "calculate_series() (in module sympy.series.gruntz)": [[221, "sympy.series.gruntz.calculate_series"]], "compare() (in module sympy.series.gruntz)": [[221, "sympy.series.gruntz.compare"]], "contains() (sympy.series.order.order method)": [[221, "sympy.series.order.Order.contains"]], "copy() (sympy.series.gruntz.subsset method)": [[221, "sympy.series.gruntz.SubsSet.copy"]], "do_subs() (sympy.series.gruntz.subsset method)": [[221, "sympy.series.gruntz.SubsSet.do_subs"]], "doit() (sympy.series.limits.limit method)": [[221, "sympy.series.limits.Limit.doit"]], "gruntz() (in module sympy.series.gruntz)": [[221, "sympy.series.gruntz.gruntz"]], "limit() (in module sympy.series.limits)": [[221, "sympy.series.limits.limit"]], "limitinf() (in module sympy.series.gruntz)": [[221, "sympy.series.gruntz.limitinf"]], "meets() (sympy.series.gruntz.subsset method)": [[221, "sympy.series.gruntz.SubsSet.meets"]], "mrv() (in module sympy.series.gruntz)": [[221, "sympy.series.gruntz.mrv"]], "mrv_leadterm() (in module sympy.series.gruntz)": [[221, "sympy.series.gruntz.mrv_leadterm"]], "mrv_max1() (in module sympy.series.gruntz)": [[221, "sympy.series.gruntz.mrv_max1"]], "mrv_max3() (in module sympy.series.gruntz)": [[221, "sympy.series.gruntz.mrv_max3"]], "residue() (in module sympy.series.residues)": [[221, "sympy.series.residues.residue"]], "rewrite() (in module sympy.series.gruntz)": [[221, "sympy.series.gruntz.rewrite"]], "richardson() (in module sympy.series.acceleration)": [[221, "sympy.series.acceleration.richardson"]], "series() (in module sympy.series.series)": [[221, "sympy.series.series.series"]], "shanks() (in module sympy.series.acceleration)": [[221, "sympy.series.acceleration.shanks"]], "sign() (in module sympy.series.gruntz)": [[221, "sympy.series.gruntz.sign"]], "union() (sympy.series.gruntz.subsset method)": [[221, "sympy.series.gruntz.SubsSet.union"]], "cartesiancomplexregion (class in sympy.sets.fancysets)": [[222, "sympy.sets.fancysets.CartesianComplexRegion"]], "complement (class in sympy.sets.sets)": [[222, "sympy.sets.sets.Complement"]], "complexregion (class in sympy.sets.fancysets)": [[222, "sympy.sets.fancysets.ComplexRegion"]], "complexes (class in sympy.sets.fancysets)": [[222, "sympy.sets.fancysets.Complexes"]], "conditionset (class in sympy.sets.conditionset)": [[222, "sympy.sets.conditionset.ConditionSet"]], "contains (class in sympy.sets.conditionset)": [[222, "sympy.sets.conditionset.Contains"]], "disjointunion (class in sympy.sets.sets)": [[222, "sympy.sets.sets.DisjointUnion"]], "emptyset (class in sympy.sets.sets)": [[222, "sympy.sets.sets.EmptySet"]], "finiteset (class in sympy.sets.sets)": [[222, "sympy.sets.sets.FiniteSet"]], "imageset (class in sympy.sets.fancysets)": [[222, "sympy.sets.fancysets.ImageSet"]], "integers (class in sympy.sets.fancysets)": [[222, "sympy.sets.fancysets.Integers"]], "intersection (class in sympy.sets.sets)": [[222, "sympy.sets.sets.Intersection"]], "interval (class in sympy.sets.sets)": [[222, "sympy.sets.sets.Interval"]], "lopen() (sympy.sets.sets.interval class method)": [[222, "sympy.sets.sets.Interval.Lopen"]], "naturals (class in sympy.sets.fancysets)": [[222, "sympy.sets.fancysets.Naturals"]], "naturals0 (class in sympy.sets.fancysets)": [[222, "sympy.sets.fancysets.Naturals0"]], "polarcomplexregion (class in sympy.sets.fancysets)": [[222, "sympy.sets.fancysets.PolarComplexRegion"]], "powerset (class in sympy.sets.powerset)": [[222, "sympy.sets.powerset.PowerSet"]], "productset (class in sympy.sets.sets)": [[222, "sympy.sets.sets.ProductSet"]], "range (class in sympy.sets.fancysets)": [[222, "sympy.sets.fancysets.Range"]], "rationals (class in sympy.sets.fancysets)": [[222, "sympy.sets.fancysets.Rationals"]], "reals (class in sympy.sets.fancysets)": [[222, "sympy.sets.fancysets.Reals"]], "ropen() (sympy.sets.sets.interval class method)": [[222, "sympy.sets.sets.Interval.Ropen"]], "set (class in sympy.sets.sets)": [[222, "sympy.sets.sets.Set"]], "setkind (class in sympy.sets.conditionset)": [[222, "sympy.sets.conditionset.SetKind"]], "symmetricdifference (class in sympy.sets.sets)": [[222, "sympy.sets.sets.SymmetricDifference"]], "union (class in sympy.sets.sets)": [[222, "sympy.sets.sets.Union"]], "universalset (class in sympy.sets.sets)": [[222, "sympy.sets.sets.UniversalSet"]], "a_interval (sympy.sets.fancysets.complexregion property)": [[222, "sympy.sets.fancysets.ComplexRegion.a_interval"]], "as_relational() (sympy.sets.fancysets.range method)": [[222, "sympy.sets.fancysets.Range.as_relational"]], "as_relational() (sympy.sets.sets.complement method)": [[222, "sympy.sets.sets.Complement.as_relational"]], "as_relational() (sympy.sets.sets.finiteset method)": [[222, "sympy.sets.sets.FiniteSet.as_relational"]], "as_relational() (sympy.sets.sets.intersection method)": [[222, "sympy.sets.sets.Intersection.as_relational"]], "as_relational() (sympy.sets.sets.interval method)": [[222, "sympy.sets.sets.Interval.as_relational"]], "as_relational() (sympy.sets.sets.symmetricdifference method)": [[222, "sympy.sets.sets.SymmetricDifference.as_relational"]], "as_relational() (sympy.sets.sets.union method)": [[222, "sympy.sets.sets.Union.as_relational"]], "b_interval (sympy.sets.fancysets.complexregion property)": [[222, "sympy.sets.fancysets.ComplexRegion.b_interval"]], "boundary (sympy.sets.sets.set property)": [[222, "sympy.sets.sets.Set.boundary"]], "closure (sympy.sets.sets.set property)": [[222, "sympy.sets.sets.Set.closure"]], "complement() (sympy.sets.sets.set method)": [[222, "sympy.sets.sets.Set.complement"]], "contains() (sympy.sets.sets.set method)": [[222, "sympy.sets.sets.Set.contains"]], "end (sympy.sets.sets.interval property)": [[222, "sympy.sets.sets.Interval.end"]], "from_real() (sympy.sets.fancysets.complexregion class method)": [[222, "sympy.sets.fancysets.ComplexRegion.from_real"]], "imageset() (in module sympy.sets.sets)": [[222, "sympy.sets.sets.imageset"]], "inf (sympy.sets.sets.set property)": [[222, "sympy.sets.sets.Set.inf"]], "interior (sympy.sets.sets.set property)": [[222, "sympy.sets.sets.Set.interior"]], "intersect() (sympy.sets.sets.set method)": [[222, "sympy.sets.sets.Set.intersect"]], "intersection() (sympy.sets.sets.set method)": [[222, "sympy.sets.sets.Set.intersection"]], "is_closed (sympy.sets.sets.set property)": [[222, "sympy.sets.sets.Set.is_closed"]], "is_disjoint() (sympy.sets.sets.set method)": [[222, "sympy.sets.sets.Set.is_disjoint"]], "is_iterable (sympy.sets.sets.productset property)": [[222, "sympy.sets.sets.ProductSet.is_iterable"]], "is_left_unbounded (sympy.sets.sets.interval property)": [[222, "sympy.sets.sets.Interval.is_left_unbounded"]], "is_open (sympy.sets.sets.set property)": [[222, "sympy.sets.sets.Set.is_open"]], "is_proper_subset() (sympy.sets.sets.set method)": [[222, "sympy.sets.sets.Set.is_proper_subset"]], "is_proper_superset() (sympy.sets.sets.set method)": [[222, "sympy.sets.sets.Set.is_proper_superset"]], "is_right_unbounded (sympy.sets.sets.interval property)": [[222, "sympy.sets.sets.Interval.is_right_unbounded"]], "is_subset() (sympy.sets.sets.set method)": [[222, "sympy.sets.sets.Set.is_subset"]], "is_superset() (sympy.sets.sets.set method)": [[222, "sympy.sets.sets.Set.is_superset"]], "isdisjoint() (sympy.sets.sets.set method)": [[222, "sympy.sets.sets.Set.isdisjoint"]], "issubset() (sympy.sets.sets.set method)": [[222, "sympy.sets.sets.Set.issubset"]], "issuperset() (sympy.sets.sets.set method)": [[222, "sympy.sets.sets.Set.issuperset"]], "kind (sympy.sets.sets.set property)": [[222, "sympy.sets.sets.Set.kind"]], "left_open (sympy.sets.sets.interval property)": [[222, "sympy.sets.sets.Interval.left_open"]], "measure (sympy.sets.sets.set property)": [[222, "sympy.sets.sets.Set.measure"]], "normalize_theta_set() (in module sympy.sets.fancysets)": [[222, "sympy.sets.fancysets.normalize_theta_set"]], "open() (sympy.sets.sets.interval class method)": [[222, "sympy.sets.sets.Interval.open"]], "powerset() (sympy.sets.sets.set method)": [[222, "sympy.sets.sets.Set.powerset"]], "psets (sympy.sets.fancysets.complexregion property)": [[222, "sympy.sets.fancysets.ComplexRegion.psets"]], "reduce() (sympy.sets.sets.complement static method)": [[222, "sympy.sets.sets.Complement.reduce"]], "reversed (sympy.sets.fancysets.range property)": [[222, "sympy.sets.fancysets.Range.reversed"]], "right_open (sympy.sets.sets.interval property)": [[222, "sympy.sets.sets.Interval.right_open"]], "sets (sympy.sets.fancysets.complexregion property)": [[222, "sympy.sets.fancysets.ComplexRegion.sets"]], "start (sympy.sets.sets.interval property)": [[222, "sympy.sets.sets.Interval.start"]], "sup (sympy.sets.sets.set property)": [[222, "sympy.sets.sets.Set.sup"]], "symmetric_difference() (sympy.sets.sets.set method)": [[222, "sympy.sets.sets.Set.symmetric_difference"]], "sympy.sets.conditionset": [[222, "module-sympy.sets.conditionset"]], "sympy.sets.fancysets": [[222, "module-sympy.sets.fancysets"]], "sympy.sets.powerset": [[222, "module-sympy.sets.powerset"]], "sympy.sets.sets": [[222, "module-sympy.sets.sets"]], "union() (sympy.sets.sets.set method)": [[222, "sympy.sets.sets.Set.union"]], "tr0() (in module sympy.simplify.fu)": [[223, "sympy.simplify.fu.TR0"]], "tr1() (in module sympy.simplify.fu)": [[223, "sympy.simplify.fu.TR1"]], "tr10() (in module sympy.simplify.fu)": [[223, "sympy.simplify.fu.TR10"]], "tr10i() (in module sympy.simplify.fu)": [[223, "sympy.simplify.fu.TR10i"]], "tr11() (in module sympy.simplify.fu)": [[223, "sympy.simplify.fu.TR11"]], "tr111() (in module sympy.simplify.fu)": [[223, "sympy.simplify.fu.TR111"]], "tr12() (in module sympy.simplify.fu)": [[223, "sympy.simplify.fu.TR12"]], "tr12i() (in module sympy.simplify.fu)": [[223, "sympy.simplify.fu.TR12i"]], "tr13() (in module sympy.simplify.fu)": [[223, "sympy.simplify.fu.TR13"]], "tr14() (in module sympy.simplify.fu)": [[223, "sympy.simplify.fu.TR14"]], "tr15() (in module sympy.simplify.fu)": [[223, "sympy.simplify.fu.TR15"]], "tr16() (in module sympy.simplify.fu)": [[223, "sympy.simplify.fu.TR16"]], "tr2() (in module sympy.simplify.fu)": [[223, "sympy.simplify.fu.TR2"]], "tr22() (in module sympy.simplify.fu)": [[223, "sympy.simplify.fu.TR22"]], "tr2i() (in module sympy.simplify.fu)": [[223, "sympy.simplify.fu.TR2i"]], "tr3() (in module sympy.simplify.fu)": [[223, "sympy.simplify.fu.TR3"]], "tr4() (in module sympy.simplify.fu)": [[223, "sympy.simplify.fu.TR4"]], "tr5() (in module sympy.simplify.fu)": [[223, "sympy.simplify.fu.TR5"]], "tr6() (in module sympy.simplify.fu)": [[223, "sympy.simplify.fu.TR6"]], "tr7() (in module sympy.simplify.fu)": [[223, "sympy.simplify.fu.TR7"]], "tr8() (in module sympy.simplify.fu)": [[223, "sympy.simplify.fu.TR8"]], "tr9() (in module sympy.simplify.fu)": [[223, "sympy.simplify.fu.TR9"]], "trmorrie() (in module sympy.simplify.fu)": [[223, "sympy.simplify.fu.TRmorrie"]], "trpower() (in module sympy.simplify.fu)": [[223, "sympy.simplify.fu.TRpower"]], "fu() (in module sympy.simplify.fu)": [[223, "sympy.simplify.fu.fu"]], "sympy.simplify.hyperexpand_doc": [[224, "module-sympy.simplify.hyperexpand_doc"]], "epath (class in sympy.simplify.epathtools)": [[226, "sympy.simplify.epathtools.EPath"]], "apply() (sympy.simplify.epathtools.epath method)": [[226, "sympy.simplify.epathtools.EPath.apply"]], "besselsimp() (in module sympy.simplify.simplify)": [[226, "sympy.simplify.simplify.besselsimp"]], "collect() (in module sympy.simplify.radsimp)": [[226, "sympy.simplify.radsimp.collect"]], "collect_const() (in module sympy.simplify.radsimp)": [[226, "sympy.simplify.radsimp.collect_const"]], "collect_sqrt() (in module sympy.simplify.radsimp)": [[226, "sympy.simplify.radsimp.collect_sqrt"]], "combsimp() (in module sympy.simplify.combsimp)": [[226, "sympy.simplify.combsimp.combsimp"]], "cse() (in module sympy.simplify.cse_main)": [[226, "sympy.simplify.cse_main.cse"]], "epath() (in module sympy.simplify.epathtools)": [[226, "sympy.simplify.epathtools.epath"]], "fraction() (in module sympy.simplify.radsimp)": [[226, "sympy.simplify.radsimp.fraction"]], "hyperexpand() (in module sympy.simplify.hyperexpand)": [[226, "sympy.simplify.hyperexpand.hyperexpand"]], "hypersimilar() (in module sympy.simplify.simplify)": [[226, "sympy.simplify.simplify.hypersimilar"]], "hypersimp() (in module sympy.simplify.simplify)": [[226, "sympy.simplify.simplify.hypersimp"]], "kroneckersimp() (in module sympy.simplify.simplify)": [[226, "sympy.simplify.simplify.kroneckersimp"]], "logcombine() (in module sympy.simplify.simplify)": [[226, "sympy.simplify.simplify.logcombine"]], "nsimplify() (in module sympy.simplify.simplify)": [[226, "sympy.simplify.simplify.nsimplify"]], "nthroot() (in module sympy.simplify.simplify)": [[226, "sympy.simplify.simplify.nthroot"]], "opt_cse() (in module sympy.simplify.cse_main)": [[226, "sympy.simplify.cse_main.opt_cse"]], "posify() (in module sympy.simplify.simplify)": [[226, "sympy.simplify.simplify.posify"]], "powdenest() (in module sympy.simplify.powsimp)": [[226, "sympy.simplify.powsimp.powdenest"]], "powsimp() (in module sympy.simplify.powsimp)": [[226, "sympy.simplify.powsimp.powsimp"]], "rad_rationalize() (in module sympy.simplify.radsimp)": [[226, "sympy.simplify.radsimp.rad_rationalize"]], "radsimp() (in module sympy.simplify.radsimp)": [[226, "sympy.simplify.radsimp.radsimp"]], "ratsimp() (in module sympy.simplify.ratsimp)": [[226, "sympy.simplify.ratsimp.ratsimp"]], "ratsimpmodprime() (in module sympy.simplify.ratsimp)": [[226, "sympy.simplify.ratsimp.ratsimpmodprime"]], "rcollect() (in module sympy.simplify.radsimp)": [[226, "sympy.simplify.radsimp.rcollect"]], "select() (sympy.simplify.epathtools.epath method)": [[226, "sympy.simplify.epathtools.EPath.select"]], "separatevars() (in module sympy.simplify.simplify)": [[226, "sympy.simplify.simplify.separatevars"]], "simplify() (in module sympy.simplify.simplify)": [[226, "sympy.simplify.simplify.simplify"]], "sqrtdenest() (in module sympy.simplify.sqrtdenest)": [[226, "sympy.simplify.sqrtdenest.sqrtdenest"]], "sympy.simplify.combsimp": [[226, "module-sympy.simplify.combsimp"]], "sympy.simplify.cse_main": [[226, "module-sympy.simplify.cse_main"]], "sympy.simplify.epathtools": [[226, "module-sympy.simplify.epathtools"]], "sympy.simplify.hyperexpand": [[226, "module-sympy.simplify.hyperexpand"]], "sympy.simplify.powsimp": [[226, "module-sympy.simplify.powsimp"]], "sympy.simplify.radsimp": [[226, "module-sympy.simplify.radsimp"]], "sympy.simplify.ratsimp": [[226, "module-sympy.simplify.ratsimp"]], "sympy.simplify.sqrtdenest": [[226, "module-sympy.simplify.sqrtdenest"]], "sympy.simplify.trigsimp": [[226, "module-sympy.simplify.trigsimp"]], "tree_cse() (in module sympy.simplify.cse_main)": [[226, "sympy.simplify.cse_main.tree_cse"]], "trigsimp() (in module sympy.simplify.trigsimp)": [[226, "sympy.simplify.trigsimp.trigsimp"]], "binaryquadratic (class in sympy.solvers.diophantine.diophantine)": [[227, "sympy.solvers.diophantine.diophantine.BinaryQuadratic"]], "cubicthue (class in sympy.solvers.diophantine.diophantine)": [[227, "sympy.solvers.diophantine.diophantine.CubicThue"]], "diophantineequationtype (class in sympy.solvers.diophantine.diophantine)": [[227, "sympy.solvers.diophantine.diophantine.DiophantineEquationType"]], "diophantinesolutionset (class in sympy.solvers.diophantine.diophantine)": [[227, "sympy.solvers.diophantine.diophantine.DiophantineSolutionSet"]], "generalpythagorean (class in sympy.solvers.diophantine.diophantine)": [[227, "sympy.solvers.diophantine.diophantine.GeneralPythagorean"]], "generalsumofevenpowers (class in sympy.solvers.diophantine.diophantine)": [[227, "sympy.solvers.diophantine.diophantine.GeneralSumOfEvenPowers"]], "generalsumofsquares (class in sympy.solvers.diophantine.diophantine)": [[227, "sympy.solvers.diophantine.diophantine.GeneralSumOfSquares"]], "homogeneousgeneralquadratic (class in sympy.solvers.diophantine.diophantine)": [[227, "sympy.solvers.diophantine.diophantine.HomogeneousGeneralQuadratic"]], "homogeneousternaryquadratic (class in sympy.solvers.diophantine.diophantine)": [[227, "sympy.solvers.diophantine.diophantine.HomogeneousTernaryQuadratic"]], "homogeneousternaryquadraticnormal (class in sympy.solvers.diophantine.diophantine)": [[227, "sympy.solvers.diophantine.diophantine.HomogeneousTernaryQuadraticNormal"]], "inhomogeneousgeneralquadratic (class in sympy.solvers.diophantine.diophantine)": [[227, "sympy.solvers.diophantine.diophantine.InhomogeneousGeneralQuadratic"]], "inhomogeneousternaryquadratic (class in sympy.solvers.diophantine.diophantine)": [[227, "sympy.solvers.diophantine.diophantine.InhomogeneousTernaryQuadratic"]], "linear (class in sympy.solvers.diophantine.diophantine)": [[227, "sympy.solvers.diophantine.diophantine.Linear"]], "pqa() (in module sympy.solvers.diophantine.diophantine)": [[227, "sympy.solvers.diophantine.diophantine.PQa"]], "univariate (class in sympy.solvers.diophantine.diophantine)": [[227, "sympy.solvers.diophantine.diophantine.Univariate"]], "base_solution_linear() (in module sympy.solvers.diophantine.diophantine)": [[227, "sympy.solvers.diophantine.diophantine.base_solution_linear"]], "classify_diop() (in module sympy.solvers.diophantine.diophantine)": [[227, "sympy.solvers.diophantine.diophantine.classify_diop"]], "cornacchia() (in module sympy.solvers.diophantine.diophantine)": [[227, "sympy.solvers.diophantine.diophantine.cornacchia"]], "descent() (in module sympy.solvers.diophantine.diophantine)": [[227, "sympy.solvers.diophantine.diophantine.descent"]], "diop_dn() (in module sympy.solvers.diophantine.diophantine)": [[227, "sympy.solvers.diophantine.diophantine.diop_DN"]], "diop_bf_dn() (in module sympy.solvers.diophantine.diophantine)": [[227, "sympy.solvers.diophantine.diophantine.diop_bf_DN"]], "diop_general_pythagorean() (in module sympy.solvers.diophantine.diophantine)": [[227, "sympy.solvers.diophantine.diophantine.diop_general_pythagorean"]], "diop_general_sum_of_even_powers() (in module sympy.solvers.diophantine.diophantine)": [[227, "sympy.solvers.diophantine.diophantine.diop_general_sum_of_even_powers"]], "diop_general_sum_of_squares() (in module sympy.solvers.diophantine.diophantine)": [[227, "sympy.solvers.diophantine.diophantine.diop_general_sum_of_squares"]], "diop_linear() (in module sympy.solvers.diophantine.diophantine)": [[227, "sympy.solvers.diophantine.diophantine.diop_linear"]], "diop_quadratic() (in module sympy.solvers.diophantine.diophantine)": [[227, "sympy.solvers.diophantine.diophantine.diop_quadratic"]], "diop_solve() (in module sympy.solvers.diophantine.diophantine)": [[227, "sympy.solvers.diophantine.diophantine.diop_solve"]], "diop_ternary_quadratic() (in module sympy.solvers.diophantine.diophantine)": [[227, "sympy.solvers.diophantine.diophantine.diop_ternary_quadratic"]], "diop_ternary_quadratic_normal() (in module sympy.solvers.diophantine.diophantine)": [[227, "sympy.solvers.diophantine.diophantine.diop_ternary_quadratic_normal"]], "diophantine() (in module sympy.solvers.diophantine.diophantine)": [[227, "sympy.solvers.diophantine.diophantine.diophantine"]], "divisible() (in module sympy.solvers.diophantine.diophantine)": [[227, "sympy.solvers.diophantine.diophantine.divisible"]], "equivalent() (in module sympy.solvers.diophantine.diophantine)": [[227, "sympy.solvers.diophantine.diophantine.equivalent"]], "find_dn() (in module sympy.solvers.diophantine.diophantine)": [[227, "sympy.solvers.diophantine.diophantine.find_DN"]], "gaussian_reduce() (in module sympy.solvers.diophantine.diophantine)": [[227, "sympy.solvers.diophantine.diophantine.gaussian_reduce"]], "holzer() (in module sympy.solvers.diophantine.diophantine)": [[227, "sympy.solvers.diophantine.diophantine.holzer"]], "ldescent() (in module sympy.solvers.diophantine.diophantine)": [[227, "sympy.solvers.diophantine.diophantine.ldescent"]], "matches() (sympy.solvers.diophantine.diophantine.diophantineequationtype method)": [[227, "sympy.solvers.diophantine.diophantine.DiophantineEquationType.matches"]], "merge_solution() (in module sympy.solvers.diophantine.diophantine)": [[227, "sympy.solvers.diophantine.diophantine.merge_solution"]], "parametrize_ternary_quadratic() (in module sympy.solvers.diophantine.diophantine)": [[227, "sympy.solvers.diophantine.diophantine.parametrize_ternary_quadratic"]], "partition() (in module sympy.solvers.diophantine.diophantine)": [[227, "sympy.solvers.diophantine.diophantine.partition"]], "power_representation() (in module sympy.solvers.diophantine.diophantine)": [[227, "sympy.solvers.diophantine.diophantine.power_representation"]], "prime_as_sum_of_two_squares() (in module sympy.solvers.diophantine.diophantine)": [[227, "sympy.solvers.diophantine.diophantine.prime_as_sum_of_two_squares"]], "reconstruct() (in module sympy.solvers.diophantine.diophantine)": [[227, "sympy.solvers.diophantine.diophantine.reconstruct"]], "sqf_normal() (in module sympy.solvers.diophantine.diophantine)": [[227, "sympy.solvers.diophantine.diophantine.sqf_normal"]], "square_factor() (in module sympy.solvers.diophantine.diophantine)": [[227, "sympy.solvers.diophantine.diophantine.square_factor"]], "sum_of_four_squares() (in module sympy.solvers.diophantine.diophantine)": [[227, "sympy.solvers.diophantine.diophantine.sum_of_four_squares"]], "sum_of_powers() (in module sympy.solvers.diophantine.diophantine)": [[227, "sympy.solvers.diophantine.diophantine.sum_of_powers"]], "sum_of_squares() (in module sympy.solvers.diophantine.diophantine)": [[227, "sympy.solvers.diophantine.diophantine.sum_of_squares"]], "sum_of_three_squares() (in module sympy.solvers.diophantine.diophantine)": [[227, "sympy.solvers.diophantine.diophantine.sum_of_three_squares"]], "transformation_to_dn() (in module sympy.solvers.diophantine.diophantine)": [[227, "sympy.solvers.diophantine.diophantine.transformation_to_DN"]], "transformation_to_normal() (in module sympy.solvers.diophantine.diophantine)": [[227, "sympy.solvers.diophantine.diophantine.transformation_to_normal"]], "reduce_abs_inequalities() (in module sympy.solvers.inequalities)": [[229, "sympy.solvers.inequalities.reduce_abs_inequalities"]], "reduce_abs_inequality() (in module sympy.solvers.inequalities)": [[229, "sympy.solvers.inequalities.reduce_abs_inequality"]], "reduce_inequalities() (in module sympy.solvers.inequalities)": [[229, "sympy.solvers.inequalities.reduce_inequalities"]], "reduce_rational_inequalities() (in module sympy.solvers.inequalities)": [[229, "sympy.solvers.inequalities.reduce_rational_inequalities"]], "solve_poly_inequalities() (in module sympy.solvers.inequalities)": [[229, "sympy.solvers.inequalities.solve_poly_inequalities"]], "solve_poly_inequality() (in module sympy.solvers.inequalities)": [[229, "sympy.solvers.inequalities.solve_poly_inequality"]], "solve_rational_inequalities() (in module sympy.solvers.inequalities)": [[229, "sympy.solvers.inequalities.solve_rational_inequalities"]], "solve_univariate_inequality() (in module sympy.solvers.inequalities)": [[229, "sympy.solvers.inequalities.solve_univariate_inequality"]], "sympy.solvers.inequalities": [[229, "module-sympy.solvers.inequalities"]], "almostlinear (class in sympy.solvers.ode.single)": [[230, "sympy.solvers.ode.single.AlmostLinear"]], "bernoulli (class in sympy.solvers.ode.single)": [[230, "sympy.solvers.ode.single.Bernoulli"]], "factorable (class in sympy.solvers.ode.single)": [[230, "sympy.solvers.ode.single.Factorable"]], "firstexact (class in sympy.solvers.ode.single)": [[230, "sympy.solvers.ode.single.FirstExact"]], "firstlinear (class in sympy.solvers.ode.single)": [[230, "sympy.solvers.ode.single.FirstLinear"]], "homogeneouscoeffbest (class in sympy.solvers.ode.single)": [[230, "sympy.solvers.ode.single.HomogeneousCoeffBest"]], "homogeneouscoeffsubsdepdivindep (class in sympy.solvers.ode.single)": [[230, "sympy.solvers.ode.single.HomogeneousCoeffSubsDepDivIndep"]], "homogeneouscoeffsubsindepdivdep (class in sympy.solvers.ode.single)": [[230, "sympy.solvers.ode.single.HomogeneousCoeffSubsIndepDivDep"]], "liegroup (class in sympy.solvers.ode.single)": [[230, "sympy.solvers.ode.single.LieGroup"]], "linearcoefficients (class in sympy.solvers.ode.single)": [[230, "sympy.solvers.ode.single.LinearCoefficients"]], "liouville (class in sympy.solvers.ode.single)": [[230, "sympy.solvers.ode.single.Liouville"]], "nthalgebraic (class in sympy.solvers.ode.single)": [[230, "sympy.solvers.ode.single.NthAlgebraic"]], "nthlinearconstantcoeffhomogeneous (class in sympy.solvers.ode.single)": [[230, "sympy.solvers.ode.single.NthLinearConstantCoeffHomogeneous"]], "nthlinearconstantcoeffundeterminedcoefficients (class in sympy.solvers.ode.single)": [[230, "sympy.solvers.ode.single.NthLinearConstantCoeffUndeterminedCoefficients"]], "nthlinearconstantcoeffvariationofparameters (class in sympy.solvers.ode.single)": [[230, "sympy.solvers.ode.single.NthLinearConstantCoeffVariationOfParameters"]], "nthlineareulereqhomogeneous (class in sympy.solvers.ode.single)": [[230, "sympy.solvers.ode.single.NthLinearEulerEqHomogeneous"]], "nthlineareulereqnonhomogeneousundeterminedcoefficients (class in sympy.solvers.ode.single)": [[230, "sympy.solvers.ode.single.NthLinearEulerEqNonhomogeneousUndeterminedCoefficients"]], "nthlineareulereqnonhomogeneousvariationofparameters (class in sympy.solvers.ode.single)": [[230, "sympy.solvers.ode.single.NthLinearEulerEqNonhomogeneousVariationOfParameters"]], "nthorderreducible (class in sympy.solvers.ode.single)": [[230, "sympy.solvers.ode.single.NthOrderReducible"]], "rationalriccati (class in sympy.solvers.ode.single)": [[230, "sympy.solvers.ode.single.RationalRiccati"]], "riccatispecial (class in sympy.solvers.ode.single)": [[230, "sympy.solvers.ode.single.RiccatiSpecial"]], "secondhypergeometric (class in sympy.solvers.ode.single)": [[230, "sympy.solvers.ode.single.SecondHypergeometric"]], "secondlinearairy (class in sympy.solvers.ode.single)": [[230, "sympy.solvers.ode.single.SecondLinearAiry"]], "secondlinearbessel (class in sympy.solvers.ode.single)": [[230, "sympy.solvers.ode.single.SecondLinearBessel"]], "separable (class in sympy.solvers.ode.single)": [[230, "sympy.solvers.ode.single.Separable"]], "separablereduced (class in sympy.solvers.ode.single)": [[230, "sympy.solvers.ode.single.SeparableReduced"]], "_handle_integral() (in module sympy.solvers.ode.ode)": [[230, "sympy.solvers.ode.ode._handle_Integral"]], "_linear_2eq_order1_type6() (in module sympy.solvers.ode.ode)": [[230, "sympy.solvers.ode.ode._linear_2eq_order1_type6"]], "_linear_2eq_order1_type7() (in module sympy.solvers.ode.ode)": [[230, "sympy.solvers.ode.ode._linear_2eq_order1_type7"]], "_nonlinear_2eq_order1_type1() (in module sympy.solvers.ode.ode)": [[230, "sympy.solvers.ode.ode._nonlinear_2eq_order1_type1"]], "_nonlinear_2eq_order1_type2() (in module sympy.solvers.ode.ode)": [[230, "sympy.solvers.ode.ode._nonlinear_2eq_order1_type2"]], "_nonlinear_2eq_order1_type3() (in module sympy.solvers.ode.ode)": [[230, "sympy.solvers.ode.ode._nonlinear_2eq_order1_type3"]], "_nonlinear_2eq_order1_type4() (in module sympy.solvers.ode.ode)": [[230, "sympy.solvers.ode.ode._nonlinear_2eq_order1_type4"]], "_nonlinear_2eq_order1_type5() (in module sympy.solvers.ode.ode)": [[230, "sympy.solvers.ode.ode._nonlinear_2eq_order1_type5"]], "_nonlinear_3eq_order1_type1() (in module sympy.solvers.ode.ode)": [[230, "sympy.solvers.ode.ode._nonlinear_3eq_order1_type1"]], "_nonlinear_3eq_order1_type2() (in module sympy.solvers.ode.ode)": [[230, "sympy.solvers.ode.ode._nonlinear_3eq_order1_type2"]], "_nonlinear_3eq_order1_type3() (in module sympy.solvers.ode.ode)": [[230, "sympy.solvers.ode.ode._nonlinear_3eq_order1_type3"]], "_nonlinear_3eq_order1_type4() (in module sympy.solvers.ode.ode)": [[230, "sympy.solvers.ode.ode._nonlinear_3eq_order1_type4"]], "_nonlinear_3eq_order1_type5() (in module sympy.solvers.ode.ode)": [[230, "sympy.solvers.ode.ode._nonlinear_3eq_order1_type5"]], "allhints (in module sympy.solvers.ode)": [[230, "sympy.solvers.ode.allhints"]], "canonical_odes() (in module sympy.solvers.ode.systems)": [[230, "sympy.solvers.ode.systems.canonical_odes"]], "checkinfsol() (in module sympy.solvers.ode)": [[230, "sympy.solvers.ode.checkinfsol"]], "checkodesol() (in module sympy.solvers.ode)": [[230, "sympy.solvers.ode.checkodesol"]], "classify_ode() (in module sympy.solvers.ode)": [[230, "sympy.solvers.ode.classify_ode"]], "compute_m_ybar() (in module sympy.solvers.ode.riccati)": [[230, "sympy.solvers.ode.riccati.compute_m_ybar"]], "constant_renumber() (in module sympy.solvers.ode.ode)": [[230, "sympy.solvers.ode.ode.constant_renumber"]], "constantsimp() (in module sympy.solvers.ode)": [[230, "sympy.solvers.ode.constantsimp"]], "construct_c() (in module sympy.solvers.ode.riccati)": [[230, "sympy.solvers.ode.riccati.construct_c"]], "construct_d() (in module sympy.solvers.ode.riccati)": [[230, "sympy.solvers.ode.riccati.construct_d"]], "dsolve() (in module sympy.solvers.ode)": [[230, "sympy.solvers.ode.dsolve"]], "dsolve_system() (in module sympy.solvers.ode.systems)": [[230, "sympy.solvers.ode.systems.dsolve_system"]], "get_gen_sol_from_part_sol() (in module sympy.solvers.ode.riccati)": [[230, "sympy.solvers.ode.riccati.get_gen_sol_from_part_sol"]], "homogeneous_order() (in module sympy.solvers.ode)": [[230, "sympy.solvers.ode.homogeneous_order"]], "infinitesimals() (in module sympy.solvers.ode)": [[230, "sympy.solvers.ode.infinitesimals"]], "lie_heuristic_abaco1_product() (in module sympy.solvers.ode.lie_group)": [[230, "sympy.solvers.ode.lie_group.lie_heuristic_abaco1_product"]], "lie_heuristic_abaco1_simple() (in module sympy.solvers.ode.lie_group)": [[230, "sympy.solvers.ode.lie_group.lie_heuristic_abaco1_simple"]], "lie_heuristic_abaco2_similar() (in module sympy.solvers.ode.lie_group)": [[230, "sympy.solvers.ode.lie_group.lie_heuristic_abaco2_similar"]], "lie_heuristic_abaco2_unique_general() (in module sympy.solvers.ode.lie_group)": [[230, "sympy.solvers.ode.lie_group.lie_heuristic_abaco2_unique_general"]], "lie_heuristic_abaco2_unique_unknown() (in module sympy.solvers.ode.lie_group)": [[230, "sympy.solvers.ode.lie_group.lie_heuristic_abaco2_unique_unknown"]], "lie_heuristic_bivariate() (in module sympy.solvers.ode.lie_group)": [[230, "sympy.solvers.ode.lie_group.lie_heuristic_bivariate"]], "lie_heuristic_chi() (in module sympy.solvers.ode.lie_group)": [[230, "sympy.solvers.ode.lie_group.lie_heuristic_chi"]], "lie_heuristic_function_sum() (in module sympy.solvers.ode.lie_group)": [[230, "sympy.solvers.ode.lie_group.lie_heuristic_function_sum"]], "lie_heuristic_linear() (in module sympy.solvers.ode.lie_group)": [[230, "sympy.solvers.ode.lie_group.lie_heuristic_linear"]], "linear_ode_to_matrix() (in module sympy.solvers.ode.systems)": [[230, "sympy.solvers.ode.systems.linear_ode_to_matrix"]], "linodesolve() (in module sympy.solvers.ode.systems)": [[230, "sympy.solvers.ode.systems.linodesolve"]], "linodesolve_type() (in module sympy.solvers.ode.systems)": [[230, "sympy.solvers.ode.systems.linodesolve_type"]], "matrix_exp() (in module sympy.solvers.ode.systems)": [[230, "sympy.solvers.ode.systems.matrix_exp"]], "matrix_exp_jordan_form() (in module sympy.solvers.ode.systems)": [[230, "sympy.solvers.ode.systems.matrix_exp_jordan_form"]], "ode_1st_power_series() (in module sympy.solvers.ode.ode)": [[230, "sympy.solvers.ode.ode.ode_1st_power_series"]], "ode_2nd_power_series_ordinary() (in module sympy.solvers.ode.ode)": [[230, "sympy.solvers.ode.ode.ode_2nd_power_series_ordinary"]], "ode_2nd_power_series_regular() (in module sympy.solvers.ode.ode)": [[230, "sympy.solvers.ode.ode.ode_2nd_power_series_regular"]], "ode_sol_simplicity() (in module sympy.solvers.ode.ode)": [[230, "sympy.solvers.ode.ode.ode_sol_simplicity"]], "odesimp() (in module sympy.solvers.ode.ode)": [[230, "sympy.solvers.ode.ode.odesimp"]], "rational_laurent_series() (in module sympy.solvers.ode.riccati)": [[230, "sympy.solvers.ode.riccati.rational_laurent_series"]], "remove_redundant_sols() (in module sympy.solvers.ode.riccati)": [[230, "sympy.solvers.ode.riccati.remove_redundant_sols"]], "riccati_inverse_normal() (in module sympy.solvers.ode.riccati)": [[230, "sympy.solvers.ode.riccati.riccati_inverse_normal"]], "riccati_normal() (in module sympy.solvers.ode.riccati)": [[230, "sympy.solvers.ode.riccati.riccati_normal"]], "riccati_reduced() (in module sympy.solvers.ode.riccati)": [[230, "sympy.solvers.ode.riccati.riccati_reduced"]], "solve_aux_eq() (in module sympy.solvers.ode.riccati)": [[230, "sympy.solvers.ode.riccati.solve_aux_eq"]], "solve_riccati() (in module sympy.solvers.ode.riccati)": [[230, "sympy.solvers.ode.riccati.solve_riccati"]], "sympy.solvers.ode": [[230, "module-sympy.solvers.ode"]], "sympy.solvers.ode.ode": [[230, "module-sympy.solvers.ode.ode"]], "checkpdesol() (in module sympy.solvers.pde)": [[231, "sympy.solvers.pde.checkpdesol"]], "classify_pde() (in module sympy.solvers.pde)": [[231, "sympy.solvers.pde.classify_pde"]], "pde_1st_linear_constant_coeff() (in module sympy.solvers.pde)": [[231, "sympy.solvers.pde.pde_1st_linear_constant_coeff"]], "pde_1st_linear_constant_coeff_homogeneous() (in module sympy.solvers.pde)": [[231, "sympy.solvers.pde.pde_1st_linear_constant_coeff_homogeneous"]], "pde_1st_linear_variable_coeff() (in module sympy.solvers.pde)": [[231, "sympy.solvers.pde.pde_1st_linear_variable_coeff"]], "pde_separate() (in module sympy.solvers.pde)": [[231, "sympy.solvers.pde.pde_separate"]], "pde_separate_add() (in module sympy.solvers.pde)": [[231, "sympy.solvers.pde.pde_separate_add"]], "pde_separate_mul() (in module sympy.solvers.pde)": [[231, "sympy.solvers.pde.pde_separate_mul"]], "pdsolve() (in module sympy.solvers.pde)": [[231, "sympy.solvers.pde.pdsolve"]], "sympy.solvers.pde": [[231, "module-sympy.solvers.pde"]], "checksol() (in module sympy.solvers.solvers)": [[232, "sympy.solvers.solvers.checksol"]], "nsolve() (in module sympy.solvers.solvers)": [[232, "sympy.solvers.solvers.nsolve"]], "ode_order() (in module sympy.solvers.deutils)": [[232, "sympy.solvers.deutils.ode_order"]], "rsolve() (in module sympy.solvers.recurr)": [[232, "sympy.solvers.recurr.rsolve"]], "rsolve_hyper() (in module sympy.solvers.recurr)": [[232, "sympy.solvers.recurr.rsolve_hyper"]], "rsolve_poly() (in module sympy.solvers.recurr)": [[232, "sympy.solvers.recurr.rsolve_poly"]], "rsolve_ratio() (in module sympy.solvers.recurr)": [[232, "sympy.solvers.recurr.rsolve_ratio"]], "solve() (in module sympy.solvers.solvers)": [[232, "sympy.solvers.solvers.solve"]], "solve_linear() (in module sympy.solvers.solvers)": [[232, "sympy.solvers.solvers.solve_linear"]], "solve_linear_system() (in module sympy.solvers.solvers)": [[232, "sympy.solvers.solvers.solve_linear_system"]], "solve_linear_system_lu() (in module sympy.solvers.solvers)": [[232, "sympy.solvers.solvers.solve_linear_system_LU"]], "solve_poly_system() (in module sympy.solvers.polysys)": [[232, "sympy.solvers.polysys.solve_poly_system"]], "solve_triangulated() (in module sympy.solvers.polysys)": [[232, "sympy.solvers.polysys.solve_triangulated"]], "solve_undetermined_coeffs() (in module sympy.solvers.solvers)": [[232, "sympy.solvers.solvers.solve_undetermined_coeffs"]], "sympy.solvers": [[232, "module-sympy.solvers"]], "sympy.solvers.recurr": [[232, "module-sympy.solvers.recurr"]], "unrad() (in module sympy.solvers.solvers)": [[232, "sympy.solvers.solvers.unrad"]], "_is_exponential() (in module sympy.solvers.solveset)": [[233, "sympy.solvers.solveset._is_exponential"]], "_is_logarithmic() (in module sympy.solvers.solveset)": [[233, "sympy.solvers.solveset._is_logarithmic"]], "_solve_exponential() (in module sympy.solvers.solveset)": [[233, "sympy.solvers.solveset._solve_exponential"]], "_solve_logarithm() (in module sympy.solvers.solveset)": [[233, "sympy.solvers.solveset._solve_logarithm"]], "_transolve() (in module sympy.solvers.solveset)": [[233, "sympy.solvers.solveset._transolve"]], "domain_check() (in module sympy.solvers.solveset)": [[233, "sympy.solvers.solveset.domain_check"]], "invert_complex() (in module sympy.solvers.solveset)": [[233, "sympy.solvers.solveset.invert_complex"]], "invert_real() (in module sympy.solvers.solveset)": [[233, "sympy.solvers.solveset.invert_real"]], "linear_eq_to_matrix() (in module sympy.solvers.solveset)": [[233, "sympy.solvers.solveset.linear_eq_to_matrix"]], "linsolve() (in module sympy.solvers.solveset)": [[233, "sympy.solvers.solveset.linsolve"]], "nonlinsolve() (in module sympy.solvers.solveset)": [[233, "sympy.solvers.solveset.nonlinsolve"]], "solveset() (in module sympy.solvers.solveset)": [[233, "sympy.solvers.solveset.solveset"]], "solveset_complex() (in module sympy.solvers.solveset)": [[233, "sympy.solvers.solveset.solveset_complex"]], "solveset_real() (in module sympy.solvers.solveset)": [[233, "sympy.solvers.solveset.solveset_real"]], "solvify() (in module sympy.solvers.solveset)": [[233, "sympy.solvers.solveset.solvify"]], "sympy.solvers.solveset": [[233, "module-sympy.solvers.solveset"]], "arcsin() (in module sympy.stats)": [[234, "sympy.stats.Arcsin"]], "benini() (in module sympy.stats)": [[234, "sympy.stats.Benini"]], "bernoulli() (in module sympy.stats)": [[234, "sympy.stats.Bernoulli"]], "bernoulliprocess (class in sympy.stats)": [[234, "sympy.stats.BernoulliProcess"]], "beta() (in module sympy.stats)": [[234, "sympy.stats.Beta"]], "betabinomial() (in module sympy.stats)": [[234, "sympy.stats.BetaBinomial"]], "betanoncentral() (in module sympy.stats)": [[234, "sympy.stats.BetaNoncentral"]], "betaprime() (in module sympy.stats)": [[234, "sympy.stats.BetaPrime"]], "binomial() (in module sympy.stats)": [[234, "sympy.stats.Binomial"]], "boundedpareto() (in module sympy.stats)": [[234, "sympy.stats.BoundedPareto"]], "cauchy() (in module sympy.stats)": [[234, "sympy.stats.Cauchy"]], "centralmoment (class in sympy.stats)": [[234, "sympy.stats.CentralMoment"]], "chi() (in module sympy.stats)": [[234, "sympy.stats.Chi"]], "chinoncentral() (in module sympy.stats)": [[234, "sympy.stats.ChiNoncentral"]], "chisquared() (in module sympy.stats)": [[234, "sympy.stats.ChiSquared"]], "coin() (in module sympy.stats)": [[234, "sympy.stats.Coin"]], "compounddistribution (class in sympy.stats.compound_rv)": [[234, "sympy.stats.compound_rv.CompoundDistribution"]], "conditionaldomain (class in sympy.stats.rv)": [[234, "sympy.stats.rv.ConditionalDomain"]], "continuousdomain (class in sympy.stats.crv)": [[234, "sympy.stats.crv.ContinuousDomain"]], "continuousmarkovchain (class in sympy.stats)": [[234, "sympy.stats.ContinuousMarkovChain"]], "continuouspspace (class in sympy.stats.crv)": [[234, "sympy.stats.crv.ContinuousPSpace"]], "continuousrv() (in module sympy.stats)": [[234, "sympy.stats.ContinuousRV"]], "covariance (class in sympy.stats)": [[234, "sympy.stats.Covariance"]], "crosscovariancematrix (class in sympy.stats)": [[234, "sympy.stats.CrossCovarianceMatrix"]], "dagum() (in module sympy.stats)": [[234, "sympy.stats.Dagum"]], "davis() (in module sympy.stats)": [[234, "sympy.stats.Davis"]], "die() (in module sympy.stats)": [[234, "sympy.stats.Die"]], "diepspace (class in sympy.stats.frv_types)": [[234, "sympy.stats.frv_types.DiePSpace"]], "discretemarkovchain (class in sympy.stats)": [[234, "sympy.stats.DiscreteMarkovChain"]], "discreteuniform() (in module sympy.stats)": [[234, "sympy.stats.DiscreteUniform"]], "e() (in module sympy.stats)": [[234, "sympy.stats.E"]], "erlang() (in module sympy.stats)": [[234, "sympy.stats.Erlang"]], "exgaussian() (in module sympy.stats)": [[234, "sympy.stats.ExGaussian"]], "expectation (class in sympy.stats)": [[234, "sympy.stats.Expectation"]], "expectationmatrix (class in sympy.stats)": [[234, "sympy.stats.ExpectationMatrix"]], "exponential() (in module sympy.stats)": [[234, "sympy.stats.Exponential"]], "fdistribution() (in module sympy.stats)": [[234, "sympy.stats.FDistribution"]], "finitedomain (class in sympy.stats.frv)": [[234, "sympy.stats.frv.FiniteDomain"]], "finitepspace (class in sympy.stats.frv)": [[234, "sympy.stats.frv.FinitePSpace"]], "finiterv() (in module sympy.stats)": [[234, "sympy.stats.FiniteRV"]], "fisherz() (in module sympy.stats)": [[234, "sympy.stats.FisherZ"]], "frechet() (in module sympy.stats)": [[234, "sympy.stats.Frechet"]], "gamma() (in module sympy.stats)": [[234, "sympy.stats.Gamma"]], "gammainverse() (in module sympy.stats)": [[234, "sympy.stats.GammaInverse"]], "gammaprocess (class in sympy.stats)": [[234, "sympy.stats.GammaProcess"]], "generalizedmultivariateloggamma() (in module sympy.stats)": [[234, "sympy.stats.GeneralizedMultivariateLogGamma"]], "generalizedmultivariateloggammaomega() (in module sympy.stats)": [[234, "sympy.stats.GeneralizedMultivariateLogGammaOmega"]], "geometric() (in module sympy.stats)": [[234, "sympy.stats.Geometric"]], "gompertz() (in module sympy.stats)": [[234, "sympy.stats.Gompertz"]], "gumbel() (in module sympy.stats)": [[234, "sympy.stats.Gumbel"]], "hermite() (in module sympy.stats)": [[234, "sympy.stats.Hermite"]], "hypergeometric() (in module sympy.stats)": [[234, "sympy.stats.Hypergeometric"]], "jointrv() (in module sympy.stats)": [[234, "sympy.stats.JointRV"]], "kumaraswamy() (in module sympy.stats)": [[234, "sympy.stats.Kumaraswamy"]], "laplace() (in module sympy.stats)": [[234, "sympy.stats.Laplace"]], "levy() (in module sympy.stats)": [[234, "sympy.stats.Levy"]], "loglogistic() (in module sympy.stats)": [[234, "sympy.stats.LogLogistic"]], "lognormal() (in module sympy.stats)": [[234, "sympy.stats.LogNormal"]], "logarithmic() (in module sympy.stats)": [[234, "sympy.stats.Logarithmic"]], "logistic() (in module sympy.stats)": [[234, "sympy.stats.Logistic"]], "lomax() (in module sympy.stats)": [[234, "sympy.stats.Lomax"]], "matrixgamma() (in module sympy.stats)": [[234, "sympy.stats.MatrixGamma"]], "matrixnormal() (in module sympy.stats)": [[234, "sympy.stats.MatrixNormal"]], "maxwell() (in module sympy.stats)": [[234, "sympy.stats.Maxwell"]], "moment (class in sympy.stats)": [[234, "sympy.stats.Moment"]], "moyal() (in module sympy.stats)": [[234, "sympy.stats.Moyal"]], "multinomial() (in module sympy.stats)": [[234, "sympy.stats.Multinomial"]], "multivariatebeta() (in module sympy.stats)": [[234, "sympy.stats.MultivariateBeta"]], "multivariateewens() (in module sympy.stats)": [[234, "sympy.stats.MultivariateEwens"]], "multivariatelaplace() (in module sympy.stats)": [[234, "sympy.stats.MultivariateLaplace"]], "multivariatenormal() (in module sympy.stats)": [[234, "sympy.stats.MultivariateNormal"]], "multivariatet() (in module sympy.stats)": [[234, "sympy.stats.MultivariateT"]], "nakagami() (in module sympy.stats)": [[234, "sympy.stats.Nakagami"]], "negativebinomial() (in module sympy.stats)": [[234, "sympy.stats.NegativeBinomial"]], "negativemultinomial() (in module sympy.stats)": [[234, "sympy.stats.NegativeMultinomial"]], "normal() (in module sympy.stats)": [[234, "sympy.stats.Normal"]], "normalgamma() (in module sympy.stats)": [[234, "sympy.stats.NormalGamma"]], "normalpspace (class in sympy.stats.crv_types)": [[234, "sympy.stats.crv_types.NormalPSpace"]], "p() (in module sympy.stats)": [[234, "sympy.stats.P"]], "pspace (class in sympy.stats.rv)": [[234, "sympy.stats.rv.PSpace"]], "pareto() (in module sympy.stats)": [[234, "sympy.stats.Pareto"]], "poisson() (in module sympy.stats)": [[234, "sympy.stats.Poisson"]], "poissonprocess (class in sympy.stats)": [[234, "sympy.stats.PoissonProcess"]], "powerfunction() (in module sympy.stats)": [[234, "sympy.stats.PowerFunction"]], "probability (class in sympy.stats)": [[234, "sympy.stats.Probability"]], "productdomain (class in sympy.stats.rv)": [[234, "sympy.stats.rv.ProductDomain"]], "productpspace (class in sympy.stats.rv)": [[234, "sympy.stats.rv.ProductPSpace"]], "quadraticu() (in module sympy.stats)": [[234, "sympy.stats.QuadraticU"]], "rademacher() (in module sympy.stats)": [[234, "sympy.stats.Rademacher"]], "raisedcosine() (in module sympy.stats)": [[234, "sympy.stats.RaisedCosine"]], "randomdomain (class in sympy.stats.rv)": [[234, "sympy.stats.rv.RandomDomain"]], "randomsymbol (class in sympy.stats.rv)": [[234, "sympy.stats.rv.RandomSymbol"]], "rayleigh() (in module sympy.stats)": [[234, "sympy.stats.Rayleigh"]], "reciprocal() (in module sympy.stats)": [[234, "sympy.stats.Reciprocal"]], "shiftedgompertz() (in module sympy.stats)": [[234, "sympy.stats.ShiftedGompertz"]], "singledomain (class in sympy.stats.rv)": [[234, "sympy.stats.rv.SingleDomain"]], "singlepspace (class in sympy.stats.rv)": [[234, "sympy.stats.rv.SinglePSpace"]], "skellam() (in module sympy.stats)": [[234, "sympy.stats.Skellam"]], "studentt() (in module sympy.stats)": [[234, "sympy.stats.StudentT"]], "trapezoidal() (in module sympy.stats)": [[234, "sympy.stats.Trapezoidal"]], "triangular() (in module sympy.stats)": [[234, "sympy.stats.Triangular"]], "uniform() (in module sympy.stats)": [[234, "sympy.stats.Uniform"]], "uniformsum() (in module sympy.stats)": [[234, "sympy.stats.UniformSum"]], "variance (class in sympy.stats)": [[234, "sympy.stats.Variance"]], "variancematrix (class in sympy.stats)": [[234, "sympy.stats.VarianceMatrix"]], "vonmises() (in module sympy.stats)": [[234, "sympy.stats.VonMises"]], "wald() (in module sympy.stats)": [[234, "sympy.stats.Wald"]], "weibull() (in module sympy.stats)": [[234, "sympy.stats.Weibull"]], "wienerprocess (class in sympy.stats)": [[234, "sympy.stats.WienerProcess"]], "wignersemicircle() (in module sympy.stats)": [[234, "sympy.stats.WignerSemicircle"]], "wishart() (in module sympy.stats)": [[234, "sympy.stats.Wishart"]], "yulesimon() (in module sympy.stats)": [[234, "sympy.stats.YuleSimon"]], "zeta() (in module sympy.stats)": [[234, "sympy.stats.Zeta"]], "absorbing_probabilities() (sympy.stats.discretemarkovchain method)": [[234, "sympy.stats.DiscreteMarkovChain.absorbing_probabilities"]], "canonical_form() (sympy.stats.discretemarkovchain method)": [[234, "sympy.stats.DiscreteMarkovChain.canonical_form"]], "cmoment() (in module sympy.stats)": [[234, "sympy.stats.cmoment"]], "communication_classes() (sympy.stats.discretemarkovchain method)": [[234, "sympy.stats.DiscreteMarkovChain.communication_classes"]], "correlation() (in module sympy.stats)": [[234, "sympy.stats.correlation"]], "coskewness() (in module sympy.stats)": [[234, "sympy.stats.coskewness"]], "covariance() (in module sympy.stats)": [[234, "sympy.stats.covariance"]], "decompose() (sympy.stats.discretemarkovchain method)": [[234, "sympy.stats.DiscreteMarkovChain.decompose"]], "density() (in module sympy.stats)": [[234, "sympy.stats.density"]], "entropy() (in module sympy.stats)": [[234, "sympy.stats.entropy"]], "expectation() (sympy.stats.bernoulliprocess method)": [[234, "sympy.stats.BernoulliProcess.expectation"]], "factorial_moment() (in module sympy.stats)": [[234, "sympy.stats.factorial_moment"]], "fixed_row_vector() (sympy.stats.discretemarkovchain method)": [[234, "sympy.stats.DiscreteMarkovChain.fixed_row_vector"]], "fundamental_matrix() (sympy.stats.discretemarkovchain method)": [[234, "sympy.stats.DiscreteMarkovChain.fundamental_matrix"]], "given() (in module sympy.stats)": [[234, "sympy.stats.given"]], "kurtosis() (in module sympy.stats)": [[234, "sympy.stats.kurtosis"]], "limiting_distribution (sympy.stats.discretemarkovchain property)": [[234, "sympy.stats.DiscreteMarkovChain.limiting_distribution"]], "marginal_distribution() (in module sympy.stats)": [[234, "sympy.stats.marginal_distribution"]], "median() (in module sympy.stats)": [[234, "sympy.stats.median"]], "moment() (in module sympy.stats)": [[234, "sympy.stats.moment"]], "probability() (sympy.stats.bernoulliprocess method)": [[234, "sympy.stats.BernoulliProcess.probability"]], "pspace() (in module sympy.stats.rv)": [[234, "sympy.stats.rv.pspace"]], "quantile() (in module sympy.stats)": [[234, "sympy.stats.quantile"]], "random_symbols() (in module sympy.stats.rv)": [[234, "sympy.stats.rv.random_symbols"]], "rs_swap() (in module sympy.stats.rv)": [[234, "sympy.stats.rv.rs_swap"]], "sample() (in module sympy.stats)": [[234, "sympy.stats.sample"]], "sample() (sympy.stats.discretemarkovchain method)": [[234, "sympy.stats.DiscreteMarkovChain.sample"]], "sample_iter() (in module sympy.stats)": [[234, "sympy.stats.sample_iter"]], "sampling_e() (in module sympy.stats.rv)": [[234, "sympy.stats.rv.sampling_E"]], "sampling_p() (in module sympy.stats.rv)": [[234, "sympy.stats.rv.sampling_P"]], "sampling_density() (in module sympy.stats.rv)": [[234, "sympy.stats.rv.sampling_density"]], "skewness() (in module sympy.stats)": [[234, "sympy.stats.skewness"]], "stationary_distribution() (sympy.stats.discretemarkovchain method)": [[234, "sympy.stats.DiscreteMarkovChain.stationary_distribution"]], "std() (in module sympy.stats)": [[234, "sympy.stats.std"]], "sympy.stats": [[234, "module-sympy.stats"]], "sympy.stats.die() (in module sympy.stats.crv_types)": [[234, "sympy.stats.crv_types.sympy.stats.Die"]], "sympy.stats.normal() (in module sympy.stats.crv_types)": [[234, "sympy.stats.crv_types.sympy.stats.Normal"]], "sympy.stats.crv": [[234, "module-sympy.stats.crv"]], "sympy.stats.crv_types": [[234, "module-sympy.stats.crv_types"]], "sympy.stats.frv": [[234, "module-sympy.stats.frv"]], "sympy.stats.frv_types": [[234, "module-sympy.stats.frv_types"]], "sympy.stats.rv": [[234, "module-sympy.stats.rv"]], "transition_probabilities (sympy.stats.discretemarkovchain property)": [[234, "sympy.stats.DiscreteMarkovChain.transition_probabilities"]], "variance() (in module sympy.stats)": [[234, "sympy.stats.variance"]], "where() (in module sympy.stats)": [[234, "sympy.stats.where"]], "immutabledensendimarray (class in sympy.tensor.array)": [[235, "sympy.tensor.array.ImmutableDenseNDimArray"]], "immutablesparsendimarray (class in sympy.tensor.array)": [[235, "sympy.tensor.array.ImmutableSparseNDimArray"]], "mutabledensendimarray (class in sympy.tensor.array)": [[235, "sympy.tensor.array.MutableDenseNDimArray"]], "mutablesparsendimarray (class in sympy.tensor.array)": [[235, "sympy.tensor.array.MutableSparseNDimArray"]], "derive_by_array() (in module sympy.tensor.array)": [[235, "sympy.tensor.array.derive_by_array"]], "permutedims() (in module sympy.tensor.array)": [[235, "sympy.tensor.array.permutedims"]], "sympy.tensor.array": [[235, "module-sympy.tensor.array"]], "tensorcontraction() (in module sympy.tensor.array)": [[235, "sympy.tensor.array.tensorcontraction"]], "tensordiagonal() (in module sympy.tensor.array)": [[235, "sympy.tensor.array.tensordiagonal"]], "tensorproduct() (in module sympy.tensor.array)": [[235, "sympy.tensor.array.tensorproduct"]], "arraycontraction (class in sympy.tensor.array.expressions)": [[236, "sympy.tensor.array.expressions.ArrayContraction"]], "arraydiagonal (class in sympy.tensor.array.expressions)": [[236, "sympy.tensor.array.expressions.ArrayDiagonal"]], "arraytensorproduct (class in sympy.tensor.array.expressions)": [[236, "sympy.tensor.array.expressions.ArrayTensorProduct"]], "permutedims (class in sympy.tensor.array.expressions)": [[236, "sympy.tensor.array.expressions.PermuteDims"]], "sympy.tensor.array.expressions": [[236, "module-sympy.tensor.array.expressions"]], "sympy.tensor": [[237, "module-sympy.tensor"]], "get_contraction_structure() (in module sympy.tensor.index_methods)": [[238, "sympy.tensor.index_methods.get_contraction_structure"]], "get_indices() (in module sympy.tensor.index_methods)": [[238, "sympy.tensor.index_methods.get_indices"]], "sympy.tensor.index_methods": [[238, "module-sympy.tensor.index_methods"]], "idx (class in sympy.tensor.indexed)": [[239, "sympy.tensor.indexed.Idx"]], "indexed (class in sympy.tensor.indexed)": [[239, "sympy.tensor.indexed.Indexed"]], "indexedbase (class in sympy.tensor.indexed)": [[239, "sympy.tensor.indexed.IndexedBase"]], "base (sympy.tensor.indexed.indexed property)": [[239, "sympy.tensor.indexed.Indexed.base"]], "indices (sympy.tensor.indexed.indexed property)": [[239, "sympy.tensor.indexed.Indexed.indices"]], "label (sympy.tensor.indexed.idx property)": [[239, "sympy.tensor.indexed.Idx.label"]], "label (sympy.tensor.indexed.indexedbase property)": [[239, "sympy.tensor.indexed.IndexedBase.label"]], "lower (sympy.tensor.indexed.idx property)": [[239, "sympy.tensor.indexed.Idx.lower"]], "offset (sympy.tensor.indexed.indexedbase property)": [[239, "sympy.tensor.indexed.IndexedBase.offset"]], "ranges (sympy.tensor.indexed.indexed property)": [[239, "sympy.tensor.indexed.Indexed.ranges"]], "rank (sympy.tensor.indexed.indexed property)": [[239, "sympy.tensor.indexed.Indexed.rank"]], "shape (sympy.tensor.indexed.indexed property)": [[239, "sympy.tensor.indexed.Indexed.shape"]], "shape (sympy.tensor.indexed.indexedbase property)": [[239, "sympy.tensor.indexed.IndexedBase.shape"]], "strides (sympy.tensor.indexed.indexedbase property)": [[239, "sympy.tensor.indexed.IndexedBase.strides"]], "sympy.tensor.indexed": [[239, "module-sympy.tensor.indexed"]], "upper (sympy.tensor.indexed.idx property)": [[239, "sympy.tensor.indexed.Idx.upper"]], "tensadd (class in sympy.tensor.tensor)": [[240, "sympy.tensor.tensor.TensAdd"]], "tensexpr (class in sympy.tensor.tensor)": [[240, "sympy.tensor.tensor.TensExpr"]], "tensmul (class in sympy.tensor.tensor)": [[240, "sympy.tensor.tensor.TensMul"]], "tensorhead (class in sympy.tensor.tensor)": [[240, "sympy.tensor.tensor.TensorHead"]], "tensorindex (class in sympy.tensor.tensor)": [[240, "sympy.tensor.tensor.TensorIndex"]], "tensorindextype (class in sympy.tensor.tensor)": [[240, "sympy.tensor.tensor.TensorIndexType"]], "tensorsymmetry (class in sympy.tensor.tensor)": [[240, "sympy.tensor.tensor.TensorSymmetry"]], "tensortype (class in sympy.tensor.tensor)": [[240, "sympy.tensor.tensor.TensorType"]], "_tensormanager (class in sympy.tensor.tensor)": [[240, "sympy.tensor.tensor._TensorManager"]], "canon_bp() (in module sympy.tensor.tensor)": [[240, "sympy.tensor.tensor.canon_bp"]], "canon_bp() (sympy.tensor.tensor.tensadd method)": [[240, "sympy.tensor.tensor.TensAdd.canon_bp"]], "canon_bp() (sympy.tensor.tensor.tensmul method)": [[240, "sympy.tensor.tensor.TensMul.canon_bp"]], "clear() (sympy.tensor.tensor._tensormanager method)": [[240, "sympy.tensor.tensor._TensorManager.clear"]], "comm_i2symbol() (sympy.tensor.tensor._tensormanager method)": [[240, "sympy.tensor.tensor._TensorManager.comm_i2symbol"]], "comm_symbols2i() (sympy.tensor.tensor._tensormanager method)": [[240, "sympy.tensor.tensor._TensorManager.comm_symbols2i"]], "commutes_with() (sympy.tensor.tensor.tensorhead method)": [[240, "sympy.tensor.tensor.TensorHead.commutes_with"]], "contract_metric() (sympy.tensor.tensor.tensadd method)": [[240, "sympy.tensor.tensor.TensAdd.contract_metric"]], "contract_metric() (sympy.tensor.tensor.tensmul method)": [[240, "sympy.tensor.tensor.TensMul.contract_metric"]], "direct_product() (sympy.tensor.tensor.tensorsymmetry class method)": [[240, "sympy.tensor.tensor.TensorSymmetry.direct_product"]], "fully_symmetric() (sympy.tensor.tensor.tensorsymmetry class method)": [[240, "sympy.tensor.tensor.TensorSymmetry.fully_symmetric"]], "get_comm() (sympy.tensor.tensor._tensormanager method)": [[240, "sympy.tensor.tensor._TensorManager.get_comm"]], "get_free_indices() (sympy.tensor.tensor.tensmul method)": [[240, "sympy.tensor.tensor.TensMul.get_free_indices"]], "get_indices() (sympy.tensor.tensor.tensmul method)": [[240, "sympy.tensor.tensor.TensMul.get_indices"]], "get_matrix() (sympy.tensor.tensor.tensexpr method)": [[240, "sympy.tensor.tensor.TensExpr.get_matrix"]], "no_symmetry() (sympy.tensor.tensor.tensorsymmetry class method)": [[240, "sympy.tensor.tensor.TensorSymmetry.no_symmetry"]], "perm2tensor() (sympy.tensor.tensor.tensmul method)": [[240, "sympy.tensor.tensor.TensMul.perm2tensor"]], "replace_with_arrays() (sympy.tensor.tensor.tensexpr method)": [[240, "sympy.tensor.tensor.TensExpr.replace_with_arrays"]], "riemann() (sympy.tensor.tensor.tensorsymmetry class method)": [[240, "sympy.tensor.tensor.TensorSymmetry.riemann"]], "riemann_cyclic() (in module sympy.tensor.tensor)": [[240, "sympy.tensor.tensor.riemann_cyclic"]], "riemann_cyclic_replace() (in module sympy.tensor.tensor)": [[240, "sympy.tensor.tensor.riemann_cyclic_replace"]], "set_comm() (sympy.tensor.tensor._tensormanager method)": [[240, "sympy.tensor.tensor._TensorManager.set_comm"]], "set_comms() (sympy.tensor.tensor._tensormanager method)": [[240, "sympy.tensor.tensor._TensorManager.set_comms"]], "sorted_components() (sympy.tensor.tensor.tensmul method)": [[240, "sympy.tensor.tensor.TensMul.sorted_components"]], "split() (sympy.tensor.tensor.tensmul method)": [[240, "sympy.tensor.tensor.TensMul.split"]], "sympy.tensor.tensor": [[240, "module-sympy.tensor.tensor"]], "tensor_heads() (in module sympy.tensor.tensor)": [[240, "sympy.tensor.tensor.tensor_heads"]], "tensorsymmetry() (in module sympy.tensor.tensor)": [[240, "sympy.tensor.tensor.tensorsymmetry"]], "partialderivative (class in sympy.tensor.toperators)": [[241, "sympy.tensor.toperators.PartialDerivative"]], "sympy.tensor.toperators": [[241, "module-sympy.tensor.toperators"]], "sympy.testing": [[242, "module-sympy.testing"]], "skip() (in module sympy.testing.pytest)": [[243, "sympy.testing.pytest.SKIP"]], "nocache_fail() (in module sympy.testing.pytest)": [[243, "sympy.testing.pytest.nocache_fail"]], "raises() (in module sympy.testing.pytest)": [[243, "sympy.testing.pytest.raises"]], "skip_under_pyodide() (in module sympy.testing.pytest)": [[243, "sympy.testing.pytest.skip_under_pyodide"]], "sympy.testing.pytest": [[243, "module-sympy.testing.pytest"]], "warns() (in module sympy.testing.pytest)": [[243, "sympy.testing.pytest.warns"]], "warns_deprecated_sympy() (in module sympy.testing.pytest)": [[243, "sympy.testing.pytest.warns_deprecated_sympy"]], "sympy.testing.randtest": [[244, "module-sympy.testing.randtest"]], "pytestreporter (class in sympy.testing.runtests)": [[245, "sympy.testing.runtests.PyTestReporter"]], "reporter (class in sympy.testing.runtests)": [[245, "sympy.testing.runtests.Reporter"]], "sympydoctestfinder (class in sympy.testing.runtests)": [[245, "sympy.testing.runtests.SymPyDocTestFinder"]], "sympydoctestrunner (class in sympy.testing.runtests)": [[245, "sympy.testing.runtests.SymPyDocTestRunner"]], "sympyoutputchecker (class in sympy.testing.runtests)": [[245, "sympy.testing.runtests.SymPyOutputChecker"]], "sympytestresults (class in sympy.testing.runtests)": [[245, "sympy.testing.runtests.SymPyTestResults"]], "attempted (sympy.testing.runtests.sympytestresults attribute)": [[245, "sympy.testing.runtests.SymPyTestResults.attempted"]], "check_output() (sympy.testing.runtests.sympyoutputchecker method)": [[245, "sympy.testing.runtests.SymPyOutputChecker.check_output"]], "convert_to_native_paths() (in module sympy.testing.runtests)": [[245, "sympy.testing.runtests.convert_to_native_paths"]], "doctest() (in module sympy.testing.runtests)": [[245, "sympy.testing.runtests.doctest"]], "failed (sympy.testing.runtests.sympytestresults attribute)": [[245, "sympy.testing.runtests.SymPyTestResults.failed"]], "get_sympy_dir() (in module sympy.testing.runtests)": [[245, "sympy.testing.runtests.get_sympy_dir"]], "raise_on_deprecated() (in module sympy.testing.runtests)": [[245, "sympy.testing.runtests.raise_on_deprecated"]], "run() (sympy.testing.runtests.sympydoctestrunner method)": [[245, "sympy.testing.runtests.SymPyDocTestRunner.run"]], "run_all_tests() (in module sympy.testing.runtests)": [[245, "sympy.testing.runtests.run_all_tests"]], "run_in_subprocess_with_hash_randomization() (in module sympy.testing.runtests)": [[245, "sympy.testing.runtests.run_in_subprocess_with_hash_randomization"]], "split_list() (in module sympy.testing.runtests)": [[245, "sympy.testing.runtests.split_list"]], "sympy.testing.runtests": [[245, "module-sympy.testing.runtests"]], "sympytestfile() (in module sympy.testing.runtests)": [[245, "sympy.testing.runtests.sympytestfile"]], "test() (in module sympy.testing.runtests)": [[245, "sympy.testing.runtests.test"]], "write() (sympy.testing.runtests.pytestreporter method)": [[245, "sympy.testing.runtests.PyTestReporter.write"]], "codewrapper (class in sympy.utilities.autowrap)": [[246, "sympy.utilities.autowrap.CodeWrapper"]], "cythoncodewrapper (class in sympy.utilities.autowrap)": [[246, "sympy.utilities.autowrap.CythonCodeWrapper"]], "dummywrapper (class in sympy.utilities.autowrap)": [[246, "sympy.utilities.autowrap.DummyWrapper"]], "f2pycodewrapper (class in sympy.utilities.autowrap)": [[246, "sympy.utilities.autowrap.F2PyCodeWrapper"]], "ufuncifycodewrapper (class in sympy.utilities.autowrap)": [[246, "sympy.utilities.autowrap.UfuncifyCodeWrapper"]], "autowrap() (in module sympy.utilities.autowrap)": [[246, "sympy.utilities.autowrap.autowrap"]], "binary_function() (in module sympy.utilities.autowrap)": [[246, "sympy.utilities.autowrap.binary_function"]], "dump_c() (sympy.utilities.autowrap.ufuncifycodewrapper method)": [[246, "sympy.utilities.autowrap.UfuncifyCodeWrapper.dump_c"]], "dump_pyx() (sympy.utilities.autowrap.cythoncodewrapper method)": [[246, "sympy.utilities.autowrap.CythonCodeWrapper.dump_pyx"]], "sympy.utilities.autowrap": [[246, "module-sympy.utilities.autowrap"]], "ufuncify() (in module sympy.utilities.autowrap)": [[246, "sympy.utilities.autowrap.ufuncify"]], "argument (class in sympy.utilities.codegen)": [[247, "sympy.utilities.codegen.Argument"]], "ccodegen (class in sympy.utilities.codegen)": [[247, "sympy.utilities.codegen.CCodeGen"]], "codegen (class in sympy.utilities.codegen)": [[247, "sympy.utilities.codegen.CodeGen"]], "datatype (class in sympy.utilities.codegen)": [[247, "sympy.utilities.codegen.DataType"]], "fcodegen (class in sympy.utilities.codegen)": [[247, "sympy.utilities.codegen.FCodeGen"]], "juliacodegen (class in sympy.utilities.codegen)": [[247, "sympy.utilities.codegen.JuliaCodeGen"]], "octavecodegen (class in sympy.utilities.codegen)": [[247, "sympy.utilities.codegen.OctaveCodeGen"]], "outputargument (class in sympy.utilities.codegen)": [[247, "sympy.utilities.codegen.OutputArgument"]], "result (class in sympy.utilities.codegen)": [[247, "sympy.utilities.codegen.Result"]], "routine (class in sympy.utilities.codegen)": [[247, "sympy.utilities.codegen.Routine"]], "rustcodegen (class in sympy.utilities.codegen)": [[247, "sympy.utilities.codegen.RustCodeGen"]], "codegen() (in module sympy.utilities.codegen)": [[247, "sympy.utilities.codegen.codegen"]], "dump_c() (sympy.utilities.codegen.ccodegen method)": [[247, "sympy.utilities.codegen.CCodeGen.dump_c"]], "dump_code() (sympy.utilities.codegen.codegen method)": [[247, "sympy.utilities.codegen.CodeGen.dump_code"]], "dump_f95() (sympy.utilities.codegen.fcodegen method)": [[247, "sympy.utilities.codegen.FCodeGen.dump_f95"]], "dump_h() (sympy.utilities.codegen.ccodegen method)": [[247, "sympy.utilities.codegen.CCodeGen.dump_h"]], "dump_h() (sympy.utilities.codegen.fcodegen method)": [[247, "sympy.utilities.codegen.FCodeGen.dump_h"]], "dump_jl() (sympy.utilities.codegen.juliacodegen method)": [[247, "sympy.utilities.codegen.JuliaCodeGen.dump_jl"]], "dump_m() (sympy.utilities.codegen.octavecodegen method)": [[247, "sympy.utilities.codegen.OctaveCodeGen.dump_m"]], "dump_rs() (sympy.utilities.codegen.rustcodegen method)": [[247, "sympy.utilities.codegen.RustCodeGen.dump_rs"]], "get_default_datatype() (in module sympy.utilities.codegen)": [[247, "sympy.utilities.codegen.get_default_datatype"]], "get_interface() (sympy.utilities.codegen.fcodegen method)": [[247, "sympy.utilities.codegen.FCodeGen.get_interface"]], "get_prototype() (sympy.utilities.codegen.ccodegen method)": [[247, "sympy.utilities.codegen.CCodeGen.get_prototype"]], "get_prototype() (sympy.utilities.codegen.rustcodegen method)": [[247, "sympy.utilities.codegen.RustCodeGen.get_prototype"]], "make_routine() (in module sympy.utilities.codegen)": [[247, "sympy.utilities.codegen.make_routine"]], "result_variables (sympy.utilities.codegen.routine property)": [[247, "sympy.utilities.codegen.Routine.result_variables"]], "routine() (sympy.utilities.codegen.codegen method)": [[247, "sympy.utilities.codegen.CodeGen.routine"]], "routine() (sympy.utilities.codegen.juliacodegen method)": [[247, "sympy.utilities.codegen.JuliaCodeGen.routine"]], "routine() (sympy.utilities.codegen.octavecodegen method)": [[247, "sympy.utilities.codegen.OctaveCodeGen.routine"]], "routine() (sympy.utilities.codegen.rustcodegen method)": [[247, "sympy.utilities.codegen.RustCodeGen.routine"]], "sympy.utilities.codegen": [[247, "module-sympy.utilities.codegen"]], "variables (sympy.utilities.codegen.routine property)": [[247, "sympy.utilities.codegen.Routine.variables"]], "write() (sympy.utilities.codegen.codegen method)": [[247, "sympy.utilities.codegen.CodeGen.write"]], "conserve_mpmath_dps() (in module sympy.utilities.decorator)": [[248, "sympy.utilities.decorator.conserve_mpmath_dps"]], "deprecated() (in module sympy.utilities.decorator)": [[248, "sympy.utilities.decorator.deprecated"]], "doctest_depends_on() (in module sympy.utilities.decorator)": [[248, "sympy.utilities.decorator.doctest_depends_on"]], "memoize_property() (in module sympy.utilities.decorator)": [[248, "sympy.utilities.decorator.memoize_property"]], "no_attrs_in_subclass (class in sympy.utilities.decorator)": [[248, "sympy.utilities.decorator.no_attrs_in_subclass"]], "public() (in module sympy.utilities.decorator)": [[248, "sympy.utilities.decorator.public"]], "sympy.utilities.decorator": [[248, "module-sympy.utilities.decorator"]], "threaded() (in module sympy.utilities.decorator)": [[248, "sympy.utilities.decorator.threaded"]], "threaded_factory() (in module sympy.utilities.decorator)": [[248, "sympy.utilities.decorator.threaded_factory"]], "xthreaded() (in module sympy.utilities.decorator)": [[248, "sympy.utilities.decorator.xthreaded"]], "multisetpartitiontraverser (class in sympy.utilities.enumerative)": [[249, "sympy.utilities.enumerative.MultisetPartitionTraverser"]], "count_partitions() (sympy.utilities.enumerative.multisetpartitiontraverser method)": [[249, "sympy.utilities.enumerative.MultisetPartitionTraverser.count_partitions"]], "enum_all() (sympy.utilities.enumerative.multisetpartitiontraverser method)": [[249, "sympy.utilities.enumerative.MultisetPartitionTraverser.enum_all"]], "enum_large() (sympy.utilities.enumerative.multisetpartitiontraverser method)": [[249, "sympy.utilities.enumerative.MultisetPartitionTraverser.enum_large"]], "enum_range() (sympy.utilities.enumerative.multisetpartitiontraverser method)": [[249, "sympy.utilities.enumerative.MultisetPartitionTraverser.enum_range"]], "enum_small() (sympy.utilities.enumerative.multisetpartitiontraverser method)": [[249, "sympy.utilities.enumerative.MultisetPartitionTraverser.enum_small"]], "factoring_visitor() (in module sympy.utilities.enumerative)": [[249, "sympy.utilities.enumerative.factoring_visitor"]], "list_visitor() (in module sympy.utilities.enumerative)": [[249, "sympy.utilities.enumerative.list_visitor"]], "multiset_partitions_taocp() (in module sympy.utilities.enumerative)": [[249, "sympy.utilities.enumerative.multiset_partitions_taocp"]], "sympy.utilities.enumerative": [[249, "module-sympy.utilities.enumerative"]], "sympydeprecationwarning": [[250, "sympy.utilities.exceptions.SymPyDeprecationWarning"]], "ignore_warnings() (in module sympy.utilities.exceptions)": [[250, "sympy.utilities.exceptions.ignore_warnings"]], "sympy.utilities.exceptions": [[250, "module-sympy.utilities.exceptions"]], "sympy_deprecation_warning() (in module sympy.utilities.exceptions)": [[250, "sympy.utilities.exceptions.sympy_deprecation_warning"]], "sympy.utilities": [[251, "module-sympy.utilities"]], "notiterable (class in sympy.utilities.iterables)": [[252, "sympy.utilities.iterables.NotIterable"]], "binary_partitions() (in module sympy.utilities.iterables)": [[252, "sympy.utilities.iterables.binary_partitions"]], "bracelets() (in module sympy.utilities.iterables)": [[252, "sympy.utilities.iterables.bracelets"]], "capture() (in module sympy.utilities.iterables)": [[252, "sympy.utilities.iterables.capture"]], "common_prefix() (in module sympy.utilities.iterables)": [[252, "sympy.utilities.iterables.common_prefix"]], "common_suffix() (in module sympy.utilities.iterables)": [[252, "sympy.utilities.iterables.common_suffix"]], "connected_components() (in module sympy.utilities.iterables)": [[252, "sympy.utilities.iterables.connected_components"]], "dict_merge() (in module sympy.utilities.iterables)": [[252, "sympy.utilities.iterables.dict_merge"]], "filter_symbols() (in module sympy.utilities.iterables)": [[252, "sympy.utilities.iterables.filter_symbols"]], "flatten() (in module sympy.utilities.iterables)": [[252, "sympy.utilities.iterables.flatten"]], "generate_bell() (in module sympy.utilities.iterables)": [[252, "sympy.utilities.iterables.generate_bell"]], "generate_derangements() (in module sympy.utilities.iterables)": [[252, "sympy.utilities.iterables.generate_derangements"]], "generate_involutions() (in module sympy.utilities.iterables)": [[252, "sympy.utilities.iterables.generate_involutions"]], "generate_oriented_forest() (in module sympy.utilities.iterables)": [[252, "sympy.utilities.iterables.generate_oriented_forest"]], "group() (in module sympy.utilities.iterables)": [[252, "sympy.utilities.iterables.group"]], "has_dups() (in module sympy.utilities.iterables)": [[252, "sympy.utilities.iterables.has_dups"]], "has_variety() (in module sympy.utilities.iterables)": [[252, "sympy.utilities.iterables.has_variety"]], "ibin() (in module sympy.utilities.iterables)": [[252, "sympy.utilities.iterables.ibin"]], "iproduct() (in module sympy.utilities.iterables)": [[252, "sympy.utilities.iterables.iproduct"]], "is_palindromic() (in module sympy.utilities.iterables)": [[252, "sympy.utilities.iterables.is_palindromic"]], "is_sequence() (in module sympy.utilities.iterables)": [[252, "sympy.utilities.iterables.is_sequence"]], "iterable() (in module sympy.utilities.iterables)": [[252, "sympy.utilities.iterables.iterable"]], "kbins() (in module sympy.utilities.iterables)": [[252, "sympy.utilities.iterables.kbins"]], "least_rotation() (in module sympy.utilities.iterables)": [[252, "sympy.utilities.iterables.least_rotation"]], "minlex() (in module sympy.utilities.iterables)": [[252, "sympy.utilities.iterables.minlex"]], "multiset() (in module sympy.utilities.iterables)": [[252, "sympy.utilities.iterables.multiset"]], "multiset_combinations() (in module sympy.utilities.iterables)": [[252, "sympy.utilities.iterables.multiset_combinations"]], "multiset_derangements() (in module sympy.utilities.iterables)": [[252, "sympy.utilities.iterables.multiset_derangements"]], "multiset_partitions() (in module sympy.utilities.iterables)": [[252, "sympy.utilities.iterables.multiset_partitions"]], "multiset_permutations() (in module sympy.utilities.iterables)": [[252, "sympy.utilities.iterables.multiset_permutations"]], "necklaces() (in module sympy.utilities.iterables)": [[252, "sympy.utilities.iterables.necklaces"]], "numbered_symbols() (in module sympy.utilities.iterables)": [[252, "sympy.utilities.iterables.numbered_symbols"]], "ordered_partitions() (in module sympy.utilities.iterables)": [[252, "sympy.utilities.iterables.ordered_partitions"]], "partitions() (in module sympy.utilities.iterables)": [[252, "sympy.utilities.iterables.partitions"]], "permute_signs() (in module sympy.utilities.iterables)": [[252, "sympy.utilities.iterables.permute_signs"]], "postfixes() (in module sympy.utilities.iterables)": [[252, "sympy.utilities.iterables.postfixes"]], "prefixes() (in module sympy.utilities.iterables)": [[252, "sympy.utilities.iterables.prefixes"]], "random_derangement() (in module sympy.utilities.iterables)": [[252, "sympy.utilities.iterables.random_derangement"]], "reshape() (in module sympy.utilities.iterables)": [[252, "sympy.utilities.iterables.reshape"]], "rotate_left() (in module sympy.utilities.iterables)": [[252, "sympy.utilities.iterables.rotate_left"]], "rotate_right() (in module sympy.utilities.iterables)": [[252, "sympy.utilities.iterables.rotate_right"]], "rotations() (in module sympy.utilities.iterables)": [[252, "sympy.utilities.iterables.rotations"]], "roundrobin() (in module sympy.utilities.iterables)": [[252, "sympy.utilities.iterables.roundrobin"]], "runs() (in module sympy.utilities.iterables)": [[252, "sympy.utilities.iterables.runs"]], "sequence_partitions() (in module sympy.utilities.iterables)": [[252, "sympy.utilities.iterables.sequence_partitions"]], "sequence_partitions_empty() (in module sympy.utilities.iterables)": [[252, "sympy.utilities.iterables.sequence_partitions_empty"]], "sift() (in module sympy.utilities.iterables)": [[252, "sympy.utilities.iterables.sift"]], "signed_permutations() (in module sympy.utilities.iterables)": [[252, "sympy.utilities.iterables.signed_permutations"]], "strongly_connected_components() (in module sympy.utilities.iterables)": [[252, "sympy.utilities.iterables.strongly_connected_components"]], "subsets() (in module sympy.utilities.iterables)": [[252, "sympy.utilities.iterables.subsets"]], "sympy.utilities.iterables": [[252, "module-sympy.utilities.iterables"]], "take() (in module sympy.utilities.iterables)": [[252, "sympy.utilities.iterables.take"]], "topological_sort() (in module sympy.utilities.iterables)": [[252, "sympy.utilities.iterables.topological_sort"]], "unflatten() (in module sympy.utilities.iterables)": [[252, "sympy.utilities.iterables.unflatten"]], "uniq() (in module sympy.utilities.iterables)": [[252, "sympy.utilities.iterables.uniq"]], "variations() (in module sympy.utilities.iterables)": [[252, "sympy.utilities.iterables.variations"]], "implemented_function() (in module sympy.utilities.lambdify)": [[253, "sympy.utilities.lambdify.implemented_function"]], "lambdastr() (in module sympy.utilities.lambdify)": [[253, "sympy.utilities.lambdify.lambdastr"]], "lambdify() (in module sympy.utilities.lambdify)": [[253, "sympy.utilities.lambdify.lambdify"]], "sympy.utilities.lambdify": [[253, "module-sympy.utilities.lambdify"]], "assoc_recurrence_memo() (in module sympy.utilities.memoization)": [[254, "sympy.utilities.memoization.assoc_recurrence_memo"]], "recurrence_memo() (in module sympy.utilities.memoization)": [[254, "sympy.utilities.memoization.recurrence_memo"]], "sympy.utilities.memoization": [[254, "module-sympy.utilities.memoization"]], "as_int() (in module sympy.utilities.misc)": [[255, "sympy.utilities.misc.as_int"]], "debug() (in module sympy.utilities.misc)": [[255, "sympy.utilities.misc.debug"]], "debug_decorator() (in module sympy.utilities.misc)": [[255, "sympy.utilities.misc.debug_decorator"]], "debugf() (in module sympy.utilities.misc)": [[255, "sympy.utilities.misc.debugf"]], "filldedent() (in module sympy.utilities.misc)": [[255, "sympy.utilities.misc.filldedent"]], "find_executable() (in module sympy.utilities.misc)": [[255, "sympy.utilities.misc.find_executable"]], "func_name() (in module sympy.utilities.misc)": [[255, "sympy.utilities.misc.func_name"]], "ordinal() (in module sympy.utilities.misc)": [[255, "sympy.utilities.misc.ordinal"]], "rawlines() (in module sympy.utilities.misc)": [[255, "sympy.utilities.misc.rawlines"]], "replace() (in module sympy.utilities.misc)": [[255, "sympy.utilities.misc.replace"]], "strlines() (in module sympy.utilities.misc)": [[255, "sympy.utilities.misc.strlines"]], "sympy.utilities.misc": [[255, "module-sympy.utilities.misc"]], "translate() (in module sympy.utilities.misc)": [[255, "sympy.utilities.misc.translate"]], "get_resource() (in module sympy.utilities.pkgdata)": [[256, "sympy.utilities.pkgdata.get_resource"]], "sympy.utilities.pkgdata": [[256, "module-sympy.utilities.pkgdata"]], "get_class() (in module sympy.utilities.source)": [[257, "sympy.utilities.source.get_class"]], "get_mod_func() (in module sympy.utilities.source)": [[257, "sympy.utilities.source.get_mod_func"]], "sympy.utilities.source": [[257, "module-sympy.utilities.source"]], "sympy.utilities.timeutils": [[258, "module-sympy.utilities.timeutils"]], "timed() (in module sympy.utilities.timeutils)": [[258, "sympy.utilities.timeutils.timed"]], "coordsys3d (class in sympy.vector.coordsysrect)": [[259, "sympy.vector.coordsysrect.CoordSys3D"]], "del (class in sympy.vector.deloperator)": [[259, "sympy.vector.deloperator.Del"]], "dyadic (class in sympy.vector.dyadic)": [[259, "sympy.vector.dyadic.Dyadic"]], "implicitregion (class in sympy.vector.implicitregion)": [[259, "sympy.vector.implicitregion.ImplicitRegion"]], "parametricintegral (class in sympy.vector.integrals)": [[259, "sympy.vector.integrals.ParametricIntegral"]], "parametricregion (class in sympy.vector.parametricregion)": [[259, "sympy.vector.parametricregion.ParametricRegion"]], "vector (class in sympy.vector.vector)": [[259, "sympy.vector.vector.Vector"]], "__init__() (sympy.vector.coordsysrect.coordsys3d method)": [[259, "sympy.vector.coordsysrect.CoordSys3D.__init__"]], "components (sympy.vector.dyadic.dyadic property)": [[259, "sympy.vector.dyadic.Dyadic.components"]], "components (sympy.vector.vector.vector property)": [[259, "sympy.vector.vector.Vector.components"]], "create_new() (sympy.vector.coordsysrect.coordsys3d method)": [[259, "sympy.vector.coordsysrect.CoordSys3D.create_new"]], "cross() (sympy.vector.deloperator.del method)": [[259, "sympy.vector.deloperator.Del.cross"]], "cross() (sympy.vector.dyadic.dyadic method)": [[259, "sympy.vector.dyadic.Dyadic.cross"]], "cross() (sympy.vector.vector.vector method)": [[259, "sympy.vector.vector.Vector.cross"]], "dot() (sympy.vector.deloperator.del method)": [[259, "sympy.vector.deloperator.Del.dot"]], "dot() (sympy.vector.dyadic.dyadic method)": [[259, "sympy.vector.dyadic.Dyadic.dot"]], "dot() (sympy.vector.vector.vector method)": [[259, "sympy.vector.vector.Vector.dot"]], "gradient() (sympy.vector.deloperator.del method)": [[259, "sympy.vector.deloperator.Del.gradient"]], "locate_new() (sympy.vector.coordsysrect.coordsys3d method)": [[259, "sympy.vector.coordsysrect.CoordSys3D.locate_new"]], "magnitude() (sympy.vector.vector.vector method)": [[259, "sympy.vector.vector.Vector.magnitude"]], "multiplicity() (sympy.vector.implicitregion.implicitregion method)": [[259, "sympy.vector.implicitregion.ImplicitRegion.multiplicity"]], "normalize() (sympy.vector.vector.vector method)": [[259, "sympy.vector.vector.Vector.normalize"]], "orient_new() (sympy.vector.coordsysrect.coordsys3d method)": [[259, "sympy.vector.coordsysrect.CoordSys3D.orient_new"]], "orient_new_axis() (sympy.vector.coordsysrect.coordsys3d method)": [[259, "sympy.vector.coordsysrect.CoordSys3D.orient_new_axis"]], "orient_new_body() (sympy.vector.coordsysrect.coordsys3d method)": [[259, "sympy.vector.coordsysrect.CoordSys3D.orient_new_body"]], "orient_new_quaternion() (sympy.vector.coordsysrect.coordsys3d method)": [[259, "sympy.vector.coordsysrect.CoordSys3D.orient_new_quaternion"]], "orient_new_space() (sympy.vector.coordsysrect.coordsys3d method)": [[259, "sympy.vector.coordsysrect.CoordSys3D.orient_new_space"]], "outer() (sympy.vector.vector.vector method)": [[259, "sympy.vector.vector.Vector.outer"]], "position_wrt() (sympy.vector.coordsysrect.coordsys3d method)": [[259, "sympy.vector.coordsysrect.CoordSys3D.position_wrt"]], "projection() (sympy.vector.vector.vector method)": [[259, "sympy.vector.vector.Vector.projection"]], "rational_parametrization() (sympy.vector.implicitregion.implicitregion method)": [[259, "sympy.vector.implicitregion.ImplicitRegion.rational_parametrization"]], "regular_point() (sympy.vector.implicitregion.implicitregion method)": [[259, "sympy.vector.implicitregion.ImplicitRegion.regular_point"]], "rotation_matrix() (sympy.vector.coordsysrect.coordsys3d method)": [[259, "sympy.vector.coordsysrect.CoordSys3D.rotation_matrix"]], "scalar_map() (sympy.vector.coordsysrect.coordsys3d method)": [[259, "sympy.vector.coordsysrect.CoordSys3D.scalar_map"]], "separate() (sympy.vector.vector.vector method)": [[259, "sympy.vector.vector.Vector.separate"]], "singular_points() (sympy.vector.implicitregion.implicitregion method)": [[259, "sympy.vector.implicitregion.ImplicitRegion.singular_points"]], "to_matrix() (sympy.vector.dyadic.dyadic method)": [[259, "sympy.vector.dyadic.Dyadic.to_matrix"]], "to_matrix() (sympy.vector.vector.vector method)": [[259, "sympy.vector.vector.Vector.to_matrix"]], "axisorienter (class in sympy.vector.orienters)": [[261, "sympy.vector.orienters.AxisOrienter"]], "bodyorienter (class in sympy.vector.orienters)": [[261, "sympy.vector.orienters.BodyOrienter"]], "orienter (class in sympy.vector.orienters)": [[261, "sympy.vector.orienters.Orienter"]], "quaternionorienter (class in sympy.vector.orienters)": [[261, "sympy.vector.orienters.QuaternionOrienter"]], "spaceorienter (class in sympy.vector.orienters)": [[261, "sympy.vector.orienters.SpaceOrienter"]], "__init__() (sympy.vector.orienters.axisorienter method)": [[261, "sympy.vector.orienters.AxisOrienter.__init__"]], "__init__() (sympy.vector.orienters.bodyorienter method)": [[261, "sympy.vector.orienters.BodyOrienter.__init__"]], "__init__() (sympy.vector.orienters.quaternionorienter method)": [[261, "sympy.vector.orienters.QuaternionOrienter.__init__"]], "__init__() (sympy.vector.orienters.spaceorienter method)": [[261, "sympy.vector.orienters.SpaceOrienter.__init__"]], "rotation_matrix() (sympy.vector.orienters.axisorienter method)": [[261, "sympy.vector.orienters.AxisOrienter.rotation_matrix"]], "rotation_matrix() (sympy.vector.orienters.orienter method)": [[261, "sympy.vector.orienters.Orienter.rotation_matrix"]], "curl() (in module sympy.vector)": [[262, "sympy.vector.curl"]], "divergence() (in module sympy.vector)": [[262, "sympy.vector.divergence"]], "express() (in module sympy.vector)": [[262, "sympy.vector.express"]], "gradient() (in module sympy.vector)": [[262, "sympy.vector.gradient"]], "is_conservative() (in module sympy.vector)": [[262, "sympy.vector.is_conservative"]], "is_solenoidal() (in module sympy.vector)": [[262, "sympy.vector.is_solenoidal"]], "matrix_to_vector() (in module sympy.vector)": [[262, "sympy.vector.matrix_to_vector"]], "scalar_potential() (in module sympy.vector)": [[262, "sympy.vector.scalar_potential"]], "scalar_potential_difference() (in module sympy.vector)": [[262, "sympy.vector.scalar_potential_difference"]], "vector_integrate() (in module sympy.vector.integrals)": [[262, "sympy.vector.integrals.vector_integrate"]], "sympy.vector": [[267, "module-sympy.vector"]], "sympy.physics": [[276, "module-sympy.physics"]]}})